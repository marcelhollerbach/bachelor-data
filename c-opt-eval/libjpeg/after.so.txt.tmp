
libjpeg/after.so:     file format elf64-x86-64


Disassembly of section .init:

0000000000004000 <_init>:
endbr64 
sub    $0x8,%rsp
mov    0x69f41(%rip),%rax        # 6df50 <__gmon_start__>
test   %rax,%rax
je     4016 <_init+0x16>
callq  *%rax
add    $0x8,%rsp
retq   

Disassembly of section .plt:

0000000000004020 <.plt>:
pushq  0x69fe2(%rip)        # 6e008 <_GLOBAL_OFFSET_TABLE_+0x8>
jmpq   *0x69fe4(%rip)        # 6e010 <_GLOBAL_OFFSET_TABLE_+0x10>
nopl   0x0(%rax)

0000000000004030 <jpeg_destroy@plt>:
jmpq   *0x69fe2(%rip)        # 6e018 <jpeg_destroy@@LIBJPEG_6.2+0x597c8>
pushq  $0x0
jmpq   4020 <.plt>

0000000000004040 <getenv@plt>:
jmpq   *0x69fda(%rip)        # 6e020 <getenv@GLIBC_2.2.5>
pushq  $0x1
jmpq   4020 <.plt>

0000000000004050 <jinit_d_coef_controller@plt>:
jmpq   *0x69fd2(%rip)        # 6e028 <jinit_d_coef_controller@@LIBJPEG_6.2+0x53a68>
pushq  $0x2
jmpq   4020 <.plt>

0000000000004060 <free@plt>:
jmpq   *0x69fca(%rip)        # 6e030 <free@GLIBC_2.2.5>
pushq  $0x3
jmpq   4020 <.plt>

0000000000004070 <jpeg_default_colorspace@plt>:
jmpq   *0x69fc2(%rip)        # 6e038 <jpeg_default_colorspace@@LIBJPEG_6.2+0x59178>
pushq  $0x4
jmpq   4020 <.plt>

0000000000004080 <jinit_huff_encoder@plt>:
jmpq   *0x69fba(%rip)        # 6e040 <jinit_huff_encoder@@LIBJPEG_6.2+0x66080>
pushq  $0x5
jmpq   4020 <.plt>

0000000000004090 <jinit_arith_decoder@plt>:
jmpq   *0x69fb2(%rip)        # 6e048 <jinit_arith_decoder@@LIBJPEG_6.2+0x323f8>
pushq  $0x6
jmpq   4020 <.plt>

00000000000040a0 <jpeg_get_large@plt>:
jmpq   *0x69faa(%rip)        # 6e050 <jpeg_get_large@@LIBJPEG_6.2+0x33f70>
pushq  $0x7
jmpq   4020 <.plt>

00000000000040b0 <jinit_huff_decoder@plt>:
jmpq   *0x69fa2(%rip)        # 6e058 <jinit_huff_decoder@@LIBJPEG_6.2+0x4e338>
pushq  $0x8
jmpq   4020 <.plt>

00000000000040c0 <ferror@plt>:
jmpq   *0x69f9a(%rip)        # 6e060 <ferror@GLIBC_2.2.5>
pushq  $0x9
jmpq   4020 <.plt>

00000000000040d0 <jpeg_make_c_derived_tbl@plt>:
jmpq   *0x69f92(%rip)        # 6e068 <jpeg_make_c_derived_tbl@@LIBJPEG_6.2+0x66028>
pushq  $0xa
jmpq   4020 <.plt>

00000000000040e0 <fread@plt>:
jmpq   *0x69f8a(%rip)        # 6e070 <fread@GLIBC_2.2.5>
pushq  $0xb
jmpq   4020 <.plt>

00000000000040f0 <jpeg_gen_optimal_table@plt>:
jmpq   *0x69f82(%rip)        # 6e078 <jpeg_gen_optimal_table@@LIBJPEG_6.2+0x65dc8>
pushq  $0xc
jmpq   4020 <.plt>

0000000000004100 <jinit_2pass_quantizer@plt>:
jmpq   *0x69f7a(%rip)        # 6e080 <jinit_2pass_quantizer@@LIBJPEG_6.2+0x372e0>
pushq  $0xd
jmpq   4020 <.plt>

0000000000004110 <jpeg_set_defaults@plt>:
jmpq   *0x69f72(%rip)        # 6e088 <jpeg_set_defaults@@LIBJPEG_6.2+0x597f8>
pushq  $0xe
jmpq   4020 <.plt>

0000000000004120 <jinit_marker_writer@plt>:
jmpq   *0x69f6a(%rip)        # 6e090 <jinit_marker_writer@@LIBJPEG_6.2+0x5b700>
pushq  $0xf
jmpq   4020 <.plt>

0000000000004130 <jpeg_abort@plt>:
jmpq   *0x69f62(%rip)        # 6e098 <jpeg_abort@@LIBJPEG_6.2+0x598c8>
pushq  $0x10
jmpq   4020 <.plt>

0000000000004140 <jinit_c_main_controller@plt>:
jmpq   *0x69f5a(%rip)        # 6e0a0 <jinit_c_main_controller@@LIBJPEG_6.2+0x5b9e0>
pushq  $0x11
jmpq   4020 <.plt>

0000000000004150 <jdiv_round_up@plt>:
jmpq   *0x69f52(%rip)        # 6e0a8 <jdiv_round_up@@LIBJPEG_6.2+0x355a8>
pushq  $0x12
jmpq   4020 <.plt>

0000000000004160 <jpeg_consume_input@plt>:
jmpq   *0x69f4a(%rip)        # 6e0b0 <jpeg_consume_input@@LIBJPEG_6.2+0x55880>
pushq  $0x13
jmpq   4020 <.plt>

0000000000004170 <jpeg_set_colorspace@plt>:
jmpq   *0x69f42(%rip)        # 6e0b8 <jpeg_set_colorspace@@LIBJPEG_6.2+0x596b8>
pushq  $0x14
jmpq   4020 <.plt>

0000000000004180 <jpeg_free_large@plt>:
jmpq   *0x69f3a(%rip)        # 6e0c0 <jpeg_free_large@@LIBJPEG_6.2+0x33fd0>
pushq  $0x15
jmpq   4020 <.plt>

0000000000004190 <jinit_arith_encoder@plt>:
jmpq   *0x69f32(%rip)        # 6e0c8 <jinit_arith_encoder@@LIBJPEG_6.2+0x33f58>
pushq  $0x16
jmpq   4020 <.plt>

00000000000041a0 <jinit_forward_dct@plt>:
jmpq   *0x69f2a(%rip)        # 6e0d0 <jinit_forward_dct@@LIBJPEG_6.2+0x66ba0>
pushq  $0x17
jmpq   4020 <.plt>

00000000000041b0 <jinit_color_converter@plt>:
jmpq   *0x69f22(%rip)        # 6e0d8 <jinit_color_converter@@LIBJPEG_6.2+0x68878>
pushq  $0x18
jmpq   4020 <.plt>

00000000000041c0 <jpeg_huff_decode@plt>:
jmpq   *0x69f1a(%rip)        # 6e0e0 <jpeg_huff_decode@@LIBJPEG_6.2+0x4de00>
pushq  $0x19
jmpq   4020 <.plt>

00000000000041d0 <jinit_phuff_decoder@plt>:
jmpq   *0x69f12(%rip)        # 6e0e8 <jinit_phuff_decoder@@LIBJPEG_6.2+0x43518>
pushq  $0x1a
jmpq   4020 <.plt>

00000000000041e0 <memset@plt>:
jmpq   *0x69f0a(%rip)        # 6e0f0 <memset@GLIBC_2.2.5>
pushq  $0x1b
jmpq   4020 <.plt>

00000000000041f0 <jinit_master_decompress@plt>:
jmpq   *0x69f02(%rip)        # 6e0f8 <jinit_master_decompress@@LIBJPEG_6.2+0x47dd8>
pushq  $0x1c
jmpq   4020 <.plt>

0000000000004200 <jinit_compress_master@plt>:
jmpq   *0x69efa(%rip)        # 6e100 <jinit_compress_master@@LIBJPEG_6.2+0x5bb20>
pushq  $0x1d
jmpq   4020 <.plt>

0000000000004210 <jpeg_get_small@plt>:
jmpq   *0x69ef2(%rip)        # 6e108 <jpeg_get_small@@LIBJPEG_6.2+0x34048>
pushq  $0x1e
jmpq   4020 <.plt>

0000000000004220 <jinit_d_post_controller@plt>:
jmpq   *0x69eea(%rip)        # 6e110 <jinit_d_post_controller@@LIBJPEG_6.2+0x420b0>
pushq  $0x1f
jmpq   4020 <.plt>

0000000000004230 <jinit_1pass_quantizer@plt>:
jmpq   *0x69ee2(%rip)        # 6e118 <jinit_1pass_quantizer@@LIBJPEG_6.2+0x38318>
pushq  $0x20
jmpq   4020 <.plt>

0000000000004240 <jinit_memory_mgr@plt>:
jmpq   *0x69eda(%rip)        # 6e120 <jinit_memory_mgr@@LIBJPEG_6.2+0x35560>
pushq  $0x21
jmpq   4020 <.plt>

0000000000004250 <jinit_d_main_controller@plt>:
jmpq   *0x69ed2(%rip)        # 6e128 <jinit_d_main_controller@@LIBJPEG_6.2+0x4bae8>
pushq  $0x22
jmpq   4020 <.plt>

0000000000004260 <strcmp@plt>:
jmpq   *0x69eca(%rip)        # 6e130 <strcmp@GLIBC_2.2.5>
pushq  $0x23
jmpq   4020 <.plt>

0000000000004270 <jpeg_alloc_quant_table@plt>:
jmpq   *0x69ec2(%rip)        # 6e138 <jpeg_alloc_quant_table@@LIBJPEG_6.2+0x599a8>
pushq  $0x24
jmpq   4020 <.plt>

0000000000004280 <jpeg_mem_available@plt>:
jmpq   *0x69eba(%rip)        # 6e140 <jpeg_mem_available@@LIBJPEG_6.2+0x34040>
pushq  $0x25
jmpq   4020 <.plt>

0000000000004290 <jinit_merged_upsampler@plt>:
jmpq   *0x69eb2(%rip)        # 6e148 <jinit_merged_upsampler@@LIBJPEG_6.2+0x47098>
pushq  $0x26
jmpq   4020 <.plt>

00000000000042a0 <fprintf@plt>:
jmpq   *0x69eaa(%rip)        # 6e150 <fprintf@GLIBC_2.2.5>
pushq  $0x27
jmpq   4020 <.plt>

00000000000042b0 <jround_up@plt>:
jmpq   *0x69ea2(%rip)        # 6e158 <jround_up@@LIBJPEG_6.2+0x35648>
pushq  $0x28
jmpq   4020 <.plt>

00000000000042c0 <memcpy@plt>:
jmpq   *0x69e9a(%rip)        # 6e160 <memcpy@GLIBC_2.14>
pushq  $0x29
jmpq   4020 <.plt>

00000000000042d0 <jpeg_calc_output_dimensions@plt>:
jmpq   *0x69e92(%rip)        # 6e168 <jpeg_calc_output_dimensions@@LIBJPEG_6.2+0x48058>
pushq  $0x2a
jmpq   4020 <.plt>

00000000000042e0 <jinit_c_prep_controller@plt>:
jmpq   *0x69e8a(%rip)        # 6e170 <jinit_c_prep_controller@@LIBJPEG_6.2+0x57a20>
pushq  $0x2b
jmpq   4020 <.plt>

00000000000042f0 <jpeg_add_quant_table@plt>:
jmpq   *0x69e82(%rip)        # 6e178 <jpeg_add_quant_table@@LIBJPEG_6.2+0x591a8>
pushq  $0x2c
jmpq   4020 <.plt>

0000000000004300 <jinit_inverse_dct@plt>:
jmpq   *0x69e7a(%rip)        # 6e180 <jinit_inverse_dct@@LIBJPEG_6.2+0x4eda0>
pushq  $0x2d
jmpq   4020 <.plt>

0000000000004310 <jpeg_set_quality@plt>:
jmpq   *0x69e72(%rip)        # 6e188 <jpeg_set_quality@@LIBJPEG_6.2+0x59258>
pushq  $0x2e
jmpq   4020 <.plt>

0000000000004320 <malloc@plt>:
jmpq   *0x69e6a(%rip)        # 6e190 <malloc@GLIBC_2.2.5>
pushq  $0x2f
jmpq   4020 <.plt>

0000000000004330 <fflush@plt>:
jmpq   *0x69e62(%rip)        # 6e198 <fflush@GLIBC_2.2.5>
pushq  $0x30
jmpq   4020 <.plt>

0000000000004340 <jpeg_free_small@plt>:
jmpq   *0x69e5a(%rip)        # 6e1a0 <jpeg_free_small@@LIBJPEG_6.2+0x340d0>
pushq  $0x31
jmpq   4020 <.plt>

0000000000004350 <jpeg_mem_term@plt>:
jmpq   *0x69e52(%rip)        # 6e1a8 <jpeg_mem_term@@LIBJPEG_6.2+0x34048>
pushq  $0x32
jmpq   4020 <.plt>

0000000000004360 <jinit_color_deconverter@plt>:
jmpq   *0x69e4a(%rip)        # 6e1b0 <jinit_color_deconverter@@LIBJPEG_6.2+0x52650>
pushq  $0x33
jmpq   4020 <.plt>

0000000000004370 <sscanf@plt>:
jmpq   *0x69e42(%rip)        # 6e1b8 <sscanf@GLIBC_2.2.5>
pushq  $0x34
jmpq   4020 <.plt>

0000000000004380 <jinit_c_coef_controller@plt>:
jmpq   *0x69e3a(%rip)        # 6e1c0 <jinit_c_coef_controller@@LIBJPEG_6.2+0x69380>
pushq  $0x35
jmpq   4020 <.plt>

0000000000004390 <jpeg_suppress_tables@plt>:
jmpq   *0x69e32(%rip)        # 6e1c8 <jpeg_suppress_tables@@LIBJPEG_6.2+0x69ab8>
pushq  $0x36
jmpq   4020 <.plt>

00000000000043a0 <jpeg_open_backing_store@plt>:
jmpq   *0x69e2a(%rip)        # 6e1d0 <jpeg_open_backing_store@@LIBJPEG_6.2+0x340a0>
pushq  $0x37
jmpq   4020 <.plt>

00000000000043b0 <jpeg_quality_scaling@plt>:
jmpq   *0x69e22(%rip)        # 6e1d8 <jpeg_quality_scaling@@LIBJPEG_6.2+0x590b8>
pushq  $0x38
jmpq   4020 <.plt>

00000000000043c0 <jinit_c_master_control@plt>:
jmpq   *0x69e1a(%rip)        # 6e1e0 <jinit_c_master_control@@LIBJPEG_6.2+0x5aa10>
pushq  $0x39
jmpq   4020 <.plt>

00000000000043d0 <jinit_input_controller@plt>:
jmpq   *0x69e12(%rip)        # 6e1e8 <jinit_input_controller@@LIBJPEG_6.2+0x4c3a8>
pushq  $0x3a
jmpq   4020 <.plt>

00000000000043e0 <jinit_upsampler@plt>:
jmpq   *0x69e0a(%rip)        # 6e1f0 <jinit_upsampler@@LIBJPEG_6.2+0x41cb0>
pushq  $0x3b
jmpq   4020 <.plt>

00000000000043f0 <jcopy_sample_rows@plt>:
jmpq   *0x69e02(%rip)        # 6e1f8 <jcopy_sample_rows@@LIBJPEG_6.2+0x356c8>
pushq  $0x3c
jmpq   4020 <.plt>

0000000000004400 <jpeg_set_linear_quality@plt>:
jmpq   *0x69dfa(%rip)        # 6e200 <jpeg_set_linear_quality@@LIBJPEG_6.2+0x59290>
pushq  $0x3d
jmpq   4020 <.plt>

0000000000004410 <jpeg_fill_bit_buffer@plt>:
jmpq   *0x69df2(%rip)        # 6e208 <jpeg_fill_bit_buffer@@LIBJPEG_6.2+0x4e148>
pushq  $0x3e
jmpq   4020 <.plt>

0000000000004420 <jpeg_read_scanlines@plt>:
jmpq   *0x69dea(%rip)        # 6e210 <jpeg_read_scanlines@@LIBJPEG_6.2+0x55510>
pushq  $0x3f
jmpq   4020 <.plt>

0000000000004430 <sprintf@plt>:
jmpq   *0x69de2(%rip)        # 6e218 <sprintf@GLIBC_2.2.5>
pushq  $0x40
jmpq   4020 <.plt>

0000000000004440 <exit@plt>:
jmpq   *0x69dda(%rip)        # 6e220 <exit@GLIBC_2.2.5>
pushq  $0x41
jmpq   4020 <.plt>

0000000000004450 <fwrite@plt>:
jmpq   *0x69dd2(%rip)        # 6e228 <fwrite@GLIBC_2.2.5>
pushq  $0x42
jmpq   4020 <.plt>

0000000000004460 <jinit_phuff_encoder@plt>:
jmpq   *0x69dca(%rip)        # 6e230 <jinit_phuff_encoder@@LIBJPEG_6.2+0x58ba0>
pushq  $0x43
jmpq   4020 <.plt>

0000000000004470 <jcopy_block_row@plt>:
jmpq   *0x69dc2(%rip)        # 6e238 <jcopy_block_row@@LIBJPEG_6.2+0x356a8>
pushq  $0x44
jmpq   4020 <.plt>

0000000000004480 <jinit_downsampler@plt>:
jmpq   *0x69dba(%rip)        # 6e240 <jinit_downsampler@@LIBJPEG_6.2+0x572b0>
pushq  $0x45
jmpq   4020 <.plt>

0000000000004490 <jpeg_mem_init@plt>:
jmpq   *0x69db2(%rip)        # 6e248 <jpeg_mem_init@@LIBJPEG_6.2+0x340f8>
pushq  $0x46
jmpq   4020 <.plt>

00000000000044a0 <jpeg_alloc_huff_table@plt>:
jmpq   *0x69daa(%rip)        # 6e250 <jpeg_alloc_huff_table@@LIBJPEG_6.2+0x59aa0>
pushq  $0x47
jmpq   4020 <.plt>

00000000000044b0 <jinit_marker_reader@plt>:
jmpq   *0x69da2(%rip)        # 6e258 <jinit_marker_reader@@LIBJPEG_6.2+0x4af38>
pushq  $0x48
jmpq   4020 <.plt>

00000000000044c0 <jpeg_make_d_derived_tbl@plt>:
jmpq   *0x69d9a(%rip)        # 6e260 <jpeg_make_d_derived_tbl@@LIBJPEG_6.2+0x4e4d0>
pushq  $0x49
jmpq   4020 <.plt>

00000000000044d0 <jzero_far@plt>:
jmpq   *0x69d92(%rip)        # 6e268 <jzero_far@@LIBJPEG_6.2+0x356b8>
pushq  $0x4a
jmpq   4020 <.plt>

Disassembly of section .text:

00000000000044e0 <deregister_tm_clones>:
lea    0x69d99(%rip),%rdi        # 6e280 <__TMC_END__>
lea    0x69d92(%rip),%rax        # 6e280 <__TMC_END__>
cmp    %rdi,%rax
je     4508 <deregister_tm_clones+0x28>
mov    0x69a16(%rip),%rax        # 6df10 <_ITM_deregisterTMCloneTable>
test   %rax,%rax
je     4508 <deregister_tm_clones+0x28>
jmpq   *%rax
nopl   0x0(%rax)
retq   
nopl   0x0(%rax)

0000000000004510 <register_tm_clones>:
lea    0x69d69(%rip),%rdi        # 6e280 <__TMC_END__>
lea    0x69d62(%rip),%rsi        # 6e280 <__TMC_END__>
sub    %rdi,%rsi
sar    $0x3,%rsi
mov    %rsi,%rax
shr    $0x3f,%rax
add    %rax,%rsi
sar    %rsi
je     4548 <register_tm_clones+0x38>
mov    0x69a95(%rip),%rax        # 6dfd0 <_ITM_registerTMCloneTable>
test   %rax,%rax
je     4548 <register_tm_clones+0x38>
jmpq   *%rax
nopw   0x0(%rax,%rax,1)
retq   
nopl   0x0(%rax)

0000000000004550 <__do_global_dtors_aux>:
endbr64 
cmpb   $0x0,0x69d25(%rip)        # 6e280 <__TMC_END__>
jne    4590 <F_2_172+0x9>
push   %rbp
cmpq   $0x0,0x69a8a(%rip)        # 6dff0 <__cxa_finalize@GLIBC_2.2.5>
mov    %rsp,%rbp
je     4578 <__do_global_dtors_aux+0x28>
mov    0x69cfe(%rip),%rdi        # 6e270 <__dso_handle>
callq  *0x69a78(%rip)        # 6dff0 <__cxa_finalize@GLIBC_2.2.5>
callq  44e0 <deregister_tm_clones>
movb   $0x1,0x69cfc(%rip)        # 6e280 <__TMC_END__>
pop    %rbp
retq   
nopw   %cs:0x0(%rax,%rax,1)
retq   
data16 nopw %cs:0x0(%rax,%rax,1)
nopl   0x0(%rax)

00000000000045a0 <frame_dummy>:
endbr64 
jmpq   4510 <register_tm_clones>
nopl   0x0(%rax)

00000000000045b0 <jpeg_CreateCompress>:
push   %rbp
mov    %rsp,%rbp
sub    $0x20,%rsp
mov    %r14,-0x18(%rbp)
mov    %r15,-0x20(%rbp)
mov    %r12,-0x8(%rbp)
mov    %r13,-0x10(%rbp)
movq   $0x0,0x8(%rdi)
cmp    $0x3e,%esi
jne    45da <jpeg_CreateCompress+0x2a>
mov    %rdi,%r13
jmp    4605 <jpeg_CreateCompress+0x55>
mov    (%rdi),%rax
movl   $0xc,0x28(%rax)
mov    (%rdi),%rax
movl   $0x3e,0x2c(%rax)
mov    (%rdi),%rax
mov    %esi,0x30(%rax)
mov    (%rdi),%rax
mov    (%rax),%rax
mov    %rdx,%r12
mov    %rdi,%r13
callq  *%rax
mov    %r12,%rdx
cmp    $0x208,%rdx
je     4637 <jpeg_CreateCompress+0x87>
mov    0x0(%r13),%rax
movl   $0x15,0x28(%rax)
mov    0x0(%r13),%rax
movl   $0x208,0x2c(%rax)
mov    0x0(%r13),%rax
mov    %edx,0x30(%rax)
mov    0x0(%r13),%rax
mov    (%rax),%rax
mov    %r13,%rdi
callq  *%rax
xor    %r12d,%r12d
mov    $0x208,%edx
mov    0x0(%r13),%r14
mov    0x18(%r13),%r15
mov    %r13,%rdi
mov    %r12,%rsi
callq  41e0 <memset@plt>
mov    %r14,0x0(%r13)
mov    %r15,0x18(%r13)
movl   $0x0,0x20(%r13)
mov    %r13,%rdi
callq  4240 <jinit_memory_mgr@plt>
movq   $0x0,0x10(%r13)
movq   $0x0,0x28(%r13)
movq   $0x0,0x58(%r13)
mov    %r12,%rax
jmp    4696 <jpeg_CreateCompress+0xe6>
movslq %eax,%rcx
movq   $0x0,0x60(%r13,%rcx,8)
add    $0x1,%eax
cmp    $0x3,%eax
jle    4687 <jpeg_CreateCompress+0xd7>
jmp    46bc <jpeg_CreateCompress+0x10c>
movslq %r12d,%rax
movq   $0x0,0x80(%r13,%rax,8)
movq   $0x0,0xa0(%r13,%rax,8)
add    $0x1,%r12d
cmp    $0x3,%r12d
jle    469d <jpeg_CreateCompress+0xed>
movq   $0x0,0x1f8(%r13)
movsd  0x4492b(%rip),%xmm0        # 49000 <_fini+0xde0>
movsd  %xmm0,0x40(%r13)
movl   $0x64,0x24(%r13)
mov    -0x10(%rbp),%r13
mov    -0x8(%rbp),%r12
mov    -0x20(%rbp),%r15
mov    -0x18(%rbp),%r14
leaveq 
retq   
data16 nopw %cs:0x0(%rax,%rax,1)

0000000000004700 <jpeg_destroy_compress>:
push   %rbp
mov    %rsp,%rbp
callq  4030 <jpeg_destroy@plt>
leaveq 
retq   
nopl   0x0(%rax,%rax,1)

0000000000004710 <jpeg_suppress_tables>:
push   %rbp
mov    %rsp,%rbp
xor    %eax,%eax
mov    %rax,%rcx
jmp    4731 <jpeg_suppress_tables+0x21>
movslq %ecx,%rdx
mov    0x60(%rdi,%rdx,8),%rdx
test   %rdx,%rdx
je     472e <jpeg_suppress_tables+0x1e>
mov    %esi,0x80(%rdx)
add    $0x1,%ecx
cmp    $0x3,%ecx
jle    471b <jpeg_suppress_tables+0xb>
jmp    4764 <jpeg_suppress_tables+0x54>
movslq %eax,%rdx
mov    0x80(%rdi,%rdx,8),%rcx
test   %rcx,%rcx
je     474e <jpeg_suppress_tables+0x3e>
mov    %esi,0x114(%rcx)
mov    0xa0(%rdi,%rdx,8),%rcx
test   %rcx,%rcx
je     4761 <jpeg_suppress_tables+0x51>
mov    %esi,0x114(%rcx)
add    $0x1,%eax
cmp    $0x3,%eax
jle    4738 <jpeg_suppress_tables+0x28>
leaveq 
retq   
nopl   0x0(%rax,%rax,1)

0000000000004770 <jpeg_finish_compress>:
push   %rbp
mov    %rsp,%rbp
sub    $0x20,%rsp
mov    %r14,-0x10(%rbp)
mov    %r15,-0x18(%rbp)
mov    %r13,-0x8(%rbp)
xor    %r14d,%r14d
movslq 0x24(%rdi),%rax
cmp    $0x65,%eax
je     47a2 <jpeg_finish_compress+0x32>
cmp    $0x66,%eax
je     47a2 <jpeg_finish_compress+0x32>
cmp    $0x67,%eax
jne    47b9 <jpeg_finish_compress+0x49>
mov    %rdi,%r13
jmpq   4853 <jpeg_finish_compress+0xe3>
mov    0x34(%rdi),%eax
cmp    0x130(%rdi),%eax
ja     4895 <jpeg_finish_compress+0x125>
mov    %rdi,%r13
jmpq   48aa <jpeg_finish_compress+0x13a>
mov    (%rdi),%rax
movl   $0x14,0x28(%rax)
movslq 0x24(%rdi),%rcx
mov    (%rdi),%rax
mov    %ecx,0x2c(%rax)
mov    (%rdi),%rax
mov    (%rax),%rax
mov    %rdi,%r13
callq  *%rax
jmp    4853 <jpeg_finish_compress+0xe3>
mov    0x10(%r13),%rax
test   %rax,%rax
je     4805 <jpeg_finish_compress+0x95>
mov    %r15d,%ecx
mov    %rcx,0x8(%rax)
mov    0x140(%r13),%ecx
mov    0x10(%r13),%rax
mov    %rcx,0x10(%rax)
mov    0x10(%r13),%rax
mov    (%rax),%rax
mov    %r13,%rdi
callq  *%rax
mov    0x1c8(%r13),%rax
mov    0x8(%rax),%rax
mov    %r13,%rdi
mov    %r14,%rsi
callq  *%rax
test   %eax,%eax
jne    4833 <jpeg_finish_compress+0xc3>
mov    0x0(%r13),%rax
movl   $0x18,0x28(%rax)
mov    0x0(%r13),%rax
mov    (%rax),%rax
mov    %r13,%rdi
callq  *%rax
add    $0x1,%r15d
mov    0x140(%r13),%eax
cmp    %r15d,%eax
ja     47da <jpeg_finish_compress+0x6a>
mov    0x1b0(%r13),%rax
mov    0x10(%rax),%rax
mov    %r13,%rdi
callq  *%rax
mov    0x1b0(%r13),%rax
movslq 0x1c(%rax),%rcx
test   %ecx,%ecx
je     48bc <jpeg_finish_compress+0x14c>
mov    0x1d0(%r13),%rax
mov    0x18(%rax),%rax
mov    %r13,%rdi
callq  *%rax
mov    0x28(%r13),%rax
mov    0x20(%rax),%rax
mov    %r13,%rdi
callq  *%rax
mov    %r13,%rdi
callq  4130 <jpeg_abort@plt>
mov    -0x8(%rbp),%r13
mov    -0x18(%rbp),%r15
mov    -0x10(%rbp),%r14
leaveq 
retq   
mov    (%rdi),%rax
movl   $0x43,0x28(%rax)
mov    (%rdi),%rax
mov    (%rax),%rax
mov    %rdi,%r13
callq  *%rax
mov    0x1b0(%r13),%rax
mov    0x10(%rax),%rax
mov    %r13,%rdi
callq  *%rax
jmp    4853 <jpeg_finish_compress+0xe3>
mov    %r13,%rdi
callq  *(%rax)
mov    %r14,%r15
jmpq   4837 <jpeg_finish_compress+0xc7>
nopl   0x0(%rax)

00000000000048d0 <jpeg_write_marker>:
push   %rbp
mov    %rsp,%rbp
sub    $0x20,%rsp
mov    %r12,-0x8(%rbp)
mov    %r13,-0x10(%rbp)
mov    %r14,-0x18(%rbp)
mov    %r15,-0x20(%rbp)
mov    0x130(%rdi),%eax
test   %eax,%eax
jne    4906 <jpeg_write_marker+0x36>
movslq 0x24(%rdi),%rax
cmp    $0x65,%eax
jne    4952 <F_0_285+0x24>
mov    %rcx,%r12
mov    %rdi,%r13
mov    %rdx,%r14
jmp    4932 <F_0_285+0x4>
mov    (%rdi),%rax
movl   $0x14,0x28(%rax)
movslq 0x24(%rdi),%r8
mov    (%rdi),%rax
mov    %r8d,0x2c(%rax)
mov    (%rdi),%rax
mov    (%rax),%rax
mov    %rcx,%r12
mov    %rdx,%r14
mov    %rsi,%r15
mov    %rdi,%r13
callq  *%rax
mov    %r15,%rsi
mov    0x1d0(%r13),%rax
mov    0x28(%rax),%rax
mov    %r13,%rdi
mov    %r12,%rdx
callq  *%rax
mov    0x1d0(%r13),%rax
mov    0x30(%rax),%r15
jmp    4974 <F_0_285+0x46>
cmp    $0x66,%eax
jne    498b <F_0_285+0x5d>
mov    %rcx,%r12
mov    %rdi,%r13
mov    %rdx,%r14
jmp    4932 <F_0_285+0x4>
movzbl (%r14),%esi
mov    %r13,%rdi
callq  *%r15
add    $0xffffffff,%r12d
add    $0x1,%r14
test   %r12d,%r12d
jne    4962 <F_0_285+0x34>
mov    -0x20(%rbp),%r15
mov    -0x18(%rbp),%r14
mov    -0x10(%rbp),%r13
mov    -0x8(%rbp),%r12
leaveq 
retq   
cmp    $0x67,%eax
jne    4906 <jpeg_write_marker+0x36>
mov    %rcx,%r12
mov    %rdi,%r13
mov    %rdx,%r14
jmp    4932 <F_0_285+0x4>
nop

00000000000049a0 <jpeg_write_m_header>:
push   %rbp
mov    %rsp,%rbp
sub    $0x20,%rsp
mov    0x130(%rdi),%eax
test   %eax,%eax
jne    49c5 <jpeg_write_m_header+0x25>
movslq 0x24(%rdi),%rax
cmp    $0x65,%eax
je     4a11 <jpeg_write_m_header+0x71>
cmp    $0x66,%eax
je     4a11 <jpeg_write_m_header+0x71>
cmp    $0x67,%eax
je     4a11 <jpeg_write_m_header+0x71>
mov    (%rdi),%rax
movl   $0x14,0x28(%rax)
movslq 0x24(%rdi),%rcx
mov    (%rdi),%rax
mov    %ecx,0x2c(%rax)
mov    (%rdi),%rax
mov    (%rax),%rax
mov    %rdi,%rcx
mov    %r13,-0x8(%rbp)
mov    %r14,-0x10(%rbp)
mov    %r15,-0x18(%rbp)
mov    %rdx,%r13
mov    %rsi,%r14
mov    %rdi,%r15
mov    %rcx,%rdi
callq  *%rax
mov    %r13,%rdx
mov    %r14,%rsi
mov    %r15,%rdi
mov    -0x18(%rbp),%r15
mov    -0x10(%rbp),%r14
mov    -0x8(%rbp),%r13
mov    0x1d0(%rdi),%rax
mov    0x28(%rax),%rax
callq  *%rax
leaveq 
retq   

0000000000004a20 <jpeg_write_m_byte>:
push   %rbp
mov    %rsp,%rbp
mov    0x1d0(%rdi),%rax
mov    0x30(%rax),%rax
callq  *%rax
leaveq 
retq   
data16 nopw %cs:0x0(%rax,%rax,1)
xchg   %ax,%ax

0000000000004a40 <jpeg_write_tables>:
push   %rbp
mov    %rsp,%rbp
sub    $0x10,%rsp
mov    %r15,-0x8(%rbp)
movslq 0x24(%rdi),%rax
cmp    $0x64,%eax
jne    4a5a <jpeg_write_tables+0x1a>
mov    %rdi,%r15
jmp    4a79 <jpeg_write_tables+0x39>
mov    (%rdi),%rax
movl   $0x14,0x28(%rax)
movslq 0x24(%rdi),%rcx
mov    (%rdi),%rax
mov    %ecx,0x2c(%rax)
mov    (%rdi),%rax
mov    (%rax),%rax
mov    %rdi,%r15
callq  *%rax
mov    (%r15),%rax
mov    0x20(%rax),%rax
mov    %r15,%rdi
callq  *%rax
mov    0x28(%r15),%rax
mov    0x10(%rax),%rax
mov    %r15,%rdi
callq  *%rax
mov    %r15,%rdi
callq  4120 <jinit_marker_writer@plt>
mov    0x1d0(%r15),%rax
mov    0x20(%rax),%rax
mov    %r15,%rdi
callq  *%rax
mov    0x28(%r15),%rax
mov    0x20(%rax),%rax
mov    %r15,%rdi
callq  *%rax
mov    -0x8(%rbp),%r15
leaveq 
retq   
nopl   (%rax)

0000000000004ac0 <jpeg_abort_compress>:
push   %rbp
mov    %rsp,%rbp
callq  4130 <jpeg_abort@plt>
leaveq 
retq   
nopl   0x0(%rax,%rax,1)

0000000000004ad0 <jpeg_start_compress>:
push   %rbp
mov    %rsp,%rbp
sub    $0x10,%rsp
mov    %r15,-0x10(%rbp)
movslq 0x24(%rdi),%rax
cmp    $0x64,%eax
jne    4aea <jpeg_start_compress+0x1a>
mov    %rdi,%r15
jmp    4b1d <jpeg_start_compress+0x4d>
mov    (%rdi),%rax
movl   $0x14,0x28(%rax)
movslq 0x24(%rdi),%rcx
mov    (%rdi),%rax
mov    %ecx,0x2c(%rax)
mov    (%rdi),%rax
mov    (%rax),%rax
mov    %rdi,%rcx
mov    %r14,-0x8(%rbp)
mov    %rsi,%r14
mov    %rdi,%r15
mov    %rcx,%rdi
callq  *%rax
mov    %r14,%rsi
mov    -0x8(%rbp),%r14
test   %esi,%esi
je     4b2b <jpeg_start_compress+0x5b>
xor    %esi,%esi
mov    %r15,%rdi
callq  4390 <jpeg_suppress_tables@plt>
mov    (%r15),%rax
mov    0x20(%rax),%rax
mov    %r15,%rdi
callq  *%rax
mov    0x28(%r15),%rax
mov    0x10(%rax),%rax
mov    %r15,%rdi
callq  *%rax
mov    %r15,%rdi
callq  4200 <jinit_compress_master@plt>
mov    0x1b0(%r15),%rax
mov    (%rax),%rax
mov    %r15,%rdi
callq  *%rax
movl   $0x0,0x130(%r15)
movslq 0x100(%r15),%rax
test   %eax,%eax
jne    4b78 <jpeg_start_compress+0xa8>
mov    $0x65,%eax
jmp    4b7d <jpeg_start_compress+0xad>
mov    $0x66,%eax
mov    %eax,0x24(%r15)
mov    -0x10(%rbp),%r15
leaveq 
retq   
nopw   0x0(%rax,%rax,1)

0000000000004b90 <jpeg_write_scanlines>:
push   %rbp
mov    %rsp,%rbp
sub    $0x20,%rsp
mov    %r13,-0x8(%rbp)
mov    %r14,-0x10(%rbp)
mov    %r15,-0x18(%rbp)
movslq 0x24(%rdi),%rax
cmp    $0x65,%eax
jne    4bbe <jpeg_write_scanlines+0x2e>
mov    %r14,%r8
mov    %rdi,%r14
mov    %r13,%r9
mov    %rdx,%r13
mov    %rsi,%r15
jmp    4beb <jpeg_write_scanlines+0x5b>
mov    (%rdi),%rax
movl   $0x14,0x28(%rax)
movslq 0x24(%rdi),%rcx
mov    (%rdi),%rax
mov    %ecx,0x2c(%rax)
mov    (%rdi),%rax
mov    (%rax),%rax
mov    %rdx,%r13
mov    %rsi,%r15
mov    %rdi,%r14
callq  *%rax
mov    -0x10(%rbp),%r8
mov    -0x8(%rbp),%r9
mov    0x34(%r14),%eax
cmp    0x130(%r14),%eax
ja     4c1d <jpeg_write_scanlines+0x8d>
mov    (%r14),%rax
movl   $0x7b,0x28(%rax)
mov    (%r14),%rax
mov    0x8(%rax),%rax
mov    $0xffffffffffffffff,%rsi
mov    %r14,%rdi
callq  *%rax
mov    -0x10(%rbp),%r8
mov    -0x8(%rbp),%r9
mov    0x10(%r14),%rax
test   %rax,%rax
je     4c51 <jpeg_write_scanlines+0xc1>
mov    0x130(%r14),%ecx
mov    %rcx,0x8(%rax)
mov    0x34(%r14),%ecx
mov    0x10(%r14),%rax
mov    %rcx,0x10(%rax)
mov    0x10(%r14),%rax
mov    (%rax),%rax
mov    %r14,%rdi
callq  *%rax
mov    -0x10(%rbp),%r8
mov    -0x8(%rbp),%r9
mov    0x1b0(%r14),%rax
movslq 0x18(%rax),%rcx
test   %ecx,%ecx
je     4c6e <jpeg_write_scanlines+0xde>
mov    %r14,%rdi
callq  *0x8(%rax)
mov    -0x10(%rbp),%r8
mov    -0x8(%rbp),%r9
mov    0x34(%r14),%eax
mov    0x130(%r14),%ecx
sub    %ecx,%eax
cmp    %r13d,%eax
jae    4c83 <jpeg_write_scanlines+0xf3>
mov    %rax,%r13
movl   $0x0,-0x1c(%rbp)
mov    0x1b8(%r14),%rax
mov    0x8(%rax),%rax
mov    %r13,%rcx
mov    %r9,%r13
mov    %r15,%rsi
mov    %r8,%r15
lea    -0x1c(%rbp),%rdx
mov    %r14,%rdi
callq  *%rax
mov    -0x1c(%rbp),%eax
mov    %rax,%rcx
add    0x130(%r14),%ecx
mov    %ecx,0x130(%r14)
mov    %r15,%r14
mov    -0x18(%rbp),%r15
leaveq 
retq   
nopw   0x0(%rax,%rax,1)

0000000000004cd0 <jpeg_write_raw_data>:
push   %rbp
mov    %rsp,%rbp
sub    $0x20,%rsp
mov    %r15,-0x10(%rbp)
movslq 0x24(%rdi),%rax
cmp    $0x66,%eax
jne    4ced <jpeg_write_raw_data+0x1d>
mov    %r15,%rax
mov    %rdi,%r15
jmp    4d26 <jpeg_write_raw_data+0x56>
mov    (%rdi),%rax
movl   $0x14,0x28(%rax)
movslq 0x24(%rdi),%rcx
mov    (%rdi),%rax
mov    %ecx,0x2c(%rax)
mov    (%rdi),%rax
mov    (%rax),%rax
mov    %rdi,%rcx
mov    %rdx,-0x20(%rbp)
mov    %rsi,-0x18(%rbp)
mov    %rdi,%r15
mov    %rcx,%rdi
callq  *%rax
mov    -0x18(%rbp),%rsi
mov    -0x20(%rbp),%rdx
mov    -0x10(%rbp),%rax
mov    0x34(%r15),%edi
mov    0x130(%r15),%ecx
cmp    %ecx,%edi
jbe    4dfc <jpeg_write_raw_data+0x12c>
mov    0x10(%r15),%rax
test   %rax,%rax
je     4d7a <jpeg_write_raw_data+0xaa>
mov    %rcx,0x8(%rax)
mov    0x34(%r15),%ecx
mov    0x10(%r15),%rax
mov    %rcx,0x10(%rax)
mov    0x10(%r15),%rax
mov    (%rax),%rax
mov    %r15,%rdi
mov    %r13,-0x18(%rbp)
mov    %r14,-0x20(%rbp)
mov    %rdx,%r13
mov    %rsi,%r14
callq  *%rax
mov    %r13,%rdx
mov    %r14,%rsi
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    0x1b0(%r15),%rax
movslq 0x18(%rax),%rcx
test   %ecx,%ecx
je     4dab <jpeg_write_raw_data+0xdb>
mov    %r15,%rdi
mov    %r13,-0x8(%rbp)
mov    %r14,-0x20(%rbp)
mov    %rdx,%r13
mov    %rsi,%r14
callq  *0x8(%rax)
mov    %r13,%rdx
mov    %r14,%rsi
mov    -0x20(%rbp),%r14
mov    -0x8(%rbp),%r13
mov    0x13c(%r15),%eax
shl    $0x3,%eax
mov    %rax,-0x8(%rbp)
cmp    %eax,%edx
jae    4de0 <jpeg_write_raw_data+0x110>
mov    (%r15),%rax
movl   $0x17,0x28(%rax)
mov    (%r15),%rax
mov    (%rax),%rax
mov    %r15,%rdi
mov    %r14,-0x20(%rbp)
mov    %rsi,%r14
callq  *%rax
mov    %r14,%rsi
mov    -0x20(%rbp),%r14
mov    0x1c8(%r15),%rax
mov    0x8(%rax),%rax
mov    %r15,%rdi
callq  *%rax
test   %eax,%eax
jne    4e20 <jpeg_write_raw_data+0x150>
xor    %eax,%eax
mov    -0x10(%rbp),%r15
leaveq 
retq   
mov    (%r15),%rcx
movl   $0x7b,0x28(%rcx)
mov    (%r15),%rcx
mov    0x8(%rcx),%rcx
mov    %r15,%rdi
mov    %rax,%r15
mov    $0xffffffffffffffff,%rsi
callq  *%rcx
xor    %eax,%eax
leaveq 
retq   
mov    -0x8(%rbp),%rax
mov    %rax,%rcx
add    0x130(%r15),%ecx
mov    %ecx,0x130(%r15)
mov    -0x10(%rbp),%r15
leaveq 
retq   
nopl   0x0(%rax,%rax,1)

0000000000004e40 <jinit_c_coef_controller>:
push   %rbp
mov    %rsp,%rbp
sub    $0x30,%rsp
mov    %r13,-0x20(%rbp)
mov    %r14,-0x28(%rbp)
mov    %r15,-0x30(%rbp)
mov    0x8(%rdi),%rax
mov    (%rax),%rax
mov    %rsi,%r14
mov    %rbx,%r15
mov    $0x1,%r13d
mov    $0xc0,%edx
mov    %rdi,%rbx
mov    %r13,%rsi
callq  *%rax
mov    %rax,-0x18(%rbp)
mov    %rax,0x1c8(%rbx)
lea    0x8ca(%rip),%rcx        # 5750 <start_pass_coef>
mov    %rcx,(%rax)
xor    %esi,%esi
test   %r14d,%r14d
jne    4eb3 <jinit_c_coef_controller+0x73>
mov    0x8(%rbx),%rcx
mov    0x8(%rcx),%rcx
mov    %rbx,%rdi
mov    %r15,%rbx
mov    %rax,%r14
mov    %r13,%r15
mov    %rsi,%r13
mov    %r15,%rsi
mov    $0x500,%edx
callq  *%rcx
jmp    4edd <jinit_c_coef_controller+0x9d>
mov    0x58(%rbx),%r14
mov    %r15,-0x8(%rbp)
mov    %r12,-0x10(%rbp)
mov    %rsi,%r13
jmpq   4f49 <jinit_c_coef_controller+0x109>
movslq %r13d,%rdx
mov    %rdx,%rcx
shl    $0x7,%rcx
add    %rax,%rcx
mov    %rcx,0x20(%r14,%rdx,8)
add    $0x1,%r13d
cmp    $0x9,%r13d
jle    4ec7 <jinit_c_coef_controller+0x87>
movq   $0x0,0x70(%r14)
mov    -0x30(%rbp),%r15
mov    -0x28(%rbp),%r14
mov    -0x20(%rbp),%r13
leaveq 
retq   
mov    0x1c(%r14),%edi
movslq 0x8(%r14),%rsi
mov    0x8(%rbx),%rax
mov    0x28(%rax),%r12
callq  42b0 <jround_up@plt>
mov    %rax,%r15
mov    0x20(%r14),%edi
movslq 0xc(%r14),%rsi
callq  42b0 <jround_up@plt>
mov    %r15,%rcx
mov    %rax,%r8
mov    0xc(%r14),%r9d
mov    %rbx,%rdi
mov    $0x1,%esi
xor    %edx,%edx
callq  *%r12
movslq %r13d,%rcx
mov    -0x18(%rbp),%rdx
mov    %rax,0x70(%rdx,%rcx,8)
add    $0x1,%r13d
add    $0x60,%r14
movslq 0x4c(%rbx),%rax
cmp    %r13d,%eax
jg     4ef9 <jinit_c_coef_controller+0xb9>
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
mov    -0x30(%rbp),%r15
mov    -0x28(%rbp),%r14
mov    -0x20(%rbp),%r13
leaveq 
retq   
nopl   0x0(%rax,%rax,1)

0000000000004f70 <compress_data>:
push   %rbp
mov    %rsp,%rbp
sub    $0x90,%rsp
mov    %rsi,-0x50(%rbp)
mov    %rdi,-0x78(%rbp)
mov    %rbx,-0x8(%rbp)
mov    %r12,-0x10(%rbp)
mov    %r13,-0x18(%rbp)
mov    %r14,-0x20(%rbp)
mov    %r15,-0x28(%rbp)
mov    0x1c8(%rdi),%r8
mov    %r8,-0x68(%rbp)
movslq 0x18(%r8),%rcx
mov    0x168(%rdi),%r14d
add    $0xffffffff,%r14d
mov    %r14,-0x88(%rbp)
mov    0x140(%rdi),%edx
add    $0xffffffff,%edx
mov    %rdx,-0x38(%rbp)
lea    0x20(%r8),%r12
mov    %r12,-0x70(%rbp)
xor    %r10d,%r10d
jmpq   50cc <compress_data+0x15c>
sub    $0x10,%rsp
movslq 0x4(%r14),%rcx
mov    (%rsi,%rcx,8),%rdx
mov    (%r12,%r10,8),%rcx
mov    0x1e8(%rdi),%rsi
mov    0x8(%rsi),%r10
mov    %r15d,(%rsp)
mov    %r14,%rsi
mov    %r13,%r8
mov    %rax,-0x30(%rbp)
callq  *%r10
add    $0x10,%rsp
movslq 0x34(%r14),%rax
cmp    %eax,%r15d
jl     510a <compress_data+0x19a>
mov    -0x30(%rbp),%rdx
mov    -0x90(%rbp),%rcx
add    0x34(%r14),%ebx
add    $0x8,%r13d
lea    0x1(%rdx),%eax
mov    -0x48(%rbp),%r9
mov    -0x78(%rbp),%rdi
mov    -0x50(%rbp),%rsi
mov    -0x38(%rbp),%rdx
mov    -0x68(%rbp),%r8
xor    %r10d,%r10d
movslq 0x38(%r14),%r11
cmp    %eax,%r11d
jg     5137 <compress_data+0x1c7>
mov    -0x60(%rbp),%rax
add    $0x1,%eax
mov    -0x40(%rbp),%r13
mov    -0x80(%rbp),%r9
mov    -0x88(%rbp),%r14
movslq 0x144(%rdi),%r11
cmp    %eax,%r11d
jg     5181 <compress_data+0x211>
mov    0x1f0(%rdi),%rax
mov    0x8(%rax),%rax
mov    %r12,%rsi
mov    %r9,%r12
mov    %rdx,%r15
mov    %rdi,%rbx
callq  *%rax
test   %eax,%eax
je     519e <compress_data+0x22e>
lea    0x1(%r12),%r9d
mov    %r15,%rdx
mov    %rbx,%rdi
mov    -0x70(%rbp),%r12
mov    -0x50(%rbp),%rsi
mov    -0x68(%rbp),%r8
mov    -0x90(%rbp),%rcx
xor    %r10d,%r10d
mov    %r9,-0x80(%rbp)
cmp    %r14d,%r9d
jbe    51c8 <compress_data+0x258>
movl   $0x0,0x14(%r8)
add    $0x1,%ecx
mov    %rcx,-0x90(%rbp)
movslq 0x1c(%r8),%rax
cmp    %ecx,%eax
jg     51d3 <compress_data+0x263>
mov    0x10(%r8),%eax
add    $0x1,%eax
mov    %eax,0x10(%r8)
callq  56f0 <start_iMCU_row>
mov    $0x1,%eax
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
leaveq 
retq   
lea    (%r15,%rbx,1),%ecx
movslq %ecx,%rcx
mov    (%r12,%rcx,8),%rdi
sub    %r15d,%eax
movslq %eax,%rsi
shl    $0x7,%rsi
callq  44d0 <jzero_far@plt>
mov    -0x30(%rbp),%rdx
mov    -0x90(%rbp),%rcx
mov    %r15,%rax
jmpq   5207 <F_2_562+0x4>
movslq %ebx,%r10
mov    0x10(%r8),%r8d
cmp    %edx,%r8d
jb     4fd5 <compress_data+0x65>
add    %eax,%ecx
movslq 0x48(%r14),%rdx
cmp    %ecx,%edx
jg     4fd5 <compress_data+0x65>
mov    (%r12,%r10,8),%rdi
movslq 0x34(%r14),%rsi
shl    $0x7,%rsi
mov    %rax,%r15
callq  44d0 <jzero_far@plt>
lea    -0x1(%rbx),%eax
movslq %eax,%rdi
mov    -0x58(%rbp),%r8
mov    -0x90(%rbp),%rcx
xor    %eax,%eax
jmpq   522c <F_2_562+0x29>
cmp    %r14d,%r9d
movslq %eax,%r11
mov    0x148(%rdi,%r11,8),%r14
jb     523f <F_2_562+0x3c>
movslq 0x44(%r14),%r15
jmpq   5243 <F_2_562+0x40>
mov    -0x68(%rbp),%rcx
mov    -0x90(%rbp),%rax
mov    %eax,0x18(%rcx)
mov    %r12d,0x14(%rcx)
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
xor    %eax,%eax
leaveq 
retq   
mov    %r10,%rax
mov    %rax,%rbx
jmpq   5062 <compress_data+0xf2>
mov    0x14(%r8),%r9d
mov    %rcx,%r13
shl    $0x3,%r13d
mov    %r13,-0x40(%rbp)
jmpq   50b4 <compress_data+0x144>
lea    (%rbx,%rax,1),%r8d
lea    -0x1(%r8),%esi
movslq %esi,%rsi
mov    (%r12,%rsi,8),%rsi
movswq (%rsi),%rdi
movslq %r8d,%rsi
mov    (%r12,%rsi,8),%rsi
mov    %di,(%rsi)
add    $0x1,%eax
movslq 0x34(%r14),%rsi
cmp    %eax,%esi
jg     51e7 <compress_data+0x277>
jmpq   501d <compress_data+0xad>
mov    (%r12,%rdi,8),%rdx
movswq (%rdx),%rsi
lea    (%rbx,%rax,1),%edx
movslq %edx,%rdx
mov    (%r12,%rdx,8),%rdx
mov    %si,(%rdx)
add    $0x1,%eax
movslq 0x34(%r14),%rdx
cmp    %eax,%edx
jg     5214 <F_2_562+0x11>
mov    %r15,%rdx
mov    %r8,%r15
jmpq   501d <compress_data+0xad>
movslq 0x34(%r14),%r15
mov    %r15,-0x58(%rbp)
imul   0x40(%r14),%r9d
mov    %r9,-0x48(%rbp)
mov    %rax,-0x60(%rbp)
mov    %r10,%rax
jmpq   503f <compress_data+0xcf>
nopl   0x0(%rax)

0000000000005260 <compress_first_pass>:
push   %rbp
mov    %rsp,%rbp
sub    $0x80,%rsp
mov    %rdi,-0x58(%rbp)
mov    %rsi,-0x30(%rbp)
mov    %rbx,-0x8(%rbp)
mov    %r12,-0x10(%rbp)
mov    %r13,-0x18(%rbp)
mov    %r14,-0x20(%rbp)
mov    %r15,-0x28(%rbp)
mov    0x1c8(%rdi),%r13
mov    %r13,-0x60(%rbp)
mov    0x58(%rdi),%r14
mov    0x140(%rdi),%r12d
add    $0xffffffff,%r12d
mov    %r12,-0x70(%rbp)
mov    %rsi,%rbx
mov    $0x1,%r8d
xor    %eax,%eax
jmp    532e <compress_first_pass+0xce>
sub    $0x10,%rsp
movslq %r14d,%rax
mov    (%rcx,%rax,8),%r15
mov    (%r9,%r10,8),%rdx
mov    0x1e8(%rdi),%rax
mov    0x8(%rax),%rax
mov    %r8d,(%rsp)
mov    %r14,%r8
shl    $0x3,%r8d
mov    %r15,%rcx
xor    %r9d,%r9d
callq  *%rax
add    $0x10,%rsp
test   %ebx,%ebx
jg     535c <compress_first_pass+0xfc>
mov    -0x68(%rbp),%rsi
add    $0x1,%r14d
mov    -0x30(%rbp),%r9
mov    -0x40(%rbp),%rcx
mov    -0x78(%rbp),%r10
mov    -0x38(%rbp),%r8
mov    -0x58(%rbp),%rdi
cmp    %r14d,%r13d
jg     52b2 <compress_first_pass+0x52>
mov    -0x60(%rbp),%rax
mov    -0x70(%rbp),%r12
cmp    0x10(%rax),%r12d
je     538d <compress_first_pass+0x12d>
mov    %rax,%r13
mov    -0x80(%rbp),%rax
add    $0x1,%eax
lea    0x60(%rsi),%r14
mov    -0x30(%rbp),%rbx
mov    $0x1,%r8d
mov    %r14,-0x68(%rbp)
movslq 0x4c(%rdi),%rcx
cmp    %eax,%ecx
jg     53c0 <compress_first_pass+0x160>
mov    %rbx,%rsi
callq  5530 <compress_output>
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
leaveq 
retq   
lea    (%r15,%r12,1),%r13
movslq %ebx,%rsi
shl    $0x7,%rsi
mov    %r15,%rax
mov    %r13,%r15
mov    %rax,%r13
mov    %r15,%rdi
callq  44d0 <jzero_far@plt>
movswq -0x80(%r13,%r12,1),%rdx
mov    -0x50(%rbp),%r13
mov    -0x68(%rbp),%rsi
xor    %eax,%eax
jmpq   542a <compress_first_pass+0x1ca>
mov    -0x48(%rbp),%r15
lea    -0x1(%r15),%eax
movslq %eax,%r14
shl    $0x7,%r14
lea    (%r8,%rbx,1),%eax
mov    %eax,%r8d
shl    $0x7,%r8
mov    %r8,-0x48(%rbp)
xor    %edx,%edx
div    %r15d
mov    %r15,%rdx
shl    $0x7,%rdx
mov    %rdx,-0x50(%rbp)
jmpq   546a <compress_first_pass+0x20a>
movslq %eax,%r15
mov    %r15,-0x78(%rbp)
mov    0x70(%r13,%r15,8),%rsi
mov    0xc(%r14),%ecx
mov    %rcx,%rdx
imul   0x10(%r13),%edx
mov    0x8(%rdi),%r9
mov    0x40(%r9),%r9
mov    %rax,-0x80(%rbp)
callq  *%r9
mov    %rax,-0x40(%rbp)
mov    0x10(%r13),%ecx
cmp    %r12d,%ecx
jb     5484 <compress_first_pass+0x224>
mov    %rax,%rcx
mov    %r14,%rsi
mov    %rbx,%r9
mov    %r15,%r10
mov    0x20(%rsi),%eax
mov    0xc(%rsi),%edi
xor    %edx,%edx
div    %edi
test   %edx,%edx
je     54c9 <compress_first_pass+0x269>
mov    %rdx,%r13
jmp    5494 <compress_first_pass+0x234>
movslq %eax,%rcx
shl    $0x7,%rcx
mov    %dx,(%r15,%rcx,1)
add    $0x1,%eax
cmp    %eax,%ebx
jg     541b <compress_first_pass+0x1bb>
jmpq   52eb <compress_first_pass+0x8b>
movslq %ecx,%rdx
shl    $0x7,%rdx
mov    %ax,(%r12,%rdx,1)
add    $0x1,%ecx
cmp    %ecx,%r15d
jg     5433 <compress_first_pass+0x1d3>
add    %r10,%rbx
add    %r10,%r12
add    $0x1,%edi
cmp    %r13d,%edi
jb     54cf <F_0_331+0x2>
lea    0x1(%r9),%eax
mov    %r13,%rcx
mov    %rax,%r13
mov    %rcx,%rax
mov    -0x48(%rbp),%r8
mov    -0x40(%rbp),%rcx
movslq 0xc(%rsi),%rdx
cmp    %r13d,%edx
jg     54dc <F_0_331+0xf>
mov    -0x60(%rbp),%r13
mov    -0x70(%rbp),%r12
mov    -0x58(%rbp),%rdi
jmpq   5319 <compress_first_pass+0xb9>
mov    %rax,%rcx
mov    %r14,%rsi
mov    %rbx,%r9
mov    %r15,%r10
movslq 0xc(%rsi),%r13
mov    %r13,-0x50(%rbp)
mov    0x1c(%rsi),%r8d
mov    %r8,-0x38(%rbp)
mov    %r8,%r12
shl    $0x7,%r12
movslq 0x8(%rsi),%rbx
mov    %rbx,-0x48(%rbp)
xor    %edx,%edx
mov    %r8,%rax
div    %ebx
test   %edx,%edx
jg     5517 <F_0_331+0x4a>
mov    %rdx,%rbx
xor    %r14d,%r14d
mov    -0x58(%rbp),%rdi
jmpq   5303 <compress_first_pass+0xa3>
movslq 0xc(%rsi),%r13
jmp    5494 <compress_first_pass+0x234>
movswq (%rbx,%r14,1),%rax
mov    %r8,%rcx
jmpq   5442 <compress_first_pass+0x1e2>
lea    -0x1(%r13),%edx
movslq %edx,%rdx
mov    (%rcx,%rdx,8),%rbx
movslq %r13d,%rdx
mov    (%rcx,%rdx,8),%r12
mov    %r12,%rdi
mov    %r13,-0x78(%rbp)
mov    %r8,%rsi
mov    %rax,%r13
callq  44d0 <jzero_far@plt>
mov    -0x50(%rbp),%r10
mov    -0x78(%rbp),%r9
mov    -0x68(%rbp),%rsi
xor    %r8d,%r8d
mov    %r8,%rdi
jmpq   5450 <compress_first_pass+0x1f0>
sub    %edx,%ebx
xor    %r14d,%r14d
mov    -0x58(%rbp),%rdi
jmpq   5303 <compress_first_pass+0xa3>
data16 nopw %cs:0x0(%rax,%rax,1)

0000000000005530 <compress_output>:
push   %rbp
mov    %rsp,%rbp
sub    $0x50,%rsp
mov    %rbx,-0x8(%rbp)
mov    %r12,-0x10(%rbp)
mov    %r13,-0x18(%rbp)
mov    %r14,-0x20(%rbp)
mov    %r15,-0x28(%rbp)
mov    0x1c8(%rdi),%rbx
mov    %rbx,-0x30(%rbp)
mov    %rdi,%r12
xor    %r13d,%r13d
mov    %r13,%r14
jmp    559a <compress_output+0x6a>
movslq %r14d,%r15
mov    0x148(%r12,%r15,8),%rcx
movslq 0x4(%rcx),%rax
mov    0x70(%rbx,%rax,8),%rsi
mov    0xc(%rcx),%ecx
mov    %rcx,%rdx
imul   0x10(%rbx),%edx
mov    0x8(%r12),%rax
mov    0x40(%rax),%rax
mov    %r12,%rdi
mov    %r13,%r8
callq  *%rax
mov    %rax,-0x50(%rbp,%r15,8)
add    $0x1,%r14d
movslq 0x144(%r12),%rax
cmp    %r14d,%eax
jg     5562 <compress_output+0x32>
movslq 0x18(%rbx),%r15
lea    0x20(%rbx),%r14
jmpq   5635 <compress_output+0x105>
movslq %ecx,%rdi
mov    %rdx,(%r14,%rdi,8)
add    $0x80,%rdx
add    $0x1,%ecx
add    $0x1,%esi
movslq 0x34(%r10),%rdi
cmp    %esi,%edi
jg     55b4 <compress_output+0x84>
add    $0x1,%ebx
movslq 0x38(%r10),%rdx
cmp    %ebx,%edx
jg     566e <F_0_337+0x28>
add    $0x1,%r8d
movslq 0x144(%r12),%rdx
cmp    %r8d,%edx
jg     5689 <F_0_337+0x43>
mov    0x1f0(%r12),%rcx
mov    0x8(%rcx),%rcx
mov    %rax,%rbx
mov    %r12,%rdi
mov    %r14,%rsi
callq  *%rcx
test   %eax,%eax
je     56ab <F_0_337+0x65>
lea    0x1(%rbx),%eax
mov    0x168(%r12),%ecx
cmp    %eax,%ecx
ja     56cf <F_0_337+0x89>
mov    -0x30(%rbp),%rbx
movl   $0x0,0x14(%rbx)
add    $0x1,%r15d
movslq 0x1c(%rbx),%rax
cmp    %r15d,%eax
jg     56da <F_0_337+0x94>
mov    0x10(%rbx),%eax
add    $0x1,%eax
mov    %eax,0x10(%rbx)
mov    %r12,%rdi
callq  56f0 <start_iMCU_row>
mov    $0x1,%eax
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
leaveq 
retq   
lea    (%r15,%rbx,1),%edx
movslq %edx,%rdx
mov    -0x50(%rbp,%r11,8),%rsi
mov    (%rsi,%rdx,8),%rdx
add    %r9,%rdx
mov    %r13,%rsi
jmpq   55c8 <compress_output+0x98>
movslq %r8d,%r11
mov    0x148(%r12,%r11,8),%r10
mov    %rax,%rdx
imul   0x34(%r10),%edx
mov    %edx,%r9d
shl    $0x7,%r9
mov    %r13,%rbx
jmpq   55d3 <compress_output+0xa3>
mov    -0x30(%rbp),%rax
mov    %r15d,0x18(%rax)
mov    %ebx,0x14(%rax)
mov    %r13,%rax
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
leaveq 
retq   
mov    %r13,%rcx
mov    %rcx,%r8
jmpq   55e3 <compress_output+0xb3>
mov    0x14(%rbx),%eax
jmpq   5616 <compress_output+0xe6>
data16 nopw %cs:0x0(%rax,%rax,1)
nopl   (%rax)

00000000000056f0 <start_iMCU_row>:
push   %rbp
mov    %rsp,%rbp
mov    0x1c8(%rdi),%rcx
movslq 0x144(%rdi),%rax
cmp    $0x1,%eax
jg     5725 <start_iMCU_row+0x35>
mov    0x140(%rdi),%eax
add    $0xffffffff,%eax
cmp    0x10(%rcx),%eax
ja     573c <start_iMCU_row+0x4c>
mov    0x148(%rdi),%rax
movslq 0x48(%rax),%rax
mov    %eax,0x1c(%rcx)
jmp    572c <start_iMCU_row+0x3c>
movl   $0x1,0x1c(%rcx)
movl   $0x0,0x14(%rcx)
movl   $0x0,0x18(%rcx)
leaveq 
retq   
mov    0x148(%rdi),%rax
movslq 0xc(%rax),%rax
mov    %eax,0x1c(%rcx)
jmp    572c <start_iMCU_row+0x3c>
nopl   0x0(%rax)

0000000000005750 <start_pass_coef>:
push   %rbp
mov    %rsp,%rbp
sub    $0x20,%rsp
mov    %r13,-0x8(%rbp)
mov    %r14,-0x10(%rbp)
mov    %r15,-0x18(%rbp)
mov    %rsi,%r14
mov    0x1c8(%rdi),%r13
movl   $0x0,0x10(%r13)
mov    %rdi,%r15
callq  56f0 <start_iMCU_row>
cmp    $0x1,%r14d
jbe    57c7 <start_pass_coef+0x77>
cmp    $0x2,%r14d
je     57ef <start_pass_coef+0x9f>
cmp    $0x3,%r14d
jne    57cc <start_pass_coef+0x7c>
mov    0x70(%r13),%rax
test   %rax,%rax
jne    57ae <start_pass_coef+0x5e>
mov    (%r15),%rax
movl   $0x4,0x28(%rax)
mov    (%r15),%rax
mov    (%rax),%rax
mov    %r15,%rdi
callq  *%rax
lea    -0x555(%rip),%rax        # 5260 <compress_first_pass>
mov    %rax,0x8(%r13)
mov    -0x18(%rbp),%r15
mov    -0x10(%rbp),%r14
mov    -0x8(%rbp),%r13
leaveq 
retq   
test   %r14d,%r14d
je     5826 <F_0_344+0xc>
mov    (%r15),%rax
movl   $0x4,0x28(%rax)
mov    (%r15),%rax
mov    (%rax),%rax
mov    %r15,%rdi
callq  *%rax
mov    -0x18(%rbp),%r15
mov    -0x10(%rbp),%r14
mov    -0x8(%rbp),%r13
leaveq 
retq   
mov    0x70(%r13),%rax
test   %rax,%rax
jne    580d <start_pass_coef+0xbd>
mov    (%r15),%rax
movl   $0x4,0x28(%rax)
mov    (%r15),%rax
mov    (%rax),%rax
mov    %r15,%rdi
callq  *%rax
lea    -0x2e4(%rip),%rax        # 5530 <compress_output>
mov    %rax,0x8(%r13)
mov    -0x18(%rbp),%r15
mov    -0x10(%rbp),%r14
mov    -0x8(%rbp),%r13
leaveq 
retq   
mov    0x70(%r13),%rax
test   %rax,%rax
je     5844 <F_0_344+0x2a>
mov    (%r15),%rax
movl   $0x4,0x28(%rax)
mov    (%r15),%rax
mov    (%rax),%rax
mov    %r15,%rdi
callq  *%rax
lea    -0x8db(%rip),%rax        # 4f70 <compress_data>
mov    %rax,0x8(%r13)
mov    -0x18(%rbp),%r15
mov    -0x10(%rbp),%r14
mov    -0x8(%rbp),%r13
leaveq 
retq   
nopl   (%rax)

0000000000005860 <jinit_color_converter>:
push   %rbp
mov    %rsp,%rbp
sub    $0x30,%rsp
mov    %r15,-0x30(%rbp)
mov    0x8(%rdi),%rax
mov    (%rax),%rax
mov    $0x1,%esi
mov    $0x18,%edx
mov    %rdi,%r15
callq  *%rax
mov    %rax,0x1d8(%r15)
lea    0x1c90(%rip),%rcx        # 7520 <null_method>
mov    %rcx,(%rax)
lea    0x43902(%rip),%rcx        # 4919c <rgb_pixelsize>
mov    0x3c(%r15),%edi
lea    -0x1(%rdi),%edx
cmp    $0xe,%edx
ja     58eb <jinit_color_converter+0x8b>
lea    0x4375b(%rip),%rsi        # 49008 <_fini+0xde8>
movslq (%rsi,%rdx,4),%rdx
add    %rsi,%rdx
jmpq   *%rdx
movslq 0x38(%r15),%rdx
cmp    $0x4,%edx
je     591d <jinit_color_converter+0xbd>
mov    (%r15),%rcx
movl   $0x9,0x28(%rcx)
mov    (%r15),%rcx
mov    (%rcx),%rcx
mov    %r15,%rdi
mov    %r14,-0x28(%rbp)
mov    %rax,%r14
callq  *%rcx
mov    %r14,%rax
lea    0x438b7(%rip),%rcx        # 4919c <rgb_pixelsize>
mov    -0x28(%rbp),%r14
jmp    591d <jinit_color_converter+0xbd>
movslq 0x38(%r15),%rdx
test   %edx,%edx
jg     591d <jinit_color_converter+0xbd>
mov    (%r15),%rcx
movl   $0x9,0x28(%rcx)
mov    (%r15),%rcx
mov    (%rcx),%rcx
mov    %r15,%rdi
mov    %r14,-0x28(%rbp)
mov    %rax,%r14
callq  *%rcx
mov    %r14,%rax
lea    0x43883(%rip),%rcx        # 4919c <rgb_pixelsize>
mov    -0x28(%rbp),%r14
lea    0x1a4c(%rip),%rdx        # 7370 <null_convert>
mov    0x50(%r15),%r9d
lea    -0x1(%r9),%edi
cmp    $0x4,%edi
jbe    5a1c <jinit_color_converter+0x1bc>
cmp    0x3c(%r15),%r9d
je     5a9e <jinit_color_converter+0x23e>
mov    (%r15),%rcx
movl   $0x1b,0x28(%rcx)
mov    (%r15),%rcx
mov    (%rcx),%rcx
mov    %r15,%rdi
mov    %rax,%r15
callq  *%rcx
mov    %r15,%rax
lea    0x1a0f(%rip),%rdx        # 7370 <null_convert>
mov    %rdx,0x8(%rax)
mov    -0x30(%rbp),%r15
leaveq 
retq   
movslq 0x38(%r15),%rdx
cmp    $0x1,%edx
je     591d <jinit_color_converter+0xbd>
mov    (%r15),%rcx
movl   $0x9,0x28(%rcx)
mov    (%r15),%rcx
mov    (%rcx),%rcx
mov    %r15,%rdi
mov    %r14,-0x18(%rbp)
mov    %rax,%r14
callq  *%rcx
mov    %r14,%rax
lea    0x43802(%rip),%rcx        # 4919c <rgb_pixelsize>
mov    -0x18(%rbp),%r14
jmpq   591d <jinit_color_converter+0xbd>
movslq (%rcx,%rdi,4),%rdx
cmp    0x38(%r15),%edx
je     591d <jinit_color_converter+0xbd>
mov    (%r15),%rcx
movl   $0x9,0x28(%rcx)
mov    (%r15),%rcx
mov    (%rcx),%rcx
mov    %r15,%rdi
mov    %r14,-0x20(%rbp)
mov    %rax,%r14
callq  *%rcx
mov    %r14,%rax
lea    0x437c5(%rip),%rcx        # 4919c <rgb_pixelsize>
mov    -0x20(%rbp),%r14
jmpq   591d <jinit_color_converter+0xbd>
movslq 0x38(%r15),%rdx
cmp    $0x3,%edx
je     591d <jinit_color_converter+0xbd>
mov    (%r15),%rcx
movl   $0x9,0x28(%rcx)
mov    (%r15),%rcx
mov    (%rcx),%rcx
mov    %r15,%rdi
mov    %r14,-0x20(%rbp)
mov    %rax,%r14
callq  *%rcx
mov    %r14,%rax
lea    0x43789(%rip),%rcx        # 4919c <rgb_pixelsize>
mov    -0x20(%rbp),%r14
jmpq   591d <jinit_color_converter+0xbd>
lea    0x154d(%rip),%rsi        # 6f70 <rgb_ycc_start>
lea    0x4361a(%rip),%r8        # 49044 <_fini+0xe24>
movslq (%r8,%rdi,4),%rdi
add    %r8,%rdi
jmpq   *%rdi
movslq 0x4c(%r15),%rcx
cmp    $0x4,%ecx
je     5a6d <jinit_color_converter+0x20d>
mov    (%r15),%rcx
movl   $0xa,0x28(%rcx)
mov    (%r15),%rcx
mov    (%rcx),%rcx
mov    %r15,%rdi
mov    %r14,-0x18(%rbp)
mov    %rax,%r14
callq  *%rcx
mov    %r14,%rax
lea    0x190e(%rip),%rdx        # 7370 <null_convert>
lea    0x1507(%rip),%rsi        # 6f70 <rgb_ycc_start>
mov    -0x18(%rbp),%r14
mov    0x3c(%r15),%ecx
cmp    $0x4,%ecx
je     5d21 <jinit_color_converter+0x4c1>
cmp    $0x5,%ecx
je     5d35 <jinit_color_converter+0x4d5>
mov    (%r15),%rax
movl   $0x1b,0x28(%rax)
mov    (%r15),%rax
mov    (%rax),%rax
mov    %r15,%rdi
callq  *%rax
mov    -0x30(%rbp),%r15
leaveq 
retq   
movslq 0x38(%r15),%rcx
cmp    0x4c(%r15),%ecx
jne    593f <jinit_color_converter+0xdf>
jmpq   5961 <jinit_color_converter+0x101>
movslq 0x4c(%r15),%rcx
cmp    $0x1,%ecx
je     5add <jinit_color_converter+0x27d>
mov    (%r15),%rcx
movl   $0xa,0x28(%rcx)
mov    (%r15),%rcx
mov    (%rcx),%rcx
mov    %r15,%rdi
mov    %r14,-0x8(%rbp)
mov    %rax,%r14
callq  *%rcx
mov    %r14,%rax
mov    -0x8(%rbp),%r14
lea    0x181c(%rip),%rdx        # 7300 <grayscale_convert>
mov    0x3c(%r15),%ecx
cmp    $0x1,%ecx
je     5d3f <jinit_color_converter+0x4df>
cmp    $0x2,%ecx
je     5d49 <jinit_color_converter+0x4e9>
cmp    $0x6,%ecx
je     5d49 <jinit_color_converter+0x4e9>
cmp    $0x7,%ecx
je     5d49 <jinit_color_converter+0x4e9>
cmp    $0x8,%ecx
je     5d49 <jinit_color_converter+0x4e9>
cmp    $0x9,%ecx
je     5d49 <jinit_color_converter+0x4e9>
cmp    $0xa,%ecx
je     5d49 <jinit_color_converter+0x4e9>
cmp    $0xb,%ecx
je     5d49 <jinit_color_converter+0x4e9>
cmp    $0xc,%ecx
je     5d49 <jinit_color_converter+0x4e9>
cmp    $0xd,%ecx
je     5d49 <jinit_color_converter+0x4e9>
cmp    $0xe,%ecx
je     5d49 <jinit_color_converter+0x4e9>
cmp    $0xf,%ecx
je     5d49 <jinit_color_converter+0x4e9>
cmp    $0x3,%ecx
je     5d74 <jinit_color_converter+0x514>
mov    (%r15),%rax
movl   $0x1b,0x28(%rax)
mov    (%r15),%rax
mov    (%rax),%rax
mov    %r15,%rdi
callq  *%rax
mov    -0x30(%rbp),%r15
leaveq 
retq   
movslq 0x4c(%r15),%rsi
cmp    $0x3,%esi
je     5bb2 <jinit_color_converter+0x352>
mov    (%r15),%rcx
movl   $0xa,0x28(%rcx)
mov    (%r15),%rcx
mov    (%rcx),%rcx
mov    %r15,%rdi
mov    %r14,-0x8(%rbp)
mov    %rax,%r14
callq  *%rcx
mov    %r14,%rax
lea    0x17c9(%rip),%rdx        # 7370 <null_convert>
lea    0x435ee(%rip),%rcx        # 4919c <rgb_pixelsize>
mov    -0x8(%rbp),%r14
mov    0x3c(%r15),%edi
lea    0x43513(%rip),%rsi        # 490d0 <rgb_red>
movslq (%rsi,%rdi,4),%rsi
test   %esi,%esi
jne    5d7e <jinit_color_converter+0x51e>
lea    0x43544(%rip),%rsi        # 49114 <rgb_green>
movslq (%rsi,%rdi,4),%rsi
cmp    $0x1,%esi
jne    5d7e <jinit_color_converter+0x51e>
lea    0x43574(%rip),%rsi        # 49158 <rgb_blue>
movslq (%rsi,%rdi,4),%rsi
cmp    $0x2,%esi
jne    5d7e <jinit_color_converter+0x51e>
movslq (%rcx,%rdi,4),%rcx
cmp    $0x3,%ecx
jne    5d7e <jinit_color_converter+0x51e>
mov    %rdx,0x8(%rax)
mov    -0x30(%rbp),%r15
leaveq 
retq   
movslq 0x4c(%r15),%rcx
cmp    $0x3,%ecx
je     5c3b <jinit_color_converter+0x3db>
mov    (%r15),%rcx
movl   $0xa,0x28(%rcx)
mov    (%r15),%rcx
mov    (%rcx),%rcx
mov    %r15,%rdi
mov    %r14,-0x10(%rbp)
mov    %rax,%r14
callq  *%rcx
mov    %r14,%rax
lea    0x1739(%rip),%rdx        # 7370 <null_convert>
mov    -0x10(%rbp),%r14
mov    0x3c(%r15),%ecx
cmp    $0x2,%ecx
je     5dec <jinit_color_converter+0x58c>
cmp    $0x6,%ecx
je     5dec <jinit_color_converter+0x58c>
cmp    $0x7,%ecx
je     5dec <jinit_color_converter+0x58c>
cmp    $0x8,%ecx
je     5dec <jinit_color_converter+0x58c>
cmp    $0x9,%ecx
je     5dec <jinit_color_converter+0x58c>
cmp    $0xa,%ecx
je     5dec <jinit_color_converter+0x58c>
cmp    $0xb,%ecx
je     5dec <jinit_color_converter+0x58c>
cmp    $0xc,%ecx
je     5dec <jinit_color_converter+0x58c>
cmp    $0xd,%ecx
je     5dec <jinit_color_converter+0x58c>
cmp    $0xe,%ecx
je     5dec <jinit_color_converter+0x58c>
cmp    $0xf,%ecx
je     5dec <jinit_color_converter+0x58c>
cmp    $0x3,%ecx
je     5e13 <jinit_color_converter+0x5b3>
mov    (%r15),%rax
movl   $0x1b,0x28(%rax)
mov    (%r15),%rax
mov    (%rax),%rax
mov    %r15,%rdi
callq  *%rax
mov    -0x30(%rbp),%r15
leaveq 
retq   
movslq 0x4c(%r15),%rcx
cmp    $0x4,%ecx
je     5cf9 <jinit_color_converter+0x499>
mov    (%r15),%rcx
movl   $0xa,0x28(%rcx)
mov    (%r15),%rcx
mov    (%rcx),%rcx
mov    %r15,%rdi
mov    %r14,-0x10(%rbp)
mov    %rax,%r14
callq  *%rcx
mov    %r14,%rax
lea    0x167b(%rip),%rdx        # 7370 <null_convert>
mov    -0x10(%rbp),%r14
mov    0x3c(%r15),%ecx
cmp    $0x4,%ecx
je     5e1d <jinit_color_converter+0x5bd>
mov    (%r15),%rax
movl   $0x1b,0x28(%rax)
mov    (%r15),%rax
mov    (%rax),%rax
mov    %r15,%rdi
callq  *%rax
mov    -0x30(%rbp),%r15
leaveq 
retq   
mov    %rsi,(%rax)
lea    0x1455(%rip),%rcx        # 7180 <cmyk_ycck_convert>
mov    %rcx,0x8(%rax)
mov    -0x30(%rbp),%r15
leaveq 
retq   
mov    %rdx,0x8(%rax)
mov    -0x30(%rbp),%r15
leaveq 
retq   
mov    %rdx,0x8(%rax)
mov    -0x30(%rbp),%r15
leaveq 
retq   
mov    %rax,%r15
callq  3d4f0 <jsimd_can_rgb_gray>
test   %eax,%eax
jne    5e27 <jinit_color_converter+0x5c7>
lea    0x1210(%rip),%rax        # 6f70 <rgb_ycc_start>
mov    %rax,(%r15)
lea    0x1376(%rip),%rax        # 70e0 <rgb_gray_convert>
mov    %rax,0x8(%r15)
mov    -0x30(%rbp),%r15
leaveq 
retq   
mov    %rdx,0x8(%rax)
mov    -0x30(%rbp),%r15
leaveq 
retq   
mov    0x3c(%r15),%ecx
cmp    $0x2,%ecx
je     5e38 <jinit_color_converter+0x5d8>
cmp    $0x6,%ecx
je     5e38 <jinit_color_converter+0x5d8>
cmp    $0x7,%ecx
je     5e38 <jinit_color_converter+0x5d8>
cmp    $0x8,%ecx
je     5e38 <jinit_color_converter+0x5d8>
cmp    $0x9,%ecx
je     5e38 <jinit_color_converter+0x5d8>
cmp    $0xa,%ecx
je     5e38 <jinit_color_converter+0x5d8>
cmp    $0xb,%ecx
je     5e38 <jinit_color_converter+0x5d8>
cmp    $0xc,%ecx
je     5e38 <jinit_color_converter+0x5d8>
cmp    $0xd,%ecx
je     5e38 <jinit_color_converter+0x5d8>
cmp    $0xe,%ecx
je     5e38 <jinit_color_converter+0x5d8>
cmp    $0xf,%ecx
je     5e38 <jinit_color_converter+0x5d8>
mov    (%r15),%rax
movl   $0x1b,0x28(%rax)
mov    (%r15),%rax
mov    (%rax),%rax
mov    %r15,%rdi
callq  *%rax
mov    -0x30(%rbp),%r15
leaveq 
retq   
mov    %rax,%r15
callq  3d4b0 <jsimd_can_rgb_ycc>
test   %eax,%eax
jne    5e49 <jinit_color_converter+0x5e9>
lea    0x1171(%rip),%rax        # 6f70 <rgb_ycc_start>
mov    %rax,(%r15)
lea    0x1287(%rip),%rax        # 7090 <rgb_ycc_convert>
mov    %rax,0x8(%r15)
mov    -0x30(%rbp),%r15
leaveq 
retq   
mov    %rdx,0x8(%rax)
mov    -0x30(%rbp),%r15
leaveq 
retq   
mov    %rdx,0x8(%rax)
mov    -0x30(%rbp),%r15
leaveq 
retq   
lea    0x377c2(%rip),%rax        # 3d5f0 <jsimd_rgb_gray_convert>
mov    %rax,0x8(%r15)
mov    -0x30(%rbp),%r15
leaveq 
retq   
lea    0x12f1(%rip),%rcx        # 7130 <rgb_rgb_convert>
mov    %rcx,0x8(%rax)
mov    -0x30(%rbp),%r15
leaveq 
retq   
lea    0x37730(%rip),%rax        # 3d580 <jsimd_rgb_ycc_convert>
mov    %rax,0x8(%r15)
mov    -0x30(%rbp),%r15
leaveq 
retq   
nopw   0x0(%rax,%rax,1)

0000000000005e60 <rgb_ycc_convert_internal>:
push   %rbp
mov    %rsp,%rbp
sub    $0x40,%rsp
mov    %rbx,-0x20(%rbp)
mov    %r12,-0x28(%rbp)
mov    %r13,-0x30(%rbp)
mov    %r14,-0x38(%rbp)
mov    %r15,-0x40(%rbp)
mov    %rdx,-0x8(%rbp)
mov    0x1d8(%rdi),%rax
mov    0x10(%rax),%r11
mov    0x30(%rdi),%r13d
xor    %edi,%edi
jmpq   5f52 <rgb_ycc_convert_internal+0xf2>
movzbl 0x1(%rbx),%r10d
lea    0x100(%r10),%eax
movslq %eax,%rax
mov    (%r11,%rax,8),%rax
movzbl (%rbx),%esi
add    (%r11,%rsi,8),%rax
movzbl 0x2(%rbx),%edx
lea    0x200(%rdx),%ecx
movslq %ecx,%rcx
add    (%r11,%rcx,8),%rax
sar    $0x10,%rax
mov    %edi,%ecx
mov    %al,(%r9,%rcx,1)
lea    0x400(%r10),%eax
movslq %eax,%rax
mov    (%r11,%rax,8),%rax
lea    0x300(%rsi),%r14d
movslq %r14d,%r14
add    (%r11,%r14,8),%rax
lea    0x500(%rdx),%r14d
movslq %r14d,%r14
add    (%r11,%r14,8),%rax
sar    $0x10,%rax
mov    %al,(%r15,%rcx,1)
lea    0x600(%r10),%eax
movslq %eax,%rax
mov    (%r11,%rax,8),%rax
add    $0x500,%esi
movslq %esi,%rsi
add    (%r11,%rsi,8),%rax
add    $0x700,%edx
movslq %edx,%rdx
add    (%r11,%rdx,8),%rax
sar    $0x10,%rax
mov    %al,(%r12,%rcx,1)
add    $0x3,%rbx
add    $0x1,%edi
cmp    %r13d,%edi
jb     5e96 <rgb_ycc_convert_internal+0x36>
mov    -0x18(%rbp),%rax
lea    0x8(%rax),%rsi
mov    -0x10(%rbp),%rax
lea    0x1(%rax),%ecx
xor    %edi,%edi
mov    -0x8(%rbp),%rdx
add    $0xffffffff,%r8d
test   %r8d,%r8d
jns    5f71 <rgb_ycc_convert_internal+0x111>
mov    -0x40(%rbp),%r15
mov    -0x38(%rbp),%r14
mov    -0x30(%rbp),%r13
mov    -0x28(%rbp),%r12
mov    -0x20(%rbp),%rbx
leaveq 
retq   
mov    (%rsi),%rbx
mov    (%rdx),%rax
mov    %ecx,%r10d
mov    (%rax,%r10,8),%r9
mov    0x8(%rdx),%rax
mov    (%rax,%r10,8),%r15
mov    0x10(%rdx),%rax
mov    (%rax,%r10,8),%r12
mov    %rsi,-0x18(%rbp)
mov    %rcx,-0x10(%rbp)
jmp    5f34 <rgb_ycc_convert_internal+0xd4>
nopl   0x0(%rax,%rax,1)

0000000000005fa0 <rgb_gray_convert_internal>:
push   %rbp
mov    %rsp,%rbp
sub    $0x20,%rsp
mov    %r13,-0x8(%rbp)
mov    %r14,-0x10(%rbp)
mov    %r15,-0x18(%rbp)
mov    0x1d8(%rdi),%rax
mov    0x10(%rax),%r10
mov    0x30(%rdi),%r11d
xor    %r14d,%r14d
jmp    6012 <rgb_gray_convert_internal+0x72>
movzbl 0x1(%rdi),%eax
add    $0x100,%eax
movslq %eax,%rax
mov    (%r10,%rax,8),%rax
movzbl (%rdi),%r13d
add    (%r10,%r13,8),%rax
movzbl 0x2(%rdi),%r13d
add    $0x200,%r13d
movslq %r13d,%r13
add    (%r10,%r13,8),%rax
sar    $0x10,%rax
mov    %r9d,%r13d
mov    %al,(%r15,%r13,1)
add    $0x3,%rdi
add    $0x1,%r9d
cmp    %r11d,%r9d
jb     5fc8 <rgb_gray_convert_internal+0x28>
add    $0x8,%rsi
add    $0x1,%ecx
add    $0xffffffff,%r8d
test   %r8d,%r8d
jns    6029 <rgb_gray_convert_internal+0x89>
mov    -0x18(%rbp),%r15
mov    -0x10(%rbp),%r14
mov    -0x8(%rbp),%r13
leaveq 
retq   
mov    (%rsi),%rdi
mov    (%rdx),%r9
mov    %ecx,%eax
mov    (%r9,%rax,8),%r15
mov    %r14,%r9
jmp    6006 <rgb_gray_convert_internal+0x66>
nopw   0x0(%rax,%rax,1)

0000000000006040 <rgb_rgb_convert_internal>:
push   %rbp
mov    %rsp,%rbp
sub    $0x20,%rsp
mov    %r12,-0x8(%rbp)
mov    %r13,-0x10(%rbp)
mov    %r14,-0x18(%rbp)
mov    %r15,-0x20(%rbp)
mov    0x30(%rdi),%r10d
xor    %r11d,%r11d
jmp    6092 <rgb_rgb_convert_internal+0x52>
movzbl (%rax),%r14d
mov    %edi,%r9d
mov    %r14b,(%r15,%r9,1)
movzbl 0x1(%rax),%r14d
mov    %r14b,0x0(%r13,%r9,1)
movzbl 0x2(%rax),%r14d
mov    %r14b,(%r12,%r9,1)
add    $0x3,%rax
add    $0x1,%edi
cmp    %r10d,%edi
jb     6061 <rgb_rgb_convert_internal+0x21>
add    $0x8,%rsi
add    $0x1,%ecx
add    $0xffffffff,%r8d
test   %r8d,%r8d
jns    60ad <rgb_rgb_convert_internal+0x6d>
mov    -0x20(%rbp),%r15
mov    -0x18(%rbp),%r14
mov    -0x10(%rbp),%r13
mov    -0x8(%rbp),%r12
leaveq 
retq   
mov    (%rsi),%rax
mov    (%rdx),%rdi
mov    %ecx,%r9d
mov    (%rdi,%r9,8),%r15
mov    0x8(%rdx),%rdi
mov    (%rdi,%r9,8),%r13
mov    0x10(%rdx),%rdi
mov    (%rdi,%r9,8),%r12
mov    %r11,%rdi
jmp    6086 <rgb_rgb_convert_internal+0x46>
nop

00000000000060d0 <extrgb_ycc_convert_internal>:
push   %rbp
mov    %rsp,%rbp
sub    $0x40,%rsp
mov    %rbx,-0x20(%rbp)
mov    %r12,-0x28(%rbp)
mov    %r13,-0x30(%rbp)
mov    %r14,-0x38(%rbp)
mov    %r15,-0x40(%rbp)
mov    %rdx,-0x8(%rbp)
mov    0x1d8(%rdi),%rax
mov    0x10(%rax),%r11
mov    0x30(%rdi),%r13d
xor    %edi,%edi
jmpq   61c2 <extrgb_ycc_convert_internal+0xf2>
movzbl 0x1(%rbx),%r10d
lea    0x100(%r10),%eax
movslq %eax,%rax
mov    (%r11,%rax,8),%rax
movzbl (%rbx),%esi
add    (%r11,%rsi,8),%rax
movzbl 0x2(%rbx),%edx
lea    0x200(%rdx),%ecx
movslq %ecx,%rcx
add    (%r11,%rcx,8),%rax
sar    $0x10,%rax
mov    %edi,%ecx
mov    %al,(%r9,%rcx,1)
lea    0x400(%r10),%eax
movslq %eax,%rax
mov    (%r11,%rax,8),%rax
lea    0x300(%rsi),%r14d
movslq %r14d,%r14
add    (%r11,%r14,8),%rax
lea    0x500(%rdx),%r14d
movslq %r14d,%r14
add    (%r11,%r14,8),%rax
sar    $0x10,%rax
mov    %al,(%r15,%rcx,1)
lea    0x600(%r10),%eax
movslq %eax,%rax
mov    (%r11,%rax,8),%rax
add    $0x500,%esi
movslq %esi,%rsi
add    (%r11,%rsi,8),%rax
add    $0x700,%edx
movslq %edx,%rdx
add    (%r11,%rdx,8),%rax
sar    $0x10,%rax
mov    %al,(%r12,%rcx,1)
add    $0x3,%rbx
add    $0x1,%edi
cmp    %r13d,%edi
jb     6106 <extrgb_ycc_convert_internal+0x36>
mov    -0x18(%rbp),%rax
lea    0x8(%rax),%rsi
mov    -0x10(%rbp),%rax
lea    0x1(%rax),%ecx
xor    %edi,%edi
mov    -0x8(%rbp),%rdx
add    $0xffffffff,%r8d
test   %r8d,%r8d
jns    61e1 <extrgb_ycc_convert_internal+0x111>
mov    -0x40(%rbp),%r15
mov    -0x38(%rbp),%r14
mov    -0x30(%rbp),%r13
mov    -0x28(%rbp),%r12
mov    -0x20(%rbp),%rbx
leaveq 
retq   
mov    (%rsi),%rbx
mov    (%rdx),%rax
mov    %ecx,%r10d
mov    (%rax,%r10,8),%r9
mov    0x8(%rdx),%rax
mov    (%rax,%r10,8),%r15
mov    0x10(%rdx),%rax
mov    (%rax,%r10,8),%r12
mov    %rsi,-0x18(%rbp)
mov    %rcx,-0x10(%rbp)
jmp    61a4 <extrgb_ycc_convert_internal+0xd4>
nopl   0x0(%rax,%rax,1)

0000000000006210 <extrgb_gray_convert_internal>:
push   %rbp
mov    %rsp,%rbp
sub    $0x20,%rsp
mov    %r13,-0x8(%rbp)
mov    %r14,-0x10(%rbp)
mov    %r15,-0x18(%rbp)
mov    0x1d8(%rdi),%rax
mov    0x10(%rax),%r10
mov    0x30(%rdi),%r11d
xor    %r14d,%r14d
jmp    6282 <F_3_072+0x2e>
movzbl 0x1(%rdi),%eax
add    $0x100,%eax
movslq %eax,%rax
mov    (%r10,%rax,8),%rax
movzbl (%rdi),%r13d
add    (%r10,%r13,8),%rax
movzbl 0x2(%rdi),%r13d
add    $0x200,%r13d
movslq %r13d,%r13
add    (%r10,%r13,8),%rax
sar    $0x10,%rax
mov    %r9d,%r13d
mov    %al,(%r15,%r13,1)
add    $0x3,%rdi
add    $0x1,%r9d
cmp    %r11d,%r9d
jb     6238 <extrgb_gray_convert_internal+0x28>
add    $0x8,%rsi
add    $0x1,%ecx
add    $0xffffffff,%r8d
test   %r8d,%r8d
jns    6299 <F_3_072+0x45>
mov    -0x18(%rbp),%r15
mov    -0x10(%rbp),%r14
mov    -0x8(%rbp),%r13
leaveq 
retq   
mov    (%rsi),%rdi
mov    (%rdx),%r9
mov    %ecx,%eax
mov    (%r9,%rax,8),%r15
mov    %r14,%r9
jmp    6276 <F_3_072+0x22>
nopw   0x0(%rax,%rax,1)

00000000000062b0 <extrgb_rgb_convert_internal>:
push   %rbp
mov    %rsp,%rbp
sub    $0x20,%rsp
mov    %r12,-0x8(%rbp)
mov    %r13,-0x10(%rbp)
mov    %r14,-0x18(%rbp)
mov    %r15,-0x20(%rbp)
mov    0x30(%rdi),%r10d
xor    %r11d,%r11d
jmp    6302 <extrgb_rgb_convert_internal+0x52>
movzbl (%rax),%r14d
mov    %edi,%r9d
mov    %r14b,(%r15,%r9,1)
movzbl 0x1(%rax),%r14d
mov    %r14b,0x0(%r13,%r9,1)
movzbl 0x2(%rax),%r14d
mov    %r14b,(%r12,%r9,1)
add    $0x3,%rax
add    $0x1,%edi
cmp    %r10d,%edi
jb     62d1 <extrgb_rgb_convert_internal+0x21>
add    $0x8,%rsi
add    $0x1,%ecx
add    $0xffffffff,%r8d
test   %r8d,%r8d
jns    631d <extrgb_rgb_convert_internal+0x6d>
mov    -0x20(%rbp),%r15
mov    -0x18(%rbp),%r14
mov    -0x10(%rbp),%r13
mov    -0x8(%rbp),%r12
leaveq 
retq   
mov    (%rsi),%rax
mov    (%rdx),%rdi
mov    %ecx,%r9d
mov    (%rdi,%r9,8),%r15
mov    0x8(%rdx),%rdi
mov    (%rdi,%r9,8),%r13
mov    0x10(%rdx),%rdi
mov    (%rdi,%r9,8),%r12
mov    %r11,%rdi
jmp    62f6 <extrgb_rgb_convert_internal+0x46>
nop

0000000000006340 <extrgbx_ycc_convert_internal>:
push   %rbp
mov    %rsp,%rbp
sub    $0x40,%rsp
mov    %rbx,-0x20(%rbp)
mov    %r12,-0x28(%rbp)
mov    %r13,-0x30(%rbp)
mov    %r14,-0x38(%rbp)
mov    %r15,-0x40(%rbp)
mov    %rdx,-0x8(%rbp)
mov    0x1d8(%rdi),%rax
mov    0x10(%rax),%r11
mov    0x30(%rdi),%r13d
xor    %edi,%edi
jmpq   6432 <extrgbx_ycc_convert_internal+0xf2>
movzbl 0x1(%rbx),%r10d
lea    0x100(%r10),%eax
movslq %eax,%rax
mov    (%r11,%rax,8),%rax
movzbl (%rbx),%esi
add    (%r11,%rsi,8),%rax
movzbl 0x2(%rbx),%edx
lea    0x200(%rdx),%ecx
movslq %ecx,%rcx
add    (%r11,%rcx,8),%rax
sar    $0x10,%rax
mov    %edi,%ecx
mov    %al,(%r9,%rcx,1)
lea    0x400(%r10),%eax
movslq %eax,%rax
mov    (%r11,%rax,8),%rax
lea    0x300(%rsi),%r14d
movslq %r14d,%r14
add    (%r11,%r14,8),%rax
lea    0x500(%rdx),%r14d
movslq %r14d,%r14
add    (%r11,%r14,8),%rax
sar    $0x10,%rax
mov    %al,(%r15,%rcx,1)
lea    0x600(%r10),%eax
movslq %eax,%rax
mov    (%r11,%rax,8),%rax
add    $0x500,%esi
movslq %esi,%rsi
add    (%r11,%rsi,8),%rax
add    $0x700,%edx
movslq %edx,%rdx
add    (%r11,%rdx,8),%rax
sar    $0x10,%rax
mov    %al,(%r12,%rcx,1)
add    $0x4,%rbx
add    $0x1,%edi
cmp    %r13d,%edi
jb     6376 <extrgbx_ycc_convert_internal+0x36>
mov    -0x18(%rbp),%rax
lea    0x8(%rax),%rsi
mov    -0x10(%rbp),%rax
lea    0x1(%rax),%ecx
xor    %edi,%edi
mov    -0x8(%rbp),%rdx
add    $0xffffffff,%r8d
test   %r8d,%r8d
jns    6451 <extrgbx_ycc_convert_internal+0x111>
mov    -0x40(%rbp),%r15
mov    -0x38(%rbp),%r14
mov    -0x30(%rbp),%r13
mov    -0x28(%rbp),%r12
mov    -0x20(%rbp),%rbx
leaveq 
retq   
mov    (%rsi),%rbx
mov    (%rdx),%rax
mov    %ecx,%r10d
mov    (%rax,%r10,8),%r9
mov    0x8(%rdx),%rax
mov    (%rax,%r10,8),%r15
mov    0x10(%rdx),%rax
mov    (%rax,%r10,8),%r12
mov    %rsi,-0x18(%rbp)
mov    %rcx,-0x10(%rbp)
jmp    6414 <extrgbx_ycc_convert_internal+0xd4>
nopl   0x0(%rax,%rax,1)

0000000000006480 <extrgbx_gray_convert_internal>:
push   %rbp
mov    %rsp,%rbp
sub    $0x20,%rsp
mov    %r13,-0x8(%rbp)
mov    %r14,-0x10(%rbp)
mov    %r15,-0x18(%rbp)
mov    0x1d8(%rdi),%rax
mov    0x10(%rax),%r10
mov    0x30(%rdi),%r11d
xor    %r14d,%r14d
jmp    64f2 <extrgbx_gray_convert_internal+0x72>
movzbl 0x1(%rdi),%eax
add    $0x100,%eax
movslq %eax,%rax
mov    (%r10,%rax,8),%rax
movzbl (%rdi),%r13d
add    (%r10,%r13,8),%rax
movzbl 0x2(%rdi),%r13d
add    $0x200,%r13d
movslq %r13d,%r13
add    (%r10,%r13,8),%rax
sar    $0x10,%rax
mov    %r9d,%r13d
mov    %al,(%r15,%r13,1)
add    $0x4,%rdi
add    $0x1,%r9d
cmp    %r11d,%r9d
jb     64a8 <extrgbx_gray_convert_internal+0x28>
add    $0x8,%rsi
add    $0x1,%ecx
add    $0xffffffff,%r8d
test   %r8d,%r8d
jns    6509 <extrgbx_gray_convert_internal+0x89>
mov    -0x18(%rbp),%r15
mov    -0x10(%rbp),%r14
mov    -0x8(%rbp),%r13
leaveq 
retq   
mov    (%rsi),%rdi
mov    (%rdx),%r9
mov    %ecx,%eax
mov    (%r9,%rax,8),%r15
mov    %r14,%r9
jmp    64e6 <extrgbx_gray_convert_internal+0x66>
nopw   0x0(%rax,%rax,1)

0000000000006520 <extrgbx_rgb_convert_internal>:
push   %rbp
mov    %rsp,%rbp
sub    $0x20,%rsp
mov    %r12,-0x8(%rbp)
mov    %r13,-0x10(%rbp)
mov    %r14,-0x18(%rbp)
mov    %r15,-0x20(%rbp)
mov    0x30(%rdi),%r10d
xor    %r11d,%r11d
jmp    6572 <extrgbx_rgb_convert_internal+0x52>
movzbl (%rax),%r14d
mov    %edi,%r9d
mov    %r14b,(%r15,%r9,1)
movzbl 0x1(%rax),%r14d
mov    %r14b,0x0(%r13,%r9,1)
movzbl 0x2(%rax),%r14d
mov    %r14b,(%r12,%r9,1)
add    $0x4,%rax
add    $0x1,%edi
cmp    %r10d,%edi
jb     6541 <extrgbx_rgb_convert_internal+0x21>
add    $0x8,%rsi
add    $0x1,%ecx
add    $0xffffffff,%r8d
test   %r8d,%r8d
jns    658d <extrgbx_rgb_convert_internal+0x6d>
mov    -0x20(%rbp),%r15
mov    -0x18(%rbp),%r14
mov    -0x10(%rbp),%r13
mov    -0x8(%rbp),%r12
leaveq 
retq   
mov    (%rsi),%rax
mov    (%rdx),%rdi
mov    %ecx,%r9d
mov    (%rdi,%r9,8),%r15
mov    0x8(%rdx),%rdi
mov    (%rdi,%r9,8),%r13
mov    0x10(%rdx),%rdi
mov    (%rdi,%r9,8),%r12
mov    %r11,%rdi
jmp    6566 <extrgbx_rgb_convert_internal+0x46>
nop

00000000000065b0 <extbgr_ycc_convert_internal>:
push   %rbp
mov    %rsp,%rbp
sub    $0x40,%rsp
mov    %rbx,-0x20(%rbp)
mov    %r12,-0x28(%rbp)
mov    %r13,-0x30(%rbp)
mov    %r14,-0x38(%rbp)
mov    %r15,-0x40(%rbp)
mov    %rdx,-0x8(%rbp)
mov    0x1d8(%rdi),%rax
mov    0x10(%rax),%r11
mov    0x30(%rdi),%r13d
xor    %edi,%edi
jmpq   66a2 <extbgr_ycc_convert_internal+0xf2>
movzbl 0x1(%rbx),%r10d
lea    0x100(%r10),%eax
movslq %eax,%rax
mov    (%r11,%rax,8),%rax
movzbl 0x2(%rbx),%esi
add    (%r11,%rsi,8),%rax
movzbl (%rbx),%edx
lea    0x200(%rdx),%ecx
movslq %ecx,%rcx
add    (%r11,%rcx,8),%rax
sar    $0x10,%rax
mov    %edi,%ecx
mov    %al,(%r9,%rcx,1)
lea    0x400(%r10),%eax
movslq %eax,%rax
mov    (%r11,%rax,8),%rax
lea    0x300(%rsi),%r14d
movslq %r14d,%r14
add    (%r11,%r14,8),%rax
lea    0x500(%rdx),%r14d
movslq %r14d,%r14
add    (%r11,%r14,8),%rax
sar    $0x10,%rax
mov    %al,(%r15,%rcx,1)
lea    0x600(%r10),%eax
movslq %eax,%rax
mov    (%r11,%rax,8),%rax
add    $0x500,%esi
movslq %esi,%rsi
add    (%r11,%rsi,8),%rax
add    $0x700,%edx
movslq %edx,%rdx
add    (%r11,%rdx,8),%rax
sar    $0x10,%rax
mov    %al,(%r12,%rcx,1)
add    $0x3,%rbx
add    $0x1,%edi
cmp    %r13d,%edi
jb     65e6 <extbgr_ycc_convert_internal+0x36>
mov    -0x18(%rbp),%rax
lea    0x8(%rax),%rsi
mov    -0x10(%rbp),%rax
lea    0x1(%rax),%ecx
xor    %edi,%edi
mov    -0x8(%rbp),%rdx
add    $0xffffffff,%r8d
test   %r8d,%r8d
jns    66c1 <extbgr_ycc_convert_internal+0x111>
mov    -0x40(%rbp),%r15
mov    -0x38(%rbp),%r14
mov    -0x30(%rbp),%r13
mov    -0x28(%rbp),%r12
mov    -0x20(%rbp),%rbx
leaveq 
retq   
mov    (%rsi),%rbx
mov    (%rdx),%rax
mov    %ecx,%r10d
mov    (%rax,%r10,8),%r9
mov    0x8(%rdx),%rax
mov    (%rax,%r10,8),%r15
mov    0x10(%rdx),%rax
mov    (%rax,%r10,8),%r12
mov    %rsi,-0x18(%rbp)
mov    %rcx,-0x10(%rbp)
jmp    6684 <extbgr_ycc_convert_internal+0xd4>
nopl   0x0(%rax,%rax,1)

00000000000066f0 <extbgr_gray_convert_internal>:
push   %rbp
mov    %rsp,%rbp
sub    $0x20,%rsp
mov    %r13,-0x8(%rbp)
mov    %r14,-0x10(%rbp)
mov    %r15,-0x18(%rbp)
mov    0x1d8(%rdi),%rax
mov    0x10(%rax),%r10
mov    0x30(%rdi),%r11d
xor    %r14d,%r14d
jmp    6762 <extbgr_gray_convert_internal+0x72>
movzbl 0x1(%rdi),%eax
add    $0x100,%eax
movslq %eax,%rax
mov    (%r10,%rax,8),%rax
movzbl 0x2(%rdi),%r13d
add    (%r10,%r13,8),%rax
movzbl (%rdi),%r13d
add    $0x200,%r13d
movslq %r13d,%r13
add    (%r10,%r13,8),%rax
sar    $0x10,%rax
mov    %r9d,%r13d
mov    %al,(%r15,%r13,1)
add    $0x3,%rdi
add    $0x1,%r9d
cmp    %r11d,%r9d
jb     6718 <extbgr_gray_convert_internal+0x28>
add    $0x8,%rsi
add    $0x1,%ecx
add    $0xffffffff,%r8d
test   %r8d,%r8d
jns    6779 <extbgr_gray_convert_internal+0x89>
mov    -0x18(%rbp),%r15
mov    -0x10(%rbp),%r14
mov    -0x8(%rbp),%r13
leaveq 
retq   
mov    (%rsi),%rdi
mov    (%rdx),%r9
mov    %ecx,%eax
mov    (%r9,%rax,8),%r15
mov    %r14,%r9
jmp    6756 <extbgr_gray_convert_internal+0x66>
nopw   0x0(%rax,%rax,1)

0000000000006790 <extbgr_rgb_convert_internal>:
push   %rbp
mov    %rsp,%rbp
sub    $0x20,%rsp
mov    %r12,-0x8(%rbp)
mov    %r13,-0x10(%rbp)
mov    %r14,-0x18(%rbp)
mov    %r15,-0x20(%rbp)
mov    0x30(%rdi),%r10d
xor    %r11d,%r11d
jmp    67e2 <extbgr_rgb_convert_internal+0x52>
movzbl 0x2(%rax),%r14d
mov    %edi,%r9d
mov    %r14b,(%r15,%r9,1)
movzbl 0x1(%rax),%r14d
mov    %r14b,0x0(%r13,%r9,1)
movzbl (%rax),%r14d
mov    %r14b,(%r12,%r9,1)
add    $0x3,%rax
add    $0x1,%edi
cmp    %r10d,%edi
jb     67b1 <extbgr_rgb_convert_internal+0x21>
add    $0x8,%rsi
add    $0x1,%ecx
add    $0xffffffff,%r8d
test   %r8d,%r8d
jns    67fd <extbgr_rgb_convert_internal+0x6d>
mov    -0x20(%rbp),%r15
mov    -0x18(%rbp),%r14
mov    -0x10(%rbp),%r13
mov    -0x8(%rbp),%r12
leaveq 
retq   
mov    (%rsi),%rax
mov    (%rdx),%rdi
mov    %ecx,%r9d
mov    (%rdi,%r9,8),%r15
mov    0x8(%rdx),%rdi
mov    (%rdi,%r9,8),%r13
mov    0x10(%rdx),%rdi
mov    (%rdi,%r9,8),%r12
mov    %r11,%rdi
jmp    67d6 <extbgr_rgb_convert_internal+0x46>
nop

0000000000006820 <extbgrx_ycc_convert_internal>:
push   %rbp
mov    %rsp,%rbp
sub    $0x40,%rsp
mov    %rbx,-0x20(%rbp)
mov    %r12,-0x28(%rbp)
mov    %r13,-0x30(%rbp)
mov    %r14,-0x38(%rbp)
mov    %r15,-0x40(%rbp)
mov    %rdx,-0x8(%rbp)
mov    0x1d8(%rdi),%rax
mov    0x10(%rax),%r11
mov    0x30(%rdi),%r13d
xor    %edi,%edi
jmpq   6912 <extbgrx_ycc_convert_internal+0xf2>
movzbl 0x1(%rbx),%r10d
lea    0x100(%r10),%eax
movslq %eax,%rax
mov    (%r11,%rax,8),%rax
movzbl 0x2(%rbx),%esi
add    (%r11,%rsi,8),%rax
movzbl (%rbx),%edx
lea    0x200(%rdx),%ecx
movslq %ecx,%rcx
add    (%r11,%rcx,8),%rax
sar    $0x10,%rax
mov    %edi,%ecx
mov    %al,(%r9,%rcx,1)
lea    0x400(%r10),%eax
movslq %eax,%rax
mov    (%r11,%rax,8),%rax
lea    0x300(%rsi),%r14d
movslq %r14d,%r14
add    (%r11,%r14,8),%rax
lea    0x500(%rdx),%r14d
movslq %r14d,%r14
add    (%r11,%r14,8),%rax
sar    $0x10,%rax
mov    %al,(%r15,%rcx,1)
lea    0x600(%r10),%eax
movslq %eax,%rax
mov    (%r11,%rax,8),%rax
add    $0x500,%esi
movslq %esi,%rsi
add    (%r11,%rsi,8),%rax
add    $0x700,%edx
movslq %edx,%rdx
add    (%r11,%rdx,8),%rax
sar    $0x10,%rax
mov    %al,(%r12,%rcx,1)
add    $0x4,%rbx
add    $0x1,%edi
cmp    %r13d,%edi
jb     6856 <extbgrx_ycc_convert_internal+0x36>
mov    -0x18(%rbp),%rax
lea    0x8(%rax),%rsi
mov    -0x10(%rbp),%rax
lea    0x1(%rax),%ecx
xor    %edi,%edi
mov    -0x8(%rbp),%rdx
add    $0xffffffff,%r8d
test   %r8d,%r8d
jns    6931 <extbgrx_ycc_convert_internal+0x111>
mov    -0x40(%rbp),%r15
mov    -0x38(%rbp),%r14
mov    -0x30(%rbp),%r13
mov    -0x28(%rbp),%r12
mov    -0x20(%rbp),%rbx
leaveq 
retq   
mov    (%rsi),%rbx
mov    (%rdx),%rax
mov    %ecx,%r10d
mov    (%rax,%r10,8),%r9
mov    0x8(%rdx),%rax
mov    (%rax,%r10,8),%r15
mov    0x10(%rdx),%rax
mov    (%rax,%r10,8),%r12
mov    %rsi,-0x18(%rbp)
mov    %rcx,-0x10(%rbp)
jmp    68f4 <extbgrx_ycc_convert_internal+0xd4>
nopl   0x0(%rax,%rax,1)

0000000000006960 <extbgrx_gray_convert_internal>:
push   %rbp
mov    %rsp,%rbp
sub    $0x20,%rsp
mov    %r13,-0x8(%rbp)
mov    %r14,-0x10(%rbp)
mov    %r15,-0x18(%rbp)
mov    0x1d8(%rdi),%rax
mov    0x10(%rax),%r10
mov    0x30(%rdi),%r11d
xor    %r14d,%r14d
jmp    69d2 <extbgrx_gray_convert_internal+0x72>
movzbl 0x1(%rdi),%eax
add    $0x100,%eax
movslq %eax,%rax
mov    (%r10,%rax,8),%rax
movzbl 0x2(%rdi),%r13d
add    (%r10,%r13,8),%rax
movzbl (%rdi),%r13d
add    $0x200,%r13d
movslq %r13d,%r13
add    (%r10,%r13,8),%rax
sar    $0x10,%rax
mov    %r9d,%r13d
mov    %al,(%r15,%r13,1)
add    $0x4,%rdi
add    $0x1,%r9d
cmp    %r11d,%r9d
jb     6988 <extbgrx_gray_convert_internal+0x28>
add    $0x8,%rsi
add    $0x1,%ecx
add    $0xffffffff,%r8d
test   %r8d,%r8d
jns    69e9 <extbgrx_gray_convert_internal+0x89>
mov    -0x18(%rbp),%r15
mov    -0x10(%rbp),%r14
mov    -0x8(%rbp),%r13
leaveq 
retq   
mov    (%rsi),%rdi
mov    (%rdx),%r9
mov    %ecx,%eax
mov    (%r9,%rax,8),%r15
mov    %r14,%r9
jmp    69c6 <extbgrx_gray_convert_internal+0x66>
nopw   0x0(%rax,%rax,1)

0000000000006a00 <extbgrx_rgb_convert_internal>:
push   %rbp
mov    %rsp,%rbp
sub    $0x20,%rsp
mov    %r12,-0x8(%rbp)
mov    %r13,-0x10(%rbp)
mov    %r14,-0x18(%rbp)
mov    %r15,-0x20(%rbp)
mov    0x30(%rdi),%r10d
xor    %r11d,%r11d
jmp    6a52 <extbgrx_rgb_convert_internal+0x52>
movzbl 0x2(%rax),%r14d
mov    %edi,%r9d
mov    %r14b,(%r15,%r9,1)
movzbl 0x1(%rax),%r14d
mov    %r14b,0x0(%r13,%r9,1)
movzbl (%rax),%r14d
mov    %r14b,(%r12,%r9,1)
add    $0x4,%rax
add    $0x1,%edi
cmp    %r10d,%edi
jb     6a21 <extbgrx_rgb_convert_internal+0x21>
add    $0x8,%rsi
add    $0x1,%ecx
add    $0xffffffff,%r8d
test   %r8d,%r8d
jns    6a6d <extbgrx_rgb_convert_internal+0x6d>
mov    -0x20(%rbp),%r15
mov    -0x18(%rbp),%r14
mov    -0x10(%rbp),%r13
mov    -0x8(%rbp),%r12
leaveq 
retq   
mov    (%rsi),%rax
mov    (%rdx),%rdi
mov    %ecx,%r9d
mov    (%rdi,%r9,8),%r15
mov    0x8(%rdx),%rdi
mov    (%rdi,%r9,8),%r13
mov    0x10(%rdx),%rdi
mov    (%rdi,%r9,8),%r12
mov    %r11,%rdi
jmp    6a46 <extbgrx_rgb_convert_internal+0x46>
nop

0000000000006a90 <extxbgr_ycc_convert_internal>:
push   %rbp
mov    %rsp,%rbp
sub    $0x40,%rsp
mov    %rbx,-0x20(%rbp)
mov    %r12,-0x28(%rbp)
mov    %r13,-0x30(%rbp)
mov    %r14,-0x38(%rbp)
mov    %r15,-0x40(%rbp)
mov    %rdx,-0x8(%rbp)
mov    0x1d8(%rdi),%rax
mov    0x10(%rax),%r11
mov    0x30(%rdi),%r13d
xor    %edi,%edi
jmpq   6b83 <F_0_418+0x54>
movzbl 0x2(%rbx),%r10d
lea    0x100(%r10),%eax
movslq %eax,%rax
mov    (%r11,%rax,8),%rax
movzbl 0x3(%rbx),%esi
add    (%r11,%rsi,8),%rax
movzbl 0x1(%rbx),%edx
lea    0x200(%rdx),%ecx
movslq %ecx,%rcx
add    (%r11,%rcx,8),%rax
sar    $0x10,%rax
mov    %edi,%ecx
mov    %al,(%r9,%rcx,1)
lea    0x400(%r10),%eax
movslq %eax,%rax
mov    (%r11,%rax,8),%rax
lea    0x300(%rsi),%r14d
movslq %r14d,%r14
add    (%r11,%r14,8),%rax
lea    0x500(%rdx),%r14d
movslq %r14d,%r14
add    (%r11,%r14,8),%rax
sar    $0x10,%rax
mov    %al,(%r15,%rcx,1)
lea    0x600(%r10),%eax
movslq %eax,%rax
mov    (%r11,%rax,8),%rax
add    $0x500,%esi
movslq %esi,%rsi
add    (%r11,%rsi,8),%rax
add    $0x700,%edx
movslq %edx,%rdx
add    (%r11,%rdx,8),%rax
sar    $0x10,%rax
mov    %al,(%r12,%rcx,1)
add    $0x4,%rbx
add    $0x1,%edi
cmp    %r13d,%edi
jb     6ac6 <extxbgr_ycc_convert_internal+0x36>
mov    -0x18(%rbp),%rax
lea    0x8(%rax),%rsi
mov    -0x10(%rbp),%rax
lea    0x1(%rax),%ecx
xor    %edi,%edi
mov    -0x8(%rbp),%rdx
add    $0xffffffff,%r8d
test   %r8d,%r8d
jns    6ba2 <F_0_418+0x73>
mov    -0x40(%rbp),%r15
mov    -0x38(%rbp),%r14
mov    -0x30(%rbp),%r13
mov    -0x28(%rbp),%r12
mov    -0x20(%rbp),%rbx
leaveq 
retq   
mov    (%rsi),%rbx
mov    (%rdx),%rax
mov    %ecx,%r10d
mov    (%rax,%r10,8),%r9
mov    0x8(%rdx),%rax
mov    (%rax,%r10,8),%r15
mov    0x10(%rdx),%rax
mov    (%rax,%r10,8),%r12
mov    %rsi,-0x18(%rbp)
mov    %rcx,-0x10(%rbp)
jmp    6b65 <F_0_418+0x36>
nopl   0x0(%rax)

0000000000006bd0 <extxbgr_gray_convert_internal>:
push   %rbp
mov    %rsp,%rbp
sub    $0x20,%rsp
mov    %r13,-0x8(%rbp)
mov    %r14,-0x10(%rbp)
mov    %r15,-0x18(%rbp)
mov    0x1d8(%rdi),%rax
mov    0x10(%rax),%r10
mov    0x30(%rdi),%r11d
xor    %r14d,%r14d
jmp    6c43 <extxbgr_gray_convert_internal+0x73>
movzbl 0x2(%rdi),%eax
add    $0x100,%eax
movslq %eax,%rax
mov    (%r10,%rax,8),%rax
movzbl 0x3(%rdi),%r13d
add    (%r10,%r13,8),%rax
movzbl 0x1(%rdi),%r13d
add    $0x200,%r13d
movslq %r13d,%r13
add    (%r10,%r13,8),%rax
sar    $0x10,%rax
mov    %r9d,%r13d
mov    %al,(%r15,%r13,1)
add    $0x4,%rdi
add    $0x1,%r9d
cmp    %r11d,%r9d
jb     6bf8 <extxbgr_gray_convert_internal+0x28>
add    $0x8,%rsi
add    $0x1,%ecx
add    $0xffffffff,%r8d
test   %r8d,%r8d
jns    6c5a <extxbgr_gray_convert_internal+0x8a>
mov    -0x18(%rbp),%r15
mov    -0x10(%rbp),%r14
mov    -0x8(%rbp),%r13
leaveq 
retq   
mov    (%rsi),%rdi
mov    (%rdx),%r9
mov    %ecx,%eax
mov    (%r9,%rax,8),%r15
mov    %r14,%r9
jmp    6c37 <extxbgr_gray_convert_internal+0x67>
nopl   0x0(%rax,%rax,1)

0000000000006c70 <extxbgr_rgb_convert_internal>:
push   %rbp
mov    %rsp,%rbp
sub    $0x20,%rsp
mov    %r12,-0x8(%rbp)
mov    %r13,-0x10(%rbp)
mov    %r14,-0x18(%rbp)
mov    %r15,-0x20(%rbp)
mov    0x30(%rdi),%r10d
xor    %r11d,%r11d
jmp    6cc3 <extxbgr_rgb_convert_internal+0x53>
movzbl 0x3(%rax),%r14d
mov    %edi,%r9d
mov    %r14b,(%r15,%r9,1)
movzbl 0x2(%rax),%r14d
mov    %r14b,0x0(%r13,%r9,1)
movzbl 0x1(%rax),%r14d
mov    %r14b,(%r12,%r9,1)
add    $0x4,%rax
add    $0x1,%edi
cmp    %r10d,%edi
jb     6c91 <extxbgr_rgb_convert_internal+0x21>
add    $0x8,%rsi
add    $0x1,%ecx
add    $0xffffffff,%r8d
test   %r8d,%r8d
jns    6cde <extxbgr_rgb_convert_internal+0x6e>
mov    -0x20(%rbp),%r15
mov    -0x18(%rbp),%r14
mov    -0x10(%rbp),%r13
mov    -0x8(%rbp),%r12
leaveq 
retq   
mov    (%rsi),%rax
mov    (%rdx),%rdi
mov    %ecx,%r9d
mov    (%rdi,%r9,8),%r15
mov    0x8(%rdx),%rdi
mov    (%rdi,%r9,8),%r13
mov    0x10(%rdx),%rdi
mov    (%rdi,%r9,8),%r12
mov    %r11,%rdi
jmp    6cb7 <extxbgr_rgb_convert_internal+0x47>

0000000000006d00 <extxrgb_ycc_convert_internal>:
push   %rbp
mov    %rsp,%rbp
sub    $0x40,%rsp
mov    %rbx,-0x20(%rbp)
mov    %r12,-0x28(%rbp)
mov    %r13,-0x30(%rbp)
mov    %r14,-0x38(%rbp)
mov    %r15,-0x40(%rbp)
mov    %rdx,-0x8(%rbp)
mov    0x1d8(%rdi),%rax
mov    0x10(%rax),%r11
mov    0x30(%rdi),%r13d
xor    %edi,%edi
jmpq   6df3 <extxrgb_ycc_convert_internal+0xf3>
movzbl 0x2(%rbx),%r10d
lea    0x100(%r10),%eax
movslq %eax,%rax
mov    (%r11,%rax,8),%rax
movzbl 0x1(%rbx),%esi
add    (%r11,%rsi,8),%rax
movzbl 0x3(%rbx),%edx
lea    0x200(%rdx),%ecx
movslq %ecx,%rcx
add    (%r11,%rcx,8),%rax
sar    $0x10,%rax
mov    %edi,%ecx
mov    %al,(%r9,%rcx,1)
lea    0x400(%r10),%eax
movslq %eax,%rax
mov    (%r11,%rax,8),%rax
lea    0x300(%rsi),%r14d
movslq %r14d,%r14
add    (%r11,%r14,8),%rax
lea    0x500(%rdx),%r14d
movslq %r14d,%r14
add    (%r11,%r14,8),%rax
sar    $0x10,%rax
mov    %al,(%r15,%rcx,1)
lea    0x600(%r10),%eax
movslq %eax,%rax
mov    (%r11,%rax,8),%rax
add    $0x500,%esi
movslq %esi,%rsi
add    (%r11,%rsi,8),%rax
add    $0x700,%edx
movslq %edx,%rdx
add    (%r11,%rdx,8),%rax
sar    $0x10,%rax
mov    %al,(%r12,%rcx,1)
add    $0x4,%rbx
add    $0x1,%edi
cmp    %r13d,%edi
jb     6d36 <extxrgb_ycc_convert_internal+0x36>
mov    -0x18(%rbp),%rax
lea    0x8(%rax),%rsi
mov    -0x10(%rbp),%rax
lea    0x1(%rax),%ecx
xor    %edi,%edi
mov    -0x8(%rbp),%rdx
add    $0xffffffff,%r8d
test   %r8d,%r8d
jns    6e12 <extxrgb_ycc_convert_internal+0x112>
mov    -0x40(%rbp),%r15
mov    -0x38(%rbp),%r14
mov    -0x30(%rbp),%r13
mov    -0x28(%rbp),%r12
mov    -0x20(%rbp),%rbx
leaveq 
retq   
mov    (%rsi),%rbx
mov    (%rdx),%rax
mov    %ecx,%r10d
mov    (%rax,%r10,8),%r9
mov    0x8(%rdx),%rax
mov    (%rax,%r10,8),%r15
mov    0x10(%rdx),%rax
mov    (%rax,%r10,8),%r12
mov    %rsi,-0x18(%rbp)
mov    %rcx,-0x10(%rbp)
jmp    6dd5 <extxrgb_ycc_convert_internal+0xd5>
nopl   0x0(%rax)

0000000000006e40 <extxrgb_gray_convert_internal>:
push   %rbp
mov    %rsp,%rbp
sub    $0x20,%rsp
mov    %r13,-0x8(%rbp)
mov    %r14,-0x10(%rbp)
mov    %r15,-0x18(%rbp)
mov    0x1d8(%rdi),%rax
mov    0x10(%rax),%r10
mov    0x30(%rdi),%r11d
xor    %r14d,%r14d
jmp    6eb3 <extxrgb_gray_convert_internal+0x73>
movzbl 0x2(%rdi),%eax
add    $0x100,%eax
movslq %eax,%rax
mov    (%r10,%rax,8),%rax
movzbl 0x1(%rdi),%r13d
add    (%r10,%r13,8),%rax
movzbl 0x3(%rdi),%r13d
add    $0x200,%r13d
movslq %r13d,%r13
add    (%r10,%r13,8),%rax
sar    $0x10,%rax
mov    %r9d,%r13d
mov    %al,(%r15,%r13,1)
add    $0x4,%rdi
add    $0x1,%r9d
cmp    %r11d,%r9d
jb     6e68 <extxrgb_gray_convert_internal+0x28>
add    $0x8,%rsi
add    $0x1,%ecx
add    $0xffffffff,%r8d
test   %r8d,%r8d
jns    6eca <extxrgb_gray_convert_internal+0x8a>
mov    -0x18(%rbp),%r15
mov    -0x10(%rbp),%r14
mov    -0x8(%rbp),%r13
leaveq 
retq   
mov    (%rsi),%rdi
mov    (%rdx),%r9
mov    %ecx,%eax
mov    (%r9,%rax,8),%r15
mov    %r14,%r9
jmp    6ea7 <extxrgb_gray_convert_internal+0x67>
nopl   0x0(%rax,%rax,1)

0000000000006ee0 <extxrgb_rgb_convert_internal>:
push   %rbp
mov    %rsp,%rbp
sub    $0x20,%rsp
mov    %r12,-0x8(%rbp)
mov    %r13,-0x10(%rbp)
mov    %r14,-0x18(%rbp)
mov    %r15,-0x20(%rbp)
mov    0x30(%rdi),%r10d
xor    %r11d,%r11d
jmp    6f33 <extxrgb_rgb_convert_internal+0x53>
movzbl 0x1(%rax),%r14d
mov    %edi,%r9d
mov    %r14b,(%r15,%r9,1)
movzbl 0x2(%rax),%r14d
mov    %r14b,0x0(%r13,%r9,1)
movzbl 0x3(%rax),%r14d
mov    %r14b,(%r12,%r9,1)
add    $0x4,%rax
add    $0x1,%edi
cmp    %r10d,%edi
jb     6f01 <extxrgb_rgb_convert_internal+0x21>
add    $0x8,%rsi
add    $0x1,%ecx
add    $0xffffffff,%r8d
test   %r8d,%r8d
jns    6f4e <extxrgb_rgb_convert_internal+0x6e>
mov    -0x20(%rbp),%r15
mov    -0x18(%rbp),%r14
mov    -0x10(%rbp),%r13
mov    -0x8(%rbp),%r12
leaveq 
retq   
mov    (%rsi),%rax
mov    (%rdx),%rdi
mov    %ecx,%r9d
mov    (%rdi,%r9,8),%r15
mov    0x8(%rdx),%rdi
mov    (%rdi,%r9,8),%r13
mov    0x10(%rdx),%rdi
mov    (%rdi,%r9,8),%r12
mov    %r11,%rdi
jmp    6f27 <extxrgb_rgb_convert_internal+0x47>

0000000000006f70 <rgb_ycc_start>:
push   %rbp
mov    %rsp,%rbp
sub    $0x10,%rsp
mov    %r15,-0x8(%rbp)
mov    0x8(%rdi),%rax
mov    (%rax),%rax
mov    $0x1,%esi
mov    $0x4000,%edx
mov    0x1d8(%rdi),%r15
callq  *%rax
mov    %rax,0x10(%r15)
xor    %ecx,%ecx
jmpq   7077 <rgb_ycc_start+0x107>
lea    (%rcx,%rcx,8),%rsi
mov    %rsi,%rdx
shl    $0x4,%rdx
lea    (%rdx,%rcx,8),%rdx
add    %rcx,%rdx
shl    $0x7,%rdx
lea    (%rdx,%rcx,8),%rdx
lea    (%rdx,%rcx,2),%rdx
add    %rcx,%rdx
mov    %rdx,(%rax,%rcx,8)
lea    (%rcx,%rsi,4),%rdx
shl    $0x4,%rdx
lea    (%rdx,%rcx,8),%rdx
add    %rcx,%rdx
shl    $0x6,%rdx
lea    (%rdx,%rcx,4),%rdx
lea    (%rdx,%rcx,2),%rdx
mov    %rdx,0x800(%rax,%rcx,8)
mov    %rcx,%rdx
imul   $0x1d2f,%rdx,%rdx
add    $0x8000,%rdx
mov    %rdx,0x1000(%rax,%rcx,8)
mov    %rcx,%rdx
imul   $0xffffffffffffd4cd,%rdx,%rdx
mov    %rdx,0x1800(%rax,%rcx,8)
mov    %rcx,%rdx
imul   $0xffffffffffffab33,%rdx,%rdx
mov    %rdx,0x2000(%rax,%rcx,8)
mov    %rcx,%rdx
shl    $0xf,%rdx
add    $0x807fff,%rdx
mov    %rdx,0x2800(%rax,%rcx,8)
mov    %rcx,%rdx
imul   $0xffffffffffff94d1,%rdx,%rdx
mov    %rdx,0x3000(%rax,%rcx,8)
lea    (%rcx,%rcx,4),%rdx
shl    $0x6,%rdx
lea    (%rdx,%rcx,8),%rdx
lea    (%rdx,%rcx,4),%rdx
add    %rcx,%rdx
shl    $0x4,%rdx
add    %rcx,%rdx
neg    %rdx
mov    %rdx,0x3800(%rax,%rcx,8)
add    $0x1,%rcx
cmp    $0xff,%rcx
jle    6fa1 <rgb_ycc_start+0x31>
mov    -0x8(%rbp),%r15
leaveq 
retq   
nopw   0x0(%rax,%rax,1)

0000000000007090 <rgb_ycc_convert>:
push   %rbp
mov    %rsp,%rbp
mov    0x3c(%rdi),%eax
add    $0xfffffffa,%eax
cmp    $0x9,%eax
ja     70b6 <rgb_ycc_convert+0x26>
lea    0x41fb2(%rip),%r9        # 49058 <_fini+0xe38>
movslq (%r9,%rax,4),%rax
add    %r9,%rax
jmpq   *%rax
callq  6d00 <extxrgb_ycc_convert_internal>
leaveq 
retq   
callq  5e60 <rgb_ycc_convert_internal>
leaveq 
retq   
callq  60d0 <extrgb_ycc_convert_internal>
leaveq 
retq   
callq  6340 <extrgbx_ycc_convert_internal>
leaveq 
retq   
callq  65b0 <extbgr_ycc_convert_internal>
leaveq 
retq   
callq  6820 <extbgrx_ycc_convert_internal>
leaveq 
retq   
callq  6a90 <extxbgr_ycc_convert_internal>
leaveq 
retq   

00000000000070e0 <rgb_gray_convert>:
push   %rbp
mov    %rsp,%rbp
mov    0x3c(%rdi),%eax
add    $0xfffffffa,%eax
cmp    $0x9,%eax
ja     7106 <rgb_gray_convert+0x26>
lea    0x41f8a(%rip),%r9        # 49080 <_fini+0xe60>
movslq (%r9,%rax,4),%rax
add    %r9,%rax
jmpq   *%rax
callq  6e40 <extxrgb_gray_convert_internal>
leaveq 
retq   
callq  5fa0 <rgb_gray_convert_internal>
leaveq 
retq   
callq  6210 <extrgb_gray_convert_internal>
leaveq 
retq   
callq  6480 <extrgbx_gray_convert_internal>
leaveq 
retq   
callq  66f0 <extbgr_gray_convert_internal>
leaveq 
retq   
callq  6960 <extbgrx_gray_convert_internal>
leaveq 
retq   
callq  6bd0 <extxbgr_gray_convert_internal>
leaveq 
retq   

0000000000007130 <rgb_rgb_convert>:
push   %rbp
mov    %rsp,%rbp
mov    0x3c(%rdi),%eax
add    $0xfffffffa,%eax
cmp    $0x9,%eax
ja     7156 <rgb_rgb_convert+0x26>
lea    0x41f62(%rip),%r9        # 490a8 <_fini+0xe88>
movslq (%r9,%rax,4),%rax
add    %r9,%rax
jmpq   *%rax
callq  6ee0 <extxrgb_rgb_convert_internal>
leaveq 
retq   
callq  6040 <rgb_rgb_convert_internal>
leaveq 
retq   
callq  62b0 <extrgb_rgb_convert_internal>
leaveq 
retq   
callq  6520 <extrgbx_rgb_convert_internal>
leaveq 
retq   
callq  6790 <extbgr_rgb_convert_internal>
leaveq 
retq   
callq  6a00 <extbgrx_rgb_convert_internal>
leaveq 
retq   
callq  6c70 <extxbgr_rgb_convert_internal>
leaveq 
retq   

0000000000007180 <cmyk_ycck_convert>:
push   %rbp
mov    %rsp,%rbp
sub    $0x50,%rsp
mov    %r15,-0x48(%rbp)
mov    %r14,-0x40(%rbp)
mov    %r13,-0x38(%rbp)
mov    %r12,-0x30(%rbp)
mov    %rbx,-0x28(%rbp)
mov    %rdx,-0x10(%rbp)
mov    0x1d8(%rdi),%rax
mov    0x10(%rax),%r9
mov    0x30(%rdi),%r11d
mov    $0x1ff,%eax
mov    $0xff,%edi
xor    %ebx,%ebx
jmpq   729e <cmyk_ycck_convert+0x11e>
movzbl 0x3(%r8),%ecx
mov    %ebx,%r13d
movzbl 0x1(%r8),%edx
sub    %edx,%eax
movslq %eax,%rax
movzbl (%r8),%r14d
sub    %r14d,%edi
movslq %edi,%rsi
movzbl 0x2(%r8),%edi
mov    %cl,(%r15,%r13,1)
mov    (%r9,%rax,8),%rax
add    (%r9,%rsi,8),%rax
mov    $0x2ff,%ecx
sub    %edi,%ecx
movslq %ecx,%rcx
add    (%r9,%rcx,8),%rax
sar    $0x10,%rax
mov    %al,(%r10,%r13,1)
mov    $0x4ff,%eax
sub    %edx,%eax
movslq %eax,%rax
mov    (%r9,%rax,8),%rax
mov    $0x3ff,%ecx
sub    %r14d,%ecx
movslq %ecx,%rcx
add    (%r9,%rcx,8),%rax
mov    $0x5ff,%ecx
mov    %rcx,%rsi
sub    %edi,%esi
movslq %esi,%rsi
add    (%r9,%rsi,8),%rax
sar    $0x10,%rax
mov    %al,(%r12,%r13,1)
mov    $0x6ff,%eax
sub    %edx,%eax
movslq %eax,%rax
mov    (%r9,%rax,8),%rax
sub    %r14d,%ecx
movslq %ecx,%rcx
add    (%r9,%rcx,8),%rax
mov    $0x7ff,%ecx
sub    %edi,%ecx
movslq %ecx,%rcx
add    (%r9,%rcx,8),%rax
sar    $0x10,%rax
mov    -0x8(%rbp),%rcx
mov    %al,(%rcx,%r13,1)
add    $0x4,%r8
add    $0x1,%ebx
mov    $0xff,%edi
mov    $0x1ff,%eax
cmp    %r11d,%ebx
jb     71c0 <cmyk_ycck_convert+0x40>
mov    -0x20(%rbp),%rcx
lea    0x8(%rcx),%rsi
mov    -0x18(%rbp),%rcx
add    $0x1,%ecx
xor    %ebx,%ebx
mov    -0x10(%rbp),%rdx
mov    -0x50(%rbp),%r8
add    $0xffffffff,%r8d
test   %r8d,%r8d
jns    72bd <cmyk_ycck_convert+0x13d>
mov    -0x28(%rbp),%rbx
mov    -0x30(%rbp),%r12
mov    -0x38(%rbp),%r13
mov    -0x40(%rbp),%r14
mov    -0x48(%rbp),%r15
leaveq 
retq   
mov    %r8,-0x50(%rbp)
mov    (%rsi),%r8
mov    %rsi,-0x20(%rbp)
mov    (%rdx),%r10
mov    %rcx,-0x18(%rbp)
mov    %ecx,%esi
mov    (%r10,%rsi,8),%r10
mov    0x8(%rdx),%rcx
mov    (%rcx,%rsi,8),%r12
mov    0x10(%rdx),%rcx
mov    (%rcx,%rsi,8),%rcx
mov    %rcx,-0x8(%rbp)
mov    0x18(%rdx),%rcx
mov    (%rcx,%rsi,8),%r15
jmp    727c <cmyk_ycck_convert+0xfc>
data16 nopw %cs:0x0(%rax,%rax,1)
xchg   %ax,%ax

0000000000007300 <grayscale_convert>:
push   %rbp
mov    %rsp,%rbp
sub    $0x20,%rsp
mov    %r13,-0x8(%rbp)
mov    %r14,-0x10(%rbp)
mov    %r15,-0x18(%rbp)
mov    0x30(%rdi),%r11d
movslq 0x38(%rdi),%r9
xor    %r10d,%r10d
jmp    733f <grayscale_convert+0x3f>
movzbl (%rax),%r15d
mov    %edi,%r14d
mov    %r15b,0x0(%r13,%r14,1)
add    %r9,%rax
add    $0x1,%edi
cmp    %r11d,%edi
jb     7321 <grayscale_convert+0x21>
add    $0x8,%rsi
add    $0x1,%ecx
add    $0xffffffff,%r8d
test   %r8d,%r8d
jns    7356 <grayscale_convert+0x56>
mov    -0x18(%rbp),%r15
mov    -0x10(%rbp),%r14
mov    -0x8(%rbp),%r13
leaveq 
retq   
mov    (%rsi),%rax
mov    (%rdx),%r13
mov    %ecx,%edi
mov    0x0(%r13,%rdi,8),%r13
mov    %r10,%rdi
jmp    7333 <grayscale_convert+0x33>
nopl   0x0(%rax,%rax,1)

0000000000007370 <null_convert>:
push   %rbp
mov    %rsp,%rbp
sub    $0x30,%rsp
mov    %r12,-0x18(%rbp)
mov    %r13,-0x20(%rbp)
mov    %r14,-0x28(%rbp)
mov    %r15,-0x30(%rbp)
mov    0x30(%rdi),%r14d
xor    %eax,%eax
movslq 0x4c(%rdi),%r9
cmp    $0x3,%r9d
je     73d9 <null_convert+0x69>
cmp    $0x4,%r9d
je     73f4 <null_convert+0x84>
mov    %rbx,-0x10(%rbp)
jmpq   742d <F_3_624+0x31>
movzbl (%rdi),%r10d
mov    %r9d,%r12d
mov    %r10b,0x0(%r13,%r12,1)
movzbl 0x1(%rdi),%r10d
mov    %r10b,(%r11,%r12,1)
movzbl 0x2(%rdi),%r10d
mov    %r10b,(%r15,%r12,1)
add    $0x3,%rdi
add    $0x1,%r9d
cmp    %r14d,%r9d
jb     73a7 <null_convert+0x37>
add    $0x8,%rsi
add    $0x1,%ecx
add    $0xffffffff,%r8d
test   %r8d,%r8d
jns    7450 <F_3_624+0x54>
mov    -0x30(%rbp),%r15
mov    -0x28(%rbp),%r14
mov    -0x20(%rbp),%r13
mov    -0x18(%rbp),%r12
leaveq 
retq   
mov    %rbx,-0x10(%rbp)
jmpq   74af <F_3_624+0xb3>
movzbl (%rcx,%r13,1),%r12d
mov    %eax,%r10d
mov    %r12b,(%r11,%r10,1)
add    %r9,%rcx
add    $0x1,%eax
cmp    %eax,%r14d
ja     73fd <F_3_624+0x1>
add    $0x1,%edi
xor    %eax,%eax
cmp    %edi,%r9d
jg     74ce <F_3_624+0xd2>
add    $0x8,%rsi
mov    -0x8(%rbp),%rcx
add    $0x1,%ecx
add    $0xffffffff,%r8d
test   %r8d,%r8d
jns    74e1 <F_3_624+0xe5>
mov    -0x30(%rbp),%r15
mov    -0x28(%rbp),%r14
mov    -0x20(%rbp),%r13
mov    -0x18(%rbp),%r12
mov    -0x10(%rbp),%rbx
leaveq 
retq   
mov    (%rsi),%rdi
mov    (%rdx),%r9
mov    %ecx,%r10d
mov    (%r9,%r10,8),%r13
mov    0x8(%rdx),%r9
mov    (%r9,%r10,8),%r11
mov    0x10(%rdx),%r9
mov    (%r9,%r10,8),%r15
mov    %rax,%r9
jmpq   73cd <null_convert+0x5d>
movzbl (%rdi),%r9d
mov    %ebx,%r15d
mov    %r9b,(%r12,%r15,1)
movzbl 0x1(%rdi),%r9d
mov    %r9b,0x0(%r13,%r15,1)
movzbl 0x2(%rdi),%r9d
mov    %r9b,(%r10,%r15,1)
movzbl 0x3(%rdi),%r9d
mov    %r9b,(%r11,%r15,1)
add    $0x4,%rdi
add    $0x1,%ebx
cmp    %ebx,%r14d
ja     7475 <F_3_624+0x79>
add    $0x8,%rsi
add    $0x1,%ecx
add    $0xffffffff,%r8d
test   %r8d,%r8d
jns    74ef <F_3_624+0xf3>
mov    -0x30(%rbp),%r15
mov    -0x28(%rbp),%r14
mov    -0x20(%rbp),%r13
mov    -0x18(%rbp),%r12
mov    -0x10(%rbp),%rbx
leaveq 
retq   
mov    (%rsi),%rcx
movslq %edi,%r13
mov    (%rdx,%r13,8),%r10
mov    (%r10,%rbx,8),%r11
jmpq   740f <F_3_624+0x13>
mov    %ecx,%ebx
mov    %rcx,-0x8(%rbp)
mov    %rax,%rdi
jmpq   7419 <F_3_624+0x1d>
mov    (%rsi),%rdi
mov    (%rdx),%r9
mov    %ecx,%ebx
mov    (%r9,%rbx,8),%r12
mov    0x8(%rdx),%r9
mov    (%r9,%rbx,8),%r13
mov    0x10(%rdx),%r9
mov    (%r9,%rbx,8),%r10
mov    0x18(%rdx),%r9
mov    (%r9,%rbx,8),%r11
mov    %rax,%rbx
jmp    74a3 <F_3_624+0xa7>
nopl   0x0(%rax,%rax,1)

0000000000007520 <null_method>:
push   %rbp
mov    %rsp,%rbp
leaveq 
retq   
nopw   %cs:0x0(%rax,%rax,1)

0000000000007530 <jinit_forward_dct>:
push   %rbp
mov    %rsp,%rbp
sub    $0x20,%rsp
mov    %r14,-0x10(%rbp)
mov    %r15,-0x18(%rbp)
mov    %r13,-0x8(%rbp)
mov    $0x1,%r13d
mov    0x8(%rdi),%rax
mov    (%rax),%rax
mov    $0x90,%edx
mov    %rdi,%r15
mov    %r13,%rsi
callq  *%rax
mov    %rax,0x1e8(%r15)
lea    0x3b4(%rip),%rcx        # 7920 <start_pass_fdctmgr>
mov    %rcx,(%rax)
lea    0x7ca(%rip),%rdx        # 7d40 <forward_DCT>
mov    0x114(%r15),%ecx
test   %ecx,%ecx
je     75a5 <jinit_forward_dct+0x75>
cmp    $0x1,%ecx
je     75c2 <jinit_forward_dct+0x92>
cmp    $0x2,%ecx
je     75df <jinit_forward_dct+0xaf>
mov    (%r15),%rcx
movl   $0x30,0x28(%rcx)
mov    (%r15),%rcx
mov    (%rcx),%rcx
mov    %rax,%r14
mov    %r15,%rdi
callq  *%rcx
jmp    760e <jinit_forward_dct+0xde>
mov    %rdx,0x8(%rax)
mov    %rax,%r14
callq  3db50 <jsimd_can_fdct_islow>
test   %eax,%eax
jne    7603 <jinit_forward_dct+0xd3>
mov    0x6699c(%rip),%rax        # 6df58 <jpeg_fdct_islow@@LIBJPEG_6.2+0x40438>
mov    %rax,0x10(%r14)
jmp    760e <jinit_forward_dct+0xde>
mov    %rdx,0x8(%rax)
mov    %rax,%r14
callq  3db90 <jsimd_can_fdct_ifast>
test   %eax,%eax
jne    763d <jinit_forward_dct+0x10d>
mov    0x669a7(%rip),%rax        # 6df80 <jpeg_fdct_ifast@@LIBJPEG_6.2+0x407a0>
mov    %rax,0x10(%r14)
jmp    760e <jinit_forward_dct+0xde>
lea    0x91a(%rip),%rcx        # 7f00 <forward_DCT_float>
mov    %rcx,0x8(%rax)
mov    %rax,%r14
callq  3dbd0 <jsimd_can_fdct_float>
test   %eax,%eax
jne    764a <jinit_forward_dct+0x11a>
mov    0x669bb(%rip),%rax        # 6dfb8 <jpeg_fdct_float@@LIBJPEG_6.2+0x40ab8>
mov    %rax,0x50(%r14)
jmp    760e <jinit_forward_dct+0xde>
lea    0x36606(%rip),%rax        # 3dc10 <jsimd_fdct_islow>
mov    %rax,0x10(%r14)
mov    0x114(%r15),%eax
test   %eax,%eax
je     7657 <jinit_forward_dct+0x127>
cmp    $0x1,%eax
je     7657 <jinit_forward_dct+0x127>
cmp    $0x2,%eax
je     766d <jinit_forward_dct+0x13d>
mov    (%r15),%rax
movl   $0x30,0x28(%rax)
mov    (%r15),%rax
mov    (%rax),%rax
mov    %r15,%rdi
callq  *%rax
mov    %r13,%rsi
jmp    7691 <jinit_forward_dct+0x161>
lea    0x365dc(%rip),%rax        # 3dc20 <jsimd_fdct_ifast>
mov    %rax,0x10(%r14)
jmp    760e <jinit_forward_dct+0xde>
lea    0x365df(%rip),%rax        # 3dc30 <jsimd_fdct_float>
mov    %rax,0x50(%r14)
jmp    760e <jinit_forward_dct+0xde>
callq  3dad0 <jsimd_can_convsamp>
test   %eax,%eax
jne    76b7 <jinit_forward_dct+0x187>
lea    0x649(%rip),%rax        # 7cb0 <convsamp>
mov    %rax,0x18(%r14)
jmp    76c2 <jinit_forward_dct+0x192>
callq  3db00 <jsimd_can_convsamp_float>
test   %eax,%eax
jne    76db <jinit_forward_dct+0x1ab>
lea    0x783(%rip),%rax        # 7e00 <convsamp_float>
mov    %rax,0x58(%r14)
jmp    76e6 <jinit_forward_dct+0x1b6>
lea    0x36616(%rip),%rax        # 3dca0 <jsimd_quantize>
mov    %rax,0x20(%r14)
mov    %r13,%rsi
xor    %r13d,%r13d
mov    0x114(%r15),%eax
cmp    $0x2,%eax
je     76ff <jinit_forward_dct+0x1cf>
mov    0x8(%r15),%rax
mov    (%rax),%rax
mov    %r15,%rdi
mov    $0x80,%edx
callq  *%rax
mov    %rax,0x48(%r14)
jmp    7732 <jinit_forward_dct+0x202>
lea    0x36472(%rip),%rax        # 3db30 <jsimd_convsamp>
mov    %rax,0x18(%r14)
callq  3dc40 <jsimd_can_quantize>
test   %eax,%eax
jne    7683 <jinit_forward_dct+0x153>
lea    0x8e(%rip),%rax        # 7760 <quantize>
mov    %rax,0x20(%r14)
mov    %r13,%rsi
jmp    7691 <jinit_forward_dct+0x161>
lea    0x3645e(%rip),%rax        # 3db40 <jsimd_convsamp_float>
mov    %rax,0x58(%r14)
callq  3dc70 <jsimd_can_quantize_float>
test   %eax,%eax
jne    7746 <jinit_forward_dct+0x216>
lea    0x7ca(%rip),%rax        # 7ec0 <quantize_float>
mov    %rax,0x60(%r14)
mov    %r13,%rsi
jmp    7691 <jinit_forward_dct+0x161>
mov    0x8(%r15),%rax
mov    (%rax),%rax
mov    %r15,%rdi
mov    $0x100,%edx
callq  *%rax
mov    %rax,0x88(%r14)
jmp    7732 <jinit_forward_dct+0x202>
movslq %r13d,%rax
movq   $0x0,0x28(%r14,%rax,8)
movq   $0x0,0x68(%r14,%rax,8)
add    $0x1,%r13d
cmp    $0x3,%r13d
jle    7719 <jinit_forward_dct+0x1e9>
mov    -0x8(%rbp),%r13
mov    -0x18(%rbp),%r15
mov    -0x10(%rbp),%r14
leaveq 
retq   
lea    0x36563(%rip),%rax        # 3dcb0 <jsimd_quantize_float>
mov    %rax,0x60(%r14)
mov    %r13,%rsi
jmpq   7691 <jinit_forward_dct+0x161>
nopl   0x0(%rax)

0000000000007760 <quantize>:
push   %rbp
mov    %rsp,%rbp
xor    %r8d,%r8d
jmp    7786 <quantize+0x26>
neg    %eax
movswq %ax,%rax
add    %ecx,%eax
imul   %r10d,%eax
lea    0x10(%r11),%ecx
shr    %cl,%eax
neg    %eax
mov    %ax,(%rdi,%r9,2)
add    $0x1,%r8d
cmp    $0x3f,%r8d
jle    778e <quantize+0x2e>
leaveq 
retq   
movslq %r8d,%r9
movzwl (%rsi,%r9,2),%r10d
lea    0x40(%r8),%eax
movslq %eax,%rax
movzwl (%rsi,%rax,2),%ecx
lea    0xc0(%r8),%eax
movslq %eax,%rax
movswq (%rsi,%rax,2),%r11
movswq (%rdx,%r9,2),%rax
test   %ax,%ax
js     7769 <quantize+0x9>
add    %ecx,%eax
imul   %r10d,%eax
lea    0x10(%r11),%ecx
shr    %cl,%eax
jmp    777d <quantize+0x1d>
nopl   0x0(%rax,%rax,1)

00000000000077d0 <flss>:
push   %rbp
mov    %rsp,%rbp
test   %di,%di
jne    77dd <flss+0xd>
xor    %eax,%eax
leaveq 
retq   
movzwl %di,%eax
and    $0xff00,%eax
test   %eax,%eax
jle    77f5 <flss+0x25>
mov    $0xc,%ecx
mov    $0x10,%eax
jmp    7802 <flss+0x32>
shl    $0x8,%edi
mov    $0x4,%ecx
mov    $0x8,%eax
movzwl %di,%edx
and    $0xf000,%edx
test   %edx,%edx
jg     7815 <flss+0x45>
shl    $0x4,%edi
mov    %rcx,%rax
movzwl %di,%ecx
and    $0xc000,%ecx
test   %ecx,%ecx
jg     7828 <flss+0x58>
shl    $0x2,%edi
add    $0xfffffffe,%eax
movzwl %di,%ecx
and    $0x8000,%ecx
test   %ecx,%ecx
jle    7837 <flss+0x67>
leaveq 
retq   
add    $0xffffffff,%eax
leaveq 
retq   
nopl   0x0(%rax)

0000000000007840 <compute_reciprocal>:
push   %rbp
mov    %rsp,%rbp
sub    $0x20,%rsp
xor    %eax,%eax
cmp    $0x1,%di
je     789c <compute_reciprocal+0x5c>
movzwl %di,%ecx
mov    %rcx,%rax
shr    %eax
mov    %r13,-0x8(%rbp)
mov    %r14,-0x10(%rbp)
mov    %r15,-0x18(%rbp)
mov    %rax,%r13
mov    %rsi,%r14
mov    %rcx,%r15
callq  77d0 <flss>
add    $0xffffffff,%eax
movslq %eax,%rax
lea    0x10(%rax),%rcx
mov    $0x1,%esi
mov    %rsi,%rax
shl    %cl,%eax
xor    %edx,%edx
div    %r15d
test   %edx,%edx
je     78be <compute_reciprocal+0x7e>
shr    %r15d
cmp    %r15d,%edx
jbe    7904 <compute_reciprocal+0xc4>
add    $0x1,%eax
jmp    78c3 <compute_reciprocal+0x83>
movw   $0x1,(%rsi)
movw   $0x0,0x80(%rsi)
movw   $0x1,0x100(%rsi)
movw   $0xfff0,0x180(%rsi)
leaveq 
retq   
shr    %eax
add    $0xffffffff,%ecx
mov    %ax,(%r14)
mov    %r13w,0x80(%r14)
mov    %rcx,%rdx
mov    %rdx,%rcx
neg    %ecx
mov    %rsi,%rax
shl    %cl,%eax
mov    %ax,0x100(%r14)
lea    -0x10(%rdx),%eax
mov    %ax,0x180(%r14)
cmp    $0x10,%edx
jg     790a <compute_reciprocal+0xca>
xor    %eax,%eax
mov    -0x18(%rbp),%r15
mov    -0x10(%rbp),%r14
mov    -0x8(%rbp),%r13
leaveq 
retq   
add    $0x1,%r13d
jmp    78c3 <compute_reciprocal+0x83>
mov    %rsi,%rax
mov    -0x18(%rbp),%r15
mov    -0x10(%rbp),%r14
mov    -0x8(%rbp),%r13
leaveq 
retq   
nopl   0x0(%rax,%rax,1)

0000000000007920 <start_pass_fdctmgr>:
push   %rbp
mov    %rsp,%rbp
sub    $0x50,%rsp
mov    %r15,-0x28(%rbp)
mov    %r14,-0x20(%rbp)
mov    %rdi,-0x40(%rbp)
mov    %rbx,-0x8(%rbp)
mov    %r12,-0x10(%rbp)
mov    %r13,-0x18(%rbp)
mov    0x1e8(%rdi),%rbx
movsd  0x41951(%rip),%xmm1        # 492a0 <aanscalefactor.7+0x40>
movsd  0x41951(%rip),%xmm2        # 492a8 <aanscalefactor.7+0x48>
mov    0x58(%rdi),%r8
add    $0x10,%r8
lea    0x3633a(%rip),%r13        # 3dca0 <jsimd_quantize>
mov    %r13,-0x48(%rbp)
mov    %rdi,%r15
mov    $0x1,%esi
mov    $0x200,%edx
lea    0x41862(%rip),%rax        # 491e0 <aanscales.6>
mov    $0x100,%r9d
xor    %r12d,%r12d
mov    %r12,%r14
jmp    79ec <start_pass_fdctmgr+0xcc>
movslq %r12d,%rax
movzwl (%r14,%rax,2),%edi
shl    $0x3,%edi
lea    (%r15,%rax,2),%rsi
callq  7840 <compute_reciprocal>
test   %eax,%eax
je     7a13 <start_pass_fdctmgr+0xf3>
add    $0x1,%r12d
cmp    $0x3f,%r12d
jle    798c <start_pass_fdctmgr+0x6c>
mov    -0x30(%rbp),%r10
mov    -0x40(%rbp),%r15
mov    -0x38(%rbp),%r8
lea    0x4181f(%rip),%rax        # 491e0 <aanscales.6>
xor    %r12d,%r12d
movsd  0x418d4(%rip),%xmm1        # 492a0 <aanscalefactor.7+0x40>
movsd  0x418d4(%rip),%xmm2        # 492a8 <aanscalefactor.7+0x48>
lea    0x1(%r10),%r14d
add    $0x60,%r8
mov    $0x100,%r9d
mov    $0x200,%edx
mov    $0x1,%esi
mov    %r8,-0x38(%rbp)
mov    %r14,-0x30(%rbp)
movslq 0x4c(%r15),%rcx
cmp    %r14d,%ecx
jg     7a2c <start_pass_fdctmgr+0x10c>
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
mov    -0x20(%rbp),%r14
mov    -0x28(%rbp),%r15
leaveq 
retq   
mov    0x20(%rbx),%rax
cmp    %r13,%rax
jne    79a4 <start_pass_fdctmgr+0x84>
lea    -0x2c3(%rip),%rax        # 7760 <quantize>
mov    %rax,0x20(%rbx)
jmpq   79a4 <start_pass_fdctmgr+0x84>
movslq (%r8),%rcx
test   %ecx,%ecx
jns    7af1 <start_pass_fdctmgr+0x1d1>
mov    (%r15),%rax
movl   $0x34,0x28(%rax)
mov    (%r15),%rax
mov    %ecx,0x2c(%rax)
mov    (%r15),%rax
mov    (%rax),%rax
mov    %rcx,%r12
mov    %r8,%r13
mov    %r15,%rdi
callq  *%rax
mov    %r12,%rcx
mov    %r13,%r8
mov    %r14,%r10
mov    $0x100,%r9d
lea    0x41772(%rip),%rax        # 491e0 <aanscales.6>
mov    $0x200,%edx
mov    $0x1,%esi
xor    %r12d,%r12d
mov    -0x48(%rbp),%r13
movsd  0x41819(%rip),%xmm1        # 492a0 <aanscalefactor.7+0x40>
movsd  0x41819(%rip),%xmm2        # 492a8 <aanscalefactor.7+0x48>
mov    0x60(%r15,%rcx,8),%r14
mov    0x114(%r15),%edi
test   %edi,%edi
je     7b0d <start_pass_fdctmgr+0x1ed>
cmp    $0x1,%edi
je     7b38 <start_pass_fdctmgr+0x218>
cmp    $0x2,%edi
je     7b6a <start_pass_fdctmgr+0x24a>
mov    (%r15),%rax
movl   $0x30,0x28(%rax)
mov    (%r15),%rax
mov    (%rax),%rax
mov    %r8,%r12
mov    %r10,%r14
mov    %r15,%rdi
callq  *%rax
mov    %r12,%r8
mov    %r14,%r10
lea    0x41707(%rip),%rax        # 491e0 <aanscales.6>
xor    %r12d,%r12d
movsd  0x417bc(%rip),%xmm1        # 492a0 <aanscalefactor.7+0x40>
movsd  0x417bc(%rip),%xmm2        # 492a8 <aanscalefactor.7+0x48>
jmpq   79d4 <start_pass_fdctmgr+0xb4>
cmp    $0x3,%ecx
jg     7a37 <start_pass_fdctmgr+0x117>
mov    0x60(%r15,%rcx,8),%rdi
test   %rdi,%rdi
je     7a37 <start_pass_fdctmgr+0x117>
mov    %r14,%r10
jmp    7a8f <start_pass_fdctmgr+0x16f>
mov    0x28(%rbx,%rcx,8),%rax
test   %rax,%rax
jne    7b2e <start_pass_fdctmgr+0x20e>
mov    0x8(%r15),%rax
mov    (%rax),%rax
mov    %r15,%rdi
mov    %rcx,%r15
callq  *%rax
mov    %rax,0x28(%rbx,%r15,8)
mov    %r15,%rcx
mov    0x28(%rbx,%rcx,8),%r15
jmpq   79a8 <start_pass_fdctmgr+0x88>
mov    0x28(%rbx,%rcx,8),%rdi
test   %rdi,%rdi
jne    7b60 <start_pass_fdctmgr+0x240>
mov    0x8(%r15),%rax
mov    (%rax),%rax
mov    %r15,%rdi
mov    %rcx,%r15
callq  *%rax
mov    %rax,0x28(%rbx,%r15,8)
mov    %r15,%rcx
lea    0x41680(%rip),%rax        # 491e0 <aanscales.6>
mov    0x28(%rbx,%rcx,8),%r15
jmpq   7bfb <start_pass_fdctmgr+0x2db>
mov    0x68(%rbx,%rcx,8),%rax
test   %rax,%rax
jne    7bac <start_pass_fdctmgr+0x28c>
mov    0x8(%r15),%rax
mov    (%rax),%rax
mov    %r9,%rdx
mov    %r15,%rdi
mov    %r10,%r15
mov    %rcx,%r13
callq  *%rax
mov    %rax,0x68(%rbx,%r13,8)
mov    %r13,%rcx
mov    %r15,%r10
mov    -0x40(%rbp),%r15
mov    -0x38(%rbp),%r8
movsd  0x416fc(%rip),%xmm1        # 492a0 <aanscalefactor.7+0x40>
movsd  0x416fc(%rip),%xmm2        # 492a8 <aanscalefactor.7+0x48>
mov    0x68(%rbx,%rcx,8),%rsi
lea    0x416a8(%rip),%r13        # 49260 <aanscalefactor.7>
mov    %r12,%rax
mov    %rax,%rdx
jmpq   7c6a <start_pass_fdctmgr+0x34a>
movslq %r12d,%rdx
movswq (%rax,%rdx,2),%rax
movzwl (%r14,%rdx,2),%ecx
imul   %rcx,%rax
lea    0x400(%rax),%rdi
sar    $0xb,%rdi
lea    (%r15,%rdx,2),%rsi
callq  7840 <compute_reciprocal>
test   %eax,%eax
je     7c7f <start_pass_fdctmgr+0x35f>
add    $0x1,%r12d
lea    0x415e5(%rip),%rax        # 491e0 <aanscales.6>
cmp    $0x3f,%r12d
jle    7bc3 <start_pass_fdctmgr+0x2a3>
mov    -0x30(%rbp),%r10
mov    -0x40(%rbp),%r15
mov    -0x38(%rbp),%r8
xor    %r12d,%r12d
movsd  0x41688(%rip),%xmm1        # 492a0 <aanscalefactor.7+0x40>
movsd  0x41688(%rip),%xmm2        # 492a8 <aanscalefactor.7+0x48>
jmpq   79d4 <start_pass_fdctmgr+0xb4>
movslq %eax,%r11
movzwl (%r14,%r11,2),%edi
movzwl %di,%edi
cvtsi2sd %rdi,%xmm0
mulsd  0x0(%r13,%r9,8),%xmm0
movslq %ecx,%rdi
mulsd  0x0(%r13,%rdi,8),%xmm0
mulsd  %xmm2,%xmm0
movapd %xmm1,%xmm3
divsd  %xmm0,%xmm3
cvtsd2ss %xmm3,%xmm0
movss  %xmm0,(%rsi,%r11,4)
add    $0x1,%eax
add    $0x1,%ecx
cmp    $0x7,%ecx
jle    7c25 <start_pass_fdctmgr+0x305>
add    $0x1,%edx
cmp    $0x7,%edx
jle    7c9c <start_pass_fdctmgr+0x37c>
lea    0x4156a(%rip),%rax        # 491e0 <aanscales.6>
mov    -0x48(%rbp),%r13
jmpq   79d4 <start_pass_fdctmgr+0xb4>
mov    0x20(%rbx),%rax
cmp    %r13,%rax
jne    7bf0 <start_pass_fdctmgr+0x2d0>
lea    -0x533(%rip),%rax        # 7760 <quantize>
mov    %rax,0x20(%rbx)
jmpq   7bf0 <start_pass_fdctmgr+0x2d0>
movslq %edx,%r9
mov    %r12,%rcx
jmp    7c62 <start_pass_fdctmgr+0x342>
data16 nopw %cs:0x0(%rax,%rax,1)
nop

0000000000007cb0 <convsamp>:
push   %rbp
mov    %rsp,%rbp
mov    %esi,%r8d
xor    %eax,%eax
jmp    7d2f <convsamp+0x7f>
movslq %eax,%rcx
mov    (%rdi,%rcx,8),%rsi
movzbl (%r8,%rsi,1),%ecx
add    $0xffffff80,%ecx
mov    %cx,(%rdx)
movzbl 0x1(%r8,%rsi,1),%ecx
add    $0xffffff80,%ecx
mov    %cx,0x2(%rdx)
movzbl 0x2(%r8,%rsi,1),%ecx
add    $0xffffff80,%ecx
mov    %cx,0x4(%rdx)
movzbl 0x3(%r8,%rsi,1),%ecx
add    $0xffffff80,%ecx
mov    %cx,0x6(%rdx)
movzbl 0x4(%r8,%rsi,1),%ecx
add    $0xffffff80,%ecx
mov    %cx,0x8(%rdx)
movzbl 0x5(%r8,%rsi,1),%ecx
add    $0xffffff80,%ecx
mov    %cx,0xa(%rdx)
movzbl 0x6(%r8,%rsi,1),%ecx
add    $0xffffff80,%ecx
mov    %cx,0xc(%rdx)
movzbl 0x7(%r8,%rsi,1),%ecx
add    $0xffffff80,%ecx
mov    %cx,0xe(%rdx)
add    $0x1,%eax
add    $0x10,%rdx
cmp    $0x7,%eax
jle    7cbb <convsamp+0xb>
leaveq 
retq   
nopw   %cs:0x0(%rax,%rax,1)

0000000000007d40 <forward_DCT>:
push   %rbp
mov    %rsp,%rbp
sub    $0x50,%rsp
mov    %r15,-0x48(%rbp)
mov    %rbx,-0x28(%rbp)
mov    %r12,-0x30(%rbp)
mov    %r13,-0x38(%rbp)
mov    %r14,-0x40(%rbp)
mov    0x1e8(%rdi),%rdi
movslq 0x10(%rsi),%rax
mov    0x28(%rdi,%rax,8),%r15
mov    0x10(%rdi),%r12
mov    0x18(%rdi),%rax
mov    %rax,-0x10(%rbp)
mov    0x20(%rdi),%rsi
mov    %rsi,-0x8(%rbp)
mov    0x48(%rdi),%r13
mov    0x10(%rbp),%esi
mov    %rsi,-0x50(%rbp)
mov    %r8d,%edi
lea    (%rdx,%rdi,8),%rdi
mov    %rdi,-0x18(%rbp)
mov    %rcx,%r14
xor    %ebx,%ebx
jmp    7ddc <forward_DCT+0x9c>
mov    %r9,%rsi
mov    %r13,%rdx
mov    %r9,-0x20(%rbp)
callq  *%rax
mov    %r13,%rdi
callq  *%r12
mov    %ebx,%eax
shl    $0x7,%rax
lea    (%r14,%rax,1),%rdi
mov    %r15,%rsi
mov    %r13,%rdx
mov    -0x8(%rbp),%rax
callq  *%rax
add    $0x1,%ebx
mov    -0x20(%rbp),%rax
lea    0x8(%rax),%r9d
mov    -0x10(%rbp),%rax
mov    -0x18(%rbp),%rdi
mov    -0x50(%rbp),%rsi
cmp    %esi,%ebx
jb     7d9d <forward_DCT+0x5d>
mov    -0x40(%rbp),%r14
mov    -0x38(%rbp),%r13
mov    -0x30(%rbp),%r12
mov    -0x28(%rbp),%rbx
mov    -0x48(%rbp),%r15
leaveq 
retq   
nopw   %cs:0x0(%rax,%rax,1)

0000000000007e00 <convsamp_float>:
push   %rbp
mov    %rsp,%rbp
mov    %esi,%r8d
xor    %eax,%eax
jmpq   7eaa <convsamp_float+0xaa>
movslq %eax,%rcx
mov    (%rdi,%rcx,8),%rsi
movzbl (%r8,%rsi,1),%ecx
add    $0xffffff80,%ecx
cvtsi2ss %ecx,%xmm0
movss  %xmm0,(%rdx)
movzbl 0x1(%r8,%rsi,1),%ecx
add    $0xffffff80,%ecx
cvtsi2ss %ecx,%xmm0
movss  %xmm0,0x4(%rdx)
movzbl 0x2(%r8,%rsi,1),%ecx
add    $0xffffff80,%ecx
cvtsi2ss %ecx,%xmm0
movss  %xmm0,0x8(%rdx)
movzbl 0x3(%r8,%rsi,1),%ecx
add    $0xffffff80,%ecx
cvtsi2ss %ecx,%xmm0
movss  %xmm0,0xc(%rdx)
movzbl 0x4(%r8,%rsi,1),%ecx
add    $0xffffff80,%ecx
cvtsi2ss %ecx,%xmm0
movss  %xmm0,0x10(%rdx)
movzbl 0x5(%r8,%rsi,1),%ecx
add    $0xffffff80,%ecx
cvtsi2ss %ecx,%xmm0
movss  %xmm0,0x14(%rdx)
movzbl 0x6(%r8,%rsi,1),%ecx
add    $0xffffff80,%ecx
cvtsi2ss %ecx,%xmm0
movss  %xmm0,0x18(%rdx)
movzbl 0x7(%r8,%rsi,1),%ecx
add    $0xffffff80,%ecx
cvtsi2ss %ecx,%xmm0
movss  %xmm0,0x1c(%rdx)
add    $0x1,%eax
add    $0x20,%rdx
cmp    $0x7,%eax
jle    7e0e <convsamp_float+0xe>
leaveq 
retq   
data16 nopw %cs:0x0(%rax,%rax,1)

0000000000007ec0 <quantize_float>:
push   %rbp
mov    %rsp,%rbp
movss  0x413e4(%rip),%xmm1        # 492b0 <aanscalefactor.7+0x50>
xor    %eax,%eax
jmp    7ef5 <quantize_float+0x35>
movslq %eax,%r8
movss  (%rsi,%r8,4),%xmm0
mulss  (%rdx,%r8,4),%xmm0
addss  %xmm1,%xmm0
cvttss2si %xmm0,%ecx
add    $0xffffc000,%ecx
mov    %cx,(%rdi,%r8,2)
add    $0x1,%eax
cmp    $0x3f,%eax
jle    7ed0 <quantize_float+0x10>
leaveq 
retq   
nopl   0x0(%rax)

0000000000007f00 <forward_DCT_float>:
push   %rbp
mov    %rsp,%rbp
sub    $0x50,%rsp
mov    %r15,-0x48(%rbp)
mov    %rbx,-0x28(%rbp)
mov    %r12,-0x30(%rbp)
mov    %r13,-0x38(%rbp)
mov    %r14,-0x40(%rbp)
mov    0x1e8(%rdi),%rdi
movslq 0x10(%rsi),%rax
mov    0x68(%rdi,%rax,8),%r15
mov    0x50(%rdi),%r12
mov    0x58(%rdi),%rax
mov    %rax,-0x10(%rbp)
mov    0x60(%rdi),%rsi
mov    %rsi,-0x8(%rbp)
mov    0x88(%rdi),%r13
mov    0x10(%rbp),%esi
mov    %rsi,-0x50(%rbp)
mov    %r8d,%edi
lea    (%rdx,%rdi,8),%rdi
mov    %rdi,-0x18(%rbp)
mov    %rcx,%r14
xor    %ebx,%ebx
jmp    7f9f <forward_DCT_float+0x9f>
mov    %r9,%rsi
mov    %r13,%rdx
mov    %r9,-0x20(%rbp)
callq  *%rax
mov    %r13,%rdi
callq  *%r12
mov    %ebx,%eax
shl    $0x7,%rax
lea    (%r14,%rax,1),%rdi
mov    %r15,%rsi
mov    %r13,%rdx
mov    -0x8(%rbp),%rax
callq  *%rax
add    $0x1,%ebx
mov    -0x20(%rbp),%rax
lea    0x8(%rax),%r9d
mov    -0x10(%rbp),%rax
mov    -0x18(%rbp),%rdi
mov    -0x50(%rbp),%rsi
cmp    %esi,%ebx
jb     7f60 <forward_DCT_float+0x60>
mov    -0x40(%rbp),%r14
mov    -0x38(%rbp),%r13
mov    -0x30(%rbp),%r12
mov    -0x28(%rbp),%rbx
mov    -0x48(%rbp),%r15
leaveq 
retq   
nopl   0x0(%rax)

0000000000007fc0 <jinit_huff_encoder>:
push   %rbp
mov    %rsp,%rbp
sub    $0x10,%rsp
mov    %r15,-0x8(%rbp)
mov    0x8(%rdi),%rax
mov    (%rax),%rax
mov    $0x1,%esi
mov    $0xc8,%edx
mov    %rdi,%r15
callq  *%rax
mov    %rax,0x1f0(%r15)
lea    0xb70(%rip),%rcx        # 8b60 <start_pass_huff>
mov    %rcx,(%rax)
xor    %ecx,%ecx
jmp    8027 <jinit_huff_encoder+0x67>
movslq %ecx,%rdx
movq   $0x0,0x60(%rax,%rdx,8)
movq   $0x0,0x40(%rax,%rdx,8)
movq   $0x0,0xa0(%rax,%rdx,8)
movq   $0x0,0x80(%rax,%rdx,8)
add    $0x1,%ecx
cmp    $0x3,%ecx
jle    7ff7 <jinit_huff_encoder+0x37>
mov    -0x8(%rbp),%r15
leaveq 
retq   
data16 nopw %cs:0x0(%rax,%rax,1)
nopl   (%rax)

0000000000008040 <jpeg_make_c_derived_tbl>:
push   %rbp
mov    %rsp,%rbp
sub    $0x560,%rsp
mov    %r12,-0x10(%rbp)
mov    %r13,-0x18(%rbp)
mov    %r14,-0x20(%rbp)
mov    %r15,-0x28(%rbp)
mov    %rbx,-0x8(%rbp)
mov    %rsi,-0x38(%rbp)
mov    %rdi,-0x50(%rbp)
test   %edx,%edx
js     807e <jpeg_make_c_derived_tbl+0x3e>
cmp    $0x3,%edx
jg     807e <jpeg_make_c_derived_tbl+0x3e>
mov    %rcx,%rbx
mov    %rdx,%r12
mov    %rdi,%r13
mov    %rsi,%r14
jmp    80a2 <jpeg_make_c_derived_tbl+0x62>
mov    (%rdi),%rax
movl   $0x32,0x28(%rax)
mov    (%rdi),%rax
mov    %edx,0x2c(%rax)
mov    (%rdi),%rax
mov    (%rax),%rax
mov    %rcx,%rbx
mov    %rdx,%r12
mov    %rsi,%r14
mov    %rdi,%r13
callq  *%rax
test   %r14d,%r14d
jne    80b4 <jpeg_make_c_derived_tbl+0x74>
movslq %r12d,%rax
mov    0xa0(%r13,%rax,8),%r14
jmp    80bf <jpeg_make_c_derived_tbl+0x7f>
movslq %r12d,%rax
mov    0x80(%r13,%rax,8),%r14
test   %r14,%r14
jne    80e3 <jpeg_make_c_derived_tbl+0xa3>
mov    0x0(%r13),%rax
movl   $0x32,0x28(%rax)
mov    0x0(%r13),%rax
mov    %r12d,0x2c(%rax)
mov    0x0(%r13),%rax
mov    (%rax),%rax
mov    %r13,%rdi
callq  *%rax
mov    $0x1,%r15d
mov    (%rbx),%rax
test   %rax,%rax
jne    8108 <jpeg_make_c_derived_tbl+0xc8>
mov    0x8(%r13),%rax
mov    (%rax),%rax
mov    $0x500,%edx
mov    %r13,%rdi
mov    %r15,%rsi
callq  *%rax
mov    %rax,(%rbx)
mov    (%rbx),%rax
mov    %rax,-0x48(%rbp)
xor    %ebx,%ebx
jmp    812e <jpeg_make_c_derived_tbl+0xee>
movslq %ebx,%rax
mov    %r15b,-0x555(%rbp,%rax,1)
add    $0x1,%ebx
add    $0xffffffff,%r12d
test   %r12d,%r12d
jne    8113 <jpeg_make_c_derived_tbl+0xd3>
add    $0x1,%r15d
cmp    $0x10,%r15d
jle    815b <jpeg_make_c_derived_tbl+0x11b>
movslq %ebx,%rax
movb   $0x0,-0x555(%rbp,%rax,1)
movsbq -0x555(%rbp),%rcx
mov    %r14,-0x40(%rbp)
mov    %rbx,-0x30(%rbp)
xor    %ebx,%ebx
mov    $0x1,%eax
mov    %rbx,%r12
jmp    81d9 <jpeg_make_c_derived_tbl+0x199>
movslq %r15d,%rax
movzbl (%r14,%rax,1),%r12d
lea    (%rbx,%r12,1),%eax
cmp    $0x100,%eax
jle    8125 <jpeg_make_c_derived_tbl+0xe5>
mov    0x0(%r13),%rax
movl   $0x8,0x28(%rax)
mov    0x0(%r13),%rax
mov    (%rax),%rax
mov    %r13,%rdi
callq  *%rax
jmp    8125 <jpeg_make_c_derived_tbl+0xe5>
mov    %ebx,-0x454(%rbp,%rsi,4)
add    $0x1,%ebx
add    $0x1,%r12d
movslq %r12d,%rsi
movsbq -0x555(%rbp,%rsi,1),%rdx
cmp    %edx,%ecx
je     8187 <jpeg_make_c_derived_tbl+0x147>
mov    %rax,%rsi
shl    %cl,%rsi
mov    %ebx,%edx
cmp    %rdx,%rsi
jg     81d4 <jpeg_make_c_derived_tbl+0x194>
mov    0x0(%r13),%rax
movl   $0x8,0x28(%rax)
mov    0x0(%r13),%rax
mov    (%rax),%rax
mov    %rcx,%r14
mov    %r13,%rdi
callq  *%rax
mov    %r14,%rcx
mov    $0x1,%eax
add    $0x1,%ecx
add    %ebx,%ebx
movslq %r12d,%rdx
movsbq -0x555(%rbp,%rdx,1),%rdx
test   %dl,%dl
jne    8195 <jpeg_make_c_derived_tbl+0x155>
mov    -0x48(%rbp),%r12
lea    0x400(%r12),%rbx
mov    $0x100,%edx
mov    %rbx,%rdi
xor    %r14d,%r14d
mov    %r14,%rsi
callq  41e0 <memset@plt>
mov    -0x38(%rbp),%rax
test   %eax,%eax
jne    821f <jpeg_make_c_derived_tbl+0x1df>
mov    $0xff,%edx
mov    -0x30(%rbp),%rax
mov    -0x40(%rbp),%rcx
jmp    8293 <jpeg_make_c_derived_tbl+0x253>
mov    $0xf,%edx
mov    -0x30(%rbp),%rax
mov    -0x40(%rbp),%rcx
jmp    8293 <jpeg_make_c_derived_tbl+0x253>
movslq %r14d,%rsi
movzbl 0x11(%rcx,%rsi,1),%r15d
cmp    %edx,%r15d
jg     8246 <jpeg_make_c_derived_tbl+0x206>
movsbq (%rbx,%r15,1),%rdi
test   %dil,%dil
je     8277 <jpeg_make_c_derived_tbl+0x237>
mov    0x0(%r13),%rax
movl   $0x8,0x28(%rax)
mov    0x0(%r13),%rax
mov    (%rax),%rax
mov    %rdx,-0x48(%rbp)
mov    %r13,%rdi
mov    %rsi,%r13
callq  *%rax
mov    %r13,%rsi
mov    -0x50(%rbp),%r13
mov    -0x48(%rbp),%rdx
mov    -0x30(%rbp),%rax
mov    -0x40(%rbp),%rcx
mov    -0x454(%rbp,%rsi,4),%edi
mov    %edi,(%r12,%r15,4)
movsbq -0x555(%rbp,%rsi,1),%rsi
mov    %sil,(%rbx,%r15,1)
add    $0x1,%r14d
cmp    %eax,%r14d
jl     822e <jpeg_make_c_derived_tbl+0x1ee>
mov    -0x8(%rbp),%rbx
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
leaveq 
retq   
xchg   %ax,%ax

00000000000082b0 <jpeg_gen_optimal_table>:
push   %rbp
mov    %rsp,%rbp
sub    $0x860,%rsp
mov    %rbx,-0x8(%rbp)
mov    %r12,-0x10(%rbp)
mov    %r13,-0x18(%rbp)
mov    %r14,-0x20(%rbp)
mov    %r15,-0x28(%rbp)
mov    %rsi,%rbx
mov    %rdi,%r13
mov    %rdx,%r15
lea    -0x851(%rbp),%r12
xor    %r14d,%r14d
mov    $0x21,%edx
mov    %r12,%rdi
mov    %r14,%rsi
callq  41e0 <memset@plt>
lea    -0x830(%rbp),%rdi
mov    $0x404,%edx
mov    %r14,%rsi
callq  41e0 <memset@plt>
mov    %r14,%rax
jmp    831c <jpeg_gen_optimal_table+0x6c>
movslq %eax,%rcx
movl   $0xffffffff,-0x42c(%rbp,%rcx,4)
add    $0x1,%eax
cmp    $0x100,%eax
jle    830b <jpeg_gen_optimal_table+0x5b>
movq   $0x1,0x800(%r15)
mov    $0xffffffffffffffff,%rdi
mov    $0x3b9aca00,%edx
mov    %rdx,%rax
mov    %rdi,%r8
mov    %r14,%rcx
jmp    835f <jpeg_gen_optimal_table+0xaf>
movslq %ecx,%rsi
mov    (%r15,%rsi,8),%rsi
test   %rsi,%rsi
je     835c <jpeg_gen_optimal_table+0xac>
cmp    %rax,%rsi
jg     835c <jpeg_gen_optimal_table+0xac>
mov    %rsi,%rax
mov    %rcx,%r8
add    $0x1,%ecx
cmp    $0x100,%ecx
jle    8345 <jpeg_gen_optimal_table+0x95>
mov    %rdx,%rcx
mov    %rdi,%rax
mov    %r14,%r9
jmp    8392 <jpeg_gen_optimal_table+0xe2>
movslq %r9d,%rsi
mov    (%r15,%rsi,8),%rsi
test   %rsi,%rsi
je     838e <jpeg_gen_optimal_table+0xde>
cmp    %rcx,%rsi
jg     838e <jpeg_gen_optimal_table+0xde>
cmp    %r8d,%r9d
je     838e <jpeg_gen_optimal_table+0xde>
mov    %rsi,%rcx
mov    %r9,%rax
add    $0x1,%r9d
cmp    $0x100,%r9d
jle    8372 <jpeg_gen_optimal_table+0xc2>
test   %eax,%eax
js     8417 <jpeg_gen_optimal_table+0x167>
movslq %r8d,%r9
mov    (%r15,%r9,8),%rcx
movslq %eax,%rsi
add    (%r15,%rsi,8),%rcx
mov    %rcx,(%r15,%r9,8)
movq   $0x0,(%r15,%rsi,8)
movslq -0x830(%rbp,%r9,4),%rcx
add    $0x1,%ecx
mov    %ecx,-0x830(%rbp,%r9,4)
jmp    843d <jpeg_gen_optimal_table+0x18d>
movslq %r14d,%r15
movslq -0x830(%rbp,%r15,4),%rax
test   %eax,%eax
je     8413 <jpeg_gen_optimal_table+0x163>
cmp    $0x20,%eax
jle    83f9 <jpeg_gen_optimal_table+0x149>
mov    0x0(%r13),%rax
movl   $0x27,0x28(%rax)
mov    0x0(%r13),%rax
mov    (%rax),%rax
mov    %r13,%rdi
callq  *%rax
movslq -0x830(%rbp,%r15,4),%rcx
movzbl -0x851(%rbp,%rcx,1),%eax
add    $0x1,%eax
mov    %al,-0x851(%rbp,%rcx,1)
add    $0x1,%r14d
cmp    $0x100,%r14d
jle    83ce <jpeg_gen_optimal_table+0x11e>
mov    $0x20,%eax
jmpq   84e5 <jpeg_gen_optimal_table+0x235>
movslq -0x830(%rbp,%r8,4),%rcx
add    $0x1,%ecx
mov    %ecx,-0x830(%rbp,%r8,4)
movslq %r8d,%rcx
movslq -0x42c(%rbp,%rcx,4),%r8
test   %r8d,%r8d
jns    842a <jpeg_gen_optimal_table+0x17a>
mov    %eax,-0x42c(%rbp,%rcx,4)
movslq -0x830(%rbp,%rsi,4),%rcx
add    $0x1,%ecx
mov    %ecx,-0x830(%rbp,%rsi,4)
jmpq   850a <jpeg_gen_optimal_table+0x25a>
add    $0xffffffff,%eax
movslq %eax,%r8
movzbl -0x851(%rbp,%r8,1),%edx
test   %dl,%dl
je     846b <jpeg_gen_optimal_table+0x1bb>
movzbl -0x851(%rbp,%r9,1),%edx
add    $0xfe,%edx
mov    %dl,-0x851(%rbp,%r9,1)
movzbl -0x851(%rbp,%rsi,1),%edx
add    $0x1,%edx
mov    %dl,-0x851(%rbp,%rsi,1)
add    $0x1,%eax
movslq %eax,%rdx
movzbl -0x851(%rbp,%rdx,1),%eax
add    $0x2,%eax
mov    %al,-0x851(%rbp,%rdx,1)
movzbl -0x851(%rbp,%r8,1),%eax
add    $0xff,%eax
mov    %al,-0x851(%rbp,%r8,1)
movzbl -0x851(%rbp,%r9,1),%eax
test   %al,%al
jne    8527 <jpeg_gen_optimal_table+0x277>
mov    %rdi,%rax
cmp    $0x10,%eax
jle    8532 <jpeg_gen_optimal_table+0x282>
movslq %eax,%r9
lea    -0x1(%rax),%edi
movslq %edi,%rsi
lea    -0x2(%rax),%ecx
jmp    84d5 <jpeg_gen_optimal_table+0x225>
movslq -0x830(%rbp,%rax,4),%rcx
add    $0x1,%ecx
mov    %ecx,-0x830(%rbp,%rax,4)
movslq %eax,%rax
movslq -0x42c(%rbp,%rax,4),%rax
test   %eax,%eax
jns    84f8 <jpeg_gen_optimal_table+0x248>
mov    %rdx,%rax
mov    %rdi,%r8
mov    %r14,%rcx
jmpq   835f <jpeg_gen_optimal_table+0xaf>
mov    %rcx,%rax
jmpq   846e <jpeg_gen_optimal_table+0x1be>
add    $0xffffffff,%eax
movslq %eax,%rdx
movzbl -0x851(%rbp,%rdx,1),%ecx
test   %cl,%cl
je     852f <jpeg_gen_optimal_table+0x27f>
lea    0xff(%rcx),%eax
mov    %al,-0x851(%rbp,%rdx,1)
mov    %r12,%rsi
mov    $0x11,%edx
mov    %rbx,%rdi
callq  42c0 <memcpy@plt>
mov    $0x1,%edx
xor    %edi,%edi
mov    %rdi,%rax
jmp    8591 <jpeg_gen_optimal_table+0x2e1>
movslq %ecx,%rsi
movslq -0x830(%rbp,%rsi,4),%rsi
cmp    %edx,%esi
jne    8583 <jpeg_gen_optimal_table+0x2d3>
movslq %eax,%rsi
mov    %cl,0x11(%rbx,%rsi,1)
add    $0x1,%eax
add    $0x1,%ecx
cmp    $0xff,%ecx
jle    856a <jpeg_gen_optimal_table+0x2ba>
add    $0x1,%edx
cmp    $0x20,%edx
jle    85b6 <jpeg_gen_optimal_table+0x306>
movl   $0x0,0x114(%rbx)
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
leaveq 
retq   
mov    %rdi,%rcx
jmp    8586 <jpeg_gen_optimal_table+0x2d6>
nopl   0x0(%rax,%rax,1)

00000000000085c0 <encode_mcu_huff>:
push   %rbp
mov    %rsp,%rbp
sub    $0x70,%rsp
mov    0x28(%rdi),%rax
mov    (%rax),%rax
mov    0x1f0(%rdi),%r8
mov    %r8,-0x28(%rbp)
mov    %rax,-0x68(%rbp)
mov    0x28(%rdi),%rax
mov    0x8(%rax),%rax
mov    %rax,-0x60(%rbp)
mov    0x18(%r8),%rax
mov    %rax,-0x58(%rbp)
mov    0x20(%r8),%rax
mov    %rax,-0x50(%rbp)
mov    0x28(%r8),%rax
mov    %rax,-0x48(%rbp)
mov    0x30(%r8),%rax
mov    %rdi,-0x38(%rbp)
mov    %rax,-0x40(%rbp)
lea    -0x68(%rbp),%rax
xor    %ecx,%ecx
mov    0x118(%rdi),%edx
test   %edx,%edx
jne    8657 <encode_mcu_huff+0x97>
mov    %r12,%rdx
mov    %rcx,%r12
mov    %r13,%rcx
mov    %rsi,%r13
mov    %rbx,%rsi
mov    %rdi,%rbx
mov    %rax,%rdi
mov    %rsi,%rax
movslq 0xc0(%r8),%rsi
test   %esi,%esi
jne    867d <encode_mcu_huff+0xbd>
mov    %rax,-0x8(%rbp)
mov    %rdx,-0x10(%rbp)
mov    %rcx,-0x18(%rbp)
mov    %r14,-0x20(%rbp)
mov    %r15,-0x30(%rbp)
jmp    86b0 <encode_mcu_huff+0xf0>
mov    0x38(%r8),%edx
test   %edx,%edx
je     870d <encode_mcu_huff+0x14d>
mov    %r12,%rdx
mov    %rcx,%r12
mov    %r13,%rcx
mov    %rsi,%r13
mov    %rbx,%rsi
mov    %rdi,%rbx
mov    %rax,%rdi
mov    %rsi,%rax
jmp    8636 <encode_mcu_huff+0x76>
mov    %rax,-0x8(%rbp)
mov    %rdx,-0x10(%rbp)
mov    %rcx,-0x18(%rbp)
mov    %r14,-0x20(%rbp)
mov    %r15,-0x30(%rbp)
jmpq   8767 <encode_mcu_huff+0x1a7>
mov    0x0(%r13,%r14,8),%rax
movswq (%rax),%rax
mov    %eax,-0x4c(%rbp,%r15,4)
add    $0x1,%r12d
lea    -0x68(%rbp),%rdi
mov    -0x28(%rbp),%r8
cmp    0x170(%rbx),%r12d
jge    87c0 <encode_mcu_huff+0x200>
movslq %r12d,%r14
mov    0x0(%r13,%r14,8),%rsi
movslq 0x174(%rbx,%r14,4),%r15
movslq -0x4c(%rbp,%r15,4),%rdx
mov    0x148(%rbx,%r15,8),%r9
movslq 0x14(%r9),%rax
mov    0x40(%r8,%rax,8),%rcx
movslq 0x18(%r9),%rax
mov    0x60(%r8,%rax,8),%r8
callq  90a0 <encode_one_block>
test   %eax,%eax
jne    8696 <encode_mcu_huff+0xd6>
mov    -0x30(%rbp),%r15
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
xor    %eax,%eax
leaveq 
retq   
movslq 0x3c(%r8),%rcx
mov    %rdi,-0x30(%rbp)
mov    %rsi,-0x20(%rbp)
mov    %rcx,%rsi
mov    %rax,%rdi
callq  12380 <emit_restart>
test   %eax,%eax
je     881c <encode_mcu_huff+0x25c>
mov    %rbx,%rax
mov    %r13,%rcx
mov    %r12,%rdx
lea    -0x68(%rbp),%rdi
xor    %r12d,%r12d
mov    -0x20(%rbp),%r13
mov    -0x30(%rbp),%rbx
mov    -0x28(%rbp),%r8
jmpq   8636 <encode_mcu_huff+0x76>
mov    0x0(%r13,%r14,8),%rax
movswq (%rax),%rax
mov    %eax,-0x4c(%rbp,%r15,4)
add    $0x1,%r12d
lea    -0x68(%rbp),%rdi
mov    -0x28(%rbp),%r8
cmp    0x170(%rbx),%r12d
jge    87c0 <encode_mcu_huff+0x200>
movslq %r12d,%r14
mov    0x0(%r13,%r14,8),%rsi
movslq 0x174(%rbx,%r14,4),%r15
movslq -0x4c(%rbp,%r15,4),%rdx
mov    0x148(%rbx,%r15,8),%r9
movslq 0x14(%r9),%rax
mov    0x40(%r8,%rax,8),%rcx
movslq 0x18(%r9),%rax
mov    0x60(%r8,%rax,8),%r8
callq  8f80 <encode_one_block_simd>
test   %eax,%eax
jne    874d <encode_mcu_huff+0x18d>
mov    -0x30(%rbp),%r15
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
xor    %eax,%eax
leaveq 
retq   
mov    -0x68(%rbp),%rcx
mov    0x28(%rbx),%rax
mov    %rcx,(%rax)
mov    -0x60(%rbp),%rcx
mov    0x28(%rbx),%rax
mov    %rcx,0x8(%rax)
mov    -0x58(%rbp),%rax
mov    %rax,0x18(%r8)
mov    -0x50(%rbp),%rax
mov    %rax,0x20(%r8)
mov    -0x48(%rbp),%rax
mov    %rax,0x28(%r8)
mov    -0x40(%rbp),%rax
mov    %rax,0x30(%r8)
mov    $0x1,%eax
mov    0x118(%rbx),%edx
test   %edx,%edx
jne    8820 <encode_mcu_huff+0x260>
mov    -0x30(%rbp),%r15
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
leaveq 
retq   
xor    %eax,%eax
leaveq 
retq   
mov    0x38(%r8),%ecx
test   %ecx,%ecx
jne    883a <encode_mcu_huff+0x27a>
mov    %edx,0x38(%r8)
movslq 0x3c(%r8),%rcx
add    $0x1,%ecx
and    $0x7,%ecx
mov    %ecx,0x3c(%r8)
mov    0x38(%r8),%ecx
add    $0xffffffff,%ecx
mov    %ecx,0x38(%r8)
mov    -0x30(%rbp),%r15
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
leaveq 
retq   
nopl   0x0(%rax,%rax,1)

0000000000008860 <finish_pass_huff>:
push   %rbp
mov    %rsp,%rbp
sub    $0x50,%rsp
mov    %r14,-0x8(%rbp)
mov    %r15,-0x10(%rbp)
mov    0x28(%rdi),%rax
mov    (%rax),%rax
mov    0x1f0(%rdi),%r15
mov    %rax,-0x48(%rbp)
mov    0x28(%rdi),%rax
mov    0x8(%rax),%rax
mov    %rax,-0x40(%rbp)
mov    0x18(%r15),%rax
mov    %rax,-0x38(%rbp)
mov    0x20(%r15),%rax
mov    %rax,-0x30(%rbp)
mov    0x28(%r15),%rax
mov    %rax,-0x28(%rbp)
mov    0x30(%r15),%rax
mov    %rdi,-0x18(%rbp)
mov    %rax,-0x20(%rbp)
mov    %rdi,%r14
lea    -0x48(%rbp),%rdi
callq  8e10 <flush_bits>
test   %eax,%eax
jne    88d7 <finish_pass_huff+0x77>
mov    (%r14),%rax
movl   $0x18,0x28(%rax)
mov    (%r14),%rax
mov    (%rax),%rax
mov    %r14,%rdi
callq  *%rax
mov    -0x48(%rbp),%rcx
mov    0x28(%r14),%rax
mov    %rcx,(%rax)
mov    -0x40(%rbp),%rcx
mov    0x28(%r14),%rax
mov    %rcx,0x8(%rax)
mov    -0x38(%rbp),%rax
mov    %rax,0x18(%r15)
mov    -0x30(%rbp),%rax
mov    %rax,0x20(%r15)
mov    -0x28(%rbp),%rax
mov    %rax,0x28(%r15)
mov    -0x20(%rbp),%rax
mov    %rax,0x30(%r15)
mov    -0x10(%rbp),%r15
mov    -0x8(%rbp),%r14
leaveq 
retq   
nopl   0x0(%rax,%rax,1)

0000000000008920 <encode_mcu_gather>:
push   %rbp
mov    %rsp,%rbp
sub    $0x30,%rsp
mov    %rdi,-0x30(%rbp)
mov    0x1f0(%rdi),%rdx
xor    %ecx,%ecx
mov    0x118(%rdi),%eax
test   %eax,%eax
jne    895e <encode_mcu_gather+0x3e>
mov    %rbx,-0x8(%rbp)
mov    %r12,-0x10(%rbp)
mov    %r13,-0x18(%rbp)
mov    %r14,-0x20(%rbp)
mov    %r15,-0x28(%rbp)
mov    %rcx,%rbx
mov    %rdx,%r12
mov    %rsi,%r13
jmp    89c0 <encode_mcu_gather+0xa0>
mov    0x38(%rdx),%eax
test   %eax,%eax
jne    8a0a <encode_mcu_gather+0xea>
mov    %rcx,%rax
jmpq   89f5 <encode_mcu_gather+0xd5>
movslq %ebx,%r15
mov    0x0(%r13,%r15,8),%rsi
movslq 0x174(%rdi,%r15,4),%r14
movslq 0x24(%r12,%r14,4),%rdx
mov    0x148(%rdi,%r14,8),%r8
movslq 0x14(%r8),%rax
mov    0x80(%r12,%rax,8),%rcx
movslq 0x18(%r8),%rax
mov    0xa0(%r12,%rax,8),%r8
callq  12450 <htest_one_block>
mov    0x0(%r13,%r15,8),%rax
movswq (%rax),%rax
mov    %eax,0x24(%r12,%r14,4)
add    $0x1,%ebx
mov    -0x30(%rbp),%rdi
movslq 0x170(%rdi),%rax
cmp    %ebx,%eax
jg     8971 <encode_mcu_gather+0x51>
mov    $0x1,%eax
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
leaveq 
retq   
movslq %eax,%r8
movl   $0x0,0x24(%rdx,%r8,4)
add    $0x1,%eax
movslq 0x144(%rdi),%r8
cmp    %eax,%r8d
jg     89e6 <encode_mcu_gather+0xc6>
mov    0x118(%rdi),%eax
mov    %eax,0x38(%rdx)
mov    0x38(%rdx),%eax
add    $0xffffffff,%eax
mov    %eax,0x38(%rdx)
mov    %rbx,-0x8(%rbp)
mov    %r12,-0x10(%rbp)
mov    %r13,-0x18(%rbp)
mov    %r14,-0x20(%rbp)
mov    %r15,-0x28(%rbp)
mov    %rcx,%rbx
mov    %rdx,%r12
mov    %rsi,%r13
jmp    89c0 <encode_mcu_gather+0xa0>
data16 nopw %cs:0x0(%rax,%rax,1)
nopl   (%rax)

0000000000008a40 <finish_pass_gather>:
push   %rbp
mov    %rsp,%rbp
sub    $0x50,%rsp
mov    %r12,-0x10(%rbp)
mov    %r13,-0x18(%rbp)
mov    %r14,-0x20(%rbp)
mov    %r15,-0x28(%rbp)
mov    %rbx,-0x8(%rbp)
mov    %rdi,%r12
mov    0x1f0(%r12),%r13
lea    -0x48(%rbp),%rdi
xor    %ebx,%ebx
mov    $0x10,%r14d
mov    %rbx,%rsi
mov    %r14,%rdx
callq  41e0 <memset@plt>
mov    %r14,%rdx
lea    -0x38(%rbp),%rdi
mov    %rbx,%rsi
callq  41e0 <memset@plt>
jmpq   8b36 <finish_pass_gather+0xf6>
movslq %ebx,%rax
mov    0x148(%r12,%rax,8),%rax
movslq 0x18(%rax),%r14
movslq 0x14(%rax),%r15
movslq -0x48(%rbp,%r15,4),%rax
test   %eax,%eax
jne    8aec <finish_pass_gather+0xac>
mov    0x80(%r12,%r15,8),%rax
test   %rax,%rax
jne    8acb <finish_pass_gather+0x8b>
mov    %r12,%rdi
callq  44a0 <jpeg_alloc_huff_table@plt>
mov    %rax,0x80(%r12,%r15,8)
mov    0x80(%r12,%r15,8),%rsi
mov    0x80(%r13,%r15,8),%rdx
mov    %r12,%rdi
callq  40f0 <jpeg_gen_optimal_table@plt>
movl   $0x1,-0x48(%rbp,%r15,4)
movslq -0x38(%rbp,%r14,4),%rax
test   %eax,%eax
jne    8b33 <finish_pass_gather+0xf3>
mov    0xa0(%r12,%r14,8),%rax
test   %rax,%rax
jne    8b12 <finish_pass_gather+0xd2>
mov    %r12,%rdi
callq  44a0 <jpeg_alloc_huff_table@plt>
mov    %rax,0xa0(%r12,%r14,8)
mov    0xa0(%r12,%r14,8),%rsi
mov    0xa0(%r13,%r14,8),%rdx
mov    %r12,%rdi
callq  40f0 <jpeg_gen_optimal_table@plt>
movl   $0x1,-0x38(%rbp,%r14,4)
add    $0x1,%ebx
movslq 0x144(%r12),%rax
cmp    %ebx,%eax
jg     8a92 <finish_pass_gather+0x52>
mov    -0x8(%rbp),%rbx
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
leaveq 
retq   
nopl   0x0(%rax)

0000000000008b60 <start_pass_huff>:
push   %rbp
mov    %rsp,%rbp
sub    $0x40,%rsp
mov    %r13,-0x18(%rbp)
mov    %r14,-0x20(%rbp)
mov    %r15,-0x28(%rbp)
mov    %rsi,-0x40(%rbp)
mov    %rbx,-0x8(%rbp)
mov    %r12,-0x10(%rbp)
mov    0x1f0(%rdi),%r12
test   %esi,%esi
jne    8ba5 <start_pass_huff+0x45>
lea    -0x5d2(%rip),%rax        # 85c0 <encode_mcu_huff>
mov    %rax,0x8(%r12)
lea    -0x33e(%rip),%rax        # 8860 <finish_pass_huff>
mov    %rax,0x10(%r12)
jmp    8bbd <start_pass_huff+0x5d>
lea    -0x28c(%rip),%rax        # 8920 <encode_mcu_gather>
mov    %rax,0x8(%r12)
lea    -0x178(%rip),%rax        # 8a40 <finish_pass_gather>
mov    %rax,0x10(%r12)
mov    %rdi,%rbx
mov    %rsi,%r14
callq  3da80 <jsimd_can_huff_encode_one_block>
mov    %eax,0xc0(%r12)
mov    $0x1,%esi
mov    $0x808,%edx
xor    %r15d,%r15d
mov    %r15,%r13
jmpq   8d20 <start_pass_huff+0x1c0>
test   %r8d,%r8d
js     8bf0 <start_pass_huff+0x90>
cmp    $0x3,%r8d
jle    8c2d <start_pass_huff+0xcd>
mov    (%rbx),%rcx
movl   $0x32,0x28(%rcx)
mov    (%rbx),%rcx
mov    %r8d,0x2c(%rcx)
mov    (%rbx),%rcx
mov    (%rcx),%rcx
mov    %rbx,%rdi
mov    %r13,-0x38(%rbp)
mov    %rax,%r13
mov    %r8,%r15
callq  *%rcx
mov    %r13,%rax
mov    %r15,%r8
mov    -0x38(%rbp),%r13
mov    $0x808,%edx
mov    $0x1,%esi
xor    %r15d,%r15d
test   %eax,%eax
js     8c36 <start_pass_huff+0xd6>
cmp    $0x3,%eax
jle    8c72 <start_pass_huff+0x112>
mov    (%rbx),%rcx
movl   $0x32,0x28(%rcx)
mov    (%rbx),%rcx
mov    %eax,0x2c(%rcx)
mov    (%rbx),%rcx
mov    (%rcx),%rcx
mov    %rbx,%rdi
mov    %r13,-0x38(%rbp)
mov    %r8,%r13
mov    %rax,%r15
callq  *%rcx
mov    %r15,%rax
mov    %r13,%r8
mov    -0x38(%rbp),%r13
mov    $0x808,%edx
mov    $0x1,%esi
xor    %r15d,%r15d
mov    0x80(%r12,%r8,8),%rcx
test   %rcx,%rcx
jne    8caf <start_pass_huff+0x14f>
mov    0x8(%rbx),%rcx
mov    (%rcx),%rcx
mov    %rbx,%rdi
mov    %r13,-0x30(%rbp)
mov    %rax,%r13
mov    %r8,%r15
callq  *%rcx
mov    %rax,0x80(%r12,%r15,8)
mov    %r13,%rax
mov    %r15,%r8
mov    -0x30(%rbp),%r13
mov    $0x808,%edx
xor    %r15d,%r15d
mov    0x80(%r12,%r8,8),%rdi
mov    %r15,%rsi
mov    %rax,%r15
callq  41e0 <memset@plt>
mov    0xa0(%r12,%r15,8),%rax
test   %rax,%rax
jne    8ced <start_pass_huff+0x18d>
mov    0x8(%rbx),%rax
mov    (%rax),%rax
mov    %rbx,%rdi
mov    $0x1,%esi
mov    $0x808,%edx
callq  *%rax
mov    %rax,0xa0(%r12,%r15,8)
mov    0xa0(%r12,%r15,8),%rdi
xor    %r15d,%r15d
mov    %r15,%rsi
mov    $0x808,%edx
callq  41e0 <memset@plt>
movl   $0x0,0x24(%r12,%r14,4)
add    $0x1,%r13d
mov    $0x808,%edx
mov    $0x1,%esi
mov    -0x40(%rbp),%r14
movslq 0x144(%rbx),%rax
cmp    %r13d,%eax
jg     8d68 <start_pass_huff+0x208>
movq   $0x0,0x18(%r12)
movl   $0x0,0x20(%r12)
mov    0x118(%rbx),%eax
mov    %eax,0x38(%r12)
movl   $0x0,0x3c(%r12)
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
leaveq 
retq   
test   %r14d,%r14d
movslq %r13d,%r14
mov    0x148(%rbx,%r14,8),%rax
movslq 0x14(%rax),%r8
movslq 0x18(%rax),%rax
jne    8be5 <start_pass_huff+0x85>
mov    %r8,%rdx
mov    %rax,%r15
lea    0x40(%r12,%rdx,8),%rcx
mov    %rbx,%rdi
callq  40d0 <jpeg_make_c_derived_tbl@plt>
mov    %r15,%rdx
lea    0x60(%r12,%rdx,8),%rcx
mov    %rbx,%rdi
xor    %r15d,%r15d
mov    %r15,%rsi
callq  40d0 <jpeg_make_c_derived_tbl@plt>
jmpq   8d05 <start_pass_huff+0x1a5>
data16 nopw %cs:0x0(%rax,%rax,1)
nopl   (%rax)

0000000000008dc0 <dump_buffer>:
push   %rbp
mov    %rsp,%rbp
sub    $0x10,%rsp
mov    %r14,-0x8(%rbp)
mov    %r15,-0x10(%rbp)
mov    %rdi,%r15
mov    0x30(%r15),%rdi
mov    0x28(%rdi),%r14
mov    0x18(%r14),%rax
callq  *%rax
test   %eax,%eax
jne    8df1 <dump_buffer+0x31>
xor    %eax,%eax
mov    -0x10(%rbp),%r15
mov    -0x8(%rbp),%r14
leaveq 
retq   
mov    (%r14),%rax
mov    %rax,(%r15)
mov    0x8(%r14),%rax
mov    %rax,0x8(%r15)
mov    $0x1,%eax
mov    -0x10(%rbp),%r15
mov    -0x8(%rbp),%r14
leaveq 
retq   
xchg   %ax,%ax

0000000000008e10 <flush_bits>:
push   %rbp
mov    %rsp,%rbp
sub    $0x130,%rsp
mov    0x10(%rdi),%rcx
movslq 0x18(%rdi),%r8
xor    %esi,%esi
mov    $0x1,%eax
mov    0x8(%rdi),%rdx
cmp    $0xff,%rdx
jbe    8e3f <flush_bits+0x2f>
mov    (%rdi),%rdx
mov    %rsi,%r9
jmp    8e49 <flush_bits+0x39>
lea    -0x128(%rbp),%rdx
mov    %rax,%r9
shl    $0x7,%rcx
lea    0x7f(%rcx),%r10
lea    0x7(%r8),%ecx
mov    %r13,%r8
mov    %rdx,%r13
mov    %rbx,%rdx
mov    %rsi,%rbx
mov    %r12,%rsi
mov    %rdi,%r12
jmp    8e71 <flush_bits+0x61>
movb   $0x0,(%r11)
add    $0x2,%r13
cmp    $0x7,%ecx
jg     8eb3 <flush_bits+0xa3>
movq   $0x0,0x10(%r12)
movl   $0x0,0x18(%r12)
test   %r9d,%r9d
jg     8ecf <flush_bits+0xbf>
mov    (%r12),%rcx
mov    %r13,%rdi
sub    %rcx,%rdi
mov    0x8(%r12),%rcx
sub    %rdi,%rcx
mov    %rcx,0x8(%r12)
mov    %r13,(%r12)
mov    %rdx,%rbx
mov    %rsi,%r12
mov    %r8,%r13
leaveq 
retq   
add    $0xfffffff8,%ecx
mov    %r10,%rdi
shr    %cl,%rdi
mov    %dil,0x0(%r13)
lea    0x1(%r13),%r11
cmp    $0xff,%dil
je     8e69 <flush_bits+0x59>
mov    %r11,%r13
jmp    8e71 <flush_bits+0x61>
lea    -0x128(%rbp),%rax
sub    %rax,%r13
mov    %rdx,-0x8(%rbp)
mov    %rsi,-0x10(%rbp)
mov    %r8,-0x18(%rbp)
mov    %r14,-0x20(%rbp)
mov    %r15,-0x28(%rbp)
mov    %rax,%r14
jmp    8f34 <flush_bits+0x124>
mov    0x8(%r12),%r15
cmp    %r13,%r15
jbe    8eff <flush_bits+0xef>
mov    %r13,%r15
mov    (%r12),%rdi
mov    %r14,%rsi
mov    %r15,%rdx
callq  42c0 <memcpy@plt>
mov    %r15,%rax
add    (%r12),%rax
mov    %rax,(%r12)
mov    0x8(%r12),%rcx
mov    %rcx,%rax
sub    %r15,%rax
mov    %rax,0x8(%r12)
cmp    %r15,%rcx
je     8f54 <flush_bits+0x144>
sub    %r15,%r13
add    %r15,%r14
test   %r13,%r13
jne    8ef2 <flush_bits+0xe2>
mov    $0x1,%eax
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
leaveq 
retq   
mov    %r12,%rdi
callq  8dc0 <dump_buffer>
test   %eax,%eax
jne    8f2e <flush_bits+0x11e>
mov    %rbx,%rax
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
leaveq 
retq   
nopl   0x0(%rax)

0000000000008f80 <encode_one_block_simd>:
push   %rbp
mov    %rsp,%rbp
sub    $0x120,%rsp
mov    %r14,-0x18(%rbp)
mov    %r15,-0x20(%rbp)
xor    %r9d,%r9d
mov    $0x1,%r14d
mov    0x8(%rdi),%rax
cmp    $0xff,%rax
jbe    8fb0 <encode_one_block_simd+0x30>
mov    (%rdi),%rax
mov    %r9,%r14
jmp    8fb7 <encode_one_block_simd+0x37>
lea    -0x120(%rbp),%rax
mov    %r8,%r9
mov    %rcx,%r8
mov    %rdx,%rcx
mov    %rsi,%rdx
mov    %rax,%rsi
mov    %r12,%r15
mov    %rdi,%r12
callq  3dac0 <jsimd_huff_encode_one_block>
test   %r14d,%r14d
jg     9003 <encode_one_block_simd+0x83>
mov    (%r12),%rcx
mov    %rax,%rdx
sub    %rcx,%rdx
mov    0x8(%r12),%rcx
sub    %rdx,%rcx
mov    %rcx,0x8(%r12)
mov    %rax,(%r12)
mov    %r15,%r12
mov    $0x1,%eax
mov    -0x20(%rbp),%r15
mov    -0x18(%rbp),%r14
leaveq 
retq   
lea    -0x120(%rbp),%rcx
mov    %rax,%r14
sub    %rcx,%r14
mov    %r15,-0x8(%rbp)
mov    %r13,-0x10(%rbp)
mov    %rcx,%r15
jmp    905f <encode_one_block_simd+0xdf>
mov    0x8(%r12),%r13
cmp    %r14,%r13
jbe    902a <encode_one_block_simd+0xaa>
mov    %r14,%r13
mov    (%r12),%rdi
mov    %r15,%rsi
mov    %r13,%rdx
callq  42c0 <memcpy@plt>
mov    %r13,%rax
add    (%r12),%rax
mov    %rax,(%r12)
mov    0x8(%r12),%rcx
mov    %rcx,%rax
sub    %r13,%rax
mov    %rax,0x8(%r12)
cmp    %r13,%rcx
je     907b <encode_one_block_simd+0xfb>
sub    %r13,%r14
add    %r13,%r15
test   %r14,%r14
jne    901d <encode_one_block_simd+0x9d>
mov    -0x10(%rbp),%r13
mov    -0x8(%rbp),%r12
mov    $0x1,%eax
mov    -0x20(%rbp),%r15
mov    -0x18(%rbp),%r14
leaveq 
retq   
mov    %r12,%rdi
callq  8dc0 <dump_buffer>
test   %eax,%eax
jne    9059 <encode_one_block_simd+0xd9>
mov    -0x10(%rbp),%r13
mov    -0x8(%rbp),%r12
mov    -0x20(%rbp),%r15
mov    -0x18(%rbp),%r14
xor    %eax,%eax
leaveq 
retq   
nopl   0x0(%rax,%rax,1)

00000000000090a0 <encode_one_block>:
push   %rbp
mov    %rsp,%rbp
sub    $0x230,%rsp
mov    %r15,-0x30(%rbp)
mov    %r14,-0x28(%rbp)
mov    %r13,-0x20(%rbp)
mov    %rbx,-0x10(%rbp)
mov    %rdi,-0x8(%rbp)
mov    %r8,-0x120(%rbp)
mov    %r12,-0x18(%rbp)
movslq 0x3c0(%r8),%r9
mov    %r9,-0x128(%rbp)
movsbq 0x4f0(%r8),%rbx
mov    0x10(%rdi),%r15
movslq 0x18(%rdi),%r14
xor    %eax,%eax
mov    $0x1,%r12d
mov    0x8(%rdi),%r10
cmp    $0xff,%r10
jbe    9102 <encode_one_block+0x62>
mov    (%rdi),%r13
jmp    910c <encode_one_block+0x6c>
lea    -0x228(%rbp),%r13
mov    %r12,%rax
mov    %rax,-0x38(%rbp)
movswq (%rsi),%rdi
sub    %edx,%edi
mov    %rdi,%r11
sar    $0x1f,%r11d
mov    %r11,%rax
xor    %edi,%eax
sub    %r11d,%eax
movslq %eax,%rdx
lea    0x40185(%rip),%rax        # 492b4 <jpeg_nbits_table>
movzbl (%rdx,%rax,1),%edx
movslq (%rcx,%rdx,4),%r10
movsbq 0x400(%rcx,%rdx,1),%rcx
cmp    $0x2f,%r14d
jg     9298 <encode_one_block+0x1f8>
xchg   %rcx,%r14
xchg   %rcx,%r14
shl    %cl,%r15
or     %r15,%r10
add    %ecx,%r14d
cmp    $0x2f,%r14d
jg     92c1 <encode_one_block+0x221>
mov    %rdx,%rcx
mov    %r12,%rdx
shl    %cl,%rdx
add    $0xffffffff,%edx
add    %r11d,%edi
and    %edi,%edx
movslq %edx,%rdi
shl    %cl,%r10
or     %r10,%rdi
lea    (%r14,%rcx,1),%edx
movswq 0x2(%rsi),%r14
test   %r14w,%r14w
jne    92e5 <encode_one_block+0x245>
mov    $0x10,%r11d
mov    $0x2,%r10d
movswq 0x10(%rsi),%r14
test   %r14w,%r14w
je     9214 <encode_one_block+0x174>
mov    %r14,%r15
sar    $0x1f,%r15d
mov    %r15,%rcx
xor    %r14d,%ecx
sub    %r15d,%ecx
movslq %ecx,%rcx
movzbl (%rcx,%rax,1),%ecx
lea    (%r11,%rcx,1),%r10d
movslq %r10d,%r10
movslq (%r8,%r10,4),%r11
movsbq 0x400(%r8,%r10,1),%r10
cmp    $0x1f,%edx
jg     9356 <encode_one_block+0x2b6>
xchg   %rdi,%r15
shl    %cl,%r12
add    $0xffffffff,%r12d
add    %r14d,%edi
and    %edi,%r12d
movslq %r12d,%rdi
mov    %rcx,%r12
mov    %r10,%rcx
shl    %cl,%r15
mov    %rcx,%r10
or     %r15,%r11
mov    %r12,%rcx
shl    %cl,%r11
or     %r11,%rdi
add    %r10d,%edx
add    %ecx,%edx
mov    $0x1,%r12d
xor    %r10d,%r10d
movswq 0x20(%rsi),%r14
test   %r14w,%r14w
je     937c <encode_one_block+0x2dc>
mov    %r14,%r15
sar    $0x1f,%r15d
mov    %r15,%rcx
xor    %r14d,%ecx
sub    %r15d,%ecx
movslq %ecx,%rcx
movzbl (%rcx,%rax,1),%ecx
shl    $0x4,%r10d
add    %ecx,%r10d
movslq %r10d,%r10
movslq (%r8,%r10,4),%r11
movsbq 0x400(%r8,%r10,1),%r10
cmp    $0x1f,%edx
jg     9404 <encode_one_block+0x364>
xchg   %rdi,%r15
shl    %cl,%r12
add    $0xffffffff,%r12d
add    %r14d,%edi
and    %edi,%r12d
movslq %r12d,%rdi
mov    %rcx,%r12
mov    %r10,%rcx
shl    %cl,%r15
mov    %rcx,%r10
or     %r15,%r11
mov    %r12,%rcx
shl    %cl,%r11
or     %r11,%rdi
add    %r10d,%edx
add    %ecx,%edx
mov    $0x1,%r12d
xor    %r10d,%r10d
jmpq   9380 <encode_one_block+0x2e0>
mov    %r14,%rax
mov    %rcx,%r14
lea    0x38(%rax),%ecx
mov    %r15,%r9
shr    %cl,%r9
mov    %r9b,0x0(%r13)
lea    0x1(%r13),%rcx
cmp    $0xff,%r9b
je     942a <encode_one_block+0x38a>
mov    %rcx,%r9
jmpq   9431 <encode_one_block+0x391>
lea    0x38(%r14),%ecx
mov    %r10,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%rcx
cmp    $0xff,%r15b
je     9453 <encode_one_block+0x3b3>
mov    %rcx,%r13
jmpq   945a <encode_one_block+0x3ba>
mov    %r14,%r11
sar    $0x1f,%r11d
mov    %r11,%rcx
xor    %r14d,%ecx
sub    %r11d,%ecx
movslq %ecx,%rcx
movzbl (%rcx,%rax,1),%ecx
movslq (%r8,%rcx,4),%r10
movsbq 0x400(%r8,%rcx,1),%rax
cmp    $0x1f,%edx
jg     947e <encode_one_block+0x3de>
mov    %rdi,%r15
mov    %r12,%rdi
shl    %cl,%rdi
add    $0xffffffff,%edi
add    %r14d,%r11d
and    %r11d,%edi
movslq %edi,%rdi
mov    %rcx,%r11
mov    %rax,%rcx
shl    %cl,%r15
mov    %rcx,%rax
or     %r15,%r10
mov    %r11,%rcx
shl    %cl,%r10
or     %r10,%rdi
add    %edx,%eax
lea    (%rax,%rcx,1),%edx
lea    0x3ff69(%rip),%rax        # 492b4 <jpeg_nbits_table>
xor    %r11d,%r11d
mov    %r12,%r10
jmpq   919c <encode_one_block+0xfc>
mov    %rcx,%rax
lea    0x38(%rdx),%ecx
mov    %rdi,%r9
shr    %cl,%r9
mov    %r9b,0x0(%r13)
lea    0x1(%r13),%rcx
cmp    $0xff,%r9b
je     94a4 <encode_one_block+0x404>
mov    %rcx,%r9
jmpq   94ab <encode_one_block+0x40b>
add    $0x1,%r10d
movswq 0x12(%rsi),%r15
test   %r15w,%r15w
je     94cd <encode_one_block+0x42d>
mov    %r15,%r14
sar    $0x1f,%r14d
mov    %r14,%rcx
xor    %r15d,%ecx
sub    %r14d,%ecx
movslq %ecx,%rcx
movzbl (%rcx,%rax,1),%ecx
shl    $0x4,%r10d
add    %ecx,%r10d
movslq %r10d,%r10
movslq (%r8,%r10,4),%r11
movsbq 0x400(%r8,%r10,1),%r10
cmp    $0x1f,%edx
jg     9555 <encode_one_block+0x4b5>
xchg   %rdi,%r15
shl    %cl,%r12
add    $0xffffffff,%r12d
add    %r14d,%edi
and    %edi,%r12d
movslq %r12d,%rdi
mov    %rcx,%r12
mov    %r10,%rcx
shl    %cl,%r15
mov    %rcx,%r10
or     %r15,%r11
mov    %r12,%rcx
shl    %cl,%r11
or     %r11,%rdi
add    %r10d,%edx
add    %ecx,%edx
mov    $0x1,%r12d
xor    %r10d,%r10d
jmpq   94d1 <encode_one_block+0x431>
mov    %rcx,%rax
lea    0x38(%rdx),%ecx
mov    %rdi,%r9
shr    %cl,%r9
mov    %r9b,0x0(%r13)
lea    0x1(%r13),%rcx
cmp    $0xff,%r9b
je     957b <encode_one_block+0x4db>
mov    %rcx,%r9
jmpq   9582 <encode_one_block+0x4e2>
movb   $0x0,(%rcx)
lea    0x2(%r13),%r9
lea    0x30(%rax),%ecx
mov    %r15,%r13
shr    %cl,%r13
mov    %r13b,(%r9)
lea    0x1(%r9),%rcx
cmp    $0xff,%r13b
je     95a4 <encode_one_block+0x504>
mov    %rcx,%r9
jmpq   95ab <encode_one_block+0x50b>
movb   $0x0,(%rcx)
add    $0x2,%r13
lea    0x30(%r14),%ecx
mov    %r10,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%rcx
cmp    $0xff,%r15b
je     95cd <encode_one_block+0x52d>
mov    %rcx,%r13
jmpq   95d4 <encode_one_block+0x534>
mov    %rcx,%r15
lea    0x38(%rdx),%ecx
mov    %rdi,%r9
shr    %cl,%r9
mov    %r9b,0x0(%r13)
lea    0x1(%r13),%rcx
cmp    $0xff,%r9b
je     95f8 <encode_one_block+0x558>
mov    %rcx,%r9
jmpq   95ff <encode_one_block+0x55f>
movb   $0x0,(%rcx)
lea    0x2(%r13),%r9
lea    0x30(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %r13b,(%r9)
lea    0x1(%r9),%rcx
cmp    $0xff,%r13b
je     9621 <encode_one_block+0x581>
mov    %rcx,%r9
jmpq   9628 <encode_one_block+0x588>
add    $0x1,%r10d
movswq 0x4(%rsi),%r14
test   %r14w,%r14w
je     964a <F_0_587+0x4>
mov    %r14,%r15
sar    $0x1f,%r15d
mov    %r15,%rcx
xor    %r14d,%ecx
sub    %r15d,%ecx
movslq %ecx,%rcx
movzbl (%rcx,%rax,1),%ecx
shl    $0x4,%r10d
add    %ecx,%r10d
movslq %r10d,%r10
movslq (%r8,%r10,4),%r11
movsbq 0x400(%r8,%r10,1),%r10
cmp    $0x1f,%edx
jg     9687 <F_0_587+0x41>
xchg   %rdi,%r15
shl    %cl,%r12
add    $0xffffffff,%r12d
add    %r14d,%edi
and    %edi,%r12d
movslq %r12d,%rdi
mov    %rcx,%r12
mov    %r10,%rcx
shl    %cl,%r15
mov    %rcx,%r10
or     %r15,%r11
mov    %r12,%rcx
shl    %cl,%r11
or     %r11,%rdi
add    %r10d,%edx
add    %ecx,%edx
mov    $0x1,%r12d
xor    %r11d,%r11d
jmpq   964e <F_0_587+0x8>
mov    %rcx,%rax
lea    0x38(%rdx),%ecx
mov    %rdi,%r12
shr    %cl,%r12
mov    %r12b,0x0(%r13)
lea    0x1(%r13),%rcx
cmp    $0xff,%r12b
je     96ad <F_0_587+0x67>
mov    %rcx,%r12
jmpq   96b4 <F_0_587+0x6e>
movb   $0x0,(%rcx)
lea    0x2(%r13),%r9
lea    0x30(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %r13b,(%r9)
lea    0x1(%r9),%rcx
cmp    $0xff,%r13b
je     96d8 <F_0_587+0x92>
mov    %rcx,%r9
jmpq   96df <F_0_587+0x99>
movb   $0x0,(%rcx)
add    $0x2,%r9
lea    0x28(%rax),%ecx
mov    %r15,%r13
shr    %cl,%r13
mov    %r13b,(%r9)
lea    0x1(%r9),%rcx
cmp    $0xff,%r13b
je     9701 <F_0_587+0xbb>
mov    %rcx,%r9
jmpq   9708 <F_0_587+0xc2>
movb   $0x0,(%rcx)
add    $0x2,%r13
lea    0x28(%r14),%ecx
mov    %r10,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%rcx
cmp    $0xff,%r15b
je     972a <F_0_587+0xe4>
mov    %rcx,%r13
jmpq   9731 <F_0_587+0xeb>
movb   $0x0,(%rcx)
lea    0x2(%r13),%r9
lea    0x30(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %r13b,(%r9)
lea    0x1(%r9),%rcx
cmp    $0xff,%r13b
je     9755 <F_0_587+0x10f>
mov    %rcx,%r9
jmpq   975c <F_0_587+0x116>
movb   $0x0,(%rcx)
add    $0x2,%r9
lea    0x28(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %r13b,(%r9)
lea    0x1(%r9),%rcx
cmp    $0xff,%r13b
je     977e <F_0_587+0x138>
mov    %rcx,%r9
jmpq   9785 <F_0_587+0x13f>
lea    0x1(%r10),%r11d
movswq 0x6(%rsi),%r10
test   %r10w,%r10w
je     97bf <F_0_587+0x179>
mov    %r10,%r14
sar    $0x1f,%r14d
mov    %r14,-0x118(%rbp)
mov    %r14,%rcx
xor    %r10d,%ecx
sub    %r14d,%ecx
movslq %ecx,%rcx
movzbl (%rcx,%rax,1),%ecx
mov    %rcx,-0x128(%rbp)
jmpq   98d4 <F_0_587+0x28e>
mov    %rcx,%rax
lea    0x38(%rdx),%ecx
mov    %rdi,%r8
shr    %cl,%r8
mov    %r8b,0x0(%r13)
lea    0x1(%r13),%rcx
cmp    $0xff,%r8b
je     994e <F_0_587+0x308>
mov    %rcx,%r8
jmpq   9955 <F_0_587+0x30f>
movb   $0x0,(%rcx)
lea    0x2(%r13),%r12
lea    0x30(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %r13b,(%r12)
lea    0x1(%r12),%rcx
cmp    $0xff,%r13b
je     9977 <F_0_587+0x331>
mov    %rcx,%r12
jmpq   997e <F_0_587+0x338>
movb   $0x0,(%rcx)
add    $0x2,%r9
lea    0x28(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %r13b,(%r9)
lea    0x1(%r9),%rcx
cmp    $0xff,%r13b
je     99a2 <F_0_587+0x35c>
mov    %rcx,%r9
jmpq   99a9 <F_0_587+0x363>
movb   $0x0,(%rcx)
add    $0x2,%r9
lea    0x20(%rax),%ecx
mov    %r15,%r13
shr    %cl,%r13
mov    %r13b,(%r9)
lea    0x1(%r9),%rcx
cmp    $0xff,%r13b
je     99e3 <F_0_587+0x39d>
mov    %rcx,%r9
jmpq   99ea <F_0_587+0x3a4>
movb   $0x0,(%rcx)
add    $0x2,%r13
lea    0x20(%r14),%ecx
mov    %r10,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%rcx
cmp    $0xff,%r15b
je     9a0c <F_0_587+0x3c6>
mov    %rcx,%r13
jmpq   9a13 <F_0_587+0x3cd>
movb   $0x0,(%rcx)
add    $0x2,%r9
lea    0x28(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %r13b,(%r9)
lea    0x1(%r9),%rcx
cmp    $0xff,%r13b
je     9a37 <F_0_587+0x3f1>
mov    %rcx,%r9
jmpq   9a3e <F_0_587+0x3f8>
movb   $0x0,(%rcx)
add    $0x2,%r9
lea    -0x20(%rdx),%ecx
mov    %rax,%r13
mov    %rdi,%rax
shr    %cl,%rax
mov    %rcx,%rdx
mov    %al,(%r9)
lea    0x1(%r9),%rcx
cmp    $0xff,%al
je     9a70 <F_0_587+0x42a>
mov    %r13,%rax
mov    %rcx,%r13
mov    %rax,%rcx
mov    -0x128(%rbp),%r9
lea    0x3fafa(%rip),%rax        # 492b4 <jpeg_nbits_table>
jmpq   91db <encode_one_block+0x13b>
add    $0x1,%r11d
movswq 0x14(%rsi),%r10
test   %r10w,%r10w
je     9a93 <F_0_587+0x44d>
mov    %r10,%r14
sar    $0x1f,%r14d
mov    %r14,-0x118(%rbp)
mov    %r14,%rcx
xor    %r10d,%ecx
sub    %r14d,%ecx
movslq %ecx,%rcx
movzbl (%rcx,%rax,1),%ecx
mov    %rcx,-0x128(%rbp)
jmpq   9ba8 <F_0_587+0x562>
cmp    $0x2f,%edx
jle    98c2 <F_0_587+0x27c>
lea    0x38(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    9824 <F_0_587+0x1de>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    0x30(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    9843 <F_0_587+0x1fd>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
lea    0x28(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    9862 <F_0_587+0x21c>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    0x20(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    9881 <F_0_587+0x23b>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
lea    0x18(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    98a0 <F_0_587+0x25a>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    -0x30(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %rcx,%rdx
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    98c2 <F_0_587+0x27c>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
mov    %rbx,%rcx
shl    %cl,%rdi
mov    %rcx,%rbx
or     %r9,%rdi
add    %ebx,%edx
add    $0xfffffff0,%r11d
cmp    $0xf,%r11d
jg     97fc <F_0_587+0x1b6>
shl    $0x4,%r11d
mov    -0x128(%rbp),%rcx
add    %ecx,%r11d
movslq %r11d,%r11
movslq (%r8,%r11,4),%r14
movsbq 0x400(%r8,%r11,1),%r11
cmp    $0x1f,%edx
jg     9c22 <F_0_587+0x5dc>
mov    %rdi,%r15
shl    %cl,%r12
lea    -0x1(%r12),%edi
mov    -0x118(%rbp),%r12
add    %r12d,%r10d
and    %r10d,%edi
movslq %edi,%rdi
mov    %r11,%r10
mov    %rcx,%r11
mov    %r10,%rcx
shl    %cl,%r15
mov    %rcx,%r10
or     %r15,%r14
mov    %r11,%rcx
shl    %cl,%r14
or     %r14,%rdi
add    %r10d,%edx
add    %ecx,%edx
mov    $0x1,%r12d
xor    %r11d,%r11d
jmpq   97c3 <F_0_587+0x17d>
movb   $0x0,(%rcx)
lea    0x2(%r13),%r8
lea    0x30(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     9c48 <F_0_587+0x602>
mov    %rcx,%r8
jmpq   9c4f <F_0_587+0x609>
movb   $0x0,(%rcx)
add    $0x2,%r12
lea    0x28(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %r13b,(%r12)
lea    0x1(%r12),%rcx
cmp    $0xff,%r13b
je     9c71 <F_0_587+0x62b>
mov    %rcx,%r12
jmpq   9c78 <F_0_587+0x632>
movb   $0x0,(%rcx)
add    $0x2,%r9
lea    -0x20(%rdx),%ecx
mov    %rax,%r13
mov    %rdi,%rax
shr    %cl,%rax
mov    %rcx,%rdx
mov    %al,(%r9)
lea    0x1(%r9),%rcx
cmp    $0xff,%al
je     9cb3 <F_0_587+0x66d>
mov    %r13,%rax
mov    %rcx,%r13
mov    %rax,%rcx
mov    -0x128(%rbp),%r9
lea    0x3f8d6(%rip),%rax        # 492b4 <jpeg_nbits_table>
jmpq   925a <encode_one_block+0x1ba>
movb   $0x0,(%rcx)
add    $0x2,%r9
lea    0x18(%rax),%ecx
mov    %r15,%r13
shr    %cl,%r13
mov    %r13b,(%r9)
lea    0x1(%r9),%rcx
cmp    $0xff,%r13b
je     9cd6 <F_0_587+0x690>
mov    %rcx,%r9
jmpq   9cdd <F_0_587+0x697>
movb   $0x0,(%rcx)
add    $0x2,%r13
lea    0x18(%r14),%ecx
mov    %r10,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%rcx
cmp    $0xff,%r15b
je     9d08 <F_0_587+0x6c2>
mov    %rcx,%r15
jmpq   9d0f <F_0_587+0x6c9>
movb   $0x0,(%rcx)
add    $0x2,%r9
lea    -0x20(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %rcx,%rdx
mov    %r13b,(%r9)
lea    0x1(%r9),%rcx
cmp    $0xff,%r13b
je     9d32 <F_0_587+0x6ec>
mov    %rcx,%r13
mov    %r15,%rcx
mov    %rdi,%r15
mov    -0x128(%rbp),%r9
jmpq   9315 <encode_one_block+0x275>
movb   $0x0,(%rcx)
lea    0x2(%r9),%rcx
mov    %r13,%rax
mov    %rcx,%r13
mov    %rax,%rcx
mov    -0x128(%rbp),%r9
lea    0x3f826(%rip),%rax        # 492b4 <jpeg_nbits_table>
jmpq   91db <encode_one_block+0x13b>
add    $0x1,%r11d
movswq 0x22(%rsi),%r10
test   %r10w,%r10w
je     9d4b <F_0_587+0x705>
mov    %r10,%r14
sar    $0x1f,%r14d
mov    %r14,-0x110(%rbp)
mov    %r14,%rcx
xor    %r10d,%ecx
sub    %r14d,%ecx
movslq %ecx,%rcx
movzbl (%rcx,%rax,1),%ecx
mov    %rcx,-0x128(%rbp)
jmpq   9e60 <F_0_587+0x81a>
cmp    $0x2f,%edx
jle    9b96 <F_0_587+0x550>
lea    0x38(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    9af8 <F_0_587+0x4b2>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    0x30(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    9b17 <F_0_587+0x4d1>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
lea    0x28(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    9b36 <F_0_587+0x4f0>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    0x20(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    9b55 <F_0_587+0x50f>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
lea    0x18(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    9b74 <F_0_587+0x52e>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    -0x30(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %rcx,%rdx
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    9b96 <F_0_587+0x550>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
mov    %rbx,%rcx
shl    %cl,%rdi
mov    %rcx,%rbx
or     %r9,%rdi
add    %ebx,%edx
add    $0xfffffff0,%r11d
cmp    $0xf,%r11d
jg     9ad0 <F_0_587+0x48a>
shl    $0x4,%r11d
mov    -0x128(%rbp),%rcx
add    %ecx,%r11d
movslq %r11d,%r11
movslq (%r8,%r11,4),%r14
movsbq 0x400(%r8,%r11,1),%r11
cmp    $0x1f,%edx
jg     9eda <F_0_587+0x894>
mov    %rdi,%r15
shl    %cl,%r12
lea    -0x1(%r12),%edi
mov    -0x118(%rbp),%r12
add    %r12d,%r10d
and    %r10d,%edi
movslq %edi,%rdi
mov    %r11,%r10
mov    %rcx,%r11
mov    %r10,%rcx
shl    %cl,%r15
mov    %rcx,%r10
or     %r15,%r14
mov    %r11,%rcx
shl    %cl,%r14
or     %r14,%rdi
add    %r10d,%edx
add    %ecx,%edx
mov    $0x1,%r12d
xor    %r11d,%r11d
jmpq   9a97 <F_0_587+0x451>
mov    %rcx,%r15
lea    0x38(%rdx),%ecx
mov    %rdi,%r8
shr    %cl,%r8
mov    %r8b,0x0(%r13)
lea    0x1(%r13),%rcx
cmp    $0xff,%r8b
je     9f00 <F_0_587+0x8ba>
mov    %rcx,%r8
jmpq   9f07 <F_0_587+0x8c1>
movb   $0x0,(%rcx)
add    $0x2,%r8
lea    0x28(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     9f29 <F_0_587+0x8e3>
mov    %rcx,%r8
jmpq   9f30 <F_0_587+0x8ea>
movb   $0x0,(%rcx)
add    $0x2,%r12
lea    -0x20(%rdx),%ecx
mov    %rax,%r13
mov    %rdi,%rax
shr    %cl,%rax
mov    %rcx,%rdx
mov    %al,(%r12)
lea    0x1(%r12),%rcx
cmp    $0xff,%al
je     9f6a <F_0_587+0x924>
mov    %r13,%rax
mov    %rcx,%r13
mov    %rax,%rcx
mov    $0x1,%r12d
lea    0x3f606(%rip),%rax        # 492b4 <jpeg_nbits_table>
jmpq   93c6 <encode_one_block+0x326>
movb   $0x0,(%rcx)
lea    0x2(%r9),%rcx
mov    %r13,%rax
mov    %rcx,%r13
mov    %rax,%rcx
mov    -0x128(%rbp),%r9
lea    0x3f5e3(%rip),%rax        # 492b4 <jpeg_nbits_table>
jmpq   925a <encode_one_block+0x1ba>
movb   $0x0,(%rcx)
add    $0x2,%r9
lea    -0x30(%rax),%ecx
mov    %r15,%rax
shr    %cl,%rax
mov    %al,(%r9)
lea    0x1(%r9),%r13
cmp    $0xff,%al
je     9f8d <F_0_587+0x947>
mov    -0x128(%rbp),%r9
lea    0x3f5b1(%rip),%rax        # 492b4 <jpeg_nbits_table>
jmpq   914d <encode_one_block+0xad>
movb   $0x0,(%rcx)
lea    0x2(%r13),%r15
lea    -0x30(%r14),%ecx
mov    %r10,%r14
shr    %cl,%r14
mov    %r14b,(%r15)
lea    0x1(%r15),%r13
cmp    $0xff,%r14b
je     9fa9 <F_0_587+0x963>
mov    %rcx,%r14
jmpq   9163 <encode_one_block+0xc3>
movb   $0x0,(%rcx)
lea    0x2(%r9),%r13
mov    %r15,%rcx
mov    %rdi,%r15
mov    -0x128(%rbp),%r9
jmpq   9315 <encode_one_block+0x275>
add    $0x1,%r11d
movswq 0x30(%rsi),%r10
test   %r10w,%r10w
je     9fba <F_0_587+0x974>
mov    %r10,%r14
sar    $0x1f,%r14d
mov    %r14,-0x110(%rbp)
mov    %r14,%rcx
xor    %r10d,%ecx
sub    %r14d,%ecx
movslq %ecx,%rcx
movzbl (%rcx,%rax,1),%ecx
mov    %rcx,-0x128(%rbp)
jmpq   a0cf <F_0_587+0xa89>
cmp    $0x2f,%edx
jle    9e4e <F_0_587+0x808>
lea    0x38(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    9db0 <F_0_587+0x76a>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    0x30(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    9dcf <F_0_587+0x789>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
lea    0x28(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    9dee <F_0_587+0x7a8>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    0x20(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    9e0d <F_0_587+0x7c7>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
lea    0x18(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    9e2c <F_0_587+0x7e6>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    -0x30(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %rcx,%rdx
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    9e4e <F_0_587+0x808>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
mov    %rbx,%rcx
shl    %cl,%rdi
mov    %rcx,%rbx
or     %r9,%rdi
add    %ebx,%edx
add    $0xfffffff0,%r11d
cmp    $0xf,%r11d
jg     9d88 <F_0_587+0x742>
shl    $0x4,%r11d
mov    -0x128(%rbp),%rcx
add    %ecx,%r11d
movslq %r11d,%r11
movslq (%r8,%r11,4),%r14
movsbq 0x400(%r8,%r11,1),%r11
cmp    $0x1f,%edx
jg     a149 <F_0_587+0xb03>
mov    %rdi,%r15
shl    %cl,%r12
lea    -0x1(%r12),%edi
mov    -0x110(%rbp),%r12
add    %r12d,%r10d
and    %r10d,%edi
movslq %edi,%rdi
mov    %r11,%r10
mov    %rcx,%r11
mov    %r10,%rcx
shl    %cl,%r15
mov    %rcx,%r10
or     %r15,%r14
mov    %r11,%rcx
shl    %cl,%r14
or     %r14,%rdi
add    %r10d,%edx
add    %ecx,%edx
mov    $0x1,%r12d
xor    %r11d,%r11d
jmpq   9d4f <F_0_587+0x709>
mov    %rcx,%r15
lea    0x38(%rdx),%ecx
mov    %rdi,%r8
shr    %cl,%r8
mov    %r8b,0x0(%r13)
lea    0x1(%r13),%rcx
cmp    $0xff,%r8b
je     a16f <F_0_587+0xb29>
mov    %rcx,%r8
jmpq   a176 <F_0_587+0xb30>
movb   $0x0,(%rcx)
lea    0x2(%r13),%r8
lea    0x30(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     a198 <F_0_587+0xb52>
mov    %rcx,%r8
jmpq   a19f <F_0_587+0xb59>
movb   $0x0,(%rcx)
add    $0x2,%r8
lea    -0x20(%rdx),%ecx
mov    %rax,%r13
mov    %rdi,%rax
shr    %cl,%rax
mov    %rcx,%rdx
mov    %al,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%al
je     a1c1 <F_0_587+0xb7b>
mov    %r13,%rax
mov    %rcx,%r13
mov    %rax,%rcx
mov    -0x120(%rbp),%r8
lea    0x3f34f(%rip),%rax        # 492b4 <jpeg_nbits_table>
jmpq   9517 <encode_one_block+0x477>
movb   $0x0,(%rcx)
lea    0x2(%r12),%rcx
mov    %r13,%rax
mov    %rcx,%r13
mov    %rax,%rcx
mov    $0x1,%r12d
lea    0x3f32c(%rip),%rax        # 492b4 <jpeg_nbits_table>
jmpq   93c6 <encode_one_block+0x326>
movb   $0x0,0x0(%r13)
lea    0x2(%r9),%r13
mov    -0x128(%rbp),%r9
lea    0x3f310(%rip),%rax        # 492b4 <jpeg_nbits_table>
jmpq   914d <encode_one_block+0xad>
movb   $0x0,0x0(%r13)
lea    0x2(%r15),%r13
mov    %rcx,%r14
jmpq   9163 <encode_one_block+0xc3>
add    $0x1,%r11d
movswq 0x40(%rsi),%r10
test   %r10w,%r10w
je     a1e4 <F_0_587+0xb9e>
mov    %r10,%r14
sar    $0x1f,%r14d
mov    %r14,-0x108(%rbp)
mov    %r14,%rcx
xor    %r10d,%ecx
sub    %r14d,%ecx
movslq %ecx,%rcx
movzbl (%rcx,%rax,1),%ecx
mov    %rcx,-0x128(%rbp)
jmpq   a2f9 <F_0_587+0xcb3>
cmp    $0x2f,%edx
jle    a0bd <F_0_587+0xa77>
lea    0x38(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    a01f <F_0_587+0x9d9>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    0x30(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    a03e <F_0_587+0x9f8>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
lea    0x28(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    a05d <F_0_587+0xa17>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    0x20(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    a07c <F_0_587+0xa36>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
lea    0x18(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    a09b <F_0_587+0xa55>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    -0x30(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %rcx,%rdx
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    a0bd <F_0_587+0xa77>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
mov    %rbx,%rcx
shl    %cl,%rdi
mov    %rcx,%rbx
or     %r9,%rdi
add    %ebx,%edx
add    $0xfffffff0,%r11d
cmp    $0xf,%r11d
jg     9ff7 <F_0_587+0x9b1>
shl    $0x4,%r11d
mov    -0x128(%rbp),%rcx
add    %ecx,%r11d
movslq %r11d,%r11
movslq (%r8,%r11,4),%r14
movsbq 0x400(%r8,%r11,1),%r11
cmp    $0x1f,%edx
jg     a373 <F_0_587+0xd2d>
mov    %rdi,%r15
shl    %cl,%r12
lea    -0x1(%r12),%edi
mov    -0x110(%rbp),%r12
add    %r12d,%r10d
and    %r10d,%edi
movslq %edi,%rdi
mov    %r11,%r10
mov    %rcx,%r11
mov    %r10,%rcx
shl    %cl,%r15
mov    %rcx,%r10
or     %r15,%r14
mov    %r11,%rcx
shl    %cl,%r14
or     %r14,%rdi
add    %r10d,%edx
add    %ecx,%edx
mov    $0x1,%r12d
xor    %r11d,%r11d
jmpq   9fbe <F_0_587+0x978>
mov    %rcx,%r15
lea    0x38(%rdx),%ecx
mov    %rdi,%r8
shr    %cl,%r8
mov    %r8b,0x0(%r13)
lea    0x1(%r13),%rcx
cmp    $0xff,%r8b
je     a399 <F_0_587+0xd53>
mov    %rcx,%r8
jmpq   a3a0 <F_0_587+0xd5a>
movb   $0x0,(%rcx)
lea    0x2(%r13),%r8
lea    0x30(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     a3c2 <F_0_587+0xd7c>
mov    %rcx,%r8
jmpq   a3c9 <F_0_587+0xd83>
movb   $0x0,(%rcx)
add    $0x2,%r8
lea    0x28(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     a3eb <F_0_587+0xda5>
mov    %rcx,%r8
jmpq   a3f2 <F_0_587+0xdac>
movb   $0x0,(%rcx)
lea    0x2(%r8),%rcx
mov    %r13,%rax
mov    %rcx,%r13
mov    %rax,%rcx
mov    -0x120(%rbp),%r8
lea    0x3f0d5(%rip),%rax        # 492b4 <jpeg_nbits_table>
jmpq   9517 <encode_one_block+0x477>
add    $0x1,%r11d
movswq 0x32(%rsi),%r10
test   %r10w,%r10w
je     a424 <F_0_587+0xdde>
mov    %r10,%r14
sar    $0x1f,%r14d
mov    %r14,-0x108(%rbp)
mov    %r14,%rcx
xor    %r10d,%ecx
sub    %r14d,%ecx
movslq %ecx,%rcx
movzbl (%rcx,%rax,1),%ecx
mov    %rcx,-0x128(%rbp)
jmpq   a539 <F_0_587+0xef3>
cmp    $0x2f,%edx
jle    a2e7 <F_0_587+0xca1>
lea    0x38(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    a249 <F_0_587+0xc03>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    0x30(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    a268 <F_0_587+0xc22>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
lea    0x28(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    a287 <F_0_587+0xc41>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    0x20(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    a2a6 <F_0_587+0xc60>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
lea    0x18(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    a2c5 <F_0_587+0xc7f>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    -0x30(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %rcx,%rdx
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    a2e7 <F_0_587+0xca1>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
mov    %rbx,%rcx
shl    %cl,%rdi
mov    %rcx,%rbx
or     %r9,%rdi
add    %ebx,%edx
add    $0xfffffff0,%r11d
cmp    $0xf,%r11d
jg     a221 <F_0_587+0xbdb>
shl    $0x4,%r11d
mov    -0x128(%rbp),%rcx
add    %ecx,%r11d
movslq %r11d,%r11
movslq (%r8,%r11,4),%r14
movsbq 0x400(%r8,%r11,1),%r11
cmp    $0x1f,%edx
jg     a5b3 <F_0_587+0xf6d>
mov    %rdi,%r15
shl    %cl,%r12
lea    -0x1(%r12),%edi
mov    -0x108(%rbp),%r12
add    %r12d,%r10d
and    %r10d,%edi
movslq %edi,%rdi
mov    %r11,%r10
mov    %rcx,%r11
mov    %r10,%rcx
shl    %cl,%r15
mov    %rcx,%r10
or     %r15,%r14
mov    %r11,%rcx
shl    %cl,%r14
or     %r14,%rdi
add    %r10d,%edx
add    %ecx,%edx
mov    $0x1,%r12d
xor    %r11d,%r11d
jmpq   a1e8 <F_0_587+0xba2>
mov    %rcx,%r15
lea    0x38(%rdx),%ecx
mov    %rdi,%r8
shr    %cl,%r8
mov    %r8b,0x0(%r13)
lea    0x1(%r13),%rcx
cmp    $0xff,%r8b
je     a5d9 <F_0_587+0xf93>
mov    %rcx,%r8
jmpq   a5e0 <F_0_587+0xf9a>
movb   $0x0,(%rcx)
lea    0x2(%r13),%r8
lea    0x30(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     a602 <F_0_587+0xfbc>
mov    %rcx,%r8
jmpq   a609 <F_0_587+0xfc3>
movb   $0x0,(%rcx)
add    $0x2,%r8
lea    0x28(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     a62b <F_0_587+0xfe5>
mov    %rcx,%r8
jmpq   a632 <F_0_587+0xfec>
movb   $0x0,(%rcx)
add    $0x2,%r8
lea    -0x20(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %rcx,%rdx
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     a664 <F_0_587+0x101e>
mov    %rcx,%r13
mov    %r15,%rcx
mov    %rdi,%r15
mov    -0x120(%rbp),%r8
jmpq   9908 <F_0_587+0x2c2>
add    $0x1,%r11d
movswq 0x24(%rsi),%r10
test   %r10w,%r10w
je     a67d <F_0_587+0x1037>
mov    %r10,%r14
sar    $0x1f,%r14d
mov    %r14,-0x100(%rbp)
mov    %r14,%rcx
xor    %r10d,%ecx
sub    %r14d,%ecx
movslq %ecx,%rcx
movzbl (%rcx,%rax,1),%ecx
mov    %rcx,-0x128(%rbp)
jmpq   a792 <F_0_587+0x114c>
cmp    $0x2f,%edx
jle    a527 <F_0_587+0xee1>
lea    0x38(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    a489 <F_0_587+0xe43>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    0x30(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    a4a8 <F_0_587+0xe62>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
lea    0x28(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    a4c7 <F_0_587+0xe81>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    0x20(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    a4e6 <F_0_587+0xea0>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
lea    0x18(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    a505 <F_0_587+0xebf>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    -0x30(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %rcx,%rdx
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    a527 <F_0_587+0xee1>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
mov    %rbx,%rcx
shl    %cl,%rdi
mov    %rcx,%rbx
or     %r9,%rdi
add    %ebx,%edx
add    $0xfffffff0,%r11d
cmp    $0xf,%r11d
jg     a461 <F_0_587+0xe1b>
shl    $0x4,%r11d
mov    -0x128(%rbp),%rcx
add    %ecx,%r11d
movslq %r11d,%r11
movslq (%r8,%r11,4),%r14
movsbq 0x400(%r8,%r11,1),%r11
cmp    $0x1f,%edx
jg     a809 <F_0_587+0x11c3>
mov    %rdi,%r15
shl    %cl,%r12
lea    -0x1(%r12),%edi
mov    -0x108(%rbp),%r12
add    %r12d,%r10d
and    %r10d,%edi
movslq %edi,%rdi
mov    %r11,%r10
mov    %rcx,%r11
mov    %r10,%rcx
shl    %cl,%r15
mov    %rcx,%r10
or     %r15,%r14
mov    %r11,%rcx
shl    %cl,%r14
or     %r14,%rdi
add    %r10d,%edx
add    %ecx,%edx
mov    $0x1,%r12d
xor    %r11d,%r11d
jmpq   a428 <F_0_587+0xde2>
mov    %rcx,%r15
lea    0x38(%rdx),%ecx
mov    %rdi,%r8
shr    %cl,%r8
mov    %r8b,0x0(%r13)
lea    0x1(%r13),%rcx
cmp    $0xff,%r8b
je     a82f <F_0_587+0x11e9>
mov    %rcx,%r8
jmpq   a836 <F_0_587+0x11f0>
movb   $0x0,(%rcx)
lea    0x2(%r13),%r8
lea    0x30(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     a858 <F_0_587+0x1212>
mov    %rcx,%r8
jmpq   a85f <F_0_587+0x1219>
movb   $0x0,(%rcx)
add    $0x2,%r8
lea    0x28(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     a881 <F_0_587+0x123b>
mov    %rcx,%r8
jmpq   a888 <F_0_587+0x1242>
movb   $0x0,(%rcx)
add    $0x2,%r8
lea    -0x20(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %rcx,%rdx
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     a8ba <F_0_587+0x1274>
mov    %rcx,%r13
mov    %r15,%rcx
mov    %rdi,%r15
mov    -0x120(%rbp),%r8
jmpq   9bdc <F_0_587+0x596>
movb   $0x0,(%rcx)
lea    0x2(%r8),%r13
mov    %r15,%rcx
mov    %rdi,%r15
mov    -0x120(%rbp),%r8
jmpq   9908 <F_0_587+0x2c2>
add    $0x1,%r11d
movswq 0x16(%rsi),%r10
test   %r10w,%r10w
je     a8d3 <F_0_587+0x128d>
mov    %r10,%r14
sar    $0x1f,%r14d
mov    %r14,-0x100(%rbp)
mov    %r14,%rcx
xor    %r10d,%ecx
sub    %r14d,%ecx
movslq %ecx,%rcx
movzbl (%rcx,%rax,1),%ecx
mov    %rcx,-0x128(%rbp)
jmpq   a9e8 <F_0_587+0x13a2>
cmp    $0x2f,%edx
jle    a780 <F_0_587+0x113a>
lea    0x38(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    a6e2 <F_0_587+0x109c>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    0x30(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    a701 <F_0_587+0x10bb>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
lea    0x28(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    a720 <F_0_587+0x10da>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    0x20(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    a73f <F_0_587+0x10f9>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
lea    0x18(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    a75e <F_0_587+0x1118>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    -0x30(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %rcx,%rdx
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    a780 <F_0_587+0x113a>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
mov    %rbx,%rcx
shl    %cl,%rdi
mov    %rcx,%rbx
or     %r9,%rdi
add    %ebx,%edx
add    $0xfffffff0,%r11d
cmp    $0xf,%r11d
jg     a6ba <F_0_587+0x1074>
shl    $0x4,%r11d
mov    -0x128(%rbp),%rcx
add    %ecx,%r11d
movslq %r11d,%r14
movslq (%r8,%r14,4),%r11
movsbq 0x400(%r8,%r14,1),%r14
cmp    $0x1f,%edx
jg     aa5f <F_0_587+0x1419>
mov    %rdi,%r15
shl    %cl,%r12
lea    -0x1(%r12),%edi
mov    -0x100(%rbp),%r12
add    %r12d,%r10d
and    %r10d,%edi
movslq %edi,%rdi
mov    %rcx,%r12
mov    %r14,%rcx
shl    %cl,%r15
mov    %rcx,%r10
or     %r15,%r11
mov    %r12,%rcx
shl    %cl,%r11
or     %r11,%rdi
add    %r10d,%edx
add    %ecx,%edx
mov    $0x1,%r12d
xor    %r11d,%r11d
jmpq   a681 <F_0_587+0x103b>
mov    %rcx,%r15
lea    0x38(%rdx),%ecx
mov    %rdi,%r8
shr    %cl,%r8
mov    %r8b,0x0(%r13)
lea    0x1(%r13),%rcx
cmp    $0xff,%r8b
je     aa85 <F_0_587+0x143f>
mov    %rcx,%r8
jmpq   aa8c <F_0_587+0x1446>
movb   $0x0,(%rcx)
lea    0x2(%r13),%r8
lea    0x30(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     aaae <F_0_587+0x1468>
mov    %rcx,%r8
jmpq   aab5 <F_0_587+0x146f>
movb   $0x0,(%rcx)
add    $0x2,%r8
lea    0x28(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     aad7 <F_0_587+0x1491>
mov    %rcx,%r8
jmpq   aade <F_0_587+0x1498>
movb   $0x0,(%rcx)
add    $0x2,%r8
lea    -0x20(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %rcx,%rdx
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     ab10 <F_0_587+0x14ca>
mov    %rcx,%r13
mov    %r15,%rcx
mov    %rdi,%r15
mov    -0x120(%rbp),%r8
jmpq   9e94 <F_0_587+0x84e>
movb   $0x0,(%rcx)
lea    0x2(%r8),%r13
mov    %r15,%rcx
mov    %rdi,%r15
mov    -0x120(%rbp),%r8
jmpq   9bdc <F_0_587+0x596>
add    $0x1,%r11d
movswq 0x8(%rsi),%r10
test   %r10w,%r10w
je     ab29 <F_0_587+0x14e3>
mov    %r10,%r14
sar    $0x1f,%r14d
mov    %r14,-0xf8(%rbp)
mov    %r14,%rcx
xor    %r10d,%ecx
sub    %r14d,%ecx
movslq %ecx,%rcx
movzbl (%rcx,%rax,1),%ecx
mov    %rcx,-0x128(%rbp)
jmpq   ac3e <F_0_587+0x15f8>
cmp    $0x2f,%edx
jle    a9d6 <F_0_587+0x1390>
lea    0x38(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    a938 <F_0_587+0x12f2>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    0x30(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    a957 <F_0_587+0x1311>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
lea    0x28(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    a976 <F_0_587+0x1330>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    0x20(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    a995 <F_0_587+0x134f>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
lea    0x18(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    a9b4 <F_0_587+0x136e>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    -0x30(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %rcx,%rdx
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    a9d6 <F_0_587+0x1390>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
mov    %rbx,%rcx
shl    %cl,%rdi
mov    %rcx,%rbx
or     %r9,%rdi
add    %ebx,%edx
add    $0xfffffff0,%r11d
cmp    $0xf,%r11d
jg     a910 <F_0_587+0x12ca>
shl    $0x4,%r11d
mov    -0x128(%rbp),%rcx
add    %ecx,%r11d
movslq %r11d,%r14
movslq (%r8,%r14,4),%r11
movsbq 0x400(%r8,%r14,1),%r14
cmp    $0x1f,%edx
jg     acb5 <F_0_587+0x166f>
mov    %rdi,%r15
shl    %cl,%r12
lea    -0x1(%r12),%edi
mov    -0x100(%rbp),%r12
add    %r12d,%r10d
and    %r10d,%edi
movslq %edi,%rdi
mov    %rcx,%r12
mov    %r14,%rcx
shl    %cl,%r15
mov    %rcx,%r10
or     %r15,%r11
mov    %r12,%rcx
shl    %cl,%r11
or     %r11,%rdi
add    %r10d,%edx
add    %ecx,%edx
mov    $0x1,%r12d
xor    %r11d,%r11d
jmpq   a8d7 <F_0_587+0x1291>
mov    %rcx,%r15
lea    0x38(%rdx),%ecx
mov    %rdi,%r8
shr    %cl,%r8
mov    %r8b,0x0(%r13)
lea    0x1(%r13),%rcx
cmp    $0xff,%r8b
je     acdb <F_0_587+0x1695>
mov    %rcx,%r8
jmpq   ace2 <F_0_587+0x169c>
movb   $0x0,(%rcx)
lea    0x2(%r13),%r8
lea    0x30(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     ad04 <F_0_587+0x16be>
mov    %rcx,%r8
jmpq   ad0b <F_0_587+0x16c5>
movb   $0x0,(%rcx)
add    $0x2,%r8
lea    0x28(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     ad2d <F_0_587+0x16e7>
mov    %rcx,%r8
jmpq   ad34 <F_0_587+0x16ee>
movb   $0x0,(%rcx)
add    $0x2,%r8
lea    -0x20(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %rcx,%rdx
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     ad66 <F_0_587+0x1720>
mov    %rcx,%r13
mov    %r15,%rcx
mov    %rdi,%r15
mov    -0x120(%rbp),%r8
jmpq   a103 <F_0_587+0xabd>
movb   $0x0,(%rcx)
lea    0x2(%r8),%r13
mov    %r15,%rcx
mov    %rdi,%r15
mov    -0x120(%rbp),%r8
jmpq   9e94 <F_0_587+0x84e>
add    $0x1,%r11d
movswq 0xa(%rsi),%r10
test   %r10w,%r10w
je     ad7f <F_0_587+0x1739>
mov    %r10,%r14
sar    $0x1f,%r14d
mov    %r14,-0xf8(%rbp)
mov    %r14,%rcx
xor    %r10d,%ecx
sub    %r14d,%ecx
movslq %ecx,%rcx
movzbl (%rcx,%rax,1),%ecx
mov    %rcx,-0x128(%rbp)
jmpq   ae94 <F_0_587+0x184e>
cmp    $0x2f,%edx
jle    ac2c <F_0_587+0x15e6>
lea    0x38(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    ab8e <F_0_587+0x1548>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    0x30(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    abad <F_0_587+0x1567>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
lea    0x28(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    abcc <F_0_587+0x1586>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    0x20(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    abeb <F_0_587+0x15a5>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
lea    0x18(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    ac0a <F_0_587+0x15c4>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    -0x30(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %rcx,%rdx
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    ac2c <F_0_587+0x15e6>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
mov    %rbx,%rcx
shl    %cl,%rdi
mov    %rcx,%rbx
or     %r9,%rdi
add    %ebx,%edx
add    $0xfffffff0,%r11d
cmp    $0xf,%r11d
jg     ab66 <F_0_587+0x1520>
shl    $0x4,%r11d
mov    -0x128(%rbp),%rcx
add    %ecx,%r11d
movslq %r11d,%r14
movslq (%r8,%r14,4),%r11
movsbq 0x400(%r8,%r14,1),%r14
cmp    $0x1f,%edx
jg     af0b <F_0_587+0x18c5>
mov    %rdi,%r15
shl    %cl,%r12
lea    -0x1(%r12),%edi
mov    -0xf8(%rbp),%r12
add    %r12d,%r10d
and    %r10d,%edi
movslq %edi,%rdi
mov    %rcx,%r12
mov    %r14,%rcx
shl    %cl,%r15
mov    %rcx,%r10
or     %r15,%r11
mov    %r12,%rcx
shl    %cl,%r11
or     %r11,%rdi
add    %r10d,%edx
add    %ecx,%edx
mov    $0x1,%r12d
xor    %r11d,%r11d
jmpq   ab2d <F_0_587+0x14e7>
mov    %rcx,%r15
lea    0x38(%rdx),%ecx
mov    %rdi,%r8
shr    %cl,%r8
mov    %r8b,0x0(%r13)
lea    0x1(%r13),%rcx
cmp    $0xff,%r8b
je     af31 <F_0_587+0x18eb>
mov    %rcx,%r8
jmpq   af38 <F_0_587+0x18f2>
movb   $0x0,(%rcx)
lea    0x2(%r13),%r8
lea    0x30(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     af5a <F_0_587+0x1914>
mov    %rcx,%r8
jmpq   af61 <F_0_587+0x191b>
movb   $0x0,(%rcx)
add    $0x2,%r8
lea    0x28(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     af83 <F_0_587+0x193d>
mov    %rcx,%r8
jmpq   af8a <F_0_587+0x1944>
movb   $0x0,(%rcx)
add    $0x2,%r8
lea    -0x20(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %rcx,%rdx
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     afbc <F_0_587+0x1976>
mov    %rcx,%r13
mov    %r15,%rcx
mov    %rdi,%r15
mov    -0x120(%rbp),%r8
jmpq   a32d <F_0_587+0xce7>
movb   $0x0,(%rcx)
lea    0x2(%r8),%r13
mov    %r15,%rcx
mov    %rdi,%r15
mov    -0x120(%rbp),%r8
jmpq   a103 <F_0_587+0xabd>
add    $0x1,%r11d
movswq 0x18(%rsi),%r10
test   %r10w,%r10w
je     afd5 <F_0_587+0x198f>
mov    %r10,%r14
sar    $0x1f,%r14d
mov    %r14,-0xf0(%rbp)
mov    %r14,%rcx
xor    %r10d,%ecx
sub    %r14d,%ecx
movslq %ecx,%rcx
movzbl (%rcx,%rax,1),%ecx
mov    %rcx,-0x128(%rbp)
jmpq   b0ea <F_0_587+0x1aa4>
cmp    $0x2f,%edx
jle    ae82 <F_0_587+0x183c>
lea    0x38(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    ade4 <F_0_587+0x179e>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    0x30(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    ae03 <F_0_587+0x17bd>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
lea    0x28(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    ae22 <F_0_587+0x17dc>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    0x20(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    ae41 <F_0_587+0x17fb>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
lea    0x18(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    ae60 <F_0_587+0x181a>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    -0x30(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %rcx,%rdx
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    ae82 <F_0_587+0x183c>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
mov    %rbx,%rcx
shl    %cl,%rdi
mov    %rcx,%rbx
or     %r9,%rdi
add    %ebx,%edx
add    $0xfffffff0,%r11d
cmp    $0xf,%r11d
jg     adbc <F_0_587+0x1776>
shl    $0x4,%r11d
mov    -0x128(%rbp),%rcx
add    %ecx,%r11d
movslq %r11d,%r14
movslq (%r8,%r14,4),%r11
movsbq 0x400(%r8,%r14,1),%r14
cmp    $0x1f,%edx
jg     b161 <F_0_587+0x1b1b>
mov    %rdi,%r15
shl    %cl,%r12
lea    -0x1(%r12),%edi
mov    -0xf8(%rbp),%r12
add    %r12d,%r10d
and    %r10d,%edi
movslq %edi,%rdi
mov    %rcx,%r12
mov    %r14,%rcx
shl    %cl,%r15
mov    %rcx,%r10
or     %r15,%r11
mov    %r12,%rcx
shl    %cl,%r11
or     %r11,%rdi
add    %r10d,%edx
add    %ecx,%edx
mov    $0x1,%r12d
xor    %r11d,%r11d
jmpq   ad83 <F_0_587+0x173d>
mov    %rcx,%r15
lea    0x38(%rdx),%ecx
mov    %rdi,%r8
shr    %cl,%r8
mov    %r8b,0x0(%r13)
lea    0x1(%r13),%rcx
cmp    $0xff,%r8b
je     b187 <F_0_587+0x1b41>
mov    %rcx,%r8
jmpq   b18e <F_0_587+0x1b48>
movb   $0x0,(%rcx)
lea    0x2(%r13),%r8
lea    0x30(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     b1b0 <F_0_587+0x1b6a>
mov    %rcx,%r8
jmpq   b1b7 <F_0_587+0x1b71>
movb   $0x0,(%rcx)
add    $0x2,%r8
lea    0x28(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     b1d9 <F_0_587+0x1b93>
mov    %rcx,%r8
jmpq   b1e0 <F_0_587+0x1b9a>
movb   $0x0,(%rcx)
add    $0x2,%r8
lea    -0x20(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %rcx,%rdx
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     b212 <F_0_587+0x1bcc>
mov    %rcx,%r13
mov    %r15,%rcx
mov    %rdi,%r15
mov    -0x120(%rbp),%r8
jmpq   a56d <F_0_587+0xf27>
movb   $0x0,(%rcx)
lea    0x2(%r8),%r13
mov    %r15,%rcx
mov    %rdi,%r15
mov    -0x120(%rbp),%r8
jmpq   a32d <F_0_587+0xce7>
add    $0x1,%r11d
movswq 0x26(%rsi),%r10
test   %r10w,%r10w
je     b22b <F_0_587+0x1be5>
mov    %r10,%r14
sar    $0x1f,%r14d
mov    %r14,-0xf0(%rbp)
mov    %r14,%rcx
xor    %r10d,%ecx
sub    %r14d,%ecx
movslq %ecx,%rcx
movzbl (%rcx,%rax,1),%ecx
mov    %rcx,-0x128(%rbp)
jmpq   b340 <F_0_587+0x1cfa>
cmp    $0x2f,%edx
jle    b0d8 <F_0_587+0x1a92>
lea    0x38(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    b03a <F_0_587+0x19f4>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    0x30(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    b059 <F_0_587+0x1a13>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
lea    0x28(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    b078 <F_0_587+0x1a32>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    0x20(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    b097 <F_0_587+0x1a51>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
lea    0x18(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    b0b6 <F_0_587+0x1a70>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    -0x30(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %rcx,%rdx
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    b0d8 <F_0_587+0x1a92>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
mov    %rbx,%rcx
shl    %cl,%rdi
mov    %rcx,%rbx
or     %r9,%rdi
add    %ebx,%edx
add    $0xfffffff0,%r11d
cmp    $0xf,%r11d
jg     b012 <F_0_587+0x19cc>
shl    $0x4,%r11d
mov    -0x128(%rbp),%rcx
add    %ecx,%r11d
movslq %r11d,%r14
movslq (%r8,%r14,4),%r11
movsbq 0x400(%r8,%r14,1),%r14
cmp    $0x1f,%edx
jg     b3b7 <F_0_587+0x1d71>
mov    %rdi,%r15
shl    %cl,%r12
lea    -0x1(%r12),%edi
mov    -0xf0(%rbp),%r12
add    %r12d,%r10d
and    %r10d,%edi
movslq %edi,%rdi
mov    %rcx,%r12
mov    %r14,%rcx
shl    %cl,%r15
mov    %rcx,%r10
or     %r15,%r11
mov    %r12,%rcx
shl    %cl,%r11
or     %r11,%rdi
add    %r10d,%edx
add    %ecx,%edx
mov    $0x1,%r12d
xor    %r11d,%r11d
jmpq   afd9 <F_0_587+0x1993>
mov    %rcx,%r15
lea    0x38(%rdx),%ecx
mov    %rdi,%r8
shr    %cl,%r8
mov    %r8b,0x0(%r13)
lea    0x1(%r13),%rcx
cmp    $0xff,%r8b
je     b3dd <F_0_587+0x1d97>
mov    %rcx,%r8
jmpq   b3e4 <F_0_587+0x1d9e>
movb   $0x0,(%rcx)
lea    0x2(%r13),%r8
lea    0x30(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     b406 <F_0_587+0x1dc0>
mov    %rcx,%r8
jmpq   b40d <F_0_587+0x1dc7>
movb   $0x0,(%rcx)
add    $0x2,%r8
lea    0x28(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     b42f <F_0_587+0x1de9>
mov    %rcx,%r8
jmpq   b436 <F_0_587+0x1df0>
movb   $0x0,(%rcx)
add    $0x2,%r8
lea    -0x20(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %rcx,%rdx
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     b468 <F_0_587+0x1e22>
mov    %rcx,%r13
mov    %r15,%rcx
mov    %rdi,%r15
mov    -0x120(%rbp),%r8
jmpq   a7c6 <F_0_587+0x1180>
movb   $0x0,(%rcx)
lea    0x2(%r8),%r13
mov    %r15,%rcx
mov    %rdi,%r15
mov    -0x120(%rbp),%r8
jmpq   a56d <F_0_587+0xf27>
add    $0x1,%r11d
movswq 0x34(%rsi),%r10
test   %r10w,%r10w
je     b481 <F_0_587+0x1e3b>
mov    %r10,%r14
sar    $0x1f,%r14d
mov    %r14,-0xe8(%rbp)
mov    %r14,%rcx
xor    %r10d,%ecx
sub    %r14d,%ecx
movslq %ecx,%rcx
movzbl (%rcx,%rax,1),%ecx
mov    %rcx,-0x128(%rbp)
jmpq   b596 <F_0_587+0x1f50>
cmp    $0x2f,%edx
jle    b32e <F_0_587+0x1ce8>
lea    0x38(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    b290 <F_0_587+0x1c4a>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    0x30(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    b2af <F_0_587+0x1c69>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
lea    0x28(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    b2ce <F_0_587+0x1c88>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    0x20(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    b2ed <F_0_587+0x1ca7>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
lea    0x18(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    b30c <F_0_587+0x1cc6>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    -0x30(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %rcx,%rdx
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    b32e <F_0_587+0x1ce8>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
mov    %rbx,%rcx
shl    %cl,%rdi
mov    %rcx,%rbx
or     %r9,%rdi
add    %ebx,%edx
add    $0xfffffff0,%r11d
cmp    $0xf,%r11d
jg     b268 <F_0_587+0x1c22>
shl    $0x4,%r11d
mov    -0x128(%rbp),%rcx
add    %ecx,%r11d
movslq %r11d,%r14
movslq (%r8,%r14,4),%r11
movsbq 0x400(%r8,%r14,1),%r14
cmp    $0x1f,%edx
jg     b60d <F_0_587+0x1fc7>
mov    %rdi,%r15
shl    %cl,%r12
lea    -0x1(%r12),%edi
mov    -0xf0(%rbp),%r12
add    %r12d,%r10d
and    %r10d,%edi
movslq %edi,%rdi
mov    %rcx,%r12
mov    %r14,%rcx
shl    %cl,%r15
mov    %rcx,%r10
or     %r15,%r11
mov    %r12,%rcx
shl    %cl,%r11
or     %r11,%rdi
add    %r10d,%edx
add    %ecx,%edx
mov    $0x1,%r12d
xor    %r11d,%r11d
jmpq   b22f <F_0_587+0x1be9>
mov    %rcx,%r15
lea    0x38(%rdx),%ecx
mov    %rdi,%r8
shr    %cl,%r8
mov    %r8b,0x0(%r13)
lea    0x1(%r13),%rcx
cmp    $0xff,%r8b
je     b633 <F_0_587+0x1fed>
mov    %rcx,%r8
jmpq   b63a <F_0_587+0x1ff4>
movb   $0x0,(%rcx)
lea    0x2(%r13),%r8
lea    0x30(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     b65c <F_0_587+0x2016>
mov    %rcx,%r8
jmpq   b663 <F_0_587+0x201d>
movb   $0x0,(%rcx)
add    $0x2,%r8
lea    0x28(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     b685 <F_0_587+0x203f>
mov    %rcx,%r8
jmpq   b68c <F_0_587+0x2046>
movb   $0x0,(%rcx)
add    $0x2,%r8
lea    -0x20(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %rcx,%rdx
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     b6be <F_0_587+0x2078>
mov    %rcx,%r13
mov    %r15,%rcx
mov    %rdi,%r15
mov    -0x120(%rbp),%r8
jmpq   aa1c <F_0_587+0x13d6>
movb   $0x0,(%rcx)
lea    0x2(%r8),%r13
mov    %r15,%rcx
mov    %rdi,%r15
mov    -0x120(%rbp),%r8
jmpq   a7c6 <F_0_587+0x1180>
add    $0x1,%r11d
movswq 0x42(%rsi),%r10
test   %r10w,%r10w
je     b6d7 <F_0_714+0x5>
mov    %r10,%r14
sar    $0x1f,%r14d
mov    %r14,-0xe8(%rbp)
mov    %r14,%rcx
xor    %r10d,%ecx
sub    %r14d,%ecx
movslq %ecx,%rcx
movzbl (%rcx,%rax,1),%ecx
mov    %rcx,-0x128(%rbp)
jmpq   b7ec <F_0_714+0x11a>
cmp    $0x2f,%edx
jle    b584 <F_0_587+0x1f3e>
lea    0x38(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    b4e6 <F_0_587+0x1ea0>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    0x30(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    b505 <F_0_587+0x1ebf>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
lea    0x28(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    b524 <F_0_587+0x1ede>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    0x20(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    b543 <F_0_587+0x1efd>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
lea    0x18(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    b562 <F_0_587+0x1f1c>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    -0x30(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %rcx,%rdx
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    b584 <F_0_587+0x1f3e>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
mov    %rbx,%rcx
shl    %cl,%rdi
mov    %rcx,%rbx
or     %r9,%rdi
add    %ebx,%edx
add    $0xfffffff0,%r11d
cmp    $0xf,%r11d
jg     b4be <F_0_587+0x1e78>
shl    $0x4,%r11d
mov    -0x128(%rbp),%rcx
add    %ecx,%r11d
movslq %r11d,%r14
movslq (%r8,%r14,4),%r11
movsbq 0x400(%r8,%r14,1),%r14
cmp    $0x1f,%edx
jg     b863 <F_0_714+0x191>
mov    %rdi,%r15
shl    %cl,%r12
lea    -0x1(%r12),%edi
mov    -0xe8(%rbp),%r12
add    %r12d,%r10d
and    %r10d,%edi
movslq %edi,%rdi
mov    %rcx,%r12
mov    %r14,%rcx
shl    %cl,%r15
mov    %rcx,%r10
or     %r15,%r11
mov    %r12,%rcx
shl    %cl,%r11
or     %r11,%rdi
add    %r10d,%edx
add    %ecx,%edx
mov    $0x1,%r12d
xor    %r11d,%r11d
jmpq   b485 <F_0_587+0x1e3f>
mov    %rcx,%r15
lea    0x38(%rdx),%ecx
mov    %rdi,%r8
shr    %cl,%r8
mov    %r8b,0x0(%r13)
lea    0x1(%r13),%rcx
cmp    $0xff,%r8b
je     b889 <F_0_714+0x1b7>
mov    %rcx,%r8
jmpq   b890 <F_0_714+0x1be>
movb   $0x0,(%rcx)
lea    0x2(%r13),%r8
lea    0x30(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     b8b2 <F_0_714+0x1e0>
mov    %rcx,%r8
jmpq   b8b9 <F_0_714+0x1e7>
movb   $0x0,(%rcx)
add    $0x2,%r8
lea    0x28(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     b8db <F_0_714+0x209>
mov    %rcx,%r8
jmpq   b8e2 <F_0_714+0x210>
movb   $0x0,(%rcx)
add    $0x2,%r8
lea    -0x20(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %rcx,%rdx
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     b914 <F_0_714+0x242>
mov    %rcx,%r13
mov    %r15,%rcx
mov    %rdi,%r15
mov    -0x120(%rbp),%r8
jmpq   ac72 <F_0_587+0x162c>
movb   $0x0,(%rcx)
lea    0x2(%r8),%r13
mov    %r15,%rcx
mov    %rdi,%r15
mov    -0x120(%rbp),%r8
jmpq   aa1c <F_0_587+0x13d6>
add    $0x1,%r11d
movswq 0x50(%rsi),%r10
test   %r10w,%r10w
je     b92d <F_0_714+0x25b>
mov    %r10,%r14
sar    $0x1f,%r14d
mov    %r14,-0xe0(%rbp)
mov    %r14,%rcx
xor    %r10d,%ecx
sub    %r14d,%ecx
movslq %ecx,%rcx
movzbl (%rcx,%rax,1),%ecx
mov    %rcx,-0x128(%rbp)
jmpq   ba42 <F_0_714+0x370>
cmp    $0x2f,%edx
jle    b7da <F_0_714+0x108>
lea    0x38(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    b73c <F_0_714+0x6a>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    0x30(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    b75b <F_0_714+0x89>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
lea    0x28(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    b77a <F_0_714+0xa8>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    0x20(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    b799 <F_0_714+0xc7>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
lea    0x18(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    b7b8 <F_0_714+0xe6>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    -0x30(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %rcx,%rdx
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    b7da <F_0_714+0x108>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
mov    %rbx,%rcx
shl    %cl,%rdi
mov    %rcx,%rbx
or     %r9,%rdi
add    %ebx,%edx
add    $0xfffffff0,%r11d
cmp    $0xf,%r11d
jg     b714 <F_0_714+0x42>
shl    $0x4,%r11d
mov    -0x128(%rbp),%rcx
add    %ecx,%r11d
movslq %r11d,%r14
movslq (%r8,%r14,4),%r11
movsbq 0x400(%r8,%r14,1),%r14
cmp    $0x1f,%edx
jg     bab9 <F_0_714+0x3e7>
mov    %rdi,%r15
shl    %cl,%r12
lea    -0x1(%r12),%edi
mov    -0xe8(%rbp),%r12
add    %r12d,%r10d
and    %r10d,%edi
movslq %edi,%rdi
mov    %rcx,%r12
mov    %r14,%rcx
shl    %cl,%r15
mov    %rcx,%r10
or     %r15,%r11
mov    %r12,%rcx
shl    %cl,%r11
or     %r11,%rdi
add    %r10d,%edx
add    %ecx,%edx
mov    $0x1,%r12d
xor    %r11d,%r11d
jmpq   b6db <F_0_714+0x9>
mov    %rcx,%r15
lea    0x38(%rdx),%ecx
mov    %rdi,%r8
shr    %cl,%r8
mov    %r8b,0x0(%r13)
lea    0x1(%r13),%rcx
cmp    $0xff,%r8b
je     badf <F_0_714+0x40d>
mov    %rcx,%r8
jmpq   bae6 <F_0_714+0x414>
movb   $0x0,(%rcx)
lea    0x2(%r13),%r8
lea    0x30(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     bb08 <F_0_714+0x436>
mov    %rcx,%r8
jmpq   bb0f <F_0_714+0x43d>
movb   $0x0,(%rcx)
add    $0x2,%r8
lea    0x28(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     bb31 <F_0_714+0x45f>
mov    %rcx,%r8
jmpq   bb38 <F_0_714+0x466>
movb   $0x0,(%rcx)
add    $0x2,%r8
lea    -0x20(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %rcx,%rdx
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     bb6a <F_0_714+0x498>
mov    %rcx,%r13
mov    %r15,%rcx
mov    %rdi,%r15
mov    -0x120(%rbp),%r8
jmpq   aec8 <F_0_587+0x1882>
movb   $0x0,(%rcx)
lea    0x2(%r8),%r13
mov    %r15,%rcx
mov    %rdi,%r15
mov    -0x120(%rbp),%r8
jmpq   ac72 <F_0_587+0x162c>
add    $0x1,%r11d
movswq 0x60(%rsi),%r10
test   %r10w,%r10w
je     bb83 <F_0_714+0x4b1>
mov    %r10,%r14
sar    $0x1f,%r14d
mov    %r14,-0xe0(%rbp)
mov    %r14,%rcx
xor    %r10d,%ecx
sub    %r14d,%ecx
movslq %ecx,%rcx
movzbl (%rcx,%rax,1),%ecx
mov    %rcx,-0x128(%rbp)
jmpq   bc98 <F_0_714+0x5c6>
cmp    $0x2f,%edx
jle    ba30 <F_0_714+0x35e>
lea    0x38(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    b992 <F_0_714+0x2c0>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    0x30(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    b9b1 <F_0_714+0x2df>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
lea    0x28(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    b9d0 <F_0_714+0x2fe>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    0x20(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    b9ef <F_0_714+0x31d>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
lea    0x18(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    ba0e <F_0_714+0x33c>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    -0x30(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %rcx,%rdx
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    ba30 <F_0_714+0x35e>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
mov    %rbx,%rcx
shl    %cl,%rdi
mov    %rcx,%rbx
or     %r9,%rdi
add    %ebx,%edx
add    $0xfffffff0,%r11d
cmp    $0xf,%r11d
jg     b96a <F_0_714+0x298>
shl    $0x4,%r11d
mov    -0x128(%rbp),%rcx
add    %ecx,%r11d
movslq %r11d,%r14
movslq (%r8,%r14,4),%r11
movsbq 0x400(%r8,%r14,1),%r14
cmp    $0x1f,%edx
jg     bd0f <F_0_714+0x63d>
mov    %rdi,%r15
shl    %cl,%r12
lea    -0x1(%r12),%edi
mov    -0xe0(%rbp),%r12
add    %r12d,%r10d
and    %r10d,%edi
movslq %edi,%rdi
mov    %rcx,%r12
mov    %r14,%rcx
shl    %cl,%r15
mov    %rcx,%r10
or     %r15,%r11
mov    %r12,%rcx
shl    %cl,%r11
or     %r11,%rdi
add    %r10d,%edx
add    %ecx,%edx
mov    $0x1,%r12d
xor    %r11d,%r11d
jmpq   b931 <F_0_714+0x25f>
mov    %rcx,%r15
lea    0x38(%rdx),%ecx
mov    %rdi,%r8
shr    %cl,%r8
mov    %r8b,0x0(%r13)
lea    0x1(%r13),%rcx
cmp    $0xff,%r8b
je     bd35 <F_0_714+0x663>
mov    %rcx,%r8
jmpq   bd3c <F_0_714+0x66a>
movb   $0x0,(%rcx)
lea    0x2(%r13),%r8
lea    0x30(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     bd5e <F_0_714+0x68c>
mov    %rcx,%r8
jmpq   bd65 <F_0_714+0x693>
movb   $0x0,(%rcx)
add    $0x2,%r8
lea    0x28(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     bd87 <F_0_714+0x6b5>
mov    %rcx,%r8
jmpq   bd8e <F_0_714+0x6bc>
movb   $0x0,(%rcx)
add    $0x2,%r8
lea    -0x20(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %rcx,%rdx
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     bdc0 <F_0_714+0x6ee>
mov    %rcx,%r13
mov    %r15,%rcx
mov    %rdi,%r15
mov    -0x120(%rbp),%r8
jmpq   b11e <F_0_587+0x1ad8>
movb   $0x0,(%rcx)
lea    0x2(%r8),%r13
mov    %r15,%rcx
mov    %rdi,%r15
mov    -0x120(%rbp),%r8
jmpq   aec8 <F_0_587+0x1882>
add    $0x1,%r11d
movswq 0x52(%rsi),%r10
test   %r10w,%r10w
je     bdd9 <F_0_714+0x707>
mov    %r10,%r14
sar    $0x1f,%r14d
mov    %r14,-0xd8(%rbp)
mov    %r14,%rcx
xor    %r10d,%ecx
sub    %r14d,%ecx
movslq %ecx,%rcx
movzbl (%rcx,%rax,1),%ecx
mov    %rcx,-0x128(%rbp)
jmpq   beee <F_0_714+0x81c>
cmp    $0x2f,%edx
jle    bc86 <F_0_714+0x5b4>
lea    0x38(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    bbe8 <F_0_714+0x516>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    0x30(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    bc07 <F_0_714+0x535>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
lea    0x28(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    bc26 <F_0_714+0x554>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    0x20(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    bc45 <F_0_714+0x573>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
lea    0x18(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    bc64 <F_0_714+0x592>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    -0x30(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %rcx,%rdx
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    bc86 <F_0_714+0x5b4>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
mov    %rbx,%rcx
shl    %cl,%rdi
mov    %rcx,%rbx
or     %r9,%rdi
add    %ebx,%edx
add    $0xfffffff0,%r11d
cmp    $0xf,%r11d
jg     bbc0 <F_0_714+0x4ee>
shl    $0x4,%r11d
mov    -0x128(%rbp),%rcx
add    %ecx,%r11d
movslq %r11d,%r14
movslq (%r8,%r14,4),%r11
movsbq 0x400(%r8,%r14,1),%r14
cmp    $0x1f,%edx
jg     bf65 <F_0_714+0x893>
mov    %rdi,%r15
shl    %cl,%r12
lea    -0x1(%r12),%edi
mov    -0xe0(%rbp),%r12
add    %r12d,%r10d
and    %r10d,%edi
movslq %edi,%rdi
mov    %rcx,%r12
mov    %r14,%rcx
shl    %cl,%r15
mov    %rcx,%r10
or     %r15,%r11
mov    %r12,%rcx
shl    %cl,%r11
or     %r11,%rdi
add    %r10d,%edx
add    %ecx,%edx
mov    $0x1,%r12d
xor    %r11d,%r11d
jmpq   bb87 <F_0_714+0x4b5>
mov    %rcx,%r15
lea    0x38(%rdx),%ecx
mov    %rdi,%r8
shr    %cl,%r8
mov    %r8b,0x0(%r13)
lea    0x1(%r13),%rcx
cmp    $0xff,%r8b
je     bf8b <F_0_714+0x8b9>
mov    %rcx,%r8
jmpq   bf92 <F_0_714+0x8c0>
movb   $0x0,(%rcx)
lea    0x2(%r13),%r8
lea    0x30(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     bfb4 <F_0_714+0x8e2>
mov    %rcx,%r8
jmpq   bfbb <F_0_714+0x8e9>
movb   $0x0,(%rcx)
add    $0x2,%r8
lea    0x28(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     bfdd <F_0_714+0x90b>
mov    %rcx,%r8
jmpq   bfe4 <F_0_714+0x912>
movb   $0x0,(%rcx)
add    $0x2,%r8
lea    -0x20(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %rcx,%rdx
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     c016 <F_0_714+0x944>
mov    %rcx,%r13
mov    %r15,%rcx
mov    %rdi,%r15
mov    -0x120(%rbp),%r8
jmpq   b374 <F_0_587+0x1d2e>
movb   $0x0,(%rcx)
lea    0x2(%r8),%r13
mov    %r15,%rcx
mov    %rdi,%r15
mov    -0x120(%rbp),%r8
jmpq   b11e <F_0_587+0x1ad8>
add    $0x1,%r11d
movswq 0x44(%rsi),%r10
test   %r10w,%r10w
je     c02f <F_0_714+0x95d>
mov    %r10,%r14
sar    $0x1f,%r14d
mov    %r14,-0xd8(%rbp)
mov    %r14,%rcx
xor    %r10d,%ecx
sub    %r14d,%ecx
movslq %ecx,%rcx
movzbl (%rcx,%rax,1),%ecx
mov    %rcx,-0x128(%rbp)
jmpq   c144 <F_0_714+0xa72>
cmp    $0x2f,%edx
jle    bedc <F_0_714+0x80a>
lea    0x38(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    be3e <F_0_714+0x76c>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    0x30(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    be5d <F_0_714+0x78b>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
lea    0x28(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    be7c <F_0_714+0x7aa>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    0x20(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    be9b <F_0_714+0x7c9>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
lea    0x18(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    beba <F_0_714+0x7e8>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    -0x30(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %rcx,%rdx
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    bedc <F_0_714+0x80a>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
mov    %rbx,%rcx
shl    %cl,%rdi
mov    %rcx,%rbx
or     %r9,%rdi
add    %ebx,%edx
add    $0xfffffff0,%r11d
cmp    $0xf,%r11d
jg     be16 <F_0_714+0x744>
shl    $0x4,%r11d
mov    -0x128(%rbp),%rcx
add    %ecx,%r11d
movslq %r11d,%r14
movslq (%r8,%r14,4),%r11
movsbq 0x400(%r8,%r14,1),%r14
cmp    $0x1f,%edx
jg     c1bb <F_0_714+0xae9>
mov    %rdi,%r15
shl    %cl,%r12
lea    -0x1(%r12),%edi
mov    -0xd8(%rbp),%r12
add    %r12d,%r10d
and    %r10d,%edi
movslq %edi,%rdi
mov    %rcx,%r12
mov    %r14,%rcx
shl    %cl,%r15
mov    %rcx,%r10
or     %r15,%r11
mov    %r12,%rcx
shl    %cl,%r11
or     %r11,%rdi
add    %r10d,%edx
add    %ecx,%edx
mov    $0x1,%r12d
xor    %r11d,%r11d
jmpq   bddd <F_0_714+0x70b>
mov    %rcx,%r15
lea    0x38(%rdx),%ecx
mov    %rdi,%r8
shr    %cl,%r8
mov    %r8b,0x0(%r13)
lea    0x1(%r13),%rcx
cmp    $0xff,%r8b
je     c1e1 <F_0_714+0xb0f>
mov    %rcx,%r8
jmpq   c1e8 <F_0_714+0xb16>
movb   $0x0,(%rcx)
lea    0x2(%r13),%r8
lea    0x30(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     c20a <F_0_714+0xb38>
mov    %rcx,%r8
jmpq   c211 <F_0_714+0xb3f>
movb   $0x0,(%rcx)
add    $0x2,%r8
lea    0x28(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     c233 <F_0_714+0xb61>
mov    %rcx,%r8
jmpq   c23a <F_0_714+0xb68>
movb   $0x0,(%rcx)
add    $0x2,%r8
lea    -0x20(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %rcx,%rdx
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     c26c <F_0_714+0xb9a>
mov    %rcx,%r13
mov    %r15,%rcx
mov    %rdi,%r15
mov    -0x120(%rbp),%r8
jmpq   b5ca <F_0_587+0x1f84>
movb   $0x0,(%rcx)
lea    0x2(%r8),%r13
mov    %r15,%rcx
mov    %rdi,%r15
mov    -0x120(%rbp),%r8
jmpq   b374 <F_0_587+0x1d2e>
add    $0x1,%r11d
movswq 0x36(%rsi),%r10
test   %r10w,%r10w
je     c285 <F_0_714+0xbb3>
mov    %r10,%r14
sar    $0x1f,%r14d
mov    %r14,-0xd0(%rbp)
mov    %r14,%rcx
xor    %r10d,%ecx
sub    %r14d,%ecx
movslq %ecx,%rcx
movzbl (%rcx,%rax,1),%ecx
mov    %rcx,-0x128(%rbp)
jmpq   c39a <F_0_714+0xcc8>
cmp    $0x2f,%edx
jle    c132 <F_0_714+0xa60>
lea    0x38(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    c094 <F_0_714+0x9c2>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    0x30(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    c0b3 <F_0_714+0x9e1>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
lea    0x28(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    c0d2 <F_0_714+0xa00>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    0x20(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    c0f1 <F_0_714+0xa1f>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
lea    0x18(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    c110 <F_0_714+0xa3e>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    -0x30(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %rcx,%rdx
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    c132 <F_0_714+0xa60>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
mov    %rbx,%rcx
shl    %cl,%rdi
mov    %rcx,%rbx
or     %r9,%rdi
add    %ebx,%edx
add    $0xfffffff0,%r11d
cmp    $0xf,%r11d
jg     c06c <F_0_714+0x99a>
shl    $0x4,%r11d
mov    -0x128(%rbp),%rcx
add    %ecx,%r11d
movslq %r11d,%r14
movslq (%r8,%r14,4),%r11
movsbq 0x400(%r8,%r14,1),%r14
cmp    $0x1f,%edx
jg     c411 <F_0_714+0xd3f>
mov    %rdi,%r15
shl    %cl,%r12
lea    -0x1(%r12),%edi
mov    -0xd8(%rbp),%r12
add    %r12d,%r10d
and    %r10d,%edi
movslq %edi,%rdi
mov    %rcx,%r12
mov    %r14,%rcx
shl    %cl,%r15
mov    %rcx,%r10
or     %r15,%r11
mov    %r12,%rcx
shl    %cl,%r11
or     %r11,%rdi
add    %r10d,%edx
add    %ecx,%edx
mov    $0x1,%r12d
xor    %r11d,%r11d
jmpq   c033 <F_0_714+0x961>
mov    %rcx,%r15
lea    0x38(%rdx),%ecx
mov    %rdi,%r8
shr    %cl,%r8
mov    %r8b,0x0(%r13)
lea    0x1(%r13),%rcx
cmp    $0xff,%r8b
je     c437 <F_0_714+0xd65>
mov    %rcx,%r8
jmpq   c43e <F_0_714+0xd6c>
movb   $0x0,(%rcx)
lea    0x2(%r13),%r8
lea    0x30(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     c460 <F_0_714+0xd8e>
mov    %rcx,%r8
jmpq   c467 <F_0_714+0xd95>
movb   $0x0,(%rcx)
add    $0x2,%r8
lea    0x28(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     c489 <F_0_714+0xdb7>
mov    %rcx,%r8
jmpq   c490 <F_0_714+0xdbe>
movb   $0x0,(%rcx)
add    $0x2,%r8
lea    -0x20(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %rcx,%rdx
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     c4c2 <F_0_714+0xdf0>
mov    %rcx,%r13
mov    %r15,%rcx
mov    %rdi,%r15
mov    -0x120(%rbp),%r8
jmpq   b820 <F_0_714+0x14e>
movb   $0x0,(%rcx)
lea    0x2(%r8),%r13
mov    %r15,%rcx
mov    %rdi,%r15
mov    -0x120(%rbp),%r8
jmpq   b5ca <F_0_587+0x1f84>
add    $0x1,%r11d
movswq 0x28(%rsi),%r10
test   %r10w,%r10w
je     c4db <F_0_714+0xe09>
mov    %r10,%r14
sar    $0x1f,%r14d
mov    %r14,-0xd0(%rbp)
mov    %r14,%rcx
xor    %r10d,%ecx
sub    %r14d,%ecx
movslq %ecx,%rcx
movzbl (%rcx,%rax,1),%ecx
mov    %rcx,-0x128(%rbp)
jmpq   c5f0 <F_0_714+0xf1e>
cmp    $0x2f,%edx
jle    c388 <F_0_714+0xcb6>
lea    0x38(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    c2ea <F_0_714+0xc18>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    0x30(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    c309 <F_0_714+0xc37>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
lea    0x28(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    c328 <F_0_714+0xc56>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    0x20(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    c347 <F_0_714+0xc75>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
lea    0x18(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    c366 <F_0_714+0xc94>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    -0x30(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %rcx,%rdx
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    c388 <F_0_714+0xcb6>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
mov    %rbx,%rcx
shl    %cl,%rdi
mov    %rcx,%rbx
or     %r9,%rdi
add    %ebx,%edx
add    $0xfffffff0,%r11d
cmp    $0xf,%r11d
jg     c2c2 <F_0_714+0xbf0>
shl    $0x4,%r11d
mov    -0x128(%rbp),%rcx
add    %ecx,%r11d
movslq %r11d,%r14
movslq (%r8,%r14,4),%r11
movsbq 0x400(%r8,%r14,1),%r14
cmp    $0x1f,%edx
jg     c667 <F_0_714+0xf95>
mov    %rdi,%r15
shl    %cl,%r12
lea    -0x1(%r12),%edi
mov    -0xd0(%rbp),%r12
add    %r12d,%r10d
and    %r10d,%edi
movslq %edi,%rdi
mov    %rcx,%r12
mov    %r14,%rcx
shl    %cl,%r15
mov    %rcx,%r10
or     %r15,%r11
mov    %r12,%rcx
shl    %cl,%r11
or     %r11,%rdi
add    %r10d,%edx
add    %ecx,%edx
mov    $0x1,%r12d
xor    %r11d,%r11d
jmpq   c289 <F_0_714+0xbb7>
mov    %rcx,%r15
lea    0x38(%rdx),%ecx
mov    %rdi,%r8
shr    %cl,%r8
mov    %r8b,0x0(%r13)
lea    0x1(%r13),%rcx
cmp    $0xff,%r8b
je     c68d <F_0_714+0xfbb>
mov    %rcx,%r8
jmpq   c694 <F_0_714+0xfc2>
movb   $0x0,(%rcx)
lea    0x2(%r13),%r8
lea    0x30(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     c6b6 <F_0_714+0xfe4>
mov    %rcx,%r8
jmpq   c6bd <F_0_714+0xfeb>
movb   $0x0,(%rcx)
add    $0x2,%r8
lea    0x28(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     c6df <F_0_714+0x100d>
mov    %rcx,%r8
jmpq   c6e6 <F_0_714+0x1014>
movb   $0x0,(%rcx)
add    $0x2,%r8
lea    -0x20(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %rcx,%rdx
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     c718 <F_0_714+0x1046>
mov    %rcx,%r13
mov    %r15,%rcx
mov    %rdi,%r15
mov    -0x120(%rbp),%r8
jmpq   ba76 <F_0_714+0x3a4>
movb   $0x0,(%rcx)
lea    0x2(%r8),%r13
mov    %r15,%rcx
mov    %rdi,%r15
mov    -0x120(%rbp),%r8
jmpq   b820 <F_0_714+0x14e>
add    $0x1,%r11d
movswq 0x1a(%rsi),%r10
test   %r10w,%r10w
je     c731 <F_0_714+0x105f>
mov    %r10,%r14
sar    $0x1f,%r14d
mov    %r14,-0xc8(%rbp)
mov    %r14,%rcx
xor    %r10d,%ecx
sub    %r14d,%ecx
movslq %ecx,%rcx
movzbl (%rcx,%rax,1),%ecx
mov    %rcx,-0x128(%rbp)
jmpq   c846 <F_0_714+0x1174>
cmp    $0x2f,%edx
jle    c5de <F_0_714+0xf0c>
lea    0x38(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    c540 <F_0_714+0xe6e>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    0x30(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    c55f <F_0_714+0xe8d>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
lea    0x28(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    c57e <F_0_714+0xeac>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    0x20(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    c59d <F_0_714+0xecb>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
lea    0x18(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    c5bc <F_0_714+0xeea>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    -0x30(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %rcx,%rdx
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    c5de <F_0_714+0xf0c>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
mov    %rbx,%rcx
shl    %cl,%rdi
mov    %rcx,%rbx
or     %r9,%rdi
add    %ebx,%edx
add    $0xfffffff0,%r11d
cmp    $0xf,%r11d
jg     c518 <F_0_714+0xe46>
shl    $0x4,%r11d
mov    -0x128(%rbp),%rcx
add    %ecx,%r11d
movslq %r11d,%r14
movslq (%r8,%r14,4),%r11
movsbq 0x400(%r8,%r14,1),%r14
cmp    $0x1f,%edx
jg     c8bd <F_0_714+0x11eb>
mov    %rdi,%r15
shl    %cl,%r12
lea    -0x1(%r12),%edi
mov    -0xd0(%rbp),%r12
add    %r12d,%r10d
and    %r10d,%edi
movslq %edi,%rdi
mov    %rcx,%r12
mov    %r14,%rcx
shl    %cl,%r15
mov    %rcx,%r10
or     %r15,%r11
mov    %r12,%rcx
shl    %cl,%r11
or     %r11,%rdi
add    %r10d,%edx
add    %ecx,%edx
mov    $0x1,%r12d
xor    %r11d,%r11d
jmpq   c4df <F_0_714+0xe0d>
mov    %rcx,%r15
lea    0x38(%rdx),%ecx
mov    %rdi,%r8
shr    %cl,%r8
mov    %r8b,0x0(%r13)
lea    0x1(%r13),%rcx
cmp    $0xff,%r8b
je     c8e3 <F_0_714+0x1211>
mov    %rcx,%r8
jmpq   c8ea <F_0_714+0x1218>
movb   $0x0,(%rcx)
lea    0x2(%r13),%r8
lea    0x30(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     c90c <F_0_714+0x123a>
mov    %rcx,%r8
jmpq   c913 <F_0_714+0x1241>
movb   $0x0,(%rcx)
add    $0x2,%r8
lea    0x28(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     c935 <F_0_714+0x1263>
mov    %rcx,%r8
jmpq   c93c <F_0_714+0x126a>
movb   $0x0,(%rcx)
add    $0x2,%r8
lea    -0x20(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %rcx,%rdx
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     c96e <F_0_714+0x129c>
mov    %rcx,%r13
mov    %r15,%rcx
mov    %rdi,%r15
mov    -0x120(%rbp),%r8
jmpq   bccc <F_0_714+0x5fa>
movb   $0x0,(%rcx)
lea    0x2(%r8),%r13
mov    %r15,%rcx
mov    %rdi,%r15
mov    -0x120(%rbp),%r8
jmpq   ba76 <F_0_714+0x3a4>
add    $0x1,%r11d
movswq 0xc(%rsi),%r10
test   %r10w,%r10w
je     c987 <F_0_714+0x12b5>
mov    %r10,%r14
sar    $0x1f,%r14d
mov    %r14,-0xc8(%rbp)
mov    %r14,%rcx
xor    %r10d,%ecx
sub    %r14d,%ecx
movslq %ecx,%rcx
movzbl (%rcx,%rax,1),%ecx
mov    %rcx,-0x128(%rbp)
jmpq   ca9c <F_0_714+0x13ca>
cmp    $0x2f,%edx
jle    c834 <F_0_714+0x1162>
lea    0x38(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    c796 <F_0_714+0x10c4>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    0x30(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    c7b5 <F_0_714+0x10e3>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
lea    0x28(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    c7d4 <F_0_714+0x1102>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    0x20(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    c7f3 <F_0_714+0x1121>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
lea    0x18(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    c812 <F_0_714+0x1140>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    -0x30(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %rcx,%rdx
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    c834 <F_0_714+0x1162>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
mov    %rbx,%rcx
shl    %cl,%rdi
mov    %rcx,%rbx
or     %r9,%rdi
add    %ebx,%edx
add    $0xfffffff0,%r11d
cmp    $0xf,%r11d
jg     c76e <F_0_714+0x109c>
shl    $0x4,%r11d
mov    -0x128(%rbp),%rcx
add    %ecx,%r11d
movslq %r11d,%r14
movslq (%r8,%r14,4),%r11
movsbq 0x400(%r8,%r14,1),%r14
cmp    $0x1f,%edx
jg     cb13 <F_0_714+0x1441>
mov    %rdi,%r15
shl    %cl,%r12
lea    -0x1(%r12),%edi
mov    -0xc8(%rbp),%r12
add    %r12d,%r10d
and    %r10d,%edi
movslq %edi,%rdi
mov    %rcx,%r12
mov    %r14,%rcx
shl    %cl,%r15
mov    %rcx,%r10
or     %r15,%r11
mov    %r12,%rcx
shl    %cl,%r11
or     %r11,%rdi
add    %r10d,%edx
add    %ecx,%edx
mov    $0x1,%r12d
xor    %r11d,%r11d
jmpq   c735 <F_0_714+0x1063>
mov    %rcx,%r15
lea    0x38(%rdx),%ecx
mov    %rdi,%r8
shr    %cl,%r8
mov    %r8b,0x0(%r13)
lea    0x1(%r13),%rcx
cmp    $0xff,%r8b
je     cb39 <F_0_714+0x1467>
mov    %rcx,%r8
jmpq   cb40 <F_0_714+0x146e>
movb   $0x0,(%rcx)
lea    0x2(%r13),%r8
lea    0x30(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     cb62 <F_0_714+0x1490>
mov    %rcx,%r8
jmpq   cb69 <F_0_714+0x1497>
movb   $0x0,(%rcx)
add    $0x2,%r8
lea    0x28(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     cb8b <F_0_714+0x14b9>
mov    %rcx,%r8
jmpq   cb92 <F_0_714+0x14c0>
movb   $0x0,(%rcx)
add    $0x2,%r8
lea    -0x20(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %rcx,%rdx
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     cbc4 <F_0_714+0x14f2>
mov    %rcx,%r13
mov    %r15,%rcx
mov    %rdi,%r15
mov    -0x120(%rbp),%r8
jmpq   bf22 <F_0_714+0x850>
movb   $0x0,(%rcx)
lea    0x2(%r8),%r13
mov    %r15,%rcx
mov    %rdi,%r15
mov    -0x120(%rbp),%r8
jmpq   bccc <F_0_714+0x5fa>
add    $0x1,%r11d
movswq 0xe(%rsi),%r10
test   %r10w,%r10w
je     cbdd <F_0_714+0x150b>
mov    %r10,%r14
sar    $0x1f,%r14d
mov    %r14,-0xc0(%rbp)
mov    %r14,%rcx
xor    %r10d,%ecx
sub    %r14d,%ecx
movslq %ecx,%rcx
movzbl (%rcx,%rax,1),%ecx
mov    %rcx,-0x128(%rbp)
jmpq   ccf2 <F_0_714+0x1620>
cmp    $0x2f,%edx
jle    ca8a <F_0_714+0x13b8>
lea    0x38(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    c9ec <F_0_714+0x131a>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    0x30(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    ca0b <F_0_714+0x1339>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
lea    0x28(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    ca2a <F_0_714+0x1358>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    0x20(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    ca49 <F_0_714+0x1377>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
lea    0x18(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    ca68 <F_0_714+0x1396>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    -0x30(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %rcx,%rdx
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    ca8a <F_0_714+0x13b8>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
mov    %rbx,%rcx
shl    %cl,%rdi
mov    %rcx,%rbx
or     %r9,%rdi
add    %ebx,%edx
add    $0xfffffff0,%r11d
cmp    $0xf,%r11d
jg     c9c4 <F_0_714+0x12f2>
shl    $0x4,%r11d
mov    -0x128(%rbp),%rcx
add    %ecx,%r11d
movslq %r11d,%r14
movslq (%r8,%r14,4),%r11
movsbq 0x400(%r8,%r14,1),%r14
cmp    $0x1f,%edx
jg     cd69 <F_0_714+0x1697>
mov    %rdi,%r15
shl    %cl,%r12
lea    -0x1(%r12),%edi
mov    -0xc8(%rbp),%r12
add    %r12d,%r10d
and    %r10d,%edi
movslq %edi,%rdi
mov    %rcx,%r12
mov    %r14,%rcx
shl    %cl,%r15
mov    %rcx,%r10
or     %r15,%r11
mov    %r12,%rcx
shl    %cl,%r11
or     %r11,%rdi
add    %r10d,%edx
add    %ecx,%edx
mov    $0x1,%r12d
xor    %r11d,%r11d
jmpq   c98b <F_0_714+0x12b9>
mov    %rcx,%r15
lea    0x38(%rdx),%ecx
mov    %rdi,%r8
shr    %cl,%r8
mov    %r8b,0x0(%r13)
lea    0x1(%r13),%rcx
cmp    $0xff,%r8b
je     cd8f <F_0_714+0x16bd>
mov    %rcx,%r8
jmpq   cd96 <F_0_714+0x16c4>
movb   $0x0,(%rcx)
lea    0x2(%r13),%r8
lea    0x30(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     cdb8 <F_0_714+0x16e6>
mov    %rcx,%r8
jmpq   cdbf <F_0_714+0x16ed>
movb   $0x0,(%rcx)
add    $0x2,%r8
lea    0x28(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     cde1 <F_0_714+0x170f>
mov    %rcx,%r8
jmpq   cde8 <F_0_714+0x1716>
movb   $0x0,(%rcx)
add    $0x2,%r8
lea    -0x20(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %rcx,%rdx
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     ce1a <F_0_714+0x1748>
mov    %rcx,%r13
mov    %r15,%rcx
mov    %rdi,%r15
mov    -0x120(%rbp),%r8
jmpq   c178 <F_0_714+0xaa6>
movb   $0x0,(%rcx)
lea    0x2(%r8),%r13
mov    %r15,%rcx
mov    %rdi,%r15
mov    -0x120(%rbp),%r8
jmpq   bf22 <F_0_714+0x850>
add    $0x1,%r11d
movswq 0x1c(%rsi),%r10
test   %r10w,%r10w
je     ce33 <F_0_714+0x1761>
mov    %r10,%r14
sar    $0x1f,%r14d
mov    %r14,-0xc0(%rbp)
mov    %r14,%rcx
xor    %r10d,%ecx
sub    %r14d,%ecx
movslq %ecx,%rcx
movzbl (%rcx,%rax,1),%ecx
mov    %rcx,-0x128(%rbp)
jmpq   cf48 <F_0_714+0x1876>
cmp    $0x2f,%edx
jle    cce0 <F_0_714+0x160e>
lea    0x38(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    cc42 <F_0_714+0x1570>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    0x30(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    cc61 <F_0_714+0x158f>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
lea    0x28(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    cc80 <F_0_714+0x15ae>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    0x20(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    cc9f <F_0_714+0x15cd>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
lea    0x18(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    ccbe <F_0_714+0x15ec>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    -0x30(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %rcx,%rdx
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    cce0 <F_0_714+0x160e>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
mov    %rbx,%rcx
shl    %cl,%rdi
mov    %rcx,%rbx
or     %r9,%rdi
add    %ebx,%edx
add    $0xfffffff0,%r11d
cmp    $0xf,%r11d
jg     cc1a <F_0_714+0x1548>
shl    $0x4,%r11d
mov    -0x128(%rbp),%rcx
add    %ecx,%r11d
movslq %r11d,%r14
movslq (%r8,%r14,4),%r11
movsbq 0x400(%r8,%r14,1),%r14
cmp    $0x1f,%edx
jg     cfbf <F_0_714+0x18ed>
mov    %rdi,%r15
shl    %cl,%r12
lea    -0x1(%r12),%edi
mov    -0xc0(%rbp),%r12
add    %r12d,%r10d
and    %r10d,%edi
movslq %edi,%rdi
mov    %rcx,%r12
mov    %r14,%rcx
shl    %cl,%r15
mov    %rcx,%r10
or     %r15,%r11
mov    %r12,%rcx
shl    %cl,%r11
or     %r11,%rdi
add    %r10d,%edx
add    %ecx,%edx
mov    $0x1,%r12d
xor    %r11d,%r11d
jmpq   cbe1 <F_0_714+0x150f>
mov    %rcx,%r15
lea    0x38(%rdx),%ecx
mov    %rdi,%r8
shr    %cl,%r8
mov    %r8b,0x0(%r13)
lea    0x1(%r13),%rcx
cmp    $0xff,%r8b
je     cfe5 <F_0_714+0x1913>
mov    %rcx,%r8
jmpq   cfec <F_0_714+0x191a>
movb   $0x0,(%rcx)
lea    0x2(%r13),%r8
lea    0x30(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     d00e <F_0_714+0x193c>
mov    %rcx,%r8
jmpq   d015 <F_0_714+0x1943>
movb   $0x0,(%rcx)
add    $0x2,%r8
lea    0x28(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     d037 <F_0_714+0x1965>
mov    %rcx,%r8
jmpq   d03e <F_0_714+0x196c>
movb   $0x0,(%rcx)
add    $0x2,%r8
lea    -0x20(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %rcx,%rdx
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     d070 <F_0_714+0x199e>
mov    %rcx,%r13
mov    %r15,%rcx
mov    %rdi,%r15
mov    -0x120(%rbp),%r8
jmpq   c3ce <F_0_714+0xcfc>
movb   $0x0,(%rcx)
lea    0x2(%r8),%r13
mov    %r15,%rcx
mov    %rdi,%r15
mov    -0x120(%rbp),%r8
jmpq   c178 <F_0_714+0xaa6>
add    $0x1,%r11d
movswq 0x2a(%rsi),%r10
test   %r10w,%r10w
je     d089 <F_0_714+0x19b7>
mov    %r10,%r14
sar    $0x1f,%r14d
mov    %r14,-0xb8(%rbp)
mov    %r14,%rcx
xor    %r10d,%ecx
sub    %r14d,%ecx
movslq %ecx,%rcx
movzbl (%rcx,%rax,1),%ecx
mov    %rcx,-0x128(%rbp)
jmpq   d19e <F_0_714+0x1acc>
cmp    $0x2f,%edx
jle    cf36 <F_0_714+0x1864>
lea    0x38(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    ce98 <F_0_714+0x17c6>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    0x30(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    ceb7 <F_0_714+0x17e5>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
lea    0x28(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    ced6 <F_0_714+0x1804>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    0x20(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    cef5 <F_0_714+0x1823>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
lea    0x18(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    cf14 <F_0_714+0x1842>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    -0x30(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %rcx,%rdx
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    cf36 <F_0_714+0x1864>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
mov    %rbx,%rcx
shl    %cl,%rdi
mov    %rcx,%rbx
or     %r9,%rdi
add    %ebx,%edx
add    $0xfffffff0,%r11d
cmp    $0xf,%r11d
jg     ce70 <F_0_714+0x179e>
shl    $0x4,%r11d
mov    -0x128(%rbp),%rcx
add    %ecx,%r11d
movslq %r11d,%r14
movslq (%r8,%r14,4),%r11
movsbq 0x400(%r8,%r14,1),%r14
cmp    $0x1f,%edx
jg     d215 <F_0_714+0x1b43>
mov    %rdi,%r15
shl    %cl,%r12
lea    -0x1(%r12),%edi
mov    -0xc0(%rbp),%r12
add    %r12d,%r10d
and    %r10d,%edi
movslq %edi,%rdi
mov    %rcx,%r12
mov    %r14,%rcx
shl    %cl,%r15
mov    %rcx,%r10
or     %r15,%r11
mov    %r12,%rcx
shl    %cl,%r11
or     %r11,%rdi
add    %r10d,%edx
add    %ecx,%edx
mov    $0x1,%r12d
xor    %r11d,%r11d
jmpq   ce37 <F_0_714+0x1765>
mov    %rcx,%r15
lea    0x38(%rdx),%ecx
mov    %rdi,%r8
shr    %cl,%r8
mov    %r8b,0x0(%r13)
lea    0x1(%r13),%rcx
cmp    $0xff,%r8b
je     d23b <F_0_714+0x1b69>
mov    %rcx,%r8
jmpq   d242 <F_0_714+0x1b70>
movb   $0x0,(%rcx)
lea    0x2(%r13),%r8
lea    0x30(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     d264 <F_0_714+0x1b92>
mov    %rcx,%r8
jmpq   d26b <F_0_714+0x1b99>
movb   $0x0,(%rcx)
add    $0x2,%r8
lea    0x28(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     d28d <F_0_714+0x1bbb>
mov    %rcx,%r8
jmpq   d294 <F_0_714+0x1bc2>
movb   $0x0,(%rcx)
add    $0x2,%r8
lea    -0x20(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %rcx,%rdx
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     d2c6 <F_0_714+0x1bf4>
mov    %rcx,%r13
mov    %r15,%rcx
mov    %rdi,%r15
mov    -0x120(%rbp),%r8
jmpq   c624 <F_0_714+0xf52>
movb   $0x0,(%rcx)
lea    0x2(%r8),%r13
mov    %r15,%rcx
mov    %rdi,%r15
mov    -0x120(%rbp),%r8
jmpq   c3ce <F_0_714+0xcfc>
add    $0x1,%r11d
movswq 0x38(%rsi),%r10
test   %r10w,%r10w
je     d2df <F_0_714+0x1c0d>
mov    %r10,%r14
sar    $0x1f,%r14d
mov    %r14,-0xb8(%rbp)
mov    %r14,%rcx
xor    %r10d,%ecx
sub    %r14d,%ecx
movslq %ecx,%rcx
movzbl (%rcx,%rax,1),%ecx
mov    %rcx,-0x128(%rbp)
jmpq   d3f4 <F_0_714+0x1d22>
cmp    $0x2f,%edx
jle    d18c <F_0_714+0x1aba>
lea    0x38(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    d0ee <F_0_714+0x1a1c>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    0x30(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    d10d <F_0_714+0x1a3b>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
lea    0x28(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    d12c <F_0_714+0x1a5a>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    0x20(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    d14b <F_0_714+0x1a79>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
lea    0x18(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    d16a <F_0_714+0x1a98>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    -0x30(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %rcx,%rdx
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    d18c <F_0_714+0x1aba>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
mov    %rbx,%rcx
shl    %cl,%rdi
mov    %rcx,%rbx
or     %r9,%rdi
add    %ebx,%edx
add    $0xfffffff0,%r11d
cmp    $0xf,%r11d
jg     d0c6 <F_0_714+0x19f4>
shl    $0x4,%r11d
mov    -0x128(%rbp),%rcx
add    %ecx,%r11d
movslq %r11d,%r14
movslq (%r8,%r14,4),%r11
movsbq 0x400(%r8,%r14,1),%r14
cmp    $0x1f,%edx
jg     d46b <F_0_714+0x1d99>
mov    %rdi,%r15
shl    %cl,%r12
lea    -0x1(%r12),%edi
mov    -0xb8(%rbp),%r12
add    %r12d,%r10d
and    %r10d,%edi
movslq %edi,%rdi
mov    %rcx,%r12
mov    %r14,%rcx
shl    %cl,%r15
mov    %rcx,%r10
or     %r15,%r11
mov    %r12,%rcx
shl    %cl,%r11
or     %r11,%rdi
add    %r10d,%edx
add    %ecx,%edx
mov    $0x1,%r12d
xor    %r11d,%r11d
jmpq   d08d <F_0_714+0x19bb>
mov    %rcx,%r15
lea    0x38(%rdx),%ecx
mov    %rdi,%r8
shr    %cl,%r8
mov    %r8b,0x0(%r13)
lea    0x1(%r13),%rcx
cmp    $0xff,%r8b
je     d491 <F_0_714+0x1dbf>
mov    %rcx,%r8
jmpq   d498 <F_0_714+0x1dc6>
movb   $0x0,(%rcx)
lea    0x2(%r13),%r8
lea    0x30(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     d4ba <F_0_714+0x1de8>
mov    %rcx,%r8
jmpq   d4c1 <F_0_714+0x1def>
movb   $0x0,(%rcx)
add    $0x2,%r8
lea    0x28(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     d4e3 <F_0_714+0x1e11>
mov    %rcx,%r8
jmpq   d4ea <F_0_714+0x1e18>
movb   $0x0,(%rcx)
add    $0x2,%r8
lea    -0x20(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %rcx,%rdx
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     d51c <F_0_714+0x1e4a>
mov    %rcx,%r13
mov    %r15,%rcx
mov    %rdi,%r15
mov    -0x120(%rbp),%r8
jmpq   c87a <F_0_714+0x11a8>
movb   $0x0,(%rcx)
lea    0x2(%r8),%r13
mov    %r15,%rcx
mov    %rdi,%r15
mov    -0x120(%rbp),%r8
jmpq   c624 <F_0_714+0xf52>
add    $0x1,%r11d
movswq 0x46(%rsi),%r10
test   %r10w,%r10w
je     d535 <F_0_714+0x1e63>
mov    %r10,%r14
sar    $0x1f,%r14d
mov    %r14,-0xb0(%rbp)
mov    %r14,%rcx
xor    %r10d,%ecx
sub    %r14d,%ecx
movslq %ecx,%rcx
movzbl (%rcx,%rax,1),%ecx
mov    %rcx,-0x128(%rbp)
jmpq   d64a <F_0_714+0x1f78>
cmp    $0x2f,%edx
jle    d3e2 <F_0_714+0x1d10>
lea    0x38(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    d344 <F_0_714+0x1c72>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    0x30(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    d363 <F_0_714+0x1c91>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
lea    0x28(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    d382 <F_0_714+0x1cb0>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    0x20(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    d3a1 <F_0_714+0x1ccf>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
lea    0x18(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    d3c0 <F_0_714+0x1cee>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    -0x30(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %rcx,%rdx
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    d3e2 <F_0_714+0x1d10>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
mov    %rbx,%rcx
shl    %cl,%rdi
mov    %rcx,%rbx
or     %r9,%rdi
add    %ebx,%edx
add    $0xfffffff0,%r11d
cmp    $0xf,%r11d
jg     d31c <F_0_714+0x1c4a>
shl    $0x4,%r11d
mov    -0x128(%rbp),%rcx
add    %ecx,%r11d
movslq %r11d,%r14
movslq (%r8,%r14,4),%r11
movsbq 0x400(%r8,%r14,1),%r14
cmp    $0x1f,%edx
jg     d6c1 <F_0_714+0x1fef>
mov    %rdi,%r15
shl    %cl,%r12
lea    -0x1(%r12),%edi
mov    -0xb8(%rbp),%r12
add    %r12d,%r10d
and    %r10d,%edi
movslq %edi,%rdi
mov    %rcx,%r12
mov    %r14,%rcx
shl    %cl,%r15
mov    %rcx,%r10
or     %r15,%r11
mov    %r12,%rcx
shl    %cl,%r11
or     %r11,%rdi
add    %r10d,%edx
add    %ecx,%edx
mov    $0x1,%r12d
xor    %r11d,%r11d
jmpq   d2e3 <F_0_714+0x1c11>
mov    %rcx,%r15
lea    0x38(%rdx),%ecx
mov    %rdi,%r8
shr    %cl,%r8
mov    %r8b,0x0(%r13)
lea    0x1(%r13),%rcx
cmp    $0xff,%r8b
je     d6e7 <F_0_714+0x2015>
mov    %rcx,%r8
jmpq   d6ee <F_0_714+0x201c>
movb   $0x0,(%rcx)
lea    0x2(%r13),%r8
lea    0x30(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     d710 <F_0_714+0x203e>
mov    %rcx,%r8
jmpq   d717 <F_0_714+0x2045>
movb   $0x0,(%rcx)
add    $0x2,%r8
lea    0x28(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     d739 <F_0_714+0x2067>
mov    %rcx,%r8
jmpq   d740 <F_0_714+0x206e>
movb   $0x0,(%rcx)
add    $0x2,%r8
lea    -0x20(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %rcx,%rdx
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     d772 <F_0_714+0x20a0>
mov    %rcx,%r13
mov    %r15,%rcx
mov    %rdi,%r15
mov    -0x120(%rbp),%r8
jmpq   cad0 <F_0_714+0x13fe>
movb   $0x0,(%rcx)
lea    0x2(%r8),%r13
mov    %r15,%rcx
mov    %rdi,%r15
mov    -0x120(%rbp),%r8
jmpq   c87a <F_0_714+0x11a8>
add    $0x1,%r11d
movswq 0x54(%rsi),%r10
test   %r10w,%r10w
je     d78b <F_0_714+0x20b9>
mov    %r10,%r14
sar    $0x1f,%r14d
mov    %r14,-0xb0(%rbp)
mov    %r14,%rcx
xor    %r10d,%ecx
sub    %r14d,%ecx
movslq %ecx,%rcx
movzbl (%rcx,%rax,1),%ecx
mov    %rcx,-0x128(%rbp)
jmpq   d8a0 <F_0_714+0x21ce>
cmp    $0x2f,%edx
jle    d638 <F_0_714+0x1f66>
lea    0x38(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    d59a <F_0_714+0x1ec8>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    0x30(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    d5b9 <F_0_714+0x1ee7>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
lea    0x28(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    d5d8 <F_0_714+0x1f06>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    0x20(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    d5f7 <F_0_714+0x1f25>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
lea    0x18(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    d616 <F_0_714+0x1f44>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    -0x30(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %rcx,%rdx
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    d638 <F_0_714+0x1f66>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
mov    %rbx,%rcx
shl    %cl,%rdi
mov    %rcx,%rbx
or     %r9,%rdi
add    %ebx,%edx
add    $0xfffffff0,%r11d
cmp    $0xf,%r11d
jg     d572 <F_0_714+0x1ea0>
shl    $0x4,%r11d
mov    -0x128(%rbp),%rcx
add    %ecx,%r11d
movslq %r11d,%r14
movslq (%r8,%r14,4),%r11
movsbq 0x400(%r8,%r14,1),%r14
cmp    $0x1f,%edx
jg     d917 <F_0_714+0x2245>
mov    %rdi,%r15
shl    %cl,%r12
lea    -0x1(%r12),%edi
mov    -0xb0(%rbp),%r12
add    %r12d,%r10d
and    %r10d,%edi
movslq %edi,%rdi
mov    %rcx,%r12
mov    %r14,%rcx
shl    %cl,%r15
mov    %rcx,%r10
or     %r15,%r11
mov    %r12,%rcx
shl    %cl,%r11
or     %r11,%rdi
add    %r10d,%edx
add    %ecx,%edx
mov    $0x1,%r12d
xor    %r11d,%r11d
jmpq   d539 <F_0_714+0x1e67>
mov    %rcx,%r15
lea    0x38(%rdx),%ecx
mov    %rdi,%r8
shr    %cl,%r8
mov    %r8b,0x0(%r13)
lea    0x1(%r13),%rcx
cmp    $0xff,%r8b
je     d93d <F_0_714+0x226b>
mov    %rcx,%r8
jmpq   d944 <F_0_714+0x2272>
movb   $0x0,(%rcx)
lea    0x2(%r13),%r8
lea    0x30(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     d966 <F_0_714+0x2294>
mov    %rcx,%r8
jmpq   d96d <F_0_714+0x229b>
movb   $0x0,(%rcx)
add    $0x2,%r8
lea    0x28(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     d98f <F_0_714+0x22bd>
mov    %rcx,%r8
jmpq   d996 <F_0_714+0x22c4>
movb   $0x0,(%rcx)
add    $0x2,%r8
lea    -0x20(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %rcx,%rdx
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     d9c8 <F_0_714+0x22f6>
mov    %rcx,%r13
mov    %r15,%rcx
mov    %rdi,%r15
mov    -0x120(%rbp),%r8
jmpq   cd26 <F_0_714+0x1654>
movb   $0x0,(%rcx)
lea    0x2(%r8),%r13
mov    %r15,%rcx
mov    %rdi,%r15
mov    -0x120(%rbp),%r8
jmpq   cad0 <F_0_714+0x13fe>
add    $0x1,%r11d
movswq 0x62(%rsi),%r10
test   %r10w,%r10w
je     d9e1 <F_0_714+0x230f>
mov    %r10,%r14
sar    $0x1f,%r14d
mov    %r14,-0xa8(%rbp)
mov    %r14,%rcx
xor    %r10d,%ecx
sub    %r14d,%ecx
movslq %ecx,%rcx
movzbl (%rcx,%rax,1),%ecx
mov    %rcx,-0x128(%rbp)
jmpq   daf6 <F_0_714+0x2424>
cmp    $0x2f,%edx
jle    d88e <F_0_714+0x21bc>
lea    0x38(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    d7f0 <F_0_714+0x211e>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    0x30(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    d80f <F_0_714+0x213d>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
lea    0x28(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    d82e <F_0_714+0x215c>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    0x20(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    d84d <F_0_714+0x217b>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
lea    0x18(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    d86c <F_0_714+0x219a>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    -0x30(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %rcx,%rdx
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    d88e <F_0_714+0x21bc>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
mov    %rbx,%rcx
shl    %cl,%rdi
mov    %rcx,%rbx
or     %r9,%rdi
add    %ebx,%edx
add    $0xfffffff0,%r11d
cmp    $0xf,%r11d
jg     d7c8 <F_0_714+0x20f6>
shl    $0x4,%r11d
mov    -0x128(%rbp),%rcx
add    %ecx,%r11d
movslq %r11d,%r14
movslq (%r8,%r14,4),%r11
movsbq 0x400(%r8,%r14,1),%r14
cmp    $0x1f,%edx
jg     db6d <F_0_714+0x249b>
mov    %rdi,%r15
shl    %cl,%r12
lea    -0x1(%r12),%edi
mov    -0xb0(%rbp),%r12
add    %r12d,%r10d
and    %r10d,%edi
movslq %edi,%rdi
mov    %rcx,%r12
mov    %r14,%rcx
shl    %cl,%r15
mov    %rcx,%r10
or     %r15,%r11
mov    %r12,%rcx
shl    %cl,%r11
or     %r11,%rdi
add    %r10d,%edx
add    %ecx,%edx
mov    $0x1,%r12d
xor    %r11d,%r11d
jmpq   d78f <F_0_714+0x20bd>
mov    %rcx,%r15
lea    0x38(%rdx),%ecx
mov    %rdi,%r8
shr    %cl,%r8
mov    %r8b,0x0(%r13)
lea    0x1(%r13),%rcx
cmp    $0xff,%r8b
je     db93 <F_0_714+0x24c1>
mov    %rcx,%r8
jmpq   db9a <F_0_714+0x24c8>
movb   $0x0,(%rcx)
lea    0x2(%r13),%r8
lea    0x30(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     dbbc <F_0_714+0x24ea>
mov    %rcx,%r8
jmpq   dbc3 <F_0_714+0x24f1>
movb   $0x0,(%rcx)
add    $0x2,%r8
lea    0x28(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     dbe5 <F_0_714+0x2513>
mov    %rcx,%r8
jmpq   dbec <F_0_714+0x251a>
movb   $0x0,(%rcx)
add    $0x2,%r8
lea    -0x20(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %rcx,%rdx
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     dc1e <F_0_714+0x254c>
mov    %rcx,%r13
mov    %r15,%rcx
mov    %rdi,%r15
mov    -0x120(%rbp),%r8
jmpq   cf7c <F_0_714+0x18aa>
movb   $0x0,(%rcx)
lea    0x2(%r8),%r13
mov    %r15,%rcx
mov    %rdi,%r15
mov    -0x120(%rbp),%r8
jmpq   cd26 <F_0_714+0x1654>
add    $0x1,%r11d
movswq 0x70(%rsi),%r10
test   %r10w,%r10w
je     dc37 <F_0_714+0x2565>
mov    %r10,%r14
sar    $0x1f,%r14d
mov    %r14,-0xa8(%rbp)
mov    %r14,%rcx
xor    %r10d,%ecx
sub    %r14d,%ecx
movslq %ecx,%rcx
movzbl (%rcx,%rax,1),%ecx
mov    %rcx,-0x128(%rbp)
jmpq   dd4c <F_0_714+0x267a>
cmp    $0x2f,%edx
jle    dae4 <F_0_714+0x2412>
lea    0x38(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    da46 <F_0_714+0x2374>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    0x30(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    da65 <F_0_714+0x2393>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
lea    0x28(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    da84 <F_0_714+0x23b2>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    0x20(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    daa3 <F_0_714+0x23d1>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
lea    0x18(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    dac2 <F_0_714+0x23f0>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    -0x30(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %rcx,%rdx
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    dae4 <F_0_714+0x2412>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
mov    %rbx,%rcx
shl    %cl,%rdi
mov    %rcx,%rbx
or     %r9,%rdi
add    %ebx,%edx
add    $0xfffffff0,%r11d
cmp    $0xf,%r11d
jg     da1e <F_0_714+0x234c>
shl    $0x4,%r11d
mov    -0x128(%rbp),%rcx
add    %ecx,%r11d
movslq %r11d,%r14
movslq (%r8,%r14,4),%r11
movsbq 0x400(%r8,%r14,1),%r14
cmp    $0x1f,%edx
jg     ddc3 <F_0_714+0x26f1>
mov    %rdi,%r15
shl    %cl,%r12
lea    -0x1(%r12),%edi
mov    -0xa8(%rbp),%r12
add    %r12d,%r10d
and    %r10d,%edi
movslq %edi,%rdi
mov    %rcx,%r12
mov    %r14,%rcx
shl    %cl,%r15
mov    %rcx,%r10
or     %r15,%r11
mov    %r12,%rcx
shl    %cl,%r11
or     %r11,%rdi
add    %r10d,%edx
add    %ecx,%edx
mov    $0x1,%r12d
xor    %r11d,%r11d
jmpq   d9e5 <F_0_714+0x2313>
mov    %rcx,%r15
lea    0x38(%rdx),%ecx
mov    %rdi,%r8
shr    %cl,%r8
mov    %r8b,0x0(%r13)
lea    0x1(%r13),%rcx
cmp    $0xff,%r8b
je     dde9 <F_0_714+0x2717>
mov    %rcx,%r8
jmpq   ddf0 <F_0_714+0x271e>
movb   $0x0,(%rcx)
lea    0x2(%r13),%r8
lea    0x30(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     de12 <F_0_714+0x2740>
mov    %rcx,%r8
jmpq   de19 <F_0_714+0x2747>
movb   $0x0,(%rcx)
add    $0x2,%r8
lea    0x28(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     de3b <F_0_714+0x2769>
mov    %rcx,%r8
jmpq   de42 <F_0_714+0x2770>
movb   $0x0,(%rcx)
add    $0x2,%r8
lea    -0x20(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %rcx,%rdx
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     de74 <F_0_714+0x27a2>
mov    %rcx,%r13
mov    %r15,%rcx
mov    %rdi,%r15
mov    -0x120(%rbp),%r8
jmpq   d1d2 <F_0_714+0x1b00>
movb   $0x0,(%rcx)
lea    0x2(%r8),%r13
mov    %r15,%rcx
mov    %rdi,%r15
mov    -0x120(%rbp),%r8
jmpq   cf7c <F_0_714+0x18aa>
add    $0x1,%r11d
movswq 0x72(%rsi),%r10
test   %r10w,%r10w
je     de8d <F_0_714+0x27bb>
mov    %r10,%r14
sar    $0x1f,%r14d
mov    %r14,-0xa0(%rbp)
mov    %r14,%rcx
xor    %r10d,%ecx
sub    %r14d,%ecx
movslq %ecx,%rcx
movzbl (%rcx,%rax,1),%ecx
mov    %rcx,-0x128(%rbp)
jmpq   dfa2 <F_0_714+0x28d0>
cmp    $0x2f,%edx
jle    dd3a <F_0_714+0x2668>
lea    0x38(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    dc9c <F_0_714+0x25ca>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    0x30(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    dcbb <F_0_714+0x25e9>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
lea    0x28(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    dcda <F_0_714+0x2608>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    0x20(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    dcf9 <F_0_714+0x2627>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
lea    0x18(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    dd18 <F_0_714+0x2646>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    -0x30(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %rcx,%rdx
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    dd3a <F_0_714+0x2668>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
mov    %rbx,%rcx
shl    %cl,%rdi
mov    %rcx,%rbx
or     %r9,%rdi
add    %ebx,%edx
add    $0xfffffff0,%r11d
cmp    $0xf,%r11d
jg     dc74 <F_0_714+0x25a2>
shl    $0x4,%r11d
mov    -0x128(%rbp),%rcx
add    %ecx,%r11d
movslq %r11d,%r14
movslq (%r8,%r14,4),%r11
movsbq 0x400(%r8,%r14,1),%r14
cmp    $0x1f,%edx
jg     e019 <F_0_714+0x2947>
mov    %rdi,%r15
shl    %cl,%r12
lea    -0x1(%r12),%edi
mov    -0xa8(%rbp),%r12
add    %r12d,%r10d
and    %r10d,%edi
movslq %edi,%rdi
mov    %rcx,%r12
mov    %r14,%rcx
shl    %cl,%r15
mov    %rcx,%r10
or     %r15,%r11
mov    %r12,%rcx
shl    %cl,%r11
or     %r11,%rdi
add    %r10d,%edx
add    %ecx,%edx
mov    $0x1,%r12d
xor    %r11d,%r11d
jmpq   dc3b <F_0_714+0x2569>
mov    %rcx,%r15
lea    0x38(%rdx),%ecx
mov    %rdi,%r8
shr    %cl,%r8
mov    %r8b,0x0(%r13)
lea    0x1(%r13),%rcx
cmp    $0xff,%r8b
je     e03f <F_0_714+0x296d>
mov    %rcx,%r8
jmpq   e046 <F_0_714+0x2974>
movb   $0x0,(%rcx)
lea    0x2(%r13),%r8
lea    0x30(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     e068 <F_0_714+0x2996>
mov    %rcx,%r8
jmpq   e06f <F_0_714+0x299d>
movb   $0x0,(%rcx)
add    $0x2,%r8
lea    0x28(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     e091 <F_0_714+0x29bf>
mov    %rcx,%r8
jmpq   e098 <F_0_714+0x29c6>
movb   $0x0,(%rcx)
add    $0x2,%r8
lea    -0x20(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %rcx,%rdx
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     e0ca <F_0_714+0x29f8>
mov    %rcx,%r13
mov    %r15,%rcx
mov    %rdi,%r15
mov    -0x120(%rbp),%r8
jmpq   d428 <F_0_714+0x1d56>
movb   $0x0,(%rcx)
lea    0x2(%r8),%r13
mov    %r15,%rcx
mov    %rdi,%r15
mov    -0x120(%rbp),%r8
jmpq   d1d2 <F_0_714+0x1b00>
add    $0x1,%r11d
movswq 0x64(%rsi),%r10
test   %r10w,%r10w
je     e0e3 <F_0_714+0x2a11>
mov    %r10,%r14
sar    $0x1f,%r14d
mov    %r14,-0xa0(%rbp)
mov    %r14,%rcx
xor    %r10d,%ecx
sub    %r14d,%ecx
movslq %ecx,%rcx
movzbl (%rcx,%rax,1),%ecx
mov    %rcx,-0x128(%rbp)
jmpq   e1f8 <F_0_714+0x2b26>
cmp    $0x2f,%edx
jle    df90 <F_0_714+0x28be>
lea    0x38(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    def2 <F_0_714+0x2820>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    0x30(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    df11 <F_0_714+0x283f>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
lea    0x28(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    df30 <F_0_714+0x285e>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    0x20(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    df4f <F_0_714+0x287d>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
lea    0x18(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    df6e <F_0_714+0x289c>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    -0x30(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %rcx,%rdx
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    df90 <F_0_714+0x28be>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
mov    %rbx,%rcx
shl    %cl,%rdi
mov    %rcx,%rbx
or     %r9,%rdi
add    %ebx,%edx
add    $0xfffffff0,%r11d
cmp    $0xf,%r11d
jg     deca <F_0_714+0x27f8>
shl    $0x4,%r11d
mov    -0x128(%rbp),%rcx
add    %ecx,%r11d
movslq %r11d,%r14
movslq (%r8,%r14,4),%r11
movsbq 0x400(%r8,%r14,1),%r14
cmp    $0x1f,%edx
jg     e26f <F_0_714+0x2b9d>
mov    %rdi,%r15
shl    %cl,%r12
lea    -0x1(%r12),%edi
mov    -0xa0(%rbp),%r12
add    %r12d,%r10d
and    %r10d,%edi
movslq %edi,%rdi
mov    %rcx,%r12
mov    %r14,%rcx
shl    %cl,%r15
mov    %rcx,%r10
or     %r15,%r11
mov    %r12,%rcx
shl    %cl,%r11
or     %r11,%rdi
add    %r10d,%edx
add    %ecx,%edx
mov    $0x1,%r12d
xor    %r11d,%r11d
jmpq   de91 <F_0_714+0x27bf>
mov    %rcx,%r15
lea    0x38(%rdx),%ecx
mov    %rdi,%r8
shr    %cl,%r8
mov    %r8b,0x0(%r13)
lea    0x1(%r13),%rcx
cmp    $0xff,%r8b
je     e295 <F_0_714+0x2bc3>
mov    %rcx,%r8
jmpq   e29c <F_0_714+0x2bca>
movb   $0x0,(%rcx)
lea    0x2(%r13),%r8
lea    0x30(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     e2be <F_0_714+0x2bec>
mov    %rcx,%r8
jmpq   e2c5 <F_0_714+0x2bf3>
movb   $0x0,(%rcx)
add    $0x2,%r8
lea    0x28(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     e2e7 <F_0_714+0x2c15>
mov    %rcx,%r8
jmpq   e2ee <F_0_714+0x2c1c>
movb   $0x0,(%rcx)
add    $0x2,%r8
lea    -0x20(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %rcx,%rdx
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     e320 <F_0_714+0x2c4e>
mov    %rcx,%r13
mov    %r15,%rcx
mov    %rdi,%r15
mov    -0x120(%rbp),%r8
jmpq   d67e <F_0_714+0x1fac>
movb   $0x0,(%rcx)
lea    0x2(%r8),%r13
mov    %r15,%rcx
mov    %rdi,%r15
mov    -0x120(%rbp),%r8
jmpq   d428 <F_0_714+0x1d56>
add    $0x1,%r11d
movswq 0x56(%rsi),%r10
test   %r10w,%r10w
je     e339 <F_0_714+0x2c67>
mov    %r10,%r14
sar    $0x1f,%r14d
mov    %r14,-0x98(%rbp)
mov    %r14,%rcx
xor    %r10d,%ecx
sub    %r14d,%ecx
movslq %ecx,%rcx
movzbl (%rcx,%rax,1),%ecx
mov    %rcx,-0x128(%rbp)
jmpq   e44e <F_0_714+0x2d7c>
cmp    $0x2f,%edx
jle    e1e6 <F_0_714+0x2b14>
lea    0x38(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    e148 <F_0_714+0x2a76>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    0x30(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    e167 <F_0_714+0x2a95>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
lea    0x28(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    e186 <F_0_714+0x2ab4>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    0x20(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    e1a5 <F_0_714+0x2ad3>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
lea    0x18(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    e1c4 <F_0_714+0x2af2>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    -0x30(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %rcx,%rdx
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    e1e6 <F_0_714+0x2b14>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
mov    %rbx,%rcx
shl    %cl,%rdi
mov    %rcx,%rbx
or     %r9,%rdi
add    %ebx,%edx
add    $0xfffffff0,%r11d
cmp    $0xf,%r11d
jg     e120 <F_0_714+0x2a4e>
shl    $0x4,%r11d
mov    -0x128(%rbp),%rcx
add    %ecx,%r11d
movslq %r11d,%r14
movslq (%r8,%r14,4),%r11
movsbq 0x400(%r8,%r14,1),%r14
cmp    $0x1f,%edx
jg     e4c5 <F_0_714+0x2df3>
mov    %rdi,%r15
shl    %cl,%r12
lea    -0x1(%r12),%edi
mov    -0xa0(%rbp),%r12
add    %r12d,%r10d
and    %r10d,%edi
movslq %edi,%rdi
mov    %rcx,%r12
mov    %r14,%rcx
shl    %cl,%r15
mov    %rcx,%r10
or     %r15,%r11
mov    %r12,%rcx
shl    %cl,%r11
or     %r11,%rdi
add    %r10d,%edx
add    %ecx,%edx
mov    $0x1,%r12d
xor    %r11d,%r11d
jmpq   e0e7 <F_0_714+0x2a15>
mov    %rcx,%r15
lea    0x38(%rdx),%ecx
mov    %rdi,%r8
shr    %cl,%r8
mov    %r8b,0x0(%r13)
lea    0x1(%r13),%rcx
cmp    $0xff,%r8b
je     e4eb <F_0_714+0x2e19>
mov    %rcx,%r8
jmpq   e4f2 <F_0_714+0x2e20>
movb   $0x0,(%rcx)
lea    0x2(%r13),%r8
lea    0x30(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     e514 <F_0_714+0x2e42>
mov    %rcx,%r8
jmpq   e51b <F_0_714+0x2e49>
movb   $0x0,(%rcx)
add    $0x2,%r8
lea    0x28(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     e53d <F_0_714+0x2e6b>
mov    %rcx,%r8
jmpq   e544 <F_0_714+0x2e72>
movb   $0x0,(%rcx)
add    $0x2,%r8
lea    -0x20(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %rcx,%rdx
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     e576 <F_0_714+0x2ea4>
mov    %rcx,%r13
mov    %r15,%rcx
mov    %rdi,%r15
mov    -0x120(%rbp),%r8
jmpq   d8d4 <F_0_714+0x2202>
movb   $0x0,(%rcx)
lea    0x2(%r8),%r13
mov    %r15,%rcx
mov    %rdi,%r15
mov    -0x120(%rbp),%r8
jmpq   d67e <F_0_714+0x1fac>
add    $0x1,%r11d
movswq 0x48(%rsi),%r10
test   %r10w,%r10w
je     e58f <F_0_714+0x2ebd>
mov    %r10,%r14
sar    $0x1f,%r14d
mov    %r14,-0x98(%rbp)
mov    %r14,%rcx
xor    %r10d,%ecx
sub    %r14d,%ecx
movslq %ecx,%rcx
movzbl (%rcx,%rax,1),%ecx
mov    %rcx,-0x128(%rbp)
jmpq   e6a4 <F_0_714+0x2fd2>
cmp    $0x2f,%edx
jle    e43c <F_0_714+0x2d6a>
lea    0x38(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    e39e <F_0_714+0x2ccc>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    0x30(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    e3bd <F_0_714+0x2ceb>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
lea    0x28(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    e3dc <F_0_714+0x2d0a>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    0x20(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    e3fb <F_0_714+0x2d29>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
lea    0x18(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    e41a <F_0_714+0x2d48>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    -0x30(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %rcx,%rdx
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    e43c <F_0_714+0x2d6a>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
mov    %rbx,%rcx
shl    %cl,%rdi
mov    %rcx,%rbx
or     %r9,%rdi
add    %ebx,%edx
add    $0xfffffff0,%r11d
cmp    $0xf,%r11d
jg     e376 <F_0_714+0x2ca4>
shl    $0x4,%r11d
mov    -0x128(%rbp),%rcx
add    %ecx,%r11d
movslq %r11d,%r14
movslq (%r8,%r14,4),%r11
movsbq 0x400(%r8,%r14,1),%r14
cmp    $0x1f,%edx
jg     e71b <F_0_714+0x3049>
mov    %rdi,%r15
shl    %cl,%r12
lea    -0x1(%r12),%edi
mov    -0x98(%rbp),%r12
add    %r12d,%r10d
and    %r10d,%edi
movslq %edi,%rdi
mov    %rcx,%r12
mov    %r14,%rcx
shl    %cl,%r15
mov    %rcx,%r10
or     %r15,%r11
mov    %r12,%rcx
shl    %cl,%r11
or     %r11,%rdi
add    %r10d,%edx
add    %ecx,%edx
mov    $0x1,%r12d
xor    %r11d,%r11d
jmpq   e33d <F_0_714+0x2c6b>
mov    %rcx,%r15
lea    0x38(%rdx),%ecx
mov    %rdi,%r8
shr    %cl,%r8
mov    %r8b,0x0(%r13)
lea    0x1(%r13),%rcx
cmp    $0xff,%r8b
je     e741 <F_0_714+0x306f>
mov    %rcx,%r8
jmpq   e748 <F_0_714+0x3076>
movb   $0x0,(%rcx)
lea    0x2(%r13),%r8
lea    0x30(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     e76a <F_0_714+0x3098>
mov    %rcx,%r8
jmpq   e771 <F_0_714+0x309f>
movb   $0x0,(%rcx)
add    $0x2,%r8
lea    0x28(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     e793 <F_0_714+0x30c1>
mov    %rcx,%r8
jmpq   e79a <F_0_714+0x30c8>
movb   $0x0,(%rcx)
add    $0x2,%r8
lea    -0x20(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %rcx,%rdx
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     e7cc <F_0_714+0x30fa>
mov    %rcx,%r13
mov    %r15,%rcx
mov    %rdi,%r15
mov    -0x120(%rbp),%r8
jmpq   db2a <F_0_714+0x2458>
movb   $0x0,(%rcx)
lea    0x2(%r8),%r13
mov    %r15,%rcx
mov    %rdi,%r15
mov    -0x120(%rbp),%r8
jmpq   d8d4 <F_0_714+0x2202>
add    $0x1,%r11d
movswq 0x3a(%rsi),%r10
test   %r10w,%r10w
je     e7e5 <F_0_714+0x3113>
mov    %r10,%r14
sar    $0x1f,%r14d
mov    %r14,-0x90(%rbp)
mov    %r14,%rcx
xor    %r10d,%ecx
sub    %r14d,%ecx
movslq %ecx,%rcx
movzbl (%rcx,%rax,1),%ecx
mov    %rcx,-0x128(%rbp)
jmpq   e8fa <F_0_714+0x3228>
cmp    $0x2f,%edx
jle    e692 <F_0_714+0x2fc0>
lea    0x38(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    e5f4 <F_0_714+0x2f22>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    0x30(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    e613 <F_0_714+0x2f41>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
lea    0x28(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    e632 <F_0_714+0x2f60>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    0x20(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    e651 <F_0_714+0x2f7f>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
lea    0x18(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    e670 <F_0_714+0x2f9e>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    -0x30(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %rcx,%rdx
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    e692 <F_0_714+0x2fc0>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
mov    %rbx,%rcx
shl    %cl,%rdi
mov    %rcx,%rbx
or     %r9,%rdi
add    %ebx,%edx
add    $0xfffffff0,%r11d
cmp    $0xf,%r11d
jg     e5cc <F_0_714+0x2efa>
shl    $0x4,%r11d
mov    -0x128(%rbp),%rcx
add    %ecx,%r11d
movslq %r11d,%r14
movslq (%r8,%r14,4),%r11
movsbq 0x400(%r8,%r14,1),%r14
cmp    $0x1f,%edx
jg     e971 <F_0_714+0x329f>
mov    %rdi,%r15
shl    %cl,%r12
lea    -0x1(%r12),%edi
mov    -0x98(%rbp),%r12
add    %r12d,%r10d
and    %r10d,%edi
movslq %edi,%rdi
mov    %rcx,%r12
mov    %r14,%rcx
shl    %cl,%r15
mov    %rcx,%r10
or     %r15,%r11
mov    %r12,%rcx
shl    %cl,%r11
or     %r11,%rdi
add    %r10d,%edx
add    %ecx,%edx
mov    $0x1,%r12d
xor    %r11d,%r11d
jmpq   e593 <F_0_714+0x2ec1>
mov    %rcx,%r15
lea    0x38(%rdx),%ecx
mov    %rdi,%r8
shr    %cl,%r8
mov    %r8b,0x0(%r13)
lea    0x1(%r13),%rcx
cmp    $0xff,%r8b
je     e997 <F_0_714+0x32c5>
mov    %rcx,%r8
jmpq   e99e <F_0_714+0x32cc>
movb   $0x0,(%rcx)
lea    0x2(%r13),%r8
lea    0x30(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     e9c0 <F_0_714+0x32ee>
mov    %rcx,%r8
jmpq   e9c7 <F_0_714+0x32f5>
movb   $0x0,(%rcx)
add    $0x2,%r8
lea    0x28(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     e9e9 <F_0_714+0x3317>
mov    %rcx,%r8
jmpq   e9f0 <F_0_714+0x331e>
movb   $0x0,(%rcx)
add    $0x2,%r8
lea    -0x20(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %rcx,%rdx
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     ea22 <F_0_714+0x3350>
mov    %rcx,%r13
mov    %r15,%rcx
mov    %rdi,%r15
mov    -0x120(%rbp),%r8
jmpq   dd80 <F_0_714+0x26ae>
movb   $0x0,(%rcx)
lea    0x2(%r8),%r13
mov    %r15,%rcx
mov    %rdi,%r15
mov    -0x120(%rbp),%r8
jmpq   db2a <F_0_714+0x2458>
add    $0x1,%r11d
movswq 0x2c(%rsi),%r10
test   %r10w,%r10w
je     ea3b <F_0_714+0x3369>
mov    %r10,%r14
sar    $0x1f,%r14d
mov    %r14,-0x90(%rbp)
mov    %r14,%rcx
xor    %r10d,%ecx
sub    %r14d,%ecx
movslq %ecx,%rcx
movzbl (%rcx,%rax,1),%ecx
mov    %rcx,-0x128(%rbp)
jmpq   eb50 <F_0_714+0x347e>
cmp    $0x2f,%edx
jle    e8e8 <F_0_714+0x3216>
lea    0x38(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    e84a <F_0_714+0x3178>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    0x30(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    e869 <F_0_714+0x3197>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
lea    0x28(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    e888 <F_0_714+0x31b6>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    0x20(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    e8a7 <F_0_714+0x31d5>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
lea    0x18(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    e8c6 <F_0_714+0x31f4>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    -0x30(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %rcx,%rdx
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    e8e8 <F_0_714+0x3216>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
mov    %rbx,%rcx
shl    %cl,%rdi
mov    %rcx,%rbx
or     %r9,%rdi
add    %ebx,%edx
add    $0xfffffff0,%r11d
cmp    $0xf,%r11d
jg     e822 <F_0_714+0x3150>
shl    $0x4,%r11d
mov    -0x128(%rbp),%rcx
add    %ecx,%r11d
movslq %r11d,%r14
movslq (%r8,%r14,4),%r11
movsbq 0x400(%r8,%r14,1),%r14
cmp    $0x1f,%edx
jg     ebca <F_0_714+0x34f8>
mov    %rdi,%r15
shl    %cl,%r12
lea    -0x1(%r12),%edi
mov    -0x90(%rbp),%r12
add    %r12d,%r10d
and    %r10d,%edi
movslq %edi,%rdi
mov    %rcx,%r12
mov    %r14,%rcx
shl    %cl,%r15
mov    %rcx,%r10
or     %r15,%r11
mov    %r12,%rcx
shl    %cl,%r11
or     %r11,%rdi
add    %r10d,%edx
add    %ecx,%edx
mov    $0x1,%r12d
xor    %r11d,%r11d
jmpq   e7e9 <F_0_714+0x3117>
mov    %rcx,%r15
lea    0x38(%rdx),%ecx
mov    %rdi,%r8
shr    %cl,%r8
mov    %r8b,0x0(%r13)
lea    0x1(%r13),%rcx
cmp    $0xff,%r8b
je     ebf0 <F_0_714+0x351e>
mov    %rcx,%r8
jmpq   ebf7 <F_0_714+0x3525>
movb   $0x0,(%rcx)
lea    0x2(%r13),%r8
lea    0x30(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     ec19 <F_0_714+0x3547>
mov    %rcx,%r8
jmpq   ec20 <F_0_714+0x354e>
movb   $0x0,(%rcx)
add    $0x2,%r8
lea    0x28(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     ec42 <F_0_714+0x3570>
mov    %rcx,%r8
jmpq   ec49 <F_0_714+0x3577>
movb   $0x0,(%rcx)
add    $0x2,%r8
lea    -0x20(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %rcx,%rdx
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     ec7b <F_0_714+0x35a9>
mov    %rcx,%r13
mov    %r15,%rcx
mov    %rdi,%r15
mov    -0x120(%rbp),%r8
jmpq   dfd6 <F_0_714+0x2904>
movb   $0x0,(%rcx)
lea    0x2(%r8),%r13
mov    %r15,%rcx
mov    %rdi,%r15
mov    -0x120(%rbp),%r8
jmpq   dd80 <F_0_714+0x26ae>
add    $0x1,%r11d
movswq 0x1e(%rsi),%r10
test   %r10w,%r10w
je     ec94 <F_0_714+0x35c2>
mov    %r10,%r14
sar    $0x1f,%r14d
mov    %r14,-0x88(%rbp)
mov    %r14,%rcx
xor    %r10d,%ecx
sub    %r14d,%ecx
movslq %ecx,%rcx
movzbl (%rcx,%rax,1),%ecx
mov    %rcx,-0x128(%rbp)
jmpq   eda9 <F_0_714+0x36d7>
cmp    $0x2f,%edx
jle    eb3e <F_0_714+0x346c>
lea    0x38(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    eaa0 <F_0_714+0x33ce>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    0x30(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    eabf <F_0_714+0x33ed>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
lea    0x28(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    eade <F_0_714+0x340c>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    0x20(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    eafd <F_0_714+0x342b>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
lea    0x18(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    eb1c <F_0_714+0x344a>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    -0x30(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %rcx,%rdx
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    eb3e <F_0_714+0x346c>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
mov    %rbx,%rcx
shl    %cl,%rdi
mov    %rcx,%rbx
or     %r9,%rdi
add    %ebx,%edx
add    $0xfffffff0,%r11d
cmp    $0xf,%r11d
jg     ea78 <F_0_714+0x33a6>
shl    $0x4,%r11d
mov    -0x128(%rbp),%rcx
add    %ecx,%r11d
movslq %r11d,%r11
movslq (%r8,%r11,4),%r14
movsbq 0x400(%r8,%r11,1),%r11
cmp    $0x1f,%edx
jg     ee20 <F_0_714+0x374e>
mov    %rdi,%r15
shl    %cl,%r12
lea    -0x1(%r12),%edi
mov    -0x90(%rbp),%r12
add    %r12d,%r10d
and    %r10d,%edi
movslq %edi,%rdi
mov    %r11,%r10
mov    %rcx,%r11
mov    %r10,%rcx
shl    %cl,%r15
mov    %rcx,%r10
or     %r15,%r14
mov    %r11,%rcx
shl    %cl,%r14
or     %r14,%rdi
add    %r10d,%edx
add    %ecx,%edx
mov    $0x1,%r12d
xor    %r11d,%r11d
jmpq   ea3f <F_0_714+0x336d>
mov    %rcx,%r15
lea    0x38(%rdx),%ecx
mov    %rdi,%r8
shr    %cl,%r8
mov    %r8b,0x0(%r13)
lea    0x1(%r13),%rcx
cmp    $0xff,%r8b
je     ee46 <F_0_714+0x3774>
mov    %rcx,%r8
jmpq   ee4d <F_0_714+0x377b>
movb   $0x0,(%rcx)
lea    0x2(%r13),%r8
lea    0x30(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     ee6f <F_0_714+0x379d>
mov    %rcx,%r8
jmpq   ee76 <F_0_714+0x37a4>
movb   $0x0,(%rcx)
add    $0x2,%r8
lea    0x28(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     ee98 <F_0_714+0x37c6>
mov    %rcx,%r8
jmpq   ee9f <F_0_714+0x37cd>
movb   $0x0,(%rcx)
add    $0x2,%r8
lea    -0x20(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %rcx,%rdx
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     eed1 <F_0_714+0x37ff>
mov    %rcx,%r13
mov    %r15,%rcx
mov    %rdi,%r15
mov    -0x120(%rbp),%r8
jmpq   e22c <F_0_714+0x2b5a>
movb   $0x0,(%rcx)
lea    0x2(%r8),%r13
mov    %r15,%rcx
mov    %rdi,%r15
mov    -0x120(%rbp),%r8
jmpq   dfd6 <F_0_714+0x2904>
add    $0x1,%r11d
movswq 0x2e(%rsi),%r10
test   %r10w,%r10w
je     eeea <F_0_714+0x3818>
mov    %r10,%r14
sar    $0x1f,%r14d
mov    %r14,-0x88(%rbp)
mov    %r14,%rcx
xor    %r10d,%ecx
sub    %r14d,%ecx
movslq %ecx,%rcx
movzbl (%rcx,%rax,1),%ecx
mov    %rcx,-0x128(%rbp)
jmpq   effc <F_0_714+0x392a>
cmp    $0x2f,%edx
jle    ed97 <F_0_714+0x36c5>
lea    0x38(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    ecf9 <F_0_714+0x3627>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    0x30(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    ed18 <F_0_714+0x3646>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
lea    0x28(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    ed37 <F_0_714+0x3665>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    0x20(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    ed56 <F_0_714+0x3684>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
lea    0x18(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    ed75 <F_0_714+0x36a3>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    -0x30(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %rcx,%rdx
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    ed97 <F_0_714+0x36c5>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
mov    %rbx,%rcx
shl    %cl,%rdi
mov    %rcx,%rbx
or     %r9,%rdi
add    %ebx,%edx
add    $0xfffffff0,%r11d
cmp    $0xf,%r11d
jg     ecd1 <F_0_714+0x35ff>
shl    $0x4,%r11d
mov    -0x128(%rbp),%rcx
add    %ecx,%r11d
movslq %r11d,%r14
movslq (%r8,%r14,4),%r11
movsbq 0x400(%r8,%r14,1),%r14
cmp    $0x1f,%edx
jg     f073 <F_0_714+0x39a1>
mov    %rdi,%r15
shl    %cl,%r12
lea    -0x1(%r12),%edi
mov    -0x88(%rbp),%r12
add    %r12d,%r10d
and    %r10d,%edi
movslq %edi,%rdi
mov    %rcx,%r12
mov    %r14,%rcx
shl    %cl,%r15
mov    %rcx,%r10
or     %r15,%r11
mov    %r12,%rcx
shl    %cl,%r11
or     %r11,%rdi
add    %r10d,%edx
add    %ecx,%edx
mov    $0x1,%r12d
xor    %r11d,%r11d
jmpq   ec98 <F_0_714+0x35c6>
mov    %rcx,%r15
lea    0x38(%rdx),%ecx
mov    %rdi,%r8
shr    %cl,%r8
mov    %r8b,0x0(%r13)
lea    0x1(%r13),%rcx
cmp    $0xff,%r8b
je     f099 <F_0_714+0x39c7>
mov    %rcx,%r8
jmpq   f0a0 <F_0_714+0x39ce>
movb   $0x0,(%rcx)
lea    0x2(%r13),%r8
lea    0x30(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     f0c2 <F_0_714+0x39f0>
mov    %rcx,%r8
jmpq   f0c9 <F_0_714+0x39f7>
movb   $0x0,(%rcx)
add    $0x2,%r8
lea    0x28(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     f0eb <F_0_714+0x3a19>
mov    %rcx,%r8
jmpq   f0f2 <F_0_714+0x3a20>
movb   $0x0,(%rcx)
add    $0x2,%r8
lea    -0x20(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %rcx,%rdx
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     f124 <F_0_714+0x3a52>
mov    %rcx,%r13
mov    %r15,%rcx
mov    %rdi,%r15
mov    -0x120(%rbp),%r8
jmpq   e482 <F_0_714+0x2db0>
movb   $0x0,(%rcx)
lea    0x2(%r8),%r13
mov    %r15,%rcx
mov    %rdi,%r15
mov    -0x120(%rbp),%r8
jmpq   e22c <F_0_714+0x2b5a>
add    $0x1,%r11d
movswq 0x3c(%rsi),%r10
test   %r10w,%r10w
je     f13d <F_0_714+0x3a6b>
mov    %r10,%r14
sar    $0x1f,%r14d
mov    %r14,-0x80(%rbp)
mov    %r14,%rcx
xor    %r10d,%ecx
sub    %r14d,%ecx
movslq %ecx,%rcx
movzbl (%rcx,%rax,1),%ecx
mov    %rcx,-0x128(%rbp)
jmpq   f24f <F_0_714+0x3b7d>
cmp    $0x2f,%edx
jle    efea <F_0_714+0x3918>
lea    0x38(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    ef4c <F_0_714+0x387a>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    0x30(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    ef6b <F_0_714+0x3899>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
lea    0x28(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    ef8a <F_0_714+0x38b8>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    0x20(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    efa9 <F_0_714+0x38d7>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
lea    0x18(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    efc8 <F_0_714+0x38f6>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    -0x30(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %rcx,%rdx
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    efea <F_0_714+0x3918>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
mov    %rbx,%rcx
shl    %cl,%rdi
mov    %rcx,%rbx
or     %r9,%rdi
add    %ebx,%edx
add    $0xfffffff0,%r11d
cmp    $0xf,%r11d
jg     ef24 <F_0_714+0x3852>
shl    $0x4,%r11d
mov    -0x128(%rbp),%rcx
add    %ecx,%r11d
movslq %r11d,%r14
movslq (%r8,%r14,4),%r11
movsbq 0x400(%r8,%r14,1),%r14
cmp    $0x1f,%edx
jg     f2c3 <F_0_714+0x3bf1>
mov    %rdi,%r15
shl    %cl,%r12
lea    -0x1(%r12),%edi
mov    -0x88(%rbp),%r12
add    %r12d,%r10d
and    %r10d,%edi
movslq %edi,%rdi
mov    %rcx,%r12
mov    %r14,%rcx
shl    %cl,%r15
mov    %rcx,%r10
or     %r15,%r11
mov    %r12,%rcx
shl    %cl,%r11
or     %r11,%rdi
add    %r10d,%edx
add    %ecx,%edx
mov    $0x1,%r12d
xor    %r11d,%r11d
jmpq   eeee <F_0_714+0x381c>
mov    %rcx,%r15
lea    0x38(%rdx),%ecx
mov    %rdi,%r8
shr    %cl,%r8
mov    %r8b,0x0(%r13)
lea    0x1(%r13),%rcx
cmp    $0xff,%r8b
je     f2e9 <F_0_714+0x3c17>
mov    %rcx,%r8
jmpq   f2f0 <F_0_714+0x3c1e>
movb   $0x0,(%rcx)
lea    0x2(%r13),%r8
lea    0x30(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     f312 <F_0_714+0x3c40>
mov    %rcx,%r8
jmpq   f319 <F_0_714+0x3c47>
movb   $0x0,(%rcx)
add    $0x2,%r8
lea    0x28(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     f33b <F_0_714+0x3c69>
mov    %rcx,%r8
jmpq   f342 <F_0_714+0x3c70>
movb   $0x0,(%rcx)
add    $0x2,%r8
lea    -0x20(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %rcx,%rdx
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     f374 <F_0_714+0x3ca2>
mov    %rcx,%r13
mov    %r15,%rcx
mov    %rdi,%r15
mov    -0x120(%rbp),%r8
jmpq   e6d8 <F_0_714+0x3006>
movb   $0x0,(%rcx)
lea    0x2(%r8),%r13
mov    %r15,%rcx
mov    %rdi,%r15
mov    -0x120(%rbp),%r8
jmpq   e482 <F_0_714+0x2db0>
add    $0x1,%r11d
movswq 0x4a(%rsi),%r10
test   %r10w,%r10w
je     f38d <F_0_714+0x3cbb>
mov    %r10,%r14
sar    $0x1f,%r14d
mov    %r14,-0x80(%rbp)
mov    %r14,%rcx
xor    %r10d,%ecx
sub    %r14d,%ecx
movslq %ecx,%rcx
movzbl (%rcx,%rax,1),%ecx
mov    %rcx,-0x128(%rbp)
jmpq   f49f <F_0_714+0x3dcd>
cmp    $0x2f,%edx
jle    f23d <F_0_714+0x3b6b>
lea    0x38(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    f19f <F_0_714+0x3acd>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    0x30(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    f1be <F_0_714+0x3aec>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
lea    0x28(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    f1dd <F_0_714+0x3b0b>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    0x20(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    f1fc <F_0_714+0x3b2a>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
lea    0x18(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    f21b <F_0_714+0x3b49>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    -0x30(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %rcx,%rdx
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    f23d <F_0_714+0x3b6b>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
mov    %rbx,%rcx
shl    %cl,%rdi
mov    %rcx,%rbx
or     %r9,%rdi
add    %ebx,%edx
add    $0xfffffff0,%r11d
cmp    $0xf,%r11d
jg     f177 <F_0_714+0x3aa5>
shl    $0x4,%r11d
mov    -0x128(%rbp),%rcx
add    %ecx,%r11d
movslq %r11d,%r14
movslq (%r8,%r14,4),%r11
movsbq 0x400(%r8,%r14,1),%r14
cmp    $0x1f,%edx
jg     f513 <F_0_714+0x3e41>
mov    %rdi,%r15
shl    %cl,%r12
lea    -0x1(%r12),%edi
mov    -0x80(%rbp),%r12
add    %r12d,%r10d
and    %r10d,%edi
movslq %edi,%rdi
mov    %rcx,%r12
mov    %r14,%rcx
shl    %cl,%r15
mov    %rcx,%r10
or     %r15,%r11
mov    %r12,%rcx
shl    %cl,%r11
or     %r11,%rdi
add    %r10d,%edx
add    %ecx,%edx
mov    $0x1,%r12d
xor    %r11d,%r11d
jmpq   f141 <F_0_714+0x3a6f>
mov    %rcx,%r15
lea    0x38(%rdx),%ecx
mov    %rdi,%r8
shr    %cl,%r8
mov    %r8b,0x0(%r13)
lea    0x1(%r13),%rcx
cmp    $0xff,%r8b
je     f539 <F_0_714+0x3e67>
mov    %rcx,%r8
jmpq   f540 <F_0_714+0x3e6e>
movb   $0x0,(%rcx)
lea    0x2(%r13),%r8
lea    0x30(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     f562 <F_0_714+0x3e90>
mov    %rcx,%r8
jmpq   f569 <F_0_714+0x3e97>
movb   $0x0,(%rcx)
add    $0x2,%r8
lea    0x28(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     f58b <F_0_714+0x3eb9>
mov    %rcx,%r8
jmpq   f592 <F_0_714+0x3ec0>
movb   $0x0,(%rcx)
add    $0x2,%r8
lea    -0x20(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %rcx,%rdx
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     f5c4 <F_0_714+0x3ef2>
mov    %rcx,%r13
mov    %r15,%rcx
mov    %rdi,%r15
mov    -0x120(%rbp),%r8
jmpq   e92e <F_0_714+0x325c>
movb   $0x0,(%rcx)
lea    0x2(%r8),%r13
mov    %r15,%rcx
mov    %rdi,%r15
mov    -0x120(%rbp),%r8
jmpq   e6d8 <F_0_714+0x3006>
add    $0x1,%r11d
movswq 0x58(%rsi),%r10
test   %r10w,%r10w
je     f5dd <F_0_714+0x3f0b>
mov    %r10,%r14
sar    $0x1f,%r14d
mov    %r14,-0x78(%rbp)
mov    %r14,%rcx
xor    %r10d,%ecx
sub    %r14d,%ecx
movslq %ecx,%rcx
movzbl (%rcx,%rax,1),%ecx
mov    %rcx,-0x128(%rbp)
jmpq   f6ef <F_0_714+0x401d>
cmp    $0x2f,%edx
jle    f48d <F_0_714+0x3dbb>
lea    0x38(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    f3ef <F_0_714+0x3d1d>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    0x30(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    f40e <F_0_714+0x3d3c>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
lea    0x28(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    f42d <F_0_714+0x3d5b>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    0x20(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    f44c <F_0_714+0x3d7a>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
lea    0x18(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    f46b <F_0_714+0x3d99>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    -0x30(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %rcx,%rdx
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    f48d <F_0_714+0x3dbb>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
mov    %rbx,%rcx
shl    %cl,%rdi
mov    %rcx,%rbx
or     %r9,%rdi
add    %ebx,%edx
add    $0xfffffff0,%r11d
cmp    $0xf,%r11d
jg     f3c7 <F_0_714+0x3cf5>
shl    $0x4,%r11d
mov    -0x128(%rbp),%rcx
add    %ecx,%r11d
movslq %r11d,%r14
movslq (%r8,%r14,4),%r11
movsbq 0x400(%r8,%r14,1),%r14
cmp    $0x1f,%edx
jg     f763 <F_0_714+0x4091>
mov    %rdi,%r15
shl    %cl,%r12
lea    -0x1(%r12),%edi
mov    -0x80(%rbp),%r12
add    %r12d,%r10d
and    %r10d,%edi
movslq %edi,%rdi
mov    %rcx,%r12
mov    %r14,%rcx
shl    %cl,%r15
mov    %rcx,%r10
or     %r15,%r11
mov    %r12,%rcx
shl    %cl,%r11
or     %r11,%rdi
add    %r10d,%edx
add    %ecx,%edx
mov    $0x1,%r12d
xor    %r11d,%r11d
jmpq   f391 <F_0_714+0x3cbf>
mov    %rcx,%r15
lea    0x38(%rdx),%ecx
mov    %rdi,%r8
shr    %cl,%r8
mov    %r8b,0x0(%r13)
lea    0x1(%r13),%rcx
cmp    $0xff,%r8b
je     f789 <F_0_714+0x40b7>
mov    %rcx,%r8
jmpq   f790 <F_0_714+0x40be>
movb   $0x0,(%rcx)
lea    0x2(%r13),%r8
lea    0x30(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     f7b2 <F_0_714+0x40e0>
mov    %rcx,%r8
jmpq   f7b9 <F_0_714+0x40e7>
movb   $0x0,(%rcx)
add    $0x2,%r8
lea    0x28(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     f7db <F_0_714+0x4109>
mov    %rcx,%r8
jmpq   f7e2 <F_0_714+0x4110>
movb   $0x0,(%rcx)
add    $0x2,%r8
lea    -0x20(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %rcx,%rdx
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     f814 <F_0_714+0x4142>
mov    %rcx,%r13
mov    %r15,%rcx
mov    %rdi,%r15
mov    -0x120(%rbp),%r8
jmpq   eb84 <F_0_714+0x34b2>
movb   $0x0,(%rcx)
lea    0x2(%r8),%r13
mov    %r15,%rcx
mov    %rdi,%r15
mov    -0x120(%rbp),%r8
jmpq   e92e <F_0_714+0x325c>
add    $0x1,%r11d
movswq 0x66(%rsi),%r10
test   %r10w,%r10w
je     f82d <F_0_714+0x415b>
mov    %r10,%r14
sar    $0x1f,%r14d
mov    %r14,-0x78(%rbp)
mov    %r14,%rcx
xor    %r10d,%ecx
sub    %r14d,%ecx
movslq %ecx,%rcx
movzbl (%rcx,%rax,1),%ecx
mov    %rcx,-0x128(%rbp)
jmpq   f93f <F_0_714+0x426d>
cmp    $0x2f,%edx
jle    f6dd <F_0_714+0x400b>
lea    0x38(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    f63f <F_0_714+0x3f6d>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    0x30(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    f65e <F_0_714+0x3f8c>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
lea    0x28(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    f67d <F_0_714+0x3fab>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    0x20(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    f69c <F_0_714+0x3fca>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
lea    0x18(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    f6bb <F_0_714+0x3fe9>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    -0x30(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %rcx,%rdx
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    f6dd <F_0_714+0x400b>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
mov    %rbx,%rcx
shl    %cl,%rdi
mov    %rcx,%rbx
or     %r9,%rdi
add    %ebx,%edx
add    $0xfffffff0,%r11d
cmp    $0xf,%r11d
jg     f617 <F_0_714+0x3f45>
shl    $0x4,%r11d
mov    -0x128(%rbp),%rcx
add    %ecx,%r11d
movslq %r11d,%r14
movslq (%r8,%r14,4),%r11
movsbq 0x400(%r8,%r14,1),%r14
cmp    $0x1f,%edx
jg     f9b3 <F_0_714+0x42e1>
mov    %rdi,%r15
shl    %cl,%r12
lea    -0x1(%r12),%edi
mov    -0x78(%rbp),%r12
add    %r12d,%r10d
and    %r10d,%edi
movslq %edi,%rdi
mov    %rcx,%r12
mov    %r14,%rcx
shl    %cl,%r15
mov    %rcx,%r10
or     %r15,%r11
mov    %r12,%rcx
shl    %cl,%r11
or     %r11,%rdi
add    %r10d,%edx
add    %ecx,%edx
mov    $0x1,%r12d
xor    %r11d,%r11d
jmpq   f5e1 <F_0_714+0x3f0f>
mov    %rcx,%r15
lea    0x38(%rdx),%ecx
mov    %rdi,%r8
shr    %cl,%r8
mov    %r8b,0x0(%r13)
lea    0x1(%r13),%rcx
cmp    $0xff,%r8b
je     f9d9 <F_0_714+0x4307>
mov    %rcx,%r8
jmpq   f9e0 <F_0_714+0x430e>
movb   $0x0,(%rcx)
lea    0x2(%r13),%r8
lea    0x30(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     fa02 <F_0_714+0x4330>
mov    %rcx,%r8
jmpq   fa09 <F_0_714+0x4337>
movb   $0x0,(%rcx)
add    $0x2,%r8
lea    0x28(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     fa2b <F_0_714+0x4359>
mov    %rcx,%r8
jmpq   fa32 <F_0_714+0x4360>
movb   $0x0,(%rcx)
add    $0x2,%r8
lea    -0x20(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %rcx,%rdx
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     fa64 <F_0_714+0x4392>
mov    %rcx,%r13
mov    %r15,%rcx
mov    %rdi,%r15
mov    -0x120(%rbp),%r8
jmpq   eddd <F_0_714+0x370b>
movb   $0x0,(%rcx)
lea    0x2(%r8),%r13
mov    %r15,%rcx
mov    %rdi,%r15
mov    -0x120(%rbp),%r8
jmpq   eb84 <F_0_714+0x34b2>
add    $0x1,%r11d
movswq 0x74(%rsi),%r10
test   %r10w,%r10w
je     fa7d <F_0_714+0x43ab>
mov    %r10,%r14
sar    $0x1f,%r14d
mov    %r14,-0x70(%rbp)
mov    %r14,%rcx
xor    %r10d,%ecx
sub    %r14d,%ecx
movslq %ecx,%rcx
movzbl (%rcx,%rax,1),%ecx
mov    %rcx,-0x128(%rbp)
jmpq   fb8f <F_0_714+0x44bd>
cmp    $0x2f,%edx
jle    f92d <F_0_714+0x425b>
lea    0x38(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    f88f <F_0_714+0x41bd>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    0x30(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    f8ae <F_0_714+0x41dc>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
lea    0x28(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    f8cd <F_0_714+0x41fb>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    0x20(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    f8ec <F_0_714+0x421a>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
lea    0x18(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    f90b <F_0_714+0x4239>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    -0x30(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %rcx,%rdx
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    f92d <F_0_714+0x425b>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
mov    %rbx,%rcx
shl    %cl,%rdi
mov    %rcx,%rbx
or     %r9,%rdi
add    %ebx,%edx
add    $0xfffffff0,%r11d
cmp    $0xf,%r11d
jg     f867 <F_0_714+0x4195>
shl    $0x4,%r11d
mov    -0x128(%rbp),%rcx
add    %ecx,%r11d
movslq %r11d,%r14
movslq (%r8,%r14,4),%r11
movsbq 0x400(%r8,%r14,1),%r14
cmp    $0x1f,%edx
jg     fc03 <F_0_714+0x4531>
mov    %rdi,%r15
shl    %cl,%r12
lea    -0x1(%r12),%edi
mov    -0x78(%rbp),%r12
add    %r12d,%r10d
and    %r10d,%edi
movslq %edi,%rdi
mov    %rcx,%r12
mov    %r14,%rcx
shl    %cl,%r15
mov    %rcx,%r10
or     %r15,%r11
mov    %r12,%rcx
shl    %cl,%r11
or     %r11,%rdi
add    %r10d,%edx
add    %ecx,%edx
mov    $0x1,%r12d
xor    %r11d,%r11d
jmpq   f831 <F_0_714+0x415f>
mov    %rcx,%r15
lea    0x38(%rdx),%ecx
mov    %rdi,%r8
shr    %cl,%r8
mov    %r8b,0x0(%r13)
lea    0x1(%r13),%rcx
cmp    $0xff,%r8b
je     fc29 <F_0_714+0x4557>
mov    %rcx,%r8
jmpq   fc30 <F_0_714+0x455e>
movb   $0x0,(%rcx)
lea    0x2(%r13),%r8
lea    0x30(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     fc52 <F_0_714+0x4580>
mov    %rcx,%r8
jmpq   fc59 <F_0_714+0x4587>
movb   $0x0,(%rcx)
add    $0x2,%r8
lea    0x28(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     fc7b <F_0_714+0x45a9>
mov    %rcx,%r8
jmpq   fc82 <F_0_714+0x45b0>
movb   $0x0,(%rcx)
add    $0x2,%r8
lea    -0x20(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %rcx,%rdx
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     fcb4 <F_0_714+0x45e2>
mov    %rcx,%r13
mov    %r15,%rcx
mov    %rdi,%r15
mov    -0x120(%rbp),%r8
jmpq   f030 <F_0_714+0x395e>
movb   $0x0,(%rcx)
lea    0x2(%r8),%r13
mov    %r15,%rcx
mov    %rdi,%r15
mov    -0x120(%rbp),%r8
jmpq   eddd <F_0_714+0x370b>
add    $0x1,%r11d
movswq 0x76(%rsi),%r10
test   %r10w,%r10w
je     fccd <F_0_714+0x45fb>
mov    %r10,%r14
sar    $0x1f,%r14d
mov    %r14,-0x70(%rbp)
mov    %r14,%rcx
xor    %r10d,%ecx
sub    %r14d,%ecx
movslq %ecx,%rcx
movzbl (%rcx,%rax,1),%ecx
mov    %rcx,-0x128(%rbp)
jmpq   fddf <F_0_714+0x470d>
cmp    $0x2f,%edx
jle    fb7d <F_0_714+0x44ab>
lea    0x38(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    fadf <F_0_714+0x440d>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    0x30(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    fafe <F_0_714+0x442c>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
lea    0x28(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    fb1d <F_0_714+0x444b>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    0x20(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    fb3c <F_0_714+0x446a>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
lea    0x18(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    fb5b <F_0_714+0x4489>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    -0x30(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %rcx,%rdx
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    fb7d <F_0_714+0x44ab>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
mov    %rbx,%rcx
shl    %cl,%rdi
mov    %rcx,%rbx
or     %r9,%rdi
add    %ebx,%edx
add    $0xfffffff0,%r11d
cmp    $0xf,%r11d
jg     fab7 <F_0_714+0x43e5>
shl    $0x4,%r11d
mov    -0x128(%rbp),%rcx
add    %ecx,%r11d
movslq %r11d,%r14
movslq (%r8,%r14,4),%r11
movsbq 0x400(%r8,%r14,1),%r14
cmp    $0x1f,%edx
jg     fe53 <F_0_714+0x4781>
mov    %rdi,%r15
shl    %cl,%r12
lea    -0x1(%r12),%edi
mov    -0x70(%rbp),%r12
add    %r12d,%r10d
and    %r10d,%edi
movslq %edi,%rdi
mov    %rcx,%r12
mov    %r14,%rcx
shl    %cl,%r15
mov    %rcx,%r10
or     %r15,%r11
mov    %r12,%rcx
shl    %cl,%r11
or     %r11,%rdi
add    %r10d,%edx
add    %ecx,%edx
mov    $0x1,%r12d
xor    %r11d,%r11d
jmpq   fa81 <F_0_714+0x43af>
mov    %rcx,%r15
lea    0x38(%rdx),%ecx
mov    %rdi,%r8
shr    %cl,%r8
mov    %r8b,0x0(%r13)
lea    0x1(%r13),%rcx
cmp    $0xff,%r8b
je     fe79 <F_0_714+0x47a7>
mov    %rcx,%r8
jmpq   fe80 <F_0_714+0x47ae>
movb   $0x0,(%rcx)
lea    0x2(%r13),%r8
lea    0x30(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     fea2 <F_0_714+0x47d0>
mov    %rcx,%r8
jmpq   fea9 <F_0_714+0x47d7>
movb   $0x0,(%rcx)
add    $0x2,%r8
lea    0x28(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     fecb <F_0_714+0x47f9>
mov    %rcx,%r8
jmpq   fed2 <F_0_714+0x4800>
movb   $0x0,(%rcx)
add    $0x2,%r8
lea    -0x20(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %rcx,%rdx
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     ff04 <F_0_714+0x4832>
mov    %rcx,%r13
mov    %r15,%rcx
mov    %rdi,%r15
mov    -0x120(%rbp),%r8
jmpq   f283 <F_0_714+0x3bb1>
movb   $0x0,(%rcx)
lea    0x2(%r8),%r13
mov    %r15,%rcx
mov    %rdi,%r15
mov    -0x120(%rbp),%r8
jmpq   f030 <F_0_714+0x395e>
add    $0x1,%r11d
movswq 0x68(%rsi),%r10
test   %r10w,%r10w
je     ff1d <F_0_714+0x484b>
mov    %r10,%r14
sar    $0x1f,%r14d
mov    %r14,-0x68(%rbp)
mov    %r14,%rcx
xor    %r10d,%ecx
sub    %r14d,%ecx
movslq %ecx,%rcx
movzbl (%rcx,%rax,1),%ecx
mov    %rcx,-0x128(%rbp)
jmpq   1002f <F_0_714+0x495d>
cmp    $0x2f,%edx
jle    fdcd <F_0_714+0x46fb>
lea    0x38(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    fd2f <F_0_714+0x465d>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    0x30(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    fd4e <F_0_714+0x467c>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
lea    0x28(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    fd6d <F_0_714+0x469b>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    0x20(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    fd8c <F_0_714+0x46ba>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
lea    0x18(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    fdab <F_0_714+0x46d9>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    -0x30(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %rcx,%rdx
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    fdcd <F_0_714+0x46fb>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
mov    %rbx,%rcx
shl    %cl,%rdi
mov    %rcx,%rbx
or     %r9,%rdi
add    %ebx,%edx
add    $0xfffffff0,%r11d
cmp    $0xf,%r11d
jg     fd07 <F_0_714+0x4635>
shl    $0x4,%r11d
mov    -0x128(%rbp),%rcx
add    %ecx,%r11d
movslq %r11d,%r14
movslq (%r8,%r14,4),%r11
movsbq 0x400(%r8,%r14,1),%r14
cmp    $0x1f,%edx
jg     100a3 <F_0_714+0x49d1>
mov    %rdi,%r15
shl    %cl,%r12
lea    -0x1(%r12),%edi
mov    -0x70(%rbp),%r12
add    %r12d,%r10d
and    %r10d,%edi
movslq %edi,%rdi
mov    %rcx,%r12
mov    %r14,%rcx
shl    %cl,%r15
mov    %rcx,%r10
or     %r15,%r11
mov    %r12,%rcx
shl    %cl,%r11
or     %r11,%rdi
add    %r10d,%edx
add    %ecx,%edx
mov    $0x1,%r12d
xor    %r11d,%r11d
jmpq   fcd1 <F_0_714+0x45ff>
mov    %rcx,%r15
lea    0x38(%rdx),%ecx
mov    %rdi,%r8
shr    %cl,%r8
mov    %r8b,0x0(%r13)
lea    0x1(%r13),%rcx
cmp    $0xff,%r8b
je     100c9 <F_0_714+0x49f7>
mov    %rcx,%r8
jmpq   100d0 <F_0_714+0x49fe>
movb   $0x0,(%rcx)
lea    0x2(%r13),%r8
lea    0x30(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     100f2 <F_0_714+0x4a20>
mov    %rcx,%r8
jmpq   100f9 <F_0_714+0x4a27>
movb   $0x0,(%rcx)
add    $0x2,%r8
lea    0x28(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     1011b <F_0_714+0x4a49>
mov    %rcx,%r8
jmpq   10122 <F_0_714+0x4a50>
movb   $0x0,(%rcx)
add    $0x2,%r8
lea    -0x20(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %rcx,%rdx
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     10154 <F_0_714+0x4a82>
mov    %rcx,%r13
mov    %r15,%rcx
mov    %rdi,%r15
mov    -0x120(%rbp),%r8
jmpq   f4d3 <F_0_714+0x3e01>
movb   $0x0,(%rcx)
lea    0x2(%r8),%r13
mov    %r15,%rcx
mov    %rdi,%r15
mov    -0x120(%rbp),%r8
jmpq   f283 <F_0_714+0x3bb1>
add    $0x1,%r11d
movswq 0x5a(%rsi),%r10
test   %r10w,%r10w
je     1016d <F_0_714+0x4a9b>
mov    %r10,%r14
sar    $0x1f,%r14d
mov    %r14,-0x68(%rbp)
mov    %r14,%rcx
xor    %r10d,%ecx
sub    %r14d,%ecx
movslq %ecx,%rcx
movzbl (%rcx,%rax,1),%ecx
mov    %rcx,-0x128(%rbp)
jmpq   1027f <F_0_714+0x4bad>
cmp    $0x2f,%edx
jle    1001d <F_0_714+0x494b>
lea    0x38(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    ff7f <F_0_714+0x48ad>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    0x30(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    ff9e <F_0_714+0x48cc>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
lea    0x28(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    ffbd <F_0_714+0x48eb>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    0x20(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    ffdc <F_0_714+0x490a>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
lea    0x18(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    fffb <F_0_714+0x4929>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    -0x30(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %rcx,%rdx
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    1001d <F_0_714+0x494b>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
mov    %rbx,%rcx
shl    %cl,%rdi
mov    %rcx,%rbx
or     %r9,%rdi
add    %ebx,%edx
add    $0xfffffff0,%r11d
cmp    $0xf,%r11d
jg     ff57 <F_0_714+0x4885>
shl    $0x4,%r11d
mov    -0x128(%rbp),%rcx
add    %ecx,%r11d
movslq %r11d,%r14
movslq (%r8,%r14,4),%r11
movsbq 0x400(%r8,%r14,1),%r14
cmp    $0x1f,%edx
jg     102f3 <F_0_714+0x4c21>
mov    %rdi,%r15
shl    %cl,%r12
lea    -0x1(%r12),%edi
mov    -0x68(%rbp),%r12
add    %r12d,%r10d
and    %r10d,%edi
movslq %edi,%rdi
mov    %rcx,%r12
mov    %r14,%rcx
shl    %cl,%r15
mov    %rcx,%r10
or     %r15,%r11
mov    %r12,%rcx
shl    %cl,%r11
or     %r11,%rdi
add    %r10d,%edx
add    %ecx,%edx
mov    $0x1,%r12d
xor    %r11d,%r11d
jmpq   ff21 <F_0_714+0x484f>
mov    %rcx,%r15
lea    0x38(%rdx),%ecx
mov    %rdi,%r8
shr    %cl,%r8
mov    %r8b,0x0(%r13)
lea    0x1(%r13),%rcx
cmp    $0xff,%r8b
je     10319 <F_0_714+0x4c47>
mov    %rcx,%r8
jmpq   10320 <F_0_714+0x4c4e>
movb   $0x0,(%rcx)
lea    0x2(%r13),%r8
lea    0x30(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     10342 <F_0_714+0x4c70>
mov    %rcx,%r8
jmpq   10349 <F_0_714+0x4c77>
movb   $0x0,(%rcx)
add    $0x2,%r8
lea    0x28(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     1036b <F_0_714+0x4c99>
mov    %rcx,%r8
jmpq   10372 <F_0_714+0x4ca0>
movb   $0x0,(%rcx)
add    $0x2,%r8
lea    -0x20(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %rcx,%rdx
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     103a4 <F_0_714+0x4cd2>
mov    %rcx,%r13
mov    %r15,%rcx
mov    %rdi,%r15
mov    -0x120(%rbp),%r8
jmpq   f723 <F_0_714+0x4051>
movb   $0x0,(%rcx)
lea    0x2(%r8),%r13
mov    %r15,%rcx
mov    %rdi,%r15
mov    -0x120(%rbp),%r8
jmpq   f4d3 <F_0_714+0x3e01>
add    $0x1,%r11d
movswq 0x4c(%rsi),%r10
test   %r10w,%r10w
je     103bd <F_0_714+0x4ceb>
mov    %r10,%r14
sar    $0x1f,%r14d
mov    %r14,-0x60(%rbp)
mov    %r14,%rcx
xor    %r10d,%ecx
sub    %r14d,%ecx
movslq %ecx,%rcx
movzbl (%rcx,%rax,1),%ecx
mov    %rcx,-0x128(%rbp)
jmpq   104cf <F_0_714+0x4dfd>
cmp    $0x2f,%edx
jle    1026d <F_0_714+0x4b9b>
lea    0x38(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    101cf <F_0_714+0x4afd>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    0x30(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    101ee <F_0_714+0x4b1c>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
lea    0x28(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    1020d <F_0_714+0x4b3b>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    0x20(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    1022c <F_0_714+0x4b5a>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
lea    0x18(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    1024b <F_0_714+0x4b79>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    -0x30(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %rcx,%rdx
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    1026d <F_0_714+0x4b9b>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
mov    %rbx,%rcx
shl    %cl,%rdi
mov    %rcx,%rbx
or     %r9,%rdi
add    %ebx,%edx
add    $0xfffffff0,%r11d
cmp    $0xf,%r11d
jg     101a7 <F_0_714+0x4ad5>
shl    $0x4,%r11d
mov    -0x128(%rbp),%rcx
add    %ecx,%r11d
movslq %r11d,%r14
movslq (%r8,%r14,4),%r11
movsbq 0x400(%r8,%r14,1),%r14
cmp    $0x1f,%edx
jg     10543 <F_0_714+0x4e71>
mov    %rdi,%r15
shl    %cl,%r12
lea    -0x1(%r12),%edi
mov    -0x68(%rbp),%r12
add    %r12d,%r10d
and    %r10d,%edi
movslq %edi,%rdi
mov    %rcx,%r12
mov    %r14,%rcx
shl    %cl,%r15
mov    %rcx,%r10
or     %r15,%r11
mov    %r12,%rcx
shl    %cl,%r11
or     %r11,%rdi
add    %r10d,%edx
add    %ecx,%edx
mov    $0x1,%r12d
xor    %r11d,%r11d
jmpq   10171 <F_0_714+0x4a9f>
mov    %rcx,%r15
lea    0x38(%rdx),%ecx
mov    %rdi,%r8
shr    %cl,%r8
mov    %r8b,0x0(%r13)
lea    0x1(%r13),%rcx
cmp    $0xff,%r8b
je     10569 <F_0_714+0x4e97>
mov    %rcx,%r8
jmpq   10570 <F_0_714+0x4e9e>
movb   $0x0,(%rcx)
lea    0x2(%r13),%r8
lea    0x30(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     10592 <F_0_714+0x4ec0>
mov    %rcx,%r8
jmpq   10599 <F_0_714+0x4ec7>
movb   $0x0,(%rcx)
add    $0x2,%r8
lea    0x28(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     105bb <F_0_714+0x4ee9>
mov    %rcx,%r8
jmpq   105c2 <F_0_714+0x4ef0>
movb   $0x0,(%rcx)
add    $0x2,%r8
lea    -0x20(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %rcx,%rdx
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     105f4 <F_0_714+0x4f22>
mov    %rcx,%r13
mov    %r15,%rcx
mov    %rdi,%r15
mov    -0x120(%rbp),%r8
jmpq   f973 <F_0_714+0x42a1>
movb   $0x0,(%rcx)
lea    0x2(%r8),%r13
mov    %r15,%rcx
mov    %rdi,%r15
mov    -0x120(%rbp),%r8
jmpq   f723 <F_0_714+0x4051>
add    $0x1,%r11d
movswq 0x3e(%rsi),%r10
test   %r10w,%r10w
je     1060d <F_0_714+0x4f3b>
mov    %r10,%r14
sar    $0x1f,%r14d
mov    %r14,-0x60(%rbp)
mov    %r14,%rcx
xor    %r10d,%ecx
sub    %r14d,%ecx
movslq %ecx,%rcx
movzbl (%rcx,%rax,1),%ecx
mov    %rcx,-0x128(%rbp)
jmpq   10722 <F_0_714+0x5050>
cmp    $0x2f,%edx
jle    104bd <F_0_714+0x4deb>
lea    0x38(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    1041f <F_0_714+0x4d4d>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    0x30(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    1043e <F_0_714+0x4d6c>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
lea    0x28(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    1045d <F_0_714+0x4d8b>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    0x20(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    1047c <F_0_714+0x4daa>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
lea    0x18(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    1049b <F_0_714+0x4dc9>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    -0x30(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %rcx,%rdx
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    104bd <F_0_714+0x4deb>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
mov    %rbx,%rcx
shl    %cl,%rdi
mov    %rcx,%rbx
or     %r9,%rdi
add    %ebx,%edx
add    $0xfffffff0,%r11d
cmp    $0xf,%r11d
jg     103f7 <F_0_714+0x4d25>
shl    $0x4,%r11d
mov    -0x128(%rbp),%rcx
add    %ecx,%r11d
movslq %r11d,%r14
movslq (%r8,%r14,4),%r11
movsbq 0x400(%r8,%r14,1),%r14
cmp    $0x1f,%edx
jg     10796 <F_0_714+0x50c4>
mov    %rdi,%r15
shl    %cl,%r12
lea    -0x1(%r12),%edi
mov    -0x60(%rbp),%r12
add    %r12d,%r10d
and    %r10d,%edi
movslq %edi,%rdi
mov    %rcx,%r12
mov    %r14,%rcx
shl    %cl,%r15
mov    %rcx,%r10
or     %r15,%r11
mov    %r12,%rcx
shl    %cl,%r11
or     %r11,%rdi
add    %r10d,%edx
add    %ecx,%edx
mov    $0x1,%r12d
xor    %r11d,%r11d
jmpq   103c1 <F_0_714+0x4cef>
mov    %rcx,%r15
lea    0x38(%rdx),%ecx
mov    %rdi,%r8
shr    %cl,%r8
mov    %r8b,0x0(%r13)
lea    0x1(%r13),%rcx
cmp    $0xff,%r8b
je     107bc <F_0_714+0x50ea>
mov    %rcx,%r8
jmpq   107c3 <F_0_714+0x50f1>
movb   $0x0,(%rcx)
lea    0x2(%r13),%r8
lea    0x30(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     107e5 <F_0_714+0x5113>
mov    %rcx,%r8
jmpq   107ec <F_0_714+0x511a>
movb   $0x0,(%rcx)
add    $0x2,%r8
lea    0x28(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     1080e <F_0_714+0x513c>
mov    %rcx,%r8
jmpq   10815 <F_0_714+0x5143>
movb   $0x0,(%rcx)
add    $0x2,%r8
lea    -0x20(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %rcx,%rdx
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     10847 <F_0_714+0x5175>
mov    %rcx,%r13
mov    %r15,%rcx
mov    %rdi,%r15
mov    -0x120(%rbp),%r8
jmpq   fbc3 <F_0_714+0x44f1>
movb   $0x0,(%rcx)
lea    0x2(%r8),%r13
mov    %r15,%rcx
mov    %rdi,%r15
mov    -0x120(%rbp),%r8
jmpq   f973 <F_0_714+0x42a1>
add    $0x1,%r11d
movswq 0x4e(%rsi),%r10
test   %r10w,%r10w
je     10860 <F_0_714+0x518e>
mov    %r10,%r14
sar    $0x1f,%r14d
mov    %r14,-0x120(%rbp)
mov    %r14,%rcx
xor    %r10d,%ecx
sub    %r14d,%ecx
movslq %ecx,%rcx
movzbl (%rcx,%rax,1),%ecx
mov    %rcx,-0x128(%rbp)
jmpq   10976 <F_0_714+0x52a4>
cmp    $0x2f,%edx
jle    10710 <F_0_714+0x503e>
lea    0x38(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    10672 <F_0_714+0x4fa0>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    0x30(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    10691 <F_0_714+0x4fbf>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
lea    0x28(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    106b0 <F_0_714+0x4fde>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    0x20(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    106cf <F_0_714+0x4ffd>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
lea    0x18(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    106ee <F_0_714+0x501c>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    -0x30(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %rcx,%rdx
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    10710 <F_0_714+0x503e>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
mov    %rbx,%rcx
shl    %cl,%rdi
mov    %rcx,%rbx
or     %r9,%rdi
add    %ebx,%edx
add    $0xfffffff0,%r11d
cmp    $0xf,%r11d
jg     1064a <F_0_714+0x4f78>
shl    $0x4,%r11d
mov    -0x128(%rbp),%rcx
add    %ecx,%r11d
movslq %r11d,%r14
movslq (%r8,%r14,4),%r11
movsbq 0x400(%r8,%r14,1),%r14
cmp    $0x1f,%edx
jg     109ed <F_0_714+0x531b>
mov    %rdi,%r15
shl    %cl,%r12
lea    -0x1(%r12),%edi
mov    -0x60(%rbp),%r12
add    %r12d,%r10d
and    %r10d,%edi
movslq %edi,%rdi
mov    %rcx,%r12
mov    %r14,%rcx
shl    %cl,%r15
mov    %rcx,%r10
or     %r15,%r11
mov    %r12,%rcx
shl    %cl,%r11
or     %r11,%rdi
add    %r10d,%edx
add    %ecx,%edx
mov    $0x1,%r12d
xor    %r11d,%r11d
jmpq   10611 <F_0_714+0x4f3f>
mov    %rcx,%r15
lea    0x38(%rdx),%ecx
mov    %rdi,%r8
shr    %cl,%r8
mov    %r8b,0x0(%r13)
lea    0x1(%r13),%rcx
cmp    $0xff,%r8b
je     10a13 <F_0_714+0x5341>
mov    %rcx,%r8
jmpq   10a1a <F_0_714+0x5348>
movb   $0x0,(%rcx)
lea    0x2(%r13),%r8
lea    0x30(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     10a3c <F_0_714+0x536a>
mov    %rcx,%r8
jmpq   10a43 <F_0_714+0x5371>
movb   $0x0,(%rcx)
add    $0x2,%r8
lea    0x28(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     10a65 <F_0_714+0x5393>
mov    %rcx,%r8
jmpq   10a6c <F_0_714+0x539a>
movb   $0x0,(%rcx)
add    $0x2,%r8
lea    -0x20(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %rcx,%rdx
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     10a9e <F_0_714+0x53cc>
mov    %rcx,%r13
mov    %r15,%rcx
mov    %rdi,%r15
mov    -0x120(%rbp),%r8
jmpq   fe13 <F_0_714+0x4741>
movb   $0x0,(%rcx)
lea    0x2(%r8),%r13
mov    %r15,%rcx
mov    %rdi,%r15
mov    -0x120(%rbp),%r8
jmpq   fbc3 <F_0_714+0x44f1>
lea    0x1(%r11),%r14d
movswq 0x5c(%rsi),%r11
test   %r11w,%r11w
je     10ab7 <F_0_714+0x53e5>
mov    %r11,%r10
sar    $0x1f,%r10d
mov    %r10,-0x58(%rbp)
mov    %r10,%rcx
xor    %r11d,%ecx
sub    %r10d,%ecx
movslq %ecx,%rcx
movzbl (%rcx,%rax,1),%eax
mov    %rax,-0x128(%rbp)
mov    -0x38(%rbp),%r10
jmpq   10bca <F_0_714+0x54f8>
cmp    $0x2f,%edx
jle    10964 <F_0_714+0x5292>
lea    0x38(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    108c6 <F_0_714+0x51f4>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    0x30(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    108e5 <F_0_714+0x5213>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
lea    0x28(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    10904 <F_0_714+0x5232>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    0x20(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    10923 <F_0_714+0x5251>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
lea    0x18(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    10942 <F_0_714+0x5270>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    -0x30(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %rcx,%rdx
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    10964 <F_0_714+0x5292>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
mov    %rbx,%rcx
shl    %cl,%rdi
mov    %rcx,%rbx
or     %r9,%rdi
add    %ebx,%edx
add    $0xfffffff0,%r11d
cmp    $0xf,%r11d
jg     1089e <F_0_714+0x51cc>
shl    $0x4,%r11d
mov    -0x128(%rbp),%rcx
add    %ecx,%r11d
movslq %r11d,%r14
movslq (%r8,%r14,4),%r11
movsbq 0x400(%r8,%r14,1),%r14
cmp    $0x1f,%edx
jg     10c46 <F_0_714+0x5574>
mov    %rdi,%r15
shl    %cl,%r12
lea    -0x1(%r12),%edi
mov    -0x120(%rbp),%r12
add    %r12d,%r10d
and    %r10d,%edi
movslq %edi,%rdi
mov    %rcx,%r12
mov    %r14,%rcx
shl    %cl,%r15
mov    %rcx,%r10
or     %r15,%r11
mov    %r12,%rcx
shl    %cl,%r11
or     %r11,%rdi
add    %r10d,%edx
add    %ecx,%edx
mov    $0x1,%r12d
xor    %r14d,%r14d
jmpq   10864 <F_0_714+0x5192>
mov    %rcx,%r15
lea    0x38(%rdx),%ecx
mov    %rdi,%r8
shr    %cl,%r8
mov    %r8b,0x0(%r13)
lea    0x1(%r13),%rcx
cmp    $0xff,%r8b
je     10c6a <F_0_714+0x5598>
mov    %rcx,%r8
jmpq   10c71 <F_0_714+0x559f>
movb   $0x0,(%rcx)
lea    0x2(%r13),%r8
lea    0x30(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     10c93 <F_0_714+0x55c1>
mov    %rcx,%r8
jmpq   10c9a <F_0_714+0x55c8>
movb   $0x0,(%rcx)
add    $0x2,%r8
lea    0x28(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     10cbc <F_0_714+0x55ea>
mov    %rcx,%r8
jmpq   10cc3 <F_0_714+0x55f1>
movb   $0x0,(%rcx)
add    $0x2,%r8
lea    -0x20(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %rcx,%rdx
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     10cf5 <F_0_714+0x5623>
mov    %rcx,%r13
mov    %r15,%rcx
mov    %rdi,%r15
mov    -0x120(%rbp),%r8
jmpq   10063 <F_0_714+0x4991>
movb   $0x0,(%rcx)
lea    0x2(%r8),%r13
mov    %r15,%rcx
mov    %rdi,%r15
mov    -0x120(%rbp),%r8
jmpq   fe13 <F_0_714+0x4741>
add    $0x1,%r14d
mov    -0x38(%rbp),%r10
movswq 0x6a(%rsi),%r11
test   %r11w,%r11w
je     10d0e <F_0_714+0x563c>
mov    %r11,%r15
sar    $0x1f,%r15d
mov    %r15,-0x58(%rbp)
mov    %r15,%rcx
xor    %r11d,%ecx
sub    %r15d,%ecx
movslq %ecx,%rcx
movzbl (%rcx,%rax,1),%eax
mov    %rax,-0x128(%rbp)
jmpq   10e1d <F_0_714+0x574b>
cmp    $0x2f,%edx
jle    10bb8 <F_0_714+0x54e6>
lea    0x38(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%rax
cmp    $0xff,%r15b
jne    10b1c <F_0_714+0x544a>
movb   $0x0,(%rax)
lea    0x2(%r13),%rax
lea    0x30(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,(%rax)
lea    0x1(%rax),%r13
cmp    $0xff,%r15b
jne    10b3b <F_0_714+0x5469>
movb   $0x0,0x0(%r13)
lea    0x2(%rax),%r13
lea    0x28(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%rax
cmp    $0xff,%r15b
jne    10b59 <F_0_714+0x5487>
movb   $0x0,(%rax)
lea    0x2(%r13),%rax
lea    0x20(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,(%rax)
lea    0x1(%rax),%r13
cmp    $0xff,%r15b
jne    10b78 <F_0_714+0x54a6>
movb   $0x0,0x0(%r13)
lea    0x2(%rax),%r13
lea    0x18(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%rax
cmp    $0xff,%r15b
jne    10b96 <F_0_714+0x54c4>
movb   $0x0,(%rax)
lea    0x2(%r13),%rax
lea    -0x30(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %rcx,%rdx
mov    %r15b,(%rax)
lea    0x1(%rax),%r13
cmp    $0xff,%r15b
jne    10bb8 <F_0_714+0x54e6>
movb   $0x0,0x0(%r13)
lea    0x2(%rax),%r13
mov    %rbx,%rcx
shl    %cl,%rdi
mov    %rcx,%rbx
or     %r9,%rdi
add    %ebx,%edx
add    $0xfffffff0,%r14d
cmp    $0xf,%r14d
jg     10af5 <F_0_714+0x5423>
shl    $0x4,%r14d
mov    -0x128(%rbp),%rcx
lea    (%rcx,%r14,1),%eax
movslq %eax,%rax
movslq (%r8,%rax,4),%r14
movsbq 0x400(%r8,%rax,1),%rax
cmp    $0x1f,%edx
jg     10e99 <F_0_714+0x57c7>
mov    %rdi,%r15
shl    %cl,%r12
lea    -0x1(%r12),%edi
mov    -0x58(%rbp),%r12
add    %r12d,%r11d
and    %r11d,%edi
movslq %edi,%rdi
mov    %rcx,%r11
mov    %rax,%rcx
shl    %cl,%r15
mov    %rcx,%rax
or     %r15,%r14
mov    %r11,%rcx
shl    %cl,%r14
or     %r14,%rdi
add    %edx,%eax
lea    (%rcx,%rax,1),%edx
mov    $0x1,%r12d
lea    0x38676(%rip),%rax        # 492b4 <jpeg_nbits_table>
xor    %r14d,%r14d
jmpq   10abf <F_0_714+0x53ed>
mov    %rcx,%r15
lea    0x38(%rdx),%ecx
mov    %rdi,%rax
shr    %cl,%rax
mov    %al,0x0(%r13)
lea    0x1(%r13),%rcx
cmp    $0xff,%al
je     10ebf <F_0_714+0x57ed>
mov    %rcx,%rax
jmpq   10ec6 <F_0_714+0x57f4>
movb   $0x0,(%rcx)
lea    0x2(%r13),%r8
lea    0x30(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     10ee8 <F_0_714+0x5816>
mov    %rcx,%r8
jmpq   10eef <F_0_714+0x581d>
movb   $0x0,(%rcx)
add    $0x2,%r8
lea    0x28(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     10f11 <F_0_714+0x583f>
mov    %rcx,%r8
jmpq   10f18 <F_0_714+0x5846>
movb   $0x0,(%rcx)
add    $0x2,%r8
lea    -0x20(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %rcx,%rdx
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     10f4a <F_0_714+0x5878>
mov    %rcx,%r13
mov    %r15,%rcx
mov    %rdi,%r15
mov    -0x120(%rbp),%r8
jmpq   102b3 <F_0_714+0x4be1>
movb   $0x0,(%rcx)
lea    0x2(%r8),%r13
mov    %r15,%rcx
mov    %rdi,%r15
mov    -0x120(%rbp),%r8
jmpq   10063 <F_0_714+0x4991>
add    $0x1,%r14d
movswq 0x78(%rsi),%r11
test   %r11w,%r11w
je     10f63 <F_0_714+0x5891>
mov    %r11,%r15
sar    $0x1f,%r15d
mov    %r15,-0x50(%rbp)
mov    %r15,%rcx
xor    %r11d,%ecx
sub    %r15d,%ecx
movslq %ecx,%rcx
movzbl (%rcx,%rax,1),%eax
mov    %rax,-0x128(%rbp)
jmpq   11072 <F_0_714+0x59a0>
cmp    $0x2f,%edx
jle    10e0b <F_0_714+0x5739>
lea    0x38(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%rax
cmp    $0xff,%r15b
jne    10d6f <F_0_714+0x569d>
movb   $0x0,(%rax)
lea    0x2(%r13),%rax
lea    0x30(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,(%rax)
lea    0x1(%rax),%r13
cmp    $0xff,%r15b
jne    10d8e <F_0_714+0x56bc>
movb   $0x0,0x0(%r13)
lea    0x2(%rax),%r13
lea    0x28(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%rax
cmp    $0xff,%r15b
jne    10dac <F_0_714+0x56da>
movb   $0x0,(%rax)
lea    0x2(%r13),%rax
lea    0x20(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,(%rax)
lea    0x1(%rax),%r13
cmp    $0xff,%r15b
jne    10dcb <F_0_714+0x56f9>
movb   $0x0,0x0(%r13)
lea    0x2(%rax),%r13
lea    0x18(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%rax
cmp    $0xff,%r15b
jne    10de9 <F_0_714+0x5717>
movb   $0x0,(%rax)
lea    0x2(%r13),%rax
lea    -0x30(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %rcx,%rdx
mov    %r15b,(%rax)
lea    0x1(%rax),%r13
cmp    $0xff,%r15b
jne    10e0b <F_0_714+0x5739>
movb   $0x0,0x0(%r13)
lea    0x2(%rax),%r13
mov    %rbx,%rcx
shl    %cl,%rdi
mov    %rcx,%rbx
or     %r9,%rdi
add    %ebx,%edx
add    $0xfffffff0,%r14d
cmp    $0xf,%r14d
jg     10d48 <F_0_714+0x5676>
shl    $0x4,%r14d
mov    -0x128(%rbp),%rcx
lea    (%rcx,%r14,1),%eax
movslq %eax,%rax
movslq (%r8,%rax,4),%r14
movsbq 0x400(%r8,%rax,1),%rax
cmp    $0x1f,%edx
jg     110f0 <F_0_714+0x5a1e>
mov    %rdi,%r15
shl    %cl,%r12
lea    -0x1(%r12),%edi
mov    -0x58(%rbp),%r12
add    %r12d,%r11d
and    %r11d,%edi
movslq %edi,%rdi
mov    %rcx,%r11
mov    %rax,%rcx
shl    %cl,%r15
mov    %rcx,%rax
or     %r15,%r14
mov    %r11,%rcx
shl    %cl,%r14
or     %r14,%rdi
add    %edx,%eax
lea    (%rcx,%rax,1),%edx
mov    $0x1,%r12d
lea    0x38423(%rip),%rax        # 492b4 <jpeg_nbits_table>
xor    %r14d,%r14d
jmpq   10d12 <F_0_714+0x5640>
mov    %rcx,%r15
lea    0x38(%rdx),%ecx
mov    %rdi,%r10
shr    %cl,%r10
mov    %r10b,0x0(%r13)
lea    0x1(%r13),%rcx
cmp    $0xff,%r10b
je     11116 <F_0_714+0x5a44>
mov    %rcx,%r10
jmpq   1111d <F_0_714+0x5a4b>
movb   $0x0,(%rcx)
lea    0x2(%r13),%rax
lea    0x30(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %r13b,(%rax)
lea    0x1(%rax),%rcx
cmp    $0xff,%r13b
je     1113f <F_0_714+0x5a6d>
mov    %rcx,%rax
jmpq   11146 <F_0_714+0x5a74>
movb   $0x0,(%rcx)
add    $0x2,%r8
lea    0x28(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     11168 <F_0_714+0x5a96>
mov    %rcx,%r8
jmpq   1116f <F_0_714+0x5a9d>
movb   $0x0,(%rcx)
add    $0x2,%r8
lea    -0x20(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %rcx,%rdx
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     111a1 <F_0_714+0x5acf>
mov    %rcx,%r13
mov    %r15,%rcx
mov    %rdi,%r15
mov    -0x120(%rbp),%r8
jmpq   10503 <F_0_714+0x4e31>
movb   $0x0,(%rcx)
lea    0x2(%r8),%r13
mov    %r15,%rcx
mov    %rdi,%r15
mov    -0x120(%rbp),%r8
jmpq   102b3 <F_0_714+0x4be1>
add    $0x1,%r14d
movswq 0x7a(%rsi),%r11
test   %r11w,%r11w
je     111ba <F_0_714+0x5ae8>
mov    %r11,%r15
sar    $0x1f,%r15d
mov    %r15,-0x50(%rbp)
mov    %r15,%rcx
xor    %r11d,%ecx
sub    %r15d,%ecx
movslq %ecx,%rcx
movzbl (%rcx,%rax,1),%eax
mov    %rax,-0x128(%rbp)
jmpq   112c9 <F_0_714+0x5bf7>
cmp    $0x2f,%edx
jle    11060 <F_0_714+0x598e>
lea    0x38(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%rax
cmp    $0xff,%r15b
jne    10fc4 <F_0_714+0x58f2>
movb   $0x0,(%rax)
lea    0x2(%r13),%rax
lea    0x30(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,(%rax)
lea    0x1(%rax),%r13
cmp    $0xff,%r15b
jne    10fe3 <F_0_714+0x5911>
movb   $0x0,0x0(%r13)
lea    0x2(%rax),%r13
lea    0x28(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%rax
cmp    $0xff,%r15b
jne    11001 <F_0_714+0x592f>
movb   $0x0,(%rax)
lea    0x2(%r13),%rax
lea    0x20(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,(%rax)
lea    0x1(%rax),%r13
cmp    $0xff,%r15b
jne    11020 <F_0_714+0x594e>
movb   $0x0,0x0(%r13)
lea    0x2(%rax),%r13
lea    0x18(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%rax
cmp    $0xff,%r15b
jne    1103e <F_0_714+0x596c>
movb   $0x0,(%rax)
lea    0x2(%r13),%rax
lea    -0x30(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %rcx,%rdx
mov    %r15b,(%rax)
lea    0x1(%rax),%r13
cmp    $0xff,%r15b
jne    11060 <F_0_714+0x598e>
movb   $0x0,0x0(%r13)
lea    0x2(%rax),%r13
mov    %rbx,%rcx
shl    %cl,%rdi
mov    %rcx,%rbx
or     %r9,%rdi
add    %ebx,%edx
add    $0xfffffff0,%r14d
cmp    $0xf,%r14d
jg     10f9d <F_0_714+0x58cb>
shl    $0x4,%r14d
mov    -0x128(%rbp),%rcx
lea    (%rcx,%r14,1),%eax
movslq %eax,%r14
movslq (%r8,%r14,4),%rax
movsbq 0x400(%r8,%r14,1),%r14
cmp    $0x1f,%edx
jg     11347 <F_0_714+0x5c75>
mov    %rdi,%r15
shl    %cl,%r12
lea    -0x1(%r12),%edi
mov    -0x50(%rbp),%r12
add    %r12d,%r11d
and    %r11d,%edi
movslq %edi,%rdi
mov    %rcx,%r12
mov    %r14,%rcx
shl    %cl,%r15
mov    %rcx,%r11
or     %r15,%rax
mov    %r12,%rcx
shl    %cl,%rax
or     %rax,%rdi
lea    (%rdx,%r11,1),%eax
lea    (%rcx,%rax,1),%edx
mov    $0x1,%r12d
lea    0x381cc(%rip),%rax        # 492b4 <jpeg_nbits_table>
xor    %r14d,%r14d
jmpq   10f67 <F_0_714+0x5895>
mov    %rcx,%r15
lea    0x38(%rdx),%ecx
mov    %rdi,%r10
shr    %cl,%r10
mov    %r10b,0x0(%r13)
lea    0x1(%r13),%rcx
cmp    $0xff,%r10b
je     1136d <F_0_714+0x5c9b>
mov    %rcx,%r10
jmpq   11374 <F_0_714+0x5ca2>
movb   $0x0,(%rcx)
lea    0x2(%r13),%r10
lea    0x30(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %r13b,(%r10)
lea    0x1(%r10),%rcx
cmp    $0xff,%r13b
je     11396 <F_0_714+0x5cc4>
mov    %rcx,%r10
jmpq   1139d <F_0_714+0x5ccb>
movb   $0x0,(%rcx)
add    $0x2,%rax
lea    0x28(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %r13b,(%rax)
lea    0x1(%rax),%rcx
cmp    $0xff,%r13b
je     113bf <F_0_714+0x5ced>
mov    %rcx,%rax
jmpq   113c6 <F_0_714+0x5cf4>
movb   $0x0,(%rcx)
add    $0x2,%r8
lea    -0x20(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %rcx,%rdx
mov    %r13b,(%r8)
lea    0x1(%r8),%rcx
cmp    $0xff,%r13b
je     113f8 <F_0_714+0x5d26>
mov    %rcx,%r13
mov    %r15,%rcx
mov    %rdi,%r15
mov    -0x120(%rbp),%r8
jmpq   10756 <F_0_714+0x5084>
movb   $0x0,(%rcx)
lea    0x2(%r8),%r13
mov    %r15,%rcx
mov    %rdi,%r15
mov    -0x120(%rbp),%r8
jmpq   10503 <F_0_714+0x4e31>
add    $0x1,%r14d
movswq 0x6c(%rsi),%r11
test   %r11w,%r11w
je     11411 <F_0_714+0x5d3f>
mov    %r11,%r15
sar    $0x1f,%r15d
mov    %r15,-0x48(%rbp)
mov    %r15,%rcx
xor    %r11d,%ecx
sub    %r15d,%ecx
movslq %ecx,%rcx
movzbl (%rcx,%rax,1),%eax
mov    %rax,-0x128(%rbp)
jmpq   11520 <F_0_714+0x5e4e>
cmp    $0x2f,%edx
jle    112b7 <F_0_714+0x5be5>
lea    0x38(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%rax
cmp    $0xff,%r15b
jne    1121b <F_0_714+0x5b49>
movb   $0x0,(%rax)
lea    0x2(%r13),%rax
lea    0x30(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,(%rax)
lea    0x1(%rax),%r13
cmp    $0xff,%r15b
jne    1123a <F_0_714+0x5b68>
movb   $0x0,0x0(%r13)
lea    0x2(%rax),%r13
lea    0x28(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%rax
cmp    $0xff,%r15b
jne    11258 <F_0_714+0x5b86>
movb   $0x0,(%rax)
lea    0x2(%r13),%rax
lea    0x20(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,(%rax)
lea    0x1(%rax),%r13
cmp    $0xff,%r15b
jne    11277 <F_0_714+0x5ba5>
movb   $0x0,0x0(%r13)
lea    0x2(%rax),%r13
lea    0x18(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%rax
cmp    $0xff,%r15b
jne    11295 <F_0_714+0x5bc3>
movb   $0x0,(%rax)
lea    0x2(%r13),%rax
lea    -0x30(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %rcx,%rdx
mov    %r15b,(%rax)
lea    0x1(%rax),%r13
cmp    $0xff,%r15b
jne    112b7 <F_0_714+0x5be5>
movb   $0x0,0x0(%r13)
lea    0x2(%rax),%r13
mov    %rbx,%rcx
shl    %cl,%rdi
mov    %rcx,%rbx
or     %r9,%rdi
add    %ebx,%edx
add    $0xfffffff0,%r14d
cmp    $0xf,%r14d
jg     111f4 <F_0_714+0x5b22>
shl    $0x4,%r14d
mov    -0x128(%rbp),%rcx
lea    (%rcx,%r14,1),%eax
movslq %eax,%r14
movslq (%r8,%r14,4),%rax
movsbq 0x400(%r8,%r14,1),%r14
cmp    $0x1f,%edx
jg     1159e <F_0_714+0x5ecc>
mov    %rdi,%r15
shl    %cl,%r12
lea    -0x1(%r12),%edi
mov    -0x50(%rbp),%r12
add    %r12d,%r11d
and    %r11d,%edi
movslq %edi,%rdi
mov    %rcx,%r12
mov    %r14,%rcx
shl    %cl,%r15
mov    %rcx,%r11
or     %r15,%rax
mov    %r12,%rcx
shl    %cl,%rax
or     %rax,%rdi
lea    (%rdx,%r11,1),%eax
lea    (%rcx,%rax,1),%edx
mov    $0x1,%r12d
lea    0x37f75(%rip),%rax        # 492b4 <jpeg_nbits_table>
xor    %r14d,%r14d
jmpq   111be <F_0_714+0x5aec>
mov    %rcx,%r15
lea    0x38(%rdx),%ecx
mov    %rdi,%r10
shr    %cl,%r10
mov    %r10b,0x0(%r13)
lea    0x1(%r13),%rcx
cmp    $0xff,%r10b
je     115c4 <F_0_714+0x5ef2>
mov    %rcx,%r10
jmpq   115cb <F_0_714+0x5ef9>
movb   $0x0,(%rcx)
lea    0x2(%r13),%r10
lea    0x30(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %r13b,(%r10)
lea    0x1(%r10),%rcx
cmp    $0xff,%r13b
je     115ed <F_0_714+0x5f1b>
mov    %rcx,%r10
jmpq   115f4 <F_0_714+0x5f22>
movb   $0x0,(%rcx)
add    $0x2,%r10
lea    0x28(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %r13b,(%r10)
lea    0x1(%r10),%rcx
cmp    $0xff,%r13b
je     11616 <F_0_714+0x5f44>
mov    %rcx,%r10
jmpq   1161d <F_0_714+0x5f4b>
movb   $0x0,(%rcx)
add    $0x2,%rax
lea    -0x20(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %rcx,%rdx
mov    %r13b,(%rax)
lea    0x1(%rax),%rcx
cmp    $0xff,%r13b
je     1164c <F_0_714+0x5f7a>
mov    %rcx,%r13
mov    %r15,%rcx
mov    %rdi,%r15
lea    0x37ec1(%rip),%rax        # 492b4 <jpeg_nbits_table>
jmpq   109aa <F_0_714+0x52d8>
movb   $0x0,(%rcx)
lea    0x2(%r8),%r13
mov    %r15,%rcx
mov    %rdi,%r15
mov    -0x120(%rbp),%r8
jmpq   10756 <F_0_714+0x5084>
add    $0x1,%r14d
movswq 0x5e(%rsi),%r11
test   %r11w,%r11w
je     11665 <F_0_714+0x5f93>
mov    %r11,%r15
sar    $0x1f,%r15d
mov    %r15,-0x48(%rbp)
mov    %r15,%rcx
xor    %r11d,%ecx
sub    %r15d,%ecx
movslq %ecx,%rcx
movzbl (%rcx,%rax,1),%eax
mov    %rax,-0x128(%rbp)
jmpq   11774 <F_0_714+0x60a2>
cmp    $0x2f,%edx
jle    1150e <F_0_714+0x5e3c>
lea    0x38(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%rax
cmp    $0xff,%r15b
jne    11472 <F_0_714+0x5da0>
movb   $0x0,(%rax)
lea    0x2(%r13),%rax
lea    0x30(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,(%rax)
lea    0x1(%rax),%r13
cmp    $0xff,%r15b
jne    11491 <F_0_714+0x5dbf>
movb   $0x0,0x0(%r13)
lea    0x2(%rax),%r13
lea    0x28(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%rax
cmp    $0xff,%r15b
jne    114af <F_0_714+0x5ddd>
movb   $0x0,(%rax)
lea    0x2(%r13),%rax
lea    0x20(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,(%rax)
lea    0x1(%rax),%r13
cmp    $0xff,%r15b
jne    114ce <F_0_714+0x5dfc>
movb   $0x0,0x0(%r13)
lea    0x2(%rax),%r13
lea    0x18(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%rax
cmp    $0xff,%r15b
jne    114ec <F_0_714+0x5e1a>
movb   $0x0,(%rax)
lea    0x2(%r13),%rax
lea    -0x30(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %rcx,%rdx
mov    %r15b,(%rax)
lea    0x1(%rax),%r13
cmp    $0xff,%r15b
jne    1150e <F_0_714+0x5e3c>
movb   $0x0,0x0(%r13)
lea    0x2(%rax),%r13
mov    %rbx,%rcx
shl    %cl,%rdi
mov    %rcx,%rbx
or     %r9,%rdi
add    %ebx,%edx
add    $0xfffffff0,%r14d
cmp    $0xf,%r14d
jg     1144b <F_0_714+0x5d79>
shl    $0x4,%r14d
mov    -0x128(%rbp),%rcx
lea    (%rcx,%r14,1),%eax
movslq %eax,%r14
movslq (%r8,%r14,4),%rax
movsbq 0x400(%r8,%r14,1),%r14
cmp    $0x1f,%edx
jg     117f2 <F_0_714+0x6120>
mov    %rdi,%r15
shl    %cl,%r12
lea    -0x1(%r12),%edi
mov    -0x48(%rbp),%r12
add    %r12d,%r11d
and    %r11d,%edi
movslq %edi,%rdi
mov    %rcx,%r12
mov    %r14,%rcx
shl    %cl,%r15
mov    %rcx,%r11
or     %r15,%rax
mov    %r12,%rcx
shl    %cl,%rax
or     %rax,%rdi
lea    (%rdx,%r11,1),%eax
lea    (%rcx,%rax,1),%edx
mov    $0x1,%r12d
lea    0x37d1e(%rip),%rax        # 492b4 <jpeg_nbits_table>
xor    %r14d,%r14d
jmpq   11415 <F_0_714+0x5d43>
mov    %rcx,%r15
lea    0x38(%rdx),%ecx
mov    %rdi,%r10
shr    %cl,%r10
mov    %r10b,0x0(%r13)
lea    0x1(%r13),%rcx
cmp    $0xff,%r10b
je     11818 <F_0_714+0x6146>
mov    %rcx,%r10
jmpq   1181f <F_0_714+0x614d>
movb   $0x0,(%rcx)
lea    0x2(%r13),%r10
lea    0x30(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %r13b,(%r10)
lea    0x1(%r10),%rcx
cmp    $0xff,%r13b
je     11841 <F_0_714+0x616f>
mov    %rcx,%r10
jmpq   11848 <F_0_714+0x6176>
movb   $0x0,(%rcx)
add    $0x2,%r10
lea    0x28(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %r13b,(%r10)
lea    0x1(%r10),%rcx
cmp    $0xff,%r13b
je     1186a <F_0_714+0x6198>
mov    %rcx,%r10
jmpq   11871 <F_0_714+0x619f>
movb   $0x0,(%rcx)
add    $0x2,%r10
lea    -0x20(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %rcx,%rdx
mov    %r13b,(%r10)
lea    0x1(%r10),%rcx
cmp    $0xff,%r13b
je     118a0 <F_0_714+0x61ce>
mov    %rcx,%r13
mov    %r15,%rcx
mov    %rdi,%r15
mov    -0x38(%rbp),%r10
jmpq   10bff <F_0_714+0x552d>
movb   $0x0,(%rcx)
lea    0x2(%rax),%r13
mov    %r15,%rcx
mov    %rdi,%r15
lea    0x37c54(%rip),%rax        # 492b4 <jpeg_nbits_table>
jmpq   109aa <F_0_714+0x52d8>
add    $0x1,%r14d
movswq 0x6e(%rsi),%r11
test   %r11w,%r11w
je     118b6 <F_0_714+0x61e4>
mov    %r11,%r15
sar    $0x1f,%r15d
mov    %r15,-0x40(%rbp)
mov    %r15,%rcx
xor    %r11d,%ecx
sub    %r15d,%ecx
movslq %ecx,%rcx
movzbl (%rcx,%rax,1),%eax
mov    %rax,-0x128(%rbp)
jmpq   119c5 <F_0_714+0x62f3>
cmp    $0x2f,%edx
jle    11762 <F_0_714+0x6090>
lea    0x38(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%rax
cmp    $0xff,%r15b
jne    116c6 <F_0_714+0x5ff4>
movb   $0x0,(%rax)
lea    0x2(%r13),%rax
lea    0x30(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,(%rax)
lea    0x1(%rax),%r13
cmp    $0xff,%r15b
jne    116e5 <F_0_714+0x6013>
movb   $0x0,0x0(%r13)
lea    0x2(%rax),%r13
lea    0x28(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%rax
cmp    $0xff,%r15b
jne    11703 <F_0_714+0x6031>
movb   $0x0,(%rax)
lea    0x2(%r13),%rax
lea    0x20(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,(%rax)
lea    0x1(%rax),%r13
cmp    $0xff,%r15b
jne    11722 <F_0_714+0x6050>
movb   $0x0,0x0(%r13)
lea    0x2(%rax),%r13
lea    0x18(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%rax
cmp    $0xff,%r15b
jne    11740 <F_0_714+0x606e>
movb   $0x0,(%rax)
lea    0x2(%r13),%rax
lea    -0x30(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %rcx,%rdx
mov    %r15b,(%rax)
lea    0x1(%rax),%r13
cmp    $0xff,%r15b
jne    11762 <F_0_714+0x6090>
movb   $0x0,0x0(%r13)
lea    0x2(%rax),%r13
mov    %rbx,%rcx
shl    %cl,%rdi
mov    %rcx,%rbx
or     %r9,%rdi
add    %ebx,%edx
add    $0xfffffff0,%r14d
cmp    $0xf,%r14d
jg     1169f <F_0_714+0x5fcd>
shl    $0x4,%r14d
mov    -0x128(%rbp),%rcx
lea    (%rcx,%r14,1),%eax
movslq %eax,%r14
movslq (%r8,%r14,4),%rax
movsbq 0x400(%r8,%r14,1),%r14
cmp    $0x1f,%edx
jg     11a43 <F_0_714+0x6371>
mov    %rdi,%r15
shl    %cl,%r12
lea    -0x1(%r12),%edi
mov    -0x48(%rbp),%r12
add    %r12d,%r11d
and    %r11d,%edi
movslq %edi,%rdi
mov    %rcx,%r12
mov    %r14,%rcx
shl    %cl,%r15
mov    %rcx,%r11
or     %r15,%rax
mov    %r12,%rcx
shl    %cl,%rax
or     %rax,%rdi
lea    (%rdx,%r11,1),%eax
lea    (%rcx,%rax,1),%edx
mov    $0x1,%r12d
lea    0x37aca(%rip),%rax        # 492b4 <jpeg_nbits_table>
xor    %r14d,%r14d
jmpq   11669 <F_0_714+0x5f97>
mov    %rcx,%r15
lea    0x38(%rdx),%ecx
mov    %rdi,%r10
shr    %cl,%r10
mov    %r10b,0x0(%r13)
lea    0x1(%r13),%rcx
cmp    $0xff,%r10b
je     11a69 <F_0_714+0x6397>
mov    %rcx,%r10
jmpq   11a70 <F_0_714+0x639e>
movb   $0x0,(%rcx)
lea    0x2(%r13),%r10
lea    0x30(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %r13b,(%r10)
lea    0x1(%r10),%rcx
cmp    $0xff,%r13b
je     11a92 <F_0_714+0x63c0>
mov    %rcx,%r10
jmpq   11a99 <F_0_714+0x63c7>
movb   $0x0,(%rcx)
add    $0x2,%r10
lea    0x28(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %r13b,(%r10)
lea    0x1(%r10),%rcx
cmp    $0xff,%r13b
je     11abb <F_0_714+0x63e9>
mov    %rcx,%r10
jmpq   11ac2 <F_0_714+0x63f0>
movb   $0x0,(%rcx)
add    $0x2,%r10
lea    -0x20(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %rcx,%rdx
mov    %r13b,(%r10)
lea    0x1(%r10),%rcx
cmp    $0xff,%r13b
je     11af1 <F_0_714+0x641f>
mov    %rcx,%r13
mov    %r15,%rcx
mov    %rdi,%r15
mov    -0x38(%rbp),%r10
jmpq   10e52 <F_0_714+0x5780>
movb   $0x0,(%rcx)
lea    0x2(%r10),%r13
mov    %r15,%rcx
mov    %rdi,%r15
mov    -0x38(%rbp),%r10
jmpq   10bff <F_0_714+0x552d>
add    $0x1,%r14d
movswq 0x7c(%rsi),%r11
test   %r11w,%r11w
je     11b07 <F_0_714+0x6435>
mov    %r11,%r15
sar    $0x1f,%r15d
mov    %r15,-0x40(%rbp)
mov    %r15,%rcx
xor    %r11d,%ecx
sub    %r15d,%ecx
movslq %ecx,%rcx
movzbl (%rcx,%rax,1),%eax
mov    %rax,-0x128(%rbp)
jmpq   11c09 <F_0_714+0x6537>
cmp    $0x2f,%edx
jle    119b3 <F_0_714+0x62e1>
lea    0x38(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%rax
cmp    $0xff,%r15b
jne    11917 <F_0_714+0x6245>
movb   $0x0,(%rax)
lea    0x2(%r13),%rax
lea    0x30(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,(%rax)
lea    0x1(%rax),%r13
cmp    $0xff,%r15b
jne    11936 <F_0_714+0x6264>
movb   $0x0,0x0(%r13)
lea    0x2(%rax),%r13
lea    0x28(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%rax
cmp    $0xff,%r15b
jne    11954 <F_0_714+0x6282>
movb   $0x0,(%rax)
lea    0x2(%r13),%rax
lea    0x20(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,(%rax)
lea    0x1(%rax),%r13
cmp    $0xff,%r15b
jne    11973 <F_0_714+0x62a1>
movb   $0x0,0x0(%r13)
lea    0x2(%rax),%r13
lea    0x18(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%rax
cmp    $0xff,%r15b
jne    11991 <F_0_714+0x62bf>
movb   $0x0,(%rax)
lea    0x2(%r13),%rax
lea    -0x30(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %rcx,%rdx
mov    %r15b,(%rax)
lea    0x1(%rax),%r13
cmp    $0xff,%r15b
jne    119b3 <F_0_714+0x62e1>
movb   $0x0,0x0(%r13)
lea    0x2(%rax),%r13
mov    %rbx,%rcx
shl    %cl,%rdi
mov    %rcx,%rbx
or     %r9,%rdi
add    %ebx,%edx
add    $0xfffffff0,%r14d
cmp    $0xf,%r14d
jg     118f0 <F_0_714+0x621e>
shl    $0x4,%r14d
mov    -0x128(%rbp),%rcx
lea    (%rcx,%r14,1),%eax
movslq %eax,%r14
movslq (%r8,%r14,4),%rax
movsbq 0x400(%r8,%r14,1),%r14
cmp    $0x1f,%edx
jg     11c85 <F_0_714+0x65b3>
mov    %rdi,%r15
shl    %cl,%r12
lea    -0x1(%r12),%edi
mov    -0x40(%rbp),%r12
add    %r12d,%r11d
and    %r11d,%edi
movslq %edi,%rdi
mov    %rcx,%r12
mov    %r14,%rcx
shl    %cl,%r15
mov    %rcx,%r11
or     %r15,%rax
mov    %r12,%rcx
shl    %cl,%rax
or     %rax,%rdi
lea    (%rdx,%r11,1),%eax
lea    (%rcx,%rax,1),%edx
mov    $0x1,%r12d
lea    0x37879(%rip),%rax        # 492b4 <jpeg_nbits_table>
xor    %r14d,%r14d
jmpq   118ba <F_0_714+0x61e8>
mov    %rcx,%r15
lea    0x38(%rdx),%ecx
mov    %rdi,%r12
shr    %cl,%r12
mov    %r12b,0x0(%r13)
lea    0x1(%r13),%rcx
cmp    $0xff,%r12b
je     11cab <F_0_714+0x65d9>
mov    %rcx,%r12
jmpq   11cb2 <F_0_714+0x65e0>
movb   $0x0,(%rcx)
lea    0x2(%r13),%r10
lea    0x30(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %r13b,(%r10)
lea    0x1(%r10),%rcx
cmp    $0xff,%r13b
je     11cd6 <F_0_714+0x6604>
mov    %rcx,%r10
jmpq   11cdd <F_0_714+0x660b>
movb   $0x0,(%rcx)
add    $0x2,%r10
lea    0x28(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %r13b,(%r10)
lea    0x1(%r10),%rcx
cmp    $0xff,%r13b
je     11cff <F_0_714+0x662d>
mov    %rcx,%r10
jmpq   11d06 <F_0_714+0x6634>
movb   $0x0,(%rcx)
add    $0x2,%r10
lea    -0x20(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %rcx,%rdx
mov    %r13b,(%r10)
lea    0x1(%r10),%rcx
cmp    $0xff,%r13b
je     11d35 <F_0_714+0x6663>
mov    %rcx,%r13
mov    %r15,%rcx
mov    %rdi,%r15
mov    -0x38(%rbp),%r10
jmpq   110a7 <F_0_714+0x59d5>
movb   $0x0,(%rcx)
lea    0x2(%r10),%r13
mov    %r15,%rcx
mov    %rdi,%r15
mov    -0x38(%rbp),%r10
jmpq   10e52 <F_0_714+0x5780>
add    $0x1,%r14d
movswq 0x7e(%rsi),%rsi
test   %si,%si
je     11d4b <F_0_714+0x6679>
mov    %rsi,%r11
sar    $0x1f,%r11d
mov    %r11,%rcx
xor    %esi,%ecx
sub    %r11d,%ecx
movslq %ecx,%rcx
movzbl (%rcx,%rax,1),%eax
jmpq   11dfa <F_0_714+0x6728>
cmp    $0x2f,%edx
jle    11bf7 <F_0_714+0x6525>
lea    0x38(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%rax
cmp    $0xff,%r15b
jne    11b5b <F_0_714+0x6489>
movb   $0x0,(%rax)
lea    0x2(%r13),%rax
lea    0x30(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,(%rax)
lea    0x1(%rax),%r13
cmp    $0xff,%r15b
jne    11b7a <F_0_714+0x64a8>
movb   $0x0,0x0(%r13)
lea    0x2(%rax),%r13
lea    0x28(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%rax
cmp    $0xff,%r15b
jne    11b98 <F_0_714+0x64c6>
movb   $0x0,(%rax)
lea    0x2(%r13),%rax
lea    0x20(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,(%rax)
lea    0x1(%rax),%r13
cmp    $0xff,%r15b
jne    11bb7 <F_0_714+0x64e5>
movb   $0x0,0x0(%r13)
lea    0x2(%rax),%r13
lea    0x18(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%rax
cmp    $0xff,%r15b
jne    11bd5 <F_0_714+0x6503>
movb   $0x0,(%rax)
lea    0x2(%r13),%rax
lea    -0x30(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %rcx,%rdx
mov    %r15b,(%rax)
lea    0x1(%rax),%r13
cmp    $0xff,%r15b
jne    11bf7 <F_0_714+0x6525>
movb   $0x0,0x0(%r13)
lea    0x2(%rax),%r13
mov    %rbx,%rcx
shl    %cl,%rdi
mov    %rcx,%rbx
or     %r9,%rdi
add    %ebx,%edx
add    $0xfffffff0,%r14d
cmp    $0xf,%r14d
jg     11b34 <F_0_714+0x6462>
shl    $0x4,%r14d
mov    -0x128(%rbp),%rcx
lea    (%rcx,%r14,1),%eax
movslq %eax,%rax
movslq (%r8,%rax,4),%r14
movsbq 0x400(%r8,%rax,1),%rax
cmp    $0x1f,%edx
jg     11e60 <F_0_714+0x678e>
mov    %rdi,%r15
shl    %cl,%r12
lea    -0x1(%r12),%edi
mov    -0x40(%rbp),%r12
add    %r12d,%r11d
and    %r11d,%edi
movslq %edi,%rdi
mov    %rcx,%r11
mov    %rax,%rcx
shl    %cl,%r15
mov    %rcx,%rax
or     %r15,%r14
mov    %r11,%rcx
shl    %cl,%r14
or     %r14,%rdi
add    %edx,%eax
lea    (%rcx,%rax,1),%edx
mov    $0x1,%r12d
lea    0x37637(%rip),%rax        # 492b4 <jpeg_nbits_table>
xor    %r14d,%r14d
jmpq   11b0b <F_0_714+0x6439>
mov    %rcx,%r15
lea    0x38(%rdx),%ecx
mov    %rdi,%r12
shr    %cl,%r12
mov    %r12b,0x0(%r13)
lea    0x1(%r13),%rcx
cmp    $0xff,%r12b
je     11e86 <F_0_714+0x67b4>
mov    %rcx,%r12
jmpq   11e8d <F_0_714+0x67bb>
movb   $0x0,(%rcx)
lea    0x2(%r13),%r12
lea    0x30(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %r13b,(%r12)
lea    0x1(%r12),%rcx
cmp    $0xff,%r13b
je     11eb1 <F_0_714+0x67df>
mov    %rcx,%r12
jmpq   11eb8 <F_0_714+0x67e6>
movb   $0x0,(%rcx)
add    $0x2,%r10
lea    0x28(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %r13b,(%r10)
lea    0x1(%r10),%rcx
cmp    $0xff,%r13b
je     11edc <F_0_714+0x680a>
mov    %rcx,%r10
jmpq   11ee3 <F_0_714+0x6811>
movb   $0x0,(%rcx)
add    $0x2,%r10
lea    -0x20(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %rcx,%rdx
mov    %r13b,(%r10)
lea    0x1(%r10),%rcx
cmp    $0xff,%r13b
je     11f12 <F_0_714+0x6840>
mov    %rcx,%r13
mov    %r15,%rcx
mov    %rdi,%r15
mov    -0x38(%rbp),%r10
jmpq   112fe <F_0_714+0x5c2c>
movb   $0x0,(%rcx)
lea    0x2(%r10),%r13
mov    %r15,%rcx
mov    %rdi,%r15
mov    -0x38(%rbp),%r10
jmpq   110a7 <F_0_714+0x59d5>
lea    0x1(%r14),%eax
test   %eax,%eax
jle    11d7b <F_0_714+0x66a9>
movslq (%r8),%rsi
movsbq 0x400(%r8),%rax
cmp    $0x2f,%edx
jg     11f28 <F_0_714+0x6856>
mov    %rdi,%rcx
mov    %rsi,%rdi
mov    %rcx,%rsi
mov    %rax,%rcx
shl    %cl,%rsi
or     %rsi,%rdi
add    %ecx,%edx
mov    -0x8(%rbp),%r14
mov    %rdi,0x10(%r14)
mov    %edx,0x18(%r14)
test   %r10d,%r10d
jg     11fe7 <F_0_714+0x6915>
mov    (%r14),%rax
mov    %r13,%rcx
sub    %rax,%rcx
mov    0x8(%r14),%rax
sub    %rcx,%rax
mov    %rax,0x8(%r14)
mov    %r13,(%r14)
mov    %r12,%rax
mov    -0x18(%rbp),%r12
mov    -0x10(%rbp),%rbx
mov    -0x20(%rbp),%r13
mov    -0x28(%rbp),%r14
mov    -0x30(%rbp),%r15
leaveq 
retq   
movb   $0x0,(%rcx)
add    $0x2,%r13
lea    -0x30(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %rcx,%rdx
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%rcx
cmp    $0xff,%r15b
je     11ff6 <F_0_714+0x6924>
mov    %rcx,%r13
mov    %rbx,%rcx
shl    %cl,%rdi
mov    %rcx,%rbx
or     %r9,%rdi
add    %ebx,%edx
add    $0xfffffff0,%r14d
cmp    $0xf,%r14d
jg     12002 <F_0_714+0x6930>
shl    $0x4,%r14d
lea    (%rax,%r14,1),%ecx
movslq %ecx,%rcx
movslq (%r8,%rcx,4),%r9
movsbq 0x400(%r8,%rcx,1),%rbx
cmp    $0x1f,%edx
jg     1202e <F_0_714+0x695c>
mov    %rdi,%r14
mov    %rax,%rcx
mov    %r12,%rax
shl    %cl,%rax
add    $0xffffffff,%eax
add    %r11d,%esi
and    %esi,%eax
movslq %eax,%rdi
mov    %rcx,%rsi
mov    %rbx,%rcx
shl    %cl,%r14
mov    %rcx,%rax
or     %r14,%r9
mov    %rsi,%rcx
shl    %cl,%r9
or     %r9,%rdi
add    %edx,%eax
lea    (%rax,%rcx,1),%edx
xor    %eax,%eax
jmpq   11d4f <F_0_714+0x667d>
mov    %rcx,%r15
lea    0x38(%rdx),%ecx
mov    %rdi,%r12
shr    %cl,%r12
mov    %r12b,0x0(%r13)
lea    0x1(%r13),%rcx
cmp    $0xff,%r12b
je     120b0 <F_0_714+0x69de>
mov    %rcx,%r12
jmpq   120b7 <F_0_714+0x69e5>
movb   $0x0,(%rcx)
lea    0x2(%r13),%r12
lea    0x30(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %r13b,(%r12)
lea    0x1(%r12),%rcx
cmp    $0xff,%r13b
je     120db <F_0_714+0x6a09>
mov    %rcx,%r12
jmpq   120e2 <F_0_714+0x6a10>
movb   $0x0,(%rcx)
add    $0x2,%r12
lea    0x28(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %r13b,(%r12)
lea    0x1(%r12),%rcx
cmp    $0xff,%r13b
je     12106 <F_0_714+0x6a34>
mov    %rcx,%r12
jmpq   1210d <F_0_714+0x6a3b>
movb   $0x0,(%rcx)
add    $0x2,%r10
lea    -0x20(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %rcx,%rdx
mov    %r13b,(%r10)
lea    0x1(%r10),%rcx
cmp    $0xff,%r13b
je     12140 <F_0_714+0x6a6e>
mov    %rcx,%r13
mov    %r15,%rcx
mov    %rdi,%r15
mov    -0x38(%rbp),%r10
jmpq   11555 <F_0_714+0x5e83>
movb   $0x0,(%rcx)
lea    0x2(%r10),%r13
mov    %r15,%rcx
mov    %rdi,%r15
mov    -0x38(%rbp),%r10
jmpq   112fe <F_0_714+0x5c2c>
lea    0x38(%rdx),%ecx
mov    %rdi,%r8
shr    %cl,%r8
mov    %r8b,0x0(%r13)
lea    0x1(%r13),%rbx
cmp    $0xff,%r8b
jne    11f46 <F_0_714+0x6874>
movb   $0x0,(%rbx)
lea    0x2(%r13),%rbx
lea    0x30(%rdx),%ecx
mov    %rdi,%r9
shr    %cl,%r9
mov    %r9b,(%rbx)
lea    0x1(%rbx),%r8
cmp    $0xff,%r9b
jne    11f64 <F_0_714+0x6892>
movb   $0x0,(%r8)
lea    0x2(%rbx),%r8
lea    0x28(%rdx),%ecx
mov    %rdi,%r9
shr    %cl,%r9
mov    %r9b,(%r8)
lea    0x1(%r8),%rbx
cmp    $0xff,%r9b
jne    11f81 <F_0_714+0x68af>
movb   $0x0,(%rbx)
lea    0x2(%r8),%rbx
lea    0x20(%rdx),%ecx
mov    %rdi,%r9
shr    %cl,%r9
mov    %r9b,(%rbx)
lea    0x1(%rbx),%r8
cmp    $0xff,%r9b
jne    11f9f <F_0_714+0x68cd>
movb   $0x0,(%r8)
lea    0x2(%rbx),%r8
lea    0x18(%rdx),%ecx
mov    %rdi,%r9
shr    %cl,%r9
mov    %r9b,(%r8)
lea    0x1(%r8),%rbx
cmp    $0xff,%r9b
jne    11fbc <F_0_714+0x68ea>
movb   $0x0,(%rbx)
lea    0x2(%r8),%rbx
lea    -0x30(%rdx),%ecx
mov    %rdi,%r8
shr    %cl,%r8
mov    %rcx,%rdx
mov    %r8b,(%rbx)
lea    0x1(%rbx),%r13
cmp    $0xff,%r8b
je     12156 <F_0_714+0x6a84>
mov    %rdi,%rcx
mov    %rsi,%rdi
mov    %rcx,%rsi
jmpq   11d70 <F_0_714+0x669e>
lea    -0x228(%rbp),%rbx
sub    %rbx,%r13
jmpq   121b9 <F_0_714+0x6ae7>
movb   $0x0,(%rcx)
add    $0x2,%r13
jmpq   11de8 <F_0_714+0x6716>
cmp    $0x2f,%edx
jle    11de8 <F_0_714+0x6716>
lea    0x38(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%rcx
cmp    $0xff,%r15b
je     121d7 <F_0_714+0x6b05>
mov    %rcx,%r13
jmpq   121de <F_0_714+0x6b0c>
lea    0x38(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    1204d <F_0_714+0x697b>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    0x30(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
jne    1206c <F_0_714+0x699a>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
lea    0x28(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%r14
cmp    $0xff,%r15b
jne    1208b <F_0_714+0x69b9>
movb   $0x0,(%r14)
lea    0x2(%r13),%r14
lea    -0x20(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %rcx,%rdx
mov    %r15b,(%r14)
lea    0x1(%r14),%r13
cmp    $0xff,%r15b
je     12201 <F_0_714+0x6b2f>
mov    %rdi,%r14
jmpq   11e28 <F_0_714+0x6756>
movb   $0x0,(%rcx)
lea    0x2(%r13),%r12
lea    0x30(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %r13b,(%r12)
lea    0x1(%r12),%rcx
cmp    $0xff,%r13b
je     12212 <F_0_714+0x6b40>
mov    %rcx,%r12
jmpq   12219 <F_0_714+0x6b47>
movb   $0x0,(%rcx)
add    $0x2,%r12
lea    0x28(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %r13b,(%r12)
lea    0x1(%r12),%rcx
cmp    $0xff,%r13b
je     1223d <F_0_714+0x6b6b>
mov    %rcx,%r12
jmpq   12244 <F_0_714+0x6b72>
movb   $0x0,(%rcx)
add    $0x2,%r12
lea    -0x20(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %rcx,%rdx
mov    %r13b,(%r12)
lea    0x1(%r12),%rcx
cmp    $0xff,%r13b
je     12277 <F_0_714+0x6ba5>
mov    %rcx,%r13
mov    %r15,%rcx
mov    %rdi,%r15
mov    $0x1,%r12d
jmpq   117a9 <F_0_714+0x60d7>
movb   $0x0,(%rcx)
lea    0x2(%r10),%r13
mov    %r15,%rcx
mov    %rdi,%r15
mov    -0x38(%rbp),%r10
jmpq   11555 <F_0_714+0x5e83>
movb   $0x0,0x0(%r13)
lea    0x2(%rbx),%r13
mov    %rdi,%rcx
mov    %rsi,%rdi
mov    %rcx,%rsi
jmpq   11d70 <F_0_714+0x669e>
mov    0x8(%r14),%r15
cmp    %r13,%r15
jbe    12179 <F_0_714+0x6aa7>
mov    %r13,%r15
mov    (%r14),%rdi
mov    %rbx,%rsi
mov    %r15,%rdx
callq  42c0 <memcpy@plt>
mov    %r15,%rax
add    (%r14),%rax
mov    %rax,(%r14)
mov    0x8(%r14),%rcx
mov    %rcx,%rax
sub    %r15,%rax
mov    %rax,0x8(%r14)
cmp    %r15,%rcx
jne    121b3 <F_0_714+0x6ae1>
mov    %r14,%rdi
callq  8dc0 <dump_buffer>
test   %eax,%eax
je     12290 <F_0_714+0x6bbe>
sub    %r15,%r13
add    %r15,%rbx
test   %r13,%r13
jne    1216d <F_0_714+0x6a9b>
mov    %r12,%rax
mov    -0x18(%rbp),%r12
mov    -0x10(%rbp),%rbx
mov    -0x20(%rbp),%r13
mov    -0x28(%rbp),%r14
mov    -0x30(%rbp),%r15
leaveq 
retq   
movb   $0x0,(%rcx)
add    $0x2,%r13
lea    0x30(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%rcx
cmp    $0xff,%r15b
je     122a8 <F_0_714+0x6bd6>
mov    %rcx,%r13
jmpq   122af <F_0_714+0x6bdd>
movb   $0x0,0x0(%r13)
lea    0x2(%r14),%r13
mov    %rdi,%r14
jmpq   11e28 <F_0_714+0x6756>
movb   $0x0,(%rcx)
add    $0x2,%r12
lea    0x28(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %r13b,(%r12)
lea    0x1(%r12),%rcx
cmp    $0xff,%r13b
je     122cb <F_0_714+0x6bf9>
mov    %rcx,%r12
jmpq   122d2 <F_0_714+0x6c00>
movb   $0x0,(%rcx)
add    $0x2,%r12
lea    -0x20(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %rcx,%rdx
mov    %r13b,(%r12)
lea    0x1(%r12),%rcx
cmp    $0xff,%r13b
je     12301 <F_0_714+0x6c2f>
mov    %rcx,%r13
mov    %r15,%rcx
mov    %rdi,%r15
mov    $0x1,%r12d
jmpq   119fa <F_0_714+0x6328>
movb   $0x0,(%rcx)
lea    0x2(%r12),%r13
mov    %r15,%rcx
mov    %rdi,%r15
mov    $0x1,%r12d
jmpq   117a9 <F_0_714+0x60d7>
mov    -0x18(%rbp),%r12
xor    %eax,%eax
mov    -0x10(%rbp),%rbx
mov    -0x20(%rbp),%r13
mov    -0x28(%rbp),%r14
mov    -0x30(%rbp),%r15
leaveq 
retq   
movb   $0x0,(%rcx)
add    $0x2,%r13
lea    0x28(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%rcx
cmp    $0xff,%r15b
je     1231a <F_0_714+0x6c48>
mov    %rcx,%r13
jmp    12321 <F_0_714+0x6c4f>
movb   $0x0,(%rcx)
add    $0x2,%r12
lea    -0x20(%rdx),%ecx
mov    %rdi,%r13
shr    %cl,%r13
mov    %rcx,%rdx
mov    %r13b,(%r12)
lea    0x1(%r12),%rcx
cmp    $0xff,%r13b
je     1233d <F_0_714+0x6c6b>
mov    %rcx,%r13
mov    %r15,%rcx
mov    %rdi,%r15
mov    $0x1,%r12d
jmpq   11c3e <F_0_714+0x656c>
movb   $0x0,(%rcx)
lea    0x2(%r12),%r13
mov    %r15,%rcx
mov    %rdi,%r15
mov    $0x1,%r12d
jmpq   119fa <F_0_714+0x6328>
movb   $0x0,(%rcx)
add    $0x2,%r13
lea    0x20(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%rcx
cmp    $0xff,%r15b
je     12356 <F_0_714+0x6c84>
mov    %rcx,%r13
jmp    1235d <F_0_714+0x6c8b>
movb   $0x0,(%rcx)
lea    0x2(%r12),%r13
mov    %r15,%rcx
mov    %rdi,%r15
mov    $0x1,%r12d
jmpq   11c3e <F_0_714+0x656c>
movb   $0x0,(%rcx)
add    $0x2,%r13
lea    0x18(%rdx),%ecx
mov    %rdi,%r15
shr    %cl,%r15
mov    %r15b,0x0(%r13)
lea    0x1(%r13),%rcx
cmp    $0xff,%r15b
je     11dc0 <F_0_714+0x66ee>
mov    %rcx,%r13
jmpq   11dc7 <F_0_714+0x66f5>

0000000000012380 <emit_restart>:
push   %rbp
mov    %rsp,%rbp
sub    $0x10,%rsp
mov    %r15,-0x8(%rbp)
mov    %rsi,-0x10(%rbp)
mov    %rdi,%r15
callq  8e10 <flush_bits>
test   %eax,%eax
jne    123a4 <emit_restart+0x24>
xor    %eax,%eax
mov    -0x8(%rbp),%r15
leaveq 
retq   
mov    (%r15),%rcx
lea    0x1(%rcx),%rax
mov    %rax,(%r15)
movb   $0xff,(%rcx)
mov    0x8(%r15),%rax
add    $0xffffffffffffffff,%rax
mov    %rax,0x8(%r15)
test   %rax,%rax
je     123ec <emit_restart+0x6c>
mov    (%r15),%rcx
lea    0x1(%rcx),%rax
mov    %rax,(%r15)
mov    -0x10(%rbp),%rax
add    $0xd0,%eax
mov    %al,(%rcx)
mov    0x8(%r15),%rax
add    $0xffffffffffffffff,%rax
mov    %rax,0x8(%r15)
test   %rax,%rax
je     12400 <emit_restart+0x80>
xor    %eax,%eax
jmp    1241f <emit_restart+0x9f>
mov    %r15,%rdi
callq  8dc0 <dump_buffer>
test   %eax,%eax
jne    123c2 <emit_restart+0x42>
xor    %eax,%eax
mov    -0x8(%rbp),%r15
leaveq 
retq   
mov    %r15,%rdi
callq  8dc0 <dump_buffer>
test   %eax,%eax
je     12439 <emit_restart+0xb9>
xor    %eax,%eax
jmp    1241f <emit_restart+0x9f>
movslq %eax,%rcx
movl   $0x0,0x1c(%r15,%rcx,4)
add    $0x1,%eax
mov    0x30(%r15),%rcx
movslq 0x144(%rcx),%rcx
cmp    %eax,%ecx
jg     12410 <emit_restart+0x90>
mov    $0x1,%eax
mov    -0x8(%rbp),%r15
leaveq 
retq   
xor    %eax,%eax
mov    -0x8(%rbp),%r15
leaveq 
retq   
data16 nopw %cs:0x0(%rax,%rax,1)
nopl   0x0(%rax)

0000000000012450 <htest_one_block>:
push   %rbp
mov    %rsp,%rbp
sub    $0x40,%rsp
mov    %rbx,-0x8(%rbp)
mov    %r12,-0x10(%rbp)
mov    %r13,-0x18(%rbp)
mov    %r14,-0x20(%rbp)
mov    %r15,-0x28(%rbp)
mov    %rdi,-0x38(%rbp)
mov    %rsi,-0x30(%rbp)
xor    %r9d,%r9d
movswq (%rsi),%rbx
mov    %rbx,%rax
sub    %edx,%eax
test   %eax,%eax
js     12489 <htest_one_block+0x39>
mov    %r9,%rbx
jmp    12498 <htest_one_block+0x48>
mov    %rdx,%rax
sub    %ebx,%eax
mov    %r9,%rbx
jmp    12498 <htest_one_block+0x48>
sar    %eax
add    $0x1,%ebx
test   %eax,%eax
jne    12493 <htest_one_block+0x43>
cmp    $0xb,%ebx
jg     124a6 <htest_one_block+0x56>
mov    %r8,%r13
jmp    124d1 <htest_one_block+0x81>
mov    (%rdi),%rax
movl   $0x6,0x28(%rax)
mov    (%rdi),%rax
mov    (%rax),%rax
mov    %r9,%r12
mov    %r8,%r13
mov    %rsi,%r14
mov    %rcx,%r15
callq  *%rax
mov    %r15,%rcx
mov    %r14,%rsi
mov    %r12,%r9
mov    -0x38(%rbp),%rdi
mov    0x5bb00(%rip),%r14        # 6dfd8 <jpeg_natural_order@@LIBJPEG_6.2+0x129f4>
movslq %ebx,%rax
lea    (%rcx,%rax,8),%rcx
mov    (%rcx),%rax
add    $0x1,%rax
mov    %rax,(%rcx)
mov    $0x1,%edx
mov    %rdx,%r15
mov    %r9,%rbx
jmp    1250e <htest_one_block+0xbe>
movslq %r15d,%rax
movslq (%r14,%rax,4),%rax
movswq (%rsi,%rax,2),%rax
test   %ax,%ax
jne    12543 <htest_one_block+0xf3>
add    $0x1,%ebx
add    $0x1,%r15d
cmp    $0x3f,%r15d
jle    124f6 <htest_one_block+0xa6>
test   %ebx,%ebx
jg     12552 <htest_one_block+0x102>
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
leaveq 
retq   
mov    0x780(%r13),%rcx
add    $0x1,%rcx
mov    %rcx,0x780(%r13)
add    $0xfffffff0,%ebx
cmp    $0xf,%ebx
jg     1252e <htest_one_block+0xde>
test   %ax,%ax
js     12574 <htest_one_block+0x124>
mov    %rdx,%r12
jmp    12581 <htest_one_block+0x131>
mov    0x0(%r13),%rax
add    $0x1,%rax
mov    %rax,0x0(%r13)
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
leaveq 
retq   
neg    %eax
mov    %rdx,%r12
jmp    12581 <htest_one_block+0x131>
sar    %eax
add    $0x1,%r12d
mov    %rax,%rcx
and    $0xfffffffe,%ecx
test   %ecx,%ecx
jne    1257b <htest_one_block+0x12b>
cmp    $0xa,%r12d
jle    125b3 <htest_one_block+0x163>
mov    (%rdi),%rax
movl   $0x6,0x28(%rax)
mov    (%rdi),%rax
mov    (%rax),%rax
callq  *%rax
mov    $0x1,%edx
xor    %r9d,%r9d
mov    -0x30(%rbp),%rsi
mov    -0x38(%rbp),%rdi
shl    $0x4,%ebx
lea    (%r12,%rbx,1),%eax
movslq %eax,%rcx
mov    0x0(%r13,%rcx,8),%rax
add    $0x1,%rax
mov    %rax,0x0(%r13,%rcx,8)
mov    %r9,%rbx
jmpq   1250a <htest_one_block+0xba>
nopw   %cs:0x0(%rax,%rax,1)
nopl   (%rax)

00000000000125e0 <jinit_compress_master>:
push   %rbp
mov    %rsp,%rbp
sub    $0x10,%rsp
mov    %r15,-0x8(%rbp)
xor    %esi,%esi
mov    %rdi,%r15
callq  43c0 <jinit_c_master_control@plt>
movslq 0x100(%r15),%rax
test   %eax,%eax
jne    1261b <jinit_compress_master+0x3b>
mov    %r15,%rdi
callq  41b0 <jinit_color_converter@plt>
mov    %r15,%rdi
callq  4480 <jinit_downsampler@plt>
mov    %r15,%rdi
xor    %esi,%esi
callq  42e0 <jinit_c_prep_controller@plt>
mov    %r15,%rdi
callq  41a0 <jinit_forward_dct@plt>
movslq 0x104(%r15),%rax
test   %eax,%eax
jne    12643 <jinit_compress_master+0x63>
movslq 0x134(%r15),%rax
test   %eax,%eax
jne    12698 <jinit_compress_master+0xb8>
mov    %r15,%rdi
callq  4080 <jinit_huff_encoder@plt>
jmp    1264b <jinit_compress_master+0x6b>
mov    %r15,%rdi
callq  4190 <jinit_arith_encoder@plt>
mov    $0x1,%esi
movslq 0xf0(%r15),%rax
cmp    $0x1,%eax
jle    126a2 <jinit_compress_master+0xc2>
mov    %r15,%rdi
callq  4380 <jinit_c_coef_controller@plt>
mov    %r15,%rdi
xor    %esi,%esi
callq  4140 <jinit_c_main_controller@plt>
mov    %r15,%rdi
callq  4120 <jinit_marker_writer@plt>
mov    0x8(%r15),%rax
mov    0x30(%rax),%rax
mov    %r15,%rdi
callq  *%rax
mov    0x1d0(%r15),%rax
mov    (%rax),%rax
mov    %r15,%rdi
callq  *%rax
mov    -0x8(%rbp),%r15
leaveq 
retq   
mov    %r15,%rdi
callq  4460 <jinit_phuff_encoder@plt>
jmp    1264b <jinit_compress_master+0x6b>
movslq 0x108(%r15),%rax
test   %eax,%eax
jne    1265c <jinit_compress_master+0x7c>
xor    %esi,%esi
jmp    1265c <jinit_compress_master+0x7c>
nopw   %cs:0x0(%rax,%rax,1)
nopl   0x0(%rax,%rax,1)

00000000000126c0 <jinit_c_main_controller>:
push   %rbp
mov    %rsp,%rbp
sub    $0x30,%rsp
mov    %r15,-0x20(%rbp)
mov    %rsi,-0x28(%rbp)
mov    0x8(%rdi),%rax
mov    (%rax),%rax
mov    %rbx,%r15
mov    $0x1,%esi
mov    $0x70,%edx
mov    %rdi,%rbx
callq  *%rax
mov    %rax,0x1b8(%rbx)
lea    0x219(%rip),%rcx        # 12910 <start_pass_main>
mov    %rcx,(%rax)
movslq 0x100(%rbx),%rcx
test   %ecx,%ecx
je     1270e <jinit_c_main_controller+0x4e>
mov    %r15,%rbx
mov    -0x20(%rbp),%r15
leaveq 
retq   
mov    -0x28(%rbp),%rcx
test   %ecx,%ecx
jne    1273d <jinit_c_main_controller+0x7d>
mov    0x58(%rbx),%rdx
xor    %ecx,%ecx
mov    %r15,-0x8(%rbp)
mov    %r12,-0x10(%rbp)
mov    %r13,-0x18(%rbp)
mov    %r14,-0x28(%rbp)
mov    %rdx,%r12
mov    %rax,%r13
mov    %rcx,%r15
mov    $0x1,%r14d
jmp    1278b <jinit_c_main_controller+0xcb>
mov    (%rbx),%rax
movl   $0x4,0x28(%rax)
mov    (%rbx),%rax
mov    (%rax),%rax
mov    %rbx,%rdi
mov    %r15,%rbx
callq  *%rax
mov    -0x20(%rbp),%r15
leaveq 
retq   
mov    0x8(%rbx),%rax
mov    0x10(%rax),%rax
mov    0x1c(%r12),%edx
shl    $0x3,%edx
mov    0xc(%r12),%ecx
shl    $0x3,%ecx
mov    %rbx,%rdi
mov    %r14,%rsi
callq  *%rax
movslq %r15d,%rcx
mov    %rax,0x20(%r13,%rcx,8)
add    $0x1,%r15d
add    $0x60,%r12
movslq 0x4c(%rbx),%rax
cmp    %r15d,%eax
jg     1275b <jinit_c_main_controller+0x9b>
mov    -0x28(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
mov    -0x20(%rbp),%r15
leaveq 
retq   
nopw   0x0(%rax,%rax,1)

00000000000127b0 <process_data_simple_main>:
push   %rbp
mov    %rsp,%rbp
sub    $0x40,%rsp
mov    %rsi,-0x30(%rbp)
mov    %rcx,-0x38(%rbp)
mov    %rbx,-0x8(%rbp)
mov    %r12,-0x10(%rbp)
mov    %r13,-0x18(%rbp)
mov    %r14,-0x20(%rbp)
mov    %r15,-0x28(%rbp)
mov    0x1b8(%rdi),%r13
lea    0x20(%r13),%rax
mov    %rax,-0x40(%rbp)
lea    0x14(%r13),%r15
mov    %rsi,%rbx
mov    %rax,%rsi
mov    %rdi,%r12
mov    %rdx,%r14
jmpq   1288b <process_data_simple_main+0xdb>
mov    0x14(%r13),%eax
cmp    $0x7,%eax
ja     1283a <process_data_simple_main+0x8a>
sub    $0x10,%rsp
mov    0x1c0(%r12),%rax
mov    0x8(%rax),%rax
mov    %rbx,%r10
mov    %rsi,%rbx
mov    %r10,%rsi
movl   $0x8,(%rsp)
mov    %r12,%rdi
mov    %r14,%rdx
mov    %rbx,%r8
mov    %r15,%r9
callq  *%rax
add    $0x10,%rsp
mov    %rbx,%rsi
mov    -0x30(%rbp),%rbx
mov    0x14(%r13),%eax
cmp    $0x8,%eax
jne    128b3 <process_data_simple_main+0x103>
mov    0x1c8(%r12),%rax
mov    0x8(%rax),%rax
mov    %r12,%rdi
callq  *%rax
test   %eax,%eax
je     128c9 <process_data_simple_main+0x119>
movslq 0x18(%r13),%rax
test   %eax,%eax
je     12871 <process_data_simple_main+0xc1>
mov    (%r14),%eax
add    $0x1,%eax
mov    %eax,(%r14)
movl   $0x0,0x18(%r13)
movl   $0x0,(%r15)
mov    0x10(%r13),%eax
add    $0x1,%eax
mov    %eax,0x10(%r13)
mov    -0x40(%rbp),%rsi
mov    -0x38(%rbp),%rcx
mov    0x140(%r12),%eax
cmp    0x10(%r13),%eax
ja     127f8 <process_data_simple_main+0x48>
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
leaveq 
retq   
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
leaveq 
retq   
movslq 0x18(%r13),%rax
test   %eax,%eax
je     128e7 <process_data_simple_main+0x137>
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
leaveq 
retq   
mov    (%r14),%eax
add    $0xffffffff,%eax
mov    %eax,(%r14)
movl   $0x1,0x18(%r13)
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
leaveq 
retq   
xchg   %ax,%ax

0000000000012910 <start_pass_main>:
push   %rbp
mov    %rsp,%rbp
sub    $0x10,%rsp
mov    0x1b8(%rdi),%rax
movslq 0x100(%rdi),%rcx
test   %ecx,%ecx
je     1292c <start_pass_main+0x1c>
leaveq 
retq   
test   %esi,%esi
je     1295e <start_pass_main+0x4e>
mov    (%rdi),%rcx
movl   $0x4,0x28(%rcx)
mov    (%rdi),%rcx
mov    (%rcx),%rcx
mov    %r14,-0x8(%rbp)
mov    %r15,-0x10(%rbp)
mov    %rax,%r14
mov    %rsi,%r15
callq  *%rcx
mov    %r14,%rax
mov    %r15,%rsi
mov    -0x10(%rbp),%r15
mov    -0x8(%rbp),%r14
movl   $0x0,0x10(%rax)
movl   $0x0,0x14(%rax)
movl   $0x0,0x18(%rax)
mov    %esi,0x1c(%rax)
lea    -0x1cd(%rip),%rcx        # 127b0 <process_data_simple_main>
mov    %rcx,0x8(%rax)
leaveq 
retq   
nopw   %cs:0x0(%rax,%rax,1)
nopl   (%rax)

0000000000012990 <jinit_marker_writer>:
push   %rbp
mov    %rsp,%rbp
sub    $0x10,%rsp
mov    %r15,-0x8(%rbp)
mov    0x8(%rdi),%rax
mov    (%rax),%rax
mov    $0x1,%esi
mov    $0x40,%edx
mov    %rdi,%r15
callq  *%rax
mov    %rax,0x1d0(%r15)
lea    0x9f0(%rip),%rcx        # 133b0 <write_file_header>
mov    %rcx,(%rax)
lea    0xa56(%rip),%rcx        # 13420 <write_frame_header>
mov    %rcx,0x8(%rax)
lea    0xc0b(%rip),%rcx        # 135e0 <write_scan_header>
mov    %rcx,0x10(%rax)
lea    0xd00(%rip),%rcx        # 136e0 <write_file_trailer>
mov    %rcx,0x18(%rax)
lea    0xd05(%rip),%rcx        # 136f0 <write_tables_only>
mov    %rcx,0x20(%rax)
lea    0x93a(%rip),%rcx        # 13330 <write_marker_header>
mov    %rcx,0x28(%rax)
lea    0x99f(%rip),%rcx        # 133a0 <write_marker_byte>
mov    %rcx,0x30(%rax)
movl   $0x0,0x38(%rax)
mov    -0x8(%rbp),%r15
leaveq 
retq   
data16 nopw %cs:0x0(%rax,%rax,1)
nopl   (%rax)

0000000000012a20 <emit_byte>:
push   %rbp
mov    %rsp,%rbp
sub    $0x10,%rsp
mov    0x28(%rdi),%rcx
mov    (%rcx),%rax
lea    0x1(%rax),%rdx
mov    %rdx,(%rcx)
mov    %sil,(%rax)
mov    0x8(%rcx),%rax
add    $0xffffffffffffffff,%rax
mov    %rax,0x8(%rcx)
test   %rax,%rax
je     12a4c <emit_byte+0x2c>
leaveq 
retq   
mov    %rdi,%rax
mov    %r15,-0x8(%rbp)
mov    %rdi,%r15
mov    %rax,%rdi
callq  *0x18(%rcx)
test   %eax,%eax
je     12a66 <emit_byte+0x46>
mov    -0x8(%rbp),%r15
leaveq 
retq   
mov    (%r15),%rax
movl   $0x18,0x28(%rax)
mov    (%r15),%rax
mov    (%rax),%rax
mov    %r15,%rdi
callq  *%rax
mov    -0x8(%rbp),%r15
leaveq 
retq   
data16 nopw %cs:0x0(%rax,%rax,1)
nopl   0x0(%rax)

0000000000012a90 <emit_marker>:
push   %rbp
mov    %rsp,%rbp
sub    $0x10,%rsp
mov    %r14,-0x8(%rbp)
mov    %r15,-0x10(%rbp)
mov    %rsi,%r15
mov    $0xff,%esi
mov    %rdi,%r14
callq  12a20 <emit_byte>
mov    %r15,%rsi
mov    %r14,%rdi
callq  12a20 <emit_byte>
mov    -0x10(%rbp),%r15
mov    -0x8(%rbp),%r14
leaveq 
retq   
data16 nopw %cs:0x0(%rax,%rax,1)

0000000000012ad0 <emit_2bytes>:
push   %rbp
mov    %rsp,%rbp
sub    $0x10,%rsp
mov    %r14,-0x8(%rbp)
mov    %r15,-0x10(%rbp)
mov    %rsi,%rax
and    $0xff00,%eax
shr    $0x8,%eax
mov    %rsi,%r15
mov    %rax,%rsi
mov    %rdi,%r14
callq  12a20 <emit_byte>
movzbl %r15b,%esi
mov    %r14,%rdi
callq  12a20 <emit_byte>
mov    -0x10(%rbp),%r15
mov    -0x8(%rbp),%r14
leaveq 
retq   
nop

0000000000012b10 <emit_dqt>:
push   %rbp
mov    %rsp,%rbp
sub    $0x30,%rsp
mov    %r13,-0x20(%rbp)
mov    %r14,-0x28(%rbp)
mov    %r15,-0x30(%rbp)
mov    %rdi,-0x18(%rbp)
mov    %rsi,-0x10(%rbp)
xor    %r13d,%r13d
mov    $0x1,%r14d
movslq %esi,%rax
mov    0x60(%rdi,%rax,8),%r15
mov    %r15,-0x8(%rbp)
test   %r15,%r15
je     12b54 <emit_dqt+0x44>
mov    %r12,%rdx
mov    %rbx,%r12
mov    %r13,%rax
mov    %rax,%rbx
jmp    12b95 <emit_dqt+0x85>
mov    (%rdi),%rax
movl   $0x34,0x28(%rax)
mov    (%rdi),%rax
mov    %esi,0x2c(%rax)
mov    (%rdi),%rax
mov    (%rax),%rax
mov    %r12,%rcx
mov    %rbx,%r12
mov    %rcx,%rbx
callq  *%rax
mov    %rbx,%rdx
mov    %r13,%rax
mov    %rax,%rbx
jmp    12b95 <emit_dqt+0x85>
movslq %eax,%rcx
movzwl (%r15,%rcx,2),%ecx
cmp    $0xff,%cx
jbe    12b92 <emit_dqt+0x82>
mov    %r14,%rbx
add    $0x1,%eax
cmp    $0x3f,%eax
jle    12b80 <emit_dqt+0x70>
movslq 0x80(%r15),%rax
test   %eax,%eax
je     12bbc <emit_dqt+0xac>
mov    %rbx,%rax
mov    %r12,%rbx
mov    %rdx,%r12
mov    -0x30(%rbp),%r15
mov    -0x28(%rbp),%r14
mov    -0x20(%rbp),%r13
leaveq 
retq   
mov    $0xdb,%esi
mov    -0x18(%rbp),%r14
mov    %r14,%rdi
mov    %rdx,-0x18(%rbp)
callq  12a90 <emit_marker>
test   %ebx,%ebx
jg     12bdc <emit_dqt+0xcc>
mov    $0x43,%esi
jmp    12be1 <emit_dqt+0xd1>
mov    $0x83,%esi
mov    %r14,%rdi
callq  12ad0 <emit_2bytes>
mov    %rbx,%rax
neg    %eax
and    $0x10,%eax
mov    -0x10(%rbp),%rcx
lea    (%rcx,%rax,1),%esi
mov    %r14,%rdi
callq  12a20 <emit_byte>
mov    0x5b3d1(%rip),%rax        # 6dfd8 <jpeg_natural_order@@LIBJPEG_6.2+0x129f4>
mov    %r12,-0x10(%rbp)
mov    %rax,%r12
jmp    12c47 <emit_dqt+0x137>
test   %ebx,%ebx
movslq %r13d,%rax
movslq (%r12,%rax,4),%rax
movzwl (%r15,%rax,2),%eax
jle    12c38 <emit_dqt+0x128>
mov    %rax,%r15
mov    %r15,%rsi
shr    $0x8,%esi
mov    %r14,%rdi
callq  12a20 <emit_byte>
mov    %r15,%rax
mov    -0x8(%rbp),%r15
movzbl %al,%esi
mov    %r14,%rdi
callq  12a20 <emit_byte>
add    $0x1,%r13d
cmp    $0x3f,%r13d
jle    12c10 <emit_dqt+0x100>
movl   $0x1,0x80(%r15)
mov    %rbx,%rax
mov    -0x10(%rbp),%rbx
mov    -0x18(%rbp),%r12
mov    -0x30(%rbp),%r15
mov    -0x28(%rbp),%r14
mov    -0x20(%rbp),%r13
leaveq 
retq   
data16 nopw %cs:0x0(%rax,%rax,1)
nopl   0x0(%rax)

0000000000012c80 <emit_dht>:
push   %rbp
mov    %rsp,%rbp
sub    $0x30,%rsp
mov    %r15,-0x28(%rbp)
test   %edx,%edx
jne    12c9d <emit_dht+0x1d>
movslq %esi,%rax
mov    0x80(%rdi,%rax,8),%rax
jmp    12cab <emit_dht+0x2b>
movslq %esi,%rax
mov    0xa0(%rdi,%rax,8),%rax
add    $0x10,%esi
test   %rax,%rax
je     12cc7 <emit_dht+0x47>
mov    %r13,%rdx
mov    %rbx,%r13
mov    %rax,%rbx
mov    %r15,%rax
mov    %r14,%r15
mov    %r12,%r14
mov    %rdi,%r12
jmp    12d0b <emit_dht+0x8b>
mov    (%rdi),%rcx
movl   $0x32,0x28(%rcx)
mov    (%rdi),%rcx
mov    %esi,0x2c(%rcx)
mov    (%rdi),%rcx
mov    (%rcx),%rcx
mov    %rdi,%rdx
mov    %rdi,-0x20(%rbp)
mov    %rsi,-0x18(%rbp)
mov    %rdx,%rdi
mov    %r14,%r15
mov    %r12,%r14
mov    %r13,%r12
mov    %rbx,%r13
mov    %rax,%rbx
callq  *%rcx
mov    %r12,%rdx
mov    -0x18(%rbp),%rsi
mov    -0x20(%rbp),%r12
mov    -0x28(%rbp),%rax
movslq 0x114(%rbx),%rcx
test   %ecx,%ecx
je     12d27 <emit_dht+0xa7>
mov    %r13,%rbx
mov    %rdx,%r13
mov    %r14,%r12
mov    %r15,%r14
mov    %rax,%r15
leaveq 
retq   
mov    $0xc4,%eax
mov    %r12,%rdi
mov    %rdx,-0x18(%rbp)
mov    %r15,-0x20(%rbp)
mov    %rsi,%r15
mov    %rax,%rsi
callq  12a90 <emit_marker>
xor    %eax,%eax
mov    $0x1,%r8d
mov    %r8,%rcx
jmp    12d5b <emit_dht+0xdb>
movslq %ecx,%rdx
movzbl (%rbx,%rdx,1),%edx
add    %edx,%eax
add    $0x1,%ecx
cmp    $0x10,%ecx
jle    12d4f <emit_dht+0xcf>
lea    0x13(%rax),%esi
mov    %r12,%rdi
mov    %r13,-0x8(%rbp)
mov    %r14,-0x10(%rbp)
mov    %rax,%r13
mov    %r8,%r14
callq  12ad0 <emit_2bytes>
mov    %r15,%rsi
mov    %r12,%rdi
callq  12a20 <emit_byte>
jmp    12d99 <emit_dht+0x119>
movslq %r14d,%rax
movzbl (%rbx,%rax,1),%esi
mov    %r12,%rdi
callq  12a20 <emit_byte>
add    $0x1,%r14d
cmp    $0x10,%r14d
jle    12d86 <emit_dht+0x106>
xor    %r14d,%r14d
jmp    12db8 <emit_dht+0x138>
movslq %r14d,%rax
movzbl 0x11(%rbx,%rax,1),%esi
mov    %r12,%rdi
callq  12a20 <emit_byte>
add    $0x1,%r14d
cmp    %r13d,%r14d
jl     12da4 <emit_dht+0x124>
movl   $0x1,0x114(%rbx)
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x28(%rbp),%r15
leaveq 
retq   
nopl   (%rax)

0000000000012de0 <emit_dac>:
push   %rbp
mov    %rsp,%rbp
sub    $0x40,%rsp
xor    %r8d,%r8d
mov    %r8,%rax
jmp    12e00 <emit_dac+0x20>
movslq %eax,%rcx
movb   $0x0,-0x28(%rbp,%rcx,1)
movb   $0x0,-0x38(%rbp,%rcx,1)
add    $0x1,%eax
cmp    $0xf,%eax
jle    12df0 <emit_dac+0x10>
mov    %r8,%rax
jmp    12e4b <emit_dac+0x6b>
movslq %eax,%rcx
mov    0x148(%rdi,%rcx,8),%rdx
movslq 0x19c(%rdi),%rcx
test   %ecx,%ecx
jne    12e34 <emit_dac+0x54>
movslq 0x1a4(%rdi),%rcx
test   %ecx,%ecx
jne    12e34 <emit_dac+0x54>
movslq 0x14(%rdx),%rcx
movb   $0x1,-0x38(%rbp,%rcx,1)
movslq 0x1a0(%rdi),%rcx
test   %ecx,%ecx
je     12e48 <emit_dac+0x68>
movslq 0x18(%rdx),%rcx
movb   $0x1,-0x28(%rbp,%rcx,1)
add    $0x1,%eax
movslq 0x144(%rdi),%rcx
cmp    %eax,%ecx
jg     12e0a <emit_dac+0x2a>
mov    %r8,%rax
mov    %rax,%rcx
jmp    12e74 <emit_dac+0x94>
movslq %ecx,%rdx
movsbq -0x28(%rbp,%rdx,1),%rsi
movsbq -0x38(%rbp,%rdx,1),%rdx
add    %esi,%edx
add    %edx,%eax
add    $0x1,%ecx
cmp    $0xf,%ecx
jle    12e5e <emit_dac+0x7e>
test   %eax,%eax
jne    12e7f <emit_dac+0x9f>
leaveq 
retq   
mov    $0xcc,%esi
mov    %rdi,%rcx
mov    %r13,-0x8(%rbp)
mov    %r14,-0x10(%rbp)
mov    %r15,-0x18(%rbp)
mov    %r8,%r13
mov    %rdi,%r14
mov    %rcx,%rdi
mov    %rax,%r15
callq  12a90 <emit_marker>
lea    0x2(%r15,%r15,1),%esi
mov    %r14,%rdi
callq  12ad0 <emit_2bytes>
jmp    12f16 <emit_dac+0x136>
movslq %r13d,%r15
movsbq -0x38(%rbp,%r15,1),%rax
test   %al,%al
je     12eeb <emit_dac+0x10b>
mov    %r14,%rdi
mov    %r13,%rsi
callq  12a20 <emit_byte>
movzbl 0xc0(%r14,%r15,1),%ecx
movzbl 0xd0(%r14,%r15,1),%eax
shl    $0x4,%eax
lea    (%rcx,%rax,1),%esi
mov    %r14,%rdi
callq  12a20 <emit_byte>
movsbq -0x28(%rbp,%r15,1),%rax
test   %al,%al
je     12f12 <emit_dac+0x132>
lea    0x10(%r13),%esi
mov    %r14,%rdi
callq  12a20 <emit_byte>
movzbl 0xe0(%r14,%r15,1),%esi
mov    %r14,%rdi
callq  12a20 <emit_byte>
add    $0x1,%r13d
cmp    $0xf,%r13d
jle    12eb3 <emit_dac+0xd3>
mov    -0x18(%rbp),%r15
mov    -0x10(%rbp),%r14
mov    -0x8(%rbp),%r13
leaveq 
retq   
nopw   0x0(%rax,%rax,1)

0000000000012f30 <emit_dri>:
push   %rbp
mov    %rsp,%rbp
sub    $0x10,%rsp
mov    %r15,-0x8(%rbp)
mov    $0xdd,%esi
mov    %rdi,%r15
callq  12a90 <emit_marker>
mov    $0x4,%esi
mov    %r15,%rdi
callq  12ad0 <emit_2bytes>
mov    %r15,%rdi
movslq 0x118(%rdi),%rsi
callq  12ad0 <emit_2bytes>
mov    -0x8(%rbp),%r15
leaveq 
retq   
nopl   0x0(%rax,%rax,1)

0000000000012f70 <emit_sof>:
push   %rbp
mov    %rsp,%rbp
sub    $0x20,%rsp
mov    %r15,-0x18(%rbp)
mov    %r13,-0x8(%rbp)
mov    %r14,-0x10(%rbp)
mov    %rdi,%r13
callq  12a90 <emit_marker>
movslq 0x4c(%r13),%rax
lea    0x8(%rax,%rax,2),%esi
mov    %r13,%rdi
callq  12ad0 <emit_2bytes>
mov    0x34(%r13),%eax
cmp    $0xffff,%eax
ja     12fb2 <emit_sof+0x42>
mov    0x30(%r13),%eax
cmp    $0xffff,%eax
jbe    12fd4 <emit_sof+0x64>
mov    0x0(%r13),%rax
movl   $0x29,0x28(%rax)
mov    0x0(%r13),%rax
movl   $0xffff,0x2c(%rax)
mov    0x0(%r13),%rax
mov    (%rax),%rax
mov    %r13,%rdi
callq  *%rax
movslq 0x48(%r13),%rsi
mov    %r13,%rdi
callq  12a20 <emit_byte>
movslq 0x34(%r13),%rsi
mov    %r13,%rdi
callq  12ad0 <emit_2bytes>
movslq 0x30(%r13),%rsi
mov    %r13,%rdi
callq  12ad0 <emit_2bytes>
movslq 0x4c(%r13),%rsi
mov    %r13,%rdi
callq  12a20 <emit_byte>
mov    0x58(%r13),%r15
xor    %r14d,%r14d
jmp    1303f <emit_sof+0xcf>
movslq (%r15),%rsi
mov    %r13,%rdi
callq  12a20 <emit_byte>
movslq 0x8(%r15),%rsi
shl    $0x4,%esi
add    0xc(%r15),%esi
mov    %r13,%rdi
callq  12a20 <emit_byte>
movslq 0x10(%r15),%rsi
mov    %r13,%rdi
callq  12a20 <emit_byte>
add    $0x1,%r14d
add    $0x60,%r15
movslq 0x4c(%r13),%rax
cmp    %r14d,%eax
jg     1300d <emit_sof+0x9d>
mov    -0x10(%rbp),%r14
mov    -0x8(%rbp),%r13
mov    -0x18(%rbp),%r15
leaveq 
retq   
nopw   %cs:0x0(%rax,%rax,1)

0000000000013060 <emit_sos>:
push   %rbp
mov    %rsp,%rbp
sub    $0x20,%rsp
mov    %r15,-0x20(%rbp)
mov    %r12,-0x8(%rbp)
mov    %r13,-0x10(%rbp)
mov    %r14,-0x18(%rbp)
mov    $0xda,%esi
mov    %rdi,%r12
callq  12a90 <emit_marker>
movslq 0x144(%r12),%rax
lea    0x6(%rax,%rax,1),%esi
mov    %r12,%rdi
callq  12ad0 <emit_2bytes>
movslq 0x144(%r12),%rsi
mov    %r12,%rdi
callq  12a20 <emit_byte>
xor    %r13d,%r13d
mov    %r13,%r14
jmp    130c7 <emit_sos+0x67>
movslq 0x18(%r15),%rcx
shl    $0x4,%eax
lea    (%rcx,%rax,1),%esi
mov    %r12,%rdi
callq  12a20 <emit_byte>
add    $0x1,%r14d
movslq 0x144(%r12),%rax
cmp    %r14d,%eax
jg     13121 <emit_sos+0xc1>
movslq 0x19c(%r12),%rsi
mov    %r12,%rdi
callq  12a20 <emit_byte>
movslq 0x1a0(%r12),%rsi
mov    %r12,%rdi
callq  12a20 <emit_byte>
movslq 0x1a4(%r12),%rsi
shl    $0x4,%esi
add    0x1a8(%r12),%esi
mov    %r12,%rdi
callq  12a20 <emit_byte>
mov    -0x18(%rbp),%r14
mov    -0x10(%rbp),%r13
mov    -0x8(%rbp),%r12
mov    -0x20(%rbp),%r15
leaveq 
retq   
movslq %r14d,%rax
mov    0x148(%r12,%rax,8),%r15
movslq (%r15),%rsi
mov    %r12,%rdi
callq  12a20 <emit_byte>
movslq 0x19c(%r12),%rax
test   %eax,%eax
je     1315e <emit_sos+0xfe>
mov    %r13,%rax
movslq 0x1a0(%r12),%rcx
test   %ecx,%ecx
jne    130b1 <emit_sos+0x51>
mov    %r13,%rcx
jmpq   130b5 <emit_sos+0x55>
movslq 0x1a4(%r12),%rax
test   %eax,%eax
je     1316f <emit_sos+0x10f>
mov    %r13,%rax
jmp    13146 <emit_sos+0xe6>
movslq 0x14(%r15),%rax
jmp    13146 <emit_sos+0xe6>
data16 nopw %cs:0x0(%rax,%rax,1)

0000000000013180 <emit_jfif_app0>:
push   %rbp
mov    %rsp,%rbp
sub    $0x10,%rsp
mov    %r15,-0x10(%rbp)
mov    %r14,-0x8(%rbp)
mov    $0xe0,%esi
mov    %rdi,%r14
callq  12a90 <emit_marker>
mov    $0x10,%esi
mov    %r14,%rdi
callq  12ad0 <emit_2bytes>
mov    $0x4a,%esi
mov    %r14,%rdi
callq  12a20 <emit_byte>
mov    $0x46,%r15d
mov    %r14,%rdi
mov    %r15,%rsi
callq  12a20 <emit_byte>
mov    $0x49,%esi
mov    %r14,%rdi
callq  12a20 <emit_byte>
mov    %r15,%rsi
mov    %r14,%rdi
callq  12a20 <emit_byte>
xor    %r15d,%r15d
mov    %r14,%rdi
mov    %r15,%rsi
callq  12a20 <emit_byte>
movzbl 0x124(%r14),%esi
mov    %r14,%rdi
callq  12a20 <emit_byte>
movzbl 0x125(%r14),%esi
mov    %r14,%rdi
callq  12a20 <emit_byte>
movzbl 0x126(%r14),%esi
mov    %r14,%rdi
callq  12a20 <emit_byte>
movzwl 0x128(%r14),%esi
mov    %r14,%rdi
callq  12ad0 <emit_2bytes>
movzwl 0x12a(%r14),%esi
mov    %r14,%rdi
callq  12ad0 <emit_2bytes>
mov    %r14,%rdi
mov    %r15,%rsi
callq  12a20 <emit_byte>
mov    %r15,%rsi
mov    %r14,%rdi
callq  12a20 <emit_byte>
mov    -0x8(%rbp),%r14
mov    -0x10(%rbp),%r15
leaveq 
retq   
xchg   %ax,%ax

0000000000013260 <emit_adobe_app14>:
push   %rbp
mov    %rsp,%rbp
sub    $0x10,%rsp
mov    %r15,-0x8(%rbp)
mov    $0xee,%esi
mov    %rdi,%r15
callq  12a90 <emit_marker>
mov    $0xe,%esi
mov    %r15,%rdi
callq  12ad0 <emit_2bytes>
mov    $0x41,%esi
mov    %r15,%rdi
callq  12a20 <emit_byte>
mov    $0x64,%esi
mov    %r15,%rdi
callq  12a20 <emit_byte>
mov    $0x6f,%esi
mov    %r15,%rdi
callq  12a20 <emit_byte>
mov    $0x62,%esi
mov    %r15,%rdi
callq  12a20 <emit_byte>
mov    $0x65,%esi
mov    %r15,%rdi
callq  12a20 <emit_byte>
mov    %r15,%rdi
mov    $0x64,%esi
callq  12ad0 <emit_2bytes>
xor    %esi,%esi
mov    %r15,%rdi
callq  12ad0 <emit_2bytes>
mov    %r15,%rdi
xor    %esi,%esi
callq  12ad0 <emit_2bytes>
mov    0x50(%r15),%eax
cmp    $0x3,%eax
je     13306 <emit_adobe_app14+0xa6>
cmp    $0x5,%eax
je     13319 <emit_adobe_app14+0xb9>
mov    %r15,%rdi
xor    %esi,%esi
callq  12a20 <emit_byte>
mov    -0x8(%rbp),%r15
leaveq 
retq   
mov    %r15,%rdi
mov    $0x1,%esi
callq  12a20 <emit_byte>
mov    -0x8(%rbp),%r15
leaveq 
retq   
mov    %r15,%rdi
mov    $0x2,%esi
callq  12a20 <emit_byte>
mov    -0x8(%rbp),%r15
leaveq 
retq   
nopl   0x0(%rax)

0000000000013330 <write_marker_header>:
push   %rbp
mov    %rsp,%rbp
sub    $0x20,%rsp
mov    %r14,-0x10(%rbp)
mov    %r15,-0x18(%rbp)
cmp    $0xfffd,%edx
ja     13350 <write_marker_header+0x20>
mov    %rdi,%r14
mov    %rdx,%r15
jmp    1337c <write_marker_header+0x4c>
mov    (%rdi),%rax
movl   $0xb,0x28(%rax)
mov    (%rdi),%rax
mov    (%rax),%rax
mov    %rdi,%rcx
mov    %r13,-0x8(%rbp)
mov    %rsi,%r13
mov    %rdi,%r14
mov    %rcx,%rdi
mov    %rdx,%r15
callq  *%rax
mov    %r13,%rsi
mov    -0x8(%rbp),%r13
mov    %r14,%rdi
callq  12a90 <emit_marker>
lea    0x2(%r15),%esi
mov    %r14,%rdi
callq  12ad0 <emit_2bytes>
mov    -0x18(%rbp),%r15
mov    -0x10(%rbp),%r14
leaveq 
retq   
nopw   0x0(%rax,%rax,1)

00000000000133a0 <write_marker_byte>:
push   %rbp
mov    %rsp,%rbp
callq  12a20 <emit_byte>
leaveq 
retq   
nopl   0x0(%rax,%rax,1)

00000000000133b0 <write_file_header>:
push   %rbp
mov    %rsp,%rbp
sub    $0x10,%rsp
mov    %r14,-0x8(%rbp)
mov    %r15,-0x10(%rbp)
mov    $0xd8,%esi
mov    0x1d0(%rdi),%r15
mov    %rdi,%r14
callq  12a90 <emit_marker>
movl   $0x0,0x38(%r15)
movslq 0x120(%r14),%rax
test   %eax,%eax
je     133ef <write_file_header+0x3f>
mov    %r14,%rdi
callq  13180 <emit_jfif_app0>
movslq 0x12c(%r14),%rax
test   %eax,%eax
jne    13404 <write_file_header+0x54>
mov    -0x10(%rbp),%r15
mov    -0x8(%rbp),%r14
leaveq 
retq   
mov    %r14,%rdi
callq  13260 <emit_adobe_app14>
mov    -0x10(%rbp),%r15
mov    -0x8(%rbp),%r14
leaveq 
retq   
nopw   %cs:0x0(%rax,%rax,1)

0000000000013420 <write_frame_header>:
push   %rbp
mov    %rsp,%rbp
sub    $0x20,%rsp
mov    %r12,-0x8(%rbp)
mov    %r13,-0x10(%rbp)
mov    %r14,-0x18(%rbp)
mov    %r15,-0x20(%rbp)
mov    0x58(%rdi),%rax
add    $0x10,%rax
mov    %rdi,%r12
xor    %r13d,%r13d
mov    %r13,%r14
jmp    13464 <write_frame_header+0x44>
lea    0x60(%rax),%r15
movslq (%rax),%rsi
mov    %r12,%rdi
callq  12b10 <emit_dqt>
add    %eax,%r14d
add    $0x1,%r13d
mov    %r15,%rax
movslq 0x4c(%r12),%rcx
cmp    %r13d,%ecx
jg     1344b <write_frame_header+0x2b>
movslq 0x104(%r12),%rax
test   %eax,%eax
je     134b7 <write_frame_header+0x97>
xor    %eax,%eax
movslq 0x104(%r12),%rcx
test   %ecx,%ecx
jne    134c7 <write_frame_header+0xa7>
movslq 0x134(%r12),%rcx
test   %ecx,%ecx
jne    134f2 <write_frame_header+0xd2>
test   %eax,%eax
jg     13511 <write_frame_header+0xf1>
mov    %r12,%rdi
mov    $0xc1,%esi
callq  12f70 <emit_sof>
mov    -0x20(%rbp),%r15
mov    -0x18(%rbp),%r14
mov    -0x10(%rbp),%r13
mov    -0x8(%rbp),%r12
leaveq 
retq   
movslq 0x134(%r12),%rax
test   %eax,%eax
je     13530 <write_frame_header+0x110>
xor    %eax,%eax
jmp    1347c <write_frame_header+0x5c>
movslq 0x134(%r12),%rax
test   %eax,%eax
jne    13541 <write_frame_header+0x121>
mov    %r12,%rdi
mov    $0xc9,%esi
callq  12f70 <emit_sof>
mov    -0x20(%rbp),%r15
mov    -0x18(%rbp),%r14
mov    -0x10(%rbp),%r13
mov    -0x8(%rbp),%r12
leaveq 
retq   
mov    %r12,%rdi
mov    $0xc2,%esi
callq  12f70 <emit_sof>
mov    -0x20(%rbp),%r15
mov    -0x18(%rbp),%r14
mov    -0x10(%rbp),%r13
mov    -0x8(%rbp),%r12
leaveq 
retq   
mov    %r12,%rdi
mov    $0xc0,%esi
callq  12f70 <emit_sof>
mov    -0x20(%rbp),%r15
mov    -0x18(%rbp),%r14
mov    -0x10(%rbp),%r13
mov    -0x8(%rbp),%r12
leaveq 
retq   
movslq 0x48(%r12),%rax
cmp    $0x8,%eax
je     13560 <write_frame_header+0x140>
xor    %eax,%eax
jmpq   1347c <write_frame_header+0x5c>
mov    %r12,%rdi
mov    $0xca,%esi
callq  12f70 <emit_sof>
mov    -0x20(%rbp),%r15
mov    -0x18(%rbp),%r14
mov    -0x10(%rbp),%r13
mov    -0x8(%rbp),%r12
leaveq 
retq   
mov    0x58(%r12),%rcx
mov    $0x1,%eax
xor    %r13d,%r13d
mov    %r13,%rdx
jmp    13585 <write_frame_header+0x165>
movslq 0x14(%rcx),%rsi
cmp    $0x1,%esi
jle    135a3 <write_frame_header+0x183>
mov    %r13,%rax
add    $0x60,%rcx
add    $0x1,%edx
movslq 0x4c(%r12),%rsi
cmp    %edx,%esi
jg     13572 <write_frame_header+0x152>
test   %r14d,%r14d
je     1347c <write_frame_header+0x5c>
test   %eax,%eax
jg     135b1 <write_frame_header+0x191>
mov    %r13,%rax
jmpq   1347c <write_frame_header+0x5c>
movslq 0x18(%rcx),%rsi
cmp    $0x1,%esi
jle    1357e <write_frame_header+0x15e>
mov    %r13,%rax
jmp    1357e <write_frame_header+0x15e>
mov    (%r12),%rax
movl   $0x4b,0x28(%rax)
mov    (%r12),%rax
mov    0x8(%rax),%rax
mov    %r12,%rdi
mov    %r13,%rsi
callq  *%rax
mov    %r13,%rax
jmpq   1347c <write_frame_header+0x5c>
data16 nopw %cs:0x0(%rax,%rax,1)
nop

00000000000135e0 <write_scan_header>:
push   %rbp
mov    %rsp,%rbp
sub    $0x30,%rsp
mov    %r14,-0x20(%rbp)
mov    %r15,-0x28(%rbp)
mov    0x1d0(%rdi),%rcx
movslq 0x104(%rdi),%rax
test   %eax,%eax
jne    13626 <write_scan_header+0x46>
xor    %r14d,%r14d
mov    $0x1,%r15d
mov    %rcx,-0x30(%rbp)
mov    %rbx,-0x8(%rbp)
mov    %r12,-0x10(%rbp)
mov    %r13,-0x18(%rbp)
mov    %rdi,%rbx
mov    %r14,%r12
jmpq   136b5 <write_scan_header+0xd5>
mov    %rbx,%r14
mov    %rcx,%r15
mov    %rdi,%rbx
callq  12de0 <emit_dac>
mov    0x38(%r15),%eax
cmp    0x118(%rbx),%eax
je     13652 <write_scan_header+0x72>
mov    %rbx,%rdi
callq  12f30 <emit_dri>
mov    0x118(%rbx),%eax
mov    %eax,0x38(%r15)
mov    %rbx,%rdi
callq  13060 <emit_sos>
mov    %r14,%rbx
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
leaveq 
retq   
movslq %r12d,%rax
mov    0x148(%rbx,%rax,8),%r13
movslq 0x19c(%rbx),%rax
test   %eax,%eax
jne    13697 <write_scan_header+0xb7>
movslq 0x1a4(%rbx),%rax
test   %eax,%eax
jne    13697 <write_scan_header+0xb7>
movslq 0x14(%r13),%rsi
mov    %rbx,%rdi
mov    %r14,%rdx
callq  12c80 <emit_dht>
movslq 0x1a0(%rbx),%rax
test   %eax,%eax
je     136b1 <write_scan_header+0xd1>
movslq 0x18(%r13),%rsi
mov    %rbx,%rdi
mov    %r15,%rdx
callq  12c80 <emit_dht>
add    $0x1,%r12d
movslq 0x144(%rbx),%rax
cmp    %r12d,%eax
jg     13667 <write_scan_header+0x87>
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%r14
mov    -0x30(%rbp),%r15
jmpq   13634 <write_scan_header+0x54>
nopw   %cs:0x0(%rax,%rax,1)

00000000000136e0 <write_file_trailer>:
push   %rbp
mov    %rsp,%rbp
mov    $0xd9,%esi
callq  12a90 <emit_marker>
leaveq 
retq   

00000000000136f0 <write_tables_only>:
push   %rbp
mov    %rsp,%rbp
sub    $0x30,%rsp
mov    %r15,-0x28(%rbp)
mov    %r14,-0x20(%rbp)
mov    %rbx,%r14
mov    $0xd8,%esi
mov    %rdi,%rbx
callq  12a90 <emit_marker>
xor    %r15d,%r15d
jmp    13731 <write_tables_only+0x41>
movslq %r15d,%rax
mov    0x60(%rbx,%rax,8),%rax
test   %rax,%rax
je     1372d <write_tables_only+0x3d>
mov    %rbx,%rdi
mov    %r15,%rsi
callq  12b10 <emit_dqt>
add    $0x1,%r15d
cmp    $0x3,%r15d
jle    13715 <write_tables_only+0x25>
movslq 0x104(%rbx),%rax
test   %eax,%eax
jne    137ab <write_tables_only+0xbb>
mov    $0x1,%r15d
mov    %r14,-0x8(%rbp)
mov    %r12,-0x10(%rbp)
mov    %r13,-0x18(%rbp)
xor    %r12d,%r12d
mov    %r12,%r13
jmp    13799 <write_tables_only+0xa9>
movslq %r13d,%r14
mov    0x80(%rbx,%r14,8),%rax
test   %rax,%rax
je     1377a <write_tables_only+0x8a>
mov    %rbx,%rdi
mov    %r13,%rsi
mov    %r12,%rdx
callq  12c80 <emit_dht>
mov    0xa0(%rbx,%r14,8),%rax
test   %rax,%rax
je     13795 <write_tables_only+0xa5>
mov    %rbx,%rdi
mov    %r13,%rsi
mov    %r15,%rdx
callq  12c80 <emit_dht>
add    $0x1,%r13d
cmp    $0x3,%r13d
jle    1375c <write_tables_only+0x6c>
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%r14
mov    %rbx,%rdi
mov    $0xd9,%esi
callq  12a90 <emit_marker>
mov    %r14,%rbx
mov    -0x20(%rbp),%r14
mov    -0x28(%rbp),%r15
leaveq 
retq   
nopw   %cs:0x0(%rax,%rax,1)
nop

00000000000137d0 <jinit_c_master_control>:
push   %rbp
mov    %rsp,%rbp
sub    $0x20,%rsp
mov    %r14,-0x10(%rbp)
mov    %r15,-0x18(%rbp)
mov    %r13,-0x8(%rbp)
mov    0x8(%rdi),%rax
mov    (%rax),%rax
mov    %rsi,%r14
mov    $0x1,%esi
mov    $0x38,%edx
mov    %rdi,%r13
callq  *%rax
mov    %rax,0x1b0(%r13)
lea    0xc35(%rip),%rcx        # 14440 <prepare_for_pass>
mov    %rcx,(%rax)
lea    0xe9b(%rip),%rcx        # 146b0 <pass_startup>
mov    %rcx,0x8(%rax)
lea    0xed0(%rip),%rcx        # 146f0 <finish_pass_master>
mov    %rcx,0x10(%rax)
mov    %rax,%r15
movl   $0x0,0x1c(%r15)
mov    %r13,%rdi
mov    %r14,%rsi
callq  13910 <initial_setup>
mov    0xf8(%r13),%rax
test   %rax,%rax
jne    1385e <jinit_c_master_control+0x8e>
movl   $0x0,0x134(%r13)
movl   $0x1,0xf0(%r13)
jmp    13866 <jinit_c_master_control+0x96>
mov    %r13,%rdi
callq  13b90 <validate_script>
movslq 0x134(%r13),%rax
test   %eax,%eax
jne    138a6 <jinit_c_master_control+0xd6>
test   %r14d,%r14d
jne    138be <jinit_c_master_control+0xee>
movl   $0x0,0x20(%r15)
movl   $0x0,0x2c(%r15)
movl   $0x0,0x24(%r15)
movslq 0x108(%r13),%rax
test   %eax,%eax
jne    138d3 <jinit_c_master_control+0x103>
movslq 0xf0(%r13),%rax
mov    %eax,0x28(%r15)
jmp    138e0 <jinit_c_master_control+0x110>
movslq 0x104(%r13),%rax
test   %eax,%eax
jne    13871 <jinit_c_master_control+0xa1>
movl   $0x1,0x108(%r13)
jmp    13871 <jinit_c_master_control+0xa1>
movslq 0x108(%r13),%rax
test   %eax,%eax
jne    138f9 <jinit_c_master_control+0x129>
movl   $0x2,0x20(%r15)
jmp    1387e <jinit_c_master_control+0xae>
movslq 0xf0(%r13),%rax
add    %eax,%eax
mov    %eax,0x28(%r15)
lea    0x459cd(%rip),%rax        # 592b4 <jpeg_nbits_table+0x10000>
mov    %rax,0x30(%r15)
mov    -0x8(%rbp),%r13
mov    -0x18(%rbp),%r15
mov    -0x10(%rbp),%r14
leaveq 
retq   
movl   $0x1,0x20(%r15)
jmpq   1387e <jinit_c_master_control+0xae>
nopw   %cs:0x0(%rax,%rax,1)

0000000000013910 <initial_setup>:
push   %rbp
mov    %rsp,%rbp
sub    $0x20,%rsp
mov    %r15,-0x18(%rbp)
mov    %r13,-0x8(%rbp)
mov    %r14,-0x10(%rbp)
mov    0x34(%rdi),%eax
test   %eax,%eax
je     13947 <initial_setup+0x37>
mov    0x30(%rdi),%eax
test   %eax,%eax
je     13947 <initial_setup+0x37>
movslq 0x4c(%rdi),%rax
test   %eax,%eax
jle    13947 <initial_setup+0x37>
movslq 0x38(%rdi),%rax
test   %eax,%eax
jle    13947 <initial_setup+0x37>
mov    %rdi,%r13
jmp    1395c <initial_setup+0x4c>
mov    (%rdi),%rax
movl   $0x20,0x28(%rax)
mov    (%rdi),%rax
mov    (%rax),%rax
mov    %rdi,%r13
callq  *%rax
mov    0x34(%r13),%eax
cmp    $0xffdc,%eax
ja     13972 <initial_setup+0x62>
mov    0x30(%r13),%eax
cmp    $0xffdc,%eax
jbe    13994 <initial_setup+0x84>
mov    0x0(%r13),%rax
movl   $0x29,0x28(%rax)
mov    0x0(%r13),%rax
movl   $0xffdc,0x2c(%rax)
mov    0x0(%r13),%rax
mov    (%rax),%rax
mov    %r13,%rdi
callq  *%rax
movslq 0x38(%r13),%rax
mov    0x30(%r13),%ecx
imul   %rcx,%rax
mov    %eax,%ecx
cmp    %rax,%rcx
je     139be <initial_setup+0xae>
mov    0x0(%r13),%rax
movl   $0x46,0x28(%rax)
mov    0x0(%r13),%rax
mov    (%rax),%rax
mov    %r13,%rdi
callq  *%rax
movslq 0x48(%r13),%rax
cmp    $0x8,%eax
je     139e9 <initial_setup+0xd9>
mov    0x0(%r13),%rax
movl   $0xf,0x28(%rax)
movslq 0x48(%r13),%rcx
mov    0x0(%r13),%rax
mov    %ecx,0x2c(%rax)
mov    0x0(%r13),%rax
mov    (%rax),%rax
mov    %r13,%rdi
callq  *%rax
movslq 0x4c(%r13),%rax
cmp    $0xa,%eax
jle    13a1f <initial_setup+0x10f>
mov    0x0(%r13),%rax
movl   $0x1a,0x28(%rax)
movslq 0x4c(%r13),%rcx
mov    0x0(%r13),%rax
mov    %ecx,0x2c(%rax)
mov    0x0(%r13),%rax
movl   $0xa,0x30(%rax)
mov    0x0(%r13),%rax
mov    (%rax),%rax
mov    %r13,%rdi
callq  *%rax
mov    0x58(%r13),%r14
movl   $0x1,0x138(%r13)
movl   $0x1,0x13c(%r13)
xor    %r15d,%r15d
jmp    13aa9 <initial_setup+0x199>
movslq 0x8(%r14),%rax
test   %eax,%eax
jle    13a58 <initial_setup+0x148>
cmp    $0x4,%eax
jg     13a58 <initial_setup+0x148>
movslq 0xc(%r14),%rax
test   %eax,%eax
jle    13a58 <initial_setup+0x148>
cmp    $0x4,%eax
jle    13a6f <initial_setup+0x15f>
mov    0x0(%r13),%rax
movl   $0x12,0x28(%rax)
mov    0x0(%r13),%rax
mov    (%rax),%rax
mov    %r13,%rdi
callq  *%rax
movslq 0x138(%r13),%rcx
movslq 0x8(%r14),%rax
cmp    %ecx,%eax
jge    13a81 <initial_setup+0x171>
mov    %rcx,%rax
mov    %eax,0x138(%r13)
movslq 0x13c(%r13),%rcx
movslq 0xc(%r14),%rax
cmp    %ecx,%eax
jge    13a9a <initial_setup+0x18a>
mov    %rcx,%rax
mov    %eax,0x13c(%r13)
add    $0x60,%r14
add    $0x1,%r15d
movslq 0x4c(%r13),%rax
cmp    %r15d,%eax
jg     13a3e <initial_setup+0x12e>
mov    0x58(%r13),%r15
xor    %r14d,%r14d
jmpq   13b56 <initial_setup+0x246>
mov    %r14d,0x4(%r15)
movl   $0x8,0x24(%r15)
movslq 0x8(%r15),%rdi
mov    0x30(%r13),%eax
imul   %rax,%rdi
movslq 0x138(%r13),%rax
shl    $0x3,%eax
movslq %eax,%rsi
callq  4150 <jdiv_round_up@plt>
mov    %eax,0x1c(%r15)
movslq 0xc(%r15),%rdi
mov    0x34(%r13),%eax
imul   %rax,%rdi
movslq 0x13c(%r13),%rax
shl    $0x3,%eax
movslq %eax,%rsi
callq  4150 <jdiv_round_up@plt>
mov    %eax,0x20(%r15)
movslq 0x8(%r15),%rdi
mov    0x30(%r13),%eax
imul   %rax,%rdi
movslq 0x138(%r13),%rsi
callq  4150 <jdiv_round_up@plt>
mov    %eax,0x28(%r15)
movslq 0xc(%r15),%rdi
mov    0x34(%r13),%eax
imul   %rax,%rdi
movslq 0x13c(%r13),%rsi
callq  4150 <jdiv_round_up@plt>
mov    %eax,0x2c(%r15)
movl   $0x1,0x30(%r15)
add    $0x1,%r14d
add    $0x60,%r15
movslq 0x4c(%r13),%rax
cmp    %r14d,%eax
jg     13abe <initial_setup+0x1ae>
mov    0x34(%r13),%edi
movslq 0x13c(%r13),%rax
shl    $0x3,%eax
movslq %eax,%rsi
callq  4150 <jdiv_round_up@plt>
mov    %eax,0x140(%r13)
mov    -0x10(%rbp),%r14
mov    -0x8(%rbp),%r13
mov    -0x18(%rbp),%r15
leaveq 
retq   
xchg   %ax,%ax

0000000000013b90 <validate_script>:
push   %rbp
mov    %rsp,%rbp
sub    $0xaa0,%rsp
mov    %r15,-0x28(%rbp)
mov    %rdi,-0x50(%rbp)
mov    %rbx,-0x8(%rbp)
mov    %r12,-0x10(%rbp)
mov    %r13,-0x18(%rbp)
mov    %r14,-0x20(%rbp)
movslq 0xf0(%rdi),%rax
test   %eax,%eax
jg     13be0 <validate_script+0x50>
mov    (%rdi),%rax
movl   $0x13,0x28(%rax)
mov    (%rdi),%rax
movl   $0x0,0x2c(%rax)
mov    (%rdi),%rax
mov    (%rax),%rax
mov    %rdi,%rbx
callq  *%rax
mov    %rbx,%rdi
lea    -0xa70(%rbp),%rcx
xor    %ebx,%ebx
mov    $0x1,%eax
mov    0xf8(%rdi),%r14
movslq 0x14(%r14),%rdx
test   %edx,%edx
jne    13c15 <validate_script+0x85>
movslq 0x18(%r14),%rdx
cmp    $0x3f,%edx
jne    13c15 <validate_script+0x85>
movl   $0x0,0x134(%rdi)
mov    %rbx,%rcx
jmp    13c35 <validate_script+0xa5>
movl   $0x1,0x134(%rdi)
mov    %rbx,%rsi
jmp    13c54 <validate_script+0xc4>
movslq %ecx,%rdx
movl   $0x0,-0xa98(%rbp,%rdx,4)
add    $0x1,%ecx
movslq 0x4c(%rdi),%rdx
cmp    %ecx,%edx
jg     13c24 <validate_script+0x94>
jmp    13cb4 <validate_script+0x124>
movl   $0xffffffff,(%rcx)
add    $0x4,%rcx
add    $0x1,%edx
cmp    $0x3f,%edx
jle    13c3f <validate_script+0xaf>
add    $0x1,%esi
movslq 0x4c(%rdi),%rdx
cmp    %esi,%edx
jle    13cb4 <validate_script+0x124>
mov    %rbx,%rdx
jmp    13c4c <validate_script+0xbc>
movslq %ebx,%rcx
movslq 0x4(%r14,%rcx,4),%r12
movslq -0xa98(%rbp,%r12,4),%rcx
test   %ecx,%ecx
je     13c97 <validate_script+0x107>
mov    (%rdi),%rcx
movl   $0x13,0x28(%rcx)
mov    (%rdi),%rcx
mov    %eax,0x2c(%rcx)
mov    (%rdi),%rax
mov    (%rax),%rax
mov    %rdi,%r13
callq  *%rax
mov    %r13,%rdi
mov    -0x48(%rbp),%rax
movl   $0x1,-0xa98(%rbp,%r12,4)
add    $0x1,%ebx
cmp    %r15d,%ebx
jl     13c61 <validate_script+0xd1>
xor    %ebx,%ebx
add    $0x24,%r14
add    $0x1,%eax
mov    %rax,-0x48(%rbp)
mov    %r14,-0x30(%rbp)
movslq 0xf0(%rdi),%rcx
cmp    %eax,%ecx
jge    13ce2 <validate_script+0x152>
movslq 0x134(%rdi),%rax
test   %eax,%eax
je     13d56 <validate_script+0x1c6>
lea    -0xa70(%rbp),%r12
jmpq   13d9e <validate_script+0x20e>
movslq (%r14),%r15
mov    %r15,-0x38(%rbp)
test   %r15d,%r15d
jle    13cf8 <validate_script+0x168>
cmp    $0x4,%r15d
jle    13e29 <validate_script+0x299>
mov    (%rdi),%rcx
movl   $0x1a,0x28(%rcx)
mov    (%rdi),%rcx
mov    %r15d,0x2c(%rcx)
mov    (%rdi),%rcx
movl   $0x4,0x30(%rcx)
mov    (%rdi),%rcx
mov    (%rcx),%rcx
mov    %rax,%r12
mov    %rdi,%r13
callq  *%rcx
mov    %r12,%rax
mov    %r13,%rdi
jmpq   13e29 <validate_script+0x299>
movslq %ebx,%rax
movslq -0xa98(%rbp,%rax,4),%rax
test   %eax,%eax
jne    13d53 <validate_script+0x1c3>
mov    (%rdi),%rax
movl   $0x2d,0x28(%rax)
mov    (%rdi),%rax
mov    (%rax),%rax
mov    %rdi,%r12
callq  *%rax
mov    %r12,%rdi
add    $0x1,%ebx
movslq 0x4c(%rdi),%rax
cmp    %ebx,%eax
jg     13d2c <validate_script+0x19c>
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
mov    -0x28(%rbp),%r15
leaveq 
retq   
movslq %ebx,%rax
shl    $0x8,%rax
movslq (%r12,%rax,1),%rax
test   %eax,%eax
jns    13d9b <validate_script+0x20b>
mov    (%rdi),%rax
movl   $0x2d,0x28(%rax)
mov    (%rdi),%rax
mov    (%rax),%rax
mov    %rdi,%r13
callq  *%rax
mov    %r13,%rdi
add    $0x1,%ebx
movslq 0x4c(%rdi),%rax
cmp    %ebx,%eax
jg     13d74 <validate_script+0x1e4>
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
mov    -0x28(%rbp),%r15
leaveq 
retq   
movslq %ebx,%rcx
movslq 0x4(%r14,%rcx,4),%r12
test   %r12d,%r12d
js     13dcf <validate_script+0x23f>
cmp    0x4c(%rdi),%r12d
jl     13df1 <validate_script+0x261>
mov    (%rdi),%rcx
movl   $0x13,0x28(%rcx)
mov    (%rdi),%rcx
mov    %eax,0x2c(%rcx)
mov    (%rdi),%rax
mov    (%rax),%rax
mov    %rdi,%r13
callq  *%rax
mov    %r13,%rdi
mov    -0x48(%rbp),%rax
test   %ebx,%ebx
jle    13e26 <validate_script+0x296>
lea    -0x1(%rbx),%ecx
movslq %ecx,%rcx
cmp    0x4(%r14,%rcx,4),%r12d
jg     13e26 <validate_script+0x296>
mov    (%rdi),%rcx
movl   $0x13,0x28(%rcx)
mov    (%rdi),%rcx
mov    %eax,0x2c(%rcx)
mov    (%rdi),%rcx
mov    (%rcx),%rcx
mov    %rax,%r12
mov    %rdi,%r13
callq  *%rcx
mov    %r12,%rax
mov    %r13,%rdi
add    $0x1,%ebx
cmp    %ebx,%r15d
jg     13dbc <validate_script+0x22c>
movslq 0x14(%r14),%rsi
mov    %rsi,-0x70(%rbp)
movslq 0x18(%r14),%r12
movslq 0x1c(%r14),%rcx
mov    %rcx,-0x60(%rbp)
movslq 0x20(%r14),%r13
mov    %r13,-0x58(%rbp)
movslq 0x134(%rdi),%rdx
test   %edx,%edx
jne    13e7f <validate_script+0x2ef>
test   %esi,%esi
jne    13ef8 <validate_script+0x368>
cmp    $0x3f,%r12d
jne    13ef8 <validate_script+0x368>
test   %ecx,%ecx
jne    13ef8 <validate_script+0x368>
test   %r13d,%r13d
jne    13ef8 <validate_script+0x368>
xor    %ebx,%ebx
jmpq   13ca6 <validate_script+0x116>
test   %esi,%esi
js     13ea7 <validate_script+0x317>
cmp    $0x3f,%esi
jg     13ea7 <validate_script+0x317>
cmp    %r12d,%esi
jg     13ea7 <validate_script+0x317>
cmp    $0x3f,%r12d
jg     13ea7 <validate_script+0x317>
test   %ecx,%ecx
js     13ea7 <validate_script+0x317>
cmp    $0xa,%ecx
jg     13ea7 <validate_script+0x317>
test   %r13d,%r13d
js     13ea7 <validate_script+0x317>
cmp    $0xa,%r13d
jle    13edd <validate_script+0x34d>
mov    (%rdi),%rdx
movl   $0x11,0x28(%rdx)
mov    (%rdi),%rdx
mov    %eax,0x2c(%rdx)
mov    (%rdi),%rax
mov    (%rax),%rax
mov    %rcx,%rbx
mov    %rsi,%r13
mov    %rdi,%r14
callq  *%rax
mov    %rbx,%rcx
mov    %r13,%rsi
mov    %r14,%rdi
mov    -0x58(%rbp),%r13
mov    -0x30(%rbp),%r14
mov    -0x48(%rbp),%rax
lea    -0x1(%rcx),%edx
mov    %rdx,-0x68(%rbp)
test   %esi,%esi
je     13f23 <validate_script+0x393>
cmp    $0x1,%r15d
jne    13f36 <validate_script+0x3a6>
xor    %ebx,%ebx
mov    %rbx,%r8
jmpq   13fd4 <validate_script+0x444>
mov    (%rdi),%rcx
movl   $0x11,0x28(%rcx)
mov    (%rdi),%rcx
mov    %eax,0x2c(%rcx)
mov    (%rdi),%rcx
mov    (%rcx),%rcx
mov    %rax,%r12
mov    %rdi,%r13
callq  *%rcx
mov    %r12,%rax
mov    %r13,%rdi
xor    %ebx,%ebx
jmpq   13ca6 <validate_script+0x116>
test   %r12d,%r12d
jne    13ffb <validate_script+0x46b>
xor    %ebx,%ebx
mov    %rbx,%r8
jmpq   13fd4 <validate_script+0x444>
mov    (%rdi),%rcx
movl   $0x11,0x28(%rcx)
mov    (%rdi),%rcx
mov    %eax,0x2c(%rcx)
mov    (%rdi),%rax
mov    (%rax),%rax
mov    %rsi,%rbx
mov    %rdi,%r13
callq  *%rax
mov    %rbx,%rsi
mov    %r13,%rdi
xor    %r8d,%r8d
mov    -0x68(%rbp),%rdx
mov    -0x60(%rbp),%rcx
mov    -0x58(%rbp),%r13
mov    -0x48(%rbp),%rax
mov    %r8,%rbx
jmp    13fd4 <validate_script+0x444>
movslq %ebx,%r15
movslq (%r14,%r15,4),%rsi
test   %esi,%esi
js     14037 <validate_script+0x4a7>
cmp    %esi,%ecx
jne    13f8a <validate_script+0x3fa>
cmp    %edx,%r13d
je     13fb2 <validate_script+0x422>
mov    (%rdi),%rcx
movl   $0x11,0x28(%rcx)
mov    (%rdi),%rcx
mov    %eax,0x2c(%rcx)
mov    (%rdi),%rax
mov    (%rax),%rax
callq  *%rax
mov    -0x50(%rbp),%rdi
mov    -0x68(%rbp),%rdx
mov    -0x60(%rbp),%rcx
mov    -0x48(%rbp),%rax
mov    %r13d,(%r14,%r15,4)
add    $0x1,%ebx
cmp    %ebx,%r12d
jge    13f72 <validate_script+0x3e2>
mov    -0x40(%rbp),%rsi
lea    0x1(%rsi),%r8d
mov    -0x70(%rbp),%rsi
xor    %ebx,%ebx
mov    -0x38(%rbp),%r15
mov    -0x30(%rbp),%r14
cmp    %r8d,%r15d
jle    13cad <validate_script+0x11d>
movslq %r8d,%r9
movslq 0x4(%r14,%r9,4),%r9
shl    $0x8,%r9
test   %esi,%esi
lea    -0xa70(%rbp,%r9,1),%r14
jne    1406c <validate_script+0x4dc>
mov    %r8,-0x40(%rbp)
jmp    13fb9 <validate_script+0x429>
mov    (%rdi),%rcx
movl   $0x11,0x28(%rcx)
mov    (%rdi),%rcx
mov    %eax,0x2c(%rcx)
mov    (%rdi),%rax
mov    (%rax),%rax
mov    %rsi,%rbx
mov    %rdi,%r13
callq  *%rax
mov    %rbx,%rsi
mov    %r13,%rdi
xor    %r8d,%r8d
mov    -0x68(%rbp),%rdx
mov    -0x60(%rbp),%rcx
mov    -0x58(%rbp),%r13
mov    -0x48(%rbp),%rax
mov    %r8,%rbx
jmp    13fd4 <validate_script+0x444>
test   %ecx,%ecx
je     13fb2 <validate_script+0x422>
mov    (%rdi),%rcx
movl   $0x11,0x28(%rcx)
mov    (%rdi),%rcx
mov    %eax,0x2c(%rcx)
mov    (%rdi),%rax
mov    (%rax),%rax
callq  *%rax
mov    -0x50(%rbp),%rdi
mov    -0x68(%rbp),%rdx
mov    -0x60(%rbp),%rcx
mov    -0x48(%rbp),%rax
jmpq   13fb2 <validate_script+0x422>
movslq (%r14),%rbx
test   %ebx,%ebx
js     1407f <validate_script+0x4ef>
mov    %r8,-0x40(%rbp)
mov    %rsi,%rbx
jmpq   13fb9 <validate_script+0x429>
mov    (%rdi),%rdx
movl   $0x11,0x28(%rdx)
mov    (%rdi),%rdx
mov    %eax,0x2c(%rdx)
mov    (%rdi),%rax
mov    (%rax),%rax
mov    %rdi,%rdx
mov    %r8,-0x40(%rbp)
mov    %rcx,%rbx
mov    %rsi,%r13
mov    %rdi,%r15
mov    %rdx,%rdi
callq  *%rax
mov    %rbx,%rcx
mov    %r13,%rbx
mov    %r15,%rdi
mov    -0x68(%rbp),%rdx
mov    -0x58(%rbp),%r13
mov    -0x48(%rbp),%rax
jmpq   13fb9 <validate_script+0x429>
data16 nopw %cs:0x0(%rax,%rax,1)
nop

00000000000140d0 <select_scan_parameters>:
push   %rbp
mov    %rsp,%rbp
sub    $0x10,%rsp
xor    %eax,%eax
mov    0xf8(%rdi),%rdx
test   %rdx,%rdx
jne    14143 <select_scan_parameters+0x73>
movslq 0x4c(%rdi),%rcx
cmp    $0x4,%ecx
jle    14137 <select_scan_parameters+0x67>
mov    (%rdi),%rcx
movl   $0x1a,0x28(%rcx)
movslq 0x4c(%rdi),%rdx
mov    (%rdi),%rcx
mov    %edx,0x2c(%rcx)
mov    (%rdi),%rcx
movl   $0x4,0x30(%rcx)
mov    (%rdi),%rcx
mov    (%rcx),%rcx
mov    %rdi,%rdx
mov    %r14,-0x8(%rbp)
mov    %r15,-0x10(%rbp)
mov    %rax,%r14
mov    %rdi,%r15
mov    %rdx,%rdi
callq  *%rcx
mov    %r14,%rax
mov    %r15,%rdi
mov    -0x10(%rbp),%r15
mov    -0x8(%rbp),%r14
movslq 0x4c(%rdi),%rcx
mov    %ecx,0x144(%rdi)
jmp    1417b <select_scan_parameters+0xab>
mov    0x1b0(%rdi),%rcx
movslq 0x2c(%rcx),%rcx
lea    (%rcx,%rcx,8),%rcx
lea    (%rdx,%rcx,4),%rsi
movslq (%rsi),%rcx
mov    %ecx,0x144(%rdi)
jmp    141cc <select_scan_parameters+0xfc>
movslq %eax,%rdx
lea    (%rdx,%rdx,2),%rcx
shl    $0x5,%rcx
add    0x58(%rdi),%rcx
mov    %rcx,0x148(%rdi,%rdx,8)
add    $0x1,%eax
movslq 0x4c(%rdi),%rcx
cmp    %eax,%ecx
jg     14161 <select_scan_parameters+0x91>
movl   $0x0,0x19c(%rdi)
movl   $0x3f,0x1a0(%rdi)
movl   $0x0,0x1a4(%rdi)
movl   $0x0,0x1a8(%rdi)
leaveq 
retq   
movslq %eax,%rdx
movslq 0x4(%rsi,%rdx,4),%rcx
lea    (%rcx,%rcx,2),%rcx
shl    $0x5,%rcx
add    0x58(%rdi),%rcx
mov    %rcx,0x148(%rdi,%rdx,8)
add    $0x1,%eax
movslq (%rsi),%rcx
cmp    %eax,%ecx
jg     141ad <select_scan_parameters+0xdd>
movslq 0x14(%rsi),%rax
mov    %eax,0x19c(%rdi)
movslq 0x18(%rsi),%rax
mov    %eax,0x1a0(%rdi)
movslq 0x1c(%rsi),%rax
mov    %eax,0x1a4(%rdi)
movslq 0x20(%rsi),%rax
mov    %eax,0x1a8(%rdi)
leaveq 
retq   
nopl   (%rax)

0000000000014200 <per_scan_setup>:
push   %rbp
mov    %rsp,%rbp
sub    $0x20,%rsp
movslq 0x144(%rdi),%rax
cmp    $0x1,%eax
je     14233 <per_scan_setup+0x33>
test   %eax,%eax
jle    142b6 <per_scan_setup+0xb6>
cmp    $0x4,%eax
jg     142b6 <per_scan_setup+0xb6>
mov    %r15,%rcx
mov    %r14,%r15
mov    %rdi,%r14
jmpq   142f3 <per_scan_setup+0xf3>
mov    0x148(%rdi),%rsi
mov    0x1c(%rsi),%eax
mov    %eax,0x168(%rdi)
mov    0x20(%rsi),%eax
mov    %eax,0x16c(%rdi)
mov    %r14,%rcx
mov    %rdi,%r14
movl   $0x1,0x34(%rsi)
movl   $0x1,0x38(%rsi)
movl   $0x1,0x3c(%rsi)
movl   $0x8,0x40(%rsi)
movl   $0x1,0x44(%rsi)
mov    0x20(%rsi),%eax
mov    0xc(%rsi),%r8d
xor    %edx,%edx
div    %r8d
test   %edx,%edx
jne    14289 <per_scan_setup+0x89>
movslq 0xc(%rsi),%rdx
mov    %edx,0x48(%rsi)
movl   $0x1,0x170(%r14)
movl   $0x0,0x174(%r14)
movslq 0x11c(%r14),%rdx
test   %edx,%edx
jg     1434b <per_scan_setup+0x14b>
mov    %rcx,%r14
leaveq 
retq   
mov    (%rdi),%rax
movl   $0x1a,0x28(%rax)
movslq 0x144(%rdi),%rax
mov    (%rdi),%rcx
mov    %eax,0x2c(%rcx)
mov    (%rdi),%rax
movl   $0x4,0x30(%rax)
mov    (%rdi),%rax
mov    (%rax),%rax
mov    %rdi,%rcx
mov    %r15,-0x18(%rbp)
mov    %r14,%r15
mov    %rdi,%r14
mov    %rcx,%rdi
callq  *%rax
mov    -0x18(%rbp),%rcx
mov    0x30(%r14),%edi
movslq 0x138(%r14),%rax
shl    $0x3,%eax
movslq %eax,%rsi
mov    %rcx,-0x18(%rbp)
callq  4150 <jdiv_round_up@plt>
mov    %eax,0x168(%r14)
mov    0x34(%r14),%edi
movslq 0x13c(%r14),%rax
shl    $0x3,%eax
movslq %eax,%rsi
callq  4150 <jdiv_round_up@plt>
mov    %eax,0x16c(%r14)
movl   $0x0,0x170(%r14)
xor    %eax,%eax
mov    %r13,-0x8(%rbp)
mov    %r15,-0x10(%rbp)
mov    %rax,%r15
jmp    14395 <per_scan_setup+0x195>
mov    0x168(%r14),%eax
imul   %rdx,%rax
cmp    $0xfffe,%rax
jle    14363 <per_scan_setup+0x163>
mov    $0xffff,%eax
mov    %eax,0x118(%r14)
mov    %rcx,%r14
leaveq 
retq   
movslq 0x170(%r14),%rcx
lea    0x1(%rcx),%eax
mov    %eax,0x170(%r14)
mov    %r15d,0x174(%r14,%rcx,4)
add    $0xffffffff,%r13d
test   %r13d,%r13d
jg     1436f <per_scan_setup+0x16f>
add    $0x1,%r15d
movslq 0x144(%r14),%rax
cmp    %r15d,%eax
jg     143b2 <per_scan_setup+0x1b2>
mov    -0x10(%rbp),%rcx
mov    -0x8(%rbp),%r13
mov    -0x18(%rbp),%r15
jmpq   142a2 <per_scan_setup+0xa2>
movslq %r15d,%rax
mov    0x148(%r14,%rax,8),%rcx
movslq 0x8(%rcx),%rsi
mov    %esi,0x34(%rcx)
movslq 0xc(%rcx),%rax
mov    %eax,0x38(%rcx)
imul   %esi,%eax
mov    %eax,0x3c(%rcx)
mov    %rsi,%rax
shl    $0x3,%eax
mov    %eax,0x40(%rcx)
mov    0x1c(%rcx),%eax
xor    %edx,%edx
div    %esi
test   %edx,%edx
jne    143e9 <per_scan_setup+0x1e9>
movslq 0x34(%rcx),%rdx
mov    %edx,0x44(%rcx)
mov    0x20(%rcx),%eax
mov    0x38(%rcx),%esi
xor    %edx,%edx
div    %esi
test   %edx,%edx
jne    143fe <per_scan_setup+0x1fe>
movslq 0x38(%rcx),%rdx
mov    %edx,0x48(%rcx)
movslq 0x3c(%rcx),%r13
mov    %r13,%rax
add    0x170(%r14),%eax
cmp    $0xa,%eax
jle    1438c <per_scan_setup+0x18c>
mov    (%r14),%rax
movl   $0xd,0x28(%rax)
mov    (%r14),%rax
mov    (%rax),%rax
mov    %r14,%rdi
callq  *%rax
jmpq   1438c <per_scan_setup+0x18c>
data16 nopw %cs:0x0(%rax,%rax,1)
nopl   (%rax)

0000000000014440 <prepare_for_pass>:
push   %rbp
mov    %rsp,%rbp
sub    $0x20,%rsp
mov    %r14,-0x8(%rbp)
mov    %r15,-0x10(%rbp)
xor    %esi,%esi
mov    %rsi,-0x20(%rbp)
mov    $0x1,%eax
mov    %rax,-0x18(%rbp)
mov    0x1b0(%rdi),%r15
mov    0x20(%r15),%eax
test   %eax,%eax
je     1449a <prepare_for_pass+0x5a>
cmp    $0x1,%eax
je     14527 <prepare_for_pass+0xe7>
cmp    $0x2,%eax
je     1457b <prepare_for_pass+0x13b>
mov    (%rdi),%rax
movl   $0x30,0x28(%rax)
mov    (%rdi),%rax
mov    (%rax),%rax
mov    %rdi,%r14
callq  *%rax
jmpq   145f8 <prepare_for_pass+0x1b8>
mov    %rdi,%r14
callq  140d0 <select_scan_parameters>
mov    %r14,%rdi
callq  14200 <per_scan_setup>
movslq 0x100(%r14),%rax
test   %eax,%eax
jne    144e4 <prepare_for_pass+0xa4>
mov    0x1d8(%r14),%rax
mov    (%rax),%rax
mov    %r14,%rdi
callq  *%rax
mov    0x1e0(%r14),%rax
mov    (%rax),%rax
mov    %r14,%rdi
callq  *%rax
mov    0x1c0(%r14),%rax
mov    (%rax),%rax
mov    %r14,%rdi
xor    %esi,%esi
callq  *%rax
mov    0x1e8(%r14),%rax
mov    (%rax),%rax
mov    %r14,%rdi
callq  *%rax
mov    0x1f0(%r14),%rax
mov    (%rax),%rax
movslq 0x108(%r14),%rsi
mov    %r14,%rdi
callq  *%rax
mov    0x1c8(%r14),%rax
mov    (%rax),%rax
movslq 0x28(%r15),%rcx
cmp    $0x1,%ecx
jg     14628 <prepare_for_pass+0x1e8>
xor    %esi,%esi
jmpq   1462d <prepare_for_pass+0x1ed>
mov    %rdi,%r14
callq  140d0 <select_scan_parameters>
mov    %r14,%rdi
callq  14200 <per_scan_setup>
movslq 0x19c(%r14),%rax
test   %eax,%eax
jne    14658 <prepare_for_pass+0x218>
movslq 0x1a4(%r14),%rax
test   %eax,%eax
je     14658 <prepare_for_pass+0x218>
movslq 0x104(%r14),%rax
test   %eax,%eax
jne    14658 <prepare_for_pass+0x218>
movl   $0x2,0x20(%r15)
movslq 0x24(%r15),%rax
add    $0x1,%eax
mov    %eax,0x24(%r15)
xor    %esi,%esi
jmp    1457e <prepare_for_pass+0x13e>
mov    %rdi,%r14
movslq 0x108(%r14),%rax
test   %eax,%eax
jne    1459b <prepare_for_pass+0x15b>
mov    %r14,%rdi
callq  140d0 <select_scan_parameters>
mov    %r14,%rdi
callq  14200 <per_scan_setup>
xor    %esi,%esi
mov    0x1f0(%r14),%rax
mov    (%rax),%rax
mov    %r14,%rdi
callq  *%rax
mov    0x1c8(%r14),%rax
mov    (%rax),%rax
mov    %r14,%rdi
mov    $0x2,%esi
callq  *%rax
movslq 0x2c(%r15),%rax
test   %eax,%eax
jne    145d6 <prepare_for_pass+0x196>
mov    0x1d0(%r14),%rax
mov    0x8(%rax),%rax
mov    %r14,%rdi
callq  *%rax
mov    0x1d0(%r14),%rax
mov    0x10(%rax),%rax
mov    %r14,%rdi
callq  *%rax
movl   $0x0,0x18(%r15)
jmp    145f8 <prepare_for_pass+0x1b8>
movl   $0x0,0x18(%r15)
movslq 0x24(%r15),%rcx
movslq 0x28(%r15),%rax
add    $0xffffffff,%eax
cmp    %ecx,%eax
jne    1460d <prepare_for_pass+0x1cd>
pushq  -0x18(%rbp)
popq   -0x20(%rbp)
mov    -0x20(%rbp),%rax
mov    %eax,0x1c(%r15)
mov    0x10(%r14),%rax
test   %rax,%rax
jne    1468d <prepare_for_pass+0x24d>
mov    -0x10(%rbp),%r15
mov    -0x8(%rbp),%r14
leaveq 
retq   
mov    $0x3,%esi
mov    %r14,%rdi
callq  *%rax
mov    0x1b8(%r14),%rax
mov    (%rax),%rax
mov    %r14,%rdi
xor    %esi,%esi
callq  *%rax
movslq 0x108(%r14),%rax
test   %eax,%eax
jne    145f0 <prepare_for_pass+0x1b0>
movl   $0x1,0x18(%r15)
jmp    145f8 <prepare_for_pass+0x1b8>
mov    0x1f0(%r14),%rax
mov    (%rax),%rax
mov    %r14,%rdi
mov    $0x1,%esi
callq  *%rax
mov    0x1c8(%r14),%rax
mov    (%rax),%rax
mov    %r14,%rdi
mov    $0x2,%esi
callq  *%rax
movl   $0x0,0x18(%r15)
jmpq   145f8 <prepare_for_pass+0x1b8>
mov    %ecx,0x18(%rax)
movslq 0x28(%r15),%rcx
mov    0x10(%r14),%rax
mov    %ecx,0x1c(%rax)
mov    -0x10(%rbp),%r15
mov    -0x8(%rbp),%r14
leaveq 
retq   
data16 nopw %cs:0x0(%rax,%rax,1)

00000000000146b0 <pass_startup>:
push   %rbp
mov    %rsp,%rbp
sub    $0x10,%rsp
mov    %r15,-0x8(%rbp)
mov    0x1b0(%rdi),%rax
movl   $0x0,0x18(%rax)
mov    0x1d0(%rdi),%rax
mov    0x8(%rax),%rax
mov    %rdi,%r15
callq  *%rax
mov    0x1d0(%r15),%rax
mov    0x10(%rax),%rax
mov    %r15,%rdi
callq  *%rax
mov    -0x8(%rbp),%r15
leaveq 
retq   

00000000000146f0 <finish_pass_master>:
push   %rbp
mov    %rsp,%rbp
sub    $0x10,%rsp
mov    %r14,-0x8(%rbp)
mov    %r15,-0x10(%rbp)
mov    0x1f0(%rdi),%rax
mov    0x10(%rax),%rax
mov    0x1b0(%rdi),%r14
mov    %rdi,%r15
callq  *%rax
mov    0x20(%r14),%eax
test   %eax,%eax
je     14749 <finish_pass_master+0x59>
cmp    $0x1,%eax
je     1477c <finish_pass_master+0x8c>
cmp    $0x2,%eax
jne    14767 <finish_pass_master+0x77>
movslq 0x108(%r15),%rax
test   %eax,%eax
je     1473c <finish_pass_master+0x4c>
movl   $0x1,0x20(%r14)
movslq 0x2c(%r14),%rax
add    $0x1,%eax
mov    %eax,0x2c(%r14)
jmp    14767 <finish_pass_master+0x77>
movl   $0x2,0x20(%r14)
movslq 0x108(%r15),%rax
test   %eax,%eax
jne    14767 <finish_pass_master+0x77>
movslq 0x2c(%r14),%rax
add    $0x1,%eax
mov    %eax,0x2c(%r14)
movslq 0x24(%r14),%rax
add    $0x1,%eax
mov    %eax,0x24(%r14)
mov    -0x10(%rbp),%r15
mov    -0x8(%rbp),%r14
leaveq 
retq   
movl   $0x2,0x20(%r14)
jmp    14767 <finish_pass_master+0x77>
nopw   %cs:0x0(%rax,%rax,1)

0000000000014790 <jpeg_alloc_quant_table>:
push   %rbp
mov    %rsp,%rbp
mov    0x8(%rdi),%rax
mov    (%rax),%rax
xor    %esi,%esi
mov    $0x84,%edx
callq  *%rax
movl   $0x0,0x80(%rax)
leaveq 
retq   

00000000000147b0 <jpeg_alloc_huff_table>:
push   %rbp
mov    %rsp,%rbp
mov    0x8(%rdi),%rax
mov    (%rax),%rax
xor    %esi,%esi
mov    $0x118,%edx
callq  *%rax
movl   $0x0,0x114(%rax)
leaveq 
retq   

00000000000147d0 <jpeg_abort>:
push   %rbp
mov    %rsp,%rbp
sub    $0x10,%rsp
mov    0x8(%rdi),%rax
test   %rax,%rax
je     147f6 <jpeg_abort+0x26>
mov    $0x1,%eax
mov    %r14,-0x8(%rbp)
mov    %r15,-0x10(%rbp)
mov    %rdi,%r14
mov    %rax,%r15
jmp    1480c <jpeg_abort+0x3c>
leaveq 
retq   
mov    0x8(%r14),%rax
mov    0x48(%rax),%rax
mov    %r14,%rdi
mov    %r15,%rsi
callq  *%rax
add    $0xffffffff,%r15d
test   %r15d,%r15d
jg     147f8 <jpeg_abort+0x28>
movslq 0x20(%r14),%rax
test   %eax,%eax
jne    1482b <jpeg_abort+0x5b>
movl   $0x64,0x24(%r14)
mov    -0x10(%rbp),%r15
mov    -0x8(%rbp),%r14
leaveq 
retq   
movl   $0xc8,0x24(%r14)
movq   $0x0,0x190(%r14)
mov    -0x10(%rbp),%r15
mov    -0x8(%rbp),%r14
leaveq 
retq   
nopl   0x0(%rax,%rax,1)

0000000000014850 <jpeg_destroy>:
push   %rbp
mov    %rsp,%rbp
sub    $0x10,%rsp
mov    0x8(%rdi),%rax
test   %rax,%rax
je     14878 <jpeg_destroy+0x28>
mov    %rdi,%rcx
mov    %r15,-0x8(%rbp)
mov    %rdi,%r15
mov    %rcx,%rdi
callq  *0x50(%rax)
mov    %r15,%rdi
mov    -0x8(%rbp),%r15
movq   $0x0,0x8(%rdi)
movl   $0x0,0x24(%rdi)
leaveq 
retq   
nopl   0x0(%rax)

0000000000014890 <jpeg_set_defaults>:
push   %rbp
mov    %rsp,%rbp
sub    $0x10,%rsp
mov    %r15,-0x10(%rbp)
mov    %r14,-0x8(%rbp)
movslq 0x24(%rdi),%rax
cmp    $0x64,%eax
jne    148ae <jpeg_set_defaults+0x1e>
mov    %rdi,%r15
jmp    148cd <jpeg_set_defaults+0x3d>
mov    (%rdi),%rax
movl   $0x14,0x28(%rax)
movslq 0x24(%rdi),%rcx
mov    (%rdi),%rax
mov    %ecx,0x2c(%rax)
mov    (%rdi),%rax
mov    (%rax),%rax
mov    %rdi,%r15
callq  *%rax
xor    %r14d,%r14d
mov    0x58(%r15),%rax
test   %rax,%rax
jne    148f1 <jpeg_set_defaults+0x61>
mov    0x8(%r15),%rax
mov    (%rax),%rax
mov    $0x3c0,%edx
mov    %r15,%rdi
mov    %r14,%rsi
callq  *%rax
mov    %rax,0x58(%r15)
movl   $0x8,0x48(%r15)
mov    $0x4b,%esi
mov    $0x1,%edx
mov    %r15,%rdi
callq  4310 <jpeg_set_quality@plt>
mov    %r15,%rdi
callq  15520 <std_huff_tables>
jmp    14937 <jpeg_set_defaults+0xa7>
movslq %r14d,%rax
movb   $0x0,0xc0(%r15,%rax,1)
movb   $0x1,0xd0(%r15,%rax,1)
movb   $0x5,0xe0(%r15,%rax,1)
add    $0x1,%r14d
cmp    $0xf,%r14d
jle    14915 <jpeg_set_defaults+0x85>
movq   $0x0,0xf8(%r15)
movl   $0x0,0xf0(%r15)
movl   $0x0,0x100(%r15)
movl   $0x0,0x104(%r15)
movl   $0x0,0x108(%r15)
movslq 0x48(%r15),%rax
cmp    $0x8,%eax
jle    14988 <jpeg_set_defaults+0xf8>
movl   $0x1,0x108(%r15)
mov    %r15,%rdi
movl   $0x0,0x10c(%rdi)
movl   $0x0,0x110(%rdi)
movl   $0x0,0x114(%rdi)
movl   $0x0,0x118(%rdi)
movl   $0x0,0x11c(%rdi)
movb   $0x1,0x124(%rdi)
movb   $0x1,0x125(%rdi)
movb   $0x0,0x126(%rdi)
movw   $0x1,0x128(%rdi)
movw   $0x1,0x12a(%rdi)
callq  4070 <jpeg_default_colorspace@plt>
mov    -0x8(%rbp),%r14
mov    -0x10(%rbp),%r15
leaveq 
retq   
data16 nopw %cs:0x0(%rax,%rax,1)
xchg   %ax,%ax

0000000000014a00 <jpeg_set_colorspace>:
push   %rbp
mov    %rsp,%rbp
sub    $0x10,%rsp
movslq 0x24(%rdi),%rax
cmp    $0x64,%eax
je     14a4f <jpeg_set_colorspace+0x4f>
mov    (%rdi),%rax
movl   $0x14,0x28(%rax)
movslq 0x24(%rdi),%rcx
mov    (%rdi),%rax
mov    %ecx,0x2c(%rax)
mov    (%rdi),%rax
mov    (%rax),%rax
mov    %rdi,%rcx
mov    %r14,-0x8(%rbp)
mov    %r15,-0x10(%rbp)
mov    %rsi,%r14
mov    %rdi,%r15
mov    %rcx,%rdi
callq  *%rax
mov    %r14,%rsi
mov    %r15,%rdi
mov    -0x10(%rbp),%r15
mov    -0x8(%rbp),%r14
mov    %esi,0x50(%rdi)
movl   $0x0,0x120(%rdi)
movl   $0x0,0x12c(%rdi)
cmp    $0x5,%esi
ja     14aa5 <jpeg_set_colorspace+0xa5>
lea    0x44872(%rip),%rcx        # 592e4 <jpeg_nbits_table+0x10030>
movslq (%rcx,%rsi,4),%rax
add    %rcx,%rax
jmpq   *%rax
movslq 0x38(%rdi),%rax
mov    %eax,0x4c(%rdi)
xor    %edx,%edx
test   %eax,%eax
jle    14e31 <jpeg_set_colorspace+0x431>
cmp    $0xa,%eax
jg     14e31 <jpeg_set_colorspace+0x431>
mov    %r14,-0x8(%rbp)
mov    %r15,-0x10(%rbp)
mov    %rdx,%r14
jmpq   14ea9 <jpeg_set_colorspace+0x4a9>
mov    (%rdi),%rax
movl   $0xa,0x28(%rax)
mov    (%rdi),%rax
mov    (%rax),%rax
callq  *%rax
leaveq 
retq   
movl   $0x1,0x120(%rdi)
movl   $0x1,0x4c(%rdi)
mov    0x58(%rdi),%rax
movl   $0x1,(%rax)
movl   $0x1,0x8(%rax)
movl   $0x1,0xc(%rax)
movl   $0x0,0x10(%rax)
movl   $0x0,0x14(%rax)
movl   $0x0,0x18(%rax)
leaveq 
retq   
movl   $0x1,0x12c(%rdi)
movl   $0x3,0x4c(%rdi)
mov    0x58(%rdi),%rax
movl   $0x52,(%rax)
movl   $0x1,0x8(%rax)
movl   $0x1,0xc(%rax)
movl   $0x0,0x10(%rax)
movl   $0x0,0x14(%rax)
movl   $0x0,0x18(%rax)
mov    0x58(%rdi),%rax
movl   $0x47,0x60(%rax)
movl   $0x1,0x68(%rax)
movl   $0x1,0x6c(%rax)
movl   $0x0,0x70(%rax)
movl   $0x0,0x74(%rax)
movl   $0x0,0x78(%rax)
mov    0x58(%rdi),%rax
movl   $0x42,0xc0(%rax)
movl   $0x1,0xc8(%rax)
movl   $0x1,0xcc(%rax)
movl   $0x0,0xd0(%rax)
movl   $0x0,0xd4(%rax)
movl   $0x0,0xd8(%rax)
leaveq 
retq   
movl   $0x1,0x120(%rdi)
movl   $0x3,0x4c(%rdi)
mov    0x58(%rdi),%rax
movl   $0x1,(%rax)
movl   $0x2,0x8(%rax)
movl   $0x2,0xc(%rax)
movl   $0x0,0x10(%rax)
movl   $0x0,0x14(%rax)
movl   $0x0,0x18(%rax)
mov    0x58(%rdi),%rax
movl   $0x2,0x60(%rax)
movl   $0x1,0x68(%rax)
movl   $0x1,0x6c(%rax)
movl   $0x1,0x70(%rax)
movl   $0x1,0x74(%rax)
movl   $0x1,0x78(%rax)
mov    0x58(%rdi),%rax
movl   $0x3,0xc0(%rax)
movl   $0x1,0xc8(%rax)
movl   $0x1,0xcc(%rax)
movl   $0x1,0xd0(%rax)
movl   $0x1,0xd4(%rax)
movl   $0x1,0xd8(%rax)
leaveq 
retq   
movl   $0x1,0x12c(%rdi)
movl   $0x4,0x4c(%rdi)
mov    0x58(%rdi),%rax
movl   $0x43,(%rax)
movl   $0x1,0x8(%rax)
movl   $0x1,0xc(%rax)
movl   $0x0,0x10(%rax)
movl   $0x0,0x14(%rax)
movl   $0x0,0x18(%rax)
mov    0x58(%rdi),%rax
movl   $0x4d,0x60(%rax)
movl   $0x1,0x68(%rax)
movl   $0x1,0x6c(%rax)
movl   $0x0,0x70(%rax)
movl   $0x0,0x74(%rax)
movl   $0x0,0x78(%rax)
mov    0x58(%rdi),%rax
movl   $0x59,0xc0(%rax)
movl   $0x1,0xc8(%rax)
movl   $0x1,0xcc(%rax)
movl   $0x0,0xd0(%rax)
movl   $0x0,0xd4(%rax)
movl   $0x0,0xd8(%rax)
mov    0x58(%rdi),%rax
movl   $0x4b,0x120(%rax)
movl   $0x1,0x128(%rax)
movl   $0x1,0x12c(%rax)
movl   $0x0,0x130(%rax)
movl   $0x0,0x134(%rax)
movl   $0x0,0x138(%rax)
leaveq 
retq   
movl   $0x1,0x12c(%rdi)
movl   $0x4,0x4c(%rdi)
mov    0x58(%rdi),%rax
movl   $0x1,(%rax)
movl   $0x2,0x8(%rax)
movl   $0x2,0xc(%rax)
movl   $0x0,0x10(%rax)
movl   $0x0,0x14(%rax)
movl   $0x0,0x18(%rax)
mov    0x58(%rdi),%rax
movl   $0x2,0x60(%rax)
movl   $0x1,0x68(%rax)
movl   $0x1,0x6c(%rax)
movl   $0x1,0x70(%rax)
movl   $0x1,0x74(%rax)
movl   $0x1,0x78(%rax)
mov    0x58(%rdi),%rax
movl   $0x3,0xc0(%rax)
movl   $0x1,0xc8(%rax)
movl   $0x1,0xcc(%rax)
movl   $0x1,0xd0(%rax)
movl   $0x1,0xd4(%rax)
movl   $0x1,0xd8(%rax)
mov    0x58(%rdi),%rax
movl   $0x4,0x120(%rax)
movl   $0x2,0x128(%rax)
movl   $0x2,0x12c(%rax)
movl   $0x0,0x130(%rax)
movl   $0x0,0x134(%rax)
movl   $0x0,0x138(%rax)
leaveq 
retq   
mov    (%rdi),%rax
movl   $0x1a,0x28(%rax)
movslq 0x4c(%rdi),%rcx
mov    (%rdi),%rax
mov    %ecx,0x2c(%rax)
mov    (%rdi),%rax
movl   $0xa,0x30(%rax)
mov    (%rdi),%rax
mov    (%rax),%rax
mov    %rdi,%rcx
mov    %r14,-0x8(%rbp)
mov    %r15,-0x10(%rbp)
mov    %rdx,%r14
mov    %rdi,%r15
mov    %rcx,%rdi
callq  *%rax
mov    %r15,%rdi
jmp    14ea9 <jpeg_set_colorspace+0x4a9>
movslq %r14d,%rax
lea    (%rax,%rax,2),%rax
shl    $0x5,%rax
add    0x58(%rdi),%rax
mov    %r14d,(%rax)
movl   $0x1,0x8(%rax)
movl   $0x1,0xc(%rax)
movl   $0x0,0x10(%rax)
movl   $0x0,0x14(%rax)
movl   $0x0,0x18(%rax)
add    $0x1,%r14d
movslq 0x4c(%rdi),%rax
cmp    %r14d,%eax
jg     14e70 <jpeg_set_colorspace+0x470>
mov    -0x10(%rbp),%r15
mov    -0x8(%rbp),%r14
leaveq 
retq   
nopl   0x0(%rax)

0000000000014ec0 <jpeg_default_colorspace>:
push   %rbp
mov    %rsp,%rbp
mov    0x3c(%rdi),%eax
cmp    $0xf,%eax
ja     14eea <jpeg_default_colorspace+0x2a>
mov    $0x3,%esi
lea    0x44424(%rip),%rcx        # 592fc <jpeg_nbits_table+0x10048>
movslq (%rcx,%rax,4),%rax
add    %rcx,%rax
jmpq   *%rax
xor    %esi,%esi
callq  4170 <jpeg_set_colorspace@plt>
leaveq 
retq   
mov    (%rdi),%rax
movl   $0x9,0x28(%rax)
mov    (%rdi),%rax
mov    (%rax),%rax
callq  *%rax
leaveq 
retq   
mov    $0x1,%esi
callq  4170 <jpeg_set_colorspace@plt>
leaveq 
retq   
callq  4170 <jpeg_set_colorspace@plt>
leaveq 
retq   
callq  4170 <jpeg_set_colorspace@plt>
leaveq 
retq   
mov    $0x4,%esi
callq  4170 <jpeg_set_colorspace@plt>
leaveq 
retq   
mov    $0x5,%esi
callq  4170 <jpeg_set_colorspace@plt>
leaveq 
retq   

0000000000014f30 <jpeg_set_quality>:
push   %rbp
mov    %rsp,%rbp
sub    $0x10,%rsp
mov    %r14,-0x8(%rbp)
mov    %r15,-0x10(%rbp)
mov    %rdi,%r14
mov    %rsi,%rdi
mov    %rdx,%r15
callq  43b0 <jpeg_quality_scaling@plt>
mov    %r15,%rdx
mov    %rax,%rsi
mov    %r14,%rdi
callq  4400 <jpeg_set_linear_quality@plt>
mov    -0x10(%rbp),%r15
mov    -0x8(%rbp),%r14
leaveq 
retq   
nopw   %cs:0x0(%rax,%rax,1)

0000000000014f70 <jpeg_set_linear_quality>:
push   %rbp
mov    %rsp,%rbp
sub    $0x20,%rsp
mov    %r13,-0x8(%rbp)
mov    %r14,-0x10(%rbp)
mov    %r15,-0x18(%rbp)
mov    %rdx,%r13
mov    %rsi,%r15
xor    %esi,%esi
lea    0x443a9(%rip),%rdx        # 5933c <std_luminance_quant_tbl>
mov    %rdi,%r14
mov    %r15,%rcx
mov    %r13,%r8
callq  42f0 <jpeg_add_quant_table@plt>
mov    %r15,%rcx
mov    %r14,%rdi
mov    %r13,%r8
mov    $0x1,%esi
lea    0x44486(%rip),%rdx        # 5943c <std_chrominance_quant_tbl>
callq  42f0 <jpeg_add_quant_table@plt>
mov    -0x18(%rbp),%r15
mov    -0x10(%rbp),%r14
mov    -0x8(%rbp),%r13
leaveq 
retq   
nopl   0x0(%rax)

0000000000014fd0 <jpeg_add_quant_table>:
push   %rbp
mov    %rsp,%rbp
sub    $0x30,%rsp
mov    %rbx,-0x8(%rbp)
mov    %r12,-0x10(%rbp)
mov    %r13,-0x18(%rbp)
mov    %r14,-0x20(%rbp)
mov    %r15,-0x28(%rbp)
movslq 0x24(%rdi),%rax
cmp    $0x64,%eax
jne    15006 <jpeg_add_quant_table+0x36>
mov    %rdi,%rbx
mov    %rdx,%r12
mov    %r8,%r13
mov    %rcx,%r14
mov    %rsi,%r15
jmp    15031 <jpeg_add_quant_table+0x61>
mov    (%rdi),%rax
movl   $0x14,0x28(%rax)
movslq 0x24(%rdi),%rbx
mov    (%rdi),%rax
mov    %ebx,0x2c(%rax)
mov    (%rdi),%rax
mov    (%rax),%rax
mov    %rdx,%r12
mov    %r8,%r13
mov    %rcx,%r14
mov    %rsi,%r15
mov    %rdi,%rbx
callq  *%rax
test   %r15d,%r15d
js     15041 <jpeg_add_quant_table+0x71>
cmp    $0x3,%r15d
jg     15041 <jpeg_add_quant_table+0x71>
mov    %r15,%rax
jmp    15060 <jpeg_add_quant_table+0x90>
mov    (%rbx),%rax
movl   $0x1f,0x28(%rax)
mov    (%rbx),%rax
mov    %r15d,0x2c(%rax)
mov    (%rbx),%rax
mov    (%rax),%rax
mov    %rbx,%rdi
callq  *%rax
mov    %r15,%rax
movslq %r14d,%r15
xor    %ecx,%ecx
mov    $0xff,%edi
mov    $0x7fff,%r8d
mov    $0x1,%r9d
mov    $0x64,%r10d
movslq %eax,%r14
mov    0x60(%rbx,%r14,8),%rax
test   %rax,%rax
jne    150f4 <jpeg_add_quant_table+0x124>
mov    %rbx,%rdi
callq  4270 <jpeg_alloc_quant_table@plt>
mov    %rax,0x60(%rbx,%r14,8)
mov    $0xff,%edi
mov    $0x7fff,%r8d
mov    $0x1,%r9d
mov    $0x64,%r10d
xor    %ecx,%ecx
jmp    150f4 <jpeg_add_quant_table+0x124>
movslq %ecx,%rsi
mov    (%r12,%rsi,4),%eax
imul   %r15,%rax
add    $0x32,%rax
cqto   
idiv   %r10
test   %rax,%rax
jg     150cd <jpeg_add_quant_table+0xfd>
mov    %r9,%rax
cmp    $0x7fff,%rax
jle    150d8 <jpeg_add_quant_table+0x108>
mov    %r8,%rax
test   %r13d,%r13d
je     150e8 <jpeg_add_quant_table+0x118>
cmp    $0xff,%rax
jle    150e8 <jpeg_add_quant_table+0x118>
mov    %rdi,%rax
mov    0x60(%rbx,%r14,8),%rdx
mov    %ax,(%rdx,%rsi,2)
add    $0x1,%ecx
cmp    $0x3f,%ecx
jle    150b1 <jpeg_add_quant_table+0xe1>
mov    0x60(%rbx,%r14,8),%rax
movl   $0x0,0x80(%rax)
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
leaveq 
retq   
xchg   %ax,%ax

0000000000015120 <jpeg_quality_scaling>:
push   %rbp
mov    %rsp,%rbp
test   %edi,%edi
jg     1512d <jpeg_quality_scaling+0xd>
mov    $0x1,%edi
cmp    $0x64,%edi
jle    15137 <jpeg_quality_scaling+0x17>
mov    $0x64,%edi
cmp    $0x31,%edi
jle    15148 <jpeg_quality_scaling+0x28>
mov    $0xc8,%eax
lea    (%rdi,%rdi,1),%ecx
sub    %ecx,%eax
leaveq 
retq   
mov    $0x1388,%eax
cltd   
idiv   %edi
leaveq 
retq   
data16 nopw %cs:0x0(%rax,%rax,1)
nopl   (%rax)

0000000000015160 <jpeg_simple_progression>:
push   %rbp
mov    %rsp,%rbp
sub    $0x30,%rsp
mov    %r14,-0x20(%rbp)
mov    %r15,-0x28(%rbp)
mov    %r13,-0x18(%rbp)
movslq 0x4c(%rdi),%r15
movslq 0x24(%rdi),%rax
cmp    $0x64,%eax
je     151a7 <jpeg_simple_progression+0x47>
mov    (%rdi),%rax
movl   $0x14,0x28(%rax)
movslq 0x24(%rdi),%rcx
mov    (%rdi),%rax
mov    %ecx,0x2c(%rax)
mov    (%rdi),%rax
mov    (%rax),%rax
mov    %rdi,%r14
callq  *%rax
mov    %r14,%rdi
mov    -0x20(%rbp),%r14
mov    $0xa,%edx
cmp    $0x3,%r15d
je     151c2 <jpeg_simple_progression+0x62>
cmp    $0x4,%r15d
jg     151cf <jpeg_simple_progression+0x6f>
lea    0x2(,%r15,4),%eax
jmp    151d5 <jpeg_simple_progression+0x75>
mov    0x50(%rdi),%eax
cmp    $0x3,%eax
jne    151b2 <jpeg_simple_progression+0x52>
mov    %rdx,%rax
jmp    151d5 <jpeg_simple_progression+0x75>
lea    (%r15,%r15,2),%eax
add    %eax,%eax
xor    %esi,%esi
mov    0x1f8(%rdi),%rcx
test   %rcx,%rcx
je     151eb <jpeg_simple_progression+0x8b>
cmp    0x200(%rdi),%eax
jle    1522a <jpeg_simple_progression+0xca>
cmp    $0xa,%eax
jle    151f3 <jpeg_simple_progression+0x93>
mov    %rax,%rdx
mov    %edx,0x200(%rdi)
mov    0x8(%rdi),%rcx
mov    (%rcx),%rcx
movslq %edx,%rdx
lea    (%rdx,%rdx,8),%rdx
shl    $0x2,%rdx
mov    %rax,%r14
mov    %rdi,%r13
callq  *%rcx
mov    %rax,0x1f8(%r13)
mov    %r14,%rax
mov    %r13,%rdi
xor    %esi,%esi
mov    -0x18(%rbp),%r13
mov    -0x20(%rbp),%r14
cmp    $0x3,%r15d
mov    0x1f8(%rdi),%r10
mov    %r10,0xf8(%rdi)
mov    %eax,0xf0(%rdi)
mov    $0x1,%ecx
mov    $0x5,%r11d
mov    $0x2,%r8d
mov    $0x3f,%r9d
je     152fa <jpeg_simple_progression+0x19a>
mov    %rsi,%rdx
mov    %r10,%rdi
mov    %r15,%rsi
callq  15640 <fill_dc_scans>
mov    %rax,%rdi
mov    %r15,%rsi
mov    $0x1,%edx
xor    %r8d,%r8d
mov    $0x2,%r9d
mov    $0x5,%ecx
callq  15600 <fill_scans>
mov    %rax,%rdi
mov    %r15,%rsi
mov    $0x3f,%ecx
xor    %r8d,%r8d
mov    $0x2,%r9d
mov    $0x6,%edx
callq  15600 <fill_scans>
mov    %rax,%rdi
mov    $0x1,%edx
mov    %rdx,%r9
mov    %r15,%rsi
mov    $0x3f,%ecx
mov    $0x2,%r8d
callq  15600 <fill_scans>
mov    %rax,%rdi
mov    %r15,%rsi
mov    $0x1,%edx
xor    %ecx,%ecx
callq  15640 <fill_dc_scans>
mov    %r15,%rsi
mov    %rax,%rdi
mov    $0x1,%edx
mov    %rdx,%r8
mov    $0x3f,%ecx
xor    %r9d,%r9d
callq  15600 <fill_scans>
mov    -0x28(%rbp),%r15
leaveq 
retq   
mov    0x50(%rdi),%eax
cmp    $0x3,%eax
jne    1525f <jpeg_simple_progression+0xff>
mov    $0x3,%eax
mov    %rsi,%rdx
mov    %rcx,%rdi
mov    %rbx,-0x8(%rbp)
mov    %r12,-0x10(%rbp)
mov    %r9,%rbx
mov    %rsi,%r12
mov    %rax,%rsi
mov    %rcx,%r13
mov    %rdi,%rcx
mov    %r10,%rdi
mov    %r8,%r14
mov    %r11,%r15
callq  15640 <fill_dc_scans>
mov    %r15,%rcx
mov    %rax,%rdi
mov    %r12,%r8
mov    %r12,%rsi
mov    %r13,%rdx
mov    %r14,%r9
callq  155d0 <fill_a_scan>
mov    %rax,%rdi
mov    %r13,%r9
mov    %r14,%rsi
mov    %r13,%rdx
mov    %rbx,%rcx
mov    %r12,%r8
callq  155d0 <fill_a_scan>
mov    %rax,%rdi
mov    %r13,%rdx
mov    %r13,%r9
mov    %r13,%rsi
mov    %rbx,%rcx
mov    %r12,%r8
callq  155d0 <fill_a_scan>
mov    %rax,%rdi
mov    %r12,%r8
mov    %r12,%rsi
mov    %rbx,%rcx
mov    %r14,%r9
mov    $0x6,%edx
callq  155d0 <fill_a_scan>
mov    %rax,%rdi
mov    %r13,%r9
mov    %r12,%rsi
mov    %r13,%rdx
mov    %rbx,%rcx
mov    %r14,%r8
callq  155d0 <fill_a_scan>
mov    %rax,%rdi
mov    %r13,%rdx
mov    %r12,%rcx
mov    $0x3,%esi
callq  15640 <fill_dc_scans>
mov    %r14,%rsi
mov    %rax,%rdi
mov    %r13,%r8
mov    %r13,%rdx
mov    %rbx,%rcx
mov    %r12,%r9
callq  155d0 <fill_a_scan>
mov    %rax,%rdi
mov    %r13,%rdx
mov    %r13,%r8
mov    %r13,%rsi
mov    %rbx,%rcx
mov    %r12,%r9
callq  155d0 <fill_a_scan>
mov    %rbx,%rcx
mov    %r13,%rdx
mov    %r12,%rsi
mov    %rax,%rdi
mov    %rsi,%r9
mov    %rdx,%r8
callq  155d0 <fill_a_scan>
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
mov    -0x18(%rbp),%r13
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
leaveq 
retq   
nopl   0x0(%rax)

0000000000015420 <add_huff_table>:
push   %rbp
mov    %rsp,%rbp
sub    $0x20,%rsp
mov    (%rsi),%rax
test   %rax,%rax
je     15432 <add_huff_table+0x12>
leaveq 
retq   
mov    %rdi,%rax
mov    %r12,-0x8(%rbp)
mov    %r13,-0x10(%rbp)
mov    %r14,-0x18(%rbp)
mov    %r15,-0x20(%rbp)
mov    %rsi,%r12
mov    %rcx,%r13
mov    %rdi,%r14
mov    %rax,%rdi
mov    %rdx,%r15
callq  44a0 <jpeg_alloc_huff_table@plt>
mov    %rax,%rdi
mov    %rdi,(%r12)
mov    $0x11,%edx
mov    %r15,%rsi
callq  42c0 <memcpy@plt>
xor    %edx,%edx
mov    $0x1,%r8d
mov    %rdx,%rax
jmp    15488 <add_huff_table+0x68>
movslq %r8d,%rcx
movzbl (%r15,%rcx,1),%ecx
add    %ecx,%eax
add    $0x1,%r8d
cmp    $0x10,%r8d
jle    1547a <add_huff_table+0x5a>
test   %eax,%eax
jle    1549e <add_huff_table+0x7e>
cmp    $0x100,%eax
jg     1549e <add_huff_table+0x7e>
mov    %rdx,%r14
jmp    154bc <add_huff_table+0x9c>
mov    (%r14),%rcx
movl   $0x8,0x28(%rcx)
mov    (%r14),%rcx
mov    (%rcx),%rcx
mov    %r14,%rdi
mov    %rdx,%r14
mov    %rax,%r15
callq  *%rcx
mov    %r15,%rax
mov    (%r12),%rdi
add    $0x11,%rdi
mov    %r13,%rsi
mov    %rax,%r13
movslq %r13d,%r15
mov    %r15,%rdx
callq  42c0 <memcpy@plt>
mov    (%r12),%rax
lea    0x11(%rax,%r15,1),%rdi
mov    $0x100,%eax
sub    %r13d,%eax
movslq %eax,%rdx
mov    %r14,%rsi
callq  41e0 <memset@plt>
mov    (%r12),%rax
movl   $0x0,0x114(%rax)
mov    -0x20(%rbp),%r15
mov    -0x18(%rbp),%r14
mov    -0x10(%rbp),%r13
mov    -0x8(%rbp),%r12
leaveq 
retq   
data16 nopw %cs:0x0(%rax,%rax,1)
nopl   0x0(%rax)

0000000000015520 <std_huff_tables>:
push   %rbp
mov    %rsp,%rbp
sub    $0x20,%rsp
mov    %r13,-0x8(%rbp)
mov    %r14,-0x10(%rbp)
mov    %r15,-0x18(%rbp)
movslq 0x20(%rdi),%rax
test   %eax,%eax
jne    1554c <std_huff_tables+0x2c>
lea    0x80(%rdi),%r15
lea    0xa0(%rdi),%r13
jmp    1555a <std_huff_tables+0x3a>
lea    0xe8(%rdi),%r15
lea    0x108(%rdi),%r13
lea    0x43fdb(%rip),%rdx        # 5953c <bits_dc_luminance.5>
lea    0x43fe5(%rip),%rcx        # 5954d <val_dc_luminance.6>
mov    %rdi,%r14
mov    %r15,%rsi
callq  15420 <add_huff_table>
lea    0x43ffc(%rip),%rdx        # 59576 <bits_ac_luminance.9>
lea    0x44006(%rip),%rcx        # 59587 <val_ac_luminance.10>
mov    %r14,%rdi
mov    %r13,%rsi
callq  15420 <add_huff_table>
lea    0x8(%r15),%rsi
lea    0x43fc2(%rip),%rdx        # 59559 <bits_dc_chrominance.7>
lea    0x43fcc(%rip),%rcx        # 5956a <val_dc_chrominance.8>
mov    %r14,%rdi
callq  15420 <add_huff_table>
lea    0x8(%r13),%rsi
mov    %r14,%rdi
lea    0x44075(%rip),%rdx        # 59629 <bits_ac_chrominance.11>
lea    0x4407f(%rip),%rcx        # 5963a <val_ac_chrominance.12>
callq  15420 <add_huff_table>
mov    -0x18(%rbp),%r15
mov    -0x10(%rbp),%r14
mov    -0x8(%rbp),%r13
leaveq 
retq   
xchg   %ax,%ax

00000000000155d0 <fill_a_scan>:
push   %rbp
mov    %rsp,%rbp
movl   $0x1,(%rdi)
mov    %esi,0x4(%rdi)
mov    %edx,0x14(%rdi)
mov    %ecx,0x18(%rdi)
mov    %r8d,0x1c(%rdi)
mov    %r9d,0x20(%rdi)
lea    0x24(%rdi),%rax
leaveq 
retq   
data16 nopw %cs:0x0(%rax,%rax,1)
nopl   0x0(%rax)

0000000000015600 <fill_scans>:
push   %rbp
mov    %rsp,%rbp
mov    %rdi,%rax
xor    %r10d,%r10d
jmp    1562c <fill_scans+0x2c>
movl   $0x1,(%rax)
mov    %r10d,0x4(%rax)
mov    %edx,0x14(%rax)
mov    %ecx,0x18(%rax)
mov    %r8d,0x1c(%rax)
mov    %r9d,0x20(%rax)
add    $0x24,%rax
add    $0x1,%r10d
cmp    %esi,%r10d
jl     1560c <fill_scans+0xc>
leaveq 
retq   
data16 nopw %cs:0x0(%rax,%rax,1)
xchg   %ax,%ax

0000000000015640 <fill_dc_scans>:
push   %rbp
mov    %rsp,%rbp
xor    %eax,%eax
cmp    $0x4,%esi
jle    1565e <fill_dc_scans+0x1e>
mov    %rdx,%r8
mov    %rax,%rdx
mov    %rcx,%r9
mov    %rdx,%rcx
callq  15600 <fill_scans>
leaveq 
retq   
mov    %esi,(%rdi)
jmp    1566d <fill_dc_scans+0x2d>
movslq %eax,%r8
mov    %eax,0x4(%rdi,%r8,4)
add    $0x1,%eax
cmp    %esi,%eax
jl     15662 <fill_dc_scans+0x22>
movl   $0x0,0x18(%rdi)
movl   $0x0,0x14(%rdi)
mov    %edx,0x1c(%rdi)
mov    %ecx,0x20(%rdi)
lea    0x24(%rdi),%rax
leaveq 
retq   
nopl   0x0(%rax,%rax,1)

0000000000015690 <jinit_phuff_encoder>:
push   %rbp
mov    %rsp,%rbp
sub    $0x10,%rsp
mov    %r15,-0x8(%rbp)
mov    0x8(%rdi),%rax
mov    (%rax),%rax
mov    $0x1,%esi
mov    $0xb8,%edx
mov    %rdi,%r15
callq  *%rax
mov    %rax,0x1f0(%r15)
lea    0x9c0(%rip),%rcx        # 16080 <start_pass_phuff>
mov    %rcx,(%rax)
xor    %ecx,%ecx
jmp    156e2 <jinit_phuff_encoder+0x52>
movslq %ecx,%rdx
movq   $0x0,0x78(%rax,%rdx,8)
movq   $0x0,0x98(%rax,%rdx,8)
add    $0x1,%ecx
cmp    $0x3,%ecx
jle    156c7 <jinit_phuff_encoder+0x37>
movq   $0x0,0x68(%rax)
mov    -0x8(%rbp),%r15
leaveq 
retq   
data16 nopw %cs:0x0(%rax,%rax,1)

0000000000015700 <encode_mcu_DC_first>:
push   %rbp
mov    %rsp,%rbp
sub    $0x40,%rsp
mov    %rbx,-0x8(%rbp)
mov    %r12,-0x10(%rbp)
mov    %r13,-0x18(%rbp)
mov    %r14,-0x20(%rbp)
mov    %r15,-0x28(%rbp)
mov    %rdi,-0x40(%rbp)
mov    %rsi,-0x38(%rbp)
mov    0x1a8(%rdi),%ecx
mov    0x1f0(%rdi),%r13
mov    0x28(%rdi),%rax
mov    (%rax),%rax
mov    %rax,0x20(%r13)
mov    0x28(%rdi),%rax
mov    0x8(%rax),%rax
mov    %rax,0x28(%r13)
xor    %ebx,%ebx
mov    0x118(%rdi),%eax
test   %eax,%eax
jne    1575c <encode_mcu_DC_first+0x5c>
mov    %rdi,%r12
mov    %rbx,%r14
jmp    157ce <encode_mcu_DC_first+0xce>
mov    0x70(%r13),%eax
test   %eax,%eax
je     1581b <encode_mcu_DC_first+0x11b>
mov    %rdi,%r12
mov    %rbx,%r14
jmp    157ce <encode_mcu_DC_first+0xce>
sar    %eax
add    $0x1,%ebx
test   %eax,%eax
jne    15770 <encode_mcu_DC_first+0x70>
cmp    $0xb,%ebx
jle    1579f <encode_mcu_DC_first+0x9f>
mov    (%r12),%rax
movl   $0x6,0x28(%rax)
mov    (%r12),%rax
mov    (%rax),%rax
mov    %r12,%rdi
mov    %rdx,%r12
callq  *%rax
mov    %r12,%rdx
mov    -0x40(%rbp),%r12
movslq 0x14(%rdx),%rsi
mov    %r13,%rdi
mov    %rbx,%rdx
callq  164e0 <emit_symbol>
test   %ebx,%ebx
je     157c0 <encode_mcu_DC_first+0xc0>
mov    %rbx,%rdx
mov    %r15,%rsi
mov    %r13,%rdi
callq  16350 <emit_bits>
add    $0x1,%r14d
xor    %ebx,%ebx
mov    -0x38(%rbp),%rsi
mov    -0x30(%rbp),%rcx
movslq 0x170(%r12),%rax
cmp    %r14d,%eax
jg     1583b <encode_mcu_DC_first+0x13b>
mov    0x20(%r13),%rcx
mov    0x28(%r12),%rax
mov    %rcx,(%rax)
mov    0x28(%r13),%rcx
mov    0x28(%r12),%rax
mov    %rcx,0x8(%rax)
mov    $0x1,%eax
mov    0x118(%r12),%edx
test   %edx,%edx
jne    15879 <encode_mcu_DC_first+0x179>
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
leaveq 
retq   
mov    %rdi,%r12
mov    %rsi,%r14
mov    %rcx,%r15
movslq 0x74(%r13),%rsi
mov    %r13,%rdi
callq  16670 <emit_restart>
mov    %r15,%rcx
mov    %r14,%rsi
mov    %rbx,%r14
jmp    157ce <encode_mcu_DC_first+0xce>
movslq %r14d,%rax
movslq 0x174(%r12,%rax,4),%rdi
mov    0x148(%r12,%rdi,8),%rdx
mov    (%rsi,%rax,8),%rax
movswq (%rax),%rsi
sar    %cl,%esi
mov    %rcx,-0x30(%rbp)
movslq 0x48(%r13,%rdi,4),%rax
mov    %esi,0x48(%r13,%rdi,4)
mov    %rsi,%r15
sub    %eax,%r15d
test   %r15d,%r15d
js     158b4 <encode_mcu_DC_first+0x1b4>
mov    %r15,%rax
jmpq   15775 <encode_mcu_DC_first+0x75>
mov    0x70(%r13),%ecx
test   %ecx,%ecx
jne    15893 <encode_mcu_DC_first+0x193>
mov    %edx,0x70(%r13)
movslq 0x74(%r13),%rcx
add    $0x1,%ecx
and    $0x7,%ecx
mov    %ecx,0x74(%r13)
mov    0x70(%r13),%ecx
add    $0xffffffff,%ecx
mov    %ecx,0x70(%r13)
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
leaveq 
retq   
sub    %esi,%eax
add    $0xffffffff,%r15d
jmpq   15775 <encode_mcu_DC_first+0x75>
nop

00000000000158c0 <encode_mcu_AC_first>:
push   %rbp
mov    %rsp,%rbp
sub    $0x60,%rsp
mov    %rbx,-0x8(%rbp)
mov    %r12,-0x10(%rbp)
mov    %r13,-0x18(%rbp)
mov    %r14,-0x20(%rbp)
mov    %r15,-0x28(%rbp)
mov    %rdi,-0x58(%rbp)
movslq 0x1a0(%rdi),%rax
mov    %rax,-0x60(%rbp)
mov    0x1a8(%rdi),%ecx
mov    0x1f0(%rdi),%rbx
mov    0x28(%rdi),%rdx
mov    (%rdx),%rdx
mov    %rdx,0x20(%rbx)
mov    0x28(%rdi),%rdx
mov    0x8(%rdx),%rdx
mov    %rdx,0x28(%rbx)
mov    0x118(%rdi),%edx
test   %edx,%edx
jne    1593d <encode_mcu_AC_first+0x7d>
mov    (%rsi),%rsi
mov    %rsi,-0x48(%rbp)
movslq 0x19c(%rdi),%r12
mov    0x586aa(%rip),%rdx        # 6dfd8 <jpeg_natural_order@@LIBJPEG_6.2+0x129f4>
mov    %rdx,-0x50(%rbp)
mov    $0xf0,%r14d
xor    %r13d,%r13d
jmp    15972 <encode_mcu_AC_first+0xb2>
mov    0x70(%rbx),%edx
test   %edx,%edx
jne    15919 <encode_mcu_AC_first+0x59>
mov    %rcx,%r12
mov    %rax,%r13
mov    %rdi,%r14
mov    %rsi,%r15
movslq 0x74(%rbx),%rsi
mov    %rbx,%rdi
callq  16670 <emit_restart>
mov    %r13,%rax
mov    %r12,%rcx
mov    %r15,%rsi
mov    %r14,%rdi
jmp    15919 <encode_mcu_AC_first+0x59>
add    $0x1,%r13d
add    $0x1,%r12d
cmp    %eax,%r12d
jle    159d4 <encode_mcu_AC_first+0x114>
test   %r13d,%r13d
jle    15994 <encode_mcu_AC_first+0xd4>
mov    0x5c(%rbx),%eax
add    $0x1,%eax
mov    %eax,0x5c(%rbx)
cmp    $0x7fff,%eax
jne    15994 <encode_mcu_AC_first+0xd4>
mov    %rbx,%rdi
callq  165a0 <emit_eobrun>
mov    0x20(%rbx),%rcx
mov    -0x58(%rbp),%rdx
mov    0x28(%rdx),%rax
mov    %rcx,(%rax)
mov    0x28(%rbx),%rcx
mov    0x28(%rdx),%rax
mov    %rcx,0x8(%rax)
mov    0x118(%rdx),%ecx
test   %ecx,%ecx
jne    159f4 <encode_mcu_AC_first+0x134>
mov    $0x1,%eax
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
leaveq 
retq   
movslq %r12d,%rdi
movslq (%rdx,%rdi,4),%rdi
movswq (%rsi,%rdi,2),%r8
test   %r8w,%r8w
je     1596a <encode_mcu_AC_first+0xaa>
test   %r8w,%r8w
js     15a2f <encode_mcu_AC_first+0x16f>
sar    %cl,%r8d
mov    %r8,%r15
jmp    15a3b <encode_mcu_AC_first+0x17b>
mov    0x70(%rbx),%eax
test   %eax,%eax
jne    15a0b <encode_mcu_AC_first+0x14b>
mov    %ecx,0x70(%rbx)
movslq 0x74(%rbx),%rax
add    $0x1,%eax
and    $0x7,%eax
mov    %eax,0x74(%rbx)
mov    0x70(%rbx),%eax
add    $0xffffffff,%eax
mov    %eax,0x70(%rbx)
mov    $0x1,%eax
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
leaveq 
retq   
neg    %r8d
sar    %cl,%r8d
mov    %r8,%r15
not    %r15d
test   %r8d,%r8d
je     15a51 <encode_mcu_AC_first+0x191>
mov    0x5c(%rbx),%eax
test   %eax,%eax
jne    15a5a <encode_mcu_AC_first+0x19a>
mov    %rcx,-0x40(%rbp)
mov    %r8,-0x30(%rbp)
jmp    15a8a <encode_mcu_AC_first+0x1ca>
add    $0x1,%r13d
jmpq   1596e <encode_mcu_AC_first+0xae>
mov    %rbx,%rdi
mov    %r12,-0x38(%rbp)
mov    %rcx,-0x40(%rbp)
mov    %r8,%r12
callq  165a0 <emit_eobrun>
mov    %r12,-0x30(%rbp)
mov    -0x38(%rbp),%r12
jmp    15a8a <encode_mcu_AC_first+0x1ca>
movslq 0x58(%rbx),%rsi
mov    %rbx,%rdi
mov    %r14,%rdx
callq  164e0 <emit_symbol>
add    $0xfffffff0,%r13d
cmp    $0xf,%r13d
jg     15a77 <encode_mcu_AC_first+0x1b7>
mov    -0x30(%rbp),%rax
mov    -0x40(%rbp),%rcx
mov    $0x1,%r14d
jmp    15aa6 <encode_mcu_AC_first+0x1e6>
sar    %eax
add    $0x1,%r14d
mov    %rax,%rdx
and    $0xfffffffe,%edx
test   %edx,%edx
jne    15aa0 <encode_mcu_AC_first+0x1e0>
cmp    $0xa,%r14d
jle    15ad4 <encode_mcu_AC_first+0x214>
mov    -0x58(%rbp),%rdi
mov    (%rdi),%rax
movl   $0x6,0x28(%rax)
mov    (%rdi),%rax
mov    (%rax),%rax
mov    %rcx,-0x40(%rbp)
callq  *%rax
mov    -0x40(%rbp),%rcx
shl    $0x4,%r13d
lea    (%r14,%r13,1),%edx
mov    %rcx,%r13
movslq 0x58(%rbx),%rsi
mov    %rbx,%rdi
callq  164e0 <emit_symbol>
mov    %r14,%rdx
mov    %r15,%rsi
mov    %r13,%r15
mov    %rbx,%rdi
callq  16350 <emit_bits>
mov    %r15,%rcx
mov    $0xf0,%r14d
xor    %r13d,%r13d
mov    -0x48(%rbp),%rsi
mov    -0x50(%rbp),%rdx
mov    -0x60(%rbp),%rax
jmpq   1596e <encode_mcu_AC_first+0xae>
nopl   0x0(%rax)

0000000000015b20 <encode_mcu_DC_refine>:
push   %rbp
mov    %rsp,%rbp
sub    $0x30,%rsp
mov    %rbx,-0x8(%rbp)
mov    %r12,-0x10(%rbp)
mov    %r13,-0x18(%rbp)
mov    %r14,-0x20(%rbp)
mov    %r15,-0x28(%rbp)
mov    0x1a8(%rdi),%ebx
mov    0x1f0(%rdi),%r14
mov    0x28(%rdi),%rax
mov    (%rax),%rax
mov    %rax,0x20(%r14)
mov    0x28(%rdi),%rax
mov    0x8(%rax),%rax
mov    %rax,0x28(%r14)
mov    $0x1,%edx
xor    %r12d,%r12d
mov    0x118(%rdi),%eax
test   %eax,%eax
jne    15b7a <encode_mcu_DC_refine+0x5a>
mov    %rdi,%r13
mov    %rsi,%r15
jmp    15bae <encode_mcu_DC_refine+0x8e>
mov    0x70(%r14),%eax
test   %eax,%eax
je     15bf5 <encode_mcu_DC_refine+0xd5>
mov    %rdi,%r13
mov    %rsi,%r15
jmp    15bae <encode_mcu_DC_refine+0x8e>
movslq %r12d,%rax
mov    (%r15,%rax,8),%rax
movswq (%rax),%rsi
mov    %rbx,%rcx
sar    %cl,%esi
mov    %rcx,%rbx
mov    %r14,%rdi
callq  16350 <emit_bits>
add    $0x1,%r12d
mov    $0x1,%edx
movslq 0x170(%r13),%rax
cmp    %r12d,%eax
jg     15b8a <encode_mcu_DC_refine+0x6a>
mov    0x20(%r14),%rcx
mov    0x28(%r13),%rax
mov    %rcx,(%rax)
mov    0x28(%r14),%rcx
mov    0x28(%r13),%rax
mov    %rcx,0x8(%rax)
mov    0x118(%r13),%ecx
test   %ecx,%ecx
jne    15c0e <encode_mcu_DC_refine+0xee>
mov    %rdx,%rax
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
leaveq 
retq   
mov    %rdi,%r13
mov    %rsi,%r15
movslq 0x74(%r14),%rsi
mov    %r14,%rdi
callq  16670 <emit_restart>
mov    $0x1,%edx
jmp    15bae <encode_mcu_DC_refine+0x8e>
mov    0x70(%r14),%eax
test   %eax,%eax
jne    15c28 <encode_mcu_DC_refine+0x108>
mov    %ecx,0x70(%r14)
movslq 0x74(%r14),%rax
add    $0x1,%eax
and    $0x7,%eax
mov    %eax,0x74(%r14)
mov    0x70(%r14),%eax
add    $0xffffffff,%eax
mov    %eax,0x70(%r14)
mov    %rdx,%rax
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
leaveq 
retq   
nopl   0x0(%rax)

0000000000015c50 <encode_mcu_AC_refine>:
push   %rbp
mov    %rsp,%rbp
sub    $0x170,%rsp
mov    %rbx,-0x8(%rbp)
mov    %r12,-0x10(%rbp)
mov    %r13,-0x18(%rbp)
mov    %r14,-0x20(%rbp)
mov    %r15,-0x28(%rbp)
mov    %rdi,-0x30(%rbp)
movslq 0x1a0(%rdi),%rdx
mov    %rdx,-0x68(%rbp)
mov    0x1a8(%rdi),%ecx
mov    0x1f0(%rdi),%rbx
mov    0x28(%rdi),%rax
mov    (%rax),%rax
mov    %rax,0x20(%rbx)
mov    0x28(%rdi),%rax
mov    0x8(%rax),%rax
mov    %rax,0x28(%rbx)
mov    0x118(%rdi),%eax
test   %eax,%eax
jne    15ccd <encode_mcu_AC_refine+0x7d>
mov    (%rsi),%r8
mov    %r8,-0x50(%rbp)
movslq 0x19c(%rdi),%r10
mov    0x58317(%rip),%r9        # 6dfd8 <jpeg_natural_order@@LIBJPEG_6.2+0x129f4>
mov    %r9,-0x58(%rbp)
xor    %eax,%eax
mov    %rax,-0x48(%rbp)
jmp    15d23 <encode_mcu_AC_refine+0xd3>
mov    0x70(%rbx),%eax
test   %eax,%eax
jne    15cac <encode_mcu_AC_refine+0x5c>
mov    %rcx,%r12
mov    %rdx,%r13
mov    %rdi,%r14
mov    %rsi,%r15
movslq 0x74(%rbx),%rsi
mov    %rbx,%rdi
callq  16670 <emit_restart>
mov    %r12,%rcx
mov    %r13,%rdx
mov    %r15,%rsi
mov    %r14,%rdi
jmp    15cac <encode_mcu_AC_refine+0x5c>
movslq %r10d,%r11
movslq (%r9,%r11,4),%rsi
movswq (%r8,%rsi,2),%rsi
test   %si,%si
jns    15d0d <encode_mcu_AC_refine+0xbd>
neg    %esi
sar    %cl,%esi
mov    %esi,-0x170(%rbp,%r11,4)
cmp    $0x1,%esi
jne    15d1f <encode_mcu_AC_refine+0xcf>
mov    %r10,%rax
add    $0x1,%r10d
mov    %rax,-0x70(%rbp)
cmp    %edx,%r10d
jle    15cfa <encode_mcu_AC_refine+0xaa>
movslq 0x19c(%rdi),%r13
mov    0x60(%rbx),%r12d
add    0x68(%rbx),%r12
mov    $0x1,%ecx
mov    %rcx,-0x40(%rbp)
xor    %r15d,%r15d
mov    %r15,%r14
jmp    15d54 <encode_mcu_AC_refine+0x104>
add    $0x1,%r15d
add    $0x1,%r13d
cmp    %edx,%r13d
jle    15dcc <encode_mcu_AC_refine+0x17c>
test   %r15d,%r15d
jg     15d63 <encode_mcu_AC_refine+0x113>
test   %r14d,%r14d
je     15d8c <encode_mcu_AC_refine+0x13c>
mov    0x5c(%rbx),%eax
add    $0x1,%eax
mov    %eax,0x5c(%rbx)
add    0x60(%rbx),%r14d
mov    %r14d,0x60(%rbx)
cmp    $0x7fff,%eax
je     15d84 <encode_mcu_AC_refine+0x134>
cmp    $0x3a9,%r14d
jbe    15d8c <encode_mcu_AC_refine+0x13c>
mov    %rbx,%rdi
callq  165a0 <emit_eobrun>
mov    0x20(%rbx),%rcx
mov    -0x30(%rbp),%rdx
mov    0x28(%rdx),%rax
mov    %rcx,(%rax)
mov    0x28(%rbx),%rcx
mov    0x28(%rdx),%rax
mov    %rcx,0x8(%rax)
mov    0x118(%rdx),%ecx
test   %ecx,%ecx
jne    15de9 <encode_mcu_AC_refine+0x199>
mov    $0x1,%eax
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
leaveq 
retq   
movslq %r13d,%rsi
movslq -0x170(%rbp,%rsi,4),%rcx
test   %ecx,%ecx
je     15d4c <encode_mcu_AC_refine+0xfc>
mov    %rcx,-0x38(%rbp)
mov    %rsi,-0x60(%rbp)
jmp    15e5f <encode_mcu_AC_refine+0x20f>
mov    0x70(%rbx),%eax
test   %eax,%eax
jne    15e00 <encode_mcu_AC_refine+0x1b0>
mov    %ecx,0x70(%rbx)
movslq 0x74(%rbx),%rax
add    $0x1,%eax
and    $0x7,%eax
mov    %eax,0x74(%rbx)
mov    0x70(%rbx),%eax
add    $0xffffffff,%eax
mov    %eax,0x70(%rbx)
mov    $0x1,%eax
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
leaveq 
retq   
cmp    %eax,%r13d
jg     15e65 <encode_mcu_AC_refine+0x215>
mov    %rbx,%rdi
callq  165a0 <emit_eobrun>
movslq 0x58(%rbx),%rsi
mov    %rbx,%rdi
mov    $0xf0,%edx
callq  164e0 <emit_symbol>
mov    %r14,%rdx
mov    %r12,%rsi
mov    %rbx,%rdi
callq  16530 <emit_buffered_bits>
mov    0x68(%rbx),%r12
add    $0xfffffff0,%r15d
xor    %r14d,%r14d
mov    -0x70(%rbp),%rax
cmp    $0xf,%r15d
jg     15e24 <encode_mcu_AC_refine+0x1d4>
mov    -0x38(%rbp),%rcx
cmp    $0x1,%ecx
jg     15eac <encode_mcu_AC_refine+0x25c>
mov    %rbx,%rdi
callq  165a0 <emit_eobrun>
movslq 0x58(%rbx),%rsi
shl    $0x4,%r15d
lea    0x1(%r15),%edx
mov    %rbx,%rdi
callq  164e0 <emit_symbol>
mov    -0x60(%rbp),%rcx
mov    -0x58(%rbp),%rax
movslq (%rax,%rcx,4),%rax
mov    -0x50(%rbp),%rcx
movswq (%rcx,%rax,2),%rax
test   %ax,%ax
js     15ec3 <encode_mcu_AC_refine+0x273>
pushq  -0x40(%rbp)
popq   -0x60(%rbp)
jmp    15ec9 <encode_mcu_AC_refine+0x279>
and    $0x1,%cl
mov    %r14d,%edx
mov    %cl,(%r12,%rdx,1)
add    $0x1,%r14d
mov    -0x68(%rbp),%rdx
jmpq   15d50 <encode_mcu_AC_refine+0x100>
pushq  -0x48(%rbp)
popq   -0x60(%rbp)
mov    %rbx,%rdi
mov    $0x1,%edx
mov    -0x60(%rbp),%rsi
callq  16350 <emit_bits>
mov    %r14,%rdx
mov    %r12,%rsi
mov    %rbx,%rdi
callq  16530 <emit_buffered_bits>
mov    0x68(%rbx),%r12
mov    -0x68(%rbp),%rdx
xor    %r15d,%r15d
mov    -0x70(%rbp),%rax
mov    %r15,%r14
jmpq   15d50 <encode_mcu_AC_refine+0x100>
nop

0000000000015f00 <finish_pass_phuff>:
push   %rbp
mov    %rsp,%rbp
sub    $0x10,%rsp
mov    %r14,-0x8(%rbp)
mov    %r15,-0x10(%rbp)
mov    0x1f0(%rdi),%r15
mov    0x28(%rdi),%rax
mov    (%rax),%rax
mov    %rax,0x20(%r15)
mov    0x28(%rdi),%rax
mov    0x8(%rax),%rax
mov    %rax,0x28(%r15)
mov    %rdi,%r14
mov    %r15,%rdi
callq  165a0 <emit_eobrun>
mov    %r15,%rdi
callq  164a0 <flush_bits>
mov    0x20(%r15),%rcx
mov    0x28(%r14),%rax
mov    %rcx,(%rax)
mov    0x28(%r15),%rcx
mov    0x28(%r14),%rax
mov    %rcx,0x8(%rax)
mov    -0x10(%rbp),%r15
mov    -0x8(%rbp),%r14
leaveq 
retq   
data16 nopw %cs:0x0(%rax,%rax,1)
nopl   (%rax)

0000000000015f70 <finish_pass_gather_phuff>:
push   %rbp
mov    %rsp,%rbp
sub    $0x40,%rsp
mov    %r14,-0x20(%rbp)
mov    %r15,-0x28(%rbp)
mov    %r12,-0x10(%rbp)
mov    %r13,-0x18(%rbp)
mov    %rbx,-0x8(%rbp)
mov    %rdi,%rbx
mov    0x1f0(%rbx),%r12
mov    %r12,%rdi
callq  165a0 <emit_eobrun>
xor    %r13d,%r13d
movslq 0x19c(%rbx),%rax
test   %eax,%eax
je     15fb1 <finish_pass_gather_phuff+0x41>
mov    %r13,%r14
jmp    15fb7 <finish_pass_gather_phuff+0x47>
mov    $0x1,%r14d
mov    %r14,-0x30(%rbp)
lea    -0x40(%rbp),%rdi
mov    $0x10,%edx
mov    %r13,%rsi
callq  41e0 <memset@plt>
jmp    16013 <finish_pass_gather_phuff+0xa3>
lea    0x80(%rbx,%r15,8),%rax
mov    (%rax),%rcx
test   %rcx,%rcx
jne    15ff3 <finish_pass_gather_phuff+0x83>
mov    %rax,%r14
mov    %rbx,%rdi
callq  44a0 <jpeg_alloc_huff_table@plt>
mov    %rax,(%r14)
mov    %r14,%rax
mov    -0x30(%rbp),%r14
mov    0x98(%r12,%r15,8),%rdx
mov    (%rax),%rsi
mov    %rbx,%rdi
callq  40f0 <jpeg_gen_optimal_table@plt>
movl   $0x1,-0x40(%rbp,%r15,4)
add    $0x1,%r13d
movslq 0x144(%rbx),%rax
cmp    %r13d,%eax
jg     16035 <finish_pass_gather_phuff+0xc5>
mov    -0x8(%rbp),%rbx
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
leaveq 
retq   
test   %r14d,%r14d
movslq %r13d,%rax
mov    0x148(%rbx,%rax,8),%rcx
jg     1606b <finish_pass_gather_phuff+0xfb>
movslq 0x18(%rcx),%rax
movslq %eax,%r15
movslq -0x40(%rbp,%r15,4),%rax
test   %eax,%eax
jne    1600f <finish_pass_gather_phuff+0x9f>
test   %r14d,%r14d
jg     15fce <finish_pass_gather_phuff+0x5e>
lea    0xa0(%rbx,%r15,8),%rax
jmpq   15fd6 <finish_pass_gather_phuff+0x66>
movslq 0x1a4(%rbx),%rax
test   %eax,%eax
jne    1600f <finish_pass_gather_phuff+0x9f>
movslq 0x14(%rcx),%rax
jmp    16049 <finish_pass_gather_phuff+0xd9>
nopl   0x0(%rax)

0000000000016080 <start_pass_phuff>:
push   %rbp
mov    %rsp,%rbp
sub    $0x30,%rsp
mov    %r15,-0x28(%rbp)
mov    %rbx,-0x8(%rbp)
mov    %r12,-0x10(%rbp)
mov    %r13,-0x18(%rbp)
mov    %r14,-0x20(%rbp)
mov    %rsi,-0x30(%rbp)
mov    0x1f0(%rdi),%r12
mov    %rdi,0x40(%r12)
mov    %esi,0x18(%r12)
mov    $0x1,%eax
xor    %r14d,%r14d
movslq 0x19c(%rdi),%rcx
test   %ecx,%ecx
je     160c9 <start_pass_phuff+0x49>
mov    %r14,%r13
jmp    160cc <start_pass_phuff+0x4c>
mov    %rax,%r13
movslq 0x1a4(%rdi),%rcx
test   %ecx,%ecx
je     160fd <start_pass_phuff+0x7d>
test   %r13d,%r13d
jg     16119 <start_pass_phuff+0x99>
lea    -0x493(%rip),%rcx        # 15c50 <encode_mcu_AC_refine>
mov    %rcx,0x8(%r12)
mov    0x68(%r12),%rcx
test   %rcx,%rcx
je     16130 <start_pass_phuff+0xb0>
mov    %rdi,%rbx
mov    %rsi,%r15
mov    %r14,%rsi
jmp    1616b <start_pass_phuff+0xeb>
test   %r13d,%r13d
jg     16156 <start_pass_phuff+0xd6>
lea    -0x849(%rip),%rcx        # 158c0 <encode_mcu_AC_first>
mov    %rcx,0x8(%r12)
mov    %rdi,%rbx
mov    %rsi,%r15
mov    %r14,%rsi
jmp    1616b <start_pass_phuff+0xeb>
lea    -0x600(%rip),%rcx        # 15b20 <encode_mcu_DC_refine>
mov    %rcx,0x8(%r12)
mov    %rdi,%rbx
mov    %rsi,%r15
mov    %r14,%rsi
jmp    1616b <start_pass_phuff+0xeb>
mov    0x8(%rdi),%rcx
mov    (%rcx),%rcx
mov    %rsi,%r15
mov    %rax,%rsi
mov    $0x3e8,%edx
mov    %rdi,%rbx
callq  *%rcx
mov    %rax,0x68(%r12)
mov    %r14,%rsi
mov    $0x1,%eax
jmp    1616b <start_pass_phuff+0xeb>
lea    -0xa5d(%rip),%rcx        # 15700 <encode_mcu_DC_first>
mov    %rcx,0x8(%r12)
mov    %rdi,%rbx
mov    %rsi,%r15
mov    %r14,%rsi
mov    $0x808,%edx
test   %r15d,%r15d
jne    16189 <start_pass_phuff+0x109>
lea    -0x27c(%rip),%rcx        # 15f00 <finish_pass_phuff>
mov    %rcx,0x10(%r12)
mov    %rsi,%r14
jmpq   1622d <start_pass_phuff+0x1ad>
lea    -0x220(%rip),%rcx        # 15f70 <finish_pass_gather_phuff>
mov    %rcx,0x10(%r12)
mov    %rsi,%r14
jmpq   1622d <start_pass_phuff+0x1ad>
test   %r8d,%r8d
js     161a8 <start_pass_phuff+0x128>
cmp    $0x3,%r8d
jle    161da <start_pass_phuff+0x15a>
mov    (%rbx),%rax
movl   $0x32,0x28(%rax)
mov    (%rbx),%rax
mov    %r8d,0x2c(%rax)
mov    (%rbx),%rax
mov    (%rax),%rax
mov    %rcx,%r15
mov    %rbx,%rdi
callq  *%rax
mov    %r15,%rcx
mov    -0x30(%rbp),%r15
mov    $0x808,%edx
xor    %esi,%esi
mov    $0x1,%eax
mov    0x98(%r12,%rcx,8),%rdi
test   %rdi,%rdi
jne    16210 <start_pass_phuff+0x190>
mov    0x8(%rbx),%rsi
mov    (%rsi),%r8
mov    %rax,%rsi
mov    %rcx,%r15
mov    %rbx,%rdi
callq  *%r8
mov    %rax,0x98(%r12,%r15,8)
mov    %r15,%rcx
mov    -0x30(%rbp),%r15
mov    $0x808,%edx
xor    %esi,%esi
mov    0x98(%r12,%rcx,8),%rdi
callq  41e0 <memset@plt>
mov    $0x808,%edx
xor    %esi,%esi
mov    $0x1,%eax
add    $0x1,%r14d
movslq 0x144(%rbx),%rcx
cmp    %r14d,%ecx
jg     16287 <start_pass_phuff+0x207>
movl   $0x0,0x5c(%r12)
movl   $0x0,0x60(%r12)
movq   $0x0,0x30(%r12)
movl   $0x0,0x38(%r12)
mov    0x118(%rbx),%eax
mov    %eax,0x70(%r12)
movl   $0x0,0x74(%r12)
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
mov    -0x28(%rbp),%r15
leaveq 
retq   
test   %r13d,%r13d
movslq %r14d,%rcx
mov    0x148(%rbx,%rcx,8),%rdi
movl   $0x0,0x48(%r12,%rcx,4)
jg     162d9 <start_pass_phuff+0x259>
movslq 0x18(%rdi),%r8
mov    %r8d,0x58(%r12)
test   %r15d,%r15d
movslq %r8d,%rcx
jne    1619d <start_pass_phuff+0x11d>
lea    0x78(%r12,%rcx,8),%rcx
mov    %r8,%rdx
mov    %rbx,%rdi
mov    %r13,%rsi
callq  40d0 <jpeg_make_c_derived_tbl@plt>
mov    $0x808,%edx
xor    %esi,%esi
mov    $0x1,%eax
jmpq   16229 <start_pass_phuff+0x1a9>
movslq 0x1a4(%rbx),%rcx
test   %ecx,%ecx
jne    16229 <start_pass_phuff+0x1a9>
movslq 0x14(%rdi),%r8
jmp    162a9 <start_pass_phuff+0x229>
xchg   %ax,%ax

00000000000162f0 <dump_buffer>:
push   %rbp
mov    %rsp,%rbp
sub    $0x10,%rsp
mov    %r14,-0x8(%rbp)
mov    %r15,-0x10(%rbp)
mov    %rdi,%r15
mov    0x40(%r15),%rdi
mov    0x28(%rdi),%r14
mov    0x18(%r14),%rax
callq  *%rax
test   %eax,%eax
jne    1632f <dump_buffer+0x3f>
mov    0x40(%r15),%rax
mov    (%rax),%rax
movl   $0x18,0x28(%rax)
mov    0x40(%r15),%rdi
mov    (%rdi),%rax
mov    (%rax),%rax
callq  *%rax
mov    (%r14),%rax
mov    %rax,0x20(%r15)
mov    0x8(%r14),%rax
mov    %rax,0x28(%r15)
mov    -0x10(%rbp),%r15
mov    -0x8(%rbp),%r14
leaveq 
retq   
nopl   0x0(%rax,%rax,1)

0000000000016350 <emit_bits>:
push   %rbp
mov    %rsp,%rbp
sub    $0x20,%rsp
mov    %r15,-0x8(%rbp)
movslq 0x38(%rdi),%r8
test   %edx,%edx
je     16372 <emit_bits+0x22>
mov    %r14,%rax
mov    %r12,%r14
mov    %rdi,%r12
mov    %rdx,%rcx
jmp    163b7 <emit_bits+0x67>
mov    0x40(%rdi),%rax
mov    (%rax),%rax
movl   $0x28,0x28(%rax)
mov    0x40(%rdi),%rcx
mov    (%rcx),%rax
mov    (%rax),%rax
mov    %rdx,-0x18(%rbp)
mov    %rsi,-0x10(%rbp)
mov    %r8,-0x20(%rbp)
mov    %r14,%r15
mov    %r12,%r14
mov    %rdi,%r12
mov    %rcx,%rdi
callq  *%rax
mov    %r15,%rax
mov    -0x20(%rbp),%r8
mov    -0x10(%rbp),%rsi
mov    -0x18(%rbp),%rcx
mov    -0x8(%rbp),%r15
movslq 0x18(%r12),%rdx
test   %edx,%edx
je     163c8 <emit_bits+0x78>
mov    %r14,%r12
mov    %rax,%r14
leaveq 
retq   
mov    %r13,%rdi
mov    $0x1,%edx
shl    %cl,%rdx
lea    -0x1(%rdx),%r15
mov    %esi,%edx
and    %rdx,%r15
lea    (%rcx,%r8,1),%r13d
mov    $0x18,%ecx
sub    %r13d,%ecx
shl    %cl,%r15
or     0x30(%r12),%r15
mov    %r14,-0x10(%rbp)
mov    %rdi,-0x18(%rbp)
mov    %rax,-0x20(%rbp)
jmp    16475 <emit_bits+0x125>
mov    0x20(%r12),%rcx
lea    0x1(%rcx),%rax
mov    %rax,0x20(%r12)
mov    %r15,%r14
and    $0xff0000,%r14
shr    $0x10,%r14
mov    %r14b,(%rcx)
mov    0x28(%r12),%rax
add    $0xffffffffffffffff,%rax
mov    %rax,0x28(%r12)
test   %rax,%rax
jne    16438 <emit_bits+0xe8>
mov    %r12,%rdi
callq  162f0 <dump_buffer>
cmp    $0xff,%r14d
jne    1646d <emit_bits+0x11d>
mov    0x20(%r12),%rcx
lea    0x1(%rcx),%rax
mov    %rax,0x20(%r12)
movb   $0x0,(%rcx)
mov    0x28(%r12),%rax
add    $0xffffffffffffffff,%rax
mov    %rax,0x28(%r12)
test   %rax,%rax
jne    1646d <emit_bits+0x11d>
mov    %r12,%rdi
callq  162f0 <dump_buffer>
shl    $0x8,%r15
add    $0xfffffff8,%r13d
cmp    $0x7,%r13d
jg     163fe <emit_bits+0xae>
mov    %r15,0x30(%r12)
mov    %r13d,0x38(%r12)
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%r15
leaveq 
retq   
nopw   0x0(%rax,%rax,1)

00000000000164a0 <flush_bits>:
push   %rbp
mov    %rsp,%rbp
sub    $0x10,%rsp
mov    %r15,-0x8(%rbp)
mov    $0x7f,%esi
mov    $0x7,%edx
mov    %rdi,%r15
callq  16350 <emit_bits>
movq   $0x0,0x30(%r15)
movl   $0x0,0x38(%r15)
mov    -0x8(%rbp),%r15
leaveq 
retq   
data16 nopw %cs:0x0(%rax,%rax,1)
nop

00000000000164e0 <emit_symbol>:
push   %rbp
mov    %rsp,%rbp
movslq 0x18(%rdi),%rax
test   %eax,%eax
jne    1650a <emit_symbol+0x2a>
movslq %esi,%rax
mov    0x78(%rdi,%rax,8),%rcx
movslq %edx,%rax
mov    (%rcx,%rax,4),%esi
movsbq 0x400(%rcx,%rax,1),%rdx
callq  16350 <emit_bits>
leaveq 
retq   
movslq %edx,%rax
shl    $0x3,%rax
movslq %esi,%rcx
add    0x98(%rdi,%rcx,8),%rax
mov    (%rax),%rcx
add    $0x1,%rcx
mov    %rcx,(%rax)
leaveq 
retq   
nopl   0x0(%rax,%rax,1)

0000000000016530 <emit_buffered_bits>:
push   %rbp
mov    %rsp,%rbp
sub    $0x20,%rsp
movslq 0x18(%rdi),%rax
test   %eax,%eax
jne    16563 <emit_buffered_bits+0x33>
mov    $0x1,%eax
mov    %r12,-0x8(%rbp)
mov    %r13,-0x10(%rbp)
mov    %r14,-0x18(%rbp)
mov    %r15,-0x20(%rbp)
mov    %rdx,%r12
mov    %rsi,%r13
mov    %rdi,%r14
mov    %rax,%r15
jmp    1657d <emit_buffered_bits+0x4d>
leaveq 
retq   
movsbq 0x0(%r13),%rsi
mov    %r14,%rdi
mov    %r15,%rdx
callq  16350 <emit_bits>
add    $0xffffffff,%r12d
add    $0x1,%r13
test   %r12d,%r12d
jne    16565 <emit_buffered_bits+0x35>
mov    -0x20(%rbp),%r15
mov    -0x18(%rbp),%r14
mov    -0x10(%rbp),%r13
mov    -0x8(%rbp),%r12
leaveq 
retq   
data16 nopw %cs:0x0(%rax,%rax,1)
nop

00000000000165a0 <emit_eobrun>:
push   %rbp
mov    %rsp,%rbp
sub    $0x10,%rsp
mov    0x5c(%rdi),%eax
test   %eax,%eax
jne    165b1 <emit_eobrun+0x11>
leaveq 
retq   
xor    %edx,%edx
jmp    165ba <emit_eobrun+0x1a>
sar    %eax
add    $0x1,%edx
mov    %rax,%rcx
and    $0xfffffffe,%ecx
test   %ecx,%ecx
jne    165b5 <emit_eobrun+0x15>
cmp    $0xe,%edx
jg     165d1 <emit_eobrun+0x31>
mov    %r14,%rax
mov    %rdi,%r14
jmp    16607 <emit_eobrun+0x67>
mov    0x40(%rdi),%rax
mov    (%rax),%rax
movl   $0x28,0x28(%rax)
mov    0x40(%rdi),%rcx
mov    (%rcx),%rax
mov    (%rax),%rax
mov    %r14,-0x8(%rbp)
mov    %r15,-0x10(%rbp)
mov    %rdi,%r14
mov    %rcx,%rdi
mov    %rdx,%r15
callq  *%rax
mov    %r15,%rdx
mov    -0x10(%rbp),%r15
mov    -0x8(%rbp),%rax
movslq 0x58(%r14),%rsi
mov    %rdx,%rcx
shl    $0x4,%ecx
mov    %r14,%rdi
mov    %rax,-0x8(%rbp)
mov    %r15,-0x10(%rbp)
mov    %rdx,%r15
mov    %rcx,%rdx
callq  164e0 <emit_symbol>
test   %r15d,%r15d
je     1663b <emit_eobrun+0x9b>
mov    %r15,%rdx
mov    0x5c(%r14),%esi
mov    %r14,%rdi
callq  16350 <emit_bits>
movl   $0x0,0x5c(%r14)
mov    0x68(%r14),%rsi
mov    0x60(%r14),%edx
mov    %r14,%rdi
callq  16530 <emit_buffered_bits>
movl   $0x0,0x60(%r14)
mov    -0x10(%rbp),%r15
mov    -0x8(%rbp),%r14
leaveq 
retq   
data16 nopw %cs:0x0(%rax,%rax,1)

0000000000016670 <emit_restart>:
push   %rbp
mov    %rsp,%rbp
sub    $0x10,%rsp
mov    %r15,-0x8(%rbp)
mov    %rsi,-0x10(%rbp)
mov    %rdi,%r15
callq  165a0 <emit_eobrun>
movslq 0x18(%r15),%rax
test   %eax,%eax
je     166a6 <emit_restart+0x36>
mov    0x40(%r15),%rax
movslq 0x19c(%rax),%rax
test   %eax,%eax
jne    16708 <F_1_402+0x1f>
xor    %eax,%eax
jmpq   1672d <F_1_402+0x44>
mov    %r15,%rdi
callq  164a0 <flush_bits>
mov    0x20(%r15),%rcx
lea    0x1(%rcx),%rax
mov    %rax,0x20(%r15)
movb   $0xff,(%rcx)
mov    0x28(%r15),%rax
add    $0xffffffffffffffff,%rax
mov    %rax,0x28(%r15)
test   %rax,%rax
jne    166d6 <emit_restart+0x66>
mov    %r15,%rdi
callq  162f0 <dump_buffer>
mov    0x20(%r15),%rcx
lea    0x1(%rcx),%rax
mov    %rax,0x20(%r15)
mov    -0x10(%rbp),%rax
add    $0xd0,%eax
mov    %al,(%rcx)
mov    0x28(%r15),%rax
add    $0xffffffffffffffff,%rax
mov    %rax,0x28(%r15)
test   %rax,%rax
jne    16690 <emit_restart+0x20>
mov    %r15,%rdi
callq  162f0 <dump_buffer>
jmp    16690 <emit_restart+0x20>
movl   $0x0,0x5c(%r15)
movl   $0x0,0x60(%r15)
mov    -0x8(%rbp),%r15
leaveq 
retq   
movslq %eax,%rcx
movl   $0x0,0x48(%r15,%rcx,4)
add    $0x1,%eax
mov    0x40(%r15),%rcx
movslq 0x144(%rcx),%rcx
cmp    %eax,%ecx
jg     1671e <F_1_402+0x35>
mov    -0x8(%rbp),%r15
leaveq 
retq   
nopw   %cs:0x0(%rax,%rax,1)
nopl   0x0(%rax)

0000000000016750 <jinit_c_prep_controller>:
push   %rbp
mov    %rsp,%rbp
sub    $0x30,%rsp
mov    %r15,-0x28(%rbp)
test   %esi,%esi
jne    1676e <jinit_c_prep_controller+0x1e>
mov    %r13,%r15
mov    %r12,%r13
mov    %rbx,%r12
mov    %rdi,%rbx
jmp    1678c <jinit_c_prep_controller+0x3c>
mov    (%rdi),%rax
movl   $0x4,0x28(%rax)
mov    (%rdi),%rax
mov    (%rax),%rax
mov    %r13,%r15
mov    %r12,%r13
mov    %rbx,%r12
mov    %rdi,%rbx
callq  *%rax
mov    0x8(%rbx),%rax
mov    (%rax),%rax
mov    $0x1,%esi
mov    $0x70,%edx
mov    %rbx,%rdi
callq  *%rax
mov    %rax,0x1c0(%rbx)
lea    0xd0(%rip),%rcx        # 16880 <start_pass_prep>
mov    %rcx,(%rax)
mov    0x1e0(%rbx),%rcx
movslq 0x10(%rcx),%rcx
test   %ecx,%ecx
jne    167f4 <jinit_c_prep_controller+0xa4>
lea    0x197(%rip),%rcx        # 16960 <pre_process_data>
mov    %rcx,0x8(%rax)
mov    0x58(%rbx),%rdx
xor    %ecx,%ecx
mov    %r12,-0x8(%rbp)
mov    %r13,-0x10(%rbp)
mov    %r15,-0x18(%rbp)
mov    %r14,-0x20(%rbp)
mov    %rcx,%r12
mov    %rdx,%r13
mov    %rax,%r15
mov    $0x1,%r14d
jmp    1685c <jinit_c_prep_controller+0x10c>
lea    0x385(%rip),%rcx        # 16b80 <pre_process_context>
mov    %rcx,0x8(%rax)
mov    %rbx,%rdi
callq  16e30 <create_context_buffer>
mov    %r12,%rbx
mov    %r13,%r12
mov    %r15,%r13
mov    -0x28(%rbp),%r15
leaveq 
retq   
movslq 0x138(%rbx),%rax
mov    0x1c(%r13),%ecx
imul   %rcx,%rax
shl    $0x3,%rax
cqto   
movslq 0x8(%r13),%rcx
mov    0x8(%rbx),%rsi
mov    0x10(%rsi),%r8
idiv   %rcx
mov    %rax,%rdx
mov    0x13c(%rbx),%ecx
mov    %rbx,%rdi
mov    %r14,%rsi
callq  *%r8
movslq %r12d,%rcx
mov    %rax,0x10(%r15,%rcx,8)
add    $0x1,%r12d
add    $0x60,%r13
movslq 0x4c(%rbx),%rax
cmp    %r12d,%eax
jg     16816 <jinit_c_prep_controller+0xc6>
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
mov    -0x28(%rbp),%r15
leaveq 
retq   
nopl   0x0(%rax,%rax,1)

0000000000016880 <start_pass_prep>:
push   %rbp
mov    %rsp,%rbp
sub    $0x10,%rsp
mov    0x1c0(%rdi),%rax
test   %esi,%esi
je     168c7 <start_pass_prep+0x47>
mov    (%rdi),%rcx
movl   $0x4,0x28(%rcx)
mov    (%rdi),%rcx
mov    (%rcx),%rcx
mov    %rdi,%rdx
mov    %r14,-0x8(%rbp)
mov    %r15,-0x10(%rbp)
mov    %rdi,%r14
mov    %rdx,%rdi
mov    %rax,%r15
callq  *%rcx
mov    %r15,%rax
mov    %r14,%rdi
mov    -0x10(%rbp),%r15
mov    -0x8(%rbp),%r14
mov    0x34(%rdi),%ecx
mov    %ecx,0x60(%rax)
movl   $0x0,0x64(%rax)
movl   $0x0,0x68(%rax)
movslq 0x13c(%rdi),%rcx
add    %ecx,%ecx
mov    %ecx,0x6c(%rax)
leaveq 
retq   
nopl   0x0(%rax)

00000000000168f0 <expand_bottom_edge>:
push   %rbp
mov    %rsp,%rbp
sub    $0x30,%rsp
mov    %rbx,-0x8(%rbp)
mov    %r12,-0x10(%rbp)
mov    %r13,-0x18(%rbp)
mov    %r14,-0x20(%rbp)
mov    %r15,-0x28(%rbp)
mov    %rdx,%rbx
mov    %rcx,%r12
mov    %rdi,%r13
mov    %rsi,%r15
lea    -0x1(%rbx),%r14d
mov    $0x1,%r8d
jmp    16941 <expand_bottom_edge+0x51>
mov    %r13,%rdx
mov    %r13,%rdi
mov    %r14,%rsi
mov    %rbx,%rcx
mov    %r15,%r9
callq  43f0 <jcopy_sample_rows@plt>
add    $0x1,%ebx
mov    $0x1,%r8d
cmp    %r12d,%ebx
jl     16924 <expand_bottom_edge+0x34>
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
leaveq 
retq   
nopl   0x0(%rax)

0000000000016960 <pre_process_data>:
push   %rbp
mov    %rsp,%rbp
sub    $0x60,%rsp
mov    %r15,-0x28(%rbp)
mov    %rsi,-0x40(%rbp)
mov    %r8,-0x38(%rbp)
mov    %rcx,-0x48(%rbp)
mov    %rbx,-0x8(%rbp)
mov    %r12,-0x10(%rbp)
mov    %r13,-0x18(%rbp)
mov    %r14,-0x20(%rbp)
mov    0x10(%rbp),%eax
mov    %rax,-0x30(%rbp)
mov    0x1c0(%rdi),%r14
lea    0x10(%r14),%rbx
mov    %rbx,-0x58(%rbp)
mov    %rdi,%r12
mov    %rdx,%r13
mov    %r9,%r15
jmpq   16a71 <pre_process_data+0x111>
mov    (%r15),%edx
cmp    %eax,%edx
jae    16a93 <pre_process_data+0x133>
movslq 0x64(%r14),%rdx
movslq 0x13c(%r12),%rax
sub    %edx,%eax
sub    %edi,%ecx
cmp    %eax,%ecx
jbe    169ce <pre_process_data+0x6e>
mov    %rax,%rcx
lea    (%rsi,%rdi,8),%rsi
mov    0x1d8(%r12),%rax
mov    0x8(%rax),%rax
mov    %rdx,%r9
mov    %rbx,%rdx
mov    %rcx,%rbx
mov    %r9,%rcx
mov    %r12,%rdi
mov    %rbx,%r8
callq  *%rax
mov    %rbx,%rax
add    0x0(%r13),%eax
mov    %eax,0x0(%r13)
mov    %rbx,%rdx
add    0x64(%r14),%edx
mov    %edx,0x64(%r14)
mov    0x60(%r14),%ecx
mov    %rcx,%rax
sub    %ebx,%eax
mov    %eax,0x60(%r14)
cmp    %ecx,%ebx
je     16aa9 <pre_process_data+0x149>
mov    -0x58(%rbp),%rbx
movslq 0x13c(%r12),%rax
cmp    0x64(%r14),%eax
jne    16a5d <pre_process_data+0xfd>
mov    0x1e0(%r12),%rax
mov    0x8(%rax),%rax
mov    (%r15),%r8d
mov    %r12,%rdi
mov    %rbx,%rsi
xor    %edx,%edx
mov    -0x38(%rbp),%rcx
callq  *%rax
movl   $0x0,0x64(%r14)
mov    (%r15),%eax
add    $0x1,%eax
mov    %eax,(%r15)
mov    0x60(%r14),%eax
test   %eax,%eax
je     16abc <pre_process_data+0x15c>
mov    -0x48(%rbp),%rcx
mov    -0x30(%rbp),%rax
mov    -0x40(%rbp),%rsi
mov    0x0(%r13),%edi
cmp    %ecx,%edi
jb     169ac <pre_process_data+0x4c>
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
mov    -0x28(%rbp),%r15
leaveq 
retq   
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
mov    -0x28(%rbp),%r15
leaveq 
retq   
cmp    0x13c(%r12),%edx
jl     16acf <pre_process_data+0x16f>
mov    -0x58(%rbp),%rbx
jmpq   16a21 <pre_process_data+0xc1>
mov    -0x30(%rbp),%rax
cmp    (%r15),%eax
ja     16adc <pre_process_data+0x17c>
mov    -0x48(%rbp),%rcx
mov    -0x40(%rbp),%rsi
jmp    16a71 <pre_process_data+0x111>
mov    %r15,-0x50(%rbp)
mov    -0x58(%rbp),%rbx
xor    %r15d,%r15d
jmp    16b0a <pre_process_data+0x1aa>
mov    0x58(%r12),%r13
mov    -0x38(%rbp),%r14
xor    %ebx,%ebx
jmp    16b58 <pre_process_data+0x1f8>
movslq %r15d,%rax
mov    (%rbx,%rax,8),%rdi
mov    0x30(%r12),%esi
movslq 0x64(%r14),%rdx
movslq 0x13c(%r12),%rcx
callq  168f0 <expand_bottom_edge>
add    $0x1,%r15d
movslq 0x4c(%r12),%rax
cmp    %r15d,%eax
jg     16ae9 <pre_process_data+0x189>
movslq 0x13c(%r12),%rax
mov    %eax,0x64(%r14)
mov    -0x50(%rbp),%r15
jmpq   16a21 <pre_process_data+0xc1>
movslq %ebx,%rcx
mov    (%r14,%rcx,8),%rdi
mov    0xc(%r13),%ecx
mov    %rcx,%rdx
imul   (%r15),%edx
imul   %ecx,%eax
mov    0x1c(%r13),%esi
shl    $0x3,%esi
mov    %rax,%rcx
callq  168f0 <expand_bottom_edge>
add    $0x1,%ebx
add    $0x60,%r13
mov    -0x30(%rbp),%rax
movslq 0x4c(%r12),%rcx
cmp    %ebx,%ecx
jg     16b29 <pre_process_data+0x1c9>
mov    %eax,(%r15)
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
mov    -0x28(%rbp),%r15
leaveq 
retq   
nopw   0x0(%rax,%rax,1)

0000000000016b80 <pre_process_context>:
push   %rbp
mov    %rsp,%rbp
sub    $0x80,%rsp
mov    %r15,-0x28(%rbp)
mov    %r14,-0x20(%rbp)
mov    %r13,-0x18(%rbp)
mov    %rsi,-0x58(%rbp)
mov    %r8,-0x48(%rbp)
mov    %rcx,-0x78(%rbp)
mov    %rdx,-0x40(%rbp)
mov    %rbx,-0x8(%rbp)
mov    %r12,-0x10(%rbp)
mov    %r9,-0x50(%rbp)
mov    0x10(%rbp),%eax
mov    %rax,-0x30(%rbp)
xor    %r13d,%r13d
mov    0x1c0(%rdi),%r12
lea    0x10(%r12),%r14
mov    %r14,-0x60(%rbp)
movslq 0x13c(%rdi),%rbx
lea    (%rbx,%rbx,2),%r10d
mov    %r10,-0x70(%rbp)
mov    %rdi,%rbx
mov    %r9,%r15
jmpq   16d0a <pre_process_context+0x18a>
movslq 0x64(%r12),%r9
movslq 0x6c(%r12),%rax
sub    %r9d,%eax
sub    %edi,%ecx
cmp    %ecx,%eax
jae    16bfd <pre_process_context+0x7d>
mov    %rax,%rcx
lea    (%rsi,%rdi,8),%rsi
mov    0x1d8(%rbx),%rax
mov    0x8(%rax),%rax
mov    %rdx,%r13
mov    %r14,%rdx
mov    %rcx,%r14
mov    %r9,%rcx
mov    %rbx,%rdi
mov    %r14,%r8
callq  *%rax
mov    0x34(%rbx),%eax
cmp    0x60(%r12),%eax
je     16d27 <pre_process_context+0x1a7>
mov    %r13,%rdx
xor    %r13d,%r13d
mov    %r14,%rax
add    (%rdx),%eax
mov    %eax,(%rdx)
mov    %r14,%rax
add    0x64(%r12),%eax
mov    %eax,0x64(%r12)
mov    0x60(%r12),%eax
sub    %r14d,%eax
mov    %eax,0x60(%r12)
mov    -0x60(%rbp),%r14
mov    -0x78(%rbp),%rcx
mov    -0x30(%rbp),%rax
mov    -0x48(%rbp),%r8
mov    -0x58(%rbp),%rsi
mov    -0x70(%rbp),%r10
movslq 0x6c(%r12),%rdi
cmp    0x64(%r12),%edi
jne    16d0a <pre_process_context+0x18a>
mov    0x1e0(%rbx),%rcx
mov    0x8(%rcx),%r9
mov    %r8,%rcx
mov    %r14,%rsi
mov    %r10,%r14
mov    %rax,%r13
mov    0x68(%r12),%edx
mov    (%r15),%r8d
mov    %rbx,%rdi
callq  *%r9
mov    (%r15),%eax
add    $0x1,%eax
mov    %eax,(%r15)
movslq 0x68(%r12),%rax
add    0x13c(%rbx),%eax
mov    %eax,0x68(%r12)
cmp    %r14d,%eax
jl     16cc9 <pre_process_context+0x149>
movl   $0x0,0x68(%r12)
movslq 0x64(%r12),%rax
cmp    %r14d,%eax
jl     16cdc <pre_process_context+0x15c>
movl   $0x0,0x64(%r12)
movslq 0x13c(%rbx),%rax
add    0x64(%r12),%eax
mov    %eax,0x6c(%r12)
mov    %r13,%rax
mov    %r14,%r10
mov    -0x40(%rbp),%rdx
mov    -0x60(%rbp),%r14
mov    -0x78(%rbp),%rcx
mov    -0x48(%rbp),%r8
mov    -0x58(%rbp),%rsi
xor    %r13d,%r13d
mov    (%r15),%edi
cmp    %eax,%edi
jb     16d39 <pre_process_context+0x1b9>
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
mov    -0x18(%rbp),%r13
mov    -0x20(%rbp),%r14
mov    -0x28(%rbp),%r15
leaveq 
retq   
mov    %r14,-0x38(%rbp)
xor    %r13d,%r13d
mov    $0x1,%r8d
mov    %r13,%rax
jmp    16d97 <pre_process_context+0x217>
mov    (%rdx),%edi
cmp    %ecx,%edi
jb     16be7 <pre_process_context+0x67>
mov    0x60(%r12),%edi
test   %edi,%edi
jne    16db0 <pre_process_context+0x230>
movslq 0x6c(%r12),%rdi
cmp    0x64(%r12),%edi
jg     16de3 <pre_process_context+0x263>
jmpq   16c6d <pre_process_context+0xed>
mov    0x10(%r12,%r14,8),%rdi
mov    %r15,%rcx
neg    %ecx
mov    0x30(%rbx),%r9d
mov    %rdi,%rdx
mov    %r13,%rsi
callq  43f0 <jcopy_sample_rows@plt>
add    $0x1,%r15d
mov    $0x1,%r8d
movslq 0x13c(%rbx),%rax
cmp    %r15d,%eax
jge    16d61 <pre_process_context+0x1e1>
mov    -0x68(%rbp),%rax
add    $0x1,%eax
movslq 0x4c(%rbx),%rcx
cmp    %eax,%ecx
jg     16e16 <pre_process_context+0x296>
mov    -0x50(%rbp),%r15
mov    -0x38(%rbp),%r14
mov    -0x40(%rbp),%rdx
jmpq   16c34 <pre_process_context+0xb4>
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
mov    -0x18(%rbp),%r13
mov    -0x20(%rbp),%r14
mov    -0x28(%rbp),%r15
leaveq 
retq   
movslq %r13d,%rax
mov    (%r14,%rax,8),%rdi
mov    0x30(%rbx),%esi
movslq 0x64(%r12),%rdx
movslq 0x6c(%r12),%rcx
callq  168f0 <expand_bottom_edge>
add    $0x1,%r13d
movslq 0x4c(%rbx),%rax
cmp    %r13d,%eax
jg     16dc6 <pre_process_context+0x246>
movslq 0x6c(%r12),%rax
mov    %eax,0x64(%r12)
mov    -0x40(%rbp),%rdx
mov    -0x78(%rbp),%rcx
mov    -0x30(%rbp),%rax
mov    -0x48(%rbp),%r8
mov    -0x58(%rbp),%rsi
mov    -0x70(%rbp),%r10
xor    %r13d,%r13d
jmpq   16c6d <pre_process_context+0xed>
movslq %eax,%r14
mov    %rax,-0x68(%rbp)
mov    %r8,%r15
jmpq   16d84 <pre_process_context+0x204>
data16 nopw %cs:0x0(%rax,%rax,1)

0000000000016e30 <create_context_buffer>:
push   %rbp
mov    %rsp,%rbp
sub    $0x60,%rsp
mov    %r13,-0x18(%rbp)
mov    %r14,-0x20(%rbp)
mov    %r15,-0x28(%rbp)
mov    %rdi,-0x58(%rbp)
mov    %rbx,-0x8(%rbp)
mov    %r12,-0x10(%rbp)
mov    0x1c0(%rdi),%rax
mov    %rax,-0x38(%rbp)
movslq 0x13c(%rdi),%r12
mov    %r12,%rax
imul   0x4c(%rdi),%eax
lea    (%rax,%rax,4),%eax
movslq %eax,%rdx
shl    $0x3,%rdx
mov    0x8(%rdi),%rax
mov    (%rax),%rax
mov    $0x1,%r13d
mov    %rdi,%r15
mov    %r13,%rsi
callq  *%rax
mov    0x58(%r15),%r8
lea    (%r12,%r12,2),%ecx
mov    %rcx,-0x50(%rbp)
movslq %ecx,%rbx
shl    $0x3,%rbx
mov    %rbx,-0x40(%rbp)
lea    (%r12,%r12,4),%edx
movslq %edx,%rdx
mov    %rdx,-0x48(%rbp)
mov    %r13,%rsi
mov    %rax,%r13
mov    %r15,%rdi
xor    %r14d,%r14d
mov    %r14,%r15
jmp    16f18 <create_context_buffer+0xe8>
lea    (%rcx,%r12,2),%eax
movslq %eax,%rax
mov    (%rbx,%rax,8),%rax
movslq %ecx,%rdx
mov    %rax,0x0(%r13,%rdx,8)
mov    (%rbx,%rdx,8),%rdx
lea    (%rcx,%r12,4),%eax
movslq %eax,%rax
mov    %rdx,0x0(%r13,%rax,8)
add    $0x1,%ecx
cmp    %r12d,%ecx
jl     16ebb <create_context_buffer+0x8b>
movslq %r15d,%rax
mov    -0x30(%rbp),%rdx
mov    -0x38(%rbp),%rcx
mov    %rdx,0x10(%rcx,%rax,8)
add    $0x1,%r15d
mov    -0x48(%rbp),%rax
lea    0x0(%r13,%rax,8),%r13
lea    0x60(%rsi),%r8
mov    -0x40(%rbp),%rbx
mov    -0x50(%rbp),%rcx
mov    -0x58(%rbp),%rdi
mov    $0x1,%esi
movslq 0x4c(%rdi),%rax
cmp    %r15d,%eax
jg     16f37 <create_context_buffer+0x107>
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
leaveq 
retq   
movslq 0x138(%rdi),%rax
mov    0x1c(%r8),%edx
imul   %rdx,%rax
shl    $0x3,%rax
cqto   
movslq 0x8(%r8),%r9
mov    %r8,-0x60(%rbp)
mov    0x8(%rdi),%r8
mov    0x10(%r8),%r8
idiv   %r9
mov    %rax,%rdx
callq  *%r8
mov    %rbx,%rdx
mov    %rax,%rbx
lea    0x0(%r13,%r12,8),%rdi
mov    %rdi,-0x30(%rbp)
mov    %rbx,%rsi
callq  42c0 <memcpy@plt>
mov    -0x60(%rbp),%rsi
mov    %r14,%rcx
jmpq   16ee1 <create_context_buffer+0xb1>
nopl   0x0(%rax,%rax,1)

0000000000016f90 <jinit_downsampler>:
push   %rbp
mov    %rsp,%rbp
sub    $0x50,%rsp
mov    %r14,-0x20(%rbp)
mov    %r15,-0x28(%rbp)
mov    %r13,-0x18(%rbp)
mov    %r12,-0x10(%rbp)
mov    %rdi,-0x40(%rbp)
mov    %rbx,-0x8(%rbp)
mov    0x8(%rdi),%rax
mov    (%rax),%rax
mov    $0x1,%r15d
mov    $0x68,%edx
mov    %rdi,%r12
mov    %r15,%rsi
callq  *%rax
mov    %rax,0x1e0(%r12)
lea    0x347(%rip),%rcx        # 17320 <start_pass_downsample>
mov    %rcx,(%rax)
lea    0x39d(%rip),%rcx        # 17380 <sep_downsample>
mov    %rcx,0x8(%rax)
movl   $0x0,0x10(%rax)
movslq 0x10c(%r12),%rcx
test   %ecx,%ecx
jne    16fff <jinit_downsampler+0x6f>
mov    %rax,%rbx
jmp    17019 <jinit_downsampler+0x89>
mov    (%r12),%rcx
movl   $0x19,0x28(%rcx)
mov    (%r12),%rcx
mov    (%rcx),%rcx
mov    %rax,%rbx
mov    %r12,%rdi
callq  *%rcx
mov    0x58(%r12),%r13
lea    0x2675b(%rip),%rcx        # 3d780 <jsimd_h2v1_downsample>
mov    %rcx,-0x30(%rbp)
lea    0x26710(%rip),%rdi        # 3d740 <jsimd_h2v2_downsample>
mov    %rdi,-0x38(%rbp)
xor    %esi,%esi
lea    0xa43(%rip),%r8        # 17a80 <fullsize_smooth_downsample>
lea    0x56c(%rip),%rax        # 175b0 <fullsize_downsample>
lea    0x765(%rip),%rdx        # 177b0 <h2v2_smooth_downsample>
mov    %rsi,%r14
jmpq   170ec <jinit_downsampler+0x15c>
movslq %r14d,%r9
movslq 0x138(%r12),%r10
cmp    0x8(%r13),%r10d
je     17120 <jinit_downsampler+0x190>
movslq 0x138(%r12),%r10
movslq 0x8(%r13),%rax
add    %eax,%eax
cmp    %eax,%r10d
je     17149 <jinit_downsampler+0x1b9>
movslq 0x138(%r12),%r10
movslq 0x8(%r13),%rax
add    %eax,%eax
cmp    %eax,%r10d
je     171a2 <jinit_downsampler+0x212>
movslq 0x138(%r12),%rax
movslq 0x8(%r13),%r10
cltd   
idiv   %r10d
test   %edx,%edx
je     17215 <jinit_downsampler+0x285>
mov    (%r12),%rax
movl   $0x26,0x28(%rax)
mov    (%r12),%rax
mov    (%rax),%rax
mov    %r12,%rdi
callq  *%rax
mov    -0x30(%rbp),%rcx
lea    0x6e0(%rip),%rdx        # 177b0 <h2v2_smooth_downsample>
lea    0x9a9(%rip),%r8        # 17a80 <fullsize_smooth_downsample>
mov    -0x38(%rbp),%rdi
lea    0x4ce(%rip),%rax        # 175b0 <fullsize_downsample>
add    $0x1,%r14d
add    $0x60,%r13
xor    %esi,%esi
movslq 0x4c(%r12),%r9
cmp    %r14d,%r9d
jg     17053 <jinit_downsampler+0xc3>
movslq 0x110(%r12),%rax
test   %eax,%eax
jne    1724f <jinit_downsampler+0x2bf>
mov    -0x8(%rbp),%rbx
mov    -0x10(%rbp),%r12
mov    -0x18(%rbp),%r13
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
leaveq 
retq   
movslq 0x13c(%r12),%r10
cmp    0xc(%r13),%r10d
jne    17068 <jinit_downsampler+0xd8>
movslq 0x110(%r12),%rsi
test   %esi,%esi
jne    1726e <jinit_downsampler+0x2de>
mov    %rax,0x18(%rbx,%r9,8)
jmp    170e2 <jinit_downsampler+0x152>
movslq 0x13c(%r12),%rax
cmp    0xc(%r13),%eax
jne    1707f <jinit_downsampler+0xef>
mov    %r9,%r12
mov    %rcx,%r15
callq  3d710 <jsimd_can_h2v1_downsample>
test   %eax,%eax
jne    1727f <jinit_downsampler+0x2ef>
lea    0x49b(%rip),%rax        # 17610 <h2v1_downsample>
mov    %rax,0x18(%rbx,%r12,8)
mov    %r15,%rcx
lea    0x62c(%rip),%rdx        # 177b0 <h2v2_smooth_downsample>
lea    0x8f5(%rip),%r8        # 17a80 <fullsize_smooth_downsample>
xor    %r15d,%r15d
mov    -0x38(%rbp),%rdi
mov    -0x40(%rbp),%r12
lea    0x413(%rip),%rax        # 175b0 <fullsize_downsample>
jmpq   170e2 <jinit_downsampler+0x152>
movslq 0x13c(%r12),%r10
movslq 0xc(%r13),%rax
add    %eax,%eax
cmp    %eax,%r10d
jne    17096 <jinit_downsampler+0x106>
movslq 0x110(%r12),%rax
test   %eax,%eax
jne    172ac <jinit_downsampler+0x31c>
mov    %r13,-0x48(%rbp)
mov    %r9,%r12
mov    %rdi,%r13
callq  3d6e0 <jsimd_can_h2v2_downsample>
test   %eax,%eax
jne    172c4 <jinit_downsampler+0x334>
lea    0x4d9(%rip),%rax        # 176c0 <h2v2_downsample>
mov    %rax,0x18(%rbx,%r12,8)
mov    %r13,%rdi
mov    -0x30(%rbp),%rcx
mov    -0x48(%rbp),%r13
lea    0x5b2(%rip),%rdx        # 177b0 <h2v2_smooth_downsample>
lea    0x87b(%rip),%r8        # 17a80 <fullsize_smooth_downsample>
mov    -0x40(%rbp),%r12
lea    0x3a0(%rip),%rax        # 175b0 <fullsize_downsample>
jmpq   170e2 <jinit_downsampler+0x152>
movslq 0x13c(%r12),%rax
movslq 0xc(%r13),%r10
cltd   
idiv   %r10d
test   %edx,%edx
jne    170ae <jinit_downsampler+0x11e>
lea    0x1fc(%rip),%rax        # 17430 <int_downsample>
mov    %rax,0x18(%rbx,%r9,8)
mov    %rsi,%r15
lea    0x56d(%rip),%rdx        # 177b0 <h2v2_smooth_downsample>
lea    0x366(%rip),%rax        # 175b0 <fullsize_downsample>
jmpq   170e2 <jinit_downsampler+0x152>
test   %r15d,%r15d
jle    172f2 <jinit_downsampler+0x362>
mov    -0x8(%rbp),%rbx
mov    -0x10(%rbp),%r12
mov    -0x18(%rbp),%r13
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
leaveq 
retq   
mov    %r8,0x18(%rbx,%r9,8)
movl   $0x1,0x10(%rbx)
jmpq   170e2 <jinit_downsampler+0x152>
mov    %r15,0x18(%rbx,%r12,8)
mov    %r15,%rcx
lea    0x522(%rip),%rdx        # 177b0 <h2v2_smooth_downsample>
lea    0x7eb(%rip),%r8        # 17a80 <fullsize_smooth_downsample>
xor    %r15d,%r15d
mov    -0x38(%rbp),%rdi
mov    -0x40(%rbp),%r12
lea    0x309(%rip),%rax        # 175b0 <fullsize_downsample>
jmpq   170e2 <jinit_downsampler+0x152>
mov    %rdx,0x18(%rbx,%r9,8)
movl   $0x1,0x10(%rbx)
lea    0x2f1(%rip),%rax        # 175b0 <fullsize_downsample>
jmpq   170e2 <jinit_downsampler+0x152>
mov    %r13,0x18(%rbx,%r12,8)
mov    %r13,%rdi
mov    -0x30(%rbp),%rcx
mov    -0x48(%rbp),%r13
lea    0x4d5(%rip),%rdx        # 177b0 <h2v2_smooth_downsample>
lea    0x79e(%rip),%r8        # 17a80 <fullsize_smooth_downsample>
mov    -0x40(%rbp),%r12
lea    0x2c3(%rip),%rax        # 175b0 <fullsize_downsample>
jmpq   170e2 <jinit_downsampler+0x152>
mov    (%r12),%rax
movl   $0x63,0x28(%rax)
mov    (%r12),%rax
mov    0x8(%rax),%rax
mov    %r12,%rdi
callq  *%rax
mov    -0x8(%rbp),%rbx
mov    -0x10(%rbp),%r12
mov    -0x18(%rbp),%r13
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
leaveq 
retq   

0000000000017320 <start_pass_downsample>:
push   %rbp
mov    %rsp,%rbp
leaveq 
retq   
nopw   %cs:0x0(%rax,%rax,1)

0000000000017330 <expand_right_edge>:
push   %rbp
mov    %rsp,%rbp
sub    %edx,%ecx
test   %ecx,%ecx
jg     1733c <expand_right_edge+0xc>
leaveq 
retq   
mov    %edx,%r9d
xor    %r8d,%r8d
jmp    17356 <expand_right_edge+0x26>
mov    %r10b,(%rax)
add    $0x1,%rax
add    $0xffffffff,%edx
test   %edx,%edx
jg     17344 <expand_right_edge+0x14>
add    $0x1,%r8d
cmp    %esi,%r8d
jl     1735d <expand_right_edge+0x2d>
leaveq 
retq   
movslq %r8d,%rax
mov    (%rdi,%rax,8),%rax
add    %r9,%rax
movzbl -0x1(%rax),%r10d
mov    %rcx,%rdx
jmp    1734e <expand_right_edge+0x1e>
data16 nopw %cs:0x0(%rax,%rax,1)
nopl   0x0(%rax)

0000000000017380 <sep_downsample>:
push   %rbp
mov    %rsp,%rbp
sub    $0x40,%rsp
mov    %r8,-0x38(%rbp)
mov    %rcx,-0x30(%rbp)
mov    %rbx,-0x8(%rbp)
mov    %r12,-0x10(%rbp)
mov    %r13,-0x18(%rbp)
mov    %r14,-0x20(%rbp)
mov    %r15,-0x28(%rbp)
mov    0x1e0(%rdi),%r9
mov    %r9,-0x40(%rbp)
mov    0x58(%rdi),%r13
mov    %edx,%ebx
shl    $0x3,%rbx
mov    %rcx,%rax
mov    %rsi,%r14
mov    %rdi,%r15
xor    %r12d,%r12d
jmp    17402 <sep_downsample+0x82>
movslq %r12d,%rsi
mov    %rbx,%rdx
add    (%r14,%rsi,8),%rdx
imul   0xc(%r13),%r8d
mov    %r8d,%ecx
shl    $0x3,%rcx
add    (%rax,%rsi,8),%rcx
mov    0x18(%r9,%rsi,8),%rax
mov    %r15,%rdi
mov    %r13,%rsi
callq  *%rax
add    $0x1,%r12d
add    $0x60,%r13
mov    -0x40(%rbp),%r9
mov    -0x30(%rbp),%rax
mov    -0x38(%rbp),%r8
movslq 0x4c(%r15),%rcx
cmp    %r12d,%ecx
jg     173c7 <sep_downsample+0x47>
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
leaveq 
retq   
data16 nopw %cs:0x0(%rax,%rax,1)
nopl   0x0(%rax)

0000000000017430 <int_downsample>:
push   %rbp
mov    %rsp,%rbp
sub    $0x80,%rsp
mov    %r15,-0x28(%rbp)
mov    %r14,-0x20(%rbp)
mov    %rcx,-0x40(%rbp)
mov    %rdx,-0x78(%rbp)
mov    %rbx,-0x8(%rbp)
mov    %r12,-0x10(%rbp)
mov    %r13,-0x18(%rbp)
mov    %rdi,%r8
mov    %rdx,%rdi
mov    %rsi,%r14
mov    %r14,-0x30(%rbp)
movslq 0x138(%r8),%rax
movslq 0x8(%r14),%rcx
cltd   
mov    0x1c(%r14),%r13d
idiv   %ecx
mov    %r13,%rcx
imul   %eax,%ecx
shl    $0x3,%ecx
movslq 0x13c(%r8),%r15
movslq 0xc(%r14),%r12
movslq 0x13c(%r8),%rsi
mov    0x30(%r8),%edx
mov    %rax,%rbx
callq  17330 <expand_right_edge>
mov    %r15,%rax
cltd   
idiv   %r12d
mov    %rbx,%rdx
imul   %eax,%edx
mov    %rdx,%rcx
shr    $0x1f,%ecx
add    %edx,%ecx
sar    %ecx
movslq %ecx,%r9
movslq %edx,%r10
shl    $0x3,%r13d
mov    %r13,-0x70(%rbp)
mov    %rax,%r8
xor    %r11d,%r11d
mov    -0x78(%rbp),%r12
mov    -0x40(%rbp),%rcx
mov    %r11,%rdx
mov    %rdx,%rdi
jmp    1753e <int_downsample+0x10e>
lea    0x1(%rsi),%r13
add    $0x1,%edx
movzbl (%rsi),%eax
add    %rax,%rcx
mov    %r13,%rsi
cmp    %ebx,%edx
jl     174d8 <int_downsample+0xa8>
add    $0x1,%edi
mov    -0x78(%rbp),%rax
lea    0x1(%rax),%edx
mov    -0x48(%rbp),%rsi
cmp    %r8d,%edx
jl     17560 <int_downsample+0x130>
lea    (%r9,%rcx,1),%rax
cqto   
idiv   %r10
mov    -0x38(%rbp),%rcx
mov    %al,(%rcx)
lea    0x1(%rcx),%rax
mov    -0x68(%rbp),%rcx
add    $0x1,%ecx
mov    -0x50(%rbp),%rdx
add    %ebx,%edx
mov    -0x58(%rbp),%rdi
mov    -0x70(%rbp),%r13
cmp    %r13d,%ecx
jb     17573 <int_downsample+0x143>
mov    -0x60(%rbp),%rax
lea    0x1(%rax),%edx
add    %r8d,%edi
mov    -0x30(%rbp),%r14
mov    -0x40(%rbp),%rcx
mov    %rdi,-0x58(%rbp)
movslq 0xc(%r14),%rax
cmp    %edx,%eax
jg     17590 <int_downsample+0x160>
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
mov    -0x20(%rbp),%r14
mov    -0x28(%rbp),%r15
leaveq 
retq   
movslq %edi,%rax
add    (%r12,%rax,8),%rsi
mov    %rdx,-0x78(%rbp)
mov    %r11,%rdx
jmpq   174e8 <int_downsample+0xb8>
mov    %edx,%esi
mov    %rax,-0x38(%rbp)
mov    %rcx,-0x68(%rbp)
mov    %rdx,-0x50(%rbp)
mov    %rsi,-0x48(%rbp)
mov    %r11,%rcx
mov    %rcx,%rdx
jmpq   174fa <int_downsample+0xca>
movslq %edx,%rax
mov    (%rcx,%rax,8),%rax
mov    %rdx,-0x60(%rbp)
mov    %r11,%rcx
mov    %rcx,%rdx
jmp    17527 <int_downsample+0xf7>
data16 nopw %cs:0x0(%rax,%rax,1)
xchg   %ax,%ax

00000000000175b0 <fullsize_downsample>:
push   %rbp
mov    %rsp,%rbp
sub    $0x20,%rsp
mov    %r13,-0x8(%rbp)
mov    %r14,-0x10(%rbp)
mov    %r15,-0x18(%rbp)
mov    %rsi,%r13
mov    %rcx,%r14
mov    %rdi,%r15
mov    %rdx,%rdi
xor    %esi,%esi
movslq 0x13c(%r15),%r8
mov    0x30(%r15),%r9d
mov    %rsi,%rcx
mov    %r14,%rdx
callq  43f0 <jcopy_sample_rows@plt>
movslq 0x13c(%r15),%rsi
mov    0x30(%r15),%edx
mov    0x1c(%r13),%ecx
shl    $0x3,%ecx
mov    %r14,%rdi
callq  17330 <expand_right_edge>
mov    -0x18(%rbp),%r15
mov    -0x10(%rbp),%r14
mov    -0x8(%rbp),%r13
leaveq 
retq   

0000000000017610 <h2v1_downsample>:
push   %rbp
mov    %rsp,%rbp
sub    $0x20,%rsp
mov    %r12,-0x8(%rbp)
mov    %r13,-0x10(%rbp)
mov    %r14,-0x18(%rbp)
mov    %r15,-0x20(%rbp)
movslq 0x13c(%rdi),%rax
mov    0x30(%rdi),%r9d
mov    %rdx,%r13
mov    %r9,%rdx
mov    %rcx,%r14
mov    %rsi,%r15
mov    %rax,%rsi
mov    0x1c(%r15),%r12d
mov    %r12,%rcx
shl    $0x4,%ecx
mov    %r13,%rdi
callq  17330 <expand_right_edge>
shl    $0x3,%r12d
xor    %esi,%esi
mov    %rsi,%r10
jmp    17690 <h2v1_downsample+0x80>
mov    %r8,%r11
xor    $0x1,%r11d
movzbl 0x1(%rax),%edx
movzbl (%rax),%ecx
add    %edx,%ecx
add    %ecx,%r8d
shr    %r8d
mov    %r8b,(%rdi)
add    $0x2,%rax
add    $0x1,%rdi
add    $0x1,%r9d
mov    %r11,%r8
cmp    %r12d,%r9d
jb     1765f <h2v1_downsample+0x4f>
add    $0x1,%r10d
movslq 0xc(%r15),%rax
cmp    %r10d,%eax
jg     176ab <h2v1_downsample+0x9b>
mov    -0x20(%rbp),%r15
mov    -0x18(%rbp),%r14
mov    -0x10(%rbp),%r13
mov    -0x8(%rbp),%r12
leaveq 
retq   
movslq %r10d,%rax
mov    (%r14,%rax,8),%rdi
mov    0x0(%r13,%rax,8),%rax
mov    %rsi,%r8
mov    %r8,%r9
jmp    17687 <h2v1_downsample+0x77>
nop

00000000000176c0 <h2v2_downsample>:
push   %rbp
mov    %rsp,%rbp
sub    $0x30,%rsp
mov    %r12,-0x10(%rbp)
mov    %r13,-0x18(%rbp)
mov    %r14,-0x20(%rbp)
mov    %r15,-0x28(%rbp)
mov    %rbx,-0x8(%rbp)
movslq 0x13c(%rdi),%rax
mov    0x30(%rdi),%r8d
mov    %rsi,%r13
mov    %rax,%rsi
mov    %rcx,%r14
mov    %rdx,%r15
mov    %r8,%rdx
mov    0x1c(%r13),%r12d
mov    %r12,%rcx
shl    $0x4,%ecx
mov    %r15,%rdi
callq  17330 <expand_right_edge>
shl    $0x3,%r12d
xor    %eax,%eax
mov    $0x1,%r9d
mov    %rax,%r10
mov    %r10,%r11
jmp    17767 <h2v2_downsample+0xa7>
mov    %r9,%rdx
xor    $0x3,%edx
movzbl 0x1(%rbx),%esi
movzbl (%rbx),%ecx
add    %ecx,%esi
movzbl (%rdi),%ecx
add    %ecx,%esi
movzbl 0x1(%rdi),%ecx
add    %esi,%ecx
add    %ecx,%r9d
shr    $0x2,%r9d
mov    %r9b,(%r8)
add    $0x2,%rdi
add    $0x2,%rbx
add    $0x1,%r8
add    $0x1,%eax
mov    %rdx,%r9
cmp    %r12d,%eax
jb     1771c <h2v2_downsample+0x5c>
add    $0x1,%r10d
add    $0x2,%r11d
mov    $0x1,%r9d
xor    %eax,%eax
movslq 0xc(%r13),%rcx
cmp    %r10d,%ecx
jg     17786 <h2v2_downsample+0xc6>
mov    -0x8(%rbp),%rbx
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
leaveq 
retq   
movslq %r10d,%rcx
mov    (%r14,%rcx,8),%r8
movslq %r11d,%rcx
mov    (%r15,%rcx,8),%rbx
lea    0x1(%r11),%ecx
movslq %ecx,%rcx
mov    (%r15,%rcx,8),%rdi
jmp    17752 <h2v2_downsample+0x92>
data16 nopw %cs:0x0(%rax,%rax,1)
nopl   0x0(%rax)

00000000000177b0 <h2v2_smooth_downsample>:
push   %rbp
mov    %rsp,%rbp
sub    $0x60,%rsp
mov    %rbx,-0x8(%rbp)
mov    %r12,-0x10(%rbp)
mov    %r13,-0x18(%rbp)
mov    %r14,-0x20(%rbp)
mov    %r15,-0x28(%rbp)
mov    %rsi,-0x38(%rbp)
mov    %rdx,-0x50(%rbp)
mov    %rcx,-0x40(%rbp)
lea    -0x8(%rdx),%rbx
movslq 0x13c(%rdi),%rax
add    $0x2,%eax
mov    %rdx,%r12
mov    %rsi,%r13
mov    %rax,%rsi
mov    %rdi,%r15
mov    %rbx,%rdi
mov    %rcx,%rbx
mov    0x30(%r15),%edx
mov    0x1c(%r13),%r14d
mov    %r14,%rcx
shl    $0x4,%ecx
callq  17330 <expand_right_edge>
movslq 0x110(%r15),%rcx
mov    %rcx,%rax
shl    $0x4,%eax
movslq %eax,%r15
mov    $0x4000,%eax
lea    (%rcx,%rcx,4),%ecx
shl    $0x4,%ecx
sub    %ecx,%eax
movslq %eax,%r11
xor    %eax,%eax
lea    -0x2(,%r14,8),%ecx
mov    %rcx,-0x30(%rbp)
mov    %rax,%rdi
jmpq   17985 <h2v2_smooth_downsample+0x1d5>
lea    0x2(%r9),%r13
movzbl 0x0(%r13),%r10d
movzbl -0x1(%r9),%ebx
add    %r10d,%ebx
movzbl -0x1(%rdx),%r10d
add    %r10d,%ebx
lea    0x2(%rdx),%r14
movzbl (%r14),%r10d
add    %r10d,%ebx
movslq %ebx,%r12
movzbl 0x1(%r9),%r10d
movzbl (%r9),%ebx
add    %r10d,%ebx
movzbl (%rdx),%r9d
add    %r9d,%ebx
movzbl 0x1(%rdx),%edx
add    %ebx,%edx
movzbl -0x1(%rsi),%ebx
lea    (%rbx,%rdx,1),%r9d
lea    0x2(%rsi),%rbx
movzbl (%rbx),%edx
add    %edx,%r9d
movzbl -0x1(%r8),%edx
lea    (%rdx,%r9,1),%r10d
lea    0x2(%r8),%r9
movzbl (%r9),%edx
add    %r10d,%edx
movslq %edx,%rdx
lea    (%r12,%rdx,2),%rdx
imul   %r15,%rdx
movzbl 0x1(%rsi),%r10d
movzbl (%rsi),%esi
add    %r10d,%esi
movzbl (%r8),%r10d
add    %r10d,%esi
movzbl 0x1(%r8),%r8d
add    %r8d,%esi
movslq %esi,%rsi
imul   %r11,%rsi
lea    0x8000(%rdx,%rsi,1),%rdx
sar    $0x10,%rdx
mov    %dl,(%rax)
add    $0x1,%rax
add    $0xffffffff,%ecx
mov    %r14,%rdx
mov    %rbx,%rsi
mov    %r9,%r8
mov    %r13,%r9
test   %ecx,%ecx
jne    17841 <h2v2_smooth_downsample+0x91>
movzbl 0x1(%r9),%ebx
movzbl -0x1(%r9),%ecx
add    %ebx,%ecx
movzbl -0x1(%rdx),%r10d
add    %r10d,%ecx
movzbl 0x1(%rdx),%r12d
add    %r12d,%ecx
movslq %ecx,%r10
movzbl (%r9),%ecx
add    %ebx,%ecx
movzbl (%rdx),%edx
add    %edx,%ecx
add    %r12d,%ecx
movzbl -0x1(%rsi),%edx
add    %edx,%ecx
movzbl 0x1(%rsi),%ebx
add    %ebx,%ecx
movzbl -0x1(%r8),%edx
add    %edx,%ecx
movzbl 0x1(%r8),%r9d
add    %r9d,%ecx
movslq %ecx,%rcx
lea    (%r10,%rcx,2),%rcx
imul   %r15,%rcx
movzbl (%rsi),%edx
add    %ebx,%edx
movzbl (%r8),%esi
add    %esi,%edx
add    %r9d,%edx
movslq %edx,%rdx
imul   %r11,%rdx
lea    0x8000(%rcx,%rdx,1),%rcx
sar    $0x10,%rcx
mov    %cl,(%rax)
add    $0x1,%edi
mov    -0x40(%rbp),%rbx
mov    -0x50(%rbp),%r12
mov    -0x38(%rbp),%r13
mov    -0x58(%rbp),%rax
movslq 0xc(%r13),%rcx
cmp    %edi,%ecx
jg     179a3 <h2v2_smooth_downsample+0x1f3>
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
leaveq 
retq   
lea    -0x1(%rax),%ecx
movslq %ecx,%rcx
mov    (%r12,%rcx,8),%r10
lea    0x2(%r10),%r9
movzbl (%r9),%ecx
movzbl (%r10),%r8d
add    %r8d,%ecx
lea    0x2(%rax),%edx
mov    %rdx,-0x58(%rbp)
movslq %edx,%rdx
mov    (%r12,%rdx,8),%r14
movzbl (%r14),%r13d
add    %r13d,%ecx
lea    0x2(%r14),%rdx
movzbl (%rdx),%esi
add    %esi,%ecx
movslq %ecx,%rsi
movzbl 0x1(%r10),%ecx
add    %r8d,%ecx
add    %r13d,%ecx
movzbl 0x1(%r14),%r8d
add    %r8d,%ecx
movslq %eax,%r8
mov    (%r12,%r8,8),%r13
movzbl 0x0(%r13),%r10d
add    %r10d,%ecx
lea    0x2(%r13),%r8
mov    %r8,-0x48(%rbp)
movzbl (%r8),%r8d
add    %r8d,%ecx
add    $0x1,%eax
movslq %eax,%rax
mov    (%r12,%rax,8),%r14
movzbl (%r14),%r12d
lea    (%r12,%rcx,1),%eax
lea    0x2(%r14),%r8
movzbl (%r8),%ecx
add    %ecx,%eax
movslq %eax,%rax
lea    (%rsi,%rax,2),%rax
mov    %r15,%rsi
imul   %rax,%rsi
movzbl 0x1(%r13),%eax
add    %r10d,%eax
add    %r12d,%eax
movzbl 0x1(%r14),%ecx
add    %ecx,%eax
movslq %eax,%rax
imul   %r11,%rax
lea    0x8000(%rsi,%rax,1),%rax
sar    $0x10,%rax
movslq %edi,%rcx
mov    (%rbx,%rcx,8),%rcx
mov    %al,(%rcx)
lea    0x1(%rcx),%rax
mov    -0x48(%rbp),%rsi
mov    -0x30(%rbp),%rcx
jmpq   178f4 <h2v2_smooth_downsample+0x144>
nopw   0x0(%rax,%rax,1)

0000000000017a80 <fullsize_smooth_downsample>:
push   %rbp
mov    %rsp,%rbp
sub    $0x50,%rsp
mov    %rbx,-0x8(%rbp)
mov    %r12,-0x10(%rbp)
mov    %r13,-0x18(%rbp)
mov    %r14,-0x20(%rbp)
mov    %r15,-0x28(%rbp)
mov    %rdx,-0x38(%rbp)
mov    %rcx,-0x30(%rbp)
lea    -0x8(%rdx),%r8
movslq 0x13c(%rdi),%rax
add    $0x2,%eax
mov    %rcx,%r12
mov    %rdx,%r13
mov    %rsi,%r14
mov    %rax,%rsi
mov    %rdi,%r15
mov    %r8,%rdi
mov    0x30(%r15),%edx
mov    0x1c(%r14),%ebx
mov    %rbx,%rcx
shl    $0x3,%ecx
callq  17330 <expand_right_edge>
movslq 0x110(%r15),%rax
mov    %rax,%rcx
shl    $0x6,%ecx
movslq %ecx,%r15
mov    $0x10000,%r11d
shl    $0x9,%rax
sub    %rax,%r11
xor    %ecx,%ecx
lea    -0x2(,%rbx,8),%eax
mov    %rax,-0x48(%rbp)
jmpq   17b98 <fullsize_smooth_downsample+0x118>
add    $0x1,%rdi
movzbl (%rdi),%r12d
add    $0x1,%rbx
movzbl (%rbx),%esi
add    %r12d,%esi
lea    0x1(%r8),%r13
movzbl 0x0(%r13),%r12d
add    %r12d,%esi
movslq %esi,%r12
movzbl (%r8),%r8d
sub    %r8,%rdx
add    %r10,%rdx
add    %r12,%rdx
imul   %r15,%rdx
imul   %r11,%r8
lea    0x8000(%rdx,%r8,1),%rdx
sar    $0x10,%rdx
mov    %dl,(%rcx)
add    $0x1,%rcx
add    $0xffffffff,%eax
mov    %r9,%rdx
mov    %rsi,%r9
mov    %r13,%r8
movslq %edx,%r10
movslq %r9d,%rdx
test   %eax,%eax
jne    17b06 <fullsize_smooth_downsample+0x86>
movzbl (%r8),%esi
sub    %rsi,%r10
lea    (%r10,%rdx,2),%rax
imul   %r15,%rax
mov    %r11,%rdx
imul   %rsi,%rdx
lea    0x8000(%rax,%rdx,1),%rax
sar    $0x10,%rax
mov    %al,(%rcx)
mov    -0x48(%rbp),%rax
mov    -0x30(%rbp),%r12
mov    -0x40(%rbp),%rcx
mov    -0x38(%rbp),%r13
movslq 0xc(%r14),%rdx
cmp    %ecx,%edx
jg     17bb6 <fullsize_smooth_downsample+0x136>
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
leaveq 
retq   
lea    0x1(%rcx),%edx
mov    %rdx,-0x40(%rbp)
movslq %edx,%rdx
mov    0x0(%r13,%rdx,8),%rsi
lea    0x1(%rsi),%rdi
movzbl (%rdi),%r9d
lea    -0x1(%rcx),%edx
movslq %edx,%rdx
mov    0x0(%r13,%rdx,8),%rdx
lea    0x1(%rdx),%rbx
movzbl (%rbx),%r8d
add    %r8d,%r9d
movslq %ecx,%r10
mov    0x0(%r13,%r10,8),%r8
lea    0x1(%r8),%r13
movzbl 0x0(%r13),%ecx
add    %ecx,%r9d
movslq %r9d,%rcx
movzbl (%r8),%r8d
sub    %r8,%rcx
movzbl (%rsi),%esi
movzbl (%rdx),%edx
add    %esi,%edx
add    %r8d,%edx
movslq %edx,%rsi
lea    (%rcx,%rsi,2),%rcx
imul   %r15,%rcx
mov    %r11,%rsi
imul   %r8,%rsi
lea    0x8000(%rcx,%rsi,1),%rcx
sar    $0x10,%rcx
mov    (%r12,%r10,8),%rsi
mov    %cl,(%rsi)
lea    0x1(%rsi),%rcx
mov    %r13,%r8
jmpq   17b5a <fullsize_smooth_downsample+0xda>
nopl   0x0(%rax)

0000000000017c40 <jpeg_write_coefficients>:
push   %rbp
mov    %rsp,%rbp
sub    $0x10,%rsp
mov    %r14,-0x8(%rbp)
mov    %r15,-0x10(%rbp)
movslq 0x24(%rdi),%rax
cmp    $0x64,%eax
jne    17c61 <jpeg_write_coefficients+0x21>
mov    %rdi,%r14
mov    %rsi,%r15
jmp    17c83 <jpeg_write_coefficients+0x43>
mov    (%rdi),%rax
movl   $0x14,0x28(%rax)
movslq 0x24(%rdi),%rcx
mov    (%rdi),%rax
mov    %ecx,0x2c(%rax)
mov    (%rdi),%rax
mov    (%rax),%rax
mov    %rsi,%r15
mov    %rdi,%r14
callq  *%rax
xor    %esi,%esi
mov    %r14,%rdi
callq  4390 <jpeg_suppress_tables@plt>
mov    (%r14),%rax
mov    0x20(%rax),%rax
mov    %r14,%rdi
callq  *%rax
mov    0x28(%r14),%rax
mov    0x10(%rax),%rax
mov    %r14,%rdi
callq  *%rax
mov    %r15,%rsi
mov    %r14,%rdi
callq  17fb0 <transencode_master_selection>
movl   $0x0,0x130(%r14)
movl   $0x67,0x24(%r14)
mov    -0x10(%rbp),%r15
mov    -0x8(%rbp),%r14
leaveq 
retq   
xchg   %ax,%ax

0000000000017cd0 <jpeg_copy_critical_parameters>:
push   %rbp
mov    %rsp,%rbp
sub    $0x50,%rsp
mov    %r14,-0x20(%rbp)
mov    %r15,-0x28(%rbp)
mov    %rsi,-0x50(%rbp)
mov    %rbx,-0x8(%rbp)
mov    %r12,-0x10(%rbp)
mov    %r13,-0x18(%rbp)
mov    %rdi,-0x48(%rbp)
movslq 0x24(%rsi),%rax
cmp    $0x64,%eax
jne    17d05 <jpeg_copy_critical_parameters+0x35>
mov    %rsi,%rbx
mov    %rdi,%r14
jmp    17d2a <jpeg_copy_critical_parameters+0x5a>
mov    (%rsi),%rax
movl   $0x14,0x28(%rax)
movslq 0x24(%rsi),%rcx
mov    (%rsi),%rax
mov    %ecx,0x2c(%rax)
mov    (%rsi),%rax
mov    (%rax),%rax
mov    %rsi,%rbx
mov    %rdi,%r14
mov    %rbx,%rdi
callq  *%rax
mov    0x30(%r14),%eax
mov    %eax,0x30(%rbx)
mov    0x34(%r14),%eax
mov    %eax,0x34(%rbx)
movslq 0x38(%r14),%rax
mov    %eax,0x38(%rbx)
mov    0x3c(%r14),%eax
mov    %eax,0x3c(%rbx)
mov    %rbx,%rdi
callq  4110 <jpeg_set_defaults@plt>
mov    0x3c(%r14),%esi
mov    %rbx,%rdi
callq  4170 <jpeg_set_colorspace@plt>
movslq 0x128(%r14),%rax
mov    %eax,0x48(%rbx)
movslq 0x188(%r14),%rax
mov    %eax,0x10c(%rbx)
mov    $0x80,%r13d
xor    %r12d,%r12d
jmp    17dcb <jpeg_copy_critical_parameters+0xfb>
movslq %r12d,%r15
mov    0xc8(%r14,%r15,8),%rax
test   %rax,%rax
je     17dc7 <jpeg_copy_critical_parameters+0xf7>
mov    0x60(%rbx,%r15,8),%rax
test   %rax,%rax
jne    17da3 <jpeg_copy_critical_parameters+0xd3>
mov    %rbx,%rdi
callq  4270 <jpeg_alloc_quant_table@plt>
mov    %rax,0x60(%rbx,%r15,8)
mov    0x60(%rbx,%r15,8),%rdi
mov    0xc8(%r14,%r15,8),%rsi
mov    %r13,%rdx
callq  42c0 <memcpy@plt>
mov    0x60(%rbx,%r15,8),%rax
movl   $0x0,0x80(%rax)
add    $0x1,%r12d
cmp    $0x3,%r12d
jle    17d7c <jpeg_copy_critical_parameters+0xac>
movslq 0x38(%r14),%rax
mov    %eax,0x4c(%rbx)
test   %eax,%eax
jle    17de1 <jpeg_copy_critical_parameters+0x111>
cmp    $0xa,%eax
jle    17e0a <jpeg_copy_critical_parameters+0x13a>
mov    (%rbx),%rax
movl   $0x1a,0x28(%rax)
movslq 0x4c(%rbx),%rcx
mov    (%rbx),%rax
mov    %ecx,0x2c(%rax)
mov    (%rbx),%rax
movl   $0xa,0x30(%rax)
mov    (%rbx),%rax
mov    (%rax),%rax
mov    %rbx,%rdi
callq  *%rax
mov    0x130(%r14),%rax
mov    0x58(%rbx),%rcx
xor    %r12d,%r12d
mov    %r12,%rdx
jmp    17e74 <jpeg_copy_critical_parameters+0x1a4>
mov    (%rbx),%rsi
movl   $0x34,0x28(%rsi)
mov    (%rbx),%rsi
mov    %r13d,0x2c(%rsi)
mov    (%rbx),%rsi
mov    (%rsi),%rsi
mov    %rbx,%rdi
mov    %rcx,%rbx
mov    %rdx,%r12
mov    %rax,%r15
callq  *%rsi
mov    %r15,%rax
mov    %rbx,%rcx
mov    %r12,%rdx
mov    %r14,%rsi
xor    %r12d,%r12d
mov    -0x50(%rbp),%rbx
mov    0xc8(%rsi,%r13,8),%r15
mov    0x50(%rax),%r14
test   %r14,%r14
jne    17e9d <jpeg_copy_critical_parameters+0x1cd>
mov    %rsi,%r14
add    $0x1,%edx
add    $0x60,%rax
add    $0x60,%rcx
movslq 0x4c(%rbx),%rsi
cmp    %edx,%esi
jg     17eae <jpeg_copy_critical_parameters+0x1de>
movslq 0x174(%r14),%rax
test   %eax,%eax
jne    17ef5 <jpeg_copy_critical_parameters+0x225>
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
leaveq 
retq   
mov    %rdx,-0x30(%rbp)
mov    %rax,-0x40(%rbp)
mov    %rcx,-0x38(%rbp)
jmpq   17f8a <jpeg_copy_critical_parameters+0x2ba>
movslq (%rax),%rsi
mov    %esi,(%rcx)
movslq 0x8(%rax),%rsi
mov    %esi,0x8(%rcx)
movslq 0xc(%rax),%rsi
mov    %esi,0xc(%rcx)
movslq 0x10(%rax),%r13
mov    %r13d,0x10(%rcx)
test   %r13d,%r13d
js     17e1d <jpeg_copy_critical_parameters+0x14d>
cmp    $0x3,%r13d
jg     17e1d <jpeg_copy_critical_parameters+0x14d>
mov    0xc8(%r14,%r13,8),%rsi
test   %rsi,%rsi
je     17e1d <jpeg_copy_critical_parameters+0x14d>
mov    %r14,%rsi
jmpq   17e55 <jpeg_copy_critical_parameters+0x185>
movzbl 0x178(%r14),%eax
cmp    $0x1,%al
jne    17f16 <jpeg_copy_critical_parameters+0x246>
movb   $0x1,0x124(%rbx)
movzbl 0x179(%r14),%eax
mov    %al,0x125(%rbx)
movzbl 0x17a(%r14),%eax
mov    %al,0x126(%rbx)
movzwl 0x17c(%r14),%eax
mov    %ax,0x128(%rbx)
movzwl 0x17e(%r14),%eax
mov    %ax,0x12a(%rbx)
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
leaveq 
retq   
movslq %r12d,%rax
movzwl (%r15,%rax,2),%ecx
movzwl (%r14,%rax,2),%eax
cmp    %ax,%cx
je     17f86 <jpeg_copy_critical_parameters+0x2b6>
mov    (%rbx),%rax
movl   $0x2c,0x28(%rax)
mov    (%rbx),%rax
mov    %r13d,0x2c(%rax)
mov    (%rbx),%rax
mov    (%rax),%rax
mov    %rbx,%rdi
callq  *%rax
add    $0x1,%r12d
cmp    $0x3f,%r12d
jle    17f58 <jpeg_copy_critical_parameters+0x288>
mov    -0x48(%rbp),%r14
mov    -0x38(%rbp),%rcx
mov    -0x40(%rbp),%rax
mov    -0x30(%rbp),%rdx
xor    %r12d,%r12d
jmpq   17e69 <jpeg_copy_critical_parameters+0x199>
nopl   0x0(%rax,%rax,1)

0000000000017fb0 <transencode_master_selection>:
push   %rbp
mov    %rsp,%rbp
sub    $0x10,%rsp
mov    %r14,-0x8(%rbp)
mov    %r15,-0x10(%rbp)
mov    %rsi,%r15
movl   $0x1,0x38(%rdi)
mov    $0x1,%esi
mov    %rdi,%r14
callq  43c0 <jinit_c_master_control@plt>
movslq 0x104(%r14),%rax
test   %eax,%eax
jne    17ff7 <transencode_master_selection+0x47>
movslq 0x134(%r14),%rax
test   %eax,%eax
jne    18038 <transencode_master_selection+0x88>
mov    %r14,%rdi
callq  4080 <jinit_huff_encoder@plt>
jmp    17fff <transencode_master_selection+0x4f>
mov    %r14,%rdi
callq  4190 <jinit_arith_encoder@plt>
mov    %r15,%rsi
mov    %r14,%rdi
callq  18050 <transencode_coef_controller>
mov    %r14,%rdi
callq  4120 <jinit_marker_writer@plt>
mov    0x8(%r14),%rax
mov    0x30(%rax),%rax
mov    %r14,%rdi
callq  *%rax
mov    0x1d0(%r14),%rax
mov    (%rax),%rax
mov    %r14,%rdi
callq  *%rax
mov    -0x10(%rbp),%r15
mov    -0x8(%rbp),%r14
leaveq 
retq   
mov    %r14,%rdi
callq  4460 <jinit_phuff_encoder@plt>
jmp    17fff <transencode_master_selection+0x4f>
data16 nopw %cs:0x0(%rax,%rax,1)
nopl   (%rax)

0000000000018050 <transencode_coef_controller>:
push   %rbp
mov    %rsp,%rbp
sub    $0x20,%rsp
mov    %r13,-0x8(%rbp)
mov    %r14,-0x10(%rbp)
mov    %r15,-0x18(%rbp)
mov    0x8(%rdi),%rax
mov    (%rax),%rax
mov    %rsi,%r14
mov    $0x1,%r13d
mov    $0x78,%edx
mov    %rdi,%r15
mov    %r13,%rsi
callq  *%rax
mov    %rax,0x1c8(%r15)
lea    0xd1(%rip),%rcx        # 18160 <start_pass_coef>
mov    %rcx,(%rax)
lea    0x127(%rip),%rcx        # 181c0 <compress_output>
mov    %rcx,0x8(%rax)
mov    %r14,0x20(%rax)
mov    0x8(%r15),%rcx
mov    0x8(%rcx),%rcx
mov    %r13,%rsi
mov    %rax,%r13
mov    %r15,%rdi
mov    $0x500,%r14d
mov    %r14,%rdx
callq  *%rcx
mov    %r14,%rsi
mov    %rax,%r14
mov    %r14,%rdi
callq  44d0 <jzero_far@plt>
xor    %ecx,%ecx
jmp    180e4 <transencode_coef_controller+0x94>
movslq %ecx,%rdx
mov    %rdx,%rax
shl    $0x7,%rax
add    %r14,%rax
mov    %rax,0x28(%r13,%rdx,8)
add    $0x1,%ecx
cmp    $0x9,%ecx
jle    180cf <transencode_coef_controller+0x7f>
mov    -0x18(%rbp),%r15
mov    -0x10(%rbp),%r14
mov    -0x8(%rbp),%r13
leaveq 
retq   
nopw   0x0(%rax,%rax,1)

0000000000018100 <start_iMCU_row>:
push   %rbp
mov    %rsp,%rbp
mov    0x1c8(%rdi),%rcx
movslq 0x144(%rdi),%rax
cmp    $0x1,%eax
jg     18135 <start_iMCU_row+0x35>
mov    0x140(%rdi),%eax
add    $0xffffffff,%eax
cmp    0x10(%rcx),%eax
ja     1814c <start_iMCU_row+0x4c>
mov    0x148(%rdi),%rax
movslq 0x48(%rax),%rax
mov    %eax,0x1c(%rcx)
jmp    1813c <start_iMCU_row+0x3c>
movl   $0x1,0x1c(%rcx)
movl   $0x0,0x14(%rcx)
movl   $0x0,0x18(%rcx)
leaveq 
retq   
mov    0x148(%rdi),%rax
movslq 0xc(%rax),%rax
mov    %eax,0x1c(%rcx)
jmp    1813c <start_iMCU_row+0x3c>
nopl   0x0(%rax)

0000000000018160 <start_pass_coef>:
push   %rbp
mov    %rsp,%rbp
sub    $0x10,%rsp
mov    0x1c8(%rdi),%rax
cmp    $0x2,%esi
je     181a8 <start_pass_coef+0x48>
mov    (%rdi),%rcx
movl   $0x4,0x28(%rcx)
mov    (%rdi),%rcx
mov    (%rcx),%rcx
mov    %rdi,%rdx
mov    %r14,-0x8(%rbp)
mov    %r15,-0x10(%rbp)
mov    %rdi,%r14
mov    %rdx,%rdi
mov    %rax,%r15
callq  *%rcx
mov    %r15,%rax
mov    %r14,%rdi
mov    -0x10(%rbp),%r15
mov    -0x8(%rbp),%r14
movl   $0x0,0x10(%rax)
callq  18100 <start_iMCU_row>
leaveq 
retq   
nopw   %cs:0x0(%rax,%rax,1)

00000000000181c0 <compress_output>:
push   %rbp
mov    %rsp,%rbp
sub    $0xd0,%rsp
mov    %rbx,-0x8(%rbp)
mov    %r12,-0x10(%rbp)
mov    %r13,-0x18(%rbp)
mov    %r14,-0x20(%rbp)
mov    %r15,-0x28(%rbp)
mov    0x1c8(%rdi),%rax
mov    %rax,-0x48(%rbp)
mov    0x168(%rdi),%ecx
mov    %rcx,-0x58(%rbp)
mov    0x140(%rdi),%ecx
mov    %rcx,-0x60(%rbp)
mov    %rdi,%r15
xor    %r14d,%r14d
mov    %r14,%rbx
jmp    1824c <compress_output+0x8c>
movslq %ebx,%r12
mov    0x148(%r15,%r12,8),%rdi
movslq 0x4(%rdi),%rcx
mov    0x20(%rax),%rdx
mov    (%rdx,%rcx,8),%rsi
mov    0xc(%rdi),%ecx
mov    %rcx,%rdx
imul   0x10(%rax),%edx
mov    0x8(%r15),%rdi
mov    0x40(%rdi),%r9
mov    %rax,%r13
mov    %r15,%rdi
mov    %r14,%r8
callq  *%r9
mov    %rax,-0xd0(%rbp,%r12,8)
add    $0x1,%ebx
mov    %r13,%rax
movslq 0x144(%r15),%rcx
cmp    %ebx,%ecx
jg     18209 <compress_output+0x49>
movslq 0x18(%rax),%rdi
mov    -0x58(%rbp),%rcx
lea    -0x1(%rcx),%r12d
mov    %r12,-0x30(%rbp)
mov    -0x60(%rbp),%rcx
lea    -0x1(%rcx),%ebx
mov    %rbx,-0x40(%rbp)
jmpq   1832e <compress_output+0x16e>
movslq %ecx,%rsi
mov    0x28(%rax,%rsi,8),%rbx
mov    %rbx,-0xb0(%rbp,%rsi,8)
lea    -0x1(%rcx),%esi
movslq %esi,%rsi
mov    -0xb0(%rbp,%rsi,8),%rsi
movswq (%rsi),%rsi
mov    %si,(%rbx)
add    $0x1,%ecx
add    $0x1,%edx
movslq 0x34(%r10),%rsi
cmp    %edx,%esi
jg     18277 <compress_output+0xb7>
add    $0x1,%r8d
mov    -0x38(%rbp),%rsi
mov    -0x40(%rbp),%rbx
movslq 0x38(%r10),%rdx
cmp    %r8d,%edx
jg     1836a <compress_output+0x1aa>
mov    -0x60(%rbp),%rdx
add    $0x1,%edx
mov    -0x30(%rbp),%r12
mov    -0x58(%rbp),%r13
mov    %rdx,-0x60(%rbp)
movslq 0x144(%r15),%rsi
cmp    %edx,%esi
jg     18385 <compress_output+0x1c5>
mov    0x1f0(%r15),%rax
mov    0x8(%rax),%rax
mov    %r15,%rdi
lea    -0xb0(%rbp),%rsi
callq  *%rax
test   %eax,%eax
je     183b2 <compress_output+0x1f2>
add    $0x1,%r13d
mov    -0x50(%rbp),%rdi
mov    -0x48(%rbp),%rax
mov    %r13,-0x58(%rbp)
mov    0x168(%r15),%ecx
cmp    %r13d,%ecx
ja     183da <compress_output+0x21a>
movl   $0x0,0x14(%rax)
add    $0x1,%edi
mov    %rdi,-0x50(%rbp)
movslq 0x1c(%rax),%rcx
cmp    %edi,%ecx
jg     183e5 <compress_output+0x225>
mov    0x10(%rax),%ecx
add    $0x1,%ecx
mov    %ecx,0x10(%rax)
mov    %r15,%rdi
callq  18100 <start_iMCU_row>
mov    $0x1,%eax
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
leaveq 
retq   
mov    0x10(%rax),%edx
cmp    %ebx,%edx
jb     183ee <compress_output+0x22e>
lea    (%rdi,%r8,1),%edx
movslq 0x48(%r10),%rbx
cmp    %edx,%ebx
jg     183ee <compress_output+0x22e>
mov    %r14,%rdx
jmpq   182a2 <compress_output+0xe2>
movslq %edx,%r11
mov    0x148(%r15,%r11,8),%r10
movslq 0x34(%r10),%r9
mov    %r13,%rdx
imul   %r9d,%edx
mov    %edx,%esi
shl    $0x7,%rsi
mov    %rsi,-0x38(%rbp)
cmp    %r12d,%r13d
jae    18406 <compress_output+0x246>
mov    %r14,%r8
jmpq   182b6 <compress_output+0xf6>
mov    -0x50(%rbp),%rcx
mov    -0x48(%rbp),%rax
mov    %ecx,0x18(%rax)
mov    %r13d,0x14(%rax)
mov    %r14,%rax
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
leaveq 
retq   
mov    %r14,%rcx
mov    %rcx,%rdx
jmpq   182d2 <compress_output+0x112>
mov    0x14(%rax),%r13d
jmpq   18310 <compress_output+0x150>
lea    (%rdi,%r8,1),%edx
movslq %edx,%rdx
mov    -0xd0(%rbp,%r11,8),%rbx
add    (%rbx,%rdx,8),%rsi
mov    %r14,%rdx
jmp    1842a <compress_output+0x26a>
movslq 0x44(%r10),%r9
mov    %r14,%r8
jmpq   182b6 <compress_output+0xf6>
movslq %ecx,%rbx
mov    %rsi,-0xb0(%rbp,%rbx,8)
add    $0x80,%rsi
add    $0x1,%ecx
add    $0x1,%edx
cmp    %r9d,%edx
jl     18412 <compress_output+0x252>
jmpq   182a2 <compress_output+0xe2>
nopw   %cs:0x0(%rax,%rax,1)
xchg   %ax,%ax

0000000000018440 <jpeg_CreateDecompress>:
push   %rbp
mov    %rsp,%rbp
sub    $0x20,%rsp
mov    %r14,-0x18(%rbp)
mov    %r15,-0x20(%rbp)
mov    %r12,-0x8(%rbp)
mov    %r13,-0x10(%rbp)
movq   $0x0,0x8(%rdi)
cmp    $0x3e,%esi
jne    1846a <jpeg_CreateDecompress+0x2a>
mov    %rdi,%r12
jmp    18495 <jpeg_CreateDecompress+0x55>
mov    (%rdi),%rax
movl   $0xc,0x28(%rax)
mov    (%rdi),%rax
movl   $0x3e,0x2c(%rax)
mov    (%rdi),%rax
mov    %esi,0x30(%rax)
mov    (%rdi),%rax
mov    (%rax),%rax
mov    %rdx,%r13
mov    %rdi,%r12
callq  *%rax
mov    %r13,%rdx
cmp    $0x278,%rdx
je     184c7 <jpeg_CreateDecompress+0x87>
mov    (%r12),%rax
movl   $0x15,0x28(%rax)
mov    (%r12),%rax
movl   $0x278,0x2c(%rax)
mov    (%r12),%rax
mov    %edx,0x30(%rax)
mov    (%r12),%rax
mov    (%rax),%rax
mov    %r12,%rdi
callq  *%rax
xor    %r13d,%r13d
mov    $0x278,%edx
mov    (%r12),%r15
mov    0x18(%r12),%r14
mov    %r12,%rdi
mov    %r13,%rsi
callq  41e0 <memset@plt>
mov    %r15,(%r12)
mov    %r14,0x18(%r12)
movl   $0x1,0x20(%r12)
mov    %r12,%rdi
callq  4240 <jinit_memory_mgr@plt>
movq   $0x0,0x10(%r12)
movq   $0x0,0x28(%r12)
mov    %r13,%rax
jmp    18526 <jpeg_CreateDecompress+0xe6>
movslq %eax,%rcx
movq   $0x0,0xc8(%r12,%rcx,8)
add    $0x1,%eax
cmp    $0x3,%eax
jle    18514 <jpeg_CreateDecompress+0xd4>
mov    %r13,%rax
jmp    1854e <jpeg_CreateDecompress+0x10e>
movslq %eax,%rcx
movq   $0x0,0xe8(%r12,%rcx,8)
movq   $0x0,0x108(%r12,%rcx,8)
add    $0x1,%eax
cmp    $0x3,%eax
jle    18530 <jpeg_CreateDecompress+0xf0>
movq   $0x0,0x190(%r12)
mov    %r12,%rdi
callq  44b0 <jinit_marker_reader@plt>
mov    %r12,%rdi
callq  43d0 <jinit_input_controller@plt>
movl   $0xc8,0x24(%r12)
mov    0x8(%r12),%rax
mov    (%rax),%rax
mov    $0x88,%r14d
mov    %r12,%rdi
mov    %r13,%rsi
mov    %r14,%rdx
callq  *%rax
mov    %rax,0x220(%r12)
mov    %r14,%rdx
mov    %r13,%rsi
mov    %rax,%rdi
callq  41e0 <memset@plt>
mov    -0x10(%rbp),%r13
mov    -0x8(%rbp),%r12
mov    -0x20(%rbp),%r15
mov    -0x18(%rbp),%r14
leaveq 
retq   
nopl   0x0(%rax)

00000000000185c0 <jpeg_destroy_decompress>:
push   %rbp
mov    %rsp,%rbp
callq  4030 <jpeg_destroy@plt>
leaveq 
retq   
nopl   0x0(%rax,%rax,1)

00000000000185d0 <jpeg_read_header>:
push   %rbp
mov    %rsp,%rbp
sub    $0x20,%rsp
mov    %rsi,-0x10(%rbp)
mov    %rdi,-0x8(%rbp)
movslq 0x24(%rdi),%rax
cmp    $0xc8,%eax
jne    185fc <jpeg_read_header+0x2c>
callq  4160 <jpeg_consume_input@plt>
cmp    $0x1,%eax
jne    18635 <jpeg_read_header+0x65>
mov    $0x1,%eax
leaveq 
retq   
cmp    $0xc9,%eax
je     185eb <jpeg_read_header+0x1b>
mov    (%rdi),%rax
movl   $0x14,0x28(%rax)
movslq 0x24(%rdi),%rcx
mov    (%rdi),%rax
mov    %ecx,0x2c(%rax)
mov    (%rdi),%rax
mov    (%rax),%rax
mov    %rdi,%rcx
mov    %r15,-0x18(%rbp)
mov    %rdi,%r15
mov    %rcx,%rdi
callq  *%rax
mov    %r15,%rdi
mov    -0x18(%rbp),%r15
jmp    185eb <jpeg_read_header+0x1b>
cmp    $0x2,%eax
je     1863c <jpeg_read_header+0x6c>
leaveq 
retq   
mov    -0x10(%rbp),%rax
test   %eax,%eax
jne    1864a <jpeg_read_header+0x7a>
mov    -0x8(%rbp),%rdi
jmp    18671 <jpeg_read_header+0xa1>
mov    -0x8(%rbp),%rcx
mov    (%rcx),%rax
movl   $0x33,0x28(%rax)
mov    (%rcx),%rax
mov    (%rax),%rax
mov    %rcx,%rdi
mov    %r15,-0x18(%rbp)
mov    %rcx,%r15
callq  *%rax
mov    %r15,%rdi
mov    -0x18(%rbp),%r15
callq  4130 <jpeg_abort@plt>
mov    $0x2,%eax
leaveq 
retq   
nopl   (%rax)

0000000000018680 <jpeg_finish_decompress>:
push   %rbp
mov    %rsp,%rbp
sub    $0x10,%rsp
mov    %r15,-0x8(%rbp)
movslq 0x24(%rdi),%rax
cmp    $0xcd,%eax
je     186b5 <jpeg_finish_decompress+0x35>
cmp    $0xce,%eax
je     186b5 <jpeg_finish_decompress+0x35>
movslq 0x24(%rdi),%rax
cmp    $0xcf,%eax
je     186d0 <jpeg_finish_decompress+0x50>
cmp    $0xd2,%eax
jne    186dd <jpeg_finish_decompress+0x5d>
mov    %rdi,%r15
jmp    18707 <jpeg_finish_decompress+0x87>
movslq 0x58(%rdi),%rax
test   %eax,%eax
jne    1869e <jpeg_finish_decompress+0x1e>
mov    0x8c(%rdi),%eax
cmp    0xa8(%rdi),%eax
ja     18736 <jpeg_finish_decompress+0xb6>
mov    %rdi,%r15
jmp    1874b <jpeg_finish_decompress+0xcb>
mov    %rdi,%r15
movl   $0xd2,0x24(%r15)
jmp    18707 <jpeg_finish_decompress+0x87>
mov    (%rdi),%rax
movl   $0x14,0x28(%rax)
movslq 0x24(%rdi),%rcx
mov    (%rdi),%rax
mov    %ecx,0x2c(%rax)
mov    (%rdi),%rax
mov    (%rax),%rax
mov    %rdi,%r15
callq  *%rax
jmp    18707 <jpeg_finish_decompress+0x87>
mov    %r15,%rdi
callq  *(%rax)
test   %eax,%eax
je     18765 <jpeg_finish_decompress+0xe5>
mov    0x240(%r15),%rax
movslq 0x24(%rax),%rcx
test   %ecx,%ecx
je     186fe <jpeg_finish_decompress+0x7e>
mov    0x28(%r15),%rax
mov    0x30(%rax),%rax
mov    %r15,%rdi
callq  *%rax
mov    %r15,%rdi
callq  4130 <jpeg_abort@plt>
mov    $0x1,%eax
mov    -0x8(%rbp),%r15
leaveq 
retq   
mov    (%rdi),%rax
movl   $0x43,0x28(%rax)
mov    (%rdi),%rax
mov    (%rax),%rax
mov    %rdi,%r15
callq  *%rax
mov    0x220(%r15),%rax
mov    0x8(%rax),%rax
mov    %r15,%rdi
callq  *%rax
movl   $0xd2,0x24(%r15)
jmp    18707 <jpeg_finish_decompress+0x87>
xor    %eax,%eax
mov    -0x8(%rbp),%r15
leaveq 
retq   
nopl   (%rax)

0000000000018770 <jpeg_has_multiple_scans>:
push   %rbp
mov    %rsp,%rbp
sub    $0x10,%rsp
movslq 0x24(%rdi),%rax
cmp    $0xc9,%eax
jle    1878a <jpeg_has_multiple_scans+0x1a>
cmp    $0xd2,%eax
jle    187ba <jpeg_has_multiple_scans+0x4a>
mov    (%rdi),%rax
movl   $0x14,0x28(%rax)
movslq 0x24(%rdi),%rcx
mov    (%rdi),%rax
mov    %ecx,0x2c(%rax)
mov    (%rdi),%rax
mov    (%rax),%rax
mov    %rdi,%rcx
mov    %r15,-0x8(%rbp)
mov    %rdi,%r15
mov    %rcx,%rdi
callq  *%rax
mov    %r15,%rdi
mov    -0x8(%rbp),%r15
mov    0x240(%rdi),%rax
movslq 0x20(%rax),%rax
leaveq 
retq   
nopw   0x0(%rax,%rax,1)

00000000000187d0 <jpeg_input_complete>:
push   %rbp
mov    %rsp,%rbp
sub    $0x10,%rsp
movslq 0x24(%rdi),%rax
cmp    $0xc7,%eax
jle    187ea <jpeg_input_complete+0x1a>
cmp    $0xd2,%eax
jle    1881a <jpeg_input_complete+0x4a>
mov    (%rdi),%rax
movl   $0x14,0x28(%rax)
movslq 0x24(%rdi),%rcx
mov    (%rdi),%rax
mov    %ecx,0x2c(%rax)
mov    (%rdi),%rax
mov    (%rax),%rax
mov    %rdi,%rcx
mov    %r15,-0x8(%rbp)
mov    %rdi,%r15
mov    %rcx,%rdi
callq  *%rax
mov    %r15,%rdi
mov    -0x8(%rbp),%r15
mov    0x240(%rdi),%rax
movslq 0x24(%rax),%rax
leaveq 
retq   
nopw   0x0(%rax,%rax,1)

0000000000018830 <jpeg_consume_input>:
push   %rbp
mov    %rsp,%rbp
sub    $0x10,%rsp
mov    0x24(%rdi),%ecx
add    $0xffffff38,%ecx
cmp    $0xa,%ecx
ja     1885d <jpeg_consume_input+0x2d>
mov    $0x1,%eax
lea    0x40e8e(%rip),%rdx        # 596e0 <val_ac_chrominance.12+0xa6>
movslq (%rdx,%rcx,4),%rcx
add    %rdx,%rcx
jmpq   *%rcx
leaveq 
retq   
mov    (%rdi),%rax
movl   $0x14,0x28(%rax)
movslq 0x24(%rdi),%rcx
mov    (%rdi),%rax
mov    %ecx,0x2c(%rax)
mov    (%rdi),%rax
mov    (%rax),%rax
callq  *%rax
xor    %eax,%eax
leaveq 
retq   
mov    0x240(%rdi),%rax
mov    0x8(%rax),%rax
mov    %rdi,%rcx
mov    %r15,-0x8(%rbp)
mov    %rdi,%r15
mov    %rcx,%rdi
callq  *%rax
mov    0x28(%r15),%rax
mov    0x10(%rax),%rax
mov    %r15,%rdi
callq  *%rax
mov    %r15,%rdi
movl   $0xc9,0x24(%rdi)
mov    -0x8(%rbp),%r15
mov    0x240(%rdi),%rax
mov    (%rax),%rax
mov    %rdi,%rcx
mov    %rdi,-0x8(%rbp)
mov    %rcx,%rdi
callq  *%rax
cmp    $0x1,%eax
je     188dd <jpeg_consume_input+0xad>
leaveq 
retq   
mov    0x240(%rdi),%rax
mov    (%rax),%rax
callq  *%rax
leaveq 
retq   
mov    -0x8(%rbp),%rax
mov    %rax,%rdi
mov    %r15,-0x8(%rbp)
mov    %rax,%r15
callq  18920 <default_decompress_parms>
movl   $0xca,0x24(%r15)
mov    $0x1,%eax
mov    -0x8(%rbp),%r15
leaveq 
retq   
data16 nopw %cs:0x0(%rax,%rax,1)
xchg   %ax,%ax

0000000000018910 <jpeg_abort_decompress>:
push   %rbp
mov    %rsp,%rbp
callq  4130 <jpeg_abort@plt>
leaveq 
retq   
nopl   0x0(%rax,%rax,1)

0000000000018920 <default_decompress_parms>:
push   %rbp
mov    %rsp,%rbp
sub    $0x10,%rsp
movslq 0x38(%rdi),%rax
cmp    $0x2,%eax
jle    18965 <default_decompress_parms+0x45>
mov    $0xffffffffffffffff,%rsi
cmp    $0x3,%eax
je     189fe <default_decompress_parms+0xde>
cmp    $0x4,%eax
jne    1896e <default_decompress_parms+0x4e>
movslq 0x180(%rdi),%rax
test   %eax,%eax
jne    18a84 <default_decompress_parms+0x164>
movl   $0x4,0x3c(%rdi)
movl   $0x4,0x40(%rdi)
jmp    1897c <default_decompress_parms+0x5c>
cmp    $0x1,%eax
je     18adb <default_decompress_parms+0x1bb>
movl   $0x0,0x3c(%rdi)
movl   $0x0,0x40(%rdi)
movl   $0x1,0x44(%rdi)
movl   $0x1,0x48(%rdi)
movsd  0x40d7e(%rip),%xmm0        # 59710 <val_ac_chrominance.12+0xd6>
movsd  %xmm0,0x50(%rdi)
movl   $0x0,0x58(%rdi)
movl   $0x0,0x5c(%rdi)
movl   $0x0,0x60(%rdi)
movl   $0x1,0x64(%rdi)
movl   $0x1,0x68(%rdi)
movl   $0x0,0x6c(%rdi)
movl   $0x2,0x70(%rdi)
movl   $0x1,0x74(%rdi)
movl   $0x100,0x78(%rdi)
movq   $0x0,0xa0(%rdi)
movl   $0x0,0x7c(%rdi)
movl   $0x0,0x80(%rdi)
movl   $0x0,0x84(%rdi)
leaveq 
retq   
movslq 0x174(%rdi),%rax
test   %eax,%eax
jne    18aee <default_decompress_parms+0x1ce>
movslq 0x180(%rdi),%rax
test   %eax,%eax
jne    18b01 <default_decompress_parms+0x1e1>
mov    0x130(%rdi),%rdx
movslq 0x60(%rdx),%rcx
movslq 0xc0(%rdx),%rax
movslq (%rdx),%rsi
cmp    $0x1,%esi
je     18b55 <default_decompress_parms+0x235>
cmp    $0x52,%esi
je     18b70 <default_decompress_parms+0x250>
mov    (%rdi),%rdx
mov    %esi,0x2c(%rdx)
mov    %ecx,0x30(%rdx)
mov    %eax,0x34(%rdx)
mov    (%rdi),%rax
movl   $0x6f,0x28(%rax)
mov    (%rdi),%rax
mov    0x8(%rax),%rax
mov    $0x1,%esi
mov    %rdi,%rcx
mov    %r15,-0x8(%rbp)
mov    %rdi,%r15
mov    %rcx,%rdi
callq  *%rax
mov    %r15,%rdi
movl   $0x3,0x3c(%rdi)
mov    -0x8(%rbp),%r15
jmp    18af5 <default_decompress_parms+0x1d5>
movzbl 0x184(%rdi),%eax
test   %al,%al
je     18b8e <default_decompress_parms+0x26e>
cmp    $0x2,%al
je     18b9a <default_decompress_parms+0x27a>
mov    (%rdi),%rax
movl   $0x72,0x28(%rax)
movzbl 0x184(%rdi),%ecx
mov    (%rdi),%rax
mov    %ecx,0x2c(%rax)
mov    (%rdi),%rax
mov    0x8(%rax),%rax
mov    %rdi,%rcx
mov    %r15,-0x8(%rbp)
mov    %rdi,%r15
mov    %rcx,%rdi
callq  *%rax
mov    %r15,%rdi
movl   $0x5,0x3c(%rdi)
mov    -0x8(%rbp),%r15
jmpq   1895c <default_decompress_parms+0x3c>
movl   $0x1,0x3c(%rdi)
movl   $0x1,0x40(%rdi)
jmpq   1897c <default_decompress_parms+0x5c>
movl   $0x3,0x3c(%rdi)
movl   $0x2,0x40(%rdi)
jmpq   1897c <default_decompress_parms+0x5c>
movzbl 0x184(%rdi),%eax
test   %al,%al
je     18ba6 <default_decompress_parms+0x286>
cmp    $0x1,%al
je     18bb2 <default_decompress_parms+0x292>
mov    (%rdi),%rax
movl   $0x72,0x28(%rax)
movzbl 0x184(%rdi),%ecx
mov    (%rdi),%rax
mov    %ecx,0x2c(%rax)
mov    (%rdi),%rax
mov    0x8(%rax),%rax
mov    %rdi,%rcx
mov    %r15,-0x8(%rbp)
mov    %rdi,%r15
mov    %rcx,%rdi
callq  *%rax
mov    %r15,%rdi
movl   $0x3,0x3c(%rdi)
mov    -0x8(%rbp),%r15
jmp    18af5 <default_decompress_parms+0x1d5>
cmp    $0x2,%ecx
jne    18a3a <default_decompress_parms+0x11a>
cmp    $0x3,%eax
jne    18a3a <default_decompress_parms+0x11a>
movl   $0x3,0x3c(%rdi)
jmp    18af5 <default_decompress_parms+0x1d5>
cmp    $0x47,%ecx
jne    18a43 <default_decompress_parms+0x123>
cmp    $0x42,%eax
jne    18a43 <default_decompress_parms+0x123>
movl   $0x2,0x3c(%rdi)
jmpq   18af5 <default_decompress_parms+0x1d5>
movl   $0x4,0x3c(%rdi)
jmpq   1895c <default_decompress_parms+0x3c>
movl   $0x5,0x3c(%rdi)
jmpq   1895c <default_decompress_parms+0x3c>
movl   $0x2,0x3c(%rdi)
jmpq   18af5 <default_decompress_parms+0x1d5>
movl   $0x3,0x3c(%rdi)
jmpq   18af5 <default_decompress_parms+0x1d5>
xchg   %ax,%ax

0000000000018bc0 <jpeg_start_decompress>:
push   %rbp
mov    %rsp,%rbp
sub    $0x10,%rsp
movslq 0x24(%rdi),%rax
cmp    $0xca,%eax
je     18c16 <jpeg_start_decompress+0x56>
mov    %r15,%rax
mov    %rdi,%r15
movslq 0x24(%r15),%rcx
cmp    $0xcb,%ecx
je     18c3e <jpeg_start_decompress+0x7e>
cmp    $0xcc,%ecx
je     18c65 <jpeg_start_decompress+0xa5>
mov    (%r15),%rcx
movl   $0x14,0x28(%rcx)
movslq 0x24(%r15),%rdx
mov    (%r15),%rcx
mov    %edx,0x2c(%rcx)
mov    (%r15),%rcx
mov    (%rcx),%rcx
mov    %r15,%rdi
mov    %rax,-0x8(%rbp)
callq  *%rcx
mov    -0x8(%rbp),%rax
jmp    18c65 <jpeg_start_decompress+0xa5>
mov    %rdi,%rax
mov    %r15,-0x8(%rbp)
mov    %rdi,%r15
mov    %rax,%rdi
callq  41f0 <jinit_master_decompress@plt>
movslq 0x58(%r15),%rax
test   %eax,%eax
jne    18c72 <jpeg_start_decompress+0xb2>
movl   $0xcb,0x24(%r15)
mov    -0x8(%rbp),%rax
jmp    18bd9 <jpeg_start_decompress+0x19>
mov    0x240(%r15),%rcx
movslq 0x20(%rcx),%rcx
test   %ecx,%ecx
je     18c57 <jpeg_start_decompress+0x97>
mov    %rax,-0x8(%rbp)
jmp    18c93 <jpeg_start_decompress+0xd3>
mov    -0x8(%rbp),%rax
movslq 0xac(%r15),%rcx
mov    %ecx,0xb4(%r15)
mov    %r15,%rdi
mov    %rax,%r15
callq  19a70 <output_pass_setup>
leaveq 
retq   
movl   $0xcf,0x24(%r15)
mov    $0x1,%eax
mov    -0x8(%rbp),%r15
leaveq 
retq   
cmp    $0x2,%eax
je     18c53 <jpeg_start_decompress+0x93>
mov    0x10(%r15),%rcx
test   %rcx,%rcx
jne    18cbc <jpeg_start_decompress+0xfc>
mov    0x10(%r15),%rax
test   %rax,%rax
je     18ca1 <jpeg_start_decompress+0xe1>
mov    %r15,%rdi
callq  *(%rax)
mov    0x240(%r15),%rax
mov    (%rax),%rax
mov    %r15,%rdi
callq  *%rax
test   %eax,%eax
jne    18c85 <jpeg_start_decompress+0xc5>
xor    %eax,%eax
mov    -0x8(%rbp),%r15
leaveq 
retq   
cmp    $0x3,%eax
jne    18cea <jpeg_start_decompress+0x12a>
mov    0x8(%rcx),%rax
add    $0x1,%rax
mov    %rax,0x8(%rcx)
mov    0x10(%r15),%rdx
mov    0x10(%rdx),%rcx
cmp    %rcx,%rax
jl     18c93 <jpeg_start_decompress+0xd3>
mov    0x1a4(%r15),%eax
add    %rcx,%rax
mov    %rax,0x10(%rdx)
jmp    18c93 <jpeg_start_decompress+0xd3>
cmp    $0x1,%eax
je     18cc1 <jpeg_start_decompress+0x101>
jmp    18c93 <jpeg_start_decompress+0xd3>
data16 nopw %cs:0x0(%rax,%rax,1)
nopl   0x0(%rax)

0000000000018d00 <jpeg_read_scanlines>:
push   %rbp
mov    %rsp,%rbp
sub    $0x20,%rsp
mov    %r15,-0x18(%rbp)
movslq 0x24(%rdi),%rax
cmp    $0xcd,%eax
jne    18d22 <jpeg_read_scanlines+0x22>
mov    %r15,%rax
mov    %rdi,%r15
mov    %rdx,%rcx
jmp    18d5b <jpeg_read_scanlines+0x5b>
mov    (%rdi),%rax
movl   $0x14,0x28(%rax)
movslq 0x24(%rdi),%rcx
mov    (%rdi),%rax
mov    %ecx,0x2c(%rax)
mov    (%rdi),%rax
mov    (%rax),%rax
mov    %rdi,%rcx
mov    %rsi,-0x8(%rbp)
mov    %rdx,-0x10(%rbp)
mov    %rdi,%r15
mov    %rcx,%rdi
callq  *%rax
mov    -0x10(%rbp),%rcx
mov    -0x8(%rbp),%rsi
mov    -0x18(%rbp),%rax
mov    0x8c(%r15),%edi
mov    0xa8(%r15),%edx
cmp    %edx,%edi
jbe    18de6 <jpeg_read_scanlines+0xe6>
mov    0x10(%r15),%rax
test   %rax,%rax
je     18db1 <jpeg_read_scanlines+0xb1>
mov    %rdx,0x8(%rax)
mov    0x8c(%r15),%edx
mov    0x10(%r15),%rax
mov    %rdx,0x10(%rax)
mov    0x10(%r15),%rax
mov    (%rax),%rax
mov    %r15,%rdi
mov    %r13,-0x8(%rbp)
mov    %r14,-0x10(%rbp)
mov    %rsi,%r13
mov    %rcx,%r14
callq  *%rax
mov    %r14,%rcx
mov    %r13,%rsi
mov    -0x10(%rbp),%r14
mov    -0x8(%rbp),%r13
movl   $0x0,-0x1c(%rbp)
mov    0x228(%r15),%rax
mov    0x8(%rax),%rax
lea    -0x1c(%rbp),%rdx
mov    %r15,%rdi
callq  *%rax
mov    -0x1c(%rbp),%eax
mov    %rax,%rcx
add    0xa8(%r15),%ecx
mov    %ecx,0xa8(%r15)
mov    -0x18(%rbp),%r15
leaveq 
retq   
mov    (%r15),%rcx
movl   $0x7b,0x28(%rcx)
mov    (%r15),%rcx
mov    0x8(%rcx),%rcx
mov    %r15,%rdi
mov    %rax,%r15
mov    $0xffffffffffffffff,%rsi
callq  *%rcx
xor    %eax,%eax
leaveq 
retq   
nopw   0x0(%rax,%rax,1)

0000000000018e10 <jpeg_skip_scanlines>:
push   %rbp
mov    %rsp,%rbp
sub    $0x70,%rsp
mov    %r15,-0x48(%rbp)
mov    0x260(%rdi),%r8
mov    0x228(%rdi),%r10
mov    0x230(%rdi),%rdx
movslq 0x24(%rdi),%rax
cmp    $0xcd,%eax
jne    18e4d <jpeg_skip_scanlines+0x3d>
mov    %r14,%rcx
mov    %rdi,%r14
mov    %r15,%r9
mov    %rbx,%r15
mov    %rdx,%rbx
jmp    18e9f <jpeg_skip_scanlines+0x8f>
mov    (%rdi),%rax
movl   $0x14,0x28(%rax)
movslq 0x24(%rdi),%rcx
mov    (%rdi),%rax
mov    %ecx,0x2c(%rax)
mov    (%rdi),%rax
mov    (%rax),%rax
mov    %rdi,%rcx
mov    %r14,-0x50(%rbp)
mov    %r10,-0x68(%rbp)
mov    %r8,-0x60(%rbp)
mov    %rdx,-0x58(%rbp)
mov    %rdi,%r14
mov    %rcx,%rdi
mov    %rbx,%r15
mov    %rsi,%rbx
callq  *%rax
mov    %rbx,%rsi
mov    -0x58(%rbp),%rbx
mov    -0x60(%rbp),%r8
mov    -0x68(%rbp),%r10
mov    -0x48(%rbp),%r9
mov    -0x50(%rbp),%rcx
mov    0xa8(%r14),%edx
lea    (%rdx,%rsi,1),%eax
mov    0x8c(%r14),%edi
cmp    %eax,%edi
jbe    18ec5 <jpeg_skip_scanlines+0xb5>
xor    %eax,%eax
test   %esi,%esi
jne    18f09 <jpeg_skip_scanlines+0xf9>
mov    %r15,%rbx
mov    %r9,%r15
mov    %rcx,%r14
leaveq 
retq   
mov    %edi,0xa8(%r14)
mov    0x240(%r14),%rax
mov    0x18(%rax),%rax
mov    %rcx,%rbx
mov    %r14,%rdi
callq  *%rax
mov    0x240(%r14),%rax
movl   $0x1,0x24(%rax)
mov    0x8c(%r14),%eax
mov    0xa8(%r14),%ecx
sub    %ecx,%eax
mov    %rbx,%r14
mov    %r15,%rbx
mov    -0x48(%rbp),%r15
leaveq 
retq   
movslq 0x19c(%r14),%r11
imul   0x1a0(%r14),%r11d
mov    %rdx,%rax
xor    %edi,%edi
mov    %rdi,%rdx
div    %r11d
mov    %r11,%rax
sub    %edx,%eax
mov    %rdi,%rdx
div    %r11d
mov    %rsi,%rdi
sub    %edx,%edi
mov    0x260(%r14),%rax
movslq 0x10(%rax),%rax
test   %eax,%eax
jne    18fb5 <jpeg_skip_scanlines+0x1a5>
cmp    %edx,%esi
jb     1908f <jpeg_skip_scanlines+0x27f>
add    0xa8(%r14),%edx
mov    %edx,0xa8(%r14)
movl   $0x0,0x60(%r10)
movl   $0x0,0x64(%r10)
movslq 0x19c(%r14),%rax
mov    %eax,0xb8(%r8)
mov    0x8c(%r14),%eax
mov    0xa8(%r14),%edx
sub    %edx,%eax
mov    %eax,0xbc(%r8)
mov    %rdi,%r9
mov    0x260(%r14),%rax
movslq 0x10(%rax),%rax
test   %eax,%eax
jne    190b6 <jpeg_skip_scanlines+0x2a6>
xor    %edx,%edx
mov    %r9,%rax
div    %r11d
mov    %r9,%rdi
sub    %edx,%edi
jmpq   190cc <jpeg_skip_scanlines+0x2bc>
lea    0x1(%rdx),%eax
cmp    %eax,%esi
jb     19117 <jpeg_skip_scanlines+0x307>
cmp    $0x1,%edx
jbe    1913e <jpeg_skip_scanlines+0x32e>
xor    %eax,%eax
test   %rax,%rax
jne    1915c <jpeg_skip_scanlines+0x34c>
mov    %rdx,%rax
add    0xa8(%r14),%eax
mov    %rdi,%r9
mov    %eax,0xa8(%r14)
mov    0x84(%r10),%eax
test   %eax,%eax
je     18ffd <jpeg_skip_scanlines+0x1ed>
cmp    $0x1,%eax
jne    1904d <jpeg_skip_scanlines+0x23d>
cmp    $0x2,%edx
jbe    1904d <jpeg_skip_scanlines+0x23d>
mov    %r14,%rdi
mov    %rcx,-0x40(%rbp)
mov    %rbx,-0x68(%rbp)
mov    %rsi,-0x20(%rbp)
mov    %r15,-0x28(%rbp)
mov    %r12,-0x30(%rbp)
mov    %r13,-0x38(%rbp)
mov    %r10,%rbx
mov    %r11,%r12
mov    %r8,%r13
mov    %r9,%r15
callq  19920 <set_wraparound_pointers>
mov    %r13,%r8
mov    %r15,%r9
mov    %rbx,%r10
mov    %r12,%r11
mov    -0x38(%rbp),%r13
mov    -0x30(%rbp),%r12
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%rsi
mov    -0x68(%rbp),%rbx
mov    -0x40(%rbp),%rcx
movl   $0x0,0x60(%r10)
movl   $0x0,0x64(%r10)
movl   $0x0,0x7c(%r10)
movslq 0x19c(%r14),%rax
mov    %eax,0xb8(%r8)
mov    0x8c(%r14),%eax
mov    0xa8(%r14),%edx
sub    %edx,%eax
mov    %eax,0xbc(%r8)
jmpq   18f90 <jpeg_skip_scanlines+0x180>
mov    %rsi,%rax
mov    %rsi,-0x68(%rbp)
mov    %rax,%rsi
mov    %r14,%rdi
mov    %rcx,%r14
mov    %r9,%rbx
callq  19cc0 <increment_simple_rowgroup_ctr>
mov    %r15,%rcx
mov    %rbx,%r15
mov    %rcx,%rbx
mov    -0x68(%rbp),%rax
leaveq 
retq   
lea    -0x1(%r9),%edi
mov    %rdi,%rax
mov    %rsi,-0x68(%rbp)
xor    %edx,%edx
div    %r11d
sub    %edx,%edi
mov    -0x68(%rbp),%rsi
mov    %rdi,-0x60(%rbp)
mov    %r9,%rax
sub    %edi,%eax
mov    %rsi,-0x20(%rbp)
mov    0x240(%r14),%rdx
movslq 0x20(%rdx),%rdx
test   %edx,%edx
jne    19181 <jpeg_skip_scanlines+0x371>
mov    %rcx,-0x40(%rbp)
mov    %r10,-0x10(%rbp)
mov    %r8,-0x8(%rbp)
mov    %r15,-0x28(%rbp)
mov    %r12,-0x30(%rbp)
mov    %r13,-0x38(%rbp)
mov    %r11,-0x50(%rbp)
mov    %rax,-0x18(%rbp)
xor    %r12d,%r12d
mov    %r12,%rax
jmpq   191e8 <jpeg_skip_scanlines+0x3d8>
mov    %rsi,%rax
mov    %rsi,-0x68(%rbp)
mov    %rax,%rsi
mov    %r14,%rdi
mov    %rcx,%r14
mov    %r9,%rbx
callq  19bd0 <read_and_discard_scanlines>
mov    %r15,%rcx
mov    %rbx,%r15
mov    %rcx,%rbx
mov    -0x68(%rbp),%rax
leaveq 
retq   
mov    $0x1,%eax
mov    %rbx,-0x68(%rbp)
movslq 0x60(%r10),%rbx
test   %ebx,%ebx
jne    19225 <jpeg_skip_scanlines+0x415>
mov    -0x68(%rbp),%rbx
jmpq   18fcb <jpeg_skip_scanlines+0x1bb>
movslq 0x60(%r10),%rax
test   %eax,%eax
je     18fd4 <jpeg_skip_scanlines+0x1c4>
lea    (%rdx,%r11,1),%edi
mov    %rdi,%rax
add    0xa8(%r14),%eax
mov    %rsi,%r9
sub    %edi,%r9d
jmpq   18fe1 <jpeg_skip_scanlines+0x1d1>
mov    0x260(%r14),%rdx
movslq 0x10(%rdx),%rdx
test   %edx,%edx
jne    1923a <jpeg_skip_scanlines+0x42a>
mov    %rdi,%rdx
add    0xa8(%r14),%edx
mov    %edx,0xa8(%r14)
mov    %rax,%rsi
mov    %rdi,%rax
xor    %edx,%edx
div    %r11d
add    0xb8(%r14),%eax
mov    %eax,0xb8(%r14)
mov    %r14,%rdi
mov    %rcx,-0x68(%rbp)
mov    %r8,%rbx
callq  19cc0 <increment_simple_rowgroup_ctr>
jmpq   1928d <jpeg_skip_scanlines+0x47d>
mov    %r14,%rdi
callq  19a10 <start_iMCU_row>
mov    -0x58(%rbp),%rcx
mov    -0x50(%rbp),%rax
add    %ecx,%eax
mov    -0x60(%rbp),%rdi
cmp    %edi,%eax
jb     192b4 <jpeg_skip_scanlines+0x4a4>
mov    %rdi,%rax
add    0xa8(%r14),%eax
mov    %eax,0xa8(%r14)
mov    0x260(%r14),%rax
movslq 0x10(%rax),%rax
test   %eax,%eax
jne    192c0 <jpeg_skip_scanlines+0x4b0>
mov    %r14,%rdi
mov    -0x18(%rbp),%rsi
callq  19cc0 <increment_simple_rowgroup_ctr>
jmpq   192e7 <jpeg_skip_scanlines+0x4d7>
lea    0x1(%r11),%ebx
cmp    %edi,%ebx
ja     19117 <jpeg_skip_scanlines+0x307>
mov    -0x68(%rbp),%rbx
jmpq   18fcb <jpeg_skip_scanlines+0x1bb>
mov    %rdi,%rdx
add    0xa8(%r14),%edx
mov    %edx,0xa8(%r14)
mov    %rax,%rsi
mov    %rdi,%rax
xor    %ebx,%ebx
mov    %rbx,%rdx
div    %r11d
add    0xb8(%r14),%eax
mov    %eax,0xb8(%r14)
mov    %r9,%rax
mov    %rbx,%rdx
div    %r11d
add    0x84(%r10),%eax
mov    %eax,0x84(%r10)
mov    %r14,%rdi
mov    %rcx,-0x68(%rbp)
mov    %r8,%rbx
callq  19bd0 <read_and_discard_scanlines>
mov    0x8c(%r14),%eax
mov    0xa8(%r14),%ecx
sub    %ecx,%eax
mov    %eax,0xbc(%rbx)
mov    %r15,%rbx
mov    -0x20(%rbp),%rax
mov    -0x48(%rbp),%r15
mov    -0x68(%rbp),%r14
leaveq 
retq   
mov    %rax,-0x58(%rbp)
mov    %r12,%rax
jmpq   19345 <jpeg_skip_scanlines+0x535>
mov    %rdi,%rax
xor    %edx,%edx
mov    -0x50(%rbp),%rcx
div    %ecx
mov    -0x10(%rbp),%rcx
add    0x84(%rcx),%eax
mov    %eax,0x84(%rcx)
mov    %r14,%rdi
mov    -0x18(%rbp),%rsi
callq  19bd0 <read_and_discard_scanlines>
mov    0x8c(%r14),%eax
mov    0xa8(%r14),%ecx
sub    %ecx,%eax
mov    -0x8(%rbp),%rcx
mov    %eax,0xbc(%rcx)
mov    -0x38(%rbp),%r13
mov    -0x30(%rbp),%r12
mov    -0x28(%rbp),%rbx
mov    -0x20(%rbp),%rax
mov    -0x48(%rbp),%r15
mov    -0x40(%rbp),%r14
leaveq 
retq   
mov    0x250(%r14),%rax
mov    0x8(%rax),%rax
mov    %r14,%rdi
mov    %r12,%rsi
callq  *%rax
add    $0x1,%r13d
mov    0x1d8(%r14),%eax
cmp    %r13d,%eax
ja     1931b <jpeg_skip_scanlines+0x50b>
mov    -0x68(%rbp),%rax
add    $0x1,%eax
movslq 0x30(%rbx),%rcx
cmp    %eax,%ecx
jg     19391 <jpeg_skip_scanlines+0x581>
mov    0xb0(%r14),%eax
add    $0x1,%eax
mov    %eax,0xb0(%r14)
mov    0xb8(%r14),%ecx
add    $0x1,%ecx
mov    %ecx,0xb8(%r14)
cmp    0x1a4(%r14),%eax
jb     191d2 <jpeg_skip_scanlines+0x3c2>
mov    0x240(%r14),%rax
mov    0x18(%rax),%rax
mov    %r14,%rdi
callq  *%rax
jmpq   191da <jpeg_skip_scanlines+0x3ca>
mov    %rax,-0x68(%rbp)
mov    %r12,%r13
jmp    19332 <jpeg_skip_scanlines+0x522>
nopw   0x0(%rax,%rax,1)

00000000000193a0 <jpeg_crop_scanline>:
push   %rbp
mov    %rsp,%rbp
sub    $0x50,%rsp
mov    %r13,-0x18(%rbp)
mov    %r14,-0x20(%rbp)
mov    %r15,-0x28(%rbp)
mov    %rsi,-0x40(%rbp)
mov    %rdi,-0x48(%rbp)
movslq 0x24(%rdi),%rax
cmp    $0xcd,%eax
jne    193e8 <jpeg_crop_scanline+0x48>
mov    0xa8(%rdi),%eax
test   %eax,%eax
jne    193e8 <jpeg_crop_scanline+0x48>
mov    %r13,%rax
mov    %r12,%r13
mov    %rsi,%r12
mov    %r15,%rcx
mov    %rdx,%r15
mov    %r14,%r8
mov    %rdi,%r14
jmp    1941c <jpeg_crop_scanline+0x7c>
mov    (%rdi),%rax
movl   $0x14,0x28(%rax)
movslq 0x24(%rdi),%rcx
mov    (%rdi),%rax
mov    %ecx,0x2c(%rax)
mov    (%rdi),%rax
mov    (%rax),%rax
mov    %r12,%r13
mov    %rsi,%r12
mov    %rdx,%r15
mov    %rdi,%r14
callq  *%rax
mov    -0x28(%rbp),%rcx
mov    -0x20(%rbp),%r8
mov    -0x18(%rbp),%rax
test   %r12,%r12
jne    19499 <jpeg_crop_scanline+0xf9>
mov    (%r14),%rax
movl   $0x7c,0x28(%rax)
mov    (%r14),%rax
mov    (%rax),%rax
mov    %r14,%rdi
callq  *%rax
mov    -0x28(%rbp),%rcx
mov    -0x20(%rbp),%r8
mov    -0x18(%rbp),%rax
mov    (%r15),%edx
test   %edx,%edx
je     19458 <jpeg_crop_scanline+0xb8>
add    (%r12),%edx
mov    0x88(%r14),%esi
cmp    %edx,%esi
jae    1947f <jpeg_crop_scanline+0xdf>
mov    (%r14),%rcx
movl   $0x46,0x28(%rcx)
mov    (%r14),%rcx
mov    (%rcx),%rcx
mov    %rax,%r12
mov    %r14,%rdi
callq  *%rcx
mov    %r12,%rax
mov    -0x40(%rbp),%r12
mov    -0x28(%rbp),%rcx
mov    -0x20(%rbp),%r8
mov    0x88(%r14),%edx
cmp    (%r15),%edx
jne    194a0 <jpeg_crop_scanline+0x100>
mov    %r13,%r12
mov    %rax,%r13
mov    %r8,%r14
mov    %rcx,%r15
leaveq 
retq   
test   %r15,%r15
jne    19442 <jpeg_crop_scanline+0xa2>
jmp    19421 <jpeg_crop_scanline+0x81>
movslq 0x1b0(%r14),%rax
cmp    $0x1,%eax
je     1953b <jpeg_crop_scanline+0x19b>
movslq 0x198(%r14),%rsi
imul   0x1a0(%r14),%esi
mov    (%r12),%edi
xor    %ecx,%ecx
mov    %rdi,%rax
mov    %rcx,%rdx
div    %esi
sub    %edx,%edi
mov    %edi,(%r12)
add    (%r15),%edx
mov    %edx,(%r15)
mov    %edx,0x88(%r14)
mov    (%r12),%eax
movslq %esi,%rsi
mov    %rsi,-0x38(%rbp)
cqto   
mov    0x220(%r14),%rdi
idiv   %rsi
mov    %eax,0x14(%rdi)
mov    0x88(%r14),%eax
add    (%r12),%eax
mov    %eax,%edi
mov    0x220(%r14),%rax
mov    %rbx,-0x8(%rbp)
mov    %r13,-0x10(%rbp)
mov    %rax,%rbx
mov    %rcx,%r15
callq  4150 <jdiv_round_up@plt>
add    $0xffffffff,%eax
mov    %eax,0x18(%rbx)
mov    0x130(%r14),%r13
mov    $0x1,%ebx
mov    %r15,%rcx
jmpq   1960e <jpeg_crop_scanline+0x26e>
movslq 0x38(%r14),%rax
cmp    $0x1,%eax
jne    194b0 <jpeg_crop_scanline+0x110>
movslq 0x1a0(%r14),%rsi
jmpq   194bf <jpeg_crop_scanline+0x11f>
movslq 0x1b0(%r14),%rax
cmp    $0x1,%eax
jne    19565 <jpeg_crop_scanline+0x1c5>
cmp    $0x1,%edx
je     19569 <jpeg_crop_scanline+0x1c9>
mov    0x8(%r13),%ebx
movslq 0x28(%r13),%rdx
mov    0x8(%r13),%eax
imul   0x88(%r14),%eax
mov    %eax,%edi
movslq 0x198(%r14),%rsi
mov    %rcx,-0x50(%rbp)
mov    %rdx,%r14
callq  4150 <jdiv_round_up@plt>
mov    %eax,0x28(%r13)
cmp    $0x1,%eax
ja     195a3 <jpeg_crop_scanline+0x203>
cmp    $0x1,%r14d
jle    195a3 <jpeg_crop_scanline+0x203>
mov    $0x1,%r15d
mov    %r15,-0x30(%rbp)
mov    %rbx,%rax
imul   (%r12),%eax
mov    %eax,%eax
cqto   
mov    -0x48(%rbp),%r14
mov    0x220(%r14),%rcx
mov    -0x38(%rbp),%rsi
idiv   %rsi
mov    -0x50(%rbp),%rdx
movslq %edx,%r15
mov    %eax,0x1c(%rcx,%r15,4)
mov    0x88(%r14),%eax
add    (%r12),%eax
imul   %eax,%ebx
mov    %ebx,%edi
mov    %rdx,%r12
mov    0x220(%r14),%rbx
callq  4150 <jdiv_round_up@plt>
add    $0xffffffff,%eax
mov    %eax,0x44(%rbx,%r15,4)
add    $0x60,%r13
lea    0x1(%r12),%ecx
mov    -0x30(%rbp),%r15
mov    $0x1,%ebx
mov    -0x40(%rbp),%r12
movslq 0x38(%r14),%rdx
cmp    %ecx,%edx
jg     19554 <jpeg_crop_scanline+0x1b4>
test   %r15d,%r15d
jg     19635 <jpeg_crop_scanline+0x295>
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
leaveq 
retq   
mov    0x220(%r14),%rax
movl   $0x1,0x6c(%rax)
mov    %r14,%rdi
callq  43e0 <jinit_upsampler@plt>
mov    0x220(%r14),%rax
movl   $0x0,0x6c(%rax)
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
leaveq 
retq   
nop

0000000000019670 <jpeg_read_raw_data>:
push   %rbp
mov    %rsp,%rbp
sub    $0x20,%rsp
mov    %r14,-0x8(%rbp)
mov    %r15,-0x10(%rbp)
movslq 0x24(%rdi),%rax
cmp    $0xce,%eax
jne    19696 <jpeg_read_raw_data+0x26>
mov    %r15,%rcx
mov    %r14,%r15
mov    %rdi,%r14
jmp    196d1 <jpeg_read_raw_data+0x61>
mov    (%rdi),%rax
movl   $0x14,0x28(%rax)
movslq 0x24(%rdi),%rcx
mov    (%rdi),%rax
mov    %ecx,0x2c(%rax)
mov    (%rdi),%rax
mov    (%rax),%rax
mov    %rdi,%rcx
mov    %rsi,-0x18(%rbp)
mov    %rdi,%r14
mov    %rcx,%rdi
mov    %rdx,%r15
callq  *%rax
mov    %r15,%rdx
mov    -0x18(%rbp),%rsi
mov    -0x10(%rbp),%rcx
mov    -0x8(%rbp),%r15
mov    0x8c(%r14),%eax
mov    0xa8(%r14),%edi
cmp    %edi,%eax
jbe    1977c <jpeg_read_raw_data+0x10c>
mov    0x10(%r14),%rax
test   %rax,%rax
je     19727 <jpeg_read_raw_data+0xb7>
mov    %rdi,0x8(%rax)
mov    0x8c(%r14),%ecx
mov    0x10(%r14),%rax
mov    %rcx,0x10(%rax)
mov    0x10(%r14),%rax
mov    (%rax),%rax
mov    %r14,%rdi
mov    %r13,-0x18(%rbp)
mov    %rdx,%r13
mov    %rsi,%r15
callq  *%rax
mov    %r13,%rdx
mov    %r15,%rsi
mov    -0x18(%rbp),%r13
mov    -0x8(%rbp),%r15
movslq 0x1a0(%r14),%rax
imul   0x19c(%r14),%eax
mov    %rax,-0x18(%rbp)
cmp    %edx,%eax
jbe    1975d <jpeg_read_raw_data+0xed>
mov    (%r14),%rax
movl   $0x17,0x28(%rax)
mov    (%r14),%rax
mov    (%rax),%rax
mov    %rsi,%r15
mov    %r14,%rdi
callq  *%rax
mov    %r15,%rsi
mov    -0x8(%rbp),%r15
mov    0x230(%r14),%rax
mov    0x18(%rax),%rax
mov    %r14,%rdi
callq  *%rax
test   %eax,%eax
jne    197a9 <jpeg_read_raw_data+0x139>
mov    %r15,%r14
xor    %eax,%eax
mov    -0x10(%rbp),%r15
leaveq 
retq   
mov    (%r14),%rax
movl   $0x7b,0x28(%rax)
mov    (%r14),%rax
mov    0x8(%rax),%rax
mov    %r14,%rdi
mov    %rcx,%r14
mov    $0xffffffffffffffff,%rsi
callq  *%rax
mov    %r15,%rcx
mov    %r14,%r15
mov    %rcx,%r14
xor    %eax,%eax
leaveq 
retq   
mov    -0x18(%rbp),%rax
mov    %rax,%rcx
add    0xa8(%r14),%ecx
mov    %ecx,0xa8(%r14)
mov    %r15,%r14
mov    -0x10(%rbp),%r15
leaveq 
retq   
nopw   0x0(%rax,%rax,1)

00000000000197d0 <jpeg_start_output>:
push   %rbp
mov    %rsp,%rbp
sub    $0x10,%rsp
movslq 0x24(%rdi),%rax
cmp    $0xcf,%eax
jne    19808 <jpeg_start_output+0x38>
test   %esi,%esi
jg     197ec <jpeg_start_output+0x1c>
mov    $0x1,%esi
mov    0x240(%rdi),%rax
movslq 0x24(%rax),%rax
test   %eax,%eax
jne    1984f <jpeg_start_output+0x7f>
mov    %esi,0xb4(%rdi)
callq  19a70 <output_pass_setup>
leaveq 
retq   
cmp    $0xcc,%eax
je     197e3 <jpeg_start_output+0x13>
mov    (%rdi),%rax
movl   $0x14,0x28(%rax)
movslq 0x24(%rdi),%rcx
mov    (%rdi),%rax
mov    %ecx,0x2c(%rax)
mov    (%rdi),%rax
mov    (%rax),%rax
mov    %rdi,%rcx
mov    %r14,-0x8(%rbp)
mov    %r15,-0x10(%rbp)
mov    %rsi,%r14
mov    %rdi,%r15
mov    %rcx,%rdi
callq  *%rax
mov    %r14,%rsi
mov    %r15,%rdi
mov    -0x10(%rbp),%r15
mov    -0x8(%rbp),%r14
jmp    197e3 <jpeg_start_output+0x13>
movslq 0xac(%rdi),%rax
cmp    %esi,%eax
jge    197fb <jpeg_start_output+0x2b>
mov    %rax,%rsi
jmp    197fb <jpeg_start_output+0x2b>
nop

0000000000019860 <jpeg_finish_output>:
push   %rbp
mov    %rsp,%rbp
sub    $0x10,%rsp
mov    %r15,-0x8(%rbp)
movslq 0x24(%rdi),%rax
cmp    $0xcd,%eax
je     1988e <jpeg_finish_output+0x2e>
cmp    $0xce,%eax
je     1988e <jpeg_finish_output+0x2e>
movslq 0x24(%rdi),%rax
cmp    $0xd0,%eax
jne    198de <jpeg_finish_output+0x7e>
mov    %rdi,%r15
jmp    198ae <jpeg_finish_output+0x4e>
movslq 0x58(%rdi),%rax
test   %eax,%eax
je     1987e <jpeg_finish_output+0x1e>
mov    0x220(%rdi),%rax
mov    0x8(%rax),%rax
mov    %rdi,%r15
callq  *%rax
movl   $0xd0,0x24(%r15)
movslq 0xb4(%r15),%rax
cmp    0xac(%r15),%eax
jl     198ff <jpeg_finish_output+0x9f>
mov    0x240(%r15),%rax
movslq 0x24(%rax),%rcx
test   %ecx,%ecx
jne    198ff <jpeg_finish_output+0x9f>
mov    %r15,%rdi
callq  *(%rax)
test   %eax,%eax
jne    198ae <jpeg_finish_output+0x4e>
xor    %eax,%eax
mov    -0x8(%rbp),%r15
leaveq 
retq   
mov    (%rdi),%rax
movl   $0x14,0x28(%rax)
movslq 0x24(%rdi),%rcx
mov    (%rdi),%rax
mov    %ecx,0x2c(%rax)
mov    (%rdi),%rax
mov    (%rax),%rax
mov    %rdi,%r15
callq  *%rax
jmp    198ae <jpeg_finish_output+0x4e>
movl   $0xcf,0x24(%r15)
mov    $0x1,%eax
mov    -0x8(%rbp),%r15
leaveq 
retq   
data16 nopw %cs:0x0(%rax,%rax,1)
nopl   (%rax)

0000000000019920 <set_wraparound_pointers>:
push   %rbp
mov    %rsp,%rbp
sub    $0x30,%rsp
mov    %rbx,-0x8(%rbp)
mov    %r12,-0x10(%rbp)
mov    %r13,-0x18(%rbp)
mov    %r14,-0x20(%rbp)
mov    %r15,-0x28(%rbp)
mov    0x228(%rdi),%rsi
mov    0x130(%rdi),%r8
movslq 0x1a0(%rdi),%rax
lea    0x1(%rax),%r9d
lea    0x2(%rax),%ebx
mov    %rbx,-0x30(%rbp)
xor    %ecx,%ecx
mov    %rcx,%r10
jmp    199b5 <set_wraparound_pointers+0x95>
lea    (%rcx,%r15,1),%edx
movslq %edx,%r14
mov    0x0(%r13,%r14,8),%rbx
mov    %rcx,%rdx
sub    %eax,%edx
movslq %edx,%rdx
mov    %rbx,0x0(%r13,%rdx,8)
mov    (%r11,%r14,8),%rbx
mov    %rbx,(%r11,%rdx,8)
movslq %ecx,%r14
mov    0x0(%r13,%r14,8),%rdx
lea    (%rcx,%r12,1),%ebx
movslq %ebx,%rbx
mov    %rdx,0x0(%r13,%rbx,8)
mov    (%r11,%r14,8),%rdx
mov    %rdx,(%r11,%rbx,8)
add    $0x1,%ecx
cmp    %eax,%ecx
jl     19963 <set_wraparound_pointers+0x43>
add    $0x1,%r10d
add    $0x60,%r8
xor    %ecx,%ecx
mov    -0x30(%rbp),%rbx
movslq 0x38(%rdi),%rax
cmp    %r10d,%eax
jg     199d4 <set_wraparound_pointers+0xb4>
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
leaveq 
retq   
movslq %r10d,%r11
movslq 0x24(%r8),%rax
imul   0xc(%r8),%eax
cltd   
movslq 0x1a0(%rdi),%r12
mov    0x68(%rsi),%r13
mov    0x0(%r13,%r11,8),%r13
mov    0x70(%rsi),%r14
mov    (%r14,%r11,8),%r11
idiv   %r12d
mov    %rax,%r15
imul   %r9d,%r15d
mov    %rax,%r12
imul   %ebx,%r12d
jmp    199a3 <set_wraparound_pointers+0x83>
nopl   0x0(%rax)

0000000000019a10 <start_iMCU_row>:
push   %rbp
mov    %rsp,%rbp
mov    0x230(%rdi),%rcx
movslq 0x1b0(%rdi),%rax
cmp    $0x1,%eax
jg     19a48 <start_iMCU_row+0x38>
mov    0x1a4(%rdi),%eax
add    $0xffffffff,%eax
cmp    0xb0(%rdi),%eax
ja     19a5f <start_iMCU_row+0x4f>
mov    0x1b8(%rdi),%rax
movslq 0x48(%rax),%rax
mov    %eax,0x30(%rcx)
jmp    19a4f <start_iMCU_row+0x3f>
movl   $0x1,0x30(%rcx)
movl   $0x0,0x28(%rcx)
movl   $0x0,0x2c(%rcx)
leaveq 
retq   
mov    0x1b8(%rdi),%rax
movslq 0xc(%rax),%rax
mov    %eax,0x30(%rcx)
jmp    19a4f <start_iMCU_row+0x3f>
nop

0000000000019a70 <output_pass_setup>:
push   %rbp
mov    %rsp,%rbp
sub    $0x20,%rsp
mov    %r13,-0x10(%rbp)
mov    %r14,-0x18(%rbp)
mov    %r15,-0x20(%rbp)
mov    %r12,-0x8(%rbp)
xor    %r12d,%r12d
lea    0xa8(%rdi),%r14
movslq 0x24(%rdi),%rax
cmp    $0xcc,%eax
jne    19aa5 <output_pass_setup+0x35>
mov    %rdi,%r13
jmpq   19b50 <output_pass_setup+0xe0>
mov    0x220(%rdi),%rax
mov    (%rax),%rax
mov    %rdi,%r13
callq  *%rax
movl   $0x0,(%r14)
movl   $0xcc,0x24(%r13)
jmpq   19b50 <output_pass_setup+0xe0>
mov    0x10(%r13),%rax
test   %rax,%rax
je     19af0 <output_pass_setup+0x80>
mov    %rcx,0x8(%rax)
mov    0x8c(%r13),%ecx
mov    0x10(%r13),%rax
mov    %rcx,0x10(%rax)
mov    0x10(%r13),%rax
mov    (%rax),%rax
mov    %r13,%rdi
callq  *%rax
mov    0x228(%r13),%rax
mov    0x8(%rax),%rax
mov    0xa8(%r13),%r15d
mov    %r12,%rcx
mov    %r13,%rdi
mov    %r12,%rsi
mov    %r14,%rdx
callq  *%rax
mov    0xa8(%r13),%eax
cmp    %r15d,%eax
je     19b6e <output_pass_setup+0xfe>
mov    (%r14),%ecx
mov    0x8c(%r13),%eax
cmp    %ecx,%eax
ja     19ac8 <output_pass_setup+0x58>
mov    0x220(%r13),%rax
mov    0x8(%rax),%rax
mov    %r13,%rdi
callq  *%rax
mov    0x220(%r13),%rax
mov    (%rax),%rax
mov    %r13,%rdi
callq  *%rax
movl   $0x0,(%r14)
mov    0x220(%r13),%rax
movslq 0x10(%rax),%rax
test   %eax,%eax
jne    19b1c <output_pass_setup+0xac>
movslq 0x5c(%r13),%rax
test   %eax,%eax
jne    19b83 <output_pass_setup+0x113>
mov    $0xcd,%eax
jmp    19b88 <output_pass_setup+0x118>
mov    %r12,%rax
mov    -0x8(%rbp),%r12
mov    -0x20(%rbp),%r15
mov    -0x18(%rbp),%r14
mov    -0x10(%rbp),%r13
leaveq 
retq   
mov    $0xce,%eax
mov    %eax,0x24(%r13)
mov    $0x1,%eax
mov    -0x8(%rbp),%r12
mov    -0x20(%rbp),%r15
mov    -0x18(%rbp),%r14
mov    -0x10(%rbp),%r13
leaveq 
retq   
data16 nopw %cs:0x0(%rax,%rax,1)
xchg   %ax,%ax

0000000000019bb0 <noop_convert>:
push   %rbp
mov    %rsp,%rbp
leaveq 
retq   
nopw   %cs:0x0(%rax,%rax,1)

0000000000019bc0 <noop_quantize>:
push   %rbp
mov    %rsp,%rbp
leaveq 
retq   
nopw   %cs:0x0(%rax,%rax,1)

0000000000019bd0 <read_and_discard_scanlines>:
push   %rbp
mov    %rsp,%rbp
sub    $0x30,%rsp
mov    %rbx,-0x10(%rbp)
mov    %r12,-0x18(%rbp)
mov    %r13,-0x20(%rbp)
mov    %r14,-0x28(%rbp)
mov    %r15,-0x30(%rbp)
mov    0x268(%rdi),%rcx
mov    0x8(%rcx),%rax
mov    %rax,-0x8(%rbp)
lea    -0x52(%rip),%rax        # 19bb0 <noop_convert>
mov    %rax,0x8(%rcx)
xor    %r12d,%r12d
mov    $0x1,%edx
mov    0x270(%rdi),%rax
test   %rax,%rax
jne    19c28 <read_and_discard_scanlines+0x58>
mov    %rdi,%rbx
mov    %rsi,%r13
mov    %r12,%r14
mov    %r14,%r15
jmp    19c53 <read_and_discard_scanlines+0x83>
mov    0x8(%rax),%r14
test   %r14,%r14
jne    19c82 <read_and_discard_scanlines+0xb2>
mov    %rdi,%rbx
mov    %rsi,%r13
mov    %r12,%r14
mov    %r14,%r15
jmp    19c53 <read_and_discard_scanlines+0x83>
mov    %rbx,%rdi
mov    %r12,%rsi
callq  4420 <jpeg_read_scanlines@plt>
add    $0x1,%r15d
mov    $0x1,%edx
cmp    %r13d,%r15d
jb     19c3f <read_and_discard_scanlines+0x6f>
mov    0x268(%rbx),%rax
mov    -0x8(%rbp),%rcx
mov    %rcx,0x8(%rax)
test   %r14,%r14
jne    19c98 <read_and_discard_scanlines+0xc8>
mov    -0x30(%rbp),%r15
mov    -0x28(%rbp),%r14
mov    -0x20(%rbp),%r13
mov    -0x18(%rbp),%r12
mov    -0x10(%rbp),%rbx
leaveq 
retq   
lea    -0xc9(%rip),%rcx        # 19bc0 <noop_quantize>
mov    %rcx,0x8(%rax)
mov    %rdi,%rbx
mov    %rsi,%r13
mov    %r12,%r15
jmp    19c53 <read_and_discard_scanlines+0x83>
mov    0x270(%rbx),%rax
mov    %r14,0x8(%rax)
mov    -0x30(%rbp),%r15
mov    -0x28(%rbp),%r14
mov    -0x20(%rbp),%r13
mov    -0x18(%rbp),%r12
mov    -0x10(%rbp),%rbx
leaveq 
retq   
nopl   0x0(%rax)

0000000000019cc0 <increment_simple_rowgroup_ctr>:
push   %rbp
mov    %rsp,%rbp
mov    0x19c(%rdi),%r9d
xor    %ecx,%ecx
mov    0x228(%rdi),%r8
mov    %rsi,%rax
mov    %rcx,%rdx
div    %r9d
add    0x64(%r8),%eax
mov    %eax,0x64(%r8)
mov    %rcx,%rdx
mov    0x19c(%rdi),%r8d
mov    %rsi,%rax
div    %r8d
sub    %edx,%esi
add    0xa8(%rdi),%esi
mov    %esi,0xa8(%rdi)
mov    %rdx,%rsi
callq  19bd0 <read_and_discard_scanlines>
leaveq 
retq   
nopl   (%rax)

0000000000019d10 <jpeg_stdio_dest>:
push   %rbp
mov    %rsp,%rbp
sub    $0x10,%rsp
lea    0x261(%rip),%rax        # 19f80 <init_destination>
mov    0x28(%rdi),%rcx
test   %rcx,%rcx
je     19d6e <jpeg_stdio_dest+0x5e>
mov    0x10(%rcx),%rcx
cmp    %rax,%rcx
je     19daf <jpeg_stdio_dest+0x9f>
mov    (%rdi),%rax
movl   $0x17,0x28(%rax)
mov    (%rdi),%rax
mov    (%rax),%rax
mov    %rdi,%rcx
mov    %r14,-0x8(%rbp)
mov    %r15,-0x10(%rbp)
mov    %rsi,%r14
mov    %rdi,%r15
mov    %rcx,%rdi
callq  *%rax
mov    %r14,%rsi
mov    %r15,%rdi
lea    0x21c(%rip),%rax        # 19f80 <init_destination>
mov    -0x10(%rbp),%r15
mov    -0x8(%rbp),%r14
jmp    19daf <jpeg_stdio_dest+0x9f>
mov    0x8(%rdi),%rax
mov    (%rax),%rax
xor    %r8d,%r8d
mov    $0x38,%edx
mov    %rdi,%rcx
mov    %r14,-0x8(%rbp)
mov    %r15,-0x10(%rbp)
mov    %rdi,%r14
mov    %rcx,%rdi
mov    %rsi,%r15
mov    %r8,%rsi
callq  *%rax
mov    %rax,0x28(%r14)
mov    %r15,%rsi
mov    %r14,%rdi
lea    0x1d9(%rip),%rax        # 19f80 <init_destination>
mov    -0x10(%rbp),%r15
mov    -0x8(%rbp),%r14
mov    0x28(%rdi),%rcx
mov    %rax,0x10(%rcx)
lea    0x212(%rip),%rax        # 19fd0 <empty_output_buffer>
mov    %rax,0x18(%rcx)
lea    0x327(%rip),%rax        # 1a0f0 <term_destination>
mov    %rax,0x20(%rcx)
mov    %rsi,0x28(%rcx)
leaveq 
retq   
data16 nopw %cs:0x0(%rax,%rax,1)
xchg   %ax,%ax

0000000000019de0 <jpeg_mem_dest>:
push   %rbp
mov    %rsp,%rbp
sub    $0x20,%rsp
mov    %r13,-0x10(%rbp)
mov    %r14,-0x18(%rbp)
mov    %r15,-0x20(%rbp)
test   %rsi,%rsi
je     19e15 <jpeg_mem_dest+0x35>
test   %rdx,%rdx
je     19e15 <jpeg_mem_dest+0x35>
mov    %r15,%rax
mov    %rdi,%r15
mov    %r14,%rcx
mov    %r12,%r14
mov    %rdx,%r12
mov    %r13,%r8
mov    %rsi,%r13
jmp    19e3f <jpeg_mem_dest+0x5f>
mov    (%rdi),%rax
movl   $0x17,0x28(%rax)
mov    (%rdi),%rax
mov    (%rax),%rax
mov    %rsi,%r13
mov    %r12,%r14
mov    %rdx,%r12
mov    %rdi,%r15
callq  *%rax
mov    -0x20(%rbp),%rax
mov    -0x18(%rbp),%rcx
mov    -0x10(%rbp),%r8
lea    0x17a(%rip),%rdx        # 19fc0 <init_mem_destination>
mov    0x28(%r15),%rsi
test   %rsi,%rsi
je     19e82 <jpeg_mem_dest+0xa2>
mov    0x10(%rsi),%rsi
cmp    %rdx,%rsi
je     19eac <jpeg_mem_dest+0xcc>
mov    (%r15),%rax
movl   $0x17,0x28(%rax)
mov    (%r15),%rax
mov    (%rax),%rax
mov    %r15,%rdi
callq  *%rax
lea    0x14c(%rip),%rdx        # 19fc0 <init_mem_destination>
mov    -0x20(%rbp),%rax
mov    -0x18(%rbp),%rcx
mov    -0x10(%rbp),%r8
jmp    19eac <jpeg_mem_dest+0xcc>
mov    0x8(%r15),%rax
mov    (%rax),%rax
xor    %esi,%esi
mov    $0x50,%edx
mov    %r15,%rdi
callq  *%rax
mov    %rax,0x28(%r15)
lea    0x120(%rip),%rdx        # 19fc0 <init_mem_destination>
mov    -0x20(%rbp),%rax
mov    -0x18(%rbp),%rcx
mov    -0x10(%rbp),%r8
mov    0x28(%r15),%rsi
mov    %rdx,0x10(%rsi)
lea    0x185(%rip),%rdx        # 1a040 <empty_mem_output_buffer>
mov    %rdx,0x18(%rsi)
lea    0x2ea(%rip),%rdx        # 1a1b0 <term_mem_destination>
mov    %rdx,0x20(%rsi)
mov    %r13,0x28(%rsi)
mov    %r12,0x30(%rsi)
movq   $0x0,0x38(%rsi)
mov    0x0(%r13),%rdx
test   %rdx,%rdx
je     19ef1 <jpeg_mem_dest+0x111>
mov    (%r12),%rdx
test   %rdx,%rdx
je     19ef1 <jpeg_mem_dest+0x111>
mov    %rsi,%r15
jmp    19f4e <jpeg_mem_dest+0x16e>
mov    $0x1000,%edi
mov    %r14,-0x8(%rbp)
mov    %rsi,%r14
callq  4320 <malloc@plt>
mov    %rax,0x0(%r13)
mov    %rax,0x38(%r14)
test   %rax,%rax
je     19f14 <jpeg_mem_dest+0x134>
mov    %r14,%r15
jmp    19f36 <jpeg_mem_dest+0x156>
mov    (%r15),%rax
movl   $0x36,0x28(%rax)
mov    (%r15),%rax
movl   $0xa,0x2c(%rax)
mov    (%r15),%rax
mov    (%rax),%rax
mov    %r15,%rdi
mov    %r14,%r15
callq  *%rax
movq   $0x1000,(%r12)
mov    -0x8(%rbp),%r14
mov    -0x20(%rbp),%rax
mov    -0x18(%rbp),%rcx
mov    -0x10(%rbp),%r8
mov    0x0(%r13),%rdx
mov    %rdx,0x40(%r15)
mov    %rdx,(%r15)
mov    (%r12),%rdx
mov    %rdx,0x48(%r15)
mov    %rdx,0x8(%r15)
mov    %r14,%r12
mov    %rcx,%r14
mov    %r8,%r13
mov    %rax,%r15
leaveq 
retq   
data16 nopw %cs:0x0(%rax,%rax,1)
xchg   %ax,%ax

0000000000019f80 <init_destination>:
push   %rbp
mov    %rsp,%rbp
sub    $0x10,%rsp
mov    %r15,-0x8(%rbp)
mov    0x8(%rdi),%rax
mov    (%rax),%rax
mov    $0x1,%esi
mov    $0x1000,%edx
mov    0x28(%rdi),%r15
callq  *%rax
mov    %rax,0x30(%r15)
mov    %rax,(%r15)
movq   $0x1000,0x8(%r15)
mov    -0x8(%rbp),%r15
leaveq 
retq   
nopl   0x0(%rax,%rax,1)

0000000000019fc0 <init_mem_destination>:
push   %rbp
mov    %rsp,%rbp
leaveq 
retq   
nopw   %cs:0x0(%rax,%rax,1)

0000000000019fd0 <empty_output_buffer>:
push   %rbp
mov    %rsp,%rbp
sub    $0x10,%rsp
mov    %r14,-0x8(%rbp)
mov    %r15,-0x10(%rbp)
mov    %rdi,%r15
mov    $0x1,%esi
mov    0x28(%r15),%r14
mov    0x30(%r14),%rdi
mov    $0x1000,%edx
mov    0x28(%r14),%rcx
callq  4450 <fwrite@plt>
cmp    $0x1000,%rax
je     1a01b <empty_output_buffer+0x4b>
mov    (%r15),%rax
movl   $0x25,0x28(%rax)
mov    (%r15),%rax
mov    (%rax),%rax
mov    %r15,%rdi
callq  *%rax
mov    0x30(%r14),%rax
mov    %rax,(%r14)
movq   $0x1000,0x8(%r14)
mov    $0x1,%eax
mov    -0x10(%rbp),%r15
mov    -0x8(%rbp),%r14
leaveq 
retq   
nopl   0x0(%rax)

000000000001a040 <empty_mem_output_buffer>:
push   %rbp
mov    %rsp,%rbp
sub    $0x20,%rsp
mov    %r13,-0x8(%rbp)
mov    %r14,-0x10(%rbp)
mov    %r15,-0x18(%rbp)
mov    0x28(%rdi),%r13
mov    0x48(%r13),%rax
lea    (%rax,%rax,1),%r14
mov    %rdi,%r15
mov    %r14,%rdi
callq  4320 <malloc@plt>
test   %rax,%rax
je     1a075 <empty_mem_output_buffer+0x35>
mov    %rax,%r15
jmp    1a097 <empty_mem_output_buffer+0x57>
mov    (%r15),%rcx
movl   $0x36,0x28(%rcx)
mov    (%r15),%rcx
movl   $0xa,0x2c(%rcx)
mov    (%r15),%rcx
mov    (%rcx),%rcx
mov    %r15,%rdi
mov    %rax,%r15
callq  *%rcx
mov    0x40(%r13),%rsi
mov    0x48(%r13),%rdx
mov    %r15,%rdi
callq  42c0 <memcpy@plt>
mov    0x38(%r13),%rdi
test   %rdi,%rdi
je     1a0b5 <empty_mem_output_buffer+0x75>
callq  4060 <free@plt>
mov    %r15,0x38(%r13)
mov    0x48(%r13),%rcx
lea    (%r15,%rcx,1),%rax
mov    %rax,0x0(%r13)
mov    %rcx,0x8(%r13)
mov    %r15,0x40(%r13)
mov    %r14,0x48(%r13)
mov    $0x1,%eax
mov    -0x18(%rbp),%r15
mov    -0x10(%rbp),%r14
mov    -0x8(%rbp),%r13
leaveq 
retq   
data16 nopw %cs:0x0(%rax,%rax,1)
nop

000000000001a0f0 <term_destination>:
push   %rbp
mov    %rsp,%rbp
sub    $0x20,%rsp
mov    %r14,-0x10(%rbp)
mov    %r15,-0x18(%rbp)
mov    0x28(%rdi),%r15
mov    0x8(%r15),%rax
cmp    $0x1000,%rax
jne    1a133 <term_destination+0x43>
mov    %rdi,%r14
mov    0x28(%r15),%rdi
callq  4330 <fflush@plt>
mov    0x28(%r15),%rdi
callq  40c0 <ferror@plt>
test   %eax,%eax
jne    1a169 <term_destination+0x79>
mov    -0x18(%rbp),%r15
mov    -0x10(%rbp),%r14
leaveq 
retq   
mov    $0x1000,%r14d
sub    %rax,%r14
mov    0x30(%r15),%rax
mov    $0x1,%esi
mov    0x28(%r15),%rcx
mov    %r14,%rdx
mov    %r13,-0x8(%rbp)
mov    %r14,%r13
mov    %rdi,%r14
mov    %rax,%rdi
callq  4450 <fwrite@plt>
cmp    %r13,%rax
jne    1a188 <term_destination+0x98>
mov    -0x8(%rbp),%r13
jmp    1a113 <term_destination+0x23>
mov    (%r14),%rax
movl   $0x25,0x28(%rax)
mov    (%r14),%rax
mov    (%rax),%rax
mov    %r14,%rdi
callq  *%rax
mov    -0x18(%rbp),%r15
mov    -0x10(%rbp),%r14
leaveq 
retq   
mov    (%r14),%rax
movl   $0x25,0x28(%rax)
mov    (%r14),%rax
mov    (%rax),%rax
mov    %r14,%rdi
callq  *%rax
mov    -0x8(%rbp),%r13
jmpq   1a113 <term_destination+0x23>
nopw   %cs:0x0(%rax,%rax,1)

000000000001a1b0 <term_mem_destination>:
push   %rbp
mov    %rsp,%rbp
mov    0x28(%rdi),%rdx
mov    0x40(%rdx),%rax
mov    0x28(%rdx),%rcx
mov    %rax,(%rcx)
mov    0x48(%rdx),%rax
mov    0x8(%rdx),%rcx
sub    %rcx,%rax
mov    0x30(%rdx),%rcx
mov    %rax,(%rcx)
leaveq 
retq   
nopw   0x0(%rax,%rax,1)

000000000001a1e0 <jpeg_stdio_src>:
push   %rbp
mov    %rsp,%rbp
sub    $0x20,%rsp
lea    0x221(%rip),%rdx        # 1a410 <init_source>
mov    0x28(%rdi),%rax
test   %rax,%rax
je     1a213 <jpeg_stdio_src+0x33>
mov    0x10(%rax),%rax
cmp    %rdx,%rax
jne    1a2be <jpeg_stdio_src+0xde>
mov    %r14,%rax
mov    %rdi,%r14
mov    %r15,%rcx
mov    %rsi,%r15
jmp    1a26f <jpeg_stdio_src+0x8f>
mov    0x8(%rdi),%rax
mov    (%rax),%rcx
xor    %eax,%eax
mov    $0x50,%edx
mov    %rdi,%r8
mov    %r14,-0x10(%rbp)
mov    %r15,-0x18(%rbp)
mov    %rdi,%r14
mov    %r8,%rdi
mov    %rsi,%r15
mov    %rax,%rsi
callq  *%rcx
mov    %rax,0x28(%r14)
mov    0x8(%r14),%rcx
mov    (%rcx),%rcx
mov    $0x1000,%edx
mov    %r14,%rdi
mov    %r13,-0x8(%rbp)
mov    %rax,%r13
xor    %esi,%esi
callq  *%rcx
mov    %rax,0x40(%r13)
mov    -0x8(%rbp),%r13
lea    0x1a9(%rip),%rdx        # 1a410 <init_source>
mov    -0x18(%rbp),%rcx
mov    -0x10(%rbp),%rax
mov    0x28(%r14),%rsi
mov    %rdx,0x10(%rsi)
lea    0x1c2(%rip),%rdx        # 1a440 <fill_input_buffer>
mov    %rdx,0x18(%rsi)
lea    0x2b7(%rip),%rdx        # 1a540 <skip_input_data>
mov    %rdx,0x20(%rsi)
mov    0x53c9c(%rip),%rdx        # 6df30 <jpeg_resync_to_restart@@LIBJPEG_6.2+0x4ae30>
mov    %rdx,0x28(%rsi)
lea    0x311(%rip),%rdx        # 1a5b0 <term_source>
mov    %rdx,0x30(%rsi)
mov    %r15,0x38(%rsi)
movq   $0x0,0x8(%rsi)
movq   $0x0,(%rsi)
mov    %rax,%r14
mov    %rcx,%r15
leaveq 
retq   
mov    (%rdi),%rax
movl   $0x17,0x28(%rax)
mov    (%rdi),%rax
mov    (%rax),%rax
mov    %rdi,%rcx
mov    %r14,-0x10(%rbp)
mov    %r15,-0x18(%rbp)
mov    %rdi,%r14
mov    %rcx,%rdi
mov    %rsi,%r15
callq  *%rax
lea    0x125(%rip),%rdx        # 1a410 <init_source>
mov    -0x18(%rbp),%rcx
mov    -0x10(%rbp),%rax
jmpq   1a26f <jpeg_stdio_src+0x8f>
nopl   0x0(%rax,%rax,1)

000000000001a300 <jpeg_mem_src>:
push   %rbp
mov    %rsp,%rbp
sub    $0x20,%rsp
mov    %r13,-0x8(%rbp)
mov    %r14,-0x10(%rbp)
mov    %r15,-0x18(%rbp)
test   %rsi,%rsi
je     1a332 <jpeg_mem_src+0x32>
test   %rdx,%rdx
je     1a332 <jpeg_mem_src+0x32>
mov    %r13,%rax
mov    %rsi,%r13
mov    %r15,%rcx
mov    %rdx,%r15
mov    %r14,%r8
mov    %rdi,%r14
jmp    1a359 <jpeg_mem_src+0x59>
mov    (%rdi),%rax
movl   $0x2a,0x28(%rax)
mov    (%rdi),%rax
mov    (%rax),%rax
mov    %rsi,%r13
mov    %rdx,%r15
mov    %rdi,%r14
callq  *%rax
mov    -0x18(%rbp),%rcx
mov    -0x10(%rbp),%r8
mov    -0x8(%rbp),%rax
lea    0xd0(%rip),%rdx        # 1a430 <init_mem_source>
mov    0x28(%r14),%rsi
test   %rsi,%rsi
je     1a39c <jpeg_mem_src+0x9c>
mov    0x10(%rsi),%rsi
cmp    %rdx,%rsi
je     1a3c6 <jpeg_mem_src+0xc6>
mov    (%r14),%rax
movl   $0x17,0x28(%rax)
mov    (%r14),%rax
mov    (%rax),%rax
mov    %r14,%rdi
callq  *%rax
lea    0xa2(%rip),%rdx        # 1a430 <init_mem_source>
mov    -0x18(%rbp),%rcx
mov    -0x10(%rbp),%r8
mov    -0x8(%rbp),%rax
jmp    1a3c6 <jpeg_mem_src+0xc6>
mov    0x8(%r14),%rax
mov    (%rax),%rax
xor    %esi,%esi
mov    $0x38,%edx
mov    %r14,%rdi
callq  *%rax
mov    %rax,0x28(%r14)
lea    0x76(%rip),%rdx        # 1a430 <init_mem_source>
mov    -0x18(%rbp),%rcx
mov    -0x10(%rbp),%r8
mov    -0x8(%rbp),%rax
mov    0x28(%r14),%rsi
mov    %rdx,0x10(%rsi)
lea    0x11b(%rip),%rdx        # 1a4f0 <fill_mem_input_buffer>
mov    %rdx,0x18(%rsi)
lea    0x160(%rip),%rdx        # 1a540 <skip_input_data>
mov    %rdx,0x20(%rsi)
mov    0x53b45(%rip),%rdx        # 6df30 <jpeg_resync_to_restart@@LIBJPEG_6.2+0x4ae30>
mov    %rdx,0x28(%rsi)
lea    0x1ba(%rip),%rdx        # 1a5b0 <term_source>
mov    %rdx,0x30(%rsi)
mov    %r15,0x8(%rsi)
mov    %r13,(%rsi)
mov    %rax,%r13
mov    %r8,%r14
mov    %rcx,%r15
leaveq 
retq   
nopl   0x0(%rax)

000000000001a410 <init_source>:
push   %rbp
mov    %rsp,%rbp
mov    0x28(%rdi),%rax
movl   $0x1,0x48(%rax)
leaveq 
retq   
data16 nopw %cs:0x0(%rax,%rax,1)
nopl   0x0(%rax)

000000000001a430 <init_mem_source>:
push   %rbp
mov    %rsp,%rbp
leaveq 
retq   
nopw   %cs:0x0(%rax,%rax,1)

000000000001a440 <fill_input_buffer>:
push   %rbp
mov    %rsp,%rbp
sub    $0x10,%rsp
mov    %r14,-0x8(%rbp)
mov    %r15,-0x10(%rbp)
mov    %rdi,%r15
mov    $0x1,%esi
mov    0x28(%r15),%r14
mov    0x40(%r14),%rdi
mov    $0x1000,%edx
mov    0x38(%r14),%rcx
callq  40e0 <fread@plt>
test   %rax,%rax
jne    1a4c1 <fill_input_buffer+0x81>
movslq 0x48(%r14),%rax
test   %eax,%eax
je     1a490 <fill_input_buffer+0x50>
mov    (%r15),%rax
movl   $0x2a,0x28(%rax)
mov    (%r15),%rax
mov    (%rax),%rax
mov    %r15,%rdi
callq  *%rax
mov    (%r15),%rax
movl   $0x78,0x28(%rax)
mov    (%r15),%rax
mov    0x8(%rax),%rax
mov    %r15,%rdi
mov    $0xffffffffffffffff,%rsi
callq  *%rax
mov    0x40(%r14),%rax
movb   $0xff,(%rax)
mov    0x40(%r14),%rax
movb   $0xd9,0x1(%rax)
mov    $0x2,%eax
mov    0x40(%r14),%rcx
mov    %rcx,(%r14)
mov    %rax,0x8(%r14)
movl   $0x0,0x48(%r14)
mov    $0x1,%eax
mov    -0x10(%rbp),%r15
mov    -0x8(%rbp),%r14
leaveq 
retq   
data16 nopw %cs:0x0(%rax,%rax,1)
xchg   %ax,%ax

000000000001a4f0 <fill_mem_input_buffer>:
push   %rbp
mov    %rsp,%rbp
sub    $0x10,%rsp
mov    %r15,-0x8(%rbp)
mov    (%rdi),%rax
movl   $0x78,0x28(%rax)
mov    (%rdi),%rax
mov    0x8(%rax),%rax
mov    $0xffffffffffffffff,%rsi
mov    %rdi,%r15
callq  *%rax
lea    0x3f1f8(%rip),%rcx        # 59718 <mybuffer.5>
mov    0x28(%r15),%rax
mov    %rcx,(%rax)
mov    0x28(%r15),%rax
movq   $0x2,0x8(%rax)
mov    $0x1,%eax
mov    -0x8(%rbp),%r15
leaveq 
retq   
xchg   %ax,%ax

000000000001a540 <skip_input_data>:
push   %rbp
mov    %rsp,%rbp
sub    $0x20,%rsp
mov    0x28(%rdi),%rax
test   %rsi,%rsi
jg     1a553 <skip_input_data+0x13>
leaveq 
retq   
mov    %r13,-0x8(%rbp)
mov    %r14,-0x10(%rbp)
mov    %r15,-0x18(%rbp)
mov    %r12,%r13
mov    %rbx,%r12
mov    %rsi,%rbx
mov    %rdi,%r14
mov    %rax,%r15
jmp    1a57a <skip_input_data+0x3a>
sub    %rax,%rbx
mov    %r14,%rdi
callq  *0x18(%r15)
mov    0x8(%r15),%rax
cmp    %rbx,%rax
jl     1a570 <skip_input_data+0x30>
mov    %rbx,%rcx
add    (%r15),%rcx
mov    %rcx,(%r15)
sub    %rbx,%rax
mov    %rax,0x8(%r15)
mov    %r12,%rbx
mov    %r13,%r12
mov    -0x18(%rbp),%r15
mov    -0x10(%rbp),%r14
mov    -0x8(%rbp),%r13
leaveq 
retq   
nopw   0x0(%rax,%rax,1)

000000000001a5b0 <term_source>:
push   %rbp
mov    %rsp,%rbp
leaveq 
retq   
nopw   %cs:0x0(%rax,%rax,1)

000000000001a5c0 <jinit_d_coef_controller>:
push   %rbp
mov    %rsp,%rbp
sub    $0x40,%rsp
mov    %r13,-0x20(%rbp)
mov    %r14,-0x28(%rbp)
mov    %r15,-0x30(%rbp)
mov    $0x1,%r15d
mov    0x8(%rdi),%rax
mov    (%rax),%rax
mov    %rbx,%r13
mov    %rsi,%r14
mov    $0xe8,%edx
mov    %rdi,%rbx
mov    %r15,%rsi
callq  *%rax
mov    %rax,0x230(%rbx)
lea    0x129e(%rip),%rcx        # 1b8a0 <start_input_pass>
mov    %rcx,(%rax)
lea    0x12b4(%rip),%rcx        # 1b8c0 <start_output_pass>
mov    %rcx,0x10(%rax)
movq   $0x0,0xe0(%rax)
xor    %esi,%esi
test   %r14d,%r14d
jne    1a642 <jinit_d_coef_controller+0x82>
mov    0x8(%rbx),%rcx
mov    0x8(%rcx),%rcx
mov    %rax,%r14
mov    %r15,%rax
mov    %rsi,%r15
mov    %rax,%rsi
mov    $0x500,%edx
mov    %rbx,%rdi
callq  *%rcx
jmp    1a67e <jinit_d_coef_controller+0xbe>
mov    0x130(%rbx),%rdx
lea    0x90(%rax),%rcx
mov    %rcx,-0x38(%rbp)
mov    %rax,-0x8(%rbp)
mov    %r13,-0x10(%rbp)
mov    %r12,-0x18(%rbp)
mov    %rsi,%r13
jmpq   1a71d <jinit_d_coef_controller+0x15d>
movslq %r15d,%rdx
mov    %rdx,%rcx
shl    $0x7,%rcx
add    %rax,%rcx
mov    %rcx,0x38(%r14,%rdx,8)
add    $0x1,%r15d
cmp    $0x9,%r15d
jle    1a668 <jinit_d_coef_controller+0xa8>
lea    0x12b5(%rip),%rax        # 1b940 <dummy_consume_data>
mov    %rax,0x8(%r14)
lea    0x14a(%rip),%rax        # 1a7e0 <decompress_onepass>
mov    %rax,0x18(%r14)
movq   $0x0,0x20(%r14)
mov    $0x1,%r15d
jmpq   1a74c <jinit_d_coef_controller+0x18c>
movslq 0xc(%rdx),%r12
movslq 0x138(%rbx),%rax
test   %eax,%eax
je     1a6c0 <jinit_d_coef_controller+0x100>
lea    (%r12,%r12,2),%r12d
mov    0x1c(%rdx),%edi
movslq 0x8(%rdx),%rsi
mov    0x8(%rbx),%rax
mov    0x28(%rax),%r14
mov    %rdx,%r15
callq  42b0 <jround_up@plt>
mov    0x20(%r15),%edi
movslq 0xc(%r15),%rsi
mov    %r15,-0x40(%rbp)
mov    %rax,%r15
callq  42b0 <jround_up@plt>
mov    %r15,%rcx
mov    %rax,%r8
mov    %r12,%r9
mov    $0x1,%r15d
mov    %r15,%rdx
mov    %rbx,%rdi
mov    %r15,%rsi
callq  *%r14
movslq %r13d,%rdx
mov    -0x38(%rbp),%rcx
mov    %rax,(%rcx,%rdx,8)
mov    -0x40(%rbp),%rax
lea    0x60(%rax),%rdx
add    $0x1,%r13d
movslq 0x38(%rbx),%rax
cmp    %r13d,%eax
jg     1a6ad <jinit_d_coef_controller+0xed>
lea    0x1223(%rip),%rax        # 1b950 <consume_data>
mov    -0x8(%rbp),%r14
mov    %rax,0x8(%r14)
lea    0x394(%rip),%rax        # 1aad0 <decompress_data>
mov    %rax,0x18(%r14)
mov    %rcx,0x20(%r14)
mov    -0x18(%rbp),%r12
mov    -0x10(%rbp),%r13
mov    0x8(%rbx),%rax
mov    (%rax),%rax
mov    %r15,%rsi
mov    %rbx,%rdi
mov    $0x80,%edx
callq  *%rax
mov    %rax,0x88(%r14)
mov    %r13,%rbx
mov    -0x30(%rbp),%r15
mov    -0x28(%rbp),%r14
mov    -0x20(%rbp),%r13
leaveq 
retq   
nopl   0x0(%rax,%rax,1)

000000000001a780 <start_iMCU_row>:
push   %rbp
mov    %rsp,%rbp
mov    0x230(%rdi),%rcx
movslq 0x1b0(%rdi),%rax
cmp    $0x1,%eax
jg     1a7b8 <start_iMCU_row+0x38>
mov    0x1a4(%rdi),%eax
add    $0xffffffff,%eax
cmp    0xb0(%rdi),%eax
ja     1a7cf <start_iMCU_row+0x4f>
mov    0x1b8(%rdi),%rax
movslq 0x48(%rax),%rax
mov    %eax,0x30(%rcx)
jmp    1a7bf <start_iMCU_row+0x3f>
movl   $0x1,0x30(%rcx)
movl   $0x0,0x28(%rcx)
movl   $0x0,0x2c(%rcx)
leaveq 
retq   
mov    0x1b8(%rdi),%rax
movslq 0xc(%rax),%rax
mov    %eax,0x30(%rcx)
jmp    1a7bf <start_iMCU_row+0x3f>
nop

000000000001a7e0 <decompress_onepass>:
push   %rbp
mov    %rsp,%rbp
sub    $0xa0,%rsp
mov    %rsi,-0x50(%rbp)
mov    %rdi,-0x80(%rbp)
mov    %rbx,-0x8(%rbp)
mov    %r12,-0x10(%rbp)
mov    %r13,-0x18(%rbp)
mov    %r14,-0x20(%rbp)
mov    %r15,-0x28(%rbp)
mov    0x230(%rdi),%r15
mov    %r15,-0x78(%rbp)
movslq 0x2c(%r15),%rax
mov    0x1d8(%rdi),%r13d
add    $0xffffffff,%r13d
mov    %r13,-0x30(%rbp)
mov    0x1a4(%rdi),%ecx
add    $0xffffffff,%ecx
mov    %rcx,-0x68(%rbp)
lea    0x38(%r15),%rdx
mov    %rdx,-0x70(%rbp)
jmp    1a8ab <decompress_onepass+0xcb>
mov    0x38(%r15),%rax
movslq 0x1e0(%rdi),%rsi
shl    $0x7,%rsi
mov    %rdx,%r12
mov    %rdi,%r14
mov    %rax,%rdi
callq  44d0 <jzero_far@plt>
mov    0x250(%r14),%rax
mov    0x8(%rax),%rax
mov    %r14,%rdi
mov    %r12,%rsi
callq  *%rax
test   %eax,%eax
je     1a90e <decompress_onepass+0x12e>
mov    0x220(%r14),%rax
cmp    0x14(%rax),%ebx
jae    1a935 <decompress_onepass+0x155>
mov    %r12,%rdx
mov    %r14,%rdi
add    $0x1,%ebx
mov    -0x88(%rbp),%rax
mov    %rbx,-0x90(%rbp)
cmp    %r13d,%ebx
jbe    1a83c <decompress_onepass+0x5c>
movl   $0x0,0x28(%r15)
add    $0x1,%eax
mov    %rax,-0x88(%rbp)
movslq 0x30(%r15),%rcx
cmp    %eax,%ecx
jg     1a947 <decompress_onepass+0x167>
mov    0xb8(%rdi),%eax
add    $0x1,%eax
mov    %eax,0xb8(%rdi)
mov    0xb0(%rdi),%eax
add    $0x1,%eax
mov    %eax,0xb0(%rdi)
mov    0x1a4(%rdi),%ecx
cmp    %eax,%ecx
ja     1a950 <decompress_onepass+0x170>
mov    0x240(%rdi),%rax
mov    0x18(%rax),%rax
callq  *%rax
mov    $0x4,%eax
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
leaveq 
retq   
mov    -0x88(%rbp),%rax
mov    %eax,0x2c(%r15)
mov    %ebx,0x28(%r15)
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
xor    %eax,%eax
leaveq 
retq   
mov    0x18(%rax),%eax
cmp    %ebx,%eax
jae    1a970 <decompress_onepass+0x190>
mov    %r12,%rdx
mov    %r14,%rdi
jmpq   1a88a <decompress_onepass+0xaa>
mov    0x28(%r15),%ebx
jmpq   1a894 <decompress_onepass+0xb4>
callq  1a780 <start_iMCU_row>
mov    $0x3,%eax
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
leaveq 
retq   
mov    %r12,%rdx
mov    %r14,%rdi
xor    %r15d,%r15d
mov    -0x68(%rbp),%r8
mov    -0x50(%rbp),%r9
mov    -0x88(%rbp),%rsi
mov    %r15,%r10
mov    %r10,%r12
jmp    1a9b2 <decompress_onepass+0x1d2>
movslq %r10d,%rax
mov    0x1b8(%rdi,%rax,8),%r14
movslq 0x30(%r14),%rax
test   %eax,%eax
jne    1a9c7 <decompress_onepass+0x1e7>
add    0x3c(%r14),%r12d
add    $0x1,%r10d
mov    -0x90(%rbp),%rbx
movslq 0x1b0(%rdi),%rax
cmp    %r10d,%eax
jg     1a990 <decompress_onepass+0x1b0>
mov    -0x78(%rbp),%r15
jmpq   1a88a <decompress_onepass+0xaa>
cmp    %r13d,%ebx
mov    0x258(%rdi),%rax
movslq 0x4(%r14),%rcx
mov    0x8(%rax,%rcx,8),%rax
mov    %rax,-0x40(%rbp)
jb     1a9e6 <decompress_onepass+0x206>
movslq 0x44(%r14),%r13
jmp    1a9ea <decompress_onepass+0x20a>
movslq 0x34(%r14),%r13
mov    %rsi,%rcx
imul   0x24(%r14),%ecx
movslq %ecx,%rcx
shl    $0x3,%rcx
movslq 0x4(%r14),%r11
add    (%r9,%r11,8),%rcx
mov    0x220(%rdi),%r9
mov    0x14(%r9),%r9d
sub    %r9d,%ebx
imul   0x40(%r14),%ebx
mov    %r10,-0x98(%rbp)
mov    %rbx,-0x58(%rbp)
mov    %r15,%r9
jmp    1aa7a <decompress_onepass+0x29a>
lea    (%r15,%r12,1),%esi
movslq %esi,%rsi
mov    (%rdx,%rsi,8),%rdx
mov    %r14,%rsi
mov    %rbx,%r8
callq  *%rax
add    0x24(%r14),%ebx
add    $0x1,%r15d
mov    -0x40(%rbp),%rax
mov    -0x48(%rbp),%rcx
mov    -0x80(%rbp),%rdi
mov    -0x70(%rbp),%rdx
cmp    %r13d,%r15d
jl     1aa24 <decompress_onepass+0x244>
mov    -0x58(%rbp),%rbx
mov    -0x38(%rbp),%r9
mov    -0x60(%rbp),%rsi
mov    -0x68(%rbp),%r8
add    0x34(%r14),%r12d
movslq 0x24(%r14),%r10
lea    (%rcx,%r10,8),%rcx
add    $0x1,%esi
add    $0x1,%r9d
xor    %r15d,%r15d
mov    %rcx,-0x48(%rbp)
movslq 0x38(%r14),%r10
cmp    %r9d,%r10d
jg     1aaa2 <decompress_onepass+0x2c2>
mov    -0x98(%rbp),%r10
mov    -0x30(%rbp),%r13
mov    -0x50(%rbp),%r9
mov    -0x88(%rbp),%rsi
jmpq   1a9a7 <decompress_onepass+0x1c7>
mov    0xb0(%rdi),%r10d
cmp    %r8d,%r10d
jae    1aab8 <decompress_onepass+0x2d8>
mov    %rsi,-0x60(%rbp)
mov    %r9,-0x38(%rbp)
jmp    1aa4f <decompress_onepass+0x26f>
cmp    0x48(%r14),%esi
jge    1aa64 <decompress_onepass+0x284>
mov    %rsi,-0x60(%rbp)
mov    %r9,-0x38(%rbp)
jmp    1aa4f <decompress_onepass+0x26f>
nopl   0x0(%rax,%rax,1)

000000000001aad0 <decompress_data>:
push   %rbp
mov    %rsp,%rbp
sub    $0x80,%rsp
mov    %r14,-0x20(%rbp)
mov    %r15,-0x28(%rbp)
mov    %rsi,-0x58(%rbp)
mov    0x230(%rdi),%rax
mov    %rax,-0x68(%rbp)
mov    0x1a4(%rdi),%eax
mov    %rax,-0x78(%rbp)
mov    %rbx,%rcx
mov    %rdi,%rbx
mov    %r13,%rdx
xor    %r14d,%r14d
jmp    1ab10 <decompress_data+0x40>
mov    %r15,%rcx
mov    %r13,%rdx
movslq 0xb4(%rbx),%rsi
movslq 0xac(%rbx),%rax
cmp    %eax,%esi
jle    1ab4b <decompress_data+0x7b>
mov    0x240(%rbx),%rax
mov    (%rax),%rax
mov    %rdx,%r13
mov    %rcx,%r15
mov    %rbx,%rdi
callq  *%rax
test   %eax,%eax
jne    1ab0a <decompress_data+0x3a>
mov    %r14,%rax
mov    %r15,%rbx
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
leaveq 
retq   
cmp    %eax,%esi
jne    1ab5d <decompress_data+0x8d>
mov    0xb8(%rbx),%eax
cmp    0xb0(%rbx),%eax
jae    1ab22 <decompress_data+0x52>
mov    0x130(%rbx),%r15
mov    -0x78(%rbp),%rax
lea    -0x1(%rax),%r13d
mov    %rcx,-0x8(%rbp)
mov    %r12,-0x10(%rbp)
mov    %rdx,-0x18(%rbp)
mov    %r13,-0x60(%rbp)
mov    -0x58(%rbp),%r12
mov    -0x68(%rbp),%rax
mov    %r14,%r8
jmp    1abfe <decompress_data+0x12e>
mov    %rbx,%rdi
mov    %r15,%rsi
mov    %r12,%rdx
mov    %r14,%r8
callq  *%r9
add    0x24(%r15),%r14d
add    $0x80,%r12
add    $0x1,%r13d
mov    -0x40(%rbp),%r9
mov    -0x50(%rbp),%rcx
mov    -0x38(%rbp),%r10
mov    0x220(%rbx),%rax
mov    0x44(%rax,%r10,4),%eax
cmp    %r13d,%eax
jae    1ab89 <decompress_data+0xb9>
mov    -0x78(%rbp),%rax
lea    0x1(%rax),%esi
movslq 0x24(%r15),%rax
lea    (%rcx,%rax,8),%rcx
mov    -0x48(%rbp),%rax
mov    -0x30(%rbp),%rdx
xor    %r14d,%r14d
mov    %rcx,-0x50(%rbp)
cmp    %esi,%edx
jg     1ac3f <decompress_data+0x16f>
mov    -0x60(%rbp),%r13
mov    -0x58(%rbp),%r12
mov    -0x68(%rbp),%rax
mov    -0x70(%rbp),%r8
add    $0x1,%r8d
add    $0x60,%r15
movslq 0x38(%rbx),%rcx
cmp    %r8d,%ecx
jg     1ac62 <decompress_data+0x192>
mov    0xb8(%rbx),%eax
add    $0x1,%eax
mov    %eax,0xb8(%rbx)
mov    0x1a4(%rbx),%ecx
cmp    %eax,%ecx
jbe    1acc8 <decompress_data+0x1f8>
mov    $0x3,%eax
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
leaveq 
retq   
mov    0x220(%rbx),%rdx
mov    0x1c(%rdx,%r10,4),%r13d
mov    %r13,%r12
shl    $0x7,%r12
movslq %esi,%rdx
add    (%rax,%rdx,8),%r12
mov    %rsi,-0x78(%rbp)
jmpq   1abb3 <decompress_data+0xe3>
movslq 0x30(%r15),%rcx
test   %ecx,%ecx
je     1abf6 <decompress_data+0x126>
movslq %r8d,%r9
mov    %r9,-0x38(%rbp)
mov    0x90(%rax,%r9,8),%rsi
mov    0xc(%r15),%ecx
mov    %rcx,%rdx
imul   0xb8(%rbx),%edx
mov    0x8(%rbx),%rax
mov    0x40(%rax),%rax
mov    %rbx,%rdi
mov    %r8,-0x70(%rbp)
mov    %r14,%r8
mov    %r9,%r14
callq  *%rax
mov    %rax,-0x48(%rbp)
mov    0xb8(%rbx),%ecx
cmp    %r13d,%ecx
jb     1ace3 <decompress_data+0x213>
mov    %rax,%rsi
mov    %r14,%r10
mov    0x20(%r15),%eax
mov    0xc(%r15),%ecx
xor    %edx,%edx
div    %ecx
test   %edx,%edx
je     1ad0d <decompress_data+0x23d>
mov    %rsi,%rax
jmp    1acea <decompress_data+0x21a>
mov    $0x4,%eax
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
leaveq 
retq   
movslq 0xc(%r15),%rdx
mov    %r14,%r10
mov    %rdx,-0x30(%rbp)
mov    0x258(%rbx),%rcx
mov    0x8(%rcx,%r10,8),%r9
mov    %r9,-0x40(%rbp)
mov    (%r12,%r10,8),%rcx
xor    %r14d,%r14d
mov    %r14,%rsi
jmpq   1abde <decompress_data+0x10e>
movslq 0xc(%r15),%rdx
mov    %rsi,%rax
jmp    1acea <decompress_data+0x21a>
nopw   %cs:0x0(%rax,%rax,1)

000000000001ad20 <smoothing_ok>:
push   %rbp
mov    %rsp,%rbp
sub    $0x20,%rsp
mov    0x230(%rdi),%rcx
xor    %eax,%eax
movslq 0x138(%rdi),%rdx
test   %edx,%edx
jne    1ad3e <smoothing_ok+0x1e>
leaveq 
retq   
mov    0xc0(%rdi),%rdx
test   %rdx,%rdx
jne    1ad4c <smoothing_ok+0x2c>
leaveq 
retq   
mov    $0x1,%r9d
mov    0xe0(%rcx),%rdx
test   %rdx,%rdx
je     1ad63 <smoothing_ok+0x43>
mov    %rax,%r11
jmp    1adc1 <smoothing_ok+0xa1>
mov    0x8(%rdi),%rdx
mov    (%rdx),%r8
movslq 0x38(%rdi),%rdx
lea    (%rdx,%rdx,2),%rdx
shl    $0x3,%rdx
mov    %rdi,%r10
mov    %r9,%rsi
mov    %r12,-0x8(%rbp)
mov    %r13,-0x10(%rbp)
mov    %r14,-0x18(%rbp)
mov    %r15,-0x20(%rbp)
mov    %rax,%r12
mov    %r9,%r13
mov    %rdi,%r14
mov    %r10,%rdi
mov    %rcx,%r15
callq  *%r8
mov    %rax,0xe0(%r15)
mov    %r15,%rcx
mov    %r14,%rdi
mov    %r13,%r9
mov    %r12,%r11
mov    -0x20(%rbp),%r15
mov    -0x18(%rbp),%r14
mov    -0x10(%rbp),%r13
mov    -0x8(%rbp),%r12
mov    0xe0(%rcx),%rsi
mov    0x130(%rdi),%rdx
add    $0x50,%rdx
mov    %r14,-0x18(%rbp)
mov    %r15,-0x20(%rbp)
mov    %r11,%rax
mov    %rax,%r10
cmp    0x38(%rdi),%r10d
jl     1adf1 <smoothing_ok+0xd1>
mov    -0x20(%rbp),%r15
mov    -0x18(%rbp),%r14
leaveq 
retq   
mov    (%rdx),%r8
test   %r8,%r8
je     1ae51 <smoothing_ok+0x131>
movzwl (%r8),%ecx
test   %cx,%cx
je     1ae5e <smoothing_ok+0x13e>
movzwl 0x2(%r8),%ecx
test   %cx,%cx
je     1ae6b <smoothing_ok+0x14b>
movzwl 0x10(%r8),%ecx
test   %cx,%cx
je     1ae78 <smoothing_ok+0x158>
movzwl 0x20(%r8),%ecx
test   %cx,%cx
je     1ae85 <smoothing_ok+0x165>
movzwl 0x12(%r8),%ecx
test   %cx,%cx
je     1ae92 <smoothing_ok+0x172>
movzwl 0x4(%r8),%ecx
test   %cx,%cx
je     1ae9f <smoothing_ok+0x17f>
movslq %r10d,%r8
shl    $0x8,%r8
add    0xc0(%rdi),%r8
movslq (%r8),%rcx
test   %ecx,%ecx
js     1aeac <smoothing_ok+0x18c>
mov    %r9,%rcx
jmpq   1aed3 <smoothing_ok+0x1b3>
mov    %r11,%rax
mov    -0x20(%rbp),%r15
mov    -0x18(%rbp),%r14
leaveq 
retq   
mov    %r11,%rax
mov    -0x20(%rbp),%r15
mov    -0x18(%rbp),%r14
leaveq 
retq   
mov    %r11,%rax
mov    -0x20(%rbp),%r15
mov    -0x18(%rbp),%r14
leaveq 
retq   
mov    %r11,%rax
mov    -0x20(%rbp),%r15
mov    -0x18(%rbp),%r14
leaveq 
retq   
mov    %r11,%rax
mov    -0x20(%rbp),%r15
mov    -0x18(%rbp),%r14
leaveq 
retq   
mov    %r11,%rax
mov    -0x20(%rbp),%r15
mov    -0x18(%rbp),%r14
leaveq 
retq   
mov    %r11,%rax
mov    -0x20(%rbp),%r15
mov    -0x18(%rbp),%r14
leaveq 
retq   
mov    %r11,%rax
mov    -0x20(%rbp),%r15
mov    -0x18(%rbp),%r14
leaveq 
retq   
movslq %ecx,%r14
movslq (%r8,%r14,4),%r15
mov    %r15d,(%rsi,%r14,4)
movslq (%r8,%r14,4),%r14
test   %r14d,%r14d
je     1aed0 <smoothing_ok+0x1b0>
mov    %r9,%rax
add    $0x1,%ecx
cmp    $0x5,%ecx
jle    1aeb9 <smoothing_ok+0x199>
add    $0x60,%rdx
add    $0x1,%r10d
add    $0x18,%rsi
jmpq   1ade1 <smoothing_ok+0xc1>
nopl   0x0(%rax)

000000000001aef0 <decompress_smooth_data>:
push   %rbp
mov    %rsp,%rbp
sub    $0x180,%rsp
mov    %r13,-0x18(%rbp)
mov    %r14,-0x20(%rbp)
mov    %r15,-0x28(%rbp)
mov    %rsi,-0x160(%rbp)
mov    %rdi,-0x170(%rbp)
mov    0x1a4(%rdi),%eax
mov    %rax,-0x180(%rbp)
mov    0x230(%rdi),%rax
mov    %rax,-0x178(%rbp)
mov    0x88(%rax),%rax
mov    %rax,-0xd8(%rbp)
xor    %r13d,%r13d
mov    %r13,-0x128(%rbp)
mov    %r12,%rcx
mov    %rbx,%r12
mov    %rdi,%r14
mov    $0x1,%ebx
mov    %rbx,-0x120(%rbp)
jmp    1af62 <decompress_smooth_data+0x72>
mov    %r15,%rcx
movslq 0xb4(%r14),%rsi
movslq 0xac(%r14),%rdx
cmp    %edx,%esi
jl     1afc7 <decompress_smooth_data+0xd7>
mov    0x240(%r14),%rax
movslq 0x24(%rax),%rax
test   %eax,%eax
jne    1afc7 <decompress_smooth_data+0xd7>
cmp    %edx,%esi
je     1aff6 <decompress_smooth_data+0x106>
mov    0x240(%r14),%rax
mov    (%rax),%rax
mov    %rcx,%r15
mov    %r14,%rdi
callq  *%rax
test   %eax,%eax
jne    1af5f <decompress_smooth_data+0x6f>
mov    %r13,%rax
mov    %r12,%rbx
mov    %r15,%r12
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
leaveq 
retq   
mov    %rbx,%rax
add    0xb8(%r14),%eax
cmp    0xb0(%r14),%eax
jae    1af87 <decompress_smooth_data+0x97>
mov    0x130(%r14),%r15
mov    -0x180(%rbp),%rax
add    $0xffffffff,%eax
mov    %rax,-0x168(%rbp)
mov    %r12,-0x8(%rbp)
mov    %rcx,-0x10(%rbp)
mov    -0x178(%rbp),%r12
mov    %r13,%r9
jmpq   1b1a7 <decompress_smooth_data+0x2b7>
movslq 0x20c(%r14),%rax
test   %eax,%eax
je     1afb4 <decompress_smooth_data+0xc4>
mov    %r13,%rax
jmp    1afb7 <decompress_smooth_data+0xc7>
movswq (%r12),%r13
movswq (%rcx),%rsi
movswq (%rax),%r11
mov    %r13,-0x58(%rbp)
mov    %r11,-0xa8(%rbp)
mov    %rsi,-0x148(%rbp)
mov    -0xc0(%rbp),%r10
movslq 0x4(%r10),%rcx
test   %ecx,%ecx
jne    1b1f6 <decompress_smooth_data+0x306>
mov    -0x150(%rbp),%rdi
mov    -0xe0(%rbp),%r8
mov    -0xd8(%rbp),%r9
movslq 0x8(%r10),%rcx
test   %ecx,%ecx
jne    1b21e <decompress_smooth_data+0x32e>
mov    -0xa0(%rbp),%r14
mov    -0xb8(%rbp),%r15
movslq 0xc(%r10),%rcx
test   %ecx,%ecx
jne    1b23f <decompress_smooth_data+0x34f>
mov    -0xf8(%rbp),%r14
movslq 0x10(%r10),%rcx
test   %ecx,%ecx
jne    1b259 <decompress_smooth_data+0x369>
movslq 0x14(%r10),%rcx
test   %ecx,%ecx
jne    1b2b4 <decompress_smooth_data+0x3c4>
mov    %r9,%rdx
mov    -0x170(%rbp),%r14
mov    %r14,%rdi
mov    -0x180(%rbp),%r15
mov    %r15,%rsi
mov    -0x38(%rbp),%rcx
mov    -0x40(%rbp),%r13
mov    %r13,%r8
mov    -0x30(%rbp),%rax
callq  *%rax
add    0x24(%r15),%r13d
mov    %r13,-0x40(%rbp)
add    $0x1,%ebx
mov    -0x148(%rbp),%rcx
mov    -0xa8(%rbp),%rdi
mov    -0x58(%rbp),%rdx
mov    -0xe8(%rbp),%r13
mov    -0xb0(%rbp),%rax
mov    -0xf0(%rbp),%r15
mov    -0xf8(%rbp),%r8
mov    -0x108(%rbp),%r9
mov    -0xd8(%rbp),%rsi
pushq  -0xa0(%rbp)
pushq  -0xb8(%rbp)
popq   -0x88(%rbp)
popq   -0x80(%rbp)
mov    %rdi,-0xb8(%rbp)
mov    %rdx,-0xa0(%rbp)
mov    0x220(%r14),%rdx
mov    0x44(%rdx,%r9,4),%edx
cmp    %ebx,%edx
jae    1b304 <decompress_smooth_data+0x414>
mov    -0x180(%rbp),%r15
movslq 0x24(%r15),%rcx
mov    -0x38(%rbp),%rax
lea    (%rax,%rcx,8),%rax
mov    %rax,-0x38(%rbp)
mov    -0x140(%rbp),%r10
mov    -0x100(%rbp),%rax
mov    -0x110(%rbp),%r8
mov    -0x130(%rbp),%rdi
mov    -0x118(%rbp),%rcx
mov    -0x138(%rbp),%rdx
xor    %r13d,%r13d
mov    $0x1,%ebx
cmp    %r10d,%edx
jg     1b368 <decompress_smooth_data+0x478>
mov    -0x158(%rbp),%r9
mov    -0x178(%rbp),%r12
mov    -0x168(%rbp),%rax
add    $0x1,%r9d
add    $0x60,%r15
mov    %r15,-0x180(%rbp)
movslq 0x38(%r14),%rcx
cmp    %r9d,%ecx
jg     1b398 <decompress_smooth_data+0x4a8>
mov    0xb8(%r14),%eax
add    $0x1,%eax
mov    %eax,0xb8(%r14)
mov    0x1a4(%r14),%ecx
cmp    %eax,%ecx
jbe    1b3cf <decompress_smooth_data+0x4df>
mov    $0x3,%eax
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
leaveq 
retq   
mov    -0xd8(%rbp),%r9
movswq 0x2(%r9),%rax
test   %ax,%ax
je     1b3ea <decompress_smooth_data+0x4fa>
mov    -0x150(%rbp),%rdi
mov    -0xe0(%rbp),%r8
jmpq   1b04d <decompress_smooth_data+0x15d>
movswq 0x10(%r9),%rax
test   %ax,%ax
je     1b43f <decompress_smooth_data+0x54f>
mov    -0xa0(%rbp),%r14
mov    -0xb8(%rbp),%r15
jmpq   1b067 <decompress_smooth_data+0x177>
movswq 0x20(%r9),%rax
test   %ax,%ax
je     1b49d <decompress_smooth_data+0x5ad>
mov    -0xf8(%rbp),%r14
jmpq   1b07a <decompress_smooth_data+0x18a>
movswq 0x12(%r9),%rax
test   %ax,%ax
jne    1b086 <decompress_smooth_data+0x196>
mov    -0x88(%rbp),%rax
lea    0x0(%r13,%rax,1),%edx
mov    -0x80(%rbp),%rax
sub    %edx,%eax
add    %r11d,%eax
movslq %eax,%rax
imul   %rdi,%rax
lea    (%rax,%rax,4),%rdx
test   %rdx,%rdx
jns    1b4ec <decompress_smooth_data+0x5fc>
mov    -0x78(%rbp),%rax
sub    %rdx,%rax
cqto   
mov    -0x70(%rbp),%r11
idiv   %r11
test   %ecx,%ecx
jg     1b51b <decompress_smooth_data+0x62b>
neg    %eax
mov    %ax,0x12(%r9)
jmpq   1b086 <decompress_smooth_data+0x196>
movswq 0x4(%r9),%rax
test   %ax,%ax
jne    1b092 <decompress_smooth_data+0x1a2>
lea    (%rsi,%r8,1),%eax
lea    (%r14,%r14,1),%edx
sub    %edx,%eax
movslq %eax,%rax
imul   %rax,%rdi
lea    (%rdi,%rdi,8),%rdx
test   %rdx,%rdx
jns    1b532 <decompress_smooth_data+0x642>
mov    -0x68(%rbp),%rax
sub    %rdx,%rax
cqto   
mov    -0x60(%rbp),%rsi
idiv   %rsi
test   %ecx,%ecx
jg     1b561 <decompress_smooth_data+0x671>
neg    %eax
mov    %ax,0x4(%r9)
jmpq   1b092 <decompress_smooth_data+0x1a2>
mov    %r13,%rdi
mov    $0x1,%edx
mov    %rcx,-0xf8(%rbp)
mov    %r8,-0xe0(%rbp)
mov    %rax,%r14
callq  4470 <jcopy_block_row@plt>
add    $0x80,%r12
lea    0x80(%r13),%rcx
mov    %rcx,-0xe8(%rbp)
lea    0x80(%r14),%rax
mov    %rax,-0xb0(%rbp)
cmp    %r15d,%ebx
jb     1b006 <decompress_smooth_data+0x116>
mov    -0xf8(%rbp),%rsi
mov    -0xa0(%rbp),%r13
mov    -0xb8(%rbp),%r11
jmpq   1b013 <decompress_smooth_data+0x123>
mov    0x220(%r14),%rdx
mov    0x1c(%rdx,%r9,4),%r13d
shl    $0x7,%r13
movslq %r10d,%rdx
add    (%rax,%rdx,8),%r13
test   %edi,%edi
jle    1b578 <decompress_smooth_data+0x688>
test   %r10d,%r10d
jne    1b578 <decompress_smooth_data+0x688>
mov    %r13,%r12
jmpq   1b583 <decompress_smooth_data+0x693>
movslq 0x30(%r15),%rcx
test   %ecx,%ecx
je     1b19f <decompress_smooth_data+0x2af>
mov    0xb8(%r14),%ecx
cmp    %eax,%ecx
jb     1b5a7 <decompress_smooth_data+0x6b7>
mov    0x20(%r15),%eax
mov    0xc(%r15),%ecx
xor    %edx,%edx
div    %ecx
test   %edx,%edx
je     1b60d <decompress_smooth_data+0x71d>
mov    %rdx,%rcx
jmpq   1b5b1 <decompress_smooth_data+0x6c1>
mov    $0x4,%eax
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
leaveq 
retq   
mov    -0xe0(%rbp),%r8
mov    %r8,%rax
sub    %esi,%eax
movslq %eax,%rax
mov    -0x150(%rbp),%rdi
imul   %rdi,%rax
lea    (%rax,%rax,8),%rdx
shl    $0x2,%rdx
test   %rdx,%rdx
jns    1b616 <decompress_smooth_data+0x726>
mov    -0xd0(%rbp),%rax
sub    %rdx,%rax
cqto   
mov    -0xc8(%rbp),%r14
idiv   %r14
test   %ecx,%ecx
jg     1b64b <decompress_smooth_data+0x75b>
neg    %eax
mov    %ax,0x2(%r9)
jmpq   1b04d <decompress_smooth_data+0x15d>
mov    -0xa0(%rbp),%r14
mov    -0xb8(%rbp),%r15
mov    %r14,%rax
sub    %r15d,%eax
movslq %eax,%rax
imul   %rdi,%rax
lea    (%rax,%rax,8),%rdx
shl    $0x2,%rdx
test   %rdx,%rdx
jns    1b662 <decompress_smooth_data+0x772>
mov    -0x50(%rbp),%rax
sub    %rdx,%rax
mov    %r12,-0xe0(%rbp)
cqto   
mov    -0x48(%rbp),%r12
idiv   %r12
test   %ecx,%ecx
jg     1b698 <decompress_smooth_data+0x7a8>
neg    %eax
mov    %ax,0x10(%r9)
mov    -0xe0(%rbp),%r12
jmpq   1b067 <decompress_smooth_data+0x177>
lea    (%r15,%r14,1),%eax
mov    -0xf8(%rbp),%r14
lea    (%r14,%r14,1),%edx
sub    %edx,%eax
movslq %eax,%rax
imul   %rdi,%rax
lea    (%rax,%rax,8),%rdx
test   %rdx,%rdx
jns    1b6af <decompress_smooth_data+0x7bf>
mov    -0x98(%rbp),%rax
sub    %rdx,%rax
cqto   
mov    -0x90(%rbp),%r15
idiv   %r15
test   %ecx,%ecx
jg     1b6e4 <decompress_smooth_data+0x7f4>
neg    %eax
mov    %ax,0x20(%r9)
jmpq   1b07a <decompress_smooth_data+0x18a>
mov    -0x78(%rbp),%rax
add    %rdx,%rax
cqto   
mov    -0x70(%rbp),%r11
idiv   %r11
test   %ecx,%ecx
jle    1b2aa <decompress_smooth_data+0x3ba>
mov    $0x1,%edx
shl    %cl,%edx
cmp    %eax,%edx
jg     1b2aa <decompress_smooth_data+0x3ba>
lea    -0x1(%rdx),%eax
jmpq   1b2aa <decompress_smooth_data+0x3ba>
mov    $0x1,%edx
shl    %cl,%edx
cmp    %eax,%edx
jg     1b2a8 <decompress_smooth_data+0x3b8>
lea    -0x1(%rdx),%eax
jmpq   1b2a8 <decompress_smooth_data+0x3b8>
mov    -0x68(%rbp),%rax
add    %rdx,%rax
cqto   
mov    -0x60(%rbp),%rsi
idiv   %rsi
test   %ecx,%ecx
jle    1b2fa <decompress_smooth_data+0x40a>
mov    $0x1,%edx
shl    %cl,%edx
cmp    %eax,%edx
jg     1b2fa <decompress_smooth_data+0x40a>
lea    -0x1(%rdx),%eax
jmpq   1b2fa <decompress_smooth_data+0x40a>
mov    $0x1,%edx
shl    %cl,%edx
cmp    %eax,%edx
jg     1b2f8 <decompress_smooth_data+0x408>
lea    -0x1(%rdx),%eax
jmpq   1b2f8 <decompress_smooth_data+0x408>
lea    -0x1(%r10),%edx
movslq %edx,%rdx
mov    (%rax,%rdx,8),%r12
test   %ecx,%ecx
lea    0x1(%r10),%ecx
mov    %rcx,-0x140(%rbp)
jle    1b6fb <decompress_smooth_data+0x80b>
cmp    %r8d,%r10d
jne    1b6fb <decompress_smooth_data+0x80b>
mov    %r13,%rax
jmpq   1b702 <decompress_smooth_data+0x812>
movslq 0xc(%r15),%rdx
lea    (%rdx,%rdx,1),%ecx
mov    %r13,%rbx
mov    %rdx,-0x138(%rbp)
mov    %rbx,-0x118(%rbp)
movslq %r9d,%rbx
mov    %rbx,-0x108(%rbp)
mov    0xb8(%r14),%eax
test   %eax,%eax
jne    1b747 <decompress_smooth_data+0x857>
mov    0x90(%r12,%rbx,8),%rsi
mov    0x8(%r14),%rax
mov    0x40(%rax),%rax
mov    %r13,%rdx
mov    %rbx,%r13
mov    %r9,%rbx
mov    %rdx,%r8
mov    %r14,%rdi
callq  *%rax
mov    %r13,%r9
pushq  -0x120(%rbp)
popq   -0x130(%rbp)
jmpq   1b78b <decompress_smooth_data+0x89b>
movslq 0xc(%r15),%rdx
mov    %rdx,%rcx
jmp    1b5b1 <decompress_smooth_data+0x6c1>
mov    -0xd0(%rbp),%rax
add    %rdx,%rax
cqto   
mov    -0xc8(%rbp),%r14
idiv   %r14
test   %ecx,%ecx
jle    1b435 <decompress_smooth_data+0x545>
mov    $0x1,%edx
shl    %cl,%edx
cmp    %eax,%edx
jg     1b435 <decompress_smooth_data+0x545>
lea    -0x1(%rdx),%eax
jmpq   1b435 <decompress_smooth_data+0x545>
mov    $0x1,%edx
shl    %cl,%edx
cmp    %eax,%edx
jg     1b433 <decompress_smooth_data+0x543>
lea    -0x1(%rdx),%eax
jmpq   1b433 <decompress_smooth_data+0x543>
mov    -0x50(%rbp),%rax
add    %rdx,%rax
mov    %r12,-0xe0(%rbp)
cqto   
mov    -0x48(%rbp),%r12
idiv   %r12
test   %ecx,%ecx
jle    1b48c <decompress_smooth_data+0x59c>
mov    $0x1,%edx
shl    %cl,%edx
cmp    %eax,%edx
jg     1b48c <decompress_smooth_data+0x59c>
lea    -0x1(%rdx),%eax
jmpq   1b48c <decompress_smooth_data+0x59c>
mov    $0x1,%edx
shl    %cl,%edx
cmp    %eax,%edx
jg     1b48a <decompress_smooth_data+0x59a>
lea    -0x1(%rdx),%eax
jmpq   1b48a <decompress_smooth_data+0x59a>
mov    -0x98(%rbp),%rax
add    %rdx,%rax
cqto   
mov    -0x90(%rbp),%r15
idiv   %r15
test   %ecx,%ecx
jle    1b4e2 <decompress_smooth_data+0x5f2>
mov    $0x1,%edx
shl    %cl,%edx
cmp    %eax,%edx
jg     1b4e2 <decompress_smooth_data+0x5f2>
lea    -0x1(%rdx),%eax
jmpq   1b4e2 <decompress_smooth_data+0x5f2>
mov    $0x1,%edx
shl    %cl,%edx
cmp    %eax,%edx
jg     1b4e0 <decompress_smooth_data+0x5f0>
lea    -0x1(%rdx),%eax
jmpq   1b4e0 <decompress_smooth_data+0x5f0>
movslq %ecx,%rcx
mov    (%rax,%rcx,8),%rax
movswq (%r12),%rdx
mov    %rdx,-0x80(%rbp)
movswq 0x0(%r13),%rcx
movswq (%rax),%rdi
mov    %rdi,-0x88(%rbp)
mov    0x220(%r14),%rbx
mov    0x1c(%rbx,%r9,4),%ebx
mov    0x1c(%r15),%r15d
add    $0xffffffff,%r15d
mov    %r15,-0xf0(%rbp)
mov    %rcx,%r8
pushq  -0x128(%rbp)
popq   -0x40(%rbp)
jmpq   1b116 <decompress_smooth_data+0x226>
mov    0x90(%r12,%rbx,8),%rsi
movslq 0xc(%r15),%rdi
add    $0xffffffff,%eax
mov    %rdi,%rdx
imul   %eax,%edx
add    %edi,%ecx
mov    0x8(%r14),%rax
mov    0x40(%rax),%rax
mov    %r13,%r8
mov    %rbx,%r13
mov    %r9,%rbx
mov    %r14,%rdi
callq  *%rax
movslq 0xc(%r15),%rcx
lea    (%rax,%rcx,8),%rax
mov    %r13,%r9
pushq  -0x128(%rbp)
popq   -0x130(%rbp)
mov    %rax,-0x100(%rbp)
lea    (%rbx,%rbx,2),%ecx
add    %ecx,%ecx
movslq %ecx,%rcx
shl    $0x2,%rcx
add    0xe0(%r12),%rcx
mov    %rcx,-0xc0(%rbp)
mov    0x258(%r14),%rcx
mov    0x8(%rcx,%r9,8),%rcx
mov    %rcx,-0x30(%rbp)
mov    0x50(%r15),%rsi
movzwl (%rsi),%ecx
mov    %rcx,-0x150(%rbp)
mov    -0x160(%rbp),%rcx
mov    (%rcx,%r9,8),%rcx
mov    %rcx,-0x38(%rbp)
movzwl 0x2(%rsi),%ecx
mov    %rcx,%rdx
shl    $0x7,%rdx
mov    %rdx,-0xd0(%rbp)
shl    $0x8,%rcx
mov    %rcx,-0xc8(%rbp)
movzwl 0x4(%rsi),%ecx
mov    %rcx,%rdx
shl    $0x7,%rdx
mov    %rdx,-0x68(%rbp)
shl    $0x8,%rcx
mov    %rbx,-0x158(%rbp)
mov    %rcx,-0x60(%rbp)
movzwl 0x10(%rsi),%ecx
mov    %rcx,%rdx
shl    $0x7,%rdx
mov    %rdx,-0x50(%rbp)
shl    $0x8,%rcx
mov    %rcx,-0x48(%rbp)
movzwl 0x20(%rsi),%ecx
mov    %rcx,%rdx
shl    $0x7,%rdx
mov    %rdx,-0x98(%rbp)
shl    $0x8,%rcx
mov    %rcx,-0x90(%rbp)
movzwl 0x12(%rsi),%ecx
mov    %rcx,%rdx
shl    $0x7,%rdx
mov    %rdx,-0x78(%rbp)
shl    $0x8,%rcx
mov    %rcx,-0x70(%rbp)
mov    -0x138(%rbp),%rdx
lea    -0x1(%rdx),%r8d
mov    %r8,-0x110(%rbp)
mov    -0x130(%rbp),%rdi
mov    -0x118(%rbp),%rcx
xor    %r13d,%r13d
mov    $0x1,%ebx
mov    -0xd8(%rbp),%rsi
mov    %r13,%r10
jmpq   1b181 <decompress_smooth_data+0x291>
nopw   0x0(%rax,%rax,1)

000000000001b8a0 <start_input_pass>:
push   %rbp
mov    %rsp,%rbp
movl   $0x0,0xb0(%rdi)
callq  1a780 <start_iMCU_row>
leaveq 
retq   
data16 nopw %cs:0x0(%rax,%rax,1)

000000000001b8c0 <start_output_pass>:
push   %rbp
mov    %rsp,%rbp
sub    $0x10,%rsp
mov    0x230(%rdi),%rax
mov    0x20(%rax),%rcx
test   %rcx,%rcx
jne    1b8e4 <start_output_pass+0x24>
movl   $0x0,0xb8(%rdi)
leaveq 
retq   
movslq 0x68(%rdi),%rcx
test   %ecx,%ecx
jne    1b8f9 <start_output_pass+0x39>
lea    -0xe23(%rip),%rcx        # 1aad0 <decompress_data>
mov    %rcx,0x18(%rax)
jmp    1b8d8 <start_output_pass+0x18>
mov    %rdi,%rcx
mov    %r14,-0x8(%rbp)
mov    %r15,-0x10(%rbp)
mov    %rax,%r14
mov    %rdi,%r15
mov    %rcx,%rdi
callq  1ad20 <smoothing_ok>
test   %eax,%eax
jne    1b926 <start_output_pass+0x66>
mov    %r14,%rax
mov    %r15,%rdi
mov    -0x10(%rbp),%r15
mov    -0x8(%rbp),%r14
jmp    1b8ec <start_output_pass+0x2c>
lea    -0xa3d(%rip),%rax        # 1aef0 <decompress_smooth_data>
mov    %rax,0x18(%r14)
mov    %r15,%rdi
mov    -0x10(%rbp),%r15
mov    -0x8(%rbp),%r14
jmp    1b8d8 <start_output_pass+0x18>
xchg   %ax,%ax

000000000001b940 <dummy_consume_data>:
push   %rbp
mov    %rsp,%rbp
xor    %eax,%eax
leaveq 
retq   
nopl   0x0(%rax,%rax,1)

000000000001b950 <consume_data>:
push   %rbp
mov    %rsp,%rbp
sub    $0x50,%rsp
mov    %rbx,-0x8(%rbp)
mov    %r12,-0x10(%rbp)
mov    %r13,-0x18(%rbp)
mov    %r14,-0x20(%rbp)
mov    %r15,-0x28(%rbp)
mov    0x230(%rdi),%rbx
mov    %rbx,-0x30(%rbp)
mov    %rdi,%r12
xor    %r13d,%r13d
mov    $0x1,%r14d
jmp    1b9c5 <consume_data+0x75>
movslq %r13d,%r15
mov    0x1b8(%r12,%r15,8),%rcx
movslq 0x4(%rcx),%rax
mov    0x90(%rbx,%rax,8),%rsi
mov    0xc(%rcx),%ecx
mov    %rcx,%rdx
imul   0xb0(%r12),%edx
mov    0x8(%r12),%rax
mov    0x40(%rax),%rax
mov    %r12,%rdi
mov    %r14,%r8
callq  *%rax
mov    %rax,-0x50(%rbp,%r15,8)
add    $0x1,%r13d
movslq 0x1b0(%r12),%rax
cmp    %r13d,%eax
jg     1b985 <consume_data+0x35>
movslq 0x2c(%rbx),%r14
lea    0x38(%rbx),%r15
xor    %r13d,%r13d
jmpq   1ba63 <consume_data+0x113>
movslq %ecx,%rdi
mov    %rdx,(%r15,%rdi,8)
add    $0x80,%rdx
add    $0x1,%ecx
add    $0x1,%esi
movslq 0x34(%r10),%rdi
cmp    %esi,%edi
jg     1b9e2 <consume_data+0x92>
add    $0x1,%ebx
movslq 0x38(%r10),%rdx
cmp    %ebx,%edx
jg     1babf <consume_data+0x16f>
add    $0x1,%r8d
movslq 0x1b0(%r12),%rdx
cmp    %r8d,%edx
jg     1bada <consume_data+0x18a>
mov    0x250(%r12),%rcx
mov    0x8(%rcx),%rcx
mov    %rax,%rbx
mov    %r12,%rdi
mov    %r15,%rsi
callq  *%rcx
test   %eax,%eax
je     1bafc <consume_data+0x1ac>
lea    0x1(%rbx),%eax
mov    0x1d8(%r12),%ecx
cmp    %eax,%ecx
ja     1bb20 <consume_data+0x1d0>
mov    -0x30(%rbp),%rbx
movl   $0x0,0x28(%rbx)
add    $0x1,%r14d
movslq 0x30(%rbx),%rax
cmp    %r14d,%eax
jg     1bb2b <consume_data+0x1db>
mov    0xb0(%r12),%eax
add    $0x1,%eax
mov    %eax,0xb0(%r12)
mov    0x1a4(%r12),%ecx
cmp    %eax,%ecx
ja     1bb33 <consume_data+0x1e3>
mov    0x240(%r12),%rax
mov    0x18(%rax),%rax
mov    %r12,%rdi
callq  *%rax
mov    $0x4,%eax
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
leaveq 
retq   
lea    (%r14,%rbx,1),%edx
movslq %edx,%rdx
mov    -0x50(%rbp,%r11,8),%rsi
mov    (%rsi,%rdx,8),%rdx
add    %r9,%rdx
mov    %r13,%rsi
jmpq   1b9f6 <consume_data+0xa6>
movslq %r8d,%r11
mov    0x1b8(%r12,%r11,8),%r10
mov    %rax,%rdx
imul   0x34(%r10),%edx
mov    %edx,%r9d
shl    $0x7,%r9
mov    %r13,%rbx
jmpq   1ba01 <consume_data+0xb1>
mov    -0x30(%rbp),%rax
mov    %r14d,0x2c(%rax)
mov    %ebx,0x28(%rax)
mov    %r13,%rax
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
leaveq 
retq   
mov    %r13,%rcx
mov    %rcx,%r8
jmpq   1ba11 <consume_data+0xc1>
mov    0x28(%rbx),%eax
jmpq   1ba44 <consume_data+0xf4>
mov    %r12,%rdi
callq  1a780 <start_iMCU_row>
mov    $0x3,%eax
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
leaveq 
retq   
nopw   %cs:0x0(%rax,%rax,1)

000000000001bb60 <jinit_color_deconverter>:
push   %rbp
mov    %rsp,%rbp
sub    $0x20,%rsp
mov    %r15,-0x20(%rbp)
mov    0x8(%rdi),%rax
mov    (%rax),%rax
mov    $0x1,%esi
mov    $0x38,%edx
mov    %rdi,%r15
callq  *%rax
mov    %rax,0x268(%r15)
lea    0x3840(%rip),%rcx        # 1f3d0 <start_pass_dcolor>
mov    %rcx,(%rax)
mov    0x3c(%r15),%ecx
add    $0xffffffff,%ecx
cmp    $0x4,%ecx
ja     1bbaf <jinit_color_deconverter+0x4f>
lea    0x3db7a(%rip),%rdx        # 59720 <mybuffer.5+0x8>
movslq (%rdx,%rcx,4),%rcx
add    %rdx,%rcx
jmpq   *%rcx
movslq 0x38(%r15),%rcx
test   %ecx,%ecx
jg     1bbda <jinit_color_deconverter+0x7a>
mov    (%r15),%rcx
movl   $0xa,0x28(%rcx)
mov    (%r15),%rcx
mov    (%rcx),%rcx
mov    %r15,%rdi
mov    %r14,-0x18(%rbp)
mov    %rax,%r14
callq  *%rcx
mov    %r14,%rax
mov    -0x18(%rbp),%r14
lea    0x158f(%rip),%rsi        # 1d170 <null_convert>
mov    0x40(%r15),%edi
lea    -0x1(%rdi),%ecx
cmp    $0xf,%ecx
ja     1bcd7 <jinit_color_deconverter+0x177>
lea    0x3db3c(%rip),%rdx        # 59734 <mybuffer.5+0x1c>
movslq (%rdx,%rcx,4),%rcx
add    %rdx,%rcx
jmpq   *%rcx
movl   $0x4,0x90(%r15)
mov    0x3c(%r15),%ecx
cmp    $0x5,%ecx
je     1bdd4 <jinit_color_deconverter+0x274>
cmp    $0x4,%ecx
je     1bde9 <jinit_color_deconverter+0x289>
mov    (%r15),%rax
movl   $0x1b,0x28(%rax)
mov    (%r15),%rax
mov    (%rax),%rax
mov    %r15,%rdi
callq  *%rax
jmpq   1bdfe <jinit_color_deconverter+0x29e>
movslq 0x38(%r15),%rcx
cmp    $0x1,%ecx
je     1bbda <jinit_color_deconverter+0x7a>
mov    (%r15),%rcx
movl   $0xa,0x28(%rcx)
mov    (%r15),%rcx
mov    (%rcx),%rcx
mov    %r15,%rdi
mov    %r14,-0x10(%rbp)
mov    %rax,%r14
callq  *%rcx
mov    %r14,%rax
mov    -0x10(%rbp),%r14
jmpq   1bbda <jinit_color_deconverter+0x7a>
movslq 0x38(%r15),%rcx
cmp    $0x3,%ecx
je     1bbda <jinit_color_deconverter+0x7a>
mov    (%r15),%rcx
movl   $0xa,0x28(%rcx)
mov    (%r15),%rcx
mov    (%rcx),%rcx
mov    %r15,%rdi
mov    %r14,-0x10(%rbp)
mov    %rax,%r14
callq  *%rcx
mov    %r14,%rax
mov    -0x10(%rbp),%r14
jmpq   1bbda <jinit_color_deconverter+0x7a>
movslq 0x38(%r15),%rcx
cmp    $0x4,%ecx
je     1bbda <jinit_color_deconverter+0x7a>
mov    (%r15),%rcx
movl   $0xa,0x28(%rcx)
mov    (%r15),%rcx
mov    (%rcx),%rcx
mov    %r15,%rdi
mov    %r14,-0x18(%rbp)
mov    %rax,%r14
callq  *%rcx
mov    %r14,%rax
mov    -0x18(%rbp),%r14
jmpq   1bbda <jinit_color_deconverter+0x7a>
cmp    0x3c(%r15),%edi
je     1bdef <jinit_color_deconverter+0x28f>
mov    (%r15),%rax
movl   $0x1b,0x28(%rax)
mov    (%r15),%rax
mov    (%rax),%rax
mov    %r15,%rdi
callq  *%rax
jmpq   1bdfe <jinit_color_deconverter+0x29e>
movl   $0x1,0x90(%r15)
mov    0x3c(%r15),%ecx
cmp    $0x1,%ecx
je     1be1e <jinit_color_deconverter+0x2be>
cmp    $0x3,%ecx
je     1be1e <jinit_color_deconverter+0x2be>
cmp    $0x2,%ecx
je     1be33 <jinit_color_deconverter+0x2d3>
mov    (%r15),%rax
movl   $0x1b,0x28(%rax)
mov    (%r15),%rax
mov    (%rax),%rax
mov    %r15,%rdi
callq  *%rax
jmpq   1bdfe <jinit_color_deconverter+0x29e>
lea    0x3db72(%rip),%rcx        # 598b8 <rgb_pixelsize>
movslq (%rcx,%rdi,4),%rdx
mov    %edx,0x90(%r15)
mov    0x3c(%r15),%ecx
cmp    $0x3,%ecx
je     1be48 <jinit_color_deconverter+0x2e8>
cmp    $0x1,%ecx
je     1be75 <jinit_color_deconverter+0x315>
cmp    $0x2,%ecx
je     1be85 <jinit_color_deconverter+0x325>
mov    (%r15),%rax
movl   $0x1b,0x28(%rax)
mov    (%r15),%rax
mov    (%rax),%rax
mov    %r15,%rdi
callq  *%rax
jmp    1bdfe <jinit_color_deconverter+0x29e>
movl   $0x3,0x90(%r15)
mov    0x70(%r15),%ecx
test   %ecx,%ecx
je     1bed2 <jinit_color_deconverter+0x372>
mov    0x3c(%r15),%ecx
cmp    $0x3,%ecx
je     1bf0b <jinit_color_deconverter+0x3ab>
cmp    $0x1,%ecx
je     1bf23 <jinit_color_deconverter+0x3c3>
cmp    $0x2,%ecx
je     1bf33 <jinit_color_deconverter+0x3d3>
mov    (%r15),%rax
movl   $0x1b,0x28(%rax)
mov    (%r15),%rax
mov    (%rax),%rax
mov    %r15,%rdi
callq  *%rax
jmp    1bdfe <jinit_color_deconverter+0x29e>
lea    0x1605(%rip),%rcx        # 1d3e0 <ycck_cmyk_convert>
mov    %rcx,0x8(%rax)
mov    %r15,%rdi
callq  1ce90 <build_ycc_rgb_table>
jmp    1bdfe <jinit_color_deconverter+0x29e>
mov    %rsi,0x8(%rax)
jmp    1bdfe <jinit_color_deconverter+0x29e>
movslq 0x38(%r15),%rcx
mov    %ecx,0x90(%r15)
mov    %rsi,0x8(%rax)
movslq 0x6c(%r15),%rax
test   %eax,%eax
jne    1bf43 <jinit_color_deconverter+0x3e3>
movslq 0x90(%r15),%rax
mov    %eax,0x94(%r15)
mov    -0x20(%rbp),%r15
leaveq 
retq   
lea    0x14eb(%rip),%rcx        # 1d310 <grayscale_convert>
mov    %rcx,0x8(%rax)
mov    $0x1,%eax
jmpq   1bf71 <jinit_color_deconverter+0x411>
lea    0x1276(%rip),%rcx        # 1d0b0 <rgb_gray_convert>
mov    %rcx,0x8(%rax)
mov    %r15,%rdi
callq  1d000 <build_rgb_y_table>
jmp    1bdfe <jinit_color_deconverter+0x29e>
mov    %r14,-0x8(%rbp)
mov    %rax,%r14
callq  3d530 <jsimd_can_ycc_rgb>
test   %eax,%eax
jne    1bf7e <jinit_color_deconverter+0x41e>
lea    0x114d(%rip),%rax        # 1cfb0 <ycc_rgb_convert>
mov    %rax,0x8(%r14)
mov    %r15,%rdi
callq  1ce90 <build_ycc_rgb_table>
mov    -0x8(%rbp),%r14
jmp    1bdfe <jinit_color_deconverter+0x29e>
lea    0x14c4(%rip),%rcx        # 1d340 <gray_rgb_convert>
mov    %rcx,0x8(%rax)
jmpq   1bdfe <jinit_color_deconverter+0x29e>
lea    0x3d960(%rip),%rcx        # 597ec <rgb_red>
movslq (%rcx,%rdi,4),%rcx
test   %ecx,%ecx
jne    1bf92 <jinit_color_deconverter+0x432>
lea    0x3d991(%rip),%rcx        # 59830 <rgb_green>
movslq (%rcx,%rdi,4),%rcx
cmp    $0x1,%ecx
jne    1bf92 <jinit_color_deconverter+0x432>
lea    0x3d9c1(%rip),%rcx        # 59874 <rgb_blue>
movslq (%rcx,%rdi,4),%rcx
cmp    $0x2,%ecx
jne    1bf92 <jinit_color_deconverter+0x432>
cmp    $0x3,%edx
jne    1bf92 <jinit_color_deconverter+0x432>
mov    %rsi,0x8(%rax)
jmpq   1bdfe <jinit_color_deconverter+0x29e>
mov    0x3c(%r15),%ecx
cmp    $0x3,%ecx
je     1bfa2 <jinit_color_deconverter+0x442>
cmp    $0x1,%ecx
je     1bfce <jinit_color_deconverter+0x46e>
cmp    $0x2,%ecx
je     1bfde <jinit_color_deconverter+0x47e>
mov    (%r15),%rax
movl   $0x1b,0x28(%rax)
mov    (%r15),%rax
mov    (%rax),%rax
mov    %r15,%rdi
callq  *%rax
jmpq   1bdfe <jinit_color_deconverter+0x29e>
lea    0x31ee(%rip),%rcx        # 1f100 <ycc_rgb565D_convert>
mov    %rcx,0x8(%rax)
mov    %r15,%rdi
callq  1ce90 <build_ycc_rgb_table>
jmpq   1bdfe <jinit_color_deconverter+0x29e>
lea    0x3416(%rip),%rcx        # 1f340 <gray_rgb565D_convert>
mov    %rcx,0x8(%rax)
jmpq   1bdfe <jinit_color_deconverter+0x29e>
lea    0x32e6(%rip),%rcx        # 1f220 <rgb_rgb565D_convert>
mov    %rcx,0x8(%rax)
jmpq   1bdfe <jinit_color_deconverter+0x29e>
movl   $0x1,0x94(%r15)
mov    -0x20(%rbp),%r15
leaveq 
retq   
mov    0x130(%r15),%rdx
movslq %eax,%rcx
lea    (%rcx,%rcx,2),%rcx
shl    $0x5,%rcx
movl   $0x0,0x30(%rdx,%rcx,1)
add    $0x1,%eax
movslq 0x38(%r15),%rcx
cmp    %eax,%ecx
jg     1bf54 <jinit_color_deconverter+0x3f4>
jmpq   1bdfe <jinit_color_deconverter+0x29e>
lea    0x216db(%rip),%rax        # 3d660 <jsimd_ycc_rgb_convert>
mov    %rax,0x8(%r14)
mov    -0x8(%rbp),%r14
jmpq   1bdfe <jinit_color_deconverter+0x29e>
lea    0x13f7(%rip),%rcx        # 1d390 <rgb_rgb_convert>
mov    %rcx,0x8(%rax)
jmpq   1bdfe <jinit_color_deconverter+0x29e>
mov    %r14,-0x8(%rbp)
mov    %rax,%r14
callq  3d570 <jsimd_can_ycc_rgb565>
test   %eax,%eax
jne    1bfee <jinit_color_deconverter+0x48e>
lea    0x30b7(%rip),%rax        # 1f070 <ycc_rgb565_convert>
mov    %rax,0x8(%r14)
mov    %r15,%rdi
callq  1ce90 <build_ycc_rgb_table>
mov    -0x8(%rbp),%r14
jmpq   1bdfe <jinit_color_deconverter+0x29e>
lea    0x32db(%rip),%rcx        # 1f2b0 <gray_rgb565_convert>
mov    %rcx,0x8(%rax)
jmpq   1bdfe <jinit_color_deconverter+0x29e>
lea    0x31ab(%rip),%rcx        # 1f190 <rgb_rgb565_convert>
mov    %rcx,0x8(%rax)
jmpq   1bdfe <jinit_color_deconverter+0x29e>
lea    0x216db(%rip),%rax        # 3d6d0 <jsimd_ycc_rgb565_convert>
mov    %rax,0x8(%r14)
mov    -0x8(%rbp),%r14
jmpq   1bdfe <jinit_color_deconverter+0x29e>
data16 nopw %cs:0x0(%rax,%rax,1)
nopl   (%rax)

000000000001c010 <ycc_rgb_convert_internal>:
push   %rbp
mov    %rsp,%rbp
sub    $0x50,%rsp
mov    %r15,-0x48(%rbp)
mov    %r14,-0x40(%rbp)
mov    %rsi,-0x18(%rbp)
mov    %rbx,-0x28(%rbp)
mov    %r12,-0x30(%rbp)
mov    %r13,-0x38(%rbp)
mov    0x88(%rdi),%r13d
mov    0x1a8(%rdi),%r14
mov    0x268(%rdi),%rdi
mov    0x10(%rdi),%rax
mov    %rax,-0x10(%rbp)
mov    0x18(%rdi),%r11
mov    0x20(%rdi),%r9
mov    0x28(%rdi),%r15
xor    %edi,%edi
jmp    1c0cf <ycc_rgb_convert_internal+0xbf>
mov    %edi,%r8d
movzbl (%r12,%r8,1),%ecx
movzbl (%rbx,%r8,1),%edx
mov    (%rax,%rdx,4),%eax
add    %ecx,%eax
movslq %eax,%rax
movzbl (%rax,%r14,1),%eax
movzbl (%r10,%r8,1),%r8d
mov    %al,(%rsi)
mov    (%r9,%rdx,8),%rax
add    (%r15,%r8,8),%rax
sar    $0x10,%rax
add    %ecx,%eax
movslq %eax,%rax
movzbl (%rax,%r14,1),%eax
mov    %al,0x1(%rsi)
add    (%r11,%r8,4),%ecx
movslq %ecx,%rax
movzbl (%rax,%r14,1),%eax
mov    %al,0x2(%rsi)
add    $0x1,%edi
add    $0x3,%rsi
mov    -0x10(%rbp),%rax
cmp    %r13d,%edi
jb     1c05d <ycc_rgb_convert_internal+0x4d>
mov    -0x20(%rbp),%rcx
lea    0x1(%rcx),%edx
mov    -0x8(%rbp),%rcx
add    $0x8,%rcx
xor    %edi,%edi
mov    -0x50(%rbp),%r8
mov    -0x18(%rbp),%rsi
add    $0xffffffff,%r8d
test   %r8d,%r8d
jns    1c0ee <ycc_rgb_convert_internal+0xde>
mov    -0x38(%rbp),%r13
mov    -0x30(%rbp),%r12
mov    -0x28(%rbp),%rbx
mov    -0x40(%rbp),%r14
mov    -0x48(%rbp),%r15
leaveq 
retq   
mov    (%rsi),%r10
mov    %edx,%ebx
mov    (%r10,%rbx,8),%r12
mov    0x8(%rsi),%r10
mov    (%r10,%rbx,8),%r10
mov    0x10(%rsi),%rsi
mov    (%rsi,%rbx,8),%rbx
mov    (%rcx),%rsi
mov    %rdx,-0x20(%rbp)
mov    %rcx,-0x8(%rbp)
mov    %r8,-0x50(%rbp)
jmp    1c0b1 <ycc_rgb_convert_internal+0xa1>
nopl   0x0(%rax,%rax,1)

000000000001c120 <gray_rgb_convert_internal>:
push   %rbp
mov    %rsp,%rbp
sub    $0x10,%rsp
mov    %r15,-0x8(%rbp)
mov    0x88(%rdi),%r9d
xor    %r10d,%r10d
jmp    1c15e <gray_rgb_convert_internal+0x3e>
mov    %edi,%r11d
movzbl (%r15,%r11,1),%r11d
mov    %r11b,0x2(%rax)
mov    %r11b,0x1(%rax)
mov    %r11b,(%rax)
add    $0x1,%edi
add    $0x3,%rax
cmp    %r9d,%edi
jb     1c138 <gray_rgb_convert_internal+0x18>
add    $0x1,%edx
add    $0x8,%rcx
add    $0xffffffff,%r8d
test   %r8d,%r8d
jns    1c16d <gray_rgb_convert_internal+0x4d>
mov    -0x8(%rbp),%r15
leaveq 
retq   
mov    (%rsi),%rax
mov    %edx,%edi
mov    (%rax,%rdi,8),%r15
mov    (%rcx),%rax
mov    %r10,%rdi
jmp    1c152 <gray_rgb_convert_internal+0x32>
xchg   %ax,%ax

000000000001c180 <rgb_rgb_convert_internal>:
push   %rbp
mov    %rsp,%rbp
sub    $0x20,%rsp
mov    %r12,-0x8(%rbp)
mov    %r13,-0x10(%rbp)
mov    %r14,-0x18(%rbp)
mov    %r15,-0x20(%rbp)
mov    0x88(%rdi),%r9d
xor    %r10d,%r10d
jmp    1c1d4 <rgb_rgb_convert_internal+0x54>
mov    %edi,%r13d
movzbl (%r14,%r13,1),%r12d
mov    %r12b,(%rax)
movzbl (%r11,%r13,1),%r12d
mov    %r12b,0x1(%rax)
movzbl (%r15,%r13,1),%r12d
mov    %r12b,0x2(%rax)
add    $0x1,%edi
add    $0x3,%rax
cmp    %r9d,%edi
jb     1c1a4 <rgb_rgb_convert_internal+0x24>
add    $0x1,%edx
add    $0x8,%rcx
add    $0xffffffff,%r8d
test   %r8d,%r8d
jns    1c1ef <rgb_rgb_convert_internal+0x6f>
mov    -0x20(%rbp),%r15
mov    -0x18(%rbp),%r14
mov    -0x10(%rbp),%r13
mov    -0x8(%rbp),%r12
leaveq 
retq   
mov    (%rsi),%rax
mov    %edx,%edi
mov    (%rax,%rdi,8),%r14
mov    0x8(%rsi),%rax
mov    (%rax,%rdi,8),%r11
mov    0x10(%rsi),%rax
mov    (%rax,%rdi,8),%r15
mov    (%rcx),%rax
mov    %r10,%rdi
jmp    1c1c8 <rgb_rgb_convert_internal+0x48>

000000000001c210 <ycc_extrgb_convert_internal>:
push   %rbp
mov    %rsp,%rbp
sub    $0x50,%rsp
mov    %r15,-0x48(%rbp)
mov    %r14,-0x40(%rbp)
mov    %rsi,-0x18(%rbp)
mov    %rbx,-0x28(%rbp)
mov    %r12,-0x30(%rbp)
mov    %r13,-0x38(%rbp)
mov    0x88(%rdi),%r13d
mov    0x1a8(%rdi),%r14
mov    0x268(%rdi),%rdi
mov    0x10(%rdi),%rax
mov    %rax,-0x10(%rbp)
mov    0x18(%rdi),%r11
mov    0x20(%rdi),%r9
mov    0x28(%rdi),%r15
xor    %edi,%edi
jmp    1c2cf <ycc_extrgb_convert_internal+0xbf>
mov    %edi,%r8d
movzbl (%r12,%r8,1),%ecx
movzbl (%rbx,%r8,1),%edx
mov    (%rax,%rdx,4),%eax
add    %ecx,%eax
movslq %eax,%rax
movzbl (%rax,%r14,1),%eax
movzbl (%r10,%r8,1),%r8d
mov    %al,(%rsi)
mov    (%r9,%rdx,8),%rax
add    (%r15,%r8,8),%rax
sar    $0x10,%rax
add    %ecx,%eax
movslq %eax,%rax
movzbl (%rax,%r14,1),%eax
mov    %al,0x1(%rsi)
add    (%r11,%r8,4),%ecx
movslq %ecx,%rax
movzbl (%rax,%r14,1),%eax
mov    %al,0x2(%rsi)
add    $0x1,%edi
add    $0x3,%rsi
mov    -0x10(%rbp),%rax
cmp    %r13d,%edi
jb     1c25d <ycc_extrgb_convert_internal+0x4d>
mov    -0x20(%rbp),%rcx
lea    0x1(%rcx),%edx
mov    -0x8(%rbp),%rcx
add    $0x8,%rcx
xor    %edi,%edi
mov    -0x50(%rbp),%r8
mov    -0x18(%rbp),%rsi
add    $0xffffffff,%r8d
test   %r8d,%r8d
jns    1c2ee <ycc_extrgb_convert_internal+0xde>
mov    -0x38(%rbp),%r13
mov    -0x30(%rbp),%r12
mov    -0x28(%rbp),%rbx
mov    -0x40(%rbp),%r14
mov    -0x48(%rbp),%r15
leaveq 
retq   
mov    (%rsi),%r10
mov    %edx,%ebx
mov    (%r10,%rbx,8),%r12
mov    0x8(%rsi),%r10
mov    (%r10,%rbx,8),%r10
mov    0x10(%rsi),%rsi
mov    (%rsi,%rbx,8),%rbx
mov    (%rcx),%rsi
mov    %rdx,-0x20(%rbp)
mov    %rcx,-0x8(%rbp)
mov    %r8,-0x50(%rbp)
jmp    1c2b1 <ycc_extrgb_convert_internal+0xa1>
nopl   0x0(%rax,%rax,1)

000000000001c320 <gray_extrgb_convert_internal>:
push   %rbp
mov    %rsp,%rbp
sub    $0x10,%rsp
mov    %r15,-0x8(%rbp)
mov    0x88(%rdi),%r9d
xor    %r10d,%r10d
jmp    1c35e <gray_extrgb_convert_internal+0x3e>
mov    %edi,%r11d
movzbl (%r15,%r11,1),%r11d
mov    %r11b,0x2(%rax)
mov    %r11b,0x1(%rax)
mov    %r11b,(%rax)
add    $0x1,%edi
add    $0x3,%rax
cmp    %r9d,%edi
jb     1c338 <gray_extrgb_convert_internal+0x18>
add    $0x1,%edx
add    $0x8,%rcx
add    $0xffffffff,%r8d
test   %r8d,%r8d
jns    1c36d <gray_extrgb_convert_internal+0x4d>
mov    -0x8(%rbp),%r15
leaveq 
retq   
mov    (%rsi),%rax
mov    %edx,%edi
mov    (%rax,%rdi,8),%r15
mov    (%rcx),%rax
mov    %r10,%rdi
jmp    1c352 <gray_extrgb_convert_internal+0x32>
xchg   %ax,%ax

000000000001c380 <rgb_extrgb_convert_internal>:
push   %rbp
mov    %rsp,%rbp
sub    $0x20,%rsp
mov    %r12,-0x8(%rbp)
mov    %r13,-0x10(%rbp)
mov    %r14,-0x18(%rbp)
mov    %r15,-0x20(%rbp)
mov    0x88(%rdi),%r9d
xor    %r10d,%r10d
jmp    1c3d4 <rgb_extrgb_convert_internal+0x54>
mov    %edi,%r13d
movzbl (%r14,%r13,1),%r12d
mov    %r12b,(%rax)
movzbl (%r11,%r13,1),%r12d
mov    %r12b,0x1(%rax)
movzbl (%r15,%r13,1),%r12d
mov    %r12b,0x2(%rax)
add    $0x1,%edi
add    $0x3,%rax
cmp    %r9d,%edi
jb     1c3a4 <rgb_extrgb_convert_internal+0x24>
add    $0x1,%edx
add    $0x8,%rcx
add    $0xffffffff,%r8d
test   %r8d,%r8d
jns    1c3ef <rgb_extrgb_convert_internal+0x6f>
mov    -0x20(%rbp),%r15
mov    -0x18(%rbp),%r14
mov    -0x10(%rbp),%r13
mov    -0x8(%rbp),%r12
leaveq 
retq   
mov    (%rsi),%rax
mov    %edx,%edi
mov    (%rax,%rdi,8),%r14
mov    0x8(%rsi),%rax
mov    (%rax,%rdi,8),%r11
mov    0x10(%rsi),%rax
mov    (%rax,%rdi,8),%r15
mov    (%rcx),%rax
mov    %r10,%rdi
jmp    1c3c8 <rgb_extrgb_convert_internal+0x48>

000000000001c410 <ycc_extrgbx_convert_internal>:
push   %rbp
mov    %rsp,%rbp
sub    $0x50,%rsp
mov    %r15,-0x48(%rbp)
mov    %r14,-0x40(%rbp)
mov    %rsi,-0x18(%rbp)
mov    %rbx,-0x28(%rbp)
mov    %r12,-0x30(%rbp)
mov    %r13,-0x38(%rbp)
mov    0x88(%rdi),%r13d
mov    0x1a8(%rdi),%r14
mov    0x268(%rdi),%rdi
mov    0x10(%rdi),%rax
mov    %rax,-0x10(%rbp)
mov    0x18(%rdi),%r11
mov    0x20(%rdi),%r9
mov    0x28(%rdi),%r15
xor    %edi,%edi
jmp    1c4d3 <ycc_extrgbx_convert_internal+0xc3>
mov    %edi,%r8d
movzbl (%r12,%r8,1),%ecx
movzbl (%rbx,%r8,1),%edx
mov    (%rax,%rdx,4),%eax
add    %ecx,%eax
movslq %eax,%rax
movzbl (%rax,%r14,1),%eax
movzbl (%r10,%r8,1),%r8d
mov    %al,(%rsi)
mov    (%r9,%rdx,8),%rax
add    (%r15,%r8,8),%rax
sar    $0x10,%rax
add    %ecx,%eax
movslq %eax,%rax
movzbl (%rax,%r14,1),%eax
mov    %al,0x1(%rsi)
add    (%r11,%r8,4),%ecx
movslq %ecx,%rax
movzbl (%rax,%r14,1),%eax
mov    %al,0x2(%rsi)
movb   $0xff,0x3(%rsi)
add    $0x1,%edi
add    $0x4,%rsi
mov    -0x10(%rbp),%rax
cmp    %r13d,%edi
jb     1c45d <ycc_extrgbx_convert_internal+0x4d>
mov    -0x20(%rbp),%rcx
lea    0x1(%rcx),%edx
mov    -0x8(%rbp),%rcx
add    $0x8,%rcx
xor    %edi,%edi
mov    -0x50(%rbp),%r8
mov    -0x18(%rbp),%rsi
add    $0xffffffff,%r8d
test   %r8d,%r8d
jns    1c4f2 <ycc_extrgbx_convert_internal+0xe2>
mov    -0x38(%rbp),%r13
mov    -0x30(%rbp),%r12
mov    -0x28(%rbp),%rbx
mov    -0x40(%rbp),%r14
mov    -0x48(%rbp),%r15
leaveq 
retq   
mov    (%rsi),%r10
mov    %edx,%ebx
mov    (%r10,%rbx,8),%r12
mov    0x8(%rsi),%r10
mov    (%r10,%rbx,8),%r10
mov    0x10(%rsi),%rsi
mov    (%rsi,%rbx,8),%rbx
mov    (%rcx),%rsi
mov    %rdx,-0x20(%rbp)
mov    %rcx,-0x8(%rbp)
mov    %r8,-0x50(%rbp)
jmp    1c4b5 <ycc_extrgbx_convert_internal+0xa5>
nopl   0x0(%rax)

000000000001c520 <gray_extrgbx_convert_internal>:
push   %rbp
mov    %rsp,%rbp
sub    $0x10,%rsp
mov    %r15,-0x8(%rbp)
mov    0x88(%rdi),%r9d
xor    %r10d,%r10d
jmp    1c562 <gray_extrgbx_convert_internal+0x42>
mov    %edi,%r11d
movzbl (%r15,%r11,1),%r11d
mov    %r11b,0x2(%rax)
mov    %r11b,0x1(%rax)
mov    %r11b,(%rax)
movb   $0xff,0x3(%rax)
add    $0x1,%edi
add    $0x4,%rax
cmp    %r9d,%edi
jb     1c538 <gray_extrgbx_convert_internal+0x18>
add    $0x1,%edx
add    $0x8,%rcx
add    $0xffffffff,%r8d
test   %r8d,%r8d
jns    1c571 <gray_extrgbx_convert_internal+0x51>
mov    -0x8(%rbp),%r15
leaveq 
retq   
mov    (%rsi),%rax
mov    %edx,%edi
mov    (%rax,%rdi,8),%r15
mov    (%rcx),%rax
mov    %r10,%rdi
jmp    1c556 <gray_extrgbx_convert_internal+0x36>
data16 nopw %cs:0x0(%rax,%rax,1)
nopl   (%rax)

000000000001c590 <rgb_extrgbx_convert_internal>:
push   %rbp
mov    %rsp,%rbp
sub    $0x20,%rsp
mov    %r12,-0x8(%rbp)
mov    %r13,-0x10(%rbp)
mov    %r14,-0x18(%rbp)
mov    %r15,-0x20(%rbp)
mov    0x88(%rdi),%r9d
xor    %r10d,%r10d
jmp    1c5e8 <F_1_772+0x46>
mov    %edi,%r13d
movzbl (%r14,%r13,1),%r12d
mov    %r12b,(%rax)
movzbl (%r11,%r13,1),%r12d
mov    %r12b,0x1(%rax)
movzbl (%r15,%r13,1),%r12d
mov    %r12b,0x2(%rax)
movb   $0xff,0x3(%rax)
add    $0x1,%edi
add    $0x4,%rax
cmp    %r9d,%edi
jb     1c5b4 <F_1_772+0x12>
add    $0x1,%edx
add    $0x8,%rcx
add    $0xffffffff,%r8d
test   %r8d,%r8d
jns    1c603 <F_1_772+0x61>
mov    -0x20(%rbp),%r15
mov    -0x18(%rbp),%r14
mov    -0x10(%rbp),%r13
mov    -0x8(%rbp),%r12
leaveq 
retq   
mov    (%rsi),%rax
mov    %edx,%edi
mov    (%rax,%rdi,8),%r14
mov    0x8(%rsi),%rax
mov    (%rax,%rdi,8),%r11
mov    0x10(%rsi),%rax
mov    (%rax,%rdi,8),%r15
mov    (%rcx),%rax
mov    %r10,%rdi
jmp    1c5dc <F_1_772+0x3a>
data16 nopw %cs:0x0(%rax,%rax,1)
nop

000000000001c630 <ycc_extbgr_convert_internal>:
push   %rbp
mov    %rsp,%rbp
sub    $0x50,%rsp
mov    %r15,-0x48(%rbp)
mov    %r14,-0x40(%rbp)
mov    %rsi,-0x18(%rbp)
mov    %rbx,-0x28(%rbp)
mov    %r12,-0x30(%rbp)
mov    %r13,-0x38(%rbp)
mov    0x88(%rdi),%r13d
mov    0x1a8(%rdi),%r14
mov    0x268(%rdi),%rdi
mov    0x10(%rdi),%rax
mov    %rax,-0x10(%rbp)
mov    0x18(%rdi),%r11
mov    0x20(%rdi),%r9
mov    0x28(%rdi),%r15
xor    %edi,%edi
jmp    1c6ef <ycc_extbgr_convert_internal+0xbf>
mov    %edi,%r8d
movzbl (%r12,%r8,1),%ecx
movzbl (%rbx,%r8,1),%edx
mov    (%rax,%rdx,4),%eax
add    %ecx,%eax
movslq %eax,%rax
movzbl (%rax,%r14,1),%eax
movzbl (%r10,%r8,1),%r8d
mov    %al,0x2(%rsi)
mov    (%r9,%rdx,8),%rax
add    (%r15,%r8,8),%rax
sar    $0x10,%rax
add    %ecx,%eax
movslq %eax,%rax
movzbl (%rax,%r14,1),%eax
mov    %al,0x1(%rsi)
add    (%r11,%r8,4),%ecx
movslq %ecx,%rax
movzbl (%rax,%r14,1),%eax
mov    %al,(%rsi)
add    $0x1,%edi
add    $0x3,%rsi
mov    -0x10(%rbp),%rax
cmp    %r13d,%edi
jb     1c67d <ycc_extbgr_convert_internal+0x4d>
mov    -0x20(%rbp),%rcx
lea    0x1(%rcx),%edx
mov    -0x8(%rbp),%rcx
add    $0x8,%rcx
xor    %edi,%edi
mov    -0x50(%rbp),%r8
mov    -0x18(%rbp),%rsi
add    $0xffffffff,%r8d
test   %r8d,%r8d
jns    1c70e <ycc_extbgr_convert_internal+0xde>
mov    -0x38(%rbp),%r13
mov    -0x30(%rbp),%r12
mov    -0x28(%rbp),%rbx
mov    -0x40(%rbp),%r14
mov    -0x48(%rbp),%r15
leaveq 
retq   
mov    (%rsi),%r10
mov    %edx,%ebx
mov    (%r10,%rbx,8),%r12
mov    0x8(%rsi),%r10
mov    (%r10,%rbx,8),%r10
mov    0x10(%rsi),%rsi
mov    (%rsi,%rbx,8),%rbx
mov    (%rcx),%rsi
mov    %rdx,-0x20(%rbp)
mov    %rcx,-0x8(%rbp)
mov    %r8,-0x50(%rbp)
jmp    1c6d1 <ycc_extbgr_convert_internal+0xa1>
nopl   0x0(%rax,%rax,1)

000000000001c740 <gray_extbgr_convert_internal>:
push   %rbp
mov    %rsp,%rbp
sub    $0x10,%rsp
mov    %r15,-0x8(%rbp)
mov    0x88(%rdi),%r9d
xor    %r10d,%r10d
jmp    1c77e <gray_extbgr_convert_internal+0x3e>
mov    %edi,%r11d
movzbl (%r15,%r11,1),%r11d
mov    %r11b,(%rax)
mov    %r11b,0x1(%rax)
mov    %r11b,0x2(%rax)
add    $0x1,%edi
add    $0x3,%rax
cmp    %r9d,%edi
jb     1c758 <gray_extbgr_convert_internal+0x18>
add    $0x1,%edx
add    $0x8,%rcx
add    $0xffffffff,%r8d
test   %r8d,%r8d
jns    1c78d <gray_extbgr_convert_internal+0x4d>
mov    -0x8(%rbp),%r15
leaveq 
retq   
mov    (%rsi),%rax
mov    %edx,%edi
mov    (%rax,%rdi,8),%r15
mov    (%rcx),%rax
mov    %r10,%rdi
jmp    1c772 <gray_extbgr_convert_internal+0x32>
xchg   %ax,%ax

000000000001c7a0 <rgb_extbgr_convert_internal>:
push   %rbp
mov    %rsp,%rbp
sub    $0x20,%rsp
mov    %r12,-0x8(%rbp)
mov    %r13,-0x10(%rbp)
mov    %r14,-0x18(%rbp)
mov    %r15,-0x20(%rbp)
mov    0x88(%rdi),%r9d
xor    %r10d,%r10d
jmp    1c7f4 <rgb_extbgr_convert_internal+0x54>
mov    %edi,%r13d
movzbl (%r14,%r13,1),%r12d
mov    %r12b,0x2(%rax)
movzbl (%r11,%r13,1),%r12d
mov    %r12b,0x1(%rax)
movzbl (%r15,%r13,1),%r12d
mov    %r12b,(%rax)
add    $0x1,%edi
add    $0x3,%rax
cmp    %r9d,%edi
jb     1c7c4 <rgb_extbgr_convert_internal+0x24>
add    $0x1,%edx
add    $0x8,%rcx
add    $0xffffffff,%r8d
test   %r8d,%r8d
jns    1c80f <rgb_extbgr_convert_internal+0x6f>
mov    -0x20(%rbp),%r15
mov    -0x18(%rbp),%r14
mov    -0x10(%rbp),%r13
mov    -0x8(%rbp),%r12
leaveq 
retq   
mov    (%rsi),%rax
mov    %edx,%edi
mov    (%rax,%rdi,8),%r14
mov    0x8(%rsi),%rax
mov    (%rax,%rdi,8),%r11
mov    0x10(%rsi),%rax
mov    (%rax,%rdi,8),%r15
mov    (%rcx),%rax
mov    %r10,%rdi
jmp    1c7e8 <rgb_extbgr_convert_internal+0x48>

000000000001c830 <ycc_extbgrx_convert_internal>:
push   %rbp
mov    %rsp,%rbp
sub    $0x50,%rsp
mov    %r15,-0x48(%rbp)
mov    %r14,-0x40(%rbp)
mov    %rsi,-0x18(%rbp)
mov    %rbx,-0x28(%rbp)
mov    %r12,-0x30(%rbp)
mov    %r13,-0x38(%rbp)
mov    0x88(%rdi),%r13d
mov    0x1a8(%rdi),%r14
mov    0x268(%rdi),%rdi
mov    0x10(%rdi),%rax
mov    %rax,-0x10(%rbp)
mov    0x18(%rdi),%r11
mov    0x20(%rdi),%r9
mov    0x28(%rdi),%r15
xor    %edi,%edi
jmp    1c8f3 <ycc_extbgrx_convert_internal+0xc3>
mov    %edi,%r8d
movzbl (%r12,%r8,1),%ecx
movzbl (%rbx,%r8,1),%edx
mov    (%rax,%rdx,4),%eax
add    %ecx,%eax
movslq %eax,%rax
movzbl (%rax,%r14,1),%eax
movzbl (%r10,%r8,1),%r8d
mov    %al,0x2(%rsi)
mov    (%r9,%rdx,8),%rax
add    (%r15,%r8,8),%rax
sar    $0x10,%rax
add    %ecx,%eax
movslq %eax,%rax
movzbl (%rax,%r14,1),%eax
mov    %al,0x1(%rsi)
add    (%r11,%r8,4),%ecx
movslq %ecx,%rax
movzbl (%rax,%r14,1),%eax
mov    %al,(%rsi)
movb   $0xff,0x3(%rsi)
add    $0x1,%edi
add    $0x4,%rsi
mov    -0x10(%rbp),%rax
cmp    %r13d,%edi
jb     1c87d <ycc_extbgrx_convert_internal+0x4d>
mov    -0x20(%rbp),%rcx
lea    0x1(%rcx),%edx
mov    -0x8(%rbp),%rcx
add    $0x8,%rcx
xor    %edi,%edi
mov    -0x50(%rbp),%r8
mov    -0x18(%rbp),%rsi
add    $0xffffffff,%r8d
test   %r8d,%r8d
jns    1c912 <ycc_extbgrx_convert_internal+0xe2>
mov    -0x38(%rbp),%r13
mov    -0x30(%rbp),%r12
mov    -0x28(%rbp),%rbx
mov    -0x40(%rbp),%r14
mov    -0x48(%rbp),%r15
leaveq 
retq   
mov    (%rsi),%r10
mov    %edx,%ebx
mov    (%r10,%rbx,8),%r12
mov    0x8(%rsi),%r10
mov    (%r10,%rbx,8),%r10
mov    0x10(%rsi),%rsi
mov    (%rsi,%rbx,8),%rbx
mov    (%rcx),%rsi
mov    %rdx,-0x20(%rbp)
mov    %rcx,-0x8(%rbp)
mov    %r8,-0x50(%rbp)
jmp    1c8d5 <ycc_extbgrx_convert_internal+0xa5>
nopl   0x0(%rax)

000000000001c940 <gray_extbgrx_convert_internal>:
push   %rbp
mov    %rsp,%rbp
sub    $0x10,%rsp
mov    %r15,-0x8(%rbp)
mov    0x88(%rdi),%r9d
xor    %r10d,%r10d
jmp    1c982 <gray_extbgrx_convert_internal+0x42>
mov    %edi,%r11d
movzbl (%r15,%r11,1),%r11d
mov    %r11b,(%rax)
mov    %r11b,0x1(%rax)
mov    %r11b,0x2(%rax)
movb   $0xff,0x3(%rax)
add    $0x1,%edi
add    $0x4,%rax
cmp    %r9d,%edi
jb     1c958 <gray_extbgrx_convert_internal+0x18>
add    $0x1,%edx
add    $0x8,%rcx
add    $0xffffffff,%r8d
test   %r8d,%r8d
jns    1c991 <gray_extbgrx_convert_internal+0x51>
mov    -0x8(%rbp),%r15
leaveq 
retq   
mov    (%rsi),%rax
mov    %edx,%edi
mov    (%rax,%rdi,8),%r15
mov    (%rcx),%rax
mov    %r10,%rdi
jmp    1c976 <gray_extbgrx_convert_internal+0x36>
data16 nopw %cs:0x0(%rax,%rax,1)
nopl   (%rax)

000000000001c9b0 <rgb_extbgrx_convert_internal>:
push   %rbp
mov    %rsp,%rbp
sub    $0x20,%rsp
mov    %r12,-0x8(%rbp)
mov    %r13,-0x10(%rbp)
mov    %r14,-0x18(%rbp)
mov    %r15,-0x20(%rbp)
mov    0x88(%rdi),%r9d
xor    %r10d,%r10d
jmp    1ca08 <rgb_extbgrx_convert_internal+0x58>
mov    %edi,%r13d
movzbl (%r14,%r13,1),%r12d
mov    %r12b,0x2(%rax)
movzbl (%r11,%r13,1),%r12d
mov    %r12b,0x1(%rax)
movzbl (%r15,%r13,1),%r12d
mov    %r12b,(%rax)
movb   $0xff,0x3(%rax)
add    $0x1,%edi
add    $0x4,%rax
cmp    %r9d,%edi
jb     1c9d4 <rgb_extbgrx_convert_internal+0x24>
add    $0x1,%edx
add    $0x8,%rcx
add    $0xffffffff,%r8d
test   %r8d,%r8d
jns    1ca23 <rgb_extbgrx_convert_internal+0x73>
mov    -0x20(%rbp),%r15
mov    -0x18(%rbp),%r14
mov    -0x10(%rbp),%r13
mov    -0x8(%rbp),%r12
leaveq 
retq   
mov    (%rsi),%rax
mov    %edx,%edi
mov    (%rax,%rdi,8),%r14
mov    0x8(%rsi),%rax
mov    (%rax,%rdi,8),%r11
mov    0x10(%rsi),%rax
mov    (%rax,%rdi,8),%r15
mov    (%rcx),%rax
mov    %r10,%rdi
jmp    1c9fc <rgb_extbgrx_convert_internal+0x4c>
data16 nopw %cs:0x0(%rax,%rax,1)
nop

000000000001ca50 <ycc_extxbgr_convert_internal>:
push   %rbp
mov    %rsp,%rbp
sub    $0x50,%rsp
mov    %r15,-0x48(%rbp)
mov    %r14,-0x40(%rbp)
mov    %rsi,-0x18(%rbp)
mov    %rbx,-0x28(%rbp)
mov    %r12,-0x30(%rbp)
mov    %r13,-0x38(%rbp)
mov    0x88(%rdi),%r13d
mov    0x1a8(%rdi),%r14
mov    0x268(%rdi),%rdi
mov    0x10(%rdi),%rax
mov    %rax,-0x10(%rbp)
mov    0x18(%rdi),%r11
mov    0x20(%rdi),%r9
mov    0x28(%rdi),%r15
xor    %edi,%edi
jmp    1cb13 <ycc_extxbgr_convert_internal+0xc3>
mov    %edi,%r8d
movzbl (%r12,%r8,1),%ecx
movzbl (%rbx,%r8,1),%edx
mov    (%rax,%rdx,4),%eax
add    %ecx,%eax
movslq %eax,%rax
movzbl (%rax,%r14,1),%eax
movzbl (%r10,%r8,1),%r8d
mov    %al,0x3(%rsi)
mov    (%r9,%rdx,8),%rax
add    (%r15,%r8,8),%rax
sar    $0x10,%rax
add    %ecx,%eax
movslq %eax,%rax
movzbl (%rax,%r14,1),%eax
mov    %al,0x2(%rsi)
add    (%r11,%r8,4),%ecx
movslq %ecx,%rax
movzbl (%rax,%r14,1),%eax
mov    %al,0x1(%rsi)
movb   $0xff,(%rsi)
add    $0x1,%edi
add    $0x4,%rsi
mov    -0x10(%rbp),%rax
cmp    %r13d,%edi
jb     1ca9d <ycc_extxbgr_convert_internal+0x4d>
mov    -0x20(%rbp),%rcx
lea    0x1(%rcx),%edx
mov    -0x8(%rbp),%rcx
add    $0x8,%rcx
xor    %edi,%edi
mov    -0x50(%rbp),%r8
mov    -0x18(%rbp),%rsi
add    $0xffffffff,%r8d
test   %r8d,%r8d
jns    1cb32 <ycc_extxbgr_convert_internal+0xe2>
mov    -0x38(%rbp),%r13
mov    -0x30(%rbp),%r12
mov    -0x28(%rbp),%rbx
mov    -0x40(%rbp),%r14
mov    -0x48(%rbp),%r15
leaveq 
retq   
mov    (%rsi),%r10
mov    %edx,%ebx
mov    (%r10,%rbx,8),%r12
mov    0x8(%rsi),%r10
mov    (%r10,%rbx,8),%r10
mov    0x10(%rsi),%rsi
mov    (%rsi,%rbx,8),%rbx
mov    (%rcx),%rsi
mov    %rdx,-0x20(%rbp)
mov    %rcx,-0x8(%rbp)
mov    %r8,-0x50(%rbp)
jmp    1caf5 <ycc_extxbgr_convert_internal+0xa5>
nopl   0x0(%rax)

000000000001cb60 <gray_extxbgr_convert_internal>:
push   %rbp
mov    %rsp,%rbp
sub    $0x10,%rsp
mov    %r15,-0x8(%rbp)
mov    0x88(%rdi),%r9d
xor    %r10d,%r10d
jmp    1cba2 <gray_extxbgr_convert_internal+0x42>
mov    %edi,%r11d
movzbl (%r15,%r11,1),%r11d
mov    %r11b,0x1(%rax)
mov    %r11b,0x2(%rax)
mov    %r11b,0x3(%rax)
movb   $0xff,(%rax)
add    $0x1,%edi
add    $0x4,%rax
cmp    %r9d,%edi
jb     1cb78 <gray_extxbgr_convert_internal+0x18>
add    $0x1,%edx
add    $0x8,%rcx
add    $0xffffffff,%r8d
test   %r8d,%r8d
jns    1cbb1 <gray_extxbgr_convert_internal+0x51>
mov    -0x8(%rbp),%r15
leaveq 
retq   
mov    (%rsi),%rax
mov    %edx,%edi
mov    (%rax,%rdi,8),%r15
mov    (%rcx),%rax
mov    %r10,%rdi
jmp    1cb96 <gray_extxbgr_convert_internal+0x36>
data16 nopw %cs:0x0(%rax,%rax,1)
nopl   (%rax)

000000000001cbd0 <rgb_extxbgr_convert_internal>:
push   %rbp
mov    %rsp,%rbp
sub    $0x20,%rsp
mov    %r12,-0x8(%rbp)
mov    %r13,-0x10(%rbp)
mov    %r14,-0x18(%rbp)
mov    %r15,-0x20(%rbp)
mov    0x88(%rdi),%r9d
xor    %r10d,%r10d
jmp    1cc28 <rgb_extxbgr_convert_internal+0x58>
mov    %edi,%r13d
movzbl (%r14,%r13,1),%r12d
mov    %r12b,0x3(%rax)
movzbl (%r11,%r13,1),%r12d
mov    %r12b,0x2(%rax)
movzbl (%r15,%r13,1),%r12d
mov    %r12b,0x1(%rax)
movb   $0xff,(%rax)
add    $0x1,%edi
add    $0x4,%rax
cmp    %r9d,%edi
jb     1cbf4 <rgb_extxbgr_convert_internal+0x24>
add    $0x1,%edx
add    $0x8,%rcx
add    $0xffffffff,%r8d
test   %r8d,%r8d
jns    1cc43 <rgb_extxbgr_convert_internal+0x73>
mov    -0x20(%rbp),%r15
mov    -0x18(%rbp),%r14
mov    -0x10(%rbp),%r13
mov    -0x8(%rbp),%r12
leaveq 
retq   
mov    (%rsi),%rax
mov    %edx,%edi
mov    (%rax,%rdi,8),%r14
mov    0x8(%rsi),%rax
mov    (%rax,%rdi,8),%r11
mov    0x10(%rsi),%rax
mov    (%rax,%rdi,8),%r15
mov    (%rcx),%rax
mov    %r10,%rdi
jmp    1cc1c <rgb_extxbgr_convert_internal+0x4c>
data16 nopw %cs:0x0(%rax,%rax,1)
nop

000000000001cc70 <ycc_extxrgb_convert_internal>:
push   %rbp
mov    %rsp,%rbp
sub    $0x50,%rsp
mov    %r15,-0x48(%rbp)
mov    %r14,-0x40(%rbp)
mov    %rsi,-0x18(%rbp)
mov    %rbx,-0x28(%rbp)
mov    %r12,-0x30(%rbp)
mov    %r13,-0x38(%rbp)
mov    0x88(%rdi),%r13d
mov    0x1a8(%rdi),%r14
mov    0x268(%rdi),%rdi
mov    0x10(%rdi),%rax
mov    %rax,-0x10(%rbp)
mov    0x18(%rdi),%r11
mov    0x20(%rdi),%r9
mov    0x28(%rdi),%r15
xor    %edi,%edi
jmp    1cd33 <ycc_extxrgb_convert_internal+0xc3>
mov    %edi,%r8d
movzbl (%r12,%r8,1),%ecx
movzbl (%rbx,%r8,1),%edx
mov    (%rax,%rdx,4),%eax
add    %ecx,%eax
movslq %eax,%rax
movzbl (%rax,%r14,1),%eax
movzbl (%r10,%r8,1),%r8d
mov    %al,0x1(%rsi)
mov    (%r9,%rdx,8),%rax
add    (%r15,%r8,8),%rax
sar    $0x10,%rax
add    %ecx,%eax
movslq %eax,%rax
movzbl (%rax,%r14,1),%eax
mov    %al,0x2(%rsi)
add    (%r11,%r8,4),%ecx
movslq %ecx,%rax
movzbl (%rax,%r14,1),%eax
mov    %al,0x3(%rsi)
movb   $0xff,(%rsi)
add    $0x1,%edi
add    $0x4,%rsi
mov    -0x10(%rbp),%rax
cmp    %r13d,%edi
jb     1ccbd <ycc_extxrgb_convert_internal+0x4d>
mov    -0x20(%rbp),%rcx
lea    0x1(%rcx),%edx
mov    -0x8(%rbp),%rcx
add    $0x8,%rcx
xor    %edi,%edi
mov    -0x50(%rbp),%r8
mov    -0x18(%rbp),%rsi
add    $0xffffffff,%r8d
test   %r8d,%r8d
jns    1cd52 <ycc_extxrgb_convert_internal+0xe2>
mov    -0x38(%rbp),%r13
mov    -0x30(%rbp),%r12
mov    -0x28(%rbp),%rbx
mov    -0x40(%rbp),%r14
mov    -0x48(%rbp),%r15
leaveq 
retq   
mov    (%rsi),%r10
mov    %edx,%ebx
mov    (%r10,%rbx,8),%r12
mov    0x8(%rsi),%r10
mov    (%r10,%rbx,8),%r10
mov    0x10(%rsi),%rsi
mov    (%rsi,%rbx,8),%rbx
mov    (%rcx),%rsi
mov    %rdx,-0x20(%rbp)
mov    %rcx,-0x8(%rbp)
mov    %r8,-0x50(%rbp)
jmp    1cd15 <ycc_extxrgb_convert_internal+0xa5>
nopl   0x0(%rax)

000000000001cd80 <gray_extxrgb_convert_internal>:
push   %rbp
mov    %rsp,%rbp
sub    $0x10,%rsp
mov    %r15,-0x8(%rbp)
mov    0x88(%rdi),%r9d
xor    %r10d,%r10d
jmp    1cdc2 <gray_extxrgb_convert_internal+0x42>
mov    %edi,%r11d
movzbl (%r15,%r11,1),%r11d
mov    %r11b,0x3(%rax)
mov    %r11b,0x2(%rax)
mov    %r11b,0x1(%rax)
movb   $0xff,(%rax)
add    $0x1,%edi
add    $0x4,%rax
cmp    %r9d,%edi
jb     1cd98 <gray_extxrgb_convert_internal+0x18>
add    $0x1,%edx
add    $0x8,%rcx
add    $0xffffffff,%r8d
test   %r8d,%r8d
jns    1cdd1 <gray_extxrgb_convert_internal+0x51>
mov    -0x8(%rbp),%r15
leaveq 
retq   
mov    (%rsi),%rax
mov    %edx,%edi
mov    (%rax,%rdi,8),%r15
mov    (%rcx),%rax
mov    %r10,%rdi
jmp    1cdb6 <gray_extxrgb_convert_internal+0x36>
data16 nopw %cs:0x0(%rax,%rax,1)
nopl   (%rax)

000000000001cdf0 <rgb_extxrgb_convert_internal>:
push   %rbp
mov    %rsp,%rbp
sub    $0x20,%rsp
mov    %r12,-0x8(%rbp)
mov    %r13,-0x10(%rbp)
mov    %r14,-0x18(%rbp)
mov    %r15,-0x20(%rbp)
mov    0x88(%rdi),%r9d
xor    %r10d,%r10d
jmp    1ce48 <rgb_extxrgb_convert_internal+0x58>
mov    %edi,%r13d
movzbl (%r14,%r13,1),%r12d
mov    %r12b,0x1(%rax)
movzbl (%r11,%r13,1),%r12d
mov    %r12b,0x2(%rax)
movzbl (%r15,%r13,1),%r12d
mov    %r12b,0x3(%rax)
movb   $0xff,(%rax)
add    $0x1,%edi
add    $0x4,%rax
cmp    %r9d,%edi
jb     1ce14 <rgb_extxrgb_convert_internal+0x24>
add    $0x1,%edx
add    $0x8,%rcx
add    $0xffffffff,%r8d
test   %r8d,%r8d
jns    1ce63 <rgb_extxrgb_convert_internal+0x73>
mov    -0x20(%rbp),%r15
mov    -0x18(%rbp),%r14
mov    -0x10(%rbp),%r13
mov    -0x8(%rbp),%r12
leaveq 
retq   
mov    (%rsi),%rax
mov    %edx,%edi
mov    (%rax,%rdi,8),%r14
mov    0x8(%rsi),%rax
mov    (%rax,%rdi,8),%r11
mov    0x10(%rsi),%rax
mov    (%rax,%rdi,8),%r15
mov    (%rcx),%rax
mov    %r10,%rdi
jmp    1ce3c <rgb_extxrgb_convert_internal+0x4c>
data16 nopw %cs:0x0(%rax,%rax,1)
nop

000000000001ce90 <build_ycc_rgb_table>:
push   %rbp
mov    %rsp,%rbp
sub    $0x20,%rsp
mov    %r12,-0x8(%rbp)
mov    %r13,-0x10(%rbp)
mov    %r14,-0x18(%rbp)
mov    %r15,-0x20(%rbp)
mov    0x8(%rdi),%rax
mov    (%rax),%rax
mov    $0x1,%r13d
mov    $0x400,%r15d
mov    0x268(%rdi),%r14
mov    %rdi,%r12
mov    %r13,%rsi
mov    %r15,%rdx
callq  *%rax
mov    %rax,0x10(%r14)
mov    0x8(%r12),%rax
mov    (%rax),%rax
mov    %r15,%rdx
mov    %r12,%rdi
mov    %r13,%rsi
callq  *%rax
mov    %rax,0x18(%r14)
mov    0x8(%r12),%rax
mov    (%rax),%rax
mov    $0x800,%r15d
mov    %r12,%rdi
mov    %r13,%rsi
mov    %r15,%rdx
callq  *%rax
mov    %rax,0x20(%r14)
mov    0x8(%r12),%rax
mov    (%rax),%rax
mov    %r15,%rdx
mov    %r13,%rsi
mov    %r12,%rdi
callq  *%rax
mov    %rax,0x28(%r14)
xor    %eax,%eax
mov    $0xffffffffffffff80,%rcx
jmp    1cf94 <build_ycc_rgb_table+0x104>
mov    %rcx,%rdx
imul   $0x166e9,%rdx,%rdx
add    $0x8000,%rdx
sar    $0x10,%rdx
mov    0x10(%r14),%rsi
movslq %eax,%rdi
mov    %edx,(%rsi,%rdi,4)
mov    %rcx,%rdx
imul   $0x1c5a2,%rdx,%rdx
add    $0x8000,%rdx
sar    $0x10,%rdx
mov    0x18(%r14),%rsi
mov    %edx,(%rsi,%rdi,4)
mov    %rcx,%rsi
imul   $0xffffffffffff492e,%rsi,%rsi
mov    0x20(%r14),%rdx
mov    %rsi,(%rdx,%rdi,8)
mov    %rcx,%rdx
imul   $0xffffffffffffa7e6,%rdx,%rdx
lea    0x8000(%rdx),%rsi
mov    0x28(%r14),%rdx
mov    %rsi,(%rdx,%rdi,8)
add    $0x1,%eax
add    $0x1,%rcx
cmp    $0xff,%eax
jle    1cf27 <build_ycc_rgb_table+0x97>
mov    -0x20(%rbp),%r15
mov    -0x18(%rbp),%r14
mov    -0x10(%rbp),%r13
mov    -0x8(%rbp),%r12
leaveq 
retq   
nopl   (%rax)

000000000001cfb0 <ycc_rgb_convert>:
push   %rbp
mov    %rsp,%rbp
mov    0x40(%rdi),%eax
add    $0xfffffffa,%eax
cmp    $0x9,%eax
ja     1cfd6 <ycc_rgb_convert+0x26>
lea    0x3c7ae(%rip),%r9        # 59774 <mybuffer.5+0x5c>
movslq (%r9,%rax,4),%rax
add    %r9,%rax
jmpq   *%rax
callq  1cc70 <ycc_extxrgb_convert_internal>
leaveq 
retq   
callq  1c010 <ycc_rgb_convert_internal>
leaveq 
retq   
callq  1c210 <ycc_extrgb_convert_internal>
leaveq 
retq   
callq  1c410 <ycc_extrgbx_convert_internal>
leaveq 
retq   
callq  1c630 <ycc_extbgr_convert_internal>
leaveq 
retq   
callq  1c830 <ycc_extbgrx_convert_internal>
leaveq 
retq   
callq  1ca50 <ycc_extxbgr_convert_internal>
leaveq 
retq   

000000000001d000 <build_rgb_y_table>:
push   %rbp
mov    %rsp,%rbp
sub    $0x10,%rsp
mov    %r15,-0x8(%rbp)
mov    0x8(%rdi),%rax
mov    (%rax),%rax
mov    $0x1,%esi
mov    $0x1800,%edx
mov    0x268(%rdi),%r15
callq  *%rax
mov    %rax,0x30(%r15)
xor    %ecx,%ecx
jmp    1d093 <build_rgb_y_table+0x93>
lea    (%rcx,%rcx,8),%rsi
mov    %rsi,%rdx
shl    $0x4,%rdx
lea    (%rdx,%rcx,8),%rdx
add    %rcx,%rdx
shl    $0x7,%rdx
lea    (%rdx,%rcx,8),%rdx
lea    (%rdx,%rcx,2),%rdx
add    %rcx,%rdx
mov    %rdx,(%rax,%rcx,8)
lea    (%rcx,%rsi,4),%rdx
shl    $0x4,%rdx
lea    (%rdx,%rcx,8),%rdx
add    %rcx,%rdx
shl    $0x6,%rdx
lea    (%rdx,%rcx,4),%rdx
lea    (%rdx,%rcx,2),%rdx
mov    %rdx,0x800(%rax,%rcx,8)
mov    %rcx,%rdx
imul   $0x1d2f,%rdx,%rdx
add    $0x8000,%rdx
mov    %rdx,0x1000(%rax,%rcx,8)
add    $0x1,%rcx
cmp    $0xff,%rcx
jle    1d02e <build_rgb_y_table+0x2e>
mov    -0x8(%rbp),%r15
leaveq 
retq   
data16 nopw %cs:0x0(%rax,%rax,1)
nopl   (%rax)

000000000001d0b0 <rgb_gray_convert>:
push   %rbp
mov    %rsp,%rbp
sub    $0x30,%rsp
mov    %rbx,-0x8(%rbp)
mov    %r12,-0x10(%rbp)
mov    %r13,-0x18(%rbp)
mov    %r14,-0x20(%rbp)
mov    %r15,-0x28(%rbp)
mov    0x268(%rdi),%rax
mov    0x30(%rax),%r10
mov    0x88(%rdi),%r12d
xor    %edi,%edi
jmp    1d12a <rgb_gray_convert+0x7a>
mov    %edi,%ebx
movzbl (%r9,%rbx,1),%eax
add    $0x100,%eax
movslq %eax,%rax
mov    (%r10,%rax,8),%rax
movzbl (%r14,%rbx,1),%r13d
add    (%r10,%r13,8),%rax
movzbl (%r15,%rbx,1),%r13d
add    $0x200,%r13d
movslq %r13d,%r13
add    (%r10,%r13,8),%rax
sar    $0x10,%rax
mov    %al,(%r11,%rbx,1)
add    $0x1,%edi
cmp    %r12d,%edi
jb     1d0e2 <rgb_gray_convert+0x32>
add    $0x1,%edx
add    $0x8,%rcx
xor    %edi,%edi
add    $0xffffffff,%r8d
test   %r8d,%r8d
jns    1d149 <rgb_gray_convert+0x99>
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
leaveq 
retq   
mov    (%rsi),%rax
mov    %edx,%ebx
mov    (%rax,%rbx,8),%r14
mov    0x8(%rsi),%rax
mov    (%rax,%rbx,8),%r9
mov    0x10(%rsi),%rax
mov    (%rax,%rbx,8),%r15
mov    (%rcx),%r11
jmp    1d11c <rgb_gray_convert+0x6c>
nopw   0x0(%rax,%rax,1)

000000000001d170 <null_convert>:
push   %rbp
mov    %rsp,%rbp
sub    $0x30,%rsp
mov    %r12,-0x10(%rbp)
mov    %r13,-0x18(%rbp)
mov    %r14,-0x20(%rbp)
mov    %r15,-0x28(%rbp)
mov    0x88(%rdi),%r15d
xor    %r14d,%r14d
movslq 0x38(%rdi),%r9
cmp    $0x3,%r9d
je     1d1d9 <null_convert+0x69>
cmp    $0x4,%r9d
je     1d1f4 <null_convert+0x84>
mov    %rbx,-0x8(%rbp)
jmp    1d227 <null_convert+0xb7>
mov    %edi,%r12d
movzbl (%r10,%r12,1),%r9d
mov    %r9b,(%rax)
movzbl (%r11,%r12,1),%r9d
mov    %r9b,0x1(%rax)
movzbl 0x0(%r13,%r12,1),%r9d
mov    %r9b,0x2(%rax)
add    $0x1,%edi
add    $0x3,%rax
cmp    %r15d,%edi
jb     1d1a8 <null_convert+0x38>
add    $0x1,%edx
add    $0x8,%rcx
add    $0xffffffff,%r8d
test   %r8d,%r8d
jns    1d24a <null_convert+0xda>
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
leaveq 
retq   
mov    %rbx,-0x8(%rbp)
jmpq   1d2a4 <null_convert+0x134>
mov    %edi,%r11d
movzbl (%r12,%r11,1),%r11d
mov    %r11b,(%rax,%r13,1)
add    $0x1,%edi
add    %r9,%rax
cmp    %edi,%r15d
ja     1d1fd <null_convert+0x8d>
add    $0x1,%ebx
cmp    %ebx,%r9d
jg     1d2c3 <null_convert+0x153>
add    $0x1,%edx
add    $0x8,%rcx
add    $0xffffffff,%r8d
test   %r8d,%r8d
jns    1d2d9 <null_convert+0x169>
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
leaveq 
retq   
mov    (%rsi),%rax
mov    %edx,%edi
mov    (%rax,%rdi,8),%r10
mov    0x8(%rsi),%rax
mov    (%rax,%rdi,8),%r11
mov    0x10(%rsi),%rax
mov    (%rax,%rdi,8),%r13
mov    (%rcx),%rax
mov    %r14,%rdi
jmpq   1d1cd <null_convert+0x5d>
mov    %edi,%r10d
movzbl (%r12,%r10,1),%ebx
mov    %bl,(%rax)
movzbl (%r11,%r10,1),%ebx
mov    %bl,0x1(%rax)
movzbl 0x0(%r13,%r10,1),%ebx
mov    %bl,0x2(%rax)
movzbl (%r9,%r10,1),%ebx
mov    %bl,0x3(%rax)
add    $0x1,%edi
add    $0x4,%rax
cmp    %edi,%r15d
ja     1d26e <null_convert+0xfe>
add    $0x1,%edx
add    $0x8,%rcx
add    $0xffffffff,%r8d
test   %r8d,%r8d
jns    1d2e4 <null_convert+0x174>
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
leaveq 
retq   
movslq %ebx,%r13
mov    (%rsi,%r13,8),%rax
mov    (%rax,%r10,8),%r12
mov    (%rcx),%rax
mov    %r14,%rdi
jmpq   1d20f <null_convert+0x9f>
mov    %edx,%r10d
mov    %r14,%rbx
jmpq   1d217 <null_convert+0xa7>
mov    (%rsi),%rdi
mov    %edx,%eax
mov    (%rdi,%rax,8),%r12
mov    0x8(%rsi),%rdi
mov    (%rdi,%rax,8),%r11
mov    0x10(%rsi),%rdi
mov    (%rdi,%rax,8),%r13
mov    0x18(%rsi),%rdi
mov    (%rdi,%rax,8),%r9
mov    (%rcx),%rax
mov    %r14,%rdi
jmp    1d298 <null_convert+0x128>
nopl   (%rax)

000000000001d310 <grayscale_convert>:
push   %rbp
mov    %rsp,%rbp
mov    (%rsi),%rsi
xor    %eax,%eax
mov    0x88(%rdi),%r9d
mov    %rsi,%rdi
mov    %rdx,%rsi
mov    %rcx,%rdx
mov    %rax,%rcx
callq  43f0 <jcopy_sample_rows@plt>
leaveq 
retq   
data16 nopw %cs:0x0(%rax,%rax,1)
xchg   %ax,%ax

000000000001d340 <gray_rgb_convert>:
push   %rbp
mov    %rsp,%rbp
mov    0x40(%rdi),%eax
add    $0xfffffffa,%eax
cmp    $0x9,%eax
ja     1d366 <gray_rgb_convert+0x26>
lea    0x3c446(%rip),%r9        # 5979c <mybuffer.5+0x84>
movslq (%r9,%rax,4),%rax
add    %r9,%rax
jmpq   *%rax
callq  1cd80 <gray_extxrgb_convert_internal>
leaveq 
retq   
callq  1c120 <gray_rgb_convert_internal>
leaveq 
retq   
callq  1c320 <gray_extrgb_convert_internal>
leaveq 
retq   
callq  1c520 <gray_extrgbx_convert_internal>
leaveq 
retq   
callq  1c740 <gray_extbgr_convert_internal>
leaveq 
retq   
callq  1c940 <gray_extbgrx_convert_internal>
leaveq 
retq   
callq  1cb60 <gray_extxbgr_convert_internal>
leaveq 
retq   

000000000001d390 <rgb_rgb_convert>:
push   %rbp
mov    %rsp,%rbp
mov    0x40(%rdi),%eax
add    $0xfffffffa,%eax
cmp    $0x9,%eax
ja     1d3b6 <rgb_rgb_convert+0x26>
lea    0x3c41e(%rip),%r9        # 597c4 <mybuffer.5+0xac>
movslq (%r9,%rax,4),%rax
add    %r9,%rax
jmpq   *%rax
callq  1cdf0 <rgb_extxrgb_convert_internal>
leaveq 
retq   
callq  1c180 <rgb_rgb_convert_internal>
leaveq 
retq   
callq  1c380 <rgb_extrgb_convert_internal>
leaveq 
retq   
callq  1c590 <rgb_extrgbx_convert_internal>
leaveq 
retq   
callq  1c7a0 <rgb_extbgr_convert_internal>
leaveq 
retq   
callq  1c9b0 <rgb_extbgrx_convert_internal>
leaveq 
retq   
callq  1cbd0 <rgb_extxbgr_convert_internal>
leaveq 
retq   

000000000001d3e0 <ycck_cmyk_convert>:
push   %rbp
mov    %rsp,%rbp
sub    $0x60,%rsp
mov    %r15,-0x58(%rbp)
mov    %r14,-0x50(%rbp)
mov    %r13,-0x48(%rbp)
mov    %rsi,-0x28(%rbp)
mov    %rbx,-0x38(%rbp)
mov    %r12,-0x40(%rbp)
mov    0x88(%rdi),%r12d
mov    0x1a8(%rdi),%r14
mov    0x268(%rdi),%rdi
mov    0x10(%rdi),%rax
mov    %rax,-0x18(%rbp)
mov    0x18(%rdi),%r9
mov    0x20(%rdi),%r15
mov    0x28(%rdi),%r13
xor    %edi,%edi
jmpq   1d4c7 <ycck_cmyk_convert+0xe7>
mov    %edi,%r10d
movzbl (%rbx,%r10,1),%ecx
movzbl (%rdx,%r10,1),%ebx
mov    %rcx,%rdx
add    (%rax,%rbx,4),%edx
mov    $0xff,%eax
sub    %edx,%eax
movslq %eax,%rax
movzbl (%rax,%r14,1),%eax
movzbl (%r8,%r10,1),%edx
mov    %al,(%rsi)
mov    (%r15,%rbx,8),%rax
add    0x0(%r13,%rdx,8),%rax
sar    $0x10,%rax
lea    (%rax,%rcx,1),%ebx
mov    $0xff,%eax
neg    %ebx
add    %eax,%ebx
movslq %ebx,%rbx
movzbl (%rbx,%r14,1),%ebx
mov    %bl,0x1(%rsi)
add    (%r9,%rdx,4),%ecx
sub    %ecx,%eax
movslq %eax,%rax
movzbl (%rax,%r14,1),%eax
mov    %al,0x2(%rsi)
movzbl (%r11,%r10,1),%eax
mov    %al,0x3(%rsi)
add    $0x1,%edi
add    $0x4,%rsi
mov    -0x10(%rbp),%rbx
mov    -0x18(%rbp),%rax
mov    -0x20(%rbp),%rdx
cmp    %r12d,%edi
jb     1d430 <ycck_cmyk_convert+0x50>
mov    -0x30(%rbp),%rcx
lea    0x1(%rcx),%edx
mov    -0x8(%rbp),%rcx
add    $0x8,%rcx
xor    %edi,%edi
mov    -0x28(%rbp),%rsi
mov    -0x60(%rbp),%r8
add    $0xffffffff,%r8d
test   %r8d,%r8d
jns    1d4e6 <ycck_cmyk_convert+0x106>
mov    -0x40(%rbp),%r12
mov    -0x38(%rbp),%rbx
mov    -0x48(%rbp),%r13
mov    -0x50(%rbp),%r14
mov    -0x58(%rbp),%r15
leaveq 
retq   
mov    (%rsi),%rbx
mov    %edx,%r10d
mov    (%rbx,%r10,8),%rbx
mov    %r8,-0x60(%rbp)
mov    %rbx,-0x10(%rbp)
mov    0x8(%rsi),%r8
mov    (%r8,%r10,8),%r8
mov    %rdx,-0x30(%rbp)
mov    0x10(%rsi),%rdx
mov    (%rdx,%r10,8),%rdx
mov    %rdx,-0x20(%rbp)
mov    0x18(%rsi),%rsi
mov    (%rsi,%r10,8),%r11
mov    (%rcx),%rsi
mov    %rcx,-0x8(%rbp)
jmp    1d4a9 <ycck_cmyk_convert+0xc9>
data16 nopw %cs:0x0(%rax,%rax,1)
nopl   0x0(%rax)

000000000001d530 <is_big_endian>:
push   %rbp
mov    %rsp,%rbp
xor    %eax,%eax
leaveq 
retq   
nopl   0x0(%rax,%rax,1)

000000000001d540 <ycc_rgb565_convert_le>:
push   %rbp
mov    %rsp,%rbp
sub    $0x60,%rsp
mov    %r15,-0x28(%rbp)
mov    %r14,-0x20(%rbp)
mov    %rsi,-0x40(%rbp)
mov    %rbx,-0x8(%rbp)
mov    %r12,-0x10(%rbp)
mov    %r13,-0x18(%rbp)
mov    0x88(%rdi),%ebx
mov    0x1a8(%rdi),%r15
mov    0x268(%rdi),%rax
mov    0x10(%rax),%r14
mov    0x18(%rax),%r12
mov    0x20(%rax),%r9
mov    %r9,-0x38(%rbp)
mov    0x28(%rax),%r13
xor    %edi,%edi
jmpq   1d691 <ycc_rgb565_convert_le+0x151>
movzbl (%r11),%ecx
movzbl (%r10),%edx
mov    %rcx,%rax
add    (%r14,%rdx,4),%eax
movslq %eax,%rax
movzbl (%rax,%r15,1),%eax
and    $0xf8,%eax
shl    $0x8,%eax
mov    (%r9,%rdx,8),%rdx
mov    %rbx,-0x58(%rbp)
movzbl (%r8),%ebx
add    0x0(%r13,%rbx,8),%rdx
sar    $0x10,%rdx
add    %ecx,%edx
movslq %edx,%rdx
movzbl (%rdx,%r15,1),%edx
and    $0xfc,%edx
lea    (%rax,%rdx,8),%edx
add    (%r12,%rbx,4),%ecx
movslq %ecx,%rax
movzbl (%r15,%rax,1),%eax
shr    $0x3,%eax
lea    (%rdx,%rax,1),%ebx
movzbl 0x1(%r11),%edx
movzbl 0x1(%r10),%ecx
mov    %rdx,%rax
add    (%r14,%rcx,4),%eax
movslq %eax,%rax
movzbl (%r15,%rax,1),%eax
and    $0xf8,%eax
shl    $0x8,%eax
mov    (%r9,%rcx,8),%rcx
movzbl 0x1(%r8),%r9d
add    0x0(%r13,%r9,8),%rcx
sar    $0x10,%rcx
add    %edx,%ecx
movslq %ecx,%rcx
movzbl (%r15,%rcx,1),%ecx
and    $0xfc,%ecx
lea    (%rax,%rcx,8),%ecx
add    (%r12,%r9,4),%edx
movslq %edx,%rax
movzbl (%r15,%rax,1),%eax
shr    $0x3,%eax
add    %ecx,%eax
shl    $0x10,%eax
add    %ebx,%eax
mov    %eax,(%rsi)
add    $0x2,%r11
add    $0x2,%r10
add    $0x2,%r8
add    $0x4,%rsi
add    $0x1,%edi
mov    -0x38(%rbp),%r9
mov    -0x58(%rbp),%rbx
mov    %rbx,%rax
shr    %eax
cmp    %edi,%eax
ja     1d58f <ycc_rgb565_convert_le+0x4f>
mov    -0x48(%rbp),%rax
lea    0x1(%rax),%edx
mov    -0x30(%rbp),%rax
lea    0x8(%rax),%rcx
mov    %rbx,%rax
and    $0x1,%eax
test   %eax,%eax
jne    1d6af <ycc_rgb565_convert_le+0x16f>
xor    %edi,%edi
mov    -0x50(%rbp),%r8
mov    -0x40(%rbp),%rsi
lea    -0x1(%r8),%eax
test   %eax,%eax
jns    1d711 <ycc_rgb565_convert_le+0x1d1>
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
mov    -0x20(%rbp),%r14
mov    -0x28(%rbp),%r15
leaveq 
retq   
movzbl (%r11),%r11d
movzbl (%r10),%r10d
mov    %r11,%rax
add    (%r14,%r10,4),%eax
movslq %eax,%rax
movzbl (%r15,%rax,1),%edi
and    $0xf8,%di
shl    $0x8,%edi
mov    (%r9,%r10,8),%rax
movzbl (%r8),%r8d
add    0x0(%r13,%r8,8),%rax
sar    $0x10,%rax
add    %r11d,%eax
movslq %eax,%rax
movzbl (%r15,%rax,1),%eax
and    $0xfc,%ax
lea    (%rdi,%rax,8),%edi
add    (%r12,%r8,4),%r11d
movslq %r11d,%rax
movzbl (%r15,%rax,1),%eax
shr    $0x3,%eax
add    %edi,%eax
mov    %ax,(%rsi)
xor    %edi,%edi
mov    -0x50(%rbp),%r8
mov    -0x40(%rbp),%rsi
jmp    1d691 <ycc_rgb565_convert_le+0x151>
mov    (%rsi),%r8
mov    %edx,%r10d
mov    (%r8,%r10,8),%r11
mov    0x8(%rsi),%r8
mov    (%r8,%r10,8),%r8
mov    0x10(%rsi),%rsi
mov    (%rsi,%r10,8),%r10
mov    (%rcx),%rsi
mov    %rax,-0x50(%rbp)
mov    %rsi,%rax
and    $0x3,%rax
test   %rax,%rax
jne    1d74b <ycc_rgb565_convert_le+0x20b>
mov    %rcx,-0x30(%rbp)
mov    %rdx,-0x48(%rbp)
jmpq   1d661 <ycc_rgb565_convert_le+0x121>
movzbl (%r11),%edi
mov    %rcx,-0x30(%rbp)
movzbl (%r10),%ecx
mov    %rdx,-0x48(%rbp)
mov    %rdi,%rax
add    (%r14,%rcx,4),%eax
movslq %eax,%rax
movzbl (%r15,%rax,1),%eax
and    $0xf8,%ax
shl    $0x8,%eax
mov    (%r9,%rcx,8),%rcx
movzbl (%r8),%edx
add    0x0(%r13,%rdx,8),%rcx
sar    $0x10,%rcx
add    %edi,%ecx
movslq %ecx,%rcx
movzbl (%r15,%rcx,1),%ecx
and    $0xfc,%cx
lea    (%rax,%rcx,8),%ecx
add    (%r12,%rdx,4),%edi
movslq %edi,%rax
movzbl (%r15,%rax,1),%eax
shr    $0x3,%eax
add    %ecx,%eax
mov    %ax,(%rsi)
add    $0x1,%r11
add    $0x1,%r10
add    $0x1,%r8
add    $0x2,%rsi
add    $0xffffffff,%ebx
xor    %edi,%edi
jmpq   1d661 <ycc_rgb565_convert_le+0x121>
data16 nopw %cs:0x0(%rax,%rax,1)
nopl   (%rax)

000000000001d7d0 <ycc_rgb565D_convert_le>:
push   %rbp
mov    %rsp,%rbp
sub    $0x80,%rsp
mov    %r15,-0x28(%rbp)
mov    %r14,-0x20(%rbp)
mov    %r13,-0x18(%rbp)
mov    %r12,-0x10(%rbp)
mov    %rsi,-0x58(%rbp)
mov    %rbx,-0x8(%rbp)
mov    0x88(%rdi),%ebx
mov    0x1a8(%rdi),%r15
mov    0x268(%rdi),%rax
mov    0x10(%rax),%r12
mov    %r12,-0x40(%rbp)
mov    0x18(%rax),%r14
mov    0x20(%rax),%r9
mov    %r9,-0x48(%rbp)
mov    0x28(%rax),%r10
mov    %r10,-0x50(%rbp)
lea    0x3c0d6(%rip),%r11        # 59900 <dither_matrix>
mov    0xa8(%rdi),%eax
and    $0x3,%eax
mov    %eax,%eax
mov    (%r11,%rax,8),%rax
mov    %rdx,%r13
mov    %rcx,%rdx
xor    %edi,%edi
jmpq   1d9b2 <ycc_rgb565D_convert_le+0x1e2>
movzbl (%r8),%r13d
movzbl (%rsi),%edx
mov    %rbx,-0x70(%rbp)
mov    %r13,%rbx
add    (%r12,%rdx,4),%ebx
movslq %ebx,%rbx
mov    %rdi,-0x78(%rbp)
movzbl %al,%edi
mov    %rcx,-0x38(%rbp)
lea    (%r15,%rdi,1),%rcx
movzbl (%rcx,%rbx,1),%ecx
and    $0xf8,%ecx
shl    $0x8,%ecx
mov    (%r9,%rdx,8),%rdx
movzbl (%r11),%ebx
add    (%r10,%rbx,8),%rdx
sar    $0x10,%rdx
add    %r13d,%edx
movslq %edx,%r10
mov    %rax,%rdx
and    $0xfe,%rdx
shr    %rdx
add    %r15,%rdx
movzbl (%rdx,%r10,1),%edx
and    $0xfc,%edx
lea    (%rcx,%rdx,8),%edx
add    (%r14,%rbx,4),%r13d
movslq %r13d,%rcx
add    %r15,%rcx
movzbl (%rcx,%rdi,1),%ecx
shr    $0x3,%ecx
lea    (%rdx,%rcx,1),%r13d
movzbl 0x1(%r8),%ebx
movzbl 0x1(%rsi),%r10d
mov    %rbx,%rcx
add    (%r12,%r10,4),%ecx
movslq %ecx,%rcx
mov    $0xffffff00,%edx
and    %rdx,%rax
shr    $0x8,%rax
shl    $0x18,%rdi
lea    (%rdi,%rax,1),%rdx
movzbl %dl,%edi
lea    (%r15,%rdi,1),%rax
movzbl (%rax,%rcx,1),%eax
and    $0xf8,%eax
shl    $0x8,%eax
mov    (%r9,%r10,8),%rcx
movzbl 0x1(%r11),%r10d
mov    -0x50(%rbp),%r9
add    (%r9,%r10,8),%rcx
sar    $0x10,%rcx
add    %ebx,%ecx
movslq %ecx,%r9
mov    %rdx,%rcx
and    $0xfe,%rcx
shr    %rcx
add    %r15,%rcx
movzbl (%rcx,%r9,1),%ecx
and    $0xfc,%ecx
lea    (%rax,%rcx,8),%ecx
add    (%r14,%r10,4),%ebx
movslq %ebx,%rax
add    %r15,%rax
movzbl (%rax,%rdi,1),%eax
shr    $0x3,%eax
add    %ecx,%eax
shl    $0x10,%eax
add    %r13d,%eax
mov    -0x38(%rbp),%rcx
mov    %eax,(%rcx)
shr    $0x8,%rdx
shl    $0x18,%rdi
lea    (%rdx,%rdi,1),%rax
add    $0x2,%r8
add    $0x2,%rsi
add    $0x2,%r11
add    $0x4,%rcx
mov    -0x78(%rbp),%rdx
lea    0x1(%rdx),%edi
mov    -0x48(%rbp),%r9
mov    -0x70(%rbp),%rbx
mov    -0x50(%rbp),%r10
mov    %rbx,%rdx
shr    %edx
cmp    %edi,%edx
ja     1d846 <ycc_rgb565D_convert_le+0x76>
mov    -0x60(%rbp),%rdx
lea    0x1(%rdx),%r13d
mov    -0x30(%rbp),%rdx
add    $0x8,%rdx
mov    %rbx,%rdi
and    $0x1,%edi
test   %edi,%edi
jne    1d9d4 <ycc_rgb565D_convert_le+0x204>
xor    %edi,%edi
mov    -0x58(%rbp),%rsi
mov    -0x68(%rbp),%r8
lea    -0x1(%r8),%ecx
test   %ecx,%ecx
jns    1da5e <ycc_rgb565D_convert_le+0x28e>
mov    -0x8(%rbp),%rbx
mov    -0x10(%rbp),%r12
mov    -0x18(%rbp),%r13
mov    -0x20(%rbp),%r14
mov    -0x28(%rbp),%r15
leaveq 
retq   
movzbl (%r8),%edi
movzbl (%rsi),%r8d
mov    %rdi,%rsi
add    (%r12,%r8,4),%esi
movslq %esi,%rsi
movzbl %al,%r12d
mov    %rdx,-0x78(%rbp)
lea    (%r15,%r12,1),%rdx
movzbl (%rdx,%rsi,1),%esi
and    $0xf8,%si
shl    $0x8,%esi
mov    (%r9,%r8,8),%rdx
movzbl (%r11),%r11d
add    (%r10,%r11,8),%rdx
sar    $0x10,%rdx
add    %edi,%edx
movslq %edx,%r8
mov    %rax,%rdx
and    $0xfe,%rdx
shr    %rdx
add    %r15,%rdx
movzbl (%rdx,%r8,1),%edx
and    $0xfc,%dx
lea    (%rsi,%rdx,8),%esi
add    (%r14,%r11,4),%edi
movslq %edi,%rdx
add    %r15,%rdx
movzbl (%r12,%rdx,1),%edx
shr    $0x3,%edx
add    %esi,%edx
mov    %dx,(%rcx)
mov    -0x78(%rbp),%rdx
mov    -0x40(%rbp),%r12
xor    %edi,%edi
mov    -0x58(%rbp),%rsi
mov    -0x68(%rbp),%r8
jmpq   1d9b2 <ycc_rgb565D_convert_le+0x1e2>
mov    (%rsi),%r8
mov    %rcx,-0x68(%rbp)
mov    %r13d,%ecx
mov    (%r8,%rcx,8),%r8
mov    %r13,-0x60(%rbp)
mov    0x8(%rsi),%r11
mov    (%r11,%rcx,8),%r11
mov    0x10(%rsi),%rsi
mov    (%rsi,%rcx,8),%rsi
mov    (%rdx),%rcx
mov    %rdx,-0x30(%rbp)
mov    %rcx,%rdx
and    $0x3,%rdx
test   %rdx,%rdx
je     1d981 <ycc_rgb565D_convert_le+0x1b1>
movzbl (%r8),%r13d
movzbl (%rsi),%edx
mov    %r13,%rdi
add    (%r12,%rdx,4),%edi
movslq %edi,%rdi
movzbl %al,%r12d
mov    %rbx,-0x78(%rbp)
lea    (%r15,%r12,1),%rbx
movzbl (%rbx,%rdi,1),%edi
and    $0xf8,%di
shl    $0x8,%edi
mov    (%r9,%rdx,8),%rdx
movzbl (%r11),%ebx
add    (%r10,%rbx,8),%rdx
sar    $0x10,%rdx
add    %r13d,%edx
movslq %edx,%r10
mov    %rax,%rdx
and    $0xfe,%rdx
shr    %rdx
add    %r15,%rdx
movzbl (%rdx,%r10,1),%edx
and    $0xfc,%dx
lea    (%rdi,%rdx,8),%edi
add    (%r14,%rbx,4),%r13d
movslq %r13d,%rdx
add    %r15,%rdx
movzbl (%r12,%rdx,1),%edx
shr    $0x3,%edx
add    %edi,%edx
mov    %dx,(%rcx)
add    $0x1,%r8
add    $0x1,%rsi
add    $0x1,%r11
add    $0x2,%rcx
mov    -0x78(%rbp),%rdx
lea    -0x1(%rdx),%ebx
mov    -0x50(%rbp),%r10
mov    -0x40(%rbp),%r12
xor    %edi,%edi
jmpq   1d981 <ycc_rgb565D_convert_le+0x1b1>

000000000001db30 <rgb_rgb565_convert_le>:
push   %rbp
mov    %rsp,%rbp
sub    $0x30,%rsp
mov    %rbx,-0x8(%rbp)
mov    %r12,-0x10(%rbp)
mov    %r13,-0x18(%rbp)
mov    %r14,-0x20(%rbp)
mov    %r15,-0x28(%rbp)
mov    0x88(%rdi),%r13d
xor    %r14d,%r14d
jmpq   1dbff <rgb_rgb565_convert_le+0xcf>
movzbl (%rdi),%eax
and    $0xf8,%eax
shl    $0x8,%eax
movzbl (%r10),%r11d
and    $0xfc,%r11d
lea    (%rax,%r11,8),%r11d
movzbl (%rbx),%eax
shr    $0x3,%eax
lea    (%r11,%rax,1),%r15d
movzbl 0x1(%rdi),%eax
and    $0xf8,%eax
shl    $0x8,%eax
movzbl 0x1(%r10),%r11d
and    $0xfc,%r11d
lea    (%rax,%r11,8),%r11d
movzbl 0x1(%rbx),%eax
shr    $0x3,%eax
add    %r11d,%eax
shl    $0x10,%eax
add    %r15d,%eax
mov    %eax,(%r9)
add    $0x2,%rdi
add    $0x2,%r10
add    $0x2,%rbx
add    $0x4,%r9
add    $0x1,%r12d
mov    %r13,%rax
shr    %eax
cmp    %r12d,%eax
ja     1db5b <rgb_rgb565_convert_le+0x2b>
add    $0x1,%edx
add    $0x8,%rcx
mov    %r13,%rax
and    $0x1,%eax
test   %eax,%eax
je     1dbff <rgb_rgb565_convert_le+0xcf>
movzbl (%rdi),%eax
and    $0xf8,%ax
shl    $0x8,%eax
movzbl (%r10),%edi
and    $0xfc,%di
lea    (%rax,%rdi,8),%edi
movzbl (%rbx),%eax
shr    $0x3,%eax
add    %edi,%eax
mov    %ax,(%r9)
add    $0xffffffff,%r8d
test   %r8d,%r8d
jns    1dc1e <rgb_rgb565_convert_le+0xee>
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
leaveq 
retq   
mov    (%rsi),%rax
mov    %edx,%ebx
mov    (%rax,%rbx,8),%rdi
mov    0x8(%rsi),%rax
mov    (%rax,%rbx,8),%r10
mov    0x10(%rsi),%rax
mov    (%rax,%rbx,8),%rbx
mov    (%rcx),%r9
mov    %r9,%rax
and    $0x3,%rax
test   %rax,%rax
jne    1dc4e <rgb_rgb565_convert_le+0x11e>
mov    %r14,%r12
jmpq   1dbc2 <rgb_rgb565_convert_le+0x92>
movzbl (%rdi),%eax
and    $0xf8,%ax
shl    $0x8,%eax
movzbl (%r10),%r11d
and    $0xfc,%r11w
lea    (%rax,%r11,8),%r11d
movzbl (%rbx),%eax
shr    $0x3,%eax
add    %r11d,%eax
mov    %ax,(%r9)
add    $0x1,%rdi
add    $0x1,%r10
add    $0x1,%rbx
add    $0x2,%r9
add    $0xffffffff,%r13d
mov    %r14,%r12
jmpq   1dbc2 <rgb_rgb565_convert_le+0x92>
nop

000000000001dc90 <rgb_rgb565D_convert_le>:
push   %rbp
mov    %rsp,%rbp
sub    $0x50,%rsp
mov    %rsi,-0x40(%rbp)
mov    %rbx,-0x8(%rbp)
mov    %r12,-0x10(%rbp)
mov    %r13,-0x18(%rbp)
mov    %r14,-0x20(%rbp)
mov    %r15,-0x28(%rbp)
mov    0x1a8(%rdi),%r14
mov    0x88(%rdi),%r12d
lea    0x3bc3b(%rip),%rbx        # 59900 <dither_matrix>
mov    0xa8(%rdi),%eax
and    $0x3,%eax
mov    %eax,%eax
mov    (%rbx,%rax,8),%rax
mov    $0xffffff00,%ebx
xor    %edi,%edi
jmpq   1dde6 <rgb_rgb565D_convert_le+0x156>
mov    %rax,%rcx
and    %rbx,%rcx
shr    $0x8,%rcx
movzbl %al,%r15d
mov    %r15,%rdx
shl    $0x18,%rdx
lea    (%rdx,%rcx,1),%r11
movzbl %r11b,%ebx
lea    (%r14,%rbx,1),%rcx
movzbl 0x1(%r10),%edx
movzbl (%rcx,%rdx,1),%ecx
and    $0xf8,%ecx
shl    $0x8,%ecx
mov    %r11,%rdx
and    $0xfe,%rdx
shr    %rdx
add    %r14,%rdx
movzbl 0x1(%r8),%r13d
movzbl (%rdx,%r13,1),%edx
and    $0xfc,%edx
lea    (%rcx,%rdx,8),%edx
movzbl 0x1(%rsi),%ecx
add    %r14,%rcx
movzbl (%rcx,%rbx,1),%ecx
shr    $0x3,%ecx
add    %ecx,%edx
shl    $0x10,%edx
lea    (%r14,%r15,1),%r13
movzbl (%r10),%ecx
movzbl 0x0(%r13,%rcx,1),%ecx
and    $0xf8,%ecx
shl    $0x8,%ecx
and    $0xfe,%rax
shr    %rax
add    %r14,%rax
movzbl (%r8),%r13d
movzbl (%rax,%r13,1),%eax
and    $0xfc,%eax
lea    (%rcx,%rax,8),%ecx
movzbl (%rsi),%eax
add    %r14,%rax
movzbl (%rax,%r15,1),%eax
shr    $0x3,%eax
add    %ecx,%eax
add    %edx,%eax
mov    %eax,(%r9)
shr    $0x8,%r11
shl    $0x18,%rbx
lea    (%r11,%rbx,1),%rax
add    $0x2,%r10
add    $0x2,%r8
add    $0x2,%rsi
add    $0x4,%r9
add    $0x1,%edi
mov    $0xffffff00,%ebx
mov    %r12,%rcx
shr    %ecx
cmp    %edi,%ecx
ja     1dce0 <rgb_rgb565D_convert_le+0x50>
mov    -0x48(%rbp),%rcx
lea    0x1(%rcx),%edx
mov    -0x38(%rbp),%rcx
add    $0x8,%rcx
mov    %r12,%rdi
and    $0x1,%edi
test   %edi,%edi
jne    1de05 <rgb_rgb565D_convert_le+0x175>
xor    %edi,%edi
mov    -0x30(%rbp),%r8
mov    -0x40(%rbp),%rsi
lea    -0x1(%r8),%r11d
test   %r11d,%r11d
jns    1de62 <rgb_rgb565D_convert_le+0x1d2>
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
leaveq 
retq   
movzbl %al,%r13d
lea    (%r14,%r13,1),%r11
movzbl (%r10),%edi
movzbl (%r11,%rdi,1),%edi
and    $0xf8,%di
shl    $0x8,%edi
mov    %rax,%r10
and    $0xfe,%r10
shr    %r10
add    %r14,%r10
movzbl (%r8),%r8d
movzbl (%r10,%r8,1),%r8d
and    $0xfc,%r8w
lea    (%rdi,%r8,8),%edi
movzbl (%rsi),%esi
add    %r14,%rsi
movzbl 0x0(%r13,%rsi,1),%esi
shr    $0x3,%esi
add    %edi,%esi
mov    %si,(%r9)
xor    %edi,%edi
mov    -0x30(%rbp),%r8
mov    -0x40(%rbp),%rsi
jmp    1dde6 <rgb_rgb565D_convert_le+0x156>
mov    (%rsi),%r8
mov    %edx,%r9d
mov    (%r8,%r9,8),%r10
mov    0x8(%rsi),%r8
mov    (%r8,%r9,8),%r8
mov    0x10(%rsi),%rsi
mov    (%rsi,%r9,8),%rsi
mov    (%rcx),%r9
mov    %r9,%r13
and    $0x3,%r13
test   %r13,%r13
jne    1de9c <rgb_rgb565D_convert_le+0x20c>
mov    %r11,-0x30(%rbp)
mov    %rcx,-0x38(%rbp)
mov    %rdx,-0x48(%rbp)
jmpq   1ddb6 <rgb_rgb565D_convert_le+0x126>
movzbl %al,%r15d
lea    (%r14,%r15,1),%r13
mov    %r11,-0x30(%rbp)
movzbl (%r10),%r11d
movzbl 0x0(%r13,%r11,1),%r11d
and    $0xf8,%r11w
shl    $0x8,%r11d
mov    %rax,%r13
and    $0xfe,%r13
shr    %r13
add    %r14,%r13
mov    %rcx,-0x38(%rbp)
movzbl (%r8),%ecx
movzbl 0x0(%r13,%rcx,1),%ecx
and    $0xfc,%cx
lea    (%r11,%rcx,8),%r11d
movzbl (%rsi),%ecx
add    %r14,%rcx
movzbl (%r15,%rcx,1),%ecx
shr    $0x3,%ecx
add    %r11d,%ecx
mov    %cx,(%r9)
add    $0x1,%r10
add    $0x1,%r8
add    $0x1,%rsi
add    $0x2,%r9
add    $0xffffffff,%r12d
mov    %rdx,-0x48(%rbp)
jmpq   1ddb6 <rgb_rgb565D_convert_le+0x126>
data16 nopw %cs:0x0(%rax,%rax,1)

000000000001df20 <gray_rgb565_convert_le>:
push   %rbp
mov    %rsp,%rbp
sub    $0x20,%rsp
mov    %r12,-0x8(%rbp)
mov    %r13,-0x10(%rbp)
mov    %r14,-0x18(%rbp)
mov    %r15,-0x20(%rbp)
mov    0x88(%rdi),%r12d
xor    %r13d,%r13d
jmpq   1dff3 <gray_rgb565_convert_le+0xd3>
movzbl (%rax),%r10d
mov    %r10,%r9
and    $0xf8,%r9d
shl    $0x8,%r9d
mov    %r10,%r14
and    $0xfc,%r14d
lea    (%r9,%r14,8),%r9d
shr    $0x3,%r10d
lea    (%r9,%r10,1),%r15d
movzbl 0x1(%rax),%r9d
mov    %r9,%r10
and    $0xf8,%r10d
shl    $0x8,%r10d
mov    %r9,%r14
and    $0xfc,%r14d
lea    (%r10,%r14,8),%r10d
shr    $0x3,%r9d
add    %r10d,%r9d
shl    $0x10,%r9d
add    %r15d,%r9d
mov    %r9d,(%rdi)
add    $0x2,%rax
add    $0x4,%rdi
add    $0x1,%r11d
mov    %r12,%r9
shr    %r9d
cmp    %r11d,%r9d
ja     1df47 <gray_rgb565_convert_le+0x27>
add    $0x1,%edx
add    $0x8,%rcx
mov    %r12,%r9
and    $0x1,%r9d
test   %r9d,%r9d
je     1dff3 <gray_rgb565_convert_le+0xd3>
movzbl (%rax),%eax
mov    %rax,%r9
and    $0xf8,%r9d
shl    $0x8,%r9d
mov    %rax,%r10
and    $0xfc,%r10d
lea    (%r9,%r10,8),%r9d
shr    $0x3,%eax
add    %r9d,%eax
mov    %ax,(%rdi)
add    $0xffffffff,%r8d
test   %r8d,%r8d
jns    1e00e <gray_rgb565_convert_le+0xee>
mov    -0x20(%rbp),%r15
mov    -0x18(%rbp),%r14
mov    -0x10(%rbp),%r13
mov    -0x8(%rbp),%r12
leaveq 
retq   
mov    (%rsi),%rdi
mov    %edx,%eax
mov    (%rdi,%rax,8),%rax
mov    (%rcx),%rdi
mov    %rdi,%r9
and    $0x3,%r9
test   %r9,%r9
jne    1e02b <gray_rgb565_convert_le+0x10b>
mov    %r13,%r11
jmp    1dfad <gray_rgb565_convert_le+0x8d>
movzbl (%rax),%r10d
mov    %r10,%r9
and    $0xf8,%r9d
shl    $0x8,%r9d
mov    %r10,%r11
and    $0xfc,%r11d
lea    (%r9,%r11,8),%r9d
shr    $0x3,%r10d
add    %r10d,%r9d
mov    %r9w,(%rdi)
add    $0x1,%rax
add    $0x2,%rdi
add    $0xffffffff,%r12d
mov    %r13,%r11
jmpq   1dfad <gray_rgb565_convert_le+0x8d>
nopw   0x0(%rax,%rax,1)

000000000001e070 <gray_rgb565D_convert_le>:
push   %rbp
mov    %rsp,%rbp
sub    $0x40,%rsp
mov    %rbx,-0x8(%rbp)
mov    %r12,-0x10(%rbp)
mov    %r13,-0x18(%rbp)
mov    %r14,-0x20(%rbp)
mov    %r15,-0x28(%rbp)
mov    0x1a8(%rdi),%r13
mov    0x88(%rdi),%r11d
lea    0x3b85f(%rip),%rbx        # 59900 <dither_matrix>
mov    0xa8(%rdi),%eax
and    $0x3,%eax
mov    %eax,%eax
mov    (%rbx,%rax,8),%rax
mov    $0xffffff00,%r15d
xor    %edi,%edi
jmpq   1e179 <gray_rgb565D_convert_le+0x109>
movzbl %al,%ecx
lea    0x0(%r13,%rcx,1),%rdx
movzbl (%r9),%r10d
movzbl (%rdx,%r10,1),%edx
mov    %rdx,%r10
and    $0xf8,%r10d
shl    $0x8,%r10d
mov    %rdx,%r12
and    $0xfc,%r12d
lea    (%r10,%r12,8),%r10d
shr    $0x3,%edx
lea    (%r10,%rdx,1),%r14d
and    %r15,%rax
shr    $0x8,%rax
shl    $0x18,%rcx
add    %rcx,%rax
movzbl %al,%ecx
lea    0x0(%r13,%rcx,1),%rdx
movzbl 0x1(%r9),%r10d
movzbl (%rdx,%r10,1),%edx
mov    %rdx,%r10
and    $0xf8,%r10d
shl    $0x8,%r10d
mov    %rdx,%r12
and    $0xfc,%r12d
lea    (%r10,%r12,8),%r10d
shr    $0x3,%edx
add    %r10d,%edx
shl    $0x10,%edx
add    %r14d,%edx
mov    %edx,(%rbx)
shr    $0x8,%rax
shl    $0x18,%rcx
add    %rcx,%rax
add    $0x2,%r9
add    $0x4,%rbx
add    $0x1,%edi
mov    %r11,%rcx
shr    %ecx
cmp    %edi,%ecx
ja     1e0bd <gray_rgb565D_convert_le+0x4d>
mov    -0x38(%rbp),%rcx
lea    0x1(%rcx),%edx
mov    -0x30(%rbp),%rcx
add    $0x8,%rcx
mov    %r11,%rdi
and    $0x1,%edi
test   %edi,%edi
jne    1e198 <gray_rgb565D_convert_le+0x128>
xor    %edi,%edi
add    $0xffffffff,%r8d
test   %r8d,%r8d
jns    1e1d2 <gray_rgb565D_convert_le+0x162>
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
leaveq 
retq   
movzbl %al,%edi
lea    0x0(%r13,%rdi,1),%r10
movzbl (%r9),%edi
movzbl (%r10,%rdi,1),%edi
mov    %rdi,%r9
and    $0xf8,%r9d
shl    $0x8,%r9d
mov    %rdi,%r10
and    $0xfc,%r10d
lea    (%r9,%r10,8),%r9d
shr    $0x3,%edi
add    %r9d,%edi
mov    %di,(%rbx)
xor    %edi,%edi
jmp    1e179 <gray_rgb565D_convert_le+0x109>
mov    (%rsi),%rbx
mov    %edx,%r9d
mov    (%rbx,%r9,8),%r9
mov    (%rcx),%rbx
mov    %rbx,%r10
and    $0x3,%r10
test   %r10,%r10
jne    1e1f8 <gray_rgb565D_convert_le+0x188>
mov    %rdx,-0x38(%rbp)
mov    %rcx,-0x30(%rbp)
jmpq   1e151 <gray_rgb565D_convert_le+0xe1>
movzbl %al,%r10d
lea    0x0(%r13,%r10,1),%r12
movzbl (%r9),%r10d
movzbl (%r12,%r10,1),%r12d
mov    %r12,%r10
and    $0xf8,%r10d
shl    $0x8,%r10d
mov    %r12,%r14
and    $0xfc,%r14d
lea    (%r10,%r14,8),%r10d
shr    $0x3,%r12d
add    %r12d,%r10d
mov    %r10w,(%rbx)
add    $0x1,%r9
add    $0x2,%rbx
add    $0xffffffff,%r11d
mov    %rdx,-0x38(%rbp)
mov    %rcx,-0x30(%rbp)
jmpq   1e151 <gray_rgb565D_convert_le+0xe1>
nopw   0x0(%rax,%rax,1)

000000000001e250 <ycc_rgb565_convert_be>:
push   %rbp
mov    %rsp,%rbp
sub    $0x60,%rsp
mov    %r15,-0x28(%rbp)
mov    %r14,-0x20(%rbp)
mov    %rsi,-0x40(%rbp)
mov    %rbx,-0x8(%rbp)
mov    %r12,-0x10(%rbp)
mov    %r13,-0x18(%rbp)
mov    0x88(%rdi),%ebx
mov    0x1a8(%rdi),%r15
mov    0x268(%rdi),%rax
mov    0x10(%rax),%r13
mov    0x18(%rax),%r12
mov    0x20(%rax),%r14
mov    0x28(%rax),%r9
mov    %r9,-0x38(%rbp)
xor    %edi,%edi
jmpq   1e3bb <ycc_rgb565_convert_be+0x16b>
movzbl (%r11),%ecx
mov    (%r14,%rcx,8),%rax
movzbl (%rsi),%edx
add    (%r9,%rdx,8),%rax
sar    $0x10,%rax
mov    %rbx,-0x58(%rbp)
movzbl (%r8),%ebx
add    %ebx,%eax
movslq %eax,%rax
movzbl (%rax,%r15,1),%eax
mov    %rdi,-0x60(%rbp)
mov    %rax,%rdi
shr    $0x5,%edi
mov    0x0(%r13,%rcx,4),%ecx
add    %ebx,%ecx
movslq %ecx,%rcx
movzbl (%rcx,%r15,1),%ecx
and    $0xf8,%ecx
add    %edi,%ecx
and    $0x1c,%eax
shl    $0xb,%eax
add    %eax,%ecx
add    (%r12,%rdx,4),%ebx
movslq %ebx,%rax
movzbl (%rax,%r15,1),%eax
and    $0xf8,%eax
shl    $0x5,%eax
add    %eax,%ecx
shl    $0x10,%ecx
movzbl 0x1(%r11),%edi
mov    (%r14,%rdi,8),%rax
movzbl 0x1(%rsi),%ebx
add    (%r9,%rbx,8),%rax
sar    $0x10,%rax
movzbl 0x1(%r8),%edx
add    %edx,%eax
movslq %eax,%rax
movzbl (%rax,%r15,1),%eax
mov    %rax,%r9
shr    $0x5,%r9d
mov    0x0(%r13,%rdi,4),%edi
add    %edx,%edi
movslq %edi,%rdi
movzbl (%r15,%rdi,1),%edi
and    $0xf8,%edi
add    %r9d,%edi
and    $0x1c,%eax
shl    $0xb,%eax
add    %eax,%edi
add    (%r12,%rbx,4),%edx
movslq %edx,%rax
movzbl (%r15,%rax,1),%eax
and    $0xf8,%eax
shl    $0x5,%eax
add    %edi,%eax
add    %ecx,%eax
mov    %eax,(%r10)
add    $0x2,%r11
add    $0x2,%rsi
add    $0x2,%r8
add    $0x4,%r10
mov    -0x60(%rbp),%rax
lea    0x1(%rax),%edi
mov    -0x58(%rbp),%rbx
mov    -0x38(%rbp),%r9
mov    %rbx,%rax
shr    %eax
cmp    %edi,%eax
ja     1e29f <ycc_rgb565_convert_be+0x4f>
mov    -0x48(%rbp),%rax
lea    0x1(%rax),%edx
mov    -0x30(%rbp),%rax
lea    0x8(%rax),%rcx
mov    %rbx,%rax
and    $0x1,%eax
test   %eax,%eax
jne    1e3dd <ycc_rgb565_convert_be+0x18d>
xor    %edi,%edi
mov    -0x50(%rbp),%r8
mov    -0x40(%rbp),%rsi
lea    -0x1(%r8),%eax
test   %eax,%eax
jns    1e44e <ycc_rgb565_convert_be+0x1fe>
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
mov    -0x20(%rbp),%r14
mov    -0x28(%rbp),%r15
leaveq 
retq   
movzbl (%r11),%edi
mov    (%r14,%rdi,8),%rax
movzbl (%rsi),%r11d
add    (%r9,%r11,8),%rax
sar    $0x10,%rax
movzbl (%r8),%esi
add    %esi,%eax
movslq %eax,%rax
movzbl (%r15,%rax,1),%eax
mov    %rax,%r8
shr    $0x5,%r8d
mov    0x0(%r13,%rdi,4),%edi
add    %esi,%edi
movslq %edi,%rdi
movzbl (%r15,%rdi,1),%edi
and    $0xf8,%edi
add    %r8d,%edi
and    $0x1c,%eax
shl    $0xb,%eax
add    %eax,%edi
add    (%r12,%r11,4),%esi
movslq %esi,%rax
movzbl (%r15,%rax,1),%eax
and    $0xf8,%ax
shl    $0x5,%eax
add    %edi,%eax
mov    %ax,(%r10)
xor    %edi,%edi
mov    -0x50(%rbp),%r8
mov    -0x40(%rbp),%rsi
jmpq   1e3bb <ycc_rgb565_convert_be+0x16b>
mov    0x10(%rsi),%r8
mov    %edx,%r10d
mov    (%r8,%r10,8),%r11
mov    (%rsi),%r8
mov    (%r8,%r10,8),%r8
mov    0x8(%rsi),%rsi
mov    (%rsi,%r10,8),%rsi
mov    (%rcx),%r10
mov    %rax,-0x50(%rbp)
mov    %r10,%rax
and    $0x3,%rax
test   %rax,%rax
jne    1e488 <ycc_rgb565_convert_be+0x238>
mov    %rcx,-0x30(%rbp)
mov    %rdx,-0x48(%rbp)
jmpq   1e38b <ycc_rgb565_convert_be+0x13b>
movzbl (%r11),%edi
mov    %rcx,-0x30(%rbp)
mov    (%r14,%rdi,8),%rax
mov    %rdx,-0x48(%rbp)
movzbl (%rsi),%edx
add    (%r9,%rdx,8),%rax
sar    $0x10,%rax
movzbl (%r8),%ecx
add    %ecx,%eax
movslq %eax,%rax
movzbl (%r15,%rax,1),%eax
mov    %rax,%r9
shr    $0x5,%r9d
mov    0x0(%r13,%rdi,4),%edi
add    %ecx,%edi
movslq %edi,%rdi
movzbl (%r15,%rdi,1),%edi
and    $0xf8,%edi
add    %r9d,%edi
and    $0x1c,%eax
shl    $0xb,%eax
add    %eax,%edi
add    (%r12,%rdx,4),%ecx
movslq %ecx,%rax
movzbl (%r15,%rax,1),%eax
and    $0xf8,%ax
shl    $0x5,%eax
add    %edi,%eax
mov    %ax,(%r10)
add    $0x1,%r11
add    $0x1,%rsi
add    $0x1,%r8
add    $0x2,%r10
add    $0xffffffff,%ebx
mov    -0x38(%rbp),%r9
xor    %edi,%edi
jmpq   1e38b <ycc_rgb565_convert_be+0x13b>
nop

000000000001e510 <ycc_rgb565D_convert_be>:
push   %rbp
mov    %rsp,%rbp
sub    $0x80,%rsp
mov    %r15,-0x28(%rbp)
mov    %r14,-0x20(%rbp)
mov    %r13,-0x18(%rbp)
mov    %r12,-0x10(%rbp)
mov    %rsi,-0x58(%rbp)
mov    %rbx,-0x8(%rbp)
mov    0x88(%rdi),%ebx
mov    0x1a8(%rdi),%r15
mov    0x268(%rdi),%rax
mov    0x10(%rax),%r11
mov    %r11,-0x40(%rbp)
mov    0x18(%rax),%r14
mov    0x20(%rax),%r10
mov    %r10,-0x48(%rbp)
mov    0x28(%rax),%r12
mov    %r12,-0x50(%rbp)
lea    0x3b396(%rip),%r9        # 59900 <dither_matrix>
mov    0xa8(%rdi),%eax
and    $0x3,%eax
mov    %eax,%eax
mov    (%r9,%rax,8),%rdi
mov    %rcx,%rax
xor    %r9d,%r9d
jmpq   1e716 <ycc_rgb565D_convert_be+0x206>
movzbl (%r8),%edx
mov    (%r10,%rdx,8),%rax
mov    %rbx,-0x78(%rbp)
movzbl (%rcx),%ebx
add    (%r12,%rbx,8),%rax
sar    $0x10,%rax
mov    %r9,-0x80(%rbp)
movzbl 0x0(%r13),%r9d
add    %r9d,%eax
movslq %eax,%rax
mov    %rsi,-0x38(%rbp)
mov    %rdi,%rsi
and    $0xfe,%rsi
shr    %rsi
add    %r15,%rsi
movzbl (%rsi,%rax,1),%eax
mov    %rax,%rsi
shr    $0x5,%esi
mov    (%r11,%rdx,4),%edx
add    %r9d,%edx
movslq %edx,%rdx
movzbl %dil,%r11d
mov    %rdi,-0x68(%rbp)
lea    (%r15,%r11,1),%rdi
movzbl (%rdi,%rdx,1),%edx
and    $0xf8,%edx
add    %esi,%edx
and    $0x1c,%eax
shl    $0xb,%eax
add    %eax,%edx
add    (%r14,%rbx,4),%r9d
movslq %r9d,%rax
add    %r15,%rax
movzbl (%rax,%r11,1),%eax
and    $0xf8,%eax
shl    $0x5,%eax
add    %eax,%edx
shl    $0x10,%edx
movzbl 0x1(%r8),%r9d
mov    (%r10,%r9,8),%rax
movzbl 0x1(%rcx),%r10d
add    (%r12,%r10,8),%rax
sar    $0x10,%rax
movzbl 0x1(%r13),%edi
add    %edi,%eax
movslq %eax,%rbx
mov    -0x68(%rbp),%rax
mov    $0xffffff00,%esi
and    %rsi,%rax
shr    $0x8,%rax
shl    $0x18,%r11
lea    (%r11,%rax,1),%rsi
mov    %rsi,%rax
and    $0xfe,%rax
shr    %rax
add    %r15,%rax
movzbl (%rax,%rbx,1),%eax
mov    %rax,%r11
shr    $0x5,%r11d
mov    -0x40(%rbp),%rbx
mov    (%rbx,%r9,4),%ebx
add    %edi,%ebx
movslq %ebx,%r9
movzbl %sil,%ebx
lea    (%r15,%rbx,1),%r12
movzbl (%r12,%r9,1),%r9d
and    $0xf8,%r9d
add    %r11d,%r9d
and    $0x1c,%eax
shl    $0xb,%eax
add    %eax,%r9d
add    (%r14,%r10,4),%edi
movslq %edi,%rax
add    %r15,%rax
movzbl (%rax,%rbx,1),%eax
and    $0xf8,%eax
shl    $0x5,%eax
add    %r9d,%eax
add    %eax,%edx
mov    -0x38(%rbp),%rax
mov    %edx,(%rax)
shr    $0x8,%rsi
shl    $0x18,%rbx
lea    (%rsi,%rbx,1),%rdi
add    $0x2,%r8
add    $0x2,%rcx
add    $0x2,%r13
lea    0x4(%rax),%rsi
mov    -0x80(%rbp),%rax
lea    0x1(%rax),%r9d
mov    -0x78(%rbp),%rbx
mov    -0x40(%rbp),%r11
mov    -0x48(%rbp),%r10
mov    -0x50(%rbp),%r12
mov    %rbx,%rax
shr    %eax
cmp    %r9d,%eax
ja     1e584 <ycc_rgb565D_convert_be+0x74>
mov    -0x60(%rbp),%rax
lea    0x1(%rax),%edx
mov    -0x30(%rbp),%rax
add    $0x8,%rax
mov    %rbx,%r9
and    $0x1,%r9d
test   %r9d,%r9d
jne    1e738 <ycc_rgb565D_convert_be+0x228>
xor    %r9d,%r9d
mov    -0x58(%rbp),%rsi
mov    -0x70(%rbp),%r8
lea    -0x1(%r8),%ecx
test   %ecx,%ecx
jns    1e7d7 <ycc_rgb565D_convert_be+0x2c7>
mov    -0x8(%rbp),%rbx
mov    -0x10(%rbp),%r12
mov    -0x18(%rbp),%r13
mov    -0x20(%rbp),%r14
mov    -0x28(%rbp),%r15
leaveq 
retq   
movzbl (%r8),%r9d
mov    (%r10,%r9,8),%r8
movzbl (%rcx),%r10d
add    (%r12,%r10,8),%r8
sar    $0x10,%r8
movzbl 0x0(%r13),%r12d
lea    (%r8,%r12,1),%ecx
movslq %ecx,%r8
mov    %rdi,%rcx
and    $0xfe,%rcx
shr    %rcx
add    %r15,%rcx
movzbl (%rcx,%r8,1),%ecx
mov    %rcx,%r13
shr    $0x5,%r13d
mov    %r12,%r8
add    (%r11,%r9,4),%r8d
movslq %r8d,%r8
movzbl %dil,%r11d
lea    (%r15,%r11,1),%r9
movzbl (%r9,%r8,1),%r8d
and    $0xf8,%r8d
add    %r13d,%r8d
and    $0x1c,%ecx
shl    $0xb,%ecx
add    %ecx,%r8d
add    (%r14,%r10,4),%r12d
movslq %r12d,%rcx
add    %r15,%rcx
movzbl (%r11,%rcx,1),%ecx
and    $0xf8,%cx
shl    $0x5,%ecx
add    %r8d,%ecx
mov    %cx,(%rsi)
mov    -0x40(%rbp),%r11
mov    -0x48(%rbp),%r10
mov    -0x50(%rbp),%r12
xor    %r9d,%r9d
mov    -0x58(%rbp),%rsi
mov    -0x70(%rbp),%r8
jmpq   1e716 <ycc_rgb565D_convert_be+0x206>
mov    0x10(%rsi),%r8
mov    %rcx,-0x70(%rbp)
mov    %edx,%ecx
mov    (%r8,%rcx,8),%r8
mov    %rdx,-0x60(%rbp)
mov    (%rsi),%rdx
mov    (%rdx,%rcx,8),%r13
mov    0x8(%rsi),%rdx
mov    (%rdx,%rcx,8),%rcx
mov    (%rax),%rsi
mov    %rax,-0x30(%rbp)
mov    %rsi,%rax
and    $0x3,%rax
test   %rax,%rax
je     1e6e2 <ycc_rgb565D_convert_be+0x1d2>
movzbl (%r8),%edx
mov    (%r10,%rdx,8),%rax
movzbl (%rcx),%r10d
add    (%r12,%r10,8),%rax
sar    $0x10,%rax
movzbl 0x0(%r13),%r9d
add    %r9d,%eax
movslq %eax,%r12
mov    %rdi,%rax
and    $0xfe,%rax
shr    %rax
add    %r15,%rax
movzbl (%rax,%r12,1),%eax
mov    %rax,%r12
shr    $0x5,%r12d
mov    (%r11,%rdx,4),%edx
add    %r9d,%edx
movslq %edx,%rdx
movzbl %dil,%r11d
mov    %rdi,-0x80(%rbp)
lea    (%r15,%r11,1),%rdi
movzbl (%rdi,%rdx,1),%edx
and    $0xf8,%edx
add    %r12d,%edx
and    $0x1c,%eax
shl    $0xb,%eax
add    %eax,%edx
add    (%r14,%r10,4),%r9d
movslq %r9d,%rax
add    %r15,%rax
movzbl (%r11,%rax,1),%eax
and    $0xf8,%ax
shl    $0x5,%eax
add    %edx,%eax
mov    %ax,(%rsi)
add    $0x1,%r8
add    $0x1,%rcx
add    $0x1,%r13
add    $0x2,%rsi
add    $0xffffffff,%ebx
mov    -0x80(%rbp),%rdi
mov    -0x40(%rbp),%r11
mov    -0x48(%rbp),%r10
mov    -0x50(%rbp),%r12
xor    %r9d,%r9d
jmpq   1e6e2 <ycc_rgb565D_convert_be+0x1d2>
nopw   0x0(%rax,%rax,1)

000000000001e8c0 <rgb_rgb565_convert_be>:
push   %rbp
mov    %rsp,%rbp
sub    $0x30,%rsp
mov    %rbx,-0x8(%rbp)
mov    %r12,-0x10(%rbp)
mov    %r13,-0x18(%rbp)
mov    %r14,-0x20(%rbp)
mov    %r15,-0x28(%rbp)
mov    0x88(%rdi),%r14d
xor    %edi,%edi
jmpq   1e98a <rgb_rgb565_convert_be+0xca>
movzbl (%rbx),%eax
mov    %rax,%r13
shr    $0x5,%r13d
movzbl (%r10),%r12d
and    $0xf8,%r12d
add    %r13d,%r12d
and    $0x1c,%eax
shl    $0xb,%eax
add    %eax,%r12d
movzbl (%r11),%eax
and    $0xf8,%eax
shl    $0x5,%eax
add    %eax,%r12d
shl    $0x10,%r12d
movzbl 0x1(%rbx),%eax
mov    %rax,%r15
shr    $0x5,%r15d
movzbl 0x1(%r10),%r13d
and    $0xf8,%r13d
add    %r15d,%r13d
and    $0x1c,%eax
shl    $0xb,%eax
add    %eax,%r13d
movzbl 0x1(%r11),%eax
and    $0xf8,%eax
shl    $0x5,%eax
add    %r13d,%eax
add    %r12d,%eax
mov    %eax,(%r9)
add    $0x2,%rbx
add    $0x2,%r10
add    $0x2,%r11
add    $0x4,%r9
add    $0x1,%edi
mov    %r14,%rax
shr    %eax
cmp    %edi,%eax
ja     1e8ea <rgb_rgb565_convert_be+0x2a>
add    $0x1,%edx
add    $0x8,%rcx
mov    %r14,%rax
and    $0x1,%eax
test   %eax,%eax
jne    1e9a9 <rgb_rgb565_convert_be+0xe9>
xor    %edi,%edi
add    $0xffffffff,%r8d
test   %r8d,%r8d
jns    1e9db <rgb_rgb565_convert_be+0x11b>
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
leaveq 
retq   
movzbl (%rbx),%eax
mov    %rax,%rbx
shr    $0x5,%ebx
movzbl (%r10),%edi
and    $0xf8,%edi
add    %ebx,%edi
and    $0x1c,%eax
shl    $0xb,%eax
add    %eax,%edi
movzbl (%r11),%eax
and    $0xf8,%ax
shl    $0x5,%eax
add    %edi,%eax
mov    %ax,(%r9)
xor    %edi,%edi
jmp    1e98a <rgb_rgb565_convert_be+0xca>
mov    0x8(%rsi),%rbx
mov    %edx,%eax
mov    (%rbx,%rax,8),%rbx
mov    (%rsi),%r9
mov    (%r9,%rax,8),%r10
mov    0x10(%rsi),%r9
mov    (%r9,%rax,8),%r11
mov    (%rcx),%r9
mov    %r9,%rax
and    $0x3,%rax
test   %rax,%rax
je     1e96a <rgb_rgb565_convert_be+0xaa>
movzbl (%rbx),%eax
mov    %rax,%r13
shr    $0x5,%r13d
movzbl (%r10),%r12d
and    $0xf8,%r12d
add    %r13d,%r12d
and    $0x1c,%eax
shl    $0xb,%eax
add    %eax,%r12d
movzbl (%r11),%eax
and    $0xf8,%ax
shl    $0x5,%eax
add    %r12d,%eax
mov    %ax,(%r9)
add    $0x1,%rbx
add    $0x1,%r10
add    $0x1,%r11
add    $0x2,%r9
add    $0xffffffff,%r14d
jmpq   1e96a <rgb_rgb565_convert_be+0xaa>
data16 nopw %cs:0x0(%rax,%rax,1)
xchg   %ax,%ax

000000000001ea60 <rgb_rgb565D_convert_be>:
push   %rbp
mov    %rsp,%rbp
sub    $0x50,%rsp
mov    %rsi,-0x40(%rbp)
mov    %rbx,-0x8(%rbp)
mov    %r12,-0x10(%rbp)
mov    %r13,-0x18(%rbp)
mov    %r14,-0x20(%rbp)
mov    %r15,-0x28(%rbp)
mov    0x1a8(%rdi),%r14
mov    0x88(%rdi),%ebx
lea    0x3ae6c(%rip),%r9        # 59900 <dither_matrix>
mov    0xa8(%rdi),%eax
and    $0x3,%eax
mov    %eax,%eax
mov    (%r9,%rax,8),%rax
mov    $0xffffff00,%r9d
xor    %edi,%edi
jmpq   1ebd9 <rgb_rgb565D_convert_be+0x179>
mov    %rax,%rcx
and    %r9,%rcx
shr    $0x8,%rcx
movzbl %al,%r15d
mov    %r15,%rdx
shl    $0x18,%rdx
add    %rcx,%rdx
mov    %rdx,%rcx
and    $0xfe,%rcx
shr    %rcx
lea    (%r14,%rcx,1),%r9
movzbl 0x1(%r11),%ecx
movzbl (%r9,%rcx,1),%ecx
mov    %rcx,%r12
shr    $0x5,%r12d
movzbl %dl,%r9d
lea    (%r14,%r9,1),%r13
mov    %rbx,-0x50(%rbp)
movzbl 0x1(%r8),%ebx
movzbl 0x0(%r13,%rbx,1),%ebx
and    $0xf8,%ebx
add    %r12d,%ebx
and    $0x1c,%ecx
shl    $0xb,%ecx
add    %ecx,%ebx
movzbl 0x1(%rsi),%ecx
add    %r14,%rcx
movzbl (%rcx,%r9,1),%ecx
and    $0xf8,%ecx
shl    $0x5,%ecx
add    %ecx,%ebx
and    $0xfe,%rax
shr    %rax
lea    (%r14,%rax,1),%rcx
movzbl (%r11),%eax
movzbl (%rcx,%rax,1),%eax
mov    %rax,%r12
shr    $0x5,%r12d
lea    (%r14,%r15,1),%rcx
movzbl (%r8),%r13d
movzbl (%rcx,%r13,1),%ecx
and    $0xf8,%ecx
add    %r12d,%ecx
and    $0x1c,%eax
shl    $0xb,%eax
add    %eax,%ecx
movzbl (%rsi),%eax
add    %r14,%rax
movzbl (%rax,%r15,1),%eax
and    $0xf8,%eax
shl    $0x5,%eax
add    %ecx,%eax
shl    $0x10,%eax
add    %ebx,%eax
mov    %eax,(%r10)
shr    $0x8,%rdx
shl    $0x18,%r9
lea    (%rdx,%r9,1),%rax
add    $0x2,%r11
add    $0x2,%r8
add    $0x2,%rsi
add    $0x4,%r10
add    $0x1,%edi
mov    -0x50(%rbp),%rbx
mov    $0xffffff00,%r9d
mov    %rbx,%rcx
shr    %ecx
cmp    %edi,%ecx
ja     1eab0 <rgb_rgb565D_convert_be+0x50>
mov    -0x48(%rbp),%rcx
lea    0x1(%rcx),%edx
mov    -0x38(%rbp),%rcx
add    $0x8,%rcx
mov    %rbx,%rdi
and    $0x1,%edi
test   %edi,%edi
jne    1ebfc <rgb_rgb565D_convert_be+0x19c>
xor    %edi,%edi
mov    -0x30(%rbp),%r8
mov    -0x40(%rbp),%rsi
lea    -0x1(%r8),%r15d
test   %r15d,%r15d
jns    1ec69 <rgb_rgb565D_convert_be+0x209>
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
leaveq 
retq   
mov    %rax,%rdi
and    $0xfe,%rdi
shr    %rdi
lea    (%r14,%rdi,1),%r12
movzbl (%r11),%edi
movzbl (%r12,%rdi,1),%edi
mov    %rdi,%r13
shr    $0x5,%r13d
movzbl %al,%r12d
lea    (%r14,%r12,1),%r11
movzbl (%r8),%r8d
movzbl (%r11,%r8,1),%r8d
and    $0xf8,%r8d
add    %r13d,%r8d
and    $0x1c,%edi
shl    $0xb,%edi
add    %r8d,%edi
movzbl (%rsi),%esi
add    %r14,%rsi
movzbl (%r12,%rsi,1),%esi
and    $0xf8,%si
shl    $0x5,%esi
add    %edi,%esi
mov    %si,(%r10)
xor    %edi,%edi
mov    -0x30(%rbp),%r8
mov    -0x40(%rbp),%rsi
jmpq   1ebd9 <rgb_rgb565D_convert_be+0x179>
mov    0x8(%rsi),%r8
mov    %edx,%r10d
mov    (%r8,%r10,8),%r11
mov    (%rsi),%r8
mov    (%r8,%r10,8),%r8
mov    0x10(%rsi),%rsi
mov    (%rsi,%r10,8),%rsi
mov    (%rcx),%r10
mov    %r10,%r12
and    $0x3,%r12
test   %r12,%r12
jne    1eca3 <rgb_rgb565D_convert_be+0x243>
mov    %r15,-0x30(%rbp)
mov    %rcx,-0x38(%rbp)
mov    %rdx,-0x48(%rbp)
jmpq   1eba9 <rgb_rgb565D_convert_be+0x149>
mov    %rax,%r12
and    $0xfe,%r12
shr    %r12
lea    (%r14,%r12,1),%r13
movzbl (%r11),%r12d
movzbl 0x0(%r13,%r12,1),%r13d
mov    %r13,%r12
shr    $0x5,%r12d
mov    %r15,-0x30(%rbp)
movzbl %al,%r15d
mov    %rcx,-0x38(%rbp)
lea    (%r14,%r15,1),%rcx
mov    %rdx,-0x48(%rbp)
movzbl (%r8),%edx
movzbl (%rcx,%rdx,1),%ecx
and    $0xf8,%ecx
add    %r12d,%ecx
and    $0x1c,%r13d
shl    $0xb,%r13d
lea    (%rcx,%r13,1),%edx
movzbl (%rsi),%ecx
add    %r14,%rcx
movzbl (%r15,%rcx,1),%ecx
and    $0xf8,%cx
shl    $0x5,%ecx
add    %edx,%ecx
mov    %cx,(%r10)
add    $0x1,%r11
add    $0x1,%r8
add    $0x1,%rsi
add    $0x2,%r10
add    $0xffffffff,%ebx
jmpq   1eba9 <rgb_rgb565D_convert_be+0x149>
nopw   0x0(%rax,%rax,1)

000000000001ed30 <gray_rgb565_convert_be>:
push   %rbp
mov    %rsp,%rbp
sub    $0x20,%rsp
mov    %r12,-0x8(%rbp)
mov    %r13,-0x10(%rbp)
mov    %r14,-0x18(%rbp)
mov    %r15,-0x20(%rbp)
mov    0x88(%rdi),%r12d
xor    %r13d,%r13d
jmpq   1edff <gray_rgb565_convert_be+0xcf>
movzbl 0x1(%rdi),%eax
mov    %rax,%r14
shr    $0x5,%r14d
mov    %rax,%r10
and    $0xf8,%r10d
add    %r10d,%r14d
and    $0x1c,%eax
shl    $0xb,%eax
add    %r14d,%eax
shl    $0x5,%r10d
lea    (%rax,%r10,1),%r14d
movzbl (%rdi),%eax
mov    %rax,%r15
shr    $0x5,%r15d
mov    %rax,%r10
and    $0xf8,%r10d
add    %r10d,%r15d
and    $0x1c,%eax
shl    $0xb,%eax
add    %r15d,%eax
shl    $0x5,%r10d
add    %r10d,%eax
shl    $0x10,%eax
add    %r14d,%eax
mov    %eax,(%r9)
add    $0x2,%rdi
add    $0x4,%r9
add    $0x1,%r11d
mov    %r12,%rax
shr    %eax
cmp    %r11d,%eax
ja     1ed57 <gray_rgb565_convert_be+0x27>
add    $0x1,%edx
add    $0x8,%rcx
mov    %r12,%rax
and    $0x1,%eax
test   %eax,%eax
je     1edff <gray_rgb565_convert_be+0xcf>
movzbl (%rdi),%eax
mov    %rax,%r10
shr    $0x5,%r10d
mov    %rax,%rdi
and    $0xf8,%edi
add    %edi,%r10d
and    $0x1c,%eax
shl    $0xb,%eax
add    %r10d,%eax
shl    $0x5,%edi
add    %edi,%eax
mov    %ax,(%r9)
add    $0xffffffff,%r8d
test   %r8d,%r8d
jns    1ee1a <gray_rgb565_convert_be+0xea>
mov    -0x20(%rbp),%r15
mov    -0x18(%rbp),%r14
mov    -0x10(%rbp),%r13
mov    -0x8(%rbp),%r12
leaveq 
retq   
mov    (%rsi),%rax
mov    %edx,%edi
mov    (%rax,%rdi,8),%rdi
mov    (%rcx),%r9
mov    %r9,%rax
and    $0x3,%rax
test   %rax,%rax
jne    1ee37 <gray_rgb565_convert_be+0x107>
mov    %r13,%r11
jmp    1edbc <gray_rgb565_convert_be+0x8c>
movzbl (%rdi),%eax
mov    %rax,%r11
shr    $0x5,%r11d
mov    %rax,%r10
and    $0xf8,%r10d
add    %r10d,%r11d
and    $0x1c,%eax
shl    $0xb,%eax
add    %r11d,%eax
shl    $0x5,%r10d
add    %r10d,%eax
mov    %ax,(%r9)
add    $0x1,%rdi
add    $0x2,%r9
add    $0xffffffff,%r12d
mov    %r13,%r11
jmpq   1edbc <gray_rgb565_convert_be+0x8c>
nopw   %cs:0x0(%rax,%rax,1)

000000000001ee80 <gray_rgb565D_convert_be>:
push   %rbp
mov    %rsp,%rbp
sub    $0x40,%rsp
mov    %rbx,-0x8(%rbp)
mov    %r12,-0x10(%rbp)
mov    %r13,-0x18(%rbp)
mov    %r14,-0x20(%rbp)
mov    %r15,-0x28(%rbp)
mov    0x1a8(%rdi),%r13
mov    0x88(%rdi),%r11d
lea    0x3aa4f(%rip),%rbx        # 59900 <dither_matrix>
mov    0xa8(%rdi),%eax
and    $0x3,%eax
mov    %eax,%eax
mov    (%rbx,%rax,8),%rax
mov    $0xffffff00,%r15d
xor    %edi,%edi
jmpq   1ef95 <gray_rgb565D_convert_be+0x115>
mov    %rax,%rcx
and    %r15,%rcx
shr    $0x8,%rcx
movzbl %al,%r12d
mov    %r12,%rax
shl    $0x18,%rax
add    %rax,%rcx
movzbl %cl,%edx
lea    0x0(%r13,%rdx,1),%rax
movzbl 0x1(%rbx),%r10d
movzbl (%rax,%r10,1),%eax
mov    %rax,%r14
shr    $0x5,%r14d
mov    %rax,%r10
and    $0xf8,%r10d
add    %r10d,%r14d
and    $0x1c,%eax
shl    $0xb,%eax
add    %r14d,%eax
shl    $0x5,%r10d
lea    (%rax,%r10,1),%r14d
lea    0x0(%r13,%r12,1),%r10
movzbl (%rbx),%eax
movzbl (%r10,%rax,1),%eax
mov    %rax,%r12
shr    $0x5,%r12d
mov    %rax,%r10
and    $0xf8,%r10d
add    %r10d,%r12d
and    $0x1c,%eax
shl    $0xb,%eax
add    %r12d,%eax
shl    $0x5,%r10d
add    %r10d,%eax
shl    $0x10,%eax
add    %r14d,%eax
mov    %eax,(%r9)
shr    $0x8,%rcx
shl    $0x18,%rdx
lea    (%rcx,%rdx,1),%rax
add    $0x2,%rbx
add    $0x4,%r9
add    $0x1,%edi
mov    %r11,%rcx
shr    %ecx
cmp    %edi,%ecx
ja     1eecd <gray_rgb565D_convert_be+0x4d>
mov    -0x38(%rbp),%rcx
lea    0x1(%rcx),%edx
mov    -0x30(%rbp),%rcx
add    $0x8,%rcx
mov    %r11,%rdi
and    $0x1,%edi
test   %edi,%edi
jne    1efb4 <gray_rgb565D_convert_be+0x134>
xor    %edi,%edi
add    $0xffffffff,%r8d
test   %r8d,%r8d
jns    1efed <gray_rgb565D_convert_be+0x16d>
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
leaveq 
retq   
movzbl %al,%edi
lea    0x0(%r13,%rdi,1),%r10
movzbl (%rbx),%edi
movzbl (%r10,%rdi,1),%edi
mov    %rdi,%r10
shr    $0x5,%r10d
mov    %rdi,%rbx
and    $0xf8,%ebx
add    %ebx,%r10d
and    $0x1c,%edi
shl    $0xb,%edi
add    %r10d,%edi
shl    $0x5,%ebx
add    %ebx,%edi
mov    %di,(%r9)
xor    %edi,%edi
jmp    1ef95 <gray_rgb565D_convert_be+0x115>
mov    (%rsi),%r9
mov    %edx,%ebx
mov    (%r9,%rbx,8),%rbx
mov    (%rcx),%r9
mov    %r9,%r10
and    $0x3,%r10
test   %r10,%r10
jne    1f012 <gray_rgb565D_convert_be+0x192>
mov    %rdx,-0x38(%rbp)
mov    %rcx,-0x30(%rbp)
jmpq   1ef6d <gray_rgb565D_convert_be+0xed>
movzbl %al,%r10d
add    %r13,%r10
movzbl (%rbx),%r12d
movzbl (%r10,%r12,1),%r10d
mov    %r10,%r14
shr    $0x5,%r14d
mov    %r10,%r12
and    $0xf8,%r12d
add    %r12d,%r14d
and    $0x1c,%r10d
shl    $0xb,%r10d
add    %r14d,%r10d
shl    $0x5,%r12d
add    %r12d,%r10d
mov    %r10w,(%r9)
add    $0x1,%rbx
add    $0x2,%r9
add    $0xffffffff,%r11d
mov    %rdx,-0x38(%rbp)
mov    %rcx,-0x30(%rbp)
jmpq   1ef6d <gray_rgb565D_convert_be+0xed>
data16 nopw %cs:0x0(%rax,%rax,1)

000000000001f070 <ycc_rgb565_convert>:
push   %rbp
mov    %rsp,%rbp
sub    $0x30,%rsp
mov    %rbx,-0x8(%rbp)
mov    %r12,-0x10(%rbp)
mov    %r13,-0x18(%rbp)
mov    %r14,-0x20(%rbp)
mov    %r15,-0x28(%rbp)
mov    %rsi,%rbx
mov    %r8,%r12
mov    %rcx,%r13
mov    %rdx,%r14
mov    %rdi,%r15
callq  1d530 <is_big_endian>
test   %eax,%eax
jne    1f0ce <ycc_rgb565_convert+0x5e>
mov    %r13,%rcx
mov    %r14,%rdx
mov    %rbx,%rsi
mov    %r15,%rdi
mov    %r12,%r8
callq  1d540 <ycc_rgb565_convert_le>
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
leaveq 
retq   
mov    %r13,%rcx
mov    %r14,%rdx
mov    %rbx,%rsi
mov    %r15,%rdi
mov    %r12,%r8
callq  1e250 <ycc_rgb565_convert_be>
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
leaveq 
retq   
nopl   0x0(%rax,%rax,1)

000000000001f100 <ycc_rgb565D_convert>:
push   %rbp
mov    %rsp,%rbp
sub    $0x30,%rsp
mov    %rbx,-0x8(%rbp)
mov    %r12,-0x10(%rbp)
mov    %r13,-0x18(%rbp)
mov    %r14,-0x20(%rbp)
mov    %r15,-0x28(%rbp)
mov    %rsi,%rbx
mov    %r8,%r12
mov    %rcx,%r13
mov    %rdx,%r14
mov    %rdi,%r15
callq  1d530 <is_big_endian>
test   %eax,%eax
jne    1f15e <ycc_rgb565D_convert+0x5e>
mov    %r13,%rcx
mov    %r14,%rdx
mov    %rbx,%rsi
mov    %r15,%rdi
mov    %r12,%r8
callq  1d7d0 <ycc_rgb565D_convert_le>
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
leaveq 
retq   
mov    %r13,%rcx
mov    %r14,%rdx
mov    %rbx,%rsi
mov    %r15,%rdi
mov    %r12,%r8
callq  1e510 <ycc_rgb565D_convert_be>
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
leaveq 
retq   
nopl   0x0(%rax,%rax,1)

000000000001f190 <rgb_rgb565_convert>:
push   %rbp
mov    %rsp,%rbp
sub    $0x30,%rsp
mov    %rbx,-0x8(%rbp)
mov    %r12,-0x10(%rbp)
mov    %r13,-0x18(%rbp)
mov    %r14,-0x20(%rbp)
mov    %r15,-0x28(%rbp)
mov    %rsi,%rbx
mov    %r8,%r12
mov    %rcx,%r13
mov    %rdx,%r14
mov    %rdi,%r15
callq  1d530 <is_big_endian>
test   %eax,%eax
jne    1f1ee <rgb_rgb565_convert+0x5e>
mov    %r13,%rcx
mov    %r14,%rdx
mov    %rbx,%rsi
mov    %r15,%rdi
mov    %r12,%r8
callq  1db30 <rgb_rgb565_convert_le>
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
leaveq 
retq   
mov    %r13,%rcx
mov    %r14,%rdx
mov    %rbx,%rsi
mov    %r15,%rdi
mov    %r12,%r8
callq  1e8c0 <rgb_rgb565_convert_be>
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
leaveq 
retq   
nopl   0x0(%rax,%rax,1)

000000000001f220 <rgb_rgb565D_convert>:
push   %rbp
mov    %rsp,%rbp
sub    $0x30,%rsp
mov    %rbx,-0x8(%rbp)
mov    %r12,-0x10(%rbp)
mov    %r13,-0x18(%rbp)
mov    %r14,-0x20(%rbp)
mov    %r15,-0x28(%rbp)
mov    %rsi,%rbx
mov    %r8,%r12
mov    %rcx,%r13
mov    %rdx,%r14
mov    %rdi,%r15
callq  1d530 <is_big_endian>
test   %eax,%eax
jne    1f27e <rgb_rgb565D_convert+0x5e>
mov    %r13,%rcx
mov    %r14,%rdx
mov    %rbx,%rsi
mov    %r15,%rdi
mov    %r12,%r8
callq  1dc90 <rgb_rgb565D_convert_le>
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
leaveq 
retq   
mov    %r13,%rcx
mov    %r14,%rdx
mov    %rbx,%rsi
mov    %r15,%rdi
mov    %r12,%r8
callq  1ea60 <rgb_rgb565D_convert_be>
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
leaveq 
retq   
nopl   0x0(%rax,%rax,1)

000000000001f2b0 <gray_rgb565_convert>:
push   %rbp
mov    %rsp,%rbp
sub    $0x30,%rsp
mov    %rbx,-0x8(%rbp)
mov    %r12,-0x10(%rbp)
mov    %r13,-0x18(%rbp)
mov    %r14,-0x20(%rbp)
mov    %r15,-0x28(%rbp)
mov    %rsi,%rbx
mov    %r8,%r12
mov    %rcx,%r13
mov    %rdx,%r14
mov    %rdi,%r15
callq  1d530 <is_big_endian>
test   %eax,%eax
jne    1f30e <gray_rgb565_convert+0x5e>
mov    %r13,%rcx
mov    %r14,%rdx
mov    %rbx,%rsi
mov    %r15,%rdi
mov    %r12,%r8
callq  1df20 <gray_rgb565_convert_le>
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
leaveq 
retq   
mov    %r13,%rcx
mov    %r14,%rdx
mov    %rbx,%rsi
mov    %r15,%rdi
mov    %r12,%r8
callq  1ed30 <gray_rgb565_convert_be>
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
leaveq 
retq   
nopl   0x0(%rax,%rax,1)

000000000001f340 <gray_rgb565D_convert>:
push   %rbp
mov    %rsp,%rbp
sub    $0x30,%rsp
mov    %rbx,-0x8(%rbp)
mov    %r12,-0x10(%rbp)
mov    %r13,-0x18(%rbp)
mov    %r14,-0x20(%rbp)
mov    %r15,-0x28(%rbp)
mov    %rsi,%rbx
mov    %r8,%r12
mov    %rcx,%r13
mov    %rdx,%r14
mov    %rdi,%r15
callq  1d530 <is_big_endian>
test   %eax,%eax
jne    1f39e <gray_rgb565D_convert+0x5e>
mov    %r13,%rcx
mov    %r14,%rdx
mov    %rbx,%rsi
mov    %r15,%rdi
mov    %r12,%r8
callq  1e070 <gray_rgb565D_convert_le>
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
leaveq 
retq   
mov    %r13,%rcx
mov    %r14,%rdx
mov    %rbx,%rsi
mov    %r15,%rdi
mov    %r12,%r8
callq  1ee80 <gray_rgb565D_convert_be>
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
leaveq 
retq   
nopl   0x0(%rax,%rax,1)

000000000001f3d0 <start_pass_dcolor>:
push   %rbp
mov    %rsp,%rbp
leaveq 
retq   
nopw   %cs:0x0(%rax,%rax,1)

000000000001f3e0 <jinit_inverse_dct>:
push   %rbp
mov    %rsp,%rbp
sub    $0x30,%rsp
mov    %r14,-0x20(%rbp)
mov    %r15,-0x28(%rbp)
mov    %rbx,-0x8(%rbp)
mov    %r12,-0x10(%rbp)
mov    %r13,-0x18(%rbp)
mov    0x8(%rdi),%rax
mov    (%rax),%rax
mov    $0x1,%r14d
mov    $0x80,%edx
mov    %rdi,%r13
mov    %r14,%rsi
callq  *%rax
mov    %rax,0x258(%r13)
lea    0x8c(%rip),%rcx        # 1f4b0 <start_pass>
mov    %rcx,(%rax)
mov    0x130(%r13),%r12
add    $0x58,%r12
mov    %rax,%r15
mov    $0x100,%ebx
xor    %esi,%esi
mov    %rsi,%rax
jmp    1f48c <jinit_inverse_dct+0xac>
mov    0x8(%r13),%rcx
mov    (%rcx),%rcx
mov    %rbx,%rdx
mov    %rsi,%rbx
mov    %r14,%rsi
mov    %rax,%r14
mov    %r13,%rdi
callq  *%rcx
mov    %rax,(%r12)
mov    %rbx,%rsi
mov    %rax,%rdi
mov    $0x100,%ebx
mov    %rbx,%rdx
callq  41e0 <memset@plt>
movslq %r14d,%rax
movl   $0xffffffff,0x58(%r15,%rax,4)
lea    0x1(%r14),%eax
add    $0x60,%r12
xor    %esi,%esi
mov    $0x1,%r14d
movslq 0x38(%r13),%rcx
cmp    %eax,%ecx
jg     1f441 <jinit_inverse_dct+0x61>
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
leaveq 
retq   
nopw   0x0(%rax,%rax,1)

000000000001f4b0 <start_pass>:
push   %rbp
mov    %rsp,%rbp
sub    $0x110,%rsp
mov    %r15,-0x28(%rbp)
mov    %r14,-0x20(%rbp)
mov    %r13,-0x18(%rbp)
mov    %r12,-0x10(%rbp)
mov    %rbx,-0x8(%rbp)
mov    0x258(%rdi),%rax
mov    %rax,-0x108(%rbp)
mov    0x130(%rdi),%rbx
mov    0x4ead5(%rip),%r15        # 6dfc0 <jpeg_idct_1x1@@LIBJPEG_6.2+0x38200>
lea    0x1e84e(%rip),%rax        # 3dd40 <jsimd_idct_2x2>
mov    %rax,-0x38(%rbp)
mov    0x4ea1b(%rip),%rax        # 6df18 <jpeg_idct_2x2@@LIBJPEG_6.2+0x38408>
mov    %rax,-0x40(%rbp)
mov    0x4ea68(%rip),%r14        # 6df70 <jpeg_idct_3x3@@LIBJPEG_6.2+0x3df50>
lea    0x1e851(%rip),%rax        # 3dd60 <jsimd_idct_4x4>
mov    %rax,-0x48(%rbp)
mov    0x4ea06(%rip),%rax        # 6df20 <jpeg_idct_4x4@@LIBJPEG_6.2+0x38930>
mov    %rax,-0x50(%rbp)
mov    0x4ea63(%rip),%rax        # 6df88 <jpeg_idct_5x5@@LIBJPEG_6.2+0x3e2e8>
mov    %rax,-0x58(%rbp)
mov    0x4e9f8(%rip),%r8        # 6df28 <jpeg_idct_6x6@@LIBJPEG_6.2+0x3e638>
mov    %r8,-0x60(%rbp)
mov    0x4ea65(%rip),%rdx        # 6dfa0 <jpeg_idct_7x7@@LIBJPEG_6.2+0x3eca0>
mov    %rdx,-0x68(%rbp)
lea    0x1e8fa(%rip),%rcx        # 3de40 <jsimd_idct_islow>
mov    %rcx,-0x70(%rbp)
mov    0x4ea0f(%rip),%rcx        # 6df60 <jpeg_idct_islow@@LIBJPEG_6.2+0x3f410>
mov    %rcx,-0x78(%rbp)
lea    0x1e904(%rip),%rcx        # 3de60 <jsimd_idct_ifast>
mov    %rcx,-0x80(%rbp)
mov    0x4ea79(%rip),%rcx        # 6dfe0 <jpeg_idct_ifast@@LIBJPEG_6.2+0x3fad0>
mov    %rcx,-0x88(%rbp)
lea    0x1e90b(%rip),%rcx        # 3de80 <jsimd_idct_float>
mov    %rcx,-0x90(%rbp)
mov    0x4ea15(%rip),%rcx        # 6df98 <jpeg_idct_float@@LIBJPEG_6.2+0x3ff98>
mov    %rcx,-0x98(%rbp)
mov    0x4ea1f(%rip),%rcx        # 6dfb0 <jpeg_idct_9x9@@LIBJPEG_6.2+0x3dd90>
mov    %rcx,-0xa0(%rbp)
mov    0x4e9d9(%rip),%rsi        # 6df78 <jpeg_idct_10x10@@LIBJPEG_6.2+0x3d6a8>
mov    %rsi,-0xc0(%rbp)
mov    0x4e98b(%rip),%r9        # 6df38 <jpeg_idct_11x11@@LIBJPEG_6.2+0x3ce38>
mov    %r9,-0xc8(%rbp)
mov    0x4e9ad(%rip),%r11        # 6df68 <jpeg_idct_12x12@@LIBJPEG_6.2+0x3c3b8>
mov    %r11,-0xd0(%rbp)
mov    0x4ea1f(%rip),%r10        # 6dfe8 <jpeg_idct_13x13@@LIBJPEG_6.2+0x3bb08>
mov    %r10,-0xd8(%rbp)
mov    0x4e9d1(%rip),%r12        # 6dfa8 <jpeg_idct_14x14@@LIBJPEG_6.2+0x3ae68>
mov    %r12,-0xe0(%rbp)
mov    0x4e95b(%rip),%r12        # 6df40 <jpeg_idct_15x15@@LIBJPEG_6.2+0x3a310>
mov    %r12,-0xe8(%rbp)
mov    0x4e99d(%rip),%r12        # 6df90 <jpeg_idct_16x16@@LIBJPEG_6.2+0x396a0>
mov    %r12,-0xf0(%rbp)
xor    %r12d,%r12d
mov    %r12,-0xf8(%rbp)
mov    $0x1,%r12d
mov    %r12,-0xb0(%rbp)
mov    $0x2,%r12d
mov    %r12,-0xa8(%rbp)
mov    %rdi,%r13
xor    %r12d,%r12d
pushq  -0xf8(%rbp)
pushq  -0xf8(%rbp)
popq   -0x100(%rbp)
popq   -0xb8(%rbp)
jmpq   1f6ce <start_pass+0x21e>
mov    0x24(%rbx),%edi
add    $0xffffffff,%edi
cmp    $0xf,%edi
jbe    1f6f1 <start_pass+0x241>
mov    0x0(%r13),%rax
movl   $0x7,0x28(%rax)
movslq 0x24(%rbx),%rcx
mov    0x0(%r13),%rax
mov    %ecx,0x2c(%rax)
mov    0x0(%r13),%rax
mov    (%rax),%rax
mov    %r13,%rdi
callq  *%rax
mov    -0x58(%rbp),%rax
mov    -0xc0(%rbp),%rsi
mov    -0xa0(%rbp),%rcx
mov    -0x68(%rbp),%rdx
mov    -0x60(%rbp),%r8
mov    -0x100(%rbp),%r9
mov    %r9,-0x100(%rbp)
movslq %r12d,%r10
mov    -0x108(%rbp),%r11
mov    %r9,0x8(%r11,%r10,8)
movslq 0x30(%rbx),%rdi
test   %edi,%edi
jne    1f727 <start_pass+0x277>
add    $0x1,%r12d
add    $0x60,%rbx
mov    -0xd8(%rbp),%r10
mov    -0xd0(%rbp),%r11
mov    -0xc8(%rbp),%r9
movslq 0x38(%r13),%rdi
cmp    %r12d,%edi
jg     1f641 <start_pass+0x191>
mov    -0x8(%rbp),%rbx
mov    -0x10(%rbp),%r12
mov    -0x18(%rbp),%r13
mov    -0x20(%rbp),%r14
mov    -0x28(%rbp),%r15
leaveq 
retq   
mov    %rbx,-0x110(%rbp)
lea    0x3a221(%rip),%rbx        # 59920 <dither_matrix+0x20>
movslq (%rbx,%rdi,4),%rdi
add    %rbx,%rdi
jmpq   *%rdi
mov    -0x110(%rbp),%rbx
mov    -0xf0(%rbp),%r9
pushq  -0xf8(%rbp)
popq   -0xb8(%rbp)
jmpq   1f693 <start_pass+0x1e3>
mov    -0xb8(%rbp),%rdi
cmp    0x58(%r11,%r10,4),%edi
je     1f6b1 <start_pass+0x201>
mov    0x50(%rbx),%r9
test   %r9,%r9
jne    1f995 <start_pass+0x4e5>
mov    -0xc0(%rbp),%rsi
jmpq   1f6b1 <start_pass+0x201>
mov    -0x110(%rbp),%rbx
mov    %r15,%r9
pushq  -0xf8(%rbp)
popq   -0xb8(%rbp)
jmpq   1f693 <start_pass+0x1e3>
mov    %rax,%rbx
callq  3dcc0 <jsimd_can_idct_2x2>
test   %eax,%eax
jne    1fa00 <start_pass+0x550>
mov    %rbx,%rax
mov    -0xc0(%rbp),%rsi
mov    -0xa0(%rbp),%rcx
mov    -0x68(%rbp),%rdx
mov    -0x60(%rbp),%r8
mov    -0x110(%rbp),%rbx
mov    -0x40(%rbp),%r9
pushq  -0xf8(%rbp)
popq   -0xb8(%rbp)
jmpq   1f693 <start_pass+0x1e3>
mov    -0x110(%rbp),%rbx
mov    %r14,%r9
pushq  -0xf8(%rbp)
popq   -0xb8(%rbp)
jmpq   1f693 <start_pass+0x1e3>
mov    %rax,%rbx
callq  3dd00 <jsimd_can_idct_4x4>
test   %eax,%eax
jne    1fa35 <start_pass+0x585>
mov    %rbx,%rax
mov    -0xc0(%rbp),%rsi
mov    -0xa0(%rbp),%rcx
mov    -0x68(%rbp),%rdx
mov    -0x60(%rbp),%r8
mov    -0x110(%rbp),%rbx
mov    -0x50(%rbp),%r9
pushq  -0xf8(%rbp)
popq   -0xb8(%rbp)
jmpq   1f693 <start_pass+0x1e3>
mov    -0x110(%rbp),%rbx
mov    %rax,%r9
pushq  -0xf8(%rbp)
popq   -0xb8(%rbp)
jmpq   1f693 <start_pass+0x1e3>
mov    -0x110(%rbp),%rbx
mov    %r8,%r9
pushq  -0xf8(%rbp)
popq   -0xb8(%rbp)
jmpq   1f693 <start_pass+0x1e3>
mov    -0x110(%rbp),%rbx
mov    %rdx,%r9
pushq  -0xf8(%rbp)
popq   -0xb8(%rbp)
jmpq   1f693 <start_pass+0x1e3>
mov    0x60(%r13),%ecx
test   %ecx,%ecx
je     1fa6a <start_pass+0x5ba>
cmp    $0x1,%ecx
je     1faaf <start_pass+0x5ff>
cmp    $0x2,%ecx
je     1faf7 <start_pass+0x647>
mov    0x0(%r13),%rcx
movl   $0x30,0x28(%rcx)
mov    0x0(%r13),%rcx
mov    (%rcx),%rcx
mov    %rax,%rbx
mov    %r13,%rdi
callq  *%rcx
mov    %rbx,%rax
mov    -0xc0(%rbp),%rsi
mov    -0xa0(%rbp),%rcx
mov    -0x68(%rbp),%rdx
mov    -0x60(%rbp),%r8
mov    -0x110(%rbp),%rbx
mov    -0x100(%rbp),%r9
jmpq   1f693 <start_pass+0x1e3>
mov    -0x110(%rbp),%rbx
mov    %rcx,%r9
pushq  -0xf8(%rbp)
popq   -0xb8(%rbp)
jmpq   1f693 <start_pass+0x1e3>
mov    -0x110(%rbp),%rbx
mov    %rsi,%r9
pushq  -0xf8(%rbp)
popq   -0xb8(%rbp)
jmpq   1f693 <start_pass+0x1e3>
mov    -0x110(%rbp),%rbx
pushq  -0xf8(%rbp)
popq   -0xb8(%rbp)
jmpq   1f693 <start_pass+0x1e3>
mov    %r11,%r9
mov    -0x110(%rbp),%rbx
pushq  -0xf8(%rbp)
popq   -0xb8(%rbp)
jmpq   1f693 <start_pass+0x1e3>
mov    %r10,%r9
mov    -0x110(%rbp),%rbx
pushq  -0xf8(%rbp)
popq   -0xb8(%rbp)
jmpq   1f693 <start_pass+0x1e3>
mov    -0xe0(%rbp),%r9
mov    -0x110(%rbp),%rbx
pushq  -0xf8(%rbp)
popq   -0xb8(%rbp)
jmpq   1f693 <start_pass+0x1e3>
mov    -0x110(%rbp),%rbx
mov    -0xe8(%rbp),%r9
pushq  -0xf8(%rbp)
popq   -0xb8(%rbp)
jmpq   1f693 <start_pass+0x1e3>
mov    -0x110(%rbp),%rbx
jmpq   1f650 <start_pass+0x1a0>
mov    %edi,0x58(%r11,%r10,4)
test   %edi,%edi
je     1fb3f <start_pass+0x68f>
cmp    $0x1,%edi
je     1fb4a <start_pass+0x69a>
cmp    $0x2,%edi
je     1fb63 <start_pass+0x6b3>
mov    0x0(%r13),%rax
movl   $0x30,0x28(%rax)
mov    0x0(%r13),%rax
mov    (%rax),%rax
mov    %r13,%rdi
mov    %r15,-0x30(%rbp)
mov    %r14,-0x110(%rbp)
callq  *%rax
mov    -0x110(%rbp),%r14
mov    -0x30(%rbp),%r15
mov    -0x58(%rbp),%rax
mov    -0xc0(%rbp),%rsi
mov    -0xa0(%rbp),%rcx
mov    -0x68(%rbp),%rdx
mov    -0x60(%rbp),%r8
jmpq   1f6b1 <start_pass+0x201>
mov    %rbx,%rax
mov    -0xc0(%rbp),%rsi
mov    -0xa0(%rbp),%rcx
mov    -0x68(%rbp),%rdx
mov    -0x60(%rbp),%r8
mov    -0x110(%rbp),%rbx
mov    -0x38(%rbp),%r9
pushq  -0xf8(%rbp)
popq   -0xb8(%rbp)
jmpq   1f693 <start_pass+0x1e3>
mov    %rbx,%rax
mov    -0xc0(%rbp),%rsi
mov    -0xa0(%rbp),%rcx
mov    -0x68(%rbp),%rdx
mov    -0x60(%rbp),%r8
mov    -0x110(%rbp),%rbx
mov    -0x48(%rbp),%r9
pushq  -0xf8(%rbp)
popq   -0xb8(%rbp)
jmpq   1f693 <start_pass+0x1e3>
mov    %rax,%rbx
callq  3dd80 <jsimd_can_idct_islow>
test   %eax,%eax
jne    1fb86 <start_pass+0x6d6>
mov    %rbx,%rax
mov    -0xc0(%rbp),%rsi
mov    -0xa0(%rbp),%rcx
mov    -0x68(%rbp),%rdx
mov    -0x60(%rbp),%r8
mov    -0x110(%rbp),%rbx
mov    -0x78(%rbp),%r9
pushq  -0xf8(%rbp)
popq   -0xb8(%rbp)
jmpq   1f693 <start_pass+0x1e3>
mov    %rax,%rbx
callq  3ddc0 <jsimd_can_idct_ifast>
test   %eax,%eax
jne    1fbbb <start_pass+0x70b>
mov    %rbx,%rax
mov    -0xc0(%rbp),%rsi
mov    -0xa0(%rbp),%rcx
mov    -0x68(%rbp),%rdx
mov    -0x60(%rbp),%r8
mov    -0x110(%rbp),%rbx
mov    -0x88(%rbp),%r9
pushq  -0xb0(%rbp)
popq   -0xb8(%rbp)
jmpq   1f693 <start_pass+0x1e3>
mov    %rax,%rbx
callq  3de00 <jsimd_can_idct_float>
test   %eax,%eax
jne    1fbf0 <start_pass+0x740>
mov    %rbx,%rax
mov    -0xc0(%rbp),%rsi
mov    -0xa0(%rbp),%rcx
mov    -0x68(%rbp),%rdx
mov    -0x60(%rbp),%r8
mov    -0x110(%rbp),%rbx
mov    -0x98(%rbp),%r9
pushq  -0xa8(%rbp)
popq   -0xb8(%rbp)
jmpq   1f693 <start_pass+0x1e3>
mov    0x58(%rbx),%rdx
xor    %ecx,%ecx
jmpq   1fc37 <start_pass+0x787>
mov    0x58(%rbx),%rdx
mov    %r14,-0x110(%rbp)
xor    %eax,%eax
lea    0x39e02(%rip),%r8        # 59960 <aanscales.5>
jmpq   1fc7a <start_pass+0x7ca>
mov    0x58(%rbx),%rsi
mov    %r15,-0x30(%rbp)
mov    %r14,-0x110(%rbp)
xor    %eax,%eax
lea    0x39e65(%rip),%r11        # 599e0 <aanscalefactor.6>
mov    %rax,%rcx
mov    %rcx,%rdx
jmpq   1fcde <start_pass+0x82e>
mov    %rbx,%rax
mov    -0xc0(%rbp),%rsi
mov    -0xa0(%rbp),%rcx
mov    -0x68(%rbp),%rdx
mov    -0x60(%rbp),%r8
mov    -0x110(%rbp),%rbx
mov    -0x70(%rbp),%r9
pushq  -0xf8(%rbp)
popq   -0xb8(%rbp)
jmpq   1f693 <start_pass+0x1e3>
mov    %rbx,%rax
mov    -0xc0(%rbp),%rsi
mov    -0xa0(%rbp),%rcx
mov    -0x68(%rbp),%rdx
mov    -0x60(%rbp),%r8
mov    -0x110(%rbp),%rbx
mov    -0x80(%rbp),%r9
pushq  -0xb0(%rbp)
popq   -0xb8(%rbp)
jmpq   1f693 <start_pass+0x1e3>
mov    %rbx,%rax
mov    -0xc0(%rbp),%rsi
mov    -0xa0(%rbp),%rcx
mov    -0x68(%rbp),%rdx
mov    -0x60(%rbp),%r8
mov    -0x110(%rbp),%rbx
mov    -0x90(%rbp),%r9
pushq  -0xa8(%rbp)
popq   -0xb8(%rbp)
jmpq   1f693 <start_pass+0x1e3>
movslq %ecx,%rdi
movswq (%r9,%rdi,2),%rsi
mov    %si,(%rdx,%rdi,2)
add    $0x1,%ecx
cmp    $0x3f,%ecx
jle    1fc28 <start_pass+0x778>
mov    -0xc0(%rbp),%rsi
mov    -0xa0(%rbp),%rcx
mov    -0x68(%rbp),%rdx
mov    -0x60(%rbp),%r8
jmpq   1f6b1 <start_pass+0x201>
movslq %eax,%rdi
movswq (%r8,%rdi,2),%rcx
movzwl (%r9,%rdi,2),%esi
imul   %rsi,%rcx
add    $0x800,%rcx
sar    $0xc,%rcx
mov    %cx,(%rdx,%rdi,2)
add    $0x1,%eax
cmp    $0x3f,%eax
jle    1fc57 <start_pass+0x7a7>
mov    -0x110(%rbp),%r14
mov    -0x58(%rbp),%rax
mov    -0xc0(%rbp),%rsi
mov    -0xa0(%rbp),%rcx
mov    -0x68(%rbp),%rdx
mov    -0x60(%rbp),%r8
jmpq   1f6b1 <start_pass+0x201>
movslq %ecx,%r8
movzwl (%r9,%r8,2),%edi
movzwl %di,%edi
cvtsi2sd %rdi,%xmm0
mulsd  (%r11,%r10,8),%xmm0
movslq %eax,%rdi
mulsd  (%r11,%rdi,8),%xmm0
cvtsd2ss %xmm0,%xmm0
movss  %xmm0,(%rsi,%r8,4)
add    $0x1,%eax
add    $0x1,%ecx
cmp    $0x7,%eax
jle    1fca5 <start_pass+0x7f5>
add    $0x1,%edx
xor    %eax,%eax
cmp    $0x7,%edx
jle    1fd0d <start_pass+0x85d>
mov    -0x110(%rbp),%r14
mov    -0x30(%rbp),%r15
mov    -0x58(%rbp),%rax
mov    -0xc0(%rbp),%rsi
mov    -0xa0(%rbp),%rcx
mov    -0x68(%rbp),%rdx
mov    -0x60(%rbp),%r8
jmpq   1f6b1 <start_pass+0x201>
movslq %edx,%r10
jmp    1fcd4 <start_pass+0x824>
nopw   %cs:0x0(%rax,%rax,1)
nopl   0x0(%rax)

000000000001fd20 <jinit_huff_decoder>:
push   %rbp
mov    %rsp,%rbp
sub    $0x10,%rsp
mov    %r15,-0x8(%rbp)
mov    %rdi,%r15
callq  20570 <std_huff_tables>
mov    0x8(%r15),%rax
mov    (%rax),%rax
mov    $0x1,%esi
mov    $0x170,%edx
mov    %r15,%rdi
callq  *%rax
mov    %rax,0x250(%r15)
lea    0x8c8(%rip),%rcx        # 20620 <start_pass_huff_decoder>
mov    %rcx,(%rax)
lea    0x1fae(%rip),%rcx        # 21d10 <decode_mcu>
mov    %rcx,0x8(%rax)
xor    %ecx,%ecx
jmp    1fd82 <jinit_huff_decoder+0x62>
movslq %ecx,%rdx
movq   $0x0,0x60(%rax,%rdx,8)
movq   $0x0,0x40(%rax,%rdx,8)
add    $0x1,%ecx
cmp    $0x3,%ecx
jle    1fd6a <jinit_huff_decoder+0x4a>
mov    -0x8(%rbp),%r15
leaveq 
retq   
nopl   (%rax)

000000000001fd90 <jpeg_make_d_derived_tbl>:
push   %rbp
mov    %rsp,%rbp
sub    $0x560,%rsp
mov    %r12,-0x20(%rbp)
mov    %r13,-0x28(%rbp)
mov    %r14,-0x30(%rbp)
mov    %r15,-0x38(%rbp)
mov    %rbx,-0x18(%rbp)
mov    %rsi,-0x40(%rbp)
test   %edx,%edx
js     1fdca <jpeg_make_d_derived_tbl+0x3a>
cmp    $0x3,%edx
jg     1fdca <jpeg_make_d_derived_tbl+0x3a>
mov    %rcx,%rbx
mov    %rsi,%r12
mov    %rdi,%r14
mov    %rdx,%r15
jmp    1fdee <jpeg_make_d_derived_tbl+0x5e>
mov    (%rdi),%rax
movl   $0x32,0x28(%rax)
mov    (%rdi),%rax
mov    %edx,0x2c(%rax)
mov    (%rdi),%rax
mov    (%rax),%rax
mov    %rcx,%rbx
mov    %rsi,%r12
mov    %rdx,%r15
mov    %rdi,%r14
callq  *%rax
test   %r12d,%r12d
jne    1fe00 <jpeg_make_d_derived_tbl+0x70>
movslq %r15d,%rax
mov    0x108(%r14,%rax,8),%r13
jmp    1fe0b <jpeg_make_d_derived_tbl+0x7b>
movslq %r15d,%rax
mov    0xe8(%r14,%rax,8),%r13
test   %r13,%r13
jne    1fe2c <jpeg_make_d_derived_tbl+0x9c>
mov    (%r14),%rax
movl   $0x32,0x28(%rax)
mov    (%r14),%rax
mov    %r15d,0x2c(%rax)
mov    (%r14),%rax
mov    (%rax),%rax
mov    %r14,%rdi
callq  *%rax
mov    $0x1,%r15d
mov    (%rbx),%rax
test   %rax,%rax
jne    1fe51 <jpeg_make_d_derived_tbl+0xc1>
mov    0x8(%r14),%rax
mov    (%rax),%rax
mov    $0x528,%edx
mov    %r14,%rdi
mov    %r15,%rsi
callq  *%rax
mov    %rax,(%rbx)
mov    (%rbx),%rax
mov    %rax,-0x50(%rbp)
mov    %r13,0x120(%rax)
xor    %r12d,%r12d
jmp    1fe7e <jpeg_make_d_derived_tbl+0xee>
movslq %r12d,%rax
mov    %r15b,-0x555(%rbp,%rax,1)
add    $0x1,%r12d
add    $0xffffffff,%ebx
test   %ebx,%ebx
jne    1fe64 <jpeg_make_d_derived_tbl+0xd4>
add    $0x1,%r15d
cmp    $0x10,%r15d
jle    1fea2 <jpeg_make_d_derived_tbl+0x112>
movslq %r12d,%rax
movb   $0x0,-0x555(%rbp,%rax,1)
movsbq -0x555(%rbp),%rcx
mov    %r13,-0x48(%rbp)
xor    %ebx,%ebx
mov    %rbx,%r13
jmp    1fef5 <jpeg_make_d_derived_tbl+0x165>
movslq %r15d,%rax
movzbl 0x0(%r13,%rax,1),%ebx
lea    (%r12,%rbx,1),%eax
cmp    $0x100,%eax
jle    1fe76 <jpeg_make_d_derived_tbl+0xe6>
mov    (%r14),%rax
movl   $0x8,0x28(%rax)
mov    (%r14),%rax
mov    (%rax),%rax
mov    %r14,%rdi
callq  *%rax
jmp    1fe76 <jpeg_make_d_derived_tbl+0xe6>
mov    (%r14),%rax
movl   $0x8,0x28(%rax)
mov    (%r14),%rax
mov    (%rax),%rax
mov    %r14,%rdi
mov    %r12,-0x10(%rbp)
mov    %rcx,%r12
callq  *%rax
mov    %r12,%rcx
add    $0x1,%ecx
add    %ebx,%ebx
mov    -0x10(%rbp),%r12
movslq %r13d,%rax
movsbq -0x555(%rbp,%rax,1),%rax
test   %al,%al
jne    1ff24 <jpeg_make_d_derived_tbl+0x194>
mov    -0x50(%rbp),%r8
mov    -0x48(%rbp),%rbx
xor    %eax,%eax
mov    $0x1,%ecx
jmp    1ff78 <jpeg_make_d_derived_tbl+0x1e8>
mov    %ebx,-0x454(%rbp,%rdx,4)
add    $0x1,%ebx
add    $0x1,%r13d
movslq %r13d,%rdx
movsbq -0x555(%rbp,%rdx,1),%rax
cmp    %eax,%ecx
je     1ff16 <jpeg_make_d_derived_tbl+0x186>
mov    $0x1,%eax
shl    %cl,%rax
mov    %ebx,%edx
cmp    %rdx,%rax
jle    1fecd <jpeg_make_d_derived_tbl+0x13d>
mov    %r12,-0x10(%rbp)
jmp    1feec <jpeg_make_d_derived_tbl+0x15c>
movslq %eax,%rdx
mov    -0x454(%rbp,%rdx,4),%esi
sub    %rsi,%rdx
mov    %rdx,0x90(%r8,%rdi,8)
movzbl (%rbx,%rdi,1),%edx
add    %edx,%eax
lea    -0x1(%rax),%edx
movslq %edx,%rdx
mov    -0x454(%rbp,%rdx,4),%edx
mov    %rdx,(%r8,%rdi,8)
add    $0x1,%ecx
cmp    $0x10,%ecx
jle    1ff97 <jpeg_make_d_derived_tbl+0x207>
movq   $0x0,0x118(%r8)
movq   $0xfffff,0x88(%r8)
xor    %eax,%eax
jmp    1ffbe <jpeg_make_d_derived_tbl+0x22e>
movslq %ecx,%rdi
movzbl (%rbx,%rdi,1),%edx
test   %dl,%dl
jne    1ff49 <jpeg_make_d_derived_tbl+0x1b9>
movq   $0xffffffffffffffff,(%r8,%rdi,8)
jmp    1ff75 <jpeg_make_d_derived_tbl+0x1e5>
movslq %eax,%rcx
movl   $0x900,0x128(%r8,%rcx,4)
add    $0x1,%eax
cmp    $0xff,%eax
jle    1ffac <jpeg_make_d_derived_tbl+0x21c>
mov    $0x8,%ecx
mov    %r12,-0x10(%rbp)
mov    %r14,-0x8(%rbp)
xor    %esi,%esi
mov    $0x1,%edx
mov    %rdx,%rax
jmp    20021 <jpeg_make_d_derived_tbl+0x291>
movzbl 0x11(%rbx,%r11,1),%r12d
lea    (%r12,%rdi,1),%r13d
movslq %eax,%r12
mov    %r13d,0x128(%r8,%r12,4)
add    $0x1,%eax
add    $0xffffffff,%ecx
test   %ecx,%ecx
jg     1ffde <jpeg_make_d_derived_tbl+0x24e>
add    $0x1,%esi
add    $0x1,%edx
mov    -0x50(%rbp),%rcx
movzbl (%rbx,%r9,1),%eax
cmp    %edx,%eax
jge    2003b <jpeg_make_d_derived_tbl+0x2ab>
mov    -0x48(%rbp),%rax
add    $0x1,%eax
mov    $0x8,%ecx
mov    $0x1,%edx
cmp    $0x8,%eax
jle    20051 <jpeg_make_d_derived_tbl+0x2c1>
mov    -0x40(%rbp),%rax
test   %eax,%eax
je     20068 <jpeg_make_d_derived_tbl+0x2d8>
xor    %r12d,%r12d
mov    -0x8(%rbp),%r13
mov    -0x10(%rbp),%r14
jmp    200a5 <jpeg_make_d_derived_tbl+0x315>
movslq %esi,%r11
movslq -0x454(%rbp,%r11,4),%rax
shl    %cl,%eax
mov    %rcx,-0x50(%rbp)
mov    %r10,%rcx
jmp    1fff9 <jpeg_make_d_derived_tbl+0x269>
movslq %eax,%r9
mov    %rax,%rdi
shl    $0x8,%edi
sub    %eax,%ecx
mov    %rdx,%r10
shl    %cl,%r10d
mov    %rax,-0x48(%rbp)
jmp    20007 <jpeg_make_d_derived_tbl+0x277>
mov    -0x18(%rbp),%rbx
mov    -0x38(%rbp),%r15
mov    -0x30(%rbp),%r14
mov    -0x28(%rbp),%r13
mov    -0x20(%rbp),%r12
leaveq 
retq   
movslq %r12d,%rax
movzbl 0x11(%rbx,%rax,1),%eax
cmp    $0xf,%al
jbe    200a1 <jpeg_make_d_derived_tbl+0x311>
mov    0x0(%r13),%rax
movl   $0x8,0x28(%rax)
mov    0x0(%r13),%rax
mov    (%rax),%rax
mov    %r13,%rdi
callq  *%rax
add    $0x1,%r12d
cmp    %r14d,%r12d
jl     2007e <jpeg_make_d_derived_tbl+0x2ee>
mov    -0x18(%rbp),%rbx
mov    -0x38(%rbp),%r15
mov    -0x30(%rbp),%r14
mov    -0x28(%rbp),%r13
mov    -0x20(%rbp),%r12
leaveq 
retq   

00000000000200c0 <jpeg_fill_bit_buffer>:
push   %rbp
mov    %rsp,%rbp
sub    $0x30,%rsp
mov    (%rdi),%r8
mov    0x8(%rdi),%rax
mov    0x20(%rdi),%r10
movslq 0x21c(%r10),%r9
test   %r9d,%r9d
je     20107 <jpeg_fill_bit_buffer+0x47>
mov    %rbx,%r9
mov    %rsi,%rbx
mov    %rcx,%rsi
mov    %r14,%rcx
mov    %r10,%r14
mov    %r12,%r10
mov    %rdi,%r12
mov    %r13,%r11
mov    %rdx,%r13
cmp    %esi,%r13d
jl     20139 <jpeg_fill_bit_buffer+0x79>
mov    %rcx,%r14
jmpq   201c2 <jpeg_fill_bit_buffer+0x102>
mov    $0xff,%r9d
mov    %rbx,-0x8(%rbp)
mov    %r12,-0x10(%rbp)
mov    %r13,-0x18(%rbp)
mov    %r14,-0x20(%rbp)
mov    %r15,-0x28(%rbp)
mov    %rcx,-0x30(%rbp)
mov    %rsi,%rbx
mov    %rdi,%r12
mov    %rdx,%r13
mov    %r10,%r14
mov    %r9,%r15
jmpq   201f6 <jpeg_fill_bit_buffer+0x136>
mov    0x250(%r14),%rdx
movslq 0x10(%rdx),%rdx
test   %edx,%edx
je     20150 <jpeg_fill_bit_buffer+0x90>
mov    %rcx,%r14
mov    %r13,%rcx
jmp    201b4 <jpeg_fill_bit_buffer+0xf4>
mov    (%r14),%rdx
movl   $0x75,0x28(%rdx)
mov    (%r14),%rdx
mov    0x8(%rdx),%rdx
mov    $0xffffffffffffffff,%rsi
mov    %r14,%rdi
mov    %rax,-0x8(%rbp)
mov    %r9,-0x10(%rbp)
mov    %r10,-0x18(%rbp)
mov    %r11,-0x20(%rbp)
mov    %rcx,-0x28(%rbp)
mov    %r15,-0x30(%rbp)
mov    %r8,%r15
callq  *%rdx
mov    0x250(%r14),%rax
movl   $0x1,0x10(%rax)
mov    %r13,%rcx
mov    %r15,%r8
mov    -0x30(%rbp),%r15
mov    -0x28(%rbp),%r14
mov    -0x20(%rbp),%r11
mov    -0x18(%rbp),%r10
mov    -0x10(%rbp),%r9
mov    -0x8(%rbp),%rax
mov    $0x39,%r13d
neg    %ecx
add    %r13d,%ecx
shl    %cl,%rbx
mov    %r8,(%r12)
mov    %rax,0x8(%r12)
mov    %rbx,0x10(%r12)
mov    %r13d,0x18(%r12)
mov    %r9,%rbx
mov    %r10,%r12
mov    %r11,%r13
mov    $0x1,%eax
leaveq 
retq   
mov    %rdx,%r8
movslq %ecx,%rcx
shl    $0x8,%rbx
add    %rcx,%rbx
add    $0x8,%r13d
cmp    $0x38,%r13d
jle    20212 <jpeg_fill_bit_buffer+0x152>
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r11
mov    -0x10(%rbp),%r10
mov    -0x8(%rbp),%r9
jmp    201c2 <jpeg_fill_bit_buffer+0x102>
test   %rax,%rax
je     2024c <jpeg_fill_bit_buffer+0x18c>
add    $0xffffffffffffffff,%rax
lea    0x1(%r8),%rdx
movzbl (%r8),%ecx
cmp    $0xff,%cl
jne    201e5 <jpeg_fill_bit_buffer+0x125>
test   %rax,%rax
je     2026a <jpeg_fill_bit_buffer+0x1aa>
mov    %rdx,%rcx
add    $0xffffffffffffffff,%rax
lea    0x1(%rcx),%rdx
movzbl (%rcx),%ecx
cmp    $0xff,%cl
je     20228 <jpeg_fill_bit_buffer+0x168>
test   %cl,%cl
jne    20288 <jpeg_fill_bit_buffer+0x1c8>
mov    %rdx,%r8
mov    %r15,%rcx
jmp    201e8 <jpeg_fill_bit_buffer+0x128>
mov    0x28(%r14),%rax
mov    0x18(%rax),%rax
mov    %r14,%rdi
callq  *%rax
test   %eax,%eax
je     202af <jpeg_fill_bit_buffer+0x1ef>
mov    0x28(%r14),%rax
mov    (%rax),%r8
mov    0x8(%rax),%rax
jmp    20217 <jpeg_fill_bit_buffer+0x157>
mov    0x28(%r14),%rax
mov    0x18(%rax),%rax
mov    %r14,%rdi
callq  *%rax
test   %eax,%eax
je     202c7 <jpeg_fill_bit_buffer+0x207>
mov    0x28(%r14),%rax
mov    (%rax),%rcx
mov    0x8(%rax),%rax
jmp    20230 <jpeg_fill_bit_buffer+0x170>
mov    %ecx,0x21c(%r14)
mov    %rdx,%r8
mov    -0x30(%rbp),%rsi
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%rcx
mov    -0x18(%rbp),%r11
mov    -0x10(%rbp),%r10
mov    -0x8(%rbp),%r9
jmpq   200fa <jpeg_fill_bit_buffer+0x3a>
xor    %eax,%eax
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
leaveq 
retq   
xor    %eax,%eax
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
leaveq 
retq   
nop

00000000000202e0 <jpeg_huff_decode>:
push   %rbp
mov    %rsp,%rbp
sub    $0x30,%rsp
mov    %r15,-0x18(%rbp)
cmp    %edx,%r8d
jg     20339 <jpeg_huff_decode+0x59>
mov    %rbx,%r9
mov    %r12,%r10
mov    %rdi,%r12
mov    %r13,%r11
mov    %rcx,%r13
mov    %r8,%rcx
mov    $0x1,%r15d
mov    %r15,%rax
shl    %cl,%eax
mov    %rcx,%rbx
add    $0xffffffff,%eax
mov    %rdx,%rcx
sub    %ebx,%ecx
mov    %r14,%rdx
mov    %rsi,%rdi
shr    %cl,%rdi
and    %edi,%eax
movslq %eax,%r14
mov    %r9,-0x8(%rbp)
mov    %r10,-0x10(%rbp)
mov    %r11,-0x20(%rbp)
mov    %rdx,-0x28(%rbp)
jmp    203aa <jpeg_huff_decode+0xca>
mov    %rdi,%r9
mov    %r8,%rax
mov    %r8,-0x28(%rbp)
mov    %rcx,-0x20(%rbp)
mov    %rax,%rcx
mov    %r12,%r15
mov    %rdi,%r12
mov    %r9,%rdi
callq  4410 <jpeg_fill_bit_buffer@plt>
test   %eax,%eax
jne    203f3 <jpeg_huff_decode+0x113>
mov    %r15,%r12
mov    $0xffffffffffffffff,%rax
mov    -0x18(%rbp),%r15
leaveq 
retq   
test   %ecx,%ecx
jg     20394 <jpeg_huff_decode+0xb4>
mov    %rcx,%rdx
mov    %r12,%rdi
mov    %r15,%rcx
callq  4410 <jpeg_fill_bit_buffer@plt>
test   %eax,%eax
je     20413 <jpeg_huff_decode+0x133>
mov    0x10(%r12),%rsi
movslq 0x18(%r12),%rcx
add    $0x1,%ebx
add    $0xffffffff,%ecx
mov    %rsi,%rax
shr    %cl,%rax
and    $0x1,%eax
movslq %eax,%rax
lea    (%rax,%r14,2),%r14
movslq %ebx,%rdx
mov    0x0(%r13,%rdx,8),%rax
cmp    %r14,%rax
jl     20370 <jpeg_huff_decode+0x90>
mov    %rsi,0x10(%r12)
mov    %ecx,0x18(%r12)
cmp    $0x10,%ebx
jg     20430 <jpeg_huff_decode+0x150>
add    0x90(%r13,%rdx,8),%r14
movslq %r14d,%rax
mov    0x120(%r13),%rcx
movzbl 0x11(%rcx,%rax,1),%eax
mov    -0x28(%rbp),%r14
mov    -0x20(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
mov    -0x18(%rbp),%r15
leaveq 
retq   
mov    0x10(%r12),%rsi
movslq 0x18(%r12),%rdx
mov    %rbx,%r9
mov    %r15,%r10
mov    %r13,%r11
mov    -0x20(%rbp),%r13
mov    -0x28(%rbp),%rcx
jmpq   20303 <jpeg_huff_decode+0x23>
mov    -0x28(%rbp),%r14
mov    -0x20(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
mov    $0xffffffffffffffff,%rax
mov    -0x18(%rbp),%r15
leaveq 
retq   
mov    0x20(%r12),%rax
mov    (%rax),%rax
movl   $0x76,0x28(%rax)
mov    0x20(%r12),%rdi
mov    (%rdi),%rax
mov    0x8(%rax),%rax
mov    $0xffffffffffffffff,%rsi
callq  *%rax
xor    %eax,%eax
mov    -0x28(%rbp),%r14
mov    -0x20(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
mov    -0x18(%rbp),%r15
leaveq 
retq   
nopl   0x0(%rax)

0000000000020470 <add_huff_table>:
push   %rbp
mov    %rsp,%rbp
sub    $0x20,%rsp
mov    (%rsi),%rax
test   %rax,%rax
je     20482 <add_huff_table+0x12>
leaveq 
retq   
mov    %rdi,%rax
mov    %r12,-0x8(%rbp)
mov    %r13,-0x10(%rbp)
mov    %r14,-0x18(%rbp)
mov    %r15,-0x20(%rbp)
mov    %rsi,%r12
mov    %rcx,%r13
mov    %rdi,%r14
mov    %rax,%rdi
mov    %rdx,%r15
callq  44a0 <jpeg_alloc_huff_table@plt>
mov    %rax,%rdi
mov    %rdi,(%r12)
mov    $0x11,%edx
mov    %r15,%rsi
callq  42c0 <memcpy@plt>
xor    %edx,%edx
mov    $0x1,%r8d
mov    %rdx,%rax
jmp    204d8 <add_huff_table+0x68>
movslq %r8d,%rcx
movzbl (%r15,%rcx,1),%ecx
add    %ecx,%eax
add    $0x1,%r8d
cmp    $0x10,%r8d
jle    204ca <add_huff_table+0x5a>
test   %eax,%eax
jle    204ee <add_huff_table+0x7e>
cmp    $0x100,%eax
jg     204ee <add_huff_table+0x7e>
mov    %rdx,%r14
jmp    2050c <add_huff_table+0x9c>
mov    (%r14),%rcx
movl   $0x8,0x28(%rcx)
mov    (%r14),%rcx
mov    (%rcx),%rcx
mov    %r14,%rdi
mov    %rdx,%r14
mov    %rax,%r15
callq  *%rcx
mov    %r15,%rax
mov    (%r12),%rdi
add    $0x11,%rdi
mov    %r13,%rsi
mov    %rax,%r13
movslq %r13d,%r15
mov    %r15,%rdx
callq  42c0 <memcpy@plt>
mov    (%r12),%rax
lea    0x11(%rax,%r15,1),%rdi
mov    $0x100,%eax
sub    %r13d,%eax
movslq %eax,%rdx
mov    %r14,%rsi
callq  41e0 <memset@plt>
mov    (%r12),%rax
movl   $0x0,0x114(%rax)
mov    -0x20(%rbp),%r15
mov    -0x18(%rbp),%r14
mov    -0x10(%rbp),%r13
mov    -0x8(%rbp),%r12
leaveq 
retq   
data16 nopw %cs:0x0(%rax,%rax,1)
nopl   0x0(%rax)

0000000000020570 <std_huff_tables>:
push   %rbp
mov    %rsp,%rbp
sub    $0x20,%rsp
mov    %r13,-0x8(%rbp)
mov    %r14,-0x10(%rbp)
mov    %r15,-0x18(%rbp)
movslq 0x20(%rdi),%rax
test   %eax,%eax
jne    2059c <std_huff_tables+0x2c>
lea    0x80(%rdi),%r15
lea    0xa0(%rdi),%r13
jmp    205aa <std_huff_tables+0x3a>
lea    0xe8(%rdi),%r15
lea    0x108(%rdi),%r13
lea    0x3946f(%rip),%rdx        # 59a20 <bits_dc_luminance.9>
lea    0x39479(%rip),%rcx        # 59a31 <val_dc_luminance.10>
mov    %rdi,%r14
mov    %r15,%rsi
callq  20470 <add_huff_table>
lea    0x39490(%rip),%rdx        # 59a5a <bits_ac_luminance.13>
lea    0x3949a(%rip),%rcx        # 59a6b <val_ac_luminance.14>
mov    %r14,%rdi
mov    %r13,%rsi
callq  20470 <add_huff_table>
lea    0x8(%r15),%rsi
lea    0x39456(%rip),%rdx        # 59a3d <bits_dc_chrominance.11>
lea    0x39460(%rip),%rcx        # 59a4e <val_dc_chrominance.12>
mov    %r14,%rdi
callq  20470 <add_huff_table>
lea    0x8(%r13),%rsi
mov    %r14,%rdi
lea    0x39509(%rip),%rdx        # 59b0d <bits_ac_chrominance.15>
lea    0x39513(%rip),%rcx        # 59b1e <val_ac_chrominance.16>
callq  20470 <add_huff_table>
mov    -0x18(%rbp),%r15
mov    -0x10(%rbp),%r14
mov    -0x8(%rbp),%r13
leaveq 
retq   
xchg   %ax,%ax

0000000000020620 <start_pass_huff_decoder>:
push   %rbp
mov    %rsp,%rbp
sub    $0x30,%rsp
mov    %r12,-0x10(%rbp)
mov    %r13,-0x18(%rbp)
mov    %r14,-0x20(%rbp)
mov    %r15,-0x28(%rbp)
mov    %rbx,-0x8(%rbp)
mov    0x250(%rdi),%r12
mov    $0x1,%esi
xor    %r14d,%r14d
movslq 0x20c(%rdi),%rax
test   %eax,%eax
jne    20680 <start_pass_huff_decoder+0x60>
movslq 0x210(%rdi),%rax
cmp    $0x3f,%eax
jne    20680 <start_pass_huff_decoder+0x60>
movslq 0x214(%rdi),%rax
test   %eax,%eax
jne    20680 <start_pass_huff_decoder+0x60>
movslq 0x218(%rdi),%rax
test   %eax,%eax
jne    20680 <start_pass_huff_decoder+0x60>
mov    %rdi,%rbx
mov    %r14,%r13
jmp    206f0 <start_pass_huff_decoder+0xd0>
mov    (%rdi),%rax
movl   $0x7a,0x28(%rax)
mov    (%rdi),%rax
mov    0x8(%rax),%rax
mov    %rsi,%r13
mov    $0xffffffffffffffff,%rsi
mov    %rdi,%rbx
callq  *%rax
mov    %r13,%rsi
mov    %r14,%r13
jmp    206f0 <start_pass_huff_decoder+0xd0>
movslq %r13d,%r15
mov    0x1b8(%rbx,%r15,8),%rax
movslq 0x14(%rax),%rdx
lea    0x40(%r12,%rdx,8),%rcx
movslq 0x18(%rax),%r14
mov    %rbx,%rdi
callq  44c0 <jpeg_make_d_derived_tbl@plt>
mov    %r14,%rdx
lea    0x60(%r12,%rdx,8),%rcx
mov    %rbx,%rdi
xor    %r14d,%r14d
mov    %r14,%rsi
callq  44c0 <jpeg_make_d_derived_tbl@plt>
movl   $0x0,0x28(%r12,%r15,4)
add    $0x1,%r13d
mov    $0x1,%esi
movslq 0x1b0(%rbx),%rax
cmp    %r13d,%eax
jg     206a8 <start_pass_huff_decoder+0x88>
mov    %r14,%rax
jmp    2070f <start_pass_huff_decoder+0xef>
mov    %rsi,%rcx
mov    %ecx,0x148(%r12,%rdi,4)
add    $0x1,%eax
movslq 0x1e0(%rbx),%rcx
cmp    %eax,%ecx
jg     20756 <start_pass_huff_decoder+0x136>
movl   $0x0,0x20(%r12)
movq   $0x0,0x18(%r12)
movl   $0x0,0x10(%r12)
mov    0x170(%rbx),%eax
mov    %eax,0x38(%r12)
mov    -0x8(%rbp),%rbx
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
leaveq 
retq   
movslq %eax,%rdi
movslq 0x1e4(%rbx,%rdi,4),%rcx
mov    0x1b8(%rbx,%rcx,8),%rdx
movslq 0x14(%rdx),%rcx
mov    0x40(%r12,%rcx,8),%rcx
mov    %rcx,0x80(%r12,%rdi,8)
movslq 0x18(%rdx),%rcx
mov    0x60(%r12,%rcx,8),%rcx
mov    %rcx,0xd0(%r12,%rdi,8)
movslq 0x30(%rdx),%rcx
test   %ecx,%ecx
jne    207b0 <start_pass_huff_decoder+0x190>
movl   $0x0,0x148(%r12,%rdi,4)
movl   $0x0,0x120(%r12,%rdi,4)
jmpq   2070c <start_pass_huff_decoder+0xec>
movl   $0x1,0x120(%r12,%rdi,4)
movslq 0x24(%rdx),%rcx
cmp    $0x1,%ecx
jg     20701 <start_pass_huff_decoder+0xe1>
mov    %r14,%rcx
jmpq   20704 <start_pass_huff_decoder+0xe4>
data16 nopw %cs:0x0(%rax,%rax,1)
nopl   0x0(%rax)

00000000000207e0 <process_restart>:
push   %rbp
mov    %rsp,%rbp
sub    $0x10,%rsp
mov    %rdi,-0x8(%rbp)
mov    0x250(%rdi),%rdx
mov    %rdx,-0x10(%rbp)
movslq 0x20(%rdx),%rcx
mov    %rcx,%rax
sar    $0x2,%eax
shr    $0x1d,%eax
add    %ecx,%eax
sar    $0x3,%eax
mov    0x248(%rdi),%rcx
add    0x24(%rcx),%eax
mov    %eax,0x24(%rcx)
movl   $0x0,0x20(%rdx)
mov    0x248(%rdi),%rax
mov    0x10(%rax),%rax
callq  *%rax
test   %eax,%eax
jne    20832 <process_restart+0x52>
xor    %eax,%eax
leaveq 
retq   
xor    %eax,%eax
mov    -0x10(%rbp),%rdx
mov    -0x8(%rbp),%rsi
jmp    2084c <process_restart+0x6c>
movslq %eax,%rcx
movl   $0x0,0x28(%rdx,%rcx,4)
add    $0x1,%eax
movslq 0x1b0(%rsi),%rcx
cmp    %eax,%ecx
jg     2083e <process_restart+0x5e>
mov    0x170(%rsi),%eax
mov    %eax,0x38(%rdx)
mov    $0x1,%eax
movslq 0x21c(%rsi),%rcx
test   %ecx,%ecx
je     20872 <process_restart+0x92>
leaveq 
retq   
movl   $0x0,0x10(%rdx)
leaveq 
retq   
nopl   0x0(%rax,%rax,1)

0000000000020880 <decode_mcu_slow>:
push   %rbp
mov    %rsp,%rbp
sub    $0xa0,%rsp
mov    %r15,-0x28(%rbp)
mov    %r14,-0x20(%rbp)
mov    %rsi,-0x60(%rbp)
mov    %rbx,-0x8(%rbp)
mov    %r12,-0x10(%rbp)
mov    %r13,-0x18(%rbp)
mov    %rdi,-0x48(%rbp)
mov    0x250(%rdi),%rax
mov    %rax,-0x50(%rbp)
mov    %rdi,-0x78(%rbp)
mov    0x28(%rdi),%rcx
mov    (%rcx),%rcx
mov    %rcx,-0x98(%rbp)
mov    0x28(%rdi),%rcx
mov    0x8(%rcx),%rcx
mov    %rcx,-0x90(%rbp)
mov    0x18(%rax),%r8
movslq 0x20(%rax),%rdx
mov    0x28(%rax),%rcx
mov    %rcx,-0x70(%rbp)
mov    0x30(%rax),%rcx
mov    %rcx,-0x68(%rbp)
mov    0x4d6e6(%rip),%r9        # 6dfd8 <jpeg_natural_order@@LIBJPEG_6.2+0x129f4>
mov    %r9,-0x40(%rbp)
mov    %rsi,%rcx
mov    %r8,%rsi
lea    -0x98(%rbp),%rbx
xor    %r14d,%r14d
mov    $0x1,%r13d
mov    %r14,%r8
jmp    2094f <decode_mcu_slow+0xcf>
cmp    %r8d,%edx
jl     209a9 <decode_mcu_slow+0x129>
sub    %r8d,%edx
sar    $0x4,%eax
add    %r15d,%eax
lea    0x1(%rax),%r15d
mov    $0x1,%r13d
cmp    $0x3f,%r15d
jle    209d7 <decode_mcu_slow+0x157>
mov    -0x40(%rbp),%r9
mov    -0x58(%rbp),%rax
lea    0x1(%rax),%r8d
mov    -0x50(%rbp),%rax
mov    -0x48(%rbp),%rdi
mov    -0x60(%rbp),%rcx
cmp    0x1e0(%rdi),%r8d
jl     20a08 <decode_mcu_slow+0x188>
mov    -0x98(%rbp),%rbx
mov    0x28(%rdi),%rcx
mov    %rbx,(%rcx)
mov    -0x90(%rbp),%rbx
mov    0x28(%rdi),%rcx
mov    %rbx,0x8(%rcx)
mov    %rsi,0x18(%rax)
mov    %edx,0x20(%rax)
mov    -0x70(%rbp),%rcx
mov    %rcx,0x28(%rax)
mov    -0x68(%rbp),%rcx
mov    %rcx,0x30(%rax)
mov    %r13,%rax
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
mov    -0x20(%rbp),%r14
mov    -0x28(%rbp),%r15
leaveq 
retq   
mov    %r8,%r13
mov    %rax,%r14
mov    %rbx,%rdi
mov    %r13,%rcx
callq  4410 <jpeg_fill_bit_buffer@plt>
test   %eax,%eax
je     20a1c <decode_mcu_slow+0x19c>
mov    %r14,%rax
mov    %r13,%r8
mov    -0x88(%rbp),%rsi
movslq -0x80(%rbp),%rdx
xor    %r14d,%r14d
jmpq   2091a <decode_mcu_slow+0x9a>
cmp    $0x7,%edx
jle    20a34 <decode_mcu_slow+0x1b4>
lea    0x38(%rdx),%ecx
mov    %rsi,%rax
shr    %cl,%rax
movzbl %al,%eax
movslq %eax,%rax
movslq 0x128(%r12,%rax,4),%rax
mov    %rax,%r8
sar    $0x8,%r8d
cmp    $0x8,%r8d
jg     20a5a <decode_mcu_slow+0x1da>
sub    %r8d,%edx
movzbl %al,%eax
jmp    20a78 <decode_mcu_slow+0x1f8>
test   %rcx,%rcx
movslq %r8d,%r10
jne    20a9f <decode_mcu_slow+0x21f>
mov    %r14,%r15
jmpq   20aa3 <decode_mcu_slow+0x223>
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
xor    %eax,%eax
mov    -0x20(%rbp),%r14
mov    -0x28(%rbp),%r15
leaveq 
retq   
mov    %rbx,%rdi
mov    %r14,%rcx
callq  4410 <jpeg_fill_bit_buffer@plt>
test   %eax,%eax
je     20af4 <decode_mcu_slow+0x274>
mov    -0x88(%rbp),%rsi
movslq -0x80(%rbp),%rdx
cmp    $0x7,%edx
jg     209dc <decode_mcu_slow+0x15c>
mov    %r13,%r8
mov    %rbx,%rdi
mov    %r12,%rcx
callq  41c0 <jpeg_huff_decode@plt>
test   %eax,%eax
js     20b0d <decode_mcu_slow+0x28d>
mov    -0x88(%rbp),%rsi
movslq -0x80(%rbp),%rdx
mov    %rax,%r8
and    $0xf,%r8d
test   %r8d,%r8d
jg     20911 <decode_mcu_slow+0x91>
and    $0xfffffff0,%eax
cmp    $0xf0,%eax
jne    20b26 <decode_mcu_slow+0x2a6>
lea    0xf(%r15),%eax
jmpq   20923 <decode_mcu_slow+0xa3>
mov    (%rcx,%r10,8),%r15
mov    0x80(%rax,%r10,8),%r11
mov    %r8,-0x58(%rbp)
mov    0xd0(%rax,%r10,8),%r12
mov    %r12,-0x30(%rbp)
cmp    $0x7,%edx
jle    20b2f <decode_mcu_slow+0x2af>
lea    0x38(%rdx),%ecx
mov    %rsi,%r8
shr    %cl,%r8
movzbl %r8b,%ecx
movslq %ecx,%rcx
movslq 0x128(%r11,%rcx,4),%rcx
mov    %rcx,%r8
sar    $0x8,%r8d
cmp    $0x8,%r8d
jg     20b7f <decode_mcu_slow+0x2ff>
sub    %r8d,%edx
movzbl %cl,%ecx
jmpq   20bc9 <decode_mcu_slow+0x349>
mov    %r14,%rax
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
mov    -0x20(%rbp),%r14
mov    -0x28(%rbp),%r15
leaveq 
retq   
mov    %r14,%rax
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
mov    -0x20(%rbp),%r14
mov    -0x28(%rbp),%r15
leaveq 
retq   
mov    -0x40(%rbp),%r9
jmpq   2093b <decode_mcu_slow+0xbb>
mov    %r14,%rcx
mov    %rdi,%r14
mov    %rbx,%rdi
mov    %rax,%rbx
mov    %r10,%r12
mov    %r11,%r13
callq  4410 <jpeg_fill_bit_buffer@plt>
test   %eax,%eax
je     20bfd <decode_mcu_slow+0x37d>
mov    -0x88(%rbp),%rsi
movslq -0x80(%rbp),%rdx
cmp    $0x7,%edx
jg     20c15 <decode_mcu_slow+0x395>
mov    %rbx,%rax
mov    %r14,%rdi
mov    %r12,%r10
mov    %r13,%r11
lea    -0x98(%rbp),%rbx
mov    $0x1,%r8d
mov    -0x30(%rbp),%r12
mov    %r11,%rcx
mov    %r10,%r13
mov    %rax,%r14
mov    %rbx,%r11
mov    %rdi,%rbx
mov    %r11,%rdi
callq  41c0 <jpeg_huff_decode@plt>
test   %eax,%eax
js     20c3e <decode_mcu_slow+0x3be>
mov    %rax,%rcx
mov    %r14,%rax
mov    %rbx,%rdi
mov    %r13,%r10
mov    -0x88(%rbp),%rsi
movslq -0x80(%rbp),%rdx
mov    -0x40(%rbp),%r9
xor    %r14d,%r14d
lea    -0x98(%rbp),%rbx
mov    $0x1,%r13d
test   %ecx,%ecx
jne    20c56 <decode_mcu_slow+0x3d6>
mov    %r14,%rcx
movslq 0x120(%rax,%r10,4),%r8
test   %r8d,%r8d
jne    20cf3 <decode_mcu_slow+0x473>
movslq 0x148(%rax,%r10,4),%rax
test   %eax,%eax
jne    20d15 <decode_mcu_slow+0x495>
mov    %r13,%r15
jmpq   2092d <decode_mcu_slow+0xad>
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
xor    %eax,%eax
mov    -0x20(%rbp),%r14
mov    -0x28(%rbp),%r15
leaveq 
retq   
mov    %rbx,%rax
mov    %r14,%rdi
mov    %r12,%r10
mov    %r13,%r11
mov    -0x40(%rbp),%r9
xor    %r14d,%r14d
lea    -0x98(%rbp),%rbx
mov    $0x1,%r13d
mov    -0x30(%rbp),%r12
jmpq   20ac0 <decode_mcu_slow+0x240>
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
xor    %eax,%eax
mov    -0x20(%rbp),%r14
mov    -0x28(%rbp),%r15
leaveq 
retq   
cmp    %edx,%ecx
jle    20ca1 <decode_mcu_slow+0x421>
mov    %rdi,%r12
mov    %rbx,%rdi
mov    %r10,%r13
mov    %rax,%r14
mov    %rcx,%rbx
callq  4410 <jpeg_fill_bit_buffer@plt>
test   %eax,%eax
je     20d27 <decode_mcu_slow+0x4a7>
mov    %r14,%rax
mov    %rbx,%rcx
mov    %r12,%rdi
mov    %r13,%r10
mov    -0x88(%rbp),%rsi
movslq -0x80(%rbp),%rdx
xor    %r14d,%r14d
lea    -0x98(%rbp),%rbx
mov    $0x1,%r13d
mov    -0x30(%rbp),%r12
mov    %r13,%r8
shl    %cl,%r8d
add    $0xffffffff,%r8d
sub    %ecx,%edx
mov    %rcx,%r9
mov    %rdx,%rcx
mov    %rsi,%r11
shr    %cl,%r11
mov    %rcx,%rdx
and    %r11d,%r8d
lea    0x1f(%r9),%ecx
mov    %r13,%r11
shl    %cl,%r11d
neg    %r11d
add    %r8d,%r11d
sar    $0x1f,%r11d
mov    %r9,%rcx
mov    $0xffffffffffffffff,%r9
shl    %cl,%r9d
lea    0x1(%r9),%ecx
and    %r11d,%ecx
add    %r8d,%ecx
mov    -0x40(%rbp),%r9
jmpq   20bd4 <decode_mcu_slow+0x354>
movslq 0x1e4(%rdi,%r10,4),%rdi
add    -0x70(%rbp,%rdi,4),%ecx
mov    %ecx,-0x70(%rbp,%rdi,4)
test   %r15,%r15
je     20be5 <decode_mcu_slow+0x365>
mov    %cx,(%r15)
jmpq   20be5 <decode_mcu_slow+0x365>
test   %r15,%r15
je     20d3f <decode_mcu_slow+0x4bf>
mov    $0xffffffff,%edi
mov    %r13,%rax
jmpq   20deb <decode_mcu_slow+0x56b>
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
xor    %eax,%eax
mov    -0x20(%rbp),%r14
mov    -0x28(%rbp),%r15
leaveq 
retq   
mov    %r13,%r15
jmpq   2092d <decode_mcu_slow+0xad>
cmp    %edx,%ecx
jle    20d8e <decode_mcu_slow+0x50e>
mov    %rbx,%rdi
mov    %r9,%r12
mov    %rax,%r13
mov    %rcx,%rbx
callq  4410 <jpeg_fill_bit_buffer@plt>
test   %eax,%eax
je     20e2b <decode_mcu_slow+0x5ab>
mov    %r13,%rax
mov    %rbx,%rcx
mov    %r12,%r9
mov    -0x88(%rbp),%rsi
movslq -0x80(%rbp),%rdx
lea    -0x98(%rbp),%rbx
mov    $0x1,%r13d
mov    -0x30(%rbp),%r12
mov    $0xffffffff,%edi
mov    %r13,%r8
shl    %cl,%r8d
add    $0xffffffff,%r8d
sub    %ecx,%edx
mov    %rcx,%r11
mov    %rdx,%rcx
mov    %rsi,%r10
shr    %cl,%r10
mov    %rcx,%rdx
and    %r10d,%r8d
lea    0x1f(%r11),%ecx
mov    %r13,%r10
shl    %cl,%r10d
neg    %r10d
add    %r8d,%r10d
sar    $0x1f,%r10d
mov    %r11,%rcx
mov    %rdi,%r11
shl    %cl,%r11d
lea    0x1(%r11),%ecx
and    %ecx,%r10d
add    %r10d,%r8d
sar    $0x4,%eax
add    %r14d,%eax
movslq %eax,%rcx
movslq (%r9,%rcx,4),%rcx
mov    %r8w,(%r15,%rcx,2)
add    $0x1,%eax
xor    %r14d,%r14d
cmp    $0x3f,%eax
jg     2093b <decode_mcu_slow+0xbb>
cmp    $0x7,%edx
jle    20e43 <decode_mcu_slow+0x5c3>
mov    %rax,%r14
lea    0x38(%rdx),%ecx
mov    %rsi,%rax
shr    %cl,%rax
movzbl %al,%eax
movslq %eax,%rax
movslq 0x128(%r12,%rax,4),%rax
mov    %rax,%r8
sar    $0x8,%r8d
cmp    $0x8,%r8d
jg     20e7e <decode_mcu_slow+0x5fe>
sub    %r8d,%edx
movzbl %al,%eax
jmpq   20ec1 <decode_mcu_slow+0x641>
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
xor    %eax,%eax
mov    -0x20(%rbp),%r14
mov    -0x28(%rbp),%r15
leaveq 
retq   
mov    %rbx,%rdi
mov    %r15,-0x38(%rbp)
mov    %r14,%rcx
mov    %rax,%r14
mov    %r9,%r15
callq  4410 <jpeg_fill_bit_buffer@plt>
test   %eax,%eax
je     20ee2 <decode_mcu_slow+0x662>
mov    -0x88(%rbp),%rsi
movslq -0x80(%rbp),%rdx
cmp    $0x7,%edx
jg     20efa <decode_mcu_slow+0x67a>
mov    %r13,%r8
mov    %r15,%r9
mov    -0x38(%rbp),%r15
mov    %r9,%r13
mov    %rbx,%rdi
mov    %r12,%rcx
callq  41c0 <jpeg_huff_decode@plt>
test   %eax,%eax
jns    20ea8 <decode_mcu_slow+0x628>
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
xor    %eax,%eax
mov    -0x20(%rbp),%r14
mov    -0x28(%rbp),%r15
leaveq 
retq   
mov    %r13,%r9
mov    -0x88(%rbp),%rsi
movslq -0x80(%rbp),%rdx
mov    $0x1,%r13d
mov    $0xffffffff,%edi
mov    %rax,%rcx
and    $0xf,%ecx
test   %ecx,%ecx
jg     20d47 <decode_mcu_slow+0x4c7>
and    $0xfffffff0,%eax
cmp    $0xf0,%eax
jne    20f0b <decode_mcu_slow+0x68b>
lea    0xf(%r14),%eax
jmpq   20de5 <decode_mcu_slow+0x565>
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
xor    %eax,%eax
mov    -0x20(%rbp),%r14
mov    -0x28(%rbp),%r15
leaveq 
retq   
mov    %r15,%r9
mov    -0x38(%rbp),%r15
mov    $0xffffffff,%edi
jmpq   20dfc <decode_mcu_slow+0x57c>
xor    %r14d,%r14d
jmpq   2093b <decode_mcu_slow+0xbb>
data16 nopw %cs:0x0(%rax,%rax,1)
xchg   %ax,%ax

0000000000020f20 <decode_mcu_fast>:
push   %rbp
mov    %rsp,%rbp
sub    $0x80,%rsp
mov    %r15,-0x38(%rbp)
mov    %r14,-0x30(%rbp)
mov    %rsi,-0x58(%rbp)
mov    %rbx,-0x18(%rbp)
mov    %r12,-0x20(%rbp)
mov    %r13,-0x28(%rbp)
mov    0x28(%rdi),%rcx
mov    0x8(%rcx),%rax
mov    %rax,-0x8(%rbp)
mov    (%rcx),%rbx
mov    %rbx,-0x10(%rbp)
mov    0x250(%rdi),%r8
mov    %r8,-0x60(%rbp)
mov    0x18(%r8),%rdx
movslq 0x20(%r8),%rcx
mov    0x28(%r8),%rax
mov    %rax,-0x80(%rbp)
mov    0x30(%r8),%rax
mov    %rax,-0x78(%rbp)
mov    0x4d058(%rip),%r10        # 6dfd8 <jpeg_natural_order@@LIBJPEG_6.2+0x129f4>
mov    %r10,-0x40(%rbp)
xor    %r13d,%r13d
mov    $0x1,%eax
mov    %r13,%r9
jmpq   210b5 <decode_mcu_fast+0x195>
cmp    $0x10,%ecx
jg     2108e <decode_mcu_fast+0x16e>
lea    0x1(%rbx),%r12
movzbl (%r12),%r13d
movzbl (%rbx),%r15d
shl    $0x8,%rdx
add    %r15,%rdx
cmp    $0xff,%r15b
jne    20fc4 <decode_mcu_fast+0xa4>
test   %r13b,%r13b
jne    2111f <decode_mcu_fast+0x1ff>
lea    0x2(%rbx),%r12
lea    0x1(%r12),%r13
movzbl 0x0(%r13),%r15d
movzbl (%r12),%ebx
shl    $0x8,%rdx
add    %rbx,%rdx
cmp    $0xff,%bl
jne    20fed <decode_mcu_fast+0xcd>
test   %r15b,%r15b
jne    21135 <decode_mcu_fast+0x215>
lea    0x2(%r12),%r13
lea    0x1(%r13),%rbx
movzbl (%rbx),%r15d
movzbl 0x0(%r13),%r12d
shl    $0x8,%rdx
add    %r12,%rdx
cmp    $0xff,%r12b
jne    21014 <decode_mcu_fast+0xf4>
test   %r15b,%r15b
jne    2114b <decode_mcu_fast+0x22b>
lea    0x2(%r13),%rbx
lea    0x1(%rbx),%r13
movzbl 0x0(%r13),%r15d
movzbl (%rbx),%r12d
shl    $0x8,%rdx
add    %r12,%rdx
cmp    $0xff,%r12b
jne    2103b <decode_mcu_fast+0x11b>
test   %r15b,%r15b
jne    21161 <decode_mcu_fast+0x241>
lea    0x2(%rbx),%r13
lea    0x1(%r13),%r12
movzbl (%r12),%r15d
movzbl 0x0(%r13),%ebx
shl    $0x8,%rdx
add    %rbx,%rdx
cmp    $0xff,%bl
jne    21062 <decode_mcu_fast+0x142>
test   %r15b,%r15b
jne    21177 <decode_mcu_fast+0x257>
lea    0x2(%r13),%r12
lea    0x1(%r12),%rbx
movzbl (%rbx),%r15d
movzbl (%r12),%r13d
shl    $0x8,%rdx
add    %r13,%rdx
add    $0x30,%ecx
cmp    $0xff,%r13b
jne    2108e <decode_mcu_fast+0x16e>
test   %r15b,%r15b
jne    2118d <decode_mcu_fast+0x26d>
lea    0x2(%r12),%rbx
sub    %r14d,%ecx
shr    $0x4,%r11d
add    %r11d,%r10d
add    $0x1,%r10d
cmp    $0x3f,%r10d
jle    211a3 <decode_mcu_fast+0x283>
mov    -0x40(%rbp),%r10
add    $0x1,%r9d
xor    %r13d,%r13d
mov    -0x58(%rbp),%rsi
movslq 0x1e0(%rdi),%r11
cmp    %r9d,%r11d
jg     212fb <decode_mcu_fast+0x3db>
movslq 0x21c(%rdi),%rsi
test   %esi,%esi
jne    2130f <decode_mcu_fast+0x3ef>
mov    0x28(%rdi),%rsi
mov    %rbx,(%rsi)
mov    -0x10(%rbp),%rsi
sub    %rsi,%rbx
mov    -0x8(%rbp),%rsi
sub    %rbx,%rsi
mov    0x28(%rdi),%rdi
mov    %rsi,0x8(%rdi)
mov    %rdx,0x18(%r8)
mov    %ecx,0x20(%r8)
mov    -0x80(%rbp),%rcx
mov    %rcx,0x28(%r8)
mov    -0x78(%rbp),%rcx
mov    %rcx,0x30(%r8)
mov    -0x28(%rbp),%r13
mov    -0x20(%rbp),%r12
mov    -0x18(%rbp),%rbx
mov    -0x30(%rbp),%r14
mov    -0x38(%rbp),%r15
leaveq 
retq   
and    $0xffffffffffffff00,%rdx
mov    %r13d,0x21c(%rdi)
mov    %rbx,%r12
jmpq   20fc4 <decode_mcu_fast+0xa4>
and    $0xffffffffffffff00,%rdx
mov    %r15d,0x21c(%rdi)
mov    %r12,%r13
jmpq   20fed <decode_mcu_fast+0xcd>
and    $0xffffffffffffff00,%rdx
mov    %r15d,0x21c(%rdi)
mov    %r13,%rbx
jmpq   21014 <decode_mcu_fast+0xf4>
and    $0xffffffffffffff00,%rdx
mov    %r15d,0x21c(%rdi)
mov    %rbx,%r13
jmpq   2103b <decode_mcu_fast+0x11b>
and    $0xffffffffffffff00,%rdx
mov    %r15d,0x21c(%rdi)
mov    %r13,%r12
jmpq   21062 <decode_mcu_fast+0x142>
and    $0xffffffffffffff00,%rdx
mov    %r15d,0x21c(%rdi)
mov    %r12,%rbx
jmpq   2108e <decode_mcu_fast+0x16e>
cmp    $0x10,%ecx
jg     21299 <decode_mcu_fast+0x379>
lea    0x1(%rbx),%r11
movzbl (%r11),%r13d
movzbl (%rbx),%r12d
shl    $0x8,%rdx
add    %r12,%rdx
cmp    $0xff,%r12b
jne    211d2 <decode_mcu_fast+0x2b2>
test   %r13b,%r13b
jne    21332 <decode_mcu_fast+0x412>
lea    0x2(%rbx),%r11
lea    0x1(%r11),%r12
movzbl (%r12),%r13d
movzbl (%r11),%ebx
shl    $0x8,%rdx
add    %rbx,%rdx
cmp    $0xff,%bl
jne    211f8 <decode_mcu_fast+0x2d8>
test   %r13b,%r13b
jne    21348 <decode_mcu_fast+0x428>
lea    0x2(%r11),%r12
lea    0x1(%r12),%rbx
movzbl (%rbx),%r13d
movzbl (%r12),%r11d
shl    $0x8,%rdx
add    %r11,%rdx
cmp    $0xff,%r11b
jne    21221 <decode_mcu_fast+0x301>
test   %r13b,%r13b
jne    2135e <decode_mcu_fast+0x43e>
lea    0x2(%r12),%rbx
lea    0x1(%rbx),%r11
movzbl (%r11),%r13d
movzbl (%rbx),%r12d
shl    $0x8,%rdx
add    %r12,%rdx
cmp    $0xff,%r12b
jne    21247 <decode_mcu_fast+0x327>
test   %r13b,%r13b
jne    21374 <decode_mcu_fast+0x454>
lea    0x2(%rbx),%r11
lea    0x1(%r11),%r12
movzbl (%r12),%r13d
movzbl (%r11),%ebx
shl    $0x8,%rdx
add    %rbx,%rdx
cmp    $0xff,%bl
jne    2126d <decode_mcu_fast+0x34d>
test   %r13b,%r13b
jne    2138a <decode_mcu_fast+0x46a>
lea    0x2(%r11),%r12
lea    0x1(%r12),%rbx
movzbl (%rbx),%r13d
movzbl (%r12),%r11d
shl    $0x8,%rdx
add    %r11,%rdx
add    $0x30,%ecx
cmp    $0xff,%r11b
jne    21299 <decode_mcu_fast+0x379>
test   %r13b,%r13b
jne    213a0 <decode_mcu_fast+0x480>
lea    0x2(%r12),%rbx
mov    %rcx,%r12
lea    0x38(%r12),%ecx
mov    %rdx,%r11
shr    %cl,%r11
movzbl %r11b,%ecx
movslq %ecx,%rcx
movslq 0x128(%rsi,%rcx,4),%r13
mov    %r13,%r11
sar    $0x8,%r11d
mov    %r12,%rcx
sub    %r11d,%ecx
cmp    $0x8,%r11d
jg     213b6 <decode_mcu_fast+0x496>
movzbl %r13b,%r11d
mov    %r11,%r14
and    $0xf,%r14d
test   %r14d,%r14d
jg     20f94 <decode_mcu_fast+0x74>
and    $0xfffffff0,%r11d
cmp    $0xe0,%r11d
jle    213da <decode_mcu_fast+0x4ba>
add    $0xf,%r10d
jmpq   21098 <decode_mcu_fast+0x178>
test   %rsi,%rsi
movslq %r9d,%r12
jne    213e3 <decode_mcu_fast+0x4c3>
mov    %r13,%r11
jmpq   213e7 <decode_mcu_fast+0x4c7>
movl   $0x0,0x21c(%rdi)
mov    %r13,%rax
mov    -0x28(%rbp),%r13
mov    -0x20(%rbp),%r12
mov    -0x18(%rbp),%rbx
mov    -0x30(%rbp),%r14
mov    -0x38(%rbp),%r15
leaveq 
retq   
and    $0xffffffffffffff00,%rdx
mov    %r13d,0x21c(%rdi)
mov    %rbx,%r11
jmpq   211d2 <decode_mcu_fast+0x2b2>
and    $0xffffffffffffff00,%rdx
mov    %r13d,0x21c(%rdi)
mov    %r11,%r12
jmpq   211f8 <decode_mcu_fast+0x2d8>
and    $0xffffffffffffff00,%rdx
mov    %r13d,0x21c(%rdi)
mov    %r12,%rbx
jmpq   21221 <decode_mcu_fast+0x301>
and    $0xffffffffffffff00,%rdx
mov    %r13d,0x21c(%rdi)
mov    %rbx,%r11
jmpq   21247 <decode_mcu_fast+0x327>
and    $0xffffffffffffff00,%rdx
mov    %r13d,0x21c(%rdi)
mov    %r11,%r12
jmpq   2126d <decode_mcu_fast+0x34d>
and    $0xffffffffffffff00,%rdx
mov    %r13d,0x21c(%rdi)
mov    %r12,%rbx
jmpq   21299 <decode_mcu_fast+0x379>
mov    %rdx,%r12
shr    %cl,%r12
mov    %rcx,%r13
mov    %r11,%rcx
mov    %rax,%r14
shl    %cl,%r14d
mov    %rcx,%r11
lea    -0x1(%r14),%ecx
and    %ecx,%r12d
mov    %r13,%rcx
jmpq   216c3 <decode_mcu_fast+0x7a3>
mov    -0x40(%rbp),%r10
jmpq   210aa <decode_mcu_fast+0x18a>
mov    (%rsi,%r12,8),%r11
mov    0xd0(%r8,%r12,8),%rsi
mov    %r9,-0x70(%rbp)
mov    0x80(%r8,%r12,8),%r15
cmp    $0x10,%ecx
jg     214e4 <decode_mcu_fast+0x5c4>
lea    0x1(%rbx),%r9
movzbl (%r9),%r10d
movzbl (%rbx),%r14d
shl    $0x8,%rdx
add    %r14,%rdx
cmp    $0xff,%r14b
jne    2142a <decode_mcu_fast+0x50a>
test   %r10b,%r10b
jne    216f0 <decode_mcu_fast+0x7d0>
lea    0x2(%rbx),%r9
lea    0x1(%r9),%r10
movzbl (%r10),%ebx
movzbl (%r9),%r14d
shl    $0x8,%rdx
add    %r14,%rdx
cmp    $0xff,%r14b
jne    2144f <decode_mcu_fast+0x52f>
test   %bl,%bl
jne    21706 <decode_mcu_fast+0x7e6>
lea    0x2(%r9),%r10
lea    0x1(%r10),%rbx
movzbl (%rbx),%r9d
movzbl (%r10),%r14d
shl    $0x8,%rdx
add    %r14,%rdx
cmp    $0xff,%r14b
jne    21475 <decode_mcu_fast+0x555>
test   %r9b,%r9b
jne    2171b <decode_mcu_fast+0x7fb>
lea    0x2(%r10),%rbx
lea    0x1(%rbx),%r9
movzbl (%r9),%r10d
movzbl (%rbx),%r14d
shl    $0x8,%rdx
add    %r14,%rdx
cmp    $0xff,%r14b
jne    2149b <decode_mcu_fast+0x57b>
test   %r10b,%r10b
jne    21731 <decode_mcu_fast+0x811>
lea    0x2(%rbx),%r9
lea    0x1(%r9),%r14
movzbl (%r14),%ebx
movzbl (%r9),%r10d
shl    $0x8,%rdx
add    %r10,%rdx
cmp    $0xff,%r10b
jne    214c0 <decode_mcu_fast+0x5a0>
test   %bl,%bl
jne    21747 <decode_mcu_fast+0x827>
lea    0x2(%r9),%r14
lea    0x1(%r14),%rbx
movzbl (%rbx),%r9d
movzbl (%r14),%r10d
shl    $0x8,%rdx
add    %r10,%rdx
add    $0x30,%ecx
cmp    $0xff,%r10b
je     2175c <decode_mcu_fast+0x83c>
mov    -0x40(%rbp),%r10
mov    %rcx,%r14
lea    0x38(%r14),%ecx
mov    %rdx,%r9
shr    %cl,%r9
movzbl %r9b,%ecx
movslq %ecx,%rcx
movslq 0x128(%r15,%rcx,4),%rcx
mov    %rcx,%r9
sar    $0x8,%r9d
sub    %r9d,%r14d
cmp    $0x8,%r9d
jg     21772 <decode_mcu_fast+0x852>
movzbl %cl,%r15d
mov    %r14,%rcx
mov    -0x70(%rbp),%r9
test   %r15d,%r15d
jle    2166c <decode_mcu_fast+0x74c>
cmp    $0x10,%ecx
jg     21618 <decode_mcu_fast+0x6f8>
lea    0x1(%rbx),%r9
movzbl (%r9),%r14d
movzbl (%rbx),%r13d
shl    $0x8,%rdx
add    %r13,%rdx
cmp    $0xff,%r13b
jne    21557 <decode_mcu_fast+0x637>
test   %r14b,%r14b
jne    217a9 <decode_mcu_fast+0x889>
lea    0x2(%rbx),%r9
lea    0x1(%r9),%rbx
movzbl (%rbx),%r14d
movzbl (%r9),%r13d
shl    $0x8,%rdx
add    %r13,%rdx
cmp    $0xff,%r13b
jne    2157d <decode_mcu_fast+0x65d>
test   %r14b,%r14b
jne    217bf <decode_mcu_fast+0x89f>
lea    0x2(%r9),%rbx
lea    0x1(%rbx),%r9
movzbl (%r9),%r14d
movzbl (%rbx),%r13d
shl    $0x8,%rdx
add    %r13,%rdx
cmp    $0xff,%r13b
jne    215a3 <decode_mcu_fast+0x683>
test   %r14b,%r14b
jne    217d5 <decode_mcu_fast+0x8b5>
lea    0x2(%rbx),%r9
lea    0x1(%r9),%rbx
movzbl (%rbx),%r14d
movzbl (%r9),%r13d
shl    $0x8,%rdx
add    %r13,%rdx
cmp    $0xff,%r13b
jne    215c9 <decode_mcu_fast+0x6a9>
test   %r14b,%r14b
jne    217eb <decode_mcu_fast+0x8cb>
lea    0x2(%r9),%rbx
lea    0x1(%rbx),%r9
movzbl (%r9),%r14d
movzbl (%rbx),%r13d
shl    $0x8,%rdx
add    %r13,%rdx
cmp    $0xff,%r13b
jne    215ef <decode_mcu_fast+0x6cf>
test   %r14b,%r14b
jne    21801 <decode_mcu_fast+0x8e1>
lea    0x2(%rbx),%r9
lea    0x1(%r9),%rbx
movzbl (%rbx),%r14d
movzbl (%r9),%r13d
shl    $0x8,%rdx
add    %r13,%rdx
add    $0x30,%ecx
cmp    $0xff,%r13b
jne    21618 <decode_mcu_fast+0x6f8>
test   %r14b,%r14b
jne    21817 <decode_mcu_fast+0x8f7>
lea    0x2(%r9),%rbx
sub    %r15d,%ecx
mov    %rdx,%r14
shr    %cl,%r14
mov    %r15,%r9
mov    %rcx,%r15
mov    %r9,%rcx
mov    %rax,%r13
shl    %cl,%r13d
mov    %rcx,%r9
add    $0xffffffff,%r13d
and    %r14d,%r13d
lea    0x1f(%r9),%ecx
mov    %rax,%r14
shl    %cl,%r14d
neg    %r14d
add    %r13d,%r14d
sar    $0x1f,%r14d
mov    %r9,%rcx
mov    $0xffffffffffffffff,%r9
shl    %cl,%r9d
lea    0x1(%r9),%ecx
and    %r14d,%ecx
add    %ecx,%r13d
mov    %r15,%rcx
mov    -0x70(%rbp),%r9
movslq 0x120(%r8,%r12,4),%r14
test   %r14d,%r14d
je     21694 <decode_mcu_fast+0x774>
movslq 0x1e4(%rdi,%r12,4),%r14
add    -0x80(%rbp,%r14,4),%r13d
mov    %r13d,-0x80(%rbp,%r14,4)
test   %r11,%r11
je     21694 <decode_mcu_fast+0x774>
mov    %r13w,(%r11)
movslq 0x148(%r8,%r12,4),%r12
test   %r12d,%r12d
jne    2182d <decode_mcu_fast+0x90d>
mov    %rax,%r10
jmpq   2109c <decode_mcu_fast+0x17c>
add    $0x1,%r11d
add    $0xffffffff,%ecx
mov    %rdx,%r13
shr    %cl,%r13
and    $0x1,%r13d
lea    0x0(%r13,%r12,2),%r12d
movslq %r11d,%r13
movslq %r12d,%r14
cmp    (%rsi,%r13,8),%r14
jg     216ad <decode_mcu_fast+0x78d>
add    0x90(%rsi,%r13,8),%r12d
movzbl %r12b,%r11d
movslq %r11d,%r11
mov    0x120(%rsi),%r12
movzbl 0x11(%r12,%r11,1),%r11d
jmpq   212d1 <decode_mcu_fast+0x3b1>
and    $0xffffffffffffff00,%rdx
mov    %r10d,0x21c(%rdi)
mov    %rbx,%r9
jmpq   2142a <decode_mcu_fast+0x50a>
and    $0xffffffffffffff00,%rdx
mov    %ebx,0x21c(%rdi)
mov    %r9,%r10
jmpq   2144f <decode_mcu_fast+0x52f>
and    $0xffffffffffffff00,%rdx
mov    %r9d,0x21c(%rdi)
mov    %r10,%rbx
jmpq   21475 <decode_mcu_fast+0x555>
and    $0xffffffffffffff00,%rdx
mov    %r10d,0x21c(%rdi)
mov    %rbx,%r9
jmpq   2149b <decode_mcu_fast+0x57b>
and    $0xffffffffffffff00,%rdx
mov    %ebx,0x21c(%rdi)
mov    %r9,%r14
jmpq   214c0 <decode_mcu_fast+0x5a0>
test   %r9b,%r9b
jne    21840 <decode_mcu_fast+0x920>
lea    0x2(%r14),%rbx
mov    -0x40(%rbp),%r10
jmpq   214e4 <decode_mcu_fast+0x5c4>
mov    %r14,%rcx
mov    %rdx,%r10
shr    %cl,%r10
mov    %rcx,%r14
mov    %r9,%rcx
mov    %rax,%r9
shl    %cl,%r9d
add    $0xffffffff,%r9d
and    %r9d,%r10d
mov    %rbx,-0x68(%rbp)
mov    %r11,-0x50(%rbp)
mov    %rsi,-0x48(%rbp)
mov    %rcx,%rsi
mov    %r14,%rcx
mov    -0x70(%rbp),%r9
jmpq   2186d <decode_mcu_fast+0x94d>
and    $0xffffffffffffff00,%rdx
mov    %r14d,0x21c(%rdi)
mov    %rbx,%r9
jmpq   21557 <decode_mcu_fast+0x637>
and    $0xffffffffffffff00,%rdx
mov    %r14d,0x21c(%rdi)
mov    %r9,%rbx
jmpq   2157d <decode_mcu_fast+0x65d>
and    $0xffffffffffffff00,%rdx
mov    %r14d,0x21c(%rdi)
mov    %rbx,%r9
jmpq   215a3 <decode_mcu_fast+0x683>
and    $0xffffffffffffff00,%rdx
mov    %r14d,0x21c(%rdi)
mov    %r9,%rbx
jmpq   215c9 <decode_mcu_fast+0x6a9>
and    $0xffffffffffffff00,%rdx
mov    %r14d,0x21c(%rdi)
mov    %rbx,%r9
jmpq   215ef <decode_mcu_fast+0x6cf>
and    $0xffffffffffffff00,%rdx
mov    %r14d,0x21c(%rdi)
mov    %r9,%rbx
jmpq   21618 <decode_mcu_fast+0x6f8>
test   %r11,%r11
je     218ad <decode_mcu_fast+0x98d>
mov    $0xffffffff,%r8d
mov    %rax,%r13
jmpq   219ff <decode_mcu_fast+0xadf>
and    $0xffffffffffffff00,%rdx
mov    %r9d,0x21c(%rdi)
mov    %r14,%rbx
mov    -0x40(%rbp),%r10
jmpq   214e4 <decode_mcu_fast+0x5c4>
add    $0x1,%esi
add    $0xffffffff,%ecx
mov    %rdx,%rbx
shr    %cl,%rbx
and    $0x1,%ebx
lea    (%rbx,%r10,2),%r10d
movslq %esi,%rbx
mov    (%r15,%rbx,8),%r14
movslq %r10d,%r11
cmp    %r11,%r14
jl     2185a <decode_mcu_fast+0x93a>
add    0x90(%r15,%rbx,8),%r10d
movzbl %r10b,%esi
movslq %esi,%rsi
mov    0x120(%r15),%rbx
movzbl 0x11(%rbx,%rsi,1),%r15d
mov    -0x48(%rbp),%rsi
mov    -0x50(%rbp),%r11
mov    -0x68(%rbp),%rbx
mov    -0x40(%rbp),%r10
jmpq   2151f <decode_mcu_fast+0x5ff>
mov    %rax,%r10
jmpq   2109c <decode_mcu_fast+0x17c>
cmp    $0x10,%ecx
jg     219a0 <decode_mcu_fast+0xa80>
lea    0x1(%rbx),%r8
movzbl (%r8),%r15d
movzbl (%rbx),%r14d
shl    $0x8,%rdx
add    %r14,%rdx
cmp    $0xff,%r14b
jne    218e4 <decode_mcu_fast+0x9c4>
test   %r15b,%r15b
jne    21a16 <decode_mcu_fast+0xaf6>
lea    0x2(%rbx),%r8
lea    0x1(%r8),%r14
movzbl (%r14),%ebx
movzbl (%r8),%r15d
shl    $0x8,%rdx
add    %r15,%rdx
cmp    $0xff,%r15b
jne    21909 <decode_mcu_fast+0x9e9>
test   %bl,%bl
jne    21a2c <decode_mcu_fast+0xb0c>
lea    0x2(%r8),%r14
lea    0x1(%r14),%rbx
movzbl (%rbx),%r15d
movzbl (%r14),%r8d
shl    $0x8,%rdx
add    %r8,%rdx
cmp    $0xff,%r8b
jne    2192f <decode_mcu_fast+0xa0f>
test   %r15b,%r15b
jne    21a41 <decode_mcu_fast+0xb21>
lea    0x2(%r14),%rbx
lea    0x1(%rbx),%r8
movzbl (%r8),%r14d
movzbl (%rbx),%r15d
shl    $0x8,%rdx
add    %r15,%rdx
cmp    $0xff,%r15b
jne    21955 <decode_mcu_fast+0xa35>
test   %r14b,%r14b
jne    21a57 <decode_mcu_fast+0xb37>
lea    0x2(%rbx),%r8
lea    0x1(%r8),%r14
movzbl (%r14),%ebx
movzbl (%r8),%r15d
shl    $0x8,%rdx
add    %r15,%rdx
cmp    $0xff,%r15b
jne    2197a <decode_mcu_fast+0xa5a>
test   %bl,%bl
jne    21a6d <decode_mcu_fast+0xb4d>
lea    0x2(%r8),%r14
lea    0x1(%r14),%rbx
movzbl (%rbx),%r8d
movzbl (%r14),%r15d
shl    $0x8,%rdx
add    %r15,%rdx
add    $0x30,%ecx
cmp    $0xff,%r15b
je     21a82 <decode_mcu_fast+0xb62>
mov    $0xffffffff,%r8d
sub    %r12d,%ecx
mov    %rdx,%r15
shr    %cl,%r15
mov    %rcx,%r14
mov    %r12,%rcx
mov    %rax,%r12
shl    %cl,%r12d
add    $0xffffffff,%r12d
and    %r15d,%r12d
mov    %rcx,%r15
lea    0x1f(%r15),%ecx
shl    %cl,%eax
neg    %eax
add    %r12d,%eax
sar    $0x1f,%eax
mov    %r15,%rcx
mov    %r8,%r15
shl    %cl,%r15d
lea    0x1(%r15),%ecx
and    %ecx,%eax
add    %eax,%r12d
shr    $0x4,%r9d
lea    (%r9,%r13,1),%eax
movslq %eax,%rcx
movslq (%r10,%rcx,4),%rcx
mov    %r12w,(%r11,%rcx,2)
mov    %r14,%rcx
lea    0x1(%rax),%r13d
mov    $0x1,%eax
cmp    $0x3f,%r13d
jle    21a9a <decode_mcu_fast+0xb7a>
mov    -0x60(%rbp),%r8
mov    -0x70(%rbp),%r9
jmpq   210aa <decode_mcu_fast+0x18a>
and    $0xffffffffffffff00,%rdx
mov    %r15d,0x21c(%rdi)
mov    %rbx,%r8
jmpq   218e4 <decode_mcu_fast+0x9c4>
and    $0xffffffffffffff00,%rdx
mov    %ebx,0x21c(%rdi)
mov    %r8,%r14
jmpq   21909 <decode_mcu_fast+0x9e9>
and    $0xffffffffffffff00,%rdx
mov    %r15d,0x21c(%rdi)
mov    %r14,%rbx
jmpq   2192f <decode_mcu_fast+0xa0f>
and    $0xffffffffffffff00,%rdx
mov    %r14d,0x21c(%rdi)
mov    %rbx,%r8
jmpq   21955 <decode_mcu_fast+0xa35>
and    $0xffffffffffffff00,%rdx
mov    %ebx,0x21c(%rdi)
mov    %r8,%r14
jmpq   2197a <decode_mcu_fast+0xa5a>
test   %r8b,%r8b
jne    21bec <decode_mcu_fast+0xccc>
lea    0x2(%r14),%rbx
mov    $0xffffffff,%r8d
jmpq   219a0 <decode_mcu_fast+0xa80>
cmp    $0x10,%ecx
jg     21b8a <decode_mcu_fast+0xc6a>
lea    0x1(%rbx),%r9
movzbl (%r9),%r14d
movzbl (%rbx),%r12d
shl    $0x8,%rdx
add    %r12,%rdx
cmp    $0xff,%r12b
jne    21ac9 <decode_mcu_fast+0xba9>
test   %r14b,%r14b
jne    21c08 <decode_mcu_fast+0xce8>
lea    0x2(%rbx),%r9
lea    0x1(%r9),%rbx
movzbl (%rbx),%r14d
movzbl (%r9),%r12d
shl    $0x8,%rdx
add    %r12,%rdx
cmp    $0xff,%r12b
jne    21aef <decode_mcu_fast+0xbcf>
test   %r14b,%r14b
jne    21c1e <decode_mcu_fast+0xcfe>
lea    0x2(%r9),%rbx
lea    0x1(%rbx),%r9
movzbl (%r9),%r14d
movzbl (%rbx),%r12d
shl    $0x8,%rdx
add    %r12,%rdx
cmp    $0xff,%r12b
jne    21b15 <decode_mcu_fast+0xbf5>
test   %r14b,%r14b
jne    21c34 <decode_mcu_fast+0xd14>
lea    0x2(%rbx),%r9
lea    0x1(%r9),%rbx
movzbl (%rbx),%r14d
movzbl (%r9),%r12d
shl    $0x8,%rdx
add    %r12,%rdx
cmp    $0xff,%r12b
jne    21b3b <decode_mcu_fast+0xc1b>
test   %r14b,%r14b
jne    21c4a <decode_mcu_fast+0xd2a>
lea    0x2(%r9),%rbx
lea    0x1(%rbx),%r9
movzbl (%r9),%r14d
movzbl (%rbx),%r12d
shl    $0x8,%rdx
add    %r12,%rdx
cmp    $0xff,%r12b
jne    21b61 <decode_mcu_fast+0xc41>
test   %r14b,%r14b
jne    21c60 <decode_mcu_fast+0xd40>
lea    0x2(%rbx),%r9
lea    0x1(%r9),%rbx
movzbl (%rbx),%r14d
movzbl (%r9),%r12d
shl    $0x8,%rdx
add    %r12,%rdx
add    $0x30,%ecx
cmp    $0xff,%r12b
jne    21b8a <decode_mcu_fast+0xc6a>
test   %r14b,%r14b
jne    21c76 <decode_mcu_fast+0xd56>
lea    0x2(%r9),%rbx
mov    %rcx,%r12
lea    0x38(%r12),%ecx
mov    %rdx,%r9
shr    %cl,%r9
movzbl %r9b,%ecx
movslq %ecx,%rcx
movslq 0x128(%rsi,%rcx,4),%r14
mov    %r14,%r9
sar    $0x8,%r9d
mov    %r12,%rcx
sub    %r9d,%ecx
cmp    $0x8,%r9d
jg     21c8c <decode_mcu_fast+0xd6c>
movzbl %r14b,%r9d
mov    %r9,%r12
and    $0xf,%r12d
test   %r12d,%r12d
jg     218b5 <decode_mcu_fast+0x995>
and    $0xfffffff0,%r9d
cmp    $0xe0,%r9d
jle    21cb5 <decode_mcu_fast+0xd95>
lea    0xf(%r13),%eax
jmpq   219f6 <decode_mcu_fast+0xad6>
and    $0xffffffffffffff00,%rdx
mov    %r8d,0x21c(%rdi)
mov    %r14,%rbx
mov    $0xffffffff,%r8d
jmpq   219a0 <decode_mcu_fast+0xa80>
and    $0xffffffffffffff00,%rdx
mov    %r14d,0x21c(%rdi)
mov    %rbx,%r9
jmpq   21ac9 <decode_mcu_fast+0xba9>
and    $0xffffffffffffff00,%rdx
mov    %r14d,0x21c(%rdi)
mov    %r9,%rbx
jmpq   21aef <decode_mcu_fast+0xbcf>
and    $0xffffffffffffff00,%rdx
mov    %r14d,0x21c(%rdi)
mov    %rbx,%r9
jmpq   21b15 <decode_mcu_fast+0xbf5>
and    $0xffffffffffffff00,%rdx
mov    %r14d,0x21c(%rdi)
mov    %r9,%rbx
jmpq   21b3b <decode_mcu_fast+0xc1b>
and    $0xffffffffffffff00,%rdx
mov    %r14d,0x21c(%rdi)
mov    %rbx,%r9
jmpq   21b61 <decode_mcu_fast+0xc41>
and    $0xffffffffffffff00,%rdx
mov    %r14d,0x21c(%rdi)
mov    %r9,%rbx
jmpq   21b8a <decode_mcu_fast+0xc6a>
mov    %rdx,%r12
shr    %cl,%r12
mov    %rcx,%r15
mov    %r9,%rcx
mov    %rax,%r14
shl    %cl,%r14d
mov    %rcx,%r9
lea    -0x1(%r14),%ecx
and    %ecx,%r12d
mov    %rbx,-0x50(%rbp)
mov    %r13,-0x68(%rbp)
mov    %r15,%rcx
jmp    21cd6 <decode_mcu_fast+0xdb6>
mov    -0x60(%rbp),%r8
mov    -0x70(%rbp),%r9
jmpq   210aa <decode_mcu_fast+0x18a>
add    $0x1,%r9d
add    $0xffffffff,%ecx
mov    %rdx,%rbx
shr    %cl,%rbx
and    $0x1,%ebx
lea    (%rbx,%r12,2),%r12d
movslq %r9d,%r14
mov    (%rsi,%r14,8),%r13
movslq %r12d,%rbx
cmp    %rbx,%r13
jl     21cc2 <decode_mcu_fast+0xda2>
add    0x90(%rsi,%r14,8),%r12d
movzbl %r12b,%ebx
movslq %ebx,%rbx
mov    0x120(%rsi),%r9
movzbl 0x11(%r9,%rbx,1),%r9d
mov    -0x68(%rbp),%r13
mov    -0x50(%rbp),%rbx
jmpq   21bc2 <decode_mcu_fast+0xca2>
xchg   %ax,%ax

0000000000021d10 <decode_mcu>:
push   %rbp
mov    %rsp,%rbp
sub    $0x20,%rsp
mov    0x250(%rdi),%rcx
xor    %edx,%edx
mov    $0x1,%eax
mov    0x170(%rdi),%r8d
test   %r8d,%r8d
jne    21d61 <decode_mcu+0x51>
mov    %rax,%r9
mov    0x28(%rdi),%r8
mov    0x8(%r8),%r10
movslq 0x1e0(%rdi),%r8
shl    $0x9,%r8
cmp    %r8,%r10
jae    21d6f <decode_mcu+0x5f>
movslq 0x10(%rcx),%r8
test   %r8d,%r8d
je     21d80 <decode_mcu+0x70>
mov    0x38(%rcx),%edx
add    $0xffffffff,%edx
mov    %edx,0x38(%rcx)
leaveq 
retq   
mov    0x38(%rcx),%r8d
test   %r8d,%r8d
je     21da0 <decode_mcu+0x90>
mov    %rdx,%r9
jmp    21d35 <decode_mcu+0x25>
movslq 0x21c(%rdi),%r8
test   %r8d,%r8d
jne    21d4d <decode_mcu+0x3d>
mov    %r9,%rdx
jmp    21d4d <decode_mcu+0x3d>
test   %edx,%edx
jg     21dd6 <decode_mcu+0xc6>
mov    %rcx,-0x18(%rbp)
callq  20880 <decode_mcu_slow>
test   %eax,%eax
je     21e19 <decode_mcu+0x109>
mov    $0x1,%eax
mov    -0x18(%rbp),%rcx
jmp    21d56 <decode_mcu+0x46>
mov    %rdi,%rax
mov    %rdi,-0x18(%rbp)
mov    %rcx,-0x10(%rbp)
mov    %rsi,-0x8(%rbp)
mov    %rax,%rdi
callq  207e0 <process_restart>
test   %eax,%eax
je     21e1d <decode_mcu+0x10d>
mov    $0x1,%eax
xor    %edx,%edx
mov    -0x8(%rbp),%rsi
mov    -0x10(%rbp),%rcx
mov    -0x18(%rbp),%rdi
mov    %rdx,%r9
jmpq   21d35 <decode_mcu+0x25>
mov    %rdi,%rax
mov    %rsi,%rdx
mov    %r13,-0x8(%rbp)
mov    %r14,-0x10(%rbp)
mov    %r15,-0x18(%rbp)
mov    %rcx,%r13
mov    %rdi,%r14
mov    %rax,%rdi
mov    %rsi,%r15
mov    %rdx,%rsi
callq  20f20 <decode_mcu_fast>
test   %eax,%eax
je     21e21 <decode_mcu+0x111>
mov    %r13,%rcx
mov    -0x18(%rbp),%r15
mov    -0x10(%rbp),%r14
mov    -0x8(%rbp),%r13
mov    $0x1,%eax
jmpq   21d56 <decode_mcu+0x46>
xor    %eax,%eax
leaveq 
retq   
xor    %eax,%eax
leaveq 
retq   
mov    %r13,%rcx
mov    %r15,%rsi
mov    %r14,%rdi
mov    -0x18(%rbp),%r15
mov    -0x10(%rbp),%r14
mov    -0x8(%rbp),%r13
jmpq   21d84 <decode_mcu+0x74>
nopl   0x0(%rax,%rax,1)

0000000000021e40 <jinit_input_controller>:
push   %rbp
mov    %rsp,%rbp
sub    $0x10,%rsp
mov    %r15,-0x8(%rbp)
mov    0x8(%rdi),%rax
mov    (%rax),%rax
xor    %esi,%esi
mov    $0x30,%edx
mov    %rdi,%r15
callq  *%rax
mov    %rax,0x240(%r15)
lea    0x43(%rip),%rcx        # 21eb0 <consume_markers>
mov    %rcx,(%rax)
lea    0x769(%rip),%rcx        # 225e0 <reset_input_controller>
mov    %rcx,0x8(%rax)
lea    0x6de(%rip),%rcx        # 22560 <start_input_pass>
mov    %rcx,0x10(%rax)
lea    0x733(%rip),%rcx        # 225c0 <finish_input_pass>
mov    %rcx,0x18(%rax)
movl   $0x0,0x20(%rax)
movl   $0x0,0x24(%rax)
movl   $0x1,0x28(%rax)
mov    -0x8(%rbp),%r15
leaveq 
retq   
nopl   0x0(%rax)

0000000000021eb0 <consume_markers>:
push   %rbp
mov    %rsp,%rbp
sub    $0x10,%rsp
mov    $0x2,%eax
mov    0x240(%rdi),%rdx
movslq 0x24(%rdx),%rcx
test   %ecx,%ecx
je     21ece <consume_markers+0x1e>
leaveq 
retq   
mov    0x248(%rdi),%rax
mov    0x8(%rax),%rax
mov    %rdi,%rcx
mov    %r15,-0x10(%rbp)
mov    %rdi,-0x8(%rbp)
mov    %rcx,%rdi
mov    %rdx,%r15
callq  *%rax
cmp    $0x1,%eax
je     21efc <consume_markers+0x4c>
cmp    $0x2,%eax
je     21f17 <consume_markers+0x67>
mov    -0x10(%rbp),%r15
leaveq 
retq   
mov    $0x1,%eax
movslq 0x28(%r15),%rcx
test   %ecx,%ecx
jne    21f45 <consume_markers+0x95>
movslq 0x20(%r15),%rcx
test   %ecx,%ecx
je     21f61 <consume_markers+0xb1>
mov    -0x8(%rbp),%rdi
jmp    21f82 <consume_markers+0xd2>
movl   $0x1,0x24(%r15)
movslq 0x28(%r15),%rax
test   %eax,%eax
jne    21f93 <consume_markers+0xe3>
mov    -0x8(%rbp),%rcx
movslq 0xac(%rcx),%rax
cmp    0xb4(%rcx),%eax
jl     21fb1 <consume_markers+0x101>
mov    $0x2,%eax
mov    -0x10(%rbp),%r15
leaveq 
retq   
mov    -0x8(%rbp),%rdi
callq  21fe0 <initial_setup>
movl   $0x0,0x28(%r15)
mov    $0x1,%eax
mov    -0x10(%rbp),%r15
leaveq 
retq   
mov    -0x8(%rbp),%r15
mov    (%r15),%rax
movl   $0x23,0x28(%rax)
mov    (%r15),%rax
mov    (%rax),%rax
mov    %r15,%rdi
callq  *%rax
mov    %r15,%rdi
mov    $0x1,%eax
mov    %rax,%r15
callq  22560 <start_input_pass>
mov    %r15,%rax
mov    -0x10(%rbp),%r15
leaveq 
retq   
mov    -0x8(%rbp),%rdi
mov    0x248(%rdi),%rax
movslq 0x1c(%rax),%rax
test   %eax,%eax
jne    21fc2 <consume_markers+0x112>
mov    $0x2,%eax
mov    -0x10(%rbp),%r15
leaveq 
retq   
mov    %eax,0xb4(%rcx)
mov    $0x2,%eax
mov    -0x10(%rbp),%r15
leaveq 
retq   
mov    (%rdi),%rax
movl   $0x3b,0x28(%rax)
mov    (%rdi),%rax
mov    (%rax),%rax
callq  *%rax
mov    $0x2,%eax
mov    -0x10(%rbp),%r15
leaveq 
retq   
nop

0000000000021fe0 <initial_setup>:
push   %rbp
mov    %rsp,%rbp
sub    $0x20,%rsp
mov    %r15,-0x18(%rbp)
mov    %r13,-0x8(%rbp)
mov    %r14,-0x10(%rbp)
mov    0x34(%rdi),%eax
cmp    $0xffdc,%eax
ja     2200d <initial_setup+0x2d>
mov    0x30(%rdi),%eax
cmp    $0xffdc,%eax
ja     2200d <initial_setup+0x2d>
mov    %rdi,%r13
jmp    2202c <initial_setup+0x4c>
mov    (%rdi),%rax
movl   $0x29,0x28(%rax)
mov    (%rdi),%rax
movl   $0xffdc,0x2c(%rax)
mov    (%rdi),%rax
mov    (%rax),%rax
mov    %rdi,%r13
callq  *%rax
movslq 0x128(%r13),%rax
cmp    $0x8,%eax
je     2205d <initial_setup+0x7d>
mov    0x0(%r13),%rax
movl   $0xf,0x28(%rax)
movslq 0x128(%r13),%rcx
mov    0x0(%r13),%rax
mov    %ecx,0x2c(%rax)
mov    0x0(%r13),%rax
mov    (%rax),%rax
mov    %r13,%rdi
callq  *%rax
movslq 0x38(%r13),%rax
cmp    $0xa,%eax
jle    22093 <initial_setup+0xb3>
mov    0x0(%r13),%rax
movl   $0x1a,0x28(%rax)
movslq 0x38(%r13),%rcx
mov    0x0(%r13),%rax
mov    %ecx,0x2c(%rax)
mov    0x0(%r13),%rax
movl   $0xa,0x30(%rax)
mov    0x0(%r13),%rax
mov    (%rax),%rax
mov    %r13,%rdi
callq  *%rax
mov    0x130(%r13),%r15
movl   $0x1,0x198(%r13)
movl   $0x1,0x19c(%r13)
xor    %r14d,%r14d
jmp    22120 <initial_setup+0x140>
movslq 0x8(%r15),%rax
test   %eax,%eax
jle    220cf <initial_setup+0xef>
cmp    $0x4,%eax
jg     220cf <initial_setup+0xef>
movslq 0xc(%r15),%rax
test   %eax,%eax
jle    220cf <initial_setup+0xef>
cmp    $0x4,%eax
jle    220e6 <initial_setup+0x106>
mov    0x0(%r13),%rax
movl   $0x12,0x28(%rax)
mov    0x0(%r13),%rax
mov    (%rax),%rax
mov    %r13,%rdi
callq  *%rax
movslq 0x198(%r13),%rcx
movslq 0x8(%r15),%rax
cmp    %ecx,%eax
jge    220f8 <initial_setup+0x118>
mov    %rcx,%rax
mov    %eax,0x198(%r13)
movslq 0x19c(%r13),%rcx
movslq 0xc(%r15),%rax
cmp    %ecx,%eax
jge    22111 <initial_setup+0x131>
mov    %rcx,%rax
mov    %eax,0x19c(%r13)
add    $0x60,%r15
add    $0x1,%r14d
movslq 0x38(%r13),%rax
cmp    %r14d,%eax
jg     220b5 <initial_setup+0xd5>
mov    0x130(%r13),%r15
movl   $0x8,0x1a0(%r13)
xor    %r14d,%r14d
jmpq   22203 <initial_setup+0x223>
movl   $0x8,0x24(%r15)
movslq 0x8(%r15),%rdi
mov    0x30(%r13),%eax
imul   %rax,%rdi
movslq 0x198(%r13),%rax
shl    $0x3,%eax
movslq %eax,%rsi
callq  4150 <jdiv_round_up@plt>
mov    %eax,0x1c(%r15)
movslq 0xc(%r15),%rdi
mov    0x34(%r13),%eax
imul   %rax,%rdi
movslq 0x19c(%r13),%rax
shl    $0x3,%eax
movslq %eax,%rsi
callq  4150 <jdiv_round_up@plt>
mov    %eax,0x20(%r15)
mov    0x220(%r13),%rax
movslq %r14d,%rdx
movl   $0x0,0x1c(%rax,%rdx,4)
mov    0x1c(%r15),%eax
add    $0xffffffff,%eax
mov    0x220(%r13),%rcx
mov    %eax,0x44(%rcx,%rdx,4)
movslq 0x8(%r15),%rdi
mov    0x30(%r13),%eax
imul   %rax,%rdi
movslq 0x198(%r13),%rsi
callq  4150 <jdiv_round_up@plt>
mov    %eax,0x28(%r15)
movslq 0xc(%r15),%rdi
mov    0x34(%r13),%eax
imul   %rax,%rdi
movslq 0x19c(%r13),%rsi
callq  4150 <jdiv_round_up@plt>
mov    %eax,0x2c(%r15)
movl   $0x1,0x30(%r15)
movq   $0x0,0x50(%r15)
add    $0x1,%r14d
add    $0x60,%r15
movslq 0x38(%r13),%rax
cmp    %r14d,%eax
jg     22143 <initial_setup+0x163>
mov    0x34(%r13),%edi
movslq 0x19c(%r13),%rax
shl    $0x3,%eax
movslq %eax,%rsi
callq  4150 <jdiv_round_up@plt>
mov    %eax,0x1a4(%r13)
movslq 0x38(%r13),%rax
cmp    0x1b0(%r13),%eax
jg     22261 <initial_setup+0x281>
movslq 0x138(%r13),%rax
test   %eax,%eax
jne    22261 <initial_setup+0x281>
mov    0x240(%r13),%rax
movl   $0x0,0x20(%rax)
mov    -0x10(%rbp),%r14
mov    -0x8(%rbp),%r13
mov    -0x18(%rbp),%r15
leaveq 
retq   
mov    0x240(%r13),%rax
movl   $0x1,0x20(%rax)
mov    -0x10(%rbp),%r14
mov    -0x8(%rbp),%r13
mov    -0x18(%rbp),%r15
leaveq 
retq   
nopl   (%rax)

0000000000022280 <per_scan_setup>:
push   %rbp
mov    %rsp,%rbp
sub    $0x20,%rsp
movslq 0x1b0(%rdi),%rax
cmp    $0x1,%eax
je     222ab <per_scan_setup+0x2b>
test   %eax,%eax
jle    22312 <per_scan_setup+0x92>
cmp    $0x4,%eax
jg     22312 <per_scan_setup+0x92>
mov    %r15,%rcx
mov    %r14,%r15
mov    %rdi,%r14
jmpq   2234f <per_scan_setup+0xcf>
mov    0x1b8(%rdi),%rcx
mov    0x1c(%rcx),%eax
mov    %eax,0x1d8(%rdi)
mov    0x20(%rcx),%eax
mov    %eax,0x1dc(%rdi)
movl   $0x1,0x34(%rcx)
movl   $0x1,0x38(%rcx)
movl   $0x1,0x3c(%rcx)
movslq 0x24(%rcx),%rax
mov    %eax,0x40(%rcx)
movl   $0x1,0x44(%rcx)
mov    0x20(%rcx),%eax
mov    0xc(%rcx),%esi
xor    %edx,%edx
div    %esi
test   %edx,%edx
jne    222f9 <per_scan_setup+0x79>
movslq 0xc(%rcx),%rdx
mov    %edx,0x48(%rcx)
movl   $0x1,0x1e0(%rdi)
movl   $0x0,0x1e4(%rdi)
leaveq 
retq   
mov    (%rdi),%rax
movl   $0x1a,0x28(%rax)
movslq 0x1b0(%rdi),%rcx
mov    (%rdi),%rax
mov    %ecx,0x2c(%rax)
mov    (%rdi),%rax
movl   $0x4,0x30(%rax)
mov    (%rdi),%rax
mov    (%rax),%rax
mov    %rdi,%rcx
mov    %r15,-0x18(%rbp)
mov    %r14,%r15
mov    %rdi,%r14
mov    %rcx,%rdi
callq  *%rax
mov    -0x18(%rbp),%rcx
mov    0x30(%r14),%edi
movslq 0x198(%r14),%rax
shl    $0x3,%eax
movslq %eax,%rsi
mov    %rcx,-0x18(%rbp)
callq  4150 <jdiv_round_up@plt>
mov    %eax,0x1d8(%r14)
mov    0x34(%r14),%edi
movslq 0x19c(%r14),%rax
shl    $0x3,%eax
movslq %eax,%rsi
callq  4150 <jdiv_round_up@plt>
mov    %eax,0x1dc(%r14)
movl   $0x0,0x1e0(%r14)
xor    %eax,%eax
mov    %r13,-0x8(%rbp)
mov    %r15,-0x10(%rbp)
mov    %rax,%r15
jmp    223cd <per_scan_setup+0x14d>
movslq 0x1e0(%r14),%rcx
lea    0x1(%rcx),%eax
mov    %eax,0x1e0(%r14)
mov    %r15d,0x1e4(%r14,%rcx,4)
add    $0xffffffff,%r13d
test   %r13d,%r13d
jg     223a7 <per_scan_setup+0x127>
add    $0x1,%r15d
movslq 0x1b0(%r14),%rax
cmp    %r15d,%eax
jg     223e7 <per_scan_setup+0x167>
mov    -0x10(%rbp),%r14
mov    -0x8(%rbp),%r13
mov    -0x18(%rbp),%r15
leaveq 
retq   
movslq %r15d,%rax
mov    0x1b8(%r14,%rax,8),%rcx
movslq 0x8(%rcx),%rsi
mov    %esi,0x34(%rcx)
movslq 0xc(%rcx),%rax
mov    %eax,0x38(%rcx)
imul   %esi,%eax
mov    %eax,0x3c(%rcx)
mov    %rsi,%rax
imul   0x24(%rcx),%eax
mov    %eax,0x40(%rcx)
mov    0x1c(%rcx),%eax
xor    %edx,%edx
div    %esi
test   %edx,%edx
jne    2241f <per_scan_setup+0x19f>
movslq 0x34(%rcx),%rdx
mov    %edx,0x44(%rcx)
mov    0x20(%rcx),%eax
mov    0x38(%rcx),%esi
xor    %edx,%edx
div    %esi
test   %edx,%edx
jne    22434 <per_scan_setup+0x1b4>
movslq 0x38(%rcx),%rdx
mov    %edx,0x48(%rcx)
movslq 0x3c(%rcx),%r13
mov    %r13,%rax
add    0x1e0(%r14),%eax
cmp    $0xa,%eax
jle    223c4 <per_scan_setup+0x144>
mov    (%r14),%rax
movl   $0xd,0x28(%rax)
mov    (%r14),%rax
mov    (%rax),%rax
mov    %r14,%rdi
callq  *%rax
jmpq   223c4 <per_scan_setup+0x144>
nopl   0x0(%rax,%rax,1)

0000000000022470 <latch_quant_tables>:
push   %rbp
mov    %rsp,%rbp
sub    $0x30,%rsp
mov    %rbx,-0x8(%rbp)
mov    %r12,-0x10(%rbp)
mov    %r13,-0x18(%rbp)
mov    %r14,-0x20(%rbp)
mov    %r15,-0x28(%rbp)
mov    %rdi,%r13
mov    $0x1,%r12d
mov    $0x84,%r14d
xor    %ebx,%ebx
jmpq   22532 <latch_quant_tables+0xc2>
movslq %ebx,%rax
mov    0x1b8(%r13,%rax,8),%r15
mov    0x50(%r15),%rax
test   %rax,%rax
jne    2252f <latch_quant_tables+0xbf>
movslq 0x10(%r15),%rax
test   %eax,%eax
js     224d0 <latch_quant_tables+0x60>
cmp    $0x3,%eax
jg     224d0 <latch_quant_tables+0x60>
mov    0xc8(%r13,%rax,8),%rcx
test   %rcx,%rcx
jne    224fa <latch_quant_tables+0x8a>
mov    0x0(%r13),%rcx
movl   $0x34,0x28(%rcx)
mov    0x0(%r13),%rcx
mov    %eax,0x2c(%rcx)
mov    0x0(%r13),%rcx
mov    (%rcx),%rcx
mov    %rax,%r14
mov    %r13,%rdi
callq  *%rcx
mov    %r14,%rax
mov    $0x84,%r14d
mov    0x8(%r13),%rcx
mov    (%rcx),%rcx
mov    %r12,%rsi
mov    %rax,%r12
mov    %r13,%rdi
mov    %r14,%rdx
callq  *%rcx
mov    0xc8(%r13,%r12,8),%rsi
mov    %rax,%r12
mov    %r12,%rdi
mov    %r14,%rdx
callq  42c0 <memcpy@plt>
mov    %r12,0x50(%r15)
mov    $0x1,%r12d
add    $0x1,%ebx
movslq 0x1b0(%r13),%rax
cmp    %ebx,%eax
jg     224a2 <latch_quant_tables+0x32>
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
leaveq 
retq   
nopw   0x0(%rax,%rax,1)

0000000000022560 <start_input_pass>:
push   %rbp
mov    %rsp,%rbp
sub    $0x10,%rsp
mov    %r15,-0x8(%rbp)
mov    %rdi,%r15
callq  22280 <per_scan_setup>
mov    %r15,%rdi
callq  22470 <latch_quant_tables>
mov    0x250(%r15),%rax
mov    (%rax),%rax
mov    %r15,%rdi
callq  *%rax
mov    0x230(%r15),%rax
mov    (%rax),%rax
mov    %r15,%rdi
callq  *%rax
mov    0x230(%r15),%rax
mov    0x8(%rax),%rcx
mov    0x240(%r15),%rax
mov    %rcx,(%rax)
mov    -0x8(%rbp),%r15
leaveq 
retq   
data16 nopw %cs:0x0(%rax,%rax,1)

00000000000225c0 <finish_input_pass>:
push   %rbp
mov    %rsp,%rbp
lea    -0x71b(%rip),%rax        # 21eb0 <consume_markers>
mov    0x240(%rdi),%rcx
mov    %rax,(%rcx)
leaveq 
retq   
nopw   0x0(%rax,%rax,1)

00000000000225e0 <reset_input_controller>:
push   %rbp
mov    %rsp,%rbp
sub    $0x10,%rsp
mov    %r15,-0x8(%rbp)
lea    -0x743(%rip),%rcx        # 21eb0 <consume_markers>
mov    0x240(%rdi),%rax
mov    %rcx,(%rax)
movl   $0x0,0x20(%rax)
movl   $0x0,0x24(%rax)
movl   $0x1,0x28(%rax)
mov    (%rdi),%rax
mov    0x20(%rax),%rax
mov    %rdi,%r15
callq  *%rax
mov    0x248(%r15),%rax
mov    (%rax),%rax
mov    %r15,%rdi
callq  *%rax
movq   $0x0,0xc0(%r15)
mov    -0x8(%rbp),%r15
leaveq 
retq   
xchg   %ax,%ax

0000000000022640 <jinit_d_main_controller>:
push   %rbp
mov    %rsp,%rbp
sub    $0x30,%rsp
mov    %r13,-0x18(%rbp)
mov    %r14,-0x20(%rbp)
mov    %r15,-0x28(%rbp)
mov    %rbx,-0x8(%rbp)
mov    %r12,-0x10(%rbp)
mov    $0x1,%r13d
mov    0x8(%rdi),%rax
mov    (%rax),%rax
mov    %rsi,%r12
mov    $0x88,%edx
mov    %rdi,%rbx
mov    %r13,%rsi
callq  *%rax
mov    %rax,0x228(%rbx)
lea    0x8a9(%rip),%rcx        # 22f30 <start_pass_main>
mov    %rcx,(%rax)
test   %r12d,%r12d
jne    22697 <jinit_d_main_controller+0x57>
mov    %r13,%rsi
mov    %rax,%r12
jmp    226b2 <jinit_d_main_controller+0x72>
mov    (%rbx),%rcx
movl   $0x4,0x28(%rcx)
mov    (%rbx),%rcx
mov    (%rcx),%rcx
mov    %rax,%r12
mov    %rbx,%rdi
callq  *%rcx
mov    %r13,%rsi
mov    0x260(%rbx),%rax
movslq 0x10(%rax),%rax
test   %eax,%eax
jne    226ca <jinit_d_main_controller+0x8a>
movslq 0x1a0(%rbx),%r13
jmp    2270a <jinit_d_main_controller+0xca>
movslq 0x1a0(%rbx),%rax
cmp    $0x1,%eax
jg     226f1 <jinit_d_main_controller+0xb1>
mov    (%rbx),%rax
movl   $0x2f,0x28(%rax)
mov    (%rbx),%rax
mov    (%rax),%rax
mov    %rsi,%r13
mov    %rbx,%rdi
callq  *%rax
mov    %r13,%rsi
mov    %rsi,%r14
mov    %rbx,%rdi
callq  22c20 <alloc_funny_pointers>
movslq 0x1a0(%rbx),%r13
add    $0x2,%r13d
mov    %r14,%rsi
mov    0x130(%rbx),%r15
xor    %r14d,%r14d
jmp    2275a <jinit_d_main_controller+0x11a>
movslq 0x24(%r15),%rax
imul   0xc(%r15),%eax
cltd   
movslq 0x1a0(%rbx),%rcx
idiv   %ecx
mov    %r13,%rcx
imul   %eax,%ecx
mov    0x24(%r15),%edx
imul   0x1c(%r15),%edx
mov    0x8(%rbx),%rax
mov    0x10(%rax),%rax
mov    %rbx,%rdi
callq  *%rax
movslq %r14d,%rcx
mov    %rax,0x10(%r12,%rcx,8)
add    $0x1,%r14d
add    $0x60,%r15
mov    $0x1,%esi
movslq 0x38(%rbx),%rax
cmp    %r14d,%eax
jg     22716 <jinit_d_main_controller+0xd6>
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
leaveq 
retq   
nopl   0x0(%rax)

0000000000022780 <set_wraparound_pointers>:
push   %rbp
mov    %rsp,%rbp
sub    $0x30,%rsp
mov    %rbx,-0x8(%rbp)
mov    %r12,-0x10(%rbp)
mov    %r13,-0x18(%rbp)
mov    %r14,-0x20(%rbp)
mov    %r15,-0x28(%rbp)
mov    0x228(%rdi),%rsi
mov    0x130(%rdi),%r8
movslq 0x1a0(%rdi),%rax
lea    0x1(%rax),%r9d
lea    0x2(%rax),%ebx
mov    %rbx,-0x30(%rbp)
xor    %ecx,%ecx
mov    %rcx,%r10
jmp    22815 <set_wraparound_pointers+0x95>
lea    (%rcx,%r15,1),%edx
movslq %edx,%r14
mov    0x0(%r13,%r14,8),%rbx
mov    %rcx,%rdx
sub    %eax,%edx
movslq %edx,%rdx
mov    %rbx,0x0(%r13,%rdx,8)
mov    (%r11,%r14,8),%rbx
mov    %rbx,(%r11,%rdx,8)
movslq %ecx,%r14
mov    0x0(%r13,%r14,8),%rdx
lea    (%rcx,%r12,1),%ebx
movslq %ebx,%rbx
mov    %rdx,0x0(%r13,%rbx,8)
mov    (%r11,%r14,8),%rdx
mov    %rdx,(%r11,%rbx,8)
add    $0x1,%ecx
cmp    %eax,%ecx
jl     227c3 <set_wraparound_pointers+0x43>
add    $0x1,%r10d
add    $0x60,%r8
xor    %ecx,%ecx
mov    -0x30(%rbp),%rbx
movslq 0x38(%rdi),%rax
cmp    %r10d,%eax
jg     22834 <set_wraparound_pointers+0xb4>
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
leaveq 
retq   
movslq %r10d,%r11
movslq 0x24(%r8),%rax
imul   0xc(%r8),%eax
cltd   
movslq 0x1a0(%rdi),%r12
mov    0x68(%rsi),%r13
mov    0x0(%r13,%r11,8),%r13
mov    0x70(%rsi),%r14
mov    (%r14,%r11,8),%r11
idiv   %r12d
mov    %rax,%r15
imul   %r9d,%r15d
mov    %rax,%r12
imul   %ebx,%r12d
jmp    22803 <set_wraparound_pointers+0x83>
nopl   0x0(%rax)

0000000000022870 <process_data_simple_main>:
push   %rbp
mov    %rsp,%rbp
sub    $0x30,%rsp
mov    %r15,-0x8(%rbp)
mov    0x228(%rdi),%r15
movslq 0x60(%r15),%rax
test   %eax,%eax
je     228d1 <process_data_simple_main+0x61>
mov    %rsi,%r8
mov    %rdx,%r9
mov    0x238(%rdi),%rax
mov    0x8(%rax),%rax
lea    0x10(%r15),%rsi
lea    0x64(%r15),%rdx
mov    %rdx,-0x20(%rbp)
mov    0x1a0(%rdi),%r10d
mov    %ecx,(%rsp)
mov    %r10,%rcx
mov    %r14,-0x28(%rbp)
mov    %r10,%r14
callq  *%rax
mov    0x64(%r15),%eax
cmp    %r14d,%eax
jae    22905 <process_data_simple_main+0x95>
mov    -0x28(%rbp),%r14
mov    -0x8(%rbp),%r15
leaveq 
retq   
mov    0x230(%rdi),%rax
mov    0x18(%rax),%rax
lea    0x10(%r15),%r8
mov    %rdi,%r9
mov    %rdi,-0x28(%rbp)
mov    %rcx,-0x20(%rbp)
mov    %rsi,-0x10(%rbp)
mov    %rdx,-0x18(%rbp)
mov    %r8,%rsi
mov    %r9,%rdi
callq  *%rax
test   %eax,%eax
jne    22921 <process_data_simple_main+0xb1>
mov    -0x8(%rbp),%r15
leaveq 
retq   
movl   $0x0,0x60(%r15)
mov    -0x20(%rbp),%rax
movl   $0x0,(%rax)
mov    -0x28(%rbp),%r14
mov    -0x8(%rbp),%r15
leaveq 
retq   
movl   $0x1,0x60(%r15)
mov    -0x18(%rbp),%r9
mov    -0x10(%rbp),%r8
mov    -0x20(%rbp),%rcx
mov    -0x28(%rbp),%rdi
jmpq   22891 <process_data_simple_main+0x21>
xchg   %ax,%ax

0000000000022940 <process_data_context_main>:
push   %rbp
mov    %rsp,%rbp
sub    $0x50,%rsp
mov    %r15,-0x48(%rbp)
mov    0x228(%rdi),%r9
movslq 0x60(%r9),%rax
test   %eax,%eax
je     22989 <process_data_context_main+0x49>
mov    %r15,%rax
mov    %r14,%r15
mov    %r9,%r14
movslq 0x7c(%r14),%r8
test   %r8d,%r8d
jle    229cf <process_data_context_main+0x8f>
cmp    $0x1,%r8d
je     22a72 <process_data_context_main+0x132>
cmp    $0x2,%r8d
je     22ad9 <process_data_context_main+0x199>
mov    %r15,%r14
mov    %rax,%r15
leaveq 
retq   
movslq 0x78(%r9),%rax
mov    0x68(%r9,%rax,8),%r10
mov    0x230(%rdi),%rax
mov    0x18(%rax),%rax
mov    %rdi,%r8
mov    %rdi,-0x40(%rbp)
mov    %rcx,-0x38(%rbp)
mov    %rsi,-0x28(%rbp)
mov    %rdx,-0x30(%rbp)
mov    %r10,%rsi
mov    %r8,%rdi
mov    %r14,%r15
mov    %r9,%r14
callq  *%rax
test   %eax,%eax
jne    22b43 <process_data_context_main+0x203>
mov    %r15,%r14
mov    -0x48(%rbp),%r15
leaveq 
retq   
test   %r8d,%r8d
je     22a00 <process_data_context_main+0xc0>
mov    %r15,%r14
mov    %rax,%r15
leaveq 
retq   
movl   $0x0,0x7c(%r14)
mov    -0x40(%rbp),%rdx
mov    -0x38(%rbp),%rcx
cmp    (%rdx),%ecx
jbe    22b75 <process_data_context_main+0x235>
mov    -0x20(%rbp),%r15
mov    -0x28(%rbp),%rsi
mov    -0x30(%rbp),%rdi
movl   $0x0,0x64(%r14)
mov    0x1a0(%rdi),%eax
add    $0xffffffff,%eax
mov    %eax,0x80(%r14)
mov    0x1a4(%rdi),%eax
cmp    0x84(%r14),%eax
jne    22a6a <process_data_context_main+0x12a>
mov    %rdi,%rax
mov    %r15,-0x20(%rbp)
mov    %rbx,-0x8(%rbp)
mov    %r12,-0x10(%rbp)
mov    %r13,-0x18(%rbp)
mov    %rdx,%rbx
mov    %rsi,%r12
mov    %rcx,%r13
mov    %rdi,%r15
mov    %rax,%rdi
callq  22e60 <set_bottom_pointers>
mov    %r13,%rcx
mov    %rbx,%rdx
mov    %r12,%rsi
mov    %r15,%rdi
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
mov    -0x20(%rbp),%r15
movl   $0x1,0x7c(%r14)
movslq 0x78(%r14),%rax
mov    0x68(%r14,%rax,8),%r8
mov    0x238(%rdi),%rax
mov    0x8(%rax),%rax
lea    0x64(%r14),%r10
mov    0x80(%r14),%r9d
mov    %ecx,(%rsp)
mov    %rdi,%r11
mov    %rdi,-0x8(%rbp)
mov    %r10,%rcx
mov    %r15,-0x18(%rbp)
mov    %r11,%rdi
mov    %r10,%r15
mov    %r9,%r11
mov    %rdx,%r9
mov    %rcx,%rdx
mov    %r11,%rcx
mov    %r8,%r11
mov    %rsi,%r8
mov    %r11,%rsi
callq  *%rax
mov    0x80(%r14),%eax
cmp    (%r15),%eax
jbe    22b7f <process_data_context_main+0x23f>
mov    -0x18(%rbp),%r14
mov    -0x48(%rbp),%r15
leaveq 
retq   
movslq 0x78(%r14),%rax
mov    0x68(%r14,%rax,8),%r8
mov    0x238(%rdi),%rax
mov    0x8(%rax),%rax
lea    0x64(%r14),%r9
mov    0x80(%r14),%r10d
mov    %ecx,(%rsp)
mov    %rdi,-0x30(%rbp)
mov    %rcx,-0x38(%rbp)
mov    %r9,%rcx
mov    %rsi,-0x28(%rbp)
mov    %rdx,-0x40(%rbp)
mov    %r15,-0x20(%rbp)
mov    %r9,%r15
mov    %rdx,%r9
mov    %rcx,%rdx
mov    %r10,%rcx
mov    %r8,%r10
mov    %rsi,%r8
mov    %r10,%rsi
callq  *%rax
mov    0x80(%r14),%eax
cmp    (%r15),%eax
jbe    229dc <process_data_context_main+0x9c>
mov    -0x20(%rbp),%r14
mov    -0x48(%rbp),%r15
leaveq 
retq   
movl   $0x1,0x60(%r14)
mov    0x84(%r14),%eax
add    $0x1,%eax
mov    %eax,0x84(%r14)
mov    -0x30(%rbp),%rdx
mov    -0x28(%rbp),%rsi
mov    -0x38(%rbp),%rcx
mov    -0x40(%rbp),%rdi
mov    -0x48(%rbp),%rax
jmpq   22964 <process_data_context_main+0x24>
mov    -0x20(%rbp),%r14
mov    -0x48(%rbp),%r15
leaveq 
retq   
mov    0x84(%r14),%eax
cmp    $0x1,%eax
je     22b91 <process_data_context_main+0x251>
mov    -0x8(%rbp),%rax
jmp    22bab <process_data_context_main+0x26b>
mov    -0x8(%rbp),%rax
mov    %rax,%rdi
mov    %r13,-0x10(%rbp)
mov    %rax,%r13
callq  22780 <set_wraparound_pointers>
mov    %r13,%rax
mov    -0x10(%rbp),%r13
movslq 0x78(%r14),%rcx
xor    $0x1,%ecx
mov    %ecx,0x78(%r14)
movl   $0x0,0x60(%r14)
mov    0x1a0(%rax),%ecx
add    $0x1,%ecx
mov    %ecx,(%r15)
mov    0x1a0(%rax),%eax
add    $0x2,%eax
mov    %eax,0x80(%r14)
movl   $0x2,0x7c(%r14)
mov    -0x18(%rbp),%r14
mov    -0x48(%rbp),%r15
leaveq 
retq   
nopl   0x0(%rax)

0000000000022bf0 <process_data_crank_post>:
push   %rbp
mov    %rsp,%rbp
sub    $0x10,%rsp
mov    0x238(%rdi),%rax
mov    0x8(%rax),%rax
mov    %ecx,(%rsp)
mov    %rsi,%r8
mov    %rdx,%r9
xor    %esi,%esi
mov    %rsi,%rdx
mov    %rsi,%rcx
callq  *%rax
leaveq 
retq   
nopl   0x0(%rax,%rax,1)

0000000000022c20 <alloc_funny_pointers>:
push   %rbp
mov    %rsp,%rbp
sub    $0x40,%rsp
mov    %r12,-0x10(%rbp)
mov    %r13,-0x18(%rbp)
mov    %r14,-0x20(%rbp)
mov    %r15,-0x28(%rbp)
mov    %rdi,-0x38(%rbp)
mov    %rbx,-0x8(%rbp)
mov    0x8(%rdi),%rax
mov    (%rax),%rax
mov    $0x1,%r14d
movslq 0x38(%rdi),%rcx
add    %ecx,%ecx
movslq %ecx,%rdx
shl    $0x3,%rdx
mov    0x228(%rdi),%r12
movslq 0x1a0(%rdi),%rbx
mov    %rdi,%r15
mov    %r14,%rsi
callq  *%rax
mov    %rax,0x68(%r12)
movslq 0x38(%r15),%rcx
lea    (%rax,%rcx,8),%rax
mov    %rax,0x70(%r12)
mov    0x130(%r15),%rax
add    $0x4,%ebx
mov    %rbx,-0x30(%rbp)
mov    %r14,%rsi
mov    %rax,%r14
mov    %r15,%rdi
xor    %r13d,%r13d
jmp    22d02 <alloc_funny_pointers+0xe2>
movslq 0x24(%r14),%rax
imul   0xc(%r14),%eax
cltd   
movslq 0x1a0(%rdi),%rcx
idiv   %ecx
imul   %eax,%ebx
lea    (%rbx,%rbx,1),%ecx
movslq %ecx,%rdx
shl    $0x3,%rdx
mov    0x8(%rdi),%rcx
mov    (%rcx),%rcx
mov    %rax,%r15
callq  *%rcx
movslq %r15d,%rcx
lea    (%rax,%rcx,8),%rdx
mov    0x68(%r12),%rax
movslq %r13d,%rcx
mov    %rdx,(%rax,%rcx,8)
movslq %ebx,%rax
lea    (%rdx,%rax,8),%rdx
mov    0x70(%r12),%rax
mov    %rdx,(%rax,%rcx,8)
add    $0x1,%r13d
add    $0x60,%r14
mov    $0x1,%esi
mov    -0x30(%rbp),%rbx
mov    -0x38(%rbp),%rdi
movslq 0x38(%rdi),%rax
cmp    %r13d,%eax
jg     22c9e <alloc_funny_pointers+0x7e>
mov    -0x8(%rbp),%rbx
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
leaveq 
retq   
data16 nopw %cs:0x0(%rax,%rax,1)
nopl   0x0(%rax)

0000000000022d30 <make_funny_pointers>:
push   %rbp
mov    %rsp,%rbp
sub    $0x50,%rsp
mov    %rbx,-0x8(%rbp)
mov    %r12,-0x10(%rbp)
mov    %r13,-0x18(%rbp)
mov    %r14,-0x20(%rbp)
mov    %r15,-0x28(%rbp)
mov    0x228(%rdi),%r9
mov    0x130(%rdi),%r10
movslq 0x1a0(%rdi),%rsi
mov    %rsi,-0x48(%rbp)
lea    -0x2(%rsi),%ebx
mov    %rbx,-0x40(%rbp)
xor    %ecx,%ecx
lea    0x2(%rsi),%r8d
mov    %r8,-0x38(%rbp)
mov    %rcx,%r11
jmp    22da7 <make_funny_pointers+0x77>
mov    %rax,%rcx
sub    %edx,%ecx
movslq %ecx,%rcx
mov    (%r15),%rsi
mov    %rsi,(%r15,%rcx,8)
add    $0x1,%eax
cmp    %edx,%eax
jl     22d7b <make_funny_pointers+0x4b>
add    $0x1,%r11d
add    $0x60,%r10
mov    -0x48(%rbp),%rsi
mov    -0x40(%rbp),%rbx
xor    %ecx,%ecx
mov    -0x38(%rbp),%r8
movslq 0x38(%rdi),%rax
cmp    %r11d,%eax
jg     22dc6 <make_funny_pointers+0x96>
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
leaveq 
retq   
movslq %r11d,%r12
movslq 0x24(%r10),%rax
imul   0xc(%r10),%eax
cltd   
movslq 0x1a0(%rdi),%r13
mov    0x68(%r9),%r14
mov    (%r14,%r12,8),%r15
mov    0x70(%r9),%r14
mov    (%r14,%r12,8),%r14
mov    0x10(%r9,%r12,8),%r12
idiv   %r13d
mov    %rax,-0x30(%rbp)
mov    %rax,%rdx
imul   %r8d,%edx
jmp    22e11 <make_funny_pointers+0xe1>
movslq %ecx,%r13
mov    (%r12,%r13,8),%r8
mov    %r8,(%r14,%r13,8)
mov    %r8,(%r15,%r13,8)
add    $0x1,%ecx
cmp    %ecx,%edx
jg     22dff <make_funny_pointers+0xcf>
mov    %rax,%r13
imul   %ebx,%r13d
imul   %eax,%esi
lea    (%rax,%rax,1),%ecx
xor    %eax,%eax
jmp    22e46 <make_funny_pointers+0x116>
lea    (%rax,%r13,1),%edx
movslq %edx,%rbx
lea    (%rax,%rsi,1),%edx
movslq %edx,%r8
mov    (%r12,%r8,8),%rdx
mov    %rdx,(%r14,%rbx,8)
mov    (%r12,%rbx,8),%rdx
mov    %rdx,(%r14,%r8,8)
add    $0x1,%eax
cmp    %ecx,%eax
jl     22e26 <make_funny_pointers+0xf6>
mov    -0x30(%rbp),%rdx
xor    %eax,%eax
jmpq   22d8d <make_funny_pointers+0x5d>
data16 nopw %cs:0x0(%rax,%rax,1)

0000000000022e60 <set_bottom_pointers>:
push   %rbp
mov    %rsp,%rbp
sub    $0x20,%rsp
mov    %r13,-0x8(%rbp)
mov    %r14,-0x10(%rbp)
mov    %r15,-0x18(%rbp)
mov    0x228(%rdi),%rsi
mov    0x130(%rdi),%r8
xor    %ecx,%ecx
mov    %rcx,%r9
jmp    22ea8 <set_bottom_pointers+0x48>
mov    (%r14,%rdx,8),%r13
lea    (%r10,%rax,1),%r11d
movslq %r11d,%r11
mov    %r13,(%r14,%r11,8)
add    $0x1,%eax
cmp    %r15d,%eax
jl     22e89 <set_bottom_pointers+0x29>
add    $0x1,%r9d
add    $0x60,%r8
movslq 0x38(%rdi),%rax
cmp    %r9d,%eax
jg     22ebf <set_bottom_pointers+0x5f>
mov    -0x18(%rbp),%r15
mov    -0x10(%rbp),%r14
mov    -0x8(%rbp),%r13
leaveq 
retq   
movslq 0x1a0(%rdi),%r13
movslq 0x24(%r8),%r11
imul   0xc(%r8),%r11d
mov    0x2c(%r8),%eax
xor    %edx,%edx
div    %r11d
test   %edx,%edx
je     22ee1 <set_bottom_pointers+0x81>
mov    %rdx,%r10
jmp    22ee4 <set_bottom_pointers+0x84>
mov    %r11,%r10
mov    %r11,%rax
cltd   
idiv   %r13d
lea    -0x1(%r10),%r11d
test   %r9d,%r9d
je     22ef9 <set_bottom_pointers+0x99>
mov    %rax,%r13
jmp    22f0f <set_bottom_pointers+0xaf>
mov    %rax,%r13
mov    %r11,%rax
cltd   
mov    %rax,%r11
idiv   %r13d
add    $0x1,%eax
mov    %eax,0x80(%rsi)
movslq 0x78(%rsi),%rax
mov    0x68(%rsi,%rax,8),%rdx
movslq %r9d,%rax
mov    (%rdx,%rax,8),%r14
movslq %r11d,%rdx
lea    0x0(%r13,%r13,1),%r15d
mov    %rcx,%rax
jmpq   22e9b <set_bottom_pointers+0x3b>
nop

0000000000022f30 <start_pass_main>:
push   %rbp
mov    %rsp,%rbp
sub    $0x10,%rsp
mov    0x228(%rdi),%rax
test   %esi,%esi
je     22f5c <start_pass_main+0x2c>
cmp    $0x2,%esi
je     22f78 <start_pass_main+0x48>
mov    (%rdi),%rax
movl   $0x4,0x28(%rax)
mov    (%rdi),%rax
mov    (%rax),%rax
callq  *%rax
leaveq 
retq   
mov    0x260(%rdi),%rcx
movslq 0x10(%rcx),%rcx
test   %ecx,%ecx
jne    22f85 <start_pass_main+0x55>
lea    -0x702(%rip),%rcx        # 22870 <process_data_simple_main>
mov    %rcx,0x8(%rax)
jmp    22fbb <start_pass_main+0x8b>
lea    -0x38f(%rip),%rcx        # 22bf0 <process_data_crank_post>
mov    %rcx,0x8(%rax)
leaveq 
retq   
lea    -0x64c(%rip),%rcx        # 22940 <process_data_context_main>
mov    %rcx,0x8(%rax)
mov    %r15,-0x8(%rbp)
mov    %rax,%r15
callq  22d30 <make_funny_pointers>
mov    %r15,%rax
movl   $0x0,0x78(%rax)
movl   $0x0,0x7c(%rax)
movl   $0x0,0x84(%rax)
mov    -0x8(%rbp),%r15
movl   $0x0,0x60(%rax)
movl   $0x0,0x64(%rax)
leaveq 
retq   
nopl   0x0(%rax,%rax,1)

0000000000022fd0 <jpeg_save_markers>:
push   %rbp
mov    %rsp,%rbp
mov    0x248(%rdi),%r8
mov    0x8(%rdi),%rax
mov    0x60(%rax),%rax
add    $0xffffffffffffffe0,%rax
mov    %edx,%ecx
cmp    %rax,%rcx
jle    22ff1 <jpeg_save_markers+0x21>
mov    %rax,%rdx
test   %edx,%edx
jne    23030 <jpeg_save_markers+0x60>
lea    0x20f4(%rip),%rax        # 250f0 <get_interesting_appn>
xor    %edx,%edx
cmp    $0xe0,%esi
jne    23053 <jpeg_save_markers+0x83>
cmp    $0xfe,%esi
je     23064 <jpeg_save_markers+0x94>
cmp    $0xdf,%esi
jg     23071 <jpeg_save_markers+0xa1>
mov    (%rdi),%rax
movl   $0x44,0x28(%rax)
mov    (%rdi),%rax
mov    %esi,0x2c(%rax)
mov    (%rdi),%rax
mov    (%rax),%rax
callq  *%rax
leaveq 
retq   
lea    0x2339(%rip),%rax        # 25370 <save_marker>
cmp    $0xe0,%esi
je     23091 <jpeg_save_markers+0xc1>
cmp    $0xee,%esi
jne    23006 <jpeg_save_markers+0x36>
cmp    $0xb,%edx
ja     23006 <jpeg_save_markers+0x36>
mov    $0xc,%edx
jmp    23006 <jpeg_save_markers+0x36>
cmp    $0xee,%esi
je     23006 <jpeg_save_markers+0x36>
lea    0x273e(%rip),%rax        # 257a0 <skip_variable>
jmp    23006 <jpeg_save_markers+0x36>
mov    %rax,0x28(%r8)
mov    %edx,0xb0(%r8)
leaveq 
retq   
cmp    $0xef,%esi
jg     23016 <jpeg_save_markers+0x46>
lea    -0xe0(%rsi),%ecx
movslq %ecx,%rcx
mov    %rax,0x30(%r8,%rcx,8)
mov    %edx,0xb4(%r8,%rcx,4)
leaveq 
retq   
cmp    $0xd,%edx
ja     2303f <jpeg_save_markers+0x6f>
mov    $0xe,%edx
jmpq   23006 <jpeg_save_markers+0x36>

00000000000230a0 <jpeg_set_marker_processor>:
push   %rbp
mov    %rsp,%rbp
mov    0x248(%rdi),%rcx
cmp    $0xfe,%esi
je     230d5 <jpeg_set_marker_processor+0x35>
cmp    $0xdf,%esi
jg     230db <jpeg_set_marker_processor+0x3b>
mov    (%rdi),%rax
movl   $0x44,0x28(%rax)
mov    (%rdi),%rax
mov    %esi,0x2c(%rax)
mov    (%rdi),%rax
mov    (%rax),%rax
callq  *%rax
leaveq 
retq   
mov    %rdx,0x28(%rcx)
leaveq 
retq   
cmp    $0xef,%esi
jg     230bb <jpeg_set_marker_processor+0x1b>
lea    -0xe0(%rsi),%eax
movslq %eax,%rax
mov    %rdx,0x30(%rcx,%rax,8)
leaveq 
retq   
data16 nopw %cs:0x0(%rax,%rax,1)
xchg   %ax,%ax

0000000000023100 <jpeg_resync_to_restart>:
push   %rbp
mov    %rsp,%rbp
sub    $0x40,%rsp
mov    %r13,-0x18(%rbp)
mov    %r14,-0x20(%rbp)
mov    %r15,-0x28(%rbp)
mov    %rbx,-0x8(%rbp)
mov    %r12,-0x10(%rbp)
mov    (%rdi),%rax
movslq 0x21c(%rdi),%r15
movl   $0x79,0x28(%rax)
mov    (%rdi),%rax
mov    %r15d,0x2c(%rax)
mov    (%rdi),%rax
mov    %esi,0x30(%rax)
mov    (%rdi),%rax
mov    0x8(%rax),%rax
mov    %rsi,%r14
mov    $0xffffffffffffffff,%rsi
mov    %rdi,%r12
callq  *%rax
mov    $0x4,%esi
mov    $0x1,%eax
mov    $0x2,%ebx
mov    $0x3,%ecx
lea    0x1(%r14),%edx
and    $0x7,%edx
lea    0xd0(%rdx),%r13d
lea    0x2(%r14),%edx
and    $0x7,%edx
lea    0xd0(%rdx),%r8d
lea    -0x1(%r14),%edx
and    $0x7,%edx
lea    0xd0(%rdx),%edi
mov    %rdi,-0x38(%rbp)
lea    -0x2(%r14),%edx
and    $0x7,%edx
add    $0xd0,%edx
mov    %rdx,-0x30(%rbp)
mov    %r8,%r14
jmp    231c3 <jpeg_resync_to_restart+0xc3>
mov    $0x1,%eax
mov    $0x4,%esi
mov    $0x3,%ecx
mov    $0x2,%ebx
mov    -0x30(%rbp),%rdx
mov    -0x38(%rbp),%rdi
cmp    $0xbf,%r15d
jg     23224 <jpeg_resync_to_restart+0x124>
mov    (%r12),%rax
movl   $0x61,0x28(%rax)
mov    (%r12),%rax
mov    %r15d,0x2c(%rax)
mov    (%r12),%rax
mov    %ebx,0x30(%rax)
mov    (%r12),%rax
mov    0x8(%rax),%rax
mov    %r12,%rdi
callq  *%rax
cmp    $0x1,%ebx
jle    23236 <jpeg_resync_to_restart+0x136>
cmp    $0x2,%ebx
je     23266 <jpeg_resync_to_restart+0x166>
cmp    $0x3,%ebx
je     2329b <jpeg_resync_to_restart+0x19b>
mov    $0x1,%eax
mov    $0x4,%esi
mov    $0x3,%ecx
mov    $0x2,%ebx
mov    -0x30(%rbp),%rdx
mov    -0x38(%rbp),%rdi
jmp    231c3 <jpeg_resync_to_restart+0xc3>
cmp    $0xcf,%r15d
jg     232b6 <jpeg_resync_to_restart+0x1b6>
mov    %rcx,%rbx
jmp    231cc <jpeg_resync_to_restart+0xcc>
cmp    $0x1,%ebx
jne    231a7 <jpeg_resync_to_restart+0xa7>
movl   $0x0,0x21c(%r12)
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
mov    $0x1,%eax
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
leaveq 
retq   
mov    %r12,%rdi
callq  258d0 <next_marker>
test   %eax,%eax
je     232c7 <jpeg_resync_to_restart+0x1c7>
movslq 0x21c(%r12),%r15
mov    $0x1,%eax
mov    $0x4,%esi
mov    $0x3,%ecx
mov    $0x2,%ebx
mov    -0x30(%rbp),%rdx
mov    -0x38(%rbp),%rdi
jmpq   231c3 <jpeg_resync_to_restart+0xc3>
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
mov    $0x1,%eax
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
leaveq 
retq   
cmp    $0xd7,%r15d
jle    232df <jpeg_resync_to_restart+0x1df>
mov    %rcx,%rbx
jmpq   231cc <jpeg_resync_to_restart+0xcc>
xor    %eax,%eax
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
leaveq 
retq   
cmp    %r13d,%r15d
jne    232ec <jpeg_resync_to_restart+0x1ec>
mov    %rcx,%rbx
jmpq   231cc <jpeg_resync_to_restart+0xcc>
cmp    %r14d,%r15d
jne    232f9 <jpeg_resync_to_restart+0x1f9>
mov    %rcx,%rbx
jmpq   231cc <jpeg_resync_to_restart+0xcc>
cmp    %edi,%r15d
je     231cc <jpeg_resync_to_restart+0xcc>
cmp    %edx,%r15d
je     231cc <jpeg_resync_to_restart+0xcc>
mov    %rax,%rbx
jmpq   231cc <jpeg_resync_to_restart+0xcc>
data16 nopw %cs:0x0(%rax,%rax,1)
xchg   %ax,%ax

0000000000023320 <jinit_marker_reader>:
push   %rbp
mov    %rsp,%rbp
sub    $0x10,%rsp
mov    %r14,-0x8(%rbp)
mov    %r15,-0x10(%rbp)
mov    0x8(%rdi),%rax
mov    (%rax),%rax
xor    %r14d,%r14d
mov    $0x108,%edx
mov    %rdi,%r15
mov    %r14,%rsi
callq  *%rax
mov    %rax,0x248(%r15)
lea    0x2cab(%rip),%rcx        # 26000 <reset_marker_reader>
mov    %rcx,(%rax)
lea    0x2871(%rip),%rcx        # 25bd0 <read_markers>
mov    %rcx,0x8(%rax)
lea    0x2bb6(%rip),%rcx        # 25f20 <read_restart_marker>
mov    %rcx,0x10(%rax)
lea    0x242b(%rip),%rdx        # 257a0 <skip_variable>
mov    %rdx,0x28(%rax)
movl   $0x0,0xb0(%rax)
jmp    2339c <jinit_marker_reader+0x7c>
movslq %r14d,%rcx
mov    %rdx,0x30(%rax,%rcx,8)
movl   $0x0,0xb4(%rax,%rcx,4)
add    $0x1,%r14d
cmp    $0xf,%r14d
jle    23385 <jinit_marker_reader+0x65>
lea    0x1d47(%rip),%rcx        # 250f0 <get_interesting_appn>
mov    %rcx,0x30(%rax)
mov    %rcx,0xa0(%rax)
mov    %r15,%rdi
callq  26000 <reset_marker_reader>
mov    -0x10(%rbp),%r15
mov    -0x8(%rbp),%r14
leaveq 
retq   
nopw   %cs:0x0(%rax,%rax,1)

00000000000233d0 <get_soi>:
push   %rbp
mov    %rsp,%rbp
sub    $0x10,%rsp
mov    %r15,-0x10(%rbp)
mov    %r14,-0x8(%rbp)
mov    (%rdi),%rax
movl   $0x66,0x28(%rax)
mov    $0x1,%esi
mov    (%rdi),%rax
mov    0x8(%rax),%rax
mov    %rdi,%r15
callq  *%rax
xor    %r14d,%r14d
mov    0x248(%r15),%rax
movslq 0x18(%rax),%rax
test   %eax,%eax
je     23446 <get_soi+0x76>
mov    (%r15),%rax
movl   $0x3d,0x28(%rax)
mov    (%r15),%rax
mov    (%rax),%rax
mov    %r15,%rdi
callq  *%rax
jmp    23446 <get_soi+0x76>
movslq %r14d,%rax
movb   $0x0,0x140(%r15,%rax,1)
movb   $0x1,0x150(%r15,%rax,1)
movb   $0x5,0x160(%r15,%rax,1)
add    $0x1,%r14d
cmp    $0xf,%r14d
jle    23424 <get_soi+0x54>
movl   $0x0,0x170(%r15)
movl   $0x0,0x3c(%r15)
movl   $0x0,0x188(%r15)
movl   $0x0,0x174(%r15)
movb   $0x1,0x178(%r15)
movb   $0x1,0x179(%r15)
movb   $0x0,0x17a(%r15)
movw   $0x1,0x17c(%r15)
movw   $0x1,0x17e(%r15)
movl   $0x0,0x180(%r15)
movb   $0x0,0x184(%r15)
mov    0x248(%r15),%rax
movl   $0x1,0x18(%rax)
mov    -0x8(%rbp),%r14
mov    $0x1,%eax
mov    -0x10(%rbp),%r15
leaveq 
retq   
data16 nopw %cs:0x0(%rax,%rax,1)
nopl   0x0(%rax)

00000000000234e0 <get_sof>:
push   %rbp
mov    %rsp,%rbp
sub    $0x30,%rsp
mov    %r15,-0x18(%rbp)
mov    %rdi,-0x30(%rbp)
mov    0x28(%rdi),%r15
mov    (%r15),%rcx
mov    0x8(%r15),%r8
mov    %esi,0x138(%rdi)
mov    %edx,0x13c(%rdi)
test   %r8,%r8
je     236d3 <get_sof+0x1f3>
movzbl (%rcx),%eax
mov    %rax,-0x28(%rbp)
lea    -0x1(%r8),%rsi
test   %rsi,%rsi
je     236e7 <get_sof+0x207>
lea    0x1(%rcx),%rdx
movzbl (%rdx),%ecx
mov    %rcx,-0x20(%rbp)
add    $0xffffffffffffffff,%rsi
test   %rsi,%rsi
je     236fb <get_sof+0x21b>
add    $0x1,%rdx
movzbl (%rdx),%r8d
mov    %r8d,0x128(%rdi)
lea    -0x1(%rsi),%r8
test   %r8,%r8
je     2370f <get_sof+0x22f>
lea    0x1(%rdx),%rsi
movzbl (%rsi),%edx
shl    $0x8,%edx
mov    %edx,0x34(%rdi)
add    $0xffffffffffffffff,%r8
test   %r8,%r8
je     23723 <get_sof+0x243>
add    $0x1,%rsi
movzbl (%rsi),%edx
add    0x34(%rdi),%edx
mov    %edx,0x34(%rdi)
add    $0xffffffffffffffff,%r8
test   %r8,%r8
je     23737 <get_sof+0x257>
add    $0x1,%rsi
movzbl (%rsi),%edx
shl    $0x8,%edx
mov    %edx,0x30(%rdi)
add    $0xffffffffffffffff,%r8
test   %r8,%r8
je     2374b <get_sof+0x26b>
add    $0x1,%rsi
movzbl (%rsi),%edx
add    0x30(%rdi),%edx
mov    %edx,0x30(%rdi)
add    $0xffffffffffffffff,%r8
test   %r8,%r8
je     2375f <get_sof+0x27f>
lea    0x1(%rsi),%r9
movzbl (%r9),%edx
mov    %edx,0x38(%rdi)
movslq 0x21c(%rdi),%rdx
mov    (%rdi),%rsi
mov    %edx,0x2c(%rsi)
movslq 0x30(%rdi),%rdx
mov    %edx,0x30(%rsi)
movslq 0x34(%rdi),%rdx
mov    %edx,0x34(%rsi)
movslq 0x38(%rdi),%rdx
mov    %edx,0x38(%rsi)
mov    (%rdi),%rdx
movl   $0x64,0x28(%rdx)
mov    $0x1,%esi
mov    (%rdi),%rdx
mov    0x8(%rdx),%rdx
mov    %rdi,%r10
mov    %r14,-0x28(%rbp)
mov    %r15,-0x30(%rbp)
mov    %rbx,-0x8(%rbp)
mov    %r12,-0x10(%rbp)
mov    %r13,-0x20(%rbp)
mov    %rax,%rbx
mov    %rdi,%r12
mov    %r10,%rdi
mov    %r8,%r13
mov    %rcx,%r14
mov    %r9,%r15
callq  *%rdx
mov    0x248(%r12),%rax
movslq 0x1c(%rax),%rax
test   %eax,%eax
je     23655 <get_sof+0x175>
mov    (%r12),%rax
movl   $0x3a,0x28(%rax)
mov    (%r12),%rax
mov    (%rax),%rax
mov    %r12,%rdi
callq  *%rax
mov    0x34(%r12),%eax
test   %eax,%eax
je     23670 <get_sof+0x190>
mov    0x30(%r12),%eax
test   %eax,%eax
je     23670 <get_sof+0x190>
movslq 0x38(%r12),%rax
test   %eax,%eax
jg     23687 <get_sof+0x1a7>
mov    (%r12),%rax
movl   $0x20,0x28(%rax)
mov    (%r12),%rax
mov    (%rax),%rax
mov    %r12,%rdi
callq  *%rax
shl    $0x8,%ebx
mov    %ebx,%eax
lea    -0x8(%r14,%rax,1),%rax
movslq 0x38(%r12),%rcx
lea    (%rcx,%rcx,2),%ecx
movslq %ecx,%rcx
cmp    %rax,%rcx
je     236b8 <get_sof+0x1d8>
mov    (%r12),%rax
movl   $0xb,0x28(%rax)
mov    (%r12),%rax
mov    (%rax),%rax
mov    %r12,%rdi
callq  *%rax
mov    0x130(%r12),%rax
test   %rax,%rax
je     23773 <get_sof+0x293>
mov    $0x1,%ebx
jmpq   2379d <get_sof+0x2bd>
callq  *0x18(%r15)
test   %eax,%eax
jne    237b9 <get_sof+0x2d9>
xor    %eax,%eax
mov    -0x18(%rbp),%r15
leaveq 
retq   
callq  *0x18(%r15)
test   %eax,%eax
jne    237c9 <get_sof+0x2e9>
xor    %eax,%eax
mov    -0x18(%rbp),%r15
leaveq 
retq   
callq  *0x18(%r15)
test   %eax,%eax
jne    237dd <get_sof+0x2fd>
xor    %eax,%eax
mov    -0x18(%rbp),%r15
leaveq 
retq   
callq  *0x18(%r15)
test   %eax,%eax
jne    237f5 <get_sof+0x315>
xor    %eax,%eax
mov    -0x18(%rbp),%r15
leaveq 
retq   
callq  *0x18(%r15)
test   %eax,%eax
jne    2380d <get_sof+0x32d>
xor    %eax,%eax
mov    -0x18(%rbp),%r15
leaveq 
retq   
callq  *0x18(%r15)
test   %eax,%eax
jne    23825 <get_sof+0x345>
xor    %eax,%eax
mov    -0x18(%rbp),%r15
leaveq 
retq   
callq  *0x18(%r15)
test   %eax,%eax
jne    2383d <get_sof+0x35d>
xor    %eax,%eax
mov    -0x18(%rbp),%r15
leaveq 
retq   
callq  *0x18(%r15)
test   %eax,%eax
jne    23855 <get_sof+0x375>
xor    %eax,%eax
mov    -0x18(%rbp),%r15
leaveq 
retq   
mov    0x8(%r12),%rax
mov    (%rax),%rax
movslq 0x38(%r12),%rcx
lea    (%rcx,%rcx,2),%rdx
shl    $0x5,%rdx
mov    %r12,%rdi
mov    $0x1,%ebx
mov    %rbx,%rsi
callq  *%rax
mov    %rax,0x130(%r12)
mov    0x130(%r12),%r14
lea    0x1(%r15),%rcx
lea    -0x1(%r13),%rax
mov    -0x30(%rbp),%r15
xor    %r13d,%r13d
jmpq   23916 <get_sof+0x436>
mov    (%r15),%rcx
mov    0x8(%r15),%r8
mov    -0x30(%rbp),%rdi
jmpq   23510 <get_sof+0x30>
mov    (%r15),%rdx
mov    0x8(%r15),%rsi
mov    -0x28(%rbp),%rax
mov    -0x30(%rbp),%rdi
jmpq   23528 <get_sof+0x48>
mov    (%r15),%rdx
mov    0x8(%r15),%rsi
mov    -0x20(%rbp),%rcx
mov    -0x28(%rbp),%rax
mov    -0x30(%rbp),%rdi
jmpq   23540 <get_sof+0x60>
mov    (%r15),%rsi
mov    0x8(%r15),%r8
mov    -0x20(%rbp),%rcx
mov    -0x28(%rbp),%rax
mov    -0x30(%rbp),%rdi
jmpq   2355c <get_sof+0x7c>
mov    (%r15),%rsi
mov    0x8(%r15),%r8
mov    -0x20(%rbp),%rcx
mov    -0x28(%rbp),%rax
mov    -0x30(%rbp),%rdi
jmpq   23576 <get_sof+0x96>
mov    (%r15),%rsi
mov    0x8(%r15),%r8
mov    -0x20(%rbp),%rcx
mov    -0x28(%rbp),%rax
mov    -0x30(%rbp),%rdi
jmpq   23590 <get_sof+0xb0>
mov    (%r15),%rsi
mov    0x8(%r15),%r8
mov    -0x20(%rbp),%rcx
mov    -0x28(%rbp),%rax
mov    -0x30(%rbp),%rdi
jmpq   235aa <get_sof+0xca>
mov    (%r15),%r9
mov    0x8(%r15),%r8
mov    -0x20(%rbp),%rcx
mov    -0x28(%rbp),%rax
mov    -0x30(%rbp),%rdi
jmpq   235c4 <get_sof+0xe4>
mov    %r13d,0x4(%r14)
test   %rax,%rax
je     23950 <get_sof+0x470>
movzbl (%rcx),%edx
mov    %edx,(%r14)
lea    -0x1(%rax),%rdx
test   %rdx,%rdx
je     23967 <get_sof+0x487>
add    $0x1,%rcx
movzbl (%rcx),%eax
mov    %rax,%rsi
shr    $0x4,%esi
mov    %esi,0x8(%r14)
and    $0xf,%eax
mov    %eax,0xc(%r14)
add    $0xffffffffffffffff,%rdx
test   %rdx,%rdx
je     2397e <get_sof+0x49e>
lea    0x1(%rcx),%rax
mov    %rdx,%r15
movzbl (%rax),%ecx
mov    %ecx,0x10(%r14)
movslq (%r14),%rcx
mov    (%r12),%rdx
mov    %ecx,0x2c(%rdx)
movslq 0x8(%r14),%rcx
mov    %ecx,0x30(%rdx)
movslq 0xc(%r14),%rcx
mov    %ecx,0x34(%rdx)
movslq 0x10(%r14),%rcx
mov    %ecx,0x38(%rdx)
mov    (%r12),%rcx
movl   $0x65,0x28(%rcx)
mov    (%r12),%rcx
mov    0x8(%rcx),%rcx
mov    %rbx,%rsi
mov    %rax,%rbx
mov    %r12,%rdi
callq  *%rcx
add    $0x1,%r13d
add    $0x60,%r14
lea    0x1(%rbx),%rcx
lea    -0x1(%r15),%rax
mov    $0x1,%ebx
mov    -0x30(%rbp),%r15
cmp    0x38(%r12),%r13d
jl     2386d <get_sof+0x38d>
mov    0x248(%r12),%rdx
movl   $0x1,0x1c(%rdx)
mov    %rcx,(%r15)
mov    %rax,0x8(%r15)
mov    %rbx,%rax
mov    -0x20(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
mov    -0x28(%rbp),%r14
mov    -0x18(%rbp),%r15
leaveq 
retq   
mov    %r12,%rdi
callq  *0x18(%r15)
test   %eax,%eax
je     23995 <get_sof+0x4b5>
mov    (%r15),%rcx
mov    0x8(%r15),%rax
jmpq   2387a <get_sof+0x39a>
mov    %r12,%rdi
callq  *0x18(%r15)
test   %eax,%eax
je     239ad <get_sof+0x4cd>
mov    (%r15),%rcx
mov    0x8(%r15),%rdx
jmpq   23891 <get_sof+0x3b1>
mov    %r12,%rdi
callq  *0x18(%r15)
test   %eax,%eax
je     239c5 <get_sof+0x4e5>
mov    (%r15),%rax
mov    0x8(%r15),%r15
jmpq   238b9 <get_sof+0x3d9>
mov    -0x20(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
mov    -0x28(%rbp),%r14
xor    %eax,%eax
mov    -0x18(%rbp),%r15
leaveq 
retq   
mov    -0x20(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
mov    -0x28(%rbp),%r14
xor    %eax,%eax
mov    -0x18(%rbp),%r15
leaveq 
retq   
mov    -0x20(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
mov    -0x28(%rbp),%r14
xor    %eax,%eax
mov    -0x18(%rbp),%r15
leaveq 
retq   
nopl   (%rax)

00000000000239e0 <get_sos>:
push   %rbp
mov    %rsp,%rbp
sub    $0x50,%rsp
mov    %r15,-0x28(%rbp)
mov    %rdi,-0x50(%rbp)
mov    0x28(%rdi),%rax
mov    0x8(%rax),%rdx
mov    (%rax),%rsi
mov    0x248(%rdi),%rcx
movslq 0x1c(%rcx),%rcx
test   %ecx,%ecx
je     23a18 <get_sos+0x38>
mov    %r13,%rcx
mov    %r12,%r13
mov    %rbx,%r12
mov    %rdi,%rbx
jmp    23a60 <get_sos+0x80>
mov    (%rdi),%rcx
movl   $0x3e,0x28(%rcx)
mov    (%rdi),%rcx
mov    (%rcx),%rcx
mov    %rdi,%r8
mov    %r12,-0x10(%rbp)
mov    %r13,-0x18(%rbp)
mov    %r14,-0x20(%rbp)
mov    %rbx,%r12
mov    %rdi,%rbx
mov    %r8,%rdi
mov    %rax,%r13
mov    %rsi,%r14
mov    %rdx,%r15
callq  *%rcx
mov    %r13,%rax
mov    %r15,%rdx
mov    %r14,%rsi
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%rcx
mov    -0x10(%rbp),%r13
xor    %r15d,%r15d
test   %rdx,%rdx
je     23b33 <get_sos+0x153>
movzbl (%rsi),%r8d
lea    -0x1(%rdx),%rdi
test   %rdi,%rdi
je     23b5c <get_sos+0x17c>
add    $0x1,%rsi
movzbl (%rsi),%edx
add    $0xffffffffffffffff,%rdi
test   %rdi,%rdi
je     23b89 <get_sos+0x1a9>
add    $0x1,%rsi
mov    %rdi,-0x30(%rbp)
mov    %rsi,-0x38(%rbp)
mov    (%rbx),%rdi
movzbl (%rsi),%r10d
mov    %r10,-0x50(%rbp)
movl   $0x67,0x28(%rdi)
mov    (%rbx),%rsi
mov    %r10d,0x2c(%rsi)
mov    $0x1,%esi
mov    (%rbx),%rdi
mov    0x8(%rdi),%r9
mov    %r14,-0x20(%rbp)
mov    %rbx,%rdi
mov    %r13,-0x10(%rbp)
mov    %rcx,-0x18(%rbp)
mov    %rax,-0x40(%rbp)
mov    %r12,-0x8(%rbp)
mov    %r8,%r12
mov    %rdx,%r13
mov    %r10,%r14
callq  *%r9
shl    $0x8,%r12d
mov    %r12d,%eax
add    %r13,%rax
lea    0x6(%r14,%r14,1),%ecx
movslq %ecx,%rcx
cmp    %rax,%rcx
jne    23b07 <get_sos+0x127>
test   %r14b,%r14b
je     23b07 <get_sos+0x127>
cmp    $0x4,%r14b
jbe    23b1c <get_sos+0x13c>
mov    (%rbx),%rax
movl   $0xb,0x28(%rax)
mov    (%rbx),%rax
mov    (%rax),%rax
mov    %rbx,%rdi
callq  *%rax
mov    %r14d,0x1b0(%rbx)
mov    -0x38(%rbp),%rsi
mov    -0x30(%rbp),%rdx
mov    %r15,%rax
jmpq   23bc8 <get_sos+0x1e8>
mov    %rbx,%rdi
mov    %rcx,%rbx
mov    %rax,%r15
callq  *0x18(%r15)
test   %eax,%eax
jne    23be1 <get_sos+0x201>
mov    %r12,%rcx
mov    %r13,%r12
mov    %rbx,%r13
mov    %rcx,%rbx
xor    %eax,%eax
mov    -0x28(%rbp),%r15
leaveq 
retq   
mov    %r8,-0x48(%rbp)
mov    %rbx,%rdi
mov    %rcx,%rbx
mov    %rax,%r15
callq  *0x18(%r15)
test   %eax,%eax
jne    23bfa <get_sos+0x21a>
mov    %r12,%rcx
mov    %r13,%r12
mov    %rbx,%r13
mov    %rcx,%rbx
xor    %eax,%eax
mov    -0x28(%rbp),%r15
leaveq 
retq   
mov    %r8,-0x48(%rbp)
mov    %rdx,-0x40(%rbp)
mov    %rbx,%rdi
mov    %rcx,%rbx
mov    %rax,%r15
callq  *0x18(%r15)
test   %eax,%eax
jne    23c17 <get_sos+0x237>
mov    %r12,%rcx
mov    %r13,%r12
mov    %rbx,%r13
mov    %rcx,%rbx
xor    %eax,%eax
mov    -0x28(%rbp),%r15
leaveq 
retq   
movslq %eax,%rcx
movq   $0x0,0x1b8(%rbx,%rcx,8)
add    $0x1,%eax
cmp    $0x3,%eax
jle    23bb6 <get_sos+0x1d6>
lea    -0x1(%rdx),%rax
lea    0x1(%rsi),%rcx
mov    -0x40(%rbp),%r12
mov    %r15,%r13
jmpq   23c8c <get_sos+0x2ac>
mov    %r15,%rax
mov    %rbx,%rcx
mov    (%rax),%rsi
mov    0x8(%rax),%rdx
xor    %r15d,%r15d
mov    -0x50(%rbp),%rbx
jmpq   23a6c <get_sos+0x8c>
mov    %r15,%rax
mov    %rbx,%rcx
mov    (%rax),%rsi
mov    0x8(%rax),%rdi
mov    -0x48(%rbp),%r8
xor    %r15d,%r15d
mov    -0x50(%rbp),%rbx
jmpq   23a81 <get_sos+0xa1>
mov    %r15,%rax
mov    %rbx,%rcx
mov    (%rax),%rsi
mov    0x8(%rax),%rdi
mov    -0x40(%rbp),%rdx
mov    -0x48(%rbp),%r8
xor    %r15d,%r15d
mov    -0x50(%rbp),%rbx
jmpq   23a95 <get_sos+0xb5>
movslq %r15d,%rax
mov    0x1b8(%rbx,%rax,8),%rax
cmp    %r12,%rax
jne    23c64 <get_sos+0x284>
mov    (%rbx),%rax
movl   $0x5,0x28(%rax)
mov    (%rbx),%rax
mov    %r14d,0x2c(%rax)
mov    (%rbx),%rax
mov    (%rax),%rax
mov    %rbx,%rdi
callq  *%rax
add    $0x1,%r15d
cmp    %r13d,%r15d
jl     23c38 <get_sos+0x258>
mov    -0x30(%rbp),%rax
add    $0xffffffffffffffff,%rax
mov    -0x38(%rbp),%rcx
add    $0x1,%rcx
add    $0x1,%r13d
mov    -0x50(%rbp),%r14
mov    -0x40(%rbp),%r12
xor    %r15d,%r15d
cmp    %r14d,%r13d
jl     23cbb <get_sos+0x2db>
test   %rax,%rax
jne    23d11 <get_sos+0x331>
mov    %rbx,%rdi
callq  *0x18(%r12)
test   %eax,%eax
jne    23d08 <get_sos+0x328>
mov    %r15,%rax
mov    -0x8(%rbp),%rbx
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
leaveq 
retq   
test   %rax,%rax
jne    23cd9 <get_sos+0x2f9>
mov    %rbx,%rdi
callq  *0x18(%r12)
test   %eax,%eax
je     23df3 <get_sos+0x413>
mov    (%r12),%rcx
mov    0x8(%r12),%rax
movzbl (%rcx),%r14d
add    $0xffffffffffffffff,%rax
test   %rax,%rax
je     23e0c <get_sos+0x42c>
add    $0x1,%rcx
mov    %rax,-0x30(%rbp)
mov    %rcx,-0x38(%rbp)
movzbl (%rcx),%ecx
mov    0x130(%rbx),%r12
mov    %r15,%rax
jmpq   23e4c <get_sos+0x46c>
mov    (%r12),%rcx
mov    0x8(%r12),%rax
movzbl (%rcx),%edx
mov    %edx,0x20c(%rbx)
lea    -0x1(%rax),%rdx
test   %rdx,%rdx
je     23ecb <get_sos+0x4eb>
lea    0x1(%rcx),%rax
movzbl (%rax),%ecx
mov    %ecx,0x210(%rbx)
lea    -0x1(%rdx),%rcx
test   %rcx,%rcx
je     23ef0 <get_sos+0x510>
lea    0x1(%rax),%r14
mov    %rcx,%r15
movzbl (%r14),%eax
mov    %rax,%rcx
shr    $0x4,%ecx
mov    %ecx,0x214(%rbx)
and    $0xf,%eax
mov    %eax,0x218(%rbx)
movslq 0x20c(%rbx),%rax
mov    (%rbx),%rcx
mov    %eax,0x2c(%rcx)
movslq 0x210(%rbx),%rax
mov    %eax,0x30(%rcx)
movslq 0x214(%rbx),%rax
mov    %eax,0x34(%rcx)
movslq 0x218(%rbx),%rax
mov    %eax,0x38(%rcx)
mov    (%rbx),%rax
movl   $0x69,0x28(%rax)
mov    (%rbx),%rax
mov    0x8(%rax),%rax
mov    %rbx,%rdi
mov    $0x1,%r13d
mov    %r13,%rsi
callq  *%rax
mov    0x248(%rbx),%rax
movl   $0x0,0x20(%rax)
movslq 0xac(%rbx),%rax
add    $0x1,%eax
mov    %eax,0xac(%rbx)
lea    0x1(%r14),%rax
mov    %rax,(%r12)
lea    -0x1(%r15),%rax
mov    %rax,0x8(%r12)
mov    %r13,%rax
mov    -0x8(%rbp),%rbx
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
leaveq 
retq   
mov    %r15,%rax
mov    -0x8(%rbp),%rbx
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
leaveq 
retq   
mov    %rbx,%rdi
callq  *0x18(%r12)
test   %eax,%eax
je     23f15 <get_sos+0x535>
mov    (%r12),%rcx
mov    0x8(%r12),%rax
jmpq   23cee <get_sos+0x30e>
cmp    $0x3,%eax
jg     23e51 <get_sos+0x471>
cmp    (%r12),%r14d
jne    23e45 <get_sos+0x465>
movslq %eax,%rdx
mov    0x1b8(%rbx,%rdx,8),%rdx
test   %rdx,%rdx
je     23e76 <get_sos+0x496>
add    $0x60,%r12
add    $0x1,%eax
cmp    0x38(%rbx),%eax
jl     23e2a <get_sos+0x44a>
mov    (%rbx),%rax
movl   $0x5,0x28(%rax)
mov    (%rbx),%rax
mov    %r14d,0x2c(%rax)
mov    (%rbx),%rax
mov    (%rax),%rax
mov    %rcx,%r15
mov    %rbx,%rdi
callq  *%rax
mov    %r15,%rcx
xor    %r15d,%r15d
movslq %r13d,%rax
mov    %r12,0x1b8(%rbx,%rax,8)
mov    %rcx,%rax
shr    $0x4,%eax
mov    %eax,0x14(%r12)
and    $0xf,%ecx
mov    %ecx,0x18(%r12)
mov    (%rbx),%rcx
mov    %r14d,0x2c(%rcx)
movslq 0x14(%r12),%rax
mov    %eax,0x30(%rcx)
movslq 0x18(%r12),%rax
mov    %eax,0x34(%rcx)
mov    (%rbx),%rax
movl   $0x68,0x28(%rax)
mov    (%rbx),%rax
mov    0x8(%rax),%rax
mov    %rbx,%rdi
mov    $0x1,%esi
callq  *%rax
jmpq   23c68 <get_sos+0x288>
mov    %rbx,%rdi
callq  *0x18(%r12)
test   %eax,%eax
jne    23f2e <get_sos+0x54e>
mov    %r15,%rax
mov    -0x8(%rbp),%rbx
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
leaveq 
retq   
mov    %rbx,%rdi
callq  *0x18(%r12)
test   %eax,%eax
jne    23f3c <get_sos+0x55c>
mov    %r15,%rax
mov    -0x8(%rbp),%rbx
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
leaveq 
retq   
mov    %r15,%rax
mov    -0x8(%rbp),%rbx
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
leaveq 
retq   
mov    (%r12),%rax
mov    0x8(%r12),%rdx
jmpq   23d2b <get_sos+0x34b>
mov    (%r12),%r14
mov    0x8(%r12),%r15
jmpq   23d48 <get_sos+0x368>
nopw   0x0(%rax,%rax,1)

0000000000023f50 <get_dac>:
push   %rbp
mov    %rsp,%rbp
sub    $0x40,%rsp
mov    %r15,-0x20(%rbp)
mov    0x28(%rdi),%rdx
mov    %rdx,-0x30(%rbp)
mov    (%rdx),%rcx
mov    0x8(%rdx),%rax
test   %rax,%rax
je     23fc5 <get_dac+0x75>
mov    %r13,%r15
mov    %rbx,%r13
mov    %rdi,%rbx
mov    %r14,%rdi
mov    %rdx,%r14
mov    %rdi,%rdx
movzbl (%rcx),%esi
add    $0xffffffffffffffff,%rax
test   %rax,%rax
je     23ff8 <get_dac+0xa8>
lea    0x1(%rcx),%rdi
mov    %r12,%r8
mov    %r15,%r9
mov    $0x1,%r12d
lea    0x1(%rdi),%rcx
add    $0xffffffffffffffff,%rax
movzbl (%rdi),%edi
shl    $0x8,%esi
mov    %esi,%esi
lea    -0x2(%rdi,%rsi,1),%r15
mov    %r13,-0x8(%rbp)
mov    %r8,-0x10(%rbp)
mov    %r9,-0x18(%rbp)
mov    %rdx,-0x28(%rbp)
jmp    24040 <get_dac+0xf0>
mov    %rdi,%rax
mov    %rdi,-0x38(%rbp)
mov    %rax,%rdi
mov    %r13,%r15
mov    %rbx,%r13
mov    %r14,%rbx
mov    %rdx,%r14
callq  *0x18(%r14)
test   %eax,%eax
jne    2408b <get_dac+0x13b>
mov    %rbx,%r14
mov    %r13,%rbx
mov    %r15,%r13
xor    %eax,%eax
mov    -0x20(%rbp),%r15
leaveq 
retq   
mov    %rbx,%rdi
mov    %rbx,-0x28(%rbp)
mov    %rsi,-0x38(%rbp)
mov    %rdx,%rbx
callq  *0x18(%r14)
test   %eax,%eax
jne    2409e <get_dac+0x14e>
mov    %rbx,%r14
mov    %r13,%rbx
mov    %r15,%r13
xor    %eax,%eax
mov    -0x20(%rbp),%r15
leaveq 
retq   
lea    -0x10(%r13),%edx
movslq %edx,%rdx
mov    -0x38(%rbp),%rsi
mov    %sil,0x160(%rbx,%rdx,1)
mov    $0x1,%r12d
mov    -0x30(%rbp),%r14
test   %r15,%r15
jg     240bb <get_dac+0x16b>
test   %r15,%r15
jns    2406b <get_dac+0x11b>
mov    (%rbx),%rdx
movl   $0xb,0x28(%rdx)
mov    (%rbx),%rdx
mov    (%rdx),%rdx
mov    %rbx,%rdi
mov    %rax,%rbx
mov    %rcx,%r13
callq  *%rdx
mov    %rbx,%rax
mov    %r13,%rcx
mov    %rcx,(%r14)
mov    %rax,0x8(%r14)
mov    %r12,%rax
mov    -0x28(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
mov    -0x20(%rbp),%r15
leaveq 
retq   
mov    (%r14),%rcx
mov    0x8(%r14),%rax
mov    %rbx,%rdx
mov    -0x38(%rbp),%rbx
jmpq   23f82 <get_dac+0x32>
mov    (%r14),%rdi
mov    0x8(%r14),%rax
mov    %rbx,%rdx
mov    %r12,%r8
mov    %r15,%r9
mov    -0x38(%rbp),%rsi
mov    -0x28(%rbp),%rbx
jmpq   23f98 <get_dac+0x48>
test   %rax,%rax
je     24178 <get_dac+0x228>
movzbl (%rcx),%r13d
lea    -0x1(%rax),%rdx
test   %rdx,%rdx
je     2418f <get_dac+0x23f>
lea    0x1(%rcx),%r14
mov    (%rbx),%rax
movzbl (%r14),%ecx
mov    %rcx,-0x38(%rbp)
movl   $0x4f,0x28(%rax)
mov    (%rbx),%rax
mov    %r13d,0x2c(%rax)
mov    (%rbx),%rax
mov    %ecx,0x30(%rax)
mov    (%rbx),%rax
mov    0x8(%rax),%rax
mov    %r12,%rsi
mov    %rdx,%r12
mov    %rbx,%rdi
callq  *%rax
cmp    $0x1f,%r13b
jbe    2412c <get_dac+0x1dc>
mov    (%rbx),%rax
movl   $0x1c,0x28(%rax)
mov    (%rbx),%rax
mov    %r13d,0x2c(%rax)
mov    (%rbx),%rax
mov    (%rax),%rax
mov    %rbx,%rdi
callq  *%rax
lea    0x1(%r14),%rcx
lea    -0x1(%r12),%rax
add    $0xfffffffffffffffe,%r15
cmp    $0xf,%r13b
ja     24023 <get_dac+0xd3>
mov    -0x38(%rbp),%rdi
mov    %rdi,%rsi
and    $0xf,%sil
mov    %sil,0x140(%r13,%rbx,1)
mov    %rdi,%rdx
shr    $0x4,%edx
mov    %dl,0x150(%rbx,%r13,1)
cmp    %sil,%dl
jb     241a9 <get_dac+0x259>
mov    $0x1,%r12d
mov    -0x30(%rbp),%r14
jmpq   24040 <get_dac+0xf0>
mov    %rbx,%rdi
callq  *0x18(%r14)
test   %eax,%eax
je     241df <get_dac+0x28f>
mov    (%r14),%rcx
mov    0x8(%r14),%rax
jmpq   240c4 <get_dac+0x174>
mov    %rbx,%rdi
callq  *0x18(%r14)
test   %eax,%eax
je     241f7 <get_dac+0x2a7>
mov    (%r14),%rax
mov    0x8(%r14),%rdx
mov    %rax,%r14
jmpq   240d9 <get_dac+0x189>
mov    (%rbx),%rdx
movl   $0x1d,0x28(%rdx)
mov    (%rbx),%rdx
mov    %edi,0x2c(%rdx)
mov    (%rbx),%rdx
mov    (%rdx),%rdx
mov    %rax,%r13
mov    %rcx,%r14
mov    %rbx,%rdi
callq  *%rdx
mov    %r13,%rax
mov    %r14,%rcx
mov    $0x1,%r12d
mov    -0x30(%rbp),%r14
jmpq   24040 <get_dac+0xf0>
mov    -0x28(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
xor    %eax,%eax
mov    -0x20(%rbp),%r15
leaveq 
retq   
mov    -0x28(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
xor    %eax,%eax
mov    -0x20(%rbp),%r15
leaveq 
retq   
nop

0000000000024210 <get_dht>:
push   %rbp
mov    %rsp,%rbp
sub    $0x160,%rsp
mov    %r15,-0x28(%rbp)
mov    0x28(%rdi),%r15
mov    %r15,-0x40(%rbp)
mov    (%r15),%rsi
xor    %eax,%eax
mov    0x8(%r15),%r8
test   %r8,%r8
je     24287 <get_dht+0x77>
mov    %r14,%rcx
mov    %rax,%r14
mov    %rbx,%rdx
mov    %rdi,%rbx
movzbl (%rsi),%eax
lea    -0x1(%r8),%rdi
test   %rdi,%rdi
je     242a5 <get_dht+0x95>
lea    0x1(%rsi),%r8
mov    %r13,%r9
mov    %r12,%r10
mov    $0x1,%esi
lea    0x1(%r8),%r13
lea    -0x1(%rdi),%r12
movzbl (%r8),%edi
shl    $0x8,%eax
mov    %eax,%eax
lea    -0x2(%rdi,%rax,1),%rax
mov    %rdx,-0x8(%rbp)
mov    %r10,-0x10(%rbp)
mov    %r9,-0x18(%rbp)
mov    %rcx,-0x20(%rbp)
jmpq   24350 <get_dht+0x140>
mov    %rdi,%rax
mov    %rdi,-0x48(%rbp)
mov    %rax,%rdi
callq  *0x18(%r15)
test   %eax,%eax
jne    2439a <get_dht+0x18a>
xor    %eax,%eax
mov    -0x28(%rbp),%r15
leaveq 
retq   
mov    %rbx,%rdi
mov    %rbx,-0x48(%rbp)
mov    %rax,-0x30(%rbp)
mov    %rdx,%rbx
mov    %rcx,%r14
callq  *0x18(%r15)
test   %eax,%eax
jne    243b3 <get_dht+0x1a3>
xor    %eax,%eax
mov    -0x28(%rbp),%r15
leaveq 
retq   
add    $0xfffffff0,%r15d
test   %r15d,%r15d
jns    243d6 <get_dht+0x1c6>
mov    (%rbx),%rax
movl   $0x1e,0x28(%rax)
mov    (%rbx),%rax
mov    %r15d,0x2c(%rax)
mov    (%rbx),%rax
mov    (%rax),%rax
mov    %rbx,%rdi
callq  *%rax
movslq %r15d,%rax
lea    0x108(%rbx,%rax,8),%r15
mov    (%r15),%rax
test   %rax,%rax
jne    24311 <get_dht+0x101>
mov    %rbx,%rdi
callq  44a0 <jpeg_alloc_huff_table@plt>
mov    %rax,(%r15)
mov    (%r15),%rdi
lea    -0x159(%rbp),%rsi
mov    $0x11,%edx
callq  42c0 <memcpy@plt>
mov    (%r15),%rdi
add    $0x11,%rdi
lea    -0x148(%rbp),%rsi
mov    $0x100,%edx
callq  42c0 <memcpy@plt>
mov    -0x38(%rbp),%rax
sub    %r14,%rax
mov    -0x40(%rbp),%r15
mov    $0x1,%esi
xor    %r14d,%r14d
cmp    $0x10,%rax
jg     243e5 <get_dht+0x1d5>
test   %rax,%rax
je     2437a <get_dht+0x16a>
mov    (%rbx),%rax
movl   $0xb,0x28(%rax)
mov    (%rbx),%rax
mov    (%rax),%rax
mov    %rbx,%rdi
mov    %rsi,%rbx
callq  *%rax
mov    %rbx,%rsi
mov    %r13,(%r15)
mov    %r12,0x8(%r15)
mov    %rsi,%rax
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
mov    -0x28(%rbp),%r15
leaveq 
retq   
mov    (%r15),%rsi
mov    0x8(%r15),%r8
mov    %r14,%rcx
mov    %rbx,%rdx
xor    %r14d,%r14d
mov    -0x48(%rbp),%rbx
jmpq   24241 <get_dht+0x31>
mov    (%r15),%r8
mov    0x8(%r15),%rdi
mov    %r14,%rcx
mov    %rbx,%rdx
mov    %r13,%r9
mov    %r12,%r10
mov    -0x30(%rbp),%rax
xor    %r14d,%r14d
mov    -0x48(%rbp),%rbx
jmpq   24257 <get_dht+0x47>
cmp    $0x3,%r15d
jg     242d7 <get_dht+0xc7>
jmpq   242f3 <get_dht+0xe3>
test   %r12,%r12
jne    2440e <get_dht+0x1fe>
mov    %rax,%r12
mov    %rsi,%r13
mov    %rbx,%rdi
callq  *0x18(%r15)
test   %eax,%eax
je     24450 <get_dht+0x240>
mov    (%r15),%rax
mov    0x8(%r15),%rcx
mov    %r13,%rsi
mov    %rax,%r13
mov    %r12,%rax
mov    %rcx,%r12
mov    (%rbx),%rcx
movzbl 0x0(%r13),%edx
mov    %rdx,-0x30(%rbp)
movl   $0x50,0x28(%rcx)
mov    (%rbx),%rcx
mov    %edx,0x2c(%rcx)
mov    (%rbx),%rcx
mov    0x8(%rcx),%rcx
mov    %rbx,%rdi
mov    %rax,-0x38(%rbp)
callq  *%rcx
movb   $0x0,-0x159(%rbp)
add    $0xffffffffffffffff,%r12
add    $0x1,%r13
mov    $0x1,%ecx
mov    %r14,%rax
jmp    24490 <get_dht+0x280>
mov    %r14,%rax
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
mov    -0x28(%rbp),%r15
leaveq 
retq   
test   %r12,%r12
je     24596 <get_dht+0x386>
movzbl 0x0(%r13),%esi
movslq %ecx,%rdx
mov    %sil,-0x159(%rbp,%rdx,1)
add    $0xffffffffffffffff,%r12
add    $0x1,%ecx
add    %esi,%r14d
add    $0x1,%r13
cmp    $0x10,%ecx
jle    24469 <get_dht+0x259>
movzbl -0x158(%rbp),%eax
mov    (%rbx),%rcx
mov    %eax,0x2c(%rcx)
movzbl -0x157(%rbp),%eax
mov    %eax,0x30(%rcx)
movzbl -0x156(%rbp),%eax
mov    %eax,0x34(%rcx)
movzbl -0x155(%rbp),%eax
mov    %eax,0x38(%rcx)
movzbl -0x154(%rbp),%eax
mov    %eax,0x3c(%rcx)
movzbl -0x153(%rbp),%eax
mov    %eax,0x40(%rcx)
movzbl -0x152(%rbp),%eax
mov    %eax,0x44(%rcx)
movzbl -0x151(%rbp),%eax
mov    %eax,0x48(%rcx)
mov    (%rbx),%rax
movl   $0x56,0x28(%rax)
mov    (%rbx),%rax
mov    0x8(%rax),%rax
mov    %rbx,%rdi
mov    $0x2,%esi
callq  *%rax
movzbl -0x150(%rbp),%eax
mov    (%rbx),%rcx
mov    %eax,0x2c(%rcx)
movzbl -0x14f(%rbp),%eax
mov    %eax,0x30(%rcx)
movzbl -0x14e(%rbp),%eax
mov    %eax,0x34(%rcx)
movzbl -0x14d(%rbp),%eax
mov    %eax,0x38(%rcx)
movzbl -0x14c(%rbp),%eax
mov    %eax,0x3c(%rcx)
movzbl -0x14b(%rbp),%eax
mov    %eax,0x40(%rcx)
movzbl -0x14a(%rbp),%eax
mov    %eax,0x44(%rcx)
movzbl -0x149(%rbp),%eax
mov    %eax,0x48(%rcx)
mov    (%rbx),%rax
movl   $0x56,0x28(%rax)
mov    (%rbx),%rax
mov    0x8(%rax),%rax
mov    %rbx,%rdi
mov    $0x2,%esi
callq  *%rax
movslq %r14d,%rcx
mov    %rcx,-0x48(%rbp)
mov    -0x38(%rbp),%rax
add    $0xffffffffffffffef,%rax
mov    %rax,-0x38(%rbp)
cmp    $0x100,%r14d
jg     245c6 <get_dht+0x3b6>
cmp    %rcx,%rax
jl     245c6 <get_dht+0x3b6>
xor    %eax,%eax
jmp    24602 <get_dht+0x3f2>
mov    %rax,%r12
mov    %rcx,%r13
mov    %rbx,%rdi
callq  *0x18(%r15)
test   %eax,%eax
je     24666 <get_dht+0x456>
mov    (%r15),%rax
mov    0x8(%r15),%rcx
mov    %r12,%rdx
mov    %rcx,%r12
mov    %r13,%rcx
mov    %rax,%r13
mov    %rdx,%rax
jmpq   24472 <get_dht+0x262>
mov    (%rbx),%rax
movl   $0x8,0x28(%rax)
mov    (%rbx),%rax
mov    (%rax),%rax
mov    %rbx,%rdi
callq  *%rax
xor    %eax,%eax
jmp    24602 <get_dht+0x3f2>
test   %r12,%r12
je     2467f <get_dht+0x46f>
movzbl 0x0(%r13),%edx
movslq %eax,%rcx
mov    %dl,-0x148(%rbp,%rcx,1)
add    $0xffffffffffffffff,%r12
add    $0x1,%eax
add    $0x1,%r13
cmp    %r14d,%eax
jl     245df <get_dht+0x3cf>
mov    $0x100,%eax
sub    %r14d,%eax
movslq %eax,%rdx
mov    -0x48(%rbp),%r14
lea    -0x148(%rbp,%r14,1),%rdi
xor    %esi,%esi
callq  41e0 <memset@plt>
mov    -0x30(%rbp),%r15
mov    %r15,%rax
and    $0x10,%eax
test   %eax,%eax
jg     242ca <get_dht+0xba>
cmp    $0x3,%r15b
jbe    24659 <get_dht+0x449>
mov    (%rbx),%rax
movl   $0x1e,0x28(%rax)
mov    (%rbx),%rax
mov    %r15d,0x2c(%rax)
mov    (%rbx),%rax
mov    (%rax),%rax
mov    %rbx,%rdi
callq  *%rax
lea    0xe8(%rbx,%r15,8),%r15
jmpq   242fe <get_dht+0xee>
mov    %r12,%rax
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
mov    -0x28(%rbp),%r15
leaveq 
retq   
mov    %rax,%r13
mov    %rbx,%rdi
callq  *0x18(%r15)
test   %eax,%eax
je     246a2 <get_dht+0x492>
mov    (%r15),%rax
mov    0x8(%r15),%r12
mov    %r13,%rcx
mov    %rax,%r13
mov    %rcx,%rax
jmpq   245e8 <get_dht+0x3d8>
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
xor    %eax,%eax
mov    -0x28(%rbp),%r15
leaveq 
retq   
nopw   0x0(%rax,%rax,1)

00000000000246c0 <get_dqt>:
push   %rbp
mov    %rsp,%rbp
sub    $0x60,%rsp
mov    %r15,-0x28(%rbp)
mov    %rdi,-0x58(%rbp)
mov    0x28(%rdi),%r15
mov    %r15,-0x38(%rbp)
mov    (%r15),%rcx
xor    %eax,%eax
mov    0x8(%r15),%rdx
test   %rdx,%rdx
je     24740 <get_dqt+0x80>
mov    %r14,%rsi
mov    %r12,%r14
mov    %rdi,%r12
mov    %r13,%r8
mov    %rax,%r13
movzbl (%rcx),%eax
lea    -0x1(%rdx),%rdi
test   %rdi,%rdi
je     24766 <get_dqt+0xa6>
lea    0x1(%rcx),%r9
mov    %rbx,%r10
mov    0x498c9(%rip),%rcx        # 6dfd8 <jpeg_natural_order@@LIBJPEG_6.2+0x129f4>
mov    %rcx,-0x30(%rbp)
mov    $0x1,%ebx
lea    0x1(%r9),%rdx
lea    -0x1(%rdi),%rcx
movzbl (%r9),%edi
shl    $0x8,%eax
mov    %eax,%eax
lea    -0x2(%rdi,%rax,1),%rax
mov    %r10,-0x8(%rbp)
mov    %r14,-0x10(%rbp)
mov    %r8,-0x18(%rbp)
mov    %rsi,-0x20(%rbp)
jmp    247a2 <get_dqt+0xe2>
mov    %r14,%rax
mov    %r12,%r14
mov    %rax,%r12
callq  *0x18(%r15)
test   %eax,%eax
jne    247f7 <get_dqt+0x137>
mov    %r14,%rcx
mov    %r12,%r14
mov    %rcx,%r12
xor    %eax,%eax
mov    -0x28(%rbp),%r15
leaveq 
retq   
mov    %rax,-0x60(%rbp)
mov    %r12,%rdi
mov    %rsi,%r12
mov    %r8,%r13
callq  *0x18(%r15)
test   %eax,%eax
jne    24810 <get_dqt+0x150>
mov    %r14,%rcx
mov    %r12,%r14
mov    %rcx,%r12
xor    %eax,%eax
mov    -0x28(%rbp),%r15
leaveq 
retq   
mov    -0x60(%rbp),%rax
add    $0xffffffffffffff7f,%rax
mov    $0x1,%ebx
xor    %r13d,%r13d
mov    %rax,-0x60(%rbp)
test   %rax,%rax
jg     24830 <get_dqt+0x170>
test   %rax,%rax
jns    247d7 <get_dqt+0x117>
mov    (%r12),%rax
movl   $0xb,0x28(%rax)
mov    (%r12),%rax
mov    (%rax),%rax
mov    %r12,%rdi
mov    %rcx,%r12
mov    %rdx,%r13
callq  *%rax
mov    %r12,%rcx
mov    %r13,%rdx
mov    %rdx,(%r15)
mov    %rcx,0x8(%r15)
mov    %rbx,%rax
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
mov    -0x28(%rbp),%r15
leaveq 
retq   
mov    (%r15),%rcx
mov    0x8(%r15),%rdx
mov    %r12,%rsi
mov    %r13,%r8
xor    %r13d,%r13d
mov    -0x58(%rbp),%r12
jmpq   246f5 <get_dqt+0x35>
mov    (%r15),%r9
mov    0x8(%r15),%rdi
mov    %r12,%rsi
mov    %r13,%r8
mov    %rbx,%r10
mov    -0x60(%rbp),%rax
xor    %r13d,%r13d
mov    -0x58(%rbp),%r12
jmpq   24708 <get_dqt+0x48>
test   %rcx,%rcx
je     248e5 <get_dqt+0x225>
mov    (%r12),%rax
movzbl (%rdx),%r13d
movl   $0x51,0x28(%rax)
mov    %r13,%r8
and    $0xf,%r8d
mov    (%r12),%rax
mov    %r8d,0x2c(%rax)
mov    %r13,%rsi
shr    $0x4,%esi
mov    (%r12),%rax
mov    %esi,0x30(%rax)
mov    (%r12),%rax
mov    0x8(%rax),%rax
mov    %rbx,%rsi
mov    %r8,%rbx
mov    %rcx,%r14
mov    %rdx,%r15
mov    %r12,%rdi
callq  *%rax
cmp    $0x3,%ebx
jle    248a0 <get_dqt+0x1e0>
mov    (%r12),%rax
movl   $0x1f,0x28(%rax)
mov    (%r12),%rax
mov    %ebx,0x2c(%rax)
mov    (%r12),%rax
mov    (%rax),%rax
mov    %r12,%rdi
callq  *%rax
movslq %ebx,%rbx
mov    0xc8(%r12,%rbx,8),%rax
test   %rax,%rax
jne    248c0 <get_dqt+0x200>
mov    %r12,%rdi
callq  4270 <jpeg_alloc_quant_table@plt>
mov    %rax,0xc8(%r12,%rbx,8)
mov    0xc8(%r12,%rbx,8),%rbx
and    $0xfffffff0,%r13d
mov    %r13,-0x40(%rbp)
lea    -0x1(%r14),%rcx
lea    0x1(%r15),%rdx
mov    -0x30(%rbp),%rax
mov    -0x38(%rbp),%r15
xor    %r14d,%r14d
jmp    24948 <get_dqt+0x288>
mov    %r12,%rdi
callq  *0x18(%r15)
test   %eax,%eax
je     24975 <get_dqt+0x2b5>
mov    (%r15),%rdx
mov    0x8(%r15),%rcx
jmpq   24839 <get_dqt+0x179>
test   %r13d,%r13d
jg     2498e <get_dqt+0x2ce>
test   %rcx,%rcx
jne    2492a <get_dqt+0x26a>
mov    %r12,%rdi
mov    %rax,%r12
callq  *0x18(%r15)
test   %eax,%eax
je     249dc <get_dqt+0x31c>
mov    (%r15),%rdx
mov    0x8(%r15),%rcx
mov    %r12,%rax
movzbl (%rdx),%esi
add    $0xffffffffffffffff,%rcx
add    $0x1,%rdx
movslq %r14d,%rdi
movslq (%rax,%rdi,4),%rdi
mov    %si,(%rbx,%rdi,2)
add    $0x1,%r14d
mov    -0x58(%rbp),%r12
cmp    $0x3f,%r14d
jle    24900 <get_dqt+0x240>
mov    (%r12),%rax
movslq 0x7c(%rax),%rax
cmp    $0x1,%eax
jle    24a99 <get_dqt+0x3d9>
mov    %rcx,-0x50(%rbp)
mov    %rdx,-0x48(%rbp)
mov    $0x2,%r13d
xor    %r14d,%r14d
jmpq   24a83 <get_dqt+0x3c3>
mov    %r13,%rax
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
mov    -0x28(%rbp),%r15
leaveq 
retq   
test   %rcx,%rcx
jne    249b3 <get_dqt+0x2f3>
mov    %rax,%r13
mov    %r12,%rdi
callq  *0x18(%r15)
test   %eax,%eax
je     24ab7 <get_dqt+0x3f7>
mov    (%r15),%rdx
mov    0x8(%r15),%rcx
mov    %r13,%rax
mov    -0x40(%rbp),%r13
movzbl (%rdx),%esi
add    $0xffffffffffffffff,%rcx
test   %rcx,%rcx
je     24acf <get_dqt+0x40f>
add    $0x1,%rdx
movzbl (%rdx),%edi
shl    $0x8,%esi
add    %edi,%esi
add    $0xffffffffffffffff,%rcx
add    $0x1,%rdx
jmpq   24935 <get_dqt+0x275>
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
xor    %eax,%eax
mov    -0x28(%rbp),%r15
leaveq 
retq   
movslq %r14d,%rax
movzwl (%rbx,%rax,2),%eax
mov    (%r12),%rcx
mov    %eax,0x2c(%rcx)
lea    0x1(%r14),%eax
movslq %eax,%rax
movzwl (%rbx,%rax,2),%eax
mov    %eax,0x30(%rcx)
lea    0x2(%r14),%eax
movslq %eax,%rax
movzwl (%rbx,%rax,2),%eax
mov    %eax,0x34(%rcx)
lea    0x3(%r14),%eax
movslq %eax,%rax
movzwl (%rbx,%rax,2),%eax
mov    %eax,0x38(%rcx)
lea    0x4(%r14),%eax
movslq %eax,%rax
movzwl (%rbx,%rax,2),%eax
mov    %eax,0x3c(%rcx)
lea    0x5(%r14),%eax
movslq %eax,%rax
movzwl (%rbx,%rax,2),%eax
mov    %eax,0x40(%rcx)
lea    0x6(%r14),%eax
movslq %eax,%rax
movzwl (%rbx,%rax,2),%eax
mov    %eax,0x44(%rcx)
lea    0x7(%r14),%eax
movslq %eax,%rax
movzwl (%rbx,%rax,2),%eax
mov    %eax,0x48(%rcx)
mov    (%r12),%rax
movl   $0x5d,0x28(%rax)
mov    (%r12),%rax
mov    0x8(%rax),%rax
mov    %r12,%rdi
mov    %r13,%rsi
callq  *%rax
add    $0x8,%r14d
cmp    $0x38,%r14d
jle    249f4 <get_dqt+0x334>
mov    -0x48(%rbp),%rdx
mov    -0x50(%rbp),%rcx
mov    -0x40(%rbp),%r13
test   %r13d,%r13d
jg     24790 <get_dqt+0xd0>
mov    -0x60(%rbp),%rax
add    $0xffffffffffffffbf,%rax
mov    $0x1,%ebx
xor    %r13d,%r13d
jmpq   247a2 <get_dqt+0xe2>
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
xor    %eax,%eax
mov    -0x28(%rbp),%r15
leaveq 
retq   
mov    %r12,%rdi
mov    %rax,%r12
mov    %rsi,%r13
callq  *0x18(%r15)
test   %eax,%eax
je     24af6 <get_dqt+0x436>
mov    (%r15),%rdx
mov    0x8(%r15),%rcx
mov    %r12,%rax
mov    %r13,%rsi
mov    -0x40(%rbp),%r13
jmpq   249c7 <get_dqt+0x307>
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
xor    %eax,%eax
mov    -0x28(%rbp),%r15
leaveq 
retq   
xchg   %ax,%ax

0000000000024b10 <get_dri>:
push   %rbp
mov    %rsp,%rbp
sub    $0x30,%rsp
mov    %r15,-0x20(%rbp)
mov    %rdi,-0x30(%rbp)
mov    0x28(%rdi),%r15
mov    (%r15),%rcx
mov    0x8(%r15),%rax
test   %rax,%rax
je     24c3e <get_dri+0x12e>
movzbl (%rcx),%edx
add    $0xffffffffffffffff,%rax
test   %rax,%rax
je     24c4e <get_dri+0x13e>
add    $0x1,%rcx
movzbl (%rcx),%esi
shl    $0x8,%edx
mov    %edx,%edx
add    %rsi,%rdx
cmp    $0x4,%rdx
je     24b9b <get_dri+0x8b>
mov    (%rdi),%rdx
movl   $0xb,0x28(%rdx)
mov    (%rdi),%rdx
mov    (%rdx),%rdx
mov    %rdi,%rsi
mov    %r12,-0x10(%rbp)
mov    %r13,-0x18(%rbp)
mov    %r14,-0x28(%rbp)
mov    %rax,%r12
mov    %rcx,%r13
mov    %rdi,%r14
mov    %rsi,%rdi
callq  *%rdx
mov    %r12,%rax
mov    %r13,%rcx
mov    %r14,%rdi
mov    -0x28(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
lea    -0x1(%rax),%rdx
test   %rdx,%rdx
je     24c62 <get_dri+0x152>
add    $0x1,%rcx
movzbl (%rcx),%eax
add    $0xffffffffffffffff,%rdx
test   %rdx,%rdx
je     24c72 <get_dri+0x162>
add    $0x1,%rcx
mov    (%rdi),%rsi
movzbl (%rcx),%r8d
movl   $0x52,0x28(%rsi)
shl    $0x8,%eax
lea    (%r8,%rax,1),%r9d
mov    (%rdi),%rax
mov    %r9d,0x2c(%rax)
mov    (%rdi),%rax
mov    0x8(%rax),%rax
mov    $0x1,%esi
mov    %rdi,%r8
mov    %r12,-0x10(%rbp)
mov    %r13,-0x18(%rbp)
mov    %r14,-0x30(%rbp)
mov    %rbx,-0x8(%rbp)
mov    %r9,%rbx
mov    %rdi,%r12
mov    %r8,%rdi
mov    %rdx,%r13
mov    %rcx,%r14
callq  *%rax
mov    %ebx,0x170(%r12)
lea    0x1(%r14),%rax
mov    %rax,(%r15)
lea    -0x1(%r13),%rax
mov    %rax,0x8(%r15)
mov    $0x1,%eax
mov    -0x8(%rbp),%rbx
mov    -0x30(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x20(%rbp),%r15
leaveq 
retq   
callq  *0x18(%r15)
test   %eax,%eax
jne    24c86 <get_dri+0x176>
xor    %eax,%eax
mov    -0x20(%rbp),%r15
leaveq 
retq   
mov    %rdx,-0x28(%rbp)
callq  *0x18(%r15)
test   %eax,%eax
jne    24c96 <get_dri+0x186>
xor    %eax,%eax
mov    -0x20(%rbp),%r15
leaveq 
retq   
callq  *0x18(%r15)
test   %eax,%eax
jne    24caa <get_dri+0x19a>
xor    %eax,%eax
mov    -0x20(%rbp),%r15
leaveq 
retq   
mov    %rax,-0x8(%rbp)
callq  *0x18(%r15)
test   %eax,%eax
jne    24cba <get_dri+0x1aa>
xor    %eax,%eax
mov    -0x20(%rbp),%r15
leaveq 
retq   
mov    (%r15),%rcx
mov    0x8(%r15),%rax
mov    -0x30(%rbp),%rdi
jmpq   24b34 <get_dri+0x24>
mov    (%r15),%rcx
mov    0x8(%r15),%rax
mov    -0x28(%rbp),%rdx
mov    -0x30(%rbp),%rdi
jmpq   24b48 <get_dri+0x38>
mov    (%r15),%rcx
mov    0x8(%r15),%rdx
mov    -0x30(%rbp),%rdi
jmpq   24bac <get_dri+0x9c>
mov    (%r15),%rcx
mov    0x8(%r15),%rdx
mov    -0x8(%rbp),%rax
mov    -0x30(%rbp),%rdi
jmpq   24bc0 <get_dri+0xb0>
xchg   %ax,%ax

0000000000024cd0 <examine_app0>:
push   %rbp
mov    %rsp,%rbp
sub    $0x20,%rsp
mov    %edx,%eax
add    %rcx,%rax
mov    $0x1,%r8d
cmp    $0xd,%edx
ja     24d0f <examine_app0+0x3f>
cmp    $0x5,%edx
ja     24da4 <examine_app0+0xd4>
mov    (%rdi),%rcx
movl   $0x4d,0x28(%rcx)
mov    (%rdi),%rcx
mov    %eax,0x2c(%rcx)
mov    (%rdi),%rax
mov    0x8(%rax),%rax
mov    %r8,%rsi
callq  *%rax
leaveq 
retq   
movzbl (%rsi),%ecx
cmp    $0x4a,%cl
jne    24ce8 <examine_app0+0x18>
movzbl 0x1(%rsi),%ecx
cmp    $0x46,%cl
jne    24ce8 <examine_app0+0x18>
movzbl 0x2(%rsi),%ecx
cmp    $0x49,%cl
jne    24ce8 <examine_app0+0x18>
movzbl 0x3(%rsi),%ecx
cmp    $0x46,%cl
jne    24ce8 <examine_app0+0x18>
movzbl 0x4(%rsi),%ecx
test   %cl,%cl
jne    24ce8 <examine_app0+0x18>
movl   $0x1,0x174(%rdi)
movzbl 0x5(%rsi),%r9d
mov    %r9b,0x178(%rdi)
movzbl 0x6(%rsi),%ecx
mov    %cl,0x179(%rdi)
movzbl 0x7(%rsi),%ecx
mov    %cl,0x17a(%rdi)
movzbl 0x9(%rsi),%edx
movzbl 0x8(%rsi),%ecx
shl    $0x8,%ecx
add    %edx,%ecx
mov    %cx,0x17c(%rdi)
movzbl 0xb(%rsi),%edx
movzbl 0xa(%rsi),%ecx
shl    $0x8,%ecx
add    %edx,%ecx
mov    %cx,0x17e(%rdi)
cmp    $0x1,%r9b
jne    24e20 <examine_app0+0x150>
mov    %r8,%rcx
mov    %rsi,%r8
mov    %rcx,%rsi
jmpq   24e8c <examine_app0+0x1bc>
movzbl (%rsi),%ecx
cmp    $0x4a,%cl
jne    24cf1 <examine_app0+0x21>
movzbl 0x1(%rsi),%ecx
cmp    $0x46,%cl
jne    24cf1 <examine_app0+0x21>
movzbl 0x2(%rsi),%ecx
cmp    $0x58,%cl
jne    24cf1 <examine_app0+0x21>
movzbl 0x3(%rsi),%ecx
cmp    $0x58,%cl
jne    24cf1 <examine_app0+0x21>
movzbl 0x4(%rsi),%ecx
test   %cl,%cl
jne    24cf1 <examine_app0+0x21>
movzbl 0x5(%rsi),%ecx
cmp    $0x10,%cl
jbe    24f59 <examine_app0+0x289>
cmp    $0x11,%cl
je     24f86 <examine_app0+0x2b6>
cmp    $0x13,%cl
jne    24f5e <examine_app0+0x28e>
mov    (%rdi),%rcx
movl   $0x6e,0x28(%rcx)
mov    (%rdi),%rcx
mov    %eax,0x2c(%rcx)
mov    (%rdi),%rax
mov    0x8(%rax),%rax
mov    %r8,%rsi
callq  *%rax
leaveq 
retq   
mov    (%rdi),%rcx
movl   $0x77,0x28(%rcx)
movzbl 0x178(%rdi),%edx
mov    (%rdi),%rcx
mov    %edx,0x2c(%rcx)
movzbl 0x179(%rdi),%edx
mov    (%rdi),%rcx
mov    %edx,0x30(%rcx)
mov    (%rdi),%rcx
mov    0x8(%rcx),%rcx
mov    $0xffffffffffffffff,%r8
mov    %rdi,%rdx
mov    %r13,-0x8(%rbp)
mov    %r14,-0x10(%rbp)
mov    %r15,-0x18(%rbp)
mov    %rsi,%r13
mov    %r8,%rsi
mov    %rdi,%r14
mov    %rdx,%rdi
mov    %rax,%r15
callq  *%rcx
mov    %r15,%rax
mov    %r14,%rdi
mov    %r13,%r8
mov    $0x1,%esi
mov    -0x18(%rbp),%r15
mov    -0x10(%rbp),%r14
mov    -0x8(%rbp),%r13
movzbl 0x178(%rdi),%ecx
mov    (%rdi),%rdx
mov    %ecx,0x2c(%rdx)
movzbl 0x179(%rdi),%ecx
mov    %ecx,0x30(%rdx)
movzwl 0x17c(%rdi),%ecx
mov    %ecx,0x34(%rdx)
movzwl 0x17e(%rdi),%ecx
mov    %ecx,0x38(%rdx)
movzbl 0x17a(%rdi),%ecx
mov    %ecx,0x3c(%rdx)
mov    (%rdi),%rcx
movl   $0x57,0x28(%rcx)
mov    (%rdi),%rcx
mov    0x8(%rcx),%rcx
mov    %rdi,%rdx
mov    %r13,-0x8(%rbp)
mov    %r14,-0x10(%rbp)
mov    %r15,-0x18(%rbp)
mov    %r8,%r13
mov    %rax,%r14
mov    %rdi,%r15
mov    %rdx,%rdi
callq  *%rcx
movzbl 0xd(%r13),%eax
movzbl 0xc(%r13),%ecx
or     %cl,%al
test   %al,%al
je     24f30 <examine_app0+0x260>
mov    (%r15),%rax
movl   $0x5a,0x28(%rax)
movzbl 0xc(%r13),%ecx
mov    (%r15),%rax
mov    %ecx,0x2c(%rax)
movzbl 0xd(%r13),%ecx
mov    (%r15),%rax
mov    %ecx,0x30(%rax)
mov    (%r15),%rax
mov    0x8(%rax),%rax
mov    %r15,%rdi
mov    $0x1,%esi
callq  *%rax
movzbl 0xd(%r13),%eax
movzbl 0xc(%r13),%ecx
imul   %rcx,%rax
lea    (%rax,%rax,2),%rax
lea    -0xe(%r14),%rcx
cmp    %rax,%rcx
jne    24fa4 <examine_app0+0x2d4>
mov    -0x18(%rbp),%r15
mov    -0x10(%rbp),%r14
mov    -0x8(%rbp),%r13
leaveq 
retq   
cmp    $0x10,%cl
je     24fd3 <examine_app0+0x303>
mov    (%rdi),%rcx
movl   $0x59,0x28(%rcx)
movzbl 0x5(%rsi),%edx
mov    (%rdi),%rcx
mov    %edx,0x2c(%rcx)
mov    (%rdi),%rcx
mov    %eax,0x30(%rcx)
mov    (%rdi),%rax
mov    0x8(%rax),%rax
mov    %r8,%rsi
callq  *%rax
leaveq 
retq   
mov    (%rdi),%rcx
movl   $0x6d,0x28(%rcx)
mov    (%rdi),%rcx
mov    %eax,0x2c(%rcx)
mov    (%rdi),%rax
mov    0x8(%rax),%rax
mov    %r8,%rsi
callq  *%rax
leaveq 
retq   
mov    (%r15),%rax
movl   $0x58,0x28(%rax)
mov    (%r15),%rax
mov    %ecx,0x2c(%rax)
mov    (%r15),%rax
mov    0x8(%rax),%rax
mov    %r15,%rdi
mov    $0x1,%esi
callq  *%rax
mov    -0x18(%rbp),%r15
mov    -0x10(%rbp),%r14
mov    -0x8(%rbp),%r13
leaveq 
retq   
mov    (%rdi),%rcx
movl   $0x6c,0x28(%rcx)
mov    (%rdi),%rcx
mov    %eax,0x2c(%rcx)
mov    (%rdi),%rax
mov    0x8(%rax),%rax
mov    %r8,%rsi
callq  *%rax
leaveq 
retq   
data16 nopw %cs:0x0(%rax,%rax,1)
nopl   0x0(%rax)

0000000000025000 <examine_app14>:
push   %rbp
mov    %rsp,%rbp
sub    $0x10,%rsp
mov    $0x1,%r10d
cmp    $0xb,%edx
ja     25033 <examine_app14+0x33>
mov    (%rdi),%rax
movl   $0x4e,0x28(%rax)
add    %edx,%ecx
mov    (%rdi),%rax
mov    %ecx,0x2c(%rax)
mov    (%rdi),%rax
mov    0x8(%rax),%rax
mov    %r10,%rsi
callq  *%rax
leaveq 
retq   
movzbl (%rsi),%eax
cmp    $0x41,%al
jne    25013 <examine_app14+0x13>
movzbl 0x1(%rsi),%eax
cmp    $0x64,%al
jne    25013 <examine_app14+0x13>
movzbl 0x2(%rsi),%eax
cmp    $0x6f,%al
jne    25013 <examine_app14+0x13>
movzbl 0x3(%rsi),%eax
cmp    $0x62,%al
jne    25013 <examine_app14+0x13>
movzbl 0x4(%rsi),%eax
cmp    $0x65,%al
jne    25013 <examine_app14+0x13>
movzbl 0x6(%rsi),%ecx
movzbl 0x5(%rsi),%eax
shl    $0x8,%eax
lea    (%rcx,%rax,1),%r9d
mov    (%rdi),%r8
movzbl 0x8(%rsi),%ecx
movzbl 0x7(%rsi),%eax
shl    $0x8,%eax
lea    (%rcx,%rax,1),%edx
movzbl 0xa(%rsi),%ecx
movzbl 0x9(%rsi),%eax
shl    $0x8,%eax
add    %ecx,%eax
movzbl 0xb(%rsi),%ecx
mov    %r9d,0x2c(%r8)
mov    %edx,0x30(%r8)
mov    %eax,0x34(%r8)
mov    %ecx,0x38(%r8)
mov    (%rdi),%rax
movl   $0x4c,0x28(%rax)
mov    (%rdi),%rax
mov    0x8(%rax),%rax
mov    %rdi,%rdx
mov    %r14,-0x8(%rbp)
mov    %r15,-0x10(%rbp)
mov    %r10,%rsi
mov    %rcx,%r14
mov    %rdi,%r15
mov    %rdx,%rdi
callq  *%rax
movl   $0x1,0x180(%r15)
mov    %r14b,0x184(%r15)
mov    -0x10(%rbp),%r15
mov    -0x8(%rbp),%r14
leaveq 
retq   
data16 nopw %cs:0x0(%rax,%rax,1)
nopl   0x0(%rax)

00000000000250f0 <get_interesting_appn>:
push   %rbp
mov    %rsp,%rbp
sub    $0x40,%rsp
mov    %r15,-0x20(%rbp)
mov    0x28(%rdi),%r15
mov    (%r15),%rax
xor    %ecx,%ecx
mov    0x8(%r15),%r8
test   %r8,%r8
je     25170 <get_interesting_appn+0x80>
mov    %rbx,%rsi
mov    %rdi,%rbx
mov    %r14,%rdi
mov    %r12,%r14
mov    %rcx,%r12
mov    %rdi,%rcx
movzbl (%rax),%edx
add    $0xffffffffffffffff,%r8
test   %r8,%r8
je     251a0 <get_interesting_appn+0xb0>
lea    0x1(%rax),%rdi
mov    %r13,%r9
lea    0x1(%rdi),%rax
add    $0xffffffffffffffff,%r8
movzbl (%rdi),%edi
shl    $0x8,%edx
mov    %edx,%edx
lea    -0x2(%rdi,%rdx,1),%r13
mov    %r13,-0x30(%rbp)
cmp    $0xd,%r13
jle    251ce <get_interesting_appn+0xde>
mov    $0xe,%r13d
mov    %rsi,-0x8(%rbp)
mov    %r14,-0x10(%rbp)
mov    %r9,-0x18(%rbp)
mov    %rcx,-0x28(%rbp)
mov    %r12,%r14
jmpq   2520e <get_interesting_appn+0x11e>
mov    %rdi,%rax
mov    %rdi,-0x30(%rbp)
mov    %rax,%rdi
mov    %r14,%rax
mov    %r12,%r14
mov    %rax,%r12
callq  *0x18(%r15)
test   %eax,%eax
jne    2526a <get_interesting_appn+0x17a>
mov    %r14,%rcx
mov    %r12,%r14
mov    %rcx,%r12
xor    %eax,%eax
mov    -0x20(%rbp),%r15
leaveq 
retq   
mov    %rbx,%rdi
mov    %rbx,-0x28(%rbp)
mov    %rdx,-0x30(%rbp)
mov    %rsi,%rbx
mov    %rcx,%r12
callq  *0x18(%r15)
test   %eax,%eax
jne    25283 <get_interesting_appn+0x193>
mov    %r14,%rcx
mov    %r12,%r14
mov    %rcx,%r12
xor    %eax,%eax
mov    -0x20(%rbp),%r15
leaveq 
retq   
test   %r13,%r13
jg     252a3 <get_interesting_appn+0x1b3>
mov    %rsi,-0x8(%rbp)
mov    %r14,-0x10(%rbp)
mov    %r9,-0x18(%rbp)
mov    %rcx,-0x28(%rbp)
mov    %r12,%r13
mov    %r13,%r14
jmp    2520e <get_interesting_appn+0x11e>
test   %r8,%r8
je     252bb <get_interesting_appn+0x1cb>
movzbl (%rax),%edx
mov    %r14d,%ecx
mov    %dl,-0x3e(%rbp,%rcx,1)
add    $0x1,%rax
add    $0xffffffffffffffff,%r8
add    $0x1,%r14d
cmp    %r13d,%r14d
jb     251ef <get_interesting_appn+0xff>
mov    %r13d,%ecx
mov    -0x30(%rbp),%r12
sub    %rcx,%r12
lea    -0x3e(%rbp),%rsi
movslq 0x21c(%rbx),%rcx
cmp    $0xe0,%ecx
je     252d2 <get_interesting_appn+0x1e2>
cmp    $0xee,%ecx
je     2530d <get_interesting_appn+0x21d>
mov    (%rbx),%rcx
movl   $0x44,0x28(%rcx)
movslq 0x21c(%rbx),%rdx
mov    (%rbx),%rcx
mov    %edx,0x2c(%rcx)
mov    (%rbx),%rcx
mov    (%rcx),%rcx
mov    %r8,%r13
mov    %rax,%r14
mov    %rbx,%rdi
callq  *%rcx
jmp    252e6 <get_interesting_appn+0x1f6>
mov    (%r15),%rax
mov    0x8(%r15),%r8
mov    %r12,%rcx
mov    %rbx,%rsi
xor    %r12d,%r12d
mov    -0x30(%rbp),%rbx
jmpq   25120 <get_interesting_appn+0x30>
mov    (%r15),%rdi
mov    0x8(%r15),%r8
mov    %r12,%rcx
mov    %rbx,%rsi
mov    %r13,%r9
mov    -0x30(%rbp),%rdx
xor    %r12d,%r12d
mov    -0x28(%rbp),%rbx
jmpq   25133 <get_interesting_appn+0x43>
mov    %rsi,-0x8(%rbp)
mov    %r14,-0x10(%rbp)
mov    %r9,-0x18(%rbp)
mov    %rcx,-0x28(%rbp)
mov    %r12,%r14
jmpq   2520e <get_interesting_appn+0x11e>
mov    %rbx,%rdi
callq  *0x18(%r15)
test   %eax,%eax
je     25323 <get_interesting_appn+0x233>
mov    (%r15),%rax
mov    0x8(%r15),%r8
jmpq   251f8 <get_interesting_appn+0x108>
mov    %r13,%rdx
mov    %r8,%r13
mov    %rax,%r14
mov    %rbx,%rdi
mov    %r12,%rcx
callq  24cd0 <examine_app0>
mov    %r14,(%r15)
mov    %r13,0x8(%r15)
mov    $0x1,%eax
test   %r12,%r12
jg     2533c <get_interesting_appn+0x24c>
mov    -0x28(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
mov    -0x20(%rbp),%r15
leaveq 
retq   
mov    %r13,%rdx
mov    %r8,%r13
mov    %rax,%r14
mov    %rbx,%rdi
mov    %r12,%rcx
callq  25000 <examine_app14>
jmp    252e6 <get_interesting_appn+0x1f6>
mov    %r12,%rax
mov    -0x28(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
mov    -0x20(%rbp),%r15
leaveq 
retq   
mov    0x28(%rbx),%rcx
mov    0x20(%rcx),%rcx
mov    %r12,%rsi
mov    %rbx,%rdi
mov    %rax,%r15
callq  *%rcx
mov    %r15,%rax
mov    -0x28(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
mov    -0x20(%rbp),%r15
leaveq 
retq   
nopl   0x0(%rax,%rax,1)

0000000000025370 <save_marker>:
push   %rbp
mov    %rsp,%rbp
sub    $0x60,%rsp
mov    %r15,-0x28(%rbp)
mov    %rdi,-0x58(%rbp)
mov    0x28(%rdi),%r10
mov    (%r10),%rax
mov    0x8(%r10),%r8
xor    %r15d,%r15d
mov    %r15,-0x40(%rbp)
mov    $0x1,%esi
mov    0x248(%rdi),%r9
mov    0xf8(%r9),%rcx
mov    %rcx,-0x38(%rbp)
test   %rcx,%rcx
je     253e0 <save_marker+0x70>
mov    0x10(%rcx),%edx
mov    0x100(%r9),%esi
mov    %rsi,%r15
add    0x18(%rcx),%r15
mov    %r14,-0x20(%rbp)
mov    %r13,-0x18(%rbp)
mov    %rbx,-0x8(%rbp)
mov    %r12,-0x10(%rbp)
mov    %rsi,%rbx
mov    %r10,%r12
mov    %r9,%r13
mov    %rdx,%r14
jmpq   25480 <save_marker+0x110>
test   %r8,%r8
je     2549f <save_marker+0x12f>
mov    %r14,%rcx
mov    %rbx,%r14
mov    %r13,%rbx
mov    %r9,%r13
mov    %r12,%r9
mov    %r10,%r12
movzbl (%rax),%edx
add    $0xffffffffffffffff,%r8
test   %r8,%r8
je     254d9 <save_marker+0x169>
lea    0x1(%rax),%r10
mov    %r14,%r11
lea    0x1(%r10),%rax
add    $0xffffffffffffffff,%r8
movzbl (%r10),%r10d
shl    $0x8,%edx
mov    %edx,%edx
lea    -0x2(%r10,%rdx,1),%r10
mov    %r10,-0x30(%rbp)
test   %r10,%r10
jns    2550b <save_marker+0x19b>
mov    %rcx,-0x20(%rbp)
mov    %rbx,-0x18(%rbp)
mov    %r11,-0x8(%rbp)
mov    %r9,-0x10(%rbp)
mov    %r15,%rbx
mov    %rbx,%r14
pushq  -0x30(%rbp)
pushq  -0x40(%rbp)
popq   -0x38(%rbp)
popq   -0x40(%rbp)
jmp    25480 <save_marker+0x110>
test   %r8,%r8
je     25534 <save_marker+0x1c4>
movzbl (%rax),%ecx
mov    %cl,(%r15)
add    $0x1,%ebx
add    $0x1,%rax
add    $0xffffffffffffffff,%r8
add    $0x1,%r15
cmp    %r14d,%ebx
jb     25459 <save_marker+0xe9>
mov    -0x58(%rbp),%rdi
cmp    %r14d,%ebx
jb     25540 <save_marker+0x1d0>
mov    -0x38(%rbp),%rsi
test   %rsi,%rsi
jne    25574 <save_marker+0x204>
mov    -0x40(%rbp),%rbx
jmpq   255a3 <save_marker+0x233>
mov    %r9,-0x50(%rbp)
mov    %r12,%r15
mov    %r10,%r12
mov    %r13,%r10
mov    %r14,%r13
mov    %rbx,%r14
mov    %r10,%rbx
callq  *0x18(%r12)
test   %eax,%eax
jne    2560a <save_marker+0x29a>
mov    %r15,%r12
mov    %r14,%r15
mov    %r13,%r14
mov    %rbx,%r13
mov    %r15,%rbx
xor    %eax,%eax
mov    -0x28(%rbp),%r15
leaveq 
retq   
mov    %r13,-0x48(%rbp)
mov    %rdx,-0x50(%rbp)
mov    %rcx,%r13
mov    %r9,%r15
callq  *0x18(%r12)
test   %eax,%eax
jne    2562e <save_marker+0x2be>
mov    %r15,%r12
mov    %r14,%r15
mov    %r13,%r14
mov    %rbx,%r13
mov    %r15,%rbx
xor    %eax,%eax
mov    -0x28(%rbp),%r15
leaveq 
retq   
movslq 0x21c(%rdi),%rdx
cmp    $0xfe,%edx
je     25659 <save_marker+0x2e9>
add    $0xffffff20,%edx
movslq %edx,%rdx
mov    0xb4(%r13,%rdx,4),%r14d
jmpq   25660 <save_marker+0x2f0>
xor    %r8d,%r8d
mov    -0x58(%rbp),%rdi
jmpq   25480 <save_marker+0x110>
mov    %rax,(%r12)
mov    %r8,0x8(%r12)
mov    %ebx,0x100(%r13)
test   %r8,%r8
jne    25477 <save_marker+0x107>
callq  *0x18(%r12)
test   %eax,%eax
je     256f5 <save_marker+0x385>
mov    (%r12),%rax
mov    0x8(%r12),%r8
jmpq   25477 <save_marker+0x107>
mov    0x190(%rdi),%rcx
test   %rcx,%rcx
jne    2558c <save_marker+0x21c>
mov    %rsi,0x190(%rdi)
jmp    25597 <save_marker+0x227>
mov    %rdx,%rcx
mov    (%rcx),%rdx
test   %rdx,%rdx
jne    25589 <save_marker+0x219>
mov    %rsi,(%rcx)
mov    0x18(%rsi),%r15
mov    0xc(%rsi),%ecx
sub    %r14d,%ecx
mov    %ecx,%ebx
movq   $0x0,0xf8(%r13)
movslq 0x21c(%rdi),%rcx
cmp    $0xe0,%ecx
je     2570d <save_marker+0x39d>
cmp    $0xee,%ecx
je     2574d <save_marker+0x3dd>
mov    (%rdi),%rcx
movl   $0x5b,0x28(%rcx)
movslq 0x21c(%rdi),%rdx
mov    (%rdi),%rcx
mov    %edx,0x2c(%rcx)
lea    (%rbx,%r14,1),%edx
mov    (%rdi),%rcx
mov    %edx,0x30(%rcx)
mov    (%rdi),%rcx
mov    0x8(%rcx),%rcx
mov    %rax,%r14
mov    %r8,%r15
mov    %rdi,%r13
mov    $0x1,%esi
callq  *%rcx
jmpq   25724 <save_marker+0x3b4>
mov    (%r12),%rax
mov    0x8(%r12),%r8
mov    %r13,%rcx
mov    %r15,%r9
xor    %r15d,%r15d
mov    -0x50(%rbp),%r13
mov    -0x58(%rbp),%rdi
mov    $0x1,%esi
jmpq   253fb <save_marker+0x8b>
mov    (%r12),%r10
mov    0x8(%r12),%r8
mov    %r13,%rcx
mov    %r15,%r9
mov    %r14,%r11
mov    -0x50(%rbp),%rdx
xor    %r15d,%r15d
mov    -0x48(%rbp),%r13
mov    -0x58(%rbp),%rdi
mov    $0x1,%esi
jmpq   25412 <save_marker+0xa2>
mov    0xb0(%r13),%r14d
cmp    %r10d,%r14d
jbe    25668 <save_marker+0x2f8>
mov    %r10,%r14
mov    0x8(%rdi),%rdx
mov    0x8(%rdx),%r15
mov    %rcx,-0x20(%rbp)
mov    %r14d,%ecx
lea    0x20(%rcx),%rdx
mov    %rbx,-0x18(%rbp)
mov    %rdi,%rcx
mov    %r8,-0x48(%rbp)
mov    %r12,-0x40(%rbp)
mov    %r11,-0x8(%rbp)
mov    %r9,-0x10(%rbp)
mov    %rdi,%rbx
mov    %rcx,%rdi
mov    %rax,%r12
mov    %r15,%rax
mov    %r10,%r15
callq  *%rax
mov    %rax,-0x38(%rbp)
movq   $0x0,(%rax)
movzbl 0x21c(%rbx),%ecx
mov    %cl,0x8(%rax)
mov    %r15d,0xc(%rax)
mov    %r14d,0x10(%rax)
lea    0x20(%rax),%r15
mov    %r15,0x18(%rax)
mov    %rax,0xf8(%r13)
movl   $0x0,0x100(%r13)
mov    %r12,%rax
mov    %rbx,%rdi
mov    -0x40(%rbp),%r12
mov    -0x48(%rbp),%r8
xor    %ebx,%ebx
pushq  -0x30(%rbp)
popq   -0x40(%rbp)
jmpq   25480 <save_marker+0x110>
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
mov    -0x18(%rbp),%r13
mov    -0x20(%rbp),%r14
xor    %eax,%eax
mov    -0x28(%rbp),%r15
leaveq 
retq   
mov    %r14,%rdx
mov    %rax,%r14
mov    %r15,%rsi
mov    %r8,%r15
mov    %rdi,%r13
mov    %rbx,%rcx
callq  24cd0 <examine_app0>
mov    %r14,(%r12)
mov    %r15,0x8(%r12)
test   %rbx,%rbx
jg     25766 <save_marker+0x3f6>
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
mov    -0x18(%rbp),%r13
mov    -0x20(%rbp),%r14
mov    -0x28(%rbp),%r15
mov    $0x1,%eax
leaveq 
retq   
mov    %r14,%rdx
mov    %rax,%r14
mov    %r15,%rsi
mov    %r8,%r15
mov    %rdi,%r13
mov    %rbx,%rcx
callq  25000 <examine_app14>
jmp    25724 <save_marker+0x3b4>
mov    0x28(%r13),%rax
mov    0x20(%rax),%rax
mov    %rbx,%rsi
mov    %r13,%rdi
callq  *%rax
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
mov    -0x18(%rbp),%r13
mov    -0x20(%rbp),%r14
mov    -0x28(%rbp),%r15
mov    $0x1,%eax
leaveq 
retq   
data16 nopw %cs:0x0(%rax,%rax,1)
nopl   0x0(%rax)

00000000000257a0 <skip_variable>:
push   %rbp
mov    %rsp,%rbp
sub    $0x30,%rsp
mov    %r15,-0x18(%rbp)
mov    %rdi,-0x28(%rbp)
mov    0x28(%rdi),%r15
mov    (%r15),%rcx
mov    0x8(%r15),%rdx
test   %rdx,%rdx
je     25853 <skip_variable+0xb3>
movzbl (%rcx),%eax
add    $0xffffffffffffffff,%rdx
test   %rdx,%rdx
je     25863 <skip_variable+0xc3>
add    $0x1,%rcx
mov    (%rdi),%rsi
movzbl (%rcx),%r9d
movl   $0x5b,0x28(%rsi)
movslq 0x21c(%rdi),%r8
mov    (%rdi),%rsi
mov    %r8d,0x2c(%rsi)
shl    $0x8,%eax
mov    %eax,%eax
lea    -0x2(%r9,%rax,1),%r8
mov    (%rdi),%rax
mov    %r8d,0x30(%rax)
mov    (%rdi),%rax
mov    0x8(%rax),%rax
mov    $0x1,%esi
mov    %r12,-0x8(%rbp)
mov    %r13,-0x10(%rbp)
mov    %r14,-0x20(%rbp)
mov    %r8,%r12
mov    %rcx,%r13
mov    %rdx,%r14
callq  *%rax
lea    0x1(%r13),%rax
mov    %rax,(%r15)
lea    -0x1(%r14),%rax
mov    %rax,0x8(%r15)
test   %r12,%r12
jg     25877 <skip_variable+0xd7>
mov    $0x1,%eax
mov    -0x20(%rbp),%r14
mov    -0x10(%rbp),%r13
mov    -0x8(%rbp),%r12
mov    -0x18(%rbp),%r15
leaveq 
retq   
callq  *0x18(%r15)
test   %eax,%eax
jne    2589f <skip_variable+0xff>
xor    %eax,%eax
mov    -0x18(%rbp),%r15
leaveq 
retq   
mov    %rax,-0x20(%rbp)
callq  *0x18(%r15)
test   %eax,%eax
jne    258af <skip_variable+0x10f>
xor    %eax,%eax
mov    -0x18(%rbp),%r15
leaveq 
retq   
mov    -0x28(%rbp),%rdi
mov    0x28(%rdi),%rax
mov    0x20(%rax),%rax
mov    %r12,%rsi
callq  *%rax
mov    $0x1,%eax
mov    -0x20(%rbp),%r14
mov    -0x10(%rbp),%r13
mov    -0x8(%rbp),%r12
mov    -0x18(%rbp),%r15
leaveq 
retq   
mov    (%r15),%rcx
mov    0x8(%r15),%rdx
mov    -0x28(%rbp),%rdi
jmpq   257c4 <skip_variable+0x24>
mov    (%r15),%rcx
mov    0x8(%r15),%rdx
mov    -0x20(%rbp),%rax
mov    -0x28(%rbp),%rdi
jmpq   257d8 <skip_variable+0x38>
data16 nopw %cs:0x0(%rax,%rax,1)
xchg   %ax,%ax

00000000000258d0 <next_marker>:
push   %rbp
mov    %rsp,%rbp
sub    $0x30,%rsp
mov    %r13,-0x18(%rbp)
mov    %r14,-0x20(%rbp)
mov    %r15,-0x28(%rbp)
mov    0x28(%rdi),%r15
mov    (%r15),%rcx
mov    0x8(%r15),%rax
mov    %rdi,%r14
xor    %r13d,%r13d
jmp    2592d <next_marker+0x5d>
test   %rax,%rax
je     2593f <next_marker+0x6f>
mov    %rcx,%rdx
lea    0x1(%rdx),%rcx
add    $0xffffffffffffffff,%rax
movzbl (%rdx),%r8d
cmp    $0xff,%r8b
je     258f7 <next_marker+0x27>
test   %r8b,%r8b
jne    25953 <next_marker+0x83>
mov    0x248(%r14),%rsi
mov    0x24(%rsi),%edx
add    $0x2,%edx
mov    %edx,0x24(%rsi)
mov    %rcx,(%r15)
mov    %rax,0x8(%r15)
test   %rax,%rax
je     25969 <next_marker+0x99>
movzbl (%rcx),%edx
add    $0x1,%rcx
add    $0xffffffffffffffff,%rax
jmp    259ac <next_marker+0xdc>
mov    %r14,%rdi
callq  *0x18(%r15)
test   %eax,%eax
je     259b9 <next_marker+0xe9>
mov    (%r15),%rdx
mov    0x8(%r15),%rax
jmp    258ff <next_marker+0x2f>
mov    0x248(%r14),%rdx
mov    0x24(%rdx),%edx
test   %edx,%edx
jne    259ca <next_marker+0xfa>
mov    %r8,%r13
jmpq   25a2c <next_marker+0x15c>
mov    %r14,%rdi
callq  *0x18(%r15)
test   %eax,%eax
je     25a4d <next_marker+0x17d>
mov    (%r15),%rcx
mov    0x8(%r15),%rax
jmp    25932 <next_marker+0x62>
mov    0x248(%r14),%rsi
mov    0x24(%rsi),%edx
add    $0x1,%edx
mov    %edx,0x24(%rsi)
mov    %rcx,(%r15)
mov    %rax,0x8(%r15)
test   %rax,%rax
je     25a5e <next_marker+0x18e>
movzbl (%rcx),%edx
add    $0x1,%rcx
add    $0xffffffffffffffff,%rax
cmp    $0xfe,%edx
jle    25981 <next_marker+0xb1>
jmpq   258f7 <next_marker+0x27>
mov    %r13,%rax
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
leaveq 
retq   
mov    (%r14),%rdx
movl   $0x74,0x28(%rdx)
mov    0x248(%r14),%rdx
movslq 0x24(%rdx),%rsi
mov    (%r14),%rdx
mov    %esi,0x2c(%rdx)
mov    (%r14),%rdx
mov    %r8d,0x30(%rdx)
mov    (%r14),%rdx
mov    0x8(%rdx),%rdx
mov    $0xffffffffffffffff,%rsi
mov    %r14,%rdi
mov    %rbx,-0x8(%rbp)
mov    %r12,-0x10(%rbp)
mov    %rax,%rbx
mov    %rcx,%r12
mov    %r8,%r13
callq  *%rdx
mov    0x248(%r14),%rax
movl   $0x0,0x24(%rax)
mov    %rbx,%rax
mov    %r12,%rcx
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
mov    %r13d,0x21c(%r14)
mov    %rcx,(%r15)
mov    %rax,0x8(%r15)
mov    $0x1,%eax
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
leaveq 
retq   
mov    %r13,%rax
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
leaveq 
retq   
mov    %r14,%rdi
callq  *0x18(%r15)
test   %eax,%eax
jne    25a7a <next_marker+0x1aa>
mov    %r13,%rax
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
leaveq 
retq   
mov    (%r15),%rcx
mov    0x8(%r15),%rax
jmpq   259a1 <next_marker+0xd1>
nopw   %cs:0x0(%rax,%rax,1)

0000000000025a90 <first_marker>:
push   %rbp
mov    %rsp,%rbp
sub    $0x30,%rsp
mov    %r15,-0x20(%rbp)
mov    0x28(%rdi),%rcx
mov    (%rcx),%rdx
mov    0x8(%rcx),%rax
test   %rax,%rax
je     25b5d <first_marker+0xcd>
mov    %r15,%rsi
mov    %rcx,%r15
mov    %rsi,%rcx
movzbl (%rdx),%r8d
add    $0xffffffffffffffff,%rax
test   %rax,%rax
je     25b7a <first_marker+0xea>
add    $0x1,%rdx
movzbl (%rdx),%esi
cmp    $0xfe,%r8b
jbe    25add <first_marker+0x4d>
cmp    $0xd8,%sil
je     25b3e <first_marker+0xae>
mov    (%rdi),%rcx
movl   $0x35,0x28(%rcx)
mov    (%rdi),%rcx
mov    %r8d,0x2c(%rcx)
mov    (%rdi),%rcx
mov    %esi,0x30(%rcx)
mov    (%rdi),%rcx
mov    (%rcx),%rcx
mov    %rdi,%r8
mov    %rbx,-0x8(%rbp)
mov    %r12,-0x10(%rbp)
mov    %r13,-0x18(%rbp)
mov    %r14,-0x28(%rbp)
mov    %rdi,%rbx
mov    %r8,%rdi
mov    %rax,%r12
mov    %rdx,%r13
mov    %rsi,%r14
callq  *%rcx
mov    %r12,%rax
mov    %r13,%rdx
mov    %r14,%rsi
mov    %rbx,%rdi
mov    -0x28(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
mov    -0x20(%rbp),%rcx
mov    %esi,0x21c(%rdi)
add    $0x1,%rdx
mov    %rdx,(%r15)
add    $0xffffffffffffffff,%rax
mov    %rax,0x8(%r15)
mov    %rcx,%r15
mov    $0x1,%eax
leaveq 
retq   
mov    %rdi,%rax
mov    %rdi,-0x28(%rbp)
mov    %rax,%rdi
mov    %rcx,%r15
callq  *0x18(%r15)
test   %eax,%eax
jne    25b98 <first_marker+0x108>
xor    %eax,%eax
mov    -0x20(%rbp),%r15
leaveq 
retq   
mov    %rdi,%rax
mov    %rdi,-0x18(%rbp)
mov    %r8,-0x28(%rbp)
mov    %rax,%rdi
callq  *0x18(%r15)
test   %eax,%eax
jne    25bac <first_marker+0x11c>
xor    %eax,%eax
mov    -0x20(%rbp),%r15
leaveq 
retq   
mov    (%r15),%rdx
mov    0x8(%r15),%rax
mov    -0x28(%rbp),%rdi
mov    -0x20(%rbp),%rcx
jmpq   25ab9 <first_marker+0x29>
mov    (%r15),%rdx
mov    0x8(%r15),%rax
mov    -0x28(%rbp),%r8
mov    -0x18(%rbp),%rdi
mov    -0x20(%rbp),%rcx
jmpq   25ace <first_marker+0x3e>
data16 nopw %cs:0x0(%rax,%rax,1)
nop

0000000000025bd0 <read_markers>:
push   %rbp
mov    %rsp,%rbp
sub    $0x20,%rsp
mov    %r13,-0x8(%rbp)
mov    %r14,-0x10(%rbp)
mov    %r15,-0x18(%rbp)
mov    %rdi,%r15
xor    %r13d,%r13d
mov    $0x1,%r14d
jmp    25c1f <read_markers+0x4f>
mov    (%r15),%rax
movl   $0x44,0x28(%rax)
movslq 0x21c(%r15),%rcx
mov    (%r15),%rax
mov    %ecx,0x2c(%rax)
mov    (%r15),%rax
mov    (%rax),%rax
mov    %r15,%rdi
callq  *%rax
movl   $0x0,0x21c(%r15)
movslq 0x21c(%r15),%rax
test   %eax,%eax
jne    25c62 <read_markers+0x92>
mov    0x248(%r15),%rax
movslq 0x18(%rax),%rax
test   %eax,%eax
jne    25c56 <read_markers+0x86>
mov    %r15,%rdi
callq  25a90 <first_marker>
test   %eax,%eax
jne    25c62 <read_markers+0x92>
mov    %r13,%rax
mov    -0x18(%rbp),%r15
mov    -0x10(%rbp),%r14
mov    -0x8(%rbp),%r13
leaveq 
retq   
mov    %r15,%rdi
callq  258d0 <next_marker>
test   %eax,%eax
je     25cbe <read_markers+0xee>
movslq 0x21c(%r15),%rdx
lea    -0x1(%rdx),%eax
cmp    $0xfd,%eax
ja     25bf2 <read_markers+0x22>
lea    0x33f42(%rip),%rcx        # 59bc0 <val_ac_chrominance.16+0xa2>
movslq (%rcx,%rax,4),%rax
add    %rcx,%rax
jmpq   *%rax
mov    (%r15),%rax
movl   $0x55,0x28(%rax)
mov    (%r15),%rax
mov    0x8(%rax),%rax
mov    %r14,%rsi
mov    %r15,%rdi
callq  *%rax
movl   $0x0,0x21c(%r15)
mov    $0x2,%eax
mov    -0x18(%rbp),%r15
mov    -0x10(%rbp),%r14
mov    -0x8(%rbp),%r13
leaveq 
retq   
mov    %r13,%rax
mov    -0x18(%rbp),%r15
mov    -0x10(%rbp),%r14
mov    -0x8(%rbp),%r13
leaveq 
retq   
mov    %r15,%rdi
callq  239e0 <get_sos>
test   %eax,%eax
jne    25f00 <read_markers+0x330>
mov    %r13,%rax
mov    -0x18(%rbp),%r15
mov    -0x10(%rbp),%r14
mov    -0x8(%rbp),%r13
leaveq 
retq   
mov    %r15,%rdi
callq  257a0 <skip_variable>
test   %eax,%eax
jne    25c14 <read_markers+0x44>
mov    %r13,%rax
mov    -0x18(%rbp),%r15
mov    -0x10(%rbp),%r14
mov    -0x8(%rbp),%r13
leaveq 
retq   
mov    %r15,%rdi
callq  233d0 <get_soi>
test   %eax,%eax
jne    25c14 <read_markers+0x44>
mov    %r13,%rax
mov    -0x18(%rbp),%r15
mov    -0x10(%rbp),%r14
mov    -0x8(%rbp),%r13
leaveq 
retq   
mov    %r13,%rdx
mov    %r15,%rdi
mov    %r13,%rsi
callq  234e0 <get_sof>
test   %eax,%eax
jne    25c14 <read_markers+0x44>
mov    %r13,%rax
mov    -0x18(%rbp),%r15
mov    -0x10(%rbp),%r14
mov    -0x8(%rbp),%r13
leaveq 
retq   
mov    %r15,%rdi
mov    %r14,%rsi
mov    %r13,%rdx
callq  234e0 <get_sof>
test   %eax,%eax
jne    25c14 <read_markers+0x44>
mov    %r13,%rax
mov    -0x18(%rbp),%r15
mov    -0x10(%rbp),%r14
mov    -0x8(%rbp),%r13
leaveq 
retq   
mov    %r15,%rdi
mov    %r13,%rsi
mov    %r14,%rdx
callq  234e0 <get_sof>
test   %eax,%eax
jne    25c14 <read_markers+0x44>
mov    %r13,%rax
mov    -0x18(%rbp),%r15
mov    -0x10(%rbp),%r14
mov    -0x8(%rbp),%r13
leaveq 
retq   
mov    %r14,%rdx
mov    %r15,%rdi
mov    %r14,%rsi
callq  234e0 <get_sof>
test   %eax,%eax
jne    25c14 <read_markers+0x44>
mov    %r13,%rax
mov    -0x18(%rbp),%r15
mov    -0x10(%rbp),%r14
mov    -0x8(%rbp),%r13
leaveq 
retq   
mov    (%r15),%rax
movl   $0x3c,0x28(%rax)
movslq 0x21c(%r15),%rcx
mov    (%r15),%rax
mov    %ecx,0x2c(%rax)
mov    (%r15),%rax
mov    (%rax),%rax
mov    %r15,%rdi
callq  *%rax
jmpq   25c14 <read_markers+0x44>
mov    %r15,%rdi
callq  23f50 <get_dac>
test   %eax,%eax
jne    25c14 <read_markers+0x44>
mov    %r13,%rax
mov    -0x18(%rbp),%r15
mov    -0x10(%rbp),%r14
mov    -0x8(%rbp),%r13
leaveq 
retq   
mov    %r15,%rdi
callq  24210 <get_dht>
test   %eax,%eax
jne    25c14 <read_markers+0x44>
mov    %r13,%rax
mov    -0x18(%rbp),%r15
mov    -0x10(%rbp),%r14
mov    -0x8(%rbp),%r13
leaveq 
retq   
mov    %r15,%rdi
callq  246c0 <get_dqt>
test   %eax,%eax
jne    25c14 <read_markers+0x44>
mov    %r13,%rax
mov    -0x18(%rbp),%r15
mov    -0x10(%rbp),%r14
mov    -0x8(%rbp),%r13
leaveq 
retq   
mov    %r15,%rdi
callq  24b10 <get_dri>
test   %eax,%eax
jne    25c14 <read_markers+0x44>
mov    %r13,%rax
mov    -0x18(%rbp),%r15
mov    -0x10(%rbp),%r14
mov    -0x8(%rbp),%r13
leaveq 
retq   
mov    0x248(%r15),%rcx
lea    -0xe0(%rdx),%eax
movslq %eax,%rax
mov    0x30(%rcx,%rax,8),%rax
mov    %r15,%rdi
callq  *%rax
test   %eax,%eax
jne    25c14 <read_markers+0x44>
mov    %r13,%rax
mov    -0x18(%rbp),%r15
mov    -0x10(%rbp),%r14
mov    -0x8(%rbp),%r13
leaveq 
retq   
mov    0x248(%r15),%rax
mov    0x28(%rax),%rax
mov    %r15,%rdi
callq  *%rax
test   %eax,%eax
jne    25c14 <read_markers+0x44>
mov    %r13,%rax
mov    -0x18(%rbp),%r15
mov    -0x10(%rbp),%r14
mov    -0x8(%rbp),%r13
leaveq 
retq   
mov    (%r15),%rax
movl   $0x5c,0x28(%rax)
movslq 0x21c(%r15),%rcx
mov    (%r15),%rax
mov    %ecx,0x2c(%rax)
mov    (%r15),%rax
mov    0x8(%rax),%rax
mov    %r15,%rdi
mov    %r14,%rsi
callq  *%rax
jmpq   25c14 <read_markers+0x44>
movl   $0x0,0x21c(%r15)
mov    %r14,%rax
mov    -0x18(%rbp),%r15
mov    -0x10(%rbp),%r14
mov    -0x8(%rbp),%r13
leaveq 
retq   
nopl   0x0(%rax)

0000000000025f20 <read_restart_marker>:
push   %rbp
mov    %rsp,%rbp
sub    $0x10,%rsp
movslq 0x21c(%rdi),%rax
test   %eax,%eax
je     25f6e <read_restart_marker+0x4e>
mov    0x248(%rdi),%rax
movslq 0x20(%rax),%rsi
lea    0xd0(%rsi),%eax
cmp    0x21c(%rdi),%eax
je     25f87 <read_restart_marker+0x67>
mov    0x28(%rdi),%rax
mov    0x28(%rax),%rax
mov    %rdi,%rcx
mov    %rdi,-0x8(%rbp)
mov    %rcx,%rdi
callq  *%rax
test   %eax,%eax
je     25fe9 <read_restart_marker+0xc9>
mov    -0x8(%rbp),%rax
jmp    25fce <read_restart_marker+0xae>
mov    %rdi,%rax
mov    %rdi,-0x8(%rbp)
mov    %rax,%rdi
callq  258d0 <next_marker>
test   %eax,%eax
je     25fed <read_restart_marker+0xcd>
mov    -0x8(%rbp),%rdi
jmp    25f33 <read_restart_marker+0x13>
mov    (%rdi),%rax
movl   $0x62,0x28(%rax)
mov    0x248(%rdi),%rax
movslq 0x20(%rax),%rcx
mov    (%rdi),%rax
mov    %ecx,0x2c(%rax)
mov    (%rdi),%rax
mov    0x8(%rax),%rax
mov    $0x3,%esi
mov    %rdi,%rcx
mov    %r15,-0x8(%rbp)
mov    %rdi,%r15
mov    %rcx,%rdi
callq  *%rax
mov    %r15,%rax
movl   $0x0,0x21c(%rax)
mov    -0x8(%rbp),%r15
mov    0x248(%rax),%rcx
movslq 0x20(%rcx),%rax
add    $0x1,%eax
and    $0x7,%eax
mov    %eax,0x20(%rcx)
mov    $0x1,%eax
leaveq 
retq   
xor    %eax,%eax
leaveq 
retq   
xor    %eax,%eax
leaveq 
retq   
data16 nopw %cs:0x0(%rax,%rax,1)
nopl   0x0(%rax)

0000000000026000 <reset_marker_reader>:
push   %rbp
mov    %rsp,%rbp
movq   $0x0,0x130(%rdi)
movl   $0x0,0xac(%rdi)
movl   $0x0,0x21c(%rdi)
mov    0x248(%rdi),%rax
movl   $0x0,0x18(%rax)
movl   $0x0,0x1c(%rax)
movl   $0x0,0x24(%rax)
movq   $0x0,0xf8(%rax)
leaveq 
retq   
nopl   0x0(%rax)

0000000000026050 <jpeg_new_colormap>:
push   %rbp
mov    %rsp,%rbp
sub    $0x10,%rsp
mov    0x220(%rdi),%rax
movslq 0x24(%rdi),%rcx
cmp    $0xcf,%ecx
je     260a9 <jpeg_new_colormap+0x59>
mov    (%rdi),%rcx
movl   $0x14,0x28(%rcx)
movslq 0x24(%rdi),%rdx
mov    (%rdi),%rcx
mov    %edx,0x2c(%rcx)
mov    (%rdi),%rcx
mov    (%rcx),%rcx
mov    %rdi,%rdx
mov    %r14,-0x8(%rbp)
mov    %r15,-0x10(%rbp)
mov    %rdi,%r14
mov    %rdx,%rdi
mov    %rax,%r15
callq  *%rcx
mov    %r15,%rax
mov    %r14,%rdi
mov    -0x10(%rbp),%r15
mov    -0x8(%rbp),%r14
movslq 0x6c(%rdi),%rcx
test   %ecx,%ecx
jne    260c5 <jpeg_new_colormap+0x75>
mov    (%rdi),%rax
movl   $0x2e,0x28(%rax)
mov    (%rdi),%rax
mov    (%rax),%rax
callq  *%rax
leaveq 
retq   
movslq 0x80(%rdi),%rcx
test   %ecx,%ecx
je     260b1 <jpeg_new_colormap+0x61>
mov    0xa0(%rdi),%rcx
test   %rcx,%rcx
je     260b1 <jpeg_new_colormap+0x61>
mov    0x80(%rax),%rcx
mov    %rcx,0x270(%rdi)
mov    %r15,-0x10(%rbp)
mov    %rax,%r15
callq  *0x18(%rcx)
movl   $0x0,0x10(%r15)
mov    -0x10(%rbp),%r15
leaveq 
retq   
data16 nopw %cs:0x0(%rax,%rax,1)
nopl   (%rax)

0000000000026110 <jpeg_calc_output_dimensions>:
push   %rbp
mov    %rsp,%rbp
sub    $0x20,%rsp
mov    %r15,-0x18(%rbp)
movslq 0x24(%rdi),%rax
cmp    $0xca,%eax
jne    26132 <jpeg_calc_output_dimensions+0x22>
mov    %r14,%r15
mov    %r13,%r14
mov    %rdi,%r13
jmp    26157 <jpeg_calc_output_dimensions+0x47>
mov    (%rdi),%rax
movl   $0x14,0x28(%rax)
movslq 0x24(%rdi),%rcx
mov    (%rdi),%rax
mov    %ecx,0x2c(%rax)
mov    (%rdi),%rax
mov    (%rax),%rax
mov    %r14,%r15
mov    %r13,%r14
mov    %rdi,%r13
callq  *%rax
mov    %r13,%rdi
callq  264f0 <jpeg_core_output_dimensions>
mov    0x130(%r13),%rsi
mov    %r15,%rcx
xor    %r15d,%r15d
mov    %r15,%rdi
jmp    2617c <jpeg_calc_output_dimensions+0x6c>
mov    %r8d,0x24(%rsi)
add    $0x60,%rsi
add    $0x1,%edi
movslq 0x38(%r13),%rax
cmp    %edi,%eax
jg     26198 <jpeg_calc_output_dimensions+0x88>
mov    0x130(%r13),%rax
mov    %r14,-0x8(%rbp)
mov    %rcx,-0x10(%rbp)
mov    %rax,%r14
jmp    26200 <jpeg_calc_output_dimensions+0xf0>
movslq 0x1a0(%r13),%r8
jmpq   26281 <jpeg_calc_output_dimensions+0x171>
movslq 0x24(%r14),%rax
imul   0x8(%r14),%eax
movslq %eax,%rdi
mov    0x30(%r13),%eax
imul   %rax,%rdi
movslq 0x198(%r13),%rax
shl    $0x3,%eax
movslq %eax,%rsi
callq  4150 <jdiv_round_up@plt>
mov    %eax,0x28(%r14)
movslq 0x24(%r14),%rax
imul   0xc(%r14),%eax
movslq %eax,%rdi
mov    0x34(%r13),%eax
imul   %rax,%rdi
movslq 0x19c(%r13),%rax
shl    $0x3,%eax
movslq %eax,%rsi
callq  4150 <jdiv_round_up@plt>
mov    %eax,0x2c(%r14)
add    $0x60,%r14
add    $0x1,%r15d
movslq 0x38(%r13),%rdx
cmp    %r15d,%edx
jg     261a4 <jpeg_calc_output_dimensions+0x94>
mov    0x40(%r13),%esi
lea    -0x1(%rsi),%eax
cmp    $0xf,%eax
ja     2628c <jpeg_calc_output_dimensions+0x17c>
lea    0x33d9c(%rip),%rcx        # 59fb8 <val_ac_chrominance.16+0x49a>
movslq (%rcx,%rax,4),%rax
add    %rcx,%rax
jmpq   *%rax
movl   $0x4,0x90(%r13)
jmp    26293 <jpeg_calc_output_dimensions+0x183>
movslq 0x1a0(%r13),%rax
imul   0x198(%r13),%eax
mov    %r8,%rdx
imul   0x8(%rsi),%edx
lea    (%rdx,%rdx,1),%r9d
cltd   
idiv   %r9d
test   %edx,%edx
jne    26171 <jpeg_calc_output_dimensions+0x61>
movslq 0x1a0(%r13),%rax
imul   0x19c(%r13),%eax
mov    %r8,%rdx
imul   0xc(%rsi),%edx
lea    (%rdx,%rdx,1),%r9d
cltd   
idiv   %r9d
test   %edx,%edx
jne    26171 <jpeg_calc_output_dimensions+0x61>
add    %r8d,%r8d
cmp    $0x7,%r8d
jle    26232 <jpeg_calc_output_dimensions+0x122>
jmpq   26171 <jpeg_calc_output_dimensions+0x61>
mov    %edx,0x90(%r13)
movslq 0x6c(%r13),%rax
test   %eax,%eax
je     262fa <jpeg_calc_output_dimensions+0x1ea>
mov    $0x1,%eax
mov    %eax,0x94(%r13)
mov    %r13,%rdi
callq  26360 <use_merged_upsample>
test   %eax,%eax
jne    26303 <jpeg_calc_output_dimensions+0x1f3>
movl   $0x1,0x98(%r13)
mov    -0x10(%rbp),%r14
mov    -0x8(%rbp),%r13
mov    -0x18(%rbp),%r15
leaveq 
retq   
movl   $0x1,0x90(%r13)
jmp    26293 <jpeg_calc_output_dimensions+0x183>
lea    0x33d18(%rip),%rax        # 59ff8 <rgb_pixelsize>
movslq (%rax,%rsi,4),%rax
mov    %eax,0x90(%r13)
jmp    26293 <jpeg_calc_output_dimensions+0x183>
movl   $0x3,0x90(%r13)
jmp    26293 <jpeg_calc_output_dimensions+0x183>
movslq 0x90(%r13),%rax
jmp    262a0 <jpeg_calc_output_dimensions+0x190>
movslq 0x19c(%r13),%rax
mov    %eax,0x98(%r13)
mov    -0x10(%rbp),%r14
mov    -0x8(%rbp),%r13
mov    -0x18(%rbp),%r15
leaveq 
retq   
nop

0000000000026320 <jinit_master_decompress>:
push   %rbp
mov    %rsp,%rbp
lea    0xb25(%rip),%rax        # 26e50 <prepare_for_output_pass>
mov    0x220(%rdi),%rcx
mov    %rax,(%rcx)
lea    0xd34(%rip),%rax        # 27070 <finish_output_pass>
mov    %rax,0x8(%rcx)
movl   $0x0,0x10(%rcx)
movl   $0x0,0x6c(%rcx)
callq  26af0 <master_selection>
leaveq 
retq   
data16 nopw %cs:0x0(%rax,%rax,1)

0000000000026360 <use_merged_upsample>:
push   %rbp
mov    %rsp,%rbp
sub    $0x10,%rsp
xor    %eax,%eax
movslq 0x64(%rdi),%rcx
test   %ecx,%ecx
je     26374 <use_merged_upsample+0x14>
leaveq 
retq   
movslq 0x188(%rdi),%rcx
test   %ecx,%ecx
je     26381 <use_merged_upsample+0x21>
leaveq 
retq   
mov    0x3c(%rdi),%ecx
cmp    $0x3,%ecx
je     2638b <use_merged_upsample+0x2b>
leaveq 
retq   
movslq 0x38(%rdi),%rcx
cmp    $0x3,%ecx
je     26396 <use_merged_upsample+0x36>
leaveq 
retq   
mov    0x40(%rdi),%ecx
cmp    $0x2,%ecx
jne    263bd <use_merged_upsample+0x5d>
cmp    $0x10,%ecx
je     263f6 <use_merged_upsample+0x96>
mov    0x40(%rdi),%ecx
cmp    $0x10,%ecx
jne    26404 <use_merged_upsample+0xa4>
mov    0x130(%rdi),%rdx
movslq 0x8(%rdx),%rcx
cmp    $0x2,%ecx
je     26419 <use_merged_upsample+0xb9>
leaveq 
retq   
cmp    $0x10,%ecx
je     2639e <use_merged_upsample+0x3e>
cmp    $0x6,%ecx
je     2639e <use_merged_upsample+0x3e>
cmp    $0x7,%ecx
je     2639e <use_merged_upsample+0x3e>
cmp    $0x8,%ecx
je     2639e <use_merged_upsample+0x3e>
cmp    $0x9,%ecx
je     2639e <use_merged_upsample+0x3e>
cmp    $0xa,%ecx
je     2639e <use_merged_upsample+0x3e>
cmp    $0xb,%ecx
je     2639e <use_merged_upsample+0x3e>
cmp    $0xc,%ecx
je     2639e <use_merged_upsample+0x3e>
cmp    $0xd,%ecx
je     2639e <use_merged_upsample+0x3e>
cmp    $0xe,%ecx
je     2639e <use_merged_upsample+0x3e>
cmp    $0xf,%ecx
je     2639e <use_merged_upsample+0x3e>
leaveq 
retq   
movslq 0x90(%rdi),%rcx
cmp    $0x3,%ecx
je     263a3 <use_merged_upsample+0x43>
leaveq 
retq   
lea    0x33bed(%rip),%rdx        # 59ff8 <rgb_pixelsize>
movslq (%rdx,%rcx,4),%rcx
cmp    0x90(%rdi),%ecx
je     263ab <use_merged_upsample+0x4b>
leaveq 
retq   
movslq 0x68(%rdx),%rcx
cmp    $0x1,%ecx
je     26424 <use_merged_upsample+0xc4>
leaveq 
retq   
movslq 0xc8(%rdx),%rcx
cmp    $0x1,%ecx
je     26432 <use_merged_upsample+0xd2>
leaveq 
retq   
movslq 0xc(%rdx),%rcx
cmp    $0x2,%ecx
jle    2643d <use_merged_upsample+0xdd>
leaveq 
retq   
movslq 0x6c(%rdx),%rcx
cmp    $0x1,%ecx
je     26448 <use_merged_upsample+0xe8>
leaveq 
retq   
movslq 0xcc(%rdx),%rcx
cmp    $0x1,%ecx
je     26456 <use_merged_upsample+0xf6>
leaveq 
retq   
movslq 0x1a0(%rdi),%rcx
cmp    0x24(%rdx),%ecx
je     26464 <use_merged_upsample+0x104>
leaveq 
retq   
cmp    0x84(%rdx),%ecx
je     2646e <use_merged_upsample+0x10e>
leaveq 
retq   
cmp    0xe4(%rdx),%ecx
je     26478 <use_merged_upsample+0x118>
leaveq 
retq   
mov    %rdi,-0x8(%rbp)
callq  3d920 <jsimd_can_h2v2_merged_upsample>
test   %eax,%eax
je     2648c <use_merged_upsample+0x12c>
mov    $0x1,%eax
leaveq 
retq   
callq  3d960 <jsimd_can_h2v1_merged_upsample>
test   %eax,%eax
je     2649c <use_merged_upsample+0x13c>
mov    $0x1,%eax
leaveq 
retq   
callq  3d530 <jsimd_can_ycc_rgb>
test   %eax,%eax
jne    264ac <use_merged_upsample+0x14c>
mov    $0x1,%eax
leaveq 
retq   
mov    -0x8(%rbp),%rcx
mov    0x3c(%rcx),%eax
cmp    $0x3,%eax
je     264bf <use_merged_upsample+0x15f>
mov    $0x1,%eax
leaveq 
retq   
mov    0x40(%rcx),%eax
cmp    $0x2,%eax
jne    264cb <use_merged_upsample+0x16b>
xor    %eax,%eax
leaveq 
retq   
cmp    $0x5,%eax
ja     264d7 <use_merged_upsample+0x177>
mov    $0x1,%eax
leaveq 
retq   
cmp    $0xf,%eax
ja     264e0 <use_merged_upsample+0x180>
xor    %eax,%eax
leaveq 
retq   
mov    $0x1,%eax
leaveq 
retq   
nopw   0x0(%rax,%rax,1)

00000000000264f0 <jpeg_core_output_dimensions>:
push   %rbp
mov    %rsp,%rbp
sub    $0x10,%rsp
mov    %r14,-0x8(%rbp)
mov    %r15,-0x10(%rbp)
mov    $0x8,%r15d
mov    0x48(%rdi),%r9d
mov    0x44(%rdi),%eax
shl    $0x3,%eax
cmp    %eax,%r9d
jae    265ff <jpeg_core_output_dimensions+0x10f>
lea    (%r9,%r9,1),%r8d
cmp    %r8d,%eax
jbe    26647 <jpeg_core_output_dimensions+0x157>
lea    (%r9,%r8,1),%ecx
cmp    %ecx,%eax
jbe    26681 <jpeg_core_output_dimensions+0x191>
mov    %r9,%rdx
shl    $0x2,%edx
cmp    %edx,%eax
jbe    266bf <jpeg_core_output_dimensions+0x1cf>
lea    (%r9,%rdx,1),%esi
cmp    %esi,%eax
jbe    266fd <jpeg_core_output_dimensions+0x20d>
lea    (%rcx,%rcx,1),%edx
cmp    %edx,%eax
jbe    2673b <jpeg_core_output_dimensions+0x24b>
add    %r9d,%edx
cmp    %edx,%eax
jbe    26780 <jpeg_core_output_dimensions+0x290>
mov    %r9,%rdx
shl    $0x3,%edx
cmp    %edx,%eax
jbe    267c6 <jpeg_core_output_dimensions+0x2d6>
add    %r9d,%edx
cmp    %edx,%eax
jbe    267fe <jpeg_core_output_dimensions+0x30e>
lea    (%rsi,%rsi,1),%edx
cmp    %edx,%eax
jbe    2683c <jpeg_core_output_dimensions+0x34c>
add    %r9d,%edx
cmp    %edx,%eax
jbe    26881 <jpeg_core_output_dimensions+0x391>
shl    $0x2,%ecx
cmp    %ecx,%eax
jbe    268c7 <jpeg_core_output_dimensions+0x3d7>
lea    (%r9,%rcx,1),%edx
cmp    %edx,%eax
jbe    2690d <jpeg_core_output_dimensions+0x41d>
add    %r8d,%ecx
cmp    %ecx,%eax
jbe    26953 <jpeg_core_output_dimensions+0x463>
mov    %r9,%rcx
shl    $0x4,%ecx
sub    %r9d,%ecx
cmp    %ecx,%eax
jbe    269a1 <jpeg_core_output_dimensions+0x4b1>
mov    0x30(%rdi),%eax
shl    $0x4,%rax
mov    %rdi,%r14
mov    %rax,%rdi
mov    %r15,%rsi
callq  4150 <jdiv_round_up@plt>
mov    %eax,0x88(%r14)
mov    0x34(%r14),%edi
shl    $0x4,%rdi
mov    %r15,%rsi
callq  4150 <jdiv_round_up@plt>
mov    %eax,0x8c(%r14)
mov    $0x10,%r15d
jmp    2662e <jpeg_core_output_dimensions+0x13e>
mov    %rdi,%r14
mov    0x30(%r14),%edi
mov    %r15,%rsi
callq  4150 <jdiv_round_up@plt>
mov    %eax,0x88(%r14)
mov    %r15,%rsi
mov    0x34(%r14),%edi
callq  4150 <jdiv_round_up@plt>
mov    %eax,0x8c(%r14)
mov    $0x1,%r15d
mov    %r15d,0x1a0(%r14)
mov    0x130(%r14),%rax
add    $0x24,%rax
xor    %ecx,%ecx
jmpq   26a04 <jpeg_core_output_dimensions+0x514>
mov    0x30(%rdi),%eax
add    %rax,%rax
mov    %rdi,%r14
mov    %rax,%rdi
mov    %r15,%rsi
callq  4150 <jdiv_round_up@plt>
mov    %eax,0x88(%r14)
mov    0x34(%r14),%eax
lea    (%rax,%rax,1),%rdi
mov    %r15,%rsi
callq  4150 <jdiv_round_up@plt>
mov    %eax,0x8c(%r14)
mov    $0x2,%r15d
jmp    2662e <jpeg_core_output_dimensions+0x13e>
mov    0x30(%rdi),%eax
lea    (%rax,%rax,2),%rax
mov    %rdi,%r14
mov    %rax,%rdi
mov    %r15,%rsi
callq  4150 <jdiv_round_up@plt>
mov    %eax,0x88(%r14)
mov    0x34(%r14),%eax
lea    (%rax,%rax,2),%rdi
mov    %r15,%rsi
callq  4150 <jdiv_round_up@plt>
mov    %eax,0x8c(%r14)
mov    $0x3,%r15d
jmpq   2662e <jpeg_core_output_dimensions+0x13e>
mov    0x30(%rdi),%eax
shl    $0x2,%rax
mov    %rdi,%r14
mov    %rax,%rdi
mov    %r15,%rsi
callq  4150 <jdiv_round_up@plt>
mov    %eax,0x88(%r14)
mov    0x34(%r14),%edi
shl    $0x2,%rdi
mov    %r15,%rsi
callq  4150 <jdiv_round_up@plt>
mov    %eax,0x8c(%r14)
mov    $0x4,%r15d
jmpq   2662e <jpeg_core_output_dimensions+0x13e>
mov    0x30(%rdi),%eax
lea    (%rax,%rax,4),%rax
mov    %rdi,%r14
mov    %rax,%rdi
mov    %r15,%rsi
callq  4150 <jdiv_round_up@plt>
mov    %eax,0x88(%r14)
mov    0x34(%r14),%eax
lea    (%rax,%rax,4),%rdi
mov    %r15,%rsi
callq  4150 <jdiv_round_up@plt>
mov    %eax,0x8c(%r14)
mov    $0x5,%r15d
jmpq   2662e <jpeg_core_output_dimensions+0x13e>
mov    0x30(%rdi),%eax
lea    (%rax,%rax,2),%rax
add    %rax,%rax
mov    %rdi,%r14
mov    %rax,%rdi
mov    %r15,%rsi
callq  4150 <jdiv_round_up@plt>
mov    %eax,0x88(%r14)
mov    0x34(%r14),%eax
lea    (%rax,%rax,2),%rax
lea    (%rax,%rax,1),%rdi
mov    %r15,%rsi
callq  4150 <jdiv_round_up@plt>
mov    %eax,0x8c(%r14)
mov    $0x6,%r15d
jmpq   2662e <jpeg_core_output_dimensions+0x13e>
mov    0x30(%rdi),%ecx
lea    (%rcx,%rcx,2),%rax
lea    (%rcx,%rax,2),%rax
mov    %rdi,%r14
mov    %rax,%rdi
mov    %r15,%rsi
callq  4150 <jdiv_round_up@plt>
mov    %eax,0x88(%r14)
mov    0x34(%r14),%ecx
lea    (%rcx,%rcx,2),%rax
lea    (%rcx,%rax,2),%rdi
mov    %r15,%rsi
callq  4150 <jdiv_round_up@plt>
mov    %eax,0x8c(%r14)
mov    $0x7,%r15d
jmpq   2662e <jpeg_core_output_dimensions+0x13e>
mov    0x30(%rdi),%eax
shl    $0x3,%rax
mov    %rdi,%r14
mov    %rax,%rdi
mov    %r15,%rsi
callq  4150 <jdiv_round_up@plt>
mov    %eax,0x88(%r14)
mov    0x34(%r14),%edi
shl    $0x3,%rdi
mov    %r15,%rsi
callq  4150 <jdiv_round_up@plt>
mov    %eax,0x8c(%r14)
jmpq   2662e <jpeg_core_output_dimensions+0x13e>
mov    0x30(%rdi),%eax
lea    (%rax,%rax,8),%rax
mov    %rdi,%r14
mov    %rax,%rdi
mov    %r15,%rsi
callq  4150 <jdiv_round_up@plt>
mov    %eax,0x88(%r14)
mov    0x34(%r14),%eax
lea    (%rax,%rax,8),%rdi
mov    %r15,%rsi
callq  4150 <jdiv_round_up@plt>
mov    %eax,0x8c(%r14)
mov    $0x9,%r15d
jmpq   2662e <jpeg_core_output_dimensions+0x13e>
mov    0x30(%rdi),%eax
lea    (%rax,%rax,4),%rax
add    %rax,%rax
mov    %rdi,%r14
mov    %rax,%rdi
mov    %r15,%rsi
callq  4150 <jdiv_round_up@plt>
mov    %eax,0x88(%r14)
mov    0x34(%r14),%eax
lea    (%rax,%rax,4),%rax
lea    (%rax,%rax,1),%rdi
mov    %r15,%rsi
callq  4150 <jdiv_round_up@plt>
mov    %eax,0x8c(%r14)
mov    $0xa,%r15d
jmpq   2662e <jpeg_core_output_dimensions+0x13e>
mov    0x30(%rdi),%ecx
lea    (%rcx,%rcx,4),%rax
lea    (%rcx,%rax,2),%rax
mov    %rdi,%r14
mov    %rax,%rdi
mov    %r15,%rsi
callq  4150 <jdiv_round_up@plt>
mov    %eax,0x88(%r14)
mov    0x34(%r14),%ecx
lea    (%rcx,%rcx,4),%rax
lea    (%rcx,%rax,2),%rdi
mov    %r15,%rsi
callq  4150 <jdiv_round_up@plt>
mov    %eax,0x8c(%r14)
mov    $0xb,%r15d
jmpq   2662e <jpeg_core_output_dimensions+0x13e>
mov    0x30(%rdi),%eax
lea    (%rax,%rax,2),%rax
shl    $0x2,%rax
mov    %rdi,%r14
mov    %rax,%rdi
mov    %r15,%rsi
callq  4150 <jdiv_round_up@plt>
mov    %eax,0x88(%r14)
mov    0x34(%r14),%eax
lea    (%rax,%rax,2),%rdi
shl    $0x2,%rdi
mov    %r15,%rsi
callq  4150 <jdiv_round_up@plt>
mov    %eax,0x8c(%r14)
mov    $0xc,%r15d
jmpq   2662e <jpeg_core_output_dimensions+0x13e>
mov    0x30(%rdi),%ecx
lea    (%rcx,%rcx,2),%rax
lea    (%rcx,%rax,4),%rax
mov    %rdi,%r14
mov    %rax,%rdi
mov    %r15,%rsi
callq  4150 <jdiv_round_up@plt>
mov    %eax,0x88(%r14)
mov    0x34(%r14),%ecx
lea    (%rcx,%rcx,2),%rax
lea    (%rcx,%rax,4),%rdi
mov    %r15,%rsi
callq  4150 <jdiv_round_up@plt>
mov    %eax,0x8c(%r14)
mov    $0xd,%r15d
jmpq   2662e <jpeg_core_output_dimensions+0x13e>
mov    0x30(%rdi),%ecx
lea    (%rcx,%rcx,2),%rax
shl    $0x2,%rax
lea    (%rax,%rcx,2),%rax
mov    %rdi,%r14
mov    %rax,%rdi
mov    %r15,%rsi
callq  4150 <jdiv_round_up@plt>
mov    %eax,0x88(%r14)
mov    0x34(%r14),%ecx
lea    (%rcx,%rcx,2),%rax
shl    $0x2,%rax
lea    (%rax,%rcx,2),%rdi
mov    %r15,%rsi
callq  4150 <jdiv_round_up@plt>
mov    %eax,0x8c(%r14)
mov    $0xe,%r15d
jmpq   2662e <jpeg_core_output_dimensions+0x13e>
mov    0x30(%rdi),%ecx
mov    %rcx,%rax
shl    $0x4,%rax
sub    %rcx,%rax
mov    %rdi,%r14
mov    %rax,%rdi
mov    %r15,%rsi
callq  4150 <jdiv_round_up@plt>
mov    %eax,0x88(%r14)
mov    0x34(%r14),%eax
mov    %rax,%rdi
shl    $0x4,%rdi
sub    %rax,%rdi
mov    %r15,%rsi
callq  4150 <jdiv_round_up@plt>
mov    %eax,0x8c(%r14)
mov    $0xf,%r15d
jmpq   2662e <jpeg_core_output_dimensions+0x13e>
movslq 0x1a0(%r14),%rdx
mov    %edx,(%rax)
movslq 0x1a0(%r14),%rdx
mov    %edx,(%rax)
add    $0x1,%ecx
add    $0x60,%rax
movslq 0x38(%r14),%rdx
cmp    %ecx,%edx
jg     269eb <jpeg_core_output_dimensions+0x4fb>
mov    -0x10(%rbp),%r15
mov    -0x8(%rbp),%r14
leaveq 
retq   
nopw   %cs:0x0(%rax,%rax,1)

0000000000026a20 <prepare_range_limit_table>:
push   %rbp
mov    %rsp,%rbp
sub    $0x20,%rsp
mov    %r15,-0x20(%rbp)
mov    %r12,-0x8(%rbp)
mov    %r13,-0x10(%rbp)
mov    %r14,-0x18(%rbp)
mov    0x8(%rdi),%rax
mov    (%rax),%rax
mov    $0x1,%esi
mov    $0x580,%edx
mov    %rdi,%r12
callq  *%rax
mov    %rax,%r15
lea    0x100(%r15),%r13
mov    %r13,0x1a8(%r12)
xor    %r14d,%r14d
mov    $0x100,%edx
mov    %r15,%rdi
mov    %r14,%rsi
callq  41e0 <memset@plt>
mov    %r14,%rcx
jmp    26a83 <prepare_range_limit_table+0x63>
movslq %ecx,%rax
mov    %cl,0x0(%r13,%rax,1)
add    $0x1,%ecx
cmp    $0xff,%ecx
jle    26a78 <prepare_range_limit_table+0x58>
mov    $0x80,%r13d
mov    %r13,%rcx
jmp    26aa5 <prepare_range_limit_table+0x85>
movslq %ecx,%rax
movb   $0xff,0x180(%r15,%rax,1)
add    $0x1,%ecx
cmp    $0x1ff,%ecx
jle    26a96 <prepare_range_limit_table+0x76>
mov    %r14,%rsi
lea    0x380(%r15),%rdi
mov    $0x180,%edx
callq  41e0 <memset@plt>
lea    0x500(%r15),%rdi
mov    0x1a8(%r12),%rsi
mov    %r13,%rdx
callq  42c0 <memcpy@plt>
mov    -0x18(%rbp),%r14
mov    -0x10(%rbp),%r13
mov    -0x8(%rbp),%r12
mov    -0x20(%rbp),%r15
leaveq 
retq   
nopw   0x0(%rax,%rax,1)

0000000000026af0 <master_selection>:
push   %rbp
mov    %rsp,%rbp
sub    $0x20,%rsp
mov    %r14,-0x10(%rbp)
mov    %r15,-0x18(%rbp)
mov    0x220(%rdi),%r15
mov    %r15,-0x8(%rbp)
mov    %rdi,%r14
callq  42d0 <jpeg_calc_output_dimensions@plt>
mov    %r14,%rdi
callq  26a20 <prepare_range_limit_table>
movslq 0x90(%r14),%rax
mov    0x88(%r14),%ecx
imul   %rcx,%rax
mov    %eax,%ecx
cmp    %rax,%rcx
je     26b49 <master_selection+0x59>
mov    (%r14),%rax
movl   $0x46,0x28(%rax)
mov    (%r14),%rax
mov    (%rax),%rax
mov    %r14,%rdi
callq  *%rax
movl   $0x0,0x70(%r15)
mov    %r14,%rdi
callq  26360 <use_merged_upsample>
mov    %eax,0x74(%r15)
movq   $0x0,0x78(%r15)
movq   $0x0,0x80(%r15)
movslq 0x6c(%r14),%rax
test   %eax,%eax
jne    26bc4 <master_selection+0xd4>
movl   $0x0,0x7c(%r14)
movl   $0x0,0x80(%r14)
movl   $0x0,0x84(%r14)
movslq 0x6c(%r14),%rax
test   %eax,%eax
jne    26bce <master_selection+0xde>
movslq 0x5c(%r14),%rax
test   %eax,%eax
jne    26c34 <master_selection+0x144>
movslq 0x74(%r15),%rax
test   %eax,%eax
jne    26c1d <master_selection+0x12d>
mov    %r14,%rdi
callq  4360 <jinit_color_deconverter@plt>
mov    %r14,%rdi
callq  43e0 <jinit_upsampler@plt>
jmp    26c25 <master_selection+0x135>
movslq 0x58(%r14),%rax
test   %eax,%eax
jne    26b96 <master_selection+0xa6>
jmp    26b78 <master_selection+0x88>
movslq 0x5c(%r14),%rax
test   %eax,%eax
je     26beb <master_selection+0xfb>
mov    (%r14),%rax
movl   $0x2f,0x28(%rax)
mov    (%r14),%rax
mov    (%rax),%rax
mov    %r14,%rdi
callq  *%rax
movslq 0x90(%r14),%rax
cmp    $0x3,%eax
jne    26c67 <master_selection+0x177>
mov    0xa0(%r14),%rax
test   %rax,%rax
jne    26ce0 <master_selection+0x1f0>
movslq 0x74(%r14),%rax
test   %eax,%eax
jne    26ced <master_selection+0x1fd>
movl   $0x1,0x7c(%r14)
jmp    26c90 <master_selection+0x1a0>
mov    %r14,%rdi
callq  4290 <jinit_merged_upsampler@plt>
movslq 0x84(%r14),%rsi
mov    %r14,%rdi
callq  4220 <jinit_d_post_controller@plt>
mov    %r14,%rdi
callq  4300 <jinit_inverse_dct@plt>
movslq 0x13c(%r14),%rax
test   %eax,%eax
jne    26cfa <master_selection+0x20a>
movslq 0x138(%r14),%rax
test   %eax,%eax
jne    26d86 <master_selection+0x296>
mov    %r14,%rdi
callq  40b0 <jinit_huff_decoder@plt>
jmpq   26d02 <master_selection+0x212>
movl   $0x1,0x7c(%r14)
movl   $0x0,0x80(%r14)
movl   $0x0,0x84(%r14)
movq   $0x0,0xa0(%r14)
movslq 0x7c(%r14),%rax
test   %eax,%eax
je     26cab <master_selection+0x1bb>
mov    %r14,%rdi
callq  4230 <jinit_1pass_quantizer@plt>
mov    0x270(%r14),%rax
mov    %rax,0x78(%r15)
movslq 0x84(%r14),%rax
test   %eax,%eax
jne    26cc5 <master_selection+0x1d5>
movslq 0x80(%r14),%rax
test   %eax,%eax
je     26b9e <master_selection+0xae>
mov    %r14,%rdi
callq  4100 <jinit_2pass_quantizer@plt>
mov    0x270(%r14),%rax
mov    %rax,0x80(%r15)
jmpq   26b9e <master_selection+0xae>
movl   $0x1,0x80(%r14)
jmp    26c90 <master_selection+0x1a0>
movl   $0x1,0x84(%r14)
jmp    26c90 <master_selection+0x1a0>
mov    %r14,%rdi
callq  4090 <jinit_arith_decoder@plt>
xor    %r15d,%r15d
mov    $0x1,%esi
mov    0x240(%r14),%rax
movslq 0x20(%rax),%rax
test   %eax,%eax
je     26d93 <master_selection+0x2a3>
mov    %r14,%rdi
callq  4050 <jinit_d_coef_controller@plt>
movslq 0x5c(%r14),%rax
test   %eax,%eax
jne    26d34 <master_selection+0x244>
mov    %r15,%rsi
mov    %r14,%rdi
callq  4250 <jinit_d_main_controller@plt>
mov    0x8(%r14),%rax
mov    0x30(%rax),%rax
mov    %r14,%rdi
callq  *%rax
mov    0x240(%r14),%rax
mov    0x10(%rax),%rax
mov    %r14,%rdi
callq  *%rax
mov    0x220(%r14),%rax
movl   $0x0,0x14(%rax)
mov    0x1d8(%r14),%eax
add    $0xffffffff,%eax
mov    0x220(%r14),%rcx
mov    %eax,0x18(%rcx)
mov    0x10(%r14),%rax
test   %rax,%rax
jne    26da7 <master_selection+0x2b7>
mov    -0x18(%rbp),%r15
mov    -0x10(%rbp),%r14
leaveq 
retq   
mov    %r14,%rdi
callq  41d0 <jinit_phuff_decoder@plt>
jmpq   26d02 <master_selection+0x212>
movslq 0x58(%r14),%rax
test   %eax,%eax
jne    26d19 <master_selection+0x229>
mov    %r15,%rsi
jmpq   26d19 <master_selection+0x229>
movslq 0x58(%r14),%rax
test   %eax,%eax
je     26db9 <master_selection+0x2c9>
mov    -0x18(%rbp),%r15
mov    -0x10(%rbp),%r14
leaveq 
retq   
mov    0x240(%r14),%rax
movslq 0x20(%rax),%rax
test   %eax,%eax
jne    26dd2 <master_selection+0x2e2>
mov    -0x18(%rbp),%r15
mov    -0x10(%rbp),%r14
leaveq 
retq   
movslq 0x138(%r14),%rax
test   %eax,%eax
jne    26de3 <master_selection+0x2f3>
movslq 0x38(%r14),%rax
jmp    26deb <master_selection+0x2fb>
movslq 0x38(%r14),%rax
lea    0x2(%rax,%rax,2),%eax
mov    0x10(%r14),%rcx
movq   $0x0,0x8(%rcx)
movslq %eax,%rax
mov    0x1a4(%r14),%ecx
imul   %rcx,%rax
mov    0x10(%r14),%rcx
mov    %rax,0x10(%rcx)
mov    0x10(%r14),%rax
movl   $0x0,0x18(%rax)
mov    0x10(%r14),%rcx
movslq 0x84(%r14),%rax
test   %eax,%eax
jne    26e2e <master_selection+0x33e>
mov    $0x2,%eax
jmp    26e33 <master_selection+0x343>
mov    $0x3,%eax
mov    %eax,0x1c(%rcx)
mov    -0x8(%rbp),%rcx
movslq 0x70(%rcx),%rax
add    $0x1,%eax
mov    %eax,0x70(%rcx)
mov    -0x18(%rbp),%r15
mov    -0x10(%rbp),%r14
leaveq 
retq   
xchg   %ax,%ax

0000000000026e50 <prepare_for_output_pass>:
push   %rbp
mov    %rsp,%rbp
sub    $0x10,%rsp
mov    %r14,-0x8(%rbp)
mov    %r15,-0x10(%rbp)
xor    %esi,%esi
mov    0x220(%rdi),%r15
movslq 0x10(%r15),%rax
test   %eax,%eax
jne    26f06 <prepare_for_output_pass+0xb6>
movslq 0x6c(%rdi),%rax
test   %eax,%eax
jne    26f58 <prepare_for_output_pass+0x108>
mov    %rdi,%r14
mov    0x258(%r14),%rax
mov    (%rax),%rax
mov    %r14,%rdi
callq  *%rax
mov    0x230(%r14),%rax
mov    0x10(%rax),%rax
mov    %r14,%rdi
callq  *%rax
movslq 0x5c(%r14),%rax
test   %eax,%eax
jne    26f45 <prepare_for_output_pass+0xf5>
movslq 0x74(%r15),%rax
test   %eax,%eax
jne    26ec6 <prepare_for_output_pass+0x76>
mov    0x268(%r14),%rax
mov    (%rax),%rax
mov    %r14,%rdi
callq  *%rax
mov    0x260(%r14),%rax
mov    (%rax),%rax
mov    %r14,%rdi
callq  *%rax
movslq 0x6c(%r14),%rax
test   %eax,%eax
je     26ef0 <prepare_for_output_pass+0xa0>
mov    0x270(%r14),%rax
mov    (%rax),%rax
movslq 0x10(%r15),%rsi
mov    %r14,%rdi
callq  *%rax
mov    0x238(%r14),%rax
mov    (%rax),%rax
movslq 0x10(%r15),%rcx
test   %ecx,%ecx
jne    26f6c <prepare_for_output_pass+0x11c>
xor    %esi,%esi
jmp    26f71 <prepare_for_output_pass+0x121>
movl   $0x0,0x10(%r15)
mov    0x270(%rdi),%rax
mov    (%rax),%rax
mov    %rdi,%r14
callq  *%rax
mov    0x238(%r14),%rax
mov    (%rax),%rax
mov    %r14,%rdi
mov    $0x2,%esi
callq  *%rax
mov    0x228(%r14),%rax
mov    (%rax),%rax
mov    %r14,%rdi
mov    $0x2,%esi
callq  *%rax
mov    0x10(%r14),%rax
test   %rax,%rax
jne    26f89 <prepare_for_output_pass+0x139>
mov    -0x10(%rbp),%r15
mov    -0x8(%rbp),%r14
leaveq 
retq   
mov    0xa0(%rdi),%rax
test   %rax,%rax
je     26faa <prepare_for_output_pass+0x15a>
mov    %rdi,%r14
jmpq   26e84 <prepare_for_output_pass+0x34>
mov    $0x3,%esi
mov    %r14,%rdi
callq  *%rax
mov    0x228(%r14),%rax
mov    (%rax),%rax
mov    %r14,%rdi
xor    %esi,%esi
callq  *%rax
jmp    26f45 <prepare_for_output_pass+0xf5>
movslq 0x70(%r15),%rcx
mov    %ecx,0x18(%rax)
movslq 0x70(%r15),%rsi
mov    0x10(%r14),%rdx
mov    $0x1,%ecx
movslq 0x10(%r15),%rax
test   %eax,%eax
jne    26fd4 <prepare_for_output_pass+0x184>
mov    %rcx,%rax
jmp    26fd9 <prepare_for_output_pass+0x189>
movslq 0x74(%rdi),%rax
test   %eax,%eax
jne    26ff0 <prepare_for_output_pass+0x1a0>
movslq 0x7c(%rdi),%rax
test   %eax,%eax
jne    27019 <prepare_for_output_pass+0x1c9>
mov    (%rdi),%rax
movl   $0x2e,0x28(%rax)
mov    (%rdi),%rax
mov    (%rax),%rax
mov    %rdi,%r14
callq  *%rax
jmpq   26e84 <prepare_for_output_pass+0x34>
mov    $0x2,%eax
add    %esi,%eax
mov    %eax,0x1c(%rdx)
movslq 0x58(%r14),%rax
test   %eax,%eax
jne    2702c <prepare_for_output_pass+0x1dc>
mov    -0x10(%rbp),%r15
mov    -0x8(%rbp),%r14
leaveq 
retq   
movslq 0x84(%rdi),%rax
test   %eax,%eax
je     26fb2 <prepare_for_output_pass+0x162>
mov    0x80(%r15),%rax
mov    %rax,0x270(%rdi)
movl   $0x1,0x10(%r15)
mov    %rdi,%r14
jmpq   26e84 <prepare_for_output_pass+0x34>
mov    0x78(%r15),%rax
mov    %rax,0x270(%rdi)
mov    %rdi,%r14
jmpq   26e84 <prepare_for_output_pass+0x34>
mov    0x240(%r14),%rax
movslq 0x24(%rax),%rax
test   %eax,%eax
je     27045 <prepare_for_output_pass+0x1f5>
mov    -0x10(%rbp),%r15
mov    -0x8(%rbp),%r14
leaveq 
retq   
movslq 0x84(%r14),%rax
test   %eax,%eax
je     27055 <prepare_for_output_pass+0x205>
mov    $0x2,%ecx
mov    0x10(%r14),%rax
add    0x1c(%rax),%ecx
mov    %ecx,0x1c(%rax)
mov    -0x10(%rbp),%r15
mov    -0x8(%rbp),%r14
leaveq 
retq   
nopl   0x0(%rax)

0000000000027070 <finish_output_pass>:
push   %rbp
mov    %rsp,%rbp
sub    $0x10,%rsp
mov    0x220(%rdi),%rax
movslq 0x6c(%rdi),%rcx
test   %ecx,%ecx
je     270a2 <finish_output_pass+0x32>
mov    0x270(%rdi),%rcx
mov    0x10(%rcx),%rcx
mov    %r15,-0x8(%rbp)
mov    %rax,%r15
callq  *%rcx
mov    %r15,%rax
mov    -0x8(%rbp),%r15
movslq 0x70(%rax),%rcx
add    $0x1,%ecx
mov    %ecx,0x70(%rax)
leaveq 
retq   
xchg   %ax,%ax

00000000000270b0 <jinit_merged_upsampler>:
push   %rbp
mov    %rsp,%rbp
sub    $0x10,%rsp
mov    %r15,-0x10(%rbp)
mov    %r14,-0x8(%rbp)
mov    0x8(%rdi),%rax
mov    (%rax),%rax
mov    $0x1,%esi
mov    $0x58,%edx
mov    %rdi,%r14
callq  *%rax
mov    %rax,0x260(%r14)
lea    0x1ebc(%rip),%rcx        # 28fa0 <start_pass_merged_upsample>
mov    %rcx,(%rax)
movl   $0x0,0x10(%rax)
mov    0x90(%r14),%ecx
imul   0x88(%r14),%ecx
mov    %ecx,0x4c(%rax)
movslq 0x19c(%r14),%rcx
cmp    $0x2,%ecx
je     27130 <jinit_merged_upsampler+0x80>
lea    0x1fdd(%rip),%rcx        # 290f0 <merged_1v_upsample>
mov    %rcx,0x8(%rax)
mov    %rax,%r15
callq  3d960 <jsimd_can_h2v1_merged_upsample>
test   %eax,%eax
jne    27154 <jinit_merged_upsampler+0xa4>
lea    0x2016(%rip),%rax        # 29140 <h2v1_merged_upsample>
mov    %rax,0x18(%r15)
jmp    2715f <jinit_merged_upsampler+0xaf>
lea    0x1e89(%rip),%rcx        # 28fc0 <merged_2v_upsample>
mov    %rcx,0x8(%rax)
mov    %rax,%r15
callq  3d920 <jsimd_can_h2v2_merged_upsample>
test   %eax,%eax
jne    27172 <jinit_merged_upsampler+0xc2>
lea    0x2042(%rip),%rax        # 29190 <h2v2_merged_upsample>
mov    %rax,0x18(%r15)
jmp    2717d <jinit_merged_upsampler+0xcd>
lea    0x168b5(%rip),%rax        # 3da10 <jsimd_h2v1_merged_upsample>
mov    %rax,0x18(%r15)
mov    0x40(%r14),%eax
cmp    $0x10,%eax
je     271b2 <jinit_merged_upsampler+0x102>
movq   $0x0,0x40(%r15)
jmp    271a0 <jinit_merged_upsampler+0xf0>
lea    0x16827(%rip),%rax        # 3d9a0 <jsimd_h2v2_merged_upsample>
mov    %rax,0x18(%r15)
mov    0x40(%r14),%eax
cmp    $0x10,%eax
je     271c7 <jinit_merged_upsampler+0x117>
mov    0x8(%r14),%rax
mov    0x8(%rax),%rax
mov    0x4c(%r15),%edx
mov    %r14,%rdi
mov    $0x1,%esi
callq  *%rax
mov    %rax,0x40(%r15)
mov    %r14,%rdi
callq  28e80 <build_ycc_rgb_table>
mov    -0x8(%rbp),%r14
mov    -0x10(%rbp),%r15
leaveq 
retq   
mov    0x70(%r14),%eax
test   %eax,%eax
jne    271dc <jinit_merged_upsampler+0x12c>
lea    0x380f(%rip),%rax        # 2a9d0 <h2v1_merged_upsample_565>
mov    %rax,0x18(%r15)
jmp    27168 <jinit_merged_upsampler+0xb8>
mov    0x70(%r14),%eax
test   %eax,%eax
jne    271ec <jinit_merged_upsampler+0x13c>
lea    0x38fa(%rip),%rax        # 2aad0 <h2v2_merged_upsample_565>
mov    %rax,0x18(%r15)
jmp    27186 <jinit_merged_upsampler+0xd6>
lea    0x386d(%rip),%rax        # 2aa50 <h2v1_merged_upsample_565D>
mov    %rax,0x18(%r15)
jmpq   27168 <jinit_merged_upsampler+0xb8>
lea    0x395d(%rip),%rax        # 2ab50 <h2v2_merged_upsample_565D>
mov    %rax,0x18(%r15)
jmp    27186 <jinit_merged_upsampler+0xd6>
nopl   0x0(%rax)

0000000000027200 <h2v1_merged_upsample_internal>:
push   %rbp
mov    %rsp,%rbp
sub    $0x40,%rsp
mov    %r15,-0x28(%rbp)
mov    %r14,-0x20(%rbp)
mov    %rdi,-0x30(%rbp)
mov    %rbx,-0x8(%rbp)
mov    %r12,-0x10(%rbp)
mov    %r13,-0x18(%rbp)
mov    0x1a8(%rdi),%r13
mov    0x260(%rdi),%rbx
mov    0x28(%rbx),%r12
mov    0x30(%rbx),%rax
mov    %rax,-0x40(%rbp)
mov    0x38(%rbx),%r8
mov    %r8,-0x38(%rbp)
mov    0x20(%rbx),%r11
mov    (%rsi),%rbx
mov    %edx,%r9d
mov    (%rbx,%r9,8),%rdx
mov    0x8(%rsi),%rbx
mov    (%rbx,%r9,8),%rbx
mov    0x10(%rsi),%rsi
mov    (%rsi,%r9,8),%r9
mov    (%rcx),%rsi
mov    0x88(%rdi),%ecx
shr    %ecx
jmpq   2730e <h2v1_merged_upsample_internal+0x10e>
movzbl (%r9),%r10d
movslq (%r11,%r10,4),%r15
movzbl (%rdx),%edi
lea    (%rdi,%r15,1),%r14d
movslq %r14d,%r14
movzbl 0x0(%r13,%r14,1),%r14d
mov    (%rax,%r10,8),%rax
movzbl (%rbx),%r10d
add    (%r8,%r10,8),%rax
sar    $0x10,%rax
lea    (%rdi,%rax,1),%r8d
movslq %r8d,%r8
movslq (%r12,%r10,4),%r10
mov    %r14b,(%rsi)
movzbl 0x0(%r13,%r8,1),%r8d
mov    %r8b,0x1(%rsi)
add    %r10d,%edi
movslq %edi,%rdi
movzbl (%rdi,%r13,1),%edi
mov    %dil,0x2(%rsi)
movzbl 0x1(%rdx),%r8d
lea    (%r8,%r15,1),%edi
movslq %edi,%rdi
movzbl 0x0(%r13,%rdi,1),%edi
mov    %dil,0x3(%rsi)
add    %r8d,%eax
movslq %eax,%rax
movzbl 0x0(%r13,%rax,1),%eax
mov    %al,0x4(%rsi)
lea    (%r8,%r10,1),%eax
movslq %eax,%rax
movzbl (%rax,%r13,1),%eax
mov    %al,0x5(%rsi)
add    $0x2,%rdx
add    $0x1,%rbx
add    $0x1,%r9
add    $0x6,%rsi
add    $0xffffffff,%ecx
mov    -0x38(%rbp),%r8
mov    -0x40(%rbp),%rax
test   %ecx,%ecx
jne    27270 <h2v1_merged_upsample_internal+0x70>
mov    -0x30(%rbp),%rcx
mov    0x88(%rcx),%ecx
and    $0x1,%ecx
test   %ecx,%ecx
jne    2733d <h2v1_merged_upsample_internal+0x13d>
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
mov    -0x20(%rbp),%r14
mov    -0x28(%rbp),%r15
leaveq 
retq   
movzbl (%rdx),%ecx
movzbl (%r9),%edi
mov    %rcx,%rdx
add    (%r11,%rdi,4),%edx
movslq %edx,%rdx
movzbl 0x0(%r13,%rdx,1),%edx
mov    (%rax,%rdi,8),%rax
movzbl (%rbx),%edi
add    (%r8,%rdi,8),%rax
sar    $0x10,%rax
add    %ecx,%eax
movslq %eax,%rax
add    (%r12,%rdi,4),%ecx
mov    %dl,(%rsi)
movzbl 0x0(%r13,%rax,1),%eax
mov    %al,0x1(%rsi)
movslq %ecx,%rax
movzbl 0x0(%r13,%rax,1),%eax
mov    %al,0x2(%rsi)
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
mov    -0x20(%rbp),%r14
mov    -0x28(%rbp),%r15
leaveq 
retq   
nopl   0x0(%rax)

00000000000273a0 <h2v2_merged_upsample_internal>:
push   %rbp
mov    %rsp,%rbp
sub    $0x50,%rsp
mov    %r15,-0x28(%rbp)
mov    %r14,-0x20(%rbp)
mov    %r13,-0x18(%rbp)
mov    %r12,-0x10(%rbp)
mov    %rdi,-0x30(%rbp)
mov    %rbx,-0x8(%rbp)
mov    0x1a8(%rdi),%r15
mov    0x260(%rdi),%rbx
mov    0x28(%rbx),%r14
mov    0x30(%rbx),%rax
mov    %rax,-0x40(%rbp)
mov    0x38(%rbx),%r9
mov    %r9,-0x38(%rbp)
mov    0x20(%rbx),%r10
mov    %r10,-0x48(%rbp)
mov    (%rsi),%r11
lea    (%rdx,%rdx,1),%r8d
lea    0x1(%r8),%ebx
mov    %ebx,%ebx
mov    (%r11,%rbx,8),%rbx
mov    %r8d,%r8d
mov    (%r11,%r8,8),%r8
mov    0x8(%rsi),%r11
mov    %edx,%r12d
mov    (%r11,%r12,8),%r11
mov    0x10(%rsi),%rdx
mov    (%rdx,%r12,8),%r12
mov    (%rcx),%rdx
mov    0x8(%rcx),%rsi
mov    0x88(%rdi),%ecx
shr    %ecx
jmpq   27533 <h2v2_merged_upsample_internal+0x193>
movzbl (%r12),%r13d
movslq (%r10,%r13,4),%r10
movzbl (%r8),%edi
mov    %rcx,-0x50(%rbp)
lea    (%rdi,%r10,1),%ecx
movslq %ecx,%rcx
movzbl (%r15,%rcx,1),%ecx
mov    (%rax,%r13,8),%rax
movzbl (%r11),%r13d
add    (%r9,%r13,8),%rax
sar    $0x10,%rax
lea    (%rdi,%rax,1),%r9d
movslq %r9d,%r9
movslq (%r14,%r13,4),%r13
mov    %cl,(%rdx)
movzbl (%r15,%r9,1),%ecx
mov    %cl,0x1(%rdx)
lea    (%rdi,%r13,1),%ecx
movslq %ecx,%rcx
movzbl (%rcx,%r15,1),%ecx
mov    %cl,0x2(%rdx)
movzbl 0x1(%r8),%edi
lea    (%rdi,%r10,1),%ecx
movslq %ecx,%rcx
movzbl (%r15,%rcx,1),%ecx
mov    %cl,0x3(%rdx)
lea    (%rdi,%rax,1),%ecx
movslq %ecx,%rcx
movzbl (%r15,%rcx,1),%ecx
mov    %cl,0x4(%rdx)
lea    (%rdi,%r13,1),%ecx
movslq %ecx,%rcx
movzbl (%rcx,%r15,1),%ecx
mov    %cl,0x5(%rdx)
movzbl (%rbx),%edi
lea    (%rdi,%r10,1),%ecx
movslq %ecx,%rcx
movzbl (%r15,%rcx,1),%ecx
mov    %cl,(%rsi)
lea    (%rdi,%rax,1),%ecx
movslq %ecx,%rcx
movzbl (%r15,%rcx,1),%ecx
mov    %cl,0x1(%rsi)
lea    (%rdi,%r13,1),%ecx
movslq %ecx,%rcx
movzbl (%rcx,%r15,1),%ecx
mov    %cl,0x2(%rsi)
movzbl 0x1(%rbx),%edi
lea    (%rdi,%r10,1),%ecx
movslq %ecx,%rcx
movzbl (%r15,%rcx,1),%ecx
mov    %cl,0x3(%rsi)
add    %edi,%eax
movslq %eax,%rax
movzbl (%r15,%rax,1),%eax
mov    %al,0x4(%rsi)
lea    (%rdi,%r13,1),%eax
movslq %eax,%rax
movzbl (%rax,%r15,1),%eax
mov    %al,0x5(%rsi)
add    $0x2,%rbx
add    $0x2,%r8
add    $0x1,%r11
add    $0x1,%r12
add    $0x6,%rdx
add    $0x6,%rsi
mov    -0x50(%rbp),%rax
lea    -0x1(%rax),%ecx
mov    -0x38(%rbp),%r9
mov    -0x40(%rbp),%rax
mov    -0x48(%rbp),%r10
test   %ecx,%ecx
jne    27429 <h2v2_merged_upsample_internal+0x89>
mov    -0x30(%rbp),%rcx
mov    0x88(%rcx),%ecx
and    $0x1,%ecx
test   %ecx,%ecx
jne    27562 <h2v2_merged_upsample_internal+0x1c2>
mov    -0x8(%rbp),%rbx
mov    -0x10(%rbp),%r12
mov    -0x18(%rbp),%r13
mov    -0x20(%rbp),%r14
mov    -0x28(%rbp),%r15
leaveq 
retq   
movzbl (%r12),%r12d
movslq (%r10,%r12,4),%rdi
movzbl (%r8),%r13d
lea    0x0(%r13,%rdi,1),%ecx
movslq %ecx,%rcx
movzbl (%r15,%rcx,1),%ecx
mov    (%rax,%r12,8),%rax
movzbl (%r11),%r10d
add    (%r9,%r10,8),%rax
sar    $0x10,%rax
lea    0x0(%r13,%rax,1),%r8d
movslq %r8d,%r8
movslq (%r14,%r10,4),%r9
mov    %cl,(%rdx)
movzbl (%r15,%r8,1),%ecx
mov    %cl,0x1(%rdx)
lea    0x0(%r13,%r9,1),%ecx
movslq %ecx,%rcx
movzbl (%r15,%rcx,1),%ecx
mov    %cl,0x2(%rdx)
movzbl (%rbx),%edx
lea    (%rdx,%rdi,1),%ecx
movslq %ecx,%rcx
movzbl (%r15,%rcx,1),%ecx
mov    %cl,(%rsi)
add    %edx,%eax
movslq %eax,%rax
movzbl (%r15,%rax,1),%eax
mov    %al,0x1(%rsi)
lea    (%rdx,%r9,1),%eax
movslq %eax,%rax
movzbl (%r15,%rax,1),%eax
mov    %al,0x2(%rsi)
mov    -0x8(%rbp),%rbx
mov    -0x10(%rbp),%r12
mov    -0x18(%rbp),%r13
mov    -0x20(%rbp),%r14
mov    -0x28(%rbp),%r15
leaveq 
retq   
data16 nopw %cs:0x0(%rax,%rax,1)
nop

0000000000027600 <extrgb_h2v1_merged_upsample_internal>:
push   %rbp
mov    %rsp,%rbp
sub    $0x40,%rsp
mov    %r15,-0x28(%rbp)
mov    %r14,-0x20(%rbp)
mov    %rdi,-0x30(%rbp)
mov    %rbx,-0x8(%rbp)
mov    %r12,-0x10(%rbp)
mov    %r13,-0x18(%rbp)
mov    0x1a8(%rdi),%r13
mov    0x260(%rdi),%rbx
mov    0x28(%rbx),%r12
mov    0x30(%rbx),%rax
mov    %rax,-0x40(%rbp)
mov    0x38(%rbx),%r9
mov    %r9,-0x38(%rbp)
mov    0x20(%rbx),%r11
mov    (%rsi),%rbx
mov    %edx,%r10d
mov    (%rbx,%r10,8),%rbx
mov    0x8(%rsi),%rdx
mov    (%rdx,%r10,8),%r8
mov    0x10(%rsi),%rdx
mov    (%rdx,%r10,8),%rsi
mov    (%rcx),%rdx
mov    0x88(%rdi),%ecx
shr    %ecx
jmpq   2770e <extrgb_h2v1_merged_upsample_internal+0x10e>
movzbl (%rsi),%r10d
movslq (%r11,%r10,4),%r15
movzbl (%rbx),%edi
lea    (%rdi,%r15,1),%r14d
movslq %r14d,%r14
movzbl 0x0(%r13,%r14,1),%r14d
mov    (%rax,%r10,8),%rax
movzbl (%r8),%r10d
add    (%r9,%r10,8),%rax
sar    $0x10,%rax
lea    (%rdi,%rax,1),%r9d
movslq %r9d,%r9
movslq (%r12,%r10,4),%r10
mov    %r14b,(%rdx)
movzbl 0x0(%r13,%r9,1),%r9d
mov    %r9b,0x1(%rdx)
add    %r10d,%edi
movslq %edi,%rdi
movzbl (%rdi,%r13,1),%edi
mov    %dil,0x2(%rdx)
movzbl 0x1(%rbx),%r9d
lea    (%r9,%r15,1),%edi
movslq %edi,%rdi
movzbl 0x0(%r13,%rdi,1),%edi
mov    %dil,0x3(%rdx)
add    %r9d,%eax
movslq %eax,%rax
movzbl 0x0(%r13,%rax,1),%eax
mov    %al,0x4(%rdx)
lea    (%r9,%r10,1),%eax
movslq %eax,%rax
movzbl (%rax,%r13,1),%eax
mov    %al,0x5(%rdx)
add    $0x2,%rbx
add    $0x1,%r8
add    $0x1,%rsi
add    $0x6,%rdx
add    $0xffffffff,%ecx
mov    -0x38(%rbp),%r9
mov    -0x40(%rbp),%rax
test   %ecx,%ecx
jne    27670 <extrgb_h2v1_merged_upsample_internal+0x70>
mov    -0x30(%rbp),%rcx
mov    0x88(%rcx),%ecx
and    $0x1,%ecx
test   %ecx,%ecx
jne    2773d <extrgb_h2v1_merged_upsample_internal+0x13d>
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
mov    -0x20(%rbp),%r14
mov    -0x28(%rbp),%r15
leaveq 
retq   
movzbl (%rbx),%ecx
movzbl (%rsi),%edi
mov    %rcx,%rsi
add    (%r11,%rdi,4),%esi
movslq %esi,%rsi
movzbl 0x0(%r13,%rsi,1),%esi
mov    (%rax,%rdi,8),%rax
movzbl (%r8),%edi
add    (%r9,%rdi,8),%rax
sar    $0x10,%rax
add    %ecx,%eax
movslq %eax,%rax
add    (%r12,%rdi,4),%ecx
mov    %sil,(%rdx)
movzbl 0x0(%r13,%rax,1),%eax
mov    %al,0x1(%rdx)
movslq %ecx,%rax
movzbl 0x0(%r13,%rax,1),%eax
mov    %al,0x2(%rdx)
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
mov    -0x20(%rbp),%r14
mov    -0x28(%rbp),%r15
leaveq 
retq   
nopw   0x0(%rax,%rax,1)

00000000000277a0 <extrgb_h2v2_merged_upsample_internal>:
push   %rbp
mov    %rsp,%rbp
sub    $0x50,%rsp
mov    %r15,-0x28(%rbp)
mov    %r14,-0x20(%rbp)
mov    %r13,-0x18(%rbp)
mov    %r12,-0x10(%rbp)
mov    %rdi,-0x30(%rbp)
mov    %rbx,-0x8(%rbp)
mov    0x1a8(%rdi),%r15
mov    0x260(%rdi),%rbx
mov    0x28(%rbx),%r14
mov    0x30(%rbx),%rax
mov    %rax,-0x40(%rbp)
mov    0x38(%rbx),%r9
mov    %r9,-0x38(%rbp)
mov    0x20(%rbx),%r10
mov    %r10,-0x48(%rbp)
mov    (%rsi),%r11
lea    (%rdx,%rdx,1),%r8d
lea    0x1(%r8),%ebx
mov    %ebx,%ebx
mov    (%r11,%rbx,8),%rbx
mov    %r8d,%r8d
mov    (%r11,%r8,8),%r8
mov    0x8(%rsi),%r11
mov    %edx,%r12d
mov    (%r11,%r12,8),%r11
mov    0x10(%rsi),%rdx
mov    (%rdx,%r12,8),%r12
mov    (%rcx),%rdx
mov    0x8(%rcx),%rsi
mov    0x88(%rdi),%ecx
shr    %ecx
jmpq   27933 <extrgb_h2v2_merged_upsample_internal+0x193>
movzbl (%r12),%r13d
movslq (%r10,%r13,4),%r10
movzbl (%r8),%edi
mov    %rcx,-0x50(%rbp)
lea    (%rdi,%r10,1),%ecx
movslq %ecx,%rcx
movzbl (%r15,%rcx,1),%ecx
mov    (%rax,%r13,8),%rax
movzbl (%r11),%r13d
add    (%r9,%r13,8),%rax
sar    $0x10,%rax
lea    (%rdi,%rax,1),%r9d
movslq %r9d,%r9
movslq (%r14,%r13,4),%r13
mov    %cl,(%rdx)
movzbl (%r15,%r9,1),%ecx
mov    %cl,0x1(%rdx)
lea    (%rdi,%r13,1),%ecx
movslq %ecx,%rcx
movzbl (%rcx,%r15,1),%ecx
mov    %cl,0x2(%rdx)
movzbl 0x1(%r8),%edi
lea    (%rdi,%r10,1),%ecx
movslq %ecx,%rcx
movzbl (%r15,%rcx,1),%ecx
mov    %cl,0x3(%rdx)
lea    (%rdi,%rax,1),%ecx
movslq %ecx,%rcx
movzbl (%r15,%rcx,1),%ecx
mov    %cl,0x4(%rdx)
lea    (%rdi,%r13,1),%ecx
movslq %ecx,%rcx
movzbl (%rcx,%r15,1),%ecx
mov    %cl,0x5(%rdx)
movzbl (%rbx),%edi
lea    (%rdi,%r10,1),%ecx
movslq %ecx,%rcx
movzbl (%r15,%rcx,1),%ecx
mov    %cl,(%rsi)
lea    (%rdi,%rax,1),%ecx
movslq %ecx,%rcx
movzbl (%r15,%rcx,1),%ecx
mov    %cl,0x1(%rsi)
lea    (%rdi,%r13,1),%ecx
movslq %ecx,%rcx
movzbl (%rcx,%r15,1),%ecx
mov    %cl,0x2(%rsi)
movzbl 0x1(%rbx),%edi
lea    (%rdi,%r10,1),%ecx
movslq %ecx,%rcx
movzbl (%r15,%rcx,1),%ecx
mov    %cl,0x3(%rsi)
add    %edi,%eax
movslq %eax,%rax
movzbl (%r15,%rax,1),%eax
mov    %al,0x4(%rsi)
lea    (%rdi,%r13,1),%eax
movslq %eax,%rax
movzbl (%rax,%r15,1),%eax
mov    %al,0x5(%rsi)
add    $0x2,%rbx
add    $0x2,%r8
add    $0x1,%r11
add    $0x1,%r12
add    $0x6,%rdx
add    $0x6,%rsi
mov    -0x50(%rbp),%rax
lea    -0x1(%rax),%ecx
mov    -0x38(%rbp),%r9
mov    -0x40(%rbp),%rax
mov    -0x48(%rbp),%r10
test   %ecx,%ecx
jne    27829 <extrgb_h2v2_merged_upsample_internal+0x89>
mov    -0x30(%rbp),%rcx
mov    0x88(%rcx),%ecx
and    $0x1,%ecx
test   %ecx,%ecx
jne    27962 <extrgb_h2v2_merged_upsample_internal+0x1c2>
mov    -0x8(%rbp),%rbx
mov    -0x10(%rbp),%r12
mov    -0x18(%rbp),%r13
mov    -0x20(%rbp),%r14
mov    -0x28(%rbp),%r15
leaveq 
retq   
movzbl (%r12),%r12d
movslq (%r10,%r12,4),%rdi
movzbl (%r8),%r13d
lea    0x0(%r13,%rdi,1),%ecx
movslq %ecx,%rcx
movzbl (%r15,%rcx,1),%ecx
mov    (%rax,%r12,8),%rax
movzbl (%r11),%r10d
add    (%r9,%r10,8),%rax
sar    $0x10,%rax
lea    0x0(%r13,%rax,1),%r8d
movslq %r8d,%r8
movslq (%r14,%r10,4),%r9
mov    %cl,(%rdx)
movzbl (%r15,%r8,1),%ecx
mov    %cl,0x1(%rdx)
lea    0x0(%r13,%r9,1),%ecx
movslq %ecx,%rcx
movzbl (%r15,%rcx,1),%ecx
mov    %cl,0x2(%rdx)
movzbl (%rbx),%edx
lea    (%rdx,%rdi,1),%ecx
movslq %ecx,%rcx
movzbl (%r15,%rcx,1),%ecx
mov    %cl,(%rsi)
add    %edx,%eax
movslq %eax,%rax
movzbl (%r15,%rax,1),%eax
mov    %al,0x1(%rsi)
lea    (%rdx,%r9,1),%eax
movslq %eax,%rax
movzbl (%r15,%rax,1),%eax
mov    %al,0x2(%rsi)
mov    -0x8(%rbp),%rbx
mov    -0x10(%rbp),%r12
mov    -0x18(%rbp),%r13
mov    -0x20(%rbp),%r14
mov    -0x28(%rbp),%r15
leaveq 
retq   
data16 nopw %cs:0x0(%rax,%rax,1)
nop

0000000000027a00 <extrgbx_h2v1_merged_upsample_internal>:
push   %rbp
mov    %rsp,%rbp
sub    $0x40,%rsp
mov    %r15,-0x28(%rbp)
mov    %r14,-0x20(%rbp)
mov    %rdi,-0x30(%rbp)
mov    %rbx,-0x8(%rbp)
mov    %r12,-0x10(%rbp)
mov    %r13,-0x18(%rbp)
mov    0x1a8(%rdi),%r13
mov    0x260(%rdi),%rbx
mov    0x28(%rbx),%r12
mov    0x30(%rbx),%rax
mov    %rax,-0x40(%rbp)
mov    0x38(%rbx),%r8
mov    %r8,-0x38(%rbp)
mov    0x20(%rbx),%r11
mov    (%rsi),%rbx
mov    %edx,%r9d
mov    (%rbx,%r9,8),%rdx
mov    0x8(%rsi),%rbx
mov    (%rbx,%r9,8),%rbx
mov    0x10(%rsi),%rsi
mov    (%rsi,%r9,8),%r9
mov    (%rcx),%rsi
mov    0x88(%rdi),%ecx
shr    %ecx
jmpq   27b16 <extrgbx_h2v1_merged_upsample_internal+0x116>
movzbl (%r9),%r10d
movslq (%r11,%r10,4),%r15
movzbl (%rdx),%edi
lea    (%rdi,%r15,1),%r14d
movslq %r14d,%r14
movzbl 0x0(%r13,%r14,1),%r14d
mov    (%rax,%r10,8),%rax
movzbl (%rbx),%r10d
add    (%r8,%r10,8),%rax
sar    $0x10,%rax
lea    (%rdi,%rax,1),%r8d
movslq %r8d,%r8
movslq (%r12,%r10,4),%r10
mov    %r14b,(%rsi)
movzbl 0x0(%r13,%r8,1),%r8d
mov    %r8b,0x1(%rsi)
add    %r10d,%edi
movslq %edi,%rdi
movzbl (%rdi,%r13,1),%edi
mov    %dil,0x2(%rsi)
movb   $0xff,0x3(%rsi)
movzbl 0x1(%rdx),%r8d
lea    (%r8,%r15,1),%edi
movslq %edi,%rdi
movzbl 0x0(%r13,%rdi,1),%edi
mov    %dil,0x4(%rsi)
add    %r8d,%eax
movslq %eax,%rax
movzbl 0x0(%r13,%rax,1),%eax
mov    %al,0x5(%rsi)
lea    (%r8,%r10,1),%eax
movslq %eax,%rax
movzbl (%rax,%r13,1),%eax
mov    %al,0x6(%rsi)
movb   $0xff,0x7(%rsi)
add    $0x2,%rdx
add    $0x1,%rbx
add    $0x1,%r9
add    $0x8,%rsi
add    $0xffffffff,%ecx
mov    -0x38(%rbp),%r8
mov    -0x40(%rbp),%rax
test   %ecx,%ecx
jne    27a70 <extrgbx_h2v1_merged_upsample_internal+0x70>
mov    -0x30(%rbp),%rcx
mov    0x88(%rcx),%ecx
and    $0x1,%ecx
test   %ecx,%ecx
jne    27b45 <extrgbx_h2v1_merged_upsample_internal+0x145>
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
mov    -0x20(%rbp),%r14
mov    -0x28(%rbp),%r15
leaveq 
retq   
movzbl (%rdx),%ecx
movzbl (%r9),%edi
mov    %rcx,%rdx
add    (%r11,%rdi,4),%edx
movslq %edx,%rdx
movzbl 0x0(%r13,%rdx,1),%edx
mov    (%rax,%rdi,8),%rax
movzbl (%rbx),%edi
add    (%r8,%rdi,8),%rax
sar    $0x10,%rax
add    %ecx,%eax
movslq %eax,%rax
add    (%r12,%rdi,4),%ecx
mov    %dl,(%rsi)
movzbl 0x0(%r13,%rax,1),%eax
mov    %al,0x1(%rsi)
movslq %ecx,%rax
movzbl 0x0(%r13,%rax,1),%eax
mov    %al,0x2(%rsi)
movb   $0xff,0x3(%rsi)
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
mov    -0x20(%rbp),%r14
mov    -0x28(%rbp),%r15
leaveq 
retq   
data16 nopw %cs:0x0(%rax,%rax,1)

0000000000027bb0 <extrgbx_h2v2_merged_upsample_internal>:
push   %rbp
mov    %rsp,%rbp
sub    $0x50,%rsp
mov    %r15,-0x28(%rbp)
mov    %r14,-0x20(%rbp)
mov    %r13,-0x18(%rbp)
mov    %r12,-0x10(%rbp)
mov    %rdi,-0x30(%rbp)
mov    %rbx,-0x8(%rbp)
mov    0x1a8(%rdi),%r15
mov    0x260(%rdi),%rbx
mov    0x28(%rbx),%r14
mov    0x30(%rbx),%rax
mov    %rax,-0x40(%rbp)
mov    0x38(%rbx),%r9
mov    %r9,-0x38(%rbp)
mov    0x20(%rbx),%r10
mov    %r10,-0x48(%rbp)
mov    (%rsi),%r11
lea    (%rdx,%rdx,1),%r8d
lea    0x1(%r8),%ebx
mov    %ebx,%ebx
mov    (%r11,%rbx,8),%rbx
mov    %r8d,%r8d
mov    (%r11,%r8,8),%r8
mov    0x8(%rsi),%r11
mov    %edx,%r12d
mov    (%r11,%r12,8),%r11
mov    0x10(%rsi),%rdx
mov    (%rdx,%r12,8),%r12
mov    (%rcx),%rdx
mov    0x8(%rcx),%rsi
mov    0x88(%rdi),%ecx
shr    %ecx
jmpq   27d53 <extrgbx_h2v2_merged_upsample_internal+0x1a3>
movzbl (%r12),%r13d
movslq (%r10,%r13,4),%r10
movzbl (%r8),%edi
mov    %rcx,-0x50(%rbp)
lea    (%rdi,%r10,1),%ecx
movslq %ecx,%rcx
movzbl (%r15,%rcx,1),%ecx
mov    (%rax,%r13,8),%rax
movzbl (%r11),%r13d
add    (%r9,%r13,8),%rax
sar    $0x10,%rax
lea    (%rdi,%rax,1),%r9d
movslq %r9d,%r9
movslq (%r14,%r13,4),%r13
mov    %cl,(%rdx)
movzbl (%r15,%r9,1),%ecx
mov    %cl,0x1(%rdx)
lea    (%rdi,%r13,1),%ecx
movslq %ecx,%rcx
movzbl (%rcx,%r15,1),%ecx
mov    %cl,0x2(%rdx)
movb   $0xff,0x3(%rdx)
movzbl 0x1(%r8),%edi
lea    (%rdi,%r10,1),%ecx
movslq %ecx,%rcx
movzbl (%r15,%rcx,1),%ecx
mov    %cl,0x4(%rdx)
lea    (%rdi,%rax,1),%ecx
movslq %ecx,%rcx
movzbl (%r15,%rcx,1),%ecx
mov    %cl,0x5(%rdx)
lea    (%rdi,%r13,1),%ecx
movslq %ecx,%rcx
movzbl (%rcx,%r15,1),%ecx
mov    %cl,0x6(%rdx)
movb   $0xff,0x7(%rdx)
movzbl (%rbx),%edi
lea    (%rdi,%r10,1),%ecx
movslq %ecx,%rcx
movzbl (%r15,%rcx,1),%ecx
mov    %cl,(%rsi)
lea    (%rdi,%rax,1),%ecx
movslq %ecx,%rcx
movzbl (%r15,%rcx,1),%ecx
mov    %cl,0x1(%rsi)
lea    (%rdi,%r13,1),%ecx
movslq %ecx,%rcx
movzbl (%rcx,%r15,1),%ecx
mov    %cl,0x2(%rsi)
movb   $0xff,0x3(%rsi)
movzbl 0x1(%rbx),%edi
lea    (%rdi,%r10,1),%ecx
movslq %ecx,%rcx
movzbl (%r15,%rcx,1),%ecx
mov    %cl,0x4(%rsi)
add    %edi,%eax
movslq %eax,%rax
movzbl (%r15,%rax,1),%eax
mov    %al,0x5(%rsi)
lea    (%rdi,%r13,1),%eax
movslq %eax,%rax
movzbl (%rax,%r15,1),%eax
mov    %al,0x6(%rsi)
movb   $0xff,0x7(%rsi)
add    $0x2,%rbx
add    $0x2,%r8
add    $0x1,%r11
add    $0x1,%r12
add    $0x8,%rdx
add    $0x8,%rsi
mov    -0x50(%rbp),%rax
lea    -0x1(%rax),%ecx
mov    -0x38(%rbp),%r9
mov    -0x40(%rbp),%rax
mov    -0x48(%rbp),%r10
test   %ecx,%ecx
jne    27c39 <extrgbx_h2v2_merged_upsample_internal+0x89>
mov    -0x30(%rbp),%rcx
mov    0x88(%rcx),%ecx
and    $0x1,%ecx
test   %ecx,%ecx
jne    27d82 <extrgbx_h2v2_merged_upsample_internal+0x1d2>
mov    -0x8(%rbp),%rbx
mov    -0x10(%rbp),%r12
mov    -0x18(%rbp),%r13
mov    -0x20(%rbp),%r14
mov    -0x28(%rbp),%r15
leaveq 
retq   
movzbl (%r12),%r12d
movslq (%r10,%r12,4),%rdi
movzbl (%r8),%r13d
lea    0x0(%r13,%rdi,1),%ecx
movslq %ecx,%rcx
movzbl (%r15,%rcx,1),%ecx
mov    (%rax,%r12,8),%rax
movzbl (%r11),%r10d
add    (%r9,%r10,8),%rax
sar    $0x10,%rax
lea    0x0(%r13,%rax,1),%r8d
movslq %r8d,%r8
movslq (%r14,%r10,4),%r9
mov    %cl,(%rdx)
movzbl (%r15,%r8,1),%ecx
mov    %cl,0x1(%rdx)
lea    0x0(%r13,%r9,1),%ecx
movslq %ecx,%rcx
movzbl (%r15,%rcx,1),%ecx
mov    %cl,0x2(%rdx)
movb   $0xff,0x3(%rdx)
movzbl (%rbx),%edx
lea    (%rdx,%rdi,1),%ecx
movslq %ecx,%rcx
movzbl (%r15,%rcx,1),%ecx
mov    %cl,(%rsi)
add    %edx,%eax
movslq %eax,%rax
movzbl (%r15,%rax,1),%eax
mov    %al,0x1(%rsi)
lea    (%rdx,%r9,1),%eax
movslq %eax,%rax
movzbl (%r15,%rax,1),%eax
mov    %al,0x2(%rsi)
movb   $0xff,0x3(%rsi)
mov    -0x8(%rbp),%rbx
mov    -0x10(%rbp),%r12
mov    -0x18(%rbp),%r13
mov    -0x20(%rbp),%r14
mov    -0x28(%rbp),%r15
leaveq 
retq   
nopl   0x0(%rax)

0000000000027e20 <extbgr_h2v1_merged_upsample_internal>:
push   %rbp
mov    %rsp,%rbp
sub    $0x40,%rsp
mov    %r15,-0x28(%rbp)
mov    %r14,-0x20(%rbp)
mov    %rdi,-0x30(%rbp)
mov    %rbx,-0x8(%rbp)
mov    %r12,-0x10(%rbp)
mov    %r13,-0x18(%rbp)
mov    0x1a8(%rdi),%r13
mov    0x260(%rdi),%rbx
mov    0x28(%rbx),%r12
mov    0x30(%rbx),%rax
mov    %rax,-0x40(%rbp)
mov    0x38(%rbx),%r8
mov    %r8,-0x38(%rbp)
mov    0x20(%rbx),%r11
mov    (%rsi),%rbx
mov    %edx,%r9d
mov    (%rbx,%r9,8),%rdx
mov    0x8(%rsi),%rbx
mov    (%rbx,%r9,8),%rbx
mov    0x10(%rsi),%rsi
mov    (%rsi,%r9,8),%r9
mov    (%rcx),%rsi
mov    0x88(%rdi),%ecx
shr    %ecx
jmpq   27f2e <extbgr_h2v1_merged_upsample_internal+0x10e>
movzbl (%r9),%r10d
movslq (%r11,%r10,4),%r15
movzbl (%rdx),%edi
lea    (%rdi,%r15,1),%r14d
movslq %r14d,%r14
movzbl 0x0(%r13,%r14,1),%r14d
mov    (%rax,%r10,8),%rax
movzbl (%rbx),%r10d
add    (%r8,%r10,8),%rax
sar    $0x10,%rax
lea    (%rdi,%rax,1),%r8d
movslq %r8d,%r8
movslq (%r12,%r10,4),%r10
mov    %r14b,0x2(%rsi)
movzbl 0x0(%r13,%r8,1),%r8d
mov    %r8b,0x1(%rsi)
add    %r10d,%edi
movslq %edi,%rdi
movzbl (%rdi,%r13,1),%edi
mov    %dil,(%rsi)
movzbl 0x1(%rdx),%r8d
lea    (%r8,%r15,1),%edi
movslq %edi,%rdi
movzbl 0x0(%r13,%rdi,1),%edi
mov    %dil,0x5(%rsi)
add    %r8d,%eax
movslq %eax,%rax
movzbl 0x0(%r13,%rax,1),%eax
mov    %al,0x4(%rsi)
lea    (%r8,%r10,1),%eax
movslq %eax,%rax
movzbl (%rax,%r13,1),%eax
mov    %al,0x3(%rsi)
add    $0x2,%rdx
add    $0x1,%rbx
add    $0x1,%r9
add    $0x6,%rsi
add    $0xffffffff,%ecx
mov    -0x38(%rbp),%r8
mov    -0x40(%rbp),%rax
test   %ecx,%ecx
jne    27e90 <extbgr_h2v1_merged_upsample_internal+0x70>
mov    -0x30(%rbp),%rcx
mov    0x88(%rcx),%ecx
and    $0x1,%ecx
test   %ecx,%ecx
jne    27f5d <extbgr_h2v1_merged_upsample_internal+0x13d>
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
mov    -0x20(%rbp),%r14
mov    -0x28(%rbp),%r15
leaveq 
retq   
movzbl (%rdx),%ecx
movzbl (%r9),%edi
mov    %rcx,%rdx
add    (%r11,%rdi,4),%edx
movslq %edx,%rdx
movzbl 0x0(%r13,%rdx,1),%edx
mov    (%rax,%rdi,8),%rax
movzbl (%rbx),%edi
add    (%r8,%rdi,8),%rax
sar    $0x10,%rax
add    %ecx,%eax
movslq %eax,%rax
add    (%r12,%rdi,4),%ecx
mov    %dl,0x2(%rsi)
movzbl 0x0(%r13,%rax,1),%eax
mov    %al,0x1(%rsi)
movslq %ecx,%rax
movzbl 0x0(%r13,%rax,1),%eax
mov    %al,(%rsi)
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
mov    -0x20(%rbp),%r14
mov    -0x28(%rbp),%r15
leaveq 
retq   
nopl   0x0(%rax)

0000000000027fc0 <extbgr_h2v2_merged_upsample_internal>:
push   %rbp
mov    %rsp,%rbp
sub    $0x50,%rsp
mov    %r15,-0x28(%rbp)
mov    %r14,-0x20(%rbp)
mov    %r13,-0x18(%rbp)
mov    %r12,-0x10(%rbp)
mov    %rdi,-0x30(%rbp)
mov    %rbx,-0x8(%rbp)
mov    0x1a8(%rdi),%r15
mov    0x260(%rdi),%rbx
mov    0x28(%rbx),%r14
mov    0x30(%rbx),%rax
mov    %rax,-0x40(%rbp)
mov    0x38(%rbx),%r9
mov    %r9,-0x38(%rbp)
mov    0x20(%rbx),%r10
mov    %r10,-0x48(%rbp)
mov    (%rsi),%r11
lea    (%rdx,%rdx,1),%r8d
lea    0x1(%r8),%ebx
mov    %ebx,%ebx
mov    (%r11,%rbx,8),%rbx
mov    %r8d,%r8d
mov    (%r11,%r8,8),%r8
mov    0x8(%rsi),%r11
mov    %edx,%r12d
mov    (%r11,%r12,8),%r11
mov    0x10(%rsi),%rdx
mov    (%rdx,%r12,8),%r12
mov    (%rcx),%rdx
mov    0x8(%rcx),%rsi
mov    0x88(%rdi),%ecx
shr    %ecx
jmpq   28153 <extbgr_h2v2_merged_upsample_internal+0x193>
movzbl (%r12),%r13d
movslq (%r10,%r13,4),%r10
movzbl (%r8),%edi
mov    %rcx,-0x50(%rbp)
lea    (%rdi,%r10,1),%ecx
movslq %ecx,%rcx
movzbl (%r15,%rcx,1),%ecx
mov    (%rax,%r13,8),%rax
movzbl (%r11),%r13d
add    (%r9,%r13,8),%rax
sar    $0x10,%rax
lea    (%rdi,%rax,1),%r9d
movslq %r9d,%r9
movslq (%r14,%r13,4),%r13
mov    %cl,0x2(%rdx)
movzbl (%r15,%r9,1),%ecx
mov    %cl,0x1(%rdx)
lea    (%rdi,%r13,1),%ecx
movslq %ecx,%rcx
movzbl (%rcx,%r15,1),%ecx
mov    %cl,(%rdx)
movzbl 0x1(%r8),%edi
lea    (%rdi,%r10,1),%ecx
movslq %ecx,%rcx
movzbl (%r15,%rcx,1),%ecx
mov    %cl,0x5(%rdx)
lea    (%rdi,%rax,1),%ecx
movslq %ecx,%rcx
movzbl (%r15,%rcx,1),%ecx
mov    %cl,0x4(%rdx)
lea    (%rdi,%r13,1),%ecx
movslq %ecx,%rcx
movzbl (%rcx,%r15,1),%ecx
mov    %cl,0x3(%rdx)
movzbl (%rbx),%edi
lea    (%rdi,%r10,1),%ecx
movslq %ecx,%rcx
movzbl (%r15,%rcx,1),%ecx
mov    %cl,0x2(%rsi)
lea    (%rdi,%rax,1),%ecx
movslq %ecx,%rcx
movzbl (%r15,%rcx,1),%ecx
mov    %cl,0x1(%rsi)
lea    (%rdi,%r13,1),%ecx
movslq %ecx,%rcx
movzbl (%rcx,%r15,1),%ecx
mov    %cl,(%rsi)
movzbl 0x1(%rbx),%edi
lea    (%rdi,%r10,1),%ecx
movslq %ecx,%rcx
movzbl (%r15,%rcx,1),%ecx
mov    %cl,0x5(%rsi)
add    %edi,%eax
movslq %eax,%rax
movzbl (%r15,%rax,1),%eax
mov    %al,0x4(%rsi)
lea    (%rdi,%r13,1),%eax
movslq %eax,%rax
movzbl (%rax,%r15,1),%eax
mov    %al,0x3(%rsi)
add    $0x2,%rbx
add    $0x2,%r8
add    $0x1,%r11
add    $0x1,%r12
add    $0x6,%rdx
add    $0x6,%rsi
mov    -0x50(%rbp),%rax
lea    -0x1(%rax),%ecx
mov    -0x38(%rbp),%r9
mov    -0x40(%rbp),%rax
mov    -0x48(%rbp),%r10
test   %ecx,%ecx
jne    28049 <extbgr_h2v2_merged_upsample_internal+0x89>
mov    -0x30(%rbp),%rcx
mov    0x88(%rcx),%ecx
and    $0x1,%ecx
test   %ecx,%ecx
jne    28182 <extbgr_h2v2_merged_upsample_internal+0x1c2>
mov    -0x8(%rbp),%rbx
mov    -0x10(%rbp),%r12
mov    -0x18(%rbp),%r13
mov    -0x20(%rbp),%r14
mov    -0x28(%rbp),%r15
leaveq 
retq   
movzbl (%r12),%r12d
movslq (%r10,%r12,4),%rdi
movzbl (%r8),%r13d
lea    0x0(%r13,%rdi,1),%ecx
movslq %ecx,%rcx
movzbl (%r15,%rcx,1),%ecx
mov    (%rax,%r12,8),%rax
movzbl (%r11),%r10d
add    (%r9,%r10,8),%rax
sar    $0x10,%rax
lea    0x0(%r13,%rax,1),%r8d
movslq %r8d,%r8
movslq (%r14,%r10,4),%r9
mov    %cl,0x2(%rdx)
movzbl (%r15,%r8,1),%ecx
mov    %cl,0x1(%rdx)
lea    0x0(%r13,%r9,1),%ecx
movslq %ecx,%rcx
movzbl (%r15,%rcx,1),%ecx
mov    %cl,(%rdx)
movzbl (%rbx),%edx
lea    (%rdx,%rdi,1),%ecx
movslq %ecx,%rcx
movzbl (%r15,%rcx,1),%ecx
mov    %cl,0x2(%rsi)
add    %edx,%eax
movslq %eax,%rax
movzbl (%r15,%rax,1),%eax
mov    %al,0x1(%rsi)
lea    (%rdx,%r9,1),%eax
movslq %eax,%rax
movzbl (%r15,%rax,1),%eax
mov    %al,(%rsi)
mov    -0x8(%rbp),%rbx
mov    -0x10(%rbp),%r12
mov    -0x18(%rbp),%r13
mov    -0x20(%rbp),%r14
mov    -0x28(%rbp),%r15
leaveq 
retq   
data16 nopw %cs:0x0(%rax,%rax,1)
nop

0000000000028220 <extbgrx_h2v1_merged_upsample_internal>:
push   %rbp
mov    %rsp,%rbp
sub    $0x40,%rsp
mov    %r15,-0x28(%rbp)
mov    %r14,-0x20(%rbp)
mov    %rdi,-0x30(%rbp)
mov    %rbx,-0x8(%rbp)
mov    %r12,-0x10(%rbp)
mov    %r13,-0x18(%rbp)
mov    0x1a8(%rdi),%r13
mov    0x260(%rdi),%rbx
mov    0x28(%rbx),%r12
mov    0x30(%rbx),%rax
mov    %rax,-0x40(%rbp)
mov    0x38(%rbx),%r8
mov    %r8,-0x38(%rbp)
mov    0x20(%rbx),%r11
mov    (%rsi),%rbx
mov    %edx,%r9d
mov    (%rbx,%r9,8),%rdx
mov    0x8(%rsi),%rbx
mov    (%rbx,%r9,8),%rbx
mov    0x10(%rsi),%rsi
mov    (%rsi,%r9,8),%r9
mov    (%rcx),%rsi
mov    0x88(%rdi),%ecx
shr    %ecx
jmpq   28336 <extbgrx_h2v1_merged_upsample_internal+0x116>
movzbl (%r9),%r10d
movslq (%r11,%r10,4),%r15
movzbl (%rdx),%edi
lea    (%rdi,%r15,1),%r14d
movslq %r14d,%r14
movzbl 0x0(%r13,%r14,1),%r14d
mov    (%rax,%r10,8),%rax
movzbl (%rbx),%r10d
add    (%r8,%r10,8),%rax
sar    $0x10,%rax
lea    (%rdi,%rax,1),%r8d
movslq %r8d,%r8
movslq (%r12,%r10,4),%r10
mov    %r14b,0x2(%rsi)
movzbl 0x0(%r13,%r8,1),%r8d
mov    %r8b,0x1(%rsi)
add    %r10d,%edi
movslq %edi,%rdi
movzbl (%rdi,%r13,1),%edi
mov    %dil,(%rsi)
movb   $0xff,0x3(%rsi)
movzbl 0x1(%rdx),%r8d
lea    (%r8,%r15,1),%edi
movslq %edi,%rdi
movzbl 0x0(%r13,%rdi,1),%edi
mov    %dil,0x6(%rsi)
add    %r8d,%eax
movslq %eax,%rax
movzbl 0x0(%r13,%rax,1),%eax
mov    %al,0x5(%rsi)
lea    (%r8,%r10,1),%eax
movslq %eax,%rax
movzbl (%rax,%r13,1),%eax
mov    %al,0x4(%rsi)
movb   $0xff,0x7(%rsi)
add    $0x2,%rdx
add    $0x1,%rbx
add    $0x1,%r9
add    $0x8,%rsi
add    $0xffffffff,%ecx
mov    -0x38(%rbp),%r8
mov    -0x40(%rbp),%rax
test   %ecx,%ecx
jne    28290 <extbgrx_h2v1_merged_upsample_internal+0x70>
mov    -0x30(%rbp),%rcx
mov    0x88(%rcx),%ecx
and    $0x1,%ecx
test   %ecx,%ecx
jne    28365 <extbgrx_h2v1_merged_upsample_internal+0x145>
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
mov    -0x20(%rbp),%r14
mov    -0x28(%rbp),%r15
leaveq 
retq   
movzbl (%rdx),%ecx
movzbl (%r9),%edi
mov    %rcx,%rdx
add    (%r11,%rdi,4),%edx
movslq %edx,%rdx
movzbl 0x0(%r13,%rdx,1),%edx
mov    (%rax,%rdi,8),%rax
movzbl (%rbx),%edi
add    (%r8,%rdi,8),%rax
sar    $0x10,%rax
add    %ecx,%eax
movslq %eax,%rax
add    (%r12,%rdi,4),%ecx
mov    %dl,0x2(%rsi)
movzbl 0x0(%r13,%rax,1),%eax
mov    %al,0x1(%rsi)
movslq %ecx,%rax
movzbl 0x0(%r13,%rax,1),%eax
mov    %al,(%rsi)
movb   $0xff,0x3(%rsi)
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
mov    -0x20(%rbp),%r14
mov    -0x28(%rbp),%r15
leaveq 
retq   
data16 nopw %cs:0x0(%rax,%rax,1)

00000000000283d0 <extbgrx_h2v2_merged_upsample_internal>:
push   %rbp
mov    %rsp,%rbp
sub    $0x50,%rsp
mov    %r15,-0x28(%rbp)
mov    %r14,-0x20(%rbp)
mov    %r13,-0x18(%rbp)
mov    %r12,-0x10(%rbp)
mov    %rdi,-0x30(%rbp)
mov    %rbx,-0x8(%rbp)
mov    0x1a8(%rdi),%r15
mov    0x260(%rdi),%rbx
mov    0x28(%rbx),%r14
mov    0x30(%rbx),%rax
mov    %rax,-0x40(%rbp)
mov    0x38(%rbx),%r9
mov    %r9,-0x38(%rbp)
mov    0x20(%rbx),%r10
mov    %r10,-0x48(%rbp)
mov    (%rsi),%r11
lea    (%rdx,%rdx,1),%r8d
lea    0x1(%r8),%ebx
mov    %ebx,%ebx
mov    (%r11,%rbx,8),%rbx
mov    %r8d,%r8d
mov    (%r11,%r8,8),%r8
mov    0x8(%rsi),%r11
mov    %edx,%r12d
mov    (%r11,%r12,8),%r11
mov    0x10(%rsi),%rdx
mov    (%rdx,%r12,8),%r12
mov    (%rcx),%rdx
mov    0x8(%rcx),%rsi
mov    0x88(%rdi),%ecx
shr    %ecx
jmpq   28573 <extbgrx_h2v2_merged_upsample_internal+0x1a3>
movzbl (%r12),%r13d
movslq (%r10,%r13,4),%r10
movzbl (%r8),%edi
mov    %rcx,-0x50(%rbp)
lea    (%rdi,%r10,1),%ecx
movslq %ecx,%rcx
movzbl (%r15,%rcx,1),%ecx
mov    (%rax,%r13,8),%rax
movzbl (%r11),%r13d
add    (%r9,%r13,8),%rax
sar    $0x10,%rax
lea    (%rdi,%rax,1),%r9d
movslq %r9d,%r9
movslq (%r14,%r13,4),%r13
mov    %cl,0x2(%rdx)
movzbl (%r15,%r9,1),%ecx
mov    %cl,0x1(%rdx)
lea    (%rdi,%r13,1),%ecx
movslq %ecx,%rcx
movzbl (%rcx,%r15,1),%ecx
mov    %cl,(%rdx)
movb   $0xff,0x3(%rdx)
movzbl 0x1(%r8),%edi
lea    (%rdi,%r10,1),%ecx
movslq %ecx,%rcx
movzbl (%r15,%rcx,1),%ecx
mov    %cl,0x6(%rdx)
lea    (%rdi,%rax,1),%ecx
movslq %ecx,%rcx
movzbl (%r15,%rcx,1),%ecx
mov    %cl,0x5(%rdx)
lea    (%rdi,%r13,1),%ecx
movslq %ecx,%rcx
movzbl (%rcx,%r15,1),%ecx
mov    %cl,0x4(%rdx)
movb   $0xff,0x7(%rdx)
movzbl (%rbx),%edi
lea    (%rdi,%r10,1),%ecx
movslq %ecx,%rcx
movzbl (%r15,%rcx,1),%ecx
mov    %cl,0x2(%rsi)
lea    (%rdi,%rax,1),%ecx
movslq %ecx,%rcx
movzbl (%r15,%rcx,1),%ecx
mov    %cl,0x1(%rsi)
lea    (%rdi,%r13,1),%ecx
movslq %ecx,%rcx
movzbl (%rcx,%r15,1),%ecx
mov    %cl,(%rsi)
movb   $0xff,0x3(%rsi)
movzbl 0x1(%rbx),%edi
lea    (%rdi,%r10,1),%ecx
movslq %ecx,%rcx
movzbl (%r15,%rcx,1),%ecx
mov    %cl,0x6(%rsi)
add    %edi,%eax
movslq %eax,%rax
movzbl (%r15,%rax,1),%eax
mov    %al,0x5(%rsi)
lea    (%rdi,%r13,1),%eax
movslq %eax,%rax
movzbl (%rax,%r15,1),%eax
mov    %al,0x4(%rsi)
movb   $0xff,0x7(%rsi)
add    $0x2,%rbx
add    $0x2,%r8
add    $0x1,%r11
add    $0x1,%r12
add    $0x8,%rdx
add    $0x8,%rsi
mov    -0x50(%rbp),%rax
lea    -0x1(%rax),%ecx
mov    -0x38(%rbp),%r9
mov    -0x40(%rbp),%rax
mov    -0x48(%rbp),%r10
test   %ecx,%ecx
jne    28459 <extbgrx_h2v2_merged_upsample_internal+0x89>
mov    -0x30(%rbp),%rcx
mov    0x88(%rcx),%ecx
and    $0x1,%ecx
test   %ecx,%ecx
jne    285a2 <extbgrx_h2v2_merged_upsample_internal+0x1d2>
mov    -0x8(%rbp),%rbx
mov    -0x10(%rbp),%r12
mov    -0x18(%rbp),%r13
mov    -0x20(%rbp),%r14
mov    -0x28(%rbp),%r15
leaveq 
retq   
movzbl (%r12),%r12d
movslq (%r10,%r12,4),%rdi
movzbl (%r8),%r13d
lea    0x0(%r13,%rdi,1),%ecx
movslq %ecx,%rcx
movzbl (%r15,%rcx,1),%ecx
mov    (%rax,%r12,8),%rax
movzbl (%r11),%r10d
add    (%r9,%r10,8),%rax
sar    $0x10,%rax
lea    0x0(%r13,%rax,1),%r8d
movslq %r8d,%r8
movslq (%r14,%r10,4),%r9
mov    %cl,0x2(%rdx)
movzbl (%r15,%r8,1),%ecx
mov    %cl,0x1(%rdx)
lea    0x0(%r13,%r9,1),%ecx
movslq %ecx,%rcx
movzbl (%r15,%rcx,1),%ecx
mov    %cl,(%rdx)
movb   $0xff,0x3(%rdx)
movzbl (%rbx),%edx
lea    (%rdx,%rdi,1),%ecx
movslq %ecx,%rcx
movzbl (%r15,%rcx,1),%ecx
mov    %cl,0x2(%rsi)
add    %edx,%eax
movslq %eax,%rax
movzbl (%r15,%rax,1),%eax
mov    %al,0x1(%rsi)
lea    (%rdx,%r9,1),%eax
movslq %eax,%rax
movzbl (%r15,%rax,1),%eax
mov    %al,(%rsi)
movb   $0xff,0x3(%rsi)
mov    -0x8(%rbp),%rbx
mov    -0x10(%rbp),%r12
mov    -0x18(%rbp),%r13
mov    -0x20(%rbp),%r14
mov    -0x28(%rbp),%r15
leaveq 
retq   
nopl   0x0(%rax)

0000000000028640 <extxbgr_h2v1_merged_upsample_internal>:
push   %rbp
mov    %rsp,%rbp
sub    $0x40,%rsp
mov    %r15,-0x28(%rbp)
mov    %r14,-0x20(%rbp)
mov    %rdi,-0x30(%rbp)
mov    %rbx,-0x8(%rbp)
mov    %r12,-0x10(%rbp)
mov    %r13,-0x18(%rbp)
mov    0x1a8(%rdi),%r13
mov    0x260(%rdi),%rbx
mov    0x28(%rbx),%r12
mov    0x30(%rbx),%rax
mov    %rax,-0x40(%rbp)
mov    0x38(%rbx),%r8
mov    %r8,-0x38(%rbp)
mov    0x20(%rbx),%r11
mov    (%rsi),%rbx
mov    %edx,%r9d
mov    (%rbx,%r9,8),%rdx
mov    0x8(%rsi),%rbx
mov    (%rbx,%r9,8),%rbx
mov    0x10(%rsi),%rsi
mov    (%rsi,%r9,8),%r9
mov    (%rcx),%rsi
mov    0x88(%rdi),%ecx
shr    %ecx
jmpq   28756 <extxbgr_h2v1_merged_upsample_internal+0x116>
movzbl (%r9),%r10d
movslq (%r11,%r10,4),%r15
movzbl (%rdx),%edi
lea    (%rdi,%r15,1),%r14d
movslq %r14d,%r14
movzbl 0x0(%r13,%r14,1),%r14d
mov    (%rax,%r10,8),%rax
movzbl (%rbx),%r10d
add    (%r8,%r10,8),%rax
sar    $0x10,%rax
lea    (%rdi,%rax,1),%r8d
movslq %r8d,%r8
movslq (%r12,%r10,4),%r10
mov    %r14b,0x3(%rsi)
movzbl 0x0(%r13,%r8,1),%r8d
mov    %r8b,0x2(%rsi)
add    %r10d,%edi
movslq %edi,%rdi
movzbl (%rdi,%r13,1),%edi
mov    %dil,0x1(%rsi)
movb   $0xff,(%rsi)
movzbl 0x1(%rdx),%r8d
lea    (%r8,%r15,1),%edi
movslq %edi,%rdi
movzbl 0x0(%r13,%rdi,1),%edi
mov    %dil,0x7(%rsi)
add    %r8d,%eax
movslq %eax,%rax
movzbl 0x0(%r13,%rax,1),%eax
mov    %al,0x6(%rsi)
lea    (%r8,%r10,1),%eax
movslq %eax,%rax
movzbl (%rax,%r13,1),%eax
mov    %al,0x5(%rsi)
movb   $0xff,0x4(%rsi)
add    $0x2,%rdx
add    $0x1,%rbx
add    $0x1,%r9
add    $0x8,%rsi
add    $0xffffffff,%ecx
mov    -0x38(%rbp),%r8
mov    -0x40(%rbp),%rax
test   %ecx,%ecx
jne    286b0 <extxbgr_h2v1_merged_upsample_internal+0x70>
mov    -0x30(%rbp),%rcx
mov    0x88(%rcx),%ecx
and    $0x1,%ecx
test   %ecx,%ecx
jne    28785 <extxbgr_h2v1_merged_upsample_internal+0x145>
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
mov    -0x20(%rbp),%r14
mov    -0x28(%rbp),%r15
leaveq 
retq   
movzbl (%rdx),%ecx
movzbl (%r9),%edi
mov    %rcx,%rdx
add    (%r11,%rdi,4),%edx
movslq %edx,%rdx
movzbl 0x0(%r13,%rdx,1),%edx
mov    (%rax,%rdi,8),%rax
movzbl (%rbx),%edi
add    (%r8,%rdi,8),%rax
sar    $0x10,%rax
add    %ecx,%eax
movslq %eax,%rax
add    (%r12,%rdi,4),%ecx
mov    %dl,0x3(%rsi)
movzbl 0x0(%r13,%rax,1),%eax
mov    %al,0x2(%rsi)
movslq %ecx,%rax
movzbl 0x0(%r13,%rax,1),%eax
mov    %al,0x1(%rsi)
movb   $0xff,(%rsi)
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
mov    -0x20(%rbp),%r14
mov    -0x28(%rbp),%r15
leaveq 
retq   
data16 nopw %cs:0x0(%rax,%rax,1)

00000000000287f0 <extxbgr_h2v2_merged_upsample_internal>:
push   %rbp
mov    %rsp,%rbp
sub    $0x50,%rsp
mov    %r15,-0x28(%rbp)
mov    %r14,-0x20(%rbp)
mov    %r13,-0x18(%rbp)
mov    %r12,-0x10(%rbp)
mov    %rdi,-0x30(%rbp)
mov    %rbx,-0x8(%rbp)
mov    0x1a8(%rdi),%r15
mov    0x260(%rdi),%rbx
mov    0x28(%rbx),%r14
mov    0x30(%rbx),%rax
mov    %rax,-0x40(%rbp)
mov    0x38(%rbx),%r9
mov    %r9,-0x38(%rbp)
mov    0x20(%rbx),%r10
mov    %r10,-0x48(%rbp)
mov    (%rsi),%r11
lea    (%rdx,%rdx,1),%r8d
lea    0x1(%r8),%ebx
mov    %ebx,%ebx
mov    (%r11,%rbx,8),%rbx
mov    %r8d,%r8d
mov    (%r11,%r8,8),%r8
mov    0x8(%rsi),%r11
mov    %edx,%r12d
mov    (%r11,%r12,8),%r11
mov    0x10(%rsi),%rdx
mov    (%rdx,%r12,8),%r12
mov    (%rcx),%rdx
mov    0x8(%rcx),%rsi
mov    0x88(%rdi),%ecx
shr    %ecx
jmpq   28993 <extxbgr_h2v2_merged_upsample_internal+0x1a3>
movzbl (%r12),%r13d
movslq (%r10,%r13,4),%r10
movzbl (%r8),%edi
mov    %rcx,-0x50(%rbp)
lea    (%rdi,%r10,1),%ecx
movslq %ecx,%rcx
movzbl (%r15,%rcx,1),%ecx
mov    (%rax,%r13,8),%rax
movzbl (%r11),%r13d
add    (%r9,%r13,8),%rax
sar    $0x10,%rax
lea    (%rdi,%rax,1),%r9d
movslq %r9d,%r9
movslq (%r14,%r13,4),%r13
mov    %cl,0x3(%rdx)
movzbl (%r15,%r9,1),%ecx
mov    %cl,0x2(%rdx)
lea    (%rdi,%r13,1),%ecx
movslq %ecx,%rcx
movzbl (%rcx,%r15,1),%ecx
mov    %cl,0x1(%rdx)
movb   $0xff,(%rdx)
movzbl 0x1(%r8),%edi
lea    (%rdi,%r10,1),%ecx
movslq %ecx,%rcx
movzbl (%r15,%rcx,1),%ecx
mov    %cl,0x7(%rdx)
lea    (%rdi,%rax,1),%ecx
movslq %ecx,%rcx
movzbl (%r15,%rcx,1),%ecx
mov    %cl,0x6(%rdx)
lea    (%rdi,%r13,1),%ecx
movslq %ecx,%rcx
movzbl (%rcx,%r15,1),%ecx
mov    %cl,0x5(%rdx)
movb   $0xff,0x4(%rdx)
movzbl (%rbx),%edi
lea    (%rdi,%r10,1),%ecx
movslq %ecx,%rcx
movzbl (%r15,%rcx,1),%ecx
mov    %cl,0x3(%rsi)
lea    (%rdi,%rax,1),%ecx
movslq %ecx,%rcx
movzbl (%r15,%rcx,1),%ecx
mov    %cl,0x2(%rsi)
lea    (%rdi,%r13,1),%ecx
movslq %ecx,%rcx
movzbl (%rcx,%r15,1),%ecx
mov    %cl,0x1(%rsi)
movb   $0xff,(%rsi)
movzbl 0x1(%rbx),%edi
lea    (%rdi,%r10,1),%ecx
movslq %ecx,%rcx
movzbl (%r15,%rcx,1),%ecx
mov    %cl,0x7(%rsi)
add    %edi,%eax
movslq %eax,%rax
movzbl (%r15,%rax,1),%eax
mov    %al,0x6(%rsi)
lea    (%rdi,%r13,1),%eax
movslq %eax,%rax
movzbl (%rax,%r15,1),%eax
mov    %al,0x5(%rsi)
movb   $0xff,0x4(%rsi)
add    $0x2,%rbx
add    $0x2,%r8
add    $0x1,%r11
add    $0x1,%r12
add    $0x8,%rdx
add    $0x8,%rsi
mov    -0x50(%rbp),%rax
lea    -0x1(%rax),%ecx
mov    -0x38(%rbp),%r9
mov    -0x40(%rbp),%rax
mov    -0x48(%rbp),%r10
test   %ecx,%ecx
jne    28879 <extxbgr_h2v2_merged_upsample_internal+0x89>
mov    -0x30(%rbp),%rcx
mov    0x88(%rcx),%ecx
and    $0x1,%ecx
test   %ecx,%ecx
jne    289c2 <extxbgr_h2v2_merged_upsample_internal+0x1d2>
mov    -0x8(%rbp),%rbx
mov    -0x10(%rbp),%r12
mov    -0x18(%rbp),%r13
mov    -0x20(%rbp),%r14
mov    -0x28(%rbp),%r15
leaveq 
retq   
movzbl (%r12),%r12d
movslq (%r10,%r12,4),%rdi
movzbl (%r8),%r13d
lea    0x0(%r13,%rdi,1),%ecx
movslq %ecx,%rcx
movzbl (%r15,%rcx,1),%ecx
mov    (%rax,%r12,8),%rax
movzbl (%r11),%r10d
add    (%r9,%r10,8),%rax
sar    $0x10,%rax
lea    0x0(%r13,%rax,1),%r8d
movslq %r8d,%r8
movslq (%r14,%r10,4),%r9
mov    %cl,0x3(%rdx)
movzbl (%r15,%r8,1),%ecx
mov    %cl,0x2(%rdx)
lea    0x0(%r13,%r9,1),%ecx
movslq %ecx,%rcx
movzbl (%r15,%rcx,1),%ecx
mov    %cl,0x1(%rdx)
movb   $0xff,(%rdx)
movzbl (%rbx),%edx
lea    (%rdx,%rdi,1),%ecx
movslq %ecx,%rcx
movzbl (%r15,%rcx,1),%ecx
mov    %cl,0x3(%rsi)
add    %edx,%eax
movslq %eax,%rax
movzbl (%r15,%rax,1),%eax
mov    %al,0x2(%rsi)
lea    (%rdx,%r9,1),%eax
movslq %eax,%rax
movzbl (%r15,%rax,1),%eax
mov    %al,0x1(%rsi)
movb   $0xff,(%rsi)
mov    -0x8(%rbp),%rbx
mov    -0x10(%rbp),%r12
mov    -0x18(%rbp),%r13
mov    -0x20(%rbp),%r14
mov    -0x28(%rbp),%r15
leaveq 
retq   
nopl   0x0(%rax)

0000000000028a60 <extxrgb_h2v1_merged_upsample_internal>:
push   %rbp
mov    %rsp,%rbp
sub    $0x40,%rsp
mov    %r15,-0x28(%rbp)
mov    %r14,-0x20(%rbp)
mov    %rdi,-0x30(%rbp)
mov    %rbx,-0x8(%rbp)
mov    %r12,-0x10(%rbp)
mov    %r13,-0x18(%rbp)
mov    0x1a8(%rdi),%r13
mov    0x260(%rdi),%rbx
mov    0x28(%rbx),%r12
mov    0x30(%rbx),%rax
mov    %rax,-0x40(%rbp)
mov    0x38(%rbx),%r8
mov    %r8,-0x38(%rbp)
mov    0x20(%rbx),%r11
mov    (%rsi),%rbx
mov    %edx,%r9d
mov    (%rbx,%r9,8),%rdx
mov    0x8(%rsi),%rbx
mov    (%rbx,%r9,8),%rbx
mov    0x10(%rsi),%rsi
mov    (%rsi,%r9,8),%r9
mov    (%rcx),%rsi
mov    0x88(%rdi),%ecx
shr    %ecx
jmpq   28b76 <extxrgb_h2v1_merged_upsample_internal+0x116>
movzbl (%r9),%r10d
movslq (%r11,%r10,4),%r15
movzbl (%rdx),%edi
lea    (%rdi,%r15,1),%r14d
movslq %r14d,%r14
movzbl 0x0(%r13,%r14,1),%r14d
mov    (%rax,%r10,8),%rax
movzbl (%rbx),%r10d
add    (%r8,%r10,8),%rax
sar    $0x10,%rax
lea    (%rdi,%rax,1),%r8d
movslq %r8d,%r8
movslq (%r12,%r10,4),%r10
mov    %r14b,0x1(%rsi)
movzbl 0x0(%r13,%r8,1),%r8d
mov    %r8b,0x2(%rsi)
add    %r10d,%edi
movslq %edi,%rdi
movzbl (%rdi,%r13,1),%edi
mov    %dil,0x3(%rsi)
movb   $0xff,(%rsi)
movzbl 0x1(%rdx),%r8d
lea    (%r8,%r15,1),%edi
movslq %edi,%rdi
movzbl 0x0(%r13,%rdi,1),%edi
mov    %dil,0x5(%rsi)
add    %r8d,%eax
movslq %eax,%rax
movzbl 0x0(%r13,%rax,1),%eax
mov    %al,0x6(%rsi)
lea    (%r8,%r10,1),%eax
movslq %eax,%rax
movzbl (%rax,%r13,1),%eax
mov    %al,0x7(%rsi)
movb   $0xff,0x4(%rsi)
add    $0x2,%rdx
add    $0x1,%rbx
add    $0x1,%r9
add    $0x8,%rsi
add    $0xffffffff,%ecx
mov    -0x38(%rbp),%r8
mov    -0x40(%rbp),%rax
test   %ecx,%ecx
jne    28ad0 <extxrgb_h2v1_merged_upsample_internal+0x70>
mov    -0x30(%rbp),%rcx
mov    0x88(%rcx),%ecx
and    $0x1,%ecx
test   %ecx,%ecx
jne    28ba5 <extxrgb_h2v1_merged_upsample_internal+0x145>
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
mov    -0x20(%rbp),%r14
mov    -0x28(%rbp),%r15
leaveq 
retq   
movzbl (%rdx),%ecx
movzbl (%r9),%edi
mov    %rcx,%rdx
add    (%r11,%rdi,4),%edx
movslq %edx,%rdx
movzbl 0x0(%r13,%rdx,1),%edx
mov    (%rax,%rdi,8),%rax
movzbl (%rbx),%edi
add    (%r8,%rdi,8),%rax
sar    $0x10,%rax
add    %ecx,%eax
movslq %eax,%rax
add    (%r12,%rdi,4),%ecx
mov    %dl,0x1(%rsi)
movzbl 0x0(%r13,%rax,1),%eax
mov    %al,0x2(%rsi)
movslq %ecx,%rax
movzbl 0x0(%r13,%rax,1),%eax
mov    %al,0x3(%rsi)
movb   $0xff,(%rsi)
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
mov    -0x20(%rbp),%r14
mov    -0x28(%rbp),%r15
leaveq 
retq   
data16 nopw %cs:0x0(%rax,%rax,1)

0000000000028c10 <extxrgb_h2v2_merged_upsample_internal>:
push   %rbp
mov    %rsp,%rbp
sub    $0x50,%rsp
mov    %r15,-0x28(%rbp)
mov    %r14,-0x20(%rbp)
mov    %r13,-0x18(%rbp)
mov    %r12,-0x10(%rbp)
mov    %rdi,-0x30(%rbp)
mov    %rbx,-0x8(%rbp)
mov    0x1a8(%rdi),%r15
mov    0x260(%rdi),%rbx
mov    0x28(%rbx),%r14
mov    0x30(%rbx),%rax
mov    %rax,-0x40(%rbp)
mov    0x38(%rbx),%r9
mov    %r9,-0x38(%rbp)
mov    0x20(%rbx),%r10
mov    %r10,-0x48(%rbp)
mov    (%rsi),%r11
lea    (%rdx,%rdx,1),%r8d
lea    0x1(%r8),%ebx
mov    %ebx,%ebx
mov    (%r11,%rbx,8),%rbx
mov    %r8d,%r8d
mov    (%r11,%r8,8),%r8
mov    0x8(%rsi),%r11
mov    %edx,%r12d
mov    (%r11,%r12,8),%r11
mov    0x10(%rsi),%rdx
mov    (%rdx,%r12,8),%r12
mov    (%rcx),%rdx
mov    0x8(%rcx),%rsi
mov    0x88(%rdi),%ecx
shr    %ecx
jmpq   28db3 <extxrgb_h2v2_merged_upsample_internal+0x1a3>
movzbl (%r12),%r13d
movslq (%r10,%r13,4),%r10
movzbl (%r8),%edi
mov    %rcx,-0x50(%rbp)
lea    (%rdi,%r10,1),%ecx
movslq %ecx,%rcx
movzbl (%r15,%rcx,1),%ecx
mov    (%rax,%r13,8),%rax
movzbl (%r11),%r13d
add    (%r9,%r13,8),%rax
sar    $0x10,%rax
lea    (%rdi,%rax,1),%r9d
movslq %r9d,%r9
movslq (%r14,%r13,4),%r13
mov    %cl,0x1(%rdx)
movzbl (%r15,%r9,1),%ecx
mov    %cl,0x2(%rdx)
lea    (%rdi,%r13,1),%ecx
movslq %ecx,%rcx
movzbl (%rcx,%r15,1),%ecx
mov    %cl,0x3(%rdx)
movb   $0xff,(%rdx)
movzbl 0x1(%r8),%edi
lea    (%rdi,%r10,1),%ecx
movslq %ecx,%rcx
movzbl (%r15,%rcx,1),%ecx
mov    %cl,0x5(%rdx)
lea    (%rdi,%rax,1),%ecx
movslq %ecx,%rcx
movzbl (%r15,%rcx,1),%ecx
mov    %cl,0x6(%rdx)
lea    (%rdi,%r13,1),%ecx
movslq %ecx,%rcx
movzbl (%rcx,%r15,1),%ecx
mov    %cl,0x7(%rdx)
movb   $0xff,0x4(%rdx)
movzbl (%rbx),%edi
lea    (%rdi,%r10,1),%ecx
movslq %ecx,%rcx
movzbl (%r15,%rcx,1),%ecx
mov    %cl,0x1(%rsi)
lea    (%rdi,%rax,1),%ecx
movslq %ecx,%rcx
movzbl (%r15,%rcx,1),%ecx
mov    %cl,0x2(%rsi)
lea    (%rdi,%r13,1),%ecx
movslq %ecx,%rcx
movzbl (%rcx,%r15,1),%ecx
mov    %cl,0x3(%rsi)
movb   $0xff,(%rsi)
movzbl 0x1(%rbx),%edi
lea    (%rdi,%r10,1),%ecx
movslq %ecx,%rcx
movzbl (%r15,%rcx,1),%ecx
mov    %cl,0x5(%rsi)
add    %edi,%eax
movslq %eax,%rax
movzbl (%r15,%rax,1),%eax
mov    %al,0x6(%rsi)
lea    (%rdi,%r13,1),%eax
movslq %eax,%rax
movzbl (%rax,%r15,1),%eax
mov    %al,0x7(%rsi)
movb   $0xff,0x4(%rsi)
add    $0x2,%rbx
add    $0x2,%r8
add    $0x1,%r11
add    $0x1,%r12
add    $0x8,%rdx
add    $0x8,%rsi
mov    -0x50(%rbp),%rax
lea    -0x1(%rax),%ecx
mov    -0x38(%rbp),%r9
mov    -0x40(%rbp),%rax
mov    -0x48(%rbp),%r10
test   %ecx,%ecx
jne    28c99 <extxrgb_h2v2_merged_upsample_internal+0x89>
mov    -0x30(%rbp),%rcx
mov    0x88(%rcx),%ecx
and    $0x1,%ecx
test   %ecx,%ecx
jne    28de2 <extxrgb_h2v2_merged_upsample_internal+0x1d2>
mov    -0x8(%rbp),%rbx
mov    -0x10(%rbp),%r12
mov    -0x18(%rbp),%r13
mov    -0x20(%rbp),%r14
mov    -0x28(%rbp),%r15
leaveq 
retq   
movzbl (%r12),%r12d
movslq (%r10,%r12,4),%rdi
movzbl (%r8),%r13d
lea    0x0(%r13,%rdi,1),%ecx
movslq %ecx,%rcx
movzbl (%r15,%rcx,1),%ecx
mov    (%rax,%r12,8),%rax
movzbl (%r11),%r10d
add    (%r9,%r10,8),%rax
sar    $0x10,%rax
lea    0x0(%r13,%rax,1),%r8d
movslq %r8d,%r8
movslq (%r14,%r10,4),%r9
mov    %cl,0x1(%rdx)
movzbl (%r15,%r8,1),%ecx
mov    %cl,0x2(%rdx)
lea    0x0(%r13,%r9,1),%ecx
movslq %ecx,%rcx
movzbl (%r15,%rcx,1),%ecx
mov    %cl,0x3(%rdx)
movb   $0xff,(%rdx)
movzbl (%rbx),%edx
lea    (%rdx,%rdi,1),%ecx
movslq %ecx,%rcx
movzbl (%r15,%rcx,1),%ecx
mov    %cl,0x1(%rsi)
add    %edx,%eax
movslq %eax,%rax
movzbl (%r15,%rax,1),%eax
mov    %al,0x2(%rsi)
lea    (%rdx,%r9,1),%eax
movslq %eax,%rax
movzbl (%r15,%rax,1),%eax
mov    %al,0x3(%rsi)
movb   $0xff,(%rsi)
mov    -0x8(%rbp),%rbx
mov    -0x10(%rbp),%r12
mov    -0x18(%rbp),%r13
mov    -0x20(%rbp),%r14
mov    -0x28(%rbp),%r15
leaveq 
retq   
nopl   0x0(%rax)

0000000000028e80 <build_ycc_rgb_table>:
push   %rbp
mov    %rsp,%rbp
sub    $0x20,%rsp
mov    %r12,-0x8(%rbp)
mov    %r13,-0x10(%rbp)
mov    %r14,-0x18(%rbp)
mov    %r15,-0x20(%rbp)
mov    0x8(%rdi),%rax
mov    (%rax),%rax
mov    $0x1,%r13d
mov    $0x400,%r15d
mov    0x260(%rdi),%r14
mov    %rdi,%r12
mov    %r13,%rsi
mov    %r15,%rdx
callq  *%rax
mov    %rax,0x20(%r14)
mov    0x8(%r12),%rax
mov    (%rax),%rax
mov    %r15,%rdx
mov    %r12,%rdi
mov    %r13,%rsi
callq  *%rax
mov    %rax,0x28(%r14)
mov    0x8(%r12),%rax
mov    (%rax),%rax
mov    $0x800,%r15d
mov    %r12,%rdi
mov    %r13,%rsi
mov    %r15,%rdx
callq  *%rax
mov    %rax,0x30(%r14)
mov    0x8(%r12),%rax
mov    (%rax),%rax
mov    %r15,%rdx
mov    %r13,%rsi
mov    %r12,%rdi
callq  *%rax
mov    %rax,0x38(%r14)
xor    %eax,%eax
mov    $0xffffffffffffff80,%rcx
jmp    28f84 <build_ycc_rgb_table+0x104>
mov    %rcx,%rdx
imul   $0x166e9,%rdx,%rdx
add    $0x8000,%rdx
sar    $0x10,%rdx
mov    0x20(%r14),%rsi
movslq %eax,%rdi
mov    %edx,(%rsi,%rdi,4)
mov    %rcx,%rdx
imul   $0x1c5a2,%rdx,%rdx
add    $0x8000,%rdx
sar    $0x10,%rdx
mov    0x28(%r14),%rsi
mov    %edx,(%rsi,%rdi,4)
mov    %rcx,%rsi
imul   $0xffffffffffff492e,%rsi,%rsi
mov    0x30(%r14),%rdx
mov    %rsi,(%rdx,%rdi,8)
mov    %rcx,%rdx
imul   $0xffffffffffffa7e6,%rdx,%rdx
lea    0x8000(%rdx),%rsi
mov    0x38(%r14),%rdx
mov    %rsi,(%rdx,%rdi,8)
add    $0x1,%eax
add    $0x1,%rcx
cmp    $0xff,%eax
jle    28f17 <build_ycc_rgb_table+0x97>
mov    -0x20(%rbp),%r15
mov    -0x18(%rbp),%r14
mov    -0x10(%rbp),%r13
mov    -0x8(%rbp),%r12
leaveq 
retq   
nopl   (%rax)

0000000000028fa0 <start_pass_merged_upsample>:
push   %rbp
mov    %rsp,%rbp
mov    0x260(%rdi),%rax
movl   $0x0,0x48(%rax)
mov    0x8c(%rdi),%ecx
mov    %ecx,0x50(%rax)
leaveq 
retq   
nopl   (%rax)

0000000000028fc0 <merged_2v_upsample>:
push   %rbp
mov    %rsp,%rbp
sub    $0x30,%rsp
mov    %r13,-0x10(%rbp)
mov    %r14,-0x18(%rbp)
mov    %r15,-0x20(%rbp)
mov    0x260(%rdi),%r15
movslq 0x48(%r15),%rax
test   %eax,%eax
jne    2902a <merged_2v_upsample+0x6a>
mov    0x50(%r15),%r13d
cmp    $0x1,%r13d
jbe    28ff3 <merged_2v_upsample+0x33>
mov    $0x2,%r13d
mov    (%r9),%ecx
mov    0x10(%rbp),%eax
sub    %ecx,%eax
cmp    %eax,%r13d
jbe    29003 <merged_2v_upsample+0x43>
mov    %rax,%r13
mov    (%r8,%rcx,8),%rax
mov    %rax,-0x30(%rbp)
cmp    $0x1,%r13d
ja     2909e <merged_2v_upsample+0xde>
mov    0x40(%r15),%rax
mov    %rax,-0x28(%rbp)
movl   $0x1,0x48(%r15)
jmpq   290ae <merged_2v_upsample+0xee>
mov    0x4c(%r15),%eax
mov    0x40(%rdi),%ecx
cmp    $0x10,%ecx
jne    2903e <merged_2v_upsample+0x7e>
mov    0x88(%rdi),%eax
add    %eax,%eax
mov    (%r9),%ecx
lea    (%r8,%rcx,8),%r10
mov    %r9,%r13
mov    %rax,%r9
mov    %rdx,%r14
mov    %r10,%rdx
mov    $0x1,%r8d
lea    0x40(%r15),%rdi
xor    %esi,%esi
mov    %rsi,%rcx
callq  43f0 <jcopy_sample_rows@plt>
movl   $0x0,0x48(%r15)
mov    %r13,%rcx
mov    $0x1,%r13d
mov    %r13,%rax
add    (%rcx),%eax
mov    %eax,(%rcx)
mov    0x50(%r15),%eax
sub    %r13d,%eax
mov    %eax,0x50(%r15)
movslq 0x48(%r15),%rax
test   %eax,%eax
je     290d1 <merged_2v_upsample+0x111>
mov    -0x20(%rbp),%r15
mov    -0x18(%rbp),%r14
mov    -0x10(%rbp),%r13
leaveq 
retq   
mov    (%r9),%eax
add    $0x1,%eax
mov    %eax,%eax
mov    (%r8,%rax,8),%rax
mov    %rax,-0x28(%rbp)
mov    0x18(%r15),%rax
mov    (%rdx),%r8d
lea    -0x30(%rbp),%rcx
mov    %r12,-0x8(%rbp)
mov    %r9,%r12
mov    %rdx,%r14
mov    %r8,%rdx
callq  *%rax
mov    %r12,%rcx
mov    -0x8(%rbp),%r12
jmp    29076 <merged_2v_upsample+0xb6>
mov    (%r14),%eax
add    $0x1,%eax
mov    %eax,(%r14)
mov    -0x20(%rbp),%r15
mov    -0x18(%rbp),%r14
mov    -0x10(%rbp),%r13
leaveq 
retq   
nopl   0x0(%rax,%rax,1)

00000000000290f0 <merged_1v_upsample>:
push   %rbp
mov    %rsp,%rbp
sub    $0x10,%rsp
mov    %r14,-0x8(%rbp)
mov    %r15,-0x10(%rbp)
mov    (%r9),%eax
lea    (%r8,%rax,8),%rcx
mov    0x260(%rdi),%rax
mov    0x18(%rax),%rax
mov    %r9,%r14
mov    %rdx,%r15
mov    (%r15),%edx
callq  *%rax
mov    (%r14),%eax
add    $0x1,%eax
mov    %eax,(%r14)
mov    (%r15),%eax
add    $0x1,%eax
mov    %eax,(%r15)
mov    -0x10(%rbp),%r15
mov    -0x8(%rbp),%r14
leaveq 
retq   
nopl   0x0(%rax)

0000000000029140 <h2v1_merged_upsample>:
push   %rbp
mov    %rsp,%rbp
mov    0x40(%rdi),%eax
add    $0xfffffffa,%eax
cmp    $0x9,%eax
ja     29166 <h2v1_merged_upsample+0x26>
lea    0x30eea(%rip),%r8        # 5a040 <rgb_pixelsize+0x48>
movslq (%r8,%rax,4),%rax
add    %r8,%rax
jmpq   *%rax
callq  28a60 <extxrgb_h2v1_merged_upsample_internal>
leaveq 
retq   
callq  27200 <h2v1_merged_upsample_internal>
leaveq 
retq   
callq  27600 <extrgb_h2v1_merged_upsample_internal>
leaveq 
retq   
callq  27a00 <extrgbx_h2v1_merged_upsample_internal>
leaveq 
retq   
callq  27e20 <extbgr_h2v1_merged_upsample_internal>
leaveq 
retq   
callq  28220 <extbgrx_h2v1_merged_upsample_internal>
leaveq 
retq   
callq  28640 <extxbgr_h2v1_merged_upsample_internal>
leaveq 
retq   

0000000000029190 <h2v2_merged_upsample>:
push   %rbp
mov    %rsp,%rbp
mov    0x40(%rdi),%eax
add    $0xfffffffa,%eax
cmp    $0x9,%eax
ja     291b6 <h2v2_merged_upsample+0x26>
lea    0x30ec2(%rip),%r8        # 5a068 <rgb_pixelsize+0x70>
movslq (%r8,%rax,4),%rax
add    %r8,%rax
jmpq   *%rax
callq  28c10 <extxrgb_h2v2_merged_upsample_internal>
leaveq 
retq   
callq  273a0 <h2v2_merged_upsample_internal>
leaveq 
retq   
callq  277a0 <extrgb_h2v2_merged_upsample_internal>
leaveq 
retq   
callq  27bb0 <extrgbx_h2v2_merged_upsample_internal>
leaveq 
retq   
callq  27fc0 <extbgr_h2v2_merged_upsample_internal>
leaveq 
retq   
callq  283d0 <extbgrx_h2v2_merged_upsample_internal>
leaveq 
retq   
callq  287f0 <extxbgr_h2v2_merged_upsample_internal>
leaveq 
retq   

00000000000291e0 <h2v1_merged_upsample_565_le>:
push   %rbp
mov    %rsp,%rbp
sub    $0x40,%rsp
mov    %r15,-0x28(%rbp)
mov    %r14,-0x20(%rbp)
mov    %rdi,-0x30(%rbp)
mov    %rbx,-0x8(%rbp)
mov    %r12,-0x10(%rbp)
mov    %r13,-0x18(%rbp)
mov    0x1a8(%rdi),%r13
mov    0x260(%rdi),%rbx
mov    0x20(%rbx),%rax
mov    %rax,-0x38(%rbp)
mov    0x30(%rbx),%r12
mov    0x38(%rbx),%r10
mov    %r10,-0x40(%rbp)
mov    0x28(%rbx),%r11
mov    (%rsi),%rbx
mov    %edx,%edx
mov    (%rbx,%rdx,8),%rbx
mov    0x8(%rsi),%r8
mov    (%r8,%rdx,8),%r8
mov    0x10(%rsi),%rsi
mov    (%rsi,%rdx,8),%r9
mov    (%rcx),%rsi
mov    0x88(%rdi),%edx
shr    %edx
jmpq   2931b <h2v1_merged_upsample_565_le+0x13b>
movzbl (%r9),%r15d
mov    (%r12,%r15,8),%rcx
movzbl (%r8),%r14d
add    (%r10,%r14,8),%rcx
sar    $0x10,%rcx
movzbl (%rbx),%r10d
lea    (%r10,%rcx,1),%edi
movslq %edi,%rdi
movzbl (%rdi,%r13,1),%edi
and    $0xfc,%edi
movslq (%rax,%r15,4),%r15
lea    (%r10,%r15,1),%eax
movslq %eax,%rax
movzbl 0x0(%r13,%rax,1),%eax
and    $0xf8,%eax
shl    $0x8,%eax
lea    (%rax,%rdi,8),%edi
movslq (%r11,%r14,4),%r14
lea    (%r10,%r14,1),%eax
movslq %eax,%rax
movzbl 0x0(%r13,%rax,1),%eax
shr    $0x3,%eax
lea    (%rdi,%rax,1),%r10d
movzbl 0x1(%rbx),%edi
lea    (%rcx,%rdi,1),%eax
movslq %eax,%rax
movzbl 0x0(%r13,%rax,1),%ecx
and    $0xfc,%ecx
lea    (%r15,%rdi,1),%eax
movslq %eax,%rax
movzbl 0x0(%r13,%rax,1),%eax
and    $0xf8,%eax
shl    $0x8,%eax
lea    (%rax,%rcx,8),%ecx
lea    (%r14,%rdi,1),%eax
movslq %eax,%rax
movzbl 0x0(%r13,%rax,1),%eax
shr    $0x3,%eax
add    %ecx,%eax
shl    $0x10,%eax
add    %r10d,%eax
mov    %ax,(%rsi)
mov    %eax,%eax
shr    $0x10,%rax
mov    %ax,0x2(%rsi)
add    $0x2,%rbx
add    $0x1,%r9
add    $0x1,%r8
add    $0x4,%rsi
add    $0xffffffff,%edx
mov    -0x38(%rbp),%rax
mov    -0x40(%rbp),%r10
test   %edx,%edx
jne    2924f <h2v1_merged_upsample_565_le+0x6f>
mov    -0x30(%rbp),%rcx
mov    0x88(%rcx),%ecx
and    $0x1,%ecx
test   %ecx,%ecx
jne    2934a <h2v1_merged_upsample_565_le+0x16a>
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
mov    -0x20(%rbp),%r14
mov    -0x28(%rbp),%r15
leaveq 
retq   
movzbl (%rbx),%edx
movzbl (%r9),%ecx
mov    (%rax,%rcx,4),%eax
add    %edx,%eax
movslq %eax,%rax
movzbl 0x0(%r13,%rax,1),%eax
and    $0xf8,%ax
shl    $0x8,%eax
mov    (%r12,%rcx,8),%rcx
movzbl (%r8),%edi
add    (%r10,%rdi,8),%rcx
sar    $0x10,%rcx
add    %edx,%ecx
movslq %ecx,%rcx
movzbl 0x0(%r13,%rcx,1),%ecx
and    $0xfc,%cx
lea    (%rax,%rcx,8),%ecx
add    (%r11,%rdi,4),%edx
movslq %edx,%rax
movzbl 0x0(%r13,%rax,1),%eax
shr    $0x3,%eax
add    %ecx,%eax
mov    %ax,(%rsi)
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
mov    -0x20(%rbp),%r14
mov    -0x28(%rbp),%r15
leaveq 
retq   
data16 nopw %cs:0x0(%rax,%rax,1)
nop

00000000000293c0 <h2v1_merged_upsample_565D_le>:
push   %rbp
mov    %rsp,%rbp
sub    $0x60,%rsp
mov    %r15,-0x28(%rbp)
mov    %r14,-0x20(%rbp)
mov    %r13,-0x18(%rbp)
mov    %r12,-0x10(%rbp)
mov    %rdi,-0x30(%rbp)
mov    %rbx,-0x8(%rbp)
mov    0x1a8(%rdi),%r14
mov    0x260(%rdi),%rax
mov    0x20(%rax),%r9
mov    %r9,-0x38(%rbp)
mov    0x30(%rax),%rbx
mov    %rbx,-0x40(%rbp)
mov    0x38(%rax),%r8
mov    %r8,-0x50(%rbp)
mov    0x28(%rax),%r13
lea    0x30c7f(%rip),%r10        # 5a090 <dither_matrix>
mov    0xa8(%rdi),%eax
and    $0x3,%eax
mov    %eax,%eax
mov    (%r10,%rax,8),%rax
mov    (%rsi),%r10
mov    %edx,%edx
mov    (%r10,%rdx,8),%r12
mov    0x8(%rsi),%r10
mov    (%r10,%rdx,8),%r10
mov    0x10(%rsi),%rsi
mov    (%rsi,%rdx,8),%rdx
mov    (%rcx),%r11
mov    0x88(%rdi),%esi
shr    %esi
jmpq   2957b <h2v1_merged_upsample_565D_le+0x1bb>
movzbl %al,%edi
lea    (%r14,%rdi,1),%rcx
movzbl (%rdx),%r15d
movslq (%r9,%r15,4),%r9
mov    %rsi,-0x58(%rbp)
movzbl (%r12),%esi
mov    %rdx,-0x48(%rbp)
lea    (%rsi,%r9,1),%edx
movslq %edx,%rdx
movzbl (%rcx,%rdx,1),%ecx
and    $0xf8,%ecx
shl    $0x8,%ecx
mov    (%rbx,%r15,8),%rdx
movzbl (%r10),%r15d
add    (%r8,%r15,8),%rdx
sar    $0x10,%rdx
lea    (%rsi,%rdx,1),%ebx
movslq %ebx,%r8
mov    %rax,%rbx
and    $0xfe,%rbx
shr    %rbx
add    %r14,%rbx
movzbl (%rbx,%r8,1),%ebx
and    $0xfc,%ebx
lea    (%rcx,%rbx,8),%r8d
movslq 0x0(%r13,%r15,4),%rbx
lea    (%rsi,%rbx,1),%ecx
movslq %ecx,%rcx
add    %r14,%rcx
movzbl (%rcx,%rdi,1),%ecx
shr    $0x3,%ecx
lea    (%r8,%rcx,1),%r15d
mov    $0xffffff00,%ecx
and    %rcx,%rax
shr    $0x8,%rax
shl    $0x18,%rdi
lea    (%rdi,%rax,1),%rsi
movzbl %sil,%edi
lea    (%r14,%rdi,1),%rcx
movzbl 0x1(%r12),%r8d
lea    (%r9,%r8,1),%eax
movslq %eax,%rax
movzbl (%rcx,%rax,1),%eax
and    $0xf8,%eax
shl    $0x8,%eax
lea    (%rdx,%r8,1),%ecx
movslq %ecx,%rdx
mov    %rsi,%rcx
and    $0xfe,%rcx
shr    %rcx
add    %r14,%rcx
movzbl (%rcx,%rdx,1),%ecx
and    $0xfc,%ecx
lea    (%rax,%rcx,8),%ecx
lea    (%rbx,%r8,1),%eax
movslq %eax,%rax
add    %r14,%rax
movzbl (%rax,%rdi,1),%eax
shr    $0x3,%eax
add    %ecx,%eax
shl    $0x10,%eax
add    %r15d,%eax
mov    %ax,(%r11)
mov    %eax,%eax
shr    $0x10,%rax
mov    %ax,0x2(%r11)
shr    $0x8,%rsi
shl    $0x18,%rdi
lea    (%rsi,%rdi,1),%rax
add    $0x2,%r12
mov    -0x48(%rbp),%rcx
lea    0x1(%rcx),%rdx
add    $0x1,%r10
add    $0x4,%r11
mov    -0x58(%rbp),%rcx
lea    -0x1(%rcx),%esi
mov    -0x40(%rbp),%rbx
mov    -0x50(%rbp),%r8
mov    -0x38(%rbp),%r9
test   %esi,%esi
jne    29449 <h2v1_merged_upsample_565D_le+0x89>
mov    -0x30(%rbp),%rcx
mov    0x88(%rcx),%ecx
and    $0x1,%ecx
test   %ecx,%ecx
jne    295aa <h2v1_merged_upsample_565D_le+0x1ea>
mov    -0x8(%rbp),%rbx
mov    -0x10(%rbp),%r12
mov    -0x18(%rbp),%r13
mov    -0x20(%rbp),%r14
mov    -0x28(%rbp),%r15
leaveq 
retq   
movzbl (%r12),%esi
movzbl (%rdx),%edx
mov    %rsi,%rcx
add    (%r9,%rdx,4),%ecx
movslq %ecx,%rcx
movzbl %al,%r9d
add    %r9,%rcx
movzbl (%r14,%rcx,1),%ecx
and    $0xf8,%cx
shl    $0x8,%ecx
mov    (%rbx,%rdx,8),%rdx
movzbl (%r10),%edi
add    (%r8,%rdi,8),%rdx
sar    $0x10,%rdx
add    %esi,%edx
movslq %edx,%rdx
and    $0xfe,%rax
shr    %rax
add    %rdx,%rax
movzbl (%r14,%rax,1),%eax
and    $0xfc,%ax
lea    (%rcx,%rax,8),%ecx
add    0x0(%r13,%rdi,4),%esi
movslq %esi,%rax
add    %r9,%rax
movzbl (%r14,%rax,1),%eax
shr    $0x3,%eax
add    %ecx,%eax
mov    %ax,(%r11)
mov    -0x8(%rbp),%rbx
mov    -0x10(%rbp),%r12
mov    -0x18(%rbp),%r13
mov    -0x20(%rbp),%r14
mov    -0x28(%rbp),%r15
leaveq 
retq   
nopl   0x0(%rax)

0000000000029630 <h2v2_merged_upsample_565_le>:
push   %rbp
mov    %rsp,%rbp
sub    $0x60,%rsp
mov    %r15,-0x28(%rbp)
mov    %r14,-0x20(%rbp)
mov    %r13,-0x18(%rbp)
mov    %r12,-0x10(%rbp)
mov    %rdi,-0x30(%rbp)
mov    %rbx,-0x8(%rbp)
mov    0x1a8(%rdi),%r15
mov    0x260(%rdi),%rbx
mov    0x20(%rbx),%rax
mov    %rax,-0x38(%rbp)
mov    0x30(%rbx),%r10
mov    %r10,-0x40(%rbp)
mov    0x38(%rbx),%r11
mov    %r11,-0x48(%rbp)
mov    0x28(%rbx),%r8
mov    %r8,-0x50(%rbp)
mov    (%rsi),%r12
lea    (%rdx,%rdx,1),%r9d
lea    0x1(%r9),%ebx
mov    %ebx,%ebx
mov    (%r12,%rbx,8),%r13
mov    %r9d,%ebx
mov    (%r12,%rbx,8),%r14
mov    0x8(%rsi),%rbx
mov    %edx,%r9d
mov    (%rbx,%r9,8),%rbx
mov    0x10(%rsi),%rdx
mov    (%rdx,%r9,8),%rsi
mov    (%rcx),%r9
mov    0x8(%rcx),%r12
mov    0x88(%rdi),%edx
shr    %edx
jmpq   29834 <h2v2_merged_upsample_565_le+0x204>
movzbl (%rsi),%edi
mov    (%r10,%rdi,8),%rcx
movzbl (%rbx),%r10d
add    (%r11,%r10,8),%rcx
sar    $0x10,%rcx
movzbl (%r14),%r11d
mov    %rdx,-0x58(%rbp)
lea    (%r11,%rcx,1),%edx
movslq %edx,%rdx
movzbl (%rdx,%r15,1),%edx
and    $0xfc,%edx
movslq (%rax,%rdi,4),%rdi
lea    (%r11,%rdi,1),%eax
movslq %eax,%rax
movzbl (%r15,%rax,1),%eax
and    $0xf8,%eax
shl    $0x8,%eax
lea    (%rax,%rdx,8),%edx
movslq (%r8,%r10,4),%r10
lea    (%r11,%r10,1),%eax
movslq %eax,%rax
movzbl (%r15,%rax,1),%eax
shr    $0x3,%eax
lea    (%rdx,%rax,1),%r11d
movzbl 0x1(%r14),%r8d
lea    (%rcx,%r8,1),%eax
movslq %eax,%rax
movzbl (%r15,%rax,1),%edx
and    $0xfc,%edx
lea    (%rdi,%r8,1),%eax
movslq %eax,%rax
movzbl (%r15,%rax,1),%eax
and    $0xf8,%eax
shl    $0x8,%eax
lea    (%rax,%rdx,8),%edx
lea    (%r10,%r8,1),%eax
movslq %eax,%rax
movzbl (%r15,%rax,1),%eax
shr    $0x3,%eax
add    %edx,%eax
shl    $0x10,%eax
add    %r11d,%eax
mov    %ax,(%r9)
mov    %eax,%eax
shr    $0x10,%rax
mov    %ax,0x2(%r9)
movzbl 0x0(%r13),%r8d
lea    (%r8,%rcx,1),%eax
movslq %eax,%rax
movzbl (%rax,%r15,1),%edx
and    $0xfc,%edx
lea    (%r8,%rdi,1),%eax
movslq %eax,%rax
movzbl (%r15,%rax,1),%eax
and    $0xf8,%eax
shl    $0x8,%eax
lea    (%rax,%rdx,8),%edx
lea    (%r8,%r10,1),%eax
movslq %eax,%rax
movzbl (%r15,%rax,1),%eax
shr    $0x3,%eax
lea    (%rdx,%rax,1),%r8d
movzbl 0x1(%r13),%edx
lea    (%rcx,%rdx,1),%eax
movslq %eax,%rax
movzbl (%r15,%rax,1),%ecx
and    $0xfc,%ecx
lea    (%rdi,%rdx,1),%eax
movslq %eax,%rax
movzbl (%r15,%rax,1),%eax
and    $0xf8,%eax
shl    $0x8,%eax
lea    (%rax,%rcx,8),%ecx
lea    (%r10,%rdx,1),%eax
movslq %eax,%rax
movzbl (%r15,%rax,1),%eax
shr    $0x3,%eax
add    %ecx,%eax
shl    $0x10,%eax
add    %r8d,%eax
mov    %ax,(%r12)
mov    %eax,%eax
shr    $0x10,%rax
mov    %ax,0x2(%r12)
add    $0x2,%r13
add    $0x2,%r14
add    $0x1,%rsi
add    $0x1,%rbx
add    $0x4,%r9
add    $0x4,%r12
mov    -0x58(%rbp),%rax
lea    -0x1(%rax),%edx
mov    -0x50(%rbp),%r8
mov    -0x38(%rbp),%rax
mov    -0x48(%rbp),%r11
mov    -0x40(%rbp),%r10
test   %edx,%edx
jne    296bd <h2v2_merged_upsample_565_le+0x8d>
mov    -0x30(%rbp),%rcx
mov    0x88(%rcx),%ecx
and    $0x1,%ecx
test   %ecx,%ecx
jne    29863 <h2v2_merged_upsample_565_le+0x233>
mov    -0x8(%rbp),%rbx
mov    -0x10(%rbp),%r12
mov    -0x18(%rbp),%r13
mov    -0x20(%rbp),%r14
mov    -0x28(%rbp),%r15
leaveq 
retq   
movzbl (%rsi),%edi
mov    (%r10,%rdi,8),%rcx
movzbl (%rbx),%esi
add    (%r11,%rsi,8),%rcx
sar    $0x10,%rcx
movzbl (%r14),%ebx
lea    (%rbx,%rcx,1),%edx
movslq %edx,%rdx
movzbl (%r15,%rdx,1),%edx
and    $0xfc,%dx
movslq (%rax,%rdi,4),%rdi
lea    (%rbx,%rdi,1),%eax
movslq %eax,%rax
movzbl (%r15,%rax,1),%eax
and    $0xf8,%ax
shl    $0x8,%eax
lea    (%rax,%rdx,8),%edx
movslq (%r8,%rsi,4),%rsi
lea    (%rbx,%rsi,1),%eax
movslq %eax,%rax
movzbl (%r15,%rax,1),%eax
shr    $0x3,%eax
add    %edx,%eax
mov    %ax,(%r9)
movzbl 0x0(%r13),%edx
lea    (%rdx,%rcx,1),%eax
movslq %eax,%rax
movzbl (%r15,%rax,1),%ecx
and    $0xfc,%cx
lea    (%rdx,%rdi,1),%eax
movslq %eax,%rax
movzbl (%r15,%rax,1),%eax
and    $0xf8,%ax
shl    $0x8,%eax
lea    (%rax,%rcx,8),%ecx
lea    (%rdx,%rsi,1),%eax
movslq %eax,%rax
movzbl (%r15,%rax,1),%eax
shr    $0x3,%eax
add    %ecx,%eax
mov    %ax,(%r12)
mov    -0x8(%rbp),%rbx
mov    -0x10(%rbp),%r12
mov    -0x18(%rbp),%r13
mov    -0x20(%rbp),%r14
mov    -0x28(%rbp),%r15
leaveq 
retq   
nop

0000000000029910 <h2v2_merged_upsample_565D_le>:
push   %rbp
mov    %rsp,%rbp
sub    $0x80,%rsp
mov    %r15,-0x28(%rbp)
mov    %r14,-0x20(%rbp)
mov    %r13,-0x18(%rbp)
mov    %r12,-0x10(%rbp)
mov    %rbx,-0x8(%rbp)
mov    %rdi,-0x30(%rbp)
mov    0x1a8(%rdi),%r15
mov    0x260(%rdi),%rax
mov    0x20(%rax),%r12
mov    %r12,-0x50(%rbp)
mov    0x30(%rax),%r11
mov    %r11,-0x58(%rbp)
mov    0x38(%rax),%r13
mov    %r13,-0x68(%rbp)
mov    0x28(%rax),%rax
mov    %rax,-0x70(%rbp)
lea    0x30728(%rip),%r8        # 5a090 <dither_matrix>
mov    0xa8(%rdi),%ebx
lea    0x1(%rbx),%eax
and    $0x3,%eax
mov    %eax,%eax
mov    (%r8,%rax,8),%rax
mov    (%rsi),%r10
lea    (%rdx,%rdx,1),%r9d
lea    0x1(%r9),%r8d
mov    %r8d,%r8d
mov    (%r10,%r8,8),%r8
and    $0x3,%ebx
mov    %ebx,%ebx
lea    0x306f8(%rip),%r14        # 5a090 <dither_matrix>
mov    (%r14,%rbx,8),%rbx
mov    %r9d,%r9d
mov    (%r10,%r9,8),%r9
mov    0x8(%rsi),%r10
mov    %edx,%r14d
mov    (%r10,%r14,8),%r10
mov    0x10(%rsi),%rdx
mov    (%rdx,%r14,8),%rdx
mov    (%rcx),%rsi
mov    0x8(%rcx),%rcx
mov    %rcx,-0x38(%rbp)
mov    0x88(%rdi),%ecx
shr    %ecx
mov    -0x70(%rbp),%rdi
jmpq   29c1c <h2v2_merged_upsample_565D_le+0x30c>
mov    %rcx,-0x80(%rbp)
movzbl %bl,%r14d
lea    (%r15,%r14,1),%rcx
mov    %rdx,-0x60(%rbp)
movzbl (%rdx),%edx
movslq (%r12,%rdx,4),%r12
mov    %r8,-0x40(%rbp)
movzbl (%r9),%r8d
mov    %rsi,-0x48(%rbp)
lea    (%r8,%r12,1),%esi
movslq %esi,%rsi
movzbl (%rcx,%rsi,1),%ecx
and    $0xf8,%ecx
shl    $0x8,%ecx
mov    (%r11,%rdx,8),%rdx
movzbl (%r10),%r11d
add    0x0(%r13,%r11,8),%rdx
sar    $0x10,%rdx
lea    (%r8,%rdx,1),%esi
movslq %esi,%r13
mov    %rbx,%rsi
and    $0xfe,%rsi
shr    %rsi
add    %r15,%rsi
movzbl (%rsi,%r13,1),%esi
and    $0xfc,%esi
lea    (%rcx,%rsi,8),%esi
movslq (%rdi,%r11,4),%r13
lea    (%r8,%r13,1),%ecx
movslq %ecx,%rcx
add    %r15,%rcx
movzbl (%rcx,%r14,1),%ecx
shr    $0x3,%ecx
lea    (%rsi,%rcx,1),%edi
movzbl %al,%r8d
lea    (%r15,%r8,1),%rsi
movzbl 0x1(%r9),%r11d
lea    (%r12,%r11,1),%ecx
movslq %ecx,%rcx
movzbl (%rsi,%rcx,1),%ecx
and    $0xf8,%ecx
shl    $0x8,%ecx
lea    (%rdx,%r11,1),%esi
movslq %esi,%rsi
mov    %r10,-0x78(%rbp)
mov    %rax,%r10
and    $0xfe,%r10
shr    %r10
add    %r15,%r10
movzbl (%r10,%rsi,1),%esi
and    $0xfc,%esi
lea    (%rcx,%rsi,8),%esi
lea    0x0(%r13,%r11,1),%ecx
movslq %ecx,%rcx
add    %r15,%rcx
movzbl (%rcx,%r8,1),%ecx
shr    $0x3,%ecx
add    %esi,%ecx
shl    $0x10,%ecx
add    %edi,%ecx
mov    -0x48(%rbp),%rsi
mov    %cx,(%rsi)
mov    %ecx,%ecx
shr    $0x10,%rcx
mov    %cx,0x2(%rsi)
mov    $0xffffff00,%ecx
and    %rcx,%rbx
shr    $0x8,%rbx
shl    $0x18,%r14
lea    (%r14,%rbx,1),%rsi
movzbl %sil,%edi
lea    (%r15,%rdi,1),%rcx
mov    -0x40(%rbp),%r10
movzbl (%r10),%r11d
lea    (%r11,%r12,1),%ebx
movslq %ebx,%rbx
movzbl (%rcx,%rbx,1),%ecx
and    $0xf8,%ecx
shl    $0x8,%ecx
lea    (%r11,%rdx,1),%ebx
movslq %ebx,%r14
mov    %rsi,%rbx
and    $0xfe,%rbx
shr    %rbx
add    %r15,%rbx
movzbl (%rbx,%r14,1),%ebx
and    $0xfc,%ebx
lea    (%rcx,%rbx,8),%ebx
lea    (%r11,%r13,1),%ecx
movslq %ecx,%rcx
add    %r15,%rcx
movzbl (%rcx,%rdi,1),%ecx
shr    $0x3,%ecx
lea    (%rbx,%rcx,1),%r11d
mov    $0xffffff00,%ecx
and    %rcx,%rax
shr    $0x8,%rax
shl    $0x18,%r8
lea    (%r8,%rax,1),%rbx
movzbl %bl,%r8d
lea    (%r15,%r8,1),%rcx
movzbl 0x1(%r10),%r14d
lea    (%r12,%r14,1),%eax
movslq %eax,%rax
movzbl (%rcx,%rax,1),%eax
and    $0xf8,%eax
shl    $0x8,%eax
lea    (%rdx,%r14,1),%ecx
movslq %ecx,%rdx
mov    %rbx,%rcx
and    $0xfe,%rcx
shr    %rcx
add    %r15,%rcx
movzbl (%rcx,%rdx,1),%ecx
and    $0xfc,%ecx
lea    (%rax,%rcx,8),%ecx
lea    0x0(%r13,%r14,1),%eax
movslq %eax,%rax
add    %r15,%rax
movzbl (%rax,%r8,1),%eax
shr    $0x3,%eax
add    %ecx,%eax
shl    $0x10,%eax
add    %r11d,%eax
mov    -0x38(%rbp),%r11
mov    %ax,(%r11)
mov    %eax,%eax
shr    $0x10,%rax
mov    %ax,0x2(%r11)
shr    $0x8,%rbx
shl    $0x18,%r8
lea    (%rbx,%r8,1),%rax
lea    0x2(%r10),%r8
shr    $0x8,%rsi
shl    $0x18,%rdi
lea    (%rsi,%rdi,1),%rbx
add    $0x2,%r9
mov    -0x60(%rbp),%rcx
lea    0x1(%rcx),%rdx
mov    -0x78(%rbp),%rcx
lea    0x1(%rcx),%r10
mov    -0x48(%rbp),%rcx
lea    0x4(%rcx),%rsi
lea    0x4(%r11),%rcx
mov    %rcx,-0x38(%rbp)
mov    -0x80(%rbp),%rcx
add    $0xffffffff,%ecx
mov    -0x58(%rbp),%r11
mov    -0x68(%rbp),%r13
mov    -0x50(%rbp),%r12
mov    -0x70(%rbp),%rdi
test   %ecx,%ecx
jne    299d2 <h2v2_merged_upsample_565D_le+0xc2>
mov    -0x30(%rbp),%rcx
mov    0x88(%rcx),%ecx
and    $0x1,%ecx
test   %ecx,%ecx
jne    29c4b <h2v2_merged_upsample_565D_le+0x33b>
mov    -0x8(%rbp),%rbx
mov    -0x10(%rbp),%r12
mov    -0x18(%rbp),%r13
mov    -0x20(%rbp),%r14
mov    -0x28(%rbp),%r15
leaveq 
retq   
movzbl (%rdx),%r14d
mov    (%r11,%r14,8),%rdx
movzbl (%r10),%r10d
add    0x0(%r13,%r10,8),%rdx
sar    $0x10,%rdx
movzbl (%r9),%r13d
lea    0x0(%r13,%rdx,1),%ecx
movslq %ecx,%r9
mov    %rbx,%rcx
and    $0xfe,%rcx
shr    %rcx
add    %r9,%rcx
movzbl (%r15,%rcx,1),%r9d
and    $0xfc,%r9w
movslq (%r12,%r14,4),%r11
lea    0x0(%r13,%r11,1),%ecx
movslq %ecx,%rcx
movzbl %bl,%r12d
add    %r12,%rcx
movzbl (%r15,%rcx,1),%ecx
and    $0xf8,%cx
shl    $0x8,%ecx
lea    (%rcx,%r9,8),%ebx
movslq (%rdi,%r10,4),%rdi
lea    0x0(%r13,%rdi,1),%ecx
movslq %ecx,%rcx
add    %r12,%rcx
movzbl (%r15,%rcx,1),%ecx
shr    $0x3,%ecx
add    %ebx,%ecx
mov    %cx,(%rsi)
movzbl (%r8),%esi
lea    (%rsi,%rdx,1),%ecx
movslq %ecx,%rdx
mov    %rax,%rcx
and    $0xfe,%rcx
shr    %rcx
add    %rdx,%rcx
movzbl (%r15,%rcx,1),%ecx
and    $0xfc,%cx
lea    (%rsi,%r11,1),%edx
movslq %edx,%rdx
movzbl %al,%ebx
lea    (%rbx,%rdx,1),%rax
movzbl (%r15,%rax,1),%eax
and    $0xf8,%ax
shl    $0x8,%eax
lea    (%rax,%rcx,8),%ecx
lea    (%rsi,%rdi,1),%eax
movslq %eax,%rax
add    %rbx,%rax
movzbl (%r15,%rax,1),%eax
shr    $0x3,%eax
add    %ecx,%eax
mov    -0x38(%rbp),%rcx
mov    %ax,(%rcx)
mov    -0x8(%rbp),%rbx
mov    -0x10(%rbp),%r12
mov    -0x18(%rbp),%r13
mov    -0x20(%rbp),%r14
mov    -0x28(%rbp),%r15
leaveq 
retq   
nopl   0x0(%rax,%rax,1)

0000000000029d40 <h2v1_merged_upsample_565_be>:
push   %rbp
mov    %rsp,%rbp
sub    $0x50,%rsp
mov    %r15,-0x28(%rbp)
mov    %r14,-0x20(%rbp)
mov    %rdi,-0x30(%rbp)
mov    %rbx,-0x8(%rbp)
mov    %r12,-0x10(%rbp)
mov    %r13,-0x18(%rbp)
mov    0x1a8(%rdi),%r13
mov    0x260(%rdi),%r8
mov    0x30(%r8),%rax
mov    %rax,-0x40(%rbp)
mov    0x38(%r8),%rbx
mov    %rbx,-0x48(%rbp)
mov    0x20(%r8),%r11
mov    %r11,-0x38(%rbp)
mov    0x28(%r8),%r12
mov    (%rsi),%r8
mov    %edx,%r10d
mov    (%r8,%r10,8),%r8
mov    0x8(%rsi),%rdx
mov    (%rdx,%r10,8),%r9
mov    0x10(%rsi),%rdx
mov    (%rdx,%r10,8),%r10
mov    (%rcx),%rsi
mov    0x88(%rdi),%edx
shr    %edx
jmpq   29e9b <h2v1_merged_upsample_565_be+0x15b>
movzbl (%r10),%edi
mov    (%rax,%rdi,8),%rax
movzbl (%r9),%r14d
add    (%rbx,%r14,8),%rax
sar    $0x10,%rax
movzbl 0x1(%r8),%ebx
lea    (%rbx,%rax,1),%ecx
movslq %ecx,%rcx
movzbl (%rcx,%r13,1),%ecx
mov    %rcx,%r15
shr    $0x5,%r15d
movslq (%r11,%rdi,4),%r11
lea    (%rbx,%r11,1),%edi
movslq %edi,%rdi
movzbl 0x0(%r13,%rdi,1),%edi
and    $0xf8,%edi
add    %r15d,%edi
and    $0x1c,%ecx
shl    $0xb,%ecx
add    %ecx,%edi
movslq (%r12,%r14,4),%r15
lea    (%rbx,%r15,1),%ecx
movslq %ecx,%rcx
movzbl 0x0(%r13,%rcx,1),%ecx
and    $0xf8,%ecx
shl    $0x5,%ecx
add    %edi,%ecx
mov    %ecx,%edi
movzbl (%r8),%r14d
add    %r14d,%eax
movslq %eax,%rax
movzbl 0x0(%r13,%rax,1),%eax
mov    %rax,%rbx
shr    $0x5,%ebx
lea    (%r14,%r11,1),%ecx
movslq %ecx,%rcx
movzbl 0x0(%r13,%rcx,1),%ecx
and    $0xf8,%ecx
add    %ebx,%ecx
and    $0x1c,%eax
shl    $0xb,%eax
add    %eax,%ecx
lea    (%r14,%r15,1),%eax
movslq %eax,%rax
movzbl (%rax,%r13,1),%eax
and    $0xf8,%eax
shl    $0x5,%eax
add    %ecx,%eax
mov    %eax,%eax
shl    $0x10,%rax
add    %rdi,%rax
mov    %ax,0x2(%rsi)
shr    $0x10,%rax
mov    %ax,(%rsi)
add    $0x2,%r8
add    $0x1,%r10
add    $0x1,%r9
add    $0x4,%rsi
add    $0xffffffff,%edx
mov    -0x38(%rbp),%r11
mov    -0x40(%rbp),%rax
mov    -0x48(%rbp),%rbx
test   %edx,%edx
jne    29db4 <h2v1_merged_upsample_565_be+0x74>
mov    -0x30(%rbp),%rcx
mov    0x88(%rcx),%ecx
and    $0x1,%ecx
test   %ecx,%ecx
jne    29eca <h2v1_merged_upsample_565_be+0x18a>
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
mov    -0x20(%rbp),%r14
mov    -0x28(%rbp),%r15
leaveq 
retq   
movzbl (%r10),%ecx
mov    (%rax,%rcx,8),%rax
movzbl (%r9),%r9d
add    (%rbx,%r9,8),%rax
sar    $0x10,%rax
movzbl (%r8),%edx
add    %edx,%eax
movslq %eax,%rax
movzbl 0x0(%r13,%rax,1),%eax
mov    %rax,%rdi
shr    $0x5,%edi
mov    (%r11,%rcx,4),%ecx
add    %edx,%ecx
movslq %ecx,%rcx
movzbl 0x0(%r13,%rcx,1),%ecx
and    $0xf8,%ecx
add    %edi,%ecx
and    $0x1c,%eax
shl    $0xb,%eax
add    %eax,%ecx
add    (%r12,%r9,4),%edx
movslq %edx,%rax
movzbl 0x0(%r13,%rax,1),%eax
and    $0xf8,%ax
shl    $0x5,%eax
add    %ecx,%eax
mov    %ax,(%rsi)
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
mov    -0x20(%rbp),%r14
mov    -0x28(%rbp),%r15
leaveq 
retq   
data16 nopw %cs:0x0(%rax,%rax,1)
nopl   0x0(%rax)

0000000000029f50 <h2v1_merged_upsample_565D_be>:
push   %rbp
mov    %rsp,%rbp
sub    $0x70,%rsp
mov    %r15,-0x28(%rbp)
mov    %r14,-0x20(%rbp)
mov    %r13,-0x18(%rbp)
mov    %r12,-0x10(%rbp)
mov    %rdi,-0x30(%rbp)
mov    %rbx,-0x8(%rbp)
mov    0x1a8(%rdi),%r15
mov    0x260(%rdi),%rax
mov    0x30(%rax),%r13
mov    %r13,-0x48(%rbp)
mov    0x38(%rax),%r12
mov    %r12,-0x58(%rbp)
mov    0x20(%rax),%r8
mov    %r8,-0x40(%rbp)
mov    0x28(%rax),%r14
mov    (%rsi),%rax
mov    %edx,%r9d
mov    (%rax,%r9,8),%rbx
lea    0x300e5(%rip),%rdx        # 5a090 <dither_matrix>
mov    0xa8(%rdi),%eax
and    $0x3,%eax
mov    %eax,%eax
mov    (%rdx,%rax,8),%rax
mov    0x8(%rsi),%rdx
mov    (%rdx,%r9,8),%r10
mov    0x10(%rsi),%rdx
mov    (%rdx,%r9,8),%r9
mov    (%rcx),%r11
mov    0x88(%rdi),%edx
shr    %edx
mov    $0xffffff00,%esi
jmpq   2a13d <h2v1_merged_upsample_565D_be+0x1ed>
movzbl (%r9),%edi
mov    0x0(%r13,%rdi,8),%rcx
movzbl (%r10),%r13d
add    (%r12,%r13,8),%rcx
sar    $0x10,%rcx
movzbl 0x1(%rbx),%r12d
mov    %rdx,-0x70(%rbp)
lea    (%r12,%rcx,1),%edx
movslq %edx,%rdx
and    %rax,%rsi
shr    $0x8,%rsi
mov    %r10,-0x60(%rbp)
movzbl %al,%r10d
mov    %r9,-0x50(%rbp)
mov    %r10,%r9
shl    $0x18,%r9
add    %r9,%rsi
mov    %rsi,-0x68(%rbp)
mov    %rsi,%r9
and    $0xfe,%r9
shr    %r9
add    %r15,%r9
movzbl (%r9,%rdx,1),%edx
mov    %rdx,%r9
shr    $0x5,%r9d
movzbl %sil,%esi
mov    %r11,-0x38(%rbp)
lea    (%r15,%rsi,1),%r11
movslq (%r8,%rdi,4),%r8
lea    (%r12,%r8,1),%edi
movslq %edi,%rdi
movzbl (%r11,%rdi,1),%edi
and    $0xf8,%edi
add    %r9d,%edi
and    $0x1c,%edx
shl    $0xb,%edx
add    %edx,%edi
movslq (%r14,%r13,4),%r13
lea    (%r12,%r13,1),%edx
movslq %edx,%rdx
add    %r15,%rdx
movzbl (%rdx,%rsi,1),%edx
and    $0xf8,%edx
shl    $0x5,%edx
add    %edi,%edx
mov    %edx,%r9d
movzbl (%rbx),%r11d
add    %r11d,%ecx
movslq %ecx,%rcx
and    $0xfe,%rax
shr    %rax
add    %r15,%rax
movzbl (%rax,%rcx,1),%eax
mov    %rax,%rdi
shr    $0x5,%edi
lea    (%r15,%r10,1),%rcx
lea    (%r11,%r8,1),%edx
movslq %edx,%rdx
movzbl (%rcx,%rdx,1),%ecx
and    $0xf8,%ecx
add    %edi,%ecx
and    $0x1c,%eax
shl    $0xb,%eax
add    %eax,%ecx
lea    (%r11,%r13,1),%eax
movslq %eax,%rax
add    %r15,%rax
movzbl (%rax,%r10,1),%eax
and    $0xf8,%eax
shl    $0x5,%eax
add    %ecx,%eax
mov    %eax,%eax
shl    $0x10,%rax
add    %r9,%rax
mov    -0x38(%rbp),%rcx
mov    %ax,0x2(%rcx)
shr    $0x10,%rax
mov    %ax,(%rcx)
add    $0x2,%rbx
mov    -0x50(%rbp),%rax
lea    0x1(%rax),%r9
mov    -0x60(%rbp),%rax
lea    0x1(%rax),%r10
mov    -0x68(%rbp),%rax
shr    $0x8,%rax
shl    $0x18,%rsi
add    %rsi,%rax
lea    0x4(%rcx),%r11
mov    -0x70(%rbp),%rcx
lea    -0x1(%rcx),%edx
mov    -0x40(%rbp),%r8
mov    $0xffffff00,%esi
mov    -0x58(%rbp),%r12
mov    -0x48(%rbp),%r13
test   %edx,%edx
jne    29fdf <h2v1_merged_upsample_565D_be+0x8f>
mov    -0x30(%rbp),%rcx
mov    0x88(%rcx),%ecx
and    $0x1,%ecx
test   %ecx,%ecx
jne    2a16c <h2v1_merged_upsample_565D_be+0x21c>
mov    -0x8(%rbp),%rbx
mov    -0x10(%rbp),%r12
mov    -0x18(%rbp),%r13
mov    -0x20(%rbp),%r14
mov    -0x28(%rbp),%r15
leaveq 
retq   
movzbl (%r9),%edi
mov    0x0(%r13,%rdi,8),%rcx
movzbl (%r10),%r9d
add    (%r12,%r9,8),%rcx
sar    $0x10,%rcx
movzbl (%rbx),%edx
add    %edx,%ecx
movslq %ecx,%rsi
mov    %rax,%rcx
and    $0xfe,%rcx
shr    %rcx
add    %rsi,%rcx
movzbl (%r15,%rcx,1),%ecx
mov    %rcx,%rbx
shr    $0x5,%ebx
mov    %rdx,%rsi
add    (%r8,%rdi,4),%esi
movslq %esi,%rsi
movzbl %al,%edi
lea    (%rdi,%rsi,1),%rax
movzbl (%r15,%rax,1),%eax
and    $0xf8,%eax
add    %ebx,%eax
and    $0x1c,%ecx
shl    $0xb,%ecx
add    %eax,%ecx
add    (%r14,%r9,4),%edx
movslq %edx,%rax
add    %rdi,%rax
movzbl (%r15,%rax,1),%eax
and    $0xf8,%ax
shl    $0x5,%eax
add    %ecx,%eax
mov    %ax,(%r11)
mov    -0x8(%rbp),%rbx
mov    -0x10(%rbp),%r12
mov    -0x18(%rbp),%r13
mov    -0x20(%rbp),%r14
mov    -0x28(%rbp),%r15
leaveq 
retq   
nopl   0x0(%rax,%rax,1)

000000000002a200 <h2v2_merged_upsample_565_be>:
push   %rbp
mov    %rsp,%rbp
sub    $0x60,%rsp
mov    %r15,-0x28(%rbp)
mov    %r14,-0x20(%rbp)
mov    %r13,-0x18(%rbp)
mov    %r12,-0x10(%rbp)
mov    %rdi,-0x30(%rbp)
mov    %rbx,-0x8(%rbp)
mov    0x1a8(%rdi),%r15
mov    0x260(%rdi),%rbx
mov    0x30(%rbx),%rax
mov    %rax,-0x40(%rbp)
mov    0x38(%rbx),%r10
mov    %r10,-0x48(%rbp)
mov    0x20(%rbx),%r9
mov    %r9,-0x38(%rbp)
mov    0x28(%rbx),%r8
mov    %r8,-0x50(%rbp)
mov    (%rsi),%r13
lea    (%rdx,%rdx,1),%r11d
lea    0x1(%r11),%ebx
mov    %ebx,%ebx
mov    0x0(%r13,%rbx,8),%r12
mov    %r11d,%ebx
mov    0x0(%r13,%rbx,8),%r13
mov    0x8(%rsi),%rbx
mov    %edx,%r11d
mov    (%rbx,%r11,8),%rbx
mov    0x10(%rsi),%rdx
mov    (%rdx,%r11,8),%rdx
mov    (%rcx),%rsi
mov    0x8(%rcx),%r11
mov    0x88(%rdi),%ecx
shr    %ecx
jmpq   2a43d <h2v2_merged_upsample_565_be+0x23d>
movzbl (%rdx),%edi
mov    (%rax,%rdi,8),%rax
movzbl (%rbx),%r14d
add    (%r10,%r14,8),%rax
sar    $0x10,%rax
movzbl 0x1(%r13),%r10d
mov    %rcx,-0x60(%rbp)
lea    (%r10,%rax,1),%ecx
movslq %ecx,%rcx
movzbl (%rcx,%r15,1),%ecx
mov    %rbx,-0x58(%rbp)
mov    %rcx,%rbx
shr    $0x5,%ebx
movslq (%r9,%rdi,4),%r9
lea    (%r10,%r9,1),%edi
movslq %edi,%rdi
movzbl (%r15,%rdi,1),%edi
and    $0xf8,%edi
add    %ebx,%edi
and    $0x1c,%ecx
shl    $0xb,%ecx
add    %ecx,%edi
movslq (%r8,%r14,4),%r14
lea    (%r10,%r14,1),%ecx
movslq %ecx,%rcx
movzbl (%r15,%rcx,1),%ecx
and    $0xf8,%ecx
shl    $0x5,%ecx
add    %edi,%ecx
mov    %ecx,%r10d
movzbl 0x0(%r13),%ebx
lea    (%rbx,%rax,1),%ecx
movslq %ecx,%rcx
movzbl (%r15,%rcx,1),%ecx
mov    %rcx,%r8
shr    $0x5,%r8d
lea    (%rbx,%r9,1),%edi
movslq %edi,%rdi
movzbl (%r15,%rdi,1),%edi
and    $0xf8,%edi
add    %r8d,%edi
and    $0x1c,%ecx
shl    $0xb,%ecx
add    %ecx,%edi
lea    (%rbx,%r14,1),%ecx
movslq %ecx,%rcx
movzbl (%rcx,%r15,1),%ecx
and    $0xf8,%ecx
shl    $0x5,%ecx
add    %edi,%ecx
mov    %ecx,%ecx
shl    $0x10,%rcx
add    %r10,%rcx
mov    %cx,0x2(%rsi)
shr    $0x10,%rcx
mov    %cx,(%rsi)
movzbl 0x1(%r12),%ebx
lea    (%rbx,%rax,1),%ecx
movslq %ecx,%rcx
movzbl (%rcx,%r15,1),%ecx
mov    %rcx,%r8
shr    $0x5,%r8d
lea    (%rbx,%r9,1),%edi
movslq %edi,%rdi
movzbl (%r15,%rdi,1),%edi
and    $0xf8,%edi
add    %r8d,%edi
and    $0x1c,%ecx
shl    $0xb,%ecx
add    %ecx,%edi
lea    (%rbx,%r14,1),%ecx
movslq %ecx,%rcx
movzbl (%r15,%rcx,1),%ecx
and    $0xf8,%ecx
shl    $0x5,%ecx
add    %edi,%ecx
mov    %ecx,%ebx
movzbl (%r12),%r8d
add    %r8d,%eax
movslq %eax,%rax
movzbl (%r15,%rax,1),%eax
mov    %rax,%rdi
shr    $0x5,%edi
lea    (%r8,%r9,1),%ecx
movslq %ecx,%rcx
movzbl (%r15,%rcx,1),%ecx
and    $0xf8,%ecx
add    %edi,%ecx
and    $0x1c,%eax
shl    $0xb,%eax
add    %eax,%ecx
lea    (%r8,%r14,1),%eax
movslq %eax,%rax
movzbl (%rax,%r15,1),%eax
and    $0xf8,%eax
shl    $0x5,%eax
add    %ecx,%eax
mov    %eax,%eax
shl    $0x10,%rax
add    %rbx,%rax
mov    %ax,0x2(%r11)
shr    $0x10,%rax
mov    %ax,(%r11)
add    $0x2,%r12
add    $0x2,%r13
add    $0x1,%rdx
mov    -0x58(%rbp),%rax
lea    0x1(%rax),%rbx
add    $0x4,%rsi
add    $0x4,%r11
mov    -0x60(%rbp),%rax
lea    -0x1(%rax),%ecx
mov    -0x50(%rbp),%r8
mov    -0x38(%rbp),%r9
mov    -0x48(%rbp),%r10
mov    -0x40(%rbp),%rax
test   %ecx,%ecx
jne    2a28f <h2v2_merged_upsample_565_be+0x8f>
mov    -0x30(%rbp),%rcx
mov    0x88(%rcx),%ecx
and    $0x1,%ecx
test   %ecx,%ecx
jne    2a46c <h2v2_merged_upsample_565_be+0x26c>
mov    -0x8(%rbp),%rbx
mov    -0x10(%rbp),%r12
mov    -0x18(%rbp),%r13
mov    -0x20(%rbp),%r14
mov    -0x28(%rbp),%r15
leaveq 
retq   
movzbl (%rdx),%edx
mov    (%rax,%rdx,8),%rcx
movzbl (%rbx),%r14d
add    (%r10,%r14,8),%rcx
sar    $0x10,%rcx
movzbl 0x0(%r13),%r10d
lea    (%r10,%rcx,1),%eax
movslq %eax,%rax
movzbl (%r15,%rax,1),%eax
mov    %rax,%rdi
shr    $0x5,%edi
movslq (%r9,%rdx,4),%rbx
lea    (%r10,%rbx,1),%edx
movslq %edx,%rdx
movzbl (%r15,%rdx,1),%edx
and    $0xf8,%edx
add    %edi,%edx
and    $0x1c,%eax
shl    $0xb,%eax
add    %eax,%edx
movslq (%r8,%r14,4),%rdi
lea    (%r10,%rdi,1),%eax
movslq %eax,%rax
movzbl (%r15,%rax,1),%eax
and    $0xf8,%ax
shl    $0x5,%eax
add    %edx,%eax
mov    %ax,(%rsi)
movzbl (%r12),%esi
lea    (%rsi,%rcx,1),%eax
movslq %eax,%rax
movzbl (%r15,%rax,1),%eax
mov    %rax,%rdx
shr    $0x5,%edx
lea    (%rsi,%rbx,1),%ecx
movslq %ecx,%rcx
movzbl (%r15,%rcx,1),%ecx
and    $0xf8,%ecx
add    %edx,%ecx
and    $0x1c,%eax
shl    $0xb,%eax
add    %eax,%ecx
lea    (%rsi,%rdi,1),%eax
movslq %eax,%rax
movzbl (%r15,%rax,1),%eax
and    $0xf8,%ax
shl    $0x5,%eax
add    %ecx,%eax
mov    %ax,(%r11)
mov    -0x8(%rbp),%rbx
mov    -0x10(%rbp),%r12
mov    -0x18(%rbp),%r13
mov    -0x20(%rbp),%r14
mov    -0x28(%rbp),%r15
leaveq 
retq   
data16 nopw %cs:0x0(%rax,%rax,1)
nopl   0x0(%rax)

000000000002a540 <h2v2_merged_upsample_565D_be>:
push   %rbp
mov    %rsp,%rbp
sub    $0x90,%rsp
mov    %r15,-0x28(%rbp)
mov    %r14,-0x20(%rbp)
mov    %r13,-0x18(%rbp)
mov    %r12,-0x10(%rbp)
mov    %rbx,-0x8(%rbp)
mov    %rdi,-0x30(%rbp)
mov    0x1a8(%rdi),%r15
mov    0x260(%rdi),%rax
mov    0x30(%rax),%r14
mov    %r14,-0x50(%rbp)
mov    0x38(%rax),%r12
mov    %r12,-0x60(%rbp)
mov    0x20(%rax),%r11
mov    %r11,-0x48(%rbp)
mov    0x28(%rax),%rax
mov    %rax,-0x70(%rbp)
mov    (%rsi),%r8
lea    (%rdx,%rdx,1),%ebx
lea    0x1(%rbx),%eax
mov    %eax,%eax
mov    (%r8,%rax,8),%r9
mov    %ebx,%eax
mov    (%r8,%rax,8),%r13
lea    0x2fae3(%rip),%r8        # 5a090 <dither_matrix>
mov    0xa8(%rdi),%ebx
mov    %rbx,%rax
and    $0x3,%eax
mov    %eax,%eax
mov    (%r8,%rax,8),%rax
add    $0x1,%ebx
and    $0x3,%ebx
mov    %ebx,%ebx
mov    (%r8,%rbx,8),%r10
mov    0x8(%rsi),%r8
mov    %edx,%ebx
mov    (%r8,%rbx,8),%r8
mov    0x10(%rsi),%rdx
mov    (%rdx,%rbx,8),%rbx
mov    (%rcx),%rsi
mov    0x8(%rcx),%rcx
mov    %rcx,-0x38(%rbp)
mov    0x88(%rdi),%ecx
shr    %ecx
mov    %r14,%rdx
mov    -0x70(%rbp),%rdi
jmpq   2a88a <h2v2_merged_upsample_565D_be+0x34a>
mov    %rcx,-0x88(%rbp)
movzbl (%rbx),%r14d
mov    (%rdx,%r14,8),%rdx
mov    %r8,-0x78(%rbp)
movzbl (%r8),%r8d
add    (%r12,%r8,8),%rdx
sar    $0x10,%rdx
movzbl 0x1(%r13),%r12d
mov    %rbx,-0x58(%rbp)
lea    (%r12,%rdx,1),%ecx
movslq %ecx,%rbx
mov    %r10,%rcx
and    $0xfe,%rcx
shr    %rcx
add    %r15,%rcx
movzbl (%rcx,%rbx,1),%ecx
mov    %rcx,%rbx
shr    $0x5,%ebx
mov    %r10,-0x80(%rbp)
movzbl %r10b,%r10d
mov    %r9,-0x40(%rbp)
lea    (%r15,%r10,1),%r9
movslq (%r11,%r14,4),%r14
lea    (%r12,%r14,1),%r11d
movslq %r11d,%r11
movzbl (%r9,%r11,1),%r9d
and    $0xf8,%r9d
add    %r9d,%ebx
and    $0x1c,%ecx
shl    $0xb,%ecx
add    %ecx,%ebx
movslq (%rdi,%r8,4),%r8
lea    (%r12,%r8,1),%ecx
movslq %ecx,%rcx
add    %r15,%rcx
movzbl (%rcx,%r10,1),%ecx
and    $0xf8,%ecx
shl    $0x5,%ecx
add    %ebx,%ecx
mov    %ecx,%r9d
movzbl 0x0(%r13),%r11d
lea    (%r11,%rdx,1),%ecx
movslq %ecx,%rdi
mov    %rax,%rcx
and    $0xfe,%rcx
shr    %rcx
add    %r15,%rcx
movzbl (%rcx,%rdi,1),%ecx
mov    %rcx,%r12
shr    $0x5,%r12d
movzbl %al,%edi
lea    (%r15,%rdi,1),%rbx
mov    %r13,-0x68(%rbp)
lea    (%r11,%r14,1),%r13d
movslq %r13d,%r13
movzbl (%rbx,%r13,1),%ebx
and    $0xf8,%ebx
add    %r12d,%ebx
and    $0x1c,%ecx
shl    $0xb,%ecx
add    %ecx,%ebx
lea    (%r11,%r8,1),%ecx
movslq %ecx,%rcx
add    %r15,%rcx
movzbl (%rcx,%rdi,1),%ecx
and    $0xf8,%ecx
shl    $0x5,%ecx
add    %ebx,%ecx
mov    %ecx,%ecx
shl    $0x10,%rcx
add    %r9,%rcx
mov    %cx,0x2(%rsi)
shr    $0x10,%rcx
mov    %cx,(%rsi)
mov    -0x40(%rbp),%r9
movzbl 0x1(%r9),%r13d
lea    0x0(%r13,%rdx,1),%ecx
movslq %ecx,%r11
mov    -0x80(%rbp),%rcx
mov    $0xffffff00,%ebx
and    %rbx,%rcx
shr    $0x8,%rcx
shl    $0x18,%r10
lea    (%r10,%rcx,1),%rbx
mov    %rbx,-0x80(%rbp)
mov    %rbx,%rcx
and    $0xfe,%rcx
shr    %rcx
add    %r15,%rcx
movzbl (%rcx,%r11,1),%ecx
mov    %rcx,%r12
shr    $0x5,%r12d
movzbl %bl,%r10d
lea    (%r15,%r10,1),%r11
lea    0x0(%r13,%r14,1),%ebx
movslq %ebx,%rbx
movzbl (%r11,%rbx,1),%ebx
and    $0xf8,%ebx
add    %r12d,%ebx
and    $0x1c,%ecx
shl    $0xb,%ecx
add    %ecx,%ebx
lea    0x0(%r13,%r8,1),%ecx
movslq %ecx,%rcx
add    %r15,%rcx
movzbl (%rcx,%r10,1),%ecx
and    $0xf8,%ecx
shl    $0x5,%ecx
add    %ebx,%ecx
mov    %ecx,%r11d
movzbl (%r9),%ebx
lea    (%rbx,%rdx,1),%ecx
movslq %ecx,%rdx
mov    $0xffffff00,%ecx
and    %rcx,%rax
shr    $0x8,%rax
shl    $0x18,%rdi
lea    (%rdi,%rax,1),%rcx
mov    %rcx,%rax
and    $0xfe,%rax
shr    %rax
add    %r15,%rax
movzbl (%rax,%rdx,1),%eax
mov    %rax,%r13
shr    $0x5,%r13d
movzbl %cl,%edx
lea    (%r15,%rdx,1),%r12
lea    (%rbx,%r14,1),%edi
movslq %edi,%rdi
movzbl (%r12,%rdi,1),%edi
and    $0xf8,%edi
add    %r13d,%edi
and    $0x1c,%eax
shl    $0xb,%eax
add    %eax,%edi
lea    (%rbx,%r8,1),%eax
movslq %eax,%rax
add    %r15,%rax
movzbl (%rax,%rdx,1),%eax
and    $0xf8,%eax
shl    $0x5,%eax
add    %edi,%eax
mov    %eax,%eax
shl    $0x10,%rax
add    %r11,%rax
mov    -0x38(%rbp),%rdi
mov    %ax,0x2(%rdi)
shr    $0x10,%rax
mov    %ax,(%rdi)
add    $0x2,%r9
mov    -0x68(%rbp),%rax
lea    0x2(%rax),%r13
mov    -0x58(%rbp),%rax
lea    0x1(%rax),%rbx
mov    -0x78(%rbp),%rax
lea    0x1(%rax),%r8
shr    $0x8,%rcx
shl    $0x18,%rdx
lea    (%rcx,%rdx,1),%rax
add    $0x4,%rsi
mov    -0x80(%rbp),%rcx
shr    $0x8,%rcx
shl    $0x18,%r10
add    %rcx,%r10
lea    0x4(%rdi),%rcx
mov    %rcx,-0x38(%rbp)
mov    -0x88(%rbp),%rcx
add    $0xffffffff,%ecx
mov    -0x48(%rbp),%r11
mov    -0x60(%rbp),%r12
mov    -0x50(%rbp),%rdx
mov    -0x70(%rbp),%rdi
test   %ecx,%ecx
jne    2a5fc <h2v2_merged_upsample_565D_be+0xbc>
mov    -0x30(%rbp),%rcx
mov    0x88(%rcx),%ecx
and    $0x1,%ecx
test   %ecx,%ecx
jne    2a8b9 <h2v2_merged_upsample_565D_be+0x379>
mov    -0x8(%rbp),%rbx
mov    -0x10(%rbp),%r12
mov    -0x18(%rbp),%r13
mov    -0x20(%rbp),%r14
mov    -0x28(%rbp),%r15
leaveq 
retq   
movzbl (%rbx),%ebx
mov    (%rdx,%rbx,8),%rcx
movzbl (%r8),%r14d
add    (%r12,%r14,8),%rcx
sar    $0x10,%rcx
movzbl 0x0(%r13),%r13d
lea    0x0(%r13,%rcx,1),%edx
movslq %edx,%r8
mov    %rax,%rdx
and    $0xfe,%rdx
shr    %rdx
add    %r8,%rdx
movzbl (%r15,%rdx,1),%edx
mov    %rdx,%r12
shr    $0x5,%r12d
movslq (%r11,%rbx,4),%r8
lea    0x0(%r13,%r8,1),%ebx
movslq %ebx,%rbx
movzbl %al,%r11d
lea    (%r11,%rbx,1),%rax
movzbl (%r15,%rax,1),%eax
and    $0xf8,%eax
add    %r12d,%eax
and    $0x1c,%edx
shl    $0xb,%edx
add    %eax,%edx
movslq (%rdi,%r14,4),%rbx
lea    0x0(%r13,%rbx,1),%eax
movslq %eax,%rax
add    %r11,%rax
movzbl (%r15,%rax,1),%eax
and    $0xf8,%ax
shl    $0x5,%eax
add    %edx,%eax
mov    %ax,(%rsi)
movzbl (%r9),%edi
lea    (%rdi,%rcx,1),%eax
movslq %eax,%rcx
mov    %r10,%rax
and    $0xfe,%rax
shr    %rax
add    %rcx,%rax
movzbl (%r15,%rax,1),%eax
mov    %rax,%rsi
shr    $0x5,%esi
lea    (%rdi,%r8,1),%ecx
movslq %ecx,%rcx
movzbl %r10b,%edx
add    %rdx,%rcx
movzbl (%r15,%rcx,1),%ecx
and    $0xf8,%ecx
add    %esi,%ecx
and    $0x1c,%eax
shl    $0xb,%eax
add    %eax,%ecx
lea    (%rdi,%rbx,1),%eax
movslq %eax,%rax
add    %rdx,%rax
movzbl (%r15,%rax,1),%eax
and    $0xf8,%ax
shl    $0x5,%eax
add    %ecx,%eax
mov    -0x38(%rbp),%rcx
mov    %ax,(%rcx)
mov    -0x8(%rbp),%rbx
mov    -0x10(%rbp),%r12
mov    -0x18(%rbp),%r13
mov    -0x20(%rbp),%r14
mov    -0x28(%rbp),%r15
leaveq 
retq   
nopl   0x0(%rax)

000000000002a9c0 <is_big_endian>:
push   %rbp
mov    %rsp,%rbp
xor    %eax,%eax
leaveq 
retq   
nopl   0x0(%rax,%rax,1)

000000000002a9d0 <h2v1_merged_upsample_565>:
push   %rbp
mov    %rsp,%rbp
sub    $0x20,%rsp
mov    %r12,-0x8(%rbp)
mov    %r13,-0x10(%rbp)
mov    %r14,-0x18(%rbp)
mov    %r15,-0x20(%rbp)
mov    %rsi,%r12
mov    %rcx,%r13
mov    %rdx,%r14
mov    %rdi,%r15
callq  2a9c0 <is_big_endian>
test   %eax,%eax
jne    2aa20 <h2v1_merged_upsample_565+0x50>
mov    %r13,%rcx
mov    %r14,%rdx
mov    %r12,%rsi
mov    %r15,%rdi
callq  291e0 <h2v1_merged_upsample_565_le>
mov    -0x20(%rbp),%r15
mov    -0x18(%rbp),%r14
mov    -0x10(%rbp),%r13
mov    -0x8(%rbp),%r12
leaveq 
retq   
mov    %r13,%rcx
mov    %r14,%rdx
mov    %r12,%rsi
mov    %r15,%rdi
callq  29d40 <h2v1_merged_upsample_565_be>
mov    -0x20(%rbp),%r15
mov    -0x18(%rbp),%r14
mov    -0x10(%rbp),%r13
mov    -0x8(%rbp),%r12
leaveq 
retq   
data16 nopw %cs:0x0(%rax,%rax,1)
xchg   %ax,%ax

000000000002aa50 <h2v1_merged_upsample_565D>:
push   %rbp
mov    %rsp,%rbp
sub    $0x20,%rsp
mov    %r12,-0x8(%rbp)
mov    %r13,-0x10(%rbp)
mov    %r14,-0x18(%rbp)
mov    %r15,-0x20(%rbp)
mov    %rsi,%r12
mov    %rcx,%r13
mov    %rdx,%r14
mov    %rdi,%r15
callq  2a9c0 <is_big_endian>
test   %eax,%eax
jne    2aaa0 <h2v1_merged_upsample_565D+0x50>
mov    %r13,%rcx
mov    %r14,%rdx
mov    %r12,%rsi
mov    %r15,%rdi
callq  293c0 <h2v1_merged_upsample_565D_le>
mov    -0x20(%rbp),%r15
mov    -0x18(%rbp),%r14
mov    -0x10(%rbp),%r13
mov    -0x8(%rbp),%r12
leaveq 
retq   
mov    %r13,%rcx
mov    %r14,%rdx
mov    %r12,%rsi
mov    %r15,%rdi
callq  29f50 <h2v1_merged_upsample_565D_be>
mov    -0x20(%rbp),%r15
mov    -0x18(%rbp),%r14
mov    -0x10(%rbp),%r13
mov    -0x8(%rbp),%r12
leaveq 
retq   
data16 nopw %cs:0x0(%rax,%rax,1)
xchg   %ax,%ax

000000000002aad0 <h2v2_merged_upsample_565>:
push   %rbp
mov    %rsp,%rbp
sub    $0x20,%rsp
mov    %r12,-0x8(%rbp)
mov    %r13,-0x10(%rbp)
mov    %r14,-0x18(%rbp)
mov    %r15,-0x20(%rbp)
mov    %rsi,%r12
mov    %rdx,%r13
mov    %rdi,%r14
mov    %rcx,%r15
callq  2a9c0 <is_big_endian>
test   %eax,%eax
jne    2ab20 <h2v2_merged_upsample_565+0x50>
mov    %r15,%rcx
mov    %r13,%rdx
mov    %r12,%rsi
mov    %r14,%rdi
callq  29630 <h2v2_merged_upsample_565_le>
mov    -0x20(%rbp),%r15
mov    -0x18(%rbp),%r14
mov    -0x10(%rbp),%r13
mov    -0x8(%rbp),%r12
leaveq 
retq   
mov    %r15,%rcx
mov    %r13,%rdx
mov    %r12,%rsi
mov    %r14,%rdi
callq  2a200 <h2v2_merged_upsample_565_be>
mov    -0x20(%rbp),%r15
mov    -0x18(%rbp),%r14
mov    -0x10(%rbp),%r13
mov    -0x8(%rbp),%r12
leaveq 
retq   
data16 nopw %cs:0x0(%rax,%rax,1)
xchg   %ax,%ax

000000000002ab50 <h2v2_merged_upsample_565D>:
push   %rbp
mov    %rsp,%rbp
sub    $0x20,%rsp
mov    %r12,-0x8(%rbp)
mov    %r13,-0x10(%rbp)
mov    %r14,-0x18(%rbp)
mov    %r15,-0x20(%rbp)
mov    %rsi,%r12
mov    %rcx,%r13
mov    %rdx,%r14
mov    %rdi,%r15
callq  2a9c0 <is_big_endian>
test   %eax,%eax
jne    2aba0 <h2v2_merged_upsample_565D+0x50>
mov    %r13,%rcx
mov    %r14,%rdx
mov    %r12,%rsi
mov    %r15,%rdi
callq  29910 <h2v2_merged_upsample_565D_le>
mov    -0x20(%rbp),%r15
mov    -0x18(%rbp),%r14
mov    -0x10(%rbp),%r13
mov    -0x8(%rbp),%r12
leaveq 
retq   
mov    %r13,%rcx
mov    %r14,%rdx
mov    %r12,%rsi
mov    %r15,%rdi
callq  2a540 <h2v2_merged_upsample_565D_be>
mov    -0x20(%rbp),%r15
mov    -0x18(%rbp),%r14
mov    -0x10(%rbp),%r13
mov    -0x8(%rbp),%r12
leaveq 
retq   
nopw   %cs:0x0(%rax,%rax,1)
nopl   (%rax)

000000000002abd0 <jinit_phuff_decoder>:
push   %rbp
mov    %rsp,%rbp
sub    $0x10,%rsp
mov    %r14,-0x8(%rbp)
mov    %r15,-0x10(%rbp)
mov    $0x1,%r14d
mov    0x8(%rdi),%rax
mov    (%rax),%rax
mov    $0x68,%edx
mov    %rdi,%r15
mov    %r14,%rsi
callq  *%rax
mov    %rax,0x250(%r15)
lea    0x1048(%rip),%rcx        # 2bc50 <start_pass_phuff_decoder>
mov    %rcx,(%rax)
xor    %esi,%esi
mov    %rsi,%rcx
jmp    2ac21 <jinit_phuff_decoder+0x51>
movslq %ecx,%rdx
movq   $0x0,0x40(%rax,%rdx,8)
add    $0x1,%ecx
cmp    $0x3,%ecx
jle    2ac12 <jinit_phuff_decoder+0x42>
mov    0x8(%r15),%rax
mov    (%rax),%rax
movslq 0x38(%r15),%rcx
shl    $0x6,%ecx
movslq %ecx,%rdx
shl    $0x2,%rdx
mov    %r14,%rcx
mov    %rsi,%r14
mov    %rcx,%rsi
mov    %r15,%rdi
callq  *%rax
mov    %rax,0xc0(%r15)
mov    %r14,%rdx
jmp    2ac6a <jinit_phuff_decoder+0x9a>
movl   $0xffffffff,(%rax)
add    $0x4,%rax
add    $0x1,%ecx
cmp    $0x3f,%ecx
jle    2ac55 <jinit_phuff_decoder+0x85>
add    $0x1,%edx
movslq 0x38(%r15),%rcx
cmp    %edx,%ecx
jg     2ac7c <jinit_phuff_decoder+0xac>
mov    -0x10(%rbp),%r15
mov    -0x8(%rbp),%r14
leaveq 
retq   
mov    %r14,%rcx
jmp    2ac62 <jinit_phuff_decoder+0x92>
data16 nopw %cs:0x0(%rax,%rax,1)
nopl   0x0(%rax)

000000000002ac90 <decode_mcu_DC_first>:
push   %rbp
mov    %rsp,%rbp
sub    $0x80,%rsp
mov    %rdi,-0x38(%rbp)
mov    %rsi,-0x30(%rbp)
mov    0x250(%rdi),%r9
mov    %r9,-0x40(%rbp)
mov    0x218(%rdi),%ecx
xor    %r11d,%r11d
mov    0x170(%rdi),%eax
test   %eax,%eax
jne    2acf0 <decode_mcu_DC_first+0x60>
mov    %rbx,%r8
mov    %rcx,%rbx
mov    %r12,%rcx
mov    %rdi,%r12
mov    %rsi,%r10
mov    $0x1,%eax
movslq 0x10(%r9),%rdx
test   %edx,%edx
je     2ad09 <decode_mcu_DC_first+0x79>
mov    %r8,%rbx
mov    %rcx,%r12
mov    0x3c(%r9),%ecx
add    $0xffffffff,%ecx
mov    %ecx,0x3c(%r9)
leaveq 
retq   
mov    0x3c(%r9),%eax
test   %eax,%eax
je     2ad65 <decode_mcu_DC_first+0xd5>
mov    %rbx,%r8
mov    %rcx,%rbx
mov    %r12,%rcx
mov    %rdi,%r12
mov    %rsi,%r10
jmp    2acd0 <decode_mcu_DC_first+0x40>
mov    %r12,-0x60(%rbp)
mov    0x28(%r12),%rdx
mov    (%rdx),%rdx
mov    %rdx,-0x80(%rbp)
mov    0x28(%r12),%rdx
mov    0x8(%rdx),%rdx
mov    %rdx,-0x78(%rbp)
mov    0x18(%r9),%rsi
movslq 0x20(%r9),%rdx
mov    0x28(%r9),%rdi
mov    %rdi,-0x54(%rbp)
mov    0x30(%r9),%rdi
mov    %rdi,-0x4c(%rbp)
mov    0x38(%r9),%edi
mov    %edi,-0x44(%rbp)
lea    -0x80(%rbp),%rdi
mov    %r15,-0x28(%rbp)
mov    %r8,-0x8(%rbp)
mov    %rcx,-0x10(%rbp)
mov    %r13,-0x18(%rbp)
mov    %r14,-0x20(%rbp)
mov    %r11,%r13
jmpq   2ae4a <decode_mcu_DC_first+0x1ba>
mov    %rcx,-0x28(%rbp)
callq  2bfb0 <process_restart>
test   %eax,%eax
je     2aea9 <decode_mcu_DC_first+0x219>
mov    %r12,%rcx
mov    %rbx,%r8
xor    %r11d,%r11d
mov    -0x30(%rbp),%r10
mov    -0x28(%rbp),%rbx
mov    -0x38(%rbp),%r12
mov    -0x40(%rbp),%r9
jmpq   2acd0 <decode_mcu_DC_first+0x40>
movslq %r13d,%rax
mov    (%r10,%rax,8),%r14
movslq 0x1e4(%r12,%rax,4),%r15
mov    0x1b8(%r12,%r15,8),%rax
movslq 0x14(%rax),%rax
mov    0x40(%r9,%rax,8),%rax
cmp    $0x7,%edx
jg     2aec3 <decode_mcu_DC_first+0x233>
mov    %r11,%rcx
mov    %rax,%r12
callq  4410 <jpeg_fill_bit_buffer@plt>
test   %eax,%eax
je     2aef7 <decode_mcu_DC_first+0x267>
mov    -0x70(%rbp),%rsi
movslq -0x68(%rbp),%rdx
cmp    $0x7,%edx
jg     2aead <decode_mcu_DC_first+0x21d>
mov    %r12,%rax
lea    -0x80(%rbp),%rdi
mov    $0x1,%r8d
mov    -0x38(%rbp),%r12
mov    %rax,%rcx
callq  41c0 <jpeg_huff_decode@plt>
test   %eax,%eax
js     2af0f <decode_mcu_DC_first+0x27f>
mov    %rax,%rcx
mov    -0x70(%rbp),%rsi
movslq -0x68(%rbp),%rdx
lea    -0x80(%rbp),%rdi
xor    %r11d,%r11d
mov    -0x30(%rbp),%r10
mov    -0x40(%rbp),%r9
test   %ecx,%ecx
jne    2af27 <decode_mcu_DC_first+0x297>
mov    %r11,%rax
add    -0x50(%rbp,%r15,4),%eax
mov    %eax,-0x50(%rbp,%r15,4)
movslq %eax,%rax
mov    %rbx,%rcx
shl    %cl,%rax
mov    %rcx,%rbx
mov    %ax,(%r14)
add    $0x1,%r13d
mov    $0x1,%eax
cmp    0x1e0(%r12),%r13d
jl     2ad94 <decode_mcu_DC_first+0x104>
mov    -0x80(%rbp),%rdi
mov    0x28(%r12),%rcx
mov    %rdi,(%rcx)
mov    -0x78(%rbp),%rdi
mov    0x28(%r12),%rcx
mov    %rdi,0x8(%rcx)
mov    %rsi,0x18(%r9)
mov    %edx,0x20(%r9)
mov    -0x54(%rbp),%rcx
mov    %rcx,0x28(%r9)
mov    -0x4c(%rbp),%rcx
mov    %rcx,0x30(%r9)
mov    -0x44(%rbp),%ecx
mov    %ecx,0x38(%r9)
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
mov    -0x28(%rbp),%r15
jmpq   2ace3 <decode_mcu_DC_first+0x53>
xor    %eax,%eax
leaveq 
retq   
mov    %r12,%rax
lea    -0x80(%rbp),%rdi
xor    %r11d,%r11d
mov    -0x30(%rbp),%r10
mov    -0x38(%rbp),%r12
mov    -0x40(%rbp),%r9
lea    0x38(%rdx),%ecx
mov    %rsi,%r8
shr    %cl,%r8
movzbl %r8b,%ecx
movslq %ecx,%rcx
movslq 0x128(%rax,%rcx,4),%rcx
mov    %rcx,%r8
sar    $0x8,%r8d
cmp    $0x8,%r8d
jg     2adf2 <decode_mcu_DC_first+0x162>
sub    %r8d,%edx
movzbl %cl,%ecx
jmpq   2ae1c <decode_mcu_DC_first+0x18c>
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
mov    -0x28(%rbp),%r15
xor    %eax,%eax
leaveq 
retq   
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
mov    -0x28(%rbp),%r15
xor    %eax,%eax
leaveq 
retq   
cmp    %ecx,%edx
jge    2af52 <decode_mcu_DC_first+0x2c2>
mov    %rcx,%r12
callq  4410 <jpeg_fill_bit_buffer@plt>
test   %eax,%eax
je     2af87 <decode_mcu_DC_first+0x2f7>
mov    %r12,%rcx
mov    -0x70(%rbp),%rsi
movslq -0x68(%rbp),%rdx
lea    -0x80(%rbp),%rdi
mov    -0x30(%rbp),%r10
mov    -0x38(%rbp),%r12
mov    -0x40(%rbp),%r9
mov    $0x1,%r8d
mov    %r8,%rax
shl    %cl,%eax
add    $0xffffffff,%eax
sub    %ecx,%edx
mov    %rcx,%r11
mov    %rdx,%rcx
mov    %rsi,%rdx
shr    %cl,%rdx
and    %edx,%eax
mov    %rcx,%rdx
lea    0x1f(%r11),%ecx
shl    %cl,%r8d
cmp    %r8d,%eax
jl     2af9f <decode_mcu_DC_first+0x30f>
xor    %r11d,%r11d
jmpq   2ae27 <decode_mcu_DC_first+0x197>
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
mov    -0x28(%rbp),%r15
xor    %eax,%eax
leaveq 
retq   
mov    %r11,%rcx
mov    $0xffffffffffffffff,%r8
shl    %cl,%r8d
lea    0x1(%rax,%r8,1),%eax
xor    %r11d,%r11d
jmpq   2ae27 <decode_mcu_DC_first+0x197>
nopl   0x0(%rax)

000000000002afc0 <decode_mcu_AC_first>:
push   %rbp
mov    %rsp,%rbp
sub    $0x80,%rsp
mov    0x250(%rdi),%r8
movslq 0x210(%rdi),%r9
mov    0x218(%rdi),%edx
xor    %ecx,%ecx
mov    0x170(%rdi),%eax
test   %eax,%eax
jne    2b029 <decode_mcu_AC_first+0x69>
mov    %rsi,%r10
mov    %rdi,%r11
mov    %r12,%rdi
mov    %r9,%r12
mov    %rbx,%r9
mov    %rdx,%rbx
mov    %r15,%rdx
mov    %r14,%r15
mov    $0x1,%eax
movslq 0x10(%r8),%rsi
test   %esi,%esi
je     2b04f <decode_mcu_AC_first+0x8f>
mov    %r9,%rbx
mov    %rdi,%r12
mov    0x3c(%r8),%ecx
add    $0xffffffff,%ecx
mov    %ecx,0x3c(%r8)
mov    %r15,%r14
mov    %rdx,%r15
leaveq 
retq   
mov    0x3c(%r8),%eax
test   %eax,%eax
je     2b0c3 <decode_mcu_AC_first+0x103>
mov    %rsi,%r10
mov    %rdi,%r11
mov    %r12,%rdi
mov    %r9,%r12
mov    %rbx,%r9
mov    %rdx,%rbx
mov    %r15,%rdx
mov    %r14,%r15
jmp    2b003 <decode_mcu_AC_first+0x43>
mov    0x28(%r8),%esi
test   %esi,%esi
jne    2b117 <decode_mcu_AC_first+0x157>
mov    %r11,-0x58(%rbp)
mov    0x28(%r11),%rsi
mov    (%rsi),%rsi
mov    %rsi,-0x78(%rbp)
mov    0x28(%r11),%rsi
mov    0x8(%rsi),%rsi
mov    %rsi,-0x70(%rbp)
mov    0x60(%r8),%r14
mov    0x18(%r8),%rsi
mov    %rdx,-0x38(%rbp)
movslq 0x20(%r8),%rdx
mov    (%r10),%r10
mov    %r15,-0x30(%rbp)
mov    %r10,-0x50(%rbp)
movslq 0x20c(%r11),%r15
mov    %r13,-0x28(%rbp)
mov    0x42f35(%rip),%r13        # 6dfd8 <jpeg_natural_order@@LIBJPEG_6.2+0x129f4>
mov    %rdi,-0x20(%rbp)
lea    -0x78(%rbp),%rdi
mov    %r9,-0x18(%rbp)
mov    $0xffffffffffffffff,%r9
mov    %r8,-0x8(%rbp)
mov    %r11,-0x10(%rbp)
jmpq   2b1d1 <decode_mcu_AC_first+0x211>
mov    %rdi,%rax
mov    %r8,-0x50(%rbp)
mov    %rdi,-0x48(%rbp)
mov    %rsi,-0x40(%rbp)
mov    %rdx,-0x38(%rbp)
mov    %r9,-0x30(%rbp)
mov    %rax,%rdi
mov    %r15,%rax
mov    %r14,%r15
mov    %rax,%r14
callq  2bfb0 <process_restart>
test   %eax,%eax
je     2b234 <decode_mcu_AC_first+0x274>
mov    %r14,%rdx
mov    %r12,%rdi
mov    %rbx,%r9
xor    %ecx,%ecx
mov    -0x30(%rbp),%r12
mov    -0x38(%rbp),%rbx
mov    -0x40(%rbp),%r10
mov    -0x48(%rbp),%r11
mov    -0x50(%rbp),%r8
jmpq   2b003 <decode_mcu_AC_first+0x43>
lea    -0x1(%rsi),%ecx
mov    %r9,%rbx
mov    %rdi,%r12
mov    %ecx,0x28(%r8)
jmpq   2b016 <decode_mcu_AC_first+0x56>
cmp    %ecx,%edx
jge    2b174 <decode_mcu_AC_first+0x1b4>
mov    %rcx,%rax
mov    %r12,-0x40(%rbp)
mov    %r14,-0x48(%rbp)
mov    %rcx,%r12
mov    %rax,%rcx
mov    %r8,%r14
callq  4410 <jpeg_fill_bit_buffer@plt>
test   %eax,%eax
je     2b241 <decode_mcu_AC_first+0x281>
mov    %r12,%rcx
mov    %r14,%r8
mov    -0x68(%rbp),%rsi
movslq -0x60(%rbp),%rdx
mov    -0x48(%rbp),%r14
mov    $0xffffffffffffffff,%r9
mov    -0x50(%rbp),%r10
mov    $0x1,%eax
mov    -0x40(%rbp),%r12
mov    %rax,%rdi
shl    %cl,%edi
add    $0xffffffff,%edi
sub    %ecx,%edx
mov    %rcx,%r11
mov    %rdx,%rcx
mov    %rsi,%rdx
shr    %cl,%rdx
and    %edx,%edi
mov    %rcx,%rdx
lea    0x1f(%r11),%ecx
shl    %cl,%eax
cmp    %edi,%eax
jle    2b1a5 <decode_mcu_AC_first+0x1e5>
mov    %r11,%rcx
mov    %r9,%rax
shl    %cl,%eax
lea    0x1(%rdi,%rax,1),%edi
movslq %edi,%rax
mov    %rbx,%rcx
shl    %cl,%rax
mov    %rcx,%rbx
lea    (%r8,%r15,1),%ecx
movslq %ecx,%rdi
movslq 0x0(%r13,%rdi,4),%rdi
mov    %ax,(%r10,%rdi,2)
lea    -0x78(%rbp),%rdi
mov    $0x1,%eax
lea    0x1(%rcx),%r15d
xor    %ecx,%ecx
cmp    %r12d,%r15d
jg     2b26d <decode_mcu_AC_first+0x2ad>
cmp    $0x7,%edx
jle    2b2ad <decode_mcu_AC_first+0x2ed>
lea    0x38(%rdx),%ecx
mov    %rsi,%r8
shr    %cl,%r8
movzbl %r8b,%ecx
movslq %ecx,%rcx
movslq 0x128(%r14,%rcx,4),%rcx
mov    %rcx,%r8
sar    $0x8,%r8d
cmp    $0x8,%r8d
jle    2b2da <decode_mcu_AC_first+0x31a>
mov    %r14,%rcx
callq  41c0 <jpeg_huff_decode@plt>
test   %eax,%eax
jns    2b2e3 <decode_mcu_AC_first+0x323>
mov    -0x18(%rbp),%rbx
mov    -0x20(%rbp),%r12
mov    -0x28(%rbp),%r13
mov    -0x30(%rbp),%r14
mov    -0x38(%rbp),%r15
xor    %eax,%eax
leaveq 
retq   
mov    %r15,%rcx
mov    %r14,%r15
mov    %rcx,%r14
xor    %eax,%eax
leaveq 
retq   
mov    -0x18(%rbp),%rbx
mov    -0x20(%rbp),%r12
mov    -0x28(%rbp),%r13
mov    -0x30(%rbp),%r14
mov    -0x38(%rbp),%r15
xor    %eax,%eax
leaveq 
retq   
mov    %r8,%rcx
mov    %rax,%rbx
shl    %cl,%ebx
test   %r11d,%r11d
jne    2b331 <decode_mcu_AC_first+0x371>
lea    -0x1(%rbx),%ecx
mov    -0x78(%rbp),%rbx
mov    -0x10(%rbp),%r8
mov    0x28(%r8),%rdi
mov    %rbx,(%rdi)
mov    -0x70(%rbp),%rbx
mov    0x28(%r8),%rdi
mov    %rbx,0x8(%rdi)
mov    -0x8(%rbp),%r8
mov    %rsi,0x18(%r8)
mov    %edx,0x20(%r8)
mov    -0x18(%rbp),%rbx
mov    -0x20(%rbp),%r12
mov    -0x28(%rbp),%r13
mov    -0x30(%rbp),%r15
mov    -0x38(%rbp),%rdx
jmpq   2b120 <decode_mcu_AC_first+0x160>
callq  4410 <jpeg_fill_bit_buffer@plt>
test   %eax,%eax
je     2b34f <decode_mcu_AC_first+0x38f>
mov    -0x68(%rbp),%rsi
movslq -0x60(%rbp),%rdx
cmp    $0x7,%edx
jg     2b367 <decode_mcu_AC_first+0x3a7>
lea    -0x78(%rbp),%rdi
mov    $0x1,%r8d
jmpq   2b20c <decode_mcu_AC_first+0x24c>
sub    %r8d,%edx
movzbl %cl,%r11d
jmp    2b302 <decode_mcu_AC_first+0x342>
mov    %rax,%r11
mov    -0x68(%rbp),%rsi
movslq -0x60(%rbp),%rdx
mov    $0xffffffffffffffff,%r9
lea    -0x78(%rbp),%rdi
mov    -0x50(%rbp),%r10
mov    $0x1,%eax
mov    %r11,%r8
sar    $0x4,%r8d
mov    %r11,%rcx
and    $0xf,%ecx
test   %ecx,%ecx
jg     2b129 <decode_mcu_AC_first+0x169>
and    $0xfffffff0,%r11d
cmp    $0xf0,%r11d
jne    2b259 <decode_mcu_AC_first+0x299>
lea    0xf(%r15),%ecx
jmpq   2b1cb <decode_mcu_AC_first+0x20b>
cmp    %ecx,%edx
jl     2b380 <decode_mcu_AC_first+0x3c0>
sub    %ecx,%edx
mov    %rdx,%rcx
mov    %rsi,%rdi
shr    %cl,%rdi
mov    %rcx,%rdx
lea    -0x1(%rbx),%ecx
and    %edi,%ecx
add    %ecx,%ebx
jmpq   2b26a <decode_mcu_AC_first+0x2aa>
mov    -0x18(%rbp),%rbx
mov    -0x20(%rbp),%r12
mov    -0x28(%rbp),%r13
mov    -0x30(%rbp),%r14
mov    -0x38(%rbp),%r15
xor    %eax,%eax
leaveq 
retq   
mov    $0xffffffffffffffff,%r9
lea    -0x78(%rbp),%rdi
mov    -0x50(%rbp),%r10
mov    $0x1,%eax
jmpq   2b1e3 <decode_mcu_AC_first+0x223>
mov    %rax,%r12
mov    %rcx,%r13
callq  4410 <jpeg_fill_bit_buffer@plt>
test   %eax,%eax
jne    2b3a7 <decode_mcu_AC_first+0x3e7>
mov    -0x18(%rbp),%rbx
mov    -0x20(%rbp),%r12
mov    -0x28(%rbp),%r13
mov    -0x30(%rbp),%r14
mov    -0x38(%rbp),%r15
xor    %eax,%eax
leaveq 
retq   
mov    %r12,%rax
mov    %r13,%rcx
mov    -0x68(%rbp),%rsi
movslq -0x60(%rbp),%rdx
jmpq   2b335 <decode_mcu_AC_first+0x375>
nopw   0x0(%rax,%rax,1)

000000000002b3c0 <decode_mcu_DC_refine>:
push   %rbp
mov    %rsp,%rbp
sub    $0x60,%rsp
mov    0x250(%rdi),%rax
mov    %rax,-0x20(%rbp)
mov    0x218(%rdi),%ecx
xor    %r8d,%r8d
mov    0x170(%rdi),%edx
test   %edx,%edx
jne    2b449 <decode_mcu_DC_refine+0x89>
mov    %r14,%rdx
mov    %rbx,%r9
mov    %r8,%rbx
mov    %r15,%r8
mov    %r13,%r15
mov    %rdi,%r13
mov    %r12,%r10
mov    %rsi,%r12
mov    %r13,-0x38(%rbp)
mov    0x28(%r13),%rsi
mov    (%rsi),%rsi
mov    %rsi,-0x58(%rbp)
mov    0x28(%r13),%rsi
mov    0x8(%rsi),%rsi
mov    %rsi,-0x50(%rbp)
mov    0x18(%rax),%rsi
movslq 0x20(%rax),%r11
mov    $0x1,%eax
mov    %rax,%r14
shl    %cl,%r14d
lea    -0x58(%rbp),%rdi
mov    %r9,-0x8(%rbp)
mov    %r10,-0x10(%rbp)
mov    %r15,-0x18(%rbp)
mov    %rdx,-0x28(%rbp)
mov    %r8,-0x30(%rbp)
mov    %r11,%rcx
jmp    2b49c <decode_mcu_DC_refine+0xdc>
mov    0x3c(%rax),%edx
test   %edx,%edx
je     2b4e6 <decode_mcu_DC_refine+0x126>
mov    %r14,%rdx
mov    %rbx,%r9
mov    %r8,%rbx
mov    %r15,%r8
mov    %r13,%r15
mov    %rdi,%r13
mov    %r12,%r10
mov    %rsi,%r12
jmp    2b3fe <decode_mcu_DC_refine+0x3e>
movslq %ebx,%rdx
mov    (%r12,%rdx,8),%r15
test   %ecx,%ecx
jle    2b52d <decode_mcu_DC_refine+0x16d>
add    $0xffffffff,%ecx
mov    %rsi,%rdx
shr    %cl,%rdx
and    $0x1,%edx
test   %edx,%edx
jle    2b499 <decode_mcu_DC_refine+0xd9>
movswq (%r15),%rdx
or     %r14w,%dx
mov    %dx,(%r15)
add    $0x1,%ebx
cmp    0x1e0(%r13),%ebx
jl     2b46e <decode_mcu_DC_refine+0xae>
mov    -0x58(%rbp),%rdi
mov    0x28(%r13),%rdx
mov    %rdi,(%rdx)
mov    -0x50(%rbp),%rdi
mov    0x28(%r13),%rdx
mov    %rdi,0x8(%rdx)
mov    -0x20(%rbp),%rdx
mov    %rsi,0x18(%rdx)
mov    %ecx,0x20(%rdx)
mov    0x3c(%rdx),%ecx
add    $0xffffffff,%ecx
mov    %ecx,0x3c(%rdx)
mov    -0x30(%rbp),%r15
mov    -0x28(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
leaveq 
retq   
mov    %rdi,%rax
mov    %rdi,-0x28(%rbp)
mov    %rcx,-0x18(%rbp)
mov    %rsi,-0x30(%rbp)
mov    %rax,%rdi
mov    %r15,%rax
mov    %r13,%r15
mov    %rax,%r13
callq  2bfb0 <process_restart>
test   %eax,%eax
je     2b552 <decode_mcu_DC_refine+0x192>
mov    %r14,%rdx
mov    %r13,%r8
mov    %rbx,%r9
mov    %r12,%r10
xor    %ebx,%ebx
mov    -0x30(%rbp),%r12
mov    -0x18(%rbp),%rcx
mov    -0x20(%rbp),%rax
mov    -0x28(%rbp),%r13
jmpq   2b3fe <decode_mcu_DC_refine+0x3e>
mov    %rcx,%rdx
mov    %rax,%rcx
callq  4410 <jpeg_fill_bit_buffer@plt>
test   %eax,%eax
je     2b55f <decode_mcu_DC_refine+0x19f>
mov    -0x48(%rbp),%rsi
movslq -0x40(%rbp),%rcx
mov    $0x1,%eax
lea    -0x58(%rbp),%rdi
jmpq   2b47d <decode_mcu_DC_refine+0xbd>
mov    %r15,%rcx
mov    %r13,%r15
mov    %rcx,%r13
xor    %eax,%eax
leaveq 
retq   
mov    -0x30(%rbp),%r15
mov    -0x28(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
xor    %eax,%eax
leaveq 
retq   
nopw   0x0(%rax,%rax,1)

000000000002b580 <decode_mcu_AC_refine>:
push   %rbp
mov    %rsp,%rbp
sub    $0x1b0,%rsp
mov    %rdi,-0x78(%rbp)
mov    0x250(%rdi),%rdx
movslq 0x210(%rdi),%r9
mov    %r9,-0x70(%rbp)
mov    0x218(%rdi),%ecx
xor    %eax,%eax
mov    %rax,-0x40(%rbp)
mov    0x170(%rdi),%eax
test   %eax,%eax
jne    2b5ea <decode_mcu_AC_refine+0x6a>
mov    %r12,%r8
mov    %r14,%r10
mov    %rdi,%r14
mov    %r13,%rdi
mov    %rbx,%r13
mov    $0x1,%eax
movslq 0x10(%rdx),%rbx
test   %ebx,%ebx
je     2b606 <decode_mcu_AC_refine+0x86>
mov    %r10,%r14
mov    0x3c(%rdx),%ecx
add    $0xffffffff,%ecx
mov    %ecx,0x3c(%rdx)
mov    %r13,%rbx
mov    %rdi,%r13
mov    %r8,%r12
leaveq 
retq   
mov    0x3c(%rdx),%eax
test   %eax,%eax
je     2b6dd <decode_mcu_AC_refine+0x15d>
mov    %r12,%r8
mov    %r14,%r10
mov    %rdi,%r14
mov    %r13,%rdi
mov    %rbx,%r13
jmp    2b5c6 <decode_mcu_AC_refine+0x46>
mov    %r14,-0x188(%rbp)
mov    0x28(%r14),%rax
mov    (%rax),%rax
mov    %rax,-0x1a8(%rbp)
mov    0x28(%r14),%rax
mov    0x8(%rax),%rax
mov    %rax,-0x1a0(%rbp)
mov    0x60(%rdx),%r11
mov    %r11,-0x38(%rbp)
mov    (%rsi),%r12
mov    0x18(%rdx),%rsi
movslq 0x20(%rdx),%rax
movslq 0x20c(%r14),%rbx
mov    %r15,-0x30(%rbp)
mov    0x42989(%rip),%r15        # 6dfd8 <jpeg_natural_order@@LIBJPEG_6.2+0x129f4>
mov    %r15,-0x60(%rbp)
mov    %r10,-0x28(%rbp)
mov    $0x1,%r10d
shl    %cl,%r10d
mov    %r10,-0x80(%rbp)
xchg   %rax,%rdx
mov    $0xffffffffffffffff,%r10
shl    %cl,%r10d
mov    %r10,-0x50(%rbp)
mov    0x28(%rax),%ecx
test   %ecx,%ecx
je     2b71d <decode_mcu_AC_refine+0x19d>
mov    %rdi,-0x20(%rbp)
mov    %rcx,%r10
mov    %rdx,%rcx
mov    %rax,%rdx
lea    -0x1a8(%rbp),%rdi
mov    $0x1,%eax
xor    %r11d,%r11d
test   %r10d,%r10d
jne    2b748 <decode_mcu_AC_refine+0x1c8>
mov    -0x1a8(%rbp),%rbx
mov    0x28(%r14),%rdi
mov    %rbx,(%rdi)
mov    -0x1a0(%rbp),%rbx
mov    0x28(%r14),%rdi
mov    %rbx,0x8(%rdi)
mov    %rsi,0x18(%rdx)
mov    %ecx,0x20(%rdx)
mov    %r11d,0x28(%rdx)
mov    -0x20(%rbp),%rdi
mov    -0x28(%rbp),%r14
mov    -0x30(%rbp),%r15
jmpq   2b5d6 <decode_mcu_AC_refine+0x56>
mov    %rdx,-0x80(%rbp)
mov    %rsi,-0x60(%rbp)
mov    %rcx,-0x68(%rbp)
mov    %r13,%rax
mov    %rbx,%r13
mov    %rax,%rbx
callq  2bfb0 <process_restart>
test   %eax,%eax
je     2b765 <decode_mcu_AC_refine+0x1e5>
mov    %rbx,%rdi
mov    %r12,%r8
mov    %r14,%r10
mov    -0x70(%rbp),%r9
mov    -0x68(%rbp),%rcx
mov    -0x60(%rbp),%rsi
mov    -0x78(%rbp),%r14
mov    -0x80(%rbp),%rdx
jmpq   2b5c6 <decode_mcu_AC_refine+0x46>
mov    %rax,-0x8(%rbp)
mov    %r13,-0x10(%rbp)
mov    %r8,-0x18(%rbp)
mov    %rdi,-0x20(%rbp)
mov    %rdx,%rcx
mov    %r11,%r8
lea    -0x1a8(%rbp),%rdi
mov    -0x80(%rbp),%r13
mov    $0x1,%eax
xor    %r11d,%r11d
jmp    2b7a3 <decode_mcu_AC_refine+0x223>
mov    %rdx,-0x70(%rbp)
mov    %r13,-0x10(%rbp)
mov    %r8,-0x18(%rbp)
mov    %r10,-0x48(%rbp)
mov    -0x50(%rbp),%rdx
mov    -0x80(%rbp),%r13
jmpq   2b8d2 <decode_mcu_AC_refine+0x352>
mov    %r13,%rcx
mov    %rbx,%r13
mov    %rcx,%rbx
xor    %eax,%eax
leaveq 
retq   
movslq %ebx,%rdx
movslq (%r15,%rdx,4),%r8
mov    %r11w,(%r12,%r8,2)
mov    -0x40(%rbp),%r11
movslq %r11d,%rdx
mov    %r8d,-0x180(%rbp,%rdx,4)
lea    0x1(%r11),%edx
mov    %rdx,-0x40(%rbp)
add    $0x1,%ebx
mov    -0x38(%rbp),%r8
xor    %r11d,%r11d
mov    -0x78(%rbp),%r14
cmp    %r9d,%ebx
jg     2b8f8 <decode_mcu_AC_refine+0x378>
cmp    $0x7,%ecx
jle    2b90c <decode_mcu_AC_refine+0x38c>
mov    %rcx,%rdx
lea    0x38(%rdx),%ecx
mov    %rsi,%rax
shr    %cl,%rax
movzbl %al,%eax
movslq %eax,%rax
movslq 0x128(%r8,%rax,4),%rax
mov    %rax,%rcx
sar    $0x8,%ecx
cmp    $0x8,%ecx
jle    2b951 <decode_mcu_AC_refine+0x3d1>
mov    %rcx,%rax
mov    %rdx,%rcx
mov    %rcx,%rdx
mov    %r8,%rcx
mov    %rax,%r8
callq  41c0 <jpeg_huff_decode@plt>
test   %eax,%eax
js     2b960 <decode_mcu_AC_refine+0x3e0>
mov    %r14,%r8
mov    -0x198(%rbp),%rsi
movslq -0x190(%rbp),%rcx
mov    -0x50(%rbp),%r10
lea    -0x1a8(%rbp),%rdi
xor    %r11d,%r11d
mov    -0x70(%rbp),%r9
mov    %rax,%r14
sar    $0x4,%r14d
mov    %rax,%rdx
and    $0xf,%edx
test   %edx,%edx
jg     2b969 <decode_mcu_AC_refine+0x3e9>
and    $0xfffffff0,%eax
cmp    $0xf0,%eax
jne    2b9e5 <decode_mcu_AC_refine+0x465>
mov    $0x1,%eax
jmpq   2ba31 <decode_mcu_AC_refine+0x4b1>
movslq %ebx,%r8
movslq (%r15,%r8,4),%r14
movswq (%r12,%r14,2),%r8
test   %r8w,%r8w
je     2b8cf <decode_mcu_AC_refine+0x34f>
test   %ecx,%ecx
jg     2b89b <decode_mcu_AC_refine+0x31b>
mov    %rcx,%rdx
mov    %rax,%rcx
mov    %r9,%r15
callq  4410 <jpeg_fill_bit_buffer@plt>
test   %eax,%eax
je     2ba74 <decode_mcu_AC_refine+0x4f4>
mov    %r15,%r9
mov    -0x198(%rbp),%rsi
movslq -0x190(%rbp),%rcx
mov    -0x60(%rbp),%r15
mov    -0x50(%rbp),%rdx
lea    -0x1a8(%rbp),%rdi
mov    $0x1,%eax
add    $0xffffffff,%ecx
mov    %rsi,%r8
shr    %cl,%r8
and    $0x1,%r8d
test   %r8d,%r8d
jle    2b8cf <decode_mcu_AC_refine+0x34f>
movswq (%r12,%r14,2),%r8
mov    %r13,%r10
and    %r8d,%r10d
test   %r10d,%r10d
jne    2b8cf <decode_mcu_AC_refine+0x34f>
test   %r8w,%r8w
jns    2ba7a <decode_mcu_AC_refine+0x4fa>
add    %edx,%r8d
mov    %r8w,(%r12,%r14,2)
add    $0x1,%ebx
cmp    %ebx,%r9d
jge    2b84a <decode_mcu_AC_refine+0x2ca>
mov    -0x48(%rbp),%rdx
lea    -0x1(%rdx),%r11d
mov    -0x18(%rbp),%r8
mov    -0x10(%rbp),%r13
mov    -0x78(%rbp),%r14
mov    -0x70(%rbp),%rdx
jmpq   2b6a4 <decode_mcu_AC_refine+0x124>
mov    -0x18(%rbp),%r8
mov    -0x10(%rbp),%r13
mov    -0x8(%rbp),%rdx
mov    %r11,%r10
jmpq   2b69b <decode_mcu_AC_refine+0x11b>
mov    %rcx,%rdx
mov    %r11,%rcx
mov    %r8,%r13
callq  4410 <jpeg_fill_bit_buffer@plt>
test   %eax,%eax
je     2ba87 <decode_mcu_AC_refine+0x507>
mov    -0x198(%rbp),%rsi
movslq -0x190(%rbp),%rcx
cmp    $0x7,%ecx
jg     2ba8d <decode_mcu_AC_refine+0x50d>
mov    %r13,%r8
lea    -0x1a8(%rbp),%rdi
mov    -0x80(%rbp),%r13
mov    $0x1,%eax
jmpq   2b7e4 <decode_mcu_AC_refine+0x264>
neg    %ecx
add    %edx,%ecx
movzbl %al,%eax
mov    %r14,%r8
jmpq   2b81d <decode_mcu_AC_refine+0x29d>
mov    -0x40(%rbp),%rax
jmpq   2bac0 <decode_mcu_AC_refine+0x540>
cmp    $0x1,%edx
je     2b9bf <decode_mcu_AC_refine+0x43f>
mov    (%r8),%rax
movl   $0x76,0x28(%rax)
mov    (%r8),%rax
mov    0x8(%rax),%rdx
mov    %r8,%rdi
mov    $0xffffffffffffffff,%rax
mov    %rbx,-0x68(%rbp)
mov    %r12,-0x58(%rbp)
mov    %rcx,%rbx
mov    %rsi,%r12
mov    %rax,%rsi
mov    %r10,%r15
callq  *%rdx
mov    %rbx,%rcx
mov    %r12,%rsi
mov    %r15,%r10
mov    -0x58(%rbp),%r12
mov    -0x60(%rbp),%r15
mov    -0x68(%rbp),%rbx
lea    -0x1a8(%rbp),%rdi
mov    -0x70(%rbp),%r9
test   %ecx,%ecx
jle    2badc <decode_mcu_AC_refine+0x55c>
add    $0xffffffff,%ecx
mov    %rsi,%rax
shr    %cl,%rax
and    $0x1,%eax
test   %eax,%eax
jg     2bb20 <decode_mcu_AC_refine+0x5a0>
mov    $0x1,%eax
mov    %r10,%r11
jmp    2ba31 <decode_mcu_AC_refine+0x4b1>
mov    %rcx,%rdx
mov    %r14,%rcx
mov    %r8,%r14
mov    $0x1,%r10d
shl    %cl,%r10d
test   %eax,%eax
jne    2bb2d <decode_mcu_AC_refine+0x5ad>
mov    %rdx,%rcx
mov    -0x18(%rbp),%r8
mov    -0x10(%rbp),%r13
mov    $0x1,%eax
mov    -0x8(%rbp),%rdx
jmpq   2b69b <decode_mcu_AC_refine+0x11b>
add    $0xffffffff,%r14d
test   %r14d,%r14d
js     2bb63 <decode_mcu_AC_refine+0x5e3>
add    $0x1,%ebx
cmp    %r9d,%ebx
jg     2bb63 <decode_mcu_AC_refine+0x5e3>
movslq %ebx,%rdx
movslq (%r15,%rdx,4),%r8
movswq (%r12,%r8,2),%rdx
test   %dx,%dx
je     2ba18 <decode_mcu_AC_refine+0x498>
test   %ecx,%ecx
jle    2bb75 <decode_mcu_AC_refine+0x5f5>
add    $0xffffffff,%ecx
mov    %rsi,%rdx
shr    %cl,%rdx
and    $0x1,%edx
test   %edx,%edx
jle    2ba25 <decode_mcu_AC_refine+0x4a5>
movswq (%r12,%r8,2),%rax
mov    %rax,%rdx
and    %r13d,%edx
test   %edx,%edx
je     2bb94 <decode_mcu_AC_refine+0x614>
mov    $0x1,%eax
jmp    2ba25 <decode_mcu_AC_refine+0x4a5>
mov    -0x40(%rbp),%rax
jmp    2bac0 <decode_mcu_AC_refine+0x540>
add    %r13d,%r8d
mov    %r8w,(%r12,%r14,2)
jmpq   2b8cf <decode_mcu_AC_refine+0x34f>
mov    -0x40(%rbp),%rax
jmp    2bac0 <decode_mcu_AC_refine+0x540>
mov    %r13,%r8
mov    -0x50(%rbp),%r10
lea    -0x1a8(%rbp),%rdi
mov    -0x80(%rbp),%r13
xor    %r11d,%r11d
mov    -0x70(%rbp),%r9
jmpq   2b7b5 <decode_mcu_AC_refine+0x235>
add    $0xffffffff,%eax
movslq %eax,%rcx
movslq -0x180(%rbp,%rcx,4),%rcx
movw   $0x0,(%r12,%rcx,2)
test   %eax,%eax
jg     2baab <decode_mcu_AC_refine+0x52b>
mov    -0x20(%rbp),%r13
mov    -0x18(%rbp),%r12
mov    -0x10(%rbp),%rbx
mov    -0x28(%rbp),%r14
mov    -0x30(%rbp),%r15
xor    %eax,%eax
leaveq 
retq   
mov    $0x1,%eax
mov    %r12,-0x58(%rbp)
mov    %rcx,%rdx
mov    %rax,%rcx
mov    %r10,%r12
callq  4410 <jpeg_fill_bit_buffer@plt>
test   %eax,%eax
je     2bbab <decode_mcu_AC_refine+0x62b>
mov    %r12,%r10
mov    -0x198(%rbp),%rsi
movslq -0x190(%rbp),%rcx
mov    -0x58(%rbp),%r12
lea    -0x1a8(%rbp),%rdi
mov    -0x70(%rbp),%r9
jmpq   2b9c7 <decode_mcu_AC_refine+0x447>
mov    $0x1,%eax
mov    %r13,%r11
jmpq   2ba31 <decode_mcu_AC_refine+0x4b1>
cmp    %ecx,%edx
jl     2bbb8 <decode_mcu_AC_refine+0x638>
mov    %rcx,%r13
mov    %rdx,%rcx
sub    %r13d,%ecx
mov    %rsi,%rdx
shr    %cl,%rdx
lea    -0x1(%r10),%eax
and    %edx,%eax
add    %eax,%r10d
mov    -0x18(%rbp),%r8
mov    -0x10(%rbp),%r13
mov    $0x1,%eax
mov    -0x8(%rbp),%rdx
jmpq   2b69b <decode_mcu_AC_refine+0x11b>
test   %r11d,%r11d
jne    2b772 <decode_mcu_AC_refine+0x1f2>
mov    -0x40(%rbp),%rdx
jmpq   2b791 <decode_mcu_AC_refine+0x211>
mov    %r11,-0x48(%rbp)
mov    %rcx,%rdx
mov    %rax,%rcx
mov    %r8,%r15
callq  4410 <jpeg_fill_bit_buffer@plt>
test   %eax,%eax
jne    2bbd3 <decode_mcu_AC_refine+0x653>
mov    -0x40(%rbp),%rax
jmpq   2bac0 <decode_mcu_AC_refine+0x540>
test   %ax,%ax
jns    2bc05 <decode_mcu_AC_refine+0x685>
add    %r10d,%eax
mov    %ax,(%r12,%r8,2)
mov    $0x1,%eax
jmpq   2ba25 <decode_mcu_AC_refine+0x4a5>
mov    -0x58(%rbp),%r12
mov    -0x40(%rbp),%rax
jmpq   2bac0 <decode_mcu_AC_refine+0x540>
mov    %r10,%r14
mov    %r9,%r15
mov    %rcx,%r13
callq  4410 <jpeg_fill_bit_buffer@plt>
test   %eax,%eax
jne    2bc17 <decode_mcu_AC_refine+0x697>
mov    -0x40(%rbp),%rax
jmpq   2bac0 <decode_mcu_AC_refine+0x540>
mov    %r15,%r8
mov    -0x198(%rbp),%rsi
movslq -0x190(%rbp),%rcx
mov    -0x48(%rbp),%r11
mov    -0x60(%rbp),%r15
mov    -0x50(%rbp),%r10
lea    -0x1a8(%rbp),%rdi
mov    $0x1,%eax
mov    -0x70(%rbp),%r9
jmpq   2ba4a <decode_mcu_AC_refine+0x4ca>
add    %r13d,%eax
mov    %ax,(%r12,%r8,2)
mov    $0x1,%eax
jmpq   2ba25 <decode_mcu_AC_refine+0x4a5>
mov    %r15,%r9
mov    %r14,%r10
mov    -0x198(%rbp),%rsi
movslq -0x190(%rbp),%rcx
mov    -0x60(%rbp),%r15
lea    -0x1a8(%rbp),%rdi
xor    %r11d,%r11d
mov    -0x78(%rbp),%r14
jmpq   2bb3b <decode_mcu_AC_refine+0x5bb>
data16 nopw %cs:0x0(%rax,%rax,1)
nopl   (%rax)

000000000002bc50 <start_pass_phuff_decoder>:
push   %rbp
mov    %rsp,%rbp
sub    $0x40,%rsp
mov    %rbx,-0x8(%rbp)
mov    %r12,-0x10(%rbp)
mov    %r13,-0x18(%rbp)
mov    %r14,-0x20(%rbp)
mov    %r15,-0x28(%rbp)
mov    0x250(%rdi),%rax
mov    %rax,-0x30(%rbp)
mov    $0x1,%esi
xor    %eax,%eax
movslq 0x20c(%rdi),%rdx
test   %edx,%edx
je     2bc8e <start_pass_phuff_decoder+0x3e>
mov    %rax,%r14
jmp    2bc91 <start_pass_phuff_decoder+0x41>
mov    %rsi,%r14
mov    %r14,-0x38(%rbp)
test   %r14d,%r14d
jg     2bcb9 <start_pass_phuff_decoder+0x69>
movslq 0x210(%rdi),%rcx
cmp    %ecx,%edx
jle    2bcc9 <start_pass_phuff_decoder+0x79>
mov    %rsi,%rcx
movslq 0x1b0(%rdi),%rdx
cmp    $0x1,%edx
je     2bcd6 <start_pass_phuff_decoder+0x86>
mov    %rsi,%rcx
jmp    2bcd6 <start_pass_phuff_decoder+0x86>
movslq 0x210(%rdi),%rcx
test   %ecx,%ecx
jne    2bcd3 <start_pass_phuff_decoder+0x83>
mov    %rax,%rcx
jmp    2bcd6 <start_pass_phuff_decoder+0x86>
cmp    $0x3f,%ecx
jg     2bd06 <start_pass_phuff_decoder+0xb6>
mov    %rax,%rcx
jmp    2bca8 <start_pass_phuff_decoder+0x58>
mov    %rsi,%rcx
movslq 0x214(%rdi),%rdx
test   %edx,%edx
jne    2bd0b <start_pass_phuff_decoder+0xbb>
movslq 0x218(%rdi),%rdx
cmp    $0xd,%edx
jle    2bcf0 <start_pass_phuff_decoder+0xa0>
mov    %rsi,%rcx
mov    $0xffffffffffffffff,%rsi
test   %ecx,%ecx
jg     2bd1b <start_pass_phuff_decoder+0xcb>
mov    %rdi,%rbx
mov    %rax,%rcx
jmpq   2bde1 <start_pass_phuff_decoder+0x191>
mov    %rsi,%rcx
jmp    2bca8 <start_pass_phuff_decoder+0x58>
add    $0xffffffff,%edx
cmp    0x218(%rdi),%edx
je     2bce1 <start_pass_phuff_decoder+0x91>
mov    %rsi,%rcx
jmp    2bce1 <start_pass_phuff_decoder+0x91>
mov    (%rdi),%rcx
movl   $0x10,0x28(%rcx)
movslq 0x20c(%rdi),%rdx
mov    (%rdi),%rcx
mov    %edx,0x2c(%rcx)
movslq 0x210(%rdi),%rdx
mov    (%rdi),%rcx
mov    %edx,0x30(%rcx)
movslq 0x214(%rdi),%rdx
mov    (%rdi),%rcx
mov    %edx,0x34(%rcx)
movslq 0x218(%rdi),%rdx
mov    (%rdi),%rcx
mov    %edx,0x38(%rcx)
mov    (%rdi),%rcx
mov    (%rcx),%rcx
mov    %rax,%r12
mov    %rsi,%r13
mov    %rdi,%rbx
callq  *%rcx
mov    %r12,%rcx
mov    %r13,%rsi
mov    %rcx,%rax
jmp    2bde1 <start_pass_phuff_decoder+0x191>
movslq %r14d,%r15
movslq (%r12,%r15,4),%rcx
test   %ecx,%ecx
jns    2bd83 <start_pass_phuff_decoder+0x133>
mov    %rax,%rcx
movslq 0x214(%rbx),%rdx
cmp    %ecx,%edx
je     2bdbb <start_pass_phuff_decoder+0x16b>
mov    (%rbx),%rax
movl   $0x73,0x28(%rax)
mov    (%rbx),%rax
mov    %r13d,0x2c(%rax)
mov    (%rbx),%rax
mov    %r14d,0x30(%rax)
mov    (%rbx),%rax
mov    0x8(%rax),%rax
mov    %rbx,%rdi
callq  *%rax
mov    $0xffffffffffffffff,%rsi
xor    %eax,%eax
movslq 0x218(%rbx),%rcx
mov    %ecx,(%r12,%r15,4)
add    $0x1,%r14d
movslq 0x210(%rbx),%rcx
cmp    %r14d,%ecx
jge    2bd75 <start_pass_phuff_decoder+0x125>
mov    -0x40(%rbp),%rcx
add    $0x1,%ecx
mov    -0x38(%rbp),%r14
mov    %rcx,-0x40(%rbp)
movslq 0x1b0(%rbx),%rdx
cmp    %ecx,%edx
jg     2be25 <start_pass_phuff_decoder+0x1d5>
movslq 0x214(%rbx),%rcx
test   %ecx,%ecx
je     2be8e <start_pass_phuff_decoder+0x23e>
test   %r14d,%r14d
jg     2beb1 <start_pass_phuff_decoder+0x261>
lea    -0x88f(%rip),%rcx        # 2b580 <decode_mcu_AC_refine>
mov    -0x30(%rbp),%r12
mov    %rcx,0x8(%r12)
mov    $0x1,%esi
mov    %rax,%r13
jmpq   2bf18 <start_pass_phuff_decoder+0x2c8>
movslq %ecx,%rcx
mov    0x1b8(%rbx,%rcx,8),%rcx
movslq 0x4(%rcx),%r13
mov    %r13,%r12
shl    $0x8,%r12
add    0xc0(%rbx),%r12
test   %r14d,%r14d
jg     2be82 <start_pass_phuff_decoder+0x232>
movslq (%r12),%rcx
test   %ecx,%ecx
jns    2be82 <start_pass_phuff_decoder+0x232>
mov    (%rbx),%rcx
movl   $0x73,0x28(%rcx)
mov    (%rbx),%rcx
mov    %r13d,0x2c(%rcx)
mov    (%rbx),%rcx
movl   $0x0,0x30(%rcx)
mov    (%rbx),%rcx
mov    0x8(%rcx),%rcx
mov    %rax,%r15
mov    %rbx,%rdi
mov    %rsi,%r14
callq  *%rcx
mov    %r15,%rax
mov    %r14,%rsi
movslq 0x20c(%rbx),%r14
jmpq   2bdca <start_pass_phuff_decoder+0x17a>
test   %r14d,%r14d
jg     2bf69 <start_pass_phuff_decoder+0x319>
lea    -0xede(%rip),%rcx        # 2afc0 <decode_mcu_AC_first>
mov    -0x30(%rbp),%r12
mov    %rcx,0x8(%r12)
mov    $0x1,%esi
mov    %rax,%r13
jmp    2bf18 <start_pass_phuff_decoder+0x2c8>
lea    -0xaf8(%rip),%rcx        # 2b3c0 <decode_mcu_DC_refine>
mov    -0x30(%rbp),%r12
mov    %rcx,0x8(%r12)
mov    $0x1,%esi
mov    %rax,%r13
jmp    2bf18 <start_pass_phuff_decoder+0x2c8>
test   %r14d,%r14d
movslq %r13d,%r15
mov    0x1b8(%rbx,%r15,8),%rdx
jg     2bf83 <start_pass_phuff_decoder+0x333>
movslq 0x18(%rdx),%r14
mov    %rax,%rsi
lea    0x40(%r12,%r14,8),%rcx
mov    %rbx,%rdi
mov    %r14,%rdx
callq  44c0 <jpeg_make_d_derived_tbl@plt>
mov    0x40(%r12,%r14,8),%rax
mov    %rax,0x60(%r12)
xor    %eax,%eax
mov    -0x38(%rbp),%r14
mov    $0x1,%esi
movl   $0x0,0x2c(%r12,%r15,4)
add    $0x1,%r13d
movslq 0x1b0(%rbx),%rcx
cmp    %r13d,%ecx
jg     2becb <start_pass_phuff_decoder+0x27b>
movl   $0x0,0x20(%r12)
movq   $0x0,0x18(%r12)
movl   $0x0,0x10(%r12)
movl   $0x0,0x28(%r12)
mov    0x170(%rbx),%eax
mov    %eax,0x3c(%r12)
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
leaveq 
retq   
lea    -0x12e0(%rip),%rcx        # 2ac90 <decode_mcu_DC_first>
mov    -0x30(%rbp),%r12
mov    %rcx,0x8(%r12)
mov    $0x1,%esi
mov    %rax,%r13
jmp    2bf18 <start_pass_phuff_decoder+0x2c8>
movslq 0x214(%rbx),%rcx
test   %ecx,%ecx
jne    2bf0b <start_pass_phuff_decoder+0x2bb>
movslq 0x14(%rdx),%rdx
lea    0x40(%r12,%rdx,8),%rcx
mov    %rbx,%rdi
callq  44c0 <jpeg_make_d_derived_tbl@plt>
xor    %eax,%eax
mov    $0x1,%esi
jmpq   2bf0b <start_pass_phuff_decoder+0x2bb>
nop

000000000002bfb0 <process_restart>:
push   %rbp
mov    %rsp,%rbp
sub    $0x10,%rsp
mov    %rdi,-0x8(%rbp)
mov    0x250(%rdi),%rdx
mov    %rdx,-0x10(%rbp)
movslq 0x20(%rdx),%rcx
mov    %rcx,%rax
sar    $0x2,%eax
shr    $0x1d,%eax
add    %ecx,%eax
sar    $0x3,%eax
mov    0x248(%rdi),%rcx
add    0x24(%rcx),%eax
mov    %eax,0x24(%rcx)
movl   $0x0,0x20(%rdx)
mov    0x248(%rdi),%rax
mov    0x10(%rax),%rax
callq  *%rax
test   %eax,%eax
jne    2c002 <process_restart+0x52>
xor    %eax,%eax
leaveq 
retq   
xor    %eax,%eax
mov    -0x10(%rbp),%rdx
mov    -0x8(%rbp),%rsi
jmp    2c01c <process_restart+0x6c>
movslq %eax,%rcx
movl   $0x0,0x2c(%rdx,%rcx,4)
add    $0x1,%eax
movslq 0x1b0(%rsi),%rcx
cmp    %eax,%ecx
jg     2c00e <process_restart+0x5e>
movl   $0x0,0x28(%rdx)
mov    0x170(%rsi),%eax
mov    %eax,0x3c(%rdx)
mov    $0x1,%eax
movslq 0x21c(%rsi),%rcx
test   %ecx,%ecx
je     2c049 <process_restart+0x99>
leaveq 
retq   
movl   $0x0,0x10(%rdx)
leaveq 
retq   
nopw   %cs:0x0(%rax,%rax,1)
nopl   0x0(%rax)

000000000002c060 <jinit_d_post_controller>:
push   %rbp
mov    %rsp,%rbp
sub    $0x20,%rsp
mov    %r15,-0x20(%rbp)
mov    %rsi,-0x18(%rbp)
mov    0x8(%rdi),%rax
mov    (%rax),%rax
mov    $0x1,%esi
mov    $0x30,%edx
mov    %rdi,%r15
callq  *%rax
mov    %rax,0x238(%r15)
lea    0x38c(%rip),%rcx        # 2c420 <start_pass_dpost>
mov    %rcx,(%rax)
movq   $0x0,0x10(%rax)
movq   $0x0,0x18(%rax)
movslq 0x6c(%r15),%rcx
test   %ecx,%ecx
jne    2c0b5 <jinit_d_post_controller+0x55>
mov    -0x20(%rbp),%r15
leaveq 
retq   
mov    0x19c(%r15),%esi
mov    %esi,0x20(%rax)
mov    -0x18(%rbp),%rcx
test   %ecx,%ecx
jne    2c0f9 <jinit_d_post_controller+0x99>
mov    0x90(%r15),%edx
imul   0x88(%r15),%edx
mov    0x8(%r15),%rcx
mov    0x10(%rcx),%r8
mov    %rsi,%rcx
mov    %r15,%rdi
mov    %rax,%r15
mov    $0x1,%esi
callq  *%r8
mov    %rax,0x18(%r15)
mov    -0x20(%rbp),%r15
leaveq 
retq   
mov    0x8c(%r15),%edi
mov    0x90(%r15),%ecx
imul   0x88(%r15),%ecx
mov    0x8(%r15),%rdx
mov    0x20(%rdx),%rdx
mov    %r12,-0x8(%rbp)
mov    %r13,-0x10(%rbp)
mov    %r14,-0x18(%rbp)
mov    %rax,%r12
mov    %rdx,%r13
mov    %rcx,%r14
callq  42b0 <jround_up@plt>
mov    %r14,%rcx
mov    %r15,%rdi
mov    %rax,%r8
xor    %edx,%edx
mov    0x20(%r12),%r9d
mov    $0x1,%esi
callq  *%r13
mov    %rax,0x10(%r12)
mov    -0x18(%rbp),%r14
mov    -0x10(%rbp),%r13
mov    -0x8(%rbp),%r12
mov    -0x20(%rbp),%r15
leaveq 
retq   

000000000002c160 <post_process_1pass>:
push   %rbp
mov    %rsp,%rbp
sub    $0x30,%rsp
mov    %r15,-0x20(%rbp)
mov    %r14,-0x18(%rbp)
mov    %r12,-0x8(%rbp)
mov    %r13,-0x10(%rbp)
mov    0x10(%rbp),%eax
mov    (%r9),%r10d
sub    %r10d,%eax
mov    0x238(%rdi),%r13
mov    0x20(%r13),%r10d
cmp    %eax,%r10d
jae    2c194 <post_process_1pass+0x34>
mov    %r10,%rax
movl   $0x0,-0x24(%rbp)
mov    0x260(%rdi),%r10
mov    0x8(%r10),%r10
mov    0x18(%r13),%r11
mov    %eax,(%rsp)
mov    %r9,%r12
mov    %r8,%r14
mov    %r11,%r8
mov    %rdi,%r15
lea    -0x24(%rbp),%r9
callq  *%r10
mov    (%r12),%eax
lea    (%r14,%rax,8),%rdx
mov    0x270(%r15),%rax
mov    0x8(%rax),%rax
mov    0x18(%r13),%rsi
mov    %r15,%rdi
movslq -0x24(%rbp),%rcx
callq  *%rax
mov    (%r12),%eax
add    -0x24(%rbp),%eax
mov    %eax,(%r12)
mov    -0x10(%rbp),%r13
mov    -0x8(%rbp),%r12
mov    -0x18(%rbp),%r14
mov    -0x20(%rbp),%r15
leaveq 
retq   
nopl   (%rax)

000000000002c200 <post_process_prepass>:
push   %rbp
mov    %rsp,%rbp
sub    $0x40,%rsp
mov    %r9,-0x30(%rbp)
mov    %r15,-0x28(%rbp)
mov    %r14,-0x20(%rbp)
mov    %r13,-0x18(%rbp)
mov    0x238(%rdi),%r13
lea    0x28(%r13),%r9
mov    (%r9),%eax
test   %eax,%eax
je     2c22f <post_process_prepass+0x2f>
mov    %rdi,%r14
jmp    2c28b <post_process_prepass+0x8b>
mov    0x8(%rdi),%rax
mov    0x38(%rax),%rax
mov    0x10(%r13),%r10
mov    0x24(%r13),%r14d
mov    0x20(%r13),%r15d
mov    %rdi,%r11
mov    %r9,-0x38(%rbp)
mov    %rbx,-0x8(%rbp)
mov    %r12,-0x10(%rbp)
mov    %rdx,%rbx
mov    %r14,%rdx
mov    %rdi,%r14
mov    %r11,%rdi
mov    %rcx,%r12
mov    %r15,%rcx
mov    %rsi,%r15
mov    %r10,%rsi
mov    $0x1,%r8d
callq  *%rax
mov    %rax,0x18(%r13)
mov    %r12,%rcx
mov    %rbx,%rdx
mov    %r15,%rsi
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
mov    -0x38(%rbp),%r9
mov    0x20(%r13),%edi
mov    0x260(%r14),%rax
mov    0x8(%rax),%rax
mov    0x18(%r13),%r8
mov    0x28(%r13),%r15d
mov    %edi,(%rsp)
mov    %r14,%rdi
callq  *%rax
mov    0x28(%r13),%eax
cmp    %r15d,%eax
jbe    2c2e4 <post_process_prepass+0xe4>
sub    %r15d,%eax
shl    $0x3,%r15
add    0x18(%r13),%r15
mov    0x270(%r14),%rcx
mov    0x8(%rcx),%r8
mov    %r15,%rsi
mov    %r14,%rdi
mov    %rax,%r14
xor    %edx,%edx
mov    %r14,%rcx
callq  *%r8
mov    -0x30(%rbp),%rax
add    (%rax),%r14d
mov    %r14d,(%rax)
mov    0x20(%r13),%eax
cmp    0x28(%r13),%eax
jbe    2c2fc <post_process_prepass+0xfc>
mov    -0x18(%rbp),%r13
mov    -0x20(%rbp),%r14
mov    -0x28(%rbp),%r15
leaveq 
retq   
add    0x24(%r13),%eax
mov    %eax,0x24(%r13)
movl   $0x0,0x28(%r13)
mov    -0x18(%rbp),%r13
mov    -0x20(%rbp),%r14
mov    -0x28(%rbp),%r15
leaveq 
retq   
nopw   0x0(%rax,%rax,1)

000000000002c320 <post_process_2pass>:
push   %rbp
mov    %rsp,%rbp
sub    $0x20,%rsp
mov    %r15,-0x20(%rbp)
mov    %r13,-0x10(%rbp)
mov    %r14,-0x18(%rbp)
mov    0x238(%rdi),%r14
mov    0x28(%r14),%eax
test   %eax,%eax
je     2c348 <post_process_2pass+0x28>
mov    %r9,%r15
jmp    2c382 <post_process_2pass+0x62>
mov    0x8(%rdi),%rax
mov    0x38(%rax),%rax
mov    0x10(%r14),%rsi
mov    0x24(%r14),%edx
mov    0x20(%r14),%ecx
mov    %rdi,%r11
mov    %r12,-0x8(%rbp)
mov    %r8,%r12
mov    %rdi,%r13
mov    %r11,%rdi
mov    %r9,%r15
xor    %r8d,%r8d
callq  *%rax
mov    %rax,0x18(%r14)
mov    %r13,%rdi
mov    %r12,%r8
mov    -0x8(%rbp),%r12
mov    (%r15),%edx
mov    0x10(%rbp),%eax
sub    %edx,%eax
mov    0x28(%r14),%esi
mov    0x20(%r14),%r13d
sub    %esi,%r13d
cmp    %r13d,%eax
jae    2c39d <post_process_2pass+0x7d>
mov    %rax,%r13
mov    0x8c(%rdi),%eax
mov    0x24(%r14),%ecx
sub    %ecx,%eax
cmp    %eax,%r13d
jbe    2c3b1 <post_process_2pass+0x91>
mov    %rax,%r13
shl    $0x3,%rsi
add    0x18(%r14),%rsi
lea    (%r8,%rdx,8),%rdx
mov    0x270(%rdi),%rax
mov    0x8(%rax),%rax
mov    %r13,%rcx
callq  *%rax
mov    %r13,%rax
add    (%r15),%eax
mov    %eax,(%r15)
add    0x28(%r14),%r13d
mov    %r13d,0x28(%r14)
mov    0x20(%r14),%eax
cmp    %r13d,%eax
jbe    2c3f5 <post_process_2pass+0xd5>
mov    -0x18(%rbp),%r14
mov    -0x10(%rbp),%r13
mov    -0x20(%rbp),%r15
leaveq 
retq   
add    0x24(%r14),%eax
mov    %eax,0x24(%r14)
movl   $0x0,0x28(%r14)
mov    -0x18(%rbp),%r14
mov    -0x10(%rbp),%r13
mov    -0x20(%rbp),%r15
leaveq 
retq   
data16 nopw %cs:0x0(%rax,%rax,1)
xchg   %ax,%ax

000000000002c420 <start_pass_dpost>:
push   %rbp
mov    %rsp,%rbp
sub    $0x10,%rsp
mov    0x238(%rdi),%rax
cmp    $0x1,%esi
jbe    2c474 <start_pass_dpost+0x54>
cmp    $0x2,%esi
je     2c4a8 <start_pass_dpost+0x88>
cmp    $0x3,%esi
jne    2c478 <start_pass_dpost+0x58>
mov    0x10(%rax),%rcx
test   %rcx,%rcx
jne    2c467 <start_pass_dpost+0x47>
mov    (%rdi),%rcx
movl   $0x4,0x28(%rcx)
mov    (%rdi),%rcx
mov    (%rcx),%rcx
mov    %r15,-0x8(%rbp)
mov    %rax,%r15
callq  *%rcx
mov    %r15,%rax
mov    -0x8(%rbp),%r15
lea    -0x26e(%rip),%rcx        # 2c200 <post_process_prepass>
mov    %rcx,0x8(%rax)
jmp    2c498 <start_pass_dpost+0x78>
test   %esi,%esi
je     2c4de <start_pass_dpost+0xbe>
mov    (%rdi),%rcx
movl   $0x4,0x28(%rcx)
mov    (%rdi),%rcx
mov    (%rcx),%rcx
mov    %r15,-0x8(%rbp)
mov    %rax,%r15
callq  *%rcx
mov    %r15,%rax
mov    -0x8(%rbp),%r15
movl   $0x0,0x28(%rax)
movl   $0x0,0x24(%rax)
leaveq 
retq   
mov    0x10(%rax),%rcx
test   %rcx,%rcx
jne    2c4d1 <start_pass_dpost+0xb1>
mov    (%rdi),%rcx
movl   $0x4,0x28(%rcx)
mov    (%rdi),%rcx
mov    (%rcx),%rcx
mov    %r15,-0x8(%rbp)
mov    %rax,%r15
callq  *%rcx
mov    %r15,%rax
mov    -0x8(%rbp),%r15
lea    -0x1b8(%rip),%rcx        # 2c320 <post_process_2pass>
mov    %rcx,0x8(%rax)
jmp    2c498 <start_pass_dpost+0x78>
movslq 0x6c(%rdi),%rcx
test   %ecx,%ecx
jne    2c4f7 <start_pass_dpost+0xd7>
mov    0x260(%rdi),%rcx
mov    0x8(%rcx),%rcx
mov    %rcx,0x8(%rax)
jmp    2c498 <start_pass_dpost+0x78>
lea    -0x39e(%rip),%rcx        # 2c160 <post_process_1pass>
mov    %rcx,0x8(%rax)
mov    0x18(%rax),%rcx
test   %rcx,%rcx
jne    2c498 <start_pass_dpost+0x78>
mov    0x8(%rdi),%rcx
mov    0x38(%rcx),%r9
mov    0x10(%rax),%rsi
xor    %edx,%edx
mov    0x20(%rax),%ecx
mov    $0x1,%r8d
mov    %r15,-0x8(%rbp)
mov    %rax,%r15
callq  *%r9
mov    %rax,0x18(%r15)
mov    %r15,%rax
mov    -0x8(%rbp),%r15
jmpq   2c498 <start_pass_dpost+0x78>
nopl   0x0(%rax)

000000000002c540 <jinit_upsampler>:
push   %rbp
mov    %rsp,%rbp
sub    $0x70,%rsp
mov    %r14,-0x20(%rbp)
mov    %r15,-0x28(%rbp)
mov    %r13,-0x18(%rbp)
mov    %r12,-0x10(%rbp)
mov    %rbx,-0x8(%rbp)
mov    $0x1,%ecx
mov    %rcx,-0x30(%rbp)
mov    0x220(%rdi),%rax
movslq 0x6c(%rax),%rax
test   %eax,%eax
jne    2c62e <jinit_upsampler+0xee>
mov    0x8(%rdi),%rax
mov    (%rax),%rax
mov    %rcx,%r12
mov    $0x100,%edx
mov    %rdi,%rbx
mov    %r12,%rsi
callq  *%rax
mov    %rax,0x260(%rbx)
lea    0x403(%rip),%rcx        # 2c9a0 <start_pass_upsample>
mov    %rcx,(%rax)
lea    0x429(%rip),%rcx        # 2c9d0 <sep_upsample>
mov    %rcx,0x8(%rax)
mov    %r12,%rcx
mov    %rax,%r12
movl   $0x0,0x10(%r12)
movslq 0x188(%rbx),%rax
test   %eax,%eax
je     2c5e0 <jinit_upsampler+0xa0>
mov    (%rbx),%rax
movl   $0x19,0x28(%rax)
mov    (%rbx),%rax
mov    (%rax),%rax
mov    %rcx,%r13
mov    %rbx,%rdi
callq  *%rax
mov    %r13,%rcx
xor    %r13d,%r13d
mov    %r13,-0x38(%rbp)
movslq 0x64(%rbx),%rax
test   %eax,%eax
jne    2c63a <jinit_upsampler+0xfa>
mov    %r13,%rcx
mov    %rcx,-0x70(%rbp)
mov    0x130(%rbx),%r14
lea    0x112dc(%rip),%rax        # 3d8e0 <jsimd_h2v2_fancy_upsample>
mov    %rax,-0x58(%rbp)
lea    0x112f1(%rip),%rax        # 3d900 <jsimd_h2v1_fancy_upsample>
mov    %rax,-0x48(%rbp)
lea    0x11226(%rip),%rsi        # 3d840 <jsimd_h2v1_upsample>
mov    %rsi,-0x50(%rbp)
lea    0x111fb(%rip),%rax        # 3d820 <jsimd_h2v2_upsample>
mov    %rax,-0x60(%rbp)
jmpq   2c6b5 <jinit_upsampler+0x175>
mov    %rdi,%rbx
mov    0x260(%rbx),%r12
jmp    2c5ba <jinit_upsampler+0x7a>
movslq 0x1a0(%rbx),%rax
cmp    $0x1,%eax
jg     2c5f2 <jinit_upsampler+0xb2>
mov    %r13,%rcx
jmp    2c5f2 <jinit_upsampler+0xb2>
movslq 0x8(%r14),%r11
movslq 0x24(%r14),%rdi
movslq 0x1a0(%rbx),%r8
movslq 0x24(%r14),%rax
imul   0xc(%r14),%eax
cltd   
movslq 0x1a0(%rbx),%r15
movslq 0x198(%rbx),%r10
movslq 0x19c(%rbx),%r9
idiv   %r15d
movslq %r13d,%r15
mov    %eax,0xc0(%r12,%r15,4)
movslq 0x30(%r14),%rdx
test   %edx,%edx
jne    2c6d4 <jinit_upsampler+0x194>
lea    0x4ba(%rip),%rax        # 2cb50 <noop_upsample>
mov    %rax,0x68(%r12,%r15,8)
pushq  -0x38(%rbp)
popq   -0x40(%rbp)
mov    -0x40(%rbp),%rax
test   %eax,%eax
jg     2c749 <jinit_upsampler+0x209>
add    $0x1,%r13d
add    $0x60,%r14
movslq 0x38(%rbx),%rax
cmp    %r13d,%eax
jg     2c64b <jinit_upsampler+0x10b>
mov    -0x8(%rbp),%rbx
mov    -0x10(%rbp),%r12
mov    -0x18(%rbp),%r13
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
leaveq 
retq   
imul   %r11d,%edi
mov    %rdi,%rdx
mov    %rax,%rdi
mov    %rdx,%rax
cltd   
idiv   %r8d
cmp    %r10d,%eax
je     2c7a7 <jinit_upsampler+0x267>
lea    (%rax,%rax,1),%edx
cmp    %edx,%r10d
je     2c7c7 <jinit_upsampler+0x287>
cmp    %r10d,%eax
je     2c80e <jinit_upsampler+0x2ce>
cmp    %edx,%r10d
je     2c843 <jinit_upsampler+0x303>
mov    %rax,%r8
mov    %r10,%rax
cltd   
mov    %rax,%r10
idiv   %r8d
test   %edx,%edx
je     2c883 <jinit_upsampler+0x343>
mov    (%rbx),%rax
movl   $0x26,0x28(%rax)
mov    (%rbx),%rax
mov    (%rax),%rax
mov    %rbx,%rdi
callq  *%rax
mov    -0x50(%rbp),%rsi
mov    -0x70(%rbp),%rcx
pushq  -0x30(%rbp)
popq   -0x40(%rbp)
jmpq   2c6a1 <jinit_upsampler+0x161>
mov    0x220(%rbx),%rax
movslq 0x6c(%rax),%rax
test   %eax,%eax
jne    2c6ad <jinit_upsampler+0x16d>
mov    0x88(%rbx),%edi
movslq 0x198(%rbx),%rsi
mov    0x8(%rbx),%rax
mov    0x10(%rax),%rax
mov    %r14,-0x68(%rbp)
mov    %rax,%r14
callq  42b0 <jround_up@plt>
mov    %rax,%rdx
mov    0x19c(%rbx),%ecx
mov    %rbx,%rdi
mov    $0x1,%esi
callq  *%r14
mov    %rax,0x18(%r12,%r15,8)
mov    -0x68(%rbp),%r14
mov    -0x50(%rbp),%rsi
mov    -0x70(%rbp),%rcx
jmpq   2c6ad <jinit_upsampler+0x16d>
cmp    %r9d,%edi
jne    2c6ee <jinit_upsampler+0x1ae>
lea    0x389(%rip),%rax        # 2cb40 <fullsize_upsample>
mov    %rax,0x68(%r12,%r15,8)
pushq  -0x38(%rbp)
popq   -0x40(%rbp)
jmpq   2c6a1 <jinit_upsampler+0x161>
cmp    %r9d,%edi
jne    2c6fa <jinit_upsampler+0x1ba>
test   %ecx,%ecx
jg     2c8c8 <jinit_upsampler+0x388>
mov    %r14,-0x68(%rbp)
mov    %rsi,%r14
callq  3d7f0 <jsimd_can_h2v1_upsample>
test   %eax,%eax
jne    2c8fd <jinit_upsampler+0x3bd>
lea    0x45d(%rip),%rax        # 2cc50 <h2v1_upsample>
mov    %rax,0x68(%r12,%r15,8)
mov    %r14,%rsi
mov    -0x68(%rbp),%r14
mov    -0x70(%rbp),%rcx
pushq  -0x30(%rbp)
popq   -0x40(%rbp)
jmpq   2c6a1 <jinit_upsampler+0x161>
lea    (%rdi,%rdi,1),%r8d
cmp    %r8d,%r9d
jne    2c703 <jinit_upsampler+0x1c3>
test   %ecx,%ecx
jle    2c703 <jinit_upsampler+0x1c3>
lea    0x5e6(%rip),%rax        # 2ce10 <h1v2_fancy_upsample>
mov    %rax,0x68(%r12,%r15,8)
movl   $0x1,0x10(%r12)
pushq  -0x30(%rbp)
popq   -0x40(%rbp)
jmpq   2c6a1 <jinit_upsampler+0x161>
lea    (%rdi,%rdi,1),%edx
cmp    %edx,%r9d
jne    2c70c <jinit_upsampler+0x1cc>
test   %ecx,%ecx
jg     2c918 <jinit_upsampler+0x3d8>
callq  3d7c0 <jsimd_can_h2v2_upsample>
test   %eax,%eax
jne    2c93c <jinit_upsampler+0x3fc>
lea    0x435(%rip),%rax        # 2cca0 <h2v2_upsample>
mov    %rax,0x68(%r12,%r15,8)
mov    -0x50(%rbp),%rsi
mov    -0x70(%rbp),%rcx
pushq  -0x30(%rbp)
popq   -0x40(%rbp)
jmpq   2c6a1 <jinit_upsampler+0x161>
mov    %r9,%rax
cltd   
mov    %rax,%r9
idiv   %edi
test   %edx,%edx
jne    2c721 <jinit_upsampler+0x1e1>
lea    0x2c5(%rip),%rax        # 2cb60 <int_upsample>
mov    %rax,0x68(%r12,%r15,8)
mov    %r10,%rax
cltd   
idiv   %r8d
mov    %al,0xe8(%r12,%r15,1)
mov    %r9,%rax
cltd   
idiv   %edi
mov    %al,0xf2(%r12,%r15,1)
pushq  -0x30(%rbp)
popq   -0x40(%rbp)
jmpq   2c6a1 <jinit_upsampler+0x161>
mov    0x28(%r14),%eax
cmp    $0x2,%eax
jbe    2c7d8 <jinit_upsampler+0x298>
callq  3d8a0 <jsimd_can_h2v1_fancy_upsample>
test   %eax,%eax
jne    2c958 <jinit_upsampler+0x418>
lea    0x46b(%rip),%rax        # 2cd50 <h2v1_fancy_upsample>
mov    %rax,0x68(%r12,%r15,8)
mov    -0x50(%rbp),%rsi
mov    -0x70(%rbp),%rcx
pushq  -0x30(%rbp)
popq   -0x40(%rbp)
jmpq   2c6a1 <jinit_upsampler+0x161>
mov    %r14,0x68(%r12,%r15,8)
mov    %r14,%rsi
mov    -0x68(%rbp),%r14
mov    -0x70(%rbp),%rcx
pushq  -0x30(%rbp)
popq   -0x40(%rbp)
jmpq   2c6a1 <jinit_upsampler+0x161>
mov    0x28(%r14),%eax
cmp    $0x2,%eax
jbe    2c857 <jinit_upsampler+0x317>
callq  3d860 <jsimd_can_h2v2_fancy_upsample>
test   %eax,%eax
jne    2c974 <jinit_upsampler+0x434>
lea    0x5ab(%rip),%rax        # 2cee0 <h2v2_fancy_upsample>
mov    %rax,0x68(%r12,%r15,8)
jmp    2c97d <jinit_upsampler+0x43d>
mov    -0x60(%rbp),%rax
mov    %rax,0x68(%r12,%r15,8)
mov    -0x50(%rbp),%rsi
mov    -0x70(%rbp),%rcx
pushq  -0x30(%rbp)
popq   -0x40(%rbp)
jmpq   2c6a1 <jinit_upsampler+0x161>
mov    -0x48(%rbp),%rax
mov    %rax,0x68(%r12,%r15,8)
mov    -0x50(%rbp),%rsi
mov    -0x70(%rbp),%rcx
pushq  -0x30(%rbp)
popq   -0x40(%rbp)
jmpq   2c6a1 <jinit_upsampler+0x161>
mov    -0x58(%rbp),%rax
mov    %rax,0x68(%r12,%r15,8)
movl   $0x1,0x10(%r12)
mov    -0x50(%rbp),%rsi
mov    -0x70(%rbp),%rcx
pushq  -0x30(%rbp)
popq   -0x40(%rbp)
jmpq   2c6a1 <jinit_upsampler+0x161>
nopl   0x0(%rax)

000000000002c9a0 <start_pass_upsample>:
push   %rbp
mov    %rsp,%rbp
movslq 0x19c(%rdi),%rax
mov    0x260(%rdi),%rcx
mov    %eax,0xb8(%rcx)
mov    0x8c(%rdi),%eax
mov    %eax,0xbc(%rcx)
leaveq 
retq   
nopw   %cs:0x0(%rax,%rax,1)

000000000002c9d0 <sep_upsample>:
push   %rbp
mov    %rsp,%rbp
sub    $0x40,%rsp
mov    %rsi,-0x40(%rbp)
mov    %r15,-0x28(%rbp)
mov    %r14,-0x20(%rbp)
mov    %rbx,-0x8(%rbp)
mov    %r12,-0x10(%rbp)
mov    %r13,-0x18(%rbp)
mov    0x260(%rdi),%r13
movslq 0x19c(%rdi),%rax
cmp    0xb8(%r13),%eax
jle    2caac <sep_upsample+0xdc>
mov    %rdx,%rbx
mov    %rdi,%r12
mov    %r9,%r15
movslq 0xb8(%r13),%rdx
movslq 0x19c(%r12),%r14
sub    %edx,%r14d
mov    0xbc(%r13),%eax
cmp    %r14d,%eax
jae    2ca35 <sep_upsample+0x65>
mov    %rax,%r14
mov    (%r15),%ecx
mov    0x10(%rbp),%eax
sub    %ecx,%eax
cmp    %eax,%r14d
jbe    2ca45 <sep_upsample+0x75>
mov    %rax,%r14
lea    (%r8,%rcx,8),%rcx
mov    0x268(%r12),%rax
mov    0x8(%rax),%rax
lea    0x18(%r13),%rsi
mov    %r12,%rdi
mov    %r14,%r8
callq  *%rax
mov    %r14,%rax
add    (%r15),%eax
mov    %eax,(%r15)
mov    0xbc(%r13),%eax
sub    %r14d,%eax
mov    %eax,0xbc(%r13)
add    0xb8(%r13),%r14d
mov    %r14d,0xb8(%r13)
movslq 0x19c(%r12),%rax
cmp    %r14d,%eax
jle    2cac6 <sep_upsample+0xf6>
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
mov    -0x20(%rbp),%r14
mov    -0x28(%rbp),%r15
leaveq 
retq   
mov    0x130(%rdi),%r15
xor    %r14d,%r14d
mov    %r9,-0x38(%rbp)
mov    %r8,-0x30(%rbp)
mov    %rdx,%rbx
mov    %rdi,%r12
jmp    2cb19 <sep_upsample+0x149>
mov    (%rbx),%eax
add    $0x1,%eax
mov    %eax,(%rbx)
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
mov    -0x20(%rbp),%r14
mov    -0x28(%rbp),%r15
leaveq 
retq   
movslq %r14d,%rcx
mov    0xc0(%r13,%rcx,4),%eax
imul   (%rbx),%eax
mov    %eax,%edx
shl    $0x3,%rdx
add    (%rsi,%rcx,8),%rdx
mov    0x68(%r13,%rcx,8),%rax
lea    0x18(%r13,%rcx,8),%rcx
mov    %r12,%rdi
mov    %r15,%rsi
callq  *%rax
add    $0x1,%r14d
add    $0x60,%r15
mov    -0x40(%rbp),%rsi
movslq 0x38(%r12),%rax
cmp    %r14d,%eax
jg     2cae3 <sep_upsample+0x113>
movl   $0x0,0xb8(%r13)
mov    -0x30(%rbp),%r8
mov    -0x38(%rbp),%r15
jmpq   2ca14 <sep_upsample+0x44>
nopl   0x0(%rax,%rax,1)

000000000002cb40 <fullsize_upsample>:
push   %rbp
mov    %rsp,%rbp
mov    %rdx,(%rcx)
leaveq 
retq   
nopl   0x0(%rax)

000000000002cb50 <noop_upsample>:
push   %rbp
mov    %rsp,%rbp
movq   $0x0,(%rcx)
leaveq 
retq   
nopl   (%rax)

000000000002cb60 <int_upsample>:
push   %rbp
mov    %rsp,%rbp
sub    $0x40,%rsp
mov    %rbx,-0x8(%rbp)
mov    %r12,-0x10(%rbp)
mov    %r13,-0x18(%rbp)
mov    %r14,-0x20(%rbp)
mov    %r15,-0x28(%rbp)
mov    (%rcx),%rcx
mov    %rcx,-0x40(%rbp)
movslq 0x4(%rsi),%rax
add    0x260(%rdi),%rax
movzbl 0xe8(%rax),%r9d
mov    %r9,-0x30(%rbp)
movzbl 0xf2(%rax),%r12d
lea    -0x1(%r12),%r8d
mov    %r8,-0x38(%rbp)
mov    %rdx,%rbx
mov    %rdi,%r14
mov    %rcx,%rdi
xor    %r13d,%r13d
mov    %r13,%r15
jmp    2cc02 <int_upsample+0xa2>
mov    %r10b,(%rax)
add    $0x1,%rax
add    $0xffffffff,%ecx
test   %ecx,%ecx
jg     2cbbc <int_upsample+0x5c>
add    $0x1,%rsi
cmp    %rdx,%rax
jb     2cc24 <int_upsample+0xc4>
cmp    $0x1,%r12b
jbe    2cbfb <int_upsample+0x9b>
lea    0x1(%r15),%ecx
mov    0x88(%r14),%r9d
mov    %rdi,%rdx
mov    %r15,%rsi
callq  43f0 <jcopy_sample_rows@plt>
mov    -0x38(%rbp),%r8
mov    -0x30(%rbp),%r9
mov    -0x40(%rbp),%rdi
add    %r12d,%r15d
add    $0x1,%r13d
movslq 0x19c(%r14),%rax
cmp    %r15d,%eax
jg     2cc2d <int_upsample+0xcd>
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
leaveq 
retq   
movzbl (%rsi),%r10d
mov    %r9,%rcx
jmp    2cbc6 <int_upsample+0x66>
movslq %r13d,%rax
mov    (%rbx,%rax,8),%rsi
movslq %r15d,%rax
mov    (%rdi,%rax,8),%rax
mov    0x88(%r14),%ecx
lea    (%rax,%rcx,1),%rdx
jmp    2cbce <int_upsample+0x6e>
nopl   0x0(%rax,%rax,1)

000000000002cc50 <h2v1_upsample>:
push   %rbp
mov    %rsp,%rbp
mov    (%rcx),%r8
xor    %esi,%esi
jmp    2cc76 <h2v1_upsample+0x26>
movzbl (%rax),%r10d
mov    %r10b,(%rcx)
mov    %r10b,0x1(%rcx)
add    $0x1,%rax
add    $0x2,%rcx
cmp    %r9,%rcx
jb     2cc5b <h2v1_upsample+0xb>
add    $0x1,%esi
movslq 0x19c(%rdi),%rax
cmp    %esi,%eax
jg     2cc83 <h2v1_upsample+0x33>
leaveq 
retq   
movslq %esi,%rcx
mov    (%rdx,%rcx,8),%rax
mov    (%r8,%rcx,8),%rcx
mov    0x88(%rdi),%r9d
add    %rcx,%r9
jmp    2cc6e <h2v1_upsample+0x1e>
nopw   0x0(%rax,%rax,1)

000000000002cca0 <h2v2_upsample>:
push   %rbp
mov    %rsp,%rbp
sub    $0x30,%rsp
mov    %rbx,-0x8(%rbp)
mov    %r12,-0x10(%rbp)
mov    %r13,-0x18(%rbp)
mov    %r14,-0x20(%rbp)
mov    %r15,-0x28(%rbp)
mov    (%rcx),%r13
mov    %rdi,%r12
mov    %rdx,%r14
mov    $0x1,%r8d
xor    %ebx,%ebx
mov    %rbx,%r15
jmp    2cd0e <h2v2_upsample+0x6e>
movzbl (%rax),%edx
mov    %dl,(%rcx)
mov    %dl,0x1(%rcx)
add    $0x1,%rax
add    $0x2,%rcx
cmp    %rsi,%rcx
jb     2ccd2 <h2v2_upsample+0x32>
lea    0x1(%r15),%ecx
mov    0x88(%r12),%r9d
mov    %r13,%rdx
mov    %r13,%rdi
mov    %r15,%rsi
callq  43f0 <jcopy_sample_rows@plt>
add    $0x2,%r15d
add    $0x1,%ebx
mov    $0x1,%r8d
movslq 0x19c(%r12),%rax
cmp    %r15d,%eax
jg     2cd31 <h2v2_upsample+0x91>
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
leaveq 
retq   
movslq %ebx,%rax
mov    (%r14,%rax,8),%rax
movslq %r15d,%rcx
mov    0x0(%r13,%rcx,8),%rcx
mov    0x88(%r12),%edx
lea    (%rcx,%rdx,1),%rsi
jmp    2cce2 <h2v2_upsample+0x42>
xchg   %ax,%ax

000000000002cd50 <h2v1_fancy_upsample>:
push   %rbp
mov    %rsp,%rbp
sub    $0x10,%rsp
mov    %r15,-0x8(%rbp)
mov    (%rcx),%r15
xor    %r10d,%r10d
jmp    2cdbb <h2v1_fancy_upsample+0x6b>
movzbl -0x1(%rcx),%r9d
movzbl (%rcx),%r11d
lea    (%r11,%r11,2),%r11d
lea    0x1(%r9,%r11,1),%r9d
shr    $0x2,%r9d
mov    %r9b,(%r8)
add    $0x1,%rcx
movzbl (%rcx),%r9d
lea    0x2(%r9,%r11,1),%r9d
shr    $0x2,%r9d
mov    %r9b,0x1(%r8)
add    $0x2,%r8
add    $0xffffffff,%eax
test   %eax,%eax
jne    2cd64 <h2v1_fancy_upsample+0x14>
movzbl -0x1(%rcx),%r9d
movzbl (%rcx),%ecx
lea    (%rcx,%rcx,2),%eax
lea    0x1(%r9,%rax,1),%eax
shr    $0x2,%eax
mov    %al,(%r8)
mov    %cl,0x1(%r8)
add    $0x1,%r10d
movslq 0x19c(%rdi),%rax
cmp    %r10d,%eax
jg     2cdcd <h2v1_fancy_upsample+0x7d>
mov    -0x8(%rbp),%r15
leaveq 
retq   
movslq %r10d,%rcx
mov    (%rdx,%rcx,8),%rax
movzbl (%rax),%r11d
mov    (%r15,%rcx,8),%r9
mov    %r11b,(%r9)
lea    0x1(%rax),%rcx
movzbl (%rcx),%r8d
lea    (%r11,%r11,2),%eax
lea    0x2(%r8,%rax,1),%eax
shr    $0x2,%eax
mov    %al,0x1(%r9)
mov    0x28(%rsi),%eax
add    $0xfffffffe,%eax
lea    0x2(%r9),%r8
jmp    2cd99 <h2v1_fancy_upsample+0x49>
data16 nopw %cs:0x0(%rax,%rax,1)
xchg   %ax,%ax

000000000002ce10 <h1v2_fancy_upsample>:
push   %rbp
mov    %rsp,%rbp
sub    $0x40,%rsp
mov    %rbx,-0x8(%rbp)
mov    %r12,-0x10(%rbp)
mov    %r13,-0x18(%rbp)
mov    %r14,-0x20(%rbp)
mov    %r15,-0x28(%rbp)
mov    %rdi,-0x30(%rbp)
mov    (%rcx),%r12
xor    %r10d,%r10d
mov    %r10,%rax
mov    %rax,%r9
jmp    2ce82 <h1v2_fancy_upsample+0x72>
movzbl (%rax),%r11d
movzbl (%rcx),%ebx
lea    (%rbx,%rbx,2),%ebx
lea    0x1(%r11,%rbx,1),%ebx
shr    $0x2,%ebx
mov    %bl,(%rdi)
add    $0x1,%rax
add    $0x1,%rcx
add    $0x1,%rdi
add    $0x1,%r8d
mov    0x28(%rsi),%ebx
cmp    %r8d,%ebx
ja     2ce3e <h1v2_fancy_upsample+0x2e>
add    $0x1,%r9d
mov    -0x40(%rbp),%rax
lea    0x1(%rax),%ebx
cmp    $0x1,%ebx
jle    2cea4 <h1v2_fancy_upsample+0x94>
mov    -0x38(%rbp),%rax
mov    -0x30(%rbp),%rdi
movslq 0x19c(%rdi),%rcx
cmp    %r9d,%ecx
jg     2ceb2 <h1v2_fancy_upsample+0xa2>
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
leaveq 
retq   
mov    (%rdx,%r13,8),%rcx
test   %ebx,%ebx
je     2ceca <h1v2_fancy_upsample+0xba>
mov    (%rdx,%r14,8),%rax
jmp    2cece <h1v2_fancy_upsample+0xbe>
lea    -0x1(%rax),%ecx
movslq %ecx,%r15
movslq %eax,%r13
add    $0x1,%eax
mov    %rax,-0x38(%rbp)
movslq %eax,%r14
mov    %r10,%rbx
jmp    2ce75 <h1v2_fancy_upsample+0x65>
mov    (%rdx,%r15,8),%rax
movslq %r9d,%rdi
mov    (%r12,%rdi,8),%rdi
mov    %rbx,-0x40(%rbp)
mov    %r10,%r8
jmp    2ce62 <h1v2_fancy_upsample+0x52>
xchg   %ax,%ax

000000000002cee0 <h2v2_fancy_upsample>:
push   %rbp
mov    %rsp,%rbp
sub    $0x50,%rsp
mov    %rbx,-0x8(%rbp)
mov    %r12,-0x10(%rbp)
mov    %r13,-0x18(%rbp)
mov    %r14,-0x20(%rbp)
mov    %r15,-0x28(%rbp)
mov    %rdi,-0x40(%rbp)
mov    (%rcx),%rax
mov    %rax,-0x30(%rbp)
xor    %r8d,%r8d
mov    %r8,%rcx
mov    %rcx,%r9
jmp    2cf8e <h2v2_fancy_upsample+0xae>
movzbl (%rbx),%r10d
movzbl (%rdi),%r9d
mov    %r8b,(%rcx)
lea    (%r9,%r9,2),%r8d
lea    (%r10,%r8,1),%r9d
lea    0x7(%r9,%r13,1),%r8d
shr    $0x4,%r8d
mov    %r8b,0x1(%rcx)
add    $0x2,%rcx
add    $0x1,%rdi
add    $0x1,%rbx
add    $0xffffffff,%eax
mov    %r11,%r10
mov    %r9,%r11
lea    (%r11,%r11,2),%r13d
lea    0x8(%r10,%r13,1),%r8d
shr    $0x4,%r8d
test   %eax,%eax
jne    2cf12 <h2v2_fancy_upsample+0x32>
mov    %r8b,(%rcx)
lea    0x7(,%r11,4),%eax
shr    $0x4,%eax
mov    %al,0x1(%rcx)
mov    -0x48(%rbp),%rax
lea    0x1(%rax),%r9d
mov    -0x50(%rbp),%rax
lea    0x1(%rax),%r8d
mov    -0x30(%rbp),%rax
cmp    $0x1,%r8d
jle    2cfb0 <h2v2_fancy_upsample+0xd0>
xor    %r8d,%r8d
mov    -0x38(%rbp),%rcx
mov    -0x40(%rbp),%rdi
movslq 0x19c(%rdi),%rdi
cmp    %r9d,%edi
jg     2cfbf <h2v2_fancy_upsample+0xdf>
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
leaveq 
retq   
mov    (%rdx,%r15,8),%r13
test   %r8d,%r8d
je     2cfd4 <h2v2_fancy_upsample+0xf4>
mov    (%rdx,%r14,8),%rbx
jmp    2cfd8 <h2v2_fancy_upsample+0xf8>
lea    -0x1(%rcx),%edi
movslq %edi,%r12
movslq %ecx,%r15
add    $0x1,%ecx
mov    %rcx,-0x38(%rbp)
movslq %ecx,%r14
jmp    2cf7d <h2v2_fancy_upsample+0x9d>
mov    (%rdx,%r12,8),%rbx
movzbl (%rbx),%edi
movzbl 0x0(%r13),%ecx
lea    (%rcx,%rcx,2),%ecx
lea    (%rdi,%rcx,1),%r10d
lea    0x8(,%r10,4),%ecx
shr    $0x4,%ecx
movslq %r9d,%rdi
mov    (%rax,%rdi,8),%rdi
movzbl 0x1(%rbx),%eax
movzbl 0x1(%r13),%r11d
mov    %cl,(%rdi)
lea    (%r11,%r11,2),%ecx
lea    (%rax,%rcx,1),%r11d
lea    (%r10,%r10,2),%eax
lea    0x7(%r11,%rax,1),%eax
shr    $0x4,%eax
mov    %al,0x1(%rdi)
mov    0x28(%rsi),%eax
add    $0xfffffffe,%eax
lea    0x2(%rdi),%rcx
lea    0x2(%r13),%rdi
add    $0x2,%rbx
mov    %r9,-0x48(%rbp)
mov    %r8,-0x50(%rbp)
jmpq   2cf47 <h2v2_fancy_upsample+0x67>
nopw   0x0(%rax,%rax,1)

000000000002d040 <jpeg_read_coefficients>:
push   %rbp
mov    %rsp,%rbp
sub    $0x10,%rsp
mov    %r15,-0x10(%rbp)
movslq 0x24(%rdi),%rax
cmp    $0xca,%eax
je     2d062 <jpeg_read_coefficients+0x22>
mov    %r15,%rax
mov    %r14,%rcx
mov    %rdi,%r14
jmp    2d07c <jpeg_read_coefficients+0x3c>
mov    %r14,%r15
mov    %rdi,%r14
callq  2d170 <transdecode_master_selection>
movl   $0xd1,0x24(%r14)
mov    %r15,%rcx
mov    -0x10(%rbp),%rax
xor    %r15d,%r15d
movslq 0x24(%r14),%rdx
cmp    $0xd1,%edx
je     2d0c7 <jpeg_read_coefficients+0x87>
mov    %rax,%r15
movslq 0x24(%r14),%rax
cmp    $0xd2,%eax
jne    2d0cd <jpeg_read_coefficients+0x8d>
movslq 0x58(%r14),%rax
test   %eax,%eax
jne    2d0d6 <jpeg_read_coefficients+0x96>
mov    (%r14),%rax
movl   $0x14,0x28(%rax)
movslq 0x24(%r14),%rdx
mov    (%r14),%rax
mov    %edx,0x2c(%rax)
mov    (%r14),%rax
mov    (%rax),%rax
mov    %r14,%rdi
mov    %rcx,%r14
callq  *%rax
xor    %eax,%eax
leaveq 
retq   
mov    %rcx,-0x8(%rbp)
jmp    2d0f4 <jpeg_read_coefficients+0xb4>
cmp    $0xcf,%eax
je     2d099 <jpeg_read_coefficients+0x59>
jmp    2d0a1 <jpeg_read_coefficients+0x61>
mov    0x230(%r14),%rax
mov    0x20(%rax),%rax
mov    %rcx,%r14
leaveq 
retq   
cmp    $0x2,%eax
je     2d122 <jpeg_read_coefficients+0xe2>
mov    0x10(%r14),%rcx
test   %rcx,%rcx
jne    2d137 <jpeg_read_coefficients+0xf7>
mov    0x10(%r14),%rax
test   %rax,%rax
je     2d102 <jpeg_read_coefficients+0xc2>
mov    %r14,%rdi
callq  *(%rax)
mov    0x240(%r14),%rax
mov    (%rax),%rax
mov    %r14,%rdi
callq  *%rax
test   %eax,%eax
jne    2d0e6 <jpeg_read_coefficients+0xa6>
mov    %r15,%rax
mov    -0x8(%rbp),%r14
mov    -0x10(%rbp),%r15
leaveq 
retq   
movl   $0xd2,0x24(%r14)
mov    -0x8(%rbp),%rcx
mov    -0x10(%rbp),%r15
jmpq   2d08e <jpeg_read_coefficients+0x4e>
cmp    $0x3,%eax
jne    2d165 <jpeg_read_coefficients+0x125>
mov    0x8(%rcx),%rax
add    $0x1,%rax
mov    %rax,0x8(%rcx)
mov    0x10(%r14),%rdx
mov    0x10(%rdx),%rcx
cmp    %rcx,%rax
jl     2d0f4 <jpeg_read_coefficients+0xb4>
mov    0x1a4(%r14),%eax
add    %rcx,%rax
mov    %rax,0x10(%rdx)
jmp    2d0f4 <jpeg_read_coefficients+0xb4>
cmp    $0x1,%eax
je     2d13c <jpeg_read_coefficients+0xfc>
jmp    2d0f4 <jpeg_read_coefficients+0xb4>
nopl   0x0(%rax)

000000000002d170 <transdecode_master_selection>:
push   %rbp
mov    %rsp,%rbp
sub    $0x10,%rsp
mov    %r15,-0x8(%rbp)
movl   $0x1,0x58(%rdi)
movslq 0x13c(%rdi),%rax
test   %eax,%eax
jne    2d1a3 <transdecode_master_selection+0x33>
movslq 0x138(%rdi),%rax
test   %eax,%eax
jne    2d1e4 <transdecode_master_selection+0x74>
mov    %rdi,%r15
callq  40b0 <jinit_huff_decoder@plt>
jmp    2d1ab <transdecode_master_selection+0x3b>
mov    %rdi,%r15
callq  4090 <jinit_arith_decoder@plt>
mov    $0x1,%esi
mov    %r15,%rdi
callq  4050 <jinit_d_coef_controller@plt>
mov    0x8(%r15),%rax
mov    0x30(%rax),%rax
mov    %r15,%rdi
callq  *%rax
mov    0x240(%r15),%rax
mov    0x10(%rax),%rax
mov    %r15,%rdi
callq  *%rax
mov    0x10(%r15),%rax
test   %rax,%rax
jne    2d1ee <transdecode_master_selection+0x7e>
mov    -0x8(%rbp),%r15
leaveq 
retq   
mov    %rdi,%r15
callq  41d0 <jinit_phuff_decoder@plt>
jmp    2d1ab <transdecode_master_selection+0x3b>
movslq 0x138(%r15),%rax
test   %eax,%eax
jne    2d20f <transdecode_master_selection+0x9f>
mov    0x240(%r15),%rax
movslq 0x20(%rax),%rax
test   %eax,%eax
jne    2d255 <transdecode_master_selection+0xe5>
mov    $0x1,%eax
jmp    2d217 <transdecode_master_selection+0xa7>
movslq 0x38(%r15),%rax
lea    0x2(%rax,%rax,2),%eax
mov    0x10(%r15),%rcx
movq   $0x0,0x8(%rcx)
movslq %eax,%rax
mov    0x1a4(%r15),%ecx
imul   %rcx,%rax
mov    0x10(%r15),%rcx
mov    %rax,0x10(%rcx)
mov    0x10(%r15),%rax
movl   $0x0,0x18(%rax)
mov    0x10(%r15),%rax
movl   $0x1,0x1c(%rax)
mov    -0x8(%rbp),%r15
leaveq 
retq   
movslq 0x38(%r15),%rax
jmp    2d217 <transdecode_master_selection+0xa7>
nopl   0x0(%rax,%rax,1)

000000000002d260 <jpeg_std_error>:
push   %rbp
mov    %rsp,%rbp
lea    0x85(%rip),%rax        # 2d2f0 <error_exit>
mov    %rax,(%rdi)
lea    0xeb(%rip),%rax        # 2d360 <emit_message>
mov    %rax,0x8(%rdi)
lea    0xa0(%rip),%rax        # 2d320 <output_message>
mov    %rax,0x10(%rdi)
lea    0x135(%rip),%rax        # 2d3c0 <format_message>
mov    %rax,0x18(%rdi)
lea    0x24a(%rip),%rax        # 2d4e0 <reset_error_mgr>
mov    %rax,0x20(%rdi)
movl   $0x0,0x7c(%rdi)
movq   $0x0,0x80(%rdi)
movl   $0x0,0x28(%rdi)
mov    0x40c8e(%rip),%rax        # 6df48 <jpeg_std_message_table@@LIBJPEG_6.2+0x628>
mov    %rax,0x88(%rdi)
mov    %rdi,%rax
movl   $0x7e,0x90(%rax)
movq   $0x0,0x98(%rax)
movl   $0x0,0xa0(%rax)
movl   $0x0,0xa4(%rax)
leaveq 
retq   
nop

000000000002d2f0 <error_exit>:
push   %rbp
mov    %rsp,%rbp
mov    (%rdi),%rax
mov    0x10(%rax),%rax
mov    %rdi,%rbx
callq  *%rax
mov    %rbx,%rdi
callq  4030 <jpeg_destroy@plt>
mov    $0x1,%edi
callq  4440 <exit@plt>
data16 nopw %cs:0x0(%rax,%rax,1)
nopl   (%rax)

000000000002d320 <output_message>:
push   %rbp
mov    %rsp,%rbp
sub    $0xd0,%rsp
mov    (%rdi),%rax
mov    0x18(%rax),%rax
lea    -0xc8(%rbp),%rsi
callq  *%rax
xor    %eax,%eax
mov    0x40cb4(%rip),%rcx        # 6dff8 <stderr@GLIBC_2.2.5>
mov    (%rcx),%rdi
lea    0x2dfae(%rip),%rsi        # 5b2fc <dither_matrix+0x126c>
lea    -0xc8(%rbp),%rdx
callq  42a0 <fprintf@plt>
leaveq 
retq   
nopl   0x0(%rax)

000000000002d360 <emit_message>:
push   %rbp
mov    %rsp,%rbp
sub    $0x10,%rsp
mov    (%rdi),%rax
test   %esi,%esi
js     2d376 <emit_message+0x16>
cmp    0x7c(%rax),%esi
jle    2d3b1 <emit_message+0x51>
leaveq 
retq   
mov    0x80(%rax),%rcx
test   %rcx,%rcx
je     2d38b <emit_message+0x2b>
movslq 0x7c(%rax),%rcx
cmp    $0x2,%ecx
jle    2d39d <emit_message+0x3d>
mov    %r15,-0x8(%rbp)
mov    %rax,%r15
callq  *0x10(%r15)
mov    %r15,%rax
mov    -0x8(%rbp),%r15
mov    0x80(%rax),%rcx
add    $0x1,%rcx
mov    %rcx,0x80(%rax)
leaveq 
retq   
callq  *0x10(%rax)
leaveq 
retq   
nopw   %cs:0x0(%rax,%rax,1)

000000000002d3c0 <format_message>:
push   %rbp
mov    %rsp,%rbp
sub    $0x10,%rsp
xor    %ecx,%ecx
mov    (%rdi),%r9
movslq 0x28(%r9),%rdi
test   %edi,%edi
jle    2d3eb <format_message+0x2b>
cmp    0x90(%r9),%edi
jg     2d3eb <format_message+0x2b>
mov    0x88(%r9),%rax
mov    (%rax,%rdi,8),%rax
jmp    2d3fe <format_message+0x3e>
mov    0x98(%r9),%rdx
test   %rdx,%rdx
jne    2d47b <format_message+0xbb>
mov    %rcx,%rax
test   %rax,%rax
je     2d48e <format_message+0xce>
mov    %rax,%r11
movsbq (%rax),%rdx
test   %dl,%dl
je     2d428 <format_message+0x68>
add    $0x1,%rax
cmp    $0x25,%dl
jne    2d40a <format_message+0x4a>
movsbq (%rax),%rax
cmp    $0x73,%al
jne    2d428 <format_message+0x68>
mov    $0x1,%ecx
test   %ecx,%ecx
jg     2d4a4 <format_message+0xe4>
sub    $0x20,%rsp
movslq 0x3c(%r9),%rdi
movslq 0x40(%r9),%rax
movslq 0x44(%r9),%r10
movslq 0x48(%r9),%r8
movslq 0x2c(%r9),%rdx
movslq 0x30(%r9),%rcx
mov    %r15,-0x8(%rbp)
movslq 0x34(%r9),%r15
movslq 0x38(%r9),%r9
mov    %edi,(%rsp)
mov    %eax,0x8(%rsp)
mov    %r10d,0x10(%rsp)
mov    %r8d,0x18(%rsp)
mov    %rsi,%rdi
mov    %r11,%rsi
mov    %r15,%r8
xor    %eax,%eax
callq  4430 <sprintf@plt>
mov    -0x8(%rbp),%r15
leaveq 
retq   
movslq 0xa0(%r9),%rax
cmp    %eax,%edi
jge    2d4b7 <format_message+0xf7>
mov    %rcx,%rax
jmpq   2d3fe <format_message+0x3e>
mov    %edi,0x2c(%r9)
mov    0x88(%r9),%rax
mov    (%rax),%rax
mov    %rax,%r11
jmpq   2d40a <format_message+0x4a>
xor    %eax,%eax
lea    0x2c(%r9),%rdx
mov    %rsi,%rdi
mov    %r11,%rsi
callq  4430 <sprintf@plt>
leaveq 
retq   
cmp    0xa4(%r9),%edi
jle    2d4c8 <format_message+0x108>
mov    %rcx,%rax
jmpq   2d3fe <format_message+0x3e>
neg    %eax
add    %edi,%eax
movslq %eax,%rax
mov    (%rdx,%rax,8),%rax
jmpq   2d3fe <format_message+0x3e>
nopl   0x0(%rax,%rax,1)

000000000002d4e0 <reset_error_mgr>:
push   %rbp
mov    %rsp,%rbp
mov    (%rdi),%rax
movq   $0x0,0x80(%rax)
mov    (%rdi),%rax
movl   $0x0,0x28(%rax)
leaveq 
retq   
xchg   %ax,%ax

000000000002d500 <jpeg_fdct_float>:
push   %rbp
mov    %rsp,%rbp
movss  0x2ddf3(%rip),%xmm8        # 5b300 <dither_matrix+0x1270>
mov    $0x7,%eax
mov    %rax,%rcx
mov    %rdi,%rdx
jmpq   2d660 <jpeg_fdct_float+0x160>
movss  0x14(%rdx),%xmm14
movss  0x8(%rdx),%xmm5
movapd %xmm14,%xmm11
addss  %xmm5,%xmm11
movss  0x18(%rdx),%xmm7
movss  0x4(%rdx),%xmm0
movapd %xmm7,%xmm2
addss  %xmm0,%xmm2
movapd %xmm11,%xmm15
addss  %xmm2,%xmm15
movss  0x10(%rdx),%xmm12
movss  0xc(%rdx),%xmm3
movapd %xmm12,%xmm9
addss  %xmm3,%xmm9
movss  0x1c(%rdx),%xmm10
movss  (%rdx),%xmm1
movapd %xmm10,%xmm4
addss  %xmm1,%xmm4
movapd %xmm9,%xmm6
addss  %xmm4,%xmm6
movapd %xmm15,%xmm13
addss  %xmm6,%xmm13
movss  %xmm13,(%rdx)
subss  %xmm15,%xmm6
movss  %xmm6,0x10(%rdx)
subss  %xmm11,%xmm2
subss  %xmm9,%xmm4
addss  %xmm4,%xmm2
mulss  %xmm8,%xmm2
movapd %xmm2,%xmm6
addss  %xmm4,%xmm6
movss  %xmm6,0x8(%rdx)
subss  %xmm2,%xmm4
movss  %xmm4,0x18(%rdx)
subss  %xmm12,%xmm3
subss  %xmm14,%xmm5
addss  %xmm5,%xmm3
subss  %xmm7,%xmm0
subss  %xmm10,%xmm1
movapd %xmm0,%xmm2
addss  %xmm1,%xmm2
movapd %xmm3,%xmm4
subss  %xmm2,%xmm4
movss  0x2dd14(%rip),%xmm6        # 5b304 <dither_matrix+0x1274>
mulss  %xmm6,%xmm4
movss  0x2dd0c(%rip),%xmm6        # 5b308 <dither_matrix+0x1278>
mulss  %xmm6,%xmm3
movapd %xmm4,%xmm6
addss  %xmm3,%xmm6
addss  %xmm5,%xmm0
mulss  %xmm8,%xmm0
movapd %xmm1,%xmm3
subss  %xmm0,%xmm3
movapd %xmm6,%xmm5
addss  %xmm3,%xmm5
movss  %xmm5,0x14(%rdx)
subss  %xmm6,%xmm3
movss  %xmm3,0xc(%rdx)
movss  0x2dcd5(%rip),%xmm3        # 5b30c <dither_matrix+0x127c>
mulss  %xmm3,%xmm2
addss  %xmm4,%xmm2
addss  %xmm0,%xmm1
movapd %xmm2,%xmm0
addss  %xmm1,%xmm0
movss  %xmm0,0x4(%rdx)
subss  %xmm2,%xmm1
movss  %xmm1,0x1c(%rdx)
add    $0x20,%rdx
add    $0xffffffff,%ecx
test   %ecx,%ecx
jns    2d51d <jpeg_fdct_float+0x1d>
jmpq   2d7c9 <jpeg_fdct_float+0x2c9>
movss  0xa0(%rdi),%xmm15
movss  0x40(%rdi),%xmm6
movapd %xmm15,%xmm14
addss  %xmm6,%xmm14
movss  0xc0(%rdi),%xmm13
movss  0x20(%rdi),%xmm3
movapd %xmm13,%xmm0
addss  %xmm3,%xmm0
movapd %xmm14,%xmm12
addss  %xmm0,%xmm12
movss  0x80(%rdi),%xmm11
movss  0x60(%rdi),%xmm1
movapd %xmm11,%xmm10
addss  %xmm1,%xmm10
movss  0xe0(%rdi),%xmm9
movss  (%rdi),%xmm2
movapd %xmm9,%xmm4
addss  %xmm2,%xmm4
movapd %xmm10,%xmm5
addss  %xmm4,%xmm5
movapd %xmm12,%xmm7
addss  %xmm5,%xmm7
movss  %xmm7,(%rdi)
subss  %xmm12,%xmm5
movss  %xmm5,0x80(%rdi)
subss  %xmm14,%xmm0
subss  %xmm10,%xmm4
addss  %xmm4,%xmm0
mulss  %xmm8,%xmm0
movapd %xmm0,%xmm5
addss  %xmm4,%xmm5
movss  %xmm5,0x40(%rdi)
subss  %xmm0,%xmm4
movss  %xmm4,0xc0(%rdi)
subss  %xmm11,%xmm1
subss  %xmm15,%xmm6
addss  %xmm6,%xmm1
subss  %xmm13,%xmm3
subss  %xmm9,%xmm2
movapd %xmm3,%xmm0
addss  %xmm2,%xmm0
movapd %xmm1,%xmm4
subss  %xmm0,%xmm4
movss  0x2dbb1(%rip),%xmm5        # 5b304 <dither_matrix+0x1274>
mulss  %xmm5,%xmm4
movss  0x2dba9(%rip),%xmm5        # 5b308 <dither_matrix+0x1278>
mulss  %xmm5,%xmm1
movapd %xmm4,%xmm7
addss  %xmm1,%xmm7
addss  %xmm6,%xmm3
mulss  %xmm8,%xmm3
movapd %xmm2,%xmm1
subss  %xmm3,%xmm1
movapd %xmm7,%xmm5
addss  %xmm1,%xmm5
movss  %xmm5,0xa0(%rdi)
subss  %xmm7,%xmm1
movss  %xmm1,0x60(%rdi)
movss  0x2db6f(%rip),%xmm1        # 5b30c <dither_matrix+0x127c>
mulss  %xmm1,%xmm0
addss  %xmm4,%xmm0
addss  %xmm3,%xmm2
movapd %xmm0,%xmm1
addss  %xmm2,%xmm1
movss  %xmm1,0x20(%rdi)
subss  %xmm0,%xmm2
movss  %xmm2,0xe0(%rdi)
add    $0xffffffff,%eax
add    $0x4,%rdi
test   %eax,%eax
jns    2d66d <jpeg_fdct_float+0x16d>
leaveq 
retq   
nopw   %cs:0x0(%rax,%rax,1)
nopl   (%rax)

000000000002d7e0 <jpeg_fdct_ifast>:
push   %rbp
mov    %rsp,%rbp
sub    $0x50,%rsp
mov    %rbx,-0x20(%rbp)
mov    %r12,-0x28(%rbp)
mov    %r13,-0x30(%rbp)
mov    %r14,-0x38(%rbp)
mov    %r15,-0x40(%rbp)
mov    %rdi,-0x18(%rbp)
mov    $0x7,%eax
jmpq   2d977 <jpeg_fdct_ifast+0x197>
movswq 0xa(%rdi),%r11
movswq 0x4(%rdi),%rsi
lea    (%r11,%rsi,1),%r10d
movswq 0xc(%rdi),%r9
movswq 0x2(%rdi),%rbx
lea    (%r9,%rbx,1),%ecx
lea    (%r10,%rcx,1),%r14d
movswq 0x8(%rdi),%r15
movswq 0x6(%rdi),%rdx
lea    (%r15,%rdx,1),%r13d
movswq 0xe(%rdi),%r12
mov    %r12,-0x10(%rbp)
movswq (%rdi),%r8
mov    %rax,-0x48(%rbp)
mov    %r8,-0x8(%rbp)
add    %r12d,%r8d
lea    0x0(%r13,%r8,1),%eax
lea    (%r14,%rax,1),%r12d
mov    %r12w,(%rdi)
sub    %r14w,%ax
mov    %ax,0x8(%rdi)
mov    %r8,%r14
sub    %r13w,%r14w
movswq %r14w,%r12
sub    %r10w,%cx
movswq %cx,%rax
add    %r12d,%eax
movslq %eax,%rcx
lea    (%rcx,%rcx,4),%rax
lea    (%rcx,%rax,2),%rax
shl    $0x4,%rax
lea    (%rax,%rcx,4),%rax
add    %rcx,%rax
sar    $0x8,%rax
lea    (%rax,%r14,1),%ecx
mov    %cx,0x4(%rdi)
add    %r13d,%eax
sub    %ax,%r8w
mov    %r8w,0xc(%rdi)
sub    %r15w,%dx
sub    %r11w,%si
lea    (%rdx,%rsi,1),%eax
movswq %ax,%rcx
sub    %r9w,%bx
mov    -0x10(%rbp),%r9
mov    -0x8(%rbp),%rdx
mov    %rdx,%r10
sub    %r9w,%r10w
lea    (%rbx,%r10,1),%eax
movswq %ax,%r11
mov    %rcx,%rax
sub    %r11d,%eax
movslq %eax,%r8
lea    (%r8,%r8,2),%rax
shl    $0x5,%rax
lea    (%rax,%r8,2),%rax
sar    $0x8,%rax
mov    %rcx,%r8
shl    $0x7,%r8
lea    (%r8,%rcx,8),%r8
lea    (%r8,%rcx,2),%r8
add    %r8,%rcx
sar    $0x8,%rcx
lea    (%rax,%rcx,1),%r8d
lea    (%rbx,%rsi,1),%ecx
movswq %cx,%rsi
lea    (%rsi,%rsi,4),%rcx
lea    (%rsi,%rcx,2),%rcx
shl    $0x4,%rcx
lea    (%rcx,%rsi,4),%rcx
add    %rsi,%rcx
sar    $0x8,%rcx
lea    (%r9,%rcx,1),%ebx
mov    %rdx,%rsi
sub    %bx,%si
add    %r8d,%esi
mov    %si,0xa(%rdi)
lea    (%rbx,%r8,1),%esi
sub    %si,%dx
mov    %dx,0x6(%rdi)
lea    (%r11,%r11,4),%rdx
shl    $0x6,%rdx
lea    (%rdx,%r11,8),%rdx
lea    (%rdx,%r11,4),%rdx
lea    (%rdx,%r11,2),%rdx
sar    $0x8,%rdx
add    %eax,%edx
lea    (%r10,%rcx,1),%eax
lea    (%rdx,%rax,1),%ecx
mov    %cx,0x2(%rdi)
sub    %dx,%ax
mov    %ax,0xe(%rdi)
add    $0x10,%rdi
mov    -0x48(%rbp),%rax
add    $0xffffffff,%eax
test   %eax,%eax
jns    2d80a <jpeg_fdct_ifast+0x2a>
mov    -0x18(%rbp),%rcx
mov    $0x7,%eax
jmpq   2dafb <jpeg_fdct_ifast+0x31b>
movswq 0x50(%rcx),%r15
movswq 0x20(%rcx),%rbx
lea    (%r15,%rbx,1),%r14d
movswq 0x60(%rcx),%r13
movswq 0x10(%rcx),%rsi
lea    0x0(%r13,%rsi,1),%edx
lea    (%r14,%rdx,1),%r12d
movswq 0x40(%rcx),%r11
movswq 0x30(%rcx),%rdi
lea    (%r11,%rdi,1),%r10d
movswq 0x70(%rcx),%r9
mov    %r9,-0x18(%rbp)
movswq (%rcx),%r8
mov    %rax,-0x48(%rbp)
mov    %r8,-0x10(%rbp)
lea    (%r9,%r8,1),%eax
lea    (%r10,%rax,1),%r8d
lea    (%r12,%r8,1),%r9d
mov    %r9w,(%rcx)
sub    %r12w,%r8w
mov    %r8w,0x40(%rcx)
mov    %rax,%r9
sub    %r10w,%r9w
movswq %r9w,%r8
sub    %r14w,%dx
movswq %dx,%rdx
add    %r8d,%edx
movslq %edx,%r8
lea    (%r8,%r8,4),%rdx
lea    (%r8,%rdx,2),%rdx
shl    $0x4,%rdx
lea    (%rdx,%r8,4),%rdx
add    %r8,%rdx
sar    $0x8,%rdx
lea    (%rdx,%r9,1),%r8d
mov    %r8w,0x20(%rcx)
add    %r10d,%edx
sub    %dx,%ax
mov    %ax,0x60(%rcx)
sub    %r11w,%di
sub    %r15w,%bx
lea    (%rdi,%rbx,1),%eax
movswq %ax,%r8
sub    %r13w,%si
mov    -0x18(%rbp),%r11
mov    -0x10(%rbp),%rdi
mov    %rdi,%r10
sub    %r11w,%r10w
lea    (%rsi,%r10,1),%eax
movswq %ax,%r9
mov    %r8,%rax
sub    %r9d,%eax
movslq %eax,%rdx
lea    (%rdx,%rdx,2),%rax
shl    $0x5,%rax
lea    (%rax,%rdx,2),%rax
sar    $0x8,%rax
mov    %r8,%rdx
shl    $0x7,%rdx
lea    (%rdx,%r8,8),%rdx
lea    (%rdx,%r8,2),%rdx
add    %r8,%rdx
sar    $0x8,%rdx
lea    (%rax,%rdx,1),%r8d
lea    (%rsi,%rbx,1),%edx
movswq %dx,%rsi
lea    (%rsi,%rsi,4),%rdx
lea    (%rsi,%rdx,2),%rdx
shl    $0x4,%rdx
lea    (%rdx,%rsi,4),%rdx
add    %rsi,%rdx
sar    $0x8,%rdx
lea    (%r11,%rdx,1),%ebx
mov    %rdi,%rsi
sub    %bx,%si
add    %r8d,%esi
mov    %si,0x50(%rcx)
lea    (%rbx,%r8,1),%esi
sub    %si,%di
mov    %di,0x30(%rcx)
lea    (%r9,%r9,4),%rsi
shl    $0x6,%rsi
lea    (%rsi,%r9,8),%rsi
lea    (%rsi,%r9,4),%rsi
lea    (%rsi,%r9,2),%rsi
sar    $0x8,%rsi
add    %eax,%esi
lea    (%r10,%rdx,1),%eax
lea    (%rsi,%rax,1),%edx
mov    %dx,0x10(%rcx)
sub    %si,%ax
mov    %ax,0x70(%rcx)
mov    -0x48(%rbp),%rax
add    $0xffffffff,%eax
add    $0x2,%rcx
test   %eax,%eax
jns    2d98d <jpeg_fdct_ifast+0x1ad>
mov    -0x40(%rbp),%r15
mov    -0x38(%rbp),%r14
mov    -0x30(%rbp),%r13
mov    -0x28(%rbp),%r12
mov    -0x20(%rbp),%rbx
leaveq 
retq   
nopl   0x0(%rax)

000000000002db20 <jpeg_fdct_islow>:
push   %rbp
mov    %rsp,%rbp
sub    $0x50,%rsp
mov    %rbx,-0x20(%rbp)
mov    %r12,-0x28(%rbp)
mov    %r13,-0x30(%rbp)
mov    %r14,-0x38(%rbp)
mov    %r15,-0x40(%rbp)
mov    %rdi,-0x18(%rbp)
mov    $0x7,%eax
jmpq   2dd81 <jpeg_fdct_islow+0x261>
movswq 0xa(%rdi),%r10
movswq 0x4(%rdi),%rdx
lea    (%r10,%rdx,1),%ecx
movslq %ecx,%r11
movswq 0xc(%rdi),%rsi
mov    %rsi,-0x10(%rbp)
movswq 0x2(%rdi),%rcx
mov    %rcx,-0x8(%rbp)
add    %esi,%ecx
movslq %ecx,%rcx
lea    (%r11,%rcx,1),%r12
movswq 0x8(%rdi),%r13
movswq 0x6(%rdi),%rsi
lea    0x0(%r13,%rsi,1),%ebx
movslq %ebx,%r14
movswq 0xe(%rdi),%r15
movswq (%rdi),%rbx
mov    %rax,-0x48(%rbp)
lea    (%r15,%rbx,1),%eax
movslq %eax,%r8
lea    (%r14,%r8,1),%rax
lea    (%r12,%rax,1),%r9
shl    $0x2,%r9d
mov    %r9w,(%rdi)
sub    %r12,%rax
shl    $0x2,%eax
mov    %ax,0x8(%rdi)
sub    %r11,%rcx
sub    %r14,%r8
lea    (%rcx,%r8,1),%r9
mov    %r9,%rax
shl    $0x4,%rax
mov    %r9,%r11
shl    $0x8,%r11
add    %r11,%rax
lea    (%rax,%r9,4),%rax
add    %r9,%rax
shl    $0x4,%rax
add    %rax,%r9
lea    (%r8,%r8,2),%rax
shl    $0x4,%rax
add    %r8,%rax
shl    $0x7,%rax
add    %r8,%r8
sub    %r8,%rax
lea    0x400(%r9,%rax,1),%rax
sar    $0xb,%rax
mov    %ax,0x4(%rdi)
imul   $0xffffffffffffc4df,%rcx,%rcx
lea    0x400(%rcx,%r9,1),%rax
sar    $0xb,%rax
mov    %ax,0xc(%rdi)
sub    %r15d,%ebx
movslq %ebx,%r11
sub    %r10d,%edx
movslq %edx,%rdx
lea    (%r11,%rdx,1),%r8
sub    %r13d,%esi
movslq %esi,%rsi
mov    -0x10(%rbp),%rcx
mov    -0x8(%rbp),%rax
sub    %ecx,%eax
movslq %eax,%r10
lea    (%rsi,%r10,1),%rax
lea    (%r8,%rax,1),%rbx
lea    (%rbx,%rbx,8),%rcx
shl    $0x5,%rcx
lea    (%rcx,%rbx,8),%rcx
lea    (%rcx,%rbx,4),%rcx
add    %rbx,%rcx
shl    $0x5,%rcx
lea    (%rbx,%rcx,1),%r9
lea    (%rax,%rax,4),%rcx
mov    %rcx,%rbx
shl    $0x6,%rbx
sub    %rbx,%rcx
shl    $0xe,%rax
add    %rcx,%rax
mov    %r9,%rbx
sub    %rax,%rbx
lea    (%rsi,%r11,1),%rcx
imul   $0xffffffffffffe333,%rcx,%rcx
lea    (%rsi,%rsi,8),%rax
lea    (%rsi,%rax,2),%rax
shl    $0x7,%rax
lea    (%rax,%rsi,8),%rax
lea    (%rax,%rsi,4),%rax
lea    (%rax,%rsi,2),%rax
add    %rcx,%rax
lea    0x400(%rax,%rbx,1),%rax
sar    $0xb,%rax
mov    %ax,0xe(%rdi)
mov    %r8,%rsi
shl    $0x2,%rsi
lea    (%r8,%rsi,1),%rax
mov    %rax,%r8
shl    $0x7,%r8
shl    $0x9,%rax
add    %r8,%rax
sub    %rax,%rsi
add    %r9,%rsi
lea    (%rdx,%r10,1),%r8
lea    (%r8,%r8,4),%rax
lea    (%r8,%rax,8),%rax
shl    $0x9,%rax
lea    (%rax,%r8,2),%rax
add    %rax,%r8
mov    %rdx,%r9
shl    $0x2,%r9
lea    (%rdx,%rdx,8),%rax
lea    (%r9,%rax,8),%rax
add    %rdx,%rax
lea    (%r8,%rax,1),%r9
mov    %rdx,%rax
shl    $0x9,%rax
shl    $0xe,%rdx
add    %rdx,%rax
sub    %r9,%rax
lea    0x400(%rsi,%rax,1),%rax
sar    $0xb,%rax
mov    %ax,0xa(%rdi)
lea    (%r10,%r10,2),%rax
shl    $0x4,%rax
add    %r10,%rax
shl    $0x5,%rax
lea    (%rax,%r10,4),%rax
add    %r10,%rax
shl    $0x4,%rax
lea    (%rax,%r10,4),%rax
sub    %r8,%rax
lea    0x400(%rbx,%rax,1),%rax
sar    $0xb,%rax
mov    %ax,0x6(%rdi)
lea    (%r11,%r11,2),%rax
shl    $0xc,%rax
lea    (%rax,%r11,8),%rax
lea    (%rax,%r11,2),%rax
add    %r11,%rax
add    %rcx,%rax
lea    0x400(%rax,%rsi,1),%rax
sar    $0xb,%rax
mov    %ax,0x2(%rdi)
add    $0x10,%rdi
mov    -0x48(%rbp),%rax
add    $0xffffffff,%eax
test   %eax,%eax
jns    2db4a <jpeg_fdct_islow+0x2a>
mov    -0x18(%rbp),%rdx
mov    $0x7,%ecx
jmpq   2dfd6 <jpeg_fdct_islow+0x4b6>
movswq 0x50(%rdx),%r15
movswq 0x20(%rdx),%r9
lea    (%r15,%r9,1),%eax
movslq %eax,%r14
movswq 0x60(%rdx),%rsi
mov    %rsi,-0x18(%rbp)
movswq 0x10(%rdx),%rax
mov    %rax,-0x10(%rbp)
add    %esi,%eax
movslq %eax,%rax
lea    (%r14,%rax,1),%r13
movswq 0x40(%rdx),%r12
movswq 0x30(%rdx),%rdi
lea    (%r12,%rdi,1),%esi
movslq %esi,%r10
movswq 0x70(%rdx),%r11
movswq (%rdx),%rsi
mov    %rcx,-0x48(%rbp)
lea    (%r11,%rsi,1),%ecx
movslq %ecx,%rbx
lea    (%r10,%rbx,1),%rcx
lea    0x2(%r13,%rcx,1),%r8
sar    $0x2,%r8
mov    %r8w,(%rdx)
sub    %r13,%rcx
add    $0x2,%rcx
sar    $0x2,%rcx
mov    %cx,0x40(%rdx)
sub    %r14,%rax
sub    %r10,%rbx
lea    (%rax,%rbx,1),%r10
mov    %r10,%r8
shl    $0x4,%r8
mov    %r10,%rcx
shl    $0x8,%rcx
add    %r8,%rcx
lea    (%rcx,%r10,4),%rcx
add    %r10,%rcx
shl    $0x4,%rcx
lea    (%r10,%rcx,1),%r8
lea    (%rbx,%rbx,2),%rcx
shl    $0x4,%rcx
add    %rbx,%rcx
shl    $0x7,%rcx
add    %rbx,%rbx
sub    %rbx,%rcx
lea    0x4000(%r8,%rcx,1),%rcx
sar    $0xf,%rcx
mov    %cx,0x20(%rdx)
imul   $0xffffffffffffc4df,%rax,%rax
lea    0x4000(%rax,%r8,1),%rax
sar    $0xf,%rax
mov    %ax,0x60(%rdx)
sub    %r11d,%esi
movslq %esi,%r11
sub    %r15d,%r9d
movslq %r9d,%rsi
lea    (%r11,%rsi,1),%r10
sub    %r12d,%edi
movslq %edi,%r12
mov    -0x18(%rbp),%rcx
mov    -0x10(%rbp),%rax
sub    %ecx,%eax
movslq %eax,%r9
lea    (%r12,%r9,1),%rax
lea    (%r10,%rax,1),%rdi
lea    (%rdi,%rdi,8),%rcx
shl    $0x5,%rcx
lea    (%rcx,%rdi,8),%rcx
lea    (%rcx,%rdi,4),%rcx
add    %rdi,%rcx
shl    $0x5,%rcx
lea    (%rdi,%rcx,1),%r8
lea    (%rax,%rax,4),%rcx
mov    %rcx,%rdi
shl    $0x6,%rdi
sub    %rdi,%rcx
shl    $0xe,%rax
add    %rcx,%rax
mov    %r8,%rbx
sub    %rax,%rbx
lea    (%r12,%r11,1),%rcx
imul   $0xffffffffffffe333,%rcx,%rcx
lea    (%r12,%r12,8),%rax
lea    (%r12,%rax,2),%rax
shl    $0x7,%rax
lea    (%rax,%r12,8),%rax
lea    (%rax,%r12,4),%rax
lea    (%rax,%r12,2),%rax
add    %rcx,%rax
lea    0x4000(%rax,%rbx,1),%rax
sar    $0xf,%rax
mov    %ax,0x70(%rdx)
mov    %r10,%rax
shl    $0x2,%rax
lea    (%r10,%rax,1),%rdi
mov    %rdi,%r10
shl    $0x7,%r10
shl    $0x9,%rdi
add    %r10,%rdi
sub    %rdi,%rax
lea    (%r8,%rax,1),%r10
lea    (%rsi,%r9,1),%rdi
lea    (%rdi,%rdi,4),%rax
lea    (%rdi,%rax,8),%rax
shl    $0x9,%rax
lea    (%rax,%rdi,2),%rax
lea    (%rdi,%rax,1),%r8
mov    %rsi,%rdi
shl    $0x2,%rdi
lea    (%rsi,%rsi,8),%rax
lea    (%rdi,%rax,8),%rax
add    %rsi,%rax
lea    (%r8,%rax,1),%rdi
mov    %rsi,%rax
shl    $0x9,%rax
shl    $0xe,%rsi
add    %rsi,%rax
sub    %rdi,%rax
lea    0x4000(%r10,%rax,1),%rax
sar    $0xf,%rax
mov    %ax,0x50(%rdx)
lea    (%r9,%r9,2),%rax
shl    $0x4,%rax
add    %r9,%rax
shl    $0x5,%rax
lea    (%rax,%r9,4),%rax
add    %r9,%rax
shl    $0x4,%rax
lea    (%rax,%r9,4),%rax
sub    %r8,%rax
lea    0x4000(%rbx,%rax,1),%rax
sar    $0xf,%rax
mov    %ax,0x30(%rdx)
lea    (%r11,%r11,2),%rax
shl    $0xc,%rax
lea    (%rax,%r11,8),%rax
lea    (%rax,%r11,2),%rax
add    %r11,%rax
add    %rcx,%rax
lea    0x4000(%rax,%r10,1),%rax
sar    $0xf,%rax
mov    %ax,0x10(%rdx)
mov    -0x48(%rbp),%rax
lea    -0x1(%rax),%ecx
add    $0x2,%rdx
test   %ecx,%ecx
jns    2dd97 <jpeg_fdct_islow+0x277>
mov    -0x40(%rbp),%r15
mov    -0x38(%rbp),%r14
mov    -0x30(%rbp),%r13
mov    -0x28(%rbp),%r12
mov    -0x20(%rbp),%rbx
leaveq 
retq   
nopw   %cs:0x0(%rax,%rax,1)
xchg   %ax,%ax

000000000002e000 <jpeg_idct_float>:
push   %rbp
mov    %rsp,%rbp
sub    $0x100,%rsp
mov    0x1a8(%rdi),%r10
mov    0x58(%rsi),%rax
movss  0x2d2f5(%rip),%xmm11        # 5b314 <dither_matrix+0x1284>
movss  0x2d2fd(%rip),%xmm0        # 5b324 <dither_matrix+0x1294>
lea    -0x100(%rbp),%r9
mov    $0x8,%edi
mov    %r9,%rsi
jmpq   2e240 <jpeg_idct_float+0x240>
movapd %xmm0,%xmm9
mulss  0xe0(%rax),%xmm9
movswq 0x70(%rdx),%r11
cvtsi2ss %r11d,%xmm1
mulss  %xmm1,%xmm9
movapd %xmm0,%xmm3
mulss  0x20(%rax),%xmm3
movswq 0x10(%rdx),%r11
cvtsi2ss %r11d,%xmm1
mulss  %xmm1,%xmm3
movapd %xmm9,%xmm4
addss  %xmm3,%xmm4
movapd %xmm0,%xmm2
mulss  0xa0(%rax),%xmm2
movswq 0x50(%rdx),%r11
cvtsi2ss %r11d,%xmm1
mulss  %xmm1,%xmm2
movapd %xmm0,%xmm10
mulss  0x60(%rax),%xmm10
movswq 0x30(%rdx),%r11
cvtsi2ss %r11d,%xmm1
mulss  %xmm1,%xmm10
movapd %xmm2,%xmm14
addss  %xmm10,%xmm14
movapd %xmm4,%xmm15
addss  %xmm14,%xmm15
movapd %xmm0,%xmm8
mulss  0xc0(%rax),%xmm8
movswq 0x60(%rdx),%r11
cvtsi2ss %r11d,%xmm1
mulss  %xmm1,%xmm8
movapd %xmm0,%xmm1
mulss  0x40(%rax),%xmm1
movswq 0x20(%rdx),%r11
cvtsi2ss %r11d,%xmm5
mulss  %xmm5,%xmm1
movapd %xmm8,%xmm12
addss  %xmm1,%xmm12
movapd %xmm0,%xmm7
mulss  0x80(%rax),%xmm7
movswq 0x40(%rdx),%r11
cvtsi2ss %r11d,%xmm5
mulss  %xmm5,%xmm7
mulss  (%rax),%xmm0
movswq (%rdx),%r11
cvtsi2ss %r11d,%xmm5
mulss  %xmm5,%xmm0
movapd %xmm7,%xmm6
addss  %xmm0,%xmm6
movapd %xmm12,%xmm5
addss  %xmm6,%xmm5
movapd %xmm15,%xmm13
addss  %xmm5,%xmm13
movss  %xmm13,(%rsi)
subss  %xmm15,%xmm5
movss  %xmm5,0xe0(%rsi)
subss  %xmm10,%xmm2
subss  %xmm9,%xmm3
movapd %xmm2,%xmm5
addss  %xmm3,%xmm5
mulss  %xmm11,%xmm5
movss  0x2d1aa(%rip),%xmm9        # 5b320 <dither_matrix+0x1290>
mulss  %xmm9,%xmm2
xorpd  0x2d1ad(%rip),%xmm2        # 5b330 <dither_matrix+0x12a0>
addss  %xmm5,%xmm2
subss  %xmm15,%xmm2
subss  %xmm8,%xmm1
movss  0x2d182(%rip),%xmm8        # 5b31c <dither_matrix+0x128c>
mulss  %xmm8,%xmm1
subss  %xmm12,%xmm1
subss  %xmm7,%xmm0
movapd %xmm1,%xmm7
addss  %xmm0,%xmm7
movapd %xmm2,%xmm9
addss  %xmm7,%xmm9
movss  %xmm9,0x20(%rsi)
subss  %xmm2,%xmm7
movss  %xmm7,0xc0(%rsi)
subss  %xmm14,%xmm4
mulss  %xmm8,%xmm4
subss  %xmm2,%xmm4
subss  %xmm1,%xmm0
movapd %xmm4,%xmm1
addss  %xmm0,%xmm1
movss  %xmm1,0x40(%rsi)
subss  %xmm4,%xmm0
movss  %xmm0,0xa0(%rsi)
movss  0x2d119(%rip),%xmm0        # 5b318 <dither_matrix+0x1288>
mulss  %xmm0,%xmm3
subss  %xmm3,%xmm5
subss  %xmm4,%xmm5
subss  %xmm12,%xmm6
movapd %xmm5,%xmm0
addss  %xmm6,%xmm0
movss  %xmm0,0x60(%rsi)
subss  %xmm5,%xmm6
movss  %xmm6,0x80(%rsi)
add    $0x2,%rdx
add    $0x4,%rax
add    $0x4,%rsi
movss  0x2d0e7(%rip),%xmm0        # 5b324 <dither_matrix+0x1294>
add    $0xffffffff,%edi
test   %edi,%edi
jg     2e256 <jpeg_idct_float+0x256>
movss  0x2d0c4(%rip),%xmm0        # 5b310 <dither_matrix+0x1280>
mov    %r8d,%edi
xor    %eax,%eax
jmpq   2e500 <jpeg_idct_float+0x500>
movswq 0x10(%rdx),%r11
test   %r11w,%r11w
jne    2e03b <jpeg_idct_float+0x3b>
movswq 0x20(%rdx),%r11
test   %r11w,%r11w
jne    2e03b <jpeg_idct_float+0x3b>
movswq 0x30(%rdx),%r11
test   %r11w,%r11w
jne    2e03b <jpeg_idct_float+0x3b>
movswq 0x40(%rdx),%r11
test   %r11w,%r11w
jne    2e03b <jpeg_idct_float+0x3b>
movswq 0x50(%rdx),%r11
test   %r11w,%r11w
jne    2e03b <jpeg_idct_float+0x3b>
movswq 0x60(%rdx),%r11
test   %r11w,%r11w
jne    2e03b <jpeg_idct_float+0x3b>
movswq 0x70(%rdx),%r11
test   %r11w,%r11w
jne    2e03b <jpeg_idct_float+0x3b>
movapd %xmm0,%xmm1
mulss  (%rax),%xmm1
movswq (%rdx),%r11
cvtsi2ss %r11d,%xmm2
mulss  %xmm2,%xmm1
movss  %xmm1,(%rsi)
movss  %xmm1,0x20(%rsi)
movss  %xmm1,0x40(%rsi)
movss  %xmm1,0x60(%rsi)
movss  %xmm1,0x80(%rsi)
movss  %xmm1,0xa0(%rsi)
movss  %xmm1,0xc0(%rsi)
movss  %xmm1,0xe0(%rsi)
add    $0x2,%rdx
add    $0x4,%rax
add    $0x4,%rsi
jmpq   2e23d <jpeg_idct_float+0x23d>
movss  0x4(%r9),%xmm4
movss  0x1c(%r9),%xmm9
movapd %xmm9,%xmm2
addss  %xmm4,%xmm2
movss  0x14(%r9),%xmm6
movss  0xc(%r9),%xmm10
movapd %xmm10,%xmm8
addss  %xmm6,%xmm8
movapd %xmm2,%xmm7
addss  %xmm8,%xmm7
addss  (%r9),%xmm0
movss  0x10(%r9),%xmm14
movapd %xmm14,%xmm5
addss  %xmm0,%xmm5
movss  0x18(%r9),%xmm13
movss  0x8(%r9),%xmm3
movapd %xmm13,%xmm12
addss  %xmm3,%xmm12
movapd %xmm12,%xmm1
addss  %xmm5,%xmm1
movapd %xmm7,%xmm15
addss  %xmm1,%xmm15
cvttss2si %xmm15,%edx
and    $0x3ff,%edx
movslq %edx,%rdx
movzbl (%r10,%rdx,1),%r8d
movslq %eax,%rdx
mov    (%rcx,%rdx,8),%rsi
mov    %r8b,(%rdi,%rsi,1)
subss  %xmm7,%xmm1
cvttss2si %xmm1,%edx
and    $0x3ff,%edx
movslq %edx,%rdx
movzbl (%r10,%rdx,1),%edx
mov    %dl,0x7(%rdi,%rsi,1)
subss  %xmm10,%xmm6
subss  %xmm9,%xmm4
movapd %xmm6,%xmm1
addss  %xmm4,%xmm1
mulss  %xmm11,%xmm1
movss  0x2cf3f(%rip),%xmm9        # 5b320 <dither_matrix+0x1290>
mulss  %xmm9,%xmm6
xorpd  0x2cf42(%rip),%xmm6        # 5b330 <dither_matrix+0x12a0>
addss  %xmm1,%xmm6
subss  %xmm7,%xmm6
subss  %xmm13,%xmm3
movss  0x2cf18(%rip),%xmm9        # 5b31c <dither_matrix+0x128c>
mulss  %xmm9,%xmm3
subss  %xmm12,%xmm3
subss  %xmm14,%xmm0
movapd %xmm3,%xmm7
addss  %xmm0,%xmm7
movapd %xmm6,%xmm10
addss  %xmm7,%xmm10
cvttss2si %xmm10,%edx
and    $0x3ff,%edx
movslq %edx,%rdx
movzbl (%r10,%rdx,1),%edx
mov    %dl,0x1(%rdi,%rsi,1)
subss  %xmm6,%xmm7
cvttss2si %xmm7,%edx
and    $0x3ff,%edx
movslq %edx,%rdx
movzbl (%r10,%rdx,1),%edx
mov    %dl,0x6(%rdi,%rsi,1)
subss  %xmm8,%xmm2
mulss  %xmm9,%xmm2
subss  %xmm6,%xmm2
subss  %xmm3,%xmm0
movapd %xmm2,%xmm3
addss  %xmm0,%xmm3
cvttss2si %xmm3,%edx
and    $0x3ff,%edx
movslq %edx,%rdx
movzbl (%r10,%rdx,1),%edx
mov    %dl,0x2(%rdi,%rsi,1)
subss  %xmm2,%xmm0
cvttss2si %xmm0,%edx
and    $0x3ff,%edx
movslq %edx,%rdx
movzbl (%r10,%rdx,1),%edx
mov    %dl,0x5(%rdi,%rsi,1)
movss  0x2ce70(%rip),%xmm0        # 5b318 <dither_matrix+0x1288>
mulss  %xmm0,%xmm4
subss  %xmm4,%xmm1
subss  %xmm2,%xmm1
subss  %xmm12,%xmm5
movapd %xmm1,%xmm0
addss  %xmm5,%xmm0
cvttss2si %xmm0,%edx
and    $0x3ff,%edx
movslq %edx,%rdx
movzbl (%r10,%rdx,1),%edx
mov    %dl,0x3(%rdi,%rsi,1)
subss  %xmm1,%xmm5
cvttss2si %xmm5,%edx
and    $0x3ff,%edx
movslq %edx,%rdx
movzbl (%rdx,%r10,1),%edx
mov    %dl,0x4(%rdi,%rsi,1)
add    $0x1,%eax
add    $0x20,%r9
movss  0x2ce10(%rip),%xmm0        # 5b310 <dither_matrix+0x1280>
cmp    $0x7,%eax
jle    2e318 <jpeg_idct_float+0x318>
leaveq 
retq   
nopl   0x0(%rax,%rax,1)

000000000002e510 <jpeg_idct_ifast>:
push   %rbp
mov    %rsp,%rbp
sub    $0x170,%rsp
mov    %r8,-0x30(%rbp)
mov    %rcx,-0x40(%rbp)
mov    %rbx,-0x8(%rbp)
mov    %r12,-0x10(%rbp)
mov    %r13,-0x18(%rbp)
mov    %r14,-0x20(%rbp)
mov    %r15,-0x28(%rbp)
mov    0x1a8(%rdi),%rax
mov    %rax,-0x38(%rbp)
mov    0x58(%rsi),%rax
lea    -0x170(%rbp),%rcx
mov    $0x8,%esi
jmpq   2e764 <jpeg_idct_ifast+0x254>
movswq 0x70(%rax),%r8
movswq 0x70(%rdx),%rdi
imul   %di,%r8w
movswq 0x10(%rax),%rbx
movswq 0x10(%rdx),%rdi
imul   %di,%bx
lea    (%r8,%rbx,1),%r11d
mov    %r11,-0x50(%rbp)
movswq 0x30(%rax),%r9
movswq 0x30(%rdx),%rdi
imul   %di,%r9w
movswq 0x50(%rax),%rdi
movswq 0x50(%rdx),%r10
imul   %r10w,%di
lea    (%r9,%rdi,1),%r10d
mov    %r10,-0x58(%rbp)
add    %r11d,%r10d
movswq %r10w,%r14
movswq 0x20(%rax),%r12
movswq 0x20(%rdx),%r11
imul   %r11w,%r12w
movswq 0x60(%rax),%r11
mov    %rsi,-0x70(%rbp)
movswq 0x60(%rdx),%rsi
imul   %si,%r11w
lea    (%r12,%r11,1),%r15d
movswq (%rax),%rsi
movswq (%rdx),%r13
imul   %r13w,%si
movswq 0x40(%rax),%r13
mov    %rax,-0x60(%rbp)
movswq 0x40(%rdx),%rax
imul   %ax,%r13w
lea    (%rsi,%r13,1),%eax
mov    %rdx,-0x68(%rbp)
mov    %rax,-0x48(%rbp)
add    %r15d,%eax
movswq %ax,%rax
lea    (%r14,%rax,1),%edx
mov    %edx,(%rcx)
sub    %r14d,%eax
mov    %eax,0xe0(%rcx)
sub    %r9w,%di
movswq %di,%r9
sub    %r8w,%bx
movswq %bx,%r14
lea    (%r14,%r9,1),%eax
movslq %eax,%rdi
mov    %rdi,%rdx
shl    $0x2,%rdx
lea    (%rdi,%rdi,2),%rax
lea    (%rdx,%rax,8),%rax
add    %rdi,%rax
shl    $0x4,%rax
lea    (%rax,%rdi,8),%rax
add    %rax,%rdi
sar    $0x8,%rdi
lea    (%r9,%r9,4),%rax
lea    (%r9,%rax,4),%rdx
shl    $0x5,%rdx
lea    (%r9,%r9,2),%rax
sub    %rdx,%rax
sar    $0x8,%rax
lea    (%rax,%rdi,1),%r9d
mov    %r9,%rax
sub    %r10w,%ax
movswq %ax,%r8
movswq %r12w,%rax
movswq %r11w,%rdx
sub    %edx,%eax
movslq %eax,%rdx
lea    (%rdx,%rdx,4),%rax
lea    (%rdx,%rax,2),%rax
shl    $0x5,%rax
lea    (%rax,%rdx,8),%rax
lea    (%rax,%rdx,2),%rax
sar    $0x8,%rax
mov    %rax,%rdx
sub    %r15w,%dx
sub    %r13w,%si
add    %esi,%edx
movswq %dx,%rdx
lea    (%r8,%rdx,1),%ebx
mov    %ebx,0x20(%rcx)
sub    %r8d,%edx
mov    %edx,0xc0(%rcx)
sub    %r9w,%r10w
mov    -0x50(%rbp),%rdx
movswq %dx,%rdx
mov    -0x58(%rbp),%rbx
movswq %bx,%rbx
sub    %ebx,%edx
movslq %edx,%rbx
lea    (%rbx,%rbx,4),%rdx
lea    (%rbx,%rdx,2),%rdx
shl    $0x5,%rdx
lea    (%rdx,%rbx,8),%rdx
lea    (%rdx,%rbx,2),%rdx
sar    $0x8,%rdx
lea    (%r10,%rdx,1),%r8d
movswq %r8w,%rbx
neg    %ax
add    %r15w,%ax
add    %esi,%eax
movswq %ax,%rax
lea    (%rbx,%rax,1),%edx
mov    %edx,0x40(%rcx)
sub    %ebx,%eax
mov    %eax,0xa0(%rcx)
mov    %r14,%rdx
shl    $0x4,%rdx
mov    %r14,%rax
shl    $0x8,%rax
add    %rdx,%rax
lea    (%rax,%r14,4),%rax
add    %r14,%rax
sar    $0x8,%rax
sub    %di,%ax
add    %r8d,%eax
movswq %ax,%rsi
mov    -0x48(%rbp),%rax
sub    %r15w,%ax
movswq %ax,%rax
lea    (%rsi,%rax,1),%edx
mov    %edx,0x80(%rcx)
sub    %esi,%eax
mov    %eax,0x60(%rcx)
mov    -0x68(%rbp),%rax
lea    0x2(%rax),%rdx
mov    -0x60(%rbp),%rax
add    $0x2,%rax
add    $0x4,%rcx
mov    -0x70(%rbp),%rsi
add    $0xffffffff,%esi
test   %esi,%esi
jg     2e785 <jpeg_idct_ifast+0x275>
mov    -0x30(%rbp),%rax
mov    %eax,%r13d
xor    %ecx,%ecx
mov    -0x38(%rbp),%r14
lea    -0x170(%rbp),%rdx
mov    -0x40(%rbp),%rax
jmpq   2ea86 <jpeg_idct_ifast+0x576>
movswq 0x10(%rdx),%rdi
test   %di,%di
jne    2e557 <jpeg_idct_ifast+0x47>
movswq 0x20(%rdx),%rdi
test   %di,%di
jne    2e557 <jpeg_idct_ifast+0x47>
movswq 0x30(%rdx),%rdi
test   %di,%di
jne    2e557 <jpeg_idct_ifast+0x47>
movswq 0x40(%rdx),%rdi
test   %di,%di
jne    2e557 <jpeg_idct_ifast+0x47>
movswq 0x50(%rdx),%rdi
test   %di,%di
jne    2e557 <jpeg_idct_ifast+0x47>
movswq 0x60(%rdx),%rdi
test   %di,%di
jne    2e557 <jpeg_idct_ifast+0x47>
movswq 0x70(%rdx),%rdi
test   %di,%di
jne    2e557 <jpeg_idct_ifast+0x47>
movswq (%rax),%rdi
movswq (%rdx),%rbx
imul   %ebx,%edi
mov    %edi,(%rcx)
mov    %edi,0x20(%rcx)
mov    %edi,0x40(%rcx)
mov    %edi,0x60(%rcx)
mov    %edi,0x80(%rcx)
mov    %edi,0xa0(%rcx)
mov    %edi,0xc0(%rcx)
mov    %edi,0xe0(%rcx)
add    $0x2,%rdx
add    $0x2,%rax
add    $0x4,%rcx
jmpq   2e761 <jpeg_idct_ifast+0x251>
movswq 0x10(%rdx),%rsi
mov    %rsi,-0x60(%rbp)
movswq (%rdx),%rax
mov    %rax,-0x58(%rbp)
add    %esi,%eax
mov    %rax,-0x38(%rbp)
movswq 0x18(%rdx),%r11
movswq 0x8(%rdx),%rsi
lea    (%r11,%rsi,1),%r10d
add    %r10d,%eax
movswq %ax,%rax
movswq 0x1c(%rdx),%r9
movswq 0x4(%rdx),%rdi
mov    %rcx,-0x70(%rbp)
lea    (%r9,%rdi,1),%ebx
mov    %rbx,-0x48(%rbp)
movswq 0xc(%rdx),%r8
mov    %rdx,-0x68(%rbp)
movswq 0x14(%rdx),%rdx
lea    (%r8,%rdx,1),%ecx
mov    %rcx,-0x50(%rbp)
add    %ecx,%ebx
movswq %bx,%r15
lea    (%r15,%rax,1),%ecx
and    $0x7fe0,%ecx
shr    $0x5,%ecx
movslq %ecx,%rcx
movzbl 0x80(%r14,%rcx,1),%ecx
mov    %cl,0x0(%r13,%r12,1)
sub    %r15d,%eax
and    $0x7fe0,%eax
shr    $0x5,%eax
movslq %eax,%rax
movzbl 0x80(%r14,%rax,1),%eax
mov    %al,0x7(%r13,%r12,1)
sub    %r8w,%dx
movswq %dx,%r8
sub    %r9w,%di
movswq %di,%r9
lea    (%r9,%r8,1),%eax
movslq %eax,%rdx
mov    %rdx,%rcx
shl    $0x2,%rcx
lea    (%rdx,%rdx,2),%rax
lea    (%rcx,%rax,8),%rax
add    %rdx,%rax
shl    $0x4,%rax
lea    (%rax,%rdx,8),%rax
add    %rax,%rdx
sar    $0x8,%rdx
lea    (%r8,%r8,4),%rax
lea    (%r8,%rax,4),%rcx
shl    $0x5,%rcx
lea    (%r8,%r8,2),%rax
sub    %rcx,%rax
sar    $0x8,%rax
lea    (%rax,%rdx,1),%r8d
mov    %r8,%rax
sub    %bx,%ax
movswq %ax,%r15
sub    %r11d,%esi
movslq %esi,%rcx
lea    (%rcx,%rcx,4),%rax
lea    (%rcx,%rax,2),%rax
shl    $0x5,%rax
lea    (%rax,%rcx,8),%rax
lea    (%rax,%rcx,2),%rsi
sar    $0x8,%rsi
mov    %rsi,%rcx
sub    %r10w,%cx
mov    -0x60(%rbp),%rax
mov    -0x58(%rbp),%rdi
sub    %ax,%di
lea    (%rdi,%rcx,1),%eax
movswq %ax,%rax
lea    (%r15,%rax,1),%ecx
and    $0x7fe0,%ecx
shr    $0x5,%ecx
movslq %ecx,%rcx
movzbl 0x80(%r14,%rcx,1),%ecx
mov    %cl,0x1(%r13,%r12,1)
sub    %r15d,%eax
and    $0x7fe0,%eax
shr    $0x5,%eax
movslq %eax,%rax
movzbl 0x80(%r14,%rax,1),%eax
mov    %al,0x6(%r13,%r12,1)
sub    %r8w,%bx
mov    -0x48(%rbp),%rax
movswq %ax,%rax
mov    -0x50(%rbp),%rcx
movswq %cx,%rcx
sub    %ecx,%eax
movslq %eax,%rcx
lea    (%rcx,%rcx,4),%rax
lea    (%rcx,%rax,2),%rax
shl    $0x5,%rax
lea    (%rax,%rcx,8),%rax
lea    (%rax,%rcx,2),%rax
sar    $0x8,%rax
lea    (%rbx,%rax,1),%r8d
movswq %r8w,%rbx
mov    %r10,%rax
sub    %si,%ax
add    %edi,%eax
movswq %ax,%rax
lea    (%rbx,%rax,1),%ecx
and    $0x7fe0,%ecx
shr    $0x5,%ecx
movslq %ecx,%rcx
movzbl 0x80(%r14,%rcx,1),%ecx
mov    %cl,0x2(%r13,%r12,1)
sub    %ebx,%eax
and    $0x7fe0,%eax
shr    $0x5,%eax
movslq %eax,%rax
movzbl 0x80(%r14,%rax,1),%eax
mov    %al,0x5(%r13,%r12,1)
mov    %r9,%rax
shl    $0x4,%rax
mov    %r9,%rcx
shl    $0x8,%rcx
add    %rcx,%rax
lea    (%rax,%r9,4),%rax
add    %r9,%rax
sar    $0x8,%rax
sub    %dx,%ax
add    %r8d,%eax
movswq %ax,%rdx
mov    -0x38(%rbp),%rax
sub    %r10w,%ax
movswq %ax,%rax
lea    (%rdx,%rax,1),%ecx
and    $0x7fe0,%ecx
shr    $0x5,%ecx
movslq %ecx,%rcx
movzbl 0x80(%r14,%rcx,1),%ecx
mov    %cl,0x4(%r13,%r12,1)
sub    %edx,%eax
and    $0x7fe0,%eax
shr    $0x5,%eax
movslq %eax,%rax
movzbl 0x80(%rax,%r14,1),%eax
mov    %al,0x3(%r13,%r12,1)
mov    -0x68(%rbp),%rax
lea    0x20(%rax),%rdx
mov    -0x70(%rbp),%rcx
mov    -0x40(%rbp),%rax
add    $0x1,%ecx
cmp    $0x7,%ecx
jle    2eaa1 <jpeg_idct_ifast+0x591>
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
leaveq 
retq   
movslq %ecx,%rsi
mov    (%rax,%rsi,8),%r12
movslq 0x4(%rdx),%rsi
test   %esi,%esi
jne    2e826 <jpeg_idct_ifast+0x316>
movslq 0x8(%rdx),%rsi
test   %esi,%esi
jne    2e826 <jpeg_idct_ifast+0x316>
movslq 0xc(%rdx),%rsi
test   %esi,%esi
jne    2e826 <jpeg_idct_ifast+0x316>
movslq 0x10(%rdx),%rsi
test   %esi,%esi
jne    2e826 <jpeg_idct_ifast+0x316>
movslq 0x14(%rdx),%rsi
test   %esi,%esi
jne    2e826 <jpeg_idct_ifast+0x316>
movslq 0x18(%rdx),%rsi
test   %esi,%esi
jne    2e826 <jpeg_idct_ifast+0x316>
movslq 0x1c(%rdx),%rsi
test   %esi,%esi
jne    2e826 <jpeg_idct_ifast+0x316>
movslq (%rdx),%rsi
and    $0x7fe0,%esi
shr    $0x5,%esi
movslq %esi,%rsi
movzbl 0x80(%r14,%rsi,1),%esi
mov    %sil,0x0(%r13,%r12,1)
mov    %sil,0x1(%r13,%r12,1)
mov    %sil,0x2(%r13,%r12,1)
mov    %sil,0x3(%r13,%r12,1)
mov    %sil,0x4(%r13,%r12,1)
mov    %sil,0x5(%r13,%r12,1)
mov    %sil,0x6(%r13,%r12,1)
mov    %sil,0x7(%r13,%r12,1)
add    $0x20,%rdx
jmpq   2ea83 <jpeg_idct_ifast+0x573>
nopw   %cs:0x0(%rax,%rax,1)
nop

000000000002eb50 <jpeg_idct_islow>:
push   %rbp
mov    %rsp,%rbp
sub    $0x170,%rsp
mov    %r8,-0x30(%rbp)
mov    %rcx,-0x40(%rbp)
mov    %rbx,-0x8(%rbp)
mov    %r12,-0x10(%rbp)
mov    %r13,-0x18(%rbp)
mov    %r14,-0x20(%rbp)
mov    %r15,-0x28(%rbp)
mov    0x1a8(%rdi),%rax
mov    %rax,-0x38(%rbp)
mov    0x58(%rsi),%rax
lea    -0x170(%rbp),%rcx
mov    $0x8,%esi
jmpq   2ee6c <jpeg_idct_islow+0x31c>
movswq 0x70(%rax),%rdi
movswq 0x70(%rdx),%rbx
imul   %ebx,%edi
movslq %edi,%r13
mov    %r13,-0x58(%rbp)
movswq 0x30(%rax),%rdi
movswq 0x30(%rdx),%rbx
imul   %ebx,%edi
movslq %edi,%r11
lea    (%r11,%r13,1),%r8
movswq 0x10(%rax),%rdi
movswq 0x10(%rdx),%rbx
imul   %ebx,%edi
movslq %edi,%r12
movswq 0x50(%rax),%rdi
movswq 0x50(%rdx),%rbx
imul   %ebx,%edi
movslq %edi,%r15
lea    (%r12,%r15,1),%r10
lea    (%r8,%r10,1),%rbx
lea    (%rbx,%rbx,8),%rdi
shl    $0x5,%rdi
lea    (%rdi,%rbx,8),%rdi
lea    (%rdi,%rbx,4),%rdi
add    %rbx,%rdi
shl    $0x5,%rdi
lea    (%rbx,%rdi,1),%r9
mov    %r10,%rbx
shl    $0x2,%rbx
lea    (%r10,%rbx,1),%rdi
mov    %rdi,%r10
shl    $0x7,%r10
shl    $0x9,%rdi
add    %r10,%rdi
sub    %rdi,%rbx
add    %r9,%rbx
lea    0x0(%r13,%r12,1),%rdi
imul   $0xffffffffffffe333,%rdi,%rdi
mov    %rdi,-0x50(%rbp)
lea    (%rdi,%rbx,1),%r10
lea    (%r12,%r12,2),%rdi
shl    $0xc,%rdi
lea    (%rdi,%r12,8),%rdi
lea    (%rdi,%r12,2),%rdi
add    %r12,%rdi
lea    (%r10,%rdi,1),%r12
movswq 0x20(%rax),%rdi
movswq 0x20(%rdx),%r10
imul   %r10d,%edi
movslq %edi,%r14
movswq 0x60(%rax),%rdi
mov    %rsi,-0x70(%rbp)
movswq 0x60(%rdx),%rsi
imul   %esi,%edi
movslq %edi,%rdi
lea    (%r14,%rdi,1),%r13
mov    %r13,%r10
shl    $0x4,%r10
mov    %r13,%rsi
shl    $0x8,%rsi
add    %r10,%rsi
lea    (%rsi,%r13,4),%rsi
add    %r13,%rsi
shl    $0x4,%rsi
lea    0x0(%r13,%rsi,1),%r10
lea    (%r14,%r14,2),%rsi
shl    $0x4,%rsi
add    %r14,%rsi
shl    $0x7,%rsi
lea    (%r14,%r14,1),%r13
sub    %r13,%rsi
lea    (%r10,%rsi,1),%r14
movswq 0x40(%rax),%rsi
movswq 0x40(%rdx),%r13
imul   %r13d,%esi
movslq %esi,%r13
movswq (%rax),%rsi
mov    %rax,-0x60(%rbp)
movswq (%rdx),%rax
imul   %eax,%esi
movslq %esi,%rax
lea    0x0(%r13,%rax,1),%rsi
shl    $0xd,%rsi
mov    %rdx,-0x68(%rbp)
mov    %rsi,-0x48(%rbp)
lea    (%r14,%rsi,1),%rdx
lea    0x400(%r12,%rdx,1),%rsi
sar    $0xb,%rsi
mov    %esi,(%rcx)
sub    %r12,%rdx
add    $0x400,%rdx
sar    $0xb,%rdx
mov    %edx,0xe0(%rcx)
lea    (%r8,%r8,4),%rdx
mov    %rdx,%rsi
shl    $0x6,%rsi
sub    %rsi,%rdx
shl    $0xe,%r8
lea    (%r8,%rdx,1),%r12
lea    (%r11,%r15,1),%rsi
lea    (%rsi,%rsi,4),%rdx
lea    (%rsi,%rdx,8),%rdx
shl    $0x9,%rdx
lea    (%rdx,%rsi,2),%rdx
lea    (%rsi,%rdx,1),%r8
lea    (%r12,%r8,1),%rdx
mov    %r9,%rsi
sub    %rdx,%rsi
lea    (%r11,%r11,2),%rdx
shl    $0x4,%rdx
add    %r11,%rdx
shl    $0x5,%rdx
lea    (%rdx,%r11,4),%rdx
add    %r11,%rdx
shl    $0x4,%rdx
lea    (%rdx,%r11,4),%rdx
lea    (%rdx,%rsi,1),%r11
imul   $0xffffffffffffc4df,%rdi,%rdi
add    %rdi,%r10
sub    %r13,%rax
shl    $0xd,%rax
lea    (%r10,%rax,1),%rdx
lea    0x400(%r11,%rdx,1),%rsi
sar    $0xb,%rsi
mov    %esi,0x20(%rcx)
sub    %r11,%rdx
add    $0x400,%rdx
sar    $0xb,%rdx
mov    %edx,0xc0(%rcx)
sub    %r8,%rbx
mov    %r15,%rsi
shl    $0x9,%rsi
mov    %r15,%rdx
shl    $0xe,%rdx
add    %rsi,%rdx
mov    %r15,%rdi
shl    $0x2,%rdi
lea    (%r15,%r15,8),%rsi
lea    (%rdi,%rsi,8),%rsi
add    %r15,%rsi
sub    %rsi,%rdx
lea    (%rdx,%rbx,1),%rsi
mov    %rax,%rdx
sub    %r10,%rdx
lea    0x400(%rsi,%rdx,1),%rdx
sar    $0xb,%rdx
mov    %edx,0x40(%rcx)
lea    (%rsi,%r10,1),%rdx
sub    %rdx,%rax
add    $0x400,%rax
sar    $0xb,%rax
mov    %eax,0xa0(%rcx)
sub    %r12,%r9
mov    -0x50(%rbp),%rax
lea    (%rax,%r9,1),%rdx
mov    -0x58(%rbp),%rsi
lea    (%rsi,%rsi,8),%rax
lea    (%rsi,%rax,2),%rax
shl    $0x7,%rax
lea    (%rax,%rsi,8),%rax
lea    (%rax,%rsi,4),%rax
lea    (%rax,%rsi,2),%rax
lea    (%rdx,%rax,1),%rsi
mov    -0x48(%rbp),%rdx
mov    %rdx,%rax
sub    %r14,%rax
lea    0x400(%rsi,%rax,1),%rax
sar    $0xb,%rax
mov    %eax,0x60(%rcx)
lea    (%rsi,%r14,1),%rax
sub    %rax,%rdx
lea    0x400(%rdx),%rax
sar    $0xb,%rax
mov    %eax,0x80(%rcx)
mov    -0x68(%rbp),%rax
lea    0x2(%rax),%rdx
mov    -0x60(%rbp),%rax
add    $0x2,%rax
add    $0x4,%rcx
mov    -0x70(%rbp),%rsi
add    $0xffffffff,%esi
test   %esi,%esi
jg     2ee8d <jpeg_idct_islow+0x33d>
mov    -0x30(%rbp),%rax
mov    %eax,%r14d
xor    %eax,%eax
mov    -0x38(%rbp),%r15
lea    -0x170(%rbp),%rcx
mov    -0x40(%rbp),%rdx
jmpq   2f234 <jpeg_idct_islow+0x6e4>
movswq 0x10(%rdx),%rdi
test   %di,%di
jne    2eb97 <jpeg_idct_islow+0x47>
movswq 0x20(%rdx),%rdi
test   %di,%di
jne    2eb97 <jpeg_idct_islow+0x47>
movswq 0x30(%rdx),%rdi
test   %di,%di
jne    2eb97 <jpeg_idct_islow+0x47>
movswq 0x40(%rdx),%rdi
test   %di,%di
jne    2eb97 <jpeg_idct_islow+0x47>
movswq 0x50(%rdx),%rdi
test   %di,%di
jne    2eb97 <jpeg_idct_islow+0x47>
movswq 0x60(%rdx),%rdi
test   %di,%di
jne    2eb97 <jpeg_idct_islow+0x47>
movswq 0x70(%rdx),%rdi
test   %di,%di
jne    2eb97 <jpeg_idct_islow+0x47>
movswq (%rax),%rdi
movswq (%rdx),%rbx
imul   %ebx,%edi
shl    $0x2,%edi
mov    %edi,(%rcx)
mov    %edi,0x20(%rcx)
mov    %edi,0x40(%rcx)
mov    %edi,0x60(%rcx)
mov    %edi,0x80(%rcx)
mov    %edi,0xa0(%rcx)
mov    %edi,0xc0(%rcx)
mov    %edi,0xe0(%rcx)
add    $0x2,%rdx
add    $0x2,%rax
add    $0x4,%rcx
jmpq   2ee69 <jpeg_idct_islow+0x319>
movslq 0x1c(%rcx),%r12
mov    %r12,-0x48(%rbp)
movslq 0xc(%rcx),%r10
lea    (%r10,%r12,1),%rdi
movslq 0x4(%rcx),%r11
movslq 0x14(%rcx),%r9
lea    (%r11,%r9,1),%r8
lea    (%rdi,%r8,1),%rsi
lea    (%rsi,%rsi,8),%rdx
shl    $0x5,%rdx
lea    (%rdx,%rsi,8),%rdx
lea    (%rdx,%rsi,4),%rdx
add    %rsi,%rdx
shl    $0x5,%rdx
lea    (%rsi,%rdx,1),%rbx
mov    %r8,%rdx
shl    $0x2,%rdx
lea    (%r8,%rdx,1),%rsi
mov    %rsi,%r8
shl    $0x7,%r8
shl    $0x9,%rsi
add    %r8,%rsi
sub    %rsi,%rdx
lea    (%rbx,%rdx,1),%rsi
mov    %rsi,-0x60(%rbp)
lea    (%r12,%r11,1),%rdx
imul   $0xffffffffffffe333,%rdx,%rdx
mov    %rdx,-0x38(%rbp)
add    %rsi,%rdx
mov    %rax,-0x70(%rbp)
lea    (%r11,%r11,2),%rax
shl    $0xc,%rax
lea    (%rax,%r11,8),%rax
lea    (%rax,%r11,2),%rax
add    %r11,%rax
lea    (%rdx,%rax,1),%r12
movslq 0x8(%rcx),%r8
movslq 0x18(%rcx),%rsi
lea    (%r8,%rsi,1),%r11
mov    %r11,%rdx
shl    $0x4,%rdx
mov    %r11,%rax
shl    $0x8,%rax
add    %rdx,%rax
lea    (%rax,%r11,4),%rax
add    %r11,%rax
shl    $0x4,%rax
add    %rax,%r11
lea    (%r8,%r8,2),%rax
shl    $0x4,%rax
add    %r8,%rax
shl    $0x7,%rax
lea    (%r8,%r8,1),%rdx
sub    %rdx,%rax
lea    (%r11,%rax,1),%rdx
mov    %rdx,-0x58(%rbp)
movslq 0x10(%rcx),%r8
movslq (%rcx),%rax
mov    %rcx,-0x68(%rbp)
lea    (%r8,%rax,1),%rcx
shl    $0xd,%rcx
mov    %rcx,-0x50(%rbp)
add    %rcx,%rdx
lea    0x20000(%r12,%rdx,1),%rcx
sar    $0x12,%rcx
and    $0x3ff,%ecx
movslq %ecx,%rcx
movzbl 0x80(%r15,%rcx,1),%ecx
mov    %cl,(%r14,%r13,1)
sub    %r12,%rdx
lea    0x20000(%rdx),%rcx
sar    $0x12,%rcx
and    $0x3ff,%ecx
movslq %ecx,%rcx
movzbl 0x80(%r15,%rcx,1),%ecx
mov    %cl,0x7(%r14,%r13,1)
lea    (%rdi,%rdi,4),%rcx
mov    %rcx,%rdx
shl    $0x6,%rdx
sub    %rdx,%rcx
shl    $0xe,%rdi
lea    (%rdi,%rcx,1),%r12
lea    (%r10,%r9,1),%rdx
lea    (%rdx,%rdx,4),%rcx
lea    (%rdx,%rcx,8),%rcx
shl    $0x9,%rcx
lea    (%rcx,%rdx,2),%rcx
lea    (%rdx,%rcx,1),%rdi
lea    (%r12,%rdi,1),%rcx
mov    %rbx,%rdx
sub    %rcx,%rdx
lea    (%r10,%r10,2),%rcx
shl    $0x4,%rcx
add    %r10,%rcx
shl    $0x5,%rcx
lea    (%rcx,%r10,4),%rcx
add    %r10,%rcx
shl    $0x4,%rcx
lea    (%rcx,%r10,4),%rcx
lea    (%rcx,%rdx,1),%r10
imul   $0xffffffffffffc4df,%rsi,%rsi
add    %rsi,%r11
sub    %r8,%rax
shl    $0xd,%rax
lea    (%r11,%rax,1),%rdx
lea    0x20000(%r10,%rdx,1),%rcx
sar    $0x12,%rcx
and    $0x3ff,%ecx
movslq %ecx,%rcx
movzbl 0x80(%r15,%rcx,1),%ecx
mov    %cl,0x1(%r14,%r13,1)
sub    %r10,%rdx
lea    0x20000(%rdx),%rcx
sar    $0x12,%rcx
and    $0x3ff,%ecx
movslq %ecx,%rcx
movzbl 0x80(%r15,%rcx,1),%ecx
mov    %cl,0x6(%r14,%r13,1)
mov    -0x60(%rbp),%rdx
sub    %rdi,%rdx
mov    %r9,%rsi
shl    $0x9,%rsi
mov    %r9,%rcx
shl    $0xe,%rcx
add    %rsi,%rcx
mov    %r9,%rsi
shl    $0x2,%rsi
lea    (%r9,%r9,8),%rdi
lea    (%rsi,%rdi,8),%rsi
add    %r9,%rsi
sub    %rsi,%rcx
add    %rcx,%rdx
mov    %rax,%rcx
sub    %r11,%rcx
lea    0x20000(%rdx,%rcx,1),%rcx
sar    $0x12,%rcx
and    $0x3ff,%ecx
movslq %ecx,%rcx
movzbl 0x80(%r15,%rcx,1),%ecx
mov    %cl,0x2(%r14,%r13,1)
lea    (%rdx,%r11,1),%rcx
sub    %rcx,%rax
add    $0x20000,%rax
sar    $0x12,%rax
and    $0x3ff,%eax
movslq %eax,%rax
movzbl 0x80(%r15,%rax,1),%eax
mov    %al,0x5(%r14,%r13,1)
sub    %r12,%rbx
mov    -0x38(%rbp),%rax
lea    (%rax,%rbx,1),%rdx
mov    -0x48(%rbp),%rcx
lea    (%rcx,%rcx,8),%rax
lea    (%rcx,%rax,2),%rax
shl    $0x7,%rax
lea    (%rax,%rcx,8),%rax
lea    (%rax,%rcx,4),%rax
lea    (%rax,%rcx,2),%rax
lea    (%rdx,%rax,1),%rsi
mov    -0x50(%rbp),%rcx
mov    -0x58(%rbp),%rdx
mov    %rcx,%rax
sub    %rdx,%rax
lea    0x20000(%rsi,%rax,1),%rax
sar    $0x12,%rax
and    $0x3ff,%eax
movslq %eax,%rax
movzbl 0x80(%r15,%rax,1),%eax
mov    %al,0x3(%r14,%r13,1)
lea    (%rsi,%rdx,1),%rax
sub    %rax,%rcx
lea    0x20000(%rcx),%rax
sar    $0x12,%rax
and    $0x3ff,%eax
movslq %eax,%rax
movzbl 0x80(%rax,%r15,1),%eax
mov    %al,0x4(%r14,%r13,1)
mov    -0x68(%rbp),%rax
lea    0x20(%rax),%rcx
mov    -0x70(%rbp),%rax
mov    -0x40(%rbp),%rdx
add    $0x1,%eax
cmp    $0x7,%eax
jle    2f24f <jpeg_idct_islow+0x6ff>
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
leaveq 
retq   
movslq %eax,%rsi
mov    (%rdx,%rsi,8),%r13
movslq 0x4(%rcx),%rsi
test   %esi,%esi
jne    2ef31 <jpeg_idct_islow+0x3e1>
movslq 0x8(%rcx),%rsi
test   %esi,%esi
jne    2ef31 <jpeg_idct_islow+0x3e1>
movslq 0xc(%rcx),%rsi
test   %esi,%esi
jne    2ef31 <jpeg_idct_islow+0x3e1>
movslq 0x10(%rcx),%rsi
test   %esi,%esi
jne    2ef31 <jpeg_idct_islow+0x3e1>
movslq 0x14(%rcx),%rsi
test   %esi,%esi
jne    2ef31 <jpeg_idct_islow+0x3e1>
movslq 0x18(%rcx),%rsi
test   %esi,%esi
jne    2ef31 <jpeg_idct_islow+0x3e1>
movslq 0x1c(%rcx),%rsi
test   %esi,%esi
jne    2ef31 <jpeg_idct_islow+0x3e1>
movslq (%rcx),%rsi
add    $0x10,%rsi
sar    $0x5,%rsi
and    $0x3ff,%esi
movslq %esi,%rsi
movzbl 0x80(%r15,%rsi,1),%esi
mov    %sil,(%r14,%r13,1)
mov    %sil,0x1(%r14,%r13,1)
mov    %sil,0x2(%r14,%r13,1)
mov    %sil,0x3(%r14,%r13,1)
mov    %sil,0x4(%r14,%r13,1)
mov    %sil,0x5(%r14,%r13,1)
mov    %sil,0x6(%r14,%r13,1)
mov    %sil,0x7(%r14,%r13,1)
add    $0x20,%rcx
jmpq   2f231 <jpeg_idct_islow+0x6e1>
nopw   0x0(%rax,%rax,1)

000000000002f300 <jpeg_idct_7x7>:
push   %rbp
mov    %rsp,%rbp
sub    $0x140,%rsp
mov    %r8,-0x30(%rbp)
mov    %rcx,-0x38(%rbp)
mov    %rbx,-0x48(%rbp)
mov    %r12,-0x50(%rbp)
mov    %r13,-0x58(%rbp)
mov    %r14,-0x60(%rbp)
mov    %r15,-0x68(%rbp)
mov    0x1a8(%rdi),%rax
mov    %rax,-0x40(%rbp)
mov    0x58(%rsi),%rbx
xor    %r8d,%r8d
lea    -0x134(%rbp),%r9
jmpq   2f5cf <jpeg_idct_7x7+0x2cf>
movswq 0x10(%rbx),%rax
movswq 0x10(%rdx),%rcx
imul   %ecx,%eax
movslq %eax,%r11
movswq 0x30(%rbx),%rax
movswq 0x30(%rdx),%rcx
imul   %ecx,%eax
movslq %eax,%r14
mov    %r11,%rcx
sub    %r14,%rcx
lea    (%rcx,%rcx,2),%rax
lea    (%rcx,%rax,4),%r15
lea    (%rcx,%rcx,4),%rax
lea    (%rcx,%rax,2),%rdi
shl    $0x7,%rdi
mov    %r15,%r10
sub    %rdi,%r10
lea    (%r11,%r14,1),%rsi
mov    %rsi,%rcx
shl    $0x4,%rcx
mov    %rsi,%rax
shl    $0x9,%rax
add    %rcx,%rax
add    %rsi,%rax
shl    $0xd,%rsi
sub    %rax,%rsi
lea    (%rsi,%r10,1),%r12
movswq 0x50(%rbx),%rax
movswq 0x50(%rdx),%rcx
imul   %ecx,%eax
movslq %eax,%rcx
add    %rcx,%r11
lea    (%r11,%r11,4),%rax
shl    $0x5,%rax
lea    (%r11,%r11,2),%r10
sub    %r10,%rax
shl    $0x5,%rax
lea    (%rax,%r11,2),%rax
add    %r11,%rax
mov    %rax,-0x18(%rbp)
add    %rax,%r12
movswq 0x40(%rbx),%rax
movswq 0x40(%rdx),%r10
imul   %r10d,%eax
movslq %eax,%r10
movswq 0x60(%rbx),%rax
movswq 0x60(%rdx),%r11
imul   %r11d,%eax
movslq %eax,%r11
mov    %r10,%r13
sub    %r11,%r13
mov    %r8,-0x70(%rbp)
lea    0x0(%r13,%r13,2),%rax
lea    0x0(%r13,%rax,2),%rax
shl    $0x4,%rax
add    %r13,%rax
shl    $0x6,%rax
lea    0x0(%r13,%r13,8),%r8
sub    %r8,%rax
movswq 0x20(%rbx),%r8
movswq 0x20(%rdx),%r13
imul   %r13d,%r8d
movslq %r8d,%r8
mov    %r8,-0x10(%rbp)
lea    (%r11,%r8,1),%r13
lea    0x0(%r13,%r13,4),%r8
shl    $0x5,%r8
lea    (%r8,%r13,2),%r8
add    %r13,%r8
shl    $0x6,%r8
lea    (%r8,%r13,4),%r8
lea    (%r8,%r13,2),%r8
mov    %rbx,-0x28(%rbp)
movswq (%rbx),%rbx
mov    %rdx,-0x20(%rbp)
movswq (%rdx),%rdx
imul   %edx,%ebx
movslq %ebx,%rbx
shl    $0xd,%rbx
add    %rbx,%r8
lea    (%r11,%r11,2),%rdx
lea    (%r11,%r11,4),%r11
shl    $0x7,%r11
sub    %r11,%rdx
lea    0x400(%r8,%rdx,1),%rdx
add    %rax,%rdx
lea    (%r12,%rdx,1),%r11
sar    $0xb,%r11
mov    %r11d,(%r9)
sub    %r12,%rdx
sar    $0xb,%rdx
mov    %edx,0xa8(%r9)
sub    %r15,%rdi
lea    (%rsi,%rdi,1),%rdx
lea    (%rcx,%r14,1),%rdi
imul   $0xffffffffffffd3e1,%rdi,%rdi
lea    (%rdi,%rdx,1),%r15
mov    -0x10(%rbp),%rsi
mov    %rsi,%r11
sub    %r10,%r11
lea    (%r11,%r11,4),%rdx
shl    $0x5,%rdx
add    %r11,%rdx
shl    $0x4,%rdx
lea    (%rdx,%r11,2),%r11
add    %r11,%rax
lea    (%rax,%rbx,1),%r12
lea    (%r10,%r10,4),%rax
shl    $0x4,%rax
add    %r10,%rax
shl    $0x4,%rax
lea    (%rax,%r10,4),%rax
lea    (%r10,%rax,1),%r14
mov    %r10,%rdx
shl    $0xe,%rdx
mov    %r14,%rax
sub    %rdx,%rax
lea    0x400(%r12,%rax,1),%rax
add    %r15,%rax
sar    $0xb,%rax
mov    %eax,0x1c(%r9)
lea    0x400(%r12),%rax
sub    %r14,%rdx
add    %r15,%rdx
sub    %rdx,%rax
sar    $0xb,%rax
mov    %eax,0x8c(%r9)
lea    0x400(%r8),%rax
imul   $0x4f0f,%rsi,%rsi
sub    %rsi,%rax
add    %r11,%rax
mov    %rcx,%rdx
shl    $0x5,%rdx
mov    %rcx,%rsi
shl    $0xa,%rsi
add    %rsi,%rdx
lea    (%rdx,%rcx,2),%rdx
shl    $0xe,%rcx
sub    %rdx,%rcx
mov    -0x18(%rbp),%rdx
add    %rdx,%rcx
lea    (%rcx,%rdi,1),%rdx
lea    (%rdx,%rax,1),%rcx
sar    $0xb,%rcx
mov    %ecx,0x38(%r9)
sub    %rdx,%rax
sar    $0xb,%rax
mov    %eax,0x70(%r9)
sub    %r13,%r10
lea    (%r10,%r10,8),%rax
shl    $0x8,%rax
lea    (%rax,%r10,8),%rax
lea    (%rax,%r10,4),%rax
add    %r10,%rax
lea    (%rax,%rax,4),%rax
lea    0x400(%rax,%rbx,1),%rax
sar    $0xb,%rax
mov    %eax,0x54(%r9)
mov    -0x28(%rbp),%rax
lea    0x2(%rax),%rbx
mov    -0x20(%rbp),%rax
lea    0x2(%rax),%rdx
add    $0x4,%r9
mov    -0x70(%rbp),%rax
lea    0x1(%rax),%r8d
cmp    $0x6,%r8d
jle    2f345 <jpeg_idct_7x7+0x45>
mov    -0x30(%rbp),%rax
mov    %eax,%r10d
mov    -0x40(%rbp),%r15
lea    -0x134(%rbp),%r8
xor    %ebx,%ebx
mov    -0x38(%rbp),%r9
jmpq   2f8c3 <jpeg_idct_7x7+0x5c3>
movslq 0x10(%r8),%rcx
mov    %rcx,-0x30(%rbp)
movslq 0x18(%r8),%rdi
sub    %rdi,%rcx
lea    (%rcx,%rcx,2),%rax
lea    (%rcx,%rax,2),%rax
shl    $0x4,%rax
add    %rcx,%rax
shl    $0x6,%rax
lea    (%rcx,%rcx,8),%rcx
sub    %rcx,%rax
mov    %rax,-0x28(%rbp)
movslq 0x8(%r8),%rcx
mov    %rcx,-0x20(%rbp)
lea    (%rdi,%rcx,1),%rdx
mov    %rdx,-0x8(%rbp)
lea    (%rdx,%rdx,4),%rcx
shl    $0x5,%rcx
lea    (%rcx,%rdx,2),%rcx
add    %rdx,%rcx
shl    $0x6,%rcx
lea    (%rcx,%rdx,4),%rcx
lea    (%rcx,%rdx,2),%rdx
mov    %rdx,-0x18(%rbp)
movslq (%r8),%rcx
shl    $0xd,%rcx
mov    %rcx,-0x70(%rbp)
lea    (%rcx,%rdx,1),%rsi
lea    (%rdi,%rdi,2),%rdx
lea    (%rdi,%rdi,4),%rcx
shl    $0x7,%rcx
sub    %rcx,%rdx
lea    0x20000(%rsi,%rdx,1),%rcx
add    %rax,%rcx
movslq 0x4(%r8),%r14
movslq 0xc(%r8),%r13
mov    %r14,%rdx
sub    %r13,%rdx
lea    (%rdx,%rdx,4),%rax
lea    (%rdx,%rax,2),%rsi
shl    $0x7,%rsi
lea    (%rdx,%rdx,2),%rax
lea    (%rdx,%rax,4),%r12
mov    %r12,%rax
sub    %rsi,%rax
lea    (%r14,%r13,1),%rdi
mov    %rdi,%r11
shl    $0x4,%r11
mov    %rdi,%rdx
shl    $0x9,%rdx
add    %r11,%rdx
add    %rdi,%rdx
shl    $0xd,%rdi
sub    %rdx,%rdi
lea    (%rdi,%rax,1),%r11
movslq 0x14(%r8),%rdx
add    %rdx,%r14
lea    (%r14,%r14,4),%rax
shl    $0x5,%rax
mov    %r8,-0x40(%rbp)
lea    (%r14,%r14,2),%r8
sub    %r8,%rax
shl    $0x5,%rax
lea    (%rax,%r14,2),%rax
add    %rax,%r14
add    %r14,%r11
lea    (%r11,%rcx,1),%rax
sar    $0x12,%rax
and    $0x3ff,%eax
movslq %eax,%rax
movzbl 0x80(%r15,%rax,1),%eax
movslq %ebx,%r8
mov    (%r9,%r8,8),%r8
mov    %al,(%r10,%r8,1)
sub    %r11,%rcx
sar    $0x12,%rcx
and    $0x3ff,%ecx
movslq %ecx,%rax
movzbl 0x80(%r15,%rax,1),%eax
mov    %al,0x6(%r10,%r8,1)
sub    %r12,%rsi
lea    (%rdi,%rsi,1),%rcx
lea    (%rdx,%r13,1),%rax
imul   $0xffffffffffffd3e1,%rax,%rax
mov    %rax,-0x10(%rbp)
lea    (%rax,%rcx,1),%r9
mov    -0x30(%rbp),%rcx
mov    -0x20(%rbp),%rsi
mov    %rsi,%rdi
sub    %rcx,%rdi
lea    (%rdi,%rdi,4),%rax
shl    $0x5,%rax
add    %rdi,%rax
shl    $0x4,%rax
lea    (%rax,%rdi,2),%r12
mov    -0x28(%rbp),%rax
lea    (%r12,%rax,1),%r11
mov    -0x70(%rbp),%r13
lea    (%r11,%r13,1),%rdi
mov    %rbx,-0x70(%rbp)
lea    (%rcx,%rcx,4),%rax
shl    $0x4,%rax
add    %rcx,%rax
shl    $0x4,%rax
lea    (%rax,%rcx,4),%rax
lea    (%rcx,%rax,1),%rbx
shl    $0xe,%rcx
mov    %rbx,%rax
sub    %rcx,%rax
lea    0x20000(%rdi,%rax,1),%rax
add    %r9,%rax
sar    $0x12,%rax
and    $0x3ff,%eax
movslq %eax,%rax
movzbl 0x80(%r15,%rax,1),%eax
mov    %al,0x1(%r10,%r8,1)
lea    0x20000(%r11,%r13,1),%rax
sub    %rbx,%rcx
add    %r9,%rcx
sub    %rcx,%rax
sar    $0x12,%rax
and    $0x3ff,%eax
movslq %eax,%rax
movzbl 0x80(%r15,%rax,1),%eax
mov    %al,0x5(%r10,%r8,1)
mov    -0x18(%rbp),%rax
lea    0x20000(%r13,%rax,1),%rax
imul   $0x4f0f,%rsi,%rsi
sub    %rsi,%rax
add    %r12,%rax
mov    %rdx,%rsi
shl    $0x5,%rsi
mov    %rdx,%rcx
shl    $0xa,%rcx
add    %rsi,%rcx
lea    (%rcx,%rdx,2),%rcx
shl    $0xe,%rdx
sub    %rcx,%rdx
lea    (%r14,%rdx,1),%rcx
mov    -0x10(%rbp),%rdx
add    %rcx,%rdx
lea    (%rdx,%rax,1),%rcx
sar    $0x12,%rcx
and    $0x3ff,%ecx
movslq %ecx,%rcx
movzbl 0x80(%r15,%rcx,1),%ecx
mov    %cl,0x2(%r10,%r8,1)
sub    %rdx,%rax
sar    $0x12,%rax
and    $0x3ff,%eax
movslq %eax,%rax
movzbl 0x80(%r15,%rax,1),%eax
mov    %al,0x4(%r10,%r8,1)
mov    -0x30(%rbp),%rcx
mov    -0x8(%rbp),%rax
sub    %rax,%rcx
lea    (%rcx,%rcx,8),%rax
shl    $0x8,%rax
lea    (%rax,%rcx,8),%rax
lea    (%rax,%rcx,4),%rax
add    %rcx,%rax
lea    (%rax,%rax,4),%rax
lea    0x20000(%rax,%r13,1),%rax
sar    $0x12,%rax
and    $0x3ff,%eax
movslq %eax,%rax
movzbl 0x80(%rax,%r15,1),%eax
mov    %al,0x3(%r10,%r8,1)
mov    -0x70(%rbp),%rax
lea    0x1(%rax),%ebx
mov    -0x40(%rbp),%rax
lea    0x1c(%rax),%r8
mov    -0x38(%rbp),%r9
cmp    $0x6,%ebx
jle    2f5f6 <jpeg_idct_7x7+0x2f6>
mov    -0x68(%rbp),%r15
mov    -0x60(%rbp),%r14
mov    -0x58(%rbp),%r13
mov    -0x50(%rbp),%r12
mov    -0x48(%rbp),%rbx
leaveq 
retq   
data16 nopw %cs:0x0(%rax,%rax,1)
nopl   (%rax)

000000000002f8f0 <jpeg_idct_6x6>:
push   %rbp
mov    %rsp,%rbp
sub    $0xe0,%rsp
mov    %r8,-0x10(%rbp)
mov    %rbx,-0x28(%rbp)
mov    %r12,-0x30(%rbp)
mov    %r13,-0x38(%rbp)
mov    %r14,-0x40(%rbp)
mov    %r15,-0x48(%rbp)
mov    %rcx,-0x18(%rbp)
mov    0x1a8(%rdi),%rax
mov    %rax,-0x20(%rbp)
mov    0x58(%rsi),%r8
mov    %rdx,%rax
xor    %r9d,%r9d
lea    -0xe0(%rbp),%rbx
jmpq   2faa6 <jpeg_idct_6x6+0x1b6>
movswq 0x50(%r8),%rcx
movswq 0x50(%rax),%rdx
imul   %edx,%ecx
movslq %ecx,%rsi
movswq 0x10(%r8),%rcx
movswq 0x10(%rax),%rdx
imul   %edx,%ecx
movslq %ecx,%rcx
lea    (%rsi,%rcx,1),%rdi
lea    (%rdi,%rdi,8),%rdx
shl    $0x3,%rdx
lea    (%rdx,%rdi,2),%rdx
lea    (%rdi,%rdi,2),%rdi
shl    $0xa,%rdi
sub    %rdx,%rdi
movswq 0x30(%r8),%rdx
movswq 0x30(%rax),%r10
imul   %r10d,%edx
movslq %edx,%r15
lea    (%r15,%rcx,1),%rdx
shl    $0xd,%rdx
lea    (%rdi,%rdx,1),%r14
movswq 0x40(%r8),%rdx
movswq 0x40(%rax),%r10
imul   %r10d,%edx
movslq %edx,%r13
lea    0x0(%r13,%r13,4),%rdx
lea    0x0(%r13,%rdx,2),%rdx
shl    $0x4,%rdx
lea    (%rdx,%r13,4),%rdx
add    %r13,%rdx
mov    %rdx,%r10
shl    $0x5,%r10
lea    0x0(%r13,%r10,1),%r11
movswq (%r8),%r10
movswq (%rax),%r12
imul   %r12d,%r10d
movslq %r10d,%r10
shl    $0xd,%r10
lea    (%r11,%r10,1),%r12
movswq 0x20(%r8),%r11
mov    %r9,-0x50(%rbp)
movswq 0x20(%rax),%r9
imul   %r9d,%r11d
movslq %r11d,%r11
lea    (%r11,%r11,2),%r9
lea    (%r11,%r9,4),%r9
mov    %rax,-0x8(%rbp)
lea    (%r11,%r11,4),%rax
shl    $0x7,%rax
sub    %r9,%rax
shl    $0x4,%rax
add    %rax,%r11
lea    (%r12,%r11,1),%r9
lea    0x400(%r14,%r9,1),%rax
sar    $0xb,%rax
mov    %eax,(%rbx)
lea    0x400(%r9),%rax
sub    %r14,%rax
sar    $0xb,%rax
mov    %eax,0x78(%rbx)
shl    $0x6,%rdx
lea    (%rdx,%r13,2),%rdx
lea    0x400(%r10),%rax
sub    %rdx,%rax
sar    $0xb,%rax
lea    (%r15,%rsi,1),%rdx
sub    %rdx,%rcx
shl    $0x2,%rcx
lea    (%rax,%rcx,1),%rdx
mov    %edx,0x18(%rbx)
sub    %rcx,%rax
mov    %eax,0x60(%rbx)
sub    %r15,%rsi
shl    $0xd,%rsi
lea    (%rdi,%rsi,1),%rdx
lea    0x400(%r12),%rax
mov    %rax,%rcx
sub    %r11,%rcx
add    %rdx,%rcx
sar    $0xb,%rcx
mov    %ecx,0x30(%rbx)
lea    (%rdx,%r11,1),%rcx
sub    %rcx,%rax
sar    $0xb,%rax
mov    %eax,0x48(%rbx)
add    $0x2,%r8
mov    -0x8(%rbp),%rax
add    $0x2,%rax
add    $0x4,%rbx
mov    -0x50(%rbp),%rcx
lea    0x1(%rcx),%r9d
cmp    $0x5,%r9d
jle    2f938 <jpeg_idct_6x6+0x48>
mov    -0x10(%rbp),%rax
mov    %eax,%r9d
mov    -0x18(%rbp),%r14
mov    -0x20(%rbp),%r15
lea    -0xe0(%rbp),%rdx
xor    %edi,%edi
jmpq   2fc7d <jpeg_idct_6x6+0x38d>
movslq 0x14(%rdx),%rsi
movslq 0x4(%rdx),%rcx
lea    (%rsi,%rcx,1),%r8
lea    (%r8,%r8,8),%rax
shl    $0x3,%rax
lea    (%rax,%r8,2),%rbx
lea    (%r8,%r8,2),%rax
shl    $0xa,%rax
sub    %rbx,%rax
mov    %rax,-0x10(%rbp)
movslq 0xc(%rdx),%r12
lea    (%r12,%rcx,1),%rbx
shl    $0xd,%rbx
lea    (%rax,%rbx,1),%r10
movslq 0x8(%rdx),%r8
lea    (%r8,%r8,2),%rax
lea    (%r8,%rax,4),%rbx
lea    (%r8,%r8,4),%rax
shl    $0x7,%rax
sub    %rbx,%rax
shl    $0x4,%rax
lea    (%r8,%rax,1),%r11
movslq 0x10(%rdx),%r13
lea    0x0(%r13,%r13,4),%rax
lea    0x0(%r13,%rax,2),%rax
shl    $0x4,%rax
lea    (%rax,%r13,4),%rax
lea    0x0(%r13,%rax,1),%r8
mov    %r8,%rax
shl    $0x5,%rax
add    %r13,%rax
mov    %rdx,-0x20(%rbp)
mov    %rax,-0x18(%rbp)
movslq (%rdx),%rbx
shl    $0xd,%rbx
lea    (%rax,%rbx,1),%rdx
lea    (%rdx,%r11,1),%rax
lea    0x20000(%r10,%rax,1),%rax
sar    $0x12,%rax
and    $0x3ff,%eax
movslq %eax,%rax
movzbl 0x80(%r15,%rax,1),%eax
mov    %rdi,-0x50(%rbp)
movslq %edi,%rdi
mov    (%r14,%rdi,8),%rdi
mov    %al,(%r9,%rdi,1)
lea    0x20000(%rdx,%r11,1),%rax
sub    %r10,%rax
sar    $0x12,%rax
and    $0x3ff,%eax
movslq %eax,%rax
movzbl 0x80(%r15,%rax,1),%eax
mov    %al,0x5(%r9,%rdi,1)
lea    (%r12,%rsi,1),%rax
sub    %rax,%rcx
shl    $0xd,%rcx
shl    $0x6,%r8
lea    (%r8,%r13,2),%r8
lea    0x20000(%rbx),%rax
mov    %rax,%rdx
sub    %r8,%rdx
add    %rcx,%rdx
sar    $0x12,%rdx
and    $0x3ff,%edx
movslq %edx,%rdx
movzbl 0x80(%r15,%rdx,1),%edx
mov    %dl,0x1(%r9,%rdi,1)
add    %r8,%rcx
sub    %rcx,%rax
sar    $0x12,%rax
and    $0x3ff,%eax
movslq %eax,%rax
movzbl 0x80(%r15,%rax,1),%eax
mov    %al,0x4(%r9,%rdi,1)
sub    %r12,%rsi
shl    $0xd,%rsi
mov    -0x10(%rbp),%rax
lea    (%rax,%rsi,1),%rdx
mov    -0x18(%rbp),%rax
lea    0x20000(%rax,%rbx,1),%rax
mov    %rax,%rcx
sub    %r11,%rcx
add    %rdx,%rcx
sar    $0x12,%rcx
and    $0x3ff,%ecx
movslq %ecx,%rcx
movzbl 0x80(%r15,%rcx,1),%ecx
mov    %cl,0x2(%r9,%rdi,1)
lea    (%rdx,%r11,1),%rcx
sub    %rcx,%rax
sar    $0x12,%rax
and    $0x3ff,%eax
movslq %eax,%rax
movzbl 0x80(%rax,%r15,1),%eax
mov    %al,0x3(%r9,%rdi,1)
mov    -0x50(%rbp),%rax
lea    0x1(%rax),%edi
mov    -0x20(%rbp),%rax
lea    0x18(%rax),%rdx
cmp    $0x5,%edi
jle    2facd <jpeg_idct_6x6+0x1dd>
mov    -0x48(%rbp),%r15
mov    -0x40(%rbp),%r14
mov    -0x38(%rbp),%r13
mov    -0x30(%rbp),%r12
mov    -0x28(%rbp),%rbx
leaveq 
retq   
nopl   0x0(%rax)

000000000002fca0 <jpeg_idct_5x5>:
push   %rbp
mov    %rsp,%rbp
sub    $0xa0,%rsp
mov    %r8,-0x18(%rbp)
mov    %r12,-0x20(%rbp)
mov    %r13,-0x28(%rbp)
mov    %r14,-0x30(%rbp)
mov    %r15,-0x38(%rbp)
mov    %rcx,-0x8(%rbp)
mov    0x1a8(%rdi),%rax
mov    %rax,-0x10(%rbp)
mov    0x58(%rsi),%rdi
xor    %esi,%esi
lea    -0x9c(%rbp),%rcx
jmpq   2fe48 <jpeg_idct_5x5+0x1a8>
movswq 0x20(%rdi),%rax
movswq 0x20(%rdx),%r8
imul   %r8d,%eax
movslq %eax,%r11
movswq 0x40(%rdi),%rax
movswq 0x40(%rdx),%r8
imul   %r8d,%eax
movslq %eax,%r10
mov    %r11,%r8
sub    %r10,%r8
lea    (%r8,%r8,4),%rax
lea    (%r8,%rax,2),%rax
shl    $0x4,%rax
lea    (%rax,%r8,4),%rax
lea    (%r8,%rax,1),%r9
mov    %r9,%r12
shl    $0x4,%r12
movswq (%rdi),%rax
movswq (%rdx),%r8
imul   %r8d,%eax
movslq %eax,%r8
shl    $0xd,%r8
lea    (%r8,%r12,1),%r14
add    %r11,%r10
lea    (%r10,%r10,2),%rax
shl    $0x5,%rax
lea    (%rax,%r10,4),%rax
add    %r10,%rax
shl    $0x6,%rax
lea    (%rax,%r10,8),%rax
lea    (%rax,%r10,4),%r10
lea    (%r14,%r10,1),%r12
movswq 0x30(%rdi),%rax
movswq 0x30(%rdx),%r11
imul   %r11d,%eax
movslq %eax,%r15
movswq 0x10(%rdi),%rax
movswq 0x10(%rdx),%r11
imul   %r11d,%eax
movslq %eax,%r11
lea    (%r15,%r11,1),%r13
lea    0x0(%r13,%r13,4),%rax
shl    $0x4,%rax
lea    (%rax,%r13,4),%rax
add    %r13,%rax
shl    $0x4,%rax
lea    (%rax,%r13,2),%rax
lea    (%rax,%rax,4),%r13
mov    %r11,%rax
shl    $0x8,%rax
lea    (%rax,%r11,8),%rax
sub    %r11,%rax
shl    $0x4,%rax
add    %r11,%rax
lea    0x0(%r13,%rax,1),%r11
lea    0x400(%r11,%r12,1),%rax
sar    $0xb,%rax
mov    %eax,(%rcx)
lea    0x400(%r12),%rax
sub    %r11,%rax
sar    $0xb,%rax
mov    %eax,0x50(%rcx)
lea    0x400(%r14),%rax
sub    %r10,%rax
mov    %r15,%r11
shl    $0x5,%r11
mov    %r15,%r10
shl    $0x9,%r10
add    %r11,%r10
lea    (%r10,%r15,8),%r10
lea    (%r10,%r15,4),%r10
add    %r15,%r10
shl    $0x5,%r10
lea    (%r10,%r15,4),%r10
mov    %r13,%r11
sub    %r10,%r11
add    %rax,%r11
sar    $0xb,%r11
mov    %r11d,0x14(%rcx)
sub    %r13,%r10
add    %r10,%rax
sar    $0xb,%rax
mov    %eax,0x3c(%rcx)
shl    $0x6,%r9
lea    0x400(%r8),%rax
sub    %r9,%rax
sar    $0xb,%rax
mov    %eax,0x28(%rcx)
add    $0x2,%rdi
add    $0x2,%rdx
add    $0x4,%rcx
add    $0x1,%esi
cmp    $0x4,%esi
jle    2fce0 <jpeg_idct_5x5+0x40>
mov    -0x18(%rbp),%rax
mov    %eax,%r15d
mov    %rbx,-0x18(%rbp)
mov    -0x8(%rbp),%r14
mov    -0x10(%rbp),%r13
lea    -0x9c(%rbp),%rax
xor    %ecx,%ecx
jmpq   2fffc <jpeg_idct_5x5+0x35c>
movslq 0x8(%rax),%rsi
movslq 0x10(%rax),%rbx
lea    (%rbx,%rsi,1),%rdi
lea    (%rdi,%rdi,2),%rdx
shl    $0x5,%rdx
lea    (%rdx,%rdi,4),%rdx
add    %rdi,%rdx
shl    $0x6,%rdx
lea    (%rdx,%rdi,8),%rdx
lea    (%rdx,%rdi,4),%r9
sub    %rbx,%rsi
lea    (%rsi,%rsi,4),%rdx
lea    (%rsi,%rdx,2),%rdx
shl    $0x4,%rdx
lea    (%rdx,%rsi,4),%rdx
add    %rdx,%rsi
mov    %rsi,%r10
shl    $0x4,%r10
movslq (%rax),%rdi
shl    $0xd,%rdi
lea    (%rdi,%r10,1),%rbx
lea    (%rbx,%r9,1),%r8
movslq 0xc(%rax),%r12
movslq 0x4(%rax),%rdx
lea    (%r12,%rdx,1),%r11
mov    %rax,-0x10(%rbp)
lea    (%r11,%r11,4),%rax
shl    $0x4,%rax
lea    (%rax,%r11,4),%rax
add    %r11,%rax
shl    $0x4,%rax
lea    (%rax,%r11,2),%rax
lea    (%rax,%rax,4),%r11
mov    %rdx,%rax
shl    $0x8,%rax
lea    (%rax,%rdx,8),%rax
sub    %rdx,%rax
shl    $0x4,%rax
add    %rdx,%rax
lea    (%r11,%rax,1),%rdx
lea    0x20000(%rdx,%r8,1),%rax
sar    $0x12,%rax
and    $0x3ff,%eax
movslq %eax,%rax
movzbl 0x80(%r13,%rax,1),%eax
movslq %ecx,%r8
mov    (%r14,%r8,8),%r8
mov    %al,(%r15,%r8,1)
lea    0x20000(%rbx,%r9,1),%rax
sub    %rdx,%rax
sar    $0x12,%rax
and    $0x3ff,%eax
movslq %eax,%rax
movzbl 0x80(%r13,%rax,1),%eax
mov    %al,0x4(%r15,%r8,1)
lea    0x20000(%rdi,%r10,1),%rdx
sub    %r9,%rdx
mov    %r12,%rbx
shl    $0x5,%rbx
mov    %r12,%rax
shl    $0x9,%rax
add    %rbx,%rax
lea    (%rax,%r12,8),%rax
lea    (%rax,%r12,4),%rax
add    %r12,%rax
shl    $0x5,%rax
lea    (%rax,%r12,4),%rbx
mov    %r11,%rax
sub    %rbx,%rax
add    %rdx,%rax
sar    $0x12,%rax
and    $0x3ff,%eax
movslq %eax,%rax
movzbl 0x80(%r13,%rax,1),%eax
mov    %al,0x1(%r15,%r8,1)
sub    %r11,%rbx
lea    (%rbx,%rdx,1),%rax
sar    $0x12,%rax
and    $0x3ff,%eax
movslq %eax,%rax
movzbl 0x80(%r13,%rax,1),%eax
mov    %al,0x3(%r15,%r8,1)
shl    $0x6,%rsi
lea    0x20000(%rdi),%rax
sub    %rsi,%rax
sar    $0x12,%rax
and    $0x3ff,%eax
movslq %eax,%rax
movzbl 0x80(%rax,%r13,1),%eax
mov    %al,0x2(%r15,%r8,1)
add    $0x1,%ecx
mov    -0x10(%rbp),%rax
add    $0x14,%rax
cmp    $0x4,%ecx
jle    2fe72 <jpeg_idct_5x5+0x1d2>
mov    -0x38(%rbp),%r15
mov    -0x30(%rbp),%r14
mov    -0x28(%rbp),%r13
mov    -0x20(%rbp),%r12
mov    -0x18(%rbp),%rbx
leaveq 
retq   
nopl   0x0(%rax,%rax,1)

0000000000030020 <jpeg_idct_3x3>:
push   %rbp
mov    %rsp,%rbp
sub    $0x50,%rsp
mov    %r8,-0x18(%rbp)
mov    %r14,-0x20(%rbp)
mov    %r15,-0x28(%rbp)
mov    %rcx,-0x8(%rbp)
mov    0x1a8(%rdi),%rax
mov    %rax,-0x10(%rbp)
mov    0x58(%rsi),%rdi
xor    %esi,%esi
lea    -0x4c(%rbp),%rcx
jmpq   3010c <jpeg_idct_3x3+0xec>
movswq 0x20(%rdi),%rax
movswq 0x20(%rdx),%r8
imul   %r8d,%eax
movslq %eax,%r11
lea    (%r11,%r11,4),%rax
lea    (%r11,%rax,2),%rax
shl    $0x4,%rax
lea    (%rax,%r11,4),%rax
lea    (%r11,%rax,1),%r9
mov    %r9,%rax
shl    $0x5,%rax
lea    (%r11,%rax,1),%r10
movswq (%rdi),%rax
movswq (%rdx),%r8
imul   %r8d,%eax
movslq %eax,%r8
shl    $0xd,%r8
lea    (%r8,%r10,1),%r15
movswq 0x10(%rdi),%rax
movswq 0x10(%rdx),%r10
imul   %r10d,%eax
movslq %eax,%r14
lea    (%r14,%r14,2),%rax
lea    (%r14,%rax,4),%r10
lea    (%r14,%r14,4),%rax
shl    $0x7,%rax
sub    %r10,%rax
shl    $0x4,%rax
lea    (%r14,%rax,1),%r10
lea    0x400(%r15,%r10,1),%rax
sar    $0xb,%rax
mov    %eax,(%rcx)
lea    0x400(%r15),%rax
sub    %r10,%rax
sar    $0xb,%rax
mov    %eax,0x18(%rcx)
shl    $0x6,%r9
lea    (%r9,%r11,2),%r9
lea    0x400(%r8),%rax
sub    %r9,%rax
sar    $0xb,%rax
mov    %eax,0xc(%rcx)
add    $0x2,%rdi
add    $0x2,%rdx
add    $0x4,%rcx
add    $0x1,%esi
cmp    $0x2,%esi
jle    30052 <jpeg_idct_3x3+0x32>
mov    -0x18(%rbp),%rax
mov    %eax,%r15d
mov    %r13,-0x18(%rbp)
mov    -0x8(%rbp),%r11
mov    -0x10(%rbp),%r13
lea    -0x4c(%rbp),%rdx
xor    %ecx,%ecx
jmpq   30200 <jpeg_idct_3x3+0x1e0>
movslq 0x4(%rdx),%rdi
lea    (%rdi,%rdi,2),%rax
lea    (%rdi,%rax,4),%rsi
lea    (%rdi,%rdi,4),%rax
shl    $0x7,%rax
sub    %rsi,%rax
shl    $0x4,%rax
lea    (%rdi,%rax,1),%r8
movslq 0x8(%rdx),%r10
lea    (%r10,%r10,4),%rax
lea    (%r10,%rax,2),%rax
shl    $0x4,%rax
lea    (%rax,%r10,4),%rax
lea    (%r10,%rax,1),%rsi
mov    %rsi,%rax
shl    $0x5,%rax
lea    (%r10,%rax,1),%r9
movslq (%rdx),%rdi
shl    $0xd,%rdi
lea    (%rdi,%r9,1),%rax
lea    0x20000(%rax,%r8,1),%rax
sar    $0x12,%rax
and    $0x3ff,%eax
movslq %eax,%rax
movzbl 0x80(%r13,%rax,1),%eax
movslq %ecx,%r14
mov    (%r11,%r14,8),%r14
mov    %al,(%r15,%r14,1)
lea    0x20000(%rdi,%r9,1),%rax
sub    %r8,%rax
sar    $0x12,%rax
and    $0x3ff,%eax
movslq %eax,%rax
movzbl 0x80(%r13,%rax,1),%eax
mov    %al,0x2(%r15,%r14,1)
shl    $0x6,%rsi
lea    (%rsi,%r10,2),%rsi
lea    0x20000(%rdi),%rax
sub    %rsi,%rax
sar    $0x12,%rax
and    $0x3ff,%eax
movslq %eax,%rax
movzbl 0x80(%rax,%r13,1),%eax
mov    %al,0x1(%r15,%r14,1)
add    $0x1,%ecx
add    $0xc,%rdx
cmp    $0x2,%ecx
jle    30133 <jpeg_idct_3x3+0x113>
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
leaveq 
retq   
nopw   0x0(%rax,%rax,1)

0000000000030220 <jpeg_idct_9x9>:
push   %rbp
mov    %rsp,%rbp
sub    $0x1c0,%rsp
mov    %r8,-0x58(%rbp)
mov    %rcx,-0x60(%rbp)
mov    %rbx,-0x70(%rbp)
mov    %r12,-0x78(%rbp)
mov    %r13,-0x80(%rbp)
mov    %r14,-0x88(%rbp)
mov    %r15,-0x90(%rbp)
mov    0x1a8(%rdi),%rax
mov    %rax,-0x68(%rbp)
mov    0x58(%rsi),%rcx
xor    %esi,%esi
lea    -0x1b8(%rbp),%rdi
jmpq   3054d <jpeg_idct_9x9+0x32d>
movswq 0x10(%rcx),%rax
movswq 0x10(%rdx),%rbx
imul   %ebx,%eax
movslq %eax,%r8
mov    %r8,-0x10(%rbp)
movswq 0x70(%rcx),%rax
movswq 0x70(%rdx),%rbx
imul   %ebx,%eax
movslq %eax,%r13
lea    0x0(%r13,%r8,1),%rax
mov    %rax,%rbx
shl    $0x7,%rbx
lea    (%rbx,%rax,4),%rbx
lea    (%rbx,%rax,2),%rbx
shl    $0xc,%rax
sub    %rbx,%rax
mov    %rax,-0x40(%rbp)
movswq 0x50(%rcx),%rbx
movswq 0x50(%rdx),%r9
imul   %r9d,%ebx
movslq %ebx,%rbx
add    %rbx,%r8
imul   $0x1d17,%r8,%r8
mov    %r8,-0x28(%rbp)
lea    (%r8,%rax,1),%r10
movswq 0x30(%rcx),%rax
movswq 0x30(%rdx),%r8
imul   %r8d,%eax
movslq %eax,%r8
imul   $0xffffffffffffd8cf,%r8,%r8
mov    %r10,%r11
sub    %r8,%r11
movswq 0x40(%rcx),%rax
movswq 0x40(%rdx),%r9
imul   %r9d,%eax
movslq %eax,%r15
movswq 0x20(%rcx),%rax
mov    %rsi,-0x98(%rbp)
movswq 0x20(%rdx),%rsi
imul   %esi,%eax
movslq %eax,%r12
lea    (%r15,%r12,1),%rsi
mov    %rsi,-0x18(%rbp)
lea    (%rsi,%rsi,4),%rax
shl    $0x4,%rax
lea    (%rax,%rsi,4),%rax
add    %rsi,%rax
shl    $0x7,%rax
lea    (%rax,%rsi,8),%r9
mov    %r9,-0x20(%rbp)
sub    %rsi,%r9
movswq 0x60(%rcx),%rax
movswq 0x60(%rdx),%rsi
imul   %esi,%eax
movslq %eax,%r14
lea    (%r14,%r14,4),%rax
lea    (%r14,%rax,2),%rax
shl    $0x4,%rax
lea    (%rax,%r14,4),%rax
lea    (%r14,%rax,1),%rsi
mov    %rsi,%rax
shl    $0x5,%rax
add    %r14,%rax
mov    %rcx,-0x50(%rbp)
movswq (%rcx),%rcx
mov    %rdx,-0x48(%rbp)
movswq (%rdx),%rdx
imul   %edx,%ecx
movslq %ecx,%rcx
shl    $0xd,%rcx
add    %rcx,%rax
mov    %rax,-0x30(%rbp)
add    %r9,%rax
lea    (%r15,%r15,8),%r9
shl    $0x2,%r9
mov    %r15,%rdx
shl    $0xb,%rdx
mov    %rdx,-0x38(%rbp)
neg    %rdx
add    %r9,%rdx
lea    0x400(%rax,%rdx,1),%rdx
lea    (%r11,%rdx,1),%rax
sar    $0xb,%rax
mov    %eax,(%rdi)
mov    %r8,%rax
sub    %r10,%rax
add    %rdx,%rax
sar    $0xb,%rax
mov    %eax,0x100(%rdi)
neg    %r15
add    %r12,%r15
lea    (%r15,%r15,4),%rax
lea    (%r15,%rax,2),%rax
shl    $0x4,%rax
lea    (%rax,%r15,4),%rax
add    %r15,%rax
shl    $0x5,%rax
lea    (%r15,%rax,1),%r10
shl    $0x6,%rsi
lea    (%rsi,%r14,2),%rax
lea    0x400(%rcx),%rdx
neg    %rax
add    %rdx,%rax
lea    (%rax,%r10,1),%rcx
lea    0x0(%r13,%rbx,1),%rax
mov    -0x10(%rbp),%rsi
sub    %rax,%rsi
lea    (%rsi,%rsi,2),%rax
lea    (%rsi,%rax,4),%r10
lea    (%rsi,%rsi,4),%rax
shl    $0x7,%rax
sub    %r10,%rax
shl    $0x4,%rax
add    %rax,%rsi
lea    (%rcx,%rsi,1),%rax
sar    $0xb,%rax
mov    %eax,0x20(%rdi)
sub    %rsi,%rcx
sar    $0xb,%rcx
mov    %ecx,0xe0(%rdi)
sub    %r13,%rbx
lea    (%rbx,%rbx,4),%rax
lea    (%rbx,%rax,2),%rax
shl    $0x6,%rax
lea    (%rax,%rbx,8),%rax
add    %rbx,%rax
shl    $0x4,%rax
lea    (%rbx,%rax,1),%r11
mov    %r8,%rcx
sub    %r11,%rcx
mov    -0x28(%rbp),%rax
lea    (%rcx,%rax,1),%rbx
mov    -0x18(%rbp),%rax
mov    -0x20(%rbp),%rcx
sub    %rcx,%rax
mov    -0x30(%rbp),%rsi
lea    0x400(%rsi,%rax,1),%rcx
mov    %r12,%r10
shl    $0x4,%r10
mov    %r12,%rax
shl    $0x8,%rax
add    %r10,%rax
lea    (%rax,%r12,4),%rax
add    %r12,%rax
shl    $0x5,%rax
lea    (%rax,%r12,8),%rax
lea    (%rax,%r12,2),%rax
lea    (%r12,%rax,1),%r10
lea    (%r10,%rcx,1),%rax
lea    (%rbx,%rax,1),%rcx
sar    $0xb,%rcx
mov    %ecx,0x40(%rdi)
sub    %rbx,%rax
sar    $0xb,%rax
mov    %eax,0xc0(%rdi)
lea    (%r8,%r11,1),%rcx
mov    -0x40(%rbp),%rax
lea    (%rcx,%rax,1),%rbx
lea    0x400(%rsi),%rax
sub    %r10,%rax
mov    -0x38(%rbp),%rcx
sub    %r9,%rcx
add    %rcx,%rax
lea    (%rbx,%rax,1),%rcx
sar    $0xb,%rcx
mov    %ecx,0x60(%rdi)
sub    %rbx,%rax
sar    $0xb,%rax
mov    %eax,0xa0(%rdi)
lea    (%r15,%r14,1),%rcx
lea    (%rcx,%rcx,4),%rax
lea    (%rcx,%rax,2),%rax
shl    $0x4,%rax
lea    (%rax,%rcx,4),%rax
add    %rcx,%rax
shl    $0x6,%rax
lea    (%rax,%rcx,2),%rax
sub    %rax,%rdx
sar    $0xb,%rdx
mov    %edx,0x80(%rdi)
mov    -0x50(%rbp),%rax
lea    0x2(%rax),%rcx
mov    -0x48(%rbp),%rax
lea    0x2(%rax),%rdx
add    $0x4,%rdi
mov    -0x98(%rbp),%rax
lea    0x1(%rax),%esi
cmp    $0x7,%esi
jle    3026a <jpeg_idct_9x9+0x4a>
mov    -0x58(%rbp),%rax
mov    %eax,%r10d
mov    -0x68(%rbp),%r15
lea    -0x1b8(%rbp),%rsi
xor    %edx,%edx
mov    -0x60(%rbp),%rcx
jmpq   308a4 <jpeg_idct_9x9+0x684>
movslq 0x8(%rsi),%r14
movslq 0x10(%rsi),%r13
lea    0x0(%r13,%r14,1),%rdi
mov    %rdi,-0x40(%rbp)
lea    (%rdi,%rdi,4),%rax
shl    $0x4,%rax
lea    (%rax,%rdi,4),%rax
add    %rdi,%rax
shl    $0x7,%rax
lea    (%rax,%rdi,8),%rbx
mov    %rbx,-0x48(%rbp)
sub    %rdi,%rbx
movslq 0x18(%rsi),%r12
lea    (%r12,%r12,4),%rax
lea    (%r12,%rax,2),%rax
shl    $0x4,%rax
lea    (%rax,%r12,4),%rax
lea    (%r12,%rax,1),%rdi
mov    %rdi,%rax
shl    $0x5,%rax
add    %r12,%rax
mov    %rax,-0x18(%rbp)
movslq (%rsi),%r8
shl    $0xd,%r8
add    %r8,%rax
mov    %rax,-0x38(%rbp)
add    %rax,%rbx
mov    %r13,%r9
shl    $0xb,%r9
mov    %r9,-0x20(%rbp)
lea    0x0(%r13,%r13,8),%rax
shl    $0x2,%rax
mov    %rax,-0x28(%rbp)
sub    %r9,%rax
lea    0x20000(%rbx,%rax,1),%r11
movslq 0x1c(%rsi),%rax
mov    %rax,-0x58(%rbp)
movslq 0x4(%rsi),%r9
mov    %r9,-0x50(%rbp)
add    %r9,%rax
mov    %rax,%rbx
shl    $0x7,%rbx
lea    (%rbx,%rax,4),%rbx
lea    (%rbx,%rax,2),%rbx
shl    $0xc,%rax
sub    %rbx,%rax
mov    %rax,-0x10(%rbp)
movslq 0x14(%rsi),%rbx
add    %rbx,%r9
imul   $0x1d17,%r9,%r9
mov    %r9,-0x30(%rbp)
add    %rax,%r9
mov    %rsi,-0x68(%rbp)
movslq 0xc(%rsi),%rsi
imul   $0xffffffffffffd8cf,%rsi,%rsi
mov    %r9,%rax
sub    %rsi,%rax
add    %r11,%rax
sar    $0x12,%rax
and    $0x3ff,%eax
movslq %eax,%rax
movzbl 0x80(%r15,%rax,1),%eax
mov    %rdx,-0x98(%rbp)
movslq %edx,%rdx
mov    (%rcx,%rdx,8),%rdx
mov    %al,(%r10,%rdx,1)
mov    %rsi,%rax
sub    %r9,%rax
add    %r11,%rax
sar    $0x12,%rax
and    $0x3ff,%eax
movslq %eax,%rax
movzbl 0x80(%r15,%rax,1),%eax
mov    %al,0x8(%r10,%rdx,1)
mov    %r14,%r11
sub    %r13,%r11
lea    (%r11,%r11,4),%rax
lea    (%r11,%rax,2),%rax
shl    $0x4,%rax
lea    (%rax,%r11,4),%rax
add    %r11,%rax
shl    $0x5,%rax
lea    (%r11,%rax,1),%rcx
shl    $0x6,%rdi
lea    (%rdi,%r12,2),%rdi
lea    0x20000(%r8),%rax
mov    %rax,-0x8(%rbp)
sub    %rdi,%rax
add    %rax,%rcx
mov    -0x58(%rbp),%r13
lea    0x0(%r13,%rbx,1),%rax
mov    -0x50(%rbp),%rdi
sub    %rax,%rdi
lea    (%rdi,%rdi,2),%rax
lea    (%rdi,%rax,4),%r9
lea    (%rdi,%rdi,4),%rax
shl    $0x7,%rax
sub    %r9,%rax
shl    $0x4,%rax
add    %rax,%rdi
lea    (%rcx,%rdi,1),%rax
sar    $0x12,%rax
and    $0x3ff,%eax
movslq %eax,%rax
movzbl 0x80(%r15,%rax,1),%eax
mov    %al,0x1(%r10,%rdx,1)
sub    %rdi,%rcx
sar    $0x12,%rcx
and    $0x3ff,%ecx
movslq %ecx,%rax
movzbl 0x80(%r15,%rax,1),%eax
mov    %al,0x7(%r10,%rdx,1)
mov    -0x40(%rbp),%rax
mov    -0x48(%rbp),%rcx
sub    %rcx,%rax
mov    -0x38(%rbp),%rcx
lea    0x20000(%rcx,%rax,1),%rcx
mov    %r14,%rdi
shl    $0x4,%rdi
mov    %r14,%rax
shl    $0x8,%rax
add    %rdi,%rax
lea    (%rax,%r14,4),%rax
add    %r14,%rax
shl    $0x5,%rax
lea    (%rax,%r14,8),%rax
lea    (%rax,%r14,2),%rax
lea    (%r14,%rax,1),%r9
lea    (%r9,%rcx,1),%rax
sub    %r13,%rbx
lea    (%rbx,%rbx,4),%rcx
lea    (%rbx,%rcx,2),%rcx
shl    $0x6,%rcx
lea    (%rcx,%rbx,8),%rcx
add    %rbx,%rcx
shl    $0x4,%rcx
add    %rcx,%rbx
mov    %rsi,%rcx
sub    %rbx,%rcx
mov    -0x30(%rbp),%rdi
add    %rcx,%rdi
lea    (%rdi,%rax,1),%rcx
sar    $0x12,%rcx
and    $0x3ff,%ecx
movslq %ecx,%rcx
movzbl 0x80(%r15,%rcx,1),%ecx
mov    %cl,0x2(%r10,%rdx,1)
sub    %rdi,%rax
sar    $0x12,%rax
and    $0x3ff,%eax
movslq %eax,%rax
movzbl 0x80(%r15,%rax,1),%eax
mov    %al,0x6(%r10,%rdx,1)
lea    (%rsi,%rbx,1),%rax
mov    -0x10(%rbp),%rcx
lea    (%rax,%rcx,1),%rsi
mov    -0x18(%rbp),%rax
lea    0x20000(%r8,%rax,1),%rcx
sub    %r9,%rcx
mov    -0x20(%rbp),%rax
mov    -0x28(%rbp),%rdi
sub    %rdi,%rax
add    %rcx,%rax
lea    (%rsi,%rax,1),%rcx
sar    $0x12,%rcx
and    $0x3ff,%ecx
movslq %ecx,%rcx
movzbl 0x80(%r15,%rcx,1),%ecx
mov    %cl,0x3(%r10,%rdx,1)
sub    %rsi,%rax
sar    $0x12,%rax
and    $0x3ff,%eax
movslq %eax,%rax
movzbl 0x80(%r15,%rax,1),%eax
mov    %al,0x5(%r10,%rdx,1)
lea    (%r11,%r12,1),%rcx
lea    (%rcx,%rcx,4),%rax
lea    (%rcx,%rax,2),%rax
shl    $0x4,%rax
lea    (%rax,%rcx,4),%rax
add    %rcx,%rax
shl    $0x6,%rax
lea    (%rax,%rcx,2),%rcx
mov    -0x8(%rbp),%rax
sub    %rcx,%rax
sar    $0x12,%rax
and    $0x3ff,%eax
movslq %eax,%rax
movzbl 0x80(%rax,%r15,1),%eax
mov    %al,0x4(%r10,%rdx,1)
mov    -0x98(%rbp),%rax
lea    0x1(%rax),%edx
mov    -0x68(%rbp),%rax
lea    0x20(%rax),%rsi
mov    -0x60(%rbp),%rcx
cmp    $0x8,%edx
jle    30573 <jpeg_idct_9x9+0x353>
mov    -0x90(%rbp),%r15
mov    -0x88(%rbp),%r14
mov    -0x80(%rbp),%r13
mov    -0x78(%rbp),%r12
mov    -0x70(%rbp),%rbx
leaveq 
retq   
nopl   0x0(%rax)

00000000000308d0 <jpeg_idct_10x10>:
push   %rbp
mov    %rsp,%rbp
sub    $0x210,%rsp
mov    %r8,-0x88(%rbp)
mov    %rcx,-0x90(%rbp)
mov    %rbx,-0xa0(%rbp)
mov    %r12,-0xa8(%rbp)
mov    %r13,-0xb0(%rbp)
mov    %r14,-0xb8(%rbp)
mov    %r15,-0xc0(%rbp)
mov    0x1a8(%rdi),%rax
mov    %rax,-0x98(%rbp)
mov    0x58(%rsi),%rdi
mov    %rdx,%r9
xor    %ecx,%ecx
lea    -0x208(%rbp),%rsi
jmpq   30ca0 <jpeg_idct_10x10+0x3d0>
movswq 0x30(%rdi),%rax
movswq 0x30(%r9),%rdx
imul   %edx,%eax
movslq %eax,%r12
mov    %r12,-0x10(%rbp)
movswq 0x70(%rdi),%rax
movswq 0x70(%r9),%rdx
imul   %edx,%eax
movslq %eax,%r8
mov    %r8,-0x8(%rbp)
mov    %r12,%rbx
sub    %r8,%rbx
lea    (%rbx,%rbx,2),%r14
mov    %r14,%rax
shl    $0x3,%rax
lea    (%rax,%rbx,4),%rax
lea    (%rbx,%rax,1),%r10
lea    (%rbx,%rbx,4),%rax
shl    $0x9,%rax
sub    %r10,%rax
movswq 0x50(%rdi),%rdx
movswq 0x50(%r9),%r11
imul   %r11d,%edx
movslq %edx,%r11
mov    %r11,-0x18(%rbp)
shl    $0xd,%r11
lea    (%rax,%r11,1),%rdx
mov    %rdx,-0x48(%rbp)
add    %r8,%r12
lea    (%r12,%r12,2),%rax
lea    (%r12,%rax,8),%rax
shl    $0x4,%rax
add    %r12,%rax
mov    %rcx,-0xc8(%rbp)
mov    %rax,-0x50(%rbp)
mov    %r12,%rcx
shl    $0xd,%rcx
mov    %rcx,-0x58(%rbp)
sub    %rax,%rcx
movswq 0x10(%rdi),%rax
movswq 0x10(%r9),%r8
imul   %r8d,%eax
movslq %eax,%r15
mov    %r15,%rax
imul   $0x2cb3,%rax,%rax
add    %rcx,%rax
add    %rax,%rdx
movswq 0x20(%rdi),%rax
movswq 0x20(%r9),%rcx
imul   %ecx,%eax
movslq %eax,%rcx
movswq 0x60(%rdi),%rax
movswq 0x60(%r9),%r8
imul   %r8d,%eax
movslq %eax,%rax
mov    %rax,-0x20(%rbp)
lea    (%rcx,%rax,1),%r8
lea    (%r8,%r8,4),%rax
shl    $0x4,%rax
lea    (%rax,%r8,4),%rax
add    %r8,%rax
shl    $0x4,%rax
lea    (%rax,%r8,2),%rax
lea    (%rax,%rax,4),%r8
mov    %r8,-0x28(%rbp)
mov    %rcx,%rax
shl    $0x8,%rax
lea    (%rax,%rcx,8),%rax
sub    %rcx,%rax
shl    $0x4,%rax
add    %rcx,%rax
add    %rax,%r8
mov    %r8,-0x60(%rbp)
movswq 0x40(%rdi),%rax
movswq 0x40(%r9),%rcx
imul   %ecx,%eax
movslq %eax,%r13
lea    0x0(%r13,%r13,8),%rax
shl    $0x5,%rax
mov    %r13,%rcx
shl    $0x2,%rcx
mov    %rcx,-0x38(%rbp)
add    %rcx,%rax
add    %r13,%rax
shl    $0x5,%rax
lea    0x0(%r13,%r13,2),%rcx
sub    %rcx,%rax
mov    %rdi,-0x70(%rbp)
movswq (%rdi),%rdi
mov    %r9,-0x68(%rbp)
movswq (%r9),%r9
imul   %r9d,%edi
movslq %edi,%rdi
shl    $0xd,%rdi
add    %rdi,%rax
mov    %rax,-0x40(%rbp)
add    %rax,%r8
lea    0x400(%rdx,%r8,1),%rax
sar    $0xb,%rax
mov    %eax,(%rsi)
lea    0x400(%r8),%rax
sub    %rdx,%rax
sar    $0xb,%rax
mov    %eax,0x120(%rsi)
lea    (%rbx,%r14,4),%rdx
shl    $0x9,%rdx
lea    (%r10,%r11,1),%rax
mov    %rdx,%rbx
sub    %rax,%rbx
lea    (%r12,%r12,8),%rax
shl    $0x5,%rax
lea    (%rax,%r12,8),%rax
lea    (%rax,%r12,4),%rax
add    %r12,%rax
shl    $0x4,%rax
sub    %rax,%r12
lea    (%r15,%r15,4),%rax
shl    $0x7,%rax
lea    (%rax,%r15,4),%rax
add    %r15,%rax
shl    $0x4,%rax
lea    (%rax,%r15,2),%rax
add    %r15,%rax
add    %r12,%rax
lea    (%rax,%rbx,1),%r14
mov    -0x20(%rbp),%rbx
mov    %rbx,%r8
shl    $0x5,%r8
mov    %rbx,%rax
shl    $0x9,%rax
add    %r8,%rax
lea    (%rax,%rbx,8),%rax
lea    (%rax,%rbx,4),%rax
add    %rbx,%rax
shl    $0x5,%rax
lea    (%rax,%rbx,4),%rbx
mov    -0x28(%rbp),%r9
mov    %r9,%r8
sub    %rbx,%r8
lea    0x0(%r13,%rcx,2),%rax
shl    $0x9,%rax
mov    -0x38(%rbp),%rcx
neg    %rax
add    %rcx,%rax
lea    0x400(%rdi,%rax,1),%rax
mov    %rax,-0x30(%rbp)
add    %r8,%rax
lea    (%r14,%rax,1),%r8
sar    $0xb,%r8
mov    %r8d,0x20(%rsi)
sub    %r14,%rax
sar    $0xb,%rax
mov    %eax,0x100(%rsi)
lea    0x0(%r13,%rcx,1),%rax
lea    0x0(%r13,%rax,2),%rax
shl    $0x4,%rax
add    %rcx,%rax
add    %r13,%rax
shl    $0x6,%rax
lea    (%rax,%r13,2),%rcx
lea    0x400(%rdi),%rax
sub    %rcx,%rax
sar    $0xb,%rax
mov    -0x10(%rbp),%rdi
mov    -0x8(%rbp),%rcx
sub    %rdi,%rcx
add    %r15,%rcx
mov    -0x18(%rbp),%rdi
sub    %rdi,%rcx
shl    $0x2,%rcx
lea    (%rax,%rcx,1),%rdi
mov    %edi,0x40(%rsi)
sub    %rcx,%rax
mov    %eax,0xe0(%rsi)
sub    %rdx,%r10
lea    (%r11,%r10,1),%rax
mov    %r15,%rdx
shl    $0x4,%rdx
mov    %r15,%rcx
shl    $0xa,%rcx
add    %rdx,%rcx
lea    (%rcx,%r15,8),%rcx
lea    (%rcx,%r15,4),%rcx
lea    (%rcx,%rcx,4),%rcx
add    %r12,%rcx
lea    (%rax,%rcx,1),%rdx
sub    %r9,%rbx
mov    -0x30(%rbp),%rax
add    %rbx,%rax
lea    (%rdx,%rax,1),%rcx
sar    $0xb,%rcx
mov    %ecx,0x60(%rsi)
sub    %rdx,%rax
sar    $0xb,%rax
mov    %eax,0xc0(%rsi)
mov    -0x58(%rbp),%rax
mov    -0x50(%rbp),%rcx
sub    %rax,%rcx
lea    (%r15,%r15,2),%rax
lea    (%r15,%rax,2),%rax
shl    $0x4,%rax
add    %r15,%rax
shl    $0x4,%rax
lea    (%rax,%r15,4),%rax
add    %rcx,%rax
mov    -0x48(%rbp),%rcx
lea    (%rcx,%rax,1),%rdi
mov    -0x40(%rbp),%rax
add    $0x400,%rax
mov    -0x60(%rbp),%rdx
mov    %rax,%rcx
sub    %rdx,%rcx
add    %rdi,%rcx
sar    $0xb,%rcx
mov    %ecx,0x80(%rsi)
lea    (%rdi,%rdx,1),%rcx
sub    %rcx,%rax
sar    $0xb,%rax
mov    %eax,0xa0(%rsi)
mov    -0x70(%rbp),%rax
lea    0x2(%rax),%rdi
mov    -0x68(%rbp),%rax
lea    0x2(%rax),%r9
add    $0x4,%rsi
mov    -0xc8(%rbp),%rax
lea    0x1(%rax),%ecx
cmp    $0x7,%ecx
jle    3092f <jpeg_idct_10x10+0x5f>
mov    -0x88(%rbp),%rax
mov    %eax,%r10d
mov    -0x98(%rbp),%r15
lea    -0x208(%rbp),%rdx
xor    %ecx,%ecx
mov    -0x90(%rbp),%rsi
jmpq   310c8 <jpeg_idct_10x10+0x7f8>
movslq 0xc(%rdx),%r11
mov    %r11,-0x50(%rbp)
movslq 0x1c(%rdx),%rdi
mov    %rdi,-0x48(%rbp)
mov    %r11,%r13
sub    %rdi,%r13
lea    0x0(%r13,%r13,2),%r12
mov    %r12,%rax
shl    $0x3,%rax
lea    (%rax,%r13,4),%rax
lea    0x0(%r13,%rax,1),%rbx
lea    0x0(%r13,%r13,4),%rax
shl    $0x9,%rax
sub    %rbx,%rax
movslq 0x14(%rdx),%r8
mov    %r8,-0x58(%rbp)
shl    $0xd,%r8
lea    (%rax,%r8,1),%r9
mov    %r9,-0x20(%rbp)
lea    (%rdi,%r11,1),%rax
mov    %rax,-0x60(%rbp)
lea    (%rax,%rax,2),%rdi
lea    (%rax,%rdi,8),%rdi
shl    $0x4,%rdi
add    %rax,%rdi
mov    %rdi,-0x28(%rbp)
shl    $0xd,%rax
mov    %rax,-0x30(%rbp)
sub    %rdi,%rax
movslq 0x4(%rdx),%rdi
mov    %rdi,-0x68(%rbp)
imul   $0x2cb3,%rdi,%rdi
add    %rdi,%rax
lea    (%r9,%rax,1),%rdi
movslq 0x8(%rdx),%r11
movslq 0x18(%rdx),%rax
mov    %rax,-0x78(%rbp)
lea    (%r11,%rax,1),%r9
lea    (%r9,%r9,4),%rax
shl    $0x4,%rax
lea    (%rax,%r9,4),%rax
add    %r9,%rax
shl    $0x4,%rax
lea    (%rax,%r9,2),%rax
lea    (%rax,%rax,4),%r9
mov    %r9,-0x70(%rbp)
mov    %r11,%rax
shl    $0x8,%rax
lea    (%rax,%r11,8),%rax
sub    %r11,%rax
shl    $0x4,%rax
add    %r11,%rax
add    %rax,%r9
mov    %r9,-0x40(%rbp)
movslq 0x10(%rdx),%r14
lea    (%r14,%r14,8),%rax
shl    $0x5,%rax
mov    %r14,%r11
shl    $0x2,%r11
mov    %r11,-0x88(%rbp)
add    %r11,%rax
add    %r14,%rax
shl    $0x5,%rax
lea    (%r14,%r14,2),%r11
sub    %r11,%rax
mov    %rdx,-0x98(%rbp)
mov    %rax,-0x38(%rbp)
movslq (%rdx),%rdx
shl    $0xd,%rdx
mov    %rdx,-0x80(%rbp)
add    %rax,%rdx
lea    (%r9,%rdx,1),%rax
lea    0x20000(%rdi,%rax,1),%rax
sar    $0x12,%rax
and    $0x3ff,%eax
movslq %eax,%rax
movzbl 0x80(%r15,%rax,1),%eax
mov    %rcx,-0xc8(%rbp)
movslq %ecx,%rcx
mov    (%rsi,%rcx,8),%rsi
mov    %al,(%r10,%rsi,1)
lea    0x20000(%r9,%rdx,1),%rax
sub    %rdi,%rax
sar    $0x12,%rax
and    $0x3ff,%eax
movslq %eax,%rax
movzbl 0x80(%r15,%rax,1),%eax
mov    %al,0x9(%r10,%rsi,1)
lea    0x0(%r13,%r12,4),%rdi
shl    $0x9,%rdi
lea    (%rbx,%r8,1),%rax
mov    %rdi,%rcx
sub    %rax,%rcx
mov    -0x60(%rbp),%r9
lea    (%r9,%r9,8),%rax
shl    $0x5,%rax
lea    (%rax,%r9,8),%rax
lea    (%rax,%r9,4),%rax
add    %r9,%rax
shl    $0x4,%rax
sub    %rax,%r9
mov    -0x68(%rbp),%r13
lea    0x0(%r13,%r13,4),%rax
shl    $0x7,%rax
lea    (%rax,%r13,4),%rax
add    %r13,%rax
shl    $0x4,%rax
lea    (%rax,%r13,2),%rax
add    %r13,%rax
add    %r9,%rax
lea    (%rax,%rcx,1),%rdx
mov    -0x78(%rbp),%r12
mov    %r12,%rcx
shl    $0x5,%rcx
mov    %r12,%rax
shl    $0x9,%rax
add    %rcx,%rax
lea    (%rax,%r12,8),%rax
lea    (%rax,%r12,4),%rax
add    %r12,%rax
shl    $0x5,%rax
lea    (%rax,%r12,4),%rcx
mov    %rcx,-0x78(%rbp)
mov    -0x70(%rbp),%rax
sub    %rcx,%rax
lea    (%r14,%r11,2),%rcx
shl    $0x9,%rcx
mov    -0x88(%rbp),%r11
neg    %rcx
add    %r11,%rcx
mov    -0x80(%rbp),%r12
lea    0x20000(%r12,%rcx,1),%rcx
mov    %rcx,-0x80(%rbp)
add    %rcx,%rax
lea    (%rdx,%rax,1),%rcx
sar    $0x12,%rcx
and    $0x3ff,%ecx
movslq %ecx,%rcx
movzbl 0x80(%r15,%rcx,1),%ecx
mov    %cl,0x1(%r10,%rsi,1)
sub    %rdx,%rax
sar    $0x12,%rax
and    $0x3ff,%eax
movslq %eax,%rax
movzbl 0x80(%r15,%rax,1),%eax
mov    %al,0x8(%r10,%rsi,1)
lea    (%r14,%r11,1),%rax
lea    (%r14,%rax,2),%rax
shl    $0x4,%rax
add    %r11,%rax
add    %r14,%rax
shl    $0x6,%rax
lea    (%rax,%r14,2),%rax
lea    0x20000(%r12),%rdx
sub    %rax,%rdx
mov    -0x50(%rbp),%rcx
mov    -0x48(%rbp),%rax
sub    %rcx,%rax
lea    0x0(%r13,%rax,1),%r11
mov    -0x58(%rbp),%rax
mov    %r11,%rcx
sub    %rax,%rcx
shl    $0xd,%rcx
add    %rdx,%rcx
sar    $0x12,%rcx
and    $0x3ff,%ecx
movslq %ecx,%rcx
movzbl 0x80(%r15,%rcx,1),%ecx
mov    %cl,0x2(%r10,%rsi,1)
sub    %r11,%rax
shl    $0xd,%rax
add    %rdx,%rax
sar    $0x12,%rax
and    $0x3ff,%eax
movslq %eax,%rax
movzbl 0x80(%r15,%rax,1),%eax
mov    %al,0x7(%r10,%rsi,1)
sub    %rdi,%rbx
lea    (%r8,%rbx,1),%rdx
mov    %r13,%rcx
shl    $0x4,%rcx
mov    %r13,%rax
shl    $0xa,%rax
add    %rcx,%rax
lea    (%rax,%r13,8),%rax
lea    (%rax,%r13,4),%rax
lea    (%rax,%rax,4),%rax
add    %r9,%rax
add    %rax,%rdx
mov    -0x78(%rbp),%rax
mov    -0x70(%rbp),%rcx
sub    %rcx,%rax
mov    -0x80(%rbp),%rcx
add    %rcx,%rax
lea    (%rdx,%rax,1),%rcx
sar    $0x12,%rcx
and    $0x3ff,%ecx
movslq %ecx,%rcx
movzbl 0x80(%r15,%rcx,1),%ecx
mov    %cl,0x3(%r10,%rsi,1)
sub    %rdx,%rax
sar    $0x12,%rax
and    $0x3ff,%eax
movslq %eax,%rax
movzbl 0x80(%r15,%rax,1),%eax
mov    %al,0x6(%r10,%rsi,1)
mov    -0x28(%rbp),%rax
mov    -0x30(%rbp),%rcx
sub    %rcx,%rax
lea    0x0(%r13,%r13,2),%rcx
lea    0x0(%r13,%rcx,2),%rcx
shl    $0x4,%rcx
add    %r13,%rcx
shl    $0x4,%rcx
lea    (%rcx,%r13,4),%rcx
add    %rcx,%rax
mov    -0x20(%rbp),%rcx
lea    (%rcx,%rax,1),%rdx
mov    -0x38(%rbp),%rax
lea    0x20000(%rax,%r12,1),%rax
mov    -0x40(%rbp),%rdi
mov    %rax,%rcx
sub    %rdi,%rcx
add    %rdx,%rcx
sar    $0x12,%rcx
and    $0x3ff,%ecx
movslq %ecx,%rcx
movzbl 0x80(%r15,%rcx,1),%ecx
mov    %cl,0x4(%r10,%rsi,1)
lea    (%rdx,%rdi,1),%rcx
sub    %rcx,%rax
sar    $0x12,%rax
and    $0x3ff,%eax
movslq %eax,%rax
movzbl 0x80(%rax,%r15,1),%eax
mov    %al,0x5(%r10,%rsi,1)
mov    -0xc8(%rbp),%rax
lea    0x1(%rax),%ecx
mov    -0x98(%rbp),%rax
lea    0x20(%rax),%rdx
mov    -0x90(%rbp),%rsi
cmp    $0x9,%ecx
jle    30ccf <jpeg_idct_10x10+0x3ff>
mov    -0xc0(%rbp),%r15
mov    -0xb8(%rbp),%r14
mov    -0xb0(%rbp),%r13
mov    -0xa8(%rbp),%r12
mov    -0xa0(%rbp),%rbx
leaveq 
retq   
nopw   %cs:0x0(%rax,%rax,1)

0000000000031100 <jpeg_idct_11x11>:
push   %rbp
mov    %rsp,%rbp
sub    $0x210,%rsp
mov    %r8,-0x68(%rbp)
mov    %rcx,-0x70(%rbp)
mov    %rbx,-0x80(%rbp)
mov    %r12,-0x88(%rbp)
mov    %r13,-0x90(%rbp)
mov    %r14,-0x98(%rbp)
mov    %r15,-0xa0(%rbp)
mov    0x1a8(%rdi),%rax
mov    %rax,-0x78(%rbp)
mov    0x58(%rsi),%rcx
xor    %edi,%edi
lea    -0x208(%rbp),%rsi
jmpq   3160f <jpeg_idct_11x11+0x50f>
movswq 0x30(%rcx),%rax
movswq 0x30(%rdx),%rbx
imul   %ebx,%eax
movslq %eax,%r14
mov    %r14,-0x30(%rbp)
movswq 0x10(%rcx),%rax
movswq 0x10(%rdx),%rbx
imul   %ebx,%eax
movslq %eax,%r11
lea    (%r14,%r11,1),%r10
movswq 0x50(%rcx),%rax
movswq 0x50(%rdx),%rbx
imul   %ebx,%eax
movslq %eax,%r9
lea    (%r9,%r10,1),%r8
movswq 0x70(%rcx),%rax
movswq 0x70(%rdx),%rbx
imul   %ebx,%eax
movslq %eax,%rbx
mov    %rbx,-0x38(%rbp)
lea    (%rbx,%r8,1),%rax
mov    %rax,%r8
shl    $0x6,%r8
shl    $0xa,%rax
add    %r8,%rax
lea    (%rax,%rax,2),%r15
lea    (%rbx,%r11,1),%rax
lea    (%rax,%rax,4),%rax
mov    %rax,%rbx
shl    $0x5,%rbx
lea    (%rbx,%rax,8),%rax
lea    (%rax,%rax,2),%rax
lea    (%rax,%rax,4),%rax
lea    (%r15,%rax,1),%r8
mov    %r8,-0x18(%rbp)
lea    (%r9,%r11,1),%rbx
lea    (%rbx,%rbx,4),%rax
lea    (%rbx,%rax,4),%rax
shl    $0x4,%rax
lea    (%rax,%rbx,8),%rax
sub    %rbx,%rax
shl    $0x4,%rax
lea    (%rax,%rbx,4),%rbx
mov    %rbx,-0x8(%rbp)
lea    (%r10,%r10,2),%rax
lea    (%r10,%rax,2),%rax
shl    $0x5,%rax
lea    (%rax,%r10,2),%rax
add    %r10,%rax
shl    $0x5,%rax
lea    (%rax,%r10,8),%rax
lea    (%rax,%r10,2),%rax
mov    %rax,-0x10(%rbp)
add    %rbx,%rax
lea    (%r8,%rax,1),%r12
mov    %r11,%rax
shl    $0x6,%rax
mov    %rdi,-0xa8(%rbp)
lea    (%r11,%r11,4),%rdi
sub    %rdi,%rax
shl    $0x7,%rax
lea    (%rax,%r11,8),%rax
lea    (%rax,%r11,2),%r8
mov    %r12,%r13
sub    %r8,%r13
movswq 0x60(%rcx),%rax
movswq 0x60(%rdx),%rdi
imul   %edi,%eax
movslq %eax,%r11
movswq 0x20(%rcx),%rax
movswq 0x20(%rdx),%rdi
imul   %edi,%eax
movslq %eax,%rax
mov    %rax,-0x28(%rbp)
lea    (%r11,%rax,1),%rdi
mov    %rdi,-0x20(%rbp)
movswq 0x40(%rcx),%rax
movswq 0x40(%rdx),%rbx
imul   %ebx,%eax
movslq %eax,%rbx
sub    %rbx,%rdi
mov    %rdi,-0x48(%rbp)
lea    (%rdi,%rdi,4),%r10
lea    (%rdi,%r10,2),%rax
shl    $0x5,%rax
sub    %r10,%rax
shl    $0x5,%rax
lea    (%rax,%rdi,8),%rax
lea    (%rax,%rdi,4),%rdi
movswq (%rcx),%rax
mov    %rdx,-0x50(%rbp)
movswq (%rdx),%rdx
imul   %edx,%eax
movslq %eax,%rax
shl    $0xd,%rax
mov    %rax,-0x40(%rbp)
lea    (%rax,%rdi,1),%r10
mov    %r11,%rdx
shl    $0xa,%rdx
mov    %rcx,-0x60(%rbp)
mov    %r11,%rax
shl    $0xe,%rax
add    %rdx,%rax
lea    (%r11,%r11,4),%rcx
lea    (%rcx,%rcx,4),%rcx
lea    (%rcx,%rcx,2),%rcx
sub    %rcx,%rax
lea    (%r10,%rax,1),%rdx
mov    %rbx,%rcx
sub    %r11,%rcx
lea    (%rcx,%rcx,4),%rax
shl    $0x5,%rax
lea    (%rax,%rcx,2),%rax
add    %rcx,%rax
shl    $0x7,%rax
add    %rcx,%rcx
sub    %rcx,%rax
add    %rax,%rdx
lea    0x400(%rdx,%r13,1),%rcx
sar    $0xb,%rcx
mov    %ecx,(%rsi)
sub    %r12,%r8
lea    0x400(%rdx,%r8,1),%rcx
sar    $0xb,%rcx
mov    %ecx,0x140(%rsi)
lea    (%r9,%r14,1),%rdx
lea    (%rdx,%rdx,8),%r8
mov    %r8,%rcx
shl    $0x4,%rcx
lea    (%rcx,%rdx,4),%rcx
add    %rdx,%rcx
shl    $0x6,%rcx
mov    %r8,%rdx
sub    %rcx,%rdx
lea    (%r15,%rdx,1),%r12
mov    %r14,%rdx
shl    $0x5,%rdx
mov    %r14,%rdi
shl    $0xa,%rdi
add    %rdi,%rdx
lea    (%rdx,%r14,4),%rdx
add    %r14,%rdx
shl    $0x4,%rdx
lea    (%rdx,%r14,8),%rdx
lea    (%r12,%rdx,1),%rdi
mov    -0x10(%rbp),%rdx
add    %rdx,%rdi
mov    -0x38(%rbp),%r13
lea    0x0(%r13,%r14,1),%rdx
imul   $0xffffffffffffc675,%rdx,%rdx
mov    %rdx,-0x10(%rbp)
lea    (%rdx,%rdi,1),%r12
mov    -0x28(%rbp),%rdi
mov    %rbx,%r14
sub    %rdi,%r14
lea    (%r14,%r14,2),%rdx
shl    $0x4,%rdx
lea    (%rdx,%r14,8),%rdx
sub    %rbx,%rdi
add    %rdi,%rdx
shl    $0x6,%rdx
lea    (%rdx,%r14,8),%rdx
add    %rdx,%r14
add    %r14,%rax
lea    0x400(%r10,%rax,1),%rax
lea    (%rbx,%rbx,2),%rdx
lea    (%rbx,%rdx,2),%rdx
shl    $0x5,%rdx
lea    (%rdx,%rbx,8),%rdx
add    %rbx,%rdx
shl    $0x6,%rdx
lea    (%rdx,%rbx,8),%rdx
lea    (%rdx,%rbx,4),%rdi
mov    %rax,%rdx
sub    %rdi,%rdx
add    %r12,%rdx
sar    $0xb,%rdx
mov    %edx,0x20(%rsi)
lea    (%r12,%rdi,1),%rdx
sub    %rdx,%rax
sar    $0xb,%rax
mov    %eax,0x120(%rsi)
sub    %r8,%rcx
lea    (%r9,%r9,8),%rax
lea    (%r9,%rax,2),%rax
shl    $0x4,%rax
add    %r9,%rax
shl    $0x5,%rax
lea    (%rax,%r9,4),%rax
lea    (%rax,%r9,2),%rax
add    %rcx,%rax
neg    %rax
add    %r15,%rax
mov    -0x8(%rbp),%rcx
lea    (%rax,%rcx,1),%rdx
mov    -0x20(%rbp),%rax
lea    (%rax,%rax,8),%rcx
lea    (%rax,%rcx,4),%rcx
shl    $0x8,%rcx
lea    (%rax,%rax,4),%rax
sub    %rcx,%rax
lea    (%r10,%rax,1),%rdi
lea    (%r11,%r11,2),%r8
mov    %r8,%rax
shl    $0x5,%rax
lea    (%rax,%r11,4),%rax
add    %r11,%rax
shl    $0x6,%rax
mov    %r8,%rcx
sub    %rax,%rcx
lea    0x400(%rdi,%rcx,1),%rcx
add    %rdx,%rcx
sar    $0xb,%rcx
mov    %ecx,0x40(%rsi)
lea    0x400(%rdi),%rcx
sub    %r8,%rax
add    %rdx,%rax
sub    %rax,%rcx
sar    $0xb,%rcx
mov    %ecx,0x100(%rsi)
mov    %r13,%rax
shl    $0x8,%rax
lea    (%rax,%r13,8),%rax
lea    (%rax,%r13,4),%rax
add    %r13,%rax
shl    $0x6,%rax
lea    (%rax,%r13,8),%rax
sub    %r13,%rax
mov    -0x10(%rbp),%rcx
add    %rax,%rcx
mov    -0x18(%rbp),%rax
lea    (%rcx,%rax,1),%r8
mov    -0x28(%rbp),%rdx
mov    %rdx,%rax
shl    $0x4,%rax
add    %rdx,%rax
lea    (%rdx,%rdx,2),%rcx
shl    $0x5,%rcx
add    %rdx,%rcx
shl    $0x7,%rcx
sub    %rcx,%rax
lea    0x400(%r10,%rax,1),%rax
add    %r14,%rax
lea    (%r8,%rax,1),%rcx
sar    $0xb,%rcx
mov    %ecx,0x60(%rsi)
sub    %r8,%rax
sar    $0xb,%rax
mov    %eax,0xe0(%rsi)
lea    0x0(%r13,%r13,4),%rax
shl    $0x2,%rax
lea    (%rax,%r13,2),%rcx
lea    0x0(%r13,%r13,2),%rax
mov    %rax,%r8
shl    $0x9,%r8
shl    $0xc,%rax
add    %r8,%rax
sub    %rax,%rcx
mov    %r9,%rax
shl    $0xd,%rax
lea    (%rax,%r9,8),%rax
lea    (%rax,%r9,2),%rax
lea    (%r9,%rax,1),%r8
mov    -0x30(%rbp),%rax
imul   $0xffffffffffffd10d,%rax,%rax
add    %r8,%rax
add    %rcx,%rax
lea    (%r15,%rax,1),%r8
lea    (%rbx,%rbx,8),%rax
shl    $0x4,%rax
lea    (%rax,%rbx,8),%rax
lea    (%rax,%rax,2),%rax
neg    %rax
add    %rbx,%rax
shl    $0xe,%rbx
add    %rbx,%rax
lea    (%rdx,%rdx,4),%rcx
shl    $0x4,%rcx
lea    (%rcx,%rdx,8),%rcx
add    %rdx,%rcx
shl    $0x7,%rcx
lea    (%rcx,%rdx,2),%rcx
add    %rdx,%rcx
sub    %rcx,%rax
lea    (%rdi,%rax,1),%rcx
lea    0x400(%r8,%rcx,1),%rax
sar    $0xb,%rax
mov    %eax,0x80(%rsi)
lea    0x400(%rcx),%rax
sub    %r8,%rax
sar    $0xb,%rax
mov    %eax,0xc0(%rsi)
mov    -0x48(%rbp),%rcx
lea    (%rcx,%rcx,8),%rax
shl    $0x8,%rax
lea    (%rax,%rcx,8),%rax
lea    (%rax,%rcx,4),%rax
add    %rcx,%rax
lea    (%rax,%rax,4),%rcx
mov    -0x40(%rbp),%rax
add    $0x400,%rax
sub    %rcx,%rax
sar    $0xb,%rax
mov    %eax,0xa0(%rsi)
mov    -0x60(%rbp),%rax
lea    0x2(%rax),%rcx
mov    -0x50(%rbp),%rax
lea    0x2(%rax),%rdx
add    $0x4,%rsi
mov    -0xa8(%rbp),%rax
lea    0x1(%rax),%edi
cmp    $0x7,%edi
jle    31150 <jpeg_idct_11x11+0x50>
mov    -0x68(%rbp),%rax
mov    %eax,%r9d
mov    -0x78(%rbp),%r15
lea    -0x208(%rbp),%rcx
xor    %esi,%esi
mov    -0x70(%rbp),%rdi
jmpq   31b77 <jpeg_idct_11x11+0xa77>
movslq 0xc(%rcx),%rax
mov    %rax,-0x50(%rbp)
movslq 0x4(%rcx),%r10
lea    (%rax,%r10,1),%r8
movslq 0x14(%rcx),%r13
lea    0x0(%r13,%r8,1),%rax
movslq 0x1c(%rcx),%r11
mov    %r11,-0x48(%rbp)
add    %r11,%rax
mov    %rax,%rdx
shl    $0x6,%rdx
shl    $0xa,%rax
add    %rdx,%rax
lea    (%rax,%rax,2),%rbx
mov    %rbx,-0xa8(%rbp)
lea    (%r11,%r10,1),%rax
lea    (%rax,%rax,4),%rdx
mov    %rdx,%rax
shl    $0x5,%rax
lea    (%rax,%rdx,8),%rax
lea    (%rax,%rax,2),%rax
lea    (%rax,%rax,4),%rax
add    %rax,%rbx
mov    %rbx,-0x28(%rbp)
lea    0x0(%r13,%r10,1),%rdx
lea    (%rdx,%rdx,4),%rax
lea    (%rdx,%rax,4),%rax
shl    $0x4,%rax
lea    (%rax,%rdx,8),%rax
sub    %rdx,%rax
shl    $0x4,%rax
lea    (%rax,%rdx,4),%rdx
mov    %rdx,-0x30(%rbp)
lea    (%r8,%r8,2),%rax
lea    (%r8,%rax,2),%rax
shl    $0x5,%rax
lea    (%rax,%r8,2),%rax
add    %r8,%rax
shl    $0x5,%rax
lea    (%rax,%r8,8),%rax
lea    (%rax,%r8,2),%rax
mov    %rax,-0x58(%rbp)
add    %rdx,%rax
lea    (%rbx,%rax,1),%r12
mov    %r10,%rax
shl    $0x6,%rax
lea    (%r10,%r10,4),%rdx
sub    %rdx,%rax
shl    $0x7,%rax
lea    (%rax,%r10,8),%rax
lea    (%rax,%r10,2),%r8
mov    %r12,%r10
sub    %r8,%r10
movslq 0x18(%rcx),%r11
mov    %r11,-0x40(%rbp)
movslq 0x10(%rcx),%r14
mov    %r14,-0x68(%rbp)
mov    %r14,%rbx
sub    %r11,%rbx
lea    (%rbx,%rbx,4),%rax
shl    $0x5,%rax
lea    (%rax,%rbx,2),%rax
lea    (%rbx,%rax,1),%rdx
shl    $0x7,%rdx
lea    (%rbx,%rbx,1),%rax
sub    %rax,%rdx
movslq 0x8(%rcx),%rax
mov    %rax,-0x60(%rbp)
lea    (%r11,%rax,1),%rbx
mov    %rbx,-0x38(%rbp)
sub    %r14,%rbx
mov    %rbx,-0x20(%rbp)
lea    (%rbx,%rbx,4),%r14
lea    (%rbx,%r14,2),%rax
shl    $0x5,%rax
sub    %r14,%rax
shl    $0x5,%rax
lea    (%rax,%rbx,8),%rax
lea    (%rax,%rbx,4),%rbx
movslq (%rcx),%rax
shl    $0xd,%rax
mov    %rax,-0x18(%rbp)
lea    (%rax,%rbx,1),%r14
mov    %rcx,-0x78(%rbp)
mov    %r11,%rcx
shl    $0xa,%rcx
mov    %r11,%rax
shl    $0xe,%rax
add    %rcx,%rax
lea    (%r11,%r11,4),%rcx
lea    (%rcx,%rcx,4),%rcx
lea    (%rcx,%rcx,2),%rcx
sub    %rcx,%rax
add    %r14,%rax
lea    (%rax,%rdx,1),%r11
lea    0x20000(%r10,%r11,1),%rax
sar    $0x12,%rax
and    $0x3ff,%eax
movslq %eax,%rax
movzbl 0x80(%r15,%rax,1),%ecx
movslq %esi,%rax
mov    (%rdi,%rax,8),%rbx
mov    %cl,(%r9,%rbx,1)
sub    %r12,%r8
lea    0x20000(%r8,%r11,1),%rax
sar    $0x12,%rax
and    $0x3ff,%eax
movslq %eax,%rax
movzbl 0x80(%r15,%rax,1),%eax
mov    %al,0xa(%r9,%rbx,1)
mov    -0x50(%rbp),%r8
lea    0x0(%r13,%r8,1),%rcx
lea    (%rcx,%rcx,8),%r10
mov    %r10,%rax
shl    $0x4,%rax
lea    (%rax,%rcx,4),%rax
add    %rax,%rcx
shl    $0x6,%rcx
mov    %r10,%rax
sub    %rcx,%rax
mov    -0xa8(%rbp),%r12
lea    (%r12,%rax,1),%rdi
mov    %rsi,-0xa8(%rbp)
mov    %r8,%rsi
shl    $0x5,%rsi
mov    %r8,%rax
shl    $0xa,%rax
add    %rsi,%rax
lea    (%rax,%r8,4),%rax
add    %r8,%rax
shl    $0x4,%rax
lea    (%rax,%r8,8),%rax
add    %rdi,%rax
mov    -0x58(%rbp),%rsi
add    %rax,%rsi
mov    -0x48(%rbp),%rax
add    %r8,%rax
imul   $0xffffffffffffc675,%rax,%rax
mov    %rax,-0x58(%rbp)
lea    (%rax,%rsi,1),%r8
mov    -0x68(%rbp),%rsi
mov    -0x60(%rbp),%rdi
mov    %rsi,%r11
sub    %rdi,%r11
lea    (%r11,%r11,2),%rax
shl    $0x4,%rax
lea    (%rax,%r11,8),%rax
sub    %rsi,%rdi
add    %rdi,%rax
shl    $0x6,%rax
lea    (%rax,%r11,8),%rax
add    %rax,%r11
lea    (%r11,%rdx,1),%rax
lea    0x20000(%rax,%r14,1),%rax
lea    (%rsi,%rsi,2),%rdx
lea    (%rsi,%rdx,2),%rdx
shl    $0x5,%rdx
lea    (%rdx,%rsi,8),%rdx
add    %rsi,%rdx
shl    $0x6,%rdx
lea    (%rdx,%rsi,8),%rdx
lea    (%rdx,%rsi,4),%rdi
mov    %rax,%rdx
sub    %rdi,%rdx
add    %r8,%rdx
sar    $0x12,%rdx
and    $0x3ff,%edx
movslq %edx,%rdx
movzbl 0x80(%r15,%rdx,1),%edx
mov    %dl,0x1(%r9,%rbx,1)
lea    (%r8,%rdi,1),%rdx
sub    %rdx,%rax
sar    $0x12,%rax
and    $0x3ff,%eax
movslq %eax,%rax
movzbl 0x80(%r15,%rax,1),%eax
mov    %al,0x9(%r9,%rbx,1)
sub    %r10,%rcx
lea    0x0(%r13,%r13,8),%rax
lea    0x0(%r13,%rax,2),%rax
shl    $0x4,%rax
add    %r13,%rax
shl    $0x5,%rax
lea    (%rax,%r13,4),%rax
lea    (%rax,%r13,2),%rax
add    %rcx,%rax
neg    %rax
add    %r12,%rax
mov    -0x30(%rbp),%rcx
lea    (%rax,%rcx,1),%rdi
mov    -0x38(%rbp),%rdx
lea    (%rdx,%rdx,8),%rax
lea    (%rdx,%rax,4),%rcx
shl    $0x8,%rcx
lea    (%rdx,%rdx,4),%rax
sub    %rcx,%rax
lea    (%r14,%rax,1),%r8
mov    -0x40(%rbp),%rcx
lea    (%rcx,%rcx,2),%rdx
mov    %rdx,%rax
shl    $0x5,%rax
lea    (%rax,%rcx,4),%rax
add    %rax,%rcx
shl    $0x6,%rcx
mov    %rdx,%rax
sub    %rcx,%rax
lea    0x20000(%r8,%rax,1),%rax
add    %rdi,%rax
sar    $0x12,%rax
and    $0x3ff,%eax
movslq %eax,%rax
movzbl 0x80(%r15,%rax,1),%eax
mov    %al,0x2(%r9,%rbx,1)
lea    0x20000(%r8),%rax
sub    %rdx,%rcx
add    %rdi,%rcx
sub    %rcx,%rax
sar    $0x12,%rax
and    $0x3ff,%eax
movslq %eax,%rax
movzbl 0x80(%r15,%rax,1),%eax
mov    %al,0x8(%r9,%rbx,1)
mov    -0x60(%rbp),%rdi
mov    %rdi,%rax
shl    $0x4,%rax
add    %rdi,%rax
lea    (%rdi,%rdi,2),%rcx
shl    $0x5,%rcx
add    %rdi,%rcx
shl    $0x7,%rcx
sub    %rcx,%rax
lea    0x20000(%r14,%rax,1),%rax
add    %r11,%rax
mov    -0x48(%rbp),%r10
mov    %r10,%rcx
shl    $0x8,%rcx
lea    (%rcx,%r10,8),%rcx
lea    (%rcx,%r10,4),%rcx
add    %r10,%rcx
shl    $0x6,%rcx
lea    (%rcx,%r10,8),%rcx
sub    %r10,%rcx
mov    -0x58(%rbp),%rdx
add    %rdx,%rcx
mov    -0x28(%rbp),%rdx
add    %rcx,%rdx
lea    (%rdx,%rax,1),%rcx
sar    $0x12,%rcx
and    $0x3ff,%ecx
movslq %ecx,%rcx
movzbl 0x80(%r15,%rcx,1),%ecx
mov    %cl,0x3(%r9,%rbx,1)
sub    %rdx,%rax
sar    $0x12,%rax
and    $0x3ff,%eax
movslq %eax,%rax
movzbl 0x80(%r15,%rax,1),%eax
mov    %al,0x7(%r9,%rbx,1)
lea    (%r10,%r10,4),%rax
shl    $0x2,%rax
lea    (%rax,%r10,2),%rcx
lea    (%r10,%r10,2),%rax
mov    %rax,%rdx
shl    $0x9,%rdx
shl    $0xc,%rax
add    %rdx,%rax
sub    %rax,%rcx
mov    %r13,%rax
shl    $0xd,%rax
lea    (%rax,%r13,8),%rax
lea    (%rax,%r13,2),%rax
lea    0x0(%r13,%rax,1),%rdx
mov    -0x50(%rbp),%rax
imul   $0xffffffffffffd10d,%rax,%rax
add    %rdx,%rax
add    %rcx,%rax
lea    (%r12,%rax,1),%rdx
lea    (%rsi,%rsi,8),%rax
shl    $0x4,%rax
lea    (%rax,%rsi,8),%rax
lea    (%rax,%rax,2),%rax
neg    %rax
add    %rsi,%rax
shl    $0xe,%rsi
lea    (%rsi,%rax,1),%rcx
lea    (%rdi,%rdi,4),%rax
shl    $0x4,%rax
lea    (%rax,%rdi,8),%rax
add    %rdi,%rax
shl    $0x7,%rax
lea    (%rax,%rdi,2),%rax
add    %rdi,%rax
sub    %rax,%rcx
lea    (%rcx,%r8,1),%rax
lea    0x20000(%rdx,%rax,1),%rax
sar    $0x12,%rax
and    $0x3ff,%eax
movslq %eax,%rax
movzbl 0x80(%r15,%rax,1),%eax
mov    %al,0x4(%r9,%rbx,1)
lea    0x20000(%rcx,%r8,1),%rax
sub    %rdx,%rax
sar    $0x12,%rax
and    $0x3ff,%eax
movslq %eax,%rax
movzbl 0x80(%r15,%rax,1),%eax
mov    %al,0x6(%r9,%rbx,1)
mov    -0x20(%rbp),%rcx
lea    (%rcx,%rcx,8),%rax
shl    $0x8,%rax
lea    (%rax,%rcx,8),%rax
lea    (%rax,%rcx,4),%rax
add    %rcx,%rax
lea    (%rax,%rax,4),%rcx
mov    -0x18(%rbp),%rax
add    $0x20000,%rax
sub    %rcx,%rax
sar    $0x12,%rax
and    $0x3ff,%eax
movslq %eax,%rax
movzbl 0x80(%rax,%r15,1),%eax
mov    %al,0x5(%r9,%rbx,1)
mov    -0xa8(%rbp),%rax
lea    0x1(%rax),%esi
mov    -0x78(%rbp),%rax
lea    0x20(%rax),%rcx
mov    -0x70(%rbp),%rdi
cmp    $0xa,%esi
jle    31635 <jpeg_idct_11x11+0x535>
mov    -0xa0(%rbp),%r15
mov    -0x98(%rbp),%r14
mov    -0x90(%rbp),%r13
mov    -0x88(%rbp),%r12
mov    -0x80(%rbp),%rbx
leaveq 
retq   
data16 nopw %cs:0x0(%rax,%rax,1)
nopl   (%rax)

0000000000031bb0 <jpeg_idct_12x12>:
push   %rbp
mov    %rsp,%rbp
sub    $0x230,%rsp
mov    %r8,-0x70(%rbp)
mov    %rcx,-0x78(%rbp)
mov    %rbx,-0x88(%rbp)
mov    %r12,-0x90(%rbp)
mov    %r13,-0x98(%rbp)
mov    %r14,-0xa0(%rbp)
mov    %r15,-0xa8(%rbp)
mov    0x1a8(%rdi),%rax
mov    %rax,-0x80(%rbp)
mov    0x58(%rsi),%rcx
xor    %ebx,%ebx
lea    -0x230(%rbp),%rdi
jmpq   31ffb <jpeg_idct_12x12+0x44b>
movswq 0x10(%rcx),%rax
movswq 0x10(%rdx),%rsi
imul   %esi,%eax
movslq %eax,%r10
mov    %r10,-0x50(%rbp)
movswq 0x50(%rcx),%rax
movswq 0x50(%rdx),%rsi
imul   %esi,%eax
movslq %eax,%r11
lea    (%r10,%r11,1),%r9
movswq 0x70(%rcx),%rax
movswq 0x70(%rdx),%rsi
imul   %esi,%eax
movslq %eax,%rsi
lea    (%rsi,%r9,1),%r8
lea    (%r8,%r8,2),%rax
shl    $0x4,%rax
add    %r8,%rax
mov    %rax,%r12
shl    $0x4,%r12
shl    $0x5,%rax
add    %r12,%rax
sub    %r8,%rax
lea    (%rax,%rax,2),%r12
mov    %r12,-0x48(%rbp)
mov    %r9,%rax
shl    $0x6,%rax
lea    (%rax,%r9,2),%rax
add    %r9,%rax
shl    $0x5,%rax
lea    (%r9,%r9,4),%r8
sub    %r8,%rax
lea    (%r12,%rax,1),%r9
mov    %r9,-0x8(%rbp)
movswq 0x30(%rcx),%rax
movswq 0x30(%rdx),%r8
imul   %r8d,%eax
movslq %eax,%r14
lea    (%r14,%r14,4),%rax
lea    (%r14,%rax,4),%rax
shl    $0x9,%rax
mov    %rax,-0x28(%rbp)
lea    (%r14,%r14,2),%r8
shl    $0x4,%r8
add    %r14,%r8
mov    %r8,-0x20(%rbp)
sub    %r8,%rax
lea    (%r9,%rax,1),%r8
lea    (%r10,%r10,8),%r9
mov    %rbx,-0xb0(%rbp)
mov    %r9,%rax
shl    $0x8,%rax
sub    %r9,%rax
lea    (%r8,%rax,1),%r12
movswq 0x20(%rcx),%rax
movswq 0x20(%rdx),%rbx
imul   %ebx,%eax
movslq %eax,%r15
lea    (%r15,%r15,4),%rax
lea    (%r15,%rax,2),%rax
shl    $0xa,%rax
mov    %rax,-0x18(%rbp)
lea    (%r15,%r15,1),%rbx
lea    (%r15,%r15,8),%r8
lea    (%rbx,%r8,8),%rbx
mov    %rbx,-0x10(%rbp)
sub    %rbx,%rax
movswq 0x60(%rcx),%rbx
movswq 0x60(%rdx),%r8
imul   %r8d,%ebx
movslq %ebx,%rbx
mov    %rbx,%r8
shl    $0xd,%r8
lea    (%rax,%r8,1),%r13
mov    %r13,-0x40(%rbp)
movswq 0x40(%rcx),%rax
movswq 0x40(%rdx),%r8
imul   %r8d,%eax
movslq %eax,%r8
lea    (%r8,%r8,2),%rax
lea    (%r8,%rax,4),%r9
lea    (%r8,%r8,4),%rax
shl    $0x7,%rax
sub    %r9,%rax
shl    $0x4,%rax
lea    (%r8,%rax,1),%r9
movswq (%rcx),%rax
movswq (%rdx),%r8
imul   %r8d,%eax
movslq %eax,%rax
mov    %rax,-0x30(%rbp)
mov    %rax,%r8
shl    $0xd,%r8
mov    %rdx,-0x60(%rbp)
lea    (%r9,%r8,1),%rdx
mov    %rcx,-0x68(%rbp)
mov    %rdx,-0x38(%rbp)
add    %r13,%rdx
lea    0x400(%r12,%rdx,1),%rcx
sar    $0xb,%rcx
mov    %ecx,(%rdi)
lea    0x400(%rdx),%rcx
sub    %r12,%rcx
sar    $0xb,%rcx
mov    %ecx,0x160(%rdi)
mov    %r14,%r13
sub    %r11,%r13
sub    %rsi,%r10
lea    0x0(%r13,%r10,1),%r12
mov    %r12,%rdx
shl    $0x4,%rdx
mov    %r12,%rcx
shl    $0x8,%rcx
add    %rdx,%rcx
lea    (%rcx,%r12,4),%rcx
add    %r12,%rcx
shl    $0x4,%rcx
add    %rcx,%r12
lea    (%r10,%r10,2),%rcx
shl    $0x4,%rcx
add    %r10,%rcx
shl    $0x7,%rcx
lea    (%r10,%r10,1),%rdx
sub    %rdx,%rcx
lea    (%r12,%rcx,1),%rdx
mov    %r15,%rcx
sub    %rbx,%rcx
add    %rcx,%rax
shl    $0xd,%rax
lea    0x400(%rdx,%rax,1),%rcx
sar    $0xb,%rcx
mov    %ecx,0x20(%rdi)
add    $0x400,%rax
sub    %rdx,%rax
sar    $0xb,%rax
mov    %eax,0x140(%rdi)
mov    %r14,%rax
shl    $0x4,%rax
mov    %r14,%rcx
shl    $0x8,%rcx
add    %rcx,%rax
lea    (%rax,%r14,4),%rax
add    %r14,%rax
shl    $0x4,%rax
lea    (%r14,%rax,1),%rdx
mov    %rdx,-0x58(%rbp)
lea    (%r11,%r11,4),%rax
lea    (%r11,%rax,2),%rcx
lea    (%r11,%r11,2),%rax
shl    $0x8,%rax
sub    %rcx,%rax
shl    $0x4,%rax
add    %rdx,%rax
lea    (%rsi,%r11,1),%rcx
imul   $0xffffffffffffde8b,%rcx,%rcx
mov    %rcx,%rdx
sub    %rax,%rdx
mov    -0x8(%rbp),%rax
lea    (%rax,%rdx,1),%r14
lea    (%rbx,%r15,1),%rdx
shl    $0xd,%rdx
mov    -0x10(%rbp),%r10
lea    (%r10,%rdx,1),%rax
mov    -0x18(%rbp),%r11
neg    %rax
add    %r11,%rax
add    $0x400,%r8
sub    %r9,%r8
add    %r8,%rax
lea    (%r14,%rax,1),%r9
sar    $0xb,%r9
mov    %r9d,0x40(%rdi)
sub    %r14,%rax
sar    $0xb,%rax
mov    %eax,0x120(%rdi)
mov    -0x28(%rbp),%r9
mov    -0x20(%rbp),%rax
sub    %r9,%rax
mov    -0x48(%rbp),%r9
lea    (%r9,%rax,1),%r14
lea    (%rsi,%rsi,2),%rax
shl    $0x6,%rax
lea    (%rax,%rsi,8),%rax
lea    (%rax,%rsi,2),%rax
add    %rsi,%rax
shl    $0x6,%rax
lea    (%rax,%rsi,4),%rax
lea    (%rax,%rsi,2),%rax
add    %r14,%rax
lea    (%rax,%rcx,1),%r14
sub    %r11,%r10
lea    (%rdx,%r10,1),%rax
add    %r8,%rax
lea    (%r14,%rax,1),%rcx
sar    $0xb,%rcx
mov    %ecx,0x60(%rdi)
sub    %r14,%rax
sar    $0xb,%rax
mov    %eax,0x100(%rdi)
mov    %r13,%rcx
shl    $0x2,%rcx
lea    0x0(%r13,%r13,2),%rax
lea    (%rcx,%rax,8),%rax
add    %r13,%rax
shl    $0x4,%rax
lea    (%rax,%r13,8),%rax
add    %r13,%rax
shl    $0x5,%rax
add    %r13,%rax
mov    %r12,%rdx
sub    %rax,%rdx
sub    %r15,%rbx
mov    -0x30(%rbp),%rcx
add    %rbx,%rcx
shl    $0xd,%rcx
lea    0x400(%rdx,%rcx,1),%rdx
sar    $0xb,%rdx
mov    %edx,0x80(%rdi)
sub    %r12,%rax
lea    0x400(%rax,%rcx,1),%rax
sar    $0xb,%rax
mov    %eax,0xe0(%rdi)
mov    -0x50(%rbp),%rcx
mov    %rcx,%rax
shl    $0x6,%rax
lea    (%rax,%rcx,4),%rax
add    %rcx,%rax
shl    $0x4,%rax
lea    (%rax,%rcx,4),%rax
lea    (%rax,%rax,4),%rcx
mov    %rsi,%rax
shl    $0x7,%rax
lea    (%rax,%rsi,8),%rax
lea    (%rax,%rsi,4),%rax
shl    $0xe,%rsi
sub    %rax,%rsi
add    %rsi,%rcx
mov    -0x58(%rbp),%rax
add    %rcx,%rax
sub    %rax,%r9
mov    -0x38(%rbp),%rax
add    $0x400,%rax
mov    -0x40(%rbp),%rdx
mov    %rax,%rcx
sub    %rdx,%rcx
add    %r9,%rcx
sar    $0xb,%rcx
mov    %ecx,0xa0(%rdi)
lea    (%rdx,%r9,1),%rcx
sub    %rcx,%rax
sar    $0xb,%rax
mov    %eax,0xc0(%rdi)
mov    -0x68(%rbp),%rax
lea    0x2(%rax),%rcx
mov    -0x60(%rbp),%rax
lea    0x2(%rax),%rdx
add    $0x4,%rdi
mov    -0xb0(%rbp),%rax
lea    0x1(%rax),%ebx
cmp    $0x7,%ebx
jle    31c03 <jpeg_idct_12x12+0x53>
mov    -0x70(%rbp),%rax
mov    %eax,%r10d
mov    -0x80(%rbp),%r15
lea    -0x230(%rbp),%rdx
xor    %ecx,%ecx
mov    -0x78(%rbp),%rdi
jmpq   324aa <jpeg_idct_12x12+0x8fa>
movslq 0x4(%rdx),%r8
mov    %r8,-0x18(%rbp)
movslq 0x14(%rdx),%r14
lea    (%r8,%r14,1),%r11
movslq 0x1c(%rdx),%rsi
lea    (%rsi,%r11,1),%r9
lea    (%r9,%r9,2),%rax
shl    $0x4,%rax
add    %r9,%rax
mov    %rax,%rbx
shl    $0x4,%rbx
shl    $0x5,%rax
add    %rbx,%rax
sub    %r9,%rax
lea    (%rax,%rax,2),%r9
mov    %r9,-0x30(%rbp)
mov    %r11,%rax
shl    $0x6,%rax
lea    (%rax,%r11,2),%rax
add    %r11,%rax
shl    $0x5,%rax
lea    (%r11,%r11,4),%rbx
sub    %rbx,%rax
lea    (%r9,%rax,1),%rbx
mov    %rbx,-0x48(%rbp)
movslq 0xc(%rdx),%r12
lea    (%r12,%r12,2),%rax
shl    $0x4,%rax
lea    (%r12,%rax,1),%r9
mov    %r9,-0x38(%rbp)
lea    (%r12,%r12,4),%rax
lea    (%r12,%rax,4),%rax
shl    $0x9,%rax
mov    %rax,-0x40(%rbp)
sub    %r9,%rax
lea    (%rbx,%rax,1),%r9
lea    (%r8,%r8,8),%rbx
mov    %rbx,%rax
shl    $0x8,%rax
sub    %rbx,%rax
lea    (%r9,%rax,1),%r11
movslq 0x8(%rdx),%rbx
mov    %rbx,-0x68(%rbp)
lea    (%rbx,%rbx,4),%rax
lea    (%rbx,%rax,2),%rax
shl    $0xa,%rax
mov    %rax,-0x58(%rbp)
lea    (%rbx,%rbx,1),%r9
lea    (%rbx,%rbx,8),%rbx
lea    (%r9,%rbx,8),%rbx
mov    %rbx,-0x60(%rbp)
sub    %rbx,%rax
movslq 0x18(%rdx),%rbx
mov    %rbx,-0x70(%rbp)
shl    $0xd,%rbx
lea    (%rax,%rbx,1),%r13
mov    %r13,-0x10(%rbp)
movslq 0x10(%rdx),%r9
lea    (%r9,%r9,2),%rax
lea    (%r9,%rax,4),%rbx
lea    (%r9,%r9,4),%rax
shl    $0x7,%rax
sub    %rbx,%rax
shl    $0x4,%rax
add    %r9,%rax
mov    %rax,-0x50(%rbp)
movslq (%rdx),%rbx
mov    %rbx,-0x28(%rbp)
mov    %rbx,%r9
shl    $0xd,%r9
mov    %rdx,-0x80(%rbp)
mov    %r9,-0x8(%rbp)
lea    (%rax,%r9,1),%rdx
lea    0x0(%r13,%rdx,1),%rax
lea    0x20000(%r11,%rax,1),%rax
sar    $0x12,%rax
and    $0x3ff,%eax
movslq %eax,%rax
movzbl 0x80(%r15,%rax,1),%eax
mov    %rcx,-0xb0(%rbp)
movslq %ecx,%rcx
mov    (%rdi,%rcx,8),%rdi
mov    %al,(%r10,%rdi,1)
lea    0x20000(%r13,%rdx,1),%rax
sub    %r11,%rax
sar    $0x12,%rax
and    $0x3ff,%eax
movslq %eax,%rax
movzbl 0x80(%r15,%rax,1),%eax
mov    %al,0xb(%r10,%rdi,1)
mov    %r12,%r13
sub    %r14,%r13
sub    %rsi,%r8
lea    0x0(%r13,%r8,1),%rdx
mov    %rdx,%rcx
shl    $0x4,%rcx
mov    %rdx,%rax
shl    $0x8,%rax
add    %rcx,%rax
lea    (%rax,%rdx,4),%rax
add    %rdx,%rax
shl    $0x4,%rax
lea    (%rdx,%rax,1),%r11
lea    (%r8,%r8,2),%rax
shl    $0x4,%rax
add    %r8,%rax
shl    $0x7,%rax
lea    (%r8,%r8,1),%rcx
sub    %rcx,%rax
lea    (%r11,%rax,1),%rcx
mov    -0x68(%rbp),%rdx
mov    -0x70(%rbp),%r8
mov    %rdx,%rax
sub    %r8,%rax
add    %rax,%rbx
shl    $0xd,%rbx
lea    0x20000(%rcx,%rbx,1),%rax
sar    $0x12,%rax
and    $0x3ff,%eax
movslq %eax,%rax
movzbl 0x80(%r15,%rax,1),%eax
mov    %al,0x1(%r10,%rdi,1)
lea    0x20000(%rbx),%rax
sub    %rcx,%rax
sar    $0x12,%rax
and    $0x3ff,%eax
movslq %eax,%rax
movzbl 0x80(%r15,%rax,1),%eax
mov    %al,0xa(%r10,%rdi,1)
mov    %r12,%rcx
shl    $0x4,%rcx
mov    %r12,%rax
shl    $0x8,%rax
add    %rcx,%rax
lea    (%rax,%r12,4),%rax
add    %r12,%rax
shl    $0x4,%rax
lea    (%r12,%rax,1),%rbx
mov    %rbx,-0x20(%rbp)
lea    (%r14,%r14,4),%rax
lea    (%r14,%rax,2),%rcx
lea    (%r14,%r14,2),%rax
shl    $0x8,%rax
sub    %rcx,%rax
shl    $0x4,%rax
add    %rbx,%rax
lea    (%rsi,%r14,1),%rcx
imul   $0xffffffffffffde8b,%rcx,%rcx
neg    %rax
add    %rcx,%rax
mov    -0x48(%rbp),%rbx
lea    (%rbx,%rax,1),%r12
lea    (%r8,%rdx,1),%rbx
shl    $0xd,%rbx
mov    -0x60(%rbp),%r8
lea    (%r8,%rbx,1),%rax
mov    -0x58(%rbp),%r14
neg    %rax
add    %r14,%rax
add    $0x20000,%r9
mov    -0x50(%rbp),%rdx
sub    %rdx,%r9
add    %r9,%rax
lea    (%r12,%rax,1),%rdx
sar    $0x12,%rdx
and    $0x3ff,%edx
movslq %edx,%rdx
movzbl 0x80(%r15,%rdx,1),%edx
mov    %dl,0x2(%r10,%rdi,1)
sub    %r12,%rax
sar    $0x12,%rax
and    $0x3ff,%eax
movslq %eax,%rax
movzbl 0x80(%r15,%rax,1),%eax
mov    %al,0x9(%r10,%rdi,1)
mov    -0x38(%rbp),%rax
mov    -0x40(%rbp),%rdx
sub    %rdx,%rax
mov    -0x30(%rbp),%rdx
lea    (%rdx,%rax,1),%r12
lea    (%rsi,%rsi,2),%rax
shl    $0x6,%rax
lea    (%rax,%rsi,8),%rax
lea    (%rax,%rsi,2),%rax
add    %rsi,%rax
shl    $0x6,%rax
lea    (%rax,%rsi,4),%rax
lea    (%rax,%rsi,2),%rax
add    %r12,%rax
lea    (%rax,%rcx,1),%r12
sub    %r14,%r8
lea    (%rbx,%r8,1),%rax
add    %r9,%rax
lea    (%r12,%rax,1),%rcx
sar    $0x12,%rcx
and    $0x3ff,%ecx
movslq %ecx,%rcx
movzbl 0x80(%r15,%rcx,1),%ecx
mov    %cl,0x3(%r10,%rdi,1)
sub    %r12,%rax
sar    $0x12,%rax
and    $0x3ff,%eax
movslq %eax,%rax
movzbl 0x80(%r15,%rax,1),%eax
mov    %al,0x8(%r10,%rdi,1)
mov    %r13,%rcx
shl    $0x2,%rcx
lea    0x0(%r13,%r13,2),%rax
lea    (%rcx,%rax,8),%rax
add    %r13,%rax
shl    $0x4,%rax
lea    (%rax,%r13,8),%rax
add    %r13,%rax
shl    $0x5,%rax
lea    0x0(%r13,%rax,1),%rcx
mov    %r11,%r8
sub    %rcx,%r8
mov    -0x68(%rbp),%rbx
mov    -0x70(%rbp),%rax
sub    %rbx,%rax
mov    -0x28(%rbp),%rbx
add    %rax,%rbx
shl    $0xd,%rbx
lea    0x20000(%r8,%rbx,1),%rax
sar    $0x12,%rax
and    $0x3ff,%eax
movslq %eax,%rax
movzbl 0x80(%r15,%rax,1),%eax
mov    %al,0x4(%r10,%rdi,1)
sub    %r11,%rcx
lea    0x20000(%rcx,%rbx,1),%rax
sar    $0x12,%rax
and    $0x3ff,%eax
movslq %eax,%rax
movzbl 0x80(%r15,%rax,1),%eax
mov    %al,0x7(%r10,%rdi,1)
mov    -0x18(%rbp),%rcx
mov    %rcx,%rax
shl    $0x6,%rax
lea    (%rax,%rcx,4),%rax
add    %rcx,%rax
shl    $0x4,%rax
lea    (%rax,%rcx,4),%rax
lea    (%rax,%rax,4),%rcx
mov    %rsi,%rax
shl    $0x7,%rax
lea    (%rax,%rsi,8),%rax
lea    (%rax,%rsi,4),%rax
shl    $0xe,%rsi
sub    %rax,%rsi
lea    (%rcx,%rsi,1),%rax
mov    -0x20(%rbp),%rcx
add    %rcx,%rax
sub    %rax,%rdx
mov    -0x8(%rbp),%rcx
mov    -0x50(%rbp),%rax
lea    0x20000(%rax,%rcx,1),%rax
mov    -0x10(%rbp),%rsi
mov    %rax,%rcx
sub    %rsi,%rcx
add    %rdx,%rcx
sar    $0x12,%rcx
and    $0x3ff,%ecx
movslq %ecx,%rcx
movzbl 0x80(%r15,%rcx,1),%ecx
mov    %cl,0x5(%r10,%rdi,1)
lea    (%rsi,%rdx,1),%rcx
sub    %rcx,%rax
sar    $0x12,%rax
and    $0x3ff,%eax
movslq %eax,%rax
movzbl 0x80(%rax,%r15,1),%eax
mov    %al,0x6(%r10,%rdi,1)
mov    -0xb0(%rbp),%rax
lea    0x1(%rax),%ecx
mov    -0x80(%rbp),%rax
lea    0x20(%rax),%rdx
mov    -0x78(%rbp),%rdi
cmp    $0xb,%ecx
jle    32021 <jpeg_idct_12x12+0x471>
mov    -0xa8(%rbp),%r15
mov    -0xa0(%rbp),%r14
mov    -0x98(%rbp),%r13
mov    -0x90(%rbp),%r12
mov    -0x88(%rbp),%rbx
leaveq 
retq   
nopl   0x0(%rax,%rax,1)

00000000000324e0 <jpeg_idct_13x13>:
push   %rbp
mov    %rsp,%rbp
sub    $0x290,%rsp
mov    %r8,-0xa8(%rbp)
mov    %rcx,-0xb0(%rbp)
mov    %rbx,-0xc0(%rbp)
mov    %r12,-0xc8(%rbp)
mov    %r13,-0xd0(%rbp)
mov    %r14,-0xd8(%rbp)
mov    %r15,-0xe0(%rbp)
mov    0x1a8(%rdi),%rax
mov    %rax,-0xb8(%rbp)
mov    0x58(%rsi),%rsi
mov    %rdx,%r10
xor    %edi,%edi
lea    -0x288(%rbp),%rbx
jmpq   32aac <jpeg_idct_13x13+0x5cc>
movswq 0x40(%rsi),%rax
movswq 0x40(%r10),%rcx
imul   %ecx,%eax
movslq %eax,%rcx
mov    %rcx,-0x70(%rbp)
movswq 0x60(%rsi),%rax
movswq 0x60(%r10),%rdx
imul   %edx,%eax
movslq %eax,%r11
mov    %r11,-0x78(%rbp)
lea    (%r11,%rcx,1),%r8
mov    %r8,-0x38(%rbp)
lea    (%r8,%r8,8),%r9
lea    (%r8,%r9,4),%rax
shl    $0x8,%rax
mov    %rax,-0x18(%rbp)
lea    (%r8,%r8,2),%rdx
mov    %rdx,-0x30(%rbp)
lea    (%r8,%rdx,2),%rdx
mov    %rdx,-0x28(%rbp)
sub    %rdx,%rax
movswq 0x20(%rsi),%rdx
movswq 0x20(%r10),%r8
imul   %r8d,%edx
movslq %edx,%rdx
mov    %rdx,-0x80(%rbp)
lea    (%rdx,%rdx,4),%r8
mov    %rdi,-0xe8(%rbp)
mov    %r8,-0x58(%rbp)
lea    (%rdx,%r8,2),%rdi
shl    $0xa,%rdi
mov    %rdx,%r8
shl    $0x4,%r8
mov    %r8,-0x8(%rbp)
sub    %r8,%rdx
add    %rdi,%rdx
lea    (%rax,%rdx,1),%rdi
sub    %r11,%rcx
lea    (%rcx,%rcx,2),%rdx
mov    %rdx,%rax
shl    $0x4,%rax
add    %rcx,%rax
shl    $0x4,%rax
lea    (%rax,%rcx,8),%rax
lea    (%rcx,%rax,1),%r11
movswq (%rsi),%rax
movswq (%r10),%r8
imul   %r8d,%eax
movslq %eax,%r8
shl    $0xd,%r8
mov    %r8,-0x88(%rbp)
lea    (%r8,%r11,1),%rax
mov    %rax,-0x10(%rbp)
lea    (%rax,%rdi,1),%r13
movswq 0x50(%rsi),%rax
movswq 0x50(%r10),%rdi
imul   %edi,%eax
movslq %eax,%r15
movswq 0x10(%rsi),%rax
movswq 0x10(%r10),%rdi
imul   %edi,%eax
movslq %eax,%r11
mov    %r11,-0x40(%rbp)
lea    (%r15,%r11,1),%rdi
lea    (%rdi,%rdi,8),%rax
shl    $0x4,%rax
lea    (%rax,%rdi,4),%rax
add    %rdi,%rax
shl    $0x6,%rax
add    %rdi,%rdi
sub    %rdi,%rax
mov    %rax,-0x20(%rbp)
movswq 0x30(%rsi),%rdi
movswq 0x30(%r10),%r12
imul   %r12d,%edi
movslq %edi,%r14
mov    %r14,-0x60(%rbp)
lea    (%r14,%r11,1),%r12
lea    (%r12,%r12,4),%rdi
lea    (%r12,%rdi,4),%rdi
shl    $0x5,%rdi
lea    (%rdi,%r12,4),%rdi
add    %r12,%rdi
shl    $0x4,%rdi
lea    (%rax,%rdi,1),%r12
mov    %rsi,-0xa0(%rbp)
movswq 0x70(%rsi),%rax
mov    %r10,-0x90(%rbp)
movswq 0x70(%r10),%rsi
imul   %esi,%eax
movslq %eax,%r10
lea    (%r10,%r11,1),%rsi
mov    %rsi,-0x68(%rbp)
mov    %rsi,%rax
shl    $0x4,%rax
sub    %rsi,%rax
shl    $0x9,%rax
lea    (%rax,%rsi,2),%rsi
add    %rsi,%r12
mov    %r11,%rax
shl    $0x9,%rax
lea    (%rax,%r11,4),%rax
add    %r11,%rax
shl    $0x5,%rax
lea    (%rax,%r11,4),%rax
add    %r11,%rax
mov    %r12,%r11
sub    %rax,%r11
lea    0x400(%r13,%r11,1),%r11
sar    $0xb,%r11
mov    %r11d,(%rbx)
sub    %r12,%rax
lea    0x400(%r13,%rax,1),%rax
sar    $0xb,%rax
mov    %eax,0x180(%rbx)
lea    (%r15,%r14,1),%r11
imul   $0xfffffffffffff52b,%r11,%r11
lea    (%r14,%r14,2),%rax
shl    $0x5,%rax
lea    (%rax,%r14,8),%rax
lea    (%rax,%r14,2),%rax
add    %r14,%rax
shl    $0x6,%rax
lea    (%rax,%r14,8),%rax
lea    (%rax,%r14,2),%rax
add    %r14,%rax
add    %r11,%rax
lea    (%rax,%rdi,1),%r13
lea    (%r10,%r14,1),%rdi
lea    (%rdi,%rdi,8),%rax
shl    $0x4,%rax
lea    (%rax,%rdi,4),%rax
add    %rdi,%rax
shl    $0x6,%rax
lea    (%rdi,%rdi,1),%r12
sub    %rax,%r12
lea    0x0(%r13,%r12,1),%r14
shl    $0x5,%rdx
lea    (%rdx,%rcx,8),%rax
lea    (%rax,%rcx,2),%rax
lea    (%rcx,%rax,1),%rdx
mov    %rcx,%rax
shl    $0xc,%rax
sub    %rdx,%rax
lea    (%r8,%rax,1),%rdx
mov    %rdx,-0x48(%rbp)
mov    %r9,%rax
shl    $0x5,%rax
shl    $0x8,%r9
add    %rax,%r9
mov    %r9,-0x50(%rbp)
mov    -0x80(%rbp),%r13
mov    %r13,%rdi
shl    $0x8,%rdi
mov    -0x8(%rbp),%rax
add    %rdi,%rax
sub    %r13,%rax
shl    $0x5,%rax
sub    %r9,%rax
add    %rax,%rdx
lea    0x400(%r14,%rdx,1),%rax
sar    $0xb,%rax
mov    %eax,0x20(%rbx)
lea    0x400(%rdx),%rax
sub    %r14,%rax
sar    $0xb,%rax
mov    %eax,0x160(%rbx)
mov    -0x18(%rbp),%rdx
mov    -0x28(%rbp),%rax
mov    %rax,%rdi
sub    %rdx,%rdi
mov    %r13,%rdx
shl    $0xc,%rdx
lea    (%rdx,%r13,8),%rdx
lea    (%rdx,%r13,4),%rdx
add    %rdx,%rdi
mov    -0x10(%rbp),%rdx
lea    (%rdx,%rdi,1),%r14
lea    (%r15,%r15,4),%rdx
shl    $0x5,%rdx
add    %r15,%rdx
mov    %rdx,%rdi
shl    $0x4,%rdi
shl    $0x6,%rdx
add    %rdi,%rdx
neg    %rdx
add    %r15,%rdx
lea    (%r11,%rdx,1),%rdi
mov    -0x20(%rbp),%rdx
add    %rdx,%rdi
lea    (%r10,%r15,1),%r9
lea    (%r9,%r9,4),%rdx
lea    (%r9,%rdx,4),%rdx
shl    $0x8,%rdx
lea    (%rdx,%r9,8),%r9
mov    %rdi,%rdx
sub    %r9,%rdx
lea    0x400(%r14,%rdx,1),%rdx
sar    $0xb,%rdx
mov    %edx,0x40(%rbx)
mov    %r9,%rdx
sub    %rdi,%rdx
lea    0x400(%r14,%rdx,1),%rdx
sar    $0xb,%rdx
mov    %edx,0x140(%rbx)
mov    -0x30(%rbp),%rdx
shl    $0x2,%rdx
mov    -0x38(%rbp),%rdi
lea    (%rdx,%rdi,2),%r14
shl    $0x9,%rax
mov    -0x58(%rbp),%rdi
mov    %rdi,%rdx
shl    $0x4,%rdx
lea    (%rdx,%r13,8),%rdx
sub    %r13,%rdx
shl    $0x4,%rdx
lea    (%rdx,%r13,4),%rdx
add    %rax,%rdx
mov    %r14,%r11
sub    %rdx,%r11
mov    %rcx,%rdx
shl    $0x9,%rdx
lea    (%rdx,%rcx,2),%rdx
shl    $0xd,%rcx
sub    %rcx,%rdx
lea    0x400(%r8,%rdx,1),%r8
lea    (%r8,%r11,1),%rdx
mov    %r10,%rcx
shl    $0x5,%rcx
lea    (%rcx,%r10,2),%rcx
add    %r10,%rcx
shl    $0x5,%rcx
lea    (%rcx,%r10,8),%rcx
add    %r10,%rcx
shl    $0x4,%rcx
lea    (%rcx,%r10,4),%rcx
add    %r12,%rcx
add    %rcx,%rsi
mov    %rsi,%rcx
sub    %r9,%rcx
add    %rdx,%rcx
sar    $0xb,%rcx
mov    %ecx,0x60(%rbx)
sub    %rsi,%r9
lea    (%rdx,%r9,1),%rcx
sar    $0xb,%rcx
mov    %ecx,0x120(%rbx)
mov    -0x60(%rbp),%rdx
mov    %r15,%rsi
sub    %rdx,%rsi
mov    %rsi,%rcx
shl    $0x4,%rcx
mov    %rdx,%r9
sub    %r15,%r9
add    %r9,%rcx
shl    $0x9,%rcx
lea    (%rcx,%rsi,2),%r9
mov    -0x68(%rbp),%rsi
lea    (%rsi,%rsi,4),%rcx
shl    $0x5,%rcx
lea    (%rcx,%rsi,8),%rcx
lea    (%rcx,%rsi,4),%rcx
add    %rsi,%rcx
shl    $0x4,%rcx
lea    (%rcx,%rsi,4),%rcx
lea    (%rsi,%rcx,1),%r12
mov    -0x40(%rbp),%rsi
lea    (%rsi,%rsi,4),%rcx
shl    $0x5,%rcx
lea    (%rcx,%rsi,2),%rcx
add    %rsi,%rcx
shl    $0x4,%rcx
lea    (%rcx,%rsi,2),%rcx
add    %rsi,%rcx
lea    (%r12,%rcx,1),%rsi
mov    %rdx,%r11
shl    $0x4,%r11
mov    %rdx,%rcx
shl    $0x8,%rcx
add    %r11,%rcx
lea    (%rcx,%rdx,4),%rcx
lea    (%rcx,%rdx,2),%rcx
shl    $0xc,%rdx
sub    %rdx,%rcx
add    %rsi,%rcx
lea    (%r9,%rcx,1),%rdx
sub    %r14,%rax
mov    %r13,%rcx
imul   $0xffffffffffffe64b,%rcx,%rcx
add    %rcx,%rax
add    %r8,%rax
lea    (%rdx,%rax,1),%rcx
sar    $0xb,%rcx
mov    %ecx,0x80(%rbx)
sub    %rdx,%rax
sar    $0xb,%rax
mov    %eax,0x100(%rbx)
mov    %r15,%rcx
shl    $0x4,%rcx
mov    %r15,%rax
shl    $0xa,%rax
add    %rcx,%rax
lea    (%rax,%r15,8),%rax
lea    (%rax,%r15,2),%rax
lea    (%rax,%rax,2),%rax
lea    (%r9,%rax,1),%rcx
lea    (%r10,%r10,2),%rax
lea    (%r10,%rax,2),%rax
shl    $0x5,%rax
sub    %r10,%rax
shl    $0x6,%rax
add    %r10,%rax
sub    %rax,%rcx
lea    (%rcx,%r12,1),%rdx
shl    $0x7,%rdi
lea    0x0(%r13,%rdi,1),%rax
shl    $0x4,%rax
lea    (%rax,%r13,2),%rcx
mov    -0x50(%rbp),%rax
sub    %rcx,%rax
mov    -0x48(%rbp),%rcx
add    %rax,%rcx
lea    0x400(%rdx,%rcx,1),%rax
sar    $0xb,%rax
mov    %eax,0xa0(%rbx)
lea    0x400(%rcx),%rax
sub    %rdx,%rax
sar    $0xb,%rax
mov    %eax,0xe0(%rbx)
mov    -0x78(%rbp),%rax
lea    (%rax,%r13,1),%rcx
mov    -0x70(%rbp),%rax
sub    %rcx,%rax
lea    (%rax,%rax,8),%rcx
shl    $0x8,%rcx
lea    (%rcx,%rax,8),%rcx
lea    (%rcx,%rax,4),%rcx
add    %rcx,%rax
lea    (%rax,%rax,4),%rcx
mov    -0x88(%rbp),%rax
lea    0x400(%rcx,%rax,1),%rax
sar    $0xb,%rax
mov    %eax,0xc0(%rbx)
mov    -0xa0(%rbp),%rax
lea    0x2(%rax),%rsi
mov    -0x90(%rbp),%rax
lea    0x2(%rax),%r10
add    $0x4,%rbx
mov    -0xe8(%rbp),%rax
lea    0x1(%rax),%edi
cmp    $0x7,%edi
jle    3253f <jpeg_idct_13x13+0x5f>
mov    -0xa8(%rbp),%rax
mov    %eax,%r9d
mov    -0xb8(%rbp),%r15
lea    -0x288(%rbp),%rsi
xor    %ecx,%ecx
mov    -0xb0(%rbp),%rdx
jmpq   33105 <jpeg_idct_13x13+0xc25>
movslq 0x10(%rsi),%r8
mov    %r8,-0x10(%rbp)
movslq 0x18(%rsi),%r11
mov    %r11,-0x18(%rbp)
lea    (%r11,%r8,1),%rbx
mov    %rbx,-0x48(%rbp)
lea    (%rbx,%rbx,2),%rax
mov    %rax,-0x40(%rbp)
lea    (%rbx,%rax,2),%rdi
mov    %rdi,-0x70(%rbp)
lea    (%rbx,%rbx,8),%rax
mov    %rax,-0x98(%rbp)
lea    (%rbx,%rax,4),%rax
shl    $0x8,%rax
mov    %rax,-0x78(%rbp)
sub    %rdi,%rax
movslq 0x8(%rsi),%rbx
mov    %rbx,-0x90(%rbp)
lea    (%rbx,%rbx,4),%rdi
mov    %rdi,-0x50(%rbp)
lea    (%rbx,%rdi,2),%rdi
shl    $0xa,%rdi
mov    %rbx,%r10
shl    $0x4,%r10
mov    %r10,-0x88(%rbp)
sub    %r10,%rbx
add    %rbx,%rdi
lea    (%rax,%rdi,1),%rbx
sub    %r11,%r8
mov    %r8,-0xa8(%rbp)
lea    (%r8,%r8,2),%rdi
mov    %rdi,%rax
shl    $0x4,%rax
add    %r8,%rax
shl    $0x4,%rax
lea    (%rax,%r8,8),%rax
add    %rax,%r8
movslq (%rsi),%rax
shl    $0xd,%rax
mov    %rax,-0xa0(%rbp)
add    %r8,%rax
mov    %rax,-0x68(%rbp)
lea    (%rbx,%rax,1),%r10
movslq 0x14(%rsi),%r14
movslq 0x4(%rsi),%r8
mov    %r8,-0x30(%rbp)
lea    (%r14,%r8,1),%rbx
lea    (%rbx,%rbx,8),%rax
shl    $0x4,%rax
lea    (%rax,%rbx,4),%rax
add    %rbx,%rax
shl    $0x6,%rax
add    %rbx,%rbx
sub    %rbx,%rax
mov    %rax,-0x80(%rbp)
movslq 0xc(%rsi),%r13
mov    %r13,-0x38(%rbp)
lea    0x0(%r13,%r8,1),%r11
lea    (%r11,%r11,4),%rbx
lea    (%r11,%rbx,4),%rbx
shl    $0x5,%rbx
lea    (%rbx,%r11,4),%rbx
add    %r11,%rbx
shl    $0x4,%rbx
lea    (%rax,%rbx,1),%r11
mov    %rsi,-0xb8(%rbp)
movslq 0x1c(%rsi),%r12
lea    (%r12,%r8,1),%rsi
mov    %rsi,-0x28(%rbp)
mov    %rsi,%rax
shl    $0x4,%rax
sub    %rsi,%rax
shl    $0x9,%rax
lea    (%rax,%rsi,2),%rax
mov    %rax,-0x60(%rbp)
add    %rax,%r11
mov    %r8,%rax
shl    $0x9,%rax
lea    (%rax,%r8,4),%rax
add    %r8,%rax
shl    $0x5,%rax
lea    (%rax,%r8,4),%rax
lea    (%r8,%rax,1),%rsi
mov    %r11,%rax
sub    %rsi,%rax
lea    0x20000(%rax,%r10,1),%rax
sar    $0x12,%rax
and    $0x3ff,%eax
movslq %eax,%rax
movzbl 0x80(%r15,%rax,1),%eax
mov    %rcx,-0xe8(%rbp)
movslq %ecx,%rcx
mov    (%rdx,%rcx,8),%r8
mov    %al,(%r9,%r8,1)
sub    %r11,%rsi
lea    0x20000(%rsi,%r10,1),%rax
sar    $0x12,%rax
and    $0x3ff,%eax
movslq %eax,%rax
movzbl 0x80(%r15,%rax,1),%eax
mov    %al,0xc(%r9,%r8,1)
lea    (%r14,%r13,1),%rdx
imul   $0xfffffffffffff52b,%rdx,%rdx
lea    0x0(%r13,%r13,2),%rax
shl    $0x5,%rax
lea    (%rax,%r13,8),%rax
lea    (%rax,%r13,2),%rax
add    %r13,%rax
shl    $0x6,%rax
lea    (%rax,%r13,8),%rax
lea    (%rax,%r13,2),%rax
add    %r13,%rax
add    %rdx,%rax
lea    (%rax,%rbx,1),%rsi
lea    (%r12,%r13,1),%rbx
lea    (%rbx,%rbx,8),%rax
shl    $0x4,%rax
lea    (%rax,%rbx,4),%rax
lea    (%rbx,%rax,1),%rcx
shl    $0x6,%rcx
lea    (%rbx,%rbx,1),%rax
sub    %rcx,%rax
mov    %rax,-0x58(%rbp)
add    %rax,%rsi
shl    $0x5,%rdi
mov    -0xa8(%rbp),%rbx
lea    (%rdi,%rbx,8),%rax
lea    (%rax,%rbx,2),%rax
lea    (%rbx,%rax,1),%rcx
mov    %rbx,%rax
shl    $0xc,%rax
sub    %rcx,%rax
mov    -0xa0(%rbp),%r10
lea    (%r10,%rax,1),%rdi
mov    %rdi,-0x20(%rbp)
mov    -0x98(%rbp),%rax
mov    %rax,%rcx
shl    $0x5,%rcx
shl    $0x8,%rax
add    %rax,%rcx
mov    %rcx,-0x98(%rbp)
mov    -0x90(%rbp),%r13
mov    %r13,%rax
shl    $0x8,%rax
mov    -0x88(%rbp),%r11
add    %r11,%rax
sub    %r13,%rax
shl    $0x5,%rax
sub    %rcx,%rax
lea    (%rax,%rdi,1),%rcx
lea    0x20000(%rsi,%rcx,1),%rcx
sar    $0x12,%rcx
and    $0x3ff,%ecx
movslq %ecx,%rcx
movzbl 0x80(%r15,%rcx,1),%ecx
mov    %cl,0x1(%r9,%r8,1)
lea    0x20000(%rax,%rdi,1),%rax
sub    %rsi,%rax
sar    $0x12,%rax
and    $0x3ff,%eax
movslq %eax,%rax
movzbl 0x80(%r15,%rax,1),%eax
mov    %al,0xb(%r9,%r8,1)
mov    -0x70(%rbp),%rcx
mov    -0x78(%rbp),%rax
neg    %rax
add    %rcx,%rax
mov    %r13,%rsi
shl    $0xc,%rsi
lea    (%rsi,%r13,8),%rsi
lea    (%rsi,%r13,4),%rsi
add    %rsi,%rax
mov    -0x68(%rbp),%rsi
lea    (%rsi,%rax,1),%rdi
lea    (%r14,%r14,4),%rax
shl    $0x5,%rax
add    %r14,%rax
mov    %rax,%rsi
shl    $0x4,%rsi
shl    $0x6,%rax
add    %rsi,%rax
neg    %rax
add    %r14,%rax
add    %rdx,%rax
mov    -0x80(%rbp),%rdx
lea    (%rdx,%rax,1),%rsi
lea    (%r12,%r14,1),%rdx
lea    (%rdx,%rdx,4),%rax
lea    (%rdx,%rax,4),%rax
shl    $0x8,%rax
lea    (%rax,%rdx,8),%rdx
mov    %rsi,%rax
sub    %rdx,%rax
lea    0x20000(%rdi,%rax,1),%rax
sar    $0x12,%rax
and    $0x3ff,%eax
movslq %eax,%rax
movzbl 0x80(%r15,%rax,1),%eax
mov    %al,0x2(%r9,%r8,1)
mov    %rdx,%rax
sub    %rsi,%rax
lea    0x20000(%rdi,%rax,1),%rax
sar    $0x12,%rax
and    $0x3ff,%eax
movslq %eax,%rax
movzbl 0x80(%r15,%rax,1),%eax
mov    %al,0xa(%r9,%r8,1)
mov    -0x40(%rbp),%rax
shl    $0x2,%rax
mov    -0x48(%rbp),%rsi
lea    (%rax,%rsi,2),%r11
shl    $0x9,%rcx
mov    -0x50(%rbp),%rsi
mov    %rsi,%rax
shl    $0x4,%rax
lea    (%rax,%r13,8),%rax
sub    %r13,%rax
shl    $0x4,%rax
lea    (%rax,%r13,4),%rax
add    %rcx,%rax
mov    %r11,%rdi
sub    %rax,%rdi
mov    %rbx,%rax
shl    $0x9,%rax
lea    (%rax,%rbx,2),%rax
shl    $0xd,%rbx
sub    %rbx,%rax
lea    0x20000(%r10,%rax,1),%r10
lea    (%r10,%rdi,1),%rbx
mov    %r12,%rax
shl    $0x5,%rax
lea    (%rax,%r12,2),%rax
add    %r12,%rax
shl    $0x5,%rax
lea    (%rax,%r12,8),%rax
add    %r12,%rax
shl    $0x4,%rax
lea    (%rax,%r12,4),%rax
mov    -0x58(%rbp),%rdi
add    %rdi,%rax
mov    -0x60(%rbp),%rdi
add    %rax,%rdi
mov    %rdi,%rax
sub    %rdx,%rax
add    %rbx,%rax
sar    $0x12,%rax
and    $0x3ff,%eax
movslq %eax,%rax
movzbl 0x80(%r15,%rax,1),%eax
mov    %al,0x3(%r9,%r8,1)
sub    %rdi,%rdx
lea    (%rbx,%rdx,1),%rax
sar    $0x12,%rax
and    $0x3ff,%eax
movslq %eax,%rax
movzbl 0x80(%r15,%rax,1),%eax
mov    %al,0x9(%r9,%r8,1)
sub    %r11,%rcx
mov    %r13,%rax
imul   $0xffffffffffffe64b,%rax,%rax
add    %rcx,%rax
add    %r10,%rax
mov    -0x38(%rbp),%rcx
mov    %r14,%rbx
sub    %rcx,%rbx
mov    %rbx,%rdi
shl    $0x4,%rdi
mov    %rcx,%rdx
sub    %r14,%rdx
add    %rdi,%rdx
shl    $0x9,%rdx
lea    (%rdx,%rbx,2),%r11
mov    -0x28(%rbp),%rdi
lea    (%rdi,%rdi,4),%rdx
shl    $0x5,%rdx
lea    (%rdx,%rdi,8),%rdx
lea    (%rdx,%rdi,4),%rdx
add    %rdi,%rdx
shl    $0x4,%rdx
lea    (%rdx,%rdi,4),%rdx
lea    (%rdi,%rdx,1),%r10
mov    -0x30(%rbp),%rdi
lea    (%rdi,%rdi,4),%rdx
shl    $0x5,%rdx
lea    (%rdx,%rdi,2),%rdx
add    %rdi,%rdx
shl    $0x4,%rdx
lea    (%rdx,%rdi,2),%rdx
add    %rdi,%rdx
lea    (%r10,%rdx,1),%rbx
mov    %rcx,%rdi
shl    $0x4,%rdi
mov    %rcx,%rdx
shl    $0x8,%rdx
add    %rdi,%rdx
lea    (%rdx,%rcx,4),%rdx
lea    (%rdx,%rcx,2),%rdx
shl    $0xc,%rcx
sub    %rcx,%rdx
lea    (%rbx,%rdx,1),%rcx
lea    (%r11,%rcx,1),%rdx
lea    (%rdx,%rax,1),%rcx
sar    $0x12,%rcx
and    $0x3ff,%ecx
movslq %ecx,%rcx
movzbl 0x80(%r15,%rcx,1),%ecx
mov    %cl,0x4(%r9,%r8,1)
sub    %rdx,%rax
sar    $0x12,%rax
and    $0x3ff,%eax
movslq %eax,%rax
movzbl 0x80(%r15,%rax,1),%eax
mov    %al,0x8(%r9,%r8,1)
mov    %r14,%rcx
shl    $0x4,%rcx
mov    %r14,%rax
shl    $0xa,%rax
add    %rcx,%rax
lea    (%rax,%r14,8),%rax
lea    (%rax,%r14,2),%rax
lea    (%rax,%rax,2),%rax
lea    (%r11,%rax,1),%rcx
lea    (%r12,%r12,2),%rax
lea    (%r12,%rax,2),%rax
shl    $0x5,%rax
sub    %r12,%rax
shl    $0x6,%rax
add    %r12,%rax
sub    %rax,%rcx
lea    (%rcx,%r10,1),%rdx
shl    $0x7,%rsi
lea    0x0(%r13,%rsi,1),%rax
shl    $0x4,%rax
lea    (%rax,%r13,2),%rax
mov    -0x98(%rbp),%rcx
sub    %rax,%rcx
mov    -0x20(%rbp),%rsi
lea    (%rsi,%rcx,1),%rax
lea    0x20000(%rdx,%rax,1),%rax
sar    $0x12,%rax
and    $0x3ff,%eax
movslq %eax,%rax
movzbl 0x80(%r15,%rax,1),%eax
mov    %al,0x5(%r9,%r8,1)
lea    0x20000(%rsi,%rcx,1),%rax
sub    %rdx,%rax
sar    $0x12,%rax
and    $0x3ff,%eax
movslq %eax,%rax
movzbl 0x80(%r15,%rax,1),%eax
mov    %al,0x7(%r9,%r8,1)
mov    -0x18(%rbp),%rax
lea    (%rax,%r13,1),%rcx
mov    -0x10(%rbp),%rax
sub    %rcx,%rax
lea    (%rax,%rax,8),%rcx
shl    $0x8,%rcx
lea    (%rcx,%rax,8),%rcx
lea    (%rcx,%rax,4),%rcx
add    %rcx,%rax
lea    (%rax,%rax,4),%rax
mov    -0xa0(%rbp),%rcx
lea    0x20000(%rax,%rcx,1),%rax
sar    $0x12,%rax
and    $0x3ff,%eax
movslq %eax,%rax
movzbl 0x80(%rax,%r15,1),%eax
mov    %al,0x6(%r9,%r8,1)
mov    -0xe8(%rbp),%rax
lea    0x1(%rax),%ecx
mov    -0xb8(%rbp),%rax
lea    0x20(%rax),%rsi
mov    -0xb0(%rbp),%rdx
cmp    $0xc,%ecx
jle    32adb <jpeg_idct_13x13+0x5fb>
mov    -0xe0(%rbp),%r15
mov    -0xd8(%rbp),%r14
mov    -0xd0(%rbp),%r13
mov    -0xc8(%rbp),%r12
mov    -0xc0(%rbp),%rbx
leaveq 
retq   
data16 nopw %cs:0x0(%rax,%rax,1)
xchg   %ax,%ax

0000000000033140 <jpeg_idct_14x14>:
push   %rbp
mov    %rsp,%rbp
sub    $0x2a0,%rsp
mov    %r8,-0xa0(%rbp)
mov    %rcx,-0xa8(%rbp)
mov    %rbx,-0xb8(%rbp)
mov    %r12,-0xc0(%rbp)
mov    %r13,-0xc8(%rbp)
mov    %r14,-0xd0(%rbp)
mov    %r15,-0xd8(%rbp)
mov    0x1a8(%rdi),%rax
mov    %rax,-0xb0(%rbp)
mov    0x58(%rsi),%rsi
xor    %eax,%eax
lea    -0x2a0(%rbp),%rdi
jmpq   33633 <jpeg_idct_14x14+0x4f3>
movswq 0x10(%rsi),%rcx
movswq 0x10(%rdx),%rbx
imul   %ebx,%ecx
movslq %ecx,%r10
mov    %r10,-0x60(%rbp)
movswq 0x30(%rsi),%rcx
movswq 0x30(%rdx),%rbx
imul   %ebx,%ecx
movslq %ecx,%r15
lea    (%r15,%r10,1),%rcx
lea    (%rcx,%rcx,8),%r8
lea    (%rcx,%r8,2),%rcx
mov    %rcx,%rbx
shl    $0x6,%rbx
shl    $0x9,%rcx
add    %rcx,%rbx
sub    %r8,%rbx
movswq 0x50(%rsi),%rcx
movswq 0x50(%rdx),%r8
imul   %r8d,%ecx
movslq %ecx,%r13
lea    (%r10,%r13,1),%r8
mov    %r8,-0x58(%rbp)
mov    %r8,%rcx
shl    $0x6,%rcx
mov    %r8,%r9
shl    $0xa,%r9
add    %r9,%rcx
lea    (%rcx,%r8,2),%rcx
lea    (%rcx,%rcx,8),%rcx
mov    %rcx,-0x8(%rbp)
lea    (%rcx,%rbx,1),%r9
movswq 0x70(%rsi),%rcx
movswq 0x70(%rdx),%r8
imul   %r8d,%ecx
movslq %ecx,%r8
mov    %r8,-0x18(%rbp)
shl    $0xd,%r8
lea    (%r9,%r8,1),%r12
lea    (%r10,%r10,8),%rcx
shl    $0x6,%rcx
add    %r10,%rcx
shl    $0x4,%rcx
mov    %rax,-0xe0(%rbp)
mov    %r12,%r14
sub    %rcx,%r14
movswq 0x20(%rsi),%rax
movswq 0x20(%rdx),%r9
imul   %r9d,%eax
movslq %eax,%r11
mov    %r11,-0x28(%rbp)
movswq 0x60(%rsi),%rax
movswq 0x60(%rdx),%r9
imul   %r9d,%eax
movslq %eax,%rax
mov    %rax,-0x48(%rbp)
lea    (%r11,%rax,1),%r10
lea    (%r10,%r10,8),%rax
shl    $0x5,%rax
lea    (%r10,%r10,4),%r9
sub    %r9,%rax
shl    $0x5,%rax
lea    (%rax,%r10,2),%r9
mov    %r11,%rax
shl    $0x5,%rax
lea    (%rax,%r11,2),%rax
add    %r11,%rax
shl    $0x6,%rax
lea    (%r11,%r11,2),%r10
mov    %r10,-0x20(%rbp)
sub    %r10,%rax
lea    (%r9,%rax,1),%r10
mov    %r10,-0x68(%rbp)
movswq 0x40(%rsi),%rax
movswq 0x40(%rdx),%r11
imul   %r11d,%eax
movslq %eax,%r11
lea    (%r11,%r11,4),%rax
mov    %rax,-0x10(%rbp)
shl    $0x5,%rax
mov    %rax,-0x38(%rbp)
lea    (%rax,%r11,2),%rax
add    %r11,%rax
shl    $0x6,%rax
lea    (%rax,%r11,4),%rax
lea    (%rax,%r11,2),%rax
mov    %rsi,-0x78(%rbp)
movswq (%rsi),%rsi
mov    %rdx,-0x70(%rbp)
movswq (%rdx),%rdx
imul   %edx,%esi
movslq %esi,%rsi
shl    $0xd,%rsi
add    %rsi,%rax
mov    %rax,-0x50(%rbp)
lea    (%r10,%rax,1),%rdx
lea    0x400(%rdx,%r14,1),%rax
sar    $0xb,%rax
mov    %eax,(%rdi)
sub    %r12,%rcx
lea    0x400(%rdx,%rcx,1),%rax
sar    $0xb,%rax
mov    %eax,0x1a0(%rdi)
lea    (%r15,%r13,1),%rcx
lea    (%rcx,%rcx,4),%rax
shl    $0x4,%rax
add    %rcx,%rax
shl    $0x4,%rax
add    %rcx,%rax
neg    %rax
lea    (%r15,%r15,2),%rcx
shl    $0x7,%rcx
lea    (%rcx,%r15,2),%rcx
lea    (%rcx,%rcx,8),%rcx
add    %r8,%rcx
neg    %rcx
add    %rax,%rcx
lea    (%rcx,%rbx,1),%rdx
mov    -0x48(%rbp),%r10
lea    (%r10,%r10,2),%rcx
shl    $0x4,%rcx
lea    (%rcx,%r10,8),%rcx
sub    %r10,%rcx
shl    $0x8,%rcx
lea    (%rcx,%r10,4),%rcx
mov    %rcx,-0x40(%rbp)
mov    %r9,%rbx
sub    %rcx,%rbx
mov    -0x38(%rbp),%rcx
add    %r11,%rcx
shl    $0x4,%rcx
lea    (%rcx,%r11,2),%rcx
add    %rsi,%rcx
mov    %rcx,-0x30(%rbp)
add    %rcx,%rbx
lea    0x400(%rdx,%rbx,1),%rcx
sar    $0xb,%rcx
mov    %ecx,0x20(%rdi)
lea    0x400(%rbx),%rcx
sub    %rdx,%rcx
sar    $0xb,%rcx
mov    %ecx,0x180(%rdi)
lea    0x0(%r13,%r13,8),%rdx
lea    0x0(%r13,%rdx,2),%rcx
shl    $0xa,%rcx
sub    %rdx,%rcx
add    %r8,%rcx
sub    %rcx,%rax
mov    -0x8(%rbp),%rcx
lea    (%rax,%rcx,1),%r12
mov    -0x28(%rbp),%rcx
lea    (%rcx,%rcx,4),%rax
shl    $0x5,%rax
mov    -0x20(%rbp),%rdx
sub    %rdx,%rax
shl    $0x5,%rax
lea    (%rax,%rcx,2),%rax
lea    (%rcx,%rax,1),%r14
lea    (%r10,%r10,4),%rax
lea    (%r10,%rax,2),%rax
shl    $0x5,%rax
lea    (%r10,%rax,1),%rdx
shl    $0x5,%rdx
mov    %r10,%rax
sub    %rdx,%rax
lea    (%r14,%rax,1),%rcx
lea    (%r11,%r11,2),%rax
lea    (%r11,%rax,2),%rax
shl    $0x4,%rax
lea    (%r11,%rax,1),%rbx
shl    $0x6,%rbx
lea    (%r11,%r11,8),%rax
sub    %rbx,%rax
lea    0x400(%rsi,%rax,1),%rbx
lea    (%rbx,%rcx,1),%rax
lea    (%r12,%rax,1),%rcx
sar    $0xb,%rcx
mov    %ecx,0x40(%rdi)
sub    %r12,%rax
sar    $0xb,%rax
mov    %eax,0x160(%rdi)
mov    -0x10(%rbp),%rax
lea    (%r11,%rax,2),%rax
shl    $0x4,%rax
lea    (%rax,%r11,4),%rax
add    %r11,%rax
shl    $0x6,%rax
lea    (%rax,%r11,2),%rcx
lea    0x400(%rsi),%rax
sub    %rcx,%rax
sar    $0xb,%rax
mov    -0x60(%rbp),%rcx
sub    %r15,%rcx
mov    -0x18(%rbp),%rsi
add    %rcx,%rsi
sub    %r13,%rsi
shl    $0x2,%rsi
lea    (%rax,%rsi,1),%r11
mov    %r11d,0x60(%rdi)
sub    %rsi,%rax
mov    %eax,0x140(%rdi)
mov    %r13,%r11
sub    %r15,%r11
lea    (%r11,%r11,4),%rax
mov    %rax,%rsi
shl    $0x4,%rsi
shl    $0x7,%rax
add    %rax,%rsi
mov    %r15,%rax
sub    %r13,%rax
add    %rsi,%rax
shl    $0x4,%rax
lea    (%rax,%r11,8),%r12
lea    (%r8,%r12,1),%rax
mov    %r13,%r11
shl    $0x5,%r11
mov    %r13,%rsi
shl    $0x9,%rsi
add    %r11,%rsi
lea    (%rsi,%r13,8),%rsi
lea    (%rsi,%r13,2),%rsi
lea    (%rsi,%rsi,4),%rsi
lea    (%rsi,%rsi,4),%rsi
sub    %rsi,%rax
mov    -0x58(%rbp),%r11
lea    (%r11,%r11,2),%rsi
shl    $0x7,%rsi
add    %r11,%rsi
shl    $0x4,%rsi
lea    (%rsi,%r11,4),%r11
lea    (%rax,%r11,1),%rsi
lea    (%r10,%r14,1),%rax
sub    %rax,%rdx
lea    (%rbx,%rdx,1),%rax
lea    (%rsi,%rax,1),%rdx
sar    $0xb,%rdx
mov    %edx,0x80(%rdi)
sub    %rsi,%rax
sar    $0xb,%rax
mov    %eax,0x120(%rdi)
lea    (%r15,%r15,4),%rax
lea    (%r15,%rax,4),%rax
shl    $0x4,%rax
lea    (%rax,%r15,8),%rax
add    %r15,%rax
shl    $0x4,%rax
lea    (%rax,%r15,8),%rax
add    %r15,%rax
add    %r12,%rax
mov    %rcx,%rdx
shl    $0x8,%rdx
lea    (%rdx,%rcx,8),%rdx
lea    (%rdx,%rcx,4),%rdx
lea    (%rdx,%rcx,2),%rdx
add    %r8,%rdx
shl    $0xc,%rcx
sub    %rdx,%rcx
lea    (%rax,%rcx,1),%rsi
mov    -0x40(%rbp),%rax
sub    %r9,%rax
mov    -0x30(%rbp),%rdx
add    %rax,%rdx
lea    0x400(%rsi,%rdx,1),%rax
sar    $0xb,%rax
mov    %eax,0xa0(%rdi)
lea    0x400(%rdx),%rax
sub    %rsi,%rax
sar    $0xb,%rax
mov    %eax,0x100(%rdi)
mov    -0x60(%rbp),%rdx
lea    (%rdx,%rdx,4),%rax
lea    (%rdx,%rax,2),%rax
mov    %rdx,%rsi
shl    $0x9,%rsi
shl    $0xd,%rdx
add    %rsi,%rdx
sub    %rdx,%rax
add    %r11,%rax
lea    (%rax,%rcx,1),%rsi
mov    -0x50(%rbp),%rax
add    $0x400,%rax
mov    -0x68(%rbp),%rdx
mov    %rax,%rcx
sub    %rdx,%rcx
add    %rsi,%rcx
sar    $0xb,%rcx
mov    %ecx,0xc0(%rdi)
lea    (%rsi,%rdx,1),%rcx
sub    %rcx,%rax
sar    $0xb,%rax
mov    %eax,0xe0(%rdi)
mov    -0x78(%rbp),%rax
lea    0x2(%rax),%rsi
mov    -0x70(%rbp),%rax
lea    0x2(%rax),%rdx
add    $0x4,%rdi
mov    -0xe0(%rbp),%rax
add    $0x1,%eax
cmp    $0x7,%eax
jle    3319c <jpeg_idct_14x14+0x5c>
mov    -0xa0(%rbp),%rax
mov    %eax,%r9d
mov    -0xb0(%rbp),%r15
lea    -0x2a0(%rbp),%rsi
xor    %edx,%edx
mov    -0xa8(%rbp),%rdi
jmpq   33bf7 <jpeg_idct_14x14+0xab7>
movslq 0x4(%rsi),%r10
mov    %r10,-0x68(%rbp)
movslq 0xc(%rsi),%r13
mov    %r13,-0x48(%rbp)
lea    0x0(%r13,%r10,1),%rax
lea    (%rax,%rax,8),%rbx
lea    (%rax,%rbx,2),%rax
mov    %rax,%rcx
shl    $0x6,%rcx
shl    $0x9,%rax
add    %rcx,%rax
sub    %rbx,%rax
mov    %rax,-0x90(%rbp)
movslq 0x14(%rsi),%r14
lea    (%r10,%r14,1),%r8
mov    %r8,-0x50(%rbp)
mov    %r8,%rbx
shl    $0x6,%rbx
mov    %r8,%rcx
shl    $0xa,%rcx
add    %rbx,%rcx
lea    (%rcx,%r8,2),%rcx
lea    (%rcx,%rcx,8),%rcx
mov    %rcx,-0x70(%rbp)
add    %rax,%rcx
movslq 0x1c(%rsi),%rax
mov    %rax,-0x60(%rbp)
shl    $0xd,%rax
mov    %rax,-0x88(%rbp)
lea    (%rcx,%rax,1),%r11
lea    (%r10,%r10,8),%rax
shl    $0x6,%rax
lea    (%r10,%rax,1),%rcx
shl    $0x4,%rcx
mov    %r11,%r8
sub    %rcx,%r8
movslq 0x8(%rsi),%r12
mov    %r12,-0x80(%rbp)
movslq 0x18(%rsi),%rax
mov    %rax,-0x98(%rbp)
lea    (%r12,%rax,1),%r10
lea    (%r10,%r10,8),%rax
shl    $0x5,%rax
lea    (%r10,%r10,4),%rbx
sub    %rbx,%rax
shl    $0x5,%rax
lea    (%rax,%r10,2),%rbx
mov    %rbx,-0x40(%rbp)
mov    %r12,%rax
shl    $0x5,%rax
lea    (%rax,%r12,2),%rax
add    %r12,%rax
shl    $0x6,%rax
lea    (%r12,%r12,2),%r10
mov    %r10,-0x78(%rbp)
sub    %r10,%rax
lea    (%rbx,%rax,1),%r10
mov    %r10,-0x38(%rbp)
movslq 0x10(%rsi),%r12
lea    (%r12,%r12,4),%rax
mov    %rax,-0x58(%rbp)
shl    $0x5,%rax
mov    %rax,-0xa0(%rbp)
lea    (%rax,%r12,2),%rax
add    %r12,%rax
shl    $0x6,%rax
lea    (%rax,%r12,4),%rax
lea    (%rax,%r12,2),%rax
mov    %rsi,-0xb0(%rbp)
mov    %rax,-0x28(%rbp)
movslq (%rsi),%rsi
shl    $0xd,%rsi
mov    %rsi,-0x30(%rbp)
add    %rsi,%rax
add    %rax,%r10
lea    0x20000(%r8,%r10,1),%rax
sar    $0x12,%rax
and    $0x3ff,%eax
movslq %eax,%rax
movzbl 0x80(%r15,%rax,1),%eax
mov    %rdx,-0xe0(%rbp)
movslq %edx,%rdx
mov    (%rdi,%rdx,8),%r8
mov    %al,(%r9,%r8,1)
sub    %r11,%rcx
lea    0x20000(%rcx,%r10,1),%rax
sar    $0x12,%rax
and    $0x3ff,%eax
movslq %eax,%rax
movzbl 0x80(%r15,%rax,1),%eax
mov    %al,0xd(%r9,%r8,1)
lea    0x0(%r13,%r14,1),%rdx
lea    (%rdx,%rdx,4),%rax
shl    $0x4,%rax
add    %rdx,%rax
shl    $0x4,%rax
lea    (%rdx,%rax,1),%rcx
neg    %rcx
lea    0x0(%r13,%r13,2),%rax
shl    $0x7,%rax
lea    (%rax,%r13,2),%rax
lea    (%rax,%rax,8),%rax
mov    -0x88(%rbp),%r13
add    %r13,%rax
neg    %rax
add    %rcx,%rax
mov    -0x90(%rbp),%rdi
add    %rax,%rdi
mov    -0x98(%rbp),%r11
lea    (%r11,%r11,2),%rax
shl    $0x4,%rax
lea    (%rax,%r11,8),%rax
sub    %r11,%rax
shl    $0x8,%rax
lea    (%rax,%r11,4),%rax
mov    %rax,-0x88(%rbp)
sub    %rax,%rbx
mov    -0xa0(%rbp),%rax
add    %r12,%rax
shl    $0x4,%rax
lea    (%rax,%r12,2),%rax
lea    (%rsi,%rax,1),%r10
mov    %r10,-0x90(%rbp)
lea    (%rbx,%r10,1),%rax
lea    0x20000(%rdi,%rax,1),%rax
sar    $0x12,%rax
and    $0x3ff,%eax
movslq %eax,%rax
movzbl 0x80(%r15,%rax,1),%eax
mov    %al,0x1(%r9,%r8,1)
lea    0x20000(%rbx,%r10,1),%rax
sub    %rdi,%rax
sar    $0x12,%rax
and    $0x3ff,%eax
movslq %eax,%rax
movzbl 0x80(%r15,%rax,1),%eax
mov    %al,0xc(%r9,%r8,1)
lea    (%r14,%r14,8),%rdi
lea    (%r14,%rdi,2),%rax
shl    $0xa,%rax
sub    %rdi,%rax
add    %r13,%rax
sub    %rax,%rcx
mov    -0x70(%rbp),%rax
lea    (%rcx,%rax,1),%rdi
mov    -0x80(%rbp),%rcx
lea    (%rcx,%rcx,4),%rax
shl    $0x5,%rax
mov    -0x78(%rbp),%rbx
sub    %rbx,%rax
shl    $0x5,%rax
lea    (%rax,%rcx,2),%rax
lea    (%rcx,%rax,1),%r10
lea    (%r11,%r11,4),%rax
lea    (%r11,%rax,2),%rax
shl    $0x5,%rax
add    %r11,%rax
shl    $0x5,%rax
mov    %rax,-0x98(%rbp)
neg    %rax
add    %r11,%rax
lea    (%r10,%rax,1),%rcx
lea    (%r12,%r12,2),%rax
lea    (%r12,%rax,2),%rax
shl    $0x4,%rax
add    %r12,%rax
shl    $0x6,%rax
lea    (%r12,%r12,8),%rbx
sub    %rax,%rbx
lea    0x20000(%rsi,%rbx,1),%rbx
lea    (%rbx,%rcx,1),%rax
lea    (%rdi,%rax,1),%rcx
sar    $0x12,%rcx
and    $0x3ff,%ecx
movslq %ecx,%rcx
movzbl 0x80(%r15,%rcx,1),%ecx
mov    %cl,0x2(%r9,%r8,1)
sub    %rdi,%rax
sar    $0x12,%rax
and    $0x3ff,%eax
movslq %eax,%rax
movzbl 0x80(%r15,%rax,1),%eax
mov    %al,0xb(%r9,%r8,1)
mov    -0x68(%rbp),%rdi
mov    %rdi,%rax
sub    %rdx,%rax
mov    -0x60(%rbp),%rcx
lea    (%rcx,%rax,1),%rdx
shl    $0xd,%rdx
mov    -0x58(%rbp),%rax
lea    (%r12,%rax,2),%rax
shl    $0x4,%rax
lea    (%rax,%r12,4),%rax
add    %r12,%rax
shl    $0x6,%rax
lea    (%rax,%r12,2),%r12
lea    0x20000(%rsi),%rax
mov    %rax,%rcx
sub    %r12,%rcx
add    %rdx,%rcx
sar    $0x12,%rcx
and    $0x3ff,%ecx
movslq %ecx,%rcx
movzbl 0x80(%r15,%rcx,1),%ecx
mov    %cl,0x3(%r9,%r8,1)
lea    (%rdx,%r12,1),%rcx
sub    %rcx,%rax
sar    $0x12,%rax
and    $0x3ff,%eax
movslq %eax,%rax
movzbl 0x80(%r15,%rax,1),%eax
mov    %al,0xa(%r9,%r8,1)
mov    -0x50(%rbp),%rcx
lea    (%rcx,%rcx,2),%rax
shl    $0x7,%rax
add    %rcx,%rax
shl    $0x4,%rax
lea    (%rax,%rcx,4),%r12
mov    -0x48(%rbp),%rsi
mov    %r14,%rdx
sub    %rsi,%rdx
lea    (%rdx,%rdx,4),%rax
mov    %rax,%rcx
shl    $0x4,%rcx
shl    $0x7,%rax
add    %rax,%rcx
mov    %rsi,%rax
sub    %r14,%rax
add    %rcx,%rax
shl    $0x4,%rax
lea    (%rax,%rdx,8),%rax
mov    %rax,-0x80(%rbp)
add    %r13,%rax
mov    %r14,%rdx
shl    $0x5,%rdx
mov    %r14,%rcx
shl    $0x9,%rcx
add    %rdx,%rcx
lea    (%rcx,%r14,8),%rcx
lea    (%rcx,%r14,2),%rcx
lea    (%rcx,%rcx,4),%rcx
lea    (%rcx,%rcx,4),%rcx
sub    %rcx,%rax
lea    (%rax,%r12,1),%rdx
lea    (%r11,%r10,1),%rcx
mov    -0x98(%rbp),%rax
sub    %rcx,%rax
add    %rbx,%rax
lea    (%rdx,%rax,1),%rcx
sar    $0x12,%rcx
and    $0x3ff,%ecx
movslq %ecx,%rcx
movzbl 0x80(%r15,%rcx,1),%ecx
mov    %cl,0x4(%r9,%r8,1)
sub    %rdx,%rax
sar    $0x12,%rax
and    $0x3ff,%eax
movslq %eax,%rax
movzbl 0x80(%r15,%rax,1),%eax
mov    %al,0x9(%r9,%r8,1)
mov    %rdi,%rcx
sub    %rsi,%rcx
mov    %rcx,%rax
shl    $0x8,%rax
lea    (%rax,%rcx,8),%rax
lea    (%rax,%rcx,4),%rax
lea    (%rax,%rcx,2),%rax
add    %r13,%rax
shl    $0xc,%rcx
sub    %rax,%rcx
lea    (%rsi,%rsi,4),%rax
lea    (%rsi,%rax,4),%rax
shl    $0x4,%rax
lea    (%rax,%rsi,8),%rax
add    %rsi,%rax
shl    $0x4,%rax
lea    (%rax,%rsi,8),%rax
add    %rsi,%rax
mov    -0x80(%rbp),%rdx
add    %rdx,%rax
lea    (%rax,%rcx,1),%rsi
mov    -0x40(%rbp),%rax
mov    -0x88(%rbp),%rdx
sub    %rax,%rdx
mov    -0x90(%rbp),%rbx
lea    (%rdx,%rbx,1),%rax
lea    0x20000(%rsi,%rax,1),%rax
sar    $0x12,%rax
and    $0x3ff,%eax
movslq %eax,%rax
movzbl 0x80(%r15,%rax,1),%eax
mov    %al,0x5(%r9,%r8,1)
lea    0x20000(%rdx,%rbx,1),%rax
sub    %rsi,%rax
sar    $0x12,%rax
and    $0x3ff,%eax
movslq %eax,%rax
movzbl 0x80(%r15,%rax,1),%eax
mov    %al,0x8(%r9,%r8,1)
lea    (%rdi,%rdi,4),%rax
lea    (%rdi,%rax,2),%rax
mov    %rdi,%rdx
shl    $0x9,%rdx
shl    $0xd,%rdi
add    %rdi,%rdx
sub    %rdx,%rax
add    %r12,%rax
lea    (%rax,%rcx,1),%rdx
mov    -0x30(%rbp),%rax
mov    -0x28(%rbp),%rcx
lea    0x20000(%rcx,%rax,1),%rax
mov    -0x38(%rbp),%rsi
mov    %rax,%rcx
sub    %rsi,%rcx
add    %rdx,%rcx
sar    $0x12,%rcx
and    $0x3ff,%ecx
movslq %ecx,%rcx
movzbl 0x80(%r15,%rcx,1),%ecx
mov    %cl,0x6(%r9,%r8,1)
lea    (%rdx,%rsi,1),%rcx
sub    %rcx,%rax
sar    $0x12,%rax
and    $0x3ff,%eax
movslq %eax,%rax
movzbl 0x80(%rax,%r15,1),%eax
mov    %al,0x7(%r9,%r8,1)
mov    -0xe0(%rbp),%rax
lea    0x1(%rax),%edx
mov    -0xb0(%rbp),%rax
lea    0x20(%rax),%rsi
mov    -0xa8(%rbp),%rdi
cmp    $0xd,%edx
jle    33662 <jpeg_idct_14x14+0x522>
mov    -0xd8(%rbp),%r15
mov    -0xd0(%rbp),%r14
mov    -0xc8(%rbp),%r13
mov    -0xc0(%rbp),%r12
mov    -0xb8(%rbp),%rbx
leaveq 
retq   
data16 nopw %cs:0x0(%rax,%rax,1)

0000000000033c30 <jpeg_idct_15x15>:
push   %rbp
mov    %rsp,%rbp
sub    $0x300,%rsp
mov    %r8,-0xd8(%rbp)
mov    %rcx,-0xe0(%rbp)
mov    %rbx,-0xf0(%rbp)
mov    %r12,-0xf8(%rbp)
mov    %r13,-0x100(%rbp)
mov    %r14,-0x108(%rbp)
mov    %r15,-0x110(%rbp)
mov    0x1a8(%rdi),%rax
mov    %rax,-0xe8(%rbp)
mov    0x58(%rsi),%rcx
xor    %esi,%esi
lea    -0x2f8(%rbp),%rdi
jmpq   34213 <jpeg_idct_15x15+0x5e3>
movswq 0x40(%rcx),%rax
movswq 0x40(%rdx),%rbx
imul   %ebx,%eax
movslq %eax,%r10
mov    %r10,-0x68(%rbp)
movswq 0x20(%rcx),%rax
movswq 0x20(%rdx),%rbx
imul   %ebx,%eax
movslq %eax,%r8
mov    %r8,-0x70(%rbp)
lea    (%r10,%r8,1),%r9
mov    %r9,-0x58(%rbp)
lea    (%r9,%r9,4),%rax
shl    $0x5,%rax
lea    (%rax,%r9,8),%rax
lea    (%rax,%r9,2),%rax
add    %r9,%rax
shl    $0x6,%rax
lea    (%rax,%r9,8),%rax
lea    (%rax,%r9,4),%rax
lea    (%rax,%r9,2),%r15
mov    %r15,-0x8(%rbp)
movswq 0x60(%rcx),%rax
movswq 0x60(%rdx),%rbx
imul   %ebx,%eax
movslq %eax,%r13
mov    %r13,%r12
shl    $0x2,%r12
lea    0x0(%r13,%r13,8),%rax
shl    $0x5,%rax
add    %r12,%rax
add    %r13,%rax
shl    $0x5,%rax
lea    0x0(%r13,%r13,2),%r11
sub    %r11,%rax
movswq (%rcx),%rbx
movswq (%rdx),%r14
imul   %r14d,%ebx
movslq %ebx,%rbx
shl    $0xd,%rbx
add    %rbx,%rax
mov    %rax,-0x38(%rbp)
lea    (%rax,%r15,1),%r14
mov    %rsi,-0x118(%rbp)
sub    %r10,%r8
mov    %r8,-0xa0(%rbp)
lea    (%r8,%r8,2),%rax
mov    %rax,-0x60(%rbp)
shl    $0x7,%rax
lea    (%r8,%r8,4),%rsi
add    %rsi,%rsi
mov    %rsi,-0x98(%rbp)
sub    %rsi,%rax
mov    %rax,-0x10(%rbp)
lea    (%r14,%rax,1),%rsi
movswq 0x10(%rcx),%rax
movswq 0x10(%rdx),%r8
imul   %r8d,%eax
movslq %eax,%rax
mov    %rax,-0x80(%rbp)
movswq 0x70(%rcx),%r8
movswq 0x70(%rdx),%r10
imul   %r10d,%r8d
movslq %r8d,%r14
sub    %r14,%rax
lea    (%rax,%rax,4),%r8
shl    $0x3,%r8
lea    (%r8,%rax,4),%r8
add    %rax,%r8
shl    $0x8,%r8
lea    (%r8,%rax,2),%r8
movswq 0x50(%rcx),%rax
movswq 0x50(%rdx),%r10
imul   %r10d,%eax
movslq %eax,%r15
lea    (%r15,%r15,2),%rax
lea    (%r15,%rax,4),%r10
lea    (%r15,%r15,4),%rax
shl    $0x7,%rax
sub    %r10,%rax
shl    $0x4,%rax
add    %r15,%rax
mov    %rax,-0x40(%rbp)
lea    (%rax,%r8,1),%r10
mov    %r10,-0x78(%rbp)
lea    (%r14,%r14,4),%rax
lea    (%r14,%rax,2),%r8
shl    $0x7,%rax
sub    %r8,%rax
shl    $0x5,%rax
lea    (%rax,%r14,2),%rax
add    %r14,%rax
add    %r10,%rax
movswq 0x30(%rcx),%r8
mov    %rdx,-0xb0(%rbp)
movswq 0x30(%rdx),%rdx
imul   %edx,%r8d
movslq %r8d,%r10
lea    (%r10,%r10,4),%r8
mov    %rcx,-0xb8(%rbp)
mov    %r8,%rcx
shl    $0x3,%rcx
lea    (%rcx,%r10,2),%rcx
add    %r10,%rcx
shl    $0x8,%rcx
lea    (%rcx,%r10,8),%rcx
lea    (%rcx,%r10,2),%rcx
mov    %rcx,-0x48(%rbp)
add    %rax,%rcx
lea    0x400(%rsi,%rcx,1),%rax
sar    $0xb,%rax
mov    %eax,(%rdi)
sub    %rcx,%rsi
lea    0x400(%rsi),%rax
sar    $0xb,%rax
mov    %eax,0x1c0(%rdi)
lea    (%r9,%r9,2),%rax
shl    $0x5,%rax
lea    (%rax,%r9,4),%rax
add    %r9,%rax
shl    $0x6,%rax
lea    (%rax,%r9,8),%rax
lea    (%rax,%r9,4),%rdx
mov    %rdx,-0x28(%rbp)
lea    0x0(%r13,%r11,2),%rcx
shl    $0x9,%rcx
mov    %r12,%rax
sub    %rcx,%rax
lea    0x400(%rbx,%rax,1),%rax
mov    %rax,-0x50(%rbp)
lea    (%rax,%rdx,1),%rsi
mov    -0xa0(%rbp),%rdx
mov    -0x98(%rbp),%rax
add    %rdx,%rax
shl    $0x4,%rax
lea    (%rax,%rdx,4),%rax
lea    (%rdx,%rax,1),%r9
mov    %r9,-0x90(%rbp)
mov    %r9,%rax
shl    $0x4,%rax
mov    %rax,-0x30(%rbp)
lea    (%rsi,%rax,1),%rdx
mov    %r10,%rax
sub    %r14,%rax
mov    %rax,-0x18(%rbp)
mov    -0x80(%rbp),%rsi
lea    (%rsi,%rax,1),%r11
lea    (%r11,%r11,4),%rax
shl    $0x4,%rax
lea    (%rax,%r11,4),%rax
add    %r11,%rax
shl    $0x4,%rax
lea    (%rax,%r11,2),%rax
lea    (%rax,%rax,4),%r11
mov    %r11,-0x20(%rbp)
mov    %rsi,%rax
shl    $0x8,%rax
lea    (%rax,%rsi,8),%rax
sub    %rsi,%rax
shl    $0x4,%rax
add    %rsi,%rax
add    %rax,%r11
lea    (%r11,%rdx,1),%rax
sar    $0xb,%rax
mov    %eax,0x20(%rdi)
sub    %r11,%rdx
sar    $0xb,%rdx
mov    %edx,0x1a0(%rdi)
shl    $0x5,%r9
lea    0x0(%r13,%r12,1),%rax
lea    0x0(%r13,%rax,2),%rax
shl    $0x4,%rax
add    %r12,%rax
add    %r13,%rax
shl    $0x6,%rax
lea    (%rax,%r13,2),%rax
mov    %rax,-0xa8(%rbp)
lea    0x400(%rbx),%rdx
mov    %rdx,-0x88(%rbp)
neg    %rax
add    %rdx,%rax
lea    (%rax,%r9,1),%r11
lea    (%r14,%r15,1),%rax
mov    %rsi,%r9
sub    %rax,%r9
lea    (%r9,%r9,2),%rax
lea    (%r9,%rax,4),%rbx
lea    (%r9,%r9,4),%rax
shl    $0x7,%rax
sub    %rbx,%rax
shl    $0x4,%rax
add    %r9,%rax
add    %r11,%rax
sar    $0xb,%rax
mov    %eax,0x40(%rdi)
mov    %r14,%rax
sub    %rsi,%rax
lea    (%r15,%rax,1),%rbx
lea    (%rbx,%rbx,2),%rax
lea    (%rbx,%rax,4),%r9
lea    (%rbx,%rbx,4),%rax
shl    $0x7,%rax
sub    %r9,%rax
shl    $0x4,%rax
add    %rbx,%rax
add    %r11,%rax
sar    $0xb,%rax
mov    %eax,0x180(%rdi)
sub    %r12,%rcx
mov    -0x8(%rbp),%rax
add    %rcx,%rax
sub    %rax,%rdx
mov    -0x10(%rbp),%rax
lea    (%rdx,%rax,1),%rcx
mov    -0x70(%rbp),%r9
lea    (%r9,%r9,2),%rax
shl    $0x3,%rax
sub    %r9,%rax
shl    $0x5,%rax
add    %r9,%rax
shl    $0x4,%rax
lea    (%rax,%r9,2),%rax
lea    (%r9,%rax,1),%r11
lea    (%rcx,%r11,1),%rbx
lea    (%rsi,%r14,1),%rcx
lea    (%rcx,%rcx,8),%rax
shl    $0x4,%rax
lea    (%rax,%rcx,2),%rax
add    %rcx,%rax
shl    $0x5,%rax
lea    (%rax,%rcx,8),%rdx
lea    (%rsi,%rsi,4),%rcx
mov    %rcx,%rax
shl    $0x5,%rax
lea    (%rax,%rcx,8),%rax
neg    %rax
add    %rsi,%rax
mov    %rsi,%rcx
shl    $0xc,%rcx
add    %rcx,%rax
lea    (%rdx,%rax,1),%r12
shl    $0x4,%r8
lea    (%r8,%r10,4),%rax
add    %r10,%rax
shl    $0x4,%rax
lea    (%rax,%r10,2),%rax
lea    (%rax,%rax,4),%r13
mov    -0x40(%rbp),%r10
lea    0x0(%r13,%r10,1),%rax
mov    %r12,%rcx
sub    %rax,%rcx
add    %rbx,%rcx
sar    $0xb,%rcx
mov    %ecx,0x60(%rdi)
sub    %r12,%rax
add    %rbx,%rax
sar    $0xb,%rax
mov    %eax,0x160(%rdi)
mov    -0x38(%rbp),%rax
lea    0x400(%rax),%rcx
mov    -0x28(%rbp),%rax
mov    %rcx,%rbx
sub    %rax,%rbx
mov    -0x30(%rbp),%rax
lea    (%rbx,%rax,1),%r12
mov    -0x18(%rbp),%rbx
mov    %rbx,%rax
shl    $0x5,%rax
mov    %rbx,%r8
shl    $0x9,%r8
add    %r8,%rax
lea    (%rax,%rbx,8),%rax
lea    (%rax,%rbx,4),%rax
add    %rbx,%rax
shl    $0x5,%rax
lea    (%rax,%rbx,4),%rax
mov    -0x20(%rbp),%r8
mov    %r8,%rbx
sub    %rax,%rbx
add    %r12,%rbx
sar    $0xb,%rbx
mov    %ebx,0x80(%rdi)
sub    %r8,%rax
add    %r12,%rax
sar    $0xb,%rax
mov    %eax,0x140(%rdi)
mov    -0x60(%rbp),%rax
shl    $0x4,%rax
mov    -0xa0(%rbp),%rbx
lea    (%rax,%rbx,2),%rax
add    %rbx,%rax
shl    $0x6,%rax
lea    (%rax,%rbx,8),%rbx
mov    -0x68(%rbp),%rax
sub    %r9,%rax
lea    (%rbx,%rax,1),%r15
mov    -0x58(%rbp),%rbx
mov    %rbx,%rax
shl    $0x5,%rax
lea    (%rax,%rbx,2),%rax
add    %rbx,%rax
shl    $0x7,%rax
lea    (%rax,%rbx,2),%rbx
lea    (%r15,%rbx,1),%r12
mov    %rcx,%r8
sub    %r12,%r8
lea    (%r14,%r14,2),%r9
lea    (%r14,%r9,2),%rax
shl    $0x6,%rax
sub    %r9,%rax
shl    $0x4,%rax
add    %r14,%rax
sub    %rax,%rdx
lea    (%rdx,%r10,1),%rax
mov    -0x48(%rbp),%rdx
sub    %rdx,%rax
lea    (%r8,%rax,1),%rdx
sar    $0xb,%rdx
mov    %edx,0xa0(%rdi)
add    %r12,%rax
sub    %rax,%rcx
sar    $0xb,%rcx
mov    %ecx,0x120(%rdi)
mov    -0x50(%rbp),%rax
add    %rbx,%rax
lea    (%r11,%r15,1),%rbx
mov    %rax,%rdx
sub    %rbx,%rdx
imul   $0x2399,%rsi,%rsi
add    %r13,%rsi
mov    -0x78(%rbp),%rcx
sub    %rsi,%rcx
add    %rcx,%rdx
sar    $0xb,%rdx
mov    %edx,0xc0(%rdi)
add    %rbx,%rcx
sub    %rcx,%rax
sar    $0xb,%rax
mov    %eax,0x100(%rdi)
mov    -0x90(%rbp),%rax
shl    $0x6,%rax
mov    -0xa8(%rbp),%rcx
add    %rax,%rcx
mov    -0x88(%rbp),%rax
sub    %rcx,%rax
sar    $0xb,%rax
mov    %eax,0xe0(%rdi)
mov    -0xb8(%rbp),%rax
lea    0x2(%rax),%rcx
mov    -0xb0(%rbp),%rax
lea    0x2(%rax),%rdx
add    $0x4,%rdi
mov    -0x118(%rbp),%rax
lea    0x1(%rax),%esi
cmp    $0x7,%esi
jle    33c8c <jpeg_idct_15x15+0x5c>
mov    -0xd8(%rbp),%rax
mov    %eax,%r9d
mov    -0xe8(%rbp),%r15
lea    -0x2f8(%rbp),%rdi
xor    %esi,%esi
mov    -0xe0(%rbp),%rdx
jmpq   348b8 <jpeg_idct_15x15+0xc88>
movslq 0x8(%rdi),%r8
mov    %r8,-0x98(%rbp)
movslq 0x10(%rdi),%rbx
mov    %rbx,-0x58(%rbp)
mov    %r8,%r14
sub    %rbx,%r14
mov    %r14,-0x50(%rbp)
lea    (%r14,%r14,4),%rax
lea    (%rax,%rax,1),%r13
lea    (%r14,%r14,2),%rcx
mov    %rcx,-0x48(%rbp)
shl    $0x7,%rcx
sub    %r13,%rcx
mov    %rcx,-0x90(%rbp)
lea    (%rbx,%r8,1),%r10
mov    %r10,-0x60(%rbp)
lea    (%r10,%r10,4),%rax
shl    $0x5,%rax
lea    (%rax,%r10,8),%rax
lea    (%rax,%r10,2),%rax
add    %r10,%rax
shl    $0x6,%rax
lea    (%rax,%r10,8),%rax
lea    (%rax,%r10,4),%rax
lea    (%rax,%r10,2),%r8
mov    %r8,-0x88(%rbp)
movslq 0x18(%rdi),%r11
mov    %r11,-0xd0(%rbp)
mov    %r11,%rbx
shl    $0x2,%rbx
mov    %rbx,-0xc8(%rbp)
lea    (%r11,%r11,8),%rax
shl    $0x5,%rax
add    %rbx,%rax
add    %r11,%rax
shl    $0x5,%rax
lea    (%r11,%r11,2),%rbx
mov    %rbx,-0xd8(%rbp)
sub    %rbx,%rax
mov    %rax,-0x70(%rbp)
movslq (%rdi),%rbx
shl    $0xd,%rbx
mov    %rbx,-0xc0(%rbp)
add    %rbx,%rax
add    %r8,%rax
add    %rax,%rcx
movslq 0x4(%rdi),%rax
mov    %rax,-0xb8(%rbp)
movslq 0x1c(%rdi),%r11
sub    %r11,%rax
lea    (%rax,%rax,4),%rbx
shl    $0x3,%rbx
lea    (%rbx,%rax,4),%rbx
add    %rax,%rbx
shl    $0x8,%rbx
lea    (%rbx,%rax,2),%rbx
movslq 0x14(%rdi),%r12
lea    (%r12,%r12,2),%rax
lea    (%r12,%rax,4),%r8
lea    (%r12,%r12,4),%rax
shl    $0x7,%rax
sub    %r8,%rax
shl    $0x4,%rax
add    %r12,%rax
mov    %rax,-0xb0(%rbp)
lea    (%rax,%rbx,1),%r8
mov    %r8,-0x40(%rbp)
lea    (%r11,%r11,4),%rax
lea    (%r11,%rax,2),%rbx
shl    $0x7,%rax
sub    %rbx,%rax
shl    $0x5,%rax
lea    (%rax,%r11,2),%rax
add    %r11,%rax
add    %rax,%r8
movslq 0xc(%rdi),%rbx
mov    %rdi,-0xe8(%rbp)
mov    %rbx,-0xa8(%rbp)
lea    (%rbx,%rbx,4),%rax
mov    %rax,-0xa0(%rbp)
shl    $0x3,%rax
lea    (%rax,%rbx,2),%rax
add    %rbx,%rax
shl    $0x8,%rax
lea    (%rax,%rbx,8),%rax
lea    (%rax,%rbx,2),%rax
mov    %rax,-0x68(%rbp)
lea    (%r8,%rax,1),%rdi
lea    0x20000(%rcx,%rdi,1),%rax
sar    $0x12,%rax
and    $0x3ff,%eax
movslq %eax,%rax
movzbl 0x80(%r15,%rax,1),%eax
mov    %rsi,-0x118(%rbp)
movslq %esi,%rsi
mov    (%rdx,%rsi,8),%r8
mov    %al,(%r9,%r8,1)
sub    %rdi,%rcx
lea    0x20000(%rcx),%rax
sar    $0x12,%rax
and    $0x3ff,%eax
movslq %eax,%rax
movzbl 0x80(%r15,%rax,1),%eax
mov    %al,0xe(%r9,%r8,1)
lea    (%r14,%r13,1),%rax
shl    $0x4,%rax
lea    (%rax,%r14,4),%rax
lea    (%r14,%rax,1),%rsi
mov    %rsi,-0x28(%rbp)
mov    %rsi,%rcx
shl    $0x4,%rcx
mov    %rcx,-0x80(%rbp)
lea    (%r10,%r10,2),%rax
shl    $0x5,%rax
lea    (%rax,%r10,4),%rax
add    %r10,%rax
shl    $0x6,%rax
lea    (%rax,%r10,8),%rax
lea    (%rax,%r10,4),%rax
mov    %rax,-0x78(%rbp)
mov    -0xd0(%rbp),%r10
mov    -0xd8(%rbp),%rdx
lea    (%r10,%rdx,2),%rdx
shl    $0x9,%rdx
mov    -0xc8(%rbp),%r14
mov    %r14,%rdi
sub    %rdx,%rdi
mov    -0xc0(%rbp),%r13
lea    0x20000(%r13,%rdi,1),%rdi
mov    %rdi,-0x38(%rbp)
add    %rdi,%rax
add    %rcx,%rax
sub    %r11,%rbx
mov    %rbx,-0xd0(%rbp)
mov    -0xb8(%rbp),%rdi
add    %rdi,%rbx
lea    (%rbx,%rbx,4),%rcx
shl    $0x4,%rcx
lea    (%rcx,%rbx,4),%rcx
add    %rbx,%rcx
shl    $0x4,%rcx
lea    (%rcx,%rbx,2),%rcx
lea    (%rcx,%rcx,4),%rbx
mov    %rbx,-0xc8(%rbp)
mov    %rdi,%rcx
shl    $0x8,%rcx
lea    (%rcx,%rdi,8),%rcx
sub    %rdi,%rcx
shl    $0x4,%rcx
add    %rdi,%rcx
add    %rcx,%rbx
lea    (%rbx,%rax,1),%rcx
sar    $0x12,%rcx
and    $0x3ff,%ecx
movslq %ecx,%rcx
movzbl 0x80(%r15,%rcx,1),%ecx
mov    %cl,0x1(%r9,%r8,1)
sub    %rbx,%rax
sar    $0x12,%rax
and    $0x3ff,%eax
movslq %eax,%rax
movzbl 0x80(%r15,%rax,1),%eax
mov    %al,0xd(%r9,%r8,1)
shl    $0x5,%rsi
lea    (%r10,%r14,1),%rax
lea    (%r10,%rax,2),%rax
shl    $0x4,%rax
add    %r14,%rax
add    %r10,%rax
shl    $0x6,%rax
lea    (%rax,%r10,2),%rax
mov    %rax,-0x30(%rbp)
lea    0x20000(%r13),%rcx
mov    %rcx,-0x20(%rbp)
neg    %rax
add    %rcx,%rax
lea    (%rax,%rsi,1),%r10
lea    (%r11,%r12,1),%rax
mov    %rdi,%rbx
sub    %rax,%rbx
lea    (%rbx,%rbx,2),%rax
lea    (%rbx,%rax,4),%rsi
lea    (%rbx,%rbx,4),%rax
shl    $0x7,%rax
sub    %rsi,%rax
shl    $0x4,%rax
add    %rbx,%rax
add    %r10,%rax
sar    $0x12,%rax
and    $0x3ff,%eax
movslq %eax,%rax
movzbl 0x80(%r15,%rax,1),%eax
mov    %al,0x2(%r9,%r8,1)
mov    %r11,%rax
sub    %rdi,%rax
lea    (%r12,%rax,1),%rbx
lea    (%rbx,%rbx,2),%rax
lea    (%rbx,%rax,4),%rsi
lea    (%rbx,%rbx,4),%rax
shl    $0x7,%rax
sub    %rsi,%rax
shl    $0x4,%rax
add    %rbx,%rax
add    %r10,%rax
sar    $0x12,%rax
and    $0x3ff,%eax
movslq %eax,%rax
movzbl 0x80(%r15,%rax,1),%eax
mov    %al,0xc(%r9,%r8,1)
sub    %r14,%rdx
mov    -0x88(%rbp),%rax
add    %rdx,%rax
sub    %rax,%rcx
mov    -0x90(%rbp),%rax
add    %rax,%rcx
mov    -0x98(%rbp),%r10
lea    (%r10,%r10,2),%rax
shl    $0x3,%rax
sub    %r10,%rax
shl    $0x5,%rax
add    %r10,%rax
shl    $0x4,%rax
lea    (%rax,%r10,2),%rax
lea    (%r10,%rax,1),%r12
lea    (%rcx,%r12,1),%rbx
mov    -0xa0(%rbp),%rax
shl    $0x4,%rax
mov    -0xa8(%rbp),%rcx
lea    (%rax,%rcx,4),%rax
add    %rcx,%rax
shl    $0x4,%rax
lea    (%rax,%rcx,2),%rax
lea    (%rax,%rax,4),%rax
mov    %rax,-0xc0(%rbp)
mov    -0xb0(%rbp),%r14
lea    (%rax,%r14,1),%rcx
lea    (%rdi,%r11,1),%rdx
lea    (%rdx,%rdx,8),%rax
shl    $0x4,%rax
lea    (%rax,%rdx,2),%rax
add    %rdx,%rax
shl    $0x5,%rax
lea    (%rax,%rdx,8),%rdx
lea    (%rdi,%rdi,4),%rsi
mov    %rsi,%rax
shl    $0x5,%rax
lea    (%rax,%rsi,8),%rax
neg    %rax
add    %rdi,%rax
shl    $0xc,%rdi
add    %rdi,%rax
lea    (%rdx,%rax,1),%rsi
mov    %rsi,%rax
sub    %rcx,%rax
add    %rbx,%rax
sar    $0x12,%rax
and    $0x3ff,%eax
movslq %eax,%rax
movzbl 0x80(%r15,%rax,1),%eax
mov    %al,0x3(%r9,%r8,1)
sub    %rsi,%rcx
lea    (%rbx,%rcx,1),%rax
sar    $0x12,%rax
and    $0x3ff,%eax
movslq %eax,%rax
movzbl 0x80(%r15,%rax,1),%eax
mov    %al,0xb(%r9,%r8,1)
mov    -0x70(%rbp),%rax
lea    0x20000(%r13,%rax,1),%rcx
mov    -0x78(%rbp),%rax
neg    %rax
add    %rcx,%rax
mov    -0x80(%rbp),%rsi
lea    (%rax,%rsi,1),%rdi
mov    -0xd0(%rbp),%rbx
mov    %rbx,%rsi
shl    $0x5,%rsi
mov    %rbx,%rax
shl    $0x9,%rax
add    %rsi,%rax
lea    (%rax,%rbx,8),%rax
lea    (%rax,%rbx,4),%rax
add    %rbx,%rax
shl    $0x5,%rax
lea    (%rax,%rbx,4),%rsi
mov    -0xc8(%rbp),%rbx
mov    %rbx,%rax
sub    %rsi,%rax
add    %rdi,%rax
sar    $0x12,%rax
and    $0x3ff,%eax
movslq %eax,%rax
movzbl 0x80(%r15,%rax,1),%eax
mov    %al,0x4(%r9,%r8,1)
sub    %rbx,%rsi
lea    (%rsi,%rdi,1),%rax
sar    $0x12,%rax
and    $0x3ff,%eax
movslq %eax,%rax
movzbl 0x80(%r15,%rax,1),%eax
mov    %al,0xa(%r9,%r8,1)
mov    -0x60(%rbp),%rsi
mov    %rsi,%rax
shl    $0x5,%rax
lea    (%rax,%rsi,2),%rax
add    %rsi,%rax
shl    $0x7,%rax
lea    (%rax,%rsi,2),%r13
mov    -0x48(%rbp),%rax
shl    $0x4,%rax
mov    -0x50(%rbp),%rsi
lea    (%rax,%rsi,2),%rax
add    %rsi,%rax
shl    $0x6,%rax
lea    (%rax,%rsi,8),%rsi
mov    -0x58(%rbp),%rax
sub    %r10,%rax
lea    (%rsi,%rax,1),%r10
lea    (%r10,%r13,1),%rbx
mov    %rcx,%rsi
sub    %rbx,%rsi
lea    (%r11,%r11,2),%rdi
lea    (%r11,%rdi,2),%rax
shl    $0x6,%rax
sub    %rdi,%rax
shl    $0x4,%rax
add    %r11,%rax
sub    %rax,%rdx
add    %r14,%rdx
mov    -0x68(%rbp),%rax
sub    %rax,%rdx
lea    (%rsi,%rdx,1),%rax
sar    $0x12,%rax
and    $0x3ff,%eax
movslq %eax,%rax
movzbl 0x80(%r15,%rax,1),%eax
mov    %al,0x5(%r9,%r8,1)
lea    (%rbx,%rdx,1),%rax
sub    %rax,%rcx
sar    $0x12,%rcx
and    $0x3ff,%ecx
movslq %ecx,%rax
movzbl 0x80(%r15,%rax,1),%eax
mov    %al,0x9(%r9,%r8,1)
mov    -0x38(%rbp),%rax
add    %r13,%rax
lea    (%r12,%r10,1),%rdi
mov    %rax,%rsi
sub    %rdi,%rsi
mov    -0xb8(%rbp),%rcx
imul   $0x2399,%rcx,%rcx
mov    -0xc0(%rbp),%rdx
add    %rdx,%rcx
mov    -0x40(%rbp),%rdx
sub    %rcx,%rdx
lea    (%rsi,%rdx,1),%rcx
sar    $0x12,%rcx
and    $0x3ff,%ecx
movslq %ecx,%rcx
movzbl 0x80(%r15,%rcx,1),%ecx
mov    %cl,0x6(%r9,%r8,1)
lea    (%rdi,%rdx,1),%rcx
sub    %rcx,%rax
sar    $0x12,%rax
and    $0x3ff,%eax
movslq %eax,%rax
movzbl 0x80(%r15,%rax,1),%eax
mov    %al,0x8(%r9,%r8,1)
mov    -0x28(%rbp),%rax
shl    $0x6,%rax
mov    -0x30(%rbp),%rcx
add    %rax,%rcx
mov    -0x20(%rbp),%rax
sub    %rcx,%rax
sar    $0x12,%rax
and    $0x3ff,%eax
movslq %eax,%rax
movzbl 0x80(%rax,%r15,1),%eax
mov    %al,0x7(%r9,%r8,1)
mov    -0x118(%rbp),%rax
lea    0x1(%rax),%esi
mov    -0xe8(%rbp),%rax
lea    0x20(%rax),%rdi
mov    -0xe0(%rbp),%rdx
cmp    $0xe,%esi
jle    34242 <jpeg_idct_15x15+0x612>
mov    -0x110(%rbp),%r15
mov    -0x108(%rbp),%r14
mov    -0x100(%rbp),%r13
mov    -0xf8(%rbp),%r12
mov    -0xf0(%rbp),%rbx
leaveq 
retq   
nopw   %cs:0x0(%rax,%rax,1)

00000000000348f0 <jpeg_idct_16x16>:
push   %rbp
mov    %rsp,%rbp
sub    $0x2f0,%rsp
mov    %r8,-0xb0(%rbp)
mov    %rcx,-0xb8(%rbp)
mov    %rbx,-0xc8(%rbp)
mov    %r12,-0xd0(%rbp)
mov    %r13,-0xd8(%rbp)
mov    %r14,-0xe0(%rbp)
mov    %r15,-0xe8(%rbp)
mov    0x1a8(%rdi),%rax
mov    %rax,-0xc0(%rbp)
mov    0x58(%rsi),%rcx
xor    %esi,%esi
lea    -0x2f0(%rbp),%rdi
jmpq   34ee2 <jpeg_idct_16x16+0x5f2>
movswq 0x20(%rcx),%rax
movswq 0x20(%rdx),%rbx
imul   %ebx,%eax
movslq %eax,%r11
movswq 0x60(%rcx),%rax
movswq 0x60(%rdx),%rbx
imul   %ebx,%eax
movslq %eax,%r8
mov    %r8,-0x10(%rbp)
mov    %r11,%r10
sub    %r8,%r10
lea    (%r10,%r10,4),%rax
lea    (%r10,%rax,2),%rax
shl    $0x5,%rax
lea    (%rax,%r10,2),%rax
add    %r10,%rax
shl    $0x5,%rax
lea    (%rax,%r10,2),%rax
lea    (%r10,%rax,1),%rbx
mov    %rbx,-0x30(%rbp)
lea    (%r8,%r8,4),%rax
lea    (%r8,%rax,8),%rax
shl    $0x9,%rax
lea    (%rax,%r8,2),%rax
add    %r8,%rax
lea    (%rbx,%rax,1),%r9
mov    %r9,-0x60(%rbp)
movswq 0x40(%rcx),%rax
movswq 0x40(%rdx),%rbx
imul   %ebx,%eax
movslq %eax,%r8
lea    (%r8,%r8,4),%rax
lea    (%r8,%rax,4),%rax
shl    $0x9,%rax
mov    %rax,-0x20(%rbp)
lea    (%r8,%r8,2),%rbx
shl    $0x4,%rbx
add    %r8,%rbx
mov    %rbx,-0x18(%rbp)
sub    %rbx,%rax
movswq (%rcx),%rbx
mov    %rsi,-0xf0(%rbp)
movswq (%rdx),%rsi
imul   %esi,%ebx
movslq %ebx,%rsi
shl    $0xd,%rsi
add    %rsi,%rax
mov    %rax,-0x58(%rbp)
lea    (%r9,%rax,1),%r14
movswq 0x50(%rcx),%rax
movswq 0x50(%rdx),%rbx
imul   %ebx,%eax
movslq %eax,%r15
movswq 0x10(%rcx),%rax
movswq 0x10(%rdx),%rbx
imul   %ebx,%eax
movslq %eax,%rbx
mov    %rbx,-0x80(%rbp)
lea    (%r15,%rbx,1),%r12
mov    %r12,-0x70(%rbp)
lea    (%r12,%r12,2),%rax
shl    $0x3,%rax
mov    %r12,%r9
sub    %rax,%r9
lea    (%r12,%r12,4),%rax
mov    %rax,-0x68(%rbp)
shl    $0xb,%rax
lea    (%rax,%r9,1),%r12
mov    %r12,-0x8(%rbp)
movswq 0x30(%rcx),%rax
movswq 0x30(%rdx),%r9
imul   %r9d,%eax
movslq %eax,%r13
mov    %r13,-0x78(%rbp)
lea    (%rbx,%r13,1),%r9
lea    (%r9,%r9,4),%rax
shl    $0x5,%rax
lea    (%rax,%r9,8),%rax
lea    (%rax,%r9,4),%rax
add    %r9,%rax
shl    $0x6,%rax
lea    (%rax,%r9,8),%rax
lea    (%rax,%r9,4),%rax
lea    (%rax,%r9,2),%r9
lea    (%r12,%r9,1),%rax
mov    %rcx,-0xa8(%rbp)
movswq 0x70(%rcx),%rcx
mov    %rdx,-0x88(%rbp)
movswq 0x70(%rdx),%rdx
imul   %edx,%ecx
movslq %ecx,%r12
lea    (%rbx,%r12,1),%rdx
mov    %rdx,%rcx
shl    $0x5,%rcx
lea    (%rcx,%rdx,2),%rcx
add    %rdx,%rcx
shl    $0x8,%rcx
shl    $0x2,%rdx
sub    %rdx,%rcx
lea    (%rax,%rcx,1),%rdx
lea    (%rbx,%rbx,8),%rax
shl    $0x6,%rax
lea    (%rax,%rbx,8),%rax
add    %rbx,%rax
shl    $0x5,%rax
lea    (%rax,%rbx,8),%rax
lea    (%rax,%rbx,2),%rax
mov    %rdx,%rbx
sub    %rax,%rbx
lea    0x400(%r14,%rbx,1),%rbx
sar    $0xb,%rbx
mov    %ebx,(%rdi)
sub    %rdx,%rax
lea    0x400(%r14,%rax,1),%rax
sar    $0xb,%rax
mov    %eax,0x1e0(%rdi)
lea    (%r15,%r13,1),%rdx
lea    (%rdx,%rdx,8),%rax
shl    $0x3,%rax
sub    %rdx,%rax
shl    $0x4,%rax
lea    0x0(%r13,%r13,8),%rdx
shl    $0x6,%rdx
lea    (%rdx,%r13,8),%rdx
lea    (%rdx,%r13,4),%rdx
add    %r13,%rdx
add    %rax,%rdx
add    %r9,%rdx
lea    (%r12,%r13,1),%rbx
mov    %rbx,-0x50(%rbp)
imul   $0xffffffffffffeaab,%rbx,%rbx
lea    (%rbx,%rdx,1),%r14
lea    (%r10,%r10,2),%rdx
lea    (%r10,%rdx,2),%rdx
shl    $0x6,%rdx
lea    (%rdx,%r10,4),%rdx
lea    (%rdx,%rdx,4),%r13
mov    %r11,%rdx
imul   $0x1ccd,%rdx,%rdx
lea    (%rdx,%r13,1),%r9
mov    %r9,-0x48(%rbp)
mov    %r8,%r10
shl    $0x4,%r10
mov    %r8,%rdx
shl    $0x8,%rdx
add    %r10,%rdx
lea    (%rdx,%r8,4),%rdx
add    %r8,%rdx
shl    $0x4,%rdx
lea    (%r8,%rdx,1),%r10
lea    (%rsi,%r10,1),%rdx
mov    %rdx,-0x40(%rbp)
lea    (%r9,%rdx,1),%r8
lea    0x400(%r14,%r8,1),%rdx
sar    $0xb,%rdx
mov    %edx,0x20(%rdi)
lea    0x400(%r8),%rdx
sub    %r14,%rdx
sar    $0xb,%rdx
mov    %edx,0x1c0(%rdi)
lea    (%r15,%r15,2),%r8
mov    %r8,%rdx
shl    $0xa,%rdx
lea    (%rdx,%r15,2),%rdx
lea    (%rdx,%rdx,2),%rdx
sub    %rdx,%rax
mov    -0x8(%rbp),%rdx
add    %rdx,%rax
lea    (%r15,%r12,1),%rdx
imul   $0xffffffffffffd4b2,%rdx,%rdx
lea    (%rdx,%rax,1),%r14
mov    %r11,%r9
shl    $0x2,%r9
lea    (%r11,%r11,8),%rax
lea    (%r9,%rax,8),%rax
lea    (%r11,%rax,1),%r9
shl    $0x6,%r9
mov    %r9,-0x28(%rbp)
lea    (%r11,%r11,1),%rax
mov    %rax,-0x38(%rbp)
sub    %r9,%rax
mov    -0x30(%rbp),%r11
add    %r11,%rax
lea    0x400(%rsi),%r9
sub    %r10,%r9
add    %r9,%rax
lea    (%r14,%rax,1),%r10
sar    $0xb,%r10
mov    %r10d,0x40(%rdi)
sub    %r14,%rax
sar    $0xb,%rax
mov    %eax,0x1a0(%rdi)
mov    %r12,%r10
shl    $0x5,%r10
mov    %r12,%rax
shl    $0x9,%rax
add    %r10,%rax
add    %r12,%rax
shl    $0x4,%rax
lea    (%rax,%r12,8),%rax
add    %rbx,%rax
add    %rcx,%rax
lea    (%rdx,%rax,1),%r14
mov    -0x10(%rbp),%rax
mov    %rax,%rcx
shl    $0x8,%rcx
lea    (%rcx,%rax,4),%rcx
add    %rcx,%rax
shl    $0x4,%rax
mov    %r13,%rbx
sub    %rax,%rbx
mov    -0x20(%rbp),%rdx
mov    -0x18(%rbp),%rcx
sub    %rdx,%rcx
lea    0x400(%rsi,%rcx,1),%r10
lea    (%rbx,%r10,1),%rcx
lea    (%r14,%rcx,1),%rdx
sar    $0xb,%rdx
mov    %edx,0x60(%rdi)
sub    %r14,%rcx
sar    $0xb,%rcx
mov    %ecx,0x180(%rdi)
mov    -0x80(%rbp),%rcx
mov    %rcx,%rsi
sub    %r12,%rsi
lea    (%rsi,%rsi,8),%rdx
shl    $0x4,%rdx
lea    (%rdx,%rsi,8),%rdx
add    %rsi,%rdx
shl    $0x4,%rdx
lea    (%rdx,%rsi,2),%rdx
lea    (%rdx,%rdx,2),%r14
mov    -0x50(%rbp),%rsi
lea    (%rsi,%rsi,2),%rdx
shl    $0x3,%rdx
mov    %rsi,%rbx
sub    %rdx,%rbx
lea    (%rsi,%rsi,4),%rdx
shl    $0xb,%rdx
add    %rdx,%rbx
lea    (%r12,%r12,2),%rdx
shl    $0x6,%rdx
lea    (%rdx,%r12,8),%rdx
add    %r12,%rdx
shl    $0x7,%rdx
lea    (%rdx,%r12,4),%rdx
add    %r12,%rdx
sub    %rbx,%rdx
lea    (%r14,%rdx,1),%rsi
sub    %r15,%r12
mov    %r12,%rdx
shl    $0x5,%rdx
lea    (%rdx,%r12,2),%rdx
add    %r12,%rdx
shl    $0x5,%rdx
add    %r12,%rdx
lea    (%rdx,%rdx,2),%r12
add    %r12,%rsi
sub    %r13,%rax
add    %r10,%rax
lea    (%rsi,%rax,1),%rdx
sar    $0xb,%rdx
mov    %edx,0x80(%rdi)
sub    %rsi,%rax
sar    $0xb,%rax
mov    %eax,0x160(%rdi)
mov    -0x78(%rbp),%rsi
mov    %r15,%rdx
sub    %rsi,%rdx
lea    (%rdx,%rdx,4),%rax
shl    $0x8,%rax
add    %rdx,%rax
lea    (%rax,%rax,8),%r13
shl    $0x4,%r8
lea    (%r15,%r8,1),%rax
shl    $0x7,%rax
lea    (%rax,%r15,4),%rax
lea    (%rax,%r15,2),%rax
mov    %r13,%r10
sub    %rax,%r10
mov    -0x68(%rbp),%rax
mov    -0x70(%rbp),%rdx
lea    (%rdx,%rax,4),%rax
shl    $0x4,%rax
lea    (%rax,%rdx,4),%rax
add    %rdx,%rax
shl    $0x4,%rax
lea    (%rax,%rdx,4),%rax
lea    (%rdx,%rax,1),%r8
lea    (%r10,%r8,1),%rax
lea    (%rax,%r12,1),%r10
mov    -0x38(%rbp),%rax
lea    (%r11,%rax,1),%rdx
mov    -0x28(%rbp),%rax
sub    %rdx,%rax
add    %r9,%rax
lea    (%r10,%rax,1),%rdx
sar    $0xb,%rdx
mov    %edx,0xa0(%rdi)
sub    %r10,%rax
sar    $0xb,%rax
mov    %eax,0x140(%rdi)
lea    (%rsi,%rsi,4),%rax
shl    $0x3,%rax
lea    (%rax,%rsi,4),%rax
lea    (%rax,%rsi,2),%rax
lea    (%rax,%rax,4),%rdx
mov    %rsi,%rax
shl    $0xe,%rax
sub    %rdx,%rax
lea    0x0(%r13,%rax,1),%rdx
neg    %rsi
add    %rcx,%rsi
mov    %rsi,%rax
shl    $0x5,%rax
lea    (%rax,%rsi,2),%rax
add    %rsi,%rax
shl    $0x5,%rax
add    %rsi,%rax
lea    (%rax,%rax,2),%r9
add    %r9,%rdx
sub    %rbx,%rdx
mov    -0x40(%rbp),%rax
add    $0x400,%rax
mov    -0x48(%rbp),%rbx
mov    %rax,%rsi
sub    %rbx,%rsi
add    %rdx,%rsi
sar    $0xb,%rsi
mov    %esi,0xc0(%rdi)
add    %rbx,%rdx
sub    %rdx,%rax
sar    $0xb,%rax
mov    %eax,0x120(%rdi)
mov    -0x58(%rbp),%rax
add    $0x400,%rax
mov    -0x60(%rbp),%rdx
sub    %rdx,%rax
lea    (%r14,%r8,1),%rdx
lea    (%rdx,%r9,1),%rbx
lea    (%rcx,%rcx,4),%rdx
lea    (%rcx,%rdx,4),%rdx
shl    $0x6,%rdx
lea    (%rdx,%rcx,2),%rsi
shl    $0xe,%rcx
mov    %rsi,%rdx
sub    %rcx,%rdx
add    %rbx,%rdx
add    %rax,%rdx
sar    $0xb,%rdx
mov    %edx,0xe0(%rdi)
lea    (%rbx,%rsi,1),%rdx
sub    %rdx,%rcx
add    %rcx,%rax
sar    $0xb,%rax
mov    %eax,0x100(%rdi)
mov    -0xa8(%rbp),%rax
lea    0x2(%rax),%rcx
mov    -0x88(%rbp),%rax
lea    0x2(%rax),%rdx
add    $0x4,%rdi
mov    -0xf0(%rbp),%rax
lea    0x1(%rax),%esi
cmp    $0x7,%esi
jle    3494c <jpeg_idct_16x16+0x5c>
mov    -0xb0(%rbp),%rax
mov    %eax,%r9d
mov    -0xc0(%rbp),%r15
lea    -0x2f0(%rbp),%rsi
xor    %edx,%edx
mov    -0xb8(%rbp),%rcx
jmpq   355be <jpeg_idct_16x16+0xcce>
movslq 0x8(%rsi),%rbx
mov    %rbx,-0xa0(%rbp)
movslq 0x18(%rsi),%r8
mov    %r8,-0x78(%rbp)
sub    %r8,%rbx
lea    (%rbx,%rbx,4),%rax
lea    (%rbx,%rax,2),%rax
shl    $0x5,%rax
lea    (%rax,%rbx,2),%rax
add    %rbx,%rax
shl    $0x5,%rax
lea    (%rax,%rbx,2),%rax
lea    (%rbx,%rax,1),%rdi
mov    %rdi,-0x98(%rbp)
lea    (%r8,%r8,4),%rax
lea    (%r8,%rax,8),%rax
shl    $0x9,%rax
lea    (%rax,%r8,2),%rax
add    %r8,%rax
lea    (%rdi,%rax,1),%r8
mov    %r8,-0x28(%rbp)
movslq 0x10(%rsi),%r10
mov    %r10,-0xb0(%rbp)
lea    (%r10,%r10,4),%rax
lea    (%r10,%rax,4),%rax
shl    $0x9,%rax
mov    %rax,-0x88(%rbp)
lea    (%r10,%r10,2),%rdi
shl    $0x4,%rdi
add    %r10,%rdi
mov    %rdi,-0x80(%rbp)
sub    %rdi,%rax
mov    %rax,-0x20(%rbp)
movslq (%rsi),%rdi
shl    $0xd,%rdi
mov    %rdi,-0xa8(%rbp)
add    %rdi,%rax
lea    (%r8,%rax,1),%r10
movslq 0x4(%rsi),%r8
mov    %r8,-0x58(%rbp)
movslq 0x14(%rsi),%r14
lea    (%r14,%r8,1),%r11
mov    %r11,-0x50(%rbp)
lea    (%r11,%r11,2),%rax
shl    $0x3,%rax
mov    %r11,%rdi
sub    %rax,%rdi
lea    (%r11,%r11,4),%rax
mov    %rax,-0x48(%rbp)
shl    $0xb,%rax
lea    (%rax,%rdi,1),%r11
mov    %r11,-0x90(%rbp)
movslq 0xc(%rsi),%r13
mov    %r13,-0x40(%rbp)
lea    (%r8,%r13,1),%rdi
lea    (%rdi,%rdi,4),%rax
shl    $0x5,%rax
lea    (%rax,%rdi,8),%rax
lea    (%rax,%rdi,4),%rax
add    %rdi,%rax
shl    $0x6,%rax
lea    (%rax,%rdi,8),%rax
lea    (%rax,%rdi,4),%rax
lea    (%rax,%rdi,2),%r12
add    %r12,%r11
mov    %rsi,-0xc0(%rbp)
movslq 0x1c(%rsi),%rdi
lea    (%r8,%rdi,1),%rsi
mov    %rsi,%rax
shl    $0x5,%rax
lea    (%rax,%rsi,2),%rax
add    %rsi,%rax
shl    $0x8,%rax
shl    $0x2,%rsi
sub    %rsi,%rax
mov    %rax,-0x70(%rbp)
add    %rax,%r11
lea    (%r8,%r8,8),%rax
shl    $0x6,%rax
lea    (%rax,%r8,8),%rax
add    %r8,%rax
shl    $0x5,%rax
lea    (%rax,%r8,8),%rax
lea    (%rax,%r8,2),%rsi
mov    %r11,%rax
sub    %rsi,%rax
lea    0x20000(%rax,%r10,1),%rax
sar    $0x12,%rax
and    $0x3ff,%eax
movslq %eax,%rax
movzbl 0x80(%r15,%rax,1),%eax
mov    %rdx,-0xf0(%rbp)
movslq %edx,%rdx
mov    (%rcx,%rdx,8),%r8
mov    %al,(%r9,%r8,1)
sub    %r11,%rsi
lea    0x20000(%rsi,%r10,1),%rax
sar    $0x12,%rax
and    $0x3ff,%eax
movslq %eax,%rax
movzbl 0x80(%r15,%rax,1),%eax
mov    %al,0xf(%r9,%r8,1)
lea    (%r14,%r13,1),%rcx
lea    (%rcx,%rcx,8),%rax
shl    $0x3,%rax
sub    %rcx,%rax
shl    $0x4,%rax
lea    0x0(%r13,%r13,8),%rcx
shl    $0x6,%rcx
lea    (%rcx,%r13,8),%rcx
lea    (%rcx,%r13,4),%rcx
add    %r13,%rcx
add    %rax,%rcx
lea    (%rcx,%r12,1),%rdx
lea    (%rdi,%r13,1),%rcx
mov    %rcx,-0x60(%rbp)
imul   $0xffffffffffffeaab,%rcx,%rcx
mov    %rcx,-0x68(%rbp)
add    %rcx,%rdx
lea    (%rbx,%rbx,2),%rcx
lea    (%rbx,%rcx,2),%rcx
shl    $0x6,%rcx
lea    (%rcx,%rbx,4),%rcx
lea    (%rcx,%rcx,4),%r11
mov    -0xa0(%rbp),%r13
mov    %r13,%rcx
imul   $0x1ccd,%rcx,%rcx
lea    (%rcx,%r11,1),%rbx
mov    %rbx,-0x38(%rbp)
mov    -0xb0(%rbp),%r10
mov    %r10,%rsi
shl    $0x4,%rsi
mov    %r10,%rcx
shl    $0x8,%rcx
add    %rsi,%rcx
lea    (%rcx,%r10,4),%rcx
add    %r10,%rcx
shl    $0x4,%rcx
add    %rcx,%r10
mov    %r10,-0x30(%rbp)
mov    -0xa8(%rbp),%r12
lea    (%r12,%r10,1),%rsi
lea    (%rbx,%rsi,1),%rcx
lea    0x20000(%rdx,%rcx,1),%rcx
sar    $0x12,%rcx
and    $0x3ff,%ecx
movslq %ecx,%rcx
movzbl 0x80(%r15,%rcx,1),%ecx
mov    %cl,0x1(%r9,%r8,1)
lea    0x20000(%rbx,%rsi,1),%rcx
sub    %rdx,%rcx
sar    $0x12,%rcx
and    $0x3ff,%ecx
movslq %ecx,%rcx
movzbl 0x80(%r15,%rcx,1),%ecx
mov    %cl,0xe(%r9,%r8,1)
lea    (%r14,%r14,2),%rcx
mov    %rcx,%rdx
shl    $0xa,%rdx
lea    (%rdx,%r14,2),%rdx
lea    (%rdx,%rdx,2),%rdx
sub    %rdx,%rax
mov    -0x90(%rbp),%rdx
add    %rdx,%rax
lea    (%r14,%rdi,1),%rsi
imul   $0xffffffffffffd4b2,%rsi,%rsi
lea    (%rsi,%rax,1),%rbx
mov    %r13,%rdx
shl    $0x2,%rdx
lea    0x0(%r13,%r13,8),%rax
lea    (%rdx,%rax,8),%rax
add    %r13,%rax
shl    $0x6,%rax
mov    %rax,-0x90(%rbp)
lea    0x0(%r13,%r13,1),%rdx
mov    %rdx,-0xa0(%rbp)
sub    %rax,%rdx
mov    -0x98(%rbp),%r13
add    %r13,%rdx
lea    0x20000(%r12),%rax
sub    %r10,%rax
mov    %rax,-0x98(%rbp)
add    %rdx,%rax
lea    (%rbx,%rax,1),%rdx
sar    $0x12,%rdx
and    $0x3ff,%edx
movslq %edx,%rdx
movzbl 0x80(%r15,%rdx,1),%edx
mov    %dl,0x2(%r9,%r8,1)
sub    %rbx,%rax
sar    $0x12,%rax
and    $0x3ff,%eax
movslq %eax,%rax
movzbl 0x80(%r15,%rax,1),%eax
mov    %al,0xd(%r9,%r8,1)
mov    -0x88(%rbp),%rdx
mov    -0x80(%rbp),%rax
sub    %rdx,%rax
lea    0x20000(%r12,%rax,1),%r12
mov    -0x78(%rbp),%rdx
mov    %rdx,%rax
shl    $0x8,%rax
lea    (%rax,%rdx,4),%rax
add    %rax,%rdx
shl    $0x4,%rdx
mov    %r11,%rax
sub    %rdx,%rax
add    %r12,%rax
mov    %rdi,%r10
shl    $0x5,%r10
mov    %rdi,%rbx
shl    $0x9,%rbx
add    %r10,%rbx
add    %rdi,%rbx
shl    $0x4,%rbx
lea    (%rbx,%rdi,8),%rbx
mov    -0x68(%rbp),%r10
add    %r10,%rbx
mov    -0x70(%rbp),%r10
add    %r10,%rbx
add    %rsi,%rbx
lea    (%rbx,%rax,1),%rsi
sar    $0x12,%rsi
and    $0x3ff,%esi
movslq %esi,%rsi
movzbl 0x80(%r15,%rsi,1),%esi
mov    %sil,0x3(%r9,%r8,1)
sub    %rbx,%rax
sar    $0x12,%rax
and    $0x3ff,%eax
movslq %eax,%rax
movzbl 0x80(%r15,%rax,1),%eax
mov    %al,0xc(%r9,%r8,1)
sub    %r11,%rdx
lea    (%rdx,%r12,1),%rax
mov    -0x58(%rbp),%rdx
mov    %rdx,%rbx
sub    %rdi,%rbx
lea    (%rbx,%rbx,8),%rsi
shl    $0x4,%rsi
lea    (%rsi,%rbx,8),%rsi
add    %rbx,%rsi
shl    $0x4,%rsi
lea    (%rsi,%rbx,2),%rsi
lea    (%rsi,%rsi,2),%r12
mov    -0x60(%rbp),%r10
lea    (%r10,%r10,2),%rsi
shl    $0x3,%rsi
mov    %r10,%rbx
sub    %rsi,%rbx
lea    (%r10,%r10,4),%rsi
shl    $0xb,%rsi
lea    (%rsi,%rbx,1),%r11
lea    (%rdi,%rdi,2),%rsi
shl    $0x6,%rsi
lea    (%rsi,%rdi,8),%rsi
add    %rdi,%rsi
shl    $0x7,%rsi
lea    (%rsi,%rdi,4),%rsi
add    %rdi,%rsi
sub    %r11,%rsi
lea    (%r12,%rsi,1),%rbx
sub    %r14,%rdi
mov    %rdi,%rsi
shl    $0x5,%rsi
lea    (%rsi,%rdi,2),%rsi
add    %rdi,%rsi
shl    $0x5,%rsi
add    %rdi,%rsi
lea    (%rsi,%rsi,2),%r10
lea    (%rbx,%r10,1),%rdi
lea    (%rdi,%rax,1),%rsi
sar    $0x12,%rsi
and    $0x3ff,%esi
movslq %esi,%rsi
movzbl 0x80(%r15,%rsi,1),%esi
mov    %sil,0x4(%r9,%r8,1)
sub    %rdi,%rax
sar    $0x12,%rax
and    $0x3ff,%eax
movslq %eax,%rax
movzbl 0x80(%r15,%rax,1),%eax
mov    %al,0xb(%r9,%r8,1)
mov    -0x48(%rbp),%rax
mov    -0x50(%rbp),%rsi
lea    (%rsi,%rax,4),%rax
shl    $0x4,%rax
lea    (%rax,%rsi,4),%rax
add    %rsi,%rax
shl    $0x4,%rax
lea    (%rax,%rsi,4),%rax
lea    (%rsi,%rax,1),%rbx
mov    -0x40(%rbp),%rsi
mov    %r14,%rdi
sub    %rsi,%rdi
lea    (%rdi,%rdi,4),%rax
shl    $0x8,%rax
add    %rdi,%rax
lea    (%rax,%rax,8),%rdi
shl    $0x4,%rcx
lea    (%r14,%rcx,1),%rax
shl    $0x7,%rax
lea    (%rax,%r14,4),%rax
lea    (%rax,%r14,2),%rax
neg    %rax
add    %rdi,%rax
add    %rbx,%rax
add    %rax,%r10
mov    -0xa0(%rbp),%rax
lea    0x0(%r13,%rax,1),%rcx
mov    -0x90(%rbp),%rax
sub    %rcx,%rax
mov    -0x98(%rbp),%rcx
add    %rcx,%rax
lea    (%r10,%rax,1),%rcx
sar    $0x12,%rcx
and    $0x3ff,%ecx
movslq %ecx,%rcx
movzbl 0x80(%r15,%rcx,1),%ecx
mov    %cl,0x5(%r9,%r8,1)
sub    %r10,%rax
sar    $0x12,%rax
and    $0x3ff,%eax
movslq %eax,%rax
movzbl 0x80(%r15,%rax,1),%eax
mov    %al,0xa(%r9,%r8,1)
mov    %rdx,%rcx
sub    %rsi,%rcx
mov    %rcx,%rax
shl    $0x5,%rax
lea    (%rax,%rcx,2),%rax
add    %rcx,%rax
shl    $0x5,%rax
add    %rcx,%rax
lea    (%rax,%rax,2),%r10
lea    (%rsi,%rsi,4),%rax
shl    $0x3,%rax
lea    (%rax,%rsi,4),%rax
lea    (%rax,%rsi,2),%rax
lea    (%rax,%rax,4),%rax
shl    $0xe,%rsi
sub    %rax,%rsi
lea    (%rdi,%rsi,1),%rax
lea    (%rax,%r10,1),%rsi
sub    %r11,%rsi
mov    -0x30(%rbp),%rax
mov    -0xa8(%rbp),%rdi
lea    0x20000(%rdi,%rax,1),%rax
mov    -0x38(%rbp),%r11
mov    %rax,%rcx
sub    %r11,%rcx
add    %rsi,%rcx
sar    $0x12,%rcx
and    $0x3ff,%ecx
movslq %ecx,%rcx
movzbl 0x80(%r15,%rcx,1),%ecx
mov    %cl,0x6(%r9,%r8,1)
lea    (%r11,%rsi,1),%rcx
sub    %rcx,%rax
sar    $0x12,%rax
and    $0x3ff,%eax
movslq %eax,%rax
movzbl 0x80(%r15,%rax,1),%eax
mov    %al,0x9(%r9,%r8,1)
mov    -0x20(%rbp),%rax
lea    0x20000(%rax,%rdi,1),%rcx
mov    -0x28(%rbp),%rax
sub    %rax,%rcx
lea    (%r12,%rbx,1),%rax
lea    (%rax,%r10,1),%rdi
lea    (%rdx,%rdx,4),%rax
lea    (%rdx,%rax,4),%rax
shl    $0x6,%rax
lea    (%rax,%rdx,2),%rsi
shl    $0xe,%rdx
mov    %rsi,%rax
sub    %rdx,%rax
add    %rdi,%rax
add    %rcx,%rax
sar    $0x12,%rax
and    $0x3ff,%eax
movslq %eax,%rax
movzbl 0x80(%r15,%rax,1),%eax
mov    %al,0x7(%r9,%r8,1)
lea    (%rdi,%rsi,1),%rax
sub    %rax,%rdx
lea    (%rcx,%rdx,1),%rax
sar    $0x12,%rax
and    $0x3ff,%eax
movslq %eax,%rax
movzbl 0x80(%rax,%r15,1),%eax
mov    %al,0x8(%r9,%r8,1)
mov    -0xf0(%rbp),%rax
lea    0x1(%rax),%edx
mov    -0xc0(%rbp),%rax
lea    0x20(%rax),%rsi
mov    -0xb8(%rbp),%rcx
cmp    $0xf,%edx
jle    34f11 <jpeg_idct_16x16+0x621>
mov    -0xe8(%rbp),%r15
mov    -0xe0(%rbp),%r14
mov    -0xd8(%rbp),%r13
mov    -0xd0(%rbp),%r12
mov    -0xc8(%rbp),%rbx
leaveq 
retq   
nopl   0x0(%rax)

00000000000355f0 <jpeg_idct_4x4>:
push   %rbp
mov    %rsp,%rbp
sub    $0xc0,%rsp
mov    %r8,-0x28(%rbp)
mov    %rcx,-0x38(%rbp)
mov    %r12,-0x8(%rbp)
mov    %r13,-0x10(%rbp)
mov    %r14,-0x18(%rbp)
mov    %r15,-0x20(%rbp)
mov    0x1a8(%rdi),%rax
mov    %rax,-0x30(%rbp)
mov    0x58(%rsi),%rax
lea    -0xb8(%rbp),%rcx
mov    $0x8,%esi
jmpq   35805 <jpeg_idct_4x4+0x215>
movswq 0x70(%rax),%rdi
movswq 0x70(%rdx),%r8
imul   %r8d,%edi
movslq %edi,%r14
mov    %r14,%rdi
shl    $0x8,%rdi
lea    (%rdi,%r14,4),%rdi
lea    (%r14,%rdi,1),%r8
shl    $0x4,%r8
movswq 0x50(%rax),%rdi
movswq 0x50(%rdx),%r9
imul   %r9d,%edi
movslq %edi,%r15
mov    %r15,%r9
shl    $0x2,%r9
lea    (%r15,%r15,8),%rdi
lea    (%r9,%rdi,8),%rdi
add    %r15,%rdi
shl    $0x6,%rdi
add    %rdi,%r8
lea    (%r15,%r15,1),%rdi
sub    %r8,%rdi
movswq 0x30(%rax),%r8
movswq 0x30(%rdx),%r9
imul   %r9d,%r8d
movslq %r8d,%r10
mov    %r10,%r8
imul   $0x1ccd,%r8,%r8
lea    (%r8,%rdi,1),%r9
movswq 0x10(%rax),%rdi
movswq 0x10(%rdx),%r8
imul   %r8d,%edi
movslq %edi,%r13
lea    0x0(%r13,%r13,4),%rdi
lea    0x0(%r13,%rdi,8),%rdi
shl    $0x9,%rdi
lea    (%rdi,%r13,2),%rdi
add    %r13,%rdi
lea    (%r9,%rdi,1),%r11
movswq 0x20(%rax),%rdi
movswq 0x20(%rdx),%r8
imul   %r8d,%edi
movslq %edi,%r9
mov    %r9,%r8
shl    $0x2,%r8
lea    (%r9,%r9,2),%rdi
lea    (%r8,%rdi,8),%rdi
add    %r9,%rdi
shl    $0x4,%rdi
lea    (%rdi,%r9,8),%rdi
add    %r9,%rdi
shl    $0x5,%rdi
lea    (%r9,%rdi,1),%r12
movswq 0x60(%rax),%rdi
movswq 0x60(%rdx),%r8
imul   %r8d,%edi
movslq %edi,%r9
lea    (%r9,%r9,2),%rdi
shl    $0x4,%rdi
lea    (%r9,%rdi,1),%r8
shl    $0x7,%r8
lea    (%r9,%r9,1),%rdi
sub    %r8,%rdi
add    %rdi,%r12
movswq (%rax),%rdi
movswq (%rdx),%r8
imul   %r8d,%edi
movslq %edi,%r8
shl    $0xe,%r8
lea    (%r12,%r8,1),%rdi
lea    0x800(%r11,%rdi,1),%r9
sar    $0xc,%r9
mov    %r9d,(%rcx)
sub    %r11,%rdi
add    $0x800,%rdi
sar    $0xc,%rdi
mov    %edi,0x60(%rcx)
lea    (%r14,%r14,2),%rdi
shl    $0x3,%rdi
lea    (%rdi,%r14,2),%rdi
add    %r14,%rdi
shl    $0x6,%rdi
lea    (%rdi,%r14,2),%r11
lea    (%r15,%r15,2),%rdi
mov    %rdi,%r9
shl    $0x7,%r9
lea    (%r9,%r15,8),%r9
lea    (%r9,%r15,2),%r9
add    %r15,%r9
add    %r11,%r9
shl    $0xc,%rdi
sub    %r9,%rdi
imul   $0xffffffffffffba79,%r10,%r10
add    %rdi,%r10
mov    %r13,%r9
shl    $0x9,%r9
mov    %r13,%rdi
shl    $0xd,%rdi
add    %r9,%rdi
lea    0x0(%r13,%r13,2),%r9
lea    0x0(%r13,%r9,2),%r9
sub    %r9,%rdi
lea    (%r10,%rdi,1),%r9
mov    %r8,%rdi
sub    %r12,%rdi
lea    0x800(%r9,%rdi,1),%rdi
sar    $0xc,%rdi
mov    %edi,0x20(%rcx)
lea    (%r9,%r12,1),%rdi
sub    %rdi,%r8
lea    0x800(%r8),%rdi
sar    $0xc,%rdi
mov    %edi,0x40(%rcx)
add    $0x2,%rdx
add    $0x2,%rax
add    $0x4,%rcx
add    $0xffffffff,%esi
test   %esi,%esi
jg     3582a <jpeg_idct_4x4+0x23a>
mov    -0x28(%rbp),%rax
mov    %eax,%r9d
xor    %esi,%esi
mov    %rbx,-0x28(%rbp)
mov    -0x30(%rbp),%r11
lea    -0xb8(%rbp),%rax
mov    -0x38(%rbp),%rcx
jmpq   35a65 <jpeg_idct_4x4+0x475>
cmp    $0x4,%esi
je     357f6 <jpeg_idct_4x4+0x206>
movswq 0x10(%rdx),%rdi
test   %di,%di
jne    35633 <jpeg_idct_4x4+0x43>
movswq 0x20(%rdx),%rdi
test   %di,%di
jne    35633 <jpeg_idct_4x4+0x43>
movswq 0x30(%rdx),%rdi
test   %di,%di
jne    35633 <jpeg_idct_4x4+0x43>
movswq 0x50(%rdx),%rdi
test   %di,%di
jne    35633 <jpeg_idct_4x4+0x43>
movswq 0x60(%rdx),%rdi
test   %di,%di
jne    35633 <jpeg_idct_4x4+0x43>
movswq 0x70(%rdx),%rdi
test   %di,%di
jne    35633 <jpeg_idct_4x4+0x43>
movswq (%rax),%rdi
movswq (%rdx),%r8
imul   %r8d,%edi
shl    $0x2,%edi
mov    %edi,(%rcx)
mov    %edi,0x20(%rcx)
mov    %edi,0x40(%rcx)
mov    %edi,0x60(%rcx)
jmpq   357f6 <jpeg_idct_4x4+0x206>
movslq 0x8(%rax),%rdx
mov    %rdx,%rcx
shl    $0x2,%rcx
lea    (%rdx,%rdx,2),%rdi
lea    (%rcx,%rdi,8),%rcx
add    %rdx,%rcx
shl    $0x4,%rcx
lea    (%rcx,%rdx,8),%rcx
add    %rdx,%rcx
shl    $0x5,%rcx
lea    (%rdx,%rcx,1),%rbx
movslq 0x18(%rax),%rdi
lea    (%rdi,%rdi,2),%rcx
shl    $0x4,%rcx
lea    (%rdi,%rcx,1),%rdx
shl    $0x7,%rdx
lea    (%rdi,%rdi,1),%rcx
sub    %rdx,%rcx
lea    (%rbx,%rcx,1),%r12
movslq (%rax),%rdx
shl    $0xe,%rdx
lea    (%r12,%rdx,1),%rbx
movslq 0x1c(%rax),%r14
mov    %r14,%rcx
shl    $0x8,%rcx
lea    (%rcx,%r14,4),%rcx
lea    (%r14,%rcx,1),%rdi
shl    $0x4,%rdi
movslq 0x14(%rax),%r15
mov    %r15,%r10
shl    $0x2,%r10
lea    (%r15,%r15,8),%rcx
lea    (%r10,%rcx,8),%rcx
add    %r15,%rcx
shl    $0x6,%rcx
add    %rcx,%rdi
lea    (%r15,%r15,1),%rcx
sub    %rdi,%rcx
movslq 0xc(%rax),%rdi
mov    %rdi,%r10
imul   $0x1ccd,%r10,%r10
add    %rcx,%r10
movslq 0x4(%rax),%r13
lea    0x0(%r13,%r13,4),%rcx
lea    0x0(%r13,%rcx,8),%rcx
shl    $0x9,%rcx
lea    (%rcx,%r13,2),%rcx
add    %r13,%rcx
add    %rcx,%r10
lea    0x40000(%r10,%rbx,1),%rcx
sar    $0x13,%rcx
and    $0x3ff,%ecx
movslq %ecx,%rcx
movzbl 0x80(%r11,%rcx,1),%ecx
mov    %cl,(%r9,%r8,1)
sub    %r10,%rbx
lea    0x40000(%rbx),%rcx
sar    $0x13,%rcx
and    $0x3ff,%ecx
movslq %ecx,%rcx
movzbl 0x80(%r11,%rcx,1),%ecx
mov    %cl,0x3(%r9,%r8,1)
lea    (%r14,%r14,2),%rcx
shl    $0x3,%rcx
lea    (%rcx,%r14,2),%rcx
add    %r14,%rcx
shl    $0x6,%rcx
lea    (%rcx,%r14,2),%r10
lea    (%r15,%r15,2),%rcx
mov    %rcx,%rbx
shl    $0x7,%rbx
lea    (%rbx,%r15,8),%rbx
lea    (%rbx,%r15,2),%rbx
add    %r15,%rbx
add    %r10,%rbx
shl    $0xc,%rcx
sub    %rbx,%rcx
imul   $0xffffffffffffba79,%rdi,%rdi
lea    (%rdi,%rcx,1),%rbx
mov    %r13,%rcx
shl    $0x9,%rcx
mov    %r13,%rdi
shl    $0xd,%rdi
add    %rdi,%rcx
lea    0x0(%r13,%r13,2),%rdi
lea    0x0(%r13,%rdi,2),%rdi
sub    %rdi,%rcx
lea    (%rbx,%rcx,1),%rdi
mov    %rdx,%rcx
sub    %r12,%rcx
lea    0x40000(%rdi,%rcx,1),%rcx
sar    $0x13,%rcx
and    $0x3ff,%ecx
movslq %ecx,%rcx
movzbl 0x80(%r11,%rcx,1),%ecx
mov    %cl,0x1(%r9,%r8,1)
lea    (%rdi,%r12,1),%rcx
sub    %rcx,%rdx
lea    0x40000(%rdx),%rcx
sar    $0x13,%rcx
and    $0x3ff,%ecx
movslq %ecx,%rcx
movzbl 0x80(%rcx,%r11,1),%ecx
mov    %cl,0x2(%r9,%r8,1)
add    $0x20,%rax
mov    -0x38(%rbp),%rcx
add    $0x1,%esi
cmp    $0x3,%esi
jle    35a80 <jpeg_idct_4x4+0x490>
mov    -0x20(%rbp),%r15
mov    -0x18(%rbp),%r14
mov    -0x10(%rbp),%r13
mov    -0x8(%rbp),%r12
mov    -0x28(%rbp),%rbx
leaveq 
retq   
movslq %esi,%rdx
mov    (%rcx,%rdx,8),%r8
movslq 0x4(%rax),%rdx
test   %edx,%edx
jne    358a2 <jpeg_idct_4x4+0x2b2>
movslq 0x8(%rax),%rdx
test   %edx,%edx
jne    358a2 <jpeg_idct_4x4+0x2b2>
movslq 0xc(%rax),%rdx
test   %edx,%edx
jne    358a2 <jpeg_idct_4x4+0x2b2>
movslq 0x14(%rax),%rdx
test   %edx,%edx
jne    358a2 <jpeg_idct_4x4+0x2b2>
movslq 0x18(%rax),%rdx
test   %edx,%edx
jne    358a2 <jpeg_idct_4x4+0x2b2>
movslq 0x1c(%rax),%rdx
test   %edx,%edx
jne    358a2 <jpeg_idct_4x4+0x2b2>
movslq (%rax),%rdx
add    $0x10,%rdx
sar    $0x5,%rdx
and    $0x3ff,%edx
movslq %edx,%rdx
movzbl 0x80(%r11,%rdx,1),%edx
mov    %dl,(%r9,%r8,1)
mov    %dl,0x1(%r9,%r8,1)
mov    %dl,0x2(%r9,%r8,1)
mov    %dl,0x3(%r9,%r8,1)
add    $0x20,%rax
jmpq   35a62 <jpeg_idct_4x4+0x472>
nopl   0x0(%rax,%rax,1)

0000000000035b10 <jpeg_idct_2x2>:
push   %rbp
mov    %rsp,%rbp
sub    $0x50,%rsp
mov    %r8,-0x8(%rbp)
mov    0x1a8(%rdi),%rax
mov    %rax,-0x10(%rbp)
mov    0x58(%rsi),%rsi
lea    -0x50(%rbp),%rdi
mov    $0x8,%eax
jmpq   35c10 <jpeg_idct_2x2+0x100>
movswq 0x50(%rsi),%r8
movswq 0x50(%rdx),%r9
imul   %r9d,%r8d
movslq %r8d,%r9
lea    (%r9,%r9,2),%r8
shl    $0x5,%r8
lea    (%r8,%r9,8),%r8
lea    (%r8,%r9,4),%r8
add    %r9,%r8
shl    $0x6,%r8
lea    (%r9,%r9,8),%r9
sub    %r9,%r8
movswq 0x70(%rsi),%r9
movswq 0x70(%rdx),%r10
imul   %r10d,%r9d
movslq %r9d,%r9
imul   $0xffffffffffffe8ee,%r9,%r9
add    %r8,%r9
movswq 0x30(%rsi),%r8
movswq 0x30(%rdx),%r10
imul   %r10d,%r8d
movslq %r8d,%r8
imul   $0xffffffffffffd746,%r8,%r8
lea    (%r8,%r9,1),%r11
movswq 0x10(%rsi),%r8
movswq 0x10(%rdx),%r9
imul   %r9d,%r8d
movslq %r8d,%r10
mov    %r10,%r9
shl    $0x2,%r9
lea    (%r10,%r10,2),%r8
lea    (%r9,%r8,8),%r8
add    %r10,%r8
shl    $0xa,%r8
sub    %r9,%r8
lea    (%r11,%r8,1),%r10
movswq (%rsi),%r8
movswq (%rdx),%r9
imul   %r9d,%r8d
movslq %r8d,%r8
shl    $0xf,%r8
lea    0x1000(%r10,%r8,1),%r9
sar    $0xd,%r9
mov    %r9d,(%rdi)
sub    %r10,%r8
add    $0x1000,%r8
sar    $0xd,%r8
mov    %r8d,0x20(%rdi)
add    $0x2,%rdx
add    $0x2,%rsi
add    $0x4,%rdi
add    $0xffffffff,%eax
test   %eax,%eax
jg     35c2e <jpeg_idct_2x2+0x11e>
mov    -0x8(%rbp),%rax
mov    %eax,%r11d
xor    %edi,%edi
mov    %r15,-0x8(%rbp)
mov    -0x10(%rbp),%r8
lea    -0x50(%rbp),%rax
jmpq   35d4a <jpeg_idct_2x2+0x23a>
cmp    $0x6,%eax
je     35c01 <jpeg_idct_2x2+0xf1>
cmp    $0x4,%eax
je     35c01 <jpeg_idct_2x2+0xf1>
cmp    $0x2,%eax
je     35c01 <jpeg_idct_2x2+0xf1>
movswq 0x10(%rdx),%r8
test   %r8w,%r8w
jne    35b39 <jpeg_idct_2x2+0x29>
movswq 0x30(%rdx),%r8
test   %r8w,%r8w
jne    35b39 <jpeg_idct_2x2+0x29>
movswq 0x50(%rdx),%r8
test   %r8w,%r8w
jne    35b39 <jpeg_idct_2x2+0x29>
movswq 0x70(%rdx),%r8
test   %r8w,%r8w
jne    35b39 <jpeg_idct_2x2+0x29>
movswq (%rsi),%r8
movswq (%rdx),%r9
imul   %r9d,%r8d
shl    $0x2,%r8d
mov    %r8d,(%rdi)
mov    %r8d,0x20(%rdi)
jmpq   35c01 <jpeg_idct_2x2+0xf1>
movslq 0x14(%rax),%rsi
lea    (%rsi,%rsi,2),%rdx
shl    $0x5,%rdx
lea    (%rdx,%rsi,8),%rdx
lea    (%rdx,%rsi,4),%rdx
add    %rsi,%rdx
shl    $0x6,%rdx
lea    (%rsi,%rsi,8),%rsi
sub    %rsi,%rdx
movslq 0x1c(%rax),%rsi
imul   $0xffffffffffffe8ee,%rsi,%rsi
add    %rdx,%rsi
movslq 0xc(%rax),%rdx
imul   $0xffffffffffffd746,%rdx,%rdx
lea    (%rdx,%rsi,1),%r15
movslq 0x4(%rax),%rdx
mov    %rdx,%rsi
shl    $0x2,%rsi
lea    (%rdx,%rdx,2),%r9
lea    (%rsi,%r9,8),%r9
add    %r9,%rdx
shl    $0xa,%rdx
sub    %rsi,%rdx
lea    (%r15,%rdx,1),%r9
movslq (%rax),%rdx
shl    $0xf,%rdx
lea    0x80000(%r9,%rdx,1),%rsi
sar    $0x14,%rsi
and    $0x3ff,%esi
movslq %esi,%rsi
movzbl 0x80(%r8,%rsi,1),%esi
mov    %sil,(%r11,%r10,1)
sub    %r9,%rdx
add    $0x80000,%rdx
sar    $0x14,%rdx
and    $0x3ff,%edx
movslq %edx,%rdx
movzbl 0x80(%rdx,%r8,1),%edx
mov    %dl,0x1(%r11,%r10,1)
add    $0x20,%rax
add    $0x1,%edi
cmp    $0x1,%edi
jle    35d55 <jpeg_idct_2x2+0x245>
mov    -0x8(%rbp),%r15
leaveq 
retq   
movslq %edi,%rdx
mov    (%rcx,%rdx,8),%r10
movslq 0x4(%rax),%rdx
test   %edx,%edx
jne    35c95 <jpeg_idct_2x2+0x185>
movslq 0xc(%rax),%rdx
test   %edx,%edx
jne    35c95 <jpeg_idct_2x2+0x185>
movslq 0x14(%rax),%rdx
test   %edx,%edx
jne    35c95 <jpeg_idct_2x2+0x185>
movslq 0x1c(%rax),%rdx
test   %edx,%edx
jne    35c95 <jpeg_idct_2x2+0x185>
movslq (%rax),%rdx
add    $0x10,%rdx
sar    $0x5,%rdx
and    $0x3ff,%edx
movslq %edx,%rdx
movzbl 0x80(%r8,%rdx,1),%edx
mov    %dl,(%r11,%r10,1)
mov    %dl,0x1(%r11,%r10,1)
add    $0x20,%rax
jmp    35d47 <jpeg_idct_2x2+0x237>
nopl   0x0(%rax,%rax,1)

0000000000035dc0 <jpeg_idct_1x1>:
push   %rbp
mov    %rsp,%rbp
mov    0x58(%rsi),%rax
movswq (%rax),%rax
movswq (%rdx),%rdx
imul   %edx,%eax
movslq %eax,%rax
add    $0x4,%rax
sar    $0x3,%rax
and    $0x3ff,%eax
movslq %eax,%rax
mov    0x1a8(%rdi),%rdx
movzbl 0x80(%rax,%rdx,1),%edx
mov    %r8d,%esi
mov    (%rcx),%rax
mov    %dl,(%rsi,%rax,1)
leaveq 
retq   

0000000000035e00 <jinit_1pass_quantizer>:
push   %rbp
mov    %rsp,%rbp
sub    $0x10,%rsp
mov    %r15,-0x8(%rbp)
mov    0x8(%rdi),%rax
mov    (%rax),%rax
mov    $0x1,%esi
mov    $0x98,%edx
mov    %rdi,%r15
callq  *%rax
mov    %rax,0x270(%r15)
lea    0xdb0(%rip),%rcx        # 36be0 <start_pass_1_quant>
mov    %rcx,(%rax)
lea    0xf36(%rip),%rcx        # 36d70 <finish_pass_1_quant>
mov    %rcx,0x10(%rax)
lea    0xf3b(%rip),%rcx        # 36d80 <new_color_map_1_quant>
mov    %rcx,0x18(%rax)
movq   $0x0,0x70(%rax)
movq   $0x0,0x50(%rax)
movslq 0x90(%r15),%rax
cmp    $0x4,%eax
jle    35e84 <jinit_1pass_quantizer+0x84>
mov    (%r15),%rax
movl   $0x37,0x28(%rax)
mov    (%r15),%rax
movl   $0x4,0x2c(%rax)
mov    (%r15),%rax
mov    (%rax),%rax
mov    %r15,%rdi
callq  *%rax
movslq 0x78(%r15),%rax
cmp    $0x100,%eax
jle    35eae <jinit_1pass_quantizer+0xae>
mov    (%r15),%rax
movl   $0x39,0x28(%rax)
mov    (%r15),%rax
movl   $0x100,0x2c(%rax)
mov    (%r15),%rax
mov    (%rax),%rax
mov    %r15,%rdi
callq  *%rax
mov    %r15,%rdi
callq  360d0 <create_colormap>
mov    %r15,%rdi
callq  36260 <create_colorindex>
mov    0x70(%r15),%eax
cmp    $0x2,%eax
je     35ecd <jinit_1pass_quantizer+0xcd>
mov    -0x8(%rbp),%r15
leaveq 
retq   
mov    %r15,%rdi
callq  36b60 <alloc_fs_workspace>
mov    -0x8(%rbp),%r15
leaveq 
retq   
nopl   0x0(%rax,%rax,1)

0000000000035ee0 <select_ncolors>:
push   %rbp
mov    %rsp,%rbp
sub    $0x50,%rsp
mov    %rdi,-0x38(%rbp)
movq   $0x1,-0x44(%rbp)
movslq 0x90(%rdi),%r8
movslq 0x78(%rdi),%r11
lea    0x2547e(%rip),%rax        # 5b384 <rgb_green>
mov    0x40(%rdi),%ecx
movslq (%rax,%rcx,4),%rax
mov    %eax,-0x44(%rbp)
lea    0x25429(%rip),%rax        # 5b340 <rgb_red>
movslq (%rax,%rcx,4),%rax
mov    %eax,-0x40(%rbp)
lea    0x254a3(%rip),%rax        # 5b3c8 <rgb_blue>
movslq (%rax,%rcx,4),%rax
mov    %eax,-0x3c(%rbp)
mov    $0x1,%edx
mov    %rdx,%r9
jmp    35f39 <select_ncolors+0x59>
mov    %rdi,%r9
lea    0x1(%r9),%edi
movslq %edi,%r10
mov    %rdx,%rcx
mov    %r10,%rax
jmp    35f4f <select_ncolors+0x6f>
imul   %r10,%rax
add    $0x1,%ecx
cmp    %ecx,%r8d
jg     35f48 <select_ncolors+0x68>
cmp    %rax,%r11
jge    35f36 <select_ncolors+0x56>
xor    %ecx,%ecx
cmp    $0x1,%r9d
jle    35f84 <select_ncolors+0xa4>
mov    %r11,-0x30(%rbp)
mov    %rbx,-0x8(%rbp)
mov    %r12,-0x10(%rbp)
mov    %r13,-0x18(%rbp)
mov    %r14,-0x20(%rbp)
mov    %r15,-0x28(%rbp)
mov    %rdx,%rbx
mov    %rcx,%rdx
mov    %rbx,%rax
jmp    35feb <select_ncolors+0x10b>
mov    -0x38(%rbp),%rdi
mov    (%rdi),%r10
movl   $0x38,0x28(%r10)
mov    (%rdi),%r10
mov    %eax,0x2c(%r10)
mov    (%rdi),%rax
mov    (%rax),%rax
mov    %r11,-0x30(%rbp)
mov    %rbx,-0x8(%rbp)
mov    %r12,-0x10(%rbp)
mov    %r13,-0x18(%rbp)
mov    %r14,-0x20(%rbp)
mov    %r15,-0x28(%rbp)
mov    %rdx,%rbx
mov    %r8,%r12
mov    %rsi,%r13
mov    %rcx,%r14
mov    %r9,%r15
callq  *%rax
mov    %r14,%rdx
mov    %r13,%rsi
mov    %r12,%r8
mov    %r15,%r9
mov    %rdx,%rcx
mov    %rbx,%rax
jmp    35feb <select_ncolors+0x10b>
imul   %r9d,%eax
movslq %edx,%rdi
mov    %r9d,(%rsi,%rdi,4)
add    $0x1,%edx
cmp    %r8d,%edx
jl     35fdd <select_ncolors+0xfd>
mov    -0x30(%rbp),%r9
mov    -0x38(%rbp),%rdi
mov    %rcx,%r10
mov    %r10,%r11
jmp    36006 <select_ncolors+0x126>
mov    %rcx,%r10
mov    %r10,%r11
cmp    %r8d,%r11d
jge    36047 <select_ncolors+0x167>
mov    0x40(%rdi),%edx
cmp    $0x2,%edx
je     36018 <select_ncolors+0x138>
mov    %r11,%rdx
jmp    36020 <select_ncolors+0x140>
movslq %r11d,%rdx
movslq -0x44(%rbp,%rdx,4),%rdx
movslq %edx,%r12
movslq (%rsi,%r12,4),%r13
cltd   
mov    %rax,%r14
idiv   %r13d
movslq %eax,%r13
movslq (%rsi,%r12,4),%rdx
add    $0x1,%edx
movslq %edx,%rax
imul   %r13,%rax
cmp    %rax,%r9
jge    36062 <select_ncolors+0x182>
mov    %r14,%rax
test   %r10d,%r10d
jg     36000 <select_ncolors+0x120>
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
leaveq 
retq   
mov    %edx,(%rsi,%r12,4)
add    $0x1,%r11d
mov    %rbx,%r10
jmp    36006 <select_ncolors+0x126>
nop

0000000000036070 <output_value>:
push   %rbp
mov    %rsp,%rbp
mov    %rcx,%rax
shr    $0x1f,%eax
add    %ecx,%eax
sar    %eax
movslq %eax,%rsi
movslq %edx,%rdx
mov    %rdx,%rax
shl    $0x8,%rax
sub    %rdx,%rax
add    %rsi,%rax
cqto   
movslq %ecx,%rcx
idiv   %rcx
leaveq 
retq   
nopl   0x0(%rax,%rax,1)

00000000000360a0 <largest_input_value>:
push   %rbp
mov    %rsp,%rbp
lea    0x1(%rdx,%rdx,1),%eax
movslq %eax,%rdx
mov    %rdx,%rax
shl    $0x8,%rax
sub    %rdx,%rax
movslq %ecx,%rdx
add    %rdx,%rax
cqto   
add    %ecx,%ecx
movslq %ecx,%rcx
idiv   %rcx
leaveq 
retq   
nopw   0x0(%rax,%rax,1)

00000000000360d0 <create_colormap>:
push   %rbp
mov    %rsp,%rbp
sub    $0x60,%rsp
mov    %r13,-0x20(%rbp)
mov    %r14,-0x28(%rbp)
mov    %r15,-0x30(%rbp)
mov    %rbx,-0x10(%rbp)
mov    %r12,-0x18(%rbp)
mov    %rdi,-0x50(%rbp)
mov    0x270(%rdi),%r12
mov    %r12,-0x8(%rbp)
lea    0x3c(%r12),%r15
mov    %r15,-0x48(%rbp)
mov    %rdi,%rbx
mov    %r15,%rsi
callq  35ee0 <select_ncolors>
mov    $0x1,%r13d
movslq 0x90(%rbx),%rcx
cmp    $0x3,%ecx
je     36145 <create_colormap+0x75>
mov    (%rbx),%rcx
movl   $0x5f,0x28(%rcx)
mov    (%rbx),%rcx
mov    %eax,0x2c(%rcx)
mov    (%rbx),%rcx
mov    0x8(%rcx),%rcx
mov    %rax,%r12
mov    %rbx,%rdi
mov    %r13,%rsi
callq  *%rcx
jmp    3617d <create_colormap+0xad>
mov    (%rbx),%rdx
mov    %eax,0x2c(%rdx)
movslq (%r15),%rcx
mov    %ecx,0x30(%rdx)
movslq 0x40(%r12),%rcx
mov    %ecx,0x34(%rdx)
movslq 0x44(%r12),%rcx
mov    %ecx,0x38(%rdx)
mov    (%rbx),%rcx
movl   $0x5e,0x28(%rcx)
mov    (%rbx),%rcx
mov    0x8(%rcx),%rcx
mov    %rax,%r12
mov    %rbx,%rdi
mov    %r13,%rsi
callq  *%rcx
mov    0x8(%rbx),%rax
mov    0x10(%rax),%rax
mov    %r13,%rsi
mov    0x90(%rbx),%ecx
mov    %rbx,%rdi
mov    %r12,%rdx
callq  *%rax
mov    %rbx,%rdi
mov    %rax,%r13
xor    %r8d,%r8d
mov    %r8,%rsi
mov    %r12,%rbx
jmp    361e1 <create_colormap+0x111>
mov    0x0(%r13,%r14,8),%r10
movslq %ecx,%r9
mov    %al,(%r10,%r9,1)
add    $0x1,%ecx
add    $0x1,%edx
cmp    %ebx,%edx
jl     361a7 <create_colormap+0xd7>
add    %r11d,%edi
cmp    %r12d,%edi
jl     36216 <create_colormap+0x146>
add    $0x1,%r15d
mov    -0x50(%rbp),%rdi
mov    -0x40(%rbp),%r9
mov    -0x58(%rbp),%rcx
cmp    %r9d,%r15d
jl     3621e <create_colormap+0x14e>
add    $0x1,%esi
mov    -0x48(%rbp),%r15
mov    %rbx,-0x60(%rbp)
mov    %rsi,-0x38(%rbp)
movslq 0x90(%rdi),%rax
cmp    %esi,%eax
jg     3623a <create_colormap+0x16a>
mov    -0x8(%rbp),%rax
mov    %r13,0x20(%rax)
mov    %r12d,0x28(%rax)
mov    -0x18(%rbp),%r12
mov    -0x10(%rbp),%rbx
mov    -0x30(%rbp),%r15
mov    -0x28(%rbp),%r14
mov    -0x20(%rbp),%r13
leaveq 
retq   
mov    %rdi,%rcx
mov    %r8,%rdx
jmp    361b9 <create_colormap+0xe9>
mov    %r15,%rdx
callq  36070 <output_value>
mov    %rbx,%rdi
imul   %r15d,%edi
mov    -0x38(%rbp),%rsi
mov    -0x60(%rbp),%r11
xor    %r8d,%r8d
jmp    361c0 <create_colormap+0xf0>
movslq %esi,%r14
movslq (%r15,%r14,4),%r9
mov    %rbx,%rax
mov    %r9,-0x40(%rbp)
cltd   
idiv   %r9d
lea    -0x1(%r9),%ecx
mov    %rcx,-0x58(%rbp)
mov    %rax,%rbx
mov    %r8,%r15
jmpq   361d5 <create_colormap+0x105>
nop

0000000000036260 <create_colorindex>:
push   %rbp
mov    %rsp,%rbp
sub    $0x50,%rsp
mov    %r12,-0x10(%rbp)
mov    %r13,-0x18(%rbp)
mov    %r14,-0x20(%rbp)
mov    %r15,-0x28(%rbp)
mov    %rbx,-0x8(%rbp)
mov    0x270(%rdi),%r15
mov    %r15,-0x48(%rbp)
xor    %r12d,%r12d
mov    0x70(%rdi),%eax
cmp    $0x1,%eax
je     362a4 <create_colorindex+0x44>
movl   $0x0,0x38(%r15)
mov    $0x100,%edx
mov    %r12,%r13
jmp    362b7 <create_colorindex+0x57>
movl   $0x1,0x38(%r15)
mov    $0x2fe,%edx
mov    $0x1fe,%r13d
mov    %r13,-0x40(%rbp)
mov    0x8(%rdi),%rax
mov    0x10(%rax),%rax
mov    $0x1,%esi
mov    0x90(%rdi),%ecx
mov    %rdi,%rbx
callq  *%rax
movslq 0x28(%r15),%r8
mov    %rax,0x30(%r15)
mov    %r12,%rdx
jmp    3632f <create_colorindex+0xcf>
add    $0x1,%r14d
mov    %rbx,%rdi
mov    %r12,%rsi
mov    %r14,%rdx
mov    %r13,%rcx
callq  360a0 <largest_input_value>
cmp    %r15d,%eax
jl     362e0 <create_colorindex+0x80>
mov    -0x30(%rbp),%r8
mov    %r14,%rdx
imul   %r8d,%edx
movslq %r15d,%rcx
mov    -0x38(%rbp),%rsi
mov    %dl,(%rsi,%rcx,1)
add    $0x1,%r15d
cmp    $0xff,%r15d
jle    362f5 <create_colorindex+0x95>
mov    -0x40(%rbp),%r13
test   %r13d,%r13d
jg     36351 <create_colorindex+0xf1>
add    $0x1,%r12d
mov    -0x48(%rbp),%r15
xor    %edx,%edx
movslq 0x90(%rbx),%rax
cmp    %r12d,%eax
jg     3635f <create_colorindex+0xff>
mov    -0x8(%rbp),%rbx
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
leaveq 
retq   
mov    -0x38(%rbp),%rsi
mov    $0x1,%eax
jmpq   363e5 <create_colorindex+0x185>
test   %r13d,%r13d
movslq %r12d,%rsi
movslq 0x3c(%r15,%rsi,4),%r14
jle    3637e <create_colorindex+0x11e>
mov    0x30(%r15),%rcx
mov    (%rcx,%rsi,8),%rax
add    $0xff,%rax
mov    %rax,(%rcx,%rsi,8)
mov    0x30(%r15),%rax
mov    (%rax,%rsi,8),%rax
mov    %rax,-0x38(%rbp)
mov    %r8,%r15
lea    -0x1(%r14),%r13d
mov    %rbx,%rdi
mov    %r12,%rsi
mov    %r13,%rcx
callq  360a0 <largest_input_value>
mov    %r15,%rcx
mov    %rax,%r15
mov    %rcx,%rax
cltd   
idiv   %r14d
mov    %rax,%r8
mov    %r15,%rax
mov    %r8,-0x30(%rbp)
xor    %r14d,%r14d
mov    %r14,%r15
jmpq   36313 <create_colorindex+0xb3>
movzbl (%rsi),%edx
mov    %rax,%rcx
neg    %ecx
movslq %ecx,%rcx
mov    %dl,(%rsi,%rcx,1)
movzbl 0xff(%rsi),%edx
lea    0xff(%rax),%ecx
movslq %ecx,%rcx
mov    %dl,(%rsi,%rcx,1)
add    $0x1,%eax
cmp    $0xff,%eax
jle    363c1 <create_colorindex+0x161>
jmpq   36325 <create_colorindex+0xc5>
data16 nopw %cs:0x0(%rax,%rax,1)
nopl   0x0(%rax)

0000000000036400 <make_odither_array>:
push   %rbp
mov    %rsp,%rbp
sub    $0x20,%rsp
mov    %r15,-0x20(%rbp)
mov    %r12,-0x8(%rbp)
mov    %r13,-0x10(%rbp)
mov    %r14,-0x18(%rbp)
mov    0x8(%rdi),%rax
mov    (%rax),%rax
mov    %rsi,%r12
mov    $0x1,%esi
mov    $0x400,%edx
callq  *%rax
lea    -0x1(%r12),%ecx
movslq %ecx,%rcx
shl    $0x9,%rcx
mov    %rax,%r12
lea    0x24fc8(%rip),%r8        # 5b40c <base_dither_matrix>
xor    %esi,%esi
mov    $0xff,%edi
mov    %rsi,%r9
jmp    3646d <make_odither_array+0x6d>
sub    %rdx,%rax
cqto   
idiv   %rcx
neg    %rax
mov    %eax,(%r10,%r14,4)
add    $0x1,%r13d
cmp    $0xf,%r13d
jle    36488 <make_odither_array+0x88>
add    $0x1,%r9d
cmp    $0xf,%r9d
jle    364b9 <make_odither_array+0xb9>
mov    %r12,%rax
mov    -0x18(%rbp),%r14
mov    -0x10(%rbp),%r13
mov    -0x8(%rbp),%r12
mov    -0x20(%rbp),%r15
leaveq 
retq   
movslq %r13d,%r14
lea    (%r11,%r14,1),%rax
movzbl (%rax,%r8,1),%eax
add    %eax,%eax
neg    %eax
add    %edi,%eax
movslq %eax,%rax
mov    %rax,%rdx
shl    $0x8,%rdx
mov    %rdx,%r15
sub    %rax,%r15
test   %r15,%r15
js     36450 <make_odither_array+0x50>
mov    %r15,%rax
cqto   
idiv   %rcx
jmp    3645b <make_odither_array+0x5b>
movslq %r9d,%rax
mov    %rax,%r11
shl    $0x4,%r11
shl    $0x6,%rax
lea    (%r12,%rax,1),%r10
mov    %rsi,%r13
jmp    36463 <make_odither_array+0x63>

00000000000364d0 <create_odither_tables>:
push   %rbp
mov    %rsp,%rbp
sub    $0x30,%rsp
mov    %rbx,-0x8(%rbp)
mov    %r12,-0x10(%rbp)
mov    %r13,-0x18(%rbp)
mov    %r14,-0x20(%rbp)
mov    %r15,-0x28(%rbp)
mov    %rdi,%rbx
mov    0x270(%rbx),%r12
xor    %r13d,%r13d
mov    %r13,%r14
jmp    3652b <create_odither_tables+0x5b>
movslq %eax,%rcx
movslq 0x3c(%r12,%rcx,4),%rdx
cmp    %esi,%edx
je     3654d <create_odither_tables+0x7d>
add    $0x1,%eax
cmp    %r14d,%eax
jl     364fe <create_odither_tables+0x2e>
mov    %r13,%rax
test   %rax,%rax
jne    36522 <create_odither_tables+0x52>
mov    %rbx,%rdi
callq  36400 <make_odither_array>
mov    %rax,0x50(%r12,%r15,8)
add    $0x1,%r14d
movslq 0x90(%rbx),%rax
cmp    %r14d,%eax
jg     36554 <create_odither_tables+0x84>
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
leaveq 
retq   
mov    0x50(%r12,%rcx,8),%rax
jmp    36515 <create_odither_tables+0x45>
movslq %r14d,%r15
movslq 0x3c(%r12,%r15,4),%rsi
mov    %r13,%rax
jmp    3650d <create_odither_tables+0x3d>
data16 nopw %cs:0x0(%rax,%rax,1)
nopl   0x0(%rax)

0000000000036570 <color_quantize>:
push   %rbp
mov    %rsp,%rbp
sub    $0x30,%rsp
mov    %rbx,-0x8(%rbp)
mov    %r12,-0x10(%rbp)
mov    %r13,-0x18(%rbp)
mov    %r14,-0x20(%rbp)
mov    %r15,-0x28(%rbp)
mov    0x270(%rdi),%rax
mov    0x30(%rax),%r11
mov    0x88(%rdi),%ebx
mov    %rbx,-0x30(%rbp)
movslq 0x90(%rdi),%r15
xor    %r14d,%r14d
mov    %r14,%r9
jmp    365ea <color_quantize+0x7a>
lea    0x1(%r10),%r13d
lea    0x1(%rdi),%r12
movslq %r10d,%r10
mov    (%r11,%r10,8),%r10
movzbl (%rdi),%edi
movzbl (%rdi,%r10,1),%edi
add    %edi,%eax
mov    %r12,%rdi
mov    %r13,%r10
cmp    %r15d,%r10d
jl     365b0 <color_quantize+0x40>
mov    %al,(%r8)
add    $0x1,%r8
add    $0xffffffff,%ebx
test   %ebx,%ebx
jne    36605 <color_quantize+0x95>
add    $0x1,%r9d
mov    -0x30(%rbp),%rbx
cmp    %ecx,%r9d
jl     3660d <color_quantize+0x9d>
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
leaveq 
retq   
mov    %r14,%rax
mov    %rax,%r10
jmp    365cf <color_quantize+0x5f>
movslq %r9d,%rax
mov    (%rsi,%rax,8),%rdi
mov    (%rdx,%rax,8),%r8
jmp    365de <color_quantize+0x6e>
nopw   0x0(%rax,%rax,1)

0000000000036620 <color_quantize3>:
push   %rbp
mov    %rsp,%rbp
sub    $0x20,%rsp
mov    %r12,-0x8(%rbp)
mov    %r13,-0x10(%rbp)
mov    %r14,-0x18(%rbp)
mov    %r15,-0x20(%rbp)
mov    0x270(%rdi),%rax
mov    0x30(%rax),%rax
mov    (%rax),%r15
mov    0x8(%rax),%r12
mov    0x10(%rax),%r14
mov    0x88(%rdi),%r13d
xor    %r9d,%r9d
jmp    36695 <color_quantize3+0x75>
movzbl 0x1(%rax),%r10d
movzbl (%r10,%r12,1),%r11d
movzbl (%rax),%r10d
movzbl (%r10,%r15,1),%r10d
add    %r11d,%r10d
movzbl 0x2(%rax),%r11d
movzbl (%r11,%r14,1),%r11d
add    %r11d,%r10d
mov    %r10b,(%rdi)
add    $0x3,%rax
add    $0x1,%rdi
add    $0xffffffff,%r8d
test   %r8d,%r8d
jne    3665a <color_quantize3+0x3a>
add    $0x1,%r9d
cmp    %ecx,%r9d
jl     366ac <color_quantize3+0x8c>
mov    -0x20(%rbp),%r15
mov    -0x18(%rbp),%r14
mov    -0x10(%rbp),%r13
mov    -0x8(%rbp),%r12
leaveq 
retq   
movslq %r9d,%rdi
mov    (%rsi,%rdi,8),%rax
mov    (%rdx,%rdi,8),%rdi
mov    %r13,%r8
jmp    3668c <color_quantize3+0x6c>
nopl   0x0(%rax)

00000000000366c0 <quantize_ord_dither>:
push   %rbp
mov    %rsp,%rbp
sub    $0x60,%rsp
mov    %rcx,-0x58(%rbp)
mov    %rbx,-0x20(%rbp)
mov    %r12,-0x28(%rbp)
mov    %r13,-0x30(%rbp)
mov    %r14,-0x38(%rbp)
mov    %r15,-0x40(%rbp)
mov    %rsi,-0x10(%rbp)
mov    0x270(%rdi),%r13
movslq 0x90(%rdi),%r12
mov    0x88(%rdi),%edi
mov    %rsi,%rbx
mov    %rdi,%rsi
mov    %rdx,%r14
mov    %rsi,-0x48(%rbp)
xor    %eax,%eax
jmp    3676b <quantize_ord_dither+0xab>
lea    0x1(%r10),%r8d
and    $0xf,%r8d
movzbl (%rax),%edi
movslq %r10d,%rdx
add    (%r9,%rdx,4),%edi
movslq %edi,%rdx
movzbl (%rdx,%r11,1),%edx
movzbl (%rcx),%edi
add    %edi,%edx
mov    %dl,(%rcx)
add    $0x1,%rcx
add    %r12,%rax
add    $0xffffffff,%ebx
mov    %r8,%r10
test   %ebx,%ebx
jne    36709 <quantize_ord_dither+0x49>
mov    -0x60(%rbp),%rax
lea    0x1(%rax),%edi
mov    -0x10(%rbp),%rbx
mov    -0x18(%rbp),%r9
xor    %r10d,%r10d
cmp    %r12d,%edi
jl     36785 <quantize_ord_dither+0xc5>
mov    -0x8(%rbp),%rax
add    $0x1,%eax
and    $0xf,%eax
mov    %eax,0x4c(%r13)
mov    -0x50(%rbp),%rax
add    $0x1,%eax
mov    -0x58(%rbp),%rcx
cmp    %ecx,%eax
jl     367a6 <quantize_ord_dither+0xe6>
mov    -0x40(%rbp),%r15
mov    -0x38(%rbp),%r14
mov    -0x30(%rbp),%r13
mov    -0x28(%rbp),%r12
mov    -0x20(%rbp),%rbx
leaveq 
retq   
mov    (%r14,%r15,8),%rcx
mov    0x30(%r13),%rdx
movslq %edi,%rax
mov    (%rdx,%rax,8),%r11
add    0x50(%r13,%rax,8),%r9
add    (%rbx,%r15,8),%rax
mov    %rdi,-0x60(%rbp)
mov    %rsi,%rbx
jmp    36737 <quantize_ord_dither+0x77>
movslq %eax,%r15
mov    (%r14,%r15,8),%rdi
mov    %rax,-0x50(%rbp)
callq  44d0 <jzero_far@plt>
movslq 0x4c(%r13),%r9
mov    %r9,-0x8(%rbp)
shl    $0x6,%r9
mov    %r9,-0x18(%rbp)
xor    %r10d,%r10d
mov    -0x48(%rbp),%rsi
mov    %r10,%rdi
jmpq   3674d <quantize_ord_dither+0x8d>
data16 nopw %cs:0x0(%rax,%rax,1)

00000000000367e0 <quantize3_ord_dither>:
push   %rbp
mov    %rsp,%rbp
sub    $0x60,%rsp
mov    %rdx,-0x10(%rbp)
mov    %rsi,-0x18(%rbp)
mov    %rbx,-0x28(%rbp)
mov    %r12,-0x30(%rbp)
mov    %r13,-0x38(%rbp)
mov    %r14,-0x40(%rbp)
mov    %r15,-0x48(%rbp)
mov    %rcx,-0x50(%rbp)
mov    0x270(%rdi),%r9
mov    %r9,-0x20(%rbp)
mov    0x30(%r9),%rax
mov    (%rax),%r12
mov    0x8(%rax),%r13
mov    0x10(%rax),%r11
mov    0x88(%rdi),%eax
mov    %rax,-0x58(%rbp)
xor    %ebx,%ebx
mov    %rbx,%r10
jmp    368ac <quantize3_ord_dither+0xcc>
lea    0x1(%rbx),%edi
and    $0xf,%edi
movzbl 0x1(%rcx),%esi
movslq %ebx,%r9
add    (%r15,%r9,4),%esi
movslq %esi,%rsi
movzbl (%rsi,%r13,1),%ebx
movzbl (%rcx),%esi
add    (%r14,%r9,4),%esi
movslq %esi,%rsi
movzbl (%rsi,%r12,1),%esi
add    %esi,%ebx
movzbl 0x2(%rcx),%esi
add    (%r8,%r9,4),%esi
movslq %esi,%rsi
movzbl (%rsi,%r11,1),%esi
add    %ebx,%esi
mov    %sil,(%rdx)
add    $0x3,%rcx
add    $0x1,%rdx
add    $0xffffffff,%eax
mov    %rdi,%rbx
test   %eax,%eax
jne    36833 <quantize3_ord_dither+0x53>
mov    -0x8(%rbp),%rax
add    $0x1,%eax
and    $0xf,%eax
mov    -0x20(%rbp),%r9
mov    %eax,0x4c(%r9)
add    $0x1,%r10d
mov    -0x58(%rbp),%rax
xor    %ebx,%ebx
mov    -0x50(%rbp),%rcx
mov    -0x18(%rbp),%rsi
mov    -0x10(%rbp),%rdx
cmp    %ecx,%r10d
jl     368c7 <quantize3_ord_dither+0xe7>
mov    -0x48(%rbp),%r15
mov    -0x40(%rbp),%r14
mov    -0x38(%rbp),%r13
mov    -0x30(%rbp),%r12
mov    -0x28(%rbp),%rbx
leaveq 
retq   
movslq %r10d,%rdi
mov    (%rsi,%rdi,8),%rcx
mov    (%rdx,%rdi,8),%rdx
movslq 0x4c(%r9),%r8
mov    %r8,-0x8(%rbp)
shl    $0x6,%r8
mov    %r8,%r15
add    0x58(%r9),%r15
mov    %r8,%r14
add    0x50(%r9),%r14
add    0x60(%r9),%r8
jmp    36880 <quantize3_ord_dither+0xa0>
data16 nopw %cs:0x0(%rax,%rax,1)
nopl   (%rax)

0000000000036900 <quantize_fs_dither>:
push   %rbp
mov    %rsp,%rbp
sub    $0xb0,%rsp
mov    %r15,-0x28(%rbp)
mov    %r14,-0x20(%rbp)
mov    %r13,-0x18(%rbp)
mov    %r12,-0x10(%rbp)
mov    %rbx,-0x8(%rbp)
mov    %rcx,-0x98(%rbp)
mov    %rsi,-0x70(%rbp)
mov    %rdx,-0x80(%rbp)
mov    0x270(%rdi),%r13
mov    %r13,-0x68(%rbp)
mov    0x1a8(%rdi),%rax
mov    %rax,-0x50(%rbp)
movslq 0x90(%rdi),%r14
mov    %r14,-0xa8(%rbp)
mov    0x88(%rdi),%ebx
mov    %rbx,-0x30(%rbp)
lea    -0x1(%rbx),%edi
mov    %r14,%rax
imul   %edi,%eax
mov    %eax,%eax
mov    %rax,-0x38(%rbp)
mov    %r14,%rax
neg    %eax
mov    %rax,-0x40(%rbp)
mov    %edi,%eax
mov    %rax,-0x78(%rbp)
xor    %eax,%eax
lea    0x1(%rbx),%edi
mov    %edi,%edi
add    %rdi,%rdi
mov    %rdi,-0x60(%rbp)
mov    %rsi,%r12
mov    %rbx,%rsi
mov    %rdx,%rbx
jmpq   36a7a <quantize_fs_dither+0x17a>
lea    (%rax,%r9,1),%r13
movswq 0x0(%r13),%rax
lea    0x8(%rax,%rbx,1),%eax
sar    $0x4,%eax
movzbl (%rcx),%ebx
add    %ebx,%eax
movslq %eax,%rax
movzbl (%rax,%r14,1),%ebx
movzbl (%rbx,%rdi,1),%edi
movzbl (%rdx),%eax
add    %edi,%eax
mov    %al,(%rdx)
movzbl (%rdi,%r12,1),%eax
sub    %eax,%ebx
lea    (%rbx,%rbx,2),%edi
lea    (%r8,%rdi,1),%eax
mov    %ax,(%r9)
lea    (%rbx,%rbx,4),%eax
lea    (%r11,%rax,1),%r8d
add    %r15,%rcx
lea    (%rbx,%rdi,2),%r9d
add    %r10,%rdx
add    $0xffffffff,%esi
mov    %rbx,%r11
mov    %r9,%rbx
mov    %r13,%r9
mov    -0x58(%rbp),%rdi
mov    -0x48(%rbp),%rax
test   %esi,%esi
jne    36996 <quantize_fs_dither+0x96>
mov    %r8w,(%r9)
mov    -0xa0(%rbp),%rax
lea    0x1(%rax),%ecx
mov    -0x68(%rbp),%r13
mov    -0xa8(%rbp),%r14
mov    $0xffffffffffffffff,%r15
mov    -0x40(%rbp),%r8
mov    -0x88(%rbp),%rdx
mov    -0x80(%rbp),%rbx
mov    -0x70(%rbp),%r12
mov    $0x1,%r10d
mov    -0x78(%rbp),%rdi
mov    -0x38(%rbp),%rsi
mov    -0x60(%rbp),%r9
mov    $0x2,%r11d
mov    $0xfffffffffffffffe,%rax
cmp    %r14d,%ecx
jl     36a94 <quantize_fs_dither+0x194>
movslq 0x90(%r13),%rax
test   %eax,%eax
je     36a5e <quantize_fs_dither+0x15e>
xor    %r10d,%r10d
mov    %r10d,0x90(%r13)
mov    -0x90(%rbp),%rax
add    $0x1,%eax
mov    -0x30(%rbp),%rsi
mov    -0x98(%rbp),%rcx
cmp    %ecx,%eax
jl     36ac2 <quantize_fs_dither+0x1c2>
mov    -0x8(%rbp),%rbx
mov    -0x10(%rbp),%r12
mov    -0x18(%rbp),%r13
mov    -0x20(%rbp),%r14
mov    -0x28(%rbp),%r15
leaveq 
retq   
mov    (%r12,%rdx,8),%r12
mov    (%rbx,%rdx,8),%rdx
movslq %ecx,%rbx
mov    %rcx,-0xa0(%rbp)
movslq 0x90(%r13),%rcx
test   %ecx,%ecx
jne    36b10 <quantize_fs_dither+0x210>
mov    0x70(%r13,%rbx,8),%r9
lea    (%r12,%rbx,1),%rcx
mov    %r11,%rax
mov    %r14,%r8
jmp    36b22 <quantize_fs_dither+0x222>
movslq %eax,%r15
mov    %rax,-0x90(%rbp)
mov    %r15,-0x88(%rbp)
mov    (%rbx,%r15,8),%rdi
callq  44d0 <jzero_far@plt>
mov    %r15,%rdx
mov    $0xffffffffffffffff,%r15
mov    -0x40(%rbp),%r8
mov    $0x1,%r10d
xor    %ecx,%ecx
mov    -0x78(%rbp),%rdi
mov    -0x38(%rbp),%rsi
mov    -0x60(%rbp),%r9
mov    $0x2,%r11d
mov    $0xfffffffffffffffe,%rax
jmpq   36a4b <quantize_fs_dither+0x14b>
add    0x70(%r13,%rbx,8),%r9
lea    (%r12,%rsi,1),%rcx
add    %rbx,%rcx
add    %rdi,%rdx
mov    %r15,%r10
mov    %rax,-0x48(%rbp)
mov    0x30(%r13),%rsi
mov    (%rsi,%rbx,8),%rdi
mov    %rdi,-0x58(%rbp)
mov    0x20(%r13),%rsi
mov    (%rsi,%rbx,8),%r12
movslq %r8d,%r15
mov    -0x50(%rbp),%r14
xor    %r11d,%r11d
mov    -0x30(%rbp),%rsi
mov    %r11,%rbx
mov    %rbx,%r8
jmpq   369f5 <quantize_fs_dither+0xf5>
data16 nopw %cs:0x0(%rax,%rax,1)
xchg   %ax,%ax

0000000000036b60 <alloc_fs_workspace>:
push   %rbp
mov    %rsp,%rbp
sub    $0x30,%rsp
mov    %rbx,-0x8(%rbp)
mov    %r12,-0x10(%rbp)
mov    %r13,-0x18(%rbp)
mov    %r14,-0x20(%rbp)
mov    %r15,-0x28(%rbp)
mov    0x270(%rdi),%r15
mov    $0x1,%r13d
mov    0x88(%rdi),%eax
add    $0x2,%eax
mov    %eax,%eax
lea    (%rax,%rax,1),%r14
mov    %rdi,%r12
xor    %ebx,%ebx
jmp    36bbe <alloc_fs_workspace+0x5e>
mov    0x8(%r12),%rax
mov    0x8(%rax),%rax
mov    %r12,%rdi
mov    %r13,%rsi
mov    %r14,%rdx
callq  *%rax
movslq %ebx,%rcx
mov    %rax,0x70(%r15,%rcx,8)
add    $0x1,%ebx
movslq 0x90(%r12),%rax
cmp    %ebx,%eax
jg     36b9f <alloc_fs_workspace+0x3f>
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
leaveq 
retq   

0000000000036be0 <start_pass_1_quant>:
push   %rbp
mov    %rsp,%rbp
sub    $0x20,%rsp
mov    0x270(%rdi),%rax
mov    0x20(%rax),%rcx
mov    %rcx,0xa0(%rdi)
movslq 0x28(%rax),%rcx
mov    %ecx,0x9c(%rdi)
mov    0x70(%rdi),%ecx
test   %ecx,%ecx
je     36c29 <start_pass_1_quant+0x49>
cmp    $0x1,%ecx
je     36c42 <start_pass_1_quant+0x62>
cmp    $0x2,%ecx
je     36c5b <start_pass_1_quant+0x7b>
mov    (%rdi),%rax
movl   $0x30,0x28(%rax)
mov    (%rdi),%rax
mov    (%rax),%rax
callq  *%rax
leaveq 
retq   
movslq 0x90(%rdi),%rcx
cmp    $0x3,%ecx
je     36c90 <start_pass_1_quant+0xb0>
lea    -0x6cc(%rip),%rcx        # 36570 <color_quantize>
mov    %rcx,0x8(%rax)
leaveq 
retq   
movslq 0x90(%rdi),%rcx
cmp    $0x3,%ecx
je     36c9d <start_pass_1_quant+0xbd>
lea    -0x595(%rip),%rcx        # 366c0 <quantize_ord_dither>
mov    %rcx,0x8(%rax)
jmp    36ca8 <start_pass_1_quant+0xc8>
lea    -0x362(%rip),%rcx        # 36900 <quantize_fs_dither>
mov    %rcx,0x8(%rax)
movl   $0x0,0x90(%rax)
mov    0x70(%rax),%rcx
test   %rcx,%rcx
je     36ce3 <start_pass_1_quant+0x103>
mov    %r14,%rcx
mov    %r15,%rdx
mov    %r12,%rsi
mov    %rdi,%r12
mov    %r13,%rdi
mov    %rax,%r13
jmpq   36d10 <start_pass_1_quant+0x130>
lea    -0x677(%rip),%rcx        # 36620 <color_quantize3>
mov    %rcx,0x8(%rax)
leaveq 
retq   
lea    -0x4c4(%rip),%rcx        # 367e0 <quantize3_ord_dither>
mov    %rcx,0x8(%rax)
movl   $0x0,0x4c(%rax)
movslq 0x38(%rax),%rcx
test   %ecx,%ecx
jne    36cd8 <start_pass_1_quant+0xf8>
mov    %rdi,%rcx
mov    %r15,-0x20(%rbp)
mov    %rdi,-0x10(%rbp)
mov    %rcx,%rdi
mov    %rax,%r15
callq  36260 <create_colorindex>
mov    %r15,%rax
mov    -0x10(%rbp),%rdi
mov    -0x20(%rbp),%r15
mov    0x50(%rax),%rax
test   %rax,%rax
je     36d36 <start_pass_1_quant+0x156>
leaveq 
retq   
mov    %rdi,%rcx
mov    %r14,-0x18(%rbp)
mov    %r15,-0x20(%rbp)
mov    %r12,%r14
mov    %rdi,%r12
mov    %rcx,%rdi
mov    %r13,%r15
mov    %rax,%r13
callq  36b60 <alloc_fs_workspace>
mov    %r14,%rsi
mov    %r15,%rdi
mov    -0x20(%rbp),%rdx
mov    -0x18(%rbp),%rcx
mov    0x88(%r12),%eax
add    $0x2,%eax
mov    %eax,%eax
lea    (%rax,%rax,1),%r14
xor    %r15d,%r15d
mov    %rcx,-0x18(%rbp)
mov    %rdx,-0x20(%rbp)
mov    %rsi,-0x8(%rbp)
mov    %rdi,-0x10(%rbp)
jmp    36d51 <start_pass_1_quant+0x171>
callq  364d0 <create_odither_tables>
leaveq 
retq   
movslq %r15d,%rax
mov    0x70(%r13,%rax,8),%rdi
mov    %r14,%rsi
callq  44d0 <jzero_far@plt>
add    $0x1,%r15d
movslq 0x90(%r12),%rax
cmp    %r15d,%eax
jg     36d3d <start_pass_1_quant+0x15d>
mov    -0x10(%rbp),%r13
mov    -0x8(%rbp),%r12
mov    -0x20(%rbp),%r15
mov    -0x18(%rbp),%r14
leaveq 
retq   

0000000000036d70 <finish_pass_1_quant>:
push   %rbp
mov    %rsp,%rbp
leaveq 
retq   
nopw   %cs:0x0(%rax,%rax,1)

0000000000036d80 <new_color_map_1_quant>:
push   %rbp
mov    %rsp,%rbp
mov    (%rdi),%rax
movl   $0x2e,0x28(%rax)
mov    (%rdi),%rax
mov    (%rax),%rax
callq  *%rax
leaveq 
retq   
nopl   0x0(%rax,%rax,1)

0000000000036da0 <jinit_2pass_quantizer>:
push   %rbp
mov    %rsp,%rbp
sub    $0x30,%rsp
mov    %r14,-0x20(%rbp)
mov    %r15,-0x28(%rbp)
mov    %r13,-0x18(%rbp)
mov    %rbx,-0x8(%rbp)
mov    %r12,-0x10(%rbp)
mov    $0x1,%r12d
mov    0x8(%rdi),%rax
mov    (%rax),%rax
mov    $0x58,%edx
mov    %rdi,%rbx
mov    %r12,%rsi
callq  *%rax
mov    %rax,0x270(%rbx)
lea    0x1aac(%rip),%rcx        # 38890 <start_pass_2_quant>
mov    %rcx,(%rax)
lea    0x1cf2(%rip),%rcx        # 38ae0 <new_color_map_2_quant>
mov    %rcx,0x18(%rax)
movq   $0x0,0x40(%rax)
movq   $0x0,0x50(%rax)
movslq 0x90(%rbx),%rcx
cmp    $0x3,%ecx
jne    36e13 <jinit_2pass_quantizer+0x73>
mov    %rax,%r13
jmp    36e2b <jinit_2pass_quantizer+0x8b>
mov    (%rbx),%rcx
movl   $0x2f,0x28(%rcx)
mov    (%rbx),%rcx
mov    (%rcx),%rcx
mov    %rax,%r13
mov    %rbx,%rdi
callq  *%rcx
mov    0x8(%rbx),%rax
mov    (%rax),%rax
mov    $0x100,%edx
mov    %rbx,%rdi
mov    %r12,%rsi
callq  *%rax
mov    %rax,0x30(%r13)
mov    $0x1000,%edx
xor    %r14d,%r14d
jmp    36e71 <jinit_2pass_quantizer+0xd1>
mov    0x8(%rbx),%rax
mov    0x8(%rax),%rax
mov    0x30(%r13),%r15
mov    %rbx,%rdi
mov    %r12,%rsi
callq  *%rax
movslq %r14d,%rcx
mov    %rax,(%r15,%rcx,8)
add    $0x1,%r14d
mov    $0x1000,%edx
cmp    $0x1f,%r14d
jle    36e4d <jinit_2pass_quantizer+0xad>
movl   $0x1,0x38(%r13)
movslq 0x84(%rbx),%rax
test   %eax,%eax
jne    36e94 <jinit_2pass_quantizer+0xf4>
movq   $0x0,0x20(%r13)
jmp    36f05 <jinit_2pass_quantizer+0x165>
movslq 0x78(%rbx),%r14
cmp    $0x7,%r14d
jg     36ebd <jinit_2pass_quantizer+0x11d>
mov    (%rbx),%rax
movl   $0x38,0x28(%rax)
mov    (%rbx),%rax
movl   $0x8,0x2c(%rax)
mov    (%rbx),%rax
mov    (%rax),%rax
mov    %rbx,%rdi
callq  *%rax
cmp    $0x100,%r14d
jle    36ee5 <jinit_2pass_quantizer+0x145>
mov    (%rbx),%rax
movl   $0x39,0x28(%rax)
mov    (%rbx),%rax
movl   $0x100,0x2c(%rax)
mov    (%rbx),%rax
mov    (%rax),%rax
mov    %rbx,%rdi
callq  *%rax
mov    0x8(%rbx),%rax
mov    0x10(%rax),%rax
mov    $0x3,%ecx
mov    %rbx,%rdi
mov    %r12,%rsi
mov    %r14,%rdx
callq  *%rax
mov    %rax,0x20(%r13)
mov    %r14d,0x28(%r13)
mov    0x70(%rbx),%eax
test   %eax,%eax
je     36f13 <jinit_2pass_quantizer+0x173>
movl   $0x2,0x70(%rbx)
mov    0x70(%rbx),%eax
cmp    $0x2,%eax
je     36f31 <jinit_2pass_quantizer+0x191>
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
mov    -0x18(%rbp),%r13
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
leaveq 
retq   
mov    0x8(%rbx),%rax
mov    0x8(%rax),%rax
mov    0x88(%rbx),%ecx
add    $0x2,%ecx
mov    %ecx,%ecx
lea    (%rcx,%rcx,2),%rcx
lea    (%rcx,%rcx,1),%rdx
mov    %r12,%rsi
mov    %rbx,%rdi
callq  *%rax
mov    %rax,0x40(%r13)
mov    %rbx,%rdi
callq  38780 <init_error_limit>
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
mov    -0x18(%rbp),%r13
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
leaveq 
retq   
nopw   %cs:0x0(%rax,%rax,1)

0000000000036f80 <prescan_quantize>:
push   %rbp
mov    %rsp,%rbp
sub    $0x10,%rsp
mov    %r15,-0x8(%rbp)
mov    0x270(%rdi),%rax
mov    0x30(%rax),%r15
mov    0x88(%rdi),%r10d
xor    %r9d,%r9d
jmp    36ff1 <prescan_quantize+0x71>
movzbl 0x1(%rdx),%eax
shr    $0x2,%eax
movslq %eax,%rax
shl    $0x6,%rax
movzbl (%rdx),%edi
shr    $0x3,%edi
movslq %edi,%rdi
add    (%r15,%rdi,8),%rax
movzbl 0x2(%rdx),%edi
shr    $0x3,%edi
movslq %edi,%rdi
lea    (%rax,%rdi,2),%rdi
movzwl (%rdi),%r11d
lea    0x1(%r11),%eax
mov    %ax,(%rdi)
test   %ax,%ax
jne    36fe0 <prescan_quantize+0x60>
mov    %r11w,(%rdi)
add    $0x3,%rdx
add    $0xffffffff,%r8d
test   %r8d,%r8d
jne    36fa3 <prescan_quantize+0x23>
add    $0x1,%r9d
cmp    %ecx,%r9d
jl     36ffc <prescan_quantize+0x7c>
mov    -0x8(%rbp),%r15
leaveq 
retq   
movslq %r9d,%rax
mov    (%rsi,%rax,8),%rdx
mov    %r10,%r8
jmp    36fe8 <prescan_quantize+0x68>
nopl   0x0(%rax,%rax,1)

0000000000037010 <find_biggest_color_pop>:
push   %rbp
mov    %rsp,%rbp
xor    %ecx,%ecx
mov    %rcx,%rax
mov    %rax,%rdx
jmp    3703d <find_biggest_color_pop+0x2d>
mov    0x20(%rdi),%r8
cmp    %r8,%rcx
jge    37036 <find_biggest_color_pop+0x26>
mov    0x18(%rdi),%r9
test   %r9,%r9
jle    37036 <find_biggest_color_pop+0x26>
mov    %r8,%rcx
mov    %rdi,%rax
add    $0x1,%edx
add    $0x28,%rdi
cmp    %esi,%edx
jl     3701e <find_biggest_color_pop+0xe>
leaveq 
retq   
data16 nopw %cs:0x0(%rax,%rax,1)
xchg   %ax,%ax

0000000000037050 <find_biggest_volume>:
push   %rbp
mov    %rsp,%rbp
xor    %ecx,%ecx
mov    %rcx,%rax
mov    %rax,%rdx
jmp    37074 <find_biggest_volume+0x24>
mov    0x18(%rdi),%r8
cmp    %rcx,%r8
jle    3706d <find_biggest_volume+0x1d>
mov    %r8,%rcx
mov    %rdi,%rax
add    $0x1,%edx
add    $0x28,%rdi
cmp    %esi,%edx
jl     3705e <find_biggest_volume+0xe>
leaveq 
retq   
nopw   0x0(%rax,%rax,1)

0000000000037080 <update_box>:
push   %rbp
mov    %rsp,%rbp
sub    $0x50,%rsp
mov    %r15,-0x30(%rbp)
mov    %r14,-0x28(%rbp)
mov    %r13,-0x20(%rbp)
mov    %r12,-0x18(%rbp)
mov    %rsi,-0x8(%rbp)
mov    %rbx,-0x10(%rbp)
mov    %rdi,-0x38(%rbp)
mov    0x270(%rdi),%rax
mov    0x30(%rax),%r15
movslq 0x8(%rsi),%r11
movslq 0xc(%rsi),%r12
movslq 0x10(%rsi),%r9
movslq 0x14(%rsi),%r8
movslq 0x4(%rsi),%r10
movslq (%rsi),%rbx
cmp    %ebx,%r10d
jle    3710f <update_box+0x8f>
lea    (%r9,%r9,1),%rdi
mov    %rbx,-0x48(%rbp)
jmp    370fe <update_box+0x7e>
movzwl (%rax),%r13d
test   %r13w,%r13w
jne    371c3 <update_box+0x143>
add    $0x2,%rax
add    $0x1,%ecx
cmp    %r8d,%ecx
jle    370d5 <update_box+0x55>
add    $0x1,%edx
cmp    %r12d,%edx
jle    371ce <update_box+0x14e>
add    $0x1,%ebx
cmp    %ebx,%r10d
jge    371e7 <update_box+0x167>
mov    -0x48(%rbp),%rbx
mov    -0x38(%rbp),%rdi
cmp    %ebx,%r10d
jg     371f2 <update_box+0x172>
cmp    %r12d,%r11d
jl     371ff <update_box+0x17f>
cmp    %r11d,%r12d
jg     37208 <update_box+0x188>
movslq %r11d,%r13
cmp    %r8d,%r9d
jl     37211 <update_box+0x191>
cmp    %r8d,%r9d
jl     37225 <update_box+0x1a5>
mov    0x40(%rdi),%edx
lea    0x24407(%rip),%rax        # 5b550 <rgb_green>
movslq (%rax,%rdx,4),%rcx
mov    %r12,%rax
sub    %r11d,%eax
lea    0x2447e(%rip),%r13        # 5b5d8 <c_scales>
imul   0x0(%r13,%rcx,4),%eax
shl    $0x2,%eax
movslq %eax,%rcx
imul   %rcx,%rcx
lea    0x2439b(%rip),%rax        # 5b50c <rgb_red>
movslq (%rax,%rdx,4),%rdi
mov    %r10,%rax
sub    %ebx,%eax
imul   0x0(%r13,%rdi,4),%eax
shl    $0x3,%eax
movslq %eax,%rax
imul   %rax,%rax
add    %rax,%rcx
lea    0x24400(%rip),%rax        # 5b594 <rgb_blue>
movslq (%rax,%rdx,4),%rdx
mov    %r8,%rax
sub    %r9d,%eax
imul   0x0(%r13,%rdx,4),%eax
shl    $0x3,%eax
movslq %eax,%rax
imul   %rax,%rax
add    %rcx,%rax
mov    %rax,0x18(%rsi)
xor    %eax,%eax
movslq %r9d,%rcx
lea    (%rcx,%rcx,1),%r13
jmpq   37259 <update_box+0x1d9>
mov    %ebx,(%rsi)
mov    -0x38(%rbp),%rdi
jmpq   3710f <update_box+0x8f>
mov    %rdi,%rcx
add    (%r15,%r14,8),%rcx
movslq %edx,%rax
shl    $0x6,%rax
add    %rcx,%rax
mov    %r9,%rcx
jmpq   370ea <update_box+0x6a>
movslq %ebx,%r14
mov    %r11,%rdx
jmpq   370f2 <update_box+0x72>
lea    (%r9,%r9,1),%rdi
mov    %r10,-0x48(%rbp)
jmpq   372aa <update_box+0x22a>
mov    %r11,-0x48(%rbp)
jmpq   372ea <update_box+0x26a>
mov    %r12,-0x48(%rbp)
jmpq   3732a <update_box+0x2aa>
mov    %r13,%r14
shl    $0x6,%r14
mov    %r13,-0x40(%rbp)
mov    %r9,-0x48(%rbp)
jmpq   3736a <update_box+0x2ea>
shl    $0x6,%r13
mov    %r8,-0x48(%rbp)
jmpq   373ae <update_box+0x32e>
movzwl (%rcx),%edi
test   %di,%di
je     3723e <update_box+0x1be>
add    $0x1,%rax
add    $0x2,%rcx
add    $0x1,%edx
cmp    %r8d,%edx
jle    37232 <update_box+0x1b2>
add    $0x1,%esi
cmp    %esi,%r12d
jge    373c4 <update_box+0x344>
add    $0x1,%ebx
cmp    %ebx,%r10d
jge    373dd <update_box+0x35d>
mov    -0x8(%rbp),%rcx
mov    %rax,0x20(%rcx)
mov    -0x10(%rbp),%rbx
mov    -0x18(%rbp),%r12
mov    -0x20(%rbp),%r13
mov    -0x28(%rbp),%r14
mov    -0x30(%rbp),%r15
leaveq 
retq   
movzwl (%rax),%r13d
test   %r13w,%r13w
jne    373e8 <update_box+0x368>
add    $0x2,%rax
add    $0x1,%ecx
cmp    %ecx,%r8d
jge    37280 <update_box+0x200>
add    $0x1,%edx
cmp    %edx,%r12d
jge    373f5 <update_box+0x375>
add    $0xffffffff,%r10d
cmp    %r10d,%ebx
jle    3740e <update_box+0x38e>
mov    -0x48(%rbp),%r10
mov    -0x38(%rbp),%rdi
jmpq   37118 <update_box+0x98>
movzwl (%rax),%r13d
test   %r13w,%r13w
jne    37419 <update_box+0x399>
add    $0x2,%rax
add    $0x1,%ecx
cmp    %ecx,%r8d
jge    372c0 <update_box+0x240>
add    $0x1,%edx
cmp    %edx,%r10d
jge    37426 <update_box+0x3a6>
add    $0x1,%r11d
cmp    %r11d,%r12d
jge    3743c <update_box+0x3bc>
mov    -0x48(%rbp),%r11
mov    -0x38(%rbp),%rdi
jmpq   37121 <update_box+0xa1>
movzwl (%rax),%r13d
test   %r13w,%r13w
jne    3744b <update_box+0x3cb>
add    $0x2,%rax
add    $0x1,%ecx
cmp    %ecx,%r8d
jge    37300 <update_box+0x280>
add    $0x1,%edx
cmp    %edx,%r10d
jge    37458 <update_box+0x3d8>
add    $0xffffffff,%r12d
cmp    %r12d,%r11d
jle    3746e <update_box+0x3ee>
mov    -0x48(%rbp),%r12
mov    -0x38(%rbp),%rdi
jmpq   3712a <update_box+0xaa>
movzwl (%rax),%r13d
test   %r13w,%r13w
jne    3747d <update_box+0x3fd>
add    $0x40,%rax
add    $0x1,%ecx
cmp    %ecx,%r12d
jge    37340 <update_box+0x2c0>
add    $0x1,%edx
cmp    %edx,%r10d
jge    3748e <update_box+0x40e>
add    $0x1,%r9d
cmp    %r9d,%r8d
jge    374a4 <update_box+0x424>
mov    -0x48(%rbp),%r9
mov    -0x40(%rbp),%r13
mov    -0x38(%rbp),%rdi
jmpq   37136 <update_box+0xb6>
movzwl (%rax),%r14d
test   %r14w,%r14w
jne    374af <update_box+0x42f>
add    $0x40,%rax
add    $0x1,%ecx
cmp    %ecx,%r12d
jge    37384 <update_box+0x304>
add    $0x1,%edx
cmp    %edx,%r10d
jge    374bc <update_box+0x43c>
add    $0xffffffff,%r8d
cmp    %r8d,%r9d
jle    374d1 <update_box+0x451>
mov    -0x48(%rbp),%r8
mov    -0x38(%rbp),%rdi
jmpq   3713f <update_box+0xbf>
mov    %r13,%rdx
add    (%r15,%r14,8),%rdx
movslq %esi,%rcx
shl    $0x6,%rcx
add    %rdx,%rcx
mov    %r9,%rdx
jmpq   37245 <update_box+0x1c5>
movslq %ebx,%r14
mov    %r11,%rsi
jmpq   3724d <update_box+0x1cd>
mov    %r10d,0x4(%rsi)
mov    -0x38(%rbp),%rdi
jmpq   37118 <update_box+0x98>
mov    %rdi,%rcx
add    (%r15,%r14,8),%rcx
movslq %edx,%rax
shl    $0x6,%rax
add    %rcx,%rax
mov    %r9,%rcx
jmpq   37295 <update_box+0x215>
movslq %r10d,%r14
mov    %r11,%rdx
jmpq   3729d <update_box+0x21d>
mov    %r11d,0x8(%rsi)
mov    -0x38(%rbp),%rdi
jmpq   37121 <update_box+0xa1>
movslq %edx,%rax
mov    (%r15,%rax,8),%rax
add    %rdi,%rax
lea    (%rax,%r9,2),%rax
mov    %r9,%rcx
jmpq   372d5 <update_box+0x255>
movslq %r11d,%rdi
shl    $0x6,%rdi
mov    %rbx,%rdx
jmpq   372dd <update_box+0x25d>
mov    %r12d,0xc(%rsi)
mov    -0x38(%rbp),%rdi
jmpq   3712a <update_box+0xaa>
movslq %edx,%rax
mov    (%r15,%rax,8),%rax
add    %rdi,%rax
lea    (%rax,%r9,2),%rax
mov    %r9,%rcx
jmpq   37315 <update_box+0x295>
movslq %r12d,%rdi
shl    $0x6,%rdi
mov    %rbx,%rdx
jmpq   3731d <update_box+0x29d>
mov    %r9d,0x10(%rsi)
mov    -0x40(%rbp),%r13
mov    -0x38(%rbp),%rdi
jmpq   37136 <update_box+0xb6>
movslq %edx,%rax
mov    (%r15,%rax,8),%rax
add    %r14,%rax
lea    (%rax,%rdi,2),%rax
mov    %r11,%rcx
jmpq   37355 <update_box+0x2d5>
movslq %r9d,%rdi
mov    %rbx,%rdx
jmpq   3735d <update_box+0x2dd>
mov    %r8d,0x14(%rsi)
mov    -0x38(%rbp),%rdi
jmpq   3713f <update_box+0xbf>
movslq %edx,%rax
mov    (%r15,%rax,8),%rax
add    %rdi,%rax
add    %r13,%rax
mov    %r11,%rcx
jmpq   37399 <update_box+0x319>
movslq %r8d,%rax
lea    (%rax,%rax,1),%rdi
mov    %rbx,%rdx
jmpq   373a1 <update_box+0x321>

00000000000374e0 <median_cut>:
push   %rbp
mov    %rsp,%rbp
sub    $0x70,%rsp
mov    %r15,-0x28(%rbp)
mov    %r14,-0x20(%rbp)
mov    %rsi,-0x58(%rbp)
mov    %rcx,-0x60(%rbp)
mov    %rbx,-0x8(%rbp)
mov    %r12,-0x10(%rbp)
mov    %r13,-0x18(%rbp)
lea    0x24089(%rip),%r14        # 5b594 <rgb_blue>
mov    $0x2,%eax
mov    %rax,-0x48(%rbp)
xor    %eax,%eax
mov    %rax,-0x40(%rbp)
mov    $0x1,%eax
mov    %rax,-0x38(%rbp)
mov    %rdi,%rbx
mov    %rdx,%r12
mov    %rsi,%r13
jmp    37577 <median_cut+0x97>
lea    (%r15,%r14,1),%edx
mov    %rdx,%rcx
shr    $0x1f,%ecx
add    %edx,%ecx
sar    %ecx
mov    %ecx,0x4(%rax)
add    $0x1,%ecx
mov    -0x30(%rbp),%r12
mov    %ecx,(%r12)
mov    %rax,%rsi
mov    %rbx,%rdi
callq  37080 <update_box>
mov    %r12,%rsi
mov    %rbx,%rdi
callq  37080 <update_box>
mov    -0x68(%rbp),%rax
lea    0x1(%rax),%r12d
mov    -0x60(%rbp),%rcx
mov    -0x58(%rbp),%r13
lea    0x2401d(%rip),%r14        # 5b594 <rgb_blue>
cmp    %ecx,%r12d
jl     37595 <median_cut+0xb5>
mov    %r12,%rax
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
mov    -0x20(%rbp),%r14
mov    -0x28(%rbp),%r15
leaveq 
retq   
lea    (%r12,%r12,1),%eax
cmp    %eax,%ecx
jge    375aa <median_cut+0xca>
mov    %r13,%rdi
mov    %r12,%rsi
callq  37050 <find_biggest_volume>
jmp    375b5 <median_cut+0xd5>
mov    %r13,%rdi
mov    %r12,%rsi
callq  37010 <find_biggest_color_pop>
test   %rax,%rax
je     3767e <median_cut+0x19e>
movslq %r12d,%rcx
lea    (%rcx,%rcx,4),%rcx
lea    0x0(%r13,%rcx,8),%rdx
mov    %rdx,-0x30(%rbp)
movslq 0x4(%rax),%rcx
mov    %ecx,0x4(%rdx)
movslq 0xc(%rax),%rcx
mov    %ecx,0xc(%rdx)
movslq 0x14(%rax),%rcx
mov    %ecx,0x14(%rdx)
movslq (%rax),%rcx
mov    %ecx,(%rdx)
movslq 0x8(%rax),%rcx
mov    %ecx,0x8(%rdx)
movslq 0x10(%rax),%rcx
mov    %ecx,0x10(%rdx)
mov    0x40(%rbx),%r9d
movslq (%r14,%r9,4),%rcx
movslq 0x10(%rax),%r8
movslq 0x14(%rax),%rdi
mov    %rdi,%rdx
sub    %r8d,%edx
lea    0x23fc5(%rip),%rsi        # 5b5d8 <c_scales>
imul   (%rsi,%rcx,4),%edx
shl    $0x3,%edx
lea    0x23eeb(%rip),%rcx        # 5b50c <rgb_red>
movslq (%rcx,%r9,4),%r13
movslq (%rax),%r15
movslq 0x4(%rax),%r14
mov    %r14,%rsi
sub    %r15d,%esi
lea    0x23f9f(%rip),%rcx        # 5b5d8 <c_scales>
imul   (%rcx,%r13,4),%esi
shl    $0x3,%esi
lea    0x23f08(%rip),%rcx        # 5b550 <rgb_green>
movslq (%rcx,%r9,4),%r11
movslq 0x8(%rax),%r10
movslq 0xc(%rax),%r9
mov    %r12,-0x68(%rbp)
mov    %r9,%rcx
sub    %r10d,%ecx
lea    0x23f73(%rip),%r12        # 5b5d8 <c_scales>
imul   (%r12,%r11,4),%ecx
shl    $0x2,%ecx
test   %r13d,%r13d
je     37697 <median_cut+0x1b7>
cmp    %edx,%ecx
jl     376a3 <median_cut+0x1c3>
pushq  -0x38(%rbp)
popq   -0x50(%rbp)
jmp    376ac <median_cut+0x1cc>
mov    %r12,%rax
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
mov    -0x20(%rbp),%r14
mov    -0x28(%rbp),%r15
leaveq 
retq   
cmp    %esi,%ecx
jl     376b8 <median_cut+0x1d8>
pushq  -0x38(%rbp)
popq   -0x50(%rbp)
jmp    376c1 <median_cut+0x1e1>
mov    %rdx,%rcx
pushq  -0x48(%rbp)
popq   -0x50(%rbp)
cmp    %esi,%ecx
jge    376cb <median_cut+0x1eb>
pushq  -0x40(%rbp)
popq   -0x50(%rbp)
jmp    376cb <median_cut+0x1eb>
mov    %rsi,%rcx
pushq  -0x40(%rbp)
popq   -0x50(%rbp)
cmp    %edx,%ecx
jge    376cb <median_cut+0x1eb>
pushq  -0x48(%rbp)
popq   -0x50(%rbp)
mov    -0x50(%rbp),%rcx
test   %ecx,%ecx
je     3752e <median_cut+0x4e>
cmp    $0x1,%ecx
je     376ea <median_cut+0x20a>
cmp    $0x2,%ecx
je     3770c <median_cut+0x22c>
mov    -0x30(%rbp),%r12
jmpq   3754a <median_cut+0x6a>
lea    (%r10,%r9,1),%edx
mov    %rdx,%rcx
shr    $0x1f,%ecx
add    %edx,%ecx
sar    %ecx
mov    %ecx,0xc(%rax)
add    $0x1,%ecx
mov    -0x30(%rbp),%r12
mov    %ecx,0x8(%r12)
jmpq   3754a <median_cut+0x6a>
lea    (%r8,%rdi,1),%edx
mov    %rdx,%rcx
shr    $0x1f,%ecx
add    %edx,%ecx
sar    %ecx
mov    %ecx,0x14(%rax)
add    $0x1,%ecx
mov    -0x30(%rbp),%r12
mov    %ecx,0x10(%r12)
jmpq   3754a <median_cut+0x6a>
xchg   %ax,%ax

0000000000037730 <compute_color>:
push   %rbp
mov    %rsp,%rbp
sub    $0x70,%rsp
mov    %r15,-0x38(%rbp)
mov    %r14,-0x30(%rbp)
mov    %rdx,-0x8(%rbp)
mov    %rdi,-0x10(%rbp)
mov    %rbx,-0x18(%rbp)
mov    %r12,-0x20(%rbp)
mov    %r13,-0x28(%rbp)
movslq 0x4(%rsi),%r10
mov    %r10,-0x50(%rbp)
mov    0x270(%rdi),%rax
mov    0x30(%rax),%r14
movslq (%rsi),%r11
movslq 0x8(%rsi),%r8
mov    %r8,-0x58(%rbp)
movslq 0xc(%rsi),%r9
mov    %r9,-0x68(%rbp)
movslq 0x14(%rsi),%r12
xor    %eax,%eax
movslq 0x10(%rsi),%rdx
mov    %rdx,-0x70(%rbp)
lea    (%rdx,%rdx,1),%rbx
mov    %rbx,-0x40(%rbp)
mov    %rax,%rcx
mov    %rcx,%rsi
mov    %rsi,%rdi
jmp    37804 <compute_color+0xd4>
movzwl (%rbx),%r8d
test   %r8w,%r8w
je     377cb <compute_color+0x9b>
add    %r8,%rcx
lea    0x4(,%rdx,8),%r9d
movslq %r9d,%r9
imul   %r8,%r9
add    %r9,%rsi
mov    %r8,%r9
imul   %r11,%r9
add    %r9,%rdi
imul   %r10,%r8
add    %r8,%rax
add    $0x2,%rbx
add    $0x1,%edx
cmp    %r12d,%edx
jle    3779b <compute_color+0x6b>
mov    -0x60(%rbp),%rdx
lea    0x1(%rdx),%r8d
mov    -0x70(%rbp),%rdx
mov    -0x68(%rbp),%r9
mov    -0x40(%rbp),%rbx
cmp    %r9d,%r8d
jle    37878 <compute_color+0x148>
mov    -0x48(%rbp),%r8
lea    0x1(%r8),%r11d
mov    -0x58(%rbp),%r8
mov    -0x50(%rbp),%r10
cmp    %r10d,%r11d
jle    3789a <compute_color+0x16a>
mov    %rcx,%r8
sar    %r8
add    %r8,%rax
cqto   
mov    -0x8(%rbp),%rbx
movslq %ebx,%rbx
mov    -0x10(%rbp),%r9
mov    0xa0(%r9),%r10
mov    (%r10),%r10
idiv   %rcx
mov    %al,(%rbx,%r10,1)
lea    (%r8,%rdi,1),%rax
cqto   
mov    0xa0(%r9),%rdi
mov    0x8(%rdi),%rdi
idiv   %rcx
mov    %al,(%rbx,%rdi,1)
lea    (%r8,%rsi,1),%rax
cqto   
mov    0xa0(%r9),%rsi
mov    0x10(%rsi),%rsi
idiv   %rcx
mov    %al,(%rbx,%rsi,1)
mov    -0x28(%rbp),%r13
mov    -0x20(%rbp),%r12
mov    -0x18(%rbp),%rbx
mov    -0x30(%rbp),%r14
mov    -0x38(%rbp),%r15
leaveq 
retq   
lea    0x2(,%r8,4),%r9d
movslq %r9d,%r11
add    (%r14,%r13,8),%rbx
movslq %r8d,%r9
shl    $0x6,%r9
add    %r9,%rbx
mov    %r8,-0x60(%rbp)
jmpq   377d2 <compute_color+0xa2>
movslq %r11d,%r13
lea    0x4(,%r11,8),%r10d
movslq %r10d,%r10
mov    %r11,-0x48(%rbp)
jmpq   377eb <compute_color+0xbb>
data16 nopw %cs:0x0(%rax,%rax,1)
nopl   0x0(%rax)

00000000000378c0 <select_colors>:
push   %rbp
mov    %rsp,%rbp
sub    $0x30,%rsp
mov    %r13,-0x18(%rbp)
mov    %r14,-0x20(%rbp)
mov    %r15,-0x28(%rbp)
mov    %r12,-0x10(%rbp)
mov    %rbx,-0x8(%rbp)
mov    0x8(%rdi),%rax
mov    (%rax),%rax
mov    $0x1,%r12d
movslq %esi,%rcx
lea    (%rcx,%rcx,4),%rdx
shl    $0x3,%rdx
mov    %rsi,%r14
mov    %rdi,%rbx
mov    %r12,%rsi
callq  *%rax
mov    %rax,%r13
movl   $0x0,0x0(%r13)
movl   $0x1f,0x4(%r13)
movl   $0x0,0x8(%r13)
movl   $0x3f,0xc(%r13)
movl   $0x0,0x10(%r13)
movl   $0x1f,0x14(%r13)
mov    %rbx,%rdi
mov    %r13,%rsi
callq  37080 <update_box>
mov    %r14,%rcx
mov    %rbx,%rdi
mov    %r13,%rsi
mov    %r12,%rdx
callq  374e0 <median_cut>
mov    %rax,%r15
xor    %r14d,%r14d
jmp    37971 <select_colors+0xb1>
movslq %r14d,%rax
lea    (%rax,%rax,4),%rax
lea    0x0(%r13,%rax,8),%rsi
mov    %rbx,%rdi
mov    %r14,%rdx
callq  37730 <compute_color>
add    $0x1,%r14d
cmp    %r15d,%r14d
jl     37956 <select_colors+0x96>
mov    %r15d,0x9c(%rbx)
mov    (%rbx),%rax
movl   $0x60,0x28(%rax)
mov    (%rbx),%rax
mov    %r15d,0x2c(%rax)
mov    (%rbx),%rax
mov    0x8(%rax),%rax
mov    %r12,%rsi
mov    %rbx,%rdi
callq  *%rax
mov    -0x8(%rbp),%rbx
mov    -0x10(%rbp),%r12
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
leaveq 
retq   
data16 nopw %cs:0x0(%rax,%rax,1)
xchg   %ax,%ax

00000000000379c0 <find_nearby_colors>:
push   %rbp
mov    %rsp,%rbp
sub    $0x880,%rsp
mov    %r15,-0x28(%rbp)
mov    %r14,-0x20(%rbp)
mov    %r13,-0x18(%rbp)
mov    %r12,-0x10(%rbp)
mov    %rbx,-0x8(%rbp)
mov    %r8,-0x30(%rbp)
mov    %rdx,-0x40(%rbp)
mov    %rcx,-0x58(%rbp)
movslq 0x9c(%rdi),%r15
lea    0x18(%rcx,%rcx,1),%eax
sar    %eax
mov    %rax,-0x78(%rbp)
lea    0x18(%rsi,%rsi,1),%eax
sar    %eax
mov    %rax,-0x70(%rbp)
lea    0x1c(%rdx,%rdx,1),%r12d
sar    %r12d
mov    %r12,-0x48(%rbp)
xor    %r8d,%r8d
lea    0x23af0(%rip),%r11        # 5b50c <rgb_red>
lea    0x18(%rcx),%ebx
mov    %rbx,-0x60(%rbp)
lea    0x18(%rsi),%r9d
mov    %r9,-0x50(%rbp)
lea    0x1c(%rdx),%ebx
mov    %rbx,-0x68(%rbp)
mov    $0x7fffffff,%r10d
mov    %r10,-0x38(%rbp)
lea    0x23b95(%rip),%r10        # 5b5d8 <c_scales>
mov    %r8,%r13
jmp    37ab5 <find_nearby_colors+0xf5>
mov    0x40(%rdi),%ebx
lea    0x23b42(%rip),%r12        # 5b594 <rgb_blue>
movslq (%r12,%rbx,4),%rbx
movslq (%r10,%rbx,4),%r12
mov    %r8,%rbx
sub    %ecx,%ebx
imul   %r12d,%ebx
movslq %ebx,%rbx
imul   %rbx,%rbx
add    %rbx,%rax
mov    -0x60(%rbp),%rbx
sub    %ebx,%r8d
imul   %r12d,%r8d
movslq %r8d,%rbx
imul   %rbx,%rbx
lea    (%r11,%rbx,1),%r8
mov    -0x68(%rbp),%rbx
mov    %rax,-0x878(%rbp,%r14,8)
mov    -0x38(%rbp),%rax
cmp    %r8,%rax
jle    37a9b <find_nearby_colors+0xdb>
mov    %r8,%rax
mov    %rax,-0x38(%rbp)
add    $0x1,%r13d
mov    -0x48(%rbp),%r12
lea    0x23a5e(%rip),%r11        # 5b50c <rgb_red>
mov    -0x70(%rbp),%rax
xor    %r8d,%r8d
cmp    %r13d,%r15d
jg     37ac7 <find_nearby_colors+0x107>
mov    -0x38(%rbp),%rdx
mov    -0x30(%rbp),%rsi
mov    %r8,%rax
jmp    37b28 <find_nearby_colors+0x168>
movslq %r13d,%r14
mov    0xa0(%rdi),%r8
mov    (%r8),%r8
movzbl (%r8,%r14,1),%r8d
cmp    %esi,%r8d
jl     37b43 <find_nearby_colors+0x183>
cmp    %r9d,%r8d
jg     37bc0 <find_nearby_colors+0x200>
cmp    %eax,%r8d
jle    37bec <find_nearby_colors+0x22c>
mov    0x40(%rdi),%eax
movslq (%r11,%rax,4),%rax
sub    %esi,%r8d
imul   (%r10,%rax,4),%r8d
movslq %r8d,%r11
imul   %r11,%r11
xor    %eax,%eax
jmp    37b6c <find_nearby_colors+0x1ac>
movslq %r8d,%rcx
mov    -0x878(%rbp,%rcx,8),%rcx
cmp    %rdx,%rcx
jg     37b24 <find_nearby_colors+0x164>
movslq %eax,%rcx
mov    %r8b,(%rsi,%rcx,1)
add    $0x1,%eax
add    $0x1,%r8d
cmp    %r15d,%r8d
jl     37b0a <find_nearby_colors+0x14a>
mov    -0x8(%rbp),%rbx
mov    -0x10(%rbp),%r12
mov    -0x18(%rbp),%r13
mov    -0x20(%rbp),%r14
mov    -0x28(%rbp),%r15
leaveq 
retq   
mov    0x40(%rdi),%eax
movslq (%r11,%rax,4),%rax
movslq (%r10,%rax,4),%r11
mov    %r8,%rax
sub    %esi,%eax
imul   %r11d,%eax
movslq %eax,%rax
imul   %rax,%rax
sub    %r9d,%r8d
imul   %r11d,%r8d
movslq %r8d,%r11
imul   %r11,%r11
mov    0xa0(%rdi),%r8
mov    0x8(%r8),%r8
movzbl (%r8,%r14,1),%r8d
cmp    %edx,%r8d
jl     37c09 <find_nearby_colors+0x249>
cmp    %ebx,%r8d
jg     37ca5 <find_nearby_colors+0x2e5>
cmp    %r12d,%r8d
jle    37ce6 <find_nearby_colors+0x326>
mov    0x40(%rdi),%ebx
lea    0x239af(%rip),%r12        # 5b550 <rgb_green>
movslq (%r12,%rbx,4),%rbx
sub    %edx,%r8d
imul   (%r10,%rbx,4),%r8d
movslq %r8d,%rbx
imul   %rbx,%rbx
add    %rbx,%r11
mov    -0x68(%rbp),%rbx
jmpq   37c45 <find_nearby_colors+0x285>
mov    0x40(%rdi),%eax
movslq (%r11,%rax,4),%rax
movslq (%r10,%rax,4),%r11
mov    %r8,%rax
sub    %r9d,%eax
imul   %r11d,%eax
movslq %eax,%rax
imul   %rax,%rax
sub    %esi,%r8d
imul   %r11d,%r8d
movslq %r8d,%r11
imul   %r11,%r11
jmp    37b6c <find_nearby_colors+0x1ac>
mov    0x40(%rdi),%eax
movslq (%r11,%rax,4),%rax
sub    %r9d,%r8d
imul   (%r10,%rax,4),%r8d
movslq %r8d,%r11
imul   %r11,%r11
xor    %eax,%eax
jmpq   37b6c <find_nearby_colors+0x1ac>
mov    0x40(%rdi),%r9d
lea    0x2393c(%rip),%r12        # 5b550 <rgb_green>
movslq (%r12,%r9,4),%r9
movslq (%r10,%r9,4),%r12
mov    %r8,%r9
sub    %edx,%r9d
imul   %r12d,%r9d
movslq %r9d,%r9
imul   %r9,%r9
add    %r9,%rax
sub    %ebx,%r8d
imul   %r12d,%r8d
movslq %r8d,%r8
imul   %r8,%r8
add    %r8,%r11
mov    -0x50(%rbp),%r9
mov    0xa0(%rdi),%r8
mov    0x10(%r8),%r8
movzbl (%r8,%r14,1),%r8d
cmp    %ecx,%r8d
jl     37a48 <find_nearby_colors+0x88>
mov    -0x60(%rbp),%r12
cmp    %r12d,%r8d
jg     37d0f <find_nearby_colors+0x34f>
mov    -0x78(%rbp),%r10
cmp    %r10d,%r8d
jle    37d53 <find_nearby_colors+0x393>
mov    0x40(%rdi),%r10d
lea    0x23911(%rip),%r12        # 5b594 <rgb_blue>
movslq (%r12,%r10,4),%r12
sub    %ecx,%r8d
lea    0x23947(%rip),%r10        # 5b5d8 <c_scales>
imul   (%r10,%r12,4),%r8d
movslq %r8d,%r8
imul   %r8,%r8
add    %r11,%r8
jmpq   37a87 <find_nearby_colors+0xc7>
mov    0x40(%rdi),%r9d
lea    0x238a0(%rip),%r12        # 5b550 <rgb_green>
movslq (%r12,%r9,4),%r9
movslq (%r10,%r9,4),%r12
mov    %r8,%r9
sub    %ebx,%r9d
imul   %r12d,%r9d
movslq %r9d,%r9
imul   %r9,%r9
add    %r9,%rax
sub    %edx,%r8d
imul   %r12d,%r8d
movslq %r8d,%r8
imul   %r8,%r8
add    %r8,%r11
mov    -0x50(%rbp),%r9
jmpq   37c45 <find_nearby_colors+0x285>
mov    0x40(%rdi),%edx
lea    0x23860(%rip),%r12        # 5b550 <rgb_green>
movslq (%r12,%rdx,4),%rdx
sub    %ebx,%r8d
imul   (%r10,%rdx,4),%r8d
movslq %r8d,%rdx
imul   %rdx,%rdx
add    %rdx,%r11
mov    -0x40(%rbp),%rdx
jmpq   37c45 <find_nearby_colors+0x285>
mov    0x40(%rdi),%edx
lea    0x2387b(%rip),%rbx        # 5b594 <rgb_blue>
movslq (%rbx,%rdx,4),%rdx
movslq (%r10,%rdx,4),%rbx
mov    %r8,%rdx
sub    %r12d,%edx
imul   %ebx,%edx
movslq %edx,%rdx
imul   %rdx,%rdx
add    %rdx,%rax
sub    %ecx,%r8d
imul   %ebx,%r8d
movslq %r8d,%rdx
imul   %rdx,%rdx
lea    (%r11,%rdx,1),%r8
mov    -0x40(%rbp),%rdx
mov    -0x68(%rbp),%rbx
jmpq   37a87 <find_nearby_colors+0xc7>
mov    0x40(%rdi),%ecx
lea    0x23837(%rip),%r10        # 5b594 <rgb_blue>
movslq (%r10,%rcx,4),%rcx
sub    %r12d,%r8d
lea    0x2386d(%rip),%r10        # 5b5d8 <c_scales>
imul   (%r10,%rcx,4),%r8d
movslq %r8d,%rcx
imul   %rcx,%rcx
lea    (%r11,%rcx,1),%r8
mov    -0x58(%rbp),%rcx
jmpq   37a87 <find_nearby_colors+0xc7>
data16 nopw %cs:0x0(%rax,%rax,1)
nop

0000000000037d90 <find_best_colors>:
push   %rbp
mov    %rsp,%rbp
sub    $0x4a0,%rsp
mov    %r8,-0x98(%rbp)
mov    %r9,-0x80(%rbp)
mov    %rcx,-0x70(%rbp)
mov    %rdx,-0x60(%rbp)
mov    %rsi,-0x40(%rbp)
lea    -0x498(%rbp),%r11
mov    $0x7f,%eax
mov    %r11,%r10
jmp    37dd1 <find_best_colors+0x41>
movq   $0x7fffffff,(%r10)
add    $0x8,%r10
add    $0xffffffff,%eax
test   %eax,%eax
jns    37dc3 <find_best_colors+0x33>
mov    0x10(%rbp),%r10
mov    %r10,-0x78(%rbp)
lea    0x237b0(%rip),%rax        # 5b594 <rgb_blue>
mov    %r15,-0x28(%rbp)
lea    0x237e9(%rip),%r15        # 5b5d8 <c_scales>
mov    %r14,-0x20(%rbp)
lea    0x23756(%rip),%r14        # 5b550 <rgb_green>
mov    %r13,-0x18(%rbp)
lea    0x23707(%rip),%r13        # 5b50c <rgb_red>
mov    %r12,-0x10(%rbp)
xor    %r12d,%r12d
mov    %rbx,-0x8(%rbp)
mov    %r8,%rbx
mov    %r14,%r8
mov    %r12,%r14
jmpq   37f08 <find_best_colors+0x178>
mov    (%r11),%rax
cmp    %rdx,%rax
jle    37e2c <find_best_colors+0x9c>
mov    %rdx,(%r11)
mov    %r14b,(%r10)
add    $0x1,%r10
add    %rbx,%rdx
add    $0x8,%r11
add    $0xffffffff,%ecx
mov    0x40(%rdi),%eax
movslq (%r12,%rax,4),%rax
movslq (%r15,%rax,4),%rax
imul   %eax,%eax
shl    $0x7,%eax
movslq %eax,%rax
add    %rax,%rbx
test   %ecx,%ecx
jns    37e1e <find_best_colors+0x8e>
add    $0xffffffff,%esi
mov    -0x50(%rbp),%rcx
mov    -0x48(%rbp),%rax
lea    (%rax,%rcx,1),%rdx
mov    0x40(%rdi),%eax
movslq (%r8,%rax,4),%rax
movslq (%r15,%rax,4),%rax
imul   %eax,%eax
shl    $0x5,%eax
movslq %eax,%rax
add    %rcx,%rax
mov    -0x68(%rbp),%rbx
mov    $0x3,%ecx
test   %esi,%esi
jns    37f23 <find_best_colors+0x193>
mov    -0x88(%rbp),%rax
lea    -0x1(%rax),%r9d
mov    -0x38(%rbp),%rsi
mov    -0x30(%rbp),%rax
lea    (%rax,%rsi,1),%rdx
mov    0x40(%rdi),%eax
lea    0x2365f(%rip),%r13        # 5b50c <rgb_red>
movslq 0x0(%r13,%rax,4),%rax
movslq (%r15,%rax,4),%rax
imul   %eax,%eax
shl    $0x7,%eax
movslq %eax,%rax
lea    (%rsi,%rax,1),%r8
mov    -0x58(%rbp),%rax
mov    $0x7,%esi
test   %r9d,%r9d
jns    37f30 <find_best_colors+0x1a0>
mov    -0x90(%rbp),%rax
lea    0x1(%rax),%r14d
mov    %r12,%rax
mov    -0x78(%rbp),%r10
lea    -0x498(%rbp),%r11
mov    -0x40(%rbp),%rsi
mov    -0x60(%rbp),%rdx
lea    0x23657(%rip),%r8        # 5b550 <rgb_green>
mov    -0x70(%rbp),%rcx
mov    -0x80(%rbp),%r9
mov    -0x98(%rbp),%rbx
cmp    %ebx,%r14d
jl     37f4b <find_best_colors+0x1bb>
mov    -0x8(%rbp),%rbx
mov    -0x10(%rbp),%r12
mov    -0x18(%rbp),%r13
mov    -0x20(%rbp),%r14
mov    -0x28(%rbp),%r15
leaveq 
retq   
mov    %rdx,-0x48(%rbp)
mov    %rax,-0x50(%rbp)
jmpq   37e51 <find_best_colors+0xc1>
mov    %r9,-0x88(%rbp)
mov    %rdx,-0x30(%rbp)
mov    %r8,-0x38(%rbp)
lea    0x2360a(%rip),%r8        # 5b550 <rgb_green>
jmpq   37e84 <find_best_colors+0xf4>
mov    0x40(%rdi),%r12d
movslq (%rax,%r12,4),%rax
movslq (%r15,%rax,4),%rax
mov    %r14,-0x90(%rbp)
movslq %r14d,%rbx
movzbl (%r9,%rbx,1),%r14d
mov    0xa0(%rdi),%r9
mov    0x10(%r9),%rbx
movzbl (%r14,%rbx,1),%ebx
sub    %ebx,%ecx
imul   %eax,%ecx
movslq %ecx,%rcx
mov    %rax,%rbx
shl    $0x4,%ebx
movslq %ebx,%rbx
imul   %rcx,%rbx
imul   %eax,%eax
shl    $0x6,%eax
movslq %eax,%rax
add    %rax,%rbx
mov    %rbx,-0x68(%rbp)
movslq (%r8,%r12,4),%rax
movslq (%r15,%rax,4),%rax
mov    0x8(%r9),%r8
movzbl (%r14,%r8,1),%r8d
sub    %r8d,%edx
imul   %eax,%edx
movslq %edx,%r8
mov    %r8,%rdx
imul   %r8,%rdx
movslq 0x0(%r13,%r12,4),%r12
movslq (%r15,%r12,4),%r12
mov    (%r9),%r9
movzbl (%r14,%r9,1),%r9d
sub    %r9d,%esi
imul   %r12d,%esi
movslq %esi,%r9
mov    %r9,%rsi
imul   %r9,%rsi
add    %rsi,%rdx
imul   %rcx,%rcx
add    %rcx,%rdx
mov    %rax,%rcx
shl    $0x3,%ecx
movslq %ecx,%rcx
imul   %r8,%rcx
imul   %eax,%eax
shl    $0x4,%eax
movslq %eax,%rax
add    %rcx,%rax
mov    %rax,-0x58(%rbp)
mov    %r12,%rcx
shl    $0x4,%ecx
movslq %ecx,%rcx
imul   %r9,%rcx
imul   %r12d,%r12d
shl    $0x6,%r12d
movslq %r12d,%rsi
lea    (%rsi,%rcx,1),%r8
mov    $0x7,%esi
lea    0x234df(%rip),%r13        # 5b50c <rgb_red>
lea    0x23560(%rip),%r12        # 5b594 <rgb_blue>
mov    $0x3,%ecx
mov    %rcx,%r9
jmpq   37ecc <find_best_colors+0x13c>
data16 nopw %cs:0x0(%rax,%rax,1)
nopl   0x0(%rax)

0000000000038050 <fill_inverse_cmap>:
push   %rbp
mov    %rsp,%rbp
sub    $0x1c0,%rsp
mov    %r15,-0x40(%rbp)
mov    %r14,-0x38(%rbp)
mov    %r13,-0x30(%rbp)
mov    %r12,-0x28(%rbp)
mov    %rbx,-0x20(%rbp)
mov    %rdx,-0x18(%rbp)
mov    %rcx,-0x8(%rbp)
mov    0x270(%rdi),%rax
mov    0x30(%rax),%rax
mov    %rax,-0x10(%rbp)
mov    %rsi,%rax
and    $0x1ffffffc,%eax
lea    0x4(,%rax,8),%r14d
and    $0x3ffffff8,%edx
lea    0x2(,%rdx,4),%ebx
and    $0x1ffffffc,%ecx
lea    0x4(,%rcx,8),%r13d
mov    %rsi,%r12
lea    -0x1c0(%rbp),%r8
mov    %rdi,%r15
mov    %r14,%rsi
mov    %rbx,%rdx
mov    %r13,%rcx
callq  379c0 <find_nearby_colors>
mov    %r13,%rcx
mov    %rbx,%rdx
mov    %r14,%rsi
mov    %r15,%rdi
mov    %rax,%r8
sub    $0x10,%rsp
lea    -0xc0(%rbp),%rbx
mov    %rbx,(%rsp)
lea    -0x1c0(%rbp),%r9
callq  37d90 <find_best_colors>
and    $0xfffffffc,%r12d
mov    -0x18(%rbp),%r8
and    $0xfffffff8,%r8d
add    $0x10,%rsp
xor    %r10d,%r10d
mov    -0x8(%rbp),%rax
and    $0xfffffffc,%eax
movslq %eax,%rax
lea    (%rax,%rax,1),%r9
mov    -0x10(%rbp),%r14
mov    %r10,%rsi
jmp    3814e <fill_inverse_cmap+0xfe>
movzbl (%rbx),%r11d
add    $0x1,%r11d
mov    %r11w,(%rax)
add    $0x1,%rbx
add    $0x2,%rax
add    $0x1,%ecx
cmp    $0x3,%ecx
jle    38120 <fill_inverse_cmap+0xd0>
add    $0x1,%edx
add    $0x1,%edi
cmp    $0x7,%edx
jle    38169 <fill_inverse_cmap+0x119>
add    $0x1,%esi
add    $0x1,%r12d
cmp    $0x3,%esi
jle    3817f <fill_inverse_cmap+0x12f>
mov    -0x20(%rbp),%rbx
mov    -0x28(%rbp),%r12
mov    -0x30(%rbp),%r13
mov    -0x38(%rbp),%r14
mov    -0x40(%rbp),%r15
leaveq 
retq   
mov    %r9,%rcx
add    (%r14,%r13,8),%rcx
movslq %edi,%rax
shl    $0x6,%rax
add    %rcx,%rax
mov    %r10,%rcx
jmp    38137 <fill_inverse_cmap+0xe7>
movslq %r12d,%r13
mov    %r8,%rdi
mov    %r10,%rdx
jmp    38142 <fill_inverse_cmap+0xf2>
nopw   0x0(%rax,%rax,1)

0000000000038190 <pass2_no_dither>:
push   %rbp
mov    %rsp,%rbp
sub    $0x60,%rsp
mov    %rdi,-0x38(%rbp)
mov    %rbx,-0x8(%rbp)
mov    %r12,-0x10(%rbp)
mov    %r13,-0x18(%rbp)
mov    %r14,-0x20(%rbp)
mov    %r15,-0x28(%rbp)
mov    %rcx,-0x50(%rbp)
mov    %rsi,-0x40(%rbp)
mov    %rdx,-0x30(%rbp)
mov    0x270(%rdi),%rax
mov    0x30(%rax),%r12
mov    0x88(%rdi),%ebx
mov    %rbx,-0x58(%rbp)
xor    %eax,%eax
jmp    38246 <pass2_no_dither+0xb6>
movzbl 0x0(%r13),%esi
shr    $0x3,%esi
movslq %esi,%rcx
movzbl 0x1(%r13),%edx
shr    $0x2,%edx
movslq %edx,%rax
shl    $0x6,%rax
add    (%r12,%rcx,8),%rax
movzbl 0x2(%r13),%ecx
shr    $0x3,%ecx
movslq %ecx,%r8
lea    (%rax,%r8,2),%r15
movzwl (%r15),%eax
test   %ax,%ax
jne    38214 <pass2_no_dither+0x84>
callq  38050 <fill_inverse_cmap>
mov    -0x38(%rbp),%rdi
movzbl (%r15),%eax
add    $0xff,%eax
mov    %al,(%r14)
add    $0x3,%r13
add    $0x1,%r14
add    $0xffffffff,%ebx
test   %ebx,%ebx
jne    381d5 <pass2_no_dither+0x45>
mov    -0x48(%rbp),%rax
add    $0x1,%eax
mov    -0x58(%rbp),%rbx
mov    -0x30(%rbp),%rdx
mov    -0x40(%rbp),%rsi
mov    -0x50(%rbp),%rcx
cmp    %ecx,%eax
jl     38260 <pass2_no_dither+0xd0>
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
leaveq 
retq   
movslq %eax,%rcx
mov    (%rsi,%rcx,8),%r13
mov    (%rdx,%rcx,8),%r14
mov    %rax,-0x48(%rbp)
jmp    3822b <pass2_no_dither+0x9b>
data16 nopw %cs:0x0(%rax,%rax,1)
nopl   0x0(%rax)

0000000000038280 <pass2_fs_dither>:
push   %rbp
mov    %rsp,%rbp
sub    $0x150,%rsp
mov    %r15,-0x28(%rbp)
mov    %r14,-0x20(%rbp)
mov    %r13,-0x18(%rbp)
mov    %r12,-0x10(%rbp)
mov    %rbx,-0x8(%rbp)
mov    %rdi,-0x58(%rbp)
mov    %rcx,-0x138(%rbp)
mov    %rsi,-0x118(%rbp)
mov    %rdx,-0x120(%rbp)
mov    0x270(%rdi),%r13
mov    %r13,-0x110(%rbp)
mov    0x30(%r13),%rax
mov    %rax,-0x60(%rbp)
mov    0x1a8(%rdi),%rax
mov    %rax,-0x140(%rbp)
mov    0x50(%r13),%rax
mov    %rax,-0xf8(%rbp)
mov    0xa0(%rdi),%rbx
mov    (%rbx),%rax
mov    %rax,-0x88(%rbp)
mov    0x8(%rbx),%rax
mov    %rax,-0xa8(%rbp)
mov    0x10(%rbx),%rax
mov    %rax,-0x30(%rbp)
mov    0x88(%rdi),%r11d
mov    %r11,-0x148(%rbp)
lea    -0x1(%r11),%eax
lea    -0x1(%r11,%rax,2),%edi
mov    %edi,%edi
mov    %rdi,-0xd0(%rbp)
mov    %eax,%r14d
mov    %r14,-0x38(%rbp)
xor    %r8d,%r8d
mov    %r8,-0xb8(%rbp)
lea    0x3(%r11,%r11,2),%eax
mov    %eax,%eax
lea    (%rax,%rax,1),%rbx
mov    %rbx,-0x108(%rbp)
mov    $0x6,%r9d
mov    $0xfffffffffffffffd,%rax
mov    %rax,-0xe8(%rbp)
mov    $0x3,%eax
mov    %rax,-0xe0(%rbp)
mov    $0xffffffffffffffff,%rax
mov    %rax,-0x48(%rbp)
mov    $0x1,%eax
mov    %rax,-0x40(%rbp)
mov    %r8,%r15
mov    %rcx,%r8
mov    $0xa,%r10d
mov    $0x8,%eax
mov    %r15,%rcx
jmpq   38625 <pass2_fs_dither+0x3a5>
mov    %r9,-0x130(%rbp)
add    %rbx,%r9
mov    %r9,-0x128(%rbp)
movswq (%r9),%r9
lea    0x8(%r9,%r13,1),%r9d
sar    $0x4,%r9d
movslq %r9d,%r13
movzbl (%r8),%r9d
add    (%r14,%r13,4),%r9d
movslq %r9d,%r9
movzbl (%r9,%rdx,1),%r13d
mov    %r13,%r9
shr    $0x3,%r9d
mov    %r11,-0x150(%rbp)
movslq %r9d,%r11
mov    %r10,-0x100(%rbp)
movswq (%r10,%rbx,1),%r10
lea    0x8(%r10,%rcx,1),%ecx
sar    $0x4,%ecx
movslq %ecx,%r10
movzbl 0x2(%r8),%ecx
add    (%r14,%r10,4),%ecx
movslq %ecx,%rcx
movzbl (%rcx,%rdx,1),%ecx
mov    %rcx,-0xc8(%rbp)
shr    $0x3,%ecx
movslq %ecx,%r10
add    %r10,%r10
mov    (%r15,%r11,8),%r11
add    %r10,%r11
movswq (%rbx,%rax,1),%r10
lea    0x8(%r10,%rsi,1),%r10d
sar    $0x4,%r10d
movslq %r10d,%rsi
movzbl 0x1(%r8),%r10d
add    (%r14,%rsi,4),%r10d
movslq %r10d,%rsi
movzbl (%rsi,%rdx,1),%r14d
mov    %r14,%rdx
shr    $0x2,%edx
movslq %edx,%r10
shl    $0x6,%r10
lea    (%r11,%r10,1),%r15
movzwl (%r15),%esi
test   %si,%si
jne    3847b <pass2_fs_dither+0x1fb>
mov    %r8,-0xd8(%rbp)
mov    %rax,-0xa0(%rbp)
mov    %r9,%rsi
callq  38050 <fill_inverse_cmap>
mov    -0xa0(%rbp),%rax
mov    -0xd8(%rbp),%r8
movzwl (%r15),%ecx
add    $0xffffffff,%ecx
mov    %cl,(%r12)
movslq %ecx,%rdx
mov    -0x88(%rbp),%rcx
movzbl (%rdx,%rcx,1),%ecx
sub    %ecx,%r13d
mov    %r13,-0x78(%rbp)
lea    0x0(%r13,%r13,2),%r9d
mov    -0x70(%rbp),%rcx
lea    (%rcx,%r9,1),%edi
mov    -0xa8(%rbp),%rcx
movzbl (%rdx,%rcx,1),%ecx
sub    %ecx,%r14d
mov    %r14,-0xa0(%rbp)
lea    (%r14,%r14,2),%esi
mov    -0x90(%rbp),%rcx
add    %esi,%ecx
mov    -0x30(%rbp),%r10
movzbl (%rdx,%r10,1),%edx
mov    %di,(%rbx)
mov    %cx,0x2(%rbx)
mov    -0xc8(%rbp),%rcx
sub    %edx,%ecx
mov    %rcx,-0xd8(%rbp)
lea    (%rcx,%rcx,2),%edi
mov    -0xb0(%rbp),%rdx
add    %edi,%edx
mov    %dx,0x4(%rbx)
lea    0x0(%r13,%r13,4),%edx
mov    -0x80(%rbp),%rbx
add    %ebx,%edx
mov    %rdx,-0x70(%rbp)
lea    (%r14,%r14,4),%edx
mov    -0x98(%rbp),%rbx
add    %ebx,%edx
mov    %rdx,-0x90(%rbp)
lea    (%rcx,%rcx,4),%ebx
mov    -0xc0(%rbp),%rdx
add    %ebx,%edx
mov    %rdx,-0xb0(%rbp)
lea    0x0(%r13,%r9,2),%r13d
lea    (%r14,%rsi,2),%esi
lea    (%rcx,%rdi,2),%ecx
mov    -0xf0(%rbp),%rdx
add    %rdx,%r8
mov    -0x50(%rbp),%rdx
add    %r12,%rdx
mov    %rdx,-0xc8(%rbp)
mov    -0x150(%rbp),%rdx
lea    -0x1(%rdx),%r11d
mov    -0xc8(%rbp),%r12
mov    -0x140(%rbp),%rdx
mov    -0xf8(%rbp),%r14
mov    -0x60(%rbp),%r15
mov    -0x100(%rbp),%r10
mov    -0x128(%rbp),%rbx
mov    -0x130(%rbp),%r9
mov    -0x58(%rbp),%rdi
pushq  -0x78(%rbp)
pushq  -0xa0(%rbp)
pushq  -0xd8(%rbp)
popq   -0xc0(%rbp)
popq   -0x98(%rbp)
popq   -0x80(%rbp)
test   %r11d,%r11d
jne    3839b <pass2_fs_dither+0x11b>
mov    -0x70(%rbp),%rax
mov    %ax,(%rbx)
mov    -0x90(%rbp),%rax
mov    %ax,0x2(%rbx)
mov    -0xb0(%rbp),%rax
mov    %ax,0x4(%rbx)
mov    -0x68(%rbp),%rax
lea    0x1(%rax),%r15d
mov    -0x38(%rbp),%r14
mov    $0x6,%r9d
mov    -0x148(%rbp),%r11
mov    -0xd0(%rbp),%rdi
mov    -0x108(%rbp),%rbx
mov    -0x110(%rbp),%r13
xor    %ecx,%ecx
mov    -0x120(%rbp),%rdx
mov    -0x118(%rbp),%rsi
mov    -0x138(%rbp),%r8
mov    $0xa,%r10d
mov    $0x8,%eax
cmp    %r8d,%r15d
jl     38640 <pass2_fs_dither+0x3c0>
mov    -0x8(%rbp),%rbx
mov    -0x10(%rbp),%r12
mov    -0x18(%rbp),%r13
mov    -0x20(%rbp),%r14
mov    -0x28(%rbp),%r15
leaveq 
retq   
movslq %r15d,%r12
mov    (%rsi,%r12,8),%r8
mov    (%rdx,%r12,8),%r12
movslq 0x48(%r13),%rdx
test   %edx,%edx
jne    386dc <pass2_fs_dither+0x45c>
mov    0x40(%r13),%rbx
movl   $0x1,0x48(%r13)
mov    %r15,-0x68(%rbp)
mov    -0x140(%rbp),%rdx
mov    -0xf8(%rbp),%r14
mov    -0x60(%rbp),%r15
mov    -0x58(%rbp),%rdi
mov    %rcx,%rsi
mov    %rsi,%r13
pushq  -0x40(%rbp)
pushq  -0xb8(%rbp)
pushq  -0xb8(%rbp)
pushq  -0xb8(%rbp)
pushq  -0xb8(%rbp)
pushq  -0xb8(%rbp)
pushq  -0xb8(%rbp)
pushq  -0xe0(%rbp)
popq   -0xf0(%rbp)
popq   -0xc0(%rbp)
popq   -0xb0(%rbp)
popq   -0x98(%rbp)
popq   -0x90(%rbp)
popq   -0x80(%rbp)
popq   -0x70(%rbp)
popq   -0x50(%rbp)
jmpq   385af <pass2_fs_dither+0x32f>
add    0x40(%r13),%rbx
movl   $0x0,0x48(%r13)
add    %rdi,%r8
add    %r14,%r12
mov    %r15,-0x68(%rbp)
mov    -0x140(%rbp),%rdx
mov    -0xf8(%rbp),%r14
mov    -0x60(%rbp),%r15
mov    $0xfffffffffffffffe,%r10
mov    $0xfffffffffffffffc,%rax
mov    -0x58(%rbp),%rdi
mov    $0xfffffffffffffffa,%r9
mov    %rcx,%rsi
mov    %rsi,%r13
pushq  -0x48(%rbp)
pushq  -0xb8(%rbp)
pushq  -0xb8(%rbp)
pushq  -0xb8(%rbp)
pushq  -0xb8(%rbp)
pushq  -0xb8(%rbp)
pushq  -0xb8(%rbp)
pushq  -0xe8(%rbp)
popq   -0xf0(%rbp)
popq   -0xc0(%rbp)
popq   -0xb0(%rbp)
popq   -0x98(%rbp)
popq   -0x90(%rbp)
popq   -0x80(%rbp)
popq   -0x70(%rbp)
popq   -0x50(%rbp)
jmpq   385af <pass2_fs_dither+0x32f>
nopl   0x0(%rax)

0000000000038780 <init_error_limit>:
push   %rbp
mov    %rsp,%rbp
sub    $0x10,%rsp
mov    %r14,-0x8(%rbp)
mov    %r15,-0x10(%rbp)
mov    0x8(%rdi),%rax
mov    (%rax),%rax
mov    $0x1,%r15d
mov    $0x7fc,%edx
mov    0x270(%rdi),%r14
mov    %r15,%rsi
callq  *%rax
lea    0x3fc(%rax),%rsi
mov    %rsi,0x50(%r14)
xor    %r8d,%r8d
mov    %r8,%rax
jmp    387d5 <init_error_limit+0x55>
movslq %eax,%rcx
mov    %eax,(%rsi,%rcx,4)
mov    %rax,%rdx
neg    %edx
movslq %edx,%rcx
mov    %edx,(%rsi,%rcx,4)
add    $0x1,%eax
cmp    $0xf,%eax
jle    387c1 <init_error_limit+0x41>
mov    %rax,%rcx
jmp    387e4 <init_error_limit+0x64>
mov    %r8,%rdx
add    %edx,%ecx
mov    %rcx,%rdi
neg    %edi
cmp    $0x2f,%eax
jg     38825 <init_error_limit+0xa5>
movslq %eax,%rdx
mov    %ecx,(%rsi,%rdx,4)
mov    %rax,%rdx
neg    %edx
movslq %edx,%rdx
mov    %edi,(%rsi,%rdx,4)
add    $0x1,%eax
mov    %rax,%rdx
and    $0x1,%edx
test   %edx,%edx
jg     387df <init_error_limit+0x5f>
mov    %r15,%rdx
jmp    387e2 <init_error_limit+0x62>
movslq %eax,%rdx
mov    %ecx,(%rsi,%rdx,4)
mov    %rax,%rdx
neg    %edx
movslq %edx,%rdx
mov    %edi,(%rsi,%rdx,4)
add    $0x1,%eax
cmp    $0xff,%eax
jle    38811 <init_error_limit+0x91>
mov    -0x10(%rbp),%r15
mov    -0x8(%rbp),%r14
leaveq 
retq   
nopw   %cs:0x0(%rax,%rax,1)

0000000000038840 <finish_pass1>:
push   %rbp
mov    %rsp,%rbp
sub    $0x10,%rsp
mov    %r15,-0x8(%rbp)
mov    0x270(%rdi),%r15
mov    0x20(%r15),%rax
mov    %rax,0xa0(%rdi)
movslq 0x28(%r15),%rsi
callq  378c0 <select_colors>
movl   $0x1,0x38(%r15)
mov    -0x8(%rbp),%r15
leaveq 
retq   
data16 nopw %cs:0x0(%rax,%rax,1)

0000000000038880 <finish_pass2>:
push   %rbp
mov    %rsp,%rbp
leaveq 
retq   
nopw   %cs:0x0(%rax,%rax,1)

0000000000038890 <start_pass_2_quant>:
push   %rbp
mov    %rsp,%rbp
sub    $0x30,%rsp
mov    %r14,-0x28(%rbp)
mov    %r15,-0x30(%rbp)
mov    0x270(%rdi),%rcx
mov    0x30(%rcx),%r8
mov    0x70(%rdi),%eax
test   %eax,%eax
je     388b9 <start_pass_2_quant+0x29>
movl   $0x2,0x70(%rdi)
test   %esi,%esi
jne    388d2 <start_pass_2_quant+0x42>
mov    0x70(%rdi),%eax
cmp    $0x2,%eax
je     3891f <start_pass_2_quant+0x8f>
lea    -0x73c(%rip),%rax        # 38190 <pass2_no_dither>
mov    %rax,0x8(%rcx)
jmp    3892a <start_pass_2_quant+0x9a>
lea    -0x1959(%rip),%rax        # 36f80 <prescan_quantize>
mov    %rax,0x8(%rcx)
lea    -0xa4(%rip),%rax        # 38840 <finish_pass1>
mov    %rax,0x10(%rcx)
mov    %r15,%rax
mov    %r13,%rsi
mov    %r8,%r13
mov    %r12,%rdi
mov    %rcx,%r12
mov    %r14,%rcx
movl   $0x1,0x38(%r12)
movslq 0x38(%r12),%rdx
test   %edx,%edx
je     3895a <start_pass_2_quant+0xca>
mov    $0x1000,%r15d
xor    %r14d,%r14d
mov    %rsi,-0x18(%rbp)
mov    %rdi,-0x10(%rbp)
jmp    3897c <start_pass_2_quant+0xec>
lea    -0x6a6(%rip),%rax        # 38280 <pass2_fs_dither>
mov    %rax,0x8(%rcx)
lea    -0xb1(%rip),%rax        # 38880 <finish_pass2>
mov    %rax,0x10(%rcx)
movslq 0x9c(%rdi),%rdx
test   %edx,%edx
jle    3899d <start_pass_2_quant+0x10d>
mov    %r15,%rax
mov    %r13,%r15
mov    %r8,%r13
mov    %r14,%r8
mov    %r12,%r14
mov    %rcx,%r12
mov    %r8,%rcx
jmpq   389e9 <start_pass_2_quant+0x159>
mov    %rdi,%r12
mov    %rsi,%r13
mov    %rcx,%r14
mov    %rax,%r15
leaveq 
retq   
movslq %r14d,%rax
mov    0x0(%r13,%rax,8),%rdi
mov    %r15,%rsi
callq  44d0 <jzero_far@plt>
add    $0x1,%r14d
cmp    $0x1f,%r14d
jle    38968 <start_pass_2_quant+0xd8>
movl   $0x0,0x38(%r12)
mov    -0x10(%rbp),%r12
mov    -0x30(%rbp),%r15
mov    -0x28(%rbp),%r14
mov    -0x18(%rbp),%r13
leaveq 
retq   
mov    (%rdi),%rax
movl   $0x38,0x28(%rax)
mov    (%rdi),%rax
movl   $0x1,0x2c(%rax)
mov    (%rdi),%rax
mov    (%rax),%rax
mov    %rdi,%rsi
mov    %r13,-0x20(%rbp)
mov    %r8,-0x18(%rbp)
mov    %rdi,%r13
mov    %rsi,%rdi
mov    %r12,%r14
mov    %rcx,%r12
mov    %rdx,%r15
callq  *%rax
mov    %r15,%rdx
mov    %r13,%rdi
mov    -0x18(%rbp),%r13
mov    -0x30(%rbp),%rax
mov    -0x28(%rbp),%rcx
mov    -0x20(%rbp),%r15
cmp    $0x100,%edx
jle    38a29 <start_pass_2_quant+0x199>
mov    (%rdi),%rax
movl   $0x39,0x28(%rax)
mov    (%rdi),%rax
movl   $0x100,0x2c(%rax)
mov    (%rdi),%rax
mov    (%rax),%rax
mov    %rdi,%rcx
mov    %r13,-0x10(%rbp)
mov    %rdi,%r13
mov    %rcx,%rdi
callq  *%rax
mov    %r13,%rdi
mov    -0x10(%rbp),%r13
mov    -0x30(%rbp),%rax
mov    -0x28(%rbp),%rcx
mov    0x70(%rdi),%edx
cmp    $0x2,%edx
je     38a3c <start_pass_2_quant+0x1ac>
mov    %r15,%rsi
mov    %r14,%rdi
jmpq   38903 <start_pass_2_quant+0x73>
mov    0x88(%rdi),%eax
add    $0x2,%eax
mov    %eax,%eax
lea    (%rax,%rax,2),%rax
lea    (%rax,%rax,1),%rsi
mov    0x40(%r12),%rax
test   %rax,%rax
jne    38a96 <start_pass_2_quant+0x206>
mov    0x8(%rdi),%rax
mov    0x8(%rax),%rax
mov    $0x1,%r8d
mov    %rdi,%rcx
mov    %rsi,%rdx
mov    %r15,-0x20(%rbp)
mov    %r13,-0x8(%rbp)
mov    %rsi,%r13
mov    %r8,%rsi
mov    %rdi,%r15
mov    %rcx,%rdi
callq  *%rax
mov    %rax,0x40(%r12)
mov    %r13,%rsi
mov    %r15,%rdi
mov    -0x8(%rbp),%r13
mov    -0x20(%rbp),%r15
mov    0x40(%r12),%rax
mov    %r13,-0x8(%rbp)
mov    %rdi,%r13
mov    %rax,%rdi
callq  44d0 <jzero_far@plt>
mov    0x50(%r12),%rax
test   %rax,%rax
jne    38abc <start_pass_2_quant+0x22c>
mov    %r13,%rdi
callq  38780 <init_error_limit>
movl   $0x0,0x48(%r12)
mov    %r15,%rsi
mov    %r14,%rdi
mov    -0x8(%rbp),%r13
mov    -0x30(%rbp),%rax
mov    -0x28(%rbp),%rcx
jmpq   38903 <start_pass_2_quant+0x73>
nopl   0x0(%rax)

0000000000038ae0 <new_color_map_2_quant>:
push   %rbp
mov    %rsp,%rbp
mov    0x270(%rdi),%rax
movl   $0x1,0x38(%rax)
leaveq 
retq   
nopw   %cs:0x0(%rax,%rax,1)
xchg   %ax,%ax

0000000000038b00 <jdiv_round_up>:
push   %rbp
mov    %rsp,%rbp
lea    -0x1(%rsi,%rdi,1),%rax
cqto   
idiv   %rsi
leaveq 
retq   

0000000000038b10 <jround_up>:
push   %rbp
mov    %rsp,%rbp
lea    -0x1(%rsi,%rdi,1),%rax
cqto   
mov    %rax,%rcx
idiv   %rsi
mov    %rcx,%rax
sub    %rdx,%rax
leaveq 
retq   
nopl   0x0(%rax)

0000000000038b30 <jcopy_sample_rows>:
push   %rbp
mov    %rsp,%rbp
sub    $0x20,%rsp
mov    %r12,-0x8(%rbp)
mov    %r13,-0x10(%rbp)
mov    %r14,-0x18(%rbp)
mov    %r15,-0x20(%rbp)
mov    %r9d,%r14d
movslq %esi,%rax
lea    (%rdi,%rax,8),%r13
movslq %ecx,%rax
lea    (%rdx,%rax,8),%r15
mov    %r8,%r12
jmp    38b79 <jcopy_sample_rows+0x49>
mov    (%r15),%rdi
mov    0x0(%r13),%rsi
mov    %r14,%rdx
callq  42c0 <memcpy@plt>
add    $0xffffffff,%r12d
add    $0x8,%r13
add    $0x8,%r15
test   %r12d,%r12d
jg     38b5e <jcopy_sample_rows+0x2e>
mov    -0x20(%rbp),%r15
mov    -0x18(%rbp),%r14
mov    -0x10(%rbp),%r13
mov    -0x8(%rbp),%r12
leaveq 
retq   

0000000000038b90 <jcopy_block_row>:
push   %rbp
mov    %rsp,%rbp
mov    %edx,%edx
shl    $0x7,%rdx
mov    %rdi,%rax
mov    %rsi,%rdi
mov    %rax,%rsi
callq  42c0 <memcpy@plt>
leaveq 
retq   
nopw   0x0(%rax,%rax,1)

0000000000038bb0 <jzero_far>:
push   %rbp
mov    %rsp,%rbp
mov    %rsi,%rdx
xor    %esi,%esi
callq  41e0 <memset@plt>
leaveq 
retq   

0000000000038bc0 <jinit_memory_mgr>:
push   %rbp
mov    %rsp,%rbp
sub    $0x20,%rsp
mov    %r15,-0x10(%rbp)
movq   $0x0,0x8(%rdi)
mov    %rdi,%r15
callq  4490 <jpeg_mem_init@plt>
mov    %rax,-0x20(%rbp)
mov    $0xa8,%esi
mov    %r15,%rdi
callq  4210 <jpeg_get_small@plt>
test   %rax,%rax
jne    38c27 <jinit_memory_mgr+0x67>
mov    %r15,%rdi
mov    %r14,-0x8(%rbp)
mov    %rax,%r14
callq  4350 <jpeg_mem_term@plt>
mov    (%r15),%rax
movl   $0x36,0x28(%rax)
mov    (%r15),%rax
movl   $0x0,0x2c(%rax)
mov    (%r15),%rax
mov    (%rax),%rax
mov    %r15,%rdi
callq  *%rax
mov    %r14,%rax
mov    -0x8(%rbp),%r14
lea    0x1a2(%rip),%rcx        # 38dd0 <alloc_small>
mov    %rcx,(%rax)
lea    0x3b8(%rip),%rcx        # 38ff0 <alloc_large>
mov    %rcx,0x8(%rax)
lea    0x50d(%rip),%rcx        # 39150 <alloc_sarray>
mov    %rcx,0x10(%rax)
lea    0x642(%rip),%rcx        # 39290 <alloc_barray>
mov    %rcx,0x18(%rax)
lea    0x757(%rip),%rcx        # 393b0 <request_virt_sarray>
mov    %rcx,0x20(%rax)
lea    0x81c(%rip),%rcx        # 39480 <request_virt_barray>
mov    %rcx,0x28(%rax)
lea    0x8e1(%rip),%rcx        # 39550 <realize_virt_arrays>
mov    %rcx,0x30(%rax)
lea    0xdc6(%rip),%rcx        # 39a40 <access_virt_sarray>
mov    %rcx,0x38(%rax)
lea    0xffb(%rip),%rcx        # 39c80 <access_virt_barray>
mov    %rcx,0x40(%rax)
lea    0x1240(%rip),%rcx        # 39ed0 <free_pool>
mov    %rcx,0x48(%rax)
lea    0x13c5(%rip),%rcx        # 3a060 <self_destruct>
mov    %rcx,0x50(%rax)
movq   $0x3b9aca00,0x60(%rax)
mov    -0x20(%rbp),%rcx
mov    %rcx,0x58(%rax)
mov    $0x1,%ecx
jmp    38cce <jinit_memory_mgr+0x10e>
movslq %ecx,%rdx
movq   $0x0,0x68(%rax,%rdx,8)
movq   $0x0,0x78(%rax,%rdx,8)
add    $0xffffffff,%ecx
test   %ecx,%ecx
jns    38cb6 <jinit_memory_mgr+0xf6>
movq   $0x0,0x88(%rax)
movq   $0x0,0x90(%rax)
movq   $0xa8,0x98(%rax)
mov    %rax,0x8(%r15)
mov    %rax,%r15
lea    0x22a47(%rip),%rdi        # 5b748 <extra_pool_slop+0x10>
callq  4040 <getenv@plt>
test   %rax,%rax
jne    38d11 <jinit_memory_mgr+0x151>
mov    -0x10(%rbp),%r15
leaveq 
retq   
mov    %rax,%rdi
movb   $0x78,-0x11(%rbp)
xor    %eax,%eax
lea    0x22a2f(%rip),%rsi        # 5b750 <extra_pool_slop+0x18>
lea    -0x20(%rbp),%rdx
lea    -0x11(%rbp),%rcx
callq  4370 <sscanf@plt>
test   %eax,%eax
jg     38d38 <jinit_memory_mgr+0x178>
mov    -0x10(%rbp),%r15
leaveq 
retq   
movsbq -0x11(%rbp),%rax
cmp    $0x6d,%al
je     38d45 <jinit_memory_mgr+0x185>
cmp    $0x4d,%al
jne    38d60 <jinit_memory_mgr+0x1a0>
mov    -0x20(%rbp),%rax
lea    (%rax,%rax,4),%rcx
mov    %rcx,%rax
shl    $0x5,%rax
lea    (%rax,%rcx,8),%rax
lea    (%rax,%rax,4),%rax
mov    %rax,-0x20(%rbp)
mov    -0x20(%rbp),%rax
lea    (%rax,%rax,4),%rcx
mov    %rcx,%rax
shl    $0x5,%rax
lea    (%rax,%rcx,8),%rax
lea    (%rax,%rax,4),%rax
mov    %rax,0x58(%r15)
mov    -0x10(%rbp),%r15
leaveq 
retq   
data16 nopw %cs:0x0(%rax,%rax,1)
nopl   0x0(%rax)

0000000000038d90 <round_up_pow2>:
push   %rbp
mov    %rsp,%rbp
lea    -0x1(%rsi,%rdi,1),%rcx
mov    %rsi,%rax
neg    %rax
and    %rcx,%rax
leaveq 
retq   
data16 nopw %cs:0x0(%rax,%rax,1)
nop

0000000000038db0 <out_of_memory>:
push   %rbp
mov    %rsp,%rbp
mov    (%rdi),%rax
movl   $0x36,0x28(%rax)
mov    (%rdi),%rax
mov    %esi,0x2c(%rax)
mov    (%rdi),%rax
mov    (%rax),%rax
callq  *%rax
leaveq 
retq   
xchg   %ax,%ax

0000000000038dd0 <alloc_small>:
push   %rbp
mov    %rsp,%rbp
sub    $0x40,%rsp
mov    %r12,-0x20(%rbp)
mov    %r13,-0x28(%rbp)
mov    %r14,-0x30(%rbp)
mov    %r15,-0x38(%rbp)
mov    0x8(%rdi),%r13
cmp    $0x3b9aca00,%rdx
ja     38e03 <alloc_small+0x33>
mov    %rsi,%r14
mov    %rbx,%r15
mov    %rdi,%rbx
mov    %rdx,%rdi
jmp    38e20 <alloc_small+0x50>
mov    %rdx,%r12
mov    %rsi,%r14
mov    %rbx,%r15
mov    $0x7,%esi
mov    %rdi,%rbx
callq  38db0 <out_of_memory>
mov    %r12,%rdi
mov    -0x20(%rbp),%r12
mov    $0x10,%esi
callq  38d90 <round_up_pow2>
lea    0x27(%rax),%rcx
cmp    $0x3b9aca00,%rcx
ja     38e3f <alloc_small+0x6f>
mov    %r13,%rcx
mov    %rax,%r13
jmp    38e59 <alloc_small+0x89>
mov    %r13,%r12
mov    %rax,%r13
mov    $0x1,%esi
mov    %rbx,%rdi
callq  38db0 <out_of_memory>
mov    %r12,%rcx
mov    -0x20(%rbp),%r12
test   %r14d,%r14d
js     38e64 <alloc_small+0x94>
cmp    $0x1,%r14d
jle    38e8e <alloc_small+0xbe>
mov    (%rbx),%rax
movl   $0xe,0x28(%rax)
mov    (%rbx),%rax
mov    %r14d,0x2c(%rax)
mov    (%rbx),%rax
mov    (%rax),%rax
mov    %rbx,%rdi
mov    %rbx,-0x40(%rbp)
mov    %rcx,%rbx
callq  *%rax
mov    %rbx,%rcx
mov    -0x40(%rbp),%rbx
movslq %r14d,%rdi
mov    0x68(%rcx,%rdi,8),%rax
xor    %edx,%edx
jmp    38ea9 <alloc_small+0xd9>
mov    0x10(%rax),%rsi
cmp    %r13,%rsi
jae    38eae <alloc_small+0xde>
mov    %rax,%rdx
mov    (%rdx),%rax
test   %rax,%rax
jne    38e9a <alloc_small+0xca>
test   %rax,%rax
jne    38f3b <alloc_small+0x16b>
test   %rdx,%rdx
je     38f89 <alloc_small+0x1b9>
lea    0x22871(%rip),%rax        # 5b738 <extra_pool_slop>
mov    (%rax,%rdi,8),%r12
jmpq   38f94 <alloc_small+0x1c4>
shr    %r12
cmp    $0x31,%r12
ja     38ee4 <alloc_small+0x114>
mov    %rbx,%rdi
mov    %r14,%rsi
callq  38db0 <out_of_memory>
lea    0x27(%r13,%r12,1),%r15
mov    %rbx,%rdi
mov    %r15,%rsi
callq  4210 <jpeg_get_small@plt>
test   %rax,%rax
je     38ed0 <alloc_small+0x100>
mov    -0x10(%rbp),%rdx
add    0x98(%rdx),%r15
mov    -0x40(%rbp),%rsi
test   %rsi,%rsi
mov    %r15,0x98(%rdx)
movq   $0x0,(%rax)
movq   $0x0,0x8(%rax)
lea    0x0(%r13,%r12,1),%rcx
mov    %rcx,0x10(%rax)
je     38fbc <alloc_small+0x1ec>
mov    %rax,(%rsi)
mov    -0x18(%rbp),%r15
mov    -0x20(%rbp),%r12
lea    0x18(%rax),%rcx
mov    %rcx,%rdx
and    $0xf,%rdx
test   %rdx,%rdx
je     38f5c <alloc_small+0x18c>
and    $0xf,%rcx
mov    $0x10,%edx
sub    %rcx,%rdx
lea    0x18(%rax,%rdx,1),%rcx
mov    0x8(%rax),%rsi
lea    0x0(%r13,%rsi,1),%rdx
mov    %rdx,0x8(%rax)
mov    0x10(%rax),%rdx
sub    %r13,%rdx
mov    %rdx,0x10(%rax)
lea    (%rsi,%rcx,1),%rax
mov    %r15,%rbx
mov    -0x38(%rbp),%r15
mov    -0x30(%rbp),%r14
mov    -0x28(%rbp),%r13
leaveq 
retq   
lea    0x22798(%rip),%rax        # 5b728 <first_pool_slop>
mov    (%rax,%rdi,8),%r12
mov    $0x2,%r14d
mov    $0x3b9ac9d9,%eax
sub    %r13,%rax
cmp    %rax,%r12
ja     38fd2 <alloc_small+0x202>
mov    %rcx,-0x10(%rbp)
mov    %rdx,-0x40(%rbp)
mov    %rdi,-0x8(%rbp)
mov    %r15,-0x18(%rbp)
jmpq   38ee4 <alloc_small+0x114>
mov    -0x8(%rbp),%rcx
mov    %rax,0x68(%rdx,%rcx,8)
mov    -0x18(%rbp),%r15
mov    -0x20(%rbp),%r12
jmpq   38f3b <alloc_small+0x16b>
mov    %rcx,-0x10(%rbp)
mov    %rdx,-0x40(%rbp)
mov    %rdi,-0x8(%rbp)
mov    %r15,-0x18(%rbp)
mov    %rax,%r12
jmpq   38ee4 <alloc_small+0x114>
nopw   0x0(%rax,%rax,1)

0000000000038ff0 <alloc_large>:
push   %rbp
mov    %rsp,%rbp
sub    $0x30,%rsp
mov    %r12,-0x10(%rbp)
mov    %r13,-0x18(%rbp)
mov    %r14,-0x20(%rbp)
mov    %r15,-0x28(%rbp)
mov    %rbx,-0x8(%rbp)
mov    0x8(%rdi),%r12
cmp    $0x3b9aca00,%rdx
ja     39027 <alloc_large+0x37>
mov    %rbx,%r13
mov    %rsi,%rbx
mov    %rdi,%r14
mov    %rdx,%rdi
jmp    39040 <alloc_large+0x50>
mov    %rbx,%r13
mov    %rsi,%rbx
mov    %rdx,%r15
mov    $0x8,%esi
mov    %rdi,%r14
callq  38db0 <out_of_memory>
mov    %r15,%rdi
mov    $0x10,%esi
callq  38d90 <round_up_pow2>
lea    0x27(%rax),%rsi
cmp    $0x3b9aca00,%rsi
ja     3905c <alloc_large+0x6c>
mov    %rax,%r15
jmp    39076 <alloc_large+0x86>
mov    %rsi,%r13
mov    %rax,%r15
mov    $0x3,%esi
mov    %r14,%rdi
callq  38db0 <out_of_memory>
mov    %r13,%rsi
mov    -0x8(%rbp),%r13
test   %ebx,%ebx
js     3907f <alloc_large+0x8f>
cmp    $0x1,%ebx
jle    390a4 <alloc_large+0xb4>
mov    (%r14),%rax
movl   $0xe,0x28(%rax)
mov    (%r14),%rax
mov    %ebx,0x2c(%rax)
mov    (%r14),%rax
mov    (%rax),%rax
mov    %rsi,%r13
mov    %r14,%rdi
callq  *%rax
mov    %r13,%rsi
mov    -0x8(%rbp),%r13
mov    %r14,%rdi
callq  40a0 <jpeg_get_large@plt>
test   %rax,%rax
jne    390c4 <alloc_large+0xd4>
mov    %r14,%rdi
mov    %rax,%r14
mov    $0x4,%esi
callq  38db0 <out_of_memory>
mov    %r14,%rax
mov    0x98(%r12),%rcx
lea    0x27(%r15,%rcx,1),%rcx
mov    %rcx,0x98(%r12)
movslq %ebx,%rdx
mov    0x78(%r12,%rdx,8),%rcx
mov    %rcx,(%rax)
mov    %r15,0x8(%rax)
movq   $0x0,0x10(%rax)
mov    %rax,0x78(%r12,%rdx,8)
lea    0x18(%rax),%rcx
mov    %rcx,%rdx
and    $0xf,%rdx
test   %rdx,%rdx
jne    3911d <alloc_large+0x12d>
mov    %rcx,%rax
mov    %r13,%rbx
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
leaveq 
retq   
and    $0xf,%rcx
mov    $0x10,%edx
sub    %rcx,%rdx
lea    0x18(%rax,%rdx,1),%rax
mov    %r13,%rbx
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
leaveq 
retq   
data16 nopw %cs:0x0(%rax,%rax,1)
xchg   %ax,%ax

0000000000039150 <alloc_sarray>:
push   %rbp
mov    %rsp,%rbp
sub    $0x50,%rsp
mov    %rbx,-0x28(%rbp)
mov    %r12,-0x30(%rbp)
mov    %r13,-0x38(%rbp)
mov    %r14,-0x40(%rbp)
mov    %r15,-0x48(%rbp)
mov    %rsi,-0x10(%rbp)
mov    %rdi,-0x8(%rbp)
mov    0x8(%rdi),%r15
cmp    $0x3b9aca00,%edx
ja     3918b <alloc_sarray+0x3b>
mov    %rsi,%rbx
mov    %rcx,%r13
mov    %rdi,%r14
jmp    391a4 <alloc_sarray+0x54>
mov    %rsi,%rbx
mov    %rdx,%r12
mov    %rcx,%r13
mov    $0x9,%esi
mov    %rdi,%r14
callq  38db0 <out_of_memory>
mov    %r12,%rdx
mov    %edx,%edi
mov    $0x20,%esi
callq  38d90 <round_up_pow2>
mov    %rax,%rcx
mov    %ecx,%r8d
mov    %r8,-0x18(%rbp)
mov    $0x3b9ac9e8,%eax
xor    %edx,%edx
div    %r8
test   %rax,%rax
je     391ce <alloc_sarray+0x7e>
mov    %rax,%r12
jmp    391f2 <alloc_sarray+0xa2>
mov    (%r14),%rdx
movl   $0x46,0x28(%rdx)
mov    (%r14),%rdx
mov    (%rdx),%rdx
mov    %r14,%rdi
mov    %rcx,-0x20(%rbp)
mov    %rax,%r12
callq  *%rdx
mov    -0x18(%rbp),%r8
mov    -0x20(%rbp),%rcx
mov    %r13d,%eax
cmp    %r12,%rax
jg     391fd <alloc_sarray+0xad>
mov    %r13,%r12
mov    %r12d,0xa0(%r15)
mov    %r13d,%edx
shl    $0x3,%rdx
mov    %rbx,%rsi
mov    %rcx,%rbx
mov    %r8,%r15
mov    %r14,%rdi
callq  38dd0 <alloc_small>
mov    %ebx,%ecx
mov    %r15,%rdx
mov    %rcx,%r15
mov    %r14,%rdi
mov    %rax,%r14
xor    %ebx,%ebx
mov    -0x10(%rbp),%rsi
jmp    39251 <alloc_sarray+0x101>
mov    %ebx,%ecx
mov    %rax,(%r14,%rcx,8)
add    %r15,%rax
add    $0x1,%ebx
add    $0xffffffff,%edx
test   %edx,%edx
jne    39232 <alloc_sarray+0xe2>
mov    -0x8(%rbp),%rdi
mov    -0x10(%rbp),%rsi
mov    -0x18(%rbp),%rdx
cmp    %r13d,%ebx
jb     3926f <alloc_sarray+0x11f>
mov    %r14,%rax
mov    -0x48(%rbp),%r15
mov    -0x40(%rbp),%r14
mov    -0x38(%rbp),%r13
mov    -0x30(%rbp),%r12
mov    -0x28(%rbp),%rbx
leaveq 
retq   
mov    %r13,%rax
sub    %ebx,%eax
cmp    %r12d,%eax
ja     3927c <alloc_sarray+0x12c>
mov    %rax,%r12
mov    %r12d,%eax
imul   %rax,%rdx
callq  38ff0 <alloc_large>
mov    %r12,%rdx
jmp    39241 <alloc_sarray+0xf1>
nopl   (%rax)

0000000000039290 <alloc_barray>:
push   %rbp
mov    %rsp,%rbp
sub    $0x50,%rsp
mov    %r15,-0x48(%rbp)
mov    %rbx,-0x28(%rbp)
mov    %r12,-0x30(%rbp)
mov    %r13,-0x38(%rbp)
mov    %r14,-0x40(%rbp)
mov    %rdx,%rbx
mov    %rcx,%r13
mov    %rdi,%r14
mov    %rsi,-0x10(%rbp)
mov    %r14,-0x8(%rbp)
mov    0x8(%r14),%r8
mov    $0x3b9ac9e8,%eax
mov    %ebx,%r15d
mov    %r15,-0x18(%rbp)
mov    %r15,%r9
shl    $0x7,%r9
xor    %edx,%edx
div    %r9
test   %rax,%rax
je     392e3 <alloc_barray+0x53>
mov    %rax,%r12
jmp    39313 <alloc_barray+0x83>
mov    (%r14),%rcx
movl   $0x46,0x28(%rcx)
mov    (%r14),%rcx
mov    (%rcx),%rcx
mov    %r14,%rdi
mov    %rbx,-0x20(%rbp)
mov    %rsi,%rbx
mov    %rax,%r12
mov    %r8,%r15
callq  *%rcx
mov    %rbx,%rsi
mov    %r15,%r8
mov    -0x18(%rbp),%r15
mov    -0x20(%rbp),%rbx
mov    %r13d,%eax
cmp    %r12,%rax
jg     3931e <alloc_barray+0x8e>
mov    %r13,%r12
mov    %r12d,0xa0(%r8)
mov    %r13d,%edx
shl    $0x3,%rdx
mov    %r14,%rdi
callq  38dd0 <alloc_small>
mov    %ebx,%ecx
shl    $0x7,%rcx
mov    %r15,%rdx
mov    %rax,%r15
mov    %r14,%rdi
mov    %rcx,%r14
mov    -0x10(%rbp),%rsi
xor    %ebx,%ebx
jmp    3936d <alloc_barray+0xdd>
mov    %ebx,%ecx
mov    %rax,(%r15,%rcx,8)
add    %r14,%rax
add    $0x1,%ebx
add    $0xffffffff,%edx
test   %edx,%edx
jne    3934e <alloc_barray+0xbe>
mov    -0x8(%rbp),%rdi
mov    -0x10(%rbp),%rsi
mov    -0x18(%rbp),%rdx
cmp    %r13d,%ebx
jb     3938b <alloc_barray+0xfb>
mov    %r15,%rax
mov    -0x40(%rbp),%r14
mov    -0x38(%rbp),%r13
mov    -0x30(%rbp),%r12
mov    -0x28(%rbp),%rbx
mov    -0x48(%rbp),%r15
leaveq 
retq   
mov    %r13,%rax
sub    %ebx,%eax
cmp    %r12d,%eax
ja     39398 <alloc_barray+0x108>
mov    %rax,%r12
mov    %r12d,%eax
imul   %rax,%rdx
shl    $0x7,%rdx
callq  38ff0 <alloc_large>
mov    %r12,%rdx
jmp    3935d <alloc_barray+0xcd>
nopl   (%rax)

00000000000393b0 <request_virt_sarray>:
push   %rbp
mov    %rsp,%rbp
sub    $0x40,%rsp
mov    %rbx,-0x18(%rbp)
mov    %r12,-0x20(%rbp)
mov    %r13,-0x28(%rbp)
mov    %r14,-0x30(%rbp)
mov    %r15,-0x38(%rbp)
mov    0x8(%rdi),%r14
cmp    $0x1,%esi
jne    393e0 <request_virt_sarray+0x30>
mov    %r8,%rbx
mov    %rcx,%r12
mov    %r9,%r13
jmp    39423 <request_virt_sarray+0x73>
mov    (%rdi),%rax
movl   $0xe,0x28(%rax)
mov    (%rdi),%rax
mov    %esi,0x2c(%rax)
mov    (%rdi),%rax
mov    (%rax),%rax
mov    %rdi,%rbx
mov    %rdx,-0x10(%rbp)
mov    %r14,-0x8(%rbp)
mov    %rcx,%r12
mov    %r9,%r13
mov    %rdi,%r14
mov    %rbx,%rdi
mov    %r8,%rbx
mov    %rsi,%r15
callq  *%rax
mov    %r15,%rsi
mov    %r14,%rdi
mov    -0x8(%rbp),%r14
mov    -0x10(%rbp),%rdx
mov    %rdx,%r15
mov    $0x98,%edx
callq  38dd0 <alloc_small>
movq   $0x0,(%rax)
mov    %ebx,0x8(%rax)
mov    %r12d,0xc(%rax)
mov    %r13d,0x10(%rax)
mov    %r15d,0x24(%rax)
movl   $0x0,0x2c(%rax)
mov    0x88(%r14),%rcx
mov    %rcx,0x30(%rax)
mov    %rax,0x88(%r14)
mov    -0x38(%rbp),%r15
mov    -0x30(%rbp),%r14
mov    -0x28(%rbp),%r13
mov    -0x20(%rbp),%r12
mov    -0x18(%rbp),%rbx
leaveq 
retq   
data16 nopw %cs:0x0(%rax,%rax,1)

0000000000039480 <request_virt_barray>:
push   %rbp
mov    %rsp,%rbp
sub    $0x40,%rsp
mov    %rbx,-0x18(%rbp)
mov    %r12,-0x20(%rbp)
mov    %r13,-0x28(%rbp)
mov    %r14,-0x30(%rbp)
mov    %r15,-0x38(%rbp)
mov    0x8(%rdi),%r14
cmp    $0x1,%esi
jne    394b0 <request_virt_barray+0x30>
mov    %r8,%rbx
mov    %rcx,%r12
mov    %r9,%r13
jmp    394f3 <request_virt_barray+0x73>
mov    (%rdi),%rax
movl   $0xe,0x28(%rax)
mov    (%rdi),%rax
mov    %esi,0x2c(%rax)
mov    (%rdi),%rax
mov    (%rax),%rax
mov    %rdi,%rbx
mov    %rdx,-0x10(%rbp)
mov    %r14,-0x8(%rbp)
mov    %rcx,%r12
mov    %r9,%r13
mov    %rdi,%r14
mov    %rbx,%rdi
mov    %r8,%rbx
mov    %rsi,%r15
callq  *%rax
mov    %r15,%rsi
mov    %r14,%rdi
mov    -0x8(%rbp),%r14
mov    -0x10(%rbp),%rdx
mov    %rdx,%r15
mov    $0x98,%edx
callq  38dd0 <alloc_small>
movq   $0x0,(%rax)
mov    %ebx,0x8(%rax)
mov    %r12d,0xc(%rax)
mov    %r13d,0x10(%rax)
mov    %r15d,0x24(%rax)
movl   $0x0,0x2c(%rax)
mov    0x90(%r14),%rcx
mov    %rcx,0x30(%rax)
mov    %rax,0x90(%r14)
mov    -0x38(%rbp),%r15
mov    -0x30(%rbp),%r14
mov    -0x28(%rbp),%r13
mov    -0x20(%rbp),%r12
mov    -0x18(%rbp),%rbx
leaveq 
retq   
data16 nopw %cs:0x0(%rax,%rax,1)

0000000000039550 <realize_virt_arrays>:
push   %rbp
mov    %rsp,%rbp
sub    $0x40,%rsp
mov    %rdi,-0x40(%rbp)
mov    %rbx,-0x8(%rbp)
mov    %r12,-0x10(%rbp)
mov    %r13,-0x18(%rbp)
mov    %r14,-0x20(%rbp)
mov    %r15,-0x28(%rbp)
mov    0x8(%rdi),%rax
mov    %rax,-0x30(%rbp)
mov    0x88(%rax),%rax
mov    %rdi,%rbx
mov    $0xa,%esi
xor    %r12d,%r12d
mov    %r12,%r13
jmp    395b9 <realize_virt_arrays+0x69>
mov    %rax,-0x38(%rbp)
mov    %rbx,%rdi
mov    %rdx,%rbx
callq  38db0 <out_of_memory>
mov    $0xa,%esi
mov    -0x38(%rbp),%rax
imul   %rbx,%r14
add    %r14,%r13
add    %r15,%r12
mov    0x30(%rax),%rax
mov    -0x40(%rbp),%rbx
test   %rax,%rax
jne    395d3 <realize_virt_arrays+0x83>
mov    -0x30(%rbp),%rax
mov    0x90(%rax),%rax
mov    $0xb,%esi
jmpq   39655 <realize_virt_arrays+0x105>
mov    (%rax),%rcx
test   %rcx,%rcx
jne    395b1 <realize_virt_arrays+0x61>
mov    0x10(%rax),%edx
mov    0xc(%rax),%r14d
mov    0x8(%rax),%ecx
mov    %r14,%r15
imul   %rcx,%r15
mov    %r12,%rcx
not    %rcx
cmp    %rcx,%r15
ja     3958f <realize_virt_arrays+0x3f>
mov    %rdx,%rbx
jmp    395a7 <realize_virt_arrays+0x57>
mov    (%rax),%rcx
test   %rcx,%rcx
jne    39651 <realize_virt_arrays+0x101>
mov    0x10(%rax),%ecx
mov    0xc(%rax),%r14d
mov    0x8(%rax),%edx
mov    %r14,%r15
imul   %rdx,%r15
shl    $0x7,%r15
mov    %r12,%rdx
not    %rdx
cmp    %r15,%rdx
jae    39643 <realize_virt_arrays+0xf3>
mov    %rax,-0x38(%rbp)
mov    %rbx,%rdi
mov    %rcx,%rbx
callq  38db0 <out_of_memory>
mov    %rbx,%rcx
mov    $0xb,%esi
mov    -0x38(%rbp),%rax
mov    -0x40(%rbp),%rbx
imul   %rcx,%r14
shl    $0x7,%r14
add    %r14,%r13
add    %r15,%r12
mov    0x30(%rax),%rax
test   %rax,%rax
jne    395fc <realize_virt_arrays+0xac>
test   %r13,%r13
jne    39675 <realize_virt_arrays+0x125>
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
leaveq 
retq   
mov    $0x1,%r15d
mov    -0x30(%rbp),%r14
mov    0x98(%r14),%rcx
mov    %rbx,%rdi
mov    %r13,%rsi
mov    %r12,%rdx
callq  4280 <jpeg_mem_available@plt>
cmp    %rax,%r12
ja     396a8 <realize_virt_arrays+0x158>
mov    $0x3b9aca00,%r12d
mov    0x88(%r14),%r13
jmp    396fd <realize_virt_arrays+0x1ad>
xor    %edx,%edx
div    %r13
test   %rax,%rax
je     3970e <realize_virt_arrays+0x1be>
mov    %rax,%r12
jmp    3969f <realize_virt_arrays+0x14f>
mov    0x8(%r13),%eax
mov    %eax,0x14(%r13)
mov    0xc(%r13),%edx
mov    0x14(%r13),%ecx
mov    %rbx,%rdi
mov    %r15,%rsi
callq  39150 <alloc_sarray>
mov    %rax,0x0(%r13)
mov    0xa0(%r14),%eax
mov    %eax,0x18(%r13)
movl   $0x0,0x1c(%r13)
movl   $0x0,0x20(%r13)
movl   $0x0,0x28(%r13)
mov    0x30(%r13),%r13
test   %r13,%r13
jne    39713 <realize_virt_arrays+0x1c3>
mov    0x90(%r14),%r13
jmpq   397ad <realize_virt_arrays+0x25d>
mov    %r15,%r12
jmp    3969f <realize_virt_arrays+0x14f>
mov    0x0(%r13),%rax
test   %rax,%rax
jne    396f9 <realize_virt_arrays+0x1a9>
mov    0x8(%r13),%eax
add    $0xffffffffffffffff,%rax
mov    0x10(%r13),%ecx
cqto   
idiv   %rcx
add    $0x1,%rax
cmp    %r12,%rax
jbe    396b7 <realize_virt_arrays+0x167>
mov    %r12,%rax
imul   0x10(%r13),%eax
mov    %eax,0x14(%r13)
mov    0xc(%r13),%edx
mov    0x8(%r13),%eax
imul   %rax,%rdx
lea    0x38(%r13),%rsi
mov    %rbx,%rdi
callq  43a0 <jpeg_open_backing_store@plt>
movl   $0x1,0x2c(%r13)
jmpq   396bf <realize_virt_arrays+0x16f>
mov    0x8(%r13),%eax
mov    %eax,0x14(%r13)
mov    0xc(%r13),%edx
mov    0x14(%r13),%ecx
mov    %rbx,%rdi
mov    %r15,%rsi
callq  39290 <alloc_barray>
mov    %rax,0x0(%r13)
mov    0xa0(%r14),%eax
mov    %eax,0x18(%r13)
movl   $0x0,0x1c(%r13)
movl   $0x0,0x20(%r13)
movl   $0x0,0x28(%r13)
mov    0x30(%r13),%r13
test   %r13,%r13
jne    397c8 <realize_virt_arrays+0x278>
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
leaveq 
retq   
mov    0x0(%r13),%rax
test   %rax,%rax
jne    397a9 <realize_virt_arrays+0x259>
mov    0x8(%r13),%eax
add    $0xffffffffffffffff,%rax
mov    0x10(%r13),%ecx
cqto   
idiv   %rcx
add    $0x1,%rax
cmp    %rax,%r12
jae    39767 <realize_virt_arrays+0x217>
mov    %r12,%rax
imul   0x10(%r13),%eax
mov    %eax,0x14(%r13)
mov    0xc(%r13),%edx
mov    0x8(%r13),%eax
imul   %rax,%rdx
shl    $0x7,%rdx
lea    0x38(%r13),%rsi
mov    %rbx,%rdi
callq  43a0 <jpeg_open_backing_store@plt>
movl   $0x1,0x2c(%r13)
jmpq   3976f <realize_virt_arrays+0x21f>
data16 nopw %cs:0x0(%rax,%rax,1)
nop

0000000000039830 <do_sarray_io>:
push   %rbp
mov    %rsp,%rbp
sub    $0x40,%rsp
mov    %rdx,-0x30(%rbp)
mov    %rdi,-0x38(%rbp)
mov    %rbx,-0x8(%rbp)
mov    %r12,-0x10(%rbp)
mov    %r13,-0x18(%rbp)
mov    %r14,-0x20(%rbp)
mov    %r15,-0x28(%rbp)
mov    0xc(%rsi),%r15d
mov    0x1c(%rsi),%eax
mov    %r15,%r13
imul   %rax,%r13
mov    %rsi,%r14
lea    0x38(%r14),%rsi
mov    %rsi,-0x40(%rbp)
xor    %r12d,%r12d
jmp    3989b <do_sarray_io+0x6b>
mov    (%r14),%rax
mov    (%rax,%r12,8),%rdx
mov    0x40(%r14),%rax
mov    %r13,%rcx
mov    %rbx,%r8
callq  *%rax
mov    0x18(%r14),%eax
add    %rax,%r12
add    %rbx,%r13
mov    -0x38(%rbp),%rdi
mov    -0x40(%rbp),%rsi
mov    -0x30(%rbp),%rdx
mov    0x14(%r14),%eax
cmp    %r12,%rax
jg     398ba <do_sarray_io+0x8a>
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
leaveq 
retq   
sub    %r12,%rax
mov    0x18(%r14),%ecx
cmp    %rcx,%rax
jg     398c9 <do_sarray_io+0x99>
mov    %rax,%rcx
mov    0x1c(%r14),%eax
lea    (%rax,%r12,1),%r8
mov    0x20(%r14),%eax
sub    %r8,%rax
cmp    %rcx,%rax
jg     398e0 <do_sarray_io+0xb0>
mov    %rax,%rcx
mov    0x8(%r14),%ebx
sub    %r8,%rbx
cmp    %rcx,%rbx
jle    398ef <do_sarray_io+0xbf>
mov    %rcx,%rbx
test   %rbx,%rbx
jle    39917 <do_sarray_io+0xe7>
imul   %r15,%rbx
test   %edx,%edx
jne    39872 <do_sarray_io+0x42>
mov    (%r14),%rax
mov    (%rax,%r12,8),%rdx
mov    (%rsi),%rax
mov    %r13,%rcx
mov    %rbx,%r8
callq  *%rax
jmpq   39885 <do_sarray_io+0x55>
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
leaveq 
retq   
nopl   (%rax)

0000000000039930 <do_barray_io>:
push   %rbp
mov    %rsp,%rbp
sub    $0x40,%rsp
mov    %rdx,-0x30(%rbp)
mov    %rdi,-0x38(%rbp)
mov    %rbx,-0x8(%rbp)
mov    %r12,-0x10(%rbp)
mov    %r13,-0x18(%rbp)
mov    %r14,-0x20(%rbp)
mov    %r15,-0x28(%rbp)
mov    0xc(%rsi),%r12d
mov    %r12,%r15
shl    $0x7,%r15
mov    0x1c(%rsi),%eax
imul   %rax,%r12
shl    $0x7,%r12
mov    %rsi,%r14
lea    0x38(%r14),%rsi
mov    %rsi,-0x40(%rbp)
xor    %r13d,%r13d
jmp    399a3 <do_barray_io+0x73>
mov    (%r14),%rax
mov    (%rax,%r13,8),%rdx
mov    0x40(%r14),%rax
mov    %r12,%rcx
mov    %rbx,%r8
callq  *%rax
mov    0x18(%r14),%eax
add    %rax,%r13
add    %rbx,%r12
mov    -0x38(%rbp),%rdi
mov    -0x40(%rbp),%rsi
mov    -0x30(%rbp),%rdx
mov    0x14(%r14),%eax
cmp    %r13,%rax
jg     399c2 <do_barray_io+0x92>
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
leaveq 
retq   
sub    %r13,%rax
mov    0x18(%r14),%ecx
cmp    %rcx,%rax
jg     399d1 <do_barray_io+0xa1>
mov    %rax,%rcx
mov    0x1c(%r14),%eax
lea    (%rax,%r13,1),%r8
mov    0x20(%r14),%eax
sub    %r8,%rax
cmp    %rcx,%rax
jg     399e8 <do_barray_io+0xb8>
mov    %rax,%rcx
mov    0x8(%r14),%ebx
sub    %r8,%rbx
cmp    %rcx,%rbx
jle    399f7 <do_barray_io+0xc7>
mov    %rcx,%rbx
test   %rbx,%rbx
jle    39a1f <do_barray_io+0xef>
imul   %r15,%rbx
test   %edx,%edx
jne    3997a <do_barray_io+0x4a>
mov    (%r14),%rax
mov    (%rax,%r13,8),%rdx
mov    (%rsi),%rax
mov    %r12,%rcx
mov    %rbx,%r8
callq  *%rax
jmpq   3998d <do_barray_io+0x5d>
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
leaveq 
retq   
data16 nopw %cs:0x0(%rax,%rax,1)

0000000000039a40 <access_virt_sarray>:
push   %rbp
mov    %rsp,%rbp
sub    $0x30,%rsp
mov    %rbx,-0x8(%rbp)
mov    %r12,-0x10(%rbp)
mov    %r13,-0x18(%rbp)
mov    %r14,-0x20(%rbp)
mov    %r15,-0x28(%rbp)
lea    (%rcx,%rdx,1),%r9d
mov    0x8(%rsi),%eax
cmp    %r9d,%eax
jb     39a95 <access_virt_sarray+0x55>
cmp    0x10(%rsi),%ecx
ja     39a95 <access_virt_sarray+0x55>
mov    (%rsi),%rax
test   %rax,%rax
je     39a95 <access_virt_sarray+0x55>
mov    %r15,%rax
mov    %rdi,%r15
mov    %r13,%rcx
mov    %r9,%r13
mov    %r12,%r9
mov    %rsi,%r12
mov    %rbx,%r10
mov    %rdx,%rbx
mov    %r14,%r11
mov    %r8,%r14
jmp    39aca <access_virt_sarray+0x8a>
mov    (%rdi),%rax
movl   $0x16,0x28(%rax)
mov    (%rdi),%rax
mov    (%rax),%rax
mov    %rdx,%rbx
mov    %rsi,%r12
mov    %r9,%r13
mov    %r8,%r14
mov    %rdi,%r15
callq  *%rax
mov    -0x28(%rbp),%rax
mov    -0x20(%rbp),%r11
mov    -0x18(%rbp),%rcx
mov    -0x10(%rbp),%r9
mov    -0x8(%rbp),%r10
mov    0x1c(%r12),%edx
cmp    %edx,%ebx
jb     39add <access_virt_sarray+0x9d>
add    0x14(%r12),%edx
cmp    %edx,%r13d
jbe    39b4d <access_virt_sarray+0x10d>
movslq 0x2c(%r12),%rax
test   %eax,%eax
jne    39afb <access_virt_sarray+0xbb>
mov    (%r15),%rax
movl   $0x45,0x28(%rax)
mov    (%r15),%rax
mov    (%rax),%rax
mov    %r15,%rdi
callq  *%rax
movslq 0x28(%r12),%rax
test   %eax,%eax
je     39b1d <access_virt_sarray+0xdd>
mov    $0x1,%edx
mov    %r15,%rdi
mov    %r12,%rsi
callq  39830 <do_sarray_io>
movl   $0x0,0x28(%r12)
xor    %edx,%edx
cmp    0x1c(%r12),%ebx
jbe    39b8a <access_virt_sarray+0x14a>
mov    %rbx,%rax
mov    %eax,0x1c(%r12)
mov    %r15,%rdi
mov    %r12,%rsi
callq  39830 <do_sarray_io>
mov    -0x28(%rbp),%rax
mov    -0x20(%rbp),%r11
mov    -0x18(%rbp),%rcx
mov    -0x10(%rbp),%r9
mov    -0x8(%rbp),%r10
mov    0x20(%r12),%edx
cmp    %edx,%r13d
ja     39b9f <access_virt_sarray+0x15f>
test   %r14d,%r14d
je     39b65 <access_virt_sarray+0x125>
movl   $0x1,0x28(%r12)
mov    0x1c(%r12),%edx
sub    %edx,%ebx
mov    %ebx,%edx
shl    $0x3,%rdx
add    (%r12),%rdx
mov    %r10,%rbx
mov    %r9,%r12
mov    %rcx,%r13
mov    %r11,%r14
mov    %rax,%r15
mov    %rdx,%rax
leaveq 
retq   
mov    %r13d,%eax
mov    0x14(%r12),%ecx
sub    %rcx,%rax
test   %rax,%rax
jns    39b29 <access_virt_sarray+0xe9>
mov    %rdx,%rax
jmp    39b29 <access_virt_sarray+0xe9>
cmp    %edx,%ebx
ja     39bed <access_virt_sarray+0x1ad>
test   %r14d,%r14d
je     39bad <access_virt_sarray+0x16d>
mov    %r13d,0x20(%r12)
movslq 0x24(%r12),%rsi
test   %esi,%esi
jne    39bf7 <access_virt_sarray+0x1b7>
test   %r14d,%r14d
jne    39b57 <access_virt_sarray+0x117>
mov    (%r15),%rax
movl   $0x16,0x28(%rax)
mov    (%r15),%rax
mov    (%rax),%rax
mov    %r15,%rdi
mov    %r9,%r15
mov    %r10,%r13
callq  *%rax
mov    %r15,%r9
mov    %r13,%r10
mov    -0x28(%rbp),%rax
mov    -0x20(%rbp),%r11
mov    -0x18(%rbp),%rcx
jmpq   39b57 <access_virt_sarray+0x117>
test   %r14d,%r14d
jne    39c13 <access_virt_sarray+0x1d3>
mov    %rbx,%rdx
jmp    39ba3 <access_virt_sarray+0x163>
mov    0xc(%r12),%ecx
mov    0x1c(%r12),%eax
sub    %eax,%r13d
mov    %rdx,%r15
sub    %eax,%r15d
mov    %r14,-0x30(%rbp)
mov    %rcx,%r14
jmp    39c5b <access_virt_sarray+0x21b>
mov    (%r15),%rax
movl   $0x16,0x28(%rax)
mov    (%r15),%rax
mov    (%rax),%rax
mov    %r15,%rdi
callq  *%rax
mov    -0x28(%rbp),%rax
mov    -0x20(%rbp),%r11
mov    -0x18(%rbp),%rcx
mov    -0x10(%rbp),%r9
mov    -0x8(%rbp),%r10
mov    %rbx,%rdx
jmpq   39ba3 <access_virt_sarray+0x163>
mov    (%r12),%rcx
mov    %r15d,%eax
mov    (%rcx,%rax,8),%rdi
mov    %r14,%rsi
callq  44d0 <jzero_far@plt>
add    $0x1,%r15d
cmp    %r13d,%r15d
jb     39c44 <access_virt_sarray+0x204>
mov    -0x30(%rbp),%r14
mov    -0x28(%rbp),%rax
mov    -0x20(%rbp),%r11
mov    -0x18(%rbp),%rcx
mov    -0x10(%rbp),%r9
mov    -0x8(%rbp),%r10
jmpq   39b57 <access_virt_sarray+0x117>
nopl   (%rax)

0000000000039c80 <access_virt_barray>:
push   %rbp
mov    %rsp,%rbp
sub    $0x30,%rsp
mov    %rbx,-0x8(%rbp)
mov    %r12,-0x10(%rbp)
mov    %r13,-0x18(%rbp)
mov    %r14,-0x20(%rbp)
mov    %r15,-0x28(%rbp)
lea    (%rcx,%rdx,1),%r9d
mov    0x8(%rsi),%eax
cmp    %r9d,%eax
jb     39cd5 <access_virt_barray+0x55>
cmp    0x10(%rsi),%ecx
ja     39cd5 <access_virt_barray+0x55>
mov    (%rsi),%rax
test   %rax,%rax
je     39cd5 <access_virt_barray+0x55>
mov    %r15,%rax
mov    %rdi,%r15
mov    %r13,%rcx
mov    %r9,%r13
mov    %r12,%r9
mov    %rsi,%r12
mov    %rbx,%r10
mov    %rdx,%rbx
mov    %r14,%r11
mov    %r8,%r14
jmp    39d0a <access_virt_barray+0x8a>
mov    (%rdi),%rax
movl   $0x16,0x28(%rax)
mov    (%rdi),%rax
mov    (%rax),%rax
mov    %rdx,%rbx
mov    %rsi,%r12
mov    %r9,%r13
mov    %r8,%r14
mov    %rdi,%r15
callq  *%rax
mov    -0x28(%rbp),%rax
mov    -0x20(%rbp),%r11
mov    -0x18(%rbp),%rcx
mov    -0x10(%rbp),%r9
mov    -0x8(%rbp),%r10
mov    0x1c(%r12),%edx
cmp    %edx,%ebx
jb     39d1d <access_virt_barray+0x9d>
add    0x14(%r12),%edx
cmp    %edx,%r13d
jbe    39d8d <access_virt_barray+0x10d>
movslq 0x2c(%r12),%rax
test   %eax,%eax
jne    39d3b <access_virt_barray+0xbb>
mov    (%r15),%rax
movl   $0x45,0x28(%rax)
mov    (%r15),%rax
mov    (%rax),%rax
mov    %r15,%rdi
callq  *%rax
movslq 0x28(%r12),%rax
test   %eax,%eax
je     39d5d <access_virt_barray+0xdd>
mov    $0x1,%edx
mov    %r15,%rdi
mov    %r12,%rsi
callq  39930 <do_barray_io>
movl   $0x0,0x28(%r12)
xor    %edx,%edx
cmp    0x1c(%r12),%ebx
jbe    39dca <access_virt_barray+0x14a>
mov    %rbx,%rax
mov    %eax,0x1c(%r12)
mov    %r15,%rdi
mov    %r12,%rsi
callq  39930 <do_barray_io>
mov    -0x28(%rbp),%rax
mov    -0x20(%rbp),%r11
mov    -0x18(%rbp),%rcx
mov    -0x10(%rbp),%r9
mov    -0x8(%rbp),%r10
mov    0x20(%r12),%edx
cmp    %edx,%r13d
ja     39ddf <access_virt_barray+0x15f>
test   %r14d,%r14d
je     39da5 <access_virt_barray+0x125>
movl   $0x1,0x28(%r12)
mov    0x1c(%r12),%edx
sub    %edx,%ebx
mov    %ebx,%edx
shl    $0x3,%rdx
add    (%r12),%rdx
mov    %r10,%rbx
mov    %r9,%r12
mov    %rcx,%r13
mov    %r11,%r14
mov    %rax,%r15
mov    %rdx,%rax
leaveq 
retq   
mov    %r13d,%eax
mov    0x14(%r12),%ecx
sub    %rcx,%rax
test   %rax,%rax
jns    39d69 <access_virt_barray+0xe9>
mov    %rdx,%rax
jmp    39d69 <access_virt_barray+0xe9>
cmp    %edx,%ebx
ja     39e2d <access_virt_barray+0x1ad>
test   %r14d,%r14d
je     39ded <access_virt_barray+0x16d>
mov    %r13d,0x20(%r12)
movslq 0x24(%r12),%rsi
test   %esi,%esi
jne    39e37 <access_virt_barray+0x1b7>
test   %r14d,%r14d
jne    39d97 <access_virt_barray+0x117>
mov    (%r15),%rax
movl   $0x16,0x28(%rax)
mov    (%r15),%rax
mov    (%rax),%rax
mov    %r15,%rdi
mov    %r9,%r15
mov    %r10,%r13
callq  *%rax
mov    %r15,%r9
mov    %r13,%r10
mov    -0x28(%rbp),%rax
mov    -0x20(%rbp),%r11
mov    -0x18(%rbp),%rcx
jmpq   39d97 <access_virt_barray+0x117>
test   %r14d,%r14d
jne    39e57 <access_virt_barray+0x1d7>
mov    %rbx,%rdx
jmp    39de3 <access_virt_barray+0x163>
mov    0xc(%r12),%eax
shl    $0x7,%rax
mov    0x1c(%r12),%ecx
sub    %ecx,%r13d
mov    %rdx,%r15
sub    %ecx,%r15d
mov    %r14,-0x30(%rbp)
mov    %rax,%r14
jmp    39e9f <access_virt_barray+0x21f>
mov    (%r15),%rax
movl   $0x16,0x28(%rax)
mov    (%r15),%rax
mov    (%rax),%rax
mov    %r15,%rdi
callq  *%rax
mov    -0x28(%rbp),%rax
mov    -0x20(%rbp),%r11
mov    -0x18(%rbp),%rcx
mov    -0x10(%rbp),%r9
mov    -0x8(%rbp),%r10
mov    %rbx,%rdx
jmpq   39de3 <access_virt_barray+0x163>
mov    (%r12),%rcx
mov    %r15d,%eax
mov    (%rcx,%rax,8),%rdi
mov    %r14,%rsi
callq  44d0 <jzero_far@plt>
add    $0x1,%r15d
cmp    %r13d,%r15d
jb     39e88 <access_virt_barray+0x208>
mov    -0x30(%rbp),%r14
mov    -0x28(%rbp),%rax
mov    -0x20(%rbp),%r11
mov    -0x18(%rbp),%rcx
mov    -0x10(%rbp),%r9
mov    -0x8(%rbp),%r10
jmpq   39d97 <access_virt_barray+0x117>
data16 nopw %cs:0x0(%rax,%rax,1)
nopl   0x0(%rax)

0000000000039ed0 <free_pool>:
push   %rbp
mov    %rsp,%rbp
sub    $0x30,%rsp
mov    %r13,-0x8(%rbp)
mov    %r14,-0x10(%rbp)
mov    %r15,-0x18(%rbp)
mov    0x8(%rdi),%r13
mov    %r13,-0x28(%rbp)
test   %esi,%esi
js     39f00 <free_pool+0x30>
cmp    $0x1,%esi
jg     39f00 <free_pool+0x30>
mov    %r12,%r14
mov    %rdi,%r12
mov    %rsi,%r15
jmp    39f21 <free_pool+0x51>
mov    (%rdi),%rax
movl   $0xe,0x28(%rax)
mov    (%rdi),%rax
mov    %esi,0x2c(%rax)
mov    (%rdi),%rax
mov    (%rax),%rax
mov    %r12,%r14
mov    %rsi,%r15
mov    %rdi,%r12
callq  *%rax
cmp    $0x1,%r15d
je     39f42 <free_pool+0x72>
movslq %r15d,%rax
mov    %rax,-0x28(%rbp)
mov    0x78(%r13,%rax,8),%rsi
movq   $0x0,0x78(%r13,%rax,8)
mov    %r14,-0x20(%rbp)
jmp    39f7e <free_pool+0xae>
mov    0x88(%r13),%r13
mov    %r15,-0x20(%rbp)
jmp    39fb8 <free_pool+0xe8>
mov    (%rsi),%r15
mov    0x10(%rsi),%rcx
mov    0x8(%rsi),%rax
lea    0x18(%rcx,%rax,1),%r14
mov    %r12,%rdi
mov    %r14,%rdx
callq  4180 <jpeg_free_large@plt>
mov    0x98(%r13),%rax
sub    %r14,%rax
mov    %rax,0x98(%r13)
mov    %r15,%rsi
test   %rsi,%rsi
jne    39f4f <free_pool+0x7f>
mov    -0x28(%rbp),%rax
mov    0x68(%r13,%rax,8),%rsi
movq   $0x0,0x68(%r13,%rax,8)
jmp    3a004 <free_pool+0x134>
movslq 0x2c(%r13),%rax
test   %eax,%eax
je     39fb4 <free_pool+0xe4>
movl   $0x0,0x2c(%r13)
mov    0x48(%r13),%rax
lea    0x38(%r13),%rsi
mov    %r12,%rdi
callq  *%rax
mov    0x30(%r13),%r13
test   %r13,%r13
jne    39f97 <free_pool+0xc7>
mov    -0x28(%rbp),%rax
mov    0x90(%rax),%r13
movq   $0x0,0x88(%rax)
jmp    3a03c <free_pool+0x16c>
mov    (%rsi),%r15
mov    0x10(%rsi),%rcx
mov    0x8(%rsi),%rax
lea    0x18(%rcx,%rax,1),%r14
mov    %r12,%rdi
mov    %r14,%rdx
callq  4340 <jpeg_free_small@plt>
mov    0x98(%r13),%rax
sub    %r14,%rax
mov    %rax,0x98(%r13)
mov    %r15,%rsi
test   %rsi,%rsi
jne    39fd5 <free_pool+0x105>
mov    -0x20(%rbp),%r12
mov    -0x18(%rbp),%r15
mov    -0x10(%rbp),%r14
mov    -0x8(%rbp),%r13
leaveq 
retq   
movslq 0x2c(%r13),%rax
test   %eax,%eax
je     3a038 <free_pool+0x168>
movl   $0x0,0x2c(%r13)
mov    0x48(%r13),%rax
lea    0x38(%r13),%rsi
mov    %r12,%rdi
callq  *%rax
mov    0x30(%r13),%r13
test   %r13,%r13
jne    3a01b <free_pool+0x14b>
mov    -0x28(%rbp),%r13
movq   $0x0,0x90(%r13)
mov    -0x20(%rbp),%r15
jmpq   39f27 <free_pool+0x57>
nopl   0x0(%rax)

000000000003a060 <self_destruct>:
push   %rbp
mov    %rsp,%rbp
sub    $0x10,%rsp
mov    %r14,-0x8(%rbp)
mov    %r15,-0x10(%rbp)
mov    %rdi,%r14
mov    $0x1,%r15d
jmp    3a08a <self_destruct+0x2a>
mov    %r14,%rdi
mov    %r15,%rsi
callq  39ed0 <free_pool>
add    $0xffffffff,%r15d
test   %r15d,%r15d
jns    3a07b <self_destruct+0x1b>
mov    0x8(%r14),%rsi
mov    $0xa8,%edx
mov    %r14,%rdi
callq  4340 <jpeg_free_small@plt>
mov    %r14,%rdi
movq   $0x0,0x8(%rdi)
callq  4350 <jpeg_mem_term@plt>
mov    -0x10(%rbp),%r15
mov    -0x8(%rbp),%r14
leaveq 
retq   
nopw   0x0(%rax,%rax,1)

000000000003a0c0 <jpeg_get_small>:
push   %rbp
mov    %rsp,%rbp
mov    %rsi,%rdi
callq  4320 <malloc@plt>
leaveq 
retq   
xchg   %ax,%ax

000000000003a0d0 <jpeg_free_small>:
push   %rbp
mov    %rsp,%rbp
mov    %rsi,%rdi
callq  4060 <free@plt>
leaveq 
retq   
xchg   %ax,%ax

000000000003a0e0 <jpeg_get_large>:
push   %rbp
mov    %rsp,%rbp
mov    %rsi,%rdi
callq  4320 <malloc@plt>
leaveq 
retq   
xchg   %ax,%ax

000000000003a0f0 <jpeg_free_large>:
push   %rbp
mov    %rsp,%rbp
mov    %rsi,%rdi
callq  4060 <free@plt>
leaveq 
retq   
xchg   %ax,%ax

000000000003a100 <jpeg_mem_available>:
push   %rbp
mov    %rsp,%rbp
mov    0x8(%rdi),%rax
mov    0x58(%rax),%rax
test   %rax,%rax
jne    3a116 <jpeg_mem_available+0x16>
mov    %rdx,%rax
leaveq 
retq   
cmp    %rax,%rcx
jb     3a11f <jpeg_mem_available+0x1f>
xor    %eax,%eax
leaveq 
retq   
sub    %rcx,%rax
leaveq 
retq   
data16 nopw %cs:0x0(%rax,%rax,1)
nop

000000000003a130 <jpeg_open_backing_store>:
push   %rbp
mov    %rsp,%rbp
mov    (%rdi),%rax
movl   $0x31,0x28(%rax)
mov    (%rdi),%rax
mov    (%rax),%rax
callq  *%rax
leaveq 
retq   
nopl   0x0(%rax,%rax,1)

000000000003a150 <jpeg_mem_init>:
push   %rbp
mov    %rsp,%rbp
xor    %eax,%eax
leaveq 
retq   
nopl   0x0(%rax,%rax,1)

000000000003a160 <jpeg_mem_term>:
push   %rbp
mov    %rsp,%rbp
leaveq 
retq   
nopw   %cs:0x0(%rax,%rax,1)

000000000003a170 <jinit_arith_encoder>:
push   %rbp
mov    %rsp,%rbp
sub    $0x10,%rsp
mov    %r15,-0x8(%rbp)
mov    0x8(%rdi),%rax
mov    (%rax),%rax
mov    $0x1,%esi
mov    $0x170,%edx
mov    %rdi,%r15
callq  *%rax
mov    %rax,0x1f0(%r15)
lea    0x17c0(%rip),%rcx        # 3b960 <start_pass>
mov    %rcx,(%rax)
lea    0x96(%rip),%rcx        # 3a240 <finish_pass>
mov    %rcx,0x10(%rax)
xor    %ecx,%ecx
jmp    3a1cd <jinit_arith_encoder+0x5d>
movslq %ecx,%rdx
movq   $0x0,0x68(%rax,%rdx,8)
movq   $0x0,0xe8(%rax,%rdx,8)
add    $0x1,%ecx
cmp    $0xf,%ecx
jle    3a1b2 <jinit_arith_encoder+0x42>
movb   $0x71,0x168(%rax)
mov    -0x8(%rbp),%r15
leaveq 
retq   
nop

000000000003a1e0 <emit_byte>:
push   %rbp
mov    %rsp,%rbp
sub    $0x10,%rsp
mov    0x28(%rsi),%rcx
mov    (%rcx),%rax
lea    0x1(%rax),%rdx
mov    %rdx,(%rcx)
mov    %dil,(%rax)
mov    0x8(%rcx),%rax
add    $0xffffffffffffffff,%rax
mov    %rax,0x8(%rcx)
test   %rax,%rax
je     3a20c <emit_byte+0x2c>
leaveq 
retq   
mov    %rsi,%rdi
mov    %r15,-0x8(%rbp)
mov    %rsi,%r15
callq  *0x18(%rcx)
test   %eax,%eax
je     3a223 <emit_byte+0x43>
mov    -0x8(%rbp),%r15
leaveq 
retq   
mov    (%r15),%rax
movl   $0x18,0x28(%rax)
mov    (%r15),%rax
mov    (%rax),%rax
mov    %r15,%rdi
callq  *%rax
mov    -0x8(%rbp),%r15
leaveq 
retq   
xchg   %ax,%ax

000000000003a240 <finish_pass>:
push   %rbp
mov    %rsp,%rbp
sub    $0x20,%rsp
mov    %r15,-0x18(%rbp)
mov    %r14,-0x10(%rbp)
mov    0x1f0(%rdi),%rsi
mov    0x18(%rsi),%rcx
mov    0x20(%rsi),%rax
lea    -0x1(%rcx,%rax,1),%rdx
mov    $0xffff0000,%eax
and    %rax,%rdx
cmp    %rcx,%rdx
jge    3a278 <finish_pass+0x38>
add    $0x8000,%rdx
mov    %r13,%rax
mov    %r12,%r13
mov    %rdi,%r12
mov    %r14,%r8
mov    %rsi,%r14
mov    %r15,%rsi
mov    0x38(%r14),%ecx
shl    %cl,%rdx
mov    %rdx,0x18(%r14)
xor    %r15d,%r15d
mov    $0xf8000000,%ecx
and    %rcx,%rdx
test   %rdx,%rdx
jg     3a316 <finish_pass+0xd6>
movslq 0x3c(%r14),%rcx
test   %ecx,%ecx
je     3a3b0 <finish_pass+0x170>
test   %ecx,%ecx
jle    3a3bc <finish_pass+0x17c>
mov    0x30(%r14),%rcx
test   %rcx,%rcx
je     3a2ea <finish_pass+0xaa>
mov    %rax,-0x20(%rbp)
mov    %r15,%rdi
mov    %r12,%rsi
callq  3a1e0 <emit_byte>
mov    0x30(%r14),%rax
add    $0xffffffffffffffff,%rax
mov    %rax,0x30(%r14)
test   %rax,%rax
jne    3a2c6 <finish_pass+0x86>
mov    -0x20(%rbp),%rax
mov    -0x10(%rbp),%r8
movslq 0x3c(%r14),%rdi
mov    %r12,%rsi
mov    %r12,-0x20(%rbp)
mov    %rax,%r12
mov    %r8,%r15
callq  3a1e0 <emit_byte>
mov    %r12,%rax
mov    %r15,%r8
xor    %r15d,%r15d
mov    -0x20(%rbp),%r12
mov    -0x18(%rbp),%rsi
jmpq   3a3bc <finish_pass+0x17c>
movslq 0x3c(%r14),%rcx
test   %ecx,%ecx
js     3a37a <finish_pass+0x13a>
mov    0x30(%r14),%rcx
test   %rcx,%rcx
je     3a34b <finish_pass+0x10b>
mov    %rax,-0x20(%rbp)
mov    %r15,%rdi
mov    %r12,%rsi
callq  3a1e0 <emit_byte>
mov    0x30(%r14),%rax
add    $0xffffffffffffffff,%rax
mov    %rax,0x30(%r14)
test   %rax,%rax
jne    3a32b <finish_pass+0xeb>
mov    -0x20(%rbp),%rax
movslq 0x3c(%r14),%rdi
add    $0x1,%edi
mov    %rax,%r15
mov    %r12,%rsi
callq  3a1e0 <emit_byte>
movslq 0x3c(%r14),%rax
cmp    $0xfe,%eax
je     3a41e <finish_pass+0x1de>
mov    %r15,%rax
mov    -0x10(%rbp),%r8
xor    %r15d,%r15d
mov    -0x18(%rbp),%rsi
mov    0x30(%r14),%rcx
add    0x28(%r14),%rcx
mov    %rcx,0x30(%r14)
movq   $0x0,0x28(%r14)
mov    0x18(%r14),%rcx
and    $0x7fff800,%rcx
test   %rcx,%rcx
jg     3a43b <finish_pass+0x1fb>
mov    %r13,%r12
mov    %rax,%r13
mov    %r8,%r14
mov    %rsi,%r15
leaveq 
retq   
mov    0x30(%r14),%rcx
add    $0x1,%rcx
mov    %rcx,0x30(%r14)
mov    0x28(%r14),%rcx
test   %rcx,%rcx
je     3a38e <finish_pass+0x14e>
mov    $0xff,%edx
mov    0x30(%r14),%rcx
test   %rcx,%rcx
jne    3a4bd <finish_pass+0x27d>
mov    %r13,-0x8(%rbp)
mov    %rax,-0x20(%rbp)
mov    %rdx,%r13
mov    %r13,%rdi
mov    %r12,%rsi
callq  3a1e0 <emit_byte>
mov    %r15,%rdi
mov    %r12,%rsi
callq  3a1e0 <emit_byte>
mov    0x28(%r14),%rax
add    $0xffffffffffffffff,%rax
mov    %rax,0x28(%r14)
test   %rax,%rax
jne    3a3e2 <finish_pass+0x1a2>
mov    -0x20(%rbp),%rax
mov    -0x8(%rbp),%r13
mov    -0x10(%rbp),%r8
mov    -0x18(%rbp),%rsi
jmpq   3a38e <finish_pass+0x14e>
xor    %edi,%edi
mov    %r12,%rsi
callq  3a1e0 <emit_byte>
mov    %r15,%rax
mov    -0x10(%rbp),%r8
xor    %r15d,%r15d
mov    -0x18(%rbp),%rsi
jmpq   3a37a <finish_pass+0x13a>
mov    0x30(%r14),%rcx
test   %rcx,%rcx
je     3a468 <finish_pass+0x228>
mov    %rax,-0x8(%rbp)
mov    %r15,%rdi
mov    %r12,%rsi
callq  3a1e0 <emit_byte>
mov    0x30(%r14),%rax
add    $0xffffffffffffffff,%rax
mov    %rax,0x30(%r14)
test   %rax,%rax
jne    3a448 <finish_pass+0x208>
mov    -0x8(%rbp),%rax
mov    0x18(%r14),%rcx
shr    $0x13,%rcx
movzbl %cl,%edi
mov    %rax,%r15
mov    %r12,%rsi
callq  3a1e0 <emit_byte>
mov    0x18(%r14),%rax
and    $0x7f80000,%rax
cmp    $0x7f80000,%rax
jne    3a49a <finish_pass+0x25a>
xor    %edi,%edi
mov    %r12,%rsi
callq  3a1e0 <emit_byte>
mov    0x18(%r14),%rax
mov    %rax,%rcx
and    $0x7f800,%rcx
test   %rcx,%rcx
jg     3a4ec <finish_pass+0x2ac>
mov    %r13,%r12
mov    %r15,%r13
mov    -0x10(%rbp),%r14
mov    -0x18(%rbp),%r15
leaveq 
retq   
mov    %rax,-0x20(%rbp)
mov    %r15,%rdi
mov    %r12,%rsi
callq  3a1e0 <emit_byte>
mov    0x30(%r14),%rax
add    $0xffffffffffffffff,%rax
mov    %rax,0x30(%r14)
test   %rax,%rax
jne    3a4c1 <finish_pass+0x281>
mov    %r13,-0x8(%rbp)
mov    $0xff,%r13d
jmpq   3a3e2 <finish_pass+0x1a2>
shr    $0xb,%rax
movzbl %al,%edi
mov    %r12,%rsi
callq  3a1e0 <emit_byte>
mov    0x18(%r14),%rax
and    $0x7f800,%rax
cmp    $0x7f800,%rax
je     3a51d <finish_pass+0x2dd>
mov    %r13,%r12
mov    %r15,%r13
mov    -0x10(%rbp),%r14
mov    -0x18(%rbp),%r15
leaveq 
retq   
mov    %r12,%rsi
xor    %edi,%edi
callq  3a1e0 <emit_byte>
mov    %r13,%r12
mov    %r15,%r13
mov    -0x10(%rbp),%r14
mov    -0x18(%rbp),%r15
leaveq 
retq   
nopw   0x0(%rax,%rax,1)

000000000003a540 <arith_encode>:
push   %rbp
mov    %rsp,%rbp
sub    $0x30,%rsp
mov    0x33a79(%rip),%r8        # 6dfc8 <jpeg_aritab@@LIBJPEG_6.2+0x12870>
movzbl (%rsi),%ecx
mov    %rcx,%rax
and    $0x7f,%eax
movslq %eax,%rax
mov    (%r8,%rax,8),%r8
mov    %r8,%r10
sar    $0x10,%r10
mov    0x1f0(%rdi),%r11
mov    0x20(%r11),%rax
sub    %r10,%rax
mov    %rax,0x20(%r11)
mov    %rcx,%r9
shr    $0x7,%r9d
cmp    %edx,%r9d
jne    3a592 <arith_encode+0x52>
cmp    $0x7fff,%rax
jle    3a65f <arith_encode+0x11f>
leaveq 
retq   
cmp    %r10,%rax
jl     3a5a3 <arith_encode+0x63>
add    0x18(%r11),%rax
mov    %rax,0x18(%r11)
mov    %r10,0x20(%r11)
and    $0x80,%cl
lea    (%rcx,%r8,1),%eax
mov    %al,(%rsi)
mov    %rbx,-0x8(%rbp)
mov    %r12,-0x10(%rbp)
mov    %r13,-0x18(%rbp)
mov    %r14,-0x20(%rbp)
mov    %r15,-0x28(%rbp)
mov    %rdi,%r12
mov    %r11,%r13
movabs $0x7ffffffffffc0000,%rax
mov    $0xff,%r14d
xor    %ebx,%ebx
mov    0x20(%r13),%rcx
add    %rcx,%rcx
mov    %rcx,0x20(%r13)
mov    0x18(%r13),%rdx
lea    (%rdx,%rdx,1),%r15
mov    %r15,0x18(%r13)
movslq 0x38(%r13),%rcx
add    $0xffffffff,%ecx
mov    %ecx,0x38(%r13)
test   %ecx,%ecx
jne    3a745 <arith_encode+0x205>
sar    $0x13,%r15
cmp    $0xff,%r15
jg     3a6ae <arith_encode+0x16e>
and    %rax,%rdx
cmp    $0x3fc0000,%rdx
je     3a76c <arith_encode+0x22c>
movslq 0x3c(%r13),%rcx
test   %ecx,%ecx
je     3a77a <arith_encode+0x23a>
test   %ecx,%ecx
jle    3a786 <arith_encode+0x246>
mov    0x30(%r13),%rax
test   %rax,%rax
jne    3a7d6 <arith_encode+0x296>
movslq 0x3c(%r13),%rdi
mov    %r12,%rsi
callq  3a1e0 <emit_byte>
movabs $0x7ffffffffffc0000,%rax
jmpq   3a786 <arith_encode+0x246>
cmp    %r10,%rax
jge    3a670 <arith_encode+0x130>
add    0x18(%r11),%rax
mov    %rax,0x18(%r11)
mov    %r10,0x20(%r11)
and    $0x80,%cl
shr    $0x8,%r8
lea    (%rcx,%r8,1),%eax
mov    %al,(%rsi)
mov    %rbx,-0x8(%rbp)
mov    %r12,-0x10(%rbp)
mov    %r13,-0x18(%rbp)
mov    %r14,-0x20(%rbp)
mov    %r15,-0x28(%rbp)
mov    %rdi,%r12
mov    %r11,%r13
movabs $0x7ffffffffffc0000,%rax
mov    $0xff,%r14d
xor    %ebx,%ebx
jmpq   3a5d8 <arith_encode+0x98>
movslq 0x3c(%r13),%rcx
test   %ecx,%ecx
js     3a70f <arith_encode+0x1cf>
mov    0x30(%r13),%rcx
test   %rcx,%rcx
je     3a6e5 <arith_encode+0x1a5>
mov    %rbx,%rdi
mov    %r12,%rsi
callq  3a1e0 <emit_byte>
mov    0x30(%r13),%rax
add    $0xffffffffffffffff,%rax
mov    %rax,0x30(%r13)
test   %rax,%rax
jne    3a6bf <arith_encode+0x17f>
movabs $0x7ffffffffffc0000,%rax
movslq 0x3c(%r13),%rdi
add    $0x1,%edi
mov    %rax,%r14
mov    %r12,%rsi
callq  3a1e0 <emit_byte>
movslq 0x3c(%r13),%rax
cmp    $0xfe,%eax
je     3a7f7 <arith_encode+0x2b7>
mov    %r14,%rax
mov    $0xff,%r14d
mov    0x30(%r13),%rcx
add    0x28(%r13),%rcx
mov    %rcx,0x30(%r13)
movq   $0x0,0x28(%r13)
movzbl %r15b,%ecx
mov    %ecx,0x3c(%r13)
mov    0x18(%r13),%rcx
and    $0x7ffff,%rcx
mov    %rcx,0x18(%r13)
movslq 0x38(%r13),%rcx
add    $0x8,%ecx
mov    %ecx,0x38(%r13)
mov    0x20(%r13),%rcx
cmp    $0x7fff,%rcx
jle    3a5d8 <arith_encode+0x98>
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
leaveq 
retq   
mov    0x28(%r13),%rcx
add    $0x1,%rcx
mov    %rcx,0x28(%r13)
jmp    3a72b <arith_encode+0x1eb>
mov    0x30(%r13),%rcx
add    $0x1,%rcx
mov    %rcx,0x30(%r13)
mov    0x28(%r13),%rcx
test   %rcx,%rcx
je     3a7c9 <arith_encode+0x289>
mov    0x30(%r13),%rax
test   %rax,%rax
jne    3a810 <arith_encode+0x2d0>
mov    %r14,%rdi
mov    %r12,%rsi
callq  3a1e0 <emit_byte>
mov    %rbx,%rdi
mov    %r12,%rsi
callq  3a1e0 <emit_byte>
mov    0x28(%r13),%rax
add    $0xffffffffffffffff,%rax
mov    %rax,0x28(%r13)
test   %rax,%rax
jne    3a798 <arith_encode+0x258>
movabs $0x7ffffffffffc0000,%rax
movzbl %r15b,%ecx
mov    %ecx,0x3c(%r13)
jmpq   3a72b <arith_encode+0x1eb>
mov    %rbx,%rdi
mov    %r12,%rsi
callq  3a1e0 <emit_byte>
mov    0x30(%r13),%rax
add    $0xffffffffffffffff,%rax
mov    %rax,0x30(%r13)
test   %rax,%rax
jne    3a7d6 <arith_encode+0x296>
jmpq   3a644 <arith_encode+0x104>
mov    %rbx,%rdi
mov    %r12,%rsi
callq  3a1e0 <emit_byte>
mov    %r14,%rax
mov    $0xff,%r14d
jmpq   3a70f <arith_encode+0x1cf>
mov    %rbx,%rdi
mov    %r12,%rsi
callq  3a1e0 <emit_byte>
mov    0x30(%r13),%rax
add    $0xffffffffffffffff,%rax
mov    %rax,0x30(%r13)
test   %rax,%rax
jne    3a810 <arith_encode+0x2d0>
jmpq   3a798 <arith_encode+0x258>
data16 nopw %cs:0x0(%rax,%rax,1)
nopl   0x0(%rax)

000000000003a840 <emit_restart>:
push   %rbp
mov    %rsp,%rbp
sub    $0x30,%rsp
mov    %r13,-0x18(%rbp)
mov    %r14,-0x20(%rbp)
mov    %r15,-0x28(%rbp)
mov    %rbx,-0x8(%rbp)
mov    %r12,-0x10(%rbp)
mov    %rsi,%rbx
mov    0x1f0(%rdi),%r14
mov    %rdi,%r13
callq  3a240 <finish_pass>
mov    $0xff,%edi
mov    %r13,%rsi
callq  3a1e0 <emit_byte>
lea    0xd0(%rbx),%edi
mov    %r13,%rsi
callq  3a1e0 <emit_byte>
xor    %ebx,%ebx
mov    $0x40,%r12d
mov    $0x100,%edx
mov    %rbx,%r15
jmpq   3a93c <emit_restart+0xfc>
movslq %r15d,%rsi
mov    0x148(%r13,%rsi,8),%rax
movslq 0x134(%r13),%rcx
test   %ecx,%ecx
je     3a8ca <emit_restart+0x8a>
movslq 0x19c(%r13),%rcx
test   %ecx,%ecx
jne    3a909 <emit_restart+0xc9>
movslq 0x1a4(%r13),%rcx
test   %ecx,%ecx
jne    3a909 <emit_restart+0xc9>
movslq 0x14(%rax),%rcx
mov    0x68(%r14,%rcx,8),%rdi
mov    %r12,%rdx
mov    %rax,%r12
mov    %rbx,%rax
mov    %rsi,%rbx
mov    %rax,%rsi
callq  41e0 <memset@plt>
movl   $0x0,0x40(%r14,%rbx,4)
movl   $0x0,0x50(%r14,%rbx,4)
mov    %r12,%rax
mov    $0x40,%r12d
mov    $0x100,%edx
xor    %ebx,%ebx
movslq 0x134(%r13),%rcx
test   %ecx,%ecx
je     3a91f <emit_restart+0xdf>
movslq 0x1a0(%r13),%rcx
test   %ecx,%ecx
je     3a938 <emit_restart+0xf8>
movslq 0x18(%rax),%rax
mov    0xe8(%r14,%rax,8),%rdi
mov    %rbx,%rsi
callq  41e0 <memset@plt>
mov    $0x100,%edx
add    $0x1,%r15d
movslq 0x144(%r13),%rax
cmp    %r15d,%eax
jg     3a89e <emit_restart+0x5e>
movq   $0x0,0x18(%r14)
movq   $0x10000,0x20(%r14)
movq   $0x0,0x28(%r14)
movq   $0x0,0x30(%r14)
movl   $0xb,0x38(%r14)
movl   $0xffffffff,0x3c(%r14)
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
leaveq 
retq   
data16 nopw %cs:0x0(%rax,%rax,1)
nopl   (%rax)

000000000003a9a0 <encode_mcu_DC_first>:
push   %rbp
mov    %rsp,%rbp
sub    $0x70,%rsp
mov    %rbx,-0x8(%rbp)
mov    %r12,-0x10(%rbp)
mov    %r13,-0x18(%rbp)
mov    %r14,-0x20(%rbp)
mov    %r15,-0x28(%rbp)
mov    %rsi,-0x60(%rbp)
mov    0x1f0(%rdi),%r15
mov    %r15,-0x58(%rbp)
mov    $0x1,%r13d
xor    %edx,%edx
mov    $0x4,%eax
mov    %rax,-0x40(%rbp)
mov    $0x8,%eax
mov    %rax,-0x38(%rbp)
mov    0x118(%rdi),%eax
test   %eax,%eax
jne    3a9fa <encode_mcu_DC_first+0x5a>
mov    %rdi,%rbx
mov    %rsi,%r12
mov    %rdx,%r14
jmp    3aa44 <encode_mcu_DC_first+0xa4>
mov    0x60(%r15),%eax
test   %eax,%eax
je     3aa69 <encode_mcu_DC_first+0xc9>
mov    %rdi,%rbx
mov    %rsi,%r12
jmpq   3aa96 <encode_mcu_DC_first+0xf6>
sar    %r12d
mov    %r12,%rax
and    %r15d,%eax
test   %eax,%eax
je     3aa1d <encode_mcu_DC_first+0x7d>
mov    %r13,%rdx
mov    %rbx,%rdi
mov    %r14,%rsi
callq  3a540 <arith_encode>
xor    %edx,%edx
mov    %r12,%rax
and    $0xfffffffe,%eax
test   %eax,%eax
jne    3aa0d <encode_mcu_DC_first+0x6d>
mov    -0x58(%rbp),%r15
mov    -0x68(%rbp),%r14
mov    -0x60(%rbp),%r12
add    $0x1,%r14d
movslq 0x170(%rbx),%rax
cmp    %r14d,%eax
jg     3aaa6 <encode_mcu_DC_first+0x106>
mov    %r13,%rax
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
leaveq 
retq   
mov    %rsi,%r12
mov    %rdx,%r14
movslq 0x64(%r15),%rsi
mov    %rdi,%rbx
callq  3a840 <emit_restart>
mov    0x118(%rbx),%eax
mov    %eax,0x60(%r15)
movslq 0x64(%r15),%rax
add    $0x1,%eax
and    $0x7,%eax
mov    %eax,0x64(%r15)
mov    %r14,%rdx
mov    0x60(%r15),%eax
add    $0xffffffff,%eax
mov    %eax,0x60(%r15)
mov    %rdx,%r14
jmp    3aa44 <encode_mcu_DC_first+0xa4>
movslq %r14d,%rcx
movslq 0x174(%rbx,%rcx,4),%r8
mov    0x148(%rbx,%r8,8),%rax
movslq 0x14(%rax),%r9
movslq 0x50(%r15,%r8,4),%rsi
add    0x68(%r15,%r9,8),%rsi
mov    (%r12,%rcx,8),%rax
movswq (%rax),%rax
mov    0x1a8(%rbx),%ecx
sar    %cl,%eax
movslq 0x40(%r15,%r8,4),%r10
cmp    %eax,%r10d
je     3ab38 <encode_mcu_DC_first+0x198>
mov    %eax,0x40(%r15,%r8,4)
mov    %rbx,%rdi
mov    %rsi,%rcx
mov    %r14,-0x68(%rbp)
mov    %r8,-0x48(%rbp)
mov    %r9,-0x30(%rbp)
mov    %r13,%rdx
mov    %rax,%r13
mov    %r10,%r12
mov    %rsi,%r14
mov    %rcx,%rsi
callq  3a540 <arith_encode>
mov    %r13,%rax
sub    %r12d,%eax
test   %eax,%eax
jg     3ab59 <encode_mcu_DC_first+0x1b9>
lea    0x1(%r14),%rsi
mov    %rbx,%rdi
mov    $0x1,%edx
callq  3a540 <arith_encode>
sub    %r13d,%r12d
add    $0x3,%r14
xor    %edx,%edx
pushq  -0x38(%rbp)
popq   -0x50(%rbp)
jmp    3ab7b <encode_mcu_DC_first+0x1db>
mov    %r8,%r13
mov    %rbx,%rdi
callq  3a540 <arith_encode>
movl   $0x0,0x50(%r15,%r13,4)
xor    %edx,%edx
mov    $0x1,%r13d
jmpq   3aa40 <encode_mcu_DC_first+0xa0>
mov    %rax,%r12
lea    0x1(%r14),%rsi
mov    %rbx,%rdi
xor    %r13d,%r13d
mov    %r13,%rdx
callq  3a540 <arith_encode>
add    $0x2,%r14
mov    %r13,%rdx
pushq  -0x40(%rbp)
popq   -0x50(%rbp)
mov    -0x50(%rbp),%rcx
mov    -0x48(%rbp),%rax
mov    %ecx,0x50(%r15,%rax,4)
lea    -0x1(%r12),%r13d
mov    %r13,-0x50(%rbp)
test   %r13d,%r13d
jne    3ab9e <encode_mcu_DC_first+0x1fe>
mov    %rax,%r13
mov    %rdx,%r12
jmp    3abf0 <encode_mcu_DC_first+0x250>
mov    %r14,%rsi
mov    %rbx,%rdi
mov    $0x1,%r12d
mov    %r12,%rdx
callq  3a540 <arith_encode>
mov    -0x30(%rbp),%rax
mov    0x68(%r15,%rax,8),%r14
add    $0x14,%r14
mov    %r12,%r15
jmp    3abdc <encode_mcu_DC_first+0x23c>
mov    %rbx,%rdi
mov    %r14,%rsi
mov    %r15,%rdx
callq  3a540 <arith_encode>
sar    %r13d
add    $0x1,%r14
add    %r12d,%r12d
mov    %r13,%rax
and    $0xfffffffe,%eax
test   %eax,%eax
jne    3abc4 <encode_mcu_DC_first+0x224>
mov    -0x58(%rbp),%r15
xor    %edx,%edx
mov    -0x48(%rbp),%r13
mov    %rbx,%rdi
mov    %r14,%rsi
callq  3a540 <arith_encode>
mov    %r13,%rsi
mov    -0x30(%rbp),%rax
movzbl 0xc0(%rbx,%rax,1),%ecx
mov    $0x1,%r13d
mov    %r13,%rdx
shl    %cl,%rdx
sar    %rdx
cmp    %edx,%r12d
jl     3ac43 <encode_mcu_DC_first+0x2a3>
movzbl 0xd0(%rax,%rbx,1),%ecx
mov    %r13,%rax
shl    %cl,%rax
sar    %rax
cmp    %eax,%r12d
jle    3ac4c <encode_mcu_DC_first+0x2ac>
movslq 0x50(%r15,%rsi,4),%rax
add    $0x8,%eax
mov    %eax,0x50(%r15,%rsi,4)
jmp    3ac4c <encode_mcu_DC_first+0x2ac>
movl   $0x0,0x50(%r15,%rsi,4)
add    $0xe,%r14
mov    -0x50(%rbp),%r15
xor    %edx,%edx
jmpq   3aa2a <encode_mcu_DC_first+0x8a>
nopl   0x0(%rax,%rax,1)

000000000003ac60 <encode_mcu_AC_first>:
push   %rbp
mov    %rsp,%rbp
sub    $0x80,%rsp
mov    %r13,-0x18(%rbp)
mov    %r14,-0x20(%rbp)
mov    %r15,-0x28(%rbp)
mov    0x1f0(%rdi),%rax
mov    %rax,-0x58(%rbp)
mov    0x118(%rdi),%ecx
test   %ecx,%ecx
jne    3ac97 <encode_mcu_AC_first+0x37>
mov    %r12,%r8
mov    %rbx,%r12
mov    %rdi,%rbx
jmp    3aceb <encode_mcu_AC_first+0x8b>
mov    0x60(%rax),%ecx
test   %ecx,%ecx
je     3aca9 <encode_mcu_AC_first+0x49>
mov    %r12,%r8
mov    %rbx,%r12
mov    %rdi,%rbx
jmp    3ace2 <encode_mcu_AC_first+0x82>
mov    %r12,%r13
mov    %rbx,%r12
mov    %rax,%r14
mov    %rsi,%r15
movslq 0x64(%r14),%rsi
mov    %rdi,%rbx
callq  3a840 <emit_restart>
mov    0x118(%rbx),%eax
mov    %eax,0x60(%r14)
movslq 0x64(%r14),%rax
add    $0x1,%eax
and    $0x7,%eax
mov    %eax,0x64(%r14)
mov    %r14,%rax
mov    %r15,%rsi
mov    %r13,%r8
mov    0x60(%rax),%ecx
add    $0xffffffff,%ecx
mov    %ecx,0x60(%rax)
mov    0x148(%rbx),%rcx
movslq 0x18(%rcx),%rdi
mov    %rdi,-0x60(%rbp)
mov    (%rsi),%r14
mov    %r14,-0x30(%rbp)
movslq 0x1a0(%rbx),%rsi
mov    0x332c9(%rip),%r13        # 6dfd8 <jpeg_natural_order@@LIBJPEG_6.2+0x129f4>
mov    %r13,-0x38(%rbp)
jmp    3ad38 <encode_mcu_AC_first+0xd8>
movslq %esi,%rcx
movslq 0x0(%r13,%rcx,4),%rcx
movswq (%r14,%rcx,2),%rdx
test   %dx,%dx
jns    3ad42 <encode_mcu_AC_first+0xe2>
neg    %edx
mov    0x1a8(%rbx),%ecx
sar    %cl,%edx
test   %edx,%edx
jne    3ad4e <encode_mcu_AC_first+0xee>
add    $0xffffffff,%esi
mov    %rsi,-0x78(%rbp)
test   %esi,%esi
jg     3ad15 <encode_mcu_AC_first+0xb5>
jmp    3ad4e <encode_mcu_AC_first+0xee>
mov    0x1a8(%rbx),%ecx
sar    %cl,%edx
test   %edx,%edx
je     3ad35 <encode_mcu_AC_first+0xd5>
movslq 0x19c(%rbx),%r15
xor    %edx,%edx
lea    0x168(%rax),%rcx
mov    %rcx,-0x40(%rbp)
mov    $0xbd,%ecx
mov    %rcx,-0x50(%rbp)
mov    $0xd9,%ecx
mov    %rcx,-0x48(%rbp)
mov    %r12,-0x8(%rbp)
mov    %r8,-0x10(%rbp)
jmp    3adbd <encode_mcu_AC_first+0x15d>
sar    %r12d
mov    %r12,%rax
and    %r14d,%eax
test   %eax,%eax
je     3ad8e <encode_mcu_AC_first+0x12e>
mov    %r13,%rdx
mov    %rbx,%rdi
mov    %r15,%rsi
callq  3a540 <arith_encode>
xor    %edx,%edx
mov    %r12,%rax
and    $0xfffffffe,%eax
test   %eax,%eax
jne    3ad7e <encode_mcu_AC_first+0x11e>
mov    -0x30(%rbp),%r14
mov    -0x38(%rbp),%r13
mov    -0x70(%rbp),%r15
mov    -0x60(%rbp),%rdi
mov    -0x58(%rbp),%rax
mov    -0x78(%rbp),%rsi
cmp    %esi,%r15d
jle    3ade6 <encode_mcu_AC_first+0x186>
cmp    0x1a0(%rbx),%r15d
jle    3ae05 <encode_mcu_AC_first+0x1a5>
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
mov    $0x1,%eax
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
leaveq 
retq   
lea    -0x3(%r15,%r15,2),%ecx
movslq %ecx,%r12
add    0xe8(%rax,%rdi,8),%r12
mov    %rbx,%rdi
mov    %r12,%rsi
callq  3a540 <arith_encode>
xor    %edx,%edx
jmp    3ae61 <encode_mcu_AC_first+0x201>
lea    -0x3(%r15,%r15,2),%ecx
movslq %ecx,%rsi
add    0xe8(%rax,%rdi,8),%rsi
mov    %rbx,%rdi
mov    $0x1,%r12d
mov    %r12,%rdx
callq  3a540 <arith_encode>
mov    %r12,%rax
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
leaveq 
retq   
mov    0x1a8(%rbx),%ecx
sar    %cl,%eax
test   %eax,%eax
jne    3aeb9 <encode_mcu_AC_first+0x259>
mov    %r8,%r15
lea    0x1(%r12),%rsi
mov    %rbx,%rdi
callq  3a540 <arith_encode>
add    $0x3,%r12
xor    %edx,%edx
lea    0x1(%r15),%r8d
movslq %r15d,%rax
movslq 0x0(%r13,%rax,4),%rax
movswq (%r14,%rax,2),%rax
test   %ax,%ax
jns    3ae3f <encode_mcu_AC_first+0x1df>
neg    %eax
mov    0x1a8(%rbx),%ecx
sar    %cl,%eax
test   %eax,%eax
je     3af19 <encode_mcu_AC_first+0x2b9>
lea    0x1(%r12),%rsi
mov    %rbx,%rdi
mov    $0x1,%r13d
mov    %r13,%rdx
mov    %r8,-0x70(%rbp)
mov    %rax,%r14
callq  3a540 <arith_encode>
mov    %rbx,%rdi
mov    -0x40(%rbp),%rsi
mov    %r13,%rdx
callq  3a540 <arith_encode>
xor    %edx,%edx
jmp    3aef0 <encode_mcu_AC_first+0x290>
lea    0x1(%r12),%rsi
mov    %rbx,%rdi
mov    $0x1,%ecx
mov    %r8,-0x70(%rbp)
mov    %rdx,%r13
mov    %rcx,%rdx
mov    %rax,%r14
callq  3a540 <arith_encode>
mov    %rbx,%rdi
mov    -0x40(%rbp),%rsi
mov    %r13,%rdx
callq  3a540 <arith_encode>
mov    %r13,%rdx
mov    $0x1,%r13d
add    $0x2,%r12
add    $0xffffffff,%r14d
test   %r14d,%r14d
jne    3af21 <encode_mcu_AC_first+0x2c1>
mov    %r12,%r15
mov    %rdx,%r12
mov    %rbx,%rdi
mov    %r15,%rsi
callq  3a540 <arith_encode>
add    $0xe,%r15
xor    %edx,%edx
jmpq   3ad9b <encode_mcu_AC_first+0x13b>
mov    %r8,%r15
jmpq   3ae4e <encode_mcu_AC_first+0x1ee>
mov    %rbx,%rdi
mov    %r12,%rsi
mov    %r13,%rdx
callq  3a540 <arith_encode>
mov    %r14,%rax
and    $0xfffffffe,%eax
test   %eax,%eax
jne    3af43 <encode_mcu_AC_first+0x2e3>
mov    %r12,%r15
xor    %edx,%edx
mov    %r13,%r12
jmp    3af03 <encode_mcu_AC_first+0x2a3>
mov    %r12,%rsi
mov    %rbx,%rdi
mov    %r13,%rdx
callq  3a540 <arith_encode>
mov    -0x60(%rbp),%rdx
mov    -0x58(%rbp),%rax
mov    0xe8(%rax,%rdx,8),%rcx
movzbl 0xe0(%rbx,%rdx,1),%eax
cmp    %eax,%r15d
jle    3af76 <encode_mcu_AC_first+0x316>
pushq  -0x48(%rbp)
popq   -0x68(%rbp)
jmp    3af7c <encode_mcu_AC_first+0x31c>
pushq  -0x50(%rbp)
popq   -0x68(%rbp)
mov    %r14,%rdx
sar    %edx
mov    -0x68(%rbp),%rax
lea    (%rax,%rcx,1),%r15
mov    %r14,-0x68(%rbp)
mov    %rdx,%r14
mov    $0x2,%r12d
jmp    3afb0 <encode_mcu_AC_first+0x350>
mov    %rbx,%rdi
mov    %r15,%rsi
mov    %r13,%rdx
callq  3a540 <arith_encode>
sar    %r14d
add    $0x1,%r15
add    %r12d,%r12d
mov    %r14,%rax
and    $0xfffffffe,%eax
test   %eax,%eax
jne    3af98 <encode_mcu_AC_first+0x338>
mov    -0x68(%rbp),%r14
xor    %edx,%edx
jmpq   3af03 <encode_mcu_AC_first+0x2a3>
data16 nopw %cs:0x0(%rax,%rax,1)

000000000003afd0 <encode_mcu_DC_refine>:
push   %rbp
mov    %rsp,%rbp
sub    $0x30,%rsp
mov    %r13,-0x18(%rbp)
mov    %r14,-0x20(%rbp)
mov    %r15,-0x28(%rbp)
mov    %rbx,-0x8(%rbp)
mov    %r12,-0x10(%rbp)
mov    0x1f0(%rdi),%r13
mov    0x118(%rdi),%eax
test   %eax,%eax
jne    3b005 <encode_mcu_DC_refine+0x35>
mov    %rdi,%rbx
mov    %rsi,%r12
jmp    3b047 <encode_mcu_DC_refine+0x77>
mov    0x60(%r13),%eax
test   %eax,%eax
je     3b015 <encode_mcu_DC_refine+0x45>
mov    %rdi,%rbx
mov    %rsi,%r12
jmp    3b03c <encode_mcu_DC_refine+0x6c>
mov    %rsi,%r12
movslq 0x64(%r13),%rsi
mov    %rdi,%rbx
callq  3a840 <emit_restart>
mov    0x118(%rbx),%eax
mov    %eax,0x60(%r13)
movslq 0x64(%r13),%rax
add    $0x1,%eax
and    $0x7,%eax
mov    %eax,0x64(%r13)
mov    0x60(%r13),%eax
add    $0xffffffff,%eax
mov    %eax,0x60(%r13)
mov    0x1a8(%rbx),%ecx
add    $0x168,%r13
xor    %r14d,%r14d
jmp    3b07e <encode_mcu_DC_refine+0xae>
movslq %r14d,%rax
mov    (%r12,%rax,8),%rax
movswq (%rax),%rdx
sar    %cl,%edx
and    $0x1,%edx
mov    %rcx,%r15
mov    %rbx,%rdi
mov    %r13,%rsi
callq  3a540 <arith_encode>
add    $0x1,%r14d
mov    %r15,%rcx
movslq 0x170(%rbx),%rax
cmp    %r14d,%eax
jg     3b059 <encode_mcu_DC_refine+0x89>
mov    $0x1,%eax
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
leaveq 
retq   
data16 nopw %cs:0x0(%rax,%rax,1)

000000000003b0b0 <encode_mcu_AC_refine>:
push   %rbp
mov    %rsp,%rbp
sub    $0x50,%rsp
mov    %r13,-0x18(%rbp)
mov    %r14,-0x20(%rbp)
mov    %r15,-0x28(%rbp)
mov    0x1f0(%rdi),%rax
mov    %rax,-0x30(%rbp)
mov    0x118(%rdi),%ecx
test   %ecx,%ecx
jne    3b0e1 <encode_mcu_AC_refine+0x31>
mov    %rbx,%r8
mov    %rdi,%rbx
jmp    3b12f <encode_mcu_AC_refine+0x7f>
mov    0x60(%rax),%ecx
test   %ecx,%ecx
je     3b0f0 <encode_mcu_AC_refine+0x40>
mov    %rbx,%r8
mov    %rdi,%rbx
jmp    3b126 <encode_mcu_AC_refine+0x76>
mov    %rbx,%r13
mov    %rax,%r14
mov    %rsi,%r15
movslq 0x64(%r14),%rsi
mov    %rdi,%rbx
callq  3a840 <emit_restart>
mov    0x118(%rbx),%eax
mov    %eax,0x60(%r14)
movslq 0x64(%r14),%rax
add    $0x1,%eax
and    $0x7,%eax
mov    %eax,0x64(%r14)
mov    %r14,%rax
mov    %r15,%rsi
mov    %r13,%r8
mov    0x60(%rax),%ecx
add    $0xffffffff,%ecx
mov    %ecx,0x60(%rax)
mov    0x148(%rbx),%rcx
movslq 0x18(%rcx),%rdi
mov    %rdi,-0x38(%rbp)
mov    (%rsi),%r13
movslq 0x1a0(%rbx),%rsi
mov    0x32e89(%rip),%r14        # 6dfd8 <jpeg_natural_order@@LIBJPEG_6.2+0x129f4>
jmp    3b174 <encode_mcu_AC_refine+0xc4>
movslq %esi,%rcx
movslq (%r14,%rcx,4),%rcx
movswq 0x0(%r13,%rcx,2),%rdx
test   %dx,%dx
jns    3b181 <encode_mcu_AC_refine+0xd1>
neg    %edx
mov    0x1a8(%rbx),%ecx
sar    %cl,%edx
test   %edx,%edx
jne    3b192 <encode_mcu_AC_refine+0xe2>
add    $0xffffffff,%esi
mov    %rsi,-0x50(%rbp)
test   %esi,%esi
jg     3b151 <encode_mcu_AC_refine+0xa1>
mov    %rsi,%r9
jmp    3b1bb <encode_mcu_AC_refine+0x10b>
mov    0x1a8(%rbx),%ecx
sar    %cl,%edx
test   %edx,%edx
je     3b171 <encode_mcu_AC_refine+0xc1>
mov    %rsi,%r9
jmp    3b1bb <encode_mcu_AC_refine+0x10b>
mov    %rsi,%r9
jmp    3b1bb <encode_mcu_AC_refine+0x10b>
movslq %r9d,%rcx
movslq (%r14,%rcx,4),%rcx
movswq 0x0(%r13,%rcx,2),%rdx
test   %dx,%dx
jns    3b1c6 <encode_mcu_AC_refine+0x116>
neg    %edx
mov    0x1a4(%rbx),%ecx
sar    %cl,%edx
test   %edx,%edx
jne    3b1d2 <encode_mcu_AC_refine+0x122>
add    $0xffffffff,%r9d
mov    %r9,-0x48(%rbp)
test   %r9d,%r9d
jg     3b197 <encode_mcu_AC_refine+0xe7>
jmp    3b1d2 <encode_mcu_AC_refine+0x122>
mov    0x1a4(%rbx),%ecx
sar    %cl,%edx
test   %edx,%edx
je     3b1b7 <encode_mcu_AC_refine+0x107>
movslq 0x19c(%rbx),%r15
lea    0x168(%rax),%rcx
mov    %rcx,-0x40(%rbp)
xor    %edx,%edx
mov    %r8,-0x8(%rbp)
mov    %r12,-0x10(%rbp)
jmp    3b21c <encode_mcu_AC_refine+0x16c>
lea    0x2(%r12),%rsi
and    $0x1,%eax
mov    %rdx,%r12
mov    %rax,%rdx
mov    %r8,%r15
mov    %rbx,%rdi
callq  3a540 <arith_encode>
mov    %r12,%rdx
mov    -0x48(%rbp),%r9
mov    -0x38(%rbp),%rdi
mov    -0x30(%rbp),%rax
mov    -0x50(%rbp),%rsi
cmp    %esi,%r15d
jle    3b245 <encode_mcu_AC_refine+0x195>
cmp    0x1a0(%rbx),%r15d
jle    3b269 <encode_mcu_AC_refine+0x1b9>
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
mov    $0x1,%eax
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
leaveq 
retq   
lea    -0x3(%r15,%r15,2),%ecx
movslq %ecx,%r12
add    0xe8(%rax,%rdi,8),%r12
cmp    %r9d,%r15d
jle    3b2c9 <encode_mcu_AC_refine+0x219>
mov    %rbx,%rdi
mov    %r12,%rsi
callq  3a540 <arith_encode>
xor    %edx,%edx
jmp    3b2c9 <encode_mcu_AC_refine+0x219>
lea    -0x3(%r15,%r15,2),%ecx
movslq %ecx,%rsi
add    0xe8(%rax,%rdi,8),%rsi
mov    %rbx,%rdi
mov    $0x1,%r12d
mov    %r12,%rdx
callq  3a540 <arith_encode>
mov    %r12,%rax
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
leaveq 
retq   
mov    0x1a8(%rbx),%ecx
sar    %cl,%eax
test   %eax,%eax
jne    3b33e <encode_mcu_AC_refine+0x28e>
mov    %r8,%r15
lea    0x1(%r12),%rsi
mov    %rbx,%rdi
callq  3a540 <arith_encode>
add    $0x3,%r12
xor    %edx,%edx
lea    0x1(%r15),%r8d
movslq %r15d,%rax
movslq (%r14,%rax,4),%rax
movswq 0x0(%r13,%rax,2),%rax
test   %ax,%ax
jns    3b2a3 <encode_mcu_AC_refine+0x1f3>
neg    %eax
mov    0x1a8(%rbx),%ecx
sar    %cl,%eax
test   %eax,%eax
je     3b38b <encode_mcu_AC_refine+0x2db>
mov    %rax,%rcx
and    $0xfffffffe,%ecx
test   %ecx,%ecx
jne    3b393 <encode_mcu_AC_refine+0x2e3>
lea    0x1(%r12),%rsi
mov    %r8,%r15
mov    %rbx,%rdi
mov    $0x1,%r12d
mov    %r12,%rdx
callq  3a540 <arith_encode>
mov    %r12,%rdx
mov    %rbx,%rdi
mov    -0x40(%rbp),%rsi
callq  3a540 <arith_encode>
mov    -0x48(%rbp),%r9
mov    -0x38(%rbp),%rdi
mov    -0x30(%rbp),%rax
mov    -0x50(%rbp),%rsi
xor    %edx,%edx
jmpq   3b21c <encode_mcu_AC_refine+0x16c>
mov    %rax,%rcx
and    $0xfffffffe,%ecx
test   %ecx,%ecx
jne    3b1f0 <encode_mcu_AC_refine+0x140>
lea    0x1(%r12),%rsi
mov    %rdx,%r12
mov    %r8,%r15
mov    %rbx,%rdi
mov    $0x1,%edx
callq  3a540 <arith_encode>
mov    %rbx,%rdi
mov    -0x40(%rbp),%rsi
mov    %r12,%rdx
callq  3a540 <arith_encode>
mov    %r12,%rdx
mov    -0x48(%rbp),%r9
mov    -0x38(%rbp),%rdi
mov    -0x30(%rbp),%rax
mov    -0x50(%rbp),%rsi
jmpq   3b21c <encode_mcu_AC_refine+0x16c>
mov    %r8,%r15
jmpq   3b2b6 <encode_mcu_AC_refine+0x206>
lea    0x2(%r12),%rsi
and    $0x1,%eax
mov    %rdx,%r12
mov    %rax,%rdx
mov    %r8,%r15
mov    %rbx,%rdi
callq  3a540 <arith_encode>
mov    %r12,%rdx
mov    -0x48(%rbp),%r9
mov    -0x38(%rbp),%rdi
mov    -0x30(%rbp),%rax
mov    -0x50(%rbp),%rsi
jmpq   3b21c <encode_mcu_AC_refine+0x16c>
data16 nopw %cs:0x0(%rax,%rax,1)
nop

000000000003b3d0 <encode_mcu>:
push   %rbp
mov    %rsp,%rbp
sub    $0xb0,%rsp
mov    %r15,-0x28(%rbp)
mov    %r14,-0x20(%rbp)
mov    %rbx,-0x8(%rbp)
mov    %r12,-0x10(%rbp)
mov    %r13,-0x18(%rbp)
mov    %rsi,-0xa0(%rbp)
mov    %rdi,-0x98(%rbp)
mov    0x32bd4(%rip),%r13        # 6dfd8 <jpeg_natural_order@@LIBJPEG_6.2+0x129f4>
mov    %r13,-0x38(%rbp)
mov    $0x1,%r12d
xor    %edx,%edx
mov    0x1f0(%rdi),%r8
mov    %r8,-0x90(%rbp)
lea    0x168(%r8),%rax
mov    %rax,-0x50(%rbp)
mov    $0x4,%eax
mov    %rax,-0x70(%rbp)
mov    $0x8,%eax
mov    %rax,-0x68(%rbp)
mov    $0xbd,%eax
mov    %rax,-0x48(%rbp)
mov    $0xd9,%eax
mov    %rax,-0x40(%rbp)
mov    0x118(%rdi),%eax
test   %eax,%eax
jne    3b45f <encode_mcu+0x8f>
mov    %rdi,%rbx
mov    %rdx,%rax
jmp    3b4ad <encode_mcu+0xdd>
mov    0x60(%r8),%eax
test   %eax,%eax
je     3b4d1 <encode_mcu+0x101>
mov    %rdi,%rbx
jmpq   3b50d <encode_mcu+0x13d>
lea    -0x3(%r15,%r15,2),%eax
movslq %eax,%rsi
add    0xe8(%r8,%rcx,8),%rsi
mov    %rdx,%r14
mov    %r8,%r15
mov    %rbx,%rdi
mov    $0x1,%r12d
mov    %r12,%rdx
callq  3a540 <arith_encode>
mov    %r14,%rdx
mov    %r15,%r8
mov    -0xa8(%rbp),%rax
add    $0x1,%eax
mov    -0xa0(%rbp),%rsi
movslq 0x170(%rbx),%rcx
cmp    %eax,%ecx
jg     3b51d <encode_mcu+0x14d>
mov    %r12,%rax
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
mov    -0x20(%rbp),%r14
mov    -0x28(%rbp),%r15
leaveq 
retq   
mov    %rdx,%r12
mov    %r8,%r14
mov    %rsi,%r15
movslq 0x64(%r14),%rsi
mov    %rdi,%rbx
callq  3a840 <emit_restart>
mov    0x118(%rbx),%eax
mov    %eax,0x60(%r14)
movslq 0x64(%r14),%rax
add    $0x1,%eax
and    $0x7,%eax
mov    %eax,0x64(%r14)
mov    %r12,%rdx
mov    %r15,%rsi
mov    %r14,%r8
mov    $0x1,%r12d
mov    0x60(%r8),%eax
add    $0xffffffff,%eax
mov    %eax,0x60(%r8)
mov    %rdx,%rax
jmp    3b4ad <encode_mcu+0xdd>
movslq %eax,%rdi
movslq 0x174(%rbx,%rdi,4),%r10
mov    0x148(%rbx,%r10,8),%r11
movslq 0x14(%r11),%rcx
mov    %rax,-0xa8(%rbp)
movslq 0x50(%r8,%r10,4),%r15
add    0x68(%r8,%rcx,8),%r15
mov    (%rsi,%rdi,8),%r14
mov    %r14,-0x30(%rbp)
movswq (%r14),%rax
movslq 0x40(%r8,%r10,4),%r9
cmp    %eax,%r9d
je     3b5b2 <encode_mcu+0x1e2>
mov    %eax,0x40(%r8,%r10,4)
mov    %rbx,%rdi
mov    %r15,%rsi
mov    %r10,-0x80(%rbp)
mov    %rcx,-0x60(%rbp)
mov    %r11,-0x58(%rbp)
mov    %r12,%rdx
mov    %r9,%r12
mov    %rax,%r13
mov    %r8,%r14
callq  3a540 <arith_encode>
mov    %r13,%rax
sub    %r12d,%eax
test   %eax,%eax
jg     3b5f4 <encode_mcu+0x224>
lea    0x1(%r15),%rsi
mov    %rbx,%rdi
mov    $0x1,%edx
callq  3a540 <arith_encode>
sub    %r13d,%r12d
lea    0x3(%r15),%r13
mov    %r14,%rcx
xor    %edx,%edx
pushq  -0x68(%rbp)
popq   -0x78(%rbp)
jmp    3b61c <encode_mcu+0x24c>
mov    %r15,%rsi
mov    %r8,%r15
mov    %rbx,%rdi
mov    %r10,%rbx
mov    %r11,%r12
callq  3a540 <arith_encode>
movl   $0x0,0x50(%r15,%rbx,4)
mov    %r15,%r8
mov    -0x98(%rbp),%rbx
xor    %edx,%edx
mov    $0x1,%r15d
movslq 0x18(%r12),%rcx
mov    %rcx,-0x80(%rbp)
mov    $0x3f,%eax
jmpq   3b6ac <encode_mcu+0x2dc>
mov    %rax,%r12
mov    %r15,%r13
lea    0x1(%r13),%rsi
mov    %rbx,%rdi
xor    %r15d,%r15d
mov    %r15,%rdx
callq  3a540 <arith_encode>
add    $0x2,%r13
mov    %r14,%rcx
mov    %r15,%rdx
pushq  -0x70(%rbp)
popq   -0x78(%rbp)
mov    -0x78(%rbp),%rax
mov    -0x80(%rbp),%r15
mov    %eax,0x50(%rcx,%r15,4)
lea    -0x1(%r12),%r14d
mov    %r14,-0x88(%rbp)
test   %r14d,%r14d
jne    3b6b9 <encode_mcu+0x2e9>
mov    %rcx,%r14
mov    %rdx,%r12
mov    %rbx,%rdi
mov    %r13,%rsi
callq  3a540 <arith_encode>
mov    %r15,%rsi
mov    -0x60(%rbp),%rax
movzbl 0xc0(%rbx,%rax,1),%ecx
mov    $0x1,%r15d
mov    %r15,%rdx
shl    %cl,%rdx
sar    %rdx
cmp    %edx,%r12d
jl     3b6e5 <encode_mcu+0x315>
movzbl 0xd0(%rax,%rbx,1),%ecx
mov    %r15,%rax
shl    %cl,%rax
sar    %rax
cmp    %eax,%r12d
jle    3b6ee <encode_mcu+0x31e>
movslq 0x50(%r14,%rsi,4),%rax
add    $0x8,%eax
mov    %eax,0x50(%r14,%rsi,4)
jmp    3b6ee <encode_mcu+0x31e>
movslq %eax,%rsi
movslq 0x0(%r13,%rsi,4),%rsi
movswq (%r14,%rsi,2),%rsi
test   %si,%si
jne    3b745 <encode_mcu+0x375>
add    $0xffffffff,%eax
mov    %rax,-0x58(%rbp)
test   %eax,%eax
jg     3b693 <encode_mcu+0x2c3>
jmpq   3b745 <encode_mcu+0x375>
mov    %r13,%rsi
mov    %rcx,%r12
mov    %rbx,%rdi
mov    $0x1,%r15d
mov    %r15,%rdx
callq  3a540 <arith_encode>
mov    -0x60(%rbp),%rax
mov    0x68(%r12,%rax,8),%r13
add    $0x14,%r13
mov    %r15,%r12
jmpq   3b77b <encode_mcu+0x3ab>
movl   $0x0,0x50(%r14,%rsi,4)
add    $0xe,%r13
mov    -0x88(%rbp),%r14
xor    %edx,%edx
jmpq   3b7b4 <encode_mcu+0x3e4>
sar    %r12d
mov    %r12,%rax
and    %r14d,%eax
test   %eax,%eax
je     3b710 <encode_mcu+0x340>
mov    %r13,%rdx
mov    %rbx,%rdi
mov    %r15,%rsi
callq  3a540 <arith_encode>
xor    %edx,%edx
mov    %r12,%rax
and    $0xfffffffe,%eax
test   %eax,%eax
jne    3b700 <encode_mcu+0x330>
mov    -0x88(%rbp),%r15
mov    -0x80(%rbp),%rcx
mov    -0x90(%rbp),%r8
mov    -0x58(%rbp),%rax
mov    -0x38(%rbp),%r13
mov    -0x30(%rbp),%r14
cmp    %eax,%r15d
jle    3b7d6 <encode_mcu+0x406>
cmp    $0x3f,%r15d
jle    3b46f <encode_mcu+0x9f>
mov    $0x1,%r12d
jmpq   3b49c <encode_mcu+0xcc>
mov    %rbx,%rdi
mov    %r13,%rsi
mov    %r15,%rdx
callq  3a540 <arith_encode>
sar    %r14d
add    $0x1,%r13
add    %r12d,%r12d
mov    %r14,%rax
and    $0xfffffffe,%eax
test   %eax,%eax
jne    3b763 <encode_mcu+0x393>
mov    -0x90(%rbp),%r14
xor    %edx,%edx
mov    -0x80(%rbp),%r15
jmpq   3b640 <encode_mcu+0x270>
sar    %r12d
mov    %r12,%rax
and    %r14d,%eax
test   %eax,%eax
je     3b7a7 <encode_mcu+0x3d7>
mov    %r15,%rdx
mov    %rbx,%rdi
mov    %r13,%rsi
callq  3a540 <arith_encode>
xor    %edx,%edx
mov    %r12,%rax
and    $0xfffffffe,%eax
test   %eax,%eax
jne    3b797 <encode_mcu+0x3c7>
mov    -0x90(%rbp),%r8
mov    -0x58(%rbp),%r12
mov    -0x38(%rbp),%r13
mov    -0x30(%rbp),%r14
jmpq   3b5e1 <encode_mcu+0x211>
lea    -0x3(%r15,%r15,2),%eax
movslq %eax,%r12
add    0xe8(%r8,%rcx,8),%r12
mov    %rbx,%rdi
mov    %r12,%rsi
callq  3a540 <arith_encode>
mov    %r15,%rcx
xor    %edx,%edx
jmp    3b809 <encode_mcu+0x439>
mov    %rbx,%rdi
callq  3a540 <arith_encode>
add    $0x3,%r12
mov    %r15,%rcx
xor    %edx,%edx
lea    0x1(%r12),%rsi
lea    0x1(%rcx),%r15d
movslq %ecx,%rax
movslq 0x0(%r13,%rax,4),%rax
movswq (%r14,%rax,2),%rax
test   %ax,%ax
je     3b7f8 <encode_mcu+0x428>
mov    %rbx,%rdi
mov    $0x1,%r13d
mov    %r13,%rdx
mov    %r15,-0x88(%rbp)
mov    %rcx,%r14
mov    %rax,%r15
callq  3a540 <arith_encode>
test   %r15w,%r15w
jg     3b864 <encode_mcu+0x494>
mov    %rbx,%rdi
mov    -0x50(%rbp),%rsi
mov    %r13,%rdx
callq  3a540 <arith_encode>
neg    %r15d
mov    %r14,%rax
mov    %r15,%rcx
xor    %edx,%edx
jmp    3b885 <encode_mcu+0x4b5>
mov    %rbx,%rdi
mov    -0x50(%rbp),%rsi
xor    %r13d,%r13d
mov    %r13,%rdx
callq  3a540 <arith_encode>
mov    %r14,%rax
mov    %r15,%rcx
mov    %r13,%rdx
mov    $0x1,%r13d
lea    0x2(%r12),%r15
lea    -0x1(%rcx),%r14d
test   %r14d,%r14d
jne    3b8ac <encode_mcu+0x4dc>
mov    %rdx,%r12
mov    %rbx,%rdi
mov    %r15,%rsi
callq  3a540 <arith_encode>
add    $0xe,%r15
xor    %edx,%edx
jmpq   3b71d <encode_mcu+0x34d>
mov    %rax,%r12
mov    %rbx,%rdi
mov    %r15,%rsi
mov    %r13,%rdx
callq  3a540 <arith_encode>
mov    %r14,%rax
and    $0xfffffffe,%eax
test   %eax,%eax
jne    3b8ce <encode_mcu+0x4fe>
xor    %edx,%edx
mov    %r13,%r12
jmp    3b896 <encode_mcu+0x4c6>
mov    %r15,%rsi
mov    %rbx,%rdi
mov    %r13,%rdx
callq  3a540 <arith_encode>
mov    -0x80(%rbp),%rax
mov    -0x90(%rbp),%rcx
mov    0xe8(%rcx,%rax,8),%rcx
movzbl 0xe0(%rbx,%rax,1),%eax
cmp    %eax,%r12d
jle    3b904 <encode_mcu+0x534>
pushq  -0x40(%rbp)
popq   -0x60(%rbp)
jmp    3b90a <encode_mcu+0x53a>
pushq  -0x48(%rbp)
popq   -0x60(%rbp)
mov    %r14,%rdx
sar    %edx
mov    -0x60(%rbp),%rax
lea    (%rax,%rcx,1),%r15
mov    %r14,-0x78(%rbp)
mov    %rdx,%r14
mov    $0x2,%r12d
jmp    3b93e <encode_mcu+0x56e>
mov    %rbx,%rdi
mov    %r15,%rsi
mov    %r13,%rdx
callq  3a540 <arith_encode>
sar    %r14d
add    $0x1,%r15
add    %r12d,%r12d
mov    %r14,%rax
and    $0xfffffffe,%eax
test   %eax,%eax
jne    3b926 <encode_mcu+0x556>
mov    -0x78(%rbp),%r14
xor    %edx,%edx
jmpq   3b896 <encode_mcu+0x4c6>
data16 nopw %cs:0x0(%rax,%rax,1)
xchg   %ax,%ax

000000000003b960 <start_pass>:
push   %rbp
mov    %rsp,%rbp
sub    $0x40,%rsp
mov    %r14,-0x20(%rbp)
mov    %r15,-0x28(%rbp)
mov    %rbx,-0x8(%rbp)
mov    %r12,-0x10(%rbp)
mov    %r13,-0x18(%rbp)
mov    0x1f0(%rdi),%r14
mov    %r14,-0x38(%rbp)
test   %esi,%esi
jne    3b990 <start_pass+0x30>
mov    %rdi,%rbx
jmp    3b9a5 <start_pass+0x45>
mov    (%rdi),%rax
movl   $0x30,0x28(%rax)
mov    (%rdi),%rax
mov    (%rax),%rax
mov    %rdi,%rbx
callq  *%rax
mov    $0x1,%esi
mov    $0x40,%edx
xor    %r12d,%r12d
mov    $0x100,%eax
movslq 0x134(%rbx),%rcx
test   %ecx,%ecx
jne    3b9d5 <start_pass+0x75>
lea    -0x5f9(%rip),%rcx        # 3b3d0 <encode_mcu>
mov    %rcx,0x8(%r14)
mov    %r12,%r13
jmpq   3bba2 <start_pass+0x242>
movslq 0x1a4(%rbx),%rcx
test   %ecx,%ecx
je     3bc0a <start_pass+0x2aa>
movslq 0x19c(%rbx),%rcx
test   %ecx,%ecx
je     3bc28 <start_pass+0x2c8>
lea    -0x94a(%rip),%rcx        # 3b0b0 <encode_mcu_AC_refine>
mov    %rcx,0x8(%r14)
mov    %r12,%r13
jmpq   3bba2 <start_pass+0x242>
movslq %r13d,%rcx
mov    0x148(%rbx,%rcx,8),%r15
movslq 0x134(%rbx),%rdi
test   %edi,%edi
je     3ba3a <start_pass+0xda>
movslq 0x19c(%rbx),%rdi
test   %edi,%edi
jne    3baef <start_pass+0x18f>
movslq 0x1a4(%rbx),%rdi
test   %edi,%edi
jne    3baef <start_pass+0x18f>
movslq 0x14(%r15),%rax
test   %eax,%eax
js     3ba47 <start_pass+0xe7>
cmp    $0xf,%eax
jle    3ba83 <start_pass+0x123>
mov    (%rbx),%rdx
movl   $0x7d,0x28(%rdx)
mov    (%rbx),%rdx
mov    %eax,0x2c(%rdx)
mov    (%rbx),%rdx
mov    (%rdx),%rdx
mov    %rbx,%rdi
mov    %r13,-0x30(%rbp)
mov    %rax,%r12
mov    %rcx,%r13
callq  *%rdx
mov    %r12,%rax
mov    %r13,%rcx
mov    $0x40,%edx
mov    $0x1,%esi
xor    %r12d,%r12d
mov    -0x30(%rbp),%r13
mov    0x68(%r14,%rax,8),%rdi
test   %rdi,%rdi
jne    3babb <start_pass+0x15b>
mov    0x8(%rbx),%rdi
mov    (%rdi),%r8
mov    %rbx,%rdi
mov    %r13,-0x30(%rbp)
mov    %rax,%r12
mov    %rcx,%r13
callq  *%r8
mov    %rax,0x68(%r14,%r12,8)
mov    %r12,%rax
mov    %r13,%rcx
mov    $0x40,%edx
xor    %r12d,%r12d
mov    -0x30(%rbp),%r13
mov    0x68(%r14,%rax,8),%rdi
mov    %r12,%rsi
mov    %rcx,%r12
callq  41e0 <memset@plt>
movl   $0x0,0x40(%r14,%r12,4)
movl   $0x0,0x50(%r14,%r12,4)
mov    $0x100,%eax
mov    $0x40,%edx
mov    $0x1,%esi
xor    %r12d,%r12d
movslq 0x134(%rbx),%rcx
test   %ecx,%ecx
je     3bb09 <start_pass+0x1a9>
movslq 0x1a0(%rbx),%rcx
test   %ecx,%ecx
je     3bb9a <start_pass+0x23a>
movslq 0x18(%r15),%r15
test   %r15d,%r15d
js     3bb18 <start_pass+0x1b8>
cmp    $0xf,%r15d
jle    3bb43 <start_pass+0x1e3>
mov    (%rbx),%rax
movl   $0x7d,0x28(%rax)
mov    (%rbx),%rax
mov    %r15d,0x2c(%rax)
mov    (%rbx),%rax
mov    (%rax),%rax
mov    %rbx,%rdi
callq  *%rax
mov    $0x100,%eax
mov    $0x40,%edx
mov    $0x1,%esi
mov    0xe8(%r14,%r15,8),%rcx
test   %rcx,%rcx
jne    3bb76 <start_pass+0x216>
mov    0x8(%rbx),%rcx
mov    (%rcx),%rcx
mov    %rax,%rdx
mov    %rbx,%rdi
callq  *%rcx
mov    %rax,0xe8(%r14,%r15,8)
mov    $0x100,%eax
mov    $0x40,%edx
mov    $0x1,%esi
mov    0xe8(%r14,%r15,8),%rdi
mov    %rdx,%r14
mov    %rax,%rdx
mov    %rsi,%r15
mov    %r12,%rsi
callq  41e0 <memset@plt>
mov    %r14,%rdx
mov    %r15,%rsi
mov    $0x100,%eax
add    $0x1,%r13d
mov    -0x38(%rbp),%r14
movslq 0x144(%rbx),%rcx
cmp    %r13d,%ecx
jg     3ba06 <start_pass+0xa6>
movq   $0x0,0x18(%r14)
movq   $0x10000,0x20(%r14)
movq   $0x0,0x28(%r14)
movq   $0x0,0x30(%r14)
movl   $0xb,0x38(%r14)
movl   $0xffffffff,0x3c(%r14)
mov    0x118(%rbx),%eax
mov    %eax,0x60(%r14)
movl   $0x0,0x64(%r14)
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
leaveq 
retq   
movslq 0x19c(%rbx),%rcx
test   %ecx,%ecx
je     3bc3b <start_pass+0x2db>
lea    -0xfbc(%rip),%rcx        # 3ac60 <encode_mcu_AC_first>
mov    %rcx,0x8(%r14)
mov    %r12,%r13
jmpq   3bba2 <start_pass+0x242>
lea    -0xc5f(%rip),%rcx        # 3afd0 <encode_mcu_DC_refine>
mov    %rcx,0x8(%r14)
mov    %r12,%r13
jmpq   3bba2 <start_pass+0x242>
lea    -0x12a2(%rip),%rcx        # 3a9a0 <encode_mcu_DC_first>
mov    %rcx,0x8(%r14)
mov    %r12,%r13
jmpq   3bba2 <start_pass+0x242>
xchg   %ax,%ax

000000000003bc50 <jinit_arith_decoder>:
push   %rbp
mov    %rsp,%rbp
sub    $0x10,%rsp
mov    %r15,-0x10(%rbp)
mov    0x8(%rdi),%rax
mov    (%rax),%rax
mov    %r14,%r15
mov    $0x1,%esi
mov    $0x158,%edx
mov    %rdi,%r14
callq  *%rax
mov    %rax,0x250(%r14)
lea    0x12bd(%rip),%rcx        # 3cf40 <start_pass>
mov    %rcx,(%rax)
xor    %r8d,%r8d
mov    %r8,%rcx
jmp    3bca9 <jinit_arith_decoder+0x59>
movslq %ecx,%rdx
movq   $0x0,0x50(%rax,%rdx,8)
movq   $0x0,0xd0(%rax,%rdx,8)
add    $0x1,%ecx
cmp    $0xf,%ecx
jle    3bc8e <jinit_arith_decoder+0x3e>
movb   $0x71,0x150(%rax)
movslq 0x138(%r14),%rax
test   %eax,%eax
jne    3bcc9 <jinit_arith_decoder+0x79>
mov    %r15,%r14
mov    -0x10(%rbp),%r15
leaveq 
retq   
mov    0x8(%r14),%rax
mov    (%rax),%rcx
movslq 0x38(%r14),%rax
shl    $0x6,%eax
movslq %eax,%rdx
shl    $0x2,%rdx
mov    %r14,%rdi
mov    %r15,-0x8(%rbp)
mov    %r8,%r15
mov    $0x1,%esi
callq  *%rcx
mov    %rax,0xc0(%r14)
mov    %r15,%rdx
jmp    3bd10 <jinit_arith_decoder+0xc0>
movl   $0xffffffff,(%rax)
add    $0x4,%rax
add    $0x1,%ecx
cmp    $0x3f,%ecx
jle    3bcfb <jinit_arith_decoder+0xab>
add    $0x1,%edx
movslq 0x38(%r14),%rcx
cmp    %edx,%ecx
jg     3bd22 <jinit_arith_decoder+0xd2>
mov    -0x8(%rbp),%r14
mov    -0x10(%rbp),%r15
leaveq 
retq   
mov    %r15,%rcx
jmp    3bd08 <jinit_arith_decoder+0xb8>
nopw   0x0(%rax,%rax,1)

000000000003bd30 <get_byte>:
push   %rbp
mov    %rsp,%rbp
sub    $0x10,%rsp
mov    0x28(%rdi),%rax
mov    0x8(%rax),%rcx
test   %rcx,%rcx
je     3bd60 <get_byte+0x30>
mov    0x8(%rax),%rcx
add    $0xffffffffffffffff,%rcx
mov    %rcx,0x8(%rax)
mov    (%rax),%rdx
lea    0x1(%rdx),%rcx
mov    %rcx,(%rax)
movzbl (%rdx),%eax
leaveq 
retq   
mov    %rdi,%rcx
mov    %r14,-0x8(%rbp)
mov    %r15,-0x10(%rbp)
mov    %rdi,%r14
mov    %rcx,%rdi
mov    %rax,%r15
callq  *0x18(%r15)
test   %eax,%eax
je     3bd89 <get_byte+0x59>
mov    %r15,%rax
mov    -0x10(%rbp),%r15
mov    -0x8(%rbp),%r14
jmp    3bd45 <get_byte+0x15>
mov    (%r14),%rax
movl   $0x18,0x28(%rax)
mov    (%r14),%rax
mov    (%rax),%rax
mov    %r14,%rdi
callq  *%rax
mov    %r15,%rax
mov    -0x10(%rbp),%r15
mov    -0x8(%rbp),%r14
jmp    3bd45 <get_byte+0x15>
nopl   0x0(%rax,%rax,1)

000000000003bdb0 <arith_decode>:
push   %rbp
mov    %rsp,%rbp
sub    $0x30,%rsp
mov    %rsi,-0x28(%rbp)
mov    %r12,-0x8(%rbp)
mov    %r13,-0x10(%rbp)
mov    %r14,-0x18(%rbp)
mov    %r15,-0x20(%rbp)
mov    %rdi,%r13
mov    0x250(%r13),%r12
xor    %r14d,%r14d
mov    $0xff,%r15d
jmp    3be4b <arith_decode+0x9b>
movslq 0x28(%r12),%rax
add    $0xffffffff,%eax
mov    %eax,0x28(%r12)
test   %eax,%eax
jns    3be3e <arith_decode+0x8e>
movslq 0x21c(%r13),%rax
test   %eax,%eax
je     3bec0 <arith_decode+0x110>
mov    %r14,%rax
movslq %eax,%rax
mov    0x18(%r12),%rcx
shl    $0x8,%rcx
or     %rcx,%rax
mov    %rax,0x18(%r12)
movslq 0x28(%r12),%rax
lea    0x8(%rax),%ecx
mov    %ecx,0x28(%r12)
test   %ecx,%ecx
jns    3be3e <arith_decode+0x8e>
add    $0x9,%eax
mov    %eax,0x28(%r12)
test   %eax,%eax
jne    3be3e <arith_decode+0x8e>
movq   $0x8000,0x20(%r12)
mov    0x20(%r12),%rax
add    %rax,%rax
mov    %rax,0x20(%r12)
mov    0x20(%r12),%rdx
cmp    $0x7fff,%rdx
jle    3bde1 <arith_decode+0x31>
mov    0x32168(%rip),%rsi        # 6dfc8 <jpeg_aritab@@LIBJPEG_6.2+0x12870>
mov    -0x28(%rbp),%r8
movzbl (%r8),%eax
mov    %rax,%rcx
and    $0x7f,%ecx
movslq %ecx,%rcx
mov    (%rsi,%rcx,8),%rsi
mov    %rsi,%rdi
sar    $0x10,%rdi
sub    %rdi,%rdx
mov    %rdx,0x20(%r12)
mov    %rsi,%r9
shr    $0x8,%r9
mov    0x28(%r12),%ecx
mov    %rdx,%r10
shl    %cl,%r10
mov    0x18(%r12),%rcx
cmp    %r10,%rcx
jge    3beee <arith_decode+0x13e>
cmp    $0x7fff,%rdx
jg     3bf26 <arith_decode+0x176>
cmp    %rdi,%rdx
jl     3bf3b <arith_decode+0x18b>
mov    %rax,%rcx
and    $0x80,%cl
add    %r9d,%ecx
mov    %cl,(%r8)
jmp    3bf26 <arith_decode+0x176>
mov    %r13,%rdi
callq  3bd30 <get_byte>
cmp    $0xff,%eax
jne    3be04 <arith_decode+0x54>
mov    %r13,%rdi
callq  3bd30 <get_byte>
cmp    $0xff,%eax
je     3bed3 <arith_decode+0x123>
test   %eax,%eax
jne    3bf50 <arith_decode+0x1a0>
mov    %r15,%rax
jmpq   3be04 <arith_decode+0x54>
sub    %r10,%rcx
mov    %rcx,0x18(%r12)
cmp    %rdi,%rdx
jl     3bf15 <arith_decode+0x165>
mov    %rdi,0x20(%r12)
mov    %rax,%rcx
xor    $0x80,%ecx
and    $0x80,%al
add    %esi,%eax
mov    %al,(%r8)
mov    %rcx,%rax
jmp    3bf26 <arith_decode+0x176>
mov    %rdi,0x20(%r12)
mov    %rax,%rcx
and    $0x80,%cl
add    %r9d,%ecx
mov    %cl,(%r8)
shr    $0x7,%eax
mov    -0x20(%rbp),%r15
mov    -0x18(%rbp),%r14
mov    -0x10(%rbp),%r13
mov    -0x8(%rbp),%r12
leaveq 
retq   
mov    %rax,%rcx
xor    $0x80,%ecx
and    $0x80,%al
add    %esi,%eax
mov    %al,(%r8)
mov    %rcx,%rax
jmp    3bf26 <arith_decode+0x176>
mov    %eax,0x21c(%r13)
mov    %r14,%rax
jmpq   3be04 <arith_decode+0x54>
nop

000000000003bf60 <process_restart>:
push   %rbp
mov    %rsp,%rbp
sub    $0x30,%rsp
mov    %rbx,-0x8(%rbp)
mov    %r12,-0x10(%rbp)
mov    %r13,-0x18(%rbp)
mov    %r14,-0x20(%rbp)
mov    %r15,-0x28(%rbp)
mov    0x250(%rdi),%r14
xor    %ebx,%ebx
mov    $0x100,%r15d
mov    $0x40,%r12d
mov    0x248(%rdi),%rax
mov    0x10(%rax),%rax
mov    %rdi,%r13
callq  *%rax
test   %eax,%eax
je     3bfb0 <process_restart+0x50>
mov    %r15,%rdx
mov    %rbx,%r15
jmpq   3c070 <process_restart+0x110>
mov    0x0(%r13),%rax
movl   $0x18,0x28(%rax)
mov    0x0(%r13),%rax
mov    (%rax),%rax
mov    %r13,%rdi
callq  *%rax
mov    %r15,%rdx
mov    %rbx,%r15
jmpq   3c070 <process_restart+0x110>
movslq %r15d,%rsi
mov    0x1b8(%r13,%rsi,8),%rax
movslq 0x138(%r13),%rcx
test   %ecx,%ecx
je     3bffe <process_restart+0x9e>
movslq 0x20c(%r13),%rcx
test   %ecx,%ecx
jne    3c03d <process_restart+0xdd>
movslq 0x214(%r13),%rcx
test   %ecx,%ecx
jne    3c03d <process_restart+0xdd>
movslq 0x14(%rax),%rcx
mov    0x50(%r14,%rcx,8),%rdi
mov    %r12,%rdx
mov    %rax,%r12
mov    %rbx,%rax
mov    %rsi,%rbx
mov    %rax,%rsi
callq  41e0 <memset@plt>
movl   $0x0,0x2c(%r14,%rbx,4)
movl   $0x0,0x3c(%r14,%rbx,4)
mov    %r12,%rax
mov    $0x40,%r12d
mov    $0x100,%edx
xor    %ebx,%ebx
movslq 0x138(%r13),%rcx
test   %ecx,%ecx
je     3c053 <process_restart+0xf3>
movslq 0x20c(%r13),%rcx
test   %ecx,%ecx
je     3c06c <process_restart+0x10c>
movslq 0x18(%rax),%rax
mov    0xd0(%r14,%rax,8),%rdi
mov    %rbx,%rsi
callq  41e0 <memset@plt>
mov    $0x100,%edx
add    $0x1,%r15d
movslq 0x1b0(%r13),%rax
cmp    %r15d,%eax
jg     3bfd2 <process_restart+0x72>
movq   $0x0,0x18(%r14)
movq   $0x0,0x20(%r14)
movl   $0xfffffff0,0x28(%r14)
mov    0x170(%r13),%eax
mov    %eax,0x4c(%r14)
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
leaveq 
retq   
nopl   0x0(%rax)

000000000003c0c0 <decode_mcu_DC_first>:
push   %rbp
mov    %rsp,%rbp
sub    $0x60,%rsp
mov    %rsi,-0x50(%rbp)
mov    0x250(%rdi),%rcx
mov    0x170(%rdi),%eax
test   %eax,%eax
jne    3c0ee <decode_mcu_DC_first+0x2e>
mov    %r12,%rdx
mov    %rdi,%r12
mov    %r15,%r8
mov    %rbx,%r15
mov    %rcx,%rbx
jmp    3c137 <decode_mcu_DC_first+0x77>
mov    0x4c(%rcx),%eax
test   %eax,%eax
je     3c106 <decode_mcu_DC_first+0x46>
mov    %r12,%rdx
mov    %rdi,%r12
mov    %r15,%r8
mov    %rbx,%r15
mov    %rcx,%rbx
jmp    3c12e <decode_mcu_DC_first+0x6e>
mov    %rdi,%rax
mov    %r15,-0x40(%rbp)
mov    %rdi,-0x58(%rbp)
mov    %rax,%rdi
mov    %rbx,%r15
mov    %rcx,%rbx
callq  3bf60 <process_restart>
mov    %r12,%rdx
mov    -0x50(%rbp),%rsi
mov    -0x58(%rbp),%r12
mov    -0x40(%rbp),%r8
mov    0x4c(%rbx),%eax
add    $0xffffffff,%eax
mov    %eax,0x4c(%rbx)
mov    $0x1,%eax
movslq 0x28(%rbx),%rcx
cmp    $0xffffffff,%ecx
jne    3c150 <decode_mcu_DC_first+0x90>
mov    %r15,%rbx
mov    %r8,%r15
mov    %rdx,%r12
leaveq 
retq   
xor    %ecx,%ecx
mov    %r8,-0x28(%rbp)
mov    %r15,-0x8(%rbp)
mov    %rdx,-0x10(%rbp)
mov    %r13,-0x18(%rbp)
mov    %r14,-0x20(%rbp)
jmp    3c196 <decode_mcu_DC_first+0xd6>
movl   $0x0,0x3c(%rbx,%r15,4)
movslq 0x2c(%rbx,%r15,4),%rax
mov    0x218(%r12),%ecx
shl    %cl,%rax
mov    %ax,0x0(%r13)
mov    -0x58(%rbp),%rax
lea    0x1(%rax),%ecx
mov    $0x1,%eax
mov    -0x50(%rbp),%rsi
cmp    0x1e0(%r12),%ecx
jl     3c1b6 <decode_mcu_DC_first+0xf6>
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
mov    -0x28(%rbp),%r15
leaveq 
retq   
movslq %ecx,%rax
mov    (%rsi,%rax,8),%r13
movslq 0x1e4(%r12,%rax,4),%r15
mov    0x1b8(%r12,%r15,8),%rax
movslq 0x14(%rax),%rax
mov    %rax,-0x48(%rbp)
movslq 0x3c(%rbx,%r15,4),%r14
add    0x50(%rbx,%rax,8),%r14
mov    %r12,%rdi
mov    %r14,%rsi
mov    %rcx,-0x58(%rbp)
callq  3bdb0 <arith_decode>
test   %eax,%eax
je     3c168 <decode_mcu_DC_first+0xa8>
lea    0x1(%r14),%rsi
mov    %r12,%rdi
callq  3bdb0 <arith_decode>
mov    %rax,-0x38(%rbp)
movslq %eax,%rcx
lea    0x2(%rcx,%r14,1),%r14
mov    %r12,%rdi
mov    %r14,%rsi
mov    %r13,-0x30(%rbp)
mov    %rax,%r13
callq  3bdb0 <arith_decode>
test   %eax,%eax
jne    3c26f <decode_mcu_DC_first+0x1af>
mov    %r13,%rax
xor    %r13d,%r13d
mov    -0x48(%rbp),%rdi
movzbl 0x140(%rdi,%r12,1),%ecx
mov    $0x1,%edx
mov    %rdx,%rsi
shl    %cl,%rsi
sar    %rsi
cmp    %esi,%r13d
jl     3c285 <decode_mcu_DC_first+0x1c5>
movzbl 0x150(%rdi,%r12,1),%ecx
shl    %cl,%rdx
sar    %rdx
cmp    %edx,%r13d
jg     3c29e <decode_mcu_DC_first+0x1de>
lea    0x4(,%rax,4),%eax
mov    %eax,0x3c(%rbx,%r15,4)
mov    %r15,%rax
jmp    3c291 <decode_mcu_DC_first+0x1d1>
mov    -0x48(%rbp),%rcx
mov    0x50(%rbx,%rcx,8),%r14
add    $0x14,%r14
mov    %r15,-0x40(%rbp)
mov    %rax,%r13
jmp    3c2c5 <decode_mcu_DC_first+0x205>
movl   $0x0,0x3c(%rbx,%r15,4)
mov    %r15,%rax
lea    0xe(%r14),%r15
mov    %rax,-0x48(%rbp)
mov    %r13,%r14
jmp    3c2f6 <decode_mcu_DC_first+0x236>
lea    0xc(,%rax,4),%eax
mov    %eax,0x3c(%rbx,%r15,4)
mov    %r15,%rax
jmp    3c291 <decode_mcu_DC_first+0x1d1>
mov    %r13,%rax
and    $0x7fffffff,%eax
cmp    $0x4000,%eax
je     3c30e <decode_mcu_DC_first+0x24e>
add    $0x1,%r14
add    %r13d,%r13d
mov    %r12,%rdi
mov    %r14,%rsi
callq  3bdb0 <arith_decode>
test   %eax,%eax
jne    3c2af <decode_mcu_DC_first+0x1ef>
mov    -0x40(%rbp),%r15
mov    -0x38(%rbp),%rax
jmpq   3c22a <decode_mcu_DC_first+0x16a>
sar    %r14d
mov    %r12,%rdi
mov    %r15,%rsi
callq  3bdb0 <arith_decode>
test   %eax,%eax
je     3c2f6 <decode_mcu_DC_first+0x236>
or     %r14d,%r13d
mov    %r14,%rax
and    $0xfffffffe,%eax
test   %eax,%eax
jne    3c2e1 <decode_mcu_DC_first+0x221>
mov    -0x38(%rbp),%rax
test   %eax,%eax
jne    3c34f <decode_mcu_DC_first+0x28f>
add    $0x1,%r13d
jmp    3c352 <decode_mcu_DC_first+0x292>
mov    (%r12),%rax
movl   $0x7e,0x28(%rax)
mov    (%r12),%rax
mov    0x8(%rax),%rax
mov    %r12,%rdi
mov    $0xffffffffffffffff,%rsi
callq  *%rax
movl   $0xffffffff,0x28(%rbx)
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
mov    $0x1,%eax
mov    -0x28(%rbp),%r15
leaveq 
retq   
not    %r13d
mov    -0x48(%rbp),%r15
add    0x2c(%rbx,%r15,4),%r13d
mov    %r13d,0x2c(%rbx,%r15,4)
mov    -0x30(%rbp),%r13
jmpq   3c171 <decode_mcu_DC_first+0xb1>
nopl   0x0(%rax)

000000000003c370 <decode_mcu_AC_first>:
push   %rbp
mov    %rsp,%rbp
sub    $0x70,%rsp
mov    0x250(%rdi),%rcx
mov    0x170(%rdi),%eax
test   %eax,%eax
jne    3c3a3 <decode_mcu_AC_first+0x33>
mov    %rbx,%rdx
mov    %rdi,%rbx
mov    %r15,%r8
mov    %r13,%r15
mov    %r14,%r9
mov    %r12,%rdi
mov    %rcx,%r12
mov    %rdi,%rcx
jmp    3c409 <decode_mcu_AC_first+0x99>
mov    0x4c(%rcx),%eax
test   %eax,%eax
je     3c3c4 <decode_mcu_AC_first+0x54>
mov    %rbx,%rdx
mov    %rdi,%rbx
mov    %r15,%r8
mov    %r13,%r15
mov    %r14,%r9
mov    %r12,%rdi
mov    %rcx,%r12
mov    %rdi,%rcx
jmp    3c3fc <decode_mcu_AC_first+0x8c>
mov    %rdi,%rax
mov    %r14,-0x58(%rbp)
mov    %r15,-0x68(%rbp)
mov    %rsi,-0x70(%rbp)
mov    %rbx,%r14
mov    %rdi,%rbx
mov    %rax,%rdi
mov    %r13,%r15
mov    %r12,%r13
mov    %rcx,%r12
callq  3bf60 <process_restart>
mov    %r13,%rcx
mov    %r14,%rdx
mov    -0x70(%rbp),%rsi
mov    -0x68(%rbp),%r8
mov    -0x58(%rbp),%r9
mov    0x4c(%r12),%eax
add    $0xffffffff,%eax
mov    %eax,0x4c(%r12)
mov    $0x1,%eax
movslq 0x28(%r12),%rdi
cmp    $0xffffffff,%edi
jne    3c429 <decode_mcu_AC_first+0xb9>
mov    %rdx,%rbx
mov    %rcx,%r12
mov    %r15,%r13
mov    %r8,%r15
mov    %r9,%r14
leaveq 
retq   
mov    0x1b8(%rbx),%rax
movslq 0x18(%rax),%rax
mov    %rax,-0x68(%rbp)
mov    (%rsi),%rsi
mov    %rsi,-0x38(%rbp)
movslq 0x20c(%rbx),%r14
mov    0x31b8b(%rip),%rsi        # 6dfd8 <jpeg_natural_order@@LIBJPEG_6.2+0x129f4>
mov    %rsi,-0x40(%rbp)
lea    0x150(%r12),%r13
mov    %r13,-0x70(%rbp)
mov    $0xbd,%esi
mov    %rsi,-0x58(%rbp)
mov    $0xd9,%esi
mov    %rsi,-0x50(%rbp)
mov    %r9,-0x20(%rbp)
mov    %r8,-0x28(%rbp)
mov    %rdx,-0x8(%rbp)
mov    %rcx,-0x10(%rbp)
mov    %r15,-0x18(%rbp)
jmp    3c4b5 <decode_mcu_AC_first+0x145>
not    %r14d
mov    0x218(%rbx),%ecx
shl    %cl,%r14d
mov    -0x48(%rbp),%rdx
movslq %edx,%rax
mov    -0x40(%rbp),%rcx
movslq (%rcx,%rax,4),%rax
mov    -0x38(%rbp),%rcx
mov    %r14w,(%rcx,%rax,2)
lea    0x1(%rdx),%r14d
mov    -0x70(%rbp),%r13
mov    -0x68(%rbp),%rax
cmp    0x210(%rbx),%r14d
jle    3c4d9 <decode_mcu_AC_first+0x169>
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
mov    $0x1,%eax
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
leaveq 
retq   
lea    -0x3(%r14,%r14,2),%ecx
movslq %ecx,%r15
add    0xd0(%r12,%rax,8),%r15
mov    %rbx,%rdi
mov    %r15,%rsi
callq  3bdb0 <arith_decode>
test   %eax,%eax
je     3c527 <decode_mcu_AC_first+0x1b7>
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
mov    $0x1,%eax
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
leaveq 
retq   
movslq 0x210(%rbx),%rax
add    $0x1,%r14d
cmp    %r14d,%eax
jl     3c56c <decode_mcu_AC_first+0x1fc>
add    $0x3,%r15
lea    0x1(%r15),%rsi
mov    %rbx,%rdi
callq  3bdb0 <arith_decode>
test   %eax,%eax
je     3c513 <decode_mcu_AC_first+0x1a3>
mov    %r13,%rsi
mov    %rbx,%rdi
callq  3bdb0 <arith_decode>
mov    %rax,-0x30(%rbp)
add    $0x2,%r15
mov    %rbx,%rdi
mov    %r15,%rsi
callq  3bdb0 <arith_decode>
test   %eax,%eax
jne    3c5ad <decode_mcu_AC_first+0x23d>
xor    %r13d,%r13d
add    $0xe,%r15
mov    %r14,-0x48(%rbp)
mov    %r13,%r14
jmpq   3c5f5 <decode_mcu_AC_first+0x285>
mov    (%rbx),%rax
movl   $0x7e,0x28(%rax)
mov    (%rbx),%rax
mov    0x8(%rax),%rax
mov    %rbx,%rdi
mov    $0xffffffffffffffff,%rsi
callq  *%rax
movl   $0xffffffff,0x28(%r12)
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
mov    $0x1,%eax
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
leaveq 
retq   
mov    %rax,%r13
mov    %rbx,%rdi
mov    %r15,%rsi
callq  3bdb0 <arith_decode>
test   %eax,%eax
je     3c55c <decode_mcu_AC_first+0x1ec>
mov    -0x68(%rbp),%rax
mov    0xd0(%r12,%rax,8),%rcx
movzbl 0x160(%rbx,%rax,1),%eax
cmp    %r14d,%eax
jge    3c614 <decode_mcu_AC_first+0x2a4>
pushq  -0x50(%rbp)
popq   -0x60(%rbp)
jmp    3c61a <decode_mcu_AC_first+0x2aa>
sar    %r13d
mov    %rbx,%rdi
mov    %r15,%rsi
callq  3bdb0 <arith_decode>
test   %eax,%eax
je     3c5f5 <decode_mcu_AC_first+0x285>
or     %r13d,%r14d
mov    %r13,%rax
and    $0xfffffffe,%eax
test   %eax,%eax
jne    3c5e0 <decode_mcu_AC_first+0x270>
mov    -0x30(%rbp),%rax
test   %eax,%eax
jne    3c485 <decode_mcu_AC_first+0x115>
add    $0x1,%r14d
jmpq   3c488 <decode_mcu_AC_first+0x118>
pushq  -0x58(%rbp)
popq   -0x60(%rbp)
mov    -0x60(%rbp),%rax
lea    (%rax,%rcx,1),%r15
add    %r13d,%r13d
mov    %r14,-0x60(%rbp)
jmp    3c641 <decode_mcu_AC_first+0x2d1>
mov    %r13,%rax
and    $0x7fffffff,%eax
cmp    $0x4000,%eax
je     3c659 <decode_mcu_AC_first+0x2e9>
add    $0x1,%r15
add    %r13d,%r13d
mov    %rbx,%rdi
mov    %r15,%rsi
callq  3bdb0 <arith_decode>
test   %eax,%eax
jne    3c62b <decode_mcu_AC_first+0x2bb>
mov    -0x60(%rbp),%r14
jmpq   3c55c <decode_mcu_AC_first+0x1ec>
mov    (%rbx),%rax
movl   $0x7e,0x28(%rax)
mov    (%rbx),%rax
mov    0x8(%rax),%rax
mov    %rbx,%rdi
mov    $0xffffffffffffffff,%rsi
callq  *%rax
movl   $0xffffffff,0x28(%r12)
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
mov    $0x1,%eax
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
leaveq 
retq   
nopw   0x0(%rax,%rax,1)

000000000003c6a0 <decode_mcu_DC_refine>:
push   %rbp
mov    %rsp,%rbp
sub    $0x30,%rsp
mov    %r13,-0x18(%rbp)
mov    %r14,-0x20(%rbp)
mov    %r15,-0x28(%rbp)
mov    %rbx,-0x8(%rbp)
mov    %r12,-0x10(%rbp)
mov    0x250(%rdi),%r14
mov    0x170(%rdi),%eax
test   %eax,%eax
jne    3c6d5 <decode_mcu_DC_refine+0x35>
mov    %rdi,%rbx
mov    %rsi,%r12
jmp    3c6fb <decode_mcu_DC_refine+0x5b>
mov    0x4c(%r14),%eax
test   %eax,%eax
je     3c6e5 <decode_mcu_DC_refine+0x45>
mov    %rdi,%rbx
mov    %rsi,%r12
jmp    3c6f0 <decode_mcu_DC_refine+0x50>
mov    %rsi,%r12
mov    %rdi,%rbx
callq  3bf60 <process_restart>
mov    0x4c(%r14),%eax
add    $0xffffffff,%eax
mov    %eax,0x4c(%r14)
mov    $0x1,%r13d
mov    0x218(%rbx),%ecx
shl    %cl,%r13d
lea    0x150(%r14),%r15
xor    %r14d,%r14d
jmp    3c73b <decode_mcu_DC_refine+0x9b>
mov    %rbx,%rdi
mov    %r15,%rsi
callq  3bdb0 <arith_decode>
test   %eax,%eax
je     3c737 <decode_mcu_DC_refine+0x97>
movslq %r14d,%rax
mov    (%r12,%rax,8),%rcx
movswq (%rcx),%rax
or     %r13w,%ax
mov    %ax,(%rcx)
add    $0x1,%r14d
movslq 0x1e0(%rbx),%rax
cmp    %r14d,%eax
jg     3c716 <decode_mcu_DC_refine+0x76>
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
mov    $0x1,%eax
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
leaveq 
retq   
data16 nopw %cs:0x0(%rax,%rax,1)
nopl   (%rax)

000000000003c770 <decode_mcu_AC_refine>:
push   %rbp
mov    %rsp,%rbp
sub    $0x60,%rsp
mov    0x250(%rdi),%r8
mov    %r8,-0x38(%rbp)
mov    0x170(%rdi),%eax
test   %eax,%eax
jne    3c7a1 <decode_mcu_AC_refine+0x31>
mov    %rbx,%r9
mov    %rdi,%rbx
mov    %r15,%rdi
mov    %r12,%r15
mov    %r13,%r10
mov    %r14,%r11
jmp    3c7fd <decode_mcu_AC_refine+0x8d>
mov    0x4c(%r8),%eax
test   %eax,%eax
je     3c7bd <decode_mcu_AC_refine+0x4d>
mov    %rbx,%r9
mov    %rdi,%rbx
mov    %r15,%rdi
mov    %r12,%r15
mov    %r13,%r10
mov    %r14,%r11
jmp    3c7f2 <decode_mcu_AC_refine+0x82>
mov    %rdi,%rax
mov    %r15,-0x50(%rbp)
mov    %rsi,-0x58(%rbp)
mov    %rdi,-0x60(%rbp)
mov    %rax,%rdi
mov    %r12,%r15
mov    %r8,%r12
callq  3bf60 <process_restart>
mov    %r12,%r8
mov    %rbx,%r9
mov    %r13,%r10
mov    %r14,%r11
mov    -0x60(%rbp),%rbx
mov    -0x58(%rbp),%rsi
mov    -0x50(%rbp),%rdi
mov    0x4c(%r8),%eax
add    $0xffffffff,%eax
mov    %eax,0x4c(%r8)
mov    $0x1,%eax
movslq 0x28(%r8),%rcx
cmp    $0xffffffff,%ecx
jne    3c81c <decode_mcu_AC_refine+0xac>
mov    %r9,%rbx
mov    %r15,%r12
mov    %rdi,%r15
mov    %r10,%r13
mov    %r11,%r14
leaveq 
retq   
mov    (%rsi),%r13
mov    0x1b8(%rbx),%rcx
movslq 0x18(%rcx),%rsi
mov    %rsi,-0x40(%rbp)
mov    0x218(%rbx),%ecx
movslq 0x210(%rbx),%rdx
mov    0x31796(%rip),%r12        # 6dfd8 <jpeg_natural_order@@LIBJPEG_6.2+0x129f4>
jmp    3c85a <decode_mcu_AC_refine+0xea>
movslq %edx,%r14
movslq (%r12,%r14,4),%r14
movswq 0x0(%r13,%r14,2),%r14
test   %r14w,%r14w
jne    3c85e <decode_mcu_AC_refine+0xee>
add    $0xffffffff,%edx
test   %edx,%edx
jg     3c844 <decode_mcu_AC_refine+0xd4>
movslq 0x20c(%rbx),%r14
mov    %rdi,-0x28(%rbp)
mov    $0xffffffffffffffff,%rdi
shl    %cl,%edi
mov    %rdi,-0x48(%rbp)
shl    %cl,%eax
mov    %rax,-0x50(%rbp)
lea    0x150(%r8),%rax
mov    %rax,-0x60(%rbp)
mov    %r9,-0x8(%rbp)
mov    %r15,-0x10(%rbp)
mov    %r10,-0x18(%rbp)
mov    %r11,-0x20(%rbp)
jmp    3c8c7 <decode_mcu_AC_refine+0x157>
mov    %rbx,%rdi
mov    -0x60(%rbp),%rsi
callq  3bdb0 <arith_decode>
test   %eax,%eax
jne    3c8eb <decode_mcu_AC_refine+0x17b>
mov    -0x58(%rbp),%rcx
mov    -0x50(%rbp),%rax
mov    %ax,0x0(%r13,%rcx,2)
add    $0x1,%r14d
mov    -0x30(%rbp),%rdx
mov    -0x40(%rbp),%rsi
mov    -0x38(%rbp),%r8
cmp    0x210(%rbx),%r14d
jle    3c8fb <decode_mcu_AC_refine+0x18b>
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
mov    $0x1,%eax
mov    -0x28(%rbp),%r15
leaveq 
retq   
mov    -0x58(%rbp),%rcx
mov    -0x48(%rbp),%rax
mov    %ax,0x0(%r13,%rcx,2)
jmp    3c8b7 <decode_mcu_AC_refine+0x147>
lea    -0x3(%r14,%r14,2),%eax
movslq %eax,%r15
add    0xd0(%r8,%rsi,8),%r15
cmp    %r14d,%edx
jl     3c916 <decode_mcu_AC_refine+0x1a6>
mov    %rdx,-0x30(%rbp)
jmp    3c970 <decode_mcu_AC_refine+0x200>
mov    %rbx,%rdi
mov    %r15,%rsi
mov    %rdx,-0x30(%rbp)
callq  3bdb0 <arith_decode>
test   %eax,%eax
je     3c970 <decode_mcu_AC_refine+0x200>
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
mov    $0x1,%eax
mov    -0x28(%rbp),%r15
leaveq 
retq   
lea    0x1(%r15),%rsi
mov    %rbx,%rdi
mov    %rax,-0x58(%rbp)
callq  3bdb0 <arith_decode>
test   %eax,%eax
jne    3c899 <decode_mcu_AC_refine+0x129>
movslq 0x210(%rbx),%rax
add    $0x1,%r14d
cmp    %r14d,%eax
jl     3c9b5 <decode_mcu_AC_refine+0x245>
add    $0x3,%r15
movslq %r14d,%rax
movslq (%r12,%rax,4),%rax
movswq 0x0(%r13,%rax,2),%rcx
test   %cx,%cx
je     3c944 <decode_mcu_AC_refine+0x1d4>
lea    0x2(%r15),%rsi
mov    %rax,%r15
mov    %rbx,%rdi
callq  3bdb0 <arith_decode>
test   %eax,%eax
je     3c8b7 <decode_mcu_AC_refine+0x147>
movswq 0x0(%r13,%r15,2),%rcx
test   %cx,%cx
js     3c9f8 <decode_mcu_AC_refine+0x288>
mov    -0x50(%rbp),%rax
add    %ecx,%eax
mov    %ax,0x0(%r13,%r15,2)
jmpq   3c8b7 <decode_mcu_AC_refine+0x147>
mov    (%rbx),%rax
movl   $0x7e,0x28(%rax)
mov    (%rbx),%rax
mov    0x8(%rax),%rax
mov    %rbx,%rdi
mov    $0xffffffffffffffff,%rsi
callq  *%rax
mov    -0x38(%rbp),%rax
movl   $0xffffffff,0x28(%rax)
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
mov    $0x1,%eax
mov    -0x28(%rbp),%r15
leaveq 
retq   
mov    -0x48(%rbp),%rax
add    %ecx,%eax
mov    %ax,0x0(%r13,%r15,2)
jmpq   3c8b7 <decode_mcu_AC_refine+0x147>
nopl   0x0(%rax)

000000000003ca10 <decode_mcu>:
push   %rbp
mov    %rsp,%rbp
sub    $0x90,%rsp
mov    %rsi,-0x80(%rbp)
mov    0x250(%rdi),%rax
mov    0x170(%rdi),%ecx
test   %ecx,%ecx
jne    3ca47 <decode_mcu+0x37>
mov    %r14,%rcx
mov    %rbx,%r14
mov    %rax,%rbx
mov    %r15,%rdx
mov    %r12,%r15
mov    %rdi,%r12
mov    %r13,%r8
jmp    3caa8 <decode_mcu+0x98>
mov    0x4c(%rax),%ecx
test   %ecx,%ecx
je     3ca62 <decode_mcu+0x52>
mov    %r14,%rcx
mov    %rbx,%r14
mov    %rax,%rbx
mov    %r15,%rdx
mov    %r12,%r15
mov    %rdi,%r12
jmp    3ca9c <decode_mcu+0x8c>
mov    %rdi,%rcx
mov    %r15,-0x88(%rbp)
mov    %rdi,-0x90(%rbp)
mov    %rcx,%rdi
mov    %r12,%r15
mov    %r14,%r12
mov    %rbx,%r14
mov    %rax,%rbx
callq  3bf60 <process_restart>
mov    %r12,%rcx
mov    -0x80(%rbp),%rsi
mov    -0x90(%rbp),%r12
mov    -0x88(%rbp),%rdx
mov    0x4c(%rbx),%eax
add    $0xffffffff,%eax
mov    %eax,0x4c(%rbx)
mov    %r13,%r8
mov    $0x1,%eax
movslq 0x28(%rbx),%rdi
cmp    $0xffffffff,%edi
jne    3cac7 <decode_mcu+0xb7>
mov    %r14,%rbx
mov    %rcx,%r14
mov    %r15,%r12
mov    %rdx,%r15
mov    %r8,%r13
leaveq 
retq   
mov    0x3150a(%rip),%rdi        # 6dfd8 <jpeg_natural_order@@LIBJPEG_6.2+0x129f4>
mov    %rdi,-0x38(%rbp)
lea    0x150(%rbx),%rdi
mov    %rdi,-0x90(%rbp)
xor    %r13d,%r13d
mov    $0xbd,%edi
mov    %rdi,-0x48(%rbp)
mov    $0xd9,%edi
mov    %rdx,-0x28(%rbp)
mov    %r14,-0x8(%rbp)
mov    %r15,-0x10(%rbp)
mov    %r8,-0x18(%rbp)
mov    %rcx,-0x20(%rbp)
mov    %rdi,-0x40(%rbp)
mov    %r13,%rcx
jmp    3cb65 <decode_mcu+0x155>
mov    -0x58(%rbp),%rax
movslq %eax,%rcx
mov    -0x38(%rbp),%rdx
movslq (%rdx,%rcx,4),%rcx
mov    %r14w,(%rsi,%rcx,2)
lea    0x1(%rax),%r13d
mov    -0x70(%rbp),%rax
cmp    $0x3f,%r13d
jg     3cb4f <decode_mcu+0x13f>
lea    -0x3(%r13,%r13,2),%ecx
movslq %ecx,%r14
add    0xd0(%rbx,%rax,8),%r14
mov    %r12,%rdi
mov    %r14,%rsi
callq  3bdb0 <arith_decode>
test   %eax,%eax
je     3cb97 <decode_mcu+0x187>
mov    -0x88(%rbp),%rax
lea    0x1(%rax),%ecx
xor    %r13d,%r13d
mov    $0x1,%eax
mov    -0x80(%rbp),%rsi
cmp    0x1e0(%r12),%ecx
jl     3cbe4 <decode_mcu+0x1d4>
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
mov    -0x28(%rbp),%r15
leaveq 
retq   
add    $0x1,%r13d
cmp    $0x3f,%r13d
jg     3ccb8 <decode_mcu+0x2a8>
add    $0x3,%r14
lea    0x1(%r14),%rsi
mov    %r12,%rdi
callq  3bdb0 <arith_decode>
test   %eax,%eax
je     3cb85 <decode_mcu+0x175>
mov    %r12,%rdi
mov    -0x90(%rbp),%rsi
callq  3bdb0 <arith_decode>
mov    %rax,-0x30(%rbp)
lea    0x2(%r14),%r15
mov    %r12,%rdi
mov    %r15,%rsi
callq  3bdb0 <arith_decode>
test   %eax,%eax
jne    3ccf9 <decode_mcu+0x2e9>
xor    %r14d,%r14d
add    $0xe,%r15
mov    %r13,-0x58(%rbp)
mov    %r14,%r13
jmpq   3cd4d <decode_mcu+0x33d>
test   %rsi,%rsi
movslq %ecx,%rax
je     3cbf0 <decode_mcu+0x1e0>
mov    (%rsi,%rax,8),%r13
mov    %r13,-0x60(%rbp)
movslq 0x1e4(%r12,%rax,4),%r15
mov    0x1b8(%r12,%r15,8),%rax
mov    %rax,-0x58(%rbp)
movslq 0x14(%rax),%rax
mov    %rax,-0x78(%rbp)
movslq 0x3c(%rbx,%r15,4),%r14
add    0x50(%rbx,%rax,8),%r14
mov    %r12,%rdi
mov    %r14,%rsi
mov    %rcx,-0x88(%rbp)
callq  3bdb0 <arith_decode>
test   %eax,%eax
je     3cd6c <decode_mcu+0x35c>
lea    0x1(%r14),%rsi
mov    %r12,%rdi
callq  3bdb0 <arith_decode>
mov    %rax,-0x68(%rbp)
movslq %eax,%rcx
lea    0x2(%rcx,%r14,1),%r14
mov    %rax,%r13
mov    %r12,%rdi
mov    %r14,%rsi
callq  3bdb0 <arith_decode>
test   %eax,%eax
jne    3cd9c <decode_mcu+0x38c>
mov    %r13,%rax
xor    %r13d,%r13d
mov    -0x78(%rbp),%rdi
movzbl 0x140(%rdi,%r12,1),%ecx
mov    $0x1,%edx
mov    %rdx,%rsi
shl    %cl,%rsi
sar    %rsi
cmp    %esi,%r13d
jl     3cdb2 <decode_mcu+0x3a2>
movzbl 0x150(%rdi,%r12,1),%ecx
shl    %cl,%rdx
sar    %rdx
cmp    %edx,%r13d
jg     3cdce <decode_mcu+0x3be>
lea    0x4(,%rax,4),%eax
mov    %eax,0x3c(%rbx,%r15,4)
mov    %r15,%rax
jmpq   3cdbe <decode_mcu+0x3ae>
mov    (%r12),%rax
movl   $0x7e,0x28(%rax)
mov    (%r12),%rax
mov    0x8(%rax),%rax
mov    %r12,%rdi
mov    $0xffffffffffffffff,%rsi
callq  *%rax
movl   $0xffffffff,0x28(%rbx)
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
mov    $0x1,%eax
mov    -0x28(%rbp),%r15
leaveq 
retq   
mov    %rax,%r14
mov    %r12,%rdi
mov    %r15,%rsi
callq  3bdb0 <arith_decode>
test   %eax,%eax
je     3cbd4 <decode_mcu+0x1c4>
mov    -0x70(%rbp),%rax
mov    0xd0(%rbx,%rax,8),%rcx
movzbl 0x160(%r12,%rax,1),%eax
cmp    %eax,%r13d
jle    3cddf <decode_mcu+0x3cf>
pushq  -0x40(%rbp)
popq   -0x50(%rbp)
jmpq   3cde5 <decode_mcu+0x3d5>
sar    %r13d
mov    %r12,%rdi
mov    %r15,%rsi
callq  3bdb0 <arith_decode>
test   %eax,%eax
je     3cd4d <decode_mcu+0x33d>
or     %r13d,%r14d
mov    %r13,%rax
and    $0xfffffffe,%eax
test   %eax,%eax
jne    3cd38 <decode_mcu+0x328>
mov    -0x30(%rbp),%rax
test   %eax,%eax
jne    3cdf9 <decode_mcu+0x3e9>
add    $0x1,%r14d
jmpq   3cdfc <decode_mcu+0x3ec>
movl   $0x0,0x3c(%rbx,%r15,4)
test   %r13,%r13
je     3cd85 <decode_mcu+0x375>
movswq 0x2c(%rbx,%r15,4),%rax
mov    %ax,0x0(%r13)
mov    -0x58(%rbp),%rax
movslq 0x18(%rax),%rax
mov    %rax,-0x70(%rbp)
mov    $0x1,%r13d
jmpq   3cb2a <decode_mcu+0x11a>
mov    -0x78(%rbp),%rcx
mov    0x50(%rbx,%rcx,8),%r14
add    $0x14,%r14
mov    %r15,-0x70(%rbp)
mov    %rax,%r13
jmp    3ce28 <decode_mcu+0x418>
movl   $0x0,0x3c(%rbx,%r15,4)
mov    %r15,%rax
lea    0xe(%r14),%r15
mov    %rax,-0x78(%rbp)
mov    %r13,%r14
jmpq   3ce59 <decode_mcu+0x449>
lea    0xc(,%rax,4),%eax
mov    %eax,0x3c(%rbx,%r15,4)
mov    %r15,%rax
jmp    3cdbe <decode_mcu+0x3ae>
pushq  -0x48(%rbp)
popq   -0x50(%rbp)
mov    -0x50(%rbp),%rax
lea    (%rax,%rcx,1),%r15
add    %r14d,%r14d
mov    %r13,-0x68(%rbp)
jmpq   3ce87 <decode_mcu+0x477>
not    %r14d
mov    -0x60(%rbp),%rsi
test   %rsi,%rsi
jne    3cb0e <decode_mcu+0xfe>
mov    -0x58(%rbp),%rax
jmpq   3cb22 <decode_mcu+0x112>
mov    %r13,%rax
and    $0x7fffffff,%eax
cmp    $0x4000,%eax
je     3ce9f <decode_mcu+0x48f>
add    $0x1,%r14
add    %r13d,%r13d
mov    %r12,%rdi
mov    %r14,%rsi
callq  3bdb0 <arith_decode>
test   %eax,%eax
jne    3ce12 <decode_mcu+0x402>
mov    -0x70(%rbp),%r15
mov    -0x68(%rbp),%rax
jmpq   3cc68 <decode_mcu+0x258>
sar    %r14d
mov    %r12,%rdi
mov    %r15,%rsi
callq  3bdb0 <arith_decode>
test   %eax,%eax
je     3ce59 <decode_mcu+0x449>
or     %r14d,%r13d
mov    %r14,%rax
and    $0xfffffffe,%eax
test   %eax,%eax
jne    3ce44 <decode_mcu+0x434>
mov    -0x68(%rbp),%rax
test   %eax,%eax
jne    3cee0 <decode_mcu+0x4d0>
add    $0x1,%r13d
jmp    3cee3 <decode_mcu+0x4d3>
mov    %r14,%rax
and    $0x7fffffff,%eax
cmp    $0x4000,%eax
je     3cefa <decode_mcu+0x4ea>
add    $0x1,%r15
add    %r14d,%r14d
mov    %r12,%rdi
mov    %r15,%rsi
callq  3bdb0 <arith_decode>
test   %eax,%eax
jne    3ce71 <decode_mcu+0x461>
mov    -0x68(%rbp),%r13
jmpq   3cbd4 <decode_mcu+0x1c4>
mov    (%r12),%rax
movl   $0x7e,0x28(%rax)
mov    (%r12),%rax
mov    0x8(%rax),%rax
mov    %r12,%rdi
mov    $0xffffffffffffffff,%rsi
callq  *%rax
movl   $0xffffffff,0x28(%rbx)
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
mov    $0x1,%eax
mov    -0x28(%rbp),%r15
leaveq 
retq   
not    %r13d
mov    -0x78(%rbp),%r15
add    0x2c(%rbx,%r15,4),%r13d
mov    %r13d,0x2c(%rbx,%r15,4)
mov    -0x60(%rbp),%r13
jmpq   3cd75 <decode_mcu+0x365>
mov    (%r12),%rax
movl   $0x7e,0x28(%rax)
mov    (%r12),%rax
mov    0x8(%rax),%rax
mov    %r12,%rdi
mov    $0xffffffffffffffff,%rsi
callq  *%rax
movl   $0xffffffff,0x28(%rbx)
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
mov    $0x1,%eax
mov    -0x28(%rbp),%r15
leaveq 
retq   
nopl   0x0(%rax,%rax,1)

000000000003cf40 <start_pass>:
push   %rbp
mov    %rsp,%rbp
sub    $0x40,%rsp
mov    %rbx,-0x8(%rbp)
mov    %r12,-0x10(%rbp)
mov    %r13,-0x18(%rbp)
mov    %r14,-0x20(%rbp)
mov    %r15,-0x28(%rbp)
mov    0x250(%rdi),%r14
mov    %r14,-0x40(%rbp)
mov    $0xffffffffffffffff,%rax
mov    $0x1,%r13d
mov    $0x100,%ecx
xor    %esi,%esi
mov    $0x40,%edx
movslq 0x138(%rdi),%rbx
test   %ebx,%ebx
jne    3cfd0 <start_pass+0x90>
movslq 0x20c(%rdi),%rbx
test   %ebx,%ebx
jne    3d04b <start_pass+0x10b>
movslq 0x214(%rdi),%rbx
test   %ebx,%ebx
jne    3d04b <start_pass+0x10b>
movslq 0x218(%rdi),%rbx
test   %ebx,%ebx
jne    3d04b <start_pass+0x10b>
movslq 0x210(%rdi),%rbx
cmp    $0x3f,%ebx
jle    3d088 <start_pass+0x148>
mov    %rdi,%rbx
jmpq   3d075 <start_pass+0x135>
movslq 0x20c(%rdi),%rdx
test   %edx,%edx
je     3d092 <start_pass+0x152>
movslq 0x210(%rdi),%rcx
cmp    %ecx,%edx
jle    3d0cb <start_pass+0x18b>
mov    (%rdi),%rcx
movl   $0x10,0x28(%rcx)
movslq 0x20c(%rdi),%rdx
mov    (%rdi),%rcx
mov    %edx,0x2c(%rcx)
movslq 0x210(%rdi),%rdx
mov    (%rdi),%rcx
mov    %edx,0x30(%rcx)
movslq 0x214(%rdi),%rdx
mov    (%rdi),%rcx
mov    %edx,0x34(%rcx)
movslq 0x218(%rdi),%rdx
mov    (%rdi),%rcx
mov    %edx,0x38(%rcx)
mov    (%rdi),%rcx
mov    (%rcx),%rcx
mov    %rax,%r12
mov    %rsi,%r13
mov    %rdi,%rbx
callq  *%rcx
mov    %r12,%rax
mov    %r13,%rsi
mov    %rsi,%rcx
jmpq   3d151 <start_pass+0x211>
mov    (%rdi),%rcx
movl   $0x7a,0x28(%rcx)
mov    (%rdi),%rcx
mov    0x8(%rcx),%rcx
mov    %rdx,%r12
mov    %rsi,%r15
mov    %rax,%rsi
mov    %rdi,%rbx
callq  *%rcx
mov    %r12,%rdx
mov    %r15,%rsi
mov    $0x100,%ecx
lea    -0x66c(%rip),%rax        # 3ca10 <decode_mcu>
mov    %rax,0x8(%r14)
mov    %rsi,%r12
jmpq   3d2c7 <start_pass+0x387>
cmp    $0x3e,%ebx
jle    3d04b <start_pass+0x10b>
mov    %rdi,%rbx
jmp    3d075 <start_pass+0x135>
movslq 0x210(%rdi),%rcx
test   %ecx,%ecx
jne    3cfee <start_pass+0xae>
movslq 0x214(%rdi),%rcx
test   %ecx,%ecx
jne    3d30f <start_pass+0x3cf>
movslq 0x218(%rdi),%rcx
cmp    $0xd,%ecx
jg     3cfee <start_pass+0xae>
mov    %rdi,%rbx
mov    %rsi,%rcx
jmpq   3d151 <start_pass+0x211>
cmp    $0x3f,%ecx
jg     3cfee <start_pass+0xae>
movslq 0x1b0(%rdi),%rcx
cmp    $0x1,%ecx
jne    3cfee <start_pass+0xae>
jmp    3d0a1 <start_pass+0x161>
movslq %r14d,%r15
movslq (%r12,%r15,4),%rcx
test   %ecx,%ecx
jns    3d0f4 <start_pass+0x1b4>
mov    %rsi,%rcx
movslq 0x214(%rbx),%rdx
cmp    %ecx,%edx
je     3d12f <start_pass+0x1ef>
mov    (%rbx),%rcx
movl   $0x73,0x28(%rcx)
mov    (%rbx),%rcx
mov    %r13d,0x2c(%rcx)
mov    (%rbx),%rcx
mov    %r14d,0x30(%rcx)
mov    (%rbx),%rcx
mov    0x8(%rcx),%rcx
mov    %rax,%rsi
mov    %rbx,%rdi
callq  *%rcx
mov    $0xffffffffffffffff,%rax
xor    %esi,%esi
movslq 0x218(%rbx),%rcx
mov    %ecx,(%r12,%r15,4)
add    $0x1,%r14d
movslq 0x210(%rbx),%rcx
cmp    %r14d,%ecx
jge    3d0e6 <start_pass+0x1a6>
mov    -0x38(%rbp),%rcx
add    $0x1,%ecx
mov    %rcx,-0x38(%rbp)
movslq 0x1b0(%rbx),%rdx
cmp    %ecx,%edx
jg     3d326 <start_pass+0x3e6>
movslq 0x214(%rbx),%rax
test   %eax,%eax
je     3d398 <start_pass+0x458>
movslq 0x20c(%rbx),%rax
test   %eax,%eax
je     3d3ce <start_pass+0x48e>
lea    -0xa19(%rip),%rax        # 3c770 <decode_mcu_AC_refine>
mov    -0x40(%rbp),%r14
mov    %rax,0x8(%r14)
mov    $0x1,%r13d
mov    $0x40,%edx
mov    $0x100,%ecx
mov    %rsi,%r12
jmpq   3d2c7 <start_pass+0x387>
mov    0x8(%rbx),%rcx
mov    (%rcx),%rcx
mov    %rbx,%rdi
mov    %r12,-0x30(%rbp)
mov    %r13,%rsi
mov    %r8,%r13
mov    %rax,%r12
callq  *%rcx
mov    %rax,0x50(%r14,%r12,8)
mov    %r12,%rax
mov    -0x30(%rbp),%r12
xor    %esi,%esi
mov    $0x40,%edx
mov    0x50(%r14,%rax,8),%rdi
callq  41e0 <memset@plt>
movl   $0x0,0x2c(%r14,%r13,4)
movl   $0x0,0x3c(%r14,%r13,4)
mov    $0x1,%r13d
xor    %esi,%esi
mov    $0x40,%edx
mov    $0x100,%ecx
movslq 0x138(%rbx),%rax
test   %eax,%eax
je     3d21d <start_pass+0x2dd>
movslq 0x20c(%rbx),%rax
test   %eax,%eax
je     3d2bf <start_pass+0x37f>
movslq 0x18(%r15),%r15
test   %r15d,%r15d
js     3d22c <start_pass+0x2ec>
cmp    $0xf,%r15d
jle    3d25e <start_pass+0x31e>
mov    (%rbx),%rax
movl   $0x7d,0x28(%rax)
mov    (%rbx),%rax
mov    %r15d,0x2c(%rax)
mov    (%rbx),%rax
mov    (%rax),%rax
mov    %rsi,%r13
mov    %rbx,%rdi
callq  *%rax
mov    %r13,%rsi
mov    $0x1,%r13d
mov    $0x40,%edx
mov    $0x100,%ecx
mov    0xd0(%r14,%r15,8),%rax
test   %rax,%rax
jne    3d29e <start_pass+0x35e>
mov    0x8(%rbx),%rax
mov    (%rax),%rax
mov    %rcx,%rdx
mov    %r13,%rcx
mov    %rsi,%r13
mov    %rcx,%rsi
mov    %rbx,%rdi
callq  *%rax
mov    %rax,0xd0(%r14,%r15,8)
mov    %r13,%rsi
mov    $0x1,%r13d
mov    $0x40,%edx
mov    $0x100,%ecx
mov    0xd0(%r14,%r15,8),%rdi
mov    %rdx,%r14
mov    %rcx,%rdx
mov    %rsi,%r15
callq  41e0 <memset@plt>
mov    %r14,%rdx
mov    %r15,%rsi
mov    $0x100,%ecx
add    $0x1,%r12d
mov    -0x40(%rbp),%r14
movslq 0x1b0(%rbx),%rax
cmp    %r12d,%eax
jg     3d3f5 <start_pass+0x4b5>
movq   $0x0,0x18(%r14)
movq   $0x0,0x20(%r14)
movl   $0xfffffff0,0x28(%r14)
mov    0x170(%rbx),%eax
mov    %eax,0x4c(%r14)
mov    -0x28(%rbp),%r15
mov    -0x20(%rbp),%r14
mov    -0x18(%rbp),%r13
mov    -0x10(%rbp),%r12
mov    -0x8(%rbp),%rbx
leaveq 
retq   
movslq 0x218(%rdi),%rdx
add    $0xffffffff,%ecx
cmp    %ecx,%edx
jne    3cfee <start_pass+0xae>
jmpq   3d0b0 <start_pass+0x170>
movslq %ecx,%rcx
mov    0x1b8(%rbx,%rcx,8),%rcx
movslq 0x4(%rcx),%r13
mov    %r13,%r12
shl    $0x8,%r12
add    0xc0(%rbx),%r12
movslq 0x20c(%rbx),%rcx
test   %ecx,%ecx
je     3d38c <start_pass+0x44c>
movslq (%r12),%rcx
test   %ecx,%ecx
jns    3d38c <start_pass+0x44c>
mov    (%rbx),%rcx
movl   $0x73,0x28(%rcx)
mov    (%rbx),%rcx
mov    %r13d,0x2c(%rcx)
mov    (%rbx),%rcx
movl   $0x0,0x30(%rcx)
mov    (%rbx),%rcx
mov    0x8(%rcx),%rcx
mov    %rsi,%r14
mov    %rax,%r15
mov    %rbx,%rdi
mov    %r15,%rsi
callq  *%rcx
mov    %r15,%rax
mov    %r14,%rsi
movslq 0x20c(%rbx),%r14
jmpq   3d13e <start_pass+0x1fe>
movslq 0x20c(%rbx),%rax
test   %eax,%eax
je     3d488 <start_pass+0x548>
lea    -0x103e(%rip),%rax        # 3c370 <decode_mcu_AC_first>
mov    -0x40(%rbp),%r14
mov    %rax,0x8(%r14)
mov    $0x1,%r13d
mov    $0x40,%edx
mov    $0x100,%ecx
mov    %rsi,%r12
jmpq   3d2c7 <start_pass+0x387>
lea    -0xd35(%rip),%rax        # 3c6a0 <decode_mcu_DC_refine>
mov    -0x40(%rbp),%r14
mov    %rax,0x8(%r14)
mov    $0x1,%r13d
mov    $0x40,%edx
mov    $0x100,%ecx
mov    %rsi,%r12
jmpq   3d2c7 <start_pass+0x387>
movslq %r12d,%r8
mov    0x1b8(%rbx,%r8,8),%r15
movslq 0x138(%rbx),%rax
test   %eax,%eax
je     3d429 <start_pass+0x4e9>
movslq 0x20c(%rbx),%rax
test   %eax,%eax
jne    3d203 <start_pass+0x2c3>
movslq 0x214(%rbx),%rax
test   %eax,%eax
jne    3d203 <start_pass+0x2c3>
movslq 0x14(%r15),%rax
test   %eax,%eax
js     3d436 <start_pass+0x4f6>
cmp    $0xf,%eax
jle    3d472 <start_pass+0x532>
mov    (%rbx),%rcx
movl   $0x7d,0x28(%rcx)
mov    (%rbx),%rcx
mov    %eax,0x2c(%rcx)
mov    (%rbx),%rcx
mov    (%rcx),%rcx
mov    %rbx,%rdi
mov    %r12,-0x38(%rbp)
mov    %r8,%r12
mov    %rax,%r13
callq  *%rcx
mov    %r13,%rax
mov    %r12,%r8
mov    $0x1,%r13d
mov    -0x38(%rbp),%r12
xor    %esi,%esi
mov    $0x40,%edx
mov    0x50(%r14,%rax,8),%rcx
test   %rcx,%rcx
je     3d1a9 <start_pass+0x269>
mov    %r8,%r13
jmpq   3d1d5 <start_pass+0x295>
lea    -0x13cf(%rip),%rax        # 3c0c0 <decode_mcu_DC_first>
mov    -0x40(%rbp),%r14
mov    %rax,0x8(%r14)
mov    $0x1,%r13d
mov    $0x40,%edx
mov    $0x100,%ecx
mov    %rsi,%r12
jmpq   3d2c7 <start_pass+0x387>
nop

000000000003d4b0 <jsimd_can_rgb_ycc>:
push   %rbp
mov    %rsp,%rbp
callq  3dea0 <init_simd>
xor    %eax,%eax
mov    0x30db7(%rip),%ecx        # 6e278 <simd_support>
and    $0x8,%ecx
test   %ecx,%ecx
jne    3d4ca <jsimd_can_rgb_ycc+0x1a>
leaveq 
retq   
lea    0x1e74f(%rip),%rcx        # 5bc20 <PW_F0299_F0337>
and    $0xf,%rcx
test   %rcx,%rcx
jne    3d4e1 <jsimd_can_rgb_ycc+0x31>
mov    $0x1,%eax
leaveq 
retq   
leaveq 
retq   
data16 nopw %cs:0x0(%rax,%rax,1)
xchg   %ax,%ax

000000000003d4f0 <jsimd_can_rgb_gray>:
push   %rbp
mov    %rsp,%rbp
callq  3dea0 <init_simd>
xor    %eax,%eax
mov    0x30d77(%rip),%ecx        # 6e278 <simd_support>
and    $0x8,%ecx
test   %ecx,%ecx
jne    3d50a <jsimd_can_rgb_gray+0x1a>
leaveq 
retq   
lea    0x1e76f(%rip),%rcx        # 5bc80 <PW_F0299_F0337>
and    $0xf,%rcx
test   %rcx,%rcx
jne    3d521 <jsimd_can_rgb_gray+0x31>
mov    $0x1,%eax
leaveq 
retq   
leaveq 
retq   
data16 nopw %cs:0x0(%rax,%rax,1)
xchg   %ax,%ax

000000000003d530 <jsimd_can_ycc_rgb>:
push   %rbp
mov    %rsp,%rbp
callq  3dea0 <init_simd>
xor    %eax,%eax
mov    0x30d37(%rip),%ecx        # 6e278 <simd_support>
and    $0x8,%ecx
test   %ecx,%ecx
jne    3d54a <jsimd_can_ycc_rgb+0x1a>
leaveq 
retq   
lea    0x2e75f(%rip),%rcx        # 6bcb0 <PW_F0402>
and    $0xf,%rcx
test   %rcx,%rcx
jne    3d561 <jsimd_can_ycc_rgb+0x31>
mov    $0x1,%eax
leaveq 
retq   
leaveq 
retq   
data16 nopw %cs:0x0(%rax,%rax,1)
xchg   %ax,%ax

000000000003d570 <jsimd_can_ycc_rgb565>:
push   %rbp
mov    %rsp,%rbp
xor    %eax,%eax
leaveq 
retq   
nopl   0x0(%rax,%rax,1)

000000000003d580 <jsimd_rgb_ycc_convert>:
push   %rbp
mov    %rsp,%rbp
lea    0xcc5(%rip),%rax        # 3e250 <jsimd_rgb_ycc_convert_sse2>
mov    0x3c(%rdi),%r9d
add    $0xfffffffa,%r9d
cmp    $0x9,%r9d
ja     3d5b1 <jsimd_rgb_ycc_convert+0x31>
lea    0x1e548(%rip),%r10        # 5bae8 <jpeg_aritab+0x390>
movslq (%r10,%r9,4),%r9
add    %r10,%r9
jmpq   *%r9
lea    0x276f(%rip),%rax        # 3fd20 <jsimd_extxrgb_ycc_convert_sse2>
mov    0x30(%rdi),%edi
callq  *%rax
leaveq 
retq   
lea    0x1121(%rip),%rax        # 3e6e0 <jsimd_extrgb_ycc_convert_sse2>
jmp    3d5b1 <jsimd_rgb_ycc_convert+0x31>
lea    0x15a8(%rip),%rax        # 3eb70 <jsimd_extrgbx_ycc_convert_sse2>
jmp    3d5b1 <jsimd_rgb_ycc_convert+0x31>
lea    0x19ff(%rip),%rax        # 3efd0 <jsimd_extbgr_ycc_convert_sse2>
jmp    3d5b1 <jsimd_rgb_ycc_convert+0x31>
lea    0x1e86(%rip),%rax        # 3f460 <jsimd_extbgrx_ycc_convert_sse2>
jmp    3d5b1 <jsimd_rgb_ycc_convert+0x31>
lea    0x22dd(%rip),%rax        # 3f8c0 <jsimd_extxbgr_ycc_convert_sse2>
jmp    3d5b1 <jsimd_rgb_ycc_convert+0x31>
data16 nopw %cs:0x0(%rax,%rax,1)

000000000003d5f0 <jsimd_rgb_gray_convert>:
push   %rbp
mov    %rsp,%rbp
lea    0x2b85(%rip),%rax        # 40180 <jsimd_rgb_gray_convert_sse2>
mov    0x3c(%rdi),%r9d
add    $0xfffffffa,%r9d
cmp    $0x9,%r9d
ja     3d621 <jsimd_rgb_gray_convert+0x31>
lea    0x1e500(%rip),%r10        # 5bb10 <jpeg_aritab+0x3b8>
movslq (%r10,%r9,4),%r9
add    %r10,%r9
jmpq   *%r9
lea    0x3b4f(%rip),%rax        # 41170 <jsimd_extxrgb_gray_convert_sse2>
mov    0x30(%rdi),%edi
callq  *%rax
leaveq 
retq   
lea    0x2e11(%rip),%rax        # 40440 <jsimd_extrgb_gray_convert_sse2>
jmp    3d621 <jsimd_rgb_gray_convert+0x31>
lea    0x30c8(%rip),%rax        # 40700 <jsimd_extrgbx_gray_convert_sse2>
jmp    3d621 <jsimd_rgb_gray_convert+0x31>
lea    0x334f(%rip),%rax        # 40990 <jsimd_extbgr_gray_convert_sse2>
jmp    3d621 <jsimd_rgb_gray_convert+0x31>
lea    0x3606(%rip),%rax        # 40c50 <jsimd_extbgrx_gray_convert_sse2>
jmp    3d621 <jsimd_rgb_gray_convert+0x31>
lea    0x388d(%rip),%rax        # 40ee0 <jsimd_extxbgr_gray_convert_sse2>
jmp    3d621 <jsimd_rgb_gray_convert+0x31>
data16 nopw %cs:0x0(%rax,%rax,1)

000000000003d660 <jsimd_ycc_rgb_convert>:
push   %rbp
mov    %rsp,%rbp
lea    0x48f5(%rip),%rax        # 41f60 <jsimd_ycc_rgb_convert_sse2>
mov    0x40(%rdi),%r9d
add    $0xfffffffa,%r9d
cmp    $0x9,%r9d
ja     3d691 <jsimd_ycc_rgb_convert+0x31>
lea    0x1e4b8(%rip),%r10        # 5bb38 <jpeg_aritab+0x3e0>
movslq (%r10,%r9,4),%r9
add    %r10,%r9
jmpq   *%r9
lea    0x5d9f(%rip),%rax        # 43430 <jsimd_ycc_extxrgb_convert_sse2>
mov    0x88(%rdi),%edi
callq  *%rax
leaveq 
retq   
lea    0x4c5e(%rip),%rax        # 42300 <jsimd_ycc_extrgb_convert_sse2>
jmp    3d691 <jsimd_ycc_rgb_convert+0x31>
lea    0x4ff5(%rip),%rax        # 426a0 <jsimd_ycc_extrgbx_convert_sse2>
jmp    3d691 <jsimd_ycc_rgb_convert+0x31>
lea    0x533c(%rip),%rax        # 429f0 <jsimd_ycc_extbgr_convert_sse2>
jmp    3d691 <jsimd_ycc_rgb_convert+0x31>
lea    0x56d3(%rip),%rax        # 42d90 <jsimd_ycc_extbgrx_convert_sse2>
jmp    3d691 <jsimd_ycc_rgb_convert+0x31>
lea    0x5a1a(%rip),%rax        # 430e0 <jsimd_ycc_extxbgr_convert_sse2>
jmp    3d691 <jsimd_ycc_rgb_convert+0x31>
nopl   0x0(%rax,%rax,1)

000000000003d6d0 <jsimd_ycc_rgb565_convert>:
push   %rbp
mov    %rsp,%rbp
leaveq 
retq   
nopw   %cs:0x0(%rax,%rax,1)

000000000003d6e0 <jsimd_can_h2v2_downsample>:
push   %rbp
mov    %rsp,%rbp
callq  3dea0 <init_simd>
mov    0x30b89(%rip),%eax        # 6e278 <simd_support>
and    $0x8,%eax
test   %eax,%eax
je     3d6fd <jsimd_can_h2v2_downsample+0x1d>
mov    $0x1,%eax
leaveq 
retq   
xor    %eax,%eax
leaveq 
retq   
data16 nopw %cs:0x0(%rax,%rax,1)
nopl   0x0(%rax)

000000000003d710 <jsimd_can_h2v1_downsample>:
push   %rbp
mov    %rsp,%rbp
callq  3dea0 <init_simd>
mov    0x30b59(%rip),%eax        # 6e278 <simd_support>
and    $0x8,%eax
test   %eax,%eax
je     3d72d <jsimd_can_h2v1_downsample+0x1d>
mov    $0x1,%eax
leaveq 
retq   
xor    %eax,%eax
leaveq 
retq   
data16 nopw %cs:0x0(%rax,%rax,1)
nopl   0x0(%rax)

000000000003d740 <jsimd_h2v2_downsample>:
push   %rbp
mov    %rsp,%rbp
mov    0x30(%rdi),%r9d
movslq 0x13c(%rdi),%rdi
mov    0xc(%rsi),%r8d
mov    0x1c(%rsi),%eax
mov    %rdi,%rsi
mov    %r9,%rdi
mov    %rcx,%r9
mov    %rax,%rcx
mov    %r8,%rax
mov    %rdx,%r8
mov    %rax,%rdx
callq  41de0 <jsimd_h2v2_downsample_sse2>
leaveq 
retq   
data16 nopw %cs:0x0(%rax,%rax,1)
nopl   (%rax)

000000000003d780 <jsimd_h2v1_downsample>:
push   %rbp
mov    %rsp,%rbp
mov    0x30(%rdi),%r9d
movslq 0x13c(%rdi),%rdi
mov    0xc(%rsi),%r8d
mov    0x1c(%rsi),%eax
mov    %rdi,%rsi
mov    %r9,%rdi
mov    %rcx,%r9
mov    %rax,%rcx
mov    %r8,%rax
mov    %rdx,%r8
mov    %rax,%rdx
callq  41cb0 <jsimd_h2v1_downsample_sse2>
leaveq 
retq   
data16 nopw %cs:0x0(%rax,%rax,1)
nopl   (%rax)

000000000003d7c0 <jsimd_can_h2v2_upsample>:
push   %rbp
mov    %rsp,%rbp
callq  3dea0 <init_simd>
mov    0x30aa9(%rip),%eax        # 6e278 <simd_support>
and    $0x8,%eax
test   %eax,%eax
je     3d7dd <jsimd_can_h2v2_upsample+0x1d>
mov    $0x1,%eax
leaveq 
retq   
xor    %eax,%eax
leaveq 
retq   
data16 nopw %cs:0x0(%rax,%rax,1)
nopl   0x0(%rax)

000000000003d7f0 <jsimd_can_h2v1_upsample>:
push   %rbp
mov    %rsp,%rbp
callq  3dea0 <init_simd>
mov    0x30a79(%rip),%eax        # 6e278 <simd_support>
and    $0x8,%eax
test   %eax,%eax
je     3d80d <jsimd_can_h2v1_upsample+0x1d>
mov    $0x1,%eax
leaveq 
retq   
xor    %eax,%eax
leaveq 
retq   
data16 nopw %cs:0x0(%rax,%rax,1)
nopl   0x0(%rax)

000000000003d820 <jsimd_h2v2_upsample>:
push   %rbp
mov    %rsp,%rbp
movslq 0x19c(%rdi),%rax
mov    0x88(%rdi),%esi
mov    %rax,%rdi
callq  45990 <jsimd_h2v2_upsample_sse2>
leaveq 
retq   
nopl   0x0(%rax,%rax,1)

000000000003d840 <jsimd_h2v1_upsample>:
push   %rbp
mov    %rsp,%rbp
movslq 0x19c(%rdi),%rax
mov    0x88(%rdi),%esi
mov    %rax,%rdi
callq  458d0 <jsimd_h2v1_upsample_sse2>
leaveq 
retq   
nopl   0x0(%rax,%rax,1)

000000000003d860 <jsimd_can_h2v2_fancy_upsample>:
push   %rbp
mov    %rsp,%rbp
callq  3dea0 <init_simd>
xor    %eax,%eax
mov    0x30a07(%rip),%ecx        # 6e278 <simd_support>
and    $0x8,%ecx
test   %ecx,%ecx
jne    3d87a <jsimd_can_h2v2_fancy_upsample+0x1a>
leaveq 
retq   
lea    0x2e4cf(%rip),%rcx        # 6bd50 <PW_ONE>
and    $0xf,%rcx
test   %rcx,%rcx
jne    3d891 <jsimd_can_h2v2_fancy_upsample+0x31>
mov    $0x1,%eax
leaveq 
retq   
leaveq 
retq   
data16 nopw %cs:0x0(%rax,%rax,1)
xchg   %ax,%ax

000000000003d8a0 <jsimd_can_h2v1_fancy_upsample>:
push   %rbp
mov    %rsp,%rbp
callq  3dea0 <init_simd>
xor    %eax,%eax
mov    0x309c7(%rip),%ecx        # 6e278 <simd_support>
and    $0x8,%ecx
test   %ecx,%ecx
jne    3d8ba <jsimd_can_h2v1_fancy_upsample+0x1a>
leaveq 
retq   
lea    0x2e48f(%rip),%rcx        # 6bd50 <PW_ONE>
and    $0xf,%rcx
test   %rcx,%rcx
jne    3d8d1 <jsimd_can_h2v1_fancy_upsample+0x31>
mov    $0x1,%eax
leaveq 
retq   
leaveq 
retq   
data16 nopw %cs:0x0(%rax,%rax,1)
xchg   %ax,%ax

000000000003d8e0 <jsimd_h2v2_fancy_upsample>:
push   %rbp
mov    %rsp,%rbp
movslq 0x19c(%rdi),%rdi
mov    0x28(%rsi),%esi
callq  45520 <jsimd_h2v2_fancy_upsample_sse2>
leaveq 
retq   
data16 nopw %cs:0x0(%rax,%rax,1)

000000000003d900 <jsimd_h2v1_fancy_upsample>:
push   %rbp
mov    %rsp,%rbp
movslq 0x19c(%rdi),%rdi
mov    0x28(%rsi),%esi
callq  45390 <jsimd_h2v1_fancy_upsample_sse2>
leaveq 
retq   
data16 nopw %cs:0x0(%rax,%rax,1)

000000000003d920 <jsimd_can_h2v2_merged_upsample>:
push   %rbp
mov    %rsp,%rbp
callq  3dea0 <init_simd>
xor    %eax,%eax
mov    0x30947(%rip),%ecx        # 6e278 <simd_support>
and    $0x8,%ecx
test   %ecx,%ecx
jne    3d93a <jsimd_can_h2v2_merged_upsample+0x1a>
leaveq 
retq   
lea    0x2e3bf(%rip),%rcx        # 6bd00 <PW_F0402>
and    $0xf,%rcx
test   %rcx,%rcx
jne    3d951 <jsimd_can_h2v2_merged_upsample+0x31>
mov    $0x1,%eax
leaveq 
retq   
leaveq 
retq   
data16 nopw %cs:0x0(%rax,%rax,1)
xchg   %ax,%ax

000000000003d960 <jsimd_can_h2v1_merged_upsample>:
push   %rbp
mov    %rsp,%rbp
callq  3dea0 <init_simd>
xor    %eax,%eax
mov    0x30907(%rip),%ecx        # 6e278 <simd_support>
and    $0x8,%ecx
test   %ecx,%ecx
jne    3d97a <jsimd_can_h2v1_merged_upsample+0x1a>
leaveq 
retq   
lea    0x2e37f(%rip),%rcx        # 6bd00 <PW_F0402>
and    $0xf,%rcx
test   %rcx,%rcx
jne    3d991 <jsimd_can_h2v1_merged_upsample+0x31>
mov    $0x1,%eax
leaveq 
retq   
leaveq 
retq   
data16 nopw %cs:0x0(%rax,%rax,1)
xchg   %ax,%ax

000000000003d9a0 <jsimd_h2v2_merged_upsample>:
push   %rbp
mov    %rsp,%rbp
lea    0x6165(%rip),%rax        # 43b10 <jsimd_h2v2_merged_upsample_sse2>
mov    0x40(%rdi),%r8d
add    $0xfffffffa,%r8d
cmp    $0x9,%r8d
ja     3d9d1 <jsimd_h2v2_merged_upsample+0x31>
lea    0x1e1a0(%rip),%r9        # 5bb60 <jpeg_aritab+0x408>
movslq (%r9,%r8,4),%r8
add    %r9,%r8
jmpq   *%r8
lea    0x791f(%rip),%rax        # 452f0 <jsimd_h2v2_extxrgb_merged_upsample_sse2>
mov    0x88(%rdi),%edi
callq  *%rax
leaveq 
retq   
lea    0x655e(%rip),%rax        # 43f40 <jsimd_h2v2_extrgb_merged_upsample_sse2>
jmp    3d9d1 <jsimd_h2v2_merged_upsample+0x31>
lea    0x6935(%rip),%rax        # 44320 <jsimd_h2v2_extrgbx_merged_upsample_sse2>
jmp    3d9d1 <jsimd_h2v2_merged_upsample+0x31>
lea    0x6d5c(%rip),%rax        # 44750 <jsimd_h2v2_extbgr_merged_upsample_sse2>
jmp    3d9d1 <jsimd_h2v2_merged_upsample+0x31>
lea    0x7133(%rip),%rax        # 44b30 <jsimd_h2v2_extbgrx_merged_upsample_sse2>
jmp    3d9d1 <jsimd_h2v2_merged_upsample+0x31>
lea    0x750a(%rip),%rax        # 44f10 <jsimd_h2v2_extxbgr_merged_upsample_sse2>
jmp    3d9d1 <jsimd_h2v2_merged_upsample+0x31>
nopl   0x0(%rax,%rax,1)

000000000003da10 <jsimd_h2v1_merged_upsample>:
push   %rbp
mov    %rsp,%rbp
lea    0x5d65(%rip),%rax        # 43780 <jsimd_h2v1_merged_upsample_sse2>
mov    0x40(%rdi),%r8d
add    $0xfffffffa,%r8d
cmp    $0x9,%r8d
ja     3da41 <jsimd_h2v1_merged_upsample+0x31>
lea    0x1e158(%rip),%r9        # 5bb88 <jpeg_aritab+0x430>
movslq (%r9,%r8,4),%r8
add    %r9,%r8
jmpq   *%r8
lea    0x756f(%rip),%rax        # 44fb0 <jsimd_h2v1_extxrgb_merged_upsample_sse2>
mov    0x88(%rdi),%edi
callq  *%rax
leaveq 
retq   
lea    0x615e(%rip),%rax        # 43bb0 <jsimd_h2v1_extrgb_merged_upsample_sse2>
jmp    3da41 <jsimd_h2v1_merged_upsample+0x31>
lea    0x6585(%rip),%rax        # 43fe0 <jsimd_h2v1_extrgbx_merged_upsample_sse2>
jmp    3da41 <jsimd_h2v1_merged_upsample+0x31>
lea    0x695c(%rip),%rax        # 443c0 <jsimd_h2v1_extbgr_merged_upsample_sse2>
jmp    3da41 <jsimd_h2v1_merged_upsample+0x31>
lea    0x6d83(%rip),%rax        # 447f0 <jsimd_h2v1_extbgrx_merged_upsample_sse2>
jmp    3da41 <jsimd_h2v1_merged_upsample+0x31>
lea    0x715a(%rip),%rax        # 44bd0 <jsimd_h2v1_extxbgr_merged_upsample_sse2>
jmp    3da41 <jsimd_h2v1_merged_upsample+0x31>
nopl   0x0(%rax,%rax,1)

000000000003da80 <jsimd_can_huff_encode_one_block>:
push   %rbp
mov    %rsp,%rbp
callq  3dea0 <init_simd>
xor    %eax,%eax
mov    0x307e7(%rip),%ecx        # 6e278 <simd_support>
and    $0x8,%ecx
test   %ecx,%ecx
jne    3da9a <jsimd_can_huff_encode_one_block+0x1a>
leaveq 
retq   
mov    0x307dc(%rip),%ecx        # 6e27c <simd_huffman>
test   %ecx,%ecx
jne    3daa6 <jsimd_can_huff_encode_one_block+0x26>
leaveq 
retq   
lea    0x1e203(%rip),%rcx        # 5bcb0 <jconst_huff_encode_one_block>
and    $0xf,%rcx
test   %rcx,%rcx
jne    3dabd <jsimd_can_huff_encode_one_block+0x3d>
mov    $0x1,%eax
leaveq 
retq   
leaveq 
retq   
nop

000000000003dac0 <jsimd_huff_encode_one_block>:
push   %rbp
mov    %rsp,%rbp
callq  41400 <jsimd_huff_encode_one_block_sse2>
leaveq 
retq   
nopl   0x0(%rax,%rax,1)

000000000003dad0 <jsimd_can_convsamp>:
push   %rbp
mov    %rsp,%rbp
callq  3dea0 <init_simd>
mov    0x30799(%rip),%eax        # 6e278 <simd_support>
and    $0x8,%eax
test   %eax,%eax
je     3daed <jsimd_can_convsamp+0x1d>
mov    $0x1,%eax
leaveq 
retq   
xor    %eax,%eax
leaveq 
retq   
data16 nopw %cs:0x0(%rax,%rax,1)
nopl   0x0(%rax)

000000000003db00 <jsimd_can_convsamp_float>:
push   %rbp
mov    %rsp,%rbp
callq  3dea0 <init_simd>
mov    0x30769(%rip),%eax        # 6e278 <simd_support>
and    $0x8,%eax
test   %eax,%eax
je     3db1d <jsimd_can_convsamp_float+0x1d>
mov    $0x1,%eax
leaveq 
retq   
xor    %eax,%eax
leaveq 
retq   
data16 nopw %cs:0x0(%rax,%rax,1)
nopl   0x0(%rax)

000000000003db30 <jsimd_convsamp>:
push   %rbp
mov    %rsp,%rbp
callq  48020 <jsimd_convsamp_sse2>
leaveq 
retq   
nopl   0x0(%rax,%rax,1)

000000000003db40 <jsimd_convsamp_float>:
push   %rbp
mov    %rsp,%rbp
callq  47ec0 <jsimd_convsamp_float_sse2>
leaveq 
retq   
nopl   0x0(%rax,%rax,1)

000000000003db50 <jsimd_can_fdct_islow>:
push   %rbp
mov    %rsp,%rbp
callq  3dea0 <init_simd>
xor    %eax,%eax
mov    0x30717(%rip),%ecx        # 6e278 <simd_support>
and    $0x8,%ecx
test   %ecx,%ecx
jne    3db6a <jsimd_can_fdct_islow+0x1a>
leaveq 
retq   
lea    0x2e26f(%rip),%rcx        # 6bde0 <PW_F130_F054>
and    $0xf,%rcx
test   %rcx,%rcx
jne    3db81 <jsimd_can_fdct_islow+0x31>
mov    $0x1,%eax
leaveq 
retq   
leaveq 
retq   
data16 nopw %cs:0x0(%rax,%rax,1)
xchg   %ax,%ax

000000000003db90 <jsimd_can_fdct_ifast>:
push   %rbp
mov    %rsp,%rbp
callq  3dea0 <init_simd>
xor    %eax,%eax
mov    0x306d7(%rip),%ecx        # 6e278 <simd_support>
and    $0x8,%ecx
test   %ecx,%ecx
jne    3dbaa <jsimd_can_fdct_ifast+0x1a>
leaveq 
retq   
lea    0x2e1ef(%rip),%rcx        # 6bda0 <PW_F0707>
and    $0xf,%rcx
test   %rcx,%rcx
jne    3dbc1 <jsimd_can_fdct_ifast+0x31>
mov    $0x1,%eax
leaveq 
retq   
leaveq 
retq   
data16 nopw %cs:0x0(%rax,%rax,1)
xchg   %ax,%ax

000000000003dbd0 <jsimd_can_fdct_float>:
push   %rbp
mov    %rsp,%rbp
callq  3dea0 <init_simd>
xor    %eax,%eax
mov    0x30697(%rip),%ecx        # 6e278 <simd_support>
and    $0x4,%ecx
test   %ecx,%ecx
jne    3dbea <jsimd_can_fdct_float+0x1a>
leaveq 
retq   
lea    0x1dfef(%rip),%rcx        # 5bbe0 <PD_0_382>
and    $0xf,%rcx
test   %rcx,%rcx
jne    3dc01 <jsimd_can_fdct_float+0x31>
mov    $0x1,%eax
leaveq 
retq   
leaveq 
retq   
data16 nopw %cs:0x0(%rax,%rax,1)
xchg   %ax,%ax

000000000003dc10 <jsimd_fdct_islow>:
push   %rbp
mov    %rsp,%rbp
callq  45e80 <jsimd_fdct_islow_sse2>
leaveq 
retq   
nopl   0x0(%rax,%rax,1)

000000000003dc20 <jsimd_fdct_ifast>:
push   %rbp
mov    %rsp,%rbp
callq  45a70 <jsimd_fdct_ifast_sse2>
leaveq 
retq   
nopl   0x0(%rax,%rax,1)

000000000003dc30 <jsimd_fdct_float>:
push   %rbp
mov    %rsp,%rbp
callq  3df20 <jsimd_fdct_float_sse>
leaveq 
retq   
nopl   0x0(%rax,%rax,1)

000000000003dc40 <jsimd_can_quantize>:
push   %rbp
mov    %rsp,%rbp
callq  3dea0 <init_simd>
mov    0x30629(%rip),%eax        # 6e278 <simd_support>
and    $0x8,%eax
test   %eax,%eax
je     3dc5d <jsimd_can_quantize+0x1d>
mov    $0x1,%eax
leaveq 
retq   
xor    %eax,%eax
leaveq 
retq   
data16 nopw %cs:0x0(%rax,%rax,1)
nopl   0x0(%rax)

000000000003dc70 <jsimd_can_quantize_float>:
push   %rbp
mov    %rsp,%rbp
callq  3dea0 <init_simd>
mov    0x305f9(%rip),%eax        # 6e278 <simd_support>
and    $0x8,%eax
test   %eax,%eax
je     3dc8d <jsimd_can_quantize_float+0x1d>
mov    $0x1,%eax
leaveq 
retq   
xor    %eax,%eax
leaveq 
retq   
data16 nopw %cs:0x0(%rax,%rax,1)
nopl   0x0(%rax)

000000000003dca0 <jsimd_quantize>:
push   %rbp
mov    %rsp,%rbp
callq  480e0 <jsimd_quantize_sse2>
leaveq 
retq   
nopl   0x0(%rax,%rax,1)

000000000003dcb0 <jsimd_quantize_float>:
push   %rbp
mov    %rsp,%rbp
callq  47f80 <jsimd_quantize_float_sse2>
leaveq 
retq   
nopl   0x0(%rax,%rax,1)

000000000003dcc0 <jsimd_can_idct_2x2>:
push   %rbp
mov    %rsp,%rbp
callq  3dea0 <init_simd>
xor    %eax,%eax
mov    0x305a7(%rip),%ecx        # 6e278 <simd_support>
and    $0x8,%ecx
test   %ecx,%ecx
jne    3dcda <jsimd_can_idct_2x2+0x1a>
leaveq 
retq   
lea    0x2e30f(%rip),%rcx        # 6bff0 <PW_F184_MF076>
and    $0xf,%rcx
test   %rcx,%rcx
jne    3dcf1 <jsimd_can_idct_2x2+0x31>
mov    $0x1,%eax
leaveq 
retq   
leaveq 
retq   
data16 nopw %cs:0x0(%rax,%rax,1)
xchg   %ax,%ax

000000000003dd00 <jsimd_can_idct_4x4>:
push   %rbp
mov    %rsp,%rbp
callq  3dea0 <init_simd>
xor    %eax,%eax
mov    0x30567(%rip),%ecx        # 6e278 <simd_support>
and    $0x8,%ecx
test   %ecx,%ecx
jne    3dd1a <jsimd_can_idct_4x4+0x1a>
leaveq 
retq   
lea    0x2e2cf(%rip),%rcx        # 6bff0 <PW_F184_MF076>
and    $0xf,%rcx
test   %rcx,%rcx
jne    3dd31 <jsimd_can_idct_4x4+0x31>
mov    $0x1,%eax
leaveq 
retq   
leaveq 
retq   
data16 nopw %cs:0x0(%rax,%rax,1)
xchg   %ax,%ax

000000000003dd40 <jsimd_idct_2x2>:
push   %rbp
mov    %rsp,%rbp
mov    0x58(%rsi),%rdi
mov    %rdx,%rsi
mov    %rcx,%rdx
mov    %r8,%rcx
callq  47d00 <jsimd_idct_2x2_sse2>
leaveq 
retq   
nopl   0x0(%rax,%rax,1)

000000000003dd60 <jsimd_idct_4x4>:
push   %rbp
mov    %rsp,%rbp
mov    0x58(%rsi),%rdi
mov    %rdx,%rsi
mov    %rcx,%rdx
mov    %r8,%rcx
callq  47930 <jsimd_idct_4x4_sse2>
leaveq 
retq   
nopl   0x0(%rax,%rax,1)

000000000003dd80 <jsimd_can_idct_islow>:
push   %rbp
mov    %rsp,%rbp
callq  3dea0 <init_simd>
xor    %eax,%eax
mov    0x304e7(%rip),%ecx        # 6e278 <simd_support>
and    $0x8,%ecx
test   %ecx,%ecx
jne    3dd9a <jsimd_can_idct_islow+0x1a>
leaveq 
retq   
lea    0x2e19f(%rip),%rcx        # 6bf40 <PW_F130_F054>
and    $0xf,%rcx
test   %rcx,%rcx
jne    3ddb1 <jsimd_can_idct_islow+0x31>
mov    $0x1,%eax
leaveq 
retq   
leaveq 
retq   
data16 nopw %cs:0x0(%rax,%rax,1)
xchg   %ax,%ax

000000000003ddc0 <jsimd_can_idct_ifast>:
push   %rbp
mov    %rsp,%rbp
callq  3dea0 <init_simd>
xor    %eax,%eax
mov    0x304a7(%rip),%ecx        # 6e278 <simd_support>
and    $0x8,%ecx
test   %ecx,%ecx
jne    3ddda <jsimd_can_idct_ifast+0x1a>
leaveq 
retq   
lea    0x2e10f(%rip),%rcx        # 6bef0 <PW_F1414>
and    $0xf,%rcx
test   %rcx,%rcx
jne    3ddf1 <jsimd_can_idct_ifast+0x31>
mov    $0x1,%eax
leaveq 
retq   
leaveq 
retq   
data16 nopw %cs:0x0(%rax,%rax,1)
xchg   %ax,%ax

000000000003de00 <jsimd_can_idct_float>:
push   %rbp
mov    %rsp,%rbp
callq  3dea0 <init_simd>
xor    %eax,%eax
mov    0x30467(%rip),%ecx        # 6e278 <simd_support>
and    $0x8,%ecx
test   %ecx,%ecx
jne    3de1a <jsimd_can_idct_float+0x1a>
leaveq 
retq   
lea    0x2e06f(%rip),%rcx        # 6be90 <PD_1_414>
and    $0xf,%rcx
test   %rcx,%rcx
jne    3de31 <jsimd_can_idct_float+0x31>
mov    $0x1,%eax
leaveq 
retq   
leaveq 
retq   
data16 nopw %cs:0x0(%rax,%rax,1)
xchg   %ax,%ax

000000000003de40 <jsimd_idct_islow>:
push   %rbp
mov    %rsp,%rbp
mov    0x58(%rsi),%rdi
mov    %rdx,%rsi
mov    %rcx,%rdx
mov    %r8,%rcx
callq  46f40 <jsimd_idct_islow_sse2>
leaveq 
retq   
nopl   0x0(%rax,%rax,1)

000000000003de60 <jsimd_idct_ifast>:
push   %rbp
mov    %rsp,%rbp
mov    0x58(%rsi),%rdi
mov    %rdx,%rsi
mov    %rcx,%rdx
mov    %r8,%rcx
callq  46a30 <jsimd_idct_ifast_sse2>
leaveq 
retq   
nopl   0x0(%rax,%rax,1)

000000000003de80 <jsimd_idct_float>:
push   %rbp
mov    %rsp,%rbp
mov    0x58(%rsi),%rdi
mov    %rdx,%rsi
mov    %rcx,%rdx
mov    %r8,%rcx
callq  46550 <jsimd_idct_float_sse2>
leaveq 
retq   
nopl   0x0(%rax,%rax,1)

000000000003dea0 <init_simd>:
push   %rbp
mov    %rsp,%rbp
mov    0x303ce(%rip),%eax        # 6e278 <simd_support>
cmp    $0xfffffffe,%eax
ja     3deb1 <init_simd+0x11>
leaveq 
retq   
movl   $0xc,0x303bd(%rip)        # 6e278 <simd_support>
lea    0x1dcee(%rip),%rdi        # 5bbb0 <jpeg_aritab+0x458>
callq  4040 <getenv@plt>
test   %rax,%rax
jne    3dedf <init_simd+0x3f>
lea    0x1dcef(%rip),%rdi        # 5bbc2 <jpeg_aritab+0x46a>
callq  4040 <getenv@plt>
test   %rax,%rax
jne    3defe <init_simd+0x5e>
leaveq 
retq   
mov    %rax,%rdi
lea    0x1dcd7(%rip),%rsi        # 5bbc0 <jpeg_aritab+0x468>
callq  4260 <strcmp@plt>
test   %eax,%eax
jne    3decc <init_simd+0x2c>
movl   $0x0,0x3037c(%rip)        # 6e278 <simd_support>
jmp    3decc <init_simd+0x2c>
mov    %rax,%rdi
lea    0x1dcb8(%rip),%rsi        # 5bbc0 <jpeg_aritab+0x468>
callq  4260 <strcmp@plt>
test   %eax,%eax
je     3df13 <init_simd+0x73>
leaveq 
retq   
movl   $0x0,0x3035f(%rip)        # 6e27c <simd_huffman>
leaveq 
retq   
nop

000000000003df20 <jsimd_fdct_float_sse>:
push   %rbp
mov    %rsp,%rax
sub    $0x4,%rsp
and    $0xfffffffffffffff0,%rsp
mov    %rax,(%rsp)
mov    %rsp,%rbp
lea    -0x20(%rbp),%rsp
push   %r10
push   %r11
push   %r12
push   %r13
push   %r14
push   %r15
mov    %rdi,%r10
mov    %rsi,%r11
mov    %rdx,%r12
mov    %rcx,%r13
mov    %r8,%r14
mov    %r9,%r15
mov    %r10,%rdx
mov    $0x2,%ecx

000000000003df5d <jsimd_fdct_float_sse.rowloop>:
movaps 0x40(%rdx),%xmm0
movaps 0x60(%rdx),%xmm1
movaps 0x50(%rdx),%xmm2
movaps 0x70(%rdx),%xmm3
movaps %xmm0,%xmm4
unpcklps %xmm1,%xmm0
unpckhps %xmm1,%xmm4
movaps %xmm2,%xmm5
unpcklps %xmm3,%xmm2
unpckhps %xmm3,%xmm5
movaps (%rdx),%xmm6
movaps 0x20(%rdx),%xmm7
movaps 0x10(%rdx),%xmm1
movaps 0x30(%rdx),%xmm3
movaps %xmm4,-0x20(%rbp)
movaps %xmm2,-0x10(%rbp)
movaps %xmm6,%xmm4
unpcklps %xmm7,%xmm6
unpckhps %xmm7,%xmm4
movaps %xmm1,%xmm2
unpcklps %xmm3,%xmm1
unpckhps %xmm3,%xmm2
movaps %xmm6,%xmm7
shufps $0x44,%xmm0,%xmm6
shufps $0xee,%xmm0,%xmm7
movaps %xmm2,%xmm3
shufps $0x44,%xmm5,%xmm2
shufps $0xee,%xmm5,%xmm3
movaps %xmm7,%xmm0
movaps %xmm6,%xmm5
subps  %xmm2,%xmm7
subps  %xmm3,%xmm6
addps  %xmm2,%xmm0
addps  %xmm3,%xmm5
movaps -0x20(%rbp),%xmm2
movaps -0x10(%rbp),%xmm3
movaps %xmm7,-0x20(%rbp)
movaps %xmm6,-0x10(%rbp)
movaps %xmm4,%xmm7
shufps $0x44,%xmm2,%xmm4
shufps $0xee,%xmm2,%xmm7
movaps %xmm1,%xmm6
shufps $0x44,%xmm3,%xmm1
shufps $0xee,%xmm3,%xmm6
movaps %xmm7,%xmm2
movaps %xmm4,%xmm3
addps  %xmm1,%xmm7
addps  %xmm6,%xmm4
subps  %xmm1,%xmm2
subps  %xmm6,%xmm3
movaps %xmm5,%xmm1
movaps %xmm0,%xmm6
subps  %xmm7,%xmm5
subps  %xmm4,%xmm0
addps  %xmm7,%xmm1
addps  %xmm4,%xmm6
addps  %xmm5,%xmm0
mulps  0x1dbcc(%rip),%xmm0        # 5bbf0 <PD_0_707>
movaps %xmm1,%xmm7
movaps %xmm5,%xmm4
subps  %xmm6,%xmm1
subps  %xmm0,%xmm5
addps  %xmm6,%xmm7
addps  %xmm0,%xmm4
movaps %xmm1,0x10(%rdx)
movaps %xmm5,0x50(%rdx)
movaps %xmm7,(%rdx)
movaps %xmm4,0x40(%rdx)
movaps -0x20(%rbp),%xmm6
movaps -0x10(%rbp),%xmm0
addps  %xmm3,%xmm2
addps  %xmm6,%xmm3
addps  %xmm0,%xmm6
mulps  0x1db93(%rip),%xmm3        # 5bbf0 <PD_0_707>
movaps %xmm2,%xmm1
subps  %xmm6,%xmm2
mulps  0x1db76(%rip),%xmm2        # 5bbe0 <PD_0_382>
mulps  0x1db8f(%rip),%xmm1        # 5bc00 <PD_0_541>
mulps  0x1db98(%rip),%xmm6        # 5bc10 <PD_1_306>
addps  %xmm2,%xmm1
addps  %xmm2,%xmm6
movaps %xmm0,%xmm5
subps  %xmm3,%xmm0
addps  %xmm3,%xmm5
movaps %xmm0,%xmm7
movaps %xmm5,%xmm4
subps  %xmm1,%xmm0
subps  %xmm6,%xmm5
addps  %xmm1,%xmm7
addps  %xmm6,%xmm4
movaps %xmm0,0x60(%rdx)
movaps %xmm5,0x70(%rdx)
movaps %xmm7,0x30(%rdx)
movaps %xmm4,0x20(%rdx)
add    $0x80,%rdx
dec    %rcx
jne    3df5d <jsimd_fdct_float_sse.rowloop>
mov    %r10,%rdx
mov    $0x2,%ecx

000000000003e0c1 <jsimd_fdct_float_sse.columnloop>:
movaps 0x40(%rdx),%xmm0
movaps 0x60(%rdx),%xmm1
movaps 0xc0(%rdx),%xmm2
movaps 0xe0(%rdx),%xmm3
movaps %xmm0,%xmm4
unpcklps %xmm1,%xmm0
unpckhps %xmm1,%xmm4
movaps %xmm2,%xmm5
unpcklps %xmm3,%xmm2
unpckhps %xmm3,%xmm5
movaps (%rdx),%xmm6
movaps 0x20(%rdx),%xmm7
movaps 0x80(%rdx),%xmm1
movaps 0xa0(%rdx),%xmm3
movaps %xmm4,-0x20(%rbp)
movaps %xmm2,-0x10(%rbp)
movaps %xmm6,%xmm4
unpcklps %xmm7,%xmm6
unpckhps %xmm7,%xmm4
movaps %xmm1,%xmm2
unpcklps %xmm3,%xmm1
unpckhps %xmm3,%xmm2
movaps %xmm6,%xmm7
shufps $0x44,%xmm0,%xmm6
shufps $0xee,%xmm0,%xmm7
movaps %xmm2,%xmm3
shufps $0x44,%xmm5,%xmm2
shufps $0xee,%xmm5,%xmm3
movaps %xmm7,%xmm0
movaps %xmm6,%xmm5
subps  %xmm2,%xmm7
subps  %xmm3,%xmm6
addps  %xmm2,%xmm0
addps  %xmm3,%xmm5
movaps -0x20(%rbp),%xmm2
movaps -0x10(%rbp),%xmm3
movaps %xmm7,-0x20(%rbp)
movaps %xmm6,-0x10(%rbp)
movaps %xmm4,%xmm7
shufps $0x44,%xmm2,%xmm4
shufps $0xee,%xmm2,%xmm7
movaps %xmm1,%xmm6
shufps $0x44,%xmm3,%xmm1
shufps $0xee,%xmm3,%xmm6
movaps %xmm7,%xmm2
movaps %xmm4,%xmm3
addps  %xmm1,%xmm7
addps  %xmm6,%xmm4
subps  %xmm1,%xmm2
subps  %xmm6,%xmm3
movaps %xmm5,%xmm1
movaps %xmm0,%xmm6
subps  %xmm7,%xmm5
subps  %xmm4,%xmm0
addps  %xmm7,%xmm1
addps  %xmm4,%xmm6
addps  %xmm5,%xmm0
mulps  0x1da5c(%rip),%xmm0        # 5bbf0 <PD_0_707>
movaps %xmm1,%xmm7
movaps %xmm5,%xmm4
subps  %xmm6,%xmm1
subps  %xmm0,%xmm5
addps  %xmm6,%xmm7
addps  %xmm0,%xmm4
movaps %xmm1,0x80(%rdx)
movaps %xmm5,0xc0(%rdx)
movaps %xmm7,(%rdx)
movaps %xmm4,0x40(%rdx)
movaps -0x20(%rbp),%xmm6
movaps -0x10(%rbp),%xmm0
addps  %xmm3,%xmm2
addps  %xmm6,%xmm3
addps  %xmm0,%xmm6
mulps  0x1da1d(%rip),%xmm3        # 5bbf0 <PD_0_707>
movaps %xmm2,%xmm1
subps  %xmm6,%xmm2
mulps  0x1da00(%rip),%xmm2        # 5bbe0 <PD_0_382>
mulps  0x1da19(%rip),%xmm1        # 5bc00 <PD_0_541>
mulps  0x1da22(%rip),%xmm6        # 5bc10 <PD_1_306>
addps  %xmm2,%xmm1
addps  %xmm2,%xmm6
movaps %xmm0,%xmm5
subps  %xmm3,%xmm0
addps  %xmm3,%xmm5
movaps %xmm0,%xmm7
movaps %xmm5,%xmm4
subps  %xmm1,%xmm0
subps  %xmm6,%xmm5
addps  %xmm1,%xmm7
addps  %xmm6,%xmm4
movaps %xmm0,0x60(%rdx)
movaps %xmm5,0xe0(%rdx)
movaps %xmm7,0xa0(%rdx)
movaps %xmm4,0x20(%rdx)
add    $0x10,%rdx
dec    %rcx
jne    3e0c1 <jsimd_fdct_float_sse.columnloop>
pop    %r15
pop    %r14
pop    %r13
pop    %r12
pop    %r11
pop    %r10
mov    %rbp,%rsp
pop    %rsp
pop    %rbp
retq   
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop

000000000003e250 <jsimd_rgb_ycc_convert_sse2>:
push   %rbp
mov    %rsp,%rax
sub    $0x4,%rsp
and    $0xfffffffffffffff0,%rsp
mov    %rax,(%rsp)
mov    %rsp,%rbp
lea    -0x80(%rbp),%rsp
push   %r10
push   %r11
push   %r12
push   %r13
push   %r14
push   %r15
mov    %rdi,%r10
mov    %rsi,%r11
mov    %rdx,%r12
mov    %rcx,%r13
mov    %r8,%r14
mov    %r9,%r15
push   %rbx
mov    %r10d,%ecx
test   %rcx,%rcx
je     3e6c5 <jsimd_rgb_ycc_convert_sse2.return>
push   %rcx
mov    %r12,%rsi
mov    %r13d,%ecx
mov    (%rsi),%rdi
mov    0x8(%rsi),%rbx
mov    0x10(%rsi),%rdx
lea    (%rdi,%rcx,8),%rdi
lea    (%rbx,%rcx,8),%rbx
lea    (%rdx,%rcx,8),%rdx
pop    %rcx
mov    %r11,%rsi
mov    %r14d,%eax
test   %rax,%rax
jle    3e6c5 <jsimd_rgb_ycc_convert_sse2.return>

000000000003e2c0 <jsimd_rgb_ycc_convert_sse2.rowloop>:
push   %rdx
push   %rbx
push   %rdi
push   %rsi
push   %rcx
mov    (%rsi),%rsi
mov    (%rdi),%rdi
mov    (%rbx),%rbx
mov    (%rdx),%rdx
cmp    $0x10,%rcx
jae    3e365 <jsimd_rgb_ycc_convert_sse2.columnloop>

000000000003e2db <jsimd_rgb_ycc_convert_sse2.column_ld1>:
push   %rax
push   %rdx
lea    (%rcx,%rcx,2),%rcx
test   $0x1,%cl
je     3e2ef <jsimd_rgb_ycc_convert_sse2.column_ld2>
sub    $0x1,%rcx
movzbq (%rsi,%rcx,1),%rax

000000000003e2ef <jsimd_rgb_ycc_convert_sse2.column_ld2>:
test   $0x2,%cl
je     3e304 <jsimd_rgb_ycc_convert_sse2.column_ld4>
sub    $0x2,%rcx
movzwq (%rsi,%rcx,1),%rdx
shl    $0x10,%rax
or     %rdx,%rax

000000000003e304 <jsimd_rgb_ycc_convert_sse2.column_ld4>:
movd   %eax,%xmm0
pop    %rdx
pop    %rax
test   $0x4,%cl
je     3e321 <jsimd_rgb_ycc_convert_sse2.column_ld8>
sub    $0x4,%rcx
movd   (%rsi,%rcx,1),%xmm5
pslldq $0x4,%xmm0
por    %xmm5,%xmm0

000000000003e321 <jsimd_rgb_ycc_convert_sse2.column_ld8>:
test   $0x8,%cl
je     3e338 <jsimd_rgb_ycc_convert_sse2.column_ld16>
sub    $0x8,%rcx
movq   (%rsi,%rcx,1),%xmm1
pslldq $0x8,%xmm0
por    %xmm1,%xmm0

000000000003e338 <jsimd_rgb_ycc_convert_sse2.column_ld16>:
test   $0x10,%cl
je     3e34c <jsimd_rgb_ycc_convert_sse2.column_ld32>
movdqa %xmm0,%xmm5
movdqu (%rsi),%xmm0
mov    $0x10,%ecx
jmp    3e373 <jsimd_rgb_ycc_convert_sse2.rgb_ycc_cnv>

000000000003e34c <jsimd_rgb_ycc_convert_sse2.column_ld32>:
test   $0x20,%cl
mov    $0x10,%ecx
je     3e373 <jsimd_rgb_ycc_convert_sse2.rgb_ycc_cnv>
movdqa %xmm0,%xmm1
movdqu (%rsi),%xmm0
movdqu 0x10(%rsi),%xmm5
jmp    3e373 <jsimd_rgb_ycc_convert_sse2.rgb_ycc_cnv>

000000000003e365 <jsimd_rgb_ycc_convert_sse2.columnloop>:
movdqu (%rsi),%xmm0
movdqu 0x10(%rsi),%xmm5
movdqu 0x20(%rsi),%xmm1

000000000003e373 <jsimd_rgb_ycc_convert_sse2.rgb_ycc_cnv>:
movdqa %xmm0,%xmm6
pslldq $0x8,%xmm0
psrldq $0x8,%xmm6
punpckhbw %xmm5,%xmm0
pslldq $0x8,%xmm5
punpcklbw %xmm1,%xmm6
punpckhbw %xmm1,%xmm5
movdqa %xmm0,%xmm3
pslldq $0x8,%xmm0
psrldq $0x8,%xmm3
punpckhbw %xmm6,%xmm0
pslldq $0x8,%xmm6
punpcklbw %xmm5,%xmm3
punpckhbw %xmm5,%xmm6
movdqa %xmm0,%xmm4
pslldq $0x8,%xmm0
psrldq $0x8,%xmm4
punpckhbw %xmm3,%xmm0
pslldq $0x8,%xmm3
punpcklbw %xmm6,%xmm4
punpckhbw %xmm6,%xmm3
pxor   %xmm7,%xmm7
movdqa %xmm0,%xmm2
punpcklbw %xmm7,%xmm0
punpckhbw %xmm7,%xmm2
movdqa %xmm4,%xmm1
punpcklbw %xmm7,%xmm4
punpckhbw %xmm7,%xmm1
movdqa %xmm3,%xmm5
punpcklbw %xmm7,%xmm3
punpckhbw %xmm7,%xmm5
movdqa %xmm0,-0x80(%rbp)
movdqa %xmm1,-0x70(%rbp)
movdqa %xmm4,-0x60(%rbp)
movdqa %xmm5,-0x50(%rbp)
movdqa %xmm1,%xmm6
punpcklwd %xmm3,%xmm1
punpckhwd %xmm3,%xmm6
movdqa %xmm1,%xmm7
movdqa %xmm6,%xmm4
pmaddwd 0x1d7f8(%rip),%xmm1        # 5bc20 <PW_F0299_F0337>
pmaddwd 0x1d7f0(%rip),%xmm6        # 5bc20 <PW_F0299_F0337>
pmaddwd 0x1d808(%rip),%xmm7        # 5bc40 <PW_MF016_MF033>
pmaddwd 0x1d800(%rip),%xmm4        # 5bc40 <PW_MF016_MF033>
movdqa %xmm1,-0x40(%rbp)
movdqa %xmm6,-0x30(%rbp)
pxor   %xmm1,%xmm1
pxor   %xmm6,%xmm6
punpcklwd %xmm5,%xmm1
punpckhwd %xmm5,%xmm6
psrld  $0x1,%xmm1
psrld  $0x1,%xmm6
movdqa 0x1d7f4(%rip),%xmm5        # 5bc60 <PD_ONEHALFM1_CJ>
paddd  %xmm1,%xmm7
paddd  %xmm6,%xmm4
paddd  %xmm5,%xmm7
paddd  %xmm5,%xmm4
psrld  $0x10,%xmm7
psrld  $0x10,%xmm4
packssdw %xmm4,%xmm7
movdqa -0x60(%rbp),%xmm1
movdqa %xmm0,%xmm6
punpcklwd %xmm2,%xmm0
punpckhwd %xmm2,%xmm6
movdqa %xmm0,%xmm5
movdqa %xmm6,%xmm4
pmaddwd 0x1d775(%rip),%xmm0        # 5bc20 <PW_F0299_F0337>
pmaddwd 0x1d76d(%rip),%xmm6        # 5bc20 <PW_F0299_F0337>
pmaddwd 0x1d785(%rip),%xmm5        # 5bc40 <PW_MF016_MF033>
pmaddwd 0x1d77d(%rip),%xmm4        # 5bc40 <PW_MF016_MF033>
movdqa %xmm0,-0x20(%rbp)
movdqa %xmm6,-0x10(%rbp)
pxor   %xmm0,%xmm0
pxor   %xmm6,%xmm6
punpcklwd %xmm1,%xmm0
punpckhwd %xmm1,%xmm6
psrld  $0x1,%xmm0
psrld  $0x1,%xmm6
movdqa 0x1d771(%rip),%xmm1        # 5bc60 <PD_ONEHALFM1_CJ>
paddd  %xmm0,%xmm5
paddd  %xmm6,%xmm4
paddd  %xmm1,%xmm5
paddd  %xmm1,%xmm4
psrld  $0x10,%xmm5
psrld  $0x10,%xmm4
packssdw %xmm4,%xmm5
psllw  $0x8,%xmm7
por    %xmm7,%xmm5
movdqa %xmm5,(%rbx)
movdqa -0x50(%rbp),%xmm0
movdqa -0x60(%rbp),%xmm6
movdqa -0x70(%rbp),%xmm1
movdqa %xmm0,%xmm4
punpcklwd %xmm3,%xmm0
punpckhwd %xmm3,%xmm4
movdqa %xmm0,%xmm7
movdqa %xmm4,%xmm5
pmaddwd 0x1d6eb(%rip),%xmm0        # 5bc30 <PW_F0114_F0250>
pmaddwd 0x1d6e3(%rip),%xmm4        # 5bc30 <PW_F0114_F0250>
pmaddwd 0x1d6fb(%rip),%xmm7        # 5bc50 <PW_MF008_MF041>
pmaddwd 0x1d6f3(%rip),%xmm5        # 5bc50 <PW_MF008_MF041>
movdqa 0x1d70b(%rip),%xmm3        # 5bc70 <PD_ONEHALF>
paddd  -0x40(%rbp),%xmm0
paddd  -0x30(%rbp),%xmm4
paddd  %xmm3,%xmm0
paddd  %xmm3,%xmm4
psrld  $0x10,%xmm0
psrld  $0x10,%xmm4
packssdw %xmm4,%xmm0
pxor   %xmm3,%xmm3
pxor   %xmm4,%xmm4
punpcklwd %xmm1,%xmm3
punpckhwd %xmm1,%xmm4
psrld  $0x1,%xmm3
psrld  $0x1,%xmm4
movdqa 0x1d6b9(%rip),%xmm1        # 5bc60 <PD_ONEHALFM1_CJ>
paddd  %xmm3,%xmm7
paddd  %xmm4,%xmm5
paddd  %xmm1,%xmm7
paddd  %xmm1,%xmm5
psrld  $0x10,%xmm7
psrld  $0x10,%xmm5
packssdw %xmm5,%xmm7
movdqa -0x80(%rbp),%xmm3
movdqa %xmm6,%xmm4
punpcklwd %xmm2,%xmm6
punpckhwd %xmm2,%xmm4
movdqa %xmm6,%xmm1
movdqa %xmm4,%xmm5
pmaddwd 0x1d64a(%rip),%xmm6        # 5bc30 <PW_F0114_F0250>
pmaddwd 0x1d642(%rip),%xmm4        # 5bc30 <PW_F0114_F0250>
pmaddwd 0x1d65a(%rip),%xmm1        # 5bc50 <PW_MF008_MF041>
pmaddwd 0x1d652(%rip),%xmm5        # 5bc50 <PW_MF008_MF041>
movdqa 0x1d66a(%rip),%xmm2        # 5bc70 <PD_ONEHALF>
paddd  -0x20(%rbp),%xmm6
paddd  -0x10(%rbp),%xmm4
paddd  %xmm2,%xmm6
paddd  %xmm2,%xmm4
psrld  $0x10,%xmm6
psrld  $0x10,%xmm4
packssdw %xmm4,%xmm6
psllw  $0x8,%xmm0
por    %xmm0,%xmm6
movdqa %xmm6,(%rdi)
pxor   %xmm2,%xmm2
pxor   %xmm4,%xmm4
punpcklwd %xmm3,%xmm2
punpckhwd %xmm3,%xmm4
psrld  $0x1,%xmm2
psrld  $0x1,%xmm4
movdqa 0x1d60b(%rip),%xmm0        # 5bc60 <PD_ONEHALFM1_CJ>
paddd  %xmm2,%xmm1
paddd  %xmm4,%xmm5
paddd  %xmm0,%xmm1
paddd  %xmm0,%xmm5
psrld  $0x10,%xmm1
psrld  $0x10,%xmm5
packssdw %xmm5,%xmm1
psllw  $0x8,%xmm7
por    %xmm7,%xmm1
movdqa %xmm1,(%rdx)
sub    $0x10,%rcx
add    $0x30,%rsi
add    $0x10,%rdi
add    $0x10,%rbx
add    $0x10,%rdx
cmp    $0x10,%rcx
jae    3e365 <jsimd_rgb_ycc_convert_sse2.columnloop>
test   %rcx,%rcx
jne    3e2db <jsimd_rgb_ycc_convert_sse2.column_ld1>
pop    %rcx
pop    %rsi
pop    %rdi
pop    %rbx
pop    %rdx
add    $0x8,%rsi
add    $0x8,%rdi
add    $0x8,%rbx
add    $0x8,%rdx
dec    %rax
jg     3e2c0 <jsimd_rgb_ycc_convert_sse2.rowloop>

000000000003e6c5 <jsimd_rgb_ycc_convert_sse2.return>:
pop    %rbx
pop    %r15
pop    %r14
pop    %r13
pop    %r12
pop    %r11
pop    %r10
mov    %rbp,%rsp
pop    %rsp
pop    %rbp
retq   
nop
nop
nop
nop
nop
nop
nop
nop

000000000003e6e0 <jsimd_extrgb_ycc_convert_sse2>:
push   %rbp
mov    %rsp,%rax
sub    $0x4,%rsp
and    $0xfffffffffffffff0,%rsp
mov    %rax,(%rsp)
mov    %rsp,%rbp
lea    -0x80(%rbp),%rsp
push   %r10
push   %r11
push   %r12
push   %r13
push   %r14
push   %r15
mov    %rdi,%r10
mov    %rsi,%r11
mov    %rdx,%r12
mov    %rcx,%r13
mov    %r8,%r14
mov    %r9,%r15
push   %rbx
mov    %r10d,%ecx
test   %rcx,%rcx
je     3eb55 <jsimd_extrgb_ycc_convert_sse2.return>
push   %rcx
mov    %r12,%rsi
mov    %r13d,%ecx
mov    (%rsi),%rdi
mov    0x8(%rsi),%rbx
mov    0x10(%rsi),%rdx
lea    (%rdi,%rcx,8),%rdi
lea    (%rbx,%rcx,8),%rbx
lea    (%rdx,%rcx,8),%rdx
pop    %rcx
mov    %r11,%rsi
mov    %r14d,%eax
test   %rax,%rax
jle    3eb55 <jsimd_extrgb_ycc_convert_sse2.return>

000000000003e750 <jsimd_extrgb_ycc_convert_sse2.rowloop>:
push   %rdx
push   %rbx
push   %rdi
push   %rsi
push   %rcx
mov    (%rsi),%rsi
mov    (%rdi),%rdi
mov    (%rbx),%rbx
mov    (%rdx),%rdx
cmp    $0x10,%rcx
jae    3e7f5 <jsimd_extrgb_ycc_convert_sse2.columnloop>

000000000003e76b <jsimd_extrgb_ycc_convert_sse2.column_ld1>:
push   %rax
push   %rdx
lea    (%rcx,%rcx,2),%rcx
test   $0x1,%cl
je     3e77f <jsimd_extrgb_ycc_convert_sse2.column_ld2>
sub    $0x1,%rcx
movzbq (%rsi,%rcx,1),%rax

000000000003e77f <jsimd_extrgb_ycc_convert_sse2.column_ld2>:
test   $0x2,%cl
je     3e794 <jsimd_extrgb_ycc_convert_sse2.column_ld4>
sub    $0x2,%rcx
movzwq (%rsi,%rcx,1),%rdx
shl    $0x10,%rax
or     %rdx,%rax

000000000003e794 <jsimd_extrgb_ycc_convert_sse2.column_ld4>:
movd   %eax,%xmm0
pop    %rdx
pop    %rax
test   $0x4,%cl
je     3e7b1 <jsimd_extrgb_ycc_convert_sse2.column_ld8>
sub    $0x4,%rcx
movd   (%rsi,%rcx,1),%xmm5
pslldq $0x4,%xmm0
por    %xmm5,%xmm0

000000000003e7b1 <jsimd_extrgb_ycc_convert_sse2.column_ld8>:
test   $0x8,%cl
je     3e7c8 <jsimd_extrgb_ycc_convert_sse2.column_ld16>
sub    $0x8,%rcx
movq   (%rsi,%rcx,1),%xmm1
pslldq $0x8,%xmm0
por    %xmm1,%xmm0

000000000003e7c8 <jsimd_extrgb_ycc_convert_sse2.column_ld16>:
test   $0x10,%cl
je     3e7dc <jsimd_extrgb_ycc_convert_sse2.column_ld32>
movdqa %xmm0,%xmm5
movdqu (%rsi),%xmm0
mov    $0x10,%ecx
jmp    3e803 <jsimd_extrgb_ycc_convert_sse2.rgb_ycc_cnv>

000000000003e7dc <jsimd_extrgb_ycc_convert_sse2.column_ld32>:
test   $0x20,%cl
mov    $0x10,%ecx
je     3e803 <jsimd_extrgb_ycc_convert_sse2.rgb_ycc_cnv>
movdqa %xmm0,%xmm1
movdqu (%rsi),%xmm0
movdqu 0x10(%rsi),%xmm5
jmp    3e803 <jsimd_extrgb_ycc_convert_sse2.rgb_ycc_cnv>

000000000003e7f5 <jsimd_extrgb_ycc_convert_sse2.columnloop>:
movdqu (%rsi),%xmm0
movdqu 0x10(%rsi),%xmm5
movdqu 0x20(%rsi),%xmm1

000000000003e803 <jsimd_extrgb_ycc_convert_sse2.rgb_ycc_cnv>:
movdqa %xmm0,%xmm6
pslldq $0x8,%xmm0
psrldq $0x8,%xmm6
punpckhbw %xmm5,%xmm0
pslldq $0x8,%xmm5
punpcklbw %xmm1,%xmm6
punpckhbw %xmm1,%xmm5
movdqa %xmm0,%xmm3
pslldq $0x8,%xmm0
psrldq $0x8,%xmm3
punpckhbw %xmm6,%xmm0
pslldq $0x8,%xmm6
punpcklbw %xmm5,%xmm3
punpckhbw %xmm5,%xmm6
movdqa %xmm0,%xmm4
pslldq $0x8,%xmm0
psrldq $0x8,%xmm4
punpckhbw %xmm3,%xmm0
pslldq $0x8,%xmm3
punpcklbw %xmm6,%xmm4
punpckhbw %xmm6,%xmm3
pxor   %xmm7,%xmm7
movdqa %xmm0,%xmm2
punpcklbw %xmm7,%xmm0
punpckhbw %xmm7,%xmm2
movdqa %xmm4,%xmm1
punpcklbw %xmm7,%xmm4
punpckhbw %xmm7,%xmm1
movdqa %xmm3,%xmm5
punpcklbw %xmm7,%xmm3
punpckhbw %xmm7,%xmm5
movdqa %xmm0,-0x80(%rbp)
movdqa %xmm1,-0x70(%rbp)
movdqa %xmm4,-0x60(%rbp)
movdqa %xmm5,-0x50(%rbp)
movdqa %xmm1,%xmm6
punpcklwd %xmm3,%xmm1
punpckhwd %xmm3,%xmm6
movdqa %xmm1,%xmm7
movdqa %xmm6,%xmm4
pmaddwd 0x1d368(%rip),%xmm1        # 5bc20 <PW_F0299_F0337>
pmaddwd 0x1d360(%rip),%xmm6        # 5bc20 <PW_F0299_F0337>
pmaddwd 0x1d378(%rip),%xmm7        # 5bc40 <PW_MF016_MF033>
pmaddwd 0x1d370(%rip),%xmm4        # 5bc40 <PW_MF016_MF033>
movdqa %xmm1,-0x40(%rbp)
movdqa %xmm6,-0x30(%rbp)
pxor   %xmm1,%xmm1
pxor   %xmm6,%xmm6
punpcklwd %xmm5,%xmm1
punpckhwd %xmm5,%xmm6
psrld  $0x1,%xmm1
psrld  $0x1,%xmm6
movdqa 0x1d364(%rip),%xmm5        # 5bc60 <PD_ONEHALFM1_CJ>
paddd  %xmm1,%xmm7
paddd  %xmm6,%xmm4
paddd  %xmm5,%xmm7
paddd  %xmm5,%xmm4
psrld  $0x10,%xmm7
psrld  $0x10,%xmm4
packssdw %xmm4,%xmm7
movdqa -0x60(%rbp),%xmm1
movdqa %xmm0,%xmm6
punpcklwd %xmm2,%xmm0
punpckhwd %xmm2,%xmm6
movdqa %xmm0,%xmm5
movdqa %xmm6,%xmm4
pmaddwd 0x1d2e5(%rip),%xmm0        # 5bc20 <PW_F0299_F0337>
pmaddwd 0x1d2dd(%rip),%xmm6        # 5bc20 <PW_F0299_F0337>
pmaddwd 0x1d2f5(%rip),%xmm5        # 5bc40 <PW_MF016_MF033>
pmaddwd 0x1d2ed(%rip),%xmm4        # 5bc40 <PW_MF016_MF033>
movdqa %xmm0,-0x20(%rbp)
movdqa %xmm6,-0x10(%rbp)
pxor   %xmm0,%xmm0
pxor   %xmm6,%xmm6
punpcklwd %xmm1,%xmm0
punpckhwd %xmm1,%xmm6
psrld  $0x1,%xmm0
psrld  $0x1,%xmm6
movdqa 0x1d2e1(%rip),%xmm1        # 5bc60 <PD_ONEHALFM1_CJ>
paddd  %xmm0,%xmm5
paddd  %xmm6,%xmm4
paddd  %xmm1,%xmm5
paddd  %xmm1,%xmm4
psrld  $0x10,%xmm5
psrld  $0x10,%xmm4
packssdw %xmm4,%xmm5
psllw  $0x8,%xmm7
por    %xmm7,%xmm5
movdqa %xmm5,(%rbx)
movdqa -0x50(%rbp),%xmm0
movdqa -0x60(%rbp),%xmm6
movdqa -0x70(%rbp),%xmm1
movdqa %xmm0,%xmm4
punpcklwd %xmm3,%xmm0
punpckhwd %xmm3,%xmm4
movdqa %xmm0,%xmm7
movdqa %xmm4,%xmm5
pmaddwd 0x1d25b(%rip),%xmm0        # 5bc30 <PW_F0114_F0250>
pmaddwd 0x1d253(%rip),%xmm4        # 5bc30 <PW_F0114_F0250>
pmaddwd 0x1d26b(%rip),%xmm7        # 5bc50 <PW_MF008_MF041>
pmaddwd 0x1d263(%rip),%xmm5        # 5bc50 <PW_MF008_MF041>
movdqa 0x1d27b(%rip),%xmm3        # 5bc70 <PD_ONEHALF>
paddd  -0x40(%rbp),%xmm0
paddd  -0x30(%rbp),%xmm4
paddd  %xmm3,%xmm0
paddd  %xmm3,%xmm4
psrld  $0x10,%xmm0
psrld  $0x10,%xmm4
packssdw %xmm4,%xmm0
pxor   %xmm3,%xmm3
pxor   %xmm4,%xmm4
punpcklwd %xmm1,%xmm3
punpckhwd %xmm1,%xmm4
psrld  $0x1,%xmm3
psrld  $0x1,%xmm4
movdqa 0x1d229(%rip),%xmm1        # 5bc60 <PD_ONEHALFM1_CJ>
paddd  %xmm3,%xmm7
paddd  %xmm4,%xmm5
paddd  %xmm1,%xmm7
paddd  %xmm1,%xmm5
psrld  $0x10,%xmm7
psrld  $0x10,%xmm5
packssdw %xmm5,%xmm7
movdqa -0x80(%rbp),%xmm3
movdqa %xmm6,%xmm4
punpcklwd %xmm2,%xmm6
punpckhwd %xmm2,%xmm4
movdqa %xmm6,%xmm1
movdqa %xmm4,%xmm5
pmaddwd 0x1d1ba(%rip),%xmm6        # 5bc30 <PW_F0114_F0250>
pmaddwd 0x1d1b2(%rip),%xmm4        # 5bc30 <PW_F0114_F0250>
pmaddwd 0x1d1ca(%rip),%xmm1        # 5bc50 <PW_MF008_MF041>
pmaddwd 0x1d1c2(%rip),%xmm5        # 5bc50 <PW_MF008_MF041>
movdqa 0x1d1da(%rip),%xmm2        # 5bc70 <PD_ONEHALF>
paddd  -0x20(%rbp),%xmm6
paddd  -0x10(%rbp),%xmm4
paddd  %xmm2,%xmm6
paddd  %xmm2,%xmm4
psrld  $0x10,%xmm6
psrld  $0x10,%xmm4
packssdw %xmm4,%xmm6
psllw  $0x8,%xmm0
por    %xmm0,%xmm6
movdqa %xmm6,(%rdi)
pxor   %xmm2,%xmm2
pxor   %xmm4,%xmm4
punpcklwd %xmm3,%xmm2
punpckhwd %xmm3,%xmm4
psrld  $0x1,%xmm2
psrld  $0x1,%xmm4
movdqa 0x1d17b(%rip),%xmm0        # 5bc60 <PD_ONEHALFM1_CJ>
paddd  %xmm2,%xmm1
paddd  %xmm4,%xmm5
paddd  %xmm0,%xmm1
paddd  %xmm0,%xmm5
psrld  $0x10,%xmm1
psrld  $0x10,%xmm5
packssdw %xmm5,%xmm1
psllw  $0x8,%xmm7
por    %xmm7,%xmm1
movdqa %xmm1,(%rdx)
sub    $0x10,%rcx
add    $0x30,%rsi
add    $0x10,%rdi
add    $0x10,%rbx
add    $0x10,%rdx
cmp    $0x10,%rcx
jae    3e7f5 <jsimd_extrgb_ycc_convert_sse2.columnloop>
test   %rcx,%rcx
jne    3e76b <jsimd_extrgb_ycc_convert_sse2.column_ld1>
pop    %rcx
pop    %rsi
pop    %rdi
pop    %rbx
pop    %rdx
add    $0x8,%rsi
add    $0x8,%rdi
add    $0x8,%rbx
add    $0x8,%rdx
dec    %rax
jg     3e750 <jsimd_extrgb_ycc_convert_sse2.rowloop>

000000000003eb55 <jsimd_extrgb_ycc_convert_sse2.return>:
pop    %rbx
pop    %r15
pop    %r14
pop    %r13
pop    %r12
pop    %r11
pop    %r10
mov    %rbp,%rsp
pop    %rsp
pop    %rbp
retq   
nop
nop
nop
nop
nop
nop
nop
nop

000000000003eb70 <jsimd_extrgbx_ycc_convert_sse2>:
push   %rbp
mov    %rsp,%rax
sub    $0x4,%rsp
and    $0xfffffffffffffff0,%rsp
mov    %rax,(%rsp)
mov    %rsp,%rbp
lea    -0x80(%rbp),%rsp
push   %r10
push   %r11
push   %r12
push   %r13
push   %r14
push   %r15
mov    %rdi,%r10
mov    %rsi,%r11
mov    %rdx,%r12
mov    %rcx,%r13
mov    %r8,%r14
mov    %r9,%r15
push   %rbx
mov    %r10d,%ecx
test   %rcx,%rcx
je     3efb1 <jsimd_extrgbx_ycc_convert_sse2.return>
push   %rcx
mov    %r12,%rsi
mov    %r13d,%ecx
mov    (%rsi),%rdi
mov    0x8(%rsi),%rbx
mov    0x10(%rsi),%rdx
lea    (%rdi,%rcx,8),%rdi
lea    (%rbx,%rcx,8),%rbx
lea    (%rdx,%rcx,8),%rdx
pop    %rcx
mov    %r11,%rsi
mov    %r14d,%eax
test   %rax,%rax
jle    3efb1 <jsimd_extrgbx_ycc_convert_sse2.return>

000000000003ebe0 <jsimd_extrgbx_ycc_convert_sse2.rowloop>:
push   %rdx
push   %rbx
push   %rdi
push   %rsi
push   %rcx
mov    (%rsi),%rsi
mov    (%rdi),%rdi
mov    (%rbx),%rbx
mov    (%rdx),%rdx
cmp    $0x10,%rcx
jae    3ec4f <jsimd_extrgbx_ycc_convert_sse2.columnloop>

000000000003ebfb <jsimd_extrgbx_ycc_convert_sse2.column_ld1>:
test   $0x1,%cl
je     3ec09 <jsimd_extrgbx_ycc_convert_sse2.column_ld2>
sub    $0x1,%rcx
movd   (%rsi,%rcx,4),%xmm0

000000000003ec09 <jsimd_extrgbx_ycc_convert_sse2.column_ld2>:
test   $0x2,%cl
je     3ec20 <jsimd_extrgbx_ycc_convert_sse2.column_ld4>
sub    $0x2,%rcx
movq   (%rsi,%rcx,4),%xmm4
pslldq $0x8,%xmm0
por    %xmm4,%xmm0

000000000003ec20 <jsimd_extrgbx_ycc_convert_sse2.column_ld4>:
test   $0x4,%cl
je     3ec32 <jsimd_extrgbx_ycc_convert_sse2.column_ld8>
sub    $0x4,%rcx
movdqa %xmm0,%xmm4
movdqu (%rsi,%rcx,4),%xmm0

000000000003ec32 <jsimd_extrgbx_ycc_convert_sse2.column_ld8>:
test   $0x8,%cl
mov    $0x10,%ecx
je     3ec62 <jsimd_extrgbx_ycc_convert_sse2.rgb_ycc_cnv>
movdqa %xmm0,%xmm5
movdqa %xmm4,%xmm7
movdqu (%rsi),%xmm0
movdqu 0x10(%rsi),%xmm4
jmp    3ec62 <jsimd_extrgbx_ycc_convert_sse2.rgb_ycc_cnv>

000000000003ec4f <jsimd_extrgbx_ycc_convert_sse2.columnloop>:
movdqu (%rsi),%xmm0
movdqu 0x10(%rsi),%xmm4
movdqu 0x20(%rsi),%xmm5
movdqu 0x30(%rsi),%xmm7

000000000003ec62 <jsimd_extrgbx_ycc_convert_sse2.rgb_ycc_cnv>:
movdqa %xmm0,%xmm3
punpcklbw %xmm4,%xmm0
punpckhbw %xmm4,%xmm3
movdqa %xmm5,%xmm2
punpcklbw %xmm7,%xmm5
punpckhbw %xmm7,%xmm2
movdqa %xmm0,%xmm1
punpcklwd %xmm5,%xmm0
punpckhwd %xmm5,%xmm1
movdqa %xmm3,%xmm6
punpcklwd %xmm2,%xmm3
punpckhwd %xmm2,%xmm6
movdqa %xmm0,%xmm4
punpcklbw %xmm3,%xmm0
punpckhbw %xmm3,%xmm4
movdqa %xmm1,%xmm7
punpcklbw %xmm6,%xmm1
punpckhbw %xmm6,%xmm7
pxor   %xmm5,%xmm5
movdqa %xmm0,%xmm2
punpcklbw %xmm5,%xmm0
punpckhbw %xmm5,%xmm2
movdqa %xmm1,%xmm3
punpcklbw %xmm5,%xmm1
punpckhbw %xmm5,%xmm3
movdqa %xmm4,%xmm6
punpcklbw %xmm5,%xmm4
punpckhbw %xmm5,%xmm6
punpcklbw %xmm7,%xmm5
punpckhbw %xmm7,%xmm7
psrlw  $0x8,%xmm5
psrlw  $0x8,%xmm7
movdqa %xmm0,-0x80(%rbp)
movdqa %xmm1,-0x70(%rbp)
movdqa %xmm4,-0x60(%rbp)
movdqa %xmm5,-0x50(%rbp)
movdqa %xmm1,%xmm6
punpcklwd %xmm3,%xmm1
punpckhwd %xmm3,%xmm6
movdqa %xmm1,%xmm7
movdqa %xmm6,%xmm4
pmaddwd 0x1cf0c(%rip),%xmm1        # 5bc20 <PW_F0299_F0337>
pmaddwd 0x1cf04(%rip),%xmm6        # 5bc20 <PW_F0299_F0337>
pmaddwd 0x1cf1c(%rip),%xmm7        # 5bc40 <PW_MF016_MF033>
pmaddwd 0x1cf14(%rip),%xmm4        # 5bc40 <PW_MF016_MF033>
movdqa %xmm1,-0x40(%rbp)
movdqa %xmm6,-0x30(%rbp)
pxor   %xmm1,%xmm1
pxor   %xmm6,%xmm6
punpcklwd %xmm5,%xmm1
punpckhwd %xmm5,%xmm6
psrld  $0x1,%xmm1
psrld  $0x1,%xmm6
movdqa 0x1cf08(%rip),%xmm5        # 5bc60 <PD_ONEHALFM1_CJ>
paddd  %xmm1,%xmm7
paddd  %xmm6,%xmm4
paddd  %xmm5,%xmm7
paddd  %xmm5,%xmm4
psrld  $0x10,%xmm7
psrld  $0x10,%xmm4
packssdw %xmm4,%xmm7
movdqa -0x60(%rbp),%xmm1
movdqa %xmm0,%xmm6
punpcklwd %xmm2,%xmm0
punpckhwd %xmm2,%xmm6
movdqa %xmm0,%xmm5
movdqa %xmm6,%xmm4
pmaddwd 0x1ce89(%rip),%xmm0        # 5bc20 <PW_F0299_F0337>
pmaddwd 0x1ce81(%rip),%xmm6        # 5bc20 <PW_F0299_F0337>
pmaddwd 0x1ce99(%rip),%xmm5        # 5bc40 <PW_MF016_MF033>
pmaddwd 0x1ce91(%rip),%xmm4        # 5bc40 <PW_MF016_MF033>
movdqa %xmm0,-0x20(%rbp)
movdqa %xmm6,-0x10(%rbp)
pxor   %xmm0,%xmm0
pxor   %xmm6,%xmm6
punpcklwd %xmm1,%xmm0
punpckhwd %xmm1,%xmm6
psrld  $0x1,%xmm0
psrld  $0x1,%xmm6
movdqa 0x1ce85(%rip),%xmm1        # 5bc60 <PD_ONEHALFM1_CJ>
paddd  %xmm0,%xmm5
paddd  %xmm6,%xmm4
paddd  %xmm1,%xmm5
paddd  %xmm1,%xmm4
psrld  $0x10,%xmm5
psrld  $0x10,%xmm4
packssdw %xmm4,%xmm5
psllw  $0x8,%xmm7
por    %xmm7,%xmm5
movdqa %xmm5,(%rbx)
movdqa -0x50(%rbp),%xmm0
movdqa -0x60(%rbp),%xmm6
movdqa -0x70(%rbp),%xmm1
movdqa %xmm0,%xmm4
punpcklwd %xmm3,%xmm0
punpckhwd %xmm3,%xmm4
movdqa %xmm0,%xmm7
movdqa %xmm4,%xmm5
pmaddwd 0x1cdff(%rip),%xmm0        # 5bc30 <PW_F0114_F0250>
pmaddwd 0x1cdf7(%rip),%xmm4        # 5bc30 <PW_F0114_F0250>
pmaddwd 0x1ce0f(%rip),%xmm7        # 5bc50 <PW_MF008_MF041>
pmaddwd 0x1ce07(%rip),%xmm5        # 5bc50 <PW_MF008_MF041>
movdqa 0x1ce1f(%rip),%xmm3        # 5bc70 <PD_ONEHALF>
paddd  -0x40(%rbp),%xmm0
paddd  -0x30(%rbp),%xmm4
paddd  %xmm3,%xmm0
paddd  %xmm3,%xmm4
psrld  $0x10,%xmm0
psrld  $0x10,%xmm4
packssdw %xmm4,%xmm0
pxor   %xmm3,%xmm3
pxor   %xmm4,%xmm4
punpcklwd %xmm1,%xmm3
punpckhwd %xmm1,%xmm4
psrld  $0x1,%xmm3
psrld  $0x1,%xmm4
movdqa 0x1cdcd(%rip),%xmm1        # 5bc60 <PD_ONEHALFM1_CJ>
paddd  %xmm3,%xmm7
paddd  %xmm4,%xmm5
paddd  %xmm1,%xmm7
paddd  %xmm1,%xmm5
psrld  $0x10,%xmm7
psrld  $0x10,%xmm5
packssdw %xmm5,%xmm7
movdqa -0x80(%rbp),%xmm3
movdqa %xmm6,%xmm4
punpcklwd %xmm2,%xmm6
punpckhwd %xmm2,%xmm4
movdqa %xmm6,%xmm1
movdqa %xmm4,%xmm5
pmaddwd 0x1cd5e(%rip),%xmm6        # 5bc30 <PW_F0114_F0250>
pmaddwd 0x1cd56(%rip),%xmm4        # 5bc30 <PW_F0114_F0250>
pmaddwd 0x1cd6e(%rip),%xmm1        # 5bc50 <PW_MF008_MF041>
pmaddwd 0x1cd66(%rip),%xmm5        # 5bc50 <PW_MF008_MF041>
movdqa 0x1cd7e(%rip),%xmm2        # 5bc70 <PD_ONEHALF>
paddd  -0x20(%rbp),%xmm6
paddd  -0x10(%rbp),%xmm4
paddd  %xmm2,%xmm6
paddd  %xmm2,%xmm4
psrld  $0x10,%xmm6
psrld  $0x10,%xmm4
packssdw %xmm4,%xmm6
psllw  $0x8,%xmm0
por    %xmm0,%xmm6
movdqa %xmm6,(%rdi)
pxor   %xmm2,%xmm2
pxor   %xmm4,%xmm4
punpcklwd %xmm3,%xmm2
punpckhwd %xmm3,%xmm4
psrld  $0x1,%xmm2
psrld  $0x1,%xmm4
movdqa 0x1cd1f(%rip),%xmm0        # 5bc60 <PD_ONEHALFM1_CJ>
paddd  %xmm2,%xmm1
paddd  %xmm4,%xmm5
paddd  %xmm0,%xmm1
paddd  %xmm0,%xmm5
psrld  $0x10,%xmm1
psrld  $0x10,%xmm5
packssdw %xmm5,%xmm1
psllw  $0x8,%xmm7
por    %xmm7,%xmm1
movdqa %xmm1,(%rdx)
sub    $0x10,%rcx
add    $0x40,%rsi
add    $0x10,%rdi
add    $0x10,%rbx
add    $0x10,%rdx
cmp    $0x10,%rcx
jae    3ec4f <jsimd_extrgbx_ycc_convert_sse2.columnloop>
test   %rcx,%rcx
jne    3ebfb <jsimd_extrgbx_ycc_convert_sse2.column_ld1>
pop    %rcx
pop    %rsi
pop    %rdi
pop    %rbx
pop    %rdx
add    $0x8,%rsi
add    $0x8,%rdi
add    $0x8,%rbx
add    $0x8,%rdx
dec    %rax
jg     3ebe0 <jsimd_extrgbx_ycc_convert_sse2.rowloop>

000000000003efb1 <jsimd_extrgbx_ycc_convert_sse2.return>:
pop    %rbx
pop    %r15
pop    %r14
pop    %r13
pop    %r12
pop    %r11
pop    %r10
mov    %rbp,%rsp
pop    %rsp
pop    %rbp
retq   
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop

000000000003efd0 <jsimd_extbgr_ycc_convert_sse2>:
push   %rbp
mov    %rsp,%rax
sub    $0x4,%rsp
and    $0xfffffffffffffff0,%rsp
mov    %rax,(%rsp)
mov    %rsp,%rbp
lea    -0x80(%rbp),%rsp
push   %r10
push   %r11
push   %r12
push   %r13
push   %r14
push   %r15
mov    %rdi,%r10
mov    %rsi,%r11
mov    %rdx,%r12
mov    %rcx,%r13
mov    %r8,%r14
mov    %r9,%r15
push   %rbx
mov    %r10d,%ecx
test   %rcx,%rcx
je     3f445 <jsimd_extbgr_ycc_convert_sse2.return>
push   %rcx
mov    %r12,%rsi
mov    %r13d,%ecx
mov    (%rsi),%rdi
mov    0x8(%rsi),%rbx
mov    0x10(%rsi),%rdx
lea    (%rdi,%rcx,8),%rdi
lea    (%rbx,%rcx,8),%rbx
lea    (%rdx,%rcx,8),%rdx
pop    %rcx
mov    %r11,%rsi
mov    %r14d,%eax
test   %rax,%rax
jle    3f445 <jsimd_extbgr_ycc_convert_sse2.return>

000000000003f040 <jsimd_extbgr_ycc_convert_sse2.rowloop>:
push   %rdx
push   %rbx
push   %rdi
push   %rsi
push   %rcx
mov    (%rsi),%rsi
mov    (%rdi),%rdi
mov    (%rbx),%rbx
mov    (%rdx),%rdx
cmp    $0x10,%rcx
jae    3f0e5 <jsimd_extbgr_ycc_convert_sse2.columnloop>

000000000003f05b <jsimd_extbgr_ycc_convert_sse2.column_ld1>:
push   %rax
push   %rdx
lea    (%rcx,%rcx,2),%rcx
test   $0x1,%cl
je     3f06f <jsimd_extbgr_ycc_convert_sse2.column_ld2>
sub    $0x1,%rcx
movzbq (%rsi,%rcx,1),%rax

000000000003f06f <jsimd_extbgr_ycc_convert_sse2.column_ld2>:
test   $0x2,%cl
je     3f084 <jsimd_extbgr_ycc_convert_sse2.column_ld4>
sub    $0x2,%rcx
movzwq (%rsi,%rcx,1),%rdx
shl    $0x10,%rax
or     %rdx,%rax

000000000003f084 <jsimd_extbgr_ycc_convert_sse2.column_ld4>:
movd   %eax,%xmm4
pop    %rdx
pop    %rax
test   $0x4,%cl
je     3f0a1 <jsimd_extbgr_ycc_convert_sse2.column_ld8>
sub    $0x4,%rcx
movd   (%rsi,%rcx,1),%xmm1
pslldq $0x4,%xmm4
por    %xmm1,%xmm4

000000000003f0a1 <jsimd_extbgr_ycc_convert_sse2.column_ld8>:
test   $0x8,%cl
je     3f0b8 <jsimd_extbgr_ycc_convert_sse2.column_ld16>
sub    $0x8,%rcx
movq   (%rsi,%rcx,1),%xmm5
pslldq $0x8,%xmm4
por    %xmm5,%xmm4

000000000003f0b8 <jsimd_extbgr_ycc_convert_sse2.column_ld16>:
test   $0x10,%cl
je     3f0cc <jsimd_extbgr_ycc_convert_sse2.column_ld32>
movdqa %xmm4,%xmm1
movdqu (%rsi),%xmm4
mov    $0x10,%ecx
jmp    3f0f3 <jsimd_extbgr_ycc_convert_sse2.rgb_ycc_cnv>

000000000003f0cc <jsimd_extbgr_ycc_convert_sse2.column_ld32>:
test   $0x20,%cl
mov    $0x10,%ecx
je     3f0f3 <jsimd_extbgr_ycc_convert_sse2.rgb_ycc_cnv>
movdqa %xmm4,%xmm5
movdqu (%rsi),%xmm4
movdqu 0x10(%rsi),%xmm1
jmp    3f0f3 <jsimd_extbgr_ycc_convert_sse2.rgb_ycc_cnv>

000000000003f0e5 <jsimd_extbgr_ycc_convert_sse2.columnloop>:
movdqu (%rsi),%xmm4
movdqu 0x10(%rsi),%xmm1
movdqu 0x20(%rsi),%xmm5

000000000003f0f3 <jsimd_extbgr_ycc_convert_sse2.rgb_ycc_cnv>:
movdqa %xmm4,%xmm6
pslldq $0x8,%xmm4
psrldq $0x8,%xmm6
punpckhbw %xmm1,%xmm4
pslldq $0x8,%xmm1
punpcklbw %xmm5,%xmm6
punpckhbw %xmm5,%xmm1
movdqa %xmm4,%xmm3
pslldq $0x8,%xmm4
psrldq $0x8,%xmm3
punpckhbw %xmm6,%xmm4
pslldq $0x8,%xmm6
punpcklbw %xmm1,%xmm3
punpckhbw %xmm1,%xmm6
movdqa %xmm4,%xmm0
pslldq $0x8,%xmm4
psrldq $0x8,%xmm0
punpckhbw %xmm3,%xmm4
pslldq $0x8,%xmm3
punpcklbw %xmm6,%xmm0
punpckhbw %xmm6,%xmm3
pxor   %xmm7,%xmm7
movdqa %xmm4,%xmm2
punpcklbw %xmm7,%xmm4
punpckhbw %xmm7,%xmm2
movdqa %xmm0,%xmm5
punpcklbw %xmm7,%xmm0
punpckhbw %xmm7,%xmm5
movdqa %xmm3,%xmm1
punpcklbw %xmm7,%xmm3
punpckhbw %xmm7,%xmm1
movdqa %xmm0,-0x80(%rbp)
movdqa %xmm1,-0x70(%rbp)
movdqa %xmm4,-0x60(%rbp)
movdqa %xmm5,-0x50(%rbp)
movdqa %xmm1,%xmm6
punpcklwd %xmm3,%xmm1
punpckhwd %xmm3,%xmm6
movdqa %xmm1,%xmm7
movdqa %xmm6,%xmm4
pmaddwd 0x1ca78(%rip),%xmm1        # 5bc20 <PW_F0299_F0337>
pmaddwd 0x1ca70(%rip),%xmm6        # 5bc20 <PW_F0299_F0337>
pmaddwd 0x1ca88(%rip),%xmm7        # 5bc40 <PW_MF016_MF033>
pmaddwd 0x1ca80(%rip),%xmm4        # 5bc40 <PW_MF016_MF033>
movdqa %xmm1,-0x40(%rbp)
movdqa %xmm6,-0x30(%rbp)
pxor   %xmm1,%xmm1
pxor   %xmm6,%xmm6
punpcklwd %xmm5,%xmm1
punpckhwd %xmm5,%xmm6
psrld  $0x1,%xmm1
psrld  $0x1,%xmm6
movdqa 0x1ca74(%rip),%xmm5        # 5bc60 <PD_ONEHALFM1_CJ>
paddd  %xmm1,%xmm7
paddd  %xmm6,%xmm4
paddd  %xmm5,%xmm7
paddd  %xmm5,%xmm4
psrld  $0x10,%xmm7
psrld  $0x10,%xmm4
packssdw %xmm4,%xmm7
movdqa -0x60(%rbp),%xmm1
movdqa %xmm0,%xmm6
punpcklwd %xmm2,%xmm0
punpckhwd %xmm2,%xmm6
movdqa %xmm0,%xmm5
movdqa %xmm6,%xmm4
pmaddwd 0x1c9f5(%rip),%xmm0        # 5bc20 <PW_F0299_F0337>
pmaddwd 0x1c9ed(%rip),%xmm6        # 5bc20 <PW_F0299_F0337>
pmaddwd 0x1ca05(%rip),%xmm5        # 5bc40 <PW_MF016_MF033>
pmaddwd 0x1c9fd(%rip),%xmm4        # 5bc40 <PW_MF016_MF033>
movdqa %xmm0,-0x20(%rbp)
movdqa %xmm6,-0x10(%rbp)
pxor   %xmm0,%xmm0
pxor   %xmm6,%xmm6
punpcklwd %xmm1,%xmm0
punpckhwd %xmm1,%xmm6
psrld  $0x1,%xmm0
psrld  $0x1,%xmm6
movdqa 0x1c9f1(%rip),%xmm1        # 5bc60 <PD_ONEHALFM1_CJ>
paddd  %xmm0,%xmm5
paddd  %xmm6,%xmm4
paddd  %xmm1,%xmm5
paddd  %xmm1,%xmm4
psrld  $0x10,%xmm5
psrld  $0x10,%xmm4
packssdw %xmm4,%xmm5
psllw  $0x8,%xmm7
por    %xmm7,%xmm5
movdqa %xmm5,(%rbx)
movdqa -0x50(%rbp),%xmm0
movdqa -0x60(%rbp),%xmm6
movdqa -0x70(%rbp),%xmm1
movdqa %xmm0,%xmm4
punpcklwd %xmm3,%xmm0
punpckhwd %xmm3,%xmm4
movdqa %xmm0,%xmm7
movdqa %xmm4,%xmm5
pmaddwd 0x1c96b(%rip),%xmm0        # 5bc30 <PW_F0114_F0250>
pmaddwd 0x1c963(%rip),%xmm4        # 5bc30 <PW_F0114_F0250>
pmaddwd 0x1c97b(%rip),%xmm7        # 5bc50 <PW_MF008_MF041>
pmaddwd 0x1c973(%rip),%xmm5        # 5bc50 <PW_MF008_MF041>
movdqa 0x1c98b(%rip),%xmm3        # 5bc70 <PD_ONEHALF>
paddd  -0x40(%rbp),%xmm0
paddd  -0x30(%rbp),%xmm4
paddd  %xmm3,%xmm0
paddd  %xmm3,%xmm4
psrld  $0x10,%xmm0
psrld  $0x10,%xmm4
packssdw %xmm4,%xmm0
pxor   %xmm3,%xmm3
pxor   %xmm4,%xmm4
punpcklwd %xmm1,%xmm3
punpckhwd %xmm1,%xmm4
psrld  $0x1,%xmm3
psrld  $0x1,%xmm4
movdqa 0x1c939(%rip),%xmm1        # 5bc60 <PD_ONEHALFM1_CJ>
paddd  %xmm3,%xmm7
paddd  %xmm4,%xmm5
paddd  %xmm1,%xmm7
paddd  %xmm1,%xmm5
psrld  $0x10,%xmm7
psrld  $0x10,%xmm5
packssdw %xmm5,%xmm7
movdqa -0x80(%rbp),%xmm3
movdqa %xmm6,%xmm4
punpcklwd %xmm2,%xmm6
punpckhwd %xmm2,%xmm4
movdqa %xmm6,%xmm1
movdqa %xmm4,%xmm5
pmaddwd 0x1c8ca(%rip),%xmm6        # 5bc30 <PW_F0114_F0250>
pmaddwd 0x1c8c2(%rip),%xmm4        # 5bc30 <PW_F0114_F0250>
pmaddwd 0x1c8da(%rip),%xmm1        # 5bc50 <PW_MF008_MF041>
pmaddwd 0x1c8d2(%rip),%xmm5        # 5bc50 <PW_MF008_MF041>
movdqa 0x1c8ea(%rip),%xmm2        # 5bc70 <PD_ONEHALF>
paddd  -0x20(%rbp),%xmm6
paddd  -0x10(%rbp),%xmm4
paddd  %xmm2,%xmm6
paddd  %xmm2,%xmm4
psrld  $0x10,%xmm6
psrld  $0x10,%xmm4
packssdw %xmm4,%xmm6
psllw  $0x8,%xmm0
por    %xmm0,%xmm6
movdqa %xmm6,(%rdi)
pxor   %xmm2,%xmm2
pxor   %xmm4,%xmm4
punpcklwd %xmm3,%xmm2
punpckhwd %xmm3,%xmm4
psrld  $0x1,%xmm2
psrld  $0x1,%xmm4
movdqa 0x1c88b(%rip),%xmm0        # 5bc60 <PD_ONEHALFM1_CJ>
paddd  %xmm2,%xmm1
paddd  %xmm4,%xmm5
paddd  %xmm0,%xmm1
paddd  %xmm0,%xmm5
psrld  $0x10,%xmm1
psrld  $0x10,%xmm5
packssdw %xmm5,%xmm1
psllw  $0x8,%xmm7
por    %xmm7,%xmm1
movdqa %xmm1,(%rdx)
sub    $0x10,%rcx
add    $0x30,%rsi
add    $0x10,%rdi
add    $0x10,%rbx
add    $0x10,%rdx
cmp    $0x10,%rcx
jae    3f0e5 <jsimd_extbgr_ycc_convert_sse2.columnloop>
test   %rcx,%rcx
jne    3f05b <jsimd_extbgr_ycc_convert_sse2.column_ld1>
pop    %rcx
pop    %rsi
pop    %rdi
pop    %rbx
pop    %rdx
add    $0x8,%rsi
add    $0x8,%rdi
add    $0x8,%rbx
add    $0x8,%rdx
dec    %rax
jg     3f040 <jsimd_extbgr_ycc_convert_sse2.rowloop>

000000000003f445 <jsimd_extbgr_ycc_convert_sse2.return>:
pop    %rbx
pop    %r15
pop    %r14
pop    %r13
pop    %r12
pop    %r11
pop    %r10
mov    %rbp,%rsp
pop    %rsp
pop    %rbp
retq   
nop
nop
nop
nop
nop
nop
nop
nop

000000000003f460 <jsimd_extbgrx_ycc_convert_sse2>:
push   %rbp
mov    %rsp,%rax
sub    $0x4,%rsp
and    $0xfffffffffffffff0,%rsp
mov    %rax,(%rsp)
mov    %rsp,%rbp
lea    -0x80(%rbp),%rsp
push   %r10
push   %r11
push   %r12
push   %r13
push   %r14
push   %r15
mov    %rdi,%r10
mov    %rsi,%r11
mov    %rdx,%r12
mov    %rcx,%r13
mov    %r8,%r14
mov    %r9,%r15
push   %rbx
mov    %r10d,%ecx
test   %rcx,%rcx
je     3f8a1 <jsimd_extbgrx_ycc_convert_sse2.return>
push   %rcx
mov    %r12,%rsi
mov    %r13d,%ecx
mov    (%rsi),%rdi
mov    0x8(%rsi),%rbx
mov    0x10(%rsi),%rdx
lea    (%rdi,%rcx,8),%rdi
lea    (%rbx,%rcx,8),%rbx
lea    (%rdx,%rcx,8),%rdx
pop    %rcx
mov    %r11,%rsi
mov    %r14d,%eax
test   %rax,%rax
jle    3f8a1 <jsimd_extbgrx_ycc_convert_sse2.return>

000000000003f4d0 <jsimd_extbgrx_ycc_convert_sse2.rowloop>:
push   %rdx
push   %rbx
push   %rdi
push   %rsi
push   %rcx
mov    (%rsi),%rsi
mov    (%rdi),%rdi
mov    (%rbx),%rbx
mov    (%rdx),%rdx
cmp    $0x10,%rcx
jae    3f53f <jsimd_extbgrx_ycc_convert_sse2.columnloop>

000000000003f4eb <jsimd_extbgrx_ycc_convert_sse2.column_ld1>:
test   $0x1,%cl
je     3f4f9 <jsimd_extbgrx_ycc_convert_sse2.column_ld2>
sub    $0x1,%rcx
movd   (%rsi,%rcx,4),%xmm4

000000000003f4f9 <jsimd_extbgrx_ycc_convert_sse2.column_ld2>:
test   $0x2,%cl
je     3f510 <jsimd_extbgrx_ycc_convert_sse2.column_ld4>
sub    $0x2,%rcx
movq   (%rsi,%rcx,4),%xmm0
pslldq $0x8,%xmm4
por    %xmm0,%xmm4

000000000003f510 <jsimd_extbgrx_ycc_convert_sse2.column_ld4>:
test   $0x4,%cl
je     3f522 <jsimd_extbgrx_ycc_convert_sse2.column_ld8>
sub    $0x4,%rcx
movdqa %xmm4,%xmm0
movdqu (%rsi,%rcx,4),%xmm4

000000000003f522 <jsimd_extbgrx_ycc_convert_sse2.column_ld8>:
test   $0x8,%cl
mov    $0x10,%ecx
je     3f552 <jsimd_extbgrx_ycc_convert_sse2.rgb_ycc_cnv>
movdqa %xmm4,%xmm1
movdqa %xmm0,%xmm7
movdqu (%rsi),%xmm4
movdqu 0x10(%rsi),%xmm0
jmp    3f552 <jsimd_extbgrx_ycc_convert_sse2.rgb_ycc_cnv>

000000000003f53f <jsimd_extbgrx_ycc_convert_sse2.columnloop>:
movdqu (%rsi),%xmm4
movdqu 0x10(%rsi),%xmm0
movdqu 0x20(%rsi),%xmm1
movdqu 0x30(%rsi),%xmm7

000000000003f552 <jsimd_extbgrx_ycc_convert_sse2.rgb_ycc_cnv>:
movdqa %xmm4,%xmm3
punpcklbw %xmm0,%xmm4
punpckhbw %xmm0,%xmm3
movdqa %xmm1,%xmm2
punpcklbw %xmm7,%xmm1
punpckhbw %xmm7,%xmm2
movdqa %xmm4,%xmm5
punpcklwd %xmm1,%xmm4
punpckhwd %xmm1,%xmm5
movdqa %xmm3,%xmm6
punpcklwd %xmm2,%xmm3
punpckhwd %xmm2,%xmm6
movdqa %xmm4,%xmm0
punpcklbw %xmm3,%xmm4
punpckhbw %xmm3,%xmm0
movdqa %xmm5,%xmm7
punpcklbw %xmm6,%xmm5
punpckhbw %xmm6,%xmm7
pxor   %xmm1,%xmm1
movdqa %xmm4,%xmm2
punpcklbw %xmm1,%xmm4
punpckhbw %xmm1,%xmm2
movdqa %xmm5,%xmm3
punpcklbw %xmm1,%xmm5
punpckhbw %xmm1,%xmm3
movdqa %xmm0,%xmm6
punpcklbw %xmm1,%xmm0
punpckhbw %xmm1,%xmm6
punpcklbw %xmm7,%xmm1
punpckhbw %xmm7,%xmm7
psrlw  $0x8,%xmm1
psrlw  $0x8,%xmm7
movdqa %xmm0,-0x80(%rbp)
movdqa %xmm1,-0x70(%rbp)
movdqa %xmm4,-0x60(%rbp)
movdqa %xmm5,-0x50(%rbp)
movdqa %xmm1,%xmm6
punpcklwd %xmm3,%xmm1
punpckhwd %xmm3,%xmm6
movdqa %xmm1,%xmm7
movdqa %xmm6,%xmm4
pmaddwd 0x1c61c(%rip),%xmm1        # 5bc20 <PW_F0299_F0337>
pmaddwd 0x1c614(%rip),%xmm6        # 5bc20 <PW_F0299_F0337>
pmaddwd 0x1c62c(%rip),%xmm7        # 5bc40 <PW_MF016_MF033>
pmaddwd 0x1c624(%rip),%xmm4        # 5bc40 <PW_MF016_MF033>
movdqa %xmm1,-0x40(%rbp)
movdqa %xmm6,-0x30(%rbp)
pxor   %xmm1,%xmm1
pxor   %xmm6,%xmm6
punpcklwd %xmm5,%xmm1
punpckhwd %xmm5,%xmm6
psrld  $0x1,%xmm1
psrld  $0x1,%xmm6
movdqa 0x1c618(%rip),%xmm5        # 5bc60 <PD_ONEHALFM1_CJ>
paddd  %xmm1,%xmm7
paddd  %xmm6,%xmm4
paddd  %xmm5,%xmm7
paddd  %xmm5,%xmm4
psrld  $0x10,%xmm7
psrld  $0x10,%xmm4
packssdw %xmm4,%xmm7
movdqa -0x60(%rbp),%xmm1
movdqa %xmm0,%xmm6
punpcklwd %xmm2,%xmm0
punpckhwd %xmm2,%xmm6
movdqa %xmm0,%xmm5
movdqa %xmm6,%xmm4
pmaddwd 0x1c599(%rip),%xmm0        # 5bc20 <PW_F0299_F0337>
pmaddwd 0x1c591(%rip),%xmm6        # 5bc20 <PW_F0299_F0337>
pmaddwd 0x1c5a9(%rip),%xmm5        # 5bc40 <PW_MF016_MF033>
pmaddwd 0x1c5a1(%rip),%xmm4        # 5bc40 <PW_MF016_MF033>
movdqa %xmm0,-0x20(%rbp)
movdqa %xmm6,-0x10(%rbp)
pxor   %xmm0,%xmm0
pxor   %xmm6,%xmm6
punpcklwd %xmm1,%xmm0
punpckhwd %xmm1,%xmm6
psrld  $0x1,%xmm0
psrld  $0x1,%xmm6
movdqa 0x1c595(%rip),%xmm1        # 5bc60 <PD_ONEHALFM1_CJ>
paddd  %xmm0,%xmm5
paddd  %xmm6,%xmm4
paddd  %xmm1,%xmm5
paddd  %xmm1,%xmm4
psrld  $0x10,%xmm5
psrld  $0x10,%xmm4
packssdw %xmm4,%xmm5
psllw  $0x8,%xmm7
por    %xmm7,%xmm5
movdqa %xmm5,(%rbx)
movdqa -0x50(%rbp),%xmm0
movdqa -0x60(%rbp),%xmm6
movdqa -0x70(%rbp),%xmm1
movdqa %xmm0,%xmm4
punpcklwd %xmm3,%xmm0
punpckhwd %xmm3,%xmm4
movdqa %xmm0,%xmm7
movdqa %xmm4,%xmm5
pmaddwd 0x1c50f(%rip),%xmm0        # 5bc30 <PW_F0114_F0250>
pmaddwd 0x1c507(%rip),%xmm4        # 5bc30 <PW_F0114_F0250>
pmaddwd 0x1c51f(%rip),%xmm7        # 5bc50 <PW_MF008_MF041>
pmaddwd 0x1c517(%rip),%xmm5        # 5bc50 <PW_MF008_MF041>
movdqa 0x1c52f(%rip),%xmm3        # 5bc70 <PD_ONEHALF>
paddd  -0x40(%rbp),%xmm0
paddd  -0x30(%rbp),%xmm4
paddd  %xmm3,%xmm0
paddd  %xmm3,%xmm4
psrld  $0x10,%xmm0
psrld  $0x10,%xmm4
packssdw %xmm4,%xmm0
pxor   %xmm3,%xmm3
pxor   %xmm4,%xmm4
punpcklwd %xmm1,%xmm3
punpckhwd %xmm1,%xmm4
psrld  $0x1,%xmm3
psrld  $0x1,%xmm4
movdqa 0x1c4dd(%rip),%xmm1        # 5bc60 <PD_ONEHALFM1_CJ>
paddd  %xmm3,%xmm7
paddd  %xmm4,%xmm5
paddd  %xmm1,%xmm7
paddd  %xmm1,%xmm5
psrld  $0x10,%xmm7
psrld  $0x10,%xmm5
packssdw %xmm5,%xmm7
movdqa -0x80(%rbp),%xmm3
movdqa %xmm6,%xmm4
punpcklwd %xmm2,%xmm6
punpckhwd %xmm2,%xmm4
movdqa %xmm6,%xmm1
movdqa %xmm4,%xmm5
pmaddwd 0x1c46e(%rip),%xmm6        # 5bc30 <PW_F0114_F0250>
pmaddwd 0x1c466(%rip),%xmm4        # 5bc30 <PW_F0114_F0250>
pmaddwd 0x1c47e(%rip),%xmm1        # 5bc50 <PW_MF008_MF041>
pmaddwd 0x1c476(%rip),%xmm5        # 5bc50 <PW_MF008_MF041>
movdqa 0x1c48e(%rip),%xmm2        # 5bc70 <PD_ONEHALF>
paddd  -0x20(%rbp),%xmm6
paddd  -0x10(%rbp),%xmm4
paddd  %xmm2,%xmm6
paddd  %xmm2,%xmm4
psrld  $0x10,%xmm6
psrld  $0x10,%xmm4
packssdw %xmm4,%xmm6
psllw  $0x8,%xmm0
por    %xmm0,%xmm6
movdqa %xmm6,(%rdi)
pxor   %xmm2,%xmm2
pxor   %xmm4,%xmm4
punpcklwd %xmm3,%xmm2
punpckhwd %xmm3,%xmm4
psrld  $0x1,%xmm2
psrld  $0x1,%xmm4
movdqa 0x1c42f(%rip),%xmm0        # 5bc60 <PD_ONEHALFM1_CJ>
paddd  %xmm2,%xmm1
paddd  %xmm4,%xmm5
paddd  %xmm0,%xmm1
paddd  %xmm0,%xmm5
psrld  $0x10,%xmm1
psrld  $0x10,%xmm5
packssdw %xmm5,%xmm1
psllw  $0x8,%xmm7
por    %xmm7,%xmm1
movdqa %xmm1,(%rdx)
sub    $0x10,%rcx
add    $0x40,%rsi
add    $0x10,%rdi
add    $0x10,%rbx
add    $0x10,%rdx
cmp    $0x10,%rcx
jae    3f53f <jsimd_extbgrx_ycc_convert_sse2.columnloop>
test   %rcx,%rcx
jne    3f4eb <jsimd_extbgrx_ycc_convert_sse2.column_ld1>
pop    %rcx
pop    %rsi
pop    %rdi
pop    %rbx
pop    %rdx
add    $0x8,%rsi
add    $0x8,%rdi
add    $0x8,%rbx
add    $0x8,%rdx
dec    %rax
jg     3f4d0 <jsimd_extbgrx_ycc_convert_sse2.rowloop>

000000000003f8a1 <jsimd_extbgrx_ycc_convert_sse2.return>:
pop    %rbx
pop    %r15
pop    %r14
pop    %r13
pop    %r12
pop    %r11
pop    %r10
mov    %rbp,%rsp
pop    %rsp
pop    %rbp
retq   
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop

000000000003f8c0 <jsimd_extxbgr_ycc_convert_sse2>:
push   %rbp
mov    %rsp,%rax
sub    $0x4,%rsp
and    $0xfffffffffffffff0,%rsp
mov    %rax,(%rsp)
mov    %rsp,%rbp
lea    -0x80(%rbp),%rsp
push   %r10
push   %r11
push   %r12
push   %r13
push   %r14
push   %r15
mov    %rdi,%r10
mov    %rsi,%r11
mov    %rdx,%r12
mov    %rcx,%r13
mov    %r8,%r14
mov    %r9,%r15
push   %rbx
mov    %r10d,%ecx
test   %rcx,%rcx
je     3fd01 <jsimd_extxbgr_ycc_convert_sse2.return>
push   %rcx
mov    %r12,%rsi
mov    %r13d,%ecx
mov    (%rsi),%rdi
mov    0x8(%rsi),%rbx
mov    0x10(%rsi),%rdx
lea    (%rdi,%rcx,8),%rdi
lea    (%rbx,%rcx,8),%rbx
lea    (%rdx,%rcx,8),%rdx
pop    %rcx
mov    %r11,%rsi
mov    %r14d,%eax
test   %rax,%rax
jle    3fd01 <jsimd_extxbgr_ycc_convert_sse2.return>

000000000003f930 <jsimd_extxbgr_ycc_convert_sse2.rowloop>:
push   %rdx
push   %rbx
push   %rdi
push   %rsi
push   %rcx
mov    (%rsi),%rsi
mov    (%rdi),%rdi
mov    (%rbx),%rbx
mov    (%rdx),%rdx
cmp    $0x10,%rcx
jae    3f99f <jsimd_extxbgr_ycc_convert_sse2.columnloop>

000000000003f94b <jsimd_extxbgr_ycc_convert_sse2.column_ld1>:
test   $0x1,%cl
je     3f959 <jsimd_extxbgr_ycc_convert_sse2.column_ld2>
sub    $0x1,%rcx
movd   (%rsi,%rcx,4),%xmm6

000000000003f959 <jsimd_extxbgr_ycc_convert_sse2.column_ld2>:
test   $0x2,%cl
je     3f970 <jsimd_extxbgr_ycc_convert_sse2.column_ld4>
sub    $0x2,%rcx
movq   (%rsi,%rcx,4),%xmm2
pslldq $0x8,%xmm6
por    %xmm2,%xmm6

000000000003f970 <jsimd_extxbgr_ycc_convert_sse2.column_ld4>:
test   $0x4,%cl
je     3f982 <jsimd_extxbgr_ycc_convert_sse2.column_ld8>
sub    $0x4,%rcx
movdqa %xmm6,%xmm2
movdqu (%rsi,%rcx,4),%xmm6

000000000003f982 <jsimd_extxbgr_ycc_convert_sse2.column_ld8>:
test   $0x8,%cl
mov    $0x10,%ecx
je     3f9b2 <jsimd_extxbgr_ycc_convert_sse2.rgb_ycc_cnv>
movdqa %xmm6,%xmm3
movdqa %xmm2,%xmm1
movdqu (%rsi),%xmm6
movdqu 0x10(%rsi),%xmm2
jmp    3f9b2 <jsimd_extxbgr_ycc_convert_sse2.rgb_ycc_cnv>

000000000003f99f <jsimd_extxbgr_ycc_convert_sse2.columnloop>:
movdqu (%rsi),%xmm6
movdqu 0x10(%rsi),%xmm2
movdqu 0x20(%rsi),%xmm3
movdqu 0x30(%rsi),%xmm1

000000000003f9b2 <jsimd_extxbgr_ycc_convert_sse2.rgb_ycc_cnv>:
movdqa %xmm6,%xmm5
punpcklbw %xmm2,%xmm6
punpckhbw %xmm2,%xmm5
movdqa %xmm3,%xmm4
punpcklbw %xmm1,%xmm3
punpckhbw %xmm1,%xmm4
movdqa %xmm6,%xmm7
punpcklwd %xmm3,%xmm6
punpckhwd %xmm3,%xmm7
movdqa %xmm5,%xmm0
punpcklwd %xmm4,%xmm5
punpckhwd %xmm4,%xmm0
movdqa %xmm6,%xmm2
punpcklbw %xmm5,%xmm6
punpckhbw %xmm5,%xmm2
movdqa %xmm7,%xmm1
punpcklbw %xmm0,%xmm7
punpckhbw %xmm0,%xmm1
pxor   %xmm3,%xmm3
movdqa %xmm6,%xmm4
punpcklbw %xmm3,%xmm6
punpckhbw %xmm3,%xmm4
movdqa %xmm7,%xmm5
punpcklbw %xmm3,%xmm7
punpckhbw %xmm3,%xmm5
movdqa %xmm2,%xmm0
punpcklbw %xmm3,%xmm2
punpckhbw %xmm3,%xmm0
punpcklbw %xmm1,%xmm3
punpckhbw %xmm1,%xmm1
psrlw  $0x8,%xmm3
psrlw  $0x8,%xmm1
movdqa %xmm0,-0x80(%rbp)
movdqa %xmm1,-0x70(%rbp)
movdqa %xmm4,-0x60(%rbp)
movdqa %xmm5,-0x50(%rbp)
movdqa %xmm1,%xmm6
punpcklwd %xmm3,%xmm1
punpckhwd %xmm3,%xmm6
movdqa %xmm1,%xmm7
movdqa %xmm6,%xmm4
pmaddwd 0x1c1bc(%rip),%xmm1        # 5bc20 <PW_F0299_F0337>
pmaddwd 0x1c1b4(%rip),%xmm6        # 5bc20 <PW_F0299_F0337>
pmaddwd 0x1c1cc(%rip),%xmm7        # 5bc40 <PW_MF016_MF033>
pmaddwd 0x1c1c4(%rip),%xmm4        # 5bc40 <PW_MF016_MF033>
movdqa %xmm1,-0x40(%rbp)
movdqa %xmm6,-0x30(%rbp)
pxor   %xmm1,%xmm1
pxor   %xmm6,%xmm6
punpcklwd %xmm5,%xmm1
punpckhwd %xmm5,%xmm6
psrld  $0x1,%xmm1
psrld  $0x1,%xmm6
movdqa 0x1c1b8(%rip),%xmm5        # 5bc60 <PD_ONEHALFM1_CJ>
paddd  %xmm1,%xmm7
paddd  %xmm6,%xmm4
paddd  %xmm5,%xmm7
paddd  %xmm5,%xmm4
psrld  $0x10,%xmm7
psrld  $0x10,%xmm4
packssdw %xmm4,%xmm7
movdqa -0x60(%rbp),%xmm1
movdqa %xmm0,%xmm6
punpcklwd %xmm2,%xmm0
punpckhwd %xmm2,%xmm6
movdqa %xmm0,%xmm5
movdqa %xmm6,%xmm4
pmaddwd 0x1c139(%rip),%xmm0        # 5bc20 <PW_F0299_F0337>
pmaddwd 0x1c131(%rip),%xmm6        # 5bc20 <PW_F0299_F0337>
pmaddwd 0x1c149(%rip),%xmm5        # 5bc40 <PW_MF016_MF033>
pmaddwd 0x1c141(%rip),%xmm4        # 5bc40 <PW_MF016_MF033>
movdqa %xmm0,-0x20(%rbp)
movdqa %xmm6,-0x10(%rbp)
pxor   %xmm0,%xmm0
pxor   %xmm6,%xmm6
punpcklwd %xmm1,%xmm0
punpckhwd %xmm1,%xmm6
psrld  $0x1,%xmm0
psrld  $0x1,%xmm6
movdqa 0x1c135(%rip),%xmm1        # 5bc60 <PD_ONEHALFM1_CJ>
paddd  %xmm0,%xmm5
paddd  %xmm6,%xmm4
paddd  %xmm1,%xmm5
paddd  %xmm1,%xmm4
psrld  $0x10,%xmm5
psrld  $0x10,%xmm4
packssdw %xmm4,%xmm5
psllw  $0x8,%xmm7
por    %xmm7,%xmm5
movdqa %xmm5,(%rbx)
movdqa -0x50(%rbp),%xmm0
movdqa -0x60(%rbp),%xmm6
movdqa -0x70(%rbp),%xmm1
movdqa %xmm0,%xmm4
punpcklwd %xmm3,%xmm0
punpckhwd %xmm3,%xmm4
movdqa %xmm0,%xmm7
movdqa %xmm4,%xmm5
pmaddwd 0x1c0af(%rip),%xmm0        # 5bc30 <PW_F0114_F0250>
pmaddwd 0x1c0a7(%rip),%xmm4        # 5bc30 <PW_F0114_F0250>
pmaddwd 0x1c0bf(%rip),%xmm7        # 5bc50 <PW_MF008_MF041>
pmaddwd 0x1c0b7(%rip),%xmm5        # 5bc50 <PW_MF008_MF041>
movdqa 0x1c0cf(%rip),%xmm3        # 5bc70 <PD_ONEHALF>
paddd  -0x40(%rbp),%xmm0
paddd  -0x30(%rbp),%xmm4
paddd  %xmm3,%xmm0
paddd  %xmm3,%xmm4
psrld  $0x10,%xmm0
psrld  $0x10,%xmm4
packssdw %xmm4,%xmm0
pxor   %xmm3,%xmm3
pxor   %xmm4,%xmm4
punpcklwd %xmm1,%xmm3
punpckhwd %xmm1,%xmm4
psrld  $0x1,%xmm3
psrld  $0x1,%xmm4
movdqa 0x1c07d(%rip),%xmm1        # 5bc60 <PD_ONEHALFM1_CJ>
paddd  %xmm3,%xmm7
paddd  %xmm4,%xmm5
paddd  %xmm1,%xmm7
paddd  %xmm1,%xmm5
psrld  $0x10,%xmm7
psrld  $0x10,%xmm5
packssdw %xmm5,%xmm7
movdqa -0x80(%rbp),%xmm3
movdqa %xmm6,%xmm4
punpcklwd %xmm2,%xmm6
punpckhwd %xmm2,%xmm4
movdqa %xmm6,%xmm1
movdqa %xmm4,%xmm5
pmaddwd 0x1c00e(%rip),%xmm6        # 5bc30 <PW_F0114_F0250>
pmaddwd 0x1c006(%rip),%xmm4        # 5bc30 <PW_F0114_F0250>
pmaddwd 0x1c01e(%rip),%xmm1        # 5bc50 <PW_MF008_MF041>
pmaddwd 0x1c016(%rip),%xmm5        # 5bc50 <PW_MF008_MF041>
movdqa 0x1c02e(%rip),%xmm2        # 5bc70 <PD_ONEHALF>
paddd  -0x20(%rbp),%xmm6
paddd  -0x10(%rbp),%xmm4
paddd  %xmm2,%xmm6
paddd  %xmm2,%xmm4
psrld  $0x10,%xmm6
psrld  $0x10,%xmm4
packssdw %xmm4,%xmm6
psllw  $0x8,%xmm0
por    %xmm0,%xmm6
movdqa %xmm6,(%rdi)
pxor   %xmm2,%xmm2
pxor   %xmm4,%xmm4
punpcklwd %xmm3,%xmm2
punpckhwd %xmm3,%xmm4
psrld  $0x1,%xmm2
psrld  $0x1,%xmm4
movdqa 0x1bfcf(%rip),%xmm0        # 5bc60 <PD_ONEHALFM1_CJ>
paddd  %xmm2,%xmm1
paddd  %xmm4,%xmm5
paddd  %xmm0,%xmm1
paddd  %xmm0,%xmm5
psrld  $0x10,%xmm1
psrld  $0x10,%xmm5
packssdw %xmm5,%xmm1
psllw  $0x8,%xmm7
por    %xmm7,%xmm1
movdqa %xmm1,(%rdx)
sub    $0x10,%rcx
add    $0x40,%rsi
add    $0x10,%rdi
add    $0x10,%rbx
add    $0x10,%rdx
cmp    $0x10,%rcx
jae    3f99f <jsimd_extxbgr_ycc_convert_sse2.columnloop>
test   %rcx,%rcx
jne    3f94b <jsimd_extxbgr_ycc_convert_sse2.column_ld1>
pop    %rcx
pop    %rsi
pop    %rdi
pop    %rbx
pop    %rdx
add    $0x8,%rsi
add    $0x8,%rdi
add    $0x8,%rbx
add    $0x8,%rdx
dec    %rax
jg     3f930 <jsimd_extxbgr_ycc_convert_sse2.rowloop>

000000000003fd01 <jsimd_extxbgr_ycc_convert_sse2.return>:
pop    %rbx
pop    %r15
pop    %r14
pop    %r13
pop    %r12
pop    %r11
pop    %r10
mov    %rbp,%rsp
pop    %rsp
pop    %rbp
retq   
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop

000000000003fd20 <jsimd_extxrgb_ycc_convert_sse2>:
push   %rbp
mov    %rsp,%rax
sub    $0x4,%rsp
and    $0xfffffffffffffff0,%rsp
mov    %rax,(%rsp)
mov    %rsp,%rbp
lea    -0x80(%rbp),%rsp
push   %r10
push   %r11
push   %r12
push   %r13
push   %r14
push   %r15
mov    %rdi,%r10
mov    %rsi,%r11
mov    %rdx,%r12
mov    %rcx,%r13
mov    %r8,%r14
mov    %r9,%r15
push   %rbx
mov    %r10d,%ecx
test   %rcx,%rcx
je     40161 <jsimd_extxrgb_ycc_convert_sse2.return>
push   %rcx
mov    %r12,%rsi
mov    %r13d,%ecx
mov    (%rsi),%rdi
mov    0x8(%rsi),%rbx
mov    0x10(%rsi),%rdx
lea    (%rdi,%rcx,8),%rdi
lea    (%rbx,%rcx,8),%rbx
lea    (%rdx,%rcx,8),%rdx
pop    %rcx
mov    %r11,%rsi
mov    %r14d,%eax
test   %rax,%rax
jle    40161 <jsimd_extxrgb_ycc_convert_sse2.return>

000000000003fd90 <jsimd_extxrgb_ycc_convert_sse2.rowloop>:
push   %rdx
push   %rbx
push   %rdi
push   %rsi
push   %rcx
mov    (%rsi),%rsi
mov    (%rdi),%rdi
mov    (%rbx),%rbx
mov    (%rdx),%rdx
cmp    $0x10,%rcx
jae    3fdff <jsimd_extxrgb_ycc_convert_sse2.columnloop>

000000000003fdab <jsimd_extxrgb_ycc_convert_sse2.column_ld1>:
test   $0x1,%cl
je     3fdb9 <jsimd_extxrgb_ycc_convert_sse2.column_ld2>
sub    $0x1,%rcx
movd   (%rsi,%rcx,4),%xmm6

000000000003fdb9 <jsimd_extxrgb_ycc_convert_sse2.column_ld2>:
test   $0x2,%cl
je     3fdd0 <jsimd_extxrgb_ycc_convert_sse2.column_ld4>
sub    $0x2,%rcx
movq   (%rsi,%rcx,4),%xmm2
pslldq $0x8,%xmm6
por    %xmm2,%xmm6

000000000003fdd0 <jsimd_extxrgb_ycc_convert_sse2.column_ld4>:
test   $0x4,%cl
je     3fde2 <jsimd_extxrgb_ycc_convert_sse2.column_ld8>
sub    $0x4,%rcx
movdqa %xmm6,%xmm2
movdqu (%rsi,%rcx,4),%xmm6

000000000003fde2 <jsimd_extxrgb_ycc_convert_sse2.column_ld8>:
test   $0x8,%cl
mov    $0x10,%ecx
je     3fe12 <jsimd_extxrgb_ycc_convert_sse2.rgb_ycc_cnv>
movdqa %xmm6,%xmm3
movdqa %xmm2,%xmm5
movdqu (%rsi),%xmm6
movdqu 0x10(%rsi),%xmm2
jmp    3fe12 <jsimd_extxrgb_ycc_convert_sse2.rgb_ycc_cnv>

000000000003fdff <jsimd_extxrgb_ycc_convert_sse2.columnloop>:
movdqu (%rsi),%xmm6
movdqu 0x10(%rsi),%xmm2
movdqu 0x20(%rsi),%xmm3
movdqu 0x30(%rsi),%xmm5

000000000003fe12 <jsimd_extxrgb_ycc_convert_sse2.rgb_ycc_cnv>:
movdqa %xmm6,%xmm1
punpcklbw %xmm2,%xmm6
punpckhbw %xmm2,%xmm1
movdqa %xmm3,%xmm0
punpcklbw %xmm5,%xmm3
punpckhbw %xmm5,%xmm0
movdqa %xmm6,%xmm7
punpcklwd %xmm3,%xmm6
punpckhwd %xmm3,%xmm7
movdqa %xmm1,%xmm4
punpcklwd %xmm0,%xmm1
punpckhwd %xmm0,%xmm4
movdqa %xmm6,%xmm2
punpcklbw %xmm1,%xmm6
punpckhbw %xmm1,%xmm2
movdqa %xmm7,%xmm5
punpcklbw %xmm4,%xmm7
punpckhbw %xmm4,%xmm5
pxor   %xmm3,%xmm3
movdqa %xmm6,%xmm0
punpcklbw %xmm3,%xmm6
punpckhbw %xmm3,%xmm0
movdqa %xmm7,%xmm1
punpcklbw %xmm3,%xmm7
punpckhbw %xmm3,%xmm1
movdqa %xmm2,%xmm4
punpcklbw %xmm3,%xmm2
punpckhbw %xmm3,%xmm4
punpcklbw %xmm5,%xmm3
punpckhbw %xmm5,%xmm5
psrlw  $0x8,%xmm3
psrlw  $0x8,%xmm5
movdqa %xmm0,-0x80(%rbp)
movdqa %xmm1,-0x70(%rbp)
movdqa %xmm4,-0x60(%rbp)
movdqa %xmm5,-0x50(%rbp)
movdqa %xmm1,%xmm6
punpcklwd %xmm3,%xmm1
punpckhwd %xmm3,%xmm6
movdqa %xmm1,%xmm7
movdqa %xmm6,%xmm4
pmaddwd 0x1bd5c(%rip),%xmm1        # 5bc20 <PW_F0299_F0337>
pmaddwd 0x1bd54(%rip),%xmm6        # 5bc20 <PW_F0299_F0337>
pmaddwd 0x1bd6c(%rip),%xmm7        # 5bc40 <PW_MF016_MF033>
pmaddwd 0x1bd64(%rip),%xmm4        # 5bc40 <PW_MF016_MF033>
movdqa %xmm1,-0x40(%rbp)
movdqa %xmm6,-0x30(%rbp)
pxor   %xmm1,%xmm1
pxor   %xmm6,%xmm6
punpcklwd %xmm5,%xmm1
punpckhwd %xmm5,%xmm6
psrld  $0x1,%xmm1
psrld  $0x1,%xmm6
movdqa 0x1bd58(%rip),%xmm5        # 5bc60 <PD_ONEHALFM1_CJ>
paddd  %xmm1,%xmm7
paddd  %xmm6,%xmm4
paddd  %xmm5,%xmm7
paddd  %xmm5,%xmm4
psrld  $0x10,%xmm7
psrld  $0x10,%xmm4
packssdw %xmm4,%xmm7
movdqa -0x60(%rbp),%xmm1
movdqa %xmm0,%xmm6
punpcklwd %xmm2,%xmm0
punpckhwd %xmm2,%xmm6
movdqa %xmm0,%xmm5
movdqa %xmm6,%xmm4
pmaddwd 0x1bcd9(%rip),%xmm0        # 5bc20 <PW_F0299_F0337>
pmaddwd 0x1bcd1(%rip),%xmm6        # 5bc20 <PW_F0299_F0337>
pmaddwd 0x1bce9(%rip),%xmm5        # 5bc40 <PW_MF016_MF033>
pmaddwd 0x1bce1(%rip),%xmm4        # 5bc40 <PW_MF016_MF033>
movdqa %xmm0,-0x20(%rbp)
movdqa %xmm6,-0x10(%rbp)
pxor   %xmm0,%xmm0
pxor   %xmm6,%xmm6
punpcklwd %xmm1,%xmm0
punpckhwd %xmm1,%xmm6
psrld  $0x1,%xmm0
psrld  $0x1,%xmm6
movdqa 0x1bcd5(%rip),%xmm1        # 5bc60 <PD_ONEHALFM1_CJ>
paddd  %xmm0,%xmm5
paddd  %xmm6,%xmm4
paddd  %xmm1,%xmm5
paddd  %xmm1,%xmm4
psrld  $0x10,%xmm5
psrld  $0x10,%xmm4
packssdw %xmm4,%xmm5
psllw  $0x8,%xmm7
por    %xmm7,%xmm5
movdqa %xmm5,(%rbx)
movdqa -0x50(%rbp),%xmm0
movdqa -0x60(%rbp),%xmm6
movdqa -0x70(%rbp),%xmm1
movdqa %xmm0,%xmm4
punpcklwd %xmm3,%xmm0
punpckhwd %xmm3,%xmm4
movdqa %xmm0,%xmm7
movdqa %xmm4,%xmm5
pmaddwd 0x1bc4f(%rip),%xmm0        # 5bc30 <PW_F0114_F0250>
pmaddwd 0x1bc47(%rip),%xmm4        # 5bc30 <PW_F0114_F0250>
pmaddwd 0x1bc5f(%rip),%xmm7        # 5bc50 <PW_MF008_MF041>
pmaddwd 0x1bc57(%rip),%xmm5        # 5bc50 <PW_MF008_MF041>
movdqa 0x1bc6f(%rip),%xmm3        # 5bc70 <PD_ONEHALF>
paddd  -0x40(%rbp),%xmm0
paddd  -0x30(%rbp),%xmm4
paddd  %xmm3,%xmm0
paddd  %xmm3,%xmm4
psrld  $0x10,%xmm0
psrld  $0x10,%xmm4
packssdw %xmm4,%xmm0
pxor   %xmm3,%xmm3
pxor   %xmm4,%xmm4
punpcklwd %xmm1,%xmm3
punpckhwd %xmm1,%xmm4
psrld  $0x1,%xmm3
psrld  $0x1,%xmm4
movdqa 0x1bc1d(%rip),%xmm1        # 5bc60 <PD_ONEHALFM1_CJ>
paddd  %xmm3,%xmm7
paddd  %xmm4,%xmm5
paddd  %xmm1,%xmm7
paddd  %xmm1,%xmm5
psrld  $0x10,%xmm7
psrld  $0x10,%xmm5
packssdw %xmm5,%xmm7
movdqa -0x80(%rbp),%xmm3
movdqa %xmm6,%xmm4
punpcklwd %xmm2,%xmm6
punpckhwd %xmm2,%xmm4
movdqa %xmm6,%xmm1
movdqa %xmm4,%xmm5
pmaddwd 0x1bbae(%rip),%xmm6        # 5bc30 <PW_F0114_F0250>
pmaddwd 0x1bba6(%rip),%xmm4        # 5bc30 <PW_F0114_F0250>
pmaddwd 0x1bbbe(%rip),%xmm1        # 5bc50 <PW_MF008_MF041>
pmaddwd 0x1bbb6(%rip),%xmm5        # 5bc50 <PW_MF008_MF041>
movdqa 0x1bbce(%rip),%xmm2        # 5bc70 <PD_ONEHALF>
paddd  -0x20(%rbp),%xmm6
paddd  -0x10(%rbp),%xmm4
paddd  %xmm2,%xmm6
paddd  %xmm2,%xmm4
psrld  $0x10,%xmm6
psrld  $0x10,%xmm4
packssdw %xmm4,%xmm6
psllw  $0x8,%xmm0
por    %xmm0,%xmm6
movdqa %xmm6,(%rdi)
pxor   %xmm2,%xmm2
pxor   %xmm4,%xmm4
punpcklwd %xmm3,%xmm2
punpckhwd %xmm3,%xmm4
psrld  $0x1,%xmm2
psrld  $0x1,%xmm4
movdqa 0x1bb6f(%rip),%xmm0        # 5bc60 <PD_ONEHALFM1_CJ>
paddd  %xmm2,%xmm1
paddd  %xmm4,%xmm5
paddd  %xmm0,%xmm1
paddd  %xmm0,%xmm5
psrld  $0x10,%xmm1
psrld  $0x10,%xmm5
packssdw %xmm5,%xmm1
psllw  $0x8,%xmm7
por    %xmm7,%xmm1
movdqa %xmm1,(%rdx)
sub    $0x10,%rcx
add    $0x40,%rsi
add    $0x10,%rdi
add    $0x10,%rbx
add    $0x10,%rdx
cmp    $0x10,%rcx
jae    3fdff <jsimd_extxrgb_ycc_convert_sse2.columnloop>
test   %rcx,%rcx
jne    3fdab <jsimd_extxrgb_ycc_convert_sse2.column_ld1>
pop    %rcx
pop    %rsi
pop    %rdi
pop    %rbx
pop    %rdx
add    $0x8,%rsi
add    $0x8,%rdi
add    $0x8,%rbx
add    $0x8,%rdx
dec    %rax
jg     3fd90 <jsimd_extxrgb_ycc_convert_sse2.rowloop>

0000000000040161 <jsimd_extxrgb_ycc_convert_sse2.return>:
pop    %rbx
pop    %r15
pop    %r14
pop    %r13
pop    %r12
pop    %r11
pop    %r10
mov    %rbp,%rsp
pop    %rsp
pop    %rbp
retq   
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop

0000000000040180 <jsimd_rgb_gray_convert_sse2>:
push   %rbp
mov    %rsp,%rax
sub    $0x4,%rsp
and    $0xfffffffffffffff0,%rsp
mov    %rax,(%rsp)
mov    %rsp,%rbp
lea    -0x20(%rbp),%rsp
push   %r10
push   %r11
push   %r12
push   %r13
push   %r14
push   %r15
mov    %rdi,%r10
mov    %rsi,%r11
mov    %rdx,%r12
mov    %rcx,%r13
mov    %r8,%r14
mov    %r9,%r15
push   %rbx
mov    %r10d,%ecx
test   %rcx,%rcx
je     40424 <jsimd_rgb_gray_convert_sse2.return>
push   %rcx
mov    %r12,%rsi
mov    %r13d,%ecx
mov    (%rsi),%rdi
lea    (%rdi,%rcx,8),%rdi
pop    %rcx
mov    %r11,%rsi
mov    %r14d,%eax
test   %rax,%rax
jle    40424 <jsimd_rgb_gray_convert_sse2.return>

00000000000401e0 <jsimd_rgb_gray_convert_sse2.rowloop>:
push   %rdi
push   %rsi
push   %rcx
mov    (%rsi),%rsi
mov    (%rdi),%rdi
cmp    $0x10,%rcx
jae    4027d <jsimd_rgb_gray_convert_sse2.columnloop>

00000000000401f3 <jsimd_rgb_gray_convert_sse2.column_ld1>:
push   %rax
push   %rdx
lea    (%rcx,%rcx,2),%rcx
test   $0x1,%cl
je     40207 <jsimd_rgb_gray_convert_sse2.column_ld2>
sub    $0x1,%rcx
movzbq (%rsi,%rcx,1),%rax

0000000000040207 <jsimd_rgb_gray_convert_sse2.column_ld2>:
test   $0x2,%cl
je     4021c <jsimd_rgb_gray_convert_sse2.column_ld4>
sub    $0x2,%rcx
movzwq (%rsi,%rcx,1),%rdx
shl    $0x10,%rax
or     %rdx,%rax

000000000004021c <jsimd_rgb_gray_convert_sse2.column_ld4>:
movd   %eax,%xmm0
pop    %rdx
pop    %rax
test   $0x4,%cl
je     40239 <jsimd_rgb_gray_convert_sse2.column_ld8>
sub    $0x4,%rcx
movd   (%rsi,%rcx,1),%xmm5
pslldq $0x4,%xmm0
por    %xmm5,%xmm0

0000000000040239 <jsimd_rgb_gray_convert_sse2.column_ld8>:
test   $0x8,%cl
je     40250 <jsimd_rgb_gray_convert_sse2.column_ld16>
sub    $0x8,%rcx
movq   (%rsi,%rcx,1),%xmm1
pslldq $0x8,%xmm0
por    %xmm1,%xmm0

0000000000040250 <jsimd_rgb_gray_convert_sse2.column_ld16>:
test   $0x10,%cl
je     40264 <jsimd_rgb_gray_convert_sse2.column_ld32>
movdqa %xmm0,%xmm5
movdqu (%rsi),%xmm0
mov    $0x10,%ecx
jmp    4028b <jsimd_rgb_gray_convert_sse2.rgb_gray_cnv>

0000000000040264 <jsimd_rgb_gray_convert_sse2.column_ld32>:
test   $0x20,%cl
mov    $0x10,%ecx
je     4028b <jsimd_rgb_gray_convert_sse2.rgb_gray_cnv>
movdqa %xmm0,%xmm1
movdqu (%rsi),%xmm0
movdqu 0x10(%rsi),%xmm5
jmp    4028b <jsimd_rgb_gray_convert_sse2.rgb_gray_cnv>

000000000004027d <jsimd_rgb_gray_convert_sse2.columnloop>:
movdqu (%rsi),%xmm0
movdqu 0x10(%rsi),%xmm5
movdqu 0x20(%rsi),%xmm1

000000000004028b <jsimd_rgb_gray_convert_sse2.rgb_gray_cnv>:
movdqa %xmm0,%xmm6
pslldq $0x8,%xmm0
psrldq $0x8,%xmm6
punpckhbw %xmm5,%xmm0
pslldq $0x8,%xmm5
punpcklbw %xmm1,%xmm6
punpckhbw %xmm1,%xmm5
movdqa %xmm0,%xmm3
pslldq $0x8,%xmm0
psrldq $0x8,%xmm3
punpckhbw %xmm6,%xmm0
pslldq $0x8,%xmm6
punpcklbw %xmm5,%xmm3
punpckhbw %xmm5,%xmm6
movdqa %xmm0,%xmm4
pslldq $0x8,%xmm0
psrldq $0x8,%xmm4
punpckhbw %xmm3,%xmm0
pslldq $0x8,%xmm3
punpcklbw %xmm6,%xmm4
punpckhbw %xmm6,%xmm3
pxor   %xmm7,%xmm7
movdqa %xmm0,%xmm2
punpcklbw %xmm7,%xmm0
punpckhbw %xmm7,%xmm2
movdqa %xmm4,%xmm1
punpcklbw %xmm7,%xmm4
punpckhbw %xmm7,%xmm1
movdqa %xmm3,%xmm5
punpcklbw %xmm7,%xmm3
punpckhbw %xmm7,%xmm5
movdqa %xmm1,%xmm6
punpcklwd %xmm3,%xmm1
punpckhwd %xmm3,%xmm6
pmaddwd 0x1b95c(%rip),%xmm1        # 5bc80 <PW_F0299_F0337>
pmaddwd 0x1b954(%rip),%xmm6        # 5bc80 <PW_F0299_F0337>
movdqa %xmm6,%xmm7
movdqa %xmm0,%xmm6
punpcklwd %xmm2,%xmm0
punpckhwd %xmm2,%xmm6
pmaddwd 0x1b93c(%rip),%xmm0        # 5bc80 <PW_F0299_F0337>
pmaddwd 0x1b934(%rip),%xmm6        # 5bc80 <PW_F0299_F0337>
movdqa %xmm0,-0x20(%rbp)
movdqa %xmm6,-0x10(%rbp)
movdqa %xmm5,%xmm0
movdqa %xmm4,%xmm6
movdqa %xmm0,%xmm4
punpcklwd %xmm3,%xmm0
punpckhwd %xmm3,%xmm4
pmaddwd 0x1b91e(%rip),%xmm0        # 5bc90 <PW_F0114_F0250>
pmaddwd 0x1b916(%rip),%xmm4        # 5bc90 <PW_F0114_F0250>
movdqa 0x1b91e(%rip),%xmm3        # 5bca0 <PD_ONEHALF>
paddd  %xmm1,%xmm0
paddd  %xmm7,%xmm4
paddd  %xmm3,%xmm0
paddd  %xmm3,%xmm4
psrld  $0x10,%xmm0
psrld  $0x10,%xmm4
packssdw %xmm4,%xmm0
movdqa %xmm6,%xmm4
punpcklwd %xmm2,%xmm6
punpckhwd %xmm2,%xmm4
pmaddwd 0x1b8dc(%rip),%xmm6        # 5bc90 <PW_F0114_F0250>
pmaddwd 0x1b8d4(%rip),%xmm4        # 5bc90 <PW_F0114_F0250>
movdqa 0x1b8dc(%rip),%xmm2        # 5bca0 <PD_ONEHALF>
paddd  -0x20(%rbp),%xmm6
paddd  -0x10(%rbp),%xmm4
paddd  %xmm2,%xmm6
paddd  %xmm2,%xmm4
psrld  $0x10,%xmm6
psrld  $0x10,%xmm4
packssdw %xmm4,%xmm6
psllw  $0x8,%xmm0
por    %xmm0,%xmm6
movdqa %xmm6,(%rdi)
sub    $0x10,%rcx
add    $0x30,%rsi
add    $0x10,%rdi
cmp    $0x10,%rcx
jae    4027d <jsimd_rgb_gray_convert_sse2.columnloop>
test   %rcx,%rcx
jne    401f3 <jsimd_rgb_gray_convert_sse2.column_ld1>
pop    %rcx
pop    %rsi
pop    %rdi
add    $0x8,%rsi
add    $0x8,%rdi
dec    %rax
jg     401e0 <jsimd_rgb_gray_convert_sse2.rowloop>

0000000000040424 <jsimd_rgb_gray_convert_sse2.return>:
pop    %rbx
pop    %r15
pop    %r14
pop    %r13
pop    %r12
pop    %r11
pop    %r10
mov    %rbp,%rsp
pop    %rsp
pop    %rbp
retq   
nop
nop
nop
nop
nop
nop
nop
nop
nop

0000000000040440 <jsimd_extrgb_gray_convert_sse2>:
push   %rbp
mov    %rsp,%rax
sub    $0x4,%rsp
and    $0xfffffffffffffff0,%rsp
mov    %rax,(%rsp)
mov    %rsp,%rbp
lea    -0x20(%rbp),%rsp
push   %r10
push   %r11
push   %r12
push   %r13
push   %r14
push   %r15
mov    %rdi,%r10
mov    %rsi,%r11
mov    %rdx,%r12
mov    %rcx,%r13
mov    %r8,%r14
mov    %r9,%r15
push   %rbx
mov    %r10d,%ecx
test   %rcx,%rcx
je     406e4 <jsimd_extrgb_gray_convert_sse2.return>
push   %rcx
mov    %r12,%rsi
mov    %r13d,%ecx
mov    (%rsi),%rdi
lea    (%rdi,%rcx,8),%rdi
pop    %rcx
mov    %r11,%rsi
mov    %r14d,%eax
test   %rax,%rax
jle    406e4 <jsimd_extrgb_gray_convert_sse2.return>

00000000000404a0 <jsimd_extrgb_gray_convert_sse2.rowloop>:
push   %rdi
push   %rsi
push   %rcx
mov    (%rsi),%rsi
mov    (%rdi),%rdi
cmp    $0x10,%rcx
jae    4053d <jsimd_extrgb_gray_convert_sse2.columnloop>

00000000000404b3 <jsimd_extrgb_gray_convert_sse2.column_ld1>:
push   %rax
push   %rdx
lea    (%rcx,%rcx,2),%rcx
test   $0x1,%cl
je     404c7 <jsimd_extrgb_gray_convert_sse2.column_ld2>
sub    $0x1,%rcx
movzbq (%rsi,%rcx,1),%rax

00000000000404c7 <jsimd_extrgb_gray_convert_sse2.column_ld2>:
test   $0x2,%cl
je     404dc <jsimd_extrgb_gray_convert_sse2.column_ld4>
sub    $0x2,%rcx
movzwq (%rsi,%rcx,1),%rdx
shl    $0x10,%rax
or     %rdx,%rax

00000000000404dc <jsimd_extrgb_gray_convert_sse2.column_ld4>:
movd   %eax,%xmm0
pop    %rdx
pop    %rax
test   $0x4,%cl
je     404f9 <jsimd_extrgb_gray_convert_sse2.column_ld8>
sub    $0x4,%rcx
movd   (%rsi,%rcx,1),%xmm5
pslldq $0x4,%xmm0
por    %xmm5,%xmm0

00000000000404f9 <jsimd_extrgb_gray_convert_sse2.column_ld8>:
test   $0x8,%cl
je     40510 <jsimd_extrgb_gray_convert_sse2.column_ld16>
sub    $0x8,%rcx
movq   (%rsi,%rcx,1),%xmm1
pslldq $0x8,%xmm0
por    %xmm1,%xmm0

0000000000040510 <jsimd_extrgb_gray_convert_sse2.column_ld16>:
test   $0x10,%cl
je     40524 <jsimd_extrgb_gray_convert_sse2.column_ld32>
movdqa %xmm0,%xmm5
movdqu (%rsi),%xmm0
mov    $0x10,%ecx
jmp    4054b <jsimd_extrgb_gray_convert_sse2.rgb_gray_cnv>

0000000000040524 <jsimd_extrgb_gray_convert_sse2.column_ld32>:
test   $0x20,%cl
mov    $0x10,%ecx
je     4054b <jsimd_extrgb_gray_convert_sse2.rgb_gray_cnv>
movdqa %xmm0,%xmm1
movdqu (%rsi),%xmm0
movdqu 0x10(%rsi),%xmm5
jmp    4054b <jsimd_extrgb_gray_convert_sse2.rgb_gray_cnv>

000000000004053d <jsimd_extrgb_gray_convert_sse2.columnloop>:
movdqu (%rsi),%xmm0
movdqu 0x10(%rsi),%xmm5
movdqu 0x20(%rsi),%xmm1

000000000004054b <jsimd_extrgb_gray_convert_sse2.rgb_gray_cnv>:
movdqa %xmm0,%xmm6
pslldq $0x8,%xmm0
psrldq $0x8,%xmm6
punpckhbw %xmm5,%xmm0
pslldq $0x8,%xmm5
punpcklbw %xmm1,%xmm6
punpckhbw %xmm1,%xmm5
movdqa %xmm0,%xmm3
pslldq $0x8,%xmm0
psrldq $0x8,%xmm3
punpckhbw %xmm6,%xmm0
pslldq $0x8,%xmm6
punpcklbw %xmm5,%xmm3
punpckhbw %xmm5,%xmm6
movdqa %xmm0,%xmm4
pslldq $0x8,%xmm0
psrldq $0x8,%xmm4
punpckhbw %xmm3,%xmm0
pslldq $0x8,%xmm3
punpcklbw %xmm6,%xmm4
punpckhbw %xmm6,%xmm3
pxor   %xmm7,%xmm7
movdqa %xmm0,%xmm2
punpcklbw %xmm7,%xmm0
punpckhbw %xmm7,%xmm2
movdqa %xmm4,%xmm1
punpcklbw %xmm7,%xmm4
punpckhbw %xmm7,%xmm1
movdqa %xmm3,%xmm5
punpcklbw %xmm7,%xmm3
punpckhbw %xmm7,%xmm5
movdqa %xmm1,%xmm6
punpcklwd %xmm3,%xmm1
punpckhwd %xmm3,%xmm6
pmaddwd 0x1b69c(%rip),%xmm1        # 5bc80 <PW_F0299_F0337>
pmaddwd 0x1b694(%rip),%xmm6        # 5bc80 <PW_F0299_F0337>
movdqa %xmm6,%xmm7
movdqa %xmm0,%xmm6
punpcklwd %xmm2,%xmm0
punpckhwd %xmm2,%xmm6
pmaddwd 0x1b67c(%rip),%xmm0        # 5bc80 <PW_F0299_F0337>
pmaddwd 0x1b674(%rip),%xmm6        # 5bc80 <PW_F0299_F0337>
movdqa %xmm0,-0x20(%rbp)
movdqa %xmm6,-0x10(%rbp)
movdqa %xmm5,%xmm0
movdqa %xmm4,%xmm6
movdqa %xmm0,%xmm4
punpcklwd %xmm3,%xmm0
punpckhwd %xmm3,%xmm4
pmaddwd 0x1b65e(%rip),%xmm0        # 5bc90 <PW_F0114_F0250>
pmaddwd 0x1b656(%rip),%xmm4        # 5bc90 <PW_F0114_F0250>
movdqa 0x1b65e(%rip),%xmm3        # 5bca0 <PD_ONEHALF>
paddd  %xmm1,%xmm0
paddd  %xmm7,%xmm4
paddd  %xmm3,%xmm0
paddd  %xmm3,%xmm4
psrld  $0x10,%xmm0
psrld  $0x10,%xmm4
packssdw %xmm4,%xmm0
movdqa %xmm6,%xmm4
punpcklwd %xmm2,%xmm6
punpckhwd %xmm2,%xmm4
pmaddwd 0x1b61c(%rip),%xmm6        # 5bc90 <PW_F0114_F0250>
pmaddwd 0x1b614(%rip),%xmm4        # 5bc90 <PW_F0114_F0250>
movdqa 0x1b61c(%rip),%xmm2        # 5bca0 <PD_ONEHALF>
paddd  -0x20(%rbp),%xmm6
paddd  -0x10(%rbp),%xmm4
paddd  %xmm2,%xmm6
paddd  %xmm2,%xmm4
psrld  $0x10,%xmm6
psrld  $0x10,%xmm4
packssdw %xmm4,%xmm6
psllw  $0x8,%xmm0
por    %xmm0,%xmm6
movdqa %xmm6,(%rdi)
sub    $0x10,%rcx
add    $0x30,%rsi
add    $0x10,%rdi
cmp    $0x10,%rcx
jae    4053d <jsimd_extrgb_gray_convert_sse2.columnloop>
test   %rcx,%rcx
jne    404b3 <jsimd_extrgb_gray_convert_sse2.column_ld1>
pop    %rcx
pop    %rsi
pop    %rdi
add    $0x8,%rsi
add    $0x8,%rdi
dec    %rax
jg     404a0 <jsimd_extrgb_gray_convert_sse2.rowloop>

00000000000406e4 <jsimd_extrgb_gray_convert_sse2.return>:
pop    %rbx
pop    %r15
pop    %r14
pop    %r13
pop    %r12
pop    %r11
pop    %r10
mov    %rbp,%rsp
pop    %rsp
pop    %rbp
retq   
nop
nop
nop
nop
nop
nop
nop
nop
nop

0000000000040700 <jsimd_extrgbx_gray_convert_sse2>:
push   %rbp
mov    %rsp,%rax
sub    $0x4,%rsp
and    $0xfffffffffffffff0,%rsp
mov    %rax,(%rsp)
mov    %rsp,%rbp
lea    -0x20(%rbp),%rsp
push   %r10
push   %r11
push   %r12
push   %r13
push   %r14
push   %r15
mov    %rdi,%r10
mov    %rsi,%r11
mov    %rdx,%r12
mov    %rcx,%r13
mov    %r8,%r14
mov    %r9,%r15
push   %rbx
mov    %r10d,%ecx
test   %rcx,%rcx
je     40970 <jsimd_extrgbx_gray_convert_sse2.return>
push   %rcx
mov    %r12,%rsi
mov    %r13d,%ecx
mov    (%rsi),%rdi
lea    (%rdi,%rcx,8),%rdi
pop    %rcx
mov    %r11,%rsi
mov    %r14d,%eax
test   %rax,%rax
jle    40970 <jsimd_extrgbx_gray_convert_sse2.return>

0000000000040760 <jsimd_extrgbx_gray_convert_sse2.rowloop>:
push   %rdi
push   %rsi
push   %rcx
mov    (%rsi),%rsi
mov    (%rdi),%rdi
cmp    $0x10,%rcx
jae    407c7 <jsimd_extrgbx_gray_convert_sse2.columnloop>

0000000000040773 <jsimd_extrgbx_gray_convert_sse2.column_ld1>:
test   $0x1,%cl
je     40781 <jsimd_extrgbx_gray_convert_sse2.column_ld2>
sub    $0x1,%rcx
movd   (%rsi,%rcx,4),%xmm0

0000000000040781 <jsimd_extrgbx_gray_convert_sse2.column_ld2>:
test   $0x2,%cl
je     40798 <jsimd_extrgbx_gray_convert_sse2.column_ld4>
sub    $0x2,%rcx
movq   (%rsi,%rcx,4),%xmm4
pslldq $0x8,%xmm0
por    %xmm4,%xmm0

0000000000040798 <jsimd_extrgbx_gray_convert_sse2.column_ld4>:
test   $0x4,%cl
je     407aa <jsimd_extrgbx_gray_convert_sse2.column_ld8>
sub    $0x4,%rcx
movdqa %xmm0,%xmm4
movdqu (%rsi,%rcx,4),%xmm0

00000000000407aa <jsimd_extrgbx_gray_convert_sse2.column_ld8>:
test   $0x8,%cl
mov    $0x10,%ecx
je     407da <jsimd_extrgbx_gray_convert_sse2.rgb_gray_cnv>
movdqa %xmm0,%xmm5
movdqa %xmm4,%xmm7
movdqu (%rsi),%xmm0
movdqu 0x10(%rsi),%xmm4
jmp    407da <jsimd_extrgbx_gray_convert_sse2.rgb_gray_cnv>

00000000000407c7 <jsimd_extrgbx_gray_convert_sse2.columnloop>:
movdqu (%rsi),%xmm0
movdqu 0x10(%rsi),%xmm4
movdqu 0x20(%rsi),%xmm5
movdqu 0x30(%rsi),%xmm7

00000000000407da <jsimd_extrgbx_gray_convert_sse2.rgb_gray_cnv>:
movdqa %xmm0,%xmm3
punpcklbw %xmm4,%xmm0
punpckhbw %xmm4,%xmm3
movdqa %xmm5,%xmm2
punpcklbw %xmm7,%xmm5
punpckhbw %xmm7,%xmm2
movdqa %xmm0,%xmm1
punpcklwd %xmm5,%xmm0
punpckhwd %xmm5,%xmm1
movdqa %xmm3,%xmm6
punpcklwd %xmm2,%xmm3
punpckhwd %xmm2,%xmm6
movdqa %xmm0,%xmm4
punpcklbw %xmm3,%xmm0
punpckhbw %xmm3,%xmm4
movdqa %xmm1,%xmm7
punpcklbw %xmm6,%xmm1
punpckhbw %xmm6,%xmm7
pxor   %xmm5,%xmm5
movdqa %xmm0,%xmm2
punpcklbw %xmm5,%xmm0
punpckhbw %xmm5,%xmm2
movdqa %xmm1,%xmm3
punpcklbw %xmm5,%xmm1
punpckhbw %xmm5,%xmm3
movdqa %xmm4,%xmm6
punpcklbw %xmm5,%xmm4
punpckhbw %xmm5,%xmm6
punpcklbw %xmm7,%xmm5
punpckhbw %xmm7,%xmm7
psrlw  $0x8,%xmm5
psrlw  $0x8,%xmm7
movdqa %xmm1,%xmm6
punpcklwd %xmm3,%xmm1
punpckhwd %xmm3,%xmm6
pmaddwd 0x1b410(%rip),%xmm1        # 5bc80 <PW_F0299_F0337>
pmaddwd 0x1b408(%rip),%xmm6        # 5bc80 <PW_F0299_F0337>
movdqa %xmm6,%xmm7
movdqa %xmm0,%xmm6
punpcklwd %xmm2,%xmm0
punpckhwd %xmm2,%xmm6
pmaddwd 0x1b3f0(%rip),%xmm0        # 5bc80 <PW_F0299_F0337>
pmaddwd 0x1b3e8(%rip),%xmm6        # 5bc80 <PW_F0299_F0337>
movdqa %xmm0,-0x20(%rbp)
movdqa %xmm6,-0x10(%rbp)
movdqa %xmm5,%xmm0
movdqa %xmm4,%xmm6
movdqa %xmm0,%xmm4
punpcklwd %xmm3,%xmm0
punpckhwd %xmm3,%xmm4
pmaddwd 0x1b3d2(%rip),%xmm0        # 5bc90 <PW_F0114_F0250>
pmaddwd 0x1b3ca(%rip),%xmm4        # 5bc90 <PW_F0114_F0250>
movdqa 0x1b3d2(%rip),%xmm3        # 5bca0 <PD_ONEHALF>
paddd  %xmm1,%xmm0
paddd  %xmm7,%xmm4
paddd  %xmm3,%xmm0
paddd  %xmm3,%xmm4
psrld  $0x10,%xmm0
psrld  $0x10,%xmm4
packssdw %xmm4,%xmm0
movdqa %xmm6,%xmm4
punpcklwd %xmm2,%xmm6
punpckhwd %xmm2,%xmm4
pmaddwd 0x1b390(%rip),%xmm6        # 5bc90 <PW_F0114_F0250>
pmaddwd 0x1b388(%rip),%xmm4        # 5bc90 <PW_F0114_F0250>
movdqa 0x1b390(%rip),%xmm2        # 5bca0 <PD_ONEHALF>
paddd  -0x20(%rbp),%xmm6
paddd  -0x10(%rbp),%xmm4
paddd  %xmm2,%xmm6
paddd  %xmm2,%xmm4
psrld  $0x10,%xmm6
psrld  $0x10,%xmm4
packssdw %xmm4,%xmm6
psllw  $0x8,%xmm0
por    %xmm0,%xmm6
movdqa %xmm6,(%rdi)
sub    $0x10,%rcx
add    $0x40,%rsi
add    $0x10,%rdi
cmp    $0x10,%rcx
jae    407c7 <jsimd_extrgbx_gray_convert_sse2.columnloop>
test   %rcx,%rcx
jne    40773 <jsimd_extrgbx_gray_convert_sse2.column_ld1>
pop    %rcx
pop    %rsi
pop    %rdi
add    $0x8,%rsi
add    $0x8,%rdi
dec    %rax
jg     40760 <jsimd_extrgbx_gray_convert_sse2.rowloop>

0000000000040970 <jsimd_extrgbx_gray_convert_sse2.return>:
pop    %rbx
pop    %r15
pop    %r14
pop    %r13
pop    %r12
pop    %r11
pop    %r10
mov    %rbp,%rsp
pop    %rsp
pop    %rbp
retq   
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop

0000000000040990 <jsimd_extbgr_gray_convert_sse2>:
push   %rbp
mov    %rsp,%rax
sub    $0x4,%rsp
and    $0xfffffffffffffff0,%rsp
mov    %rax,(%rsp)
mov    %rsp,%rbp
lea    -0x20(%rbp),%rsp
push   %r10
push   %r11
push   %r12
push   %r13
push   %r14
push   %r15
mov    %rdi,%r10
mov    %rsi,%r11
mov    %rdx,%r12
mov    %rcx,%r13
mov    %r8,%r14
mov    %r9,%r15
push   %rbx
mov    %r10d,%ecx
test   %rcx,%rcx
je     40c34 <jsimd_extbgr_gray_convert_sse2.return>
push   %rcx
mov    %r12,%rsi
mov    %r13d,%ecx
mov    (%rsi),%rdi
lea    (%rdi,%rcx,8),%rdi
pop    %rcx
mov    %r11,%rsi
mov    %r14d,%eax
test   %rax,%rax
jle    40c34 <jsimd_extbgr_gray_convert_sse2.return>

00000000000409f0 <jsimd_extbgr_gray_convert_sse2.rowloop>:
push   %rdi
push   %rsi
push   %rcx
mov    (%rsi),%rsi
mov    (%rdi),%rdi
cmp    $0x10,%rcx
jae    40a8d <jsimd_extbgr_gray_convert_sse2.columnloop>

0000000000040a03 <jsimd_extbgr_gray_convert_sse2.column_ld1>:
push   %rax
push   %rdx
lea    (%rcx,%rcx,2),%rcx
test   $0x1,%cl
je     40a17 <jsimd_extbgr_gray_convert_sse2.column_ld2>
sub    $0x1,%rcx
movzbq (%rsi,%rcx,1),%rax

0000000000040a17 <jsimd_extbgr_gray_convert_sse2.column_ld2>:
test   $0x2,%cl
je     40a2c <jsimd_extbgr_gray_convert_sse2.column_ld4>
sub    $0x2,%rcx
movzwq (%rsi,%rcx,1),%rdx
shl    $0x10,%rax
or     %rdx,%rax

0000000000040a2c <jsimd_extbgr_gray_convert_sse2.column_ld4>:
movd   %eax,%xmm4
pop    %rdx
pop    %rax
test   $0x4,%cl
je     40a49 <jsimd_extbgr_gray_convert_sse2.column_ld8>
sub    $0x4,%rcx
movd   (%rsi,%rcx,1),%xmm1
pslldq $0x4,%xmm4
por    %xmm1,%xmm4

0000000000040a49 <jsimd_extbgr_gray_convert_sse2.column_ld8>:
test   $0x8,%cl
je     40a60 <jsimd_extbgr_gray_convert_sse2.column_ld16>
sub    $0x8,%rcx
movq   (%rsi,%rcx,1),%xmm5
pslldq $0x8,%xmm4
por    %xmm5,%xmm4

0000000000040a60 <jsimd_extbgr_gray_convert_sse2.column_ld16>:
test   $0x10,%cl
je     40a74 <jsimd_extbgr_gray_convert_sse2.column_ld32>
movdqa %xmm4,%xmm1
movdqu (%rsi),%xmm4
mov    $0x10,%ecx
jmp    40a9b <jsimd_extbgr_gray_convert_sse2.rgb_gray_cnv>

0000000000040a74 <jsimd_extbgr_gray_convert_sse2.column_ld32>:
test   $0x20,%cl
mov    $0x10,%ecx
je     40a9b <jsimd_extbgr_gray_convert_sse2.rgb_gray_cnv>
movdqa %xmm4,%xmm5
movdqu (%rsi),%xmm4
movdqu 0x10(%rsi),%xmm1
jmp    40a9b <jsimd_extbgr_gray_convert_sse2.rgb_gray_cnv>

0000000000040a8d <jsimd_extbgr_gray_convert_sse2.columnloop>:
movdqu (%rsi),%xmm4
movdqu 0x10(%rsi),%xmm1
movdqu 0x20(%rsi),%xmm5

0000000000040a9b <jsimd_extbgr_gray_convert_sse2.rgb_gray_cnv>:
movdqa %xmm4,%xmm6
pslldq $0x8,%xmm4
psrldq $0x8,%xmm6
punpckhbw %xmm1,%xmm4
pslldq $0x8,%xmm1
punpcklbw %xmm5,%xmm6
punpckhbw %xmm5,%xmm1
movdqa %xmm4,%xmm3
pslldq $0x8,%xmm4
psrldq $0x8,%xmm3
punpckhbw %xmm6,%xmm4
pslldq $0x8,%xmm6
punpcklbw %xmm1,%xmm3
punpckhbw %xmm1,%xmm6
movdqa %xmm4,%xmm0
pslldq $0x8,%xmm4
psrldq $0x8,%xmm0
punpckhbw %xmm3,%xmm4
pslldq $0x8,%xmm3
punpcklbw %xmm6,%xmm0
punpckhbw %xmm6,%xmm3
pxor   %xmm7,%xmm7
movdqa %xmm4,%xmm2
punpcklbw %xmm7,%xmm4
punpckhbw %xmm7,%xmm2
movdqa %xmm0,%xmm5
punpcklbw %xmm7,%xmm0
punpckhbw %xmm7,%xmm5
movdqa %xmm3,%xmm1
punpcklbw %xmm7,%xmm3
punpckhbw %xmm7,%xmm1
movdqa %xmm1,%xmm6
punpcklwd %xmm3,%xmm1
punpckhwd %xmm3,%xmm6
pmaddwd 0x1b14c(%rip),%xmm1        # 5bc80 <PW_F0299_F0337>
pmaddwd 0x1b144(%rip),%xmm6        # 5bc80 <PW_F0299_F0337>
movdqa %xmm6,%xmm7
movdqa %xmm0,%xmm6
punpcklwd %xmm2,%xmm0
punpckhwd %xmm2,%xmm6
pmaddwd 0x1b12c(%rip),%xmm0        # 5bc80 <PW_F0299_F0337>
pmaddwd 0x1b124(%rip),%xmm6        # 5bc80 <PW_F0299_F0337>
movdqa %xmm0,-0x20(%rbp)
movdqa %xmm6,-0x10(%rbp)
movdqa %xmm5,%xmm0
movdqa %xmm4,%xmm6
movdqa %xmm0,%xmm4
punpcklwd %xmm3,%xmm0
punpckhwd %xmm3,%xmm4
pmaddwd 0x1b10e(%rip),%xmm0        # 5bc90 <PW_F0114_F0250>
pmaddwd 0x1b106(%rip),%xmm4        # 5bc90 <PW_F0114_F0250>
movdqa 0x1b10e(%rip),%xmm3        # 5bca0 <PD_ONEHALF>
paddd  %xmm1,%xmm0
paddd  %xmm7,%xmm4
paddd  %xmm3,%xmm0
paddd  %xmm3,%xmm4
psrld  $0x10,%xmm0
psrld  $0x10,%xmm4
packssdw %xmm4,%xmm0
movdqa %xmm6,%xmm4
punpcklwd %xmm2,%xmm6
punpckhwd %xmm2,%xmm4
pmaddwd 0x1b0cc(%rip),%xmm6        # 5bc90 <PW_F0114_F0250>
pmaddwd 0x1b0c4(%rip),%xmm4        # 5bc90 <PW_F0114_F0250>
movdqa 0x1b0cc(%rip),%xmm2        # 5bca0 <PD_ONEHALF>
paddd  -0x20(%rbp),%xmm6
paddd  -0x10(%rbp),%xmm4
paddd  %xmm2,%xmm6
paddd  %xmm2,%xmm4
psrld  $0x10,%xmm6
psrld  $0x10,%xmm4
packssdw %xmm4,%xmm6
psllw  $0x8,%xmm0
por    %xmm0,%xmm6
movdqa %xmm6,(%rdi)
sub    $0x10,%rcx
add    $0x30,%rsi
add    $0x10,%rdi
cmp    $0x10,%rcx
jae    40a8d <jsimd_extbgr_gray_convert_sse2.columnloop>
test   %rcx,%rcx
jne    40a03 <jsimd_extbgr_gray_convert_sse2.column_ld1>
pop    %rcx
pop    %rsi
pop    %rdi
add    $0x8,%rsi
add    $0x8,%rdi
dec    %rax
jg     409f0 <jsimd_extbgr_gray_convert_sse2.rowloop>

0000000000040c34 <jsimd_extbgr_gray_convert_sse2.return>:
pop    %rbx
pop    %r15
pop    %r14
pop    %r13
pop    %r12
pop    %r11
pop    %r10
mov    %rbp,%rsp
pop    %rsp
pop    %rbp
retq   
nop
nop
nop
nop
nop
nop
nop
nop
nop

0000000000040c50 <jsimd_extbgrx_gray_convert_sse2>:
push   %rbp
mov    %rsp,%rax
sub    $0x4,%rsp
and    $0xfffffffffffffff0,%rsp
mov    %rax,(%rsp)
mov    %rsp,%rbp
lea    -0x20(%rbp),%rsp
push   %r10
push   %r11
push   %r12
push   %r13
push   %r14
push   %r15
mov    %rdi,%r10
mov    %rsi,%r11
mov    %rdx,%r12
mov    %rcx,%r13
mov    %r8,%r14
mov    %r9,%r15
push   %rbx
mov    %r10d,%ecx
test   %rcx,%rcx
je     40ec0 <jsimd_extbgrx_gray_convert_sse2.return>
push   %rcx
mov    %r12,%rsi
mov    %r13d,%ecx
mov    (%rsi),%rdi
lea    (%rdi,%rcx,8),%rdi
pop    %rcx
mov    %r11,%rsi
mov    %r14d,%eax
test   %rax,%rax
jle    40ec0 <jsimd_extbgrx_gray_convert_sse2.return>

0000000000040cb0 <jsimd_extbgrx_gray_convert_sse2.rowloop>:
push   %rdi
push   %rsi
push   %rcx
mov    (%rsi),%rsi
mov    (%rdi),%rdi
cmp    $0x10,%rcx
jae    40d17 <jsimd_extbgrx_gray_convert_sse2.columnloop>

0000000000040cc3 <jsimd_extbgrx_gray_convert_sse2.column_ld1>:
test   $0x1,%cl
je     40cd1 <jsimd_extbgrx_gray_convert_sse2.column_ld2>
sub    $0x1,%rcx
movd   (%rsi,%rcx,4),%xmm4

0000000000040cd1 <jsimd_extbgrx_gray_convert_sse2.column_ld2>:
test   $0x2,%cl
je     40ce8 <jsimd_extbgrx_gray_convert_sse2.column_ld4>
sub    $0x2,%rcx
movq   (%rsi,%rcx,4),%xmm0
pslldq $0x8,%xmm4
por    %xmm0,%xmm4

0000000000040ce8 <jsimd_extbgrx_gray_convert_sse2.column_ld4>:
test   $0x4,%cl
je     40cfa <jsimd_extbgrx_gray_convert_sse2.column_ld8>
sub    $0x4,%rcx
movdqa %xmm4,%xmm0
movdqu (%rsi,%rcx,4),%xmm4

0000000000040cfa <jsimd_extbgrx_gray_convert_sse2.column_ld8>:
test   $0x8,%cl
mov    $0x10,%ecx
je     40d2a <jsimd_extbgrx_gray_convert_sse2.rgb_gray_cnv>
movdqa %xmm4,%xmm1
movdqa %xmm0,%xmm7
movdqu (%rsi),%xmm4
movdqu 0x10(%rsi),%xmm0
jmp    40d2a <jsimd_extbgrx_gray_convert_sse2.rgb_gray_cnv>

0000000000040d17 <jsimd_extbgrx_gray_convert_sse2.columnloop>:
movdqu (%rsi),%xmm4
movdqu 0x10(%rsi),%xmm0
movdqu 0x20(%rsi),%xmm1
movdqu 0x30(%rsi),%xmm7

0000000000040d2a <jsimd_extbgrx_gray_convert_sse2.rgb_gray_cnv>:
movdqa %xmm4,%xmm3
punpcklbw %xmm0,%xmm4
punpckhbw %xmm0,%xmm3
movdqa %xmm1,%xmm2
punpcklbw %xmm7,%xmm1
punpckhbw %xmm7,%xmm2
movdqa %xmm4,%xmm5
punpcklwd %xmm1,%xmm4
punpckhwd %xmm1,%xmm5
movdqa %xmm3,%xmm6
punpcklwd %xmm2,%xmm3
punpckhwd %xmm2,%xmm6
movdqa %xmm4,%xmm0
punpcklbw %xmm3,%xmm4
punpckhbw %xmm3,%xmm0
movdqa %xmm5,%xmm7
punpcklbw %xmm6,%xmm5
punpckhbw %xmm6,%xmm7
pxor   %xmm1,%xmm1
movdqa %xmm4,%xmm2
punpcklbw %xmm1,%xmm4
punpckhbw %xmm1,%xmm2
movdqa %xmm5,%xmm3
punpcklbw %xmm1,%xmm5
punpckhbw %xmm1,%xmm3
movdqa %xmm0,%xmm6
punpcklbw %xmm1,%xmm0
punpckhbw %xmm1,%xmm6
punpcklbw %xmm7,%xmm1
punpckhbw %xmm7,%xmm7
psrlw  $0x8,%xmm1
psrlw  $0x8,%xmm7
movdqa %xmm1,%xmm6
punpcklwd %xmm3,%xmm1
punpckhwd %xmm3,%xmm6
pmaddwd 0x1aec0(%rip),%xmm1        # 5bc80 <PW_F0299_F0337>
pmaddwd 0x1aeb8(%rip),%xmm6        # 5bc80 <PW_F0299_F0337>
movdqa %xmm6,%xmm7
movdqa %xmm0,%xmm6
punpcklwd %xmm2,%xmm0
punpckhwd %xmm2,%xmm6
pmaddwd 0x1aea0(%rip),%xmm0        # 5bc80 <PW_F0299_F0337>
pmaddwd 0x1ae98(%rip),%xmm6        # 5bc80 <PW_F0299_F0337>
movdqa %xmm0,-0x20(%rbp)
movdqa %xmm6,-0x10(%rbp)
movdqa %xmm5,%xmm0
movdqa %xmm4,%xmm6
movdqa %xmm0,%xmm4
punpcklwd %xmm3,%xmm0
punpckhwd %xmm3,%xmm4
pmaddwd 0x1ae82(%rip),%xmm0        # 5bc90 <PW_F0114_F0250>
pmaddwd 0x1ae7a(%rip),%xmm4        # 5bc90 <PW_F0114_F0250>
movdqa 0x1ae82(%rip),%xmm3        # 5bca0 <PD_ONEHALF>
paddd  %xmm1,%xmm0
paddd  %xmm7,%xmm4
paddd  %xmm3,%xmm0
paddd  %xmm3,%xmm4
psrld  $0x10,%xmm0
psrld  $0x10,%xmm4
packssdw %xmm4,%xmm0
movdqa %xmm6,%xmm4
punpcklwd %xmm2,%xmm6
punpckhwd %xmm2,%xmm4
pmaddwd 0x1ae40(%rip),%xmm6        # 5bc90 <PW_F0114_F0250>
pmaddwd 0x1ae38(%rip),%xmm4        # 5bc90 <PW_F0114_F0250>
movdqa 0x1ae40(%rip),%xmm2        # 5bca0 <PD_ONEHALF>
paddd  -0x20(%rbp),%xmm6
paddd  -0x10(%rbp),%xmm4
paddd  %xmm2,%xmm6
paddd  %xmm2,%xmm4
psrld  $0x10,%xmm6
psrld  $0x10,%xmm4
packssdw %xmm4,%xmm6
psllw  $0x8,%xmm0
por    %xmm0,%xmm6
movdqa %xmm6,(%rdi)
sub    $0x10,%rcx
add    $0x40,%rsi
add    $0x10,%rdi
cmp    $0x10,%rcx
jae    40d17 <jsimd_extbgrx_gray_convert_sse2.columnloop>
test   %rcx,%rcx
jne    40cc3 <jsimd_extbgrx_gray_convert_sse2.column_ld1>
pop    %rcx
pop    %rsi
pop    %rdi
add    $0x8,%rsi
add    $0x8,%rdi
dec    %rax
jg     40cb0 <jsimd_extbgrx_gray_convert_sse2.rowloop>

0000000000040ec0 <jsimd_extbgrx_gray_convert_sse2.return>:
pop    %rbx
pop    %r15
pop    %r14
pop    %r13
pop    %r12
pop    %r11
pop    %r10
mov    %rbp,%rsp
pop    %rsp
pop    %rbp
retq   
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop

0000000000040ee0 <jsimd_extxbgr_gray_convert_sse2>:
push   %rbp
mov    %rsp,%rax
sub    $0x4,%rsp
and    $0xfffffffffffffff0,%rsp
mov    %rax,(%rsp)
mov    %rsp,%rbp
lea    -0x20(%rbp),%rsp
push   %r10
push   %r11
push   %r12
push   %r13
push   %r14
push   %r15
mov    %rdi,%r10
mov    %rsi,%r11
mov    %rdx,%r12
mov    %rcx,%r13
mov    %r8,%r14
mov    %r9,%r15
push   %rbx
mov    %r10d,%ecx
test   %rcx,%rcx
je     41150 <jsimd_extxbgr_gray_convert_sse2.return>
push   %rcx
mov    %r12,%rsi
mov    %r13d,%ecx
mov    (%rsi),%rdi
lea    (%rdi,%rcx,8),%rdi
pop    %rcx
mov    %r11,%rsi
mov    %r14d,%eax
test   %rax,%rax
jle    41150 <jsimd_extxbgr_gray_convert_sse2.return>

0000000000040f40 <jsimd_extxbgr_gray_convert_sse2.rowloop>:
push   %rdi
push   %rsi
push   %rcx
mov    (%rsi),%rsi
mov    (%rdi),%rdi
cmp    $0x10,%rcx
jae    40fa7 <jsimd_extxbgr_gray_convert_sse2.columnloop>

0000000000040f53 <jsimd_extxbgr_gray_convert_sse2.column_ld1>:
test   $0x1,%cl
je     40f61 <jsimd_extxbgr_gray_convert_sse2.column_ld2>
sub    $0x1,%rcx
movd   (%rsi,%rcx,4),%xmm6

0000000000040f61 <jsimd_extxbgr_gray_convert_sse2.column_ld2>:
test   $0x2,%cl
je     40f78 <jsimd_extxbgr_gray_convert_sse2.column_ld4>
sub    $0x2,%rcx
movq   (%rsi,%rcx,4),%xmm2
pslldq $0x8,%xmm6
por    %xmm2,%xmm6

0000000000040f78 <jsimd_extxbgr_gray_convert_sse2.column_ld4>:
test   $0x4,%cl
je     40f8a <jsimd_extxbgr_gray_convert_sse2.column_ld8>
sub    $0x4,%rcx
movdqa %xmm6,%xmm2
movdqu (%rsi,%rcx,4),%xmm6

0000000000040f8a <jsimd_extxbgr_gray_convert_sse2.column_ld8>:
test   $0x8,%cl
mov    $0x10,%ecx
je     40fba <jsimd_extxbgr_gray_convert_sse2.rgb_gray_cnv>
movdqa %xmm6,%xmm3
movdqa %xmm2,%xmm1
movdqu (%rsi),%xmm6
movdqu 0x10(%rsi),%xmm2
jmp    40fba <jsimd_extxbgr_gray_convert_sse2.rgb_gray_cnv>

0000000000040fa7 <jsimd_extxbgr_gray_convert_sse2.columnloop>:
movdqu (%rsi),%xmm6
movdqu 0x10(%rsi),%xmm2
movdqu 0x20(%rsi),%xmm3
movdqu 0x30(%rsi),%xmm1

0000000000040fba <jsimd_extxbgr_gray_convert_sse2.rgb_gray_cnv>:
movdqa %xmm6,%xmm5
punpcklbw %xmm2,%xmm6
punpckhbw %xmm2,%xmm5
movdqa %xmm3,%xmm4
punpcklbw %xmm1,%xmm3
punpckhbw %xmm1,%xmm4
movdqa %xmm6,%xmm7
punpcklwd %xmm3,%xmm6
punpckhwd %xmm3,%xmm7
movdqa %xmm5,%xmm0
punpcklwd %xmm4,%xmm5
punpckhwd %xmm4,%xmm0
movdqa %xmm6,%xmm2
punpcklbw %xmm5,%xmm6
punpckhbw %xmm5,%xmm2
movdqa %xmm7,%xmm1
punpcklbw %xmm0,%xmm7
punpckhbw %xmm0,%xmm1
pxor   %xmm3,%xmm3
movdqa %xmm6,%xmm4
punpcklbw %xmm3,%xmm6
punpckhbw %xmm3,%xmm4
movdqa %xmm7,%xmm5
punpcklbw %xmm3,%xmm7
punpckhbw %xmm3,%xmm5
movdqa %xmm2,%xmm0
punpcklbw %xmm3,%xmm2
punpckhbw %xmm3,%xmm0
punpcklbw %xmm1,%xmm3
punpckhbw %xmm1,%xmm1
psrlw  $0x8,%xmm3
psrlw  $0x8,%xmm1
movdqa %xmm1,%xmm6
punpcklwd %xmm3,%xmm1
punpckhwd %xmm3,%xmm6
pmaddwd 0x1ac30(%rip),%xmm1        # 5bc80 <PW_F0299_F0337>
pmaddwd 0x1ac28(%rip),%xmm6        # 5bc80 <PW_F0299_F0337>
movdqa %xmm6,%xmm7
movdqa %xmm0,%xmm6
punpcklwd %xmm2,%xmm0
punpckhwd %xmm2,%xmm6
pmaddwd 0x1ac10(%rip),%xmm0        # 5bc80 <PW_F0299_F0337>
pmaddwd 0x1ac08(%rip),%xmm6        # 5bc80 <PW_F0299_F0337>
movdqa %xmm0,-0x20(%rbp)
movdqa %xmm6,-0x10(%rbp)
movdqa %xmm5,%xmm0
movdqa %xmm4,%xmm6
movdqa %xmm0,%xmm4
punpcklwd %xmm3,%xmm0
punpckhwd %xmm3,%xmm4
pmaddwd 0x1abf2(%rip),%xmm0        # 5bc90 <PW_F0114_F0250>
pmaddwd 0x1abea(%rip),%xmm4        # 5bc90 <PW_F0114_F0250>
movdqa 0x1abf2(%rip),%xmm3        # 5bca0 <PD_ONEHALF>
paddd  %xmm1,%xmm0
paddd  %xmm7,%xmm4
paddd  %xmm3,%xmm0
paddd  %xmm3,%xmm4
psrld  $0x10,%xmm0
psrld  $0x10,%xmm4
packssdw %xmm4,%xmm0
movdqa %xmm6,%xmm4
punpcklwd %xmm2,%xmm6
punpckhwd %xmm2,%xmm4
pmaddwd 0x1abb0(%rip),%xmm6        # 5bc90 <PW_F0114_F0250>
pmaddwd 0x1aba8(%rip),%xmm4        # 5bc90 <PW_F0114_F0250>
movdqa 0x1abb0(%rip),%xmm2        # 5bca0 <PD_ONEHALF>
paddd  -0x20(%rbp),%xmm6
paddd  -0x10(%rbp),%xmm4
paddd  %xmm2,%xmm6
paddd  %xmm2,%xmm4
psrld  $0x10,%xmm6
psrld  $0x10,%xmm4
packssdw %xmm4,%xmm6
psllw  $0x8,%xmm0
por    %xmm0,%xmm6
movdqa %xmm6,(%rdi)
sub    $0x10,%rcx
add    $0x40,%rsi
add    $0x10,%rdi
cmp    $0x10,%rcx
jae    40fa7 <jsimd_extxbgr_gray_convert_sse2.columnloop>
test   %rcx,%rcx
jne    40f53 <jsimd_extxbgr_gray_convert_sse2.column_ld1>
pop    %rcx
pop    %rsi
pop    %rdi
add    $0x8,%rsi
add    $0x8,%rdi
dec    %rax
jg     40f40 <jsimd_extxbgr_gray_convert_sse2.rowloop>

0000000000041150 <jsimd_extxbgr_gray_convert_sse2.return>:
pop    %rbx
pop    %r15
pop    %r14
pop    %r13
pop    %r12
pop    %r11
pop    %r10
mov    %rbp,%rsp
pop    %rsp
pop    %rbp
retq   
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop

0000000000041170 <jsimd_extxrgb_gray_convert_sse2>:
push   %rbp
mov    %rsp,%rax
sub    $0x4,%rsp
and    $0xfffffffffffffff0,%rsp
mov    %rax,(%rsp)
mov    %rsp,%rbp
lea    -0x20(%rbp),%rsp
push   %r10
push   %r11
push   %r12
push   %r13
push   %r14
push   %r15
mov    %rdi,%r10
mov    %rsi,%r11
mov    %rdx,%r12
mov    %rcx,%r13
mov    %r8,%r14
mov    %r9,%r15
push   %rbx
mov    %r10d,%ecx
test   %rcx,%rcx
je     413e0 <jsimd_extxrgb_gray_convert_sse2.return>
push   %rcx
mov    %r12,%rsi
mov    %r13d,%ecx
mov    (%rsi),%rdi
lea    (%rdi,%rcx,8),%rdi
pop    %rcx
mov    %r11,%rsi
mov    %r14d,%eax
test   %rax,%rax
jle    413e0 <jsimd_extxrgb_gray_convert_sse2.return>

00000000000411d0 <jsimd_extxrgb_gray_convert_sse2.rowloop>:
push   %rdi
push   %rsi
push   %rcx
mov    (%rsi),%rsi
mov    (%rdi),%rdi
cmp    $0x10,%rcx
jae    41237 <jsimd_extxrgb_gray_convert_sse2.columnloop>

00000000000411e3 <jsimd_extxrgb_gray_convert_sse2.column_ld1>:
test   $0x1,%cl
je     411f1 <jsimd_extxrgb_gray_convert_sse2.column_ld2>
sub    $0x1,%rcx
movd   (%rsi,%rcx,4),%xmm6

00000000000411f1 <jsimd_extxrgb_gray_convert_sse2.column_ld2>:
test   $0x2,%cl
je     41208 <jsimd_extxrgb_gray_convert_sse2.column_ld4>
sub    $0x2,%rcx
movq   (%rsi,%rcx,4),%xmm2
pslldq $0x8,%xmm6
por    %xmm2,%xmm6

0000000000041208 <jsimd_extxrgb_gray_convert_sse2.column_ld4>:
test   $0x4,%cl
je     4121a <jsimd_extxrgb_gray_convert_sse2.column_ld8>
sub    $0x4,%rcx
movdqa %xmm6,%xmm2
movdqu (%rsi,%rcx,4),%xmm6

000000000004121a <jsimd_extxrgb_gray_convert_sse2.column_ld8>:
test   $0x8,%cl
mov    $0x10,%ecx
je     4124a <jsimd_extxrgb_gray_convert_sse2.rgb_gray_cnv>
movdqa %xmm6,%xmm3
movdqa %xmm2,%xmm5
movdqu (%rsi),%xmm6
movdqu 0x10(%rsi),%xmm2
jmp    4124a <jsimd_extxrgb_gray_convert_sse2.rgb_gray_cnv>

0000000000041237 <jsimd_extxrgb_gray_convert_sse2.columnloop>:
movdqu (%rsi),%xmm6
movdqu 0x10(%rsi),%xmm2
movdqu 0x20(%rsi),%xmm3
movdqu 0x30(%rsi),%xmm5

000000000004124a <jsimd_extxrgb_gray_convert_sse2.rgb_gray_cnv>:
movdqa %xmm6,%xmm1
punpcklbw %xmm2,%xmm6
punpckhbw %xmm2,%xmm1
movdqa %xmm3,%xmm0
punpcklbw %xmm5,%xmm3
punpckhbw %xmm5,%xmm0
movdqa %xmm6,%xmm7
punpcklwd %xmm3,%xmm6
punpckhwd %xmm3,%xmm7
movdqa %xmm1,%xmm4
punpcklwd %xmm0,%xmm1
punpckhwd %xmm0,%xmm4
movdqa %xmm6,%xmm2
punpcklbw %xmm1,%xmm6
punpckhbw %xmm1,%xmm2
movdqa %xmm7,%xmm5
punpcklbw %xmm4,%xmm7
punpckhbw %xmm4,%xmm5
pxor   %xmm3,%xmm3
movdqa %xmm6,%xmm0
punpcklbw %xmm3,%xmm6
punpckhbw %xmm3,%xmm0
movdqa %xmm7,%xmm1
punpcklbw %xmm3,%xmm7
punpckhbw %xmm3,%xmm1
movdqa %xmm2,%xmm4
punpcklbw %xmm3,%xmm2
punpckhbw %xmm3,%xmm4
punpcklbw %xmm5,%xmm3
punpckhbw %xmm5,%xmm5
psrlw  $0x8,%xmm3
psrlw  $0x8,%xmm5
movdqa %xmm1,%xmm6
punpcklwd %xmm3,%xmm1
punpckhwd %xmm3,%xmm6
pmaddwd 0x1a9a0(%rip),%xmm1        # 5bc80 <PW_F0299_F0337>
pmaddwd 0x1a998(%rip),%xmm6        # 5bc80 <PW_F0299_F0337>
movdqa %xmm6,%xmm7
movdqa %xmm0,%xmm6
punpcklwd %xmm2,%xmm0
punpckhwd %xmm2,%xmm6
pmaddwd 0x1a980(%rip),%xmm0        # 5bc80 <PW_F0299_F0337>
pmaddwd 0x1a978(%rip),%xmm6        # 5bc80 <PW_F0299_F0337>
movdqa %xmm0,-0x20(%rbp)
movdqa %xmm6,-0x10(%rbp)
movdqa %xmm5,%xmm0
movdqa %xmm4,%xmm6
movdqa %xmm0,%xmm4
punpcklwd %xmm3,%xmm0
punpckhwd %xmm3,%xmm4
pmaddwd 0x1a962(%rip),%xmm0        # 5bc90 <PW_F0114_F0250>
pmaddwd 0x1a95a(%rip),%xmm4        # 5bc90 <PW_F0114_F0250>
movdqa 0x1a962(%rip),%xmm3        # 5bca0 <PD_ONEHALF>
paddd  %xmm1,%xmm0
paddd  %xmm7,%xmm4
paddd  %xmm3,%xmm0
paddd  %xmm3,%xmm4
psrld  $0x10,%xmm0
psrld  $0x10,%xmm4
packssdw %xmm4,%xmm0
movdqa %xmm6,%xmm4
punpcklwd %xmm2,%xmm6
punpckhwd %xmm2,%xmm4
pmaddwd 0x1a920(%rip),%xmm6        # 5bc90 <PW_F0114_F0250>
pmaddwd 0x1a918(%rip),%xmm4        # 5bc90 <PW_F0114_F0250>
movdqa 0x1a920(%rip),%xmm2        # 5bca0 <PD_ONEHALF>
paddd  -0x20(%rbp),%xmm6
paddd  -0x10(%rbp),%xmm4
paddd  %xmm2,%xmm6
paddd  %xmm2,%xmm4
psrld  $0x10,%xmm6
psrld  $0x10,%xmm4
packssdw %xmm4,%xmm6
psllw  $0x8,%xmm0
por    %xmm0,%xmm6
movdqa %xmm6,(%rdi)
sub    $0x10,%rcx
add    $0x40,%rsi
add    $0x10,%rdi
cmp    $0x10,%rcx
jae    41237 <jsimd_extxrgb_gray_convert_sse2.columnloop>
test   %rcx,%rcx
jne    411e3 <jsimd_extxrgb_gray_convert_sse2.column_ld1>
pop    %rcx
pop    %rsi
pop    %rdi
add    $0x8,%rsi
add    $0x8,%rdi
dec    %rax
jg     411d0 <jsimd_extxrgb_gray_convert_sse2.rowloop>

00000000000413e0 <jsimd_extxrgb_gray_convert_sse2.return>:
pop    %rbx
pop    %r15
pop    %r14
pop    %r13
pop    %r12
pop    %r11
pop    %r10
mov    %rbp,%rsp
pop    %rsp
pop    %rbp
retq   
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop

0000000000041400 <jsimd_huff_encode_one_block_sse2>:
push   %rbp
mov    %rsp,%rax
sub    $0x4,%rsp
and    $0xfffffffffffffff0,%rsp
mov    %rax,(%rsp)
mov    %rsp,%rbp
lea    -0x100(%rbp),%rsp
push   %r10
push   %r11
push   %r12
push   %r13
push   %r14
push   %r15
mov    %rdi,%r10
mov    %rsi,%r11
mov    %rdx,%r12
mov    %rcx,%r13
mov    %r8,%r14
mov    %r9,%r15
push   %rbx
mov    %r11,%rax
mov    0x10(%r10),%r8
mov    0x18(%r10),%r9d
push   %r10
movswl (%r12),%edi
sub    %r13d,%edi
mov    %edi,%ebx
mov    %edi,%esi
sar    $0x1f,%esi
xor    %esi,%edi
sub    %esi,%edi
add    %esi,%ebx
lea    0x1a84e(%rip),%r11        # 5bcb0 <jconst_huff_encode_one_block>
movzbq (%r11,%rdi,1),%rdi
mov    (%r14,%rdi,4),%r11d
movzbl 0x400(%r14,%rdi,1),%esi
cmp    $0x30,%r9d
jl     41538 <..@16..CHECKBUF47_END>
sub    $0x8,%r9d
mov    %r8,%rdx
mov    %r9d,%ecx
shr    %cl,%rdx
mov    %dl,(%rax)
add    $0x1,%rax
cmp    $0xff,%dl
jne    4149d <..@17..EMIT_BYTE_END>
movb   $0x0,(%rax)
add    $0x1,%rax

000000000004149d <..@17..EMIT_BYTE_END>:
sub    $0x8,%r9d
mov    %r8,%rdx
mov    %r9d,%ecx
shr    %cl,%rdx
mov    %dl,(%rax)
add    $0x1,%rax
cmp    $0xff,%dl
jne    414bc <..@18..EMIT_BYTE_END>
movb   $0x0,(%rax)
add    $0x1,%rax

00000000000414bc <..@18..EMIT_BYTE_END>:
sub    $0x8,%r9d
mov    %r8,%rdx
mov    %r9d,%ecx
shr    %cl,%rdx
mov    %dl,(%rax)
add    $0x1,%rax
cmp    $0xff,%dl
jne    414db <..@19..EMIT_BYTE_END>
movb   $0x0,(%rax)
add    $0x1,%rax

00000000000414db <..@19..EMIT_BYTE_END>:
sub    $0x8,%r9d
mov    %r8,%rdx
mov    %r9d,%ecx
shr    %cl,%rdx
mov    %dl,(%rax)
add    $0x1,%rax
cmp    $0xff,%dl
jne    414fa <..@20..EMIT_BYTE_END>
movb   $0x0,(%rax)
add    $0x1,%rax

00000000000414fa <..@20..EMIT_BYTE_END>:
sub    $0x8,%r9d
mov    %r8,%rdx
mov    %r9d,%ecx
shr    %cl,%rdx
mov    %dl,(%rax)
add    $0x1,%rax
cmp    $0xff,%dl
jne    41519 <..@21..EMIT_BYTE_END>
movb   $0x0,(%rax)
add    $0x1,%rax

0000000000041519 <..@21..EMIT_BYTE_END>:
sub    $0x8,%r9d
mov    %r8,%rdx
mov    %r9d,%ecx
shr    %cl,%rdx
mov    %dl,(%rax)
add    $0x1,%rax
cmp    $0xff,%dl
jne    41538 <..@16..CHECKBUF47_END>
movb   $0x0,(%rax)
add    $0x1,%rax

0000000000041538 <..@16..CHECKBUF47_END>:
mov    %esi,%ecx
add    %ecx,%r9d
shl    %cl,%r8
or     %r11,%r8
mov    $0x1,%esi
mov    %edi,%ecx
shl    %cl,%esi
dec    %esi
and    %esi,%ebx
cmp    $0x30,%r9d
jl     41614 <..@25..CHECKBUF47_END>
sub    $0x8,%r9d
mov    %r8,%rdx
mov    %r9d,%ecx
shr    %cl,%rdx
mov    %dl,(%rax)
add    $0x1,%rax
cmp    $0xff,%dl
jne    41579 <..@26..EMIT_BYTE_END>
movb   $0x0,(%rax)
add    $0x1,%rax

0000000000041579 <..@26..EMIT_BYTE_END>:
sub    $0x8,%r9d
mov    %r8,%rdx
mov    %r9d,%ecx
shr    %cl,%rdx
mov    %dl,(%rax)
add    $0x1,%rax
cmp    $0xff,%dl
jne    41598 <..@27..EMIT_BYTE_END>
movb   $0x0,(%rax)
add    $0x1,%rax

0000000000041598 <..@27..EMIT_BYTE_END>:
sub    $0x8,%r9d
mov    %r8,%rdx
mov    %r9d,%ecx
shr    %cl,%rdx
mov    %dl,(%rax)
add    $0x1,%rax
cmp    $0xff,%dl
jne    415b7 <..@28..EMIT_BYTE_END>
movb   $0x0,(%rax)
add    $0x1,%rax

00000000000415b7 <..@28..EMIT_BYTE_END>:
sub    $0x8,%r9d
mov    %r8,%rdx
mov    %r9d,%ecx
shr    %cl,%rdx
mov    %dl,(%rax)
add    $0x1,%rax
cmp    $0xff,%dl
jne    415d6 <..@29..EMIT_BYTE_END>
movb   $0x0,(%rax)
add    $0x1,%rax

00000000000415d6 <..@29..EMIT_BYTE_END>:
sub    $0x8,%r9d
mov    %r8,%rdx
mov    %r9d,%ecx
shr    %cl,%rdx
mov    %dl,(%rax)
add    $0x1,%rax
cmp    $0xff,%dl
jne    415f5 <..@30..EMIT_BYTE_END>
movb   $0x0,(%rax)
add    $0x1,%rax

00000000000415f5 <..@30..EMIT_BYTE_END>:
sub    $0x8,%r9d
mov    %r8,%rdx
mov    %r9d,%ecx
shr    %cl,%rdx
mov    %dl,(%rax)
add    $0x1,%rax
cmp    $0xff,%dl
jne    41614 <..@25..CHECKBUF47_END>
movb   $0x0,(%rax)
add    $0x1,%rax

0000000000041614 <..@25..CHECKBUF47_END>:
mov    %edi,%ecx
add    %ecx,%r9d
shl    %cl,%r8
or     %rbx,%r8
xor    %ebx,%ebx
pxor   %xmm8,%xmm8
pxor   %xmm9,%xmm9
pxor   %xmm10,%xmm10
pxor   %xmm11,%xmm11
pinsrw $0x0,0x2(%r12),%xmm0
pinsrw $0x0,0x30(%r12),%xmm1
pinsrw $0x0,0x26(%r12),%xmm2
pinsrw $0x0,0x28(%r12),%xmm3
pinsrw $0x1,0x10(%r12),%xmm0
pinsrw $0x1,0x40(%r12),%xmm1
pinsrw $0x1,0x34(%r12),%xmm2
pinsrw $0x1,0x1a(%r12),%xmm3
pinsrw $0x2,0x20(%r12),%xmm0
pinsrw $0x2,0x32(%r12),%xmm1
pinsrw $0x2,0x42(%r12),%xmm2
pinsrw $0x2,0xc(%r12),%xmm3
pinsrw $0x3,0x12(%r12),%xmm0
pinsrw $0x3,0x24(%r12),%xmm1
pinsrw $0x3,0x50(%r12),%xmm2
pinsrw $0x3,0xe(%r12),%xmm3
pinsrw $0x4,0x4(%r12),%xmm0
pinsrw $0x4,0x16(%r12),%xmm1
pinsrw $0x4,0x60(%r12),%xmm2
pinsrw $0x4,0x1c(%r12),%xmm3
pinsrw $0x5,0x6(%r12),%xmm0
pinsrw $0x5,0x8(%r12),%xmm1
pinsrw $0x5,0x52(%r12),%xmm2
pinsrw $0x5,0x2a(%r12),%xmm3
pinsrw $0x6,0x14(%r12),%xmm0
pinsrw $0x6,0xa(%r12),%xmm1
pinsrw $0x6,0x44(%r12),%xmm2
pinsrw $0x6,0x38(%r12),%xmm3
pinsrw $0x7,0x22(%r12),%xmm0
pinsrw $0x7,0x18(%r12),%xmm1
pinsrw $0x7,0x36(%r12),%xmm2
pinsrw $0x7,0x46(%r12),%xmm3
pcmpgtw %xmm0,%xmm8
pcmpgtw %xmm1,%xmm9
pcmpgtw %xmm2,%xmm10
pcmpgtw %xmm3,%xmm11
paddw  %xmm8,%xmm0
paddw  %xmm9,%xmm1
paddw  %xmm10,%xmm2
paddw  %xmm11,%xmm3
pxor   %xmm8,%xmm0
pxor   %xmm9,%xmm1
pxor   %xmm10,%xmm2
pxor   %xmm11,%xmm3
pxor   %xmm0,%xmm8
pxor   %xmm1,%xmm9
pxor   %xmm2,%xmm10
pxor   %xmm3,%xmm11
movdqa %xmm0,-0x80(%rbp)
movdqa %xmm1,-0x70(%rbp)
movdqa %xmm2,-0x60(%rbp)
movdqa %xmm3,-0x50(%rbp)
movdqa %xmm8,-0x100(%rbp)
movdqa %xmm9,-0xf0(%rbp)
movdqa %xmm10,-0xe0(%rbp)
movdqa %xmm11,-0xd0(%rbp)
pxor   %xmm8,%xmm8
pxor   %xmm9,%xmm9
pxor   %xmm10,%xmm10
pxor   %xmm11,%xmm11
pinsrw $0x0,0x54(%r12),%xmm4
pinsrw $0x0,0x2c(%r12),%xmm5
pinsrw $0x0,0x76(%r12),%xmm6
pinsrw $0x0,0x78(%r12),%xmm7
pinsrw $0x1,0x62(%r12),%xmm4
pinsrw $0x1,0x1e(%r12),%xmm5
pinsrw $0x1,0x68(%r12),%xmm6
pinsrw $0x1,0x7a(%r12),%xmm7
pinsrw $0x2,0x70(%r12),%xmm4
pinsrw $0x2,0x2e(%r12),%xmm5
pinsrw $0x2,0x5a(%r12),%xmm6
pinsrw $0x2,0x6c(%r12),%xmm7
pinsrw $0x3,0x72(%r12),%xmm4
pinsrw $0x3,0x3c(%r12),%xmm5
pinsrw $0x3,0x4c(%r12),%xmm6
pinsrw $0x3,0x5e(%r12),%xmm7
pinsrw $0x4,0x64(%r12),%xmm4
pinsrw $0x4,0x4a(%r12),%xmm5
pinsrw $0x4,0x3e(%r12),%xmm6
pinsrw $0x4,0x6e(%r12),%xmm7
pinsrw $0x5,0x56(%r12),%xmm4
pinsrw $0x5,0x58(%r12),%xmm5
pinsrw $0x5,0x4e(%r12),%xmm6
pinsrw $0x5,0x7c(%r12),%xmm7
pinsrw $0x6,0x48(%r12),%xmm4
pinsrw $0x6,0x66(%r12),%xmm5
pinsrw $0x6,0x5c(%r12),%xmm6
pinsrw $0x6,0x7e(%r12),%xmm7
pinsrw $0x7,0x3a(%r12),%xmm4
pinsrw $0x7,0x74(%r12),%xmm5
pinsrw $0x7,0x6a(%r12),%xmm6
pinsrw $0x7,%ebx,%xmm7
pcmpgtw %xmm4,%xmm8
pcmpgtw %xmm5,%xmm9
pcmpgtw %xmm6,%xmm10
pcmpgtw %xmm7,%xmm11
paddw  %xmm8,%xmm4
paddw  %xmm9,%xmm5
paddw  %xmm10,%xmm6
paddw  %xmm11,%xmm7
pxor   %xmm8,%xmm4
pxor   %xmm9,%xmm5
pxor   %xmm10,%xmm6
pxor   %xmm11,%xmm7
pxor   %xmm4,%xmm8
pxor   %xmm5,%xmm9
pxor   %xmm6,%xmm10
pxor   %xmm7,%xmm11
movdqa %xmm4,-0x40(%rbp)
movdqa %xmm5,-0x30(%rbp)
movdqa %xmm6,-0x20(%rbp)
movdqa %xmm7,-0x10(%rbp)
movdqa %xmm8,-0xc0(%rbp)
movdqa %xmm9,-0xb0(%rbp)
movdqa %xmm10,-0xa0(%rbp)
movdqa %xmm11,-0x90(%rbp)
pxor   %xmm8,%xmm8
pcmpeqw %xmm8,%xmm0
pcmpeqw %xmm8,%xmm1
pcmpeqw %xmm8,%xmm2
pcmpeqw %xmm8,%xmm3
pcmpeqw %xmm8,%xmm4
pcmpeqw %xmm8,%xmm5
pcmpeqw %xmm8,%xmm6
pcmpeqw %xmm8,%xmm7
packsswb %xmm1,%xmm0
packsswb %xmm3,%xmm2
packsswb %xmm5,%xmm4
packsswb %xmm7,%xmm6
pmovmskb %xmm0,%r11d
pmovmskb %xmm2,%r12d
pmovmskb %xmm4,%r13d
pmovmskb %xmm6,%r14d
shl    $0x10,%r12
shl    $0x10,%r14
or     %r12,%r11
or     %r14,%r13
shl    $0x20,%r13
or     %r13,%r11
not    %r11
mov    0x3c0(%r15),%r13d
movzbl 0x4f0(%r15),%r14d
lea    -0x80(%rbp),%rsi

00000000000419d2 <jsimd_huff_encode_one_block_sse2.BLOOP>:
bsf    %r11,%r12
je     41ba2 <jsimd_huff_encode_one_block_sse2.ELOOP>
mov    %r12,%rcx
lea    (%rsi,%r12,2),%rsi
shr    %cl,%r11
movzwq (%rsi),%rdi
lea    0x1a2bf(%rip),%rbx        # 5bcb0 <jconst_huff_encode_one_block>
movzbq (%rbx,%rdi,1),%rdi

00000000000419f6 <jsimd_huff_encode_one_block_sse2.BRLOOP>:
cmp    $0x10,%r12
jl     41ad9 <jsimd_huff_encode_one_block_sse2.ERLOOP>
cmp    $0x30,%r9d
jl     41ac4 <..@36..CHECKBUF47_END>
sub    $0x8,%r9d
mov    %r8,%rdx
mov    %r9d,%ecx
shr    %cl,%rdx
mov    %dl,(%rax)
add    $0x1,%rax
cmp    $0xff,%dl
jne    41a29 <..@37..EMIT_BYTE_END>
movb   $0x0,(%rax)
add    $0x1,%rax

0000000000041a29 <..@37..EMIT_BYTE_END>:
sub    $0x8,%r9d
mov    %r8,%rdx
mov    %r9d,%ecx
shr    %cl,%rdx
mov    %dl,(%rax)
add    $0x1,%rax
cmp    $0xff,%dl
jne    41a48 <..@38..EMIT_BYTE_END>
movb   $0x0,(%rax)
add    $0x1,%rax

0000000000041a48 <..@38..EMIT_BYTE_END>:
sub    $0x8,%r9d
mov    %r8,%rdx
mov    %r9d,%ecx
shr    %cl,%rdx
mov    %dl,(%rax)
add    $0x1,%rax
cmp    $0xff,%dl
jne    41a67 <..@39..EMIT_BYTE_END>
movb   $0x0,(%rax)
add    $0x1,%rax

0000000000041a67 <..@39..EMIT_BYTE_END>:
sub    $0x8,%r9d
mov    %r8,%rdx
mov    %r9d,%ecx
shr    %cl,%rdx
mov    %dl,(%rax)
add    $0x1,%rax
cmp    $0xff,%dl
jne    41a86 <..@40..EMIT_BYTE_END>
movb   $0x0,(%rax)
add    $0x1,%rax

0000000000041a86 <..@40..EMIT_BYTE_END>:
sub    $0x8,%r9d
mov    %r8,%rdx
mov    %r9d,%ecx
shr    %cl,%rdx
mov    %dl,(%rax)
add    $0x1,%rax
cmp    $0xff,%dl
jne    41aa5 <..@41..EMIT_BYTE_END>
movb   $0x0,(%rax)
add    $0x1,%rax

0000000000041aa5 <..@41..EMIT_BYTE_END>:
sub    $0x8,%r9d
mov    %r8,%rdx
mov    %r9d,%ecx
shr    %cl,%rdx
mov    %dl,(%rax)
add    $0x1,%rax
cmp    $0xff,%dl
jne    41ac4 <..@36..CHECKBUF47_END>
movb   $0x0,(%rax)
add    $0x1,%rax

0000000000041ac4 <..@36..CHECKBUF47_END>:
mov    %r14d,%ecx
add    %ecx,%r9d
shl    %cl,%r8
or     %r13,%r8
sub    $0x10,%r12
jmpq   419f6 <jsimd_huff_encode_one_block_sse2.BRLOOP>

0000000000041ad9 <jsimd_huff_encode_one_block_sse2.ERLOOP>:
cmp    $0x20,%r9d
jl     41b5b <..@44..CHECKBUF31_END>
sub    $0x8,%r9d
mov    %r8,%rdx
mov    %r9d,%ecx
shr    %cl,%rdx
mov    %dl,(%rax)
add    $0x1,%rax
cmp    $0xff,%dl
jne    41afe <..@45..EMIT_BYTE_END>
movb   $0x0,(%rax)
add    $0x1,%rax

0000000000041afe <..@45..EMIT_BYTE_END>:
sub    $0x8,%r9d
mov    %r8,%rdx
mov    %r9d,%ecx
shr    %cl,%rdx
mov    %dl,(%rax)
add    $0x1,%rax
cmp    $0xff,%dl
jne    41b1d <..@46..EMIT_BYTE_END>
movb   $0x0,(%rax)
add    $0x1,%rax

0000000000041b1d <..@46..EMIT_BYTE_END>:
sub    $0x8,%r9d
mov    %r8,%rdx
mov    %r9d,%ecx
shr    %cl,%rdx
mov    %dl,(%rax)
add    $0x1,%rax
cmp    $0xff,%dl
jne    41b3c <..@47..EMIT_BYTE_END>
movb   $0x0,(%rax)
add    $0x1,%rax

0000000000041b3c <..@47..EMIT_BYTE_END>:
sub    $0x8,%r9d
mov    %r8,%rdx
mov    %r9d,%ecx
shr    %cl,%rdx
mov    %dl,(%rax)
add    $0x1,%rax
cmp    $0xff,%dl
jne    41b5b <..@44..CHECKBUF31_END>
movb   $0x0,(%rax)
add    $0x1,%rax

0000000000041b5b <..@44..CHECKBUF31_END>:
shl    $0x4,%r12
add    %rdi,%r12
mov    (%r15,%r12,4),%ebx
movzbl 0x400(%r15,%r12,1),%ecx
add    %ecx,%r9d
shl    %cl,%r8
or     %rbx,%r8
movswl -0x80(%rsi),%ebx
mov    %rdi,%rcx
mov    $0x1,%edx
shl    %cl,%rdx
dec    %rdx
and    %rdx,%rbx
add    %ecx,%r9d
shl    %cl,%r8
or     %rbx,%r8
shr    %r11
add    $0x2,%rsi
jmpq   419d2 <jsimd_huff_encode_one_block_sse2.BLOOP>

0000000000041ba2 <jsimd_huff_encode_one_block_sse2.ELOOP>:
lea    -0x2(%rbp),%rdi
cmp    %rsi,%rdi
je     41c8a <jsimd_huff_encode_one_block_sse2.EFN>
mov    (%r15),%ebx
movzbl 0x400(%r15),%r12d
cmp    $0x30,%r9d
jl     41c7e <..@52..CHECKBUF47_END>
sub    $0x8,%r9d
mov    %r8,%rdx
mov    %r9d,%ecx
shr    %cl,%rdx
mov    %dl,(%rax)
add    $0x1,%rax
cmp    $0xff,%dl
jne    41be3 <..@53..EMIT_BYTE_END>
movb   $0x0,(%rax)
add    $0x1,%rax

0000000000041be3 <..@53..EMIT_BYTE_END>:
sub    $0x8,%r9d
mov    %r8,%rdx
mov    %r9d,%ecx
shr    %cl,%rdx
mov    %dl,(%rax)
add    $0x1,%rax
cmp    $0xff,%dl
jne    41c02 <..@54..EMIT_BYTE_END>
movb   $0x0,(%rax)
add    $0x1,%rax

0000000000041c02 <..@54..EMIT_BYTE_END>:
sub    $0x8,%r9d
mov    %r8,%rdx
mov    %r9d,%ecx
shr    %cl,%rdx
mov    %dl,(%rax)
add    $0x1,%rax
cmp    $0xff,%dl
jne    41c21 <..@55..EMIT_BYTE_END>
movb   $0x0,(%rax)
add    $0x1,%rax

0000000000041c21 <..@55..EMIT_BYTE_END>:
sub    $0x8,%r9d
mov    %r8,%rdx
mov    %r9d,%ecx
shr    %cl,%rdx
mov    %dl,(%rax)
add    $0x1,%rax
cmp    $0xff,%dl
jne    41c40 <..@56..EMIT_BYTE_END>
movb   $0x0,(%rax)
add    $0x1,%rax

0000000000041c40 <..@56..EMIT_BYTE_END>:
sub    $0x8,%r9d
mov    %r8,%rdx
mov    %r9d,%ecx
shr    %cl,%rdx
mov    %dl,(%rax)
add    $0x1,%rax
cmp    $0xff,%dl
jne    41c5f <..@57..EMIT_BYTE_END>
movb   $0x0,(%rax)
add    $0x1,%rax

0000000000041c5f <..@57..EMIT_BYTE_END>:
sub    $0x8,%r9d
mov    %r8,%rdx
mov    %r9d,%ecx
shr    %cl,%rdx
mov    %dl,(%rax)
add    $0x1,%rax
cmp    $0xff,%dl
jne    41c7e <..@52..CHECKBUF47_END>
movb   $0x0,(%rax)
add    $0x1,%rax

0000000000041c7e <..@52..CHECKBUF47_END>:
mov    %r12d,%ecx
add    %ecx,%r9d
shl    %cl,%r8
or     %rbx,%r8

0000000000041c8a <jsimd_huff_encode_one_block_sse2.EFN>:
pop    %r10
mov    %r8,0x10(%r10)
mov    %r9d,0x18(%r10)
pop    %rbx
pop    %r15
pop    %r14
pop    %r13
pop    %r12
pop    %r11
pop    %r10
mov    %rbp,%rsp
pop    %rsp
pop    %rbp
retq   
nop
nop
nop
nop
nop
nop
nop
nop
nop

0000000000041cb0 <jsimd_h2v1_downsample_sse2>:
push   %rbp
mov    %rsp,%rax
mov    %rsp,%rbp
push   %r10
push   %r11
push   %r12
push   %r13
push   %r14
push   %r15
mov    %rdi,%r10
mov    %rsi,%r11
mov    %rdx,%r12
mov    %rcx,%r13
mov    %r8,%r14
mov    %r9,%r15
mov    %r13d,%ecx
shl    $0x3,%rcx
je     41dc9 <jsimd_h2v1_downsample_sse2.return>
mov    %r10d,%edx
push   %rcx
shl    %rcx
sub    %rdx,%rcx
jle    41d12 <jsimd_h2v1_downsample_sse2.expand_end>
mov    %r11,%rax
test   %rax,%rax
jle    41d12 <jsimd_h2v1_downsample_sse2.expand_end>
cld    
mov    %r14,%rsi

0000000000041cfa <jsimd_h2v1_downsample_sse2.expandloop>:
push   %rax
push   %rcx
mov    (%rsi),%rdi
add    %rdx,%rdi
mov    -0x1(%rdi),%al
rep stos %al,%es:(%rdi)
pop    %rcx
pop    %rax
add    $0x8,%rsi
dec    %rax
jg     41cfa <jsimd_h2v1_downsample_sse2.expandloop>

0000000000041d12 <jsimd_h2v1_downsample_sse2.expand_end>:
pop    %rcx
mov    %r12d,%eax
test   %eax,%eax
jle    41dc9 <jsimd_h2v1_downsample_sse2.return>
mov    $0x10000,%edx
movd   %edx,%xmm7
pcmpeqw %xmm6,%xmm6
pshufd $0x0,%xmm7,%xmm7
psrlw  $0x8,%xmm6
mov    %r14,%rsi
mov    %r15,%rdi

0000000000041d3b <jsimd_h2v1_downsample_sse2.rowloop>:
push   %rcx
push   %rdi
push   %rsi
mov    (%rsi),%rsi
mov    (%rdi),%rdi
cmp    $0x10,%rcx
jae    41d59 <jsimd_h2v1_downsample_sse2.columnloop>

0000000000041d4a <jsimd_h2v1_downsample_sse2.columnloop_r8>:
movdqa (%rsi),%xmm0
pxor   %xmm1,%xmm1
mov    $0x10,%ecx
jmp    41d62 <jsimd_h2v1_downsample_sse2.downsample>

0000000000041d59 <jsimd_h2v1_downsample_sse2.columnloop>:
movdqa (%rsi),%xmm0
movdqa 0x10(%rsi),%xmm1

0000000000041d62 <jsimd_h2v1_downsample_sse2.downsample>:
movdqa %xmm0,%xmm2
movdqa %xmm1,%xmm3
pand   %xmm6,%xmm0
psrlw  $0x8,%xmm2
pand   %xmm6,%xmm1
psrlw  $0x8,%xmm3
paddw  %xmm2,%xmm0
paddw  %xmm3,%xmm1
paddw  %xmm7,%xmm0
paddw  %xmm7,%xmm1
psrlw  $0x1,%xmm0
psrlw  $0x1,%xmm1
packuswb %xmm1,%xmm0
movdqa %xmm0,(%rdi)
sub    $0x10,%rcx
add    $0x20,%rsi
add    $0x10,%rdi
cmp    $0x10,%rcx
jae    41d59 <jsimd_h2v1_downsample_sse2.columnloop>
test   %rcx,%rcx
jne    41d4a <jsimd_h2v1_downsample_sse2.columnloop_r8>
pop    %rsi
pop    %rdi
pop    %rcx
add    $0x8,%rsi
add    $0x8,%rdi
dec    %rax
jg     41d3b <jsimd_h2v1_downsample_sse2.rowloop>

0000000000041dc9 <jsimd_h2v1_downsample_sse2.return>:
pop    %r15
pop    %r14
pop    %r13
pop    %r12
pop    %r11
pop    %r10
pop    %rbp
retq   
nop
nop
nop
nop
nop
nop
nop
nop
nop

0000000000041de0 <jsimd_h2v2_downsample_sse2>:
push   %rbp
mov    %rsp,%rax
mov    %rsp,%rbp
push   %r10
push   %r11
push   %r12
push   %r13
push   %r14
push   %r15
mov    %rdi,%r10
mov    %rsi,%r11
mov    %rdx,%r12
mov    %rcx,%r13
mov    %r8,%r14
mov    %r9,%r15
mov    %r13d,%ecx
shl    $0x3,%rcx
je     41f45 <jsimd_h2v2_downsample_sse2.return>
mov    %r10d,%edx
push   %rcx
shl    %rcx
sub    %rdx,%rcx
jle    41e42 <jsimd_h2v2_downsample_sse2.expand_end>
mov    %r11,%rax
test   %rax,%rax
jle    41e42 <jsimd_h2v2_downsample_sse2.expand_end>
cld    
mov    %r14,%rsi

0000000000041e2a <jsimd_h2v2_downsample_sse2.expandloop>:
push   %rax
push   %rcx
mov    (%rsi),%rdi
add    %rdx,%rdi
mov    -0x1(%rdi),%al
rep stos %al,%es:(%rdi)
pop    %rcx
pop    %rax
add    $0x8,%rsi
dec    %rax
jg     41e2a <jsimd_h2v2_downsample_sse2.expandloop>

0000000000041e42 <jsimd_h2v2_downsample_sse2.expand_end>:
pop    %rcx
mov    %r12d,%eax
test   %rax,%rax
jle    41f45 <jsimd_h2v2_downsample_sse2.return>
mov    $0x20001,%edx
movd   %edx,%xmm7
pcmpeqw %xmm6,%xmm6
pshufd $0x0,%xmm7,%xmm7
psrlw  $0x8,%xmm6
mov    %r14,%rsi
mov    %r15,%rdi

0000000000041e6c <jsimd_h2v2_downsample_sse2.rowloop>:
push   %rcx
push   %rdi
push   %rsi
mov    (%rsi),%rdx
mov    0x8(%rsi),%rsi
mov    (%rdi),%rdi
cmp    $0x10,%rcx
jae    41e96 <jsimd_h2v2_downsample_sse2.columnloop>

0000000000041e7f <jsimd_h2v2_downsample_sse2.columnloop_r8>:
movdqa (%rdx),%xmm0
movdqa (%rsi),%xmm1
pxor   %xmm2,%xmm2
pxor   %xmm3,%xmm3
mov    $0x10,%ecx
jmp    41ea8 <jsimd_h2v2_downsample_sse2.downsample>

0000000000041e96 <jsimd_h2v2_downsample_sse2.columnloop>:
movdqa (%rdx),%xmm0
movdqa (%rsi),%xmm1
movdqa 0x10(%rdx),%xmm2
movdqa 0x10(%rsi),%xmm3

0000000000041ea8 <jsimd_h2v2_downsample_sse2.downsample>:
movdqa %xmm0,%xmm4
movdqa %xmm1,%xmm5
pand   %xmm6,%xmm0
psrlw  $0x8,%xmm4
pand   %xmm6,%xmm1
psrlw  $0x8,%xmm5
paddw  %xmm4,%xmm0
paddw  %xmm5,%xmm1
movdqa %xmm2,%xmm4
movdqa %xmm3,%xmm5
pand   %xmm6,%xmm2
psrlw  $0x8,%xmm4
pand   %xmm6,%xmm3
psrlw  $0x8,%xmm5
paddw  %xmm4,%xmm2
paddw  %xmm5,%xmm3
paddw  %xmm1,%xmm0
paddw  %xmm3,%xmm2
paddw  %xmm7,%xmm0
paddw  %xmm7,%xmm2
psrlw  $0x2,%xmm0
psrlw  $0x2,%xmm2
packuswb %xmm2,%xmm0
movdqa %xmm0,(%rdi)
sub    $0x10,%rcx
add    $0x20,%rdx
add    $0x20,%rsi
add    $0x10,%rdi
cmp    $0x10,%rcx
jae    41e96 <jsimd_h2v2_downsample_sse2.columnloop>
test   %rcx,%rcx
jne    41e7f <jsimd_h2v2_downsample_sse2.columnloop_r8>
pop    %rsi
pop    %rdi
pop    %rcx
add    $0x10,%rsi
add    $0x8,%rdi
dec    %rax
jg     41e6c <jsimd_h2v2_downsample_sse2.rowloop>

0000000000041f45 <jsimd_h2v2_downsample_sse2.return>:
pop    %r15
pop    %r14
pop    %r13
pop    %r12
pop    %r11
pop    %r10
pop    %rbp
retq   
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop

0000000000041f60 <jsimd_ycc_rgb_convert_sse2>:
push   %rbp
mov    %rsp,%rax
sub    $0x4,%rsp
and    $0xfffffffffffffff0,%rsp
mov    %rax,(%rsp)
mov    %rsp,%rbp
lea    -0x20(%rbp),%rsp
push   %r10
push   %r11
push   %r12
push   %r13
push   %r14
push   %r15
mov    %rdi,%r10
mov    %rsi,%r11
mov    %rdx,%r12
mov    %rcx,%r13
mov    %r8,%r14
mov    %r9,%r15
push   %rbx
mov    %r10d,%ecx
test   %rcx,%rcx
je     422ec <jsimd_ycc_rgb_convert_sse2.return>
push   %rcx
mov    %r11,%rdi
mov    %r12d,%ecx
mov    (%rdi),%rsi
mov    0x8(%rdi),%rbx
mov    0x10(%rdi),%rdx
lea    (%rsi,%rcx,8),%rsi
lea    (%rbx,%rcx,8),%rbx
lea    (%rdx,%rcx,8),%rdx
pop    %rcx
mov    %r13,%rdi
mov    %r14d,%eax
test   %rax,%rax
jle    422ec <jsimd_ycc_rgb_convert_sse2.return>

0000000000041fd0 <jsimd_ycc_rgb_convert_sse2.rowloop>:
push   %rax
push   %rdi
push   %rdx
push   %rbx
push   %rsi
push   %rcx
mov    (%rsi),%rsi
mov    (%rbx),%rbx
mov    (%rdx),%rdx
mov    (%rdi),%rdi

0000000000041fe2 <jsimd_ycc_rgb_convert_sse2.columnloop>:
movdqa (%rbx),%xmm5
movdqa (%rdx),%xmm1
pcmpeqw %xmm4,%xmm4
pcmpeqw %xmm7,%xmm7
psrlw  $0x8,%xmm4
psllw  $0x7,%xmm7
movdqa %xmm4,%xmm0
pand   %xmm5,%xmm4
psrlw  $0x8,%xmm5
pand   %xmm1,%xmm0
psrlw  $0x8,%xmm1
paddw  %xmm7,%xmm4
paddw  %xmm7,%xmm5
paddw  %xmm7,%xmm0
paddw  %xmm7,%xmm1
movdqa %xmm4,%xmm2
movdqa %xmm5,%xmm3
paddw  %xmm4,%xmm4
paddw  %xmm5,%xmm5
movdqa %xmm0,%xmm6
movdqa %xmm1,%xmm7
paddw  %xmm0,%xmm0
paddw  %xmm1,%xmm1
pmulhw 0x29c76(%rip),%xmm4        # 6bcc0 <PW_MF0228>
pmulhw 0x29c6e(%rip),%xmm5        # 6bcc0 <PW_MF0228>
pmulhw 0x29c56(%rip),%xmm0        # 6bcb0 <PW_F0402>
pmulhw 0x29c4e(%rip),%xmm1        # 6bcb0 <PW_F0402>
paddw  0x29c76(%rip),%xmm4        # 6bce0 <PW_ONE>
paddw  0x29c6e(%rip),%xmm5        # 6bce0 <PW_ONE>
psraw  $0x1,%xmm4
psraw  $0x1,%xmm5
paddw  0x29c5c(%rip),%xmm0        # 6bce0 <PW_ONE>
paddw  0x29c54(%rip),%xmm1        # 6bce0 <PW_ONE>
psraw  $0x1,%xmm0
psraw  $0x1,%xmm1
paddw  %xmm2,%xmm4
paddw  %xmm3,%xmm5
paddw  %xmm2,%xmm4
paddw  %xmm3,%xmm5
paddw  %xmm6,%xmm0
paddw  %xmm7,%xmm1
movdqa %xmm4,-0x20(%rbp)
movdqa %xmm5,-0x10(%rbp)
movdqa %xmm2,%xmm4
movdqa %xmm3,%xmm5
punpcklwd %xmm6,%xmm2
punpckhwd %xmm6,%xmm4
pmaddwd 0x29c00(%rip),%xmm2        # 6bcd0 <PW_MF0344_F0285>
pmaddwd 0x29bf8(%rip),%xmm4        # 6bcd0 <PW_MF0344_F0285>
punpcklwd %xmm7,%xmm3
punpckhwd %xmm7,%xmm5
pmaddwd 0x29be8(%rip),%xmm3        # 6bcd0 <PW_MF0344_F0285>
pmaddwd 0x29be0(%rip),%xmm5        # 6bcd0 <PW_MF0344_F0285>
paddd  0x29bf8(%rip),%xmm2        # 6bcf0 <PD_ONEHALF>
paddd  0x29bf0(%rip),%xmm4        # 6bcf0 <PD_ONEHALF>
psrad  $0x10,%xmm2
psrad  $0x10,%xmm4
paddd  0x29bde(%rip),%xmm3        # 6bcf0 <PD_ONEHALF>
paddd  0x29bd6(%rip),%xmm5        # 6bcf0 <PD_ONEHALF>
psrad  $0x10,%xmm3
psrad  $0x10,%xmm5
packssdw %xmm4,%xmm2
packssdw %xmm5,%xmm3
psubw  %xmm6,%xmm2
psubw  %xmm7,%xmm3
movdqa (%rsi),%xmm5
pcmpeqw %xmm4,%xmm4
psrlw  $0x8,%xmm4
pand   %xmm5,%xmm4
psrlw  $0x8,%xmm5
paddw  %xmm4,%xmm0
paddw  %xmm5,%xmm1
packuswb %xmm0,%xmm0
packuswb %xmm1,%xmm1
paddw  %xmm4,%xmm2
paddw  %xmm5,%xmm3
packuswb %xmm2,%xmm2
packuswb %xmm3,%xmm3
paddw  -0x20(%rbp),%xmm4
paddw  -0x10(%rbp),%xmm5
packuswb %xmm4,%xmm4
packuswb %xmm5,%xmm5
punpcklbw %xmm2,%xmm0
punpcklbw %xmm1,%xmm4
punpcklbw %xmm5,%xmm3
movdqa %xmm0,%xmm6
movdqa %xmm0,%xmm7
punpcklwd %xmm4,%xmm0
punpckhwd %xmm4,%xmm6
psrldq $0x2,%xmm7
psrldq $0x2,%xmm4
movdqa %xmm3,%xmm2
movdqa %xmm3,%xmm1
punpcklwd %xmm7,%xmm3
punpckhwd %xmm7,%xmm2
psrldq $0x2,%xmm1
movdqa %xmm4,%xmm5
punpcklwd %xmm1,%xmm4
punpckhwd %xmm1,%xmm5
pshufd $0x4e,%xmm0,%xmm7
movdqa %xmm4,%xmm1
punpckldq %xmm3,%xmm0
punpckldq %xmm7,%xmm4
punpckhdq %xmm1,%xmm3
pshufd $0x4e,%xmm6,%xmm7
movdqa %xmm5,%xmm1
punpckldq %xmm2,%xmm6
punpckldq %xmm7,%xmm5
punpckhdq %xmm1,%xmm2
punpcklqdq %xmm4,%xmm0
punpcklqdq %xmm6,%xmm3
punpcklqdq %xmm2,%xmm5
cmp    $0x10,%rcx
jb     42245 <jsimd_ycc_rgb_convert_sse2.column_st32>
test   $0xf,%rdi
jne    42218 <jsimd_ycc_rgb_convert_sse2.out1>
movntdq %xmm0,(%rdi)
movntdq %xmm3,0x10(%rdi)
movntdq %xmm5,0x20(%rdi)
jmp    42226 <jsimd_ycc_rgb_convert_sse2.out0>

0000000000042218 <jsimd_ycc_rgb_convert_sse2.out1>:
movdqu %xmm0,(%rdi)
movdqu %xmm3,0x10(%rdi)
movdqu %xmm5,0x20(%rdi)

0000000000042226 <jsimd_ycc_rgb_convert_sse2.out0>:
add    $0x30,%rdi
sub    $0x10,%rcx
je     422ca <jsimd_ycc_rgb_convert_sse2.nextrow>
add    $0x10,%rsi
add    $0x10,%rbx
add    $0x10,%rdx
jmpq   41fe2 <jsimd_ycc_rgb_convert_sse2.columnloop>

0000000000042245 <jsimd_ycc_rgb_convert_sse2.column_st32>:
lea    (%rcx,%rcx,2),%rcx
cmp    $0x20,%rcx
jb     42266 <jsimd_ycc_rgb_convert_sse2.column_st16>
movdqu %xmm0,(%rdi)
movdqu %xmm3,0x10(%rdi)
add    $0x20,%rdi
movdqa %xmm5,%xmm0
sub    $0x20,%rcx
jmp    4227c <jsimd_ycc_rgb_convert_sse2.column_st15>

0000000000042266 <jsimd_ycc_rgb_convert_sse2.column_st16>:
cmp    $0x10,%rcx
jb     4227c <jsimd_ycc_rgb_convert_sse2.column_st15>
movdqu %xmm0,(%rdi)
add    $0x10,%rdi
movdqa %xmm3,%xmm0
sub    $0x10,%rcx

000000000004227c <jsimd_ycc_rgb_convert_sse2.column_st15>:
cmp    $0x8,%rcx
jb     42293 <jsimd_ycc_rgb_convert_sse2.column_st7>
movq   %xmm0,(%rdi)
add    $0x8,%rdi
sub    $0x8,%rcx
psrldq $0x8,%xmm0

0000000000042293 <jsimd_ycc_rgb_convert_sse2.column_st7>:
cmp    $0x4,%rcx
jb     422aa <jsimd_ycc_rgb_convert_sse2.column_st3>
movd   %xmm0,(%rdi)
add    $0x4,%rdi
sub    $0x4,%rcx
psrldq $0x4,%xmm0

00000000000422aa <jsimd_ycc_rgb_convert_sse2.column_st3>:
movd   %xmm0,%eax
cmp    $0x2,%rcx
jb     422c3 <jsimd_ycc_rgb_convert_sse2.column_st1>
mov    %ax,(%rdi)
add    $0x2,%rdi
sub    $0x2,%rcx
shr    $0x10,%rax

00000000000422c3 <jsimd_ycc_rgb_convert_sse2.column_st1>:
test   %rcx,%rcx
je     422ca <jsimd_ycc_rgb_convert_sse2.nextrow>
mov    %al,(%rdi)

00000000000422ca <jsimd_ycc_rgb_convert_sse2.nextrow>:
pop    %rcx
pop    %rsi
pop    %rbx
pop    %rdx
pop    %rdi
pop    %rax
add    $0x8,%rsi
add    $0x8,%rbx
add    $0x8,%rdx
add    $0x8,%rdi
dec    %rax
jg     41fd0 <jsimd_ycc_rgb_convert_sse2.rowloop>
sfence 

00000000000422ec <jsimd_ycc_rgb_convert_sse2.return>:
pop    %rbx
pop    %r15
pop    %r14
pop    %r13
pop    %r12
pop    %r11
pop    %r10
mov    %rbp,%rsp
pop    %rsp
pop    %rbp
retq   
nop

0000000000042300 <jsimd_ycc_extrgb_convert_sse2>:
push   %rbp
mov    %rsp,%rax
sub    $0x4,%rsp
and    $0xfffffffffffffff0,%rsp
mov    %rax,(%rsp)
mov    %rsp,%rbp
lea    -0x20(%rbp),%rsp
push   %r10
push   %r11
push   %r12
push   %r13
push   %r14
push   %r15
mov    %rdi,%r10
mov    %rsi,%r11
mov    %rdx,%r12
mov    %rcx,%r13
mov    %r8,%r14
mov    %r9,%r15
push   %rbx
mov    %r10d,%ecx
test   %rcx,%rcx
je     4268c <jsimd_ycc_extrgb_convert_sse2.return>
push   %rcx
mov    %r11,%rdi
mov    %r12d,%ecx
mov    (%rdi),%rsi
mov    0x8(%rdi),%rbx
mov    0x10(%rdi),%rdx
lea    (%rsi,%rcx,8),%rsi
lea    (%rbx,%rcx,8),%rbx
lea    (%rdx,%rcx,8),%rdx
pop    %rcx
mov    %r13,%rdi
mov    %r14d,%eax
test   %rax,%rax
jle    4268c <jsimd_ycc_extrgb_convert_sse2.return>

0000000000042370 <jsimd_ycc_extrgb_convert_sse2.rowloop>:
push   %rax
push   %rdi
push   %rdx
push   %rbx
push   %rsi
push   %rcx
mov    (%rsi),%rsi
mov    (%rbx),%rbx
mov    (%rdx),%rdx
mov    (%rdi),%rdi

0000000000042382 <jsimd_ycc_extrgb_convert_sse2.columnloop>:
movdqa (%rbx),%xmm5
movdqa (%rdx),%xmm1
pcmpeqw %xmm4,%xmm4
pcmpeqw %xmm7,%xmm7
psrlw  $0x8,%xmm4
psllw  $0x7,%xmm7
movdqa %xmm4,%xmm0
pand   %xmm5,%xmm4
psrlw  $0x8,%xmm5
pand   %xmm1,%xmm0
psrlw  $0x8,%xmm1
paddw  %xmm7,%xmm4
paddw  %xmm7,%xmm5
paddw  %xmm7,%xmm0
paddw  %xmm7,%xmm1
movdqa %xmm4,%xmm2
movdqa %xmm5,%xmm3
paddw  %xmm4,%xmm4
paddw  %xmm5,%xmm5
movdqa %xmm0,%xmm6
movdqa %xmm1,%xmm7
paddw  %xmm0,%xmm0
paddw  %xmm1,%xmm1
pmulhw 0x298d6(%rip),%xmm4        # 6bcc0 <PW_MF0228>
pmulhw 0x298ce(%rip),%xmm5        # 6bcc0 <PW_MF0228>
pmulhw 0x298b6(%rip),%xmm0        # 6bcb0 <PW_F0402>
pmulhw 0x298ae(%rip),%xmm1        # 6bcb0 <PW_F0402>
paddw  0x298d6(%rip),%xmm4        # 6bce0 <PW_ONE>
paddw  0x298ce(%rip),%xmm5        # 6bce0 <PW_ONE>
psraw  $0x1,%xmm4
psraw  $0x1,%xmm5
paddw  0x298bc(%rip),%xmm0        # 6bce0 <PW_ONE>
paddw  0x298b4(%rip),%xmm1        # 6bce0 <PW_ONE>
psraw  $0x1,%xmm0
psraw  $0x1,%xmm1
paddw  %xmm2,%xmm4
paddw  %xmm3,%xmm5
paddw  %xmm2,%xmm4
paddw  %xmm3,%xmm5
paddw  %xmm6,%xmm0
paddw  %xmm7,%xmm1
movdqa %xmm4,-0x20(%rbp)
movdqa %xmm5,-0x10(%rbp)
movdqa %xmm2,%xmm4
movdqa %xmm3,%xmm5
punpcklwd %xmm6,%xmm2
punpckhwd %xmm6,%xmm4
pmaddwd 0x29860(%rip),%xmm2        # 6bcd0 <PW_MF0344_F0285>
pmaddwd 0x29858(%rip),%xmm4        # 6bcd0 <PW_MF0344_F0285>
punpcklwd %xmm7,%xmm3
punpckhwd %xmm7,%xmm5
pmaddwd 0x29848(%rip),%xmm3        # 6bcd0 <PW_MF0344_F0285>
pmaddwd 0x29840(%rip),%xmm5        # 6bcd0 <PW_MF0344_F0285>
paddd  0x29858(%rip),%xmm2        # 6bcf0 <PD_ONEHALF>
paddd  0x29850(%rip),%xmm4        # 6bcf0 <PD_ONEHALF>
psrad  $0x10,%xmm2
psrad  $0x10,%xmm4
paddd  0x2983e(%rip),%xmm3        # 6bcf0 <PD_ONEHALF>
paddd  0x29836(%rip),%xmm5        # 6bcf0 <PD_ONEHALF>
psrad  $0x10,%xmm3
psrad  $0x10,%xmm5
packssdw %xmm4,%xmm2
packssdw %xmm5,%xmm3
psubw  %xmm6,%xmm2
psubw  %xmm7,%xmm3
movdqa (%rsi),%xmm5
pcmpeqw %xmm4,%xmm4
psrlw  $0x8,%xmm4
pand   %xmm5,%xmm4
psrlw  $0x8,%xmm5
paddw  %xmm4,%xmm0
paddw  %xmm5,%xmm1
packuswb %xmm0,%xmm0
packuswb %xmm1,%xmm1
paddw  %xmm4,%xmm2
paddw  %xmm5,%xmm3
packuswb %xmm2,%xmm2
packuswb %xmm3,%xmm3
paddw  -0x20(%rbp),%xmm4
paddw  -0x10(%rbp),%xmm5
packuswb %xmm4,%xmm4
packuswb %xmm5,%xmm5
punpcklbw %xmm2,%xmm0
punpcklbw %xmm1,%xmm4
punpcklbw %xmm5,%xmm3
movdqa %xmm0,%xmm6
movdqa %xmm0,%xmm7
punpcklwd %xmm4,%xmm0
punpckhwd %xmm4,%xmm6
psrldq $0x2,%xmm7
psrldq $0x2,%xmm4
movdqa %xmm3,%xmm2
movdqa %xmm3,%xmm1
punpcklwd %xmm7,%xmm3
punpckhwd %xmm7,%xmm2
psrldq $0x2,%xmm1
movdqa %xmm4,%xmm5
punpcklwd %xmm1,%xmm4
punpckhwd %xmm1,%xmm5
pshufd $0x4e,%xmm0,%xmm7
movdqa %xmm4,%xmm1
punpckldq %xmm3,%xmm0
punpckldq %xmm7,%xmm4
punpckhdq %xmm1,%xmm3
pshufd $0x4e,%xmm6,%xmm7
movdqa %xmm5,%xmm1
punpckldq %xmm2,%xmm6
punpckldq %xmm7,%xmm5
punpckhdq %xmm1,%xmm2
punpcklqdq %xmm4,%xmm0
punpcklqdq %xmm6,%xmm3
punpcklqdq %xmm2,%xmm5
cmp    $0x10,%rcx
jb     425e5 <jsimd_ycc_extrgb_convert_sse2.column_st32>
test   $0xf,%rdi
jne    425b8 <jsimd_ycc_extrgb_convert_sse2.out1>
movntdq %xmm0,(%rdi)
movntdq %xmm3,0x10(%rdi)
movntdq %xmm5,0x20(%rdi)
jmp    425c6 <jsimd_ycc_extrgb_convert_sse2.out0>

00000000000425b8 <jsimd_ycc_extrgb_convert_sse2.out1>:
movdqu %xmm0,(%rdi)
movdqu %xmm3,0x10(%rdi)
movdqu %xmm5,0x20(%rdi)

00000000000425c6 <jsimd_ycc_extrgb_convert_sse2.out0>:
add    $0x30,%rdi
sub    $0x10,%rcx
je     4266a <jsimd_ycc_extrgb_convert_sse2.nextrow>
add    $0x10,%rsi
add    $0x10,%rbx
add    $0x10,%rdx
jmpq   42382 <jsimd_ycc_extrgb_convert_sse2.columnloop>

00000000000425e5 <jsimd_ycc_extrgb_convert_sse2.column_st32>:
lea    (%rcx,%rcx,2),%rcx
cmp    $0x20,%rcx
jb     42606 <jsimd_ycc_extrgb_convert_sse2.column_st16>
movdqu %xmm0,(%rdi)
movdqu %xmm3,0x10(%rdi)
add    $0x20,%rdi
movdqa %xmm5,%xmm0
sub    $0x20,%rcx
jmp    4261c <jsimd_ycc_extrgb_convert_sse2.column_st15>

0000000000042606 <jsimd_ycc_extrgb_convert_sse2.column_st16>:
cmp    $0x10,%rcx
jb     4261c <jsimd_ycc_extrgb_convert_sse2.column_st15>
movdqu %xmm0,(%rdi)
add    $0x10,%rdi
movdqa %xmm3,%xmm0
sub    $0x10,%rcx

000000000004261c <jsimd_ycc_extrgb_convert_sse2.column_st15>:
cmp    $0x8,%rcx
jb     42633 <jsimd_ycc_extrgb_convert_sse2.column_st7>
movq   %xmm0,(%rdi)
add    $0x8,%rdi
sub    $0x8,%rcx
psrldq $0x8,%xmm0

0000000000042633 <jsimd_ycc_extrgb_convert_sse2.column_st7>:
cmp    $0x4,%rcx
jb     4264a <jsimd_ycc_extrgb_convert_sse2.column_st3>
movd   %xmm0,(%rdi)
add    $0x4,%rdi
sub    $0x4,%rcx
psrldq $0x4,%xmm0

000000000004264a <jsimd_ycc_extrgb_convert_sse2.column_st3>:
movd   %xmm0,%eax
cmp    $0x2,%rcx
jb     42663 <jsimd_ycc_extrgb_convert_sse2.column_st1>
mov    %ax,(%rdi)
add    $0x2,%rdi
sub    $0x2,%rcx
shr    $0x10,%rax

0000000000042663 <jsimd_ycc_extrgb_convert_sse2.column_st1>:
test   %rcx,%rcx
je     4266a <jsimd_ycc_extrgb_convert_sse2.nextrow>
mov    %al,(%rdi)

000000000004266a <jsimd_ycc_extrgb_convert_sse2.nextrow>:
pop    %rcx
pop    %rsi
pop    %rbx
pop    %rdx
pop    %rdi
pop    %rax
add    $0x8,%rsi
add    $0x8,%rbx
add    $0x8,%rdx
add    $0x8,%rdi
dec    %rax
jg     42370 <jsimd_ycc_extrgb_convert_sse2.rowloop>
sfence 

000000000004268c <jsimd_ycc_extrgb_convert_sse2.return>:
pop    %rbx
pop    %r15
pop    %r14
pop    %r13
pop    %r12
pop    %r11
pop    %r10
mov    %rbp,%rsp
pop    %rsp
pop    %rbp
retq   
nop

00000000000426a0 <jsimd_ycc_extrgbx_convert_sse2>:
push   %rbp
mov    %rsp,%rax
sub    $0x4,%rsp
and    $0xfffffffffffffff0,%rsp
mov    %rax,(%rsp)
mov    %rsp,%rbp
lea    -0x20(%rbp),%rsp
push   %r10
push   %r11
push   %r12
push   %r13
push   %r14
push   %r15
mov    %rdi,%r10
mov    %rsi,%r11
mov    %rdx,%r12
mov    %rcx,%r13
mov    %r8,%r14
mov    %r9,%r15
push   %rbx
mov    %r10d,%ecx
test   %rcx,%rcx
je     429d1 <jsimd_ycc_extrgbx_convert_sse2.return>
push   %rcx
mov    %r11,%rdi
mov    %r12d,%ecx
mov    (%rdi),%rsi
mov    0x8(%rdi),%rbx
mov    0x10(%rdi),%rdx
lea    (%rsi,%rcx,8),%rsi
lea    (%rbx,%rcx,8),%rbx
lea    (%rdx,%rcx,8),%rdx
pop    %rcx
mov    %r13,%rdi
mov    %r14d,%eax
test   %rax,%rax
jle    429d1 <jsimd_ycc_extrgbx_convert_sse2.return>

0000000000042710 <jsimd_ycc_extrgbx_convert_sse2.rowloop>:
push   %rax
push   %rdi
push   %rdx
push   %rbx
push   %rsi
push   %rcx
mov    (%rsi),%rsi
mov    (%rbx),%rbx
mov    (%rdx),%rdx
mov    (%rdi),%rdi

0000000000042722 <jsimd_ycc_extrgbx_convert_sse2.columnloop>:
movdqa (%rbx),%xmm5
movdqa (%rdx),%xmm1
pcmpeqw %xmm4,%xmm4
pcmpeqw %xmm7,%xmm7
psrlw  $0x8,%xmm4
psllw  $0x7,%xmm7
movdqa %xmm4,%xmm0
pand   %xmm5,%xmm4
psrlw  $0x8,%xmm5
pand   %xmm1,%xmm0
psrlw  $0x8,%xmm1
paddw  %xmm7,%xmm4
paddw  %xmm7,%xmm5
paddw  %xmm7,%xmm0
paddw  %xmm7,%xmm1
movdqa %xmm4,%xmm2
movdqa %xmm5,%xmm3
paddw  %xmm4,%xmm4
paddw  %xmm5,%xmm5
movdqa %xmm0,%xmm6
movdqa %xmm1,%xmm7
paddw  %xmm0,%xmm0
paddw  %xmm1,%xmm1
pmulhw 0x29536(%rip),%xmm4        # 6bcc0 <PW_MF0228>
pmulhw 0x2952e(%rip),%xmm5        # 6bcc0 <PW_MF0228>
pmulhw 0x29516(%rip),%xmm0        # 6bcb0 <PW_F0402>
pmulhw 0x2950e(%rip),%xmm1        # 6bcb0 <PW_F0402>
paddw  0x29536(%rip),%xmm4        # 6bce0 <PW_ONE>
paddw  0x2952e(%rip),%xmm5        # 6bce0 <PW_ONE>
psraw  $0x1,%xmm4
psraw  $0x1,%xmm5
paddw  0x2951c(%rip),%xmm0        # 6bce0 <PW_ONE>
paddw  0x29514(%rip),%xmm1        # 6bce0 <PW_ONE>
psraw  $0x1,%xmm0
psraw  $0x1,%xmm1
paddw  %xmm2,%xmm4
paddw  %xmm3,%xmm5
paddw  %xmm2,%xmm4
paddw  %xmm3,%xmm5
paddw  %xmm6,%xmm0
paddw  %xmm7,%xmm1
movdqa %xmm4,-0x20(%rbp)
movdqa %xmm5,-0x10(%rbp)
movdqa %xmm2,%xmm4
movdqa %xmm3,%xmm5
punpcklwd %xmm6,%xmm2
punpckhwd %xmm6,%xmm4
pmaddwd 0x294c0(%rip),%xmm2        # 6bcd0 <PW_MF0344_F0285>
pmaddwd 0x294b8(%rip),%xmm4        # 6bcd0 <PW_MF0344_F0285>
punpcklwd %xmm7,%xmm3
punpckhwd %xmm7,%xmm5
pmaddwd 0x294a8(%rip),%xmm3        # 6bcd0 <PW_MF0344_F0285>
pmaddwd 0x294a0(%rip),%xmm5        # 6bcd0 <PW_MF0344_F0285>
paddd  0x294b8(%rip),%xmm2        # 6bcf0 <PD_ONEHALF>
paddd  0x294b0(%rip),%xmm4        # 6bcf0 <PD_ONEHALF>
psrad  $0x10,%xmm2
psrad  $0x10,%xmm4
paddd  0x2949e(%rip),%xmm3        # 6bcf0 <PD_ONEHALF>
paddd  0x29496(%rip),%xmm5        # 6bcf0 <PD_ONEHALF>
psrad  $0x10,%xmm3
psrad  $0x10,%xmm5
packssdw %xmm4,%xmm2
packssdw %xmm5,%xmm3
psubw  %xmm6,%xmm2
psubw  %xmm7,%xmm3
movdqa (%rsi),%xmm5
pcmpeqw %xmm4,%xmm4
psrlw  $0x8,%xmm4
pand   %xmm5,%xmm4
psrlw  $0x8,%xmm5
paddw  %xmm4,%xmm0
paddw  %xmm5,%xmm1
packuswb %xmm0,%xmm0
packuswb %xmm1,%xmm1
paddw  %xmm4,%xmm2
paddw  %xmm5,%xmm3
packuswb %xmm2,%xmm2
packuswb %xmm3,%xmm3
paddw  -0x20(%rbp),%xmm4
paddw  -0x10(%rbp),%xmm5
packuswb %xmm4,%xmm4
packuswb %xmm5,%xmm5
pcmpeqb %xmm6,%xmm6
pcmpeqb %xmm7,%xmm7
punpcklbw %xmm2,%xmm0
punpcklbw %xmm6,%xmm4
punpcklbw %xmm3,%xmm1
punpcklbw %xmm7,%xmm5
movdqa %xmm0,%xmm2
punpcklwd %xmm4,%xmm0
punpckhwd %xmm4,%xmm2
movdqa %xmm1,%xmm6
punpcklwd %xmm5,%xmm1
punpckhwd %xmm5,%xmm6
movdqa %xmm0,%xmm3
punpckldq %xmm1,%xmm0
punpckhdq %xmm1,%xmm3
movdqa %xmm2,%xmm7
punpckldq %xmm6,%xmm2
punpckhdq %xmm6,%xmm7
cmp    $0x10,%rcx
jb     4295a <jsimd_ycc_extrgbx_convert_sse2.column_st32>
test   $0xf,%rdi
jne    42928 <jsimd_ycc_extrgbx_convert_sse2.out1>
movntdq %xmm0,(%rdi)
movntdq %xmm3,0x10(%rdi)
movntdq %xmm2,0x20(%rdi)
movntdq %xmm7,0x30(%rdi)
jmp    4293b <jsimd_ycc_extrgbx_convert_sse2.out0>

0000000000042928 <jsimd_ycc_extrgbx_convert_sse2.out1>:
movdqu %xmm0,(%rdi)
movdqu %xmm3,0x10(%rdi)
movdqu %xmm2,0x20(%rdi)
movdqu %xmm7,0x30(%rdi)

000000000004293b <jsimd_ycc_extrgbx_convert_sse2.out0>:
add    $0x40,%rdi
sub    $0x10,%rcx
je     429af <jsimd_ycc_extrgbx_convert_sse2.nextrow>
add    $0x10,%rsi
add    $0x10,%rbx
add    $0x10,%rdx
jmpq   42722 <jsimd_ycc_extrgbx_convert_sse2.columnloop>

000000000004295a <jsimd_ycc_extrgbx_convert_sse2.column_st32>:
cmp    $0x8,%rcx
jb     42979 <jsimd_ycc_extrgbx_convert_sse2.column_st16>
movdqu %xmm0,(%rdi)
movdqu %xmm3,0x10(%rdi)
add    $0x20,%rdi
movdqa %xmm2,%xmm0
movdqa %xmm7,%xmm3
sub    $0x8,%rcx

0000000000042979 <jsimd_ycc_extrgbx_convert_sse2.column_st16>:
cmp    $0x4,%rcx
jb     4298f <jsimd_ycc_extrgbx_convert_sse2.column_st15>
movdqu %xmm0,(%rdi)
add    $0x10,%rdi
movdqa %xmm3,%xmm0
sub    $0x4,%rcx

000000000004298f <jsimd_ycc_extrgbx_convert_sse2.column_st15>:
cmp    $0x2,%rcx
jb     429a6 <jsimd_ycc_extrgbx_convert_sse2.column_st7>
movq   %xmm0,(%rdi)
add    $0x8,%rdi
sub    $0x2,%rcx
psrldq $0x8,%xmm0

00000000000429a6 <jsimd_ycc_extrgbx_convert_sse2.column_st7>:
test   %rcx,%rcx
je     429af <jsimd_ycc_extrgbx_convert_sse2.nextrow>
movd   %xmm0,(%rdi)

00000000000429af <jsimd_ycc_extrgbx_convert_sse2.nextrow>:
pop    %rcx
pop    %rsi
pop    %rbx
pop    %rdx
pop    %rdi
pop    %rax
add    $0x8,%rsi
add    $0x8,%rbx
add    $0x8,%rdx
add    $0x8,%rdi
dec    %rax
jg     42710 <jsimd_ycc_extrgbx_convert_sse2.rowloop>
sfence 

00000000000429d1 <jsimd_ycc_extrgbx_convert_sse2.return>:
pop    %rbx
pop    %r15
pop    %r14
pop    %r13
pop    %r12
pop    %r11
pop    %r10
mov    %rbp,%rsp
pop    %rsp
pop    %rbp
retq   
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop

00000000000429f0 <jsimd_ycc_extbgr_convert_sse2>:
push   %rbp
mov    %rsp,%rax
sub    $0x4,%rsp
and    $0xfffffffffffffff0,%rsp
mov    %rax,(%rsp)
mov    %rsp,%rbp
lea    -0x20(%rbp),%rsp
push   %r10
push   %r11
push   %r12
push   %r13
push   %r14
push   %r15
mov    %rdi,%r10
mov    %rsi,%r11
mov    %rdx,%r12
mov    %rcx,%r13
mov    %r8,%r14
mov    %r9,%r15
push   %rbx
mov    %r10d,%ecx
test   %rcx,%rcx
je     42d7c <jsimd_ycc_extbgr_convert_sse2.return>
push   %rcx
mov    %r11,%rdi
mov    %r12d,%ecx
mov    (%rdi),%rsi
mov    0x8(%rdi),%rbx
mov    0x10(%rdi),%rdx
lea    (%rsi,%rcx,8),%rsi
lea    (%rbx,%rcx,8),%rbx
lea    (%rdx,%rcx,8),%rdx
pop    %rcx
mov    %r13,%rdi
mov    %r14d,%eax
test   %rax,%rax
jle    42d7c <jsimd_ycc_extbgr_convert_sse2.return>

0000000000042a60 <jsimd_ycc_extbgr_convert_sse2.rowloop>:
push   %rax
push   %rdi
push   %rdx
push   %rbx
push   %rsi
push   %rcx
mov    (%rsi),%rsi
mov    (%rbx),%rbx
mov    (%rdx),%rdx
mov    (%rdi),%rdi

0000000000042a72 <jsimd_ycc_extbgr_convert_sse2.columnloop>:
movdqa (%rbx),%xmm5
movdqa (%rdx),%xmm1
pcmpeqw %xmm4,%xmm4
pcmpeqw %xmm7,%xmm7
psrlw  $0x8,%xmm4
psllw  $0x7,%xmm7
movdqa %xmm4,%xmm0
pand   %xmm5,%xmm4
psrlw  $0x8,%xmm5
pand   %xmm1,%xmm0
psrlw  $0x8,%xmm1
paddw  %xmm7,%xmm4
paddw  %xmm7,%xmm5
paddw  %xmm7,%xmm0
paddw  %xmm7,%xmm1
movdqa %xmm4,%xmm2
movdqa %xmm5,%xmm3
paddw  %xmm4,%xmm4
paddw  %xmm5,%xmm5
movdqa %xmm0,%xmm6
movdqa %xmm1,%xmm7
paddw  %xmm0,%xmm0
paddw  %xmm1,%xmm1
pmulhw 0x291e6(%rip),%xmm4        # 6bcc0 <PW_MF0228>
pmulhw 0x291de(%rip),%xmm5        # 6bcc0 <PW_MF0228>
pmulhw 0x291c6(%rip),%xmm0        # 6bcb0 <PW_F0402>
pmulhw 0x291be(%rip),%xmm1        # 6bcb0 <PW_F0402>
paddw  0x291e6(%rip),%xmm4        # 6bce0 <PW_ONE>
paddw  0x291de(%rip),%xmm5        # 6bce0 <PW_ONE>
psraw  $0x1,%xmm4
psraw  $0x1,%xmm5
paddw  0x291cc(%rip),%xmm0        # 6bce0 <PW_ONE>
paddw  0x291c4(%rip),%xmm1        # 6bce0 <PW_ONE>
psraw  $0x1,%xmm0
psraw  $0x1,%xmm1
paddw  %xmm2,%xmm4
paddw  %xmm3,%xmm5
paddw  %xmm2,%xmm4
paddw  %xmm3,%xmm5
paddw  %xmm6,%xmm0
paddw  %xmm7,%xmm1
movdqa %xmm4,-0x20(%rbp)
movdqa %xmm5,-0x10(%rbp)
movdqa %xmm2,%xmm4
movdqa %xmm3,%xmm5
punpcklwd %xmm6,%xmm2
punpckhwd %xmm6,%xmm4
pmaddwd 0x29170(%rip),%xmm2        # 6bcd0 <PW_MF0344_F0285>
pmaddwd 0x29168(%rip),%xmm4        # 6bcd0 <PW_MF0344_F0285>
punpcklwd %xmm7,%xmm3
punpckhwd %xmm7,%xmm5
pmaddwd 0x29158(%rip),%xmm3        # 6bcd0 <PW_MF0344_F0285>
pmaddwd 0x29150(%rip),%xmm5        # 6bcd0 <PW_MF0344_F0285>
paddd  0x29168(%rip),%xmm2        # 6bcf0 <PD_ONEHALF>
paddd  0x29160(%rip),%xmm4        # 6bcf0 <PD_ONEHALF>
psrad  $0x10,%xmm2
psrad  $0x10,%xmm4
paddd  0x2914e(%rip),%xmm3        # 6bcf0 <PD_ONEHALF>
paddd  0x29146(%rip),%xmm5        # 6bcf0 <PD_ONEHALF>
psrad  $0x10,%xmm3
psrad  $0x10,%xmm5
packssdw %xmm4,%xmm2
packssdw %xmm5,%xmm3
psubw  %xmm6,%xmm2
psubw  %xmm7,%xmm3
movdqa (%rsi),%xmm5
pcmpeqw %xmm4,%xmm4
psrlw  $0x8,%xmm4
pand   %xmm5,%xmm4
psrlw  $0x8,%xmm5
paddw  %xmm4,%xmm0
paddw  %xmm5,%xmm1
packuswb %xmm0,%xmm0
packuswb %xmm1,%xmm1
paddw  %xmm4,%xmm2
paddw  %xmm5,%xmm3
packuswb %xmm2,%xmm2
packuswb %xmm3,%xmm3
paddw  -0x20(%rbp),%xmm4
paddw  -0x10(%rbp),%xmm5
packuswb %xmm4,%xmm4
packuswb %xmm5,%xmm5
punpcklbw %xmm2,%xmm4
punpcklbw %xmm5,%xmm0
punpcklbw %xmm1,%xmm3
movdqa %xmm4,%xmm6
movdqa %xmm4,%xmm7
punpcklwd %xmm0,%xmm4
punpckhwd %xmm0,%xmm6
psrldq $0x2,%xmm7
psrldq $0x2,%xmm0
movdqa %xmm3,%xmm2
movdqa %xmm3,%xmm5
punpcklwd %xmm7,%xmm3
punpckhwd %xmm7,%xmm2
psrldq $0x2,%xmm5
movdqa %xmm0,%xmm1
punpcklwd %xmm5,%xmm0
punpckhwd %xmm5,%xmm1
pshufd $0x4e,%xmm4,%xmm7
movdqa %xmm0,%xmm5
punpckldq %xmm3,%xmm4
punpckldq %xmm7,%xmm0
punpckhdq %xmm5,%xmm3
pshufd $0x4e,%xmm6,%xmm7
movdqa %xmm1,%xmm5
punpckldq %xmm2,%xmm6
punpckldq %xmm7,%xmm1
punpckhdq %xmm5,%xmm2
punpcklqdq %xmm0,%xmm4
punpcklqdq %xmm6,%xmm3
punpcklqdq %xmm2,%xmm1
cmp    $0x10,%rcx
jb     42cd5 <jsimd_ycc_extbgr_convert_sse2.column_st32>
test   $0xf,%rdi
jne    42ca8 <jsimd_ycc_extbgr_convert_sse2.out1>
movntdq %xmm4,(%rdi)
movntdq %xmm3,0x10(%rdi)
movntdq %xmm1,0x20(%rdi)
jmp    42cb6 <jsimd_ycc_extbgr_convert_sse2.out0>

0000000000042ca8 <jsimd_ycc_extbgr_convert_sse2.out1>:
movdqu %xmm4,(%rdi)
movdqu %xmm3,0x10(%rdi)
movdqu %xmm1,0x20(%rdi)

0000000000042cb6 <jsimd_ycc_extbgr_convert_sse2.out0>:
add    $0x30,%rdi
sub    $0x10,%rcx
je     42d5a <jsimd_ycc_extbgr_convert_sse2.nextrow>
add    $0x10,%rsi
add    $0x10,%rbx
add    $0x10,%rdx
jmpq   42a72 <jsimd_ycc_extbgr_convert_sse2.columnloop>

0000000000042cd5 <jsimd_ycc_extbgr_convert_sse2.column_st32>:
lea    (%rcx,%rcx,2),%rcx
cmp    $0x20,%rcx
jb     42cf6 <jsimd_ycc_extbgr_convert_sse2.column_st16>
movdqu %xmm4,(%rdi)
movdqu %xmm3,0x10(%rdi)
add    $0x20,%rdi
movdqa %xmm1,%xmm4
sub    $0x20,%rcx
jmp    42d0c <jsimd_ycc_extbgr_convert_sse2.column_st15>

0000000000042cf6 <jsimd_ycc_extbgr_convert_sse2.column_st16>:
cmp    $0x10,%rcx
jb     42d0c <jsimd_ycc_extbgr_convert_sse2.column_st15>
movdqu %xmm4,(%rdi)
add    $0x10,%rdi
movdqa %xmm3,%xmm4
sub    $0x10,%rcx

0000000000042d0c <jsimd_ycc_extbgr_convert_sse2.column_st15>:
cmp    $0x8,%rcx
jb     42d23 <jsimd_ycc_extbgr_convert_sse2.column_st7>
movq   %xmm4,(%rdi)
add    $0x8,%rdi
sub    $0x8,%rcx
psrldq $0x8,%xmm4

0000000000042d23 <jsimd_ycc_extbgr_convert_sse2.column_st7>:
cmp    $0x4,%rcx
jb     42d3a <jsimd_ycc_extbgr_convert_sse2.column_st3>
movd   %xmm4,(%rdi)
add    $0x4,%rdi
sub    $0x4,%rcx
psrldq $0x4,%xmm4

0000000000042d3a <jsimd_ycc_extbgr_convert_sse2.column_st3>:
movd   %xmm4,%eax
cmp    $0x2,%rcx
jb     42d53 <jsimd_ycc_extbgr_convert_sse2.column_st1>
mov    %ax,(%rdi)
add    $0x2,%rdi
sub    $0x2,%rcx
shr    $0x10,%rax

0000000000042d53 <jsimd_ycc_extbgr_convert_sse2.column_st1>:
test   %rcx,%rcx
je     42d5a <jsimd_ycc_extbgr_convert_sse2.nextrow>
mov    %al,(%rdi)

0000000000042d5a <jsimd_ycc_extbgr_convert_sse2.nextrow>:
pop    %rcx
pop    %rsi
pop    %rbx
pop    %rdx
pop    %rdi
pop    %rax
add    $0x8,%rsi
add    $0x8,%rbx
add    $0x8,%rdx
add    $0x8,%rdi
dec    %rax
jg     42a60 <jsimd_ycc_extbgr_convert_sse2.rowloop>
sfence 

0000000000042d7c <jsimd_ycc_extbgr_convert_sse2.return>:
pop    %rbx
pop    %r15
pop    %r14
pop    %r13
pop    %r12
pop    %r11
pop    %r10
mov    %rbp,%rsp
pop    %rsp
pop    %rbp
retq   
nop

0000000000042d90 <jsimd_ycc_extbgrx_convert_sse2>:
push   %rbp
mov    %rsp,%rax
sub    $0x4,%rsp
and    $0xfffffffffffffff0,%rsp
mov    %rax,(%rsp)
mov    %rsp,%rbp
lea    -0x20(%rbp),%rsp
push   %r10
push   %r11
push   %r12
push   %r13
push   %r14
push   %r15
mov    %rdi,%r10
mov    %rsi,%r11
mov    %rdx,%r12
mov    %rcx,%r13
mov    %r8,%r14
mov    %r9,%r15
push   %rbx
mov    %r10d,%ecx
test   %rcx,%rcx
je     430c1 <jsimd_ycc_extbgrx_convert_sse2.return>
push   %rcx
mov    %r11,%rdi
mov    %r12d,%ecx
mov    (%rdi),%rsi
mov    0x8(%rdi),%rbx
mov    0x10(%rdi),%rdx
lea    (%rsi,%rcx,8),%rsi
lea    (%rbx,%rcx,8),%rbx
lea    (%rdx,%rcx,8),%rdx
pop    %rcx
mov    %r13,%rdi
mov    %r14d,%eax
test   %rax,%rax
jle    430c1 <jsimd_ycc_extbgrx_convert_sse2.return>

0000000000042e00 <jsimd_ycc_extbgrx_convert_sse2.rowloop>:
push   %rax
push   %rdi
push   %rdx
push   %rbx
push   %rsi
push   %rcx
mov    (%rsi),%rsi
mov    (%rbx),%rbx
mov    (%rdx),%rdx
mov    (%rdi),%rdi

0000000000042e12 <jsimd_ycc_extbgrx_convert_sse2.columnloop>:
movdqa (%rbx),%xmm5
movdqa (%rdx),%xmm1
pcmpeqw %xmm4,%xmm4
pcmpeqw %xmm7,%xmm7
psrlw  $0x8,%xmm4
psllw  $0x7,%xmm7
movdqa %xmm4,%xmm0
pand   %xmm5,%xmm4
psrlw  $0x8,%xmm5
pand   %xmm1,%xmm0
psrlw  $0x8,%xmm1
paddw  %xmm7,%xmm4
paddw  %xmm7,%xmm5
paddw  %xmm7,%xmm0
paddw  %xmm7,%xmm1
movdqa %xmm4,%xmm2
movdqa %xmm5,%xmm3
paddw  %xmm4,%xmm4
paddw  %xmm5,%xmm5
movdqa %xmm0,%xmm6
movdqa %xmm1,%xmm7
paddw  %xmm0,%xmm0
paddw  %xmm1,%xmm1
pmulhw 0x28e46(%rip),%xmm4        # 6bcc0 <PW_MF0228>
pmulhw 0x28e3e(%rip),%xmm5        # 6bcc0 <PW_MF0228>
pmulhw 0x28e26(%rip),%xmm0        # 6bcb0 <PW_F0402>
pmulhw 0x28e1e(%rip),%xmm1        # 6bcb0 <PW_F0402>
paddw  0x28e46(%rip),%xmm4        # 6bce0 <PW_ONE>
paddw  0x28e3e(%rip),%xmm5        # 6bce0 <PW_ONE>
psraw  $0x1,%xmm4
psraw  $0x1,%xmm5
paddw  0x28e2c(%rip),%xmm0        # 6bce0 <PW_ONE>
paddw  0x28e24(%rip),%xmm1        # 6bce0 <PW_ONE>
psraw  $0x1,%xmm0
psraw  $0x1,%xmm1
paddw  %xmm2,%xmm4
paddw  %xmm3,%xmm5
paddw  %xmm2,%xmm4
paddw  %xmm3,%xmm5
paddw  %xmm6,%xmm0
paddw  %xmm7,%xmm1
movdqa %xmm4,-0x20(%rbp)
movdqa %xmm5,-0x10(%rbp)
movdqa %xmm2,%xmm4
movdqa %xmm3,%xmm5
punpcklwd %xmm6,%xmm2
punpckhwd %xmm6,%xmm4
pmaddwd 0x28dd0(%rip),%xmm2        # 6bcd0 <PW_MF0344_F0285>
pmaddwd 0x28dc8(%rip),%xmm4        # 6bcd0 <PW_MF0344_F0285>
punpcklwd %xmm7,%xmm3
punpckhwd %xmm7,%xmm5
pmaddwd 0x28db8(%rip),%xmm3        # 6bcd0 <PW_MF0344_F0285>
pmaddwd 0x28db0(%rip),%xmm5        # 6bcd0 <PW_MF0344_F0285>
paddd  0x28dc8(%rip),%xmm2        # 6bcf0 <PD_ONEHALF>
paddd  0x28dc0(%rip),%xmm4        # 6bcf0 <PD_ONEHALF>
psrad  $0x10,%xmm2
psrad  $0x10,%xmm4
paddd  0x28dae(%rip),%xmm3        # 6bcf0 <PD_ONEHALF>
paddd  0x28da6(%rip),%xmm5        # 6bcf0 <PD_ONEHALF>
psrad  $0x10,%xmm3
psrad  $0x10,%xmm5
packssdw %xmm4,%xmm2
packssdw %xmm5,%xmm3
psubw  %xmm6,%xmm2
psubw  %xmm7,%xmm3
movdqa (%rsi),%xmm5
pcmpeqw %xmm4,%xmm4
psrlw  $0x8,%xmm4
pand   %xmm5,%xmm4
psrlw  $0x8,%xmm5
paddw  %xmm4,%xmm0
paddw  %xmm5,%xmm1
packuswb %xmm0,%xmm0
packuswb %xmm1,%xmm1
paddw  %xmm4,%xmm2
paddw  %xmm5,%xmm3
packuswb %xmm2,%xmm2
packuswb %xmm3,%xmm3
paddw  -0x20(%rbp),%xmm4
paddw  -0x10(%rbp),%xmm5
packuswb %xmm4,%xmm4
packuswb %xmm5,%xmm5
pcmpeqb %xmm6,%xmm6
pcmpeqb %xmm7,%xmm7
punpcklbw %xmm2,%xmm4
punpcklbw %xmm6,%xmm0
punpcklbw %xmm3,%xmm5
punpcklbw %xmm7,%xmm1
movdqa %xmm4,%xmm2
punpcklwd %xmm0,%xmm4
punpckhwd %xmm0,%xmm2
movdqa %xmm5,%xmm6
punpcklwd %xmm1,%xmm5
punpckhwd %xmm1,%xmm6
movdqa %xmm4,%xmm3
punpckldq %xmm5,%xmm4
punpckhdq %xmm5,%xmm3
movdqa %xmm2,%xmm7
punpckldq %xmm6,%xmm2
punpckhdq %xmm6,%xmm7
cmp    $0x10,%rcx
jb     4304a <jsimd_ycc_extbgrx_convert_sse2.column_st32>
test   $0xf,%rdi
jne    43018 <jsimd_ycc_extbgrx_convert_sse2.out1>
movntdq %xmm4,(%rdi)
movntdq %xmm3,0x10(%rdi)
movntdq %xmm2,0x20(%rdi)
movntdq %xmm7,0x30(%rdi)
jmp    4302b <jsimd_ycc_extbgrx_convert_sse2.out0>

0000000000043018 <jsimd_ycc_extbgrx_convert_sse2.out1>:
movdqu %xmm4,(%rdi)
movdqu %xmm3,0x10(%rdi)
movdqu %xmm2,0x20(%rdi)
movdqu %xmm7,0x30(%rdi)

000000000004302b <jsimd_ycc_extbgrx_convert_sse2.out0>:
add    $0x40,%rdi
sub    $0x10,%rcx
je     4309f <jsimd_ycc_extbgrx_convert_sse2.nextrow>
add    $0x10,%rsi
add    $0x10,%rbx
add    $0x10,%rdx
jmpq   42e12 <jsimd_ycc_extbgrx_convert_sse2.columnloop>

000000000004304a <jsimd_ycc_extbgrx_convert_sse2.column_st32>:
cmp    $0x8,%rcx
jb     43069 <jsimd_ycc_extbgrx_convert_sse2.column_st16>
movdqu %xmm4,(%rdi)
movdqu %xmm3,0x10(%rdi)
add    $0x20,%rdi
movdqa %xmm2,%xmm4
movdqa %xmm7,%xmm3
sub    $0x8,%rcx

0000000000043069 <jsimd_ycc_extbgrx_convert_sse2.column_st16>:
cmp    $0x4,%rcx
jb     4307f <jsimd_ycc_extbgrx_convert_sse2.column_st15>
movdqu %xmm4,(%rdi)
add    $0x10,%rdi
movdqa %xmm3,%xmm4
sub    $0x4,%rcx

000000000004307f <jsimd_ycc_extbgrx_convert_sse2.column_st15>:
cmp    $0x2,%rcx
jb     43096 <jsimd_ycc_extbgrx_convert_sse2.column_st7>
movq   %xmm4,(%rdi)
add    $0x8,%rdi
sub    $0x2,%rcx
psrldq $0x8,%xmm4

0000000000043096 <jsimd_ycc_extbgrx_convert_sse2.column_st7>:
test   %rcx,%rcx
je     4309f <jsimd_ycc_extbgrx_convert_sse2.nextrow>
movd   %xmm4,(%rdi)

000000000004309f <jsimd_ycc_extbgrx_convert_sse2.nextrow>:
pop    %rcx
pop    %rsi
pop    %rbx
pop    %rdx
pop    %rdi
pop    %rax
add    $0x8,%rsi
add    $0x8,%rbx
add    $0x8,%rdx
add    $0x8,%rdi
dec    %rax
jg     42e00 <jsimd_ycc_extbgrx_convert_sse2.rowloop>
sfence 

00000000000430c1 <jsimd_ycc_extbgrx_convert_sse2.return>:
pop    %rbx
pop    %r15
pop    %r14
pop    %r13
pop    %r12
pop    %r11
pop    %r10
mov    %rbp,%rsp
pop    %rsp
pop    %rbp
retq   
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop

00000000000430e0 <jsimd_ycc_extxbgr_convert_sse2>:
push   %rbp
mov    %rsp,%rax
sub    $0x4,%rsp
and    $0xfffffffffffffff0,%rsp
mov    %rax,(%rsp)
mov    %rsp,%rbp
lea    -0x20(%rbp),%rsp
push   %r10
push   %r11
push   %r12
push   %r13
push   %r14
push   %r15
mov    %rdi,%r10
mov    %rsi,%r11
mov    %rdx,%r12
mov    %rcx,%r13
mov    %r8,%r14
mov    %r9,%r15
push   %rbx
mov    %r10d,%ecx
test   %rcx,%rcx
je     43411 <jsimd_ycc_extxbgr_convert_sse2.return>
push   %rcx
mov    %r11,%rdi
mov    %r12d,%ecx
mov    (%rdi),%rsi
mov    0x8(%rdi),%rbx
mov    0x10(%rdi),%rdx
lea    (%rsi,%rcx,8),%rsi
lea    (%rbx,%rcx,8),%rbx
lea    (%rdx,%rcx,8),%rdx
pop    %rcx
mov    %r13,%rdi
mov    %r14d,%eax
test   %rax,%rax
jle    43411 <jsimd_ycc_extxbgr_convert_sse2.return>

0000000000043150 <jsimd_ycc_extxbgr_convert_sse2.rowloop>:
push   %rax
push   %rdi
push   %rdx
push   %rbx
push   %rsi
push   %rcx
mov    (%rsi),%rsi
mov    (%rbx),%rbx
mov    (%rdx),%rdx
mov    (%rdi),%rdi

0000000000043162 <jsimd_ycc_extxbgr_convert_sse2.columnloop>:
movdqa (%rbx),%xmm5
movdqa (%rdx),%xmm1
pcmpeqw %xmm4,%xmm4
pcmpeqw %xmm7,%xmm7
psrlw  $0x8,%xmm4
psllw  $0x7,%xmm7
movdqa %xmm4,%xmm0
pand   %xmm5,%xmm4
psrlw  $0x8,%xmm5
pand   %xmm1,%xmm0
psrlw  $0x8,%xmm1
paddw  %xmm7,%xmm4
paddw  %xmm7,%xmm5
paddw  %xmm7,%xmm0
paddw  %xmm7,%xmm1
movdqa %xmm4,%xmm2
movdqa %xmm5,%xmm3
paddw  %xmm4,%xmm4
paddw  %xmm5,%xmm5
movdqa %xmm0,%xmm6
movdqa %xmm1,%xmm7
paddw  %xmm0,%xmm0
paddw  %xmm1,%xmm1
pmulhw 0x28af6(%rip),%xmm4        # 6bcc0 <PW_MF0228>
pmulhw 0x28aee(%rip),%xmm5        # 6bcc0 <PW_MF0228>
pmulhw 0x28ad6(%rip),%xmm0        # 6bcb0 <PW_F0402>
pmulhw 0x28ace(%rip),%xmm1        # 6bcb0 <PW_F0402>
paddw  0x28af6(%rip),%xmm4        # 6bce0 <PW_ONE>
paddw  0x28aee(%rip),%xmm5        # 6bce0 <PW_ONE>
psraw  $0x1,%xmm4
psraw  $0x1,%xmm5
paddw  0x28adc(%rip),%xmm0        # 6bce0 <PW_ONE>
paddw  0x28ad4(%rip),%xmm1        # 6bce0 <PW_ONE>
psraw  $0x1,%xmm0
psraw  $0x1,%xmm1
paddw  %xmm2,%xmm4
paddw  %xmm3,%xmm5
paddw  %xmm2,%xmm4
paddw  %xmm3,%xmm5
paddw  %xmm6,%xmm0
paddw  %xmm7,%xmm1
movdqa %xmm4,-0x20(%rbp)
movdqa %xmm5,-0x10(%rbp)
movdqa %xmm2,%xmm4
movdqa %xmm3,%xmm5
punpcklwd %xmm6,%xmm2
punpckhwd %xmm6,%xmm4
pmaddwd 0x28a80(%rip),%xmm2        # 6bcd0 <PW_MF0344_F0285>
pmaddwd 0x28a78(%rip),%xmm4        # 6bcd0 <PW_MF0344_F0285>
punpcklwd %xmm7,%xmm3
punpckhwd %xmm7,%xmm5
pmaddwd 0x28a68(%rip),%xmm3        # 6bcd0 <PW_MF0344_F0285>
pmaddwd 0x28a60(%rip),%xmm5        # 6bcd0 <PW_MF0344_F0285>
paddd  0x28a78(%rip),%xmm2        # 6bcf0 <PD_ONEHALF>
paddd  0x28a70(%rip),%xmm4        # 6bcf0 <PD_ONEHALF>
psrad  $0x10,%xmm2
psrad  $0x10,%xmm4
paddd  0x28a5e(%rip),%xmm3        # 6bcf0 <PD_ONEHALF>
paddd  0x28a56(%rip),%xmm5        # 6bcf0 <PD_ONEHALF>
psrad  $0x10,%xmm3
psrad  $0x10,%xmm5
packssdw %xmm4,%xmm2
packssdw %xmm5,%xmm3
psubw  %xmm6,%xmm2
psubw  %xmm7,%xmm3
movdqa (%rsi),%xmm5
pcmpeqw %xmm4,%xmm4
psrlw  $0x8,%xmm4
pand   %xmm5,%xmm4
psrlw  $0x8,%xmm5
paddw  %xmm4,%xmm0
paddw  %xmm5,%xmm1
packuswb %xmm0,%xmm0
packuswb %xmm1,%xmm1
paddw  %xmm4,%xmm2
paddw  %xmm5,%xmm3
packuswb %xmm2,%xmm2
packuswb %xmm3,%xmm3
paddw  -0x20(%rbp),%xmm4
paddw  -0x10(%rbp),%xmm5
packuswb %xmm4,%xmm4
packuswb %xmm5,%xmm5
pcmpeqb %xmm6,%xmm6
pcmpeqb %xmm7,%xmm7
punpcklbw %xmm4,%xmm6
punpcklbw %xmm0,%xmm2
punpcklbw %xmm5,%xmm7
punpcklbw %xmm1,%xmm3
movdqa %xmm6,%xmm4
punpcklwd %xmm2,%xmm6
punpckhwd %xmm2,%xmm4
movdqa %xmm7,%xmm0
punpcklwd %xmm3,%xmm7
punpckhwd %xmm3,%xmm0
movdqa %xmm6,%xmm5
punpckldq %xmm7,%xmm6
punpckhdq %xmm7,%xmm5
movdqa %xmm4,%xmm1
punpckldq %xmm0,%xmm4
punpckhdq %xmm0,%xmm1
cmp    $0x10,%rcx
jb     4339a <jsimd_ycc_extxbgr_convert_sse2.column_st32>
test   $0xf,%rdi
jne    43368 <jsimd_ycc_extxbgr_convert_sse2.out1>
movntdq %xmm6,(%rdi)
movntdq %xmm5,0x10(%rdi)
movntdq %xmm4,0x20(%rdi)
movntdq %xmm1,0x30(%rdi)
jmp    4337b <jsimd_ycc_extxbgr_convert_sse2.out0>

0000000000043368 <jsimd_ycc_extxbgr_convert_sse2.out1>:
movdqu %xmm6,(%rdi)
movdqu %xmm5,0x10(%rdi)
movdqu %xmm4,0x20(%rdi)
movdqu %xmm1,0x30(%rdi)

000000000004337b <jsimd_ycc_extxbgr_convert_sse2.out0>:
add    $0x40,%rdi
sub    $0x10,%rcx
je     433ef <jsimd_ycc_extxbgr_convert_sse2.nextrow>
add    $0x10,%rsi
add    $0x10,%rbx
add    $0x10,%rdx
jmpq   43162 <jsimd_ycc_extxbgr_convert_sse2.columnloop>

000000000004339a <jsimd_ycc_extxbgr_convert_sse2.column_st32>:
cmp    $0x8,%rcx
jb     433b9 <jsimd_ycc_extxbgr_convert_sse2.column_st16>
movdqu %xmm6,(%rdi)
movdqu %xmm5,0x10(%rdi)
add    $0x20,%rdi
movdqa %xmm4,%xmm6
movdqa %xmm1,%xmm5
sub    $0x8,%rcx

00000000000433b9 <jsimd_ycc_extxbgr_convert_sse2.column_st16>:
cmp    $0x4,%rcx
jb     433cf <jsimd_ycc_extxbgr_convert_sse2.column_st15>
movdqu %xmm6,(%rdi)
add    $0x10,%rdi
movdqa %xmm5,%xmm6
sub    $0x4,%rcx

00000000000433cf <jsimd_ycc_extxbgr_convert_sse2.column_st15>:
cmp    $0x2,%rcx
jb     433e6 <jsimd_ycc_extxbgr_convert_sse2.column_st7>
movq   %xmm6,(%rdi)
add    $0x8,%rdi
sub    $0x2,%rcx
psrldq $0x8,%xmm6

00000000000433e6 <jsimd_ycc_extxbgr_convert_sse2.column_st7>:
test   %rcx,%rcx
je     433ef <jsimd_ycc_extxbgr_convert_sse2.nextrow>
movd   %xmm6,(%rdi)

00000000000433ef <jsimd_ycc_extxbgr_convert_sse2.nextrow>:
pop    %rcx
pop    %rsi
pop    %rbx
pop    %rdx
pop    %rdi
pop    %rax
add    $0x8,%rsi
add    $0x8,%rbx
add    $0x8,%rdx
add    $0x8,%rdi
dec    %rax
jg     43150 <jsimd_ycc_extxbgr_convert_sse2.rowloop>
sfence 

0000000000043411 <jsimd_ycc_extxbgr_convert_sse2.return>:
pop    %rbx
pop    %r15
pop    %r14
pop    %r13
pop    %r12
pop    %r11
pop    %r10
mov    %rbp,%rsp
pop    %rsp
pop    %rbp
retq   
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop

0000000000043430 <jsimd_ycc_extxrgb_convert_sse2>:
push   %rbp
mov    %rsp,%rax
sub    $0x4,%rsp
and    $0xfffffffffffffff0,%rsp
mov    %rax,(%rsp)
mov    %rsp,%rbp
lea    -0x20(%rbp),%rsp
push   %r10
push   %r11
push   %r12
push   %r13
push   %r14
push   %r15
mov    %rdi,%r10
mov    %rsi,%r11
mov    %rdx,%r12
mov    %rcx,%r13
mov    %r8,%r14
mov    %r9,%r15
push   %rbx
mov    %r10d,%ecx
test   %rcx,%rcx
je     43761 <jsimd_ycc_extxrgb_convert_sse2.return>
push   %rcx
mov    %r11,%rdi
mov    %r12d,%ecx
mov    (%rdi),%rsi
mov    0x8(%rdi),%rbx
mov    0x10(%rdi),%rdx
lea    (%rsi,%rcx,8),%rsi
lea    (%rbx,%rcx,8),%rbx
lea    (%rdx,%rcx,8),%rdx
pop    %rcx
mov    %r13,%rdi
mov    %r14d,%eax
test   %rax,%rax
jle    43761 <jsimd_ycc_extxrgb_convert_sse2.return>

00000000000434a0 <jsimd_ycc_extxrgb_convert_sse2.rowloop>:
push   %rax
push   %rdi
push   %rdx
push   %rbx
push   %rsi
push   %rcx
mov    (%rsi),%rsi
mov    (%rbx),%rbx
mov    (%rdx),%rdx
mov    (%rdi),%rdi

00000000000434b2 <jsimd_ycc_extxrgb_convert_sse2.columnloop>:
movdqa (%rbx),%xmm5
movdqa (%rdx),%xmm1
pcmpeqw %xmm4,%xmm4
pcmpeqw %xmm7,%xmm7
psrlw  $0x8,%xmm4
psllw  $0x7,%xmm7
movdqa %xmm4,%xmm0
pand   %xmm5,%xmm4
psrlw  $0x8,%xmm5
pand   %xmm1,%xmm0
psrlw  $0x8,%xmm1
paddw  %xmm7,%xmm4
paddw  %xmm7,%xmm5
paddw  %xmm7,%xmm0
paddw  %xmm7,%xmm1
movdqa %xmm4,%xmm2
movdqa %xmm5,%xmm3
paddw  %xmm4,%xmm4
paddw  %xmm5,%xmm5
movdqa %xmm0,%xmm6
movdqa %xmm1,%xmm7
paddw  %xmm0,%xmm0
paddw  %xmm1,%xmm1
pmulhw 0x287a6(%rip),%xmm4        # 6bcc0 <PW_MF0228>
pmulhw 0x2879e(%rip),%xmm5        # 6bcc0 <PW_MF0228>
pmulhw 0x28786(%rip),%xmm0        # 6bcb0 <PW_F0402>
pmulhw 0x2877e(%rip),%xmm1        # 6bcb0 <PW_F0402>
paddw  0x287a6(%rip),%xmm4        # 6bce0 <PW_ONE>
paddw  0x2879e(%rip),%xmm5        # 6bce0 <PW_ONE>
psraw  $0x1,%xmm4
psraw  $0x1,%xmm5
paddw  0x2878c(%rip),%xmm0        # 6bce0 <PW_ONE>
paddw  0x28784(%rip),%xmm1        # 6bce0 <PW_ONE>
psraw  $0x1,%xmm0
psraw  $0x1,%xmm1
paddw  %xmm2,%xmm4
paddw  %xmm3,%xmm5
paddw  %xmm2,%xmm4
paddw  %xmm3,%xmm5
paddw  %xmm6,%xmm0
paddw  %xmm7,%xmm1
movdqa %xmm4,-0x20(%rbp)
movdqa %xmm5,-0x10(%rbp)
movdqa %xmm2,%xmm4
movdqa %xmm3,%xmm5
punpcklwd %xmm6,%xmm2
punpckhwd %xmm6,%xmm4
pmaddwd 0x28730(%rip),%xmm2        # 6bcd0 <PW_MF0344_F0285>
pmaddwd 0x28728(%rip),%xmm4        # 6bcd0 <PW_MF0344_F0285>
punpcklwd %xmm7,%xmm3
punpckhwd %xmm7,%xmm5
pmaddwd 0x28718(%rip),%xmm3        # 6bcd0 <PW_MF0344_F0285>
pmaddwd 0x28710(%rip),%xmm5        # 6bcd0 <PW_MF0344_F0285>
paddd  0x28728(%rip),%xmm2        # 6bcf0 <PD_ONEHALF>
paddd  0x28720(%rip),%xmm4        # 6bcf0 <PD_ONEHALF>
psrad  $0x10,%xmm2
psrad  $0x10,%xmm4
paddd  0x2870e(%rip),%xmm3        # 6bcf0 <PD_ONEHALF>
paddd  0x28706(%rip),%xmm5        # 6bcf0 <PD_ONEHALF>
psrad  $0x10,%xmm3
psrad  $0x10,%xmm5
packssdw %xmm4,%xmm2
packssdw %xmm5,%xmm3
psubw  %xmm6,%xmm2
psubw  %xmm7,%xmm3
movdqa (%rsi),%xmm5
pcmpeqw %xmm4,%xmm4
psrlw  $0x8,%xmm4
pand   %xmm5,%xmm4
psrlw  $0x8,%xmm5
paddw  %xmm4,%xmm0
paddw  %xmm5,%xmm1
packuswb %xmm0,%xmm0
packuswb %xmm1,%xmm1
paddw  %xmm4,%xmm2
paddw  %xmm5,%xmm3
packuswb %xmm2,%xmm2
packuswb %xmm3,%xmm3
paddw  -0x20(%rbp),%xmm4
paddw  -0x10(%rbp),%xmm5
packuswb %xmm4,%xmm4
packuswb %xmm5,%xmm5
pcmpeqb %xmm6,%xmm6
pcmpeqb %xmm7,%xmm7
punpcklbw %xmm0,%xmm6
punpcklbw %xmm4,%xmm2
punpcklbw %xmm1,%xmm7
punpcklbw %xmm5,%xmm3
movdqa %xmm6,%xmm0
punpcklwd %xmm2,%xmm6
punpckhwd %xmm2,%xmm0
movdqa %xmm7,%xmm4
punpcklwd %xmm3,%xmm7
punpckhwd %xmm3,%xmm4
movdqa %xmm6,%xmm1
punpckldq %xmm7,%xmm6
punpckhdq %xmm7,%xmm1
movdqa %xmm0,%xmm5
punpckldq %xmm4,%xmm0
punpckhdq %xmm4,%xmm5
cmp    $0x10,%rcx
jb     436ea <jsimd_ycc_extxrgb_convert_sse2.column_st32>
test   $0xf,%rdi
jne    436b8 <jsimd_ycc_extxrgb_convert_sse2.out1>
movntdq %xmm6,(%rdi)
movntdq %xmm1,0x10(%rdi)
movntdq %xmm0,0x20(%rdi)
movntdq %xmm5,0x30(%rdi)
jmp    436cb <jsimd_ycc_extxrgb_convert_sse2.out0>

00000000000436b8 <jsimd_ycc_extxrgb_convert_sse2.out1>:
movdqu %xmm6,(%rdi)
movdqu %xmm1,0x10(%rdi)
movdqu %xmm0,0x20(%rdi)
movdqu %xmm5,0x30(%rdi)

00000000000436cb <jsimd_ycc_extxrgb_convert_sse2.out0>:
add    $0x40,%rdi
sub    $0x10,%rcx
je     4373f <jsimd_ycc_extxrgb_convert_sse2.nextrow>
add    $0x10,%rsi
add    $0x10,%rbx
add    $0x10,%rdx
jmpq   434b2 <jsimd_ycc_extxrgb_convert_sse2.columnloop>

00000000000436ea <jsimd_ycc_extxrgb_convert_sse2.column_st32>:
cmp    $0x8,%rcx
jb     43709 <jsimd_ycc_extxrgb_convert_sse2.column_st16>
movdqu %xmm6,(%rdi)
movdqu %xmm1,0x10(%rdi)
add    $0x20,%rdi
movdqa %xmm0,%xmm6
movdqa %xmm5,%xmm1
sub    $0x8,%rcx

0000000000043709 <jsimd_ycc_extxrgb_convert_sse2.column_st16>:
cmp    $0x4,%rcx
jb     4371f <jsimd_ycc_extxrgb_convert_sse2.column_st15>
movdqu %xmm6,(%rdi)
add    $0x10,%rdi
movdqa %xmm1,%xmm6
sub    $0x4,%rcx

000000000004371f <jsimd_ycc_extxrgb_convert_sse2.column_st15>:
cmp    $0x2,%rcx
jb     43736 <jsimd_ycc_extxrgb_convert_sse2.column_st7>
movq   %xmm6,(%rdi)
add    $0x8,%rdi
sub    $0x2,%rcx
psrldq $0x8,%xmm6

0000000000043736 <jsimd_ycc_extxrgb_convert_sse2.column_st7>:
test   %rcx,%rcx
je     4373f <jsimd_ycc_extxrgb_convert_sse2.nextrow>
movd   %xmm6,(%rdi)

000000000004373f <jsimd_ycc_extxrgb_convert_sse2.nextrow>:
pop    %rcx
pop    %rsi
pop    %rbx
pop    %rdx
pop    %rdi
pop    %rax
add    $0x8,%rsi
add    $0x8,%rbx
add    $0x8,%rdx
add    $0x8,%rdi
dec    %rax
jg     434a0 <jsimd_ycc_extxrgb_convert_sse2.rowloop>
sfence 

0000000000043761 <jsimd_ycc_extxrgb_convert_sse2.return>:
pop    %rbx
pop    %r15
pop    %r14
pop    %r13
pop    %r12
pop    %r11
pop    %r10
mov    %rbp,%rsp
pop    %rsp
pop    %rbp
retq   
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop

0000000000043780 <jsimd_h2v1_merged_upsample_sse2>:
push   %rbp
mov    %rsp,%rax
sub    $0x4,%rsp
and    $0xfffffffffffffff0,%rsp
mov    %rax,(%rsp)
mov    %rsp,%rbp
lea    -0x30(%rbp),%rsp
push   %r10
push   %r11
push   %r12
push   %r13
push   %r14
push   %r15
mov    %rdi,%r10
mov    %rsi,%r11
mov    %rdx,%r12
mov    %rcx,%r13
mov    %r8,%r14
mov    %r9,%r15
push   %rbx
mov    %r10d,%ecx
test   %rcx,%rcx
je     43af9 <jsimd_h2v1_merged_upsample_sse2.return>
push   %rcx
mov    %r11,%rdi
mov    %r12d,%ecx
mov    (%rdi),%rsi
mov    0x8(%rdi),%rbx
mov    0x10(%rdi),%rdx
mov    %r13,%rdi
mov    (%rsi,%rcx,8),%rsi
mov    (%rbx,%rcx,8),%rbx
mov    (%rdx,%rcx,8),%rdx
mov    (%rdi),%rdi
pop    %rcx

00000000000437e7 <jsimd_h2v1_merged_upsample_sse2.columnloop>:
movdqa (%rbx),%xmm6
movdqa (%rdx),%xmm7
pxor   %xmm1,%xmm1
pcmpeqw %xmm3,%xmm3
psllw  $0x7,%xmm3
movdqa %xmm6,%xmm4
punpckhbw %xmm1,%xmm6
punpcklbw %xmm1,%xmm4
movdqa %xmm7,%xmm0
punpckhbw %xmm1,%xmm7
punpcklbw %xmm1,%xmm0
paddw  %xmm3,%xmm6
paddw  %xmm3,%xmm4
paddw  %xmm3,%xmm7
paddw  %xmm3,%xmm0
movdqa %xmm6,%xmm5
movdqa %xmm4,%xmm2
paddw  %xmm6,%xmm6
paddw  %xmm4,%xmm4
movdqa %xmm7,%xmm1
movdqa %xmm0,%xmm3
paddw  %xmm7,%xmm7
paddw  %xmm0,%xmm0
pmulhw 0x284c4(%rip),%xmm6        # 6bd10 <PW_MF0228>
pmulhw 0x284bc(%rip),%xmm4        # 6bd10 <PW_MF0228>
pmulhw 0x284a4(%rip),%xmm7        # 6bd00 <PW_F0402>
pmulhw 0x2849c(%rip),%xmm0        # 6bd00 <PW_F0402>
paddw  0x284c4(%rip),%xmm6        # 6bd30 <PW_ONE>
paddw  0x284bc(%rip),%xmm4        # 6bd30 <PW_ONE>
psraw  $0x1,%xmm6
psraw  $0x1,%xmm4
paddw  0x284aa(%rip),%xmm7        # 6bd30 <PW_ONE>
paddw  0x284a2(%rip),%xmm0        # 6bd30 <PW_ONE>
psraw  $0x1,%xmm7
psraw  $0x1,%xmm0
paddw  %xmm5,%xmm6
paddw  %xmm2,%xmm4
paddw  %xmm5,%xmm6
paddw  %xmm2,%xmm4
paddw  %xmm1,%xmm7
paddw  %xmm3,%xmm0
movdqa %xmm6,-0x30(%rbp)
movdqa %xmm7,-0x20(%rbp)
movdqa %xmm5,%xmm6
movdqa %xmm2,%xmm7
punpcklwd %xmm1,%xmm5
punpckhwd %xmm1,%xmm6
pmaddwd 0x2844e(%rip),%xmm5        # 6bd20 <PW_MF0344_F0285>
pmaddwd 0x28446(%rip),%xmm6        # 6bd20 <PW_MF0344_F0285>
punpcklwd %xmm3,%xmm2
punpckhwd %xmm3,%xmm7
pmaddwd 0x28436(%rip),%xmm2        # 6bd20 <PW_MF0344_F0285>
pmaddwd 0x2842e(%rip),%xmm7        # 6bd20 <PW_MF0344_F0285>
paddd  0x28446(%rip),%xmm5        # 6bd40 <PD_ONEHALF>
paddd  0x2843e(%rip),%xmm6        # 6bd40 <PD_ONEHALF>
psrad  $0x10,%xmm5
psrad  $0x10,%xmm6
paddd  0x2842c(%rip),%xmm2        # 6bd40 <PD_ONEHALF>
paddd  0x28424(%rip),%xmm7        # 6bd40 <PD_ONEHALF>
psrad  $0x10,%xmm2
psrad  $0x10,%xmm7
packssdw %xmm6,%xmm5
packssdw %xmm7,%xmm2
psubw  %xmm1,%xmm5
psubw  %xmm3,%xmm2
movdqa %xmm5,-0x10(%rbp)
mov    $0x2,%al
jmp    4394e <jsimd_h2v1_merged_upsample_sse2.Yloop_1st>

000000000004393f <jsimd_h2v1_merged_upsample_sse2.Yloop_2nd>:
movdqa -0x20(%rbp),%xmm0
movdqa -0x10(%rbp),%xmm2
movdqa -0x30(%rbp),%xmm4

000000000004394e <jsimd_h2v1_merged_upsample_sse2.Yloop_1st>:
movdqa (%rsi),%xmm7
pcmpeqw %xmm6,%xmm6
psrlw  $0x8,%xmm6
pand   %xmm7,%xmm6
psrlw  $0x8,%xmm7
movdqa %xmm0,%xmm1
movdqa %xmm2,%xmm3
movdqa %xmm4,%xmm5
paddw  %xmm6,%xmm0
paddw  %xmm7,%xmm1
packuswb %xmm0,%xmm0
packuswb %xmm1,%xmm1
paddw  %xmm6,%xmm2
paddw  %xmm7,%xmm3
packuswb %xmm2,%xmm2
packuswb %xmm3,%xmm3
paddw  %xmm6,%xmm4
paddw  %xmm7,%xmm5
packuswb %xmm4,%xmm4
packuswb %xmm5,%xmm5
punpcklbw %xmm2,%xmm0
punpcklbw %xmm1,%xmm4
punpcklbw %xmm5,%xmm3
movdqa %xmm0,%xmm6
movdqa %xmm0,%xmm7
punpcklwd %xmm4,%xmm0
punpckhwd %xmm4,%xmm6
psrldq $0x2,%xmm7
psrldq $0x2,%xmm4
movdqa %xmm3,%xmm2
movdqa %xmm3,%xmm1
punpcklwd %xmm7,%xmm3
punpckhwd %xmm7,%xmm2
psrldq $0x2,%xmm1
movdqa %xmm4,%xmm5
punpcklwd %xmm1,%xmm4
punpckhwd %xmm1,%xmm5
pshufd $0x4e,%xmm0,%xmm7
movdqa %xmm4,%xmm1
punpckldq %xmm3,%xmm0
punpckldq %xmm7,%xmm4
punpckhdq %xmm1,%xmm3
pshufd $0x4e,%xmm6,%xmm7
movdqa %xmm5,%xmm1
punpckldq %xmm2,%xmm6
punpckldq %xmm7,%xmm5
punpckhdq %xmm1,%xmm2
punpcklqdq %xmm4,%xmm0
punpcklqdq %xmm6,%xmm3
punpcklqdq %xmm2,%xmm5
cmp    $0x10,%rcx
jb     43a71 <jsimd_h2v1_merged_upsample_sse2.column_st32>
test   $0xf,%rdi
jne    43a3c <jsimd_h2v1_merged_upsample_sse2.out1>
movntdq %xmm0,(%rdi)
movntdq %xmm3,0x10(%rdi)
movntdq %xmm5,0x20(%rdi)
jmp    43a4a <jsimd_h2v1_merged_upsample_sse2.out0>

0000000000043a3c <jsimd_h2v1_merged_upsample_sse2.out1>:
movdqu %xmm0,(%rdi)
movdqu %xmm3,0x10(%rdi)
movdqu %xmm5,0x20(%rdi)

0000000000043a4a <jsimd_h2v1_merged_upsample_sse2.out0>:
add    $0x30,%rdi
sub    $0x10,%rcx
je     43af6 <jsimd_h2v1_merged_upsample_sse2.endcolumn>
add    $0x10,%rsi
dec    %al
jne    4393f <jsimd_h2v1_merged_upsample_sse2.Yloop_2nd>
add    $0x10,%rbx
add    $0x10,%rdx
jmpq   437e7 <jsimd_h2v1_merged_upsample_sse2.columnloop>

0000000000043a71 <jsimd_h2v1_merged_upsample_sse2.column_st32>:
lea    (%rcx,%rcx,2),%rcx
cmp    $0x20,%rcx
jb     43a92 <jsimd_h2v1_merged_upsample_sse2.column_st16>
movdqu %xmm0,(%rdi)
movdqu %xmm3,0x10(%rdi)
add    $0x20,%rdi
movdqa %xmm5,%xmm0
sub    $0x20,%rcx
jmp    43aa8 <jsimd_h2v1_merged_upsample_sse2.column_st15>

0000000000043a92 <jsimd_h2v1_merged_upsample_sse2.column_st16>:
cmp    $0x10,%rcx
jb     43aa8 <jsimd_h2v1_merged_upsample_sse2.column_st15>
movdqu %xmm0,(%rdi)
add    $0x10,%rdi
movdqa %xmm3,%xmm0
sub    $0x10,%rcx

0000000000043aa8 <jsimd_h2v1_merged_upsample_sse2.column_st15>:
cmp    $0x8,%rcx
jb     43abf <jsimd_h2v1_merged_upsample_sse2.column_st7>
movq   %xmm0,(%rdi)
add    $0x8,%rdi
sub    $0x8,%rcx
psrldq $0x8,%xmm0

0000000000043abf <jsimd_h2v1_merged_upsample_sse2.column_st7>:
cmp    $0x4,%rcx
jb     43ad6 <jsimd_h2v1_merged_upsample_sse2.column_st3>
movd   %xmm0,(%rdi)
add    $0x4,%rdi
sub    $0x4,%rcx
psrldq $0x4,%xmm0

0000000000043ad6 <jsimd_h2v1_merged_upsample_sse2.column_st3>:
movd   %xmm0,%eax
cmp    $0x2,%rcx
jb     43aef <jsimd_h2v1_merged_upsample_sse2.column_st1>
mov    %ax,(%rdi)
add    $0x2,%rdi
sub    $0x2,%rcx
shr    $0x10,%rax

0000000000043aef <jsimd_h2v1_merged_upsample_sse2.column_st1>:
test   %rcx,%rcx
je     43af6 <jsimd_h2v1_merged_upsample_sse2.endcolumn>
mov    %al,(%rdi)

0000000000043af6 <jsimd_h2v1_merged_upsample_sse2.endcolumn>:
sfence 

0000000000043af9 <jsimd_h2v1_merged_upsample_sse2.return>:
pop    %rbx
pop    %r15
pop    %r14
pop    %r13
pop    %r12
pop    %r11
pop    %r10
mov    %rbp,%rsp
pop    %rsp
pop    %rbp
retq   
nop
nop
nop
nop

0000000000043b10 <jsimd_h2v2_merged_upsample_sse2>:
push   %rbp
mov    %rsp,%rax
mov    %rsp,%rbp
push   %r10
push   %r11
push   %r12
push   %r13
push   %r14
push   %r15
mov    %rdi,%r10
mov    %rsi,%r11
mov    %rdx,%r12
mov    %rcx,%r13
mov    %r8,%r14
mov    %r9,%r15
push   %rbx
mov    %r10d,%eax
mov    %r11,%rdi
mov    %r12d,%ecx
mov    (%rdi),%rsi
mov    0x8(%rdi),%rbx
mov    0x10(%rdi),%rdx
mov    %r13,%rdi
lea    (%rsi,%rcx,8),%rsi
push   %rdx
push   %rbx
push   %rsi
mov    %rsp,%rbx
push   %rdi
push   %rcx
push   %rax
mov    %rcx,%rdx
mov    %rdi,%rcx
mov    %rax,%rdi
mov    %rbx,%rsi
callq  43780 <jsimd_h2v1_merged_upsample_sse2>
pop    %rax
pop    %rcx
pop    %rdi
pop    %rsi
pop    %rbx
pop    %rdx
add    $0x8,%rdi
add    $0x8,%rsi
push   %rdx
push   %rbx
push   %rsi
mov    %rsp,%rbx
push   %rdi
push   %rcx
push   %rax
mov    %rcx,%rdx
mov    %rdi,%rcx
mov    %rax,%rdi
mov    %rbx,%rsi
callq  43780 <jsimd_h2v1_merged_upsample_sse2>
pop    %rax
pop    %rcx
pop    %rdi
pop    %rsi
pop    %rbx
pop    %rdx
pop    %rbx
pop    %r15
pop    %r14
pop    %r13
pop    %r12
pop    %r11
pop    %r10
pop    %rbp
retq   
nop
nop
nop
nop
nop
nop
nop
nop

0000000000043bb0 <jsimd_h2v1_extrgb_merged_upsample_sse2>:
push   %rbp
mov    %rsp,%rax
sub    $0x4,%rsp
and    $0xfffffffffffffff0,%rsp
mov    %rax,(%rsp)
mov    %rsp,%rbp
lea    -0x30(%rbp),%rsp
push   %r10
push   %r11
push   %r12
push   %r13
push   %r14
push   %r15
mov    %rdi,%r10
mov    %rsi,%r11
mov    %rdx,%r12
mov    %rcx,%r13
mov    %r8,%r14
mov    %r9,%r15
push   %rbx
mov    %r10d,%ecx
test   %rcx,%rcx
je     43f29 <jsimd_h2v1_extrgb_merged_upsample_sse2.return>
push   %rcx
mov    %r11,%rdi
mov    %r12d,%ecx
mov    (%rdi),%rsi
mov    0x8(%rdi),%rbx
mov    0x10(%rdi),%rdx
mov    %r13,%rdi
mov    (%rsi,%rcx,8),%rsi
mov    (%rbx,%rcx,8),%rbx
mov    (%rdx,%rcx,8),%rdx
mov    (%rdi),%rdi
pop    %rcx

0000000000043c17 <jsimd_h2v1_extrgb_merged_upsample_sse2.columnloop>:
movdqa (%rbx),%xmm6
movdqa (%rdx),%xmm7
pxor   %xmm1,%xmm1
pcmpeqw %xmm3,%xmm3
psllw  $0x7,%xmm3
movdqa %xmm6,%xmm4
punpckhbw %xmm1,%xmm6
punpcklbw %xmm1,%xmm4
movdqa %xmm7,%xmm0
punpckhbw %xmm1,%xmm7
punpcklbw %xmm1,%xmm0
paddw  %xmm3,%xmm6
paddw  %xmm3,%xmm4
paddw  %xmm3,%xmm7
paddw  %xmm3,%xmm0
movdqa %xmm6,%xmm5
movdqa %xmm4,%xmm2
paddw  %xmm6,%xmm6
paddw  %xmm4,%xmm4
movdqa %xmm7,%xmm1
movdqa %xmm0,%xmm3
paddw  %xmm7,%xmm7
paddw  %xmm0,%xmm0
pmulhw 0x28094(%rip),%xmm6        # 6bd10 <PW_MF0228>
pmulhw 0x2808c(%rip),%xmm4        # 6bd10 <PW_MF0228>
pmulhw 0x28074(%rip),%xmm7        # 6bd00 <PW_F0402>
pmulhw 0x2806c(%rip),%xmm0        # 6bd00 <PW_F0402>
paddw  0x28094(%rip),%xmm6        # 6bd30 <PW_ONE>
paddw  0x2808c(%rip),%xmm4        # 6bd30 <PW_ONE>
psraw  $0x1,%xmm6
psraw  $0x1,%xmm4
paddw  0x2807a(%rip),%xmm7        # 6bd30 <PW_ONE>
paddw  0x28072(%rip),%xmm0        # 6bd30 <PW_ONE>
psraw  $0x1,%xmm7
psraw  $0x1,%xmm0
paddw  %xmm5,%xmm6
paddw  %xmm2,%xmm4
paddw  %xmm5,%xmm6
paddw  %xmm2,%xmm4
paddw  %xmm1,%xmm7
paddw  %xmm3,%xmm0
movdqa %xmm6,-0x30(%rbp)
movdqa %xmm7,-0x20(%rbp)
movdqa %xmm5,%xmm6
movdqa %xmm2,%xmm7
punpcklwd %xmm1,%xmm5
punpckhwd %xmm1,%xmm6
pmaddwd 0x2801e(%rip),%xmm5        # 6bd20 <PW_MF0344_F0285>
pmaddwd 0x28016(%rip),%xmm6        # 6bd20 <PW_MF0344_F0285>
punpcklwd %xmm3,%xmm2
punpckhwd %xmm3,%xmm7
pmaddwd 0x28006(%rip),%xmm2        # 6bd20 <PW_MF0344_F0285>
pmaddwd 0x27ffe(%rip),%xmm7        # 6bd20 <PW_MF0344_F0285>
paddd  0x28016(%rip),%xmm5        # 6bd40 <PD_ONEHALF>
paddd  0x2800e(%rip),%xmm6        # 6bd40 <PD_ONEHALF>
psrad  $0x10,%xmm5
psrad  $0x10,%xmm6
paddd  0x27ffc(%rip),%xmm2        # 6bd40 <PD_ONEHALF>
paddd  0x27ff4(%rip),%xmm7        # 6bd40 <PD_ONEHALF>
psrad  $0x10,%xmm2
psrad  $0x10,%xmm7
packssdw %xmm6,%xmm5
packssdw %xmm7,%xmm2
psubw  %xmm1,%xmm5
psubw  %xmm3,%xmm2
movdqa %xmm5,-0x10(%rbp)
mov    $0x2,%al
jmp    43d7e <jsimd_h2v1_extrgb_merged_upsample_sse2.Yloop_1st>

0000000000043d6f <jsimd_h2v1_extrgb_merged_upsample_sse2.Yloop_2nd>:
movdqa -0x20(%rbp),%xmm0
movdqa -0x10(%rbp),%xmm2
movdqa -0x30(%rbp),%xmm4

0000000000043d7e <jsimd_h2v1_extrgb_merged_upsample_sse2.Yloop_1st>:
movdqa (%rsi),%xmm7
pcmpeqw %xmm6,%xmm6
psrlw  $0x8,%xmm6
pand   %xmm7,%xmm6
psrlw  $0x8,%xmm7
movdqa %xmm0,%xmm1
movdqa %xmm2,%xmm3
movdqa %xmm4,%xmm5
paddw  %xmm6,%xmm0
paddw  %xmm7,%xmm1
packuswb %xmm0,%xmm0
packuswb %xmm1,%xmm1
paddw  %xmm6,%xmm2
paddw  %xmm7,%xmm3
packuswb %xmm2,%xmm2
packuswb %xmm3,%xmm3
paddw  %xmm6,%xmm4
paddw  %xmm7,%xmm5
packuswb %xmm4,%xmm4
packuswb %xmm5,%xmm5
punpcklbw %xmm2,%xmm0
punpcklbw %xmm1,%xmm4
punpcklbw %xmm5,%xmm3
movdqa %xmm0,%xmm6
movdqa %xmm0,%xmm7
punpcklwd %xmm4,%xmm0
punpckhwd %xmm4,%xmm6
psrldq $0x2,%xmm7
psrldq $0x2,%xmm4
movdqa %xmm3,%xmm2
movdqa %xmm3,%xmm1
punpcklwd %xmm7,%xmm3
punpckhwd %xmm7,%xmm2
psrldq $0x2,%xmm1
movdqa %xmm4,%xmm5
punpcklwd %xmm1,%xmm4
punpckhwd %xmm1,%xmm5
pshufd $0x4e,%xmm0,%xmm7
movdqa %xmm4,%xmm1
punpckldq %xmm3,%xmm0
punpckldq %xmm7,%xmm4
punpckhdq %xmm1,%xmm3
pshufd $0x4e,%xmm6,%xmm7
movdqa %xmm5,%xmm1
punpckldq %xmm2,%xmm6
punpckldq %xmm7,%xmm5
punpckhdq %xmm1,%xmm2
punpcklqdq %xmm4,%xmm0
punpcklqdq %xmm6,%xmm3
punpcklqdq %xmm2,%xmm5
cmp    $0x10,%rcx
jb     43ea1 <jsimd_h2v1_extrgb_merged_upsample_sse2.column_st32>
test   $0xf,%rdi
jne    43e6c <jsimd_h2v1_extrgb_merged_upsample_sse2.out1>
movntdq %xmm0,(%rdi)
movntdq %xmm3,0x10(%rdi)
movntdq %xmm5,0x20(%rdi)
jmp    43e7a <jsimd_h2v1_extrgb_merged_upsample_sse2.out0>

0000000000043e6c <jsimd_h2v1_extrgb_merged_upsample_sse2.out1>:
movdqu %xmm0,(%rdi)
movdqu %xmm3,0x10(%rdi)
movdqu %xmm5,0x20(%rdi)

0000000000043e7a <jsimd_h2v1_extrgb_merged_upsample_sse2.out0>:
add    $0x30,%rdi
sub    $0x10,%rcx
je     43f26 <jsimd_h2v1_extrgb_merged_upsample_sse2.endcolumn>
add    $0x10,%rsi
dec    %al
jne    43d6f <jsimd_h2v1_extrgb_merged_upsample_sse2.Yloop_2nd>
add    $0x10,%rbx
add    $0x10,%rdx
jmpq   43c17 <jsimd_h2v1_extrgb_merged_upsample_sse2.columnloop>

0000000000043ea1 <jsimd_h2v1_extrgb_merged_upsample_sse2.column_st32>:
lea    (%rcx,%rcx,2),%rcx
cmp    $0x20,%rcx
jb     43ec2 <jsimd_h2v1_extrgb_merged_upsample_sse2.column_st16>
movdqu %xmm0,(%rdi)
movdqu %xmm3,0x10(%rdi)
add    $0x20,%rdi
movdqa %xmm5,%xmm0
sub    $0x20,%rcx
jmp    43ed8 <jsimd_h2v1_extrgb_merged_upsample_sse2.column_st15>

0000000000043ec2 <jsimd_h2v1_extrgb_merged_upsample_sse2.column_st16>:
cmp    $0x10,%rcx
jb     43ed8 <jsimd_h2v1_extrgb_merged_upsample_sse2.column_st15>
movdqu %xmm0,(%rdi)
add    $0x10,%rdi
movdqa %xmm3,%xmm0
sub    $0x10,%rcx

0000000000043ed8 <jsimd_h2v1_extrgb_merged_upsample_sse2.column_st15>:
cmp    $0x8,%rcx
jb     43eef <jsimd_h2v1_extrgb_merged_upsample_sse2.column_st7>
movq   %xmm0,(%rdi)
add    $0x8,%rdi
sub    $0x8,%rcx
psrldq $0x8,%xmm0

0000000000043eef <jsimd_h2v1_extrgb_merged_upsample_sse2.column_st7>:
cmp    $0x4,%rcx
jb     43f06 <jsimd_h2v1_extrgb_merged_upsample_sse2.column_st3>
movd   %xmm0,(%rdi)
add    $0x4,%rdi
sub    $0x4,%rcx
psrldq $0x4,%xmm0

0000000000043f06 <jsimd_h2v1_extrgb_merged_upsample_sse2.column_st3>:
movd   %xmm0,%eax
cmp    $0x2,%rcx
jb     43f1f <jsimd_h2v1_extrgb_merged_upsample_sse2.column_st1>
mov    %ax,(%rdi)
add    $0x2,%rdi
sub    $0x2,%rcx
shr    $0x10,%rax

0000000000043f1f <jsimd_h2v1_extrgb_merged_upsample_sse2.column_st1>:
test   %rcx,%rcx
je     43f26 <jsimd_h2v1_extrgb_merged_upsample_sse2.endcolumn>
mov    %al,(%rdi)

0000000000043f26 <jsimd_h2v1_extrgb_merged_upsample_sse2.endcolumn>:
sfence 

0000000000043f29 <jsimd_h2v1_extrgb_merged_upsample_sse2.return>:
pop    %rbx
pop    %r15
pop    %r14
pop    %r13
pop    %r12
pop    %r11
pop    %r10
mov    %rbp,%rsp
pop    %rsp
pop    %rbp
retq   
nop
nop
nop
nop

0000000000043f40 <jsimd_h2v2_extrgb_merged_upsample_sse2>:
push   %rbp
mov    %rsp,%rax
mov    %rsp,%rbp
push   %r10
push   %r11
push   %r12
push   %r13
push   %r14
push   %r15
mov    %rdi,%r10
mov    %rsi,%r11
mov    %rdx,%r12
mov    %rcx,%r13
mov    %r8,%r14
mov    %r9,%r15
push   %rbx
mov    %r10d,%eax
mov    %r11,%rdi
mov    %r12d,%ecx
mov    (%rdi),%rsi
mov    0x8(%rdi),%rbx
mov    0x10(%rdi),%rdx
mov    %r13,%rdi
lea    (%rsi,%rcx,8),%rsi
push   %rdx
push   %rbx
push   %rsi
mov    %rsp,%rbx
push   %rdi
push   %rcx
push   %rax
mov    %rcx,%rdx
mov    %rdi,%rcx
mov    %rax,%rdi
mov    %rbx,%rsi
callq  43bb0 <jsimd_h2v1_extrgb_merged_upsample_sse2>
pop    %rax
pop    %rcx
pop    %rdi
pop    %rsi
pop    %rbx
pop    %rdx
add    $0x8,%rdi
add    $0x8,%rsi
push   %rdx
push   %rbx
push   %rsi
mov    %rsp,%rbx
push   %rdi
push   %rcx
push   %rax
mov    %rcx,%rdx
mov    %rdi,%rcx
mov    %rax,%rdi
mov    %rbx,%rsi
callq  43bb0 <jsimd_h2v1_extrgb_merged_upsample_sse2>
pop    %rax
pop    %rcx
pop    %rdi
pop    %rsi
pop    %rbx
pop    %rdx
pop    %rbx
pop    %r15
pop    %r14
pop    %r13
pop    %r12
pop    %r11
pop    %r10
pop    %rbp
retq   
nop
nop
nop
nop
nop
nop
nop
nop

0000000000043fe0 <jsimd_h2v1_extrgbx_merged_upsample_sse2>:
push   %rbp
mov    %rsp,%rax
sub    $0x4,%rsp
and    $0xfffffffffffffff0,%rsp
mov    %rax,(%rsp)
mov    %rsp,%rbp
lea    -0x30(%rbp),%rsp
push   %r10
push   %r11
push   %r12
push   %r13
push   %r14
push   %r15
mov    %rdi,%r10
mov    %rsi,%r11
mov    %rdx,%r12
mov    %rcx,%r13
mov    %r8,%r14
mov    %r9,%r15
push   %rbx
mov    %r10d,%ecx
test   %rcx,%rcx
je     442fe <jsimd_h2v1_extrgbx_merged_upsample_sse2.return>
push   %rcx
mov    %r11,%rdi
mov    %r12d,%ecx
mov    (%rdi),%rsi
mov    0x8(%rdi),%rbx
mov    0x10(%rdi),%rdx
mov    %r13,%rdi
mov    (%rsi,%rcx,8),%rsi
mov    (%rbx,%rcx,8),%rbx
mov    (%rdx,%rcx,8),%rdx
mov    (%rdi),%rdi
pop    %rcx

0000000000044047 <jsimd_h2v1_extrgbx_merged_upsample_sse2.columnloop>:
movdqa (%rbx),%xmm6
movdqa (%rdx),%xmm7
pxor   %xmm1,%xmm1
pcmpeqw %xmm3,%xmm3
psllw  $0x7,%xmm3
movdqa %xmm6,%xmm4
punpckhbw %xmm1,%xmm6
punpcklbw %xmm1,%xmm4
movdqa %xmm7,%xmm0
punpckhbw %xmm1,%xmm7
punpcklbw %xmm1,%xmm0
paddw  %xmm3,%xmm6
paddw  %xmm3,%xmm4
paddw  %xmm3,%xmm7
paddw  %xmm3,%xmm0
movdqa %xmm6,%xmm5
movdqa %xmm4,%xmm2
paddw  %xmm6,%xmm6
paddw  %xmm4,%xmm4
movdqa %xmm7,%xmm1
movdqa %xmm0,%xmm3
paddw  %xmm7,%xmm7
paddw  %xmm0,%xmm0
pmulhw 0x27c64(%rip),%xmm6        # 6bd10 <PW_MF0228>
pmulhw 0x27c5c(%rip),%xmm4        # 6bd10 <PW_MF0228>
pmulhw 0x27c44(%rip),%xmm7        # 6bd00 <PW_F0402>
pmulhw 0x27c3c(%rip),%xmm0        # 6bd00 <PW_F0402>
paddw  0x27c64(%rip),%xmm6        # 6bd30 <PW_ONE>
paddw  0x27c5c(%rip),%xmm4        # 6bd30 <PW_ONE>
psraw  $0x1,%xmm6
psraw  $0x1,%xmm4
paddw  0x27c4a(%rip),%xmm7        # 6bd30 <PW_ONE>
paddw  0x27c42(%rip),%xmm0        # 6bd30 <PW_ONE>
psraw  $0x1,%xmm7
psraw  $0x1,%xmm0
paddw  %xmm5,%xmm6
paddw  %xmm2,%xmm4
paddw  %xmm5,%xmm6
paddw  %xmm2,%xmm4
paddw  %xmm1,%xmm7
paddw  %xmm3,%xmm0
movdqa %xmm6,-0x30(%rbp)
movdqa %xmm7,-0x20(%rbp)
movdqa %xmm5,%xmm6
movdqa %xmm2,%xmm7
punpcklwd %xmm1,%xmm5
punpckhwd %xmm1,%xmm6
pmaddwd 0x27bee(%rip),%xmm5        # 6bd20 <PW_MF0344_F0285>
pmaddwd 0x27be6(%rip),%xmm6        # 6bd20 <PW_MF0344_F0285>
punpcklwd %xmm3,%xmm2
punpckhwd %xmm3,%xmm7
pmaddwd 0x27bd6(%rip),%xmm2        # 6bd20 <PW_MF0344_F0285>
pmaddwd 0x27bce(%rip),%xmm7        # 6bd20 <PW_MF0344_F0285>
paddd  0x27be6(%rip),%xmm5        # 6bd40 <PD_ONEHALF>
paddd  0x27bde(%rip),%xmm6        # 6bd40 <PD_ONEHALF>
psrad  $0x10,%xmm5
psrad  $0x10,%xmm6
paddd  0x27bcc(%rip),%xmm2        # 6bd40 <PD_ONEHALF>
paddd  0x27bc4(%rip),%xmm7        # 6bd40 <PD_ONEHALF>
psrad  $0x10,%xmm2
psrad  $0x10,%xmm7
packssdw %xmm6,%xmm5
packssdw %xmm7,%xmm2
psubw  %xmm1,%xmm5
psubw  %xmm3,%xmm2
movdqa %xmm5,-0x10(%rbp)
mov    $0x2,%al
jmp    441ae <jsimd_h2v1_extrgbx_merged_upsample_sse2.Yloop_1st>

000000000004419f <jsimd_h2v1_extrgbx_merged_upsample_sse2.Yloop_2nd>:
movdqa -0x20(%rbp),%xmm0
movdqa -0x10(%rbp),%xmm2
movdqa -0x30(%rbp),%xmm4

00000000000441ae <jsimd_h2v1_extrgbx_merged_upsample_sse2.Yloop_1st>:
movdqa (%rsi),%xmm7
pcmpeqw %xmm6,%xmm6
psrlw  $0x8,%xmm6
pand   %xmm7,%xmm6
psrlw  $0x8,%xmm7
movdqa %xmm0,%xmm1
movdqa %xmm2,%xmm3
movdqa %xmm4,%xmm5
paddw  %xmm6,%xmm0
paddw  %xmm7,%xmm1
packuswb %xmm0,%xmm0
packuswb %xmm1,%xmm1
paddw  %xmm6,%xmm2
paddw  %xmm7,%xmm3
packuswb %xmm2,%xmm2
packuswb %xmm3,%xmm3
paddw  %xmm6,%xmm4
paddw  %xmm7,%xmm5
packuswb %xmm4,%xmm4
packuswb %xmm5,%xmm5
pcmpeqb %xmm6,%xmm6
pcmpeqb %xmm7,%xmm7
punpcklbw %xmm2,%xmm0
punpcklbw %xmm6,%xmm4
punpcklbw %xmm3,%xmm1
punpcklbw %xmm7,%xmm5
movdqa %xmm0,%xmm2
punpcklwd %xmm4,%xmm0
punpckhwd %xmm4,%xmm2
movdqa %xmm1,%xmm6
punpcklwd %xmm5,%xmm1
punpckhwd %xmm5,%xmm6
movdqa %xmm0,%xmm3
punpckldq %xmm1,%xmm0
punpckhdq %xmm1,%xmm3
movdqa %xmm2,%xmm7
punpckldq %xmm6,%xmm2
punpckhdq %xmm6,%xmm7
cmp    $0x10,%rcx
jb     442a6 <jsimd_h2v1_extrgbx_merged_upsample_sse2.column_st32>
test   $0xf,%rdi
jne    4426c <jsimd_h2v1_extrgbx_merged_upsample_sse2.out1>
movntdq %xmm0,(%rdi)
movntdq %xmm3,0x10(%rdi)
movntdq %xmm2,0x20(%rdi)
movntdq %xmm7,0x30(%rdi)
jmp    4427f <jsimd_h2v1_extrgbx_merged_upsample_sse2.out0>

000000000004426c <jsimd_h2v1_extrgbx_merged_upsample_sse2.out1>:
movdqu %xmm0,(%rdi)
movdqu %xmm3,0x10(%rdi)
movdqu %xmm2,0x20(%rdi)
movdqu %xmm7,0x30(%rdi)

000000000004427f <jsimd_h2v1_extrgbx_merged_upsample_sse2.out0>:
add    $0x40,%rdi
sub    $0x10,%rcx
je     442fb <jsimd_h2v1_extrgbx_merged_upsample_sse2.endcolumn>
add    $0x10,%rsi
dec    %al
jne    4419f <jsimd_h2v1_extrgbx_merged_upsample_sse2.Yloop_2nd>
add    $0x10,%rbx
add    $0x10,%rdx
jmpq   44047 <jsimd_h2v1_extrgbx_merged_upsample_sse2.columnloop>

00000000000442a6 <jsimd_h2v1_extrgbx_merged_upsample_sse2.column_st32>:
cmp    $0x8,%rcx
jb     442c5 <jsimd_h2v1_extrgbx_merged_upsample_sse2.column_st16>
movdqu %xmm0,(%rdi)
movdqu %xmm3,0x10(%rdi)
add    $0x20,%rdi
movdqa %xmm2,%xmm0
movdqa %xmm7,%xmm3
sub    $0x8,%rcx

00000000000442c5 <jsimd_h2v1_extrgbx_merged_upsample_sse2.column_st16>:
cmp    $0x4,%rcx
jb     442db <jsimd_h2v1_extrgbx_merged_upsample_sse2.column_st15>
movdqu %xmm0,(%rdi)
add    $0x10,%rdi
movdqa %xmm3,%xmm0
sub    $0x4,%rcx

00000000000442db <jsimd_h2v1_extrgbx_merged_upsample_sse2.column_st15>:
cmp    $0x2,%rcx
jb     442f2 <jsimd_h2v1_extrgbx_merged_upsample_sse2.column_st7>
movq   %xmm0,(%rdi)
add    $0x8,%rdi
sub    $0x2,%rcx
psrldq $0x8,%xmm0

00000000000442f2 <jsimd_h2v1_extrgbx_merged_upsample_sse2.column_st7>:
test   %rcx,%rcx
je     442fb <jsimd_h2v1_extrgbx_merged_upsample_sse2.endcolumn>
movd   %xmm0,(%rdi)

00000000000442fb <jsimd_h2v1_extrgbx_merged_upsample_sse2.endcolumn>:
sfence 

00000000000442fe <jsimd_h2v1_extrgbx_merged_upsample_sse2.return>:
pop    %rbx
pop    %r15
pop    %r14
pop    %r13
pop    %r12
pop    %r11
pop    %r10
mov    %rbp,%rsp
pop    %rsp
pop    %rbp
retq   
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop

0000000000044320 <jsimd_h2v2_extrgbx_merged_upsample_sse2>:
push   %rbp
mov    %rsp,%rax
mov    %rsp,%rbp
push   %r10
push   %r11
push   %r12
push   %r13
push   %r14
push   %r15
mov    %rdi,%r10
mov    %rsi,%r11
mov    %rdx,%r12
mov    %rcx,%r13
mov    %r8,%r14
mov    %r9,%r15
push   %rbx
mov    %r10d,%eax
mov    %r11,%rdi
mov    %r12d,%ecx
mov    (%rdi),%rsi
mov    0x8(%rdi),%rbx
mov    0x10(%rdi),%rdx
mov    %r13,%rdi
lea    (%rsi,%rcx,8),%rsi
push   %rdx
push   %rbx
push   %rsi
mov    %rsp,%rbx
push   %rdi
push   %rcx
push   %rax
mov    %rcx,%rdx
mov    %rdi,%rcx
mov    %rax,%rdi
mov    %rbx,%rsi
callq  43fe0 <jsimd_h2v1_extrgbx_merged_upsample_sse2>
pop    %rax
pop    %rcx
pop    %rdi
pop    %rsi
pop    %rbx
pop    %rdx
add    $0x8,%rdi
add    $0x8,%rsi
push   %rdx
push   %rbx
push   %rsi
mov    %rsp,%rbx
push   %rdi
push   %rcx
push   %rax
mov    %rcx,%rdx
mov    %rdi,%rcx
mov    %rax,%rdi
mov    %rbx,%rsi
callq  43fe0 <jsimd_h2v1_extrgbx_merged_upsample_sse2>
pop    %rax
pop    %rcx
pop    %rdi
pop    %rsi
pop    %rbx
pop    %rdx
pop    %rbx
pop    %r15
pop    %r14
pop    %r13
pop    %r12
pop    %r11
pop    %r10
pop    %rbp
retq   
nop
nop
nop
nop
nop
nop
nop
nop

00000000000443c0 <jsimd_h2v1_extbgr_merged_upsample_sse2>:
push   %rbp
mov    %rsp,%rax
sub    $0x4,%rsp
and    $0xfffffffffffffff0,%rsp
mov    %rax,(%rsp)
mov    %rsp,%rbp
lea    -0x30(%rbp),%rsp
push   %r10
push   %r11
push   %r12
push   %r13
push   %r14
push   %r15
mov    %rdi,%r10
mov    %rsi,%r11
mov    %rdx,%r12
mov    %rcx,%r13
mov    %r8,%r14
mov    %r9,%r15
push   %rbx
mov    %r10d,%ecx
test   %rcx,%rcx
je     44739 <jsimd_h2v1_extbgr_merged_upsample_sse2.return>
push   %rcx
mov    %r11,%rdi
mov    %r12d,%ecx
mov    (%rdi),%rsi
mov    0x8(%rdi),%rbx
mov    0x10(%rdi),%rdx
mov    %r13,%rdi
mov    (%rsi,%rcx,8),%rsi
mov    (%rbx,%rcx,8),%rbx
mov    (%rdx,%rcx,8),%rdx
mov    (%rdi),%rdi
pop    %rcx

0000000000044427 <jsimd_h2v1_extbgr_merged_upsample_sse2.columnloop>:
movdqa (%rbx),%xmm6
movdqa (%rdx),%xmm7
pxor   %xmm1,%xmm1
pcmpeqw %xmm3,%xmm3
psllw  $0x7,%xmm3
movdqa %xmm6,%xmm4
punpckhbw %xmm1,%xmm6
punpcklbw %xmm1,%xmm4
movdqa %xmm7,%xmm0
punpckhbw %xmm1,%xmm7
punpcklbw %xmm1,%xmm0
paddw  %xmm3,%xmm6
paddw  %xmm3,%xmm4
paddw  %xmm3,%xmm7
paddw  %xmm3,%xmm0
movdqa %xmm6,%xmm5
movdqa %xmm4,%xmm2
paddw  %xmm6,%xmm6
paddw  %xmm4,%xmm4
movdqa %xmm7,%xmm1
movdqa %xmm0,%xmm3
paddw  %xmm7,%xmm7
paddw  %xmm0,%xmm0
pmulhw 0x27884(%rip),%xmm6        # 6bd10 <PW_MF0228>
pmulhw 0x2787c(%rip),%xmm4        # 6bd10 <PW_MF0228>
pmulhw 0x27864(%rip),%xmm7        # 6bd00 <PW_F0402>
pmulhw 0x2785c(%rip),%xmm0        # 6bd00 <PW_F0402>
paddw  0x27884(%rip),%xmm6        # 6bd30 <PW_ONE>
paddw  0x2787c(%rip),%xmm4        # 6bd30 <PW_ONE>
psraw  $0x1,%xmm6
psraw  $0x1,%xmm4
paddw  0x2786a(%rip),%xmm7        # 6bd30 <PW_ONE>
paddw  0x27862(%rip),%xmm0        # 6bd30 <PW_ONE>
psraw  $0x1,%xmm7
psraw  $0x1,%xmm0
paddw  %xmm5,%xmm6
paddw  %xmm2,%xmm4
paddw  %xmm5,%xmm6
paddw  %xmm2,%xmm4
paddw  %xmm1,%xmm7
paddw  %xmm3,%xmm0
movdqa %xmm6,-0x30(%rbp)
movdqa %xmm7,-0x20(%rbp)
movdqa %xmm5,%xmm6
movdqa %xmm2,%xmm7
punpcklwd %xmm1,%xmm5
punpckhwd %xmm1,%xmm6
pmaddwd 0x2780e(%rip),%xmm5        # 6bd20 <PW_MF0344_F0285>
pmaddwd 0x27806(%rip),%xmm6        # 6bd20 <PW_MF0344_F0285>
punpcklwd %xmm3,%xmm2
punpckhwd %xmm3,%xmm7
pmaddwd 0x277f6(%rip),%xmm2        # 6bd20 <PW_MF0344_F0285>
pmaddwd 0x277ee(%rip),%xmm7        # 6bd20 <PW_MF0344_F0285>
paddd  0x27806(%rip),%xmm5        # 6bd40 <PD_ONEHALF>
paddd  0x277fe(%rip),%xmm6        # 6bd40 <PD_ONEHALF>
psrad  $0x10,%xmm5
psrad  $0x10,%xmm6
paddd  0x277ec(%rip),%xmm2        # 6bd40 <PD_ONEHALF>
paddd  0x277e4(%rip),%xmm7        # 6bd40 <PD_ONEHALF>
psrad  $0x10,%xmm2
psrad  $0x10,%xmm7
packssdw %xmm6,%xmm5
packssdw %xmm7,%xmm2
psubw  %xmm1,%xmm5
psubw  %xmm3,%xmm2
movdqa %xmm5,-0x10(%rbp)
mov    $0x2,%al
jmp    4458e <jsimd_h2v1_extbgr_merged_upsample_sse2.Yloop_1st>

000000000004457f <jsimd_h2v1_extbgr_merged_upsample_sse2.Yloop_2nd>:
movdqa -0x20(%rbp),%xmm0
movdqa -0x10(%rbp),%xmm2
movdqa -0x30(%rbp),%xmm4

000000000004458e <jsimd_h2v1_extbgr_merged_upsample_sse2.Yloop_1st>:
movdqa (%rsi),%xmm7
pcmpeqw %xmm6,%xmm6
psrlw  $0x8,%xmm6
pand   %xmm7,%xmm6
psrlw  $0x8,%xmm7
movdqa %xmm0,%xmm1
movdqa %xmm2,%xmm3
movdqa %xmm4,%xmm5
paddw  %xmm6,%xmm0
paddw  %xmm7,%xmm1
packuswb %xmm0,%xmm0
packuswb %xmm1,%xmm1
paddw  %xmm6,%xmm2
paddw  %xmm7,%xmm3
packuswb %xmm2,%xmm2
packuswb %xmm3,%xmm3
paddw  %xmm6,%xmm4
paddw  %xmm7,%xmm5
packuswb %xmm4,%xmm4
packuswb %xmm5,%xmm5
punpcklbw %xmm2,%xmm4
punpcklbw %xmm5,%xmm0
punpcklbw %xmm1,%xmm3
movdqa %xmm4,%xmm6
movdqa %xmm4,%xmm7
punpcklwd %xmm0,%xmm4
punpckhwd %xmm0,%xmm6
psrldq $0x2,%xmm7
psrldq $0x2,%xmm0
movdqa %xmm3,%xmm2
movdqa %xmm3,%xmm5
punpcklwd %xmm7,%xmm3
punpckhwd %xmm7,%xmm2
psrldq $0x2,%xmm5
movdqa %xmm0,%xmm1
punpcklwd %xmm5,%xmm0
punpckhwd %xmm5,%xmm1
pshufd $0x4e,%xmm4,%xmm7
movdqa %xmm0,%xmm5
punpckldq %xmm3,%xmm4
punpckldq %xmm7,%xmm0
punpckhdq %xmm5,%xmm3
pshufd $0x4e,%xmm6,%xmm7
movdqa %xmm1,%xmm5
punpckldq %xmm2,%xmm6
punpckldq %xmm7,%xmm1
punpckhdq %xmm5,%xmm2
punpcklqdq %xmm0,%xmm4
punpcklqdq %xmm6,%xmm3
punpcklqdq %xmm2,%xmm1
cmp    $0x10,%rcx
jb     446b1 <jsimd_h2v1_extbgr_merged_upsample_sse2.column_st32>
test   $0xf,%rdi
jne    4467c <jsimd_h2v1_extbgr_merged_upsample_sse2.out1>
movntdq %xmm4,(%rdi)
movntdq %xmm3,0x10(%rdi)
movntdq %xmm1,0x20(%rdi)
jmp    4468a <jsimd_h2v1_extbgr_merged_upsample_sse2.out0>

000000000004467c <jsimd_h2v1_extbgr_merged_upsample_sse2.out1>:
movdqu %xmm4,(%rdi)
movdqu %xmm3,0x10(%rdi)
movdqu %xmm1,0x20(%rdi)

000000000004468a <jsimd_h2v1_extbgr_merged_upsample_sse2.out0>:
add    $0x30,%rdi
sub    $0x10,%rcx
je     44736 <jsimd_h2v1_extbgr_merged_upsample_sse2.endcolumn>
add    $0x10,%rsi
dec    %al
jne    4457f <jsimd_h2v1_extbgr_merged_upsample_sse2.Yloop_2nd>
add    $0x10,%rbx
add    $0x10,%rdx
jmpq   44427 <jsimd_h2v1_extbgr_merged_upsample_sse2.columnloop>

00000000000446b1 <jsimd_h2v1_extbgr_merged_upsample_sse2.column_st32>:
lea    (%rcx,%rcx,2),%rcx
cmp    $0x20,%rcx
jb     446d2 <jsimd_h2v1_extbgr_merged_upsample_sse2.column_st16>
movdqu %xmm4,(%rdi)
movdqu %xmm3,0x10(%rdi)
add    $0x20,%rdi
movdqa %xmm1,%xmm4
sub    $0x20,%rcx
jmp    446e8 <jsimd_h2v1_extbgr_merged_upsample_sse2.column_st15>

00000000000446d2 <jsimd_h2v1_extbgr_merged_upsample_sse2.column_st16>:
cmp    $0x10,%rcx
jb     446e8 <jsimd_h2v1_extbgr_merged_upsample_sse2.column_st15>
movdqu %xmm4,(%rdi)
add    $0x10,%rdi
movdqa %xmm3,%xmm4
sub    $0x10,%rcx

00000000000446e8 <jsimd_h2v1_extbgr_merged_upsample_sse2.column_st15>:
cmp    $0x8,%rcx
jb     446ff <jsimd_h2v1_extbgr_merged_upsample_sse2.column_st7>
movq   %xmm4,(%rdi)
add    $0x8,%rdi
sub    $0x8,%rcx
psrldq $0x8,%xmm4

00000000000446ff <jsimd_h2v1_extbgr_merged_upsample_sse2.column_st7>:
cmp    $0x4,%rcx
jb     44716 <jsimd_h2v1_extbgr_merged_upsample_sse2.column_st3>
movd   %xmm4,(%rdi)
add    $0x4,%rdi
sub    $0x4,%rcx
psrldq $0x4,%xmm4

0000000000044716 <jsimd_h2v1_extbgr_merged_upsample_sse2.column_st3>:
movd   %xmm4,%eax
cmp    $0x2,%rcx
jb     4472f <jsimd_h2v1_extbgr_merged_upsample_sse2.column_st1>
mov    %ax,(%rdi)
add    $0x2,%rdi
sub    $0x2,%rcx
shr    $0x10,%rax

000000000004472f <jsimd_h2v1_extbgr_merged_upsample_sse2.column_st1>:
test   %rcx,%rcx
je     44736 <jsimd_h2v1_extbgr_merged_upsample_sse2.endcolumn>
mov    %al,(%rdi)

0000000000044736 <jsimd_h2v1_extbgr_merged_upsample_sse2.endcolumn>:
sfence 

0000000000044739 <jsimd_h2v1_extbgr_merged_upsample_sse2.return>:
pop    %rbx
pop    %r15
pop    %r14
pop    %r13
pop    %r12
pop    %r11
pop    %r10
mov    %rbp,%rsp
pop    %rsp
pop    %rbp
retq   
nop
nop
nop
nop

0000000000044750 <jsimd_h2v2_extbgr_merged_upsample_sse2>:
push   %rbp
mov    %rsp,%rax
mov    %rsp,%rbp
push   %r10
push   %r11
push   %r12
push   %r13
push   %r14
push   %r15
mov    %rdi,%r10
mov    %rsi,%r11
mov    %rdx,%r12
mov    %rcx,%r13
mov    %r8,%r14
mov    %r9,%r15
push   %rbx
mov    %r10d,%eax
mov    %r11,%rdi
mov    %r12d,%ecx
mov    (%rdi),%rsi
mov    0x8(%rdi),%rbx
mov    0x10(%rdi),%rdx
mov    %r13,%rdi
lea    (%rsi,%rcx,8),%rsi
push   %rdx
push   %rbx
push   %rsi
mov    %rsp,%rbx
push   %rdi
push   %rcx
push   %rax
mov    %rcx,%rdx
mov    %rdi,%rcx
mov    %rax,%rdi
mov    %rbx,%rsi
callq  443c0 <jsimd_h2v1_extbgr_merged_upsample_sse2>
pop    %rax
pop    %rcx
pop    %rdi
pop    %rsi
pop    %rbx
pop    %rdx
add    $0x8,%rdi
add    $0x8,%rsi
push   %rdx
push   %rbx
push   %rsi
mov    %rsp,%rbx
push   %rdi
push   %rcx
push   %rax
mov    %rcx,%rdx
mov    %rdi,%rcx
mov    %rax,%rdi
mov    %rbx,%rsi
callq  443c0 <jsimd_h2v1_extbgr_merged_upsample_sse2>
pop    %rax
pop    %rcx
pop    %rdi
pop    %rsi
pop    %rbx
pop    %rdx
pop    %rbx
pop    %r15
pop    %r14
pop    %r13
pop    %r12
pop    %r11
pop    %r10
pop    %rbp
retq   
nop
nop
nop
nop
nop
nop
nop
nop

00000000000447f0 <jsimd_h2v1_extbgrx_merged_upsample_sse2>:
push   %rbp
mov    %rsp,%rax
sub    $0x4,%rsp
and    $0xfffffffffffffff0,%rsp
mov    %rax,(%rsp)
mov    %rsp,%rbp
lea    -0x30(%rbp),%rsp
push   %r10
push   %r11
push   %r12
push   %r13
push   %r14
push   %r15
mov    %rdi,%r10
mov    %rsi,%r11
mov    %rdx,%r12
mov    %rcx,%r13
mov    %r8,%r14
mov    %r9,%r15
push   %rbx
mov    %r10d,%ecx
test   %rcx,%rcx
je     44b0e <jsimd_h2v1_extbgrx_merged_upsample_sse2.return>
push   %rcx
mov    %r11,%rdi
mov    %r12d,%ecx
mov    (%rdi),%rsi
mov    0x8(%rdi),%rbx
mov    0x10(%rdi),%rdx
mov    %r13,%rdi
mov    (%rsi,%rcx,8),%rsi
mov    (%rbx,%rcx,8),%rbx
mov    (%rdx,%rcx,8),%rdx
mov    (%rdi),%rdi
pop    %rcx

0000000000044857 <jsimd_h2v1_extbgrx_merged_upsample_sse2.columnloop>:
movdqa (%rbx),%xmm6
movdqa (%rdx),%xmm7
pxor   %xmm1,%xmm1
pcmpeqw %xmm3,%xmm3
psllw  $0x7,%xmm3
movdqa %xmm6,%xmm4
punpckhbw %xmm1,%xmm6
punpcklbw %xmm1,%xmm4
movdqa %xmm7,%xmm0
punpckhbw %xmm1,%xmm7
punpcklbw %xmm1,%xmm0
paddw  %xmm3,%xmm6
paddw  %xmm3,%xmm4
paddw  %xmm3,%xmm7
paddw  %xmm3,%xmm0
movdqa %xmm6,%xmm5
movdqa %xmm4,%xmm2
paddw  %xmm6,%xmm6
paddw  %xmm4,%xmm4
movdqa %xmm7,%xmm1
movdqa %xmm0,%xmm3
paddw  %xmm7,%xmm7
paddw  %xmm0,%xmm0
pmulhw 0x27454(%rip),%xmm6        # 6bd10 <PW_MF0228>
pmulhw 0x2744c(%rip),%xmm4        # 6bd10 <PW_MF0228>
pmulhw 0x27434(%rip),%xmm7        # 6bd00 <PW_F0402>
pmulhw 0x2742c(%rip),%xmm0        # 6bd00 <PW_F0402>
paddw  0x27454(%rip),%xmm6        # 6bd30 <PW_ONE>
paddw  0x2744c(%rip),%xmm4        # 6bd30 <PW_ONE>
psraw  $0x1,%xmm6
psraw  $0x1,%xmm4
paddw  0x2743a(%rip),%xmm7        # 6bd30 <PW_ONE>
paddw  0x27432(%rip),%xmm0        # 6bd30 <PW_ONE>
psraw  $0x1,%xmm7
psraw  $0x1,%xmm0
paddw  %xmm5,%xmm6
paddw  %xmm2,%xmm4
paddw  %xmm5,%xmm6
paddw  %xmm2,%xmm4
paddw  %xmm1,%xmm7
paddw  %xmm3,%xmm0
movdqa %xmm6,-0x30(%rbp)
movdqa %xmm7,-0x20(%rbp)
movdqa %xmm5,%xmm6
movdqa %xmm2,%xmm7
punpcklwd %xmm1,%xmm5
punpckhwd %xmm1,%xmm6
pmaddwd 0x273de(%rip),%xmm5        # 6bd20 <PW_MF0344_F0285>
pmaddwd 0x273d6(%rip),%xmm6        # 6bd20 <PW_MF0344_F0285>
punpcklwd %xmm3,%xmm2
punpckhwd %xmm3,%xmm7
pmaddwd 0x273c6(%rip),%xmm2        # 6bd20 <PW_MF0344_F0285>
pmaddwd 0x273be(%rip),%xmm7        # 6bd20 <PW_MF0344_F0285>
paddd  0x273d6(%rip),%xmm5        # 6bd40 <PD_ONEHALF>
paddd  0x273ce(%rip),%xmm6        # 6bd40 <PD_ONEHALF>
psrad  $0x10,%xmm5
psrad  $0x10,%xmm6
paddd  0x273bc(%rip),%xmm2        # 6bd40 <PD_ONEHALF>
paddd  0x273b4(%rip),%xmm7        # 6bd40 <PD_ONEHALF>
psrad  $0x10,%xmm2
psrad  $0x10,%xmm7
packssdw %xmm6,%xmm5
packssdw %xmm7,%xmm2
psubw  %xmm1,%xmm5
psubw  %xmm3,%xmm2
movdqa %xmm5,-0x10(%rbp)
mov    $0x2,%al
jmp    449be <jsimd_h2v1_extbgrx_merged_upsample_sse2.Yloop_1st>

00000000000449af <jsimd_h2v1_extbgrx_merged_upsample_sse2.Yloop_2nd>:
movdqa -0x20(%rbp),%xmm0
movdqa -0x10(%rbp),%xmm2
movdqa -0x30(%rbp),%xmm4

00000000000449be <jsimd_h2v1_extbgrx_merged_upsample_sse2.Yloop_1st>:
movdqa (%rsi),%xmm7
pcmpeqw %xmm6,%xmm6
psrlw  $0x8,%xmm6
pand   %xmm7,%xmm6
psrlw  $0x8,%xmm7
movdqa %xmm0,%xmm1
movdqa %xmm2,%xmm3
movdqa %xmm4,%xmm5
paddw  %xmm6,%xmm0
paddw  %xmm7,%xmm1
packuswb %xmm0,%xmm0
packuswb %xmm1,%xmm1
paddw  %xmm6,%xmm2
paddw  %xmm7,%xmm3
packuswb %xmm2,%xmm2
packuswb %xmm3,%xmm3
paddw  %xmm6,%xmm4
paddw  %xmm7,%xmm5
packuswb %xmm4,%xmm4
packuswb %xmm5,%xmm5
pcmpeqb %xmm6,%xmm6
pcmpeqb %xmm7,%xmm7
punpcklbw %xmm2,%xmm4
punpcklbw %xmm6,%xmm0
punpcklbw %xmm3,%xmm5
punpcklbw %xmm7,%xmm1
movdqa %xmm4,%xmm2
punpcklwd %xmm0,%xmm4
punpckhwd %xmm0,%xmm2
movdqa %xmm5,%xmm6
punpcklwd %xmm1,%xmm5
punpckhwd %xmm1,%xmm6
movdqa %xmm4,%xmm3
punpckldq %xmm5,%xmm4
punpckhdq %xmm5,%xmm3
movdqa %xmm2,%xmm7
punpckldq %xmm6,%xmm2
punpckhdq %xmm6,%xmm7
cmp    $0x10,%rcx
jb     44ab6 <jsimd_h2v1_extbgrx_merged_upsample_sse2.column_st32>
test   $0xf,%rdi
jne    44a7c <jsimd_h2v1_extbgrx_merged_upsample_sse2.out1>
movntdq %xmm4,(%rdi)
movntdq %xmm3,0x10(%rdi)
movntdq %xmm2,0x20(%rdi)
movntdq %xmm7,0x30(%rdi)
jmp    44a8f <jsimd_h2v1_extbgrx_merged_upsample_sse2.out0>

0000000000044a7c <jsimd_h2v1_extbgrx_merged_upsample_sse2.out1>:
movdqu %xmm4,(%rdi)
movdqu %xmm3,0x10(%rdi)
movdqu %xmm2,0x20(%rdi)
movdqu %xmm7,0x30(%rdi)

0000000000044a8f <jsimd_h2v1_extbgrx_merged_upsample_sse2.out0>:
add    $0x40,%rdi
sub    $0x10,%rcx
je     44b0b <jsimd_h2v1_extbgrx_merged_upsample_sse2.endcolumn>
add    $0x10,%rsi
dec    %al
jne    449af <jsimd_h2v1_extbgrx_merged_upsample_sse2.Yloop_2nd>
add    $0x10,%rbx
add    $0x10,%rdx
jmpq   44857 <jsimd_h2v1_extbgrx_merged_upsample_sse2.columnloop>

0000000000044ab6 <jsimd_h2v1_extbgrx_merged_upsample_sse2.column_st32>:
cmp    $0x8,%rcx
jb     44ad5 <jsimd_h2v1_extbgrx_merged_upsample_sse2.column_st16>
movdqu %xmm4,(%rdi)
movdqu %xmm3,0x10(%rdi)
add    $0x20,%rdi
movdqa %xmm2,%xmm4
movdqa %xmm7,%xmm3
sub    $0x8,%rcx

0000000000044ad5 <jsimd_h2v1_extbgrx_merged_upsample_sse2.column_st16>:
cmp    $0x4,%rcx
jb     44aeb <jsimd_h2v1_extbgrx_merged_upsample_sse2.column_st15>
movdqu %xmm4,(%rdi)
add    $0x10,%rdi
movdqa %xmm3,%xmm4
sub    $0x4,%rcx

0000000000044aeb <jsimd_h2v1_extbgrx_merged_upsample_sse2.column_st15>:
cmp    $0x2,%rcx
jb     44b02 <jsimd_h2v1_extbgrx_merged_upsample_sse2.column_st7>
movq   %xmm4,(%rdi)
add    $0x8,%rdi
sub    $0x2,%rcx
psrldq $0x8,%xmm4

0000000000044b02 <jsimd_h2v1_extbgrx_merged_upsample_sse2.column_st7>:
test   %rcx,%rcx
je     44b0b <jsimd_h2v1_extbgrx_merged_upsample_sse2.endcolumn>
movd   %xmm4,(%rdi)

0000000000044b0b <jsimd_h2v1_extbgrx_merged_upsample_sse2.endcolumn>:
sfence 

0000000000044b0e <jsimd_h2v1_extbgrx_merged_upsample_sse2.return>:
pop    %rbx
pop    %r15
pop    %r14
pop    %r13
pop    %r12
pop    %r11
pop    %r10
mov    %rbp,%rsp
pop    %rsp
pop    %rbp
retq   
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop

0000000000044b30 <jsimd_h2v2_extbgrx_merged_upsample_sse2>:
push   %rbp
mov    %rsp,%rax
mov    %rsp,%rbp
push   %r10
push   %r11
push   %r12
push   %r13
push   %r14
push   %r15
mov    %rdi,%r10
mov    %rsi,%r11
mov    %rdx,%r12
mov    %rcx,%r13
mov    %r8,%r14
mov    %r9,%r15
push   %rbx
mov    %r10d,%eax
mov    %r11,%rdi
mov    %r12d,%ecx
mov    (%rdi),%rsi
mov    0x8(%rdi),%rbx
mov    0x10(%rdi),%rdx
mov    %r13,%rdi
lea    (%rsi,%rcx,8),%rsi
push   %rdx
push   %rbx
push   %rsi
mov    %rsp,%rbx
push   %rdi
push   %rcx
push   %rax
mov    %rcx,%rdx
mov    %rdi,%rcx
mov    %rax,%rdi
mov    %rbx,%rsi
callq  447f0 <jsimd_h2v1_extbgrx_merged_upsample_sse2>
pop    %rax
pop    %rcx
pop    %rdi
pop    %rsi
pop    %rbx
pop    %rdx
add    $0x8,%rdi
add    $0x8,%rsi
push   %rdx
push   %rbx
push   %rsi
mov    %rsp,%rbx
push   %rdi
push   %rcx
push   %rax
mov    %rcx,%rdx
mov    %rdi,%rcx
mov    %rax,%rdi
mov    %rbx,%rsi
callq  447f0 <jsimd_h2v1_extbgrx_merged_upsample_sse2>
pop    %rax
pop    %rcx
pop    %rdi
pop    %rsi
pop    %rbx
pop    %rdx
pop    %rbx
pop    %r15
pop    %r14
pop    %r13
pop    %r12
pop    %r11
pop    %r10
pop    %rbp
retq   
nop
nop
nop
nop
nop
nop
nop
nop

0000000000044bd0 <jsimd_h2v1_extxbgr_merged_upsample_sse2>:
push   %rbp
mov    %rsp,%rax
sub    $0x4,%rsp
and    $0xfffffffffffffff0,%rsp
mov    %rax,(%rsp)
mov    %rsp,%rbp
lea    -0x30(%rbp),%rsp
push   %r10
push   %r11
push   %r12
push   %r13
push   %r14
push   %r15
mov    %rdi,%r10
mov    %rsi,%r11
mov    %rdx,%r12
mov    %rcx,%r13
mov    %r8,%r14
mov    %r9,%r15
push   %rbx
mov    %r10d,%ecx
test   %rcx,%rcx
je     44eee <jsimd_h2v1_extxbgr_merged_upsample_sse2.return>
push   %rcx
mov    %r11,%rdi
mov    %r12d,%ecx
mov    (%rdi),%rsi
mov    0x8(%rdi),%rbx
mov    0x10(%rdi),%rdx
mov    %r13,%rdi
mov    (%rsi,%rcx,8),%rsi
mov    (%rbx,%rcx,8),%rbx
mov    (%rdx,%rcx,8),%rdx
mov    (%rdi),%rdi
pop    %rcx

0000000000044c37 <jsimd_h2v1_extxbgr_merged_upsample_sse2.columnloop>:
movdqa (%rbx),%xmm6
movdqa (%rdx),%xmm7
pxor   %xmm1,%xmm1
pcmpeqw %xmm3,%xmm3
psllw  $0x7,%xmm3
movdqa %xmm6,%xmm4
punpckhbw %xmm1,%xmm6
punpcklbw %xmm1,%xmm4
movdqa %xmm7,%xmm0
punpckhbw %xmm1,%xmm7
punpcklbw %xmm1,%xmm0
paddw  %xmm3,%xmm6
paddw  %xmm3,%xmm4
paddw  %xmm3,%xmm7
paddw  %xmm3,%xmm0
movdqa %xmm6,%xmm5
movdqa %xmm4,%xmm2
paddw  %xmm6,%xmm6
paddw  %xmm4,%xmm4
movdqa %xmm7,%xmm1
movdqa %xmm0,%xmm3
paddw  %xmm7,%xmm7
paddw  %xmm0,%xmm0
pmulhw 0x27074(%rip),%xmm6        # 6bd10 <PW_MF0228>
pmulhw 0x2706c(%rip),%xmm4        # 6bd10 <PW_MF0228>
pmulhw 0x27054(%rip),%xmm7        # 6bd00 <PW_F0402>
pmulhw 0x2704c(%rip),%xmm0        # 6bd00 <PW_F0402>
paddw  0x27074(%rip),%xmm6        # 6bd30 <PW_ONE>
paddw  0x2706c(%rip),%xmm4        # 6bd30 <PW_ONE>
psraw  $0x1,%xmm6
psraw  $0x1,%xmm4
paddw  0x2705a(%rip),%xmm7        # 6bd30 <PW_ONE>
paddw  0x27052(%rip),%xmm0        # 6bd30 <PW_ONE>
psraw  $0x1,%xmm7
psraw  $0x1,%xmm0
paddw  %xmm5,%xmm6
paddw  %xmm2,%xmm4
paddw  %xmm5,%xmm6
paddw  %xmm2,%xmm4
paddw  %xmm1,%xmm7
paddw  %xmm3,%xmm0
movdqa %xmm6,-0x30(%rbp)
movdqa %xmm7,-0x20(%rbp)
movdqa %xmm5,%xmm6
movdqa %xmm2,%xmm7
punpcklwd %xmm1,%xmm5
punpckhwd %xmm1,%xmm6
pmaddwd 0x26ffe(%rip),%xmm5        # 6bd20 <PW_MF0344_F0285>
pmaddwd 0x26ff6(%rip),%xmm6        # 6bd20 <PW_MF0344_F0285>
punpcklwd %xmm3,%xmm2
punpckhwd %xmm3,%xmm7
pmaddwd 0x26fe6(%rip),%xmm2        # 6bd20 <PW_MF0344_F0285>
pmaddwd 0x26fde(%rip),%xmm7        # 6bd20 <PW_MF0344_F0285>
paddd  0x26ff6(%rip),%xmm5        # 6bd40 <PD_ONEHALF>
paddd  0x26fee(%rip),%xmm6        # 6bd40 <PD_ONEHALF>
psrad  $0x10,%xmm5
psrad  $0x10,%xmm6
paddd  0x26fdc(%rip),%xmm2        # 6bd40 <PD_ONEHALF>
paddd  0x26fd4(%rip),%xmm7        # 6bd40 <PD_ONEHALF>
psrad  $0x10,%xmm2
psrad  $0x10,%xmm7
packssdw %xmm6,%xmm5
packssdw %xmm7,%xmm2
psubw  %xmm1,%xmm5
psubw  %xmm3,%xmm2
movdqa %xmm5,-0x10(%rbp)
mov    $0x2,%al
jmp    44d9e <jsimd_h2v1_extxbgr_merged_upsample_sse2.Yloop_1st>

0000000000044d8f <jsimd_h2v1_extxbgr_merged_upsample_sse2.Yloop_2nd>:
movdqa -0x20(%rbp),%xmm0
movdqa -0x10(%rbp),%xmm2
movdqa -0x30(%rbp),%xmm4

0000000000044d9e <jsimd_h2v1_extxbgr_merged_upsample_sse2.Yloop_1st>:
movdqa (%rsi),%xmm7
pcmpeqw %xmm6,%xmm6
psrlw  $0x8,%xmm6
pand   %xmm7,%xmm6
psrlw  $0x8,%xmm7
movdqa %xmm0,%xmm1
movdqa %xmm2,%xmm3
movdqa %xmm4,%xmm5
paddw  %xmm6,%xmm0
paddw  %xmm7,%xmm1
packuswb %xmm0,%xmm0
packuswb %xmm1,%xmm1
paddw  %xmm6,%xmm2
paddw  %xmm7,%xmm3
packuswb %xmm2,%xmm2
packuswb %xmm3,%xmm3
paddw  %xmm6,%xmm4
paddw  %xmm7,%xmm5
packuswb %xmm4,%xmm4
packuswb %xmm5,%xmm5
pcmpeqb %xmm6,%xmm6
pcmpeqb %xmm7,%xmm7
punpcklbw %xmm4,%xmm6
punpcklbw %xmm0,%xmm2
punpcklbw %xmm5,%xmm7
punpcklbw %xmm1,%xmm3
movdqa %xmm6,%xmm4
punpcklwd %xmm2,%xmm6
punpckhwd %xmm2,%xmm4
movdqa %xmm7,%xmm0
punpcklwd %xmm3,%xmm7
punpckhwd %xmm3,%xmm0
movdqa %xmm6,%xmm5
punpckldq %xmm7,%xmm6
punpckhdq %xmm7,%xmm5
movdqa %xmm4,%xmm1
punpckldq %xmm0,%xmm4
punpckhdq %xmm0,%xmm1
cmp    $0x10,%rcx
jb     44e96 <jsimd_h2v1_extxbgr_merged_upsample_sse2.column_st32>
test   $0xf,%rdi
jne    44e5c <jsimd_h2v1_extxbgr_merged_upsample_sse2.out1>
movntdq %xmm6,(%rdi)
movntdq %xmm5,0x10(%rdi)
movntdq %xmm4,0x20(%rdi)
movntdq %xmm1,0x30(%rdi)
jmp    44e6f <jsimd_h2v1_extxbgr_merged_upsample_sse2.out0>

0000000000044e5c <jsimd_h2v1_extxbgr_merged_upsample_sse2.out1>:
movdqu %xmm6,(%rdi)
movdqu %xmm5,0x10(%rdi)
movdqu %xmm4,0x20(%rdi)
movdqu %xmm1,0x30(%rdi)

0000000000044e6f <jsimd_h2v1_extxbgr_merged_upsample_sse2.out0>:
add    $0x40,%rdi
sub    $0x10,%rcx
je     44eeb <jsimd_h2v1_extxbgr_merged_upsample_sse2.endcolumn>
add    $0x10,%rsi
dec    %al
jne    44d8f <jsimd_h2v1_extxbgr_merged_upsample_sse2.Yloop_2nd>
add    $0x10,%rbx
add    $0x10,%rdx
jmpq   44c37 <jsimd_h2v1_extxbgr_merged_upsample_sse2.columnloop>

0000000000044e96 <jsimd_h2v1_extxbgr_merged_upsample_sse2.column_st32>:
cmp    $0x8,%rcx
jb     44eb5 <jsimd_h2v1_extxbgr_merged_upsample_sse2.column_st16>
movdqu %xmm6,(%rdi)
movdqu %xmm5,0x10(%rdi)
add    $0x20,%rdi
movdqa %xmm4,%xmm6
movdqa %xmm1,%xmm5
sub    $0x8,%rcx

0000000000044eb5 <jsimd_h2v1_extxbgr_merged_upsample_sse2.column_st16>:
cmp    $0x4,%rcx
jb     44ecb <jsimd_h2v1_extxbgr_merged_upsample_sse2.column_st15>
movdqu %xmm6,(%rdi)
add    $0x10,%rdi
movdqa %xmm5,%xmm6
sub    $0x4,%rcx

0000000000044ecb <jsimd_h2v1_extxbgr_merged_upsample_sse2.column_st15>:
cmp    $0x2,%rcx
jb     44ee2 <jsimd_h2v1_extxbgr_merged_upsample_sse2.column_st7>
movq   %xmm6,(%rdi)
add    $0x8,%rdi
sub    $0x2,%rcx
psrldq $0x8,%xmm6

0000000000044ee2 <jsimd_h2v1_extxbgr_merged_upsample_sse2.column_st7>:
test   %rcx,%rcx
je     44eeb <jsimd_h2v1_extxbgr_merged_upsample_sse2.endcolumn>
movd   %xmm6,(%rdi)

0000000000044eeb <jsimd_h2v1_extxbgr_merged_upsample_sse2.endcolumn>:
sfence 

0000000000044eee <jsimd_h2v1_extxbgr_merged_upsample_sse2.return>:
pop    %rbx
pop    %r15
pop    %r14
pop    %r13
pop    %r12
pop    %r11
pop    %r10
mov    %rbp,%rsp
pop    %rsp
pop    %rbp
retq   
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop

0000000000044f10 <jsimd_h2v2_extxbgr_merged_upsample_sse2>:
push   %rbp
mov    %rsp,%rax
mov    %rsp,%rbp
push   %r10
push   %r11
push   %r12
push   %r13
push   %r14
push   %r15
mov    %rdi,%r10
mov    %rsi,%r11
mov    %rdx,%r12
mov    %rcx,%r13
mov    %r8,%r14
mov    %r9,%r15
push   %rbx
mov    %r10d,%eax
mov    %r11,%rdi
mov    %r12d,%ecx
mov    (%rdi),%rsi
mov    0x8(%rdi),%rbx
mov    0x10(%rdi),%rdx
mov    %r13,%rdi
lea    (%rsi,%rcx,8),%rsi
push   %rdx
push   %rbx
push   %rsi
mov    %rsp,%rbx
push   %rdi
push   %rcx
push   %rax
mov    %rcx,%rdx
mov    %rdi,%rcx
mov    %rax,%rdi
mov    %rbx,%rsi
callq  44bd0 <jsimd_h2v1_extxbgr_merged_upsample_sse2>
pop    %rax
pop    %rcx
pop    %rdi
pop    %rsi
pop    %rbx
pop    %rdx
add    $0x8,%rdi
add    $0x8,%rsi
push   %rdx
push   %rbx
push   %rsi
mov    %rsp,%rbx
push   %rdi
push   %rcx
push   %rax
mov    %rcx,%rdx
mov    %rdi,%rcx
mov    %rax,%rdi
mov    %rbx,%rsi
callq  44bd0 <jsimd_h2v1_extxbgr_merged_upsample_sse2>
pop    %rax
pop    %rcx
pop    %rdi
pop    %rsi
pop    %rbx
pop    %rdx
pop    %rbx
pop    %r15
pop    %r14
pop    %r13
pop    %r12
pop    %r11
pop    %r10
pop    %rbp
retq   
nop
nop
nop
nop
nop
nop
nop
nop

0000000000044fb0 <jsimd_h2v1_extxrgb_merged_upsample_sse2>:
push   %rbp
mov    %rsp,%rax
sub    $0x4,%rsp
and    $0xfffffffffffffff0,%rsp
mov    %rax,(%rsp)
mov    %rsp,%rbp
lea    -0x30(%rbp),%rsp
push   %r10
push   %r11
push   %r12
push   %r13
push   %r14
push   %r15
mov    %rdi,%r10
mov    %rsi,%r11
mov    %rdx,%r12
mov    %rcx,%r13
mov    %r8,%r14
mov    %r9,%r15
push   %rbx
mov    %r10d,%ecx
test   %rcx,%rcx
je     452ce <jsimd_h2v1_extxrgb_merged_upsample_sse2.return>
push   %rcx
mov    %r11,%rdi
mov    %r12d,%ecx
mov    (%rdi),%rsi
mov    0x8(%rdi),%rbx
mov    0x10(%rdi),%rdx
mov    %r13,%rdi
mov    (%rsi,%rcx,8),%rsi
mov    (%rbx,%rcx,8),%rbx
mov    (%rdx,%rcx,8),%rdx
mov    (%rdi),%rdi
pop    %rcx

0000000000045017 <jsimd_h2v1_extxrgb_merged_upsample_sse2.columnloop>:
movdqa (%rbx),%xmm6
movdqa (%rdx),%xmm7
pxor   %xmm1,%xmm1
pcmpeqw %xmm3,%xmm3
psllw  $0x7,%xmm3
movdqa %xmm6,%xmm4
punpckhbw %xmm1,%xmm6
punpcklbw %xmm1,%xmm4
movdqa %xmm7,%xmm0
punpckhbw %xmm1,%xmm7
punpcklbw %xmm1,%xmm0
paddw  %xmm3,%xmm6
paddw  %xmm3,%xmm4
paddw  %xmm3,%xmm7
paddw  %xmm3,%xmm0
movdqa %xmm6,%xmm5
movdqa %xmm4,%xmm2
paddw  %xmm6,%xmm6
paddw  %xmm4,%xmm4
movdqa %xmm7,%xmm1
movdqa %xmm0,%xmm3
paddw  %xmm7,%xmm7
paddw  %xmm0,%xmm0
pmulhw 0x26c94(%rip),%xmm6        # 6bd10 <PW_MF0228>
pmulhw 0x26c8c(%rip),%xmm4        # 6bd10 <PW_MF0228>
pmulhw 0x26c74(%rip),%xmm7        # 6bd00 <PW_F0402>
pmulhw 0x26c6c(%rip),%xmm0        # 6bd00 <PW_F0402>
paddw  0x26c94(%rip),%xmm6        # 6bd30 <PW_ONE>
paddw  0x26c8c(%rip),%xmm4        # 6bd30 <PW_ONE>
psraw  $0x1,%xmm6
psraw  $0x1,%xmm4
paddw  0x26c7a(%rip),%xmm7        # 6bd30 <PW_ONE>
paddw  0x26c72(%rip),%xmm0        # 6bd30 <PW_ONE>
psraw  $0x1,%xmm7
psraw  $0x1,%xmm0
paddw  %xmm5,%xmm6
paddw  %xmm2,%xmm4
paddw  %xmm5,%xmm6
paddw  %xmm2,%xmm4
paddw  %xmm1,%xmm7
paddw  %xmm3,%xmm0
movdqa %xmm6,-0x30(%rbp)
movdqa %xmm7,-0x20(%rbp)
movdqa %xmm5,%xmm6
movdqa %xmm2,%xmm7
punpcklwd %xmm1,%xmm5
punpckhwd %xmm1,%xmm6
pmaddwd 0x26c1e(%rip),%xmm5        # 6bd20 <PW_MF0344_F0285>
pmaddwd 0x26c16(%rip),%xmm6        # 6bd20 <PW_MF0344_F0285>
punpcklwd %xmm3,%xmm2
punpckhwd %xmm3,%xmm7
pmaddwd 0x26c06(%rip),%xmm2        # 6bd20 <PW_MF0344_F0285>
pmaddwd 0x26bfe(%rip),%xmm7        # 6bd20 <PW_MF0344_F0285>
paddd  0x26c16(%rip),%xmm5        # 6bd40 <PD_ONEHALF>
paddd  0x26c0e(%rip),%xmm6        # 6bd40 <PD_ONEHALF>
psrad  $0x10,%xmm5
psrad  $0x10,%xmm6
paddd  0x26bfc(%rip),%xmm2        # 6bd40 <PD_ONEHALF>
paddd  0x26bf4(%rip),%xmm7        # 6bd40 <PD_ONEHALF>
psrad  $0x10,%xmm2
psrad  $0x10,%xmm7
packssdw %xmm6,%xmm5
packssdw %xmm7,%xmm2
psubw  %xmm1,%xmm5
psubw  %xmm3,%xmm2
movdqa %xmm5,-0x10(%rbp)
mov    $0x2,%al
jmp    4517e <jsimd_h2v1_extxrgb_merged_upsample_sse2.Yloop_1st>

000000000004516f <jsimd_h2v1_extxrgb_merged_upsample_sse2.Yloop_2nd>:
movdqa -0x20(%rbp),%xmm0
movdqa -0x10(%rbp),%xmm2
movdqa -0x30(%rbp),%xmm4

000000000004517e <jsimd_h2v1_extxrgb_merged_upsample_sse2.Yloop_1st>:
movdqa (%rsi),%xmm7
pcmpeqw %xmm6,%xmm6
psrlw  $0x8,%xmm6
pand   %xmm7,%xmm6
psrlw  $0x8,%xmm7
movdqa %xmm0,%xmm1
movdqa %xmm2,%xmm3
movdqa %xmm4,%xmm5
paddw  %xmm6,%xmm0
paddw  %xmm7,%xmm1
packuswb %xmm0,%xmm0
packuswb %xmm1,%xmm1
paddw  %xmm6,%xmm2
paddw  %xmm7,%xmm3
packuswb %xmm2,%xmm2
packuswb %xmm3,%xmm3
paddw  %xmm6,%xmm4
paddw  %xmm7,%xmm5
packuswb %xmm4,%xmm4
packuswb %xmm5,%xmm5
pcmpeqb %xmm6,%xmm6
pcmpeqb %xmm7,%xmm7
punpcklbw %xmm0,%xmm6
punpcklbw %xmm4,%xmm2
punpcklbw %xmm1,%xmm7
punpcklbw %xmm5,%xmm3
movdqa %xmm6,%xmm0
punpcklwd %xmm2,%xmm6
punpckhwd %xmm2,%xmm0
movdqa %xmm7,%xmm4
punpcklwd %xmm3,%xmm7
punpckhwd %xmm3,%xmm4
movdqa %xmm6,%xmm1
punpckldq %xmm7,%xmm6
punpckhdq %xmm7,%xmm1
movdqa %xmm0,%xmm5
punpckldq %xmm4,%xmm0
punpckhdq %xmm4,%xmm5
cmp    $0x10,%rcx
jb     45276 <jsimd_h2v1_extxrgb_merged_upsample_sse2.column_st32>
test   $0xf,%rdi
jne    4523c <jsimd_h2v1_extxrgb_merged_upsample_sse2.out1>
movntdq %xmm6,(%rdi)
movntdq %xmm1,0x10(%rdi)
movntdq %xmm0,0x20(%rdi)
movntdq %xmm5,0x30(%rdi)
jmp    4524f <jsimd_h2v1_extxrgb_merged_upsample_sse2.out0>

000000000004523c <jsimd_h2v1_extxrgb_merged_upsample_sse2.out1>:
movdqu %xmm6,(%rdi)
movdqu %xmm1,0x10(%rdi)
movdqu %xmm0,0x20(%rdi)
movdqu %xmm5,0x30(%rdi)

000000000004524f <jsimd_h2v1_extxrgb_merged_upsample_sse2.out0>:
add    $0x40,%rdi
sub    $0x10,%rcx
je     452cb <jsimd_h2v1_extxrgb_merged_upsample_sse2.endcolumn>
add    $0x10,%rsi
dec    %al
jne    4516f <jsimd_h2v1_extxrgb_merged_upsample_sse2.Yloop_2nd>
add    $0x10,%rbx
add    $0x10,%rdx
jmpq   45017 <jsimd_h2v1_extxrgb_merged_upsample_sse2.columnloop>

0000000000045276 <jsimd_h2v1_extxrgb_merged_upsample_sse2.column_st32>:
cmp    $0x8,%rcx
jb     45295 <jsimd_h2v1_extxrgb_merged_upsample_sse2.column_st16>
movdqu %xmm6,(%rdi)
movdqu %xmm1,0x10(%rdi)
add    $0x20,%rdi
movdqa %xmm0,%xmm6
movdqa %xmm5,%xmm1
sub    $0x8,%rcx

0000000000045295 <jsimd_h2v1_extxrgb_merged_upsample_sse2.column_st16>:
cmp    $0x4,%rcx
jb     452ab <jsimd_h2v1_extxrgb_merged_upsample_sse2.column_st15>
movdqu %xmm6,(%rdi)
add    $0x10,%rdi
movdqa %xmm1,%xmm6
sub    $0x4,%rcx

00000000000452ab <jsimd_h2v1_extxrgb_merged_upsample_sse2.column_st15>:
cmp    $0x2,%rcx
jb     452c2 <jsimd_h2v1_extxrgb_merged_upsample_sse2.column_st7>
movq   %xmm6,(%rdi)
add    $0x8,%rdi
sub    $0x2,%rcx
psrldq $0x8,%xmm6

00000000000452c2 <jsimd_h2v1_extxrgb_merged_upsample_sse2.column_st7>:
test   %rcx,%rcx
je     452cb <jsimd_h2v1_extxrgb_merged_upsample_sse2.endcolumn>
movd   %xmm6,(%rdi)

00000000000452cb <jsimd_h2v1_extxrgb_merged_upsample_sse2.endcolumn>:
sfence 

00000000000452ce <jsimd_h2v1_extxrgb_merged_upsample_sse2.return>:
pop    %rbx
pop    %r15
pop    %r14
pop    %r13
pop    %r12
pop    %r11
pop    %r10
mov    %rbp,%rsp
pop    %rsp
pop    %rbp
retq   
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop

00000000000452f0 <jsimd_h2v2_extxrgb_merged_upsample_sse2>:
push   %rbp
mov    %rsp,%rax
mov    %rsp,%rbp
push   %r10
push   %r11
push   %r12
push   %r13
push   %r14
push   %r15
mov    %rdi,%r10
mov    %rsi,%r11
mov    %rdx,%r12
mov    %rcx,%r13
mov    %r8,%r14
mov    %r9,%r15
push   %rbx
mov    %r10d,%eax
mov    %r11,%rdi
mov    %r12d,%ecx
mov    (%rdi),%rsi
mov    0x8(%rdi),%rbx
mov    0x10(%rdi),%rdx
mov    %r13,%rdi
lea    (%rsi,%rcx,8),%rsi
push   %rdx
push   %rbx
push   %rsi
mov    %rsp,%rbx
push   %rdi
push   %rcx
push   %rax
mov    %rcx,%rdx
mov    %rdi,%rcx
mov    %rax,%rdi
mov    %rbx,%rsi
callq  44fb0 <jsimd_h2v1_extxrgb_merged_upsample_sse2>
pop    %rax
pop    %rcx
pop    %rdi
pop    %rsi
pop    %rbx
pop    %rdx
add    $0x8,%rdi
add    $0x8,%rsi
push   %rdx
push   %rbx
push   %rsi
mov    %rsp,%rbx
push   %rdi
push   %rcx
push   %rax
mov    %rcx,%rdx
mov    %rdi,%rcx
mov    %rax,%rdi
mov    %rbx,%rsi
callq  44fb0 <jsimd_h2v1_extxrgb_merged_upsample_sse2>
pop    %rax
pop    %rcx
pop    %rdi
pop    %rsi
pop    %rbx
pop    %rdx
pop    %rbx
pop    %r15
pop    %r14
pop    %r13
pop    %r12
pop    %r11
pop    %r10
pop    %rbp
retq   
nop
nop
nop
nop
nop
nop
nop
nop

0000000000045390 <jsimd_h2v1_fancy_upsample_sse2>:
push   %rbp
mov    %rsp,%rax
mov    %rsp,%rbp
push   %r10
push   %r11
push   %r12
push   %r13
push   %r14
push   %r15
mov    %rdi,%r10
mov    %rsi,%r11
mov    %rdx,%r12
mov    %rcx,%r13
mov    %r8,%r14
mov    %r9,%r15
mov    %r11d,%eax
test   %rax,%rax
je     45512 <jsimd_h2v1_fancy_upsample_sse2.return>
mov    %r10,%rcx
test   %rcx,%rcx
je     45512 <jsimd_h2v1_fancy_upsample_sse2.return>
mov    %r12,%rsi
mov    %r13,%rdi
mov    (%rdi),%rdi

00000000000453d6 <jsimd_h2v1_fancy_upsample_sse2.rowloop>:
push   %rax
push   %rdi
push   %rsi
mov    (%rsi),%rsi
mov    (%rdi),%rdi
test   $0xf,%rax
je     453ee <jsimd_h2v1_fancy_upsample_sse2.skip>
mov    -0x1(%rsi,%rax,1),%dl
mov    %dl,(%rsi,%rax,1)

00000000000453ee <jsimd_h2v1_fancy_upsample_sse2.skip>:
pxor   %xmm0,%xmm0
pcmpeqb %xmm7,%xmm7
psrldq $0xf,%xmm7
pand   (%rsi),%xmm7
add    $0xf,%rax
and    $0xfffffffffffffff0,%rax
cmp    $0x10,%rax
ja     4541c <jsimd_h2v1_fancy_upsample_sse2.columnloop>

000000000004540d <jsimd_h2v1_fancy_upsample_sse2.columnloop_last>:
pcmpeqb %xmm6,%xmm6
pslldq $0xf,%xmm6
pand   (%rsi),%xmm6
jmp    45426 <jsimd_h2v1_fancy_upsample_sse2.upsample>

000000000004541c <jsimd_h2v1_fancy_upsample_sse2.columnloop>:
movdqa 0x10(%rsi),%xmm6
pslldq $0xf,%xmm6

0000000000045426 <jsimd_h2v1_fancy_upsample_sse2.upsample>:
movdqa (%rsi),%xmm1
movdqa %xmm1,%xmm2
movdqa %xmm1,%xmm3
pslldq $0x1,%xmm2
psrldq $0x1,%xmm3
por    %xmm7,%xmm2
por    %xmm6,%xmm3
movdqa %xmm1,%xmm7
psrldq $0xf,%xmm7
movdqa %xmm1,%xmm4
punpcklbw %xmm0,%xmm1
punpckhbw %xmm0,%xmm4
movdqa %xmm2,%xmm5
punpcklbw %xmm0,%xmm2
punpckhbw %xmm0,%xmm5
movdqa %xmm3,%xmm6
punpcklbw %xmm0,%xmm3
punpckhbw %xmm0,%xmm6
pmullw 0x268f7(%rip),%xmm1        # 6bd70 <PW_THREE>
pmullw 0x268ef(%rip),%xmm4        # 6bd70 <PW_THREE>
paddw  0x268c7(%rip),%xmm2        # 6bd50 <PW_ONE>
paddw  0x268bf(%rip),%xmm5        # 6bd50 <PW_ONE>
paddw  0x268c7(%rip),%xmm3        # 6bd60 <PW_TWO>
paddw  0x268bf(%rip),%xmm6        # 6bd60 <PW_TWO>
paddw  %xmm1,%xmm2
paddw  %xmm4,%xmm5
psrlw  $0x2,%xmm2
psrlw  $0x2,%xmm5
paddw  %xmm1,%xmm3
paddw  %xmm4,%xmm6
psrlw  $0x2,%xmm3
psrlw  $0x2,%xmm6
psllw  $0x8,%xmm3
psllw  $0x8,%xmm6
por    %xmm3,%xmm2
por    %xmm6,%xmm5
movdqa %xmm2,(%rdi)
movdqa %xmm5,0x10(%rdi)
sub    $0x10,%rax
add    $0x10,%rsi
add    $0x20,%rdi
cmp    $0x10,%rax
ja     4541c <jsimd_h2v1_fancy_upsample_sse2.columnloop>
test   %eax,%eax
jne    4540d <jsimd_h2v1_fancy_upsample_sse2.columnloop_last>
pop    %rsi
pop    %rdi
pop    %rax
add    $0x8,%rsi
add    $0x8,%rdi
dec    %rcx
jg     453d6 <jsimd_h2v1_fancy_upsample_sse2.rowloop>

0000000000045512 <jsimd_h2v1_fancy_upsample_sse2.return>:
pop    %r15
pop    %r14
pop    %r13
pop    %r12
pop    %r11
pop    %r10
pop    %rbp
retq   

0000000000045520 <jsimd_h2v2_fancy_upsample_sse2>:
push   %rbp
mov    %rsp,%rax
sub    $0x4,%rsp
and    $0xfffffffffffffff0,%rsp
mov    %rax,(%rsp)
mov    %rsp,%rbp
lea    -0x40(%rbp),%rsp
push   %r10
push   %r11
push   %r12
push   %r13
push   %r14
push   %r15
mov    %rdi,%r10
mov    %rsi,%r11
mov    %rdx,%r12
mov    %rcx,%r13
mov    %r8,%r14
mov    %r9,%r15
push   %rbx
mov    %r11d,%eax
test   %rax,%rax
je     458bd <jsimd_h2v2_fancy_upsample_sse2.return>
mov    %r10,%rcx
test   %rcx,%rcx
je     458bd <jsimd_h2v2_fancy_upsample_sse2.return>
mov    %r12,%rsi
mov    %r13,%rdi
mov    (%rdi),%rdi

0000000000045577 <jsimd_h2v2_fancy_upsample_sse2.rowloop>:
push   %rax
push   %rcx
push   %rdi
push   %rsi
mov    -0x8(%rsi),%rcx
mov    (%rsi),%rbx
mov    0x8(%rsi),%rsi
mov    (%rdi),%rdx
mov    0x8(%rdi),%rdi
test   $0xf,%rax
je     455ac <jsimd_h2v2_fancy_upsample_sse2.skip>
push   %rdx
mov    -0x1(%rcx,%rax,1),%dl
mov    %dl,(%rcx,%rax,1)
mov    -0x1(%rbx,%rax,1),%dl
mov    %dl,(%rbx,%rax,1)
mov    -0x1(%rsi,%rax,1),%dl
mov    %dl,(%rsi,%rax,1)
pop    %rdx

00000000000455ac <jsimd_h2v2_fancy_upsample_sse2.skip>:
movdqa (%rbx),%xmm0
movdqa (%rcx),%xmm1
movdqa (%rsi),%xmm2
pxor   %xmm3,%xmm3
movdqa %xmm0,%xmm4
punpcklbw %xmm3,%xmm0
punpckhbw %xmm3,%xmm4
movdqa %xmm1,%xmm5
punpcklbw %xmm3,%xmm1
punpckhbw %xmm3,%xmm5
movdqa %xmm2,%xmm6
punpcklbw %xmm3,%xmm2
punpckhbw %xmm3,%xmm6
pmullw 0x26788(%rip),%xmm0        # 6bd70 <PW_THREE>
pmullw 0x26780(%rip),%xmm4        # 6bd70 <PW_THREE>
pcmpeqb %xmm7,%xmm7
psrldq $0xe,%xmm7
paddw  %xmm0,%xmm1
paddw  %xmm4,%xmm5
paddw  %xmm0,%xmm2
paddw  %xmm4,%xmm6
movdqa %xmm1,(%rdx)
movdqa %xmm5,0x10(%rdx)
movdqa %xmm2,(%rdi)
movdqa %xmm6,0x10(%rdi)
pand   %xmm7,%xmm1
pand   %xmm7,%xmm2
movdqa %xmm1,-0x40(%rbp)
movdqa %xmm2,-0x30(%rbp)
add    $0xf,%rax
and    $0xfffffffffffffff0,%rax
cmp    $0x10,%rax
ja     45661 <jsimd_h2v2_fancy_upsample_sse2.columnloop>

000000000004563b <jsimd_h2v2_fancy_upsample_sse2.columnloop_last>:
pcmpeqb %xmm1,%xmm1
pslldq $0xe,%xmm1
movdqa %xmm1,%xmm2
pand   0x10(%rdx),%xmm1
pand   0x10(%rdi),%xmm2
movdqa %xmm1,-0x20(%rbp)
movdqa %xmm2,-0x10(%rbp)
jmpq   456e0 <jsimd_h2v2_fancy_upsample_sse2.upsample>

0000000000045661 <jsimd_h2v2_fancy_upsample_sse2.columnloop>:
movdqa 0x10(%rbx),%xmm0
movdqa 0x10(%rcx),%xmm1
movdqa 0x10(%rsi),%xmm2
pxor   %xmm3,%xmm3
movdqa %xmm0,%xmm4
punpcklbw %xmm3,%xmm0
punpckhbw %xmm3,%xmm4
movdqa %xmm1,%xmm5
punpcklbw %xmm3,%xmm1
punpckhbw %xmm3,%xmm5
movdqa %xmm2,%xmm6
punpcklbw %xmm3,%xmm2
punpckhbw %xmm3,%xmm6
pmullw 0x266d0(%rip),%xmm0        # 6bd70 <PW_THREE>
pmullw 0x266c8(%rip),%xmm4        # 6bd70 <PW_THREE>
paddw  %xmm0,%xmm1
paddw  %xmm4,%xmm5
paddw  %xmm0,%xmm2
paddw  %xmm4,%xmm6
movdqa %xmm1,0x20(%rdx)
movdqa %xmm5,0x30(%rdx)
movdqa %xmm2,0x20(%rdi)
movdqa %xmm6,0x30(%rdi)
pslldq $0xe,%xmm1
pslldq $0xe,%xmm2
movdqa %xmm1,-0x20(%rbp)
movdqa %xmm2,-0x10(%rbp)

00000000000456e0 <jsimd_h2v2_fancy_upsample_sse2.upsample>:
movdqa (%rdx),%xmm7
movdqa 0x10(%rdx),%xmm3
movdqa %xmm7,%xmm0
movdqa %xmm3,%xmm4
psrldq $0x2,%xmm0
pslldq $0xe,%xmm4
movdqa %xmm7,%xmm5
movdqa %xmm3,%xmm6
psrldq $0xe,%xmm5
pslldq $0x2,%xmm6
por    %xmm4,%xmm0
por    %xmm6,%xmm5
movdqa %xmm7,%xmm1
movdqa %xmm3,%xmm2
pslldq $0x2,%xmm1
psrldq $0x2,%xmm2
movdqa %xmm3,%xmm4
psrldq $0xe,%xmm4
por    -0x40(%rbp),%xmm1
por    -0x20(%rbp),%xmm2
movdqa %xmm4,-0x40(%rbp)
pmullw 0x26629(%rip),%xmm7        # 6bd70 <PW_THREE>
pmullw 0x26621(%rip),%xmm3        # 6bd70 <PW_THREE>
paddw  0x26639(%rip),%xmm1        # 6bd90 <PW_EIGHT>
paddw  0x26631(%rip),%xmm5        # 6bd90 <PW_EIGHT>
paddw  0x26619(%rip),%xmm0        # 6bd80 <PW_SEVEN>
paddw  0x26611(%rip),%xmm2        # 6bd80 <PW_SEVEN>
paddw  %xmm7,%xmm1
paddw  %xmm3,%xmm5
psrlw  $0x4,%xmm1
psrlw  $0x4,%xmm5
paddw  %xmm7,%xmm0
paddw  %xmm3,%xmm2
psrlw  $0x4,%xmm0
psrlw  $0x4,%xmm2
psllw  $0x8,%xmm0
psllw  $0x8,%xmm2
por    %xmm0,%xmm1
por    %xmm2,%xmm5
movdqa %xmm1,(%rdx)
movdqa %xmm5,0x10(%rdx)
movdqa (%rdi),%xmm6
movdqa 0x10(%rdi),%xmm4
movdqa %xmm6,%xmm7
movdqa %xmm4,%xmm3
psrldq $0x2,%xmm7
pslldq $0xe,%xmm3
movdqa %xmm6,%xmm0
movdqa %xmm4,%xmm2
psrldq $0xe,%xmm0
pslldq $0x2,%xmm2
por    %xmm3,%xmm7
por    %xmm2,%xmm0
movdqa %xmm6,%xmm1
movdqa %xmm4,%xmm5
pslldq $0x2,%xmm1
psrldq $0x2,%xmm5
movdqa %xmm4,%xmm3
psrldq $0xe,%xmm3
por    -0x30(%rbp),%xmm1
por    -0x10(%rbp),%xmm5
movdqa %xmm3,-0x30(%rbp)
pmullw 0x2655b(%rip),%xmm6        # 6bd70 <PW_THREE>
pmullw 0x26553(%rip),%xmm4        # 6bd70 <PW_THREE>
paddw  0x2656b(%rip),%xmm1        # 6bd90 <PW_EIGHT>
paddw  0x26563(%rip),%xmm0        # 6bd90 <PW_EIGHT>
paddw  0x2654b(%rip),%xmm7        # 6bd80 <PW_SEVEN>
paddw  0x26543(%rip),%xmm5        # 6bd80 <PW_SEVEN>
paddw  %xmm6,%xmm1
paddw  %xmm4,%xmm0
psrlw  $0x4,%xmm1
psrlw  $0x4,%xmm0
paddw  %xmm6,%xmm7
paddw  %xmm4,%xmm5
psrlw  $0x4,%xmm7
psrlw  $0x4,%xmm5
psllw  $0x8,%xmm7
psllw  $0x8,%xmm5
por    %xmm7,%xmm1
por    %xmm5,%xmm0
movdqa %xmm1,(%rdi)
movdqa %xmm0,0x10(%rdi)
sub    $0x10,%rax
add    $0x10,%rcx
add    $0x10,%rbx
add    $0x10,%rsi
add    $0x20,%rdx
add    $0x20,%rdi
cmp    $0x10,%rax
ja     45661 <jsimd_h2v2_fancy_upsample_sse2.columnloop>
test   %rax,%rax
jne    4563b <jsimd_h2v2_fancy_upsample_sse2.columnloop_last>
pop    %rsi
pop    %rdi
pop    %rcx
pop    %rax
add    $0x8,%rsi
add    $0x10,%rdi
sub    $0x2,%rcx
jg     45577 <jsimd_h2v2_fancy_upsample_sse2.rowloop>

00000000000458bd <jsimd_h2v2_fancy_upsample_sse2.return>:
pop    %rbx
pop    %r15
pop    %r14
pop    %r13
pop    %r12
pop    %r11
pop    %r10
mov    %rbp,%rsp
pop    %rsp
pop    %rbp
retq   

00000000000458d0 <jsimd_h2v1_upsample_sse2>:
push   %rbp
mov    %rsp,%rax
mov    %rsp,%rbp
push   %r10
push   %r11
push   %r12
push   %r13
push   %r14
push   %r15
mov    %rdi,%r10
mov    %rsi,%r11
mov    %rdx,%r12
mov    %rcx,%r13
mov    %r8,%r14
mov    %r9,%r15
mov    %r11d,%edx
add    $0x1f,%rdx
and    $0xffffffffffffffe0,%rdx
je     4597b <jsimd_h2v1_upsample_sse2.return>
mov    %r10,%rcx
test   %rcx,%rcx
je     4597b <jsimd_h2v1_upsample_sse2.return>
mov    %r12,%rsi
mov    %r13,%rdi
mov    (%rdi),%rdi

0000000000045917 <jsimd_h2v1_upsample_sse2.rowloop>:
push   %rdi
push   %rsi
mov    (%rsi),%rsi
mov    (%rdi),%rdi
mov    %rdx,%rax

0000000000045922 <jsimd_h2v1_upsample_sse2.columnloop>:
movdqa (%rsi),%xmm0
movdqa %xmm0,%xmm1
punpcklbw %xmm0,%xmm0
punpckhbw %xmm1,%xmm1
movdqa %xmm0,(%rdi)
movdqa %xmm1,0x10(%rdi)
sub    $0x20,%rax
je     4596c <jsimd_h2v1_upsample_sse2.nextrow>
movdqa 0x10(%rsi),%xmm2
movdqa %xmm2,%xmm3
punpcklbw %xmm2,%xmm2
punpckhbw %xmm3,%xmm3
movdqa %xmm2,0x20(%rdi)
movdqa %xmm3,0x30(%rdi)
sub    $0x20,%rax
je     4596c <jsimd_h2v1_upsample_sse2.nextrow>
add    $0x20,%rsi
add    $0x40,%rdi
jmp    45922 <jsimd_h2v1_upsample_sse2.columnloop>

000000000004596c <jsimd_h2v1_upsample_sse2.nextrow>:
pop    %rsi
pop    %rdi
add    $0x8,%rsi
add    $0x8,%rdi
dec    %rcx
jg     45917 <jsimd_h2v1_upsample_sse2.rowloop>

000000000004597b <jsimd_h2v1_upsample_sse2.return>:
pop    %r15
pop    %r14
pop    %r13
pop    %r12
pop    %r11
pop    %r10
pop    %rbp
retq   
nop
nop
nop
nop
nop
nop
nop

0000000000045990 <jsimd_h2v2_upsample_sse2>:
push   %rbp
mov    %rsp,%rax
mov    %rsp,%rbp
push   %r10
push   %r11
push   %r12
push   %r13
push   %r14
push   %r15
mov    %rdi,%r10
mov    %rsi,%r11
mov    %rdx,%r12
mov    %rcx,%r13
mov    %r8,%r14
mov    %r9,%r15
push   %rbx
mov    %r11d,%edx
add    $0x1f,%rdx
and    $0xffffffffffffffe0,%rdx
je     45a60 <jsimd_h2v2_upsample_sse2.return>
mov    %r10,%rcx
test   %rcx,%rcx
je     45a60 <jsimd_h2v2_upsample_sse2.return>
mov    %r12,%rsi
mov    %r13,%rdi
mov    (%rdi),%rdi

00000000000459dc <jsimd_h2v2_upsample_sse2.rowloop>:
push   %rdi
push   %rsi
mov    (%rsi),%rsi
mov    (%rdi),%rbx
mov    0x8(%rdi),%rdi
mov    %rdx,%rax

00000000000459eb <jsimd_h2v2_upsample_sse2.columnloop>:
movdqa (%rsi),%xmm0
movdqa %xmm0,%xmm1
punpcklbw %xmm0,%xmm0
punpckhbw %xmm1,%xmm1
movdqa %xmm0,(%rbx)
movdqa %xmm1,0x10(%rbx)
movdqa %xmm0,(%rdi)
movdqa %xmm1,0x10(%rdi)
sub    $0x20,%rax
je     45a4c <jsimd_h2v2_upsample_sse2.nextrow>
movdqa 0x10(%rsi),%xmm2
movdqa %xmm2,%xmm3
punpcklbw %xmm2,%xmm2
punpckhbw %xmm3,%xmm3
movdqa %xmm2,0x20(%rbx)
movdqa %xmm3,0x30(%rbx)
movdqa %xmm2,0x20(%rdi)
movdqa %xmm3,0x30(%rdi)
sub    $0x20,%rax
je     45a4c <jsimd_h2v2_upsample_sse2.nextrow>
add    $0x20,%rsi
add    $0x40,%rbx
add    $0x40,%rdi
jmp    459eb <jsimd_h2v2_upsample_sse2.columnloop>

0000000000045a4c <jsimd_h2v2_upsample_sse2.nextrow>:
pop    %rsi
pop    %rdi
add    $0x8,%rsi
add    $0x10,%rdi
sub    $0x2,%rcx
jg     459dc <jsimd_h2v2_upsample_sse2.rowloop>

0000000000045a60 <jsimd_h2v2_upsample_sse2.return>:
pop    %rbx
pop    %r15
pop    %r14
pop    %r13
pop    %r12
pop    %r11
pop    %r10
pop    %rbp
retq   
nop

0000000000045a70 <jsimd_fdct_ifast_sse2>:
push   %rbp
mov    %rsp,%rax
sub    $0x4,%rsp
and    $0xfffffffffffffff0,%rsp
mov    %rax,(%rsp)
mov    %rsp,%rbp
lea    -0x20(%rbp),%rsp
push   %r10
push   %r11
push   %r12
push   %r13
push   %r14
push   %r15
mov    %rdi,%r10
mov    %rsi,%r11
mov    %rdx,%r12
mov    %rcx,%r13
mov    %r8,%r14
mov    %r9,%r15
mov    %r10,%rdx
movdqa (%rdx),%xmm0
movdqa 0x10(%rdx),%xmm1
movdqa 0x20(%rdx),%xmm2
movdqa 0x30(%rdx),%xmm3
movdqa %xmm0,%xmm4
punpcklwd %xmm1,%xmm0
punpckhwd %xmm1,%xmm4
movdqa %xmm2,%xmm5
punpcklwd %xmm3,%xmm2
punpckhwd %xmm3,%xmm5
movdqa 0x40(%rdx),%xmm6
movdqa 0x50(%rdx),%xmm7
movdqa 0x60(%rdx),%xmm1
movdqa 0x70(%rdx),%xmm3
movdqa %xmm2,-0x20(%rbp)
movdqa %xmm5,-0x10(%rbp)
movdqa %xmm6,%xmm2
punpcklwd %xmm7,%xmm6
punpckhwd %xmm7,%xmm2
movdqa %xmm1,%xmm5
punpcklwd %xmm3,%xmm1
punpckhwd %xmm3,%xmm5
movdqa %xmm6,%xmm7
punpckldq %xmm1,%xmm6
punpckhdq %xmm1,%xmm7
movdqa %xmm2,%xmm3
punpckldq %xmm5,%xmm2
punpckhdq %xmm5,%xmm3
movdqa -0x20(%rbp),%xmm1
movdqa -0x10(%rbp),%xmm5
movdqa %xmm7,-0x20(%rbp)
movdqa %xmm2,-0x10(%rbp)
movdqa %xmm0,%xmm7
punpckldq %xmm1,%xmm0
punpckhdq %xmm1,%xmm7
movdqa %xmm4,%xmm2
punpckldq %xmm5,%xmm4
punpckhdq %xmm5,%xmm2
movdqa %xmm0,%xmm1
punpcklqdq %xmm6,%xmm0
punpckhqdq %xmm6,%xmm1
movdqa %xmm2,%xmm5
punpcklqdq %xmm3,%xmm2
punpckhqdq %xmm3,%xmm5
movdqa %xmm1,%xmm6
movdqa %xmm0,%xmm3
psubw  %xmm2,%xmm1
psubw  %xmm5,%xmm0
paddw  %xmm2,%xmm6
paddw  %xmm5,%xmm3
movdqa -0x20(%rbp),%xmm2
movdqa -0x10(%rbp),%xmm5
movdqa %xmm1,-0x20(%rbp)
movdqa %xmm0,-0x10(%rbp)
movdqa %xmm7,%xmm1
punpcklqdq %xmm2,%xmm7
punpckhqdq %xmm2,%xmm1
movdqa %xmm4,%xmm0
punpcklqdq %xmm5,%xmm4
punpckhqdq %xmm5,%xmm0
movdqa %xmm1,%xmm2
movdqa %xmm7,%xmm5
paddw  %xmm4,%xmm1
paddw  %xmm0,%xmm7
psubw  %xmm4,%xmm2
psubw  %xmm0,%xmm5
movdqa %xmm3,%xmm4
movdqa %xmm6,%xmm0
psubw  %xmm1,%xmm3
psubw  %xmm7,%xmm6
paddw  %xmm1,%xmm4
paddw  %xmm7,%xmm0
paddw  %xmm3,%xmm6
psllw  $0x2,%xmm6
pmulhw 0x261b6(%rip),%xmm6        # 6bda0 <PW_F0707>
movdqa %xmm4,%xmm1
movdqa %xmm3,%xmm7
psubw  %xmm0,%xmm4
psubw  %xmm6,%xmm3
paddw  %xmm0,%xmm1
paddw  %xmm6,%xmm7
movdqa -0x20(%rbp),%xmm0
movdqa -0x10(%rbp),%xmm6
movdqa %xmm4,-0x20(%rbp)
movdqa %xmm3,-0x10(%rbp)
paddw  %xmm5,%xmm2
paddw  %xmm0,%xmm5
paddw  %xmm6,%xmm0
psllw  $0x2,%xmm2
psllw  $0x2,%xmm0
psllw  $0x2,%xmm5
pmulhw 0x26167(%rip),%xmm5        # 6bda0 <PW_F0707>
movdqa %xmm2,%xmm4
psubw  %xmm0,%xmm2
pmulhw 0x26167(%rip),%xmm2        # 6bdb0 <PW_F0382>
pmulhw 0x2616f(%rip),%xmm4        # 6bdc0 <PW_F0541>
pmulhw 0x26177(%rip),%xmm0        # 6bdd0 <PW_F1306>
paddw  %xmm2,%xmm4
paddw  %xmm2,%xmm0
movdqa %xmm6,%xmm3
psubw  %xmm5,%xmm6
paddw  %xmm5,%xmm3
movdqa %xmm6,%xmm2
movdqa %xmm3,%xmm5
psubw  %xmm4,%xmm6
psubw  %xmm0,%xmm3
paddw  %xmm4,%xmm2
paddw  %xmm0,%xmm5
movdqa %xmm1,%xmm4
punpcklwd %xmm5,%xmm1
punpckhwd %xmm5,%xmm4
movdqa %xmm7,%xmm0
punpcklwd %xmm6,%xmm7
punpckhwd %xmm6,%xmm0
movdqa -0x20(%rbp),%xmm5
movdqa -0x10(%rbp),%xmm6
movdqa %xmm7,-0x20(%rbp)
movdqa %xmm0,-0x10(%rbp)
movdqa %xmm5,%xmm7
punpcklwd %xmm2,%xmm5
punpckhwd %xmm2,%xmm7
movdqa %xmm6,%xmm0
punpcklwd %xmm3,%xmm6
punpckhwd %xmm3,%xmm0
movdqa %xmm5,%xmm2
punpckldq %xmm6,%xmm5
punpckhdq %xmm6,%xmm2
movdqa %xmm7,%xmm3
punpckldq %xmm0,%xmm7
punpckhdq %xmm0,%xmm3
movdqa -0x20(%rbp),%xmm6
movdqa -0x10(%rbp),%xmm0
movdqa %xmm2,-0x20(%rbp)
movdqa %xmm7,-0x10(%rbp)
movdqa %xmm1,%xmm2
punpckldq %xmm6,%xmm1
punpckhdq %xmm6,%xmm2
movdqa %xmm4,%xmm7
punpckldq %xmm0,%xmm4
punpckhdq %xmm0,%xmm7
movdqa %xmm1,%xmm6
punpcklqdq %xmm5,%xmm1
punpckhqdq %xmm5,%xmm6
movdqa %xmm7,%xmm0
punpcklqdq %xmm3,%xmm7
punpckhqdq %xmm3,%xmm0
movdqa %xmm6,%xmm5
movdqa %xmm1,%xmm3
psubw  %xmm7,%xmm6
psubw  %xmm0,%xmm1
paddw  %xmm7,%xmm5
paddw  %xmm0,%xmm3
movdqa -0x20(%rbp),%xmm7
movdqa -0x10(%rbp),%xmm0
movdqa %xmm6,-0x20(%rbp)
movdqa %xmm1,-0x10(%rbp)
movdqa %xmm2,%xmm6
punpcklqdq %xmm7,%xmm2
punpckhqdq %xmm7,%xmm6
movdqa %xmm4,%xmm1
punpcklqdq %xmm0,%xmm4
punpckhqdq %xmm0,%xmm1
movdqa %xmm6,%xmm7
movdqa %xmm2,%xmm0
paddw  %xmm4,%xmm6
paddw  %xmm1,%xmm2
psubw  %xmm4,%xmm7
psubw  %xmm1,%xmm0
movdqa %xmm3,%xmm4
movdqa %xmm5,%xmm1
psubw  %xmm6,%xmm3
psubw  %xmm2,%xmm5
paddw  %xmm6,%xmm4
paddw  %xmm2,%xmm1
paddw  %xmm3,%xmm5
psllw  $0x2,%xmm5
pmulhw 0x25ff6(%rip),%xmm5        # 6bda0 <PW_F0707>
movdqa %xmm4,%xmm6
movdqa %xmm3,%xmm2
psubw  %xmm1,%xmm4
psubw  %xmm5,%xmm3
paddw  %xmm1,%xmm6
paddw  %xmm5,%xmm2
movdqa %xmm4,0x40(%rdx)
movdqa %xmm3,0x60(%rdx)
movdqa %xmm6,(%rdx)
movdqa %xmm2,0x20(%rdx)
movdqa -0x20(%rbp),%xmm1
movdqa -0x10(%rbp),%xmm5
paddw  %xmm0,%xmm7
paddw  %xmm1,%xmm0
paddw  %xmm5,%xmm1
psllw  $0x2,%xmm7
psllw  $0x2,%xmm1
psllw  $0x2,%xmm0
pmulhw 0x25f9e(%rip),%xmm0        # 6bda0 <PW_F0707>
movdqa %xmm7,%xmm4
psubw  %xmm1,%xmm7
pmulhw 0x25f9e(%rip),%xmm7        # 6bdb0 <PW_F0382>
pmulhw 0x25fa6(%rip),%xmm4        # 6bdc0 <PW_F0541>
pmulhw 0x25fae(%rip),%xmm1        # 6bdd0 <PW_F1306>
paddw  %xmm7,%xmm4
paddw  %xmm7,%xmm1
movdqa %xmm5,%xmm3
psubw  %xmm0,%xmm5
paddw  %xmm0,%xmm3
movdqa %xmm5,%xmm6
movdqa %xmm3,%xmm2
psubw  %xmm4,%xmm5
psubw  %xmm1,%xmm3
paddw  %xmm4,%xmm6
paddw  %xmm1,%xmm2
movdqa %xmm5,0x30(%rdx)
movdqa %xmm3,0x70(%rdx)
movdqa %xmm6,0x50(%rdx)
movdqa %xmm2,0x10(%rdx)
pop    %r15
pop    %r14
pop    %r13
pop    %r12
pop    %r11
pop    %r10
mov    %rbp,%rsp
pop    %rsp
pop    %rbp
retq   
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop

0000000000045e80 <jsimd_fdct_islow_sse2>:
push   %rbp
mov    %rsp,%rax
sub    $0x4,%rsp
and    $0xfffffffffffffff0,%rsp
mov    %rax,(%rsp)
mov    %rsp,%rbp
lea    -0x60(%rbp),%rsp
push   %r10
push   %r11
push   %r12
push   %r13
push   %r14
push   %r15
mov    %rdi,%r10
mov    %rsi,%r11
mov    %rdx,%r12
mov    %rcx,%r13
mov    %r8,%r14
mov    %r9,%r15
mov    %r10,%rdx
movdqa (%rdx),%xmm0
movdqa 0x10(%rdx),%xmm1
movdqa 0x20(%rdx),%xmm2
movdqa 0x30(%rdx),%xmm3
movdqa %xmm0,%xmm4
punpcklwd %xmm1,%xmm0
punpckhwd %xmm1,%xmm4
movdqa %xmm2,%xmm5
punpcklwd %xmm3,%xmm2
punpckhwd %xmm3,%xmm5
movdqa 0x40(%rdx),%xmm6
movdqa 0x50(%rdx),%xmm7
movdqa 0x60(%rdx),%xmm1
movdqa 0x70(%rdx),%xmm3
movdqa %xmm2,-0x60(%rbp)
movdqa %xmm5,-0x50(%rbp)
movdqa %xmm6,%xmm2
punpcklwd %xmm7,%xmm6
punpckhwd %xmm7,%xmm2
movdqa %xmm1,%xmm5
punpcklwd %xmm3,%xmm1
punpckhwd %xmm3,%xmm5
movdqa %xmm6,%xmm7
punpckldq %xmm1,%xmm6
punpckhdq %xmm1,%xmm7
movdqa %xmm2,%xmm3
punpckldq %xmm5,%xmm2
punpckhdq %xmm5,%xmm3
movdqa -0x60(%rbp),%xmm1
movdqa -0x50(%rbp),%xmm5
movdqa %xmm7,-0x40(%rbp)
movdqa %xmm2,-0x30(%rbp)
movdqa %xmm0,%xmm7
punpckldq %xmm1,%xmm0
punpckhdq %xmm1,%xmm7
movdqa %xmm4,%xmm2
punpckldq %xmm5,%xmm4
punpckhdq %xmm5,%xmm2
movdqa %xmm0,%xmm1
punpcklqdq %xmm6,%xmm0
punpckhqdq %xmm6,%xmm1
movdqa %xmm2,%xmm5
punpcklqdq %xmm3,%xmm2
punpckhqdq %xmm3,%xmm5
movdqa %xmm1,%xmm6
movdqa %xmm0,%xmm3
psubw  %xmm2,%xmm1
psubw  %xmm5,%xmm0
paddw  %xmm2,%xmm6
paddw  %xmm5,%xmm3
movdqa -0x40(%rbp),%xmm2
movdqa -0x30(%rbp),%xmm5
movdqa %xmm1,-0x60(%rbp)
movdqa %xmm0,-0x50(%rbp)
movdqa %xmm7,%xmm1
punpcklqdq %xmm2,%xmm7
punpckhqdq %xmm2,%xmm1
movdqa %xmm4,%xmm0
punpcklqdq %xmm5,%xmm4
punpckhqdq %xmm5,%xmm0
movdqa %xmm1,%xmm2
movdqa %xmm7,%xmm5
paddw  %xmm4,%xmm1
paddw  %xmm0,%xmm7
psubw  %xmm4,%xmm2
psubw  %xmm0,%xmm5
movdqa %xmm3,%xmm4
movdqa %xmm6,%xmm0
paddw  %xmm1,%xmm3
paddw  %xmm7,%xmm6
psubw  %xmm1,%xmm4
psubw  %xmm7,%xmm0
movdqa %xmm3,%xmm1
paddw  %xmm6,%xmm3
psubw  %xmm6,%xmm1
psllw  $0x2,%xmm3
psllw  $0x2,%xmm1
movdqa %xmm3,-0x40(%rbp)
movdqa %xmm1,-0x30(%rbp)
movdqa %xmm4,%xmm7
movdqa %xmm4,%xmm6
punpcklwd %xmm0,%xmm7
punpckhwd %xmm0,%xmm6
movdqa %xmm7,%xmm4
movdqa %xmm6,%xmm0
pmaddwd 0x25db7(%rip),%xmm7        # 6bde0 <PW_F130_F054>
pmaddwd 0x25daf(%rip),%xmm6        # 6bde0 <PW_F130_F054>
pmaddwd 0x25db7(%rip),%xmm4        # 6bdf0 <PW_F054_MF130>
pmaddwd 0x25daf(%rip),%xmm0        # 6bdf0 <PW_F054_MF130>
paddd  0x25e17(%rip),%xmm7        # 6be60 <PD_DESCALE_P1>
paddd  0x25e0f(%rip),%xmm6        # 6be60 <PD_DESCALE_P1>
psrad  $0xb,%xmm7
psrad  $0xb,%xmm6
paddd  0x25dfd(%rip),%xmm4        # 6be60 <PD_DESCALE_P1>
paddd  0x25df5(%rip),%xmm0        # 6be60 <PD_DESCALE_P1>
psrad  $0xb,%xmm4
psrad  $0xb,%xmm0
packssdw %xmm6,%xmm7
packssdw %xmm0,%xmm4
movdqa %xmm7,-0x20(%rbp)
movdqa %xmm4,-0x10(%rbp)
movdqa -0x60(%rbp),%xmm3
movdqa -0x50(%rbp),%xmm1
movdqa %xmm2,%xmm6
movdqa %xmm5,%xmm0
paddw  %xmm3,%xmm6
paddw  %xmm1,%xmm0
movdqa %xmm6,%xmm7
movdqa %xmm6,%xmm4
punpcklwd %xmm0,%xmm7
punpckhwd %xmm0,%xmm4
movdqa %xmm7,%xmm6
movdqa %xmm4,%xmm0
pmaddwd 0x25d3f(%rip),%xmm7        # 6be00 <PW_MF078_F117>
pmaddwd 0x25d37(%rip),%xmm4        # 6be00 <PW_MF078_F117>
pmaddwd 0x25d3f(%rip),%xmm6        # 6be10 <PW_F117_F078>
pmaddwd 0x25d37(%rip),%xmm0        # 6be10 <PW_F117_F078>
movdqa %xmm7,-0x60(%rbp)
movdqa %xmm4,-0x50(%rbp)
movdqa %xmm2,%xmm7
movdqa %xmm2,%xmm4
punpcklwd %xmm1,%xmm7
punpckhwd %xmm1,%xmm4
movdqa %xmm7,%xmm2
movdqa %xmm4,%xmm1
pmaddwd 0x25d1d(%rip),%xmm7        # 6be20 <PW_MF060_MF089>
pmaddwd 0x25d15(%rip),%xmm4        # 6be20 <PW_MF060_MF089>
pmaddwd 0x25d1d(%rip),%xmm2        # 6be30 <PW_MF089_F060>
pmaddwd 0x25d15(%rip),%xmm1        # 6be30 <PW_MF089_F060>
paddd  -0x60(%rbp),%xmm7
paddd  -0x50(%rbp),%xmm4
paddd  %xmm6,%xmm2
paddd  %xmm0,%xmm1
paddd  0x25d2b(%rip),%xmm7        # 6be60 <PD_DESCALE_P1>
paddd  0x25d23(%rip),%xmm4        # 6be60 <PD_DESCALE_P1>
psrad  $0xb,%xmm7
psrad  $0xb,%xmm4
paddd  0x25d11(%rip),%xmm2        # 6be60 <PD_DESCALE_P1>
paddd  0x25d09(%rip),%xmm1        # 6be60 <PD_DESCALE_P1>
psrad  $0xb,%xmm2
psrad  $0xb,%xmm1
packssdw %xmm4,%xmm7
packssdw %xmm1,%xmm2
movdqa %xmm5,%xmm4
movdqa %xmm5,%xmm1
punpcklwd %xmm3,%xmm4
punpckhwd %xmm3,%xmm1
movdqa %xmm4,%xmm5
movdqa %xmm1,%xmm3
pmaddwd 0x25cb7(%rip),%xmm4        # 6be40 <PW_MF050_MF256>
pmaddwd 0x25caf(%rip),%xmm1        # 6be40 <PW_MF050_MF256>
pmaddwd 0x25cb7(%rip),%xmm5        # 6be50 <PW_MF256_F050>
pmaddwd 0x25caf(%rip),%xmm3        # 6be50 <PW_MF256_F050>
paddd  %xmm6,%xmm4
paddd  %xmm0,%xmm1
paddd  -0x60(%rbp),%xmm5
paddd  -0x50(%rbp),%xmm3
paddd  0x25ca5(%rip),%xmm4        # 6be60 <PD_DESCALE_P1>
paddd  0x25c9d(%rip),%xmm1        # 6be60 <PD_DESCALE_P1>
psrad  $0xb,%xmm4
psrad  $0xb,%xmm1
paddd  0x25c8b(%rip),%xmm5        # 6be60 <PD_DESCALE_P1>
paddd  0x25c83(%rip),%xmm3        # 6be60 <PD_DESCALE_P1>
psrad  $0xb,%xmm5
psrad  $0xb,%xmm3
packssdw %xmm1,%xmm4
packssdw %xmm3,%xmm5
movdqa -0x40(%rbp),%xmm6
movdqa -0x20(%rbp),%xmm0
movdqa %xmm6,%xmm1
punpcklwd %xmm2,%xmm6
punpckhwd %xmm2,%xmm1
movdqa %xmm0,%xmm3
punpcklwd %xmm5,%xmm0
punpckhwd %xmm5,%xmm3
movdqa -0x30(%rbp),%xmm2
movdqa -0x10(%rbp),%xmm5
movdqa %xmm0,-0x60(%rbp)
movdqa %xmm3,-0x50(%rbp)
movdqa %xmm2,%xmm0
punpcklwd %xmm4,%xmm2
punpckhwd %xmm4,%xmm0
movdqa %xmm5,%xmm3
punpcklwd %xmm7,%xmm5
punpckhwd %xmm7,%xmm3
movdqa %xmm2,%xmm4
punpckldq %xmm5,%xmm2
punpckhdq %xmm5,%xmm4
movdqa %xmm0,%xmm7
punpckldq %xmm3,%xmm0
punpckhdq %xmm3,%xmm7
movdqa -0x60(%rbp),%xmm5
movdqa -0x50(%rbp),%xmm3
movdqa %xmm4,-0x40(%rbp)
movdqa %xmm0,-0x30(%rbp)
movdqa %xmm6,%xmm4
punpckldq %xmm5,%xmm6
punpckhdq %xmm5,%xmm4
movdqa %xmm1,%xmm0
punpckldq %xmm3,%xmm1
punpckhdq %xmm3,%xmm0
movdqa %xmm6,%xmm5
punpcklqdq %xmm2,%xmm6
punpckhqdq %xmm2,%xmm5
movdqa %xmm0,%xmm3
punpcklqdq %xmm7,%xmm0
punpckhqdq %xmm7,%xmm3
movdqa %xmm5,%xmm2
movdqa %xmm6,%xmm7
psubw  %xmm0,%xmm5
psubw  %xmm3,%xmm6
paddw  %xmm0,%xmm2
paddw  %xmm3,%xmm7
movdqa -0x40(%rbp),%xmm0
movdqa -0x30(%rbp),%xmm3
movdqa %xmm5,-0x60(%rbp)
movdqa %xmm6,-0x50(%rbp)
movdqa %xmm4,%xmm5
punpcklqdq %xmm0,%xmm4
punpckhqdq %xmm0,%xmm5
movdqa %xmm1,%xmm6
punpcklqdq %xmm3,%xmm1
punpckhqdq %xmm3,%xmm6
movdqa %xmm5,%xmm0
movdqa %xmm4,%xmm3
paddw  %xmm1,%xmm5
paddw  %xmm6,%xmm4
psubw  %xmm1,%xmm0
psubw  %xmm6,%xmm3
movdqa %xmm7,%xmm1
movdqa %xmm2,%xmm6
paddw  %xmm5,%xmm7
paddw  %xmm4,%xmm2
psubw  %xmm5,%xmm1
psubw  %xmm4,%xmm6
movdqa %xmm7,%xmm5
paddw  %xmm2,%xmm7
psubw  %xmm2,%xmm5
paddw  0x25b5f(%rip),%xmm7        # 6be80 <PW_DESCALE_P2X>
paddw  0x25b57(%rip),%xmm5        # 6be80 <PW_DESCALE_P2X>
psraw  $0x2,%xmm7
psraw  $0x2,%xmm5
movdqa %xmm7,(%rdx)
movdqa %xmm5,0x40(%rdx)
movdqa %xmm1,%xmm4
movdqa %xmm1,%xmm2
punpcklwd %xmm6,%xmm4
punpckhwd %xmm6,%xmm2
movdqa %xmm4,%xmm1
movdqa %xmm2,%xmm6
pmaddwd 0x25a84(%rip),%xmm4        # 6bde0 <PW_F130_F054>
pmaddwd 0x25a7c(%rip),%xmm2        # 6bde0 <PW_F130_F054>
pmaddwd 0x25a84(%rip),%xmm1        # 6bdf0 <PW_F054_MF130>
pmaddwd 0x25a7c(%rip),%xmm6        # 6bdf0 <PW_F054_MF130>
paddd  0x25af4(%rip),%xmm4        # 6be70 <PD_DESCALE_P2>
paddd  0x25aec(%rip),%xmm2        # 6be70 <PD_DESCALE_P2>
psrad  $0xf,%xmm4
psrad  $0xf,%xmm2
paddd  0x25ada(%rip),%xmm1        # 6be70 <PD_DESCALE_P2>
paddd  0x25ad2(%rip),%xmm6        # 6be70 <PD_DESCALE_P2>
psrad  $0xf,%xmm1
psrad  $0xf,%xmm6
packssdw %xmm2,%xmm4
packssdw %xmm6,%xmm1
movdqa %xmm4,0x20(%rdx)
movdqa %xmm1,0x60(%rdx)
movdqa -0x60(%rbp),%xmm7
movdqa -0x50(%rbp),%xmm5
movdqa %xmm0,%xmm2
movdqa %xmm3,%xmm6
paddw  %xmm7,%xmm2
paddw  %xmm5,%xmm6
movdqa %xmm2,%xmm4
movdqa %xmm2,%xmm1
punpcklwd %xmm6,%xmm4
punpckhwd %xmm6,%xmm1
movdqa %xmm4,%xmm2
movdqa %xmm1,%xmm6
pmaddwd 0x25a0c(%rip),%xmm4        # 6be00 <PW_MF078_F117>
pmaddwd 0x25a04(%rip),%xmm1        # 6be00 <PW_MF078_F117>
pmaddwd 0x25a0c(%rip),%xmm2        # 6be10 <PW_F117_F078>
pmaddwd 0x25a04(%rip),%xmm6        # 6be10 <PW_F117_F078>
movdqa %xmm4,-0x60(%rbp)
movdqa %xmm1,-0x50(%rbp)
movdqa %xmm0,%xmm4
movdqa %xmm0,%xmm1
punpcklwd %xmm5,%xmm4
punpckhwd %xmm5,%xmm1
movdqa %xmm4,%xmm0
movdqa %xmm1,%xmm5
pmaddwd 0x259ea(%rip),%xmm4        # 6be20 <PW_MF060_MF089>
pmaddwd 0x259e2(%rip),%xmm1        # 6be20 <PW_MF060_MF089>
pmaddwd 0x259ea(%rip),%xmm0        # 6be30 <PW_MF089_F060>
pmaddwd 0x259e2(%rip),%xmm5        # 6be30 <PW_MF089_F060>
paddd  -0x60(%rbp),%xmm4
paddd  -0x50(%rbp),%xmm1
paddd  %xmm2,%xmm0
paddd  %xmm6,%xmm5
paddd  0x25a08(%rip),%xmm4        # 6be70 <PD_DESCALE_P2>
paddd  0x25a00(%rip),%xmm1        # 6be70 <PD_DESCALE_P2>
psrad  $0xf,%xmm4
psrad  $0xf,%xmm1
paddd  0x259ee(%rip),%xmm0        # 6be70 <PD_DESCALE_P2>
paddd  0x259e6(%rip),%xmm5        # 6be70 <PD_DESCALE_P2>
psrad  $0xf,%xmm0
psrad  $0xf,%xmm5
packssdw %xmm1,%xmm4
packssdw %xmm5,%xmm0
movdqa %xmm4,0x70(%rdx)
movdqa %xmm0,0x10(%rdx)
movdqa %xmm3,%xmm1
movdqa %xmm3,%xmm5
punpcklwd %xmm7,%xmm1
punpckhwd %xmm7,%xmm5
movdqa %xmm1,%xmm3
movdqa %xmm5,%xmm7
pmaddwd 0x2597a(%rip),%xmm1        # 6be40 <PW_MF050_MF256>
pmaddwd 0x25972(%rip),%xmm5        # 6be40 <PW_MF050_MF256>
pmaddwd 0x2597a(%rip),%xmm3        # 6be50 <PW_MF256_F050>
pmaddwd 0x25972(%rip),%xmm7        # 6be50 <PW_MF256_F050>
paddd  %xmm2,%xmm1
paddd  %xmm6,%xmm5
paddd  -0x60(%rbp),%xmm3
paddd  -0x50(%rbp),%xmm7
paddd  0x25978(%rip),%xmm1        # 6be70 <PD_DESCALE_P2>
paddd  0x25970(%rip),%xmm5        # 6be70 <PD_DESCALE_P2>
psrad  $0xf,%xmm1
psrad  $0xf,%xmm5
paddd  0x2595e(%rip),%xmm3        # 6be70 <PD_DESCALE_P2>
paddd  0x25956(%rip),%xmm7        # 6be70 <PD_DESCALE_P2>
psrad  $0xf,%xmm3
psrad  $0xf,%xmm7
packssdw %xmm5,%xmm1
packssdw %xmm7,%xmm3
movdqa %xmm1,0x50(%rdx)
movdqa %xmm3,0x30(%rdx)
pop    %r15
pop    %r14
pop    %r13
pop    %r12
pop    %r11
pop    %r10
mov    %rbp,%rsp
pop    %rsp
pop    %rbp
retq   
nop
nop
nop
nop
nop
nop
nop
nop

0000000000046550 <jsimd_idct_float_sse2>:
push   %rbp
mov    %rsp,%rax
sub    $0x4,%rsp
and    $0xfffffffffffffff0,%rsp
mov    %rax,(%rsp)
mov    %rsp,%rbp
lea    -0x120(%rbp),%rsp
push   %r10
push   %r11
push   %r12
push   %r13
push   %r14
push   %r15
mov    %rdi,%r10
mov    %rsi,%r11
mov    %rdx,%r12
mov    %rcx,%r13
mov    %r8,%r14
mov    %r9,%r15
push   %rbx
mov    %r10,%rdx
mov    %r11,%rsi
lea    -0x120(%rbp),%rdi
mov    $0x2,%ecx

000000000004659b <jsimd_idct_float_sse2.columnloop>:
mov    0x10(%rsi),%eax
or     0x20(%rsi),%eax
jne    4663f <jsimd_idct_float_sse2.columnDCT>
movq   0x10(%rsi),%xmm1
movq   0x20(%rsi),%xmm2
movq   0x30(%rsi),%xmm3
movq   0x40(%rsi),%xmm4
movq   0x50(%rsi),%xmm5
movq   0x60(%rsi),%xmm6
movq   0x70(%rsi),%xmm7
por    %xmm2,%xmm1
por    %xmm4,%xmm3
por    %xmm6,%xmm5
por    %xmm3,%xmm1
por    %xmm7,%xmm5
por    %xmm5,%xmm1
packsswb %xmm1,%xmm1
movd   %xmm1,%eax
test   %rax,%rax
jne    4663f <jsimd_idct_float_sse2.columnDCT>
movq   (%rsi),%xmm0
punpcklwd %xmm0,%xmm0
psrad  $0x10,%xmm0
cvtdq2ps %xmm0,%xmm0
mulps  (%rdx),%xmm0
movaps %xmm0,%xmm1
movaps %xmm0,%xmm2
movaps %xmm0,%xmm3
shufps $0x0,%xmm0,%xmm0
shufps $0x55,%xmm1,%xmm1
shufps $0xaa,%xmm2,%xmm2
shufps $0xff,%xmm3,%xmm3
movaps %xmm0,(%rdi)
movaps %xmm0,0x10(%rdi)
movaps %xmm1,0x20(%rdi)
movaps %xmm1,0x30(%rdi)
movaps %xmm2,0x40(%rdi)
movaps %xmm2,0x50(%rdi)
movaps %xmm3,0x60(%rdi)
movaps %xmm3,0x70(%rdi)
jmpq   4681e <jsimd_idct_float_sse2.nextcolumn>

000000000004663f <jsimd_idct_float_sse2.columnDCT>:
movq   (%rsi),%xmm0
movq   0x20(%rsi),%xmm1
movq   0x40(%rsi),%xmm2
movq   0x60(%rsi),%xmm3
punpcklwd %xmm0,%xmm0
punpcklwd %xmm1,%xmm1
psrad  $0x10,%xmm0
psrad  $0x10,%xmm1
cvtdq2ps %xmm0,%xmm0
cvtdq2ps %xmm1,%xmm1
punpcklwd %xmm2,%xmm2
punpcklwd %xmm3,%xmm3
psrad  $0x10,%xmm2
psrad  $0x10,%xmm3
cvtdq2ps %xmm2,%xmm2
cvtdq2ps %xmm3,%xmm3
mulps  (%rdx),%xmm0
mulps  0x40(%rdx),%xmm1
mulps  0x80(%rdx),%xmm2
mulps  0xc0(%rdx),%xmm3
movaps %xmm0,%xmm4
movaps %xmm1,%xmm5
subps  %xmm2,%xmm0
subps  %xmm3,%xmm1
addps  %xmm2,%xmm4
addps  %xmm3,%xmm5
mulps  0x257e0(%rip),%xmm1        # 6be90 <PD_1_414>
subps  %xmm5,%xmm1
movaps %xmm4,%xmm6
movaps %xmm0,%xmm7
subps  %xmm5,%xmm4
subps  %xmm1,%xmm0
addps  %xmm5,%xmm6
addps  %xmm1,%xmm7
movaps %xmm4,-0x10(%rbp)
movaps %xmm0,-0x20(%rbp)
movq   0x10(%rsi),%xmm2
movq   0x30(%rsi),%xmm3
movq   0x50(%rsi),%xmm5
movq   0x70(%rsi),%xmm1
punpcklwd %xmm2,%xmm2
punpcklwd %xmm3,%xmm3
psrad  $0x10,%xmm2
psrad  $0x10,%xmm3
cvtdq2ps %xmm2,%xmm2
cvtdq2ps %xmm3,%xmm3
punpcklwd %xmm5,%xmm5
punpcklwd %xmm1,%xmm1
psrad  $0x10,%xmm5
psrad  $0x10,%xmm1
cvtdq2ps %xmm5,%xmm5
cvtdq2ps %xmm1,%xmm1
mulps  0x20(%rdx),%xmm2
mulps  0x60(%rdx),%xmm3
mulps  0xa0(%rdx),%xmm5
mulps  0xe0(%rdx),%xmm1
movaps %xmm2,%xmm4
movaps %xmm5,%xmm0
addps  %xmm1,%xmm2
addps  %xmm3,%xmm5
subps  %xmm1,%xmm4
subps  %xmm3,%xmm0
movaps %xmm2,%xmm1
subps  %xmm5,%xmm2
addps  %xmm5,%xmm1
mulps  0x25747(%rip),%xmm2        # 6be90 <PD_1_414>
movaps %xmm0,%xmm3
addps  %xmm4,%xmm0
mulps  0x2574a(%rip),%xmm0        # 6bea0 <PD_1_847>
mulps  0x25763(%rip),%xmm3        # 6bec0 <PD_M2_613>
mulps  0x2574c(%rip),%xmm4        # 6beb0 <PD_1_082>
addps  %xmm0,%xmm3
subps  %xmm0,%xmm4
subps  %xmm1,%xmm3
movaps %xmm6,%xmm5
movaps %xmm7,%xmm0
addps  %xmm1,%xmm6
addps  %xmm3,%xmm7
subps  %xmm1,%xmm5
subps  %xmm3,%xmm0
subps  %xmm3,%xmm2
movaps %xmm6,%xmm1
unpcklps %xmm7,%xmm6
unpckhps %xmm7,%xmm1
movaps %xmm0,%xmm3
unpcklps %xmm5,%xmm0
unpckhps %xmm5,%xmm3
movaps -0x20(%rbp),%xmm7
movaps -0x10(%rbp),%xmm5
movaps %xmm0,-0x20(%rbp)
movaps %xmm3,-0x10(%rbp)
addps  %xmm2,%xmm4
movaps %xmm7,%xmm0
movaps %xmm5,%xmm3
addps  %xmm2,%xmm7
addps  %xmm4,%xmm5
subps  %xmm2,%xmm0
subps  %xmm4,%xmm3
movaps %xmm7,%xmm2
unpcklps %xmm3,%xmm7
unpckhps %xmm3,%xmm2
movaps %xmm5,%xmm4
unpcklps %xmm0,%xmm5
unpckhps %xmm0,%xmm4
movaps %xmm6,%xmm3
shufps $0x44,%xmm7,%xmm6
shufps $0xee,%xmm7,%xmm3
movaps %xmm1,%xmm0
shufps $0x44,%xmm2,%xmm1
shufps $0xee,%xmm2,%xmm0
movaps -0x20(%rbp),%xmm7
movaps -0x10(%rbp),%xmm2
movaps %xmm6,(%rdi)
movaps %xmm3,0x20(%rdi)
movaps %xmm1,0x40(%rdi)
movaps %xmm0,0x60(%rdi)
movaps %xmm5,%xmm6
shufps $0x44,%xmm7,%xmm5
shufps $0xee,%xmm7,%xmm6
movaps %xmm4,%xmm3
shufps $0x44,%xmm2,%xmm4
shufps $0xee,%xmm2,%xmm3
movaps %xmm5,0x10(%rdi)
movaps %xmm6,0x30(%rdi)
movaps %xmm4,0x50(%rdi)
movaps %xmm3,0x70(%rdi)

000000000004681e <jsimd_idct_float_sse2.nextcolumn>:
add    $0x8,%rsi
add    $0x10,%rdx
add    $0x80,%rdi
dec    %rcx
jne    4659b <jsimd_idct_float_sse2.columnloop>
prefetchnta 0x70(%rsi)
prefetchnta 0x90(%rsi)
prefetchnta 0xb0(%rsi)
prefetchnta 0xd0(%rsi)
mov    0x0(%rbp),%rax
lea    -0x120(%rbp),%rsi
mov    %r12,%rdi
mov    %r13d,%eax
mov    $0x2,%ecx

0000000000046865 <jsimd_idct_float_sse2.rowloop>:
movaps (%rsi),%xmm0
movaps 0x40(%rsi),%xmm1
movaps 0x80(%rsi),%xmm2
movaps 0xc0(%rsi),%xmm3
movaps %xmm0,%xmm4
movaps %xmm1,%xmm5
subps  %xmm2,%xmm0
subps  %xmm3,%xmm1
addps  %xmm2,%xmm4
addps  %xmm3,%xmm5
mulps  0x255fd(%rip),%xmm1        # 6be90 <PD_1_414>
subps  %xmm5,%xmm1
movaps %xmm4,%xmm6
movaps %xmm0,%xmm7
subps  %xmm5,%xmm4
subps  %xmm1,%xmm0
addps  %xmm5,%xmm6
addps  %xmm1,%xmm7
movaps %xmm4,-0x10(%rbp)
movaps %xmm0,-0x20(%rbp)
movaps 0x20(%rsi),%xmm2
movaps 0x60(%rsi),%xmm3
movaps 0xa0(%rsi),%xmm5
movaps 0xe0(%rsi),%xmm1
movaps %xmm2,%xmm4
movaps %xmm5,%xmm0
addps  %xmm1,%xmm2
addps  %xmm3,%xmm5
subps  %xmm1,%xmm4
subps  %xmm3,%xmm0
movaps %xmm2,%xmm1
subps  %xmm5,%xmm2
addps  %xmm5,%xmm1
mulps  0x255a8(%rip),%xmm2        # 6be90 <PD_1_414>
movaps %xmm0,%xmm3
addps  %xmm4,%xmm0
mulps  0x255ab(%rip),%xmm0        # 6bea0 <PD_1_847>
mulps  0x255c4(%rip),%xmm3        # 6bec0 <PD_M2_613>
mulps  0x255ad(%rip),%xmm4        # 6beb0 <PD_1_082>
addps  %xmm0,%xmm3
subps  %xmm0,%xmm4
subps  %xmm1,%xmm3
movaps %xmm6,%xmm5
movaps %xmm7,%xmm0
addps  %xmm1,%xmm6
addps  %xmm3,%xmm7
subps  %xmm1,%xmm5
subps  %xmm3,%xmm0
subps  %xmm3,%xmm2
movaps 0x255a8(%rip),%xmm1        # 6bed0 <PD_RNDINT_MAGIC>
pcmpeqd %xmm3,%xmm3
psrld  $0x10,%xmm3
addps  %xmm1,%xmm6
addps  %xmm1,%xmm7
addps  %xmm1,%xmm0
addps  %xmm1,%xmm5
pand   %xmm3,%xmm6
pslld  $0x10,%xmm7
pand   %xmm3,%xmm0
pslld  $0x10,%xmm5
por    %xmm7,%xmm6
por    %xmm5,%xmm0
movaps -0x20(%rbp),%xmm1
movaps -0x10(%rbp),%xmm3
addps  %xmm2,%xmm4
movaps %xmm1,%xmm7
movaps %xmm3,%xmm5
addps  %xmm2,%xmm1
addps  %xmm4,%xmm3
subps  %xmm2,%xmm7
subps  %xmm4,%xmm5
movaps 0x25555(%rip),%xmm2        # 6bed0 <PD_RNDINT_MAGIC>
pcmpeqd %xmm4,%xmm4
psrld  $0x10,%xmm4
addps  %xmm2,%xmm3
addps  %xmm2,%xmm7
addps  %xmm2,%xmm1
addps  %xmm2,%xmm5
pand   %xmm4,%xmm3
pslld  $0x10,%xmm7
pand   %xmm4,%xmm1
pslld  $0x10,%xmm5
por    %xmm7,%xmm3
por    %xmm5,%xmm1
movdqa 0x2552e(%rip),%xmm2        # 6bee0 <PB_CENTERJSAMP>
packsswb %xmm3,%xmm6
packsswb %xmm0,%xmm1
paddb  %xmm2,%xmm6
paddb  %xmm2,%xmm1
movdqa %xmm6,%xmm4
punpcklwd %xmm1,%xmm6
punpckhwd %xmm1,%xmm4
movdqa %xmm6,%xmm7
punpckldq %xmm4,%xmm6
punpckhdq %xmm4,%xmm7
pshufd $0x4e,%xmm6,%xmm5
pshufd $0x4e,%xmm7,%xmm3
mov    (%rdi),%rdx
mov    0x10(%rdi),%rbx
movq   %xmm6,(%rdx,%rax,1)
movq   %xmm7,(%rbx,%rax,1)
mov    0x8(%rdi),%rdx
mov    0x18(%rdi),%rbx
movq   %xmm5,(%rdx,%rax,1)
movq   %xmm3,(%rbx,%rax,1)
add    $0x10,%rsi
add    $0x20,%rdi
dec    %rcx
jne    46865 <jsimd_idct_float_sse2.rowloop>
pop    %rbx
pop    %r15
pop    %r14
pop    %r13
pop    %r12
pop    %r11
pop    %r10
mov    %rbp,%rsp
pop    %rsp
pop    %rbp
retq   
nop
nop
nop
nop
nop

0000000000046a30 <jsimd_idct_ifast_sse2>:
push   %rbp
mov    %rsp,%rax
sub    $0x4,%rsp
and    $0xfffffffffffffff0,%rsp
mov    %rax,(%rsp)
mov    %rsp,%rbp
lea    -0x20(%rbp),%rsp
push   %r10
push   %r11
push   %r12
push   %r13
push   %r14
push   %r15
mov    %rdi,%r10
mov    %rsi,%r11
mov    %rdx,%r12
mov    %rcx,%r13
mov    %r8,%r14
mov    %r9,%r15
mov    %r10,%rdx
mov    %r11,%rsi
mov    0x10(%rsi),%eax
or     0x20(%rsi),%eax
jne    46afa <jsimd_idct_ifast_sse2.columnDCT>
movdqa 0x10(%rsi),%xmm0
movdqa 0x20(%rsi),%xmm1
por    0x30(%rsi),%xmm0
por    0x40(%rsi),%xmm1
por    0x50(%rsi),%xmm0
por    0x60(%rsi),%xmm1
por    0x70(%rsi),%xmm0
por    %xmm0,%xmm1
packsswb %xmm1,%xmm1
packsswb %xmm1,%xmm1
movd   %xmm1,%eax
test   %rax,%rax
jne    46afa <jsimd_idct_ifast_sse2.columnDCT>
movdqa (%rsi),%xmm0
pmullw (%rdx),%xmm0
movdqa %xmm0,%xmm7
punpcklwd %xmm0,%xmm0
punpckhwd %xmm7,%xmm7
pshufd $0x0,%xmm0,%xmm6
pshufd $0x55,%xmm0,%xmm2
pshufd $0xaa,%xmm0,%xmm5
pshufd $0xff,%xmm0,%xmm0
pshufd $0x0,%xmm7,%xmm1
pshufd $0x55,%xmm7,%xmm4
pshufd $0xaa,%xmm7,%xmm3
pshufd $0xff,%xmm7,%xmm7
movdqa %xmm2,-0x20(%rbp)
movdqa %xmm0,-0x10(%rbp)
jmpq   46d06 <jsimd_idct_ifast_sse2.column_end>

0000000000046afa <jsimd_idct_ifast_sse2.columnDCT>:
movdqa (%rsi),%xmm0
movdqa 0x20(%rsi),%xmm1
pmullw (%rdx),%xmm0
pmullw 0x20(%rdx),%xmm1
movdqa 0x40(%rsi),%xmm2
movdqa 0x60(%rsi),%xmm3
pmullw 0x40(%rdx),%xmm2
pmullw 0x60(%rdx),%xmm3
movdqa %xmm0,%xmm4
movdqa %xmm1,%xmm5
psubw  %xmm2,%xmm0
psubw  %xmm3,%xmm1
paddw  %xmm2,%xmm4
paddw  %xmm3,%xmm5
psllw  $0x2,%xmm1
pmulhw 0x253ab(%rip),%xmm1        # 6bef0 <PW_F1414>
psubw  %xmm5,%xmm1
movdqa %xmm4,%xmm6
movdqa %xmm0,%xmm7
psubw  %xmm5,%xmm4
psubw  %xmm1,%xmm0
paddw  %xmm5,%xmm6
paddw  %xmm1,%xmm7
movdqa %xmm4,-0x10(%rbp)
movdqa %xmm0,-0x20(%rbp)
movdqa 0x10(%rsi),%xmm2
movdqa 0x30(%rsi),%xmm3
pmullw 0x10(%rdx),%xmm2
pmullw 0x30(%rdx),%xmm3
movdqa 0x50(%rsi),%xmm5
movdqa 0x70(%rsi),%xmm1
pmullw 0x50(%rdx),%xmm5
pmullw 0x70(%rdx),%xmm1
movdqa %xmm2,%xmm4
movdqa %xmm5,%xmm0
psubw  %xmm1,%xmm2
psubw  %xmm3,%xmm5
paddw  %xmm1,%xmm4
paddw  %xmm3,%xmm0
movdqa %xmm5,%xmm1
psllw  $0x2,%xmm2
psllw  $0x2,%xmm5
movdqa %xmm4,%xmm3
psubw  %xmm0,%xmm4
paddw  %xmm0,%xmm3
psllw  $0x2,%xmm4
pmulhw 0x2531e(%rip),%xmm4        # 6bef0 <PW_F1414>
movdqa %xmm5,%xmm0
paddw  %xmm2,%xmm5
pmulhw 0x2531e(%rip),%xmm5        # 6bf00 <PW_F1847>
pmulhw 0x25326(%rip),%xmm0        # 6bf10 <PW_MF1613>
pmulhw 0x2532e(%rip),%xmm2        # 6bf20 <PW_F1082>
psubw  %xmm1,%xmm0
psubw  %xmm5,%xmm2
paddw  %xmm5,%xmm0
psubw  %xmm3,%xmm0
movdqa %xmm6,%xmm1
movdqa %xmm7,%xmm5
paddw  %xmm3,%xmm6
paddw  %xmm0,%xmm7
psubw  %xmm3,%xmm1
psubw  %xmm0,%xmm5
psubw  %xmm0,%xmm4
movdqa %xmm6,%xmm3
punpcklwd %xmm7,%xmm6
punpckhwd %xmm7,%xmm3
movdqa %xmm5,%xmm0
punpcklwd %xmm1,%xmm5
punpckhwd %xmm1,%xmm0
movdqa -0x20(%rbp),%xmm7
movdqa -0x10(%rbp),%xmm1
movdqa %xmm5,-0x20(%rbp)
movdqa %xmm0,-0x10(%rbp)
paddw  %xmm4,%xmm2
movdqa %xmm7,%xmm5
movdqa %xmm1,%xmm0
paddw  %xmm4,%xmm7
paddw  %xmm2,%xmm1
psubw  %xmm4,%xmm5
psubw  %xmm2,%xmm0
movdqa %xmm7,%xmm4
punpcklwd %xmm0,%xmm7
punpckhwd %xmm0,%xmm4
movdqa %xmm1,%xmm2
punpcklwd %xmm5,%xmm1
punpckhwd %xmm5,%xmm2
movdqa %xmm3,%xmm0
punpckldq %xmm4,%xmm3
punpckhdq %xmm4,%xmm0
movdqa %xmm6,%xmm5
punpckldq %xmm7,%xmm6
punpckhdq %xmm7,%xmm5
movdqa -0x20(%rbp),%xmm4
movdqa -0x10(%rbp),%xmm7
movdqa %xmm3,-0x20(%rbp)
movdqa %xmm0,-0x10(%rbp)
movdqa %xmm1,%xmm3
punpckldq %xmm4,%xmm1
punpckhdq %xmm4,%xmm3
movdqa %xmm2,%xmm0
punpckldq %xmm7,%xmm2
punpckhdq %xmm7,%xmm0
movdqa %xmm6,%xmm4
punpcklqdq %xmm1,%xmm6
punpckhqdq %xmm1,%xmm4
movdqa %xmm5,%xmm7
punpcklqdq %xmm3,%xmm5
punpckhqdq %xmm3,%xmm7
movdqa -0x20(%rbp),%xmm1
movdqa -0x10(%rbp),%xmm3
movdqa %xmm4,-0x20(%rbp)
movdqa %xmm7,-0x10(%rbp)
movdqa %xmm1,%xmm4
punpcklqdq %xmm2,%xmm1
punpckhqdq %xmm2,%xmm4
movdqa %xmm3,%xmm7
punpcklqdq %xmm0,%xmm3
punpckhqdq %xmm0,%xmm7

0000000000046d06 <jsimd_idct_ifast_sse2.column_end>:
prefetchnta 0x80(%rsi)
prefetchnta 0xa0(%rsi)
prefetchnta 0xc0(%rsi)
prefetchnta 0xe0(%rsi)
mov    0x0(%rbp),%rax
mov    %r12,%rdi
mov    %r13d,%eax
movdqa %xmm6,%xmm2
movdqa %xmm5,%xmm0
psubw  %xmm1,%xmm6
psubw  %xmm3,%xmm5
paddw  %xmm1,%xmm2
paddw  %xmm3,%xmm0
psllw  $0x2,%xmm5
pmulhw 0x2519f(%rip),%xmm5        # 6bef0 <PW_F1414>
psubw  %xmm0,%xmm5
movdqa %xmm2,%xmm1
movdqa %xmm6,%xmm3
psubw  %xmm0,%xmm2
psubw  %xmm5,%xmm6
paddw  %xmm0,%xmm1
paddw  %xmm5,%xmm3
movdqa -0x20(%rbp),%xmm0
movdqa -0x10(%rbp),%xmm5
movdqa %xmm2,-0x20(%rbp)
movdqa %xmm6,-0x10(%rbp)
movdqa %xmm0,%xmm2
movdqa %xmm4,%xmm6
psubw  %xmm7,%xmm0
psubw  %xmm5,%xmm4
paddw  %xmm7,%xmm2
paddw  %xmm5,%xmm6
movdqa %xmm4,%xmm7
psllw  $0x2,%xmm0
psllw  $0x2,%xmm4
movdqa %xmm2,%xmm5
psubw  %xmm6,%xmm2
paddw  %xmm6,%xmm5
psllw  $0x2,%xmm2
pmulhw 0x25130(%rip),%xmm2        # 6bef0 <PW_F1414>
movdqa %xmm4,%xmm6
paddw  %xmm0,%xmm4
pmulhw 0x25130(%rip),%xmm4        # 6bf00 <PW_F1847>
pmulhw 0x25138(%rip),%xmm6        # 6bf10 <PW_MF1613>
pmulhw 0x25140(%rip),%xmm0        # 6bf20 <PW_F1082>
psubw  %xmm7,%xmm6
psubw  %xmm4,%xmm0
paddw  %xmm4,%xmm6
psubw  %xmm5,%xmm6
movdqa %xmm1,%xmm7
movdqa %xmm3,%xmm4
paddw  %xmm5,%xmm1
paddw  %xmm6,%xmm3
psraw  $0x5,%xmm1
psraw  $0x5,%xmm3
psubw  %xmm5,%xmm7
psubw  %xmm6,%xmm4
psraw  $0x5,%xmm7
psraw  $0x5,%xmm4
psubw  %xmm6,%xmm2
packsswb %xmm4,%xmm1
packsswb %xmm7,%xmm3
movdqa -0x10(%rbp),%xmm5
movdqa -0x20(%rbp),%xmm6
paddw  %xmm2,%xmm0
movdqa %xmm5,%xmm4
movdqa %xmm6,%xmm7
paddw  %xmm2,%xmm5
paddw  %xmm0,%xmm6
psraw  $0x5,%xmm5
psraw  $0x5,%xmm6
psubw  %xmm2,%xmm4
psubw  %xmm0,%xmm7
psraw  $0x5,%xmm4
psraw  $0x5,%xmm7
movdqa 0x250c6(%rip),%xmm2        # 6bf30 <PB_CENTERJSAMP>
packsswb %xmm6,%xmm5
packsswb %xmm4,%xmm7
paddb  %xmm2,%xmm1
paddb  %xmm2,%xmm3
paddb  %xmm2,%xmm5
paddb  %xmm2,%xmm7
movdqa %xmm1,%xmm0
punpcklbw %xmm3,%xmm1
punpckhbw %xmm3,%xmm0
movdqa %xmm5,%xmm6
punpcklbw %xmm7,%xmm5
punpckhbw %xmm7,%xmm6
movdqa %xmm1,%xmm4
punpcklwd %xmm5,%xmm1
punpckhwd %xmm5,%xmm4
movdqa %xmm6,%xmm2
punpcklwd %xmm0,%xmm6
punpckhwd %xmm0,%xmm2
movdqa %xmm1,%xmm3
punpckldq %xmm6,%xmm1
punpckhdq %xmm6,%xmm3
movdqa %xmm4,%xmm7
punpckldq %xmm2,%xmm4
punpckhdq %xmm2,%xmm7
pshufd $0x4e,%xmm1,%xmm5
pshufd $0x4e,%xmm3,%xmm0
pshufd $0x4e,%xmm4,%xmm6
pshufd $0x4e,%xmm7,%xmm2
mov    (%rdi),%rdx
mov    0x10(%rdi),%rsi
movq   %xmm1,(%rdx,%rax,1)
movq   %xmm3,(%rsi,%rax,1)
mov    0x20(%rdi),%rdx
mov    0x30(%rdi),%rsi
movq   %xmm4,(%rdx,%rax,1)
movq   %xmm7,(%rsi,%rax,1)
mov    0x8(%rdi),%rdx
mov    0x18(%rdi),%rsi
movq   %xmm5,(%rdx,%rax,1)
movq   %xmm0,(%rsi,%rax,1)
mov    0x28(%rdi),%rdx
mov    0x38(%rdi),%rsi
movq   %xmm6,(%rdx,%rax,1)
movq   %xmm2,(%rsi,%rax,1)
pop    %r15
pop    %r14
pop    %r13
pop    %r12
pop    %r11
pop    %r10
mov    %rbp,%rsp
pop    %rsp
pop    %rbp
retq   
retq   
nop
nop
nop
nop
nop
nop
nop
nop

0000000000046f40 <jsimd_idct_islow_sse2>:
push   %rbp
mov    %rsp,%rax
sub    $0x4,%rsp
and    $0xfffffffffffffff0,%rsp
mov    %rax,(%rsp)
mov    %rsp,%rbp
lea    -0xc0(%rbp),%rsp
push   %r10
push   %r11
push   %r12
push   %r13
push   %r14
push   %r15
mov    %rdi,%r10
mov    %rsi,%r11
mov    %rdx,%r12
mov    %rcx,%r13
mov    %r8,%r14
mov    %r9,%r15
mov    %r10,%rdx
mov    %r11,%rsi
mov    0x10(%rsi),%eax
or     0x20(%rsi),%eax
jne    4701c <jsimd_idct_islow_sse2.columnDCT>
movdqa 0x10(%rsi),%xmm0
movdqa 0x20(%rsi),%xmm1
por    0x30(%rsi),%xmm0
por    0x40(%rsi),%xmm1
por    0x50(%rsi),%xmm0
por    0x60(%rsi),%xmm1
por    0x70(%rsi),%xmm0
por    %xmm0,%xmm1
packsswb %xmm1,%xmm1
packsswb %xmm1,%xmm1
movd   %xmm1,%eax
test   %rax,%rax
jne    4701c <jsimd_idct_islow_sse2.columnDCT>
movdqa (%rsi),%xmm5
pmullw (%rdx),%xmm5
psllw  $0x2,%xmm5
movdqa %xmm5,%xmm4
punpcklwd %xmm5,%xmm5
punpckhwd %xmm4,%xmm4
pshufd $0x0,%xmm5,%xmm7
pshufd $0x55,%xmm5,%xmm6
pshufd $0xaa,%xmm5,%xmm1
pshufd $0xff,%xmm5,%xmm5
pshufd $0x0,%xmm4,%xmm0
pshufd $0x55,%xmm4,%xmm3
pshufd $0xaa,%xmm4,%xmm2
pshufd $0xff,%xmm4,%xmm4
movdqa %xmm6,-0x40(%rbp)
movdqa %xmm5,-0x30(%rbp)
movdqa %xmm3,-0x20(%rbp)
movdqa %xmm4,-0x10(%rbp)
jmpq   474a4 <jsimd_idct_islow_sse2.column_end>

000000000004701c <jsimd_idct_islow_sse2.columnDCT>:
movdqa (%rsi),%xmm0
movdqa 0x20(%rsi),%xmm1
pmullw (%rdx),%xmm0
pmullw 0x20(%rdx),%xmm1
movdqa 0x40(%rsi),%xmm2
movdqa 0x60(%rsi),%xmm3
pmullw 0x40(%rdx),%xmm2
pmullw 0x60(%rdx),%xmm3
movdqa %xmm1,%xmm4
movdqa %xmm1,%xmm5
punpcklwd %xmm3,%xmm4
punpckhwd %xmm3,%xmm5
movdqa %xmm4,%xmm1
movdqa %xmm5,%xmm3
pmaddwd 0x24ede(%rip),%xmm4        # 6bf40 <PW_F130_F054>
pmaddwd 0x24ed6(%rip),%xmm5        # 6bf40 <PW_F130_F054>
pmaddwd 0x24ede(%rip),%xmm1        # 6bf50 <PW_F054_MF130>
pmaddwd 0x24ed6(%rip),%xmm3        # 6bf50 <PW_F054_MF130>
movdqa %xmm0,%xmm6
paddw  %xmm2,%xmm0
psubw  %xmm2,%xmm6
pxor   %xmm7,%xmm7
pxor   %xmm2,%xmm2
punpcklwd %xmm0,%xmm7
punpckhwd %xmm0,%xmm2
psrad  $0x3,%xmm7
psrad  $0x3,%xmm2
movdqa %xmm7,%xmm0
paddd  %xmm4,%xmm7
psubd  %xmm4,%xmm0
movdqa %xmm2,%xmm4
paddd  %xmm5,%xmm2
psubd  %xmm5,%xmm4
movdqa %xmm7,-0xc0(%rbp)
movdqa %xmm2,-0xb0(%rbp)
movdqa %xmm0,-0xa0(%rbp)
movdqa %xmm4,-0x90(%rbp)
pxor   %xmm5,%xmm5
pxor   %xmm7,%xmm7
punpcklwd %xmm6,%xmm5
punpckhwd %xmm6,%xmm7
psrad  $0x3,%xmm5
psrad  $0x3,%xmm7
movdqa %xmm5,%xmm2
paddd  %xmm1,%xmm5
psubd  %xmm1,%xmm2
movdqa %xmm7,%xmm0
paddd  %xmm3,%xmm7
psubd  %xmm3,%xmm0
movdqa %xmm5,-0x80(%rbp)
movdqa %xmm7,-0x70(%rbp)
movdqa %xmm2,-0x60(%rbp)
movdqa %xmm0,-0x50(%rbp)
movdqa 0x10(%rsi),%xmm4
movdqa 0x30(%rsi),%xmm6
pmullw 0x10(%rdx),%xmm4
pmullw 0x30(%rdx),%xmm6
movdqa 0x50(%rsi),%xmm1
movdqa 0x70(%rsi),%xmm3
pmullw 0x50(%rdx),%xmm1
pmullw 0x70(%rdx),%xmm3
movdqa %xmm6,%xmm5
movdqa %xmm4,%xmm7
paddw  %xmm3,%xmm5
paddw  %xmm1,%xmm7
movdqa %xmm5,%xmm2
movdqa %xmm5,%xmm0
punpcklwd %xmm7,%xmm2
punpckhwd %xmm7,%xmm0
movdqa %xmm2,%xmm5
movdqa %xmm0,%xmm7
pmaddwd 0x24dea(%rip),%xmm2        # 6bf60 <PW_MF078_F117>
pmaddwd 0x24de2(%rip),%xmm0        # 6bf60 <PW_MF078_F117>
pmaddwd 0x24dea(%rip),%xmm5        # 6bf70 <PW_F117_F078>
pmaddwd 0x24de2(%rip),%xmm7        # 6bf70 <PW_F117_F078>
movdqa %xmm2,-0x20(%rbp)
movdqa %xmm0,-0x10(%rbp)
movdqa %xmm3,%xmm2
movdqa %xmm3,%xmm0
punpcklwd %xmm4,%xmm2
punpckhwd %xmm4,%xmm0
movdqa %xmm2,%xmm3
movdqa %xmm0,%xmm4
pmaddwd 0x24dc8(%rip),%xmm2        # 6bf80 <PW_MF060_MF089>
pmaddwd 0x24dc0(%rip),%xmm0        # 6bf80 <PW_MF060_MF089>
pmaddwd 0x24dc8(%rip),%xmm3        # 6bf90 <PW_MF089_F060>
pmaddwd 0x24dc0(%rip),%xmm4        # 6bf90 <PW_MF089_F060>
paddd  -0x20(%rbp),%xmm2
paddd  -0x10(%rbp),%xmm0
paddd  %xmm5,%xmm3
paddd  %xmm7,%xmm4
movdqa %xmm2,-0x40(%rbp)
movdqa %xmm0,-0x30(%rbp)
movdqa %xmm1,%xmm2
movdqa %xmm1,%xmm0
punpcklwd %xmm6,%xmm2
punpckhwd %xmm6,%xmm0
movdqa %xmm2,%xmm1
movdqa %xmm0,%xmm6
pmaddwd 0x24d94(%rip),%xmm2        # 6bfa0 <PW_MF050_MF256>
pmaddwd 0x24d8c(%rip),%xmm0        # 6bfa0 <PW_MF050_MF256>
pmaddwd 0x24d94(%rip),%xmm1        # 6bfb0 <PW_MF256_F050>
pmaddwd 0x24d8c(%rip),%xmm6        # 6bfb0 <PW_MF256_F050>
paddd  %xmm5,%xmm2
paddd  %xmm7,%xmm0
paddd  -0x20(%rbp),%xmm1
paddd  -0x10(%rbp),%xmm6
movdqa %xmm2,-0x20(%rbp)
movdqa %xmm0,-0x10(%rbp)
movdqa -0xc0(%rbp),%xmm5
movdqa -0xb0(%rbp),%xmm7
movdqa %xmm5,%xmm2
movdqa %xmm7,%xmm0
paddd  %xmm3,%xmm5
paddd  %xmm4,%xmm7
psubd  %xmm3,%xmm2
psubd  %xmm4,%xmm0
movdqa 0x24d50(%rip),%xmm3        # 6bfc0 <PD_DESCALE_P1>
paddd  %xmm3,%xmm5
paddd  %xmm3,%xmm7
psrad  $0xb,%xmm5
psrad  $0xb,%xmm7
paddd  %xmm3,%xmm2
paddd  %xmm3,%xmm0
psrad  $0xb,%xmm2
psrad  $0xb,%xmm0
packssdw %xmm7,%xmm5
packssdw %xmm0,%xmm2
movdqa -0x80(%rbp),%xmm4
movdqa -0x70(%rbp),%xmm3
movdqa %xmm4,%xmm7
movdqa %xmm3,%xmm0
paddd  %xmm1,%xmm4
paddd  %xmm6,%xmm3
psubd  %xmm1,%xmm7
psubd  %xmm6,%xmm0
movdqa 0x24cfa(%rip),%xmm1        # 6bfc0 <PD_DESCALE_P1>
paddd  %xmm1,%xmm4
paddd  %xmm1,%xmm3
psrad  $0xb,%xmm4
psrad  $0xb,%xmm3
paddd  %xmm1,%xmm7
paddd  %xmm1,%xmm0
psrad  $0xb,%xmm7
psrad  $0xb,%xmm0
packssdw %xmm3,%xmm4
packssdw %xmm0,%xmm7
movdqa %xmm5,%xmm6
punpcklwd %xmm4,%xmm5
punpckhwd %xmm4,%xmm6
movdqa %xmm7,%xmm1
punpcklwd %xmm2,%xmm7
punpckhwd %xmm2,%xmm1
movdqa -0x60(%rbp),%xmm3
movdqa -0x50(%rbp),%xmm0
movdqa -0x20(%rbp),%xmm4
movdqa -0x10(%rbp),%xmm2
movdqa %xmm5,-0xc0(%rbp)
movdqa %xmm6,-0xb0(%rbp)
movdqa %xmm7,-0x80(%rbp)
movdqa %xmm1,-0x70(%rbp)
movdqa %xmm3,%xmm5
movdqa %xmm0,%xmm6
paddd  %xmm4,%xmm3
paddd  %xmm2,%xmm0
psubd  %xmm4,%xmm5
psubd  %xmm2,%xmm6
movdqa 0x24c68(%rip),%xmm7        # 6bfc0 <PD_DESCALE_P1>
paddd  %xmm7,%xmm3
paddd  %xmm7,%xmm0
psrad  $0xb,%xmm3
psrad  $0xb,%xmm0
paddd  %xmm7,%xmm5
paddd  %xmm7,%xmm6
psrad  $0xb,%xmm5
psrad  $0xb,%xmm6
packssdw %xmm0,%xmm3
packssdw %xmm6,%xmm5
movdqa -0xa0(%rbp),%xmm1
movdqa -0x90(%rbp),%xmm4
movdqa -0x40(%rbp),%xmm2
movdqa -0x30(%rbp),%xmm7
movdqa %xmm1,%xmm0
movdqa %xmm4,%xmm6
paddd  %xmm2,%xmm1
paddd  %xmm7,%xmm4
psubd  %xmm2,%xmm0
psubd  %xmm7,%xmm6
movdqa 0x24c02(%rip),%xmm2        # 6bfc0 <PD_DESCALE_P1>
paddd  %xmm2,%xmm1
paddd  %xmm2,%xmm4
psrad  $0xb,%xmm1
psrad  $0xb,%xmm4
paddd  %xmm2,%xmm0
paddd  %xmm2,%xmm6
psrad  $0xb,%xmm0
psrad  $0xb,%xmm6
packssdw %xmm4,%xmm1
packssdw %xmm6,%xmm0
movdqa -0xc0(%rbp),%xmm7
movdqa -0xb0(%rbp),%xmm2
movdqa %xmm3,%xmm4
punpcklwd %xmm1,%xmm3
punpckhwd %xmm1,%xmm4
movdqa %xmm0,%xmm6
punpcklwd %xmm5,%xmm0
punpckhwd %xmm5,%xmm6
movdqa %xmm7,%xmm1
punpckldq %xmm3,%xmm7
punpckhdq %xmm3,%xmm1
movdqa %xmm2,%xmm5
punpckldq %xmm4,%xmm2
punpckhdq %xmm4,%xmm5
movdqa -0x80(%rbp),%xmm3
movdqa -0x70(%rbp),%xmm4
movdqa %xmm2,-0x60(%rbp)
movdqa %xmm5,-0x50(%rbp)
movdqa %xmm0,%xmm2
punpckldq %xmm3,%xmm0
punpckhdq %xmm3,%xmm2
movdqa %xmm6,%xmm5
punpckldq %xmm4,%xmm6
punpckhdq %xmm4,%xmm5
movdqa %xmm7,%xmm3
punpcklqdq %xmm0,%xmm7
punpckhqdq %xmm0,%xmm3
movdqa %xmm1,%xmm4
punpcklqdq %xmm2,%xmm1
punpckhqdq %xmm2,%xmm4
movdqa -0x60(%rbp),%xmm0
movdqa -0x50(%rbp),%xmm2
movdqa %xmm3,-0x40(%rbp)
movdqa %xmm4,-0x30(%rbp)
movdqa %xmm0,%xmm3
punpcklqdq %xmm6,%xmm0
punpckhqdq %xmm6,%xmm3
movdqa %xmm2,%xmm4
punpcklqdq %xmm5,%xmm2
punpckhqdq %xmm5,%xmm4
movdqa %xmm3,-0x20(%rbp)
movdqa %xmm4,-0x10(%rbp)

00000000000474a4 <jsimd_idct_islow_sse2.column_end>:
prefetchnta 0x80(%rsi)
prefetchnta 0xa0(%rsi)
prefetchnta 0xc0(%rsi)
prefetchnta 0xe0(%rsi)
mov    0x0(%rbp),%rax
mov    %r12,%rdi
mov    %r13d,%eax
movdqa %xmm1,%xmm6
movdqa %xmm1,%xmm5
punpcklwd %xmm2,%xmm6
punpckhwd %xmm2,%xmm5
movdqa %xmm6,%xmm1
movdqa %xmm5,%xmm2
pmaddwd 0x24a56(%rip),%xmm6        # 6bf40 <PW_F130_F054>
pmaddwd 0x24a4e(%rip),%xmm5        # 6bf40 <PW_F130_F054>
pmaddwd 0x24a56(%rip),%xmm1        # 6bf50 <PW_F054_MF130>
pmaddwd 0x24a4e(%rip),%xmm2        # 6bf50 <PW_F054_MF130>
movdqa %xmm7,%xmm3
paddw  %xmm0,%xmm7
psubw  %xmm0,%xmm3
pxor   %xmm4,%xmm4
pxor   %xmm0,%xmm0
punpcklwd %xmm7,%xmm4
punpckhwd %xmm7,%xmm0
psrad  $0x3,%xmm4
psrad  $0x3,%xmm0
movdqa %xmm4,%xmm7
paddd  %xmm6,%xmm4
psubd  %xmm6,%xmm7
movdqa %xmm0,%xmm6
paddd  %xmm5,%xmm0
psubd  %xmm5,%xmm6
movdqa %xmm4,-0xc0(%rbp)
movdqa %xmm0,-0xb0(%rbp)
movdqa %xmm7,-0xa0(%rbp)
movdqa %xmm6,-0x90(%rbp)
pxor   %xmm5,%xmm5
pxor   %xmm4,%xmm4
punpcklwd %xmm3,%xmm5
punpckhwd %xmm3,%xmm4
psrad  $0x3,%xmm5
psrad  $0x3,%xmm4
movdqa %xmm5,%xmm0
paddd  %xmm1,%xmm5
psubd  %xmm1,%xmm0
movdqa %xmm4,%xmm7
paddd  %xmm2,%xmm4
psubd  %xmm2,%xmm7
movdqa %xmm5,-0x80(%rbp)
movdqa %xmm4,-0x70(%rbp)
movdqa %xmm0,-0x60(%rbp)
movdqa %xmm7,-0x50(%rbp)
movdqa -0x30(%rbp),%xmm6
movdqa -0x40(%rbp),%xmm3
movdqa -0x10(%rbp),%xmm1
movdqa -0x20(%rbp),%xmm2
movdqa %xmm6,%xmm5
movdqa %xmm3,%xmm4
paddw  %xmm1,%xmm5
paddw  %xmm2,%xmm4
movdqa %xmm5,%xmm0
movdqa %xmm5,%xmm7
punpcklwd %xmm4,%xmm0
punpckhwd %xmm4,%xmm7
movdqa %xmm0,%xmm5
movdqa %xmm7,%xmm4
pmaddwd 0x24976(%rip),%xmm0        # 6bf60 <PW_MF078_F117>
pmaddwd 0x2496e(%rip),%xmm7        # 6bf60 <PW_MF078_F117>
pmaddwd 0x24976(%rip),%xmm5        # 6bf70 <PW_F117_F078>
pmaddwd 0x2496e(%rip),%xmm4        # 6bf70 <PW_F117_F078>
movdqa %xmm0,-0x20(%rbp)
movdqa %xmm7,-0x10(%rbp)
movdqa %xmm1,%xmm0
movdqa %xmm1,%xmm7
punpcklwd %xmm3,%xmm0
punpckhwd %xmm3,%xmm7
movdqa %xmm0,%xmm1
movdqa %xmm7,%xmm3
pmaddwd 0x24954(%rip),%xmm0        # 6bf80 <PW_MF060_MF089>
pmaddwd 0x2494c(%rip),%xmm7        # 6bf80 <PW_MF060_MF089>
pmaddwd 0x24954(%rip),%xmm1        # 6bf90 <PW_MF089_F060>
pmaddwd 0x2494c(%rip),%xmm3        # 6bf90 <PW_MF089_F060>
paddd  -0x20(%rbp),%xmm0
paddd  -0x10(%rbp),%xmm7
paddd  %xmm5,%xmm1
paddd  %xmm4,%xmm3
movdqa %xmm0,-0x40(%rbp)
movdqa %xmm7,-0x30(%rbp)
movdqa %xmm2,%xmm0
movdqa %xmm2,%xmm7
punpcklwd %xmm6,%xmm0
punpckhwd %xmm6,%xmm7
movdqa %xmm0,%xmm2
movdqa %xmm7,%xmm6
pmaddwd 0x24920(%rip),%xmm0        # 6bfa0 <PW_MF050_MF256>
pmaddwd 0x24918(%rip),%xmm7        # 6bfa0 <PW_MF050_MF256>
pmaddwd 0x24920(%rip),%xmm2        # 6bfb0 <PW_MF256_F050>
pmaddwd 0x24918(%rip),%xmm6        # 6bfb0 <PW_MF256_F050>
paddd  %xmm5,%xmm0
paddd  %xmm4,%xmm7
paddd  -0x20(%rbp),%xmm2
paddd  -0x10(%rbp),%xmm6
movdqa %xmm0,-0x20(%rbp)
movdqa %xmm7,-0x10(%rbp)
movdqa -0xc0(%rbp),%xmm5
movdqa -0xb0(%rbp),%xmm4
movdqa %xmm5,%xmm0
movdqa %xmm4,%xmm7
paddd  %xmm1,%xmm5
paddd  %xmm3,%xmm4
psubd  %xmm1,%xmm0
psubd  %xmm3,%xmm7
movdqa 0x248ec(%rip),%xmm1        # 6bfd0 <PD_DESCALE_P2>
paddd  %xmm1,%xmm5
paddd  %xmm1,%xmm4
psrad  $0x12,%xmm5
psrad  $0x12,%xmm4
paddd  %xmm1,%xmm0
paddd  %xmm1,%xmm7
psrad  $0x12,%xmm0
psrad  $0x12,%xmm7
packssdw %xmm4,%xmm5
packssdw %xmm7,%xmm0
movdqa -0x80(%rbp),%xmm3
movdqa -0x70(%rbp),%xmm1
movdqa %xmm3,%xmm4
movdqa %xmm1,%xmm7
paddd  %xmm2,%xmm3
paddd  %xmm6,%xmm1
psubd  %xmm2,%xmm4
psubd  %xmm6,%xmm7
movdqa 0x24896(%rip),%xmm2        # 6bfd0 <PD_DESCALE_P2>
paddd  %xmm2,%xmm3
paddd  %xmm2,%xmm1
psrad  $0x12,%xmm3
psrad  $0x12,%xmm1
paddd  %xmm2,%xmm4
paddd  %xmm2,%xmm7
psrad  $0x12,%xmm4
psrad  $0x12,%xmm7
packssdw %xmm1,%xmm3
packssdw %xmm7,%xmm4
packsswb %xmm4,%xmm5
packsswb %xmm0,%xmm3
movdqa -0x60(%rbp),%xmm6
movdqa -0x50(%rbp),%xmm2
movdqa -0x20(%rbp),%xmm1
movdqa -0x10(%rbp),%xmm7
movdqa %xmm5,-0xc0(%rbp)
movdqa %xmm3,-0xb0(%rbp)
movdqa %xmm6,%xmm4
movdqa %xmm2,%xmm0
paddd  %xmm1,%xmm6
paddd  %xmm7,%xmm2
psubd  %xmm1,%xmm4
psubd  %xmm7,%xmm0
movdqa 0x2481e(%rip),%xmm5        # 6bfd0 <PD_DESCALE_P2>
paddd  %xmm5,%xmm6
paddd  %xmm5,%xmm2
psrad  $0x12,%xmm6
psrad  $0x12,%xmm2
paddd  %xmm5,%xmm4
paddd  %xmm5,%xmm0
psrad  $0x12,%xmm4
psrad  $0x12,%xmm0
packssdw %xmm2,%xmm6
packssdw %xmm0,%xmm4
movdqa -0xa0(%rbp),%xmm3
movdqa -0x90(%rbp),%xmm1
movdqa -0x40(%rbp),%xmm7
movdqa -0x30(%rbp),%xmm5
movdqa %xmm3,%xmm2
movdqa %xmm1,%xmm0
paddd  %xmm7,%xmm3
paddd  %xmm5,%xmm1
psubd  %xmm7,%xmm2
psubd  %xmm5,%xmm0
movdqa 0x247b8(%rip),%xmm7        # 6bfd0 <PD_DESCALE_P2>
paddd  %xmm7,%xmm3
paddd  %xmm7,%xmm1
psrad  $0x12,%xmm3
psrad  $0x12,%xmm1
paddd  %xmm7,%xmm2
paddd  %xmm7,%xmm0
psrad  $0x12,%xmm2
psrad  $0x12,%xmm0
movdqa 0x2479c(%rip),%xmm5        # 6bfe0 <PB_CENTERJSAMP>
packssdw %xmm1,%xmm3
packssdw %xmm0,%xmm2
movdqa -0xc0(%rbp),%xmm7
movdqa -0xb0(%rbp),%xmm1
packsswb %xmm2,%xmm6
packsswb %xmm4,%xmm3
paddb  %xmm5,%xmm7
paddb  %xmm5,%xmm1
paddb  %xmm5,%xmm6
paddb  %xmm5,%xmm3
movdqa %xmm7,%xmm0
punpcklbw %xmm1,%xmm7
punpckhbw %xmm1,%xmm0
movdqa %xmm6,%xmm2
punpcklbw %xmm3,%xmm6
punpckhbw %xmm3,%xmm2
movdqa %xmm7,%xmm4
punpcklwd %xmm6,%xmm7
punpckhwd %xmm6,%xmm4
movdqa %xmm2,%xmm5
punpcklwd %xmm0,%xmm2
punpckhwd %xmm0,%xmm5
movdqa %xmm7,%xmm1
punpckldq %xmm2,%xmm7
punpckhdq %xmm2,%xmm1
movdqa %xmm4,%xmm3
punpckldq %xmm5,%xmm4
punpckhdq %xmm5,%xmm3
pshufd $0x4e,%xmm7,%xmm6
pshufd $0x4e,%xmm1,%xmm0
pshufd $0x4e,%xmm4,%xmm2
pshufd $0x4e,%xmm3,%xmm5
mov    (%rdi),%rdx
mov    0x10(%rdi),%rsi
movq   %xmm7,(%rdx,%rax,1)
movq   %xmm1,(%rsi,%rax,1)
mov    0x20(%rdi),%rdx
mov    0x30(%rdi),%rsi
movq   %xmm4,(%rdx,%rax,1)
movq   %xmm3,(%rsi,%rax,1)
mov    0x8(%rdi),%rdx
mov    0x18(%rdi),%rsi
movq   %xmm6,(%rdx,%rax,1)
movq   %xmm0,(%rsi,%rax,1)
mov    0x28(%rdi),%rdx
mov    0x38(%rdi),%rsi
movq   %xmm2,(%rdx,%rax,1)
movq   %xmm5,(%rsi,%rax,1)
pop    %r15
pop    %r14
pop    %r13
pop    %r12
pop    %r11
pop    %r10
mov    %rbp,%rsp
pop    %rsp
pop    %rbp
retq   
nop
nop
nop
nop
nop
nop
nop

0000000000047930 <jsimd_idct_4x4_sse2>:
push   %rbp
mov    %rsp,%rax
sub    $0x4,%rsp
and    $0xfffffffffffffff0,%rsp
mov    %rax,(%rsp)
mov    %rsp,%rbp
lea    -0x20(%rbp),%rsp
push   %r10
push   %r11
push   %r12
push   %r13
push   %r14
push   %r15
mov    %rdi,%r10
mov    %rsi,%r11
mov    %rdx,%r12
mov    %rcx,%r13
mov    %r8,%r14
mov    %r9,%r15
mov    %r10,%rdx
mov    %r11,%rsi
mov    0x10(%rsi),%eax
or     0x20(%rsi),%eax
jne    479d8 <jsimd_idct_4x4_sse2.columnDCT>
movdqa 0x10(%rsi),%xmm0
movdqa 0x20(%rsi),%xmm1
por    0x30(%rsi),%xmm0
por    0x50(%rsi),%xmm1
por    0x60(%rsi),%xmm0
por    0x70(%rsi),%xmm1
por    %xmm1,%xmm0
packsswb %xmm0,%xmm0
packsswb %xmm0,%xmm0
movd   %xmm0,%eax
test   %rax,%rax
jne    479d8 <jsimd_idct_4x4_sse2.columnDCT>
movdqa (%rsi),%xmm0
pmullw (%rdx),%xmm0
psllw  $0x2,%xmm0
movdqa %xmm0,%xmm3
punpcklwd %xmm0,%xmm0
punpckhwd %xmm3,%xmm3
pshufd $0x50,%xmm0,%xmm1
pshufd $0xfa,%xmm0,%xmm0
pshufd $0x50,%xmm3,%xmm6
pshufd $0xfa,%xmm3,%xmm3
jmpq   47bc6 <jsimd_idct_4x4_sse2.column_end>

00000000000479d8 <jsimd_idct_4x4_sse2.columnDCT>:
movdqa 0x10(%rsi),%xmm0
movdqa 0x30(%rsi),%xmm1
pmullw 0x10(%rdx),%xmm0
pmullw 0x30(%rdx),%xmm1
movdqa 0x50(%rsi),%xmm2
movdqa 0x70(%rsi),%xmm3
pmullw 0x50(%rdx),%xmm2
pmullw 0x70(%rdx),%xmm3
movdqa %xmm0,%xmm4
movdqa %xmm0,%xmm5
punpcklwd %xmm1,%xmm4
punpckhwd %xmm1,%xmm5
movdqa %xmm4,%xmm0
movdqa %xmm5,%xmm1
pmaddwd 0x245e0(%rip),%xmm4        # 6c000 <PW_F256_F089>
pmaddwd 0x245d8(%rip),%xmm5        # 6c000 <PW_F256_F089>
pmaddwd 0x245e0(%rip),%xmm0        # 6c010 <PW_F106_MF217>
pmaddwd 0x245d8(%rip),%xmm1        # 6c010 <PW_F106_MF217>
movdqa %xmm2,%xmm6
movdqa %xmm2,%xmm7
punpcklwd %xmm3,%xmm6
punpckhwd %xmm3,%xmm7
movdqa %xmm6,%xmm2
movdqa %xmm7,%xmm3
pmaddwd 0x245c8(%rip),%xmm6        # 6c020 <PW_MF060_MF050>
pmaddwd 0x245c0(%rip),%xmm7        # 6c020 <PW_MF060_MF050>
pmaddwd 0x245c8(%rip),%xmm2        # 6c030 <PW_F145_MF021>
pmaddwd 0x245c0(%rip),%xmm3        # 6c030 <PW_F145_MF021>
paddd  %xmm4,%xmm6
paddd  %xmm5,%xmm7
paddd  %xmm0,%xmm2
paddd  %xmm1,%xmm3
movdqa %xmm2,-0x20(%rbp)
movdqa %xmm3,-0x10(%rbp)
movdqa (%rsi),%xmm4
movdqa 0x20(%rsi),%xmm5
movdqa 0x60(%rsi),%xmm0
pmullw (%rdx),%xmm4
pmullw 0x20(%rdx),%xmm5
pmullw 0x60(%rdx),%xmm0
pxor   %xmm1,%xmm1
pxor   %xmm2,%xmm2
punpcklwd %xmm4,%xmm1
punpckhwd %xmm4,%xmm2
psrad  $0x2,%xmm1
psrad  $0x2,%xmm2
movdqa %xmm5,%xmm3
punpcklwd %xmm0,%xmm5
punpckhwd %xmm0,%xmm3
pmaddwd 0x2451c(%rip),%xmm5        # 6bff0 <PW_F184_MF076>
pmaddwd 0x24514(%rip),%xmm3        # 6bff0 <PW_F184_MF076>
movdqa %xmm1,%xmm4
movdqa %xmm2,%xmm0
paddd  %xmm5,%xmm1
paddd  %xmm3,%xmm2
psubd  %xmm5,%xmm4
psubd  %xmm3,%xmm0
movdqa %xmm1,%xmm5
movdqa %xmm2,%xmm3
paddd  %xmm6,%xmm1
paddd  %xmm7,%xmm2
psubd  %xmm6,%xmm5
psubd  %xmm7,%xmm3
movdqa 0x2454c(%rip),%xmm6        # 6c060 <PD_DESCALE_P1_4>
paddd  %xmm6,%xmm1
paddd  %xmm6,%xmm2
psrad  $0xc,%xmm1
psrad  $0xc,%xmm2
paddd  %xmm6,%xmm5
paddd  %xmm6,%xmm3
psrad  $0xc,%xmm5
psrad  $0xc,%xmm3
packssdw %xmm2,%xmm1
packssdw %xmm3,%xmm5
movdqa -0x20(%rbp),%xmm7
movdqa -0x10(%rbp),%xmm6
movdqa %xmm4,%xmm2
movdqa %xmm0,%xmm3
paddd  %xmm7,%xmm4
paddd  %xmm6,%xmm0
psubd  %xmm7,%xmm2
psubd  %xmm6,%xmm3
movdqa 0x244f6(%rip),%xmm7        # 6c060 <PD_DESCALE_P1_4>
paddd  %xmm7,%xmm4
paddd  %xmm7,%xmm0
psrad  $0xc,%xmm4
psrad  $0xc,%xmm0
paddd  %xmm7,%xmm2
paddd  %xmm7,%xmm3
psrad  $0xc,%xmm2
psrad  $0xc,%xmm3
packssdw %xmm0,%xmm4
packssdw %xmm3,%xmm2
movdqa %xmm1,%xmm6
punpcklwd %xmm4,%xmm1
punpckhwd %xmm4,%xmm6
movdqa %xmm2,%xmm7
punpcklwd %xmm5,%xmm2
punpckhwd %xmm5,%xmm7
movdqa %xmm1,%xmm0
punpckldq %xmm2,%xmm1
punpckhdq %xmm2,%xmm0
movdqa %xmm6,%xmm3
punpckldq %xmm7,%xmm6
punpckhdq %xmm7,%xmm3

0000000000047bc6 <jsimd_idct_4x4_sse2.column_end>:
prefetchnta 0x80(%rsi)
prefetchnta 0xa0(%rsi)
prefetchnta 0xc0(%rsi)
prefetchnta 0xe0(%rsi)
mov    0x0(%rbp),%rax
mov    %r12,%rdi
mov    %r13d,%eax
pxor   %xmm4,%xmm4
punpcklwd %xmm1,%xmm4
psrad  $0x2,%xmm4
punpckhwd %xmm0,%xmm1
punpckhwd %xmm3,%xmm6
movdqa %xmm1,%xmm5
movdqa %xmm6,%xmm2
pmaddwd 0x243ef(%rip),%xmm1        # 6c000 <PW_F256_F089>
pmaddwd 0x24407(%rip),%xmm6        # 6c020 <PW_MF060_MF050>
pmaddwd 0x243ef(%rip),%xmm5        # 6c010 <PW_F106_MF217>
pmaddwd 0x24407(%rip),%xmm2        # 6c030 <PW_F145_MF021>
paddd  %xmm1,%xmm6
paddd  %xmm5,%xmm2
punpcklwd %xmm3,%xmm0
pmaddwd 0x243b3(%rip),%xmm0        # 6bff0 <PW_F184_MF076>
movdqa %xmm4,%xmm7
paddd  %xmm0,%xmm4
psubd  %xmm0,%xmm7
movdqa 0x2441f(%rip),%xmm1        # 6c070 <PD_DESCALE_P2_4>
movdqa %xmm4,%xmm5
movdqa %xmm7,%xmm3
paddd  %xmm6,%xmm4
paddd  %xmm2,%xmm7
psubd  %xmm6,%xmm5
psubd  %xmm2,%xmm3
paddd  %xmm1,%xmm4
paddd  %xmm1,%xmm7
psrad  $0x13,%xmm4
psrad  $0x13,%xmm7
paddd  %xmm1,%xmm5
paddd  %xmm1,%xmm3
psrad  $0x13,%xmm5
psrad  $0x13,%xmm3
packssdw %xmm3,%xmm4
packssdw %xmm5,%xmm7
movdqa %xmm4,%xmm0
punpcklwd %xmm7,%xmm4
punpckhwd %xmm7,%xmm0
movdqa %xmm4,%xmm6
punpckldq %xmm0,%xmm4
punpckhdq %xmm0,%xmm6
packsswb %xmm6,%xmm4
paddb  0x243e7(%rip),%xmm4        # 6c0a0 <PB_CENTERJSAMP>
pshufd $0x39,%xmm4,%xmm2
pshufd $0x4e,%xmm4,%xmm1
pshufd $0x93,%xmm4,%xmm3
mov    (%rdi),%rdx
mov    0x8(%rdi),%rsi
movd   %xmm4,(%rdx,%rax,1)
movd   %xmm2,(%rsi,%rax,1)
mov    0x10(%rdi),%rdx
mov    0x18(%rdi),%rsi
movd   %xmm1,(%rdx,%rax,1)
movd   %xmm3,(%rsi,%rax,1)
pop    %r15
pop    %r14
pop    %r13
pop    %r12
pop    %r11
pop    %r10
mov    %rbp,%rsp
pop    %rsp
pop    %rbp
retq   
nop
nop
nop

0000000000047d00 <jsimd_idct_2x2_sse2>:
push   %rbp
mov    %rsp,%rax
mov    %rsp,%rbp
push   %r10
push   %r11
push   %r12
push   %r13
push   %r14
push   %r15
mov    %rdi,%r10
mov    %rsi,%r11
mov    %rdx,%r12
mov    %rcx,%r13
mov    %r8,%r14
mov    %r9,%r15
push   %rbx
mov    %r10,%rdx
mov    %r11,%rsi
movdqa 0x10(%rsi),%xmm0
movdqa 0x30(%rsi),%xmm1
pmullw 0x10(%rdx),%xmm0
pmullw 0x30(%rdx),%xmm1
movdqa 0x50(%rsi),%xmm2
movdqa 0x70(%rsi),%xmm3
pmullw 0x50(%rdx),%xmm2
pmullw 0x70(%rdx),%xmm3
pcmpeqd %xmm7,%xmm7
pslld  $0x10,%xmm7
movdqa %xmm0,%xmm4
movdqa %xmm2,%xmm5
punpcklwd %xmm1,%xmm4
punpcklwd %xmm3,%xmm5
pmaddwd 0x242cb(%rip),%xmm4        # 6c040 <PW_F362_MF127>
pmaddwd 0x242d3(%rip),%xmm5        # 6c050 <PW_F085_MF072>
psrld  $0x10,%xmm0
pand   %xmm7,%xmm1
psrld  $0x10,%xmm2
pand   %xmm7,%xmm3
por    %xmm1,%xmm0
por    %xmm3,%xmm2
pmaddwd 0x242a1(%rip),%xmm0        # 6c040 <PW_F362_MF127>
pmaddwd 0x242a9(%rip),%xmm2        # 6c050 <PW_F085_MF072>
paddd  %xmm5,%xmm4
paddd  %xmm2,%xmm0
movdqa (%rsi),%xmm6
pmullw (%rdx),%xmm6
movdqa %xmm6,%xmm1
pslld  $0x10,%xmm6
pand   %xmm7,%xmm1
psrad  $0x1,%xmm6
psrad  $0x1,%xmm1
movdqa %xmm6,%xmm3
movdqa %xmm1,%xmm5
paddd  %xmm4,%xmm6
paddd  %xmm0,%xmm1
psubd  %xmm4,%xmm3
psubd  %xmm0,%xmm5
movdqa 0x24292(%rip),%xmm2        # 6c080 <PD_DESCALE_P1_2>
punpckldq %xmm3,%xmm6
movdqa %xmm1,%xmm7
punpcklqdq %xmm5,%xmm1
punpckhqdq %xmm5,%xmm7
paddd  %xmm2,%xmm6
psrad  $0xd,%xmm6
paddd  %xmm2,%xmm1
paddd  %xmm2,%xmm7
psrad  $0xd,%xmm1
psrad  $0xd,%xmm7
prefetchnta 0x80(%rsi)
prefetchnta 0xa0(%rsi)
prefetchnta 0xc0(%rsi)
prefetchnta 0xe0(%rsi)
mov    %r12,%rdi
mov    %r13d,%eax
packssdw %xmm1,%xmm1
packssdw %xmm7,%xmm7
pmaddwd 0x241f5(%rip),%xmm1        # 6c040 <PW_F362_MF127>
pmaddwd 0x241fd(%rip),%xmm7        # 6c050 <PW_F085_MF072>
paddd  %xmm7,%xmm1
pslld  $0xf,%xmm6
movdqa %xmm6,%xmm4
paddd  %xmm1,%xmm6
psubd  %xmm1,%xmm4
punpckldq %xmm4,%xmm6
paddd  0x2421c(%rip),%xmm6        # 6c090 <PD_DESCALE_P2_2>
psrad  $0x14,%xmm6
packssdw %xmm6,%xmm6
packsswb %xmm6,%xmm6
paddb  0x24217(%rip),%xmm6        # 6c0a0 <PB_CENTERJSAMP>
pextrw $0x0,%xmm6,%ebx
pextrw $0x1,%xmm6,%ecx
mov    (%rdi),%rdx
mov    0x8(%rdi),%rsi
mov    %bx,(%rdx,%rax,1)
mov    %cx,(%rsi,%rax,1)
pop    %rbx
pop    %r15
pop    %r14
pop    %r13
pop    %r12
pop    %r11
pop    %r10
pop    %rbp
retq   
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop

0000000000047ec0 <jsimd_convsamp_float_sse2>:
push   %rbp
mov    %rsp,%rax
mov    %rsp,%rbp
push   %r10
push   %r11
push   %r12
push   %r13
push   %r14
push   %r15
mov    %rdi,%r10
mov    %rsi,%r11
mov    %rdx,%r12
mov    %rcx,%r13
mov    %r8,%r14
mov    %r9,%r15
push   %rbx
pcmpeqw %xmm7,%xmm7
psllw  $0x7,%xmm7
packsswb %xmm7,%xmm7
mov    %r10,%rsi
mov    %r11d,%eax
mov    %r12,%rdi
mov    $0x4,%ecx

0000000000047f01 <jsimd_convsamp_float_sse2.convloop>:
mov    (%rsi),%rbx
mov    0x8(%rsi),%rdx
movq   (%rbx,%rax,1),%xmm0
movq   (%rdx,%rax,1),%xmm1
psubb  %xmm7,%xmm0
psubb  %xmm7,%xmm1
punpcklbw %xmm0,%xmm0
punpcklbw %xmm1,%xmm1
punpcklwd %xmm0,%xmm2
punpckhwd %xmm0,%xmm0
punpcklwd %xmm1,%xmm3
punpckhwd %xmm1,%xmm1
psrad  $0x18,%xmm2
psrad  $0x18,%xmm0
cvtdq2ps %xmm2,%xmm2
cvtdq2ps %xmm0,%xmm0
psrad  $0x18,%xmm3
psrad  $0x18,%xmm1
cvtdq2ps %xmm3,%xmm3
cvtdq2ps %xmm1,%xmm1
movaps %xmm2,(%rdi)
movaps %xmm0,0x10(%rdi)
movaps %xmm3,0x20(%rdi)
movaps %xmm1,0x30(%rdi)
add    $0x10,%rsi
add    $0x40,%rdi
dec    %rcx
jne    47f01 <jsimd_convsamp_float_sse2.convloop>
pop    %rbx
pop    %r15
pop    %r14
pop    %r13
pop    %r12
pop    %r11
pop    %r10
pop    %rbp
retq   
nop
nop
nop

0000000000047f80 <jsimd_quantize_float_sse2>:
push   %rbp
mov    %rsp,%rax
mov    %rsp,%rbp
push   %r10
push   %r11
push   %r12
push   %r13
push   %r14
push   %r15
mov    %rdi,%r10
mov    %rsi,%r11
mov    %rdx,%r12
mov    %rcx,%r13
mov    %r8,%r14
mov    %r9,%r15
mov    %r12,%rsi
mov    %r11,%rdx
mov    %r10,%rdi
mov    $0x4,%eax

0000000000047fb3 <jsimd_quantize_float_sse2.quantloop>:
movaps (%rsi),%xmm0
movaps 0x10(%rsi),%xmm1
mulps  (%rdx),%xmm0
mulps  0x10(%rdx),%xmm1
movaps 0x20(%rsi),%xmm2
movaps 0x30(%rsi),%xmm3
mulps  0x20(%rdx),%xmm2
mulps  0x30(%rdx),%xmm3
cvtps2dq %xmm0,%xmm0
cvtps2dq %xmm1,%xmm1
cvtps2dq %xmm2,%xmm2
cvtps2dq %xmm3,%xmm3
packssdw %xmm1,%xmm0
packssdw %xmm3,%xmm2
movdqa %xmm0,(%rdi)
movdqa %xmm2,0x10(%rdi)
add    $0x40,%rsi
add    $0x40,%rdx
add    $0x20,%rdi
dec    %rax
jne    47fb3 <jsimd_quantize_float_sse2.quantloop>
pop    %r15
pop    %r14
pop    %r13
pop    %r12
pop    %r11
pop    %r10
pop    %rbp
retq   
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop

0000000000048020 <jsimd_convsamp_sse2>:
push   %rbp
mov    %rsp,%rax
mov    %rsp,%rbp
push   %r10
push   %r11
push   %r12
push   %r13
push   %r14
push   %r15
mov    %rdi,%r10
mov    %rsi,%r11
mov    %rdx,%r12
mov    %rcx,%r13
mov    %r8,%r14
mov    %r9,%r15
push   %rbx
pxor   %xmm6,%xmm6
pcmpeqw %xmm7,%xmm7
psllw  $0x7,%xmm7
mov    %r10,%rsi
mov    %r11d,%eax
mov    %r12,%rdi
mov    $0x2,%ecx

0000000000048061 <jsimd_convsamp_sse2.convloop>:
mov    (%rsi),%rbx
mov    0x8(%rsi),%rdx
movq   (%rbx,%rax,1),%xmm0
movq   (%rdx,%rax,1),%xmm1
mov    0x10(%rsi),%rbx
mov    0x18(%rsi),%rdx
movq   (%rbx,%rax,1),%xmm2
movq   (%rdx,%rax,1),%xmm3
punpcklbw %xmm6,%xmm0
punpcklbw %xmm6,%xmm1
paddw  %xmm7,%xmm0
paddw  %xmm7,%xmm1
punpcklbw %xmm6,%xmm2
punpcklbw %xmm6,%xmm3
paddw  %xmm7,%xmm2
paddw  %xmm7,%xmm3
movdqa %xmm0,(%rdi)
movdqa %xmm1,0x10(%rdi)
movdqa %xmm2,0x20(%rdi)
movdqa %xmm3,0x30(%rdi)
add    $0x20,%rsi
add    $0x40,%rdi
dec    %rcx
jne    48061 <jsimd_convsamp_sse2.convloop>
pop    %rbx
pop    %r15
pop    %r14
pop    %r13
pop    %r12
pop    %r11
pop    %r10
pop    %rbp
retq   
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop

00000000000480e0 <jsimd_quantize_sse2>:
push   %rbp
mov    %rsp,%rax
mov    %rsp,%rbp
push   %r10
push   %r11
push   %r12
push   %r13
push   %r14
push   %r15
mov    %rdi,%r10
mov    %rsi,%r11
mov    %rdx,%r12
mov    %rcx,%r13
mov    %r8,%r14
mov    %r9,%r15
mov    %r12,%rsi
mov    %r11,%rdx
mov    %r10,%rdi
mov    $0x2,%eax

0000000000048113 <jsimd_quantize_sse2.quantloop>:
movdqa (%rsi),%xmm4
movdqa 0x10(%rsi),%xmm5
movdqa 0x20(%rsi),%xmm6
movdqa 0x30(%rsi),%xmm7
movdqa %xmm4,%xmm0
movdqa %xmm5,%xmm1
movdqa %xmm6,%xmm2
movdqa %xmm7,%xmm3
psraw  $0xf,%xmm4
psraw  $0xf,%xmm5
psraw  $0xf,%xmm6
psraw  $0xf,%xmm7
pxor   %xmm4,%xmm0
pxor   %xmm5,%xmm1
pxor   %xmm6,%xmm2
pxor   %xmm7,%xmm3
psubw  %xmm4,%xmm0
psubw  %xmm5,%xmm1
psubw  %xmm6,%xmm2
psubw  %xmm7,%xmm3
paddw  0x80(%rdx),%xmm0
paddw  0x90(%rdx),%xmm1
paddw  0xa0(%rdx),%xmm2
paddw  0xb0(%rdx),%xmm3
pmulhuw (%rdx),%xmm0
pmulhuw 0x10(%rdx),%xmm1
pmulhuw 0x20(%rdx),%xmm2
pmulhuw 0x30(%rdx),%xmm3
pmulhuw 0x100(%rdx),%xmm0
pmulhuw 0x110(%rdx),%xmm1
pmulhuw 0x120(%rdx),%xmm2
pmulhuw 0x130(%rdx),%xmm3
pxor   %xmm4,%xmm0
pxor   %xmm5,%xmm1
pxor   %xmm6,%xmm2
pxor   %xmm7,%xmm3
psubw  %xmm4,%xmm0
psubw  %xmm5,%xmm1
psubw  %xmm6,%xmm2
psubw  %xmm7,%xmm3
movdqa %xmm0,(%rdi)
movdqa %xmm1,0x10(%rdi)
movdqa %xmm2,0x20(%rdi)
movdqa %xmm3,0x30(%rdi)
add    $0x40,%rsi
add    $0x40,%rdx
add    $0x40,%rdi
dec    %rax
jne    48113 <jsimd_quantize_sse2.quantloop>
pop    %r15
pop    %r14
pop    %r13
pop    %r12
pop    %r11
pop    %r10
pop    %rbp
retq   
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop

Disassembly of section .fini:

0000000000048220 <_fini>:
endbr64 
sub    $0x8,%rsp
add    $0x8,%rsp
retq   
