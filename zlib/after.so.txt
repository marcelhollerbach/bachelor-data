
r.so:     file format elf64-x86-64


ly of section .init:

0002000 <_init>:
	endbr64 
	sub    $0x8,%rsp
	mov    0x15fc1(%rip),%rax        # 17fd0 <__gmon_start__>
	test   %rax,%rax
	je     2016 <_init+0x16>
	callq  *%rax
	add    $0x8,%rsp
	retq   

ly of section .plt:

0002020 <.plt>:
	pushq  0x15fe2(%rip)        # 18008 <_GLOBAL_OFFSET_TABLE_+0x8>
	jmpq   *0x15fe4(%rip)        # 18010 <_GLOBAL_OFFSET_TABLE_+0x10>
	nopl   0x0(%rax)

0002030 <crc32_z@plt>:
	jmpq   *0x15fe2(%rip)        # 18018 <crc32_z@@Base+0x157c8>
	pushq  $0x0
	jmpq   2020 <.plt>

0002040 <gzvprintf@plt>:
	jmpq   *0x15fda(%rip)        # 18020 <gzvprintf@@Base+0x6ee0>
	pushq  $0x1
	jmpq   2020 <.plt>

0002050 <gzseek64@plt>:
	jmpq   *0x15fd2(%rip)        # 18028 <gzseek64@@Base+0x8c08>
	pushq  $0x2
	jmpq   2020 <.plt>

0002060 <free@plt>:
	jmpq   *0x15fca(%rip)        # 18030 <free@GLIBC_2.2.5>
	pushq  $0x3
	jmpq   2020 <.plt>

0002070 <__errno_location@plt>:
	jmpq   *0x15fc2(%rip)        # 18038 <__errno_location@GLIBC_2.2.5>
	pushq  $0x4
	jmpq   2020 <.plt>

0002080 <inflate@plt>:
	jmpq   *0x15fba(%rip)        # 18040 <inflate@@Base+0xef60>
	pushq  $0x5
	jmpq   2020 <.plt>

0002090 <gzclose_r@plt>:
	jmpq   *0x15fb2(%rip)        # 18048 <gzclose_r@@Base+0x7f98>
	pushq  $0x6
	jmpq   2020 <.plt>

00020a0 <gz_error@plt>:
	jmpq   *0x15faa(%rip)        # 18050 <gz_error@@Base+0x8970>
	pushq  $0x7
	jmpq   2020 <.plt>

00020b0 <gzgetc@plt>:
	jmpq   *0x15fa2(%rip)        # 18058 <gzgetc@@Base+0x81b8>
	pushq  $0x8
	jmpq   2020 <.plt>

00020c0 <vsnprintf@plt>:
	jmpq   *0x15f9a(%rip)        # 18060 <vsnprintf@GLIBC_2.2.5>
	pushq  $0x9
	jmpq   2020 <.plt>

00020d0 <crc32@plt>:
	jmpq   *0x15f92(%rip)        # 18068 <crc32@@Base+0x15828>
	pushq  $0xa
	jmpq   2020 <.plt>

00020e0 <write@plt>:
	jmpq   *0x15f8a(%rip)        # 18070 <write@GLIBC_2.2.5>
	pushq  $0xb
	jmpq   2020 <.plt>

00020f0 <inflateResetKeep@plt>:
	jmpq   *0x15f82(%rip)        # 18078 <inflateResetKeep@@Base+0xbe18>
	pushq  $0xc
	jmpq   2020 <.plt>

0002100 <_tr_init@plt>:
	jmpq   *0x15f7a(%rip)        # 18080 <_tr_init@@Base+0xb460>
	pushq  $0xd
	jmpq   2020 <.plt>

0002110 <strlen@plt>:
	jmpq   *0x15f72(%rip)        # 18088 <strlen@GLIBC_2.2.5>
	pushq  $0xe
	jmpq   2020 <.plt>

0002120 <_tr_flush_block@plt>:
	jmpq   *0x15f6a(%rip)        # 18090 <_tr_flush_block@@Base+0xb310>
	pushq  $0xf
	jmpq   2020 <.plt>

0002130 <snprintf@plt>:
	jmpq   *0x15f62(%rip)        # 18098 <snprintf@GLIBC_2.2.5>
	pushq  $0x10
	jmpq   2020 <.plt>

0002140 <deflateReset@plt>:
	jmpq   *0x15f5a(%rip)        # 180a0 <deflateReset@@Base+0x13c80>
	pushq  $0x11
	jmpq   2020 <.plt>

0002150 <deflate@plt>:
	jmpq   *0x15f52(%rip)        # 180a8 <deflate@@Base+0x15358>
	pushq  $0x12
	jmpq   2020 <.plt>

0002160 <_tr_stored_block@plt>:
	jmpq   *0x15f4a(%rip)        # 180b0 <_tr_stored_block@@Base+0xaef0>
	pushq  $0x13
	jmpq   2020 <.plt>

0002170 <memset@plt>:
	jmpq   *0x15f42(%rip)        # 180b8 <memset@GLIBC_2.2.5>
	pushq  $0x14
	jmpq   2020 <.plt>

0002180 <close@plt>:
	jmpq   *0x15f3a(%rip)        # 180c0 <close@GLIBC_2.2.5>
	pushq  $0x15
	jmpq   2020 <.plt>

0002190 <gztell64@plt>:
	jmpq   *0x15f32(%rip)        # 180c8 <gztell64@@Base+0x8af8>
	pushq  $0x16
	jmpq   2020 <.plt>

00021a0 <deflateInit2_@plt>:
	jmpq   *0x15f2a(%rip)        # 180d0 <deflateInit2_@@Base+0x13660>
	pushq  $0x17
	jmpq   2020 <.plt>

00021b0 <memchr@plt>:
	jmpq   *0x15f22(%rip)        # 180d8 <memchr@GLIBC_2.2.5>
	pushq  $0x18
	jmpq   2020 <.plt>

00021c0 <read@plt>:
	jmpq   *0x15f1a(%rip)        # 180e0 <read@GLIBC_2.2.5>
	pushq  $0x19
	jmpq   2020 <.plt>

00021d0 <deflateParams@plt>:
	jmpq   *0x15f12(%rip)        # 180e8 <deflateParams@@Base+0x13c88>
	pushq  $0x1a
	jmpq   2020 <.plt>

00021e0 <deflateInit_@plt>:
	jmpq   *0x15f0a(%rip)        # 180f0 <deflateInit_@@Base+0x136b0>
	pushq  $0x1b
	jmpq   2020 <.plt>

00021f0 <memcpy@plt>:
	jmpq   *0x15f02(%rip)        # 180f8 <memcpy@GLIBC_2.14>
	pushq  $0x1c
	jmpq   2020 <.plt>

0002200 <uncompress2@plt>:
	jmpq   *0x15efa(%rip)        # 18100 <uncompress2@@Base+0x9180>
	pushq  $0x1d
	jmpq   2020 <.plt>

0002210 <inflateEnd@plt>:
	jmpq   *0x15ef2(%rip)        # 18108 <inflateEnd@@Base+0xc988>
	pushq  $0x1e
	jmpq   2020 <.plt>

0002220 <inflate_fast@plt>:
	jmpq   *0x15eea(%rip)        # 18110 <inflate_fast@@Base+0xf700>
	pushq  $0x1f
	jmpq   2020 <.plt>

0002230 <adler32@plt>:
	jmpq   *0x15ee2(%rip)        # 18118 <adler32@@Base+0x15ce8>
	pushq  $0x20
	jmpq   2020 <.plt>

0002240 <malloc@plt>:
	jmpq   *0x15eda(%rip)        # 18120 <malloc@GLIBC_2.2.5>
	pushq  $0x21
	jmpq   2020 <.plt>

0002250 <gzclose_w@plt>:
	jmpq   *0x15ed2(%rip)        # 18128 <gzclose_w@@Base+0x7108>
	pushq  $0x22
	jmpq   2020 <.plt>

0002260 <deflateEnd@plt>:
	jmpq   *0x15eca(%rip)        # 18130 <deflateEnd@@Base+0x14370>
	pushq  $0x23
	jmpq   2020 <.plt>

0002270 <gzrewind@plt>:
	jmpq   *0x15ec2(%rip)        # 18138 <gzrewind@@Base+0x8e88>
	pushq  $0x24
	jmpq   2020 <.plt>

0002280 <gzoffset64@plt>:
	jmpq   *0x15eba(%rip)        # 18140 <gzoffset64@@Base+0x8b20>
	pushq  $0x25
	jmpq   2020 <.plt>

0002290 <inflateInit_@plt>:
	jmpq   *0x15eb2(%rip)        # 18148 <inflateInit_@@Base+0xc158>
	pushq  $0x26
	jmpq   2020 <.plt>

00022a0 <inflate_table@plt>:
	jmpq   *0x15eaa(%rip)        # 18150 <inflate_table@@Base+0xbb90>
	pushq  $0x27
	jmpq   2020 <.plt>

00022b0 <compress2@plt>:
	jmpq   *0x15ea2(%rip)        # 18158 <compress2@@Base+0x93a8>
	pushq  $0x28
	jmpq   2020 <.plt>

00022c0 <open@plt>:
	jmpq   *0x15e9a(%rip)        # 18160 <open@GLIBC_2.2.5>
	pushq  $0x29
	jmpq   2020 <.plt>

00022d0 <inflateInit2_@plt>:
	jmpq   *0x15e92(%rip)        # 18168 <inflateInit2_@@Base+0xc158>
	pushq  $0x2a
	jmpq   2020 <.plt>

00022e0 <_tr_align@plt>:
	jmpq   *0x15e8a(%rip)        # 18170 <_tr_align@@Base+0xb0b0>
	pushq  $0x2b
	jmpq   2020 <.plt>

00022f0 <inflateReset@plt>:
	jmpq   *0x15e82(%rip)        # 18178 <inflateReset@@Base+0xc448>
	pushq  $0x2c
	jmpq   2020 <.plt>

0002300 <lseek64@plt>:
	jmpq   *0x15e7a(%rip)        # 18180 <lseek64@GLIBC_2.2.5>
	pushq  $0x2d
	jmpq   2020 <.plt>

0002310 <deflateResetKeep@plt>:
	jmpq   *0x15e72(%rip)        # 18188 <deflateResetKeep@@Base+0x13408>
	pushq  $0x2e
	jmpq   2020 <.plt>

0002320 <inflateReset2@plt>:
	jmpq   *0x15e6a(%rip)        # 18190 <inflateReset2@@Base+0xc410>
	pushq  $0x2f
	jmpq   2020 <.plt>

0002330 <strerror@plt>:
	jmpq   *0x15e62(%rip)        # 18198 <strerror@GLIBC_2.2.5>
	pushq  $0x30
	jmpq   2020 <.plt>

0002340 <adler32_z@plt>:
	jmpq   *0x15e5a(%rip)        # 181a0 <adler32_z@@Base+0x15d60>
	pushq  $0x31
	jmpq   2020 <.plt>

0002350 <_tr_flush_bits@plt>:
	jmpq   *0x15e52(%rip)        # 181a8 <_tr_flush_bits@@Base+0xb0f8>
	pushq  $0x32
	jmpq   2020 <.plt>

ly of section .text:

0002360 <deregister_tm_clones>:
	lea    0x15e51(%rip),%rdi        # 181b8 <__TMC_END__>
	lea    0x15e4a(%rip),%rax        # 181b8 <__TMC_END__>
	cmp    %rdi,%rax
	je     2388 <deregister_tm_clones+0x28>
	mov    0x15c3e(%rip),%rax        # 17fb8 <_ITM_deregisterTMCloneTable>
	test   %rax,%rax
	je     2388 <deregister_tm_clones+0x28>
	jmpq   *%rax
	nopl   0x0(%rax)
	retq   
	nopl   0x0(%rax)

0002390 <register_tm_clones>:
	lea    0x15e21(%rip),%rdi        # 181b8 <__TMC_END__>
	lea    0x15e1a(%rip),%rsi        # 181b8 <__TMC_END__>
	sub    %rdi,%rsi
	sar    $0x3,%rsi
	mov    %rsi,%rax
	shr    $0x3f,%rax
	add    %rax,%rsi
	sar    %rsi
	je     23c8 <register_tm_clones+0x38>
	mov    0x15c2d(%rip),%rax        # 17fe8 <_ITM_registerTMCloneTable>
	test   %rax,%rax
	je     23c8 <register_tm_clones+0x38>
	jmpq   *%rax
	nopw   0x0(%rax,%rax,1)
	retq   
	nopl   0x0(%rax)

00023d0 <__do_global_dtors_aux>:
	endbr64 
	cmpb   $0x0,0x15ddd(%rip)        # 181b8 <__TMC_END__>
	jne    2410 <__do_global_dtors_aux+0x40>
	push   %rbp
	cmpq   $0x0,0x15c12(%rip)        # 17ff8 <__cxa_finalize@GLIBC_2.2.5>
	mov    %rsp,%rbp
	je     23f8 <__do_global_dtors_aux+0x28>
	mov    0x15dbe(%rip),%rdi        # 181b0 <__dso_handle>
	callq  *0x15c00(%rip)        # 17ff8 <__cxa_finalize@GLIBC_2.2.5>
	callq  2360 <deregister_tm_clones>
	movb   $0x1,0x15db4(%rip)        # 181b8 <__TMC_END__>
	pop    %rbp
	retq   
	nopw   %cs:0x0(%rax,%rax,1)
	retq   
	data16 nopw %cs:0x0(%rax,%rax,1)
	nopl   0x0(%rax)

0002420 <frame_dummy>:
	endbr64 
	jmpq   2390 <register_tm_clones>
	nopl   0x0(%rax)

0002430 <adler32>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %edx,%edx
	callq  2340 <adler32_z@plt>
	leaveq 
	retq   
	nopl   (%rax)

0002440 <adler32_z>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x50,%rsp
	movzwl %di,%ecx
	mov    $0xffff0000,%eax
	and    %rax,%rdi
	shr    $0x10,%rdi
	cmp    $0x1,%rdx
	je     2469 <adler32_z+0x29>
	test   %rsi,%rsi
	jne    249a <adler32_z+0x5a>
	mov    $0x1,%eax
	leaveq 
	retq   
	movzbl (%rsi),%eax
	add    %rcx,%rax
	cmp    $0xfff0,%rax
	jbe    247d <adler32_z+0x3d>
	add    $0xffffffffffff000f,%rax
	lea    (%rax,%rdi,1),%rcx
	cmp    $0xfff0,%rcx
	jbe    2491 <adler32_z+0x51>
	add    $0xffffffffffff000f,%rcx
	shl    $0x10,%rcx
	or     %rcx,%rax
	leaveq 
	retq   
	mov    $0xfff1,%r8d
	cmp    $0xf,%rdx
	jbe    24d5 <adler32_z+0x95>
	mov    $0x15b,%eax
	mov    %rbx,-0x20(%rbp)
	mov    %r12,-0x28(%rbp)
	mov    %r13,-0x30(%rbp)
	mov    %r14,-0x38(%rbp)
	mov    %r15,-0x40(%rbp)
	jmpq   260d <adler32_z+0x1cd>
	movzbl (%rsi),%eax
	add    %rax,%rcx
	add    %rcx,%rdi
	add    $0x1,%rsi
	add    $0xffffffffffffffff,%rdx
	test   %rdx,%rdx
	jne    24c4 <adler32_z+0x84>
	cmp    $0xfff0,%rcx
	jbe    24ea <adler32_z+0xaa>
	add    $0xffffffffffff000f,%rcx
	mov    %rdi,%rax
	xor    %edx,%edx
	div    %r8
	shl    $0x10,%rdx
	or     %rdx,%rcx
	mov    %rcx,%rax
	leaveq 
	retq   
	mov    %rdx,-0x48(%rbp)
	mov    %rax,-0x50(%rbp)
	mov    %rdi,-0x10(%rbp)
	movzbl (%rsi),%eax
	lea    (%rcx,%rax,1),%r15
	movzbl 0x1(%rsi),%eax
	lea    (%rax,%r15,1),%r14
	movzbl 0x2(%rsi),%eax
	lea    (%rax,%r14,1),%r13
	movzbl 0x3(%rsi),%eax
	lea    (%rax,%r13,1),%r12
	movzbl 0x4(%rsi),%eax
	lea    (%rax,%r12,1),%r11
	movzbl 0x5(%rsi),%eax
	lea    (%rax,%r11,1),%r10
	movzbl 0x6(%rsi),%eax
	lea    (%rax,%r10,1),%r9
	movzbl 0x7(%rsi),%eax
	lea    (%rax,%r9,1),%r8
	movzbl 0x8(%rsi),%eax
	lea    (%rax,%r8,1),%rbx
	movzbl 0x9(%rsi),%eax
	lea    (%rax,%rbx,1),%rdi
	movzbl 0xa(%rsi),%eax
	lea    (%rax,%rdi,1),%rcx
	movzbl 0xb(%rsi),%eax
	lea    (%rax,%rcx,1),%rdx
	movzbl 0xc(%rsi),%eax
	mov    %rax,-0x18(%rbp)
	lea    (%rax,%rdx,2),%rax
	add    %rcx,%rax
	add    %rdi,%rax
	add    %rbx,%rax
	add    %r8,%rax
	add    %r9,%rax
	add    %r10,%rax
	add    %r11,%rax
	add    %r12,%rax
	add    %r13,%rax
	add    %r14,%rax
	add    %r15,%rax
	movzbl 0xd(%rsi),%ecx
	add    %rdx,%rcx
	mov    -0x18(%rbp),%rdx
	lea    (%rdx,%rcx,1),%rdi
	movzbl 0xe(%rsi),%ecx
	lea    (%rcx,%rdi,1),%rdx
	movzbl 0xf(%rsi),%ecx
	add    %rdx,%rcx
	add    %rcx,%rax
	add    %rdx,%rax
	mov    -0x10(%rbp),%rdx
	add    %rdx,%rax
	add    %rax,%rdi
	add    $0x10,%rsi
	mov    -0x50(%rbp),%rax
	add    $0xffffffff,%eax
	test   %eax,%eax
	jne    2502 <adler32_z+0xc2>
	mov    %rcx,%rax
	xor    %ebx,%ebx
	mov    %rbx,%rdx
	mov    $0xfff1,%r8d
	div    %r8
	mov    %rdi,%rax
	mov    %rdx,%rcx
	mov    %rbx,%rdx
	div    %r8
	mov    -0x48(%rbp),%rax
	lea    -0x15b0(%rax),%rdi
	mov    %rdi,%rax
	mov    %rdx,%rdi
	mov    %rax,%rdx
	mov    $0x15b,%eax
	cmp    $0x15af,%rdx
	ja     24fe <adler32_z+0xbe>
	test   %rdx,%rdx
	jne    271c <adler32_z+0x2dc>
	shl    $0x10,%rdi
	or     %rdi,%rcx
	mov    %rcx,%rax
	mov    -0x40(%rbp),%r15
	mov    -0x38(%rbp),%r14
	mov    -0x30(%rbp),%r13
	mov    -0x28(%rbp),%r12
	mov    -0x20(%rbp),%rbx
	leaveq 
	retq   
	lea    0x10(%rsi),%rax
	mov    %rax,-0x48(%rbp)
	movzbl (%rsi),%eax
	lea    (%rcx,%rax,1),%r15
	movzbl 0x1(%rsi),%eax
	lea    (%rax,%r15,1),%r14
	movzbl 0x2(%rsi),%eax
	lea    (%rax,%r14,1),%r13
	movzbl 0x3(%rsi),%eax
	add    %r13,%rax
	movzbl 0x4(%rsi),%ecx
	lea    (%rcx,%rax,1),%r12
	movzbl 0x5(%rsi),%ecx
	lea    (%rcx,%r12,1),%r11
	movzbl 0x6(%rsi),%ecx
	lea    (%rcx,%r11,1),%r10
	movzbl 0x7(%rsi),%ecx
	add    %r10,%rcx
	mov    %rcx,-0x8(%rbp)
	movzbl 0x8(%rsi),%ebx
	lea    (%rbx,%rcx,1),%r9
	movzbl 0x9(%rsi),%ecx
	lea    (%rcx,%r9,1),%r8
	movzbl 0xa(%rsi),%ecx
	lea    (%rcx,%r8,1),%rbx
	mov    %rdx,-0x50(%rbp)
	movzbl 0xb(%rsi),%ecx
	add    %rbx,%rcx
	mov    %rcx,-0x10(%rbp)
	movzbl 0xc(%rsi),%edx
	add    %rcx,%rdx
	movzbl 0xd(%rsi),%ecx
	add    %rdx,%rcx
	mov    %rdi,-0x18(%rbp)
	movzbl 0xe(%rsi),%edi
	add    %rcx,%rdi
	add    %rdi,%rax
	add    %rbx,%rax
	add    %r10,%rax
	add    %r13,%rax
	add    %rcx,%rax
	add    %r8,%rax
	add    %r11,%rax
	add    %r14,%rax
	add    %rdx,%rax
	add    %r9,%rax
	add    %r15,%rax
	add    %r12,%rax
	movzbl 0xf(%rsi),%ecx
	add    %rdi,%rcx
	add    %rcx,%rax
	mov    -0x18(%rbp),%rdx
	add    %rdx,%rax
	mov    -0x10(%rbp),%rdx
	add    %rdx,%rax
	mov    -0x8(%rbp),%rdx
	lea    (%rdx,%rax,1),%rdi
	mov    -0x50(%rbp),%rax
	lea    -0x10(%rax),%rdx
	mov    -0x48(%rbp),%rsi
	cmp    $0xf,%rdx
	ja     2643 <adler32_z+0x203>
	jmp    2739 <adler32_z+0x2f9>
	movzbl (%rsi),%eax
	add    %rax,%rcx
	add    %rcx,%rdi
	add    $0x1,%rsi
	add    $0xffffffffffffffff,%rdx
	test   %rdx,%rdx
	jne    2728 <adler32_z+0x2e8>
	mov    %rcx,%rax
	xor    %esi,%esi
	mov    %rsi,%rdx
	mov    $0xfff1,%ebx
	div    %rbx
	mov    %rdi,%rax
	mov    %rdx,%rcx
	mov    %rsi,%rdx
	div    %rbx
	mov    %rdx,%rdi
	jmpq   2623 <adler32_z+0x1e3>
	data16 nopw %cs:0x0(%rax,%rax,1)
	nopl   (%rax)

0002770 <adler32_combine64>:
	push   %rbp
	mov    %rsp,%rbp
	callq  2790 <adler32_combine_>
	leaveq 
	retq   
	nopl   0x0(%rax,%rax,1)

0002780 <adler32_combine>:
	push   %rbp
	mov    %rsp,%rbp
	callq  2790 <adler32_combine_>
	leaveq 
	retq   
	nopl   0x0(%rax,%rax,1)

0002790 <adler32_combine_>:
	push   %rbp
	mov    %rsp,%rbp
	test   %rdx,%rdx
	jns    27a0 <adler32_combine_+0x10>
	mov    $0xffffffff,%eax
	leaveq 
	retq   
	movzwl %si,%eax
	movzwl %di,%r8d
	lea    0xfff0(%rax,%r8,1),%rcx
	cmp    $0xfff0,%rcx
	jbe    27bd <adler32_combine_+0x2d>
	lea    -0x1(%rax,%r8,1),%rcx
	cmp    $0xfff0,%rcx
	jbe    27cd <adler32_combine_+0x3d>
	add    $0xffffffffffff000f,%rcx
	mov    $0xffff0000,%eax
	and    %rax,%rdi
	shr    $0x10,%rdi
	and    %rax,%rsi
	shr    $0x10,%rsi
	lea    0xfff1(%rdi,%rsi,1),%rsi
	mov    %rdx,%rax
	mov    $0xfff1,%edi
	cqto   
	idiv   %rdi
	mov    %edx,%eax
	sub    %rax,%rsi
	imul   %rax,%r8
	mov    %r8,%rax
	xor    %edx,%edx
	div    %rdi
	lea    (%rsi,%rdx,1),%rax
	cmp    $0x1ffe1,%rax
	jbe    2818 <adler32_combine_+0x88>
	add    $0xfffffffffffe001e,%rax
	cmp    $0xfff0,%rax
	jbe    2826 <adler32_combine_+0x96>
	add    $0xffffffffffff000f,%rax
	shl    $0x10,%rax
	or     %rax,%rcx
	mov    %rcx,%rax
	leaveq 
	retq   
	nopw   %cs:0x0(%rax,%rax,1)
	nopl   0x0(%rax)

0002840 <crc32>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %edx,%edx
	callq  2030 <crc32_z@plt>
	leaveq 
	retq   
	nopl   (%rax)

0002850 <crc32_z>:
	push   %rbp
	mov    %rsp,%rbp
	test   %rsi,%rsi
	jne    285d <crc32_z+0xd>
	xor    %eax,%eax
	leaveq 
	retq   
	callq  28a0 <crc32_little>
	leaveq 
	retq   
	data16 nopw %cs:0x0(%rax,%rax,1)
	nop

0002870 <crc32_combine64>:
	push   %rbp
	mov    %rsp,%rbp
	callq  2c30 <crc32_combine_>
	leaveq 
	retq   
	nopl   0x0(%rax,%rax,1)

0002880 <crc32_combine>:
	push   %rbp
	mov    %rsp,%rbp
	callq  2c30 <crc32_combine_>
	leaveq 
	retq   
	nopl   0x0(%rax,%rax,1)

0002890 <get_crc_table>:
	push   %rbp
	mov    %rsp,%rbp
	lea    0xf765(%rip),%rax        # 12000 <crc_table>
	leaveq 
	retq   
	nopl   (%rax)

00028a0 <crc32_little>:
	push   %rbp
	mov    %rsp,%rbp
	not    %edi
	lea    0xf753(%rip),%r8        # 12000 <crc_table>
	jmp    28d8 <crc32_little+0x38>
	mov    %rsi,%rax
	and    $0x3,%rax
	test   %rax,%rax
	jle    2b11 <crc32_little+0x271>
	movzbl (%rsi),%eax
	xor    %edi,%eax
	movzbl %al,%eax
	mov    %eax,%eax
	shr    $0x8,%edi
	xor    (%r8,%rax,4),%edi
	add    $0x1,%rsi
	add    $0xffffffffffffffff,%rdx
	test   %rdx,%rdx
	jne    28af <crc32_little+0xf>
	xor    %edx,%edx
	jmpq   2b11 <crc32_little+0x271>
	xor    (%rsi),%edi
	movzbl %dil,%eax
	mov    %eax,%ecx
	mov    %rdi,%rax
	and    $0xff00,%eax
	shr    $0x8,%eax
	mov    %eax,%eax
	mov    0x800(%r8,%rax,4),%eax
	xor    0xc00(%r8,%rcx,4),%eax
	mov    %rdi,%rcx
	and    $0xff0000,%ecx
	shr    $0x10,%ecx
	mov    %ecx,%ecx
	xor    0x400(%r8,%rcx,4),%eax
	shr    $0x18,%edi
	mov    %edi,%ecx
	xor    (%r8,%rcx,4),%eax
	xor    0x4(%rsi),%eax
	movzbl %al,%ecx
	mov    %ecx,%edi
	mov    %rax,%rcx
	and    $0xff00,%ecx
	shr    $0x8,%ecx
	mov    %ecx,%ecx
	mov    0x800(%r8,%rcx,4),%ecx
	xor    0xc00(%r8,%rdi,4),%ecx
	mov    %rax,%rdi
	and    $0xff0000,%edi
	shr    $0x10,%edi
	mov    %edi,%edi
	xor    0x400(%r8,%rdi,4),%ecx
	shr    $0x18,%eax
	mov    %eax,%eax
	xor    (%r8,%rax,4),%ecx
	xor    0x8(%rsi),%ecx
	movzbl %cl,%eax
	mov    %eax,%edi
	mov    %rcx,%rax
	and    $0xff00,%eax
	shr    $0x8,%eax
	mov    %eax,%eax
	mov    0x800(%r8,%rax,4),%eax
	xor    0xc00(%r8,%rdi,4),%eax
	mov    %rcx,%rdi
	and    $0xff0000,%edi
	shr    $0x10,%edi
	mov    %edi,%edi
	xor    0x400(%r8,%rdi,4),%eax
	shr    $0x18,%ecx
	mov    %ecx,%ecx
	xor    (%r8,%rcx,4),%eax
	xor    0xc(%rsi),%eax
	movzbl %al,%ecx
	mov    %ecx,%edi
	mov    %rax,%rcx
	and    $0xff00,%ecx
	shr    $0x8,%ecx
	mov    %ecx,%ecx
	mov    0x800(%r8,%rcx,4),%ecx
	xor    0xc00(%r8,%rdi,4),%ecx
	mov    %rax,%rdi
	and    $0xff0000,%edi
	shr    $0x10,%edi
	mov    %edi,%edi
	xor    0x400(%r8,%rdi,4),%ecx
	shr    $0x18,%eax
	mov    %eax,%eax
	xor    (%r8,%rax,4),%ecx
	xor    0x10(%rsi),%ecx
	movzbl %cl,%eax
	mov    %eax,%edi
	mov    %rcx,%rax
	and    $0xff00,%eax
	shr    $0x8,%eax
	mov    %eax,%eax
	mov    0x800(%r8,%rax,4),%eax
	xor    0xc00(%r8,%rdi,4),%eax
	mov    %rcx,%rdi
	and    $0xff0000,%edi
	shr    $0x10,%edi
	mov    %edi,%edi
	xor    0x400(%r8,%rdi,4),%eax
	shr    $0x18,%ecx
	mov    %ecx,%ecx
	xor    (%r8,%rcx,4),%eax
	xor    0x14(%rsi),%eax
	movzbl %al,%ecx
	mov    %ecx,%edi
	mov    %rax,%rcx
	and    $0xff00,%ecx
	shr    $0x8,%ecx
	mov    %ecx,%ecx
	mov    0x800(%r8,%rcx,4),%ecx
	xor    0xc00(%r8,%rdi,4),%ecx
	mov    %rax,%rdi
	and    $0xff0000,%edi
	shr    $0x10,%edi
	mov    %edi,%edi
	xor    0x400(%r8,%rdi,4),%ecx
	shr    $0x18,%eax
	mov    %eax,%eax
	xor    (%r8,%rax,4),%ecx
	xor    0x18(%rsi),%ecx
	movzbl %cl,%eax
	mov    %eax,%edi
	mov    %rcx,%rax
	and    $0xff00,%eax
	shr    $0x8,%eax
	mov    %eax,%eax
	mov    0x800(%r8,%rax,4),%eax
	xor    0xc00(%r8,%rdi,4),%eax
	mov    %rcx,%rdi
	and    $0xff0000,%edi
	shr    $0x10,%edi
	mov    %edi,%edi
	xor    0x400(%r8,%rdi,4),%eax
	shr    $0x18,%ecx
	mov    %ecx,%ecx
	xor    (%r8,%rcx,4),%eax
	xor    0x1c(%rsi),%eax
	movzbl %al,%ecx
	mov    %ecx,%r9d
	mov    %rax,%rcx
	and    $0xff00,%ecx
	shr    $0x8,%ecx
	mov    %ecx,%ecx
	mov    0x800(%r8,%rcx,4),%edi
	xor    0xc00(%r8,%r9,4),%edi
	mov    %rax,%rcx
	and    $0xff0000,%ecx
	shr    $0x10,%ecx
	mov    %ecx,%ecx
	xor    0x400(%r8,%rcx,4),%edi
	shr    $0x18,%eax
	mov    %eax,%eax
	xor    (%r8,%rax,4),%edi
	add    $0x20,%rsi
	add    $0xffffffffffffffe0,%rdx
	cmp    $0x1f,%rdx
	ja     28e4 <crc32_little+0x44>
	jmp    2b6d <crc32_little+0x2cd>
	mov    %rdi,%rax
	xor    (%rsi),%eax
	movzbl %al,%ecx
	mov    %ecx,%r9d
	mov    %rax,%rcx
	and    $0xff00,%ecx
	shr    $0x8,%ecx
	mov    %ecx,%ecx
	mov    0x800(%r8,%rcx,4),%edi
	xor    0xc00(%r8,%r9,4),%edi
	mov    %rax,%rcx
	and    $0xff0000,%ecx
	shr    $0x10,%ecx
	mov    %ecx,%ecx
	xor    0x400(%r8,%rcx,4),%edi
	shr    $0x18,%eax
	mov    %eax,%eax
	xor    (%r8,%rax,4),%edi
	add    $0x4,%rsi
	add    $0xfffffffffffffffc,%rdx
	cmp    $0x3,%rdx
	ja     2b1d <crc32_little+0x27d>
	test   %rdx,%rdx
	jne    2b82 <crc32_little+0x2e2>
	not    %edi
	mov    %edi,%eax
	leaveq 
	retq   
	add    $0x1,%rsi
	movzbl (%rsi),%eax
	xor    %edi,%eax
	movzbl %al,%eax
	mov    %eax,%eax
	shr    $0x8,%edi
	xor    (%r8,%rax,4),%edi
	add    $0xffffffffffffffff,%rdx
	test   %rdx,%rdx
	jne    2b7e <crc32_little+0x2de>
	jmp    2b78 <crc32_little+0x2d8>
	xchg   %ax,%ax

0002ba0 <gf2_matrix_times>:
	push   %rbp
	mov    %rsp,%rbp
	xor    %eax,%eax
	jmp    2bbe <gf2_matrix_times+0x1e>
	mov    %rsi,%rcx
	and    $0x1,%rcx
	test   %rcx,%rcx
	je     2bb7 <gf2_matrix_times+0x17>
	xor    (%rdi),%rax
	shr    %rsi
	add    $0x8,%rdi
	test   %rsi,%rsi
	jne    2ba8 <gf2_matrix_times+0x8>
	leaveq 
	retq   
	data16 nopw %cs:0x0(%rax,%rax,1)

0002bd0 <gf2_matrix_square>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %r12,-0x8(%rbp)
	mov    %r13,-0x10(%rbp)
	mov    %r14,-0x18(%rbp)
	mov    %r15,-0x20(%rbp)
	mov    %rsi,%r13
	mov    %rdi,%r14
	xor    %r12d,%r12d
	jmp    2c0b <gf2_matrix_square+0x3b>
	movslq %r12d,%r15
	mov    0x0(%r13,%r15,8),%rsi
	mov    %r13,%rdi
	callq  2ba0 <gf2_matrix_times>
	mov    %rax,(%r14,%r15,8)
	add    $0x1,%r12d
	cmp    $0x1f,%r12d
	jle    2bf3 <gf2_matrix_square+0x23>
	mov    -0x20(%rbp),%r15
	mov    -0x18(%rbp),%r14
	mov    -0x10(%rbp),%r13
	mov    -0x8(%rbp),%r12
	leaveq 
	retq   
	data16 nopw %cs:0x0(%rax,%rax,1)
	xchg   %ax,%ax

0002c30 <crc32_combine_>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x230,%rsp
	test   %rdx,%rdx
	jg     2c45 <crc32_combine_+0x15>
	mov    %rdi,%rax
	leaveq 
	retq   
	mov    $0xedb88320,%eax
	mov    %rax,-0x128(%rbp)
	mov    $0x1,%ecx
	mov    %rcx,%r8
	jmp    2c6c <crc32_combine_+0x3c>
	movslq %ecx,%rax
	mov    %r8,-0x128(%rbp,%rax,8)
	add    %r8,%r8
	add    $0x1,%ecx
	cmp    $0x1f,%ecx
	jle    2c5b <crc32_combine_+0x2b>
	lea    -0x228(%rbp),%rcx
	lea    -0x128(%rbp),%r8
	mov    %rcx,%r9
	mov    %r8,%rax
	mov    %rbx,-0x8(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %r15,-0x28(%rbp)
	mov    %rdx,%rbx
	mov    %rdi,%r12
	mov    %r9,%rdi
	mov    %rsi,%r13
	mov    %rax,%rsi
	mov    %rcx,%r14
	mov    %r8,%r15
	callq  2bd0 <gf2_matrix_square>
	mov    %r15,%rdi
	mov    %r14,%rsi
	callq  2bd0 <gf2_matrix_square>
	jmp    2d0f <crc32_combine_+0xdf>
	mov    %r12,%rsi
	mov    %r14,%rdi
	callq  2ba0 <gf2_matrix_times>
	mov    %rax,%r12
	mov    %rbx,%rax
	and    $0xfffffffffffffffe,%rax
	test   %rax,%rax
	je     2d28 <crc32_combine_+0xf8>
	mov    %r15,%rdi
	mov    %r14,%rsi
	callq  2bd0 <gf2_matrix_square>
	mov    %rbx,%rax
	and    $0x2,%rax
	test   %rax,%rax
	jle    2cff <crc32_combine_+0xcf>
	mov    %r12,%rsi
	mov    %r15,%rdi
	callq  2ba0 <gf2_matrix_times>
	mov    %rax,%r12
	mov    %rbx,%rax
	and    $0xfffffffffffffffc,%rax
	test   %rax,%rax
	je     2d28 <crc32_combine_+0xf8>
	sar    $0x2,%rbx
	mov    %r14,%rdi
	mov    %r15,%rsi
	callq  2bd0 <gf2_matrix_square>
	mov    %rbx,%rax
	and    $0x1,%rax
	test   %rax,%rax
	jg     2cc0 <crc32_combine_+0x90>
	jmp    2cce <crc32_combine_+0x9e>
	xor    %r13,%r12
	mov    %r12,%rax
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	leaveq 
	retq   
	nopw   %cs:0x0(%rax,%rax,1)
	xchg   %ax,%ax

0002d50 <deflate>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x80,%rsp
	mov    %rsi,-0x80(%rbp)
	mov    %rdi,-0x78(%rbp)
	callq  4e70 <deflateStateCheck>
	test   %eax,%eax
	je     2d75 <deflate+0x25>
	mov    $0xfffffffffffffffe,%rax
	leaveq 
	retq   
	mov    -0x80(%rbp),%rsi
	cmp    $0x5,%esi
	jle    2d87 <deflate+0x37>
	mov    $0xfffffffffffffffe,%rax
	leaveq 
	retq   
	test   %esi,%esi
	jns    2d94 <deflate+0x44>
	mov    $0xfffffffffffffffe,%rax
	leaveq 
	retq   
	mov    -0x78(%rbp),%rdi
	mov    0x38(%rdi),%r8
	mov    0x1523d(%rip),%rdx        # 17fe0 <z_errmsg@@Base+0x238>
	mov    0x18(%rdi),%rax
	test   %rax,%rax
	je     2e0f <deflate+0xbf>
	mov    0x8(%rdi),%eax
	test   %eax,%eax
	jne    2e07 <deflate+0xb7>
	movslq 0x8(%r8),%rax
	cmp    $0x29a,%eax
	je     2e20 <deflate+0xd0>
	mov    $0xfffffffffffffffb,%rcx
	mov    0x20(%rdi),%eax
	test   %eax,%eax
	je     2e27 <deflate+0xd7>
	movslq 0x4c(%r8),%r9
	mov    %esi,0x4c(%r8)
	xor    %eax,%eax
	mov    %rax,-0x70(%rbp)
	mov    0x28(%r8),%r10
	test   %r10,%r10
	jne    2e34 <deflate+0xe4>
	mov    0x8(%rdi),%r10d
	test   %r10d,%r10d
	jne    2e7c <deflate+0x12c>
	mov    $0x9,%r10d
	cmp    $0x4,%esi
	jg     2f45 <deflate+0x1f5>
	mov    %rax,%r11
	jmpq   2f48 <deflate+0x1f8>
	mov    (%rdi),%rax
	test   %rax,%rax
	jne    2db3 <deflate+0x63>
	mov    0x20(%rdx),%rax
	mov    %rax,0x30(%rdi)
	mov    $0xfffffffffffffffe,%rax
	leaveq 
	retq   
	cmp    $0x4,%esi
	jne    2e0f <deflate+0xbf>
	jmp    2dbe <deflate+0x6e>
	mov    0x38(%rdx),%rax
	mov    %rax,0x30(%rdi)
	mov    %rcx,%rax
	leaveq 
	retq   
	mov    %rdi,%rax
	mov    %r14,-0x48(%rbp)
	mov    %r15,-0x68(%rbp)
	mov    %rdx,-0x10(%rbp)
	mov    %r8,%r14
	mov    %rdi,%r15
	mov    %rax,%rdi
	callq  6f40 <flush_pending>
	mov    0x20(%r15),%eax
	test   %eax,%eax
	je     2f7d <deflate+0x22d>
	mov    %r15,%rdi
	mov    %r14,%r8
	mov    $0xfffffffffffffffb,%rcx
	xor    %eax,%eax
	mov    -0x10(%rbp),%rdx
	mov    -0x68(%rbp),%r15
	mov    -0x48(%rbp),%r14
	mov    -0x80(%rbp),%rsi
	movslq 0x8(%r8),%r9
	cmp    $0x29a,%r9d
	je     2f91 <deflate+0x241>
	movslq 0x8(%r8),%rcx
	cmp    $0x2a,%ecx
	je     2fab <deflate+0x25b>
	mov    $0x1,%ecx
	mov    %rcx,-0x68(%rbp)
	movslq 0x8(%r8),%rdx
	cmp    $0x39,%edx
	je     2fde <deflate+0x28e>
	movslq 0x8(%r8),%rdx
	cmp    $0x45,%edx
	je     3082 <deflate+0x332>
	movslq 0x8(%r8),%rdx
	cmp    $0x49,%edx
	je     30a0 <deflate+0x350>
	movslq 0x8(%r8),%rdx
	cmp    $0x5b,%edx
	je     30be <deflate+0x36e>
	movslq 0x8(%r8),%rdx
	cmp    $0x67,%edx
	je     30dc <deflate+0x38c>
	mov    0x8(%rdi),%edx
	test   %edx,%edx
	je     3138 <deflate+0x3e8>
	movslq 0xc4(%r8),%rax
	test   %eax,%eax
	je     315a <deflate+0x40a>
	movslq 0xc8(%r8),%rcx
	cmp    $0x2,%ecx
	je     31ba <deflate+0x46a>
	cmp    $0x3,%ecx
	je     31db <deflate+0x48b>
	lea    0x14d8a(%rip),%rcx        # 17ca8 <configuration_table>
	shl    $0x4,%rax
	mov    %r8,%rdx
	mov    %r14,-0x28(%rbp)
	mov    %r15,-0x48(%rbp)
	mov    %r8,%r14
	mov    %rdi,%r15
	mov    %rdx,%rdi
	callq  *0x8(%rcx,%rax,1)
	mov    %r15,%rdi
	mov    %r14,%r8
	jmpq   3179 <deflate+0x429>
	mov    %r10,%r11
	cmp    $0x4,%r9d
	jg     2f51 <deflate+0x201>
	mov    %rax,%r10
	add    %r9d,%r9d
	sub    %r10d,%r9d
	lea    (%rsi,%rsi,1),%r10d
	sub    %r11d,%r10d
	cmp    %r10d,%r9d
	jl     2e7c <deflate+0x12c>
	cmp    $0x4,%esi
	je     2e7c <deflate+0x12c>
	mov    0x38(%rdx),%rax
	mov    %rax,0x30(%rdi)
	mov    %rcx,%rax
	leaveq 
	retq   
	movl   $0xffffffff,0x4c(%r14)
	xor    %eax,%eax
	mov    -0x68(%rbp),%r15
	mov    -0x48(%rbp),%r14
	leaveq 
	retq   
	mov    0x8(%rdi),%r9d
	test   %r9d,%r9d
	je     2e8d <deflate+0x13d>
	mov    0x38(%rdx),%rax
	mov    %rax,0x30(%rdi)
	mov    %rcx,%rax
	leaveq 
	retq   
	mov    0x54(%r8),%ecx
	movslq 0xc8(%r8),%rdx
	cmp    $0x1,%edx
	jle    31ff <deflate+0x4af>
	shl    $0xc,%ecx
	add    %eax,%ecx
	mov    0xac(%r8),%eax
	test   %eax,%eax
	jne    3222 <deflate+0x4d2>
	add    $0xffff8800,%ecx
	jmpq   3228 <deflate+0x4d8>
	mov    %rax,%rsi
	mov    %rax,%rdx
	mov    %r14,-0x40(%rbp)
	mov    %r15,-0x60(%rbp)
	mov    %r8,%r14
	mov    %rdi,%r15
	mov    %rax,%rdi
	callq  20d0 <crc32@plt>
	mov    %rax,0x60(%r15)
	mov    0x28(%r14),%rcx
	lea    0x1(%rcx),%rax
	mov    %rax,0x28(%r14)
	mov    0x10(%r14),%rax
	movb   $0x1f,(%rcx,%rax,1)
	mov    0x28(%r14),%rcx
	lea    0x1(%rcx),%rax
	mov    %rax,0x28(%r14)
	mov    0x10(%r14),%rax
	movb   $0x8b,(%rcx,%rax,1)
	mov    0x28(%r14),%rcx
	lea    0x1(%rcx),%rax
	mov    %rax,0x28(%r14)
	mov    0x10(%r14),%rax
	movb   $0x8,(%rcx,%rax,1)
	mov    $0x2,%eax
	mov    $0x4,%r11d
	mov    0x38(%r14),%r10
	test   %r10,%r10
	je     32d1 <deflate+0x581>
	mov    0x28(%r14),%r8
	lea    0x1(%r8),%rcx
	mov    %rcx,0x28(%r14)
	mov    0x10(%r14),%r9
	movslq (%r10),%rcx
	test   %ecx,%ecx
	je     306f <deflate+0x31f>
	pushq  -0x68(%rbp)
	popq   -0x70(%rbp)
	movslq 0x44(%r10),%rcx
	test   %ecx,%ecx
	jne    33a7 <deflate+0x657>
	xor    %edi,%edi
	jmpq   33aa <deflate+0x65a>
	mov    0x38(%r8),%r9
	mov    0x18(%r9),%rdx
	test   %rdx,%rdx
	jne    33bf <deflate+0x66f>
	movl   $0x49,0x8(%r8)
	jmpq   2ebd <deflate+0x16d>
	mov    0x38(%r8),%rdx
	mov    0x28(%rdx),%rdx
	test   %rdx,%rdx
	jne    33eb <deflate+0x69b>
	movl   $0x5b,0x8(%r8)
	jmpq   2eca <deflate+0x17a>
	mov    0x38(%r8),%rdx
	mov    0x38(%rdx),%rdx
	test   %rdx,%rdx
	jne    34ff <deflate+0x7af>
	movl   $0x67,0x8(%r8)
	jmpq   2ed7 <deflate+0x187>
	mov    0x38(%r8),%rcx
	movslq 0x44(%rcx),%rcx
	test   %ecx,%ecx
	jne    35dd <deflate+0x88d>
	movl   $0x71,0x8(%r8)
	mov    %rdi,%rax
	mov    %r14,-0x28(%rbp)
	mov    %r15,-0x48(%rbp)
	mov    %r8,%r14
	mov    %rdi,%r15
	mov    %rax,%rdi
	callq  6f40 <flush_pending>
	mov    0x28(%r14),%rax
	test   %rax,%rax
	jne    3657 <deflate+0x907>
	mov    %r15,%rdi
	mov    %r14,%r8
	mov    $0x1,%ecx
	xor    %eax,%eax
	mov    -0x48(%rbp),%r15
	mov    -0x28(%rbp),%r14
	mov    -0x80(%rbp),%rsi
	jmpq   2ee4 <deflate+0x194>
	mov    0xb4(%r8),%edx
	test   %edx,%edx
	jne    2eef <deflate+0x19f>
	test   %esi,%esi
	jg     366b <deflate+0x91b>
	cmp    $0x4,%esi
	je     3680 <deflate+0x930>
	leaveq 
	retq   
	mov    %r8,%rax
	mov    %r14,-0x28(%rbp)
	mov    %r15,-0x48(%rbp)
	mov    %r8,%r14
	mov    %rdi,%r15
	mov    %rax,%rdi
	callq  5230 <deflate_stored>
	mov    %r15,%rdi
	mov    %r14,%r8
	cmp    $0x2,%eax
	je     3183 <deflate+0x433>
	cmp    $0x3,%eax
	jne    318b <deflate+0x43b>
	movl   $0x29a,0x8(%r8)
	test   %eax,%eax
	je     3691 <deflate+0x941>
	cmp    $0x2,%eax
	je     3691 <deflate+0x941>
	cmp    $0x1,%eax
	je     36a8 <deflate+0x958>
	mov    $0x1,%ecx
	xor    %eax,%eax
	mov    -0x48(%rbp),%r15
	mov    -0x28(%rbp),%r14
	mov    -0x80(%rbp),%rsi
	jmp    314f <deflate+0x3ff>
	mov    %r8,%rax
	mov    %r14,-0x28(%rbp)
	mov    %r15,-0x48(%rbp)
	mov    %r8,%r14
	mov    %rdi,%r15
	mov    %rax,%rdi
	callq  6b80 <deflate_huff>
	mov    %r15,%rdi
	mov    %r14,%r8
	jmp    3179 <deflate+0x429>
	mov    %r8,%rax
	mov    %r14,-0x28(%rbp)
	mov    %r15,-0x48(%rbp)
	mov    %r8,%r14
	mov    %rdi,%r15
	mov    %rax,%rdi
	callq  6640 <deflate_rle>
	mov    %r15,%rdi
	mov    %r14,%r8
	jmpq   3179 <deflate+0x429>
	movslq 0xc4(%r8),%rdx
	cmp    $0x1,%edx
	jle    2fbf <deflate+0x26f>
	cmp    $0x5,%edx
	jg     36f9 <deflate+0x9a9>
	mov    $0x40,%eax
	jmpq   2fbf <deflate+0x26f>
	add    $0xffff8820,%ecx
	lea    0x1(%rcx),%edx
	mov    $0x42108421,%eax
	mul    %edx
	shr    $0x3,%edx
	mov    %rdx,%rax
	shl    $0x5,%eax
	sub    %eax,%edx
	add    %ecx,%edx
	mov    $0x1f,%eax
	sub    %edx,%eax
	lea    (%rax,%rcx,1),%esi
	mov    %r8,%rax
	mov    %r14,-0x40(%rbp)
	mov    %r15,-0x60(%rbp)
	mov    %rdi,%r14
	mov    %rax,%rdi
	mov    %r8,%r15
	callq  6f00 <putShortMSB>
	mov    0xac(%r15),%eax
	test   %eax,%eax
	je     328a <deflate+0x53a>
	mov    0x60(%r14),%rsi
	shr    $0x10,%rsi
	mov    %r15,%rdi
	callq  6f00 <putShortMSB>
	movzwl 0x60(%r14),%esi
	mov    %r15,%rdi
	callq  6f00 <putShortMSB>
	xor    %edi,%edi
	mov    %rdi,%rsi
	mov    %rdi,%rdx
	callq  2230 <adler32@plt>
	mov    %rax,0x60(%r14)
	movl   $0x71,0x8(%r15)
	mov    %r14,%rdi
	callq  6f40 <flush_pending>
	mov    0x28(%r15),%rax
	test   %rax,%rax
	jne    370c <deflate+0x9bc>
	mov    %r14,%rdi
	mov    %r15,%r8
	xor    %eax,%eax
	mov    -0x60(%rbp),%r15
	mov    -0x40(%rbp),%r14
	mov    -0x80(%rbp),%rsi
	jmpq   2e9a <deflate+0x14a>
	mov    0x28(%r14),%rdx
	lea    0x1(%rdx),%rcx
	mov    %rcx,0x28(%r14)
	mov    0x10(%r14),%rcx
	movb   $0x0,(%rdx,%rcx,1)
	mov    0x28(%r14),%rcx
	lea    0x1(%rcx),%rdx
	mov    %rdx,0x28(%r14)
	mov    0x10(%r14),%rdx
	movb   $0x0,(%rcx,%rdx,1)
	mov    0x28(%r14),%rdx
	lea    0x1(%rdx),%rcx
	mov    %rcx,0x28(%r14)
	mov    0x10(%r14),%rcx
	movb   $0x0,(%rdx,%rcx,1)
	mov    0x28(%r14),%rdx
	lea    0x1(%rdx),%rcx
	mov    %rcx,0x28(%r14)
	mov    0x10(%r14),%rcx
	movb   $0x0,(%rdx,%rcx,1)
	mov    0x28(%r14),%rdx
	lea    0x1(%rdx),%rcx
	mov    %rcx,0x28(%r14)
	mov    0x10(%r14),%rcx
	movb   $0x0,(%rdx,%rcx,1)
	mov    0x10(%r14),%rsi
	mov    0x28(%r14),%rdx
	lea    0x1(%rdx),%rcx
	mov    %rcx,0x28(%r14)
	movslq 0xc4(%r14),%rcx
	cmp    $0x9,%ecx
	jne    3720 <deflate+0x9d0>
	mov    %al,(%rsi,%rdx,1)
	mov    0x28(%r14),%rcx
	lea    0x1(%rcx),%rax
	mov    %rax,0x28(%r14)
	mov    0x10(%r14),%rax
	movb   $0x3,(%rcx,%rax,1)
	movl   $0x71,0x8(%r14)
	mov    %r15,%rdi
	callq  6f40 <flush_pending>
	mov    0x28(%r14),%rax
	test   %rax,%rax
	jne    3738 <deflate+0x9e8>
	mov    %r15,%rdi
	mov    %r14,%r8
	mov    $0x1,%ecx
	xor    %eax,%eax
	mov    -0x60(%rbp),%r15
	mov    -0x40(%rbp),%r14
	mov    -0x80(%rbp),%rsi
	jmpq   2eb0 <deflate+0x160>
	mov    %rax,%rdi
	mov    0x18(%r10),%rcx
	test   %rcx,%rcx
	je     374c <deflate+0x9fc>
	mov    %r11,%rsi
	jmpq   374e <deflate+0x9fe>
	mov    0x28(%r8),%rdx
	movzwl 0x20(%r9),%r9d
	mov    0x40(%r8),%ecx
	sub    %ecx,%r9d
	mov    %r14,-0x38(%rbp)
	mov    %r15,-0x58(%rbp)
	mov    %rbx,-0x8(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    %r13,-0x20(%rbp)
	mov    %rdx,%r15
	jmpq   37ef <deflate+0xa9f>
	mov    0x28(%r8),%rcx
	mov    %r14,-0x38(%rbp)
	mov    %r15,-0x58(%rbp)
	mov    %r13,-0x20(%rbp)
	mov    0x28(%r8),%rdx
	mov    0x18(%r8),%rsi
	cmp    %rdx,%rsi
	jne    3469 <deflate+0x719>
	mov    0x38(%r8),%rsi
	movslq 0x44(%rsi),%rsi
	test   %esi,%esi
	je     3442 <deflate+0x6f2>
	cmp    %rdx,%rcx
	jae    3442 <deflate+0x6f2>
	mov    %rcx,%rsi
	add    0x10(%r8),%rsi
	sub    %rcx,%rdx
	mov    %rdi,%r13
	mov    %r8,%r14
	mov    %rax,%r15
	mov    0x60(%r13),%rdi
	callq  20d0 <crc32@plt>
	mov    %rax,0x60(%r13)
	mov    %r15,%rax
	mov    %r13,%rdi
	mov    %r14,%r8
	mov    %rax,%r13
	mov    %r8,%r15
	mov    %rdi,%r14
	callq  6f40 <flush_pending>
	mov    0x28(%r15),%rax
	test   %rax,%rax
	jne    3876 <deflate+0xb26>
	mov    %r13,%rcx
	mov    %r14,%rdi
	mov    %r15,%r8
	mov    %rcx,%rax
	mov    0x40(%r8),%r11
	lea    0x1(%r11),%r9
	mov    0x28(%r8),%rsi
	lea    0x1(%rsi),%rdx
	mov    0x38(%r8),%r10
	mov    0x28(%r10),%r10
	mov    %r9,0x40(%r8)
	movzbl (%r11,%r10,1),%r9d
	mov    %rdx,0x28(%r8)
	mov    0x10(%r8),%rdx
	mov    %r9b,(%rsi,%rdx,1)
	test   %r9b,%r9b
	jne    33fb <deflate+0x6ab>
	mov    0x38(%r8),%rdx
	movslq 0x44(%rdx),%rdx
	test   %edx,%edx
	je     34dd <deflate+0x78d>
	mov    0x28(%r8),%rdx
	cmp    %rdx,%rcx
	jae    34dd <deflate+0x78d>
	mov    %rcx,%rsi
	add    0x10(%r8),%rsi
	sub    %rcx,%rdx
	mov    %rax,%r13
	mov    %r8,%r14
	mov    %rdi,%r15
	mov    0x60(%r15),%rdi
	callq  20d0 <crc32@plt>
	mov    %rax,0x60(%r15)
	mov    %r13,%rax
	mov    %r15,%rdi
	mov    %r14,%r8
	movq   $0x0,0x40(%r8)
	mov    -0x20(%rbp),%r13
	mov    $0x1,%ecx
	mov    -0x58(%rbp),%r15
	mov    -0x38(%rbp),%r14
	mov    -0x80(%rbp),%rsi
	jmpq   30b1 <deflate+0x361>
	mov    0x28(%r8),%rcx
	mov    %r14,-0x30(%rbp)
	mov    %r15,-0x50(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    0x28(%r8),%rdx
	mov    0x18(%r8),%rsi
	cmp    %rdx,%rsi
	jne    357d <deflate+0x82d>
	mov    0x38(%r8),%rsi
	movslq 0x44(%rsi),%rsi
	test   %esi,%esi
	je     3556 <deflate+0x806>
	cmp    %rdx,%rcx
	jae    3556 <deflate+0x806>
	mov    %rcx,%rsi
	add    0x10(%r8),%rsi
	sub    %rcx,%rdx
	mov    %rax,%r13
	mov    %r8,%r14
	mov    %rdi,%r15
	mov    0x60(%r15),%rdi
	callq  20d0 <crc32@plt>
	mov    %rax,0x60(%r15)
	mov    %r13,%rax
	mov    %r15,%rdi
	mov    %r14,%r8
	mov    %r8,%r13
	mov    %rax,%r14
	mov    %rdi,%r15
	callq  6f40 <flush_pending>
	mov    0x28(%r13),%rax
	test   %rax,%rax
	jne    388f <deflate+0xb3f>
	mov    %r14,%rcx
	mov    %r15,%rdi
	mov    %r13,%r8
	mov    %rcx,%rax
	mov    0x40(%r8),%r11
	lea    0x1(%r11),%r9
	mov    0x28(%r8),%rsi
	lea    0x1(%rsi),%rdx
	mov    0x38(%r8),%r10
	mov    0x38(%r10),%r10
	mov    %r9,0x40(%r8)
	movzbl (%r11,%r10,1),%r9d
	mov    %rdx,0x28(%r8)
	mov    0x10(%r8),%rdx
	mov    %r9b,(%rsi,%rdx,1)
	test   %r9b,%r9b
	jne    350f <deflate+0x7bf>
	mov    0x38(%r8),%rdx
	movslq 0x44(%rdx),%rdx
	test   %edx,%edx
	jne    38a8 <deflate+0xb58>
	mov    -0x18(%rbp),%r13
	mov    $0x1,%ecx
	mov    -0x50(%rbp),%r15
	mov    -0x30(%rbp),%r14
	mov    -0x80(%rbp),%rsi
	jmpq   30cf <deflate+0x37f>
	mov    0x18(%r8),%rdx
	mov    0x28(%r8),%rcx
	add    $0x2,%rcx
	cmp    %rcx,%rdx
	jb     38cf <deflate+0xb7f>
	mov    0x28(%r8),%rsi
	lea    0x1(%rsi),%rcx
	mov    %rcx,0x28(%r8)
	movzbl 0x60(%rdi),%edx
	mov    0x10(%r8),%rcx
	mov    %dl,(%rsi,%rcx,1)
	mov    0x28(%r8),%rsi
	lea    0x1(%rsi),%rcx
	mov    %rcx,0x28(%r8)
	mov    0x60(%rdi),%rcx
	shr    $0x8,%rcx
	mov    0x10(%r8),%rdx
	mov    %cl,(%rsi,%rdx,1)
	mov    %rax,%rsi
	mov    %rax,%rdx
	mov    %r14,-0x30(%rbp)
	mov    %r15,-0x78(%rbp)
	mov    %r8,%r14
	mov    %rdi,%r15
	mov    %rax,%rdi
	callq  20d0 <crc32@plt>
	mov    %rax,0x60(%r15)
	mov    %r15,%rdi
	mov    %r14,%r8
	mov    -0x78(%rbp),%r15
	mov    -0x30(%rbp),%r14
	jmpq   30ec <deflate+0x39c>
	movl   $0xffffffff,0x4c(%r14)
	xor    %eax,%eax
	mov    -0x48(%rbp),%r15
	mov    -0x28(%rbp),%r14
	leaveq 
	retq   
	movslq 0x8(%r8),%rdx
	cmp    $0x29a,%edx
	jne    2eef <deflate+0x19f>
	jmpq   314f <deflate+0x3ff>
	movslq 0x30(%r8),%rax
	test   %eax,%eax
	jg     38fa <deflate+0xbaa>
	mov    %rcx,%rax
	leaveq 
	retq   
	mov    0x20(%rdi),%eax
	test   %eax,%eax
	je     3944 <deflate+0xbf4>
	xor    %eax,%eax
	mov    -0x48(%rbp),%r15
	mov    -0x28(%rbp),%r14
	leaveq 
	retq   
	mov    -0x80(%rbp),%r9
	cmp    $0x1,%r9d
	je     3958 <deflate+0xc08>
	cmp    $0x5,%r9d
	je     396c <deflate+0xc1c>
	xor    %esi,%esi
	mov    %rsi,%rdx
	mov    %rsi,%rcx
	mov    %r8,%rax
	mov    %r13,-0x18(%rbp)
	mov    %r9,%r13
	mov    %rdi,%r14
	mov    %rax,%rdi
	mov    %r8,%r15
	callq  2160 <_tr_stored_block@plt>
	cmp    $0x3,%r13d
	je     39a1 <deflate+0xc51>
	mov    %r14,%rdi
	mov    %r15,%r8
	mov    -0x18(%rbp),%r13
	jmpq   396c <deflate+0xc1c>
	cmp    $0x6,%edx
	je     39f0 <deflate+0xca0>
	mov    $0xc0,%eax
	jmpq   2fbf <deflate+0x26f>
	movl   $0xffffffff,0x4c(%r15)
	xor    %eax,%eax
	mov    -0x60(%rbp),%r15
	mov    -0x40(%rbp),%r14
	leaveq 
	retq   
	movslq 0xc8(%r14),%rax
	cmp    $0x1,%eax
	jle    39fa <deflate+0xcaa>
	mov    %r11,%rax
	jmpq   3355 <deflate+0x605>
	movl   $0xffffffff,0x4c(%r14)
	xor    %eax,%eax
	mov    -0x60(%rbp),%r15
	mov    -0x40(%rbp),%r14
	leaveq 
	retq   
	xor    %esi,%esi
	mov    0x28(%r10),%rcx
	test   %rcx,%rcx
	je     3a0a <deflate+0xcba>
	mov    $0x8,%edx
	jmpq   3a0c <deflate+0xcbc>
	sub    %rcx,%rbx
	mov    %ebx,%r12d
	add    0x10(%r8),%rcx
	mov    0x38(%r8),%rax
	mov    0x40(%r8),%rsi
	add    0x18(%rax),%rsi
	mov    %r12,%rdx
	mov    %r9,-0x70(%rbp)
	mov    %rdi,%r13
	mov    %rcx,%rdi
	mov    %r8,%r14
	callq  21f0 <memcpy@plt>
	mov    0x18(%r14),%rdx
	mov    %rdx,0x28(%r14)
	mov    0x38(%r14),%rax
	movslq 0x44(%rax),%rax
	test   %eax,%eax
	je     37c0 <deflate+0xa70>
	cmp    %r15,%rdx
	jbe    37c0 <deflate+0xa70>
	mov    %r15,%rsi
	add    0x10(%r14),%rsi
	sub    %r15,%rdx
	mov    0x60(%r13),%rdi
	callq  20d0 <crc32@plt>
	mov    %rax,0x60(%r13)
	add    0x40(%r14),%r12
	mov    %r12,0x40(%r14)
	mov    %r13,%rdi
	callq  6f40 <flush_pending>
	mov    0x28(%r14),%rax
	test   %rax,%rax
	jne    3a23 <deflate+0xcd3>
	mov    -0x70(%rbp),%r9
	sub    %ebx,%r9d
	mov    %r13,%rdi
	mov    %r14,%r8
	xor    %eax,%eax
	mov    %rax,%r15
	mov    0x28(%r8),%rcx
	mov    %r9d,%r12d
	lea    (%rcx,%r12,1),%rdx
	mov    0x18(%r8),%rbx
	cmp    %rdx,%rbx
	jb     3765 <deflate+0xa15>
	add    0x10(%r8),%rcx
	mov    0x38(%r8),%rdx
	mov    0x40(%r8),%rsi
	add    0x18(%rdx),%rsi
	mov    %rdi,%rbx
	mov    %rcx,%rdi
	mov    %r8,%r13
	mov    %rax,%r14
	mov    %r12,%rdx
	callq  21f0 <memcpy@plt>
	add    0x28(%r13),%r12
	mov    %r12,0x28(%r13)
	mov    0x38(%r13),%rax
	movslq 0x44(%rax),%rax
	test   %eax,%eax
	jne    3a43 <deflate+0xcf3>
	mov    %r14,%rax
	mov    %rbx,%rdi
	mov    %r13,%r8
	movq   $0x0,0x40(%r8)
	mov    -0x20(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	mov    $0x1,%ecx
	mov    -0x58(%rbp),%r15
	mov    -0x38(%rbp),%r14
	mov    -0x80(%rbp),%rsi
	jmpq   3093 <deflate+0x343>
	movl   $0xffffffff,0x4c(%r15)
	mov    %r13,%rax
	mov    -0x20(%rbp),%r13
	mov    -0x58(%rbp),%r15
	mov    -0x38(%rbp),%r14
	leaveq 
	retq   
	movl   $0xffffffff,0x4c(%r13)
	mov    %r14,%rax
	mov    -0x18(%rbp),%r13
	mov    -0x50(%rbp),%r15
	mov    -0x30(%rbp),%r14
	leaveq 
	retq   
	mov    0x28(%r8),%rdx
	cmp    %rdx,%rcx
	jb     3a5a <deflate+0xd0a>
	mov    -0x18(%rbp),%r13
	mov    $0x1,%ecx
	mov    -0x50(%rbp),%r15
	mov    -0x30(%rbp),%r14
	mov    -0x80(%rbp),%rsi
	jmpq   30cf <deflate+0x37f>
	mov    %r15,-0x50(%rbp)
	mov    %r8,%r15
	callq  6f40 <flush_pending>
	mov    0x28(%r15),%rax
	test   %rax,%rax
	jne    3a9d <deflate+0xd4d>
	mov    %r15,%r8
	xor    %eax,%eax
	mov    -0x50(%rbp),%r15
	mov    -0x78(%rbp),%rdi
	jmpq   35f2 <deflate+0x8a2>
	cmp    $0x2,%eax
	je     3aad <deflate+0xd5d>
	mov    0x60(%rdi),%rsi
	shr    $0x10,%rsi
	mov    %r8,%rax
	mov    %r14,-0x28(%rbp)
	mov    %r15,-0x80(%rbp)
	mov    %rdi,%r14
	mov    %rax,%rdi
	mov    %r8,%r15
	callq  6f00 <putShortMSB>
	movzwl 0x60(%r14),%esi
	mov    %r15,%rdi
	callq  6f00 <putShortMSB>
	mov    %r14,%rdi
	mov    %r15,%r8
	mov    -0x80(%rbp),%r15
	mov    -0x28(%rbp),%r14
	jmpq   3b7d <deflate+0xe2d>
	movl   $0xffffffff,0x4c(%r8)
	xor    %eax,%eax
	mov    -0x48(%rbp),%r15
	mov    -0x28(%rbp),%r14
	leaveq 
	retq   
	mov    %r8,%r14
	mov    %rdi,%r15
	mov    %r14,%rdi
	callq  22e0 <_tr_align@plt>
	mov    %r15,%rdi
	mov    %r14,%r8
	mov    %r8,%r14
	mov    %rdi,%r15
	callq  6f40 <flush_pending>
	mov    0x20(%r15),%eax
	test   %eax,%eax
	je     3bac <deflate+0xe5c>
	mov    %r15,%rdi
	mov    %r14,%r8
	mov    $0x1,%ecx
	xor    %eax,%eax
	mov    -0x48(%rbp),%r15
	mov    -0x28(%rbp),%r14
	mov    -0x80(%rbp),%rsi
	jmpq   314f <deflate+0x3ff>
	mov    0x78(%r15),%rcx
	mov    0x84(%r15),%eax
	add    $0xffffffff,%eax
	mov    %eax,%eax
	movw   $0x0,(%rcx,%rax,2)
	mov    0x78(%r15),%rdi
	mov    0x84(%r15),%eax
	add    $0xffffffff,%eax
	mov    %eax,%eax
	lea    (%rax,%rax,1),%rdx
	xor    %esi,%esi
	callq  2170 <memset@plt>
	mov    0xb4(%r15),%eax
	test   %eax,%eax
	je     3bc0 <deflate+0xe70>
	mov    %r14,%rdi
	mov    %r15,%r8
	mov    -0x18(%rbp),%r13
	jmpq   396c <deflate+0xc1c>
	mov    $0x80,%eax
	jmpq   2fbf <deflate+0x26f>
	cmp    $0x1,%ecx
	jle    3bf0 <deflate+0xea0>
	xor    %eax,%eax
	jmpq   3355 <deflate+0x605>
	xor    %edx,%edx
	mov    0x38(%r10),%rcx
	test   %rcx,%rcx
	je     3bf8 <deflate+0xea8>
	mov    $0x10,%ecx
	jmpq   3bfa <deflate+0xeaa>
	movl   $0xffffffff,0x4c(%r14)
	mov    -0x20(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	xor    %eax,%eax
	mov    -0x58(%rbp),%r15
	mov    -0x38(%rbp),%r14
	leaveq 
	retq   
	cmp    %r12,%r15
	jb     3d16 <deflate+0xfc6>
	mov    %r14,%rax
	mov    %rbx,%rdi
	mov    %r13,%r8
	jmpq   384c <deflate+0xafc>
	mov    %rcx,%rsi
	add    0x10(%r8),%rsi
	sub    %rcx,%rdx
	mov    %rax,%r13
	mov    %r8,%r14
	mov    %rdi,%r15
	mov    0x60(%r15),%rdi
	callq  20d0 <crc32@plt>
	mov    %rax,0x60(%r15)
	mov    %r13,%rax
	mov    %r15,%rdi
	mov    %r14,%r8
	mov    -0x18(%rbp),%r13
	mov    $0x1,%ecx
	mov    -0x50(%rbp),%r15
	mov    -0x30(%rbp),%r14
	mov    -0x80(%rbp),%rsi
	jmpq   30cf <deflate+0x37f>
	movl   $0xffffffff,0x4c(%r15)
	xor    %eax,%eax
	mov    -0x50(%rbp),%r15
	leaveq 
	retq   
	mov    0x28(%r8),%rdx
	lea    0x1(%rdx),%rax
	mov    %rax,0x28(%r8)
	movzbl 0x60(%rdi),%ecx
	mov    0x10(%r8),%rax
	mov    %cl,(%rdx,%rax,1)
	mov    0x28(%r8),%rdx
	lea    0x1(%rdx),%rax
	mov    %rax,0x28(%r8)
	mov    0x60(%rdi),%rax
	shr    $0x8,%rax
	mov    0x10(%r8),%rcx
	mov    %al,(%rdx,%rcx,1)
	mov    0x28(%r8),%rdx
	lea    0x1(%rdx),%rax
	mov    %rax,0x28(%r8)
	mov    0x60(%rdi),%rax
	shr    $0x10,%rax
	mov    0x10(%r8),%rcx
	mov    %al,(%rdx,%rcx,1)
	mov    0x28(%r8),%rdx
	lea    0x1(%rdx),%rax
	mov    %rax,0x28(%r8)
	mov    0x60(%rdi),%rax
	shr    $0x18,%rax
	mov    0x10(%r8),%rcx
	mov    %al,(%rdx,%rcx,1)
	mov    0x28(%r8),%rdx
	lea    0x1(%rdx),%rax
	mov    %rax,0x28(%r8)
	movzbl 0x10(%rdi),%ecx
	mov    0x10(%r8),%rax
	mov    %cl,(%rdx,%rax,1)
	mov    0x28(%r8),%rdx
	lea    0x1(%rdx),%rax
	mov    %rax,0x28(%r8)
	mov    0x10(%rdi),%rax
	shr    $0x8,%rax
	mov    0x10(%r8),%rcx
	mov    %al,(%rdx,%rcx,1)
	mov    0x28(%r8),%rdx
	lea    0x1(%rdx),%rax
	mov    %rax,0x28(%r8)
	mov    0x10(%rdi),%rax
	shr    $0x10,%rax
	mov    0x10(%r8),%rcx
	mov    %al,(%rdx,%rcx,1)
	mov    0x28(%r8),%rdx
	lea    0x1(%rdx),%rax
	mov    %rax,0x28(%r8)
	mov    0x10(%rdi),%rax
	shr    $0x18,%rax
	mov    0x10(%r8),%rcx
	mov    %al,(%rdx,%rcx,1)
	mov    %r15,-0x80(%rbp)
	mov    %r8,%r15
	callq  6f40 <flush_pending>
	movslq 0x30(%r15),%rax
	test   %eax,%eax
	jle    3b97 <deflate+0xe47>
	neg    %eax
	mov    %eax,0x30(%r15)
	mov    0x28(%r15),%rax
	test   %rax,%rax
	je     3d3e <deflate+0xfee>
	xor    %eax,%eax
	mov    -0x80(%rbp),%r15
	leaveq 
	retq   
	movl   $0xffffffff,0x4c(%r14)
	xor    %eax,%eax
	mov    -0x48(%rbp),%r15
	mov    -0x28(%rbp),%r14
	leaveq 
	retq   
	mov    %r14,%rdi
	mov    %r15,%r8
	movl   $0x0,0xac(%r8)
	movq   $0x0,0x98(%r8)
	movl   $0x0,0x172c(%r8)
	mov    -0x18(%rbp),%r13
	jmpq   396c <deflate+0xc1c>
	mov    %r11,%rax
	jmpq   3355 <deflate+0x605>
	xor    %ecx,%ecx
	mov    -0x70(%rbp),%r10
	add    %r10d,%edi
	add    %edi,%esi
	add    %esi,%edx
	add    %edx,%ecx
	mov    %cl,(%r9,%r8,1)
	mov    0x28(%r14),%rsi
	lea    0x1(%rsi),%rcx
	mov    %rcx,0x28(%r14)
	mov    0x38(%r14),%rcx
	movzbl 0x8(%rcx),%edx
	mov    0x10(%r14),%rcx
	mov    %dl,(%rsi,%rcx,1)
	mov    0x28(%r14),%rsi
	lea    0x1(%rsi),%rcx
	mov    %rcx,0x28(%r14)
	mov    0x38(%r14),%rcx
	mov    0x8(%rcx),%rcx
	shr    $0x8,%rcx
	mov    0x10(%r14),%rdx
	mov    %cl,(%rsi,%rdx,1)
	mov    0x28(%r14),%rsi
	lea    0x1(%rsi),%rcx
	mov    %rcx,0x28(%r14)
	mov    0x38(%r14),%rcx
	mov    0x8(%rcx),%rcx
	shr    $0x10,%rcx
	mov    0x10(%r14),%rdx
	mov    %cl,(%rsi,%rdx,1)
	mov    0x28(%r14),%rsi
	lea    0x1(%rsi),%rcx
	mov    %rcx,0x28(%r14)
	mov    0x38(%r14),%rcx
	mov    0x8(%rcx),%rcx
	shr    $0x18,%rcx
	mov    0x10(%r14),%rdx
	mov    %cl,(%rsi,%rdx,1)
	mov    0x10(%r14),%rcx
	mov    0x28(%r14),%rsi
	lea    0x1(%rsi),%rdx
	mov    %rdx,0x28(%r14)
	movslq 0xc4(%r14),%rdx
	cmp    $0x9,%edx
	jne    3d49 <deflate+0xff9>
	mov    %al,(%rcx,%rsi,1)
	mov    0x28(%r14),%rdx
	lea    0x1(%rdx),%rax
	mov    %rax,0x28(%r14)
	mov    0x38(%r14),%rax
	movzbl 0x14(%rax),%ecx
	mov    0x10(%r14),%rax
	mov    %cl,(%rdx,%rax,1)
	mov    0x38(%r14),%rcx
	mov    0x18(%rcx),%rax
	test   %rax,%rax
	je     3d02 <deflate+0xfb2>
	mov    0x28(%r14),%rdx
	lea    0x1(%rdx),%rax
	mov    %rax,0x28(%r14)
	movzbl 0x20(%rcx),%ecx
	mov    0x10(%r14),%rax
	mov    %cl,(%rdx,%rax,1)
	mov    0x28(%r14),%rdx
	lea    0x1(%rdx),%rax
	mov    %rax,0x28(%r14)
	mov    0x38(%r14),%rax
	mov    0x20(%rax),%eax
	shr    $0x8,%eax
	mov    0x10(%r14),%rcx
	mov    %al,(%rdx,%rcx,1)
	mov    0x38(%r14),%rax
	movslq 0x44(%rax),%rax
	test   %eax,%eax
	jne    3d5d <deflate+0x100d>
	mov    %r15,%rdi
	mov    %r14,%r8
	jmp    3d78 <deflate+0x1028>
	mov    %r15,%rsi
	add    0x10(%r13),%rsi
	sub    %r15,%r12
	mov    %r12,%rdx
	mov    0x60(%rbx),%rdi
	callq  20d0 <crc32@plt>
	mov    %rax,0x60(%rbx)
	mov    %r14,%rax
	mov    %rbx,%rdi
	mov    %r13,%r8
	jmpq   384c <deflate+0xafc>
	mov    $0x1,%eax
	mov    -0x80(%rbp),%r15
	leaveq 
	retq   
	movslq 0xc8(%r14),%rax
	cmp    $0x1,%eax
	jle    3da0 <deflate+0x1050>
	mov    %r11,%rax
	jmpq   3ca3 <deflate+0xf53>
	mov    0x60(%r15),%rdi
	mov    0x10(%r14),%rsi
	mov    0x28(%r14),%edx
	callq  20d0 <crc32@plt>
	mov    %rax,0x60(%r15)
	mov    %r15,%rdi
	mov    %r14,%r8
	movq   $0x0,0x40(%r8)
	movl   $0x45,0x8(%r8)
	mov    $0x1,%ecx
	xor    %eax,%eax
	mov    -0x60(%rbp),%r15
	mov    -0x40(%rbp),%r14
	mov    -0x80(%rbp),%rsi
	jmpq   2eb0 <deflate+0x160>
	cmp    $0x1,%edx
	jle    3dac <deflate+0x105c>
	xor    %eax,%eax
	jmpq   3ca3 <deflate+0xf53>
	mov    %r11,%rax
	jmpq   3ca3 <deflate+0xf53>
	data16 nopw %cs:0x0(%rax,%rax,1)
	nop

0003dc0 <deflateEnd>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %r15,-0x10(%rbp)
	mov    %r14,%r15
	mov    %r15,-0x8(%rbp)
	mov    %rdi,%r14
	callq  4e70 <deflateStateCheck>
	test   %eax,%eax
	je     3def <deflateEnd+0x2f>
	mov    %r15,%r14
	mov    $0xfffffffffffffffe,%rax
	mov    -0x10(%rbp),%r15
	leaveq 
	retq   
	mov    0x38(%r14),%rax
	movslq 0x8(%rax),%r15
	mov    0x10(%rax),%rsi
	test   %rsi,%rsi
	je     3e0a <deflateEnd+0x4a>
	mov    0x48(%r14),%rax
	mov    0x50(%r14),%rdi
	callq  *%rax
	mov    0x38(%r14),%rax
	mov    0x78(%rax),%rsi
	test   %rsi,%rsi
	je     3e21 <deflateEnd+0x61>
	mov    0x48(%r14),%rax
	mov    0x50(%r14),%rdi
	callq  *%rax
	mov    0x38(%r14),%rax
	mov    0x70(%rax),%rsi
	test   %rsi,%rsi
	je     3e38 <deflateEnd+0x78>
	mov    0x48(%r14),%rax
	mov    0x50(%r14),%rdi
	callq  *%rax
	mov    0x38(%r14),%rax
	mov    0x60(%rax),%rsi
	test   %rsi,%rsi
	je     3e4f <deflateEnd+0x8f>
	mov    0x48(%r14),%rax
	mov    0x50(%r14),%rdi
	callq  *%rax
	mov    0x48(%r14),%rax
	mov    0x50(%r14),%rdi
	mov    0x38(%r14),%rsi
	callq  *%rax
	movq   $0x0,0x38(%r14)
	cmp    $0x71,%r15d
	jne    3e7c <deflateEnd+0xbc>
	mov    $0xfffffffffffffffd,%rax
	mov    -0x8(%rbp),%r14
	mov    -0x10(%rbp),%r15
	leaveq 
	retq   
	xor    %eax,%eax
	mov    -0x8(%rbp),%r14
	mov    -0x10(%rbp),%r15
	leaveq 
	retq   
	nopl   0x0(%rax,%rax,1)

0003e90 <deflateSetDictionary>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x40,%rsp
	mov    %rsi,-0x40(%rbp)
	mov    %rdi,-0x38(%rbp)
	mov    %rdx,-0x30(%rbp)
	callq  4e70 <deflateStateCheck>
	test   %eax,%eax
	je     3eb6 <deflateSetDictionary+0x26>
	mov    $0xfffffffffffffffe,%rax
	leaveq 
	retq   
	mov    -0x40(%rbp),%rax
	test   %rax,%rax
	jne    3ec8 <deflateSetDictionary+0x38>
	mov    $0xfffffffffffffffe,%rax
	leaveq 
	retq   
	mov    -0x38(%rbp),%r10
	mov    0x38(%r10),%r8
	movslq 0x30(%r8),%r9
	cmp    $0x2,%r9d
	jne    3ee3 <deflateSetDictionary+0x53>
	mov    $0xfffffffffffffffe,%rax
	leaveq 
	retq   
	cmp    $0x1,%r9d
	jne    3efb <deflateSetDictionary+0x6b>
	movslq 0x8(%r8),%rcx
	cmp    $0x2a,%ecx
	je     3efb <deflateSetDictionary+0x6b>
	mov    $0xfffffffffffffffe,%rax
	leaveq 
	retq   
	mov    0xb4(%r8),%ecx
	test   %ecx,%ecx
	je     3f0f <deflateSetDictionary+0x7f>
	mov    $0xfffffffffffffffe,%rax
	leaveq 
	retq   
	cmp    $0x1,%r9d
	je     3f36 <deflateSetDictionary+0xa6>
	mov    %r8,%rcx
	mov    %rbx,%r8
	mov    %rcx,%rbx
	mov    %r12,%rcx
	mov    %r9,%r12
	mov    %rcx,%r9
	mov    %r13,%rcx
	mov    %r10,%r13
	mov    %rcx,%r10
	mov    -0x30(%rbp),%rcx
	jmp    3f8a <deflateSetDictionary+0xfa>
	mov    0x60(%r10),%rdi
	mov    %rax,%rsi
	mov    -0x30(%rbp),%rcx
	mov    %rcx,%rdx
	mov    %rbx,-0x10(%rbp)
	mov    %r12,-0x18(%rbp)
	mov    %r13,-0x28(%rbp)
	mov    %r14,-0x38(%rbp)
	mov    %r15,-0x40(%rbp)
	mov    %r8,%rbx
	mov    %r9,%r12
	mov    %r10,%r13
	mov    %rcx,%r14
	mov    %rax,%r15
	callq  2230 <adler32@plt>
	mov    %rax,0x60(%r13)
	mov    %r15,%rax
	mov    %r14,%rcx
	mov    -0x40(%rbp),%r15
	mov    -0x38(%rbp),%r14
	mov    -0x28(%rbp),%r10
	mov    -0x18(%rbp),%r9
	mov    -0x10(%rbp),%r8
	movl   $0x0,0x30(%rbx)
	xor    %esi,%esi
	mov    0x50(%rbx),%edx
	cmp    %ecx,%edx
	jbe    3fa5 <deflateSetDictionary+0x115>
	mov    %r14,%rdx
	mov    %r15,%rsi
	jmpq   4040 <deflateSetDictionary+0x1b0>
	test   %r12d,%r12d
	je     3faf <deflateSetDictionary+0x11f>
	mov    %rcx,%r11
	jmp    402e <deflateSetDictionary+0x19e>
	mov    0x78(%rbx),%rdi
	mov    0x84(%rbx),%edx
	add    $0xffffffff,%edx
	mov    %edx,%edx
	movw   $0x0,(%rdi,%rdx,2)
	mov    0x78(%rbx),%rdi
	mov    0x84(%rbx),%edx
	add    $0xffffffff,%edx
	mov    %edx,%edx
	add    %rdx,%rdx
	mov    %r8,-0x8(%rbp)
	mov    %r9,-0x18(%rbp)
	mov    %r10,-0x20(%rbp)
	mov    %r14,-0x30(%rbp)
	mov    %r15,-0x40(%rbp)
	mov    %rax,%r14
	mov    %rcx,%r15
	callq  2170 <memset@plt>
	movl   $0x0,0xac(%rbx)
	movq   $0x0,0x98(%rbx)
	movl   $0x0,0x172c(%rbx)
	mov    %r14,%rax
	mov    %r15,%r11
	mov    -0x40(%rbp),%r15
	mov    -0x30(%rbp),%r14
	mov    -0x20(%rbp),%r10
	mov    -0x18(%rbp),%r9
	mov    -0x8(%rbp),%r8
	mov    0x50(%rbx),%ecx
	sub    %ecx,%r11d
	mov    %r11d,%edx
	add    %rdx,%rax
	mov    %r14,%rdx
	mov    %r15,%rsi
	mov    0x0(%r13),%r14
	mov    0x8(%r13),%r15d
	mov    %ecx,0x8(%r13)
	mov    %rax,0x0(%r13)
	mov    %rbx,%rdi
	mov    %r8,-0x8(%rbp)
	mov    %r9,-0x10(%rbp)
	mov    %r10,-0x20(%rbp)
	mov    %rdx,-0x28(%rbp)
	mov    %rsi,-0x40(%rbp)
	callq  4f80 <fill_window>
	jmp    40ea <deflateSetDictionary+0x25a>
	mov    0xac(%rbx),%esi
	lea    -0x2(%rcx),%edi
	lea    0x2(%rsi),%eax
	mov    %eax,%eax
	mov    0x60(%rbx),%rcx
	movzbl (%rax,%rcx,1),%eax
	mov    0x80(%rbx),%edx
	mov    0x90(%rbx),%ecx
	shl    %cl,%edx
	xor    %edx,%eax
	and    0x8c(%rbx),%eax
	mov    %eax,0x80(%rbx)
	mov    %eax,%ecx
	mov    0x78(%rbx),%rax
	movzwl (%rax,%rcx,2),%edx
	mov    %rsi,%rax
	and    0x58(%rbx),%eax
	mov    %eax,%eax
	mov    0x70(%rbx),%rcx
	mov    %dx,(%rcx,%rax,2)
	mov    0x78(%rbx),%rcx
	mov    0x80(%rbx),%eax
	mov    %si,(%rcx,%rax,2)
	add    $0x1,%esi
	add    $0xffffffff,%edi
	test   %edi,%edi
	jne    4077 <deflateSetDictionary+0x1e7>
	mov    %esi,0xac(%rbx)
	movl   $0x2,0xb4(%rbx)
	mov    %rbx,%rdi
	callq  4f80 <fill_window>
	mov    0xb4(%rbx),%ecx
	cmp    $0x2,%ecx
	ja     406e <deflateSetDictionary+0x1de>
	mov    %rcx,%rax
	add    0xac(%rbx),%eax
	mov    %eax,0xac(%rbx)
	mov    %eax,%eax
	mov    %rax,0x98(%rbx)
	mov    %ecx,0x172c(%rbx)
	movl   $0x0,0xb4(%rbx)
	movl   $0x2,0xb8(%rbx)
	movl   $0x2,0xa0(%rbx)
	movl   $0x0,0xa8(%rbx)
	mov    %r14,0x0(%r13)
	mov    %r15d,0x8(%r13)
	mov    %r12d,0x30(%rbx)
	xor    %eax,%eax
	mov    -0x40(%rbp),%r15
	mov    -0x28(%rbp),%r14
	mov    -0x20(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	leaveq 
	retq   
	data16 nopw %cs:0x0(%rax,%rax,1)
	xchg   %ax,%ax

0004170 <deflateGetDictionary>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %r15,-0x8(%rbp)
	mov    %rsi,-0x18(%rbp)
	mov    %rdx,-0x10(%rbp)
	mov    %rdi,%r15
	callq  4e70 <deflateStateCheck>
	test   %eax,%eax
	je     419d <deflateGetDictionary+0x2d>
	mov    $0xfffffffffffffffe,%rax
	mov    -0x8(%rbp),%r15
	leaveq 
	retq   
	mov    0x38(%r15),%rsi
	mov    0xb4(%rsi),%ecx
	mov    0xac(%rsi),%eax
	lea    (%rcx,%rax,1),%r15d
	mov    0x50(%rsi),%edx
	cmp    %r15d,%edx
	jae    41bc <deflateGetDictionary+0x4c>
	mov    %rdx,%r15
	mov    -0x18(%rbp),%rdi
	test   %rdi,%rdi
	jne    41d6 <deflateGetDictionary+0x66>
	xor    %eax,%eax
	mov    -0x10(%rbp),%rcx
	test   %rcx,%rcx
	jne    41f0 <deflateGetDictionary+0x80>
	mov    -0x8(%rbp),%r15
	leaveq 
	retq   
	test   %r15d,%r15d
	je     41c5 <deflateGetDictionary+0x55>
	add    0x60(%rsi),%rax
	lea    (%rcx,%rax,1),%rsi
	mov    %r15d,%edx
	sub    %rdx,%rsi
	callq  21f0 <memcpy@plt>
	jmp    41c5 <deflateGetDictionary+0x55>
	mov    %r15d,(%rcx)
	mov    -0x8(%rbp),%r15
	leaveq 
	retq   
	nopl   0x0(%rax)

0004200 <deflateCopy>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %rdi,-0x18(%rbp)
	mov    %rsi,%rdi
	mov    %rdi,-0x10(%rbp)
	callq  4e70 <deflateStateCheck>
	test   %eax,%eax
	je     4225 <deflateCopy+0x25>
	mov    $0xfffffffffffffffe,%rax
	leaveq 
	retq   
	mov    -0x18(%rbp),%rcx
	test   %rcx,%rcx
	jne    4237 <deflateCopy+0x37>
	mov    $0xfffffffffffffffe,%rax
	leaveq 
	retq   
	mov    -0x10(%rbp),%rsi
	mov    0x38(%rsi),%rax
	mov    %rax,-0x18(%rbp)
	mov    $0x70,%edx
	mov    %rcx,%rdi
	mov    %r15,-0x10(%rbp)
	mov    %rcx,%r15
	callq  21f0 <memcpy@plt>
	mov    0x40(%r15),%rax
	mov    0x50(%r15),%rdi
	mov    $0x1,%esi
	mov    $0x1740,%edx
	callq  *%rax
	test   %rax,%rax
	jne    427d <deflateCopy+0x7d>
	mov    $0xfffffffffffffffc,%rax
	mov    -0x10(%rbp),%r15
	leaveq 
	retq   
	mov    %rax,0x38(%r15)
	mov    %rax,%rdi
	mov    -0x18(%rbp),%rsi
	mov    %r14,-0x8(%rbp)
	mov    %rax,%r14
	mov    $0x1740,%edx
	callq  21f0 <memcpy@plt>
	mov    %r15,(%r14)
	mov    0x40(%r15),%rax
	mov    0x50(%r15),%rdi
	mov    0x50(%r14),%esi
	mov    $0x2,%edx
	callq  *%rax
	mov    %rax,0x60(%r14)
	mov    0x40(%r15),%rax
	mov    0x50(%r15),%rdi
	mov    0x50(%r14),%esi
	mov    $0x2,%edx
	callq  *%rax
	mov    %rax,0x70(%r14)
	mov    0x40(%r15),%rax
	mov    0x50(%r15),%rdi
	mov    0x84(%r14),%esi
	mov    $0x2,%edx
	callq  *%rax
	mov    %rax,0x78(%r14)
	mov    0x40(%r15),%rax
	mov    0x50(%r15),%rdi
	mov    0x1708(%r14),%esi
	mov    $0x4,%edx
	callq  *%rax
	mov    %rax,0x10(%r14)
	mov    0x60(%r14),%rdi
	test   %rdi,%rdi
	je     4400 <deflateCopy+0x200>
	mov    0x70(%r14),%rcx
	test   %rcx,%rcx
	je     4400 <deflateCopy+0x200>
	mov    0x78(%r14),%rcx
	test   %rcx,%rcx
	je     4400 <deflateCopy+0x200>
	test   %rax,%rax
	je     4400 <deflateCopy+0x200>
	mov    -0x18(%rbp),%r15
	mov    0x60(%r15),%rsi
	mov    0x50(%r14),%ecx
	add    %ecx,%ecx
	mov    %ecx,%edx
	mov    %r13,-0x18(%rbp)
	mov    %rax,%r13
	callq  21f0 <memcpy@plt>
	mov    0x70(%r14),%rdi
	mov    0x70(%r15),%rsi
	mov    0x50(%r14),%eax
	lea    (%rax,%rax,1),%rdx
	callq  21f0 <memcpy@plt>
	mov    0x78(%r14),%rdi
	mov    0x78(%r15),%rsi
	mov    0x84(%r14),%eax
	lea    (%rax,%rax,1),%rdx
	callq  21f0 <memcpy@plt>
	mov    0x10(%r14),%rdi
	mov    0x10(%r15),%rsi
	mov    0x18(%r14),%edx
	callq  21f0 <memcpy@plt>
	mov    0x20(%r15),%rax
	mov    0x10(%r15),%rcx
	sub    %rcx,%rax
	add    0x10(%r14),%rax
	mov    %rax,0x20(%r14)
	mov    0x1708(%r14),%eax
	and    $0xfffffffffffffffe,%rax
	add    %r13,%rax
	mov    %rax,0x1710(%r14)
	mov    0x1708(%r14),%eax
	lea    (%rax,%rax,2),%rax
	add    0x10(%r14),%rax
	mov    %rax,0x1700(%r14)
	lea    0xd4(%r14),%rax
	mov    %rax,0xb58(%r14)
	lea    0x9c8(%r14),%rax
	mov    %rax,0xb70(%r14)
	lea    0xabc(%r14),%rax
	mov    %rax,0xb88(%r14)
	xor    %eax,%eax
	mov    -0x18(%rbp),%r13
	mov    -0x8(%rbp),%r14
	mov    -0x10(%rbp),%r15
	leaveq 
	retq   
	mov    %r15,%rdi
	callq  2260 <deflateEnd@plt>
	mov    -0x8(%rbp),%r14
	mov    $0xfffffffffffffffc,%rax
	mov    -0x10(%rbp),%r15
	leaveq 
	retq   
	nopl   0x0(%rax)

0004420 <deflateReset>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %rdi,-0x8(%rbp)
	callq  2310 <deflateResetKeep@plt>
	test   %eax,%eax
	je     4437 <deflateReset+0x17>
	leaveq 
	retq   
	mov    -0x8(%rbp),%rcx
	mov    0x38(%rcx),%rdi
	mov    %r15,-0x8(%rbp)
	mov    %rax,%r15
	callq  6e10 <lm_init>
	mov    %r15,%rax
	mov    -0x8(%rbp),%r15
	leaveq 
	retq   
	data16 nopw %cs:0x0(%rax,%rax,1)
	nop

0004460 <deflateParams>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %r15,-0x18(%rbp)
	mov    %rsi,-0x30(%rbp)
	mov    %rdx,-0x28(%rbp)
	mov    %rdi,%r15
	callq  4e70 <deflateStateCheck>
	test   %eax,%eax
	je     448d <deflateParams+0x2d>
	mov    $0xfffffffffffffffe,%rax
	mov    -0x18(%rbp),%r15
	leaveq 
	retq   
	mov    0x38(%r15),%r8
	mov    -0x30(%rbp),%rcx
	cmp    $0xffffffff,%ecx
	jne    449f <deflateParams+0x3f>
	mov    $0x6,%ecx
	test   %ecx,%ecx
	jns    44b0 <deflateParams+0x50>
	mov    $0xfffffffffffffffe,%rax
	mov    -0x18(%rbp),%r15
	leaveq 
	retq   
	cmp    $0x9,%ecx
	jle    44c2 <deflateParams+0x62>
	mov    $0xfffffffffffffffe,%rax
	mov    -0x18(%rbp),%r15
	leaveq 
	retq   
	mov    -0x28(%rbp),%r9
	test   %r9d,%r9d
	jns    44d8 <deflateParams+0x78>
	mov    $0xfffffffffffffffe,%rax
	mov    -0x18(%rbp),%r15
	leaveq 
	retq   
	cmp    $0x4,%r9d
	jle    44eb <deflateParams+0x8b>
	mov    $0xfffffffffffffffe,%rax
	mov    -0x18(%rbp),%r15
	leaveq 
	retq   
	lea    0x137b6(%rip),%rdx        # 17ca8 <configuration_table>
	movslq 0xc4(%r8),%rax
	shl    $0x4,%rax
	mov    0x8(%rdx,%rax,1),%rax
	movslq %ecx,%r10
	cmp    0xc8(%r8),%r9d
	jne    451f <deflateParams+0xbf>
	mov    %r10,%rsi
	shl    $0x4,%rsi
	mov    0x8(%rdx,%rsi,1),%rsi
	cmp    %rax,%rsi
	je     452b <deflateParams+0xcb>
	mov    0x1738(%r8),%rax
	test   %rax,%rax
	jne    4587 <deflateParams+0x127>
	xor    %eax,%eax
	movslq 0xc4(%r8),%rsi
	cmp    %esi,%ecx
	je     457a <deflateParams+0x11a>
	test   %esi,%esi
	je     45b2 <deflateParams+0x152>
	mov    %ecx,0xc4(%r8)
	shl    $0x4,%r10
	movzwl 0x2(%rdx,%r10,1),%ecx
	mov    %ecx,0xc0(%r8)
	movzwl (%r10,%rdx,1),%ecx
	mov    %ecx,0xcc(%r8)
	movzwl 0x4(%rdx,%r10,1),%ecx
	mov    %ecx,0xd0(%r8)
	movzwl 0x6(%rdx,%r10,1),%ecx
	mov    %ecx,0xbc(%r8)
	mov    %r9d,0xc8(%r8)
	mov    -0x18(%rbp),%r15
	leaveq 
	retq   
	mov    $0x5,%esi
	mov    %r15,%rdi
	mov    %r8,-0x30(%rbp)
	mov    %rcx,-0x20(%rbp)
	mov    %r10,-0x8(%rbp)
	callq  2150 <deflate@plt>
	cmp    $0xfffffffe,%eax
	jne    45de <deflateParams+0x17e>
	mov    $0xfffffffffffffffe,%rax
	mov    -0x18(%rbp),%r15
	leaveq 
	retq   
	mov    0x1728(%r8),%esi
	test   %esi,%esi
	je     453c <deflateParams+0xdc>
	cmp    $0x1,%esi
	je     4606 <deflateParams+0x1a6>
	mov    0x78(%r8),%rsi
	mov    0x84(%r8),%edx
	add    $0xffffffff,%edx
	mov    %edx,%edx
	movw   $0x0,(%rsi,%rdx,2)
	jmp    4640 <deflateParams+0x1e0>
	mov    0x20(%r15),%eax
	test   %eax,%eax
	je     46a4 <deflateParams+0x244>
	lea    0x136b7(%rip),%rdx        # 17ca8 <configuration_table>
	mov    -0x8(%rbp),%r10
	mov    -0x20(%rbp),%rcx
	mov    -0x30(%rbp),%r8
	mov    -0x28(%rbp),%r9
	jmpq   452b <deflateParams+0xcb>
	mov    %r8,%rdi
	mov    %r12,-0x10(%rbp)
	mov    %r13,-0x28(%rbp)
	mov    %r14,-0x30(%rbp)
	mov    %rcx,%r12
	mov    %r9,%r13
	mov    %r10,%r14
	mov    %r8,%r15
	callq  4f10 <slide_hash>
	mov    %r12,%rcx
	mov    %r15,%r8
	mov    %r13,%r9
	mov    %r14,%r10
	xor    %eax,%eax
	mov    -0x30(%rbp),%r14
	mov    -0x28(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    0x78(%r8),%rdi
	mov    0x84(%r8),%edx
	add    $0xffffffff,%edx
	mov    %edx,%edx
	add    %rdx,%rdx
	mov    %r12,-0x10(%rbp)
	mov    %r13,-0x20(%rbp)
	mov    %r14,-0x30(%rbp)
	mov    %rax,%rsi
	mov    %rcx,%r12
	mov    %r8,%r13
	mov    %r9,%r14
	mov    %r10,%r15
	callq  2170 <memset@plt>
	mov    %r12,%rcx
	mov    %r13,%r8
	mov    %r14,%r9
	mov    %r15,%r10
	movl   $0x0,0x1728(%r8)
	xor    %eax,%eax
	mov    -0x30(%rbp),%r14
	mov    -0x20(%rbp),%r13
	mov    -0x10(%rbp),%r12
	lea    0x13609(%rip),%rdx        # 17ca8 <configuration_table>
	jmpq   453c <deflateParams+0xdc>
	mov    $0xfffffffffffffffb,%rax
	mov    -0x18(%rbp),%r15
	leaveq 
	retq   
	data16 nopw %cs:0x0(%rax,%rax,1)
	nopl   0x0(%rax)

00046c0 <deflateTune>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %r15,-0x28(%rbp)
	mov    %rsi,-0x8(%rbp)
	mov    %rdx,-0x10(%rbp)
	mov    %rcx,-0x18(%rbp)
	mov    %r8,-0x20(%rbp)
	mov    %rdi,%r15
	callq  4e70 <deflateStateCheck>
	test   %eax,%eax
	je     46f5 <deflateTune+0x35>
	mov    $0xfffffffffffffffe,%rax
	mov    -0x28(%rbp),%r15
	leaveq 
	retq   
	mov    0x38(%r15),%rax
	mov    -0x8(%rbp),%rcx
	mov    %ecx,0xcc(%rax)
	mov    -0x10(%rbp),%rcx
	mov    %ecx,0xc0(%rax)
	mov    -0x18(%rbp),%rcx
	mov    %ecx,0xd0(%rax)
	mov    -0x20(%rbp),%rcx
	mov    %ecx,0xbc(%rax)
	xor    %eax,%eax
	mov    -0x28(%rbp),%r15
	leaveq 
	retq   
	nopl   0x0(%rax)

0004730 <deflateBound>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %r14,-0x10(%rbp)
	mov    %r15,-0x18(%rbp)
	mov    %rsi,-0x8(%rbp)
	lea    0x7(%rsi),%rax
	shr    $0x3,%rax
	lea    (%rsi,%rax,1),%rcx
	lea    0x3f(%rsi),%rax
	shr    $0x6,%rax
	lea    (%rax,%rcx,1),%r14
	mov    %rdi,%r15
	callq  4e70 <deflateStateCheck>
	test   %eax,%eax
	jne    47de <deflateBound+0xae>
	mov    $0x6,%eax
	mov    0x38(%r15),%rdx
	movslq 0x30(%rdx),%rcx
	test   %ecx,%ecx
	jle    47ec <deflateBound+0xbc>
	cmp    $0x1,%ecx
	je     4833 <deflateBound+0x103>
	cmp    $0x2,%ecx
	jne    47f2 <deflateBound+0xc2>
	mov    $0x12,%eax
	mov    0x38(%rdx),%rsi
	test   %rsi,%rsi
	je     47f2 <deflateBound+0xc2>
	mov    0x18(%rsi),%rcx
	test   %rcx,%rcx
	je     47aa <deflateBound+0x7a>
	mov    0x20(%rsi),%eax
	add    $0x2,%eax
	mov    %eax,%eax
	add    $0x12,%rax
	mov    0x38(%rdx),%rcx
	mov    0x28(%rcx),%rcx
	test   %rcx,%rcx
	jne    4848 <deflateBound+0x118>
	mov    0x38(%rdx),%rcx
	mov    0x38(%rcx),%rcx
	test   %rcx,%rcx
	jne    485d <deflateBound+0x12d>
	mov    0x38(%rdx),%rcx
	movslq 0x44(%rcx),%rcx
	test   %ecx,%ecx
	je     47f2 <deflateBound+0xc2>
	add    $0x2,%rax
	jmp    47f2 <deflateBound+0xc2>
	lea    0xb(%r14),%rax
	mov    -0x18(%rbp),%r15
	mov    -0x10(%rbp),%r14
	leaveq 
	retq   
	test   %ecx,%ecx
	jne    47f2 <deflateBound+0xc2>
	xor    %eax,%eax
	mov    0x54(%rdx),%ecx
	cmp    $0xf,%ecx
	jne    486e <deflateBound+0x13e>
	mov    0x88(%rdx),%ecx
	cmp    $0xf,%ecx
	jne    486e <deflateBound+0x13e>
	mov    -0x8(%rbp),%rcx
	mov    %rcx,%rdx
	shr    $0xc,%rdx
	add    %rcx,%rdx
	mov    %rcx,%rsi
	shr    $0xe,%rsi
	add    %rsi,%rdx
	shr    $0x19,%rcx
	add    %rdx,%rcx
	lea    0x7(%rax,%rcx,1),%rax
	mov    -0x18(%rbp),%r15
	mov    -0x10(%rbp),%r14
	leaveq 
	retq   
	mov    0xac(%rdx),%ecx
	test   %ecx,%ecx
	je     47f2 <deflateBound+0xc2>
	mov    $0xa,%eax
	jmp    47f2 <deflateBound+0xc2>
	add    $0x1,%rcx
	add    $0x1,%rax
	movzbl (%rcx),%esi
	test   %sil,%sil
	jne    4844 <deflateBound+0x114>
	jmpq   47bb <deflateBound+0x8b>
	add    $0x1,%rcx
	add    $0x1,%rax
	movzbl (%rcx),%esi
	test   %sil,%sil
	jne    4859 <deflateBound+0x129>
	jmpq   47cc <deflateBound+0x9c>
	lea    0x5(%r14,%rax,1),%rax
	mov    -0x18(%rbp),%r15
	mov    -0x10(%rbp),%r14
	leaveq 
	retq   
	nopl   (%rax)

0004880 <deflatePending>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %r15,-0x10(%rbp)
	mov    %rdi,-0x8(%rbp)
	mov    %rdx,-0x18(%rbp)
	mov    %rsi,%r15
	callq  4e70 <deflateStateCheck>
	test   %eax,%eax
	je     48ad <deflatePending+0x2d>
	mov    $0xfffffffffffffffe,%rax
	mov    -0x10(%rbp),%r15
	leaveq 
	retq   
	test   %r15,%r15
	jne    48b8 <deflatePending+0x38>
	mov    -0x8(%rbp),%rcx
	jmp    48c6 <deflatePending+0x46>
	mov    -0x8(%rbp),%rcx
	mov    0x38(%rcx),%rax
	mov    0x28(%rax),%eax
	mov    %eax,(%r15)
	xor    %eax,%eax
	mov    -0x18(%rbp),%rdx
	test   %rdx,%rdx
	jne    48d7 <deflatePending+0x57>
	mov    -0x10(%rbp),%r15
	leaveq 
	retq   
	mov    0x38(%rcx),%rcx
	movslq 0x1734(%rcx),%rcx
	mov    %ecx,(%rdx)
	mov    -0x10(%rbp),%r15
	leaveq 
	retq   
	nopw   0x0(%rax,%rax,1)

00048f0 <deflatePrime>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x40,%rsp
	mov    %r15,-0x28(%rbp)
	mov    %rdx,-0x38(%rbp)
	mov    %rsi,-0x30(%rbp)
	mov    %rdi,%r15
	callq  4e70 <deflateStateCheck>
	test   %eax,%eax
	je     491d <deflatePrime+0x2d>
	mov    $0xfffffffffffffffe,%rax
	mov    -0x28(%rbp),%r15
	leaveq 
	retq   
	mov    0x38(%r15),%r15
	mov    0x20(%r15),%rax
	add    $0x2,%rax
	cmp    0x1710(%r15),%rax
	jbe    493f <deflatePrime+0x4f>
	mov    $0xfffffffffffffffb,%rax
	mov    -0x28(%rbp),%r15
	leaveq 
	retq   
	mov    $0x1,%eax
	mov    $0x10,%ecx
	mov    %rbx,-0x8(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %rcx,%r13
	mov    -0x30(%rbp),%r12
	mov    -0x38(%rbp),%rbx
	jmp    4973 <deflatePrime+0x83>
	mov    %r14,%rcx
	sar    %cl,%ebx
	sub    %ecx,%r12d
	mov    $0x1,%eax
	movslq 0x1734(%r15),%rdx
	mov    %r13,%rcx
	sub    %edx,%ecx
	cmp    %r12d,%ecx
	jle    4987 <deflatePrime+0x97>
	mov    %r12,%rcx
	shl    %cl,%eax
	add    $0xffff,%eax
	and    %bx,%ax
	mov    %rcx,%r14
	mov    %rdx,%rcx
	shl    %cl,%eax
	movzwl 0x1730(%r15),%edx
	or     %dx,%ax
	mov    %ax,0x1730(%r15)
	lea    (%r14,%rcx,1),%eax
	mov    %eax,0x1734(%r15)
	mov    %r15,%rdi
	callq  2350 <_tr_flush_bits@plt>
	cmp    %r12d,%r14d
	jne    4966 <deflatePrime+0x76>
	xor    %eax,%eax
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	mov    -0x28(%rbp),%r15
	leaveq 
	retq   
	nopl   0x0(%rax)

00049e0 <deflateSetHeader>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %r15,-0x10(%rbp)
	mov    %rsi,-0x8(%rbp)
	mov    %rdi,%r15
	callq  4e70 <deflateStateCheck>
	test   %eax,%eax
	je     4a09 <deflateSetHeader+0x29>
	mov    $0xfffffffffffffffe,%rax
	mov    -0x10(%rbp),%r15
	leaveq 
	retq   
	mov    0x38(%r15),%rcx
	movslq 0x30(%rcx),%rax
	cmp    $0x2,%eax
	je     4a23 <deflateSetHeader+0x43>
	mov    $0xfffffffffffffffe,%rax
	mov    -0x10(%rbp),%r15
	leaveq 
	retq   
	mov    -0x8(%rbp),%rax
	mov    %rax,0x38(%rcx)
	xor    %eax,%eax
	mov    -0x10(%rbp),%r15
	leaveq 
	retq   
	data16 nopw %cs:0x0(%rax,%rax,1)
	xchg   %ax,%ax

0004a40 <deflateInit_>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %rdx,(%rsp)
	mov    %ecx,0x8(%rsp)
	mov    $0x8,%edx
	mov    $0xf,%ecx
	xor    %r9d,%r9d
	mov    %rdx,%r8
	callq  21a0 <deflateInit2_@plt>
	leaveq 
	retq   
	nopw   0x0(%rax,%rax,1)

0004a70 <deflateInit2_>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    $0xfffffffffffffffa,%rax
	mov    0x10(%rbp),%r10
	test   %r10,%r10
	jne    4a8a <deflateInit2_+0x1a>
	leaveq 
	retq   
	movsbq (%r10),%r10
	cmp    $0x31,%r10b
	je     4a96 <deflateInit2_+0x26>
	leaveq 
	retq   
	movslq 0x18(%rbp),%r10
	cmp    $0x70,%r10
	je     4aa2 <deflateInit2_+0x32>
	leaveq 
	retq   
	mov    $0xfffffffffffffffe,%rax
	test   %rdi,%rdi
	jne    4ab0 <deflateInit2_+0x40>
	leaveq 
	retq   
	movq   $0x0,0x30(%rdi)
	mov    0x40(%rdi),%r10
	test   %r10,%r10
	jne    4ad4 <deflateInit2_+0x64>
	mov    0x13510(%rip),%r10        # 17fd8 <zcalloc@@Base+0x9268>
	mov    %r10,0x40(%rdi)
	movq   $0x0,0x50(%rdi)
	mov    0x48(%rdi),%r10
	test   %r10,%r10
	jne    4ae8 <deflateInit2_+0x78>
	mov    0x134dc(%rip),%r10        # 17fc0 <zcfree@@Base+0x9240>
	mov    %r10,0x48(%rdi)
	cmp    $0xffffffff,%esi
	jne    4af2 <deflateInit2_+0x82>
	mov    $0x6,%esi
	mov    $0x1,%r11d
	xor    %r10d,%r10d
	test   %ecx,%ecx
	js     4b0d <deflateInit2_+0x9d>
	cmp    $0xf,%ecx
	jg     4b1d <deflateInit2_+0xad>
	mov    %rdi,-0x30(%rbp)
	mov    %r11,%rdi
	jmp    4b16 <deflateInit2_+0xa6>
	neg    %ecx
	mov    %rdi,-0x30(%rbp)
	mov    %r10,%rdi
	test   %r8d,%r8d
	jg     4b2b <deflateInit2_+0xbb>
	leaveq 
	retq   
	add    $0xfffffff0,%ecx
	mov    %rdi,-0x30(%rbp)
	mov    $0x2,%edi
	jmp    4b16 <deflateInit2_+0xa6>
	cmp    $0x9,%r8d
	jle    4b33 <deflateInit2_+0xc3>
	leaveq 
	retq   
	cmp    $0x8,%edx
	je     4b3a <deflateInit2_+0xca>
	leaveq 
	retq   
	cmp    $0x7,%ecx
	jg     4b41 <deflateInit2_+0xd1>
	leaveq 
	retq   
	cmp    $0xf,%ecx
	jle    4b48 <deflateInit2_+0xd8>
	leaveq 
	retq   
	test   %esi,%esi
	jns    4b4e <deflateInit2_+0xde>
	leaveq 
	retq   
	cmp    $0x9,%esi
	jle    4b55 <deflateInit2_+0xe5>
	leaveq 
	retq   
	test   %r9d,%r9d
	jns    4b5c <deflateInit2_+0xec>
	leaveq 
	retq   
	cmp    $0x4,%r9d
	jle    4b64 <deflateInit2_+0xf4>
	leaveq 
	retq   
	cmp    $0x8,%ecx
	je     4bb2 <deflateInit2_+0x142>
	test   %r10,%r10
	je     4b73 <deflateInit2_+0x103>
	mov    $0x9,%ecx
	mov    %rcx,-0x20(%rbp)
	mov    -0x30(%rbp),%rcx
	mov    0x40(%rcx),%rax
	mov    %r9,-0x10(%rbp)
	mov    0x50(%rcx),%r9
	mov    %rsi,-0x8(%rbp)
	mov    $0x1740,%edx
	mov    %r11,%rsi
	mov    %rcx,-0x30(%rbp)
	mov    %rdi,-0x18(%rbp)
	mov    %r8,-0x28(%rbp)
	mov    %r9,%rdi
	callq  *%rax
	test   %rax,%rax
	jne    4bc0 <deflateInit2_+0x150>
	mov    $0xfffffffffffffffc,%rax
	leaveq 
	retq   
	cmp    $0x1,%edi
	jne    4d45 <deflateInit2_+0x2d5>
	mov    %r11,%r10
	jmp    4b69 <deflateInit2_+0xf9>
	mov    -0x30(%rbp),%r8
	mov    %rax,0x38(%r8)
	mov    %r8,(%rax)
	movl   $0x2a,0x8(%rax)
	mov    -0x18(%rbp),%rcx
	mov    %ecx,0x30(%rax)
	movq   $0x0,0x38(%rax)
	mov    -0x20(%rbp),%rcx
	mov    %ecx,0x54(%rax)
	mov    $0x1,%edx
	mov    %rdx,%rsi
	shl    %cl,%esi
	mov    %esi,0x50(%rax)
	lea    -0x1(%rsi),%ecx
	mov    %ecx,0x58(%rax)
	mov    -0x28(%rbp),%r9
	lea    0x7(%r9),%ecx
	mov    %ecx,0x88(%rax)
	shl    %cl,%edx
	mov    %edx,0x84(%rax)
	lea    -0x1(%rdx),%ecx
	mov    %ecx,0x8c(%rax)
	mov    %rax,%r10
	lea    0x9(%r9),%ecx
	mov    $0xaaaaaaab,%eax
	mul    %ecx
	shr    %edx
	mov    %edx,0x90(%r10)
	mov    0x40(%r8),%rax
	mov    0x50(%r8),%rdi
	mov    0x50(%r10),%esi
	mov    $0x2,%edx
	mov    %r13,-0x20(%rbp)
	mov    %r14,-0x28(%rbp)
	mov    %r15,-0x30(%rbp)
	mov    %r8,%r13
	mov    %r10,%r14
	mov    %r9,%r15
	callq  *%rax
	mov    %rax,0x60(%r14)
	mov    0x40(%r13),%rax
	mov    0x50(%r13),%rdi
	mov    0x50(%r14),%esi
	mov    $0x2,%edx
	callq  *%rax
	mov    %rax,0x70(%r14)
	mov    0x40(%r13),%rax
	mov    0x50(%r13),%rdi
	mov    0x84(%r14),%esi
	mov    $0x2,%edx
	callq  *%rax
	mov    %rax,0x78(%r14)
	movq   $0x0,0x1738(%r14)
	lea    0x6(%r15),%ecx
	mov    $0x1,%esi
	shl    %cl,%esi
	mov    %esi,0x1708(%r14)
	mov    0x40(%r13),%rax
	mov    0x50(%r13),%rdi
	mov    $0x4,%edx
	callq  *%rax
	mov    %rax,0x10(%r14)
	mov    0x1708(%r14),%ecx
	mov    %rcx,%rdx
	shl    $0x2,%rdx
	mov    %rdx,0x18(%r14)
	mov    0x60(%r14),%rdx
	test   %rdx,%rdx
	je     4d47 <deflateInit2_+0x2d7>
	mov    0x70(%r14),%rdx
	test   %rdx,%rdx
	je     4d47 <deflateInit2_+0x2d7>
	mov    0x78(%r14),%rdx
	test   %rdx,%rdx
	je     4d47 <deflateInit2_+0x2d7>
	test   %rax,%rax
	je     4d47 <deflateInit2_+0x2d7>
	and    $0xfffffffffffffffe,%rcx
	add    %rcx,%rax
	mov    %rax,0x1710(%r14)
	mov    0x1708(%r14),%eax
	lea    (%rax,%rax,2),%rax
	add    0x10(%r14),%rax
	mov    %rax,0x1700(%r14)
	mov    -0x8(%rbp),%rax
	mov    %eax,0xc4(%r14)
	mov    -0x10(%rbp),%rax
	mov    %eax,0xc8(%r14)
	movb   $0x8,0x48(%r14)
	mov    %r13,%rdi
	callq  2140 <deflateReset@plt>
	mov    -0x30(%rbp),%r15
	mov    -0x28(%rbp),%r14
	mov    -0x20(%rbp),%r13
	leaveq 
	retq   
	leaveq 
	retq   
	movl   $0x29a,0x8(%r14)
	mov    0x1328a(%rip),%rax        # 17fe0 <z_errmsg@@Base+0x238>
	mov    0x30(%rax),%rax
	mov    %rax,0x30(%r13)
	mov    %r13,%rdi
	callq  2260 <deflateEnd@plt>
	mov    -0x30(%rbp),%r15
	mov    -0x28(%rbp),%r14
	mov    -0x20(%rbp),%r13
	mov    $0xfffffffffffffffc,%rax
	leaveq 
	retq   
	nopl   0x0(%rax,%rax,1)

0004d80 <deflateResetKeep>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %r15,-0x10(%rbp)
	mov    %r14,%r15
	mov    %rdi,%r14
	callq  4e70 <deflateStateCheck>
	test   %eax,%eax
	je     4dab <deflateResetKeep+0x2b>
	mov    %r15,%r14
	mov    $0xfffffffffffffffe,%rax
	mov    -0x10(%rbp),%r15
	leaveq 
	retq   
	movq   $0x0,0x28(%r14)
	movq   $0x0,0x10(%r14)
	movq   $0x0,0x30(%r14)
	movl   $0x2,0x58(%r14)
	mov    0x38(%r14),%r8
	movq   $0x0,0x28(%r8)
	mov    0x10(%r8),%rax
	mov    %rax,0x20(%r8)
	movslq 0x30(%r8),%rax
	test   %eax,%eax
	jns    4ded <deflateResetKeep+0x6d>
	neg    %eax
	mov    %eax,0x30(%r8)
	movslq 0x30(%r8),%rcx
	cmp    $0x2,%ecx
	jne    4e20 <deflateResetKeep+0xa0>
	mov    $0x39,%eax
	cmp    $0x2,%ecx
	mov    %eax,0x8(%r8)
	mov    $0x0,%edi
	je     4e2b <deflateResetKeep+0xab>
	mov    %rdi,%rsi
	mov    %rdi,%rdx
	mov    %r15,-0x8(%rbp)
	mov    %r8,%r15
	callq  2230 <adler32@plt>
	mov    %r15,%rdi
	jmp    4e40 <deflateResetKeep+0xc0>
	test   %ecx,%ecx
	jne    4e5c <deflateResetKeep+0xdc>
	mov    $0x71,%eax
	jmp    4dfb <deflateResetKeep+0x7b>
	mov    %rdi,%rsi
	mov    %rdi,%rdx
	mov    %r15,-0x8(%rbp)
	mov    %r8,%r15
	callq  20d0 <crc32@plt>
	mov    %r15,%rdi
	mov    %rax,0x60(%r14)
	movl   $0x0,0x4c(%rdi)
	callq  2100 <_tr_init@plt>
	xor    %eax,%eax
	mov    -0x8(%rbp),%r14
	mov    -0x10(%rbp),%r15
	leaveq 
	retq   
	mov    $0x2a,%eax
	jmp    4dfb <deflateResetKeep+0x7b>
	data16 nopw %cs:0x0(%rax,%rax,1)
	xchg   %ax,%ax

0004e70 <deflateStateCheck>:
	push   %rbp
	mov    %rsp,%rbp
	mov    $0x1,%eax
	test   %rdi,%rdi
	jne    4e80 <deflateStateCheck+0x10>
	leaveq 
	retq   
	mov    0x40(%rdi),%rcx
	test   %rcx,%rcx
	jne    4e8b <deflateStateCheck+0x1b>
	leaveq 
	retq   
	mov    0x48(%rdi),%rcx
	test   %rcx,%rcx
	jne    4e96 <deflateStateCheck+0x26>
	leaveq 
	retq   
	mov    0x38(%rdi),%rdx
	test   %rdx,%rdx
	jne    4ea1 <deflateStateCheck+0x31>
	leaveq 
	retq   
	cmp    (%rdx),%rdi
	je     4ea8 <deflateStateCheck+0x38>
	leaveq 
	retq   
	xor    %ecx,%ecx
	movslq 0x8(%rdx),%rdx
	cmp    $0x2a,%edx
	jne    4eb8 <deflateStateCheck+0x48>
	mov    %rcx,%rax
	leaveq 
	retq   
	cmp    $0x39,%edx
	jne    4ec2 <deflateStateCheck+0x52>
	mov    %rcx,%rax
	leaveq 
	retq   
	cmp    $0x45,%edx
	jne    4ecc <deflateStateCheck+0x5c>
	mov    %rcx,%rax
	leaveq 
	retq   
	cmp    $0x49,%edx
	jne    4ed6 <deflateStateCheck+0x66>
	mov    %rcx,%rax
	leaveq 
	retq   
	cmp    $0x5b,%edx
	jne    4ee0 <deflateStateCheck+0x70>
	mov    %rcx,%rax
	leaveq 
	retq   
	cmp    $0x67,%edx
	jne    4eea <deflateStateCheck+0x7a>
	mov    %rcx,%rax
	leaveq 
	retq   
	cmp    $0x71,%edx
	jne    4ef4 <deflateStateCheck+0x84>
	mov    %rcx,%rax
	leaveq 
	retq   
	cmp    $0x29a,%edx
	je     4efe <deflateStateCheck+0x8e>
	leaveq 
	retq   
	mov    %rcx,%rax
	leaveq 
	retq   
	data16 nopw %cs:0x0(%rax,%rax,1)
	xchg   %ax,%ax

0004f10 <slide_hash>:
	push   %rbp
	mov    %rsp,%rbp
	mov    0x50(%rdi),%r8d
	mov    0x84(%rdi),%ecx
	lea    (%rcx,%rcx,1),%rax
	add    0x78(%rdi),%rax
	xor    %esi,%esi
	add    $0xfffffffffffffffe,%rax
	movzwl (%rax),%edx
	cmp    %edx,%r8d
	jbe    4f39 <slide_hash+0x29>
	mov    %rsi,%rdx
	jmp    4f3d <slide_hash+0x2d>
	sub    %r8w,%dx
	mov    %dx,(%rax)
	add    $0xffffffff,%ecx
	test   %ecx,%ecx
	jne    4f28 <slide_hash+0x18>
	lea    (%r8,%r8,1),%rax
	add    0x70(%rdi),%rax
	mov    %r8,%rcx
	add    $0xfffffffffffffffe,%rax
	movzwl (%rax),%edx
	cmp    %edx,%r8d
	jbe    4f63 <slide_hash+0x53>
	mov    %rsi,%rdx
	jmp    4f67 <slide_hash+0x57>
	sub    %r8w,%dx
	mov    %dx,(%rax)
	add    $0xffffffff,%ecx
	test   %ecx,%ecx
	jne    4f52 <slide_hash+0x42>
	leaveq 
	retq   
	data16 nopw %cs:0x0(%rax,%rax,1)
	xchg   %ax,%ax

0004f80 <fill_window>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %r13,-0x8(%rbp)
	mov    %r14,-0x10(%rbp)
	mov    %r15,-0x18(%rbp)
	mov    %rdi,%r13
	mov    0x50(%r13),%r14d
	jmpq   5054 <fill_window+0xd4>
	mov    0x60(%r13),%rdi
	lea    (%r14,%rdi,1),%rsi
	sub    %edx,%eax
	add    %r14d,%eax
	mov    %eax,%edx
	callq  21f0 <memcpy@plt>
	mov    0xb0(%r13),%eax
	sub    %r14d,%eax
	mov    %eax,0xb0(%r13)
	mov    0xac(%r13),%eax
	sub    %r14d,%eax
	mov    %eax,0xac(%r13)
	mov    0x98(%r13),%rax
	sub    %r14,%rax
	mov    %rax,0x98(%r13)
	mov    %r13,%rdi
	callq  4f10 <slide_hash>
	add    %r14d,%r15d
	mov    0x0(%r13),%rdi
	mov    0x8(%rdi),%eax
	test   %eax,%eax
	je     5088 <fill_window+0x108>
	mov    0xac(%r13),%eax
	add    0x60(%r13),%rax
	mov    0xb4(%r13),%ecx
	lea    (%rcx,%rax,1),%rsi
	mov    %r15,%rdx
	callq  7020 <read_buf>
	add    0xb4(%r13),%eax
	mov    %eax,0xb4(%r13)
	mov    0x172c(%r13),%ecx
	add    %ecx,%eax
	cmp    $0x2,%eax
	ja     50a6 <fill_window+0x126>
	mov    0xb4(%r13),%eax
	cmp    $0x105,%eax
	ja     5088 <fill_window+0x108>
	mov    0x0(%r13),%rax
	mov    0x8(%rax),%eax
	test   %eax,%eax
	je     5088 <fill_window+0x108>
	mov    0xac(%r13),%esi
	mov    %rsi,%rax
	add    0xb4(%r13),%eax
	mov    0x68(%r13),%edx
	mov    %rdx,%r15
	sub    %eax,%r15d
	mov    0x50(%r13),%ecx
	lea    -0x106(%rcx,%r14,1),%ecx
	cmp    %ecx,%esi
	jae    4fa0 <fill_window+0x20>
	jmpq   4ff2 <fill_window+0x72>
	mov    0x1738(%r13),%rdi
	mov    0x68(%r13),%r14
	cmp    %rdi,%r14
	ja     50e7 <fill_window+0x167>
	mov    -0x18(%rbp),%r15
	mov    -0x10(%rbp),%r14
	mov    -0x8(%rbp),%r13
	leaveq 
	retq   
	mov    0xac(%r13),%edx
	sub    %ecx,%edx
	mov    %edx,%eax
	mov    0x60(%r13),%rcx
	movzbl (%rcx,%rax,1),%esi
	mov    %esi,0x80(%r13)
	lea    0x1(%rdx),%eax
	mov    %eax,%eax
	movzbl (%rax,%rcx,1),%eax
	mov    0x90(%r13),%ecx
	shl    %cl,%esi
	xor    %esi,%eax
	and    0x8c(%r13),%eax
	mov    %eax,0x80(%r13)
	jmpq   51a1 <fill_window+0x221>
	xor    %esi,%esi
	mov    0xb4(%r13),%ecx
	mov    0xac(%r13),%eax
	lea    (%rcx,%rax,1),%r15
	cmp    %r15,%rdi
	jb     51b5 <fill_window+0x235>
	add    $0x102,%r15
	cmp    %r15,%rdi
	jb     51ef <fill_window+0x26f>
	mov    -0x18(%rbp),%r15
	mov    -0x10(%rbp),%r14
	mov    -0x8(%rbp),%r13
	leaveq 
	retq   
	lea    0x2(%rdx),%eax
	mov    %eax,%ecx
	mov    0x60(%r13),%rax
	movzbl (%rcx,%rax,1),%eax
	mov    0x80(%r13),%esi
	mov    0x90(%r13),%ecx
	shl    %cl,%esi
	xor    %esi,%eax
	and    0x8c(%r13),%eax
	mov    %eax,0x80(%r13)
	mov    %eax,%eax
	mov    0x78(%r13),%rcx
	movzwl (%rcx,%rax,2),%esi
	mov    %rdx,%rax
	and    0x58(%r13),%eax
	mov    %eax,%eax
	mov    0x70(%r13),%rcx
	mov    %si,(%rcx,%rax,2)
	mov    0x78(%r13),%rcx
	mov    0x80(%r13),%eax
	mov    %dx,(%rcx,%rax,2)
	mov    0x172c(%r13),%ecx
	lea    -0x1(%rcx),%eax
	mov    %eax,0x172c(%r13)
	mov    0xb4(%r13),%eax
	lea    -0x1(%rax,%rcx,1),%eax
	cmp    $0x2,%eax
	jbe    503b <fill_window+0xbb>
	add    $0x1,%edx
	mov    0x172c(%r13),%eax
	test   %eax,%eax
	jne    5122 <fill_window+0x1a2>
	jmpq   503b <fill_window+0xbb>
	sub    %r15,%r14
	cmp    $0x102,%r14
	jbe    51c7 <fill_window+0x247>
	mov    $0x102,%r14d
	mov    %r15,%rdi
	add    0x60(%r13),%rdi
	mov    %r14d,%edx
	callq  2170 <memset@plt>
	lea    (%r15,%r14,1),%rax
	mov    %rax,0x1738(%r13)
	mov    -0x18(%rbp),%r15
	mov    -0x10(%rbp),%r14
	mov    -0x8(%rbp),%r13
	leaveq 
	retq   
	sub    %rdi,%r14
	sub    %rdi,%r15
	cmp    %r15,%r14
	jae    51fd <fill_window+0x27d>
	mov    %r14,%r15
	add    0x60(%r13),%rdi
	mov    %r15d,%edx
	callq  2170 <memset@plt>
	add    0x1738(%r13),%r15
	mov    %r15,0x1738(%r13)
	mov    -0x18(%rbp),%r15
	mov    -0x10(%rbp),%r14
	mov    -0x8(%rbp),%r13
	leaveq 
	retq   
	data16 nopw %cs:0x0(%rax,%rax,1)

0005230 <deflate_stored>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x50,%rsp
	mov    %rsi,-0x48(%rbp)
	mov    %rbx,-0x8(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %r15,-0x28(%rbp)
	mov    0x50(%rdi),%edx
	mov    0x18(%rdi),%rcx
	lea    -0x5(%rcx),%rax
	cmp    %rax,%rdx
	jb     5263 <deflate_stored+0x33>
	lea    -0x5(%rcx),%edx
	mov    %rdx,-0x38(%rbp)
	mov    (%rdi),%rax
	mov    0x8(%rax),%eax
	mov    %rax,-0x30(%rbp)
	mov    %rdi,%rbx
	mov    %rsi,%r14
	mov    $0x1,%ecx
	xor    %esi,%esi
	mov    $0xffff,%r15d
	jmpq   53eb <deflate_stored+0x1bb>
	lea    (%r9,%r13,1),%r12d
	sub    %eax,%edi
	cmp    %edi,%r12d
	jbe    5297 <deflate_stored+0x67>
	mov    %rdi,%r12
	cmp    %edx,%r12d
	jae    52c1 <deflate_stored+0x91>
	test   %r12d,%r12d
	jne    52ab <deflate_stored+0x7b>
	cmp    $0x4,%r14d
	jne    5475 <deflate_stored+0x245>
	test   %r14d,%r14d
	je     547a <deflate_stored+0x24a>
	lea    (%r9,%r13,1),%eax
	cmp    %eax,%r12d
	jne    547f <deflate_stored+0x24f>
	cmp    $0x4,%r14d
	je     5484 <deflate_stored+0x254>
	mov    %rsi,%rcx
	mov    %r11,%r14
	mov    %r10,%r15
	mov    %rcx,-0x40(%rbp)
	mov    %rsi,%rdx
	mov    %rbx,%rdi
	callq  2160 <_tr_stored_block@plt>
	mov    0x28(%rbx),%rcx
	mov    0x10(%rbx),%rax
	mov    %r12b,-0x4(%rcx,%rax,1)
	mov    %r12,%rdx
	shr    $0x8,%edx
	mov    0x28(%rbx),%rcx
	mov    0x10(%rbx),%rax
	mov    %dl,-0x3(%rcx,%rax,1)
	mov    %r12,%rax
	not    %eax
	mov    0x28(%rbx),%rdx
	mov    0x10(%rbx),%rcx
	mov    %al,-0x2(%rdx,%rcx,1)
	shr    $0x8,%eax
	mov    0x28(%rbx),%rdx
	mov    0x10(%rbx),%rcx
	mov    %al,-0x1(%rdx,%rcx,1)
	mov    (%rbx),%rdi
	callq  6f40 <flush_pending>
	cmp    %r14d,%r15d
	je     538d <deflate_stored+0x15d>
	cmp    %r13d,%r12d
	jae    5337 <deflate_stored+0x107>
	mov    %r12,%r13
	mov    0x98(%rbx),%rsi
	add    0x60(%rbx),%rsi
	mov    %r13d,%r14d
	mov    (%rbx),%rax
	mov    0x18(%rax),%rdi
	mov    %r14,%rdx
	callq  21f0 <memcpy@plt>
	mov    (%rbx),%rcx
	mov    %r14,%rax
	add    0x18(%rcx),%rax
	mov    %rax,0x18(%rcx)
	mov    (%rbx),%rcx
	mov    0x20(%rcx),%eax
	sub    %r13d,%eax
	mov    %eax,0x20(%rcx)
	mov    (%rbx),%rcx
	mov    %r14,%rax
	add    0x28(%rcx),%rax
	mov    %rax,0x28(%rcx)
	sub    %r13d,%r12d
	add    0x98(%rbx),%r14
	mov    %r14,0x98(%rbx)
	test   %r12d,%r12d
	je     53c9 <deflate_stored+0x199>
	mov    (%rbx),%rdi
	mov    0x18(%rdi),%rsi
	mov    %r12,%rdx
	callq  7020 <read_buf>
	mov    %r12d,%ecx
	mov    (%rbx),%rdx
	mov    %rcx,%rax
	add    0x18(%rdx),%rax
	mov    %rax,0x18(%rdx)
	mov    (%rbx),%rdx
	mov    0x20(%rdx),%eax
	sub    %r12d,%eax
	mov    %eax,0x20(%rdx)
	mov    (%rbx),%rax
	add    0x28(%rax),%rcx
	mov    %rcx,0x28(%rax)
	mov    -0x40(%rbp),%r12
	test   %r12d,%r12d
	jne    549e <deflate_stored+0x26e>
	mov    $0x1,%ecx
	xor    %esi,%esi
	mov    -0x48(%rbp),%r14
	mov    -0x38(%rbp),%rdx
	mov    $0xffff,%r15d
	mov    0x1734(%rbx),%eax
	add    $0x2a,%eax
	sar    $0x3,%eax
	mov    (%rbx),%r9
	mov    0x20(%r9),%edi
	cmp    %edi,%eax
	jbe    54b4 <deflate_stored+0x284>
	mov    %rsi,%r12
	mov    (%rbx),%rdx
	mov    0x8(%rdx),%eax
	mov    -0x30(%rbp),%r13
	cmp    %r13d,%eax
	je     5540 <deflate_stored+0x310>
	sub    %eax,%r13d
	mov    0x50(%rbx),%r9d
	cmp    %r13d,%r9d
	jbe    54e7 <deflate_stored+0x2b7>
	mov    0xac(%rbx),%r8d
	mov    0x68(%rbx),%rax
	sub    %r8,%rax
	mov    %r13d,%edx
	cmp    %rax,%rdx
	jae    5576 <deflate_stored+0x346>
	mov    0xac(%rbx),%edi
	add    0x60(%rbx),%rdi
	mov    (%rbx),%rax
	mov    (%rax),%rsi
	mov    %r13d,%eax
	sub    %rax,%rsi
	mov    %rcx,%r15
	callq  21f0 <memcpy@plt>
	mov    %r13,%rax
	add    0xac(%rbx),%eax
	mov    %r15,%rcx
	jmpq   550c <deflate_stored+0x2dc>
	mov    %rsi,%r12
	jmp    5409 <deflate_stored+0x1d9>
	mov    %rsi,%r12
	jmp    5409 <deflate_stored+0x1d9>
	mov    %rsi,%r12
	jmp    5409 <deflate_stored+0x1d9>
	mov    (%rbx),%rax
	mov    0x8(%rax),%eax
	add    %r13d,%eax
	cmp    %eax,%r12d
	je     52ce <deflate_stored+0x9e>
	mov    %rsi,%rcx
	jmpq   52ce <deflate_stored+0x9e>
	mov    $0x1,%ecx
	xor    %esi,%esi
	mov    -0x48(%rbp),%r14
	mov    $0xffff,%r15d
	jmpq   5409 <deflate_stored+0x1d9>
	mov    0xac(%rbx),%r11d
	mov    0x98(%rbx),%r10d
	mov    %r11,%r13
	sub    %r10d,%r13d
	mov    %r13d,%r8d
	mov    0x8(%r9),%r9d
	add    %r9,%r8
	cmp    $0xfffe,%r8
	jbe    5289 <deflate_stored+0x59>
	mov    %r15,%r12
	jmpq   528d <deflate_stored+0x5d>
	movl   $0x2,0x1728(%rbx)
	mov    (%rdx),%rsi
	sub    %r9,%rsi
	mov    %r9,%rdx
	mov    %rcx,%r15
	mov    0x60(%rbx),%rdi
	callq  21f0 <memcpy@plt>
	mov    0x50(%rbx),%eax
	mov    %r15,%rcx
	mov    %eax,%edx
	mov    %rdx,0x98(%rbx)
	mov    %eax,0xac(%rbx)
	mov    0x172c(%rbx),%edx
	mov    0x50(%rbx),%eax
	sub    %edx,%eax
	cmp    %eax,%r13d
	jbe    552e <deflate_stored+0x2fe>
	mov    %rax,%r13
	lea    (%rdx,%r13,1),%eax
	mov    %eax,0x172c(%rbx)
	xor    %esi,%esi
	mov    $0xffff,%r15d
	mov    0xac(%rbx),%eax
	cmp    0x1738(%rbx),%rax
	jbe    5556 <deflate_stored+0x326>
	mov    %rax,0x1738(%rbx)
	test   %r12d,%r12d
	je     55b2 <deflate_stored+0x382>
	mov    $0x3,%eax
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	leaveq 
	retq   
	sub    %r9d,%r8d
	mov    %r8d,0xac(%rbx)
	mov    0x60(%rbx),%rdi
	lea    (%r9,%rdi,1),%rsi
	mov    %r8d,%eax
	mov    %rdx,%r15
	mov    %rax,%rdx
	callq  21f0 <memcpy@plt>
	mov    0x1728(%rbx),%eax
	cmp    $0x1,%eax
	jbe    56e8 <deflate_stored+0x4b8>
	mov    %r15,%rdx
	mov    $0x1,%ecx
	jmpq   5446 <deflate_stored+0x216>
	test   %r14d,%r14d
	jne    56fe <deflate_stored+0x4ce>
	mov    0xac(%rbx),%edx
	mov    0x68(%rbx),%eax
	sub    %edx,%eax
	lea    -0x1(%rax),%r12d
	mov    (%rbx),%rax
	cmp    0x8(%rax),%r12d
	jb     5745 <deflate_stored+0x515>
	mov    (%rbx),%rdi
	mov    0x8(%rdi),%eax
	cmp    %r12d,%eax
	jae    55e5 <deflate_stored+0x3b5>
	mov    %rax,%r12
	test   %r12d,%r12d
	je     5618 <deflate_stored+0x3e8>
	mov    0xac(%rbx),%eax
	add    0x60(%rbx),%rax
	mov    %rsi,%r13
	mov    %rax,%rsi
	mov    %r12,%rdx
	callq  7020 <read_buf>
	add    0xac(%rbx),%r12d
	mov    %r12d,0xac(%rbx)
	mov    %r13,%rsi
	mov    $0x1,%ecx
	mov    0xac(%rbx),%eax
	cmp    0x1738(%rbx),%rax
	jbe    562e <deflate_stored+0x3fe>
	mov    %rax,0x1738(%rbx)
	mov    0x18(%rbx),%rdx
	mov    0x1734(%rbx),%eax
	add    $0x2a,%eax
	sar    $0x3,%eax
	mov    %eax,%eax
	sub    %rax,%rdx
	cmp    $0xffff,%rdx
	ja     564f <deflate_stored+0x41f>
	mov    %rdx,%r15
	mov    0x50(%rbx),%eax
	cmp    %eax,%r15d
	ja     565a <deflate_stored+0x42a>
	mov    %r15,%rax
	mov    0xac(%rbx),%r8d
	mov    0x98(%rbx),%edi
	mov    %r8,%rdx
	sub    %edi,%edx
	cmp    %eax,%edx
	jb     57a6 <deflate_stored+0x576>
	cmp    %edx,%r15d
	jb     567c <deflate_stored+0x44c>
	mov    %rdx,%r15
	cmp    $0x4,%r14d
	je     57b8 <deflate_stored+0x588>
	mov    %rsi,%rcx
	mov    0x98(%rbx),%rax
	add    0x60(%rbx),%rax
	mov    %r15d,%r12d
	mov    %rsi,%r14
	mov    %rax,%rsi
	mov    %rbx,%rdi
	mov    %r12,%rdx
	mov    %rcx,%r13
	callq  2160 <_tr_stored_block@plt>
	add    0x98(%rbx),%r12
	mov    %r12,0x98(%rbx)
	mov    (%rbx),%rdi
	callq  6f40 <flush_pending>
	mov    %r14,%rsi
	test   %r13d,%r13d
	je     57ca <deflate_stored+0x59a>
	mov    $0x2,%eax
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	leaveq 
	retq   
	add    $0x1,%eax
	mov    %eax,0x1728(%rbx)
	mov    %r15,%rdx
	mov    $0x1,%ecx
	jmpq   5446 <deflate_stored+0x216>
	cmp    $0x4,%r14d
	je     55bb <deflate_stored+0x38b>
	mov    (%rbx),%rax
	mov    0x8(%rax),%eax
	test   %eax,%eax
	jne    55bb <deflate_stored+0x38b>
	mov    0x98(%rbx),%rdx
	mov    0xac(%rbx),%eax
	cmp    %rax,%rdx
	jne    55bb <deflate_stored+0x38b>
	mov    %rcx,%rax
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	leaveq 
	retq   
	mov    0x98(%rbx),%rax
	mov    0x50(%rbx),%r8d
	cmp    %rax,%r8
	jg     55d7 <deflate_stored+0x3a7>
	sub    %r8,%rax
	mov    %rax,0x98(%rbx)
	sub    %r8d,%edx
	mov    %edx,0xac(%rbx)
	mov    0x60(%rbx),%rdi
	lea    (%r8,%rdi,1),%rax
	mov    %edx,%edx
	mov    %rsi,%r13
	mov    %rax,%rsi
	callq  21f0 <memcpy@plt>
	mov    0x1728(%rbx),%eax
	cmp    $0x1,%eax
	ja     5795 <deflate_stored+0x565>
	add    $0x1,%eax
	mov    %eax,0x1728(%rbx)
	add    0x50(%rbx),%r12d
	mov    %r13,%rsi
	mov    $0x1,%ecx
	jmpq   55d7 <deflate_stored+0x3a7>
	cmp    %r8d,%edi
	je     57e3 <deflate_stored+0x5b3>
	test   %r14d,%r14d
	jne    57f1 <deflate_stored+0x5c1>
	mov    %rsi,%r13
	jmpq   56c4 <deflate_stored+0x494>
	mov    (%rbx),%rax
	mov    0x8(%rax),%eax
	test   %eax,%eax
	je     5803 <deflate_stored+0x5d3>
	mov    %rsi,%rcx
	jmpq   5689 <deflate_stored+0x459>
	mov    %rsi,%rax
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	leaveq 
	retq   
	cmp    $0x4,%r14d
	je     57ab <deflate_stored+0x57b>
	mov    %rsi,%r13
	jmpq   56c4 <deflate_stored+0x494>
	mov    (%rbx),%rax
	mov    0x8(%rax),%eax
	test   %eax,%eax
	je     5814 <deflate_stored+0x5e4>
	mov    %rsi,%r13
	jmpq   56c4 <deflate_stored+0x494>
	cmp    %r15d,%edx
	je     5689 <deflate_stored+0x459>
	mov    %rsi,%rcx
	jmpq   5689 <deflate_stored+0x459>
	cmp    %edx,%r15d
	jae    5674 <deflate_stored+0x444>
	mov    %rsi,%r13
	jmpq   56c4 <deflate_stored+0x494>
	data16 nopw %cs:0x0(%rax,%rax,1)

0005830 <deflate_fast>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %rbx,-0x8(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %r15,-0x28(%rbp)
	mov    %rdi,%r12
	mov    %rsi,%r13
	mov    0x12797(%rip),%r14        # 17ff0 <_dist_code@@Base+0x281c>
	mov    0x12768(%rip),%r15        # 17fc8 <_length_code@@Base+0x28f4>
	xor    %ebx,%ebx
	mov    $0x1,%eax
	jmp    58bb <deflate_fast+0x8b>
	mov    %eax,%esi
	add    0x60(%r12),%rsi
	mov    0xac(%r12),%edx
	mov    0x98(%r12),%rax
	sub    %rax,%rdx
	mov    %r12,%rdi
	mov    %rbx,%rcx
	callq  2120 <_tr_flush_block@plt>
	mov    0xac(%r12),%eax
	mov    %rax,0x98(%r12)
	mov    (%r12),%rdi
	callq  6f40 <flush_pending>
	mov    (%r12),%rax
	mov    0x20(%rax),%eax
	test   %eax,%eax
	je     5942 <deflate_fast+0x112>
	mov    $0x1,%eax
	mov    0xb4(%r12),%ecx
	cmp    $0x105,%ecx
	ja     5960 <deflate_fast+0x130>
	mov    %r12,%rdi
	callq  4f80 <fill_window>
	mov    0xb4(%r12),%eax
	cmp    $0x105,%eax
	ja     58ef <deflate_fast+0xbf>
	test   %r13d,%r13d
	je     5979 <deflate_fast+0x149>
	test   %eax,%eax
	jne    595b <deflate_fast+0x12b>
	mov    $0x2,%r14d
	mov    0xac(%r12),%eax
	cmp    $0x1,%eax
	jbe    5909 <deflate_fast+0xd9>
	mov    %r14,%rax
	mov    %eax,0x172c(%r12)
	cmp    $0x4,%r13d
	je     5992 <deflate_fast+0x162>
	mov    0x170c(%r12),%eax
	test   %eax,%eax
	jne    5a0a <deflate_fast+0x1da>
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	mov    $0x1,%eax
	leaveq 
	retq   
	mov    %rbx,%rax
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	leaveq 
	retq   
	mov    $0x1,%eax
	mov    0xb4(%r12),%ecx
	cmp    $0x2,%ecx
	ja     5a23 <deflate_fast+0x1f3>
	mov    %rbx,%rsi
	jmpq   5a92 <deflate_fast+0x262>
	mov    %rbx,%rax
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	leaveq 
	retq   
	mov    0x98(%r12),%rax
	test   %rax,%rax
	js     59a6 <deflate_fast+0x176>
	mov    %eax,%ebx
	add    0x60(%r12),%rbx
	mov    0xac(%r12),%edx
	mov    0x98(%r12),%rax
	sub    %rax,%rdx
	mov    %rbx,%rsi
	mov    %r12,%rdi
	mov    $0x1,%ecx
	callq  2120 <_tr_flush_block@plt>
	mov    0xac(%r12),%eax
	mov    %rax,0x98(%r12)
	mov    (%r12),%rdi
	callq  6f40 <flush_pending>
	mov    (%r12),%rax
	mov    0x20(%rax),%eax
	test   %eax,%eax
	jne    5b51 <deflate_fast+0x321>
	mov    %r14,%rax
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	leaveq 
	retq   
	mov    0x98(%r12),%rax
	test   %rax,%rax
	jns    5b6c <deflate_fast+0x33c>
	mov    %rbx,%rsi
	jmpq   5b73 <deflate_fast+0x343>
	mov    0xac(%r12),%edi
	lea    0x2(%rdi),%ecx
	mov    %ecx,%edx
	mov    0x60(%r12),%rcx
	movzbl (%rdx,%rcx,1),%edx
	mov    0x80(%r12),%esi
	mov    0x90(%r12),%ecx
	shl    %cl,%esi
	xor    %esi,%edx
	and    0x8c(%r12),%edx
	mov    %edx,0x80(%r12)
	mov    %edx,%ecx
	mov    0x78(%r12),%rdx
	movzwl (%rdx,%rcx,2),%esi
	and    0x58(%r12),%edi
	mov    %edi,%ecx
	mov    0x70(%r12),%rdx
	mov    %si,(%rdx,%rcx,2)
	movzwl 0xac(%r12),%edi
	mov    0x78(%r12),%rdx
	mov    0x80(%r12),%ecx
	mov    %di,(%rdx,%rcx,2)
	test   %esi,%esi
	je     5ac4 <deflate_fast+0x294>
	mov    0xac(%r12),%edx
	sub    %esi,%edx
	mov    0x50(%r12),%ecx
	add    $0xfffffefa,%ecx
	cmp    %edx,%ecx
	jb     5ac4 <deflate_fast+0x294>
	mov    %r12,%rdi
	callq  70e0 <longest_match>
	mov    %eax,0xa0(%r12)
	mov    $0x1,%eax
	mov    0xa0(%r12),%edi
	cmp    $0x2,%edi
	ja     5bd2 <deflate_fast+0x3a2>
	mov    0x1710(%r12),%rdx
	mov    0x170c(%r12),%ecx
	mov    0xac(%r12),%edi
	mov    0x60(%r12),%rsi
	movzbl (%rdi,%rsi,1),%esi
	movw   $0x0,(%rdx,%rcx,2)
	mov    0x170c(%r12),%edx
	lea    0x1(%rdx),%ecx
	mov    %ecx,0x170c(%r12)
	mov    0x1700(%r12),%rcx
	mov    %sil,(%rdx,%rcx,1)
	movzwl 0xd4(%r12,%rsi,4),%ecx
	add    $0x1,%ecx
	mov    %cx,0xd4(%r12,%rsi,4)
	mov    0x1708(%r12),%ecx
	add    $0xffffffff,%ecx
	cmp    0x170c(%r12),%ecx
	je     5c67 <deflate_fast+0x437>
	mov    %rbx,%rsi
	jmpq   5c6a <deflate_fast+0x43a>
	mov    $0x3,%eax
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	leaveq 
	retq   
	mov    %eax,%esi
	add    0x60(%r12),%rsi
	mov    0xac(%r12),%edx
	mov    0x98(%r12),%rax
	sub    %rax,%rdx
	mov    %r12,%rdi
	mov    %rbx,%rcx
	callq  2120 <_tr_flush_block@plt>
	mov    0xac(%r12),%eax
	mov    %rax,0x98(%r12)
	mov    (%r12),%rdi
	callq  6f40 <flush_pending>
	mov    (%r12),%rax
	mov    0x20(%rax),%eax
	test   %eax,%eax
	jne    5cb1 <deflate_fast+0x481>
	mov    %rbx,%rax
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	leaveq 
	retq   
	mov    0xac(%r12),%ecx
	mov    0xb0(%r12),%edx
	sub    %edx,%ecx
	mov    0x1710(%r12),%rsi
	mov    0x170c(%r12),%edx
	mov    %cx,(%rsi,%rdx,2)
	mov    0x170c(%r12),%esi
	lea    0x1(%rsi),%edx
	mov    %edx,0x170c(%r12)
	add    $0xfd,%edi
	mov    0x1700(%r12),%rdx
	mov    %dil,(%rsi,%rdx,1)
	movzbl %dil,%edx
	movzbl (%rdx,%r15,1),%edx
	add    $0x101,%edx
	movslq %edx,%rsi
	movzwl 0xd4(%r12,%rsi,4),%edx
	add    $0x1,%edx
	mov    %dx,0xd4(%r12,%rsi,4)
	add    $0xffff,%ecx
	cmp    $0xff,%cx
	jbe    5ccc <deflate_fast+0x49c>
	movzwl %cx,%ecx
	shr    $0x7,%ecx
	add    $0x100,%ecx
	movslq %ecx,%rcx
	movzbl (%rcx,%r14,1),%ecx
	jmp    5cd4 <deflate_fast+0x4a4>
	mov    %rax,%rsi
	mov    0xb4(%r12),%ecx
	add    $0xffffffff,%ecx
	mov    %ecx,0xb4(%r12)
	mov    0xac(%r12),%ecx
	add    $0x1,%ecx
	mov    %ecx,0xac(%r12)
	test   %esi,%esi
	jle    58bb <deflate_fast+0x8b>
	mov    0x98(%r12),%rax
	test   %rax,%rax
	jns    5869 <deflate_fast+0x39>
	mov    %rbx,%rsi
	jmpq   5870 <deflate_fast+0x40>
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	mov    $0x1,%eax
	leaveq 
	retq   
	movzwl %cx,%ecx
	movzbl (%rcx,%r14,1),%ecx
	movslq %ecx,%rdx
	movzwl 0x9c8(%r12,%rdx,4),%ecx
	add    $0x1,%ecx
	mov    %cx,0x9c8(%r12,%rdx,4)
	mov    0x1708(%r12),%ecx
	add    $0xffffffff,%ecx
	cmp    0x170c(%r12),%ecx
	je     5d06 <deflate_fast+0x4d6>
	mov    %rbx,%rsi
	jmp    5d09 <deflate_fast+0x4d9>
	mov    %rax,%rsi
	mov    0xa0(%r12),%edx
	mov    0xb4(%r12),%ecx
	sub    %edx,%ecx
	mov    %ecx,0xb4(%r12)
	mov    0xc0(%r12),%edi
	cmp    %edx,%edi
	jb     5df6 <deflate_fast+0x5c6>
	cmp    $0x2,%ecx
	jbe    5df6 <deflate_fast+0x5c6>
	lea    -0x1(%rdx),%ecx
	mov    %ecx,0xa0(%r12)
	mov    0xac(%r12),%ecx
	lea    0x1(%rcx),%r8d
	mov    %r8d,0xac(%r12)
	add    $0x3,%ecx
	mov    %ecx,%edx
	mov    0x60(%r12),%rcx
	movzbl (%rdx,%rcx,1),%edx
	mov    0x80(%r12),%edi
	mov    0x90(%r12),%ecx
	shl    %cl,%edi
	xor    %edi,%edx
	and    0x8c(%r12),%edx
	mov    %edx,0x80(%r12)
	mov    %edx,%ecx
	mov    0x78(%r12),%rdx
	movzwl (%rdx,%rcx,2),%edi
	and    0x58(%r12),%r8d
	mov    %r8d,%ecx
	mov    0x70(%r12),%rdx
	mov    %di,(%rdx,%rcx,2)
	movzwl 0xac(%r12),%edi
	mov    0x78(%r12),%rdx
	mov    0x80(%r12),%ecx
	mov    %di,(%rdx,%rcx,2)
	mov    0xa0(%r12),%ecx
	add    $0xffffffff,%ecx
	mov    %ecx,0xa0(%r12)
	test   %ecx,%ecx
	jne    5d47 <deflate_fast+0x517>
	mov    0xac(%r12),%ecx
	add    $0x1,%ecx
	mov    %ecx,0xac(%r12)
	jmpq   5c90 <deflate_fast+0x460>
	add    0xac(%r12),%edx
	mov    %edx,0xac(%r12)
	movl   $0x0,0xa0(%r12)
	mov    %edx,%ecx
	mov    0x60(%r12),%r8
	movzbl (%r8,%rcx,1),%edi
	mov    %edi,0x80(%r12)
	lea    0x1(%rdx),%ecx
	mov    %ecx,%ecx
	movzbl (%rcx,%r8,1),%edx
	mov    0x90(%r12),%ecx
	shl    %cl,%edi
	xor    %edi,%edx
	and    0x8c(%r12),%edx
	mov    %edx,0x80(%r12)
	jmpq   5c90 <deflate_fast+0x460>
	data16 nopw %cs:0x0(%rax,%rax,1)
	nopl   0x0(%rax)

0005e60 <deflate_slow>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %rbx,-0x8(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %r15,-0x28(%rbp)
	mov    %rdi,%r12
	mov    %rsi,%r13
	mov    0x12167(%rip),%r14        # 17ff0 <_dist_code@@Base+0x281c>
	mov    0x12138(%rip),%r15        # 17fc8 <_length_code@@Base+0x28f4>
	xor    %ebx,%ebx
	mov    $0x1,%eax
	jmp    5edb <deflate_slow+0x7b>
	movslq 0xa8(%r12),%rcx
	test   %ecx,%ecx
	jne    5fde <deflate_slow+0x17e>
	movl   $0x1,0xa8(%r12)
	mov    0xac(%r12),%ecx
	add    $0x1,%ecx
	mov    %ecx,0xac(%r12)
	mov    0xb4(%r12),%ecx
	add    $0xffffffff,%ecx
	mov    %ecx,0xb4(%r12)
	mov    0xb4(%r12),%ecx
	cmp    $0x105,%ecx
	ja     6064 <deflate_slow+0x204>
	mov    %r12,%rdi
	callq  4f80 <fill_window>
	mov    0xb4(%r12),%eax
	cmp    $0x105,%eax
	ja     5f0f <deflate_slow+0xaf>
	test   %r13d,%r13d
	je     607d <deflate_slow+0x21d>
	test   %eax,%eax
	jne    605f <deflate_slow+0x1ff>
	movslq 0xa8(%r12),%rax
	test   %eax,%eax
	je     5f8b <deflate_slow+0x12b>
	mov    0x1710(%r12),%rdx
	mov    0x170c(%r12),%ecx
	mov    0xac(%r12),%eax
	add    $0xffffffff,%eax
	mov    %eax,%esi
	mov    0x60(%r12),%rax
	movzbl (%rsi,%rax,1),%esi
	movw   $0x0,(%rdx,%rcx,2)
	mov    0x170c(%r12),%ecx
	lea    0x1(%rcx),%eax
	mov    %eax,0x170c(%r12)
	mov    0x1700(%r12),%rax
	mov    %sil,(%rcx,%rax,1)
	lea    0xd4(%r12,%rsi,4),%rcx
	movzwl (%rcx),%eax
	add    $0x1,%eax
	mov    %ax,(%rcx)
	movl   $0x0,0xa8(%r12)
	mov    $0x2,%r14d
	mov    0xac(%r12),%eax
	cmp    $0x1,%eax
	jbe    5fa1 <deflate_slow+0x141>
	mov    %r14,%rax
	mov    %eax,0x172c(%r12)
	cmp    $0x4,%r13d
	je     6096 <deflate_slow+0x236>
	mov    0x170c(%r12),%eax
	test   %eax,%eax
	jne    610e <deflate_slow+0x2ae>
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	mov    $0x1,%eax
	leaveq 
	retq   
	mov    0x1710(%r12),%rsi
	mov    0x170c(%r12),%edx
	mov    0xac(%r12),%ecx
	add    $0xffffffff,%ecx
	mov    %ecx,%edi
	mov    0x60(%r12),%rcx
	movzbl (%rdi,%rcx,1),%edi
	movw   $0x0,(%rsi,%rdx,2)
	mov    0x170c(%r12),%edx
	lea    0x1(%rdx),%ecx
	mov    %ecx,0x170c(%r12)
	mov    0x1700(%r12),%rcx
	mov    %dil,(%rdx,%rcx,1)
	movzwl 0xd4(%r12,%rdi,4),%ecx
	add    $0x1,%ecx
	mov    %cx,0xd4(%r12,%rdi,4)
	mov    0x1708(%r12),%ecx
	add    $0xffffffff,%ecx
	cmp    0x170c(%r12),%ecx
	je     6127 <deflate_slow+0x2c7>
	mov    %rbx,%rcx
	jmpq   612a <deflate_slow+0x2ca>
	mov    $0x1,%eax
	mov    0xb4(%r12),%ecx
	cmp    $0x2,%ecx
	ja     614b <deflate_slow+0x2eb>
	mov    %rbx,%rsi
	jmpq   61ba <deflate_slow+0x35a>
	mov    %rbx,%rax
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	leaveq 
	retq   
	mov    0x98(%r12),%rax
	test   %rax,%rax
	js     60aa <deflate_slow+0x24a>
	mov    %eax,%ebx
	add    0x60(%r12),%rbx
	mov    0xac(%r12),%edx
	mov    0x98(%r12),%rax
	sub    %rax,%rdx
	mov    %rbx,%rsi
	mov    %r12,%rdi
	mov    $0x1,%ecx
	callq  2120 <_tr_flush_block@plt>
	mov    0xac(%r12),%eax
	mov    %rax,0x98(%r12)
	mov    (%r12),%rdi
	callq  6f40 <flush_pending>
	mov    (%r12),%rax
	mov    0x20(%rax),%eax
	test   %eax,%eax
	jne    62f7 <deflate_slow+0x497>
	mov    %r14,%rax
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	leaveq 
	retq   
	mov    0x98(%r12),%rax
	test   %rax,%rax
	jns    6312 <deflate_slow+0x4b2>
	mov    %rbx,%rsi
	jmpq   6319 <deflate_slow+0x4b9>
	mov    %rax,%rcx
	test   %ecx,%ecx
	jle    63be <deflate_slow+0x55e>
	mov    0x98(%r12),%rcx
	test   %rcx,%rcx
	jns    6378 <deflate_slow+0x518>
	mov    %rbx,%rsi
	jmpq   637f <deflate_slow+0x51f>
	mov    0xac(%r12),%edi
	lea    0x2(%rdi),%ecx
	mov    %ecx,%ecx
	mov    0x60(%r12),%rdx
	movzbl (%rcx,%rdx,1),%edx
	mov    0x80(%r12),%esi
	mov    0x90(%r12),%ecx
	shl    %cl,%esi
	xor    %esi,%edx
	and    0x8c(%r12),%edx
	mov    %edx,0x80(%r12)
	mov    %edx,%ecx
	mov    0x78(%r12),%rdx
	movzwl (%rdx,%rcx,2),%esi
	and    0x58(%r12),%edi
	mov    %edi,%ecx
	mov    0x70(%r12),%rdx
	mov    %si,(%rdx,%rcx,2)
	movzwl 0xac(%r12),%edi
	mov    0x78(%r12),%rdx
	mov    0x80(%r12),%ecx
	mov    %di,(%rdx,%rcx,2)
	mov    0xa0(%r12),%edx
	mov    %edx,0xb8(%r12)
	mov    0xb0(%r12),%ecx
	mov    %ecx,0xa4(%r12)
	movl   $0x2,0xa0(%r12)
	test   %esi,%esi
	je     622b <deflate_slow+0x3cb>
	cmp    0xc0(%r12),%edx
	jae    622b <deflate_slow+0x3cb>
	mov    0xac(%r12),%edx
	sub    %esi,%edx
	mov    0x50(%r12),%ecx
	add    $0xfffffefa,%ecx
	cmp    %edx,%ecx
	jb     622b <deflate_slow+0x3cb>
	mov    %r12,%rdi
	callq  70e0 <longest_match>
	mov    %eax,0xa0(%r12)
	cmp    $0x5,%eax
	jbe    640c <deflate_slow+0x5ac>
	mov    $0x1,%eax
	mov    0xb8(%r12),%r8d
	cmp    $0x2,%r8d
	jbe    5e99 <deflate_slow+0x39>
	mov    0xa0(%r12),%ecx
	cmp    %r8d,%ecx
	ja     5e99 <deflate_slow+0x39>
	mov    0xb4(%r12),%esi
	mov    0xac(%r12),%r9d
	lea    -0x1(%r9),%ecx
	mov    0xa4(%r12),%edx
	sub    %edx,%ecx
	mov    0x1710(%r12),%rdi
	mov    0x170c(%r12),%edx
	mov    %cx,(%rdi,%rdx,2)
	mov    0x170c(%r12),%edi
	lea    0x1(%rdi),%edx
	mov    %edx,0x170c(%r12)
	add    $0xfd,%r8d
	mov    0x1700(%r12),%rdx
	mov    %r8b,(%rdi,%rdx,1)
	movzbl %r8b,%edx
	movzbl (%rdx,%r15,1),%edx
	add    $0x101,%edx
	movslq %edx,%rdi
	movzwl 0xd4(%r12,%rdi,4),%edx
	add    $0x1,%edx
	mov    %dx,0xd4(%r12,%rdi,4)
	add    $0xffff,%ecx
	cmp    $0xff,%cx
	jbe    6428 <deflate_slow+0x5c8>
	movzwl %cx,%ecx
	shr    $0x7,%ecx
	add    $0x100,%ecx
	movslq %ecx,%rcx
	movzbl (%rcx,%r14,1),%ecx
	jmpq   6430 <deflate_slow+0x5d0>
	mov    $0x3,%eax
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	leaveq 
	retq   
	mov    %eax,%esi
	add    0x60(%r12),%rsi
	mov    0xac(%r12),%edx
	mov    0x98(%r12),%rax
	sub    %rax,%rdx
	mov    %r12,%rdi
	mov    %rbx,%rcx
	callq  2120 <_tr_flush_block@plt>
	mov    0xac(%r12),%eax
	mov    %rax,0x98(%r12)
	mov    (%r12),%rdi
	callq  6f40 <flush_pending>
	mov    (%r12),%rax
	mov    0x20(%rax),%eax
	test   %eax,%eax
	jne    6462 <deflate_slow+0x602>
	mov    %rbx,%rax
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	leaveq 
	retq   
	mov    %ecx,%esi
	add    0x60(%r12),%rsi
	mov    0xac(%r12),%edx
	mov    0x98(%r12),%rcx
	sub    %rcx,%rdx
	mov    %rbx,%rcx
	mov    %rax,%rbx
	mov    %r12,%rdi
	callq  2120 <_tr_flush_block@plt>
	mov    0xac(%r12),%eax
	mov    %rax,0x98(%r12)
	mov    (%r12),%rdi
	callq  6f40 <flush_pending>
	mov    %rbx,%rax
	xor    %ebx,%ebx
	mov    0xac(%r12),%ecx
	add    $0x1,%ecx
	mov    %ecx,0xac(%r12)
	mov    0xb4(%r12),%ecx
	add    $0xffffffff,%ecx
	mov    %ecx,0xb4(%r12)
	mov    (%r12),%rcx
	mov    0x20(%rcx),%ecx
	test   %ecx,%ecx
	jne    5edb <deflate_slow+0x7b>
	mov    %rbx,%rax
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	leaveq 
	retq   
	movslq 0xc8(%r12),%rcx
	cmp    $0x1,%ecx
	je     647d <deflate_slow+0x61d>
	cmp    $0x3,%eax
	je     6493 <deflate_slow+0x633>
	mov    $0x1,%eax
	jmpq   622b <deflate_slow+0x3cb>
	movzwl %cx,%ecx
	movzbl (%rcx,%r14,1),%ecx
	movslq %ecx,%rdx
	movzwl 0x9c8(%r12,%rdx,4),%ecx
	add    $0x1,%ecx
	mov    %cx,0x9c8(%r12,%rdx,4)
	mov    0x1708(%r12),%ecx
	add    $0xffffffff,%ecx
	cmp    0x170c(%r12),%ecx
	je     64b6 <deflate_slow+0x656>
	mov    %rbx,%rdx
	jmp    64b9 <deflate_slow+0x659>
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	mov    $0x1,%eax
	leaveq 
	retq   
	movl   $0x2,0xa0(%r12)
	mov    $0x1,%eax
	jmpq   622b <deflate_slow+0x3cb>
	mov    0xac(%r12),%eax
	mov    0xb0(%r12),%ecx
	sub    %ecx,%eax
	cmp    $0x1000,%eax
	ja     647d <deflate_slow+0x61d>
	mov    $0x1,%eax
	jmpq   622b <deflate_slow+0x3cb>
	mov    %rax,%rdx
	mov    0xb4(%r12),%ecx
	mov    0xb8(%r12),%r8d
	lea    -0x1(%r8),%edi
	sub    %edi,%ecx
	mov    %ecx,0xb4(%r12)
	lea    -0x2(%r8),%ecx
	mov    %ecx,0xb8(%r12)
	lea    -0x3(%r9,%rsi,1),%esi
	mov    0xac(%r12),%ecx
	lea    0x1(%rcx),%r9d
	mov    %r9d,0xac(%r12)
	cmp    %esi,%r9d
	ja     656e <deflate_slow+0x70e>
	add    $0x3,%ecx
	mov    %ecx,%edi
	mov    0x60(%r12),%rcx
	movzbl (%rdi,%rcx,1),%edi
	mov    0x80(%r12),%r8d
	mov    0x90(%r12),%ecx
	shl    %cl,%r8d
	xor    %r8d,%edi
	and    0x8c(%r12),%edi
	mov    %edi,0x80(%r12)
	mov    %edi,%ecx
	mov    0x78(%r12),%rdi
	movzwl (%rdi,%rcx,2),%r8d
	and    0x58(%r12),%r9d
	mov    %r9d,%ecx
	mov    0x70(%r12),%rdi
	mov    %r8w,(%rdi,%rcx,2)
	movzwl 0xac(%r12),%r8d
	mov    0x78(%r12),%rdi
	mov    0x80(%r12),%ecx
	mov    %r8w,(%rdi,%rcx,2)
	mov    0xb8(%r12),%ecx
	add    $0xffffffff,%ecx
	mov    %ecx,0xb8(%r12)
	test   %ecx,%ecx
	jne    64e8 <deflate_slow+0x688>
	movl   $0x0,0xa8(%r12)
	movl   $0x2,0xa0(%r12)
	mov    0xac(%r12),%ecx
	add    $0x1,%ecx
	mov    %ecx,0xac(%r12)
	test   %edx,%edx
	jle    5edb <deflate_slow+0x7b>
	mov    0x98(%r12),%rax
	test   %rax,%rax
	jns    65ce <deflate_slow+0x76e>
	mov    %rbx,%rsi
	jmp    65d5 <deflate_slow+0x775>
	mov    %eax,%esi
	add    0x60(%r12),%rsi
	mov    0xac(%r12),%edx
	mov    0x98(%r12),%rax
	sub    %rax,%rdx
	mov    %r12,%rdi
	mov    %rbx,%rcx
	callq  2120 <_tr_flush_block@plt>
	mov    0xac(%r12),%eax
	mov    %rax,0x98(%r12)
	mov    (%r12),%rdi
	callq  6f40 <flush_pending>
	mov    (%r12),%rax
	mov    0x20(%rax),%eax
	test   %eax,%eax
	je     6621 <deflate_slow+0x7c1>
	mov    $0x1,%eax
	jmpq   5edb <deflate_slow+0x7b>
	mov    %rbx,%rax
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	leaveq 
	retq   
	nopw   0x0(%rax,%rax,1)

0006640 <deflate_rle>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %rbx,-0x8(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %r15,-0x28(%rbp)
	mov    %rdi,%r12
	mov    %rsi,%r13
	mov    0x11987(%rip),%r14        # 17ff0 <_dist_code@@Base+0x281c>
	mov    0x11958(%rip),%r15        # 17fc8 <_length_code@@Base+0x28f4>
	xor    %ebx,%ebx
	mov    $0x1,%ecx
	mov    $0x102,%eax
	jmp    66d5 <deflate_rle+0x95>
	mov    %eax,%esi
	add    0x60(%r12),%rsi
	mov    0xac(%r12),%edx
	mov    0x98(%r12),%rax
	sub    %rax,%rdx
	mov    %r12,%rdi
	mov    %rbx,%rcx
	callq  2120 <_tr_flush_block@plt>
	mov    0xac(%r12),%eax
	mov    %rax,0x98(%r12)
	mov    (%r12),%rdi
	callq  6f40 <flush_pending>
	mov    (%r12),%rax
	mov    0x20(%rax),%eax
	test   %eax,%eax
	je     674e <deflate_rle+0x10e>
	mov    $0x102,%eax
	mov    $0x1,%ecx
	mov    0xb4(%r12),%edx
	cmp    $0x102,%edx
	ja     6771 <deflate_rle+0x131>
	mov    %r12,%rdi
	callq  4f80 <fill_window>
	mov    0xb4(%r12),%eax
	cmp    $0x102,%eax
	ja     6709 <deflate_rle+0xc9>
	test   %r13d,%r13d
	je     68f8 <deflate_rle+0x2b8>
	test   %eax,%eax
	jne    6767 <deflate_rle+0x127>
	movl   $0x0,0x172c(%r12)
	cmp    $0x4,%r13d
	je     6911 <deflate_rle+0x2d1>
	mov    0x170c(%r12),%eax
	test   %eax,%eax
	jne    698b <deflate_rle+0x34b>
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	mov    $0x1,%eax
	leaveq 
	retq   
	mov    %rbx,%rax
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	leaveq 
	retq   
	mov    $0x102,%eax
	mov    $0x1,%ecx
	movl   $0x0,0xa0(%r12)
	mov    0xb4(%r12),%edx
	cmp    $0x2,%edx
	jbe    686a <deflate_rle+0x22a>
	mov    0xac(%r12),%edx
	test   %edx,%edx
	je     686a <deflate_rle+0x22a>
	add    0x60(%r12),%rdx
	movzbl (%rdx),%edi
	movzbl -0x1(%rdx),%esi
	cmp    %sil,%dil
	jne    686a <deflate_rle+0x22a>
	movzbl 0x1(%rdx),%r8d
	cmp    %r8b,%dil
	jne    686a <deflate_rle+0x22a>
	lea    0x2(%rdx),%rsi
	movzbl (%rsi),%r10d
	cmp    %r10b,%r8b
	jne    686a <deflate_rle+0x22a>
	add    $0x102,%rdx
	lea    0x1(%rsi),%rdi
	movzbl (%rdi),%r8d
	cmp    %r8b,%r10b
	jne    6847 <deflate_rle+0x207>
	lea    0x2(%rsi),%rdi
	movzbl (%rdi),%r9d
	cmp    %r9b,%r8b
	jne    6847 <deflate_rle+0x207>
	lea    0x3(%rsi),%rdi
	movzbl (%rdi),%r8d
	cmp    %r8b,%r9b
	jne    6847 <deflate_rle+0x207>
	lea    0x4(%rsi),%rdi
	movzbl (%rdi),%r9d
	cmp    %r9b,%r8b
	jne    6847 <deflate_rle+0x207>
	lea    0x5(%rsi),%rdi
	movzbl (%rdi),%r8d
	cmp    %r8b,%r9b
	jne    6847 <deflate_rle+0x207>
	lea    0x6(%rsi),%rdi
	movzbl (%rdi),%r9d
	cmp    %r9b,%r8b
	jne    6847 <deflate_rle+0x207>
	lea    0x7(%rsi),%rdi
	movzbl (%rdi),%r8d
	cmp    %r8b,%r9b
	jne    6847 <deflate_rle+0x207>
	add    $0x8,%rsi
	movzbl (%rsi),%edi
	cmp    %dil,%r8b
	je     69a4 <deflate_rle+0x364>
	mov    %rsi,%rdi
	sub    %rdi,%rdx
	neg    %edx
	add    %eax,%edx
	mov    %edx,0xa0(%r12)
	mov    0xb4(%r12),%esi
	cmp    %esi,%edx
	jbe    686a <deflate_rle+0x22a>
	mov    %esi,0xa0(%r12)
	mov    0xa0(%r12),%edi
	cmp    $0x2,%edi
	ja     69b5 <deflate_rle+0x375>
	mov    0x1710(%r12),%rsi
	mov    0x170c(%r12),%edx
	mov    0xac(%r12),%r8d
	mov    0x60(%r12),%rdi
	movzbl (%r8,%rdi,1),%edi
	movw   $0x0,(%rsi,%rdx,2)
	mov    0x170c(%r12),%esi
	lea    0x1(%rsi),%edx
	mov    %edx,0x170c(%r12)
	mov    0x1700(%r12),%rdx
	mov    %dil,(%rsi,%rdx,1)
	movzwl 0xd4(%r12,%rdi,4),%edx
	add    $0x1,%edx
	mov    %dx,0xd4(%r12,%rdi,4)
	mov    0x1708(%r12),%edx
	add    $0xffffffff,%edx
	cmp    0x170c(%r12),%edx
	je     6a51 <deflate_rle+0x411>
	mov    %rbx,%rdx
	jmpq   6a54 <deflate_rle+0x414>
	mov    %rbx,%rax
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	leaveq 
	retq   
	mov    0x98(%r12),%rax
	test   %rax,%rax
	js     6925 <deflate_rle+0x2e5>
	mov    %eax,%ebx
	add    0x60(%r12),%rbx
	mov    0xac(%r12),%edx
	mov    0x98(%r12),%rax
	sub    %rax,%rdx
	mov    %rbx,%rsi
	mov    %r12,%rdi
	mov    $0x1,%ecx
	callq  2120 <_tr_flush_block@plt>
	mov    0xac(%r12),%eax
	mov    %rax,0x98(%r12)
	mov    (%r12),%rdi
	callq  6f40 <flush_pending>
	mov    (%r12),%rax
	mov    0x20(%rax),%eax
	test   %eax,%eax
	jne    6a7f <deflate_rle+0x43f>
	mov    $0x2,%eax
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	leaveq 
	retq   
	mov    0x98(%r12),%rax
	test   %rax,%rax
	jns    6a9a <deflate_rle+0x45a>
	mov    %rbx,%rsi
	jmpq   6aa1 <deflate_rle+0x461>
	cmp    %rdx,%rsi
	jb     67d9 <deflate_rle+0x199>
	mov    %rsi,%rdi
	jmpq   6847 <deflate_rle+0x207>
	mov    0x1710(%r12),%rsi
	mov    0x170c(%r12),%edx
	movw   $0x1,(%rsi,%rdx,2)
	mov    0x170c(%r12),%esi
	lea    0x1(%rsi),%edx
	mov    %edx,0x170c(%r12)
	add    $0xfd,%edi
	mov    0x1700(%r12),%rdx
	mov    %dil,(%rsi,%rdx,1)
	movzbl %dil,%edx
	movzbl (%rdx,%r15,1),%edx
	add    $0x101,%edx
	movslq %edx,%rsi
	movzwl 0xd4(%r12,%rsi,4),%edx
	add    $0x1,%edx
	mov    %dx,0xd4(%r12,%rsi,4)
	movzbl (%r14),%esi
	movzwl 0x9c8(%r12,%rsi,4),%edx
	add    $0x1,%edx
	mov    %dx,0x9c8(%r12,%rsi,4)
	mov    0x1708(%r12),%edx
	add    $0xffffffff,%edx
	cmp    0x170c(%r12),%edx
	je     6afc <deflate_rle+0x4bc>
	mov    %rbx,%rdx
	jmpq   6aff <deflate_rle+0x4bf>
	mov    %rcx,%rdx
	mov    0xb4(%r12),%esi
	add    $0xffffffff,%esi
	mov    %esi,0xb4(%r12)
	mov    0xac(%r12),%esi
	add    $0x1,%esi
	mov    %esi,0xac(%r12)
	jmpq   6b35 <deflate_rle+0x4f5>
	mov    $0x3,%eax
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	leaveq 
	retq   
	mov    %eax,%esi
	add    0x60(%r12),%rsi
	mov    0xac(%r12),%edx
	mov    0x98(%r12),%rax
	sub    %rax,%rdx
	mov    %r12,%rdi
	mov    %rbx,%rcx
	callq  2120 <_tr_flush_block@plt>
	mov    0xac(%r12),%eax
	mov    %rax,0x98(%r12)
	mov    (%r12),%rdi
	callq  6f40 <flush_pending>
	mov    (%r12),%rax
	mov    0x20(%rax),%eax
	test   %eax,%eax
	jne    6b56 <deflate_rle+0x516>
	mov    %rbx,%rax
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	leaveq 
	retq   
	mov    %rcx,%rdx
	mov    0xb4(%r12),%edi
	mov    0xa0(%r12),%esi
	sub    %esi,%edi
	mov    %edi,0xb4(%r12)
	add    0xac(%r12),%esi
	mov    %esi,0xac(%r12)
	movl   $0x0,0xa0(%r12)
	test   %edx,%edx
	jle    66d5 <deflate_rle+0x95>
	mov    0x98(%r12),%rax
	test   %rax,%rax
	jns    667e <deflate_rle+0x3e>
	mov    %rbx,%rsi
	jmpq   6685 <deflate_rle+0x45>
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	mov    $0x1,%eax
	leaveq 
	retq   
	data16 nopw %cs:0x0(%rax,%rax,1)
	nopl   0x0(%rax)

0006b80 <deflate_huff>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %r13,-0x8(%rbp)
	mov    %r14,-0x10(%rbp)
	mov    %r15,-0x18(%rbp)
	mov    %rsi,-0x20(%rbp)
	mov    %rdi,%r14
	xor    %r13d,%r13d
	mov    $0x1,%r15d
	jmp    6bec <deflate_huff+0x6c>
	mov    %eax,%esi
	add    0x60(%r14),%rsi
	mov    0xac(%r14),%edx
	mov    0x98(%r14),%rax
	sub    %rax,%rdx
	mov    %r14,%rdi
	mov    %r13,%rcx
	callq  2120 <_tr_flush_block@plt>
	mov    0xac(%r14),%eax
	mov    %rax,0x98(%r14)
	mov    (%r14),%rdi
	callq  6f40 <flush_pending>
	mov    (%r14),%rax
	mov    0x20(%rax),%eax
	test   %eax,%eax
	je     6c71 <deflate_huff+0xf1>
	mov    0xb4(%r14),%eax
	test   %eax,%eax
	je     6c82 <deflate_huff+0x102>
	movl   $0x0,0xa0(%r14)
	mov    0x1710(%r14),%rcx
	mov    0x170c(%r14),%eax
	mov    0xac(%r14),%esi
	mov    0x60(%r14),%rdx
	movzbl (%rsi,%rdx,1),%edx
	movw   $0x0,(%rcx,%rax,2)
	mov    0x170c(%r14),%ecx
	lea    0x1(%rcx),%eax
	mov    %eax,0x170c(%r14)
	mov    0x1700(%r14),%rax
	mov    %dl,(%rcx,%rax,1)
	movzwl 0xd4(%r14,%rdx,4),%eax
	add    $0x1,%eax
	mov    %ax,0xd4(%r14,%rdx,4)
	mov    0x1708(%r14),%eax
	add    $0xffffffff,%eax
	cmp    0x170c(%r14),%eax
	je     6cb2 <deflate_huff+0x132>
	mov    %r13,%rcx
	jmp    6cb5 <deflate_huff+0x135>
	mov    %r13,%rax
	mov    -0x18(%rbp),%r15
	mov    -0x10(%rbp),%r14
	mov    -0x8(%rbp),%r13
	leaveq 
	retq   
	mov    %r14,%rdi
	callq  4f80 <fill_window>
	mov    0xb4(%r14),%eax
	test   %eax,%eax
	jne    6bfb <deflate_huff+0x7b>
	mov    -0x20(%rbp),%rax
	test   %eax,%eax
	jne    6cf7 <deflate_huff+0x177>
	mov    %r13,%rax
	mov    -0x18(%rbp),%r15
	mov    -0x10(%rbp),%r14
	mov    -0x8(%rbp),%r13
	leaveq 
	retq   
	mov    %r15,%rcx
	mov    0xb4(%r14),%eax
	add    $0xffffffff,%eax
	mov    %eax,0xb4(%r14)
	mov    0xac(%r14),%eax
	add    $0x1,%eax
	mov    %eax,0xac(%r14)
	test   %ecx,%ecx
	jle    6bec <deflate_huff+0x6c>
	mov    0x98(%r14),%rax
	test   %rax,%rax
	jns    6ba6 <deflate_huff+0x26>
	mov    %r13,%rsi
	jmpq   6bac <deflate_huff+0x2c>
	movl   $0x0,0x172c(%r14)
	cmp    $0x4,%eax
	je     6d23 <deflate_huff+0x1a3>
	mov    0x170c(%r14),%eax
	test   %eax,%eax
	jne    6d88 <deflate_huff+0x208>
	mov    %r15,%rax
	mov    -0x18(%rbp),%r15
	mov    -0x10(%rbp),%r14
	mov    -0x8(%rbp),%r13
	leaveq 
	retq   
	mov    0x98(%r14),%rax
	test   %rax,%rax
	js     6d36 <deflate_huff+0x1b6>
	mov    %eax,%r13d
	add    0x60(%r14),%r13
	mov    0xac(%r14),%edx
	mov    0x98(%r14),%rax
	sub    %rax,%rdx
	mov    %r15,%rcx
	mov    %r13,%rsi
	mov    %r14,%rdi
	callq  2120 <_tr_flush_block@plt>
	mov    0xac(%r14),%eax
	mov    %rax,0x98(%r14)
	mov    (%r14),%rdi
	callq  6f40 <flush_pending>
	mov    (%r14),%rax
	mov    0x20(%rax),%eax
	test   %eax,%eax
	jne    6d99 <deflate_huff+0x219>
	mov    $0x2,%eax
	mov    -0x18(%rbp),%r15
	mov    -0x10(%rbp),%r14
	mov    -0x8(%rbp),%r13
	leaveq 
	retq   
	mov    0x98(%r14),%rax
	test   %rax,%rax
	jns    6dac <deflate_huff+0x22c>
	mov    %r13,%rsi
	jmp    6db2 <deflate_huff+0x232>
	mov    $0x3,%eax
	mov    -0x18(%rbp),%r15
	mov    -0x10(%rbp),%r14
	mov    -0x8(%rbp),%r13
	leaveq 
	retq   
	mov    %eax,%esi
	add    0x60(%r14),%rsi
	mov    0xac(%r14),%edx
	mov    0x98(%r14),%rax
	sub    %rax,%rdx
	mov    %r14,%rdi
	mov    %r13,%rcx
	callq  2120 <_tr_flush_block@plt>
	mov    0xac(%r14),%eax
	mov    %rax,0x98(%r14)
	mov    (%r14),%rdi
	callq  6f40 <flush_pending>
	mov    (%r14),%rax
	mov    0x20(%rax),%eax
	test   %eax,%eax
	jne    6dff <deflate_huff+0x27f>
	mov    %r13,%rax
	mov    -0x18(%rbp),%r15
	mov    -0x10(%rbp),%r14
	mov    -0x8(%rbp),%r13
	leaveq 
	retq   
	mov    %r15,%rax
	mov    -0x18(%rbp),%r15
	mov    -0x10(%rbp),%r14
	mov    -0x8(%rbp),%r13
	leaveq 
	retq   

0006e10 <lm_init>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %r15,-0x8(%rbp)
	mov    0x50(%rdi),%eax
	add    %rax,%rax
	mov    %rax,0x68(%rdi)
	mov    0x78(%rdi),%rcx
	mov    0x84(%rdi),%eax
	add    $0xffffffff,%eax
	mov    %eax,%eax
	movw   $0x0,(%rcx,%rax,2)
	mov    0x78(%rdi),%rcx
	xor    %esi,%esi
	mov    0x84(%rdi),%eax
	add    $0xffffffff,%eax
	mov    %eax,%eax
	lea    (%rax,%rax,1),%rdx
	mov    %rdi,%r15
	mov    %rcx,%rdi
	callq  2170 <memset@plt>
	lea    0x10e46(%rip),%rdx        # 17ca8 <configuration_table>
	movslq 0xc4(%r15),%rax
	shl    $0x4,%rax
	movzwl 0x2(%rdx,%rax,1),%ecx
	mov    %ecx,0xc0(%r15)
	movzwl (%rax,%rdx,1),%ecx
	mov    %ecx,0xcc(%r15)
	movzwl 0x4(%rdx,%rax,1),%ecx
	mov    %ecx,0xd0(%r15)
	movzwl 0x6(%rdx,%rax,1),%eax
	mov    %eax,0xbc(%r15)
	movl   $0x0,0xac(%r15)
	movq   $0x0,0x98(%r15)
	movl   $0x0,0xb4(%r15)
	movl   $0x0,0x172c(%r15)
	movl   $0x2,0xb8(%r15)
	movl   $0x2,0xa0(%r15)
	movl   $0x0,0xa8(%r15)
	movl   $0x0,0x80(%r15)
	mov    -0x8(%rbp),%r15
	leaveq 
	retq   
	nopw   0x0(%rax,%rax,1)

0006f00 <putShortMSB>:
	push   %rbp
	mov    %rsp,%rbp
	mov    0x28(%rdi),%rcx
	lea    0x1(%rcx),%rax
	mov    %rax,0x28(%rdi)
	mov    %rsi,%rdx
	shr    $0x8,%edx
	mov    0x10(%rdi),%rax
	mov    %dl,(%rcx,%rax,1)
	mov    0x28(%rdi),%rcx
	lea    0x1(%rcx),%rax
	mov    %rax,0x28(%rdi)
	mov    0x10(%rdi),%rax
	mov    %sil,(%rcx,%rax,1)
	leaveq 
	retq   
	data16 nopw %cs:0x0(%rax,%rax,1)
	xchg   %ax,%ax

0006f40 <flush_pending>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %r14,-0x18(%rbp)
	mov    %r15,-0x20(%rbp)
	mov    %r12,%r15
	mov    %rdi,%r12
	mov    0x38(%r12),%r14
	mov    %r14,%rdi
	callq  2350 <_tr_flush_bits@plt>
	mov    0x20(%r12),%ecx
	mov    0x28(%r14),%eax
	cmp    %eax,%ecx
	jae    6f73 <flush_pending+0x33>
	mov    %rcx,%rax
	test   %eax,%eax
	jne    6f84 <flush_pending+0x44>
	mov    %r15,%r12
	mov    -0x20(%rbp),%r15
	mov    -0x18(%rbp),%r14
	leaveq 
	retq   
	mov    %eax,%ecx
	mov    0x18(%r12),%rdi
	mov    0x20(%r14),%rsi
	mov    %rcx,%rdx
	mov    %r15,-0x8(%rbp)
	mov    %r13,-0x10(%rbp)
	mov    %rcx,%r13
	mov    %rax,%r15
	callq  21f0 <memcpy@plt>
	mov    %r13,%rax
	add    0x18(%r12),%rax
	mov    %rax,0x18(%r12)
	mov    %r13,%rax
	add    0x20(%r14),%rax
	mov    %rax,0x20(%r14)
	mov    %r13,%rax
	add    0x28(%r12),%rax
	mov    %rax,0x28(%r12)
	mov    0x20(%r12),%eax
	sub    %r15d,%eax
	mov    %eax,0x20(%r12)
	mov    0x28(%r14),%rcx
	mov    %rcx,%rax
	sub    %r13,%rax
	mov    %rax,0x28(%r14)
	cmp    %r13,%rcx
	je     6ffc <flush_pending+0xbc>
	mov    -0x10(%rbp),%r13
	mov    -0x8(%rbp),%r12
	mov    -0x20(%rbp),%r15
	mov    -0x18(%rbp),%r14
	leaveq 
	retq   
	mov    0x10(%r14),%rax
	mov    %rax,0x20(%r14)
	mov    -0x10(%rbp),%r13
	mov    -0x8(%rbp),%r12
	mov    -0x20(%rbp),%r15
	mov    -0x18(%rbp),%r14
	leaveq 
	retq   
	nopw   %cs:0x0(%rax,%rax,1)

0007020 <read_buf>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    0x8(%rdi),%eax
	cmp    %edx,%eax
	ja     7034 <read_buf+0x14>
	mov    %rax,%r8
	jmp    7037 <read_buf+0x17>
	mov    %rdx,%r8
	test   %r8d,%r8d
	jne    7040 <read_buf+0x20>
	xor    %eax,%eax
	leaveq 
	retq   
	sub    %r8d,%eax
	mov    %eax,0x8(%rdi)
	mov    %r8d,%ecx
	mov    (%rdi),%rax
	mov    %rsi,%r9
	mov    %rcx,%rdx
	mov    %r12,-0x8(%rbp)
	mov    %r13,-0x10(%rbp)
	mov    %r14,-0x18(%rbp)
	mov    %r15,-0x20(%rbp)
	mov    %r8,%r12
	mov    %rcx,%r13
	mov    %rdi,%r14
	mov    %r9,%rdi
	mov    %rsi,%r15
	mov    %rax,%rsi
	callq  21f0 <memcpy@plt>
	mov    0x38(%r14),%rax
	movslq 0x30(%rax),%rax
	cmp    $0x1,%eax
	je     70a0 <read_buf+0x80>
	cmp    $0x2,%eax
	jne    70b3 <read_buf+0x93>
	mov    %r15,%rsi
	mov    0x60(%r14),%rdi
	mov    %r12,%rdx
	callq  20d0 <crc32@plt>
	mov    %rax,0x60(%r14)
	jmp    70b3 <read_buf+0x93>
	mov    %r15,%rsi
	mov    0x60(%r14),%rdi
	mov    %r12,%rdx
	callq  2230 <adler32@plt>
	mov    %rax,0x60(%r14)
	mov    %r12d,%eax
	add    (%r14),%rax
	mov    %rax,(%r14)
	add    0x10(%r14),%r13
	mov    %r13,0x10(%r14)
	mov    %r12,%rax
	mov    -0x20(%rbp),%r15
	mov    -0x18(%rbp),%r14
	mov    -0x10(%rbp),%r13
	mov    -0x8(%rbp),%r12
	leaveq 
	retq   
	nopl   0x0(%rax)

00070e0 <longest_match>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x50,%rsp
	mov    %r15,-0x28(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    %rbx,-0x8(%rbp)
	mov    0xbc(%rdi),%r8d
	mov    0x60(%rdi),%rdx
	movslq 0xb8(%rdi),%rax
	movslq 0xd0(%rdi),%r12
	mov    0xac(%rdi),%ebx
	mov    0x50(%rdi),%ecx
	add    $0xfffffefa,%ecx
	cmp    %ebx,%ecx
	jb     712d <longest_match+0x4d>
	xor    %r10d,%r10d
	jmp    7133 <longest_match+0x53>
	mov    %rbx,%r10
	sub    %ecx,%r10d
	mov    0x70(%rdi),%r14
	mov    0x58(%rdi),%r13d
	lea    (%rbx,%rdx,1),%rcx
	mov    %rcx,-0x48(%rbp)
	lea    -0x1(%rax),%edx
	movslq %edx,%rdx
	movzbl (%rcx,%rdx,1),%edx
	movzbl (%rax,%rcx,1),%ebx
	mov    0xcc(%rdi),%r9d
	cmp    %eax,%r9d
	ja     7161 <longest_match+0x81>
	shr    $0x2,%r8d
	lea    0x102(%rcx),%r9
	mov    %r9,-0x30(%rbp)
	mov    0xb4(%rdi),%r9d
	cmp    %r12d,%r9d
	jae    72a0 <longest_match+0x1c0>
	mov    %r9,%r12
	jmpq   72a0 <longest_match+0x1c0>
	lea    -0x1(%rax),%r11d
	movslq %r11d,%r11
	movzbl (%r9,%r11,1),%r11d
	cmp    %r11b,%dl
	jne    7288 <longest_match+0x1a8>
	movzbl (%rcx),%r15d
	movzbl (%r9),%r11d
	cmp    %r11b,%r15b
	jne    7288 <longest_match+0x1a8>
	movzbl 0x1(%rcx),%r15d
	movzbl 0x1(%r9),%r11d
	cmp    %r11b,%r15b
	jne    7288 <longest_match+0x1a8>
	lea    0x2(%rcx),%r11
	lea    0x2(%r9),%rcx
	mov    %rdx,-0x38(%rbp)
	mov    %rbx,-0x40(%rbp)
	mov    -0x30(%rbp),%rdx
	movzbl 0x1(%rcx),%r15d
	lea    0x1(%r11),%rbx
	movzbl (%rbx),%r9d
	cmp    %r9b,%r15b
	jne    726b <longest_match+0x18b>
	movzbl 0x2(%rcx),%r15d
	lea    0x2(%r11),%rbx
	movzbl (%rbx),%r9d
	cmp    %r9b,%r15b
	jne    726b <longest_match+0x18b>
	movzbl 0x3(%rcx),%r15d
	lea    0x3(%r11),%rbx
	movzbl (%rbx),%r9d
	cmp    %r9b,%r15b
	jne    726b <longest_match+0x18b>
	movzbl 0x4(%rcx),%r15d
	lea    0x4(%r11),%rbx
	movzbl (%rbx),%r9d
	cmp    %r9b,%r15b
	jne    726b <longest_match+0x18b>
	movzbl 0x5(%rcx),%r9d
	lea    0x5(%r11),%rbx
	movzbl (%rbx),%r15d
	cmp    %r15b,%r9b
	jne    726b <longest_match+0x18b>
	movzbl 0x6(%rcx),%r15d
	lea    0x6(%r11),%rbx
	movzbl (%rbx),%r9d
	cmp    %r9b,%r15b
	jne    726b <longest_match+0x18b>
	movzbl 0x7(%rcx),%r15d
	lea    0x7(%r11),%rbx
	movzbl (%rbx),%r9d
	cmp    %r9b,%r15b
	jne    726b <longest_match+0x18b>
	add    $0x8,%rcx
	movzbl (%rcx),%r9d
	add    $0x8,%r11
	movzbl (%r11),%ebx
	cmp    %bl,%r9b
	je     72b9 <longest_match+0x1d9>
	mov    %r11,%rbx
	sub    %rbx,%rdx
	mov    $0x102,%r9d
	sub    %edx,%r9d
	cmp    %eax,%r9d
	jg     72c7 <longest_match+0x1e7>
	mov    -0x40(%rbp),%rbx
	mov    -0x38(%rbp),%rdx
	mov    -0x48(%rbp),%rcx
	and    %r13d,%esi
	mov    %esi,%esi
	movzwl (%r14,%rsi,2),%esi
	cmp    %r10d,%esi
	jbe    72d5 <longest_match+0x1f5>
	add    $0xffffffff,%r8d
	test   %r8d,%r8d
	je     72d5 <longest_match+0x1f5>
	mov    %esi,%r9d
	add    0x60(%rdi),%r9
	movslq %eax,%r11
	movzbl (%r9,%r11,1),%r11d
	cmp    %r11b,%bl
	jne    7288 <longest_match+0x1a8>
	jmpq   7184 <longest_match+0xa4>
	cmp    %rdx,%r11
	jb     71d1 <longest_match+0xf1>
	mov    %r11,%rbx
	jmp    726b <longest_match+0x18b>
	mov    %esi,0xb0(%rdi)
	cmp    %r12d,%r9d
	jl     72f5 <longest_match+0x215>
	mov    %r9,%rax
	mov    0xb4(%rdi),%ecx
	cmp    %eax,%ecx
	jb     7316 <longest_match+0x236>
	mov    -0x8(%rbp),%rbx
	mov    -0x10(%rbp),%r12
	mov    -0x18(%rbp),%r13
	mov    -0x20(%rbp),%r14
	mov    -0x28(%rbp),%r15
	leaveq 
	retq   
	mov    $0x101,%eax
	sub    %edx,%eax
	movslq %eax,%rax
	mov    -0x48(%rbp),%rcx
	movzbl (%rcx,%rax,1),%edx
	movslq %r9d,%rax
	movzbl (%rcx,%rax,1),%ebx
	mov    %r9,%rax
	jmpq   7288 <longest_match+0x1a8>
	mov    %rcx,%rax
	mov    -0x8(%rbp),%rbx
	mov    -0x10(%rbp),%r12
	mov    -0x18(%rbp),%r13
	mov    -0x20(%rbp),%r14
	mov    -0x28(%rbp),%r15
	leaveq 
	retq   
	nop

0007330 <inflateBack>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0xe0,%rsp
	mov    %rdx,-0xc8(%rbp)
	mov    %rsi,-0xc0(%rbp)
	mov    $0xfffffffffffffffe,%rax
	test   %rdi,%rdi
	jne    7357 <inflateBack+0x27>
	leaveq 
	retq   
	mov    0x38(%rdi),%r10
	mov    %r10,-0x90(%rbp)
	test   %r10,%r10
	jne    7369 <inflateBack+0x39>
	leaveq 
	retq   
	movq   $0x0,0x30(%rdi)
	movl   $0x3f3f,0x8(%r10)
	movl   $0x0,0xc(%r10)
	movl   $0x0,0x40(%r10)
	mov    (%rdi),%rax
	mov    %rax,-0xd8(%rbp)
	xor    %r11d,%r11d
	mov    %r11,-0x30(%rbp)
	test   %rax,%rax
	jne    73a4 <inflateBack+0x74>
	mov    %r11,%rax
	jmp    73a7 <inflateBack+0x77>
	mov    0x8(%rdi),%eax
	mov    0x48(%r10),%r9
	mov    %r8,-0xa0(%rbp)
	mov    0x3c(%r10),%r8d
	mov    %rcx,-0x98(%rbp)
	lea    -0xd8(%rbp),%rcx
	mov    %r15,-0x28(%rbp)
	mov    $0x1,%r15d
	mov    %r14,-0x20(%rbp)
	lea    0x558(%r10),%r14
	mov    %r14,-0x78(%rbp)
	lea    0x98(%r10),%r14
	mov    %r14,-0x80(%rbp)
	lea    0x90(%r10),%r14
	mov    %r14,-0x60(%rbp)
	lea    0x78(%r10),%r14
	mov    %r14,-0x68(%rbp)
	lea    0x318(%r10),%r14
	mov    %r14,-0x70(%rbp)
	lea    0x7c(%r10),%r14
	mov    %r14,-0x48(%rbp)
	mov    %rbx,-0x8(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    %rcx,%r12
	mov    %rdx,%r13
	mov    %rsi,%r14
	mov    %r15,%rcx
	mov    %r11,%r15
	mov    %rdi,%r11
	mov    %rcx,%rdi
	mov    %r15,%rbx
	mov    %r8,-0xa8(%rbp)
	mov    0x8(%r10),%ecx
	add    $0xffffc0c1,%ecx
	cmp    $0x12,%ecx
	jbe    7476 <inflateBack+0x146>
	mov    $0xfffffffffffffffe,%rdi
	mov    -0xd8(%rbp),%rcx
	mov    %rcx,(%r11)
	mov    %eax,0x8(%r11)
	mov    %rdi,%rax
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	mov    -0x20(%rbp),%r14
	mov    -0x28(%rbp),%r15
	leaveq 
	retq   
	lea    0xcbcb(%rip),%rdx        # 14048 <deflate_copyright+0x48>
	movslq (%rdx,%rcx,4),%rcx
	add    %rdx,%rcx
	jmpq   *%rcx
	mov    %r11,-0x88(%rbp)
	cmp    $0x5,%eax
	ja     753e <inflateBack+0x20e>
	mov    %r9,-0x58(%rbp)
	jmpq   759c <inflateBack+0x26c>
	mov    0x3c(%r10),%edx
	cmp    %edx,%r8d
	jae    744f <inflateBack+0x11f>
	sub    %r8d,%edx
	mov    0x48(%r10),%rsi
	mov    %r11,%rbx
	mov    %rdi,%r12
	mov    %rax,%r13
	mov    -0x98(%rbp),%rcx
	mov    -0xa0(%rbp),%rdi
	callq  *%rcx
	test   %eax,%eax
	jne    75eb <inflateBack+0x2bb>
	mov    %r13,%rax
	mov    %r12,%rdi
	mov    %rbx,%r11
	jmpq   744f <inflateBack+0x11f>
	mov    $0xfffffffffffffffd,%rdi
	jmpq   744f <inflateBack+0x11f>
	mov    $0xfffffffffffffffe,%rdi
	jmpq   744f <inflateBack+0x11f>
	movslq 0xc(%r10),%rcx
	test   %ecx,%ecx
	jne    75fd <inflateBack+0x2cd>
	mov    %r9,-0x58(%rbp)
	mov    %r11,-0x50(%rbp)
	jmpq   7642 <inflateBack+0x312>
	mov    %rbx,%rcx
	and    $0x7,%ecx
	shr    %cl,%r15
	and    $0xfffffff8,%ebx
	mov    %r9,-0x88(%rbp)
	mov    %r11,-0x50(%rbp)
	jmpq   76b1 <inflateBack+0x381>
	mov    %r9,-0xb0(%rbp)
	mov    %r11,-0x88(%rbp)
	jmpq   7729 <inflateBack+0x3f9>
	cmp    $0x101,%r8d
	ja     779c <inflateBack+0x46c>
	mov    %r9,-0x58(%rbp)
	jmp    759c <inflateBack+0x26c>
	test   %eax,%eax
	jne    7578 <inflateBack+0x248>
	mov    %r12,%rsi
	mov    %r10,%r12
	mov    %r13,%rdi
	callq  *%r14
	test   %eax,%eax
	je     7813 <inflateBack+0x4e3>
	mov    %r12,%r10
	mov    $0x1,%edi
	lea    -0xd8(%rbp),%r12
	mov    -0xd8(%rbp),%rdx
	lea    0x1(%rdx),%rcx
	mov    %rcx,-0xd8(%rbp)
	movzbl (%rdx),%edx
	mov    %rbx,%rcx
	shl    %cl,%rdx
	add    %rdx,%r15
	add    $0xffffffff,%eax
	lea    0x8(%rcx),%ebx
	mov    0x78(%r10),%ecx
	mov    %rdi,%rdx
	shl    %cl,%edx
	lea    -0x1(%rdx),%ecx
	and    %r15d,%ecx
	mov    %ecx,%ecx
	mov    0x68(%r10),%rdx
	mov    (%rdx,%rcx,4),%edx
	mov    %edx,-0xd0(%rbp)
	mov    %rdx,%rcx
	shr    $0x8,%ecx
	movzbl %cl,%ecx
	cmp    %ecx,%ebx
	jb     7551 <inflateBack+0x221>
	test   %dl,%dl
	je     78cb <inflateBack+0x59b>
	movzbl %dl,%ecx
	and    $0xf0,%ecx
	test   %ecx,%ecx
	jne    78cb <inflateBack+0x59b>
	mov    %edx,-0xcc(%rbp)
	jmpq   787e <inflateBack+0x54e>
	mov    %r13,%rax
	mov    %rbx,%r11
	mov    $0xfffffffffffffffb,%rdi
	jmpq   744f <inflateBack+0x11f>
	mov    %rbx,%rcx
	and    $0x7,%ecx
	shr    %cl,%r15
	and    $0xfffffff8,%ebx
	movl   $0x3f50,0x8(%r10)
	jmpq   7432 <inflateBack+0x102>
	test   %eax,%eax
	je     7921 <inflateBack+0x5f1>
	mov    -0xd8(%rbp),%rdx
	lea    0x1(%rdx),%rcx
	mov    %rcx,-0xd8(%rbp)
	movzbl (%rdx),%edx
	mov    %rbx,%rcx
	shl    %cl,%rdx
	add    %rdx,%r15
	add    $0xffffffff,%eax
	lea    0x8(%rcx),%ebx
	cmp    $0x2,%ebx
	jbe    7616 <inflateBack+0x2e6>
	mov    %r15,%rcx
	and    $0x1,%ecx
	mov    -0x90(%rbp),%r10
	mov    %ecx,0xc(%r10)
	mov    %r15,%rcx
	shr    %rcx
	and    $0x3,%ecx
	cmp    $0x1,%ecx
	jbe    794f <inflateBack+0x61f>
	cmp    $0x2,%ecx
	je     7962 <inflateBack+0x632>
	cmp    $0x3,%ecx
	je     7970 <inflateBack+0x640>
	mov    -0x50(%rbp),%r11
	jmpq   7995 <inflateBack+0x665>
	test   %eax,%eax
	je     79b1 <inflateBack+0x681>
	mov    -0xd8(%rbp),%rdx
	lea    0x1(%rdx),%rcx
	mov    %rcx,-0xd8(%rbp)
	add    $0xffffffff,%eax
	movzbl (%rdx),%edx
	mov    %rbx,%rcx
	shl    %cl,%rdx
	add    %rdx,%r15
	lea    0x8(%rcx),%ebx
	cmp    $0x18,%ebx
	jbe    7685 <inflateBack+0x355>
	mov    %r15,%rcx
	shr    $0x10,%rcx
	xor    $0xffff,%rcx
	movzwl %r15w,%edx
	cmp    %rdx,%rcx
	jne    79df <inflateBack+0x6af>
	movzwl %r15w,%ebx
	mov    -0xa8(%rbp),%r15
	mov    -0x88(%rbp),%r9
	mov    -0x90(%rbp),%r10
	mov    -0x98(%rbp),%rcx
	mov    -0xa0(%rbp),%rdi
	jmpq   7a88 <inflateBack+0x758>
	test   %eax,%eax
	je     7ab2 <inflateBack+0x782>
	mov    -0xd8(%rbp),%rdx
	lea    0x1(%rdx),%rcx
	mov    %rcx,-0xd8(%rbp)
	movzbl (%rdx),%edx
	mov    %rbx,%rcx
	shl    %cl,%rdx
	add    %rdx,%r15
	add    $0xffffffff,%eax
	lea    0x8(%rcx),%ebx
	cmp    $0xd,%ebx
	jbe    76fd <inflateBack+0x3cd>
	mov    %r15,%rcx
	and    $0x1f,%ecx
	lea    0x101(%rcx),%esi
	mov    -0x90(%rbp),%r10
	mov    %esi,0x84(%r10)
	mov    %r15,%rcx
	shr    $0x5,%rcx
	and    $0x1f,%ecx
	lea    0x1(%rcx),%edx
	mov    %edx,0x88(%r10)
	mov    %r15,%rcx
	shr    $0xa,%rcx
	and    $0xf,%ecx
	add    $0x4,%ecx
	mov    %ecx,0x80(%r10)
	shr    $0xe,%r15
	add    $0xfffffff2,%ebx
	cmp    $0x11e,%esi
	ja     7ae3 <inflateBack+0x7b3>
	cmp    $0x1e,%edx
	ja     7ae3 <inflateBack+0x7b3>
	movl   $0x0,0x8c(%r10)
	jmpq   7b8d <inflateBack+0x85d>
	mov    %r9,0x18(%r11)
	mov    %r8d,0x20(%r11)
	mov    -0xd8(%rbp),%rcx
	mov    %rcx,(%r11)
	mov    %eax,0x8(%r11)
	mov    %r15,0x50(%r10)
	mov    %ebx,0x58(%r10)
	mov    0x3c(%r10),%eax
	cmp    0x40(%r10),%eax
	jbe    77cb <inflateBack+0x49b>
	sub    %r8d,%eax
	mov    %eax,0x40(%r10)
	mov    %r11,%rbx
	mov    %rdi,%r12
	mov    %r10,%r15
	mov    0x3c(%r15),%esi
	mov    %rbx,%rdi
	callq  2220 <inflate_fast@plt>
	mov    0x18(%rbx),%r9
	mov    0x20(%rbx),%r8d
	mov    (%rbx),%rax
	mov    %rax,-0xd8(%rbp)
	mov    %r12,%rdi
	mov    %r15,%r10
	mov    %rbx,%r11
	mov    0x8(%r11),%eax
	mov    0x50(%r10),%r15
	mov    0x58(%r10),%ebx
	lea    -0xd8(%rbp),%r12
	jmpq   7432 <inflateBack+0x102>
	movq   $0x0,-0xd8(%rbp)
	mov    -0x88(%rbp),%r11
	xor    %eax,%eax
	mov    $0xfffffffffffffffb,%rdi
	jmpq   744f <inflateBack+0x11f>
	test   %eax,%eax
	jne    785a <inflateBack+0x52a>
	mov    %r12,%rsi
	mov    %r10,%r12
	mov    %r13,%rdi
	callq  *%r14
	test   %eax,%eax
	je     7bb0 <inflateBack+0x880>
	mov    %r12,%r10
	mov    $0x1,%edi
	lea    -0xd8(%rbp),%r12
	mov    -0xd8(%rbp),%rdx
	lea    0x1(%rdx),%rcx
	mov    %rcx,-0xd8(%rbp)
	movzbl (%rdx),%edx
	mov    %rbx,%rcx
	shl    %cl,%rdx
	add    %rdx,%r15
	add    $0xffffffff,%eax
	lea    0x8(%rcx),%ebx
	movzbl -0xcb(%rbp),%esi
	movzbl -0xcc(%rbp),%ecx
	add    %esi,%ecx
	mov    %rdi,%rdx
	shl    %cl,%edx
	add    $0xffffffff,%edx
	and    %r15d,%edx
	mov    %rsi,%rcx
	shr    %cl,%edx
	movzwl -0xca(%rbp),%esi
	add    %esi,%edx
	mov    %edx,%edx
	mov    0x68(%r10),%rsi
	mov    (%rsi,%rdx,4),%edx
	mov    %edx,-0xd0(%rbp)
	shr    $0x8,%edx
	movzbl %dl,%edx
	add    %ecx,%edx
	cmp    %ebx,%edx
	ja     7833 <inflateBack+0x503>
	shr    %cl,%r15
	sub    %ecx,%ebx
	movzwl -0xce(%rbp),%ecx
	mov    %ecx,0x5c(%r10)
	movzbl -0xcf(%rbp),%ecx
	shr    %cl,%r15
	sub    %ecx,%ebx
	movzbl -0xd0(%rbp),%ecx
	test   %cl,%cl
	je     7bd0 <inflateBack+0x8a0>
	mov    %rcx,%rdx
	and    $0x20,%edx
	test   %edx,%edx
	jg     7c07 <inflateBack+0x8d7>
	mov    %rcx,%rdx
	and    $0x40,%edx
	test   %edx,%edx
	jg     7c26 <inflateBack+0x8f6>
	and    $0xf,%ecx
	mov    %ecx,0x64(%r10)
	test   %ecx,%ecx
	jne    7d77 <inflateBack+0xa47>
	jmpq   7c9b <inflateBack+0x96b>
	mov    %r13,%rdi
	mov    %r12,%rsi
	callq  *%r14
	test   %eax,%eax
	jne    761e <inflateBack+0x2ee>
	movq   $0x0,-0xd8(%rbp)
	mov    -0x50(%rbp),%r11
	xor    %eax,%eax
	mov    $0xfffffffffffffffb,%rdi
	jmpq   744f <inflateBack+0x11f>
	test   %ecx,%ecx
	je     7989 <inflateBack+0x659>
	cmp    $0x1,%ecx
	je     7da7 <inflateBack+0xa77>
	mov    -0x50(%rbp),%r11
	jmp    7995 <inflateBack+0x665>
	movl   $0x3f44,0x8(%r10)
	mov    -0x50(%rbp),%r11
	jmp    7995 <inflateBack+0x665>
	mov    -0x50(%rbp),%r11
	lea    0xc73f(%rip),%rcx        # 140ba <order.1+0x26>
	mov    %rcx,0x30(%r11)
	movl   $0x3f51,0x8(%r10)
	jmp    7995 <inflateBack+0x665>
	movl   $0x3f41,0x8(%r10)
	mov    -0x50(%rbp),%r11
	shr    $0x3,%r15
	add    $0xfffffffd,%ebx
	mov    -0xa8(%rbp),%r8
	mov    $0x1,%edi
	mov    -0x58(%rbp),%r9
	jmpq   7432 <inflateBack+0x102>
	mov    %r13,%rdi
	mov    %r12,%rsi
	callq  *%r14
	test   %eax,%eax
	jne    768d <inflateBack+0x35d>
	movq   $0x0,-0xd8(%rbp)
	mov    -0x50(%rbp),%r11
	xor    %eax,%eax
	mov    $0xfffffffffffffffb,%rdi
	jmpq   744f <inflateBack+0x11f>
	mov    -0x50(%rbp),%r11
	lea    0xc6e3(%rip),%rcx        # 140cd <order.1+0x39>
	mov    %rcx,0x30(%r11)
	mov    -0x90(%rbp),%r10
	movl   $0x3f51,0x8(%r10)
	mov    -0xa8(%rbp),%r8
	mov    $0x1,%edi
	mov    -0x88(%rbp),%r9
	jmpq   7432 <inflateBack+0x102>
	mov    %r15,%r12
	mov    %r9,%rdi
	mov    %r10,%rbx
	mov    %rax,%r14
	mov    %r12d,%r13d
	mov    -0xd8(%rbp),%rsi
	mov    %r13,%rdx
	callq  21f0 <memcpy@plt>
	mov    %r13,%rax
	add    -0xd8(%rbp),%rax
	mov    %rax,-0xd8(%rbp)
	mov    0x5c(%rbx),%edx
	sub    %r12d,%edx
	mov    %r14,%rax
	sub    %r12d,%eax
	sub    %r12d,%r15d
	mov    -0xb8(%rbp),%rcx
	lea    0x0(%r13,%rcx,1),%r9
	mov    %rbx,%r10
	mov    %rdx,%rbx
	mov    -0xc0(%rbp),%r14
	mov    -0xc8(%rbp),%r13
	lea    -0xd8(%rbp),%r12
	mov    -0x98(%rbp),%rcx
	mov    -0xa0(%rbp),%rdi
	mov    %ebx,0x5c(%r10)
	test   %ebx,%ebx
	jne    7dda <inflateBack+0xaaa>
	movl   $0x3f3f,0x8(%r10)
	mov    %r15,%r8
	mov    -0x50(%rbp),%r11
	mov    $0x1,%edi
	xor    %ebx,%ebx
	mov    %rbx,%r15
	jmpq   7432 <inflateBack+0x102>
	mov    %r13,%rdi
	mov    %r12,%rsi
	callq  *%r14
	test   %eax,%eax
	jne    7705 <inflateBack+0x3d5>
	movq   $0x0,-0xd8(%rbp)
	mov    -0x88(%rbp),%r11
	xor    %eax,%eax
	mov    $0xfffffffffffffffb,%rdi
	jmpq   744f <inflateBack+0x11f>
	mov    -0x88(%rbp),%r11
	lea    0xc5f9(%rip),%rcx        # 140ea <order.1+0x56>
	mov    %rcx,0x30(%r11)
	movl   $0x3f51,0x8(%r10)
	mov    -0xa8(%rbp),%r8
	mov    $0x1,%edi
	mov    -0xb0(%rbp),%r9
	jmpq   7432 <inflateBack+0x102>
	test   %eax,%eax
	jne    7b2a <inflateBack+0x7fa>
	mov    %r13,%rdi
	mov    %r12,%rsi
	callq  *%r14
	test   %eax,%eax
	je     7e31 <inflateBack+0xb01>
	mov    -0xd8(%rbp),%rdx
	lea    0x1(%rdx),%rcx
	mov    %rcx,-0xd8(%rbp)
	movzbl (%rdx),%edx
	mov    %rbx,%rcx
	shl    %cl,%rdx
	add    %rdx,%r15
	add    $0xffffffff,%eax
	lea    0x8(%rcx),%ebx
	cmp    $0x2,%ebx
	jbe    7b15 <inflateBack+0x7e5>
	mov    -0x90(%rbp),%r10
	mov    0x8c(%r10),%edx
	lea    0x1(%rdx),%ecx
	mov    %ecx,0x8c(%r10)
	lea    0xc522(%rip),%rcx        # 14094 <order.1>
	movzwl (%rcx,%rdx,2),%ecx
	mov    %r15,%rdx
	and    $0x7,%dx
	mov    %dx,0x98(%r10,%rcx,2)
	shr    $0x3,%r15
	add    $0xfffffffd,%ebx
	mov    0x80(%r10),%ecx
	cmp    0x8c(%r10),%ecx
	ja     7b4e <inflateBack+0x81e>
	mov    -0xa8(%rbp),%r12
	lea    0xc4e9(%rip),%rsi        # 14094 <order.1>
	jmpq   7e6a <inflateBack+0xb3a>
	movq   $0x0,-0xd8(%rbp)
	mov    -0x88(%rbp),%r11
	xor    %eax,%eax
	mov    $0xfffffffffffffffb,%rdi
	jmpq   744f <inflateBack+0x11f>
	mov    -0xa8(%rbp),%rdx
	test   %edx,%edx
	je     7ee7 <inflateBack+0xbb7>
	mov    -0x58(%rbp),%rcx
	movzbl 0x5c(%r10),%esi
	mov    %sil,(%rcx)
	movl   $0x3f48,0x8(%r10)
	lea    -0x1(%rdx),%r8d
	lea    0x1(%rcx),%r9
	mov    -0x88(%rbp),%r11
	jmpq   7432 <inflateBack+0x102>
	movl   $0x3f3f,0x8(%r10)
	mov    -0xa8(%rbp),%r8
	mov    -0x88(%rbp),%r11
	mov    -0x58(%rbp),%r9
	jmpq   7432 <inflateBack+0x102>
	mov    -0x88(%rbp),%r11
	lea    0xc564(%rip),%rcx        # 14198 <order.1+0x104>
	mov    %rcx,0x30(%r11)
	movl   $0x3f51,0x8(%r10)
	mov    -0xa8(%rbp),%r8
	mov    -0x58(%rbp),%r9
	jmpq   7432 <inflateBack+0x102>
	test   %eax,%eax
	jne    7c77 <inflateBack+0x947>
	mov    %r12,%rsi
	mov    %r10,%r12
	mov    %r13,%rdi
	callq  *%r14
	test   %eax,%eax
	je     7f50 <inflateBack+0xc20>
	mov    %r12,%r10
	mov    $0x1,%edi
	lea    -0xd8(%rbp),%r12
	mov    -0xd8(%rbp),%rdx
	lea    0x1(%rdx),%rcx
	mov    %rcx,-0xd8(%rbp)
	movzbl (%rdx),%edx
	mov    %rbx,%rcx
	shl    %cl,%rdx
	add    %rdx,%r15
	add    $0xffffffff,%eax
	lea    0x8(%rcx),%ebx
	mov    0x7c(%r10),%ecx
	mov    %rdi,%rdx
	shl    %cl,%edx
	lea    -0x1(%rdx),%ecx
	and    %r15d,%ecx
	mov    %ecx,%ecx
	mov    0x70(%r10),%rdx
	mov    (%rdx,%rcx,4),%edx
	mov    %edx,-0xd0(%rbp)
	mov    %rdx,%rcx
	shr    $0x8,%ecx
	movzbl %cl,%ecx
	cmp    %ecx,%ebx
	jb     7c50 <inflateBack+0x920>
	movzbl %dl,%ecx
	and    $0xf0,%ecx
	test   %ecx,%ecx
	je     7f70 <inflateBack+0xc40>
	movzbl -0xcf(%rbp),%ecx
	shr    %cl,%r15
	sub    %ecx,%ebx
	movzbl -0xd0(%rbp),%ecx
	mov    %rcx,%rdx
	and    $0x40,%edx
	test   %edx,%edx
	jg     7f7b <inflateBack+0xc4b>
	movzwl -0xce(%rbp),%edx
	mov    %edx,0x60(%r10)
	and    $0xf,%ecx
	mov    %ecx,0x64(%r10)
	test   %ecx,%ecx
	jne    7fd1 <inflateBack+0xca1>
	mov    0x60(%r10),%esi
	mov    0x3c(%r10),%ecx
	mov    0x40(%r10),%edx
	cmp    %ecx,%edx
	jb     8000 <inflateBack+0xcd0>
	pushq  -0x30(%rbp)
	popq   -0x38(%rbp)
	jmpq   8009 <inflateBack+0xcd9>
	test   %eax,%eax
	jne    7d53 <inflateBack+0xa23>
	mov    %r12,%rsi
	mov    %r10,%r12
	mov    %r13,%rdi
	callq  *%r14
	test   %eax,%eax
	je     806f <inflateBack+0xd3f>
	mov    %r12,%r10
	lea    -0xd8(%rbp),%r12
	mov    -0xd8(%rbp),%rdx
	lea    0x1(%rdx),%rcx
	mov    %rcx,-0xd8(%rbp)
	movzbl (%rdx),%edx
	mov    %rbx,%rcx
	shl    %cl,%rdx
	add    %rdx,%r15
	add    $0xffffffff,%eax
	lea    0x8(%rcx),%ebx
	mov    0x64(%r10),%ecx
	cmp    %ebx,%ecx
	ja     7d31 <inflateBack+0xa01>
	mov    %r15,%rdx
	shr    %cl,%rdx
	sub    %ecx,%ebx
	mov    $0x1,%edi
	mov    %rdi,%rsi
	shl    %cl,%esi
	lea    -0x1(%rsi),%ecx
	and    %r15d,%ecx
	add    0x5c(%r10),%ecx
	mov    %ecx,0x5c(%r10)
	mov    %rdx,%r15
	jmpq   7c9b <inflateBack+0x96b>
	mov    %r10,%r12
	mov    %rax,%r14
	mov    %r12,%rdi
	callq  89e0 <fixedtables>
	mov    %r14,%rax
	mov    %r12,%r10
	movl   $0x3f48,0x8(%r10)
	mov    -0x50(%rbp),%r11
	mov    -0xc0(%rbp),%r14
	lea    -0xd8(%rbp),%r12
	jmpq   7995 <inflateBack+0x665>
	test   %eax,%eax
	je     808f <inflateBack+0xd5f>
	test   %r15d,%r15d
	jne    7e12 <inflateBack+0xae2>
	mov    %r10,%r13
	mov    %rax,%r14
	mov    0x3c(%r13),%r15d
	mov    %r15d,0x40(%r13)
	mov    0x48(%r13),%r12
	mov    %r12,%rsi
	mov    %r15,%rdx
	callq  *%rcx
	test   %eax,%eax
	jne    80c0 <inflateBack+0xd90>
	mov    %r14,%rax
	mov    %r12,%r9
	mov    %r13,%r10
	mov    %r9,-0xb8(%rbp)
	cmp    %eax,%ebx
	jbe    7e20 <inflateBack+0xaf0>
	mov    %rax,%rbx
	cmp    %r15d,%ebx
	ja     7a15 <inflateBack+0x6e5>
	mov    %rbx,%r12
	jmpq   7a18 <inflateBack+0x6e8>
	movq   $0x0,-0xd8(%rbp)
	mov    -0x88(%rbp),%r11
	xor    %eax,%eax
	mov    $0xfffffffffffffffb,%rdi
	jmpq   744f <inflateBack+0x11f>
	lea    0x1(%rdx),%ecx
	mov    %ecx,0x8c(%r10)
	movzwl (%rsi,%rdx,2),%ecx
	movw   $0x0,0x98(%r10,%rcx,2)
	mov    0x8c(%r10),%edx
	cmp    $0x12,%edx
	jbe    7e51 <inflateBack+0xb21>
	mov    -0x78(%rbp),%rcx
	mov    %rcx,0x90(%r10)
	mov    %rcx,0x68(%r10)
	mov    %r10,%r13
	mov    %rax,%r14
	movl   $0x7,0x78(%r13)
	xor    %edi,%edi
	mov    -0x80(%rbp),%rsi
	mov    $0x13,%edx
	mov    -0x60(%rbp),%rcx
	mov    -0x68(%rbp),%r8
	mov    -0x70(%rbp),%r9
	callq  22a0 <inflate_table@plt>
	test   %eax,%eax
	jne    80d3 <inflateBack+0xda3>
	mov    %r14,%rax
	mov    %r13,%r10
	movl   $0x0,0x8c(%r10)
	mov    $0x1,%edi
	mov    -0xc0(%rbp),%r14
	mov    -0xc8(%rbp),%r13
	lea    -0xd8(%rbp),%r12
	jmpq   813b <inflateBack+0xe0b>
	mov    0x3c(%r10),%r13d
	mov    %r13d,0x40(%r10)
	mov    0x48(%r10),%r12
	mov    -0xa0(%rbp),%rdi
	mov    %r12,%rsi
	mov    %r13,%rdx
	mov    %rbx,-0xa8(%rbp)
	mov    %r10,%rbx
	mov    %rax,%r14
	mov    -0x98(%rbp),%rcx
	callq  *%rcx
	test   %eax,%eax
	jne    8180 <inflateBack+0xe50>
	mov    %r14,%rax
	mov    %r12,%rcx
	mov    %r13,%rdx
	mov    %rbx,%r10
	mov    -0xa8(%rbp),%rbx
	mov    $0x1,%edi
	mov    -0xc0(%rbp),%r14
	mov    -0xc8(%rbp),%r13
	lea    -0xd8(%rbp),%r12
	jmpq   7be3 <inflateBack+0x8b3>
	movq   $0x0,-0xd8(%rbp)
	mov    -0x88(%rbp),%r11
	xor    %eax,%eax
	mov    $0xfffffffffffffffb,%rdi
	jmpq   744f <inflateBack+0x11f>
	mov    %edx,-0xcc(%rbp)
	jmpq   81c2 <inflateBack+0xe92>
	mov    -0x88(%rbp),%r11
	lea    0xc22b(%rip),%rcx        # 141b4 <order.1+0x120>
	mov    %rcx,0x30(%r11)
	movl   $0x3f51,0x8(%r10)
	mov    -0xa8(%rbp),%r8
	mov    -0x58(%rbp),%r9
	jmpq   7432 <inflateBack+0x102>
	test   %eax,%eax
	je     8210 <inflateBack+0xee0>
	mov    -0xd8(%rbp),%rdx
	lea    0x1(%rdx),%rcx
	mov    %rcx,-0xd8(%rbp)
	movzbl (%rdx),%edx
	mov    %rbx,%rcx
	shl    %cl,%rdx
	add    %rdx,%r15
	add    $0xffffffff,%eax
	lea    0x8(%rcx),%ebx
	mov    0x64(%r10),%ecx
	cmp    %ebx,%ecx
	ja     7fa5 <inflateBack+0xc75>
	mov    %r15,%rdx
	mov    %rdx,%r15
	shr    %cl,%r15
	sub    %ecx,%ebx
	mov    $0x1,%edi
	mov    %rdi,%rsi
	shl    %cl,%esi
	lea    -0x1(%rsi),%ecx
	and    %edx,%ecx
	add    0x60(%r10),%ecx
	mov    %ecx,0x60(%r10)
	jmpq   7d12 <inflateBack+0x9e2>
	pushq  -0xa8(%rbp)
	popq   -0x38(%rbp)
	mov    -0x38(%rbp),%rdx
	sub    %edx,%ecx
	cmp    %esi,%ecx
	jb     8233 <inflateBack+0xf03>
	mov    %rax,-0xb0(%rbp)
	mov    %r15,-0xb8(%rbp)
	mov    %rbx,-0x40(%rbp)
	mov    -0xa8(%rbp),%r8
	mov    -0x58(%rbp),%r9
	mov    -0x98(%rbp),%r12
	mov    -0xa0(%rbp),%r13
	test   %r8d,%r8d
	je     825d <inflateBack+0xf2d>
	mov    0x3c(%r10),%ecx
	mov    0x60(%r10),%eax
	mov    %rcx,%rdx
	sub    %eax,%edx
	cmp    %edx,%r8d
	ja     828e <inflateBack+0xf5e>
	mov    %r9,%rcx
	sub    %rax,%rcx
	mov    %r8,%rsi
	jmpq   829a <inflateBack+0xf6a>
	movq   $0x0,-0xd8(%rbp)
	mov    -0x88(%rbp),%r11
	xor    %eax,%eax
	mov    $0xfffffffffffffffb,%rdi
	jmpq   744f <inflateBack+0x11f>
	mov    %r14,%rax
	mov    %r10,%r14
	mov    %r12,%rsi
	mov    %rdi,%r12
	mov    %r13,%rdi
	mov    %r9,%r13
	callq  *%rax
	test   %eax,%eax
	je     82c5 <inflateBack+0xf95>
	mov    %r12,%rdi
	mov    %r13,%r9
	mov    %r14,%r10
	mov    -0x98(%rbp),%rcx
	jmpq   7de2 <inflateBack+0xab2>
	mov    %r14,%rax
	mov    -0x50(%rbp),%r11
	mov    $0xfffffffffffffffb,%rdi
	jmpq   744f <inflateBack+0x11f>
	mov    -0x88(%rbp),%r11
	lea    0xc02d(%rip),%rax        # 1410e <order.1+0x7a>
	mov    %rax,0x30(%r11)
	mov    %r14,%rax
	mov    %r12,%r8
	mov    %r13,%r10
	movl   $0x3f51,0x8(%r10)
	mov    $0x1,%edi
	mov    -0xc0(%rbp),%r14
	mov    -0xc8(%rbp),%r13
	mov    -0xb0(%rbp),%r9
	lea    -0xd8(%rbp),%r12
	jmpq   7432 <inflateBack+0x102>
	mov    0x8c(%r10),%esi
	lea    0x1(%rsi),%r8d
	mov    %r8d,0x8c(%r10)
	shr    %cl,%r15
	sub    %ecx,%ebx
	mov    -0x80(%rbp),%rcx
	mov    %dx,(%rcx,%rsi,2)
	mov    0x88(%r10),%ecx
	add    0x84(%r10),%ecx
	cmp    0x8c(%r10),%ecx
	ja     830e <inflateBack+0xfde>
	mov    -0x88(%rbp),%r11
	mov    0x8(%r10),%ecx
	cmp    $0x3f51,%ecx
	jne    835f <inflateBack+0x102f>
	mov    -0xa8(%rbp),%r8
	mov    -0xb0(%rbp),%r9
	jmpq   7432 <inflateBack+0x102>
	mov    %r14,%rax
	mov    -0x88(%rbp),%r11
	mov    $0xfffffffffffffffb,%rdi
	jmpq   744f <inflateBack+0x11f>
	test   %eax,%eax
	je     843e <inflateBack+0x110e>
	mov    -0xd8(%rbp),%rdx
	lea    0x1(%rdx),%rcx
	mov    %rcx,-0xd8(%rbp)
	movzbl (%rdx),%edx
	mov    %rbx,%rcx
	shl    %cl,%rdx
	add    %rdx,%r15
	add    $0xffffffff,%eax
	lea    0x8(%rcx),%ebx
	movzbl -0xcb(%rbp),%esi
	movzbl -0xcc(%rbp),%ecx
	add    %esi,%ecx
	mov    %rdi,%rdx
	shl    %cl,%edx
	add    $0xffffffff,%edx
	and    %r15d,%edx
	mov    %rsi,%rcx
	shr    %cl,%edx
	movzwl -0xca(%rbp),%esi
	add    %esi,%edx
	mov    %edx,%edx
	mov    0x70(%r10),%rsi
	mov    (%rsi,%rdx,4),%edx
	mov    %edx,-0xd0(%rbp)
	shr    $0x8,%edx
	movzbl %dl,%edx
	add    %ecx,%edx
	cmp    %ebx,%edx
	ja     8196 <inflateBack+0xe66>
	shr    %cl,%r15
	sub    %ecx,%ebx
	jmpq   7cd7 <inflateBack+0x9a7>
	mov    %r12,%rsi
	mov    %r10,%r12
	mov    %r13,%rdi
	callq  *%r14
	test   %eax,%eax
	je     8466 <inflateBack+0x1136>
	mov    %r12,%r10
	lea    -0xd8(%rbp),%r12
	jmpq   7fad <inflateBack+0xc7d>
	lea    0xbf90(%rip),%rcx        # 141ca <order.1+0x136>
	mov    -0x88(%rbp),%r11
	mov    %rcx,0x30(%r11)
	movl   $0x3f51,0x8(%r10)
	mov    -0xa8(%rbp),%r8
	mov    -0x58(%rbp),%r9
	jmpq   7432 <inflateBack+0x102>
	mov    %r10,%r15
	mov    0x3c(%r15),%ebx
	mov    %ebx,0x40(%r15)
	mov    0x48(%r15),%r14
	mov    %r13,%rdi
	mov    %r14,%rsi
	mov    %rbx,%rdx
	callq  *%r12
	test   %eax,%eax
	jne    8486 <inflateBack+0x1156>
	mov    %rbx,%r8
	mov    %r14,%r9
	mov    %r15,%r10
	jmpq   804b <inflateBack+0xd1b>
	sub    %ecx,%eax
	lea    (%r8,%rax,1),%esi
	mov    %edx,%eax
	lea    (%r9,%rax,1),%rcx
	mov    0x5c(%r10),%eax
	cmp    %esi,%eax
	jae    82a5 <inflateBack+0xf75>
	mov    %rax,%rsi
	sub    %esi,%eax
	mov    %eax,0x5c(%r10)
	mov    -0x40(%rbp),%rbx
	mov    -0xb8(%rbp),%r15
	mov    -0xb0(%rbp),%rax
	mov    %rsi,%rdx
	jmpq   84a4 <inflateBack+0x1174>
	movq   $0x0,-0xd8(%rbp)
	mov    -0x50(%rbp),%r11
	xor    %eax,%eax
	mov    $0xfffffffffffffffb,%rdi
	jmpq   744f <inflateBack+0x11f>
	test   %eax,%eax
	je     84ea <inflateBack+0x11ba>
	mov    -0xd8(%rbp),%rdx
	lea    0x1(%rdx),%rcx
	mov    %rcx,-0xd8(%rbp)
	movzbl (%rdx),%edx
	mov    %rbx,%rcx
	shl    %cl,%rdx
	add    %rdx,%r15
	add    $0xffffffff,%eax
	lea    0x8(%rcx),%ebx
	mov    0x78(%r10),%ecx
	mov    %rdi,%rdx
	shl    %cl,%edx
	lea    -0x1(%rdx),%ecx
	and    %r15d,%ecx
	mov    %ecx,%ecx
	mov    0x68(%r10),%rdx
	mov    (%rdx,%rcx,4),%edx
	mov    %edx,-0xd0(%rbp)
	mov    %rdx,%rcx
	shr    $0x8,%ecx
	movzbl %cl,%ecx
	cmp    %ebx,%ecx
	ja     82e2 <inflateBack+0xfb2>
	shr    $0x10,%edx
	cmp    $0xf,%dx
	jbe    811c <inflateBack+0xdec>
	cmp    $0x10,%dx
	je     853e <inflateBack+0x120e>
	cmp    $0x11,%dx
	je     865c <inflateBack+0x132c>
	jmpq   85fa <inflateBack+0x12ca>
	movzwl 0x298(%r10),%ecx
	test   %cx,%cx
	je     8692 <inflateBack+0x1362>
	mov    -0x60(%rbp),%r12
	mov    -0x78(%rbp),%rcx
	mov    %rcx,(%r12)
	mov    %rcx,0x68(%r10)
	mov    -0x68(%rbp),%r8
	movl   $0x9,(%r8)
	mov    0x84(%r10),%edx
	mov    -0x80(%rbp),%rsi
	mov    %r12,%rcx
	mov    -0x70(%rbp),%r9
	mov    %rbx,-0x40(%rbp)
	mov    %r12,%rbx
	mov    %r11,%r12
	mov    %rax,%r13
	mov    %r10,%r14
	callq  22a0 <inflate_table@plt>
	test   %eax,%eax
	jne    86b8 <inflateBack+0x1388>
	mov    (%rbx),%rax
	mov    %rax,0x70(%r14)
	movl   $0x6,0x7c(%r14)
	mov    0x84(%r14),%eax
	lea    0x98(%r14,%rax,2),%rsi
	mov    0x88(%r14),%edx
	mov    $0x2,%edi
	mov    %rbx,%rcx
	mov    -0x48(%rbp),%r8
	mov    -0x70(%rbp),%r9
	callq  22a0 <inflate_table@plt>
	test   %eax,%eax
	jne    8706 <inflateBack+0x13d6>
	mov    %r13,%rax
	mov    %r14,%r10
	mov    %r12,%r11
	movl   $0x3f48,0x8(%r10)
	mov    -0xa8(%rbp),%r8
	mov    -0x40(%rbp),%rbx
	mov    $0x1,%edi
	mov    -0xc0(%rbp),%r14
	mov    -0xc8(%rbp),%r13
	mov    -0xb0(%rbp),%r9
	lea    -0xd8(%rbp),%r12
	jmpq   748d <inflateBack+0x15d>
	mov    %r12,%rsi
	mov    %r10,%r12
	mov    %r13,%rdi
	callq  *%r14
	test   %eax,%eax
	je     8754 <inflateBack+0x1424>
	mov    %r12,%r10
	mov    $0x1,%edi
	lea    -0xd8(%rbp),%r12
	jmpq   819e <inflateBack+0xe6e>
	movq   $0x0,-0xd8(%rbp)
	mov    -0x88(%rbp),%r11
	xor    %eax,%eax
	mov    $0xfffffffffffffffb,%rdi
	jmpq   744f <inflateBack+0x11f>
	mov    -0xb0(%rbp),%rax
	mov    -0x88(%rbp),%r11
	mov    $0xfffffffffffffffb,%rdi
	jmpq   744f <inflateBack+0x11f>
	add    $0x1,%rcx
	movzbl (%rcx),%edi
	mov    %dil,(%r9)
	add    $0x1,%r9
	add    $0xffffffff,%edx
	test   %edx,%edx
	jne    84a0 <inflateBack+0x1170>
	sub    %esi,%r8d
	mov    0x5c(%r10),%ecx
	test   %ecx,%ecx
	jne    8042 <inflateBack+0xd12>
	mov    -0x88(%rbp),%r11
	mov    $0x1,%edi
	mov    -0xc0(%rbp),%r14
	mov    -0xc8(%rbp),%r13
	lea    -0xd8(%rbp),%r12
	jmpq   7432 <inflateBack+0x102>
	mov    %r12,%rsi
	mov    %r10,%r12
	mov    %r13,%rdi
	callq  *%r14
	test   %eax,%eax
	je     8774 <inflateBack+0x1444>
	mov    %r12,%r10
	mov    $0x1,%edi
	lea    -0xd8(%rbp),%r12
	jmpq   82ea <inflateBack+0xfba>
	test   %eax,%eax
	je     8794 <inflateBack+0x1464>
	mov    %rbx,%rcx
	mov    -0xd8(%rbp),%rsi
	lea    0x1(%rsi),%rdx
	mov    %rdx,-0xd8(%rbp)
	add    $0xffffffff,%eax
	lea    0x8(%rcx),%ebx
	movzbl (%rsi),%edx
	shl    %cl,%rdx
	add    %rdx,%r15
	movzbl -0xcf(%rbp),%ecx
	lea    0x2(%rcx),%edx
	cmp    %ebx,%edx
	ja     8512 <inflateBack+0x11e2>
	shr    %cl,%r15
	sub    %ecx,%ebx
	mov    -0x90(%rbp),%r10
	mov    0x8c(%r10),%ecx
	test   %ecx,%ecx
	je     87ad <inflateBack+0x147d>
	add    $0xffffffff,%ecx
	mov    %ecx,%ecx
	movzwl 0x98(%r10,%rcx,2),%esi
	mov    %r15,%rcx
	shr    $0x2,%rcx
	and    $0x3,%r15d
	lea    0x3(%r15),%edx
	add    $0xfffffffe,%ebx
	mov    %rcx,%r15
	mov    0x88(%r10),%ecx
	add    0x84(%r10),%ecx
	mov    %rdx,%rdi
	add    0x8c(%r10),%edi
	cmp    %edi,%ecx
	jae    87ee <inflateBack+0x14be>
	mov    -0x88(%rbp),%r11
	lea    0xbb6f(%rip),%rcx        # 14127 <order.1+0x93>
	mov    %rcx,0x30(%r11)
	movl   $0x3f51,0x8(%r10)
	mov    $0x1,%edi
	jmpq   815d <inflateBack+0xe2d>
	test   %eax,%eax
	je     87fc <inflateBack+0x14cc>
	mov    %rbx,%rcx
	mov    -0xd8(%rbp),%rsi
	lea    0x1(%rsi),%rdx
	mov    %rdx,-0xd8(%rbp)
	add    $0xffffffff,%eax
	lea    0x8(%rcx),%ebx
	movzbl (%rsi),%edx
	shl    %cl,%rdx
	add    %rdx,%r15
	movzbl -0xcf(%rbp),%ecx
	lea    0x7(%rcx),%edx
	cmp    %ebx,%edx
	ja     85ce <inflateBack+0x129e>
	shr    %cl,%r15
	mov    %r15,%rdi
	shr    $0x7,%rdi
	and    $0x7f,%r15d
	lea    0xb(%r15),%edx
	sub    %ecx,%ebx
	add    $0xfffffff9,%ebx
	mov    %rdi,%r15
	xor    %esi,%esi
	mov    -0x90(%rbp),%r10
	jmpq   858a <inflateBack+0x125a>
	test   %eax,%eax
	je     8811 <inflateBack+0x14e1>
	mov    %rbx,%rcx
	mov    -0xd8(%rbp),%rsi
	lea    0x1(%rsi),%rdx
	mov    %rdx,-0xd8(%rbp)
	add    $0xffffffff,%eax
	lea    0x8(%rcx),%ebx
	movzbl (%rsi),%edx
	shl    %cl,%rdx
	add    %rdx,%r15
	movzbl -0xcf(%rbp),%ecx
	lea    0x3(%rcx),%edx
	cmp    %ebx,%edx
	ja     8630 <inflateBack+0x1300>
	shr    %cl,%r15
	mov    %r15,%rdi
	shr    $0x3,%rdi
	and    $0x7,%r15d
	lea    0x3(%r15),%edx
	sub    %ecx,%ebx
	add    $0xfffffffd,%ebx
	mov    %rdi,%r15
	xor    %esi,%esi
	mov    -0x90(%rbp),%r10
	jmpq   858a <inflateBack+0x125a>
	lea    0xbaa8(%rip),%rcx        # 14141 <order.1+0xad>
	mov    %rcx,0x30(%r11)
	movl   $0x3f51,0x8(%r10)
	mov    -0xa8(%rbp),%r8
	mov    -0xb0(%rbp),%r9
	jmpq   7432 <inflateBack+0x102>
	lea    0xbaa7(%rip),%rax        # 14166 <order.1+0xd2>
	mov    %rax,0x30(%r12)
	mov    %r13,%rax
	mov    %r14,%r10
	mov    %r12,%r11
	movl   $0x3f51,0x8(%r10)
	mov    -0xa8(%rbp),%r8
	mov    -0x40(%rbp),%rbx
	mov    $0x1,%edi
	mov    -0xc0(%rbp),%r14
	mov    -0xc8(%rbp),%r13
	mov    -0xb0(%rbp),%r9
	lea    -0xd8(%rbp),%r12
	jmpq   7432 <inflateBack+0x102>
	lea    0xba75(%rip),%rax        # 14182 <order.1+0xee>
	mov    %rax,0x30(%r12)
	mov    %r13,%rax
	mov    %r14,%r10
	mov    %r12,%r11
	movl   $0x3f51,0x8(%r10)
	mov    -0xa8(%rbp),%r8
	mov    -0x40(%rbp),%rbx
	mov    $0x1,%edi
	mov    -0xc0(%rbp),%r14
	mov    -0xc8(%rbp),%r13
	mov    -0xb0(%rbp),%r9
	lea    -0xd8(%rbp),%r12
	jmpq   7432 <inflateBack+0x102>
	movq   $0x0,-0xd8(%rbp)
	mov    -0x88(%rbp),%r11
	xor    %eax,%eax
	mov    $0xfffffffffffffffb,%rdi
	jmpq   744f <inflateBack+0x11f>
	movq   $0x0,-0xd8(%rbp)
	mov    -0x88(%rbp),%r11
	xor    %eax,%eax
	mov    $0xfffffffffffffffb,%rdi
	jmpq   744f <inflateBack+0x11f>
	mov    %r13,%rdi
	mov    %r12,%rsi
	callq  *%r14
	test   %eax,%eax
	je     8826 <inflateBack+0x14f6>
	mov    %rbx,%rcx
	jmpq   851d <inflateBack+0x11ed>
	mov    -0x88(%rbp),%r11
	lea    0xb96c(%rip),%rcx        # 14127 <order.1+0x93>
	mov    %rcx,0x30(%r11)
	movl   $0x3f51,0x8(%r10)
	mov    $0x1,%edi
	jmpq   815d <inflateBack+0xe2d>
	mov    0x8c(%r10),%edi
	lea    0x1(%rdi),%ecx
	mov    %ecx,0x8c(%r10)
	mov    %si,0x98(%r10,%rdi,2)
	add    $0xffffffff,%edx
	test   %edx,%edx
	jne    87d1 <inflateBack+0x14a1>
	mov    $0x1,%edi
	jmpq   813b <inflateBack+0xe0b>
	mov    %r13,%rdi
	mov    %r12,%rsi
	callq  *%r14
	test   %eax,%eax
	je     8846 <inflateBack+0x1516>
	mov    %rbx,%rcx
	jmpq   85d9 <inflateBack+0x12a9>
	mov    %r13,%rdi
	mov    %r12,%rsi
	callq  *%r14
	test   %eax,%eax
	je     8866 <inflateBack+0x1536>
	mov    %rbx,%rcx
	jmpq   863b <inflateBack+0x130b>
	movq   $0x0,-0xd8(%rbp)
	mov    -0x88(%rbp),%r11
	xor    %eax,%eax
	mov    $0xfffffffffffffffb,%rdi
	jmpq   744f <inflateBack+0x11f>
	movq   $0x0,-0xd8(%rbp)
	mov    -0x88(%rbp),%r11
	xor    %eax,%eax
	mov    $0xfffffffffffffffb,%rdi
	jmpq   744f <inflateBack+0x11f>
	movq   $0x0,-0xd8(%rbp)
	mov    -0x88(%rbp),%r11
	xor    %eax,%eax
	mov    $0xfffffffffffffffb,%rdi
	jmpq   744f <inflateBack+0x11f>
	nopw   %cs:0x0(%rax,%rax,1)

0008890 <inflateBackEnd>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    $0xfffffffffffffffe,%rax
	test   %rdi,%rdi
	jne    88a6 <inflateBackEnd+0x16>
	leaveq 
	retq   
	mov    0x38(%rdi),%rsi
	test   %rsi,%rsi
	jne    88b1 <inflateBackEnd+0x21>
	leaveq 
	retq   
	mov    0x48(%rdi),%rcx
	test   %rcx,%rcx
	jne    88bc <inflateBackEnd+0x2c>
	leaveq 
	retq   
	mov    0x50(%rdi),%rax
	mov    %r15,-0x8(%rbp)
	mov    %rdi,%r15
	mov    %rax,%rdi
	callq  *%rcx
	movq   $0x0,0x38(%r15)
	xor    %eax,%eax
	mov    -0x8(%rbp),%r15
	leaveq 
	retq   
	nopl   0x0(%rax)

00088e0 <inflateBackInit_>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    $0xfffffffffffffffa,%rax
	test   %rcx,%rcx
	jne    88f6 <inflateBackInit_+0x16>
	leaveq 
	retq   
	movsbq (%rcx),%rcx
	cmp    $0x31,%cl
	je     8901 <inflateBackInit_+0x21>
	leaveq 
	retq   
	cmp    $0x70,%r8d
	je     8909 <inflateBackInit_+0x29>
	leaveq 
	retq   
	mov    $0xfffffffffffffffe,%rax
	test   %rdi,%rdi
	jne    8917 <inflateBackInit_+0x37>
	leaveq 
	retq   
	test   %rdx,%rdx
	jne    891e <inflateBackInit_+0x3e>
	leaveq 
	retq   
	cmp    $0x7,%esi
	jg     8925 <inflateBackInit_+0x45>
	leaveq 
	retq   
	cmp    $0xf,%esi
	jle    892c <inflateBackInit_+0x4c>
	leaveq 
	retq   
	movq   $0x0,0x30(%rdi)
	mov    0x40(%rdi),%rax
	test   %rax,%rax
	jne    8950 <inflateBackInit_+0x70>
	mov    0xf694(%rip),%rax        # 17fd8 <zcalloc@@Base+0x9268>
	mov    %rax,0x40(%rdi)
	movq   $0x0,0x50(%rdi)
	mov    0x48(%rdi),%rax
	test   %rax,%rax
	jne    8964 <inflateBackInit_+0x84>
	mov    0xf660(%rip),%rax        # 17fc0 <zcfree@@Base+0x9240>
	mov    %rax,0x48(%rdi)
	mov    0x40(%rdi),%rcx
	mov    0x50(%rdi),%r8
	mov    $0x1,%eax
	mov    $0x1bf8,%r9d
	mov    %r15,-0x18(%rbp)
	mov    %rsi,-0x8(%rbp)
	mov    %rdx,-0x10(%rbp)
	mov    %r9,%rdx
	mov    %rax,%rsi
	mov    %rdi,%r15
	mov    %r8,%rdi
	callq  *%rcx
	test   %rax,%rax
	jne    89a3 <inflateBackInit_+0xc3>
	mov    $0xfffffffffffffffc,%rax
	mov    -0x18(%rbp),%r15
	leaveq 
	retq   
	mov    %rax,0x38(%r15)
	movl   $0x8000,0x1c(%rax)
	mov    -0x8(%rbp),%rcx
	mov    %ecx,0x38(%rax)
	mov    $0x1,%edx
	shl    %cl,%edx
	mov    %edx,0x3c(%rax)
	mov    -0x10(%rbp),%rcx
	mov    %rcx,0x48(%rax)
	movl   $0x0,0x44(%rax)
	movl   $0x0,0x40(%rax)
	xor    %eax,%eax
	mov    -0x18(%rbp),%r15
	leaveq 
	retq   
	nopl   (%rax)

00089e0 <fixedtables>:
	push   %rbp
	mov    %rsp,%rbp
	lea    0xb7fd(%rip),%rax        # 141e8 <lenfix.14>
	mov    %rax,0x68(%rdi)
	movl   $0x9,0x78(%rdi)
	lea    0xbfeb(%rip),%rax        # 149e8 <distfix.15>
	mov    %rax,0x70(%rdi)
	movl   $0x5,0x7c(%rdi)
	leaveq 
	retq   
	nopw   0x0(%rax,%rax,1)

0008a10 <inflate_fast>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0xb0,%rsp
	mov    %r15,-0x30(%rbp)
	mov    %r14,-0x28(%rbp)
	mov    %r13,-0x20(%rbp)
	mov    %r12,-0x18(%rbp)
	mov    %rbx,-0x10(%rbp)
	mov    %rdi,-0x8(%rbp)
	mov    0x38(%rdi),%r14
	mov    %r14,-0x88(%rbp)
	mov    0x40(%r14),%eax
	mov    %rax,-0x90(%rbp)
	mov    0x48(%r14),%rax
	mov    %rax,-0x68(%rbp)
	mov    0x50(%r14),%rdx
	mov    0x58(%r14),%eax
	mov    0x68(%r14),%r10
	mov    %r10,-0x48(%rbp)
	mov    0x70(%r14),%r11
	mov    %r11,-0x38(%rbp)
	mov    $0x1,%r8d
	mov    0x7c(%r14),%ecx
	mov    %r8,%rbx
	shl    %cl,%ebx
	lea    -0x1(%rbx),%ecx
	mov    %ecx,%r9d
	mov    %r9,-0x40(%rbp)
	mov    0x78(%r14),%ecx
	mov    %r8,%rbx
	shl    %cl,%ebx
	lea    -0x1(%rbx),%ecx
	mov    %ecx,%r12d
	mov    %r12,-0x50(%rbp)
	mov    0x20(%rdi),%ecx
	sub    %ecx,%esi
	mov    %rsi,-0xa0(%rbp)
	mov    0x44(%r14),%r15d
	mov    %r15,-0x80(%rbp)
	mov    0x18(%rdi),%rsi
	mov    %rsi,-0x98(%rbp)
	add    $0xfffffeff,%ecx
	mov    %ecx,%ecx
	lea    (%rsi,%rcx,1),%rbx
	mov    (%rdi),%r13
	mov    0x8(%rdi),%ecx
	add    $0xfffffffb,%ecx
	mov    %ecx,%ecx
	lea    0x0(%r13,%rcx,1),%rdi
	mov    0x3c(%r14),%ecx
	mov    %rcx,-0x58(%rbp)
	add    %r15d,%ecx
	mov    %rcx,-0x60(%rbp)
	jmp    8aec <inflate_fast+0xdc>
	cmp    %rbx,%rsi
	jae    8b25 <inflate_fast+0x115>
	mov    $0x1,%r8d
	cmp    $0xe,%eax
	ja     8b19 <inflate_fast+0x109>
	lea    0x2(%r13),%r15
	movzbl 0x1(%r13),%r14d
	lea    0x8(%rax),%ecx
	shl    %cl,%r14
	movzbl 0x0(%r13),%r13d
	mov    %rax,%rcx
	shl    %cl,%r13
	lea    (%rdx,%r13,1),%rax
	lea    (%r14,%rax,1),%rdx
	lea    0x10(%rcx),%eax
	mov    %r15,%r13
	mov    %r12,%rcx
	and    %rdx,%rcx
	mov    (%r10,%rcx,4),%r14d
	jmp    8b7d <inflate_fast+0x16d>
	mov    $0x1,%r8d
	mov    -0x8(%rbp),%r9
	mov    -0x88(%rbp),%r10
	jmpq   8bbe <inflate_fast+0x1ae>
	movzbl %r14b,%ecx
	mov    %rcx,%r14
	and    $0x10,%r14d
	test   %r14d,%r14d
	jne    8be6 <inflate_fast+0x1d6>
	mov    %rcx,%r14
	and    $0x40,%r14d
	test   %r14d,%r14d
	jne    8c02 <inflate_fast+0x1f2>
	mov    %r8,%r14
	shl    %cl,%r14d
	lea    -0x1(%r14),%ecx
	mov    %ecx,%ecx
	and    %rdx,%rcx
	movzwl -0xa2(%rbp),%r14d
	add    %r14,%rcx
	mov    (%r10,%rcx,4),%r14d
	mov    %r14,%rcx
	shr    $0x8,%ecx
	movzbl %cl,%ecx
	shr    %cl,%rdx
	sub    %ecx,%eax
	mov    %r14d,-0xa4(%rbp)
	test   %r14b,%r14b
	jne    8b3b <inflate_fast+0x12b>
	movzbl -0xa2(%rbp),%ecx
	mov    %cl,(%rsi)
	add    $0x1,%rsi
	cmp    %rdi,%r13
	jb     8ae1 <inflate_fast+0xd1>
	mov    $0x1,%r8d
	mov    -0x8(%rbp),%r9
	mov    -0x88(%rbp),%r10
	mov    %rax,%r12
	shr    $0x3,%r12d
	mov    %r12d,%r11d
	mov    %r13,%rcx
	sub    %r11,%rcx
	mov    %rcx,(%r9)
	mov    %rsi,0x18(%r9)
	cmp    %rcx,%rdi
	ja     8c2d <inflate_fast+0x21d>
	lea    (%rdi,%r11,1),%rcx
	sub    %r13,%rcx
	add    $0x5,%ecx
	jmp    8c35 <inflate_fast+0x225>
	movzwl -0xa2(%rbp),%r14d
	and    $0xf,%ecx
	test   %ecx,%ecx
	je     8c90 <inflate_fast+0x280>
	cmp    %ecx,%eax
	jb     8c4a <inflate_fast+0x23a>
	mov    %rdx,%r10
	jmp    8c6f <inflate_fast+0x25f>
	and    $0x20,%ecx
	test   %ecx,%ecx
	jne    8ca1 <inflate_fast+0x291>
	lea    0xbe88(%rip),%rcx        # 14a9c <distfix.15+0xb4>
	mov    -0x8(%rbp),%r9
	mov    %rcx,0x30(%r9)
	mov    -0x88(%rbp),%r10
	movl   $0x3f51,0x8(%r10)
	jmp    8bbe <inflate_fast+0x1ae>
	sub    %r13,%rdi
	lea    0x5(%r12,%rdi,1),%ecx
	mov    %ecx,0x8(%r9)
	cmp    %rsi,%rbx
	ja     8cb9 <inflate_fast+0x2a9>
	sub    %rsi,%rbx
	lea    0x101(%rbx),%rcx
	jmp    8cc3 <inflate_fast+0x2b3>
	lea    0x1(%r13),%r12
	lea    0x8(%rax),%r15d
	movzbl 0x0(%r13),%r10d
	mov    %rcx,%r13
	mov    %rax,%rcx
	mov    %r13,%rax
	shl    %cl,%r10
	add    %rdx,%r10
	mov    %rax,%rcx
	mov    %r15,%rax
	mov    %r12,%r13
	sub    %ecx,%eax
	mov    %r10,%rdx
	shr    %cl,%rdx
	mov    %r8,%r12
	shl    %cl,%r12d
	lea    -0x1(%r12),%ecx
	and    %r10d,%ecx
	add    %ecx,%r14d
	mov    -0x50(%rbp),%r12
	mov    -0x48(%rbp),%r10
	mov    %r14,-0x78(%rbp)
	cmp    $0xe,%eax
	jbe    8cf7 <inflate_fast+0x2e7>
	mov    %r13,%r14
	jmpq   8d24 <inflate_fast+0x314>
	mov    -0x88(%rbp),%r10
	movl   $0x3f3f,0x8(%r10)
	mov    -0x8(%rbp),%r9
	jmpq   8bbe <inflate_fast+0x1ae>
	sub    %rsi,%rbx
	lea    0x101(%rbx),%rcx
	mov    %ecx,0x20(%r9)
	and    $0x7,%eax
	mov    %rax,%rcx
	shl    %cl,%r8d
	lea    -0x1(%r8),%eax
	mov    %eax,%eax
	and    %rax,%rdx
	mov    %rdx,0x50(%r10)
	mov    %ecx,0x58(%r10)
	mov    -0x10(%rbp),%rbx
	mov    -0x18(%rbp),%r12
	mov    -0x20(%rbp),%r13
	mov    -0x28(%rbp),%r14
	mov    -0x30(%rbp),%r15
	leaveq 
	retq   
	lea    0x2(%r13),%r14
	movzbl 0x1(%r13),%r10d
	lea    0x8(%rax),%ecx
	shl    %cl,%r10
	movzbl 0x0(%r13),%r12d
	mov    %rax,%rcx
	shl    %cl,%r12
	lea    (%rdx,%r12,1),%rax
	lea    (%r10,%rax,1),%rdx
	lea    0x10(%rcx),%eax
	mov    -0x50(%rbp),%r12
	mov    -0x48(%rbp),%r10
	mov    %r9,%rcx
	and    %rdx,%rcx
	mov    (%r11,%rcx,4),%r15d
	jmp    8d5e <inflate_fast+0x34e>
	mov    %rcx,%r13
	and    $0x40,%r13d
	test   %r13d,%r13d
	jne    8dda <inflate_fast+0x3ca>
	mov    %r8,%r13
	shl    %cl,%r13d
	lea    -0x1(%r13),%ecx
	mov    %ecx,%ecx
	and    %rdx,%rcx
	movzwl -0xa2(%rbp),%r13d
	add    %r13,%rcx
	mov    (%r11,%rcx,4),%r15d
	mov    %r15,%rcx
	shr    $0x8,%ecx
	movzbl %cl,%ecx
	shr    %cl,%rdx
	sub    %ecx,%eax
	mov    %r15d,-0xa4(%rbp)
	movzbl %r15b,%ecx
	mov    %rcx,%r13
	and    $0x10,%r13d
	test   %r13d,%r13d
	je     8d30 <inflate_fast+0x320>
	and    $0xf,%ecx
	cmp    %eax,%ecx
	ja     8e00 <inflate_fast+0x3f0>
	mov    %rdx,%r11
	mov    %r14,%r13
	mov    %r11,%rdx
	shr    %cl,%rdx
	sub    %ecx,%eax
	mov    %r8,%r14
	shl    %cl,%r14d
	lea    -0x1(%r14),%ecx
	and    %r11d,%ecx
	shr    $0x10,%r15d
	add    %ecx,%r15d
	mov    -0x98(%rbp),%rcx
	mov    %rsi,%r11
	sub    %rcx,%r11
	mov    -0xa0(%rbp),%rcx
	add    %ecx,%r11d
	cmp    %r15d,%r11d
	jb     8e26 <inflate_fast+0x416>
	mov    %r15d,%ecx
	mov    %rsi,%r8
	sub    %rcx,%r8
	mov    -0x78(%rbp),%rcx
	jmpq   8e82 <inflate_fast+0x472>
	lea    0xbca5(%rip),%rcx        # 14a86 <distfix.15+0x9e>
	mov    -0x8(%rbp),%r9
	mov    %rcx,0x30(%r9)
	mov    -0x88(%rbp),%r10
	movl   $0x3f51,0x8(%r10)
	mov    %r14,%r13
	jmpq   8bbe <inflate_fast+0x1ae>
	xchg   %rax,%rcx
	lea    0x1(%r14),%r13
	movzbl (%r14),%r11d
	shl    %cl,%r11
	add    %rdx,%r11
	lea    0x8(%rcx),%edx
	cmp    %edx,%eax
	ja     8ec3 <inflate_fast+0x4b3>
	mov    %rax,%rcx
	mov    %rdx,%rax
	jmpq   8d90 <inflate_fast+0x380>
	mov    %r15,%r9
	sub    %r11d,%r9d
	mov    -0x90(%rbp),%rcx
	cmp    %ecx,%r9d
	ja     8ee2 <inflate_fast+0x4d2>
	mov    %r11,%r10
	sub    %r15d,%r10d
	mov    -0x80(%rbp),%r14
	test   %r14d,%r14d
	je     8f14 <inflate_fast+0x504>
	cmp    %r14d,%r9d
	ja     8f37 <inflate_fast+0x527>
	lea    (%r14,%r10,1),%ecx
	mov    %ecx,%r8d
	mov    -0x68(%rbp),%rcx
	add    %r8,%rcx
	mov    -0x78(%rbp),%r8
	cmp    %r9d,%r8d
	jbe    8f87 <inflate_fast+0x577>
	mov    %r10,-0x78(%rbp)
	jmpq   8fab <inflate_fast+0x59b>
	mov    %r14,%rsi
	mov    %r11,%r8
	movzbl (%r8),%r11d
	mov    %r11b,(%rsi)
	movzbl 0x1(%r8),%r11d
	mov    %r11b,0x1(%rsi)
	movzbl 0x2(%r8),%r11d
	mov    %r11b,0x2(%rsi)
	lea    0x3(%r8),%r11
	lea    0x3(%rsi),%r14
	add    $0xfffffffd,%ecx
	cmp    $0x2,%ecx
	ja     8e7c <inflate_fast+0x46c>
	test   %ecx,%ecx
	jne    8fd1 <inflate_fast+0x5c1>
	mov    %r14,%rsi
	mov    -0x38(%rbp),%r11
	mov    -0x50(%rbp),%r12
	jmpq   8ba4 <inflate_fast+0x194>
	movzbl 0x0(%r13),%r13d
	xchg   %rdx,%rcx
	xchg   %rax,%rdx
	shl    %cl,%r13
	add    %r13,%r11
	add    $0x10,%eax
	lea    0x2(%r14),%r13
	mov    %rdx,%rcx
	jmpq   8d90 <inflate_fast+0x380>
	mov    -0x88(%rbp),%r10
	movslq 0x1be8(%r10),%rcx
	test   %ecx,%ecx
	je     8e3c <inflate_fast+0x42c>
	lea    0xbb69(%rip),%rcx        # 14a68 <distfix.15+0x80>
	mov    -0x8(%rbp),%r9
	mov    %rcx,0x30(%r9)
	movl   $0x3f51,0x8(%r10)
	jmpq   8bbe <inflate_fast+0x1ae>
	mov    -0x58(%rbp),%rcx
	add    %r10d,%ecx
	mov    %ecx,%r8d
	mov    -0x68(%rbp),%rcx
	add    %r8,%rcx
	mov    -0x78(%rbp),%r8
	cmp    %r9d,%r8d
	jbe    8f87 <inflate_fast+0x577>
	mov    %r10,-0x70(%rbp)
	jmpq   8ff9 <inflate_fast+0x5e9>
	mov    -0x60(%rbp),%rcx
	add    %r10d,%ecx
	mov    %ecx,%ecx
	mov    -0x68(%rbp),%r10
	add    %r10,%rcx
	add    %r14d,%r11d
	mov    %r15,%r9
	sub    %r11d,%r9d
	mov    -0x78(%rbp),%r8
	cmp    %r9d,%r8d
	jbe    8f87 <inflate_fast+0x577>
	mov    %r11,-0x70(%rbp)
	jmpq   9026 <inflate_fast+0x616>
	movzbl (%rcx),%r9d
	mov    %r9b,(%rsi)
	movzbl 0x1(%rcx),%r9d
	mov    %r9b,0x1(%rsi)
	movzbl 0x2(%rcx),%r9d
	mov    %r9b,0x2(%rsi)
	add    $0x3,%rcx
	add    $0x3,%rsi
	add    $0xfffffffd,%r8d
	cmp    $0x2,%r8d
	ja     8f62 <inflate_fast+0x552>
	test   %r8d,%r8d
	jne    9051 <inflate_fast+0x641>
	mov    -0x40(%rbp),%r9
	mov    -0x38(%rbp),%r11
	mov    -0x48(%rbp),%r10
	jmpq   8ba4 <inflate_fast+0x194>
	add    $0x1,%rcx
	movzbl (%rcx),%r10d
	mov    %r10b,(%rsi)
	add    $0x1,%rsi
	add    $0xffffffff,%r9d
	test   %r9d,%r9d
	jne    8fa7 <inflate_fast+0x597>
	mov    %r15d,%ecx
	neg    %rcx
	add    %rsi,%rcx
	mov    -0x78(%rbp),%r9
	add    %r9d,%r8d
	jmp    8f87 <inflate_fast+0x577>
	movzbl (%r11),%r11d
	mov    %r11b,(%r14)
	lea    0x4(%rsi),%r14
	cmp    $0x1,%ecx
	ja     9076 <inflate_fast+0x666>
	mov    %r14,%rsi
	mov    -0x38(%rbp),%r11
	mov    -0x50(%rbp),%r12
	jmpq   8ba4 <inflate_fast+0x194>
	add    $0x1,%rcx
	movzbl (%rcx),%r10d
	mov    %r10b,(%rsi)
	add    $0x1,%rsi
	add    $0xffffffff,%r9d
	test   %r9d,%r9d
	jne    8ff5 <inflate_fast+0x5e5>
	mov    %r15d,%ecx
	neg    %rcx
	add    %rsi,%rcx
	mov    -0x70(%rbp),%r9
	add    %r9d,%r8d
	jmpq   8f87 <inflate_fast+0x577>
	add    $0x1,%rcx
	movzbl (%rcx),%r11d
	mov    %r11b,(%rsi)
	add    $0x1,%rsi
	add    $0xffffffff,%r9d
	test   %r9d,%r9d
	jne    9022 <inflate_fast+0x612>
	mov    -0x70(%rbp),%rcx
	sub    %r15d,%ecx
	add    %ecx,%r8d
	cmp    %r8d,%r14d
	jb     908f <inflate_fast+0x67f>
	mov    %r10,%rcx
	jmpq   8f87 <inflate_fast+0x577>
	movzbl (%rcx),%r9d
	mov    %r9b,(%rsi)
	lea    0x1(%rsi),%r14
	cmp    $0x1,%r8d
	ja     9094 <inflate_fast+0x684>
	mov    %r14,%rsi
	mov    -0x40(%rbp),%r9
	mov    -0x38(%rbp),%r11
	mov    -0x48(%rbp),%r10
	jmpq   8ba4 <inflate_fast+0x194>
	movzbl 0x4(%r8),%ecx
	mov    %cl,(%r14)
	add    $0x5,%rsi
	mov    -0x38(%rbp),%r11
	mov    -0x50(%rbp),%r12
	jmpq   8ba4 <inflate_fast+0x194>
	mov    %r14,%rcx
	jmp    90b4 <inflate_fast+0x6a4>
	movzbl 0x1(%rcx),%ecx
	mov    %cl,(%r14)
	add    $0x2,%rsi
	mov    -0x40(%rbp),%r9
	mov    -0x38(%rbp),%r11
	mov    -0x48(%rbp),%r10
	jmpq   8ba4 <inflate_fast+0x194>
	add    $0x1,%r10
	movzbl (%r10),%r9d
	mov    %r9b,(%rsi)
	add    $0x1,%rsi
	add    $0xffffffff,%ecx
	test   %ecx,%ecx
	jne    90b0 <inflate_fast+0x6a0>
	mov    %r15d,%ecx
	neg    %rcx
	add    %rsi,%rcx
	sub    %r14d,%r8d
	jmpq   8f87 <inflate_fast+0x577>
	nopw   0x0(%rax,%rax,1)

00090e0 <inflate>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x1d0,%rsp
	mov    %r15,-0x28(%rbp)
	mov    %rsi,-0x168(%rbp)
	mov    %rbx,%r15
	mov    %rdi,%rbx
	callq  c320 <inflateStateCheck>
	test   %eax,%eax
	je     9115 <inflate+0x35>
	mov    %r15,%rbx
	mov    $0xfffffffffffffffe,%rax
	mov    -0x28(%rbp),%r15
	leaveq 
	retq   
	mov    0x18(%rbx),%rax
	test   %rax,%rax
	jne    912e <inflate+0x4e>
	mov    %r15,%rbx
	mov    $0xfffffffffffffffe,%rax
	mov    -0x28(%rbp),%r15
	leaveq 
	retq   
	mov    (%rbx),%rax
	test   %rax,%rax
	je     922a <inflate+0x14a>
	mov    0x38(%rbx),%rdx
	mov    0x8(%rdx),%eax
	cmp    $0x3f3f,%eax
	jne    914f <inflate+0x6f>
	movl   $0x3f40,0x8(%rdx)
	mov    0x18(%rbx),%rdi
	mov    0x20(%rbx),%esi
	mov    (%rbx),%r8
	mov    0x8(%rbx),%r11d
	mov    %r11,-0x30(%rbp)
	mov    0x50(%rdx),%r10
	mov    0x58(%rdx),%ecx
	xor    %eax,%eax
	mov    %rax,-0x138(%rbp)
	mov    %r14,-0x20(%rbp)
	lea    0x558(%rdx),%r9
	mov    %r9,-0x1a0(%rbp)
	lea    0x98(%rdx),%r9
	mov    %r9,-0x1b0(%rbp)
	lea    0x90(%rdx),%r9
	mov    %r9,-0x188(%rbp)
	lea    0x78(%rdx),%r9
	mov    %r13,-0x18(%rbp)
	mov    %r9,-0x190(%rbp)
	lea    0x318(%rdx),%r9
	mov    %r9,-0x198(%rbp)
	lea    0x7c(%rdx),%r9
	mov    %r12,-0x10(%rbp)
	mov    %r9,-0x1c0(%rbp)
	mov    %r15,-0x8(%rbp)
	mov    $0x3f3d,%r12d
	mov    %r12,-0x40(%rbp)
	mov    $0x3f3f,%r12d
	mov    %r12,-0x38(%rbp)
	mov    %rdx,%r12
	mov    %rsi,%r14
	mov    %rdi,%r15
	mov    -0x168(%rbp),%rsi
	mov    %r14,%r13
	mov    %rax,-0x148(%rbp)
	mov    0x8(%r12),%edx
	add    $0xffffc0cc,%edx
	cmp    $0x1e,%edx
	jbe    9245 <inflate+0x165>
	mov    -0x8(%rbp),%rbx
	mov    -0x10(%rbp),%r12
	mov    -0x18(%rbp),%r13
	mov    -0x20(%rbp),%r14
	mov    $0xfffffffffffffffe,%rax
	mov    -0x28(%rbp),%r15
	leaveq 
	retq   
	mov    0x8(%rbx),%eax
	test   %eax,%eax
	je     913a <inflate+0x5a>
	mov    %r15,%rbx
	mov    $0xfffffffffffffffe,%rax
	mov    -0x28(%rbp),%r15
	leaveq 
	retq   
	lea    0xb86c(%rip),%rdi        # 14ab8 <distfix.15+0xd0>
	movslq (%rdi,%rdx,4),%rdx
	add    %rdi,%rdx
	jmpq   *%rdx
	movslq 0x10(%r12),%rdx
	test   %edx,%edx
	je     926b <inflate+0x18b>
	movslq 0x18(%r12),%rdx
	test   %edx,%edx
	jne    9d43 <inflate+0xc63>
	movl   $0x3f50,0x8(%r12)
	mov    $0x1,%eax
	mov    -0x168(%rbp),%rsi
	mov    %r15,0x18(%rbx)
	mov    %r13d,0x20(%rbx)
	mov    %r8,(%rbx)
	mov    %r11d,0x8(%rbx)
	mov    %r10,0x50(%r12)
	mov    %ecx,0x58(%r12)
	mov    0x3c(%r12),%ecx
	test   %ecx,%ecx
	je     9d76 <inflate+0xc96>
	mov    0x20(%rbx),%ecx
	mov    %r14,%rdx
	sub    %ecx,%edx
	mov    %rsi,%r13
	mov    %rax,%r15
	mov    0x18(%rbx),%rsi
	mov    %rbx,%rdi
	callq  c3b0 <updatewindow>
	test   %eax,%eax
	jne    9dad <inflate+0xccd>
	mov    %r15,%rax
	mov    %r13,%rsi
	mov    0x8(%rbx),%r13d
	mov    -0x30(%rbp),%r15
	mov    %r15,%rcx
	sub    %r13d,%ecx
	mov    %ecx,%ecx
	add    0x10(%rbx),%rcx
	mov    %rcx,0x10(%rbx)
	mov    0x20(%rbx),%r8d
	mov    %r14,%rdx
	sub    %r8d,%edx
	mov    %edx,%ecx
	mov    %rcx,%rdi
	add    0x28(%rbx),%rdi
	mov    %rdi,0x28(%rbx)
	add    0x28(%r12),%rcx
	mov    %rcx,0x28(%r12)
	movslq 0x10(%r12),%rcx
	and    $0x4,%ecx
	test   %ecx,%ecx
	jle    9e12 <inflate+0xd32>
	cmp    %r8d,%r14d
	je     9e12 <inflate+0xd32>
	movslq 0x18(%r12),%rcx
	test   %ecx,%ecx
	jne    9dd3 <inflate+0xcf3>
	mov    0x18(%rbx),%rsi
	mov    %edx,%ecx
	sub    %rcx,%rsi
	mov    0x20(%r12),%rdi
	mov    %r8,-0x1c0(%rbp)
	mov    %rax,-0x1b0(%rbp)
	callq  2230 <adler32@plt>
	jmpq   9df4 <inflate+0xd14>
	test   %r11d,%r11d
	je     9e2b <inflate+0xd4b>
	movzbl (%r8),%edx
	shl    %cl,%rdx
	add    %rdx,%r10
	add    $0x1,%r8
	add    $0xffffffff,%r11d
	add    $0x8,%ecx
	cmp    $0x1f,%ecx
	jbe    9353 <inflate+0x273>
	mov    $0xff000000,%eax
	and    %r10,%rax
	shr    $0x18,%rax
	mov    %r10,%rcx
	and    $0xff0000,%rcx
	shr    $0x8,%rcx
	add    %rax,%rcx
	mov    %r10,%rax
	and    $0xff00,%rax
	shl    $0x8,%rax
	add    %rax,%rcx
	movzbl %r10b,%eax
	shl    $0x18,%rax
	add    %rcx,%rax
	mov    %rax,0x20(%r12)
	mov    %rax,0x60(%rbx)
	movl   $0x3f3e,0x8(%r12)
	xor    %ecx,%ecx
	mov    %rcx,%r10
	movslq 0x14(%r12),%rax
	test   %eax,%eax
	je     9e33 <inflate+0xd53>
	xor    %edx,%edx
	mov    %rdx,%rsi
	xor    %edi,%edi
	mov    %r15,-0x130(%rbp)
	mov    %r14,-0xb0(%rbp)
	mov    %rcx,-0x170(%rbp)
	mov    %r13,-0xd8(%rbp)
	mov    %r8,%r13
	mov    %r11,%r14
	mov    %r10,%r15
	callq  2230 <adler32@plt>
	mov    %rax,0x20(%r12)
	mov    %rax,0x60(%rbx)
	movl   $0x3f3f,0x8(%r12)
	mov    %r13,%r8
	mov    %r15,%r10
	mov    %r14,%r11
	mov    -0xd8(%rbp),%r13
	mov    -0x170(%rbp),%rcx
	mov    -0xb0(%rbp),%r14
	mov    -0x1c0(%rbp),%r9
	mov    -0x148(%rbp),%rax
	mov    -0x130(%rbp),%r15
	mov    -0x168(%rbp),%rsi
	cmp    $0x5,%esi
	je     9280 <inflate+0x1a0>
	cmp    $0x6,%esi
	je     9280 <inflate+0x1a0>
	movslq 0xc(%r12),%rdx
	test   %edx,%edx
	je     9e85 <inflate+0xda5>
	mov    %rcx,%rdx
	mov    %rdx,%rcx
	and    $0x7,%ecx
	shr    %cl,%r10
	mov    %rdx,%rcx
	and    $0xfffffff8,%ecx
	movl   $0x3f4e,0x8(%r12)
	jmpq   91f6 <inflate+0x116>
	movzwl 0x298(%r12),%edx
	test   %dx,%dx
	je     9ed2 <inflate+0xdf2>
	mov    -0x188(%rbp),%rax
	mov    -0x1a0(%rbp),%rdx
	mov    %rdx,(%rax)
	mov    %rdx,0x68(%r12)
	movl   $0x9,(%rsi)
	mov    0x84(%r12),%edx
	mov    %rcx,-0x180(%rbp)
	mov    %rax,%rcx
	mov    %r11,-0x1b8(%rbp)
	mov    -0x198(%rbp),%r11
	mov    %r14,-0x148(%rbp)
	mov    %r10,-0x178(%rbp)
	mov    %r8,-0xf8(%rbp)
	mov    %rsi,%r8
	mov    %r9,%rsi
	mov    %r11,%r9
	mov    %rax,%r14
	callq  22a0 <inflate_table@plt>
	test   %eax,%eax
	jne    9ef9 <inflate+0xe19>
	mov    (%r14),%rax
	mov    %rax,0x70(%r12)
	movl   $0x6,0x7c(%r12)
	mov    0x84(%r12),%eax
	lea    0x98(%r12,%rax,2),%rsi
	mov    0x88(%r12),%edx
	mov    $0x2,%edi
	mov    %r14,%rcx
	mov    -0x1c0(%rbp),%r14
	mov    %r14,%r8
	mov    -0x198(%rbp),%r9
	callq  22a0 <inflate_table@plt>
	test   %eax,%eax
	jne    9f43 <inflate+0xe63>
	mov    -0x168(%rbp),%rsi
	cmp    $0x6,%esi
	movl   $0x3f47,0x8(%r12)
	je     9f89 <inflate+0xea9>
	mov    %r14,%r9
	mov    -0xf8(%rbp),%r8
	mov    -0x178(%rbp),%r10
	mov    -0x1b8(%rbp),%r11
	mov    -0x180(%rbp),%rcx
	mov    -0x148(%rbp),%r14
	xor    %eax,%eax
	movl   $0x3f48,0x8(%r12)
	cmp    $0x5,%r11d
	ja     9fb3 <inflate+0xed3>
	movl   $0x0,0x1bec(%r12)
	mov    %rax,-0x140(%rbp)
	mov    -0x190(%rbp),%rax
	mov    $0x1,%edx
	jmpq   a04b <inflate+0xf6b>
	test   %r11d,%r11d
	je     a0f6 <inflate+0x1016>
	lea    0x1(%r8),%rsi
	movzbl (%r8),%edx
	shl    %cl,%rdx
	add    %rdx,%r10
	add    $0x8,%ecx
	add    $0xffffffff,%r11d
	mov    %rsi,%r8
	cmp    $0x2,%ecx
	jbe    95d1 <inflate+0x4f1>
	mov    0x8c(%r12),%esi
	lea    0x1(%rsi),%edx
	mov    %edx,0x8c(%r12)
	lea    0xb523(%rip),%rdx        # 14b34 <order.1>
	movzwl (%rdx,%rsi,2),%edx
	mov    %r10,%rsi
	and    $0x7,%si
	mov    -0x1b0(%rbp),%rdi
	mov    %si,(%rdi,%rdx,2)
	shr    $0x3,%r10
	add    $0xfffffffd,%ecx
	mov    0x80(%r12),%edx
	cmp    0x8c(%r12),%edx
	ja     95f2 <inflate+0x512>
	lea    0xb4ed(%rip),%rdi        # 14b34 <order.1>
	mov    -0x1b0(%rbp),%rsi
	jmpq   a11a <inflate+0x103a>
	test   %r11d,%r11d
	je     a1eb <inflate+0x110b>
	movzbl (%r8),%edx
	shl    %cl,%rdx
	add    %rdx,%r10
	add    $0x1,%r8
	add    $0xffffffff,%r11d
	add    $0x8,%ecx
	cmp    $0xd,%ecx
	jbe    9653 <inflate+0x573>
	mov    %r10,%rdx
	and    $0x1f,%edx
	lea    0x101(%rdx),%edi
	mov    %edi,0x84(%r12)
	mov    %r10,%rdx
	shr    $0x5,%rdx
	and    $0x1f,%edx
	lea    0x1(%rdx),%esi
	mov    %esi,0x88(%r12)
	mov    %r10,%rdx
	shr    $0xa,%rdx
	and    $0xf,%edx
	add    $0x4,%edx
	mov    %edx,0x80(%r12)
	shr    $0xe,%r10
	add    $0xfffffff2,%ecx
	cmp    $0x11e,%edi
	jbe    a1f3 <inflate+0x1113>
	lea    0xb52f(%rip),%rdx        # 14bfd <order.1+0xc9>
	mov    %rdx,0x30(%rbx)
	movl   $0x3f51,0x8(%r12)
	mov    -0x168(%rbp),%rsi
	jmpq   91f6 <inflate+0x116>
	test   %r11d,%r11d
	je     a216 <inflate+0x1136>
	movzbl (%r8),%edx
	shl    %cl,%rdx
	add    %rdx,%r10
	add    $0x1,%r8
	add    $0xffffffff,%r11d
	add    $0x8,%ecx
	cmp    $0x18,%ecx
	jbe    96e7 <inflate+0x607>
	mov    %r10,%rdx
	shr    $0x10,%rdx
	xor    $0xffff,%rdx
	movzwl %r10w,%edi
	cmp    %rdi,%rdx
	jne    a21e <inflate+0x113e>
	cmp    $0x6,%esi
	movzwl %r10w,%ecx
	mov    %ecx,0x5c(%r12)
	movl   $0x3f42,0x8(%r12)
	je     a237 <inflate+0x1157>
	xor    %ecx,%ecx
	mov    %rcx,%r10
	movl   $0x3f43,0x8(%r12)
	mov    0x5c(%r12),%edx
	test   %edx,%edx
	jne    a241 <inflate+0x1161>
	movl   $0x3f3f,0x8(%r12)
	jmpq   91f6 <inflate+0x116>
	movslq 0x18(%r12),%rdx
	and    $0x200,%edx
	test   %edx,%edx
	jg     a2ee <inflate+0x120e>
	sub    %ecx,%r11d
	test   %r10b,%r10b
	mov    %ecx,%ecx
	lea    (%r8,%rcx,1),%r8
	jne    a370 <inflate+0x1290>
	mov    -0x158(%rbp),%rcx
	mov    -0x150(%rbp),%r10
	movl   $0x3f3c,0x8(%r12)
	mov    -0x168(%rbp),%rsi
	movslq 0x18(%r12),%rdx
	and    $0x200,%edx
	test   %edx,%edx
	jg     a3ab <inflate+0x12cb>
	mov    0x30(%r12),%rdx
	test   %rdx,%rdx
	je     97e5 <inflate+0x705>
	movslq 0x18(%r12),%rax
	and    $0x200,%eax
	shr    $0x9,%eax
	mov    %eax,0x44(%rdx)
	mov    0x30(%r12),%rax
	movl   $0x1,0x48(%rax)
	xor    %edx,%edx
	mov    %rdx,%rsi
	xor    %edi,%edi
	mov    %r10,-0xf0(%rbp)
	mov    %r8,-0x58(%rbp)
	mov    %r11,-0x108(%rbp)
	mov    %rcx,-0xe0(%rbp)
	callq  20d0 <crc32@plt>
	mov    %rax,0x20(%r12)
	mov    %rax,0x60(%rbx)
	movl   $0x3f3f,0x8(%r12)
	mov    -0xe0(%rbp),%rcx
	mov    -0x108(%rbp),%r11
	mov    -0x58(%rbp),%r8
	mov    -0xf0(%rbp),%r10
	mov    -0x1c0(%rbp),%r9
	mov    -0x148(%rbp),%rax
	mov    -0x168(%rbp),%rsi
	jmpq   91f6 <inflate+0x116>
	movslq 0x18(%r12),%rdx
	and    $0x200,%edx
	test   %edx,%edx
	jle    98d7 <inflate+0x7f7>
	movslq 0x10(%r12),%rdx
	and    $0x4,%edx
	test   %edx,%edx
	jle    98d7 <inflate+0x7f7>
	mov    0x20(%r12),%rdi
	mov    %r8,%rsi
	mov    %rcx,%rdx
	mov    %r15,-0x118(%rbp)
	mov    %rbx,-0x68(%rbp)
	mov    %r14,-0x90(%rbp)
	mov    %r13,-0xb8(%rbp)
	mov    %r10,%rbx
	mov    %r8,%r13
	mov    %r11,%r14
	mov    %rcx,%r15
	callq  20d0 <crc32@plt>
	mov    %rax,0x20(%r12)
	mov    %r15,%rcx
	mov    %r13,%r8
	mov    %rbx,%r10
	mov    %r14,%r11
	mov    -0xb8(%rbp),%r13
	mov    -0x90(%rbp),%r14
	mov    -0x68(%rbp),%rbx
	mov    -0x1c0(%rbp),%r9
	mov    -0x148(%rbp),%rax
	mov    -0x118(%rbp),%r15
	sub    %ecx,%r11d
	test   %r10b,%r10b
	mov    %ecx,%ecx
	lea    (%r8,%rcx,1),%r8
	jne    a3ca <inflate+0x12ea>
	mov    -0x158(%rbp),%rcx
	mov    -0x150(%rbp),%r10
	movl   $0x0,0x5c(%r12)
	movl   $0x3f3b,0x8(%r12)
	movslq 0x18(%r12),%rdx
	and    $0x1000,%edx
	test   %edx,%edx
	jg     a3e4 <inflate+0x1304>
	mov    0x30(%r12),%rdx
	test   %rdx,%rdx
	je     979c <inflate+0x6bc>
	movq   $0x0,0x38(%rdx)
	jmpq   979c <inflate+0x6bc>
	test   %r11d,%r11d
	je     a402 <inflate+0x1322>
	lea    0x1(%r8),%rsi
	movzbl (%r8),%edx
	shl    %cl,%rdx
	add    %rdx,%r10
	add    $0x8,%ecx
	add    $0xffffffff,%r11d
	mov    %rsi,%r8
	cmp    $0xf,%ecx
	jbe    9937 <inflate+0x857>
	mov    0x30(%r12),%rcx
	test   %rcx,%rcx
	je     997d <inflate+0x89d>
	movzbl %r10b,%edx
	mov    %edx,0x10(%rcx)
	mov    %r10,%rdx
	shr    $0x8,%rdx
	mov    0x30(%r12),%rcx
	mov    %edx,0x14(%rcx)
	movslq 0x18(%r12),%rcx
	and    $0x200,%ecx
	test   %ecx,%ecx
	jle    99fb <inflate+0x91b>
	movslq 0x10(%r12),%rcx
	and    $0x4,%ecx
	test   %ecx,%ecx
	jle    99fb <inflate+0x91b>
	mov    %r10b,-0x1c4(%rbp)
	shr    $0x8,%r10
	mov    %r10b,-0x1c3(%rbp)
	mov    0x20(%r12),%rdi
	lea    -0x1c4(%rbp),%rsi
	mov    $0x2,%edx
	mov    %r14,-0xa0(%rbp)
	mov    %r13,-0xc8(%rbp)
	mov    %r8,%r13
	mov    %r11,%r14
	callq  20d0 <crc32@plt>
	mov    %rax,0x20(%r12)
	mov    %r13,%r8
	mov    %r14,%r11
	mov    -0xc8(%rbp),%r13
	mov    -0xa0(%rbp),%r14
	mov    -0x1c0(%rbp),%r9
	mov    -0x148(%rbp),%rax
	movl   $0x3f38,0x8(%r12)
	xor    %ecx,%ecx
	mov    %rcx,%r10
	movslq 0x18(%r12),%rdx
	and    $0x400,%edx
	test   %edx,%edx
	jg     a432 <inflate+0x1352>
	mov    0x30(%r12),%rdx
	test   %rdx,%rdx
	je     9a2e <inflate+0x94e>
	movq   $0x0,0x18(%rdx)
	movl   $0x3f39,0x8(%r12)
	movslq 0x18(%r12),%rdx
	and    $0x400,%edx
	test   %edx,%edx
	jg     a467 <inflate+0x1387>
	movl   $0x0,0x5c(%r12)
	movl   $0x3f3a,0x8(%r12)
	movslq 0x18(%r12),%rdx
	and    $0x800,%edx
	test   %edx,%edx
	jg     a47d <inflate+0x139d>
	mov    0x30(%r12),%rdx
	test   %rdx,%rdx
	je     98f7 <inflate+0x817>
	movq   $0x0,0x28(%rdx)
	jmpq   98f7 <inflate+0x817>
	test   %r11d,%r11d
	je     a49b <inflate+0x13bb>
	lea    0x1(%r8),%rsi
	movzbl (%r8),%edx
	shl    %cl,%rdx
	add    %rdx,%r10
	add    $0x8,%ecx
	add    $0xffffffff,%r11d
	mov    %rsi,%r8
	cmp    $0x1f,%ecx
	jbe    9a8a <inflate+0x9aa>
	mov    0x30(%r12),%rcx
	test   %rcx,%rcx
	je     9abe <inflate+0x9de>
	mov    %r10,0x8(%rcx)
	movslq 0x18(%r12),%rcx
	and    $0x200,%ecx
	test   %ecx,%ecx
	jg     a4aa <inflate+0x13ca>
	movl   $0x3f37,0x8(%r12)
	xor    %ecx,%ecx
	mov    %rcx,%r10
	jmpq   9958 <inflate+0x878>
	test   %r11d,%r11d
	je     a54a <inflate+0x146a>
	movzbl (%r8),%edx
	shl    %cl,%rdx
	add    %rdx,%r10
	add    $0x1,%r8
	add    $0xffffffff,%r11d
	add    $0x8,%ecx
	cmp    $0xf,%ecx
	jbe    9ae4 <inflate+0xa04>
	mov    %r10d,0x18(%r12)
	movzbl %r10b,%edx
	cmp    $0x8,%edx
	jne    a552 <inflate+0x1472>
	mov    %r10,%rdx
	and    $0xe000,%edx
	test   %edx,%edx
	jg     a56b <inflate+0x148b>
	mov    0x30(%r12),%rcx
	test   %rcx,%rcx
	je     9b40 <inflate+0xa60>
	mov    %r10,%rax
	shr    $0x8,%rax
	and    $0x1,%eax
	mov    %eax,(%rcx)
	movslq 0x18(%r12),%rax
	and    $0x200,%eax
	test   %eax,%eax
	jg     a584 <inflate+0x14a4>
	mov    %r15,-0x128(%rbp)
	mov    %r14,-0xa8(%rbp)
	mov    %r13,-0xd0(%rbp)
	movl   $0x3f36,0x8(%r12)
	mov    -0xd0(%rbp),%r13
	mov    -0xa8(%rbp),%r14
	mov    -0x148(%rbp),%rax
	mov    -0x128(%rbp),%r15
	xor    %ecx,%ecx
	mov    %rcx,%r10
	jmpq   9aab <inflate+0x9cb>
	mov    -0x8(%rbp),%rbx
	mov    -0x10(%rbp),%r12
	mov    -0x18(%rbp),%r13
	mov    -0x20(%rbp),%r14
	mov    $0xfffffffffffffffc,%rax
	mov    -0x28(%rbp),%r15
	leaveq 
	retq   
	mov    -0x8(%rbp),%rbx
	mov    -0x10(%rbp),%r12
	mov    -0x18(%rbp),%r13
	mov    -0x20(%rbp),%r14
	mov    $0xfffffffffffffffe,%rax
	mov    -0x28(%rbp),%r15
	leaveq 
	retq   
	mov    $0x1,%eax
	jmpq   9280 <inflate+0x1a0>
	mov    $0xfffffffffffffffd,%rax
	jmpq   9280 <inflate+0x1a0>
	movslq 0x10(%r12),%rdx
	test   %edx,%edx
	jne    a5cc <inflate+0x14ec>
	movl   $0x3f40,0x8(%r12)
	jmpq   91f6 <inflate+0x116>
	mov    %rcx,%rdx
	mov    %rdx,%rcx
	and    $0x7,%ecx
	shr    %cl,%r10
	mov    %rdx,%rcx
	and    $0xfffffff8,%ecx
	jmpq   9705 <inflate+0x625>
	mov    %r14,-0x110(%rbp)
	mov    -0x190(%rbp),%rsi
	mov    $0x1,%edi
	jmpq   a65f <inflate+0x157f>
	mov    $0x1,%edx
	mov    0x64(%r12),%esi
	test   %esi,%esi
	jne    a6d7 <inflate+0x15f7>
	mov    0x5c(%r12),%esi
	mov    %esi,0x1bf0(%r12)
	movl   $0x3f4a,0x8(%r12)
	jmpq   a73e <inflate+0x165e>
	mov    $0x1,%edx
	jmpq   a73e <inflate+0x165e>
	mov    $0x1,%edx
	mov    0x64(%r12),%esi
	test   %esi,%esi
	jne    a7f4 <inflate+0x1714>
	movl   $0x3f4c,0x8(%r12)
	mov    %rbx,%rdi
	mov    -0x168(%rbp),%rsi
	test   %r13d,%r13d
	je     a837 <inflate+0x1757>
	mov    %r14,%rbx
	sub    %r13d,%ebx
	mov    0x60(%r12),%edx
	cmp    %ebx,%edx
	ja     a83f <inflate+0x175f>
	mov    0x5c(%r12),%ebx
	neg    %rdx
	add    %r15,%rdx
	cmp    %ebx,%r13d
	jae    9cbb <inflate+0xbdb>
	mov    %r13,%rbx
	mov    %rdi,-0x80(%rbp)
	mov    0x5c(%r12),%edi
	sub    %ebx,%edi
	mov    %edi,0x5c(%r12)
	mov    %rcx,-0xe8(%rbp)
	mov    %rbx,%rcx
	jmpq   a873 <inflate+0x1793>
	mov    %rbx,%rdi
	jmp    9c8c <inflate+0xbac>
	test   %r13d,%r13d
	je     9280 <inflate+0x1a0>
	movzbl 0x5c(%r12),%edx
	mov    %dl,(%r15)
	movl   $0x3f48,0x8(%r12)
	add    $0x1,%r15
	add    $0xffffffff,%r13d
	jmpq   91f6 <inflate+0x116>
	movslq 0x10(%r12),%rdx
	test   %edx,%edx
	jne    a8c5 <inflate+0x17e5>
	movl   $0x3f4f,0x8(%r12)
	jmpq   9255 <inflate+0x175>
	test   %r11d,%r11d
	je     a914 <inflate+0x1834>
	lea    0x1(%r8),%rsi
	movzbl (%r8),%edx
	shl    %cl,%rdx
	add    %rdx,%r10
	add    $0xffffffff,%r11d
	add    $0x8,%ecx
	mov    %rsi,%r8
	cmp    $0x1f,%ecx
	jbe    9d22 <inflate+0xc42>
	mov    0x28(%r12),%edx
	cmp    %rdx,%r10
	je     a923 <inflate+0x1843>
	lea    0xafb3(%rip),%rdx        # 14d10 <order.1+0x1dc>
	mov    %rdx,0x30(%rbx)
	movl   $0x3f51,0x8(%r12)
	mov    -0x168(%rbp),%rsi
	jmpq   91f6 <inflate+0x116>
	mov    0x20(%rbx),%ecx
	cmp    %r14d,%ecx
	je     92ce <inflate+0x1ee>
	mov    0x8(%r12),%ecx
	cmp    $0x3f50,%ecx
	ja     92ce <inflate+0x1ee>
	cmp    $0x3f4d,%ecx
	jbe    92a6 <inflate+0x1c6>
	cmp    $0x4,%esi
	jne    92a6 <inflate+0x1c6>
	jmpq   92ce <inflate+0x1ee>
	movl   $0x3f52,0x8(%r12)
	mov    -0x8(%rbp),%rbx
	mov    -0x10(%rbp),%r12
	mov    -0x18(%rbp),%r13
	mov    -0x20(%rbp),%r14
	mov    $0xfffffffffffffffc,%rax
	mov    -0x28(%rbp),%r15
	leaveq 
	retq   
	mov    0x18(%rbx),%rsi
	mov    %edx,%ecx
	sub    %rcx,%rsi
	mov    0x20(%r12),%rdi
	mov    %r8,-0x1c0(%rbp)
	mov    %rax,-0x1b0(%rbp)
	callq  20d0 <crc32@plt>
	mov    %rax,0x20(%r12)
	mov    %rax,0x60(%rbx)
	mov    -0x1b0(%rbp),%rax
	mov    -0x1c0(%rbp),%r8
	mov    -0x168(%rbp),%rsi
	movslq 0x58(%r12),%r10
	movslq 0xc(%r12),%rcx
	test   %ecx,%ecx
	jne    a92d <inflate+0x184d>
	xor    %edx,%edx
	jmpq   a932 <inflate+0x1852>
	xor    %r11d,%r11d
	jmpq   9280 <inflate+0x1a0>
	mov    %r15,0x18(%rbx)
	mov    %r13d,0x20(%rbx)
	mov    %r8,(%rbx)
	mov    %r11d,0x8(%rbx)
	mov    %r10,0x50(%r12)
	mov    %ecx,0x58(%r12)
	mov    -0x8(%rbp),%rbx
	mov    -0x10(%rbp),%r12
	mov    -0x18(%rbp),%r13
	mov    -0x20(%rbp),%r14
	mov    $0x2,%eax
	mov    -0x28(%rbp),%r15
	leaveq 
	retq   
	test   %r11d,%r11d
	je     a94b <inflate+0x186b>
	movzbl (%r8),%edx
	shl    %cl,%rdx
	add    %rdx,%r10
	add    $0x1,%r8
	add    $0xffffffff,%r11d
	add    $0x8,%ecx
	cmp    $0x2,%ecx
	jbe    9e67 <inflate+0xd87>
	mov    %r10,%rdx
	and    $0x1,%edx
	mov    %edx,0xc(%r12)
	mov    %r10,%rdx
	shr    %rdx
	and    $0x3,%edx
	cmp    $0x1,%edx
	jbe    a953 <inflate+0x1873>
	cmp    $0x2,%edx
	je     a9db <inflate+0x18fb>
	cmp    $0x3,%edx
	jne    a9ef <inflate+0x190f>
	lea    0xad0d(%rip),%rdx        # 14bcd <order.1+0x99>
	mov    %rdx,0x30(%rbx)
	movl   $0x3f51,0x8(%r12)
	jmpq   a9ef <inflate+0x190f>
	lea    0xad7b(%rip),%rdx        # 14c54 <order.1+0x120>
	mov    %rdx,0x30(%rbx)
	movl   $0x3f51,0x8(%r12)
	mov    -0x1c0(%rbp),%r9
	mov    -0x168(%rbp),%rsi
	jmpq   91f6 <inflate+0x116>
	lea    0xad79(%rip),%rcx        # 14c79 <order.1+0x145>
	mov    %rcx,0x30(%rbx)
	movl   $0x3f51,0x8(%r12)
	mov    -0xf8(%rbp),%r8
	mov    -0x178(%rbp),%r10
	mov    -0x1b8(%rbp),%r11
	mov    -0x180(%rbp),%rcx
	mov    -0x148(%rbp),%r14
	mov    -0x1c0(%rbp),%r9
	mov    -0x168(%rbp),%rsi
	jmpq   91f6 <inflate+0x116>
	lea    0xad4b(%rip),%rcx        # 14c95 <order.1+0x161>
	mov    %rcx,0x30(%rbx)
	movl   $0x3f51,0x8(%r12)
	mov    %r14,%r9
	mov    -0xf8(%rbp),%r8
	mov    -0x178(%rbp),%r10
	mov    -0x1b8(%rbp),%r11
	mov    -0x180(%rbp),%rcx
	mov    -0x148(%rbp),%r14
	mov    -0x168(%rbp),%rsi
	jmpq   91f6 <inflate+0x116>
	mov    -0xf8(%rbp),%r8
	mov    -0x178(%rbp),%r10
	mov    -0x1b8(%rbp),%r11
	mov    -0x180(%rbp),%rcx
	mov    -0x148(%rbp),%r14
	xor    %eax,%eax
	jmpq   9280 <inflate+0x1a0>
	cmp    $0x101,%r13d
	jbe    95ad <inflate+0x4cd>
	mov    %r15,0x18(%rbx)
	mov    %r13d,0x20(%rbx)
	mov    %r8,(%rbx)
	mov    %r11d,0x8(%rbx)
	mov    %r10,0x50(%r12)
	mov    %ecx,0x58(%r12)
	mov    %r9,%r13
	mov    %rax,%r15
	mov    %rbx,%rdi
	mov    %r14,%rsi
	callq  2220 <inflate_fast@plt>
	mov    0x18(%rbx),%rdx
	mov    0x20(%rbx),%edi
	mov    (%rbx),%r8
	mov    0x8(%rbx),%r11d
	mov    0x50(%r12),%r10
	mov    0x58(%r12),%ecx
	mov    0x8(%r12),%eax
	cmp    $0x3f3f,%eax
	je     a9fb <inflate+0x191b>
	mov    %r15,%rax
	mov    %rdx,%r15
	mov    %r13,%r9
	mov    %rdi,%r13
	mov    -0x168(%rbp),%rsi
	jmpq   91f6 <inflate+0x116>
	test   %r11d,%r11d
	je     aa1f <inflate+0x193f>
	mov    %rdi,%rcx
	movzbl (%r8),%esi
	shl    %cl,%rsi
	add    %rsi,%r10
	add    $0x1,%r8
	add    $0x8,%ecx
	add    $0xffffffff,%r11d
	mov    %rcx,%rdi
	mov    (%rax),%ecx
	mov    %rdx,%rsi
	shl    %cl,%esi
	lea    -0x1(%rsi),%ecx
	and    %r10d,%ecx
	mov    %ecx,%ecx
	mov    0x68(%r12),%rsi
	mov    (%rsi,%rcx,4),%esi
	mov    %esi,-0x1cc(%rbp)
	mov    %rsi,%rcx
	shr    $0x8,%ecx
	movzbl %cl,%ecx
	cmp    %ecx,%edi
	jb     a02a <inflate+0xf4a>
	test   %sil,%sil
	jne    aa38 <inflate+0x1958>
	movzbl -0x1cb(%rbp),%ecx
	mov    %rcx,%rax
	add    0x1bec(%r12),%eax
	mov    %eax,0x1bec(%r12)
	movzwl -0x1ca(%rbp),%eax
	mov    %eax,0x5c(%r12)
	shr    %cl,%r10
	neg    %ecx
	add    %edi,%ecx
	movzbl -0x1cc(%rbp),%eax
	test   %al,%al
	je     aa54 <inflate+0x1974>
	mov    %rax,%rsi
	and    $0x20,%esi
	test   %esi,%esi
	jg     aa70 <inflate+0x1990>
	mov    %rax,%rsi
	and    $0x40,%esi
	test   %esi,%esi
	jg     aa98 <inflate+0x19b8>
	and    $0xf,%eax
	mov    %eax,0x64(%r12)
	movl   $0x3f49,0x8(%r12)
	mov    -0x140(%rbp),%rax
	jmpq   9c35 <inflate+0xb55>
	xor    %r11d,%r11d
	mov    -0x168(%rbp),%rsi
	jmpq   9280 <inflate+0x1a0>
	lea    0x1(%rdx),%eax
	mov    %eax,0x8c(%r12)
	movzwl (%rdi,%rdx,2),%eax
	movw   $0x0,(%rsi,%rax,2)
	mov    0x8c(%r12),%edx
	cmp    $0x12,%edx
	jbe    a105 <inflate+0x1025>
	mov    -0x1a0(%rbp),%rax
	mov    %rax,0x90(%r12)
	mov    %rax,0x68(%r12)
	movl   $0x7,0x78(%r12)
	xor    %r9d,%r9d
	mov    $0x13,%edx
	mov    -0x188(%rbp),%rax
	mov    -0x190(%rbp),%rdi
	mov    %rcx,-0x180(%rbp)
	mov    -0x198(%rbp),%rcx
	mov    %r10,-0xf8(%rbp)
	mov    %r8,-0xe8(%rbp)
	mov    %r11,-0x108(%rbp)
	mov    %rdi,%r8
	mov    %r9,%rdi
	mov    %rcx,%r9
	mov    %rax,%rcx
	callq  22a0 <inflate_table@plt>
	test   %eax,%eax
	jne    aabf <inflate+0x19df>
	movl   $0x0,0x8c(%r12)
	movl   $0x3f46,0x8(%r12)
	mov    %r14,-0x110(%rbp)
	mov    -0x108(%rbp),%r11
	mov    -0xe8(%rbp),%r8
	mov    -0xf8(%rbp),%r10
	mov    -0x180(%rbp),%rcx
	mov    -0x190(%rbp),%rsi
	mov    $0x1,%edi
	pushq  -0x138(%rbp)
	popq   -0x148(%rbp)
	jmpq   a65f <inflate+0x157f>
	xor    %r11d,%r11d
	jmpq   9280 <inflate+0x1a0>
	cmp    $0x1e,%esi
	ja     96c7 <inflate+0x5e7>
	movl   $0x0,0x8c(%r12)
	movl   $0x3f45,0x8(%r12)
	jmpq   962e <inflate+0x54e>
	xor    %r11d,%r11d
	jmpq   9280 <inflate+0x1a0>
	lea    0xa9bb(%rip),%rdx        # 14be0 <order.1+0xac>
	mov    %rdx,0x30(%rbx)
	movl   $0x3f51,0x8(%r12)
	jmpq   91f6 <inflate+0x116>
	xor    %ecx,%ecx
	mov    %rcx,%r10
	jmpq   9280 <inflate+0x1a0>
	cmp    %r11d,%edx
	jbe    a249 <inflate+0x1169>
	mov    %r11,%rdx
	cmp    %edx,%r13d
	jae    a251 <inflate+0x1171>
	mov    %r13,%rdx
	test   %edx,%edx
	je     9280 <inflate+0x1a0>
	mov    %edx,%eax
	mov    %rbx,-0x78(%rbp)
	mov    %rax,-0x130(%rbp)
	mov    %r15,%rdi
	mov    %r8,%rsi
	mov    %r14,-0xb0(%rbp)
	mov    %r8,-0x60(%rbp)
	mov    %r10,-0xf0(%rbp)
	mov    %rcx,-0xe0(%rbp)
	mov    %r11,%rbx
	mov    %rdx,%r14
	mov    %rax,%rdx
	callq  21f0 <memcpy@plt>
	sub    %r14d,%r13d
	mov    %rbx,%r11
	sub    %r14d,%r11d
	mov    0x5c(%r12),%eax
	sub    %r14d,%eax
	mov    %eax,0x5c(%r12)
	mov    -0x130(%rbp),%rax
	add    %rax,%r15
	mov    -0x60(%rbp),%rcx
	lea    (%rcx,%rax,1),%r8
	mov    -0xe0(%rbp),%rcx
	mov    -0xf0(%rbp),%r10
	mov    -0xb0(%rbp),%r14
	mov    -0x78(%rbp),%rbx
	mov    -0x1c0(%rbp),%r9
	mov    -0x148(%rbp),%rax
	mov    -0x168(%rbp),%rsi
	jmpq   91f6 <inflate+0x116>
	movslq 0x10(%r12),%rdx
	and    $0x4,%edx
	test   %edx,%edx
	jle    977c <inflate+0x69c>
	mov    0x20(%r12),%rdi
	mov    %r8,%rsi
	mov    %rcx,%rdx
	mov    %r15,-0x118(%rbp)
	mov    %rbx,-0x68(%rbp)
	mov    %r14,-0x90(%rbp)
	mov    %r13,-0xb8(%rbp)
	mov    %r10,%rbx
	mov    %r8,%r13
	mov    %r11,%r14
	mov    %rcx,%r15
	callq  20d0 <crc32@plt>
	mov    %rax,0x20(%r12)
	mov    %r15,%rcx
	mov    %r13,%r8
	mov    %rbx,%r10
	mov    %r14,%r11
	mov    -0xb8(%rbp),%r13
	mov    -0x90(%rbp),%r14
	mov    -0x68(%rbp),%rbx
	mov    -0x1c0(%rbp),%r9
	mov    -0x148(%rbp),%rax
	mov    -0x118(%rbp),%r15
	jmpq   977c <inflate+0x69c>
	mov    -0x158(%rbp),%rcx
	mov    -0x150(%rbp),%r10
	mov    -0x168(%rbp),%rsi
	jmpq   9280 <inflate+0x1a0>
	test   %r11d,%r11d
	je     ab02 <inflate+0x1a22>
	lea    0x1(%r8),%rdi
	movzbl (%r8),%edx
	shl    %cl,%rdx
	add    %rdx,%r10
	add    $0xffffffff,%r11d
	add    $0x8,%ecx
	mov    %rdi,%r8
	cmp    $0xf,%ecx
	jbe    a38a <inflate+0x12aa>
	movslq 0x10(%r12),%rdx
	and    $0x4,%edx
	test   %edx,%edx
	jg     ab0a <inflate+0x1a2a>
	xor    %ecx,%ecx
	mov    %rcx,%r10
	jmpq   97bf <inflate+0x6df>
	mov    -0x158(%rbp),%rcx
	mov    -0x150(%rbp),%r10
	mov    -0x168(%rbp),%rsi
	jmpq   9280 <inflate+0x1a0>
	test   %r11d,%r11d
	je     ab23 <inflate+0x1a43>
	mov    %r10,-0x150(%rbp)
	mov    %rcx,-0x158(%rbp)
	xor    %ecx,%ecx
	jmpq   ab68 <inflate+0x1a88>
	xor    %r11d,%r11d
	mov    -0x168(%rbp),%rsi
	jmpq   9280 <inflate+0x1a0>
	test   %r11d,%r11d
	je     ab7b <inflate+0x1a9b>
	lea    0x1(%r8),%rsi
	movzbl (%r8),%edx
	shl    %cl,%rdx
	add    %rdx,%r10
	add    $0x8,%ecx
	add    $0xffffffff,%r11d
	mov    %rsi,%r8
	cmp    $0xf,%ecx
	jbe    a411 <inflate+0x1331>
	mov    %r10d,0x5c(%r12)
	mov    0x30(%r12),%rcx
	test   %rcx,%rcx
	je     a44a <inflate+0x136a>
	mov    %r10d,0x20(%rcx)
	movslq 0x18(%r12),%rcx
	and    $0x200,%ecx
	test   %ecx,%ecx
	jg     ab8a <inflate+0x1aaa>
	xor    %ecx,%ecx
	mov    %rcx,%r10
	jmpq   9a2e <inflate+0x94e>
	mov    0x5c(%r12),%esi
	cmp    %esi,%r11d
	jb     aba4 <inflate+0x1ac4>
	mov    %rsi,%rdx
	jmpq   aba7 <inflate+0x1ac7>
	test   %r11d,%r11d
	je     abf9 <inflate+0x1b19>
	mov    %r10,-0x150(%rbp)
	mov    %rcx,-0x158(%rbp)
	xor    %ecx,%ecx
	jmpq   ac1d <inflate+0x1b3d>
	xor    %r11d,%r11d
	mov    -0x168(%rbp),%rsi
	jmpq   9280 <inflate+0x1a0>
	movslq 0x10(%r12),%rcx
	and    $0x4,%ecx
	test   %ecx,%ecx
	jle    9ad1 <inflate+0x9f1>
	mov    %r10b,-0x1c4(%rbp)
	mov    %r10,%rax
	shr    $0x8,%rax
	mov    %al,-0x1c3(%rbp)
	mov    %r10,%rax
	shr    $0x10,%rax
	mov    %al,-0x1c2(%rbp)
	shr    $0x18,%r10
	mov    %r10b,-0x1c1(%rbp)
	mov    0x20(%r12),%rdi
	lea    -0x1c4(%rbp),%rsi
	mov    $0x4,%edx
	mov    %r15,-0x128(%rbp)
	mov    %r14,-0xa8(%rbp)
	mov    %r13,-0xd0(%rbp)
	mov    %r8,%r13
	mov    %r11,%r14
	callq  20d0 <crc32@plt>
	mov    %rax,0x20(%r12)
	mov    %r13,%r8
	mov    %r14,%r11
	mov    -0xd0(%rbp),%r13
	mov    -0xa8(%rbp),%r14
	mov    -0x1c0(%rbp),%r9
	mov    -0x148(%rbp),%rax
	mov    -0x128(%rbp),%r15
	jmpq   9ad1 <inflate+0x9f1>
	xor    %r11d,%r11d
	jmpq   9280 <inflate+0x1a0>
	lea    0xa618(%rip),%rdx        # 14b71 <order.1+0x3d>
	mov    %rdx,0x30(%rbx)
	movl   $0x3f51,0x8(%r12)
	jmpq   91f6 <inflate+0x116>
	lea    0xa62e(%rip),%rdx        # 14ba0 <order.1+0x6c>
	mov    %rdx,0x30(%rbx)
	movl   $0x3f51,0x8(%r12)
	jmpq   91f6 <inflate+0x116>
	movslq 0x10(%r12),%rax
	and    $0x4,%eax
	test   %eax,%eax
	jg     ac51 <inflate+0x1b71>
	mov    %r15,-0x128(%rbp)
	mov    %r14,-0xa8(%rbp)
	mov    %r13,-0xd0(%rbp)
	jmpq   9b67 <inflate+0xa87>
	test   %r11d,%r11d
	je     acab <inflate+0x1bcb>
	movzbl (%r8),%edx
	shl    %cl,%rdx
	add    %rdx,%r10
	add    $0x1,%r8
	add    $0xffffffff,%r11d
	add    $0x8,%ecx
	cmp    $0xf,%ecx
	jbe    a5ae <inflate+0x14ce>
	movslq 0x10(%r12),%rdx
	and    $0x2,%edx
	test   %edx,%edx
	jg     acb3 <inflate+0x1bd3>
	movl   $0x0,0x18(%r12)
	mov    0x30(%r12),%rdx
	test   %rdx,%rdx
	je     a5fb <inflate+0x151b>
	movl   $0xffffffff,0x48(%rdx)
	movslq 0x10(%r12),%rdx
	and    $0x1,%edx
	test   %edx,%edx
	jg     ad50 <inflate+0x1c70>
	lea    0xa548(%rip),%rdx        # 14b5a <order.1+0x26>
	mov    %rdx,0x30(%rbx)
	movl   $0x3f51,0x8(%r12)
	jmpq   91f6 <inflate+0x116>
	mov    %rbx,-0x178(%rbp)
	mov    0x8c(%r12),%eax
	mov    %r14,-0x110(%rbp)
	lea    0x1(%rax),%ebx
	mov    %ebx,0x8c(%r12)
	shr    %cl,%r10
	neg    %ecx
	add    %r9d,%ecx
	mov    -0x1b0(%rbp),%rbx
	mov    %dx,(%rbx,%rax,2)
	mov    -0x178(%rbp),%rbx
	mov    0x88(%r12),%eax
	add    0x84(%r12),%eax
	cmp    0x8c(%r12),%eax
	ja     ad88 <inflate+0x1ca8>
	mov    -0x110(%rbp),%r14
	mov    -0x148(%rbp),%rax
	mov    -0x1b0(%rbp),%r9
	mov    0x8(%r12),%edx
	cmp    $0x3f51,%edx
	jne    948e <inflate+0x3ae>
	mov    -0x1c0(%rbp),%r9
	mov    -0x168(%rbp),%rsi
	jmpq   91f6 <inflate+0x116>
	test   %r11d,%r11d
	je     ad9b <inflate+0x1cbb>
	lea    0x1(%r8),%rdi
	movzbl (%r8),%esi
	shl    %cl,%rsi
	add    %rsi,%r10
	add    $0x8,%ecx
	add    $0xffffffff,%r11d
	mov    %rdi,%r8
	mov    0x64(%r12),%esi
	cmp    %ecx,%esi
	ja     a6b6 <inflate+0x15d6>
	mov    %rsi,%rdi
	mov    %rcx,%rsi
	mov    %rdi,%rcx
	mov    %rdx,%rdi
	shl    %cl,%edi
	add    $0xffffffff,%edi
	and    %r10d,%edi
	add    0x5c(%r12),%edi
	mov    %edi,0x5c(%r12)
	mov    %rcx,%rdi
	add    0x1bec(%r12),%edi
	mov    %edi,0x1bec(%r12)
	shr    %cl,%r10
	neg    %ecx
	add    %esi,%ecx
	jmpq   9c42 <inflate+0xb62>
	test   %r11d,%r11d
	je     adaa <inflate+0x1cca>
	mov    %rdi,%rcx
	movzbl (%r8),%esi
	shl    %cl,%rsi
	add    %rsi,%r10
	add    $0x1,%r8
	add    $0x8,%ecx
	add    $0xffffffff,%r11d
	mov    %rcx,%rdi
	mov    (%r9),%ecx
	mov    %rdx,%rsi
	shl    %cl,%esi
	lea    -0x1(%rsi),%ecx
	and    %r10d,%ecx
	mov    %ecx,%ecx
	mov    0x70(%r12),%rsi
	mov    (%rsi,%rcx,4),%esi
	mov    %esi,-0x1cc(%rbp)
	mov    %rsi,%rcx
	shr    $0x8,%ecx
	movzbl %cl,%ecx
	cmp    %ecx,%edi
	jb     a71d <inflate+0x163d>
	movzbl %sil,%ecx
	and    $0xf0,%ecx
	test   %ecx,%ecx
	je     adbc <inflate+0x1cdc>
	movzbl -0x1cb(%rbp),%ecx
	mov    %rcx,%rsi
	add    0x1bec(%r12),%esi
	mov    %esi,0x1bec(%r12)
	shr    %cl,%r10
	neg    %ecx
	add    %edi,%ecx
	movzbl -0x1cc(%rbp),%esi
	mov    %rsi,%rdi
	and    $0x40,%edi
	test   %edi,%edi
	jg     adce <inflate+0x1cee>
	movzwl -0x1ca(%rbp),%edi
	mov    %edi,0x60(%r12)
	and    $0xf,%esi
	mov    %esi,0x64(%r12)
	movl   $0x3f4b,0x8(%r12)
	jmpq   9c6c <inflate+0xb8c>
	test   %r11d,%r11d
	je     adee <inflate+0x1d0e>
	movzbl (%r8),%esi
	shl    %cl,%rsi
	add    %rsi,%r10
	add    $0x1,%r8
	add    $0x8,%ecx
	add    $0xffffffff,%r11d
	mov    0x64(%r12),%esi
	cmp    %ecx,%esi
	ja     a7d6 <inflate+0x16f6>
	mov    %rsi,%rdi
	mov    %rcx,%rsi
	mov    %rdi,%rcx
	shl    %cl,%edx
	add    $0xffffffff,%edx
	and    %r10d,%edx
	add    0x60(%r12),%edx
	mov    %edx,0x60(%r12)
	mov    %rcx,%rdx
	add    0x1bec(%r12),%edx
	mov    %edx,0x1bec(%r12)
	shr    %cl,%r10
	neg    %ecx
	add    %esi,%ecx
	jmpq   9c79 <inflate+0xb99>
	mov    %rdi,%rbx
	jmpq   9280 <inflate+0x1a0>
	mov    %r13,%rbx
	sub    %r14d,%ebx
	add    %edx,%ebx
	mov    0x40(%r12),%edx
	cmp    %ebx,%edx
	jb     adfd <inflate+0x1d1d>
	mov    0x44(%r12),%edx
	cmp    %edx,%ebx
	ja     ae29 <inflate+0x1d49>
	sub    %ebx,%edx
	mov    %edx,%edx
	add    0x48(%r12),%rdx
	jmpq   ae4d <inflate+0x1d6d>
	add    $0x1,%rdx
	movzbl (%rdx),%edi
	mov    %dil,(%r15)
	add    $0x1,%r15
	add    $0xffffffff,%ecx
	test   %ecx,%ecx
	jne    a86f <inflate+0x178f>
	sub    %ebx,%r13d
	mov    0x5c(%r12),%ecx
	test   %ecx,%ecx
	je     ae67 <inflate+0x1d87>
	mov    -0xe8(%rbp),%rcx
	mov    -0x80(%rbp),%rbx
	jmpq   91f6 <inflate+0x116>
	test   %r11d,%r11d
	je     ae80 <inflate+0x1da0>
	lea    0x1(%r8),%rdi
	movzbl (%r8),%edx
	shl    %cl,%rdx
	add    %rdx,%r10
	add    $0xffffffff,%r11d
	add    $0x8,%ecx
	mov    %rdi,%r8
	cmp    $0x1f,%ecx
	jbe    a8a4 <inflate+0x17c4>
	mov    %r14,%rdx
	sub    %r13d,%edx
	mov    %edx,%esi
	mov    %rsi,%rdi
	add    0x28(%rbx),%rdi
	mov    %rdi,0x28(%rbx)
	add    0x28(%r12),%rsi
	mov    %rsi,0x28(%r12)
	movslq 0x10(%r12),%rsi
	and    $0x4,%esi
	test   %esi,%esi
	jg     ae88 <inflate+0x1da8>
	movslq 0x10(%r12),%rdx
	and    $0x4,%edx
	test   %edx,%edx
	jg     aed6 <inflate+0x1df6>
	xor    %ecx,%ecx
	mov    %rcx,%r10
	mov    %r13,%r14
	jmpq   9d14 <inflate+0xc34>
	xor    %r11d,%r11d
	mov    -0x168(%rbp),%rsi
	jmpq   9280 <inflate+0x1a0>
	xor    %ecx,%ecx
	mov    %rcx,%r10
	jmpq   926b <inflate+0x18b>
	mov    $0x40,%edx
	mov    0x8(%r12),%r9d
	cmp    $0x3f3f,%r9d
	je     af01 <inflate+0x1e21>
	xor    %ecx,%ecx
	jmpq   af06 <inflate+0x1e26>
	xor    %r11d,%r11d
	jmpq   9280 <inflate+0x1a0>
	test   %edx,%edx
	je     a9e6 <inflate+0x1906>
	cmp    $0x1,%edx
	jne    a9ef <inflate+0x190f>
	mov    %r12,%rdi
	mov    %rbx,-0x78(%rbp)
	mov    %r14,-0xa8(%rbp)
	mov    %r13,-0xd8(%rbp)
	mov    %r8,-0x58(%rbp)
	mov    %r11,-0x110(%rbp)
	mov    %r10,%rbx
	mov    %rcx,%r13
	mov    %rsi,%r14
	callq  c380 <fixedtables>
	cmp    $0x6,%r14d
	movl   $0x3f47,0x8(%r12)
	je     af61 <inflate+0x1e81>
	mov    %r13,%rcx
	mov    %r14,%rsi
	mov    %rbx,%r10
	mov    -0x110(%rbp),%r11
	mov    -0x58(%rbp),%r8
	mov    -0xd8(%rbp),%r13
	mov    -0xa8(%rbp),%r14
	mov    -0x78(%rbp),%rbx
	mov    -0x1c0(%rbp),%r9
	mov    -0x148(%rbp),%rax
	jmp    a9ef <inflate+0x190f>
	movl   $0x3f44,0x8(%r12)
	jmp    a9ef <inflate+0x190f>
	movl   $0x3f41,0x8(%r12)
	shr    $0x3,%r10
	add    $0xfffffffd,%ecx
	jmpq   91f6 <inflate+0x116>
	movl   $0xffffffff,0x1bec(%r12)
	mov    %r15,%rax
	mov    %rdx,%r15
	mov    %r13,%r9
	mov    %rdi,%r13
	mov    -0x168(%rbp),%rsi
	jmpq   91f6 <inflate+0x116>
	mov    %rdi,%rcx
	mov    -0x140(%rbp),%rax
	xor    %r11d,%r11d
	mov    -0x168(%rbp),%rsi
	jmpq   9280 <inflate+0x1a0>
	movzbl %sil,%eax
	and    $0xf0,%eax
	test   %eax,%eax
	jne    a081 <inflate+0xfa1>
	mov    %esi,-0x1c8(%rbp)
	jmpq   afb9 <inflate+0x1ed9>
	movl   $0x3f4d,0x8(%r12)
	mov    -0x140(%rbp),%rax
	mov    -0x168(%rbp),%rsi
	jmpq   91f6 <inflate+0x116>
	movl   $0xffffffff,0x1bec(%r12)
	movl   $0x3f3f,0x8(%r12)
	mov    -0x140(%rbp),%rax
	mov    -0x168(%rbp),%rsi
	jmpq   91f6 <inflate+0x116>
	lea    0xa20c(%rip),%rax        # 14cab <order.1+0x177>
	mov    %rax,0x30(%rbx)
	movl   $0x3f51,0x8(%r12)
	mov    -0x140(%rbp),%rax
	mov    -0x168(%rbp),%rsi
	jmpq   91f6 <inflate+0x116>
	lea    0xa15b(%rip),%rcx        # 14c21 <order.1+0xed>
	mov    %rcx,0x30(%rbx)
	movl   $0x3f51,0x8(%r12)
	mov    -0x108(%rbp),%r11
	mov    -0xe8(%rbp),%r8
	mov    -0xf8(%rbp),%r10
	mov    -0x180(%rbp),%rcx
	mov    -0x1c0(%rbp),%r9
	mov    -0x168(%rbp),%rsi
	jmpq   91f6 <inflate+0x116>
	xor    %r11d,%r11d
	jmpq   9280 <inflate+0x1a0>
	movzwl 0x20(%r12),%edx
	cmp    %r10,%rdx
	jne    b020 <inflate+0x1f40>
	xor    %ecx,%ecx
	mov    %rcx,%r10
	jmpq   97bf <inflate+0x6df>
	xor    %r11d,%r11d
	mov    -0x168(%rbp),%rsi
	jmpq   9280 <inflate+0x1a0>
	mov    0x38(%rdx),%rsi
	test   %rsi,%rsi
	je     ab53 <inflate+0x1a73>
	mov    0x5c(%r12),%edi
	mov    0x40(%rdx),%edx
	cmp    %edi,%edx
	jbe    ab53 <inflate+0x1a73>
	lea    0x1(%rdi),%edx
	mov    %edx,0x5c(%r12)
	mov    %r10b,(%rdi,%rsi,1)
	add    $0x1,%ecx
	test   %r10b,%r10b
	je     9769 <inflate+0x689>
	cmp    %r11d,%ecx
	jae    9769 <inflate+0x689>
	mov    %ecx,%edx
	movzbl (%r8,%rdx,1),%r10d
	mov    0x30(%r12),%rdx
	test   %rdx,%rdx
	jne    ab32 <inflate+0x1a52>
	jmp    ab53 <inflate+0x1a73>
	xor    %r11d,%r11d
	mov    -0x168(%rbp),%rsi
	jmpq   9280 <inflate+0x1a0>
	movslq 0x10(%r12),%rcx
	and    $0x4,%ecx
	test   %ecx,%ecx
	jg     b039 <inflate+0x1f59>
	xor    %ecx,%ecx
	mov    %rcx,%r10
	jmpq   9a2e <inflate+0x94e>
	mov    %r11,%rdx
	test   %edx,%edx
	je     abe0 <inflate+0x1b00>
	mov    0x30(%r12),%rdi
	test   %rdi,%rdi
	jne    b0a6 <inflate+0x1fc6>
	movslq 0x18(%r12),%rsi
	and    $0x200,%esi
	test   %esi,%esi
	jg     b0bf <inflate+0x1fdf>
	sub    %edx,%r11d
	mov    0x5c(%r12),%esi
	sub    %edx,%esi
	mov    %esi,0x5c(%r12)
	mov    %edx,%edx
	add    %rdx,%r8
	mov    0x5c(%r12),%edx
	test   %edx,%edx
	je     9a4a <inflate+0x96a>
	mov    -0x168(%rbp),%rsi
	jmpq   9280 <inflate+0x1a0>
	xor    %r11d,%r11d
	mov    -0x168(%rbp),%rsi
	jmpq   9280 <inflate+0x1a0>
	add    $0x1,%ecx
	test   %r10b,%r10b
	je     984f <inflate+0x76f>
	cmp    %r11d,%ecx
	jae    984f <inflate+0x76f>
	mov    %ecx,%edx
	movzbl (%r8,%rdx,1),%r10d
	mov    0x30(%r12),%rdx
	test   %rdx,%rdx
	je     ac08 <inflate+0x1b28>
	mov    0x28(%rdx),%rsi
	test   %rsi,%rsi
	je     ac08 <inflate+0x1b28>
	mov    0x5c(%r12),%edi
	mov    0x30(%rdx),%edx
	cmp    %edi,%edx
	jbe    ac08 <inflate+0x1b28>
	lea    0x1(%rdi),%edx
	mov    %edx,0x5c(%r12)
	mov    %r10b,(%rdi,%rsi,1)
	jmp    ac08 <inflate+0x1b28>
	mov    %r10b,-0x1c4(%rbp)
	shr    $0x8,%r10
	mov    %r10b,-0x1c3(%rbp)
	mov    0x20(%r12),%rdi
	lea    -0x1c4(%rbp),%rsi
	mov    $0x2,%edx
	mov    %r15,-0x128(%rbp)
	mov    %r14,-0xa8(%rbp)
	mov    %r13,-0xd0(%rbp)
	mov    %r8,%r13
	mov    %r11,%r14
	callq  20d0 <crc32@plt>
	mov    %rax,0x20(%r12)
	mov    %r13,%r8
	mov    %r14,%r11
	mov    -0x1c0(%rbp),%r9
	jmpq   9b67 <inflate+0xa87>
	xor    %r11d,%r11d
	jmpq   9280 <inflate+0x1a0>
	cmp    $0x8b1f,%r10
	jne    a5e1 <inflate+0x1501>
	mov    0x38(%r12),%ecx
	test   %ecx,%ecx
	jne    acd2 <inflate+0x1bf2>
	movl   $0xf,0x38(%r12)
	xor    %edi,%edi
	mov    %rdi,%rsi
	mov    %rdi,%rdx
	mov    %rbx,-0x60(%rbp)
	mov    %r8,-0x50(%rbp)
	mov    %r11,-0x100(%rbp)
	mov    %rax,%rbx
	callq  20d0 <crc32@plt>
	mov    %rax,%rdi
	mov    %rdi,0x20(%r12)
	movb   $0x1f,-0x1c4(%rbp)
	movb   $0x8b,-0x1c3(%rbp)
	lea    -0x1c4(%rbp),%rsi
	mov    $0x2,%edx
	callq  20d0 <crc32@plt>
	mov    %rax,0x20(%r12)
	movl   $0x3f35,0x8(%r12)
	mov    %rbx,%rax
	mov    -0x100(%rbp),%r11
	mov    -0x50(%rbp),%r8
	mov    -0x60(%rbp),%rbx
	mov    -0x1c0(%rbp),%r9
	xor    %ecx,%ecx
	mov    -0x168(%rbp),%rsi
	mov    %rcx,%r10
	jmpq   91f6 <inflate+0x116>
	mov    %r10,%rsi
	shr    $0x8,%rsi
	movzbl %r10b,%edx
	shl    $0x8,%edx
	mov    %edx,%edx
	lea    (%rsi,%rdx,1),%rdi
	xchg   %rax,%rdi
	xor    %edx,%edx
	mov    $0x1f,%esi
	div    %rsi
	test   %rdx,%rdx
	je     b152 <inflate+0x2072>
	mov    %rdi,%rax
	mov    -0x168(%rbp),%rsi
	jmpq   a60b <inflate+0x152b>
	mov    -0x110(%rbp),%r14
	mov    -0x148(%rbp),%rax
	jmpq   b1d2 <inflate+0x20f2>
	xor    %r11d,%r11d
	mov    -0x168(%rbp),%rsi
	jmpq   9280 <inflate+0x1a0>
	mov    %rdi,%rcx
	xor    %r11d,%r11d
	mov    -0x168(%rbp),%rsi
	jmpq   9280 <inflate+0x1a0>
	mov    %esi,-0x1c8(%rbp)
	mov    %rax,-0x140(%rbp)
	jmpq   b240 <inflate+0x2160>
	lea    0x9ef2(%rip),%rdx        # 14cc7 <order.1+0x193>
	mov    %rdx,0x30(%rbx)
	movl   $0x3f51,0x8(%r12)
	mov    -0x168(%rbp),%rsi
	jmpq   91f6 <inflate+0x116>
	xor    %r11d,%r11d
	mov    -0x168(%rbp),%rsi
	jmpq   9280 <inflate+0x1a0>
	movslq 0x1be8(%r12),%rdx
	test   %edx,%edx
	je     a854 <inflate+0x1774>
	lea    0x9ec9(%rip),%rdx        # 14cdd <order.1+0x1a9>
	mov    %rdx,0x30(%rdi)
	movl   $0x3f51,0x8(%r12)
	mov    %rdi,%rbx
	jmpq   91f6 <inflate+0x116>
	mov    %rdi,-0x88(%rbp)
	mov    %rdx,%rdi
	sub    %ebx,%edi
	add    0x3c(%r12),%edi
	mov    %edi,%edi
	add    0x48(%r12),%rdi
	sub    %edx,%ebx
	mov    %rdi,%rdx
	mov    -0x88(%rbp),%rdi
	mov    %rdi,-0x80(%rbp)
	mov    0x5c(%r12),%edi
	cmp    %ebx,%edi
	jb     b2a7 <inflate+0x21c7>
	mov    -0x80(%rbp),%rdi
	jmpq   9cb3 <inflate+0xbd3>
	movl   $0x3f48,0x8(%r12)
	mov    -0xe8(%rbp),%rcx
	mov    -0x80(%rbp),%rbx
	jmpq   91f6 <inflate+0x116>
	xor    %r11d,%r11d
	jmpq   9280 <inflate+0x1a0>
	cmp    %r14d,%r13d
	je     a8f7 <inflate+0x1817>
	movslq 0x18(%r12),%rax
	test   %eax,%eax
	jne    b2b3 <inflate+0x21d3>
	mov    %edx,%eax
	mov    %r15,%rsi
	sub    %rax,%rsi
	mov    0x20(%r12),%rdi
	mov    %r10,-0x1a8(%rbp)
	mov    %r15,-0x170(%rbp)
	mov    %rcx,-0x1b8(%rbp)
	mov    %r8,%r14
	mov    %r11,%r15
	callq  2230 <adler32@plt>
	mov    %r14,%r8
	mov    %r15,%r11
	jmpq   b2e6 <inflate+0x2206>
	movslq 0x18(%r12),%rdx
	test   %edx,%edx
	je     b317 <inflate+0x2237>
	mov    %r10,%rdx
	mov    0x20(%r12),%rsi
	cmp    %rdx,%rsi
	jne    b355 <inflate+0x2275>
	xor    %ecx,%ecx
	mov    %rcx,%r10
	mov    %r13,%r14
	jmpq   9d14 <inflate+0xc34>
	mov    $0x80,%ecx
	mov    $0x100,%edi
	cmp    $0x3f47,%r9d
	je     af1f <inflate+0x1e3f>
	cmp    $0x3f42,%r9d
	je     af1f <inflate+0x1e3f>
	xor    %edi,%edi
	add    %r10d,%edx
	add    %edx,%ecx
	add    %edi,%ecx
	mov    %ecx,0x58(%rbx)
	cmp    %r13d,%r15d
	jne    af33 <inflate+0x1e53>
	cmp    %r8d,%r14d
	je     af3c <inflate+0x1e5c>
	cmp    $0x4,%esi
	jne    b378 <inflate+0x2298>
	test   %eax,%eax
	jne    b38e <inflate+0x22ae>
	mov    $0xfffffffffffffffb,%rax
	mov    -0x8(%rbp),%rbx
	mov    -0x10(%rbp),%r12
	mov    -0x18(%rbp),%r13
	mov    -0x20(%rbp),%r14
	mov    -0x28(%rbp),%r15
	leaveq 
	retq   
	mov    %rbx,%r10
	shr    $0x3,%r10
	lea    -0x3(%r13),%ecx
	mov    %r14,%rsi
	mov    -0x110(%rbp),%r11
	mov    -0x58(%rbp),%r8
	mov    -0xd8(%rbp),%r13
	mov    -0xa8(%rbp),%r14
	mov    -0x78(%rbp),%rbx
	mov    -0x148(%rbp),%rax
	jmpq   9280 <inflate+0x1a0>
	test   %r11d,%r11d
	je     b3a4 <inflate+0x22c4>
	mov    %rdi,%rcx
	movzbl (%r8),%eax
	shl    %cl,%rax
	add    %rax,%r10
	add    $0x1,%r8
	lea    0x8(%rcx),%edi
	add    $0xffffffff,%r11d
	movzbl -0x1c7(%rbp),%esi
	movzbl -0x1c8(%rbp),%eax
	lea    (%rsi,%rax,1),%ecx
	mov    %rdx,%rax
	shl    %cl,%eax
	add    $0xffffffff,%eax
	and    %r10d,%eax
	mov    %rsi,%rcx
	shr    %cl,%eax
	movzwl -0x1c6(%rbp),%esi
	add    %esi,%eax
	mov    %eax,%eax
	mov    0x68(%r12),%rsi
	mov    (%rsi,%rax,4),%eax
	mov    %eax,-0x1cc(%rbp)
	shr    $0x8,%eax
	movzbl %al,%eax
	add    %ecx,%eax
	cmp    %edi,%eax
	ja     af98 <inflate+0x1eb8>
	shr    %cl,%r10
	sub    %ecx,%edi
	add    0x1bec(%r12),%ecx
	mov    %ecx,0x1bec(%r12)
	mov    -0x1c0(%rbp),%r9
	jmpq   a081 <inflate+0xfa1>
	lea    0x9b92(%rip),%rdx        # 14bb9 <order.1+0x85>
	mov    %rdx,0x30(%rbx)
	movl   $0x3f51,0x8(%r12)
	jmpq   91f6 <inflate+0x116>
	mov    %r10b,-0x1c4(%rbp)
	shr    $0x8,%r10
	mov    %r10b,-0x1c3(%rbp)
	mov    0x20(%r12),%rdi
	lea    -0x1c4(%rbp),%rsi
	mov    $0x2,%edx
	mov    %r14,-0xa0(%rbp)
	mov    %r13,-0xc8(%rbp)
	mov    %r8,%r13
	mov    %r11,%r14
	callq  20d0 <crc32@plt>
	mov    %rax,0x20(%r12)
	mov    %r13,%r8
	mov    %r14,%r11
	mov    -0xc8(%rbp),%r13
	mov    -0xa0(%rbp),%r14
	mov    -0x1c0(%rbp),%r9
	mov    -0x148(%rbp),%rax
	xor    %ecx,%ecx
	mov    %rcx,%r10
	jmpq   9a2e <inflate+0x94e>
	mov    0x18(%rdi),%r9
	test   %r9,%r9
	jne    b3bd <inflate+0x22dd>
	mov    -0x1c0(%rbp),%r9
	jmpq   abb9 <inflate+0x1ad9>
	movslq 0x10(%r12),%rsi
	and    $0x4,%esi
	test   %esi,%esi
	jle    abcc <inflate+0x1aec>
	mov    0x20(%r12),%rdi
	mov    %r8,%rsi
	mov    %rdx,%rax
	mov    %r15,-0x120(%rbp)
	mov    %rbx,-0x70(%rbp)
	mov    %r14,-0x98(%rbp)
	mov    %r13,-0xc0(%rbp)
	mov    %rcx,-0x160(%rbp)
	mov    %r8,%rbx
	mov    %r10,%r13
	mov    %r11,%r14
	mov    %rdx,%r15
	mov    %rax,%rdx
	callq  20d0 <crc32@plt>
	mov    %rax,0x20(%r12)
	mov    %r15,%rdx
	mov    %rbx,%r8
	mov    %r13,%r10
	mov    %r14,%r11
	mov    -0x160(%rbp),%rcx
	mov    -0xc0(%rbp),%r13
	mov    -0x98(%rbp),%r14
	mov    -0x70(%rbp),%rbx
	mov    -0x1c0(%rbp),%r9
	mov    -0x148(%rbp),%rax
	mov    -0x120(%rbp),%r15
	jmpq   abcc <inflate+0x1aec>
	mov    %r10,%rax
	and    $0xf,%eax
	cmp    $0x8,%eax
	jne    b3ec <inflate+0x230c>
	mov    %r10,%rdx
	shr    $0x4,%rdx
	mov    %rdx,%rax
	and    $0xf,%eax
	lea    0x8(%rax),%esi
	mov    0x38(%r12),%eax
	test   %eax,%eax
	jne    b17f <inflate+0x209f>
	mov    %esi,0x38(%r12)
	cmp    $0xf,%esi
	jbe    b40f <inflate+0x232f>
	lea    0x99fd(%rip),%rax        # 14b8c <order.1+0x58>
	mov    %rax,0x30(%rbx)
	movl   $0x3f51,0x8(%r12)
	add    $0xfffffffc,%ecx
	mov    %rdi,%rax
	mov    %rdx,%r10
	mov    -0x168(%rbp),%rsi
	jmpq   91f6 <inflate+0x116>
	test   %r11d,%r11d
	je     b46f <inflate+0x238f>
	movzbl (%r8),%edx
	mov    %r9,%rcx
	shl    %cl,%rdx
	add    %rdx,%r10
	add    $0x1,%r8
	add    $0x8,%ecx
	add    $0xffffffff,%r11d
	mov    %rcx,%r9
	mov    (%rsi),%ecx
	mov    %rdi,%rdx
	shl    %cl,%edx
	lea    -0x1(%rdx),%ecx
	and    %r10d,%ecx
	mov    %ecx,%edx
	mov    0x68(%r12),%rcx
	mov    (%rcx,%rdx,4),%edx
	mov    %edx,-0x1cc(%rbp)
	mov    %rdx,%rcx
	shr    $0x8,%ecx
	movzbl %cl,%ecx
	cmp    %r9d,%ecx
	ja     b1b1 <inflate+0x20d1>
	shr    $0x10,%edx
	cmp    $0xf,%dx
	jbe    a624 <inflate+0x1544>
	cmp    $0x10,%dx
	jne    b481 <inflate+0x23a1>
	mov    %r9,%rcx
	jmpq   b4b4 <inflate+0x23d4>
	test   %r11d,%r11d
	je     b541 <inflate+0x2461>
	mov    %rdi,%rcx
	movzbl (%r8),%eax
	shl    %cl,%rax
	add    %rax,%r10
	add    $0x1,%r8
	lea    0x8(%rcx),%edi
	add    $0xffffffff,%r11d
	movzbl -0x1c7(%rbp),%esi
	movzbl -0x1c8(%rbp),%eax
	lea    (%rsi,%rax,1),%ecx
	mov    %rdx,%rax
	shl    %cl,%eax
	add    $0xffffffff,%eax
	and    %r10d,%eax
	mov    %rsi,%rcx
	shr    %cl,%eax
	movzwl -0x1c6(%rbp),%esi
	add    %esi,%eax
	mov    %eax,%esi
	mov    0x70(%r12),%rax
	mov    (%rax,%rsi,4),%eax
	mov    %eax,-0x1cc(%rbp)
	shr    $0x8,%eax
	movzbl %al,%eax
	add    %ecx,%eax
	cmp    %edi,%eax
	ja     b21f <inflate+0x213f>
	shr    %cl,%r10
	sub    %ecx,%edi
	add    0x1bec(%r12),%ecx
	mov    %ecx,0x1bec(%r12)
	mov    -0x140(%rbp),%rax
	jmpq   a77e <inflate+0x169e>
	mov    %rdi,%rbx
	mov    -0x80(%rbp),%rdi
	jmpq   9cb3 <inflate+0xbd3>
	mov    %edx,%eax
	mov    %r15,%rsi
	sub    %rax,%rsi
	mov    0x20(%r12),%rdi
	mov    %r10,-0x1a8(%rbp)
	mov    %r15,-0x170(%rbp)
	mov    %rcx,-0x1b8(%rbp)
	mov    %r8,%r14
	mov    %r11,%r15
	callq  20d0 <crc32@plt>
	mov    %r14,%r8
	mov    %r15,%r11
	mov    %rax,0x20(%r12)
	mov    %rax,0x60(%rbx)
	mov    -0x1c0(%rbp),%r9
	mov    -0x1b8(%rbp),%rcx
	mov    -0x148(%rbp),%rax
	mov    -0x170(%rbp),%r15
	mov    -0x1a8(%rbp),%r10
	jmpq   a8f7 <inflate+0x1817>
	mov    $0xff000000,%edx
	and    %r10,%rdx
	shr    $0x18,%rdx
	mov    %r10,%rsi
	and    $0xff0000,%rsi
	shr    $0x8,%rsi
	add    %rdx,%rsi
	mov    %r10,%rdx
	and    $0xff00,%rdx
	shl    $0x8,%rdx
	add    %rdx,%rsi
	movzbl %r10b,%edx
	shl    $0x18,%rdx
	add    %rsi,%rdx
	jmpq   aee6 <inflate+0x1e06>
	lea    0x999f(%rip),%rdx        # 14cfb <order.1+0x1c7>
	mov    %rdx,0x30(%rbx)
	movl   $0x3f51,0x8(%r12)
	mov    -0x168(%rbp),%rsi
	mov    %r13,%r14
	jmpq   91f6 <inflate+0x116>
	mov    -0x8(%rbp),%rbx
	mov    -0x10(%rbp),%r12
	mov    -0x18(%rbp),%r13
	mov    -0x20(%rbp),%r14
	mov    -0x28(%rbp),%r15
	leaveq 
	retq   
	mov    -0x8(%rbp),%rbx
	mov    -0x10(%rbp),%r12
	mov    -0x18(%rbp),%r13
	mov    -0x20(%rbp),%r14
	mov    -0x28(%rbp),%r15
	leaveq 
	retq   
	mov    %rdi,%rcx
	mov    -0x140(%rbp),%rax
	xor    %r11d,%r11d
	mov    -0x168(%rbp),%rsi
	jmpq   9280 <inflate+0x1a0>
	mov    0x20(%rdi),%eax
	mov    %r14,-0x98(%rbp)
	mov    %rax,%r14
	sub    %esi,%r14d
	mov    %r13,-0xc0(%rbp)
	lea    (%rdx,%r14,1),%r13d
	mov    0x24(%rdi),%edi
	cmp    %r13d,%edi
	jb     b55a <inflate+0x247a>
	mov    %rdx,%rax
	jmpq   b55f <inflate+0x247f>
	lea    0x977e(%rip),%rax        # 14b71 <order.1+0x3d>
	mov    %rax,0x30(%rbx)
	movl   $0x3f51,0x8(%r12)
	mov    %rdi,%rax
	mov    -0x168(%rbp),%rsi
	jmpq   91f6 <inflate+0x116>
	cmp    0x38(%r12),%esi
	ja     b188 <inflate+0x20a8>
	mov    %rsi,%rcx
	mov    $0x1,%eax
	shl    %cl,%eax
	mov    %eax,0x1c(%r12)
	xor    %edi,%edi
	mov    %rdi,%rsi
	mov    %rdi,%rdx
	mov    %r14,-0x88(%rbp)
	mov    %r8,-0x50(%rbp)
	mov    %r11,-0x100(%rbp)
	mov    %r10,%r14
	callq  2230 <adler32@plt>
	mov    %rax,0x20(%r12)
	mov    %rax,0x60(%rbx)
	and    $0x2000,%r14
	test   %r14,%r14
	jne    b5d0 <inflate+0x24f0>
	pushq  -0x38(%rbp)
	popq   -0x48(%rbp)
	jmpq   b5d6 <inflate+0x24f6>
	mov    %r9,%rcx
	xor    %r11d,%r11d
	mov    -0x168(%rbp),%rsi
	jmpq   9280 <inflate+0x1a0>
	cmp    $0x11,%dx
	jne    b610 <inflate+0x2530>
	mov    %r9,%rcx
	jmpq   b639 <inflate+0x2559>
	test   %r11d,%r11d
	je     b673 <inflate+0x2593>
	lea    0x1(%r8),%r9
	movzbl (%r8),%edx
	shl    %cl,%rdx
	add    %rdx,%r10
	add    $0x8,%ecx
	add    $0xffffffff,%r11d
	mov    %r9,%r8
	movzbl -0x1cb(%rbp),%edx
	lea    0x2(%rdx),%r9d
	cmp    %ecx,%r9d
	ja     b493 <inflate+0x23b3>
	mov    %rdx,%r9
	mov    %rcx,%rdx
	mov    %r9,%rcx
	shr    %cl,%r10
	neg    %ecx
	add    %edx,%ecx
	mov    0x8c(%r12),%edx
	test   %edx,%edx
	je     b682 <inflate+0x25a2>
	add    $0xffffffff,%edx
	mov    %edx,%edx
	mov    -0x1b0(%rbp),%r9
	movzwl (%r9,%rdx,2),%edi
	mov    %r10,%rsi
	shr    $0x2,%rsi
	and    $0x3,%r10d
	lea    0x3(%r10),%edx
	add    $0xfffffffe,%ecx
	mov    %rsi,%r10
	mov    0x88(%r12),%esi
	add    0x84(%r12),%esi
	mov    %r14,-0x110(%rbp)
	mov    %rdx,%r14
	add    0x8c(%r12),%r14d
	cmp    %r14d,%esi
	jb     b6a2 <inflate+0x25c2>
	mov    %rcx,-0x1a8(%rbp)
	jmpq   b6e9 <inflate+0x2609>
	mov    %rdi,%rcx
	mov    -0x140(%rbp),%rax
	xor    %r11d,%r11d
	mov    -0x168(%rbp),%rsi
	jmpq   9280 <inflate+0x1a0>
	sub    %eax,%esi
	lea    (%rdi,%rsi,1),%eax
	mov    %r14d,%esi
	lea    (%r9,%rsi,1),%rdi
	mov    %eax,%eax
	mov    %r8,%rsi
	mov    %r15,-0x120(%rbp)
	mov    %rbx,-0x70(%rbp)
	mov    %rcx,-0x160(%rbp)
	mov    %r11,%rbx
	mov    %r8,%r13
	mov    %r10,%r14
	mov    %rdx,%r15
	mov    %rax,%rdx
	callq  21f0 <memcpy@plt>
	mov    %r15,%rdx
	mov    %r13,%r8
	mov    %r14,%r10
	mov    %rbx,%r11
	mov    -0x160(%rbp),%rcx
	mov    -0xc0(%rbp),%r13
	mov    -0x98(%rbp),%r14
	mov    -0x70(%rbp),%rbx
	mov    -0x1c0(%rbp),%r9
	mov    -0x148(%rbp),%rax
	mov    -0x120(%rbp),%r15
	jmpq   abb9 <inflate+0x1ad9>
	pushq  -0x40(%rbp)
	popq   -0x48(%rbp)
	mov    -0x48(%rbp),%rax
	mov    %eax,0x8(%r12)
	mov    -0x100(%rbp),%r11
	mov    -0x50(%rbp),%r8
	mov    -0x88(%rbp),%r14
	mov    -0x1c0(%rbp),%r9
	mov    -0x148(%rbp),%rax
	xor    %ecx,%ecx
	mov    -0x168(%rbp),%rsi
	mov    %rcx,%r10
	jmpq   91f6 <inflate+0x116>
	mov    %r9,%rcx
	jmpq   b722 <inflate+0x2642>
	test   %r11d,%r11d
	je     b75c <inflate+0x267c>
	lea    0x1(%r8),%rsi
	movzbl (%r8),%edx
	shl    %cl,%rdx
	add    %rdx,%r10
	add    $0x8,%ecx
	add    $0xffffffff,%r11d
	mov    %rsi,%r8
	movzbl -0x1cb(%rbp),%edx
	lea    0x3(%rdx),%esi
	cmp    %ecx,%esi
	ja     b618 <inflate+0x2538>
	mov    %rcx,%rsi
	mov    %rdx,%rcx
	mov    %r10,%rdx
	shr    %cl,%rdx
	mov    %rdx,%r10
	shr    $0x3,%r10
	and    $0x7,%edx
	add    $0x3,%edx
	sub    %ecx,%esi
	lea    -0x3(%rsi),%ecx
	xor    %edi,%edi
	mov    -0x1b0(%rbp),%r9
	jmpq   b50a <inflate+0x242a>
	xor    %r11d,%r11d
	mov    -0x168(%rbp),%rsi
	jmpq   9280 <inflate+0x1a0>
	lea    0x95b1(%rip),%rdx        # 14c3a <order.1+0x106>
	mov    %rdx,0x30(%rbx)
	movl   $0x3f51,0x8(%r12)
	mov    -0x1b0(%rbp),%r9
	jmpq   a692 <inflate+0x15b2>
	lea    0x9591(%rip),%rdx        # 14c3a <order.1+0x106>
	mov    %rdx,0x30(%rbx)
	movl   $0x3f51,0x8(%r12)
	mov    -0x110(%rbp),%r14
	mov    -0x190(%rbp),%rsi
	mov    $0x1,%edi
	jmpq   a692 <inflate+0x15b2>
	mov    0x8c(%r12),%ecx
	lea    0x1(%rcx),%eax
	mov    %eax,0x8c(%r12)
	mov    %di,(%r9,%rcx,2)
	add    $0xffffffff,%edx
	test   %edx,%edx
	jne    b6ce <inflate+0x25ee>
	mov    -0x1a8(%rbp),%rcx
	mov    -0x190(%rbp),%rsi
	mov    $0x1,%edi
	jmpq   a65f <inflate+0x157f>
	test   %r11d,%r11d
	je     b76b <inflate+0x268b>
	lea    0x1(%r8),%rsi
	movzbl (%r8),%edx
	shl    %cl,%rdx
	add    %rdx,%r10
	add    $0x8,%ecx
	add    $0xffffffff,%r11d
	mov    %rsi,%r8
	movzbl -0x1cb(%rbp),%edx
	lea    0x7(%rdx),%esi
	cmp    %ecx,%esi
	ja     b705 <inflate+0x2625>
	mov    %rcx,%rsi
	mov    %rdx,%rcx
	mov    %r10,%rdx
	shr    %cl,%rdx
	mov    %rdx,%r10
	shr    $0x7,%r10
	and    $0x7f,%edx
	add    $0xb,%edx
	sub    %ecx,%esi
	lea    -0x7(%rsi),%ecx
	xor    %edi,%edi
	mov    -0x1b0(%rbp),%r9
	jmpq   b50a <inflate+0x242a>
	xor    %r11d,%r11d
	mov    -0x168(%rbp),%rsi
	jmpq   9280 <inflate+0x1a0>
	xor    %r11d,%r11d
	mov    -0x168(%rbp),%rsi
	jmpq   9280 <inflate+0x1a0>
	nopw   0x0(%rax,%rax,1)

000b780 <inflateEnd>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %r15,-0x8(%rbp)
	mov    %rdi,%r15
	callq  c320 <inflateStateCheck>
	test   %eax,%eax
	je     b7a5 <inflateEnd+0x25>
	mov    $0xfffffffffffffffe,%rax
	mov    -0x8(%rbp),%r15
	leaveq 
	retq   
	mov    0x38(%r15),%rax
	mov    0x48(%rax),%rsi
	test   %rsi,%rsi
	je     b7bc <inflateEnd+0x3c>
	mov    0x48(%r15),%rax
	mov    0x50(%r15),%rdi
	callq  *%rax
	mov    0x48(%r15),%rax
	mov    0x50(%r15),%rdi
	mov    0x38(%r15),%rsi
	callq  *%rax
	movq   $0x0,0x38(%r15)
	xor    %eax,%eax
	mov    -0x8(%rbp),%r15
	leaveq 
	retq   
	nopw   0x0(%rax,%rax,1)

000b7e0 <inflateSetDictionary>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %r15,-0x8(%rbp)
	mov    %rdx,-0x20(%rbp)
	mov    %rsi,-0x18(%rbp)
	mov    %rdi,%r15
	callq  c320 <inflateStateCheck>
	test   %eax,%eax
	je     b80d <inflateSetDictionary+0x2d>
	mov    $0xfffffffffffffffe,%rax
	mov    -0x8(%rbp),%r15
	leaveq 
	retq   
	mov    0x38(%r15),%rcx
	movslq 0x10(%rcx),%rax
	test   %eax,%eax
	jne    b852 <inflateSetDictionary+0x72>
	xor    %edi,%edi
	mov    0x8(%rcx),%eax
	cmp    $0x3f3e,%eax
	je     b869 <inflateSetDictionary+0x89>
	mov    %r15,%rdi
	mov    %rcx,%r15
	mov    -0x20(%rbp),%rdx
	mov    %edx,%eax
	mov    -0x18(%rbp),%rcx
	lea    (%rcx,%rax,1),%rsi
	callq  c3b0 <updatewindow>
	test   %eax,%eax
	jne    b89a <inflateSetDictionary+0xba>
	movl   $0x1,0x14(%r15)
	xor    %eax,%eax
	mov    -0x8(%rbp),%r15
	leaveq 
	retq   
	mov    0x8(%rcx),%eax
	cmp    $0x3f3e,%eax
	je     b819 <inflateSetDictionary+0x39>
	mov    $0xfffffffffffffffe,%rax
	mov    -0x8(%rbp),%r15
	leaveq 
	retq   
	mov    %rdi,%rsi
	mov    %rdi,%rdx
	mov    %r15,-0x10(%rbp)
	mov    %rcx,%r15
	callq  2230 <adler32@plt>
	mov    %rax,%rdi
	mov    -0x18(%rbp),%rsi
	mov    -0x20(%rbp),%rdx
	callq  2230 <adler32@plt>
	mov    0x20(%r15),%rcx
	cmp    %rax,%rcx
	jne    b8af <inflateSetDictionary+0xcf>
	mov    -0x10(%rbp),%rdi
	jmp    b82b <inflateSetDictionary+0x4b>
	movl   $0x3f52,0x8(%r15)
	mov    $0xfffffffffffffffc,%rax
	mov    -0x8(%rbp),%r15
	leaveq 
	retq   
	mov    $0xfffffffffffffffd,%rax
	mov    -0x8(%rbp),%r15
	leaveq 
	retq   
	nopl   0x0(%rax)

000b8c0 <inflateGetDictionary>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %r15,-0x8(%rbp)
	mov    %rsi,-0x18(%rbp)
	mov    %rdx,-0x10(%rbp)
	mov    %rdi,%r15
	callq  c320 <inflateStateCheck>
	test   %eax,%eax
	je     b8ed <inflateGetDictionary+0x2d>
	mov    $0xfffffffffffffffe,%rax
	mov    -0x8(%rbp),%r15
	leaveq 
	retq   
	mov    0x38(%r15),%r15
	mov    0x40(%r15),%eax
	test   %eax,%eax
	jne    b90a <inflateGetDictionary+0x4a>
	xor    %eax,%eax
	mov    -0x10(%rbp),%rdx
	test   %rdx,%rdx
	jne    b94f <inflateGetDictionary+0x8f>
	mov    -0x8(%rbp),%r15
	leaveq 
	retq   
	mov    -0x18(%rbp),%rcx
	test   %rcx,%rcx
	je     b8f9 <inflateGetDictionary+0x39>
	mov    0x44(%r15),%edx
	mov    %rdx,%rsi
	add    0x48(%r15),%rsi
	sub    %edx,%eax
	mov    %eax,%edx
	mov    %rcx,%rdi
	mov    %r14,-0x18(%rbp)
	mov    %rcx,%r14
	callq  21f0 <memcpy@plt>
	mov    0x40(%r15),%eax
	lea    (%r14,%rax,1),%rdi
	mov    0x44(%r15),%edx
	sub    %rdx,%rdi
	mov    0x48(%r15),%rsi
	callq  21f0 <memcpy@plt>
	mov    -0x18(%rbp),%r14
	jmp    b8f9 <inflateGetDictionary+0x39>
	mov    0x40(%r15),%ecx
	mov    %ecx,(%rdx)
	mov    -0x8(%rbp),%r15
	leaveq 
	retq   
	nopl   0x0(%rax,%rax,1)

000b960 <inflateSync>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %r15,-0x20(%rbp)
	mov    %r14,%r15
	mov    %rdi,%r14
	callq  c320 <inflateStateCheck>
	test   %eax,%eax
	je     b98b <inflateSync+0x2b>
	mov    %r15,%r14
	mov    $0xfffffffffffffffe,%rax
	mov    -0x20(%rbp),%r15
	leaveq 
	retq   
	mov    0x38(%r14),%r8
	mov    0x8(%r14),%eax
	test   %eax,%eax
	je     b9cd <inflateSync+0x6d>
	lea    0x8c(%r8),%rdi
	xor    %edx,%edx
	mov    0x8(%r8),%eax
	cmp    $0x3f53,%eax
	je     ba3c <inflateSync+0xdc>
	movl   $0x3f53,0x8(%r8)
	mov    0x58(%r8),%ecx
	mov    %rcx,%rax
	and    $0xfffffff8,%eax
	mov    0x50(%r8),%rsi
	and    $0x7,%ecx
	shl    %cl,%rsi
	jmp    b9fe <inflateSync+0x9e>
	mov    0x58(%r8),%eax
	cmp    $0x7,%eax
	ja     b997 <inflateSync+0x37>
	mov    %r15,%r14
	mov    $0xfffffffffffffffb,%rax
	mov    -0x20(%rbp),%r15
	leaveq 
	retq   
	mov    %rsi,%rcx
	shr    $0x8,%rcx
	mov    %edx,%r9d
	mov    %sil,-0x24(%rbp,%r9,1)
	add    $0xfffffff8,%eax
	add    $0x1,%edx
	mov    %rcx,%rsi
	mov    %eax,0x58(%r8)
	mov    %rsi,0x50(%r8)
	cmp    $0x7,%eax
	ja     b9e6 <inflateSync+0x86>
	movl   $0x0,(%rdi)
	lea    -0x24(%rbp),%rsi
	mov    %rdi,%rax
	mov    %r13,-0x10(%rbp)
	mov    %r15,-0x18(%rbp)
	mov    %rdi,%r13
	mov    %rax,%rdi
	mov    %r8,%r15
	callq  c550 <syncsearch>
	mov    %r13,%rdi
	mov    %r15,%r8
	mov    -0x18(%rbp),%r15
	mov    -0x10(%rbp),%r13
	mov    (%r14),%rsi
	mov    0x8(%r14),%edx
	mov    %r15,-0x18(%rbp)
	mov    %r8,%r15
	callq  c550 <syncsearch>
	mov    0x8(%r14),%ecx
	sub    %eax,%ecx
	mov    %ecx,0x8(%r14)
	mov    %eax,%eax
	mov    %rax,%rcx
	add    (%r14),%rcx
	mov    %rcx,(%r14)
	add    0x10(%r14),%rax
	mov    %rax,0x10(%r14)
	mov    0x8c(%r15),%ecx
	cmp    $0x4,%ecx
	je     ba89 <inflateSync+0x129>
	mov    $0xfffffffffffffffd,%rax
	mov    -0x18(%rbp),%r14
	mov    -0x20(%rbp),%r15
	leaveq 
	retq   
	mov    0x28(%r14),%rcx
	mov    %r14,%rdi
	mov    %r13,-0x10(%rbp)
	mov    %r12,-0x8(%rbp)
	mov    %rcx,%r12
	mov    %rax,%r13
	callq  22f0 <inflateReset@plt>
	mov    %r13,0x10(%r14)
	mov    %r12,0x28(%r14)
	movl   $0x3f3f,0x8(%r15)
	mov    -0x8(%rbp),%r12
	xor    %eax,%eax
	mov    -0x18(%rbp),%r14
	mov    -0x10(%rbp),%r13
	mov    -0x20(%rbp),%r15
	leaveq 
	retq   
	nopw   0x0(%rax,%rax,1)

000bad0 <inflateCopy>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %rdi,-0x28(%rbp)
	mov    %rsi,%rdi
	mov    %rdi,-0x20(%rbp)
	callq  c320 <inflateStateCheck>
	test   %eax,%eax
	je     baf5 <inflateCopy+0x25>
	mov    $0xfffffffffffffffe,%rax
	leaveq 
	retq   
	mov    -0x28(%rbp),%rax
	test   %rax,%rax
	jne    bb07 <inflateCopy+0x37>
	mov    $0xfffffffffffffffe,%rax
	leaveq 
	retq   
	mov    -0x20(%rbp),%rcx
	mov    0x38(%rcx),%rax
	mov    %rax,-0x18(%rbp)
	mov    0x40(%rcx),%rax
	mov    0x50(%rcx),%rdi
	mov    $0x1,%esi
	mov    $0x1bf8,%edx
	callq  *%rax
	test   %rax,%rax
	jne    bb35 <inflateCopy+0x65>
	mov    $0xfffffffffffffffc,%rax
	leaveq 
	retq   
	xor    %ecx,%ecx
	mov    -0x18(%rbp),%r8
	mov    0x48(%r8),%rdx
	test   %rdx,%rdx
	jne    bc23 <inflateCopy+0x153>
	mov    -0x20(%rbp),%rsi
	mov    $0x70,%edx
	mov    -0x28(%rbp),%r9
	mov    %r9,%rdi
	mov    %r14,-0x18(%rbp)
	mov    %r15,-0x28(%rbp)
	mov    %r12,-0x8(%rbp)
	mov    %r13,-0x10(%rbp)
	mov    %rax,%r12
	mov    %rcx,%r13
	mov    %r9,%r14
	mov    %r8,%r15
	callq  21f0 <memcpy@plt>
	mov    %r12,%rdi
	mov    %r15,%rsi
	mov    $0x1bf8,%edx
	callq  21f0 <memcpy@plt>
	mov    %r14,(%r12)
	lea    0x558(%r15),%rsi
	mov    0x68(%r15),%rcx
	cmp    %rcx,%rsi
	jbe    bc70 <inflateCopy+0x1a0>
	mov    0x90(%r15),%rax
	mov    %rax,%rdx
	sub    %rsi,%rdx
	mov    %rdx,%rcx
	sar    %rcx
	shr    $0x3e,%rcx
	add    %rdx,%rcx
	and    $0xfffffffffffffffc,%rcx
	lea    0x558(%r15,%rcx,1),%rcx
	neg    %rcx
	add    %rax,%rcx
	lea    0x558(%r15,%rcx,1),%rcx
	sub    %rcx,%rax
	lea    0x558(%r12,%rax,1),%rax
	mov    %rax,0x90(%r12)
	test   %r13,%r13
	je     bc06 <inflateCopy+0x136>
	mov    0x38(%r15),%ecx
	mov    $0x1,%eax
	shl    %cl,%eax
	mov    %eax,%edx
	mov    0x48(%r15),%rsi
	mov    %r13,%rdi
	callq  21f0 <memcpy@plt>
	mov    %r13,0x48(%r12)
	mov    %r12,0x38(%r14)
	mov    -0x10(%rbp),%r13
	mov    -0x8(%rbp),%r12
	xor    %eax,%eax
	mov    -0x28(%rbp),%r15
	mov    -0x18(%rbp),%r14
	leaveq 
	retq   
	mov    0x38(%r8),%ecx
	mov    $0x1,%edx
	mov    %rdx,%rsi
	shl    %cl,%esi
	mov    -0x20(%rbp),%r8
	mov    0x40(%r8),%rcx
	mov    0x50(%r8),%rdi
	mov    %r14,-0x10(%rbp)
	mov    %r15,-0x20(%rbp)
	mov    %r8,%r14
	mov    %rax,%r15
	callq  *%rcx
	test   %rax,%rax
	je     bd03 <inflateCopy+0x233>
	mov    %rax,%rcx
	mov    %r15,%rax
	mov    %r14,%rsi
	mov    -0x20(%rbp),%r15
	mov    -0x10(%rbp),%r14
	mov    -0x18(%rbp),%r8
	jmpq   bb4c <inflateCopy+0x7c>
	lea    0x1be4(%r15),%rax
	cmp    %rax,%rcx
	ja     bba1 <inflateCopy+0xd1>
	mov    %rcx,%rdx
	sub    %rsi,%rdx
	mov    %rdx,%rax
	sar    %rax
	shr    $0x3e,%rax
	add    %rdx,%rax
	and    $0xfffffffffffffffc,%rax
	lea    0x558(%r15,%rax,1),%rax
	neg    %rax
	add    %rcx,%rax
	lea    0x558(%r15,%rax,1),%rax
	sub    %rax,%rcx
	lea    0x558(%r12,%rcx,1),%rax
	mov    %rax,0x68(%r12)
	mov    0x70(%r15),%rcx
	mov    %rcx,%rdx
	sub    %rsi,%rdx
	mov    %rdx,%rax
	sar    %rax
	shr    $0x3e,%rax
	add    %rdx,%rax
	and    $0xfffffffffffffffc,%rax
	lea    0x558(%r15,%rax,1),%rax
	neg    %rax
	add    %rcx,%rax
	lea    0x558(%r15,%rax,1),%rax
	sub    %rax,%rcx
	lea    0x558(%r12,%rcx,1),%rax
	mov    %rax,0x70(%r12)
	jmpq   bba1 <inflateCopy+0xd1>
	mov    0x48(%r14),%rax
	mov    0x50(%r14),%rdi
	mov    %r15,%rsi
	callq  *%rax
	mov    -0x20(%rbp),%r15
	mov    -0x10(%rbp),%r14
	mov    $0xfffffffffffffffc,%rax
	leaveq 
	retq   
	data16 nopw %cs:0x0(%rax,%rax,1)
	nopl   0x0(%rax)

000bd30 <inflateReset>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %r15,-0x8(%rbp)
	mov    %rdi,%r15
	callq  c320 <inflateStateCheck>
	test   %eax,%eax
	je     bd55 <inflateReset+0x25>
	mov    $0xfffffffffffffffe,%rax
	mov    -0x8(%rbp),%r15
	leaveq 
	retq   
	mov    0x38(%r15),%rax
	movl   $0x0,0x3c(%rax)
	movl   $0x0,0x40(%rax)
	movl   $0x0,0x44(%rax)
	mov    %r15,%rdi
	callq  20f0 <inflateResetKeep@plt>
	mov    -0x8(%rbp),%r15
	leaveq 
	retq   
	nopl   0x0(%rax)

000bd80 <inflateReset2>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %r15,-0x18(%rbp)
	mov    %rsi,-0x20(%rbp)
	mov    %rdi,%r15
	callq  c320 <inflateStateCheck>
	test   %eax,%eax
	je     bda9 <inflateReset2+0x29>
	mov    $0xfffffffffffffffe,%rax
	mov    -0x18(%rbp),%r15
	leaveq 
	retq   
	mov    0x38(%r15),%rdx
	mov    -0x20(%rbp),%rax
	test   %eax,%eax
	js     bdc8 <inflateReset2+0x48>
	mov    %rax,%rcx
	sar    $0x4,%ecx
	add    $0x5,%ecx
	cmp    $0x2f,%eax
	jg     bdcc <inflateReset2+0x4c>
	and    $0xf,%eax
	jmp    bdcc <inflateReset2+0x4c>
	neg    %eax
	xor    %ecx,%ecx
	test   %eax,%eax
	jne    bded <inflateReset2+0x6d>
	mov    0x48(%rdx),%rsi
	test   %rsi,%rsi
	jne    bdff <inflateReset2+0x7f>
	mov    %r15,%rdi
	mov    %ecx,0x10(%rdx)
	mov    %eax,0x38(%rdx)
	callq  22f0 <inflateReset@plt>
	mov    -0x18(%rbp),%r15
	leaveq 
	retq   
	cmp    $0x7,%eax
	jg     be0b <inflateReset2+0x8b>
	mov    $0xfffffffffffffffe,%rax
	mov    -0x18(%rbp),%r15
	leaveq 
	retq   
	mov    0x38(%rdx),%edi
	cmp    %eax,%edi
	jne    be1d <inflateReset2+0x9d>
	mov    %r15,%rdi
	jmp    bddc <inflateReset2+0x5c>
	cmp    $0xf,%eax
	jle    bdd0 <inflateReset2+0x50>
	mov    $0xfffffffffffffffe,%rax
	mov    -0x18(%rbp),%r15
	leaveq 
	retq   
	mov    0x48(%r15),%r8
	mov    0x50(%r15),%rdi
	mov    %r12,-0x8(%rbp)
	mov    %r13,-0x10(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %rax,%r12
	mov    %rcx,%r13
	mov    %rdx,%r14
	callq  *%r8
	mov    %r12,%rax
	mov    %r13,%rcx
	mov    %r14,%rdx
	mov    %r15,%rdi
	movq   $0x0,0x48(%rdx)
	mov    -0x20(%rbp),%r14
	mov    -0x10(%rbp),%r13
	mov    -0x8(%rbp),%r12
	jmpq   bddc <inflateReset2+0x5c>
	data16 nopw %cs:0x0(%rax,%rax,1)
	nopl   (%rax)

000be70 <inflatePrime>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %r15,-0x10(%rbp)
	mov    %rsi,-0x18(%rbp)
	mov    %rdx,-0x8(%rbp)
	mov    %rdi,%r15
	callq  c320 <inflateStateCheck>
	test   %eax,%eax
	je     be9d <inflatePrime+0x2d>
	mov    $0xfffffffffffffffe,%rax
	mov    -0x10(%rbp),%r15
	leaveq 
	retq   
	mov    0x38(%r15),%rdi
	xor    %eax,%eax
	mov    -0x18(%rbp),%rcx
	test   %ecx,%ecx
	js     bebd <inflatePrime+0x4d>
	cmp    $0x10,%ecx
	jle    bed2 <inflatePrime+0x62>
	mov    $0xfffffffffffffffe,%rax
	mov    -0x10(%rbp),%r15
	leaveq 
	retq   
	movq   $0x0,0x50(%rdi)
	movl   $0x0,0x58(%rdi)
	mov    -0x10(%rbp),%r15
	leaveq 
	retq   
	mov    0x58(%rdi),%edx
	lea    (%rdx,%rcx,1),%r8d
	cmp    $0x20,%r8d
	jbe    beec <inflatePrime+0x7c>
	mov    $0xfffffffffffffffe,%rax
	mov    -0x10(%rbp),%r15
	leaveq 
	retq   
	mov    $0x1,%esi
	shl    %cl,%rsi
	add    $0xffffffff,%esi
	mov    -0x8(%rbp),%rcx
	and    %ecx,%esi
	mov    %rdx,%rcx
	shl    %cl,%esi
	mov    %esi,%ecx
	add    0x50(%rdi),%rcx
	mov    %rcx,0x50(%rdi)
	mov    %r8d,0x58(%rdi)
	mov    -0x10(%rbp),%r15
	leaveq 
	retq   
	nopw   %cs:0x0(%rax,%rax,1)

000bf20 <inflateMark>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %r15,-0x8(%rbp)
	mov    %rdi,%r15
	callq  c320 <inflateStateCheck>
	test   %eax,%eax
	je     bf45 <inflateMark+0x25>
	mov    $0xffffffffffff0000,%rax
	mov    -0x8(%rbp),%r15
	leaveq 
	retq   
	mov    0x38(%r15),%rdx
	movslq 0x1bec(%rdx),%rcx
	mov    0x8(%rdx),%eax
	cmp    $0x3f43,%eax
	je     bf65 <inflateMark+0x45>
	cmp    $0x3f4c,%eax
	je     bf77 <inflateMark+0x57>
	xor    %eax,%eax
	jmp    bf68 <inflateMark+0x48>
	mov    0x5c(%rdx),%eax
	mov    %eax,%eax
	shl    $0x10,%rcx
	add    %rcx,%rax
	mov    -0x8(%rbp),%r15
	leaveq 
	retq   
	mov    0x1bf0(%rdx),%eax
	mov    0x5c(%rdx),%edx
	sub    %edx,%eax
	jmp    bf68 <inflateMark+0x48>
	data16 nopw %cs:0x0(%rax,%rax,1)
	nop

000bf90 <inflateGetHeader>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %r15,-0x10(%rbp)
	mov    %rsi,-0x8(%rbp)
	mov    %rdi,%r15
	callq  c320 <inflateStateCheck>
	test   %eax,%eax
	je     bfb9 <inflateGetHeader+0x29>
	mov    $0xfffffffffffffffe,%rax
	mov    -0x10(%rbp),%r15
	leaveq 
	retq   
	mov    0x38(%r15),%rcx
	movslq 0x10(%rcx),%rax
	and    $0x2,%eax
	test   %eax,%eax
	jne    bfd5 <inflateGetHeader+0x45>
	mov    $0xfffffffffffffffe,%rax
	mov    -0x10(%rbp),%r15
	leaveq 
	retq   
	mov    -0x8(%rbp),%rax
	mov    %rax,0x30(%rcx)
	movl   $0x0,0x48(%rax)
	xor    %eax,%eax
	mov    -0x10(%rbp),%r15
	leaveq 
	retq   
	nopl   0x0(%rax)

000bff0 <inflateInit_>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdx,%rcx
	mov    %rsi,%rdx
	mov    $0xf,%esi
	callq  22d0 <inflateInit2_@plt>
	leaveq 
	retq   
	nopw   %cs:0x0(%rax,%rax,1)

000c010 <inflateInit2_>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    $0xfffffffffffffffa,%rax
	test   %rdx,%rdx
	jne    c026 <inflateInit2_+0x16>
	leaveq 
	retq   
	movsbq (%rdx),%rdx
	cmp    $0x31,%dl
	je     c031 <inflateInit2_+0x21>
	leaveq 
	retq   
	cmp    $0x70,%ecx
	je     c038 <inflateInit2_+0x28>
	leaveq 
	retq   
	test   %rdi,%rdi
	jne    c046 <inflateInit2_+0x36>
	mov    $0xfffffffffffffffe,%rax
	leaveq 
	retq   
	movq   $0x0,0x30(%rdi)
	mov    0x40(%rdi),%rax
	test   %rax,%rax
	jne    c06a <inflateInit2_+0x5a>
	mov    0xbf7a(%rip),%rax        # 17fd8 <zcalloc@@Base+0x9268>
	mov    %rax,0x40(%rdi)
	movq   $0x0,0x50(%rdi)
	mov    0x48(%rdi),%rax
	test   %rax,%rax
	jne    c07e <inflateInit2_+0x6e>
	mov    0xbf46(%rip),%rax        # 17fc0 <zcfree@@Base+0x9240>
	mov    %rax,0x48(%rdi)
	mov    0x40(%rdi),%rax
	mov    0x50(%rdi),%rcx
	mov    $0x1,%r8d
	mov    $0x1bf8,%edx
	mov    %r15,-0x10(%rbp)
	mov    %rsi,-0x18(%rbp)
	mov    %r8,%rsi
	mov    %rdi,%r15
	mov    %rcx,%rdi
	callq  *%rax
	test   %rax,%rax
	jne    c0b6 <inflateInit2_+0xa6>
	mov    $0xfffffffffffffffc,%rax
	mov    -0x10(%rbp),%r15
	leaveq 
	retq   
	mov    %rax,0x38(%r15)
	mov    %r15,(%rax)
	movq   $0x0,0x48(%rax)
	movl   $0x3f34,0x8(%rax)
	mov    %r15,%rdi
	mov    %rax,-0x8(%rbp)
	mov    -0x18(%rbp),%rsi
	callq  2320 <inflateReset2@plt>
	test   %eax,%eax
	jne    c0e8 <inflateInit2_+0xd8>
	xor    %eax,%eax
	mov    -0x10(%rbp),%r15
	leaveq 
	retq   
	mov    0x48(%r15),%rcx
	mov    0x50(%r15),%rdi
	mov    %rax,-0x18(%rbp)
	mov    -0x8(%rbp),%rsi
	callq  *%rcx
	movq   $0x0,0x38(%r15)
	mov    -0x18(%rbp),%rax
	mov    -0x10(%rbp),%r15
	leaveq 
	retq   
	nopl   0x0(%rax)

000c110 <inflateSyncPoint>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %r15,-0x8(%rbp)
	mov    %rdi,%r15
	callq  c320 <inflateStateCheck>
	test   %eax,%eax
	je     c135 <inflateSyncPoint+0x25>
	mov    $0xfffffffffffffffe,%rax
	mov    -0x8(%rbp),%r15
	leaveq 
	retq   
	xor    %eax,%eax
	mov    0x38(%r15),%rcx
	mov    0x8(%rcx),%edx
	cmp    $0x3f41,%edx
	je     c14c <inflateSyncPoint+0x3c>
	mov    -0x8(%rbp),%r15
	leaveq 
	retq   
	mov    0x58(%rcx),%ecx
	test   %ecx,%ecx
	jne    c15e <inflateSyncPoint+0x4e>
	mov    $0x1,%eax
	mov    -0x8(%rbp),%r15
	leaveq 
	retq   
	mov    -0x8(%rbp),%r15
	leaveq 
	retq   
	data16 nopw %cs:0x0(%rax,%rax,1)
	nop

000c170 <inflateUndermine>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %r15,-0x8(%rbp)
	mov    %rdi,%r15
	callq  c320 <inflateStateCheck>
	test   %eax,%eax
	je     c195 <inflateUndermine+0x25>
	mov    $0xfffffffffffffffe,%rax
	mov    -0x8(%rbp),%r15
	leaveq 
	retq   
	mov    0x38(%r15),%rax
	movl   $0x1,0x1be8(%rax)
	mov    $0xfffffffffffffffd,%rax
	mov    -0x8(%rbp),%r15
	leaveq 
	retq   

000c1b0 <inflateValidate>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %r15,-0x8(%rbp)
	mov    %rsi,-0x10(%rbp)
	mov    %rdi,%r15
	callq  c320 <inflateStateCheck>
	test   %eax,%eax
	je     c1d9 <inflateValidate+0x29>
	mov    $0xfffffffffffffffe,%rax
	mov    -0x8(%rbp),%r15
	leaveq 
	retq   
	mov    0x38(%r15),%rdx
	xor    %eax,%eax
	mov    -0x10(%rbp),%rcx
	test   %ecx,%ecx
	jne    c1f7 <inflateValidate+0x47>
	movslq 0x10(%rdx),%rcx
	and    $0xfffffffb,%ecx
	mov    %ecx,0x10(%rdx)
	mov    -0x8(%rbp),%r15
	leaveq 
	retq   
	movslq 0x10(%rdx),%rcx
	or     $0x4,%ecx
	mov    %ecx,0x10(%rdx)
	mov    -0x8(%rbp),%r15
	leaveq 
	retq   
	nopw   0x0(%rax,%rax,1)

000c210 <inflateCodesUsed>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %r15,-0x8(%rbp)
	mov    %rdi,%r15
	callq  c320 <inflateStateCheck>
	test   %eax,%eax
	je     c235 <inflateCodesUsed+0x25>
	mov    $0xffffffffffffffff,%rax
	mov    -0x8(%rbp),%r15
	leaveq 
	retq   
	mov    0x38(%r15),%rcx
	mov    0x90(%rcx),%rax
	add    $0x558,%rcx
	sub    %rcx,%rax
	sar    $0x2,%rax
	mov    -0x8(%rbp),%r15
	leaveq 
	retq   
	data16 nopw %cs:0x0(%rax,%rax,1)
	nop

000c260 <inflateResetKeep>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %r15,-0x8(%rbp)
	mov    %rdi,%r15
	callq  c320 <inflateStateCheck>
	test   %eax,%eax
	je     c285 <inflateResetKeep+0x25>
	mov    $0xfffffffffffffffe,%rax
	mov    -0x8(%rbp),%r15
	leaveq 
	retq   
	mov    0x38(%r15),%rcx
	movq   $0x0,0x28(%rcx)
	movq   $0x0,0x28(%r15)
	movq   $0x0,0x10(%r15)
	movq   $0x0,0x30(%r15)
	movslq 0x10(%rcx),%rax
	test   %eax,%eax
	je     c2bb <inflateResetKeep+0x5b>
	and    $0x1,%eax
	movslq %eax,%rax
	mov    %rax,0x60(%r15)
	movl   $0x3f34,0x8(%rcx)
	movl   $0x0,0xc(%rcx)
	movl   $0x0,0x14(%rcx)
	movl   $0x8000,0x1c(%rcx)
	movq   $0x0,0x30(%rcx)
	movq   $0x0,0x50(%rcx)
	movl   $0x0,0x58(%rcx)
	lea    0x558(%rcx),%rax
	mov    %rax,0x90(%rcx)
	mov    %rax,0x70(%rcx)
	mov    %rax,0x68(%rcx)
	movl   $0x1,0x1be8(%rcx)
	movl   $0xffffffff,0x1bec(%rcx)
	xor    %eax,%eax
	mov    -0x8(%rbp),%r15
	leaveq 
	retq   

000c320 <inflateStateCheck>:
	push   %rbp
	mov    %rsp,%rbp
	mov    $0x1,%eax
	test   %rdi,%rdi
	jne    c330 <inflateStateCheck+0x10>
	leaveq 
	retq   
	mov    0x40(%rdi),%rcx
	test   %rcx,%rcx
	jne    c33b <inflateStateCheck+0x1b>
	leaveq 
	retq   
	mov    0x48(%rdi),%rcx
	test   %rcx,%rcx
	jne    c346 <inflateStateCheck+0x26>
	leaveq 
	retq   
	mov    0x38(%rdi),%rcx
	test   %rcx,%rcx
	jne    c351 <inflateStateCheck+0x31>
	leaveq 
	retq   
	cmp    (%rcx),%rdi
	je     c358 <inflateStateCheck+0x38>
	leaveq 
	retq   
	mov    0x8(%rcx),%ecx
	cmp    $0x3f33,%ecx
	ja     c365 <inflateStateCheck+0x45>
	leaveq 
	retq   
	cmp    $0x3f53,%ecx
	jbe    c36f <inflateStateCheck+0x4f>
	leaveq 
	retq   
	xor    %eax,%eax
	leaveq 
	retq   
	data16 nopw %cs:0x0(%rax,%rax,1)
	xchg   %ax,%ax

000c380 <fixedtables>:
	push   %rbp
	mov    %rsp,%rbp
	lea    0x899d(%rip),%rax        # 14d28 <lenfix.21>
	mov    %rax,0x68(%rdi)
	movl   $0x9,0x78(%rdi)
	lea    0x918b(%rip),%rax        # 15528 <distfix.22>
	mov    %rax,0x70(%rdi)
	movl   $0x5,0x7c(%rdi)
	leaveq 
	retq   
	nopw   0x0(%rax,%rax,1)

000c3b0 <updatewindow>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %r15,-0x10(%rbp)
	mov    $0x1,%eax
	mov    0x38(%rdi),%r15
	mov    0x48(%r15),%rcx
	test   %rcx,%rcx
	je     c484 <updatewindow+0xd4>
	mov    0x3c(%r15),%ecx
	test   %ecx,%ecx
	jne    c3f4 <updatewindow+0x44>
	mov    0x38(%r15),%ecx
	shl    %cl,%eax
	mov    %eax,0x3c(%r15)
	movl   $0x0,0x44(%r15)
	movl   $0x0,0x40(%r15)
	mov    0x3c(%r15),%eax
	cmp    %edx,%eax
	jbe    c4c5 <updatewindow+0x115>
	mov    0x44(%r15),%edi
	sub    %edi,%eax
	cmp    %eax,%edx
	jae    c40d <updatewindow+0x5d>
	mov    %rdx,%rax
	add    0x48(%r15),%rdi
	mov    %edx,%ecx
	neg    %rcx
	add    %rsi,%rcx
	mov    %eax,%r8d
	mov    %r12,-0x8(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %rdx,%r12
	mov    %r8,%rdx
	mov    %rax,%r13
	mov    %rsi,%r14
	mov    %rcx,%rsi
	callq  21f0 <memcpy@plt>
	cmp    %r13d,%r12d
	jne    c4ec <updatewindow+0x13c>
	mov    %r13,%rcx
	add    0x44(%r15),%ecx
	mov    %ecx,0x44(%r15)
	mov    0x3c(%r15),%eax
	cmp    %ecx,%eax
	jne    c460 <updatewindow+0xb0>
	movl   $0x0,0x44(%r15)
	mov    0x40(%r15),%ecx
	mov    0x3c(%r15),%eax
	cmp    %ecx,%eax
	ja     c521 <updatewindow+0x171>
	xor    %eax,%eax
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x8(%rbp),%r12
	mov    -0x10(%rbp),%r15
	leaveq 
	retq   
	mov    0x38(%r15),%ecx
	mov    %rax,%r8
	shl    %cl,%r8d
	mov    0x40(%rdi),%rcx
	mov    0x50(%rdi),%rdi
	mov    %rdx,-0x20(%rbp)
	mov    %rsi,-0x18(%rbp)
	mov    %rax,%rdx
	mov    %r8,%rsi
	callq  *%rcx
	mov    %rax,0x48(%r15)
	test   %rax,%rax
	je     c53e <updatewindow+0x18e>
	mov    $0x1,%eax
	mov    -0x18(%rbp),%rsi
	mov    -0x20(%rbp),%rdx
	jmpq   c3d2 <updatewindow+0x22>
	sub    %rax,%rsi
	mov    %rax,%rdx
	mov    0x48(%r15),%rdi
	callq  21f0 <memcpy@plt>
	movl   $0x0,0x44(%r15)
	mov    0x3c(%r15),%eax
	mov    %eax,0x40(%r15)
	xor    %eax,%eax
	mov    -0x10(%rbp),%r15
	leaveq 
	retq   
	sub    %r13d,%r12d
	mov    %r12d,%edx
	mov    %r14,%rsi
	sub    %rdx,%rsi
	mov    0x48(%r15),%rdi
	callq  21f0 <memcpy@plt>
	mov    %r12d,0x44(%r15)
	mov    0x3c(%r15),%eax
	mov    %eax,0x40(%r15)
	xor    %eax,%eax
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x8(%rbp),%r12
	mov    -0x10(%rbp),%r15
	leaveq 
	retq   
	lea    0x0(%r13,%rcx,1),%eax
	mov    %eax,0x40(%r15)
	xor    %eax,%eax
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x8(%rbp),%r12
	mov    -0x10(%rbp),%r15
	leaveq 
	retq   
	mov    $0x1,%eax
	mov    -0x10(%rbp),%r15
	leaveq 
	retq   
	nopl   0x0(%rax)

000c550 <syncsearch>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %r15,-0x8(%rbp)
	mov    (%rdi),%ecx
	xor    %r15d,%r15d
	mov    $0x4,%r9d
	mov    $0xff,%r10d
	mov    %r15,%rax
	jmp    c578 <syncsearch+0x28>
	add    $0x1,%ecx
	add    $0x1,%eax
	cmp    %edx,%eax
	jae    c593 <syncsearch+0x43>
	cmp    $0x3,%ecx
	ja     c593 <syncsearch+0x43>
	mov    %eax,%r8d
	movzbl (%rsi,%r8,1),%r8d
	cmp    $0x1,%ecx
	jbe    c59b <syncsearch+0x4b>
	mov    %r10,%r11
	jmp    c59e <syncsearch+0x4e>
	mov    %ecx,(%rdi)
	mov    -0x8(%rbp),%r15
	leaveq 
	retq   
	mov    %r15,%r11
	cmp    %r8d,%r11d
	je     c572 <syncsearch+0x22>
	test   %r8b,%r8b
	je     c5ad <syncsearch+0x5d>
	mov    %r15,%rcx
	jmp    c575 <syncsearch+0x25>
	neg    %ecx
	add    %r9d,%ecx
	jmp    c575 <syncsearch+0x25>
	nopw   %cs:0x0(%rax,%rax,1)
	xchg   %ax,%ax

000c5c0 <inflate_table>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x100,%rsp
	xor    %r11d,%r11d
	mov    %r11,%r10
	jmp    c5e4 <inflate_table+0x24>
	mov    %r10d,%eax
	movw   $0x0,-0xf8(%rbp,%rax,2)
	add    $0x1,%r10d
	cmp    $0xf,%r10d
	jbe    c5d3 <inflate_table+0x13>
	mov    %r9,-0xa0(%rbp)
	mov    %r11,%r9
	jmp    c617 <inflate_table+0x57>
	mov    %r9d,%eax
	movzwl (%rsi,%rax,2),%eax
	movzwl -0xf8(%rbp,%rax,2),%r10d
	add    $0x1,%r10d
	mov    %r10w,-0xf8(%rbp,%rax,2)
	add    $0x1,%r9d
	cmp    %edx,%r9d
	jb     c5f6 <inflate_table+0x36>
	mov    (%r8),%eax
	mov    $0xf,%r9d
	jmp    c63d <inflate_table+0x7d>
	mov    %r9d,%r10d
	movzwl -0xf8(%rbp,%r10,2),%r10d
	test   %r10w,%r10w
	jne    c642 <inflate_table+0x82>
	add    $0xffffffff,%r9d
	test   %r9d,%r9d
	jne    c627 <inflate_table+0x67>
	cmp    %eax,%r9d
	jae    c64a <inflate_table+0x8a>
	mov    %r9,%rax
	test   %r9d,%r9d
	je     c668 <inflate_table+0xa8>
	mov    $0x1,%r10d
	mov    %rsi,-0x98(%rbp)
	mov    %rdx,-0xa8(%rbp)
	mov    %r10,%rdx
	jmp    c6bb <inflate_table+0xfb>
	movb   $0x40,-0xfc(%rbp)
	movb   $0x1,-0xfb(%rbp)
	movw   $0x0,-0xfa(%rbp)
	mov    (%rcx),%rsi
	lea    0x4(%rsi),%rax
	mov    %rax,(%rcx)
	mov    -0xfc(%rbp),%edx
	mov    %edx,(%rsi)
	mov    (%rcx),%rax
	lea    0x4(%rax),%rsi
	mov    %rsi,(%rcx)
	mov    %edx,(%rax)
	movl   $0x1,(%r8)
	mov    %r11,%rax
	leaveq 
	retq   
	mov    %edx,%esi
	movzwl -0xf8(%rbp,%rsi,2),%esi
	test   %si,%si
	jne    c6c0 <inflate_table+0x100>
	add    $0x1,%edx
	cmp    %edx,%r9d
	ja     c6a9 <inflate_table+0xe9>
	mov    $0xffffffffffffffff,%rsi
	cmp    %eax,%edx
	ja     c6e5 <inflate_table+0x125>
	mov    %rdi,-0xb8(%rbp)
	mov    %r9,-0xb0(%rbp)
	mov    %rdx,-0x70(%rbp)
	mov    %r10,%rdx
	mov    %rdx,%rdi
	jmp    c71a <inflate_table+0x15a>
	mov    %rdi,-0xb8(%rbp)
	mov    %r9,-0xb0(%rbp)
	mov    %rdx,%rax
	mov    %rax,-0x70(%rbp)
	mov    %r10,%rdx
	mov    %rdx,%rdi
	jmp    c71a <inflate_table+0x15a>
	add    %edx,%edx
	mov    %edi,%r9d
	movzwl -0xf8(%rbp,%r9,2),%r9d
	sub    %r9d,%edx
	test   %edx,%edx
	js     c733 <inflate_table+0x173>
	add    $0x1,%edi
	cmp    $0xf,%edi
	jbe    c702 <inflate_table+0x142>
	test   %edx,%edx
	jle    c738 <inflate_table+0x178>
	mov    -0xb8(%rbp),%rdx
	test   %edx,%edx
	jne    c743 <inflate_table+0x183>
	mov    %rsi,%rax
	leaveq 
	retq   
	mov    %rsi,%rax
	leaveq 
	retq   
	movw   $0x0,-0xd6(%rbp)
	jmp    c778 <inflate_table+0x1b8>
	mov    -0xb0(%rbp),%rdx
	cmp    $0x1,%edx
	je     c738 <inflate_table+0x178>
	mov    %rsi,%rax
	leaveq 
	retq   
	mov    %r10d,%esi
	movzwl -0xf8(%rbp,%rsi,2),%edx
	movzwl -0xd8(%rbp,%rsi,2),%esi
	add    %edx,%esi
	add    $0x1,%r10d
	mov    %r10d,%edx
	mov    %si,-0xd8(%rbp,%rdx,2)
	cmp    $0xe,%r10d
	jbe    c754 <inflate_table+0x194>
	mov    %rax,-0x90(%rbp)
	mov    %r15,-0x38(%rbp)
	mov    -0xa8(%rbp),%rsi
	mov    -0xa0(%rbp),%rax
	mov    -0x98(%rbp),%rdi
	mov    %r11,%rdx
	jmp    c7cf <inflate_table+0x20f>
	mov    %edx,%r9d
	movzwl (%rdi,%r9,2),%r10d
	test   %r10w,%r10w
	je     c7cc <inflate_table+0x20c>
	movzwl -0xd8(%rbp,%r10,2),%r9d
	lea    0x1(%r9),%r15d
	mov    %r15w,-0xd8(%rbp,%r10,2)
	mov    %dx,(%rax,%r9,2)
	add    $0x1,%edx
	cmp    %edx,%esi
	ja     c7a3 <inflate_table+0x1e3>
	mov    -0xb8(%rbp),%rsi
	test   %esi,%esi
	jne    c848 <inflate_table+0x288>
	mov    $0x14,%r15d
	mov    %rax,%rdi
	mov    %rdi,%r10
	mov    %r10,-0x40(%rbp)
	mov    %r15,-0x50(%rbp)
	mov    %rdi,-0x48(%rbp)
	mov    (%rcx),%r9
	mov    %r8,-0x8(%rbp)
	mov    -0x90(%rbp),%r8
	mov    %rcx,-0x68(%rbp)
	mov    %r8,%rcx
	mov    %r12,%r8
	mov    %r11,%r12
	mov    %r13,%r11
	mov    %rdi,%r13
	mov    $0x1,%edx
	mov    %rdx,%rdi
	shl    %cl,%edi
	mov    %rcx,-0x88(%rbp)
	mov    %rdi,-0x78(%rbp)
	cmp    $0x1,%esi
	jne    c860 <inflate_table+0x2a0>
	cmp    $0x354,%edi
	jbe    c860 <inflate_table+0x2a0>
	mov    %rdx,%rax
	mov    %r8,%r12
	mov    %r11,%r13
	mov    -0x38(%rbp),%r15
	leaveq 
	retq   
	cmp    $0x1,%esi
	je     c8ad <inflate_table+0x2ed>
	lea    0x8e40(%rip),%r10        # 15694 <dext.4>
	lea    0x8df9(%rip),%rdi        # 15654 <dbase.3>
	mov    %r11,%r15
	jmp    c7ea <inflate_table+0x22a>
	lea    -0x1(%rdi),%edx
	mov    %rdx,-0xb8(%rbp)
	mov    $0xffffffff,%edx
	mov    %rdx,-0xa8(%rbp)
	cmp    $0x2,%esi
	je     c8c6 <inflate_table+0x306>
	mov    %rsi,-0x80(%rbp)
	mov    %rbx,-0x18(%rbp)
	mov    %r8,-0x20(%rbp)
	mov    %r11,-0x28(%rbp)
	mov    %r14,-0x30(%rbp)
	mov    -0x70(%rbp),%rbx
	mov    $0x1,%edx
	mov    -0xb0(%rbp),%r11
	mov    %r12,%rsi
	mov    %rsi,%rdi
	mov    %rdi,%r8
	jmpq   c94d <inflate_table+0x38d>
	lea    0x8d62(%rip),%r10        # 15616 <lext.2>
	mov    $0x101,%r15d
	lea    0x8d17(%rip),%rdi        # 155d8 <lbase.1>
	jmpq   c7ea <inflate_table+0x22a>
	cmp    $0x250,%edi
	ja     c98f <inflate_table+0x3cf>
	mov    %rsi,-0x80(%rbp)
	mov    %rbx,-0x18(%rbp)
	mov    %r8,-0x20(%rbp)
	mov    %r11,-0x28(%rbp)
	mov    %r14,-0x30(%rbp)
	mov    -0x70(%rbp),%rbx
	mov    $0x1,%edx
	mov    -0xb0(%rbp),%r11
	mov    %r12,%rsi
	mov    %rsi,%rdi
	mov    %rdi,%r8
	jmp    c94d <inflate_table+0x38d>
	lea    -0x1(%rax),%esi
	and    %edi,%esi
	lea    (%rax,%rsi,1),%edi
	mov    %ebx,%esi
	movzwl -0xf8(%rbp,%rsi,2),%eax
	add    $0xffff,%eax
	mov    %ax,-0xf8(%rbp,%rsi,2)
	add    $0x1,%r8d
	test   %ax,%ax
	je     c9a0 <inflate_table+0x3e0>
	mov    -0xa0(%rbp),%rax
	mov    -0x88(%rbp),%rsi
	cmp    %ebx,%esi
	jb     ca09 <inflate_table+0x449>
	mov    -0x60(%rbp),%rcx
	mov    -0x90(%rbp),%rsi
	xor    %r12d,%r12d
	mov    %rdi,-0x58(%rbp)
	mov    %rbx,%r14
	sub    %esi,%r14d
	mov    %r14b,-0xfb(%rbp)
	mov    %r11,-0x70(%rbp)
	mov    %r8d,%r11d
	movzwl (%rax,%r11,2),%r11d
	lea    0x1(%r11),%eax
	cmp    %eax,%r15d
	ja     ca3a <inflate_table+0x47a>
	cmp    %r11d,%r15d
	jbe    ca78 <inflate_table+0x4b8>
	mov    %r12,%r11
	movb   $0x60,-0xfc(%rbp)
	jmpq   ca41 <inflate_table+0x481>
	mov    %r8,%r12
	mov    %r11,%r13
	mov    -0x38(%rbp),%r15
	mov    $0x1,%eax
	leaveq 
	retq   
	cmp    %ebx,%r11d
	jne    ca91 <inflate_table+0x4d1>
	test   %edi,%edi
	je     c9d3 <inflate_table+0x413>
	movb   $0x40,-0xfc(%rbp)
	mov    -0x10(%rbp),%rax
	mov    %al,-0xfb(%rbp)
	movw   $0x0,-0xfa(%rbp)
	mov    -0xfc(%rbp),%ecx
	mov    %edi,%eax
	mov    %ecx,(%r9,%rax,4)
	mov    %r14d,%eax
	shl    $0x2,%rax
	mov    -0x68(%rbp),%rcx
	add    (%rcx),%rax
	mov    %rax,(%rcx)
	mov    -0x88(%rbp),%rcx
	mov    -0x8(%rbp),%rax
	mov    %ecx,(%rax)
	mov    -0x30(%rbp),%r14
	mov    -0x28(%rbp),%r13
	mov    -0x20(%rbp),%r12
	mov    -0x18(%rbp),%rbx
	xor    %eax,%eax
	mov    -0x38(%rbp),%r15
	leaveq 
	retq   
	mov    %r12,-0x58(%rbp)
	mov    -0xb8(%rbp),%r12
	and    %edi,%r12d
	mov    %r12,-0xb0(%rbp)
	cmp    %ecx,%r12d
	jne    caaf <inflate_table+0x4ef>
	mov    -0x60(%rbp),%rcx
	mov    -0x90(%rbp),%rsi
	xor    %r12d,%r12d
	jmpq   c94d <inflate_table+0x38d>
	movb   $0x0,-0xfc(%rbp)
	mov    %rdx,%r12
	shl    %cl,%r12d
	mov    %rcx,-0x60(%rbp)
	mov    %r14,%rcx
	mov    %rdx,%rax
	shl    %cl,%eax
	mov    %rcx,-0x10(%rbp)
	mov    %rsi,%rcx
	shr    %cl,%edi
	mov    %rcx,-0x90(%rbp)
	mov    %r11w,-0xfa(%rbp)
	mov    -0x78(%rbp),%r14
	mov    -0x70(%rbp),%r11
	mov    %r12,%r13
	jmp    cad0 <inflate_table+0x510>
	sub    %r15d,%r11d
	mov    %r11d,%eax
	movzwl 0x0(%r13,%rax,2),%r11d
	movzbl (%r10,%rax,2),%eax
	mov    %al,-0xfc(%rbp)
	jmp    ca41 <inflate_table+0x481>
	mov    %r8d,%esi
	mov    -0xa0(%rbp),%rax
	movzwl (%rax,%rsi,2),%ebx
	mov    -0x98(%rbp),%rsi
	movzwl (%rsi,%rbx,2),%ebx
	jmpq   c930 <inflate_table+0x370>
	mov    -0x90(%rbp),%rcx
	test   %ecx,%ecx
	je     cabd <inflate_table+0x4fd>
	mov    %rcx,%rsi
	mov    %rbx,%rcx
	sub    %esi,%ecx
	shl    %cl,%edx
	mov    %rbx,-0xa8(%rbp)
	jmp    cb1f <inflate_table+0x55f>
	mov    %rsi,%r13
	mov    %r13,%rsi
	sub    %eax,%esi
	lea    (%rsi,%rdi,1),%ecx
	mov    %ecx,%ecx
	mov    -0xfc(%rbp),%r15d
	mov    %r15d,(%r9,%rcx,4)
	cmp    %eax,%r13d
	jne    cacd <inflate_table+0x50d>
	lea    0x1f(%rbx),%ecx
	mov    %rdx,%rax
	shl    %cl,%eax
	mov    -0x48(%rbp),%r13
	mov    -0x50(%rbp),%r15
	mov    -0x58(%rbp),%rdi
	mov    -0xa8(%rbp),%rcx
	jmpq   cbc1 <inflate_table+0x601>
	mov    %ebx,%ebx
	movzwl -0xf8(%rbp,%rbx,2),%ebx
	sub    %ebx,%edx
	test   %edx,%edx
	jle    cb27 <inflate_table+0x567>
	add    $0x1,%ecx
	add    %edx,%edx
	lea    (%rcx,%rsi,1),%ebx
	cmp    %ebx,%r11d
	ja     cb0a <inflate_table+0x54a>
	mov    $0x1,%edx
	mov    %rdx,%rbx
	shl    %cl,%ebx
	mov    -0x80(%rbp),%r10
	cmp    $0x1,%r10d
	lea    (%r14,%rbx,1),%ebx
	mov    %rbx,-0x78(%rbp)
	jne    cb4f <inflate_table+0x58f>
	cmp    $0x354,%ebx
	ja     cbd9 <inflate_table+0x619>
	cmp    $0x2,%r10d
	je     cbf2 <inflate_table+0x632>
	mov    %r10,-0x80(%rbp)
	mov    -0x68(%rbp),%rdx
	mov    (%rdx),%rbx
	mov    %r12d,%r10d
	mov    %cl,(%rbx,%r10,4)
	mov    (%rdx),%r11
	mov    -0x88(%rbp),%rbx
	mov    %bl,0x1(%r11,%r10,4)
	mov    -0x58(%rbp),%rbx
	mov    %ebx,%ebx
	lea    (%r9,%rbx,4),%r9
	mov    (%rdx),%rbx
	mov    %r9,%rdx
	sub    %rbx,%rdx
	sar    $0x2,%rdx
	mov    %dx,0x2(%rbx,%r10,4)
	mov    -0xa8(%rbp),%rbx
	mov    -0x40(%rbp),%r10
	xor    %r12d,%r12d
	mov    $0x1,%edx
	mov    -0x70(%rbp),%r11
	pushq  -0xb0(%rbp)
	popq   -0xa8(%rbp)
	jmpq   c94d <inflate_table+0x38d>
	shr    %eax
	mov    %rax,%rsi
	and    %edi,%esi
	test   %esi,%esi
	jne    cbbf <inflate_table+0x5ff>
	test   %eax,%eax
	jne    c901 <inflate_table+0x341>
	xor    %edi,%edi
	jmpq   c909 <inflate_table+0x349>
	mov    %rdx,%rax
	mov    -0x30(%rbp),%r14
	mov    -0x28(%rbp),%r13
	mov    -0x20(%rbp),%r12
	mov    -0x18(%rbp),%rbx
	mov    -0x38(%rbp),%r15
	leaveq 
	retq   
	cmp    $0x250,%ebx
	jbe    cb59 <inflate_table+0x599>
	mov    %rdx,%rax
	mov    -0x30(%rbp),%r14
	mov    -0x28(%rbp),%r13
	mov    -0x20(%rbp),%r12
	mov    -0x18(%rbp),%rbx
	mov    -0x38(%rbp),%r15
	leaveq 
	retq   
	nopw   0x0(%rax,%rax,1)

000cc20 <_tr_init>:
	push   %rbp
	mov    %rsp,%rbp
	lea    0xd4(%rdi),%rax
	mov    %rax,0xb58(%rdi)
	lea    0xb10f(%rip),%rax        # 17d48 <static_l_desc>
	mov    %rax,0xb68(%rdi)
	lea    0x9c8(%rdi),%rax
	mov    %rax,0xb70(%rdi)
	lea    0xb113(%rip),%rax        # 17d68 <static_d_desc>
	mov    %rax,0xb80(%rdi)
	lea    0xabc(%rdi),%rax
	mov    %rax,0xb88(%rdi)
	lea    0xb117(%rip),%rax        # 17d88 <static_bl_desc>
	mov    %rax,0xb98(%rdi)
	movw   $0x0,0x1730(%rdi)
	movl   $0x0,0x1734(%rdi)
	callq  d330 <init_block>
	leaveq 
	retq   
	data16 nopw %cs:0x0(%rax,%rax,1)
	nopl   (%rax)

000cca0 <_tr_tally>:
	push   %rbp
	mov    %rsp,%rbp
	mov    0x1710(%rdi),%rcx
	mov    0x170c(%rdi),%eax
	mov    %si,(%rcx,%rax,2)
	mov    0x170c(%rdi),%ecx
	lea    0x1(%rcx),%eax
	mov    %eax,0x170c(%rdi)
	mov    0x1700(%rdi),%rax
	mov    %dl,(%rcx,%rax,1)
	test   %esi,%esi
	je     cd2b <_tr_tally+0x8b>
	mov    0x1728(%rdi),%eax
	add    $0x1,%eax
	mov    %eax,0x1728(%rdi)
	mov    0xb308(%rip),%r8        # 17ff0 <_dist_code@@Base+0x281c>
	mov    %edx,%ecx
	mov    0xb2d7(%rip),%rax        # 17fc8 <_length_code@@Base+0x28f4>
	movzbl (%rcx,%rax,1),%eax
	add    $0x101,%eax
	movslq %eax,%rax
	movzwl 0xd4(%rdi,%rax,4),%ecx
	add    $0x1,%ecx
	mov    %cx,0xd4(%rdi,%rax,4)
	lea    -0x1(%rsi),%eax
	cmp    $0xff,%eax
	jbe    cd58 <_tr_tally+0xb8>
	shr    $0x7,%eax
	add    $0x100,%eax
	mov    %eax,%eax
	movzbl (%rax,%r8,1),%eax
	jmp    cd5f <_tr_tally+0xbf>
	mov    %edx,%ecx
	movzwl 0xd4(%rdi,%rcx,4),%eax
	add    $0x1,%eax
	mov    %ax,0xd4(%rdi,%rcx,4)
	mov    0x1708(%rdi),%eax
	add    $0xffffffff,%eax
	cmp    0x170c(%rdi),%eax
	jne    cd77 <_tr_tally+0xd7>
	mov    $0x1,%eax
	leaveq 
	retq   
	mov    %eax,%eax
	movzbl (%rax,%r8,1),%eax
	movslq %eax,%rcx
	movzwl 0x9c8(%rdi,%rcx,4),%eax
	add    $0x1,%eax
	mov    %ax,0x9c8(%rdi,%rcx,4)
	jmp    cd40 <_tr_tally+0xa0>
	xor    %eax,%eax
	leaveq 
	retq   
	nopl   0x0(%rax,%rax,1)

000cd80 <_tr_flush_block>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %r14,-0x20(%rbp)
	mov    %r15,-0x28(%rbp)
	movslq 0xc4(%rdi),%rax
	test   %eax,%eax
	jg     ce04 <_tr_flush_block+0x84>
	xor    %eax,%eax
	lea    0x5(%rdx),%r8
	mov    %r12,%r14
	mov    %rdi,%r12
	mov    %r13,%r15
	mov    %rcx,%r13
	mov    %r8,%rdi
	lea    0x4(%rdx),%rcx
	cmp    %rcx,%rdi
	jae    ce2b <_tr_flush_block+0xab>
	mov    $0x10,%edx
	movslq 0xc8(%r12),%rcx
	cmp    $0x4,%ecx
	je     ce40 <_tr_flush_block+0xc0>
	cmp    %r8,%rdi
	je     ce40 <_tr_flush_block+0xc0>
	movslq 0x1734(%r12),%rcx
	cmp    $0xd,%ecx
	jg     ce74 <_tr_flush_block+0xf4>
	lea    0x4(%r13),%edx
	shl    %cl,%edx
	movzwl 0x1730(%r12),%esi
	or     %si,%dx
	mov    %dx,0x1730(%r12)
	add    $0x3,%ecx
	jmpq   ceea <_tr_flush_block+0x16a>
	mov    (%rdi),%r8
	movslq 0x58(%r8),%rax
	cmp    $0x2,%eax
	je     cf30 <_tr_flush_block+0x1b0>
	mov    %r12,%rax
	mov    %rdi,%r12
	mov    %rsi,%r14
	mov    %rdx,%r15
	mov    %r13,%rdx
	mov    %rcx,%r13
	jmpq   cf65 <_tr_flush_block+0x1e5>
	test   %rsi,%rsi
	je     cdb9 <_tr_flush_block+0x39>
	mov    %r12,%rdi
	mov    %r13,%rcx
	callq  2160 <_tr_stored_block@plt>
	jmpq   d064 <_tr_flush_block+0x2e4>
	movslq 0x1734(%r12),%rcx
	cmp    $0xd,%ecx
	jg     cfd1 <_tr_flush_block+0x251>
	lea    0x2(%r13),%eax
	shl    %cl,%eax
	movzwl 0x1730(%r12),%edx
	or     %dx,%ax
	mov    %ax,0x1730(%r12)
	lea    0x3(%rcx),%eax
	jmpq   d046 <_tr_flush_block+0x2c6>
	lea    0x4(%r13),%esi
	mov    %rsi,%rdi
	shl    %cl,%edi
	movzwl 0x1730(%r12),%ecx
	or     %cx,%di
	mov    %di,0x1730(%r12)
	mov    0x28(%r12),%r8
	lea    0x1(%r8),%rcx
	mov    %rcx,0x28(%r12)
	mov    0x10(%r12),%rcx
	mov    %dil,(%r8,%rcx,1)
	mov    0x28(%r12),%r8
	lea    0x1(%r8),%rcx
	mov    %rcx,0x28(%r12)
	movzwl 0x1730(%r12),%ecx
	shr    $0x8,%ecx
	mov    0x10(%r12),%rdi
	mov    %cl,(%r8,%rdi,1)
	movslq 0x1734(%r12),%rdi
	sub    %edi,%edx
	movzwl %si,%esi
	mov    %rdx,%rcx
	shr    %cl,%esi
	mov    %si,0x1730(%r12)
	lea    -0xd(%rdi),%ecx
	mov    %ecx,0x1734(%r12)
	movslq 0xb60(%r12),%rsi
	add    $0x1,%esi
	movslq 0xb78(%r12),%rdx
	add    $0x1,%edx
	lea    0x1(%rax),%ecx
	mov    %r12,%rdi
	callq  e330 <send_all_trees>
	lea    0xd4(%r12),%rsi
	lea    0x9c8(%r12),%rdx
	mov    %r12,%rdi
	callq  e620 <compress_block>
	jmpq   d064 <_tr_flush_block+0x2e4>
	mov    %rdi,%rax
	mov    %rbx,-0x8(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    %r8,%rbx
	mov    %rdi,%r12
	mov    %rax,%rdi
	mov    %rcx,%r13
	mov    %rsi,%r14
	mov    %rdx,%r15
	callq  eb30 <detect_data_type>
	mov    %eax,0x58(%rbx)
	mov    -0x18(%rbp),%rdx
	mov    -0x10(%rbp),%rax
	mov    -0x8(%rbp),%rbx
	lea    0xb58(%r12),%rsi
	mov    %r12,%rdi
	mov    %rax,-0x10(%rbp)
	mov    %rdx,-0x18(%rbp)
	callq  d780 <build_tree>
	lea    0xb70(%r12),%rsi
	mov    %r12,%rdi
	callq  d780 <build_tree>
	mov    %r12,%rdi
	callq  e290 <build_bl_tree>
	mov    0x1720(%r12),%r8
	add    $0xa,%r8
	shr    $0x3,%r8
	mov    0x1718(%r12),%rdi
	add    $0xa,%rdi
	shr    $0x3,%rdi
	cmp    %rdi,%r8
	jbe    d081 <_tr_flush_block+0x301>
	mov    %r15,%rdx
	mov    %r14,%rsi
	mov    -0x18(%rbp),%r15
	mov    -0x10(%rbp),%r14
	jmpq   cdb0 <_tr_flush_block+0x30>
	lea    0x2(%r13),%eax
	mov    %rax,%rsi
	shl    %cl,%esi
	movzwl 0x1730(%r12),%ecx
	or     %cx,%si
	mov    %si,0x1730(%r12)
	mov    0x28(%r12),%rdi
	lea    0x1(%rdi),%rcx
	mov    %rcx,0x28(%r12)
	mov    0x10(%r12),%rcx
	mov    %sil,(%rdi,%rcx,1)
	mov    0x28(%r12),%rdi
	lea    0x1(%rdi),%rcx
	mov    %rcx,0x28(%r12)
	movzwl 0x1730(%r12),%ecx
	shr    $0x8,%ecx
	mov    0x10(%r12),%rsi
	mov    %cl,(%rdi,%rsi,1)
	movslq 0x1734(%r12),%rsi
	sub    %esi,%edx
	movzwl %ax,%eax
	mov    %rdx,%rcx
	shr    %cl,%eax
	mov    %ax,0x1730(%r12)
	lea    -0xd(%rsi),%eax
	mov    %eax,0x1734(%r12)
	lea    0x8acb(%rip),%rsi        # 15b20 <static_ltree>
	lea    0x8f44(%rip),%rdx        # 15fa0 <static_dtree>
	mov    %r12,%rdi
	callq  e620 <compress_block>
	mov    %r12,%rdi
	callq  d330 <init_block>
	test   %r13d,%r13d
	jne    d097 <_tr_flush_block+0x317>
	mov    %r14,%r12
	mov    %r15,%r13
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	leaveq 
	retq   
	mov    %r15,%rdx
	mov    %r14,%rsi
	mov    -0x18(%rbp),%r15
	mov    -0x10(%rbp),%r14
	mov    %r8,%rdi
	jmpq   cdb0 <_tr_flush_block+0x30>
	mov    %r12,%rdi
	callq  ec00 <bi_windup>
	mov    %r14,%r12
	mov    %r15,%r13
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	leaveq 
	retq   
	nop

000d0b0 <_tr_flush_bits>:
	push   %rbp
	mov    %rsp,%rbp
	callq  ec80 <bi_flush>
	leaveq 
	retq   
	nopl   0x0(%rax,%rax,1)

000d0c0 <_tr_align>:
	push   %rbp
	mov    %rsp,%rbp
	mov    $0x2,%eax
	movslq 0x1734(%rdi),%rcx
	cmp    $0xd,%ecx
	jg     d0ed <_tr_align+0x2d>
	shl    %cl,%eax
	movzwl 0x1730(%rdi),%edx
	or     %dx,%ax
	mov    %ax,0x1730(%rdi)
	lea    0x3(%rcx),%eax
	jmp    d14d <_tr_align+0x8d>
	mov    %rax,%rdx
	shl    %cl,%edx
	movzwl 0x1730(%rdi),%ecx
	or     %cx,%dx
	mov    %dx,0x1730(%rdi)
	mov    0x28(%rdi),%rsi
	lea    0x1(%rsi),%rcx
	mov    %rcx,0x28(%rdi)
	mov    0x10(%rdi),%rcx
	mov    %dl,(%rsi,%rcx,1)
	mov    0x28(%rdi),%rdx
	lea    0x1(%rdx),%rcx
	mov    %rcx,0x28(%rdi)
	movzwl 0x1730(%rdi),%ecx
	shr    $0x8,%ecx
	mov    0x10(%rdi),%rsi
	mov    %cl,(%rdx,%rsi,1)
	mov    $0x10,%ecx
	movslq 0x1734(%rdi),%rdx
	sub    %edx,%ecx
	shr    %cl,%eax
	mov    %ax,0x1730(%rdi)
	lea    -0xd(%rdx),%eax
	mov    %eax,0x1734(%rdi)
	cmp    $0x9,%eax
	jg     d15d <_tr_align+0x9d>
	add    $0x7,%eax
	jmp    d1a7 <_tr_align+0xe7>
	mov    0x28(%rdi),%rcx
	lea    0x1(%rcx),%rax
	mov    %rax,0x28(%rdi)
	movzbl 0x1730(%rdi),%edx
	mov    0x10(%rdi),%rax
	mov    %dl,(%rcx,%rax,1)
	mov    0x28(%rdi),%rdx
	lea    0x1(%rdx),%rax
	mov    %rax,0x28(%rdi)
	movzwl 0x1730(%rdi),%eax
	shr    $0x8,%eax
	mov    0x10(%rdi),%rcx
	mov    %al,(%rdx,%rcx,1)
	movw   $0x0,0x1730(%rdi)
	movslq 0x1734(%rdi),%rax
	add    $0xfffffff7,%eax
	mov    %eax,0x1734(%rdi)
	callq  ec80 <bi_flush>
	leaveq 
	retq   
	data16 nopw %cs:0x0(%rax,%rax,1)
	nop

000d1c0 <_tr_stored_block>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %r13,-0x8(%rbp)
	mov    %r14,-0x10(%rbp)
	mov    %r15,-0x18(%rbp)
	movslq 0x1734(%rdi),%rax
	cmp    $0xd,%eax
	jg     d20f <_tr_stored_block+0x4f>
	mov    %r12,%r13
	mov    %rbx,%r12
	mov    %rdx,%rbx
	mov    %rdi,%r14
	mov    %rcx,%rdx
	mov    %rax,%rcx
	mov    %rdx,%rax
	shl    %cl,%eax
	movzwl 0x1730(%r14),%edx
	or     %dx,%ax
	mov    %ax,0x1730(%r14)
	lea    0x3(%rcx),%eax
	jmp    d288 <_tr_stored_block+0xc8>
	mov    %r12,%r13
	mov    %rbx,%r12
	mov    %rdx,%rbx
	mov    %rdi,%r14
	mov    %rcx,%rdi
	mov    %rax,%rcx
	mov    %rdi,%rax
	shl    %cl,%eax
	movzwl 0x1730(%r14),%ecx
	or     %cx,%ax
	mov    %ax,0x1730(%r14)
	mov    0x28(%r14),%rdx
	lea    0x1(%rdx),%rcx
	mov    %rcx,0x28(%r14)
	mov    0x10(%r14),%rcx
	mov    %al,(%rdx,%rcx,1)
	mov    0x28(%r14),%rdx
	lea    0x1(%rdx),%rax
	mov    %rax,0x28(%r14)
	movzwl 0x1730(%r14),%eax
	shr    $0x8,%eax
	mov    0x10(%r14),%rcx
	mov    %al,(%rdx,%rcx,1)
	movslq 0x1734(%r14),%rdx
	mov    $0x10,%ecx
	sub    %edx,%ecx
	movzwl %di,%eax
	shr    %cl,%eax
	mov    %ax,0x1730(%r14)
	lea    -0xd(%rdx),%eax
	mov    %eax,0x1734(%r14)
	mov    %rsi,%r15
	mov    %r14,%rdi
	callq  ec00 <bi_windup>
	mov    0x28(%r14),%rcx
	lea    0x1(%rcx),%rax
	mov    %rax,0x28(%r14)
	mov    0x10(%r14),%rax
	mov    %bl,(%rcx,%rax,1)
	mov    0x28(%r14),%rdx
	lea    0x1(%rdx),%rax
	mov    %rax,0x28(%r14)
	movzwl %bx,%eax
	shr    $0x8,%eax
	mov    0x10(%r14),%rcx
	mov    %al,(%rdx,%rcx,1)
	mov    0x28(%r14),%rcx
	lea    0x1(%rcx),%rax
	mov    %rax,0x28(%r14)
	mov    %rbx,%rdx
	not    %edx
	mov    0x10(%r14),%rax
	mov    %dl,(%rcx,%rax,1)
	mov    0x28(%r14),%rcx
	lea    0x1(%rcx),%rax
	mov    %rax,0x28(%r14)
	movzwl %dx,%eax
	shr    $0x8,%eax
	mov    0x10(%r14),%rdx
	mov    %al,(%rcx,%rdx,1)
	mov    0x28(%r14),%rdi
	add    0x10(%r14),%rdi
	mov    %r15,%rsi
	mov    %rbx,%rdx
	callq  21f0 <memcpy@plt>
	add    0x28(%r14),%rbx
	mov    %rbx,0x28(%r14)
	mov    %r12,%rbx
	mov    %r13,%r12
	mov    -0x18(%rbp),%r15
	mov    -0x10(%rbp),%r14
	mov    -0x8(%rbp),%r13
	leaveq 
	retq   
	nopw   %cs:0x0(%rax,%rax,1)

000d330 <init_block>:
	push   %rbp
	mov    %rsp,%rbp
	xor    %eax,%eax
	mov    %rax,%rcx
	jmp    d34b <init_block+0x1b>
	movslq %ecx,%rdx
	movw   $0x0,0xd4(%rdi,%rdx,4)
	add    $0x1,%ecx
	cmp    $0x11d,%ecx
	jle    d33b <init_block+0xb>
	mov    %rax,%rcx
	jmp    d368 <init_block+0x38>
	movslq %ecx,%rdx
	movw   $0x0,0x9c8(%rdi,%rdx,4)
	add    $0x1,%ecx
	cmp    $0x1d,%ecx
	jle    d358 <init_block+0x28>
	jmp    d37f <init_block+0x4f>
	movslq %eax,%rcx
	movw   $0x0,0xabc(%rdi,%rcx,4)
	add    $0x1,%eax
	cmp    $0x12,%eax
	jle    d36f <init_block+0x3f>
	movw   $0x1,0x4d4(%rdi)
	movq   $0x0,0x1720(%rdi)
	movq   $0x0,0x1718(%rdi)
	movl   $0x0,0x1728(%rdi)
	movl   $0x0,0x170c(%rdi)
	leaveq 
	retq   
	nopl   0x0(%rax)

000d3c0 <pqdownheap>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %r15,-0x8(%rbp)
	movslq %edx,%rax
	movslq 0xbc0(%rdi,%rax,4),%r11
	lea    (%rdx,%rdx,1),%eax
	jmp    d42b <pqdownheap+0x6b>
	cmp    %ecx,%eax
	jl     d447 <pqdownheap+0x87>
	mov    %rax,%rdx
	movslq %edx,%r9
	movslq 0xbc0(%rdi,%r9,4),%r8
	movzwl (%rsi,%r8,4),%ecx
	movzwl (%rsi,%r11,4),%eax
	cmp    %ax,%cx
	ja     d439 <pqdownheap+0x79>
	cmp    %ax,%cx
	jne    d418 <pqdownheap+0x58>
	movzbl 0x14bc(%rdi,%r8,1),%ecx
	movzbl 0x14bc(%rdi,%r11,1),%eax
	cmp    %al,%cl
	jae    d439 <pqdownheap+0x79>
	movslq 0xbc0(%rdi,%r9,4),%rax
	mov    %eax,0xbc0(%rdi,%r10,4)
	lea    (%rdx,%rdx,1),%eax
	movslq %edx,%r10
	movslq 0x14b4(%rdi),%rcx
	cmp    %ecx,%eax
	jle    d3dc <pqdownheap+0x1c>
	mov    %r11d,0xbc0(%rdi,%r10,4)
	mov    -0x8(%rbp),%r15
	leaveq 
	retq   
	movslq %eax,%rcx
	movslq 0xbc0(%rdi,%rcx,4),%rcx
	movzwl (%rsi,%rcx,4),%r9d
	lea    0x1(%rax),%edx
	movslq %edx,%r8
	movslq 0xbc0(%rdi,%r8,4),%r8
	movzwl (%rsi,%r8,4),%r15d
	cmp    %r15w,%r9w
	ja     d3e3 <pqdownheap+0x23>
	cmp    %r15w,%r9w
	je     d482 <pqdownheap+0xc2>
	mov    %rax,%rdx
	jmpq   d3e3 <pqdownheap+0x23>
	movzbl 0x14bc(%rdi,%rcx,1),%ecx
	movzbl 0x14bc(%rdi,%r8,1),%r8d
	cmp    %r8b,%cl
	jae    d3e3 <pqdownheap+0x23>
	mov    %rax,%rdx
	jmpq   d3e3 <pqdownheap+0x23>
	data16 nopw %cs:0x0(%rax,%rax,1)
	nop

000d4b0 <gen_bitlen>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    (%rsi),%r9
	mov    0x10(%rsi),%rax
	movslq 0x18(%rax),%r8
	movslq 0x8(%rsi),%rcx
	mov    %rcx,-0x30(%rbp)
	mov    (%rax),%r11
	mov    0x8(%rax),%rsi
	movslq 0x10(%rax),%rdx
	xor    %r10d,%r10d
	mov    %r10,%rax
	jmp    d4ee <gen_bitlen+0x3e>
	movslq %eax,%rcx
	movw   $0x0,0xba0(%rdi,%rcx,2)
	add    $0x1,%eax
	cmp    $0xf,%eax
	jle    d4de <gen_bitlen+0x2e>
	movslq 0x14b8(%rdi),%rax
	movslq 0xbc0(%rdi,%rax,4),%rax
	movw   $0x0,0x2(%r9,%rax,4)
	movslq 0x14b8(%rdi),%rax
	add    $0x1,%eax
	mov    %rbx,-0x8(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %r15,-0x28(%rbp)
	mov    -0x30(%rbp),%r15
	mov    %r10,%rcx
	jmp    d57f <gen_bitlen+0xcf>
	mov    %r14,%r12
	sub    %edx,%r12d
	movslq %r12d,%r12
	movslq (%rsi,%r12,4),%r13
	movzwl (%r9,%r14,4),%r12d
	add    %r13d,%ebx
	mov    %ebx,%ebx
	imul   %r12,%rbx
	add    0x1718(%rdi),%rbx
	test   %r11,%r11
	mov    %rbx,0x1718(%rdi)
	je     d57c <gen_bitlen+0xcc>
	movzwl 0x2(%r11,%r14,4),%ebx
	add    %r13d,%ebx
	mov    %ebx,%ebx
	imul   %rbx,%r12
	add    0x1720(%rdi),%r12
	mov    %r12,0x1720(%rdi)
	add    $0x1,%eax
	cmp    $0x23c,%eax
	jle    d5a0 <gen_bitlen+0xf0>
	test   %ecx,%ecx
	jne    d5fa <gen_bitlen+0x14a>
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	leaveq 
	retq   
	movslq %eax,%rbx
	movslq 0xbc0(%rdi,%rbx,4),%r14
	movzwl 0x2(%r9,%r14,4),%ebx
	movzwl 0x2(%r9,%rbx,4),%ebx
	add    $0x1,%ebx
	cmp    %r8d,%ebx
	jle    d5c5 <gen_bitlen+0x115>
	add    $0x1,%ecx
	mov    %r8,%rbx
	mov    %bx,0x2(%r9,%r14,4)
	cmp    %r15d,%r14d
	jg     d57c <gen_bitlen+0xcc>
	movslq %ebx,%r13
	movzwl 0xba0(%rdi,%r13,2),%r12d
	add    $0x1,%r12d
	mov    %r12w,0xba0(%rdi,%r13,2)
	cmp    %edx,%r14d
	jge    d531 <gen_bitlen+0x81>
	mov    %r10,%r13
	jmpq   d53e <gen_bitlen+0x8e>
	lea    -0x1(%r8),%r10d
	mov    %r10,%rdx
	jmp    d606 <gen_bitlen+0x156>
	add    $0xffffffff,%edx
	movslq %edx,%rbx
	movzwl 0xba0(%rdi,%rbx,2),%esi
	test   %si,%si
	je     d603 <gen_bitlen+0x153>
	add    $0xffff,%esi
	mov    %si,0xba0(%rdi,%rbx,2)
	add    $0x1,%edx
	movslq %edx,%rsi
	movzwl 0xba0(%rdi,%rsi,2),%edx
	add    $0x2,%edx
	mov    %dx,0xba0(%rdi,%rsi,2)
	movzwl 0xba0(%rdi,%r8,2),%edx
	add    $0xffff,%edx
	mov    %dx,0xba0(%rdi,%r8,2)
	add    $0xfffffffe,%ecx
	test   %ecx,%ecx
	jle    d6ad <gen_bitlen+0x1fd>
	mov    %r10,%rdx
	jmp    d606 <gen_bitlen+0x156>
	add    $0xffffffff,%eax
	movslq %eax,%rdx
	movslq 0xbc0(%rdi,%rdx,4),%rbx
	cmp    %ebx,%r15d
	jl     d6a5 <gen_bitlen+0x1f5>
	movzwl 0x2(%r9,%rbx,4),%esi
	cmp    %r8d,%esi
	je     d6a2 <gen_bitlen+0x1f2>
	movzwl (%r9,%rbx,4),%edx
	neg    %rsi
	add    %r10,%rsi
	imul   %rsi,%rdx
	add    0x1718(%rdi),%rdx
	mov    %rdx,0x1718(%rdi)
	mov    %r8w,0x2(%r9,%rbx,4)
	add    $0xffffffff,%ecx
	test   %ecx,%ecx
	jne    d661 <gen_bitlen+0x1b1>
	add    $0xffffffff,%r8d
	test   %r8d,%r8d
	jne    d6c8 <gen_bitlen+0x218>
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	leaveq 
	retq   
	movslq %r8d,%r10
	movzwl 0xba0(%rdi,%r10,2),%ecx
	jmp    d6a5 <gen_bitlen+0x1f5>
	nopw   %cs:0x0(%rax,%rax,1)

000d6e0 <gen_codes>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x40,%rsp
	xor    %r9d,%r9d
	mov    $0x1,%eax
	mov    %r9,%rcx
	jmp    d712 <gen_codes+0x32>
	lea    -0x1(%rax),%r8d
	movslq %r8d,%r8
	movzwl (%rdx,%r8,2),%r8d
	add    %r8d,%ecx
	add    %ecx,%ecx
	movslq %eax,%r8
	mov    %cx,-0x40(%rbp,%r8,2)
	add    $0x1,%eax
	cmp    $0xf,%eax
	jle    d6f5 <gen_codes+0x15>
	mov    %r12,-0x8(%rbp)
	mov    %r13,-0x10(%rbp)
	mov    %r14,-0x18(%rbp)
	mov    %r15,-0x20(%rbp)
	mov    %r9,%r12
	mov    %rsi,%r13
	mov    %rdi,%r14
	jmp    d75b <gen_codes+0x7b>
	movslq %r12d,%r15
	movzwl 0x2(%r14,%r15,4),%esi
	test   %si,%si
	je     d757 <gen_codes+0x77>
	movzwl -0x40(%rbp,%rsi,2),%edi
	lea    0x1(%rdi),%eax
	mov    %ax,-0x40(%rbp,%rsi,2)
	callq  ebd0 <bi_reverse>
	mov    %ax,(%r14,%r15,4)
	add    $0x1,%r12d
	cmp    %r13d,%r12d
	jle    d732 <gen_codes+0x52>
	mov    -0x20(%rbp),%r15
	mov    -0x18(%rbp),%r14
	mov    -0x10(%rbp),%r13
	mov    -0x8(%rbp),%r12
	leaveq 
	retq   
	data16 nopw %cs:0x0(%rax,%rax,1)
	nopl   (%rax)

000d780 <build_tree>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x40,%rsp
	mov    (%rsi),%r10
	mov    0x10(%rsi),%rax
	movslq 0x14(%rax),%r11
	mov    (%rax),%r8
	movl   $0x0,0x14b4(%rdi)
	movl   $0x23d,0x14b8(%rdi)
	mov    $0xffffffffffffffff,%rax
	xor    %ecx,%ecx
	jmp    d7de <build_tree+0x5e>
	movslq 0x14b4(%rdi),%rax
	add    $0x1,%eax
	mov    %eax,0x14b4(%rdi)
	movslq %eax,%rax
	mov    %ecx,0xbc0(%rdi,%rax,4)
	movb   $0x0,0x14bc(%rdi,%r9,1)
	mov    %rcx,%rax
	add    $0x1,%ecx
	cmp    %ecx,%r11d
	jg     d7e8 <build_tree+0x68>
	xor    %r9d,%r9d
	jmp    d84f <build_tree+0xcf>
	movslq %ecx,%r9
	movzwl (%r10,%r9,4),%edx
	test   %dx,%dx
	jne    d7b5 <build_tree+0x35>
	movw   $0x0,0x2(%r10,%r9,4)
	jmp    d7db <build_tree+0x5b>
	lea    0x1(%rax),%ecx
	mov    %rcx,%rax
	movslq %edx,%rdx
	mov    %ecx,0xbc0(%rdi,%rdx,4)
	movslq %ecx,%rdx
	movw   $0x1,(%r10,%rdx,4)
	movb   $0x0,0x14bc(%rdi,%rdx,1)
	mov    0x1718(%rdi),%rcx
	add    $0xffffffffffffffff,%rcx
	test   %r8,%r8
	mov    %rcx,0x1718(%rdi)
	je     d84f <build_tree+0xcf>
	movzwl 0x2(%r8,%rdx,4),%edx
	mov    0x1720(%rdi),%rcx
	sub    %rdx,%rcx
	mov    %rcx,0x1720(%rdi)
	movslq 0x14b4(%rdi),%rcx
	cmp    $0x1,%ecx
	jle    d895 <build_tree+0x115>
	mov    %eax,0x8(%rsi)
	movslq 0x14b4(%rdi),%rdx
	mov    %rdx,%rcx
	shr    $0x1f,%ecx
	add    %edx,%ecx
	sar    %ecx
	mov    %rbx,-0x18(%rbp)
	mov    %r12,-0x20(%rbp)
	mov    %r13,-0x28(%rbp)
	mov    %r14,-0x30(%rbp)
	mov    %r15,-0x38(%rbp)
	mov    %r11,-0x40(%rbp)
	mov    %r10,%rbx
	mov    %rdi,%r12
	mov    %rcx,%r13
	mov    %rsi,%r15
	jmp    d8c7 <build_tree+0x147>
	lea    0x1(%rcx),%edx
	mov    %edx,0x14b4(%rdi)
	cmp    $0x1,%eax
	jle    d7ff <build_tree+0x7f>
	mov    %r9,%rcx
	jmpq   d805 <build_tree+0x85>
	mov    %rax,%r14
	mov    %r12,%rdi
	mov    %rbx,%rsi
	mov    %r13,%rdx
	callq  d3c0 <pqdownheap>
	add    $0xffffffff,%r13d
	mov    %r14,%rax
	test   %r13d,%r13d
	jg     d8af <build_tree+0x12f>
	mov    $0x1,%r14d
	mov    %r15,-0x10(%rbp)
	mov    %rax,-0x8(%rbp)
	mov    -0x40(%rbp),%r13
	jmp    d8e4 <build_tree+0x164>
	add    $0x1,%r13d
	movslq 0x14b4(%r12),%rcx
	lea    -0x1(%rcx),%eax
	mov    %eax,0x14b4(%r12)
	movslq 0xbc0(%r12,%rcx,4),%rax
	movslq 0xbc4(%r12),%r15
	mov    %eax,0xbc4(%r12)
	mov    %r12,%rdi
	mov    %rbx,%rsi
	mov    %r14,%rdx
	callq  d3c0 <pqdownheap>
	movslq 0x14b8(%r12),%rcx
	lea    -0x1(%rcx),%eax
	movslq %eax,%rax
	add    $0xfffffffe,%ecx
	movslq 0xbc4(%r12),%rsi
	mov    %r15d,0xbc0(%r12,%rax,4)
	mov    %ecx,0x14b8(%r12)
	movslq %ecx,%rax
	mov    %esi,0xbc0(%r12,%rax,4)
	movzwl (%rbx,%rsi,4),%ecx
	movzwl (%rbx,%r15,4),%eax
	add    %ecx,%eax
	movslq %r13d,%rdx
	mov    %ax,(%rbx,%rdx,4)
	movzbl 0x14bc(%r12,%r15,1),%ecx
	movzbl 0x14bc(%r12,%rsi,1),%eax
	cmp    %cl,%al
	ja     d97c <build_tree+0x1fc>
	mov    %rcx,%rax
	add    $0x1,%eax
	mov    %al,0x14bc(%r12,%rdx,1)
	mov    %r13w,0x2(%rbx,%rsi,4)
	mov    %r13w,0x2(%rbx,%r15,4)
	mov    %r13d,0xbc4(%r12)
	mov    %r12,%rdi
	mov    %rbx,%rsi
	mov    %r14,%rdx
	callq  d3c0 <pqdownheap>
	movslq 0x14b4(%r12),%rax
	cmp    $0x1,%eax
	jg     d8e0 <build_tree+0x160>
	movslq 0x14b8(%r12),%rax
	add    $0xffffffff,%eax
	mov    %eax,0x14b8(%r12)
	movslq 0xbc4(%r12),%rcx
	movslq %eax,%rax
	mov    %ecx,0xbc0(%r12,%rax,4)
	mov    %r12,%rdi
	mov    -0x10(%rbp),%rsi
	callq  d4b0 <gen_bitlen>
	lea    0xba0(%r12),%rdx
	mov    %rbx,%rdi
	mov    -0x8(%rbp),%rsi
	callq  d6e0 <gen_codes>
	mov    -0x38(%rbp),%r15
	mov    -0x30(%rbp),%r14
	mov    -0x28(%rbp),%r13
	mov    -0x20(%rbp),%r12
	mov    -0x18(%rbp),%rbx
	leaveq 
	retq   
	nopw   %cs:0x0(%rax,%rax,1)

000da20 <scan_tree>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %r14,-0x20(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    %rbx,-0x8(%rbp)
	mov    %r15,-0x28(%rbp)
	mov    $0x3,%r12d
	mov    $0x4,%ebx
	mov    $0x8a,%r13d
	mov    $0x7,%ecx
	movzwl 0x2(%rsi),%r8d
	test   %r8w,%r8w
	jne    da63 <scan_tree+0x43>
	mov    %r12,%rbx
	mov    %r13,%rcx
	lea    0x1(%rdx),%eax
	movslq %eax,%rax
	movw   $0xffff,0x2(%rsi,%rax,4)
	xor    %r15d,%r15d
	mov    $0xffffffffffffffff,%r9
	mov    %r15,%rax
	mov    %rax,%r10
	jmp    daac <scan_tree+0x8c>
	movzwl 0xabc(%rdi,%rcx,4),%ebx
	lea    0x1(%rbx,%r10,1),%ebx
	mov    %bx,0xabc(%rdi,%rcx,4)
	test   %r11w,%r11w
	jne    dac6 <scan_tree+0xa6>
	mov    %r8,%r9
	mov    %r12,%rbx
	mov    %r13,%rcx
	mov    %r15,%r8
	mov    %r8,%r10
	cmp    %edx,%eax
	jle    dae0 <scan_tree+0xc0>
	mov    -0x28(%rbp),%r15
	mov    -0x8(%rbp),%rbx
	mov    -0x10(%rbp),%r12
	mov    -0x18(%rbp),%r13
	mov    -0x20(%rbp),%r14
	leaveq 
	retq   
	cmp    %r8d,%r11d
	je     db02 <scan_tree+0xe2>
	mov    %r8,%r9
	mov    %r11,%r8
	mov    $0x7,%ecx
	mov    $0x4,%ebx
	mov    %r15,%r10
	jmp    daac <scan_tree+0x8c>
	add    $0x1,%eax
	movslq %eax,%r11
	movzwl 0x2(%rsi,%r11,4),%r11d
	lea    0x1(%r10),%r14d
	cmp    %r14d,%ecx
	jle    db15 <scan_tree+0xf5>
	cmp    %r8d,%r11d
	jne    db15 <scan_tree+0xf5>
	mov    %r11,%r8
	mov    %r14,%r10
	jmp    daac <scan_tree+0x8c>
	mov    %r11,%r9
	mov    $0x6,%ecx
	mov    %r9,%r8
	mov    %r12,%rbx
	mov    %r15,%r10
	jmp    daac <scan_tree+0x8c>
	movslq %r8d,%rcx
	cmp    %ebx,%r14d
	jl     da82 <scan_tree+0x62>
	test   %r8d,%r8d
	jg     db42 <scan_tree+0x122>
	cmp    $0xa,%r14d
	jle    db70 <scan_tree+0x150>
	movzwl 0xb04(%rdi),%ecx
	add    $0x1,%ecx
	mov    %cx,0xb04(%rdi)
	jmpq   da97 <scan_tree+0x77>
	cmp    %r9d,%r8d
	je     db5a <scan_tree+0x13a>
	movzwl 0xabc(%rdi,%rcx,4),%ebx
	add    $0x1,%ebx
	mov    %bx,0xabc(%rdi,%rcx,4)
	movzwl 0xafc(%rdi),%ecx
	add    $0x1,%ecx
	mov    %cx,0xafc(%rdi)
	jmpq   da97 <scan_tree+0x77>
	movzwl 0xb00(%rdi),%ecx
	add    $0x1,%ecx
	mov    %cx,0xb00(%rdi)
	jmpq   da97 <scan_tree+0x77>
	nopw   %cs:0x0(%rax,%rax,1)

000db90 <send_tree>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %r15,-0x28(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    %rbx,-0x8(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    $0x10,%r9d
	xor    %r8d,%r8d
	mov    $0x3,%eax
	mov    $0x4,%ecx
	mov    $0xffffffffffffffff,%r10
	mov    $0x8a,%ebx
	mov    $0x7,%r12d
	movzwl 0x2(%rsi),%r13d
	test   %r13w,%r13w
	jne    dbf0 <send_tree+0x60>
	mov    %rbx,%r12
	mov    %rax,%rcx
	mov    %r8,%rbx
	mov    %rbx,%r13
	mov    %r13,%r14
	jmpq   dc97 <send_tree+0x107>
	mov    %r8,%rbx
	mov    %rbx,%r14
	jmpq   dc97 <send_tree+0x107>
	movzwl 0xabc(%rdi,%r12,4),%eax
	mov    %rax,%r14
	shl    %cl,%r14d
	movzwl 0x1730(%rdi),%ecx
	or     %cx,%r14w
	mov    %r14w,0x1730(%rdi)
	mov    0x28(%rdi),%rcx
	lea    0x1(%rcx),%r15
	mov    %r15,0x28(%rdi)
	mov    0x10(%rdi),%r15
	mov    %r14b,(%rcx,%r15,1)
	mov    0x28(%rdi),%r15
	lea    0x1(%r15),%rcx
	mov    %rcx,0x28(%rdi)
	movzwl 0x1730(%rdi),%ecx
	shr    $0x8,%ecx
	mov    0x10(%rdi),%r14
	mov    %cl,(%r15,%r14,1)
	movslq 0x1734(%rdi),%r14
	mov    %r9,%rcx
	sub    %r14d,%ecx
	shr    %cl,%eax
	lea    -0x10(%r13,%r14,1),%ecx
	mov    %ecx,0x1734(%rdi)
	mov    %ax,0x1730(%rdi)
	add    $0xffffffff,%r11d
	test   %r11d,%r11d
	jne    dcc8 <send_tree+0x138>
	mov    -0x30(%rbp),%r13
	mov    $0x3,%eax
	test   %r13w,%r13w
	jne    dd05 <send_tree+0x175>
	mov    $0x8a,%r12d
	mov    %rax,%rcx
	mov    %r8,%r13
	mov    %r13,%r14
	cmp    %edx,%ebx
	jle    dd21 <send_tree+0x191>
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	mov    -0x18(%rbp),%r13
	mov    -0x20(%rbp),%r14
	mov    -0x28(%rbp),%r15
	leaveq 
	retq   
	movslq %r13d,%r12
	cmp    %ecx,%r11d
	jge    dd4e <send_tree+0x1be>
	mov    %r15,-0x30(%rbp)
	mov    %r13,%r10
	movzwl 0xabe(%rdi,%r12,4),%r13d
	mov    %r9,%rax
	sub    %r13d,%eax
	movslq 0x1734(%rdi),%rcx
	cmp    %ecx,%eax
	jl     dbfb <send_tree+0x6b>
	movzwl 0xabc(%rdi,%r12,4),%eax
	shl    %cl,%eax
	movzwl 0x1730(%rdi),%r14d
	or     %r14w,%ax
	add    %r13d,%ecx
	jmpq   dc63 <send_tree+0xd3>
	cmp    %r10d,%r13d
	je     dda0 <send_tree+0x210>
	mov    $0x7,%r12d
	mov    $0x4,%ecx
	mov    %r8,%r14
	jmpq   dc97 <send_tree+0x107>
	add    $0x1,%ebx
	movslq %ebx,%r11
	movzwl 0x2(%rsi,%r11,4),%r15d
	lea    0x1(%r14),%r11d
	cmp    %r11d,%r12d
	jle    dcb5 <send_tree+0x125>
	cmp    %r13d,%r15d
	jne    dcb5 <send_tree+0x125>
	mov    %r15,%r13
	mov    %r11,%r14
	jmpq   dc97 <send_tree+0x107>
	test   %r13d,%r13d
	jg     ddb4 <send_tree+0x224>
	cmp    $0xa,%r11d
	jle    de00 <send_tree+0x270>
	movzwl 0xb06(%rdi),%r12d
	mov    %r9,%r10
	sub    %r12d,%r10d
	movslq 0x1734(%rdi),%rcx
	cmp    %r10d,%ecx
	jg     de43 <send_tree+0x2b3>
	mov    %r13,%r10
	mov    %r15,%r13
	movzwl 0xb04(%rdi),%r11d
	shl    %cl,%r11d
	movzwl 0x1730(%rdi),%r15d
	or     %r15w,%r11w
	add    %r12d,%ecx
	jmpq   deb2 <send_tree+0x322>
	mov    $0x6,%r12d
	mov    %rax,%rcx
	mov    %r8,%r14
	mov    %r13,%r10
	jmpq   dc97 <send_tree+0x107>
	cmp    %r10d,%r13d
	jne    deed <send_tree+0x35d>
	mov    %r13,%r10
	mov    %r15,%r13
	movzwl 0xafe(%rdi),%r14d
	mov    %r9,%r12
	sub    %r14d,%r12d
	movslq 0x1734(%rdi),%rcx
	cmp    %ecx,%r12d
	jl     df49 <send_tree+0x3b9>
	movzwl 0xafc(%rdi),%r12d
	shl    %cl,%r12d
	movzwl 0x1730(%rdi),%r15d
	or     %r15w,%r12w
	add    %r14d,%ecx
	jmpq   dfb2 <send_tree+0x422>
	movzwl 0xb02(%rdi),%r12d
	mov    %r9,%r10
	sub    %r12d,%r10d
	movslq 0x1734(%rdi),%rcx
	cmp    %ecx,%r10d
	jl     dfed <send_tree+0x45d>
	mov    %r13,%r10
	mov    %r15,%r13
	movzwl 0xb00(%rdi),%r11d
	shl    %cl,%r11d
	movzwl 0x1730(%rdi),%r15d
	or     %r15w,%r11w
	add    %r12d,%ecx
	jmpq   e05c <send_tree+0x4cc>
	mov    %r13,%r10
	mov    %r15,%r13
	movzwl 0xb04(%rdi),%r11d
	mov    %r11,%rax
	shl    %cl,%eax
	movzwl 0x1730(%rdi),%ecx
	or     %cx,%ax
	mov    %ax,0x1730(%rdi)
	mov    0x28(%rdi),%rcx
	lea    0x1(%rcx),%r15
	mov    %r15,0x28(%rdi)
	mov    0x10(%rdi),%r15
	mov    %al,(%rcx,%r15,1)
	mov    0x28(%rdi),%r15
	lea    0x1(%r15),%rax
	mov    %rax,0x28(%rdi)
	movzwl 0x1730(%rdi),%eax
	shr    $0x8,%eax
	mov    0x10(%rdi),%rcx
	mov    %al,(%r15,%rcx,1)
	movslq 0x1734(%rdi),%rax
	mov    %r9,%rcx
	sub    %eax,%ecx
	shr    %cl,%r11d
	lea    -0x10(%r12,%rax,1),%ecx
	mov    $0x3,%eax
	mov    %ecx,0x1734(%rdi)
	mov    %r11w,0x1730(%rdi)
	cmp    $0x9,%ecx
	jg     e097 <send_tree+0x507>
	lea    0xfff6(%r14),%r12d
	shl    %cl,%r12d
	or     %r11w,%r12w
	mov    %r12w,0x1730(%rdi)
	add    $0x7,%ecx
	mov    %ecx,0x1734(%rdi)
	jmpq   dc82 <send_tree+0xf2>
	movzwl 0xabe(%rdi,%r12,4),%r10d
	mov    %r9,%r11
	sub    %r10d,%r11d
	movslq 0x1734(%rdi),%rcx
	cmp    %ecx,%r11d
	jl     e10f <send_tree+0x57f>
	movzwl 0xabc(%rdi,%r12,4),%r11d
	mov    %r13,%r12
	mov    %r15,%r13
	mov    %r10,%r15
	mov    %r12,%r10
	shl    %cl,%r11d
	movzwl 0x1730(%rdi),%r12d
	or     %r12w,%r11w
	mov    %r11w,0x1730(%rdi)
	add    %r15d,%ecx
	mov    %ecx,0x1734(%rdi)
	mov    %r14,%r11
	jmpq   ddc3 <send_tree+0x233>
	movzwl 0xafc(%rdi),%r12d
	mov    %r12,%rax
	shl    %cl,%eax
	movzwl 0x1730(%rdi),%ecx
	or     %cx,%ax
	mov    %ax,0x1730(%rdi)
	mov    0x28(%rdi),%rcx
	lea    0x1(%rcx),%r15
	mov    %r15,0x28(%rdi)
	mov    0x10(%rdi),%r15
	mov    %al,(%rcx,%r15,1)
	mov    0x28(%rdi),%rcx
	lea    0x1(%rcx),%rax
	mov    %rax,0x28(%rdi)
	movzwl 0x1730(%rdi),%eax
	shr    $0x8,%eax
	mov    0x10(%rdi),%r15
	mov    %al,(%rcx,%r15,1)
	movslq 0x1734(%rdi),%rax
	mov    %r9,%rcx
	sub    %eax,%ecx
	shr    %cl,%r12d
	lea    -0x10(%r14,%rax,1),%ecx
	mov    $0x3,%eax
	mov    %ecx,0x1734(%rdi)
	mov    %r12w,0x1730(%rdi)
	cmp    $0xe,%ecx
	jg     e19a <send_tree+0x60a>
	add    $0xfffd,%r11d
	shl    %cl,%r11d
	or     %r12w,%r11w
	mov    %r11w,0x1730(%rdi)
	add    $0x2,%ecx
	mov    %ecx,0x1734(%rdi)
	jmpq   dc82 <send_tree+0xf2>
	mov    %r13,%r10
	mov    %r15,%r13
	movzwl 0xb00(%rdi),%r11d
	mov    %r11,%rax
	shl    %cl,%eax
	movzwl 0x1730(%rdi),%ecx
	or     %cx,%ax
	mov    %ax,0x1730(%rdi)
	mov    0x28(%rdi),%rcx
	lea    0x1(%rcx),%r15
	mov    %r15,0x28(%rdi)
	mov    0x10(%rdi),%r15
	mov    %al,(%rcx,%r15,1)
	mov    0x28(%rdi),%r15
	lea    0x1(%r15),%rax
	mov    %rax,0x28(%rdi)
	movzwl 0x1730(%rdi),%eax
	shr    $0x8,%eax
	mov    0x10(%rdi),%rcx
	mov    %al,(%r15,%rcx,1)
	movslq 0x1734(%rdi),%rax
	mov    %r9,%rcx
	sub    %eax,%ecx
	shr    %cl,%r11d
	lea    -0x10(%r12,%rax,1),%ecx
	mov    $0x3,%eax
	mov    %ecx,0x1734(%rdi)
	mov    %r11w,0x1730(%rdi)
	cmp    $0xd,%ecx
	jg     e212 <send_tree+0x682>
	lea    0xfffe(%r14),%r12d
	shl    %cl,%r12d
	or     %r11w,%r12w
	mov    %r12w,0x1730(%rdi)
	add    $0x3,%ecx
	mov    %ecx,0x1734(%rdi)
	jmpq   dc82 <send_tree+0xf2>
	add    $0xfff6,%r14d
	mov    %r14,%r12
	shl    %cl,%r12d
	or     %r12w,%r11w
	mov    %r11w,0x1730(%rdi)
	mov    0x28(%rdi),%r12
	lea    0x1(%r12),%rcx
	mov    %rcx,0x28(%rdi)
	mov    0x10(%rdi),%rcx
	mov    %r11b,(%r12,%rcx,1)
	mov    0x28(%rdi),%r11
	lea    0x1(%r11),%rcx
	mov    %rcx,0x28(%rdi)
	movzwl 0x1730(%rdi),%ecx
	shr    $0x8,%ecx
	mov    0x10(%rdi),%r12
	mov    %cl,(%r11,%r12,1)
	movslq 0x1734(%rdi),%r12
	mov    %r9,%rcx
	sub    %r12d,%ecx
	movzwl %r14w,%r11d
	shr    %cl,%r11d
	mov    %r11w,0x1730(%rdi)
	lea    -0x9(%r12),%ecx
	mov    %ecx,0x1734(%rdi)
	jmpq   dc82 <send_tree+0xf2>
	movzwl 0xabc(%rdi,%r12,4),%eax
	mov    %r10,%r11
	mov    %r13,%r10
	mov    %r15,%r13
	mov    %rax,%r12
	shl    %cl,%r12d
	movzwl 0x1730(%rdi),%ecx
	or     %cx,%r12w
	mov    %r12w,0x1730(%rdi)
	mov    0x28(%rdi),%r15
	lea    0x1(%r15),%rcx
	mov    %rcx,0x28(%rdi)
	mov    0x10(%rdi),%rcx
	mov    %r12b,(%r15,%rcx,1)
	mov    0x28(%rdi),%r15
	lea    0x1(%r15),%rcx
	mov    %rcx,0x28(%rdi)
	movzwl 0x1730(%rdi),%ecx
	shr    $0x8,%ecx
	mov    0x10(%rdi),%r12
	mov    %cl,(%r15,%r12,1)
	movslq 0x1734(%rdi),%r12
	mov    %r9,%rcx
	sub    %r12d,%ecx
	shr    %cl,%eax
	mov    %ax,0x1730(%rdi)
	lea    -0x10(%r11,%r12,1),%eax
	mov    %eax,0x1734(%rdi)
	mov    %r14,%r11
	mov    $0x3,%eax
	jmpq   ddc3 <send_tree+0x233>
	add    $0xfffd,%r11d
	mov    %r11,%r14
	shl    %cl,%r14d
	or     %r14w,%r12w
	mov    %r12w,0x1730(%rdi)
	mov    0x28(%rdi),%r14
	lea    0x1(%r14),%rcx
	mov    %rcx,0x28(%rdi)
	mov    0x10(%rdi),%rcx
	mov    %r12b,(%r14,%rcx,1)
	mov    0x28(%rdi),%r12
	lea    0x1(%r12),%rcx
	mov    %rcx,0x28(%rdi)
	movzwl 0x1730(%rdi),%ecx
	shr    $0x8,%ecx
	mov    0x10(%rdi),%r14
	mov    %cl,(%r12,%r14,1)
	movslq 0x1734(%rdi),%r12
	mov    %r9,%rcx
	sub    %r12d,%ecx
	movzwl %r11w,%r11d
	shr    %cl,%r11d
	mov    %r11w,0x1730(%rdi)
	lea    -0xe(%r12),%ecx
	mov    %ecx,0x1734(%rdi)
	jmpq   dc82 <send_tree+0xf2>
	lea    0xfffe(%r14),%r12d
	mov    %r12,%r14
	shl    %cl,%r14d
	or     %r14w,%r11w
	mov    %r11w,0x1730(%rdi)
	mov    0x28(%rdi),%r14
	lea    0x1(%r14),%rcx
	mov    %rcx,0x28(%rdi)
	mov    0x10(%rdi),%rcx
	mov    %r11b,(%r14,%rcx,1)
	mov    0x28(%rdi),%r11
	lea    0x1(%r11),%rcx
	mov    %rcx,0x28(%rdi)
	movzwl 0x1730(%rdi),%ecx
	shr    $0x8,%ecx
	mov    0x10(%rdi),%r14
	mov    %cl,(%r11,%r14,1)
	movslq 0x1734(%rdi),%r14
	mov    %r9,%rcx
	sub    %r14d,%ecx
	movzwl %r12w,%r11d
	shr    %cl,%r11d
	mov    %r11w,0x1730(%rdi)
	lea    -0xd(%r14),%ecx
	mov    %ecx,0x1734(%rdi)
	jmpq   dc82 <send_tree+0xf2>
	nopl   0x0(%rax,%rax,1)

000e290 <build_bl_tree>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %r15,-0x8(%rbp)
	lea    0xd4(%rdi),%rsi
	movslq 0xb60(%rdi),%rdx
	mov    %rdi,%r15
	callq  da20 <scan_tree>
	lea    0x9c8(%r15),%rsi
	movslq 0xb78(%r15),%rdx
	mov    %r15,%rdi
	callq  da20 <scan_tree>
	lea    0xb88(%r15),%rsi
	mov    %r15,%rdi
	callq  d780 <build_tree>
	lea    0x782e(%rip),%rdx        # 15b0c <bl_order>
	mov    $0x12,%eax
	jmp    e2fd <build_bl_tree+0x6d>
	movslq %eax,%rcx
	movzbl (%rcx,%rdx,1),%ecx
	movzwl 0xabe(%r15,%rcx,4),%ecx
	test   %cx,%cx
	jne    e302 <build_bl_tree+0x72>
	add    $0xffffffff,%eax
	cmp    $0x2,%eax
	jg     e2e5 <build_bl_tree+0x55>
	mov    0x1718(%r15),%rdx
	movslq %eax,%rcx
	lea    (%rcx,%rcx,2),%rcx
	lea    0x11(%rdx,%rcx,1),%rcx
	mov    %rcx,0x1718(%r15)
	mov    -0x8(%rbp),%r15
	leaveq 
	retq   
	data16 nopw %cs:0x0(%rax,%rax,1)
	nopl   (%rax)

000e330 <send_all_trees>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %r15,-0x10(%rbp)
	mov    %r14,-0x8(%rbp)
	mov    $0x10,%r8d
	movslq 0x1734(%rdi),%rax
	cmp    $0xb,%eax
	jg     e37e <send_all_trees+0x4e>
	mov    %rcx,%r10
	mov    %rax,%rcx
	mov    %r10,%rax
	lea    0xfeff(%rsi),%r9d
	shl    %cl,%r9d
	movzwl 0x1730(%rdi),%r10d
	or     %r10w,%r9w
	mov    %r9w,0x1730(%rdi)
	add    $0x5,%ecx
	jmp    e3f9 <send_all_trees+0xc9>
	mov    %rcx,%r10
	mov    %rax,%rcx
	mov    %r10,%rax
	lea    0xfeff(%rsi),%r9d
	mov    %r9,%r10
	shl    %cl,%r10d
	movzwl 0x1730(%rdi),%ecx
	or     %cx,%r10w
	mov    %r10w,0x1730(%rdi)
	mov    0x28(%rdi),%r11
	lea    0x1(%r11),%rcx
	mov    %rcx,0x28(%rdi)
	mov    0x10(%rdi),%rcx
	mov    %r10b,(%r11,%rcx,1)
	mov    0x28(%rdi),%r11
	lea    0x1(%r11),%rcx
	mov    %rcx,0x28(%rdi)
	movzwl 0x1730(%rdi),%ecx
	shr    $0x8,%ecx
	mov    0x10(%rdi),%r10
	mov    %cl,(%r11,%r10,1)
	movslq 0x1734(%rdi),%r10
	mov    %r8,%rcx
	sub    %r10d,%ecx
	movzwl %r9w,%r9d
	shr    %cl,%r9d
	mov    %r9w,0x1730(%rdi)
	lea    -0xb(%r10),%ecx
	mov    %ecx,0x1734(%rdi)
	lea    -0x1(%rdx),%r14d
	cmp    $0xb,%ecx
	jg     e428 <send_all_trees+0xf8>
	add    $0xffff,%edx
	shl    %cl,%edx
	movzwl 0x1730(%rdi),%r9d
	or     %r9w,%dx
	mov    %dx,0x1730(%rdi)
	add    $0x5,%ecx
	jmp    e48e <send_all_trees+0x15e>
	mov    %r14,%rdx
	shl    %cl,%edx
	movzwl 0x1730(%rdi),%ecx
	or     %cx,%dx
	mov    %dx,0x1730(%rdi)
	mov    0x28(%rdi),%rcx
	lea    0x1(%rcx),%r9
	mov    %r9,0x28(%rdi)
	mov    0x10(%rdi),%r9
	mov    %dl,(%rcx,%r9,1)
	mov    0x28(%rdi),%rdx
	lea    0x1(%rdx),%rcx
	mov    %rcx,0x28(%rdi)
	movzwl 0x1730(%rdi),%ecx
	shr    $0x8,%ecx
	mov    0x10(%rdi),%r9
	mov    %cl,(%rdx,%r9,1)
	movslq 0x1734(%rdi),%r9
	mov    %r8,%rcx
	sub    %r9d,%ecx
	movzwl %r14w,%edx
	shr    %cl,%edx
	mov    %dx,0x1730(%rdi)
	lea    -0xb(%r9),%ecx
	mov    %ecx,0x1734(%rdi)
	lea    0x7671(%rip),%r10        # 15b0c <bl_order>
	xor    %r9d,%r9d
	cmp    $0xc,%ecx
	jg     e4c6 <send_all_trees+0x196>
	lea    0xfffc(%rax),%edx
	shl    %cl,%edx
	movzwl 0x1730(%rdi),%r11d
	or     %r11w,%dx
	mov    %dx,0x1730(%rdi)
	add    $0x4,%ecx
	jmpq   e5ab <send_all_trees+0x27b>
	lea    0xfffc(%rax),%r11d
	mov    %r11,%rdx
	shl    %cl,%edx
	movzwl 0x1730(%rdi),%ecx
	or     %cx,%dx
	mov    %dx,0x1730(%rdi)
	mov    0x28(%rdi),%rcx
	lea    0x1(%rcx),%r15
	mov    %r15,0x28(%rdi)
	mov    0x10(%rdi),%r15
	mov    %dl,(%rcx,%r15,1)
	mov    0x28(%rdi),%r15
	lea    0x1(%r15),%rcx
	mov    %rcx,0x28(%rdi)
	movzwl 0x1730(%rdi),%ecx
	shr    $0x8,%ecx
	mov    0x10(%rdi),%rdx
	mov    %cl,(%r15,%rdx,1)
	movslq 0x1734(%rdi),%r15
	mov    %r8,%rcx
	sub    %r15d,%ecx
	movzwl %r11w,%edx
	shr    %cl,%edx
	mov    %dx,0x1730(%rdi)
	lea    -0xc(%r15),%ecx
	jmp    e5ab <send_all_trees+0x27b>
	movzbl (%rdx,%r10,1),%edx
	movzwl 0xabe(%rdi,%rdx,4),%edx
	mov    %rdx,%r11
	shl    %cl,%r11d
	movzwl 0x1730(%rdi),%ecx
	or     %cx,%r11w
	mov    %r11w,0x1730(%rdi)
	mov    0x28(%rdi),%rcx
	lea    0x1(%rcx),%r15
	mov    %r15,0x28(%rdi)
	mov    0x10(%rdi),%r15
	mov    %r11b,(%rcx,%r15,1)
	mov    0x28(%rdi),%r15
	lea    0x1(%r15),%rcx
	mov    %rcx,0x28(%rdi)
	movzwl 0x1730(%rdi),%ecx
	shr    $0x8,%ecx
	mov    0x10(%rdi),%r11
	mov    %cl,(%r15,%r11,1)
	movslq 0x1734(%rdi),%r11
	mov    %r8,%rcx
	sub    %r11d,%ecx
	shr    %cl,%edx
	lea    -0xd(%r11),%ecx
	mov    %dx,0x1730(%rdi)
	add    $0x1,%r9d
	mov    %ecx,0x1734(%rdi)
	cmp    %eax,%r9d
	jl     e5e7 <send_all_trees+0x2b7>
	lea    0xd4(%rdi),%rax
	lea    -0x1(%rsi),%edx
	mov    %rax,%rsi
	mov    %rdi,%r15
	callq  db90 <send_tree>
	mov    %r14,%rdx
	mov    %r15,%rdi
	lea    0x9c8(%rdi),%rsi
	callq  db90 <send_tree>
	mov    -0x8(%rbp),%r14
	mov    -0x10(%rbp),%r15
	leaveq 
	retq   
	movslq %r9d,%rdx
	cmp    $0xd,%ecx
	jg     e535 <send_all_trees+0x205>
	movzbl (%rdx,%r10,1),%edx
	movzwl 0xabe(%rdi,%rdx,4),%edx
	shl    %cl,%edx
	movzwl 0x1730(%rdi),%r11d
	or     %r11w,%dx
	add    $0x3,%ecx
	jmp    e5a0 <send_all_trees+0x270>
	data16 nopw %cs:0x0(%rax,%rax,1)
	xchg   %ax,%ax

000e620 <compress_block>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    $0x10,%eax
	mov    0x170c(%rdi),%ecx
	test   %ecx,%ecx
	je     e76c <compress_block+0x14c>
	mov    0x9986(%rip),%r10        # 17fc8 <_length_code@@Base+0x28f4>
	mov    %r10,-0x30(%rbp)
	mov    0x99a3(%rip),%r8        # 17ff0 <_dist_code@@Base+0x281c>
	mov    %r15,-0x28(%rbp)
	lea    0x737c(%rip),%r11        # 159d4 <extra_lbits>
	mov    %r14,-0x20(%rbp)
	xor    %r9d,%r9d
	mov    %rbx,-0x8(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    %r9d,%ecx
	mov    0x1700(%rdi),%rbx
	movzbl (%rcx,%rbx,1),%r13d
	mov    0x1710(%rdi),%rbx
	movzwl (%rbx,%rcx,2),%r12d
	test   %r12w,%r12w
	je     e7af <compress_block+0x18f>
	movzbl 0x0(%r13,%r10,1),%r14d
	lea    0x101(%r14),%ecx
	mov    %ecx,%ebx
	movzwl 0x2(%rsi,%rbx,4),%r15d
	sub    %r15d,%eax
	movslq 0x1734(%rdi),%rcx
	cmp    %eax,%ecx
	jg     e7f2 <compress_block+0x1d2>
	movzwl (%rsi,%rbx,4),%ebx
	shl    %cl,%ebx
	movzwl 0x1730(%rdi),%eax
	or     %ax,%bx
	add    %r15d,%ecx
	mov    $0x10,%eax
	jmpq   e85b <compress_block+0x23b>
	movzwl (%rsi,%r13,4),%ebx
	mov    %rbx,%r13
	shl    %cl,%r13d
	movzwl 0x1730(%rdi),%ecx
	or     %cx,%r13w
	mov    %r13w,0x1730(%rdi)
	mov    0x28(%rdi),%r14
	lea    0x1(%r14),%rcx
	mov    %rcx,0x28(%rdi)
	mov    0x10(%rdi),%rcx
	mov    %r13b,(%r14,%rcx,1)
	mov    0x28(%rdi),%r14
	lea    0x1(%r14),%rcx
	mov    %rcx,0x28(%rdi)
	movzwl 0x1730(%rdi),%ecx
	shr    $0x8,%ecx
	mov    0x10(%rdi),%r13
	mov    %cl,(%r14,%r13,1)
	movslq 0x1734(%rdi),%r13
	mov    %rax,%rcx
	sub    %r13d,%ecx
	shr    %cl,%ebx
	mov    %bx,0x1730(%rdi)
	lea    -0x10(%r12,%r13,1),%ecx
	mov    %ecx,0x1734(%rdi)
	mov    0x170c(%rdi),%ecx
	add    $0x1,%r9d
	cmp    %r9d,%ecx
	ja     e66b <compress_block+0x4b>
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	mov    -0x20(%rbp),%r14
	mov    -0x28(%rbp),%r15
	movzwl 0x402(%rsi),%r8d
	mov    %rax,%rdx
	sub    %r8d,%edx
	movslq 0x1734(%rdi),%rcx
	cmp    %ecx,%edx
	jl     e8d7 <compress_block+0x2b7>
	movzwl 0x400(%rsi),%eax
	shl    %cl,%eax
	movzwl 0x1730(%rdi),%edx
	or     %dx,%ax
	mov    %ax,0x1730(%rdi)
	lea    (%r8,%rcx,1),%eax
	mov    %eax,0x1734(%rdi)
	leaveq 
	retq   
	movzwl 0x2(%rsi,%r13,4),%r12d
	mov    %rax,%rbx
	sub    %r12d,%ebx
	movslq 0x1734(%rdi),%rcx
	cmp    %ecx,%ebx
	jl     e6d4 <compress_block+0xb4>
	movzwl (%rsi,%r13,4),%ebx
	shl    %cl,%ebx
	movzwl 0x1730(%rdi),%r13d
	or     %r13w,%bx
	mov    %bx,0x1730(%rdi)
	add    %r12d,%ecx
	mov    %ecx,0x1734(%rdi)
	jmpq   e745 <compress_block+0x125>
	movzwl (%rsi,%rbx,4),%ebx
	mov    %rbx,%rax
	shl    %cl,%eax
	movzwl 0x1730(%rdi),%ecx
	or     %cx,%ax
	mov    %ax,0x1730(%rdi)
	mov    0x28(%rdi),%rcx
	lea    0x1(%rcx),%r10
	mov    %r10,0x28(%rdi)
	mov    0x10(%rdi),%r10
	mov    %al,(%rcx,%r10,1)
	mov    0x28(%rdi),%rcx
	lea    0x1(%rcx),%rax
	mov    %rax,0x28(%rdi)
	movzwl 0x1730(%rdi),%eax
	shr    $0x8,%eax
	mov    0x10(%rdi),%r10
	mov    %al,(%rcx,%r10,1)
	movslq 0x1734(%rdi),%r10
	mov    $0x10,%eax
	mov    %rax,%rcx
	sub    %r10d,%ecx
	shr    %cl,%ebx
	lea    -0x10(%r15,%r10,1),%ecx
	mov    -0x30(%rbp),%r10
	mov    %ecx,0x1734(%rdi)
	mov    %bx,0x1730(%rdi)
	movslq (%r11,%r14,4),%r15
	test   %r15d,%r15d
	je     e8ae <compress_block+0x28e>
	lea    0x77a0(%rip),%r11        # 16018 <base_length>
	movzwl (%r11,%r14,4),%r11d
	sub    %r11w,%r13w
	mov    %rax,%r11
	sub    %r15d,%r11d
	cmp    %r11d,%ecx
	jg     e948 <compress_block+0x328>
	shl    %cl,%r13d
	or     %r13w,%bx
	mov    %bx,0x1730(%rdi)
	add    %r15d,%ecx
	mov    %ecx,0x1734(%rdi)
	lea    0x7126(%rip),%r11        # 159d4 <extra_lbits>
	add    $0xffffffff,%r12d
	cmp    $0xff,%r12d
	jbe    e9bc <compress_block+0x39c>
	mov    %r12,%rcx
	shr    $0x7,%ecx
	add    $0x100,%ecx
	mov    %ecx,%ecx
	movzbl (%rcx,%r8,1),%ecx
	jmpq   e9c4 <compress_block+0x3a4>
	movzwl 0x400(%rsi),%edx
	mov    %rdx,%rsi
	shl    %cl,%esi
	movzwl 0x1730(%rdi),%ecx
	or     %cx,%si
	mov    %si,0x1730(%rdi)
	mov    0x28(%rdi),%r9
	lea    0x1(%r9),%rcx
	mov    %rcx,0x28(%rdi)
	mov    0x10(%rdi),%rcx
	mov    %sil,(%r9,%rcx,1)
	mov    0x28(%rdi),%r9
	lea    0x1(%r9),%rcx
	mov    %rcx,0x28(%rdi)
	movzwl 0x1730(%rdi),%ecx
	shr    $0x8,%ecx
	mov    0x10(%rdi),%rsi
	mov    %cl,(%r9,%rsi,1)
	movslq 0x1734(%rdi),%rsi
	sub    %esi,%eax
	mov    %rax,%rcx
	shr    %cl,%edx
	mov    %dx,0x1730(%rdi)
	lea    -0x10(%r8,%rsi,1),%eax
	mov    %eax,0x1734(%rdi)
	leaveq 
	retq   
	mov    %r13,%r11
	shl    %cl,%r11d
	or     %r11w,%bx
	mov    %bx,0x1730(%rdi)
	mov    0x28(%rdi),%rcx
	lea    0x1(%rcx),%r11
	mov    %r11,0x28(%rdi)
	mov    0x10(%rdi),%r11
	mov    %bl,(%rcx,%r11,1)
	mov    0x28(%rdi),%r11
	lea    0x1(%r11),%rcx
	mov    %rcx,0x28(%rdi)
	movzwl 0x1730(%rdi),%ecx
	shr    $0x8,%ecx
	mov    0x10(%rdi),%rbx
	mov    %cl,(%r11,%rbx,1)
	movslq 0x1734(%rdi),%r11
	mov    %rax,%rcx
	sub    %r11d,%ecx
	movzwl %r13w,%ebx
	shr    %cl,%ebx
	mov    %bx,0x1730(%rdi)
	lea    -0x10(%r15,%r11,1),%ecx
	mov    %ecx,0x1734(%rdi)
	lea    0x701d(%rip),%r11        # 159d4 <extra_lbits>
	jmpq   e8ae <compress_block+0x28e>
	mov    %r12d,%ecx
	movzbl (%rcx,%r8,1),%ecx
	mov    %ecx,%r13d
	movzwl 0x2(%rdx,%r13,4),%r14d
	mov    %rax,%rbx
	sub    %r14d,%ebx
	movslq 0x1734(%rdi),%rcx
	cmp    %ebx,%ecx
	jg     e9f6 <compress_block+0x3d6>
	movzwl (%rdx,%r13,4),%ebx
	shl    %cl,%ebx
	movzwl 0x1730(%rdi),%r15d
	or     %r15w,%bx
	add    %r14d,%ecx
	jmp    ea61 <compress_block+0x441>
	movzwl (%rdx,%r13,4),%ebx
	mov    %rbx,%r11
	shl    %cl,%r11d
	movzwl 0x1730(%rdi),%ecx
	or     %cx,%r11w
	mov    %r11w,0x1730(%rdi)
	mov    0x28(%rdi),%r15
	lea    0x1(%r15),%rcx
	mov    %rcx,0x28(%rdi)
	mov    0x10(%rdi),%rcx
	mov    %r11b,(%r15,%rcx,1)
	mov    0x28(%rdi),%r15
	lea    0x1(%r15),%rcx
	mov    %rcx,0x28(%rdi)
	movzwl 0x1730(%rdi),%ecx
	shr    $0x8,%ecx
	mov    0x10(%rdi),%r11
	mov    %cl,(%r15,%r11,1)
	movslq 0x1734(%rdi),%r11
	mov    %rax,%rcx
	sub    %r11d,%ecx
	shr    %cl,%ebx
	lea    -0x10(%r14,%r11,1),%ecx
	lea    0x6f73(%rip),%r11        # 159d4 <extra_lbits>
	mov    %ecx,0x1734(%rdi)
	mov    %bx,0x1730(%rdi)
	lea    0x6fd3(%rip),%r14        # 15a48 <extra_dbits>
	movslq (%r14,%r13,4),%r14
	test   %r14d,%r14d
	je     e745 <compress_block+0x125>
	lea    0x7603(%rip),%r15        # 1608c <base_dist>
	mov    (%r15,%r13,4),%r13d
	sub    %r13d,%r12d
	mov    %rax,%r13
	sub    %r14d,%r13d
	cmp    %r13d,%ecx
	jg     eab7 <compress_block+0x497>
	shl    %cl,%r12d
	or     %r12w,%bx
	mov    %bx,0x1730(%rdi)
	add    %r14d,%ecx
	mov    %ecx,0x1734(%rdi)
	jmpq   e745 <compress_block+0x125>
	mov    %r12,%r13
	shl    %cl,%r13d
	or     %r13w,%bx
	mov    %bx,0x1730(%rdi)
	mov    0x28(%rdi),%r13
	lea    0x1(%r13),%rcx
	mov    %rcx,0x28(%rdi)
	mov    0x10(%rdi),%rcx
	mov    %bl,0x0(%r13,%rcx,1)
	mov    0x28(%rdi),%rbx
	lea    0x1(%rbx),%rcx
	mov    %rcx,0x28(%rdi)
	movzwl 0x1730(%rdi),%ecx
	shr    $0x8,%ecx
	mov    0x10(%rdi),%r13
	mov    %cl,(%rbx,%r13,1)
	movslq 0x1734(%rdi),%r13
	mov    %rax,%rcx
	sub    %r13d,%ecx
	movzwl %r12w,%ebx
	shr    %cl,%ebx
	mov    %bx,0x1730(%rdi)
	lea    -0x10(%r14,%r13,1),%ecx
	mov    %ecx,0x1734(%rdi)
	jmpq   e745 <compress_block+0x125>
	data16 nopw %cs:0x0(%rax,%rax,1)

000eb30 <detect_data_type>:
	push   %rbp
	mov    %rsp,%rbp
	xor    %esi,%esi
	mov    $0xf3ffc07f,%ecx
	mov    %rsi,%rdx
	jmp    eb62 <detect_data_type+0x32>
	mov    %rcx,%rax
	and    $0x1,%rax
	test   %rax,%rax
	je     eb5c <detect_data_type+0x2c>
	movslq %edx,%rax
	movzwl 0xd4(%rdi,%rax,4),%eax
	test   %ax,%ax
	jne    eb7a <detect_data_type+0x4a>
	shr    %rcx
	add    $0x1,%edx
	cmp    $0x1f,%edx
	jle    eb40 <detect_data_type+0x10>
	mov    $0x1,%eax
	movzwl 0xf8(%rdi),%ecx
	test   %cx,%cx
	je     eb7f <detect_data_type+0x4f>
	leaveq 
	retq   
	mov    %rsi,%rax
	leaveq 
	retq   
	movzwl 0xfc(%rdi),%ecx
	test   %cx,%cx
	je     eb8d <detect_data_type+0x5d>
	leaveq 
	retq   
	movzwl 0x108(%rdi),%ecx
	test   %cx,%cx
	jne    eba0 <detect_data_type+0x70>
	mov    $0x20,%ecx
	jmp    ebb5 <detect_data_type+0x85>
	leaveq 
	retq   
	movslq %ecx,%rdx
	movzwl 0xd4(%rdi,%rdx,4),%edx
	test   %dx,%dx
	jne    ebc2 <detect_data_type+0x92>
	add    $0x1,%ecx
	cmp    $0xff,%ecx
	jle    eba2 <detect_data_type+0x72>
	mov    %rsi,%rax
	leaveq 
	retq   
	leaveq 
	retq   
	data16 nopw %cs:0x0(%rax,%rax,1)
	nop

000ebd0 <bi_reverse>:
	push   %rbp
	mov    %rsp,%rbp
	xor    %eax,%eax
	jmp    ebdc <bi_reverse+0xc>
	shr    %edi
	add    %eax,%eax
	mov    %rdi,%rcx
	and    $0x1,%ecx
	add    %ecx,%eax
	add    $0xffffffff,%esi
	test   %esi,%esi
	jg     ebd8 <bi_reverse+0x8>
	and    $0x7fffffff,%eax
	leaveq 
	retq   
	data16 nopw %cs:0x0(%rax,%rax,1)
	nopl   (%rax)

000ec00 <bi_windup>:
	push   %rbp
	mov    %rsp,%rbp
	movslq 0x1734(%rdi),%rax
	cmp    $0x8,%eax
	jg     ec30 <bi_windup+0x30>
	test   %eax,%eax
	jle    ec67 <bi_windup+0x67>
	mov    0x28(%rdi),%rcx
	lea    0x1(%rcx),%rax
	mov    %rax,0x28(%rdi)
	movzbl 0x1730(%rdi),%edx
	mov    0x10(%rdi),%rax
	mov    %dl,(%rcx,%rax,1)
	jmp    ec67 <bi_windup+0x67>
	mov    0x28(%rdi),%rcx
	lea    0x1(%rcx),%rax
	mov    %rax,0x28(%rdi)
	movzbl 0x1730(%rdi),%edx
	mov    0x10(%rdi),%rax
	mov    %dl,(%rcx,%rax,1)
	mov    0x28(%rdi),%rdx
	lea    0x1(%rdx),%rax
	mov    %rax,0x28(%rdi)
	movzwl 0x1730(%rdi),%eax
	shr    $0x8,%eax
	mov    0x10(%rdi),%rcx
	mov    %al,(%rdx,%rcx,1)
	movw   $0x0,0x1730(%rdi)
	movl   $0x0,0x1734(%rdi)
	leaveq 
	retq   
	nopl   0x0(%rax)

000ec80 <bi_flush>:
	push   %rbp
	mov    %rsp,%rbp
	movslq 0x1734(%rdi),%rax
	cmp    $0x10,%eax
	je     ec97 <bi_flush+0x17>
	cmp    $0x7,%eax
	jg     ece3 <bi_flush+0x63>
	leaveq 
	retq   
	mov    0x28(%rdi),%rcx
	lea    0x1(%rcx),%rax
	mov    %rax,0x28(%rdi)
	movzbl 0x1730(%rdi),%edx
	mov    0x10(%rdi),%rax
	mov    %dl,(%rcx,%rax,1)
	mov    0x28(%rdi),%rcx
	lea    0x1(%rcx),%rax
	mov    %rax,0x28(%rdi)
	movzwl 0x1730(%rdi),%eax
	shr    $0x8,%eax
	mov    0x10(%rdi),%rdx
	mov    %al,(%rcx,%rdx,1)
	movw   $0x0,0x1730(%rdi)
	movl   $0x0,0x1734(%rdi)
	leaveq 
	retq   
	mov    0x28(%rdi),%rcx
	lea    0x1(%rcx),%rax
	mov    %rax,0x28(%rdi)
	movzbl 0x1730(%rdi),%edx
	mov    0x10(%rdi),%rax
	mov    %dl,(%rcx,%rax,1)
	movzwl 0x1730(%rdi),%eax
	shr    $0x8,%ax
	mov    %ax,0x1730(%rdi)
	movslq 0x1734(%rdi),%rax
	add    $0xfffffff8,%eax
	mov    %eax,0x1734(%rdi)
	leaveq 
	retq   
	nopw   %cs:0x0(%rax,%rax,1)
	nopl   0x0(%rax,%rax,1)

000ed30 <zlibVersion>:
	push   %rbp
	mov    %rsp,%rbp
	lea    0x73c9(%rip),%rax        # 16104 <base_dist+0x78>
	leaveq 
	retq   
	nopl   (%rax)

000ed40 <zlibCompileFlags>:
	push   %rbp
	mov    %rsp,%rbp
	mov    $0xa9,%eax
	leaveq 
	retq   
	nopl   0x0(%rax,%rax,1)

000ed50 <zError>:
	push   %rbp
	mov    %rsp,%rbp
	mov    $0x2,%eax
	sub    %edi,%eax
	movslq %eax,%rcx
	mov    0x927b(%rip),%rax        # 17fe0 <z_errmsg@@Base+0x238>
	mov    (%rax,%rcx,8),%rax
	leaveq 
	retq   
	nopl   0x0(%rax,%rax,1)

000ed70 <zcalloc>:
	push   %rbp
	mov    %rsp,%rbp
	imul   %esi,%edx
	mov    %edx,%edi
	callq  2240 <malloc@plt>
	leaveq 
	retq   

000ed80 <zcfree>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rsi,%rdi
	callq  2060 <free@plt>
	leaveq 
	retq   
	xchg   %ax,%ax

000ed90 <compress>:
	push   %rbp
	mov    %rsp,%rbp
	mov    $0xffffffffffffffff,%r8
	callq  22b0 <compress2@plt>
	leaveq 
	retq   
	data16 nopw %cs:0x0(%rax,%rax,1)
	nopl   (%rax)

000edb0 <compress2>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0xb0,%rsp
	mov    %rsi,-0x8(%rbp)
	mov    %rdi,-0x38(%rbp)
	mov    %rdx,-0x40(%rbp)
	mov    %rcx,-0x28(%rbp)
	mov    (%rsi),%rax
	mov    %rax,-0x30(%rbp)
	movq   $0x0,(%rsi)
	mov    %r8,%rsi
	movq   $0x0,-0x70(%rbp)
	movq   $0x0,-0x68(%rbp)
	movq   $0x0,-0x60(%rbp)
	lea    -0xb0(%rbp),%rdi
	lea    0x737e(%rip),%rdx        # 16180 <base_dist+0xf4>
	mov    $0x70,%ecx
	callq  21e0 <deflateInit_@plt>
	test   %eax,%eax
	je     ee12 <compress2+0x62>
	leaveq 
	retq   
	mov    -0x38(%rbp),%rax
	mov    %rax,-0x98(%rbp)
	movl   $0x0,-0x90(%rbp)
	mov    -0x40(%rbp),%rax
	mov    %rax,-0xb0(%rbp)
	movl   $0x0,-0xa8(%rbp)
	xor    %eax,%eax
	mov    $0x4,%edx
	mov    $0xffffffff,%ecx
	mov    %rbx,-0x10(%rbp)
	mov    %r12,-0x18(%rbp)
	mov    %r13,-0x20(%rbp)
	mov    %r14,-0x38(%rbp)
	mov    %r15,-0x40(%rbp)
	mov    %rax,%r13
	mov    %rdx,%r14
	mov    %rcx,%r15
	lea    -0xb0(%rbp),%rdi
	mov    -0x30(%rbp),%r12
	mov    -0x28(%rbp),%rbx
	jmp    ee7d <compress2+0xcd>
	lea    -0xb0(%rbp),%rdi
	mov    -0x90(%rbp),%eax
	test   %eax,%eax
	jne    ee9a <compress2+0xea>
	cmp    %r15,%r12
	jbe    eec1 <compress2+0x111>
	mov    %r15,%rcx
	mov    %ecx,%eax
	sub    %rax,%r12
	mov    %ecx,-0x90(%rbp)
	mov    -0xa8(%rbp),%eax
	test   %eax,%eax
	jne    eeb7 <compress2+0x107>
	cmp    %r15,%rbx
	jbe    eec6 <compress2+0x116>
	mov    %r15,%rcx
	mov    %ecx,%eax
	sub    %rax,%rbx
	mov    %ecx,-0xa8(%rbp)
	test   %rbx,%rbx
	jne    eecb <compress2+0x11b>
	mov    %r14,%rsi
	jmp    eece <compress2+0x11e>
	mov    %r12,%rcx
	jmp    ee8f <compress2+0xdf>
	mov    %rbx,%rcx
	jmp    eeac <compress2+0xfc>
	mov    %r13,%rsi
	callq  2150 <deflate@plt>
	test   %eax,%eax
	je     ee76 <compress2+0xc6>
	mov    -0x88(%rbp),%rcx
	mov    -0x8(%rbp),%rdx
	mov    %rcx,(%rdx)
	mov    %rax,%r12
	lea    -0xb0(%rbp),%rdi
	callq  2260 <deflateEnd@plt>
	cmp    $0x1,%r12d
	jne    ef13 <compress2+0x163>
	mov    %r13,%rax
	mov    -0x40(%rbp),%r15
	mov    -0x38(%rbp),%r14
	mov    -0x20(%rbp),%r13
	mov    -0x18(%rbp),%r12
	mov    -0x10(%rbp),%rbx
	leaveq 
	retq   
	mov    %r12,%rax
	mov    -0x40(%rbp),%r15
	mov    -0x38(%rbp),%r14
	mov    -0x20(%rbp),%r13
	mov    -0x18(%rbp),%r12
	mov    -0x10(%rbp),%rbx
	leaveq 
	retq   
	nopl   0x0(%rax)

000ef30 <compressBound>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,%rax
	shr    $0xc,%rax
	lea    (%rdi,%rax,1),%rcx
	mov    %rdi,%rax
	shr    $0xe,%rax
	add    %rcx,%rax
	shr    $0x19,%rdi
	lea    0xd(%rdi,%rax,1),%rax
	leaveq 
	retq   
	nopw   %cs:0x0(%rax,%rax,1)
	xchg   %ax,%ax

000ef60 <uncompress>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %rcx,-0x8(%rbp)
	lea    -0x8(%rbp),%rcx
	callq  2200 <uncompress2@plt>
	leaveq 
	retq   
	nopw   0x0(%rax,%rax,1)

000ef80 <uncompress2>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0xd0,%rsp
	mov    %rcx,-0x38(%rbp)
	mov    %rsi,-0x30(%rbp)
	mov    (%rcx),%rax
	mov    %rax,-0x40(%rbp)
	mov    $0x1,%eax
	mov    (%rsi),%rcx
	test   %rcx,%rcx
	jne    efad <uncompress2+0x2d>
	lea    -0x51(%rbp),%rdi
	jmp    efb7 <uncompress2+0x37>
	movq   $0x0,(%rsi)
	mov    %rcx,%rax
	mov    %rdi,-0x50(%rbp)
	mov    %rax,-0x48(%rbp)
	mov    %rdx,-0xc8(%rbp)
	movl   $0x0,-0xc0(%rbp)
	movq   $0x0,-0x88(%rbp)
	movq   $0x0,-0x80(%rbp)
	movq   $0x0,-0x78(%rbp)
	lea    -0xc8(%rbp),%rdi
	lea    0x718e(%rip),%rsi        # 16187 <base_dist+0xfb>
	mov    $0x70,%edx
	callq  2290 <inflateInit_@plt>
	test   %eax,%eax
	je     f009 <uncompress2+0x89>
	leaveq 
	retq   
	mov    -0x50(%rbp),%rax
	mov    %rax,-0xb0(%rbp)
	movl   $0x0,-0xa8(%rbp)
	xor    %ecx,%ecx
	mov    $0xffffffff,%eax
	mov    %rbx,-0x8(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %r15,-0x28(%rbp)
	mov    %rcx,%r13
	mov    %rax,%r15
	lea    -0xc8(%rbp),%r14
	mov    -0x48(%rbp),%rbx
	mov    -0x40(%rbp),%r12
	mov    -0xa8(%rbp),%eax
	test   %eax,%eax
	jne    f06b <uncompress2+0xeb>
	cmp    %r15,%rbx
	jbe    f0d3 <uncompress2+0x153>
	mov    %r15,%rcx
	mov    %ecx,%eax
	sub    %rax,%rbx
	mov    %ecx,-0xa8(%rbp)
	mov    -0xc0(%rbp),%eax
	test   %eax,%eax
	jne    f088 <uncompress2+0x108>
	cmp    %r15,%r12
	jbe    f0d8 <uncompress2+0x158>
	mov    %r15,%rcx
	mov    %ecx,%eax
	sub    %rax,%r12
	mov    %ecx,-0xc0(%rbp)
	mov    %r14,%rdi
	mov    %r13,%rsi
	callq  2080 <inflate@plt>
	test   %eax,%eax
	je     f04e <uncompress2+0xce>
	mov    -0xc0(%rbp),%ecx
	lea    (%r12,%rcx,1),%rdx
	mov    -0x38(%rbp),%rsi
	mov    (%rsi),%rcx
	sub    %rdx,%rcx
	mov    %rcx,(%rsi)
	lea    -0x51(%rbp),%rdx
	mov    -0x50(%rbp),%rcx
	cmp    %rdx,%rcx
	jne    f0dd <uncompress2+0x15d>
	mov    -0xa0(%rbp),%rcx
	test   %rcx,%rcx
	je     f0eb <uncompress2+0x16b>
	cmp    $0xfffffffb,%eax
	jne    f0eb <uncompress2+0x16b>
	mov    $0x1,%ebx
	jmp    f0eb <uncompress2+0x16b>
	mov    %rbx,%rcx
	jmp    f060 <uncompress2+0xe0>
	mov    %r12,%rcx
	jmp    f07d <uncompress2+0xfd>
	mov    -0xa0(%rbp),%rcx
	mov    -0x30(%rbp),%rdx
	mov    %rcx,(%rdx)
	mov    %r14,%rdi
	mov    %rax,%r12
	callq  2210 <inflateEnd@plt>
	cmp    $0x1,%r12d
	jne    f115 <uncompress2+0x195>
	mov    %r13,%rax
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	leaveq 
	retq   
	mov    $0xfffffffffffffffd,%rax
	cmp    $0x2,%r12d
	jne    f138 <uncompress2+0x1b8>
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	leaveq 
	retq   
	cmp    $0xfffffffb,%r12d
	je     f157 <uncompress2+0x1d7>
	mov    %r12,%rax
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	leaveq 
	retq   
	mov    -0xa8(%rbp),%ecx
	add    %rbx,%rcx
	test   %rcx,%rcx
	je     f17b <uncompress2+0x1fb>
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	leaveq 
	retq   
	mov    $0xfffffffffffffffb,%rax
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	leaveq 
	retq   
	nopl   0x0(%rax,%rax,1)

000f1a0 <gzclose>:
	push   %rbp
	mov    %rsp,%rbp
	test   %rdi,%rdi
	jne    f1b2 <gzclose+0x12>
	mov    $0xfffffffffffffffe,%rax
	leaveq 
	retq   
	movslq 0x18(%rdi),%rax
	cmp    $0x1c4f,%eax
	je     f1c4 <gzclose+0x24>
	callq  2250 <gzclose_w@plt>
	leaveq 
	retq   
	callq  2090 <gzclose_r@plt>
	leaveq 
	retq   
	nopl   0x0(%rax,%rax,1)

000f1d0 <gzdopen>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	xor    %eax,%eax
	cmp    $0xffffffff,%edi
	jne    f1e1 <gzdopen+0x11>
	leaveq 
	retq   
	mov    $0x13,%eax
	mov    %rdi,-0x18(%rbp)
	mov    %rsi,-0x8(%rbp)
	mov    %rax,%rdi
	callq  2240 <malloc@plt>
	test   %rax,%rax
	jne    f1ff <gzdopen+0x2f>
	xor    %eax,%eax
	leaveq 
	retq   
	xor    %r8d,%r8d
	lea    0x70bf(%rip),%rdx        # 162c8 <base_dist+0x23c>
	mov    %rax,%rdi
	mov    -0x18(%rbp),%r9
	mov    %r9,%rcx
	mov    %r14,-0x10(%rbp)
	mov    %r15,-0x18(%rbp)
	mov    %rax,%r14
	mov    %r8,%rax
	mov    %r9,%r15
	mov    $0x13,%esi
	callq  2130 <snprintf@plt>
	mov    %r15,%rsi
	mov    %r14,%rdi
	mov    -0x8(%rbp),%rdx
	callq  f880 <gz_open>
	mov    %r14,%rdi
	mov    %rax,%r14
	callq  2060 <free@plt>
	mov    %r14,%rax
	mov    -0x18(%rbp),%r15
	mov    -0x10(%rbp),%r14
	leaveq 
	retq   
	data16 nopw %cs:0x0(%rax,%rax,1)

000f260 <gzbuffer>:
	push   %rbp
	mov    %rsp,%rbp
	mov    $0xffffffffffffffff,%rax
	test   %rdi,%rdi
	jne    f272 <gzbuffer+0x12>
	leaveq 
	retq   
	movslq 0x18(%rdi),%rcx
	cmp    $0x1c4f,%ecx
	jne    f287 <gzbuffer+0x27>
	mov    0x28(%rdi),%ecx
	test   %ecx,%ecx
	je     f291 <gzbuffer+0x31>
	leaveq 
	retq   
	cmp    $0x79b1,%ecx
	je     f27e <gzbuffer+0x1e>
	leaveq 
	retq   
	lea    (%rsi,%rsi,1),%ecx
	cmp    %ecx,%esi
	jbe    f29a <gzbuffer+0x3a>
	leaveq 
	retq   
	cmp    $0x1,%esi
	ja     f2a4 <gzbuffer+0x44>
	mov    $0x2,%esi
	mov    %esi,0x2c(%rdi)
	xor    %eax,%eax
	leaveq 
	retq   
	nopl   0x0(%rax,%rax,1)

000f2b0 <gzrewind>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    $0xffffffffffffffff,%rax
	test   %rdi,%rdi
	jne    f2c6 <gzrewind+0x16>
	leaveq 
	retq   
	movslq 0x18(%rdi),%rcx
	cmp    $0x1c4f,%ecx
	je     f2d4 <gzrewind+0x24>
	leaveq 
	retq   
	movslq 0x6c(%rdi),%rcx
	test   %ecx,%ecx
	jne    f301 <gzrewind+0x51>
	movslq 0x1c(%rdi),%rax
	mov    0x48(%rdi),%rsi
	xor    %edx,%edx
	mov    %rdi,-0x8(%rbp)
	mov    %rax,%rdi
	callq  2300 <lseek64@plt>
	cmp    $0xffffffffffffffff,%rax
	jne    f308 <gzrewind+0x58>
	mov    $0xffffffffffffffff,%rax
	leaveq 
	retq   
	cmp    $0xfffffffb,%ecx
	je     f2dc <gzrewind+0x2c>
	leaveq 
	retq   
	mov    -0x8(%rbp),%rdi
	callq  f820 <gz_reset>
	xor    %eax,%eax
	leaveq 
	retq   
	data16 nopw %cs:0x0(%rax,%rax,1)

000f320 <gzeof>:
	push   %rbp
	mov    %rsp,%rbp
	xor    %eax,%eax
	test   %rdi,%rdi
	jne    f32d <gzeof+0xd>
	leaveq 
	retq   
	movslq 0x18(%rdi),%rcx
	cmp    $0x1c4f,%ecx
	jne    f343 <gzeof+0x23>
	cmp    $0x1c4f,%ecx
	je     f34d <gzeof+0x2d>
	leaveq 
	retq   
	cmp    $0x79b1,%ecx
	je     f339 <gzeof+0x19>
	leaveq 
	retq   
	movslq 0x54(%rdi),%rax
	leaveq 
	retq   
	data16 nopw %cs:0x0(%rax,%rax,1)
	xchg   %ax,%ax

000f360 <gzerror>:
	push   %rbp
	mov    %rsp,%rbp
	xor    %eax,%eax
	test   %rdi,%rdi
	jne    f36d <gzerror+0xd>
	leaveq 
	retq   
	movslq 0x18(%rdi),%rcx
	cmp    $0x1c4f,%ecx
	jne    f396 <gzerror+0x36>
	test   %rsi,%rsi
	je     f384 <gzerror+0x24>
	movslq 0x6c(%rdi),%rax
	mov    %eax,(%rsi)
	movslq 0x6c(%rdi),%rax
	cmp    $0xfffffffc,%eax
	jne    f3a0 <gzerror+0x40>
	lea    0x6f3c(%rip),%rax        # 162d0 <base_dist+0x244>
	leaveq 
	retq   
	cmp    $0x79b1,%ecx
	je     f379 <gzerror+0x19>
	leaveq 
	retq   
	mov    0x70(%rdi),%rax
	test   %rax,%rax
	jne    f3b2 <gzerror+0x52>
	lea    0x6f2e(%rip),%rax        # 162de <base_dist+0x252>
	leaveq 
	retq   
	leaveq 
	retq   
	data16 nopw %cs:0x0(%rax,%rax,1)
	nop

000f3c0 <gzclearerr>:
	push   %rbp
	mov    %rsp,%rbp
	test   %rdi,%rdi
	jne    f3cb <gzclearerr+0xb>
	leaveq 
	retq   
	movslq 0x18(%rdi),%rax
	cmp    $0x1c4f,%eax
	jne    f3f7 <gzclearerr+0x37>
	cmp    $0x1c4f,%eax
	jne    f3eb <gzclearerr+0x2b>
	movl   $0x0,0x50(%rdi)
	movl   $0x0,0x54(%rdi)
	xor    %esi,%esi
	mov    %rsi,%rdx
	callq  20a0 <gz_error@plt>
	leaveq 
	retq   
	cmp    $0x79b1,%eax
	je     f3d6 <gzclearerr+0x16>
	leaveq 
	retq   

000f400 <gzopen64>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rsi,%rdx
	mov    $0xffffffffffffffff,%rsi
	callq  f880 <gz_open>
	leaveq 
	retq   
	data16 nopw %cs:0x0(%rax,%rax,1)

000f420 <gzseek64>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    $0xffffffffffffffff,%rax
	test   %rdi,%rdi
	jne    f436 <gzseek64+0x16>
	leaveq 
	retq   
	movslq 0x18(%rdi),%rcx
	cmp    $0x1c4f,%ecx
	jne    f460 <gzseek64+0x40>
	movslq 0x6c(%rdi),%rcx
	test   %ecx,%ecx
	jne    f46a <gzseek64+0x4a>
	test   %edx,%edx
	jne    f471 <gzseek64+0x51>
	test   %edx,%edx
	je     f478 <gzseek64+0x58>
	movslq 0x68(%rdi),%rcx
	test   %ecx,%ecx
	je     f47f <gzseek64+0x5f>
	add    0x60(%rdi),%rsi
	jmp    f47f <gzseek64+0x5f>
	cmp    $0x79b1,%ecx
	je     f442 <gzseek64+0x22>
	leaveq 
	retq   
	cmp    $0xfffffffb,%ecx
	je     f44a <gzseek64+0x2a>
	leaveq 
	retq   
	cmp    $0x1,%edx
	je     f44e <gzseek64+0x2e>
	leaveq 
	retq   
	mov    0x10(%rdi),%rcx
	sub    %rcx,%rsi
	movl   $0x0,0x68(%rdi)
	movslq 0x18(%rdi),%rcx
	cmp    $0x1c4f,%ecx
	je     f4b2 <gzseek64+0x92>
	test   %rsi,%rsi
	js     f4fa <gzseek64+0xda>
	movslq 0x18(%rdi),%rax
	cmp    $0x1c4f,%eax
	jne    f52e <gzseek64+0x10e>
	mov    (%rdi),%eax
	cmp    %rax,%rsi
	jl     f50c <gzseek64+0xec>
	mov    %rax,%rcx
	jmp    f50f <gzseek64+0xef>
	movslq 0x44(%rdi),%rcx
	cmp    $0x1,%ecx
	jne    f492 <gzseek64+0x72>
	mov    %rsi,%rcx
	add    0x10(%rdi),%rcx
	test   %rcx,%rcx
	js     f492 <gzseek64+0x72>
	mov    (%rdi),%eax
	neg    %rax
	add    %rsi,%rax
	movslq 0x1c(%rdi),%rcx
	mov    $0x1,%edx
	mov    %rdi,-0x10(%rbp)
	mov    %rsi,-0x8(%rbp)
	mov    %rax,%rsi
	mov    %rcx,%rdi
	callq  2300 <lseek64@plt>
	cmp    $0xffffffffffffffff,%rax
	jne    f547 <gzseek64+0x127>
	mov    $0xffffffffffffffff,%rax
	leaveq 
	retq   
	movslq 0x18(%rdi),%rcx
	cmp    $0x1c4f,%ecx
	je     f597 <gzseek64+0x177>
	leaveq 
	retq   
	mov    %rsi,%rcx
	sub    %ecx,%eax
	mov    %eax,(%rdi)
	mov    %ecx,%ecx
	mov    %rcx,%rax
	add    0x8(%rdi),%rax
	mov    %rax,0x8(%rdi)
	mov    %rcx,%rax
	add    0x10(%rdi),%rax
	mov    %rax,0x10(%rdi)
	sub    %rcx,%rsi
	test   %rsi,%rsi
	je     f53e <gzseek64+0x11e>
	movl   $0x1,0x68(%rdi)
	mov    %rsi,0x60(%rdi)
	add    0x10(%rdi),%rsi
	mov    %rsi,%rax
	leaveq 
	retq   
	mov    -0x10(%rbp),%rax
	movl   $0x0,(%rax)
	movl   $0x0,0x50(%rax)
	movl   $0x0,0x54(%rax)
	movl   $0x0,0x68(%rax)
	xor    %esi,%esi
	mov    %rsi,%rdx
	mov    %rax,%rdi
	mov    %r15,-0x10(%rbp)
	mov    %rax,%r15
	callq  20a0 <gz_error@plt>
	movl   $0x0,0x80(%r15)
	mov    -0x8(%rbp),%rax
	add    0x10(%r15),%rax
	mov    %rax,0x10(%r15)
	mov    -0x10(%rbp),%r15
	leaveq 
	retq   
	add    0x10(%rdi),%rsi
	test   %rsi,%rsi
	jns    f5a2 <gzseek64+0x182>
	leaveq 
	retq   
	mov    %rdi,%rax
	mov    %rdi,-0x10(%rbp)
	mov    %rsi,-0x8(%rbp)
	mov    %rax,%rdi
	callq  2270 <gzrewind@plt>
	cmp    $0xffffffff,%eax
	je     f5c7 <gzseek64+0x1a7>
	mov    -0x8(%rbp),%rsi
	mov    -0x10(%rbp),%rdi
	jmpq   f497 <gzseek64+0x77>
	mov    $0xffffffffffffffff,%rax
	leaveq 
	retq   

000f5d0 <gztell64>:
	push   %rbp
	mov    %rsp,%rbp
	mov    $0xffffffffffffffff,%rax
	test   %rdi,%rdi
	jne    f5e2 <gztell64+0x12>
	leaveq 
	retq   
	movslq 0x18(%rdi),%rcx
	cmp    $0x1c4f,%ecx
	jne    f5fe <gztell64+0x2e>
	mov    0x10(%rdi),%rcx
	movslq 0x68(%rdi),%rax
	test   %eax,%eax
	jne    f608 <gztell64+0x38>
	xor    %eax,%eax
	jmp    f60c <gztell64+0x3c>
	cmp    $0x79b1,%ecx
	je     f5ee <gztell64+0x1e>
	leaveq 
	retq   
	mov    0x60(%rdi),%rax
	add    %rcx,%rax
	leaveq 
	retq   
	data16 nopw %cs:0x0(%rax,%rax,1)
	nopl   0x0(%rax)

000f620 <gzoffset64>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    $0xffffffffffffffff,%rax
	test   %rdi,%rdi
	jne    f636 <gzoffset64+0x16>
	leaveq 
	retq   
	movslq 0x18(%rdi),%rcx
	cmp    $0x1c4f,%ecx
	jne    f668 <gzoffset64+0x48>
	movslq 0x1c(%rdi),%rax
	xor    %esi,%esi
	mov    $0x1,%edx
	mov    %rdi,-0x8(%rbp)
	mov    %rax,%rdi
	callq  2300 <lseek64@plt>
	cmp    $0xffffffffffffffff,%rax
	jne    f672 <gzoffset64+0x52>
	mov    $0xffffffffffffffff,%rax
	leaveq 
	retq   
	cmp    $0x79b1,%ecx
	je     f642 <gzoffset64+0x22>
	leaveq 
	retq   
	mov    -0x8(%rbp),%rdx
	movslq 0x18(%rdx),%rcx
	cmp    $0x1c4f,%ecx
	je     f684 <gzoffset64+0x64>
	leaveq 
	retq   
	mov    0x80(%rdx),%ecx
	sub    %rcx,%rax
	leaveq 
	retq   
	nop

000f690 <gzopen>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rsi,%rdx
	mov    $0xffffffffffffffff,%rsi
	callq  f880 <gz_open>
	leaveq 
	retq   
	data16 nopw %cs:0x0(%rax,%rax,1)

000f6b0 <gzseek>:
	push   %rbp
	mov    %rsp,%rbp
	callq  2050 <gzseek64@plt>
	leaveq 
	retq   
	nopl   0x0(%rax,%rax,1)

000f6c0 <gztell>:
	push   %rbp
	mov    %rsp,%rbp
	callq  2190 <gztell64@plt>
	leaveq 
	retq   
	nopl   0x0(%rax,%rax,1)

000f6d0 <gzoffset>:
	push   %rbp
	mov    %rsp,%rbp
	callq  2280 <gzoffset64@plt>
	leaveq 
	retq   
	nopl   0x0(%rax,%rax,1)

000f6e0 <gz_error>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    0x70(%rdi),%rcx
	test   %rcx,%rcx
	jne    f6f9 <gz_error+0x19>
	mov    %r14,%rax
	mov    %rdi,%r14
	jmp    f741 <gz_error+0x61>
	movslq 0x6c(%rdi),%rax
	cmp    $0xfffffffc,%eax
	jne    f70a <gz_error+0x2a>
	mov    %r14,%rax
	mov    %rdi,%r14
	jmp    f739 <gz_error+0x59>
	mov    %r13,-0x10(%rbp)
	mov    %r14,-0x18(%rbp)
	mov    %r15,-0x20(%rbp)
	mov    %rsi,%r13
	mov    %rdi,%r14
	mov    %rcx,%rdi
	mov    %rdx,%r15
	callq  2060 <free@plt>
	mov    %r15,%rdx
	mov    %r13,%rsi
	mov    -0x20(%rbp),%r15
	mov    -0x18(%rbp),%rax
	mov    -0x10(%rbp),%r13
	movq   $0x0,0x70(%r14)
	test   %esi,%esi
	jne    f753 <gz_error+0x73>
	mov    %esi,0x6c(%r14)
	test   %rdx,%rdx
	jne    f761 <gz_error+0x81>
	mov    %rax,%r14
	leaveq 
	retq   
	cmp    $0xfffffffb,%esi
	je     f745 <gz_error+0x65>
	movl   $0x0,(%r14)
	jmp    f745 <gz_error+0x65>
	cmp    $0xfffffffc,%esi
	jne    f76b <gz_error+0x8b>
	mov    %rax,%r14
	leaveq 
	retq   
	mov    0x20(%r14),%rdi
	mov    %rax,-0x18(%rbp)
	mov    %r15,-0x20(%rbp)
	mov    %rdx,%r15
	callq  2110 <strlen@plt>
	mov    %r15,%rdi
	mov    %r15,-0x8(%rbp)
	mov    %rax,%r15
	callq  2110 <strlen@plt>
	lea    0x3(%rax,%r15,1),%rdi
	callq  2240 <malloc@plt>
	mov    %rax,0x70(%r14)
	test   %rax,%rax
	je     f7ff <gz_error+0x11f>
	mov    0x20(%r14),%r15
	mov    %rax,%r14
	mov    %r15,%rdi
	callq  2110 <strlen@plt>
	mov    -0x8(%rbp),%rcx
	mov    %rcx,%rdi
	mov    %r13,-0x10(%rbp)
	mov    %r12,-0x8(%rbp)
	mov    %rcx,%r12
	mov    %rax,%r13
	callq  2110 <strlen@plt>
	lea    0x3(%rax,%r13,1),%rsi
	mov    %r15,%rcx
	mov    %r14,%rdi
	mov    %r12,%r9
	xor    %eax,%eax
	lea    0x6afe(%rip),%rdx        # 162df <base_dist+0x253>
	lea    0x6afe(%rip),%r8        # 162e6 <base_dist+0x25a>
	callq  2130 <snprintf@plt>
	mov    -0x8(%rbp),%r12
	mov    -0x20(%rbp),%r15
	mov    -0x18(%rbp),%r14
	mov    -0x10(%rbp),%r13
	leaveq 
	retq   
	movl   $0xfffffffc,0x6c(%r14)
	mov    -0x20(%rbp),%r15
	mov    -0x18(%rbp),%r14
	leaveq 
	retq   
	data16 nopw %cs:0x0(%rax,%rax,1)
	nopl   0x0(%rax)

000f820 <gz_reset>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %r15,-0x8(%rbp)
	movl   $0x0,(%rdi)
	movslq 0x18(%rdi),%rax
	cmp    $0x1c4f,%eax
	jne    f852 <gz_reset+0x32>
	movl   $0x0,0x50(%rdi)
	movl   $0x0,0x54(%rdi)
	movl   $0x0,0x44(%rdi)
	movl   $0x0,0x68(%rdi)
	xor    %esi,%esi
	mov    %rsi,%rdx
	mov    %rdi,%r15
	callq  20a0 <gz_error@plt>
	movq   $0x0,0x10(%r15)
	movl   $0x0,0x80(%r15)
	mov    -0x8(%rbp),%r15
	leaveq 
	retq   
	nop

000f880 <gz_open>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	xor    %eax,%eax
	test   %rdi,%rdi
	jne    f891 <gz_open+0x11>
	leaveq 
	retq   
	mov    $0xe8,%eax
	mov    %rdx,-0x30(%rbp)
	mov    %rdi,-0x28(%rbp)
	mov    %rsi,-0x10(%rbp)
	mov    %rax,%rdi
	callq  2240 <malloc@plt>
	test   %rax,%rax
	jne    f8b3 <gz_open+0x33>
	xor    %eax,%eax
	leaveq 
	retq   
	movl   $0x0,0x28(%rax)
	movl   $0x2000,0x2c(%rax)
	movq   $0x0,0x70(%rax)
	movl   $0x0,0x18(%rax)
	movl   $0xffffffff,0x58(%rax)
	movl   $0x0,0x5c(%rax)
	movl   $0x0,0x40(%rax)
	mov    $0x1,%r8d
	xor    %ecx,%ecx
	mov    -0x30(%rbp),%rsi
	mov    %rcx,%rdx
	jmp    f910 <gz_open+0x90>
	cmp    $0x2f,%dil
	jg     f9a1 <gz_open+0x121>
	add    $0xffffffd5,%edi
	cmp    $0x4d,%edi
	jbe    f9b6 <gz_open+0x136>
	add    $0x1,%rsi
	movsbq (%rsi),%rdi
	test   %dil,%dil
	jne    f8f6 <gz_open+0x76>
	movslq 0x18(%rax),%rsi
	test   %esi,%esi
	je     f9ce <gz_open+0x14e>
	cmp    $0x1c4f,%esi
	jne    f940 <gz_open+0xc0>
	movslq 0x40(%rax),%rsi
	test   %esi,%esi
	jne    f9da <gz_open+0x15a>
	movl   $0x1,0x40(%rax)
	mov    -0x28(%rbp),%rdi
	mov    %r15,-0x8(%rbp)
	mov    %rdx,-0x30(%rbp)
	mov    %rcx,-0x18(%rbp)
	mov    %rax,%r15
	callq  2110 <strlen@plt>
	lea    0x1(%rax),%rdi
	mov    %rdi,-0x20(%rbp)
	callq  2240 <malloc@plt>
	mov    %rax,0x20(%r15)
	test   %rax,%rax
	je     f9e6 <gz_open+0x166>
	xor    %r8d,%r8d
	lea    0x6971(%rip),%rdx        # 162e9 <base_dist+0x25d>
	mov    -0x28(%rbp),%rdi
	mov    %rdi,%rcx
	mov    %r14,-0x28(%rbp)
	mov    %rdi,%r14
	mov    %rax,%rdi
	mov    %r8,%rax
	mov    -0x20(%rbp),%rsi
	callq  2130 <snprintf@plt>
	mov    -0x30(%rbp),%rax
	test   %eax,%eax
	jg     f9f6 <gz_open+0x176>
	xor    %edx,%edx
	jmp    f9fb <gz_open+0x17b>
	cmp    $0x39,%dil
	jg     f900 <gz_open+0x80>
	add    $0xffffffd0,%edi
	mov    %edi,0x58(%rax)
	jmpq   f90c <gz_open+0x8c>
	lea    0x67d3(%rip),%r9        # 16190 <base_dist+0x104>
	movslq (%r9,%rdi,4),%rdi
	add    %r9,%rdi
	jmpq   *%rdi
	mov    %r8,%rcx
	jmpq   f90c <gz_open+0x8c>
	mov    %rax,%rdi
	callq  2060 <free@plt>
	xor    %eax,%eax
	leaveq 
	retq   
	mov    %rax,%rdi
	callq  2060 <free@plt>
	xor    %eax,%eax
	leaveq 
	retq   
	mov    %r15,%rdi
	callq  2060 <free@plt>
	mov    -0x8(%rbp),%r15
	xor    %eax,%eax
	leaveq 
	retq   
	mov    $0x80000,%edx
	movslq 0x18(%r15),%rsi
	cmp    $0x1c4f,%esi
	jne    fabd <gz_open+0x23d>
	xor    %ecx,%ecx
	mov    -0x10(%rbp),%rax
	test   %eax,%eax
	jns    fa27 <gz_open+0x1a7>
	lea    (%rcx,%rdx,1),%esi
	mov    %r14,%rdi
	xor    %eax,%eax
	mov    $0x1b6,%edx
	callq  22c0 <open@plt>
	mov    %eax,0x1c(%r15)
	cmp    $0xffffffff,%eax
	je     fad3 <gz_open+0x253>
	movslq 0x18(%r15),%rcx
	cmp    $0x1,%ecx
	je     faf0 <gz_open+0x270>
	xor    %r14d,%r14d
	jmpq   fb0b <gz_open+0x28b>
	mov    %rax,%rdi
	callq  2060 <free@plt>
	xor    %eax,%eax
	leaveq 
	retq   
	movl   $0x1c4f,0x18(%rax)
	jmpq   f90c <gz_open+0x8c>
	movl   $0x79b1,0x18(%rax)
	jmpq   f90c <gz_open+0x8c>
	movl   $0x1,0x18(%rax)
	jmpq   f90c <gz_open+0x8c>
	mov    %r8,%rdx
	jmpq   f90c <gz_open+0x8c>
	movl   $0x1,0x5c(%rax)
	jmpq   f90c <gz_open+0x8c>
	movl   $0x2,0x5c(%rax)
	jmpq   f90c <gz_open+0x8c>
	movl   $0x3,0x5c(%rax)
	jmpq   f90c <gz_open+0x8c>
	movl   $0x4,0x5c(%rax)
	jmpq   f90c <gz_open+0x8c>
	movl   $0x1,0x40(%rax)
	jmpq   f90c <gz_open+0x8c>
	mov    -0x18(%rbp),%rax
	test   %eax,%eax
	jg     fb4e <gz_open+0x2ce>
	mov    $0x41,%ecx
	jmpq   fb53 <gz_open+0x2d3>
	mov    0x20(%r15),%rdi
	callq  2060 <free@plt>
	mov    %r15,%rdi
	callq  2060 <free@plt>
	mov    -0x28(%rbp),%r14
	mov    -0x8(%rbp),%r15
	xor    %eax,%eax
	leaveq 
	retq   
	mov    %rax,%rdi
	mov    $0x2,%edx
	xor    %r14d,%r14d
	mov    %r14,%rsi
	callq  2300 <lseek64@plt>
	movl   $0x79b1,0x18(%r15)
	movslq 0x18(%r15),%rax
	cmp    $0x1c4f,%eax
	jne    fb39 <gz_open+0x2b9>
	mov    %r14,%rsi
	movslq 0x1c(%r15),%rdi
	mov    $0x1,%edx
	callq  2300 <lseek64@plt>
	mov    %rax,0x48(%r15)
	cmp    $0xffffffffffffffff,%rax
	jne    fb39 <gz_open+0x2b9>
	movq   $0x0,0x48(%r15)
	mov    %r15,%rdi
	callq  f820 <gz_reset>
	mov    %r15,%rax
	mov    -0x28(%rbp),%r14
	mov    -0x8(%rbp),%r15
	leaveq 
	retq   
	mov    $0xc1,%ecx
	cmp    $0x79b1,%esi
	je     fb62 <gz_open+0x2e2>
	mov    $0x400,%eax
	jmp    fb67 <gz_open+0x2e7>
	mov    $0x200,%eax
	add    %eax,%ecx
	jmpq   fa0d <gz_open+0x18d>
	xchg   %ax,%ax

000fb70 <gzread>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    $0xffffffffffffffff,%rax
	test   %rdi,%rdi
	jne    fb86 <gzread+0x16>
	leaveq 
	retq   
	movslq 0x18(%rdi),%rcx
	cmp    $0x1c4f,%ecx
	je     fb94 <gzread+0x24>
	leaveq 
	retq   
	movslq 0x6c(%rdi),%rcx
	test   %ecx,%ecx
	jne    fbb8 <gzread+0x48>
	test   %edx,%edx
	js     fbbf <gzread+0x4f>
	mov    %edx,%edx
	mov    %rdi,%rax
	mov    %rdi,-0x8(%rbp)
	mov    %rax,%rdi
	callq  10920 <gz_read>
	test   %rax,%rax
	je     fbdb <gzread+0x6b>
	leaveq 
	retq   
	cmp    $0xfffffffb,%ecx
	je     fb9c <gzread+0x2c>
	leaveq 
	retq   
	mov    $0xfffffffffffffffe,%rsi
	lea    0x671f(%rip),%rdx        # 162ec <base_dist+0x260>
	callq  20a0 <gz_error@plt>
	mov    $0xffffffffffffffff,%rax
	leaveq 
	retq   
	mov    -0x8(%rbp),%rcx
	movslq 0x6c(%rcx),%rcx
	test   %ecx,%ecx
	jne    fbe9 <gzread+0x79>
	leaveq 
	retq   
	cmp    $0xfffffffb,%ecx
	je     fbf7 <gzread+0x87>
	mov    $0xffffffffffffffff,%rax
	leaveq 
	retq   
	leaveq 
	retq   
	nopl   0x0(%rax)

000fc00 <gzfread>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	xor    %eax,%eax
	test   %rcx,%rcx
	jne    fc11 <gzfread+0x11>
	leaveq 
	retq   
	movslq 0x18(%rcx),%r8
	cmp    $0x1c4f,%r8d
	je     fc20 <gzfread+0x20>
	leaveq 
	retq   
	movslq 0x6c(%rcx),%r8
	test   %r8d,%r8d
	jne    fc3c <gzfread+0x3c>
	mov    %rsi,%r8
	imul   %rdx,%r8
	test   %rsi,%rsi
	jne    fc44 <gzfread+0x44>
	test   %r8,%r8
	jne    fc5c <gzfread+0x5c>
	leaveq 
	retq   
	cmp    $0xfffffffb,%r8d
	je     fc29 <gzfread+0x29>
	leaveq 
	retq   
	mov    %rax,%r9
	mov    %rdx,%r10
	xor    %edx,%edx
	mov    %r8,%rax
	div    %rsi
	cmp    %r10,%rax
	jne    fc7c <gzfread+0x7c>
	mov    %r9,%rax
	jmp    fc35 <gzfread+0x35>
	mov    %r15,-0x8(%rbp)
	mov    %r8,%rdx
	mov    %rsi,%r15
	mov    %rdi,%rsi
	mov    %rcx,%rdi
	callq  10920 <gz_read>
	xor    %edx,%edx
	div    %r15
	mov    -0x8(%rbp),%r15
	leaveq 
	retq   
	mov    %rcx,%rdi
	mov    $0xfffffffffffffffe,%rsi
	lea    0x667e(%rip),%rdx        # 1630b <base_dist+0x27f>
	callq  20a0 <gz_error@plt>
	xor    %eax,%eax
	leaveq 
	retq   
	nopw   %cs:0x0(%rax,%rax,1)

000fca0 <gzgets>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x40,%rsp
	xor    %eax,%eax
	test   %rdi,%rdi
	jne    fcb1 <gzgets+0x11>
	leaveq 
	retq   
	test   %rsi,%rsi
	jne    fcb8 <gzgets+0x18>
	leaveq 
	retq   
	test   %edx,%edx
	jg     fcbe <gzgets+0x1e>
	leaveq 
	retq   
	movslq 0x18(%rdi),%rcx
	cmp    $0x1c4f,%ecx
	je     fccc <gzgets+0x2c>
	leaveq 
	retq   
	movslq 0x6c(%rdi),%rcx
	test   %ecx,%ecx
	je     fcdb <gzgets+0x3b>
	cmp    $0xfffffffb,%ecx
	je     fcdb <gzgets+0x3b>
	leaveq 
	retq   
	movslq 0x68(%rdi),%rcx
	test   %ecx,%ecx
	je     fd1b <gzgets+0x7b>
	movl   $0x0,0x68(%rdi)
	mov    0x60(%rdi),%rcx
	mov    %rdi,%rax
	mov    %rdx,-0x38(%rbp)
	mov    %rsi,-0x30(%rbp)
	mov    %rdi,-0x28(%rbp)
	mov    %rcx,%rsi
	mov    %rax,%rdi
	callq  10860 <gz_skip>
	cmp    $0xffffffff,%eax
	je     fd2c <gzgets+0x8c>
	xor    %eax,%eax
	mov    -0x28(%rbp),%rdi
	mov    -0x30(%rbp),%rsi
	mov    -0x38(%rbp),%rdx
	lea    -0x1(%rdx),%ecx
	test   %ecx,%ecx
	jne    fd30 <gzgets+0x90>
	mov    %rsi,%rcx
	cmp    %rcx,%rsi
	jne    fd5b <gzgets+0xbb>
	leaveq 
	retq   
	xor    %eax,%eax
	leaveq 
	retq   
	mov    $0xa,%eax
	mov    %rsi,-0x30(%rbp)
	mov    %rbx,-0x8(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %r15,-0x28(%rbp)
	mov    %rcx,%rbx
	mov    %rdi,%r12
	mov    %rax,%r13
	jmpq   fde9 <gzgets+0x149>
	movb   $0x0,(%rcx)
	mov    %rsi,%rax
	leaveq 
	retq   
	cmp    %ebx,%r14d
	jbe    fd6b <gzgets+0xcb>
	mov    %rbx,%r14
	mov    %r13,%rax
	mov    %rsi,%r13
	mov    %rax,%rsi
	mov    0x8(%r12),%r15
	mov    %r14d,%edx
	mov    %r15,%rdi
	callq  21b0 <memchr@plt>
	mov    %rax,-0x38(%rbp)
	test   %rax,%rax
	je     fd94 <gzgets+0xf4>
	sub    %r15,%rax
	lea    0x1(%rax),%r14d
	mov    %r15,%rsi
	mov    %r13,%r15
	mov    %r14d,%r13d
	mov    %r15,%rdi
	mov    %r13,%rdx
	callq  21f0 <memcpy@plt>
	mov    (%r12),%eax
	sub    %r14d,%eax
	mov    %eax,(%r12)
	mov    %r13,%rax
	add    0x8(%r12),%rax
	mov    %rax,0x8(%r12)
	mov    %r13,%rax
	add    0x10(%r12),%rax
	mov    %rax,0x10(%r12)
	lea    0x0(%r13,%r15,1),%rsi
	cmp    %ebx,%r14d
	je     fe29 <gzgets+0x189>
	mov    -0x38(%rbp),%rax
	test   %rax,%rax
	jne    fe4b <gzgets+0x1ab>
	sub    %r14d,%ebx
	mov    $0xa,%r13d
	mov    (%r12),%eax
	test   %eax,%eax
	je     fe6d <gzgets+0x1cd>
	mov    (%r12),%r14d
	test   %r14d,%r14d
	jne    fd63 <gzgets+0xc3>
	movl   $0x1,0x54(%r12)
	mov    %rsi,%rcx
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	xor    %eax,%eax
	mov    -0x30(%rbp),%rsi
	jmpq   fd25 <gzgets+0x85>
	mov    %rsi,%rcx
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	xor    %eax,%eax
	mov    -0x30(%rbp),%rsi
	jmpq   fd25 <gzgets+0x85>
	mov    %rsi,%rcx
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	xor    %eax,%eax
	mov    -0x30(%rbp),%rsi
	jmpq   fd25 <gzgets+0x85>
	mov    %rsi,%r14
	mov    %r12,%rdi
	callq  10760 <gz_fetch>
	cmp    $0xffffffff,%eax
	je     fe85 <gzgets+0x1e5>
	mov    %r14,%rsi
	jmpq   fdf1 <gzgets+0x151>
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	xor    %eax,%eax
	leaveq 
	retq   
	nopl   (%rax)

000fea0 <gzgetc>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    $0xffffffffffffffff,%rax
	test   %rdi,%rdi
	jne    feb6 <gzgetc+0x16>
	leaveq 
	retq   
	movslq 0x18(%rdi),%rcx
	cmp    $0x1c4f,%ecx
	je     fec4 <gzgetc+0x24>
	leaveq 
	retq   
	movslq 0x6c(%rdi),%rcx
	test   %ecx,%ecx
	jne    feee <gzgetc+0x4e>
	mov    (%rdi),%eax
	test   %eax,%eax
	jne    fef5 <gzgetc+0x55>
	lea    -0x1(%rbp),%rsi
	mov    $0x1,%edx
	callq  10920 <gz_read>
	test   %rax,%rax
	jne    ff17 <gzgetc+0x77>
	mov    $0xffffffffffffffff,%rax
	leaveq 
	retq   
	cmp    $0xfffffffb,%ecx
	je     fecc <gzgetc+0x2c>
	leaveq 
	retq   
	add    $0xffffffff,%eax
	mov    %eax,(%rdi)
	mov    0x10(%rdi),%rax
	add    $0x1,%rax
	mov    %rax,0x10(%rdi)
	mov    0x8(%rdi),%rax
	lea    0x1(%rax),%rcx
	mov    %rcx,0x8(%rdi)
	movzbl (%rax),%eax
	leaveq 
	retq   
	movzbl -0x1(%rbp),%eax
	leaveq 
	retq   
	nopl   (%rax)

000ff20 <gzungetc>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    $0xffffffffffffffff,%rax
	test   %rsi,%rsi
	jne    ff36 <gzungetc+0x16>
	leaveq 
	retq   
	movslq 0x18(%rsi),%rcx
	cmp    $0x1c4f,%ecx
	je     ff44 <gzungetc+0x24>
	leaveq 
	retq   
	movslq 0x6c(%rsi),%rcx
	test   %ecx,%ecx
	je     ff53 <gzungetc+0x33>
	cmp    $0xfffffffb,%ecx
	je     ff53 <gzungetc+0x33>
	leaveq 
	retq   
	movslq 0x68(%rsi),%rcx
	test   %ecx,%ecx
	je     ff90 <gzungetc+0x70>
	movl   $0x0,0x68(%rsi)
	mov    0x60(%rsi),%rcx
	mov    %rsi,%rax
	mov    %rdi,-0x10(%rbp)
	mov    %rsi,-0x8(%rbp)
	mov    %rcx,%rsi
	mov    %rax,%rdi
	callq  10860 <gz_skip>
	cmp    $0xffffffff,%eax
	je     ff96 <gzungetc+0x76>
	mov    $0xffffffffffffffff,%rax
	mov    -0x8(%rbp),%rsi
	mov    -0x10(%rbp),%rdi
	test   %edi,%edi
	jns    ff9f <gzungetc+0x7f>
	leaveq 
	retq   
	mov    $0xffffffffffffffff,%rax
	leaveq 
	retq   
	mov    (%rsi),%edx
	test   %edx,%edx
	je     ffc2 <gzungetc+0xa2>
	mov    0x28(%rsi),%eax
	add    %eax,%eax
	cmp    %eax,%edx
	je     fff7 <gzungetc+0xd7>
	mov    0x38(%rsi),%rcx
	cmp    0x8(%rsi),%rcx
	jne    10030 <gzungetc+0x110>
	mov    %eax,%eax
	add    %rcx,%rax
	add    %rdx,%rcx
	jmp    10023 <gzungetc+0x103>
	movl   $0x1,(%rsi)
	mov    0x28(%rsi),%eax
	add    %eax,%eax
	mov    %eax,%ecx
	mov    0x38(%rsi),%rax
	lea    -0x1(%rcx,%rax,1),%rax
	mov    %rax,0x8(%rsi)
	mov    %dil,(%rax)
	mov    0x10(%rsi),%rax
	add    $0xffffffffffffffff,%rax
	mov    %rax,0x10(%rsi)
	movl   $0x0,0x54(%rsi)
	mov    %rdi,%rax
	leaveq 
	retq   
	mov    %rsi,%rdi
	mov    $0xfffffffffffffffd,%rsi
	lea    0x6324(%rip),%rdx        # 1632c <base_dist+0x2a0>
	callq  20a0 <gz_error@plt>
	mov    $0xffffffffffffffff,%rax
	leaveq 
	retq   
	add    $0xffffffffffffffff,%rcx
	movzbl (%rcx),%edx
	add    $0xffffffffffffffff,%rax
	mov    %dl,(%rax)
	mov    0x38(%rsi),%rdx
	cmp    %rcx,%rdx
	jb     10016 <gzungetc+0xf6>
	mov    %rax,0x8(%rsi)
	mov    (%rsi),%eax
	add    $0x1,%eax
	mov    %eax,(%rsi)
	mov    0x8(%rsi),%rax
	add    $0xffffffffffffffff,%rax
	mov    %rax,0x8(%rsi)
	mov    %dil,(%rax)
	mov    0x10(%rsi),%rax
	add    $0xffffffffffffffff,%rax
	mov    %rax,0x10(%rsi)
	movl   $0x0,0x54(%rsi)
	mov    %rdi,%rax
	leaveq 
	retq   
	xchg   %ax,%ax

0010060 <gzdirect>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	test   %rdi,%rdi
	jne    10071 <gzdirect+0x11>
	xor    %eax,%eax
	leaveq 
	retq   
	movslq 0x18(%rdi),%rax
	cmp    $0x1c4f,%eax
	je     10082 <gzdirect+0x22>
	movslq 0x40(%rdi),%rax
	leaveq 
	retq   
	movslq 0x44(%rdi),%rax
	test   %eax,%eax
	jne    1007c <gzdirect+0x1c>
	mov    (%rdi),%eax
	test   %eax,%eax
	jne    1007c <gzdirect+0x1c>
	mov    %rdi,%rax
	mov    %r15,-0x8(%rbp)
	mov    %rdi,%r15
	mov    %rax,%rdi
	callq  10330 <gz_look>
	mov    %r15,%rdi
	mov    -0x8(%rbp),%r15
	jmp    1007c <gzdirect+0x1c>
	nopl   0x0(%rax,%rax,1)

00100b0 <gzclose_r>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    $0xfffffffffffffffe,%rax
	test   %rdi,%rdi
	jne    100c6 <gzclose_r+0x16>
	leaveq 
	retq   
	movslq 0x18(%rdi),%rcx
	cmp    $0x1c4f,%ecx
	je     100d4 <gzclose_r+0x24>
	leaveq 
	retq   
	mov    0x28(%rdi),%eax
	test   %eax,%eax
	jne    100e3 <gzclose_r+0x33>
	mov    %r15,%rcx
	mov    %rdi,%r15
	jmp    1010c <gzclose_r+0x5c>
	lea    0x78(%rdi),%rax
	mov    %r15,-0x10(%rbp)
	mov    %rdi,%r15
	mov    %rax,%rdi
	callq  2210 <inflateEnd@plt>
	mov    0x38(%r15),%rdi
	callq  2060 <free@plt>
	mov    0x30(%r15),%rdi
	callq  2060 <free@plt>
	mov    -0x10(%rbp),%rcx
	xor    %esi,%esi
	movslq 0x6c(%r15),%rax
	cmp    $0xfffffffb,%eax
	je     1011c <gzclose_r+0x6c>
	mov    %rsi,%rax
	jmp    10123 <gzclose_r+0x73>
	mov    $0xfffffffffffffffb,%rax
	mov    %rax,-0x8(%rbp)
	mov    %rsi,%rdx
	mov    %r15,%rdi
	mov    %rcx,-0x10(%rbp)
	callq  20a0 <gz_error@plt>
	mov    0x20(%r15),%rdi
	callq  2060 <free@plt>
	movslq 0x1c(%r15),%rdi
	callq  2180 <close@plt>
	mov    %r15,%rdi
	mov    %rax,%r15
	callq  2060 <free@plt>
	test   %r15d,%r15d
	je     10165 <gzclose_r+0xb5>
	mov    $0xffffffffffffffff,%rax
	mov    -0x10(%rbp),%r15
	leaveq 
	retq   
	mov    -0x8(%rbp),%rax
	mov    -0x10(%rbp),%r15
	leaveq 
	retq   
	nop

0010170 <gzgetc_>:
	push   %rbp
	mov    %rsp,%rbp
	callq  20b0 <gzgetc@plt>
	leaveq 
	retq   
	nopl   0x0(%rax,%rax,1)

0010180 <gz_load>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %rbx,-0x8(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %r15,-0x28(%rbp)
	mov    %rdi,%rbx
	mov    %rcx,%r12
	mov    %rsi,%r13
	mov    %rdx,%r15
	movl   $0x0,(%r12)
	mov    $0x40000000,%r14d
	jmp    101df <gz_load+0x5f>
	mov    %r14,%rax
	lea    (%rcx,%r13,1),%rsi
	movslq 0x1c(%rbx),%rdi
	mov    %eax,%edx
	callq  21c0 <read@plt>
	test   %rax,%rax
	jle    101f1 <gz_load+0x71>
	mov    %rax,%rcx
	add    (%r12),%ecx
	mov    %ecx,(%r12)
	cmp    %r15d,%ecx
	jae    101f1 <gz_load+0x71>
	mov    (%r12),%ecx
	mov    %r15,%rax
	sub    %ecx,%eax
	cmp    $0x40000000,%eax
	ja     101b8 <gz_load+0x38>
	jmp    101bb <gz_load+0x3b>
	test   %rax,%rax
	js     10216 <gz_load+0x96>
	xor    %ecx,%ecx
	test   %rax,%rax
	je     10251 <gz_load+0xd1>
	mov    %rcx,%rax
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	leaveq 
	retq   
	callq  2070 <__errno_location@plt>
	movslq (%rax),%rdi
	callq  2330 <strerror@plt>
	mov    %rax,%rdx
	mov    %rbx,%rdi
	mov    $0xffffffffffffffff,%r12
	mov    %r12,%rsi
	callq  20a0 <gz_error@plt>
	mov    %r12,%rax
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	leaveq 
	retq   
	movl   $0x1,0x50(%rbx)
	mov    %rcx,%rax
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	leaveq 
	retq   
	data16 nopw %cs:0x0(%rax,%rax,1)
	nopl   0x0(%rax)

0010280 <gz_avail>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    $0xffffffffffffffff,%rax
	movslq 0x6c(%rdi),%rcx
	test   %ecx,%ecx
	jne    102a3 <gz_avail+0x23>
	xor    %eax,%eax
	movslq 0x50(%rdi),%rcx
	test   %ecx,%ecx
	je     102aa <gz_avail+0x2a>
	leaveq 
	retq   
	cmp    $0xfffffffb,%ecx
	je     10297 <gz_avail+0x17>
	leaveq 
	retq   
	mov    0x80(%rdi),%edx
	test   %edx,%edx
	jne    102ee <gz_avail+0x6e>
	mov    0x80(%rdi),%eax
	mov    %rax,%rsi
	add    0x30(%rdi),%rsi
	mov    0x28(%rdi),%edx
	sub    %eax,%edx
	lea    -0xc(%rbp),%rcx
	mov    %rdi,%rax
	mov    %r15,-0x8(%rbp)
	mov    %rdi,%r15
	mov    %rax,%rdi
	callq  10180 <gz_load>
	cmp    $0xffffffff,%eax
	jne    102f8 <gz_avail+0x78>
	mov    $0xffffffffffffffff,%rax
	mov    -0x8(%rbp),%r15
	leaveq 
	retq   
	mov    0x30(%rdi),%rcx
	mov    0x78(%rdi),%rax
	jmp    10321 <gz_avail+0xa1>
	mov    0x80(%r15),%eax
	add    -0xc(%rbp),%eax
	mov    %eax,0x80(%r15)
	mov    0x30(%r15),%rax
	mov    %rax,0x78(%r15)
	xor    %eax,%eax
	mov    -0x8(%rbp),%r15
	leaveq 
	retq   
	add    $0x1,%rax
	add    $0x1,%rcx
	movzbl (%rax),%esi
	mov    %sil,(%rcx)
	add    $0xffffffff,%edx
	test   %edx,%edx
	jne    10319 <gz_avail+0x99>
	jmp    102b4 <gz_avail+0x34>

0010330 <gz_look>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	lea    0x78(%rdi),%r8
	mov    %r8,-0x18(%rbp)
	mov    0x28(%rdi),%eax
	test   %eax,%eax
	je     103ce <gz_look+0x9e>
	mov    %r15,%rcx
	mov    %rdi,%r15
	xor    %eax,%eax
	mov    0x80(%r15),%edx
	cmp    $0x1,%edx
	jbe    10483 <gz_look+0x153>
	mov    0x80(%r15),%edx
	cmp    $0x1,%edx
	ja     104a5 <gz_look+0x175>
	movslq 0x40(%r15),%rdx
	test   %edx,%edx
	je     104e5 <gz_look+0x1b5>
	mov    0x38(%r15),%rdi
	mov    %rdi,0x8(%r15)
	mov    0x80(%r15),%edx
	test   %edx,%edx
	je     103b9 <gz_look+0x89>
	mov    (%r8),%rsi
	mov    %rcx,-0x18(%rbp)
	callq  21f0 <memcpy@plt>
	mov    0x80(%r15),%eax
	mov    %eax,(%r15)
	movl   $0x0,0x80(%r15)
	xor    %eax,%eax
	mov    -0x18(%rbp),%rcx
	movl   $0x1,0x44(%r15)
	movl   $0x1,0x40(%r15)
	mov    %rcx,%r15
	leaveq 
	retq   
	mov    0x2c(%rdi),%eax
	mov    %r15,-0x10(%rbp)
	mov    %rdi,%r15
	mov    %rax,%rdi
	callq  2240 <malloc@plt>
	mov    %rax,0x30(%r15)
	mov    0x2c(%r15),%eax
	add    %eax,%eax
	mov    %eax,%edi
	callq  2240 <malloc@plt>
	mov    %rax,0x38(%r15)
	mov    0x30(%r15),%rcx
	test   %rcx,%rcx
	je     10504 <gz_look+0x1d4>
	test   %rax,%rax
	je     10504 <gz_look+0x1d4>
	mov    0x2c(%r15),%eax
	mov    %eax,0x28(%r15)
	movq   $0x0,0xb8(%r15)
	movq   $0x0,0xc0(%r15)
	movq   $0x0,0xc8(%r15)
	movl   $0x0,0x80(%r15)
	movq   $0x0,0x78(%r15)
	mov    $0x1f,%esi
	lea    0x5f06(%rip),%rdx        # 16359 <base_dist+0x2cd>
	mov    $0x70,%ecx
	mov    -0x18(%rbp),%rax
	mov    %rax,%rdi
	mov    %r14,-0x8(%rbp)
	mov    %rax,%r14
	callq  22d0 <inflateInit2_@plt>
	test   %eax,%eax
	jne    10538 <gz_look+0x208>
	mov    %r14,%r8
	mov    -0x8(%rbp),%r14
	mov    -0x10(%rbp),%rcx
	jmpq   10351 <gz_look+0x21>
	mov    %r15,%rdi
	mov    %rcx,-0x10(%rbp)
	callq  10280 <gz_avail>
	cmp    $0xffffffff,%eax
	jne    10578 <gz_look+0x248>
	mov    $0xffffffffffffffff,%rax
	mov    -0x10(%rbp),%r15
	leaveq 
	retq   
	mov    (%r8),%rsi
	movzbl (%rsi),%edx
	cmp    $0x1f,%dl
	jne    10373 <gz_look+0x43>
	movzbl 0x1(%rsi),%edx
	cmp    $0x8b,%dl
	jne    10373 <gz_look+0x43>
	mov    %rcx,-0x18(%rbp)
	mov    %r8,%rdi
	callq  22f0 <inflateReset@plt>
	movl   $0x2,0x44(%r15)
	movl   $0x0,0x40(%r15)
	xor    %eax,%eax
	mov    -0x18(%rbp),%r15
	leaveq 
	retq   
	movl   $0x0,0x80(%r15)
	movl   $0x1,0x50(%r15)
	movl   $0x0,(%r15)
	mov    %rcx,%r15
	leaveq 
	retq   
	mov    %rax,%rdi
	callq  2060 <free@plt>
	mov    0x30(%r15),%rdi
	callq  2060 <free@plt>
	mov    %r15,%rdi
	lea    0x5e2c(%rip),%rdx        # 1634b <base_dist+0x2bf>
	mov    $0xfffffffffffffffc,%rsi
	callq  20a0 <gz_error@plt>
	mov    $0xffffffffffffffff,%rax
	mov    -0x10(%rbp),%r15
	leaveq 
	retq   
	mov    0x38(%r15),%rdi
	callq  2060 <free@plt>
	mov    0x30(%r15),%rdi
	callq  2060 <free@plt>
	mov    %r15,%rdi
	movl   $0x0,0x28(%rdi)
	lea    0x5df0(%rip),%rdx        # 1634b <base_dist+0x2bf>
	mov    $0xfffffffffffffffc,%rsi
	callq  20a0 <gz_error@plt>
	mov    -0x8(%rbp),%r14
	mov    $0xffffffffffffffff,%rax
	mov    -0x10(%rbp),%r15
	leaveq 
	retq   
	mov    0x80(%r15),%eax
	test   %eax,%eax
	je     10592 <gz_look+0x262>
	xor    %eax,%eax
	mov    -0x18(%rbp),%r8
	mov    -0x10(%rbp),%rcx
	jmpq   10363 <gz_look+0x33>
	xor    %eax,%eax
	mov    -0x10(%rbp),%r15
	leaveq 
	retq   
	nopw   0x0(%rax,%rax,1)

00105a0 <gz_decomp>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %r12,-0x10(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %r15,-0x28(%rbp)
	mov    0x98(%rdi),%eax
	mov    %rax,-0x8(%rbp)
	mov    $0xffffffffffffffff,%r12
	lea    0x78(%rdi),%r15
	xor    %r14d,%r14d
	mov    %r14,-0x30(%rbp)
	mov    %rdi,%r13
	mov    0x80(%r13),%eax
	test   %eax,%eax
	jne    105ef <gz_decomp+0x4f>
	mov    %r13,%rdi
	callq  10280 <gz_avail>
	cmp    $0xffffffff,%eax
	je     1064f <gz_decomp+0xaf>
	mov    0x80(%r13),%eax
	test   %eax,%eax
	jne    10664 <gz_decomp+0xc4>
	mov    $0xfffffffffffffffb,%rsi
	lea    0x5d58(%rip),%rdx        # 16360 <base_dist+0x2d4>
	mov    %r13,%rdi
	callq  20a0 <gz_error@plt>
	mov    -0x30(%rbp),%rax
	mov    0x98(%r13),%edx
	mov    -0x8(%rbp),%rcx
	sub    %edx,%ecx
	mov    %ecx,0x0(%r13)
	mov    %ecx,%edx
	mov    0x90(%r13),%rcx
	sub    %rdx,%rcx
	mov    %rcx,0x8(%r13)
	cmp    $0x1,%eax
	je     106ad <gz_decomp+0x10d>
	mov    %r14,%rax
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	leaveq 
	retq   
	mov    %r12,%rax
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	leaveq 
	retq   
	mov    %r15,%rdi
	mov    %r14,%rsi
	callq  2080 <inflate@plt>
	mov    %rax,-0x30(%rbp)
	cmp    $0xfffffffe,%eax
	je     106ca <gz_decomp+0x12a>
	cmp    $0x2,%eax
	je     106ca <gz_decomp+0x12a>
	cmp    $0xfffffffc,%eax
	je     106f5 <gz_decomp+0x155>
	cmp    $0xfffffffd,%eax
	je     10720 <gz_decomp+0x180>
	mov    0x98(%r13),%ecx
	test   %ecx,%ecx
	je     10614 <gz_decomp+0x74>
	cmp    $0x1,%eax
	jne    105d7 <gz_decomp+0x37>
	mov    $0x1,%eax
	jmpq   10614 <gz_decomp+0x74>
	movl   $0x0,0x44(%r13)
	mov    %r14,%rax
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	leaveq 
	retq   
	mov    %r13,%rdi
	mov    $0xfffffffffffffffe,%rsi
	lea    0x5c9c(%rip),%rdx        # 16377 <base_dist+0x2eb>
	callq  20a0 <gz_error@plt>
	mov    %r12,%rax
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	leaveq 
	retq   
	mov    %r13,%rdi
	mov    $0xfffffffffffffffc,%rsi
	lea    0x5c45(%rip),%rdx        # 1634b <base_dist+0x2bf>
	callq  20a0 <gz_error@plt>
	mov    %r12,%rax
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	leaveq 
	retq   
	mov    0xa8(%r13),%rdx
	test   %rdx,%rdx
	jne    10733 <gz_decomp+0x193>
	lea    0x5c6b(%rip),%rdx        # 1639e <base_dist+0x312>
	mov    %r13,%rdi
	mov    $0xfffffffffffffffd,%rsi
	callq  20a0 <gz_error@plt>
	mov    %r12,%rax
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	leaveq 
	retq   
	nopw   0x0(%rax,%rax,1)

0010760 <gz_fetch>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %r14,-0x8(%rbp)
	mov    %r15,-0x10(%rbp)
	mov    %rdi,%r15
	mov    $0xffffffffffffffff,%r14
	jmp    10784 <gz_fetch+0x24>
	movslq 0x50(%r15),%rax
	test   %eax,%eax
	jne    107c8 <gz_fetch+0x68>
	movslq 0x44(%r15),%rax
	test   %eax,%eax
	jle    107df <gz_fetch+0x7f>
	cmp    $0x1,%eax
	je     107f6 <gz_fetch+0x96>
	cmp    $0x2,%eax
	jne    107e3 <gz_fetch+0x83>
	mov    0x28(%r15),%eax
	add    %eax,%eax
	mov    %eax,0x98(%r15)
	mov    0x38(%r15),%rax
	mov    %rax,0x90(%r15)
	mov    %r15,%rdi
	callq  105a0 <gz_decomp>
	cmp    $0xffffffff,%eax
	jne    107e3 <gz_fetch+0x83>
	mov    %r14,%rax
	mov    -0x10(%rbp),%r15
	mov    -0x8(%rbp),%r14
	leaveq 
	retq   
	mov    0x80(%r15),%eax
	test   %eax,%eax
	jne    10784 <gz_fetch+0x24>
	xor    %eax,%eax
	mov    -0x10(%rbp),%r15
	mov    -0x8(%rbp),%r14
	leaveq 
	retq   
	test   %eax,%eax
	je     1081e <gz_fetch+0xbe>
	mov    (%r15),%eax
	test   %eax,%eax
	je     1077c <gz_fetch+0x1c>
	xor    %eax,%eax
	mov    -0x10(%rbp),%r15
	mov    -0x8(%rbp),%r14
	leaveq 
	retq   
	mov    0x38(%r15),%rsi
	mov    0x28(%r15),%eax
	lea    (%rax,%rax,1),%edx
	mov    %r15,%rcx
	mov    %r15,%rdi
	callq  10180 <gz_load>
	cmp    $0xffffffff,%eax
	jne    1083f <gz_fetch+0xdf>
	mov    %r14,%rax
	mov    -0x10(%rbp),%r15
	mov    -0x8(%rbp),%r14
	leaveq 
	retq   
	mov    %r15,%rdi
	callq  10330 <gz_look>
	cmp    $0xffffffff,%eax
	je     10853 <gz_fetch+0xf3>
	movslq 0x44(%r15),%rax
	test   %eax,%eax
	jne    107e3 <gz_fetch+0x83>
	xor    %eax,%eax
	mov    -0x10(%rbp),%r15
	mov    -0x8(%rbp),%r14
	leaveq 
	retq   
	mov    0x38(%r15),%rax
	mov    %rax,0x8(%r15)
	xor    %eax,%eax
	mov    -0x10(%rbp),%r15
	mov    -0x8(%rbp),%r14
	leaveq 
	retq   
	mov    %r14,%rax
	mov    -0x10(%rbp),%r15
	mov    -0x8(%rbp),%r14
	leaveq 
	retq   

0010860 <gz_skip>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %r14,-0x8(%rbp)
	mov    %r15,-0x10(%rbp)
	mov    %r13,%r14
	mov    %r12,%r13
	mov    %rbx,%r12
	mov    %rsi,%rbx
	mov    %rdi,%r15
	jmp    108a4 <gz_skip+0x44>
	mov    %rbx,%rcx
	sub    %ecx,%eax
	mov    %eax,(%r15)
	mov    %ecx,%ecx
	mov    %rcx,%rax
	add    0x8(%r15),%rax
	mov    %rax,0x8(%r15)
	mov    %rcx,%rax
	add    0x10(%r15),%rax
	mov    %rax,0x10(%r15)
	sub    %rcx,%rbx
	test   %rbx,%rbx
	jne    108be <gz_skip+0x5e>
	mov    %r12,%rbx
	mov    %r13,%r12
	mov    %r14,%r13
	xor    %eax,%eax
	mov    -0x10(%rbp),%r15
	mov    -0x8(%rbp),%r14
	leaveq 
	retq   
	mov    (%r15),%eax
	test   %eax,%eax
	jne    108f4 <gz_skip+0x94>
	movslq 0x50(%r15),%rax
	test   %eax,%eax
	jne    108fe <gz_skip+0x9e>
	mov    %r15,%rdi
	callq  10760 <gz_fetch>
	cmp    $0xffffffff,%eax
	jne    108a4 <gz_skip+0x44>
	mov    %r12,%rbx
	mov    %r13,%r12
	mov    %r14,%r13
	mov    $0xffffffffffffffff,%rax
	mov    -0x10(%rbp),%r15
	mov    -0x8(%rbp),%r14
	leaveq 
	retq   
	cmp    %rbx,%rax
	jg     10881 <gz_skip+0x21>
	mov    %rax,%rcx
	jmp    10884 <gz_skip+0x24>
	mov    0x80(%r15),%eax
	test   %eax,%eax
	jne    108cd <gz_skip+0x6d>
	mov    %r12,%rbx
	mov    %r13,%r12
	mov    %r14,%r13
	xor    %eax,%eax
	mov    -0x10(%rbp),%r15
	mov    -0x8(%rbp),%r14
	leaveq 
	retq   
	xchg   %ax,%ax

0010920 <gz_read>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x50,%rsp
	xor    %eax,%eax
	test   %rdx,%rdx
	jne    10931 <gz_read+0x11>
	leaveq 
	retq   
	lea    -0x44(%rbp),%rcx
	mov    $0xfffffffe,%r9d
	movslq 0x68(%rdi),%r8
	test   %r8d,%r8d
	jne    10969 <gz_read+0x49>
	mov    %rbx,-0x8(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %r15,-0x28(%rbp)
	mov    %rdx,%rbx
	mov    %rax,%r12
	mov    %rsi,%r13
	mov    %r9,%r14
	mov    %rdi,%r15
	jmp    109ca <gz_read+0xaa>
	movl   $0x0,0x68(%rdi)
	mov    0x60(%rdi),%rcx
	mov    %rdi,%rax
	mov    %rdx,-0x38(%rbp)
	mov    %rsi,-0x30(%rbp)
	mov    %rdi,-0x40(%rbp)
	mov    %rcx,%rsi
	mov    %rax,%rdi
	callq  10860 <gz_skip>
	cmp    $0xffffffff,%eax
	je     10a21 <gz_read+0x101>
	mov    %rbx,-0x8(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %r15,-0x28(%rbp)
	lea    -0x44(%rbp),%rcx
	mov    $0xfffffffe,%r14d
	xor    %r12d,%r12d
	mov    -0x40(%rbp),%r15
	mov    -0x30(%rbp),%r13
	mov    -0x38(%rbp),%rbx
	jmp    109ca <gz_read+0xaa>
	lea    -0x44(%rbp),%rcx
	movl   $0xffffffff,-0x44(%rbp)
	cmp    %r14,%rbx
	ja     109dd <gz_read+0xbd>
	movl   $0x0,-0x44(%rbp)
	mov    (%r15),%eax
	test   %eax,%eax
	jne    10a25 <gz_read+0x105>
	movslq 0x50(%r15),%rax
	test   %eax,%eax
	jne    10a8b <gz_read+0x16b>
	movslq 0x44(%r15),%rsi
	test   %esi,%esi
	jne    10abb <gz_read+0x19b>
	mov    %r15,%rdi
	callq  10760 <gz_fetch>
	cmp    $0xffffffff,%eax
	jne    10a69 <gz_read+0x149>
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	xor    %eax,%eax
	leaveq 
	retq   
	xor    %eax,%eax
	leaveq 
	retq   
	cmp    -0x44(%rbp),%eax
	jae    10a2d <gz_read+0x10d>
	mov    %eax,-0x44(%rbp)
	mov    0x8(%r15),%rsi
	mov    -0x44(%rbp),%edx
	mov    %r13,%rdi
	callq  21f0 <memcpy@plt>
	mov    -0x44(%rbp),%ecx
	mov    %rcx,%rax
	add    0x8(%r15),%rax
	mov    %rax,0x8(%r15)
	mov    (%r15),%eax
	sub    %ecx,%eax
	mov    %eax,(%r15)
	mov    -0x44(%rbp),%ecx
	sub    %rcx,%rbx
	mov    %rcx,%rax
	add    0x10(%r15),%rax
	mov    %rax,0x10(%r15)
	add    %rcx,%r12
	add    %rcx,%r13
	test   %rbx,%rbx
	jne    109c6 <gz_read+0xa6>
	mov    %r12,%rax
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	leaveq 
	retq   
	mov    0x80(%r15),%eax
	test   %eax,%eax
	jne    109f0 <gz_read+0xd0>
	movl   $0x1,0x54(%r15)
	mov    %r12,%rax
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	leaveq 
	retq   
	mov    -0x44(%rbp),%edx
	mov    0x28(%r15),%eax
	add    %eax,%eax
	cmp    %eax,%edx
	jb     109fc <gz_read+0xdc>
	cmp    $0x1,%esi
	je     10afe <gz_read+0x1de>
	mov    %edx,0x98(%r15)
	mov    %r13,0x90(%r15)
	mov    %r15,%rdi
	callq  105a0 <gz_decomp>
	cmp    $0xffffffff,%eax
	je     10b2a <gz_read+0x20a>
	mov    (%r15),%eax
	mov    %eax,-0x44(%rbp)
	movl   $0x0,(%r15)
	jmpq   10a52 <gz_read+0x132>
	mov    %r15,%rdi
	mov    %r13,%rsi
	callq  10180 <gz_load>
	cmp    $0xffffffff,%eax
	jne    10a52 <gz_read+0x132>
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	xor    %eax,%eax
	leaveq 
	retq   
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	xor    %eax,%eax
	leaveq 
	retq   
	nopw   %cs:0x0(%rax,%rax,1)
	nopl   0x0(%rax)

0010b50 <gzsetparams>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    $0xfffffffffffffffe,%rax
	test   %rdi,%rdi
	jne    10b66 <gzsetparams+0x16>
	leaveq 
	retq   
	movslq 0x18(%rdi),%rcx
	cmp    $0x79b1,%ecx
	je     10b74 <gzsetparams+0x24>
	leaveq 
	retq   
	movslq 0x6c(%rdi),%rcx
	test   %ecx,%ecx
	je     10b7e <gzsetparams+0x2e>
	leaveq 
	retq   
	xor    %eax,%eax
	movslq 0x58(%rdi),%rcx
	cmp    %esi,%ecx
	je     10b9f <gzsetparams+0x4f>
	movslq 0x68(%rdi),%rcx
	test   %ecx,%ecx
	jne    10ba9 <gzsetparams+0x59>
	mov    0x28(%rdi),%ecx
	test   %ecx,%ecx
	jne    10be9 <gzsetparams+0x99>
	mov    %esi,0x58(%rdi)
	mov    %edx,0x5c(%rdi)
	leaveq 
	retq   
	movslq 0x5c(%rdi),%rcx
	cmp    %edx,%ecx
	jne    10b88 <gzsetparams+0x38>
	leaveq 
	retq   
	movl   $0x0,0x68(%rdi)
	mov    0x60(%rdi),%rax
	mov    %rdi,%rcx
	mov    %r15,-0x20(%rbp)
	mov    %rsi,-0x8(%rbp)
	mov    %rdx,-0x18(%rbp)
	mov    %rax,%rsi
	mov    %rdi,%r15
	mov    %rcx,%rdi
	callq  11760 <gz_zero>
	cmp    $0xffffffff,%eax
	je     10c3c <gzsetparams+0xec>
	mov    %r15,%rdi
	xor    %eax,%eax
	mov    -0x18(%rbp),%rdx
	mov    -0x8(%rbp),%rsi
	mov    -0x20(%rbp),%r15
	jmp    10b90 <gzsetparams+0x40>
	mov    0x80(%rdi),%eax
	test   %eax,%eax
	jne    10c46 <gzsetparams+0xf6>
	lea    0x78(%rdi),%rcx
	mov    %rsi,%r8
	mov    %rdx,%rax
	mov    %r15,-0x20(%rbp)
	mov    %r13,-0x10(%rbp)
	mov    %r14,-0x18(%rbp)
	mov    %rdi,%r13
	mov    %rcx,%rdi
	mov    %rsi,%r14
	mov    %r8,%rsi
	mov    %rdx,%r15
	mov    %rax,%rdx
	callq  21d0 <deflateParams@plt>
	mov    %r15,%rdx
	mov    %r14,%rsi
	mov    %r13,%rdi
	mov    -0x18(%rbp),%r14
	mov    -0x10(%rbp),%r13
	xor    %eax,%eax
	mov    -0x20(%rbp),%r15
	jmpq   10b97 <gzsetparams+0x47>
	movslq 0x6c(%r15),%rax
	mov    -0x20(%rbp),%r15
	leaveq 
	retq   
	mov    $0x5,%eax
	mov    %rdi,%rcx
	mov    %r15,-0x20(%rbp)
	mov    %rsi,-0x8(%rbp)
	mov    %rdx,-0x10(%rbp)
	mov    %rax,%rsi
	mov    %rdi,%r15
	mov    %rcx,%rdi
	callq  114a0 <gz_comp>
	cmp    $0xffffffff,%eax
	je     10c81 <gzsetparams+0x131>
	mov    %r15,%rdi
	mov    -0x10(%rbp),%rdx
	mov    -0x8(%rbp),%rsi
	mov    -0x20(%rbp),%r15
	jmpq   10bf3 <gzsetparams+0xa3>
	movslq 0x6c(%r15),%rax
	mov    -0x20(%rbp),%r15
	leaveq 
	retq   
	nopl   0x0(%rax,%rax,1)

0010c90 <gzwrite>:
	push   %rbp
	mov    %rsp,%rbp
	xor    %eax,%eax
	test   %rdi,%rdi
	jne    10c9d <gzwrite+0xd>
	leaveq 
	retq   
	movslq 0x18(%rdi),%rcx
	cmp    $0x79b1,%ecx
	je     10cab <gzwrite+0x1b>
	leaveq 
	retq   
	movslq 0x6c(%rdi),%rcx
	test   %ecx,%ecx
	je     10cb5 <gzwrite+0x25>
	leaveq 
	retq   
	test   %edx,%edx
	js     10cc2 <gzwrite+0x32>
	mov    %edx,%edx
	callq  11890 <gz_write>
	leaveq 
	retq   
	mov    $0xfffffffffffffffd,%rsi
	lea    0x56e4(%rip),%rdx        # 163b4 <base_dist+0x328>
	callq  20a0 <gz_error@plt>
	xor    %eax,%eax
	leaveq 
	retq   
	nopl   0x0(%rax)

0010ce0 <gzfwrite>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	xor    %eax,%eax
	test   %rcx,%rcx
	jne    10cf1 <gzfwrite+0x11>
	leaveq 
	retq   
	movslq 0x18(%rcx),%r8
	cmp    $0x79b1,%r8d
	je     10d00 <gzfwrite+0x20>
	leaveq 
	retq   
	movslq 0x6c(%rcx),%r8
	test   %r8d,%r8d
	je     10d0b <gzfwrite+0x2b>
	leaveq 
	retq   
	mov    %rsi,%r8
	imul   %rdx,%r8
	test   %rsi,%rsi
	jne    10d1e <gzfwrite+0x3e>
	test   %r8,%r8
	jne    10d36 <gzfwrite+0x56>
	leaveq 
	retq   
	mov    %rax,%r9
	mov    %rdx,%r10
	xor    %edx,%edx
	mov    %r8,%rax
	div    %rsi
	cmp    %r10,%rax
	jne    10d56 <gzfwrite+0x76>
	mov    %r9,%rax
	jmp    10d17 <gzfwrite+0x37>
	mov    %r15,-0x8(%rbp)
	mov    %r8,%rdx
	mov    %rsi,%r15
	mov    %rdi,%rsi
	mov    %rcx,%rdi
	callq  11890 <gz_write>
	xor    %edx,%edx
	div    %r15
	mov    -0x8(%rbp),%r15
	leaveq 
	retq   
	mov    %rcx,%rdi
	mov    $0xfffffffffffffffe,%rsi
	lea    0x5672(%rip),%rdx        # 163d9 <base_dist+0x34d>
	callq  20a0 <gz_error@plt>
	xor    %eax,%eax
	leaveq 
	retq   

0010d70 <gzprintf>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0xd0,%rsp
	mov    %rdx,-0xa0(%rbp)
	mov    %rcx,-0x98(%rbp)
	mov    %r8,-0x90(%rbp)
	mov    %r9,-0x88(%rbp)
	movsd  %xmm0,-0x80(%rbp)
	movsd  %xmm1,-0x70(%rbp)
	movsd  %xmm2,-0x60(%rbp)
	movsd  %xmm3,-0x50(%rbp)
	movsd  %xmm4,-0x40(%rbp)
	movsd  %xmm5,-0x30(%rbp)
	movsd  %xmm6,-0x20(%rbp)
	movsd  %xmm7,-0x10(%rbp)
	lea    -0xc8(%rbp),%rdx
	movl   $0x10,(%rdx)
	movl   $0x30,0x4(%rdx)
	lea    -0xb0(%rbp),%rax
	mov    %rax,0x10(%rdx)
	lea    0x10(%rbp),%rax
	mov    %rax,0x8(%rdx)
	callq  2040 <gzvprintf@plt>
	leaveq 
	retq   
	nopl   (%rax)

0010df0 <gzputs>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    $0xffffffffffffffff,%rax
	test   %rdi,%rdi
	jne    10e06 <gzputs+0x16>
	leaveq 
	retq   
	movslq 0x18(%rdi),%rcx
	cmp    $0x79b1,%ecx
	je     10e14 <gzputs+0x24>
	leaveq 
	retq   
	movslq 0x6c(%rdi),%rcx
	test   %ecx,%ecx
	je     10e1e <gzputs+0x2e>
	leaveq 
	retq   
	mov    %rsi,%rax
	mov    %r14,-0x8(%rbp)
	mov    %r15,-0x10(%rbp)
	mov    %rdi,%r14
	mov    %rax,%rdi
	mov    %rsi,%r15
	callq  2110 <strlen@plt>
	mov    %r15,%rsi
	mov    %r14,%rdi
	mov    %rax,%r14
	mov    %r14,%rdx
	callq  11890 <gz_write>
	test   %rax,%rax
	je     10e57 <gzputs+0x67>
	mov    -0x10(%rbp),%r15
	mov    -0x8(%rbp),%r14
	leaveq 
	retq   
	test   %r14,%r14
	je     10e6d <gzputs+0x7d>
	mov    $0xffffffffffffffff,%rax
	mov    -0x10(%rbp),%r15
	mov    -0x8(%rbp),%r14
	leaveq 
	retq   
	xor    %eax,%eax
	mov    -0x10(%rbp),%r15
	mov    -0x8(%rbp),%r14
	leaveq 
	retq   
	nopl   0x0(%rax)

0010e80 <gzputc>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    $0xffffffffffffffff,%rax
	test   %rdi,%rdi
	jne    10e96 <gzputc+0x16>
	leaveq 
	retq   
	movslq 0x18(%rdi),%rcx
	cmp    $0x79b1,%ecx
	je     10ea4 <gzputc+0x24>
	leaveq 
	retq   
	movslq 0x6c(%rdi),%rcx
	test   %ecx,%ecx
	je     10eae <gzputc+0x2e>
	leaveq 
	retq   
	movslq 0x68(%rdi),%rax
	test   %eax,%eax
	jne    10ee9 <gzputc+0x69>
	mov    0x28(%rdi),%eax
	test   %eax,%eax
	jne    10f19 <gzputc+0x99>
	mov    %sil,-0x11(%rbp)
	lea    -0x11(%rbp),%rax
	mov    $0x1,%edx
	mov    %rsi,-0x10(%rbp)
	mov    %rax,%rsi
	callq  11890 <gz_write>
	cmp    $0x1,%rax
	je     10f6e <gzputc+0xee>
	mov    $0xffffffffffffffff,%rax
	leaveq 
	retq   
	movl   $0x0,0x68(%rdi)
	mov    0x60(%rdi),%rcx
	mov    %rdi,%rax
	mov    %rdi,-0x10(%rbp)
	mov    %rsi,-0x8(%rbp)
	mov    %rcx,%rsi
	mov    %rax,%rdi
	callq  11760 <gz_zero>
	cmp    $0xffffffff,%eax
	je     10f77 <gzputc+0xf7>
	mov    -0x8(%rbp),%rsi
	mov    -0x10(%rbp),%rdi
	jmp    10eb6 <gzputc+0x36>
	mov    0x80(%rdi),%eax
	test   %eax,%eax
	jne    10f2b <gzputc+0xab>
	mov    0x30(%rdi),%rax
	mov    %rax,0x78(%rdi)
	mov    0x80(%rdi),%eax
	add    0x78(%rdi),%rax
	mov    0x30(%rdi),%rdx
	sub    %rdx,%rax
	mov    0x28(%rdi),%ecx
	cmp    %eax,%ecx
	jbe    10ebd <gzputc+0x3d>
	mov    %eax,%eax
	mov    %sil,(%rdx,%rax,1)
	mov    0x80(%rdi),%eax
	add    $0x1,%eax
	mov    %eax,0x80(%rdi)
	mov    0x10(%rdi),%rax
	add    $0x1,%rax
	mov    %rax,0x10(%rdi)
	movzbl %sil,%eax
	leaveq 
	retq   
	mov    -0x10(%rbp),%rax
	movzbl %al,%eax
	leaveq 
	retq   
	mov    $0xffffffffffffffff,%rax
	leaveq 
	retq   

0010f80 <gzflush>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    $0xfffffffffffffffe,%rax
	test   %rdi,%rdi
	jne    10f96 <gzflush+0x16>
	leaveq 
	retq   
	movslq 0x18(%rdi),%rcx
	cmp    $0x79b1,%ecx
	je     10fa4 <gzflush+0x24>
	leaveq 
	retq   
	movslq 0x6c(%rdi),%rcx
	test   %ecx,%ecx
	je     10fae <gzflush+0x2e>
	leaveq 
	retq   
	test   %esi,%esi
	jns    10fb4 <gzflush+0x34>
	leaveq 
	retq   
	cmp    $0x4,%esi
	jle    10fbb <gzflush+0x3b>
	leaveq 
	retq   
	movslq 0x68(%rdi),%rax
	test   %eax,%eax
	jne    10fdf <gzflush+0x5f>
	mov    %rdi,%rax
	mov    %r15,-0x10(%rbp)
	mov    %rdi,%r15
	mov    %rax,%rdi
	callq  114a0 <gz_comp>
	movslq 0x6c(%r15),%rax
	mov    -0x10(%rbp),%r15
	leaveq 
	retq   
	movl   $0x0,0x68(%rdi)
	mov    0x60(%rdi),%rax
	mov    %rdi,%rcx
	mov    %r15,-0x10(%rbp)
	mov    %rsi,-0x8(%rbp)
	mov    %rax,%rsi
	mov    %rdi,%r15
	mov    %rcx,%rdi
	callq  11760 <gz_zero>
	cmp    $0xffffffff,%eax
	je     11015 <gzflush+0x95>
	mov    %r15,%rdi
	mov    -0x8(%rbp),%rsi
	mov    -0x10(%rbp),%r15
	jmp    10fc3 <gzflush+0x43>
	movslq 0x6c(%r15),%rax
	mov    -0x10(%rbp),%r15
	leaveq 
	retq   
	nop

0011020 <gzclose_w>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    $0xfffffffffffffffe,%rax
	test   %rdi,%rdi
	jne    11036 <gzclose_w+0x16>
	leaveq 
	retq   
	movslq 0x18(%rdi),%rcx
	cmp    $0x79b1,%ecx
	je     11044 <gzclose_w+0x24>
	leaveq 
	retq   
	xor    %eax,%eax
	movslq 0x68(%rdi),%rcx
	test   %ecx,%ecx
	jne    110ea <gzclose_w+0xca>
	mov    %r14,%rcx
	mov    %rdi,%r14
	mov    %r15,%rdi
	mov    %rax,%r15
	mov    %rdi,%rax
	mov    $0x4,%esi
	mov    %r14,%rdi
	mov    %rax,-0x10(%rbp)
	mov    %rcx,-0x8(%rbp)
	callq  114a0 <gz_comp>
	cmp    $0xffffffff,%eax
	jne    1107f <gzclose_w+0x5f>
	movslq 0x6c(%r14),%r15
	mov    0x28(%r14),%eax
	test   %eax,%eax
	je     110aa <gzclose_w+0x8a>
	movslq 0x40(%r14),%rax
	test   %eax,%eax
	jne    110a1 <gzclose_w+0x81>
	lea    0x78(%r14),%rdi
	callq  2260 <deflateEnd@plt>
	mov    0x38(%r14),%rdi
	callq  2060 <free@plt>
	mov    0x30(%r14),%rdi
	callq  2060 <free@plt>
	xor    %esi,%esi
	mov    %rsi,%rdx
	mov    %r14,%rdi
	callq  20a0 <gz_error@plt>
	mov    0x20(%r14),%rdi
	callq  2060 <free@plt>
	movslq 0x1c(%r14),%rdi
	callq  2180 <close@plt>
	cmp    $0xffffffff,%eax
	jne    110d5 <gzclose_w+0xb5>
	mov    $0xffffffffffffffff,%r15
	mov    %r14,%rdi
	callq  2060 <free@plt>
	mov    %r15,%rax
	mov    -0x8(%rbp),%r14
	mov    -0x10(%rbp),%r15
	leaveq 
	retq   
	movl   $0x0,0x68(%rdi)
	mov    0x60(%rdi),%rsi
	mov    %rdi,%rax
	mov    %r15,-0x10(%rbp)
	mov    %r14,%r15
	mov    %rdi,%r14
	mov    %rax,%rdi
	callq  11760 <gz_zero>
	cmp    $0xffffffff,%eax
	je     1111e <gzclose_w+0xfe>
	mov    %r15,%rcx
	xor    %r15d,%r15d
	mov    -0x10(%rbp),%rax
	jmpq   11061 <gzclose_w+0x41>
	movslq 0x6c(%r14),%rcx
	mov    %r15,%rax
	mov    %rcx,%r15
	mov    %rax,%rcx
	mov    -0x10(%rbp),%rax
	jmpq   11061 <gzclose_w+0x41>
	data16 nopw %cs:0x0(%rax,%rax,1)
	nop

0011140 <gzvprintf>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x40,%rsp
	mov    $0xfffffffffffffffe,%rax
	test   %rdi,%rdi
	jne    11156 <gzvprintf+0x16>
	leaveq 
	retq   
	movslq 0x18(%rdi),%rcx
	cmp    $0x79b1,%ecx
	je     11164 <gzvprintf+0x24>
	leaveq 
	retq   
	movslq 0x6c(%rdi),%rcx
	test   %ecx,%ecx
	je     1116e <gzvprintf+0x2e>
	leaveq 
	retq   
	mov    0x28(%rdi),%eax
	test   %eax,%eax
	je     111c6 <gzvprintf+0x86>
	mov    %rdx,%rcx
	mov    %rsi,%rdx
	movslq 0x68(%rdi),%rax
	test   %eax,%eax
	jne    111f6 <gzvprintf+0xb6>
	mov    0x80(%rdi),%eax
	test   %eax,%eax
	jne    11195 <gzvprintf+0x55>
	mov    0x30(%rdi),%rax
	mov    %rax,0x78(%rdi)
	mov    0x80(%rdi),%eax
	add    0x78(%rdi),%rax
	mov    %rax,-0x28(%rbp)
	mov    0x28(%rdi),%esi
	add    $0xffffffff,%esi
	mov    %esi,%esi
	movb   $0x0,(%rsi,%rax,1)
	mov    0x28(%rdi),%esi
	mov    %rdi,-0x38(%rbp)
	mov    %rax,%rdi
	callq  20c0 <vsnprintf@plt>
	test   %eax,%eax
	jne    11234 <gzvprintf+0xf4>
	xor    %eax,%eax
	leaveq 
	retq   
	mov    %rdi,%rax
	mov    %r15,-0x28(%rbp)
	mov    %rsi,-0x30(%rbp)
	mov    %rdx,-0x38(%rbp)
	mov    %rdi,%r15
	mov    %rax,%rdi
	callq  11310 <gz_init>
	cmp    $0xffffffff,%eax
	je     11244 <gzvprintf+0x104>
	mov    %r15,%rdi
	mov    -0x38(%rbp),%rcx
	mov    -0x30(%rbp),%rdx
	mov    -0x28(%rbp),%r15
	jmp    1117b <gzvprintf+0x3b>
	movl   $0x0,0x68(%rdi)
	mov    0x60(%rdi),%rsi
	mov    %rdi,%rax
	mov    %r15,-0x20(%rbp)
	mov    %rdx,-0x30(%rbp)
	mov    %rcx,-0x38(%rbp)
	mov    %rdi,%r15
	mov    %rax,%rdi
	callq  11760 <gz_zero>
	cmp    $0xffffffff,%eax
	je     1124e <gzvprintf+0x10e>
	mov    %r15,%rdi
	mov    -0x38(%rbp),%rcx
	mov    -0x30(%rbp),%rdx
	mov    -0x20(%rbp),%r15
	jmpq   11183 <gzvprintf+0x43>
	mov    -0x38(%rbp),%r8
	mov    0x28(%r8),%esi
	cmp    %eax,%esi
	ja     11258 <gzvprintf+0x118>
	xor    %eax,%eax
	leaveq 
	retq   
	movslq 0x6c(%r15),%rax
	mov    -0x28(%rbp),%r15
	leaveq 
	retq   
	movslq 0x6c(%r15),%rax
	mov    -0x20(%rbp),%r15
	leaveq 
	retq   
	lea    -0x1(%rsi),%ecx
	mov    %ecx,%ecx
	mov    -0x28(%rbp),%rdx
	movsbq (%rdx,%rcx,1),%rcx
	test   %cl,%cl
	je     1126e <gzvprintf+0x12e>
	xor    %eax,%eax
	leaveq 
	retq   
	mov    %rax,%rdx
	add    0x80(%r8),%edx
	mov    %edx,0x80(%r8)
	movslq %eax,%rcx
	add    0x10(%r8),%rcx
	mov    %rcx,0x10(%r8)
	cmp    %edx,%esi
	jbe    11290 <gzvprintf+0x150>
	leaveq 
	retq   
	mov    %esi,0x80(%r8)
	mov    %r8,%rdi
	mov    %r15,-0x38(%rbp)
	mov    %rsi,-0x10(%rbp)
	mov    %rdx,-0x8(%rbp)
	mov    %rax,-0x18(%rbp)
	mov    %r8,%r15
	xor    %esi,%esi
	callq  114a0 <gz_comp>
	cmp    $0xffffffff,%eax
	je     112fa <gzvprintf+0x1ba>
	mov    0x30(%r15),%rdi
	mov    0x28(%r15),%eax
	lea    (%rax,%rdi,1),%rsi
	mov    -0x8(%rbp),%rax
	mov    -0x10(%rbp),%rcx
	sub    %ecx,%eax
	mov    %eax,%edx
	mov    %r14,-0x20(%rbp)
	mov    %rax,%r14
	callq  21f0 <memcpy@plt>
	mov    0x30(%r15),%rax
	mov    %rax,0x78(%r15)
	mov    %r14d,0x80(%r15)
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%rax
	mov    -0x38(%rbp),%r15
	leaveq 
	retq   
	movslq 0x6c(%r15),%rax
	mov    -0x38(%rbp),%r15
	leaveq 
	retq   
	data16 nopw %cs:0x0(%rax,%rax,1)
	nop

0011310 <gz_init>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %r15,-0x10(%rbp)
	mov    0x2c(%rdi),%eax
	add    %eax,%eax
	mov    %eax,%eax
	mov    %rdi,%r15
	mov    %rax,%rdi
	callq  2240 <malloc@plt>
	mov    %rax,0x30(%r15)
	mov    $0xfffffffffffffffc,%rsi
	lea    0x50ba(%rip),%rdx        # 163fa <base_dist+0x36e>
	mov    $0xffffffffffffffff,%rcx
	test   %rax,%rax
	je     11370 <gz_init+0x60>
	movslq 0x40(%r15),%rax
	test   %eax,%eax
	je     11384 <gz_init+0x74>
	mov    0x2c(%r15),%edx
	mov    %edx,0x28(%r15)
	xor    %eax,%eax
	movslq 0x40(%r15),%rcx
	test   %ecx,%ecx
	je     11412 <gz_init+0x102>
	mov    -0x10(%rbp),%r15
	leaveq 
	retq   
	mov    %r15,%rdi
	mov    %rcx,%r15
	callq  20a0 <gz_error@plt>
	mov    %r15,%rax
	mov    -0x10(%rbp),%r15
	leaveq 
	retq   
	mov    0x2c(%r15),%edi
	callq  2240 <malloc@plt>
	mov    %rax,0x38(%r15)
	test   %rax,%rax
	je     1142e <gz_init+0x11e>
	movq   $0x0,0xb8(%r15)
	movq   $0x0,0xc0(%r15)
	movq   $0x0,0xc8(%r15)
	sub    $0x10,%rsp
	lea    0x5042(%rip),%rax        # 16408 <base_dist+0x37c>
	lea    0x78(%r15),%r10
	movslq 0x58(%r15),%rsi
	mov    $0x8,%edx
	mov    $0x1f,%ecx
	movslq 0x5c(%r15),%r9
	mov    %rax,(%rsp)
	movl   $0x70,0x8(%rsp)
	mov    %rdx,%r8
	mov    %r10,%rdi
	mov    %r14,-0x8(%rbp)
	mov    %r10,%r14
	callq  21a0 <deflateInit2_@plt>
	add    $0x10,%rsp
	test   %eax,%eax
	jne    1145a <gz_init+0x14a>
	movq   $0x0,(%r14)
	mov    -0x8(%rbp),%r14
	jmpq   11354 <gz_init+0x44>
	mov    %edx,0x98(%r15)
	mov    0x38(%r15),%rcx
	mov    %rcx,0x90(%r15)
	mov    %rcx,0x8(%r15)
	mov    -0x10(%rbp),%r15
	leaveq 
	retq   
	mov    0x30(%r15),%rdi
	callq  2060 <free@plt>
	mov    %r15,%rdi
	lea    0x4fb9(%rip),%rdx        # 163fa <base_dist+0x36e>
	mov    $0xfffffffffffffffc,%rsi
	callq  20a0 <gz_error@plt>
	mov    $0xffffffffffffffff,%rax
	mov    -0x10(%rbp),%r15
	leaveq 
	retq   
	mov    0x38(%r15),%rdi
	callq  2060 <free@plt>
	mov    0x30(%r15),%rdi
	callq  2060 <free@plt>
	mov    %r15,%rdi
	lea    0x4f84(%rip),%rdx        # 163fa <base_dist+0x36e>
	mov    $0xfffffffffffffffc,%rsi
	callq  20a0 <gz_error@plt>
	mov    -0x8(%rbp),%r14
	mov    $0xffffffffffffffff,%rax
	mov    -0x10(%rbp),%r15
	leaveq 
	retq   
	data16 nopw %cs:0x0(%rax,%rax,1)
	xchg   %ax,%ax

00114a0 <gz_comp>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    $0xffffffffffffffff,%rcx
	mov    0x28(%rdi),%eax
	test   %eax,%eax
	je     114f5 <gz_comp+0x55>
	mov    %r14,%rdx
	mov    %rsi,%r14
	mov    %r13,%r8
	mov    %r15,%r9
	mov    %rbx,%r15
	mov    %rdi,%rbx
	mov    %r12,%rdi
	xor    %eax,%eax
	lea    0x78(%rbx),%r12
	mov    $0x40000000,%r13d
	movslq 0x40(%rbx),%rsi
	test   %esi,%esi
	jne    11533 <gz_comp+0x93>
	mov    %r15,-0x8(%rbp)
	mov    %rdi,-0x10(%rbp)
	mov    %r8,-0x18(%rbp)
	mov    %rdx,-0x20(%rbp)
	mov    %r9,-0x28(%rbp)
	jmp    1155a <gz_comp+0xba>
	mov    %rdi,%rax
	mov    %rdi,-0x20(%rbp)
	mov    %rsi,-0x28(%rbp)
	mov    %rax,%rdi
	mov    %r15,%rax
	mov    %rbx,%r15
	mov    %rax,%rbx
	callq  11310 <gz_init>
	cmp    $0xffffffff,%eax
	je     11589 <gz_comp+0xe9>
	mov    %r14,%rdx
	mov    %r12,%rdi
	mov    %r13,%r8
	mov    %rbx,%r9
	mov    $0xffffffffffffffff,%rcx
	mov    -0x28(%rbp),%r14
	mov    -0x20(%rbp),%rbx
	jmp    114cb <gz_comp+0x2b>
	mov    %rdi,-0x8(%rbp)
	mov    %r8,-0x10(%rbp)
	mov    %rdx,-0x18(%rbp)
	mov    %r9,-0x28(%rbp)
	mov    %rcx,%r14
	jmpq   115d6 <gz_comp+0x136>
	mov    0x98(%rbx),%ecx
	cmp    %r15d,%ecx
	je     115f7 <gz_comp+0x157>
	mov    0x98(%rbx),%ecx
	test   %ecx,%ecx
	je     11646 <gz_comp+0x1a6>
	test   %r14d,%r14d
	je     11678 <gz_comp+0x1d8>
	cmp    $0x4,%r14d
	jne    11646 <gz_comp+0x1a6>
	cmp    $0x1,%eax
	je     11646 <gz_comp+0x1a6>
	jmpq   11678 <gz_comp+0x1d8>
	mov    %r15,%rcx
	mov    %rbx,%r15
	mov    %rcx,%rbx
	mov    $0xffffffffffffffff,%rax
	leaveq 
	retq   
	cmp    $0x40000000,%eax
	jbe    115a5 <gz_comp+0x105>
	mov    %r13,%rax
	movslq 0x1c(%rbx),%rdi
	mov    0x78(%rbx),%rsi
	mov    %eax,%edx
	callq  20e0 <write@plt>
	test   %rax,%rax
	js     116c6 <gz_comp+0x226>
	mov    0x80(%rbx),%ecx
	sub    %eax,%ecx
	mov    %ecx,0x80(%rbx)
	movslq %eax,%rax
	add    (%r12),%rax
	mov    %rax,(%r12)
	mov    0x80(%rbx),%eax
	test   %eax,%eax
	jne    1159b <gz_comp+0xfb>
	mov    %r15,%rbx
	xor    %eax,%eax
	mov    -0x28(%rbp),%r15
	mov    -0x18(%rbp),%r14
	mov    -0x10(%rbp),%r13
	mov    -0x8(%rbp),%r12
	leaveq 
	retq   
	cmp    $0x4,%r14d
	je     116f9 <gz_comp+0x259>
	xor    %eax,%eax
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	leaveq 
	retq   
	sub    %rsi,%rax
	cmp    $0x40000000,%rax
	jle    11627 <gz_comp+0x187>
	mov    %r13,%rax
	movslq 0x1c(%rbx),%rdi
	mov    %eax,%edx
	callq  20e0 <write@plt>
	test   %rax,%rax
	js     11719 <gz_comp+0x279>
	movslq %eax,%rax
	add    0x8(%rbx),%rax
	mov    %rax,0x8(%rbx)
	mov    0x8(%rbx),%rsi
	mov    0x90(%rbx),%rax
	cmp    %rax,%rsi
	jb     11619 <gz_comp+0x179>
	mov    0x98(%rbx),%eax
	test   %eax,%eax
	jne    11678 <gz_comp+0x1d8>
	mov    0x28(%rbx),%eax
	mov    %eax,0x98(%rbx)
	mov    0x38(%rbx),%rax
	mov    %rax,0x90(%rbx)
	mov    %rax,0x8(%rbx)
	mov    0x98(%rbx),%r15d
	mov    %r12,%rdi
	mov    %r14,%rsi
	callq  2150 <deflate@plt>
	cmp    $0xfffffffe,%eax
	jne    1154b <gz_comp+0xab>
	mov    %rbx,%rdi
	mov    $0xfffffffffffffffe,%rsi
	lea    0x4d6b(%rip),%rdx        # 1640f <base_dist+0x383>
	callq  20a0 <gz_error@plt>
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	mov    $0xffffffffffffffff,%rax
	leaveq 
	retq   
	callq  2070 <__errno_location@plt>
	movslq (%rax),%rdi
	callq  2330 <strerror@plt>
	mov    %rax,%rdx
	mov    %rbx,%rdi
	mov    %r14,%rsi
	callq  20a0 <gz_error@plt>
	mov    %r14,%rax
	mov    %r15,%rbx
	mov    -0x28(%rbp),%r15
	mov    -0x18(%rbp),%r14
	mov    -0x10(%rbp),%r13
	mov    -0x8(%rbp),%r12
	leaveq 
	retq   
	mov    %r12,%rdi
	callq  2140 <deflateReset@plt>
	xor    %eax,%eax
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	leaveq 
	retq   
	callq  2070 <__errno_location@plt>
	movslq (%rax),%rdi
	callq  2330 <strerror@plt>
	mov    %rax,%rdx
	mov    %rbx,%rdi
	mov    $0xffffffffffffffff,%r12
	mov    %r12,%rsi
	callq  20a0 <gz_error@plt>
	mov    %r12,%rax
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	leaveq 
	retq   
	data16 nopw %cs:0x0(%rax,%rax,1)
	nop

0011760 <gz_zero>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	xor    %eax,%eax
	mov    $0x1,%ecx
	mov    0x80(%rdi),%edx
	test   %edx,%edx
	jne    1179a <gz_zero+0x3a>
	mov    %r12,-0x8(%rbp)
	mov    %r13,-0x10(%rbp)
	mov    %r14,-0x18(%rbp)
	mov    %r15,-0x20(%rbp)
	mov    %rax,%r12
	mov    %rbx,%r13
	mov    %rsi,%rbx
	mov    %rdi,%r14
	jmpq   11836 <gz_zero+0xd6>
	mov    %rdi,%rcx
	mov    %rsi,-0x28(%rbp)
	mov    %rdi,-0x30(%rbp)
	mov    %rax,%rsi
	mov    %rcx,%rdi
	mov    %r13,%rax
	mov    %rbx,%r13
	mov    %rax,%rbx
	callq  114a0 <gz_comp>
	cmp    $0xffffffff,%eax
	je     11853 <gz_zero+0xf3>
	mov    %r12,-0x8(%rbp)
	mov    %rbx,-0x10(%rbp)
	mov    %r14,-0x18(%rbp)
	mov    %r15,-0x20(%rbp)
	xor    %r12d,%r12d
	mov    $0x1,%ecx
	mov    -0x30(%rbp),%r14
	mov    -0x28(%rbp),%rbx
	jmp    11836 <gz_zero+0xd6>
	mov    0x28(%r14),%r15d
	cmp    %rbx,%r15
	jle    117f0 <gz_zero+0x90>
	mov    %rbx,%r15
	test   %ecx,%ecx
	jle    11803 <gz_zero+0xa3>
	mov    0x30(%r14),%rdi
	mov    %r15d,%edx
	mov    %r12,%rsi
	callq  2170 <memset@plt>
	mov    %r15d,0x80(%r14)
	mov    0x30(%r14),%rax
	mov    %rax,0x78(%r14)
	mov    %r15d,%r15d
	mov    %r15,%rax
	add    0x10(%r14),%rax
	mov    %rax,0x10(%r14)
	mov    %r14,%rdi
	mov    %r12,%rsi
	callq  114a0 <gz_comp>
	cmp    $0xffffffff,%eax
	je     11865 <gz_zero+0x105>
	sub    %r15,%rbx
	mov    %r12,%rcx
	test   %rbx,%rbx
	jne    117e4 <gz_zero+0x84>
	mov    %r12,%rax
	mov    %r13,%rbx
	mov    -0x20(%rbp),%r15
	mov    -0x18(%rbp),%r14
	mov    -0x10(%rbp),%r13
	mov    -0x8(%rbp),%r12
	leaveq 
	retq   
	mov    %r13,%rcx
	mov    %rbx,%r13
	mov    %rcx,%rbx
	mov    $0xffffffffffffffff,%rax
	leaveq 
	retq   
	mov    %r13,%rbx
	mov    -0x20(%rbp),%r15
	mov    -0x18(%rbp),%r14
	mov    -0x10(%rbp),%r13
	mov    -0x8(%rbp),%r12
	mov    $0xffffffffffffffff,%rax
	leaveq 
	retq   
	data16 nopw %cs:0x0(%rax,%rax,1)
	nopl   0x0(%rax)

0011890 <gz_write>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x60,%rsp
	xor    %eax,%eax
	mov    %rax,-0x40(%rbp)
	test   %rdx,%rdx
	jne    118a5 <gz_write+0x15>
	leaveq 
	retq   
	mov    0x28(%rdi),%ecx
	test   %ecx,%ecx
	je     11946 <gz_write+0xb6>
	mov    %r12,%rcx
	mov    %rdi,%r12
	mov    %rbx,%r8
	mov    %rdx,%rbx
	mov    %r13,%rdx
	mov    %rsi,%r13
	movslq 0x68(%r12),%rsi
	test   %esi,%esi
	je     11916 <gz_write+0x86>
	movl   $0x0,0x68(%r12)
	mov    0x60(%r12),%rsi
	mov    %r12,%rdi
	mov    %r12,-0x60(%rbp)
	mov    %rbx,-0x58(%rbp)
	mov    %r13,-0x48(%rbp)
	mov    %r8,%rbx
	mov    %rcx,%r12
	mov    %rdx,%r13
	callq  11760 <gz_zero>
	cmp    $0xffffffff,%eax
	je     11982 <gz_write+0xf2>
	mov    %r12,%rcx
	mov    %r13,%rdx
	mov    %rbx,%r8
	xor    %eax,%eax
	mov    -0x48(%rbp),%r13
	mov    -0x58(%rbp),%rbx
	mov    -0x60(%rbp),%r12
	mov    0x28(%r12),%esi
	cmp    %rsi,%rbx
	jae    11986 <gz_write+0xf6>
	mov    $0x1,%eax
	mov    %rbx,-0x8(%rbp)
	mov    %r8,-0x10(%rbp)
	mov    %rcx,-0x18(%rbp)
	mov    %rdx,-0x20(%rbp)
	mov    %r14,-0x28(%rbp)
	mov    %r15,-0x30(%rbp)
	mov    %rax,-0x38(%rbp)
	jmpq   11a08 <gz_write+0x178>
	mov    %rdi,%rax
	mov    %rdi,-0x60(%rbp)
	mov    %rdx,-0x58(%rbp)
	mov    %rsi,-0x50(%rbp)
	mov    %rax,%rdi
	callq  11310 <gz_init>
	cmp    $0xffffffff,%eax
	je     11aa9 <gz_write+0x219>
	mov    %r12,%rcx
	mov    %r13,%rdx
	mov    %rbx,%r8
	xor    %eax,%eax
	mov    -0x50(%rbp),%r13
	mov    -0x58(%rbp),%rbx
	mov    -0x60(%rbp),%r12
	jmpq   118c2 <gz_write+0x32>
	xor    %eax,%eax
	leaveq 
	retq   
	mov    0x80(%r12),%esi
	test   %esi,%esi
	je     119d2 <gz_write+0x142>
	mov    %r12,%rdi
	mov    %r12,-0x50(%rbp)
	mov    %rbx,-0x60(%rbp)
	mov    %r13,-0x48(%rbp)
	mov    %rax,%rsi
	mov    %r8,%rbx
	mov    %rcx,%r12
	mov    %rdx,%r13
	callq  114a0 <gz_comp>
	cmp    $0xffffffff,%eax
	je     11aad <gz_write+0x21d>
	mov    %r12,%rcx
	mov    %r13,%rdx
	mov    %rbx,%r8
	xor    %eax,%eax
	mov    -0x48(%rbp),%r13
	mov    -0x60(%rbp),%rbx
	mov    -0x50(%rbp),%r12
	mov    %r13,0x78(%r12)
	mov    $0xffffffff,%r13d
	mov    $0xfffffffe,%esi
	mov    %rbx,-0x20(%rbp)
	mov    %r8,-0x28(%rbp)
	mov    %rcx,-0x30(%rbp)
	mov    %rdx,-0x38(%rbp)
	mov    %r14,-0x40(%rbp)
	mov    %r15,-0x60(%rbp)
	mov    %rsi,%r14
	jmpq   11abe <gz_write+0x22e>
	sub    %r15,%rbx
	add    %r15,%r13
	mov    0x80(%r12),%eax
	test   %eax,%eax
	jne    11a1e <gz_write+0x18e>
	mov    0x30(%r12),%rax
	mov    %rax,0x78(%r12)
	mov    0x80(%r12),%eax
	add    0x78(%r12),%rax
	mov    0x30(%r12),%rdx
	sub    %rdx,%rax
	mov    0x28(%r12),%r14d
	sub    %eax,%r14d
	mov    %r14d,%ecx
	cmp    %rcx,%rbx
	jae    11a46 <gz_write+0x1b6>
	mov    %rbx,%r14
	mov    %eax,%eax
	lea    (%rdx,%rax,1),%rdi
	mov    %r14d,%r15d
	mov    %r13,%rsi
	mov    %r15,%rdx
	callq  21f0 <memcpy@plt>
	add    0x80(%r12),%r14d
	mov    %r14d,0x80(%r12)
	mov    %r15,%rax
	add    0x10(%r12),%rax
	mov    %rax,0x10(%r12)
	cmp    %rbx,%r15
	jne    11ac8 <gz_write+0x238>
	pushq  -0x40(%rbp)
	popq   -0x60(%rbp)
	mov    -0x60(%rbp),%rax
	test   %rax,%rax
	jne    11a02 <gz_write+0x172>
	mov    -0x30(%rbp),%r15
	mov    -0x28(%rbp),%r14
	mov    -0x20(%rbp),%r13
	mov    -0x18(%rbp),%r12
	mov    -0x10(%rbp),%rbx
	mov    -0x8(%rbp),%rax
	leaveq 
	retq   
	xor    %eax,%eax
	leaveq 
	retq   
	xor    %eax,%eax
	leaveq 
	retq   
	mov    %r15d,%eax
	cmp    %rax,%rbx
	je     11ae3 <gz_write+0x253>
	sub    %rax,%rbx
	xor    %eax,%eax
	cmp    %r14,%rbx
	jbe    11afd <gz_write+0x26d>
	mov    %r13,%r15
	jmp    11b00 <gz_write+0x270>
	mov    %r12,%rdi
	xor    %r14d,%r14d
	mov    %r14,%rsi
	callq  114a0 <gz_comp>
	cmp    $0xffffffff,%eax
	je     11b3d <gz_write+0x2ad>
	pushq  -0x38(%rbp)
	popq   -0x60(%rbp)
	jmp    11a82 <gz_write+0x1f2>
	mov    -0x60(%rbp),%r15
	mov    -0x40(%rbp),%r14
	mov    -0x38(%rbp),%r13
	mov    -0x30(%rbp),%r12
	mov    -0x28(%rbp),%rbx
	mov    -0x20(%rbp),%rax
	leaveq 
	retq   
	mov    %rbx,%r15
	mov    %r15d,0x80(%r12)
	mov    %r15d,%ecx
	add    0x10(%r12),%rcx
	mov    %rcx,0x10(%r12)
	mov    %rax,%rsi
	mov    %r12,%rdi
	callq  114a0 <gz_comp>
	cmp    $0xffffffff,%eax
	jne    11ab1 <gz_write+0x221>
	mov    -0x60(%rbp),%r15
	mov    -0x40(%rbp),%r14
	mov    -0x38(%rbp),%r13
	mov    -0x30(%rbp),%r12
	mov    -0x28(%rbp),%rbx
	xor    %eax,%eax
	leaveq 
	retq   
	mov    %r14,%rax
	mov    -0x30(%rbp),%r15
	mov    -0x28(%rbp),%r14
	mov    -0x20(%rbp),%r13
	mov    -0x18(%rbp),%r12
	mov    -0x10(%rbp),%rbx
	leaveq 
	retq   

ly of section .fini:

0011b58 <_fini>:
	endbr64 
	sub    $0x8,%rsp
	add    $0x8,%rsp
	retq   
