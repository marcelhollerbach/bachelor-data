
zlib/pre.so:     file format elf64-x86-64


Disassembly of section .init:

0000000000002000 <_init>:
    2000:	endbr64 
    2004:	sub    $0x8,%rsp
    2008:	mov    0x15fc1(%rip),%rax        # 17fd0 <__gmon_start__>
    200f:	test   %rax,%rax
    2012:	je     2016 <_init+0x16>
    2014:	callq  *%rax
    2016:	add    $0x8,%rsp
    201a:	retq   

Disassembly of section .plt:

0000000000002020 <.plt>:
    2020:	pushq  0x15fe2(%rip)        # 18008 <_GLOBAL_OFFSET_TABLE_+0x8>
    2026:	jmpq   *0x15fe4(%rip)        # 18010 <_GLOBAL_OFFSET_TABLE_+0x10>
    202c:	nopl   0x0(%rax)

0000000000002030 <crc32_z@plt>:
    2030:	jmpq   *0x15fe2(%rip)        # 18018 <crc32_z@@Base+0x157c8>
    2036:	pushq  $0x0
    203b:	jmpq   2020 <.plt>

0000000000002040 <gzvprintf@plt>:
    2040:	jmpq   *0x15fda(%rip)        # 18020 <gzvprintf@@Base+0x6f10>
    2046:	pushq  $0x1
    204b:	jmpq   2020 <.plt>

0000000000002050 <gzseek64@plt>:
    2050:	jmpq   *0x15fd2(%rip)        # 18028 <gzseek64@@Base+0x8c18>
    2056:	pushq  $0x2
    205b:	jmpq   2020 <.plt>

0000000000002060 <free@plt>:
    2060:	jmpq   *0x15fca(%rip)        # 18030 <free@GLIBC_2.2.5>
    2066:	pushq  $0x3
    206b:	jmpq   2020 <.plt>

0000000000002070 <__errno_location@plt>:
    2070:	jmpq   *0x15fc2(%rip)        # 18038 <__errno_location@GLIBC_2.2.5>
    2076:	pushq  $0x4
    207b:	jmpq   2020 <.plt>

0000000000002080 <inflate@plt>:
    2080:	jmpq   *0x15fba(%rip)        # 18040 <inflate@@Base+0xef60>
    2086:	pushq  $0x5
    208b:	jmpq   2020 <.plt>

0000000000002090 <gzclose_r@plt>:
    2090:	jmpq   *0x15fb2(%rip)        # 18048 <gzclose_r@@Base+0x7fa8>
    2096:	pushq  $0x6
    209b:	jmpq   2020 <.plt>

00000000000020a0 <gz_error@plt>:
    20a0:	jmpq   *0x15faa(%rip)        # 18050 <gz_error@@Base+0x8980>
    20a6:	pushq  $0x7
    20ab:	jmpq   2020 <.plt>

00000000000020b0 <gzgetc@plt>:
    20b0:	jmpq   *0x15fa2(%rip)        # 18058 <gzgetc@@Base+0x81c8>
    20b6:	pushq  $0x8
    20bb:	jmpq   2020 <.plt>

00000000000020c0 <vsnprintf@plt>:
    20c0:	jmpq   *0x15f9a(%rip)        # 18060 <vsnprintf@GLIBC_2.2.5>
    20c6:	pushq  $0x9
    20cb:	jmpq   2020 <.plt>

00000000000020d0 <crc32@plt>:
    20d0:	jmpq   *0x15f92(%rip)        # 18068 <crc32@@Base+0x15828>
    20d6:	pushq  $0xa
    20db:	jmpq   2020 <.plt>

00000000000020e0 <write@plt>:
    20e0:	jmpq   *0x15f8a(%rip)        # 18070 <write@GLIBC_2.2.5>
    20e6:	pushq  $0xb
    20eb:	jmpq   2020 <.plt>

00000000000020f0 <inflateResetKeep@plt>:
    20f0:	jmpq   *0x15f82(%rip)        # 18078 <inflateResetKeep@@Base+0xbe18>
    20f6:	pushq  $0xc
    20fb:	jmpq   2020 <.plt>

0000000000002100 <_tr_init@plt>:
    2100:	jmpq   *0x15f7a(%rip)        # 18080 <_tr_init@@Base+0xb470>
    2106:	pushq  $0xd
    210b:	jmpq   2020 <.plt>

0000000000002110 <strlen@plt>:
    2110:	jmpq   *0x15f72(%rip)        # 18088 <strlen@GLIBC_2.2.5>
    2116:	pushq  $0xe
    211b:	jmpq   2020 <.plt>

0000000000002120 <_tr_flush_block@plt>:
    2120:	jmpq   *0x15f6a(%rip)        # 18090 <_tr_flush_block@@Base+0xb320>
    2126:	pushq  $0xf
    212b:	jmpq   2020 <.plt>

0000000000002130 <snprintf@plt>:
    2130:	jmpq   *0x15f62(%rip)        # 18098 <snprintf@GLIBC_2.2.5>
    2136:	pushq  $0x10
    213b:	jmpq   2020 <.plt>

0000000000002140 <deflateReset@plt>:
    2140:	jmpq   *0x15f5a(%rip)        # 180a0 <deflateReset@@Base+0x13c80>
    2146:	pushq  $0x11
    214b:	jmpq   2020 <.plt>

0000000000002150 <deflate@plt>:
    2150:	jmpq   *0x15f52(%rip)        # 180a8 <deflate@@Base+0x15358>
    2156:	pushq  $0x12
    215b:	jmpq   2020 <.plt>

0000000000002160 <_tr_stored_block@plt>:
    2160:	jmpq   *0x15f4a(%rip)        # 180b0 <_tr_stored_block@@Base+0xaf00>
    2166:	pushq  $0x13
    216b:	jmpq   2020 <.plt>

0000000000002170 <memset@plt>:
    2170:	jmpq   *0x15f42(%rip)        # 180b8 <memset@GLIBC_2.2.5>
    2176:	pushq  $0x14
    217b:	jmpq   2020 <.plt>

0000000000002180 <close@plt>:
    2180:	jmpq   *0x15f3a(%rip)        # 180c0 <close@GLIBC_2.2.5>
    2186:	pushq  $0x15
    218b:	jmpq   2020 <.plt>

0000000000002190 <gztell64@plt>:
    2190:	jmpq   *0x15f32(%rip)        # 180c8 <gztell64@@Base+0x8b08>
    2196:	pushq  $0x16
    219b:	jmpq   2020 <.plt>

00000000000021a0 <deflateInit2_@plt>:
    21a0:	jmpq   *0x15f2a(%rip)        # 180d0 <deflateInit2_@@Base+0x13660>
    21a6:	pushq  $0x17
    21ab:	jmpq   2020 <.plt>

00000000000021b0 <memchr@plt>:
    21b0:	jmpq   *0x15f22(%rip)        # 180d8 <memchr@GLIBC_2.2.5>
    21b6:	pushq  $0x18
    21bb:	jmpq   2020 <.plt>

00000000000021c0 <read@plt>:
    21c0:	jmpq   *0x15f1a(%rip)        # 180e0 <read@GLIBC_2.2.5>
    21c6:	pushq  $0x19
    21cb:	jmpq   2020 <.plt>

00000000000021d0 <deflateParams@plt>:
    21d0:	jmpq   *0x15f12(%rip)        # 180e8 <deflateParams@@Base+0x13c88>
    21d6:	pushq  $0x1a
    21db:	jmpq   2020 <.plt>

00000000000021e0 <deflateInit_@plt>:
    21e0:	jmpq   *0x15f0a(%rip)        # 180f0 <deflateInit_@@Base+0x136b0>
    21e6:	pushq  $0x1b
    21eb:	jmpq   2020 <.plt>

00000000000021f0 <memcpy@plt>:
    21f0:	jmpq   *0x15f02(%rip)        # 180f8 <memcpy@GLIBC_2.14>
    21f6:	pushq  $0x1c
    21fb:	jmpq   2020 <.plt>

0000000000002200 <uncompress2@plt>:
    2200:	jmpq   *0x15efa(%rip)        # 18100 <uncompress2@@Base+0x9190>
    2206:	pushq  $0x1d
    220b:	jmpq   2020 <.plt>

0000000000002210 <inflateEnd@plt>:
    2210:	jmpq   *0x15ef2(%rip)        # 18108 <inflateEnd@@Base+0xc988>
    2216:	pushq  $0x1e
    221b:	jmpq   2020 <.plt>

0000000000002220 <inflate_fast@plt>:
    2220:	jmpq   *0x15eea(%rip)        # 18110 <inflate_fast@@Base+0xf700>
    2226:	pushq  $0x1f
    222b:	jmpq   2020 <.plt>

0000000000002230 <adler32@plt>:
    2230:	jmpq   *0x15ee2(%rip)        # 18118 <adler32@@Base+0x15ce8>
    2236:	pushq  $0x20
    223b:	jmpq   2020 <.plt>

0000000000002240 <malloc@plt>:
    2240:	jmpq   *0x15eda(%rip)        # 18120 <malloc@GLIBC_2.2.5>
    2246:	pushq  $0x21
    224b:	jmpq   2020 <.plt>

0000000000002250 <gzclose_w@plt>:
    2250:	jmpq   *0x15ed2(%rip)        # 18128 <gzclose_w@@Base+0x7138>
    2256:	pushq  $0x22
    225b:	jmpq   2020 <.plt>

0000000000002260 <deflateEnd@plt>:
    2260:	jmpq   *0x15eca(%rip)        # 18130 <deflateEnd@@Base+0x14370>
    2266:	pushq  $0x23
    226b:	jmpq   2020 <.plt>

0000000000002270 <gzrewind@plt>:
    2270:	jmpq   *0x15ec2(%rip)        # 18138 <gzrewind@@Base+0x8e98>
    2276:	pushq  $0x24
    227b:	jmpq   2020 <.plt>

0000000000002280 <gzoffset64@plt>:
    2280:	jmpq   *0x15eba(%rip)        # 18140 <gzoffset64@@Base+0x8b30>
    2286:	pushq  $0x25
    228b:	jmpq   2020 <.plt>

0000000000002290 <inflateInit_@plt>:
    2290:	jmpq   *0x15eb2(%rip)        # 18148 <inflateInit_@@Base+0xc158>
    2296:	pushq  $0x26
    229b:	jmpq   2020 <.plt>

00000000000022a0 <inflate_table@plt>:
    22a0:	jmpq   *0x15eaa(%rip)        # 18150 <inflate_table@@Base+0xbb90>
    22a6:	pushq  $0x27
    22ab:	jmpq   2020 <.plt>

00000000000022b0 <compress2@plt>:
    22b0:	jmpq   *0x15ea2(%rip)        # 18158 <compress2@@Base+0x93b8>
    22b6:	pushq  $0x28
    22bb:	jmpq   2020 <.plt>

00000000000022c0 <open@plt>:
    22c0:	jmpq   *0x15e9a(%rip)        # 18160 <open@GLIBC_2.2.5>
    22c6:	pushq  $0x29
    22cb:	jmpq   2020 <.plt>

00000000000022d0 <inflateInit2_@plt>:
    22d0:	jmpq   *0x15e92(%rip)        # 18168 <inflateInit2_@@Base+0xc158>
    22d6:	pushq  $0x2a
    22db:	jmpq   2020 <.plt>

00000000000022e0 <_tr_align@plt>:
    22e0:	jmpq   *0x15e8a(%rip)        # 18170 <_tr_align@@Base+0xb0c0>
    22e6:	pushq  $0x2b
    22eb:	jmpq   2020 <.plt>

00000000000022f0 <inflateReset@plt>:
    22f0:	jmpq   *0x15e82(%rip)        # 18178 <inflateReset@@Base+0xc448>
    22f6:	pushq  $0x2c
    22fb:	jmpq   2020 <.plt>

0000000000002300 <lseek64@plt>:
    2300:	jmpq   *0x15e7a(%rip)        # 18180 <lseek64@GLIBC_2.2.5>
    2306:	pushq  $0x2d
    230b:	jmpq   2020 <.plt>

0000000000002310 <deflateResetKeep@plt>:
    2310:	jmpq   *0x15e72(%rip)        # 18188 <deflateResetKeep@@Base+0x13408>
    2316:	pushq  $0x2e
    231b:	jmpq   2020 <.plt>

0000000000002320 <inflateReset2@plt>:
    2320:	jmpq   *0x15e6a(%rip)        # 18190 <inflateReset2@@Base+0xc410>
    2326:	pushq  $0x2f
    232b:	jmpq   2020 <.plt>

0000000000002330 <strerror@plt>:
    2330:	jmpq   *0x15e62(%rip)        # 18198 <strerror@GLIBC_2.2.5>
    2336:	pushq  $0x30
    233b:	jmpq   2020 <.plt>

0000000000002340 <adler32_z@plt>:
    2340:	jmpq   *0x15e5a(%rip)        # 181a0 <adler32_z@@Base+0x15d60>
    2346:	pushq  $0x31
    234b:	jmpq   2020 <.plt>

0000000000002350 <_tr_flush_bits@plt>:
    2350:	jmpq   *0x15e52(%rip)        # 181a8 <_tr_flush_bits@@Base+0xb108>
    2356:	pushq  $0x32
    235b:	jmpq   2020 <.plt>

Disassembly of section .text:

0000000000002360 <deregister_tm_clones>:
    2360:	lea    0x15e51(%rip),%rdi        # 181b8 <__TMC_END__>
    2367:	lea    0x15e4a(%rip),%rax        # 181b8 <__TMC_END__>
    236e:	cmp    %rdi,%rax
    2371:	je     2388 <deregister_tm_clones+0x28>
    2373:	mov    0x15c3e(%rip),%rax        # 17fb8 <_ITM_deregisterTMCloneTable>
    237a:	test   %rax,%rax
    237d:	je     2388 <deregister_tm_clones+0x28>
    237f:	jmpq   *%rax
    2381:	nopl   0x0(%rax)
    2388:	retq   
    2389:	nopl   0x0(%rax)

0000000000002390 <register_tm_clones>:
    2390:	lea    0x15e21(%rip),%rdi        # 181b8 <__TMC_END__>
    2397:	lea    0x15e1a(%rip),%rsi        # 181b8 <__TMC_END__>
    239e:	sub    %rdi,%rsi
    23a1:	sar    $0x3,%rsi
    23a5:	mov    %rsi,%rax
    23a8:	shr    $0x3f,%rax
    23ac:	add    %rax,%rsi
    23af:	sar    %rsi
    23b2:	je     23c8 <register_tm_clones+0x38>
    23b4:	mov    0x15c2d(%rip),%rax        # 17fe8 <_ITM_registerTMCloneTable>
    23bb:	test   %rax,%rax
    23be:	je     23c8 <register_tm_clones+0x38>
    23c0:	jmpq   *%rax
    23c2:	nopw   0x0(%rax,%rax,1)
    23c8:	retq   
    23c9:	nopl   0x0(%rax)

00000000000023d0 <__do_global_dtors_aux>:
    23d0:	endbr64 
    23d4:	cmpb   $0x0,0x15ddd(%rip)        # 181b8 <__TMC_END__>
    23db:	jne    2410 <__do_global_dtors_aux+0x40>
    23dd:	push   %rbp
    23de:	cmpq   $0x0,0x15c12(%rip)        # 17ff8 <__cxa_finalize@GLIBC_2.2.5>
    23e6:	mov    %rsp,%rbp
    23e9:	je     23f8 <__do_global_dtors_aux+0x28>
    23eb:	mov    0x15dbe(%rip),%rdi        # 181b0 <__dso_handle>
    23f2:	callq  *0x15c00(%rip)        # 17ff8 <__cxa_finalize@GLIBC_2.2.5>
    23f8:	callq  2360 <deregister_tm_clones>
    23fd:	movb   $0x1,0x15db4(%rip)        # 181b8 <__TMC_END__>
    2404:	pop    %rbp
    2405:	retq   
    2406:	nopw   %cs:0x0(%rax,%rax,1)
    2410:	retq   
    2411:	data16 nopw %cs:0x0(%rax,%rax,1)
    241c:	nopl   0x0(%rax)

0000000000002420 <frame_dummy>:
    2420:	endbr64 
    2424:	jmpq   2390 <register_tm_clones>
    2429:	nopl   0x0(%rax)

0000000000002430 <adler32>:
    2430:	push   %rbp
    2431:	mov    %rsp,%rbp
    2434:	mov    %edx,%edx
    2436:	callq  2340 <adler32_z@plt>
    243b:	leaveq 
    243c:	retq   
    243d:	nopl   (%rax)

0000000000002440 <adler32_z>:
    2440:	push   %rbp
    2441:	mov    %rsp,%rbp
    2444:	sub    $0x40,%rsp
    2448:	movzwl %di,%ecx
    244b:	mov    $0xffff0000,%eax
    2450:	and    %rax,%rdi
    2453:	shr    $0x10,%rdi
    2457:	cmp    $0x1,%rdx
    245b:	je     2469 <adler32_z+0x29>
    245d:	test   %rsi,%rsi
    2460:	jne    249a <adler32_z+0x5a>
    2462:	mov    $0x1,%eax
    2467:	leaveq 
    2468:	retq   
    2469:	movzbl (%rsi),%eax
    246c:	add    %rcx,%rax
    246f:	cmp    $0xfff0,%rax
    2475:	jbe    247d <adler32_z+0x3d>
    2477:	add    $0xffffffffffff000f,%rax
    247d:	lea    (%rax,%rdi,1),%rcx
    2481:	cmp    $0xfff0,%rcx
    2488:	jbe    2491 <adler32_z+0x51>
    248a:	add    $0xffffffffffff000f,%rcx
    2491:	shl    $0x10,%rcx
    2495:	or     %rcx,%rax
    2498:	leaveq 
    2499:	retq   
    249a:	mov    $0xfff1,%r8d
    24a0:	cmp    $0xf,%rdx
    24a4:	jbe    24d6 <adler32_z+0x96>
    24a6:	mov    $0x15b,%r8d
    24ac:	mov    %rbx,-0x10(%rbp)
    24b0:	mov    %r12,-0x18(%rbp)
    24b4:	mov    %r13,-0x20(%rbp)
    24b8:	mov    %r14,-0x28(%rbp)
    24bc:	mov    %r15,-0x30(%rbp)
    24c0:	jmpq   2611 <adler32_z+0x1d1>
    24c5:	movzbl (%rsi),%eax
    24c8:	add    %rax,%rcx
    24cb:	add    %rcx,%rdi
    24ce:	add    $0x1,%rsi
    24d2:	add    $0xffffffffffffffff,%rdx
    24d6:	test   %rdx,%rdx
    24d9:	jne    24c5 <adler32_z+0x85>
    24db:	cmp    $0xfff0,%rcx
    24e2:	jbe    24eb <adler32_z+0xab>
    24e4:	add    $0xffffffffffff000f,%rcx
    24eb:	mov    %rdi,%rax
    24ee:	xor    %edx,%edx
    24f0:	div    %r8
    24f3:	shl    $0x10,%rdx
    24f7:	or     %rdx,%rcx
    24fa:	mov    %rcx,%rax
    24fd:	leaveq 
    24fe:	retq   
    24ff:	mov    %rsi,%rcx
    2502:	mov    %rax,%rsi
    2505:	mov    %r8,-0x40(%rbp)
    2509:	mov    %rsi,-0x8(%rbp)
    250d:	movzbl (%rsi),%eax
    2510:	lea    (%rcx,%rax,1),%r8
    2514:	movzbl 0x1(%rsi),%eax
    2518:	lea    (%rax,%r8,1),%rcx
    251c:	movzbl 0x2(%rsi),%eax
    2520:	lea    (%rax,%rcx,1),%rbx
    2524:	movzbl 0x3(%rsi),%edx
    2528:	lea    (%rdx,%rbx,2),%rax
    252c:	add    %rcx,%rax
    252f:	lea    (%rax,%r8,1),%rcx
    2533:	lea    (%rbx,%rdx,1),%rax
    2537:	movzbl 0x4(%rsi),%edx
    253b:	lea    (%rdx,%rax,1),%r15
    253f:	movzbl 0x5(%rsi),%eax
    2543:	lea    (%rax,%r15,1),%r14
    2547:	movzbl 0x6(%rsi),%eax
    254b:	lea    (%rax,%r14,1),%r13
    254f:	movzbl 0x7(%rsi),%eax
    2553:	lea    (%rax,%r13,1),%r12
    2557:	movzbl 0x8(%rsi),%eax
    255b:	lea    (%rax,%r12,1),%r11
    255f:	movzbl 0x9(%rsi),%eax
    2563:	lea    (%rax,%r11,1),%r10
    2567:	movzbl 0xa(%rsi),%eax
    256b:	lea    (%rax,%r10,1),%r9
    256f:	movzbl 0xb(%rsi),%eax
    2573:	lea    (%rax,%r9,1),%r8
    2577:	movzbl 0xc(%rsi),%eax
    257b:	lea    (%rax,%r8,1),%rbx
    257f:	movzbl 0xd(%rsi),%eax
    2583:	lea    (%rax,%rbx,1),%rdx
    2587:	movzbl 0xe(%rsi),%eax
    258b:	add    %rdx,%rax
    258e:	movzbl 0xf(%rsi),%esi
    2592:	add    %rax,%rsi
    2595:	add    %rsi,%rcx
    2598:	add    %rcx,%rax
    259b:	add    %rdi,%rax
    259e:	add    %rdx,%rax
    25a1:	add    %rbx,%rax
    25a4:	add    %r8,%rax
    25a7:	add    %r9,%rax
    25aa:	add    %r10,%rax
    25ad:	add    %r11,%rax
    25b0:	add    %r12,%rax
    25b3:	add    %r13,%rax
    25b6:	add    %r14,%rax
    25b9:	lea    (%rax,%r15,1),%rdi
    25bd:	mov    -0x8(%rbp),%rax
    25c1:	add    $0x10,%rax
    25c5:	mov    -0x40(%rbp),%rcx
    25c9:	lea    -0x1(%rcx),%r8d
    25cd:	test   %r8d,%r8d
    25d0:	jne    24ff <adler32_z+0xbf>
    25d6:	mov    %rsi,%r8
    25d9:	mov    %rax,%rsi
    25dc:	mov    %r8,%rax
    25df:	xor    %ecx,%ecx
    25e1:	mov    %rcx,%rdx
    25e4:	mov    $0xfff1,%ebx
    25e9:	div    %rbx
    25ec:	mov    %rdi,%rax
    25ef:	mov    %rdx,%rdi
    25f2:	mov    %rcx,%rdx
    25f5:	mov    %rdi,%rcx
    25f8:	div    %rbx
    25fb:	mov    -0x38(%rbp),%rax
    25ff:	add    $0xffffffffffffea50,%rax
    2605:	mov    %rdx,%rdi
    2608:	mov    %rax,%rdx
    260b:	mov    $0x15b,%r8d
    2611:	cmp    $0x15af,%rdx
    2618:	ja     2643 <adler32_z+0x203>
    261a:	test   %rdx,%rdx
    261d:	jne    271b <adler32_z+0x2db>
    2623:	shl    $0x10,%rdi
    2627:	or     %rdi,%rcx
    262a:	mov    %rcx,%rax
    262d:	mov    -0x30(%rbp),%r15
    2631:	mov    -0x28(%rbp),%r14
    2635:	mov    -0x20(%rbp),%r13
    2639:	mov    -0x18(%rbp),%r12
    263d:	mov    -0x10(%rbp),%rbx
    2641:	leaveq 
    2642:	retq   
    2643:	mov    %rdx,-0x38(%rbp)
    2647:	jmpq   2505 <adler32_z+0xc5>
    264c:	lea    0x10(%rsi),%rax
    2650:	mov    %rax,-0x38(%rbp)
    2654:	movzbl (%rsi),%eax
    2657:	lea    (%rcx,%rax,1),%r15
    265b:	movzbl 0x1(%rsi),%eax
    265f:	add    %r15,%rax
    2662:	movzbl 0x2(%rsi),%ecx
    2666:	lea    (%rcx,%rax,1),%r14
    266a:	movzbl 0x3(%rsi),%ecx
    266e:	lea    (%rcx,%r14,1),%r13
    2672:	movzbl 0x4(%rsi),%ecx
    2676:	lea    (%rcx,%r13,1),%rbx
    267a:	movzbl 0x5(%rsi),%ecx
    267e:	add    %rbx,%rcx
    2681:	mov    %rcx,-0x8(%rbp)
    2685:	movzbl 0x6(%rsi),%r8d
    268a:	lea    (%r8,%rcx,1),%r12
    268e:	movzbl 0x7(%rsi),%ecx
    2692:	lea    (%rcx,%r12,1),%r11
    2696:	movzbl 0x8(%rsi),%ecx
    269a:	add    %r11,%rcx
    269d:	movzbl 0x9(%rsi),%r8d
    26a2:	lea    (%r8,%rcx,1),%r10
    26a6:	movzbl 0xa(%rsi),%r8d
    26ab:	lea    (%r8,%r10,1),%r9
    26af:	mov    %rdx,-0x40(%rbp)
    26b3:	movzbl 0xb(%rsi),%edx
    26b7:	lea    (%rdx,%r9,1),%r8
    26bb:	movzbl 0xc(%rsi),%edx
    26bf:	add    %r8,%rdx
    26c2:	add    %rdx,%rax
    26c5:	add    %rcx,%rax
    26c8:	add    %r15,%rax
    26cb:	add    %rbx,%rax
    26ce:	movzbl 0xd(%rsi),%ecx
    26d2:	lea    (%rcx,%rdx,1),%rbx
    26d6:	movzbl 0xe(%rsi),%ecx
    26da:	lea    (%rcx,%rbx,1),%rdx
    26de:	movzbl 0xf(%rsi),%ecx
    26e2:	add    %rdx,%rcx
    26e5:	add    %rcx,%rax
    26e8:	add    %rdi,%rax
    26eb:	add    %r8,%rax
    26ee:	add    %r11,%rax
    26f1:	add    %r13,%rax
    26f4:	add    %rdx,%rax
    26f7:	add    %r9,%rax
    26fa:	add    %r12,%rax
    26fd:	add    %r14,%rax
    2700:	add    %rbx,%rax
    2703:	lea    (%r10,%rax,1),%rdx
    2707:	mov    -0x8(%rbp),%rax
    270b:	lea    (%rax,%rdx,1),%rdi
    270f:	mov    -0x40(%rbp),%rax
    2713:	lea    -0x10(%rax),%rdx
    2717:	mov    -0x38(%rbp),%rsi
    271b:	cmp    $0xf,%rdx
    271f:	ja     264c <adler32_z+0x20c>
    2725:	jmp    2738 <adler32_z+0x2f8>
    2727:	movzbl (%rsi),%eax
    272a:	add    %rax,%rcx
    272d:	add    %rcx,%rdi
    2730:	add    $0x1,%rsi
    2734:	add    $0xffffffffffffffff,%rdx
    2738:	test   %rdx,%rdx
    273b:	jne    2727 <adler32_z+0x2e7>
    273d:	mov    %rcx,%rax
    2740:	xor    %esi,%esi
    2742:	mov    %rsi,%rdx
    2745:	mov    $0xfff1,%ebx
    274a:	div    %rbx
    274d:	mov    %rdi,%rax
    2750:	mov    %rdx,%rcx
    2753:	mov    %rsi,%rdx
    2756:	div    %rbx
    2759:	mov    %rdx,%rdi
    275c:	jmpq   2623 <adler32_z+0x1e3>
    2761:	data16 nopw %cs:0x0(%rax,%rax,1)
    276c:	nopl   0x0(%rax)

0000000000002770 <adler32_combine64>:
    2770:	push   %rbp
    2771:	mov    %rsp,%rbp
    2774:	callq  2790 <adler32_combine_>
    2779:	leaveq 
    277a:	retq   
    277b:	nopl   0x0(%rax,%rax,1)

0000000000002780 <adler32_combine>:
    2780:	push   %rbp
    2781:	mov    %rsp,%rbp
    2784:	callq  2790 <adler32_combine_>
    2789:	leaveq 
    278a:	retq   
    278b:	nopl   0x0(%rax,%rax,1)

0000000000002790 <adler32_combine_>:
    2790:	push   %rbp
    2791:	mov    %rsp,%rbp
    2794:	test   %rdx,%rdx
    2797:	jns    27a0 <adler32_combine_+0x10>
    2799:	mov    $0xffffffff,%eax
    279e:	leaveq 
    279f:	retq   
    27a0:	movzwl %si,%eax
    27a3:	movzwl %di,%r8d
    27a7:	lea    0xfff0(%rax,%r8,1),%rcx
    27af:	cmp    $0xfff0,%rcx
    27b6:	jbe    27bd <adler32_combine_+0x2d>
    27b8:	lea    -0x1(%rax,%r8,1),%rcx
    27bd:	cmp    $0xfff0,%rcx
    27c4:	jbe    27cd <adler32_combine_+0x3d>
    27c6:	add    $0xffffffffffff000f,%rcx
    27cd:	mov    $0xffff0000,%eax
    27d2:	and    %rax,%rdi
    27d5:	shr    $0x10,%rdi
    27d9:	and    %rax,%rsi
    27dc:	shr    $0x10,%rsi
    27e0:	lea    0xfff1(%rdi,%rsi,1),%rsi
    27e8:	mov    %rdx,%rax
    27eb:	mov    $0xfff1,%edi
    27f0:	cqto   
    27f2:	idiv   %rdi
    27f5:	mov    %edx,%eax
    27f7:	sub    %rax,%rsi
    27fa:	imul   %rax,%r8
    27fe:	mov    %r8,%rax
    2801:	xor    %edx,%edx
    2803:	div    %rdi
    2806:	lea    (%rsi,%rdx,1),%rax
    280a:	cmp    $0x1ffe1,%rax
    2810:	jbe    2818 <adler32_combine_+0x88>
    2812:	add    $0xfffffffffffe001e,%rax
    2818:	cmp    $0xfff0,%rax
    281e:	jbe    2826 <adler32_combine_+0x96>
    2820:	add    $0xffffffffffff000f,%rax
    2826:	shl    $0x10,%rax
    282a:	or     %rax,%rcx
    282d:	mov    %rcx,%rax
    2830:	leaveq 
    2831:	retq   
    2832:	nopw   %cs:0x0(%rax,%rax,1)
    283c:	nopl   0x0(%rax)

0000000000002840 <crc32>:
    2840:	push   %rbp
    2841:	mov    %rsp,%rbp
    2844:	mov    %edx,%edx
    2846:	callq  2030 <crc32_z@plt>
    284b:	leaveq 
    284c:	retq   
    284d:	nopl   (%rax)

0000000000002850 <crc32_z>:
    2850:	push   %rbp
    2851:	mov    %rsp,%rbp
    2854:	test   %rsi,%rsi
    2857:	jne    285d <crc32_z+0xd>
    2859:	xor    %eax,%eax
    285b:	leaveq 
    285c:	retq   
    285d:	callq  28a0 <crc32_little>
    2862:	leaveq 
    2863:	retq   
    2864:	data16 nopw %cs:0x0(%rax,%rax,1)
    286f:	nop

0000000000002870 <crc32_combine64>:
    2870:	push   %rbp
    2871:	mov    %rsp,%rbp
    2874:	callq  2c30 <crc32_combine_>
    2879:	leaveq 
    287a:	retq   
    287b:	nopl   0x0(%rax,%rax,1)

0000000000002880 <crc32_combine>:
    2880:	push   %rbp
    2881:	mov    %rsp,%rbp
    2884:	callq  2c30 <crc32_combine_>
    2889:	leaveq 
    288a:	retq   
    288b:	nopl   0x0(%rax,%rax,1)

0000000000002890 <get_crc_table>:
    2890:	push   %rbp
    2891:	mov    %rsp,%rbp
    2894:	lea    0xf765(%rip),%rax        # 12000 <crc_table>
    289b:	leaveq 
    289c:	retq   
    289d:	nopl   (%rax)

00000000000028a0 <crc32_little>:
    28a0:	push   %rbp
    28a1:	mov    %rsp,%rbp
    28a4:	not    %edi
    28a6:	lea    0xf753(%rip),%r8        # 12000 <crc_table>
    28ad:	jmp    28d8 <crc32_little+0x38>
    28af:	mov    %rsi,%rax
    28b2:	and    $0x3,%rax
    28b6:	test   %rax,%rax
    28b9:	jle    2b11 <crc32_little+0x271>
    28bf:	movzbl (%rsi),%eax
    28c2:	xor    %edi,%eax
    28c4:	movzbl %al,%eax
    28c7:	mov    %eax,%eax
    28c9:	shr    $0x8,%edi
    28cc:	xor    (%r8,%rax,4),%edi
    28d0:	add    $0x1,%rsi
    28d4:	add    $0xffffffffffffffff,%rdx
    28d8:	test   %rdx,%rdx
    28db:	jne    28af <crc32_little+0xf>
    28dd:	xor    %edx,%edx
    28df:	jmpq   2b11 <crc32_little+0x271>
    28e4:	xor    (%rsi),%edi
    28e6:	movzbl %dil,%eax
    28ea:	mov    %eax,%ecx
    28ec:	mov    %rdi,%rax
    28ef:	and    $0xff00,%eax
    28f4:	shr    $0x8,%eax
    28f7:	mov    %eax,%eax
    28f9:	mov    0x800(%r8,%rax,4),%eax
    2901:	xor    0xc00(%r8,%rcx,4),%eax
    2909:	mov    %rdi,%rcx
    290c:	and    $0xff0000,%ecx
    2912:	shr    $0x10,%ecx
    2915:	mov    %ecx,%ecx
    2917:	xor    0x400(%r8,%rcx,4),%eax
    291f:	shr    $0x18,%edi
    2922:	mov    %edi,%ecx
    2924:	xor    (%r8,%rcx,4),%eax
    2928:	xor    0x4(%rsi),%eax
    292b:	movzbl %al,%ecx
    292e:	mov    %ecx,%edi
    2930:	mov    %rax,%rcx
    2933:	and    $0xff00,%ecx
    2939:	shr    $0x8,%ecx
    293c:	mov    %ecx,%ecx
    293e:	mov    0x800(%r8,%rcx,4),%ecx
    2946:	xor    0xc00(%r8,%rdi,4),%ecx
    294e:	mov    %rax,%rdi
    2951:	and    $0xff0000,%edi
    2957:	shr    $0x10,%edi
    295a:	mov    %edi,%edi
    295c:	xor    0x400(%r8,%rdi,4),%ecx
    2964:	shr    $0x18,%eax
    2967:	mov    %eax,%eax
    2969:	xor    (%r8,%rax,4),%ecx
    296d:	xor    0x8(%rsi),%ecx
    2970:	movzbl %cl,%eax
    2973:	mov    %eax,%edi
    2975:	mov    %rcx,%rax
    2978:	and    $0xff00,%eax
    297d:	shr    $0x8,%eax
    2980:	mov    %eax,%eax
    2982:	mov    0x800(%r8,%rax,4),%eax
    298a:	xor    0xc00(%r8,%rdi,4),%eax
    2992:	mov    %rcx,%rdi
    2995:	and    $0xff0000,%edi
    299b:	shr    $0x10,%edi
    299e:	mov    %edi,%edi
    29a0:	xor    0x400(%r8,%rdi,4),%eax
    29a8:	shr    $0x18,%ecx
    29ab:	mov    %ecx,%ecx
    29ad:	xor    (%r8,%rcx,4),%eax
    29b1:	xor    0xc(%rsi),%eax
    29b4:	movzbl %al,%ecx
    29b7:	mov    %ecx,%edi
    29b9:	mov    %rax,%rcx
    29bc:	and    $0xff00,%ecx
    29c2:	shr    $0x8,%ecx
    29c5:	mov    %ecx,%ecx
    29c7:	mov    0x800(%r8,%rcx,4),%ecx
    29cf:	xor    0xc00(%r8,%rdi,4),%ecx
    29d7:	mov    %rax,%rdi
    29da:	and    $0xff0000,%edi
    29e0:	shr    $0x10,%edi
    29e3:	mov    %edi,%edi
    29e5:	xor    0x400(%r8,%rdi,4),%ecx
    29ed:	shr    $0x18,%eax
    29f0:	mov    %eax,%eax
    29f2:	xor    (%r8,%rax,4),%ecx
    29f6:	xor    0x10(%rsi),%ecx
    29f9:	movzbl %cl,%eax
    29fc:	mov    %eax,%edi
    29fe:	mov    %rcx,%rax
    2a01:	and    $0xff00,%eax
    2a06:	shr    $0x8,%eax
    2a09:	mov    %eax,%eax
    2a0b:	mov    0x800(%r8,%rax,4),%eax
    2a13:	xor    0xc00(%r8,%rdi,4),%eax
    2a1b:	mov    %rcx,%rdi
    2a1e:	and    $0xff0000,%edi
    2a24:	shr    $0x10,%edi
    2a27:	mov    %edi,%edi
    2a29:	xor    0x400(%r8,%rdi,4),%eax
    2a31:	shr    $0x18,%ecx
    2a34:	mov    %ecx,%ecx
    2a36:	xor    (%r8,%rcx,4),%eax
    2a3a:	xor    0x14(%rsi),%eax
    2a3d:	movzbl %al,%ecx
    2a40:	mov    %ecx,%edi
    2a42:	mov    %rax,%rcx
    2a45:	and    $0xff00,%ecx
    2a4b:	shr    $0x8,%ecx
    2a4e:	mov    %ecx,%ecx
    2a50:	mov    0x800(%r8,%rcx,4),%ecx
    2a58:	xor    0xc00(%r8,%rdi,4),%ecx
    2a60:	mov    %rax,%rdi
    2a63:	and    $0xff0000,%edi
    2a69:	shr    $0x10,%edi
    2a6c:	mov    %edi,%edi
    2a6e:	xor    0x400(%r8,%rdi,4),%ecx
    2a76:	shr    $0x18,%eax
    2a79:	mov    %eax,%eax
    2a7b:	xor    (%r8,%rax,4),%ecx
    2a7f:	xor    0x18(%rsi),%ecx
    2a82:	movzbl %cl,%eax
    2a85:	mov    %eax,%edi
    2a87:	mov    %rcx,%rax
    2a8a:	and    $0xff00,%eax
    2a8f:	shr    $0x8,%eax
    2a92:	mov    %eax,%eax
    2a94:	mov    0x800(%r8,%rax,4),%eax
    2a9c:	xor    0xc00(%r8,%rdi,4),%eax
    2aa4:	mov    %rcx,%rdi
    2aa7:	and    $0xff0000,%edi
    2aad:	shr    $0x10,%edi
    2ab0:	mov    %edi,%edi
    2ab2:	xor    0x400(%r8,%rdi,4),%eax
    2aba:	shr    $0x18,%ecx
    2abd:	mov    %ecx,%ecx
    2abf:	xor    (%r8,%rcx,4),%eax
    2ac3:	xor    0x1c(%rsi),%eax
    2ac6:	movzbl %al,%ecx
    2ac9:	mov    %ecx,%r9d
    2acc:	mov    %rax,%rcx
    2acf:	and    $0xff00,%ecx
    2ad5:	shr    $0x8,%ecx
    2ad8:	mov    %ecx,%ecx
    2ada:	mov    0x800(%r8,%rcx,4),%edi
    2ae2:	xor    0xc00(%r8,%r9,4),%edi
    2aea:	mov    %rax,%rcx
    2aed:	and    $0xff0000,%ecx
    2af3:	shr    $0x10,%ecx
    2af6:	mov    %ecx,%ecx
    2af8:	xor    0x400(%r8,%rcx,4),%edi
    2b00:	shr    $0x18,%eax
    2b03:	mov    %eax,%eax
    2b05:	xor    (%r8,%rax,4),%edi
    2b09:	add    $0x20,%rsi
    2b0d:	add    $0xffffffffffffffe0,%rdx
    2b11:	cmp    $0x1f,%rdx
    2b15:	ja     28e4 <crc32_little+0x44>
    2b1b:	jmp    2b6d <crc32_little+0x2cd>
    2b1d:	mov    %rdi,%rax
    2b20:	xor    (%rsi),%eax
    2b22:	movzbl %al,%ecx
    2b25:	mov    %ecx,%r9d
    2b28:	mov    %rax,%rcx
    2b2b:	and    $0xff00,%ecx
    2b31:	shr    $0x8,%ecx
    2b34:	mov    %ecx,%ecx
    2b36:	mov    0x800(%r8,%rcx,4),%edi
    2b3e:	xor    0xc00(%r8,%r9,4),%edi
    2b46:	mov    %rax,%rcx
    2b49:	and    $0xff0000,%ecx
    2b4f:	shr    $0x10,%ecx
    2b52:	mov    %ecx,%ecx
    2b54:	xor    0x400(%r8,%rcx,4),%edi
    2b5c:	shr    $0x18,%eax
    2b5f:	mov    %eax,%eax
    2b61:	xor    (%r8,%rax,4),%edi
    2b65:	add    $0x4,%rsi
    2b69:	add    $0xfffffffffffffffc,%rdx
    2b6d:	cmp    $0x3,%rdx
    2b71:	ja     2b1d <crc32_little+0x27d>
    2b73:	test   %rdx,%rdx
    2b76:	jne    2b82 <crc32_little+0x2e2>
    2b78:	not    %edi
    2b7a:	mov    %edi,%eax
    2b7c:	leaveq 
    2b7d:	retq   
    2b7e:	add    $0x1,%rsi
    2b82:	movzbl (%rsi),%eax
    2b85:	xor    %edi,%eax
    2b87:	movzbl %al,%eax
    2b8a:	mov    %eax,%eax
    2b8c:	shr    $0x8,%edi
    2b8f:	xor    (%r8,%rax,4),%edi
    2b93:	add    $0xffffffffffffffff,%rdx
    2b97:	test   %rdx,%rdx
    2b9a:	jne    2b7e <crc32_little+0x2de>
    2b9c:	jmp    2b78 <crc32_little+0x2d8>
    2b9e:	xchg   %ax,%ax

0000000000002ba0 <gf2_matrix_times>:
    2ba0:	push   %rbp
    2ba1:	mov    %rsp,%rbp
    2ba4:	xor    %eax,%eax
    2ba6:	jmp    2bbe <gf2_matrix_times+0x1e>
    2ba8:	mov    %rsi,%rcx
    2bab:	and    $0x1,%rcx
    2baf:	test   %rcx,%rcx
    2bb2:	je     2bb7 <gf2_matrix_times+0x17>
    2bb4:	xor    (%rdi),%rax
    2bb7:	shr    %rsi
    2bba:	add    $0x8,%rdi
    2bbe:	test   %rsi,%rsi
    2bc1:	jne    2ba8 <gf2_matrix_times+0x8>
    2bc3:	leaveq 
    2bc4:	retq   
    2bc5:	data16 nopw %cs:0x0(%rax,%rax,1)

0000000000002bd0 <gf2_matrix_square>:
    2bd0:	push   %rbp
    2bd1:	mov    %rsp,%rbp
    2bd4:	sub    $0x20,%rsp
    2bd8:	mov    %r12,-0x8(%rbp)
    2bdc:	mov    %r13,-0x10(%rbp)
    2be0:	mov    %r14,-0x18(%rbp)
    2be4:	mov    %r15,-0x20(%rbp)
    2be8:	mov    %rsi,%r13
    2beb:	mov    %rdi,%r14
    2bee:	xor    %r12d,%r12d
    2bf1:	jmp    2c0b <gf2_matrix_square+0x3b>
    2bf3:	movslq %r12d,%r15
    2bf6:	mov    0x0(%r13,%r15,8),%rsi
    2bfb:	mov    %r13,%rdi
    2bfe:	callq  2ba0 <gf2_matrix_times>
    2c03:	mov    %rax,(%r14,%r15,8)
    2c07:	add    $0x1,%r12d
    2c0b:	cmp    $0x1f,%r12d
    2c0f:	jle    2bf3 <gf2_matrix_square+0x23>
    2c11:	mov    -0x20(%rbp),%r15
    2c15:	mov    -0x18(%rbp),%r14
    2c19:	mov    -0x10(%rbp),%r13
    2c1d:	mov    -0x8(%rbp),%r12
    2c21:	leaveq 
    2c22:	retq   
    2c23:	data16 nopw %cs:0x0(%rax,%rax,1)
    2c2e:	xchg   %ax,%ax

0000000000002c30 <crc32_combine_>:
    2c30:	push   %rbp
    2c31:	mov    %rsp,%rbp
    2c34:	sub    $0x230,%rsp
    2c3b:	test   %rdx,%rdx
    2c3e:	jg     2c45 <crc32_combine_+0x15>
    2c40:	mov    %rdi,%rax
    2c43:	leaveq 
    2c44:	retq   
    2c45:	mov    $0xedb88320,%eax
    2c4a:	mov    %rax,-0x128(%rbp)
    2c51:	mov    $0x1,%ecx
    2c56:	mov    %rcx,%r8
    2c59:	jmp    2c6c <crc32_combine_+0x3c>
    2c5b:	movslq %ecx,%rax
    2c5e:	mov    %r8,-0x128(%rbp,%rax,8)
    2c66:	add    %r8,%r8
    2c69:	add    $0x1,%ecx
    2c6c:	cmp    $0x1f,%ecx
    2c6f:	jle    2c5b <crc32_combine_+0x2b>
    2c71:	lea    -0x228(%rbp),%rcx
    2c78:	lea    -0x128(%rbp),%r8
    2c7f:	mov    %rcx,%r9
    2c82:	mov    %r8,%rax
    2c85:	mov    %rbx,-0x8(%rbp)
    2c89:	mov    %r12,-0x10(%rbp)
    2c8d:	mov    %r13,-0x18(%rbp)
    2c91:	mov    %r14,-0x20(%rbp)
    2c95:	mov    %r15,-0x28(%rbp)
    2c99:	mov    %rdx,%rbx
    2c9c:	mov    %rdi,%r12
    2c9f:	mov    %r9,%rdi
    2ca2:	mov    %rsi,%r13
    2ca5:	mov    %rax,%rsi
    2ca8:	mov    %rcx,%r14
    2cab:	mov    %r8,%r15
    2cae:	callq  2bd0 <gf2_matrix_square>
    2cb3:	mov    %r15,%rdi
    2cb6:	mov    %r14,%rsi
    2cb9:	callq  2bd0 <gf2_matrix_square>
    2cbe:	jmp    2d0f <crc32_combine_+0xdf>
    2cc0:	mov    %r12,%rsi
    2cc3:	mov    %r14,%rdi
    2cc6:	callq  2ba0 <gf2_matrix_times>
    2ccb:	mov    %rax,%r12
    2cce:	mov    %rbx,%rax
    2cd1:	and    $0xfffffffffffffffe,%rax
    2cd5:	test   %rax,%rax
    2cd8:	je     2d28 <crc32_combine_+0xf8>
    2cda:	mov    %r15,%rdi
    2cdd:	mov    %r14,%rsi
    2ce0:	callq  2bd0 <gf2_matrix_square>
    2ce5:	mov    %rbx,%rax
    2ce8:	and    $0x2,%rax
    2cec:	test   %rax,%rax
    2cef:	jle    2cff <crc32_combine_+0xcf>
    2cf1:	mov    %r12,%rsi
    2cf4:	mov    %r15,%rdi
    2cf7:	callq  2ba0 <gf2_matrix_times>
    2cfc:	mov    %rax,%r12
    2cff:	mov    %rbx,%rax
    2d02:	and    $0xfffffffffffffffc,%rax
    2d06:	test   %rax,%rax
    2d09:	je     2d28 <crc32_combine_+0xf8>
    2d0b:	sar    $0x2,%rbx
    2d0f:	mov    %r14,%rdi
    2d12:	mov    %r15,%rsi
    2d15:	callq  2bd0 <gf2_matrix_square>
    2d1a:	mov    %rbx,%rax
    2d1d:	and    $0x1,%rax
    2d21:	test   %rax,%rax
    2d24:	jg     2cc0 <crc32_combine_+0x90>
    2d26:	jmp    2cce <crc32_combine_+0x9e>
    2d28:	xor    %r13,%r12
    2d2b:	mov    %r12,%rax
    2d2e:	mov    -0x28(%rbp),%r15
    2d32:	mov    -0x20(%rbp),%r14
    2d36:	mov    -0x18(%rbp),%r13
    2d3a:	mov    -0x10(%rbp),%r12
    2d3e:	mov    -0x8(%rbp),%rbx
    2d42:	leaveq 
    2d43:	retq   
    2d44:	nopw   %cs:0x0(%rax,%rax,1)
    2d4e:	xchg   %ax,%ax

0000000000002d50 <deflate>:
    2d50:	push   %rbp
    2d51:	mov    %rsp,%rbp
    2d54:	sub    $0x80,%rsp
    2d5b:	mov    %rsi,-0x80(%rbp)
    2d5f:	mov    %rdi,-0x78(%rbp)
    2d63:	callq  4e70 <deflateStateCheck>
    2d68:	test   %eax,%eax
    2d6a:	je     2d75 <deflate+0x25>
    2d6c:	mov    $0xfffffffffffffffe,%rax
    2d73:	leaveq 
    2d74:	retq   
    2d75:	mov    -0x80(%rbp),%rsi
    2d79:	cmp    $0x5,%esi
    2d7c:	jle    2d87 <deflate+0x37>
    2d7e:	mov    $0xfffffffffffffffe,%rax
    2d85:	leaveq 
    2d86:	retq   
    2d87:	test   %esi,%esi
    2d89:	jns    2d94 <deflate+0x44>
    2d8b:	mov    $0xfffffffffffffffe,%rax
    2d92:	leaveq 
    2d93:	retq   
    2d94:	mov    -0x78(%rbp),%rdi
    2d98:	mov    0x38(%rdi),%r8
    2d9c:	mov    0x1523d(%rip),%rdx        # 17fe0 <z_errmsg@@Base+0x238>
    2da3:	mov    0x18(%rdi),%rax
    2da7:	test   %rax,%rax
    2daa:	je     2e0f <deflate+0xbf>
    2dac:	mov    0x8(%rdi),%eax
    2daf:	test   %eax,%eax
    2db1:	jne    2e07 <deflate+0xb7>
    2db3:	movslq 0x8(%r8),%rax
    2db7:	cmp    $0x29a,%eax
    2dbc:	je     2e20 <deflate+0xd0>
    2dbe:	mov    $0xfffffffffffffffb,%rcx
    2dc5:	mov    0x20(%rdi),%eax
    2dc8:	test   %eax,%eax
    2dca:	je     2e27 <deflate+0xd7>
    2dcc:	movslq 0x4c(%r8),%r9
    2dd0:	mov    %esi,0x4c(%r8)
    2dd4:	xor    %eax,%eax
    2dd6:	mov    %rax,-0x70(%rbp)
    2dda:	mov    0x28(%r8),%r10
    2dde:	test   %r10,%r10
    2de1:	jne    2e34 <deflate+0xe4>
    2de3:	mov    0x8(%rdi),%r10d
    2de7:	test   %r10d,%r10d
    2dea:	jne    2e7c <deflate+0x12c>
    2df0:	mov    $0x9,%r10d
    2df6:	cmp    $0x4,%esi
    2df9:	jg     2f45 <deflate+0x1f5>
    2dff:	mov    %rax,%r11
    2e02:	jmpq   2f48 <deflate+0x1f8>
    2e07:	mov    (%rdi),%rax
    2e0a:	test   %rax,%rax
    2e0d:	jne    2db3 <deflate+0x63>
    2e0f:	mov    0x20(%rdx),%rax
    2e13:	mov    %rax,0x30(%rdi)
    2e17:	mov    $0xfffffffffffffffe,%rax
    2e1e:	leaveq 
    2e1f:	retq   
    2e20:	cmp    $0x4,%esi
    2e23:	jne    2e0f <deflate+0xbf>
    2e25:	jmp    2dbe <deflate+0x6e>
    2e27:	mov    0x38(%rdx),%rax
    2e2b:	mov    %rax,0x30(%rdi)
    2e2f:	mov    %rcx,%rax
    2e32:	leaveq 
    2e33:	retq   
    2e34:	mov    %rdi,%rax
    2e37:	mov    %r14,-0x48(%rbp)
    2e3b:	mov    %r15,-0x68(%rbp)
    2e3f:	mov    %rdx,-0x10(%rbp)
    2e43:	mov    %r8,%r14
    2e46:	mov    %rdi,%r15
    2e49:	mov    %rax,%rdi
    2e4c:	callq  6f40 <flush_pending>
    2e51:	mov    0x20(%r15),%eax
    2e55:	test   %eax,%eax
    2e57:	je     2f7d <deflate+0x22d>
    2e5d:	mov    %r15,%rdi
    2e60:	mov    %r14,%r8
    2e63:	mov    $0xfffffffffffffffb,%rcx
    2e6a:	xor    %eax,%eax
    2e6c:	mov    -0x10(%rbp),%rdx
    2e70:	mov    -0x68(%rbp),%r15
    2e74:	mov    -0x48(%rbp),%r14
    2e78:	mov    -0x80(%rbp),%rsi
    2e7c:	movslq 0x8(%r8),%r9
    2e80:	cmp    $0x29a,%r9d
    2e87:	je     2f91 <deflate+0x241>
    2e8d:	movslq 0x8(%r8),%rcx
    2e91:	cmp    $0x2a,%ecx
    2e94:	je     2fab <deflate+0x25b>
    2e9a:	mov    $0x1,%ecx
    2e9f:	mov    %rcx,-0x68(%rbp)
    2ea3:	movslq 0x8(%r8),%rdx
    2ea7:	cmp    $0x39,%edx
    2eaa:	je     2fde <deflate+0x28e>
    2eb0:	movslq 0x8(%r8),%rdx
    2eb4:	cmp    $0x45,%edx
    2eb7:	je     3082 <deflate+0x332>
    2ebd:	movslq 0x8(%r8),%rdx
    2ec1:	cmp    $0x49,%edx
    2ec4:	je     30a0 <deflate+0x350>
    2eca:	movslq 0x8(%r8),%rdx
    2ece:	cmp    $0x5b,%edx
    2ed1:	je     30be <deflate+0x36e>
    2ed7:	movslq 0x8(%r8),%rdx
    2edb:	cmp    $0x67,%edx
    2ede:	je     30dc <deflate+0x38c>
    2ee4:	mov    0x8(%rdi),%edx
    2ee7:	test   %edx,%edx
    2ee9:	je     3138 <deflate+0x3e8>
    2eef:	movslq 0xc4(%r8),%rax
    2ef6:	test   %eax,%eax
    2ef8:	je     315a <deflate+0x40a>
    2efe:	movslq 0xc8(%r8),%rcx
    2f05:	cmp    $0x2,%ecx
    2f08:	je     31ba <deflate+0x46a>
    2f0e:	cmp    $0x3,%ecx
    2f11:	je     31db <deflate+0x48b>
    2f17:	lea    0x14d8a(%rip),%rcx        # 17ca8 <configuration_table>
    2f1e:	shl    $0x4,%rax
    2f22:	mov    %r8,%rdx
    2f25:	mov    %r14,-0x28(%rbp)
    2f29:	mov    %r15,-0x48(%rbp)
    2f2d:	mov    %r8,%r14
    2f30:	mov    %rdi,%r15
    2f33:	mov    %rdx,%rdi
    2f36:	callq  *0x8(%rcx,%rax,1)
    2f3a:	mov    %r15,%rdi
    2f3d:	mov    %r14,%r8
    2f40:	jmpq   3179 <deflate+0x429>
    2f45:	mov    %r10,%r11
    2f48:	cmp    $0x4,%r9d
    2f4c:	jg     2f51 <deflate+0x201>
    2f4e:	mov    %rax,%r10
    2f51:	add    %r9d,%r9d
    2f54:	sub    %r10d,%r9d
    2f57:	lea    (%rsi,%rsi,1),%r10d
    2f5b:	sub    %r11d,%r10d
    2f5e:	cmp    %r10d,%r9d
    2f61:	jl     2e7c <deflate+0x12c>
    2f67:	cmp    $0x4,%esi
    2f6a:	je     2e7c <deflate+0x12c>
    2f70:	mov    0x38(%rdx),%rax
    2f74:	mov    %rax,0x30(%rdi)
    2f78:	mov    %rcx,%rax
    2f7b:	leaveq 
    2f7c:	retq   
    2f7d:	movl   $0xffffffff,0x4c(%r14)
    2f85:	xor    %eax,%eax
    2f87:	mov    -0x68(%rbp),%r15
    2f8b:	mov    -0x48(%rbp),%r14
    2f8f:	leaveq 
    2f90:	retq   
    2f91:	mov    0x8(%rdi),%r9d
    2f95:	test   %r9d,%r9d
    2f98:	je     2e8d <deflate+0x13d>
    2f9e:	mov    0x38(%rdx),%rax
    2fa2:	mov    %rax,0x30(%rdi)
    2fa6:	mov    %rcx,%rax
    2fa9:	leaveq 
    2faa:	retq   
    2fab:	mov    0x54(%r8),%ecx
    2faf:	movslq 0xc8(%r8),%rdx
    2fb6:	cmp    $0x1,%edx
    2fb9:	jle    31ff <deflate+0x4af>
    2fbf:	shl    $0xc,%ecx
    2fc2:	add    %eax,%ecx
    2fc4:	mov    0xac(%r8),%eax
    2fcb:	test   %eax,%eax
    2fcd:	jne    3222 <deflate+0x4d2>
    2fd3:	add    $0xffff8800,%ecx
    2fd9:	jmpq   3228 <deflate+0x4d8>
    2fde:	mov    %rax,%rsi
    2fe1:	mov    %rax,%rdx
    2fe4:	mov    %r14,-0x40(%rbp)
    2fe8:	mov    %r15,-0x60(%rbp)
    2fec:	mov    %rdi,%r14
    2fef:	mov    %rax,%rdi
    2ff2:	mov    %r8,%r15
    2ff5:	callq  20d0 <crc32@plt>
    2ffa:	mov    %rax,0x60(%r14)
    2ffe:	mov    0x28(%r15),%rcx
    3002:	lea    0x1(%rcx),%rax
    3006:	mov    %rax,0x28(%r15)
    300a:	mov    0x10(%r15),%rax
    300e:	movb   $0x1f,(%rcx,%rax,1)
    3012:	mov    0x28(%r15),%rcx
    3016:	lea    0x1(%rcx),%rax
    301a:	mov    %rax,0x28(%r15)
    301e:	mov    0x10(%r15),%rax
    3022:	movb   $0x8b,(%rcx,%rax,1)
    3026:	mov    0x28(%r15),%rcx
    302a:	lea    0x1(%rcx),%rax
    302e:	mov    %rax,0x28(%r15)
    3032:	mov    0x10(%r15),%rax
    3036:	movb   $0x8,(%rcx,%rax,1)
    303a:	mov    $0x2,%eax
    303f:	mov    $0x4,%r11d
    3045:	mov    0x38(%r15),%r10
    3049:	test   %r10,%r10
    304c:	je     32d1 <deflate+0x581>
    3052:	mov    0x28(%r15),%r8
    3056:	lea    0x1(%r8),%rcx
    305a:	mov    %rcx,0x28(%r15)
    305e:	mov    0x10(%r15),%r9
    3062:	movslq (%r10),%rcx
    3065:	test   %ecx,%ecx
    3067:	je     306f <deflate+0x31f>
    3069:	pushq  -0x68(%rbp)
    306c:	popq   -0x70(%rbp)
    306f:	movslq 0x44(%r10),%rcx
    3073:	test   %ecx,%ecx
    3075:	jne    33a7 <deflate+0x657>
    307b:	xor    %edi,%edi
    307d:	jmpq   33aa <deflate+0x65a>
    3082:	mov    0x38(%r8),%r9
    3086:	mov    0x18(%r9),%rdx
    308a:	test   %rdx,%rdx
    308d:	jne    33bf <deflate+0x66f>
    3093:	movl   $0x49,0x8(%r8)
    309b:	jmpq   2ebd <deflate+0x16d>
    30a0:	mov    0x38(%r8),%rdx
    30a4:	mov    0x28(%rdx),%rdx
    30a8:	test   %rdx,%rdx
    30ab:	jne    33eb <deflate+0x69b>
    30b1:	movl   $0x5b,0x8(%r8)
    30b9:	jmpq   2eca <deflate+0x17a>
    30be:	mov    0x38(%r8),%rdx
    30c2:	mov    0x38(%rdx),%rdx
    30c6:	test   %rdx,%rdx
    30c9:	jne    34ff <deflate+0x7af>
    30cf:	movl   $0x67,0x8(%r8)
    30d7:	jmpq   2ed7 <deflate+0x187>
    30dc:	mov    0x38(%r8),%rcx
    30e0:	movslq 0x44(%rcx),%rcx
    30e4:	test   %ecx,%ecx
    30e6:	jne    35dd <deflate+0x88d>
    30ec:	movl   $0x71,0x8(%r8)
    30f4:	mov    %rdi,%rax
    30f7:	mov    %r14,-0x28(%rbp)
    30fb:	mov    %r15,-0x48(%rbp)
    30ff:	mov    %r8,%r14
    3102:	mov    %rdi,%r15
    3105:	mov    %rax,%rdi
    3108:	callq  6f40 <flush_pending>
    310d:	mov    0x28(%r14),%rax
    3111:	test   %rax,%rax
    3114:	jne    3657 <deflate+0x907>
    311a:	mov    %r15,%rdi
    311d:	mov    %r14,%r8
    3120:	mov    $0x1,%ecx
    3125:	xor    %eax,%eax
    3127:	mov    -0x48(%rbp),%r15
    312b:	mov    -0x28(%rbp),%r14
    312f:	mov    -0x80(%rbp),%rsi
    3133:	jmpq   2ee4 <deflate+0x194>
    3138:	mov    0xb4(%r8),%edx
    313f:	test   %edx,%edx
    3141:	jne    2eef <deflate+0x19f>
    3147:	test   %esi,%esi
    3149:	jg     366b <deflate+0x91b>
    314f:	cmp    $0x4,%esi
    3152:	je     3680 <deflate+0x930>
    3158:	leaveq 
    3159:	retq   
    315a:	mov    %r8,%rax
    315d:	mov    %r14,-0x28(%rbp)
    3161:	mov    %r15,-0x48(%rbp)
    3165:	mov    %rdi,%r14
    3168:	mov    %rax,%rdi
    316b:	mov    %r8,%r15
    316e:	callq  5230 <deflate_stored>
    3173:	mov    %r14,%rdi
    3176:	mov    %r15,%r8
    3179:	cmp    $0x2,%eax
    317c:	je     3183 <deflate+0x433>
    317e:	cmp    $0x3,%eax
    3181:	jne    318b <deflate+0x43b>
    3183:	movl   $0x29a,0x8(%r8)
    318b:	test   %eax,%eax
    318d:	je     3691 <deflate+0x941>
    3193:	cmp    $0x2,%eax
    3196:	je     3691 <deflate+0x941>
    319c:	cmp    $0x1,%eax
    319f:	je     36a8 <deflate+0x958>
    31a5:	mov    $0x1,%ecx
    31aa:	xor    %eax,%eax
    31ac:	mov    -0x48(%rbp),%r15
    31b0:	mov    -0x28(%rbp),%r14
    31b4:	mov    -0x80(%rbp),%rsi
    31b8:	jmp    314f <deflate+0x3ff>
    31ba:	mov    %r8,%rax
    31bd:	mov    %r14,-0x28(%rbp)
    31c1:	mov    %r15,-0x48(%rbp)
    31c5:	mov    %r8,%r14
    31c8:	mov    %rdi,%r15
    31cb:	mov    %rax,%rdi
    31ce:	callq  6b80 <deflate_huff>
    31d3:	mov    %r15,%rdi
    31d6:	mov    %r14,%r8
    31d9:	jmp    3179 <deflate+0x429>
    31db:	mov    %r8,%rax
    31de:	mov    %r14,-0x28(%rbp)
    31e2:	mov    %r15,-0x48(%rbp)
    31e6:	mov    %r8,%r14
    31e9:	mov    %rdi,%r15
    31ec:	mov    %rax,%rdi
    31ef:	callq  6640 <deflate_rle>
    31f4:	mov    %r15,%rdi
    31f7:	mov    %r14,%r8
    31fa:	jmpq   3179 <deflate+0x429>
    31ff:	movslq 0xc4(%r8),%rdx
    3206:	cmp    $0x1,%edx
    3209:	jle    2fbf <deflate+0x26f>
    320f:	cmp    $0x5,%edx
    3212:	jg     36f9 <deflate+0x9a9>
    3218:	mov    $0x40,%eax
    321d:	jmpq   2fbf <deflate+0x26f>
    3222:	add    $0xffff8820,%ecx
    3228:	lea    0x1(%rcx),%edx
    322b:	mov    $0x42108421,%eax
    3230:	mul    %edx
    3232:	shr    $0x3,%edx
    3235:	mov    %rdx,%rax
    3238:	shl    $0x5,%eax
    323b:	sub    %eax,%edx
    323d:	add    %ecx,%edx
    323f:	mov    $0x1f,%eax
    3244:	sub    %edx,%eax
    3246:	lea    (%rax,%rcx,1),%esi
    3249:	mov    %r8,%rax
    324c:	mov    %r14,-0x40(%rbp)
    3250:	mov    %r15,-0x60(%rbp)
    3254:	mov    %rdi,%r14
    3257:	mov    %rax,%rdi
    325a:	mov    %r8,%r15
    325d:	callq  6f00 <putShortMSB>
    3262:	mov    0xac(%r15),%eax
    3269:	test   %eax,%eax
    326b:	je     328a <deflate+0x53a>
    326d:	mov    0x60(%r14),%rsi
    3271:	shr    $0x10,%rsi
    3275:	mov    %r15,%rdi
    3278:	callq  6f00 <putShortMSB>
    327d:	movzwl 0x60(%r14),%esi
    3282:	mov    %r15,%rdi
    3285:	callq  6f00 <putShortMSB>
    328a:	xor    %edi,%edi
    328c:	mov    %rdi,%rsi
    328f:	mov    %rdi,%rdx
    3292:	callq  2230 <adler32@plt>
    3297:	mov    %rax,0x60(%r14)
    329b:	movl   $0x71,0x8(%r15)
    32a3:	mov    %r14,%rdi
    32a6:	callq  6f40 <flush_pending>
    32ab:	mov    0x28(%r15),%rax
    32af:	test   %rax,%rax
    32b2:	jne    370c <deflate+0x9bc>
    32b8:	mov    %r14,%rdi
    32bb:	mov    %r15,%r8
    32be:	xor    %eax,%eax
    32c0:	mov    -0x60(%rbp),%r15
    32c4:	mov    -0x40(%rbp),%r14
    32c8:	mov    -0x80(%rbp),%rsi
    32cc:	jmpq   2e9a <deflate+0x14a>
    32d1:	mov    0x28(%r15),%rcx
    32d5:	lea    0x1(%rcx),%rdx
    32d9:	mov    %rdx,0x28(%r15)
    32dd:	mov    0x10(%r15),%rdx
    32e1:	movb   $0x0,(%rcx,%rdx,1)
    32e5:	mov    0x28(%r15),%rdx
    32e9:	lea    0x1(%rdx),%rcx
    32ed:	mov    %rcx,0x28(%r15)
    32f1:	mov    0x10(%r15),%rcx
    32f5:	movb   $0x0,(%rdx,%rcx,1)
    32f9:	mov    0x28(%r15),%rdx
    32fd:	lea    0x1(%rdx),%rcx
    3301:	mov    %rcx,0x28(%r15)
    3305:	mov    0x10(%r15),%rcx
    3309:	movb   $0x0,(%rdx,%rcx,1)
    330d:	mov    0x28(%r15),%rdx
    3311:	lea    0x1(%rdx),%rcx
    3315:	mov    %rcx,0x28(%r15)
    3319:	mov    0x10(%r15),%rcx
    331d:	movb   $0x0,(%rdx,%rcx,1)
    3321:	mov    0x28(%r15),%rdx
    3325:	lea    0x1(%rdx),%rcx
    3329:	mov    %rcx,0x28(%r15)
    332d:	mov    0x10(%r15),%rcx
    3331:	movb   $0x0,(%rdx,%rcx,1)
    3335:	mov    0x10(%r15),%rsi
    3339:	mov    0x28(%r15),%rdx
    333d:	lea    0x1(%rdx),%rcx
    3341:	mov    %rcx,0x28(%r15)
    3345:	movslq 0xc4(%r15),%rcx
    334c:	cmp    $0x9,%ecx
    334f:	jne    3720 <deflate+0x9d0>
    3355:	mov    %al,(%rsi,%rdx,1)
    3358:	mov    0x28(%r15),%rcx
    335c:	lea    0x1(%rcx),%rax
    3360:	mov    %rax,0x28(%r15)
    3364:	mov    0x10(%r15),%rax
    3368:	movb   $0x3,(%rcx,%rax,1)
    336c:	movl   $0x71,0x8(%r15)
    3374:	mov    %r14,%rdi
    3377:	callq  6f40 <flush_pending>
    337c:	mov    0x28(%r15),%rax
    3380:	test   %rax,%rax
    3383:	jne    3738 <deflate+0x9e8>
    3389:	mov    %r14,%rdi
    338c:	mov    %r15,%r8
    338f:	mov    $0x1,%ecx
    3394:	xor    %eax,%eax
    3396:	mov    -0x60(%rbp),%r15
    339a:	mov    -0x40(%rbp),%r14
    339e:	mov    -0x80(%rbp),%rsi
    33a2:	jmpq   2eb0 <deflate+0x160>
    33a7:	mov    %rax,%rdi
    33aa:	mov    0x18(%r10),%rcx
    33ae:	test   %rcx,%rcx
    33b1:	je     374c <deflate+0x9fc>
    33b7:	mov    %r11,%rsi
    33ba:	jmpq   374e <deflate+0x9fe>
    33bf:	mov    0x28(%r8),%rdx
    33c3:	movzwl 0x20(%r9),%r9d
    33c8:	mov    0x40(%r8),%ecx
    33cc:	sub    %ecx,%r9d
    33cf:	mov    %r14,-0x38(%rbp)
    33d3:	mov    %r15,-0x58(%rbp)
    33d7:	mov    %rbx,-0x8(%rbp)
    33db:	mov    %r12,-0x10(%rbp)
    33df:	mov    %r13,-0x20(%rbp)
    33e3:	mov    %rdx,%r15
    33e6:	jmpq   37ef <deflate+0xa9f>
    33eb:	mov    0x28(%r8),%rcx
    33ef:	mov    %r14,-0x38(%rbp)
    33f3:	mov    %r15,-0x58(%rbp)
    33f7:	mov    %r13,-0x20(%rbp)
    33fb:	mov    0x28(%r8),%rdx
    33ff:	mov    0x18(%r8),%rsi
    3403:	cmp    %rdx,%rsi
    3406:	jne    3469 <deflate+0x719>
    3408:	mov    0x38(%r8),%rsi
    340c:	movslq 0x44(%rsi),%rsi
    3410:	test   %esi,%esi
    3412:	je     3442 <deflate+0x6f2>
    3414:	cmp    %rdx,%rcx
    3417:	jae    3442 <deflate+0x6f2>
    3419:	mov    %rcx,%rsi
    341c:	add    0x10(%r8),%rsi
    3420:	sub    %rcx,%rdx
    3423:	mov    %rax,%r13
    3426:	mov    %r8,%r14
    3429:	mov    %rdi,%r15
    342c:	mov    0x60(%r15),%rdi
    3430:	callq  20d0 <crc32@plt>
    3435:	mov    %rax,0x60(%r15)
    3439:	mov    %r13,%rax
    343c:	mov    %r15,%rdi
    343f:	mov    %r14,%r8
    3442:	mov    %rax,%r13
    3445:	mov    %r8,%r14
    3448:	mov    %rdi,%r15
    344b:	callq  6f40 <flush_pending>
    3450:	mov    0x28(%r14),%rax
    3454:	test   %rax,%rax
    3457:	jne    3876 <deflate+0xb26>
    345d:	mov    %r13,%rcx
    3460:	mov    %r15,%rdi
    3463:	mov    %r14,%r8
    3466:	mov    %rcx,%rax
    3469:	mov    0x40(%r8),%r11
    346d:	lea    0x1(%r11),%r9
    3471:	mov    0x28(%r8),%rsi
    3475:	lea    0x1(%rsi),%rdx
    3479:	mov    0x38(%r8),%r10
    347d:	mov    0x28(%r10),%r10
    3481:	mov    %r9,0x40(%r8)
    3485:	movzbl (%r11,%r10,1),%r9d
    348a:	mov    %rdx,0x28(%r8)
    348e:	mov    0x10(%r8),%rdx
    3492:	mov    %r9b,(%rsi,%rdx,1)
    3496:	test   %r9b,%r9b
    3499:	jne    33fb <deflate+0x6ab>
    349f:	mov    0x38(%r8),%rdx
    34a3:	movslq 0x44(%rdx),%rdx
    34a7:	test   %edx,%edx
    34a9:	je     34dd <deflate+0x78d>
    34ab:	mov    0x28(%r8),%rdx
    34af:	cmp    %rdx,%rcx
    34b2:	jae    34dd <deflate+0x78d>
    34b4:	mov    %rcx,%rsi
    34b7:	add    0x10(%r8),%rsi
    34bb:	sub    %rcx,%rdx
    34be:	mov    %rax,%r13
    34c1:	mov    %r8,%r14
    34c4:	mov    %rdi,%r15
    34c7:	mov    0x60(%r15),%rdi
    34cb:	callq  20d0 <crc32@plt>
    34d0:	mov    %rax,0x60(%r15)
    34d4:	mov    %r13,%rax
    34d7:	mov    %r15,%rdi
    34da:	mov    %r14,%r8
    34dd:	movq   $0x0,0x40(%r8)
    34e5:	mov    -0x20(%rbp),%r13
    34e9:	mov    $0x1,%ecx
    34ee:	mov    -0x58(%rbp),%r15
    34f2:	mov    -0x38(%rbp),%r14
    34f6:	mov    -0x80(%rbp),%rsi
    34fa:	jmpq   30b1 <deflate+0x361>
    34ff:	mov    0x28(%r8),%rcx
    3503:	mov    %r14,-0x30(%rbp)
    3507:	mov    %r15,-0x50(%rbp)
    350b:	mov    %r13,-0x18(%rbp)
    350f:	mov    0x28(%r8),%rdx
    3513:	mov    0x18(%r8),%rsi
    3517:	cmp    %rdx,%rsi
    351a:	jne    357d <deflate+0x82d>
    351c:	mov    0x38(%r8),%rsi
    3520:	movslq 0x44(%rsi),%rsi
    3524:	test   %esi,%esi
    3526:	je     3556 <deflate+0x806>
    3528:	cmp    %rdx,%rcx
    352b:	jae    3556 <deflate+0x806>
    352d:	mov    %rcx,%rsi
    3530:	add    0x10(%r8),%rsi
    3534:	sub    %rcx,%rdx
    3537:	mov    %rax,%r13
    353a:	mov    %r8,%r14
    353d:	mov    %rdi,%r15
    3540:	mov    0x60(%r15),%rdi
    3544:	callq  20d0 <crc32@plt>
    3549:	mov    %rax,0x60(%r15)
    354d:	mov    %r13,%rax
    3550:	mov    %r15,%rdi
    3553:	mov    %r14,%r8
    3556:	mov    %r8,%r13
    3559:	mov    %rax,%r14
    355c:	mov    %rdi,%r15
    355f:	callq  6f40 <flush_pending>
    3564:	mov    0x28(%r13),%rax
    3568:	test   %rax,%rax
    356b:	jne    388f <deflate+0xb3f>
    3571:	mov    %r14,%rcx
    3574:	mov    %r15,%rdi
    3577:	mov    %r13,%r8
    357a:	mov    %rcx,%rax
    357d:	mov    0x40(%r8),%r11
    3581:	lea    0x1(%r11),%r9
    3585:	mov    0x28(%r8),%rsi
    3589:	lea    0x1(%rsi),%rdx
    358d:	mov    0x38(%r8),%r10
    3591:	mov    0x38(%r10),%r10
    3595:	mov    %r9,0x40(%r8)
    3599:	movzbl (%r11,%r10,1),%r9d
    359e:	mov    %rdx,0x28(%r8)
    35a2:	mov    0x10(%r8),%rdx
    35a6:	mov    %r9b,(%rsi,%rdx,1)
    35aa:	test   %r9b,%r9b
    35ad:	jne    350f <deflate+0x7bf>
    35b3:	mov    0x38(%r8),%rdx
    35b7:	movslq 0x44(%rdx),%rdx
    35bb:	test   %edx,%edx
    35bd:	jne    38a8 <deflate+0xb58>
    35c3:	mov    -0x18(%rbp),%r13
    35c7:	mov    $0x1,%ecx
    35cc:	mov    -0x50(%rbp),%r15
    35d0:	mov    -0x30(%rbp),%r14
    35d4:	mov    -0x80(%rbp),%rsi
    35d8:	jmpq   30cf <deflate+0x37f>
    35dd:	mov    0x18(%r8),%rdx
    35e1:	mov    0x28(%r8),%rcx
    35e5:	add    $0x2,%rcx
    35e9:	cmp    %rcx,%rdx
    35ec:	jb     38cf <deflate+0xb7f>
    35f2:	mov    0x28(%r8),%rsi
    35f6:	lea    0x1(%rsi),%rcx
    35fa:	mov    %rcx,0x28(%r8)
    35fe:	movzbl 0x60(%rdi),%edx
    3602:	mov    0x10(%r8),%rcx
    3606:	mov    %dl,(%rsi,%rcx,1)
    3609:	mov    0x28(%r8),%rsi
    360d:	lea    0x1(%rsi),%rcx
    3611:	mov    %rcx,0x28(%r8)
    3615:	mov    0x60(%rdi),%rcx
    3619:	shr    $0x8,%rcx
    361d:	mov    0x10(%r8),%rdx
    3621:	mov    %cl,(%rsi,%rdx,1)
    3624:	mov    %rax,%rsi
    3627:	mov    %rax,%rdx
    362a:	mov    %r14,-0x30(%rbp)
    362e:	mov    %r15,-0x78(%rbp)
    3632:	mov    %r8,%r14
    3635:	mov    %rdi,%r15
    3638:	mov    %rax,%rdi
    363b:	callq  20d0 <crc32@plt>
    3640:	mov    %rax,0x60(%r15)
    3644:	mov    %r15,%rdi
    3647:	mov    %r14,%r8
    364a:	mov    -0x78(%rbp),%r15
    364e:	mov    -0x30(%rbp),%r14
    3652:	jmpq   30ec <deflate+0x39c>
    3657:	movl   $0xffffffff,0x4c(%r14)
    365f:	xor    %eax,%eax
    3661:	mov    -0x48(%rbp),%r15
    3665:	mov    -0x28(%rbp),%r14
    3669:	leaveq 
    366a:	retq   
    366b:	movslq 0x8(%r8),%rdx
    366f:	cmp    $0x29a,%edx
    3675:	jne    2eef <deflate+0x19f>
    367b:	jmpq   314f <deflate+0x3ff>
    3680:	movslq 0x30(%r8),%rax
    3684:	test   %eax,%eax
    3686:	jg     38fa <deflate+0xbaa>
    368c:	mov    %rcx,%rax
    368f:	leaveq 
    3690:	retq   
    3691:	mov    0x20(%rdi),%eax
    3694:	test   %eax,%eax
    3696:	je     3944 <deflate+0xbf4>
    369c:	xor    %eax,%eax
    369e:	mov    -0x48(%rbp),%r15
    36a2:	mov    -0x28(%rbp),%r14
    36a6:	leaveq 
    36a7:	retq   
    36a8:	mov    -0x80(%rbp),%r9
    36ac:	cmp    $0x1,%r9d
    36b0:	je     3958 <deflate+0xc08>
    36b6:	cmp    $0x5,%r9d
    36ba:	je     396c <deflate+0xc1c>
    36c0:	xor    %esi,%esi
    36c2:	mov    %rsi,%rdx
    36c5:	mov    %rsi,%rcx
    36c8:	mov    %r8,%rax
    36cb:	mov    %r13,-0x18(%rbp)
    36cf:	mov    %r9,%r13
    36d2:	mov    %rdi,%r14
    36d5:	mov    %rax,%rdi
    36d8:	mov    %r8,%r15
    36db:	callq  2160 <_tr_stored_block@plt>
    36e0:	cmp    $0x3,%r13d
    36e4:	je     39a1 <deflate+0xc51>
    36ea:	mov    %r14,%rdi
    36ed:	mov    %r15,%r8
    36f0:	mov    -0x18(%rbp),%r13
    36f4:	jmpq   396c <deflate+0xc1c>
    36f9:	cmp    $0x6,%edx
    36fc:	je     39f0 <deflate+0xca0>
    3702:	mov    $0xc0,%eax
    3707:	jmpq   2fbf <deflate+0x26f>
    370c:	movl   $0xffffffff,0x4c(%r15)
    3714:	xor    %eax,%eax
    3716:	mov    -0x60(%rbp),%r15
    371a:	mov    -0x40(%rbp),%r14
    371e:	leaveq 
    371f:	retq   
    3720:	movslq 0xc8(%r15),%rax
    3727:	cmp    $0x1,%eax
    372a:	jle    39fa <deflate+0xcaa>
    3730:	mov    %r11,%rax
    3733:	jmpq   3355 <deflate+0x605>
    3738:	movl   $0xffffffff,0x4c(%r15)
    3740:	xor    %eax,%eax
    3742:	mov    -0x60(%rbp),%r15
    3746:	mov    -0x40(%rbp),%r14
    374a:	leaveq 
    374b:	retq   
    374c:	xor    %esi,%esi
    374e:	mov    0x28(%r10),%rcx
    3752:	test   %rcx,%rcx
    3755:	je     3a0a <deflate+0xcba>
    375b:	mov    $0x8,%edx
    3760:	jmpq   3a0c <deflate+0xcbc>
    3765:	sub    %rcx,%rbx
    3768:	mov    %ebx,%r12d
    376b:	add    0x10(%r8),%rcx
    376f:	mov    0x38(%r8),%rax
    3773:	mov    0x40(%r8),%rsi
    3777:	add    0x18(%rax),%rsi
    377b:	mov    %r12,%rdx
    377e:	mov    %r9,-0x70(%rbp)
    3782:	mov    %rdi,%r13
    3785:	mov    %rcx,%rdi
    3788:	mov    %r8,%r14
    378b:	callq  21f0 <memcpy@plt>
    3790:	mov    0x18(%r14),%rdx
    3794:	mov    %rdx,0x28(%r14)
    3798:	mov    0x38(%r14),%rax
    379c:	movslq 0x44(%rax),%rax
    37a0:	test   %eax,%eax
    37a2:	je     37c0 <deflate+0xa70>
    37a4:	cmp    %r15,%rdx
    37a7:	jbe    37c0 <deflate+0xa70>
    37a9:	mov    %r15,%rsi
    37ac:	add    0x10(%r14),%rsi
    37b0:	sub    %r15,%rdx
    37b3:	mov    0x60(%r13),%rdi
    37b7:	callq  20d0 <crc32@plt>
    37bc:	mov    %rax,0x60(%r13)
    37c0:	add    0x40(%r14),%r12
    37c4:	mov    %r12,0x40(%r14)
    37c8:	mov    %r13,%rdi
    37cb:	callq  6f40 <flush_pending>
    37d0:	mov    0x28(%r14),%rax
    37d4:	test   %rax,%rax
    37d7:	jne    3a23 <deflate+0xcd3>
    37dd:	mov    -0x70(%rbp),%r9
    37e1:	sub    %ebx,%r9d
    37e4:	mov    %r13,%rdi
    37e7:	mov    %r14,%r8
    37ea:	xor    %eax,%eax
    37ec:	mov    %rax,%r15
    37ef:	mov    0x28(%r8),%rcx
    37f3:	mov    %r9d,%r12d
    37f6:	lea    (%rcx,%r12,1),%rdx
    37fa:	mov    0x18(%r8),%rbx
    37fe:	cmp    %rdx,%rbx
    3801:	jb     3765 <deflate+0xa15>
    3807:	add    0x10(%r8),%rcx
    380b:	mov    0x38(%r8),%rdx
    380f:	mov    0x40(%r8),%rsi
    3813:	add    0x18(%rdx),%rsi
    3817:	mov    %rdi,%rbx
    381a:	mov    %rcx,%rdi
    381d:	mov    %r8,%r13
    3820:	mov    %rax,%r14
    3823:	mov    %r12,%rdx
    3826:	callq  21f0 <memcpy@plt>
    382b:	add    0x28(%r13),%r12
    382f:	mov    %r12,0x28(%r13)
    3833:	mov    0x38(%r13),%rax
    3837:	movslq 0x44(%rax),%rax
    383b:	test   %eax,%eax
    383d:	jne    3a43 <deflate+0xcf3>
    3843:	mov    %r14,%rax
    3846:	mov    %rbx,%rdi
    3849:	mov    %r13,%r8
    384c:	movq   $0x0,0x40(%r8)
    3854:	mov    -0x20(%rbp),%r13
    3858:	mov    -0x10(%rbp),%r12
    385c:	mov    -0x8(%rbp),%rbx
    3860:	mov    $0x1,%ecx
    3865:	mov    -0x58(%rbp),%r15
    3869:	mov    -0x38(%rbp),%r14
    386d:	mov    -0x80(%rbp),%rsi
    3871:	jmpq   3093 <deflate+0x343>
    3876:	movl   $0xffffffff,0x4c(%r14)
    387e:	mov    %r13,%rax
    3881:	mov    -0x20(%rbp),%r13
    3885:	mov    -0x58(%rbp),%r15
    3889:	mov    -0x38(%rbp),%r14
    388d:	leaveq 
    388e:	retq   
    388f:	movl   $0xffffffff,0x4c(%r13)
    3897:	mov    %r14,%rax
    389a:	mov    -0x18(%rbp),%r13
    389e:	mov    -0x50(%rbp),%r15
    38a2:	mov    -0x30(%rbp),%r14
    38a6:	leaveq 
    38a7:	retq   
    38a8:	mov    0x28(%r8),%rdx
    38ac:	cmp    %rdx,%rcx
    38af:	jb     3a5a <deflate+0xd0a>
    38b5:	mov    -0x18(%rbp),%r13
    38b9:	mov    $0x1,%ecx
    38be:	mov    -0x50(%rbp),%r15
    38c2:	mov    -0x30(%rbp),%r14
    38c6:	mov    -0x80(%rbp),%rsi
    38ca:	jmpq   30cf <deflate+0x37f>
    38cf:	mov    %r15,-0x50(%rbp)
    38d3:	mov    %r8,%r15
    38d6:	callq  6f40 <flush_pending>
    38db:	mov    0x28(%r15),%rax
    38df:	test   %rax,%rax
    38e2:	jne    3a9d <deflate+0xd4d>
    38e8:	mov    %r15,%r8
    38eb:	xor    %eax,%eax
    38ed:	mov    -0x50(%rbp),%r15
    38f1:	mov    -0x78(%rbp),%rdi
    38f5:	jmpq   35f2 <deflate+0x8a2>
    38fa:	cmp    $0x2,%eax
    38fd:	je     3aad <deflate+0xd5d>
    3903:	mov    0x60(%rdi),%rsi
    3907:	shr    $0x10,%rsi
    390b:	mov    %r8,%rax
    390e:	mov    %r14,-0x28(%rbp)
    3912:	mov    %r15,-0x80(%rbp)
    3916:	mov    %rdi,%r14
    3919:	mov    %rax,%rdi
    391c:	mov    %r8,%r15
    391f:	callq  6f00 <putShortMSB>
    3924:	movzwl 0x60(%r14),%esi
    3929:	mov    %r15,%rdi
    392c:	callq  6f00 <putShortMSB>
    3931:	mov    %r14,%rdi
    3934:	mov    %r15,%r8
    3937:	mov    -0x80(%rbp),%r15
    393b:	mov    -0x28(%rbp),%r14
    393f:	jmpq   3b7d <deflate+0xe2d>
    3944:	movl   $0xffffffff,0x4c(%r8)
    394c:	xor    %eax,%eax
    394e:	mov    -0x48(%rbp),%r15
    3952:	mov    -0x28(%rbp),%r14
    3956:	leaveq 
    3957:	retq   
    3958:	mov    %r8,%r14
    395b:	mov    %rdi,%r15
    395e:	mov    %r14,%rdi
    3961:	callq  22e0 <_tr_align@plt>
    3966:	mov    %r15,%rdi
    3969:	mov    %r14,%r8
    396c:	mov    %r8,%r14
    396f:	mov    %rdi,%r15
    3972:	callq  6f40 <flush_pending>
    3977:	mov    0x20(%r15),%eax
    397b:	test   %eax,%eax
    397d:	je     3bac <deflate+0xe5c>
    3983:	mov    %r15,%rdi
    3986:	mov    %r14,%r8
    3989:	mov    $0x1,%ecx
    398e:	xor    %eax,%eax
    3990:	mov    -0x48(%rbp),%r15
    3994:	mov    -0x28(%rbp),%r14
    3998:	mov    -0x80(%rbp),%rsi
    399c:	jmpq   314f <deflate+0x3ff>
    39a1:	mov    0x78(%r15),%rcx
    39a5:	mov    0x84(%r15),%eax
    39ac:	add    $0xffffffff,%eax
    39af:	mov    %eax,%eax
    39b1:	movw   $0x0,(%rcx,%rax,2)
    39b7:	mov    0x78(%r15),%rdi
    39bb:	mov    0x84(%r15),%eax
    39c2:	add    $0xffffffff,%eax
    39c5:	mov    %eax,%eax
    39c7:	lea    (%rax,%rax,1),%rdx
    39cb:	xor    %esi,%esi
    39cd:	callq  2170 <memset@plt>
    39d2:	mov    0xb4(%r15),%eax
    39d9:	test   %eax,%eax
    39db:	je     3bc0 <deflate+0xe70>
    39e1:	mov    %r14,%rdi
    39e4:	mov    %r15,%r8
    39e7:	mov    -0x18(%rbp),%r13
    39eb:	jmpq   396c <deflate+0xc1c>
    39f0:	mov    $0x80,%eax
    39f5:	jmpq   2fbf <deflate+0x26f>
    39fa:	cmp    $0x1,%ecx
    39fd:	jle    3bf0 <deflate+0xea0>
    3a03:	xor    %eax,%eax
    3a05:	jmpq   3355 <deflate+0x605>
    3a0a:	xor    %edx,%edx
    3a0c:	mov    0x38(%r10),%rcx
    3a10:	test   %rcx,%rcx
    3a13:	je     3bf8 <deflate+0xea8>
    3a19:	mov    $0x10,%ecx
    3a1e:	jmpq   3bfa <deflate+0xeaa>
    3a23:	movl   $0xffffffff,0x4c(%r14)
    3a2b:	mov    -0x20(%rbp),%r13
    3a2f:	mov    -0x10(%rbp),%r12
    3a33:	mov    -0x8(%rbp),%rbx
    3a37:	xor    %eax,%eax
    3a39:	mov    -0x58(%rbp),%r15
    3a3d:	mov    -0x38(%rbp),%r14
    3a41:	leaveq 
    3a42:	retq   
    3a43:	cmp    %r12,%r15
    3a46:	jb     3d16 <deflate+0xfc6>
    3a4c:	mov    %r14,%rax
    3a4f:	mov    %rbx,%rdi
    3a52:	mov    %r13,%r8
    3a55:	jmpq   384c <deflate+0xafc>
    3a5a:	mov    %rcx,%rsi
    3a5d:	add    0x10(%r8),%rsi
    3a61:	sub    %rcx,%rdx
    3a64:	mov    %rax,%r13
    3a67:	mov    %r8,%r14
    3a6a:	mov    %rdi,%r15
    3a6d:	mov    0x60(%r15),%rdi
    3a71:	callq  20d0 <crc32@plt>
    3a76:	mov    %rax,0x60(%r15)
    3a7a:	mov    %r13,%rax
    3a7d:	mov    %r15,%rdi
    3a80:	mov    %r14,%r8
    3a83:	mov    -0x18(%rbp),%r13
    3a87:	mov    $0x1,%ecx
    3a8c:	mov    -0x50(%rbp),%r15
    3a90:	mov    -0x30(%rbp),%r14
    3a94:	mov    -0x80(%rbp),%rsi
    3a98:	jmpq   30cf <deflate+0x37f>
    3a9d:	movl   $0xffffffff,0x4c(%r15)
    3aa5:	xor    %eax,%eax
    3aa7:	mov    -0x50(%rbp),%r15
    3aab:	leaveq 
    3aac:	retq   
    3aad:	mov    0x28(%r8),%rdx
    3ab1:	lea    0x1(%rdx),%rax
    3ab5:	mov    %rax,0x28(%r8)
    3ab9:	movzbl 0x60(%rdi),%ecx
    3abd:	mov    0x10(%r8),%rax
    3ac1:	mov    %cl,(%rdx,%rax,1)
    3ac4:	mov    0x28(%r8),%rdx
    3ac8:	lea    0x1(%rdx),%rax
    3acc:	mov    %rax,0x28(%r8)
    3ad0:	mov    0x60(%rdi),%rax
    3ad4:	shr    $0x8,%rax
    3ad8:	mov    0x10(%r8),%rcx
    3adc:	mov    %al,(%rdx,%rcx,1)
    3adf:	mov    0x28(%r8),%rdx
    3ae3:	lea    0x1(%rdx),%rax
    3ae7:	mov    %rax,0x28(%r8)
    3aeb:	mov    0x60(%rdi),%rax
    3aef:	shr    $0x10,%rax
    3af3:	mov    0x10(%r8),%rcx
    3af7:	mov    %al,(%rdx,%rcx,1)
    3afa:	mov    0x28(%r8),%rdx
    3afe:	lea    0x1(%rdx),%rax
    3b02:	mov    %rax,0x28(%r8)
    3b06:	mov    0x60(%rdi),%rax
    3b0a:	shr    $0x18,%rax
    3b0e:	mov    0x10(%r8),%rcx
    3b12:	mov    %al,(%rdx,%rcx,1)
    3b15:	mov    0x28(%r8),%rdx
    3b19:	lea    0x1(%rdx),%rax
    3b1d:	mov    %rax,0x28(%r8)
    3b21:	movzbl 0x10(%rdi),%ecx
    3b25:	mov    0x10(%r8),%rax
    3b29:	mov    %cl,(%rdx,%rax,1)
    3b2c:	mov    0x28(%r8),%rdx
    3b30:	lea    0x1(%rdx),%rax
    3b34:	mov    %rax,0x28(%r8)
    3b38:	mov    0x10(%rdi),%rax
    3b3c:	shr    $0x8,%rax
    3b40:	mov    0x10(%r8),%rcx
    3b44:	mov    %al,(%rdx,%rcx,1)
    3b47:	mov    0x28(%r8),%rdx
    3b4b:	lea    0x1(%rdx),%rax
    3b4f:	mov    %rax,0x28(%r8)
    3b53:	mov    0x10(%rdi),%rax
    3b57:	shr    $0x10,%rax
    3b5b:	mov    0x10(%r8),%rcx
    3b5f:	mov    %al,(%rdx,%rcx,1)
    3b62:	mov    0x28(%r8),%rdx
    3b66:	lea    0x1(%rdx),%rax
    3b6a:	mov    %rax,0x28(%r8)
    3b6e:	mov    0x10(%rdi),%rax
    3b72:	shr    $0x18,%rax
    3b76:	mov    0x10(%r8),%rcx
    3b7a:	mov    %al,(%rdx,%rcx,1)
    3b7d:	mov    %r15,-0x80(%rbp)
    3b81:	mov    %r8,%r15
    3b84:	callq  6f40 <flush_pending>
    3b89:	movslq 0x30(%r15),%rax
    3b8d:	test   %eax,%eax
    3b8f:	jle    3b97 <deflate+0xe47>
    3b91:	neg    %eax
    3b93:	mov    %eax,0x30(%r15)
    3b97:	mov    0x28(%r15),%rax
    3b9b:	test   %rax,%rax
    3b9e:	je     3d3e <deflate+0xfee>
    3ba4:	xor    %eax,%eax
    3ba6:	mov    -0x80(%rbp),%r15
    3baa:	leaveq 
    3bab:	retq   
    3bac:	movl   $0xffffffff,0x4c(%r14)
    3bb4:	xor    %eax,%eax
    3bb6:	mov    -0x48(%rbp),%r15
    3bba:	mov    -0x28(%rbp),%r14
    3bbe:	leaveq 
    3bbf:	retq   
    3bc0:	mov    %r14,%rdi
    3bc3:	mov    %r15,%r8
    3bc6:	movl   $0x0,0xac(%r8)
    3bd1:	movq   $0x0,0x98(%r8)
    3bdc:	movl   $0x0,0x172c(%r8)
    3be7:	mov    -0x18(%rbp),%r13
    3beb:	jmpq   396c <deflate+0xc1c>
    3bf0:	mov    %r11,%rax
    3bf3:	jmpq   3355 <deflate+0x605>
    3bf8:	xor    %ecx,%ecx
    3bfa:	mov    -0x70(%rbp),%r10
    3bfe:	add    %r10d,%edi
    3c01:	add    %edi,%esi
    3c03:	add    %esi,%edx
    3c05:	add    %edx,%ecx
    3c07:	mov    %cl,(%r9,%r8,1)
    3c0b:	mov    0x28(%r15),%rsi
    3c0f:	lea    0x1(%rsi),%rcx
    3c13:	mov    %rcx,0x28(%r15)
    3c17:	mov    0x38(%r15),%rcx
    3c1b:	movzbl 0x8(%rcx),%edx
    3c1f:	mov    0x10(%r15),%rcx
    3c23:	mov    %dl,(%rsi,%rcx,1)
    3c26:	mov    0x28(%r15),%rsi
    3c2a:	lea    0x1(%rsi),%rcx
    3c2e:	mov    %rcx,0x28(%r15)
    3c32:	mov    0x38(%r15),%rcx
    3c36:	mov    0x8(%rcx),%rcx
    3c3a:	shr    $0x8,%rcx
    3c3e:	mov    0x10(%r15),%rdx
    3c42:	mov    %cl,(%rsi,%rdx,1)
    3c45:	mov    0x28(%r15),%rsi
    3c49:	lea    0x1(%rsi),%rcx
    3c4d:	mov    %rcx,0x28(%r15)
    3c51:	mov    0x38(%r15),%rcx
    3c55:	mov    0x8(%rcx),%rcx
    3c59:	shr    $0x10,%rcx
    3c5d:	mov    0x10(%r15),%rdx
    3c61:	mov    %cl,(%rsi,%rdx,1)
    3c64:	mov    0x28(%r15),%rsi
    3c68:	lea    0x1(%rsi),%rcx
    3c6c:	mov    %rcx,0x28(%r15)
    3c70:	mov    0x38(%r15),%rcx
    3c74:	mov    0x8(%rcx),%rcx
    3c78:	shr    $0x18,%rcx
    3c7c:	mov    0x10(%r15),%rdx
    3c80:	mov    %cl,(%rsi,%rdx,1)
    3c83:	mov    0x10(%r15),%rcx
    3c87:	mov    0x28(%r15),%rsi
    3c8b:	lea    0x1(%rsi),%rdx
    3c8f:	mov    %rdx,0x28(%r15)
    3c93:	movslq 0xc4(%r15),%rdx
    3c9a:	cmp    $0x9,%edx
    3c9d:	jne    3d49 <deflate+0xff9>
    3ca3:	mov    %al,(%rcx,%rsi,1)
    3ca6:	mov    0x28(%r15),%rdx
    3caa:	lea    0x1(%rdx),%rax
    3cae:	mov    %rax,0x28(%r15)
    3cb2:	mov    0x38(%r15),%rax
    3cb6:	movzbl 0x14(%rax),%ecx
    3cba:	mov    0x10(%r15),%rax
    3cbe:	mov    %cl,(%rdx,%rax,1)
    3cc1:	mov    0x38(%r15),%rcx
    3cc5:	mov    0x18(%rcx),%rax
    3cc9:	test   %rax,%rax
    3ccc:	je     3d02 <deflate+0xfb2>
    3cce:	mov    0x28(%r15),%rdx
    3cd2:	lea    0x1(%rdx),%rax
    3cd6:	mov    %rax,0x28(%r15)
    3cda:	movzbl 0x20(%rcx),%ecx
    3cde:	mov    0x10(%r15),%rax
    3ce2:	mov    %cl,(%rdx,%rax,1)
    3ce5:	mov    0x28(%r15),%rdx
    3ce9:	lea    0x1(%rdx),%rax
    3ced:	mov    %rax,0x28(%r15)
    3cf1:	mov    0x38(%r15),%rax
    3cf5:	mov    0x20(%rax),%eax
    3cf8:	shr    $0x8,%eax
    3cfb:	mov    0x10(%r15),%rcx
    3cff:	mov    %al,(%rdx,%rcx,1)
    3d02:	mov    0x38(%r15),%rax
    3d06:	movslq 0x44(%rax),%rax
    3d0a:	test   %eax,%eax
    3d0c:	jne    3d5d <deflate+0x100d>
    3d0e:	mov    %r14,%rdi
    3d11:	mov    %r15,%r8
    3d14:	jmp    3d78 <deflate+0x1028>
    3d16:	mov    %r15,%rsi
    3d19:	add    0x10(%r13),%rsi
    3d1d:	sub    %r15,%r12
    3d20:	mov    %r12,%rdx
    3d23:	mov    0x60(%rbx),%rdi
    3d27:	callq  20d0 <crc32@plt>
    3d2c:	mov    %rax,0x60(%rbx)
    3d30:	mov    %r14,%rax
    3d33:	mov    %rbx,%rdi
    3d36:	mov    %r13,%r8
    3d39:	jmpq   384c <deflate+0xafc>
    3d3e:	mov    $0x1,%eax
    3d43:	mov    -0x80(%rbp),%r15
    3d47:	leaveq 
    3d48:	retq   
    3d49:	movslq 0xc8(%r15),%rax
    3d50:	cmp    $0x1,%eax
    3d53:	jle    3da0 <deflate+0x1050>
    3d55:	mov    %r11,%rax
    3d58:	jmpq   3ca3 <deflate+0xf53>
    3d5d:	mov    0x60(%r14),%rdi
    3d61:	mov    0x10(%r15),%rsi
    3d65:	mov    0x28(%r15),%edx
    3d69:	callq  20d0 <crc32@plt>
    3d6e:	mov    %rax,0x60(%r14)
    3d72:	mov    %r14,%rdi
    3d75:	mov    %r15,%r8
    3d78:	movq   $0x0,0x40(%r8)
    3d80:	movl   $0x45,0x8(%r8)
    3d88:	mov    $0x1,%ecx
    3d8d:	xor    %eax,%eax
    3d8f:	mov    -0x60(%rbp),%r15
    3d93:	mov    -0x40(%rbp),%r14
    3d97:	mov    -0x80(%rbp),%rsi
    3d9b:	jmpq   2eb0 <deflate+0x160>
    3da0:	cmp    $0x1,%edx
    3da3:	jle    3dac <deflate+0x105c>
    3da5:	xor    %eax,%eax
    3da7:	jmpq   3ca3 <deflate+0xf53>
    3dac:	mov    %r11,%rax
    3daf:	jmpq   3ca3 <deflate+0xf53>
    3db4:	data16 nopw %cs:0x0(%rax,%rax,1)
    3dbf:	nop

0000000000003dc0 <deflateEnd>:
    3dc0:	push   %rbp
    3dc1:	mov    %rsp,%rbp
    3dc4:	sub    $0x10,%rsp
    3dc8:	mov    %r15,-0x10(%rbp)
    3dcc:	mov    %r14,%r15
    3dcf:	mov    %r15,-0x8(%rbp)
    3dd3:	mov    %rdi,%r14
    3dd6:	callq  4e70 <deflateStateCheck>
    3ddb:	test   %eax,%eax
    3ddd:	je     3def <deflateEnd+0x2f>
    3ddf:	mov    %r15,%r14
    3de2:	mov    $0xfffffffffffffffe,%rax
    3de9:	mov    -0x10(%rbp),%r15
    3ded:	leaveq 
    3dee:	retq   
    3def:	mov    0x38(%r14),%rax
    3df3:	movslq 0x8(%rax),%r15
    3df7:	mov    0x10(%rax),%rsi
    3dfb:	test   %rsi,%rsi
    3dfe:	je     3e0a <deflateEnd+0x4a>
    3e00:	mov    0x48(%r14),%rax
    3e04:	mov    0x50(%r14),%rdi
    3e08:	callq  *%rax
    3e0a:	mov    0x38(%r14),%rax
    3e0e:	mov    0x78(%rax),%rsi
    3e12:	test   %rsi,%rsi
    3e15:	je     3e21 <deflateEnd+0x61>
    3e17:	mov    0x48(%r14),%rax
    3e1b:	mov    0x50(%r14),%rdi
    3e1f:	callq  *%rax
    3e21:	mov    0x38(%r14),%rax
    3e25:	mov    0x70(%rax),%rsi
    3e29:	test   %rsi,%rsi
    3e2c:	je     3e38 <deflateEnd+0x78>
    3e2e:	mov    0x48(%r14),%rax
    3e32:	mov    0x50(%r14),%rdi
    3e36:	callq  *%rax
    3e38:	mov    0x38(%r14),%rax
    3e3c:	mov    0x60(%rax),%rsi
    3e40:	test   %rsi,%rsi
    3e43:	je     3e4f <deflateEnd+0x8f>
    3e45:	mov    0x48(%r14),%rax
    3e49:	mov    0x50(%r14),%rdi
    3e4d:	callq  *%rax
    3e4f:	mov    0x48(%r14),%rax
    3e53:	mov    0x50(%r14),%rdi
    3e57:	mov    0x38(%r14),%rsi
    3e5b:	callq  *%rax
    3e5d:	movq   $0x0,0x38(%r14)
    3e65:	cmp    $0x71,%r15d
    3e69:	jne    3e7c <deflateEnd+0xbc>
    3e6b:	mov    $0xfffffffffffffffd,%rax
    3e72:	mov    -0x8(%rbp),%r14
    3e76:	mov    -0x10(%rbp),%r15
    3e7a:	leaveq 
    3e7b:	retq   
    3e7c:	xor    %eax,%eax
    3e7e:	mov    -0x8(%rbp),%r14
    3e82:	mov    -0x10(%rbp),%r15
    3e86:	leaveq 
    3e87:	retq   
    3e88:	nopl   0x0(%rax,%rax,1)

0000000000003e90 <deflateSetDictionary>:
    3e90:	push   %rbp
    3e91:	mov    %rsp,%rbp
    3e94:	sub    $0x40,%rsp
    3e98:	mov    %rsi,-0x40(%rbp)
    3e9c:	mov    %rdi,-0x38(%rbp)
    3ea0:	mov    %rdx,-0x30(%rbp)
    3ea4:	callq  4e70 <deflateStateCheck>
    3ea9:	test   %eax,%eax
    3eab:	je     3eb6 <deflateSetDictionary+0x26>
    3ead:	mov    $0xfffffffffffffffe,%rax
    3eb4:	leaveq 
    3eb5:	retq   
    3eb6:	mov    -0x40(%rbp),%rax
    3eba:	test   %rax,%rax
    3ebd:	jne    3ec8 <deflateSetDictionary+0x38>
    3ebf:	mov    $0xfffffffffffffffe,%rax
    3ec6:	leaveq 
    3ec7:	retq   
    3ec8:	mov    -0x38(%rbp),%r10
    3ecc:	mov    0x38(%r10),%r8
    3ed0:	movslq 0x30(%r8),%r9
    3ed4:	cmp    $0x2,%r9d
    3ed8:	jne    3ee3 <deflateSetDictionary+0x53>
    3eda:	mov    $0xfffffffffffffffe,%rax
    3ee1:	leaveq 
    3ee2:	retq   
    3ee3:	cmp    $0x1,%r9d
    3ee7:	jne    3efb <deflateSetDictionary+0x6b>
    3ee9:	movslq 0x8(%r8),%rcx
    3eed:	cmp    $0x2a,%ecx
    3ef0:	je     3efb <deflateSetDictionary+0x6b>
    3ef2:	mov    $0xfffffffffffffffe,%rax
    3ef9:	leaveq 
    3efa:	retq   
    3efb:	mov    0xb4(%r8),%ecx
    3f02:	test   %ecx,%ecx
    3f04:	je     3f0f <deflateSetDictionary+0x7f>
    3f06:	mov    $0xfffffffffffffffe,%rax
    3f0d:	leaveq 
    3f0e:	retq   
    3f0f:	cmp    $0x1,%r9d
    3f13:	je     3f36 <deflateSetDictionary+0xa6>
    3f15:	mov    %r8,%rcx
    3f18:	mov    %rbx,%r8
    3f1b:	mov    %rcx,%rbx
    3f1e:	mov    %r12,%rcx
    3f21:	mov    %r9,%r12
    3f24:	mov    %rcx,%r9
    3f27:	mov    %r13,%rcx
    3f2a:	mov    %r10,%r13
    3f2d:	mov    %rcx,%r10
    3f30:	mov    -0x30(%rbp),%rcx
    3f34:	jmp    3f8a <deflateSetDictionary+0xfa>
    3f36:	mov    0x60(%r10),%rdi
    3f3a:	mov    %rax,%rsi
    3f3d:	mov    -0x30(%rbp),%rcx
    3f41:	mov    %rcx,%rdx
    3f44:	mov    %rbx,-0x10(%rbp)
    3f48:	mov    %r12,-0x18(%rbp)
    3f4c:	mov    %r13,-0x28(%rbp)
    3f50:	mov    %r14,-0x38(%rbp)
    3f54:	mov    %r15,-0x40(%rbp)
    3f58:	mov    %r8,%rbx
    3f5b:	mov    %r9,%r12
    3f5e:	mov    %r10,%r13
    3f61:	mov    %rcx,%r14
    3f64:	mov    %rax,%r15
    3f67:	callq  2230 <adler32@plt>
    3f6c:	mov    %rax,0x60(%r13)
    3f70:	mov    %r15,%rax
    3f73:	mov    %r14,%rcx
    3f76:	mov    -0x40(%rbp),%r15
    3f7a:	mov    -0x38(%rbp),%r14
    3f7e:	mov    -0x28(%rbp),%r10
    3f82:	mov    -0x18(%rbp),%r9
    3f86:	mov    -0x10(%rbp),%r8
    3f8a:	movl   $0x0,0x30(%rbx)
    3f91:	xor    %esi,%esi
    3f93:	mov    0x50(%rbx),%edx
    3f96:	cmp    %ecx,%edx
    3f98:	jbe    3fa5 <deflateSetDictionary+0x115>
    3f9a:	mov    %r14,%rdx
    3f9d:	mov    %r15,%rsi
    3fa0:	jmpq   4040 <deflateSetDictionary+0x1b0>
    3fa5:	test   %r12d,%r12d
    3fa8:	je     3faf <deflateSetDictionary+0x11f>
    3faa:	mov    %rcx,%r11
    3fad:	jmp    402e <deflateSetDictionary+0x19e>
    3faf:	mov    0x78(%rbx),%rdi
    3fb3:	mov    0x84(%rbx),%edx
    3fb9:	add    $0xffffffff,%edx
    3fbc:	mov    %edx,%edx
    3fbe:	movw   $0x0,(%rdi,%rdx,2)
    3fc4:	mov    0x78(%rbx),%rdi
    3fc8:	mov    0x84(%rbx),%edx
    3fce:	add    $0xffffffff,%edx
    3fd1:	mov    %edx,%edx
    3fd3:	add    %rdx,%rdx
    3fd6:	mov    %r8,-0x8(%rbp)
    3fda:	mov    %r9,-0x18(%rbp)
    3fde:	mov    %r10,-0x20(%rbp)
    3fe2:	mov    %r14,-0x30(%rbp)
    3fe6:	mov    %r15,-0x40(%rbp)
    3fea:	mov    %rax,%r14
    3fed:	mov    %rcx,%r15
    3ff0:	callq  2170 <memset@plt>
    3ff5:	movl   $0x0,0xac(%rbx)
    3fff:	movq   $0x0,0x98(%rbx)
    400a:	movl   $0x0,0x172c(%rbx)
    4014:	mov    %r14,%rax
    4017:	mov    %r15,%r11
    401a:	mov    -0x40(%rbp),%r15
    401e:	mov    -0x30(%rbp),%r14
    4022:	mov    -0x20(%rbp),%r10
    4026:	mov    -0x18(%rbp),%r9
    402a:	mov    -0x8(%rbp),%r8
    402e:	mov    0x50(%rbx),%ecx
    4031:	sub    %ecx,%r11d
    4034:	mov    %r11d,%edx
    4037:	add    %rdx,%rax
    403a:	mov    %r14,%rdx
    403d:	mov    %r15,%rsi
    4040:	mov    0x0(%r13),%r14
    4044:	mov    0x8(%r13),%r15d
    4048:	mov    %ecx,0x8(%r13)
    404c:	mov    %rax,0x0(%r13)
    4050:	mov    %rbx,%rdi
    4053:	mov    %r8,-0x8(%rbp)
    4057:	mov    %r9,-0x10(%rbp)
    405b:	mov    %r10,-0x20(%rbp)
    405f:	mov    %rdx,-0x28(%rbp)
    4063:	mov    %rsi,-0x40(%rbp)
    4067:	callq  4f80 <fill_window>
    406c:	jmp    40ea <deflateSetDictionary+0x25a>
    406e:	mov    0xac(%rbx),%esi
    4074:	lea    -0x2(%rcx),%edi
    4077:	lea    0x2(%rsi),%eax
    407a:	mov    %eax,%eax
    407c:	mov    0x60(%rbx),%rcx
    4080:	movzbl (%rax,%rcx,1),%eax
    4084:	mov    0x80(%rbx),%edx
    408a:	mov    0x90(%rbx),%ecx
    4090:	shl    %cl,%edx
    4092:	xor    %edx,%eax
    4094:	and    0x8c(%rbx),%eax
    409a:	mov    %eax,0x80(%rbx)
    40a0:	mov    %eax,%ecx
    40a2:	mov    0x78(%rbx),%rax
    40a6:	movzwl (%rax,%rcx,2),%edx
    40aa:	mov    %rsi,%rax
    40ad:	and    0x58(%rbx),%eax
    40b0:	mov    %eax,%eax
    40b2:	mov    0x70(%rbx),%rcx
    40b6:	mov    %dx,(%rcx,%rax,2)
    40ba:	mov    0x78(%rbx),%rcx
    40be:	mov    0x80(%rbx),%eax
    40c4:	mov    %si,(%rcx,%rax,2)
    40c8:	add    $0x1,%esi
    40cb:	add    $0xffffffff,%edi
    40ce:	test   %edi,%edi
    40d0:	jne    4077 <deflateSetDictionary+0x1e7>
    40d2:	mov    %esi,0xac(%rbx)
    40d8:	movl   $0x2,0xb4(%rbx)
    40e2:	mov    %rbx,%rdi
    40e5:	callq  4f80 <fill_window>
    40ea:	mov    0xb4(%rbx),%ecx
    40f0:	cmp    $0x2,%ecx
    40f3:	ja     406e <deflateSetDictionary+0x1de>
    40f9:	mov    %rcx,%rax
    40fc:	add    0xac(%rbx),%eax
    4102:	mov    %eax,0xac(%rbx)
    4108:	mov    %eax,%eax
    410a:	mov    %rax,0x98(%rbx)
    4111:	mov    %ecx,0x172c(%rbx)
    4117:	movl   $0x0,0xb4(%rbx)
    4121:	movl   $0x2,0xb8(%rbx)
    412b:	movl   $0x2,0xa0(%rbx)
    4135:	movl   $0x0,0xa8(%rbx)
    413f:	mov    %r14,0x0(%r13)
    4143:	mov    %r15d,0x8(%r13)
    4147:	mov    %r12d,0x30(%rbx)
    414b:	xor    %eax,%eax
    414d:	mov    -0x40(%rbp),%r15
    4151:	mov    -0x28(%rbp),%r14
    4155:	mov    -0x20(%rbp),%r13
    4159:	mov    -0x10(%rbp),%r12
    415d:	mov    -0x8(%rbp),%rbx
    4161:	leaveq 
    4162:	retq   
    4163:	data16 nopw %cs:0x0(%rax,%rax,1)
    416e:	xchg   %ax,%ax

0000000000004170 <deflateGetDictionary>:
    4170:	push   %rbp
    4171:	mov    %rsp,%rbp
    4174:	sub    $0x20,%rsp
    4178:	mov    %r15,-0x8(%rbp)
    417c:	mov    %rsi,-0x18(%rbp)
    4180:	mov    %rdx,-0x10(%rbp)
    4184:	mov    %rdi,%r15
    4187:	callq  4e70 <deflateStateCheck>
    418c:	test   %eax,%eax
    418e:	je     419d <deflateGetDictionary+0x2d>
    4190:	mov    $0xfffffffffffffffe,%rax
    4197:	mov    -0x8(%rbp),%r15
    419b:	leaveq 
    419c:	retq   
    419d:	mov    0x38(%r15),%rsi
    41a1:	mov    0xb4(%rsi),%ecx
    41a7:	mov    0xac(%rsi),%eax
    41ad:	lea    (%rcx,%rax,1),%r15d
    41b1:	mov    0x50(%rsi),%edx
    41b4:	cmp    %r15d,%edx
    41b7:	jae    41bc <deflateGetDictionary+0x4c>
    41b9:	mov    %rdx,%r15
    41bc:	mov    -0x18(%rbp),%rdi
    41c0:	test   %rdi,%rdi
    41c3:	jne    41d6 <deflateGetDictionary+0x66>
    41c5:	xor    %eax,%eax
    41c7:	mov    -0x10(%rbp),%rcx
    41cb:	test   %rcx,%rcx
    41ce:	jne    41f0 <deflateGetDictionary+0x80>
    41d0:	mov    -0x8(%rbp),%r15
    41d4:	leaveq 
    41d5:	retq   
    41d6:	test   %r15d,%r15d
    41d9:	je     41c5 <deflateGetDictionary+0x55>
    41db:	add    0x60(%rsi),%rax
    41df:	lea    (%rcx,%rax,1),%rsi
    41e3:	mov    %r15d,%edx
    41e6:	sub    %rdx,%rsi
    41e9:	callq  21f0 <memcpy@plt>
    41ee:	jmp    41c5 <deflateGetDictionary+0x55>
    41f0:	mov    %r15d,(%rcx)
    41f3:	mov    -0x8(%rbp),%r15
    41f7:	leaveq 
    41f8:	retq   
    41f9:	nopl   0x0(%rax)

0000000000004200 <deflateCopy>:
    4200:	push   %rbp
    4201:	mov    %rsp,%rbp
    4204:	sub    $0x20,%rsp
    4208:	mov    %rdi,-0x18(%rbp)
    420c:	mov    %rsi,%rdi
    420f:	mov    %rdi,-0x10(%rbp)
    4213:	callq  4e70 <deflateStateCheck>
    4218:	test   %eax,%eax
    421a:	je     4225 <deflateCopy+0x25>
    421c:	mov    $0xfffffffffffffffe,%rax
    4223:	leaveq 
    4224:	retq   
    4225:	mov    -0x18(%rbp),%rcx
    4229:	test   %rcx,%rcx
    422c:	jne    4237 <deflateCopy+0x37>
    422e:	mov    $0xfffffffffffffffe,%rax
    4235:	leaveq 
    4236:	retq   
    4237:	mov    -0x10(%rbp),%rsi
    423b:	mov    0x38(%rsi),%rax
    423f:	mov    %rax,-0x18(%rbp)
    4243:	mov    $0x70,%edx
    4248:	mov    %rcx,%rdi
    424b:	mov    %r15,-0x10(%rbp)
    424f:	mov    %rcx,%r15
    4252:	callq  21f0 <memcpy@plt>
    4257:	mov    0x40(%r15),%rax
    425b:	mov    0x50(%r15),%rdi
    425f:	mov    $0x1,%esi
    4264:	mov    $0x1740,%edx
    4269:	callq  *%rax
    426b:	test   %rax,%rax
    426e:	jne    427d <deflateCopy+0x7d>
    4270:	mov    $0xfffffffffffffffc,%rax
    4277:	mov    -0x10(%rbp),%r15
    427b:	leaveq 
    427c:	retq   
    427d:	mov    %rax,0x38(%r15)
    4281:	mov    %rax,%rdi
    4284:	mov    -0x18(%rbp),%rsi
    4288:	mov    %r14,-0x8(%rbp)
    428c:	mov    %rax,%r14
    428f:	mov    $0x1740,%edx
    4294:	callq  21f0 <memcpy@plt>
    4299:	mov    %r15,(%r14)
    429c:	mov    0x40(%r15),%rax
    42a0:	mov    0x50(%r15),%rdi
    42a4:	mov    0x50(%r14),%esi
    42a8:	mov    $0x2,%edx
    42ad:	callq  *%rax
    42af:	mov    %rax,0x60(%r14)
    42b3:	mov    0x40(%r15),%rax
    42b7:	mov    0x50(%r15),%rdi
    42bb:	mov    0x50(%r14),%esi
    42bf:	mov    $0x2,%edx
    42c4:	callq  *%rax
    42c6:	mov    %rax,0x70(%r14)
    42ca:	mov    0x40(%r15),%rax
    42ce:	mov    0x50(%r15),%rdi
    42d2:	mov    0x84(%r14),%esi
    42d9:	mov    $0x2,%edx
    42de:	callq  *%rax
    42e0:	mov    %rax,0x78(%r14)
    42e4:	mov    0x40(%r15),%rax
    42e8:	mov    0x50(%r15),%rdi
    42ec:	mov    0x1708(%r14),%esi
    42f3:	mov    $0x4,%edx
    42f8:	callq  *%rax
    42fa:	mov    %rax,0x10(%r14)
    42fe:	mov    0x60(%r14),%rdi
    4302:	test   %rdi,%rdi
    4305:	je     4400 <deflateCopy+0x200>
    430b:	mov    0x70(%r14),%rcx
    430f:	test   %rcx,%rcx
    4312:	je     4400 <deflateCopy+0x200>
    4318:	mov    0x78(%r14),%rcx
    431c:	test   %rcx,%rcx
    431f:	je     4400 <deflateCopy+0x200>
    4325:	test   %rax,%rax
    4328:	je     4400 <deflateCopy+0x200>
    432e:	mov    -0x18(%rbp),%r15
    4332:	mov    0x60(%r15),%rsi
    4336:	mov    0x50(%r14),%ecx
    433a:	add    %ecx,%ecx
    433c:	mov    %ecx,%edx
    433e:	mov    %r13,-0x18(%rbp)
    4342:	mov    %rax,%r13
    4345:	callq  21f0 <memcpy@plt>
    434a:	mov    0x70(%r14),%rdi
    434e:	mov    0x70(%r15),%rsi
    4352:	mov    0x50(%r14),%eax
    4356:	lea    (%rax,%rax,1),%rdx
    435a:	callq  21f0 <memcpy@plt>
    435f:	mov    0x78(%r14),%rdi
    4363:	mov    0x78(%r15),%rsi
    4367:	mov    0x84(%r14),%eax
    436e:	lea    (%rax,%rax,1),%rdx
    4372:	callq  21f0 <memcpy@plt>
    4377:	mov    0x10(%r14),%rdi
    437b:	mov    0x10(%r15),%rsi
    437f:	mov    0x18(%r14),%edx
    4383:	callq  21f0 <memcpy@plt>
    4388:	mov    0x20(%r15),%rax
    438c:	mov    0x10(%r15),%rcx
    4390:	sub    %rcx,%rax
    4393:	add    0x10(%r14),%rax
    4397:	mov    %rax,0x20(%r14)
    439b:	mov    0x1708(%r14),%eax
    43a2:	and    $0xfffffffffffffffe,%rax
    43a6:	add    %r13,%rax
    43a9:	mov    %rax,0x1710(%r14)
    43b0:	mov    0x1708(%r14),%eax
    43b7:	lea    (%rax,%rax,2),%rax
    43bb:	add    0x10(%r14),%rax
    43bf:	mov    %rax,0x1700(%r14)
    43c6:	lea    0xd4(%r14),%rax
    43cd:	mov    %rax,0xb58(%r14)
    43d4:	lea    0x9c8(%r14),%rax
    43db:	mov    %rax,0xb70(%r14)
    43e2:	lea    0xabc(%r14),%rax
    43e9:	mov    %rax,0xb88(%r14)
    43f0:	xor    %eax,%eax
    43f2:	mov    -0x18(%rbp),%r13
    43f6:	mov    -0x8(%rbp),%r14
    43fa:	mov    -0x10(%rbp),%r15
    43fe:	leaveq 
    43ff:	retq   
    4400:	mov    %r15,%rdi
    4403:	callq  2260 <deflateEnd@plt>
    4408:	mov    -0x8(%rbp),%r14
    440c:	mov    $0xfffffffffffffffc,%rax
    4413:	mov    -0x10(%rbp),%r15
    4417:	leaveq 
    4418:	retq   
    4419:	nopl   0x0(%rax)

0000000000004420 <deflateReset>:
    4420:	push   %rbp
    4421:	mov    %rsp,%rbp
    4424:	sub    $0x10,%rsp
    4428:	mov    %rdi,-0x8(%rbp)
    442c:	callq  2310 <deflateResetKeep@plt>
    4431:	test   %eax,%eax
    4433:	je     4437 <deflateReset+0x17>
    4435:	leaveq 
    4436:	retq   
    4437:	mov    -0x8(%rbp),%rcx
    443b:	mov    0x38(%rcx),%rdi
    443f:	mov    %r15,-0x8(%rbp)
    4443:	mov    %rax,%r15
    4446:	callq  6e10 <lm_init>
    444b:	mov    %r15,%rax
    444e:	mov    -0x8(%rbp),%r15
    4452:	leaveq 
    4453:	retq   
    4454:	data16 nopw %cs:0x0(%rax,%rax,1)
    445f:	nop

0000000000004460 <deflateParams>:
    4460:	push   %rbp
    4461:	mov    %rsp,%rbp
    4464:	sub    $0x30,%rsp
    4468:	mov    %r15,-0x18(%rbp)
    446c:	mov    %rsi,-0x30(%rbp)
    4470:	mov    %rdx,-0x28(%rbp)
    4474:	mov    %rdi,%r15
    4477:	callq  4e70 <deflateStateCheck>
    447c:	test   %eax,%eax
    447e:	je     448d <deflateParams+0x2d>
    4480:	mov    $0xfffffffffffffffe,%rax
    4487:	mov    -0x18(%rbp),%r15
    448b:	leaveq 
    448c:	retq   
    448d:	mov    0x38(%r15),%r8
    4491:	mov    -0x30(%rbp),%rcx
    4495:	cmp    $0xffffffff,%ecx
    4498:	jne    449f <deflateParams+0x3f>
    449a:	mov    $0x6,%ecx
    449f:	test   %ecx,%ecx
    44a1:	jns    44b0 <deflateParams+0x50>
    44a3:	mov    $0xfffffffffffffffe,%rax
    44aa:	mov    -0x18(%rbp),%r15
    44ae:	leaveq 
    44af:	retq   
    44b0:	cmp    $0x9,%ecx
    44b3:	jle    44c2 <deflateParams+0x62>
    44b5:	mov    $0xfffffffffffffffe,%rax
    44bc:	mov    -0x18(%rbp),%r15
    44c0:	leaveq 
    44c1:	retq   
    44c2:	mov    -0x28(%rbp),%r9
    44c6:	test   %r9d,%r9d
    44c9:	jns    44d8 <deflateParams+0x78>
    44cb:	mov    $0xfffffffffffffffe,%rax
    44d2:	mov    -0x18(%rbp),%r15
    44d6:	leaveq 
    44d7:	retq   
    44d8:	cmp    $0x4,%r9d
    44dc:	jle    44eb <deflateParams+0x8b>
    44de:	mov    $0xfffffffffffffffe,%rax
    44e5:	mov    -0x18(%rbp),%r15
    44e9:	leaveq 
    44ea:	retq   
    44eb:	lea    0x137b6(%rip),%rdx        # 17ca8 <configuration_table>
    44f2:	movslq 0xc4(%r8),%rax
    44f9:	shl    $0x4,%rax
    44fd:	mov    0x8(%rdx,%rax,1),%rax
    4502:	movslq %ecx,%r10
    4505:	cmp    0xc8(%r8),%r9d
    450c:	jne    451f <deflateParams+0xbf>
    450e:	mov    %r10,%rsi
    4511:	shl    $0x4,%rsi
    4515:	mov    0x8(%rdx,%rsi,1),%rsi
    451a:	cmp    %rax,%rsi
    451d:	je     452b <deflateParams+0xcb>
    451f:	mov    0x1738(%r8),%rax
    4526:	test   %rax,%rax
    4529:	jne    4587 <deflateParams+0x127>
    452b:	xor    %eax,%eax
    452d:	movslq 0xc4(%r8),%rsi
    4534:	cmp    %esi,%ecx
    4536:	je     457a <deflateParams+0x11a>
    4538:	test   %esi,%esi
    453a:	je     45b2 <deflateParams+0x152>
    453c:	mov    %ecx,0xc4(%r8)
    4543:	shl    $0x4,%r10
    4547:	movzwl 0x2(%rdx,%r10,1),%ecx
    454d:	mov    %ecx,0xc0(%r8)
    4554:	movzwl (%r10,%rdx,1),%ecx
    4559:	mov    %ecx,0xcc(%r8)
    4560:	movzwl 0x4(%rdx,%r10,1),%ecx
    4566:	mov    %ecx,0xd0(%r8)
    456d:	movzwl 0x6(%rdx,%r10,1),%ecx
    4573:	mov    %ecx,0xbc(%r8)
    457a:	mov    %r9d,0xc8(%r8)
    4581:	mov    -0x18(%rbp),%r15
    4585:	leaveq 
    4586:	retq   
    4587:	mov    $0x5,%esi
    458c:	mov    %r15,%rdi
    458f:	mov    %r8,-0x30(%rbp)
    4593:	mov    %rcx,-0x20(%rbp)
    4597:	mov    %r10,-0x8(%rbp)
    459b:	callq  2150 <deflate@plt>
    45a0:	cmp    $0xfffffffe,%eax
    45a3:	jne    45de <deflateParams+0x17e>
    45a5:	mov    $0xfffffffffffffffe,%rax
    45ac:	mov    -0x18(%rbp),%r15
    45b0:	leaveq 
    45b1:	retq   
    45b2:	mov    0x1728(%r8),%esi
    45b9:	test   %esi,%esi
    45bb:	je     453c <deflateParams+0xdc>
    45c1:	cmp    $0x1,%esi
    45c4:	je     4606 <deflateParams+0x1a6>
    45c6:	mov    0x78(%r8),%rsi
    45ca:	mov    0x84(%r8),%edx
    45d1:	add    $0xffffffff,%edx
    45d4:	mov    %edx,%edx
    45d6:	movw   $0x0,(%rsi,%rdx,2)
    45dc:	jmp    4640 <deflateParams+0x1e0>
    45de:	mov    0x20(%r15),%eax
    45e2:	test   %eax,%eax
    45e4:	je     46a4 <deflateParams+0x244>
    45ea:	lea    0x136b7(%rip),%rdx        # 17ca8 <configuration_table>
    45f1:	mov    -0x8(%rbp),%r10
    45f5:	mov    -0x20(%rbp),%rcx
    45f9:	mov    -0x30(%rbp),%r8
    45fd:	mov    -0x28(%rbp),%r9
    4601:	jmpq   452b <deflateParams+0xcb>
    4606:	mov    %r8,%rdi
    4609:	mov    %r12,-0x10(%rbp)
    460d:	mov    %r13,-0x28(%rbp)
    4611:	mov    %r14,-0x30(%rbp)
    4615:	mov    %rcx,%r12
    4618:	mov    %r9,%r13
    461b:	mov    %r10,%r14
    461e:	mov    %r8,%r15
    4621:	callq  4f10 <slide_hash>
    4626:	mov    %r12,%rcx
    4629:	mov    %r15,%r8
    462c:	mov    %r13,%r9
    462f:	mov    %r14,%r10
    4632:	xor    %eax,%eax
    4634:	mov    -0x30(%rbp),%r14
    4638:	mov    -0x28(%rbp),%r13
    463c:	mov    -0x10(%rbp),%r12
    4640:	mov    0x78(%r8),%rdi
    4644:	mov    0x84(%r8),%edx
    464b:	add    $0xffffffff,%edx
    464e:	mov    %edx,%edx
    4650:	add    %rdx,%rdx
    4653:	mov    %r12,-0x10(%rbp)
    4657:	mov    %r13,-0x20(%rbp)
    465b:	mov    %r14,-0x30(%rbp)
    465f:	mov    %rax,%rsi
    4662:	mov    %rcx,%r12
    4665:	mov    %r8,%r13
    4668:	mov    %r9,%r14
    466b:	mov    %r10,%r15
    466e:	callq  2170 <memset@plt>
    4673:	mov    %r12,%rcx
    4676:	mov    %r13,%r8
    4679:	mov    %r14,%r9
    467c:	mov    %r15,%r10
    467f:	movl   $0x0,0x1728(%r8)
    468a:	xor    %eax,%eax
    468c:	mov    -0x30(%rbp),%r14
    4690:	mov    -0x20(%rbp),%r13
    4694:	mov    -0x10(%rbp),%r12
    4698:	lea    0x13609(%rip),%rdx        # 17ca8 <configuration_table>
    469f:	jmpq   453c <deflateParams+0xdc>
    46a4:	mov    $0xfffffffffffffffb,%rax
    46ab:	mov    -0x18(%rbp),%r15
    46af:	leaveq 
    46b0:	retq   
    46b1:	data16 nopw %cs:0x0(%rax,%rax,1)
    46bc:	nopl   0x0(%rax)

00000000000046c0 <deflateTune>:
    46c0:	push   %rbp
    46c1:	mov    %rsp,%rbp
    46c4:	sub    $0x30,%rsp
    46c8:	mov    %r15,-0x28(%rbp)
    46cc:	mov    %rsi,-0x8(%rbp)
    46d0:	mov    %rdx,-0x10(%rbp)
    46d4:	mov    %rcx,-0x18(%rbp)
    46d8:	mov    %r8,-0x20(%rbp)
    46dc:	mov    %rdi,%r15
    46df:	callq  4e70 <deflateStateCheck>
    46e4:	test   %eax,%eax
    46e6:	je     46f5 <deflateTune+0x35>
    46e8:	mov    $0xfffffffffffffffe,%rax
    46ef:	mov    -0x28(%rbp),%r15
    46f3:	leaveq 
    46f4:	retq   
    46f5:	mov    0x38(%r15),%rax
    46f9:	mov    -0x8(%rbp),%rcx
    46fd:	mov    %ecx,0xcc(%rax)
    4703:	mov    -0x10(%rbp),%rcx
    4707:	mov    %ecx,0xc0(%rax)
    470d:	mov    -0x18(%rbp),%rcx
    4711:	mov    %ecx,0xd0(%rax)
    4717:	mov    -0x20(%rbp),%rcx
    471b:	mov    %ecx,0xbc(%rax)
    4721:	xor    %eax,%eax
    4723:	mov    -0x28(%rbp),%r15
    4727:	leaveq 
    4728:	retq   
    4729:	nopl   0x0(%rax)

0000000000004730 <deflateBound>:
    4730:	push   %rbp
    4731:	mov    %rsp,%rbp
    4734:	sub    $0x20,%rsp
    4738:	mov    %r14,-0x10(%rbp)
    473c:	mov    %r15,-0x18(%rbp)
    4740:	mov    %rsi,-0x8(%rbp)
    4744:	lea    0x7(%rsi),%rax
    4748:	shr    $0x3,%rax
    474c:	lea    (%rsi,%rax,1),%rcx
    4750:	lea    0x3f(%rsi),%rax
    4754:	shr    $0x6,%rax
    4758:	lea    (%rax,%rcx,1),%r14
    475c:	mov    %rdi,%r15
    475f:	callq  4e70 <deflateStateCheck>
    4764:	test   %eax,%eax
    4766:	jne    47de <deflateBound+0xae>
    4768:	mov    $0x6,%eax
    476d:	mov    0x38(%r15),%rdx
    4771:	movslq 0x30(%rdx),%rcx
    4775:	test   %ecx,%ecx
    4777:	jle    47ec <deflateBound+0xbc>
    4779:	cmp    $0x1,%ecx
    477c:	je     4833 <deflateBound+0x103>
    4782:	cmp    $0x2,%ecx
    4785:	jne    47f2 <deflateBound+0xc2>
    4787:	mov    $0x12,%eax
    478c:	mov    0x38(%rdx),%rsi
    4790:	test   %rsi,%rsi
    4793:	je     47f2 <deflateBound+0xc2>
    4795:	mov    0x18(%rsi),%rcx
    4799:	test   %rcx,%rcx
    479c:	je     47aa <deflateBound+0x7a>
    479e:	mov    0x20(%rsi),%eax
    47a1:	add    $0x2,%eax
    47a4:	mov    %eax,%eax
    47a6:	add    $0x12,%rax
    47aa:	mov    0x38(%rdx),%rcx
    47ae:	mov    0x28(%rcx),%rcx
    47b2:	test   %rcx,%rcx
    47b5:	jne    4848 <deflateBound+0x118>
    47bb:	mov    0x38(%rdx),%rcx
    47bf:	mov    0x38(%rcx),%rcx
    47c3:	test   %rcx,%rcx
    47c6:	jne    485d <deflateBound+0x12d>
    47cc:	mov    0x38(%rdx),%rcx
    47d0:	movslq 0x44(%rcx),%rcx
    47d4:	test   %ecx,%ecx
    47d6:	je     47f2 <deflateBound+0xc2>
    47d8:	add    $0x2,%rax
    47dc:	jmp    47f2 <deflateBound+0xc2>
    47de:	lea    0xb(%r14),%rax
    47e2:	mov    -0x18(%rbp),%r15
    47e6:	mov    -0x10(%rbp),%r14
    47ea:	leaveq 
    47eb:	retq   
    47ec:	test   %ecx,%ecx
    47ee:	jne    47f2 <deflateBound+0xc2>
    47f0:	xor    %eax,%eax
    47f2:	mov    0x54(%rdx),%ecx
    47f5:	cmp    $0xf,%ecx
    47f8:	jne    486e <deflateBound+0x13e>
    47fa:	mov    0x88(%rdx),%ecx
    4800:	cmp    $0xf,%ecx
    4803:	jne    486e <deflateBound+0x13e>
    4805:	mov    -0x8(%rbp),%rcx
    4809:	mov    %rcx,%rdx
    480c:	shr    $0xc,%rdx
    4810:	add    %rcx,%rdx
    4813:	mov    %rcx,%rsi
    4816:	shr    $0xe,%rsi
    481a:	add    %rsi,%rdx
    481d:	shr    $0x19,%rcx
    4821:	add    %rdx,%rcx
    4824:	lea    0x7(%rax,%rcx,1),%rax
    4829:	mov    -0x18(%rbp),%r15
    482d:	mov    -0x10(%rbp),%r14
    4831:	leaveq 
    4832:	retq   
    4833:	mov    0xac(%rdx),%ecx
    4839:	test   %ecx,%ecx
    483b:	je     47f2 <deflateBound+0xc2>
    483d:	mov    $0xa,%eax
    4842:	jmp    47f2 <deflateBound+0xc2>
    4844:	add    $0x1,%rcx
    4848:	add    $0x1,%rax
    484c:	movzbl (%rcx),%esi
    484f:	test   %sil,%sil
    4852:	jne    4844 <deflateBound+0x114>
    4854:	jmpq   47bb <deflateBound+0x8b>
    4859:	add    $0x1,%rcx
    485d:	add    $0x1,%rax
    4861:	movzbl (%rcx),%esi
    4864:	test   %sil,%sil
    4867:	jne    4859 <deflateBound+0x129>
    4869:	jmpq   47cc <deflateBound+0x9c>
    486e:	lea    0x5(%r14,%rax,1),%rax
    4873:	mov    -0x18(%rbp),%r15
    4877:	mov    -0x10(%rbp),%r14
    487b:	leaveq 
    487c:	retq   
    487d:	nopl   (%rax)

0000000000004880 <deflatePending>:
    4880:	push   %rbp
    4881:	mov    %rsp,%rbp
    4884:	sub    $0x20,%rsp
    4888:	mov    %r15,-0x10(%rbp)
    488c:	mov    %rdi,-0x8(%rbp)
    4890:	mov    %rdx,-0x18(%rbp)
    4894:	mov    %rsi,%r15
    4897:	callq  4e70 <deflateStateCheck>
    489c:	test   %eax,%eax
    489e:	je     48ad <deflatePending+0x2d>
    48a0:	mov    $0xfffffffffffffffe,%rax
    48a7:	mov    -0x10(%rbp),%r15
    48ab:	leaveq 
    48ac:	retq   
    48ad:	test   %r15,%r15
    48b0:	jne    48b8 <deflatePending+0x38>
    48b2:	mov    -0x8(%rbp),%rcx
    48b6:	jmp    48c6 <deflatePending+0x46>
    48b8:	mov    -0x8(%rbp),%rcx
    48bc:	mov    0x38(%rcx),%rax
    48c0:	mov    0x28(%rax),%eax
    48c3:	mov    %eax,(%r15)
    48c6:	xor    %eax,%eax
    48c8:	mov    -0x18(%rbp),%rdx
    48cc:	test   %rdx,%rdx
    48cf:	jne    48d7 <deflatePending+0x57>
    48d1:	mov    -0x10(%rbp),%r15
    48d5:	leaveq 
    48d6:	retq   
    48d7:	mov    0x38(%rcx),%rcx
    48db:	movslq 0x1734(%rcx),%rcx
    48e2:	mov    %ecx,(%rdx)
    48e4:	mov    -0x10(%rbp),%r15
    48e8:	leaveq 
    48e9:	retq   
    48ea:	nopw   0x0(%rax,%rax,1)

00000000000048f0 <deflatePrime>:
    48f0:	push   %rbp
    48f1:	mov    %rsp,%rbp
    48f4:	sub    $0x40,%rsp
    48f8:	mov    %r15,-0x28(%rbp)
    48fc:	mov    %rdx,-0x38(%rbp)
    4900:	mov    %rsi,-0x30(%rbp)
    4904:	mov    %rdi,%r15
    4907:	callq  4e70 <deflateStateCheck>
    490c:	test   %eax,%eax
    490e:	je     491d <deflatePrime+0x2d>
    4910:	mov    $0xfffffffffffffffe,%rax
    4917:	mov    -0x28(%rbp),%r15
    491b:	leaveq 
    491c:	retq   
    491d:	mov    0x38(%r15),%r15
    4921:	mov    0x20(%r15),%rax
    4925:	add    $0x2,%rax
    4929:	cmp    0x1710(%r15),%rax
    4930:	jbe    493f <deflatePrime+0x4f>
    4932:	mov    $0xfffffffffffffffb,%rax
    4939:	mov    -0x28(%rbp),%r15
    493d:	leaveq 
    493e:	retq   
    493f:	mov    $0x1,%eax
    4944:	mov    $0x10,%ecx
    4949:	mov    %rbx,-0x8(%rbp)
    494d:	mov    %r12,-0x10(%rbp)
    4951:	mov    %r13,-0x18(%rbp)
    4955:	mov    %r14,-0x20(%rbp)
    4959:	mov    %rcx,%r13
    495c:	mov    -0x30(%rbp),%r12
    4960:	mov    -0x38(%rbp),%rbx
    4964:	jmp    4973 <deflatePrime+0x83>
    4966:	mov    %r14,%rcx
    4969:	sar    %cl,%ebx
    496b:	sub    %ecx,%r12d
    496e:	mov    $0x1,%eax
    4973:	movslq 0x1734(%r15),%rdx
    497a:	mov    %r13,%rcx
    497d:	sub    %edx,%ecx
    497f:	cmp    %r12d,%ecx
    4982:	jle    4987 <deflatePrime+0x97>
    4984:	mov    %r12,%rcx
    4987:	shl    %cl,%eax
    4989:	add    $0xffff,%eax
    498e:	and    %bx,%ax
    4991:	mov    %rcx,%r14
    4994:	mov    %rdx,%rcx
    4997:	shl    %cl,%eax
    4999:	movzwl 0x1730(%r15),%edx
    49a1:	or     %dx,%ax
    49a4:	mov    %ax,0x1730(%r15)
    49ac:	lea    (%r14,%rcx,1),%eax
    49b0:	mov    %eax,0x1734(%r15)
    49b7:	mov    %r15,%rdi
    49ba:	callq  2350 <_tr_flush_bits@plt>
    49bf:	cmp    %r12d,%r14d
    49c2:	jne    4966 <deflatePrime+0x76>
    49c4:	xor    %eax,%eax
    49c6:	mov    -0x20(%rbp),%r14
    49ca:	mov    -0x18(%rbp),%r13
    49ce:	mov    -0x10(%rbp),%r12
    49d2:	mov    -0x8(%rbp),%rbx
    49d6:	mov    -0x28(%rbp),%r15
    49da:	leaveq 
    49db:	retq   
    49dc:	nopl   0x0(%rax)

00000000000049e0 <deflateSetHeader>:
    49e0:	push   %rbp
    49e1:	mov    %rsp,%rbp
    49e4:	sub    $0x10,%rsp
    49e8:	mov    %r15,-0x10(%rbp)
    49ec:	mov    %rsi,-0x8(%rbp)
    49f0:	mov    %rdi,%r15
    49f3:	callq  4e70 <deflateStateCheck>
    49f8:	test   %eax,%eax
    49fa:	je     4a09 <deflateSetHeader+0x29>
    49fc:	mov    $0xfffffffffffffffe,%rax
    4a03:	mov    -0x10(%rbp),%r15
    4a07:	leaveq 
    4a08:	retq   
    4a09:	mov    0x38(%r15),%rcx
    4a0d:	movslq 0x30(%rcx),%rax
    4a11:	cmp    $0x2,%eax
    4a14:	je     4a23 <deflateSetHeader+0x43>
    4a16:	mov    $0xfffffffffffffffe,%rax
    4a1d:	mov    -0x10(%rbp),%r15
    4a21:	leaveq 
    4a22:	retq   
    4a23:	mov    -0x8(%rbp),%rax
    4a27:	mov    %rax,0x38(%rcx)
    4a2b:	xor    %eax,%eax
    4a2d:	mov    -0x10(%rbp),%r15
    4a31:	leaveq 
    4a32:	retq   
    4a33:	data16 nopw %cs:0x0(%rax,%rax,1)
    4a3e:	xchg   %ax,%ax

0000000000004a40 <deflateInit_>:
    4a40:	push   %rbp
    4a41:	mov    %rsp,%rbp
    4a44:	sub    $0x10,%rsp
    4a48:	mov    %rdx,(%rsp)
    4a4c:	mov    %ecx,0x8(%rsp)
    4a50:	mov    $0x8,%edx
    4a55:	mov    $0xf,%ecx
    4a5a:	xor    %r9d,%r9d
    4a5d:	mov    %rdx,%r8
    4a60:	callq  21a0 <deflateInit2_@plt>
    4a65:	leaveq 
    4a66:	retq   
    4a67:	nopw   0x0(%rax,%rax,1)

0000000000004a70 <deflateInit2_>:
    4a70:	push   %rbp
    4a71:	mov    %rsp,%rbp
    4a74:	sub    $0x30,%rsp
    4a78:	mov    $0xfffffffffffffffa,%rax
    4a7f:	mov    0x10(%rbp),%r10
    4a83:	test   %r10,%r10
    4a86:	jne    4a8a <deflateInit2_+0x1a>
    4a88:	leaveq 
    4a89:	retq   
    4a8a:	movsbq (%r10),%r10
    4a8e:	cmp    $0x31,%r10b
    4a92:	je     4a96 <deflateInit2_+0x26>
    4a94:	leaveq 
    4a95:	retq   
    4a96:	movslq 0x18(%rbp),%r10
    4a9a:	cmp    $0x70,%r10
    4a9e:	je     4aa2 <deflateInit2_+0x32>
    4aa0:	leaveq 
    4aa1:	retq   
    4aa2:	mov    $0xfffffffffffffffe,%rax
    4aa9:	test   %rdi,%rdi
    4aac:	jne    4ab0 <deflateInit2_+0x40>
    4aae:	leaveq 
    4aaf:	retq   
    4ab0:	movq   $0x0,0x30(%rdi)
    4ab8:	mov    0x40(%rdi),%r10
    4abc:	test   %r10,%r10
    4abf:	jne    4ad4 <deflateInit2_+0x64>
    4ac1:	mov    0x13510(%rip),%r10        # 17fd8 <zcalloc@@Base+0x9278>
    4ac8:	mov    %r10,0x40(%rdi)
    4acc:	movq   $0x0,0x50(%rdi)
    4ad4:	mov    0x48(%rdi),%r10
    4ad8:	test   %r10,%r10
    4adb:	jne    4ae8 <deflateInit2_+0x78>
    4add:	mov    0x134dc(%rip),%r10        # 17fc0 <zcfree@@Base+0x9250>
    4ae4:	mov    %r10,0x48(%rdi)
    4ae8:	cmp    $0xffffffff,%esi
    4aeb:	jne    4af2 <deflateInit2_+0x82>
    4aed:	mov    $0x6,%esi
    4af2:	mov    $0x1,%r11d
    4af8:	xor    %r10d,%r10d
    4afb:	test   %ecx,%ecx
    4afd:	js     4b0d <deflateInit2_+0x9d>
    4aff:	cmp    $0xf,%ecx
    4b02:	jg     4b1d <deflateInit2_+0xad>
    4b04:	mov    %rdi,-0x30(%rbp)
    4b08:	mov    %r11,%rdi
    4b0b:	jmp    4b16 <deflateInit2_+0xa6>
    4b0d:	neg    %ecx
    4b0f:	mov    %rdi,-0x30(%rbp)
    4b13:	mov    %r10,%rdi
    4b16:	test   %r8d,%r8d
    4b19:	jg     4b2b <deflateInit2_+0xbb>
    4b1b:	leaveq 
    4b1c:	retq   
    4b1d:	add    $0xfffffff0,%ecx
    4b20:	mov    %rdi,-0x30(%rbp)
    4b24:	mov    $0x2,%edi
    4b29:	jmp    4b16 <deflateInit2_+0xa6>
    4b2b:	cmp    $0x9,%r8d
    4b2f:	jle    4b33 <deflateInit2_+0xc3>
    4b31:	leaveq 
    4b32:	retq   
    4b33:	cmp    $0x8,%edx
    4b36:	je     4b3a <deflateInit2_+0xca>
    4b38:	leaveq 
    4b39:	retq   
    4b3a:	cmp    $0x7,%ecx
    4b3d:	jg     4b41 <deflateInit2_+0xd1>
    4b3f:	leaveq 
    4b40:	retq   
    4b41:	cmp    $0xf,%ecx
    4b44:	jle    4b48 <deflateInit2_+0xd8>
    4b46:	leaveq 
    4b47:	retq   
    4b48:	test   %esi,%esi
    4b4a:	jns    4b4e <deflateInit2_+0xde>
    4b4c:	leaveq 
    4b4d:	retq   
    4b4e:	cmp    $0x9,%esi
    4b51:	jle    4b55 <deflateInit2_+0xe5>
    4b53:	leaveq 
    4b54:	retq   
    4b55:	test   %r9d,%r9d
    4b58:	jns    4b5c <deflateInit2_+0xec>
    4b5a:	leaveq 
    4b5b:	retq   
    4b5c:	cmp    $0x4,%r9d
    4b60:	jle    4b64 <deflateInit2_+0xf4>
    4b62:	leaveq 
    4b63:	retq   
    4b64:	cmp    $0x8,%ecx
    4b67:	je     4bb2 <deflateInit2_+0x142>
    4b69:	test   %r10,%r10
    4b6c:	je     4b73 <deflateInit2_+0x103>
    4b6e:	mov    $0x9,%ecx
    4b73:	mov    %rcx,-0x20(%rbp)
    4b77:	mov    -0x30(%rbp),%rcx
    4b7b:	mov    0x40(%rcx),%rax
    4b7f:	mov    %r9,-0x10(%rbp)
    4b83:	mov    0x50(%rcx),%r9
    4b87:	mov    %rsi,-0x8(%rbp)
    4b8b:	mov    $0x1740,%edx
    4b90:	mov    %r11,%rsi
    4b93:	mov    %rcx,-0x30(%rbp)
    4b97:	mov    %rdi,-0x18(%rbp)
    4b9b:	mov    %r8,-0x28(%rbp)
    4b9f:	mov    %r9,%rdi
    4ba2:	callq  *%rax
    4ba4:	test   %rax,%rax
    4ba7:	jne    4bc0 <deflateInit2_+0x150>
    4ba9:	mov    $0xfffffffffffffffc,%rax
    4bb0:	leaveq 
    4bb1:	retq   
    4bb2:	cmp    $0x1,%edi
    4bb5:	jne    4d45 <deflateInit2_+0x2d5>
    4bbb:	mov    %r11,%r10
    4bbe:	jmp    4b69 <deflateInit2_+0xf9>
    4bc0:	mov    -0x30(%rbp),%r8
    4bc4:	mov    %rax,0x38(%r8)
    4bc8:	mov    %r8,(%rax)
    4bcb:	movl   $0x2a,0x8(%rax)
    4bd2:	mov    -0x18(%rbp),%rcx
    4bd6:	mov    %ecx,0x30(%rax)
    4bd9:	movq   $0x0,0x38(%rax)
    4be1:	mov    -0x20(%rbp),%rcx
    4be5:	mov    %ecx,0x54(%rax)
    4be8:	mov    $0x1,%edx
    4bed:	mov    %rdx,%rsi
    4bf0:	shl    %cl,%esi
    4bf2:	mov    %esi,0x50(%rax)
    4bf5:	lea    -0x1(%rsi),%ecx
    4bf8:	mov    %ecx,0x58(%rax)
    4bfb:	mov    -0x28(%rbp),%r9
    4bff:	lea    0x7(%r9),%ecx
    4c03:	mov    %ecx,0x88(%rax)
    4c09:	shl    %cl,%edx
    4c0b:	mov    %edx,0x84(%rax)
    4c11:	lea    -0x1(%rdx),%ecx
    4c14:	mov    %ecx,0x8c(%rax)
    4c1a:	mov    %rax,%r10
    4c1d:	lea    0x9(%r9),%ecx
    4c21:	mov    $0xaaaaaaab,%eax
    4c26:	mul    %ecx
    4c28:	shr    %edx
    4c2a:	mov    %edx,0x90(%r10)
    4c31:	mov    0x40(%r8),%rax
    4c35:	mov    0x50(%r8),%rdi
    4c39:	mov    0x50(%r10),%esi
    4c3d:	mov    $0x2,%edx
    4c42:	mov    %r13,-0x20(%rbp)
    4c46:	mov    %r14,-0x28(%rbp)
    4c4a:	mov    %r15,-0x30(%rbp)
    4c4e:	mov    %r8,%r13
    4c51:	mov    %r10,%r14
    4c54:	mov    %r9,%r15
    4c57:	callq  *%rax
    4c59:	mov    %rax,0x60(%r14)
    4c5d:	mov    0x40(%r13),%rax
    4c61:	mov    0x50(%r13),%rdi
    4c65:	mov    0x50(%r14),%esi
    4c69:	mov    $0x2,%edx
    4c6e:	callq  *%rax
    4c70:	mov    %rax,0x70(%r14)
    4c74:	mov    0x40(%r13),%rax
    4c78:	mov    0x50(%r13),%rdi
    4c7c:	mov    0x84(%r14),%esi
    4c83:	mov    $0x2,%edx
    4c88:	callq  *%rax
    4c8a:	mov    %rax,0x78(%r14)
    4c8e:	movq   $0x0,0x1738(%r14)
    4c99:	lea    0x6(%r15),%ecx
    4c9d:	mov    $0x1,%esi
    4ca2:	shl    %cl,%esi
    4ca4:	mov    %esi,0x1708(%r14)
    4cab:	mov    0x40(%r13),%rax
    4caf:	mov    0x50(%r13),%rdi
    4cb3:	mov    $0x4,%edx
    4cb8:	callq  *%rax
    4cba:	mov    %rax,0x10(%r14)
    4cbe:	mov    0x1708(%r14),%ecx
    4cc5:	mov    %rcx,%rdx
    4cc8:	shl    $0x2,%rdx
    4ccc:	mov    %rdx,0x18(%r14)
    4cd0:	mov    0x60(%r14),%rdx
    4cd4:	test   %rdx,%rdx
    4cd7:	je     4d47 <deflateInit2_+0x2d7>
    4cd9:	mov    0x70(%r14),%rdx
    4cdd:	test   %rdx,%rdx
    4ce0:	je     4d47 <deflateInit2_+0x2d7>
    4ce2:	mov    0x78(%r14),%rdx
    4ce6:	test   %rdx,%rdx
    4ce9:	je     4d47 <deflateInit2_+0x2d7>
    4ceb:	test   %rax,%rax
    4cee:	je     4d47 <deflateInit2_+0x2d7>
    4cf0:	and    $0xfffffffffffffffe,%rcx
    4cf4:	add    %rcx,%rax
    4cf7:	mov    %rax,0x1710(%r14)
    4cfe:	mov    0x1708(%r14),%eax
    4d05:	lea    (%rax,%rax,2),%rax
    4d09:	add    0x10(%r14),%rax
    4d0d:	mov    %rax,0x1700(%r14)
    4d14:	mov    -0x8(%rbp),%rax
    4d18:	mov    %eax,0xc4(%r14)
    4d1f:	mov    -0x10(%rbp),%rax
    4d23:	mov    %eax,0xc8(%r14)
    4d2a:	movb   $0x8,0x48(%r14)
    4d2f:	mov    %r13,%rdi
    4d32:	callq  2140 <deflateReset@plt>
    4d37:	mov    -0x30(%rbp),%r15
    4d3b:	mov    -0x28(%rbp),%r14
    4d3f:	mov    -0x20(%rbp),%r13
    4d43:	leaveq 
    4d44:	retq   
    4d45:	leaveq 
    4d46:	retq   
    4d47:	movl   $0x29a,0x8(%r14)
    4d4f:	mov    0x1328a(%rip),%rax        # 17fe0 <z_errmsg@@Base+0x238>
    4d56:	mov    0x30(%rax),%rax
    4d5a:	mov    %rax,0x30(%r13)
    4d5e:	mov    %r13,%rdi
    4d61:	callq  2260 <deflateEnd@plt>
    4d66:	mov    -0x30(%rbp),%r15
    4d6a:	mov    -0x28(%rbp),%r14
    4d6e:	mov    -0x20(%rbp),%r13
    4d72:	mov    $0xfffffffffffffffc,%rax
    4d79:	leaveq 
    4d7a:	retq   
    4d7b:	nopl   0x0(%rax,%rax,1)

0000000000004d80 <deflateResetKeep>:
    4d80:	push   %rbp
    4d81:	mov    %rsp,%rbp
    4d84:	sub    $0x10,%rsp
    4d88:	mov    %r15,-0x10(%rbp)
    4d8c:	mov    %r14,%r15
    4d8f:	mov    %rdi,%r14
    4d92:	callq  4e70 <deflateStateCheck>
    4d97:	test   %eax,%eax
    4d99:	je     4dab <deflateResetKeep+0x2b>
    4d9b:	mov    %r15,%r14
    4d9e:	mov    $0xfffffffffffffffe,%rax
    4da5:	mov    -0x10(%rbp),%r15
    4da9:	leaveq 
    4daa:	retq   
    4dab:	movq   $0x0,0x28(%r14)
    4db3:	movq   $0x0,0x10(%r14)
    4dbb:	movq   $0x0,0x30(%r14)
    4dc3:	movl   $0x2,0x58(%r14)
    4dcb:	mov    0x38(%r14),%r8
    4dcf:	movq   $0x0,0x28(%r8)
    4dd7:	mov    0x10(%r8),%rax
    4ddb:	mov    %rax,0x20(%r8)
    4ddf:	movslq 0x30(%r8),%rax
    4de3:	test   %eax,%eax
    4de5:	jns    4ded <deflateResetKeep+0x6d>
    4de7:	neg    %eax
    4de9:	mov    %eax,0x30(%r8)
    4ded:	movslq 0x30(%r8),%rcx
    4df1:	cmp    $0x2,%ecx
    4df4:	jne    4e20 <deflateResetKeep+0xa0>
    4df6:	mov    $0x39,%eax
    4dfb:	cmp    $0x2,%ecx
    4dfe:	mov    %eax,0x8(%r8)
    4e02:	mov    $0x0,%edi
    4e07:	je     4e2b <deflateResetKeep+0xab>
    4e09:	mov    %rdi,%rsi
    4e0c:	mov    %rdi,%rdx
    4e0f:	mov    %r15,-0x8(%rbp)
    4e13:	mov    %r8,%r15
    4e16:	callq  2230 <adler32@plt>
    4e1b:	mov    %r15,%rdi
    4e1e:	jmp    4e40 <deflateResetKeep+0xc0>
    4e20:	test   %ecx,%ecx
    4e22:	jne    4e5c <deflateResetKeep+0xdc>
    4e24:	mov    $0x71,%eax
    4e29:	jmp    4dfb <deflateResetKeep+0x7b>
    4e2b:	mov    %rdi,%rsi
    4e2e:	mov    %rdi,%rdx
    4e31:	mov    %r15,-0x8(%rbp)
    4e35:	mov    %r8,%r15
    4e38:	callq  20d0 <crc32@plt>
    4e3d:	mov    %r15,%rdi
    4e40:	mov    %rax,0x60(%r14)
    4e44:	movl   $0x0,0x4c(%rdi)
    4e4b:	callq  2100 <_tr_init@plt>
    4e50:	xor    %eax,%eax
    4e52:	mov    -0x8(%rbp),%r14
    4e56:	mov    -0x10(%rbp),%r15
    4e5a:	leaveq 
    4e5b:	retq   
    4e5c:	mov    $0x2a,%eax
    4e61:	jmp    4dfb <deflateResetKeep+0x7b>
    4e63:	data16 nopw %cs:0x0(%rax,%rax,1)
    4e6e:	xchg   %ax,%ax

0000000000004e70 <deflateStateCheck>:
    4e70:	push   %rbp
    4e71:	mov    %rsp,%rbp
    4e74:	mov    $0x1,%eax
    4e79:	test   %rdi,%rdi
    4e7c:	jne    4e80 <deflateStateCheck+0x10>
    4e7e:	leaveq 
    4e7f:	retq   
    4e80:	mov    0x40(%rdi),%rcx
    4e84:	test   %rcx,%rcx
    4e87:	jne    4e8b <deflateStateCheck+0x1b>
    4e89:	leaveq 
    4e8a:	retq   
    4e8b:	mov    0x48(%rdi),%rcx
    4e8f:	test   %rcx,%rcx
    4e92:	jne    4e96 <deflateStateCheck+0x26>
    4e94:	leaveq 
    4e95:	retq   
    4e96:	mov    0x38(%rdi),%rdx
    4e9a:	test   %rdx,%rdx
    4e9d:	jne    4ea1 <deflateStateCheck+0x31>
    4e9f:	leaveq 
    4ea0:	retq   
    4ea1:	cmp    (%rdx),%rdi
    4ea4:	je     4ea8 <deflateStateCheck+0x38>
    4ea6:	leaveq 
    4ea7:	retq   
    4ea8:	xor    %ecx,%ecx
    4eaa:	movslq 0x8(%rdx),%rdx
    4eae:	cmp    $0x2a,%edx
    4eb1:	jne    4eb8 <deflateStateCheck+0x48>
    4eb3:	mov    %rcx,%rax
    4eb6:	leaveq 
    4eb7:	retq   
    4eb8:	cmp    $0x39,%edx
    4ebb:	jne    4ec2 <deflateStateCheck+0x52>
    4ebd:	mov    %rcx,%rax
    4ec0:	leaveq 
    4ec1:	retq   
    4ec2:	cmp    $0x45,%edx
    4ec5:	jne    4ecc <deflateStateCheck+0x5c>
    4ec7:	mov    %rcx,%rax
    4eca:	leaveq 
    4ecb:	retq   
    4ecc:	cmp    $0x49,%edx
    4ecf:	jne    4ed6 <deflateStateCheck+0x66>
    4ed1:	mov    %rcx,%rax
    4ed4:	leaveq 
    4ed5:	retq   
    4ed6:	cmp    $0x5b,%edx
    4ed9:	jne    4ee0 <deflateStateCheck+0x70>
    4edb:	mov    %rcx,%rax
    4ede:	leaveq 
    4edf:	retq   
    4ee0:	cmp    $0x67,%edx
    4ee3:	jne    4eea <deflateStateCheck+0x7a>
    4ee5:	mov    %rcx,%rax
    4ee8:	leaveq 
    4ee9:	retq   
    4eea:	cmp    $0x71,%edx
    4eed:	jne    4ef4 <deflateStateCheck+0x84>
    4eef:	mov    %rcx,%rax
    4ef2:	leaveq 
    4ef3:	retq   
    4ef4:	cmp    $0x29a,%edx
    4efa:	je     4efe <deflateStateCheck+0x8e>
    4efc:	leaveq 
    4efd:	retq   
    4efe:	mov    %rcx,%rax
    4f01:	leaveq 
    4f02:	retq   
    4f03:	data16 nopw %cs:0x0(%rax,%rax,1)
    4f0e:	xchg   %ax,%ax

0000000000004f10 <slide_hash>:
    4f10:	push   %rbp
    4f11:	mov    %rsp,%rbp
    4f14:	mov    0x50(%rdi),%r8d
    4f18:	mov    0x84(%rdi),%ecx
    4f1e:	lea    (%rcx,%rcx,1),%rax
    4f22:	add    0x78(%rdi),%rax
    4f26:	xor    %esi,%esi
    4f28:	add    $0xfffffffffffffffe,%rax
    4f2c:	movzwl (%rax),%edx
    4f2f:	cmp    %edx,%r8d
    4f32:	jbe    4f39 <slide_hash+0x29>
    4f34:	mov    %rsi,%rdx
    4f37:	jmp    4f3d <slide_hash+0x2d>
    4f39:	sub    %r8w,%dx
    4f3d:	mov    %dx,(%rax)
    4f40:	add    $0xffffffff,%ecx
    4f43:	test   %ecx,%ecx
    4f45:	jne    4f28 <slide_hash+0x18>
    4f47:	lea    (%r8,%r8,1),%rax
    4f4b:	add    0x70(%rdi),%rax
    4f4f:	mov    %r8,%rcx
    4f52:	add    $0xfffffffffffffffe,%rax
    4f56:	movzwl (%rax),%edx
    4f59:	cmp    %edx,%r8d
    4f5c:	jbe    4f63 <slide_hash+0x53>
    4f5e:	mov    %rsi,%rdx
    4f61:	jmp    4f67 <slide_hash+0x57>
    4f63:	sub    %r8w,%dx
    4f67:	mov    %dx,(%rax)
    4f6a:	add    $0xffffffff,%ecx
    4f6d:	test   %ecx,%ecx
    4f6f:	jne    4f52 <slide_hash+0x42>
    4f71:	leaveq 
    4f72:	retq   
    4f73:	data16 nopw %cs:0x0(%rax,%rax,1)
    4f7e:	xchg   %ax,%ax

0000000000004f80 <fill_window>:
    4f80:	push   %rbp
    4f81:	mov    %rsp,%rbp
    4f84:	sub    $0x20,%rsp
    4f88:	mov    %r13,-0x8(%rbp)
    4f8c:	mov    %r14,-0x10(%rbp)
    4f90:	mov    %r15,-0x18(%rbp)
    4f94:	mov    %rdi,%r13
    4f97:	mov    0x50(%r13),%r14d
    4f9b:	jmpq   5054 <fill_window+0xd4>
    4fa0:	mov    0x60(%r13),%rdi
    4fa4:	lea    (%r14,%rdi,1),%rsi
    4fa8:	sub    %edx,%eax
    4faa:	add    %r14d,%eax
    4fad:	mov    %eax,%edx
    4faf:	callq  21f0 <memcpy@plt>
    4fb4:	mov    0xb0(%r13),%eax
    4fbb:	sub    %r14d,%eax
    4fbe:	mov    %eax,0xb0(%r13)
    4fc5:	mov    0xac(%r13),%eax
    4fcc:	sub    %r14d,%eax
    4fcf:	mov    %eax,0xac(%r13)
    4fd6:	mov    0x98(%r13),%rax
    4fdd:	sub    %r14,%rax
    4fe0:	mov    %rax,0x98(%r13)
    4fe7:	mov    %r13,%rdi
    4fea:	callq  4f10 <slide_hash>
    4fef:	add    %r14d,%r15d
    4ff2:	mov    0x0(%r13),%rdi
    4ff6:	mov    0x8(%rdi),%eax
    4ff9:	test   %eax,%eax
    4ffb:	je     5088 <fill_window+0x108>
    5001:	mov    0xac(%r13),%eax
    5008:	add    0x60(%r13),%rax
    500c:	mov    0xb4(%r13),%ecx
    5013:	lea    (%rcx,%rax,1),%rsi
    5017:	mov    %r15,%rdx
    501a:	callq  7020 <read_buf>
    501f:	add    0xb4(%r13),%eax
    5026:	mov    %eax,0xb4(%r13)
    502d:	mov    0x172c(%r13),%ecx
    5034:	add    %ecx,%eax
    5036:	cmp    $0x2,%eax
    5039:	ja     50a6 <fill_window+0x126>
    503b:	mov    0xb4(%r13),%eax
    5042:	cmp    $0x105,%eax
    5047:	ja     5088 <fill_window+0x108>
    5049:	mov    0x0(%r13),%rax
    504d:	mov    0x8(%rax),%eax
    5050:	test   %eax,%eax
    5052:	je     5088 <fill_window+0x108>
    5054:	mov    0xac(%r13),%esi
    505b:	mov    %rsi,%rax
    505e:	add    0xb4(%r13),%eax
    5065:	mov    0x68(%r13),%edx
    5069:	mov    %rdx,%r15
    506c:	sub    %eax,%r15d
    506f:	mov    0x50(%r13),%ecx
    5073:	lea    -0x106(%rcx,%r14,1),%ecx
    507b:	cmp    %ecx,%esi
    507d:	jae    4fa0 <fill_window+0x20>
    5083:	jmpq   4ff2 <fill_window+0x72>
    5088:	mov    0x1738(%r13),%rdi
    508f:	mov    0x68(%r13),%r14
    5093:	cmp    %rdi,%r14
    5096:	ja     50e7 <fill_window+0x167>
    5098:	mov    -0x18(%rbp),%r15
    509c:	mov    -0x10(%rbp),%r14
    50a0:	mov    -0x8(%rbp),%r13
    50a4:	leaveq 
    50a5:	retq   
    50a6:	mov    0xac(%r13),%edx
    50ad:	sub    %ecx,%edx
    50af:	mov    %edx,%eax
    50b1:	mov    0x60(%r13),%rcx
    50b5:	movzbl (%rcx,%rax,1),%esi
    50b9:	mov    %esi,0x80(%r13)
    50c0:	lea    0x1(%rdx),%eax
    50c3:	mov    %eax,%eax
    50c5:	movzbl (%rax,%rcx,1),%eax
    50c9:	mov    0x90(%r13),%ecx
    50d0:	shl    %cl,%esi
    50d2:	xor    %esi,%eax
    50d4:	and    0x8c(%r13),%eax
    50db:	mov    %eax,0x80(%r13)
    50e2:	jmpq   51a1 <fill_window+0x221>
    50e7:	xor    %esi,%esi
    50e9:	mov    0xb4(%r13),%ecx
    50f0:	mov    0xac(%r13),%eax
    50f7:	lea    (%rcx,%rax,1),%r15
    50fb:	cmp    %r15,%rdi
    50fe:	jb     51b5 <fill_window+0x235>
    5104:	add    $0x102,%r15
    510b:	cmp    %r15,%rdi
    510e:	jb     51ef <fill_window+0x26f>
    5114:	mov    -0x18(%rbp),%r15
    5118:	mov    -0x10(%rbp),%r14
    511c:	mov    -0x8(%rbp),%r13
    5120:	leaveq 
    5121:	retq   
    5122:	lea    0x2(%rdx),%eax
    5125:	mov    %eax,%ecx
    5127:	mov    0x60(%r13),%rax
    512b:	movzbl (%rcx,%rax,1),%eax
    512f:	mov    0x80(%r13),%esi
    5136:	mov    0x90(%r13),%ecx
    513d:	shl    %cl,%esi
    513f:	xor    %esi,%eax
    5141:	and    0x8c(%r13),%eax
    5148:	mov    %eax,0x80(%r13)
    514f:	mov    %eax,%eax
    5151:	mov    0x78(%r13),%rcx
    5155:	movzwl (%rcx,%rax,2),%esi
    5159:	mov    %rdx,%rax
    515c:	and    0x58(%r13),%eax
    5160:	mov    %eax,%eax
    5162:	mov    0x70(%r13),%rcx
    5166:	mov    %si,(%rcx,%rax,2)
    516a:	mov    0x78(%r13),%rcx
    516e:	mov    0x80(%r13),%eax
    5175:	mov    %dx,(%rcx,%rax,2)
    5179:	mov    0x172c(%r13),%ecx
    5180:	lea    -0x1(%rcx),%eax
    5183:	mov    %eax,0x172c(%r13)
    518a:	mov    0xb4(%r13),%eax
    5191:	lea    -0x1(%rax,%rcx,1),%eax
    5195:	cmp    $0x2,%eax
    5198:	jbe    503b <fill_window+0xbb>
    519e:	add    $0x1,%edx
    51a1:	mov    0x172c(%r13),%eax
    51a8:	test   %eax,%eax
    51aa:	jne    5122 <fill_window+0x1a2>
    51b0:	jmpq   503b <fill_window+0xbb>
    51b5:	sub    %r15,%r14
    51b8:	cmp    $0x102,%r14
    51bf:	jbe    51c7 <fill_window+0x247>
    51c1:	mov    $0x102,%r14d
    51c7:	mov    %r15,%rdi
    51ca:	add    0x60(%r13),%rdi
    51ce:	mov    %r14d,%edx
    51d1:	callq  2170 <memset@plt>
    51d6:	lea    (%r15,%r14,1),%rax
    51da:	mov    %rax,0x1738(%r13)
    51e1:	mov    -0x18(%rbp),%r15
    51e5:	mov    -0x10(%rbp),%r14
    51e9:	mov    -0x8(%rbp),%r13
    51ed:	leaveq 
    51ee:	retq   
    51ef:	sub    %rdi,%r14
    51f2:	sub    %rdi,%r15
    51f5:	cmp    %r15,%r14
    51f8:	jae    51fd <fill_window+0x27d>
    51fa:	mov    %r14,%r15
    51fd:	add    0x60(%r13),%rdi
    5201:	mov    %r15d,%edx
    5204:	callq  2170 <memset@plt>
    5209:	add    0x1738(%r13),%r15
    5210:	mov    %r15,0x1738(%r13)
    5217:	mov    -0x18(%rbp),%r15
    521b:	mov    -0x10(%rbp),%r14
    521f:	mov    -0x8(%rbp),%r13
    5223:	leaveq 
    5224:	retq   
    5225:	data16 nopw %cs:0x0(%rax,%rax,1)

0000000000005230 <deflate_stored>:
    5230:	push   %rbp
    5231:	mov    %rsp,%rbp
    5234:	sub    $0x50,%rsp
    5238:	mov    %rsi,-0x48(%rbp)
    523c:	mov    %rbx,-0x8(%rbp)
    5240:	mov    %r12,-0x10(%rbp)
    5244:	mov    %r13,-0x18(%rbp)
    5248:	mov    %r14,-0x20(%rbp)
    524c:	mov    %r15,-0x28(%rbp)
    5250:	mov    0x50(%rdi),%eax
    5253:	mov    0x18(%rdi),%rdx
    5257:	add    $0xfffffffffffffffb,%rdx
    525b:	cmp    %rdx,%rax
    525e:	jae    5263 <deflate_stored+0x33>
    5260:	mov    %rax,%rdx
    5263:	mov    %rdx,-0x38(%rbp)
    5267:	mov    (%rdi),%rax
    526a:	mov    0x8(%rax),%eax
    526d:	mov    %rax,-0x30(%rbp)
    5271:	mov    %rdi,%rbx
    5274:	mov    %rsi,%r14
    5277:	mov    $0x1,%ecx
    527c:	xor    %esi,%esi
    527e:	mov    $0xffff,%r15d
    5284:	jmpq   53eb <deflate_stored+0x1bb>
    5289:	lea    (%r9,%r13,1),%r12d
    528d:	sub    %eax,%edi
    528f:	cmp    %edi,%r12d
    5292:	jbe    5297 <deflate_stored+0x67>
    5294:	mov    %rdi,%r12
    5297:	cmp    %edx,%r12d
    529a:	jae    52c1 <deflate_stored+0x91>
    529c:	test   %r12d,%r12d
    529f:	jne    52ab <deflate_stored+0x7b>
    52a1:	cmp    $0x4,%r14d
    52a5:	jne    5475 <deflate_stored+0x245>
    52ab:	test   %r14d,%r14d
    52ae:	je     547a <deflate_stored+0x24a>
    52b4:	lea    (%r9,%r13,1),%eax
    52b8:	cmp    %eax,%r12d
    52bb:	jne    547f <deflate_stored+0x24f>
    52c1:	cmp    $0x4,%r14d
    52c5:	je     5484 <deflate_stored+0x254>
    52cb:	mov    %rsi,%rcx
    52ce:	mov    %r11,%r14
    52d1:	mov    %r10,%r15
    52d4:	mov    %rcx,-0x40(%rbp)
    52d8:	mov    %rsi,%rdx
    52db:	mov    %rbx,%rdi
    52de:	callq  2160 <_tr_stored_block@plt>
    52e3:	mov    0x28(%rbx),%rcx
    52e7:	mov    0x10(%rbx),%rax
    52eb:	mov    %r12b,-0x4(%rcx,%rax,1)
    52f0:	mov    %r12,%rdx
    52f3:	shr    $0x8,%edx
    52f6:	mov    0x28(%rbx),%rcx
    52fa:	mov    0x10(%rbx),%rax
    52fe:	mov    %dl,-0x3(%rcx,%rax,1)
    5302:	mov    %r12,%rax
    5305:	not    %eax
    5307:	mov    0x28(%rbx),%rdx
    530b:	mov    0x10(%rbx),%rcx
    530f:	mov    %al,-0x2(%rdx,%rcx,1)
    5313:	shr    $0x8,%eax
    5316:	mov    0x28(%rbx),%rdx
    531a:	mov    0x10(%rbx),%rcx
    531e:	mov    %al,-0x1(%rdx,%rcx,1)
    5322:	mov    (%rbx),%rdi
    5325:	callq  6f40 <flush_pending>
    532a:	cmp    %r14d,%r15d
    532d:	je     538d <deflate_stored+0x15d>
    532f:	cmp    %r13d,%r12d
    5332:	jae    5337 <deflate_stored+0x107>
    5334:	mov    %r12,%r13
    5337:	mov    0x98(%rbx),%rsi
    533e:	add    0x60(%rbx),%rsi
    5342:	mov    %r13d,%r14d
    5345:	mov    (%rbx),%rax
    5348:	mov    0x18(%rax),%rdi
    534c:	mov    %r14,%rdx
    534f:	callq  21f0 <memcpy@plt>
    5354:	mov    (%rbx),%rcx
    5357:	mov    %r14,%rax
    535a:	add    0x18(%rcx),%rax
    535e:	mov    %rax,0x18(%rcx)
    5362:	mov    (%rbx),%rcx
    5365:	mov    0x20(%rcx),%eax
    5368:	sub    %r13d,%eax
    536b:	mov    %eax,0x20(%rcx)
    536e:	mov    (%rbx),%rcx
    5371:	mov    %r14,%rax
    5374:	add    0x28(%rcx),%rax
    5378:	mov    %rax,0x28(%rcx)
    537c:	sub    %r13d,%r12d
    537f:	add    0x98(%rbx),%r14
    5386:	mov    %r14,0x98(%rbx)
    538d:	test   %r12d,%r12d
    5390:	je     53c9 <deflate_stored+0x199>
    5392:	mov    (%rbx),%rdi
    5395:	mov    0x18(%rdi),%rsi
    5399:	mov    %r12,%rdx
    539c:	callq  7020 <read_buf>
    53a1:	mov    %r12d,%eax
    53a4:	mov    (%rbx),%rdx
    53a7:	mov    %rax,%rcx
    53aa:	add    0x18(%rdx),%rcx
    53ae:	mov    %rcx,0x18(%rdx)
    53b2:	mov    (%rbx),%rdx
    53b5:	mov    0x20(%rdx),%ecx
    53b8:	sub    %r12d,%ecx
    53bb:	mov    %ecx,0x20(%rdx)
    53be:	mov    (%rbx),%rcx
    53c1:	add    0x28(%rcx),%rax
    53c5:	mov    %rax,0x28(%rcx)
    53c9:	mov    -0x40(%rbp),%r12
    53cd:	test   %r12d,%r12d
    53d0:	jne    549e <deflate_stored+0x26e>
    53d6:	mov    $0x1,%ecx
    53db:	xor    %esi,%esi
    53dd:	mov    -0x48(%rbp),%r14
    53e1:	mov    -0x38(%rbp),%rdx
    53e5:	mov    $0xffff,%r15d
    53eb:	mov    0x1734(%rbx),%eax
    53f1:	add    $0x2a,%eax
    53f4:	sar    $0x3,%eax
    53f7:	mov    (%rbx),%r9
    53fa:	mov    0x20(%r9),%edi
    53fe:	cmp    %edi,%eax
    5400:	jbe    54b4 <deflate_stored+0x284>
    5406:	mov    %rsi,%r12
    5409:	mov    (%rbx),%rdx
    540c:	mov    0x8(%rdx),%eax
    540f:	mov    -0x30(%rbp),%r13
    5413:	cmp    %r13d,%eax
    5416:	je     5540 <deflate_stored+0x310>
    541c:	sub    %eax,%r13d
    541f:	mov    0x50(%rbx),%r9d
    5423:	cmp    %r13d,%r9d
    5426:	jbe    54e7 <deflate_stored+0x2b7>
    542c:	mov    0xac(%rbx),%r8d
    5433:	mov    0x68(%rbx),%rax
    5437:	sub    %r8,%rax
    543a:	mov    %r13d,%edx
    543d:	cmp    %rax,%rdx
    5440:	jae    5576 <deflate_stored+0x346>
    5446:	mov    0xac(%rbx),%edi
    544c:	add    0x60(%rbx),%rdi
    5450:	mov    (%rbx),%rax
    5453:	mov    (%rax),%rsi
    5456:	mov    %r13d,%eax
    5459:	sub    %rax,%rsi
    545c:	mov    %rcx,%r15
    545f:	callq  21f0 <memcpy@plt>
    5464:	mov    %r13,%rax
    5467:	add    0xac(%rbx),%eax
    546d:	mov    %r15,%rcx
    5470:	jmpq   550c <deflate_stored+0x2dc>
    5475:	mov    %rsi,%r12
    5478:	jmp    5409 <deflate_stored+0x1d9>
    547a:	mov    %rsi,%r12
    547d:	jmp    5409 <deflate_stored+0x1d9>
    547f:	mov    %rsi,%r12
    5482:	jmp    5409 <deflate_stored+0x1d9>
    5484:	mov    (%rbx),%rax
    5487:	mov    0x8(%rax),%eax
    548a:	add    %r13d,%eax
    548d:	cmp    %eax,%r12d
    5490:	je     52ce <deflate_stored+0x9e>
    5496:	mov    %rsi,%rcx
    5499:	jmpq   52ce <deflate_stored+0x9e>
    549e:	mov    $0x1,%ecx
    54a3:	xor    %esi,%esi
    54a5:	mov    -0x48(%rbp),%r14
    54a9:	mov    $0xffff,%r15d
    54af:	jmpq   5409 <deflate_stored+0x1d9>
    54b4:	mov    0xac(%rbx),%r11d
    54bb:	mov    0x98(%rbx),%r10d
    54c2:	mov    %r11,%r13
    54c5:	sub    %r10d,%r13d
    54c8:	mov    %r13d,%r8d
    54cb:	mov    0x8(%r9),%r9d
    54cf:	add    %r9,%r8
    54d2:	cmp    $0xfffe,%r8
    54d9:	jbe    5289 <deflate_stored+0x59>
    54df:	mov    %r15,%r12
    54e2:	jmpq   528d <deflate_stored+0x5d>
    54e7:	movl   $0x2,0x1728(%rbx)
    54f1:	mov    (%rdx),%rsi
    54f4:	sub    %r9,%rsi
    54f7:	mov    %r9,%rdx
    54fa:	mov    %rcx,%r15
    54fd:	mov    0x60(%rbx),%rdi
    5501:	callq  21f0 <memcpy@plt>
    5506:	mov    0x50(%rbx),%eax
    5509:	mov    %r15,%rcx
    550c:	mov    %eax,%edx
    550e:	mov    %rdx,0x98(%rbx)
    5515:	mov    %eax,0xac(%rbx)
    551b:	mov    0x172c(%rbx),%edx
    5521:	mov    0x50(%rbx),%eax
    5524:	sub    %edx,%eax
    5526:	cmp    %eax,%r13d
    5529:	jbe    552e <deflate_stored+0x2fe>
    552b:	mov    %rax,%r13
    552e:	lea    (%rdx,%r13,1),%eax
    5532:	mov    %eax,0x172c(%rbx)
    5538:	xor    %esi,%esi
    553a:	mov    $0xffff,%r15d
    5540:	mov    0xac(%rbx),%eax
    5546:	cmp    0x1738(%rbx),%rax
    554d:	jbe    5556 <deflate_stored+0x326>
    554f:	mov    %rax,0x1738(%rbx)
    5556:	test   %r12d,%r12d
    5559:	je     55b2 <deflate_stored+0x382>
    555b:	mov    $0x3,%eax
    5560:	mov    -0x28(%rbp),%r15
    5564:	mov    -0x20(%rbp),%r14
    5568:	mov    -0x18(%rbp),%r13
    556c:	mov    -0x10(%rbp),%r12
    5570:	mov    -0x8(%rbp),%rbx
    5574:	leaveq 
    5575:	retq   
    5576:	sub    %r9d,%r8d
    5579:	mov    %r8d,0xac(%rbx)
    5580:	mov    0x60(%rbx),%rdi
    5584:	lea    (%r9,%rdi,1),%rsi
    5588:	mov    %r8d,%eax
    558b:	mov    %rdx,%r15
    558e:	mov    %rax,%rdx
    5591:	callq  21f0 <memcpy@plt>
    5596:	mov    0x1728(%rbx),%eax
    559c:	cmp    $0x1,%eax
    559f:	jbe    56e8 <deflate_stored+0x4b8>
    55a5:	mov    %r15,%rdx
    55a8:	mov    $0x1,%ecx
    55ad:	jmpq   5446 <deflate_stored+0x216>
    55b2:	test   %r14d,%r14d
    55b5:	jne    56fe <deflate_stored+0x4ce>
    55bb:	mov    0xac(%rbx),%edx
    55c1:	mov    0x68(%rbx),%eax
    55c4:	sub    %edx,%eax
    55c6:	lea    -0x1(%rax),%r12d
    55ca:	mov    (%rbx),%rax
    55cd:	cmp    0x8(%rax),%r12d
    55d1:	jb     5745 <deflate_stored+0x515>
    55d7:	mov    (%rbx),%rdi
    55da:	mov    0x8(%rdi),%eax
    55dd:	cmp    %r12d,%eax
    55e0:	jae    55e5 <deflate_stored+0x3b5>
    55e2:	mov    %rax,%r12
    55e5:	test   %r12d,%r12d
    55e8:	je     5618 <deflate_stored+0x3e8>
    55ea:	mov    0xac(%rbx),%eax
    55f0:	add    0x60(%rbx),%rax
    55f4:	mov    %rsi,%r13
    55f7:	mov    %rax,%rsi
    55fa:	mov    %r12,%rdx
    55fd:	callq  7020 <read_buf>
    5602:	add    0xac(%rbx),%r12d
    5609:	mov    %r12d,0xac(%rbx)
    5610:	mov    %r13,%rsi
    5613:	mov    $0x1,%ecx
    5618:	mov    0xac(%rbx),%eax
    561e:	cmp    0x1738(%rbx),%rax
    5625:	jbe    562e <deflate_stored+0x3fe>
    5627:	mov    %rax,0x1738(%rbx)
    562e:	mov    0x18(%rbx),%rdx
    5632:	mov    0x1734(%rbx),%eax
    5638:	add    $0x2a,%eax
    563b:	sar    $0x3,%eax
    563e:	mov    %eax,%eax
    5640:	sub    %rax,%rdx
    5643:	cmp    $0xffff,%rdx
    564a:	ja     564f <deflate_stored+0x41f>
    564c:	mov    %rdx,%r15
    564f:	mov    0x50(%rbx),%eax
    5652:	cmp    %eax,%r15d
    5655:	ja     565a <deflate_stored+0x42a>
    5657:	mov    %r15,%rax
    565a:	mov    0xac(%rbx),%r8d
    5661:	mov    0x98(%rbx),%edi
    5667:	mov    %r8,%rdx
    566a:	sub    %edi,%edx
    566c:	cmp    %eax,%edx
    566e:	jb     57a6 <deflate_stored+0x576>
    5674:	cmp    %edx,%r15d
    5677:	jb     567c <deflate_stored+0x44c>
    5679:	mov    %rdx,%r15
    567c:	cmp    $0x4,%r14d
    5680:	je     57b8 <deflate_stored+0x588>
    5686:	mov    %rsi,%rcx
    5689:	mov    0x98(%rbx),%rax
    5690:	add    0x60(%rbx),%rax
    5694:	mov    %r15d,%r12d
    5697:	mov    %rsi,%r14
    569a:	mov    %rax,%rsi
    569d:	mov    %rbx,%rdi
    56a0:	mov    %r12,%rdx
    56a3:	mov    %rcx,%r13
    56a6:	callq  2160 <_tr_stored_block@plt>
    56ab:	add    0x98(%rbx),%r12
    56b2:	mov    %r12,0x98(%rbx)
    56b9:	mov    (%rbx),%rdi
    56bc:	callq  6f40 <flush_pending>
    56c1:	mov    %r14,%rsi
    56c4:	test   %r13d,%r13d
    56c7:	je     57ca <deflate_stored+0x59a>
    56cd:	mov    $0x2,%eax
    56d2:	mov    -0x28(%rbp),%r15
    56d6:	mov    -0x20(%rbp),%r14
    56da:	mov    -0x18(%rbp),%r13
    56de:	mov    -0x10(%rbp),%r12
    56e2:	mov    -0x8(%rbp),%rbx
    56e6:	leaveq 
    56e7:	retq   
    56e8:	add    $0x1,%eax
    56eb:	mov    %eax,0x1728(%rbx)
    56f1:	mov    %r15,%rdx
    56f4:	mov    $0x1,%ecx
    56f9:	jmpq   5446 <deflate_stored+0x216>
    56fe:	cmp    $0x4,%r14d
    5702:	je     55bb <deflate_stored+0x38b>
    5708:	mov    (%rbx),%rax
    570b:	mov    0x8(%rax),%eax
    570e:	test   %eax,%eax
    5710:	jne    55bb <deflate_stored+0x38b>
    5716:	mov    0x98(%rbx),%rdx
    571d:	mov    0xac(%rbx),%eax
    5723:	cmp    %rax,%rdx
    5726:	jne    55bb <deflate_stored+0x38b>
    572c:	mov    %rcx,%rax
    572f:	mov    -0x28(%rbp),%r15
    5733:	mov    -0x20(%rbp),%r14
    5737:	mov    -0x18(%rbp),%r13
    573b:	mov    -0x10(%rbp),%r12
    573f:	mov    -0x8(%rbp),%rbx
    5743:	leaveq 
    5744:	retq   
    5745:	mov    0x98(%rbx),%rax
    574c:	mov    0x50(%rbx),%r8d
    5750:	cmp    %rax,%r8
    5753:	jg     55d7 <deflate_stored+0x3a7>
    5759:	sub    %r8,%rax
    575c:	mov    %rax,0x98(%rbx)
    5763:	sub    %r8d,%edx
    5766:	mov    %edx,0xac(%rbx)
    576c:	mov    0x60(%rbx),%rdi
    5770:	lea    (%r8,%rdi,1),%rax
    5774:	mov    %edx,%edx
    5776:	mov    %rsi,%r13
    5779:	mov    %rax,%rsi
    577c:	callq  21f0 <memcpy@plt>
    5781:	mov    0x1728(%rbx),%eax
    5787:	cmp    $0x1,%eax
    578a:	ja     5795 <deflate_stored+0x565>
    578c:	add    $0x1,%eax
    578f:	mov    %eax,0x1728(%rbx)
    5795:	add    0x50(%rbx),%r12d
    5799:	mov    %r13,%rsi
    579c:	mov    $0x1,%ecx
    57a1:	jmpq   55d7 <deflate_stored+0x3a7>
    57a6:	cmp    %r8d,%edi
    57a9:	je     57e3 <deflate_stored+0x5b3>
    57ab:	test   %r14d,%r14d
    57ae:	jne    57f1 <deflate_stored+0x5c1>
    57b0:	mov    %rsi,%r13
    57b3:	jmpq   56c4 <deflate_stored+0x494>
    57b8:	mov    (%rbx),%rax
    57bb:	mov    0x8(%rax),%eax
    57be:	test   %eax,%eax
    57c0:	je     5803 <deflate_stored+0x5d3>
    57c2:	mov    %rsi,%rcx
    57c5:	jmpq   5689 <deflate_stored+0x459>
    57ca:	mov    %rsi,%rax
    57cd:	mov    -0x28(%rbp),%r15
    57d1:	mov    -0x20(%rbp),%r14
    57d5:	mov    -0x18(%rbp),%r13
    57d9:	mov    -0x10(%rbp),%r12
    57dd:	mov    -0x8(%rbp),%rbx
    57e1:	leaveq 
    57e2:	retq   
    57e3:	cmp    $0x4,%r14d
    57e7:	je     57ab <deflate_stored+0x57b>
    57e9:	mov    %rsi,%r13
    57ec:	jmpq   56c4 <deflate_stored+0x494>
    57f1:	mov    (%rbx),%rax
    57f4:	mov    0x8(%rax),%eax
    57f7:	test   %eax,%eax
    57f9:	je     5814 <deflate_stored+0x5e4>
    57fb:	mov    %rsi,%r13
    57fe:	jmpq   56c4 <deflate_stored+0x494>
    5803:	cmp    %r15d,%edx
    5806:	je     5689 <deflate_stored+0x459>
    580c:	mov    %rsi,%rcx
    580f:	jmpq   5689 <deflate_stored+0x459>
    5814:	cmp    %edx,%r15d
    5817:	jae    5674 <deflate_stored+0x444>
    581d:	mov    %rsi,%r13
    5820:	jmpq   56c4 <deflate_stored+0x494>
    5825:	data16 nopw %cs:0x0(%rax,%rax,1)

0000000000005830 <deflate_fast>:
    5830:	push   %rbp
    5831:	mov    %rsp,%rbp
    5834:	sub    $0x30,%rsp
    5838:	mov    %rbx,-0x8(%rbp)
    583c:	mov    %r12,-0x10(%rbp)
    5840:	mov    %r13,-0x18(%rbp)
    5844:	mov    %r14,-0x20(%rbp)
    5848:	mov    %r15,-0x28(%rbp)
    584c:	mov    %rdi,%r12
    584f:	mov    %rsi,%r13
    5852:	mov    0x12797(%rip),%r14        # 17ff0 <_dist_code@@Base+0x281c>
    5859:	mov    0x12768(%rip),%r15        # 17fc8 <_length_code@@Base+0x28f4>
    5860:	xor    %ebx,%ebx
    5862:	mov    $0x1,%eax
    5867:	jmp    58bb <deflate_fast+0x8b>
    5869:	mov    %eax,%esi
    586b:	add    0x60(%r12),%rsi
    5870:	mov    0xac(%r12),%edx
    5878:	mov    0x98(%r12),%rax
    5880:	sub    %rax,%rdx
    5883:	mov    %r12,%rdi
    5886:	mov    %rbx,%rcx
    5889:	callq  2120 <_tr_flush_block@plt>
    588e:	mov    0xac(%r12),%eax
    5896:	mov    %rax,0x98(%r12)
    589e:	mov    (%r12),%rdi
    58a2:	callq  6f40 <flush_pending>
    58a7:	mov    (%r12),%rax
    58ab:	mov    0x20(%rax),%eax
    58ae:	test   %eax,%eax
    58b0:	je     5942 <deflate_fast+0x112>
    58b6:	mov    $0x1,%eax
    58bb:	mov    0xb4(%r12),%ecx
    58c3:	cmp    $0x105,%ecx
    58c9:	ja     5960 <deflate_fast+0x130>
    58cf:	mov    %r12,%rdi
    58d2:	callq  4f80 <fill_window>
    58d7:	mov    0xb4(%r12),%eax
    58df:	cmp    $0x105,%eax
    58e4:	ja     58ef <deflate_fast+0xbf>
    58e6:	test   %r13d,%r13d
    58e9:	je     5979 <deflate_fast+0x149>
    58ef:	test   %eax,%eax
    58f1:	jne    595b <deflate_fast+0x12b>
    58f3:	mov    $0x2,%r14d
    58f9:	mov    0xac(%r12),%eax
    5901:	cmp    $0x1,%eax
    5904:	jbe    5909 <deflate_fast+0xd9>
    5906:	mov    %r14,%rax
    5909:	mov    %eax,0x172c(%r12)
    5911:	cmp    $0x4,%r13d
    5915:	je     5992 <deflate_fast+0x162>
    5917:	mov    0x170c(%r12),%eax
    591f:	test   %eax,%eax
    5921:	jne    5a0a <deflate_fast+0x1da>
    5927:	mov    -0x28(%rbp),%r15
    592b:	mov    -0x20(%rbp),%r14
    592f:	mov    -0x18(%rbp),%r13
    5933:	mov    -0x10(%rbp),%r12
    5937:	mov    -0x8(%rbp),%rbx
    593b:	mov    $0x1,%eax
    5940:	leaveq 
    5941:	retq   
    5942:	mov    %rbx,%rax
    5945:	mov    -0x28(%rbp),%r15
    5949:	mov    -0x20(%rbp),%r14
    594d:	mov    -0x18(%rbp),%r13
    5951:	mov    -0x10(%rbp),%r12
    5955:	mov    -0x8(%rbp),%rbx
    5959:	leaveq 
    595a:	retq   
    595b:	mov    $0x1,%eax
    5960:	mov    0xb4(%r12),%ecx
    5968:	cmp    $0x2,%ecx
    596b:	ja     5a23 <deflate_fast+0x1f3>
    5971:	mov    %rbx,%rsi
    5974:	jmpq   5a92 <deflate_fast+0x262>
    5979:	mov    %rbx,%rax
    597c:	mov    -0x28(%rbp),%r15
    5980:	mov    -0x20(%rbp),%r14
    5984:	mov    -0x18(%rbp),%r13
    5988:	mov    -0x10(%rbp),%r12
    598c:	mov    -0x8(%rbp),%rbx
    5990:	leaveq 
    5991:	retq   
    5992:	mov    0x98(%r12),%rax
    599a:	test   %rax,%rax
    599d:	js     59a6 <deflate_fast+0x176>
    599f:	mov    %eax,%ebx
    59a1:	add    0x60(%r12),%rbx
    59a6:	mov    0xac(%r12),%edx
    59ae:	mov    0x98(%r12),%rax
    59b6:	sub    %rax,%rdx
    59b9:	mov    %rbx,%rsi
    59bc:	mov    %r12,%rdi
    59bf:	mov    $0x1,%ecx
    59c4:	callq  2120 <_tr_flush_block@plt>
    59c9:	mov    0xac(%r12),%eax
    59d1:	mov    %rax,0x98(%r12)
    59d9:	mov    (%r12),%rdi
    59dd:	callq  6f40 <flush_pending>
    59e2:	mov    (%r12),%rax
    59e6:	mov    0x20(%rax),%eax
    59e9:	test   %eax,%eax
    59eb:	jne    5b51 <deflate_fast+0x321>
    59f1:	mov    %r14,%rax
    59f4:	mov    -0x28(%rbp),%r15
    59f8:	mov    -0x20(%rbp),%r14
    59fc:	mov    -0x18(%rbp),%r13
    5a00:	mov    -0x10(%rbp),%r12
    5a04:	mov    -0x8(%rbp),%rbx
    5a08:	leaveq 
    5a09:	retq   
    5a0a:	mov    0x98(%r12),%rax
    5a12:	test   %rax,%rax
    5a15:	jns    5b6c <deflate_fast+0x33c>
    5a1b:	mov    %rbx,%rsi
    5a1e:	jmpq   5b73 <deflate_fast+0x343>
    5a23:	mov    0xac(%r12),%edi
    5a2b:	lea    0x2(%rdi),%ecx
    5a2e:	mov    %ecx,%edx
    5a30:	mov    0x60(%r12),%rcx
    5a35:	movzbl (%rdx,%rcx,1),%edx
    5a39:	mov    0x80(%r12),%esi
    5a41:	mov    0x90(%r12),%ecx
    5a49:	shl    %cl,%esi
    5a4b:	xor    %esi,%edx
    5a4d:	and    0x8c(%r12),%edx
    5a55:	mov    %edx,0x80(%r12)
    5a5d:	mov    %edx,%ecx
    5a5f:	mov    0x78(%r12),%rdx
    5a64:	movzwl (%rdx,%rcx,2),%esi
    5a68:	and    0x58(%r12),%edi
    5a6d:	mov    %edi,%ecx
    5a6f:	mov    0x70(%r12),%rdx
    5a74:	mov    %si,(%rdx,%rcx,2)
    5a78:	movzwl 0xac(%r12),%edi
    5a81:	mov    0x78(%r12),%rdx
    5a86:	mov    0x80(%r12),%ecx
    5a8e:	mov    %di,(%rdx,%rcx,2)
    5a92:	test   %esi,%esi
    5a94:	je     5ac4 <deflate_fast+0x294>
    5a96:	mov    0xac(%r12),%edx
    5a9e:	sub    %esi,%edx
    5aa0:	mov    0x50(%r12),%ecx
    5aa5:	add    $0xfffffefa,%ecx
    5aab:	cmp    %edx,%ecx
    5aad:	jb     5ac4 <deflate_fast+0x294>
    5aaf:	mov    %r12,%rdi
    5ab2:	callq  70e0 <longest_match>
    5ab7:	mov    %eax,0xa0(%r12)
    5abf:	mov    $0x1,%eax
    5ac4:	mov    0xa0(%r12),%edi
    5acc:	cmp    $0x2,%edi
    5acf:	ja     5bd2 <deflate_fast+0x3a2>
    5ad5:	mov    0x1710(%r12),%rdx
    5add:	mov    0x170c(%r12),%ecx
    5ae5:	mov    0xac(%r12),%edi
    5aed:	mov    0x60(%r12),%rsi
    5af2:	movzbl (%rdi,%rsi,1),%esi
    5af6:	movw   $0x0,(%rdx,%rcx,2)
    5afc:	mov    0x170c(%r12),%edx
    5b04:	lea    0x1(%rdx),%ecx
    5b07:	mov    %ecx,0x170c(%r12)
    5b0f:	mov    0x1700(%r12),%rcx
    5b17:	mov    %sil,(%rdx,%rcx,1)
    5b1b:	movzwl 0xd4(%r12,%rsi,4),%ecx
    5b24:	add    $0x1,%ecx
    5b27:	mov    %cx,0xd4(%r12,%rsi,4)
    5b30:	mov    0x1708(%r12),%ecx
    5b38:	add    $0xffffffff,%ecx
    5b3b:	cmp    0x170c(%r12),%ecx
    5b43:	je     5c67 <deflate_fast+0x437>
    5b49:	mov    %rbx,%rsi
    5b4c:	jmpq   5c6a <deflate_fast+0x43a>
    5b51:	mov    $0x3,%eax
    5b56:	mov    -0x28(%rbp),%r15
    5b5a:	mov    -0x20(%rbp),%r14
    5b5e:	mov    -0x18(%rbp),%r13
    5b62:	mov    -0x10(%rbp),%r12
    5b66:	mov    -0x8(%rbp),%rbx
    5b6a:	leaveq 
    5b6b:	retq   
    5b6c:	mov    %eax,%esi
    5b6e:	add    0x60(%r12),%rsi
    5b73:	mov    0xac(%r12),%edx
    5b7b:	mov    0x98(%r12),%rax
    5b83:	sub    %rax,%rdx
    5b86:	mov    %r12,%rdi
    5b89:	mov    %rbx,%rcx
    5b8c:	callq  2120 <_tr_flush_block@plt>
    5b91:	mov    0xac(%r12),%eax
    5b99:	mov    %rax,0x98(%r12)
    5ba1:	mov    (%r12),%rdi
    5ba5:	callq  6f40 <flush_pending>
    5baa:	mov    (%r12),%rax
    5bae:	mov    0x20(%rax),%eax
    5bb1:	test   %eax,%eax
    5bb3:	jne    5cb1 <deflate_fast+0x481>
    5bb9:	mov    %rbx,%rax
    5bbc:	mov    -0x28(%rbp),%r15
    5bc0:	mov    -0x20(%rbp),%r14
    5bc4:	mov    -0x18(%rbp),%r13
    5bc8:	mov    -0x10(%rbp),%r12
    5bcc:	mov    -0x8(%rbp),%rbx
    5bd0:	leaveq 
    5bd1:	retq   
    5bd2:	mov    0xac(%r12),%ecx
    5bda:	mov    0xb0(%r12),%edx
    5be2:	sub    %edx,%ecx
    5be4:	mov    0x1710(%r12),%rsi
    5bec:	mov    0x170c(%r12),%edx
    5bf4:	mov    %cx,(%rsi,%rdx,2)
    5bf8:	mov    0x170c(%r12),%esi
    5c00:	lea    0x1(%rsi),%edx
    5c03:	mov    %edx,0x170c(%r12)
    5c0b:	add    $0xfd,%edi
    5c11:	mov    0x1700(%r12),%rdx
    5c19:	mov    %dil,(%rsi,%rdx,1)
    5c1d:	movzbl %dil,%edx
    5c21:	movzbl (%rdx,%r15,1),%edx
    5c26:	add    $0x101,%edx
    5c2c:	movslq %edx,%rsi
    5c2f:	movzwl 0xd4(%r12,%rsi,4),%edx
    5c38:	add    $0x1,%edx
    5c3b:	mov    %dx,0xd4(%r12,%rsi,4)
    5c44:	add    $0xffff,%ecx
    5c4a:	cmp    $0xff,%cx
    5c4f:	jbe    5ccc <deflate_fast+0x49c>
    5c51:	movzwl %cx,%ecx
    5c54:	shr    $0x7,%ecx
    5c57:	add    $0x100,%ecx
    5c5d:	movslq %ecx,%rcx
    5c60:	movzbl (%rcx,%r14,1),%ecx
    5c65:	jmp    5cd4 <deflate_fast+0x4a4>
    5c67:	mov    %rax,%rsi
    5c6a:	mov    0xb4(%r12),%ecx
    5c72:	add    $0xffffffff,%ecx
    5c75:	mov    %ecx,0xb4(%r12)
    5c7d:	mov    0xac(%r12),%ecx
    5c85:	add    $0x1,%ecx
    5c88:	mov    %ecx,0xac(%r12)
    5c90:	test   %esi,%esi
    5c92:	jle    58bb <deflate_fast+0x8b>
    5c98:	mov    0x98(%r12),%rax
    5ca0:	test   %rax,%rax
    5ca3:	jns    5869 <deflate_fast+0x39>
    5ca9:	mov    %rbx,%rsi
    5cac:	jmpq   5870 <deflate_fast+0x40>
    5cb1:	mov    -0x28(%rbp),%r15
    5cb5:	mov    -0x20(%rbp),%r14
    5cb9:	mov    -0x18(%rbp),%r13
    5cbd:	mov    -0x10(%rbp),%r12
    5cc1:	mov    -0x8(%rbp),%rbx
    5cc5:	mov    $0x1,%eax
    5cca:	leaveq 
    5ccb:	retq   
    5ccc:	movzwl %cx,%ecx
    5ccf:	movzbl (%rcx,%r14,1),%ecx
    5cd4:	movslq %ecx,%rdx
    5cd7:	movzwl 0x9c8(%r12,%rdx,4),%ecx
    5ce0:	add    $0x1,%ecx
    5ce3:	mov    %cx,0x9c8(%r12,%rdx,4)
    5cec:	mov    0x1708(%r12),%ecx
    5cf4:	add    $0xffffffff,%ecx
    5cf7:	cmp    0x170c(%r12),%ecx
    5cff:	je     5d06 <deflate_fast+0x4d6>
    5d01:	mov    %rbx,%rsi
    5d04:	jmp    5d09 <deflate_fast+0x4d9>
    5d06:	mov    %rax,%rsi
    5d09:	mov    0xa0(%r12),%edx
    5d11:	mov    0xb4(%r12),%ecx
    5d19:	sub    %edx,%ecx
    5d1b:	mov    %ecx,0xb4(%r12)
    5d23:	mov    0xc0(%r12),%edi
    5d2b:	cmp    %edx,%edi
    5d2d:	jb     5df6 <deflate_fast+0x5c6>
    5d33:	cmp    $0x2,%ecx
    5d36:	jbe    5df6 <deflate_fast+0x5c6>
    5d3c:	lea    -0x1(%rdx),%ecx
    5d3f:	mov    %ecx,0xa0(%r12)
    5d47:	mov    0xac(%r12),%ecx
    5d4f:	lea    0x1(%rcx),%r8d
    5d53:	mov    %r8d,0xac(%r12)
    5d5b:	add    $0x3,%ecx
    5d5e:	mov    %ecx,%edx
    5d60:	mov    0x60(%r12),%rcx
    5d65:	movzbl (%rdx,%rcx,1),%edx
    5d69:	mov    0x80(%r12),%edi
    5d71:	mov    0x90(%r12),%ecx
    5d79:	shl    %cl,%edi
    5d7b:	xor    %edi,%edx
    5d7d:	and    0x8c(%r12),%edx
    5d85:	mov    %edx,0x80(%r12)
    5d8d:	mov    %edx,%ecx
    5d8f:	mov    0x78(%r12),%rdx
    5d94:	movzwl (%rdx,%rcx,2),%edi
    5d98:	and    0x58(%r12),%r8d
    5d9d:	mov    %r8d,%ecx
    5da0:	mov    0x70(%r12),%rdx
    5da5:	mov    %di,(%rdx,%rcx,2)
    5da9:	movzwl 0xac(%r12),%edi
    5db2:	mov    0x78(%r12),%rdx
    5db7:	mov    0x80(%r12),%ecx
    5dbf:	mov    %di,(%rdx,%rcx,2)
    5dc3:	mov    0xa0(%r12),%ecx
    5dcb:	add    $0xffffffff,%ecx
    5dce:	mov    %ecx,0xa0(%r12)
    5dd6:	test   %ecx,%ecx
    5dd8:	jne    5d47 <deflate_fast+0x517>
    5dde:	mov    0xac(%r12),%ecx
    5de6:	add    $0x1,%ecx
    5de9:	mov    %ecx,0xac(%r12)
    5df1:	jmpq   5c90 <deflate_fast+0x460>
    5df6:	add    0xac(%r12),%edx
    5dfe:	mov    %edx,0xac(%r12)
    5e06:	movl   $0x0,0xa0(%r12)
    5e12:	mov    %edx,%ecx
    5e14:	mov    0x60(%r12),%r8
    5e19:	movzbl (%r8,%rcx,1),%edi
    5e1e:	mov    %edi,0x80(%r12)
    5e26:	lea    0x1(%rdx),%ecx
    5e29:	mov    %ecx,%ecx
    5e2b:	movzbl (%rcx,%r8,1),%edx
    5e30:	mov    0x90(%r12),%ecx
    5e38:	shl    %cl,%edi
    5e3a:	xor    %edi,%edx
    5e3c:	and    0x8c(%r12),%edx
    5e44:	mov    %edx,0x80(%r12)
    5e4c:	jmpq   5c90 <deflate_fast+0x460>
    5e51:	data16 nopw %cs:0x0(%rax,%rax,1)
    5e5c:	nopl   0x0(%rax)

0000000000005e60 <deflate_slow>:
    5e60:	push   %rbp
    5e61:	mov    %rsp,%rbp
    5e64:	sub    $0x30,%rsp
    5e68:	mov    %rbx,-0x8(%rbp)
    5e6c:	mov    %r12,-0x10(%rbp)
    5e70:	mov    %r13,-0x18(%rbp)
    5e74:	mov    %r14,-0x20(%rbp)
    5e78:	mov    %r15,-0x28(%rbp)
    5e7c:	mov    %rdi,%r12
    5e7f:	mov    %rsi,%r13
    5e82:	mov    0x12167(%rip),%r14        # 17ff0 <_dist_code@@Base+0x281c>
    5e89:	mov    0x12138(%rip),%r15        # 17fc8 <_length_code@@Base+0x28f4>
    5e90:	xor    %ebx,%ebx
    5e92:	mov    $0x1,%eax
    5e97:	jmp    5edb <deflate_slow+0x7b>
    5e99:	movslq 0xa8(%r12),%rcx
    5ea1:	test   %ecx,%ecx
    5ea3:	jne    5fde <deflate_slow+0x17e>
    5ea9:	movl   $0x1,0xa8(%r12)
    5eb5:	mov    0xac(%r12),%ecx
    5ebd:	add    $0x1,%ecx
    5ec0:	mov    %ecx,0xac(%r12)
    5ec8:	mov    0xb4(%r12),%ecx
    5ed0:	add    $0xffffffff,%ecx
    5ed3:	mov    %ecx,0xb4(%r12)
    5edb:	mov    0xb4(%r12),%ecx
    5ee3:	cmp    $0x105,%ecx
    5ee9:	ja     6064 <deflate_slow+0x204>
    5eef:	mov    %r12,%rdi
    5ef2:	callq  4f80 <fill_window>
    5ef7:	mov    0xb4(%r12),%eax
    5eff:	cmp    $0x105,%eax
    5f04:	ja     5f0f <deflate_slow+0xaf>
    5f06:	test   %r13d,%r13d
    5f09:	je     607d <deflate_slow+0x21d>
    5f0f:	test   %eax,%eax
    5f11:	jne    605f <deflate_slow+0x1ff>
    5f17:	movslq 0xa8(%r12),%rax
    5f1f:	test   %eax,%eax
    5f21:	je     5f8b <deflate_slow+0x12b>
    5f23:	mov    0x1710(%r12),%rdx
    5f2b:	mov    0x170c(%r12),%ecx
    5f33:	mov    0xac(%r12),%eax
    5f3b:	add    $0xffffffff,%eax
    5f3e:	mov    %eax,%esi
    5f40:	mov    0x60(%r12),%rax
    5f45:	movzbl (%rsi,%rax,1),%esi
    5f49:	movw   $0x0,(%rdx,%rcx,2)
    5f4f:	mov    0x170c(%r12),%ecx
    5f57:	lea    0x1(%rcx),%eax
    5f5a:	mov    %eax,0x170c(%r12)
    5f62:	mov    0x1700(%r12),%rax
    5f6a:	mov    %sil,(%rcx,%rax,1)
    5f6e:	lea    0xd4(%r12,%rsi,4),%rcx
    5f76:	movzwl (%rcx),%eax
    5f79:	add    $0x1,%eax
    5f7c:	mov    %ax,(%rcx)
    5f7f:	movl   $0x0,0xa8(%r12)
    5f8b:	mov    $0x2,%r14d
    5f91:	mov    0xac(%r12),%eax
    5f99:	cmp    $0x1,%eax
    5f9c:	jbe    5fa1 <deflate_slow+0x141>
    5f9e:	mov    %r14,%rax
    5fa1:	mov    %eax,0x172c(%r12)
    5fa9:	cmp    $0x4,%r13d
    5fad:	je     6096 <deflate_slow+0x236>
    5fb3:	mov    0x170c(%r12),%eax
    5fbb:	test   %eax,%eax
    5fbd:	jne    610e <deflate_slow+0x2ae>
    5fc3:	mov    -0x28(%rbp),%r15
    5fc7:	mov    -0x20(%rbp),%r14
    5fcb:	mov    -0x18(%rbp),%r13
    5fcf:	mov    -0x10(%rbp),%r12
    5fd3:	mov    -0x8(%rbp),%rbx
    5fd7:	mov    $0x1,%eax
    5fdc:	leaveq 
    5fdd:	retq   
    5fde:	mov    0x1710(%r12),%rsi
    5fe6:	mov    0x170c(%r12),%edx
    5fee:	mov    0xac(%r12),%ecx
    5ff6:	add    $0xffffffff,%ecx
    5ff9:	mov    %ecx,%edi
    5ffb:	mov    0x60(%r12),%rcx
    6000:	movzbl (%rdi,%rcx,1),%edi
    6004:	movw   $0x0,(%rsi,%rdx,2)
    600a:	mov    0x170c(%r12),%edx
    6012:	lea    0x1(%rdx),%ecx
    6015:	mov    %ecx,0x170c(%r12)
    601d:	mov    0x1700(%r12),%rcx
    6025:	mov    %dil,(%rdx,%rcx,1)
    6029:	movzwl 0xd4(%r12,%rdi,4),%ecx
    6032:	add    $0x1,%ecx
    6035:	mov    %cx,0xd4(%r12,%rdi,4)
    603e:	mov    0x1708(%r12),%ecx
    6046:	add    $0xffffffff,%ecx
    6049:	cmp    0x170c(%r12),%ecx
    6051:	je     6127 <deflate_slow+0x2c7>
    6057:	mov    %rbx,%rcx
    605a:	jmpq   612a <deflate_slow+0x2ca>
    605f:	mov    $0x1,%eax
    6064:	mov    0xb4(%r12),%ecx
    606c:	cmp    $0x2,%ecx
    606f:	ja     614b <deflate_slow+0x2eb>
    6075:	mov    %rbx,%rsi
    6078:	jmpq   61ba <deflate_slow+0x35a>
    607d:	mov    %rbx,%rax
    6080:	mov    -0x28(%rbp),%r15
    6084:	mov    -0x20(%rbp),%r14
    6088:	mov    -0x18(%rbp),%r13
    608c:	mov    -0x10(%rbp),%r12
    6090:	mov    -0x8(%rbp),%rbx
    6094:	leaveq 
    6095:	retq   
    6096:	mov    0x98(%r12),%rax
    609e:	test   %rax,%rax
    60a1:	js     60aa <deflate_slow+0x24a>
    60a3:	mov    %eax,%ebx
    60a5:	add    0x60(%r12),%rbx
    60aa:	mov    0xac(%r12),%edx
    60b2:	mov    0x98(%r12),%rax
    60ba:	sub    %rax,%rdx
    60bd:	mov    %rbx,%rsi
    60c0:	mov    %r12,%rdi
    60c3:	mov    $0x1,%ecx
    60c8:	callq  2120 <_tr_flush_block@plt>
    60cd:	mov    0xac(%r12),%eax
    60d5:	mov    %rax,0x98(%r12)
    60dd:	mov    (%r12),%rdi
    60e1:	callq  6f40 <flush_pending>
    60e6:	mov    (%r12),%rax
    60ea:	mov    0x20(%rax),%eax
    60ed:	test   %eax,%eax
    60ef:	jne    62f7 <deflate_slow+0x497>
    60f5:	mov    %r14,%rax
    60f8:	mov    -0x28(%rbp),%r15
    60fc:	mov    -0x20(%rbp),%r14
    6100:	mov    -0x18(%rbp),%r13
    6104:	mov    -0x10(%rbp),%r12
    6108:	mov    -0x8(%rbp),%rbx
    610c:	leaveq 
    610d:	retq   
    610e:	mov    0x98(%r12),%rax
    6116:	test   %rax,%rax
    6119:	jns    6312 <deflate_slow+0x4b2>
    611f:	mov    %rbx,%rsi
    6122:	jmpq   6319 <deflate_slow+0x4b9>
    6127:	mov    %rax,%rcx
    612a:	test   %ecx,%ecx
    612c:	jle    63be <deflate_slow+0x55e>
    6132:	mov    0x98(%r12),%rcx
    613a:	test   %rcx,%rcx
    613d:	jns    6378 <deflate_slow+0x518>
    6143:	mov    %rbx,%rsi
    6146:	jmpq   637f <deflate_slow+0x51f>
    614b:	mov    0xac(%r12),%edi
    6153:	lea    0x2(%rdi),%ecx
    6156:	mov    %ecx,%ecx
    6158:	mov    0x60(%r12),%rdx
    615d:	movzbl (%rcx,%rdx,1),%edx
    6161:	mov    0x80(%r12),%esi
    6169:	mov    0x90(%r12),%ecx
    6171:	shl    %cl,%esi
    6173:	xor    %esi,%edx
    6175:	and    0x8c(%r12),%edx
    617d:	mov    %edx,0x80(%r12)
    6185:	mov    %edx,%ecx
    6187:	mov    0x78(%r12),%rdx
    618c:	movzwl (%rdx,%rcx,2),%esi
    6190:	and    0x58(%r12),%edi
    6195:	mov    %edi,%ecx
    6197:	mov    0x70(%r12),%rdx
    619c:	mov    %si,(%rdx,%rcx,2)
    61a0:	movzwl 0xac(%r12),%edi
    61a9:	mov    0x78(%r12),%rdx
    61ae:	mov    0x80(%r12),%ecx
    61b6:	mov    %di,(%rdx,%rcx,2)
    61ba:	mov    0xa0(%r12),%edx
    61c2:	mov    %edx,0xb8(%r12)
    61ca:	mov    0xb0(%r12),%ecx
    61d2:	mov    %ecx,0xa4(%r12)
    61da:	movl   $0x2,0xa0(%r12)
    61e6:	test   %esi,%esi
    61e8:	je     622b <deflate_slow+0x3cb>
    61ea:	cmp    0xc0(%r12),%edx
    61f2:	jae    622b <deflate_slow+0x3cb>
    61f4:	mov    0xac(%r12),%edx
    61fc:	sub    %esi,%edx
    61fe:	mov    0x50(%r12),%ecx
    6203:	add    $0xfffffefa,%ecx
    6209:	cmp    %edx,%ecx
    620b:	jb     622b <deflate_slow+0x3cb>
    620d:	mov    %r12,%rdi
    6210:	callq  70e0 <longest_match>
    6215:	mov    %eax,0xa0(%r12)
    621d:	cmp    $0x5,%eax
    6220:	jbe    640c <deflate_slow+0x5ac>
    6226:	mov    $0x1,%eax
    622b:	mov    0xb8(%r12),%r8d
    6233:	cmp    $0x2,%r8d
    6237:	jbe    5e99 <deflate_slow+0x39>
    623d:	mov    0xa0(%r12),%ecx
    6245:	cmp    %r8d,%ecx
    6248:	ja     5e99 <deflate_slow+0x39>
    624e:	mov    0xb4(%r12),%esi
    6256:	mov    0xac(%r12),%r9d
    625e:	lea    -0x1(%r9),%ecx
    6262:	mov    0xa4(%r12),%edx
    626a:	sub    %edx,%ecx
    626c:	mov    0x1710(%r12),%rdi
    6274:	mov    0x170c(%r12),%edx
    627c:	mov    %cx,(%rdi,%rdx,2)
    6280:	mov    0x170c(%r12),%edi
    6288:	lea    0x1(%rdi),%edx
    628b:	mov    %edx,0x170c(%r12)
    6293:	add    $0xfd,%r8d
    629a:	mov    0x1700(%r12),%rdx
    62a2:	mov    %r8b,(%rdi,%rdx,1)
    62a6:	movzbl %r8b,%edx
    62aa:	movzbl (%rdx,%r15,1),%edx
    62af:	add    $0x101,%edx
    62b5:	movslq %edx,%rdi
    62b8:	movzwl 0xd4(%r12,%rdi,4),%edx
    62c1:	add    $0x1,%edx
    62c4:	mov    %dx,0xd4(%r12,%rdi,4)
    62cd:	add    $0xffff,%ecx
    62d3:	cmp    $0xff,%cx
    62d8:	jbe    6428 <deflate_slow+0x5c8>
    62de:	movzwl %cx,%ecx
    62e1:	shr    $0x7,%ecx
    62e4:	add    $0x100,%ecx
    62ea:	movslq %ecx,%rcx
    62ed:	movzbl (%rcx,%r14,1),%ecx
    62f2:	jmpq   6430 <deflate_slow+0x5d0>
    62f7:	mov    $0x3,%eax
    62fc:	mov    -0x28(%rbp),%r15
    6300:	mov    -0x20(%rbp),%r14
    6304:	mov    -0x18(%rbp),%r13
    6308:	mov    -0x10(%rbp),%r12
    630c:	mov    -0x8(%rbp),%rbx
    6310:	leaveq 
    6311:	retq   
    6312:	mov    %eax,%esi
    6314:	add    0x60(%r12),%rsi
    6319:	mov    0xac(%r12),%edx
    6321:	mov    0x98(%r12),%rax
    6329:	sub    %rax,%rdx
    632c:	mov    %r12,%rdi
    632f:	mov    %rbx,%rcx
    6332:	callq  2120 <_tr_flush_block@plt>
    6337:	mov    0xac(%r12),%eax
    633f:	mov    %rax,0x98(%r12)
    6347:	mov    (%r12),%rdi
    634b:	callq  6f40 <flush_pending>
    6350:	mov    (%r12),%rax
    6354:	mov    0x20(%rax),%eax
    6357:	test   %eax,%eax
    6359:	jne    6462 <deflate_slow+0x602>
    635f:	mov    %rbx,%rax
    6362:	mov    -0x28(%rbp),%r15
    6366:	mov    -0x20(%rbp),%r14
    636a:	mov    -0x18(%rbp),%r13
    636e:	mov    -0x10(%rbp),%r12
    6372:	mov    -0x8(%rbp),%rbx
    6376:	leaveq 
    6377:	retq   
    6378:	mov    %ecx,%esi
    637a:	add    0x60(%r12),%rsi
    637f:	mov    0xac(%r12),%edx
    6387:	mov    0x98(%r12),%rcx
    638f:	sub    %rcx,%rdx
    6392:	mov    %rbx,%rcx
    6395:	mov    %rax,%rbx
    6398:	mov    %r12,%rdi
    639b:	callq  2120 <_tr_flush_block@plt>
    63a0:	mov    0xac(%r12),%eax
    63a8:	mov    %rax,0x98(%r12)
    63b0:	mov    (%r12),%rdi
    63b4:	callq  6f40 <flush_pending>
    63b9:	mov    %rbx,%rax
    63bc:	xor    %ebx,%ebx
    63be:	mov    0xac(%r12),%ecx
    63c6:	add    $0x1,%ecx
    63c9:	mov    %ecx,0xac(%r12)
    63d1:	mov    0xb4(%r12),%ecx
    63d9:	add    $0xffffffff,%ecx
    63dc:	mov    %ecx,0xb4(%r12)
    63e4:	mov    (%r12),%rcx
    63e8:	mov    0x20(%rcx),%ecx
    63eb:	test   %ecx,%ecx
    63ed:	jne    5edb <deflate_slow+0x7b>
    63f3:	mov    %rbx,%rax
    63f6:	mov    -0x28(%rbp),%r15
    63fa:	mov    -0x20(%rbp),%r14
    63fe:	mov    -0x18(%rbp),%r13
    6402:	mov    -0x10(%rbp),%r12
    6406:	mov    -0x8(%rbp),%rbx
    640a:	leaveq 
    640b:	retq   
    640c:	movslq 0xc8(%r12),%rcx
    6414:	cmp    $0x1,%ecx
    6417:	je     647d <deflate_slow+0x61d>
    6419:	cmp    $0x3,%eax
    641c:	je     6493 <deflate_slow+0x633>
    641e:	mov    $0x1,%eax
    6423:	jmpq   622b <deflate_slow+0x3cb>
    6428:	movzwl %cx,%ecx
    642b:	movzbl (%rcx,%r14,1),%ecx
    6430:	movslq %ecx,%rdx
    6433:	movzwl 0x9c8(%r12,%rdx,4),%ecx
    643c:	add    $0x1,%ecx
    643f:	mov    %cx,0x9c8(%r12,%rdx,4)
    6448:	mov    0x1708(%r12),%ecx
    6450:	add    $0xffffffff,%ecx
    6453:	cmp    0x170c(%r12),%ecx
    645b:	je     64b6 <deflate_slow+0x656>
    645d:	mov    %rbx,%rdx
    6460:	jmp    64b9 <deflate_slow+0x659>
    6462:	mov    -0x28(%rbp),%r15
    6466:	mov    -0x20(%rbp),%r14
    646a:	mov    -0x18(%rbp),%r13
    646e:	mov    -0x10(%rbp),%r12
    6472:	mov    -0x8(%rbp),%rbx
    6476:	mov    $0x1,%eax
    647b:	leaveq 
    647c:	retq   
    647d:	movl   $0x2,0xa0(%r12)
    6489:	mov    $0x1,%eax
    648e:	jmpq   622b <deflate_slow+0x3cb>
    6493:	mov    0xac(%r12),%eax
    649b:	mov    0xb0(%r12),%ecx
    64a3:	sub    %ecx,%eax
    64a5:	cmp    $0x1000,%eax
    64aa:	ja     647d <deflate_slow+0x61d>
    64ac:	mov    $0x1,%eax
    64b1:	jmpq   622b <deflate_slow+0x3cb>
    64b6:	mov    %rax,%rdx
    64b9:	mov    0xb4(%r12),%ecx
    64c1:	mov    0xb8(%r12),%r8d
    64c9:	lea    -0x1(%r8),%edi
    64cd:	sub    %edi,%ecx
    64cf:	mov    %ecx,0xb4(%r12)
    64d7:	lea    -0x2(%r8),%ecx
    64db:	mov    %ecx,0xb8(%r12)
    64e3:	lea    -0x3(%r9,%rsi,1),%esi
    64e8:	mov    0xac(%r12),%ecx
    64f0:	lea    0x1(%rcx),%r9d
    64f4:	mov    %r9d,0xac(%r12)
    64fc:	cmp    %esi,%r9d
    64ff:	ja     656e <deflate_slow+0x70e>
    6501:	add    $0x3,%ecx
    6504:	mov    %ecx,%edi
    6506:	mov    0x60(%r12),%rcx
    650b:	movzbl (%rdi,%rcx,1),%edi
    650f:	mov    0x80(%r12),%r8d
    6517:	mov    0x90(%r12),%ecx
    651f:	shl    %cl,%r8d
    6522:	xor    %r8d,%edi
    6525:	and    0x8c(%r12),%edi
    652d:	mov    %edi,0x80(%r12)
    6535:	mov    %edi,%ecx
    6537:	mov    0x78(%r12),%rdi
    653c:	movzwl (%rdi,%rcx,2),%r8d
    6541:	and    0x58(%r12),%r9d
    6546:	mov    %r9d,%ecx
    6549:	mov    0x70(%r12),%rdi
    654e:	mov    %r8w,(%rdi,%rcx,2)
    6553:	movzwl 0xac(%r12),%r8d
    655c:	mov    0x78(%r12),%rdi
    6561:	mov    0x80(%r12),%ecx
    6569:	mov    %r8w,(%rdi,%rcx,2)
    656e:	mov    0xb8(%r12),%ecx
    6576:	add    $0xffffffff,%ecx
    6579:	mov    %ecx,0xb8(%r12)
    6581:	test   %ecx,%ecx
    6583:	jne    64e8 <deflate_slow+0x688>
    6589:	movl   $0x0,0xa8(%r12)
    6595:	movl   $0x2,0xa0(%r12)
    65a1:	mov    0xac(%r12),%ecx
    65a9:	add    $0x1,%ecx
    65ac:	mov    %ecx,0xac(%r12)
    65b4:	test   %edx,%edx
    65b6:	jle    5edb <deflate_slow+0x7b>
    65bc:	mov    0x98(%r12),%rax
    65c4:	test   %rax,%rax
    65c7:	jns    65ce <deflate_slow+0x76e>
    65c9:	mov    %rbx,%rsi
    65cc:	jmp    65d5 <deflate_slow+0x775>
    65ce:	mov    %eax,%esi
    65d0:	add    0x60(%r12),%rsi
    65d5:	mov    0xac(%r12),%edx
    65dd:	mov    0x98(%r12),%rax
    65e5:	sub    %rax,%rdx
    65e8:	mov    %r12,%rdi
    65eb:	mov    %rbx,%rcx
    65ee:	callq  2120 <_tr_flush_block@plt>
    65f3:	mov    0xac(%r12),%eax
    65fb:	mov    %rax,0x98(%r12)
    6603:	mov    (%r12),%rdi
    6607:	callq  6f40 <flush_pending>
    660c:	mov    (%r12),%rax
    6610:	mov    0x20(%rax),%eax
    6613:	test   %eax,%eax
    6615:	je     6621 <deflate_slow+0x7c1>
    6617:	mov    $0x1,%eax
    661c:	jmpq   5edb <deflate_slow+0x7b>
    6621:	mov    %rbx,%rax
    6624:	mov    -0x28(%rbp),%r15
    6628:	mov    -0x20(%rbp),%r14
    662c:	mov    -0x18(%rbp),%r13
    6630:	mov    -0x10(%rbp),%r12
    6634:	mov    -0x8(%rbp),%rbx
    6638:	leaveq 
    6639:	retq   
    663a:	nopw   0x0(%rax,%rax,1)

0000000000006640 <deflate_rle>:
    6640:	push   %rbp
    6641:	mov    %rsp,%rbp
    6644:	sub    $0x30,%rsp
    6648:	mov    %rbx,-0x8(%rbp)
    664c:	mov    %r12,-0x10(%rbp)
    6650:	mov    %r13,-0x18(%rbp)
    6654:	mov    %r14,-0x20(%rbp)
    6658:	mov    %r15,-0x28(%rbp)
    665c:	mov    %rdi,%r12
    665f:	mov    %rsi,%r13
    6662:	mov    0x11987(%rip),%r14        # 17ff0 <_dist_code@@Base+0x281c>
    6669:	mov    0x11958(%rip),%r15        # 17fc8 <_length_code@@Base+0x28f4>
    6670:	xor    %ebx,%ebx
    6672:	mov    $0x1,%ecx
    6677:	mov    $0x102,%eax
    667c:	jmp    66d5 <deflate_rle+0x95>
    667e:	mov    %eax,%esi
    6680:	add    0x60(%r12),%rsi
    6685:	mov    0xac(%r12),%edx
    668d:	mov    0x98(%r12),%rax
    6695:	sub    %rax,%rdx
    6698:	mov    %r12,%rdi
    669b:	mov    %rbx,%rcx
    669e:	callq  2120 <_tr_flush_block@plt>
    66a3:	mov    0xac(%r12),%eax
    66ab:	mov    %rax,0x98(%r12)
    66b3:	mov    (%r12),%rdi
    66b7:	callq  6f40 <flush_pending>
    66bc:	mov    (%r12),%rax
    66c0:	mov    0x20(%rax),%eax
    66c3:	test   %eax,%eax
    66c5:	je     674e <deflate_rle+0x10e>
    66cb:	mov    $0x102,%eax
    66d0:	mov    $0x1,%ecx
    66d5:	mov    0xb4(%r12),%edx
    66dd:	cmp    $0x102,%edx
    66e3:	ja     6771 <deflate_rle+0x131>
    66e9:	mov    %r12,%rdi
    66ec:	callq  4f80 <fill_window>
    66f1:	mov    0xb4(%r12),%eax
    66f9:	cmp    $0x102,%eax
    66fe:	ja     6709 <deflate_rle+0xc9>
    6700:	test   %r13d,%r13d
    6703:	je     68f8 <deflate_rle+0x2b8>
    6709:	test   %eax,%eax
    670b:	jne    6767 <deflate_rle+0x127>
    670d:	movl   $0x0,0x172c(%r12)
    6719:	cmp    $0x4,%r13d
    671d:	je     6911 <deflate_rle+0x2d1>
    6723:	mov    0x170c(%r12),%eax
    672b:	test   %eax,%eax
    672d:	jne    698b <deflate_rle+0x34b>
    6733:	mov    -0x28(%rbp),%r15
    6737:	mov    -0x20(%rbp),%r14
    673b:	mov    -0x18(%rbp),%r13
    673f:	mov    -0x10(%rbp),%r12
    6743:	mov    -0x8(%rbp),%rbx
    6747:	mov    $0x1,%eax
    674c:	leaveq 
    674d:	retq   
    674e:	mov    %rbx,%rax
    6751:	mov    -0x28(%rbp),%r15
    6755:	mov    -0x20(%rbp),%r14
    6759:	mov    -0x18(%rbp),%r13
    675d:	mov    -0x10(%rbp),%r12
    6761:	mov    -0x8(%rbp),%rbx
    6765:	leaveq 
    6766:	retq   
    6767:	mov    $0x102,%eax
    676c:	mov    $0x1,%ecx
    6771:	movl   $0x0,0xa0(%r12)
    677d:	mov    0xb4(%r12),%edx
    6785:	cmp    $0x2,%edx
    6788:	jbe    686a <deflate_rle+0x22a>
    678e:	mov    0xac(%r12),%edx
    6796:	test   %edx,%edx
    6798:	je     686a <deflate_rle+0x22a>
    679e:	add    0x60(%r12),%rdx
    67a3:	movzbl (%rdx),%edi
    67a6:	movzbl -0x1(%rdx),%esi
    67aa:	cmp    %sil,%dil
    67ad:	jne    686a <deflate_rle+0x22a>
    67b3:	movzbl 0x1(%rdx),%r8d
    67b8:	cmp    %r8b,%dil
    67bb:	jne    686a <deflate_rle+0x22a>
    67c1:	lea    0x2(%rdx),%rsi
    67c5:	movzbl (%rsi),%r10d
    67c9:	cmp    %r10b,%r8b
    67cc:	jne    686a <deflate_rle+0x22a>
    67d2:	add    $0x102,%rdx
    67d9:	lea    0x1(%rsi),%rdi
    67dd:	movzbl (%rdi),%r8d
    67e1:	cmp    %r8b,%r10b
    67e4:	jne    6847 <deflate_rle+0x207>
    67e6:	lea    0x2(%rsi),%rdi
    67ea:	movzbl (%rdi),%r9d
    67ee:	cmp    %r9b,%r8b
    67f1:	jne    6847 <deflate_rle+0x207>
    67f3:	lea    0x3(%rsi),%rdi
    67f7:	movzbl (%rdi),%r8d
    67fb:	cmp    %r8b,%r9b
    67fe:	jne    6847 <deflate_rle+0x207>
    6800:	lea    0x4(%rsi),%rdi
    6804:	movzbl (%rdi),%r9d
    6808:	cmp    %r9b,%r8b
    680b:	jne    6847 <deflate_rle+0x207>
    680d:	lea    0x5(%rsi),%rdi
    6811:	movzbl (%rdi),%r8d
    6815:	cmp    %r8b,%r9b
    6818:	jne    6847 <deflate_rle+0x207>
    681a:	lea    0x6(%rsi),%rdi
    681e:	movzbl (%rdi),%r9d
    6822:	cmp    %r9b,%r8b
    6825:	jne    6847 <deflate_rle+0x207>
    6827:	lea    0x7(%rsi),%rdi
    682b:	movzbl (%rdi),%r8d
    682f:	cmp    %r8b,%r9b
    6832:	jne    6847 <deflate_rle+0x207>
    6834:	add    $0x8,%rsi
    6838:	movzbl (%rsi),%edi
    683b:	cmp    %dil,%r8b
    683e:	je     69a4 <deflate_rle+0x364>
    6844:	mov    %rsi,%rdi
    6847:	sub    %rdi,%rdx
    684a:	neg    %edx
    684c:	add    %eax,%edx
    684e:	mov    %edx,0xa0(%r12)
    6856:	mov    0xb4(%r12),%esi
    685e:	cmp    %esi,%edx
    6860:	jbe    686a <deflate_rle+0x22a>
    6862:	mov    %esi,0xa0(%r12)
    686a:	mov    0xa0(%r12),%edi
    6872:	cmp    $0x2,%edi
    6875:	ja     69b5 <deflate_rle+0x375>
    687b:	mov    0x1710(%r12),%rsi
    6883:	mov    0x170c(%r12),%edx
    688b:	mov    0xac(%r12),%r8d
    6893:	mov    0x60(%r12),%rdi
    6898:	movzbl (%r8,%rdi,1),%edi
    689d:	movw   $0x0,(%rsi,%rdx,2)
    68a3:	mov    0x170c(%r12),%esi
    68ab:	lea    0x1(%rsi),%edx
    68ae:	mov    %edx,0x170c(%r12)
    68b6:	mov    0x1700(%r12),%rdx
    68be:	mov    %dil,(%rsi,%rdx,1)
    68c2:	movzwl 0xd4(%r12,%rdi,4),%edx
    68cb:	add    $0x1,%edx
    68ce:	mov    %dx,0xd4(%r12,%rdi,4)
    68d7:	mov    0x1708(%r12),%edx
    68df:	add    $0xffffffff,%edx
    68e2:	cmp    0x170c(%r12),%edx
    68ea:	je     6a51 <deflate_rle+0x411>
    68f0:	mov    %rbx,%rdx
    68f3:	jmpq   6a54 <deflate_rle+0x414>
    68f8:	mov    %rbx,%rax
    68fb:	mov    -0x28(%rbp),%r15
    68ff:	mov    -0x20(%rbp),%r14
    6903:	mov    -0x18(%rbp),%r13
    6907:	mov    -0x10(%rbp),%r12
    690b:	mov    -0x8(%rbp),%rbx
    690f:	leaveq 
    6910:	retq   
    6911:	mov    0x98(%r12),%rax
    6919:	test   %rax,%rax
    691c:	js     6925 <deflate_rle+0x2e5>
    691e:	mov    %eax,%ebx
    6920:	add    0x60(%r12),%rbx
    6925:	mov    0xac(%r12),%edx
    692d:	mov    0x98(%r12),%rax
    6935:	sub    %rax,%rdx
    6938:	mov    %rbx,%rsi
    693b:	mov    %r12,%rdi
    693e:	mov    $0x1,%ecx
    6943:	callq  2120 <_tr_flush_block@plt>
    6948:	mov    0xac(%r12),%eax
    6950:	mov    %rax,0x98(%r12)
    6958:	mov    (%r12),%rdi
    695c:	callq  6f40 <flush_pending>
    6961:	mov    (%r12),%rax
    6965:	mov    0x20(%rax),%eax
    6968:	test   %eax,%eax
    696a:	jne    6a7f <deflate_rle+0x43f>
    6970:	mov    $0x2,%eax
    6975:	mov    -0x28(%rbp),%r15
    6979:	mov    -0x20(%rbp),%r14
    697d:	mov    -0x18(%rbp),%r13
    6981:	mov    -0x10(%rbp),%r12
    6985:	mov    -0x8(%rbp),%rbx
    6989:	leaveq 
    698a:	retq   
    698b:	mov    0x98(%r12),%rax
    6993:	test   %rax,%rax
    6996:	jns    6a9a <deflate_rle+0x45a>
    699c:	mov    %rbx,%rsi
    699f:	jmpq   6aa1 <deflate_rle+0x461>
    69a4:	cmp    %rdx,%rsi
    69a7:	jb     67d9 <deflate_rle+0x199>
    69ad:	mov    %rsi,%rdi
    69b0:	jmpq   6847 <deflate_rle+0x207>
    69b5:	mov    0x1710(%r12),%rsi
    69bd:	mov    0x170c(%r12),%edx
    69c5:	movw   $0x1,(%rsi,%rdx,2)
    69cb:	mov    0x170c(%r12),%esi
    69d3:	lea    0x1(%rsi),%edx
    69d6:	mov    %edx,0x170c(%r12)
    69de:	add    $0xfd,%edi
    69e4:	mov    0x1700(%r12),%rdx
    69ec:	mov    %dil,(%rsi,%rdx,1)
    69f0:	movzbl %dil,%edx
    69f4:	movzbl (%rdx,%r15,1),%edx
    69f9:	add    $0x101,%edx
    69ff:	movslq %edx,%rsi
    6a02:	movzwl 0xd4(%r12,%rsi,4),%edx
    6a0b:	add    $0x1,%edx
    6a0e:	mov    %dx,0xd4(%r12,%rsi,4)
    6a17:	movzbl (%r14),%esi
    6a1b:	movzwl 0x9c8(%r12,%rsi,4),%edx
    6a24:	add    $0x1,%edx
    6a27:	mov    %dx,0x9c8(%r12,%rsi,4)
    6a30:	mov    0x1708(%r12),%edx
    6a38:	add    $0xffffffff,%edx
    6a3b:	cmp    0x170c(%r12),%edx
    6a43:	je     6afc <deflate_rle+0x4bc>
    6a49:	mov    %rbx,%rdx
    6a4c:	jmpq   6aff <deflate_rle+0x4bf>
    6a51:	mov    %rcx,%rdx
    6a54:	mov    0xb4(%r12),%esi
    6a5c:	add    $0xffffffff,%esi
    6a5f:	mov    %esi,0xb4(%r12)
    6a67:	mov    0xac(%r12),%esi
    6a6f:	add    $0x1,%esi
    6a72:	mov    %esi,0xac(%r12)
    6a7a:	jmpq   6b35 <deflate_rle+0x4f5>
    6a7f:	mov    $0x3,%eax
    6a84:	mov    -0x28(%rbp),%r15
    6a88:	mov    -0x20(%rbp),%r14
    6a8c:	mov    -0x18(%rbp),%r13
    6a90:	mov    -0x10(%rbp),%r12
    6a94:	mov    -0x8(%rbp),%rbx
    6a98:	leaveq 
    6a99:	retq   
    6a9a:	mov    %eax,%esi
    6a9c:	add    0x60(%r12),%rsi
    6aa1:	mov    0xac(%r12),%edx
    6aa9:	mov    0x98(%r12),%rax
    6ab1:	sub    %rax,%rdx
    6ab4:	mov    %r12,%rdi
    6ab7:	mov    %rbx,%rcx
    6aba:	callq  2120 <_tr_flush_block@plt>
    6abf:	mov    0xac(%r12),%eax
    6ac7:	mov    %rax,0x98(%r12)
    6acf:	mov    (%r12),%rdi
    6ad3:	callq  6f40 <flush_pending>
    6ad8:	mov    (%r12),%rax
    6adc:	mov    0x20(%rax),%eax
    6adf:	test   %eax,%eax
    6ae1:	jne    6b56 <deflate_rle+0x516>
    6ae3:	mov    %rbx,%rax
    6ae6:	mov    -0x28(%rbp),%r15
    6aea:	mov    -0x20(%rbp),%r14
    6aee:	mov    -0x18(%rbp),%r13
    6af2:	mov    -0x10(%rbp),%r12
    6af6:	mov    -0x8(%rbp),%rbx
    6afa:	leaveq 
    6afb:	retq   
    6afc:	mov    %rcx,%rdx
    6aff:	mov    0xb4(%r12),%edi
    6b07:	mov    0xa0(%r12),%esi
    6b0f:	sub    %esi,%edi
    6b11:	mov    %edi,0xb4(%r12)
    6b19:	add    0xac(%r12),%esi
    6b21:	mov    %esi,0xac(%r12)
    6b29:	movl   $0x0,0xa0(%r12)
    6b35:	test   %edx,%edx
    6b37:	jle    66d5 <deflate_rle+0x95>
    6b3d:	mov    0x98(%r12),%rax
    6b45:	test   %rax,%rax
    6b48:	jns    667e <deflate_rle+0x3e>
    6b4e:	mov    %rbx,%rsi
    6b51:	jmpq   6685 <deflate_rle+0x45>
    6b56:	mov    -0x28(%rbp),%r15
    6b5a:	mov    -0x20(%rbp),%r14
    6b5e:	mov    -0x18(%rbp),%r13
    6b62:	mov    -0x10(%rbp),%r12
    6b66:	mov    -0x8(%rbp),%rbx
    6b6a:	mov    $0x1,%eax
    6b6f:	leaveq 
    6b70:	retq   
    6b71:	data16 nopw %cs:0x0(%rax,%rax,1)
    6b7c:	nopl   0x0(%rax)

0000000000006b80 <deflate_huff>:
    6b80:	push   %rbp
    6b81:	mov    %rsp,%rbp
    6b84:	sub    $0x20,%rsp
    6b88:	mov    %r13,-0x8(%rbp)
    6b8c:	mov    %r14,-0x10(%rbp)
    6b90:	mov    %r15,-0x18(%rbp)
    6b94:	mov    %rsi,-0x20(%rbp)
    6b98:	mov    %rdi,%r14
    6b9b:	xor    %r13d,%r13d
    6b9e:	mov    $0x1,%r15d
    6ba4:	jmp    6bec <deflate_huff+0x6c>
    6ba6:	mov    %eax,%esi
    6ba8:	add    0x60(%r14),%rsi
    6bac:	mov    0xac(%r14),%edx
    6bb3:	mov    0x98(%r14),%rax
    6bba:	sub    %rax,%rdx
    6bbd:	mov    %r14,%rdi
    6bc0:	mov    %r13,%rcx
    6bc3:	callq  2120 <_tr_flush_block@plt>
    6bc8:	mov    0xac(%r14),%eax
    6bcf:	mov    %rax,0x98(%r14)
    6bd6:	mov    (%r14),%rdi
    6bd9:	callq  6f40 <flush_pending>
    6bde:	mov    (%r14),%rax
    6be1:	mov    0x20(%rax),%eax
    6be4:	test   %eax,%eax
    6be6:	je     6c71 <deflate_huff+0xf1>
    6bec:	mov    0xb4(%r14),%eax
    6bf3:	test   %eax,%eax
    6bf5:	je     6c82 <deflate_huff+0x102>
    6bfb:	movl   $0x0,0xa0(%r14)
    6c06:	mov    0x1710(%r14),%rcx
    6c0d:	mov    0x170c(%r14),%eax
    6c14:	mov    0xac(%r14),%esi
    6c1b:	mov    0x60(%r14),%rdx
    6c1f:	movzbl (%rsi,%rdx,1),%edx
    6c23:	movw   $0x0,(%rcx,%rax,2)
    6c29:	mov    0x170c(%r14),%ecx
    6c30:	lea    0x1(%rcx),%eax
    6c33:	mov    %eax,0x170c(%r14)
    6c3a:	mov    0x1700(%r14),%rax
    6c41:	mov    %dl,(%rcx,%rax,1)
    6c44:	movzwl 0xd4(%r14,%rdx,4),%eax
    6c4d:	add    $0x1,%eax
    6c50:	mov    %ax,0xd4(%r14,%rdx,4)
    6c59:	mov    0x1708(%r14),%eax
    6c60:	add    $0xffffffff,%eax
    6c63:	cmp    0x170c(%r14),%eax
    6c6a:	je     6cb2 <deflate_huff+0x132>
    6c6c:	mov    %r13,%rcx
    6c6f:	jmp    6cb5 <deflate_huff+0x135>
    6c71:	mov    %r13,%rax
    6c74:	mov    -0x18(%rbp),%r15
    6c78:	mov    -0x10(%rbp),%r14
    6c7c:	mov    -0x8(%rbp),%r13
    6c80:	leaveq 
    6c81:	retq   
    6c82:	mov    %r14,%rdi
    6c85:	callq  4f80 <fill_window>
    6c8a:	mov    0xb4(%r14),%eax
    6c91:	test   %eax,%eax
    6c93:	jne    6bfb <deflate_huff+0x7b>
    6c99:	mov    -0x20(%rbp),%rax
    6c9d:	test   %eax,%eax
    6c9f:	jne    6cf7 <deflate_huff+0x177>
    6ca1:	mov    %r13,%rax
    6ca4:	mov    -0x18(%rbp),%r15
    6ca8:	mov    -0x10(%rbp),%r14
    6cac:	mov    -0x8(%rbp),%r13
    6cb0:	leaveq 
    6cb1:	retq   
    6cb2:	mov    %r15,%rcx
    6cb5:	mov    0xb4(%r14),%eax
    6cbc:	add    $0xffffffff,%eax
    6cbf:	mov    %eax,0xb4(%r14)
    6cc6:	mov    0xac(%r14),%eax
    6ccd:	add    $0x1,%eax
    6cd0:	mov    %eax,0xac(%r14)
    6cd7:	test   %ecx,%ecx
    6cd9:	jle    6bec <deflate_huff+0x6c>
    6cdf:	mov    0x98(%r14),%rax
    6ce6:	test   %rax,%rax
    6ce9:	jns    6ba6 <deflate_huff+0x26>
    6cef:	mov    %r13,%rsi
    6cf2:	jmpq   6bac <deflate_huff+0x2c>
    6cf7:	movl   $0x0,0x172c(%r14)
    6d02:	cmp    $0x4,%eax
    6d05:	je     6d23 <deflate_huff+0x1a3>
    6d07:	mov    0x170c(%r14),%eax
    6d0e:	test   %eax,%eax
    6d10:	jne    6d88 <deflate_huff+0x208>
    6d12:	mov    %r15,%rax
    6d15:	mov    -0x18(%rbp),%r15
    6d19:	mov    -0x10(%rbp),%r14
    6d1d:	mov    -0x8(%rbp),%r13
    6d21:	leaveq 
    6d22:	retq   
    6d23:	mov    0x98(%r14),%rax
    6d2a:	test   %rax,%rax
    6d2d:	js     6d36 <deflate_huff+0x1b6>
    6d2f:	mov    %eax,%r13d
    6d32:	add    0x60(%r14),%r13
    6d36:	mov    0xac(%r14),%edx
    6d3d:	mov    0x98(%r14),%rax
    6d44:	sub    %rax,%rdx
    6d47:	mov    %r15,%rcx
    6d4a:	mov    %r13,%rsi
    6d4d:	mov    %r14,%rdi
    6d50:	callq  2120 <_tr_flush_block@plt>
    6d55:	mov    0xac(%r14),%eax
    6d5c:	mov    %rax,0x98(%r14)
    6d63:	mov    (%r14),%rdi
    6d66:	callq  6f40 <flush_pending>
    6d6b:	mov    (%r14),%rax
    6d6e:	mov    0x20(%rax),%eax
    6d71:	test   %eax,%eax
    6d73:	jne    6d99 <deflate_huff+0x219>
    6d75:	mov    $0x2,%eax
    6d7a:	mov    -0x18(%rbp),%r15
    6d7e:	mov    -0x10(%rbp),%r14
    6d82:	mov    -0x8(%rbp),%r13
    6d86:	leaveq 
    6d87:	retq   
    6d88:	mov    0x98(%r14),%rax
    6d8f:	test   %rax,%rax
    6d92:	jns    6dac <deflate_huff+0x22c>
    6d94:	mov    %r13,%rsi
    6d97:	jmp    6db2 <deflate_huff+0x232>
    6d99:	mov    $0x3,%eax
    6d9e:	mov    -0x18(%rbp),%r15
    6da2:	mov    -0x10(%rbp),%r14
    6da6:	mov    -0x8(%rbp),%r13
    6daa:	leaveq 
    6dab:	retq   
    6dac:	mov    %eax,%esi
    6dae:	add    0x60(%r14),%rsi
    6db2:	mov    0xac(%r14),%edx
    6db9:	mov    0x98(%r14),%rax
    6dc0:	sub    %rax,%rdx
    6dc3:	mov    %r14,%rdi
    6dc6:	mov    %r13,%rcx
    6dc9:	callq  2120 <_tr_flush_block@plt>
    6dce:	mov    0xac(%r14),%eax
    6dd5:	mov    %rax,0x98(%r14)
    6ddc:	mov    (%r14),%rdi
    6ddf:	callq  6f40 <flush_pending>
    6de4:	mov    (%r14),%rax
    6de7:	mov    0x20(%rax),%eax
    6dea:	test   %eax,%eax
    6dec:	jne    6dff <deflate_huff+0x27f>
    6dee:	mov    %r13,%rax
    6df1:	mov    -0x18(%rbp),%r15
    6df5:	mov    -0x10(%rbp),%r14
    6df9:	mov    -0x8(%rbp),%r13
    6dfd:	leaveq 
    6dfe:	retq   
    6dff:	mov    %r15,%rax
    6e02:	mov    -0x18(%rbp),%r15
    6e06:	mov    -0x10(%rbp),%r14
    6e0a:	mov    -0x8(%rbp),%r13
    6e0e:	leaveq 
    6e0f:	retq   

0000000000006e10 <lm_init>:
    6e10:	push   %rbp
    6e11:	mov    %rsp,%rbp
    6e14:	sub    $0x10,%rsp
    6e18:	mov    %r15,-0x8(%rbp)
    6e1c:	mov    0x50(%rdi),%eax
    6e1f:	add    %rax,%rax
    6e22:	mov    %rax,0x68(%rdi)
    6e26:	mov    0x78(%rdi),%rcx
    6e2a:	mov    0x84(%rdi),%eax
    6e30:	add    $0xffffffff,%eax
    6e33:	mov    %eax,%eax
    6e35:	movw   $0x0,(%rcx,%rax,2)
    6e3b:	mov    0x78(%rdi),%rcx
    6e3f:	xor    %esi,%esi
    6e41:	mov    0x84(%rdi),%eax
    6e47:	add    $0xffffffff,%eax
    6e4a:	mov    %eax,%eax
    6e4c:	lea    (%rax,%rax,1),%rdx
    6e50:	mov    %rdi,%r15
    6e53:	mov    %rcx,%rdi
    6e56:	callq  2170 <memset@plt>
    6e5b:	lea    0x10e46(%rip),%rdx        # 17ca8 <configuration_table>
    6e62:	movslq 0xc4(%r15),%rax
    6e69:	shl    $0x4,%rax
    6e6d:	movzwl 0x2(%rdx,%rax,1),%ecx
    6e72:	mov    %ecx,0xc0(%r15)
    6e79:	movzwl (%rax,%rdx,1),%ecx
    6e7d:	mov    %ecx,0xcc(%r15)
    6e84:	movzwl 0x4(%rdx,%rax,1),%ecx
    6e89:	mov    %ecx,0xd0(%r15)
    6e90:	movzwl 0x6(%rdx,%rax,1),%eax
    6e95:	mov    %eax,0xbc(%r15)
    6e9c:	movl   $0x0,0xac(%r15)
    6ea7:	movq   $0x0,0x98(%r15)
    6eb2:	movl   $0x0,0xb4(%r15)
    6ebd:	movl   $0x0,0x172c(%r15)
    6ec8:	movl   $0x2,0xb8(%r15)
    6ed3:	movl   $0x2,0xa0(%r15)
    6ede:	movl   $0x0,0xa8(%r15)
    6ee9:	movl   $0x0,0x80(%r15)
    6ef4:	mov    -0x8(%rbp),%r15
    6ef8:	leaveq 
    6ef9:	retq   
    6efa:	nopw   0x0(%rax,%rax,1)

0000000000006f00 <putShortMSB>:
    6f00:	push   %rbp
    6f01:	mov    %rsp,%rbp
    6f04:	mov    0x28(%rdi),%rcx
    6f08:	lea    0x1(%rcx),%rax
    6f0c:	mov    %rax,0x28(%rdi)
    6f10:	mov    %rsi,%rdx
    6f13:	shr    $0x8,%edx
    6f16:	mov    0x10(%rdi),%rax
    6f1a:	mov    %dl,(%rcx,%rax,1)
    6f1d:	mov    0x28(%rdi),%rcx
    6f21:	lea    0x1(%rcx),%rax
    6f25:	mov    %rax,0x28(%rdi)
    6f29:	mov    0x10(%rdi),%rax
    6f2d:	mov    %sil,(%rcx,%rax,1)
    6f31:	leaveq 
    6f32:	retq   
    6f33:	data16 nopw %cs:0x0(%rax,%rax,1)
    6f3e:	xchg   %ax,%ax

0000000000006f40 <flush_pending>:
    6f40:	push   %rbp
    6f41:	mov    %rsp,%rbp
    6f44:	sub    $0x20,%rsp
    6f48:	mov    %r14,-0x18(%rbp)
    6f4c:	mov    %r15,-0x20(%rbp)
    6f50:	mov    %r12,%r15
    6f53:	mov    %rdi,%r12
    6f56:	mov    0x38(%r12),%r14
    6f5b:	mov    %r14,%rdi
    6f5e:	callq  2350 <_tr_flush_bits@plt>
    6f63:	mov    0x20(%r12),%ecx
    6f68:	mov    0x28(%r14),%eax
    6f6c:	cmp    %eax,%ecx
    6f6e:	jae    6f73 <flush_pending+0x33>
    6f70:	mov    %rcx,%rax
    6f73:	test   %eax,%eax
    6f75:	jne    6f84 <flush_pending+0x44>
    6f77:	mov    %r15,%r12
    6f7a:	mov    -0x20(%rbp),%r15
    6f7e:	mov    -0x18(%rbp),%r14
    6f82:	leaveq 
    6f83:	retq   
    6f84:	mov    %eax,%ecx
    6f86:	mov    0x18(%r12),%rdi
    6f8b:	mov    0x20(%r14),%rsi
    6f8f:	mov    %rcx,%rdx
    6f92:	mov    %r15,-0x8(%rbp)
    6f96:	mov    %r13,-0x10(%rbp)
    6f9a:	mov    %rcx,%r13
    6f9d:	mov    %rax,%r15
    6fa0:	callq  21f0 <memcpy@plt>
    6fa5:	mov    %r13,%rax
    6fa8:	add    0x18(%r12),%rax
    6fad:	mov    %rax,0x18(%r12)
    6fb2:	mov    %r13,%rax
    6fb5:	add    0x20(%r14),%rax
    6fb9:	mov    %rax,0x20(%r14)
    6fbd:	mov    %r13,%rax
    6fc0:	add    0x28(%r12),%rax
    6fc5:	mov    %rax,0x28(%r12)
    6fca:	mov    0x20(%r12),%eax
    6fcf:	sub    %r15d,%eax
    6fd2:	mov    %eax,0x20(%r12)
    6fd7:	mov    0x28(%r14),%rcx
    6fdb:	mov    %rcx,%rax
    6fde:	sub    %r13,%rax
    6fe1:	mov    %rax,0x28(%r14)
    6fe5:	cmp    %r13,%rcx
    6fe8:	je     6ffc <flush_pending+0xbc>
    6fea:	mov    -0x10(%rbp),%r13
    6fee:	mov    -0x8(%rbp),%r12
    6ff2:	mov    -0x20(%rbp),%r15
    6ff6:	mov    -0x18(%rbp),%r14
    6ffa:	leaveq 
    6ffb:	retq   
    6ffc:	mov    0x10(%r14),%rax
    7000:	mov    %rax,0x20(%r14)
    7004:	mov    -0x10(%rbp),%r13
    7008:	mov    -0x8(%rbp),%r12
    700c:	mov    -0x20(%rbp),%r15
    7010:	mov    -0x18(%rbp),%r14
    7014:	leaveq 
    7015:	retq   
    7016:	nopw   %cs:0x0(%rax,%rax,1)

0000000000007020 <read_buf>:
    7020:	push   %rbp
    7021:	mov    %rsp,%rbp
    7024:	sub    $0x20,%rsp
    7028:	mov    0x8(%rdi),%eax
    702b:	cmp    %edx,%eax
    702d:	ja     7034 <read_buf+0x14>
    702f:	mov    %rax,%r8
    7032:	jmp    7037 <read_buf+0x17>
    7034:	mov    %rdx,%r8
    7037:	test   %r8d,%r8d
    703a:	jne    7040 <read_buf+0x20>
    703c:	xor    %eax,%eax
    703e:	leaveq 
    703f:	retq   
    7040:	sub    %r8d,%eax
    7043:	mov    %eax,0x8(%rdi)
    7046:	mov    %r8d,%ecx
    7049:	mov    (%rdi),%rax
    704c:	mov    %rsi,%r9
    704f:	mov    %rcx,%rdx
    7052:	mov    %r12,-0x8(%rbp)
    7056:	mov    %r13,-0x10(%rbp)
    705a:	mov    %r14,-0x18(%rbp)
    705e:	mov    %r15,-0x20(%rbp)
    7062:	mov    %r8,%r12
    7065:	mov    %rcx,%r13
    7068:	mov    %rdi,%r14
    706b:	mov    %r9,%rdi
    706e:	mov    %rsi,%r15
    7071:	mov    %rax,%rsi
    7074:	callq  21f0 <memcpy@plt>
    7079:	mov    0x38(%r14),%rax
    707d:	movslq 0x30(%rax),%rax
    7081:	cmp    $0x1,%eax
    7084:	je     70a0 <read_buf+0x80>
    7086:	cmp    $0x2,%eax
    7089:	jne    70b3 <read_buf+0x93>
    708b:	mov    %r15,%rsi
    708e:	mov    0x60(%r14),%rdi
    7092:	mov    %r12,%rdx
    7095:	callq  20d0 <crc32@plt>
    709a:	mov    %rax,0x60(%r14)
    709e:	jmp    70b3 <read_buf+0x93>
    70a0:	mov    %r15,%rsi
    70a3:	mov    0x60(%r14),%rdi
    70a7:	mov    %r12,%rdx
    70aa:	callq  2230 <adler32@plt>
    70af:	mov    %rax,0x60(%r14)
    70b3:	mov    %r12d,%eax
    70b6:	add    (%r14),%rax
    70b9:	mov    %rax,(%r14)
    70bc:	add    0x10(%r14),%r13
    70c0:	mov    %r13,0x10(%r14)
    70c4:	mov    %r12,%rax
    70c7:	mov    -0x20(%rbp),%r15
    70cb:	mov    -0x18(%rbp),%r14
    70cf:	mov    -0x10(%rbp),%r13
    70d3:	mov    -0x8(%rbp),%r12
    70d7:	leaveq 
    70d8:	retq   
    70d9:	nopl   0x0(%rax)

00000000000070e0 <longest_match>:
    70e0:	push   %rbp
    70e1:	mov    %rsp,%rbp
    70e4:	sub    $0x50,%rsp
    70e8:	mov    %r15,-0x28(%rbp)
    70ec:	mov    %r14,-0x20(%rbp)
    70f0:	mov    %r13,-0x18(%rbp)
    70f4:	mov    %r12,-0x10(%rbp)
    70f8:	mov    %rbx,-0x8(%rbp)
    70fc:	mov    0xbc(%rdi),%r8d
    7103:	mov    0x60(%rdi),%rdx
    7107:	movslq 0xb8(%rdi),%rax
    710e:	movslq 0xd0(%rdi),%r12
    7115:	mov    0xac(%rdi),%ebx
    711b:	mov    0x50(%rdi),%ecx
    711e:	add    $0xfffffefa,%ecx
    7124:	cmp    %ebx,%ecx
    7126:	jb     712d <longest_match+0x4d>
    7128:	xor    %r10d,%r10d
    712b:	jmp    7133 <longest_match+0x53>
    712d:	mov    %rbx,%r10
    7130:	sub    %ecx,%r10d
    7133:	mov    0x70(%rdi),%r14
    7137:	mov    0x58(%rdi),%r13d
    713b:	lea    (%rbx,%rdx,1),%rcx
    713f:	mov    %rcx,-0x48(%rbp)
    7143:	lea    -0x1(%rax),%edx
    7146:	movslq %edx,%rdx
    7149:	movzbl (%rcx,%rdx,1),%edx
    714d:	movzbl (%rax,%rcx,1),%ebx
    7151:	mov    0xcc(%rdi),%r9d
    7158:	cmp    %eax,%r9d
    715b:	ja     7161 <longest_match+0x81>
    715d:	shr    $0x2,%r8d
    7161:	lea    0x102(%rcx),%r9
    7168:	mov    %r9,-0x30(%rbp)
    716c:	mov    0xb4(%rdi),%r9d
    7173:	cmp    %r12d,%r9d
    7176:	jae    72a0 <longest_match+0x1c0>
    717c:	mov    %r9,%r12
    717f:	jmpq   72a0 <longest_match+0x1c0>
    7184:	lea    -0x1(%rax),%r11d
    7188:	movslq %r11d,%r11
    718b:	movzbl (%r9,%r11,1),%r11d
    7190:	cmp    %r11b,%dl
    7193:	jne    7288 <longest_match+0x1a8>
    7199:	movzbl (%rcx),%r15d
    719d:	movzbl (%r9),%r11d
    71a1:	cmp    %r11b,%r15b
    71a4:	jne    7288 <longest_match+0x1a8>
    71aa:	movzbl 0x1(%rcx),%r15d
    71af:	movzbl 0x1(%r9),%r11d
    71b4:	cmp    %r11b,%r15b
    71b7:	jne    7288 <longest_match+0x1a8>
    71bd:	lea    0x2(%rcx),%r11
    71c1:	lea    0x2(%r9),%rcx
    71c5:	mov    %rdx,-0x38(%rbp)
    71c9:	mov    %rbx,-0x40(%rbp)
    71cd:	mov    -0x30(%rbp),%rdx
    71d1:	movzbl 0x1(%rcx),%r15d
    71d6:	lea    0x1(%r11),%rbx
    71da:	movzbl (%rbx),%r9d
    71de:	cmp    %r9b,%r15b
    71e1:	jne    726b <longest_match+0x18b>
    71e7:	movzbl 0x2(%rcx),%r15d
    71ec:	lea    0x2(%r11),%rbx
    71f0:	movzbl (%rbx),%r9d
    71f4:	cmp    %r9b,%r15b
    71f7:	jne    726b <longest_match+0x18b>
    71f9:	movzbl 0x3(%rcx),%r15d
    71fe:	lea    0x3(%r11),%rbx
    7202:	movzbl (%rbx),%r9d
    7206:	cmp    %r9b,%r15b
    7209:	jne    726b <longest_match+0x18b>
    720b:	movzbl 0x4(%rcx),%r15d
    7210:	lea    0x4(%r11),%rbx
    7214:	movzbl (%rbx),%r9d
    7218:	cmp    %r9b,%r15b
    721b:	jne    726b <longest_match+0x18b>
    721d:	movzbl 0x5(%rcx),%r9d
    7222:	lea    0x5(%r11),%rbx
    7226:	movzbl (%rbx),%r15d
    722a:	cmp    %r15b,%r9b
    722d:	jne    726b <longest_match+0x18b>
    722f:	movzbl 0x6(%rcx),%r15d
    7234:	lea    0x6(%r11),%rbx
    7238:	movzbl (%rbx),%r9d
    723c:	cmp    %r9b,%r15b
    723f:	jne    726b <longest_match+0x18b>
    7241:	movzbl 0x7(%rcx),%r15d
    7246:	lea    0x7(%r11),%rbx
    724a:	movzbl (%rbx),%r9d
    724e:	cmp    %r9b,%r15b
    7251:	jne    726b <longest_match+0x18b>
    7253:	add    $0x8,%rcx
    7257:	movzbl (%rcx),%r9d
    725b:	add    $0x8,%r11
    725f:	movzbl (%r11),%ebx
    7263:	cmp    %bl,%r9b
    7266:	je     72b9 <longest_match+0x1d9>
    7268:	mov    %r11,%rbx
    726b:	sub    %rbx,%rdx
    726e:	mov    $0x102,%r9d
    7274:	sub    %edx,%r9d
    7277:	cmp    %eax,%r9d
    727a:	jg     72c7 <longest_match+0x1e7>
    727c:	mov    -0x40(%rbp),%rbx
    7280:	mov    -0x38(%rbp),%rdx
    7284:	mov    -0x48(%rbp),%rcx
    7288:	and    %r13d,%esi
    728b:	mov    %esi,%esi
    728d:	movzwl (%r14,%rsi,2),%esi
    7292:	cmp    %r10d,%esi
    7295:	jbe    72d5 <longest_match+0x1f5>
    7297:	add    $0xffffffff,%r8d
    729b:	test   %r8d,%r8d
    729e:	je     72d5 <longest_match+0x1f5>
    72a0:	mov    %esi,%r9d
    72a3:	add    0x60(%rdi),%r9
    72a7:	movslq %eax,%r11
    72aa:	movzbl (%r9,%r11,1),%r11d
    72af:	cmp    %r11b,%bl
    72b2:	jne    7288 <longest_match+0x1a8>
    72b4:	jmpq   7184 <longest_match+0xa4>
    72b9:	cmp    %rdx,%r11
    72bc:	jb     71d1 <longest_match+0xf1>
    72c2:	mov    %r11,%rbx
    72c5:	jmp    726b <longest_match+0x18b>
    72c7:	mov    %esi,0xb0(%rdi)
    72cd:	cmp    %r12d,%r9d
    72d0:	jl     72f5 <longest_match+0x215>
    72d2:	mov    %r9,%rax
    72d5:	mov    0xb4(%rdi),%ecx
    72db:	cmp    %eax,%ecx
    72dd:	jb     7316 <longest_match+0x236>
    72df:	mov    -0x8(%rbp),%rbx
    72e3:	mov    -0x10(%rbp),%r12
    72e7:	mov    -0x18(%rbp),%r13
    72eb:	mov    -0x20(%rbp),%r14
    72ef:	mov    -0x28(%rbp),%r15
    72f3:	leaveq 
    72f4:	retq   
    72f5:	mov    $0x101,%eax
    72fa:	sub    %edx,%eax
    72fc:	movslq %eax,%rax
    72ff:	mov    -0x48(%rbp),%rcx
    7303:	movzbl (%rcx,%rax,1),%edx
    7307:	movslq %r9d,%rax
    730a:	movzbl (%rcx,%rax,1),%ebx
    730e:	mov    %r9,%rax
    7311:	jmpq   7288 <longest_match+0x1a8>
    7316:	mov    %rcx,%rax
    7319:	mov    -0x8(%rbp),%rbx
    731d:	mov    -0x10(%rbp),%r12
    7321:	mov    -0x18(%rbp),%r13
    7325:	mov    -0x20(%rbp),%r14
    7329:	mov    -0x28(%rbp),%r15
    732d:	leaveq 
    732e:	retq   
    732f:	nop

0000000000007330 <inflateBack>:
    7330:	push   %rbp
    7331:	mov    %rsp,%rbp
    7334:	sub    $0xe0,%rsp
    733b:	mov    %rdx,-0xc8(%rbp)
    7342:	mov    %rsi,-0xc0(%rbp)
    7349:	mov    $0xfffffffffffffffe,%rax
    7350:	test   %rdi,%rdi
    7353:	jne    7357 <inflateBack+0x27>
    7355:	leaveq 
    7356:	retq   
    7357:	mov    0x38(%rdi),%r10
    735b:	mov    %r10,-0x90(%rbp)
    7362:	test   %r10,%r10
    7365:	jne    7369 <inflateBack+0x39>
    7367:	leaveq 
    7368:	retq   
    7369:	movq   $0x0,0x30(%rdi)
    7371:	movl   $0x3f3f,0x8(%r10)
    7379:	movl   $0x0,0xc(%r10)
    7381:	movl   $0x0,0x40(%r10)
    7389:	mov    (%rdi),%rax
    738c:	mov    %rax,-0xd8(%rbp)
    7393:	xor    %r11d,%r11d
    7396:	mov    %r11,-0x30(%rbp)
    739a:	test   %rax,%rax
    739d:	jne    73a4 <inflateBack+0x74>
    739f:	mov    %r11,%rax
    73a2:	jmp    73a7 <inflateBack+0x77>
    73a4:	mov    0x8(%rdi),%eax
    73a7:	mov    0x48(%r10),%r9
    73ab:	mov    %r8,-0xa0(%rbp)
    73b2:	mov    0x3c(%r10),%r8d
    73b6:	mov    %rcx,-0x98(%rbp)
    73bd:	lea    -0xd8(%rbp),%rcx
    73c4:	mov    %r15,-0x28(%rbp)
    73c8:	mov    $0x1,%r15d
    73ce:	mov    %r14,-0x20(%rbp)
    73d2:	lea    0x558(%r10),%r14
    73d9:	mov    %r14,-0x78(%rbp)
    73dd:	lea    0x98(%r10),%r14
    73e4:	mov    %r14,-0x80(%rbp)
    73e8:	lea    0x90(%r10),%r14
    73ef:	mov    %r14,-0x60(%rbp)
    73f3:	lea    0x78(%r10),%r14
    73f7:	mov    %r14,-0x68(%rbp)
    73fb:	lea    0x318(%r10),%r14
    7402:	mov    %r14,-0x70(%rbp)
    7406:	lea    0x7c(%r10),%r14
    740a:	mov    %r14,-0x48(%rbp)
    740e:	mov    %rbx,-0x8(%rbp)
    7412:	mov    %r12,-0x10(%rbp)
    7416:	mov    %r13,-0x18(%rbp)
    741a:	mov    %rcx,%r12
    741d:	mov    %rdx,%r13
    7420:	mov    %rsi,%r14
    7423:	mov    %r15,%rcx
    7426:	mov    %r11,%r15
    7429:	mov    %rdi,%r11
    742c:	mov    %rcx,%rdi
    742f:	mov    %r15,%rbx
    7432:	mov    %r8,-0xa8(%rbp)
    7439:	mov    0x8(%r10),%ecx
    743d:	add    $0xffffc0c1,%ecx
    7443:	cmp    $0x12,%ecx
    7446:	jbe    7476 <inflateBack+0x146>
    7448:	mov    $0xfffffffffffffffe,%rdi
    744f:	mov    -0xd8(%rbp),%rcx
    7456:	mov    %rcx,(%r11)
    7459:	mov    %eax,0x8(%r11)
    745d:	mov    %rdi,%rax
    7460:	mov    -0x18(%rbp),%r13
    7464:	mov    -0x10(%rbp),%r12
    7468:	mov    -0x8(%rbp),%rbx
    746c:	mov    -0x20(%rbp),%r14
    7470:	mov    -0x28(%rbp),%r15
    7474:	leaveq 
    7475:	retq   
    7476:	lea    0xcbcb(%rip),%rdx        # 14048 <deflate_copyright+0x48>
    747d:	movslq (%rdx,%rcx,4),%rcx
    7481:	add    %rdx,%rcx
    7484:	jmpq   *%rcx
    7486:	mov    %r11,-0x88(%rbp)
    748d:	cmp    $0x5,%eax
    7490:	ja     753e <inflateBack+0x20e>
    7496:	mov    %r9,-0x58(%rbp)
    749a:	jmpq   759c <inflateBack+0x26c>
    749f:	mov    0x3c(%r10),%edx
    74a3:	cmp    %edx,%r8d
    74a6:	jae    744f <inflateBack+0x11f>
    74a8:	sub    %r8d,%edx
    74ab:	mov    0x48(%r10),%rsi
    74af:	mov    %rdi,%rbx
    74b2:	mov    %r11,%r12
    74b5:	mov    %rax,%r13
    74b8:	mov    -0x98(%rbp),%rcx
    74bf:	mov    -0xa0(%rbp),%rdi
    74c6:	callq  *%rcx
    74c8:	test   %eax,%eax
    74ca:	jne    75eb <inflateBack+0x2bb>
    74d0:	mov    %r13,%rax
    74d3:	mov    %rbx,%rdi
    74d6:	mov    %r12,%r11
    74d9:	jmpq   744f <inflateBack+0x11f>
    74de:	mov    $0xfffffffffffffffd,%rdi
    74e5:	jmpq   744f <inflateBack+0x11f>
    74ea:	mov    $0xfffffffffffffffe,%rdi
    74f1:	jmpq   744f <inflateBack+0x11f>
    74f6:	movslq 0xc(%r10),%rcx
    74fa:	test   %ecx,%ecx
    74fc:	jne    75fd <inflateBack+0x2cd>
    7502:	mov    %r9,-0x58(%rbp)
    7506:	mov    %r11,-0x50(%rbp)
    750a:	jmpq   7642 <inflateBack+0x312>
    750f:	mov    %rbx,%rcx
    7512:	and    $0x7,%ecx
    7515:	shr    %cl,%r15
    7518:	and    $0xfffffff8,%ebx
    751b:	mov    %r9,-0x88(%rbp)
    7522:	mov    %r11,-0x50(%rbp)
    7526:	jmpq   76b1 <inflateBack+0x381>
    752b:	mov    %r9,-0xb0(%rbp)
    7532:	mov    %r11,-0x88(%rbp)
    7539:	jmpq   7729 <inflateBack+0x3f9>
    753e:	cmp    $0x101,%r8d
    7545:	ja     779c <inflateBack+0x46c>
    754b:	mov    %r9,-0x58(%rbp)
    754f:	jmp    759c <inflateBack+0x26c>
    7551:	test   %eax,%eax
    7553:	jne    7578 <inflateBack+0x248>
    7555:	mov    %r12,%rsi
    7558:	mov    %r10,%r12
    755b:	mov    %r13,%rdi
    755e:	callq  *%r14
    7561:	test   %eax,%eax
    7563:	je     7813 <inflateBack+0x4e3>
    7569:	mov    %r12,%r10
    756c:	mov    $0x1,%edi
    7571:	lea    -0xd8(%rbp),%r12
    7578:	mov    -0xd8(%rbp),%rdx
    757f:	lea    0x1(%rdx),%rcx
    7583:	mov    %rcx,-0xd8(%rbp)
    758a:	movzbl (%rdx),%edx
    758d:	mov    %rbx,%rcx
    7590:	shl    %cl,%rdx
    7593:	add    %rdx,%r15
    7596:	add    $0xffffffff,%eax
    7599:	lea    0x8(%rcx),%ebx
    759c:	mov    0x78(%r10),%ecx
    75a0:	mov    %rdi,%rdx
    75a3:	shl    %cl,%edx
    75a5:	lea    -0x1(%rdx),%ecx
    75a8:	and    %r15d,%ecx
    75ab:	mov    %ecx,%ecx
    75ad:	mov    0x68(%r10),%rdx
    75b1:	mov    (%rdx,%rcx,4),%edx
    75b4:	mov    %edx,-0xd0(%rbp)
    75ba:	mov    %rdx,%rcx
    75bd:	shr    $0x8,%ecx
    75c0:	movzbl %cl,%ecx
    75c3:	cmp    %ecx,%ebx
    75c5:	jb     7551 <inflateBack+0x221>
    75c7:	test   %dl,%dl
    75c9:	je     78cb <inflateBack+0x59b>
    75cf:	movzbl %dl,%ecx
    75d2:	and    $0xf0,%ecx
    75d8:	test   %ecx,%ecx
    75da:	jne    78cb <inflateBack+0x59b>
    75e0:	mov    %edx,-0xcc(%rbp)
    75e6:	jmpq   787e <inflateBack+0x54e>
    75eb:	mov    %r13,%rax
    75ee:	mov    %r12,%r11
    75f1:	mov    $0xfffffffffffffffb,%rdi
    75f8:	jmpq   744f <inflateBack+0x11f>
    75fd:	mov    %rbx,%rcx
    7600:	and    $0x7,%ecx
    7603:	shr    %cl,%r15
    7606:	and    $0xfffffff8,%ebx
    7609:	movl   $0x3f50,0x8(%r10)
    7611:	jmpq   7432 <inflateBack+0x102>
    7616:	test   %eax,%eax
    7618:	je     7921 <inflateBack+0x5f1>
    761e:	mov    -0xd8(%rbp),%rdx
    7625:	lea    0x1(%rdx),%rcx
    7629:	mov    %rcx,-0xd8(%rbp)
    7630:	movzbl (%rdx),%edx
    7633:	mov    %rbx,%rcx
    7636:	shl    %cl,%rdx
    7639:	add    %rdx,%r15
    763c:	add    $0xffffffff,%eax
    763f:	lea    0x8(%rcx),%ebx
    7642:	cmp    $0x2,%ebx
    7645:	jbe    7616 <inflateBack+0x2e6>
    7647:	mov    %r15,%rcx
    764a:	and    $0x1,%ecx
    764d:	mov    -0x90(%rbp),%r10
    7654:	mov    %ecx,0xc(%r10)
    7658:	mov    %r15,%rcx
    765b:	shr    %rcx
    765e:	and    $0x3,%ecx
    7661:	cmp    $0x1,%ecx
    7664:	jbe    794f <inflateBack+0x61f>
    766a:	cmp    $0x2,%ecx
    766d:	je     7962 <inflateBack+0x632>
    7673:	cmp    $0x3,%ecx
    7676:	je     7970 <inflateBack+0x640>
    767c:	mov    -0x50(%rbp),%r11
    7680:	jmpq   7995 <inflateBack+0x665>
    7685:	test   %eax,%eax
    7687:	je     79b1 <inflateBack+0x681>
    768d:	mov    -0xd8(%rbp),%rdx
    7694:	lea    0x1(%rdx),%rcx
    7698:	mov    %rcx,-0xd8(%rbp)
    769f:	add    $0xffffffff,%eax
    76a2:	movzbl (%rdx),%edx
    76a5:	mov    %rbx,%rcx
    76a8:	shl    %cl,%rdx
    76ab:	add    %rdx,%r15
    76ae:	lea    0x8(%rcx),%ebx
    76b1:	cmp    $0x18,%ebx
    76b4:	jbe    7685 <inflateBack+0x355>
    76b6:	mov    %r15,%rcx
    76b9:	shr    $0x10,%rcx
    76bd:	xor    $0xffff,%rcx
    76c4:	movzwl %r15w,%edx
    76c8:	cmp    %rdx,%rcx
    76cb:	jne    79df <inflateBack+0x6af>
    76d1:	movzwl %r15w,%ebx
    76d5:	mov    -0xa8(%rbp),%r15
    76dc:	mov    -0x88(%rbp),%r9
    76e3:	mov    -0x90(%rbp),%r10
    76ea:	mov    -0x98(%rbp),%rcx
    76f1:	mov    -0xa0(%rbp),%rdi
    76f8:	jmpq   7a88 <inflateBack+0x758>
    76fd:	test   %eax,%eax
    76ff:	je     7ab2 <inflateBack+0x782>
    7705:	mov    -0xd8(%rbp),%rdx
    770c:	lea    0x1(%rdx),%rcx
    7710:	mov    %rcx,-0xd8(%rbp)
    7717:	movzbl (%rdx),%edx
    771a:	mov    %rbx,%rcx
    771d:	shl    %cl,%rdx
    7720:	add    %rdx,%r15
    7723:	add    $0xffffffff,%eax
    7726:	lea    0x8(%rcx),%ebx
    7729:	cmp    $0xd,%ebx
    772c:	jbe    76fd <inflateBack+0x3cd>
    772e:	mov    %r15,%rcx
    7731:	and    $0x1f,%ecx
    7734:	lea    0x101(%rcx),%esi
    773a:	mov    -0x90(%rbp),%r10
    7741:	mov    %esi,0x84(%r10)
    7748:	mov    %r15,%rcx
    774b:	shr    $0x5,%rcx
    774f:	and    $0x1f,%ecx
    7752:	lea    0x1(%rcx),%edx
    7755:	mov    %edx,0x88(%r10)
    775c:	mov    %r15,%rcx
    775f:	shr    $0xa,%rcx
    7763:	and    $0xf,%ecx
    7766:	add    $0x4,%ecx
    7769:	mov    %ecx,0x80(%r10)
    7770:	shr    $0xe,%r15
    7774:	add    $0xfffffff2,%ebx
    7777:	cmp    $0x11e,%esi
    777d:	ja     7ae3 <inflateBack+0x7b3>
    7783:	cmp    $0x1e,%edx
    7786:	ja     7ae3 <inflateBack+0x7b3>
    778c:	movl   $0x0,0x8c(%r10)
    7797:	jmpq   7b8d <inflateBack+0x85d>
    779c:	mov    %r9,0x18(%r11)
    77a0:	mov    %r8d,0x20(%r11)
    77a4:	mov    -0xd8(%rbp),%rcx
    77ab:	mov    %rcx,(%r11)
    77ae:	mov    %eax,0x8(%r11)
    77b2:	mov    %r15,0x50(%r10)
    77b6:	mov    %ebx,0x58(%r10)
    77ba:	mov    0x3c(%r10),%eax
    77be:	cmp    0x40(%r10),%eax
    77c2:	jbe    77cb <inflateBack+0x49b>
    77c4:	sub    %r8d,%eax
    77c7:	mov    %eax,0x40(%r10)
    77cb:	mov    %r11,%rbx
    77ce:	mov    %rdi,%r12
    77d1:	mov    %r10,%r15
    77d4:	mov    0x3c(%r15),%esi
    77d8:	mov    %rbx,%rdi
    77db:	callq  2220 <inflate_fast@plt>
    77e0:	mov    0x18(%rbx),%r9
    77e4:	mov    0x20(%rbx),%r8d
    77e8:	mov    (%rbx),%rax
    77eb:	mov    %rax,-0xd8(%rbp)
    77f2:	mov    %r12,%rdi
    77f5:	mov    %r15,%r10
    77f8:	mov    %rbx,%r11
    77fb:	mov    0x8(%r11),%eax
    77ff:	mov    0x50(%r10),%r15
    7803:	mov    0x58(%r10),%ebx
    7807:	lea    -0xd8(%rbp),%r12
    780e:	jmpq   7432 <inflateBack+0x102>
    7813:	movq   $0x0,-0xd8(%rbp)
    781e:	mov    -0x88(%rbp),%r11
    7825:	xor    %eax,%eax
    7827:	mov    $0xfffffffffffffffb,%rdi
    782e:	jmpq   744f <inflateBack+0x11f>
    7833:	test   %eax,%eax
    7835:	jne    785a <inflateBack+0x52a>
    7837:	mov    %r12,%rsi
    783a:	mov    %r10,%r12
    783d:	mov    %r13,%rdi
    7840:	callq  *%r14
    7843:	test   %eax,%eax
    7845:	je     7bb0 <inflateBack+0x880>
    784b:	mov    %r12,%r10
    784e:	mov    $0x1,%edi
    7853:	lea    -0xd8(%rbp),%r12
    785a:	mov    -0xd8(%rbp),%rdx
    7861:	lea    0x1(%rdx),%rcx
    7865:	mov    %rcx,-0xd8(%rbp)
    786c:	movzbl (%rdx),%edx
    786f:	mov    %rbx,%rcx
    7872:	shl    %cl,%rdx
    7875:	add    %rdx,%r15
    7878:	add    $0xffffffff,%eax
    787b:	lea    0x8(%rcx),%ebx
    787e:	movzbl -0xcb(%rbp),%esi
    7885:	movzbl -0xcc(%rbp),%ecx
    788c:	add    %esi,%ecx
    788e:	mov    %rdi,%rdx
    7891:	shl    %cl,%edx
    7893:	add    $0xffffffff,%edx
    7896:	and    %r15d,%edx
    7899:	mov    %rsi,%rcx
    789c:	shr    %cl,%edx
    789e:	movzwl -0xca(%rbp),%esi
    78a5:	add    %esi,%edx
    78a7:	mov    %edx,%edx
    78a9:	mov    0x68(%r10),%rsi
    78ad:	mov    (%rsi,%rdx,4),%edx
    78b0:	mov    %edx,-0xd0(%rbp)
    78b6:	shr    $0x8,%edx
    78b9:	movzbl %dl,%edx
    78bc:	add    %ecx,%edx
    78be:	cmp    %ebx,%edx
    78c0:	ja     7833 <inflateBack+0x503>
    78c6:	shr    %cl,%r15
    78c9:	sub    %ecx,%ebx
    78cb:	movzwl -0xce(%rbp),%ecx
    78d2:	mov    %ecx,0x5c(%r10)
    78d6:	movzbl -0xcf(%rbp),%ecx
    78dd:	shr    %cl,%r15
    78e0:	sub    %ecx,%ebx
    78e2:	movzbl -0xd0(%rbp),%ecx
    78e9:	test   %cl,%cl
    78eb:	je     7bd0 <inflateBack+0x8a0>
    78f1:	mov    %rcx,%rdx
    78f4:	and    $0x20,%edx
    78f7:	test   %edx,%edx
    78f9:	jg     7c07 <inflateBack+0x8d7>
    78ff:	mov    %rcx,%rdx
    7902:	and    $0x40,%edx
    7905:	test   %edx,%edx
    7907:	jg     7c26 <inflateBack+0x8f6>
    790d:	and    $0xf,%ecx
    7910:	mov    %ecx,0x64(%r10)
    7914:	test   %ecx,%ecx
    7916:	jne    7d77 <inflateBack+0xa47>
    791c:	jmpq   7c9b <inflateBack+0x96b>
    7921:	mov    %r13,%rdi
    7924:	mov    %r12,%rsi
    7927:	callq  *%r14
    792a:	test   %eax,%eax
    792c:	jne    761e <inflateBack+0x2ee>
    7932:	movq   $0x0,-0xd8(%rbp)
    793d:	mov    -0x50(%rbp),%r11
    7941:	xor    %eax,%eax
    7943:	mov    $0xfffffffffffffffb,%rdi
    794a:	jmpq   744f <inflateBack+0x11f>
    794f:	test   %ecx,%ecx
    7951:	je     7989 <inflateBack+0x659>
    7953:	cmp    $0x1,%ecx
    7956:	je     7da7 <inflateBack+0xa77>
    795c:	mov    -0x50(%rbp),%r11
    7960:	jmp    7995 <inflateBack+0x665>
    7962:	movl   $0x3f44,0x8(%r10)
    796a:	mov    -0x50(%rbp),%r11
    796e:	jmp    7995 <inflateBack+0x665>
    7970:	mov    -0x50(%rbp),%r11
    7974:	lea    0xc73f(%rip),%rcx        # 140ba <order.1+0x26>
    797b:	mov    %rcx,0x30(%r11)
    797f:	movl   $0x3f51,0x8(%r10)
    7987:	jmp    7995 <inflateBack+0x665>
    7989:	movl   $0x3f41,0x8(%r10)
    7991:	mov    -0x50(%rbp),%r11
    7995:	shr    $0x3,%r15
    7999:	add    $0xfffffffd,%ebx
    799c:	mov    -0xa8(%rbp),%r8
    79a3:	mov    $0x1,%edi
    79a8:	mov    -0x58(%rbp),%r9
    79ac:	jmpq   7432 <inflateBack+0x102>
    79b1:	mov    %r13,%rdi
    79b4:	mov    %r12,%rsi
    79b7:	callq  *%r14
    79ba:	test   %eax,%eax
    79bc:	jne    768d <inflateBack+0x35d>
    79c2:	movq   $0x0,-0xd8(%rbp)
    79cd:	mov    -0x50(%rbp),%r11
    79d1:	xor    %eax,%eax
    79d3:	mov    $0xfffffffffffffffb,%rdi
    79da:	jmpq   744f <inflateBack+0x11f>
    79df:	mov    -0x50(%rbp),%r11
    79e3:	lea    0xc6e3(%rip),%rcx        # 140cd <order.1+0x39>
    79ea:	mov    %rcx,0x30(%r11)
    79ee:	mov    -0x90(%rbp),%r10
    79f5:	movl   $0x3f51,0x8(%r10)
    79fd:	mov    -0xa8(%rbp),%r8
    7a04:	mov    $0x1,%edi
    7a09:	mov    -0x88(%rbp),%r9
    7a10:	jmpq   7432 <inflateBack+0x102>
    7a15:	mov    %r15,%r12
    7a18:	mov    %r9,%rdi
    7a1b:	mov    %r10,%rbx
    7a1e:	mov    %rax,%r14
    7a21:	mov    %r12d,%r13d
    7a24:	mov    -0xd8(%rbp),%rsi
    7a2b:	mov    %r13,%rdx
    7a2e:	callq  21f0 <memcpy@plt>
    7a33:	mov    %r13,%rax
    7a36:	add    -0xd8(%rbp),%rax
    7a3d:	mov    %rax,-0xd8(%rbp)
    7a44:	mov    0x5c(%rbx),%edx
    7a47:	sub    %r12d,%edx
    7a4a:	mov    %r14,%rax
    7a4d:	sub    %r12d,%eax
    7a50:	sub    %r12d,%r15d
    7a53:	mov    -0xb8(%rbp),%rcx
    7a5a:	lea    0x0(%r13,%rcx,1),%r9
    7a5f:	mov    %rbx,%r10
    7a62:	mov    %rdx,%rbx
    7a65:	mov    -0xc0(%rbp),%r14
    7a6c:	mov    -0xc8(%rbp),%r13
    7a73:	lea    -0xd8(%rbp),%r12
    7a7a:	mov    -0x98(%rbp),%rcx
    7a81:	mov    -0xa0(%rbp),%rdi
    7a88:	mov    %ebx,0x5c(%r10)
    7a8c:	test   %ebx,%ebx
    7a8e:	jne    7dda <inflateBack+0xaaa>
    7a94:	movl   $0x3f3f,0x8(%r10)
    7a9c:	mov    %r15,%r8
    7a9f:	mov    -0x50(%rbp),%r11
    7aa3:	mov    $0x1,%edi
    7aa8:	xor    %ebx,%ebx
    7aaa:	mov    %rbx,%r15
    7aad:	jmpq   7432 <inflateBack+0x102>
    7ab2:	mov    %r13,%rdi
    7ab5:	mov    %r12,%rsi
    7ab8:	callq  *%r14
    7abb:	test   %eax,%eax
    7abd:	jne    7705 <inflateBack+0x3d5>
    7ac3:	movq   $0x0,-0xd8(%rbp)
    7ace:	mov    -0x88(%rbp),%r11
    7ad5:	xor    %eax,%eax
    7ad7:	mov    $0xfffffffffffffffb,%rdi
    7ade:	jmpq   744f <inflateBack+0x11f>
    7ae3:	mov    -0x88(%rbp),%r11
    7aea:	lea    0xc5f9(%rip),%rcx        # 140ea <order.1+0x56>
    7af1:	mov    %rcx,0x30(%r11)
    7af5:	movl   $0x3f51,0x8(%r10)
    7afd:	mov    -0xa8(%rbp),%r8
    7b04:	mov    $0x1,%edi
    7b09:	mov    -0xb0(%rbp),%r9
    7b10:	jmpq   7432 <inflateBack+0x102>
    7b15:	test   %eax,%eax
    7b17:	jne    7b2a <inflateBack+0x7fa>
    7b19:	mov    %r13,%rdi
    7b1c:	mov    %r12,%rsi
    7b1f:	callq  *%r14
    7b22:	test   %eax,%eax
    7b24:	je     7e31 <inflateBack+0xb01>
    7b2a:	mov    -0xd8(%rbp),%rdx
    7b31:	lea    0x1(%rdx),%rcx
    7b35:	mov    %rcx,-0xd8(%rbp)
    7b3c:	movzbl (%rdx),%edx
    7b3f:	mov    %rbx,%rcx
    7b42:	shl    %cl,%rdx
    7b45:	add    %rdx,%r15
    7b48:	add    $0xffffffff,%eax
    7b4b:	lea    0x8(%rcx),%ebx
    7b4e:	cmp    $0x2,%ebx
    7b51:	jbe    7b15 <inflateBack+0x7e5>
    7b53:	mov    -0x90(%rbp),%r10
    7b5a:	mov    0x8c(%r10),%edx
    7b61:	lea    0x1(%rdx),%ecx
    7b64:	mov    %ecx,0x8c(%r10)
    7b6b:	lea    0xc522(%rip),%rcx        # 14094 <order.1>
    7b72:	movzwl (%rcx,%rdx,2),%ecx
    7b76:	mov    %r15,%rdx
    7b79:	and    $0x7,%dx
    7b7d:	mov    %dx,0x98(%r10,%rcx,2)
    7b86:	shr    $0x3,%r15
    7b8a:	add    $0xfffffffd,%ebx
    7b8d:	mov    0x80(%r10),%ecx
    7b94:	cmp    0x8c(%r10),%ecx
    7b9b:	ja     7b4e <inflateBack+0x81e>
    7b9d:	mov    -0xa8(%rbp),%r12
    7ba4:	lea    0xc4e9(%rip),%rsi        # 14094 <order.1>
    7bab:	jmpq   7e6a <inflateBack+0xb3a>
    7bb0:	movq   $0x0,-0xd8(%rbp)
    7bbb:	mov    -0x88(%rbp),%r11
    7bc2:	xor    %eax,%eax
    7bc4:	mov    $0xfffffffffffffffb,%rdi
    7bcb:	jmpq   744f <inflateBack+0x11f>
    7bd0:	mov    -0xa8(%rbp),%rcx
    7bd7:	test   %ecx,%ecx
    7bd9:	je     7ee7 <inflateBack+0xbb7>
    7bdf:	mov    -0x58(%rbp),%rdx
    7be3:	movzbl 0x5c(%r10),%esi
    7be8:	mov    %sil,(%rdx)
    7beb:	movl   $0x3f48,0x8(%r10)
    7bf3:	lea    -0x1(%rcx),%r8d
    7bf7:	lea    0x1(%rdx),%r9
    7bfb:	mov    -0x88(%rbp),%r11
    7c02:	jmpq   7432 <inflateBack+0x102>
    7c07:	movl   $0x3f3f,0x8(%r10)
    7c0f:	mov    -0xa8(%rbp),%r8
    7c16:	mov    -0x88(%rbp),%r11
    7c1d:	mov    -0x58(%rbp),%r9
    7c21:	jmpq   7432 <inflateBack+0x102>
    7c26:	mov    -0x88(%rbp),%r11
    7c2d:	lea    0xc564(%rip),%rcx        # 14198 <order.1+0x104>
    7c34:	mov    %rcx,0x30(%r11)
    7c38:	movl   $0x3f51,0x8(%r10)
    7c40:	mov    -0xa8(%rbp),%r8
    7c47:	mov    -0x58(%rbp),%r9
    7c4b:	jmpq   7432 <inflateBack+0x102>
    7c50:	test   %eax,%eax
    7c52:	jne    7c77 <inflateBack+0x947>
    7c54:	mov    %r12,%rsi
    7c57:	mov    %r10,%r12
    7c5a:	mov    %r13,%rdi
    7c5d:	callq  *%r14
    7c60:	test   %eax,%eax
    7c62:	je     7f50 <inflateBack+0xc20>
    7c68:	mov    %r12,%r10
    7c6b:	mov    $0x1,%edi
    7c70:	lea    -0xd8(%rbp),%r12
    7c77:	mov    -0xd8(%rbp),%rdx
    7c7e:	lea    0x1(%rdx),%rcx
    7c82:	mov    %rcx,-0xd8(%rbp)
    7c89:	movzbl (%rdx),%edx
    7c8c:	mov    %rbx,%rcx
    7c8f:	shl    %cl,%rdx
    7c92:	add    %rdx,%r15
    7c95:	add    $0xffffffff,%eax
    7c98:	lea    0x8(%rcx),%ebx
    7c9b:	mov    0x7c(%r10),%ecx
    7c9f:	mov    %rdi,%rdx
    7ca2:	shl    %cl,%edx
    7ca4:	lea    -0x1(%rdx),%ecx
    7ca7:	and    %r15d,%ecx
    7caa:	mov    %ecx,%ecx
    7cac:	mov    0x70(%r10),%rdx
    7cb0:	mov    (%rdx,%rcx,4),%edx
    7cb3:	mov    %edx,-0xd0(%rbp)
    7cb9:	mov    %rdx,%rcx
    7cbc:	shr    $0x8,%ecx
    7cbf:	movzbl %cl,%ecx
    7cc2:	cmp    %ecx,%ebx
    7cc4:	jb     7c50 <inflateBack+0x920>
    7cc6:	movzbl %dl,%ecx
    7cc9:	and    $0xf0,%ecx
    7ccf:	test   %ecx,%ecx
    7cd1:	je     7f70 <inflateBack+0xc40>
    7cd7:	movzbl -0xcf(%rbp),%ecx
    7cde:	shr    %cl,%r15
    7ce1:	sub    %ecx,%ebx
    7ce3:	movzbl -0xd0(%rbp),%ecx
    7cea:	mov    %rcx,%rdx
    7ced:	and    $0x40,%edx
    7cf0:	test   %edx,%edx
    7cf2:	jg     7f7b <inflateBack+0xc4b>
    7cf8:	movzwl -0xce(%rbp),%edx
    7cff:	mov    %edx,0x60(%r10)
    7d03:	and    $0xf,%ecx
    7d06:	mov    %ecx,0x64(%r10)
    7d0a:	test   %ecx,%ecx
    7d0c:	jne    7fd1 <inflateBack+0xca1>
    7d12:	mov    0x60(%r10),%esi
    7d16:	mov    0x3c(%r10),%ecx
    7d1a:	mov    0x40(%r10),%edx
    7d1e:	cmp    %ecx,%edx
    7d20:	jb     8000 <inflateBack+0xcd0>
    7d26:	pushq  -0x30(%rbp)
    7d29:	popq   -0x38(%rbp)
    7d2c:	jmpq   8009 <inflateBack+0xcd9>
    7d31:	test   %eax,%eax
    7d33:	jne    7d53 <inflateBack+0xa23>
    7d35:	mov    %r12,%rsi
    7d38:	mov    %r10,%r12
    7d3b:	mov    %r13,%rdi
    7d3e:	callq  *%r14
    7d41:	test   %eax,%eax
    7d43:	je     806f <inflateBack+0xd3f>
    7d49:	mov    %r12,%r10
    7d4c:	lea    -0xd8(%rbp),%r12
    7d53:	mov    -0xd8(%rbp),%rdx
    7d5a:	lea    0x1(%rdx),%rcx
    7d5e:	mov    %rcx,-0xd8(%rbp)
    7d65:	movzbl (%rdx),%edx
    7d68:	mov    %rbx,%rcx
    7d6b:	shl    %cl,%rdx
    7d6e:	add    %rdx,%r15
    7d71:	add    $0xffffffff,%eax
    7d74:	lea    0x8(%rcx),%ebx
    7d77:	mov    0x64(%r10),%ecx
    7d7b:	cmp    %ebx,%ecx
    7d7d:	ja     7d31 <inflateBack+0xa01>
    7d7f:	mov    %r15,%rdx
    7d82:	shr    %cl,%rdx
    7d85:	sub    %ecx,%ebx
    7d87:	mov    $0x1,%edi
    7d8c:	mov    %rdi,%rsi
    7d8f:	shl    %cl,%esi
    7d91:	lea    -0x1(%rsi),%ecx
    7d94:	and    %r15d,%ecx
    7d97:	add    0x5c(%r10),%ecx
    7d9b:	mov    %ecx,0x5c(%r10)
    7d9f:	mov    %rdx,%r15
    7da2:	jmpq   7c9b <inflateBack+0x96b>
    7da7:	mov    %r10,%r12
    7daa:	mov    %rax,%r14
    7dad:	mov    %r12,%rdi
    7db0:	callq  89e0 <fixedtables>
    7db5:	mov    %r14,%rax
    7db8:	mov    %r12,%r10
    7dbb:	movl   $0x3f48,0x8(%r10)
    7dc3:	mov    -0x50(%rbp),%r11
    7dc7:	mov    -0xc0(%rbp),%r14
    7dce:	lea    -0xd8(%rbp),%r12
    7dd5:	jmpq   7995 <inflateBack+0x665>
    7dda:	test   %eax,%eax
    7ddc:	je     808f <inflateBack+0xd5f>
    7de2:	test   %r15d,%r15d
    7de5:	jne    7e12 <inflateBack+0xae2>
    7de7:	mov    %r10,%r13
    7dea:	mov    %rax,%r14
    7ded:	mov    0x3c(%r13),%r15d
    7df1:	mov    %r15d,0x40(%r13)
    7df5:	mov    0x48(%r13),%r12
    7df9:	mov    %r12,%rsi
    7dfc:	mov    %r15,%rdx
    7dff:	callq  *%rcx
    7e01:	test   %eax,%eax
    7e03:	jne    80c0 <inflateBack+0xd90>
    7e09:	mov    %r14,%rax
    7e0c:	mov    %r12,%r9
    7e0f:	mov    %r13,%r10
    7e12:	mov    %r9,-0xb8(%rbp)
    7e19:	cmp    %eax,%ebx
    7e1b:	jbe    7e20 <inflateBack+0xaf0>
    7e1d:	mov    %rax,%rbx
    7e20:	cmp    %r15d,%ebx
    7e23:	ja     7a15 <inflateBack+0x6e5>
    7e29:	mov    %rbx,%r12
    7e2c:	jmpq   7a18 <inflateBack+0x6e8>
    7e31:	movq   $0x0,-0xd8(%rbp)
    7e3c:	mov    -0x88(%rbp),%r11
    7e43:	xor    %eax,%eax
    7e45:	mov    $0xfffffffffffffffb,%rdi
    7e4c:	jmpq   744f <inflateBack+0x11f>
    7e51:	lea    0x1(%rdx),%ecx
    7e54:	mov    %ecx,0x8c(%r10)
    7e5b:	movzwl (%rsi,%rdx,2),%ecx
    7e5f:	movw   $0x0,0x98(%r10,%rcx,2)
    7e6a:	mov    0x8c(%r10),%edx
    7e71:	cmp    $0x12,%edx
    7e74:	jbe    7e51 <inflateBack+0xb21>
    7e76:	mov    -0x78(%rbp),%rcx
    7e7a:	mov    %rcx,0x90(%r10)
    7e81:	mov    %rcx,0x68(%r10)
    7e85:	mov    %r10,%r13
    7e88:	mov    %rax,%r14
    7e8b:	movl   $0x7,0x78(%r13)
    7e93:	xor    %edi,%edi
    7e95:	mov    -0x80(%rbp),%rsi
    7e99:	mov    $0x13,%edx
    7e9e:	mov    -0x60(%rbp),%rcx
    7ea2:	mov    -0x68(%rbp),%r8
    7ea6:	mov    -0x70(%rbp),%r9
    7eaa:	callq  22a0 <inflate_table@plt>
    7eaf:	test   %eax,%eax
    7eb1:	jne    80d3 <inflateBack+0xda3>
    7eb7:	mov    %r14,%rax
    7eba:	mov    %r13,%r10
    7ebd:	movl   $0x0,0x8c(%r10)
    7ec8:	mov    $0x1,%edi
    7ecd:	mov    -0xc0(%rbp),%r14
    7ed4:	mov    -0xc8(%rbp),%r13
    7edb:	lea    -0xd8(%rbp),%r12
    7ee2:	jmpq   813b <inflateBack+0xe0b>
    7ee7:	mov    0x3c(%r10),%r13d
    7eeb:	mov    %r13d,0x40(%r10)
    7eef:	mov    0x48(%r10),%r12
    7ef3:	mov    -0xa0(%rbp),%rdi
    7efa:	mov    %r12,%rsi
    7efd:	mov    %r13,%rdx
    7f00:	mov    %rbx,-0xa8(%rbp)
    7f07:	mov    %r10,%rbx
    7f0a:	mov    %rax,%r14
    7f0d:	mov    -0x98(%rbp),%rcx
    7f14:	callq  *%rcx
    7f16:	test   %eax,%eax
    7f18:	jne    8180 <inflateBack+0xe50>
    7f1e:	mov    %r14,%rax
    7f21:	mov    %r13,%rcx
    7f24:	mov    %r12,%rdx
    7f27:	mov    %rbx,%r10
    7f2a:	mov    -0xa8(%rbp),%rbx
    7f31:	mov    $0x1,%edi
    7f36:	mov    -0xc0(%rbp),%r14
    7f3d:	mov    -0xc8(%rbp),%r13
    7f44:	lea    -0xd8(%rbp),%r12
    7f4b:	jmpq   7be3 <inflateBack+0x8b3>
    7f50:	movq   $0x0,-0xd8(%rbp)
    7f5b:	mov    -0x88(%rbp),%r11
    7f62:	xor    %eax,%eax
    7f64:	mov    $0xfffffffffffffffb,%rdi
    7f6b:	jmpq   744f <inflateBack+0x11f>
    7f70:	mov    %edx,-0xcc(%rbp)
    7f76:	jmpq   81c2 <inflateBack+0xe92>
    7f7b:	mov    -0x88(%rbp),%r11
    7f82:	lea    0xc22b(%rip),%rcx        # 141b4 <order.1+0x120>
    7f89:	mov    %rcx,0x30(%r11)
    7f8d:	movl   $0x3f51,0x8(%r10)
    7f95:	mov    -0xa8(%rbp),%r8
    7f9c:	mov    -0x58(%rbp),%r9
    7fa0:	jmpq   7432 <inflateBack+0x102>
    7fa5:	test   %eax,%eax
    7fa7:	je     8210 <inflateBack+0xee0>
    7fad:	mov    -0xd8(%rbp),%rdx
    7fb4:	lea    0x1(%rdx),%rcx
    7fb8:	mov    %rcx,-0xd8(%rbp)
    7fbf:	movzbl (%rdx),%edx
    7fc2:	mov    %rbx,%rcx
    7fc5:	shl    %cl,%rdx
    7fc8:	add    %rdx,%r15
    7fcb:	add    $0xffffffff,%eax
    7fce:	lea    0x8(%rcx),%ebx
    7fd1:	mov    0x64(%r10),%ecx
    7fd5:	cmp    %ebx,%ecx
    7fd7:	ja     7fa5 <inflateBack+0xc75>
    7fd9:	mov    %r15,%rdx
    7fdc:	mov    %rdx,%r15
    7fdf:	shr    %cl,%r15
    7fe2:	sub    %ecx,%ebx
    7fe4:	mov    $0x1,%edi
    7fe9:	mov    %rdi,%rsi
    7fec:	shl    %cl,%esi
    7fee:	lea    -0x1(%rsi),%ecx
    7ff1:	and    %edx,%ecx
    7ff3:	add    0x60(%r10),%ecx
    7ff7:	mov    %ecx,0x60(%r10)
    7ffb:	jmpq   7d12 <inflateBack+0x9e2>
    8000:	pushq  -0xa8(%rbp)
    8006:	popq   -0x38(%rbp)
    8009:	mov    -0x38(%rbp),%rdx
    800d:	sub    %edx,%ecx
    800f:	cmp    %esi,%ecx
    8011:	jb     8233 <inflateBack+0xf03>
    8017:	mov    %rax,-0xb0(%rbp)
    801e:	mov    %r15,-0xb8(%rbp)
    8025:	mov    %rbx,-0x40(%rbp)
    8029:	mov    -0xa8(%rbp),%r8
    8030:	mov    -0x58(%rbp),%r9
    8034:	mov    -0x98(%rbp),%r12
    803b:	mov    -0xa0(%rbp),%r13
    8042:	test   %r8d,%r8d
    8045:	je     825d <inflateBack+0xf2d>
    804b:	mov    0x3c(%r10),%ecx
    804f:	mov    0x60(%r10),%eax
    8053:	mov    %rcx,%rdx
    8056:	sub    %eax,%edx
    8058:	cmp    %edx,%r8d
    805b:	ja     828e <inflateBack+0xf5e>
    8061:	mov    %r9,%rcx
    8064:	sub    %rax,%rcx
    8067:	mov    %r8,%rsi
    806a:	jmpq   829a <inflateBack+0xf6a>
    806f:	movq   $0x0,-0xd8(%rbp)
    807a:	mov    -0x88(%rbp),%r11
    8081:	xor    %eax,%eax
    8083:	mov    $0xfffffffffffffffb,%rdi
    808a:	jmpq   744f <inflateBack+0x11f>
    808f:	mov    %r14,%rax
    8092:	mov    %r9,%r14
    8095:	mov    %r12,%rsi
    8098:	mov    %rdi,%r12
    809b:	mov    %r13,%rdi
    809e:	mov    %r10,%r13
    80a1:	callq  *%rax
    80a3:	test   %eax,%eax
    80a5:	je     82c5 <inflateBack+0xf95>
    80ab:	mov    %r12,%rdi
    80ae:	mov    %r14,%r9
    80b1:	mov    %r13,%r10
    80b4:	mov    -0x98(%rbp),%rcx
    80bb:	jmpq   7de2 <inflateBack+0xab2>
    80c0:	mov    %r14,%rax
    80c3:	mov    -0x50(%rbp),%r11
    80c7:	mov    $0xfffffffffffffffb,%rdi
    80ce:	jmpq   744f <inflateBack+0x11f>
    80d3:	mov    -0x88(%rbp),%r11
    80da:	lea    0xc02d(%rip),%rax        # 1410e <order.1+0x7a>
    80e1:	mov    %rax,0x30(%r11)
    80e5:	mov    %r14,%rax
    80e8:	mov    %r12,%r8
    80eb:	mov    %r13,%r10
    80ee:	movl   $0x3f51,0x8(%r10)
    80f6:	mov    $0x1,%edi
    80fb:	mov    -0xc0(%rbp),%r14
    8102:	mov    -0xc8(%rbp),%r13
    8109:	mov    -0xb0(%rbp),%r9
    8110:	lea    -0xd8(%rbp),%r12
    8117:	jmpq   7432 <inflateBack+0x102>
    811c:	mov    0x8c(%r10),%esi
    8123:	lea    0x1(%rsi),%r8d
    8127:	mov    %r8d,0x8c(%r10)
    812e:	shr    %cl,%r15
    8131:	sub    %ecx,%ebx
    8133:	mov    -0x80(%rbp),%rcx
    8137:	mov    %dx,(%rcx,%rsi,2)
    813b:	mov    0x88(%r10),%ecx
    8142:	add    0x84(%r10),%ecx
    8149:	cmp    0x8c(%r10),%ecx
    8150:	ja     830e <inflateBack+0xfde>
    8156:	mov    -0x88(%rbp),%r11
    815d:	mov    0x8(%r10),%ecx
    8161:	cmp    $0x3f51,%ecx
    8167:	jne    835f <inflateBack+0x102f>
    816d:	mov    -0xa8(%rbp),%r8
    8174:	mov    -0xb0(%rbp),%r9
    817b:	jmpq   7432 <inflateBack+0x102>
    8180:	mov    %r14,%rax
    8183:	mov    -0x88(%rbp),%r11
    818a:	mov    $0xfffffffffffffffb,%rdi
    8191:	jmpq   744f <inflateBack+0x11f>
    8196:	test   %eax,%eax
    8198:	je     843e <inflateBack+0x110e>
    819e:	mov    -0xd8(%rbp),%rdx
    81a5:	lea    0x1(%rdx),%rcx
    81a9:	mov    %rcx,-0xd8(%rbp)
    81b0:	movzbl (%rdx),%edx
    81b3:	mov    %rbx,%rcx
    81b6:	shl    %cl,%rdx
    81b9:	add    %rdx,%r15
    81bc:	add    $0xffffffff,%eax
    81bf:	lea    0x8(%rcx),%ebx
    81c2:	movzbl -0xcb(%rbp),%esi
    81c9:	movzbl -0xcc(%rbp),%ecx
    81d0:	add    %esi,%ecx
    81d2:	mov    %rdi,%rdx
    81d5:	shl    %cl,%edx
    81d7:	add    $0xffffffff,%edx
    81da:	and    %r15d,%edx
    81dd:	mov    %rsi,%rcx
    81e0:	shr    %cl,%edx
    81e2:	movzwl -0xca(%rbp),%esi
    81e9:	add    %esi,%edx
    81eb:	mov    %edx,%edx
    81ed:	mov    0x70(%r10),%rsi
    81f1:	mov    (%rsi,%rdx,4),%edx
    81f4:	mov    %edx,-0xd0(%rbp)
    81fa:	shr    $0x8,%edx
    81fd:	movzbl %dl,%edx
    8200:	add    %ecx,%edx
    8202:	cmp    %ebx,%edx
    8204:	ja     8196 <inflateBack+0xe66>
    8206:	shr    %cl,%r15
    8209:	sub    %ecx,%ebx
    820b:	jmpq   7cd7 <inflateBack+0x9a7>
    8210:	mov    %r12,%rsi
    8213:	mov    %r10,%r12
    8216:	mov    %r13,%rdi
    8219:	callq  *%r14
    821c:	test   %eax,%eax
    821e:	je     8466 <inflateBack+0x1136>
    8224:	mov    %r12,%r10
    8227:	lea    -0xd8(%rbp),%r12
    822e:	jmpq   7fad <inflateBack+0xc7d>
    8233:	lea    0xbf90(%rip),%rcx        # 141ca <order.1+0x136>
    823a:	mov    -0x88(%rbp),%r11
    8241:	mov    %rcx,0x30(%r11)
    8245:	movl   $0x3f51,0x8(%r10)
    824d:	mov    -0xa8(%rbp),%r8
    8254:	mov    -0x58(%rbp),%r9
    8258:	jmpq   7432 <inflateBack+0x102>
    825d:	mov    %r10,%r15
    8260:	mov    0x3c(%r15),%ebx
    8264:	mov    %ebx,0x40(%r15)
    8268:	mov    0x48(%r15),%r14
    826c:	mov    %r13,%rdi
    826f:	mov    %r14,%rsi
    8272:	mov    %rbx,%rdx
    8275:	callq  *%r12
    8278:	test   %eax,%eax
    827a:	jne    8486 <inflateBack+0x1156>
    8280:	mov    %rbx,%r8
    8283:	mov    %r14,%r9
    8286:	mov    %r15,%r10
    8289:	jmpq   804b <inflateBack+0xd1b>
    828e:	sub    %ecx,%eax
    8290:	lea    (%r8,%rax,1),%esi
    8294:	mov    %edx,%eax
    8296:	lea    (%r9,%rax,1),%rcx
    829a:	mov    0x5c(%r10),%eax
    829e:	cmp    %esi,%eax
    82a0:	jae    82a5 <inflateBack+0xf75>
    82a2:	mov    %rax,%rsi
    82a5:	sub    %esi,%eax
    82a7:	mov    %eax,0x5c(%r10)
    82ab:	mov    -0x40(%rbp),%rbx
    82af:	mov    -0xb8(%rbp),%r15
    82b6:	mov    -0xb0(%rbp),%rax
    82bd:	mov    %rsi,%rdx
    82c0:	jmpq   84a4 <inflateBack+0x1174>
    82c5:	movq   $0x0,-0xd8(%rbp)
    82d0:	mov    -0x50(%rbp),%r11
    82d4:	xor    %eax,%eax
    82d6:	mov    $0xfffffffffffffffb,%rdi
    82dd:	jmpq   744f <inflateBack+0x11f>
    82e2:	test   %eax,%eax
    82e4:	je     84ea <inflateBack+0x11ba>
    82ea:	mov    -0xd8(%rbp),%rdx
    82f1:	lea    0x1(%rdx),%rcx
    82f5:	mov    %rcx,-0xd8(%rbp)
    82fc:	movzbl (%rdx),%edx
    82ff:	mov    %rbx,%rcx
    8302:	shl    %cl,%rdx
    8305:	add    %rdx,%r15
    8308:	add    $0xffffffff,%eax
    830b:	lea    0x8(%rcx),%ebx
    830e:	mov    0x78(%r10),%ecx
    8312:	mov    %rdi,%rdx
    8315:	shl    %cl,%edx
    8317:	lea    -0x1(%rdx),%ecx
    831a:	and    %r15d,%ecx
    831d:	mov    %ecx,%ecx
    831f:	mov    0x68(%r10),%rdx
    8323:	mov    (%rdx,%rcx,4),%edx
    8326:	mov    %edx,-0xd0(%rbp)
    832c:	mov    %rdx,%rcx
    832f:	shr    $0x8,%ecx
    8332:	movzbl %cl,%ecx
    8335:	cmp    %ebx,%ecx
    8337:	ja     82e2 <inflateBack+0xfb2>
    8339:	shr    $0x10,%edx
    833c:	cmp    $0xf,%dx
    8340:	jbe    811c <inflateBack+0xdec>
    8346:	cmp    $0x10,%dx
    834a:	je     853e <inflateBack+0x120e>
    8350:	cmp    $0x11,%dx
    8354:	je     865c <inflateBack+0x132c>
    835a:	jmpq   85fa <inflateBack+0x12ca>
    835f:	movzwl 0x298(%r10),%ecx
    8367:	test   %cx,%cx
    836a:	je     8692 <inflateBack+0x1362>
    8370:	mov    -0x60(%rbp),%r12
    8374:	mov    -0x78(%rbp),%rcx
    8378:	mov    %rcx,(%r12)
    837c:	mov    %rcx,0x68(%r10)
    8380:	mov    -0x68(%rbp),%r8
    8384:	movl   $0x9,(%r8)
    838b:	mov    0x84(%r10),%edx
    8392:	mov    -0x80(%rbp),%rsi
    8396:	mov    %r12,%rcx
    8399:	mov    -0x70(%rbp),%r9
    839d:	mov    %rbx,-0x40(%rbp)
    83a1:	mov    %r12,%rbx
    83a4:	mov    %r11,%r12
    83a7:	mov    %rax,%r13
    83aa:	mov    %r10,%r14
    83ad:	callq  22a0 <inflate_table@plt>
    83b2:	test   %eax,%eax
    83b4:	jne    86b8 <inflateBack+0x1388>
    83ba:	mov    (%rbx),%rax
    83bd:	mov    %rax,0x70(%r14)
    83c1:	movl   $0x6,0x7c(%r14)
    83c9:	mov    0x84(%r14),%eax
    83d0:	lea    0x98(%r14,%rax,2),%rsi
    83d8:	mov    0x88(%r14),%edx
    83df:	mov    $0x2,%edi
    83e4:	mov    %rbx,%rcx
    83e7:	mov    -0x48(%rbp),%r8
    83eb:	mov    -0x70(%rbp),%r9
    83ef:	callq  22a0 <inflate_table@plt>
    83f4:	test   %eax,%eax
    83f6:	jne    8706 <inflateBack+0x13d6>
    83fc:	mov    %r13,%rax
    83ff:	mov    %r14,%r10
    8402:	mov    %r12,%r11
    8405:	movl   $0x3f48,0x8(%r10)
    840d:	mov    -0xa8(%rbp),%r8
    8414:	mov    -0x40(%rbp),%rbx
    8418:	mov    $0x1,%edi
    841d:	mov    -0xc0(%rbp),%r14
    8424:	mov    -0xc8(%rbp),%r13
    842b:	mov    -0xb0(%rbp),%r9
    8432:	lea    -0xd8(%rbp),%r12
    8439:	jmpq   748d <inflateBack+0x15d>
    843e:	mov    %r12,%rsi
    8441:	mov    %r10,%r12
    8444:	mov    %r13,%rdi
    8447:	callq  *%r14
    844a:	test   %eax,%eax
    844c:	je     8754 <inflateBack+0x1424>
    8452:	mov    %r12,%r10
    8455:	mov    $0x1,%edi
    845a:	lea    -0xd8(%rbp),%r12
    8461:	jmpq   819e <inflateBack+0xe6e>
    8466:	movq   $0x0,-0xd8(%rbp)
    8471:	mov    -0x88(%rbp),%r11
    8478:	xor    %eax,%eax
    847a:	mov    $0xfffffffffffffffb,%rdi
    8481:	jmpq   744f <inflateBack+0x11f>
    8486:	mov    -0xb0(%rbp),%rax
    848d:	mov    -0x88(%rbp),%r11
    8494:	mov    $0xfffffffffffffffb,%rdi
    849b:	jmpq   744f <inflateBack+0x11f>
    84a0:	add    $0x1,%rcx
    84a4:	movzbl (%rcx),%edi
    84a7:	mov    %dil,(%r9)
    84aa:	add    $0x1,%r9
    84ae:	add    $0xffffffff,%edx
    84b1:	test   %edx,%edx
    84b3:	jne    84a0 <inflateBack+0x1170>
    84b5:	sub    %esi,%r8d
    84b8:	mov    0x5c(%r10),%ecx
    84bc:	test   %ecx,%ecx
    84be:	jne    8042 <inflateBack+0xd12>
    84c4:	mov    -0x88(%rbp),%r11
    84cb:	mov    $0x1,%edi
    84d0:	mov    -0xc0(%rbp),%r14
    84d7:	mov    -0xc8(%rbp),%r13
    84de:	lea    -0xd8(%rbp),%r12
    84e5:	jmpq   7432 <inflateBack+0x102>
    84ea:	mov    %r12,%rsi
    84ed:	mov    %r10,%r12
    84f0:	mov    %r13,%rdi
    84f3:	callq  *%r14
    84f6:	test   %eax,%eax
    84f8:	je     8774 <inflateBack+0x1444>
    84fe:	mov    %r12,%r10
    8501:	mov    $0x1,%edi
    8506:	lea    -0xd8(%rbp),%r12
    850d:	jmpq   82ea <inflateBack+0xfba>
    8512:	test   %eax,%eax
    8514:	je     8794 <inflateBack+0x1464>
    851a:	mov    %rbx,%rcx
    851d:	mov    -0xd8(%rbp),%rsi
    8524:	lea    0x1(%rsi),%rdx
    8528:	mov    %rdx,-0xd8(%rbp)
    852f:	add    $0xffffffff,%eax
    8532:	lea    0x8(%rcx),%ebx
    8535:	movzbl (%rsi),%edx
    8538:	shl    %cl,%rdx
    853b:	add    %rdx,%r15
    853e:	movzbl -0xcf(%rbp),%ecx
    8545:	lea    0x2(%rcx),%edx
    8548:	cmp    %ebx,%edx
    854a:	ja     8512 <inflateBack+0x11e2>
    854c:	shr    %cl,%r15
    854f:	sub    %ecx,%ebx
    8551:	mov    -0x90(%rbp),%r10
    8558:	mov    0x8c(%r10),%ecx
    855f:	test   %ecx,%ecx
    8561:	je     87ad <inflateBack+0x147d>
    8567:	add    $0xffffffff,%ecx
    856a:	mov    %ecx,%ecx
    856c:	movzwl 0x98(%r10,%rcx,2),%esi
    8575:	mov    %r15,%rcx
    8578:	shr    $0x2,%rcx
    857c:	and    $0x3,%r15d
    8580:	lea    0x3(%r15),%edx
    8584:	add    $0xfffffffe,%ebx
    8587:	mov    %rcx,%r15
    858a:	mov    0x88(%r10),%ecx
    8591:	add    0x84(%r10),%ecx
    8598:	mov    %rdx,%rdi
    859b:	add    0x8c(%r10),%edi
    85a2:	cmp    %edi,%ecx
    85a4:	jae    87ee <inflateBack+0x14be>
    85aa:	mov    -0x88(%rbp),%r11
    85b1:	lea    0xbb6f(%rip),%rcx        # 14127 <order.1+0x93>
    85b8:	mov    %rcx,0x30(%r11)
    85bc:	movl   $0x3f51,0x8(%r10)
    85c4:	mov    $0x1,%edi
    85c9:	jmpq   815d <inflateBack+0xe2d>
    85ce:	test   %eax,%eax
    85d0:	je     87fc <inflateBack+0x14cc>
    85d6:	mov    %rbx,%rcx
    85d9:	mov    -0xd8(%rbp),%rsi
    85e0:	lea    0x1(%rsi),%rdx
    85e4:	mov    %rdx,-0xd8(%rbp)
    85eb:	add    $0xffffffff,%eax
    85ee:	lea    0x8(%rcx),%ebx
    85f1:	movzbl (%rsi),%edx
    85f4:	shl    %cl,%rdx
    85f7:	add    %rdx,%r15
    85fa:	movzbl -0xcf(%rbp),%ecx
    8601:	lea    0x7(%rcx),%edx
    8604:	cmp    %ebx,%edx
    8606:	ja     85ce <inflateBack+0x129e>
    8608:	shr    %cl,%r15
    860b:	mov    %r15,%rdi
    860e:	shr    $0x7,%rdi
    8612:	and    $0x7f,%r15d
    8616:	lea    0xb(%r15),%edx
    861a:	sub    %ecx,%ebx
    861c:	add    $0xfffffff9,%ebx
    861f:	mov    %rdi,%r15
    8622:	xor    %esi,%esi
    8624:	mov    -0x90(%rbp),%r10
    862b:	jmpq   858a <inflateBack+0x125a>
    8630:	test   %eax,%eax
    8632:	je     8811 <inflateBack+0x14e1>
    8638:	mov    %rbx,%rcx
    863b:	mov    -0xd8(%rbp),%rsi
    8642:	lea    0x1(%rsi),%rdx
    8646:	mov    %rdx,-0xd8(%rbp)
    864d:	add    $0xffffffff,%eax
    8650:	lea    0x8(%rcx),%ebx
    8653:	movzbl (%rsi),%edx
    8656:	shl    %cl,%rdx
    8659:	add    %rdx,%r15
    865c:	movzbl -0xcf(%rbp),%ecx
    8663:	lea    0x3(%rcx),%edx
    8666:	cmp    %ebx,%edx
    8668:	ja     8630 <inflateBack+0x1300>
    866a:	shr    %cl,%r15
    866d:	mov    %r15,%rdi
    8670:	shr    $0x3,%rdi
    8674:	and    $0x7,%r15d
    8678:	lea    0x3(%r15),%edx
    867c:	sub    %ecx,%ebx
    867e:	add    $0xfffffffd,%ebx
    8681:	mov    %rdi,%r15
    8684:	xor    %esi,%esi
    8686:	mov    -0x90(%rbp),%r10
    868d:	jmpq   858a <inflateBack+0x125a>
    8692:	lea    0xbaa8(%rip),%rcx        # 14141 <order.1+0xad>
    8699:	mov    %rcx,0x30(%r11)
    869d:	movl   $0x3f51,0x8(%r10)
    86a5:	mov    -0xa8(%rbp),%r8
    86ac:	mov    -0xb0(%rbp),%r9
    86b3:	jmpq   7432 <inflateBack+0x102>
    86b8:	lea    0xbaa7(%rip),%rax        # 14166 <order.1+0xd2>
    86bf:	mov    %rax,0x30(%r12)
    86c4:	mov    %r13,%rax
    86c7:	mov    %r14,%r10
    86ca:	mov    %r12,%r11
    86cd:	movl   $0x3f51,0x8(%r10)
    86d5:	mov    -0xa8(%rbp),%r8
    86dc:	mov    -0x40(%rbp),%rbx
    86e0:	mov    $0x1,%edi
    86e5:	mov    -0xc0(%rbp),%r14
    86ec:	mov    -0xc8(%rbp),%r13
    86f3:	mov    -0xb0(%rbp),%r9
    86fa:	lea    -0xd8(%rbp),%r12
    8701:	jmpq   7432 <inflateBack+0x102>
    8706:	lea    0xba75(%rip),%rax        # 14182 <order.1+0xee>
    870d:	mov    %rax,0x30(%r12)
    8712:	mov    %r13,%rax
    8715:	mov    %r14,%r10
    8718:	mov    %r12,%r11
    871b:	movl   $0x3f51,0x8(%r10)
    8723:	mov    -0xa8(%rbp),%r8
    872a:	mov    -0x40(%rbp),%rbx
    872e:	mov    $0x1,%edi
    8733:	mov    -0xc0(%rbp),%r14
    873a:	mov    -0xc8(%rbp),%r13
    8741:	mov    -0xb0(%rbp),%r9
    8748:	lea    -0xd8(%rbp),%r12
    874f:	jmpq   7432 <inflateBack+0x102>
    8754:	movq   $0x0,-0xd8(%rbp)
    875f:	mov    -0x88(%rbp),%r11
    8766:	xor    %eax,%eax
    8768:	mov    $0xfffffffffffffffb,%rdi
    876f:	jmpq   744f <inflateBack+0x11f>
    8774:	movq   $0x0,-0xd8(%rbp)
    877f:	mov    -0x88(%rbp),%r11
    8786:	xor    %eax,%eax
    8788:	mov    $0xfffffffffffffffb,%rdi
    878f:	jmpq   744f <inflateBack+0x11f>
    8794:	mov    %r13,%rdi
    8797:	mov    %r12,%rsi
    879a:	callq  *%r14
    879d:	test   %eax,%eax
    879f:	je     8826 <inflateBack+0x14f6>
    87a5:	mov    %rbx,%rcx
    87a8:	jmpq   851d <inflateBack+0x11ed>
    87ad:	mov    -0x88(%rbp),%r11
    87b4:	lea    0xb96c(%rip),%rcx        # 14127 <order.1+0x93>
    87bb:	mov    %rcx,0x30(%r11)
    87bf:	movl   $0x3f51,0x8(%r10)
    87c7:	mov    $0x1,%edi
    87cc:	jmpq   815d <inflateBack+0xe2d>
    87d1:	mov    0x8c(%r10),%edi
    87d8:	lea    0x1(%rdi),%ecx
    87db:	mov    %ecx,0x8c(%r10)
    87e2:	mov    %si,0x98(%r10,%rdi,2)
    87eb:	add    $0xffffffff,%edx
    87ee:	test   %edx,%edx
    87f0:	jne    87d1 <inflateBack+0x14a1>
    87f2:	mov    $0x1,%edi
    87f7:	jmpq   813b <inflateBack+0xe0b>
    87fc:	mov    %r13,%rdi
    87ff:	mov    %r12,%rsi
    8802:	callq  *%r14
    8805:	test   %eax,%eax
    8807:	je     8846 <inflateBack+0x1516>
    8809:	mov    %rbx,%rcx
    880c:	jmpq   85d9 <inflateBack+0x12a9>
    8811:	mov    %r13,%rdi
    8814:	mov    %r12,%rsi
    8817:	callq  *%r14
    881a:	test   %eax,%eax
    881c:	je     8866 <inflateBack+0x1536>
    881e:	mov    %rbx,%rcx
    8821:	jmpq   863b <inflateBack+0x130b>
    8826:	movq   $0x0,-0xd8(%rbp)
    8831:	mov    -0x88(%rbp),%r11
    8838:	xor    %eax,%eax
    883a:	mov    $0xfffffffffffffffb,%rdi
    8841:	jmpq   744f <inflateBack+0x11f>
    8846:	movq   $0x0,-0xd8(%rbp)
    8851:	mov    -0x88(%rbp),%r11
    8858:	xor    %eax,%eax
    885a:	mov    $0xfffffffffffffffb,%rdi
    8861:	jmpq   744f <inflateBack+0x11f>
    8866:	movq   $0x0,-0xd8(%rbp)
    8871:	mov    -0x88(%rbp),%r11
    8878:	xor    %eax,%eax
    887a:	mov    $0xfffffffffffffffb,%rdi
    8881:	jmpq   744f <inflateBack+0x11f>
    8886:	nopw   %cs:0x0(%rax,%rax,1)

0000000000008890 <inflateBackEnd>:
    8890:	push   %rbp
    8891:	mov    %rsp,%rbp
    8894:	sub    $0x10,%rsp
    8898:	mov    $0xfffffffffffffffe,%rax
    889f:	test   %rdi,%rdi
    88a2:	jne    88a6 <inflateBackEnd+0x16>
    88a4:	leaveq 
    88a5:	retq   
    88a6:	mov    0x38(%rdi),%rsi
    88aa:	test   %rsi,%rsi
    88ad:	jne    88b1 <inflateBackEnd+0x21>
    88af:	leaveq 
    88b0:	retq   
    88b1:	mov    0x48(%rdi),%rcx
    88b5:	test   %rcx,%rcx
    88b8:	jne    88bc <inflateBackEnd+0x2c>
    88ba:	leaveq 
    88bb:	retq   
    88bc:	mov    0x50(%rdi),%rax
    88c0:	mov    %r15,-0x8(%rbp)
    88c4:	mov    %rdi,%r15
    88c7:	mov    %rax,%rdi
    88ca:	callq  *%rcx
    88cc:	movq   $0x0,0x38(%r15)
    88d4:	xor    %eax,%eax
    88d6:	mov    -0x8(%rbp),%r15
    88da:	leaveq 
    88db:	retq   
    88dc:	nopl   0x0(%rax)

00000000000088e0 <inflateBackInit_>:
    88e0:	push   %rbp
    88e1:	mov    %rsp,%rbp
    88e4:	sub    $0x20,%rsp
    88e8:	mov    $0xfffffffffffffffa,%rax
    88ef:	test   %rcx,%rcx
    88f2:	jne    88f6 <inflateBackInit_+0x16>
    88f4:	leaveq 
    88f5:	retq   
    88f6:	movsbq (%rcx),%rcx
    88fa:	cmp    $0x31,%cl
    88fd:	je     8901 <inflateBackInit_+0x21>
    88ff:	leaveq 
    8900:	retq   
    8901:	cmp    $0x70,%r8d
    8905:	je     8909 <inflateBackInit_+0x29>
    8907:	leaveq 
    8908:	retq   
    8909:	mov    $0xfffffffffffffffe,%rax
    8910:	test   %rdi,%rdi
    8913:	jne    8917 <inflateBackInit_+0x37>
    8915:	leaveq 
    8916:	retq   
    8917:	test   %rdx,%rdx
    891a:	jne    891e <inflateBackInit_+0x3e>
    891c:	leaveq 
    891d:	retq   
    891e:	cmp    $0x7,%esi
    8921:	jg     8925 <inflateBackInit_+0x45>
    8923:	leaveq 
    8924:	retq   
    8925:	cmp    $0xf,%esi
    8928:	jle    892c <inflateBackInit_+0x4c>
    892a:	leaveq 
    892b:	retq   
    892c:	movq   $0x0,0x30(%rdi)
    8934:	mov    0x40(%rdi),%rax
    8938:	test   %rax,%rax
    893b:	jne    8950 <inflateBackInit_+0x70>
    893d:	mov    0xf694(%rip),%rax        # 17fd8 <zcalloc@@Base+0x9278>
    8944:	mov    %rax,0x40(%rdi)
    8948:	movq   $0x0,0x50(%rdi)
    8950:	mov    0x48(%rdi),%rax
    8954:	test   %rax,%rax
    8957:	jne    8964 <inflateBackInit_+0x84>
    8959:	mov    0xf660(%rip),%rax        # 17fc0 <zcfree@@Base+0x9250>
    8960:	mov    %rax,0x48(%rdi)
    8964:	mov    0x40(%rdi),%rcx
    8968:	mov    0x50(%rdi),%r8
    896c:	mov    $0x1,%eax
    8971:	mov    $0x1bf8,%r9d
    8977:	mov    %r15,-0x18(%rbp)
    897b:	mov    %rsi,-0x8(%rbp)
    897f:	mov    %rdx,-0x10(%rbp)
    8983:	mov    %r9,%rdx
    8986:	mov    %rax,%rsi
    8989:	mov    %rdi,%r15
    898c:	mov    %r8,%rdi
    898f:	callq  *%rcx
    8991:	test   %rax,%rax
    8994:	jne    89a3 <inflateBackInit_+0xc3>
    8996:	mov    $0xfffffffffffffffc,%rax
    899d:	mov    -0x18(%rbp),%r15
    89a1:	leaveq 
    89a2:	retq   
    89a3:	mov    %rax,0x38(%r15)
    89a7:	movl   $0x8000,0x1c(%rax)
    89ae:	mov    -0x8(%rbp),%rcx
    89b2:	mov    %ecx,0x38(%rax)
    89b5:	mov    $0x1,%edx
    89ba:	shl    %cl,%edx
    89bc:	mov    %edx,0x3c(%rax)
    89bf:	mov    -0x10(%rbp),%rcx
    89c3:	mov    %rcx,0x48(%rax)
    89c7:	movl   $0x0,0x44(%rax)
    89ce:	movl   $0x0,0x40(%rax)
    89d5:	xor    %eax,%eax
    89d7:	mov    -0x18(%rbp),%r15
    89db:	leaveq 
    89dc:	retq   
    89dd:	nopl   (%rax)

00000000000089e0 <fixedtables>:
    89e0:	push   %rbp
    89e1:	mov    %rsp,%rbp
    89e4:	lea    0xb7fd(%rip),%rax        # 141e8 <lenfix.14>
    89eb:	mov    %rax,0x68(%rdi)
    89ef:	movl   $0x9,0x78(%rdi)
    89f6:	lea    0xbfeb(%rip),%rax        # 149e8 <distfix.15>
    89fd:	mov    %rax,0x70(%rdi)
    8a01:	movl   $0x5,0x7c(%rdi)
    8a08:	leaveq 
    8a09:	retq   
    8a0a:	nopw   0x0(%rax,%rax,1)

0000000000008a10 <inflate_fast>:
    8a10:	push   %rbp
    8a11:	mov    %rsp,%rbp
    8a14:	sub    $0xb0,%rsp
    8a1b:	mov    %r15,-0x30(%rbp)
    8a1f:	mov    %r14,-0x28(%rbp)
    8a23:	mov    %r13,-0x20(%rbp)
    8a27:	mov    %r12,-0x18(%rbp)
    8a2b:	mov    %rbx,-0x10(%rbp)
    8a2f:	mov    %rdi,-0x8(%rbp)
    8a33:	mov    0x38(%rdi),%r14
    8a37:	mov    %r14,-0x88(%rbp)
    8a3e:	mov    0x40(%r14),%eax
    8a42:	mov    %rax,-0x90(%rbp)
    8a49:	mov    0x48(%r14),%rax
    8a4d:	mov    %rax,-0x68(%rbp)
    8a51:	mov    0x50(%r14),%rdx
    8a55:	mov    0x58(%r14),%eax
    8a59:	mov    0x68(%r14),%r10
    8a5d:	mov    %r10,-0x48(%rbp)
    8a61:	mov    0x70(%r14),%r11
    8a65:	mov    %r11,-0x38(%rbp)
    8a69:	mov    $0x1,%r8d
    8a6f:	mov    0x7c(%r14),%ecx
    8a73:	mov    %r8,%rbx
    8a76:	shl    %cl,%ebx
    8a78:	lea    -0x1(%rbx),%ecx
    8a7b:	mov    %ecx,%r9d
    8a7e:	mov    %r9,-0x40(%rbp)
    8a82:	mov    0x78(%r14),%ecx
    8a86:	mov    %r8,%rbx
    8a89:	shl    %cl,%ebx
    8a8b:	lea    -0x1(%rbx),%ecx
    8a8e:	mov    %ecx,%r12d
    8a91:	mov    %r12,-0x50(%rbp)
    8a95:	mov    0x20(%rdi),%ecx
    8a98:	sub    %ecx,%esi
    8a9a:	mov    %rsi,-0xa0(%rbp)
    8aa1:	mov    0x44(%r14),%r15d
    8aa5:	mov    %r15,-0x80(%rbp)
    8aa9:	mov    0x18(%rdi),%rsi
    8aad:	mov    %rsi,-0x98(%rbp)
    8ab4:	add    $0xfffffeff,%ecx
    8aba:	mov    %ecx,%ecx
    8abc:	lea    (%rsi,%rcx,1),%rbx
    8ac0:	mov    (%rdi),%r13
    8ac3:	mov    0x8(%rdi),%ecx
    8ac6:	add    $0xfffffffb,%ecx
    8ac9:	mov    %ecx,%ecx
    8acb:	lea    0x0(%r13,%rcx,1),%rdi
    8ad0:	mov    0x3c(%r14),%ecx
    8ad4:	mov    %rcx,-0x58(%rbp)
    8ad8:	add    %r15d,%ecx
    8adb:	mov    %rcx,-0x60(%rbp)
    8adf:	jmp    8aec <inflate_fast+0xdc>
    8ae1:	cmp    %rbx,%rsi
    8ae4:	jae    8b25 <inflate_fast+0x115>
    8ae6:	mov    $0x1,%r8d
    8aec:	cmp    $0xe,%eax
    8aef:	ja     8b19 <inflate_fast+0x109>
    8af1:	lea    0x2(%r13),%r15
    8af5:	movzbl 0x1(%r13),%r14d
    8afa:	lea    0x8(%rax),%ecx
    8afd:	shl    %cl,%r14
    8b00:	movzbl 0x0(%r13),%r13d
    8b05:	mov    %rax,%rcx
    8b08:	shl    %cl,%r13
    8b0b:	lea    (%rdx,%r13,1),%rax
    8b0f:	lea    (%r14,%rax,1),%rdx
    8b13:	lea    0x10(%rcx),%eax
    8b16:	mov    %r15,%r13
    8b19:	mov    %r12,%rcx
    8b1c:	and    %rdx,%rcx
    8b1f:	mov    (%r10,%rcx,4),%r14d
    8b23:	jmp    8b7d <inflate_fast+0x16d>
    8b25:	mov    $0x1,%r8d
    8b2b:	mov    -0x8(%rbp),%r9
    8b2f:	mov    -0x88(%rbp),%r10
    8b36:	jmpq   8bbe <inflate_fast+0x1ae>
    8b3b:	movzbl %r14b,%ecx
    8b3f:	mov    %rcx,%r14
    8b42:	and    $0x10,%r14d
    8b46:	test   %r14d,%r14d
    8b49:	jne    8be6 <inflate_fast+0x1d6>
    8b4f:	mov    %rcx,%r14
    8b52:	and    $0x40,%r14d
    8b56:	test   %r14d,%r14d
    8b59:	jne    8c02 <inflate_fast+0x1f2>
    8b5f:	mov    %r8,%r14
    8b62:	shl    %cl,%r14d
    8b65:	lea    -0x1(%r14),%ecx
    8b69:	mov    %ecx,%ecx
    8b6b:	and    %rdx,%rcx
    8b6e:	movzwl -0xa2(%rbp),%r14d
    8b76:	add    %r14,%rcx
    8b79:	mov    (%r10,%rcx,4),%r14d
    8b7d:	mov    %r14,%rcx
    8b80:	shr    $0x8,%ecx
    8b83:	movzbl %cl,%ecx
    8b86:	shr    %cl,%rdx
    8b89:	sub    %ecx,%eax
    8b8b:	mov    %r14d,-0xa4(%rbp)
    8b92:	test   %r14b,%r14b
    8b95:	jne    8b3b <inflate_fast+0x12b>
    8b97:	movzbl -0xa2(%rbp),%ecx
    8b9e:	mov    %cl,(%rsi)
    8ba0:	add    $0x1,%rsi
    8ba4:	cmp    %rdi,%r13
    8ba7:	jb     8ae1 <inflate_fast+0xd1>
    8bad:	mov    $0x1,%r8d
    8bb3:	mov    -0x8(%rbp),%r9
    8bb7:	mov    -0x88(%rbp),%r10
    8bbe:	mov    %rax,%r12
    8bc1:	shr    $0x3,%r12d
    8bc5:	mov    %r12d,%r11d
    8bc8:	mov    %r13,%rcx
    8bcb:	sub    %r11,%rcx
    8bce:	mov    %rcx,(%r9)
    8bd1:	mov    %rsi,0x18(%r9)
    8bd5:	cmp    %rcx,%rdi
    8bd8:	ja     8c2d <inflate_fast+0x21d>
    8bda:	lea    (%rdi,%r11,1),%rcx
    8bde:	sub    %r13,%rcx
    8be1:	add    $0x5,%ecx
    8be4:	jmp    8c35 <inflate_fast+0x225>
    8be6:	movzwl -0xa2(%rbp),%r14d
    8bee:	and    $0xf,%ecx
    8bf1:	test   %ecx,%ecx
    8bf3:	je     8c90 <inflate_fast+0x280>
    8bf9:	cmp    %ecx,%eax
    8bfb:	jb     8c4a <inflate_fast+0x23a>
    8bfd:	mov    %rdx,%r10
    8c00:	jmp    8c6f <inflate_fast+0x25f>
    8c02:	and    $0x20,%ecx
    8c05:	test   %ecx,%ecx
    8c07:	jne    8ca1 <inflate_fast+0x291>
    8c0d:	lea    0xbe88(%rip),%rcx        # 14a9c <distfix.15+0xb4>
    8c14:	mov    -0x8(%rbp),%r9
    8c18:	mov    %rcx,0x30(%r9)
    8c1c:	mov    -0x88(%rbp),%r10
    8c23:	movl   $0x3f51,0x8(%r10)
    8c2b:	jmp    8bbe <inflate_fast+0x1ae>
    8c2d:	sub    %r13,%rdi
    8c30:	lea    0x5(%r12,%rdi,1),%ecx
    8c35:	mov    %ecx,0x8(%r9)
    8c39:	cmp    %rsi,%rbx
    8c3c:	ja     8cb9 <inflate_fast+0x2a9>
    8c3e:	sub    %rsi,%rbx
    8c41:	lea    0x101(%rbx),%rcx
    8c48:	jmp    8cc3 <inflate_fast+0x2b3>
    8c4a:	lea    0x1(%r13),%r12
    8c4e:	lea    0x8(%rax),%r15d
    8c52:	movzbl 0x0(%r13),%r10d
    8c57:	mov    %rcx,%r13
    8c5a:	mov    %rax,%rcx
    8c5d:	mov    %r13,%rax
    8c60:	shl    %cl,%r10
    8c63:	add    %rdx,%r10
    8c66:	mov    %rax,%rcx
    8c69:	mov    %r15,%rax
    8c6c:	mov    %r12,%r13
    8c6f:	sub    %ecx,%eax
    8c71:	mov    %r10,%rdx
    8c74:	shr    %cl,%rdx
    8c77:	mov    %r8,%r12
    8c7a:	shl    %cl,%r12d
    8c7d:	lea    -0x1(%r12),%ecx
    8c82:	and    %r10d,%ecx
    8c85:	add    %ecx,%r14d
    8c88:	mov    -0x50(%rbp),%r12
    8c8c:	mov    -0x48(%rbp),%r10
    8c90:	mov    %r14,-0x78(%rbp)
    8c94:	cmp    $0xe,%eax
    8c97:	jbe    8cf7 <inflate_fast+0x2e7>
    8c99:	mov    %r13,%r14
    8c9c:	jmpq   8d24 <inflate_fast+0x314>
    8ca1:	mov    -0x88(%rbp),%r10
    8ca8:	movl   $0x3f3f,0x8(%r10)
    8cb0:	mov    -0x8(%rbp),%r9
    8cb4:	jmpq   8bbe <inflate_fast+0x1ae>
    8cb9:	sub    %rsi,%rbx
    8cbc:	lea    0x101(%rbx),%rcx
    8cc3:	mov    %ecx,0x20(%r9)
    8cc7:	and    $0x7,%eax
    8cca:	mov    %rax,%rcx
    8ccd:	shl    %cl,%r8d
    8cd0:	lea    -0x1(%r8),%eax
    8cd4:	mov    %eax,%eax
    8cd6:	and    %rax,%rdx
    8cd9:	mov    %rdx,0x50(%r10)
    8cdd:	mov    %ecx,0x58(%r10)
    8ce1:	mov    -0x10(%rbp),%rbx
    8ce5:	mov    -0x18(%rbp),%r12
    8ce9:	mov    -0x20(%rbp),%r13
    8ced:	mov    -0x28(%rbp),%r14
    8cf1:	mov    -0x30(%rbp),%r15
    8cf5:	leaveq 
    8cf6:	retq   
    8cf7:	lea    0x2(%r13),%r14
    8cfb:	movzbl 0x1(%r13),%r10d
    8d00:	lea    0x8(%rax),%ecx
    8d03:	shl    %cl,%r10
    8d06:	movzbl 0x0(%r13),%r12d
    8d0b:	mov    %rax,%rcx
    8d0e:	shl    %cl,%r12
    8d11:	lea    (%rdx,%r12,1),%rax
    8d15:	lea    (%r10,%rax,1),%rdx
    8d19:	lea    0x10(%rcx),%eax
    8d1c:	mov    -0x50(%rbp),%r12
    8d20:	mov    -0x48(%rbp),%r10
    8d24:	mov    %r9,%rcx
    8d27:	and    %rdx,%rcx
    8d2a:	mov    (%r11,%rcx,4),%r15d
    8d2e:	jmp    8d5e <inflate_fast+0x34e>
    8d30:	mov    %rcx,%r13
    8d33:	and    $0x40,%r13d
    8d37:	test   %r13d,%r13d
    8d3a:	jne    8dda <inflate_fast+0x3ca>
    8d40:	mov    %r8,%r13
    8d43:	shl    %cl,%r13d
    8d46:	lea    -0x1(%r13),%ecx
    8d4a:	mov    %ecx,%ecx
    8d4c:	and    %rdx,%rcx
    8d4f:	movzwl -0xa2(%rbp),%r13d
    8d57:	add    %r13,%rcx
    8d5a:	mov    (%r11,%rcx,4),%r15d
    8d5e:	mov    %r15,%rcx
    8d61:	shr    $0x8,%ecx
    8d64:	movzbl %cl,%ecx
    8d67:	shr    %cl,%rdx
    8d6a:	sub    %ecx,%eax
    8d6c:	mov    %r15d,-0xa4(%rbp)
    8d73:	movzbl %r15b,%ecx
    8d77:	mov    %rcx,%r13
    8d7a:	and    $0x10,%r13d
    8d7e:	test   %r13d,%r13d
    8d81:	je     8d30 <inflate_fast+0x320>
    8d83:	and    $0xf,%ecx
    8d86:	cmp    %eax,%ecx
    8d88:	ja     8e00 <inflate_fast+0x3f0>
    8d8a:	mov    %rdx,%r11
    8d8d:	mov    %r14,%r13
    8d90:	mov    %r11,%rdx
    8d93:	shr    %cl,%rdx
    8d96:	sub    %ecx,%eax
    8d98:	mov    %r8,%r14
    8d9b:	shl    %cl,%r14d
    8d9e:	lea    -0x1(%r14),%ecx
    8da2:	and    %r11d,%ecx
    8da5:	shr    $0x10,%r15d
    8da9:	add    %ecx,%r15d
    8dac:	mov    -0x98(%rbp),%rcx
    8db3:	mov    %rsi,%r11
    8db6:	sub    %rcx,%r11
    8db9:	mov    -0xa0(%rbp),%rcx
    8dc0:	add    %ecx,%r11d
    8dc3:	cmp    %r15d,%r11d
    8dc6:	jb     8e26 <inflate_fast+0x416>
    8dc8:	mov    %r15d,%ecx
    8dcb:	mov    %rsi,%r8
    8dce:	sub    %rcx,%r8
    8dd1:	mov    -0x78(%rbp),%rcx
    8dd5:	jmpq   8e82 <inflate_fast+0x472>
    8dda:	lea    0xbca5(%rip),%rcx        # 14a86 <distfix.15+0x9e>
    8de1:	mov    -0x8(%rbp),%r9
    8de5:	mov    %rcx,0x30(%r9)
    8de9:	mov    -0x88(%rbp),%r10
    8df0:	movl   $0x3f51,0x8(%r10)
    8df8:	mov    %r14,%r13
    8dfb:	jmpq   8bbe <inflate_fast+0x1ae>
    8e00:	xchg   %rax,%rcx
    8e02:	lea    0x1(%r14),%r13
    8e06:	movzbl (%r14),%r11d
    8e0a:	shl    %cl,%r11
    8e0d:	add    %rdx,%r11
    8e10:	lea    0x8(%rcx),%edx
    8e13:	cmp    %edx,%eax
    8e15:	ja     8ec3 <inflate_fast+0x4b3>
    8e1b:	mov    %rax,%rcx
    8e1e:	mov    %rdx,%rax
    8e21:	jmpq   8d90 <inflate_fast+0x380>
    8e26:	mov    %r15,%r9
    8e29:	sub    %r11d,%r9d
    8e2c:	mov    -0x90(%rbp),%rcx
    8e33:	cmp    %ecx,%r9d
    8e36:	ja     8ee2 <inflate_fast+0x4d2>
    8e3c:	mov    %r11,%r10
    8e3f:	sub    %r15d,%r10d
    8e42:	mov    -0x80(%rbp),%r14
    8e46:	test   %r14d,%r14d
    8e49:	je     8f14 <inflate_fast+0x504>
    8e4f:	cmp    %r14d,%r9d
    8e52:	ja     8f37 <inflate_fast+0x527>
    8e58:	lea    (%r14,%r10,1),%ecx
    8e5c:	mov    %ecx,%r8d
    8e5f:	mov    -0x68(%rbp),%rcx
    8e63:	add    %r8,%rcx
    8e66:	mov    -0x78(%rbp),%r8
    8e6a:	cmp    %r9d,%r8d
    8e6d:	jbe    8f87 <inflate_fast+0x577>
    8e73:	mov    %r10,-0x78(%rbp)
    8e77:	jmpq   8fab <inflate_fast+0x59b>
    8e7c:	mov    %r14,%rsi
    8e7f:	mov    %r11,%r8
    8e82:	movzbl (%r8),%r11d
    8e86:	mov    %r11b,(%rsi)
    8e89:	movzbl 0x1(%r8),%r11d
    8e8e:	mov    %r11b,0x1(%rsi)
    8e92:	movzbl 0x2(%r8),%r11d
    8e97:	mov    %r11b,0x2(%rsi)
    8e9b:	lea    0x3(%r8),%r11
    8e9f:	lea    0x3(%rsi),%r14
    8ea3:	add    $0xfffffffd,%ecx
    8ea6:	cmp    $0x2,%ecx
    8ea9:	ja     8e7c <inflate_fast+0x46c>
    8eab:	test   %ecx,%ecx
    8ead:	jne    8fd1 <inflate_fast+0x5c1>
    8eb3:	mov    %r14,%rsi
    8eb6:	mov    -0x38(%rbp),%r11
    8eba:	mov    -0x50(%rbp),%r12
    8ebe:	jmpq   8ba4 <inflate_fast+0x194>
    8ec3:	movzbl 0x0(%r13),%r13d
    8ec8:	xchg   %rdx,%rcx
    8ecb:	xchg   %rax,%rdx
    8ecd:	shl    %cl,%r13
    8ed0:	add    %r13,%r11
    8ed3:	add    $0x10,%eax
    8ed6:	lea    0x2(%r14),%r13
    8eda:	mov    %rdx,%rcx
    8edd:	jmpq   8d90 <inflate_fast+0x380>
    8ee2:	mov    -0x88(%rbp),%r10
    8ee9:	movslq 0x1be8(%r10),%rcx
    8ef0:	test   %ecx,%ecx
    8ef2:	je     8e3c <inflate_fast+0x42c>
    8ef8:	lea    0xbb69(%rip),%rcx        # 14a68 <distfix.15+0x80>
    8eff:	mov    -0x8(%rbp),%r9
    8f03:	mov    %rcx,0x30(%r9)
    8f07:	movl   $0x3f51,0x8(%r10)
    8f0f:	jmpq   8bbe <inflate_fast+0x1ae>
    8f14:	mov    -0x58(%rbp),%rcx
    8f18:	add    %r10d,%ecx
    8f1b:	mov    %ecx,%r8d
    8f1e:	mov    -0x68(%rbp),%rcx
    8f22:	add    %r8,%rcx
    8f25:	mov    -0x78(%rbp),%r8
    8f29:	cmp    %r9d,%r8d
    8f2c:	jbe    8f87 <inflate_fast+0x577>
    8f2e:	mov    %r10,-0x70(%rbp)
    8f32:	jmpq   8ff9 <inflate_fast+0x5e9>
    8f37:	mov    -0x60(%rbp),%rcx
    8f3b:	add    %r10d,%ecx
    8f3e:	mov    %ecx,%ecx
    8f40:	mov    -0x68(%rbp),%r10
    8f44:	add    %r10,%rcx
    8f47:	add    %r14d,%r11d
    8f4a:	mov    %r15,%r9
    8f4d:	sub    %r11d,%r9d
    8f50:	mov    -0x78(%rbp),%r8
    8f54:	cmp    %r9d,%r8d
    8f57:	jbe    8f87 <inflate_fast+0x577>
    8f59:	mov    %r11,-0x70(%rbp)
    8f5d:	jmpq   9026 <inflate_fast+0x616>
    8f62:	movzbl (%rcx),%r9d
    8f66:	mov    %r9b,(%rsi)
    8f69:	movzbl 0x1(%rcx),%r9d
    8f6e:	mov    %r9b,0x1(%rsi)
    8f72:	movzbl 0x2(%rcx),%r9d
    8f77:	mov    %r9b,0x2(%rsi)
    8f7b:	add    $0x3,%rcx
    8f7f:	add    $0x3,%rsi
    8f83:	add    $0xfffffffd,%r8d
    8f87:	cmp    $0x2,%r8d
    8f8b:	ja     8f62 <inflate_fast+0x552>
    8f8d:	test   %r8d,%r8d
    8f90:	jne    9051 <inflate_fast+0x641>
    8f96:	mov    -0x40(%rbp),%r9
    8f9a:	mov    -0x38(%rbp),%r11
    8f9e:	mov    -0x48(%rbp),%r10
    8fa2:	jmpq   8ba4 <inflate_fast+0x194>
    8fa7:	add    $0x1,%rcx
    8fab:	movzbl (%rcx),%r10d
    8faf:	mov    %r10b,(%rsi)
    8fb2:	add    $0x1,%rsi
    8fb6:	add    $0xffffffff,%r9d
    8fba:	test   %r9d,%r9d
    8fbd:	jne    8fa7 <inflate_fast+0x597>
    8fbf:	mov    %r15d,%ecx
    8fc2:	neg    %rcx
    8fc5:	add    %rsi,%rcx
    8fc8:	mov    -0x78(%rbp),%r9
    8fcc:	add    %r9d,%r8d
    8fcf:	jmp    8f87 <inflate_fast+0x577>
    8fd1:	movzbl (%r11),%r11d
    8fd5:	mov    %r11b,(%r14)
    8fd8:	lea    0x4(%rsi),%r14
    8fdc:	cmp    $0x1,%ecx
    8fdf:	ja     9076 <inflate_fast+0x666>
    8fe5:	mov    %r14,%rsi
    8fe8:	mov    -0x38(%rbp),%r11
    8fec:	mov    -0x50(%rbp),%r12
    8ff0:	jmpq   8ba4 <inflate_fast+0x194>
    8ff5:	add    $0x1,%rcx
    8ff9:	movzbl (%rcx),%r10d
    8ffd:	mov    %r10b,(%rsi)
    9000:	add    $0x1,%rsi
    9004:	add    $0xffffffff,%r9d
    9008:	test   %r9d,%r9d
    900b:	jne    8ff5 <inflate_fast+0x5e5>
    900d:	mov    %r15d,%ecx
    9010:	neg    %rcx
    9013:	add    %rsi,%rcx
    9016:	mov    -0x70(%rbp),%r9
    901a:	add    %r9d,%r8d
    901d:	jmpq   8f87 <inflate_fast+0x577>
    9022:	add    $0x1,%rcx
    9026:	movzbl (%rcx),%r11d
    902a:	mov    %r11b,(%rsi)
    902d:	add    $0x1,%rsi
    9031:	add    $0xffffffff,%r9d
    9035:	test   %r9d,%r9d
    9038:	jne    9022 <inflate_fast+0x612>
    903a:	mov    -0x70(%rbp),%rcx
    903e:	sub    %r15d,%ecx
    9041:	add    %ecx,%r8d
    9044:	cmp    %r8d,%r14d
    9047:	jb     908f <inflate_fast+0x67f>
    9049:	mov    %r10,%rcx
    904c:	jmpq   8f87 <inflate_fast+0x577>
    9051:	movzbl (%rcx),%r9d
    9055:	mov    %r9b,(%rsi)
    9058:	lea    0x1(%rsi),%r14
    905c:	cmp    $0x1,%r8d
    9060:	ja     9094 <inflate_fast+0x684>
    9062:	mov    %r14,%rsi
    9065:	mov    -0x40(%rbp),%r9
    9069:	mov    -0x38(%rbp),%r11
    906d:	mov    -0x48(%rbp),%r10
    9071:	jmpq   8ba4 <inflate_fast+0x194>
    9076:	movzbl 0x4(%r8),%ecx
    907b:	mov    %cl,(%r14)
    907e:	add    $0x5,%rsi
    9082:	mov    -0x38(%rbp),%r11
    9086:	mov    -0x50(%rbp),%r12
    908a:	jmpq   8ba4 <inflate_fast+0x194>
    908f:	mov    %r14,%rcx
    9092:	jmp    90b4 <inflate_fast+0x6a4>
    9094:	movzbl 0x1(%rcx),%ecx
    9098:	mov    %cl,(%r14)
    909b:	add    $0x2,%rsi
    909f:	mov    -0x40(%rbp),%r9
    90a3:	mov    -0x38(%rbp),%r11
    90a7:	mov    -0x48(%rbp),%r10
    90ab:	jmpq   8ba4 <inflate_fast+0x194>
    90b0:	add    $0x1,%r10
    90b4:	movzbl (%r10),%r9d
    90b8:	mov    %r9b,(%rsi)
    90bb:	add    $0x1,%rsi
    90bf:	add    $0xffffffff,%ecx
    90c2:	test   %ecx,%ecx
    90c4:	jne    90b0 <inflate_fast+0x6a0>
    90c6:	mov    %r15d,%ecx
    90c9:	neg    %rcx
    90cc:	add    %rsi,%rcx
    90cf:	sub    %r14d,%r8d
    90d2:	jmpq   8f87 <inflate_fast+0x577>
    90d7:	nopw   0x0(%rax,%rax,1)

00000000000090e0 <inflate>:
    90e0:	push   %rbp
    90e1:	mov    %rsp,%rbp
    90e4:	sub    $0x1d0,%rsp
    90eb:	mov    %r15,-0x28(%rbp)
    90ef:	mov    %rsi,-0x168(%rbp)
    90f6:	mov    %rbx,%r15
    90f9:	mov    %rdi,%rbx
    90fc:	callq  c320 <inflateStateCheck>
    9101:	test   %eax,%eax
    9103:	je     9115 <inflate+0x35>
    9105:	mov    %r15,%rbx
    9108:	mov    $0xfffffffffffffffe,%rax
    910f:	mov    -0x28(%rbp),%r15
    9113:	leaveq 
    9114:	retq   
    9115:	mov    0x18(%rbx),%rax
    9119:	test   %rax,%rax
    911c:	jne    912e <inflate+0x4e>
    911e:	mov    %r15,%rbx
    9121:	mov    $0xfffffffffffffffe,%rax
    9128:	mov    -0x28(%rbp),%r15
    912c:	leaveq 
    912d:	retq   
    912e:	mov    (%rbx),%rax
    9131:	test   %rax,%rax
    9134:	je     922a <inflate+0x14a>
    913a:	mov    0x38(%rbx),%rdx
    913e:	mov    0x8(%rdx),%eax
    9141:	cmp    $0x3f3f,%eax
    9146:	jne    914f <inflate+0x6f>
    9148:	movl   $0x3f40,0x8(%rdx)
    914f:	mov    0x18(%rbx),%rdi
    9153:	mov    0x20(%rbx),%esi
    9156:	mov    (%rbx),%r8
    9159:	mov    0x8(%rbx),%r11d
    915d:	mov    %r11,-0x30(%rbp)
    9161:	mov    0x50(%rdx),%r10
    9165:	mov    0x58(%rdx),%ecx
    9168:	xor    %eax,%eax
    916a:	mov    %rax,-0x138(%rbp)
    9171:	mov    %r14,-0x20(%rbp)
    9175:	lea    0x558(%rdx),%r9
    917c:	mov    %r9,-0x1a0(%rbp)
    9183:	lea    0x98(%rdx),%r9
    918a:	mov    %r9,-0x1b0(%rbp)
    9191:	lea    0x90(%rdx),%r9
    9198:	mov    %r9,-0x188(%rbp)
    919f:	lea    0x78(%rdx),%r9
    91a3:	mov    %r13,-0x18(%rbp)
    91a7:	mov    %r9,-0x190(%rbp)
    91ae:	lea    0x318(%rdx),%r9
    91b5:	mov    %r9,-0x198(%rbp)
    91bc:	lea    0x7c(%rdx),%r9
    91c0:	mov    %r12,-0x10(%rbp)
    91c4:	mov    %r9,-0x1c0(%rbp)
    91cb:	mov    %r15,-0x8(%rbp)
    91cf:	mov    $0x3f3d,%r12d
    91d5:	mov    %r12,-0x40(%rbp)
    91d9:	mov    $0x3f3f,%r12d
    91df:	mov    %r12,-0x38(%rbp)
    91e3:	mov    %rdx,%r12
    91e6:	mov    %rsi,%r14
    91e9:	mov    %rdi,%r15
    91ec:	mov    -0x168(%rbp),%rsi
    91f3:	mov    %r14,%r13
    91f6:	mov    %rax,-0x148(%rbp)
    91fd:	mov    0x8(%r12),%edx
    9202:	add    $0xffffc0cc,%edx
    9208:	cmp    $0x1e,%edx
    920b:	jbe    9245 <inflate+0x165>
    920d:	mov    -0x8(%rbp),%rbx
    9211:	mov    -0x10(%rbp),%r12
    9215:	mov    -0x18(%rbp),%r13
    9219:	mov    -0x20(%rbp),%r14
    921d:	mov    $0xfffffffffffffffe,%rax
    9224:	mov    -0x28(%rbp),%r15
    9228:	leaveq 
    9229:	retq   
    922a:	mov    0x8(%rbx),%eax
    922d:	test   %eax,%eax
    922f:	je     913a <inflate+0x5a>
    9235:	mov    %r15,%rbx
    9238:	mov    $0xfffffffffffffffe,%rax
    923f:	mov    -0x28(%rbp),%r15
    9243:	leaveq 
    9244:	retq   
    9245:	lea    0xb86c(%rip),%rdi        # 14ab8 <distfix.15+0xd0>
    924c:	movslq (%rdi,%rdx,4),%rdx
    9250:	add    %rdi,%rdx
    9253:	jmpq   *%rdx
    9255:	movslq 0x10(%r12),%rdx
    925a:	test   %edx,%edx
    925c:	je     926b <inflate+0x18b>
    925e:	movslq 0x18(%r12),%rdx
    9263:	test   %edx,%edx
    9265:	jne    9d43 <inflate+0xc63>
    926b:	movl   $0x3f50,0x8(%r12)
    9274:	mov    $0x1,%eax
    9279:	mov    -0x168(%rbp),%rsi
    9280:	mov    %r15,0x18(%rbx)
    9284:	mov    %r13d,0x20(%rbx)
    9288:	mov    %r8,(%rbx)
    928b:	mov    %r11d,0x8(%rbx)
    928f:	mov    %r10,0x50(%r12)
    9294:	mov    %ecx,0x58(%r12)
    9299:	mov    0x3c(%r12),%ecx
    929e:	test   %ecx,%ecx
    92a0:	je     9d76 <inflate+0xc96>
    92a6:	mov    0x20(%rbx),%ecx
    92a9:	mov    %r14,%rdx
    92ac:	sub    %ecx,%edx
    92ae:	mov    %rsi,%r13
    92b1:	mov    %rax,%r15
    92b4:	mov    0x18(%rbx),%rsi
    92b8:	mov    %rbx,%rdi
    92bb:	callq  c3b0 <updatewindow>
    92c0:	test   %eax,%eax
    92c2:	jne    9dad <inflate+0xccd>
    92c8:	mov    %r15,%rax
    92cb:	mov    %r13,%rsi
    92ce:	mov    0x8(%rbx),%r13d
    92d2:	mov    -0x30(%rbp),%r15
    92d6:	mov    %r15,%rcx
    92d9:	sub    %r13d,%ecx
    92dc:	mov    %ecx,%ecx
    92de:	add    0x10(%rbx),%rcx
    92e2:	mov    %rcx,0x10(%rbx)
    92e6:	mov    0x20(%rbx),%r8d
    92ea:	mov    %r14,%rdx
    92ed:	sub    %r8d,%edx
    92f0:	mov    %edx,%ecx
    92f2:	mov    %rcx,%rdi
    92f5:	add    0x28(%rbx),%rdi
    92f9:	mov    %rdi,0x28(%rbx)
    92fd:	add    0x28(%r12),%rcx
    9302:	mov    %rcx,0x28(%r12)
    9307:	movslq 0x10(%r12),%rcx
    930c:	and    $0x4,%ecx
    930f:	test   %ecx,%ecx
    9311:	jle    9e12 <inflate+0xd32>
    9317:	cmp    %r8d,%r14d
    931a:	je     9e12 <inflate+0xd32>
    9320:	movslq 0x18(%r12),%rcx
    9325:	test   %ecx,%ecx
    9327:	jne    9dd3 <inflate+0xcf3>
    932d:	mov    0x18(%rbx),%rsi
    9331:	mov    %edx,%ecx
    9333:	sub    %rcx,%rsi
    9336:	mov    0x20(%r12),%rdi
    933b:	mov    %r8,-0x1c0(%rbp)
    9342:	mov    %rax,-0x1b0(%rbp)
    9349:	callq  2230 <adler32@plt>
    934e:	jmpq   9df4 <inflate+0xd14>
    9353:	test   %r11d,%r11d
    9356:	je     9e2b <inflate+0xd4b>
    935c:	movzbl (%r8),%edx
    9360:	shl    %cl,%rdx
    9363:	add    %rdx,%r10
    9366:	add    $0x1,%r8
    936a:	add    $0xffffffff,%r11d
    936e:	add    $0x8,%ecx
    9371:	cmp    $0x1f,%ecx
    9374:	jbe    9353 <inflate+0x273>
    9376:	mov    $0xff000000,%eax
    937b:	and    %r10,%rax
    937e:	shr    $0x18,%rax
    9382:	mov    %r10,%rcx
    9385:	and    $0xff0000,%rcx
    938c:	shr    $0x8,%rcx
    9390:	add    %rax,%rcx
    9393:	mov    %r10,%rax
    9396:	and    $0xff00,%rax
    939c:	shl    $0x8,%rax
    93a0:	add    %rax,%rcx
    93a3:	movzbl %r10b,%eax
    93a7:	shl    $0x18,%rax
    93ab:	add    %rcx,%rax
    93ae:	mov    %rax,0x20(%r12)
    93b3:	mov    %rax,0x60(%rbx)
    93b7:	movl   $0x3f3e,0x8(%r12)
    93c0:	xor    %ecx,%ecx
    93c2:	mov    %rcx,%r10
    93c5:	movslq 0x14(%r12),%rax
    93ca:	test   %eax,%eax
    93cc:	je     9e33 <inflate+0xd53>
    93d2:	xor    %edx,%edx
    93d4:	mov    %rdx,%rsi
    93d7:	xor    %edi,%edi
    93d9:	mov    %r15,-0x130(%rbp)
    93e0:	mov    %r14,-0xb0(%rbp)
    93e7:	mov    %rcx,-0x170(%rbp)
    93ee:	mov    %r13,-0xd8(%rbp)
    93f5:	mov    %r8,%r13
    93f8:	mov    %r11,%r14
    93fb:	mov    %r10,%r15
    93fe:	callq  2230 <adler32@plt>
    9403:	mov    %rax,0x20(%r12)
    9408:	mov    %rax,0x60(%rbx)
    940c:	movl   $0x3f3f,0x8(%r12)
    9415:	mov    %r13,%r8
    9418:	mov    %r15,%r10
    941b:	mov    %r14,%r11
    941e:	mov    -0xd8(%rbp),%r13
    9425:	mov    -0x170(%rbp),%rcx
    942c:	mov    -0xb0(%rbp),%r14
    9433:	mov    -0x1c0(%rbp),%r9
    943a:	mov    -0x148(%rbp),%rax
    9441:	mov    -0x130(%rbp),%r15
    9448:	mov    -0x168(%rbp),%rsi
    944f:	cmp    $0x5,%esi
    9452:	je     9280 <inflate+0x1a0>
    9458:	cmp    $0x6,%esi
    945b:	je     9280 <inflate+0x1a0>
    9461:	movslq 0xc(%r12),%rdx
    9466:	test   %edx,%edx
    9468:	je     9e85 <inflate+0xda5>
    946e:	mov    %rcx,%rdx
    9471:	mov    %rdx,%rcx
    9474:	and    $0x7,%ecx
    9477:	shr    %cl,%r10
    947a:	mov    %rdx,%rcx
    947d:	and    $0xfffffff8,%ecx
    9480:	movl   $0x3f4e,0x8(%r12)
    9489:	jmpq   91f6 <inflate+0x116>
    948e:	movzwl 0x298(%r12),%edx
    9497:	test   %dx,%dx
    949a:	je     9ed2 <inflate+0xdf2>
    94a0:	mov    -0x188(%rbp),%rax
    94a7:	mov    -0x1a0(%rbp),%rdx
    94ae:	mov    %rdx,(%rax)
    94b1:	mov    %rdx,0x68(%r12)
    94b6:	movl   $0x9,(%rsi)
    94bc:	mov    0x84(%r12),%edx
    94c4:	mov    %rcx,-0x180(%rbp)
    94cb:	mov    %rax,%rcx
    94ce:	mov    %r11,-0x1b8(%rbp)
    94d5:	mov    -0x198(%rbp),%r11
    94dc:	mov    %r14,-0x148(%rbp)
    94e3:	mov    %r10,-0x178(%rbp)
    94ea:	mov    %r8,-0xf8(%rbp)
    94f1:	mov    %rsi,%r8
    94f4:	mov    %r9,%rsi
    94f7:	mov    %r11,%r9
    94fa:	mov    %rax,%r14
    94fd:	callq  22a0 <inflate_table@plt>
    9502:	test   %eax,%eax
    9504:	jne    9ef9 <inflate+0xe19>
    950a:	mov    (%r14),%rax
    950d:	mov    %rax,0x70(%r12)
    9512:	movl   $0x6,0x7c(%r12)
    951b:	mov    0x84(%r12),%eax
    9523:	lea    0x98(%r12,%rax,2),%rsi
    952b:	mov    0x88(%r12),%edx
    9533:	mov    $0x2,%edi
    9538:	mov    %r14,%rcx
    953b:	mov    -0x1c0(%rbp),%r14
    9542:	mov    %r14,%r8
    9545:	mov    -0x198(%rbp),%r9
    954c:	callq  22a0 <inflate_table@plt>
    9551:	test   %eax,%eax
    9553:	jne    9f43 <inflate+0xe63>
    9559:	mov    -0x168(%rbp),%rsi
    9560:	cmp    $0x6,%esi
    9563:	movl   $0x3f47,0x8(%r12)
    956c:	je     9f89 <inflate+0xea9>
    9572:	mov    %r14,%r9
    9575:	mov    -0xf8(%rbp),%r8
    957c:	mov    -0x178(%rbp),%r10
    9583:	mov    -0x1b8(%rbp),%r11
    958a:	mov    -0x180(%rbp),%rcx
    9591:	mov    -0x148(%rbp),%r14
    9598:	xor    %eax,%eax
    959a:	movl   $0x3f48,0x8(%r12)
    95a3:	cmp    $0x5,%r11d
    95a7:	ja     9fb3 <inflate+0xed3>
    95ad:	movl   $0x0,0x1bec(%r12)
    95b9:	mov    %rax,-0x140(%rbp)
    95c0:	mov    -0x190(%rbp),%rax
    95c7:	mov    $0x1,%edx
    95cc:	jmpq   a04b <inflate+0xf6b>
    95d1:	test   %r11d,%r11d
    95d4:	je     a0f6 <inflate+0x1016>
    95da:	lea    0x1(%r8),%rsi
    95de:	movzbl (%r8),%edx
    95e2:	shl    %cl,%rdx
    95e5:	add    %rdx,%r10
    95e8:	add    $0x8,%ecx
    95eb:	add    $0xffffffff,%r11d
    95ef:	mov    %rsi,%r8
    95f2:	cmp    $0x2,%ecx
    95f5:	jbe    95d1 <inflate+0x4f1>
    95f7:	mov    0x8c(%r12),%esi
    95ff:	lea    0x1(%rsi),%edx
    9602:	mov    %edx,0x8c(%r12)
    960a:	lea    0xb523(%rip),%rdx        # 14b34 <order.1>
    9611:	movzwl (%rdx,%rsi,2),%edx
    9615:	mov    %r10,%rsi
    9618:	and    $0x7,%si
    961c:	mov    -0x1b0(%rbp),%rdi
    9623:	mov    %si,(%rdi,%rdx,2)
    9627:	shr    $0x3,%r10
    962b:	add    $0xfffffffd,%ecx
    962e:	mov    0x80(%r12),%edx
    9636:	cmp    0x8c(%r12),%edx
    963e:	ja     95f2 <inflate+0x512>
    9640:	lea    0xb4ed(%rip),%rdi        # 14b34 <order.1>
    9647:	mov    -0x1b0(%rbp),%rsi
    964e:	jmpq   a11a <inflate+0x103a>
    9653:	test   %r11d,%r11d
    9656:	je     a1eb <inflate+0x110b>
    965c:	movzbl (%r8),%edx
    9660:	shl    %cl,%rdx
    9663:	add    %rdx,%r10
    9666:	add    $0x1,%r8
    966a:	add    $0xffffffff,%r11d
    966e:	add    $0x8,%ecx
    9671:	cmp    $0xd,%ecx
    9674:	jbe    9653 <inflate+0x573>
    9676:	mov    %r10,%rdx
    9679:	and    $0x1f,%edx
    967c:	lea    0x101(%rdx),%edi
    9682:	mov    %edi,0x84(%r12)
    968a:	mov    %r10,%rdx
    968d:	shr    $0x5,%rdx
    9691:	and    $0x1f,%edx
    9694:	lea    0x1(%rdx),%esi
    9697:	mov    %esi,0x88(%r12)
    969f:	mov    %r10,%rdx
    96a2:	shr    $0xa,%rdx
    96a6:	and    $0xf,%edx
    96a9:	add    $0x4,%edx
    96ac:	mov    %edx,0x80(%r12)
    96b4:	shr    $0xe,%r10
    96b8:	add    $0xfffffff2,%ecx
    96bb:	cmp    $0x11e,%edi
    96c1:	jbe    a1f3 <inflate+0x1113>
    96c7:	lea    0xb52f(%rip),%rdx        # 14bfd <order.1+0xc9>
    96ce:	mov    %rdx,0x30(%rbx)
    96d2:	movl   $0x3f51,0x8(%r12)
    96db:	mov    -0x168(%rbp),%rsi
    96e2:	jmpq   91f6 <inflate+0x116>
    96e7:	test   %r11d,%r11d
    96ea:	je     a216 <inflate+0x1136>
    96f0:	movzbl (%r8),%edx
    96f4:	shl    %cl,%rdx
    96f7:	add    %rdx,%r10
    96fa:	add    $0x1,%r8
    96fe:	add    $0xffffffff,%r11d
    9702:	add    $0x8,%ecx
    9705:	cmp    $0x18,%ecx
    9708:	jbe    96e7 <inflate+0x607>
    970a:	mov    %r10,%rdx
    970d:	shr    $0x10,%rdx
    9711:	xor    $0xffff,%rdx
    9718:	movzwl %r10w,%edi
    971c:	cmp    %rdi,%rdx
    971f:	jne    a21e <inflate+0x113e>
    9725:	cmp    $0x6,%esi
    9728:	movzwl %r10w,%ecx
    972c:	mov    %ecx,0x5c(%r12)
    9731:	movl   $0x3f42,0x8(%r12)
    973a:	je     a237 <inflate+0x1157>
    9740:	xor    %ecx,%ecx
    9742:	mov    %rcx,%r10
    9745:	movl   $0x3f43,0x8(%r12)
    974e:	mov    0x5c(%r12),%edx
    9753:	test   %edx,%edx
    9755:	jne    a241 <inflate+0x1161>
    975b:	movl   $0x3f3f,0x8(%r12)
    9764:	jmpq   91f6 <inflate+0x116>
    9769:	movslq 0x18(%r12),%rdx
    976e:	and    $0x200,%edx
    9774:	test   %edx,%edx
    9776:	jg     a2ee <inflate+0x120e>
    977c:	sub    %ecx,%r11d
    977f:	test   %r10b,%r10b
    9782:	mov    %ecx,%ecx
    9784:	lea    (%r8,%rcx,1),%r8
    9788:	jne    a370 <inflate+0x1290>
    978e:	mov    -0x158(%rbp),%rcx
    9795:	mov    -0x150(%rbp),%r10
    979c:	movl   $0x3f3c,0x8(%r12)
    97a5:	mov    -0x168(%rbp),%rsi
    97ac:	movslq 0x18(%r12),%rdx
    97b1:	and    $0x200,%edx
    97b7:	test   %edx,%edx
    97b9:	jg     a3ab <inflate+0x12cb>
    97bf:	mov    0x30(%r12),%rdx
    97c4:	test   %rdx,%rdx
    97c7:	je     97e5 <inflate+0x705>
    97c9:	movslq 0x18(%r12),%rax
    97ce:	and    $0x200,%eax
    97d3:	shr    $0x9,%eax
    97d6:	mov    %eax,0x44(%rdx)
    97d9:	mov    0x30(%r12),%rax
    97de:	movl   $0x1,0x48(%rax)
    97e5:	xor    %edx,%edx
    97e7:	mov    %rdx,%rsi
    97ea:	xor    %edi,%edi
    97ec:	mov    %r10,-0xf0(%rbp)
    97f3:	mov    %r8,-0x58(%rbp)
    97f7:	mov    %r11,-0x108(%rbp)
    97fe:	mov    %rcx,-0xe0(%rbp)
    9805:	callq  20d0 <crc32@plt>
    980a:	mov    %rax,0x20(%r12)
    980f:	mov    %rax,0x60(%rbx)
    9813:	movl   $0x3f3f,0x8(%r12)
    981c:	mov    -0xe0(%rbp),%rcx
    9823:	mov    -0x108(%rbp),%r11
    982a:	mov    -0x58(%rbp),%r8
    982e:	mov    -0xf0(%rbp),%r10
    9835:	mov    -0x1c0(%rbp),%r9
    983c:	mov    -0x148(%rbp),%rax
    9843:	mov    -0x168(%rbp),%rsi
    984a:	jmpq   91f6 <inflate+0x116>
    984f:	movslq 0x18(%r12),%rdx
    9854:	and    $0x200,%edx
    985a:	test   %edx,%edx
    985c:	jle    98d7 <inflate+0x7f7>
    985e:	movslq 0x10(%r12),%rdx
    9863:	and    $0x4,%edx
    9866:	test   %edx,%edx
    9868:	jle    98d7 <inflate+0x7f7>
    986a:	mov    0x20(%r12),%rdi
    986f:	mov    %r8,%rsi
    9872:	mov    %rcx,%rdx
    9875:	mov    %r15,-0x118(%rbp)
    987c:	mov    %rbx,-0x68(%rbp)
    9880:	mov    %r14,-0x90(%rbp)
    9887:	mov    %r13,-0xb8(%rbp)
    988e:	mov    %r8,%rbx
    9891:	mov    %r10,%r13
    9894:	mov    %r11,%r14
    9897:	mov    %rcx,%r15
    989a:	callq  20d0 <crc32@plt>
    989f:	mov    %rax,0x20(%r12)
    98a4:	mov    %r15,%rcx
    98a7:	mov    %rbx,%r8
    98aa:	mov    %r13,%r10
    98ad:	mov    %r14,%r11
    98b0:	mov    -0xb8(%rbp),%r13
    98b7:	mov    -0x90(%rbp),%r14
    98be:	mov    -0x68(%rbp),%rbx
    98c2:	mov    -0x1c0(%rbp),%r9
    98c9:	mov    -0x148(%rbp),%rax
    98d0:	mov    -0x118(%rbp),%r15
    98d7:	sub    %ecx,%r11d
    98da:	test   %r10b,%r10b
    98dd:	mov    %ecx,%ecx
    98df:	lea    (%r8,%rcx,1),%r8
    98e3:	jne    a3ca <inflate+0x12ea>
    98e9:	mov    -0x158(%rbp),%rcx
    98f0:	mov    -0x150(%rbp),%r10
    98f7:	movl   $0x0,0x5c(%r12)
    9900:	movl   $0x3f3b,0x8(%r12)
    9909:	movslq 0x18(%r12),%rdx
    990e:	and    $0x1000,%edx
    9914:	test   %edx,%edx
    9916:	jg     a3e4 <inflate+0x1304>
    991c:	mov    0x30(%r12),%rdx
    9921:	test   %rdx,%rdx
    9924:	je     979c <inflate+0x6bc>
    992a:	movq   $0x0,0x38(%rdx)
    9932:	jmpq   979c <inflate+0x6bc>
    9937:	test   %r11d,%r11d
    993a:	je     a402 <inflate+0x1322>
    9940:	lea    0x1(%r8),%rsi
    9944:	movzbl (%r8),%edx
    9948:	shl    %cl,%rdx
    994b:	add    %rdx,%r10
    994e:	add    $0x8,%ecx
    9951:	add    $0xffffffff,%r11d
    9955:	mov    %rsi,%r8
    9958:	cmp    $0xf,%ecx
    995b:	jbe    9937 <inflate+0x857>
    995d:	mov    0x30(%r12),%rcx
    9962:	test   %rcx,%rcx
    9965:	je     997d <inflate+0x89d>
    9967:	movzbl %r10b,%edx
    996b:	mov    %edx,0x10(%rcx)
    996e:	mov    %r10,%rdx
    9971:	shr    $0x8,%rdx
    9975:	mov    0x30(%r12),%rcx
    997a:	mov    %edx,0x14(%rcx)
    997d:	movslq 0x18(%r12),%rcx
    9982:	and    $0x200,%ecx
    9988:	test   %ecx,%ecx
    998a:	jle    99fb <inflate+0x91b>
    998c:	movslq 0x10(%r12),%rcx
    9991:	and    $0x4,%ecx
    9994:	test   %ecx,%ecx
    9996:	jle    99fb <inflate+0x91b>
    9998:	mov    %r10b,-0x1c4(%rbp)
    999f:	shr    $0x8,%r10
    99a3:	mov    %r10b,-0x1c3(%rbp)
    99aa:	mov    0x20(%r12),%rdi
    99af:	lea    -0x1c4(%rbp),%rsi
    99b6:	mov    $0x2,%edx
    99bb:	mov    %r14,-0xa0(%rbp)
    99c2:	mov    %r13,-0xc8(%rbp)
    99c9:	mov    %r8,%r13
    99cc:	mov    %r11,%r14
    99cf:	callq  20d0 <crc32@plt>
    99d4:	mov    %rax,0x20(%r12)
    99d9:	mov    %r13,%r8
    99dc:	mov    %r14,%r11
    99df:	mov    -0xc8(%rbp),%r13
    99e6:	mov    -0xa0(%rbp),%r14
    99ed:	mov    -0x1c0(%rbp),%r9
    99f4:	mov    -0x148(%rbp),%rax
    99fb:	movl   $0x3f38,0x8(%r12)
    9a04:	xor    %ecx,%ecx
    9a06:	mov    %rcx,%r10
    9a09:	movslq 0x18(%r12),%rdx
    9a0e:	and    $0x400,%edx
    9a14:	test   %edx,%edx
    9a16:	jg     a432 <inflate+0x1352>
    9a1c:	mov    0x30(%r12),%rdx
    9a21:	test   %rdx,%rdx
    9a24:	je     9a2e <inflate+0x94e>
    9a26:	movq   $0x0,0x18(%rdx)
    9a2e:	movl   $0x3f39,0x8(%r12)
    9a37:	movslq 0x18(%r12),%rdx
    9a3c:	and    $0x400,%edx
    9a42:	test   %edx,%edx
    9a44:	jg     a467 <inflate+0x1387>
    9a4a:	movl   $0x0,0x5c(%r12)
    9a53:	movl   $0x3f3a,0x8(%r12)
    9a5c:	movslq 0x18(%r12),%rdx
    9a61:	and    $0x800,%edx
    9a67:	test   %edx,%edx
    9a69:	jg     a47d <inflate+0x139d>
    9a6f:	mov    0x30(%r12),%rdx
    9a74:	test   %rdx,%rdx
    9a77:	je     98f7 <inflate+0x817>
    9a7d:	movq   $0x0,0x28(%rdx)
    9a85:	jmpq   98f7 <inflate+0x817>
    9a8a:	test   %r11d,%r11d
    9a8d:	je     a49b <inflate+0x13bb>
    9a93:	lea    0x1(%r8),%rsi
    9a97:	movzbl (%r8),%edx
    9a9b:	shl    %cl,%rdx
    9a9e:	add    %rdx,%r10
    9aa1:	add    $0x8,%ecx
    9aa4:	add    $0xffffffff,%r11d
    9aa8:	mov    %rsi,%r8
    9aab:	cmp    $0x1f,%ecx
    9aae:	jbe    9a8a <inflate+0x9aa>
    9ab0:	mov    0x30(%r12),%rcx
    9ab5:	test   %rcx,%rcx
    9ab8:	je     9abe <inflate+0x9de>
    9aba:	mov    %r10,0x8(%rcx)
    9abe:	movslq 0x18(%r12),%rcx
    9ac3:	and    $0x200,%ecx
    9ac9:	test   %ecx,%ecx
    9acb:	jg     a4aa <inflate+0x13ca>
    9ad1:	movl   $0x3f37,0x8(%r12)
    9ada:	xor    %ecx,%ecx
    9adc:	mov    %rcx,%r10
    9adf:	jmpq   9958 <inflate+0x878>
    9ae4:	test   %r11d,%r11d
    9ae7:	je     a54a <inflate+0x146a>
    9aed:	movzbl (%r8),%edx
    9af1:	shl    %cl,%rdx
    9af4:	add    %rdx,%r10
    9af7:	add    $0x1,%r8
    9afb:	add    $0xffffffff,%r11d
    9aff:	add    $0x8,%ecx
    9b02:	cmp    $0xf,%ecx
    9b05:	jbe    9ae4 <inflate+0xa04>
    9b07:	mov    %r10d,0x18(%r12)
    9b0c:	movzbl %r10b,%edx
    9b10:	cmp    $0x8,%edx
    9b13:	jne    a552 <inflate+0x1472>
    9b19:	mov    %r10,%rdx
    9b1c:	and    $0xe000,%edx
    9b22:	test   %edx,%edx
    9b24:	jg     a56b <inflate+0x148b>
    9b2a:	mov    0x30(%r12),%rcx
    9b2f:	test   %rcx,%rcx
    9b32:	je     9b40 <inflate+0xa60>
    9b34:	mov    %r10,%rax
    9b37:	shr    $0x8,%rax
    9b3b:	and    $0x1,%eax
    9b3e:	mov    %eax,(%rcx)
    9b40:	movslq 0x18(%r12),%rax
    9b45:	and    $0x200,%eax
    9b4a:	test   %eax,%eax
    9b4c:	jg     a584 <inflate+0x14a4>
    9b52:	mov    %r15,-0x128(%rbp)
    9b59:	mov    %r14,-0xa8(%rbp)
    9b60:	mov    %r13,-0xd0(%rbp)
    9b67:	movl   $0x3f36,0x8(%r12)
    9b70:	mov    -0xd0(%rbp),%r13
    9b77:	mov    -0xa8(%rbp),%r14
    9b7e:	mov    -0x148(%rbp),%rax
    9b85:	mov    -0x128(%rbp),%r15
    9b8c:	xor    %ecx,%ecx
    9b8e:	mov    %rcx,%r10
    9b91:	jmpq   9aab <inflate+0x9cb>
    9b96:	mov    -0x8(%rbp),%rbx
    9b9a:	mov    -0x10(%rbp),%r12
    9b9e:	mov    -0x18(%rbp),%r13
    9ba2:	mov    -0x20(%rbp),%r14
    9ba6:	mov    $0xfffffffffffffffc,%rax
    9bad:	mov    -0x28(%rbp),%r15
    9bb1:	leaveq 
    9bb2:	retq   
    9bb3:	mov    -0x8(%rbp),%rbx
    9bb7:	mov    -0x10(%rbp),%r12
    9bbb:	mov    -0x18(%rbp),%r13
    9bbf:	mov    -0x20(%rbp),%r14
    9bc3:	mov    $0xfffffffffffffffe,%rax
    9bca:	mov    -0x28(%rbp),%r15
    9bce:	leaveq 
    9bcf:	retq   
    9bd0:	mov    $0x1,%eax
    9bd5:	jmpq   9280 <inflate+0x1a0>
    9bda:	mov    $0xfffffffffffffffd,%rax
    9be1:	jmpq   9280 <inflate+0x1a0>
    9be6:	movslq 0x10(%r12),%rdx
    9beb:	test   %edx,%edx
    9bed:	jne    a5cc <inflate+0x14ec>
    9bf3:	movl   $0x3f40,0x8(%r12)
    9bfc:	jmpq   91f6 <inflate+0x116>
    9c01:	mov    %rcx,%rdx
    9c04:	mov    %rdx,%rcx
    9c07:	and    $0x7,%ecx
    9c0a:	shr    %cl,%r10
    9c0d:	mov    %rdx,%rcx
    9c10:	and    $0xfffffff8,%ecx
    9c13:	jmpq   9705 <inflate+0x625>
    9c18:	mov    %r14,-0x110(%rbp)
    9c1f:	mov    -0x190(%rbp),%rsi
    9c26:	mov    $0x1,%edi
    9c2b:	jmpq   a65f <inflate+0x157f>
    9c30:	mov    $0x1,%edx
    9c35:	mov    0x64(%r12),%esi
    9c3a:	test   %esi,%esi
    9c3c:	jne    a6d7 <inflate+0x15f7>
    9c42:	mov    0x5c(%r12),%esi
    9c47:	mov    %esi,0x1bf0(%r12)
    9c4f:	movl   $0x3f4a,0x8(%r12)
    9c58:	jmpq   a73e <inflate+0x165e>
    9c5d:	mov    $0x1,%edx
    9c62:	jmpq   a73e <inflate+0x165e>
    9c67:	mov    $0x1,%edx
    9c6c:	mov    0x64(%r12),%esi
    9c71:	test   %esi,%esi
    9c73:	jne    a7f4 <inflate+0x1714>
    9c79:	movl   $0x3f4c,0x8(%r12)
    9c82:	mov    %rbx,%rdi
    9c85:	mov    -0x168(%rbp),%rsi
    9c8c:	test   %r13d,%r13d
    9c8f:	je     a837 <inflate+0x1757>
    9c95:	mov    %r14,%rbx
    9c98:	sub    %r13d,%ebx
    9c9b:	mov    0x60(%r12),%edx
    9ca0:	cmp    %ebx,%edx
    9ca2:	ja     a83f <inflate+0x175f>
    9ca8:	mov    0x5c(%r12),%ebx
    9cad:	neg    %rdx
    9cb0:	add    %r15,%rdx
    9cb3:	cmp    %ebx,%r13d
    9cb6:	jae    9cbb <inflate+0xbdb>
    9cb8:	mov    %r13,%rbx
    9cbb:	mov    %rdi,-0x80(%rbp)
    9cbf:	mov    0x5c(%r12),%edi
    9cc4:	sub    %ebx,%edi
    9cc6:	mov    %edi,0x5c(%r12)
    9ccb:	mov    %rcx,-0xe8(%rbp)
    9cd2:	mov    %rbx,%rcx
    9cd5:	jmpq   a873 <inflate+0x1793>
    9cda:	mov    %rbx,%rdi
    9cdd:	jmp    9c8c <inflate+0xbac>
    9cdf:	test   %r13d,%r13d
    9ce2:	je     9280 <inflate+0x1a0>
    9ce8:	movzbl 0x5c(%r12),%edx
    9cee:	mov    %dl,(%r15)
    9cf1:	movl   $0x3f48,0x8(%r12)
    9cfa:	add    $0x1,%r15
    9cfe:	add    $0xffffffff,%r13d
    9d02:	jmpq   91f6 <inflate+0x116>
    9d07:	movslq 0x10(%r12),%rdx
    9d0c:	test   %edx,%edx
    9d0e:	jne    a8c5 <inflate+0x17e5>
    9d14:	movl   $0x3f4f,0x8(%r12)
    9d1d:	jmpq   9255 <inflate+0x175>
    9d22:	test   %r11d,%r11d
    9d25:	je     a914 <inflate+0x1834>
    9d2b:	lea    0x1(%r8),%rsi
    9d2f:	movzbl (%r8),%edx
    9d33:	shl    %cl,%rdx
    9d36:	add    %rdx,%r10
    9d39:	add    $0xffffffff,%r11d
    9d3d:	add    $0x8,%ecx
    9d40:	mov    %rsi,%r8
    9d43:	cmp    $0x1f,%ecx
    9d46:	jbe    9d22 <inflate+0xc42>
    9d48:	mov    0x28(%r12),%edx
    9d4d:	cmp    %rdx,%r10
    9d50:	je     a923 <inflate+0x1843>
    9d56:	lea    0xafb3(%rip),%rdx        # 14d10 <order.1+0x1dc>
    9d5d:	mov    %rdx,0x30(%rbx)
    9d61:	movl   $0x3f51,0x8(%r12)
    9d6a:	mov    -0x168(%rbp),%rsi
    9d71:	jmpq   91f6 <inflate+0x116>
    9d76:	mov    0x20(%rbx),%ecx
    9d79:	cmp    %r14d,%ecx
    9d7c:	je     92ce <inflate+0x1ee>
    9d82:	mov    0x8(%r12),%ecx
    9d87:	cmp    $0x3f50,%ecx
    9d8d:	ja     92ce <inflate+0x1ee>
    9d93:	cmp    $0x3f4d,%ecx
    9d99:	jbe    92a6 <inflate+0x1c6>
    9d9f:	cmp    $0x4,%esi
    9da2:	jne    92a6 <inflate+0x1c6>
    9da8:	jmpq   92ce <inflate+0x1ee>
    9dad:	movl   $0x3f52,0x8(%r12)
    9db6:	mov    -0x8(%rbp),%rbx
    9dba:	mov    -0x10(%rbp),%r12
    9dbe:	mov    -0x18(%rbp),%r13
    9dc2:	mov    -0x20(%rbp),%r14
    9dc6:	mov    $0xfffffffffffffffc,%rax
    9dcd:	mov    -0x28(%rbp),%r15
    9dd1:	leaveq 
    9dd2:	retq   
    9dd3:	mov    0x18(%rbx),%rsi
    9dd7:	mov    %edx,%ecx
    9dd9:	sub    %rcx,%rsi
    9ddc:	mov    0x20(%r12),%rdi
    9de1:	mov    %r8,-0x1c0(%rbp)
    9de8:	mov    %rax,-0x1b0(%rbp)
    9def:	callq  20d0 <crc32@plt>
    9df4:	mov    %rax,0x20(%r12)
    9df9:	mov    %rax,0x60(%rbx)
    9dfd:	mov    -0x1b0(%rbp),%rax
    9e04:	mov    -0x1c0(%rbp),%r8
    9e0b:	mov    -0x168(%rbp),%rsi
    9e12:	movslq 0x58(%r12),%r10
    9e17:	movslq 0xc(%r12),%rcx
    9e1c:	test   %ecx,%ecx
    9e1e:	jne    a92d <inflate+0x184d>
    9e24:	xor    %edx,%edx
    9e26:	jmpq   a932 <inflate+0x1852>
    9e2b:	xor    %r11d,%r11d
    9e2e:	jmpq   9280 <inflate+0x1a0>
    9e33:	mov    %r15,0x18(%rbx)
    9e37:	mov    %r13d,0x20(%rbx)
    9e3b:	mov    %r8,(%rbx)
    9e3e:	mov    %r11d,0x8(%rbx)
    9e42:	mov    %r10,0x50(%r12)
    9e47:	mov    %ecx,0x58(%r12)
    9e4c:	mov    -0x8(%rbp),%rbx
    9e50:	mov    -0x10(%rbp),%r12
    9e54:	mov    -0x18(%rbp),%r13
    9e58:	mov    -0x20(%rbp),%r14
    9e5c:	mov    $0x2,%eax
    9e61:	mov    -0x28(%rbp),%r15
    9e65:	leaveq 
    9e66:	retq   
    9e67:	test   %r11d,%r11d
    9e6a:	je     a94b <inflate+0x186b>
    9e70:	movzbl (%r8),%edx
    9e74:	shl    %cl,%rdx
    9e77:	add    %rdx,%r10
    9e7a:	add    $0x1,%r8
    9e7e:	add    $0xffffffff,%r11d
    9e82:	add    $0x8,%ecx
    9e85:	cmp    $0x2,%ecx
    9e88:	jbe    9e67 <inflate+0xd87>
    9e8a:	mov    %r10,%rdx
    9e8d:	and    $0x1,%edx
    9e90:	mov    %edx,0xc(%r12)
    9e95:	mov    %r10,%rdx
    9e98:	shr    %rdx
    9e9b:	and    $0x3,%edx
    9e9e:	cmp    $0x1,%edx
    9ea1:	jbe    a953 <inflate+0x1873>
    9ea7:	cmp    $0x2,%edx
    9eaa:	je     a9db <inflate+0x18fb>
    9eb0:	cmp    $0x3,%edx
    9eb3:	jne    a9ef <inflate+0x190f>
    9eb9:	lea    0xad0d(%rip),%rdx        # 14bcd <order.1+0x99>
    9ec0:	mov    %rdx,0x30(%rbx)
    9ec4:	movl   $0x3f51,0x8(%r12)
    9ecd:	jmpq   a9ef <inflate+0x190f>
    9ed2:	lea    0xad7b(%rip),%rdx        # 14c54 <order.1+0x120>
    9ed9:	mov    %rdx,0x30(%rbx)
    9edd:	movl   $0x3f51,0x8(%r12)
    9ee6:	mov    -0x1c0(%rbp),%r9
    9eed:	mov    -0x168(%rbp),%rsi
    9ef4:	jmpq   91f6 <inflate+0x116>
    9ef9:	lea    0xad79(%rip),%rcx        # 14c79 <order.1+0x145>
    9f00:	mov    %rcx,0x30(%rbx)
    9f04:	movl   $0x3f51,0x8(%r12)
    9f0d:	mov    -0xf8(%rbp),%r8
    9f14:	mov    -0x178(%rbp),%r10
    9f1b:	mov    -0x1b8(%rbp),%r11
    9f22:	mov    -0x180(%rbp),%rcx
    9f29:	mov    -0x148(%rbp),%r14
    9f30:	mov    -0x1c0(%rbp),%r9
    9f37:	mov    -0x168(%rbp),%rsi
    9f3e:	jmpq   91f6 <inflate+0x116>
    9f43:	lea    0xad4b(%rip),%rcx        # 14c95 <order.1+0x161>
    9f4a:	mov    %rcx,0x30(%rbx)
    9f4e:	movl   $0x3f51,0x8(%r12)
    9f57:	mov    %r14,%r9
    9f5a:	mov    -0xf8(%rbp),%r8
    9f61:	mov    -0x178(%rbp),%r10
    9f68:	mov    -0x1b8(%rbp),%r11
    9f6f:	mov    -0x180(%rbp),%rcx
    9f76:	mov    -0x148(%rbp),%r14
    9f7d:	mov    -0x168(%rbp),%rsi
    9f84:	jmpq   91f6 <inflate+0x116>
    9f89:	mov    -0xf8(%rbp),%r8
    9f90:	mov    -0x178(%rbp),%r10
    9f97:	mov    -0x1b8(%rbp),%r11
    9f9e:	mov    -0x180(%rbp),%rcx
    9fa5:	mov    -0x148(%rbp),%r14
    9fac:	xor    %eax,%eax
    9fae:	jmpq   9280 <inflate+0x1a0>
    9fb3:	cmp    $0x101,%r13d
    9fba:	jbe    95ad <inflate+0x4cd>
    9fc0:	mov    %r15,0x18(%rbx)
    9fc4:	mov    %r13d,0x20(%rbx)
    9fc8:	mov    %r8,(%rbx)
    9fcb:	mov    %r11d,0x8(%rbx)
    9fcf:	mov    %r10,0x50(%r12)
    9fd4:	mov    %ecx,0x58(%r12)
    9fd9:	mov    %r9,%r13
    9fdc:	mov    %rax,%r15
    9fdf:	mov    %rbx,%rdi
    9fe2:	mov    %r14,%rsi
    9fe5:	callq  2220 <inflate_fast@plt>
    9fea:	mov    0x18(%rbx),%rdx
    9fee:	mov    0x20(%rbx),%edi
    9ff1:	mov    (%rbx),%r8
    9ff4:	mov    0x8(%rbx),%r11d
    9ff8:	mov    0x50(%r12),%r10
    9ffd:	mov    0x58(%r12),%ecx
    a002:	mov    0x8(%r12),%eax
    a007:	cmp    $0x3f3f,%eax
    a00c:	je     a9fb <inflate+0x191b>
    a012:	mov    %r15,%rax
    a015:	mov    %rdx,%r15
    a018:	mov    %r13,%r9
    a01b:	mov    %rdi,%r13
    a01e:	mov    -0x168(%rbp),%rsi
    a025:	jmpq   91f6 <inflate+0x116>
    a02a:	test   %r11d,%r11d
    a02d:	je     aa1f <inflate+0x193f>
    a033:	mov    %rdi,%rcx
    a036:	movzbl (%r8),%esi
    a03a:	shl    %cl,%rsi
    a03d:	add    %rsi,%r10
    a040:	add    $0x1,%r8
    a044:	add    $0x8,%ecx
    a047:	add    $0xffffffff,%r11d
    a04b:	mov    %rcx,%rdi
    a04e:	mov    (%rax),%ecx
    a050:	mov    %rdx,%rsi
    a053:	shl    %cl,%esi
    a055:	lea    -0x1(%rsi),%ecx
    a058:	and    %r10d,%ecx
    a05b:	mov    %ecx,%ecx
    a05d:	mov    0x68(%r12),%rsi
    a062:	mov    (%rsi,%rcx,4),%esi
    a065:	mov    %esi,-0x1cc(%rbp)
    a06b:	mov    %rsi,%rcx
    a06e:	shr    $0x8,%ecx
    a071:	movzbl %cl,%ecx
    a074:	cmp    %ecx,%edi
    a076:	jb     a02a <inflate+0xf4a>
    a078:	test   %sil,%sil
    a07b:	jne    aa38 <inflate+0x1958>
    a081:	movzbl -0x1cb(%rbp),%ecx
    a088:	mov    %rcx,%rax
    a08b:	add    0x1bec(%r12),%eax
    a093:	mov    %eax,0x1bec(%r12)
    a09b:	movzwl -0x1ca(%rbp),%eax
    a0a2:	mov    %eax,0x5c(%r12)
    a0a7:	shr    %cl,%r10
    a0aa:	neg    %ecx
    a0ac:	add    %edi,%ecx
    a0ae:	movzbl -0x1cc(%rbp),%eax
    a0b5:	test   %al,%al
    a0b7:	je     aa54 <inflate+0x1974>
    a0bd:	mov    %rax,%rsi
    a0c0:	and    $0x20,%esi
    a0c3:	test   %esi,%esi
    a0c5:	jg     aa70 <inflate+0x1990>
    a0cb:	mov    %rax,%rsi
    a0ce:	and    $0x40,%esi
    a0d1:	test   %esi,%esi
    a0d3:	jg     aa98 <inflate+0x19b8>
    a0d9:	and    $0xf,%eax
    a0dc:	mov    %eax,0x64(%r12)
    a0e1:	movl   $0x3f49,0x8(%r12)
    a0ea:	mov    -0x140(%rbp),%rax
    a0f1:	jmpq   9c35 <inflate+0xb55>
    a0f6:	xor    %r11d,%r11d
    a0f9:	mov    -0x168(%rbp),%rsi
    a100:	jmpq   9280 <inflate+0x1a0>
    a105:	lea    0x1(%rdx),%eax
    a108:	mov    %eax,0x8c(%r12)
    a110:	movzwl (%rdi,%rdx,2),%eax
    a114:	movw   $0x0,(%rsi,%rax,2)
    a11a:	mov    0x8c(%r12),%edx
    a122:	cmp    $0x12,%edx
    a125:	jbe    a105 <inflate+0x1025>
    a127:	mov    -0x1a0(%rbp),%rax
    a12e:	mov    %rax,0x90(%r12)
    a136:	mov    %rax,0x68(%r12)
    a13b:	movl   $0x7,0x78(%r12)
    a144:	xor    %r9d,%r9d
    a147:	mov    $0x13,%edx
    a14c:	mov    -0x188(%rbp),%rax
    a153:	mov    -0x190(%rbp),%rdi
    a15a:	mov    %rcx,-0x180(%rbp)
    a161:	mov    -0x198(%rbp),%rcx
    a168:	mov    %r10,-0xf8(%rbp)
    a16f:	mov    %r8,-0xe8(%rbp)
    a176:	mov    %r11,-0x108(%rbp)
    a17d:	mov    %rdi,%r8
    a180:	mov    %r9,%rdi
    a183:	mov    %rcx,%r9
    a186:	mov    %rax,%rcx
    a189:	callq  22a0 <inflate_table@plt>
    a18e:	test   %eax,%eax
    a190:	jne    aabf <inflate+0x19df>
    a196:	movl   $0x0,0x8c(%r12)
    a1a2:	movl   $0x3f46,0x8(%r12)
    a1ab:	mov    %r14,-0x110(%rbp)
    a1b2:	mov    -0x108(%rbp),%r11
    a1b9:	mov    -0xe8(%rbp),%r8
    a1c0:	mov    -0xf8(%rbp),%r10
    a1c7:	mov    -0x180(%rbp),%rcx
    a1ce:	mov    -0x190(%rbp),%rsi
    a1d5:	mov    $0x1,%edi
    a1da:	pushq  -0x138(%rbp)
    a1e0:	popq   -0x148(%rbp)
    a1e6:	jmpq   a65f <inflate+0x157f>
    a1eb:	xor    %r11d,%r11d
    a1ee:	jmpq   9280 <inflate+0x1a0>
    a1f3:	cmp    $0x1e,%esi
    a1f6:	ja     96c7 <inflate+0x5e7>
    a1fc:	movl   $0x0,0x8c(%r12)
    a208:	movl   $0x3f45,0x8(%r12)
    a211:	jmpq   962e <inflate+0x54e>
    a216:	xor    %r11d,%r11d
    a219:	jmpq   9280 <inflate+0x1a0>
    a21e:	lea    0xa9bb(%rip),%rdx        # 14be0 <order.1+0xac>
    a225:	mov    %rdx,0x30(%rbx)
    a229:	movl   $0x3f51,0x8(%r12)
    a232:	jmpq   91f6 <inflate+0x116>
    a237:	xor    %ecx,%ecx
    a239:	mov    %rcx,%r10
    a23c:	jmpq   9280 <inflate+0x1a0>
    a241:	cmp    %r11d,%edx
    a244:	jbe    a249 <inflate+0x1169>
    a246:	mov    %r11,%rdx
    a249:	cmp    %edx,%r13d
    a24c:	jae    a251 <inflate+0x1171>
    a24e:	mov    %r13,%rdx
    a251:	test   %edx,%edx
    a253:	je     9280 <inflate+0x1a0>
    a259:	mov    %edx,%eax
    a25b:	mov    %rbx,-0x78(%rbp)
    a25f:	mov    %rax,-0x130(%rbp)
    a266:	mov    %r15,%rdi
    a269:	mov    %r8,%rsi
    a26c:	mov    %r14,-0xb0(%rbp)
    a273:	mov    %r8,-0x60(%rbp)
    a277:	mov    %r10,-0xf0(%rbp)
    a27e:	mov    %rcx,-0xe0(%rbp)
    a285:	mov    %r11,%rbx
    a288:	mov    %rdx,%r14
    a28b:	mov    %rax,%rdx
    a28e:	callq  21f0 <memcpy@plt>
    a293:	sub    %r14d,%r13d
    a296:	mov    %rbx,%r11
    a299:	sub    %r14d,%r11d
    a29c:	mov    0x5c(%r12),%eax
    a2a1:	sub    %r14d,%eax
    a2a4:	mov    %eax,0x5c(%r12)
    a2a9:	mov    -0x130(%rbp),%rax
    a2b0:	add    %rax,%r15
    a2b3:	mov    -0x60(%rbp),%rcx
    a2b7:	lea    (%rcx,%rax,1),%r8
    a2bb:	mov    -0xe0(%rbp),%rcx
    a2c2:	mov    -0xf0(%rbp),%r10
    a2c9:	mov    -0xb0(%rbp),%r14
    a2d0:	mov    -0x78(%rbp),%rbx
    a2d4:	mov    -0x1c0(%rbp),%r9
    a2db:	mov    -0x148(%rbp),%rax
    a2e2:	mov    -0x168(%rbp),%rsi
    a2e9:	jmpq   91f6 <inflate+0x116>
    a2ee:	movslq 0x10(%r12),%rdx
    a2f3:	and    $0x4,%edx
    a2f6:	test   %edx,%edx
    a2f8:	jle    977c <inflate+0x69c>
    a2fe:	mov    0x20(%r12),%rdi
    a303:	mov    %r8,%rsi
    a306:	mov    %rcx,%rdx
    a309:	mov    %r15,-0x118(%rbp)
    a310:	mov    %rbx,-0x68(%rbp)
    a314:	mov    %r14,-0x90(%rbp)
    a31b:	mov    %r13,-0xb8(%rbp)
    a322:	mov    %r8,%rbx
    a325:	mov    %r11,%r13
    a328:	mov    %rcx,%r14
    a32b:	mov    %r10,%r15
    a32e:	callq  20d0 <crc32@plt>
    a333:	mov    %rax,0x20(%r12)
    a338:	mov    %r14,%rcx
    a33b:	mov    %rbx,%r8
    a33e:	mov    %r15,%r10
    a341:	mov    %r13,%r11
    a344:	mov    -0xb8(%rbp),%r13
    a34b:	mov    -0x90(%rbp),%r14
    a352:	mov    -0x68(%rbp),%rbx
    a356:	mov    -0x1c0(%rbp),%r9
    a35d:	mov    -0x148(%rbp),%rax
    a364:	mov    -0x118(%rbp),%r15
    a36b:	jmpq   977c <inflate+0x69c>
    a370:	mov    -0x158(%rbp),%rcx
    a377:	mov    -0x150(%rbp),%r10
    a37e:	mov    -0x168(%rbp),%rsi
    a385:	jmpq   9280 <inflate+0x1a0>
    a38a:	test   %r11d,%r11d
    a38d:	je     ab02 <inflate+0x1a22>
    a393:	lea    0x1(%r8),%rdi
    a397:	movzbl (%r8),%edx
    a39b:	shl    %cl,%rdx
    a39e:	add    %rdx,%r10
    a3a1:	add    $0xffffffff,%r11d
    a3a5:	add    $0x8,%ecx
    a3a8:	mov    %rdi,%r8
    a3ab:	cmp    $0xf,%ecx
    a3ae:	jbe    a38a <inflate+0x12aa>
    a3b0:	movslq 0x10(%r12),%rdx
    a3b5:	and    $0x4,%edx
    a3b8:	test   %edx,%edx
    a3ba:	jg     ab0a <inflate+0x1a2a>
    a3c0:	xor    %ecx,%ecx
    a3c2:	mov    %rcx,%r10
    a3c5:	jmpq   97bf <inflate+0x6df>
    a3ca:	mov    -0x158(%rbp),%rcx
    a3d1:	mov    -0x150(%rbp),%r10
    a3d8:	mov    -0x168(%rbp),%rsi
    a3df:	jmpq   9280 <inflate+0x1a0>
    a3e4:	test   %r11d,%r11d
    a3e7:	je     ab23 <inflate+0x1a43>
    a3ed:	mov    %r10,-0x150(%rbp)
    a3f4:	mov    %rcx,-0x158(%rbp)
    a3fb:	xor    %ecx,%ecx
    a3fd:	jmpq   ab68 <inflate+0x1a88>
    a402:	xor    %r11d,%r11d
    a405:	mov    -0x168(%rbp),%rsi
    a40c:	jmpq   9280 <inflate+0x1a0>
    a411:	test   %r11d,%r11d
    a414:	je     ab7b <inflate+0x1a9b>
    a41a:	lea    0x1(%r8),%rsi
    a41e:	movzbl (%r8),%edx
    a422:	shl    %cl,%rdx
    a425:	add    %rdx,%r10
    a428:	add    $0x8,%ecx
    a42b:	add    $0xffffffff,%r11d
    a42f:	mov    %rsi,%r8
    a432:	cmp    $0xf,%ecx
    a435:	jbe    a411 <inflate+0x1331>
    a437:	mov    %r10d,0x5c(%r12)
    a43c:	mov    0x30(%r12),%rcx
    a441:	test   %rcx,%rcx
    a444:	je     a44a <inflate+0x136a>
    a446:	mov    %r10d,0x20(%rcx)
    a44a:	movslq 0x18(%r12),%rcx
    a44f:	and    $0x200,%ecx
    a455:	test   %ecx,%ecx
    a457:	jg     ab8a <inflate+0x1aaa>
    a45d:	xor    %ecx,%ecx
    a45f:	mov    %rcx,%r10
    a462:	jmpq   9a2e <inflate+0x94e>
    a467:	mov    0x5c(%r12),%esi
    a46c:	cmp    %esi,%r11d
    a46f:	jb     aba4 <inflate+0x1ac4>
    a475:	mov    %rsi,%rdx
    a478:	jmpq   aba7 <inflate+0x1ac7>
    a47d:	test   %r11d,%r11d
    a480:	je     abf9 <inflate+0x1b19>
    a486:	mov    %r10,-0x150(%rbp)
    a48d:	mov    %rcx,-0x158(%rbp)
    a494:	xor    %ecx,%ecx
    a496:	jmpq   ac1d <inflate+0x1b3d>
    a49b:	xor    %r11d,%r11d
    a49e:	mov    -0x168(%rbp),%rsi
    a4a5:	jmpq   9280 <inflate+0x1a0>
    a4aa:	movslq 0x10(%r12),%rcx
    a4af:	and    $0x4,%ecx
    a4b2:	test   %ecx,%ecx
    a4b4:	jle    9ad1 <inflate+0x9f1>
    a4ba:	mov    %r10b,-0x1c4(%rbp)
    a4c1:	mov    %r10,%rax
    a4c4:	shr    $0x8,%rax
    a4c8:	mov    %al,-0x1c3(%rbp)
    a4ce:	mov    %r10,%rax
    a4d1:	shr    $0x10,%rax
    a4d5:	mov    %al,-0x1c2(%rbp)
    a4db:	shr    $0x18,%r10
    a4df:	mov    %r10b,-0x1c1(%rbp)
    a4e6:	mov    0x20(%r12),%rdi
    a4eb:	lea    -0x1c4(%rbp),%rsi
    a4f2:	mov    $0x4,%edx
    a4f7:	mov    %r15,-0x128(%rbp)
    a4fe:	mov    %r14,-0xa8(%rbp)
    a505:	mov    %r13,-0xd0(%rbp)
    a50c:	mov    %r8,%r13
    a50f:	mov    %r11,%r14
    a512:	callq  20d0 <crc32@plt>
    a517:	mov    %rax,0x20(%r12)
    a51c:	mov    %r13,%r8
    a51f:	mov    %r14,%r11
    a522:	mov    -0xd0(%rbp),%r13
    a529:	mov    -0xa8(%rbp),%r14
    a530:	mov    -0x1c0(%rbp),%r9
    a537:	mov    -0x148(%rbp),%rax
    a53e:	mov    -0x128(%rbp),%r15
    a545:	jmpq   9ad1 <inflate+0x9f1>
    a54a:	xor    %r11d,%r11d
    a54d:	jmpq   9280 <inflate+0x1a0>
    a552:	lea    0xa618(%rip),%rdx        # 14b71 <order.1+0x3d>
    a559:	mov    %rdx,0x30(%rbx)
    a55d:	movl   $0x3f51,0x8(%r12)
    a566:	jmpq   91f6 <inflate+0x116>
    a56b:	lea    0xa62e(%rip),%rdx        # 14ba0 <order.1+0x6c>
    a572:	mov    %rdx,0x30(%rbx)
    a576:	movl   $0x3f51,0x8(%r12)
    a57f:	jmpq   91f6 <inflate+0x116>
    a584:	movslq 0x10(%r12),%rax
    a589:	and    $0x4,%eax
    a58c:	test   %eax,%eax
    a58e:	jg     ac51 <inflate+0x1b71>
    a594:	mov    %r15,-0x128(%rbp)
    a59b:	mov    %r14,-0xa8(%rbp)
    a5a2:	mov    %r13,-0xd0(%rbp)
    a5a9:	jmpq   9b67 <inflate+0xa87>
    a5ae:	test   %r11d,%r11d
    a5b1:	je     acab <inflate+0x1bcb>
    a5b7:	movzbl (%r8),%edx
    a5bb:	shl    %cl,%rdx
    a5be:	add    %rdx,%r10
    a5c1:	add    $0x1,%r8
    a5c5:	add    $0xffffffff,%r11d
    a5c9:	add    $0x8,%ecx
    a5cc:	cmp    $0xf,%ecx
    a5cf:	jbe    a5ae <inflate+0x14ce>
    a5d1:	movslq 0x10(%r12),%rdx
    a5d6:	and    $0x2,%edx
    a5d9:	test   %edx,%edx
    a5db:	jg     acb3 <inflate+0x1bd3>
    a5e1:	movl   $0x0,0x18(%r12)
    a5ea:	mov    0x30(%r12),%rdx
    a5ef:	test   %rdx,%rdx
    a5f2:	je     a5fb <inflate+0x151b>
    a5f4:	movl   $0xffffffff,0x48(%rdx)
    a5fb:	movslq 0x10(%r12),%rdx
    a600:	and    $0x1,%edx
    a603:	test   %edx,%edx
    a605:	jg     ad50 <inflate+0x1c70>
    a60b:	lea    0xa548(%rip),%rdx        # 14b5a <order.1+0x26>
    a612:	mov    %rdx,0x30(%rbx)
    a616:	movl   $0x3f51,0x8(%r12)
    a61f:	jmpq   91f6 <inflate+0x116>
    a624:	mov    %rbx,-0x178(%rbp)
    a62b:	mov    0x8c(%r12),%eax
    a633:	mov    %r14,-0x110(%rbp)
    a63a:	lea    0x1(%rax),%ebx
    a63d:	mov    %ebx,0x8c(%r12)
    a645:	shr    %cl,%r10
    a648:	neg    %ecx
    a64a:	add    %r9d,%ecx
    a64d:	mov    -0x1b0(%rbp),%rbx
    a654:	mov    %dx,(%rbx,%rax,2)
    a658:	mov    -0x178(%rbp),%rbx
    a65f:	mov    0x88(%r12),%eax
    a667:	add    0x84(%r12),%eax
    a66f:	cmp    0x8c(%r12),%eax
    a677:	ja     ad88 <inflate+0x1ca8>
    a67d:	mov    -0x110(%rbp),%r14
    a684:	mov    -0x148(%rbp),%rax
    a68b:	mov    -0x1b0(%rbp),%r9
    a692:	mov    0x8(%r12),%edx
    a697:	cmp    $0x3f51,%edx
    a69d:	jne    948e <inflate+0x3ae>
    a6a3:	mov    -0x1c0(%rbp),%r9
    a6aa:	mov    -0x168(%rbp),%rsi
    a6b1:	jmpq   91f6 <inflate+0x116>
    a6b6:	test   %r11d,%r11d
    a6b9:	je     ad9b <inflate+0x1cbb>
    a6bf:	lea    0x1(%r8),%rdi
    a6c3:	movzbl (%r8),%esi
    a6c7:	shl    %cl,%rsi
    a6ca:	add    %rsi,%r10
    a6cd:	add    $0x8,%ecx
    a6d0:	add    $0xffffffff,%r11d
    a6d4:	mov    %rdi,%r8
    a6d7:	mov    0x64(%r12),%esi
    a6dc:	cmp    %ecx,%esi
    a6de:	ja     a6b6 <inflate+0x15d6>
    a6e0:	mov    %rsi,%rdi
    a6e3:	mov    %rcx,%rsi
    a6e6:	mov    %rdi,%rcx
    a6e9:	mov    %rdx,%rdi
    a6ec:	shl    %cl,%edi
    a6ee:	add    $0xffffffff,%edi
    a6f1:	and    %r10d,%edi
    a6f4:	add    0x5c(%r12),%edi
    a6f9:	mov    %edi,0x5c(%r12)
    a6fe:	mov    %rcx,%rdi
    a701:	add    0x1bec(%r12),%edi
    a709:	mov    %edi,0x1bec(%r12)
    a711:	shr    %cl,%r10
    a714:	neg    %ecx
    a716:	add    %esi,%ecx
    a718:	jmpq   9c42 <inflate+0xb62>
    a71d:	test   %r11d,%r11d
    a720:	je     adaa <inflate+0x1cca>
    a726:	mov    %rdi,%rcx
    a729:	movzbl (%r8),%esi
    a72d:	shl    %cl,%rsi
    a730:	add    %rsi,%r10
    a733:	add    $0x1,%r8
    a737:	add    $0x8,%ecx
    a73a:	add    $0xffffffff,%r11d
    a73e:	mov    %rcx,%rdi
    a741:	mov    (%r9),%ecx
    a744:	mov    %rdx,%rsi
    a747:	shl    %cl,%esi
    a749:	lea    -0x1(%rsi),%ecx
    a74c:	and    %r10d,%ecx
    a74f:	mov    %ecx,%ecx
    a751:	mov    0x70(%r12),%rsi
    a756:	mov    (%rsi,%rcx,4),%esi
    a759:	mov    %esi,-0x1cc(%rbp)
    a75f:	mov    %rsi,%rcx
    a762:	shr    $0x8,%ecx
    a765:	movzbl %cl,%ecx
    a768:	cmp    %ecx,%edi
    a76a:	jb     a71d <inflate+0x163d>
    a76c:	movzbl %sil,%ecx
    a770:	and    $0xf0,%ecx
    a776:	test   %ecx,%ecx
    a778:	je     adbc <inflate+0x1cdc>
    a77e:	movzbl -0x1cb(%rbp),%ecx
    a785:	mov    %rcx,%rsi
    a788:	add    0x1bec(%r12),%esi
    a790:	mov    %esi,0x1bec(%r12)
    a798:	shr    %cl,%r10
    a79b:	neg    %ecx
    a79d:	add    %edi,%ecx
    a79f:	movzbl -0x1cc(%rbp),%esi
    a7a6:	mov    %rsi,%rdi
    a7a9:	and    $0x40,%edi
    a7ac:	test   %edi,%edi
    a7ae:	jg     adce <inflate+0x1cee>
    a7b4:	movzwl -0x1ca(%rbp),%edi
    a7bb:	mov    %edi,0x60(%r12)
    a7c0:	and    $0xf,%esi
    a7c3:	mov    %esi,0x64(%r12)
    a7c8:	movl   $0x3f4b,0x8(%r12)
    a7d1:	jmpq   9c6c <inflate+0xb8c>
    a7d6:	test   %r11d,%r11d
    a7d9:	je     adee <inflate+0x1d0e>
    a7df:	movzbl (%r8),%esi
    a7e3:	shl    %cl,%rsi
    a7e6:	add    %rsi,%r10
    a7e9:	add    $0x1,%r8
    a7ed:	add    $0x8,%ecx
    a7f0:	add    $0xffffffff,%r11d
    a7f4:	mov    0x64(%r12),%esi
    a7f9:	cmp    %ecx,%esi
    a7fb:	ja     a7d6 <inflate+0x16f6>
    a7fd:	mov    %rsi,%rdi
    a800:	mov    %rcx,%rsi
    a803:	mov    %rdi,%rcx
    a806:	shl    %cl,%edx
    a808:	add    $0xffffffff,%edx
    a80b:	and    %r10d,%edx
    a80e:	add    0x60(%r12),%edx
    a813:	mov    %edx,0x60(%r12)
    a818:	mov    %rcx,%rdx
    a81b:	add    0x1bec(%r12),%edx
    a823:	mov    %edx,0x1bec(%r12)
    a82b:	shr    %cl,%r10
    a82e:	neg    %ecx
    a830:	add    %esi,%ecx
    a832:	jmpq   9c79 <inflate+0xb99>
    a837:	mov    %rdi,%rbx
    a83a:	jmpq   9280 <inflate+0x1a0>
    a83f:	mov    %r13,%rbx
    a842:	sub    %r14d,%ebx
    a845:	add    %edx,%ebx
    a847:	mov    0x40(%r12),%edx
    a84c:	cmp    %ebx,%edx
    a84e:	jb     adfd <inflate+0x1d1d>
    a854:	mov    0x44(%r12),%edx
    a859:	cmp    %edx,%ebx
    a85b:	ja     ae29 <inflate+0x1d49>
    a861:	sub    %ebx,%edx
    a863:	mov    %edx,%edx
    a865:	add    0x48(%r12),%rdx
    a86a:	jmpq   ae4d <inflate+0x1d6d>
    a86f:	add    $0x1,%rdx
    a873:	movzbl (%rdx),%edi
    a876:	mov    %dil,(%r15)
    a879:	add    $0x1,%r15
    a87d:	add    $0xffffffff,%ecx
    a880:	test   %ecx,%ecx
    a882:	jne    a86f <inflate+0x178f>
    a884:	sub    %ebx,%r13d
    a887:	mov    0x5c(%r12),%ecx
    a88c:	test   %ecx,%ecx
    a88e:	je     ae67 <inflate+0x1d87>
    a894:	mov    -0xe8(%rbp),%rcx
    a89b:	mov    -0x80(%rbp),%rbx
    a89f:	jmpq   91f6 <inflate+0x116>
    a8a4:	test   %r11d,%r11d
    a8a7:	je     ae80 <inflate+0x1da0>
    a8ad:	lea    0x1(%r8),%rdi
    a8b1:	movzbl (%r8),%edx
    a8b5:	shl    %cl,%rdx
    a8b8:	add    %rdx,%r10
    a8bb:	add    $0xffffffff,%r11d
    a8bf:	add    $0x8,%ecx
    a8c2:	mov    %rdi,%r8
    a8c5:	cmp    $0x1f,%ecx
    a8c8:	jbe    a8a4 <inflate+0x17c4>
    a8ca:	mov    %r14,%rdx
    a8cd:	sub    %r13d,%edx
    a8d0:	mov    %edx,%esi
    a8d2:	mov    %rsi,%rdi
    a8d5:	add    0x28(%rbx),%rdi
    a8d9:	mov    %rdi,0x28(%rbx)
    a8dd:	add    0x28(%r12),%rsi
    a8e2:	mov    %rsi,0x28(%r12)
    a8e7:	movslq 0x10(%r12),%rsi
    a8ec:	and    $0x4,%esi
    a8ef:	test   %esi,%esi
    a8f1:	jg     ae88 <inflate+0x1da8>
    a8f7:	movslq 0x10(%r12),%rdx
    a8fc:	and    $0x4,%edx
    a8ff:	test   %edx,%edx
    a901:	jg     aed6 <inflate+0x1df6>
    a907:	xor    %ecx,%ecx
    a909:	mov    %rcx,%r10
    a90c:	mov    %r13,%r14
    a90f:	jmpq   9d14 <inflate+0xc34>
    a914:	xor    %r11d,%r11d
    a917:	mov    -0x168(%rbp),%rsi
    a91e:	jmpq   9280 <inflate+0x1a0>
    a923:	xor    %ecx,%ecx
    a925:	mov    %rcx,%r10
    a928:	jmpq   926b <inflate+0x18b>
    a92d:	mov    $0x40,%edx
    a932:	mov    0x8(%r12),%r9d
    a937:	cmp    $0x3f3f,%r9d
    a93e:	je     af01 <inflate+0x1e21>
    a944:	xor    %ecx,%ecx
    a946:	jmpq   af06 <inflate+0x1e26>
    a94b:	xor    %r11d,%r11d
    a94e:	jmpq   9280 <inflate+0x1a0>
    a953:	test   %edx,%edx
    a955:	je     a9e6 <inflate+0x1906>
    a95b:	cmp    $0x1,%edx
    a95e:	jne    a9ef <inflate+0x190f>
    a964:	mov    %r12,%rdi
    a967:	mov    %rbx,-0x78(%rbp)
    a96b:	mov    %r14,-0xa8(%rbp)
    a972:	mov    %r13,-0xd8(%rbp)
    a979:	mov    %r8,-0x58(%rbp)
    a97d:	mov    %r11,-0x110(%rbp)
    a984:	mov    %rcx,%rbx
    a987:	mov    %r10,%r13
    a98a:	mov    %rsi,%r14
    a98d:	callq  c380 <fixedtables>
    a992:	cmp    $0x6,%r14d
    a996:	movl   $0x3f47,0x8(%r12)
    a99f:	je     af61 <inflate+0x1e81>
    a9a5:	mov    %rbx,%rcx
    a9a8:	mov    %r14,%rsi
    a9ab:	mov    %r13,%r10
    a9ae:	mov    -0x110(%rbp),%r11
    a9b5:	mov    -0x58(%rbp),%r8
    a9b9:	mov    -0xd8(%rbp),%r13
    a9c0:	mov    -0xa8(%rbp),%r14
    a9c7:	mov    -0x78(%rbp),%rbx
    a9cb:	mov    -0x1c0(%rbp),%r9
    a9d2:	mov    -0x148(%rbp),%rax
    a9d9:	jmp    a9ef <inflate+0x190f>
    a9db:	movl   $0x3f44,0x8(%r12)
    a9e4:	jmp    a9ef <inflate+0x190f>
    a9e6:	movl   $0x3f41,0x8(%r12)
    a9ef:	shr    $0x3,%r10
    a9f3:	add    $0xfffffffd,%ecx
    a9f6:	jmpq   91f6 <inflate+0x116>
    a9fb:	movl   $0xffffffff,0x1bec(%r12)
    aa07:	mov    %r15,%rax
    aa0a:	mov    %rdx,%r15
    aa0d:	mov    %r13,%r9
    aa10:	mov    %rdi,%r13
    aa13:	mov    -0x168(%rbp),%rsi
    aa1a:	jmpq   91f6 <inflate+0x116>
    aa1f:	mov    %rdi,%rcx
    aa22:	mov    -0x140(%rbp),%rax
    aa29:	xor    %r11d,%r11d
    aa2c:	mov    -0x168(%rbp),%rsi
    aa33:	jmpq   9280 <inflate+0x1a0>
    aa38:	movzbl %sil,%eax
    aa3c:	and    $0xf0,%eax
    aa41:	test   %eax,%eax
    aa43:	jne    a081 <inflate+0xfa1>
    aa49:	mov    %esi,-0x1c8(%rbp)
    aa4f:	jmpq   afb8 <inflate+0x1ed8>
    aa54:	movl   $0x3f4d,0x8(%r12)
    aa5d:	mov    -0x140(%rbp),%rax
    aa64:	mov    -0x168(%rbp),%rsi
    aa6b:	jmpq   91f6 <inflate+0x116>
    aa70:	movl   $0xffffffff,0x1bec(%r12)
    aa7c:	movl   $0x3f3f,0x8(%r12)
    aa85:	mov    -0x140(%rbp),%rax
    aa8c:	mov    -0x168(%rbp),%rsi
    aa93:	jmpq   91f6 <inflate+0x116>
    aa98:	lea    0xa20c(%rip),%rax        # 14cab <order.1+0x177>
    aa9f:	mov    %rax,0x30(%rbx)
    aaa3:	movl   $0x3f51,0x8(%r12)
    aaac:	mov    -0x140(%rbp),%rax
    aab3:	mov    -0x168(%rbp),%rsi
    aaba:	jmpq   91f6 <inflate+0x116>
    aabf:	lea    0xa15b(%rip),%rcx        # 14c21 <order.1+0xed>
    aac6:	mov    %rcx,0x30(%rbx)
    aaca:	movl   $0x3f51,0x8(%r12)
    aad3:	mov    -0x108(%rbp),%r11
    aada:	mov    -0xe8(%rbp),%r8
    aae1:	mov    -0xf8(%rbp),%r10
    aae8:	mov    -0x180(%rbp),%rcx
    aaef:	mov    -0x1c0(%rbp),%r9
    aaf6:	mov    -0x168(%rbp),%rsi
    aafd:	jmpq   91f6 <inflate+0x116>
    ab02:	xor    %r11d,%r11d
    ab05:	jmpq   9280 <inflate+0x1a0>
    ab0a:	movzwl 0x20(%r12),%edx
    ab10:	cmp    %r10,%rdx
    ab13:	jne    b01f <inflate+0x1f3f>
    ab19:	xor    %ecx,%ecx
    ab1b:	mov    %rcx,%r10
    ab1e:	jmpq   97bf <inflate+0x6df>
    ab23:	xor    %r11d,%r11d
    ab26:	mov    -0x168(%rbp),%rsi
    ab2d:	jmpq   9280 <inflate+0x1a0>
    ab32:	mov    0x38(%rdx),%rdi
    ab36:	test   %rdi,%rdi
    ab39:	je     ab53 <inflate+0x1a73>
    ab3b:	mov    0x5c(%r12),%esi
    ab40:	mov    0x40(%rdx),%edx
    ab43:	cmp    %esi,%edx
    ab45:	jbe    ab53 <inflate+0x1a73>
    ab47:	lea    0x1(%rsi),%edx
    ab4a:	mov    %edx,0x5c(%r12)
    ab4f:	mov    %r10b,(%rsi,%rdi,1)
    ab53:	add    $0x1,%ecx
    ab56:	test   %r10b,%r10b
    ab59:	je     9769 <inflate+0x689>
    ab5f:	cmp    %r11d,%ecx
    ab62:	jae    9769 <inflate+0x689>
    ab68:	mov    %ecx,%edx
    ab6a:	movzbl (%r8,%rdx,1),%r10d
    ab6f:	mov    0x30(%r12),%rdx
    ab74:	test   %rdx,%rdx
    ab77:	jne    ab32 <inflate+0x1a52>
    ab79:	jmp    ab53 <inflate+0x1a73>
    ab7b:	xor    %r11d,%r11d
    ab7e:	mov    -0x168(%rbp),%rsi
    ab85:	jmpq   9280 <inflate+0x1a0>
    ab8a:	movslq 0x10(%r12),%rcx
    ab8f:	and    $0x4,%ecx
    ab92:	test   %ecx,%ecx
    ab94:	jg     b038 <inflate+0x1f58>
    ab9a:	xor    %ecx,%ecx
    ab9c:	mov    %rcx,%r10
    ab9f:	jmpq   9a2e <inflate+0x94e>
    aba4:	mov    %r11,%rdx
    aba7:	test   %edx,%edx
    aba9:	je     abe0 <inflate+0x1b00>
    abab:	mov    0x30(%r12),%rdi
    abb0:	test   %rdi,%rdi
    abb3:	jne    b0a5 <inflate+0x1fc5>
    abb9:	movslq 0x18(%r12),%rsi
    abbe:	and    $0x200,%esi
    abc4:	test   %esi,%esi
    abc6:	jg     b0be <inflate+0x1fde>
    abcc:	sub    %edx,%r11d
    abcf:	mov    0x5c(%r12),%esi
    abd4:	sub    %edx,%esi
    abd6:	mov    %esi,0x5c(%r12)
    abdb:	mov    %edx,%edx
    abdd:	add    %rdx,%r8
    abe0:	mov    0x5c(%r12),%edx
    abe5:	test   %edx,%edx
    abe7:	je     9a4a <inflate+0x96a>
    abed:	mov    -0x168(%rbp),%rsi
    abf4:	jmpq   9280 <inflate+0x1a0>
    abf9:	xor    %r11d,%r11d
    abfc:	mov    -0x168(%rbp),%rsi
    ac03:	jmpq   9280 <inflate+0x1a0>
    ac08:	add    $0x1,%ecx
    ac0b:	test   %r10b,%r10b
    ac0e:	je     984f <inflate+0x76f>
    ac14:	cmp    %r11d,%ecx
    ac17:	jae    984f <inflate+0x76f>
    ac1d:	mov    %ecx,%edx
    ac1f:	movzbl (%r8,%rdx,1),%r10d
    ac24:	mov    0x30(%r12),%rdx
    ac29:	test   %rdx,%rdx
    ac2c:	je     ac08 <inflate+0x1b28>
    ac2e:	mov    0x28(%rdx),%rdi
    ac32:	test   %rdi,%rdi
    ac35:	je     ac08 <inflate+0x1b28>
    ac37:	mov    0x5c(%r12),%esi
    ac3c:	mov    0x30(%rdx),%edx
    ac3f:	cmp    %esi,%edx
    ac41:	jbe    ac08 <inflate+0x1b28>
    ac43:	lea    0x1(%rsi),%edx
    ac46:	mov    %edx,0x5c(%r12)
    ac4b:	mov    %r10b,(%rsi,%rdi,1)
    ac4f:	jmp    ac08 <inflate+0x1b28>
    ac51:	mov    %r10b,-0x1c4(%rbp)
    ac58:	shr    $0x8,%r10
    ac5c:	mov    %r10b,-0x1c3(%rbp)
    ac63:	mov    0x20(%r12),%rdi
    ac68:	lea    -0x1c4(%rbp),%rsi
    ac6f:	mov    $0x2,%edx
    ac74:	mov    %r15,-0x128(%rbp)
    ac7b:	mov    %r14,-0xa8(%rbp)
    ac82:	mov    %r13,-0xd0(%rbp)
    ac89:	mov    %r8,%r13
    ac8c:	mov    %r11,%r14
    ac8f:	callq  20d0 <crc32@plt>
    ac94:	mov    %rax,0x20(%r12)
    ac99:	mov    %r13,%r8
    ac9c:	mov    %r14,%r11
    ac9f:	mov    -0x1c0(%rbp),%r9
    aca6:	jmpq   9b67 <inflate+0xa87>
    acab:	xor    %r11d,%r11d
    acae:	jmpq   9280 <inflate+0x1a0>
    acb3:	cmp    $0x8b1f,%r10
    acba:	jne    a5e1 <inflate+0x1501>
    acc0:	mov    0x38(%r12),%ecx
    acc5:	test   %ecx,%ecx
    acc7:	jne    acd2 <inflate+0x1bf2>
    acc9:	movl   $0xf,0x38(%r12)
    acd2:	xor    %edi,%edi
    acd4:	mov    %rdi,%rsi
    acd7:	mov    %rdi,%rdx
    acda:	mov    %rbx,-0x60(%rbp)
    acde:	mov    %r8,-0x50(%rbp)
    ace2:	mov    %r11,-0x100(%rbp)
    ace9:	mov    %rax,%rbx
    acec:	callq  20d0 <crc32@plt>
    acf1:	mov    %rax,%rdi
    acf4:	mov    %rdi,0x20(%r12)
    acf9:	movb   $0x1f,-0x1c4(%rbp)
    ad00:	movb   $0x8b,-0x1c3(%rbp)
    ad07:	lea    -0x1c4(%rbp),%rsi
    ad0e:	mov    $0x2,%edx
    ad13:	callq  20d0 <crc32@plt>
    ad18:	mov    %rax,0x20(%r12)
    ad1d:	movl   $0x3f35,0x8(%r12)
    ad26:	mov    %rbx,%rax
    ad29:	mov    -0x100(%rbp),%r11
    ad30:	mov    -0x50(%rbp),%r8
    ad34:	mov    -0x60(%rbp),%rbx
    ad38:	mov    -0x1c0(%rbp),%r9
    ad3f:	xor    %ecx,%ecx
    ad41:	mov    -0x168(%rbp),%rsi
    ad48:	mov    %rcx,%r10
    ad4b:	jmpq   91f6 <inflate+0x116>
    ad50:	mov    %r10,%rsi
    ad53:	shr    $0x8,%rsi
    ad57:	movzbl %r10b,%edx
    ad5b:	shl    $0x8,%edx
    ad5e:	mov    %edx,%edx
    ad60:	lea    (%rsi,%rdx,1),%rdi
    ad64:	xchg   %rax,%rdi
    ad66:	xor    %edx,%edx
    ad68:	mov    $0x1f,%esi
    ad6d:	div    %rsi
    ad70:	test   %rdx,%rdx
    ad73:	je     b151 <inflate+0x2071>
    ad79:	mov    %rdi,%rax
    ad7c:	mov    -0x168(%rbp),%rsi
    ad83:	jmpq   a60b <inflate+0x152b>
    ad88:	mov    -0x110(%rbp),%r14
    ad8f:	mov    -0x148(%rbp),%rax
    ad96:	jmpq   b1d1 <inflate+0x20f1>
    ad9b:	xor    %r11d,%r11d
    ad9e:	mov    -0x168(%rbp),%rsi
    ada5:	jmpq   9280 <inflate+0x1a0>
    adaa:	mov    %rdi,%rcx
    adad:	xor    %r11d,%r11d
    adb0:	mov    -0x168(%rbp),%rsi
    adb7:	jmpq   9280 <inflate+0x1a0>
    adbc:	mov    %esi,-0x1c8(%rbp)
    adc2:	mov    %rax,-0x140(%rbp)
    adc9:	jmpq   b23f <inflate+0x215f>
    adce:	lea    0x9ef2(%rip),%rdx        # 14cc7 <order.1+0x193>
    add5:	mov    %rdx,0x30(%rbx)
    add9:	movl   $0x3f51,0x8(%r12)
    ade2:	mov    -0x168(%rbp),%rsi
    ade9:	jmpq   91f6 <inflate+0x116>
    adee:	xor    %r11d,%r11d
    adf1:	mov    -0x168(%rbp),%rsi
    adf8:	jmpq   9280 <inflate+0x1a0>
    adfd:	movslq 0x1be8(%r12),%rdx
    ae05:	test   %edx,%edx
    ae07:	je     a854 <inflate+0x1774>
    ae0d:	lea    0x9ec9(%rip),%rdx        # 14cdd <order.1+0x1a9>
    ae14:	mov    %rdx,0x30(%rdi)
    ae18:	movl   $0x3f51,0x8(%r12)
    ae21:	mov    %rdi,%rbx
    ae24:	jmpq   91f6 <inflate+0x116>
    ae29:	mov    %rdi,-0x88(%rbp)
    ae30:	mov    %rdx,%rdi
    ae33:	sub    %ebx,%edi
    ae35:	add    0x3c(%r12),%edi
    ae3a:	mov    %edi,%edi
    ae3c:	add    0x48(%r12),%rdi
    ae41:	sub    %edx,%ebx
    ae43:	mov    %rdi,%rdx
    ae46:	mov    -0x88(%rbp),%rdi
    ae4d:	mov    %rdi,-0x80(%rbp)
    ae51:	mov    0x5c(%r12),%edi
    ae56:	cmp    %ebx,%edi
    ae58:	jb     b2a6 <inflate+0x21c6>
    ae5e:	mov    -0x80(%rbp),%rdi
    ae62:	jmpq   9cb3 <inflate+0xbd3>
    ae67:	movl   $0x3f48,0x8(%r12)
    ae70:	mov    -0xe8(%rbp),%rcx
    ae77:	mov    -0x80(%rbp),%rbx
    ae7b:	jmpq   91f6 <inflate+0x116>
    ae80:	xor    %r11d,%r11d
    ae83:	jmpq   9280 <inflate+0x1a0>
    ae88:	cmp    %r14d,%r13d
    ae8b:	je     a8f7 <inflate+0x1817>
    ae91:	movslq 0x18(%r12),%rax
    ae96:	test   %eax,%eax
    ae98:	jne    b2b2 <inflate+0x21d2>
    ae9e:	mov    %edx,%eax
    aea0:	mov    %r15,%rsi
    aea3:	sub    %rax,%rsi
    aea6:	mov    0x20(%r12),%rdi
    aeab:	mov    %r10,-0x1a8(%rbp)
    aeb2:	mov    %r15,-0x170(%rbp)
    aeb9:	mov    %rcx,-0x1b8(%rbp)
    aec0:	mov    %r8,%r14
    aec3:	mov    %r11,%r15
    aec6:	callq  2230 <adler32@plt>
    aecb:	mov    %r14,%r8
    aece:	mov    %r15,%r11
    aed1:	jmpq   b2e5 <inflate+0x2205>
    aed6:	movslq 0x18(%r12),%rdx
    aedb:	test   %edx,%edx
    aedd:	je     b316 <inflate+0x2236>
    aee3:	mov    %r10,%rdx
    aee6:	mov    0x20(%r12),%rsi
    aeeb:	cmp    %rdx,%rsi
    aeee:	jne    b354 <inflate+0x2274>
    aef4:	xor    %ecx,%ecx
    aef6:	mov    %rcx,%r10
    aef9:	mov    %r13,%r14
    aefc:	jmpq   9d14 <inflate+0xc34>
    af01:	mov    $0x80,%ecx
    af06:	mov    $0x100,%edi
    af0b:	cmp    $0x3f47,%r9d
    af12:	je     af1f <inflate+0x1e3f>
    af14:	cmp    $0x3f42,%r9d
    af1b:	je     af1f <inflate+0x1e3f>
    af1d:	xor    %edi,%edi
    af1f:	add    %r10d,%edx
    af22:	add    %edx,%ecx
    af24:	add    %edi,%ecx
    af26:	mov    %ecx,0x58(%rbx)
    af29:	cmp    %r13d,%r15d
    af2c:	jne    af33 <inflate+0x1e53>
    af2e:	cmp    %r8d,%r14d
    af31:	je     af3c <inflate+0x1e5c>
    af33:	cmp    $0x4,%esi
    af36:	jne    b377 <inflate+0x2297>
    af3c:	test   %eax,%eax
    af3e:	jne    b38d <inflate+0x22ad>
    af44:	mov    $0xfffffffffffffffb,%rax
    af4b:	mov    -0x8(%rbp),%rbx
    af4f:	mov    -0x10(%rbp),%r12
    af53:	mov    -0x18(%rbp),%r13
    af57:	mov    -0x20(%rbp),%r14
    af5b:	mov    -0x28(%rbp),%r15
    af5f:	leaveq 
    af60:	retq   
    af61:	mov    %r13,%r10
    af64:	shr    $0x3,%r10
    af68:	lea    -0x3(%rbx),%ecx
    af6b:	mov    %r14,%rsi
    af6e:	mov    -0x110(%rbp),%r11
    af75:	mov    -0x58(%rbp),%r8
    af79:	mov    -0xd8(%rbp),%r13
    af80:	mov    -0xa8(%rbp),%r14
    af87:	mov    -0x78(%rbp),%rbx
    af8b:	mov    -0x148(%rbp),%rax
    af92:	jmpq   9280 <inflate+0x1a0>
    af97:	test   %r11d,%r11d
    af9a:	je     b3a3 <inflate+0x22c3>
    afa0:	mov    %rdi,%rcx
    afa3:	movzbl (%r8),%eax
    afa7:	shl    %cl,%rax
    afaa:	add    %rax,%r10
    afad:	add    $0x1,%r8
    afb1:	lea    0x8(%rcx),%edi
    afb4:	add    $0xffffffff,%r11d
    afb8:	movzbl -0x1c7(%rbp),%esi
    afbf:	movzbl -0x1c8(%rbp),%eax
    afc6:	lea    (%rsi,%rax,1),%ecx
    afc9:	mov    %rdx,%rax
    afcc:	shl    %cl,%eax
    afce:	add    $0xffffffff,%eax
    afd1:	and    %r10d,%eax
    afd4:	mov    %rsi,%rcx
    afd7:	shr    %cl,%eax
    afd9:	movzwl -0x1c6(%rbp),%esi
    afe0:	add    %esi,%eax
    afe2:	mov    %eax,%eax
    afe4:	mov    0x68(%r12),%rsi
    afe9:	mov    (%rsi,%rax,4),%eax
    afec:	mov    %eax,-0x1cc(%rbp)
    aff2:	shr    $0x8,%eax
    aff5:	movzbl %al,%eax
    aff8:	add    %ecx,%eax
    affa:	cmp    %edi,%eax
    affc:	ja     af97 <inflate+0x1eb7>
    affe:	shr    %cl,%r10
    b001:	sub    %ecx,%edi
    b003:	add    0x1bec(%r12),%ecx
    b00b:	mov    %ecx,0x1bec(%r12)
    b013:	mov    -0x1c0(%rbp),%r9
    b01a:	jmpq   a081 <inflate+0xfa1>
    b01f:	lea    0x9b93(%rip),%rdx        # 14bb9 <order.1+0x85>
    b026:	mov    %rdx,0x30(%rbx)
    b02a:	movl   $0x3f51,0x8(%r12)
    b033:	jmpq   91f6 <inflate+0x116>
    b038:	mov    %r10b,-0x1c4(%rbp)
    b03f:	shr    $0x8,%r10
    b043:	mov    %r10b,-0x1c3(%rbp)
    b04a:	mov    0x20(%r12),%rdi
    b04f:	lea    -0x1c4(%rbp),%rsi
    b056:	mov    $0x2,%edx
    b05b:	mov    %r14,-0xa0(%rbp)
    b062:	mov    %r13,-0xc8(%rbp)
    b069:	mov    %r8,%r13
    b06c:	mov    %r11,%r14
    b06f:	callq  20d0 <crc32@plt>
    b074:	mov    %rax,0x20(%r12)
    b079:	mov    %r13,%r8
    b07c:	mov    %r14,%r11
    b07f:	mov    -0xc8(%rbp),%r13
    b086:	mov    -0xa0(%rbp),%r14
    b08d:	mov    -0x1c0(%rbp),%r9
    b094:	mov    -0x148(%rbp),%rax
    b09b:	xor    %ecx,%ecx
    b09d:	mov    %rcx,%r10
    b0a0:	jmpq   9a2e <inflate+0x94e>
    b0a5:	mov    0x18(%rdi),%r9
    b0a9:	test   %r9,%r9
    b0ac:	jne    b3bc <inflate+0x22dc>
    b0b2:	mov    -0x1c0(%rbp),%r9
    b0b9:	jmpq   abb9 <inflate+0x1ad9>
    b0be:	movslq 0x10(%r12),%rsi
    b0c3:	and    $0x4,%esi
    b0c6:	test   %esi,%esi
    b0c8:	jle    abcc <inflate+0x1aec>
    b0ce:	mov    0x20(%r12),%rdi
    b0d3:	mov    %r8,%rsi
    b0d6:	mov    %rdx,%rax
    b0d9:	mov    %r15,-0x120(%rbp)
    b0e0:	mov    %rbx,-0x70(%rbp)
    b0e4:	mov    %r14,-0x98(%rbp)
    b0eb:	mov    %r13,-0xc0(%rbp)
    b0f2:	mov    %rcx,-0x160(%rbp)
    b0f9:	mov    %r11,%rbx
    b0fc:	mov    %r10,%r13
    b0ff:	mov    %r8,%r14
    b102:	mov    %rdx,%r15
    b105:	mov    %rax,%rdx
    b108:	callq  20d0 <crc32@plt>
    b10d:	mov    %rax,0x20(%r12)
    b112:	mov    %r15,%rdx
    b115:	mov    %r14,%r8
    b118:	mov    %r13,%r10
    b11b:	mov    %rbx,%r11
    b11e:	mov    -0x160(%rbp),%rcx
    b125:	mov    -0xc0(%rbp),%r13
    b12c:	mov    -0x98(%rbp),%r14
    b133:	mov    -0x70(%rbp),%rbx
    b137:	mov    -0x1c0(%rbp),%r9
    b13e:	mov    -0x148(%rbp),%rax
    b145:	mov    -0x120(%rbp),%r15
    b14c:	jmpq   abcc <inflate+0x1aec>
    b151:	mov    %r10,%rax
    b154:	and    $0xf,%eax
    b157:	cmp    $0x8,%eax
    b15a:	jne    b3eb <inflate+0x230b>
    b160:	mov    %r10,%rdx
    b163:	shr    $0x4,%rdx
    b167:	mov    %rdx,%rax
    b16a:	and    $0xf,%eax
    b16d:	lea    0x8(%rax),%esi
    b170:	mov    0x38(%r12),%eax
    b175:	test   %eax,%eax
    b177:	jne    b17e <inflate+0x209e>
    b179:	mov    %esi,0x38(%r12)
    b17e:	cmp    $0xf,%esi
    b181:	jbe    b40e <inflate+0x232e>
    b187:	lea    0x99fe(%rip),%rax        # 14b8c <order.1+0x58>
    b18e:	mov    %rax,0x30(%rbx)
    b192:	movl   $0x3f51,0x8(%r12)
    b19b:	add    $0xfffffffc,%ecx
    b19e:	mov    %rdi,%rax
    b1a1:	mov    %rdx,%r10
    b1a4:	mov    -0x168(%rbp),%rsi
    b1ab:	jmpq   91f6 <inflate+0x116>
    b1b0:	test   %r11d,%r11d
    b1b3:	je     b46e <inflate+0x238e>
    b1b9:	movzbl (%r8),%edx
    b1bd:	mov    %r9,%rcx
    b1c0:	shl    %cl,%rdx
    b1c3:	add    %rdx,%r10
    b1c6:	add    $0x1,%r8
    b1ca:	add    $0x8,%ecx
    b1cd:	add    $0xffffffff,%r11d
    b1d1:	mov    %rcx,%r9
    b1d4:	mov    (%rsi),%ecx
    b1d6:	mov    %rdi,%rdx
    b1d9:	shl    %cl,%edx
    b1db:	lea    -0x1(%rdx),%ecx
    b1de:	and    %r10d,%ecx
    b1e1:	mov    %ecx,%edx
    b1e3:	mov    0x68(%r12),%rcx
    b1e8:	mov    (%rcx,%rdx,4),%edx
    b1eb:	mov    %edx,-0x1cc(%rbp)
    b1f1:	mov    %rdx,%rcx
    b1f4:	shr    $0x8,%ecx
    b1f7:	movzbl %cl,%ecx
    b1fa:	cmp    %r9d,%ecx
    b1fd:	ja     b1b0 <inflate+0x20d0>
    b1ff:	shr    $0x10,%edx
    b202:	cmp    $0xf,%dx
    b206:	jbe    a624 <inflate+0x1544>
    b20c:	cmp    $0x10,%dx
    b210:	jne    b480 <inflate+0x23a0>
    b216:	mov    %r9,%rcx
    b219:	jmpq   b4b3 <inflate+0x23d3>
    b21e:	test   %r11d,%r11d
    b221:	je     b540 <inflate+0x2460>
    b227:	mov    %rdi,%rcx
    b22a:	movzbl (%r8),%eax
    b22e:	shl    %cl,%rax
    b231:	add    %rax,%r10
    b234:	add    $0x1,%r8
    b238:	lea    0x8(%rcx),%edi
    b23b:	add    $0xffffffff,%r11d
    b23f:	movzbl -0x1c7(%rbp),%esi
    b246:	movzbl -0x1c8(%rbp),%eax
    b24d:	lea    (%rsi,%rax,1),%ecx
    b250:	mov    %rdx,%rax
    b253:	shl    %cl,%eax
    b255:	add    $0xffffffff,%eax
    b258:	and    %r10d,%eax
    b25b:	mov    %rsi,%rcx
    b25e:	shr    %cl,%eax
    b260:	movzwl -0x1c6(%rbp),%esi
    b267:	add    %esi,%eax
    b269:	mov    %eax,%eax
    b26b:	mov    0x70(%r12),%rsi
    b270:	mov    (%rsi,%rax,4),%eax
    b273:	mov    %eax,-0x1cc(%rbp)
    b279:	shr    $0x8,%eax
    b27c:	movzbl %al,%eax
    b27f:	add    %ecx,%eax
    b281:	cmp    %edi,%eax
    b283:	ja     b21e <inflate+0x213e>
    b285:	shr    %cl,%r10
    b288:	sub    %ecx,%edi
    b28a:	add    0x1bec(%r12),%ecx
    b292:	mov    %ecx,0x1bec(%r12)
    b29a:	mov    -0x140(%rbp),%rax
    b2a1:	jmpq   a77e <inflate+0x169e>
    b2a6:	mov    %rdi,%rbx
    b2a9:	mov    -0x80(%rbp),%rdi
    b2ad:	jmpq   9cb3 <inflate+0xbd3>
    b2b2:	mov    %edx,%eax
    b2b4:	mov    %r15,%rsi
    b2b7:	sub    %rax,%rsi
    b2ba:	mov    0x20(%r12),%rdi
    b2bf:	mov    %r10,-0x1a8(%rbp)
    b2c6:	mov    %r15,-0x170(%rbp)
    b2cd:	mov    %rcx,-0x1b8(%rbp)
    b2d4:	mov    %r8,%r14
    b2d7:	mov    %r11,%r15
    b2da:	callq  20d0 <crc32@plt>
    b2df:	mov    %r14,%r8
    b2e2:	mov    %r15,%r11
    b2e5:	mov    %rax,0x20(%r12)
    b2ea:	mov    %rax,0x60(%rbx)
    b2ee:	mov    -0x1c0(%rbp),%r9
    b2f5:	mov    -0x1b8(%rbp),%rcx
    b2fc:	mov    -0x148(%rbp),%rax
    b303:	mov    -0x170(%rbp),%r15
    b30a:	mov    -0x1a8(%rbp),%r10
    b311:	jmpq   a8f7 <inflate+0x1817>
    b316:	mov    $0xff000000,%edx
    b31b:	and    %r10,%rdx
    b31e:	shr    $0x18,%rdx
    b322:	mov    %r10,%rsi
    b325:	and    $0xff0000,%rsi
    b32c:	shr    $0x8,%rsi
    b330:	add    %rdx,%rsi
    b333:	mov    %r10,%rdx
    b336:	and    $0xff00,%rdx
    b33d:	shl    $0x8,%rdx
    b341:	add    %rdx,%rsi
    b344:	movzbl %r10b,%edx
    b348:	shl    $0x18,%rdx
    b34c:	add    %rsi,%rdx
    b34f:	jmpq   aee6 <inflate+0x1e06>
    b354:	lea    0x99a0(%rip),%rdx        # 14cfb <order.1+0x1c7>
    b35b:	mov    %rdx,0x30(%rbx)
    b35f:	movl   $0x3f51,0x8(%r12)
    b368:	mov    -0x168(%rbp),%rsi
    b36f:	mov    %r13,%r14
    b372:	jmpq   91f6 <inflate+0x116>
    b377:	mov    -0x8(%rbp),%rbx
    b37b:	mov    -0x10(%rbp),%r12
    b37f:	mov    -0x18(%rbp),%r13
    b383:	mov    -0x20(%rbp),%r14
    b387:	mov    -0x28(%rbp),%r15
    b38b:	leaveq 
    b38c:	retq   
    b38d:	mov    -0x8(%rbp),%rbx
    b391:	mov    -0x10(%rbp),%r12
    b395:	mov    -0x18(%rbp),%r13
    b399:	mov    -0x20(%rbp),%r14
    b39d:	mov    -0x28(%rbp),%r15
    b3a1:	leaveq 
    b3a2:	retq   
    b3a3:	mov    %rdi,%rcx
    b3a6:	mov    -0x140(%rbp),%rax
    b3ad:	xor    %r11d,%r11d
    b3b0:	mov    -0x168(%rbp),%rsi
    b3b7:	jmpq   9280 <inflate+0x1a0>
    b3bc:	mov    0x20(%rdi),%eax
    b3bf:	mov    %r14,-0x98(%rbp)
    b3c6:	mov    %rax,%r14
    b3c9:	sub    %esi,%r14d
    b3cc:	mov    %r13,-0xc0(%rbp)
    b3d3:	lea    (%rdx,%r14,1),%r13d
    b3d7:	mov    0x24(%rdi),%edi
    b3da:	cmp    %r13d,%edi
    b3dd:	jb     b559 <inflate+0x2479>
    b3e3:	mov    %rdx,%rax
    b3e6:	jmpq   b55e <inflate+0x247e>
    b3eb:	lea    0x977f(%rip),%rax        # 14b71 <order.1+0x3d>
    b3f2:	mov    %rax,0x30(%rbx)
    b3f6:	movl   $0x3f51,0x8(%r12)
    b3ff:	mov    %rdi,%rax
    b402:	mov    -0x168(%rbp),%rsi
    b409:	jmpq   91f6 <inflate+0x116>
    b40e:	cmp    0x38(%r12),%esi
    b413:	ja     b187 <inflate+0x20a7>
    b419:	mov    %rsi,%rcx
    b41c:	mov    $0x1,%eax
    b421:	shl    %cl,%eax
    b423:	mov    %eax,0x1c(%r12)
    b428:	xor    %edi,%edi
    b42a:	mov    %rdi,%rsi
    b42d:	mov    %rdi,%rdx
    b430:	mov    %r14,-0x88(%rbp)
    b437:	mov    %r8,-0x50(%rbp)
    b43b:	mov    %r11,-0x100(%rbp)
    b442:	mov    %r10,%r14
    b445:	callq  2230 <adler32@plt>
    b44a:	mov    %rax,0x20(%r12)
    b44f:	mov    %rax,0x60(%rbx)
    b453:	and    $0x2000,%r14
    b45a:	test   %r14,%r14
    b45d:	jne    b5cf <inflate+0x24ef>
    b463:	pushq  -0x38(%rbp)
    b466:	popq   -0x48(%rbp)
    b469:	jmpq   b5d5 <inflate+0x24f5>
    b46e:	mov    %r9,%rcx
    b471:	xor    %r11d,%r11d
    b474:	mov    -0x168(%rbp),%rsi
    b47b:	jmpq   9280 <inflate+0x1a0>
    b480:	cmp    $0x11,%dx
    b484:	jne    b60f <inflate+0x252f>
    b48a:	mov    %r9,%rcx
    b48d:	jmpq   b638 <inflate+0x2558>
    b492:	test   %r11d,%r11d
    b495:	je     b672 <inflate+0x2592>
    b49b:	lea    0x1(%r8),%r9
    b49f:	movzbl (%r8),%edx
    b4a3:	shl    %cl,%rdx
    b4a6:	add    %rdx,%r10
    b4a9:	add    $0x8,%ecx
    b4ac:	add    $0xffffffff,%r11d
    b4b0:	mov    %r9,%r8
    b4b3:	movzbl -0x1cb(%rbp),%edx
    b4ba:	lea    0x2(%rdx),%r9d
    b4be:	cmp    %ecx,%r9d
    b4c1:	ja     b492 <inflate+0x23b2>
    b4c3:	mov    %rdx,%r9
    b4c6:	mov    %rcx,%rdx
    b4c9:	mov    %r9,%rcx
    b4cc:	shr    %cl,%r10
    b4cf:	neg    %ecx
    b4d1:	add    %edx,%ecx
    b4d3:	mov    0x8c(%r12),%edx
    b4db:	test   %edx,%edx
    b4dd:	je     b681 <inflate+0x25a1>
    b4e3:	add    $0xffffffff,%edx
    b4e6:	mov    %edx,%edx
    b4e8:	mov    -0x1b0(%rbp),%r9
    b4ef:	movzwl (%r9,%rdx,2),%edi
    b4f4:	mov    %r10,%rsi
    b4f7:	shr    $0x2,%rsi
    b4fb:	and    $0x3,%r10d
    b4ff:	lea    0x3(%r10),%edx
    b503:	add    $0xfffffffe,%ecx
    b506:	mov    %rsi,%r10
    b509:	mov    0x88(%r12),%esi
    b511:	add    0x84(%r12),%esi
    b519:	mov    %r14,-0x110(%rbp)
    b520:	mov    %rdx,%r14
    b523:	add    0x8c(%r12),%r14d
    b52b:	cmp    %r14d,%esi
    b52e:	jb     b6a1 <inflate+0x25c1>
    b534:	mov    %rcx,-0x1a8(%rbp)
    b53b:	jmpq   b6e8 <inflate+0x2608>
    b540:	mov    %rdi,%rcx
    b543:	mov    -0x140(%rbp),%rax
    b54a:	xor    %r11d,%r11d
    b54d:	mov    -0x168(%rbp),%rsi
    b554:	jmpq   9280 <inflate+0x1a0>
    b559:	sub    %eax,%esi
    b55b:	lea    (%rdi,%rsi,1),%eax
    b55e:	mov    %r14d,%esi
    b561:	lea    (%r9,%rsi,1),%rdi
    b565:	mov    %eax,%eax
    b567:	mov    %r8,%rsi
    b56a:	mov    %r15,-0x120(%rbp)
    b571:	mov    %rbx,-0x70(%rbp)
    b575:	mov    %rcx,-0x160(%rbp)
    b57c:	mov    %r8,%rbx
    b57f:	mov    %r11,%r13
    b582:	mov    %r10,%r14
    b585:	mov    %rdx,%r15
    b588:	mov    %rax,%rdx
    b58b:	callq  21f0 <memcpy@plt>
    b590:	mov    %r15,%rdx
    b593:	mov    %rbx,%r8
    b596:	mov    %r14,%r10
    b599:	mov    %r13,%r11
    b59c:	mov    -0x160(%rbp),%rcx
    b5a3:	mov    -0xc0(%rbp),%r13
    b5aa:	mov    -0x98(%rbp),%r14
    b5b1:	mov    -0x70(%rbp),%rbx
    b5b5:	mov    -0x1c0(%rbp),%r9
    b5bc:	mov    -0x148(%rbp),%rax
    b5c3:	mov    -0x120(%rbp),%r15
    b5ca:	jmpq   abb9 <inflate+0x1ad9>
    b5cf:	pushq  -0x40(%rbp)
    b5d2:	popq   -0x48(%rbp)
    b5d5:	mov    -0x48(%rbp),%rax
    b5d9:	mov    %eax,0x8(%r12)
    b5de:	mov    -0x100(%rbp),%r11
    b5e5:	mov    -0x50(%rbp),%r8
    b5e9:	mov    -0x88(%rbp),%r14
    b5f0:	mov    -0x1c0(%rbp),%r9
    b5f7:	mov    -0x148(%rbp),%rax
    b5fe:	xor    %ecx,%ecx
    b600:	mov    -0x168(%rbp),%rsi
    b607:	mov    %rcx,%r10
    b60a:	jmpq   91f6 <inflate+0x116>
    b60f:	mov    %r9,%rcx
    b612:	jmpq   b721 <inflate+0x2641>
    b617:	test   %r11d,%r11d
    b61a:	je     b75b <inflate+0x267b>
    b620:	lea    0x1(%r8),%rsi
    b624:	movzbl (%r8),%edx
    b628:	shl    %cl,%rdx
    b62b:	add    %rdx,%r10
    b62e:	add    $0x8,%ecx
    b631:	add    $0xffffffff,%r11d
    b635:	mov    %rsi,%r8
    b638:	movzbl -0x1cb(%rbp),%edx
    b63f:	lea    0x3(%rdx),%esi
    b642:	cmp    %ecx,%esi
    b644:	ja     b617 <inflate+0x2537>
    b646:	mov    %rcx,%rsi
    b649:	mov    %rdx,%rcx
    b64c:	mov    %r10,%rdx
    b64f:	shr    %cl,%rdx
    b652:	mov    %rdx,%r10
    b655:	shr    $0x3,%r10
    b659:	and    $0x7,%edx
    b65c:	add    $0x3,%edx
    b65f:	sub    %ecx,%esi
    b661:	lea    -0x3(%rsi),%ecx
    b664:	xor    %edi,%edi
    b666:	mov    -0x1b0(%rbp),%r9
    b66d:	jmpq   b509 <inflate+0x2429>
    b672:	xor    %r11d,%r11d
    b675:	mov    -0x168(%rbp),%rsi
    b67c:	jmpq   9280 <inflate+0x1a0>
    b681:	lea    0x95b2(%rip),%rdx        # 14c3a <order.1+0x106>
    b688:	mov    %rdx,0x30(%rbx)
    b68c:	movl   $0x3f51,0x8(%r12)
    b695:	mov    -0x1b0(%rbp),%r9
    b69c:	jmpq   a692 <inflate+0x15b2>
    b6a1:	lea    0x9592(%rip),%rdx        # 14c3a <order.1+0x106>
    b6a8:	mov    %rdx,0x30(%rbx)
    b6ac:	movl   $0x3f51,0x8(%r12)
    b6b5:	mov    -0x110(%rbp),%r14
    b6bc:	mov    -0x190(%rbp),%rsi
    b6c3:	mov    $0x1,%edi
    b6c8:	jmpq   a692 <inflate+0x15b2>
    b6cd:	mov    0x8c(%r12),%ecx
    b6d5:	lea    0x1(%rcx),%eax
    b6d8:	mov    %eax,0x8c(%r12)
    b6e0:	mov    %di,(%r9,%rcx,2)
    b6e5:	add    $0xffffffff,%edx
    b6e8:	test   %edx,%edx
    b6ea:	jne    b6cd <inflate+0x25ed>
    b6ec:	mov    -0x1a8(%rbp),%rcx
    b6f3:	mov    -0x190(%rbp),%rsi
    b6fa:	mov    $0x1,%edi
    b6ff:	jmpq   a65f <inflate+0x157f>
    b704:	test   %r11d,%r11d
    b707:	je     b76a <inflate+0x268a>
    b709:	lea    0x1(%r8),%rsi
    b70d:	movzbl (%r8),%edx
    b711:	shl    %cl,%rdx
    b714:	add    %rdx,%r10
    b717:	add    $0x8,%ecx
    b71a:	add    $0xffffffff,%r11d
    b71e:	mov    %rsi,%r8
    b721:	movzbl -0x1cb(%rbp),%edx
    b728:	lea    0x7(%rdx),%esi
    b72b:	cmp    %ecx,%esi
    b72d:	ja     b704 <inflate+0x2624>
    b72f:	mov    %rcx,%rsi
    b732:	mov    %rdx,%rcx
    b735:	mov    %r10,%rdx
    b738:	shr    %cl,%rdx
    b73b:	mov    %rdx,%r10
    b73e:	shr    $0x7,%r10
    b742:	and    $0x7f,%edx
    b745:	add    $0xb,%edx
    b748:	sub    %ecx,%esi
    b74a:	lea    -0x7(%rsi),%ecx
    b74d:	xor    %edi,%edi
    b74f:	mov    -0x1b0(%rbp),%r9
    b756:	jmpq   b509 <inflate+0x2429>
    b75b:	xor    %r11d,%r11d
    b75e:	mov    -0x168(%rbp),%rsi
    b765:	jmpq   9280 <inflate+0x1a0>
    b76a:	xor    %r11d,%r11d
    b76d:	mov    -0x168(%rbp),%rsi
    b774:	jmpq   9280 <inflate+0x1a0>
    b779:	nopl   0x0(%rax)

000000000000b780 <inflateEnd>:
    b780:	push   %rbp
    b781:	mov    %rsp,%rbp
    b784:	sub    $0x10,%rsp
    b788:	mov    %r15,-0x8(%rbp)
    b78c:	mov    %rdi,%r15
    b78f:	callq  c320 <inflateStateCheck>
    b794:	test   %eax,%eax
    b796:	je     b7a5 <inflateEnd+0x25>
    b798:	mov    $0xfffffffffffffffe,%rax
    b79f:	mov    -0x8(%rbp),%r15
    b7a3:	leaveq 
    b7a4:	retq   
    b7a5:	mov    0x38(%r15),%rax
    b7a9:	mov    0x48(%rax),%rsi
    b7ad:	test   %rsi,%rsi
    b7b0:	je     b7bc <inflateEnd+0x3c>
    b7b2:	mov    0x48(%r15),%rax
    b7b6:	mov    0x50(%r15),%rdi
    b7ba:	callq  *%rax
    b7bc:	mov    0x48(%r15),%rax
    b7c0:	mov    0x50(%r15),%rdi
    b7c4:	mov    0x38(%r15),%rsi
    b7c8:	callq  *%rax
    b7ca:	movq   $0x0,0x38(%r15)
    b7d2:	xor    %eax,%eax
    b7d4:	mov    -0x8(%rbp),%r15
    b7d8:	leaveq 
    b7d9:	retq   
    b7da:	nopw   0x0(%rax,%rax,1)

000000000000b7e0 <inflateSetDictionary>:
    b7e0:	push   %rbp
    b7e1:	mov    %rsp,%rbp
    b7e4:	sub    $0x20,%rsp
    b7e8:	mov    %r15,-0x8(%rbp)
    b7ec:	mov    %rdx,-0x20(%rbp)
    b7f0:	mov    %rsi,-0x18(%rbp)
    b7f4:	mov    %rdi,%r15
    b7f7:	callq  c320 <inflateStateCheck>
    b7fc:	test   %eax,%eax
    b7fe:	je     b80d <inflateSetDictionary+0x2d>
    b800:	mov    $0xfffffffffffffffe,%rax
    b807:	mov    -0x8(%rbp),%r15
    b80b:	leaveq 
    b80c:	retq   
    b80d:	mov    0x38(%r15),%rcx
    b811:	movslq 0x10(%rcx),%rax
    b815:	test   %eax,%eax
    b817:	jne    b852 <inflateSetDictionary+0x72>
    b819:	xor    %edi,%edi
    b81b:	mov    0x8(%rcx),%eax
    b81e:	cmp    $0x3f3e,%eax
    b823:	je     b869 <inflateSetDictionary+0x89>
    b825:	mov    %r15,%rdi
    b828:	mov    %rcx,%r15
    b82b:	mov    -0x20(%rbp),%rdx
    b82f:	mov    %edx,%eax
    b831:	mov    -0x18(%rbp),%rcx
    b835:	lea    (%rcx,%rax,1),%rsi
    b839:	callq  c3b0 <updatewindow>
    b83e:	test   %eax,%eax
    b840:	jne    b89a <inflateSetDictionary+0xba>
    b842:	movl   $0x1,0x14(%r15)
    b84a:	xor    %eax,%eax
    b84c:	mov    -0x8(%rbp),%r15
    b850:	leaveq 
    b851:	retq   
    b852:	mov    0x8(%rcx),%eax
    b855:	cmp    $0x3f3e,%eax
    b85a:	je     b819 <inflateSetDictionary+0x39>
    b85c:	mov    $0xfffffffffffffffe,%rax
    b863:	mov    -0x8(%rbp),%r15
    b867:	leaveq 
    b868:	retq   
    b869:	mov    %rdi,%rsi
    b86c:	mov    %rdi,%rdx
    b86f:	mov    %r15,-0x10(%rbp)
    b873:	mov    %rcx,%r15
    b876:	callq  2230 <adler32@plt>
    b87b:	mov    %rax,%rdi
    b87e:	mov    -0x18(%rbp),%rsi
    b882:	mov    -0x20(%rbp),%rdx
    b886:	callq  2230 <adler32@plt>
    b88b:	mov    0x20(%r15),%rcx
    b88f:	cmp    %rax,%rcx
    b892:	jne    b8af <inflateSetDictionary+0xcf>
    b894:	mov    -0x10(%rbp),%rdi
    b898:	jmp    b82b <inflateSetDictionary+0x4b>
    b89a:	movl   $0x3f52,0x8(%r15)
    b8a2:	mov    $0xfffffffffffffffc,%rax
    b8a9:	mov    -0x8(%rbp),%r15
    b8ad:	leaveq 
    b8ae:	retq   
    b8af:	mov    $0xfffffffffffffffd,%rax
    b8b6:	mov    -0x8(%rbp),%r15
    b8ba:	leaveq 
    b8bb:	retq   
    b8bc:	nopl   0x0(%rax)

000000000000b8c0 <inflateGetDictionary>:
    b8c0:	push   %rbp
    b8c1:	mov    %rsp,%rbp
    b8c4:	sub    $0x20,%rsp
    b8c8:	mov    %r15,-0x8(%rbp)
    b8cc:	mov    %rsi,-0x18(%rbp)
    b8d0:	mov    %rdx,-0x10(%rbp)
    b8d4:	mov    %rdi,%r15
    b8d7:	callq  c320 <inflateStateCheck>
    b8dc:	test   %eax,%eax
    b8de:	je     b8ed <inflateGetDictionary+0x2d>
    b8e0:	mov    $0xfffffffffffffffe,%rax
    b8e7:	mov    -0x8(%rbp),%r15
    b8eb:	leaveq 
    b8ec:	retq   
    b8ed:	mov    0x38(%r15),%r15
    b8f1:	mov    0x40(%r15),%eax
    b8f5:	test   %eax,%eax
    b8f7:	jne    b90a <inflateGetDictionary+0x4a>
    b8f9:	xor    %eax,%eax
    b8fb:	mov    -0x10(%rbp),%rdx
    b8ff:	test   %rdx,%rdx
    b902:	jne    b94f <inflateGetDictionary+0x8f>
    b904:	mov    -0x8(%rbp),%r15
    b908:	leaveq 
    b909:	retq   
    b90a:	mov    -0x18(%rbp),%rcx
    b90e:	test   %rcx,%rcx
    b911:	je     b8f9 <inflateGetDictionary+0x39>
    b913:	mov    0x44(%r15),%edx
    b917:	mov    %rdx,%rsi
    b91a:	add    0x48(%r15),%rsi
    b91e:	sub    %edx,%eax
    b920:	mov    %eax,%edx
    b922:	mov    %rcx,%rdi
    b925:	mov    %r14,-0x18(%rbp)
    b929:	mov    %rcx,%r14
    b92c:	callq  21f0 <memcpy@plt>
    b931:	mov    0x40(%r15),%eax
    b935:	lea    (%r14,%rax,1),%rdi
    b939:	mov    0x44(%r15),%edx
    b93d:	sub    %rdx,%rdi
    b940:	mov    0x48(%r15),%rsi
    b944:	callq  21f0 <memcpy@plt>
    b949:	mov    -0x18(%rbp),%r14
    b94d:	jmp    b8f9 <inflateGetDictionary+0x39>
    b94f:	mov    0x40(%r15),%ecx
    b953:	mov    %ecx,(%rdx)
    b955:	mov    -0x8(%rbp),%r15
    b959:	leaveq 
    b95a:	retq   
    b95b:	nopl   0x0(%rax,%rax,1)

000000000000b960 <inflateSync>:
    b960:	push   %rbp
    b961:	mov    %rsp,%rbp
    b964:	sub    $0x30,%rsp
    b968:	mov    %r15,-0x20(%rbp)
    b96c:	mov    %r14,%r15
    b96f:	mov    %rdi,%r14
    b972:	callq  c320 <inflateStateCheck>
    b977:	test   %eax,%eax
    b979:	je     b98b <inflateSync+0x2b>
    b97b:	mov    %r15,%r14
    b97e:	mov    $0xfffffffffffffffe,%rax
    b985:	mov    -0x20(%rbp),%r15
    b989:	leaveq 
    b98a:	retq   
    b98b:	mov    0x38(%r14),%r8
    b98f:	mov    0x8(%r14),%eax
    b993:	test   %eax,%eax
    b995:	je     b9cd <inflateSync+0x6d>
    b997:	lea    0x8c(%r8),%rdi
    b99e:	xor    %edx,%edx
    b9a0:	mov    0x8(%r8),%eax
    b9a4:	cmp    $0x3f53,%eax
    b9a9:	je     ba3c <inflateSync+0xdc>
    b9af:	movl   $0x3f53,0x8(%r8)
    b9b7:	mov    0x58(%r8),%ecx
    b9bb:	mov    %rcx,%rax
    b9be:	and    $0xfffffff8,%eax
    b9c1:	mov    0x50(%r8),%rsi
    b9c5:	and    $0x7,%ecx
    b9c8:	shl    %cl,%rsi
    b9cb:	jmp    b9fe <inflateSync+0x9e>
    b9cd:	mov    0x58(%r8),%eax
    b9d1:	cmp    $0x7,%eax
    b9d4:	ja     b997 <inflateSync+0x37>
    b9d6:	mov    %r15,%r14
    b9d9:	mov    $0xfffffffffffffffb,%rax
    b9e0:	mov    -0x20(%rbp),%r15
    b9e4:	leaveq 
    b9e5:	retq   
    b9e6:	mov    %rsi,%rcx
    b9e9:	shr    $0x8,%rcx
    b9ed:	mov    %edx,%r9d
    b9f0:	mov    %sil,-0x24(%rbp,%r9,1)
    b9f5:	add    $0xfffffff8,%eax
    b9f8:	add    $0x1,%edx
    b9fb:	mov    %rcx,%rsi
    b9fe:	mov    %eax,0x58(%r8)
    ba02:	mov    %rsi,0x50(%r8)
    ba06:	cmp    $0x7,%eax
    ba09:	ja     b9e6 <inflateSync+0x86>
    ba0b:	movl   $0x0,(%rdi)
    ba11:	lea    -0x24(%rbp),%rsi
    ba15:	mov    %rdi,%rax
    ba18:	mov    %r13,-0x10(%rbp)
    ba1c:	mov    %r15,-0x18(%rbp)
    ba20:	mov    %rdi,%r13
    ba23:	mov    %rax,%rdi
    ba26:	mov    %r8,%r15
    ba29:	callq  c550 <syncsearch>
    ba2e:	mov    %r13,%rdi
    ba31:	mov    %r15,%r8
    ba34:	mov    -0x18(%rbp),%r15
    ba38:	mov    -0x10(%rbp),%r13
    ba3c:	mov    (%r14),%rsi
    ba3f:	mov    0x8(%r14),%edx
    ba43:	mov    %r15,-0x18(%rbp)
    ba47:	mov    %r8,%r15
    ba4a:	callq  c550 <syncsearch>
    ba4f:	mov    0x8(%r14),%ecx
    ba53:	sub    %eax,%ecx
    ba55:	mov    %ecx,0x8(%r14)
    ba59:	mov    %eax,%eax
    ba5b:	mov    %rax,%rcx
    ba5e:	add    (%r14),%rcx
    ba61:	mov    %rcx,(%r14)
    ba64:	add    0x10(%r14),%rax
    ba68:	mov    %rax,0x10(%r14)
    ba6c:	mov    0x8c(%r15),%ecx
    ba73:	cmp    $0x4,%ecx
    ba76:	je     ba89 <inflateSync+0x129>
    ba78:	mov    $0xfffffffffffffffd,%rax
    ba7f:	mov    -0x18(%rbp),%r14
    ba83:	mov    -0x20(%rbp),%r15
    ba87:	leaveq 
    ba88:	retq   
    ba89:	mov    0x28(%r14),%rcx
    ba8d:	mov    %r14,%rdi
    ba90:	mov    %r13,-0x10(%rbp)
    ba94:	mov    %r12,-0x8(%rbp)
    ba98:	mov    %rcx,%r12
    ba9b:	mov    %rax,%r13
    ba9e:	callq  22f0 <inflateReset@plt>
    baa3:	mov    %r13,0x10(%r14)
    baa7:	mov    %r12,0x28(%r14)
    baab:	movl   $0x3f3f,0x8(%r15)
    bab3:	mov    -0x8(%rbp),%r12
    bab7:	xor    %eax,%eax
    bab9:	mov    -0x18(%rbp),%r14
    babd:	mov    -0x10(%rbp),%r13
    bac1:	mov    -0x20(%rbp),%r15
    bac5:	leaveq 
    bac6:	retq   
    bac7:	nopw   0x0(%rax,%rax,1)

000000000000bad0 <inflateCopy>:
    bad0:	push   %rbp
    bad1:	mov    %rsp,%rbp
    bad4:	sub    $0x30,%rsp
    bad8:	mov    %rdi,-0x28(%rbp)
    badc:	mov    %rsi,%rdi
    badf:	mov    %rdi,-0x20(%rbp)
    bae3:	callq  c320 <inflateStateCheck>
    bae8:	test   %eax,%eax
    baea:	je     baf5 <inflateCopy+0x25>
    baec:	mov    $0xfffffffffffffffe,%rax
    baf3:	leaveq 
    baf4:	retq   
    baf5:	mov    -0x28(%rbp),%rax
    baf9:	test   %rax,%rax
    bafc:	jne    bb07 <inflateCopy+0x37>
    bafe:	mov    $0xfffffffffffffffe,%rax
    bb05:	leaveq 
    bb06:	retq   
    bb07:	mov    -0x20(%rbp),%rcx
    bb0b:	mov    0x38(%rcx),%rax
    bb0f:	mov    %rax,-0x18(%rbp)
    bb13:	mov    0x40(%rcx),%rax
    bb17:	mov    0x50(%rcx),%rdi
    bb1b:	mov    $0x1,%esi
    bb20:	mov    $0x1bf8,%edx
    bb25:	callq  *%rax
    bb27:	test   %rax,%rax
    bb2a:	jne    bb35 <inflateCopy+0x65>
    bb2c:	mov    $0xfffffffffffffffc,%rax
    bb33:	leaveq 
    bb34:	retq   
    bb35:	xor    %ecx,%ecx
    bb37:	mov    -0x18(%rbp),%r8
    bb3b:	mov    0x48(%r8),%rdx
    bb3f:	test   %rdx,%rdx
    bb42:	jne    bc23 <inflateCopy+0x153>
    bb48:	mov    -0x20(%rbp),%rsi
    bb4c:	mov    $0x70,%edx
    bb51:	mov    -0x28(%rbp),%r9
    bb55:	mov    %r9,%rdi
    bb58:	mov    %r14,-0x18(%rbp)
    bb5c:	mov    %r15,-0x28(%rbp)
    bb60:	mov    %r12,-0x8(%rbp)
    bb64:	mov    %r13,-0x10(%rbp)
    bb68:	mov    %rax,%r12
    bb6b:	mov    %rcx,%r13
    bb6e:	mov    %r9,%r14
    bb71:	mov    %r8,%r15
    bb74:	callq  21f0 <memcpy@plt>
    bb79:	mov    %r12,%rdi
    bb7c:	mov    %r15,%rsi
    bb7f:	mov    $0x1bf8,%edx
    bb84:	callq  21f0 <memcpy@plt>
    bb89:	mov    %r14,(%r12)
    bb8d:	lea    0x558(%r15),%rsi
    bb94:	mov    0x68(%r15),%rcx
    bb98:	cmp    %rcx,%rsi
    bb9b:	jbe    bc70 <inflateCopy+0x1a0>
    bba1:	mov    0x90(%r15),%rax
    bba8:	mov    %rax,%rdx
    bbab:	sub    %rsi,%rdx
    bbae:	mov    %rdx,%rcx
    bbb1:	sar    %rcx
    bbb4:	shr    $0x3e,%rcx
    bbb8:	add    %rdx,%rcx
    bbbb:	and    $0xfffffffffffffffc,%rcx
    bbbf:	lea    0x558(%r15,%rcx,1),%rcx
    bbc7:	neg    %rcx
    bbca:	add    %rax,%rcx
    bbcd:	lea    0x558(%r15,%rcx,1),%rcx
    bbd5:	sub    %rcx,%rax
    bbd8:	lea    0x558(%r12,%rax,1),%rax
    bbe0:	mov    %rax,0x90(%r12)
    bbe8:	test   %r13,%r13
    bbeb:	je     bc06 <inflateCopy+0x136>
    bbed:	mov    0x38(%r15),%ecx
    bbf1:	mov    $0x1,%eax
    bbf6:	shl    %cl,%eax
    bbf8:	mov    %eax,%edx
    bbfa:	mov    0x48(%r15),%rsi
    bbfe:	mov    %r13,%rdi
    bc01:	callq  21f0 <memcpy@plt>
    bc06:	mov    %r13,0x48(%r12)
    bc0b:	mov    %r12,0x38(%r14)
    bc0f:	mov    -0x10(%rbp),%r13
    bc13:	mov    -0x8(%rbp),%r12
    bc17:	xor    %eax,%eax
    bc19:	mov    -0x28(%rbp),%r15
    bc1d:	mov    -0x18(%rbp),%r14
    bc21:	leaveq 
    bc22:	retq   
    bc23:	mov    0x38(%r8),%ecx
    bc27:	mov    $0x1,%edx
    bc2c:	mov    %rdx,%rsi
    bc2f:	shl    %cl,%esi
    bc31:	mov    -0x20(%rbp),%r8
    bc35:	mov    0x40(%r8),%rcx
    bc39:	mov    0x50(%r8),%rdi
    bc3d:	mov    %r14,-0x10(%rbp)
    bc41:	mov    %r15,-0x20(%rbp)
    bc45:	mov    %r8,%r14
    bc48:	mov    %rax,%r15
    bc4b:	callq  *%rcx
    bc4d:	test   %rax,%rax
    bc50:	je     bd03 <inflateCopy+0x233>
    bc56:	mov    %rax,%rcx
    bc59:	mov    %r15,%rax
    bc5c:	mov    %r14,%rsi
    bc5f:	mov    -0x20(%rbp),%r15
    bc63:	mov    -0x10(%rbp),%r14
    bc67:	mov    -0x18(%rbp),%r8
    bc6b:	jmpq   bb4c <inflateCopy+0x7c>
    bc70:	lea    0x1be4(%r15),%rax
    bc77:	cmp    %rax,%rcx
    bc7a:	ja     bba1 <inflateCopy+0xd1>
    bc80:	mov    %rcx,%rdx
    bc83:	sub    %rsi,%rdx
    bc86:	mov    %rdx,%rax
    bc89:	sar    %rax
    bc8c:	shr    $0x3e,%rax
    bc90:	add    %rdx,%rax
    bc93:	and    $0xfffffffffffffffc,%rax
    bc97:	lea    0x558(%r15,%rax,1),%rax
    bc9f:	neg    %rax
    bca2:	add    %rcx,%rax
    bca5:	lea    0x558(%r15,%rax,1),%rax
    bcad:	sub    %rax,%rcx
    bcb0:	lea    0x558(%r12,%rcx,1),%rax
    bcb8:	mov    %rax,0x68(%r12)
    bcbd:	mov    0x70(%r15),%rcx
    bcc1:	mov    %rcx,%rdx
    bcc4:	sub    %rsi,%rdx
    bcc7:	mov    %rdx,%rax
    bcca:	sar    %rax
    bccd:	shr    $0x3e,%rax
    bcd1:	add    %rdx,%rax
    bcd4:	and    $0xfffffffffffffffc,%rax
    bcd8:	lea    0x558(%r15,%rax,1),%rax
    bce0:	neg    %rax
    bce3:	add    %rcx,%rax
    bce6:	lea    0x558(%r15,%rax,1),%rax
    bcee:	sub    %rax,%rcx
    bcf1:	lea    0x558(%r12,%rcx,1),%rax
    bcf9:	mov    %rax,0x70(%r12)
    bcfe:	jmpq   bba1 <inflateCopy+0xd1>
    bd03:	mov    0x48(%r14),%rax
    bd07:	mov    0x50(%r14),%rdi
    bd0b:	mov    %r15,%rsi
    bd0e:	callq  *%rax
    bd10:	mov    -0x20(%rbp),%r15
    bd14:	mov    -0x10(%rbp),%r14
    bd18:	mov    $0xfffffffffffffffc,%rax
    bd1f:	leaveq 
    bd20:	retq   
    bd21:	data16 nopw %cs:0x0(%rax,%rax,1)
    bd2c:	nopl   0x0(%rax)

000000000000bd30 <inflateReset>:
    bd30:	push   %rbp
    bd31:	mov    %rsp,%rbp
    bd34:	sub    $0x10,%rsp
    bd38:	mov    %r15,-0x8(%rbp)
    bd3c:	mov    %rdi,%r15
    bd3f:	callq  c320 <inflateStateCheck>
    bd44:	test   %eax,%eax
    bd46:	je     bd55 <inflateReset+0x25>
    bd48:	mov    $0xfffffffffffffffe,%rax
    bd4f:	mov    -0x8(%rbp),%r15
    bd53:	leaveq 
    bd54:	retq   
    bd55:	mov    0x38(%r15),%rax
    bd59:	movl   $0x0,0x3c(%rax)
    bd60:	movl   $0x0,0x40(%rax)
    bd67:	movl   $0x0,0x44(%rax)
    bd6e:	mov    %r15,%rdi
    bd71:	callq  20f0 <inflateResetKeep@plt>
    bd76:	mov    -0x8(%rbp),%r15
    bd7a:	leaveq 
    bd7b:	retq   
    bd7c:	nopl   0x0(%rax)

000000000000bd80 <inflateReset2>:
    bd80:	push   %rbp
    bd81:	mov    %rsp,%rbp
    bd84:	sub    $0x20,%rsp
    bd88:	mov    %r15,-0x18(%rbp)
    bd8c:	mov    %rsi,-0x20(%rbp)
    bd90:	mov    %rdi,%r15
    bd93:	callq  c320 <inflateStateCheck>
    bd98:	test   %eax,%eax
    bd9a:	je     bda9 <inflateReset2+0x29>
    bd9c:	mov    $0xfffffffffffffffe,%rax
    bda3:	mov    -0x18(%rbp),%r15
    bda7:	leaveq 
    bda8:	retq   
    bda9:	mov    0x38(%r15),%rdx
    bdad:	mov    -0x20(%rbp),%rax
    bdb1:	test   %eax,%eax
    bdb3:	js     bdc8 <inflateReset2+0x48>
    bdb5:	mov    %rax,%rcx
    bdb8:	sar    $0x4,%ecx
    bdbb:	add    $0x5,%ecx
    bdbe:	cmp    $0x2f,%eax
    bdc1:	jg     bdcc <inflateReset2+0x4c>
    bdc3:	and    $0xf,%eax
    bdc6:	jmp    bdcc <inflateReset2+0x4c>
    bdc8:	neg    %eax
    bdca:	xor    %ecx,%ecx
    bdcc:	test   %eax,%eax
    bdce:	jne    bded <inflateReset2+0x6d>
    bdd0:	mov    0x48(%rdx),%rsi
    bdd4:	test   %rsi,%rsi
    bdd7:	jne    bdff <inflateReset2+0x7f>
    bdd9:	mov    %r15,%rdi
    bddc:	mov    %ecx,0x10(%rdx)
    bddf:	mov    %eax,0x38(%rdx)
    bde2:	callq  22f0 <inflateReset@plt>
    bde7:	mov    -0x18(%rbp),%r15
    bdeb:	leaveq 
    bdec:	retq   
    bded:	cmp    $0x7,%eax
    bdf0:	jg     be0b <inflateReset2+0x8b>
    bdf2:	mov    $0xfffffffffffffffe,%rax
    bdf9:	mov    -0x18(%rbp),%r15
    bdfd:	leaveq 
    bdfe:	retq   
    bdff:	mov    0x38(%rdx),%edi
    be02:	cmp    %eax,%edi
    be04:	jne    be1d <inflateReset2+0x9d>
    be06:	mov    %r15,%rdi
    be09:	jmp    bddc <inflateReset2+0x5c>
    be0b:	cmp    $0xf,%eax
    be0e:	jle    bdd0 <inflateReset2+0x50>
    be10:	mov    $0xfffffffffffffffe,%rax
    be17:	mov    -0x18(%rbp),%r15
    be1b:	leaveq 
    be1c:	retq   
    be1d:	mov    0x48(%r15),%r8
    be21:	mov    0x50(%r15),%rdi
    be25:	mov    %r12,-0x8(%rbp)
    be29:	mov    %r13,-0x10(%rbp)
    be2d:	mov    %r14,-0x20(%rbp)
    be31:	mov    %rax,%r12
    be34:	mov    %rcx,%r13
    be37:	mov    %rdx,%r14
    be3a:	callq  *%r8
    be3d:	mov    %r12,%rax
    be40:	mov    %r13,%rcx
    be43:	mov    %r14,%rdx
    be46:	mov    %r15,%rdi
    be49:	movq   $0x0,0x48(%rdx)
    be51:	mov    -0x20(%rbp),%r14
    be55:	mov    -0x10(%rbp),%r13
    be59:	mov    -0x8(%rbp),%r12
    be5d:	jmpq   bddc <inflateReset2+0x5c>
    be62:	data16 nopw %cs:0x0(%rax,%rax,1)
    be6d:	nopl   (%rax)

000000000000be70 <inflatePrime>:
    be70:	push   %rbp
    be71:	mov    %rsp,%rbp
    be74:	sub    $0x20,%rsp
    be78:	mov    %r15,-0x10(%rbp)
    be7c:	mov    %rsi,-0x18(%rbp)
    be80:	mov    %rdx,-0x8(%rbp)
    be84:	mov    %rdi,%r15
    be87:	callq  c320 <inflateStateCheck>
    be8c:	test   %eax,%eax
    be8e:	je     be9d <inflatePrime+0x2d>
    be90:	mov    $0xfffffffffffffffe,%rax
    be97:	mov    -0x10(%rbp),%r15
    be9b:	leaveq 
    be9c:	retq   
    be9d:	mov    0x38(%r15),%rdi
    bea1:	xor    %eax,%eax
    bea3:	mov    -0x18(%rbp),%rcx
    bea7:	test   %ecx,%ecx
    bea9:	js     bebd <inflatePrime+0x4d>
    beab:	cmp    $0x10,%ecx
    beae:	jle    bed2 <inflatePrime+0x62>
    beb0:	mov    $0xfffffffffffffffe,%rax
    beb7:	mov    -0x10(%rbp),%r15
    bebb:	leaveq 
    bebc:	retq   
    bebd:	movq   $0x0,0x50(%rdi)
    bec5:	movl   $0x0,0x58(%rdi)
    becc:	mov    -0x10(%rbp),%r15
    bed0:	leaveq 
    bed1:	retq   
    bed2:	mov    0x58(%rdi),%edx
    bed5:	lea    (%rdx,%rcx,1),%r8d
    bed9:	cmp    $0x20,%r8d
    bedd:	jbe    beec <inflatePrime+0x7c>
    bedf:	mov    $0xfffffffffffffffe,%rax
    bee6:	mov    -0x10(%rbp),%r15
    beea:	leaveq 
    beeb:	retq   
    beec:	mov    $0x1,%esi
    bef1:	shl    %cl,%rsi
    bef4:	add    $0xffffffff,%esi
    bef7:	mov    -0x8(%rbp),%rcx
    befb:	and    %ecx,%esi
    befd:	mov    %rdx,%rcx
    bf00:	shl    %cl,%esi
    bf02:	mov    %esi,%ecx
    bf04:	add    0x50(%rdi),%rcx
    bf08:	mov    %rcx,0x50(%rdi)
    bf0c:	mov    %r8d,0x58(%rdi)
    bf10:	mov    -0x10(%rbp),%r15
    bf14:	leaveq 
    bf15:	retq   
    bf16:	nopw   %cs:0x0(%rax,%rax,1)

000000000000bf20 <inflateMark>:
    bf20:	push   %rbp
    bf21:	mov    %rsp,%rbp
    bf24:	sub    $0x10,%rsp
    bf28:	mov    %r15,-0x8(%rbp)
    bf2c:	mov    %rdi,%r15
    bf2f:	callq  c320 <inflateStateCheck>
    bf34:	test   %eax,%eax
    bf36:	je     bf45 <inflateMark+0x25>
    bf38:	mov    $0xffffffffffff0000,%rax
    bf3f:	mov    -0x8(%rbp),%r15
    bf43:	leaveq 
    bf44:	retq   
    bf45:	mov    0x38(%r15),%rdx
    bf49:	movslq 0x1bec(%rdx),%rcx
    bf50:	mov    0x8(%rdx),%eax
    bf53:	cmp    $0x3f43,%eax
    bf58:	je     bf65 <inflateMark+0x45>
    bf5a:	cmp    $0x3f4c,%eax
    bf5f:	je     bf77 <inflateMark+0x57>
    bf61:	xor    %eax,%eax
    bf63:	jmp    bf68 <inflateMark+0x48>
    bf65:	mov    0x5c(%rdx),%eax
    bf68:	mov    %eax,%eax
    bf6a:	shl    $0x10,%rcx
    bf6e:	add    %rcx,%rax
    bf71:	mov    -0x8(%rbp),%r15
    bf75:	leaveq 
    bf76:	retq   
    bf77:	mov    0x1bf0(%rdx),%eax
    bf7d:	mov    0x5c(%rdx),%edx
    bf80:	sub    %edx,%eax
    bf82:	jmp    bf68 <inflateMark+0x48>
    bf84:	data16 nopw %cs:0x0(%rax,%rax,1)
    bf8f:	nop

000000000000bf90 <inflateGetHeader>:
    bf90:	push   %rbp
    bf91:	mov    %rsp,%rbp
    bf94:	sub    $0x10,%rsp
    bf98:	mov    %r15,-0x10(%rbp)
    bf9c:	mov    %rsi,-0x8(%rbp)
    bfa0:	mov    %rdi,%r15
    bfa3:	callq  c320 <inflateStateCheck>
    bfa8:	test   %eax,%eax
    bfaa:	je     bfb9 <inflateGetHeader+0x29>
    bfac:	mov    $0xfffffffffffffffe,%rax
    bfb3:	mov    -0x10(%rbp),%r15
    bfb7:	leaveq 
    bfb8:	retq   
    bfb9:	mov    0x38(%r15),%rcx
    bfbd:	movslq 0x10(%rcx),%rax
    bfc1:	and    $0x2,%eax
    bfc4:	test   %eax,%eax
    bfc6:	jne    bfd5 <inflateGetHeader+0x45>
    bfc8:	mov    $0xfffffffffffffffe,%rax
    bfcf:	mov    -0x10(%rbp),%r15
    bfd3:	leaveq 
    bfd4:	retq   
    bfd5:	mov    -0x8(%rbp),%rax
    bfd9:	mov    %rax,0x30(%rcx)
    bfdd:	movl   $0x0,0x48(%rax)
    bfe4:	xor    %eax,%eax
    bfe6:	mov    -0x10(%rbp),%r15
    bfea:	leaveq 
    bfeb:	retq   
    bfec:	nopl   0x0(%rax)

000000000000bff0 <inflateInit_>:
    bff0:	push   %rbp
    bff1:	mov    %rsp,%rbp
    bff4:	mov    %rdx,%rcx
    bff7:	mov    %rsi,%rdx
    bffa:	mov    $0xf,%esi
    bfff:	callq  22d0 <inflateInit2_@plt>
    c004:	leaveq 
    c005:	retq   
    c006:	nopw   %cs:0x0(%rax,%rax,1)

000000000000c010 <inflateInit2_>:
    c010:	push   %rbp
    c011:	mov    %rsp,%rbp
    c014:	sub    $0x20,%rsp
    c018:	mov    $0xfffffffffffffffa,%rax
    c01f:	test   %rdx,%rdx
    c022:	jne    c026 <inflateInit2_+0x16>
    c024:	leaveq 
    c025:	retq   
    c026:	movsbq (%rdx),%rdx
    c02a:	cmp    $0x31,%dl
    c02d:	je     c031 <inflateInit2_+0x21>
    c02f:	leaveq 
    c030:	retq   
    c031:	cmp    $0x70,%ecx
    c034:	je     c038 <inflateInit2_+0x28>
    c036:	leaveq 
    c037:	retq   
    c038:	test   %rdi,%rdi
    c03b:	jne    c046 <inflateInit2_+0x36>
    c03d:	mov    $0xfffffffffffffffe,%rax
    c044:	leaveq 
    c045:	retq   
    c046:	movq   $0x0,0x30(%rdi)
    c04e:	mov    0x40(%rdi),%rax
    c052:	test   %rax,%rax
    c055:	jne    c06a <inflateInit2_+0x5a>
    c057:	mov    0xbf7a(%rip),%rax        # 17fd8 <zcalloc@@Base+0x9278>
    c05e:	mov    %rax,0x40(%rdi)
    c062:	movq   $0x0,0x50(%rdi)
    c06a:	mov    0x48(%rdi),%rax
    c06e:	test   %rax,%rax
    c071:	jne    c07e <inflateInit2_+0x6e>
    c073:	mov    0xbf46(%rip),%rax        # 17fc0 <zcfree@@Base+0x9250>
    c07a:	mov    %rax,0x48(%rdi)
    c07e:	mov    0x40(%rdi),%rax
    c082:	mov    0x50(%rdi),%rcx
    c086:	mov    $0x1,%r8d
    c08c:	mov    $0x1bf8,%edx
    c091:	mov    %r15,-0x10(%rbp)
    c095:	mov    %rsi,-0x18(%rbp)
    c099:	mov    %r8,%rsi
    c09c:	mov    %rdi,%r15
    c09f:	mov    %rcx,%rdi
    c0a2:	callq  *%rax
    c0a4:	test   %rax,%rax
    c0a7:	jne    c0b6 <inflateInit2_+0xa6>
    c0a9:	mov    $0xfffffffffffffffc,%rax
    c0b0:	mov    -0x10(%rbp),%r15
    c0b4:	leaveq 
    c0b5:	retq   
    c0b6:	mov    %rax,0x38(%r15)
    c0ba:	mov    %r15,(%rax)
    c0bd:	movq   $0x0,0x48(%rax)
    c0c5:	movl   $0x3f34,0x8(%rax)
    c0cc:	mov    %r15,%rdi
    c0cf:	mov    %rax,-0x8(%rbp)
    c0d3:	mov    -0x18(%rbp),%rsi
    c0d7:	callq  2320 <inflateReset2@plt>
    c0dc:	test   %eax,%eax
    c0de:	jne    c0e8 <inflateInit2_+0xd8>
    c0e0:	xor    %eax,%eax
    c0e2:	mov    -0x10(%rbp),%r15
    c0e6:	leaveq 
    c0e7:	retq   
    c0e8:	mov    0x48(%r15),%rcx
    c0ec:	mov    0x50(%r15),%rdi
    c0f0:	mov    %rax,-0x18(%rbp)
    c0f4:	mov    -0x8(%rbp),%rsi
    c0f8:	callq  *%rcx
    c0fa:	movq   $0x0,0x38(%r15)
    c102:	mov    -0x18(%rbp),%rax
    c106:	mov    -0x10(%rbp),%r15
    c10a:	leaveq 
    c10b:	retq   
    c10c:	nopl   0x0(%rax)

000000000000c110 <inflateSyncPoint>:
    c110:	push   %rbp
    c111:	mov    %rsp,%rbp
    c114:	sub    $0x10,%rsp
    c118:	mov    %r15,-0x8(%rbp)
    c11c:	mov    %rdi,%r15
    c11f:	callq  c320 <inflateStateCheck>
    c124:	test   %eax,%eax
    c126:	je     c135 <inflateSyncPoint+0x25>
    c128:	mov    $0xfffffffffffffffe,%rax
    c12f:	mov    -0x8(%rbp),%r15
    c133:	leaveq 
    c134:	retq   
    c135:	xor    %eax,%eax
    c137:	mov    0x38(%r15),%rcx
    c13b:	mov    0x8(%rcx),%edx
    c13e:	cmp    $0x3f41,%edx
    c144:	je     c14c <inflateSyncPoint+0x3c>
    c146:	mov    -0x8(%rbp),%r15
    c14a:	leaveq 
    c14b:	retq   
    c14c:	mov    0x58(%rcx),%ecx
    c14f:	test   %ecx,%ecx
    c151:	jne    c15e <inflateSyncPoint+0x4e>
    c153:	mov    $0x1,%eax
    c158:	mov    -0x8(%rbp),%r15
    c15c:	leaveq 
    c15d:	retq   
    c15e:	mov    -0x8(%rbp),%r15
    c162:	leaveq 
    c163:	retq   
    c164:	data16 nopw %cs:0x0(%rax,%rax,1)
    c16f:	nop

000000000000c170 <inflateUndermine>:
    c170:	push   %rbp
    c171:	mov    %rsp,%rbp
    c174:	sub    $0x10,%rsp
    c178:	mov    %r15,-0x8(%rbp)
    c17c:	mov    %rdi,%r15
    c17f:	callq  c320 <inflateStateCheck>
    c184:	test   %eax,%eax
    c186:	je     c195 <inflateUndermine+0x25>
    c188:	mov    $0xfffffffffffffffe,%rax
    c18f:	mov    -0x8(%rbp),%r15
    c193:	leaveq 
    c194:	retq   
    c195:	mov    0x38(%r15),%rax
    c199:	movl   $0x1,0x1be8(%rax)
    c1a3:	mov    $0xfffffffffffffffd,%rax
    c1aa:	mov    -0x8(%rbp),%r15
    c1ae:	leaveq 
    c1af:	retq   

000000000000c1b0 <inflateValidate>:
    c1b0:	push   %rbp
    c1b1:	mov    %rsp,%rbp
    c1b4:	sub    $0x10,%rsp
    c1b8:	mov    %r15,-0x8(%rbp)
    c1bc:	mov    %rsi,-0x10(%rbp)
    c1c0:	mov    %rdi,%r15
    c1c3:	callq  c320 <inflateStateCheck>
    c1c8:	test   %eax,%eax
    c1ca:	je     c1d9 <inflateValidate+0x29>
    c1cc:	mov    $0xfffffffffffffffe,%rax
    c1d3:	mov    -0x8(%rbp),%r15
    c1d7:	leaveq 
    c1d8:	retq   
    c1d9:	mov    0x38(%r15),%rdx
    c1dd:	xor    %eax,%eax
    c1df:	mov    -0x10(%rbp),%rcx
    c1e3:	test   %ecx,%ecx
    c1e5:	jne    c1f7 <inflateValidate+0x47>
    c1e7:	movslq 0x10(%rdx),%rcx
    c1eb:	and    $0xfffffffb,%ecx
    c1ee:	mov    %ecx,0x10(%rdx)
    c1f1:	mov    -0x8(%rbp),%r15
    c1f5:	leaveq 
    c1f6:	retq   
    c1f7:	movslq 0x10(%rdx),%rcx
    c1fb:	or     $0x4,%ecx
    c1fe:	mov    %ecx,0x10(%rdx)
    c201:	mov    -0x8(%rbp),%r15
    c205:	leaveq 
    c206:	retq   
    c207:	nopw   0x0(%rax,%rax,1)

000000000000c210 <inflateCodesUsed>:
    c210:	push   %rbp
    c211:	mov    %rsp,%rbp
    c214:	sub    $0x10,%rsp
    c218:	mov    %r15,-0x8(%rbp)
    c21c:	mov    %rdi,%r15
    c21f:	callq  c320 <inflateStateCheck>
    c224:	test   %eax,%eax
    c226:	je     c235 <inflateCodesUsed+0x25>
    c228:	mov    $0xffffffffffffffff,%rax
    c22f:	mov    -0x8(%rbp),%r15
    c233:	leaveq 
    c234:	retq   
    c235:	mov    0x38(%r15),%rcx
    c239:	mov    0x90(%rcx),%rax
    c240:	add    $0x558,%rcx
    c247:	sub    %rcx,%rax
    c24a:	sar    $0x2,%rax
    c24e:	mov    -0x8(%rbp),%r15
    c252:	leaveq 
    c253:	retq   
    c254:	data16 nopw %cs:0x0(%rax,%rax,1)
    c25f:	nop

000000000000c260 <inflateResetKeep>:
    c260:	push   %rbp
    c261:	mov    %rsp,%rbp
    c264:	sub    $0x10,%rsp
    c268:	mov    %r15,-0x8(%rbp)
    c26c:	mov    %rdi,%r15
    c26f:	callq  c320 <inflateStateCheck>
    c274:	test   %eax,%eax
    c276:	je     c285 <inflateResetKeep+0x25>
    c278:	mov    $0xfffffffffffffffe,%rax
    c27f:	mov    -0x8(%rbp),%r15
    c283:	leaveq 
    c284:	retq   
    c285:	mov    0x38(%r15),%rcx
    c289:	movq   $0x0,0x28(%rcx)
    c291:	movq   $0x0,0x28(%r15)
    c299:	movq   $0x0,0x10(%r15)
    c2a1:	movq   $0x0,0x30(%r15)
    c2a9:	movslq 0x10(%rcx),%rax
    c2ad:	test   %eax,%eax
    c2af:	je     c2bb <inflateResetKeep+0x5b>
    c2b1:	and    $0x1,%eax
    c2b4:	movslq %eax,%rax
    c2b7:	mov    %rax,0x60(%r15)
    c2bb:	movl   $0x3f34,0x8(%rcx)
    c2c2:	movl   $0x0,0xc(%rcx)
    c2c9:	movl   $0x0,0x14(%rcx)
    c2d0:	movl   $0x8000,0x1c(%rcx)
    c2d7:	movq   $0x0,0x30(%rcx)
    c2df:	movq   $0x0,0x50(%rcx)
    c2e7:	movl   $0x0,0x58(%rcx)
    c2ee:	lea    0x558(%rcx),%rax
    c2f5:	mov    %rax,0x90(%rcx)
    c2fc:	mov    %rax,0x70(%rcx)
    c300:	mov    %rax,0x68(%rcx)
    c304:	movl   $0x1,0x1be8(%rcx)
    c30e:	movl   $0xffffffff,0x1bec(%rcx)
    c318:	xor    %eax,%eax
    c31a:	mov    -0x8(%rbp),%r15
    c31e:	leaveq 
    c31f:	retq   

000000000000c320 <inflateStateCheck>:
    c320:	push   %rbp
    c321:	mov    %rsp,%rbp
    c324:	mov    $0x1,%eax
    c329:	test   %rdi,%rdi
    c32c:	jne    c330 <inflateStateCheck+0x10>
    c32e:	leaveq 
    c32f:	retq   
    c330:	mov    0x40(%rdi),%rcx
    c334:	test   %rcx,%rcx
    c337:	jne    c33b <inflateStateCheck+0x1b>
    c339:	leaveq 
    c33a:	retq   
    c33b:	mov    0x48(%rdi),%rcx
    c33f:	test   %rcx,%rcx
    c342:	jne    c346 <inflateStateCheck+0x26>
    c344:	leaveq 
    c345:	retq   
    c346:	mov    0x38(%rdi),%rcx
    c34a:	test   %rcx,%rcx
    c34d:	jne    c351 <inflateStateCheck+0x31>
    c34f:	leaveq 
    c350:	retq   
    c351:	cmp    (%rcx),%rdi
    c354:	je     c358 <inflateStateCheck+0x38>
    c356:	leaveq 
    c357:	retq   
    c358:	mov    0x8(%rcx),%ecx
    c35b:	cmp    $0x3f33,%ecx
    c361:	ja     c365 <inflateStateCheck+0x45>
    c363:	leaveq 
    c364:	retq   
    c365:	cmp    $0x3f53,%ecx
    c36b:	jbe    c36f <inflateStateCheck+0x4f>
    c36d:	leaveq 
    c36e:	retq   
    c36f:	xor    %eax,%eax
    c371:	leaveq 
    c372:	retq   
    c373:	data16 nopw %cs:0x0(%rax,%rax,1)
    c37e:	xchg   %ax,%ax

000000000000c380 <fixedtables>:
    c380:	push   %rbp
    c381:	mov    %rsp,%rbp
    c384:	lea    0x899d(%rip),%rax        # 14d28 <lenfix.21>
    c38b:	mov    %rax,0x68(%rdi)
    c38f:	movl   $0x9,0x78(%rdi)
    c396:	lea    0x918b(%rip),%rax        # 15528 <distfix.22>
    c39d:	mov    %rax,0x70(%rdi)
    c3a1:	movl   $0x5,0x7c(%rdi)
    c3a8:	leaveq 
    c3a9:	retq   
    c3aa:	nopw   0x0(%rax,%rax,1)

000000000000c3b0 <updatewindow>:
    c3b0:	push   %rbp
    c3b1:	mov    %rsp,%rbp
    c3b4:	sub    $0x20,%rsp
    c3b8:	mov    %r15,-0x10(%rbp)
    c3bc:	mov    $0x1,%eax
    c3c1:	mov    0x38(%rdi),%r15
    c3c5:	mov    0x48(%r15),%rcx
    c3c9:	test   %rcx,%rcx
    c3cc:	je     c484 <updatewindow+0xd4>
    c3d2:	mov    0x3c(%r15),%ecx
    c3d6:	test   %ecx,%ecx
    c3d8:	jne    c3f4 <updatewindow+0x44>
    c3da:	mov    0x38(%r15),%ecx
    c3de:	shl    %cl,%eax
    c3e0:	mov    %eax,0x3c(%r15)
    c3e4:	movl   $0x0,0x44(%r15)
    c3ec:	movl   $0x0,0x40(%r15)
    c3f4:	mov    0x3c(%r15),%eax
    c3f8:	cmp    %edx,%eax
    c3fa:	jbe    c4c5 <updatewindow+0x115>
    c400:	mov    0x44(%r15),%edi
    c404:	sub    %edi,%eax
    c406:	cmp    %eax,%edx
    c408:	jae    c40d <updatewindow+0x5d>
    c40a:	mov    %rdx,%rax
    c40d:	add    0x48(%r15),%rdi
    c411:	mov    %edx,%ecx
    c413:	neg    %rcx
    c416:	add    %rsi,%rcx
    c419:	mov    %eax,%r8d
    c41c:	mov    %r12,-0x8(%rbp)
    c420:	mov    %r13,-0x18(%rbp)
    c424:	mov    %r14,-0x20(%rbp)
    c428:	mov    %rdx,%r12
    c42b:	mov    %r8,%rdx
    c42e:	mov    %rax,%r13
    c431:	mov    %rsi,%r14
    c434:	mov    %rcx,%rsi
    c437:	callq  21f0 <memcpy@plt>
    c43c:	cmp    %r13d,%r12d
    c43f:	jne    c4ec <updatewindow+0x13c>
    c445:	mov    %r13,%rcx
    c448:	add    0x44(%r15),%ecx
    c44c:	mov    %ecx,0x44(%r15)
    c450:	mov    0x3c(%r15),%eax
    c454:	cmp    %ecx,%eax
    c456:	jne    c460 <updatewindow+0xb0>
    c458:	movl   $0x0,0x44(%r15)
    c460:	mov    0x40(%r15),%ecx
    c464:	mov    0x3c(%r15),%eax
    c468:	cmp    %ecx,%eax
    c46a:	ja     c521 <updatewindow+0x171>
    c470:	xor    %eax,%eax
    c472:	mov    -0x20(%rbp),%r14
    c476:	mov    -0x18(%rbp),%r13
    c47a:	mov    -0x8(%rbp),%r12
    c47e:	mov    -0x10(%rbp),%r15
    c482:	leaveq 
    c483:	retq   
    c484:	mov    0x38(%r15),%ecx
    c488:	mov    %rax,%r8
    c48b:	shl    %cl,%r8d
    c48e:	mov    0x40(%rdi),%rcx
    c492:	mov    0x50(%rdi),%rdi
    c496:	mov    %rdx,-0x20(%rbp)
    c49a:	mov    %rsi,-0x18(%rbp)
    c49e:	mov    %rax,%rdx
    c4a1:	mov    %r8,%rsi
    c4a4:	callq  *%rcx
    c4a6:	mov    %rax,0x48(%r15)
    c4aa:	test   %rax,%rax
    c4ad:	je     c53e <updatewindow+0x18e>
    c4b3:	mov    $0x1,%eax
    c4b8:	mov    -0x18(%rbp),%rsi
    c4bc:	mov    -0x20(%rbp),%rdx
    c4c0:	jmpq   c3d2 <updatewindow+0x22>
    c4c5:	sub    %rax,%rsi
    c4c8:	mov    %rax,%rdx
    c4cb:	mov    0x48(%r15),%rdi
    c4cf:	callq  21f0 <memcpy@plt>
    c4d4:	movl   $0x0,0x44(%r15)
    c4dc:	mov    0x3c(%r15),%eax
    c4e0:	mov    %eax,0x40(%r15)
    c4e4:	xor    %eax,%eax
    c4e6:	mov    -0x10(%rbp),%r15
    c4ea:	leaveq 
    c4eb:	retq   
    c4ec:	sub    %r13d,%r12d
    c4ef:	mov    %r12d,%edx
    c4f2:	mov    %r14,%rsi
    c4f5:	sub    %rdx,%rsi
    c4f8:	mov    0x48(%r15),%rdi
    c4fc:	callq  21f0 <memcpy@plt>
    c501:	mov    %r12d,0x44(%r15)
    c505:	mov    0x3c(%r15),%eax
    c509:	mov    %eax,0x40(%r15)
    c50d:	xor    %eax,%eax
    c50f:	mov    -0x20(%rbp),%r14
    c513:	mov    -0x18(%rbp),%r13
    c517:	mov    -0x8(%rbp),%r12
    c51b:	mov    -0x10(%rbp),%r15
    c51f:	leaveq 
    c520:	retq   
    c521:	lea    0x0(%r13,%rcx,1),%eax
    c526:	mov    %eax,0x40(%r15)
    c52a:	xor    %eax,%eax
    c52c:	mov    -0x20(%rbp),%r14
    c530:	mov    -0x18(%rbp),%r13
    c534:	mov    -0x8(%rbp),%r12
    c538:	mov    -0x10(%rbp),%r15
    c53c:	leaveq 
    c53d:	retq   
    c53e:	mov    $0x1,%eax
    c543:	mov    -0x10(%rbp),%r15
    c547:	leaveq 
    c548:	retq   
    c549:	nopl   0x0(%rax)

000000000000c550 <syncsearch>:
    c550:	push   %rbp
    c551:	mov    %rsp,%rbp
    c554:	sub    $0x10,%rsp
    c558:	mov    %r15,-0x8(%rbp)
    c55c:	mov    (%rdi),%ecx
    c55e:	xor    %r15d,%r15d
    c561:	mov    $0x4,%r9d
    c567:	mov    $0xff,%r10d
    c56d:	mov    %r15,%rax
    c570:	jmp    c578 <syncsearch+0x28>
    c572:	add    $0x1,%ecx
    c575:	add    $0x1,%eax
    c578:	cmp    %edx,%eax
    c57a:	jae    c593 <syncsearch+0x43>
    c57c:	cmp    $0x3,%ecx
    c57f:	ja     c593 <syncsearch+0x43>
    c581:	mov    %eax,%r8d
    c584:	movzbl (%rsi,%r8,1),%r8d
    c589:	cmp    $0x1,%ecx
    c58c:	jbe    c59b <syncsearch+0x4b>
    c58e:	mov    %r10,%r11
    c591:	jmp    c59e <syncsearch+0x4e>
    c593:	mov    %ecx,(%rdi)
    c595:	mov    -0x8(%rbp),%r15
    c599:	leaveq 
    c59a:	retq   
    c59b:	mov    %r15,%r11
    c59e:	cmp    %r8d,%r11d
    c5a1:	je     c572 <syncsearch+0x22>
    c5a3:	test   %r8b,%r8b
    c5a6:	je     c5ad <syncsearch+0x5d>
    c5a8:	mov    %r15,%rcx
    c5ab:	jmp    c575 <syncsearch+0x25>
    c5ad:	neg    %ecx
    c5af:	add    %r9d,%ecx
    c5b2:	jmp    c575 <syncsearch+0x25>
    c5b4:	nopw   %cs:0x0(%rax,%rax,1)
    c5be:	xchg   %ax,%ax

000000000000c5c0 <inflate_table>:
    c5c0:	push   %rbp
    c5c1:	mov    %rsp,%rbp
    c5c4:	sub    $0x100,%rsp
    c5cb:	xor    %r11d,%r11d
    c5ce:	mov    %r11,%r10
    c5d1:	jmp    c5e4 <inflate_table+0x24>
    c5d3:	mov    %r10d,%eax
    c5d6:	movw   $0x0,-0xf0(%rbp,%rax,2)
    c5e0:	add    $0x1,%r10d
    c5e4:	cmp    $0xf,%r10d
    c5e8:	jbe    c5d3 <inflate_table+0x13>
    c5ea:	mov    %r9,-0x98(%rbp)
    c5f1:	mov    %r11,%r9
    c5f4:	jmp    c617 <inflate_table+0x57>
    c5f6:	mov    %r9d,%eax
    c5f9:	movzwl (%rsi,%rax,2),%eax
    c5fd:	movzwl -0xf0(%rbp,%rax,2),%r10d
    c606:	add    $0x1,%r10d
    c60a:	mov    %r10w,-0xf0(%rbp,%rax,2)
    c613:	add    $0x1,%r9d
    c617:	cmp    %edx,%r9d
    c61a:	jb     c5f6 <inflate_table+0x36>
    c61c:	mov    (%r8),%eax
    c61f:	mov    $0xf,%r9d
    c625:	jmp    c63d <inflate_table+0x7d>
    c627:	mov    %r9d,%r10d
    c62a:	movzwl -0xf0(%rbp,%r10,2),%r10d
    c633:	test   %r10w,%r10w
    c637:	jne    c642 <inflate_table+0x82>
    c639:	add    $0xffffffff,%r9d
    c63d:	test   %r9d,%r9d
    c640:	jne    c627 <inflate_table+0x67>
    c642:	cmp    %eax,%r9d
    c645:	jae    c64a <inflate_table+0x8a>
    c647:	mov    %r9,%rax
    c64a:	test   %r9d,%r9d
    c64d:	je     c668 <inflate_table+0xa8>
    c64f:	mov    $0x1,%r10d
    c655:	mov    %rsi,-0x90(%rbp)
    c65c:	mov    %rdx,-0xa0(%rbp)
    c663:	mov    %r10,%rdx
    c666:	jmp    c6bb <inflate_table+0xfb>
    c668:	movb   $0x40,-0xf4(%rbp)
    c66f:	movb   $0x1,-0xf3(%rbp)
    c676:	movw   $0x0,-0xf2(%rbp)
    c67f:	mov    (%rcx),%rsi
    c682:	lea    0x4(%rsi),%rax
    c686:	mov    %rax,(%rcx)
    c689:	mov    -0xf4(%rbp),%edx
    c68f:	mov    %edx,(%rsi)
    c691:	mov    (%rcx),%rax
    c694:	lea    0x4(%rax),%rsi
    c698:	mov    %rsi,(%rcx)
    c69b:	mov    %edx,(%rax)
    c69d:	movl   $0x1,(%r8)
    c6a4:	mov    %r11,%rax
    c6a7:	leaveq 
    c6a8:	retq   
    c6a9:	mov    %edx,%esi
    c6ab:	movzwl -0xf0(%rbp,%rsi,2),%esi
    c6b3:	test   %si,%si
    c6b6:	jne    c6c0 <inflate_table+0x100>
    c6b8:	add    $0x1,%edx
    c6bb:	cmp    %edx,%r9d
    c6be:	ja     c6a9 <inflate_table+0xe9>
    c6c0:	mov    $0xffffffffffffffff,%rsi
    c6c7:	cmp    %eax,%edx
    c6c9:	ja     c6e5 <inflate_table+0x125>
    c6cb:	mov    %rdi,-0xb0(%rbp)
    c6d2:	mov    %r9,-0xa8(%rbp)
    c6d9:	mov    %rdx,-0x68(%rbp)
    c6dd:	mov    %r10,%rdx
    c6e0:	mov    %rdx,%rdi
    c6e3:	jmp    c71a <inflate_table+0x15a>
    c6e5:	mov    %rdi,-0xb0(%rbp)
    c6ec:	mov    %r9,-0xa8(%rbp)
    c6f3:	mov    %rdx,%rax
    c6f6:	mov    %rax,-0x68(%rbp)
    c6fa:	mov    %r10,%rdx
    c6fd:	mov    %rdx,%rdi
    c700:	jmp    c71a <inflate_table+0x15a>
    c702:	add    %edx,%edx
    c704:	mov    %edi,%r9d
    c707:	movzwl -0xf0(%rbp,%r9,2),%r9d
    c710:	sub    %r9d,%edx
    c713:	test   %edx,%edx
    c715:	js     c733 <inflate_table+0x173>
    c717:	add    $0x1,%edi
    c71a:	cmp    $0xf,%edi
    c71d:	jbe    c702 <inflate_table+0x142>
    c71f:	test   %edx,%edx
    c721:	jle    c738 <inflate_table+0x178>
    c723:	mov    -0xb0(%rbp),%rdx
    c72a:	test   %edx,%edx
    c72c:	jne    c743 <inflate_table+0x183>
    c72e:	mov    %rsi,%rax
    c731:	leaveq 
    c732:	retq   
    c733:	mov    %rsi,%rax
    c736:	leaveq 
    c737:	retq   
    c738:	movw   $0x0,-0xce(%rbp)
    c741:	jmp    c778 <inflate_table+0x1b8>
    c743:	mov    -0xa8(%rbp),%rdx
    c74a:	cmp    $0x1,%edx
    c74d:	je     c738 <inflate_table+0x178>
    c74f:	mov    %rsi,%rax
    c752:	leaveq 
    c753:	retq   
    c754:	mov    %r10d,%esi
    c757:	movzwl -0xf0(%rbp,%rsi,2),%edx
    c75f:	movzwl -0xd0(%rbp,%rsi,2),%esi
    c767:	add    %edx,%esi
    c769:	add    $0x1,%r10d
    c76d:	mov    %r10d,%edx
    c770:	mov    %si,-0xd0(%rbp,%rdx,2)
    c778:	cmp    $0xe,%r10d
    c77c:	jbe    c754 <inflate_table+0x194>
    c77e:	mov    %rax,-0x88(%rbp)
    c785:	mov    %r15,-0x30(%rbp)
    c789:	mov    -0xa0(%rbp),%rdi
    c790:	mov    -0x98(%rbp),%rax
    c797:	mov    -0x90(%rbp),%rsi
    c79e:	mov    %r11,%rdx
    c7a1:	jmp    c7cf <inflate_table+0x20f>
    c7a3:	mov    %edx,%r9d
    c7a6:	movzwl (%rsi,%r9,2),%r15d
    c7ab:	test   %r15w,%r15w
    c7af:	je     c7cc <inflate_table+0x20c>
    c7b1:	movzwl -0xd0(%rbp,%r15,2),%r9d
    c7ba:	lea    0x1(%r9),%r10d
    c7be:	mov    %r10w,-0xd0(%rbp,%r15,2)
    c7c7:	mov    %dx,(%rax,%r9,2)
    c7cc:	add    $0x1,%edx
    c7cf:	cmp    %edx,%edi
    c7d1:	ja     c7a3 <inflate_table+0x1e3>
    c7d3:	mov    -0xb0(%rbp),%rsi
    c7da:	test   %esi,%esi
    c7dc:	jne    c845 <inflate_table+0x285>
    c7de:	mov    $0x14,%r15d
    c7e4:	mov    %rax,%rdi
    c7e7:	mov    %rdi,%r10
    c7ea:	mov    %rdi,-0x38(%rbp)
    c7ee:	mov    %r15,-0x48(%rbp)
    c7f2:	mov    %r10,-0x40(%rbp)
    c7f6:	mov    (%rcx),%r9
    c7f9:	mov    %r8,-0x8(%rbp)
    c7fd:	mov    -0x88(%rbp),%r8
    c804:	mov    %rcx,-0x60(%rbp)
    c808:	mov    %r8,%rcx
    c80b:	mov    %r12,%r8
    c80e:	mov    %r10,%r12
    c811:	mov    %r14,%r10
    c814:	mov    %rdi,%r14
    c817:	mov    $0x1,%edx
    c81c:	mov    %rdx,%rdi
    c81f:	shl    %cl,%edi
    c821:	mov    %rcx,-0x80(%rbp)
    c825:	mov    %rdi,-0x70(%rbp)
    c829:	cmp    $0x1,%esi
    c82c:	jne    c85d <inflate_table+0x29d>
    c82e:	cmp    $0x354,%edi
    c834:	jbe    c85d <inflate_table+0x29d>
    c836:	mov    %rdx,%rax
    c839:	mov    %r8,%r12
    c83c:	mov    %r10,%r14
    c83f:	mov    -0x30(%rbp),%r15
    c843:	leaveq 
    c844:	retq   
    c845:	cmp    $0x1,%esi
    c848:	je     c8aa <inflate_table+0x2ea>
    c84a:	lea    0x8e43(%rip),%rdi        # 15694 <dext.4>
    c851:	lea    0x8dfc(%rip),%r10        # 15654 <dbase.3>
    c858:	mov    %r11,%r15
    c85b:	jmp    c7ea <inflate_table+0x22a>
    c85d:	lea    -0x1(%rdi),%edx
    c860:	mov    %rdx,-0xb0(%rbp)
    c867:	mov    $0xffffffff,%edx
    c86c:	mov    %rdx,-0xa0(%rbp)
    c873:	cmp    $0x2,%esi
    c876:	je     c8c3 <inflate_table+0x303>
    c878:	mov    %rsi,-0x78(%rbp)
    c87c:	mov    %rbx,-0x10(%rbp)
    c880:	mov    %r8,-0x18(%rbp)
    c884:	mov    %r13,-0x20(%rbp)
    c888:	mov    %r10,-0x28(%rbp)
    c88c:	mov    -0x68(%rbp),%rbx
    c890:	mov    $0x1,%edx
    c895:	mov    -0xa8(%rbp),%r10
    c89c:	mov    %r11,%rsi
    c89f:	mov    %rsi,%rdi
    c8a2:	mov    %rdi,%r8
    c8a5:	jmpq   c947 <inflate_table+0x387>
    c8aa:	lea    0x8d65(%rip),%rdi        # 15616 <lext.2>
    c8b1:	mov    $0x101,%r15d
    c8b7:	lea    0x8d1a(%rip),%r10        # 155d8 <lbase.1>
    c8be:	jmpq   c7ea <inflate_table+0x22a>
    c8c3:	cmp    $0x250,%edi
    c8c9:	ja     c985 <inflate_table+0x3c5>
    c8cf:	mov    %rsi,-0x78(%rbp)
    c8d3:	mov    %rbx,-0x10(%rbp)
    c8d7:	mov    %r8,-0x18(%rbp)
    c8db:	mov    %r13,-0x20(%rbp)
    c8df:	mov    %r10,-0x28(%rbp)
    c8e3:	mov    -0x68(%rbp),%rbx
    c8e7:	mov    $0x1,%edx
    c8ec:	mov    -0xa8(%rbp),%r10
    c8f3:	mov    %r11,%rsi
    c8f6:	mov    %rsi,%rdi
    c8f9:	mov    %rdi,%r8
    c8fc:	jmp    c947 <inflate_table+0x387>
    c8fe:	lea    -0x1(%rax),%esi
    c901:	and    %edi,%esi
    c903:	lea    (%rax,%rsi,1),%edi
    c906:	mov    %ebx,%esi
    c908:	movzwl -0xf0(%rbp,%rsi,2),%eax
    c910:	add    $0xffff,%eax
    c915:	mov    %ax,-0xf0(%rbp,%rsi,2)
    c91d:	add    $0x1,%r8d
    c921:	test   %ax,%ax
    c924:	je     c996 <inflate_table+0x3d6>
    c926:	mov    -0x98(%rbp),%rax
    c92d:	mov    -0x80(%rbp),%rsi
    c931:	cmp    %ebx,%esi
    c933:	jb     c9fc <inflate_table+0x43c>
    c939:	mov    -0x58(%rbp),%rcx
    c93d:	mov    -0x88(%rbp),%rsi
    c944:	xor    %r11d,%r11d
    c947:	mov    %rbx,%r13
    c94a:	sub    %esi,%r13d
    c94d:	mov    %r13b,-0xf3(%rbp)
    c954:	mov    %r10,-0x68(%rbp)
    c958:	mov    %r8d,%r10d
    c95b:	movzwl (%rax,%r10,2),%r10d
    c960:	lea    0x1(%r10),%eax
    c964:	cmp    %eax,%r15d
    c967:	ja     ca2d <inflate_table+0x46d>
    c96d:	cmp    %r10d,%r15d
    c970:	jbe    ca6f <inflate_table+0x4af>
    c976:	mov    %r11,%r10
    c979:	movb   $0x60,-0xf4(%rbp)
    c980:	jmpq   ca34 <inflate_table+0x474>
    c985:	mov    %r8,%r12
    c988:	mov    %r10,%r14
    c98b:	mov    -0x30(%rbp),%r15
    c98f:	mov    $0x1,%eax
    c994:	leaveq 
    c995:	retq   
    c996:	cmp    %ebx,%r10d
    c999:	jne    ca87 <inflate_table+0x4c7>
    c99f:	test   %edi,%edi
    c9a1:	je     c9c9 <inflate_table+0x409>
    c9a3:	movb   $0x40,-0xf4(%rbp)
    c9aa:	mov    -0x50(%rbp),%rax
    c9ae:	mov    %al,-0xf3(%rbp)
    c9b4:	movw   $0x0,-0xf2(%rbp)
    c9bd:	mov    -0xf4(%rbp),%ecx
    c9c3:	mov    %edi,%eax
    c9c5:	mov    %ecx,(%r9,%rax,4)
    c9c9:	mov    %r13d,%eax
    c9cc:	shl    $0x2,%rax
    c9d0:	mov    -0x60(%rbp),%rcx
    c9d4:	add    (%rcx),%rax
    c9d7:	mov    %rax,(%rcx)
    c9da:	mov    -0x80(%rbp),%rcx
    c9de:	mov    -0x8(%rbp),%rax
    c9e2:	mov    %ecx,(%rax)
    c9e4:	mov    -0x28(%rbp),%r14
    c9e8:	mov    -0x20(%rbp),%r13
    c9ec:	mov    -0x18(%rbp),%r12
    c9f0:	mov    -0x10(%rbp),%rbx
    c9f4:	xor    %eax,%eax
    c9f6:	mov    -0x30(%rbp),%r15
    c9fa:	leaveq 
    c9fb:	retq   
    c9fc:	mov    %r11,-0x50(%rbp)
    ca00:	mov    -0xb0(%rbp),%r11
    ca07:	and    %edi,%r11d
    ca0a:	mov    %r11,-0xa8(%rbp)
    ca11:	cmp    %ecx,%r11d
    ca14:	jne    caa5 <inflate_table+0x4e5>
    ca1a:	mov    -0x58(%rbp),%rcx
    ca1e:	mov    -0x88(%rbp),%rsi
    ca25:	xor    %r11d,%r11d
    ca28:	jmpq   c947 <inflate_table+0x387>
    ca2d:	movb   $0x0,-0xf4(%rbp)
    ca34:	mov    %rdx,%r11
    ca37:	shl    %cl,%r11d
    ca3a:	mov    %rcx,-0x58(%rbp)
    ca3e:	mov    %r13,%rcx
    ca41:	mov    %rdx,%rax
    ca44:	shl    %cl,%eax
    ca46:	mov    %rcx,-0x50(%rbp)
    ca4a:	mov    %rsi,%rcx
    ca4d:	mov    %rdi,%r14
    ca50:	shr    %cl,%r14d
    ca53:	mov    %rcx,-0x88(%rbp)
    ca5a:	mov    %r10w,-0xf2(%rbp)
    ca62:	mov    -0x70(%rbp),%r13
    ca66:	mov    -0x68(%rbp),%r10
    ca6a:	mov    %r11,%rcx
    ca6d:	jmp    cac6 <inflate_table+0x506>
    ca6f:	sub    %r15d,%r10d
    ca72:	mov    %r10d,%eax
    ca75:	movzwl (%r12,%rax,2),%r10d
    ca7a:	movzbl (%r14,%rax,2),%eax
    ca7f:	mov    %al,-0xf4(%rbp)
    ca85:	jmp    ca34 <inflate_table+0x474>
    ca87:	mov    %r8d,%esi
    ca8a:	mov    -0x98(%rbp),%rax
    ca91:	movzwl (%rax,%rsi,2),%esi
    ca95:	mov    -0x90(%rbp),%rbx
    ca9c:	movzwl (%rbx,%rsi,2),%ebx
    caa0:	jmpq   c92d <inflate_table+0x36d>
    caa5:	mov    -0x88(%rbp),%rcx
    caac:	test   %ecx,%ecx
    caae:	je     cab3 <inflate_table+0x4f3>
    cab0:	mov    %rcx,%rsi
    cab3:	mov    %rbx,%rcx
    cab6:	sub    %esi,%ecx
    cab8:	shl    %cl,%edx
    caba:	mov    %rbx,-0xa0(%rbp)
    cac1:	jmp    cb16 <inflate_table+0x556>
    cac3:	mov    %rsi,%rcx
    cac6:	mov    %rcx,%rsi
    cac9:	sub    %eax,%esi
    cacb:	lea    (%rsi,%r14,1),%r12d
    cacf:	mov    %r12d,%r12d
    cad2:	mov    -0xf4(%rbp),%r15d
    cad9:	mov    %r15d,(%r9,%r12,4)
    cadd:	cmp    %eax,%ecx
    cadf:	jne    cac3 <inflate_table+0x503>
    cae1:	lea    0x1f(%rbx),%ecx
    cae4:	mov    %rdx,%rax
    cae7:	shl    %cl,%eax
    cae9:	mov    -0x40(%rbp),%r12
    caed:	mov    -0x48(%rbp),%r15
    caf1:	mov    -0x38(%rbp),%r14
    caf5:	mov    -0xa0(%rbp),%rcx
    cafc:	jmpq   cbb6 <inflate_table+0x5f6>
    cb01:	mov    %ebx,%ebx
    cb03:	movzwl -0xf0(%rbp,%rbx,2),%ebx
    cb0b:	sub    %ebx,%edx
    cb0d:	test   %edx,%edx
    cb0f:	jle    cb1e <inflate_table+0x55e>
    cb11:	add    $0x1,%ecx
    cb14:	add    %edx,%edx
    cb16:	lea    (%rcx,%rsi,1),%ebx
    cb19:	cmp    %ebx,%r10d
    cb1c:	ja     cb01 <inflate_table+0x541>
    cb1e:	mov    $0x1,%edx
    cb23:	mov    %rdx,%rbx
    cb26:	shl    %cl,%ebx
    cb28:	mov    -0x78(%rbp),%r10
    cb2c:	cmp    $0x1,%r10d
    cb30:	lea    0x0(%r13,%rbx,1),%ebx
    cb35:	mov    %rbx,-0x70(%rbp)
    cb39:	jne    cb47 <inflate_table+0x587>
    cb3b:	cmp    $0x354,%ebx
    cb41:	ja     cbce <inflate_table+0x60e>
    cb47:	cmp    $0x2,%r10d
    cb4b:	je     cbe7 <inflate_table+0x627>
    cb51:	mov    %r10,-0x78(%rbp)
    cb55:	mov    -0x60(%rbp),%rdx
    cb59:	mov    (%rdx),%rbx
    cb5c:	mov    %r11d,%r11d
    cb5f:	mov    %cl,(%rbx,%r11,4)
    cb63:	mov    (%rdx),%r10
    cb66:	mov    -0x80(%rbp),%rbx
    cb6a:	mov    %bl,0x1(%r10,%r11,4)
    cb6f:	mov    -0x50(%rbp),%rbx
    cb73:	mov    %ebx,%ebx
    cb75:	lea    (%r9,%rbx,4),%r9
    cb79:	mov    (%rdx),%rbx
    cb7c:	mov    %r9,%rdx
    cb7f:	sub    %rbx,%rdx
    cb82:	sar    $0x2,%rdx
    cb86:	mov    %dx,0x2(%rbx,%r11,4)
    cb8c:	mov    -0xa0(%rbp),%rbx
    cb93:	mov    -0x38(%rbp),%r14
    cb97:	xor    %r11d,%r11d
    cb9a:	mov    $0x1,%edx
    cb9f:	mov    -0x68(%rbp),%r10
    cba3:	pushq  -0xa8(%rbp)
    cba9:	popq   -0xa0(%rbp)
    cbaf:	jmpq   c947 <inflate_table+0x387>
    cbb4:	shr    %eax
    cbb6:	mov    %rax,%rsi
    cbb9:	and    %edi,%esi
    cbbb:	test   %esi,%esi
    cbbd:	jne    cbb4 <inflate_table+0x5f4>
    cbbf:	test   %eax,%eax
    cbc1:	jne    c8fe <inflate_table+0x33e>
    cbc7:	xor    %edi,%edi
    cbc9:	jmpq   c906 <inflate_table+0x346>
    cbce:	mov    %rdx,%rax
    cbd1:	mov    -0x28(%rbp),%r14
    cbd5:	mov    -0x20(%rbp),%r13
    cbd9:	mov    -0x18(%rbp),%r12
    cbdd:	mov    -0x10(%rbp),%rbx
    cbe1:	mov    -0x30(%rbp),%r15
    cbe5:	leaveq 
    cbe6:	retq   
    cbe7:	cmp    $0x250,%ebx
    cbed:	jbe    cb51 <inflate_table+0x591>
    cbf3:	mov    %rdx,%rax
    cbf6:	mov    -0x28(%rbp),%r14
    cbfa:	mov    -0x20(%rbp),%r13
    cbfe:	mov    -0x18(%rbp),%r12
    cc02:	mov    -0x10(%rbp),%rbx
    cc06:	mov    -0x30(%rbp),%r15
    cc0a:	leaveq 
    cc0b:	retq   
    cc0c:	nopl   0x0(%rax)

000000000000cc10 <_tr_init>:
    cc10:	push   %rbp
    cc11:	mov    %rsp,%rbp
    cc14:	lea    0xd4(%rdi),%rax
    cc1b:	mov    %rax,0xb58(%rdi)
    cc22:	lea    0xb11f(%rip),%rax        # 17d48 <static_l_desc>
    cc29:	mov    %rax,0xb68(%rdi)
    cc30:	lea    0x9c8(%rdi),%rax
    cc37:	mov    %rax,0xb70(%rdi)
    cc3e:	lea    0xb123(%rip),%rax        # 17d68 <static_d_desc>
    cc45:	mov    %rax,0xb80(%rdi)
    cc4c:	lea    0xabc(%rdi),%rax
    cc53:	mov    %rax,0xb88(%rdi)
    cc5a:	lea    0xb127(%rip),%rax        # 17d88 <static_bl_desc>
    cc61:	mov    %rax,0xb98(%rdi)
    cc68:	movw   $0x0,0x1730(%rdi)
    cc71:	movl   $0x0,0x1734(%rdi)
    cc7b:	callq  d320 <init_block>
    cc80:	leaveq 
    cc81:	retq   
    cc82:	data16 nopw %cs:0x0(%rax,%rax,1)
    cc8d:	nopl   (%rax)

000000000000cc90 <_tr_tally>:
    cc90:	push   %rbp
    cc91:	mov    %rsp,%rbp
    cc94:	mov    0x1710(%rdi),%rcx
    cc9b:	mov    0x170c(%rdi),%eax
    cca1:	mov    %si,(%rcx,%rax,2)
    cca5:	mov    0x170c(%rdi),%ecx
    ccab:	lea    0x1(%rcx),%eax
    ccae:	mov    %eax,0x170c(%rdi)
    ccb4:	mov    0x1700(%rdi),%rax
    ccbb:	mov    %dl,(%rcx,%rax,1)
    ccbe:	test   %esi,%esi
    ccc0:	je     cd1b <_tr_tally+0x8b>
    ccc2:	mov    0x1728(%rdi),%eax
    ccc8:	add    $0x1,%eax
    cccb:	mov    %eax,0x1728(%rdi)
    ccd1:	mov    0xb318(%rip),%r8        # 17ff0 <_dist_code@@Base+0x281c>
    ccd8:	mov    %edx,%ecx
    ccda:	mov    0xb2e7(%rip),%rax        # 17fc8 <_length_code@@Base+0x28f4>
    cce1:	movzbl (%rcx,%rax,1),%eax
    cce5:	add    $0x101,%eax
    ccea:	movslq %eax,%rax
    cced:	movzwl 0xd4(%rdi,%rax,4),%ecx
    ccf5:	add    $0x1,%ecx
    ccf8:	mov    %cx,0xd4(%rdi,%rax,4)
    cd00:	lea    -0x1(%rsi),%eax
    cd03:	cmp    $0xff,%eax
    cd08:	jbe    cd48 <_tr_tally+0xb8>
    cd0a:	shr    $0x7,%eax
    cd0d:	add    $0x100,%eax
    cd12:	mov    %eax,%eax
    cd14:	movzbl (%rax,%r8,1),%eax
    cd19:	jmp    cd4f <_tr_tally+0xbf>
    cd1b:	mov    %edx,%ecx
    cd1d:	movzwl 0xd4(%rdi,%rcx,4),%eax
    cd25:	add    $0x1,%eax
    cd28:	mov    %ax,0xd4(%rdi,%rcx,4)
    cd30:	mov    0x1708(%rdi),%eax
    cd36:	add    $0xffffffff,%eax
    cd39:	cmp    0x170c(%rdi),%eax
    cd3f:	jne    cd67 <_tr_tally+0xd7>
    cd41:	mov    $0x1,%eax
    cd46:	leaveq 
    cd47:	retq   
    cd48:	mov    %eax,%eax
    cd4a:	movzbl (%rax,%r8,1),%eax
    cd4f:	movslq %eax,%rcx
    cd52:	movzwl 0x9c8(%rdi,%rcx,4),%eax
    cd5a:	add    $0x1,%eax
    cd5d:	mov    %ax,0x9c8(%rdi,%rcx,4)
    cd65:	jmp    cd30 <_tr_tally+0xa0>
    cd67:	xor    %eax,%eax
    cd69:	leaveq 
    cd6a:	retq   
    cd6b:	nopl   0x0(%rax,%rax,1)

000000000000cd70 <_tr_flush_block>:
    cd70:	push   %rbp
    cd71:	mov    %rsp,%rbp
    cd74:	sub    $0x30,%rsp
    cd78:	mov    %r14,-0x20(%rbp)
    cd7c:	mov    %r15,-0x28(%rbp)
    cd80:	movslq 0xc4(%rdi),%rax
    cd87:	test   %eax,%eax
    cd89:	jg     cdf4 <_tr_flush_block+0x84>
    cd8b:	xor    %eax,%eax
    cd8d:	lea    0x5(%rdx),%r8
    cd91:	mov    %r12,%r14
    cd94:	mov    %rdi,%r12
    cd97:	mov    %r13,%r15
    cd9a:	mov    %rcx,%r13
    cd9d:	mov    %r8,%rdi
    cda0:	lea    0x4(%rdx),%rcx
    cda4:	cmp    %rcx,%rdi
    cda7:	jae    ce1b <_tr_flush_block+0xab>
    cda9:	mov    $0x10,%edx
    cdae:	movslq 0xc8(%r12),%rcx
    cdb6:	cmp    $0x4,%ecx
    cdb9:	je     ce30 <_tr_flush_block+0xc0>
    cdbb:	cmp    %r8,%rdi
    cdbe:	je     ce30 <_tr_flush_block+0xc0>
    cdc0:	movslq 0x1734(%r12),%rcx
    cdc8:	cmp    $0xd,%ecx
    cdcb:	jg     ce64 <_tr_flush_block+0xf4>
    cdd1:	lea    0x4(%r13),%edx
    cdd5:	shl    %cl,%edx
    cdd7:	movzwl 0x1730(%r12),%esi
    cde0:	or     %si,%dx
    cde3:	mov    %dx,0x1730(%r12)
    cdec:	add    $0x3,%ecx
    cdef:	jmpq   ceda <_tr_flush_block+0x16a>
    cdf4:	mov    (%rdi),%r8
    cdf7:	movslq 0x58(%r8),%rax
    cdfb:	cmp    $0x2,%eax
    cdfe:	je     cf20 <_tr_flush_block+0x1b0>
    ce04:	mov    %r12,%rax
    ce07:	mov    %rdi,%r12
    ce0a:	mov    %rsi,%r14
    ce0d:	mov    %rdx,%r15
    ce10:	mov    %r13,%rdx
    ce13:	mov    %rcx,%r13
    ce16:	jmpq   cf55 <_tr_flush_block+0x1e5>
    ce1b:	test   %rsi,%rsi
    ce1e:	je     cda9 <_tr_flush_block+0x39>
    ce20:	mov    %r12,%rdi
    ce23:	mov    %r13,%rcx
    ce26:	callq  2160 <_tr_stored_block@plt>
    ce2b:	jmpq   d054 <_tr_flush_block+0x2e4>
    ce30:	movslq 0x1734(%r12),%rcx
    ce38:	cmp    $0xd,%ecx
    ce3b:	jg     cfc1 <_tr_flush_block+0x251>
    ce41:	lea    0x2(%r13),%eax
    ce45:	shl    %cl,%eax
    ce47:	movzwl 0x1730(%r12),%edx
    ce50:	or     %dx,%ax
    ce53:	mov    %ax,0x1730(%r12)
    ce5c:	lea    0x3(%rcx),%eax
    ce5f:	jmpq   d036 <_tr_flush_block+0x2c6>
    ce64:	lea    0x4(%r13),%esi
    ce68:	mov    %rsi,%rdi
    ce6b:	shl    %cl,%edi
    ce6d:	movzwl 0x1730(%r12),%ecx
    ce76:	or     %cx,%di
    ce79:	mov    %di,0x1730(%r12)
    ce82:	mov    0x28(%r12),%r8
    ce87:	lea    0x1(%r8),%rcx
    ce8b:	mov    %rcx,0x28(%r12)
    ce90:	mov    0x10(%r12),%rcx
    ce95:	mov    %dil,(%r8,%rcx,1)
    ce99:	mov    0x28(%r12),%r8
    ce9e:	lea    0x1(%r8),%rcx
    cea2:	mov    %rcx,0x28(%r12)
    cea7:	movzwl 0x1730(%r12),%ecx
    ceb0:	shr    $0x8,%ecx
    ceb3:	mov    0x10(%r12),%rdi
    ceb8:	mov    %cl,(%r8,%rdi,1)
    cebc:	movslq 0x1734(%r12),%rdi
    cec4:	sub    %edi,%edx
    cec6:	movzwl %si,%esi
    cec9:	mov    %rdx,%rcx
    cecc:	shr    %cl,%esi
    cece:	mov    %si,0x1730(%r12)
    ced7:	lea    -0xd(%rdi),%ecx
    ceda:	mov    %ecx,0x1734(%r12)
    cee2:	movslq 0xb60(%r12),%rsi
    ceea:	add    $0x1,%esi
    ceed:	movslq 0xb78(%r12),%rdx
    cef5:	add    $0x1,%edx
    cef8:	lea    0x1(%rax),%ecx
    cefb:	mov    %r12,%rdi
    cefe:	callq  e320 <send_all_trees>
    cf03:	lea    0xd4(%r12),%rsi
    cf0b:	lea    0x9c8(%r12),%rdx
    cf13:	mov    %r12,%rdi
    cf16:	callq  e610 <compress_block>
    cf1b:	jmpq   d054 <_tr_flush_block+0x2e4>
    cf20:	mov    %rdi,%rax
    cf23:	mov    %rbx,-0x8(%rbp)
    cf27:	mov    %r12,-0x10(%rbp)
    cf2b:	mov    %r13,-0x18(%rbp)
    cf2f:	mov    %r8,%rbx
    cf32:	mov    %rdi,%r12
    cf35:	mov    %rax,%rdi
    cf38:	mov    %rcx,%r13
    cf3b:	mov    %rsi,%r14
    cf3e:	mov    %rdx,%r15
    cf41:	callq  eb20 <detect_data_type>
    cf46:	mov    %eax,0x58(%rbx)
    cf49:	mov    -0x18(%rbp),%rdx
    cf4d:	mov    -0x10(%rbp),%rax
    cf51:	mov    -0x8(%rbp),%rbx
    cf55:	lea    0xb58(%r12),%rsi
    cf5d:	mov    %r12,%rdi
    cf60:	mov    %rax,-0x10(%rbp)
    cf64:	mov    %rdx,-0x18(%rbp)
    cf68:	callq  d770 <build_tree>
    cf6d:	lea    0xb70(%r12),%rsi
    cf75:	mov    %r12,%rdi
    cf78:	callq  d770 <build_tree>
    cf7d:	mov    %r12,%rdi
    cf80:	callq  e280 <build_bl_tree>
    cf85:	mov    0x1720(%r12),%r8
    cf8d:	add    $0xa,%r8
    cf91:	shr    $0x3,%r8
    cf95:	mov    0x1718(%r12),%rdi
    cf9d:	add    $0xa,%rdi
    cfa1:	shr    $0x3,%rdi
    cfa5:	cmp    %rdi,%r8
    cfa8:	jbe    d071 <_tr_flush_block+0x301>
    cfae:	mov    %r15,%rdx
    cfb1:	mov    %r14,%rsi
    cfb4:	mov    -0x18(%rbp),%r15
    cfb8:	mov    -0x10(%rbp),%r14
    cfbc:	jmpq   cda0 <_tr_flush_block+0x30>
    cfc1:	lea    0x2(%r13),%eax
    cfc5:	mov    %rax,%rsi
    cfc8:	shl    %cl,%esi
    cfca:	movzwl 0x1730(%r12),%ecx
    cfd3:	or     %cx,%si
    cfd6:	mov    %si,0x1730(%r12)
    cfdf:	mov    0x28(%r12),%rdi
    cfe4:	lea    0x1(%rdi),%rcx
    cfe8:	mov    %rcx,0x28(%r12)
    cfed:	mov    0x10(%r12),%rcx
    cff2:	mov    %sil,(%rdi,%rcx,1)
    cff6:	mov    0x28(%r12),%rdi
    cffb:	lea    0x1(%rdi),%rcx
    cfff:	mov    %rcx,0x28(%r12)
    d004:	movzwl 0x1730(%r12),%ecx
    d00d:	shr    $0x8,%ecx
    d010:	mov    0x10(%r12),%rsi
    d015:	mov    %cl,(%rdi,%rsi,1)
    d018:	movslq 0x1734(%r12),%rsi
    d020:	sub    %esi,%edx
    d022:	movzwl %ax,%eax
    d025:	mov    %rdx,%rcx
    d028:	shr    %cl,%eax
    d02a:	mov    %ax,0x1730(%r12)
    d033:	lea    -0xd(%rsi),%eax
    d036:	mov    %eax,0x1734(%r12)
    d03e:	lea    0x8adb(%rip),%rsi        # 15b20 <static_ltree>
    d045:	lea    0x8f54(%rip),%rdx        # 15fa0 <static_dtree>
    d04c:	mov    %r12,%rdi
    d04f:	callq  e610 <compress_block>
    d054:	mov    %r12,%rdi
    d057:	callq  d320 <init_block>
    d05c:	test   %r13d,%r13d
    d05f:	jne    d087 <_tr_flush_block+0x317>
    d061:	mov    %r14,%r12
    d064:	mov    %r15,%r13
    d067:	mov    -0x28(%rbp),%r15
    d06b:	mov    -0x20(%rbp),%r14
    d06f:	leaveq 
    d070:	retq   
    d071:	mov    %r15,%rdx
    d074:	mov    %r14,%rsi
    d077:	mov    -0x18(%rbp),%r15
    d07b:	mov    -0x10(%rbp),%r14
    d07f:	mov    %r8,%rdi
    d082:	jmpq   cda0 <_tr_flush_block+0x30>
    d087:	mov    %r12,%rdi
    d08a:	callq  ebf0 <bi_windup>
    d08f:	mov    %r14,%r12
    d092:	mov    %r15,%r13
    d095:	mov    -0x28(%rbp),%r15
    d099:	mov    -0x20(%rbp),%r14
    d09d:	leaveq 
    d09e:	retq   
    d09f:	nop

000000000000d0a0 <_tr_flush_bits>:
    d0a0:	push   %rbp
    d0a1:	mov    %rsp,%rbp
    d0a4:	callq  ec70 <bi_flush>
    d0a9:	leaveq 
    d0aa:	retq   
    d0ab:	nopl   0x0(%rax,%rax,1)

000000000000d0b0 <_tr_align>:
    d0b0:	push   %rbp
    d0b1:	mov    %rsp,%rbp
    d0b4:	mov    $0x2,%eax
    d0b9:	movslq 0x1734(%rdi),%rcx
    d0c0:	cmp    $0xd,%ecx
    d0c3:	jg     d0dd <_tr_align+0x2d>
    d0c5:	shl    %cl,%eax
    d0c7:	movzwl 0x1730(%rdi),%edx
    d0ce:	or     %dx,%ax
    d0d1:	mov    %ax,0x1730(%rdi)
    d0d8:	lea    0x3(%rcx),%eax
    d0db:	jmp    d13d <_tr_align+0x8d>
    d0dd:	mov    %rax,%rdx
    d0e0:	shl    %cl,%edx
    d0e2:	movzwl 0x1730(%rdi),%ecx
    d0e9:	or     %cx,%dx
    d0ec:	mov    %dx,0x1730(%rdi)
    d0f3:	mov    0x28(%rdi),%rsi
    d0f7:	lea    0x1(%rsi),%rcx
    d0fb:	mov    %rcx,0x28(%rdi)
    d0ff:	mov    0x10(%rdi),%rcx
    d103:	mov    %dl,(%rsi,%rcx,1)
    d106:	mov    0x28(%rdi),%rdx
    d10a:	lea    0x1(%rdx),%rcx
    d10e:	mov    %rcx,0x28(%rdi)
    d112:	movzwl 0x1730(%rdi),%ecx
    d119:	shr    $0x8,%ecx
    d11c:	mov    0x10(%rdi),%rsi
    d120:	mov    %cl,(%rdx,%rsi,1)
    d123:	mov    $0x10,%ecx
    d128:	movslq 0x1734(%rdi),%rdx
    d12f:	sub    %edx,%ecx
    d131:	shr    %cl,%eax
    d133:	mov    %ax,0x1730(%rdi)
    d13a:	lea    -0xd(%rdx),%eax
    d13d:	mov    %eax,0x1734(%rdi)
    d143:	cmp    $0x9,%eax
    d146:	jg     d14d <_tr_align+0x9d>
    d148:	add    $0x7,%eax
    d14b:	jmp    d197 <_tr_align+0xe7>
    d14d:	mov    0x28(%rdi),%rcx
    d151:	lea    0x1(%rcx),%rax
    d155:	mov    %rax,0x28(%rdi)
    d159:	movzbl 0x1730(%rdi),%edx
    d160:	mov    0x10(%rdi),%rax
    d164:	mov    %dl,(%rcx,%rax,1)
    d167:	mov    0x28(%rdi),%rdx
    d16b:	lea    0x1(%rdx),%rax
    d16f:	mov    %rax,0x28(%rdi)
    d173:	movzwl 0x1730(%rdi),%eax
    d17a:	shr    $0x8,%eax
    d17d:	mov    0x10(%rdi),%rcx
    d181:	mov    %al,(%rdx,%rcx,1)
    d184:	movw   $0x0,0x1730(%rdi)
    d18d:	movslq 0x1734(%rdi),%rax
    d194:	add    $0xfffffff7,%eax
    d197:	mov    %eax,0x1734(%rdi)
    d19d:	callq  ec70 <bi_flush>
    d1a2:	leaveq 
    d1a3:	retq   
    d1a4:	data16 nopw %cs:0x0(%rax,%rax,1)
    d1af:	nop

000000000000d1b0 <_tr_stored_block>:
    d1b0:	push   %rbp
    d1b1:	mov    %rsp,%rbp
    d1b4:	sub    $0x20,%rsp
    d1b8:	mov    %r13,-0x8(%rbp)
    d1bc:	mov    %r14,-0x10(%rbp)
    d1c0:	mov    %r15,-0x18(%rbp)
    d1c4:	movslq 0x1734(%rdi),%rax
    d1cb:	cmp    $0xd,%eax
    d1ce:	jg     d1ff <_tr_stored_block+0x4f>
    d1d0:	mov    %r12,%r13
    d1d3:	mov    %rbx,%r12
    d1d6:	mov    %rdx,%rbx
    d1d9:	mov    %rdi,%r14
    d1dc:	mov    %rcx,%rdx
    d1df:	mov    %rax,%rcx
    d1e2:	mov    %rdx,%rax
    d1e5:	shl    %cl,%eax
    d1e7:	movzwl 0x1730(%r14),%edx
    d1ef:	or     %dx,%ax
    d1f2:	mov    %ax,0x1730(%r14)
    d1fa:	lea    0x3(%rcx),%eax
    d1fd:	jmp    d278 <_tr_stored_block+0xc8>
    d1ff:	mov    %r12,%r13
    d202:	mov    %rbx,%r12
    d205:	mov    %rdx,%rbx
    d208:	mov    %rdi,%r14
    d20b:	mov    %rcx,%rdi
    d20e:	mov    %rax,%rcx
    d211:	mov    %rdi,%rax
    d214:	shl    %cl,%eax
    d216:	movzwl 0x1730(%r14),%ecx
    d21e:	or     %cx,%ax
    d221:	mov    %ax,0x1730(%r14)
    d229:	mov    0x28(%r14),%rdx
    d22d:	lea    0x1(%rdx),%rcx
    d231:	mov    %rcx,0x28(%r14)
    d235:	mov    0x10(%r14),%rcx
    d239:	mov    %al,(%rdx,%rcx,1)
    d23c:	mov    0x28(%r14),%rdx
    d240:	lea    0x1(%rdx),%rax
    d244:	mov    %rax,0x28(%r14)
    d248:	movzwl 0x1730(%r14),%eax
    d250:	shr    $0x8,%eax
    d253:	mov    0x10(%r14),%rcx
    d257:	mov    %al,(%rdx,%rcx,1)
    d25a:	movslq 0x1734(%r14),%rdx
    d261:	mov    $0x10,%ecx
    d266:	sub    %edx,%ecx
    d268:	movzwl %di,%eax
    d26b:	shr    %cl,%eax
    d26d:	mov    %ax,0x1730(%r14)
    d275:	lea    -0xd(%rdx),%eax
    d278:	mov    %eax,0x1734(%r14)
    d27f:	mov    %rsi,%r15
    d282:	mov    %r14,%rdi
    d285:	callq  ebf0 <bi_windup>
    d28a:	mov    0x28(%r14),%rcx
    d28e:	lea    0x1(%rcx),%rax
    d292:	mov    %rax,0x28(%r14)
    d296:	mov    0x10(%r14),%rax
    d29a:	mov    %bl,(%rcx,%rax,1)
    d29d:	mov    0x28(%r14),%rdx
    d2a1:	lea    0x1(%rdx),%rax
    d2a5:	mov    %rax,0x28(%r14)
    d2a9:	movzwl %bx,%eax
    d2ac:	shr    $0x8,%eax
    d2af:	mov    0x10(%r14),%rcx
    d2b3:	mov    %al,(%rdx,%rcx,1)
    d2b6:	mov    0x28(%r14),%rcx
    d2ba:	lea    0x1(%rcx),%rax
    d2be:	mov    %rax,0x28(%r14)
    d2c2:	mov    %rbx,%rdx
    d2c5:	not    %edx
    d2c7:	mov    0x10(%r14),%rax
    d2cb:	mov    %dl,(%rcx,%rax,1)
    d2ce:	mov    0x28(%r14),%rcx
    d2d2:	lea    0x1(%rcx),%rax
    d2d6:	mov    %rax,0x28(%r14)
    d2da:	movzwl %dx,%eax
    d2dd:	shr    $0x8,%eax
    d2e0:	mov    0x10(%r14),%rdx
    d2e4:	mov    %al,(%rcx,%rdx,1)
    d2e7:	mov    0x28(%r14),%rdi
    d2eb:	add    0x10(%r14),%rdi
    d2ef:	mov    %r15,%rsi
    d2f2:	mov    %rbx,%rdx
    d2f5:	callq  21f0 <memcpy@plt>
    d2fa:	add    0x28(%r14),%rbx
    d2fe:	mov    %rbx,0x28(%r14)
    d302:	mov    %r12,%rbx
    d305:	mov    %r13,%r12
    d308:	mov    -0x18(%rbp),%r15
    d30c:	mov    -0x10(%rbp),%r14
    d310:	mov    -0x8(%rbp),%r13
    d314:	leaveq 
    d315:	retq   
    d316:	nopw   %cs:0x0(%rax,%rax,1)

000000000000d320 <init_block>:
    d320:	push   %rbp
    d321:	mov    %rsp,%rbp
    d324:	xor    %eax,%eax
    d326:	mov    %rax,%rcx
    d329:	jmp    d33b <init_block+0x1b>
    d32b:	movslq %ecx,%rdx
    d32e:	movw   $0x0,0xd4(%rdi,%rdx,4)
    d338:	add    $0x1,%ecx
    d33b:	cmp    $0x11d,%ecx
    d341:	jle    d32b <init_block+0xb>
    d343:	mov    %rax,%rcx
    d346:	jmp    d358 <init_block+0x38>
    d348:	movslq %ecx,%rdx
    d34b:	movw   $0x0,0x9c8(%rdi,%rdx,4)
    d355:	add    $0x1,%ecx
    d358:	cmp    $0x1d,%ecx
    d35b:	jle    d348 <init_block+0x28>
    d35d:	jmp    d36f <init_block+0x4f>
    d35f:	movslq %eax,%rcx
    d362:	movw   $0x0,0xabc(%rdi,%rcx,4)
    d36c:	add    $0x1,%eax
    d36f:	cmp    $0x12,%eax
    d372:	jle    d35f <init_block+0x3f>
    d374:	movw   $0x1,0x4d4(%rdi)
    d37d:	movq   $0x0,0x1720(%rdi)
    d388:	movq   $0x0,0x1718(%rdi)
    d393:	movl   $0x0,0x1728(%rdi)
    d39d:	movl   $0x0,0x170c(%rdi)
    d3a7:	leaveq 
    d3a8:	retq   
    d3a9:	nopl   0x0(%rax)

000000000000d3b0 <pqdownheap>:
    d3b0:	push   %rbp
    d3b1:	mov    %rsp,%rbp
    d3b4:	sub    $0x10,%rsp
    d3b8:	mov    %r15,-0x8(%rbp)
    d3bc:	movslq %edx,%rax
    d3bf:	movslq 0xbc0(%rdi,%rax,4),%r11
    d3c7:	lea    (%rdx,%rdx,1),%eax
    d3ca:	jmp    d41b <pqdownheap+0x6b>
    d3cc:	cmp    %ecx,%eax
    d3ce:	jl     d437 <pqdownheap+0x87>
    d3d0:	mov    %rax,%rdx
    d3d3:	movslq %edx,%r9
    d3d6:	movslq 0xbc0(%rdi,%r9,4),%r8
    d3de:	movzwl (%rsi,%r8,4),%ecx
    d3e3:	movzwl (%rsi,%r11,4),%eax
    d3e8:	cmp    %ax,%cx
    d3eb:	ja     d429 <pqdownheap+0x79>
    d3ed:	cmp    %ax,%cx
    d3f0:	jne    d408 <pqdownheap+0x58>
    d3f2:	movzbl 0x14bc(%rdi,%r8,1),%ecx
    d3fb:	movzbl 0x14bc(%rdi,%r11,1),%eax
    d404:	cmp    %al,%cl
    d406:	jae    d429 <pqdownheap+0x79>
    d408:	movslq 0xbc0(%rdi,%r9,4),%rax
    d410:	mov    %eax,0xbc0(%rdi,%r10,4)
    d418:	lea    (%rdx,%rdx,1),%eax
    d41b:	movslq %edx,%r10
    d41e:	movslq 0x14b4(%rdi),%rcx
    d425:	cmp    %ecx,%eax
    d427:	jle    d3cc <pqdownheap+0x1c>
    d429:	mov    %r11d,0xbc0(%rdi,%r10,4)
    d431:	mov    -0x8(%rbp),%r15
    d435:	leaveq 
    d436:	retq   
    d437:	movslq %eax,%rcx
    d43a:	movslq 0xbc0(%rdi,%rcx,4),%rcx
    d442:	movzwl (%rsi,%rcx,4),%r9d
    d447:	lea    0x1(%rax),%edx
    d44a:	movslq %edx,%r8
    d44d:	movslq 0xbc0(%rdi,%r8,4),%r8
    d455:	movzwl (%rsi,%r8,4),%r15d
    d45a:	cmp    %r15w,%r9w
    d45e:	ja     d3d3 <pqdownheap+0x23>
    d464:	cmp    %r15w,%r9w
    d468:	je     d472 <pqdownheap+0xc2>
    d46a:	mov    %rax,%rdx
    d46d:	jmpq   d3d3 <pqdownheap+0x23>
    d472:	movzbl 0x14bc(%rdi,%rcx,1),%ecx
    d47a:	movzbl 0x14bc(%rdi,%r8,1),%r8d
    d483:	cmp    %r8b,%cl
    d486:	jae    d3d3 <pqdownheap+0x23>
    d48c:	mov    %rax,%rdx
    d48f:	jmpq   d3d3 <pqdownheap+0x23>
    d494:	data16 nopw %cs:0x0(%rax,%rax,1)
    d49f:	nop

000000000000d4a0 <gen_bitlen>:
    d4a0:	push   %rbp
    d4a1:	mov    %rsp,%rbp
    d4a4:	sub    $0x30,%rsp
    d4a8:	mov    (%rsi),%r9
    d4ab:	mov    0x10(%rsi),%rax
    d4af:	movslq 0x18(%rax),%r8
    d4b3:	movslq 0x8(%rsi),%rcx
    d4b7:	mov    %rcx,-0x30(%rbp)
    d4bb:	mov    (%rax),%r11
    d4be:	mov    0x8(%rax),%rsi
    d4c2:	movslq 0x10(%rax),%rdx
    d4c6:	xor    %r10d,%r10d
    d4c9:	mov    %r10,%rax
    d4cc:	jmp    d4de <gen_bitlen+0x3e>
    d4ce:	movslq %eax,%rcx
    d4d1:	movw   $0x0,0xba0(%rdi,%rcx,2)
    d4db:	add    $0x1,%eax
    d4de:	cmp    $0xf,%eax
    d4e1:	jle    d4ce <gen_bitlen+0x2e>
    d4e3:	movslq 0x14b8(%rdi),%rax
    d4ea:	movslq 0xbc0(%rdi,%rax,4),%rax
    d4f2:	movw   $0x0,0x2(%r9,%rax,4)
    d4fa:	movslq 0x14b8(%rdi),%rax
    d501:	add    $0x1,%eax
    d504:	mov    %rbx,-0x8(%rbp)
    d508:	mov    %r12,-0x10(%rbp)
    d50c:	mov    %r13,-0x18(%rbp)
    d510:	mov    %r14,-0x20(%rbp)
    d514:	mov    %r15,-0x28(%rbp)
    d518:	mov    -0x30(%rbp),%r15
    d51c:	mov    %r10,%rcx
    d51f:	jmp    d56f <gen_bitlen+0xcf>
    d521:	mov    %r14,%r12
    d524:	sub    %edx,%r12d
    d527:	movslq %r12d,%r12
    d52a:	movslq (%rsi,%r12,4),%r13
    d52e:	movzwl (%r9,%r14,4),%r12d
    d533:	add    %r13d,%ebx
    d536:	mov    %ebx,%ebx
    d538:	imul   %r12,%rbx
    d53c:	add    0x1718(%rdi),%rbx
    d543:	test   %r11,%r11
    d546:	mov    %rbx,0x1718(%rdi)
    d54d:	je     d56c <gen_bitlen+0xcc>
    d54f:	movzwl 0x2(%r11,%r14,4),%ebx
    d555:	add    %r13d,%ebx
    d558:	mov    %ebx,%ebx
    d55a:	imul   %rbx,%r12
    d55e:	add    0x1720(%rdi),%r12
    d565:	mov    %r12,0x1720(%rdi)
    d56c:	add    $0x1,%eax
    d56f:	cmp    $0x23c,%eax
    d574:	jle    d590 <gen_bitlen+0xf0>
    d576:	test   %ecx,%ecx
    d578:	jne    d5ea <gen_bitlen+0x14a>
    d57a:	mov    -0x28(%rbp),%r15
    d57e:	mov    -0x20(%rbp),%r14
    d582:	mov    -0x18(%rbp),%r13
    d586:	mov    -0x10(%rbp),%r12
    d58a:	mov    -0x8(%rbp),%rbx
    d58e:	leaveq 
    d58f:	retq   
    d590:	movslq %eax,%rbx
    d593:	movslq 0xbc0(%rdi,%rbx,4),%r14
    d59b:	movzwl 0x2(%r9,%r14,4),%ebx
    d5a1:	movzwl 0x2(%r9,%rbx,4),%ebx
    d5a7:	add    $0x1,%ebx
    d5aa:	cmp    %r8d,%ebx
    d5ad:	jle    d5b5 <gen_bitlen+0x115>
    d5af:	add    $0x1,%ecx
    d5b2:	mov    %r8,%rbx
    d5b5:	mov    %bx,0x2(%r9,%r14,4)
    d5bb:	cmp    %r15d,%r14d
    d5be:	jg     d56c <gen_bitlen+0xcc>
    d5c0:	movslq %ebx,%r13
    d5c3:	movzwl 0xba0(%rdi,%r13,2),%r12d
    d5cc:	add    $0x1,%r12d
    d5d0:	mov    %r12w,0xba0(%rdi,%r13,2)
    d5d9:	cmp    %edx,%r14d
    d5dc:	jge    d521 <gen_bitlen+0x81>
    d5e2:	mov    %r10,%r13
    d5e5:	jmpq   d52e <gen_bitlen+0x8e>
    d5ea:	lea    -0x1(%r8),%r10d
    d5ee:	mov    %r10,%rdx
    d5f1:	jmp    d5f6 <gen_bitlen+0x156>
    d5f3:	add    $0xffffffff,%edx
    d5f6:	movslq %edx,%rbx
    d5f9:	movzwl 0xba0(%rdi,%rbx,2),%esi
    d601:	test   %si,%si
    d604:	je     d5f3 <gen_bitlen+0x153>
    d606:	add    $0xffff,%esi
    d60c:	mov    %si,0xba0(%rdi,%rbx,2)
    d614:	add    $0x1,%edx
    d617:	movslq %edx,%rsi
    d61a:	movzwl 0xba0(%rdi,%rsi,2),%edx
    d622:	add    $0x2,%edx
    d625:	mov    %dx,0xba0(%rdi,%rsi,2)
    d62d:	movzwl 0xba0(%rdi,%r8,2),%edx
    d636:	add    $0xffff,%edx
    d63c:	mov    %dx,0xba0(%rdi,%r8,2)
    d645:	add    $0xfffffffe,%ecx
    d648:	test   %ecx,%ecx
    d64a:	jle    d69d <gen_bitlen+0x1fd>
    d64c:	mov    %r10,%rdx
    d64f:	jmp    d5f6 <gen_bitlen+0x156>
    d651:	add    $0xffffffff,%eax
    d654:	movslq %eax,%rdx
    d657:	movslq 0xbc0(%rdi,%rdx,4),%rbx
    d65f:	cmp    %ebx,%r15d
    d662:	jl     d695 <gen_bitlen+0x1f5>
    d664:	movzwl 0x2(%r9,%rbx,4),%esi
    d66a:	cmp    %r8d,%esi
    d66d:	je     d692 <gen_bitlen+0x1f2>
    d66f:	movzwl (%r9,%rbx,4),%edx
    d674:	neg    %rsi
    d677:	add    %r10,%rsi
    d67a:	imul   %rsi,%rdx
    d67e:	add    0x1718(%rdi),%rdx
    d685:	mov    %rdx,0x1718(%rdi)
    d68c:	mov    %r8w,0x2(%r9,%rbx,4)
    d692:	add    $0xffffffff,%ecx
    d695:	test   %ecx,%ecx
    d697:	jne    d651 <gen_bitlen+0x1b1>
    d699:	add    $0xffffffff,%r8d
    d69d:	test   %r8d,%r8d
    d6a0:	jne    d6b8 <gen_bitlen+0x218>
    d6a2:	mov    -0x28(%rbp),%r15
    d6a6:	mov    -0x20(%rbp),%r14
    d6aa:	mov    -0x18(%rbp),%r13
    d6ae:	mov    -0x10(%rbp),%r12
    d6b2:	mov    -0x8(%rbp),%rbx
    d6b6:	leaveq 
    d6b7:	retq   
    d6b8:	movslq %r8d,%r10
    d6bb:	movzwl 0xba0(%rdi,%r10,2),%ecx
    d6c4:	jmp    d695 <gen_bitlen+0x1f5>
    d6c6:	nopw   %cs:0x0(%rax,%rax,1)

000000000000d6d0 <gen_codes>:
    d6d0:	push   %rbp
    d6d1:	mov    %rsp,%rbp
    d6d4:	sub    $0x40,%rsp
    d6d8:	xor    %r9d,%r9d
    d6db:	mov    $0x1,%eax
    d6e0:	mov    %r9,%rcx
    d6e3:	jmp    d702 <gen_codes+0x32>
    d6e5:	lea    -0x1(%rax),%r8d
    d6e9:	movslq %r8d,%r8
    d6ec:	movzwl (%rdx,%r8,2),%r8d
    d6f1:	add    %r8d,%ecx
    d6f4:	add    %ecx,%ecx
    d6f6:	movslq %eax,%r8
    d6f9:	mov    %cx,-0x40(%rbp,%r8,2)
    d6ff:	add    $0x1,%eax
    d702:	cmp    $0xf,%eax
    d705:	jle    d6e5 <gen_codes+0x15>
    d707:	mov    %r12,-0x8(%rbp)
    d70b:	mov    %r13,-0x10(%rbp)
    d70f:	mov    %r14,-0x18(%rbp)
    d713:	mov    %r15,-0x20(%rbp)
    d717:	mov    %r9,%r12
    d71a:	mov    %rsi,%r13
    d71d:	mov    %rdi,%r14
    d720:	jmp    d74b <gen_codes+0x7b>
    d722:	movslq %r12d,%r15
    d725:	movzwl 0x2(%r14,%r15,4),%esi
    d72b:	test   %si,%si
    d72e:	je     d747 <gen_codes+0x77>
    d730:	movzwl -0x40(%rbp,%rsi,2),%edi
    d735:	lea    0x1(%rdi),%eax
    d738:	mov    %ax,-0x40(%rbp,%rsi,2)
    d73d:	callq  ebc0 <bi_reverse>
    d742:	mov    %ax,(%r14,%r15,4)
    d747:	add    $0x1,%r12d
    d74b:	cmp    %r13d,%r12d
    d74e:	jle    d722 <gen_codes+0x52>
    d750:	mov    -0x20(%rbp),%r15
    d754:	mov    -0x18(%rbp),%r14
    d758:	mov    -0x10(%rbp),%r13
    d75c:	mov    -0x8(%rbp),%r12
    d760:	leaveq 
    d761:	retq   
    d762:	data16 nopw %cs:0x0(%rax,%rax,1)
    d76d:	nopl   (%rax)

000000000000d770 <build_tree>:
    d770:	push   %rbp
    d771:	mov    %rsp,%rbp
    d774:	sub    $0x40,%rsp
    d778:	mov    (%rsi),%r10
    d77b:	mov    0x10(%rsi),%rax
    d77f:	movslq 0x14(%rax),%r11
    d783:	mov    (%rax),%r8
    d786:	movl   $0x0,0x14b4(%rdi)
    d790:	movl   $0x23d,0x14b8(%rdi)
    d79a:	mov    $0xffffffffffffffff,%rax
    d7a1:	xor    %ecx,%ecx
    d7a3:	jmp    d7ce <build_tree+0x5e>
    d7a5:	movslq 0x14b4(%rdi),%rax
    d7ac:	add    $0x1,%eax
    d7af:	mov    %eax,0x14b4(%rdi)
    d7b5:	movslq %eax,%rax
    d7b8:	mov    %ecx,0xbc0(%rdi,%rax,4)
    d7bf:	movb   $0x0,0x14bc(%rdi,%r9,1)
    d7c8:	mov    %rcx,%rax
    d7cb:	add    $0x1,%ecx
    d7ce:	cmp    %ecx,%r11d
    d7d1:	jg     d7d8 <build_tree+0x68>
    d7d3:	xor    %r9d,%r9d
    d7d6:	jmp    d83f <build_tree+0xcf>
    d7d8:	movslq %ecx,%r9
    d7db:	movzwl (%r10,%r9,4),%edx
    d7e0:	test   %dx,%dx
    d7e3:	jne    d7a5 <build_tree+0x35>
    d7e5:	movw   $0x0,0x2(%r10,%r9,4)
    d7ed:	jmp    d7cb <build_tree+0x5b>
    d7ef:	lea    0x1(%rax),%ecx
    d7f2:	mov    %rcx,%rax
    d7f5:	movslq %edx,%rdx
    d7f8:	mov    %ecx,0xbc0(%rdi,%rdx,4)
    d7ff:	movslq %ecx,%rdx
    d802:	movw   $0x1,(%r10,%rdx,4)
    d809:	movb   $0x0,0x14bc(%rdi,%rdx,1)
    d811:	mov    0x1718(%rdi),%rcx
    d818:	add    $0xffffffffffffffff,%rcx
    d81c:	test   %r8,%r8
    d81f:	mov    %rcx,0x1718(%rdi)
    d826:	je     d83f <build_tree+0xcf>
    d828:	movzwl 0x2(%r8,%rdx,4),%edx
    d82e:	mov    0x1720(%rdi),%rcx
    d835:	sub    %rdx,%rcx
    d838:	mov    %rcx,0x1720(%rdi)
    d83f:	movslq 0x14b4(%rdi),%rcx
    d846:	cmp    $0x1,%ecx
    d849:	jle    d885 <build_tree+0x115>
    d84b:	mov    %eax,0x8(%rsi)
    d84e:	movslq 0x14b4(%rdi),%rdx
    d855:	mov    %rdx,%rcx
    d858:	shr    $0x1f,%ecx
    d85b:	add    %edx,%ecx
    d85d:	sar    %ecx
    d85f:	mov    %rbx,-0x18(%rbp)
    d863:	mov    %r12,-0x20(%rbp)
    d867:	mov    %r13,-0x28(%rbp)
    d86b:	mov    %r14,-0x30(%rbp)
    d86f:	mov    %r15,-0x38(%rbp)
    d873:	mov    %r11,-0x40(%rbp)
    d877:	mov    %r10,%rbx
    d87a:	mov    %rdi,%r12
    d87d:	mov    %rcx,%r13
    d880:	mov    %rsi,%r15
    d883:	jmp    d8b7 <build_tree+0x147>
    d885:	lea    0x1(%rcx),%edx
    d888:	mov    %edx,0x14b4(%rdi)
    d88e:	cmp    $0x1,%eax
    d891:	jle    d7ef <build_tree+0x7f>
    d897:	mov    %r9,%rcx
    d89a:	jmpq   d7f5 <build_tree+0x85>
    d89f:	mov    %rax,%r14
    d8a2:	mov    %r12,%rdi
    d8a5:	mov    %rbx,%rsi
    d8a8:	mov    %r13,%rdx
    d8ab:	callq  d3b0 <pqdownheap>
    d8b0:	add    $0xffffffff,%r13d
    d8b4:	mov    %r14,%rax
    d8b7:	test   %r13d,%r13d
    d8ba:	jg     d89f <build_tree+0x12f>
    d8bc:	mov    $0x1,%r14d
    d8c2:	mov    %r15,-0x10(%rbp)
    d8c6:	mov    %rax,-0x8(%rbp)
    d8ca:	mov    -0x40(%rbp),%r13
    d8ce:	jmp    d8d4 <build_tree+0x164>
    d8d0:	add    $0x1,%r13d
    d8d4:	movslq 0x14b4(%r12),%rcx
    d8dc:	lea    -0x1(%rcx),%eax
    d8df:	mov    %eax,0x14b4(%r12)
    d8e7:	movslq 0xbc0(%r12,%rcx,4),%rax
    d8ef:	movslq 0xbc4(%r12),%r15
    d8f7:	mov    %eax,0xbc4(%r12)
    d8ff:	mov    %r12,%rdi
    d902:	mov    %rbx,%rsi
    d905:	mov    %r14,%rdx
    d908:	callq  d3b0 <pqdownheap>
    d90d:	movslq 0x14b8(%r12),%rcx
    d915:	lea    -0x1(%rcx),%eax
    d918:	movslq %eax,%rax
    d91b:	add    $0xfffffffe,%ecx
    d91e:	movslq 0xbc4(%r12),%rsi
    d926:	mov    %r15d,0xbc0(%r12,%rax,4)
    d92e:	mov    %ecx,0x14b8(%r12)
    d936:	movslq %ecx,%rax
    d939:	mov    %esi,0xbc0(%r12,%rax,4)
    d941:	movzwl (%rbx,%rsi,4),%ecx
    d945:	movzwl (%rbx,%r15,4),%eax
    d94a:	add    %ecx,%eax
    d94c:	movslq %r13d,%rdx
    d94f:	mov    %ax,(%rbx,%rdx,4)
    d953:	movzbl 0x14bc(%r12,%r15,1),%ecx
    d95c:	movzbl 0x14bc(%r12,%rsi,1),%eax
    d965:	cmp    %cl,%al
    d967:	ja     d96c <build_tree+0x1fc>
    d969:	mov    %rcx,%rax
    d96c:	add    $0x1,%eax
    d96f:	mov    %al,0x14bc(%r12,%rdx,1)
    d977:	mov    %r13w,0x2(%rbx,%rsi,4)
    d97d:	mov    %r13w,0x2(%rbx,%r15,4)
    d983:	mov    %r13d,0xbc4(%r12)
    d98b:	mov    %r12,%rdi
    d98e:	mov    %rbx,%rsi
    d991:	mov    %r14,%rdx
    d994:	callq  d3b0 <pqdownheap>
    d999:	movslq 0x14b4(%r12),%rax
    d9a1:	cmp    $0x1,%eax
    d9a4:	jg     d8d0 <build_tree+0x160>
    d9aa:	movslq 0x14b8(%r12),%rax
    d9b2:	add    $0xffffffff,%eax
    d9b5:	mov    %eax,0x14b8(%r12)
    d9bd:	movslq 0xbc4(%r12),%rcx
    d9c5:	movslq %eax,%rax
    d9c8:	mov    %ecx,0xbc0(%r12,%rax,4)
    d9d0:	mov    %r12,%rdi
    d9d3:	mov    -0x10(%rbp),%rsi
    d9d7:	callq  d4a0 <gen_bitlen>
    d9dc:	lea    0xba0(%r12),%rdx
    d9e4:	mov    %rbx,%rdi
    d9e7:	mov    -0x8(%rbp),%rsi
    d9eb:	callq  d6d0 <gen_codes>
    d9f0:	mov    -0x38(%rbp),%r15
    d9f4:	mov    -0x30(%rbp),%r14
    d9f8:	mov    -0x28(%rbp),%r13
    d9fc:	mov    -0x20(%rbp),%r12
    da00:	mov    -0x18(%rbp),%rbx
    da04:	leaveq 
    da05:	retq   
    da06:	nopw   %cs:0x0(%rax,%rax,1)

000000000000da10 <scan_tree>:
    da10:	push   %rbp
    da11:	mov    %rsp,%rbp
    da14:	sub    $0x30,%rsp
    da18:	mov    %r14,-0x20(%rbp)
    da1c:	mov    %r13,-0x18(%rbp)
    da20:	mov    %r12,-0x10(%rbp)
    da24:	mov    %rbx,-0x8(%rbp)
    da28:	mov    %r15,-0x28(%rbp)
    da2c:	mov    $0x3,%r12d
    da32:	mov    $0x4,%ebx
    da37:	mov    $0x8a,%r13d
    da3d:	mov    $0x7,%ecx
    da42:	movzwl 0x2(%rsi),%r8d
    da47:	test   %r8w,%r8w
    da4b:	jne    da53 <scan_tree+0x43>
    da4d:	mov    %r12,%rbx
    da50:	mov    %r13,%rcx
    da53:	lea    0x1(%rdx),%eax
    da56:	movslq %eax,%rax
    da59:	movw   $0xffff,0x2(%rsi,%rax,4)
    da60:	xor    %r15d,%r15d
    da63:	mov    $0xffffffffffffffff,%r9
    da6a:	mov    %r15,%rax
    da6d:	mov    %rax,%r10
    da70:	jmp    da9c <scan_tree+0x8c>
    da72:	movzwl 0xabc(%rdi,%rcx,4),%ebx
    da7a:	lea    0x1(%rbx,%r10,1),%ebx
    da7f:	mov    %bx,0xabc(%rdi,%rcx,4)
    da87:	test   %r11w,%r11w
    da8b:	jne    dab6 <scan_tree+0xa6>
    da8d:	mov    %r8,%r9
    da90:	mov    %r12,%rbx
    da93:	mov    %r13,%rcx
    da96:	mov    %r15,%r8
    da99:	mov    %r8,%r10
    da9c:	cmp    %edx,%eax
    da9e:	jle    dad0 <scan_tree+0xc0>
    daa0:	mov    -0x28(%rbp),%r15
    daa4:	mov    -0x8(%rbp),%rbx
    daa8:	mov    -0x10(%rbp),%r12
    daac:	mov    -0x18(%rbp),%r13
    dab0:	mov    -0x20(%rbp),%r14
    dab4:	leaveq 
    dab5:	retq   
    dab6:	cmp    %r8d,%r11d
    dab9:	je     daf2 <scan_tree+0xe2>
    dabb:	mov    %r8,%r9
    dabe:	mov    %r11,%r8
    dac1:	mov    $0x7,%ecx
    dac6:	mov    $0x4,%ebx
    dacb:	mov    %r15,%r10
    dace:	jmp    da9c <scan_tree+0x8c>
    dad0:	add    $0x1,%eax
    dad3:	movslq %eax,%r11
    dad6:	movzwl 0x2(%rsi,%r11,4),%r11d
    dadc:	lea    0x1(%r10),%r14d
    dae0:	cmp    %r14d,%ecx
    dae3:	jle    db05 <scan_tree+0xf5>
    dae5:	cmp    %r8d,%r11d
    dae8:	jne    db05 <scan_tree+0xf5>
    daea:	mov    %r11,%r8
    daed:	mov    %r14,%r10
    daf0:	jmp    da9c <scan_tree+0x8c>
    daf2:	mov    %r11,%r9
    daf5:	mov    $0x6,%ecx
    dafa:	mov    %r9,%r8
    dafd:	mov    %r12,%rbx
    db00:	mov    %r15,%r10
    db03:	jmp    da9c <scan_tree+0x8c>
    db05:	movslq %r8d,%rcx
    db08:	cmp    %ebx,%r14d
    db0b:	jl     da72 <scan_tree+0x62>
    db11:	test   %r8d,%r8d
    db14:	jg     db32 <scan_tree+0x122>
    db16:	cmp    $0xa,%r14d
    db1a:	jle    db60 <scan_tree+0x150>
    db1c:	movzwl 0xb04(%rdi),%ecx
    db23:	add    $0x1,%ecx
    db26:	mov    %cx,0xb04(%rdi)
    db2d:	jmpq   da87 <scan_tree+0x77>
    db32:	cmp    %r9d,%r8d
    db35:	je     db4a <scan_tree+0x13a>
    db37:	movzwl 0xabc(%rdi,%rcx,4),%ebx
    db3f:	add    $0x1,%ebx
    db42:	mov    %bx,0xabc(%rdi,%rcx,4)
    db4a:	movzwl 0xafc(%rdi),%ecx
    db51:	add    $0x1,%ecx
    db54:	mov    %cx,0xafc(%rdi)
    db5b:	jmpq   da87 <scan_tree+0x77>
    db60:	movzwl 0xb00(%rdi),%ecx
    db67:	add    $0x1,%ecx
    db6a:	mov    %cx,0xb00(%rdi)
    db71:	jmpq   da87 <scan_tree+0x77>
    db76:	nopw   %cs:0x0(%rax,%rax,1)

000000000000db80 <send_tree>:
    db80:	push   %rbp
    db81:	mov    %rsp,%rbp
    db84:	sub    $0x30,%rsp
    db88:	mov    %r15,-0x28(%rbp)
    db8c:	mov    %r14,-0x20(%rbp)
    db90:	mov    %r13,-0x18(%rbp)
    db94:	mov    %rbx,-0x8(%rbp)
    db98:	mov    %r12,-0x10(%rbp)
    db9c:	mov    $0x10,%r9d
    dba2:	xor    %r8d,%r8d
    dba5:	mov    $0x3,%eax
    dbaa:	mov    $0x4,%ecx
    dbaf:	mov    $0xffffffffffffffff,%r10
    dbb6:	mov    $0x8a,%ebx
    dbbb:	mov    $0x7,%r12d
    dbc1:	movzwl 0x2(%rsi),%r13d
    dbc6:	test   %r13w,%r13w
    dbca:	jne    dbe0 <send_tree+0x60>
    dbcc:	mov    %rbx,%r12
    dbcf:	mov    %rax,%rcx
    dbd2:	mov    %r8,%rbx
    dbd5:	mov    %rbx,%r13
    dbd8:	mov    %r13,%r14
    dbdb:	jmpq   dc87 <send_tree+0x107>
    dbe0:	mov    %r8,%rbx
    dbe3:	mov    %rbx,%r14
    dbe6:	jmpq   dc87 <send_tree+0x107>
    dbeb:	movzwl 0xabc(%rdi,%r12,4),%eax
    dbf4:	mov    %rax,%r14
    dbf7:	shl    %cl,%r14d
    dbfa:	movzwl 0x1730(%rdi),%ecx
    dc01:	or     %cx,%r14w
    dc05:	mov    %r14w,0x1730(%rdi)
    dc0d:	mov    0x28(%rdi),%rcx
    dc11:	lea    0x1(%rcx),%r15
    dc15:	mov    %r15,0x28(%rdi)
    dc19:	mov    0x10(%rdi),%r15
    dc1d:	mov    %r14b,(%rcx,%r15,1)
    dc21:	mov    0x28(%rdi),%r15
    dc25:	lea    0x1(%r15),%rcx
    dc29:	mov    %rcx,0x28(%rdi)
    dc2d:	movzwl 0x1730(%rdi),%ecx
    dc34:	shr    $0x8,%ecx
    dc37:	mov    0x10(%rdi),%r14
    dc3b:	mov    %cl,(%r15,%r14,1)
    dc3f:	movslq 0x1734(%rdi),%r14
    dc46:	mov    %r9,%rcx
    dc49:	sub    %r14d,%ecx
    dc4c:	shr    %cl,%eax
    dc4e:	lea    -0x10(%r13,%r14,1),%ecx
    dc53:	mov    %ecx,0x1734(%rdi)
    dc59:	mov    %ax,0x1730(%rdi)
    dc60:	add    $0xffffffff,%r11d
    dc64:	test   %r11d,%r11d
    dc67:	jne    dcb8 <send_tree+0x138>
    dc69:	mov    -0x30(%rbp),%r13
    dc6d:	mov    $0x3,%eax
    dc72:	test   %r13w,%r13w
    dc76:	jne    dcf5 <send_tree+0x175>
    dc78:	mov    $0x8a,%r12d
    dc7e:	mov    %rax,%rcx
    dc81:	mov    %r8,%r13
    dc84:	mov    %r13,%r14
    dc87:	cmp    %edx,%ebx
    dc89:	jle    dd11 <send_tree+0x191>
    dc8f:	mov    -0x10(%rbp),%r12
    dc93:	mov    -0x8(%rbp),%rbx
    dc97:	mov    -0x18(%rbp),%r13
    dc9b:	mov    -0x20(%rbp),%r14
    dc9f:	mov    -0x28(%rbp),%r15
    dca3:	leaveq 
    dca4:	retq   
    dca5:	movslq %r13d,%r12
    dca8:	cmp    %ecx,%r11d
    dcab:	jge    dd3e <send_tree+0x1be>
    dcb1:	mov    %r15,-0x30(%rbp)
    dcb5:	mov    %r13,%r10
    dcb8:	movzwl 0xabe(%rdi,%r12,4),%r13d
    dcc1:	mov    %r9,%rax
    dcc4:	sub    %r13d,%eax
    dcc7:	movslq 0x1734(%rdi),%rcx
    dcce:	cmp    %ecx,%eax
    dcd0:	jl     dbeb <send_tree+0x6b>
    dcd6:	movzwl 0xabc(%rdi,%r12,4),%eax
    dcdf:	shl    %cl,%eax
    dce1:	movzwl 0x1730(%rdi),%r14d
    dce9:	or     %r14w,%ax
    dced:	add    %r13d,%ecx
    dcf0:	jmpq   dc53 <send_tree+0xd3>
    dcf5:	cmp    %r10d,%r13d
    dcf8:	je     dd90 <send_tree+0x210>
    dcfe:	mov    $0x7,%r12d
    dd04:	mov    $0x4,%ecx
    dd09:	mov    %r8,%r14
    dd0c:	jmpq   dc87 <send_tree+0x107>
    dd11:	add    $0x1,%ebx
    dd14:	movslq %ebx,%r11
    dd17:	movzwl 0x2(%rsi,%r11,4),%r15d
    dd1d:	lea    0x1(%r14),%r11d
    dd21:	cmp    %r11d,%r12d
    dd24:	jle    dca5 <send_tree+0x125>
    dd2a:	cmp    %r13d,%r15d
    dd2d:	jne    dca5 <send_tree+0x125>
    dd33:	mov    %r15,%r13
    dd36:	mov    %r11,%r14
    dd39:	jmpq   dc87 <send_tree+0x107>
    dd3e:	test   %r13d,%r13d
    dd41:	jg     dda4 <send_tree+0x224>
    dd43:	cmp    $0xa,%r11d
    dd47:	jle    ddf0 <send_tree+0x270>
    dd4d:	movzwl 0xb06(%rdi),%r12d
    dd55:	mov    %r9,%r10
    dd58:	sub    %r12d,%r10d
    dd5b:	movslq 0x1734(%rdi),%rcx
    dd62:	cmp    %r10d,%ecx
    dd65:	jg     de33 <send_tree+0x2b3>
    dd6b:	mov    %r13,%r10
    dd6e:	mov    %r15,%r13
    dd71:	movzwl 0xb04(%rdi),%r11d
    dd79:	shl    %cl,%r11d
    dd7c:	movzwl 0x1730(%rdi),%r15d
    dd84:	or     %r15w,%r11w
    dd88:	add    %r12d,%ecx
    dd8b:	jmpq   dea2 <send_tree+0x322>
    dd90:	mov    $0x6,%r12d
    dd96:	mov    %rax,%rcx
    dd99:	mov    %r8,%r14
    dd9c:	mov    %r13,%r10
    dd9f:	jmpq   dc87 <send_tree+0x107>
    dda4:	cmp    %r10d,%r13d
    dda7:	jne    dedd <send_tree+0x35d>
    ddad:	mov    %r13,%r10
    ddb0:	mov    %r15,%r13
    ddb3:	movzwl 0xafe(%rdi),%r14d
    ddbb:	mov    %r9,%r12
    ddbe:	sub    %r14d,%r12d
    ddc1:	movslq 0x1734(%rdi),%rcx
    ddc8:	cmp    %ecx,%r12d
    ddcb:	jl     df39 <send_tree+0x3b9>
    ddd1:	movzwl 0xafc(%rdi),%r12d
    ddd9:	shl    %cl,%r12d
    dddc:	movzwl 0x1730(%rdi),%r15d
    dde4:	or     %r15w,%r12w
    dde8:	add    %r14d,%ecx
    ddeb:	jmpq   dfa2 <send_tree+0x422>
    ddf0:	movzwl 0xb02(%rdi),%r12d
    ddf8:	mov    %r9,%r10
    ddfb:	sub    %r12d,%r10d
    ddfe:	movslq 0x1734(%rdi),%rcx
    de05:	cmp    %ecx,%r10d
    de08:	jl     dfdd <send_tree+0x45d>
    de0e:	mov    %r13,%r10
    de11:	mov    %r15,%r13
    de14:	movzwl 0xb00(%rdi),%r11d
    de1c:	shl    %cl,%r11d
    de1f:	movzwl 0x1730(%rdi),%r15d
    de27:	or     %r15w,%r11w
    de2b:	add    %r12d,%ecx
    de2e:	jmpq   e04c <send_tree+0x4cc>
    de33:	mov    %r13,%r10
    de36:	mov    %r15,%r13
    de39:	movzwl 0xb04(%rdi),%r11d
    de41:	mov    %r11,%rax
    de44:	shl    %cl,%eax
    de46:	movzwl 0x1730(%rdi),%ecx
    de4d:	or     %cx,%ax
    de50:	mov    %ax,0x1730(%rdi)
    de57:	mov    0x28(%rdi),%rcx
    de5b:	lea    0x1(%rcx),%r15
    de5f:	mov    %r15,0x28(%rdi)
    de63:	mov    0x10(%rdi),%r15
    de67:	mov    %al,(%rcx,%r15,1)
    de6b:	mov    0x28(%rdi),%r15
    de6f:	lea    0x1(%r15),%rax
    de73:	mov    %rax,0x28(%rdi)
    de77:	movzwl 0x1730(%rdi),%eax
    de7e:	shr    $0x8,%eax
    de81:	mov    0x10(%rdi),%rcx
    de85:	mov    %al,(%r15,%rcx,1)
    de89:	movslq 0x1734(%rdi),%rax
    de90:	mov    %r9,%rcx
    de93:	sub    %eax,%ecx
    de95:	shr    %cl,%r11d
    de98:	lea    -0x10(%r12,%rax,1),%ecx
    de9d:	mov    $0x3,%eax
    dea2:	mov    %ecx,0x1734(%rdi)
    dea8:	mov    %r11w,0x1730(%rdi)
    deb0:	cmp    $0x9,%ecx
    deb3:	jg     e087 <send_tree+0x507>
    deb9:	lea    0xfff6(%r14),%r12d
    dec0:	shl    %cl,%r12d
    dec3:	or     %r11w,%r12w
    dec7:	mov    %r12w,0x1730(%rdi)
    decf:	add    $0x7,%ecx
    ded2:	mov    %ecx,0x1734(%rdi)
    ded8:	jmpq   dc72 <send_tree+0xf2>
    dedd:	movzwl 0xabe(%rdi,%r12,4),%r10d
    dee6:	mov    %r9,%r11
    dee9:	sub    %r10d,%r11d
    deec:	movslq 0x1734(%rdi),%rcx
    def3:	cmp    %ecx,%r11d
    def6:	jl     e0ff <send_tree+0x57f>
    defc:	movzwl 0xabc(%rdi,%r12,4),%r11d
    df05:	mov    %r13,%r12
    df08:	mov    %r15,%r13
    df0b:	mov    %r10,%r15
    df0e:	mov    %r12,%r10
    df11:	shl    %cl,%r11d
    df14:	movzwl 0x1730(%rdi),%r12d
    df1c:	or     %r12w,%r11w
    df20:	mov    %r11w,0x1730(%rdi)
    df28:	add    %r15d,%ecx
    df2b:	mov    %ecx,0x1734(%rdi)
    df31:	mov    %r14,%r11
    df34:	jmpq   ddb3 <send_tree+0x233>
    df39:	movzwl 0xafc(%rdi),%r12d
    df41:	mov    %r12,%rax
    df44:	shl    %cl,%eax
    df46:	movzwl 0x1730(%rdi),%ecx
    df4d:	or     %cx,%ax
    df50:	mov    %ax,0x1730(%rdi)
    df57:	mov    0x28(%rdi),%rcx
    df5b:	lea    0x1(%rcx),%r15
    df5f:	mov    %r15,0x28(%rdi)
    df63:	mov    0x10(%rdi),%r15
    df67:	mov    %al,(%rcx,%r15,1)
    df6b:	mov    0x28(%rdi),%rcx
    df6f:	lea    0x1(%rcx),%rax
    df73:	mov    %rax,0x28(%rdi)
    df77:	movzwl 0x1730(%rdi),%eax
    df7e:	shr    $0x8,%eax
    df81:	mov    0x10(%rdi),%r15
    df85:	mov    %al,(%rcx,%r15,1)
    df89:	movslq 0x1734(%rdi),%rax
    df90:	mov    %r9,%rcx
    df93:	sub    %eax,%ecx
    df95:	shr    %cl,%r12d
    df98:	lea    -0x10(%r14,%rax,1),%ecx
    df9d:	mov    $0x3,%eax
    dfa2:	mov    %ecx,0x1734(%rdi)
    dfa8:	mov    %r12w,0x1730(%rdi)
    dfb0:	cmp    $0xe,%ecx
    dfb3:	jg     e18a <send_tree+0x60a>
    dfb9:	add    $0xfffd,%r11d
    dfc0:	shl    %cl,%r11d
    dfc3:	or     %r12w,%r11w
    dfc7:	mov    %r11w,0x1730(%rdi)
    dfcf:	add    $0x2,%ecx
    dfd2:	mov    %ecx,0x1734(%rdi)
    dfd8:	jmpq   dc72 <send_tree+0xf2>
    dfdd:	mov    %r13,%r10
    dfe0:	mov    %r15,%r13
    dfe3:	movzwl 0xb00(%rdi),%r11d
    dfeb:	mov    %r11,%rax
    dfee:	shl    %cl,%eax
    dff0:	movzwl 0x1730(%rdi),%ecx
    dff7:	or     %cx,%ax
    dffa:	mov    %ax,0x1730(%rdi)
    e001:	mov    0x28(%rdi),%rcx
    e005:	lea    0x1(%rcx),%r15
    e009:	mov    %r15,0x28(%rdi)
    e00d:	mov    0x10(%rdi),%r15
    e011:	mov    %al,(%rcx,%r15,1)
    e015:	mov    0x28(%rdi),%r15
    e019:	lea    0x1(%r15),%rax
    e01d:	mov    %rax,0x28(%rdi)
    e021:	movzwl 0x1730(%rdi),%eax
    e028:	shr    $0x8,%eax
    e02b:	mov    0x10(%rdi),%rcx
    e02f:	mov    %al,(%r15,%rcx,1)
    e033:	movslq 0x1734(%rdi),%rax
    e03a:	mov    %r9,%rcx
    e03d:	sub    %eax,%ecx
    e03f:	shr    %cl,%r11d
    e042:	lea    -0x10(%r12,%rax,1),%ecx
    e047:	mov    $0x3,%eax
    e04c:	mov    %ecx,0x1734(%rdi)
    e052:	mov    %r11w,0x1730(%rdi)
    e05a:	cmp    $0xd,%ecx
    e05d:	jg     e201 <send_tree+0x681>
    e063:	lea    0xfffe(%r14),%r12d
    e06a:	shl    %cl,%r12d
    e06d:	or     %r11w,%r12w
    e071:	mov    %r12w,0x1730(%rdi)
    e079:	add    $0x3,%ecx
    e07c:	mov    %ecx,0x1734(%rdi)
    e082:	jmpq   dc72 <send_tree+0xf2>
    e087:	add    $0xfff6,%r14d
    e08e:	mov    %r14,%r12
    e091:	shl    %cl,%r12d
    e094:	or     %r12w,%r11w
    e098:	mov    %r11w,0x1730(%rdi)
    e0a0:	mov    0x28(%rdi),%rcx
    e0a4:	lea    0x1(%rcx),%r12
    e0a8:	mov    %r12,0x28(%rdi)
    e0ac:	mov    0x10(%rdi),%r12
    e0b0:	mov    %r11b,(%rcx,%r12,1)
    e0b4:	mov    0x28(%rdi),%r12
    e0b8:	lea    0x1(%r12),%rcx
    e0bd:	mov    %rcx,0x28(%rdi)
    e0c1:	movzwl 0x1730(%rdi),%ecx
    e0c8:	shr    $0x8,%ecx
    e0cb:	mov    0x10(%rdi),%r11
    e0cf:	mov    %cl,(%r12,%r11,1)
    e0d3:	movslq 0x1734(%rdi),%r12
    e0da:	mov    %r9,%rcx
    e0dd:	sub    %r12d,%ecx
    e0e0:	movzwl %r14w,%r11d
    e0e4:	shr    %cl,%r11d
    e0e7:	mov    %r11w,0x1730(%rdi)
    e0ef:	lea    -0x9(%r12),%ecx
    e0f4:	mov    %ecx,0x1734(%rdi)
    e0fa:	jmpq   dc72 <send_tree+0xf2>
    e0ff:	movzwl 0xabc(%rdi,%r12,4),%eax
    e108:	mov    %r10,%r11
    e10b:	mov    %r13,%r10
    e10e:	mov    %r15,%r13
    e111:	mov    %rax,%r12
    e114:	shl    %cl,%r12d
    e117:	movzwl 0x1730(%rdi),%ecx
    e11e:	or     %cx,%r12w
    e122:	mov    %r12w,0x1730(%rdi)
    e12a:	mov    0x28(%rdi),%rcx
    e12e:	lea    0x1(%rcx),%r15
    e132:	mov    %r15,0x28(%rdi)
    e136:	mov    0x10(%rdi),%r15
    e13a:	mov    %r12b,(%rcx,%r15,1)
    e13e:	mov    0x28(%rdi),%r15
    e142:	lea    0x1(%r15),%rcx
    e146:	mov    %rcx,0x28(%rdi)
    e14a:	movzwl 0x1730(%rdi),%ecx
    e151:	shr    $0x8,%ecx
    e154:	mov    0x10(%rdi),%r12
    e158:	mov    %cl,(%r15,%r12,1)
    e15c:	movslq 0x1734(%rdi),%r12
    e163:	mov    %r9,%rcx
    e166:	sub    %r12d,%ecx
    e169:	shr    %cl,%eax
    e16b:	mov    %ax,0x1730(%rdi)
    e172:	lea    -0x10(%r11,%r12,1),%eax
    e177:	mov    %eax,0x1734(%rdi)
    e17d:	mov    %r14,%r11
    e180:	mov    $0x3,%eax
    e185:	jmpq   ddb3 <send_tree+0x233>
    e18a:	add    $0xfffd,%r11d
    e191:	mov    %r11,%r14
    e194:	shl    %cl,%r14d
    e197:	or     %r14w,%r12w
    e19b:	mov    %r12w,0x1730(%rdi)
    e1a3:	mov    0x28(%rdi),%r14
    e1a7:	lea    0x1(%r14),%rcx
    e1ab:	mov    %rcx,0x28(%rdi)
    e1af:	mov    0x10(%rdi),%rcx
    e1b3:	mov    %r12b,(%r14,%rcx,1)
    e1b7:	mov    0x28(%rdi),%r14
    e1bb:	lea    0x1(%r14),%rcx
    e1bf:	mov    %rcx,0x28(%rdi)
    e1c3:	movzwl 0x1730(%rdi),%ecx
    e1ca:	shr    $0x8,%ecx
    e1cd:	mov    0x10(%rdi),%r12
    e1d1:	mov    %cl,(%r14,%r12,1)
    e1d5:	movslq 0x1734(%rdi),%r12
    e1dc:	mov    %r9,%rcx
    e1df:	sub    %r12d,%ecx
    e1e2:	movzwl %r11w,%r11d
    e1e6:	shr    %cl,%r11d
    e1e9:	mov    %r11w,0x1730(%rdi)
    e1f1:	lea    -0xe(%r12),%ecx
    e1f6:	mov    %ecx,0x1734(%rdi)
    e1fc:	jmpq   dc72 <send_tree+0xf2>
    e201:	lea    0xfffe(%r14),%r12d
    e208:	mov    %r12,%r14
    e20b:	shl    %cl,%r14d
    e20e:	or     %r14w,%r11w
    e212:	mov    %r11w,0x1730(%rdi)
    e21a:	mov    0x28(%rdi),%r14
    e21e:	lea    0x1(%r14),%rcx
    e222:	mov    %rcx,0x28(%rdi)
    e226:	mov    0x10(%rdi),%rcx
    e22a:	mov    %r11b,(%r14,%rcx,1)
    e22e:	mov    0x28(%rdi),%r14
    e232:	lea    0x1(%r14),%rcx
    e236:	mov    %rcx,0x28(%rdi)
    e23a:	movzwl 0x1730(%rdi),%ecx
    e241:	shr    $0x8,%ecx
    e244:	mov    0x10(%rdi),%r11
    e248:	mov    %cl,(%r14,%r11,1)
    e24c:	movslq 0x1734(%rdi),%r14
    e253:	mov    %r9,%rcx
    e256:	sub    %r14d,%ecx
    e259:	movzwl %r12w,%r11d
    e25d:	shr    %cl,%r11d
    e260:	mov    %r11w,0x1730(%rdi)
    e268:	lea    -0xd(%r14),%ecx
    e26c:	mov    %ecx,0x1734(%rdi)
    e272:	jmpq   dc72 <send_tree+0xf2>
    e277:	nopw   0x0(%rax,%rax,1)

000000000000e280 <build_bl_tree>:
    e280:	push   %rbp
    e281:	mov    %rsp,%rbp
    e284:	sub    $0x10,%rsp
    e288:	mov    %r15,-0x8(%rbp)
    e28c:	lea    0xd4(%rdi),%rsi
    e293:	movslq 0xb60(%rdi),%rdx
    e29a:	mov    %rdi,%r15
    e29d:	callq  da10 <scan_tree>
    e2a2:	lea    0x9c8(%r15),%rsi
    e2a9:	movslq 0xb78(%r15),%rdx
    e2b0:	mov    %r15,%rdi
    e2b3:	callq  da10 <scan_tree>
    e2b8:	lea    0xb88(%r15),%rsi
    e2bf:	mov    %r15,%rdi
    e2c2:	callq  d770 <build_tree>
    e2c7:	lea    0x783e(%rip),%rdx        # 15b0c <bl_order>
    e2ce:	mov    $0x12,%eax
    e2d3:	jmp    e2ed <build_bl_tree+0x6d>
    e2d5:	movslq %eax,%rcx
    e2d8:	movzbl (%rcx,%rdx,1),%ecx
    e2dc:	movzwl 0xabe(%r15,%rcx,4),%ecx
    e2e5:	test   %cx,%cx
    e2e8:	jne    e2f2 <build_bl_tree+0x72>
    e2ea:	add    $0xffffffff,%eax
    e2ed:	cmp    $0x2,%eax
    e2f0:	jg     e2d5 <build_bl_tree+0x55>
    e2f2:	mov    0x1718(%r15),%rdx
    e2f9:	movslq %eax,%rcx
    e2fc:	lea    (%rcx,%rcx,2),%rcx
    e300:	lea    0x11(%rdx,%rcx,1),%rcx
    e305:	mov    %rcx,0x1718(%r15)
    e30c:	mov    -0x8(%rbp),%r15
    e310:	leaveq 
    e311:	retq   
    e312:	data16 nopw %cs:0x0(%rax,%rax,1)
    e31d:	nopl   (%rax)

000000000000e320 <send_all_trees>:
    e320:	push   %rbp
    e321:	mov    %rsp,%rbp
    e324:	sub    $0x10,%rsp
    e328:	mov    %r15,-0x10(%rbp)
    e32c:	mov    %r14,-0x8(%rbp)
    e330:	mov    $0x10,%r8d
    e336:	movslq 0x1734(%rdi),%rax
    e33d:	cmp    $0xb,%eax
    e340:	jg     e36e <send_all_trees+0x4e>
    e342:	mov    %rcx,%r10
    e345:	mov    %rax,%rcx
    e348:	mov    %r10,%rax
    e34b:	lea    0xfeff(%rsi),%r9d
    e352:	shl    %cl,%r9d
    e355:	movzwl 0x1730(%rdi),%r10d
    e35d:	or     %r10w,%r9w
    e361:	mov    %r9w,0x1730(%rdi)
    e369:	add    $0x5,%ecx
    e36c:	jmp    e3e9 <send_all_trees+0xc9>
    e36e:	mov    %rcx,%r10
    e371:	mov    %rax,%rcx
    e374:	mov    %r10,%rax
    e377:	lea    0xfeff(%rsi),%r9d
    e37e:	mov    %r9,%r10
    e381:	shl    %cl,%r10d
    e384:	movzwl 0x1730(%rdi),%ecx
    e38b:	or     %cx,%r10w
    e38f:	mov    %r10w,0x1730(%rdi)
    e397:	mov    0x28(%rdi),%r11
    e39b:	lea    0x1(%r11),%rcx
    e39f:	mov    %rcx,0x28(%rdi)
    e3a3:	mov    0x10(%rdi),%rcx
    e3a7:	mov    %r10b,(%r11,%rcx,1)
    e3ab:	mov    0x28(%rdi),%r11
    e3af:	lea    0x1(%r11),%rcx
    e3b3:	mov    %rcx,0x28(%rdi)
    e3b7:	movzwl 0x1730(%rdi),%ecx
    e3be:	shr    $0x8,%ecx
    e3c1:	mov    0x10(%rdi),%r10
    e3c5:	mov    %cl,(%r11,%r10,1)
    e3c9:	movslq 0x1734(%rdi),%r10
    e3d0:	mov    %r8,%rcx
    e3d3:	sub    %r10d,%ecx
    e3d6:	movzwl %r9w,%r9d
    e3da:	shr    %cl,%r9d
    e3dd:	mov    %r9w,0x1730(%rdi)
    e3e5:	lea    -0xb(%r10),%ecx
    e3e9:	mov    %ecx,0x1734(%rdi)
    e3ef:	lea    -0x1(%rdx),%r14d
    e3f3:	cmp    $0xb,%ecx
    e3f6:	jg     e418 <send_all_trees+0xf8>
    e3f8:	add    $0xffff,%edx
    e3fe:	shl    %cl,%edx
    e400:	movzwl 0x1730(%rdi),%r9d
    e408:	or     %r9w,%dx
    e40c:	mov    %dx,0x1730(%rdi)
    e413:	add    $0x5,%ecx
    e416:	jmp    e47e <send_all_trees+0x15e>
    e418:	mov    %r14,%rdx
    e41b:	shl    %cl,%edx
    e41d:	movzwl 0x1730(%rdi),%ecx
    e424:	or     %cx,%dx
    e427:	mov    %dx,0x1730(%rdi)
    e42e:	mov    0x28(%rdi),%rcx
    e432:	lea    0x1(%rcx),%r9
    e436:	mov    %r9,0x28(%rdi)
    e43a:	mov    0x10(%rdi),%r9
    e43e:	mov    %dl,(%rcx,%r9,1)
    e442:	mov    0x28(%rdi),%rdx
    e446:	lea    0x1(%rdx),%rcx
    e44a:	mov    %rcx,0x28(%rdi)
    e44e:	movzwl 0x1730(%rdi),%ecx
    e455:	shr    $0x8,%ecx
    e458:	mov    0x10(%rdi),%r9
    e45c:	mov    %cl,(%rdx,%r9,1)
    e460:	movslq 0x1734(%rdi),%r9
    e467:	mov    %r8,%rcx
    e46a:	sub    %r9d,%ecx
    e46d:	movzwl %r14w,%edx
    e471:	shr    %cl,%edx
    e473:	mov    %dx,0x1730(%rdi)
    e47a:	lea    -0xb(%r9),%ecx
    e47e:	mov    %ecx,0x1734(%rdi)
    e484:	lea    0x7681(%rip),%r10        # 15b0c <bl_order>
    e48b:	xor    %r9d,%r9d
    e48e:	cmp    $0xc,%ecx
    e491:	jg     e4b6 <send_all_trees+0x196>
    e493:	lea    0xfffc(%rax),%edx
    e499:	shl    %cl,%edx
    e49b:	movzwl 0x1730(%rdi),%r11d
    e4a3:	or     %r11w,%dx
    e4a7:	mov    %dx,0x1730(%rdi)
    e4ae:	add    $0x4,%ecx
    e4b1:	jmpq   e59b <send_all_trees+0x27b>
    e4b6:	lea    0xfffc(%rax),%r11d
    e4bd:	mov    %r11,%rdx
    e4c0:	shl    %cl,%edx
    e4c2:	movzwl 0x1730(%rdi),%ecx
    e4c9:	or     %cx,%dx
    e4cc:	mov    %dx,0x1730(%rdi)
    e4d3:	mov    0x28(%rdi),%rcx
    e4d7:	lea    0x1(%rcx),%r15
    e4db:	mov    %r15,0x28(%rdi)
    e4df:	mov    0x10(%rdi),%r15
    e4e3:	mov    %dl,(%rcx,%r15,1)
    e4e7:	mov    0x28(%rdi),%r15
    e4eb:	lea    0x1(%r15),%rcx
    e4ef:	mov    %rcx,0x28(%rdi)
    e4f3:	movzwl 0x1730(%rdi),%ecx
    e4fa:	shr    $0x8,%ecx
    e4fd:	mov    0x10(%rdi),%rdx
    e501:	mov    %cl,(%r15,%rdx,1)
    e505:	movslq 0x1734(%rdi),%r15
    e50c:	mov    %r8,%rcx
    e50f:	sub    %r15d,%ecx
    e512:	movzwl %r11w,%edx
    e516:	shr    %cl,%edx
    e518:	mov    %dx,0x1730(%rdi)
    e51f:	lea    -0xc(%r15),%ecx
    e523:	jmp    e59b <send_all_trees+0x27b>
    e525:	movzbl (%rdx,%r10,1),%edx
    e52a:	movzwl 0xabe(%rdi,%rdx,4),%edx
    e532:	mov    %rdx,%r11
    e535:	shl    %cl,%r11d
    e538:	movzwl 0x1730(%rdi),%ecx
    e53f:	or     %cx,%r11w
    e543:	mov    %r11w,0x1730(%rdi)
    e54b:	mov    0x28(%rdi),%rcx
    e54f:	lea    0x1(%rcx),%r15
    e553:	mov    %r15,0x28(%rdi)
    e557:	mov    0x10(%rdi),%r15
    e55b:	mov    %r11b,(%rcx,%r15,1)
    e55f:	mov    0x28(%rdi),%r15
    e563:	lea    0x1(%r15),%rcx
    e567:	mov    %rcx,0x28(%rdi)
    e56b:	movzwl 0x1730(%rdi),%ecx
    e572:	shr    $0x8,%ecx
    e575:	mov    0x10(%rdi),%r11
    e579:	mov    %cl,(%r15,%r11,1)
    e57d:	movslq 0x1734(%rdi),%r11
    e584:	mov    %r8,%rcx
    e587:	sub    %r11d,%ecx
    e58a:	shr    %cl,%edx
    e58c:	lea    -0xd(%r11),%ecx
    e590:	mov    %dx,0x1730(%rdi)
    e597:	add    $0x1,%r9d
    e59b:	mov    %ecx,0x1734(%rdi)
    e5a1:	cmp    %eax,%r9d
    e5a4:	jl     e5d7 <send_all_trees+0x2b7>
    e5a6:	lea    0xd4(%rdi),%rax
    e5ad:	lea    -0x1(%rsi),%edx
    e5b0:	mov    %rax,%rsi
    e5b3:	mov    %rdi,%r15
    e5b6:	callq  db80 <send_tree>
    e5bb:	mov    %r14,%rdx
    e5be:	mov    %r15,%rdi
    e5c1:	lea    0x9c8(%rdi),%rsi
    e5c8:	callq  db80 <send_tree>
    e5cd:	mov    -0x8(%rbp),%r14
    e5d1:	mov    -0x10(%rbp),%r15
    e5d5:	leaveq 
    e5d6:	retq   
    e5d7:	movslq %r9d,%rdx
    e5da:	cmp    $0xd,%ecx
    e5dd:	jg     e525 <send_all_trees+0x205>
    e5e3:	movzbl (%rdx,%r10,1),%edx
    e5e8:	movzwl 0xabe(%rdi,%rdx,4),%edx
    e5f0:	shl    %cl,%edx
    e5f2:	movzwl 0x1730(%rdi),%r11d
    e5fa:	or     %r11w,%dx
    e5fe:	add    $0x3,%ecx
    e601:	jmp    e590 <send_all_trees+0x270>
    e603:	data16 nopw %cs:0x0(%rax,%rax,1)
    e60e:	xchg   %ax,%ax

000000000000e610 <compress_block>:
    e610:	push   %rbp
    e611:	mov    %rsp,%rbp
    e614:	sub    $0x30,%rsp
    e618:	mov    $0x10,%eax
    e61d:	mov    0x170c(%rdi),%ecx
    e623:	test   %ecx,%ecx
    e625:	je     e75d <compress_block+0x14d>
    e62b:	mov    0x9996(%rip),%r10        # 17fc8 <_length_code@@Base+0x28f4>
    e632:	mov    %r10,-0x30(%rbp)
    e636:	mov    0x99b3(%rip),%r8        # 17ff0 <_dist_code@@Base+0x281c>
    e63d:	mov    %r15,-0x28(%rbp)
    e641:	lea    0x738c(%rip),%r11        # 159d4 <extra_lbits>
    e648:	mov    %r14,-0x20(%rbp)
    e64c:	xor    %r9d,%r9d
    e64f:	mov    %rbx,-0x8(%rbp)
    e653:	mov    %r12,-0x10(%rbp)
    e657:	mov    %r13,-0x18(%rbp)
    e65b:	mov    %r9d,%ebx
    e65e:	mov    0x1700(%rdi),%rcx
    e665:	movzbl (%rbx,%rcx,1),%r13d
    e66a:	mov    0x1710(%rdi),%rcx
    e671:	movzwl (%rcx,%rbx,2),%r12d
    e676:	test   %r12w,%r12w
    e67a:	je     e7a0 <compress_block+0x190>
    e680:	movzbl 0x0(%r13,%r10,1),%r14d
    e686:	lea    0x101(%r14),%ecx
    e68d:	mov    %ecx,%ebx
    e68f:	movzwl 0x2(%rsi,%rbx,4),%r15d
    e695:	sub    %r15d,%eax
    e698:	movslq 0x1734(%rdi),%rcx
    e69f:	cmp    %eax,%ecx
    e6a1:	jg     e7e3 <compress_block+0x1d3>
    e6a7:	movzwl (%rsi,%rbx,4),%ebx
    e6ab:	shl    %cl,%ebx
    e6ad:	movzwl 0x1730(%rdi),%eax
    e6b4:	or     %ax,%bx
    e6b7:	add    %r15d,%ecx
    e6ba:	mov    $0x10,%eax
    e6bf:	jmpq   e84c <compress_block+0x23c>
    e6c4:	movzwl (%rsi,%r13,4),%ebx
    e6c9:	mov    %rbx,%r13
    e6cc:	shl    %cl,%r13d
    e6cf:	movzwl 0x1730(%rdi),%ecx
    e6d6:	or     %cx,%r13w
    e6da:	mov    %r13w,0x1730(%rdi)
    e6e2:	mov    0x28(%rdi),%r14
    e6e6:	lea    0x1(%r14),%rcx
    e6ea:	mov    %rcx,0x28(%rdi)
    e6ee:	mov    0x10(%rdi),%rcx
    e6f2:	mov    %r13b,(%r14,%rcx,1)
    e6f6:	mov    0x28(%rdi),%r13
    e6fa:	lea    0x1(%r13),%rcx
    e6fe:	mov    %rcx,0x28(%rdi)
    e702:	movzwl 0x1730(%rdi),%ecx
    e709:	shr    $0x8,%ecx
    e70c:	mov    0x10(%rdi),%r14
    e710:	mov    %cl,0x0(%r13,%r14,1)
    e715:	movslq 0x1734(%rdi),%r13
    e71c:	mov    %rax,%rcx
    e71f:	sub    %r13d,%ecx
    e722:	shr    %cl,%ebx
    e724:	mov    %bx,0x1730(%rdi)
    e72b:	lea    -0x10(%r12,%r13,1),%ecx
    e730:	mov    %ecx,0x1734(%rdi)
    e736:	mov    0x170c(%rdi),%ecx
    e73c:	add    $0x1,%r9d
    e740:	cmp    %r9d,%ecx
    e743:	ja     e65b <compress_block+0x4b>
    e749:	mov    -0x18(%rbp),%r13
    e74d:	mov    -0x10(%rbp),%r12
    e751:	mov    -0x8(%rbp),%rbx
    e755:	mov    -0x20(%rbp),%r14
    e759:	mov    -0x28(%rbp),%r15
    e75d:	movzwl 0x402(%rsi),%r8d
    e765:	mov    %rax,%rdx
    e768:	sub    %r8d,%edx
    e76b:	movslq 0x1734(%rdi),%rcx
    e772:	cmp    %ecx,%edx
    e774:	jl     e8c8 <compress_block+0x2b8>
    e77a:	movzwl 0x400(%rsi),%eax
    e781:	shl    %cl,%eax
    e783:	movzwl 0x1730(%rdi),%edx
    e78a:	or     %dx,%ax
    e78d:	mov    %ax,0x1730(%rdi)
    e794:	lea    (%r8,%rcx,1),%eax
    e798:	mov    %eax,0x1734(%rdi)
    e79e:	leaveq 
    e79f:	retq   
    e7a0:	movzwl 0x2(%rsi,%r13,4),%r12d
    e7a6:	mov    %rax,%rbx
    e7a9:	sub    %r12d,%ebx
    e7ac:	movslq 0x1734(%rdi),%rcx
    e7b3:	cmp    %ecx,%ebx
    e7b5:	jl     e6c4 <compress_block+0xb4>
    e7bb:	movzwl (%rsi,%r13,4),%ebx
    e7c0:	shl    %cl,%ebx
    e7c2:	movzwl 0x1730(%rdi),%r13d
    e7ca:	or     %r13w,%bx
    e7ce:	mov    %bx,0x1730(%rdi)
    e7d5:	add    %r12d,%ecx
    e7d8:	mov    %ecx,0x1734(%rdi)
    e7de:	jmpq   e736 <compress_block+0x126>
    e7e3:	movzwl (%rsi,%rbx,4),%ebx
    e7e7:	mov    %rbx,%rax
    e7ea:	shl    %cl,%eax
    e7ec:	movzwl 0x1730(%rdi),%ecx
    e7f3:	or     %cx,%ax
    e7f6:	mov    %ax,0x1730(%rdi)
    e7fd:	mov    0x28(%rdi),%rcx
    e801:	lea    0x1(%rcx),%r10
    e805:	mov    %r10,0x28(%rdi)
    e809:	mov    0x10(%rdi),%r10
    e80d:	mov    %al,(%rcx,%r10,1)
    e811:	mov    0x28(%rdi),%rcx
    e815:	lea    0x1(%rcx),%rax
    e819:	mov    %rax,0x28(%rdi)
    e81d:	movzwl 0x1730(%rdi),%eax
    e824:	shr    $0x8,%eax
    e827:	mov    0x10(%rdi),%r10
    e82b:	mov    %al,(%rcx,%r10,1)
    e82f:	movslq 0x1734(%rdi),%r10
    e836:	mov    $0x10,%eax
    e83b:	mov    %rax,%rcx
    e83e:	sub    %r10d,%ecx
    e841:	shr    %cl,%ebx
    e843:	lea    -0x10(%r15,%r10,1),%ecx
    e848:	mov    -0x30(%rbp),%r10
    e84c:	mov    %ecx,0x1734(%rdi)
    e852:	mov    %bx,0x1730(%rdi)
    e859:	movslq (%r11,%r14,4),%r15
    e85d:	test   %r15d,%r15d
    e860:	je     e89f <compress_block+0x28f>
    e862:	lea    0x77af(%rip),%r11        # 16018 <base_length>
    e869:	movzwl (%r11,%r14,4),%r11d
    e86e:	sub    %r11w,%r13w
    e872:	mov    %rax,%r11
    e875:	sub    %r15d,%r11d
    e878:	cmp    %r11d,%ecx
    e87b:	jg     e939 <compress_block+0x329>
    e881:	shl    %cl,%r13d
    e884:	or     %r13w,%bx
    e888:	mov    %bx,0x1730(%rdi)
    e88f:	add    %r15d,%ecx
    e892:	mov    %ecx,0x1734(%rdi)
    e898:	lea    0x7135(%rip),%r11        # 159d4 <extra_lbits>
    e89f:	add    $0xffffffff,%r12d
    e8a3:	cmp    $0xff,%r12d
    e8aa:	jbe    e9ad <compress_block+0x39d>
    e8b0:	mov    %r12,%rcx
    e8b3:	shr    $0x7,%ecx
    e8b6:	add    $0x100,%ecx
    e8bc:	mov    %ecx,%ecx
    e8be:	movzbl (%rcx,%r8,1),%ecx
    e8c3:	jmpq   e9b5 <compress_block+0x3a5>
    e8c8:	movzwl 0x400(%rsi),%edx
    e8cf:	mov    %rdx,%rsi
    e8d2:	shl    %cl,%esi
    e8d4:	movzwl 0x1730(%rdi),%ecx
    e8db:	or     %cx,%si
    e8de:	mov    %si,0x1730(%rdi)
    e8e5:	mov    0x28(%rdi),%r9
    e8e9:	lea    0x1(%r9),%rcx
    e8ed:	mov    %rcx,0x28(%rdi)
    e8f1:	mov    0x10(%rdi),%rcx
    e8f5:	mov    %sil,(%r9,%rcx,1)
    e8f9:	mov    0x28(%rdi),%r9
    e8fd:	lea    0x1(%r9),%rcx
    e901:	mov    %rcx,0x28(%rdi)
    e905:	movzwl 0x1730(%rdi),%ecx
    e90c:	shr    $0x8,%ecx
    e90f:	mov    0x10(%rdi),%rsi
    e913:	mov    %cl,(%r9,%rsi,1)
    e917:	movslq 0x1734(%rdi),%rsi
    e91e:	sub    %esi,%eax
    e920:	mov    %rax,%rcx
    e923:	shr    %cl,%edx
    e925:	mov    %dx,0x1730(%rdi)
    e92c:	lea    -0x10(%r8,%rsi,1),%eax
    e931:	mov    %eax,0x1734(%rdi)
    e937:	leaveq 
    e938:	retq   
    e939:	mov    %r13,%r11
    e93c:	shl    %cl,%r11d
    e93f:	or     %r11w,%bx
    e943:	mov    %bx,0x1730(%rdi)
    e94a:	mov    0x28(%rdi),%r11
    e94e:	lea    0x1(%r11),%rcx
    e952:	mov    %rcx,0x28(%rdi)
    e956:	mov    0x10(%rdi),%rcx
    e95a:	mov    %bl,(%r11,%rcx,1)
    e95e:	mov    0x28(%rdi),%r11
    e962:	lea    0x1(%r11),%rcx
    e966:	mov    %rcx,0x28(%rdi)
    e96a:	movzwl 0x1730(%rdi),%ecx
    e971:	shr    $0x8,%ecx
    e974:	mov    0x10(%rdi),%rbx
    e978:	mov    %cl,(%r11,%rbx,1)
    e97c:	movslq 0x1734(%rdi),%r11
    e983:	mov    %rax,%rcx
    e986:	sub    %r11d,%ecx
    e989:	movzwl %r13w,%ebx
    e98d:	shr    %cl,%ebx
    e98f:	mov    %bx,0x1730(%rdi)
    e996:	lea    -0x10(%r15,%r11,1),%ecx
    e99b:	mov    %ecx,0x1734(%rdi)
    e9a1:	lea    0x702c(%rip),%r11        # 159d4 <extra_lbits>
    e9a8:	jmpq   e89f <compress_block+0x28f>
    e9ad:	mov    %r12d,%ecx
    e9b0:	movzbl (%rcx,%r8,1),%ecx
    e9b5:	mov    %ecx,%r13d
    e9b8:	movzwl 0x2(%rdx,%r13,4),%r14d
    e9be:	mov    %rax,%rbx
    e9c1:	sub    %r14d,%ebx
    e9c4:	movslq 0x1734(%rdi),%rcx
    e9cb:	cmp    %ebx,%ecx
    e9cd:	jg     e9e7 <compress_block+0x3d7>
    e9cf:	movzwl (%rdx,%r13,4),%ebx
    e9d4:	shl    %cl,%ebx
    e9d6:	movzwl 0x1730(%rdi),%r15d
    e9de:	or     %r15w,%bx
    e9e2:	add    %r14d,%ecx
    e9e5:	jmp    ea52 <compress_block+0x442>
    e9e7:	movzwl (%rdx,%r13,4),%ebx
    e9ec:	mov    %rbx,%r11
    e9ef:	shl    %cl,%r11d
    e9f2:	movzwl 0x1730(%rdi),%ecx
    e9f9:	or     %cx,%r11w
    e9fd:	mov    %r11w,0x1730(%rdi)
    ea05:	mov    0x28(%rdi),%r15
    ea09:	lea    0x1(%r15),%rcx
    ea0d:	mov    %rcx,0x28(%rdi)
    ea11:	mov    0x10(%rdi),%rcx
    ea15:	mov    %r11b,(%r15,%rcx,1)
    ea19:	mov    0x28(%rdi),%r11
    ea1d:	lea    0x1(%r11),%rcx
    ea21:	mov    %rcx,0x28(%rdi)
    ea25:	movzwl 0x1730(%rdi),%ecx
    ea2c:	shr    $0x8,%ecx
    ea2f:	mov    0x10(%rdi),%r15
    ea33:	mov    %cl,(%r11,%r15,1)
    ea37:	movslq 0x1734(%rdi),%r11
    ea3e:	mov    %rax,%rcx
    ea41:	sub    %r11d,%ecx
    ea44:	shr    %cl,%ebx
    ea46:	lea    -0x10(%r14,%r11,1),%ecx
    ea4b:	lea    0x6f82(%rip),%r11        # 159d4 <extra_lbits>
    ea52:	mov    %ecx,0x1734(%rdi)
    ea58:	mov    %bx,0x1730(%rdi)
    ea5f:	lea    0x6fe2(%rip),%r14        # 15a48 <extra_dbits>
    ea66:	movslq (%r14,%r13,4),%r14
    ea6a:	test   %r14d,%r14d
    ea6d:	je     e736 <compress_block+0x126>
    ea73:	lea    0x7612(%rip),%r15        # 1608c <base_dist>
    ea7a:	mov    (%r15,%r13,4),%r13d
    ea7e:	sub    %r13d,%r12d
    ea81:	mov    %rax,%r13
    ea84:	sub    %r14d,%r13d
    ea87:	cmp    %r13d,%ecx
    ea8a:	jg     eaa8 <compress_block+0x498>
    ea8c:	shl    %cl,%r12d
    ea8f:	or     %r12w,%bx
    ea93:	mov    %bx,0x1730(%rdi)
    ea9a:	add    %r14d,%ecx
    ea9d:	mov    %ecx,0x1734(%rdi)
    eaa3:	jmpq   e736 <compress_block+0x126>
    eaa8:	mov    %r12,%r13
    eaab:	shl    %cl,%r13d
    eaae:	or     %r13w,%bx
    eab2:	mov    %bx,0x1730(%rdi)
    eab9:	mov    0x28(%rdi),%r13
    eabd:	lea    0x1(%r13),%rcx
    eac1:	mov    %rcx,0x28(%rdi)
    eac5:	mov    0x10(%rdi),%rcx
    eac9:	mov    %bl,0x0(%r13,%rcx,1)
    eace:	mov    0x28(%rdi),%rbx
    ead2:	lea    0x1(%rbx),%rcx
    ead6:	mov    %rcx,0x28(%rdi)
    eada:	movzwl 0x1730(%rdi),%ecx
    eae1:	shr    $0x8,%ecx
    eae4:	mov    0x10(%rdi),%r13
    eae8:	mov    %cl,(%rbx,%r13,1)
    eaec:	movslq 0x1734(%rdi),%r13
    eaf3:	mov    %rax,%rcx
    eaf6:	sub    %r13d,%ecx
    eaf9:	movzwl %r12w,%ebx
    eafd:	shr    %cl,%ebx
    eaff:	mov    %bx,0x1730(%rdi)
    eb06:	lea    -0x10(%r14,%r13,1),%ecx
    eb0b:	mov    %ecx,0x1734(%rdi)
    eb11:	jmpq   e736 <compress_block+0x126>
    eb16:	nopw   %cs:0x0(%rax,%rax,1)

000000000000eb20 <detect_data_type>:
    eb20:	push   %rbp
    eb21:	mov    %rsp,%rbp
    eb24:	xor    %esi,%esi
    eb26:	mov    $0xf3ffc07f,%ecx
    eb2b:	mov    %rsi,%rdx
    eb2e:	jmp    eb52 <detect_data_type+0x32>
    eb30:	mov    %rcx,%rax
    eb33:	and    $0x1,%rax
    eb37:	test   %rax,%rax
    eb3a:	je     eb4c <detect_data_type+0x2c>
    eb3c:	movslq %edx,%rax
    eb3f:	movzwl 0xd4(%rdi,%rax,4),%eax
    eb47:	test   %ax,%ax
    eb4a:	jne    eb6a <detect_data_type+0x4a>
    eb4c:	shr    %rcx
    eb4f:	add    $0x1,%edx
    eb52:	cmp    $0x1f,%edx
    eb55:	jle    eb30 <detect_data_type+0x10>
    eb57:	mov    $0x1,%eax
    eb5c:	movzwl 0xf8(%rdi),%ecx
    eb63:	test   %cx,%cx
    eb66:	je     eb6f <detect_data_type+0x4f>
    eb68:	leaveq 
    eb69:	retq   
    eb6a:	mov    %rsi,%rax
    eb6d:	leaveq 
    eb6e:	retq   
    eb6f:	movzwl 0xfc(%rdi),%ecx
    eb76:	test   %cx,%cx
    eb79:	je     eb7d <detect_data_type+0x5d>
    eb7b:	leaveq 
    eb7c:	retq   
    eb7d:	movzwl 0x108(%rdi),%ecx
    eb84:	test   %cx,%cx
    eb87:	jne    eb90 <detect_data_type+0x70>
    eb89:	mov    $0x20,%ecx
    eb8e:	jmp    eba5 <detect_data_type+0x85>
    eb90:	leaveq 
    eb91:	retq   
    eb92:	movslq %ecx,%rdx
    eb95:	movzwl 0xd4(%rdi,%rdx,4),%edx
    eb9d:	test   %dx,%dx
    eba0:	jne    ebb2 <detect_data_type+0x92>
    eba2:	add    $0x1,%ecx
    eba5:	cmp    $0xff,%ecx
    ebab:	jle    eb92 <detect_data_type+0x72>
    ebad:	mov    %rsi,%rax
    ebb0:	leaveq 
    ebb1:	retq   
    ebb2:	leaveq 
    ebb3:	retq   
    ebb4:	data16 nopw %cs:0x0(%rax,%rax,1)
    ebbf:	nop

000000000000ebc0 <bi_reverse>:
    ebc0:	push   %rbp
    ebc1:	mov    %rsp,%rbp
    ebc4:	xor    %eax,%eax
    ebc6:	jmp    ebcc <bi_reverse+0xc>
    ebc8:	shr    %edi
    ebca:	add    %eax,%eax
    ebcc:	mov    %rdi,%rcx
    ebcf:	and    $0x1,%ecx
    ebd2:	add    %ecx,%eax
    ebd4:	add    $0xffffffff,%esi
    ebd7:	test   %esi,%esi
    ebd9:	jg     ebc8 <bi_reverse+0x8>
    ebdb:	and    $0x7fffffff,%eax
    ebe0:	leaveq 
    ebe1:	retq   
    ebe2:	data16 nopw %cs:0x0(%rax,%rax,1)
    ebed:	nopl   (%rax)

000000000000ebf0 <bi_windup>:
    ebf0:	push   %rbp
    ebf1:	mov    %rsp,%rbp
    ebf4:	movslq 0x1734(%rdi),%rax
    ebfb:	cmp    $0x8,%eax
    ebfe:	jg     ec20 <bi_windup+0x30>
    ec00:	test   %eax,%eax
    ec02:	jle    ec57 <bi_windup+0x67>
    ec04:	mov    0x28(%rdi),%rcx
    ec08:	lea    0x1(%rcx),%rax
    ec0c:	mov    %rax,0x28(%rdi)
    ec10:	movzbl 0x1730(%rdi),%edx
    ec17:	mov    0x10(%rdi),%rax
    ec1b:	mov    %dl,(%rcx,%rax,1)
    ec1e:	jmp    ec57 <bi_windup+0x67>
    ec20:	mov    0x28(%rdi),%rcx
    ec24:	lea    0x1(%rcx),%rax
    ec28:	mov    %rax,0x28(%rdi)
    ec2c:	movzbl 0x1730(%rdi),%edx
    ec33:	mov    0x10(%rdi),%rax
    ec37:	mov    %dl,(%rcx,%rax,1)
    ec3a:	mov    0x28(%rdi),%rdx
    ec3e:	lea    0x1(%rdx),%rax
    ec42:	mov    %rax,0x28(%rdi)
    ec46:	movzwl 0x1730(%rdi),%eax
    ec4d:	shr    $0x8,%eax
    ec50:	mov    0x10(%rdi),%rcx
    ec54:	mov    %al,(%rdx,%rcx,1)
    ec57:	movw   $0x0,0x1730(%rdi)
    ec60:	movl   $0x0,0x1734(%rdi)
    ec6a:	leaveq 
    ec6b:	retq   
    ec6c:	nopl   0x0(%rax)

000000000000ec70 <bi_flush>:
    ec70:	push   %rbp
    ec71:	mov    %rsp,%rbp
    ec74:	movslq 0x1734(%rdi),%rax
    ec7b:	cmp    $0x10,%eax
    ec7e:	je     ec87 <bi_flush+0x17>
    ec80:	cmp    $0x7,%eax
    ec83:	jg     ecd3 <bi_flush+0x63>
    ec85:	leaveq 
    ec86:	retq   
    ec87:	mov    0x28(%rdi),%rcx
    ec8b:	lea    0x1(%rcx),%rax
    ec8f:	mov    %rax,0x28(%rdi)
    ec93:	movzbl 0x1730(%rdi),%edx
    ec9a:	mov    0x10(%rdi),%rax
    ec9e:	mov    %dl,(%rcx,%rax,1)
    eca1:	mov    0x28(%rdi),%rcx
    eca5:	lea    0x1(%rcx),%rax
    eca9:	mov    %rax,0x28(%rdi)
    ecad:	movzwl 0x1730(%rdi),%eax
    ecb4:	shr    $0x8,%eax
    ecb7:	mov    0x10(%rdi),%rdx
    ecbb:	mov    %al,(%rcx,%rdx,1)
    ecbe:	movw   $0x0,0x1730(%rdi)
    ecc7:	movl   $0x0,0x1734(%rdi)
    ecd1:	leaveq 
    ecd2:	retq   
    ecd3:	mov    0x28(%rdi),%rcx
    ecd7:	lea    0x1(%rcx),%rax
    ecdb:	mov    %rax,0x28(%rdi)
    ecdf:	movzbl 0x1730(%rdi),%edx
    ece6:	mov    0x10(%rdi),%rax
    ecea:	mov    %dl,(%rcx,%rax,1)
    eced:	movzwl 0x1730(%rdi),%eax
    ecf4:	shr    $0x8,%ax
    ecf8:	mov    %ax,0x1730(%rdi)
    ecff:	movslq 0x1734(%rdi),%rax
    ed06:	add    $0xfffffff8,%eax
    ed09:	mov    %eax,0x1734(%rdi)
    ed0f:	leaveq 
    ed10:	retq   
    ed11:	nopw   %cs:0x0(%rax,%rax,1)
    ed1b:	nopl   0x0(%rax,%rax,1)

000000000000ed20 <zlibVersion>:
    ed20:	push   %rbp
    ed21:	mov    %rsp,%rbp
    ed24:	lea    0x73d9(%rip),%rax        # 16104 <base_dist+0x78>
    ed2b:	leaveq 
    ed2c:	retq   
    ed2d:	nopl   (%rax)

000000000000ed30 <zlibCompileFlags>:
    ed30:	push   %rbp
    ed31:	mov    %rsp,%rbp
    ed34:	mov    $0xa9,%eax
    ed39:	leaveq 
    ed3a:	retq   
    ed3b:	nopl   0x0(%rax,%rax,1)

000000000000ed40 <zError>:
    ed40:	push   %rbp
    ed41:	mov    %rsp,%rbp
    ed44:	mov    $0x2,%eax
    ed49:	sub    %edi,%eax
    ed4b:	movslq %eax,%rcx
    ed4e:	mov    0x928b(%rip),%rax        # 17fe0 <z_errmsg@@Base+0x238>
    ed55:	mov    (%rax,%rcx,8),%rax
    ed59:	leaveq 
    ed5a:	retq   
    ed5b:	nopl   0x0(%rax,%rax,1)

000000000000ed60 <zcalloc>:
    ed60:	push   %rbp
    ed61:	mov    %rsp,%rbp
    ed64:	imul   %esi,%edx
    ed67:	mov    %edx,%edi
    ed69:	callq  2240 <malloc@plt>
    ed6e:	leaveq 
    ed6f:	retq   

000000000000ed70 <zcfree>:
    ed70:	push   %rbp
    ed71:	mov    %rsp,%rbp
    ed74:	mov    %rsi,%rdi
    ed77:	callq  2060 <free@plt>
    ed7c:	leaveq 
    ed7d:	retq   
    ed7e:	xchg   %ax,%ax

000000000000ed80 <compress>:
    ed80:	push   %rbp
    ed81:	mov    %rsp,%rbp
    ed84:	mov    $0xffffffffffffffff,%r8
    ed8b:	callq  22b0 <compress2@plt>
    ed90:	leaveq 
    ed91:	retq   
    ed92:	data16 nopw %cs:0x0(%rax,%rax,1)
    ed9d:	nopl   (%rax)

000000000000eda0 <compress2>:
    eda0:	push   %rbp
    eda1:	mov    %rsp,%rbp
    eda4:	sub    $0xb0,%rsp
    edab:	mov    %rsi,-0x8(%rbp)
    edaf:	mov    %rdi,-0x38(%rbp)
    edb3:	mov    %rdx,-0x40(%rbp)
    edb7:	mov    %rcx,-0x28(%rbp)
    edbb:	mov    (%rsi),%rax
    edbe:	mov    %rax,-0x30(%rbp)
    edc2:	movq   $0x0,(%rsi)
    edc9:	mov    %r8,%rsi
    edcc:	movq   $0x0,-0x70(%rbp)
    edd4:	movq   $0x0,-0x68(%rbp)
    eddc:	movq   $0x0,-0x60(%rbp)
    ede4:	lea    -0xb0(%rbp),%rdi
    edeb:	lea    0x738e(%rip),%rdx        # 16180 <base_dist+0xf4>
    edf2:	mov    $0x70,%ecx
    edf7:	callq  21e0 <deflateInit_@plt>
    edfc:	test   %eax,%eax
    edfe:	je     ee02 <compress2+0x62>
    ee00:	leaveq 
    ee01:	retq   
    ee02:	mov    -0x38(%rbp),%rax
    ee06:	mov    %rax,-0x98(%rbp)
    ee0d:	movl   $0x0,-0x90(%rbp)
    ee17:	mov    -0x40(%rbp),%rax
    ee1b:	mov    %rax,-0xb0(%rbp)
    ee22:	movl   $0x0,-0xa8(%rbp)
    ee2c:	xor    %eax,%eax
    ee2e:	mov    $0x4,%edx
    ee33:	mov    $0xffffffff,%ecx
    ee38:	mov    %rbx,-0x10(%rbp)
    ee3c:	mov    %r12,-0x18(%rbp)
    ee40:	mov    %r13,-0x20(%rbp)
    ee44:	mov    %r14,-0x38(%rbp)
    ee48:	mov    %r15,-0x40(%rbp)
    ee4c:	mov    %rax,%r13
    ee4f:	mov    %rdx,%r14
    ee52:	mov    %rcx,%r15
    ee55:	lea    -0xb0(%rbp),%rdi
    ee5c:	mov    -0x30(%rbp),%r12
    ee60:	mov    -0x28(%rbp),%rbx
    ee64:	jmp    ee6d <compress2+0xcd>
    ee66:	lea    -0xb0(%rbp),%rdi
    ee6d:	mov    -0x90(%rbp),%eax
    ee73:	test   %eax,%eax
    ee75:	jne    ee8a <compress2+0xea>
    ee77:	cmp    %r15,%r12
    ee7a:	jbe    eeb1 <compress2+0x111>
    ee7c:	mov    %r15,%rcx
    ee7f:	mov    %ecx,%eax
    ee81:	sub    %rax,%r12
    ee84:	mov    %ecx,-0x90(%rbp)
    ee8a:	mov    -0xa8(%rbp),%eax
    ee90:	test   %eax,%eax
    ee92:	jne    eea7 <compress2+0x107>
    ee94:	cmp    %r15,%rbx
    ee97:	jbe    eeb6 <compress2+0x116>
    ee99:	mov    %r15,%rcx
    ee9c:	mov    %ecx,%eax
    ee9e:	sub    %rax,%rbx
    eea1:	mov    %ecx,-0xa8(%rbp)
    eea7:	test   %rbx,%rbx
    eeaa:	jne    eebb <compress2+0x11b>
    eeac:	mov    %r14,%rsi
    eeaf:	jmp    eebe <compress2+0x11e>
    eeb1:	mov    %r12,%rcx
    eeb4:	jmp    ee7f <compress2+0xdf>
    eeb6:	mov    %rbx,%rcx
    eeb9:	jmp    ee9c <compress2+0xfc>
    eebb:	mov    %r13,%rsi
    eebe:	callq  2150 <deflate@plt>
    eec3:	test   %eax,%eax
    eec5:	je     ee66 <compress2+0xc6>
    eec7:	mov    -0x88(%rbp),%rcx
    eece:	mov    -0x8(%rbp),%rdx
    eed2:	mov    %rcx,(%rdx)
    eed5:	mov    %rax,%r12
    eed8:	lea    -0xb0(%rbp),%rdi
    eedf:	callq  2260 <deflateEnd@plt>
    eee4:	cmp    $0x1,%r12d
    eee8:	jne    ef03 <compress2+0x163>
    eeea:	mov    %r13,%rax
    eeed:	mov    -0x40(%rbp),%r15
    eef1:	mov    -0x38(%rbp),%r14
    eef5:	mov    -0x20(%rbp),%r13
    eef9:	mov    -0x18(%rbp),%r12
    eefd:	mov    -0x10(%rbp),%rbx
    ef01:	leaveq 
    ef02:	retq   
    ef03:	mov    %r12,%rax
    ef06:	mov    -0x40(%rbp),%r15
    ef0a:	mov    -0x38(%rbp),%r14
    ef0e:	mov    -0x20(%rbp),%r13
    ef12:	mov    -0x18(%rbp),%r12
    ef16:	mov    -0x10(%rbp),%rbx
    ef1a:	leaveq 
    ef1b:	retq   
    ef1c:	nopl   0x0(%rax)

000000000000ef20 <compressBound>:
    ef20:	push   %rbp
    ef21:	mov    %rsp,%rbp
    ef24:	mov    %rdi,%rax
    ef27:	shr    $0xc,%rax
    ef2b:	lea    (%rdi,%rax,1),%rcx
    ef2f:	mov    %rdi,%rax
    ef32:	shr    $0xe,%rax
    ef36:	add    %rcx,%rax
    ef39:	shr    $0x19,%rdi
    ef3d:	lea    0xd(%rdi,%rax,1),%rax
    ef42:	leaveq 
    ef43:	retq   
    ef44:	nopw   %cs:0x0(%rax,%rax,1)
    ef4e:	xchg   %ax,%ax

000000000000ef50 <uncompress>:
    ef50:	push   %rbp
    ef51:	mov    %rsp,%rbp
    ef54:	sub    $0x10,%rsp
    ef58:	mov    %rcx,-0x8(%rbp)
    ef5c:	lea    -0x8(%rbp),%rcx
    ef60:	callq  2200 <uncompress2@plt>
    ef65:	leaveq 
    ef66:	retq   
    ef67:	nopw   0x0(%rax,%rax,1)

000000000000ef70 <uncompress2>:
    ef70:	push   %rbp
    ef71:	mov    %rsp,%rbp
    ef74:	sub    $0xd0,%rsp
    ef7b:	mov    %rcx,-0x38(%rbp)
    ef7f:	mov    %rsi,-0x30(%rbp)
    ef83:	mov    (%rcx),%rax
    ef86:	mov    %rax,-0x40(%rbp)
    ef8a:	mov    $0x1,%eax
    ef8f:	mov    (%rsi),%rcx
    ef92:	test   %rcx,%rcx
    ef95:	jne    ef9d <uncompress2+0x2d>
    ef97:	lea    -0x51(%rbp),%rdi
    ef9b:	jmp    efa7 <uncompress2+0x37>
    ef9d:	movq   $0x0,(%rsi)
    efa4:	mov    %rcx,%rax
    efa7:	mov    %rdi,-0x50(%rbp)
    efab:	mov    %rax,-0x48(%rbp)
    efaf:	mov    %rdx,-0xc8(%rbp)
    efb6:	movl   $0x0,-0xc0(%rbp)
    efc0:	movq   $0x0,-0x88(%rbp)
    efcb:	movq   $0x0,-0x80(%rbp)
    efd3:	movq   $0x0,-0x78(%rbp)
    efdb:	lea    -0xc8(%rbp),%rdi
    efe2:	lea    0x719e(%rip),%rsi        # 16187 <base_dist+0xfb>
    efe9:	mov    $0x70,%edx
    efee:	callq  2290 <inflateInit_@plt>
    eff3:	test   %eax,%eax
    eff5:	je     eff9 <uncompress2+0x89>
    eff7:	leaveq 
    eff8:	retq   
    eff9:	mov    -0x50(%rbp),%rax
    effd:	mov    %rax,-0xb0(%rbp)
    f004:	movl   $0x0,-0xa8(%rbp)
    f00e:	xor    %ecx,%ecx
    f010:	mov    $0xffffffff,%eax
    f015:	mov    %rbx,-0x8(%rbp)
    f019:	mov    %r12,-0x10(%rbp)
    f01d:	mov    %r13,-0x18(%rbp)
    f021:	mov    %r14,-0x20(%rbp)
    f025:	mov    %r15,-0x28(%rbp)
    f029:	mov    %rcx,%r13
    f02c:	mov    %rax,%r15
    f02f:	lea    -0xc8(%rbp),%r14
    f036:	mov    -0x48(%rbp),%rbx
    f03a:	mov    -0x40(%rbp),%r12
    f03e:	mov    -0xa8(%rbp),%eax
    f044:	test   %eax,%eax
    f046:	jne    f05b <uncompress2+0xeb>
    f048:	cmp    %r15,%rbx
    f04b:	jbe    f0c3 <uncompress2+0x153>
    f04d:	mov    %r15,%rcx
    f050:	mov    %ecx,%eax
    f052:	sub    %rax,%rbx
    f055:	mov    %ecx,-0xa8(%rbp)
    f05b:	mov    -0xc0(%rbp),%eax
    f061:	test   %eax,%eax
    f063:	jne    f078 <uncompress2+0x108>
    f065:	cmp    %r15,%r12
    f068:	jbe    f0c8 <uncompress2+0x158>
    f06a:	mov    %r15,%rcx
    f06d:	mov    %ecx,%eax
    f06f:	sub    %rax,%r12
    f072:	mov    %ecx,-0xc0(%rbp)
    f078:	mov    %r14,%rdi
    f07b:	mov    %r13,%rsi
    f07e:	callq  2080 <inflate@plt>
    f083:	test   %eax,%eax
    f085:	je     f03e <uncompress2+0xce>
    f087:	mov    -0xc0(%rbp),%ecx
    f08d:	lea    (%r12,%rcx,1),%rdx
    f091:	mov    -0x38(%rbp),%rsi
    f095:	mov    (%rsi),%rcx
    f098:	sub    %rdx,%rcx
    f09b:	mov    %rcx,(%rsi)
    f09e:	lea    -0x51(%rbp),%rdx
    f0a2:	mov    -0x50(%rbp),%rcx
    f0a6:	cmp    %rdx,%rcx
    f0a9:	jne    f0cd <uncompress2+0x15d>
    f0ab:	mov    -0xa0(%rbp),%rcx
    f0b2:	test   %rcx,%rcx
    f0b5:	je     f0db <uncompress2+0x16b>
    f0b7:	cmp    $0xfffffffb,%eax
    f0ba:	jne    f0db <uncompress2+0x16b>
    f0bc:	mov    $0x1,%ebx
    f0c1:	jmp    f0db <uncompress2+0x16b>
    f0c3:	mov    %rbx,%rcx
    f0c6:	jmp    f050 <uncompress2+0xe0>
    f0c8:	mov    %r12,%rcx
    f0cb:	jmp    f06d <uncompress2+0xfd>
    f0cd:	mov    -0xa0(%rbp),%rcx
    f0d4:	mov    -0x30(%rbp),%rdx
    f0d8:	mov    %rcx,(%rdx)
    f0db:	mov    %r14,%rdi
    f0de:	mov    %rax,%r12
    f0e1:	callq  2210 <inflateEnd@plt>
    f0e6:	cmp    $0x1,%r12d
    f0ea:	jne    f105 <uncompress2+0x195>
    f0ec:	mov    %r13,%rax
    f0ef:	mov    -0x28(%rbp),%r15
    f0f3:	mov    -0x20(%rbp),%r14
    f0f7:	mov    -0x18(%rbp),%r13
    f0fb:	mov    -0x10(%rbp),%r12
    f0ff:	mov    -0x8(%rbp),%rbx
    f103:	leaveq 
    f104:	retq   
    f105:	mov    $0xfffffffffffffffd,%rax
    f10c:	cmp    $0x2,%r12d
    f110:	jne    f128 <uncompress2+0x1b8>
    f112:	mov    -0x28(%rbp),%r15
    f116:	mov    -0x20(%rbp),%r14
    f11a:	mov    -0x18(%rbp),%r13
    f11e:	mov    -0x10(%rbp),%r12
    f122:	mov    -0x8(%rbp),%rbx
    f126:	leaveq 
    f127:	retq   
    f128:	cmp    $0xfffffffb,%r12d
    f12c:	je     f147 <uncompress2+0x1d7>
    f12e:	mov    %r12,%rax
    f131:	mov    -0x28(%rbp),%r15
    f135:	mov    -0x20(%rbp),%r14
    f139:	mov    -0x18(%rbp),%r13
    f13d:	mov    -0x10(%rbp),%r12
    f141:	mov    -0x8(%rbp),%rbx
    f145:	leaveq 
    f146:	retq   
    f147:	mov    -0xa8(%rbp),%ecx
    f14d:	add    %rbx,%rcx
    f150:	test   %rcx,%rcx
    f153:	je     f16b <uncompress2+0x1fb>
    f155:	mov    -0x28(%rbp),%r15
    f159:	mov    -0x20(%rbp),%r14
    f15d:	mov    -0x18(%rbp),%r13
    f161:	mov    -0x10(%rbp),%r12
    f165:	mov    -0x8(%rbp),%rbx
    f169:	leaveq 
    f16a:	retq   
    f16b:	mov    $0xfffffffffffffffb,%rax
    f172:	mov    -0x28(%rbp),%r15
    f176:	mov    -0x20(%rbp),%r14
    f17a:	mov    -0x18(%rbp),%r13
    f17e:	mov    -0x10(%rbp),%r12
    f182:	mov    -0x8(%rbp),%rbx
    f186:	leaveq 
    f187:	retq   
    f188:	nopl   0x0(%rax,%rax,1)

000000000000f190 <gzclose>:
    f190:	push   %rbp
    f191:	mov    %rsp,%rbp
    f194:	test   %rdi,%rdi
    f197:	jne    f1a2 <gzclose+0x12>
    f199:	mov    $0xfffffffffffffffe,%rax
    f1a0:	leaveq 
    f1a1:	retq   
    f1a2:	movslq 0x18(%rdi),%rax
    f1a6:	cmp    $0x1c4f,%eax
    f1ab:	je     f1b4 <gzclose+0x24>
    f1ad:	callq  2250 <gzclose_w@plt>
    f1b2:	leaveq 
    f1b3:	retq   
    f1b4:	callq  2090 <gzclose_r@plt>
    f1b9:	leaveq 
    f1ba:	retq   
    f1bb:	nopl   0x0(%rax,%rax,1)

000000000000f1c0 <gzdopen>:
    f1c0:	push   %rbp
    f1c1:	mov    %rsp,%rbp
    f1c4:	sub    $0x20,%rsp
    f1c8:	xor    %eax,%eax
    f1ca:	cmp    $0xffffffff,%edi
    f1cd:	jne    f1d1 <gzdopen+0x11>
    f1cf:	leaveq 
    f1d0:	retq   
    f1d1:	mov    $0x13,%eax
    f1d6:	mov    %rdi,-0x18(%rbp)
    f1da:	mov    %rsi,-0x8(%rbp)
    f1de:	mov    %rax,%rdi
    f1e1:	callq  2240 <malloc@plt>
    f1e6:	test   %rax,%rax
    f1e9:	jne    f1ef <gzdopen+0x2f>
    f1eb:	xor    %eax,%eax
    f1ed:	leaveq 
    f1ee:	retq   
    f1ef:	xor    %r8d,%r8d
    f1f2:	lea    0x70cf(%rip),%rdx        # 162c8 <base_dist+0x23c>
    f1f9:	mov    %rax,%rdi
    f1fc:	mov    -0x18(%rbp),%r9
    f200:	mov    %r9,%rcx
    f203:	mov    %r14,-0x10(%rbp)
    f207:	mov    %r15,-0x18(%rbp)
    f20b:	mov    %rax,%r14
    f20e:	mov    %r8,%rax
    f211:	mov    %r9,%r15
    f214:	mov    $0x13,%esi
    f219:	callq  2130 <snprintf@plt>
    f21e:	mov    %r15,%rsi
    f221:	mov    %r14,%rdi
    f224:	mov    -0x8(%rbp),%rdx
    f228:	callq  f870 <gz_open>
    f22d:	mov    %r14,%rdi
    f230:	mov    %rax,%r14
    f233:	callq  2060 <free@plt>
    f238:	mov    %r14,%rax
    f23b:	mov    -0x18(%rbp),%r15
    f23f:	mov    -0x10(%rbp),%r14
    f243:	leaveq 
    f244:	retq   
    f245:	data16 nopw %cs:0x0(%rax,%rax,1)

000000000000f250 <gzbuffer>:
    f250:	push   %rbp
    f251:	mov    %rsp,%rbp
    f254:	mov    $0xffffffffffffffff,%rax
    f25b:	test   %rdi,%rdi
    f25e:	jne    f262 <gzbuffer+0x12>
    f260:	leaveq 
    f261:	retq   
    f262:	movslq 0x18(%rdi),%rcx
    f266:	cmp    $0x1c4f,%ecx
    f26c:	jne    f277 <gzbuffer+0x27>
    f26e:	mov    0x28(%rdi),%ecx
    f271:	test   %ecx,%ecx
    f273:	je     f281 <gzbuffer+0x31>
    f275:	leaveq 
    f276:	retq   
    f277:	cmp    $0x79b1,%ecx
    f27d:	je     f26e <gzbuffer+0x1e>
    f27f:	leaveq 
    f280:	retq   
    f281:	lea    (%rsi,%rsi,1),%ecx
    f284:	cmp    %ecx,%esi
    f286:	jbe    f28a <gzbuffer+0x3a>
    f288:	leaveq 
    f289:	retq   
    f28a:	cmp    $0x1,%esi
    f28d:	ja     f294 <gzbuffer+0x44>
    f28f:	mov    $0x2,%esi
    f294:	mov    %esi,0x2c(%rdi)
    f297:	xor    %eax,%eax
    f299:	leaveq 
    f29a:	retq   
    f29b:	nopl   0x0(%rax,%rax,1)

000000000000f2a0 <gzrewind>:
    f2a0:	push   %rbp
    f2a1:	mov    %rsp,%rbp
    f2a4:	sub    $0x10,%rsp
    f2a8:	mov    $0xffffffffffffffff,%rax
    f2af:	test   %rdi,%rdi
    f2b2:	jne    f2b6 <gzrewind+0x16>
    f2b4:	leaveq 
    f2b5:	retq   
    f2b6:	movslq 0x18(%rdi),%rcx
    f2ba:	cmp    $0x1c4f,%ecx
    f2c0:	je     f2c4 <gzrewind+0x24>
    f2c2:	leaveq 
    f2c3:	retq   
    f2c4:	movslq 0x6c(%rdi),%rcx
    f2c8:	test   %ecx,%ecx
    f2ca:	jne    f2f1 <gzrewind+0x51>
    f2cc:	movslq 0x1c(%rdi),%rax
    f2d0:	mov    0x48(%rdi),%rsi
    f2d4:	xor    %edx,%edx
    f2d6:	mov    %rdi,-0x8(%rbp)
    f2da:	mov    %rax,%rdi
    f2dd:	callq  2300 <lseek64@plt>
    f2e2:	cmp    $0xffffffffffffffff,%rax
    f2e6:	jne    f2f8 <gzrewind+0x58>
    f2e8:	mov    $0xffffffffffffffff,%rax
    f2ef:	leaveq 
    f2f0:	retq   
    f2f1:	cmp    $0xfffffffb,%ecx
    f2f4:	je     f2cc <gzrewind+0x2c>
    f2f6:	leaveq 
    f2f7:	retq   
    f2f8:	mov    -0x8(%rbp),%rdi
    f2fc:	callq  f810 <gz_reset>
    f301:	xor    %eax,%eax
    f303:	leaveq 
    f304:	retq   
    f305:	data16 nopw %cs:0x0(%rax,%rax,1)

000000000000f310 <gzeof>:
    f310:	push   %rbp
    f311:	mov    %rsp,%rbp
    f314:	xor    %eax,%eax
    f316:	test   %rdi,%rdi
    f319:	jne    f31d <gzeof+0xd>
    f31b:	leaveq 
    f31c:	retq   
    f31d:	movslq 0x18(%rdi),%rcx
    f321:	cmp    $0x1c4f,%ecx
    f327:	jne    f333 <gzeof+0x23>
    f329:	cmp    $0x1c4f,%ecx
    f32f:	je     f33d <gzeof+0x2d>
    f331:	leaveq 
    f332:	retq   
    f333:	cmp    $0x79b1,%ecx
    f339:	je     f329 <gzeof+0x19>
    f33b:	leaveq 
    f33c:	retq   
    f33d:	movslq 0x54(%rdi),%rax
    f341:	leaveq 
    f342:	retq   
    f343:	data16 nopw %cs:0x0(%rax,%rax,1)
    f34e:	xchg   %ax,%ax

000000000000f350 <gzerror>:
    f350:	push   %rbp
    f351:	mov    %rsp,%rbp
    f354:	xor    %eax,%eax
    f356:	test   %rdi,%rdi
    f359:	jne    f35d <gzerror+0xd>
    f35b:	leaveq 
    f35c:	retq   
    f35d:	movslq 0x18(%rdi),%rcx
    f361:	cmp    $0x1c4f,%ecx
    f367:	jne    f386 <gzerror+0x36>
    f369:	test   %rsi,%rsi
    f36c:	je     f374 <gzerror+0x24>
    f36e:	movslq 0x6c(%rdi),%rax
    f372:	mov    %eax,(%rsi)
    f374:	movslq 0x6c(%rdi),%rax
    f378:	cmp    $0xfffffffc,%eax
    f37b:	jne    f390 <gzerror+0x40>
    f37d:	lea    0x6f4c(%rip),%rax        # 162d0 <base_dist+0x244>
    f384:	leaveq 
    f385:	retq   
    f386:	cmp    $0x79b1,%ecx
    f38c:	je     f369 <gzerror+0x19>
    f38e:	leaveq 
    f38f:	retq   
    f390:	mov    0x70(%rdi),%rax
    f394:	test   %rax,%rax
    f397:	jne    f3a2 <gzerror+0x52>
    f399:	lea    0x6f3e(%rip),%rax        # 162de <base_dist+0x252>
    f3a0:	leaveq 
    f3a1:	retq   
    f3a2:	leaveq 
    f3a3:	retq   
    f3a4:	data16 nopw %cs:0x0(%rax,%rax,1)
    f3af:	nop

000000000000f3b0 <gzclearerr>:
    f3b0:	push   %rbp
    f3b1:	mov    %rsp,%rbp
    f3b4:	test   %rdi,%rdi
    f3b7:	jne    f3bb <gzclearerr+0xb>
    f3b9:	leaveq 
    f3ba:	retq   
    f3bb:	movslq 0x18(%rdi),%rax
    f3bf:	cmp    $0x1c4f,%eax
    f3c4:	jne    f3e7 <gzclearerr+0x37>
    f3c6:	cmp    $0x1c4f,%eax
    f3cb:	jne    f3db <gzclearerr+0x2b>
    f3cd:	movl   $0x0,0x50(%rdi)
    f3d4:	movl   $0x0,0x54(%rdi)
    f3db:	xor    %esi,%esi
    f3dd:	mov    %rsi,%rdx
    f3e0:	callq  20a0 <gz_error@plt>
    f3e5:	leaveq 
    f3e6:	retq   
    f3e7:	cmp    $0x79b1,%eax
    f3ec:	je     f3c6 <gzclearerr+0x16>
    f3ee:	leaveq 
    f3ef:	retq   

000000000000f3f0 <gzopen64>:
    f3f0:	push   %rbp
    f3f1:	mov    %rsp,%rbp
    f3f4:	mov    %rsi,%rdx
    f3f7:	mov    $0xffffffffffffffff,%rsi
    f3fe:	callq  f870 <gz_open>
    f403:	leaveq 
    f404:	retq   
    f405:	data16 nopw %cs:0x0(%rax,%rax,1)

000000000000f410 <gzseek64>:
    f410:	push   %rbp
    f411:	mov    %rsp,%rbp
    f414:	sub    $0x10,%rsp
    f418:	mov    $0xffffffffffffffff,%rax
    f41f:	test   %rdi,%rdi
    f422:	jne    f426 <gzseek64+0x16>
    f424:	leaveq 
    f425:	retq   
    f426:	movslq 0x18(%rdi),%rcx
    f42a:	cmp    $0x1c4f,%ecx
    f430:	jne    f450 <gzseek64+0x40>
    f432:	movslq 0x6c(%rdi),%rcx
    f436:	test   %ecx,%ecx
    f438:	jne    f45a <gzseek64+0x4a>
    f43a:	test   %edx,%edx
    f43c:	jne    f461 <gzseek64+0x51>
    f43e:	test   %edx,%edx
    f440:	je     f468 <gzseek64+0x58>
    f442:	movslq 0x68(%rdi),%rcx
    f446:	test   %ecx,%ecx
    f448:	je     f46f <gzseek64+0x5f>
    f44a:	add    0x60(%rdi),%rsi
    f44e:	jmp    f46f <gzseek64+0x5f>
    f450:	cmp    $0x79b1,%ecx
    f456:	je     f432 <gzseek64+0x22>
    f458:	leaveq 
    f459:	retq   
    f45a:	cmp    $0xfffffffb,%ecx
    f45d:	je     f43a <gzseek64+0x2a>
    f45f:	leaveq 
    f460:	retq   
    f461:	cmp    $0x1,%edx
    f464:	je     f43e <gzseek64+0x2e>
    f466:	leaveq 
    f467:	retq   
    f468:	mov    0x10(%rdi),%rcx
    f46c:	sub    %rcx,%rsi
    f46f:	movl   $0x0,0x68(%rdi)
    f476:	movslq 0x18(%rdi),%rcx
    f47a:	cmp    $0x1c4f,%ecx
    f480:	je     f4a2 <gzseek64+0x92>
    f482:	test   %rsi,%rsi
    f485:	js     f4ea <gzseek64+0xda>
    f487:	movslq 0x18(%rdi),%rax
    f48b:	cmp    $0x1c4f,%eax
    f490:	jne    f51e <gzseek64+0x10e>
    f496:	mov    (%rdi),%eax
    f498:	cmp    %rax,%rsi
    f49b:	jl     f4fc <gzseek64+0xec>
    f49d:	mov    %rax,%rcx
    f4a0:	jmp    f4ff <gzseek64+0xef>
    f4a2:	movslq 0x44(%rdi),%rcx
    f4a6:	cmp    $0x1,%ecx
    f4a9:	jne    f482 <gzseek64+0x72>
    f4ab:	mov    %rsi,%rcx
    f4ae:	add    0x10(%rdi),%rcx
    f4b2:	test   %rcx,%rcx
    f4b5:	js     f482 <gzseek64+0x72>
    f4b7:	mov    (%rdi),%eax
    f4b9:	neg    %rax
    f4bc:	add    %rsi,%rax
    f4bf:	movslq 0x1c(%rdi),%rcx
    f4c3:	mov    $0x1,%edx
    f4c8:	mov    %rdi,-0x10(%rbp)
    f4cc:	mov    %rsi,-0x8(%rbp)
    f4d0:	mov    %rax,%rsi
    f4d3:	mov    %rcx,%rdi
    f4d6:	callq  2300 <lseek64@plt>
    f4db:	cmp    $0xffffffffffffffff,%rax
    f4df:	jne    f537 <gzseek64+0x127>
    f4e1:	mov    $0xffffffffffffffff,%rax
    f4e8:	leaveq 
    f4e9:	retq   
    f4ea:	movslq 0x18(%rdi),%rcx
    f4ee:	cmp    $0x1c4f,%ecx
    f4f4:	je     f587 <gzseek64+0x177>
    f4fa:	leaveq 
    f4fb:	retq   
    f4fc:	mov    %rsi,%rcx
    f4ff:	sub    %ecx,%eax
    f501:	mov    %eax,(%rdi)
    f503:	mov    %ecx,%ecx
    f505:	mov    %rcx,%rax
    f508:	add    0x8(%rdi),%rax
    f50c:	mov    %rax,0x8(%rdi)
    f510:	mov    %rcx,%rax
    f513:	add    0x10(%rdi),%rax
    f517:	mov    %rax,0x10(%rdi)
    f51b:	sub    %rcx,%rsi
    f51e:	test   %rsi,%rsi
    f521:	je     f52e <gzseek64+0x11e>
    f523:	movl   $0x1,0x68(%rdi)
    f52a:	mov    %rsi,0x60(%rdi)
    f52e:	add    0x10(%rdi),%rsi
    f532:	mov    %rsi,%rax
    f535:	leaveq 
    f536:	retq   
    f537:	mov    -0x10(%rbp),%rax
    f53b:	movl   $0x0,(%rax)
    f541:	movl   $0x0,0x50(%rax)
    f548:	movl   $0x0,0x54(%rax)
    f54f:	movl   $0x0,0x68(%rax)
    f556:	xor    %esi,%esi
    f558:	mov    %rsi,%rdx
    f55b:	mov    %rax,%rdi
    f55e:	mov    %r15,-0x10(%rbp)
    f562:	mov    %rax,%r15
    f565:	callq  20a0 <gz_error@plt>
    f56a:	movl   $0x0,0x80(%r15)
    f575:	mov    -0x8(%rbp),%rax
    f579:	add    0x10(%r15),%rax
    f57d:	mov    %rax,0x10(%r15)
    f581:	mov    -0x10(%rbp),%r15
    f585:	leaveq 
    f586:	retq   
    f587:	add    0x10(%rdi),%rsi
    f58b:	test   %rsi,%rsi
    f58e:	jns    f592 <gzseek64+0x182>
    f590:	leaveq 
    f591:	retq   
    f592:	mov    %rdi,%rax
    f595:	mov    %rdi,-0x10(%rbp)
    f599:	mov    %rsi,-0x8(%rbp)
    f59d:	mov    %rax,%rdi
    f5a0:	callq  2270 <gzrewind@plt>
    f5a5:	cmp    $0xffffffff,%eax
    f5a8:	je     f5b7 <gzseek64+0x1a7>
    f5aa:	mov    -0x8(%rbp),%rsi
    f5ae:	mov    -0x10(%rbp),%rdi
    f5b2:	jmpq   f487 <gzseek64+0x77>
    f5b7:	mov    $0xffffffffffffffff,%rax
    f5be:	leaveq 
    f5bf:	retq   

000000000000f5c0 <gztell64>:
    f5c0:	push   %rbp
    f5c1:	mov    %rsp,%rbp
    f5c4:	mov    $0xffffffffffffffff,%rax
    f5cb:	test   %rdi,%rdi
    f5ce:	jne    f5d2 <gztell64+0x12>
    f5d0:	leaveq 
    f5d1:	retq   
    f5d2:	movslq 0x18(%rdi),%rcx
    f5d6:	cmp    $0x1c4f,%ecx
    f5dc:	jne    f5ee <gztell64+0x2e>
    f5de:	mov    0x10(%rdi),%rcx
    f5e2:	movslq 0x68(%rdi),%rax
    f5e6:	test   %eax,%eax
    f5e8:	jne    f5f8 <gztell64+0x38>
    f5ea:	xor    %eax,%eax
    f5ec:	jmp    f5fc <gztell64+0x3c>
    f5ee:	cmp    $0x79b1,%ecx
    f5f4:	je     f5de <gztell64+0x1e>
    f5f6:	leaveq 
    f5f7:	retq   
    f5f8:	mov    0x60(%rdi),%rax
    f5fc:	add    %rcx,%rax
    f5ff:	leaveq 
    f600:	retq   
    f601:	data16 nopw %cs:0x0(%rax,%rax,1)
    f60c:	nopl   0x0(%rax)

000000000000f610 <gzoffset64>:
    f610:	push   %rbp
    f611:	mov    %rsp,%rbp
    f614:	sub    $0x10,%rsp
    f618:	mov    $0xffffffffffffffff,%rax
    f61f:	test   %rdi,%rdi
    f622:	jne    f626 <gzoffset64+0x16>
    f624:	leaveq 
    f625:	retq   
    f626:	movslq 0x18(%rdi),%rcx
    f62a:	cmp    $0x1c4f,%ecx
    f630:	jne    f658 <gzoffset64+0x48>
    f632:	movslq 0x1c(%rdi),%rax
    f636:	xor    %esi,%esi
    f638:	mov    $0x1,%edx
    f63d:	mov    %rdi,-0x8(%rbp)
    f641:	mov    %rax,%rdi
    f644:	callq  2300 <lseek64@plt>
    f649:	cmp    $0xffffffffffffffff,%rax
    f64d:	jne    f662 <gzoffset64+0x52>
    f64f:	mov    $0xffffffffffffffff,%rax
    f656:	leaveq 
    f657:	retq   
    f658:	cmp    $0x79b1,%ecx
    f65e:	je     f632 <gzoffset64+0x22>
    f660:	leaveq 
    f661:	retq   
    f662:	mov    -0x8(%rbp),%rdx
    f666:	movslq 0x18(%rdx),%rcx
    f66a:	cmp    $0x1c4f,%ecx
    f670:	je     f674 <gzoffset64+0x64>
    f672:	leaveq 
    f673:	retq   
    f674:	mov    0x80(%rdx),%ecx
    f67a:	sub    %rcx,%rax
    f67d:	leaveq 
    f67e:	retq   
    f67f:	nop

000000000000f680 <gzopen>:
    f680:	push   %rbp
    f681:	mov    %rsp,%rbp
    f684:	mov    %rsi,%rdx
    f687:	mov    $0xffffffffffffffff,%rsi
    f68e:	callq  f870 <gz_open>
    f693:	leaveq 
    f694:	retq   
    f695:	data16 nopw %cs:0x0(%rax,%rax,1)

000000000000f6a0 <gzseek>:
    f6a0:	push   %rbp
    f6a1:	mov    %rsp,%rbp
    f6a4:	callq  2050 <gzseek64@plt>
    f6a9:	leaveq 
    f6aa:	retq   
    f6ab:	nopl   0x0(%rax,%rax,1)

000000000000f6b0 <gztell>:
    f6b0:	push   %rbp
    f6b1:	mov    %rsp,%rbp
    f6b4:	callq  2190 <gztell64@plt>
    f6b9:	leaveq 
    f6ba:	retq   
    f6bb:	nopl   0x0(%rax,%rax,1)

000000000000f6c0 <gzoffset>:
    f6c0:	push   %rbp
    f6c1:	mov    %rsp,%rbp
    f6c4:	callq  2280 <gzoffset64@plt>
    f6c9:	leaveq 
    f6ca:	retq   
    f6cb:	nopl   0x0(%rax,%rax,1)

000000000000f6d0 <gz_error>:
    f6d0:	push   %rbp
    f6d1:	mov    %rsp,%rbp
    f6d4:	sub    $0x20,%rsp
    f6d8:	mov    0x70(%rdi),%rcx
    f6dc:	test   %rcx,%rcx
    f6df:	jne    f6e9 <gz_error+0x19>
    f6e1:	mov    %r14,%rax
    f6e4:	mov    %rdi,%r14
    f6e7:	jmp    f731 <gz_error+0x61>
    f6e9:	movslq 0x6c(%rdi),%rax
    f6ed:	cmp    $0xfffffffc,%eax
    f6f0:	jne    f6fa <gz_error+0x2a>
    f6f2:	mov    %r14,%rax
    f6f5:	mov    %rdi,%r14
    f6f8:	jmp    f729 <gz_error+0x59>
    f6fa:	mov    %r13,-0x10(%rbp)
    f6fe:	mov    %r14,-0x18(%rbp)
    f702:	mov    %r15,-0x20(%rbp)
    f706:	mov    %rsi,%r13
    f709:	mov    %rdi,%r14
    f70c:	mov    %rcx,%rdi
    f70f:	mov    %rdx,%r15
    f712:	callq  2060 <free@plt>
    f717:	mov    %r15,%rdx
    f71a:	mov    %r13,%rsi
    f71d:	mov    -0x20(%rbp),%r15
    f721:	mov    -0x18(%rbp),%rax
    f725:	mov    -0x10(%rbp),%r13
    f729:	movq   $0x0,0x70(%r14)
    f731:	test   %esi,%esi
    f733:	jne    f743 <gz_error+0x73>
    f735:	mov    %esi,0x6c(%r14)
    f739:	test   %rdx,%rdx
    f73c:	jne    f751 <gz_error+0x81>
    f73e:	mov    %rax,%r14
    f741:	leaveq 
    f742:	retq   
    f743:	cmp    $0xfffffffb,%esi
    f746:	je     f735 <gz_error+0x65>
    f748:	movl   $0x0,(%r14)
    f74f:	jmp    f735 <gz_error+0x65>
    f751:	cmp    $0xfffffffc,%esi
    f754:	jne    f75b <gz_error+0x8b>
    f756:	mov    %rax,%r14
    f759:	leaveq 
    f75a:	retq   
    f75b:	mov    0x20(%r14),%rdi
    f75f:	mov    %rax,-0x18(%rbp)
    f763:	mov    %r15,-0x20(%rbp)
    f767:	mov    %rdx,%r15
    f76a:	callq  2110 <strlen@plt>
    f76f:	mov    %r15,%rdi
    f772:	mov    %r15,-0x8(%rbp)
    f776:	mov    %rax,%r15
    f779:	callq  2110 <strlen@plt>
    f77e:	lea    0x3(%rax,%r15,1),%rdi
    f783:	callq  2240 <malloc@plt>
    f788:	mov    %rax,0x70(%r14)
    f78c:	test   %rax,%rax
    f78f:	je     f7ef <gz_error+0x11f>
    f791:	mov    0x20(%r14),%r15
    f795:	mov    %rax,%r14
    f798:	mov    %r15,%rdi
    f79b:	callq  2110 <strlen@plt>
    f7a0:	mov    -0x8(%rbp),%rcx
    f7a4:	mov    %rcx,%rdi
    f7a7:	mov    %r13,-0x10(%rbp)
    f7ab:	mov    %r12,-0x8(%rbp)
    f7af:	mov    %rcx,%r12
    f7b2:	mov    %rax,%r13
    f7b5:	callq  2110 <strlen@plt>
    f7ba:	lea    0x3(%rax,%r13,1),%rsi
    f7bf:	mov    %r15,%rcx
    f7c2:	mov    %r14,%rdi
    f7c5:	mov    %r12,%r9
    f7c8:	xor    %eax,%eax
    f7ca:	lea    0x6b0e(%rip),%rdx        # 162df <base_dist+0x253>
    f7d1:	lea    0x6b0e(%rip),%r8        # 162e6 <base_dist+0x25a>
    f7d8:	callq  2130 <snprintf@plt>
    f7dd:	mov    -0x8(%rbp),%r12
    f7e1:	mov    -0x20(%rbp),%r15
    f7e5:	mov    -0x18(%rbp),%r14
    f7e9:	mov    -0x10(%rbp),%r13
    f7ed:	leaveq 
    f7ee:	retq   
    f7ef:	movl   $0xfffffffc,0x6c(%r14)
    f7f7:	mov    -0x20(%rbp),%r15
    f7fb:	mov    -0x18(%rbp),%r14
    f7ff:	leaveq 
    f800:	retq   
    f801:	data16 nopw %cs:0x0(%rax,%rax,1)
    f80c:	nopl   0x0(%rax)

000000000000f810 <gz_reset>:
    f810:	push   %rbp
    f811:	mov    %rsp,%rbp
    f814:	sub    $0x10,%rsp
    f818:	mov    %r15,-0x8(%rbp)
    f81c:	movl   $0x0,(%rdi)
    f822:	movslq 0x18(%rdi),%rax
    f826:	cmp    $0x1c4f,%eax
    f82b:	jne    f842 <gz_reset+0x32>
    f82d:	movl   $0x0,0x50(%rdi)
    f834:	movl   $0x0,0x54(%rdi)
    f83b:	movl   $0x0,0x44(%rdi)
    f842:	movl   $0x0,0x68(%rdi)
    f849:	xor    %esi,%esi
    f84b:	mov    %rsi,%rdx
    f84e:	mov    %rdi,%r15
    f851:	callq  20a0 <gz_error@plt>
    f856:	movq   $0x0,0x10(%r15)
    f85e:	movl   $0x0,0x80(%r15)
    f869:	mov    -0x8(%rbp),%r15
    f86d:	leaveq 
    f86e:	retq   
    f86f:	nop

000000000000f870 <gz_open>:
    f870:	push   %rbp
    f871:	mov    %rsp,%rbp
    f874:	sub    $0x30,%rsp
    f878:	xor    %eax,%eax
    f87a:	test   %rdi,%rdi
    f87d:	jne    f881 <gz_open+0x11>
    f87f:	leaveq 
    f880:	retq   
    f881:	mov    $0xe8,%eax
    f886:	mov    %rdx,-0x30(%rbp)
    f88a:	mov    %rdi,-0x28(%rbp)
    f88e:	mov    %rsi,-0x10(%rbp)
    f892:	mov    %rax,%rdi
    f895:	callq  2240 <malloc@plt>
    f89a:	test   %rax,%rax
    f89d:	jne    f8a3 <gz_open+0x33>
    f89f:	xor    %eax,%eax
    f8a1:	leaveq 
    f8a2:	retq   
    f8a3:	movl   $0x0,0x28(%rax)
    f8aa:	movl   $0x2000,0x2c(%rax)
    f8b1:	movq   $0x0,0x70(%rax)
    f8b9:	movl   $0x0,0x18(%rax)
    f8c0:	movl   $0xffffffff,0x58(%rax)
    f8c7:	movl   $0x0,0x5c(%rax)
    f8ce:	movl   $0x0,0x40(%rax)
    f8d5:	mov    $0x1,%r8d
    f8db:	xor    %ecx,%ecx
    f8dd:	mov    -0x30(%rbp),%rsi
    f8e1:	mov    %rcx,%rdx
    f8e4:	jmp    f900 <gz_open+0x90>
    f8e6:	cmp    $0x2f,%dil
    f8ea:	jg     f991 <gz_open+0x121>
    f8f0:	add    $0xffffffd5,%edi
    f8f3:	cmp    $0x4d,%edi
    f8f6:	jbe    f9a6 <gz_open+0x136>
    f8fc:	add    $0x1,%rsi
    f900:	movsbq (%rsi),%rdi
    f904:	test   %dil,%dil
    f907:	jne    f8e6 <gz_open+0x76>
    f909:	movslq 0x18(%rax),%rsi
    f90d:	test   %esi,%esi
    f90f:	je     f9be <gz_open+0x14e>
    f915:	cmp    $0x1c4f,%esi
    f91b:	jne    f930 <gz_open+0xc0>
    f91d:	movslq 0x40(%rax),%rsi
    f921:	test   %esi,%esi
    f923:	jne    f9ca <gz_open+0x15a>
    f929:	movl   $0x1,0x40(%rax)
    f930:	mov    -0x28(%rbp),%rdi
    f934:	mov    %r15,-0x8(%rbp)
    f938:	mov    %rdx,-0x30(%rbp)
    f93c:	mov    %rcx,-0x18(%rbp)
    f940:	mov    %rax,%r15
    f943:	callq  2110 <strlen@plt>
    f948:	lea    0x1(%rax),%rdi
    f94c:	mov    %rdi,-0x20(%rbp)
    f950:	callq  2240 <malloc@plt>
    f955:	mov    %rax,0x20(%r15)
    f959:	test   %rax,%rax
    f95c:	je     f9d6 <gz_open+0x166>
    f95e:	xor    %r8d,%r8d
    f961:	lea    0x6981(%rip),%rdx        # 162e9 <base_dist+0x25d>
    f968:	mov    -0x28(%rbp),%rdi
    f96c:	mov    %rdi,%rcx
    f96f:	mov    %r14,-0x28(%rbp)
    f973:	mov    %rdi,%r14
    f976:	mov    %rax,%rdi
    f979:	mov    %r8,%rax
    f97c:	mov    -0x20(%rbp),%rsi
    f980:	callq  2130 <snprintf@plt>
    f985:	mov    -0x30(%rbp),%rax
    f989:	test   %eax,%eax
    f98b:	jg     f9e6 <gz_open+0x176>
    f98d:	xor    %edx,%edx
    f98f:	jmp    f9eb <gz_open+0x17b>
    f991:	cmp    $0x39,%dil
    f995:	jg     f8f0 <gz_open+0x80>
    f99b:	add    $0xffffffd0,%edi
    f99e:	mov    %edi,0x58(%rax)
    f9a1:	jmpq   f8fc <gz_open+0x8c>
    f9a6:	lea    0x67e3(%rip),%r9        # 16190 <base_dist+0x104>
    f9ad:	movslq (%r9,%rdi,4),%rdi
    f9b1:	add    %r9,%rdi
    f9b4:	jmpq   *%rdi
    f9b6:	mov    %r8,%rcx
    f9b9:	jmpq   f8fc <gz_open+0x8c>
    f9be:	mov    %rax,%rdi
    f9c1:	callq  2060 <free@plt>
    f9c6:	xor    %eax,%eax
    f9c8:	leaveq 
    f9c9:	retq   
    f9ca:	mov    %rax,%rdi
    f9cd:	callq  2060 <free@plt>
    f9d2:	xor    %eax,%eax
    f9d4:	leaveq 
    f9d5:	retq   
    f9d6:	mov    %r15,%rdi
    f9d9:	callq  2060 <free@plt>
    f9de:	mov    -0x8(%rbp),%r15
    f9e2:	xor    %eax,%eax
    f9e4:	leaveq 
    f9e5:	retq   
    f9e6:	mov    $0x80000,%edx
    f9eb:	movslq 0x18(%r15),%rsi
    f9ef:	cmp    $0x1c4f,%esi
    f9f5:	jne    faad <gz_open+0x23d>
    f9fb:	xor    %ecx,%ecx
    f9fd:	mov    -0x10(%rbp),%rax
    fa01:	test   %eax,%eax
    fa03:	jns    fa17 <gz_open+0x1a7>
    fa05:	lea    (%rcx,%rdx,1),%esi
    fa08:	mov    %r14,%rdi
    fa0b:	xor    %eax,%eax
    fa0d:	mov    $0x1b6,%edx
    fa12:	callq  22c0 <open@plt>
    fa17:	mov    %eax,0x1c(%r15)
    fa1b:	cmp    $0xffffffff,%eax
    fa1e:	je     fac3 <gz_open+0x253>
    fa24:	movslq 0x18(%r15),%rcx
    fa28:	cmp    $0x1,%ecx
    fa2b:	je     fae0 <gz_open+0x270>
    fa31:	xor    %r14d,%r14d
    fa34:	jmpq   fafb <gz_open+0x28b>
    fa39:	mov    %rax,%rdi
    fa3c:	callq  2060 <free@plt>
    fa41:	xor    %eax,%eax
    fa43:	leaveq 
    fa44:	retq   
    fa45:	movl   $0x1c4f,0x18(%rax)
    fa4c:	jmpq   f8fc <gz_open+0x8c>
    fa51:	movl   $0x79b1,0x18(%rax)
    fa58:	jmpq   f8fc <gz_open+0x8c>
    fa5d:	movl   $0x1,0x18(%rax)
    fa64:	jmpq   f8fc <gz_open+0x8c>
    fa69:	mov    %r8,%rdx
    fa6c:	jmpq   f8fc <gz_open+0x8c>
    fa71:	movl   $0x1,0x5c(%rax)
    fa78:	jmpq   f8fc <gz_open+0x8c>
    fa7d:	movl   $0x2,0x5c(%rax)
    fa84:	jmpq   f8fc <gz_open+0x8c>
    fa89:	movl   $0x3,0x5c(%rax)
    fa90:	jmpq   f8fc <gz_open+0x8c>
    fa95:	movl   $0x4,0x5c(%rax)
    fa9c:	jmpq   f8fc <gz_open+0x8c>
    faa1:	movl   $0x1,0x40(%rax)
    faa8:	jmpq   f8fc <gz_open+0x8c>
    faad:	mov    -0x18(%rbp),%rax
    fab1:	test   %eax,%eax
    fab3:	jg     fb3e <gz_open+0x2ce>
    fab9:	mov    $0x41,%ecx
    fabe:	jmpq   fb43 <gz_open+0x2d3>
    fac3:	mov    0x20(%r15),%rdi
    fac7:	callq  2060 <free@plt>
    facc:	mov    %r15,%rdi
    facf:	callq  2060 <free@plt>
    fad4:	mov    -0x28(%rbp),%r14
    fad8:	mov    -0x8(%rbp),%r15
    fadc:	xor    %eax,%eax
    fade:	leaveq 
    fadf:	retq   
    fae0:	mov    %rax,%rdi
    fae3:	mov    $0x2,%edx
    fae8:	xor    %r14d,%r14d
    faeb:	mov    %r14,%rsi
    faee:	callq  2300 <lseek64@plt>
    faf3:	movl   $0x79b1,0x18(%r15)
    fafb:	movslq 0x18(%r15),%rax
    faff:	cmp    $0x1c4f,%eax
    fb04:	jne    fb29 <gz_open+0x2b9>
    fb06:	mov    %r14,%rsi
    fb09:	movslq 0x1c(%r15),%rdi
    fb0d:	mov    $0x1,%edx
    fb12:	callq  2300 <lseek64@plt>
    fb17:	mov    %rax,0x48(%r15)
    fb1b:	cmp    $0xffffffffffffffff,%rax
    fb1f:	jne    fb29 <gz_open+0x2b9>
    fb21:	movq   $0x0,0x48(%r15)
    fb29:	mov    %r15,%rdi
    fb2c:	callq  f810 <gz_reset>
    fb31:	mov    %r15,%rax
    fb34:	mov    -0x28(%rbp),%r14
    fb38:	mov    -0x8(%rbp),%r15
    fb3c:	leaveq 
    fb3d:	retq   
    fb3e:	mov    $0xc1,%ecx
    fb43:	cmp    $0x79b1,%esi
    fb49:	je     fb52 <gz_open+0x2e2>
    fb4b:	mov    $0x400,%eax
    fb50:	jmp    fb57 <gz_open+0x2e7>
    fb52:	mov    $0x200,%eax
    fb57:	add    %eax,%ecx
    fb59:	jmpq   f9fd <gz_open+0x18d>
    fb5e:	xchg   %ax,%ax

000000000000fb60 <gzread>:
    fb60:	push   %rbp
    fb61:	mov    %rsp,%rbp
    fb64:	sub    $0x10,%rsp
    fb68:	mov    $0xffffffffffffffff,%rax
    fb6f:	test   %rdi,%rdi
    fb72:	jne    fb76 <gzread+0x16>
    fb74:	leaveq 
    fb75:	retq   
    fb76:	movslq 0x18(%rdi),%rcx
    fb7a:	cmp    $0x1c4f,%ecx
    fb80:	je     fb84 <gzread+0x24>
    fb82:	leaveq 
    fb83:	retq   
    fb84:	movslq 0x6c(%rdi),%rcx
    fb88:	test   %ecx,%ecx
    fb8a:	jne    fba7 <gzread+0x47>
    fb8c:	test   %edx,%edx
    fb8e:	js     fbae <gzread+0x4e>
    fb90:	mov    %edx,%edx
    fb92:	mov    %rdi,%rax
    fb95:	mov    %rdi,-0x8(%rbp)
    fb99:	mov    %rax,%rdi
    fb9c:	callq  10900 <gz_read>
    fba1:	test   %eax,%eax
    fba3:	je     fbca <gzread+0x6a>
    fba5:	leaveq 
    fba6:	retq   
    fba7:	cmp    $0xfffffffb,%ecx
    fbaa:	je     fb8c <gzread+0x2c>
    fbac:	leaveq 
    fbad:	retq   
    fbae:	mov    $0xfffffffffffffffe,%rsi
    fbb5:	lea    0x6730(%rip),%rdx        # 162ec <base_dist+0x260>
    fbbc:	callq  20a0 <gz_error@plt>
    fbc1:	mov    $0xffffffffffffffff,%rax
    fbc8:	leaveq 
    fbc9:	retq   
    fbca:	mov    -0x8(%rbp),%rcx
    fbce:	movslq 0x6c(%rcx),%rcx
    fbd2:	test   %ecx,%ecx
    fbd4:	jne    fbd8 <gzread+0x78>
    fbd6:	leaveq 
    fbd7:	retq   
    fbd8:	cmp    $0xfffffffb,%ecx
    fbdb:	je     fbe6 <gzread+0x86>
    fbdd:	mov    $0xffffffffffffffff,%rax
    fbe4:	leaveq 
    fbe5:	retq   
    fbe6:	leaveq 
    fbe7:	retq   
    fbe8:	nopl   0x0(%rax,%rax,1)

000000000000fbf0 <gzfread>:
    fbf0:	push   %rbp
    fbf1:	mov    %rsp,%rbp
    fbf4:	sub    $0x10,%rsp
    fbf8:	xor    %eax,%eax
    fbfa:	test   %rcx,%rcx
    fbfd:	jne    fc01 <gzfread+0x11>
    fbff:	leaveq 
    fc00:	retq   
    fc01:	movslq 0x18(%rcx),%r8
    fc05:	cmp    $0x1c4f,%r8d
    fc0c:	je     fc10 <gzfread+0x20>
    fc0e:	leaveq 
    fc0f:	retq   
    fc10:	movslq 0x6c(%rcx),%r8
    fc14:	test   %r8d,%r8d
    fc17:	jne    fc2c <gzfread+0x3c>
    fc19:	mov    %rsi,%r8
    fc1c:	imul   %rdx,%r8
    fc20:	test   %rsi,%rsi
    fc23:	jne    fc34 <gzfread+0x44>
    fc25:	test   %r8,%r8
    fc28:	jne    fc4c <gzfread+0x5c>
    fc2a:	leaveq 
    fc2b:	retq   
    fc2c:	cmp    $0xfffffffb,%r8d
    fc30:	je     fc19 <gzfread+0x29>
    fc32:	leaveq 
    fc33:	retq   
    fc34:	mov    %rax,%r9
    fc37:	mov    %rdx,%r10
    fc3a:	xor    %edx,%edx
    fc3c:	mov    %r8,%rax
    fc3f:	div    %rsi
    fc42:	cmp    %r10,%rax
    fc45:	jne    fc6c <gzfread+0x7c>
    fc47:	mov    %r9,%rax
    fc4a:	jmp    fc25 <gzfread+0x35>
    fc4c:	mov    %r15,-0x8(%rbp)
    fc50:	mov    %r8,%rdx
    fc53:	mov    %rsi,%r15
    fc56:	mov    %rdi,%rsi
    fc59:	mov    %rcx,%rdi
    fc5c:	callq  10900 <gz_read>
    fc61:	xor    %edx,%edx
    fc63:	div    %r15
    fc66:	mov    -0x8(%rbp),%r15
    fc6a:	leaveq 
    fc6b:	retq   
    fc6c:	mov    %rcx,%rdi
    fc6f:	mov    $0xfffffffffffffffe,%rsi
    fc76:	lea    0x668e(%rip),%rdx        # 1630b <base_dist+0x27f>
    fc7d:	callq  20a0 <gz_error@plt>
    fc82:	xor    %eax,%eax
    fc84:	leaveq 
    fc85:	retq   
    fc86:	nopw   %cs:0x0(%rax,%rax,1)

000000000000fc90 <gzgets>:
    fc90:	push   %rbp
    fc91:	mov    %rsp,%rbp
    fc94:	sub    $0x40,%rsp
    fc98:	xor    %eax,%eax
    fc9a:	test   %rdi,%rdi
    fc9d:	jne    fca1 <gzgets+0x11>
    fc9f:	leaveq 
    fca0:	retq   
    fca1:	test   %rsi,%rsi
    fca4:	jne    fca8 <gzgets+0x18>
    fca6:	leaveq 
    fca7:	retq   
    fca8:	test   %edx,%edx
    fcaa:	jg     fcae <gzgets+0x1e>
    fcac:	leaveq 
    fcad:	retq   
    fcae:	movslq 0x18(%rdi),%rcx
    fcb2:	cmp    $0x1c4f,%ecx
    fcb8:	je     fcbc <gzgets+0x2c>
    fcba:	leaveq 
    fcbb:	retq   
    fcbc:	movslq 0x6c(%rdi),%rcx
    fcc0:	test   %ecx,%ecx
    fcc2:	je     fccb <gzgets+0x3b>
    fcc4:	cmp    $0xfffffffb,%ecx
    fcc7:	je     fccb <gzgets+0x3b>
    fcc9:	leaveq 
    fcca:	retq   
    fccb:	movslq 0x68(%rdi),%rcx
    fccf:	test   %ecx,%ecx
    fcd1:	je     fd0b <gzgets+0x7b>
    fcd3:	movl   $0x0,0x68(%rdi)
    fcda:	mov    0x60(%rdi),%rcx
    fcde:	mov    %rdi,%rax
    fce1:	mov    %rdx,-0x38(%rbp)
    fce5:	mov    %rsi,-0x30(%rbp)
    fce9:	mov    %rdi,-0x28(%rbp)
    fced:	mov    %rcx,%rsi
    fcf0:	mov    %rax,%rdi
    fcf3:	callq  10840 <gz_skip>
    fcf8:	cmp    $0xffffffff,%eax
    fcfb:	je     fd1c <gzgets+0x8c>
    fcfd:	xor    %eax,%eax
    fcff:	mov    -0x28(%rbp),%rdi
    fd03:	mov    -0x30(%rbp),%rsi
    fd07:	mov    -0x38(%rbp),%rdx
    fd0b:	lea    -0x1(%rdx),%ecx
    fd0e:	test   %ecx,%ecx
    fd10:	jne    fd20 <gzgets+0x90>
    fd12:	mov    %rsi,%rcx
    fd15:	cmp    %rcx,%rsi
    fd18:	jne    fd4b <gzgets+0xbb>
    fd1a:	leaveq 
    fd1b:	retq   
    fd1c:	xor    %eax,%eax
    fd1e:	leaveq 
    fd1f:	retq   
    fd20:	mov    $0xa,%eax
    fd25:	mov    %rsi,-0x30(%rbp)
    fd29:	mov    %rbx,-0x8(%rbp)
    fd2d:	mov    %r12,-0x10(%rbp)
    fd31:	mov    %r13,-0x18(%rbp)
    fd35:	mov    %r14,-0x20(%rbp)
    fd39:	mov    %r15,-0x28(%rbp)
    fd3d:	mov    %rcx,%rbx
    fd40:	mov    %rdi,%r12
    fd43:	mov    %rax,%r13
    fd46:	jmpq   fdd9 <gzgets+0x149>
    fd4b:	movb   $0x0,(%rcx)
    fd4e:	mov    %rsi,%rax
    fd51:	leaveq 
    fd52:	retq   
    fd53:	cmp    %ebx,%r14d
    fd56:	jbe    fd5b <gzgets+0xcb>
    fd58:	mov    %rbx,%r14
    fd5b:	mov    %r13,%rax
    fd5e:	mov    %rsi,%r13
    fd61:	mov    %rax,%rsi
    fd64:	mov    0x8(%r12),%r15
    fd69:	mov    %r14d,%edx
    fd6c:	mov    %r15,%rdi
    fd6f:	callq  21b0 <memchr@plt>
    fd74:	mov    %rax,-0x38(%rbp)
    fd78:	test   %rax,%rax
    fd7b:	je     fd84 <gzgets+0xf4>
    fd7d:	sub    %r15,%rax
    fd80:	lea    0x1(%rax),%r14d
    fd84:	mov    %r15,%rsi
    fd87:	mov    %r13,%r15
    fd8a:	mov    %r14d,%r13d
    fd8d:	mov    %r15,%rdi
    fd90:	mov    %r13,%rdx
    fd93:	callq  21f0 <memcpy@plt>
    fd98:	mov    (%r12),%eax
    fd9c:	sub    %r14d,%eax
    fd9f:	mov    %eax,(%r12)
    fda3:	mov    %r13,%rax
    fda6:	add    0x8(%r12),%rax
    fdab:	mov    %rax,0x8(%r12)
    fdb0:	mov    %r13,%rax
    fdb3:	add    0x10(%r12),%rax
    fdb8:	mov    %rax,0x10(%r12)
    fdbd:	lea    0x0(%r13,%r15,1),%rsi
    fdc2:	cmp    %ebx,%r14d
    fdc5:	je     fe19 <gzgets+0x189>
    fdc7:	mov    -0x38(%rbp),%rax
    fdcb:	test   %rax,%rax
    fdce:	jne    fe3b <gzgets+0x1ab>
    fdd0:	sub    %r14d,%ebx
    fdd3:	mov    $0xa,%r13d
    fdd9:	mov    (%r12),%eax
    fddd:	test   %eax,%eax
    fddf:	je     fe5d <gzgets+0x1cd>
    fde1:	mov    (%r12),%r14d
    fde5:	test   %r14d,%r14d
    fde8:	jne    fd53 <gzgets+0xc3>
    fdee:	movl   $0x1,0x54(%r12)
    fdf7:	mov    %rsi,%rcx
    fdfa:	mov    -0x28(%rbp),%r15
    fdfe:	mov    -0x20(%rbp),%r14
    fe02:	mov    -0x18(%rbp),%r13
    fe06:	mov    -0x10(%rbp),%r12
    fe0a:	mov    -0x8(%rbp),%rbx
    fe0e:	xor    %eax,%eax
    fe10:	mov    -0x30(%rbp),%rsi
    fe14:	jmpq   fd15 <gzgets+0x85>
    fe19:	mov    %rsi,%rcx
    fe1c:	mov    -0x28(%rbp),%r15
    fe20:	mov    -0x20(%rbp),%r14
    fe24:	mov    -0x18(%rbp),%r13
    fe28:	mov    -0x10(%rbp),%r12
    fe2c:	mov    -0x8(%rbp),%rbx
    fe30:	xor    %eax,%eax
    fe32:	mov    -0x30(%rbp),%rsi
    fe36:	jmpq   fd15 <gzgets+0x85>
    fe3b:	mov    %rsi,%rcx
    fe3e:	mov    -0x28(%rbp),%r15
    fe42:	mov    -0x20(%rbp),%r14
    fe46:	mov    -0x18(%rbp),%r13
    fe4a:	mov    -0x10(%rbp),%r12
    fe4e:	mov    -0x8(%rbp),%rbx
    fe52:	xor    %eax,%eax
    fe54:	mov    -0x30(%rbp),%rsi
    fe58:	jmpq   fd15 <gzgets+0x85>
    fe5d:	mov    %rsi,%r14
    fe60:	mov    %r12,%rdi
    fe63:	callq  10740 <gz_fetch>
    fe68:	cmp    $0xffffffff,%eax
    fe6b:	je     fe75 <gzgets+0x1e5>
    fe6d:	mov    %r14,%rsi
    fe70:	jmpq   fde1 <gzgets+0x151>
    fe75:	mov    -0x28(%rbp),%r15
    fe79:	mov    -0x20(%rbp),%r14
    fe7d:	mov    -0x18(%rbp),%r13
    fe81:	mov    -0x10(%rbp),%r12
    fe85:	mov    -0x8(%rbp),%rbx
    fe89:	xor    %eax,%eax
    fe8b:	leaveq 
    fe8c:	retq   
    fe8d:	nopl   (%rax)

000000000000fe90 <gzgetc>:
    fe90:	push   %rbp
    fe91:	mov    %rsp,%rbp
    fe94:	sub    $0x10,%rsp
    fe98:	mov    $0xffffffffffffffff,%rax
    fe9f:	test   %rdi,%rdi
    fea2:	jne    fea6 <gzgetc+0x16>
    fea4:	leaveq 
    fea5:	retq   
    fea6:	movslq 0x18(%rdi),%rcx
    feaa:	cmp    $0x1c4f,%ecx
    feb0:	je     feb4 <gzgetc+0x24>
    feb2:	leaveq 
    feb3:	retq   
    feb4:	movslq 0x6c(%rdi),%rcx
    feb8:	test   %ecx,%ecx
    feba:	jne    fedd <gzgetc+0x4d>
    febc:	mov    (%rdi),%eax
    febe:	test   %eax,%eax
    fec0:	jne    fee4 <gzgetc+0x54>
    fec2:	lea    -0x1(%rbp),%rsi
    fec6:	mov    $0x1,%edx
    fecb:	callq  10900 <gz_read>
    fed0:	test   %eax,%eax
    fed2:	jg     ff06 <gzgetc+0x76>
    fed4:	mov    $0xffffffffffffffff,%rax
    fedb:	leaveq 
    fedc:	retq   
    fedd:	cmp    $0xfffffffb,%ecx
    fee0:	je     febc <gzgetc+0x2c>
    fee2:	leaveq 
    fee3:	retq   
    fee4:	add    $0xffffffff,%eax
    fee7:	mov    %eax,(%rdi)
    fee9:	mov    0x10(%rdi),%rax
    feed:	add    $0x1,%rax
    fef1:	mov    %rax,0x10(%rdi)
    fef5:	mov    0x8(%rdi),%rax
    fef9:	lea    0x1(%rax),%rcx
    fefd:	mov    %rcx,0x8(%rdi)
    ff01:	movzbl (%rax),%eax
    ff04:	leaveq 
    ff05:	retq   
    ff06:	movzbl -0x1(%rbp),%eax
    ff0a:	leaveq 
    ff0b:	retq   
    ff0c:	nopl   0x0(%rax)

000000000000ff10 <gzungetc>:
    ff10:	push   %rbp
    ff11:	mov    %rsp,%rbp
    ff14:	sub    $0x10,%rsp
    ff18:	mov    $0xffffffffffffffff,%rax
    ff1f:	test   %rsi,%rsi
    ff22:	jne    ff26 <gzungetc+0x16>
    ff24:	leaveq 
    ff25:	retq   
    ff26:	movslq 0x18(%rsi),%rcx
    ff2a:	cmp    $0x1c4f,%ecx
    ff30:	je     ff34 <gzungetc+0x24>
    ff32:	leaveq 
    ff33:	retq   
    ff34:	movslq 0x6c(%rsi),%rcx
    ff38:	test   %ecx,%ecx
    ff3a:	je     ff43 <gzungetc+0x33>
    ff3c:	cmp    $0xfffffffb,%ecx
    ff3f:	je     ff43 <gzungetc+0x33>
    ff41:	leaveq 
    ff42:	retq   
    ff43:	movslq 0x68(%rsi),%rcx
    ff47:	test   %ecx,%ecx
    ff49:	je     ff80 <gzungetc+0x70>
    ff4b:	movl   $0x0,0x68(%rsi)
    ff52:	mov    0x60(%rsi),%rcx
    ff56:	mov    %rsi,%rax
    ff59:	mov    %rdi,-0x10(%rbp)
    ff5d:	mov    %rsi,-0x8(%rbp)
    ff61:	mov    %rcx,%rsi
    ff64:	mov    %rax,%rdi
    ff67:	callq  10840 <gz_skip>
    ff6c:	cmp    $0xffffffff,%eax
    ff6f:	je     ff86 <gzungetc+0x76>
    ff71:	mov    $0xffffffffffffffff,%rax
    ff78:	mov    -0x8(%rbp),%rsi
    ff7c:	mov    -0x10(%rbp),%rdi
    ff80:	test   %edi,%edi
    ff82:	jns    ff8f <gzungetc+0x7f>
    ff84:	leaveq 
    ff85:	retq   
    ff86:	mov    $0xffffffffffffffff,%rax
    ff8d:	leaveq 
    ff8e:	retq   
    ff8f:	mov    (%rsi),%edx
    ff91:	test   %edx,%edx
    ff93:	je     ffb2 <gzungetc+0xa2>
    ff95:	mov    0x28(%rsi),%eax
    ff98:	add    %eax,%eax
    ff9a:	cmp    %eax,%edx
    ff9c:	je     ffe7 <gzungetc+0xd7>
    ff9e:	mov    0x38(%rsi),%rcx
    ffa2:	cmp    0x8(%rsi),%rcx
    ffa6:	jne    10020 <gzungetc+0x110>
    ffa8:	mov    %eax,%eax
    ffaa:	add    %rcx,%rax
    ffad:	add    %rdx,%rcx
    ffb0:	jmp    10013 <gzungetc+0x103>
    ffb2:	movl   $0x1,(%rsi)
    ffb8:	mov    0x28(%rsi),%eax
    ffbb:	add    %eax,%eax
    ffbd:	mov    %eax,%ecx
    ffbf:	mov    0x38(%rsi),%rax
    ffc3:	lea    -0x1(%rcx,%rax,1),%rax
    ffc8:	mov    %rax,0x8(%rsi)
    ffcc:	mov    %dil,(%rax)
    ffcf:	mov    0x10(%rsi),%rax
    ffd3:	add    $0xffffffffffffffff,%rax
    ffd7:	mov    %rax,0x10(%rsi)
    ffdb:	movl   $0x0,0x54(%rsi)
    ffe2:	mov    %rdi,%rax
    ffe5:	leaveq 
    ffe6:	retq   
    ffe7:	mov    %rsi,%rdi
    ffea:	mov    $0xfffffffffffffffd,%rsi
    fff1:	lea    0x6334(%rip),%rdx        # 1632c <base_dist+0x2a0>
    fff8:	callq  20a0 <gz_error@plt>
    fffd:	mov    $0xffffffffffffffff,%rax
   10004:	leaveq 
   10005:	retq   
   10006:	add    $0xffffffffffffffff,%rcx
   1000a:	movzbl (%rcx),%edx
   1000d:	add    $0xffffffffffffffff,%rax
   10011:	mov    %dl,(%rax)
   10013:	mov    0x38(%rsi),%rdx
   10017:	cmp    %rcx,%rdx
   1001a:	jb     10006 <gzungetc+0xf6>
   1001c:	mov    %rax,0x8(%rsi)
   10020:	mov    (%rsi),%eax
   10022:	add    $0x1,%eax
   10025:	mov    %eax,(%rsi)
   10027:	mov    0x8(%rsi),%rax
   1002b:	add    $0xffffffffffffffff,%rax
   1002f:	mov    %rax,0x8(%rsi)
   10033:	mov    %dil,(%rax)
   10036:	mov    0x10(%rsi),%rax
   1003a:	add    $0xffffffffffffffff,%rax
   1003e:	mov    %rax,0x10(%rsi)
   10042:	movl   $0x0,0x54(%rsi)
   10049:	mov    %rdi,%rax
   1004c:	leaveq 
   1004d:	retq   
   1004e:	xchg   %ax,%ax

0000000000010050 <gzdirect>:
   10050:	push   %rbp
   10051:	mov    %rsp,%rbp
   10054:	sub    $0x10,%rsp
   10058:	test   %rdi,%rdi
   1005b:	jne    10061 <gzdirect+0x11>
   1005d:	xor    %eax,%eax
   1005f:	leaveq 
   10060:	retq   
   10061:	movslq 0x18(%rdi),%rax
   10065:	cmp    $0x1c4f,%eax
   1006a:	je     10072 <gzdirect+0x22>
   1006c:	movslq 0x40(%rdi),%rax
   10070:	leaveq 
   10071:	retq   
   10072:	movslq 0x44(%rdi),%rax
   10076:	test   %eax,%eax
   10078:	jne    1006c <gzdirect+0x1c>
   1007a:	mov    (%rdi),%eax
   1007c:	test   %eax,%eax
   1007e:	jne    1006c <gzdirect+0x1c>
   10080:	mov    %rdi,%rax
   10083:	mov    %r15,-0x8(%rbp)
   10087:	mov    %rdi,%r15
   1008a:	mov    %rax,%rdi
   1008d:	callq  10310 <gz_look>
   10092:	mov    %r15,%rdi
   10095:	mov    -0x8(%rbp),%r15
   10099:	jmp    1006c <gzdirect+0x1c>
   1009b:	nopl   0x0(%rax,%rax,1)

00000000000100a0 <gzclose_r>:
   100a0:	push   %rbp
   100a1:	mov    %rsp,%rbp
   100a4:	sub    $0x10,%rsp
   100a8:	mov    $0xfffffffffffffffe,%rax
   100af:	test   %rdi,%rdi
   100b2:	jne    100b6 <gzclose_r+0x16>
   100b4:	leaveq 
   100b5:	retq   
   100b6:	movslq 0x18(%rdi),%rcx
   100ba:	cmp    $0x1c4f,%ecx
   100c0:	je     100c4 <gzclose_r+0x24>
   100c2:	leaveq 
   100c3:	retq   
   100c4:	mov    0x28(%rdi),%eax
   100c7:	test   %eax,%eax
   100c9:	jne    100d3 <gzclose_r+0x33>
   100cb:	mov    %r15,%rcx
   100ce:	mov    %rdi,%r15
   100d1:	jmp    100fc <gzclose_r+0x5c>
   100d3:	lea    0x78(%rdi),%rax
   100d7:	mov    %r15,-0x10(%rbp)
   100db:	mov    %rdi,%r15
   100de:	mov    %rax,%rdi
   100e1:	callq  2210 <inflateEnd@plt>
   100e6:	mov    0x38(%r15),%rdi
   100ea:	callq  2060 <free@plt>
   100ef:	mov    0x30(%r15),%rdi
   100f3:	callq  2060 <free@plt>
   100f8:	mov    -0x10(%rbp),%rcx
   100fc:	xor    %esi,%esi
   100fe:	movslq 0x6c(%r15),%rax
   10102:	cmp    $0xfffffffb,%eax
   10105:	je     1010c <gzclose_r+0x6c>
   10107:	mov    %rsi,%rax
   1010a:	jmp    10113 <gzclose_r+0x73>
   1010c:	mov    $0xfffffffffffffffb,%rax
   10113:	mov    %rax,-0x8(%rbp)
   10117:	mov    %rsi,%rdx
   1011a:	mov    %r15,%rdi
   1011d:	mov    %rcx,-0x10(%rbp)
   10121:	callq  20a0 <gz_error@plt>
   10126:	mov    0x20(%r15),%rdi
   1012a:	callq  2060 <free@plt>
   1012f:	movslq 0x1c(%r15),%rdi
   10133:	callq  2180 <close@plt>
   10138:	mov    %r15,%rdi
   1013b:	mov    %rax,%r15
   1013e:	callq  2060 <free@plt>
   10143:	test   %r15d,%r15d
   10146:	je     10155 <gzclose_r+0xb5>
   10148:	mov    $0xffffffffffffffff,%rax
   1014f:	mov    -0x10(%rbp),%r15
   10153:	leaveq 
   10154:	retq   
   10155:	mov    -0x8(%rbp),%rax
   10159:	mov    -0x10(%rbp),%r15
   1015d:	leaveq 
   1015e:	retq   
   1015f:	nop

0000000000010160 <gzgetc_>:
   10160:	push   %rbp
   10161:	mov    %rsp,%rbp
   10164:	callq  20b0 <gzgetc@plt>
   10169:	leaveq 
   1016a:	retq   
   1016b:	nopl   0x0(%rax,%rax,1)

0000000000010170 <gz_load>:
   10170:	push   %rbp
   10171:	mov    %rsp,%rbp
   10174:	sub    $0x30,%rsp
   10178:	mov    %rbx,-0x8(%rbp)
   1017c:	mov    %r12,-0x10(%rbp)
   10180:	mov    %r13,-0x18(%rbp)
   10184:	mov    %r14,-0x20(%rbp)
   10188:	mov    %r15,-0x28(%rbp)
   1018c:	mov    %rdi,%rbx
   1018f:	mov    %rcx,%r12
   10192:	mov    %rsi,%r13
   10195:	mov    %rdx,%r15
   10198:	movl   $0x0,(%r12)
   101a0:	mov    $0x40000000,%r14d
   101a6:	jmp    101ce <gz_load+0x5e>
   101a8:	mov    %r14,%rax
   101ab:	lea    (%rcx,%r13,1),%rsi
   101af:	movslq 0x1c(%rbx),%rdi
   101b3:	mov    %eax,%edx
   101b5:	callq  21c0 <read@plt>
   101ba:	test   %eax,%eax
   101bc:	jle    101e0 <gz_load+0x70>
   101be:	mov    %rax,%rcx
   101c1:	add    (%r12),%ecx
   101c5:	mov    %ecx,(%r12)
   101c9:	cmp    %r15d,%ecx
   101cc:	jae    101e0 <gz_load+0x70>
   101ce:	mov    (%r12),%ecx
   101d2:	mov    %r15,%rax
   101d5:	sub    %ecx,%eax
   101d7:	cmp    $0x40000000,%eax
   101dc:	ja     101a8 <gz_load+0x38>
   101de:	jmp    101ab <gz_load+0x3b>
   101e0:	test   %eax,%eax
   101e2:	js     10203 <gz_load+0x93>
   101e4:	xor    %ecx,%ecx
   101e6:	test   %eax,%eax
   101e8:	je     1023e <gz_load+0xce>
   101ea:	mov    %rcx,%rax
   101ed:	mov    -0x28(%rbp),%r15
   101f1:	mov    -0x20(%rbp),%r14
   101f5:	mov    -0x18(%rbp),%r13
   101f9:	mov    -0x10(%rbp),%r12
   101fd:	mov    -0x8(%rbp),%rbx
   10201:	leaveq 
   10202:	retq   
   10203:	callq  2070 <__errno_location@plt>
   10208:	movslq (%rax),%rdi
   1020b:	callq  2330 <strerror@plt>
   10210:	mov    %rax,%rdx
   10213:	mov    %rbx,%rdi
   10216:	mov    $0xffffffffffffffff,%r12
   1021d:	mov    %r12,%rsi
   10220:	callq  20a0 <gz_error@plt>
   10225:	mov    %r12,%rax
   10228:	mov    -0x28(%rbp),%r15
   1022c:	mov    -0x20(%rbp),%r14
   10230:	mov    -0x18(%rbp),%r13
   10234:	mov    -0x10(%rbp),%r12
   10238:	mov    -0x8(%rbp),%rbx
   1023c:	leaveq 
   1023d:	retq   
   1023e:	movl   $0x1,0x50(%rbx)
   10245:	mov    %rcx,%rax
   10248:	mov    -0x28(%rbp),%r15
   1024c:	mov    -0x20(%rbp),%r14
   10250:	mov    -0x18(%rbp),%r13
   10254:	mov    -0x10(%rbp),%r12
   10258:	mov    -0x8(%rbp),%rbx
   1025c:	leaveq 
   1025d:	retq   
   1025e:	xchg   %ax,%ax

0000000000010260 <gz_avail>:
   10260:	push   %rbp
   10261:	mov    %rsp,%rbp
   10264:	sub    $0x10,%rsp
   10268:	mov    $0xffffffffffffffff,%rax
   1026f:	movslq 0x6c(%rdi),%rcx
   10273:	test   %ecx,%ecx
   10275:	jne    10283 <gz_avail+0x23>
   10277:	xor    %eax,%eax
   10279:	movslq 0x50(%rdi),%rcx
   1027d:	test   %ecx,%ecx
   1027f:	je     1028a <gz_avail+0x2a>
   10281:	leaveq 
   10282:	retq   
   10283:	cmp    $0xfffffffb,%ecx
   10286:	je     10277 <gz_avail+0x17>
   10288:	leaveq 
   10289:	retq   
   1028a:	mov    0x80(%rdi),%edx
   10290:	test   %edx,%edx
   10292:	jne    102ce <gz_avail+0x6e>
   10294:	mov    0x80(%rdi),%eax
   1029a:	mov    %rax,%rsi
   1029d:	add    0x30(%rdi),%rsi
   102a1:	mov    0x28(%rdi),%edx
   102a4:	sub    %eax,%edx
   102a6:	lea    -0xc(%rbp),%rcx
   102aa:	mov    %rdi,%rax
   102ad:	mov    %r15,-0x8(%rbp)
   102b1:	mov    %rdi,%r15
   102b4:	mov    %rax,%rdi
   102b7:	callq  10170 <gz_load>
   102bc:	cmp    $0xffffffff,%eax
   102bf:	jne    102d8 <gz_avail+0x78>
   102c1:	mov    $0xffffffffffffffff,%rax
   102c8:	mov    -0x8(%rbp),%r15
   102cc:	leaveq 
   102cd:	retq   
   102ce:	mov    0x30(%rdi),%rcx
   102d2:	mov    0x78(%rdi),%rax
   102d6:	jmp    10301 <gz_avail+0xa1>
   102d8:	mov    0x80(%r15),%eax
   102df:	add    -0xc(%rbp),%eax
   102e2:	mov    %eax,0x80(%r15)
   102e9:	mov    0x30(%r15),%rax
   102ed:	mov    %rax,0x78(%r15)
   102f1:	xor    %eax,%eax
   102f3:	mov    -0x8(%rbp),%r15
   102f7:	leaveq 
   102f8:	retq   
   102f9:	add    $0x1,%rax
   102fd:	add    $0x1,%rcx
   10301:	movzbl (%rax),%esi
   10304:	mov    %sil,(%rcx)
   10307:	add    $0xffffffff,%edx
   1030a:	test   %edx,%edx
   1030c:	jne    102f9 <gz_avail+0x99>
   1030e:	jmp    10294 <gz_avail+0x34>

0000000000010310 <gz_look>:
   10310:	push   %rbp
   10311:	mov    %rsp,%rbp
   10314:	sub    $0x20,%rsp
   10318:	lea    0x78(%rdi),%r8
   1031c:	mov    %r8,-0x18(%rbp)
   10320:	mov    0x28(%rdi),%eax
   10323:	test   %eax,%eax
   10325:	je     103ae <gz_look+0x9e>
   1032b:	mov    %r15,%rcx
   1032e:	mov    %rdi,%r15
   10331:	xor    %eax,%eax
   10333:	mov    0x80(%r15),%edx
   1033a:	cmp    $0x1,%edx
   1033d:	jbe    10463 <gz_look+0x153>
   10343:	mov    0x80(%r15),%edx
   1034a:	cmp    $0x1,%edx
   1034d:	ja     10485 <gz_look+0x175>
   10353:	movslq 0x40(%r15),%rdx
   10357:	test   %edx,%edx
   10359:	je     104c5 <gz_look+0x1b5>
   1035f:	mov    0x38(%r15),%rdi
   10363:	mov    %rdi,0x8(%r15)
   10367:	mov    0x80(%r15),%edx
   1036e:	test   %edx,%edx
   10370:	je     10399 <gz_look+0x89>
   10372:	mov    (%r8),%rsi
   10375:	mov    %rcx,-0x18(%rbp)
   10379:	callq  21f0 <memcpy@plt>
   1037e:	mov    0x80(%r15),%eax
   10385:	mov    %eax,(%r15)
   10388:	movl   $0x0,0x80(%r15)
   10393:	xor    %eax,%eax
   10395:	mov    -0x18(%rbp),%rcx
   10399:	movl   $0x1,0x44(%r15)
   103a1:	movl   $0x1,0x40(%r15)
   103a9:	mov    %rcx,%r15
   103ac:	leaveq 
   103ad:	retq   
   103ae:	mov    0x2c(%rdi),%eax
   103b1:	mov    %r15,-0x10(%rbp)
   103b5:	mov    %rdi,%r15
   103b8:	mov    %rax,%rdi
   103bb:	callq  2240 <malloc@plt>
   103c0:	mov    %rax,0x30(%r15)
   103c4:	mov    0x2c(%r15),%eax
   103c8:	add    %eax,%eax
   103ca:	mov    %eax,%edi
   103cc:	callq  2240 <malloc@plt>
   103d1:	mov    %rax,0x38(%r15)
   103d5:	mov    0x30(%r15),%rcx
   103d9:	test   %rcx,%rcx
   103dc:	je     104e4 <gz_look+0x1d4>
   103e2:	test   %rax,%rax
   103e5:	je     104e4 <gz_look+0x1d4>
   103eb:	mov    0x2c(%r15),%eax
   103ef:	mov    %eax,0x28(%r15)
   103f3:	movq   $0x0,0xb8(%r15)
   103fe:	movq   $0x0,0xc0(%r15)
   10409:	movq   $0x0,0xc8(%r15)
   10414:	movl   $0x0,0x80(%r15)
   1041f:	movq   $0x0,0x78(%r15)
   10427:	mov    $0x1f,%esi
   1042c:	lea    0x5f26(%rip),%rdx        # 16359 <base_dist+0x2cd>
   10433:	mov    $0x70,%ecx
   10438:	mov    -0x18(%rbp),%rax
   1043c:	mov    %rax,%rdi
   1043f:	mov    %r14,-0x8(%rbp)
   10443:	mov    %rax,%r14
   10446:	callq  22d0 <inflateInit2_@plt>
   1044b:	test   %eax,%eax
   1044d:	jne    10518 <gz_look+0x208>
   10453:	mov    %r14,%r8
   10456:	mov    -0x8(%rbp),%r14
   1045a:	mov    -0x10(%rbp),%rcx
   1045e:	jmpq   10331 <gz_look+0x21>
   10463:	mov    %r15,%rdi
   10466:	mov    %rcx,-0x10(%rbp)
   1046a:	callq  10260 <gz_avail>
   1046f:	cmp    $0xffffffff,%eax
   10472:	jne    10558 <gz_look+0x248>
   10478:	mov    $0xffffffffffffffff,%rax
   1047f:	mov    -0x10(%rbp),%r15
   10483:	leaveq 
   10484:	retq   
   10485:	mov    (%r8),%rsi
   10488:	movzbl (%rsi),%edx
   1048b:	cmp    $0x1f,%dl
   1048e:	jne    10353 <gz_look+0x43>
   10494:	movzbl 0x1(%rsi),%edx
   10498:	cmp    $0x8b,%dl
   1049b:	jne    10353 <gz_look+0x43>
   104a1:	mov    %rcx,-0x18(%rbp)
   104a5:	mov    %r8,%rdi
   104a8:	callq  22f0 <inflateReset@plt>
   104ad:	movl   $0x2,0x44(%r15)
   104b5:	movl   $0x0,0x40(%r15)
   104bd:	xor    %eax,%eax
   104bf:	mov    -0x18(%rbp),%r15
   104c3:	leaveq 
   104c4:	retq   
   104c5:	movl   $0x0,0x80(%r15)
   104d0:	movl   $0x1,0x50(%r15)
   104d8:	movl   $0x0,(%r15)
   104df:	mov    %rcx,%r15
   104e2:	leaveq 
   104e3:	retq   
   104e4:	mov    %rax,%rdi
   104e7:	callq  2060 <free@plt>
   104ec:	mov    0x30(%r15),%rdi
   104f0:	callq  2060 <free@plt>
   104f5:	mov    %r15,%rdi
   104f8:	lea    0x5e4c(%rip),%rdx        # 1634b <base_dist+0x2bf>
   104ff:	mov    $0xfffffffffffffffc,%rsi
   10506:	callq  20a0 <gz_error@plt>
   1050b:	mov    $0xffffffffffffffff,%rax
   10512:	mov    -0x10(%rbp),%r15
   10516:	leaveq 
   10517:	retq   
   10518:	mov    0x38(%r15),%rdi
   1051c:	callq  2060 <free@plt>
   10521:	mov    0x30(%r15),%rdi
   10525:	callq  2060 <free@plt>
   1052a:	mov    %r15,%rdi
   1052d:	movl   $0x0,0x28(%rdi)
   10534:	lea    0x5e10(%rip),%rdx        # 1634b <base_dist+0x2bf>
   1053b:	mov    $0xfffffffffffffffc,%rsi
   10542:	callq  20a0 <gz_error@plt>
   10547:	mov    -0x8(%rbp),%r14
   1054b:	mov    $0xffffffffffffffff,%rax
   10552:	mov    -0x10(%rbp),%r15
   10556:	leaveq 
   10557:	retq   
   10558:	mov    0x80(%r15),%eax
   1055f:	test   %eax,%eax
   10561:	je     10572 <gz_look+0x262>
   10563:	xor    %eax,%eax
   10565:	mov    -0x18(%rbp),%r8
   10569:	mov    -0x10(%rbp),%rcx
   1056d:	jmpq   10343 <gz_look+0x33>
   10572:	xor    %eax,%eax
   10574:	mov    -0x10(%rbp),%r15
   10578:	leaveq 
   10579:	retq   
   1057a:	nopw   0x0(%rax,%rax,1)

0000000000010580 <gz_decomp>:
   10580:	push   %rbp
   10581:	mov    %rsp,%rbp
   10584:	sub    $0x30,%rsp
   10588:	mov    %r12,-0x10(%rbp)
   1058c:	mov    %r13,-0x18(%rbp)
   10590:	mov    %r14,-0x20(%rbp)
   10594:	mov    %r15,-0x28(%rbp)
   10598:	mov    0x98(%rdi),%eax
   1059e:	mov    %rax,-0x8(%rbp)
   105a2:	mov    $0xffffffffffffffff,%r12
   105a9:	lea    0x78(%rdi),%r15
   105ad:	xor    %r14d,%r14d
   105b0:	mov    %r14,-0x30(%rbp)
   105b4:	mov    %rdi,%r13
   105b7:	mov    0x80(%r13),%eax
   105be:	test   %eax,%eax
   105c0:	jne    105cf <gz_decomp+0x4f>
   105c2:	mov    %r13,%rdi
   105c5:	callq  10260 <gz_avail>
   105ca:	cmp    $0xffffffff,%eax
   105cd:	je     1062f <gz_decomp+0xaf>
   105cf:	mov    0x80(%r13),%eax
   105d6:	test   %eax,%eax
   105d8:	jne    10644 <gz_decomp+0xc4>
   105da:	mov    $0xfffffffffffffffb,%rsi
   105e1:	lea    0x5d78(%rip),%rdx        # 16360 <base_dist+0x2d4>
   105e8:	mov    %r13,%rdi
   105eb:	callq  20a0 <gz_error@plt>
   105f0:	mov    -0x30(%rbp),%rax
   105f4:	mov    0x98(%r13),%edx
   105fb:	mov    -0x8(%rbp),%rcx
   105ff:	sub    %edx,%ecx
   10601:	mov    %ecx,0x0(%r13)
   10605:	mov    %ecx,%edx
   10607:	mov    0x90(%r13),%rcx
   1060e:	sub    %rdx,%rcx
   10611:	mov    %rcx,0x8(%r13)
   10615:	cmp    $0x1,%eax
   10618:	je     1068d <gz_decomp+0x10d>
   1061a:	mov    %r14,%rax
   1061d:	mov    -0x28(%rbp),%r15
   10621:	mov    -0x20(%rbp),%r14
   10625:	mov    -0x18(%rbp),%r13
   10629:	mov    -0x10(%rbp),%r12
   1062d:	leaveq 
   1062e:	retq   
   1062f:	mov    %r12,%rax
   10632:	mov    -0x28(%rbp),%r15
   10636:	mov    -0x20(%rbp),%r14
   1063a:	mov    -0x18(%rbp),%r13
   1063e:	mov    -0x10(%rbp),%r12
   10642:	leaveq 
   10643:	retq   
   10644:	mov    %r15,%rdi
   10647:	mov    %r14,%rsi
   1064a:	callq  2080 <inflate@plt>
   1064f:	mov    %rax,-0x30(%rbp)
   10653:	cmp    $0xfffffffe,%eax
   10656:	je     106aa <gz_decomp+0x12a>
   10658:	cmp    $0x2,%eax
   1065b:	je     106aa <gz_decomp+0x12a>
   1065d:	cmp    $0xfffffffc,%eax
   10660:	je     106d5 <gz_decomp+0x155>
   10662:	cmp    $0xfffffffd,%eax
   10665:	je     10700 <gz_decomp+0x180>
   1066b:	mov    0x98(%r13),%ecx
   10672:	test   %ecx,%ecx
   10674:	je     105f4 <gz_decomp+0x74>
   1067a:	cmp    $0x1,%eax
   1067d:	jne    105b7 <gz_decomp+0x37>
   10683:	mov    $0x1,%eax
   10688:	jmpq   105f4 <gz_decomp+0x74>
   1068d:	movl   $0x0,0x44(%r13)
   10695:	mov    %r14,%rax
   10698:	mov    -0x28(%rbp),%r15
   1069c:	mov    -0x20(%rbp),%r14
   106a0:	mov    -0x18(%rbp),%r13
   106a4:	mov    -0x10(%rbp),%r12
   106a8:	leaveq 
   106a9:	retq   
   106aa:	mov    %r13,%rdi
   106ad:	mov    $0xfffffffffffffffe,%rsi
   106b4:	lea    0x5cbc(%rip),%rdx        # 16377 <base_dist+0x2eb>
   106bb:	callq  20a0 <gz_error@plt>
   106c0:	mov    %r12,%rax
   106c3:	mov    -0x28(%rbp),%r15
   106c7:	mov    -0x20(%rbp),%r14
   106cb:	mov    -0x18(%rbp),%r13
   106cf:	mov    -0x10(%rbp),%r12
   106d3:	leaveq 
   106d4:	retq   
   106d5:	mov    %r13,%rdi
   106d8:	mov    $0xfffffffffffffffc,%rsi
   106df:	lea    0x5c65(%rip),%rdx        # 1634b <base_dist+0x2bf>
   106e6:	callq  20a0 <gz_error@plt>
   106eb:	mov    %r12,%rax
   106ee:	mov    -0x28(%rbp),%r15
   106f2:	mov    -0x20(%rbp),%r14
   106f6:	mov    -0x18(%rbp),%r13
   106fa:	mov    -0x10(%rbp),%r12
   106fe:	leaveq 
   106ff:	retq   
   10700:	mov    0xa8(%r13),%rdx
   10707:	test   %rdx,%rdx
   1070a:	jne    10713 <gz_decomp+0x193>
   1070c:	lea    0x5c8b(%rip),%rdx        # 1639e <base_dist+0x312>
   10713:	mov    %r13,%rdi
   10716:	mov    $0xfffffffffffffffd,%rsi
   1071d:	callq  20a0 <gz_error@plt>
   10722:	mov    %r12,%rax
   10725:	mov    -0x28(%rbp),%r15
   10729:	mov    -0x20(%rbp),%r14
   1072d:	mov    -0x18(%rbp),%r13
   10731:	mov    -0x10(%rbp),%r12
   10735:	leaveq 
   10736:	retq   
   10737:	nopw   0x0(%rax,%rax,1)

0000000000010740 <gz_fetch>:
   10740:	push   %rbp
   10741:	mov    %rsp,%rbp
   10744:	sub    $0x10,%rsp
   10748:	mov    %r14,-0x8(%rbp)
   1074c:	mov    %r15,-0x10(%rbp)
   10750:	mov    %rdi,%r15
   10753:	mov    $0xffffffffffffffff,%r14
   1075a:	jmp    10764 <gz_fetch+0x24>
   1075c:	movslq 0x50(%r15),%rax
   10760:	test   %eax,%eax
   10762:	jne    107a8 <gz_fetch+0x68>
   10764:	movslq 0x44(%r15),%rax
   10768:	test   %eax,%eax
   1076a:	jle    107bf <gz_fetch+0x7f>
   1076c:	cmp    $0x1,%eax
   1076f:	je     107d6 <gz_fetch+0x96>
   10771:	cmp    $0x2,%eax
   10774:	jne    107c3 <gz_fetch+0x83>
   10776:	mov    0x28(%r15),%eax
   1077a:	add    %eax,%eax
   1077c:	mov    %eax,0x98(%r15)
   10783:	mov    0x38(%r15),%rax
   10787:	mov    %rax,0x90(%r15)
   1078e:	mov    %r15,%rdi
   10791:	callq  10580 <gz_decomp>
   10796:	cmp    $0xffffffff,%eax
   10799:	jne    107c3 <gz_fetch+0x83>
   1079b:	mov    %r14,%rax
   1079e:	mov    -0x10(%rbp),%r15
   107a2:	mov    -0x8(%rbp),%r14
   107a6:	leaveq 
   107a7:	retq   
   107a8:	mov    0x80(%r15),%eax
   107af:	test   %eax,%eax
   107b1:	jne    10764 <gz_fetch+0x24>
   107b3:	xor    %eax,%eax
   107b5:	mov    -0x10(%rbp),%r15
   107b9:	mov    -0x8(%rbp),%r14
   107bd:	leaveq 
   107be:	retq   
   107bf:	test   %eax,%eax
   107c1:	je     107fe <gz_fetch+0xbe>
   107c3:	mov    (%r15),%eax
   107c6:	test   %eax,%eax
   107c8:	je     1075c <gz_fetch+0x1c>
   107ca:	xor    %eax,%eax
   107cc:	mov    -0x10(%rbp),%r15
   107d0:	mov    -0x8(%rbp),%r14
   107d4:	leaveq 
   107d5:	retq   
   107d6:	mov    0x38(%r15),%rsi
   107da:	mov    0x28(%r15),%eax
   107de:	lea    (%rax,%rax,1),%edx
   107e1:	mov    %r15,%rcx
   107e4:	mov    %r15,%rdi
   107e7:	callq  10170 <gz_load>
   107ec:	cmp    $0xffffffff,%eax
   107ef:	jne    1081f <gz_fetch+0xdf>
   107f1:	mov    %r14,%rax
   107f4:	mov    -0x10(%rbp),%r15
   107f8:	mov    -0x8(%rbp),%r14
   107fc:	leaveq 
   107fd:	retq   
   107fe:	mov    %r15,%rdi
   10801:	callq  10310 <gz_look>
   10806:	cmp    $0xffffffff,%eax
   10809:	je     10833 <gz_fetch+0xf3>
   1080b:	movslq 0x44(%r15),%rax
   1080f:	test   %eax,%eax
   10811:	jne    107c3 <gz_fetch+0x83>
   10813:	xor    %eax,%eax
   10815:	mov    -0x10(%rbp),%r15
   10819:	mov    -0x8(%rbp),%r14
   1081d:	leaveq 
   1081e:	retq   
   1081f:	mov    0x38(%r15),%rax
   10823:	mov    %rax,0x8(%r15)
   10827:	xor    %eax,%eax
   10829:	mov    -0x10(%rbp),%r15
   1082d:	mov    -0x8(%rbp),%r14
   10831:	leaveq 
   10832:	retq   
   10833:	mov    %r14,%rax
   10836:	mov    -0x10(%rbp),%r15
   1083a:	mov    -0x8(%rbp),%r14
   1083e:	leaveq 
   1083f:	retq   

0000000000010840 <gz_skip>:
   10840:	push   %rbp
   10841:	mov    %rsp,%rbp
   10844:	sub    $0x10,%rsp
   10848:	mov    %r14,-0x8(%rbp)
   1084c:	mov    %r15,-0x10(%rbp)
   10850:	mov    %r13,%r14
   10853:	mov    %r12,%r13
   10856:	mov    %rbx,%r12
   10859:	mov    %rsi,%rbx
   1085c:	mov    %rdi,%r15
   1085f:	jmp    10884 <gz_skip+0x44>
   10861:	mov    %rbx,%rcx
   10864:	sub    %ecx,%eax
   10866:	mov    %eax,(%r15)
   10869:	mov    %ecx,%ecx
   1086b:	mov    %rcx,%rax
   1086e:	add    0x8(%r15),%rax
   10872:	mov    %rax,0x8(%r15)
   10876:	mov    %rcx,%rax
   10879:	add    0x10(%r15),%rax
   1087d:	mov    %rax,0x10(%r15)
   10881:	sub    %rcx,%rbx
   10884:	test   %rbx,%rbx
   10887:	jne    1089e <gz_skip+0x5e>
   10889:	mov    %r12,%rbx
   1088c:	mov    %r13,%r12
   1088f:	mov    %r14,%r13
   10892:	xor    %eax,%eax
   10894:	mov    -0x10(%rbp),%r15
   10898:	mov    -0x8(%rbp),%r14
   1089c:	leaveq 
   1089d:	retq   
   1089e:	mov    (%r15),%eax
   108a1:	test   %eax,%eax
   108a3:	jne    108d4 <gz_skip+0x94>
   108a5:	movslq 0x50(%r15),%rax
   108a9:	test   %eax,%eax
   108ab:	jne    108de <gz_skip+0x9e>
   108ad:	mov    %r15,%rdi
   108b0:	callq  10740 <gz_fetch>
   108b5:	cmp    $0xffffffff,%eax
   108b8:	jne    10884 <gz_skip+0x44>
   108ba:	mov    %r12,%rbx
   108bd:	mov    %r13,%r12
   108c0:	mov    %r14,%r13
   108c3:	mov    $0xffffffffffffffff,%rax
   108ca:	mov    -0x10(%rbp),%r15
   108ce:	mov    -0x8(%rbp),%r14
   108d2:	leaveq 
   108d3:	retq   
   108d4:	cmp    %rbx,%rax
   108d7:	jg     10861 <gz_skip+0x21>
   108d9:	mov    %rax,%rcx
   108dc:	jmp    10864 <gz_skip+0x24>
   108de:	mov    0x80(%r15),%eax
   108e5:	test   %eax,%eax
   108e7:	jne    108ad <gz_skip+0x6d>
   108e9:	mov    %r12,%rbx
   108ec:	mov    %r13,%r12
   108ef:	mov    %r14,%r13
   108f2:	xor    %eax,%eax
   108f4:	mov    -0x10(%rbp),%r15
   108f8:	mov    -0x8(%rbp),%r14
   108fc:	leaveq 
   108fd:	retq   
   108fe:	xchg   %ax,%ax

0000000000010900 <gz_read>:
   10900:	push   %rbp
   10901:	mov    %rsp,%rbp
   10904:	sub    $0x50,%rsp
   10908:	xor    %eax,%eax
   1090a:	test   %rdx,%rdx
   1090d:	jne    10911 <gz_read+0x11>
   1090f:	leaveq 
   10910:	retq   
   10911:	lea    -0x44(%rbp),%rcx
   10915:	mov    $0xfffffffe,%r9d
   1091b:	movslq 0x68(%rdi),%r8
   1091f:	test   %r8d,%r8d
   10922:	jne    10949 <gz_read+0x49>
   10924:	mov    %rbx,-0x8(%rbp)
   10928:	mov    %r12,-0x10(%rbp)
   1092c:	mov    %r13,-0x18(%rbp)
   10930:	mov    %r14,-0x20(%rbp)
   10934:	mov    %r15,-0x28(%rbp)
   10938:	mov    %rdx,%rbx
   1093b:	mov    %rax,%r12
   1093e:	mov    %rsi,%r13
   10941:	mov    %r9,%r14
   10944:	mov    %rdi,%r15
   10947:	jmp    109aa <gz_read+0xaa>
   10949:	movl   $0x0,0x68(%rdi)
   10950:	mov    0x60(%rdi),%rcx
   10954:	mov    %rdi,%rax
   10957:	mov    %rdx,-0x38(%rbp)
   1095b:	mov    %rsi,-0x30(%rbp)
   1095f:	mov    %rdi,-0x40(%rbp)
   10963:	mov    %rcx,%rsi
   10966:	mov    %rax,%rdi
   10969:	callq  10840 <gz_skip>
   1096e:	cmp    $0xffffffff,%eax
   10971:	je     109fd <gz_read+0xfd>
   10977:	mov    %rbx,-0x8(%rbp)
   1097b:	mov    %r12,-0x10(%rbp)
   1097f:	mov    %r13,-0x18(%rbp)
   10983:	mov    %r14,-0x20(%rbp)
   10987:	mov    %r15,-0x28(%rbp)
   1098b:	lea    -0x44(%rbp),%rcx
   1098f:	mov    $0xfffffffe,%r14d
   10995:	xor    %r12d,%r12d
   10998:	mov    -0x40(%rbp),%r15
   1099c:	mov    -0x30(%rbp),%r13
   109a0:	mov    -0x38(%rbp),%rbx
   109a4:	jmp    109aa <gz_read+0xaa>
   109a6:	lea    -0x44(%rbp),%rcx
   109aa:	movl   $0xffffffff,-0x44(%rbp)
   109b1:	cmp    %r14,%rbx
   109b4:	ja     109b9 <gz_read+0xb9>
   109b6:	mov    %ebx,-0x44(%rbp)
   109b9:	mov    (%r15),%eax
   109bc:	test   %eax,%eax
   109be:	jne    10a01 <gz_read+0x101>
   109c0:	movslq 0x50(%r15),%rax
   109c4:	test   %eax,%eax
   109c6:	jne    10a67 <gz_read+0x167>
   109cc:	movslq 0x44(%r15),%rsi
   109d0:	test   %esi,%esi
   109d2:	jne    10a97 <gz_read+0x197>
   109d8:	mov    %r15,%rdi
   109db:	callq  10740 <gz_fetch>
   109e0:	cmp    $0xffffffff,%eax
   109e3:	jne    10a45 <gz_read+0x145>
   109e5:	mov    -0x28(%rbp),%r15
   109e9:	mov    -0x20(%rbp),%r14
   109ed:	mov    -0x18(%rbp),%r13
   109f1:	mov    -0x10(%rbp),%r12
   109f5:	mov    -0x8(%rbp),%rbx
   109f9:	xor    %eax,%eax
   109fb:	leaveq 
   109fc:	retq   
   109fd:	xor    %eax,%eax
   109ff:	leaveq 
   10a00:	retq   
   10a01:	cmp    -0x44(%rbp),%eax
   10a04:	jae    10a09 <gz_read+0x109>
   10a06:	mov    %eax,-0x44(%rbp)
   10a09:	mov    0x8(%r15),%rsi
   10a0d:	mov    -0x44(%rbp),%edx
   10a10:	mov    %r13,%rdi
   10a13:	callq  21f0 <memcpy@plt>
   10a18:	mov    -0x44(%rbp),%ecx
   10a1b:	mov    %rcx,%rax
   10a1e:	add    0x8(%r15),%rax
   10a22:	mov    %rax,0x8(%r15)
   10a26:	mov    (%r15),%eax
   10a29:	sub    %ecx,%eax
   10a2b:	mov    %eax,(%r15)
   10a2e:	mov    -0x44(%rbp),%ecx
   10a31:	sub    %rcx,%rbx
   10a34:	mov    %rcx,%rax
   10a37:	add    0x10(%r15),%rax
   10a3b:	mov    %rax,0x10(%r15)
   10a3f:	add    %rcx,%r12
   10a42:	add    %rcx,%r13
   10a45:	test   %rbx,%rbx
   10a48:	jne    109a6 <gz_read+0xa6>
   10a4e:	mov    %r12,%rax
   10a51:	mov    -0x28(%rbp),%r15
   10a55:	mov    -0x20(%rbp),%r14
   10a59:	mov    -0x18(%rbp),%r13
   10a5d:	mov    -0x10(%rbp),%r12
   10a61:	mov    -0x8(%rbp),%rbx
   10a65:	leaveq 
   10a66:	retq   
   10a67:	mov    0x80(%r15),%eax
   10a6e:	test   %eax,%eax
   10a70:	jne    109cc <gz_read+0xcc>
   10a76:	movl   $0x1,0x54(%r15)
   10a7e:	mov    %r12,%rax
   10a81:	mov    -0x28(%rbp),%r15
   10a85:	mov    -0x20(%rbp),%r14
   10a89:	mov    -0x18(%rbp),%r13
   10a8d:	mov    -0x10(%rbp),%r12
   10a91:	mov    -0x8(%rbp),%rbx
   10a95:	leaveq 
   10a96:	retq   
   10a97:	mov    -0x44(%rbp),%edx
   10a9a:	mov    0x28(%r15),%eax
   10a9e:	add    %eax,%eax
   10aa0:	cmp    %eax,%edx
   10aa2:	jb     109d8 <gz_read+0xd8>
   10aa8:	cmp    $0x1,%esi
   10aab:	je     10ada <gz_read+0x1da>
   10aad:	mov    %edx,0x98(%r15)
   10ab4:	mov    %r13,0x90(%r15)
   10abb:	mov    %r15,%rdi
   10abe:	callq  10580 <gz_decomp>
   10ac3:	cmp    $0xffffffff,%eax
   10ac6:	je     10b06 <gz_read+0x206>
   10ac8:	mov    (%r15),%eax
   10acb:	mov    %eax,-0x44(%rbp)
   10ace:	movl   $0x0,(%r15)
   10ad5:	jmpq   10a2e <gz_read+0x12e>
   10ada:	mov    %r15,%rdi
   10add:	mov    %r13,%rsi
   10ae0:	callq  10170 <gz_load>
   10ae5:	cmp    $0xffffffff,%eax
   10ae8:	jne    10a2e <gz_read+0x12e>
   10aee:	mov    -0x28(%rbp),%r15
   10af2:	mov    -0x20(%rbp),%r14
   10af6:	mov    -0x18(%rbp),%r13
   10afa:	mov    -0x10(%rbp),%r12
   10afe:	mov    -0x8(%rbp),%rbx
   10b02:	xor    %eax,%eax
   10b04:	leaveq 
   10b05:	retq   
   10b06:	mov    -0x28(%rbp),%r15
   10b0a:	mov    -0x20(%rbp),%r14
   10b0e:	mov    -0x18(%rbp),%r13
   10b12:	mov    -0x10(%rbp),%r12
   10b16:	mov    -0x8(%rbp),%rbx
   10b1a:	xor    %eax,%eax
   10b1c:	leaveq 
   10b1d:	retq   
   10b1e:	xchg   %ax,%ax

0000000000010b20 <gzsetparams>:
   10b20:	push   %rbp
   10b21:	mov    %rsp,%rbp
   10b24:	sub    $0x20,%rsp
   10b28:	mov    $0xfffffffffffffffe,%rax
   10b2f:	test   %rdi,%rdi
   10b32:	jne    10b36 <gzsetparams+0x16>
   10b34:	leaveq 
   10b35:	retq   
   10b36:	movslq 0x18(%rdi),%rcx
   10b3a:	cmp    $0x79b1,%ecx
   10b40:	je     10b44 <gzsetparams+0x24>
   10b42:	leaveq 
   10b43:	retq   
   10b44:	movslq 0x6c(%rdi),%rcx
   10b48:	test   %ecx,%ecx
   10b4a:	je     10b4e <gzsetparams+0x2e>
   10b4c:	leaveq 
   10b4d:	retq   
   10b4e:	xor    %eax,%eax
   10b50:	movslq 0x58(%rdi),%rcx
   10b54:	cmp    %esi,%ecx
   10b56:	je     10b6f <gzsetparams+0x4f>
   10b58:	movslq 0x68(%rdi),%rcx
   10b5c:	test   %ecx,%ecx
   10b5e:	jne    10b79 <gzsetparams+0x59>
   10b60:	mov    0x28(%rdi),%ecx
   10b63:	test   %ecx,%ecx
   10b65:	jne    10bb9 <gzsetparams+0x99>
   10b67:	mov    %esi,0x58(%rdi)
   10b6a:	mov    %edx,0x5c(%rdi)
   10b6d:	leaveq 
   10b6e:	retq   
   10b6f:	movslq 0x5c(%rdi),%rcx
   10b73:	cmp    %edx,%ecx
   10b75:	jne    10b58 <gzsetparams+0x38>
   10b77:	leaveq 
   10b78:	retq   
   10b79:	movl   $0x0,0x68(%rdi)
   10b80:	mov    0x60(%rdi),%rax
   10b84:	mov    %rdi,%rcx
   10b87:	mov    %r15,-0x20(%rbp)
   10b8b:	mov    %rsi,-0x8(%rbp)
   10b8f:	mov    %rdx,-0x18(%rbp)
   10b93:	mov    %rax,%rsi
   10b96:	mov    %rdi,%r15
   10b99:	mov    %rcx,%rdi
   10b9c:	callq  11730 <gz_zero>
   10ba1:	cmp    $0xffffffff,%eax
   10ba4:	je     10c0c <gzsetparams+0xec>
   10ba6:	mov    %r15,%rdi
   10ba9:	xor    %eax,%eax
   10bab:	mov    -0x18(%rbp),%rdx
   10baf:	mov    -0x8(%rbp),%rsi
   10bb3:	mov    -0x20(%rbp),%r15
   10bb7:	jmp    10b60 <gzsetparams+0x40>
   10bb9:	mov    0x80(%rdi),%eax
   10bbf:	test   %eax,%eax
   10bc1:	jne    10c16 <gzsetparams+0xf6>
   10bc3:	lea    0x78(%rdi),%rcx
   10bc7:	mov    %rsi,%r8
   10bca:	mov    %rdx,%rax
   10bcd:	mov    %r15,-0x20(%rbp)
   10bd1:	mov    %r13,-0x10(%rbp)
   10bd5:	mov    %r14,-0x18(%rbp)
   10bd9:	mov    %rdi,%r13
   10bdc:	mov    %rcx,%rdi
   10bdf:	mov    %rsi,%r14
   10be2:	mov    %r8,%rsi
   10be5:	mov    %rdx,%r15
   10be8:	mov    %rax,%rdx
   10beb:	callq  21d0 <deflateParams@plt>
   10bf0:	mov    %r15,%rdx
   10bf3:	mov    %r14,%rsi
   10bf6:	mov    %r13,%rdi
   10bf9:	mov    -0x18(%rbp),%r14
   10bfd:	mov    -0x10(%rbp),%r13
   10c01:	xor    %eax,%eax
   10c03:	mov    -0x20(%rbp),%r15
   10c07:	jmpq   10b67 <gzsetparams+0x47>
   10c0c:	movslq 0x6c(%r15),%rax
   10c10:	mov    -0x20(%rbp),%r15
   10c14:	leaveq 
   10c15:	retq   
   10c16:	mov    $0x5,%eax
   10c1b:	mov    %rdi,%rcx
   10c1e:	mov    %r15,-0x20(%rbp)
   10c22:	mov    %rsi,-0x8(%rbp)
   10c26:	mov    %rdx,-0x10(%rbp)
   10c2a:	mov    %rax,%rsi
   10c2d:	mov    %rdi,%r15
   10c30:	mov    %rcx,%rdi
   10c33:	callq  11470 <gz_comp>
   10c38:	cmp    $0xffffffff,%eax
   10c3b:	je     10c51 <gzsetparams+0x131>
   10c3d:	mov    %r15,%rdi
   10c40:	mov    -0x10(%rbp),%rdx
   10c44:	mov    -0x8(%rbp),%rsi
   10c48:	mov    -0x20(%rbp),%r15
   10c4c:	jmpq   10bc3 <gzsetparams+0xa3>
   10c51:	movslq 0x6c(%r15),%rax
   10c55:	mov    -0x20(%rbp),%r15
   10c59:	leaveq 
   10c5a:	retq   
   10c5b:	nopl   0x0(%rax,%rax,1)

0000000000010c60 <gzwrite>:
   10c60:	push   %rbp
   10c61:	mov    %rsp,%rbp
   10c64:	xor    %eax,%eax
   10c66:	test   %rdi,%rdi
   10c69:	jne    10c6d <gzwrite+0xd>
   10c6b:	leaveq 
   10c6c:	retq   
   10c6d:	movslq 0x18(%rdi),%rcx
   10c71:	cmp    $0x79b1,%ecx
   10c77:	je     10c7b <gzwrite+0x1b>
   10c79:	leaveq 
   10c7a:	retq   
   10c7b:	movslq 0x6c(%rdi),%rcx
   10c7f:	test   %ecx,%ecx
   10c81:	je     10c85 <gzwrite+0x25>
   10c83:	leaveq 
   10c84:	retq   
   10c85:	test   %edx,%edx
   10c87:	js     10c92 <gzwrite+0x32>
   10c89:	mov    %edx,%edx
   10c8b:	callq  11860 <gz_write>
   10c90:	leaveq 
   10c91:	retq   
   10c92:	mov    $0xfffffffffffffffd,%rsi
   10c99:	lea    0x5714(%rip),%rdx        # 163b4 <base_dist+0x328>
   10ca0:	callq  20a0 <gz_error@plt>
   10ca5:	xor    %eax,%eax
   10ca7:	leaveq 
   10ca8:	retq   
   10ca9:	nopl   0x0(%rax)

0000000000010cb0 <gzfwrite>:
   10cb0:	push   %rbp
   10cb1:	mov    %rsp,%rbp
   10cb4:	sub    $0x10,%rsp
   10cb8:	xor    %eax,%eax
   10cba:	test   %rcx,%rcx
   10cbd:	jne    10cc1 <gzfwrite+0x11>
   10cbf:	leaveq 
   10cc0:	retq   
   10cc1:	movslq 0x18(%rcx),%r8
   10cc5:	cmp    $0x79b1,%r8d
   10ccc:	je     10cd0 <gzfwrite+0x20>
   10cce:	leaveq 
   10ccf:	retq   
   10cd0:	movslq 0x6c(%rcx),%r8
   10cd4:	test   %r8d,%r8d
   10cd7:	je     10cdb <gzfwrite+0x2b>
   10cd9:	leaveq 
   10cda:	retq   
   10cdb:	mov    %rsi,%r8
   10cde:	imul   %rdx,%r8
   10ce2:	test   %rsi,%rsi
   10ce5:	jne    10cee <gzfwrite+0x3e>
   10ce7:	test   %r8,%r8
   10cea:	jne    10d06 <gzfwrite+0x56>
   10cec:	leaveq 
   10ced:	retq   
   10cee:	mov    %rax,%r9
   10cf1:	mov    %rdx,%r10
   10cf4:	xor    %edx,%edx
   10cf6:	mov    %r8,%rax
   10cf9:	div    %rsi
   10cfc:	cmp    %r10,%rax
   10cff:	jne    10d26 <gzfwrite+0x76>
   10d01:	mov    %r9,%rax
   10d04:	jmp    10ce7 <gzfwrite+0x37>
   10d06:	mov    %r15,-0x8(%rbp)
   10d0a:	mov    %r8,%rdx
   10d0d:	mov    %rsi,%r15
   10d10:	mov    %rdi,%rsi
   10d13:	mov    %rcx,%rdi
   10d16:	callq  11860 <gz_write>
   10d1b:	xor    %edx,%edx
   10d1d:	div    %r15
   10d20:	mov    -0x8(%rbp),%r15
   10d24:	leaveq 
   10d25:	retq   
   10d26:	mov    %rcx,%rdi
   10d29:	mov    $0xfffffffffffffffe,%rsi
   10d30:	lea    0x56a2(%rip),%rdx        # 163d9 <base_dist+0x34d>
   10d37:	callq  20a0 <gz_error@plt>
   10d3c:	xor    %eax,%eax
   10d3e:	leaveq 
   10d3f:	retq   

0000000000010d40 <gzprintf>:
   10d40:	push   %rbp
   10d41:	mov    %rsp,%rbp
   10d44:	sub    $0xd0,%rsp
   10d4b:	mov    %rdx,-0xa0(%rbp)
   10d52:	mov    %rcx,-0x98(%rbp)
   10d59:	mov    %r8,-0x90(%rbp)
   10d60:	mov    %r9,-0x88(%rbp)
   10d67:	movsd  %xmm0,-0x80(%rbp)
   10d6c:	movsd  %xmm1,-0x70(%rbp)
   10d71:	movsd  %xmm2,-0x60(%rbp)
   10d76:	movsd  %xmm3,-0x50(%rbp)
   10d7b:	movsd  %xmm4,-0x40(%rbp)
   10d80:	movsd  %xmm5,-0x30(%rbp)
   10d85:	movsd  %xmm6,-0x20(%rbp)
   10d8a:	movsd  %xmm7,-0x10(%rbp)
   10d8f:	lea    -0xc8(%rbp),%rdx
   10d96:	movl   $0x10,(%rdx)
   10d9c:	movl   $0x30,0x4(%rdx)
   10da3:	lea    -0xb0(%rbp),%rax
   10daa:	mov    %rax,0x10(%rdx)
   10dae:	lea    0x10(%rbp),%rax
   10db2:	mov    %rax,0x8(%rdx)
   10db6:	callq  2040 <gzvprintf@plt>
   10dbb:	leaveq 
   10dbc:	retq   
   10dbd:	nopl   (%rax)

0000000000010dc0 <gzputs>:
   10dc0:	push   %rbp
   10dc1:	mov    %rsp,%rbp
   10dc4:	sub    $0x10,%rsp
   10dc8:	mov    $0xffffffffffffffff,%rax
   10dcf:	test   %rdi,%rdi
   10dd2:	jne    10dd6 <gzputs+0x16>
   10dd4:	leaveq 
   10dd5:	retq   
   10dd6:	movslq 0x18(%rdi),%rcx
   10dda:	cmp    $0x79b1,%ecx
   10de0:	je     10de4 <gzputs+0x24>
   10de2:	leaveq 
   10de3:	retq   
   10de4:	movslq 0x6c(%rdi),%rcx
   10de8:	test   %ecx,%ecx
   10dea:	je     10dee <gzputs+0x2e>
   10dec:	leaveq 
   10ded:	retq   
   10dee:	mov    %rsi,%rax
   10df1:	mov    %r14,-0x8(%rbp)
   10df5:	mov    %r15,-0x10(%rbp)
   10df9:	mov    %rdi,%r14
   10dfc:	mov    %rax,%rdi
   10dff:	mov    %rsi,%r15
   10e02:	callq  2110 <strlen@plt>
   10e07:	mov    %r15,%rsi
   10e0a:	mov    %r14,%rdi
   10e0d:	mov    %rax,%r14
   10e10:	mov    %r14,%rdx
   10e13:	callq  11860 <gz_write>
   10e18:	test   %eax,%eax
   10e1a:	je     10e26 <gzputs+0x66>
   10e1c:	mov    -0x10(%rbp),%r15
   10e20:	mov    -0x8(%rbp),%r14
   10e24:	leaveq 
   10e25:	retq   
   10e26:	test   %r14,%r14
   10e29:	je     10e3c <gzputs+0x7c>
   10e2b:	mov    $0xffffffffffffffff,%rax
   10e32:	mov    -0x10(%rbp),%r15
   10e36:	mov    -0x8(%rbp),%r14
   10e3a:	leaveq 
   10e3b:	retq   
   10e3c:	xor    %eax,%eax
   10e3e:	mov    -0x10(%rbp),%r15
   10e42:	mov    -0x8(%rbp),%r14
   10e46:	leaveq 
   10e47:	retq   
   10e48:	nopl   0x0(%rax,%rax,1)

0000000000010e50 <gzputc>:
   10e50:	push   %rbp
   10e51:	mov    %rsp,%rbp
   10e54:	sub    $0x20,%rsp
   10e58:	mov    $0xffffffffffffffff,%rax
   10e5f:	test   %rdi,%rdi
   10e62:	jne    10e66 <gzputc+0x16>
   10e64:	leaveq 
   10e65:	retq   
   10e66:	movslq 0x18(%rdi),%rcx
   10e6a:	cmp    $0x79b1,%ecx
   10e70:	je     10e74 <gzputc+0x24>
   10e72:	leaveq 
   10e73:	retq   
   10e74:	movslq 0x6c(%rdi),%rcx
   10e78:	test   %ecx,%ecx
   10e7a:	je     10e7e <gzputc+0x2e>
   10e7c:	leaveq 
   10e7d:	retq   
   10e7e:	movslq 0x68(%rdi),%rax
   10e82:	test   %eax,%eax
   10e84:	jne    10eb9 <gzputc+0x69>
   10e86:	mov    0x28(%rdi),%eax
   10e89:	test   %eax,%eax
   10e8b:	jne    10ee9 <gzputc+0x99>
   10e8d:	mov    %sil,-0x11(%rbp)
   10e91:	lea    -0x11(%rbp),%rax
   10e95:	mov    $0x1,%edx
   10e9a:	mov    %rsi,-0x10(%rbp)
   10e9e:	mov    %rax,%rsi
   10ea1:	callq  11860 <gz_write>
   10ea6:	cmp    $0x1,%rax
   10eaa:	je     10f3e <gzputc+0xee>
   10eb0:	mov    $0xffffffffffffffff,%rax
   10eb7:	leaveq 
   10eb8:	retq   
   10eb9:	movl   $0x0,0x68(%rdi)
   10ec0:	mov    0x60(%rdi),%rcx
   10ec4:	mov    %rdi,%rax
   10ec7:	mov    %rdi,-0x10(%rbp)
   10ecb:	mov    %rsi,-0x8(%rbp)
   10ecf:	mov    %rcx,%rsi
   10ed2:	mov    %rax,%rdi
   10ed5:	callq  11730 <gz_zero>
   10eda:	cmp    $0xffffffff,%eax
   10edd:	je     10f47 <gzputc+0xf7>
   10edf:	mov    -0x8(%rbp),%rsi
   10ee3:	mov    -0x10(%rbp),%rdi
   10ee7:	jmp    10e86 <gzputc+0x36>
   10ee9:	mov    0x80(%rdi),%eax
   10eef:	test   %eax,%eax
   10ef1:	jne    10efb <gzputc+0xab>
   10ef3:	mov    0x30(%rdi),%rax
   10ef7:	mov    %rax,0x78(%rdi)
   10efb:	mov    0x80(%rdi),%eax
   10f01:	add    0x78(%rdi),%rax
   10f05:	mov    0x30(%rdi),%rdx
   10f09:	sub    %rdx,%rax
   10f0c:	mov    0x28(%rdi),%ecx
   10f0f:	cmp    %eax,%ecx
   10f11:	jbe    10e8d <gzputc+0x3d>
   10f17:	mov    %eax,%eax
   10f19:	mov    %sil,(%rdx,%rax,1)
   10f1d:	mov    0x80(%rdi),%eax
   10f23:	add    $0x1,%eax
   10f26:	mov    %eax,0x80(%rdi)
   10f2c:	mov    0x10(%rdi),%rax
   10f30:	add    $0x1,%rax
   10f34:	mov    %rax,0x10(%rdi)
   10f38:	movzbl %sil,%eax
   10f3c:	leaveq 
   10f3d:	retq   
   10f3e:	mov    -0x10(%rbp),%rax
   10f42:	movzbl %al,%eax
   10f45:	leaveq 
   10f46:	retq   
   10f47:	mov    $0xffffffffffffffff,%rax
   10f4e:	leaveq 
   10f4f:	retq   

0000000000010f50 <gzflush>:
   10f50:	push   %rbp
   10f51:	mov    %rsp,%rbp
   10f54:	sub    $0x10,%rsp
   10f58:	mov    $0xfffffffffffffffe,%rax
   10f5f:	test   %rdi,%rdi
   10f62:	jne    10f66 <gzflush+0x16>
   10f64:	leaveq 
   10f65:	retq   
   10f66:	movslq 0x18(%rdi),%rcx
   10f6a:	cmp    $0x79b1,%ecx
   10f70:	je     10f74 <gzflush+0x24>
   10f72:	leaveq 
   10f73:	retq   
   10f74:	movslq 0x6c(%rdi),%rcx
   10f78:	test   %ecx,%ecx
   10f7a:	je     10f7e <gzflush+0x2e>
   10f7c:	leaveq 
   10f7d:	retq   
   10f7e:	test   %esi,%esi
   10f80:	jns    10f84 <gzflush+0x34>
   10f82:	leaveq 
   10f83:	retq   
   10f84:	cmp    $0x4,%esi
   10f87:	jle    10f8b <gzflush+0x3b>
   10f89:	leaveq 
   10f8a:	retq   
   10f8b:	movslq 0x68(%rdi),%rax
   10f8f:	test   %eax,%eax
   10f91:	jne    10faf <gzflush+0x5f>
   10f93:	mov    %rdi,%rax
   10f96:	mov    %r15,-0x10(%rbp)
   10f9a:	mov    %rdi,%r15
   10f9d:	mov    %rax,%rdi
   10fa0:	callq  11470 <gz_comp>
   10fa5:	movslq 0x6c(%r15),%rax
   10fa9:	mov    -0x10(%rbp),%r15
   10fad:	leaveq 
   10fae:	retq   
   10faf:	movl   $0x0,0x68(%rdi)
   10fb6:	mov    0x60(%rdi),%rax
   10fba:	mov    %rdi,%rcx
   10fbd:	mov    %r15,-0x10(%rbp)
   10fc1:	mov    %rsi,-0x8(%rbp)
   10fc5:	mov    %rax,%rsi
   10fc8:	mov    %rdi,%r15
   10fcb:	mov    %rcx,%rdi
   10fce:	callq  11730 <gz_zero>
   10fd3:	cmp    $0xffffffff,%eax
   10fd6:	je     10fe5 <gzflush+0x95>
   10fd8:	mov    %r15,%rdi
   10fdb:	mov    -0x8(%rbp),%rsi
   10fdf:	mov    -0x10(%rbp),%r15
   10fe3:	jmp    10f93 <gzflush+0x43>
   10fe5:	movslq 0x6c(%r15),%rax
   10fe9:	mov    -0x10(%rbp),%r15
   10fed:	leaveq 
   10fee:	retq   
   10fef:	nop

0000000000010ff0 <gzclose_w>:
   10ff0:	push   %rbp
   10ff1:	mov    %rsp,%rbp
   10ff4:	sub    $0x10,%rsp
   10ff8:	mov    $0xfffffffffffffffe,%rax
   10fff:	test   %rdi,%rdi
   11002:	jne    11006 <gzclose_w+0x16>
   11004:	leaveq 
   11005:	retq   
   11006:	movslq 0x18(%rdi),%rcx
   1100a:	cmp    $0x79b1,%ecx
   11010:	je     11014 <gzclose_w+0x24>
   11012:	leaveq 
   11013:	retq   
   11014:	xor    %eax,%eax
   11016:	movslq 0x68(%rdi),%rcx
   1101a:	test   %ecx,%ecx
   1101c:	jne    110ba <gzclose_w+0xca>
   11022:	mov    %r14,%rcx
   11025:	mov    %rdi,%r14
   11028:	mov    %r15,%rdi
   1102b:	mov    %rax,%r15
   1102e:	mov    %rdi,%rax
   11031:	mov    $0x4,%esi
   11036:	mov    %r14,%rdi
   11039:	mov    %rax,-0x10(%rbp)
   1103d:	mov    %rcx,-0x8(%rbp)
   11041:	callq  11470 <gz_comp>
   11046:	cmp    $0xffffffff,%eax
   11049:	jne    1104f <gzclose_w+0x5f>
   1104b:	movslq 0x6c(%r14),%r15
   1104f:	mov    0x28(%r14),%eax
   11053:	test   %eax,%eax
   11055:	je     1107a <gzclose_w+0x8a>
   11057:	movslq 0x40(%r14),%rax
   1105b:	test   %eax,%eax
   1105d:	jne    11071 <gzclose_w+0x81>
   1105f:	lea    0x78(%r14),%rdi
   11063:	callq  2260 <deflateEnd@plt>
   11068:	mov    0x38(%r14),%rdi
   1106c:	callq  2060 <free@plt>
   11071:	mov    0x30(%r14),%rdi
   11075:	callq  2060 <free@plt>
   1107a:	xor    %esi,%esi
   1107c:	mov    %rsi,%rdx
   1107f:	mov    %r14,%rdi
   11082:	callq  20a0 <gz_error@plt>
   11087:	mov    0x20(%r14),%rdi
   1108b:	callq  2060 <free@plt>
   11090:	movslq 0x1c(%r14),%rdi
   11094:	callq  2180 <close@plt>
   11099:	cmp    $0xffffffff,%eax
   1109c:	jne    110a5 <gzclose_w+0xb5>
   1109e:	mov    $0xffffffffffffffff,%r15
   110a5:	mov    %r14,%rdi
   110a8:	callq  2060 <free@plt>
   110ad:	mov    %r15,%rax
   110b0:	mov    -0x8(%rbp),%r14
   110b4:	mov    -0x10(%rbp),%r15
   110b8:	leaveq 
   110b9:	retq   
   110ba:	movl   $0x0,0x68(%rdi)
   110c1:	mov    0x60(%rdi),%rsi
   110c5:	mov    %rdi,%rax
   110c8:	mov    %r15,-0x10(%rbp)
   110cc:	mov    %r14,%r15
   110cf:	mov    %rdi,%r14
   110d2:	mov    %rax,%rdi
   110d5:	callq  11730 <gz_zero>
   110da:	cmp    $0xffffffff,%eax
   110dd:	je     110ee <gzclose_w+0xfe>
   110df:	mov    %r15,%rcx
   110e2:	xor    %r15d,%r15d
   110e5:	mov    -0x10(%rbp),%rax
   110e9:	jmpq   11031 <gzclose_w+0x41>
   110ee:	movslq 0x6c(%r14),%rcx
   110f2:	mov    %r15,%rax
   110f5:	mov    %rcx,%r15
   110f8:	mov    %rax,%rcx
   110fb:	mov    -0x10(%rbp),%rax
   110ff:	jmpq   11031 <gzclose_w+0x41>
   11104:	data16 nopw %cs:0x0(%rax,%rax,1)
   1110f:	nop

0000000000011110 <gzvprintf>:
   11110:	push   %rbp
   11111:	mov    %rsp,%rbp
   11114:	sub    $0x40,%rsp
   11118:	mov    $0xfffffffffffffffe,%rax
   1111f:	test   %rdi,%rdi
   11122:	jne    11126 <gzvprintf+0x16>
   11124:	leaveq 
   11125:	retq   
   11126:	movslq 0x18(%rdi),%rcx
   1112a:	cmp    $0x79b1,%ecx
   11130:	je     11134 <gzvprintf+0x24>
   11132:	leaveq 
   11133:	retq   
   11134:	movslq 0x6c(%rdi),%rcx
   11138:	test   %ecx,%ecx
   1113a:	je     1113e <gzvprintf+0x2e>
   1113c:	leaveq 
   1113d:	retq   
   1113e:	mov    0x28(%rdi),%eax
   11141:	test   %eax,%eax
   11143:	je     11196 <gzvprintf+0x86>
   11145:	mov    %rdx,%rcx
   11148:	mov    %rsi,%rdx
   1114b:	movslq 0x68(%rdi),%rax
   1114f:	test   %eax,%eax
   11151:	jne    111c6 <gzvprintf+0xb6>
   11153:	mov    0x80(%rdi),%eax
   11159:	test   %eax,%eax
   1115b:	jne    11165 <gzvprintf+0x55>
   1115d:	mov    0x30(%rdi),%rax
   11161:	mov    %rax,0x78(%rdi)
   11165:	mov    0x80(%rdi),%eax
   1116b:	add    0x78(%rdi),%rax
   1116f:	mov    %rax,-0x28(%rbp)
   11173:	mov    0x28(%rdi),%esi
   11176:	add    $0xffffffff,%esi
   11179:	mov    %esi,%esi
   1117b:	movb   $0x0,(%rsi,%rax,1)
   1117f:	mov    0x28(%rdi),%esi
   11182:	mov    %rdi,-0x38(%rbp)
   11186:	mov    %rax,%rdi
   11189:	callq  20c0 <vsnprintf@plt>
   1118e:	test   %eax,%eax
   11190:	jne    11204 <gzvprintf+0xf4>
   11192:	xor    %eax,%eax
   11194:	leaveq 
   11195:	retq   
   11196:	mov    %rdi,%rax
   11199:	mov    %r15,-0x28(%rbp)
   1119d:	mov    %rsi,-0x30(%rbp)
   111a1:	mov    %rdx,-0x38(%rbp)
   111a5:	mov    %rdi,%r15
   111a8:	mov    %rax,%rdi
   111ab:	callq  112e0 <gz_init>
   111b0:	cmp    $0xffffffff,%eax
   111b3:	je     11214 <gzvprintf+0x104>
   111b5:	mov    %r15,%rdi
   111b8:	mov    -0x38(%rbp),%rcx
   111bc:	mov    -0x30(%rbp),%rdx
   111c0:	mov    -0x28(%rbp),%r15
   111c4:	jmp    1114b <gzvprintf+0x3b>
   111c6:	movl   $0x0,0x68(%rdi)
   111cd:	mov    0x60(%rdi),%rsi
   111d1:	mov    %rdi,%rax
   111d4:	mov    %r15,-0x20(%rbp)
   111d8:	mov    %rdx,-0x30(%rbp)
   111dc:	mov    %rcx,-0x38(%rbp)
   111e0:	mov    %rdi,%r15
   111e3:	mov    %rax,%rdi
   111e6:	callq  11730 <gz_zero>
   111eb:	cmp    $0xffffffff,%eax
   111ee:	je     1121e <gzvprintf+0x10e>
   111f0:	mov    %r15,%rdi
   111f3:	mov    -0x38(%rbp),%rcx
   111f7:	mov    -0x30(%rbp),%rdx
   111fb:	mov    -0x20(%rbp),%r15
   111ff:	jmpq   11153 <gzvprintf+0x43>
   11204:	mov    -0x38(%rbp),%r8
   11208:	mov    0x28(%r8),%esi
   1120c:	cmp    %eax,%esi
   1120e:	ja     11228 <gzvprintf+0x118>
   11210:	xor    %eax,%eax
   11212:	leaveq 
   11213:	retq   
   11214:	movslq 0x6c(%r15),%rax
   11218:	mov    -0x28(%rbp),%r15
   1121c:	leaveq 
   1121d:	retq   
   1121e:	movslq 0x6c(%r15),%rax
   11222:	mov    -0x20(%rbp),%r15
   11226:	leaveq 
   11227:	retq   
   11228:	lea    -0x1(%rsi),%ecx
   1122b:	mov    %ecx,%ecx
   1122d:	mov    -0x28(%rbp),%rdx
   11231:	movsbq (%rdx,%rcx,1),%rcx
   11236:	test   %cl,%cl
   11238:	je     1123e <gzvprintf+0x12e>
   1123a:	xor    %eax,%eax
   1123c:	leaveq 
   1123d:	retq   
   1123e:	mov    %rax,%rdx
   11241:	add    0x80(%r8),%edx
   11248:	mov    %edx,0x80(%r8)
   1124f:	movslq %eax,%rcx
   11252:	add    0x10(%r8),%rcx
   11256:	mov    %rcx,0x10(%r8)
   1125a:	cmp    %edx,%esi
   1125c:	jbe    11260 <gzvprintf+0x150>
   1125e:	leaveq 
   1125f:	retq   
   11260:	mov    %esi,0x80(%r8)
   11267:	mov    %r8,%rdi
   1126a:	mov    %r15,-0x38(%rbp)
   1126e:	mov    %rsi,-0x10(%rbp)
   11272:	mov    %rdx,-0x8(%rbp)
   11276:	mov    %rax,-0x18(%rbp)
   1127a:	mov    %r8,%r15
   1127d:	xor    %esi,%esi
   1127f:	callq  11470 <gz_comp>
   11284:	cmp    $0xffffffff,%eax
   11287:	je     112ca <gzvprintf+0x1ba>
   11289:	mov    0x30(%r15),%rdi
   1128d:	mov    0x28(%r15),%eax
   11291:	lea    (%rax,%rdi,1),%rsi
   11295:	mov    -0x8(%rbp),%rax
   11299:	mov    -0x10(%rbp),%rcx
   1129d:	sub    %ecx,%eax
   1129f:	mov    %eax,%edx
   112a1:	mov    %r14,-0x20(%rbp)
   112a5:	mov    %rax,%r14
   112a8:	callq  21f0 <memcpy@plt>
   112ad:	mov    0x30(%r15),%rax
   112b1:	mov    %rax,0x78(%r15)
   112b5:	mov    %r14d,0x80(%r15)
   112bc:	mov    -0x20(%rbp),%r14
   112c0:	mov    -0x18(%rbp),%rax
   112c4:	mov    -0x38(%rbp),%r15
   112c8:	leaveq 
   112c9:	retq   
   112ca:	movslq 0x6c(%r15),%rax
   112ce:	mov    -0x38(%rbp),%r15
   112d2:	leaveq 
   112d3:	retq   
   112d4:	data16 nopw %cs:0x0(%rax,%rax,1)
   112df:	nop

00000000000112e0 <gz_init>:
   112e0:	push   %rbp
   112e1:	mov    %rsp,%rbp
   112e4:	sub    $0x10,%rsp
   112e8:	mov    %r15,-0x10(%rbp)
   112ec:	mov    0x2c(%rdi),%eax
   112ef:	add    %eax,%eax
   112f1:	mov    %eax,%eax
   112f3:	mov    %rdi,%r15
   112f6:	mov    %rax,%rdi
   112f9:	callq  2240 <malloc@plt>
   112fe:	mov    %rax,0x30(%r15)
   11302:	mov    $0xfffffffffffffffc,%rsi
   11309:	lea    0x50ea(%rip),%rdx        # 163fa <base_dist+0x36e>
   11310:	mov    $0xffffffffffffffff,%rcx
   11317:	test   %rax,%rax
   1131a:	je     11340 <gz_init+0x60>
   1131c:	movslq 0x40(%r15),%rax
   11320:	test   %eax,%eax
   11322:	je     11354 <gz_init+0x74>
   11324:	mov    0x2c(%r15),%edx
   11328:	mov    %edx,0x28(%r15)
   1132c:	xor    %eax,%eax
   1132e:	movslq 0x40(%r15),%rcx
   11332:	test   %ecx,%ecx
   11334:	je     113e2 <gz_init+0x102>
   1133a:	mov    -0x10(%rbp),%r15
   1133e:	leaveq 
   1133f:	retq   
   11340:	mov    %r15,%rdi
   11343:	mov    %rcx,%r15
   11346:	callq  20a0 <gz_error@plt>
   1134b:	mov    %r15,%rax
   1134e:	mov    -0x10(%rbp),%r15
   11352:	leaveq 
   11353:	retq   
   11354:	mov    0x2c(%r15),%edi
   11358:	callq  2240 <malloc@plt>
   1135d:	mov    %rax,0x38(%r15)
   11361:	test   %rax,%rax
   11364:	je     113fe <gz_init+0x11e>
   1136a:	movq   $0x0,0xb8(%r15)
   11375:	movq   $0x0,0xc0(%r15)
   11380:	movq   $0x0,0xc8(%r15)
   1138b:	sub    $0x10,%rsp
   1138f:	lea    0x5072(%rip),%rax        # 16408 <base_dist+0x37c>
   11396:	lea    0x78(%r15),%r10
   1139a:	movslq 0x58(%r15),%rsi
   1139e:	mov    $0x8,%edx
   113a3:	mov    $0x1f,%ecx
   113a8:	movslq 0x5c(%r15),%r9
   113ac:	mov    %rax,(%rsp)
   113b0:	movl   $0x70,0x8(%rsp)
   113b8:	mov    %rdx,%r8
   113bb:	mov    %r10,%rdi
   113be:	mov    %r14,-0x8(%rbp)
   113c2:	mov    %r10,%r14
   113c5:	callq  21a0 <deflateInit2_@plt>
   113ca:	add    $0x10,%rsp
   113ce:	test   %eax,%eax
   113d0:	jne    1142a <gz_init+0x14a>
   113d2:	movq   $0x0,(%r14)
   113d9:	mov    -0x8(%rbp),%r14
   113dd:	jmpq   11324 <gz_init+0x44>
   113e2:	mov    %edx,0x98(%r15)
   113e9:	mov    0x38(%r15),%rcx
   113ed:	mov    %rcx,0x90(%r15)
   113f4:	mov    %rcx,0x8(%r15)
   113f8:	mov    -0x10(%rbp),%r15
   113fc:	leaveq 
   113fd:	retq   
   113fe:	mov    0x30(%r15),%rdi
   11402:	callq  2060 <free@plt>
   11407:	mov    %r15,%rdi
   1140a:	lea    0x4fe9(%rip),%rdx        # 163fa <base_dist+0x36e>
   11411:	mov    $0xfffffffffffffffc,%rsi
   11418:	callq  20a0 <gz_error@plt>
   1141d:	mov    $0xffffffffffffffff,%rax
   11424:	mov    -0x10(%rbp),%r15
   11428:	leaveq 
   11429:	retq   
   1142a:	mov    0x38(%r15),%rdi
   1142e:	callq  2060 <free@plt>
   11433:	mov    0x30(%r15),%rdi
   11437:	callq  2060 <free@plt>
   1143c:	mov    %r15,%rdi
   1143f:	lea    0x4fb4(%rip),%rdx        # 163fa <base_dist+0x36e>
   11446:	mov    $0xfffffffffffffffc,%rsi
   1144d:	callq  20a0 <gz_error@plt>
   11452:	mov    -0x8(%rbp),%r14
   11456:	mov    $0xffffffffffffffff,%rax
   1145d:	mov    -0x10(%rbp),%r15
   11461:	leaveq 
   11462:	retq   
   11463:	data16 nopw %cs:0x0(%rax,%rax,1)
   1146e:	xchg   %ax,%ax

0000000000011470 <gz_comp>:
   11470:	push   %rbp
   11471:	mov    %rsp,%rbp
   11474:	sub    $0x30,%rsp
   11478:	mov    $0xffffffffffffffff,%rcx
   1147f:	mov    0x28(%rdi),%eax
   11482:	test   %eax,%eax
   11484:	je     114c5 <gz_comp+0x55>
   11486:	mov    %r14,%rdx
   11489:	mov    %rsi,%r14
   1148c:	mov    %r13,%r8
   1148f:	mov    %r15,%r9
   11492:	mov    %rbx,%r15
   11495:	mov    %rdi,%rbx
   11498:	mov    %r12,%rdi
   1149b:	xor    %eax,%eax
   1149d:	lea    0x78(%rbx),%r12
   114a1:	mov    $0x40000000,%r13d
   114a7:	movslq 0x40(%rbx),%rsi
   114ab:	test   %esi,%esi
   114ad:	jne    11503 <gz_comp+0x93>
   114af:	mov    %r15,-0x8(%rbp)
   114b3:	mov    %rdi,-0x10(%rbp)
   114b7:	mov    %r8,-0x18(%rbp)
   114bb:	mov    %rdx,-0x20(%rbp)
   114bf:	mov    %r9,-0x28(%rbp)
   114c3:	jmp    1152a <gz_comp+0xba>
   114c5:	mov    %rdi,%rax
   114c8:	mov    %rdi,-0x20(%rbp)
   114cc:	mov    %rsi,-0x28(%rbp)
   114d0:	mov    %rax,%rdi
   114d3:	mov    %r15,%rax
   114d6:	mov    %rbx,%r15
   114d9:	mov    %rax,%rbx
   114dc:	callq  112e0 <gz_init>
   114e1:	cmp    $0xffffffff,%eax
   114e4:	je     11559 <gz_comp+0xe9>
   114e6:	mov    %r14,%rdx
   114e9:	mov    %r12,%rdi
   114ec:	mov    %r13,%r8
   114ef:	mov    %rbx,%r9
   114f2:	mov    $0xffffffffffffffff,%rcx
   114f9:	mov    -0x28(%rbp),%r14
   114fd:	mov    -0x20(%rbp),%rbx
   11501:	jmp    1149b <gz_comp+0x2b>
   11503:	mov    %rdi,-0x8(%rbp)
   11507:	mov    %r8,-0x10(%rbp)
   1150b:	mov    %rdx,-0x18(%rbp)
   1150f:	mov    %r9,-0x28(%rbp)
   11513:	mov    %rcx,%r14
   11516:	jmpq   115a5 <gz_comp+0x135>
   1151b:	mov    0x98(%rbx),%ecx
   11521:	cmp    %r15d,%ecx
   11524:	je     115c6 <gz_comp+0x156>
   1152a:	mov    0x98(%rbx),%ecx
   11530:	test   %ecx,%ecx
   11532:	je     11614 <gz_comp+0x1a4>
   11538:	test   %r14d,%r14d
   1153b:	je     11646 <gz_comp+0x1d6>
   11541:	cmp    $0x4,%r14d
   11545:	jne    11614 <gz_comp+0x1a4>
   1154b:	cmp    $0x1,%eax
   1154e:	je     11614 <gz_comp+0x1a4>
   11554:	jmpq   11646 <gz_comp+0x1d6>
   11559:	mov    %r15,%rcx
   1155c:	mov    %rbx,%r15
   1155f:	mov    %rcx,%rbx
   11562:	mov    $0xffffffffffffffff,%rax
   11569:	leaveq 
   1156a:	retq   
   1156b:	cmp    $0x40000000,%eax
   11570:	jbe    11575 <gz_comp+0x105>
   11572:	mov    %r13,%rax
   11575:	movslq 0x1c(%rbx),%rdi
   11579:	mov    0x78(%rbx),%rsi
   1157d:	mov    %eax,%edx
   1157f:	callq  20e0 <write@plt>
   11584:	test   %eax,%eax
   11586:	js     11694 <gz_comp+0x224>
   1158c:	mov    0x80(%rbx),%ecx
   11592:	sub    %eax,%ecx
   11594:	mov    %ecx,0x80(%rbx)
   1159a:	movslq %eax,%rax
   1159d:	add    (%r12),%rax
   115a1:	mov    %rax,(%r12)
   115a5:	mov    0x80(%rbx),%eax
   115ab:	test   %eax,%eax
   115ad:	jne    1156b <gz_comp+0xfb>
   115af:	mov    %r15,%rbx
   115b2:	xor    %eax,%eax
   115b4:	mov    -0x28(%rbp),%r15
   115b8:	mov    -0x18(%rbp),%r14
   115bc:	mov    -0x10(%rbp),%r13
   115c0:	mov    -0x8(%rbp),%r12
   115c4:	leaveq 
   115c5:	retq   
   115c6:	cmp    $0x4,%r14d
   115ca:	je     116c7 <gz_comp+0x257>
   115d0:	xor    %eax,%eax
   115d2:	mov    -0x28(%rbp),%r15
   115d6:	mov    -0x20(%rbp),%r14
   115da:	mov    -0x18(%rbp),%r13
   115de:	mov    -0x10(%rbp),%r12
   115e2:	mov    -0x8(%rbp),%rbx
   115e6:	leaveq 
   115e7:	retq   
   115e8:	sub    %rsi,%rax
   115eb:	cmp    $0x40000000,%rax
   115f1:	jle    115f6 <gz_comp+0x186>
   115f3:	mov    %r13,%rax
   115f6:	movslq 0x1c(%rbx),%rdi
   115fa:	mov    %eax,%edx
   115fc:	callq  20e0 <write@plt>
   11601:	test   %eax,%eax
   11603:	js     116e7 <gz_comp+0x277>
   11609:	movslq %eax,%rax
   1160c:	add    0x8(%rbx),%rax
   11610:	mov    %rax,0x8(%rbx)
   11614:	mov    0x8(%rbx),%rsi
   11618:	mov    0x90(%rbx),%rax
   1161f:	cmp    %rax,%rsi
   11622:	jb     115e8 <gz_comp+0x178>
   11624:	mov    0x98(%rbx),%eax
   1162a:	test   %eax,%eax
   1162c:	jne    11646 <gz_comp+0x1d6>
   1162e:	mov    0x28(%rbx),%eax
   11631:	mov    %eax,0x98(%rbx)
   11637:	mov    0x38(%rbx),%rax
   1163b:	mov    %rax,0x90(%rbx)
   11642:	mov    %rax,0x8(%rbx)
   11646:	mov    0x98(%rbx),%r15d
   1164d:	mov    %r12,%rdi
   11650:	mov    %r14,%rsi
   11653:	callq  2150 <deflate@plt>
   11658:	cmp    $0xfffffffe,%eax
   1165b:	jne    1151b <gz_comp+0xab>
   11661:	mov    %rbx,%rdi
   11664:	mov    $0xfffffffffffffffe,%rsi
   1166b:	lea    0x4d9d(%rip),%rdx        # 1640f <base_dist+0x383>
   11672:	callq  20a0 <gz_error@plt>
   11677:	mov    -0x28(%rbp),%r15
   1167b:	mov    -0x20(%rbp),%r14
   1167f:	mov    -0x18(%rbp),%r13
   11683:	mov    -0x10(%rbp),%r12
   11687:	mov    -0x8(%rbp),%rbx
   1168b:	mov    $0xffffffffffffffff,%rax
   11692:	leaveq 
   11693:	retq   
   11694:	callq  2070 <__errno_location@plt>
   11699:	movslq (%rax),%rdi
   1169c:	callq  2330 <strerror@plt>
   116a1:	mov    %rax,%rdx
   116a4:	mov    %rbx,%rdi
   116a7:	mov    %r14,%rsi
   116aa:	callq  20a0 <gz_error@plt>
   116af:	mov    %r14,%rax
   116b2:	mov    %r15,%rbx
   116b5:	mov    -0x28(%rbp),%r15
   116b9:	mov    -0x18(%rbp),%r14
   116bd:	mov    -0x10(%rbp),%r13
   116c1:	mov    -0x8(%rbp),%r12
   116c5:	leaveq 
   116c6:	retq   
   116c7:	mov    %r12,%rdi
   116ca:	callq  2140 <deflateReset@plt>
   116cf:	xor    %eax,%eax
   116d1:	mov    -0x28(%rbp),%r15
   116d5:	mov    -0x20(%rbp),%r14
   116d9:	mov    -0x18(%rbp),%r13
   116dd:	mov    -0x10(%rbp),%r12
   116e1:	mov    -0x8(%rbp),%rbx
   116e5:	leaveq 
   116e6:	retq   
   116e7:	callq  2070 <__errno_location@plt>
   116ec:	movslq (%rax),%rdi
   116ef:	callq  2330 <strerror@plt>
   116f4:	mov    %rax,%rdx
   116f7:	mov    %rbx,%rdi
   116fa:	mov    $0xffffffffffffffff,%r12
   11701:	mov    %r12,%rsi
   11704:	callq  20a0 <gz_error@plt>
   11709:	mov    %r12,%rax
   1170c:	mov    -0x28(%rbp),%r15
   11710:	mov    -0x20(%rbp),%r14
   11714:	mov    -0x18(%rbp),%r13
   11718:	mov    -0x10(%rbp),%r12
   1171c:	mov    -0x8(%rbp),%rbx
   11720:	leaveq 
   11721:	retq   
   11722:	data16 nopw %cs:0x0(%rax,%rax,1)
   1172d:	nopl   (%rax)

0000000000011730 <gz_zero>:
   11730:	push   %rbp
   11731:	mov    %rsp,%rbp
   11734:	sub    $0x30,%rsp
   11738:	xor    %eax,%eax
   1173a:	mov    $0x1,%ecx
   1173f:	mov    0x80(%rdi),%edx
   11745:	test   %edx,%edx
   11747:	jne    1176a <gz_zero+0x3a>
   11749:	mov    %r12,-0x8(%rbp)
   1174d:	mov    %r13,-0x10(%rbp)
   11751:	mov    %r14,-0x18(%rbp)
   11755:	mov    %r15,-0x20(%rbp)
   11759:	mov    %rax,%r12
   1175c:	mov    %rbx,%r13
   1175f:	mov    %rsi,%rbx
   11762:	mov    %rdi,%r14
   11765:	jmpq   11806 <gz_zero+0xd6>
   1176a:	mov    %rdi,%rcx
   1176d:	mov    %rsi,-0x28(%rbp)
   11771:	mov    %rdi,-0x30(%rbp)
   11775:	mov    %rax,%rsi
   11778:	mov    %rcx,%rdi
   1177b:	mov    %r13,%rax
   1177e:	mov    %rbx,%r13
   11781:	mov    %rax,%rbx
   11784:	callq  11470 <gz_comp>
   11789:	cmp    $0xffffffff,%eax
   1178c:	je     11823 <gz_zero+0xf3>
   11792:	mov    %r12,-0x8(%rbp)
   11796:	mov    %rbx,-0x10(%rbp)
   1179a:	mov    %r14,-0x18(%rbp)
   1179e:	mov    %r15,-0x20(%rbp)
   117a2:	xor    %r12d,%r12d
   117a5:	mov    $0x1,%ecx
   117aa:	mov    -0x30(%rbp),%r14
   117ae:	mov    -0x28(%rbp),%rbx
   117b2:	jmp    11806 <gz_zero+0xd6>
   117b4:	mov    0x28(%r14),%r15d
   117b8:	cmp    %rbx,%r15
   117bb:	jle    117c0 <gz_zero+0x90>
   117bd:	mov    %rbx,%r15
   117c0:	test   %ecx,%ecx
   117c2:	jle    117d3 <gz_zero+0xa3>
   117c4:	mov    0x30(%r14),%rdi
   117c8:	mov    %r15d,%edx
   117cb:	mov    %r12,%rsi
   117ce:	callq  2170 <memset@plt>
   117d3:	mov    %r15d,0x80(%r14)
   117da:	mov    0x30(%r14),%rax
   117de:	mov    %rax,0x78(%r14)
   117e2:	mov    %r15d,%r15d
   117e5:	mov    %r15,%rax
   117e8:	add    0x10(%r14),%rax
   117ec:	mov    %rax,0x10(%r14)
   117f0:	mov    %r14,%rdi
   117f3:	mov    %r12,%rsi
   117f6:	callq  11470 <gz_comp>
   117fb:	cmp    $0xffffffff,%eax
   117fe:	je     11835 <gz_zero+0x105>
   11800:	sub    %r15,%rbx
   11803:	mov    %r12,%rcx
   11806:	test   %rbx,%rbx
   11809:	jne    117b4 <gz_zero+0x84>
   1180b:	mov    %r12,%rax
   1180e:	mov    %r13,%rbx
   11811:	mov    -0x20(%rbp),%r15
   11815:	mov    -0x18(%rbp),%r14
   11819:	mov    -0x10(%rbp),%r13
   1181d:	mov    -0x8(%rbp),%r12
   11821:	leaveq 
   11822:	retq   
   11823:	mov    %r13,%rcx
   11826:	mov    %rbx,%r13
   11829:	mov    %rcx,%rbx
   1182c:	mov    $0xffffffffffffffff,%rax
   11833:	leaveq 
   11834:	retq   
   11835:	mov    %r13,%rbx
   11838:	mov    -0x20(%rbp),%r15
   1183c:	mov    -0x18(%rbp),%r14
   11840:	mov    -0x10(%rbp),%r13
   11844:	mov    -0x8(%rbp),%r12
   11848:	mov    $0xffffffffffffffff,%rax
   1184f:	leaveq 
   11850:	retq   
   11851:	data16 nopw %cs:0x0(%rax,%rax,1)
   1185c:	nopl   0x0(%rax)

0000000000011860 <gz_write>:
   11860:	push   %rbp
   11861:	mov    %rsp,%rbp
   11864:	sub    $0x60,%rsp
   11868:	xor    %eax,%eax
   1186a:	mov    %rax,-0x40(%rbp)
   1186e:	test   %rdx,%rdx
   11871:	jne    11875 <gz_write+0x15>
   11873:	leaveq 
   11874:	retq   
   11875:	mov    0x28(%rdi),%ecx
   11878:	test   %ecx,%ecx
   1187a:	je     11916 <gz_write+0xb6>
   11880:	mov    %r12,%rcx
   11883:	mov    %rdi,%r12
   11886:	mov    %rbx,%r8
   11889:	mov    %rdx,%rbx
   1188c:	mov    %r13,%rdx
   1188f:	mov    %rsi,%r13
   11892:	movslq 0x68(%r12),%rsi
   11897:	test   %esi,%esi
   11899:	je     118e6 <gz_write+0x86>
   1189b:	movl   $0x0,0x68(%r12)
   118a4:	mov    0x60(%r12),%rsi
   118a9:	mov    %r12,%rdi
   118ac:	mov    %r12,-0x60(%rbp)
   118b0:	mov    %rbx,-0x58(%rbp)
   118b4:	mov    %r13,-0x48(%rbp)
   118b8:	mov    %r8,%rbx
   118bb:	mov    %rcx,%r12
   118be:	mov    %rdx,%r13
   118c1:	callq  11730 <gz_zero>
   118c6:	cmp    $0xffffffff,%eax
   118c9:	je     11952 <gz_write+0xf2>
   118cf:	mov    %r12,%rcx
   118d2:	mov    %r13,%rdx
   118d5:	mov    %rbx,%r8
   118d8:	xor    %eax,%eax
   118da:	mov    -0x48(%rbp),%r13
   118de:	mov    -0x58(%rbp),%rbx
   118e2:	mov    -0x60(%rbp),%r12
   118e6:	mov    0x28(%r12),%esi
   118eb:	cmp    %rsi,%rbx
   118ee:	jae    11956 <gz_write+0xf6>
   118f0:	mov    $0x1,%eax
   118f5:	mov    %rbx,-0x8(%rbp)
   118f9:	mov    %r8,-0x10(%rbp)
   118fd:	mov    %rcx,-0x18(%rbp)
   11901:	mov    %rdx,-0x20(%rbp)
   11905:	mov    %r14,-0x28(%rbp)
   11909:	mov    %r15,-0x30(%rbp)
   1190d:	mov    %rax,-0x38(%rbp)
   11911:	jmpq   119d8 <gz_write+0x178>
   11916:	mov    %rdi,%rax
   11919:	mov    %rdi,-0x60(%rbp)
   1191d:	mov    %rdx,-0x58(%rbp)
   11921:	mov    %rsi,-0x50(%rbp)
   11925:	mov    %rax,%rdi
   11928:	callq  112e0 <gz_init>
   1192d:	cmp    $0xffffffff,%eax
   11930:	je     11a79 <gz_write+0x219>
   11936:	mov    %r12,%rcx
   11939:	mov    %r13,%rdx
   1193c:	mov    %rbx,%r8
   1193f:	xor    %eax,%eax
   11941:	mov    -0x50(%rbp),%r13
   11945:	mov    -0x58(%rbp),%rbx
   11949:	mov    -0x60(%rbp),%r12
   1194d:	jmpq   11892 <gz_write+0x32>
   11952:	xor    %eax,%eax
   11954:	leaveq 
   11955:	retq   
   11956:	mov    0x80(%r12),%esi
   1195e:	test   %esi,%esi
   11960:	je     119a2 <gz_write+0x142>
   11962:	mov    %r12,%rdi
   11965:	mov    %r12,-0x50(%rbp)
   11969:	mov    %rbx,-0x60(%rbp)
   1196d:	mov    %r13,-0x48(%rbp)
   11971:	mov    %rax,%rsi
   11974:	mov    %r8,%rbx
   11977:	mov    %rcx,%r12
   1197a:	mov    %rdx,%r13
   1197d:	callq  11470 <gz_comp>
   11982:	cmp    $0xffffffff,%eax
   11985:	je     11a7d <gz_write+0x21d>
   1198b:	mov    %r12,%rcx
   1198e:	mov    %r13,%rdx
   11991:	mov    %rbx,%r8
   11994:	xor    %eax,%eax
   11996:	mov    -0x48(%rbp),%r13
   1199a:	mov    -0x60(%rbp),%rbx
   1199e:	mov    -0x50(%rbp),%r12
   119a2:	mov    %r13,0x78(%r12)
   119a7:	mov    $0xffffffff,%r13d
   119ad:	mov    $0xfffffffe,%esi
   119b2:	mov    %rbx,-0x20(%rbp)
   119b6:	mov    %r8,-0x28(%rbp)
   119ba:	mov    %rcx,-0x30(%rbp)
   119be:	mov    %rdx,-0x38(%rbp)
   119c2:	mov    %r14,-0x40(%rbp)
   119c6:	mov    %r15,-0x60(%rbp)
   119ca:	mov    %rsi,%r14
   119cd:	jmpq   11a8e <gz_write+0x22e>
   119d2:	sub    %r15,%rbx
   119d5:	add    %r15,%r13
   119d8:	mov    0x80(%r12),%eax
   119e0:	test   %eax,%eax
   119e2:	jne    119ee <gz_write+0x18e>
   119e4:	mov    0x30(%r12),%rax
   119e9:	mov    %rax,0x78(%r12)
   119ee:	mov    0x80(%r12),%eax
   119f6:	add    0x78(%r12),%rax
   119fb:	mov    0x30(%r12),%rdx
   11a00:	sub    %rdx,%rax
   11a03:	mov    0x28(%r12),%r14d
   11a08:	sub    %eax,%r14d
   11a0b:	mov    %r14d,%ecx
   11a0e:	cmp    %rcx,%rbx
   11a11:	jae    11a16 <gz_write+0x1b6>
   11a13:	mov    %rbx,%r14
   11a16:	mov    %eax,%eax
   11a18:	lea    (%rdx,%rax,1),%rdi
   11a1c:	mov    %r14d,%r15d
   11a1f:	mov    %r13,%rsi
   11a22:	mov    %r15,%rdx
   11a25:	callq  21f0 <memcpy@plt>
   11a2a:	add    0x80(%r12),%r14d
   11a32:	mov    %r14d,0x80(%r12)
   11a3a:	mov    %r15,%rax
   11a3d:	add    0x10(%r12),%rax
   11a42:	mov    %rax,0x10(%r12)
   11a47:	cmp    %rbx,%r15
   11a4a:	jne    11a98 <gz_write+0x238>
   11a4c:	pushq  -0x40(%rbp)
   11a4f:	popq   -0x60(%rbp)
   11a52:	mov    -0x60(%rbp),%rax
   11a56:	test   %rax,%rax
   11a59:	jne    119d2 <gz_write+0x172>
   11a5f:	mov    -0x30(%rbp),%r15
   11a63:	mov    -0x28(%rbp),%r14
   11a67:	mov    -0x20(%rbp),%r13
   11a6b:	mov    -0x18(%rbp),%r12
   11a6f:	mov    -0x10(%rbp),%rbx
   11a73:	mov    -0x8(%rbp),%rax
   11a77:	leaveq 
   11a78:	retq   
   11a79:	xor    %eax,%eax
   11a7b:	leaveq 
   11a7c:	retq   
   11a7d:	xor    %eax,%eax
   11a7f:	leaveq 
   11a80:	retq   
   11a81:	mov    %r15d,%eax
   11a84:	cmp    %rax,%rbx
   11a87:	je     11ab3 <gz_write+0x253>
   11a89:	sub    %rax,%rbx
   11a8c:	xor    %eax,%eax
   11a8e:	cmp    %r14,%rbx
   11a91:	jbe    11acd <gz_write+0x26d>
   11a93:	mov    %r13,%r15
   11a96:	jmp    11ad0 <gz_write+0x270>
   11a98:	mov    %r12,%rdi
   11a9b:	xor    %r14d,%r14d
   11a9e:	mov    %r14,%rsi
   11aa1:	callq  11470 <gz_comp>
   11aa6:	cmp    $0xffffffff,%eax
   11aa9:	je     11b0d <gz_write+0x2ad>
   11aab:	pushq  -0x38(%rbp)
   11aae:	popq   -0x60(%rbp)
   11ab1:	jmp    11a52 <gz_write+0x1f2>
   11ab3:	mov    -0x60(%rbp),%r15
   11ab7:	mov    -0x40(%rbp),%r14
   11abb:	mov    -0x38(%rbp),%r13
   11abf:	mov    -0x30(%rbp),%r12
   11ac3:	mov    -0x28(%rbp),%rbx
   11ac7:	mov    -0x20(%rbp),%rax
   11acb:	leaveq 
   11acc:	retq   
   11acd:	mov    %rbx,%r15
   11ad0:	mov    %r15d,0x80(%r12)
   11ad8:	mov    %r15d,%ecx
   11adb:	add    0x10(%r12),%rcx
   11ae0:	mov    %rcx,0x10(%r12)
   11ae5:	mov    %rax,%rsi
   11ae8:	mov    %r12,%rdi
   11aeb:	callq  11470 <gz_comp>
   11af0:	cmp    $0xffffffff,%eax
   11af3:	jne    11a81 <gz_write+0x221>
   11af5:	mov    -0x60(%rbp),%r15
   11af9:	mov    -0x40(%rbp),%r14
   11afd:	mov    -0x38(%rbp),%r13
   11b01:	mov    -0x30(%rbp),%r12
   11b05:	mov    -0x28(%rbp),%rbx
   11b09:	xor    %eax,%eax
   11b0b:	leaveq 
   11b0c:	retq   
   11b0d:	mov    %r14,%rax
   11b10:	mov    -0x30(%rbp),%r15
   11b14:	mov    -0x28(%rbp),%r14
   11b18:	mov    -0x20(%rbp),%r13
   11b1c:	mov    -0x18(%rbp),%r12
   11b20:	mov    -0x10(%rbp),%rbx
   11b24:	leaveq 
   11b25:	retq   

Disassembly of section .fini:

0000000000011b28 <_fini>:
   11b28:	endbr64 
   11b2c:	sub    $0x8,%rsp
   11b30:	add    $0x8,%rsp
   11b34:	retq   
