
libjpeg/pre.so:     file format elf64-x86-64


Disassembly of section .init:

0000000000004000 <_init>:
    4000:	endbr64 
    4004:	sub    $0x8,%rsp
    4008:	mov    0x69f41(%rip),%rax        # 6df50 <__gmon_start__>
    400f:	test   %rax,%rax
    4012:	je     4016 <_init+0x16>
    4014:	callq  *%rax
    4016:	add    $0x8,%rsp
    401a:	retq   

Disassembly of section .plt:

0000000000004020 <.plt>:
    4020:	pushq  0x69fe2(%rip)        # 6e008 <_GLOBAL_OFFSET_TABLE_+0x8>
    4026:	jmpq   *0x69fe4(%rip)        # 6e010 <_GLOBAL_OFFSET_TABLE_+0x10>
    402c:	nopl   0x0(%rax)

0000000000004030 <jpeg_destroy@plt>:
    4030:	jmpq   *0x69fe2(%rip)        # 6e018 <jpeg_destroy@@LIBJPEG_6.2+0x59738>
    4036:	pushq  $0x0
    403b:	jmpq   4020 <.plt>

0000000000004040 <getenv@plt>:
    4040:	jmpq   *0x69fda(%rip)        # 6e020 <getenv@GLIBC_2.2.5>
    4046:	pushq  $0x1
    404b:	jmpq   4020 <.plt>

0000000000004050 <jinit_d_coef_controller@plt>:
    4050:	jmpq   *0x69fd2(%rip)        # 6e028 <jinit_d_coef_controller@@LIBJPEG_6.2+0x539d8>
    4056:	pushq  $0x2
    405b:	jmpq   4020 <.plt>

0000000000004060 <free@plt>:
    4060:	jmpq   *0x69fca(%rip)        # 6e030 <free@GLIBC_2.2.5>
    4066:	pushq  $0x3
    406b:	jmpq   4020 <.plt>

0000000000004070 <jpeg_default_colorspace@plt>:
    4070:	jmpq   *0x69fc2(%rip)        # 6e038 <jpeg_default_colorspace@@LIBJPEG_6.2+0x590e8>
    4076:	pushq  $0x4
    407b:	jmpq   4020 <.plt>

0000000000004080 <jinit_huff_encoder@plt>:
    4080:	jmpq   *0x69fba(%rip)        # 6e040 <jinit_huff_encoder@@LIBJPEG_6.2+0x66000>
    4086:	pushq  $0x5
    408b:	jmpq   4020 <.plt>

0000000000004090 <jinit_arith_decoder@plt>:
    4090:	jmpq   *0x69fb2(%rip)        # 6e048 <jinit_arith_decoder@@LIBJPEG_6.2+0x32338>
    4096:	pushq  $0x6
    409b:	jmpq   4020 <.plt>

00000000000040a0 <jpeg_get_large@plt>:
    40a0:	jmpq   *0x69faa(%rip)        # 6e050 <jpeg_get_large@@LIBJPEG_6.2+0x33ea0>
    40a6:	pushq  $0x7
    40ab:	jmpq   4020 <.plt>

00000000000040b0 <jinit_huff_decoder@plt>:
    40b0:	jmpq   *0x69fa2(%rip)        # 6e058 <jinit_huff_decoder@@LIBJPEG_6.2+0x4e298>
    40b6:	pushq  $0x8
    40bb:	jmpq   4020 <.plt>

00000000000040c0 <ferror@plt>:
    40c0:	jmpq   *0x69f9a(%rip)        # 6e060 <ferror@GLIBC_2.2.5>
    40c6:	pushq  $0x9
    40cb:	jmpq   4020 <.plt>

00000000000040d0 <jpeg_make_c_derived_tbl@plt>:
    40d0:	jmpq   *0x69f92(%rip)        # 6e068 <jpeg_make_c_derived_tbl@@LIBJPEG_6.2+0x65fa8>
    40d6:	pushq  $0xa
    40db:	jmpq   4020 <.plt>

00000000000040e0 <fread@plt>:
    40e0:	jmpq   *0x69f8a(%rip)        # 6e070 <fread@GLIBC_2.2.5>
    40e6:	pushq  $0xb
    40eb:	jmpq   4020 <.plt>

00000000000040f0 <jpeg_gen_optimal_table@plt>:
    40f0:	jmpq   *0x69f82(%rip)        # 6e078 <jpeg_gen_optimal_table@@LIBJPEG_6.2+0x65d48>
    40f6:	pushq  $0xc
    40fb:	jmpq   4020 <.plt>

0000000000004100 <jinit_2pass_quantizer@plt>:
    4100:	jmpq   *0x69f7a(%rip)        # 6e080 <jinit_2pass_quantizer@@LIBJPEG_6.2+0x37220>
    4106:	pushq  $0xd
    410b:	jmpq   4020 <.plt>

0000000000004110 <jpeg_set_defaults@plt>:
    4110:	jmpq   *0x69f72(%rip)        # 6e088 <jpeg_set_defaults@@LIBJPEG_6.2+0x59768>
    4116:	pushq  $0xe
    411b:	jmpq   4020 <.plt>

0000000000004120 <jinit_marker_writer@plt>:
    4120:	jmpq   *0x69f6a(%rip)        # 6e090 <jinit_marker_writer@@LIBJPEG_6.2+0x5b670>
    4126:	pushq  $0xf
    412b:	jmpq   4020 <.plt>

0000000000004130 <jpeg_abort@plt>:
    4130:	jmpq   *0x69f62(%rip)        # 6e098 <jpeg_abort@@LIBJPEG_6.2+0x59838>
    4136:	pushq  $0x10
    413b:	jmpq   4020 <.plt>

0000000000004140 <jinit_c_main_controller@plt>:
    4140:	jmpq   *0x69f5a(%rip)        # 6e0a0 <jinit_c_main_controller@@LIBJPEG_6.2+0x5b950>
    4146:	pushq  $0x11
    414b:	jmpq   4020 <.plt>

0000000000004150 <jdiv_round_up@plt>:
    4150:	jmpq   *0x69f52(%rip)        # 6e0a8 <jdiv_round_up@@LIBJPEG_6.2+0x354d8>
    4156:	pushq  $0x12
    415b:	jmpq   4020 <.plt>

0000000000004160 <jpeg_consume_input@plt>:
    4160:	jmpq   *0x69f4a(%rip)        # 6e0b0 <jpeg_consume_input@@LIBJPEG_6.2+0x557f0>
    4166:	pushq  $0x13
    416b:	jmpq   4020 <.plt>

0000000000004170 <jpeg_set_colorspace@plt>:
    4170:	jmpq   *0x69f42(%rip)        # 6e0b8 <jpeg_set_colorspace@@LIBJPEG_6.2+0x59628>
    4176:	pushq  $0x14
    417b:	jmpq   4020 <.plt>

0000000000004180 <jpeg_free_large@plt>:
    4180:	jmpq   *0x69f3a(%rip)        # 6e0c0 <jpeg_free_large@@LIBJPEG_6.2+0x33f00>
    4186:	pushq  $0x15
    418b:	jmpq   4020 <.plt>

0000000000004190 <jinit_arith_encoder@plt>:
    4190:	jmpq   *0x69f32(%rip)        # 6e0c8 <jinit_arith_encoder@@LIBJPEG_6.2+0x33e88>
    4196:	pushq  $0x16
    419b:	jmpq   4020 <.plt>

00000000000041a0 <jinit_forward_dct@plt>:
    41a0:	jmpq   *0x69f2a(%rip)        # 6e0d0 <jinit_forward_dct@@LIBJPEG_6.2+0x66ba0>
    41a6:	pushq  $0x17
    41ab:	jmpq   4020 <.plt>

00000000000041b0 <jinit_color_converter@plt>:
    41b0:	jmpq   *0x69f22(%rip)        # 6e0d8 <jinit_color_converter@@LIBJPEG_6.2+0x68878>
    41b6:	pushq  $0x18
    41bb:	jmpq   4020 <.plt>

00000000000041c0 <jpeg_huff_decode@plt>:
    41c0:	jmpq   *0x69f1a(%rip)        # 6e0e0 <jpeg_huff_decode@@LIBJPEG_6.2+0x4dd60>
    41c6:	pushq  $0x19
    41cb:	jmpq   4020 <.plt>

00000000000041d0 <jinit_phuff_decoder@plt>:
    41d0:	jmpq   *0x69f12(%rip)        # 6e0e8 <jinit_phuff_decoder@@LIBJPEG_6.2+0x43478>
    41d6:	pushq  $0x1a
    41db:	jmpq   4020 <.plt>

00000000000041e0 <memset@plt>:
    41e0:	jmpq   *0x69f0a(%rip)        # 6e0f0 <memset@GLIBC_2.2.5>
    41e6:	pushq  $0x1b
    41eb:	jmpq   4020 <.plt>

00000000000041f0 <jinit_master_decompress@plt>:
    41f0:	jmpq   *0x69f02(%rip)        # 6e0f8 <jinit_master_decompress@@LIBJPEG_6.2+0x47d38>
    41f6:	pushq  $0x1c
    41fb:	jmpq   4020 <.plt>

0000000000004200 <jinit_compress_master@plt>:
    4200:	jmpq   *0x69efa(%rip)        # 6e100 <jinit_compress_master@@LIBJPEG_6.2+0x5ba90>
    4206:	pushq  $0x1d
    420b:	jmpq   4020 <.plt>

0000000000004210 <jpeg_get_small@plt>:
    4210:	jmpq   *0x69ef2(%rip)        # 6e108 <jpeg_get_small@@LIBJPEG_6.2+0x33f78>
    4216:	pushq  $0x1e
    421b:	jmpq   4020 <.plt>

0000000000004220 <jinit_d_post_controller@plt>:
    4220:	jmpq   *0x69eea(%rip)        # 6e110 <jinit_d_post_controller@@LIBJPEG_6.2+0x42000>
    4226:	pushq  $0x1f
    422b:	jmpq   4020 <.plt>

0000000000004230 <jinit_1pass_quantizer@plt>:
    4230:	jmpq   *0x69ee2(%rip)        # 6e118 <jinit_1pass_quantizer@@LIBJPEG_6.2+0x38268>
    4236:	pushq  $0x20
    423b:	jmpq   4020 <.plt>

0000000000004240 <jinit_memory_mgr@plt>:
    4240:	jmpq   *0x69eda(%rip)        # 6e120 <jinit_memory_mgr@@LIBJPEG_6.2+0x35490>
    4246:	pushq  $0x21
    424b:	jmpq   4020 <.plt>

0000000000004250 <jinit_d_main_controller@plt>:
    4250:	jmpq   *0x69ed2(%rip)        # 6e128 <jinit_d_main_controller@@LIBJPEG_6.2+0x4ba48>
    4256:	pushq  $0x22
    425b:	jmpq   4020 <.plt>

0000000000004260 <strcmp@plt>:
    4260:	jmpq   *0x69eca(%rip)        # 6e130 <strcmp@GLIBC_2.2.5>
    4266:	pushq  $0x23
    426b:	jmpq   4020 <.plt>

0000000000004270 <jpeg_alloc_quant_table@plt>:
    4270:	jmpq   *0x69ec2(%rip)        # 6e138 <jpeg_alloc_quant_table@@LIBJPEG_6.2+0x59918>
    4276:	pushq  $0x24
    427b:	jmpq   4020 <.plt>

0000000000004280 <jpeg_mem_available@plt>:
    4280:	jmpq   *0x69eba(%rip)        # 6e140 <jpeg_mem_available@@LIBJPEG_6.2+0x33f70>
    4286:	pushq  $0x25
    428b:	jmpq   4020 <.plt>

0000000000004290 <jinit_merged_upsampler@plt>:
    4290:	jmpq   *0x69eb2(%rip)        # 6e148 <jinit_merged_upsampler@@LIBJPEG_6.2+0x46ff8>
    4296:	pushq  $0x26
    429b:	jmpq   4020 <.plt>

00000000000042a0 <fprintf@plt>:
    42a0:	jmpq   *0x69eaa(%rip)        # 6e150 <fprintf@GLIBC_2.2.5>
    42a6:	pushq  $0x27
    42ab:	jmpq   4020 <.plt>

00000000000042b0 <jround_up@plt>:
    42b0:	jmpq   *0x69ea2(%rip)        # 6e158 <jround_up@@LIBJPEG_6.2+0x35578>
    42b6:	pushq  $0x28
    42bb:	jmpq   4020 <.plt>

00000000000042c0 <memcpy@plt>:
    42c0:	jmpq   *0x69e9a(%rip)        # 6e160 <memcpy@GLIBC_2.14>
    42c6:	pushq  $0x29
    42cb:	jmpq   4020 <.plt>

00000000000042d0 <jpeg_calc_output_dimensions@plt>:
    42d0:	jmpq   *0x69e92(%rip)        # 6e168 <jpeg_calc_output_dimensions@@LIBJPEG_6.2+0x47fb8>
    42d6:	pushq  $0x2a
    42db:	jmpq   4020 <.plt>

00000000000042e0 <jinit_c_prep_controller@plt>:
    42e0:	jmpq   *0x69e8a(%rip)        # 6e170 <jinit_c_prep_controller@@LIBJPEG_6.2+0x57990>
    42e6:	pushq  $0x2b
    42eb:	jmpq   4020 <.plt>

00000000000042f0 <jpeg_add_quant_table@plt>:
    42f0:	jmpq   *0x69e82(%rip)        # 6e178 <jpeg_add_quant_table@@LIBJPEG_6.2+0x59118>
    42f6:	pushq  $0x2c
    42fb:	jmpq   4020 <.plt>

0000000000004300 <jinit_inverse_dct@plt>:
    4300:	jmpq   *0x69e7a(%rip)        # 6e180 <jinit_inverse_dct@@LIBJPEG_6.2+0x4ed10>
    4306:	pushq  $0x2d
    430b:	jmpq   4020 <.plt>

0000000000004310 <jpeg_set_quality@plt>:
    4310:	jmpq   *0x69e72(%rip)        # 6e188 <jpeg_set_quality@@LIBJPEG_6.2+0x591c8>
    4316:	pushq  $0x2e
    431b:	jmpq   4020 <.plt>

0000000000004320 <malloc@plt>:
    4320:	jmpq   *0x69e6a(%rip)        # 6e190 <malloc@GLIBC_2.2.5>
    4326:	pushq  $0x2f
    432b:	jmpq   4020 <.plt>

0000000000004330 <fflush@plt>:
    4330:	jmpq   *0x69e62(%rip)        # 6e198 <fflush@GLIBC_2.2.5>
    4336:	pushq  $0x30
    433b:	jmpq   4020 <.plt>

0000000000004340 <jpeg_free_small@plt>:
    4340:	jmpq   *0x69e5a(%rip)        # 6e1a0 <jpeg_free_small@@LIBJPEG_6.2+0x34000>
    4346:	pushq  $0x31
    434b:	jmpq   4020 <.plt>

0000000000004350 <jpeg_mem_term@plt>:
    4350:	jmpq   *0x69e52(%rip)        # 6e1a8 <jpeg_mem_term@@LIBJPEG_6.2+0x33f78>
    4356:	pushq  $0x32
    435b:	jmpq   4020 <.plt>

0000000000004360 <jinit_color_deconverter@plt>:
    4360:	jmpq   *0x69e4a(%rip)        # 6e1b0 <jinit_color_deconverter@@LIBJPEG_6.2+0x525c0>
    4366:	pushq  $0x33
    436b:	jmpq   4020 <.plt>

0000000000004370 <sscanf@plt>:
    4370:	jmpq   *0x69e42(%rip)        # 6e1b8 <sscanf@GLIBC_2.2.5>
    4376:	pushq  $0x34
    437b:	jmpq   4020 <.plt>

0000000000004380 <jinit_c_coef_controller@plt>:
    4380:	jmpq   *0x69e3a(%rip)        # 6e1c0 <jinit_c_coef_controller@@LIBJPEG_6.2+0x69380>
    4386:	pushq  $0x35
    438b:	jmpq   4020 <.plt>

0000000000004390 <jpeg_suppress_tables@plt>:
    4390:	jmpq   *0x69e32(%rip)        # 6e1c8 <jpeg_suppress_tables@@LIBJPEG_6.2+0x69ab8>
    4396:	pushq  $0x36
    439b:	jmpq   4020 <.plt>

00000000000043a0 <jpeg_open_backing_store@plt>:
    43a0:	jmpq   *0x69e2a(%rip)        # 6e1d0 <jpeg_open_backing_store@@LIBJPEG_6.2+0x33fd0>
    43a6:	pushq  $0x37
    43ab:	jmpq   4020 <.plt>

00000000000043b0 <jpeg_quality_scaling@plt>:
    43b0:	jmpq   *0x69e22(%rip)        # 6e1d8 <jpeg_quality_scaling@@LIBJPEG_6.2+0x59028>
    43b6:	pushq  $0x38
    43bb:	jmpq   4020 <.plt>

00000000000043c0 <jinit_c_master_control@plt>:
    43c0:	jmpq   *0x69e1a(%rip)        # 6e1e0 <jinit_c_master_control@@LIBJPEG_6.2+0x5a980>
    43c6:	pushq  $0x39
    43cb:	jmpq   4020 <.plt>

00000000000043d0 <jinit_input_controller@plt>:
    43d0:	jmpq   *0x69e12(%rip)        # 6e1e8 <jinit_input_controller@@LIBJPEG_6.2+0x4c308>
    43d6:	pushq  $0x3a
    43db:	jmpq   4020 <.plt>

00000000000043e0 <jinit_upsampler@plt>:
    43e0:	jmpq   *0x69e0a(%rip)        # 6e1f0 <jinit_upsampler@@LIBJPEG_6.2+0x41c00>
    43e6:	pushq  $0x3b
    43eb:	jmpq   4020 <.plt>

00000000000043f0 <jcopy_sample_rows@plt>:
    43f0:	jmpq   *0x69e02(%rip)        # 6e1f8 <jcopy_sample_rows@@LIBJPEG_6.2+0x355f8>
    43f6:	pushq  $0x3c
    43fb:	jmpq   4020 <.plt>

0000000000004400 <jpeg_set_linear_quality@plt>:
    4400:	jmpq   *0x69dfa(%rip)        # 6e200 <jpeg_set_linear_quality@@LIBJPEG_6.2+0x59200>
    4406:	pushq  $0x3d
    440b:	jmpq   4020 <.plt>

0000000000004410 <jpeg_fill_bit_buffer@plt>:
    4410:	jmpq   *0x69df2(%rip)        # 6e208 <jpeg_fill_bit_buffer@@LIBJPEG_6.2+0x4e0a8>
    4416:	pushq  $0x3e
    441b:	jmpq   4020 <.plt>

0000000000004420 <jpeg_read_scanlines@plt>:
    4420:	jmpq   *0x69dea(%rip)        # 6e210 <jpeg_read_scanlines@@LIBJPEG_6.2+0x55480>
    4426:	pushq  $0x3f
    442b:	jmpq   4020 <.plt>

0000000000004430 <sprintf@plt>:
    4430:	jmpq   *0x69de2(%rip)        # 6e218 <sprintf@GLIBC_2.2.5>
    4436:	pushq  $0x40
    443b:	jmpq   4020 <.plt>

0000000000004440 <exit@plt>:
    4440:	jmpq   *0x69dda(%rip)        # 6e220 <exit@GLIBC_2.2.5>
    4446:	pushq  $0x41
    444b:	jmpq   4020 <.plt>

0000000000004450 <fwrite@plt>:
    4450:	jmpq   *0x69dd2(%rip)        # 6e228 <fwrite@GLIBC_2.2.5>
    4456:	pushq  $0x42
    445b:	jmpq   4020 <.plt>

0000000000004460 <jinit_phuff_encoder@plt>:
    4460:	jmpq   *0x69dca(%rip)        # 6e230 <jinit_phuff_encoder@@LIBJPEG_6.2+0x58b10>
    4466:	pushq  $0x43
    446b:	jmpq   4020 <.plt>

0000000000004470 <jcopy_block_row@plt>:
    4470:	jmpq   *0x69dc2(%rip)        # 6e238 <jcopy_block_row@@LIBJPEG_6.2+0x355d8>
    4476:	pushq  $0x44
    447b:	jmpq   4020 <.plt>

0000000000004480 <jinit_downsampler@plt>:
    4480:	jmpq   *0x69dba(%rip)        # 6e240 <jinit_downsampler@@LIBJPEG_6.2+0x57220>
    4486:	pushq  $0x45
    448b:	jmpq   4020 <.plt>

0000000000004490 <jpeg_mem_init@plt>:
    4490:	jmpq   *0x69db2(%rip)        # 6e248 <jpeg_mem_init@@LIBJPEG_6.2+0x34028>
    4496:	pushq  $0x46
    449b:	jmpq   4020 <.plt>

00000000000044a0 <jpeg_alloc_huff_table@plt>:
    44a0:	jmpq   *0x69daa(%rip)        # 6e250 <jpeg_alloc_huff_table@@LIBJPEG_6.2+0x59a10>
    44a6:	pushq  $0x47
    44ab:	jmpq   4020 <.plt>

00000000000044b0 <jinit_marker_reader@plt>:
    44b0:	jmpq   *0x69da2(%rip)        # 6e258 <jinit_marker_reader@@LIBJPEG_6.2+0x4ae98>
    44b6:	pushq  $0x48
    44bb:	jmpq   4020 <.plt>

00000000000044c0 <jpeg_make_d_derived_tbl@plt>:
    44c0:	jmpq   *0x69d9a(%rip)        # 6e260 <jpeg_make_d_derived_tbl@@LIBJPEG_6.2+0x4e430>
    44c6:	pushq  $0x49
    44cb:	jmpq   4020 <.plt>

00000000000044d0 <jzero_far@plt>:
    44d0:	jmpq   *0x69d92(%rip)        # 6e268 <jzero_far@@LIBJPEG_6.2+0x355e8>
    44d6:	pushq  $0x4a
    44db:	jmpq   4020 <.plt>

Disassembly of section .text:

00000000000044e0 <deregister_tm_clones>:
    44e0:	lea    0x69d99(%rip),%rdi        # 6e280 <__TMC_END__>
    44e7:	lea    0x69d92(%rip),%rax        # 6e280 <__TMC_END__>
    44ee:	cmp    %rdi,%rax
    44f1:	je     4508 <deregister_tm_clones+0x28>
    44f3:	mov    0x69a16(%rip),%rax        # 6df10 <_ITM_deregisterTMCloneTable>
    44fa:	test   %rax,%rax
    44fd:	je     4508 <deregister_tm_clones+0x28>
    44ff:	jmpq   *%rax
    4501:	nopl   0x0(%rax)
    4508:	retq   
    4509:	nopl   0x0(%rax)

0000000000004510 <register_tm_clones>:
    4510:	lea    0x69d69(%rip),%rdi        # 6e280 <__TMC_END__>
    4517:	lea    0x69d62(%rip),%rsi        # 6e280 <__TMC_END__>
    451e:	sub    %rdi,%rsi
    4521:	sar    $0x3,%rsi
    4525:	mov    %rsi,%rax
    4528:	shr    $0x3f,%rax
    452c:	add    %rax,%rsi
    452f:	sar    %rsi
    4532:	je     4548 <register_tm_clones+0x38>
    4534:	mov    0x69a95(%rip),%rax        # 6dfd0 <_ITM_registerTMCloneTable>
    453b:	test   %rax,%rax
    453e:	je     4548 <register_tm_clones+0x38>
    4540:	jmpq   *%rax
    4542:	nopw   0x0(%rax,%rax,1)
    4548:	retq   
    4549:	nopl   0x0(%rax)

0000000000004550 <__do_global_dtors_aux>:
    4550:	endbr64 
    4554:	cmpb   $0x0,0x69d25(%rip)        # 6e280 <__TMC_END__>
    455b:	jne    4590 <F_2_172+0x9>
    455d:	push   %rbp
    455e:	cmpq   $0x0,0x69a8a(%rip)        # 6dff0 <__cxa_finalize@GLIBC_2.2.5>
    4566:	mov    %rsp,%rbp
    4569:	je     4578 <__do_global_dtors_aux+0x28>
    456b:	mov    0x69cfe(%rip),%rdi        # 6e270 <__dso_handle>
    4572:	callq  *0x69a78(%rip)        # 6dff0 <__cxa_finalize@GLIBC_2.2.5>
    4578:	callq  44e0 <deregister_tm_clones>
    457d:	movb   $0x1,0x69cfc(%rip)        # 6e280 <__TMC_END__>
    4584:	pop    %rbp
    4585:	retq   
    4586:	nopw   %cs:0x0(%rax,%rax,1)
    4590:	retq   
    4591:	data16 nopw %cs:0x0(%rax,%rax,1)
    459c:	nopl   0x0(%rax)

00000000000045a0 <frame_dummy>:
    45a0:	endbr64 
    45a4:	jmpq   4510 <register_tm_clones>
    45a9:	nopl   0x0(%rax)

00000000000045b0 <jpeg_CreateCompress>:
    45b0:	push   %rbp
    45b1:	mov    %rsp,%rbp
    45b4:	sub    $0x20,%rsp
    45b8:	mov    %r14,-0x18(%rbp)
    45bc:	mov    %r15,-0x20(%rbp)
    45c0:	mov    %r12,-0x8(%rbp)
    45c4:	mov    %r13,-0x10(%rbp)
    45c8:	movq   $0x0,0x8(%rdi)
    45d0:	cmp    $0x3e,%esi
    45d3:	jne    45da <jpeg_CreateCompress+0x2a>
    45d5:	mov    %rdi,%r13
    45d8:	jmp    4605 <jpeg_CreateCompress+0x55>
    45da:	mov    (%rdi),%rax
    45dd:	movl   $0xc,0x28(%rax)
    45e4:	mov    (%rdi),%rax
    45e7:	movl   $0x3e,0x2c(%rax)
    45ee:	mov    (%rdi),%rax
    45f1:	mov    %esi,0x30(%rax)
    45f4:	mov    (%rdi),%rax
    45f7:	mov    (%rax),%rax
    45fa:	mov    %rdx,%r12
    45fd:	mov    %rdi,%r13
    4600:	callq  *%rax
    4602:	mov    %r12,%rdx
    4605:	cmp    $0x208,%rdx
    460c:	je     4637 <jpeg_CreateCompress+0x87>
    460e:	mov    0x0(%r13),%rax
    4612:	movl   $0x15,0x28(%rax)
    4619:	mov    0x0(%r13),%rax
    461d:	movl   $0x208,0x2c(%rax)
    4624:	mov    0x0(%r13),%rax
    4628:	mov    %edx,0x30(%rax)
    462b:	mov    0x0(%r13),%rax
    462f:	mov    (%rax),%rax
    4632:	mov    %r13,%rdi
    4635:	callq  *%rax
    4637:	xor    %r12d,%r12d
    463a:	mov    $0x208,%edx
    463f:	mov    0x0(%r13),%r14
    4643:	mov    0x18(%r13),%r15
    4647:	mov    %r13,%rdi
    464a:	mov    %r12,%rsi
    464d:	callq  41e0 <memset@plt>
    4652:	mov    %r14,0x0(%r13)
    4656:	mov    %r15,0x18(%r13)
    465a:	movl   $0x0,0x20(%r13)
    4662:	mov    %r13,%rdi
    4665:	callq  4240 <jinit_memory_mgr@plt>
    466a:	movq   $0x0,0x10(%r13)
    4672:	movq   $0x0,0x28(%r13)
    467a:	movq   $0x0,0x58(%r13)
    4682:	mov    %r12,%rax
    4685:	jmp    4696 <jpeg_CreateCompress+0xe6>
    4687:	movslq %eax,%rcx
    468a:	movq   $0x0,0x60(%r13,%rcx,8)
    4693:	add    $0x1,%eax
    4696:	cmp    $0x3,%eax
    4699:	jle    4687 <jpeg_CreateCompress+0xd7>
    469b:	jmp    46bc <jpeg_CreateCompress+0x10c>
    469d:	movslq %r12d,%rax
    46a0:	movq   $0x0,0x80(%r13,%rax,8)
    46ac:	movq   $0x0,0xa0(%r13,%rax,8)
    46b8:	add    $0x1,%r12d
    46bc:	cmp    $0x3,%r12d
    46c0:	jle    469d <jpeg_CreateCompress+0xed>
    46c2:	movq   $0x0,0x1f8(%r13)
    46cd:	movsd  0x4492b(%rip),%xmm0        # 49000 <_fini+0xd20>
    46d5:	movsd  %xmm0,0x40(%r13)
    46db:	movl   $0x64,0x24(%r13)
    46e3:	mov    -0x10(%rbp),%r13
    46e7:	mov    -0x8(%rbp),%r12
    46eb:	mov    -0x20(%rbp),%r15
    46ef:	mov    -0x18(%rbp),%r14
    46f3:	leaveq 
    46f4:	retq   
    46f5:	data16 nopw %cs:0x0(%rax,%rax,1)

0000000000004700 <jpeg_destroy_compress>:
    4700:	push   %rbp
    4701:	mov    %rsp,%rbp
    4704:	callq  4030 <jpeg_destroy@plt>
    4709:	leaveq 
    470a:	retq   
    470b:	nopl   0x0(%rax,%rax,1)

0000000000004710 <jpeg_suppress_tables>:
    4710:	push   %rbp
    4711:	mov    %rsp,%rbp
    4714:	xor    %eax,%eax
    4716:	mov    %rax,%rcx
    4719:	jmp    4731 <jpeg_suppress_tables+0x21>
    471b:	movslq %ecx,%rdx
    471e:	mov    0x60(%rdi,%rdx,8),%rdx
    4723:	test   %rdx,%rdx
    4726:	je     472e <jpeg_suppress_tables+0x1e>
    4728:	mov    %esi,0x80(%rdx)
    472e:	add    $0x1,%ecx
    4731:	cmp    $0x3,%ecx
    4734:	jle    471b <jpeg_suppress_tables+0xb>
    4736:	jmp    4764 <jpeg_suppress_tables+0x54>
    4738:	movslq %eax,%rdx
    473b:	mov    0x80(%rdi,%rdx,8),%rcx
    4743:	test   %rcx,%rcx
    4746:	je     474e <jpeg_suppress_tables+0x3e>
    4748:	mov    %esi,0x114(%rcx)
    474e:	mov    0xa0(%rdi,%rdx,8),%rcx
    4756:	test   %rcx,%rcx
    4759:	je     4761 <jpeg_suppress_tables+0x51>
    475b:	mov    %esi,0x114(%rcx)
    4761:	add    $0x1,%eax
    4764:	cmp    $0x3,%eax
    4767:	jle    4738 <jpeg_suppress_tables+0x28>
    4769:	leaveq 
    476a:	retq   
    476b:	nopl   0x0(%rax,%rax,1)

0000000000004770 <jpeg_finish_compress>:
    4770:	push   %rbp
    4771:	mov    %rsp,%rbp
    4774:	sub    $0x20,%rsp
    4778:	mov    %r14,-0x10(%rbp)
    477c:	mov    %r15,-0x18(%rbp)
    4780:	mov    %r13,-0x8(%rbp)
    4784:	xor    %r14d,%r14d
    4787:	movslq 0x24(%rdi),%rax
    478b:	cmp    $0x65,%eax
    478e:	je     47a2 <jpeg_finish_compress+0x32>
    4790:	cmp    $0x66,%eax
    4793:	je     47a2 <jpeg_finish_compress+0x32>
    4795:	cmp    $0x67,%eax
    4798:	jne    47b9 <jpeg_finish_compress+0x49>
    479a:	mov    %rdi,%r13
    479d:	jmpq   4853 <jpeg_finish_compress+0xe3>
    47a2:	mov    0x34(%rdi),%eax
    47a5:	cmp    0x130(%rdi),%eax
    47ab:	ja     4895 <jpeg_finish_compress+0x125>
    47b1:	mov    %rdi,%r13
    47b4:	jmpq   48aa <jpeg_finish_compress+0x13a>
    47b9:	mov    (%rdi),%rax
    47bc:	movl   $0x14,0x28(%rax)
    47c3:	movslq 0x24(%rdi),%rcx
    47c7:	mov    (%rdi),%rax
    47ca:	mov    %ecx,0x2c(%rax)
    47cd:	mov    (%rdi),%rax
    47d0:	mov    (%rax),%rax
    47d3:	mov    %rdi,%r13
    47d6:	callq  *%rax
    47d8:	jmp    4853 <jpeg_finish_compress+0xe3>
    47da:	mov    0x10(%r13),%rax
    47de:	test   %rax,%rax
    47e1:	je     4805 <jpeg_finish_compress+0x95>
    47e3:	mov    %r15d,%ecx
    47e6:	mov    %rcx,0x8(%rax)
    47ea:	mov    0x140(%r13),%ecx
    47f1:	mov    0x10(%r13),%rax
    47f5:	mov    %rcx,0x10(%rax)
    47f9:	mov    0x10(%r13),%rax
    47fd:	mov    (%rax),%rax
    4800:	mov    %r13,%rdi
    4803:	callq  *%rax
    4805:	mov    0x1c8(%r13),%rax
    480c:	mov    0x8(%rax),%rax
    4810:	mov    %r13,%rdi
    4813:	mov    %r14,%rsi
    4816:	callq  *%rax
    4818:	test   %eax,%eax
    481a:	jne    4833 <jpeg_finish_compress+0xc3>
    481c:	mov    0x0(%r13),%rax
    4820:	movl   $0x18,0x28(%rax)
    4827:	mov    0x0(%r13),%rax
    482b:	mov    (%rax),%rax
    482e:	mov    %r13,%rdi
    4831:	callq  *%rax
    4833:	add    $0x1,%r15d
    4837:	mov    0x140(%r13),%eax
    483e:	cmp    %r15d,%eax
    4841:	ja     47da <jpeg_finish_compress+0x6a>
    4843:	mov    0x1b0(%r13),%rax
    484a:	mov    0x10(%rax),%rax
    484e:	mov    %r13,%rdi
    4851:	callq  *%rax
    4853:	mov    0x1b0(%r13),%rax
    485a:	movslq 0x1c(%rax),%rcx
    485e:	test   %ecx,%ecx
    4860:	je     48bc <jpeg_finish_compress+0x14c>
    4862:	mov    0x1d0(%r13),%rax
    4869:	mov    0x18(%rax),%rax
    486d:	mov    %r13,%rdi
    4870:	callq  *%rax
    4872:	mov    0x28(%r13),%rax
    4876:	mov    0x20(%rax),%rax
    487a:	mov    %r13,%rdi
    487d:	callq  *%rax
    487f:	mov    %r13,%rdi
    4882:	callq  4130 <jpeg_abort@plt>
    4887:	mov    -0x8(%rbp),%r13
    488b:	mov    -0x18(%rbp),%r15
    488f:	mov    -0x10(%rbp),%r14
    4893:	leaveq 
    4894:	retq   
    4895:	mov    (%rdi),%rax
    4898:	movl   $0x43,0x28(%rax)
    489f:	mov    (%rdi),%rax
    48a2:	mov    (%rax),%rax
    48a5:	mov    %rdi,%r13
    48a8:	callq  *%rax
    48aa:	mov    0x1b0(%r13),%rax
    48b1:	mov    0x10(%rax),%rax
    48b5:	mov    %r13,%rdi
    48b8:	callq  *%rax
    48ba:	jmp    4853 <jpeg_finish_compress+0xe3>
    48bc:	mov    %r13,%rdi
    48bf:	callq  *(%rax)
    48c1:	mov    %r14,%r15
    48c4:	jmpq   4837 <jpeg_finish_compress+0xc7>
    48c9:	nopl   0x0(%rax)

00000000000048d0 <jpeg_write_marker>:
    48d0:	push   %rbp
    48d1:	mov    %rsp,%rbp
    48d4:	sub    $0x20,%rsp
    48d8:	mov    %r12,-0x8(%rbp)
    48dc:	mov    %r13,-0x10(%rbp)
    48e0:	mov    %r14,-0x18(%rbp)
    48e4:	mov    %r15,-0x20(%rbp)
    48e8:	mov    0x130(%rdi),%eax
    48ee:	test   %eax,%eax
    48f0:	jne    4906 <jpeg_write_marker+0x36>
    48f2:	movslq 0x24(%rdi),%rax
    48f6:	cmp    $0x65,%eax
    48f9:	jne    4952 <F_0_285+0x24>
    48fb:	mov    %rcx,%r12
    48fe:	mov    %rdi,%r13
    4901:	mov    %rdx,%r14
    4904:	jmp    4932 <F_0_285+0x4>
    4906:	mov    (%rdi),%rax
    4909:	movl   $0x14,0x28(%rax)
    4910:	movslq 0x24(%rdi),%r8
    4914:	mov    (%rdi),%rax
    4917:	mov    %r8d,0x2c(%rax)
    491b:	mov    (%rdi),%rax
    491e:	mov    (%rax),%rax
    4921:	mov    %rcx,%r12
    4924:	mov    %rdx,%r14
    4927:	mov    %rsi,%r15
    492a:	mov    %rdi,%r13
    492d:	callq  *%rax
    492f:	mov    %r15,%rsi
    4932:	mov    0x1d0(%r13),%rax
    4939:	mov    0x28(%rax),%rax
    493d:	mov    %r13,%rdi
    4940:	mov    %r12,%rdx
    4943:	callq  *%rax
    4945:	mov    0x1d0(%r13),%rax
    494c:	mov    0x30(%rax),%r15
    4950:	jmp    4974 <F_0_285+0x46>
    4952:	cmp    $0x66,%eax
    4955:	jne    498b <F_0_285+0x5d>
    4957:	mov    %rcx,%r12
    495a:	mov    %rdi,%r13
    495d:	mov    %rdx,%r14
    4960:	jmp    4932 <F_0_285+0x4>
    4962:	movzbl (%r14),%esi
    4966:	mov    %r13,%rdi
    4969:	callq  *%r15
    496c:	add    $0xffffffff,%r12d
    4970:	add    $0x1,%r14
    4974:	test   %r12d,%r12d
    4977:	jne    4962 <F_0_285+0x34>
    4979:	mov    -0x20(%rbp),%r15
    497d:	mov    -0x18(%rbp),%r14
    4981:	mov    -0x10(%rbp),%r13
    4985:	mov    -0x8(%rbp),%r12
    4989:	leaveq 
    498a:	retq   
    498b:	cmp    $0x67,%eax
    498e:	jne    4906 <jpeg_write_marker+0x36>
    4994:	mov    %rcx,%r12
    4997:	mov    %rdi,%r13
    499a:	mov    %rdx,%r14
    499d:	jmp    4932 <F_0_285+0x4>
    499f:	nop

00000000000049a0 <jpeg_write_m_header>:
    49a0:	push   %rbp
    49a1:	mov    %rsp,%rbp
    49a4:	sub    $0x20,%rsp
    49a8:	mov    0x130(%rdi),%eax
    49ae:	test   %eax,%eax
    49b0:	jne    49c5 <jpeg_write_m_header+0x25>
    49b2:	movslq 0x24(%rdi),%rax
    49b6:	cmp    $0x65,%eax
    49b9:	je     4a11 <jpeg_write_m_header+0x71>
    49bb:	cmp    $0x66,%eax
    49be:	je     4a11 <jpeg_write_m_header+0x71>
    49c0:	cmp    $0x67,%eax
    49c3:	je     4a11 <jpeg_write_m_header+0x71>
    49c5:	mov    (%rdi),%rax
    49c8:	movl   $0x14,0x28(%rax)
    49cf:	movslq 0x24(%rdi),%rcx
    49d3:	mov    (%rdi),%rax
    49d6:	mov    %ecx,0x2c(%rax)
    49d9:	mov    (%rdi),%rax
    49dc:	mov    (%rax),%rax
    49df:	mov    %rdi,%rcx
    49e2:	mov    %r13,-0x8(%rbp)
    49e6:	mov    %r14,-0x10(%rbp)
    49ea:	mov    %r15,-0x18(%rbp)
    49ee:	mov    %rdx,%r13
    49f1:	mov    %rsi,%r14
    49f4:	mov    %rdi,%r15
    49f7:	mov    %rcx,%rdi
    49fa:	callq  *%rax
    49fc:	mov    %r13,%rdx
    49ff:	mov    %r14,%rsi
    4a02:	mov    %r15,%rdi
    4a05:	mov    -0x18(%rbp),%r15
    4a09:	mov    -0x10(%rbp),%r14
    4a0d:	mov    -0x8(%rbp),%r13
    4a11:	mov    0x1d0(%rdi),%rax
    4a18:	mov    0x28(%rax),%rax
    4a1c:	callq  *%rax
    4a1e:	leaveq 
    4a1f:	retq   

0000000000004a20 <jpeg_write_m_byte>:
    4a20:	push   %rbp
    4a21:	mov    %rsp,%rbp
    4a24:	mov    0x1d0(%rdi),%rax
    4a2b:	mov    0x30(%rax),%rax
    4a2f:	callq  *%rax
    4a31:	leaveq 
    4a32:	retq   
    4a33:	data16 nopw %cs:0x0(%rax,%rax,1)
    4a3e:	xchg   %ax,%ax

0000000000004a40 <jpeg_write_tables>:
    4a40:	push   %rbp
    4a41:	mov    %rsp,%rbp
    4a44:	sub    $0x10,%rsp
    4a48:	mov    %r15,-0x8(%rbp)
    4a4c:	movslq 0x24(%rdi),%rax
    4a50:	cmp    $0x64,%eax
    4a53:	jne    4a5a <jpeg_write_tables+0x1a>
    4a55:	mov    %rdi,%r15
    4a58:	jmp    4a79 <jpeg_write_tables+0x39>
    4a5a:	mov    (%rdi),%rax
    4a5d:	movl   $0x14,0x28(%rax)
    4a64:	movslq 0x24(%rdi),%rcx
    4a68:	mov    (%rdi),%rax
    4a6b:	mov    %ecx,0x2c(%rax)
    4a6e:	mov    (%rdi),%rax
    4a71:	mov    (%rax),%rax
    4a74:	mov    %rdi,%r15
    4a77:	callq  *%rax
    4a79:	mov    (%r15),%rax
    4a7c:	mov    0x20(%rax),%rax
    4a80:	mov    %r15,%rdi
    4a83:	callq  *%rax
    4a85:	mov    0x28(%r15),%rax
    4a89:	mov    0x10(%rax),%rax
    4a8d:	mov    %r15,%rdi
    4a90:	callq  *%rax
    4a92:	mov    %r15,%rdi
    4a95:	callq  4120 <jinit_marker_writer@plt>
    4a9a:	mov    0x1d0(%r15),%rax
    4aa1:	mov    0x20(%rax),%rax
    4aa5:	mov    %r15,%rdi
    4aa8:	callq  *%rax
    4aaa:	mov    0x28(%r15),%rax
    4aae:	mov    0x20(%rax),%rax
    4ab2:	mov    %r15,%rdi
    4ab5:	callq  *%rax
    4ab7:	mov    -0x8(%rbp),%r15
    4abb:	leaveq 
    4abc:	retq   
    4abd:	nopl   (%rax)

0000000000004ac0 <jpeg_abort_compress>:
    4ac0:	push   %rbp
    4ac1:	mov    %rsp,%rbp
    4ac4:	callq  4130 <jpeg_abort@plt>
    4ac9:	leaveq 
    4aca:	retq   
    4acb:	nopl   0x0(%rax,%rax,1)

0000000000004ad0 <jpeg_start_compress>:
    4ad0:	push   %rbp
    4ad1:	mov    %rsp,%rbp
    4ad4:	sub    $0x10,%rsp
    4ad8:	mov    %r15,-0x10(%rbp)
    4adc:	movslq 0x24(%rdi),%rax
    4ae0:	cmp    $0x64,%eax
    4ae3:	jne    4aea <jpeg_start_compress+0x1a>
    4ae5:	mov    %rdi,%r15
    4ae8:	jmp    4b1d <jpeg_start_compress+0x4d>
    4aea:	mov    (%rdi),%rax
    4aed:	movl   $0x14,0x28(%rax)
    4af4:	movslq 0x24(%rdi),%rcx
    4af8:	mov    (%rdi),%rax
    4afb:	mov    %ecx,0x2c(%rax)
    4afe:	mov    (%rdi),%rax
    4b01:	mov    (%rax),%rax
    4b04:	mov    %rdi,%rcx
    4b07:	mov    %r14,-0x8(%rbp)
    4b0b:	mov    %rsi,%r14
    4b0e:	mov    %rdi,%r15
    4b11:	mov    %rcx,%rdi
    4b14:	callq  *%rax
    4b16:	mov    %r14,%rsi
    4b19:	mov    -0x8(%rbp),%r14
    4b1d:	test   %esi,%esi
    4b1f:	je     4b2b <jpeg_start_compress+0x5b>
    4b21:	xor    %esi,%esi
    4b23:	mov    %r15,%rdi
    4b26:	callq  4390 <jpeg_suppress_tables@plt>
    4b2b:	mov    (%r15),%rax
    4b2e:	mov    0x20(%rax),%rax
    4b32:	mov    %r15,%rdi
    4b35:	callq  *%rax
    4b37:	mov    0x28(%r15),%rax
    4b3b:	mov    0x10(%rax),%rax
    4b3f:	mov    %r15,%rdi
    4b42:	callq  *%rax
    4b44:	mov    %r15,%rdi
    4b47:	callq  4200 <jinit_compress_master@plt>
    4b4c:	mov    0x1b0(%r15),%rax
    4b53:	mov    (%rax),%rax
    4b56:	mov    %r15,%rdi
    4b59:	callq  *%rax
    4b5b:	movl   $0x0,0x130(%r15)
    4b66:	movslq 0x100(%r15),%rax
    4b6d:	test   %eax,%eax
    4b6f:	jne    4b78 <jpeg_start_compress+0xa8>
    4b71:	mov    $0x65,%eax
    4b76:	jmp    4b7d <jpeg_start_compress+0xad>
    4b78:	mov    $0x66,%eax
    4b7d:	mov    %eax,0x24(%r15)
    4b81:	mov    -0x10(%rbp),%r15
    4b85:	leaveq 
    4b86:	retq   
    4b87:	nopw   0x0(%rax,%rax,1)

0000000000004b90 <jpeg_write_scanlines>:
    4b90:	push   %rbp
    4b91:	mov    %rsp,%rbp
    4b94:	sub    $0x20,%rsp
    4b98:	mov    %r13,-0x8(%rbp)
    4b9c:	mov    %r14,-0x10(%rbp)
    4ba0:	mov    %r15,-0x18(%rbp)
    4ba4:	movslq 0x24(%rdi),%rax
    4ba8:	cmp    $0x65,%eax
    4bab:	jne    4bbe <jpeg_write_scanlines+0x2e>
    4bad:	mov    %r14,%r8
    4bb0:	mov    %rdi,%r14
    4bb3:	mov    %r13,%r9
    4bb6:	mov    %rdx,%r13
    4bb9:	mov    %rsi,%r15
    4bbc:	jmp    4beb <jpeg_write_scanlines+0x5b>
    4bbe:	mov    (%rdi),%rax
    4bc1:	movl   $0x14,0x28(%rax)
    4bc8:	movslq 0x24(%rdi),%rcx
    4bcc:	mov    (%rdi),%rax
    4bcf:	mov    %ecx,0x2c(%rax)
    4bd2:	mov    (%rdi),%rax
    4bd5:	mov    (%rax),%rax
    4bd8:	mov    %rdx,%r13
    4bdb:	mov    %rsi,%r15
    4bde:	mov    %rdi,%r14
    4be1:	callq  *%rax
    4be3:	mov    -0x10(%rbp),%r8
    4be7:	mov    -0x8(%rbp),%r9
    4beb:	mov    0x34(%r14),%eax
    4bef:	cmp    0x130(%r14),%eax
    4bf6:	ja     4c1d <jpeg_write_scanlines+0x8d>
    4bf8:	mov    (%r14),%rax
    4bfb:	movl   $0x7b,0x28(%rax)
    4c02:	mov    (%r14),%rax
    4c05:	mov    0x8(%rax),%rax
    4c09:	mov    $0xffffffffffffffff,%rsi
    4c10:	mov    %r14,%rdi
    4c13:	callq  *%rax
    4c15:	mov    -0x10(%rbp),%r8
    4c19:	mov    -0x8(%rbp),%r9
    4c1d:	mov    0x10(%r14),%rax
    4c21:	test   %rax,%rax
    4c24:	je     4c51 <jpeg_write_scanlines+0xc1>
    4c26:	mov    0x130(%r14),%ecx
    4c2d:	mov    %rcx,0x8(%rax)
    4c31:	mov    0x34(%r14),%ecx
    4c35:	mov    0x10(%r14),%rax
    4c39:	mov    %rcx,0x10(%rax)
    4c3d:	mov    0x10(%r14),%rax
    4c41:	mov    (%rax),%rax
    4c44:	mov    %r14,%rdi
    4c47:	callq  *%rax
    4c49:	mov    -0x10(%rbp),%r8
    4c4d:	mov    -0x8(%rbp),%r9
    4c51:	mov    0x1b0(%r14),%rax
    4c58:	movslq 0x18(%rax),%rcx
    4c5c:	test   %ecx,%ecx
    4c5e:	je     4c6e <jpeg_write_scanlines+0xde>
    4c60:	mov    %r14,%rdi
    4c63:	callq  *0x8(%rax)
    4c66:	mov    -0x10(%rbp),%r8
    4c6a:	mov    -0x8(%rbp),%r9
    4c6e:	mov    0x34(%r14),%eax
    4c72:	mov    0x130(%r14),%ecx
    4c79:	sub    %ecx,%eax
    4c7b:	cmp    %r13d,%eax
    4c7e:	jae    4c83 <jpeg_write_scanlines+0xf3>
    4c80:	mov    %rax,%r13
    4c83:	movl   $0x0,-0x1c(%rbp)
    4c8a:	mov    0x1b8(%r14),%rax
    4c91:	mov    0x8(%rax),%rax
    4c95:	mov    %r13,%rcx
    4c98:	mov    %r9,%r13
    4c9b:	mov    %r15,%rsi
    4c9e:	mov    %r8,%r15
    4ca1:	lea    -0x1c(%rbp),%rdx
    4ca5:	mov    %r14,%rdi
    4ca8:	callq  *%rax
    4caa:	mov    -0x1c(%rbp),%eax
    4cad:	mov    %rax,%rcx
    4cb0:	add    0x130(%r14),%ecx
    4cb7:	mov    %ecx,0x130(%r14)
    4cbe:	mov    %r15,%r14
    4cc1:	mov    -0x18(%rbp),%r15
    4cc5:	leaveq 
    4cc6:	retq   
    4cc7:	nopw   0x0(%rax,%rax,1)

0000000000004cd0 <jpeg_write_raw_data>:
    4cd0:	push   %rbp
    4cd1:	mov    %rsp,%rbp
    4cd4:	sub    $0x20,%rsp
    4cd8:	mov    %r15,-0x10(%rbp)
    4cdc:	movslq 0x24(%rdi),%rax
    4ce0:	cmp    $0x66,%eax
    4ce3:	jne    4ced <jpeg_write_raw_data+0x1d>
    4ce5:	mov    %r15,%rax
    4ce8:	mov    %rdi,%r15
    4ceb:	jmp    4d26 <jpeg_write_raw_data+0x56>
    4ced:	mov    (%rdi),%rax
    4cf0:	movl   $0x14,0x28(%rax)
    4cf7:	movslq 0x24(%rdi),%rcx
    4cfb:	mov    (%rdi),%rax
    4cfe:	mov    %ecx,0x2c(%rax)
    4d01:	mov    (%rdi),%rax
    4d04:	mov    (%rax),%rax
    4d07:	mov    %rdi,%rcx
    4d0a:	mov    %rdx,-0x20(%rbp)
    4d0e:	mov    %rsi,-0x18(%rbp)
    4d12:	mov    %rdi,%r15
    4d15:	mov    %rcx,%rdi
    4d18:	callq  *%rax
    4d1a:	mov    -0x18(%rbp),%rsi
    4d1e:	mov    -0x20(%rbp),%rdx
    4d22:	mov    -0x10(%rbp),%rax
    4d26:	mov    0x34(%r15),%edi
    4d2a:	mov    0x130(%r15),%ecx
    4d31:	cmp    %ecx,%edi
    4d33:	jbe    4dfc <jpeg_write_raw_data+0x12c>
    4d39:	mov    0x10(%r15),%rax
    4d3d:	test   %rax,%rax
    4d40:	je     4d7a <jpeg_write_raw_data+0xaa>
    4d42:	mov    %rcx,0x8(%rax)
    4d46:	mov    0x34(%r15),%ecx
    4d4a:	mov    0x10(%r15),%rax
    4d4e:	mov    %rcx,0x10(%rax)
    4d52:	mov    0x10(%r15),%rax
    4d56:	mov    (%rax),%rax
    4d59:	mov    %r15,%rdi
    4d5c:	mov    %r13,-0x18(%rbp)
    4d60:	mov    %r14,-0x20(%rbp)
    4d64:	mov    %rdx,%r13
    4d67:	mov    %rsi,%r14
    4d6a:	callq  *%rax
    4d6c:	mov    %r13,%rdx
    4d6f:	mov    %r14,%rsi
    4d72:	mov    -0x20(%rbp),%r14
    4d76:	mov    -0x18(%rbp),%r13
    4d7a:	mov    0x1b0(%r15),%rax
    4d81:	movslq 0x18(%rax),%rcx
    4d85:	test   %ecx,%ecx
    4d87:	je     4dab <jpeg_write_raw_data+0xdb>
    4d89:	mov    %r15,%rdi
    4d8c:	mov    %r13,-0x8(%rbp)
    4d90:	mov    %r14,-0x20(%rbp)
    4d94:	mov    %rdx,%r13
    4d97:	mov    %rsi,%r14
    4d9a:	callq  *0x8(%rax)
    4d9d:	mov    %r13,%rdx
    4da0:	mov    %r14,%rsi
    4da3:	mov    -0x20(%rbp),%r14
    4da7:	mov    -0x8(%rbp),%r13
    4dab:	mov    0x13c(%r15),%eax
    4db2:	shl    $0x3,%eax
    4db5:	mov    %rax,-0x8(%rbp)
    4db9:	cmp    %eax,%edx
    4dbb:	jae    4de0 <jpeg_write_raw_data+0x110>
    4dbd:	mov    (%r15),%rax
    4dc0:	movl   $0x17,0x28(%rax)
    4dc7:	mov    (%r15),%rax
    4dca:	mov    (%rax),%rax
    4dcd:	mov    %r15,%rdi
    4dd0:	mov    %r14,-0x20(%rbp)
    4dd4:	mov    %rsi,%r14
    4dd7:	callq  *%rax
    4dd9:	mov    %r14,%rsi
    4ddc:	mov    -0x20(%rbp),%r14
    4de0:	mov    0x1c8(%r15),%rax
    4de7:	mov    0x8(%rax),%rax
    4deb:	mov    %r15,%rdi
    4dee:	callq  *%rax
    4df0:	test   %eax,%eax
    4df2:	jne    4e20 <jpeg_write_raw_data+0x150>
    4df4:	xor    %eax,%eax
    4df6:	mov    -0x10(%rbp),%r15
    4dfa:	leaveq 
    4dfb:	retq   
    4dfc:	mov    (%r15),%rcx
    4dff:	movl   $0x7b,0x28(%rcx)
    4e06:	mov    (%r15),%rcx
    4e09:	mov    0x8(%rcx),%rcx
    4e0d:	mov    %r15,%rdi
    4e10:	mov    %rax,%r15
    4e13:	mov    $0xffffffffffffffff,%rsi
    4e1a:	callq  *%rcx
    4e1c:	xor    %eax,%eax
    4e1e:	leaveq 
    4e1f:	retq   
    4e20:	mov    -0x8(%rbp),%rax
    4e24:	mov    %rax,%rcx
    4e27:	add    0x130(%r15),%ecx
    4e2e:	mov    %ecx,0x130(%r15)
    4e35:	mov    -0x10(%rbp),%r15
    4e39:	leaveq 
    4e3a:	retq   
    4e3b:	nopl   0x0(%rax,%rax,1)

0000000000004e40 <jinit_c_coef_controller>:
    4e40:	push   %rbp
    4e41:	mov    %rsp,%rbp
    4e44:	sub    $0x30,%rsp
    4e48:	mov    %r13,-0x20(%rbp)
    4e4c:	mov    %r14,-0x28(%rbp)
    4e50:	mov    %r15,-0x30(%rbp)
    4e54:	mov    0x8(%rdi),%rax
    4e58:	mov    (%rax),%rax
    4e5b:	mov    %rsi,%r14
    4e5e:	mov    %rbx,%r15
    4e61:	mov    $0x1,%r13d
    4e67:	mov    $0xc0,%edx
    4e6c:	mov    %rdi,%rbx
    4e6f:	mov    %r13,%rsi
    4e72:	callq  *%rax
    4e74:	mov    %rax,-0x18(%rbp)
    4e78:	mov    %rax,0x1c8(%rbx)
    4e7f:	lea    0x8ca(%rip),%rcx        # 5750 <start_pass_coef>
    4e86:	mov    %rcx,(%rax)
    4e89:	xor    %esi,%esi
    4e8b:	test   %r14d,%r14d
    4e8e:	jne    4eb3 <jinit_c_coef_controller+0x73>
    4e90:	mov    0x8(%rbx),%rcx
    4e94:	mov    0x8(%rcx),%rcx
    4e98:	mov    %rbx,%rdi
    4e9b:	mov    %r15,%rbx
    4e9e:	mov    %rax,%r14
    4ea1:	mov    %r13,%r15
    4ea4:	mov    %rsi,%r13
    4ea7:	mov    %r15,%rsi
    4eaa:	mov    $0x500,%edx
    4eaf:	callq  *%rcx
    4eb1:	jmp    4edd <jinit_c_coef_controller+0x9d>
    4eb3:	mov    0x58(%rbx),%r14
    4eb7:	mov    %r15,-0x8(%rbp)
    4ebb:	mov    %r12,-0x10(%rbp)
    4ebf:	mov    %rsi,%r13
    4ec2:	jmpq   4f49 <jinit_c_coef_controller+0x109>
    4ec7:	movslq %r13d,%rdx
    4eca:	mov    %rdx,%rcx
    4ecd:	shl    $0x7,%rcx
    4ed1:	add    %rax,%rcx
    4ed4:	mov    %rcx,0x20(%r14,%rdx,8)
    4ed9:	add    $0x1,%r13d
    4edd:	cmp    $0x9,%r13d
    4ee1:	jle    4ec7 <jinit_c_coef_controller+0x87>
    4ee3:	movq   $0x0,0x70(%r14)
    4eeb:	mov    -0x30(%rbp),%r15
    4eef:	mov    -0x28(%rbp),%r14
    4ef3:	mov    -0x20(%rbp),%r13
    4ef7:	leaveq 
    4ef8:	retq   
    4ef9:	mov    0x1c(%r14),%edi
    4efd:	movslq 0x8(%r14),%rsi
    4f01:	mov    0x8(%rbx),%rax
    4f05:	mov    0x28(%rax),%r12
    4f09:	callq  42b0 <jround_up@plt>
    4f0e:	mov    %rax,%r15
    4f11:	mov    0x20(%r14),%edi
    4f15:	movslq 0xc(%r14),%rsi
    4f19:	callq  42b0 <jround_up@plt>
    4f1e:	mov    %r15,%rcx
    4f21:	mov    %rax,%r8
    4f24:	mov    0xc(%r14),%r9d
    4f28:	mov    %rbx,%rdi
    4f2b:	mov    $0x1,%esi
    4f30:	xor    %edx,%edx
    4f32:	callq  *%r12
    4f35:	movslq %r13d,%rcx
    4f38:	mov    -0x18(%rbp),%rdx
    4f3c:	mov    %rax,0x70(%rdx,%rcx,8)
    4f41:	add    $0x1,%r13d
    4f45:	add    $0x60,%r14
    4f49:	movslq 0x4c(%rbx),%rax
    4f4d:	cmp    %r13d,%eax
    4f50:	jg     4ef9 <jinit_c_coef_controller+0xb9>
    4f52:	mov    -0x10(%rbp),%r12
    4f56:	mov    -0x8(%rbp),%rbx
    4f5a:	mov    -0x30(%rbp),%r15
    4f5e:	mov    -0x28(%rbp),%r14
    4f62:	mov    -0x20(%rbp),%r13
    4f66:	leaveq 
    4f67:	retq   
    4f68:	nopl   0x0(%rax,%rax,1)

0000000000004f70 <compress_data>:
    4f70:	push   %rbp
    4f71:	mov    %rsp,%rbp
    4f74:	sub    $0x90,%rsp
    4f7b:	mov    %rsi,-0x50(%rbp)
    4f7f:	mov    %rdi,-0x78(%rbp)
    4f83:	mov    %rbx,-0x8(%rbp)
    4f87:	mov    %r12,-0x10(%rbp)
    4f8b:	mov    %r13,-0x18(%rbp)
    4f8f:	mov    %r14,-0x20(%rbp)
    4f93:	mov    %r15,-0x28(%rbp)
    4f97:	mov    0x1c8(%rdi),%r8
    4f9e:	mov    %r8,-0x68(%rbp)
    4fa2:	movslq 0x18(%r8),%rcx
    4fa6:	mov    0x168(%rdi),%r14d
    4fad:	add    $0xffffffff,%r14d
    4fb1:	mov    %r14,-0x88(%rbp)
    4fb8:	mov    0x140(%rdi),%edx
    4fbe:	add    $0xffffffff,%edx
    4fc1:	mov    %rdx,-0x38(%rbp)
    4fc5:	lea    0x20(%r8),%r12
    4fc9:	mov    %r12,-0x70(%rbp)
    4fcd:	xor    %r10d,%r10d
    4fd0:	jmpq   50cc <compress_data+0x15c>
    4fd5:	sub    $0x10,%rsp
    4fd9:	movslq 0x4(%r14),%rcx
    4fdd:	mov    (%rsi,%rcx,8),%rdx
    4fe1:	mov    (%r12,%r10,8),%rcx
    4fe5:	mov    0x1e8(%rdi),%rsi
    4fec:	mov    0x8(%rsi),%r10
    4ff0:	mov    %r15d,(%rsp)
    4ff4:	mov    %r14,%rsi
    4ff7:	mov    %r13,%r8
    4ffa:	mov    %rax,-0x30(%rbp)
    4ffe:	callq  *%r10
    5001:	add    $0x10,%rsp
    5005:	movslq 0x34(%r14),%rax
    5009:	cmp    %eax,%r15d
    500c:	jl     510a <compress_data+0x19a>
    5012:	mov    -0x30(%rbp),%rdx
    5016:	mov    -0x90(%rbp),%rcx
    501d:	add    0x34(%r14),%ebx
    5021:	add    $0x8,%r13d
    5025:	lea    0x1(%rdx),%eax
    5028:	mov    -0x48(%rbp),%r9
    502c:	mov    -0x78(%rbp),%rdi
    5030:	mov    -0x50(%rbp),%rsi
    5034:	mov    -0x38(%rbp),%rdx
    5038:	mov    -0x68(%rbp),%r8
    503c:	xor    %r10d,%r10d
    503f:	movslq 0x38(%r14),%r11
    5043:	cmp    %eax,%r11d
    5046:	jg     5137 <compress_data+0x1c7>
    504c:	mov    -0x60(%rbp),%rax
    5050:	add    $0x1,%eax
    5053:	mov    -0x40(%rbp),%r13
    5057:	mov    -0x80(%rbp),%r9
    505b:	mov    -0x88(%rbp),%r14
    5062:	movslq 0x144(%rdi),%r11
    5069:	cmp    %eax,%r11d
    506c:	jg     5181 <compress_data+0x211>
    5072:	mov    0x1f0(%rdi),%rax
    5079:	mov    0x8(%rax),%rax
    507d:	mov    %r12,%rsi
    5080:	mov    %r9,%r12
    5083:	mov    %rdx,%r15
    5086:	mov    %rdi,%rbx
    5089:	callq  *%rax
    508b:	test   %eax,%eax
    508d:	je     519e <compress_data+0x22e>
    5093:	lea    0x1(%r12),%r9d
    5098:	mov    %r15,%rdx
    509b:	mov    %rbx,%rdi
    509e:	mov    -0x70(%rbp),%r12
    50a2:	mov    -0x50(%rbp),%rsi
    50a6:	mov    -0x68(%rbp),%r8
    50aa:	mov    -0x90(%rbp),%rcx
    50b1:	xor    %r10d,%r10d
    50b4:	mov    %r9,-0x80(%rbp)
    50b8:	cmp    %r14d,%r9d
    50bb:	jbe    51c8 <compress_data+0x258>
    50c1:	movl   $0x0,0x14(%r8)
    50c9:	add    $0x1,%ecx
    50cc:	mov    %rcx,-0x90(%rbp)
    50d3:	movslq 0x1c(%r8),%rax
    50d7:	cmp    %ecx,%eax
    50d9:	jg     51d3 <compress_data+0x263>
    50df:	mov    0x10(%r8),%eax
    50e3:	add    $0x1,%eax
    50e6:	mov    %eax,0x10(%r8)
    50ea:	callq  56f0 <start_iMCU_row>
    50ef:	mov    $0x1,%eax
    50f4:	mov    -0x28(%rbp),%r15
    50f8:	mov    -0x20(%rbp),%r14
    50fc:	mov    -0x18(%rbp),%r13
    5100:	mov    -0x10(%rbp),%r12
    5104:	mov    -0x8(%rbp),%rbx
    5108:	leaveq 
    5109:	retq   
    510a:	lea    (%r15,%rbx,1),%ecx
    510e:	movslq %ecx,%rcx
    5111:	mov    (%r12,%rcx,8),%rdi
    5115:	sub    %r15d,%eax
    5118:	movslq %eax,%rsi
    511b:	shl    $0x7,%rsi
    511f:	callq  44d0 <jzero_far@plt>
    5124:	mov    -0x30(%rbp),%rdx
    5128:	mov    -0x90(%rbp),%rcx
    512f:	mov    %r15,%rax
    5132:	jmpq   5207 <F_2_562+0x4>
    5137:	movslq %ebx,%r10
    513a:	mov    0x10(%r8),%r8d
    513e:	cmp    %edx,%r8d
    5141:	jb     4fd5 <compress_data+0x65>
    5147:	add    %eax,%ecx
    5149:	movslq 0x48(%r14),%rdx
    514d:	cmp    %ecx,%edx
    514f:	jg     4fd5 <compress_data+0x65>
    5155:	mov    (%r12,%r10,8),%rdi
    5159:	movslq 0x34(%r14),%rsi
    515d:	shl    $0x7,%rsi
    5161:	mov    %rax,%r15
    5164:	callq  44d0 <jzero_far@plt>
    5169:	lea    -0x1(%rbx),%eax
    516c:	movslq %eax,%rdi
    516f:	mov    -0x58(%rbp),%r8
    5173:	mov    -0x90(%rbp),%rcx
    517a:	xor    %eax,%eax
    517c:	jmpq   522c <F_2_562+0x29>
    5181:	cmp    %r14d,%r9d
    5184:	movslq %eax,%r11
    5187:	mov    0x148(%rdi,%r11,8),%r14
    518f:	jb     523f <F_2_562+0x3c>
    5195:	movslq 0x44(%r14),%r15
    5199:	jmpq   5243 <F_2_562+0x40>
    519e:	mov    -0x68(%rbp),%rcx
    51a2:	mov    -0x90(%rbp),%rax
    51a9:	mov    %eax,0x18(%rcx)
    51ac:	mov    %r12d,0x14(%rcx)
    51b0:	mov    -0x28(%rbp),%r15
    51b4:	mov    -0x20(%rbp),%r14
    51b8:	mov    -0x18(%rbp),%r13
    51bc:	mov    -0x10(%rbp),%r12
    51c0:	mov    -0x8(%rbp),%rbx
    51c4:	xor    %eax,%eax
    51c6:	leaveq 
    51c7:	retq   
    51c8:	mov    %r10,%rax
    51cb:	mov    %rax,%rbx
    51ce:	jmpq   5062 <compress_data+0xf2>
    51d3:	mov    0x14(%r8),%r9d
    51d7:	mov    %rcx,%r13
    51da:	shl    $0x3,%r13d
    51de:	mov    %r13,-0x40(%rbp)
    51e2:	jmpq   50b4 <compress_data+0x144>
    51e7:	lea    (%rbx,%rax,1),%r8d
    51eb:	lea    -0x1(%r8),%esi
    51ef:	movslq %esi,%rsi
    51f2:	mov    (%r12,%rsi,8),%rsi
    51f6:	movswq (%rsi),%rdi
    51fa:	movslq %r8d,%rsi
    51fd:	mov    (%r12,%rsi,8),%rsi
    5201:	mov    %di,(%rsi)
    5204:	add    $0x1,%eax
    5207:	movslq 0x34(%r14),%rsi
    520b:	cmp    %eax,%esi
    520d:	jg     51e7 <compress_data+0x277>
    520f:	jmpq   501d <compress_data+0xad>
    5214:	mov    (%r12,%rdi,8),%rdx
    5218:	movswq (%rdx),%rsi
    521c:	lea    (%rbx,%rax,1),%edx
    521f:	movslq %edx,%rdx
    5222:	mov    (%r12,%rdx,8),%rdx
    5226:	mov    %si,(%rdx)
    5229:	add    $0x1,%eax
    522c:	movslq 0x34(%r14),%rdx
    5230:	cmp    %eax,%edx
    5232:	jg     5214 <F_2_562+0x11>
    5234:	mov    %r15,%rdx
    5237:	mov    %r8,%r15
    523a:	jmpq   501d <compress_data+0xad>
    523f:	movslq 0x34(%r14),%r15
    5243:	mov    %r15,-0x58(%rbp)
    5247:	imul   0x40(%r14),%r9d
    524c:	mov    %r9,-0x48(%rbp)
    5250:	mov    %rax,-0x60(%rbp)
    5254:	mov    %r10,%rax
    5257:	jmpq   503f <compress_data+0xcf>
    525c:	nopl   0x0(%rax)

0000000000005260 <compress_first_pass>:
    5260:	push   %rbp
    5261:	mov    %rsp,%rbp
    5264:	sub    $0x80,%rsp
    526b:	mov    %rdi,-0x58(%rbp)
    526f:	mov    %rsi,-0x30(%rbp)
    5273:	mov    %rbx,-0x8(%rbp)
    5277:	mov    %r12,-0x10(%rbp)
    527b:	mov    %r13,-0x18(%rbp)
    527f:	mov    %r14,-0x20(%rbp)
    5283:	mov    %r15,-0x28(%rbp)
    5287:	mov    0x1c8(%rdi),%r13
    528e:	mov    %r13,-0x60(%rbp)
    5292:	mov    0x58(%rdi),%r14
    5296:	mov    0x140(%rdi),%r12d
    529d:	add    $0xffffffff,%r12d
    52a1:	mov    %r12,-0x70(%rbp)
    52a5:	mov    %rsi,%rbx
    52a8:	mov    $0x1,%r8d
    52ae:	xor    %eax,%eax
    52b0:	jmp    532e <compress_first_pass+0xce>
    52b2:	sub    $0x10,%rsp
    52b6:	movslq %r14d,%rax
    52b9:	mov    (%rcx,%rax,8),%r15
    52bd:	mov    (%r9,%r10,8),%rdx
    52c1:	mov    0x1e8(%rdi),%rax
    52c8:	mov    0x8(%rax),%rax
    52cc:	mov    %r8d,(%rsp)
    52d0:	mov    %r14,%r8
    52d3:	shl    $0x3,%r8d
    52d7:	mov    %r15,%rcx
    52da:	xor    %r9d,%r9d
    52dd:	callq  *%rax
    52df:	add    $0x10,%rsp
    52e3:	test   %ebx,%ebx
    52e5:	jg     535c <compress_first_pass+0xfc>
    52e7:	mov    -0x68(%rbp),%rsi
    52eb:	add    $0x1,%r14d
    52ef:	mov    -0x30(%rbp),%r9
    52f3:	mov    -0x40(%rbp),%rcx
    52f7:	mov    -0x78(%rbp),%r10
    52fb:	mov    -0x38(%rbp),%r8
    52ff:	mov    -0x58(%rbp),%rdi
    5303:	cmp    %r14d,%r13d
    5306:	jg     52b2 <compress_first_pass+0x52>
    5308:	mov    -0x60(%rbp),%rax
    530c:	mov    -0x70(%rbp),%r12
    5310:	cmp    0x10(%rax),%r12d
    5314:	je     538d <compress_first_pass+0x12d>
    5316:	mov    %rax,%r13
    5319:	mov    -0x80(%rbp),%rax
    531d:	add    $0x1,%eax
    5320:	lea    0x60(%rsi),%r14
    5324:	mov    -0x30(%rbp),%rbx
    5328:	mov    $0x1,%r8d
    532e:	mov    %r14,-0x68(%rbp)
    5332:	movslq 0x4c(%rdi),%rcx
    5336:	cmp    %eax,%ecx
    5338:	jg     53c0 <compress_first_pass+0x160>
    533e:	mov    %rbx,%rsi
    5341:	callq  5530 <compress_output>
    5346:	mov    -0x28(%rbp),%r15
    534a:	mov    -0x20(%rbp),%r14
    534e:	mov    -0x18(%rbp),%r13
    5352:	mov    -0x10(%rbp),%r12
    5356:	mov    -0x8(%rbp),%rbx
    535a:	leaveq 
    535b:	retq   
    535c:	lea    (%r15,%r12,1),%r13
    5360:	movslq %ebx,%rsi
    5363:	shl    $0x7,%rsi
    5367:	mov    %r15,%rax
    536a:	mov    %r13,%r15
    536d:	mov    %rax,%r13
    5370:	mov    %r15,%rdi
    5373:	callq  44d0 <jzero_far@plt>
    5378:	movswq -0x80(%r13,%r12,1),%rdx
    537e:	mov    -0x50(%rbp),%r13
    5382:	mov    -0x68(%rbp),%rsi
    5386:	xor    %eax,%eax
    5388:	jmpq   542a <compress_first_pass+0x1ca>
    538d:	mov    -0x48(%rbp),%r15
    5391:	lea    -0x1(%r15),%eax
    5395:	movslq %eax,%r14
    5398:	shl    $0x7,%r14
    539c:	lea    (%r8,%rbx,1),%eax
    53a0:	mov    %eax,%r8d
    53a3:	shl    $0x7,%r8
    53a7:	mov    %r8,-0x48(%rbp)
    53ab:	xor    %edx,%edx
    53ad:	div    %r15d
    53b0:	mov    %r15,%rdx
    53b3:	shl    $0x7,%rdx
    53b7:	mov    %rdx,-0x50(%rbp)
    53bb:	jmpq   546a <compress_first_pass+0x20a>
    53c0:	movslq %eax,%r15
    53c3:	mov    %r15,-0x78(%rbp)
    53c7:	mov    0x70(%r13,%r15,8),%rsi
    53cc:	mov    0xc(%r14),%ecx
    53d0:	mov    %rcx,%rdx
    53d3:	imul   0x10(%r13),%edx
    53d8:	mov    0x8(%rdi),%r9
    53dc:	mov    0x40(%r9),%r9
    53e0:	mov    %rax,-0x80(%rbp)
    53e4:	callq  *%r9
    53e7:	mov    %rax,-0x40(%rbp)
    53eb:	mov    0x10(%r13),%ecx
    53ef:	cmp    %r12d,%ecx
    53f2:	jb     5484 <compress_first_pass+0x224>
    53f8:	mov    %rax,%rcx
    53fb:	mov    %r14,%rsi
    53fe:	mov    %rbx,%r9
    5401:	mov    %r15,%r10
    5404:	mov    0x20(%rsi),%eax
    5407:	mov    0xc(%rsi),%edi
    540a:	xor    %edx,%edx
    540c:	div    %edi
    540e:	test   %edx,%edx
    5410:	je     54c9 <compress_first_pass+0x269>
    5416:	mov    %rdx,%r13
    5419:	jmp    5494 <compress_first_pass+0x234>
    541b:	movslq %eax,%rcx
    541e:	shl    $0x7,%rcx
    5422:	mov    %dx,(%r15,%rcx,1)
    5427:	add    $0x1,%eax
    542a:	cmp    %eax,%ebx
    542c:	jg     541b <compress_first_pass+0x1bb>
    542e:	jmpq   52eb <compress_first_pass+0x8b>
    5433:	movslq %ecx,%rdx
    5436:	shl    $0x7,%rdx
    543a:	mov    %ax,(%r12,%rdx,1)
    543f:	add    $0x1,%ecx
    5442:	cmp    %ecx,%r15d
    5445:	jg     5433 <compress_first_pass+0x1d3>
    5447:	add    %r10,%rbx
    544a:	add    %r10,%r12
    544d:	add    $0x1,%edi
    5450:	cmp    %r13d,%edi
    5453:	jb     54cf <F_0_331+0x2>
    5455:	lea    0x1(%r9),%eax
    5459:	mov    %r13,%rcx
    545c:	mov    %rax,%r13
    545f:	mov    %rcx,%rax
    5462:	mov    -0x48(%rbp),%r8
    5466:	mov    -0x40(%rbp),%rcx
    546a:	movslq 0xc(%rsi),%rdx
    546e:	cmp    %r13d,%edx
    5471:	jg     54dc <F_0_331+0xf>
    5473:	mov    -0x60(%rbp),%r13
    5477:	mov    -0x70(%rbp),%r12
    547b:	mov    -0x58(%rbp),%rdi
    547f:	jmpq   5319 <compress_first_pass+0xb9>
    5484:	mov    %rax,%rcx
    5487:	mov    %r14,%rsi
    548a:	mov    %rbx,%r9
    548d:	mov    %r15,%r10
    5490:	movslq 0xc(%rsi),%r13
    5494:	mov    %r13,-0x50(%rbp)
    5498:	mov    0x1c(%rsi),%r8d
    549c:	mov    %r8,-0x38(%rbp)
    54a0:	mov    %r8,%r12
    54a3:	shl    $0x7,%r12
    54a7:	movslq 0x8(%rsi),%rbx
    54ab:	mov    %rbx,-0x48(%rbp)
    54af:	xor    %edx,%edx
    54b1:	mov    %r8,%rax
    54b4:	div    %ebx
    54b6:	test   %edx,%edx
    54b8:	jg     5517 <F_0_331+0x4a>
    54ba:	mov    %rdx,%rbx
    54bd:	xor    %r14d,%r14d
    54c0:	mov    -0x58(%rbp),%rdi
    54c4:	jmpq   5303 <compress_first_pass+0xa3>
    54c9:	movslq 0xc(%rsi),%r13
    54cd:	jmp    5494 <compress_first_pass+0x234>
    54cf:	movswq (%rbx,%r14,1),%rax
    54d4:	mov    %r8,%rcx
    54d7:	jmpq   5442 <compress_first_pass+0x1e2>
    54dc:	lea    -0x1(%r13),%edx
    54e0:	movslq %edx,%rdx
    54e3:	mov    (%rcx,%rdx,8),%rbx
    54e7:	movslq %r13d,%rdx
    54ea:	mov    (%rcx,%rdx,8),%r12
    54ee:	mov    %r12,%rdi
    54f1:	mov    %r13,-0x78(%rbp)
    54f5:	mov    %r8,%rsi
    54f8:	mov    %rax,%r13
    54fb:	callq  44d0 <jzero_far@plt>
    5500:	mov    -0x50(%rbp),%r10
    5504:	mov    -0x78(%rbp),%r9
    5508:	mov    -0x68(%rbp),%rsi
    550c:	xor    %r8d,%r8d
    550f:	mov    %r8,%rdi
    5512:	jmpq   5450 <compress_first_pass+0x1f0>
    5517:	sub    %edx,%ebx
    5519:	xor    %r14d,%r14d
    551c:	mov    -0x58(%rbp),%rdi
    5520:	jmpq   5303 <compress_first_pass+0xa3>
    5525:	data16 nopw %cs:0x0(%rax,%rax,1)

0000000000005530 <compress_output>:
    5530:	push   %rbp
    5531:	mov    %rsp,%rbp
    5534:	sub    $0x50,%rsp
    5538:	mov    %rbx,-0x8(%rbp)
    553c:	mov    %r12,-0x10(%rbp)
    5540:	mov    %r13,-0x18(%rbp)
    5544:	mov    %r14,-0x20(%rbp)
    5548:	mov    %r15,-0x28(%rbp)
    554c:	mov    0x1c8(%rdi),%rbx
    5553:	mov    %rbx,-0x30(%rbp)
    5557:	mov    %rdi,%r12
    555a:	xor    %r13d,%r13d
    555d:	mov    %r13,%r14
    5560:	jmp    559a <compress_output+0x6a>
    5562:	movslq %r14d,%r15
    5565:	mov    0x148(%r12,%r15,8),%rcx
    556d:	movslq 0x4(%rcx),%rax
    5571:	mov    0x70(%rbx,%rax,8),%rsi
    5576:	mov    0xc(%rcx),%ecx
    5579:	mov    %rcx,%rdx
    557c:	imul   0x10(%rbx),%edx
    5580:	mov    0x8(%r12),%rax
    5585:	mov    0x40(%rax),%rax
    5589:	mov    %r12,%rdi
    558c:	mov    %r13,%r8
    558f:	callq  *%rax
    5591:	mov    %rax,-0x50(%rbp,%r15,8)
    5596:	add    $0x1,%r14d
    559a:	movslq 0x144(%r12),%rax
    55a2:	cmp    %r14d,%eax
    55a5:	jg     5562 <compress_output+0x32>
    55a7:	movslq 0x18(%rbx),%r15
    55ab:	lea    0x20(%rbx),%r14
    55af:	jmpq   5635 <compress_output+0x105>
    55b4:	movslq %ecx,%rdi
    55b7:	mov    %rdx,(%r14,%rdi,8)
    55bb:	add    $0x80,%rdx
    55c2:	add    $0x1,%ecx
    55c5:	add    $0x1,%esi
    55c8:	movslq 0x34(%r10),%rdi
    55cc:	cmp    %esi,%edi
    55ce:	jg     55b4 <compress_output+0x84>
    55d0:	add    $0x1,%ebx
    55d3:	movslq 0x38(%r10),%rdx
    55d7:	cmp    %ebx,%edx
    55d9:	jg     566e <F_0_337+0x28>
    55df:	add    $0x1,%r8d
    55e3:	movslq 0x144(%r12),%rdx
    55eb:	cmp    %r8d,%edx
    55ee:	jg     5689 <F_0_337+0x43>
    55f4:	mov    0x1f0(%r12),%rcx
    55fc:	mov    0x8(%rcx),%rcx
    5600:	mov    %rax,%rbx
    5603:	mov    %r12,%rdi
    5606:	mov    %r14,%rsi
    5609:	callq  *%rcx
    560b:	test   %eax,%eax
    560d:	je     56ab <F_0_337+0x65>
    5613:	lea    0x1(%rbx),%eax
    5616:	mov    0x168(%r12),%ecx
    561e:	cmp    %eax,%ecx
    5620:	ja     56cf <F_0_337+0x89>
    5626:	mov    -0x30(%rbp),%rbx
    562a:	movl   $0x0,0x14(%rbx)
    5631:	add    $0x1,%r15d
    5635:	movslq 0x1c(%rbx),%rax
    5639:	cmp    %r15d,%eax
    563c:	jg     56da <F_0_337+0x94>
    5642:	mov    0x10(%rbx),%eax
    5645:	add    $0x1,%eax
    5648:	mov    %eax,0x10(%rbx)
    564b:	mov    %r12,%rdi
    564e:	callq  56f0 <start_iMCU_row>
    5653:	mov    $0x1,%eax
    5658:	mov    -0x28(%rbp),%r15
    565c:	mov    -0x20(%rbp),%r14
    5660:	mov    -0x18(%rbp),%r13
    5664:	mov    -0x10(%rbp),%r12
    5668:	mov    -0x8(%rbp),%rbx
    566c:	leaveq 
    566d:	retq   
    566e:	lea    (%r15,%rbx,1),%edx
    5672:	movslq %edx,%rdx
    5675:	mov    -0x50(%rbp,%r11,8),%rsi
    567a:	mov    (%rsi,%rdx,8),%rdx
    567e:	add    %r9,%rdx
    5681:	mov    %r13,%rsi
    5684:	jmpq   55c8 <compress_output+0x98>
    5689:	movslq %r8d,%r11
    568c:	mov    0x148(%r12,%r11,8),%r10
    5694:	mov    %rax,%rdx
    5697:	imul   0x34(%r10),%edx
    569c:	mov    %edx,%r9d
    569f:	shl    $0x7,%r9
    56a3:	mov    %r13,%rbx
    56a6:	jmpq   55d3 <compress_output+0xa3>
    56ab:	mov    -0x30(%rbp),%rax
    56af:	mov    %r15d,0x18(%rax)
    56b3:	mov    %ebx,0x14(%rax)
    56b6:	mov    %r13,%rax
    56b9:	mov    -0x28(%rbp),%r15
    56bd:	mov    -0x20(%rbp),%r14
    56c1:	mov    -0x18(%rbp),%r13
    56c5:	mov    -0x10(%rbp),%r12
    56c9:	mov    -0x8(%rbp),%rbx
    56cd:	leaveq 
    56ce:	retq   
    56cf:	mov    %r13,%rcx
    56d2:	mov    %rcx,%r8
    56d5:	jmpq   55e3 <compress_output+0xb3>
    56da:	mov    0x14(%rbx),%eax
    56dd:	jmpq   5616 <compress_output+0xe6>
    56e2:	data16 nopw %cs:0x0(%rax,%rax,1)
    56ed:	nopl   (%rax)

00000000000056f0 <start_iMCU_row>:
    56f0:	push   %rbp
    56f1:	mov    %rsp,%rbp
    56f4:	mov    0x1c8(%rdi),%rcx
    56fb:	movslq 0x144(%rdi),%rax
    5702:	cmp    $0x1,%eax
    5705:	jg     5725 <start_iMCU_row+0x35>
    5707:	mov    0x140(%rdi),%eax
    570d:	add    $0xffffffff,%eax
    5710:	cmp    0x10(%rcx),%eax
    5713:	ja     573c <start_iMCU_row+0x4c>
    5715:	mov    0x148(%rdi),%rax
    571c:	movslq 0x48(%rax),%rax
    5720:	mov    %eax,0x1c(%rcx)
    5723:	jmp    572c <start_iMCU_row+0x3c>
    5725:	movl   $0x1,0x1c(%rcx)
    572c:	movl   $0x0,0x14(%rcx)
    5733:	movl   $0x0,0x18(%rcx)
    573a:	leaveq 
    573b:	retq   
    573c:	mov    0x148(%rdi),%rax
    5743:	movslq 0xc(%rax),%rax
    5747:	mov    %eax,0x1c(%rcx)
    574a:	jmp    572c <start_iMCU_row+0x3c>
    574c:	nopl   0x0(%rax)

0000000000005750 <start_pass_coef>:
    5750:	push   %rbp
    5751:	mov    %rsp,%rbp
    5754:	sub    $0x20,%rsp
    5758:	mov    %r13,-0x8(%rbp)
    575c:	mov    %r14,-0x10(%rbp)
    5760:	mov    %r15,-0x18(%rbp)
    5764:	mov    %rsi,%r14
    5767:	mov    0x1c8(%rdi),%r13
    576e:	movl   $0x0,0x10(%r13)
    5776:	mov    %rdi,%r15
    5779:	callq  56f0 <start_iMCU_row>
    577e:	cmp    $0x1,%r14d
    5782:	jbe    57c7 <start_pass_coef+0x77>
    5784:	cmp    $0x2,%r14d
    5788:	je     57ef <start_pass_coef+0x9f>
    578a:	cmp    $0x3,%r14d
    578e:	jne    57cc <start_pass_coef+0x7c>
    5790:	mov    0x70(%r13),%rax
    5794:	test   %rax,%rax
    5797:	jne    57ae <start_pass_coef+0x5e>
    5799:	mov    (%r15),%rax
    579c:	movl   $0x4,0x28(%rax)
    57a3:	mov    (%r15),%rax
    57a6:	mov    (%rax),%rax
    57a9:	mov    %r15,%rdi
    57ac:	callq  *%rax
    57ae:	lea    -0x555(%rip),%rax        # 5260 <compress_first_pass>
    57b5:	mov    %rax,0x8(%r13)
    57b9:	mov    -0x18(%rbp),%r15
    57bd:	mov    -0x10(%rbp),%r14
    57c1:	mov    -0x8(%rbp),%r13
    57c5:	leaveq 
    57c6:	retq   
    57c7:	test   %r14d,%r14d
    57ca:	je     5826 <F_0_344+0xc>
    57cc:	mov    (%r15),%rax
    57cf:	movl   $0x4,0x28(%rax)
    57d6:	mov    (%r15),%rax
    57d9:	mov    (%rax),%rax
    57dc:	mov    %r15,%rdi
    57df:	callq  *%rax
    57e1:	mov    -0x18(%rbp),%r15
    57e5:	mov    -0x10(%rbp),%r14
    57e9:	mov    -0x8(%rbp),%r13
    57ed:	leaveq 
    57ee:	retq   
    57ef:	mov    0x70(%r13),%rax
    57f3:	test   %rax,%rax
    57f6:	jne    580d <start_pass_coef+0xbd>
    57f8:	mov    (%r15),%rax
    57fb:	movl   $0x4,0x28(%rax)
    5802:	mov    (%r15),%rax
    5805:	mov    (%rax),%rax
    5808:	mov    %r15,%rdi
    580b:	callq  *%rax
    580d:	lea    -0x2e4(%rip),%rax        # 5530 <compress_output>
    5814:	mov    %rax,0x8(%r13)
    5818:	mov    -0x18(%rbp),%r15
    581c:	mov    -0x10(%rbp),%r14
    5820:	mov    -0x8(%rbp),%r13
    5824:	leaveq 
    5825:	retq   
    5826:	mov    0x70(%r13),%rax
    582a:	test   %rax,%rax
    582d:	je     5844 <F_0_344+0x2a>
    582f:	mov    (%r15),%rax
    5832:	movl   $0x4,0x28(%rax)
    5839:	mov    (%r15),%rax
    583c:	mov    (%rax),%rax
    583f:	mov    %r15,%rdi
    5842:	callq  *%rax
    5844:	lea    -0x8db(%rip),%rax        # 4f70 <compress_data>
    584b:	mov    %rax,0x8(%r13)
    584f:	mov    -0x18(%rbp),%r15
    5853:	mov    -0x10(%rbp),%r14
    5857:	mov    -0x8(%rbp),%r13
    585b:	leaveq 
    585c:	retq   
    585d:	nopl   (%rax)

0000000000005860 <jinit_color_converter>:
    5860:	push   %rbp
    5861:	mov    %rsp,%rbp
    5864:	sub    $0x30,%rsp
    5868:	mov    %r15,-0x30(%rbp)
    586c:	mov    0x8(%rdi),%rax
    5870:	mov    (%rax),%rax
    5873:	mov    $0x1,%esi
    5878:	mov    $0x18,%edx
    587d:	mov    %rdi,%r15
    5880:	callq  *%rax
    5882:	mov    %rax,0x1d8(%r15)
    5889:	lea    0x1c90(%rip),%rcx        # 7520 <null_method>
    5890:	mov    %rcx,(%rax)
    5893:	lea    0x43902(%rip),%rcx        # 4919c <rgb_pixelsize>
    589a:	mov    0x3c(%r15),%edi
    589e:	lea    -0x1(%rdi),%edx
    58a1:	cmp    $0xe,%edx
    58a4:	ja     58eb <jinit_color_converter+0x8b>
    58a6:	lea    0x4375b(%rip),%rsi        # 49008 <_fini+0xd28>
    58ad:	movslq (%rsi,%rdx,4),%rdx
    58b1:	add    %rsi,%rdx
    58b4:	jmpq   *%rdx
    58b6:	movslq 0x38(%r15),%rdx
    58ba:	cmp    $0x4,%edx
    58bd:	je     591d <jinit_color_converter+0xbd>
    58bf:	mov    (%r15),%rcx
    58c2:	movl   $0x9,0x28(%rcx)
    58c9:	mov    (%r15),%rcx
    58cc:	mov    (%rcx),%rcx
    58cf:	mov    %r15,%rdi
    58d2:	mov    %r14,-0x28(%rbp)
    58d6:	mov    %rax,%r14
    58d9:	callq  *%rcx
    58db:	mov    %r14,%rax
    58de:	lea    0x438b7(%rip),%rcx        # 4919c <rgb_pixelsize>
    58e5:	mov    -0x28(%rbp),%r14
    58e9:	jmp    591d <jinit_color_converter+0xbd>
    58eb:	movslq 0x38(%r15),%rdx
    58ef:	test   %edx,%edx
    58f1:	jg     591d <jinit_color_converter+0xbd>
    58f3:	mov    (%r15),%rcx
    58f6:	movl   $0x9,0x28(%rcx)
    58fd:	mov    (%r15),%rcx
    5900:	mov    (%rcx),%rcx
    5903:	mov    %r15,%rdi
    5906:	mov    %r14,-0x28(%rbp)
    590a:	mov    %rax,%r14
    590d:	callq  *%rcx
    590f:	mov    %r14,%rax
    5912:	lea    0x43883(%rip),%rcx        # 4919c <rgb_pixelsize>
    5919:	mov    -0x28(%rbp),%r14
    591d:	lea    0x1a4c(%rip),%rdx        # 7370 <null_convert>
    5924:	mov    0x50(%r15),%r9d
    5928:	lea    -0x1(%r9),%edi
    592c:	cmp    $0x4,%edi
    592f:	jbe    5a1c <jinit_color_converter+0x1bc>
    5935:	cmp    0x3c(%r15),%r9d
    5939:	je     5a9e <jinit_color_converter+0x23e>
    593f:	mov    (%r15),%rcx
    5942:	movl   $0x1b,0x28(%rcx)
    5949:	mov    (%r15),%rcx
    594c:	mov    (%rcx),%rcx
    594f:	mov    %r15,%rdi
    5952:	mov    %rax,%r15
    5955:	callq  *%rcx
    5957:	mov    %r15,%rax
    595a:	lea    0x1a0f(%rip),%rdx        # 7370 <null_convert>
    5961:	mov    %rdx,0x8(%rax)
    5965:	mov    -0x30(%rbp),%r15
    5969:	leaveq 
    596a:	retq   
    596b:	movslq 0x38(%r15),%rdx
    596f:	cmp    $0x1,%edx
    5972:	je     591d <jinit_color_converter+0xbd>
    5974:	mov    (%r15),%rcx
    5977:	movl   $0x9,0x28(%rcx)
    597e:	mov    (%r15),%rcx
    5981:	mov    (%rcx),%rcx
    5984:	mov    %r15,%rdi
    5987:	mov    %r14,-0x18(%rbp)
    598b:	mov    %rax,%r14
    598e:	callq  *%rcx
    5990:	mov    %r14,%rax
    5993:	lea    0x43802(%rip),%rcx        # 4919c <rgb_pixelsize>
    599a:	mov    -0x18(%rbp),%r14
    599e:	jmpq   591d <jinit_color_converter+0xbd>
    59a3:	movslq (%rcx,%rdi,4),%rdx
    59a7:	cmp    0x38(%r15),%edx
    59ab:	je     591d <jinit_color_converter+0xbd>
    59b1:	mov    (%r15),%rcx
    59b4:	movl   $0x9,0x28(%rcx)
    59bb:	mov    (%r15),%rcx
    59be:	mov    (%rcx),%rcx
    59c1:	mov    %r15,%rdi
    59c4:	mov    %r14,-0x20(%rbp)
    59c8:	mov    %rax,%r14
    59cb:	callq  *%rcx
    59cd:	mov    %r14,%rax
    59d0:	lea    0x437c5(%rip),%rcx        # 4919c <rgb_pixelsize>
    59d7:	mov    -0x20(%rbp),%r14
    59db:	jmpq   591d <jinit_color_converter+0xbd>
    59e0:	movslq 0x38(%r15),%rdx
    59e4:	cmp    $0x3,%edx
    59e7:	je     591d <jinit_color_converter+0xbd>
    59ed:	mov    (%r15),%rcx
    59f0:	movl   $0x9,0x28(%rcx)
    59f7:	mov    (%r15),%rcx
    59fa:	mov    (%rcx),%rcx
    59fd:	mov    %r15,%rdi
    5a00:	mov    %r14,-0x20(%rbp)
    5a04:	mov    %rax,%r14
    5a07:	callq  *%rcx
    5a09:	mov    %r14,%rax
    5a0c:	lea    0x43789(%rip),%rcx        # 4919c <rgb_pixelsize>
    5a13:	mov    -0x20(%rbp),%r14
    5a17:	jmpq   591d <jinit_color_converter+0xbd>
    5a1c:	lea    0x154d(%rip),%rsi        # 6f70 <rgb_ycc_start>
    5a23:	lea    0x4361a(%rip),%r8        # 49044 <_fini+0xd64>
    5a2a:	movslq (%r8,%rdi,4),%rdi
    5a2e:	add    %r8,%rdi
    5a31:	jmpq   *%rdi
    5a33:	movslq 0x4c(%r15),%rcx
    5a37:	cmp    $0x4,%ecx
    5a3a:	je     5a6d <jinit_color_converter+0x20d>
    5a3c:	mov    (%r15),%rcx
    5a3f:	movl   $0xa,0x28(%rcx)
    5a46:	mov    (%r15),%rcx
    5a49:	mov    (%rcx),%rcx
    5a4c:	mov    %r15,%rdi
    5a4f:	mov    %r14,-0x18(%rbp)
    5a53:	mov    %rax,%r14
    5a56:	callq  *%rcx
    5a58:	mov    %r14,%rax
    5a5b:	lea    0x190e(%rip),%rdx        # 7370 <null_convert>
    5a62:	lea    0x1507(%rip),%rsi        # 6f70 <rgb_ycc_start>
    5a69:	mov    -0x18(%rbp),%r14
    5a6d:	mov    0x3c(%r15),%ecx
    5a71:	cmp    $0x4,%ecx
    5a74:	je     5d21 <jinit_color_converter+0x4c1>
    5a7a:	cmp    $0x5,%ecx
    5a7d:	je     5d35 <jinit_color_converter+0x4d5>
    5a83:	mov    (%r15),%rax
    5a86:	movl   $0x1b,0x28(%rax)
    5a8d:	mov    (%r15),%rax
    5a90:	mov    (%rax),%rax
    5a93:	mov    %r15,%rdi
    5a96:	callq  *%rax
    5a98:	mov    -0x30(%rbp),%r15
    5a9c:	leaveq 
    5a9d:	retq   
    5a9e:	movslq 0x38(%r15),%rcx
    5aa2:	cmp    0x4c(%r15),%ecx
    5aa6:	jne    593f <jinit_color_converter+0xdf>
    5aac:	jmpq   5961 <jinit_color_converter+0x101>
    5ab1:	movslq 0x4c(%r15),%rcx
    5ab5:	cmp    $0x1,%ecx
    5ab8:	je     5add <jinit_color_converter+0x27d>
    5aba:	mov    (%r15),%rcx
    5abd:	movl   $0xa,0x28(%rcx)
    5ac4:	mov    (%r15),%rcx
    5ac7:	mov    (%rcx),%rcx
    5aca:	mov    %r15,%rdi
    5acd:	mov    %r14,-0x8(%rbp)
    5ad1:	mov    %rax,%r14
    5ad4:	callq  *%rcx
    5ad6:	mov    %r14,%rax
    5ad9:	mov    -0x8(%rbp),%r14
    5add:	lea    0x181c(%rip),%rdx        # 7300 <grayscale_convert>
    5ae4:	mov    0x3c(%r15),%ecx
    5ae8:	cmp    $0x1,%ecx
    5aeb:	je     5d3f <jinit_color_converter+0x4df>
    5af1:	cmp    $0x2,%ecx
    5af4:	je     5d49 <jinit_color_converter+0x4e9>
    5afa:	cmp    $0x6,%ecx
    5afd:	je     5d49 <jinit_color_converter+0x4e9>
    5b03:	cmp    $0x7,%ecx
    5b06:	je     5d49 <jinit_color_converter+0x4e9>
    5b0c:	cmp    $0x8,%ecx
    5b0f:	je     5d49 <jinit_color_converter+0x4e9>
    5b15:	cmp    $0x9,%ecx
    5b18:	je     5d49 <jinit_color_converter+0x4e9>
    5b1e:	cmp    $0xa,%ecx
    5b21:	je     5d49 <jinit_color_converter+0x4e9>
    5b27:	cmp    $0xb,%ecx
    5b2a:	je     5d49 <jinit_color_converter+0x4e9>
    5b30:	cmp    $0xc,%ecx
    5b33:	je     5d49 <jinit_color_converter+0x4e9>
    5b39:	cmp    $0xd,%ecx
    5b3c:	je     5d49 <jinit_color_converter+0x4e9>
    5b42:	cmp    $0xe,%ecx
    5b45:	je     5d49 <jinit_color_converter+0x4e9>
    5b4b:	cmp    $0xf,%ecx
    5b4e:	je     5d49 <jinit_color_converter+0x4e9>
    5b54:	cmp    $0x3,%ecx
    5b57:	je     5d74 <jinit_color_converter+0x514>
    5b5d:	mov    (%r15),%rax
    5b60:	movl   $0x1b,0x28(%rax)
    5b67:	mov    (%r15),%rax
    5b6a:	mov    (%rax),%rax
    5b6d:	mov    %r15,%rdi
    5b70:	callq  *%rax
    5b72:	mov    -0x30(%rbp),%r15
    5b76:	leaveq 
    5b77:	retq   
    5b78:	movslq 0x4c(%r15),%rsi
    5b7c:	cmp    $0x3,%esi
    5b7f:	je     5bb2 <jinit_color_converter+0x352>
    5b81:	mov    (%r15),%rcx
    5b84:	movl   $0xa,0x28(%rcx)
    5b8b:	mov    (%r15),%rcx
    5b8e:	mov    (%rcx),%rcx
    5b91:	mov    %r15,%rdi
    5b94:	mov    %r14,-0x8(%rbp)
    5b98:	mov    %rax,%r14
    5b9b:	callq  *%rcx
    5b9d:	mov    %r14,%rax
    5ba0:	lea    0x17c9(%rip),%rdx        # 7370 <null_convert>
    5ba7:	lea    0x435ee(%rip),%rcx        # 4919c <rgb_pixelsize>
    5bae:	mov    -0x8(%rbp),%r14
    5bb2:	mov    0x3c(%r15),%edi
    5bb6:	lea    0x43513(%rip),%rsi        # 490d0 <rgb_red>
    5bbd:	movslq (%rsi,%rdi,4),%rsi
    5bc1:	test   %esi,%esi
    5bc3:	jne    5d7e <jinit_color_converter+0x51e>
    5bc9:	lea    0x43544(%rip),%rsi        # 49114 <rgb_green>
    5bd0:	movslq (%rsi,%rdi,4),%rsi
    5bd4:	cmp    $0x1,%esi
    5bd7:	jne    5d7e <jinit_color_converter+0x51e>
    5bdd:	lea    0x43574(%rip),%rsi        # 49158 <rgb_blue>
    5be4:	movslq (%rsi,%rdi,4),%rsi
    5be8:	cmp    $0x2,%esi
    5beb:	jne    5d7e <jinit_color_converter+0x51e>
    5bf1:	movslq (%rcx,%rdi,4),%rcx
    5bf5:	cmp    $0x3,%ecx
    5bf8:	jne    5d7e <jinit_color_converter+0x51e>
    5bfe:	mov    %rdx,0x8(%rax)
    5c02:	mov    -0x30(%rbp),%r15
    5c06:	leaveq 
    5c07:	retq   
    5c08:	movslq 0x4c(%r15),%rcx
    5c0c:	cmp    $0x3,%ecx
    5c0f:	je     5c3b <jinit_color_converter+0x3db>
    5c11:	mov    (%r15),%rcx
    5c14:	movl   $0xa,0x28(%rcx)
    5c1b:	mov    (%r15),%rcx
    5c1e:	mov    (%rcx),%rcx
    5c21:	mov    %r15,%rdi
    5c24:	mov    %r14,-0x10(%rbp)
    5c28:	mov    %rax,%r14
    5c2b:	callq  *%rcx
    5c2d:	mov    %r14,%rax
    5c30:	lea    0x1739(%rip),%rdx        # 7370 <null_convert>
    5c37:	mov    -0x10(%rbp),%r14
    5c3b:	mov    0x3c(%r15),%ecx
    5c3f:	cmp    $0x2,%ecx
    5c42:	je     5dec <jinit_color_converter+0x58c>
    5c48:	cmp    $0x6,%ecx
    5c4b:	je     5dec <jinit_color_converter+0x58c>
    5c51:	cmp    $0x7,%ecx
    5c54:	je     5dec <jinit_color_converter+0x58c>
    5c5a:	cmp    $0x8,%ecx
    5c5d:	je     5dec <jinit_color_converter+0x58c>
    5c63:	cmp    $0x9,%ecx
    5c66:	je     5dec <jinit_color_converter+0x58c>
    5c6c:	cmp    $0xa,%ecx
    5c6f:	je     5dec <jinit_color_converter+0x58c>
    5c75:	cmp    $0xb,%ecx
    5c78:	je     5dec <jinit_color_converter+0x58c>
    5c7e:	cmp    $0xc,%ecx
    5c81:	je     5dec <jinit_color_converter+0x58c>
    5c87:	cmp    $0xd,%ecx
    5c8a:	je     5dec <jinit_color_converter+0x58c>
    5c90:	cmp    $0xe,%ecx
    5c93:	je     5dec <jinit_color_converter+0x58c>
    5c99:	cmp    $0xf,%ecx
    5c9c:	je     5dec <jinit_color_converter+0x58c>
    5ca2:	cmp    $0x3,%ecx
    5ca5:	je     5e13 <jinit_color_converter+0x5b3>
    5cab:	mov    (%r15),%rax
    5cae:	movl   $0x1b,0x28(%rax)
    5cb5:	mov    (%r15),%rax
    5cb8:	mov    (%rax),%rax
    5cbb:	mov    %r15,%rdi
    5cbe:	callq  *%rax
    5cc0:	mov    -0x30(%rbp),%r15
    5cc4:	leaveq 
    5cc5:	retq   
    5cc6:	movslq 0x4c(%r15),%rcx
    5cca:	cmp    $0x4,%ecx
    5ccd:	je     5cf9 <jinit_color_converter+0x499>
    5ccf:	mov    (%r15),%rcx
    5cd2:	movl   $0xa,0x28(%rcx)
    5cd9:	mov    (%r15),%rcx
    5cdc:	mov    (%rcx),%rcx
    5cdf:	mov    %r15,%rdi
    5ce2:	mov    %r14,-0x10(%rbp)
    5ce6:	mov    %rax,%r14
    5ce9:	callq  *%rcx
    5ceb:	mov    %r14,%rax
    5cee:	lea    0x167b(%rip),%rdx        # 7370 <null_convert>
    5cf5:	mov    -0x10(%rbp),%r14
    5cf9:	mov    0x3c(%r15),%ecx
    5cfd:	cmp    $0x4,%ecx
    5d00:	je     5e1d <jinit_color_converter+0x5bd>
    5d06:	mov    (%r15),%rax
    5d09:	movl   $0x1b,0x28(%rax)
    5d10:	mov    (%r15),%rax
    5d13:	mov    (%rax),%rax
    5d16:	mov    %r15,%rdi
    5d19:	callq  *%rax
    5d1b:	mov    -0x30(%rbp),%r15
    5d1f:	leaveq 
    5d20:	retq   
    5d21:	mov    %rsi,(%rax)
    5d24:	lea    0x1455(%rip),%rcx        # 7180 <cmyk_ycck_convert>
    5d2b:	mov    %rcx,0x8(%rax)
    5d2f:	mov    -0x30(%rbp),%r15
    5d33:	leaveq 
    5d34:	retq   
    5d35:	mov    %rdx,0x8(%rax)
    5d39:	mov    -0x30(%rbp),%r15
    5d3d:	leaveq 
    5d3e:	retq   
    5d3f:	mov    %rdx,0x8(%rax)
    5d43:	mov    -0x30(%rbp),%r15
    5d47:	leaveq 
    5d48:	retq   
    5d49:	mov    %rax,%r15
    5d4c:	callq  3d5b0 <jsimd_can_rgb_gray>
    5d51:	test   %eax,%eax
    5d53:	jne    5e27 <jinit_color_converter+0x5c7>
    5d59:	lea    0x1210(%rip),%rax        # 6f70 <rgb_ycc_start>
    5d60:	mov    %rax,(%r15)
    5d63:	lea    0x1376(%rip),%rax        # 70e0 <rgb_gray_convert>
    5d6a:	mov    %rax,0x8(%r15)
    5d6e:	mov    -0x30(%rbp),%r15
    5d72:	leaveq 
    5d73:	retq   
    5d74:	mov    %rdx,0x8(%rax)
    5d78:	mov    -0x30(%rbp),%r15
    5d7c:	leaveq 
    5d7d:	retq   
    5d7e:	mov    0x3c(%r15),%ecx
    5d82:	cmp    $0x2,%ecx
    5d85:	je     5e38 <jinit_color_converter+0x5d8>
    5d8b:	cmp    $0x6,%ecx
    5d8e:	je     5e38 <jinit_color_converter+0x5d8>
    5d94:	cmp    $0x7,%ecx
    5d97:	je     5e38 <jinit_color_converter+0x5d8>
    5d9d:	cmp    $0x8,%ecx
    5da0:	je     5e38 <jinit_color_converter+0x5d8>
    5da6:	cmp    $0x9,%ecx
    5da9:	je     5e38 <jinit_color_converter+0x5d8>
    5daf:	cmp    $0xa,%ecx
    5db2:	je     5e38 <jinit_color_converter+0x5d8>
    5db8:	cmp    $0xb,%ecx
    5dbb:	je     5e38 <jinit_color_converter+0x5d8>
    5dbd:	cmp    $0xc,%ecx
    5dc0:	je     5e38 <jinit_color_converter+0x5d8>
    5dc2:	cmp    $0xd,%ecx
    5dc5:	je     5e38 <jinit_color_converter+0x5d8>
    5dc7:	cmp    $0xe,%ecx
    5dca:	je     5e38 <jinit_color_converter+0x5d8>
    5dcc:	cmp    $0xf,%ecx
    5dcf:	je     5e38 <jinit_color_converter+0x5d8>
    5dd1:	mov    (%r15),%rax
    5dd4:	movl   $0x1b,0x28(%rax)
    5ddb:	mov    (%r15),%rax
    5dde:	mov    (%rax),%rax
    5de1:	mov    %r15,%rdi
    5de4:	callq  *%rax
    5de6:	mov    -0x30(%rbp),%r15
    5dea:	leaveq 
    5deb:	retq   
    5dec:	mov    %rax,%r15
    5def:	callq  3d570 <jsimd_can_rgb_ycc>
    5df4:	test   %eax,%eax
    5df6:	jne    5e49 <jinit_color_converter+0x5e9>
    5df8:	lea    0x1171(%rip),%rax        # 6f70 <rgb_ycc_start>
    5dff:	mov    %rax,(%r15)
    5e02:	lea    0x1287(%rip),%rax        # 7090 <rgb_ycc_convert>
    5e09:	mov    %rax,0x8(%r15)
    5e0d:	mov    -0x30(%rbp),%r15
    5e11:	leaveq 
    5e12:	retq   
    5e13:	mov    %rdx,0x8(%rax)
    5e17:	mov    -0x30(%rbp),%r15
    5e1b:	leaveq 
    5e1c:	retq   
    5e1d:	mov    %rdx,0x8(%rax)
    5e21:	mov    -0x30(%rbp),%r15
    5e25:	leaveq 
    5e26:	retq   
    5e27:	lea    0x37882(%rip),%rax        # 3d6b0 <jsimd_rgb_gray_convert>
    5e2e:	mov    %rax,0x8(%r15)
    5e32:	mov    -0x30(%rbp),%r15
    5e36:	leaveq 
    5e37:	retq   
    5e38:	lea    0x12f1(%rip),%rcx        # 7130 <rgb_rgb_convert>
    5e3f:	mov    %rcx,0x8(%rax)
    5e43:	mov    -0x30(%rbp),%r15
    5e47:	leaveq 
    5e48:	retq   
    5e49:	lea    0x377f0(%rip),%rax        # 3d640 <jsimd_rgb_ycc_convert>
    5e50:	mov    %rax,0x8(%r15)
    5e54:	mov    -0x30(%rbp),%r15
    5e58:	leaveq 
    5e59:	retq   
    5e5a:	nopw   0x0(%rax,%rax,1)

0000000000005e60 <rgb_ycc_convert_internal>:
    5e60:	push   %rbp
    5e61:	mov    %rsp,%rbp
    5e64:	sub    $0x40,%rsp
    5e68:	mov    %rbx,-0x20(%rbp)
    5e6c:	mov    %r12,-0x28(%rbp)
    5e70:	mov    %r13,-0x30(%rbp)
    5e74:	mov    %r14,-0x38(%rbp)
    5e78:	mov    %r15,-0x40(%rbp)
    5e7c:	mov    %rdx,-0x8(%rbp)
    5e80:	mov    0x1d8(%rdi),%rax
    5e87:	mov    0x10(%rax),%r11
    5e8b:	mov    0x30(%rdi),%r13d
    5e8f:	xor    %edi,%edi
    5e91:	jmpq   5f52 <rgb_ycc_convert_internal+0xf2>
    5e96:	movzbl 0x1(%rbx),%r10d
    5e9b:	lea    0x100(%r10),%eax
    5ea2:	movslq %eax,%rax
    5ea5:	mov    (%r11,%rax,8),%rax
    5ea9:	movzbl (%rbx),%esi
    5eac:	add    (%r11,%rsi,8),%rax
    5eb0:	movzbl 0x2(%rbx),%edx
    5eb4:	lea    0x200(%rdx),%ecx
    5eba:	movslq %ecx,%rcx
    5ebd:	add    (%r11,%rcx,8),%rax
    5ec1:	sar    $0x10,%rax
    5ec5:	mov    %edi,%ecx
    5ec7:	mov    %al,(%r9,%rcx,1)
    5ecb:	lea    0x400(%r10),%eax
    5ed2:	movslq %eax,%rax
    5ed5:	mov    (%r11,%rax,8),%rax
    5ed9:	lea    0x300(%rsi),%r14d
    5ee0:	movslq %r14d,%r14
    5ee3:	add    (%r11,%r14,8),%rax
    5ee7:	lea    0x500(%rdx),%r14d
    5eee:	movslq %r14d,%r14
    5ef1:	add    (%r11,%r14,8),%rax
    5ef5:	sar    $0x10,%rax
    5ef9:	mov    %al,(%r15,%rcx,1)
    5efd:	lea    0x600(%r10),%eax
    5f04:	movslq %eax,%rax
    5f07:	mov    (%r11,%rax,8),%rax
    5f0b:	add    $0x500,%esi
    5f11:	movslq %esi,%rsi
    5f14:	add    (%r11,%rsi,8),%rax
    5f18:	add    $0x700,%edx
    5f1e:	movslq %edx,%rdx
    5f21:	add    (%r11,%rdx,8),%rax
    5f25:	sar    $0x10,%rax
    5f29:	mov    %al,(%r12,%rcx,1)
    5f2d:	add    $0x3,%rbx
    5f31:	add    $0x1,%edi
    5f34:	cmp    %r13d,%edi
    5f37:	jb     5e96 <rgb_ycc_convert_internal+0x36>
    5f3d:	mov    -0x18(%rbp),%rax
    5f41:	lea    0x8(%rax),%rsi
    5f45:	mov    -0x10(%rbp),%rax
    5f49:	lea    0x1(%rax),%ecx
    5f4c:	xor    %edi,%edi
    5f4e:	mov    -0x8(%rbp),%rdx
    5f52:	add    $0xffffffff,%r8d
    5f56:	test   %r8d,%r8d
    5f59:	jns    5f71 <rgb_ycc_convert_internal+0x111>
    5f5b:	mov    -0x40(%rbp),%r15
    5f5f:	mov    -0x38(%rbp),%r14
    5f63:	mov    -0x30(%rbp),%r13
    5f67:	mov    -0x28(%rbp),%r12
    5f6b:	mov    -0x20(%rbp),%rbx
    5f6f:	leaveq 
    5f70:	retq   
    5f71:	mov    (%rsi),%rbx
    5f74:	mov    (%rdx),%rax
    5f77:	mov    %ecx,%r10d
    5f7a:	mov    (%rax,%r10,8),%r9
    5f7e:	mov    0x8(%rdx),%rax
    5f82:	mov    (%rax,%r10,8),%r15
    5f86:	mov    0x10(%rdx),%rax
    5f8a:	mov    (%rax,%r10,8),%r12
    5f8e:	mov    %rsi,-0x18(%rbp)
    5f92:	mov    %rcx,-0x10(%rbp)
    5f96:	jmp    5f34 <rgb_ycc_convert_internal+0xd4>
    5f98:	nopl   0x0(%rax,%rax,1)

0000000000005fa0 <rgb_gray_convert_internal>:
    5fa0:	push   %rbp
    5fa1:	mov    %rsp,%rbp
    5fa4:	sub    $0x20,%rsp
    5fa8:	mov    %r13,-0x8(%rbp)
    5fac:	mov    %r14,-0x10(%rbp)
    5fb0:	mov    %r15,-0x18(%rbp)
    5fb4:	mov    0x1d8(%rdi),%rax
    5fbb:	mov    0x10(%rax),%r10
    5fbf:	mov    0x30(%rdi),%r11d
    5fc3:	xor    %r14d,%r14d
    5fc6:	jmp    6012 <rgb_gray_convert_internal+0x72>
    5fc8:	movzbl 0x1(%rdi),%eax
    5fcc:	add    $0x100,%eax
    5fd1:	movslq %eax,%rax
    5fd4:	mov    (%r10,%rax,8),%rax
    5fd8:	movzbl (%rdi),%r13d
    5fdc:	add    (%r10,%r13,8),%rax
    5fe0:	movzbl 0x2(%rdi),%r13d
    5fe5:	add    $0x200,%r13d
    5fec:	movslq %r13d,%r13
    5fef:	add    (%r10,%r13,8),%rax
    5ff3:	sar    $0x10,%rax
    5ff7:	mov    %r9d,%r13d
    5ffa:	mov    %al,(%r15,%r13,1)
    5ffe:	add    $0x3,%rdi
    6002:	add    $0x1,%r9d
    6006:	cmp    %r11d,%r9d
    6009:	jb     5fc8 <rgb_gray_convert_internal+0x28>
    600b:	add    $0x8,%rsi
    600f:	add    $0x1,%ecx
    6012:	add    $0xffffffff,%r8d
    6016:	test   %r8d,%r8d
    6019:	jns    6029 <rgb_gray_convert_internal+0x89>
    601b:	mov    -0x18(%rbp),%r15
    601f:	mov    -0x10(%rbp),%r14
    6023:	mov    -0x8(%rbp),%r13
    6027:	leaveq 
    6028:	retq   
    6029:	mov    (%rsi),%rdi
    602c:	mov    (%rdx),%r9
    602f:	mov    %ecx,%eax
    6031:	mov    (%r9,%rax,8),%r15
    6035:	mov    %r14,%r9
    6038:	jmp    6006 <rgb_gray_convert_internal+0x66>
    603a:	nopw   0x0(%rax,%rax,1)

0000000000006040 <rgb_rgb_convert_internal>:
    6040:	push   %rbp
    6041:	mov    %rsp,%rbp
    6044:	sub    $0x20,%rsp
    6048:	mov    %r12,-0x8(%rbp)
    604c:	mov    %r13,-0x10(%rbp)
    6050:	mov    %r14,-0x18(%rbp)
    6054:	mov    %r15,-0x20(%rbp)
    6058:	mov    0x30(%rdi),%r10d
    605c:	xor    %r11d,%r11d
    605f:	jmp    6092 <rgb_rgb_convert_internal+0x52>
    6061:	movzbl (%rax),%r14d
    6065:	mov    %edi,%r9d
    6068:	mov    %r14b,(%r15,%r9,1)
    606c:	movzbl 0x1(%rax),%r14d
    6071:	mov    %r14b,0x0(%r13,%r9,1)
    6076:	movzbl 0x2(%rax),%r14d
    607b:	mov    %r14b,(%r12,%r9,1)
    607f:	add    $0x3,%rax
    6083:	add    $0x1,%edi
    6086:	cmp    %r10d,%edi
    6089:	jb     6061 <rgb_rgb_convert_internal+0x21>
    608b:	add    $0x8,%rsi
    608f:	add    $0x1,%ecx
    6092:	add    $0xffffffff,%r8d
    6096:	test   %r8d,%r8d
    6099:	jns    60ad <rgb_rgb_convert_internal+0x6d>
    609b:	mov    -0x20(%rbp),%r15
    609f:	mov    -0x18(%rbp),%r14
    60a3:	mov    -0x10(%rbp),%r13
    60a7:	mov    -0x8(%rbp),%r12
    60ab:	leaveq 
    60ac:	retq   
    60ad:	mov    (%rsi),%rax
    60b0:	mov    (%rdx),%rdi
    60b3:	mov    %ecx,%r9d
    60b6:	mov    (%rdi,%r9,8),%r15
    60ba:	mov    0x8(%rdx),%rdi
    60be:	mov    (%rdi,%r9,8),%r13
    60c2:	mov    0x10(%rdx),%rdi
    60c6:	mov    (%rdi,%r9,8),%r12
    60ca:	mov    %r11,%rdi
    60cd:	jmp    6086 <rgb_rgb_convert_internal+0x46>
    60cf:	nop

00000000000060d0 <extrgb_ycc_convert_internal>:
    60d0:	push   %rbp
    60d1:	mov    %rsp,%rbp
    60d4:	sub    $0x40,%rsp
    60d8:	mov    %rbx,-0x20(%rbp)
    60dc:	mov    %r12,-0x28(%rbp)
    60e0:	mov    %r13,-0x30(%rbp)
    60e4:	mov    %r14,-0x38(%rbp)
    60e8:	mov    %r15,-0x40(%rbp)
    60ec:	mov    %rdx,-0x8(%rbp)
    60f0:	mov    0x1d8(%rdi),%rax
    60f7:	mov    0x10(%rax),%r11
    60fb:	mov    0x30(%rdi),%r13d
    60ff:	xor    %edi,%edi
    6101:	jmpq   61c2 <extrgb_ycc_convert_internal+0xf2>
    6106:	movzbl 0x1(%rbx),%r10d
    610b:	lea    0x100(%r10),%eax
    6112:	movslq %eax,%rax
    6115:	mov    (%r11,%rax,8),%rax
    6119:	movzbl (%rbx),%esi
    611c:	add    (%r11,%rsi,8),%rax
    6120:	movzbl 0x2(%rbx),%edx
    6124:	lea    0x200(%rdx),%ecx
    612a:	movslq %ecx,%rcx
    612d:	add    (%r11,%rcx,8),%rax
    6131:	sar    $0x10,%rax
    6135:	mov    %edi,%ecx
    6137:	mov    %al,(%r9,%rcx,1)
    613b:	lea    0x400(%r10),%eax
    6142:	movslq %eax,%rax
    6145:	mov    (%r11,%rax,8),%rax
    6149:	lea    0x300(%rsi),%r14d
    6150:	movslq %r14d,%r14
    6153:	add    (%r11,%r14,8),%rax
    6157:	lea    0x500(%rdx),%r14d
    615e:	movslq %r14d,%r14
    6161:	add    (%r11,%r14,8),%rax
    6165:	sar    $0x10,%rax
    6169:	mov    %al,(%r15,%rcx,1)
    616d:	lea    0x600(%r10),%eax
    6174:	movslq %eax,%rax
    6177:	mov    (%r11,%rax,8),%rax
    617b:	add    $0x500,%esi
    6181:	movslq %esi,%rsi
    6184:	add    (%r11,%rsi,8),%rax
    6188:	add    $0x700,%edx
    618e:	movslq %edx,%rdx
    6191:	add    (%r11,%rdx,8),%rax
    6195:	sar    $0x10,%rax
    6199:	mov    %al,(%r12,%rcx,1)
    619d:	add    $0x3,%rbx
    61a1:	add    $0x1,%edi
    61a4:	cmp    %r13d,%edi
    61a7:	jb     6106 <extrgb_ycc_convert_internal+0x36>
    61ad:	mov    -0x18(%rbp),%rax
    61b1:	lea    0x8(%rax),%rsi
    61b5:	mov    -0x10(%rbp),%rax
    61b9:	lea    0x1(%rax),%ecx
    61bc:	xor    %edi,%edi
    61be:	mov    -0x8(%rbp),%rdx
    61c2:	add    $0xffffffff,%r8d
    61c6:	test   %r8d,%r8d
    61c9:	jns    61e1 <extrgb_ycc_convert_internal+0x111>
    61cb:	mov    -0x40(%rbp),%r15
    61cf:	mov    -0x38(%rbp),%r14
    61d3:	mov    -0x30(%rbp),%r13
    61d7:	mov    -0x28(%rbp),%r12
    61db:	mov    -0x20(%rbp),%rbx
    61df:	leaveq 
    61e0:	retq   
    61e1:	mov    (%rsi),%rbx
    61e4:	mov    (%rdx),%rax
    61e7:	mov    %ecx,%r10d
    61ea:	mov    (%rax,%r10,8),%r9
    61ee:	mov    0x8(%rdx),%rax
    61f2:	mov    (%rax,%r10,8),%r15
    61f6:	mov    0x10(%rdx),%rax
    61fa:	mov    (%rax,%r10,8),%r12
    61fe:	mov    %rsi,-0x18(%rbp)
    6202:	mov    %rcx,-0x10(%rbp)
    6206:	jmp    61a4 <extrgb_ycc_convert_internal+0xd4>
    6208:	nopl   0x0(%rax,%rax,1)

0000000000006210 <extrgb_gray_convert_internal>:
    6210:	push   %rbp
    6211:	mov    %rsp,%rbp
    6214:	sub    $0x20,%rsp
    6218:	mov    %r13,-0x8(%rbp)
    621c:	mov    %r14,-0x10(%rbp)
    6220:	mov    %r15,-0x18(%rbp)
    6224:	mov    0x1d8(%rdi),%rax
    622b:	mov    0x10(%rax),%r10
    622f:	mov    0x30(%rdi),%r11d
    6233:	xor    %r14d,%r14d
    6236:	jmp    6282 <F_3_072+0x2e>
    6238:	movzbl 0x1(%rdi),%eax
    623c:	add    $0x100,%eax
    6241:	movslq %eax,%rax
    6244:	mov    (%r10,%rax,8),%rax
    6248:	movzbl (%rdi),%r13d
    624c:	add    (%r10,%r13,8),%rax
    6250:	movzbl 0x2(%rdi),%r13d
    6255:	add    $0x200,%r13d
    625c:	movslq %r13d,%r13
    625f:	add    (%r10,%r13,8),%rax
    6263:	sar    $0x10,%rax
    6267:	mov    %r9d,%r13d
    626a:	mov    %al,(%r15,%r13,1)
    626e:	add    $0x3,%rdi
    6272:	add    $0x1,%r9d
    6276:	cmp    %r11d,%r9d
    6279:	jb     6238 <extrgb_gray_convert_internal+0x28>
    627b:	add    $0x8,%rsi
    627f:	add    $0x1,%ecx
    6282:	add    $0xffffffff,%r8d
    6286:	test   %r8d,%r8d
    6289:	jns    6299 <F_3_072+0x45>
    628b:	mov    -0x18(%rbp),%r15
    628f:	mov    -0x10(%rbp),%r14
    6293:	mov    -0x8(%rbp),%r13
    6297:	leaveq 
    6298:	retq   
    6299:	mov    (%rsi),%rdi
    629c:	mov    (%rdx),%r9
    629f:	mov    %ecx,%eax
    62a1:	mov    (%r9,%rax,8),%r15
    62a5:	mov    %r14,%r9
    62a8:	jmp    6276 <F_3_072+0x22>
    62aa:	nopw   0x0(%rax,%rax,1)

00000000000062b0 <extrgb_rgb_convert_internal>:
    62b0:	push   %rbp
    62b1:	mov    %rsp,%rbp
    62b4:	sub    $0x20,%rsp
    62b8:	mov    %r12,-0x8(%rbp)
    62bc:	mov    %r13,-0x10(%rbp)
    62c0:	mov    %r14,-0x18(%rbp)
    62c4:	mov    %r15,-0x20(%rbp)
    62c8:	mov    0x30(%rdi),%r10d
    62cc:	xor    %r11d,%r11d
    62cf:	jmp    6302 <extrgb_rgb_convert_internal+0x52>
    62d1:	movzbl (%rax),%r14d
    62d5:	mov    %edi,%r9d
    62d8:	mov    %r14b,(%r15,%r9,1)
    62dc:	movzbl 0x1(%rax),%r14d
    62e1:	mov    %r14b,0x0(%r13,%r9,1)
    62e6:	movzbl 0x2(%rax),%r14d
    62eb:	mov    %r14b,(%r12,%r9,1)
    62ef:	add    $0x3,%rax
    62f3:	add    $0x1,%edi
    62f6:	cmp    %r10d,%edi
    62f9:	jb     62d1 <extrgb_rgb_convert_internal+0x21>
    62fb:	add    $0x8,%rsi
    62ff:	add    $0x1,%ecx
    6302:	add    $0xffffffff,%r8d
    6306:	test   %r8d,%r8d
    6309:	jns    631d <extrgb_rgb_convert_internal+0x6d>
    630b:	mov    -0x20(%rbp),%r15
    630f:	mov    -0x18(%rbp),%r14
    6313:	mov    -0x10(%rbp),%r13
    6317:	mov    -0x8(%rbp),%r12
    631b:	leaveq 
    631c:	retq   
    631d:	mov    (%rsi),%rax
    6320:	mov    (%rdx),%rdi
    6323:	mov    %ecx,%r9d
    6326:	mov    (%rdi,%r9,8),%r15
    632a:	mov    0x8(%rdx),%rdi
    632e:	mov    (%rdi,%r9,8),%r13
    6332:	mov    0x10(%rdx),%rdi
    6336:	mov    (%rdi,%r9,8),%r12
    633a:	mov    %r11,%rdi
    633d:	jmp    62f6 <extrgb_rgb_convert_internal+0x46>
    633f:	nop

0000000000006340 <extrgbx_ycc_convert_internal>:
    6340:	push   %rbp
    6341:	mov    %rsp,%rbp
    6344:	sub    $0x40,%rsp
    6348:	mov    %rbx,-0x20(%rbp)
    634c:	mov    %r12,-0x28(%rbp)
    6350:	mov    %r13,-0x30(%rbp)
    6354:	mov    %r14,-0x38(%rbp)
    6358:	mov    %r15,-0x40(%rbp)
    635c:	mov    %rdx,-0x8(%rbp)
    6360:	mov    0x1d8(%rdi),%rax
    6367:	mov    0x10(%rax),%r11
    636b:	mov    0x30(%rdi),%r13d
    636f:	xor    %edi,%edi
    6371:	jmpq   6432 <extrgbx_ycc_convert_internal+0xf2>
    6376:	movzbl 0x1(%rbx),%r10d
    637b:	lea    0x100(%r10),%eax
    6382:	movslq %eax,%rax
    6385:	mov    (%r11,%rax,8),%rax
    6389:	movzbl (%rbx),%esi
    638c:	add    (%r11,%rsi,8),%rax
    6390:	movzbl 0x2(%rbx),%edx
    6394:	lea    0x200(%rdx),%ecx
    639a:	movslq %ecx,%rcx
    639d:	add    (%r11,%rcx,8),%rax
    63a1:	sar    $0x10,%rax
    63a5:	mov    %edi,%ecx
    63a7:	mov    %al,(%r9,%rcx,1)
    63ab:	lea    0x400(%r10),%eax
    63b2:	movslq %eax,%rax
    63b5:	mov    (%r11,%rax,8),%rax
    63b9:	lea    0x300(%rsi),%r14d
    63c0:	movslq %r14d,%r14
    63c3:	add    (%r11,%r14,8),%rax
    63c7:	lea    0x500(%rdx),%r14d
    63ce:	movslq %r14d,%r14
    63d1:	add    (%r11,%r14,8),%rax
    63d5:	sar    $0x10,%rax
    63d9:	mov    %al,(%r15,%rcx,1)
    63dd:	lea    0x600(%r10),%eax
    63e4:	movslq %eax,%rax
    63e7:	mov    (%r11,%rax,8),%rax
    63eb:	add    $0x500,%esi
    63f1:	movslq %esi,%rsi
    63f4:	add    (%r11,%rsi,8),%rax
    63f8:	add    $0x700,%edx
    63fe:	movslq %edx,%rdx
    6401:	add    (%r11,%rdx,8),%rax
    6405:	sar    $0x10,%rax
    6409:	mov    %al,(%r12,%rcx,1)
    640d:	add    $0x4,%rbx
    6411:	add    $0x1,%edi
    6414:	cmp    %r13d,%edi
    6417:	jb     6376 <extrgbx_ycc_convert_internal+0x36>
    641d:	mov    -0x18(%rbp),%rax
    6421:	lea    0x8(%rax),%rsi
    6425:	mov    -0x10(%rbp),%rax
    6429:	lea    0x1(%rax),%ecx
    642c:	xor    %edi,%edi
    642e:	mov    -0x8(%rbp),%rdx
    6432:	add    $0xffffffff,%r8d
    6436:	test   %r8d,%r8d
    6439:	jns    6451 <extrgbx_ycc_convert_internal+0x111>
    643b:	mov    -0x40(%rbp),%r15
    643f:	mov    -0x38(%rbp),%r14
    6443:	mov    -0x30(%rbp),%r13
    6447:	mov    -0x28(%rbp),%r12
    644b:	mov    -0x20(%rbp),%rbx
    644f:	leaveq 
    6450:	retq   
    6451:	mov    (%rsi),%rbx
    6454:	mov    (%rdx),%rax
    6457:	mov    %ecx,%r10d
    645a:	mov    (%rax,%r10,8),%r9
    645e:	mov    0x8(%rdx),%rax
    6462:	mov    (%rax,%r10,8),%r15
    6466:	mov    0x10(%rdx),%rax
    646a:	mov    (%rax,%r10,8),%r12
    646e:	mov    %rsi,-0x18(%rbp)
    6472:	mov    %rcx,-0x10(%rbp)
    6476:	jmp    6414 <extrgbx_ycc_convert_internal+0xd4>
    6478:	nopl   0x0(%rax,%rax,1)

0000000000006480 <extrgbx_gray_convert_internal>:
    6480:	push   %rbp
    6481:	mov    %rsp,%rbp
    6484:	sub    $0x20,%rsp
    6488:	mov    %r13,-0x8(%rbp)
    648c:	mov    %r14,-0x10(%rbp)
    6490:	mov    %r15,-0x18(%rbp)
    6494:	mov    0x1d8(%rdi),%rax
    649b:	mov    0x10(%rax),%r10
    649f:	mov    0x30(%rdi),%r11d
    64a3:	xor    %r14d,%r14d
    64a6:	jmp    64f2 <extrgbx_gray_convert_internal+0x72>
    64a8:	movzbl 0x1(%rdi),%eax
    64ac:	add    $0x100,%eax
    64b1:	movslq %eax,%rax
    64b4:	mov    (%r10,%rax,8),%rax
    64b8:	movzbl (%rdi),%r13d
    64bc:	add    (%r10,%r13,8),%rax
    64c0:	movzbl 0x2(%rdi),%r13d
    64c5:	add    $0x200,%r13d
    64cc:	movslq %r13d,%r13
    64cf:	add    (%r10,%r13,8),%rax
    64d3:	sar    $0x10,%rax
    64d7:	mov    %r9d,%r13d
    64da:	mov    %al,(%r15,%r13,1)
    64de:	add    $0x4,%rdi
    64e2:	add    $0x1,%r9d
    64e6:	cmp    %r11d,%r9d
    64e9:	jb     64a8 <extrgbx_gray_convert_internal+0x28>
    64eb:	add    $0x8,%rsi
    64ef:	add    $0x1,%ecx
    64f2:	add    $0xffffffff,%r8d
    64f6:	test   %r8d,%r8d
    64f9:	jns    6509 <extrgbx_gray_convert_internal+0x89>
    64fb:	mov    -0x18(%rbp),%r15
    64ff:	mov    -0x10(%rbp),%r14
    6503:	mov    -0x8(%rbp),%r13
    6507:	leaveq 
    6508:	retq   
    6509:	mov    (%rsi),%rdi
    650c:	mov    (%rdx),%r9
    650f:	mov    %ecx,%eax
    6511:	mov    (%r9,%rax,8),%r15
    6515:	mov    %r14,%r9
    6518:	jmp    64e6 <extrgbx_gray_convert_internal+0x66>
    651a:	nopw   0x0(%rax,%rax,1)

0000000000006520 <extrgbx_rgb_convert_internal>:
    6520:	push   %rbp
    6521:	mov    %rsp,%rbp
    6524:	sub    $0x20,%rsp
    6528:	mov    %r12,-0x8(%rbp)
    652c:	mov    %r13,-0x10(%rbp)
    6530:	mov    %r14,-0x18(%rbp)
    6534:	mov    %r15,-0x20(%rbp)
    6538:	mov    0x30(%rdi),%r10d
    653c:	xor    %r11d,%r11d
    653f:	jmp    6572 <extrgbx_rgb_convert_internal+0x52>
    6541:	movzbl (%rax),%r14d
    6545:	mov    %edi,%r9d
    6548:	mov    %r14b,(%r15,%r9,1)
    654c:	movzbl 0x1(%rax),%r14d
    6551:	mov    %r14b,0x0(%r13,%r9,1)
    6556:	movzbl 0x2(%rax),%r14d
    655b:	mov    %r14b,(%r12,%r9,1)
    655f:	add    $0x4,%rax
    6563:	add    $0x1,%edi
    6566:	cmp    %r10d,%edi
    6569:	jb     6541 <extrgbx_rgb_convert_internal+0x21>
    656b:	add    $0x8,%rsi
    656f:	add    $0x1,%ecx
    6572:	add    $0xffffffff,%r8d
    6576:	test   %r8d,%r8d
    6579:	jns    658d <extrgbx_rgb_convert_internal+0x6d>
    657b:	mov    -0x20(%rbp),%r15
    657f:	mov    -0x18(%rbp),%r14
    6583:	mov    -0x10(%rbp),%r13
    6587:	mov    -0x8(%rbp),%r12
    658b:	leaveq 
    658c:	retq   
    658d:	mov    (%rsi),%rax
    6590:	mov    (%rdx),%rdi
    6593:	mov    %ecx,%r9d
    6596:	mov    (%rdi,%r9,8),%r15
    659a:	mov    0x8(%rdx),%rdi
    659e:	mov    (%rdi,%r9,8),%r13
    65a2:	mov    0x10(%rdx),%rdi
    65a6:	mov    (%rdi,%r9,8),%r12
    65aa:	mov    %r11,%rdi
    65ad:	jmp    6566 <extrgbx_rgb_convert_internal+0x46>
    65af:	nop

00000000000065b0 <extbgr_ycc_convert_internal>:
    65b0:	push   %rbp
    65b1:	mov    %rsp,%rbp
    65b4:	sub    $0x40,%rsp
    65b8:	mov    %rbx,-0x20(%rbp)
    65bc:	mov    %r12,-0x28(%rbp)
    65c0:	mov    %r13,-0x30(%rbp)
    65c4:	mov    %r14,-0x38(%rbp)
    65c8:	mov    %r15,-0x40(%rbp)
    65cc:	mov    %rdx,-0x8(%rbp)
    65d0:	mov    0x1d8(%rdi),%rax
    65d7:	mov    0x10(%rax),%r11
    65db:	mov    0x30(%rdi),%r13d
    65df:	xor    %edi,%edi
    65e1:	jmpq   66a2 <extbgr_ycc_convert_internal+0xf2>
    65e6:	movzbl 0x1(%rbx),%r10d
    65eb:	lea    0x100(%r10),%eax
    65f2:	movslq %eax,%rax
    65f5:	mov    (%r11,%rax,8),%rax
    65f9:	movzbl 0x2(%rbx),%esi
    65fd:	add    (%r11,%rsi,8),%rax
    6601:	movzbl (%rbx),%edx
    6604:	lea    0x200(%rdx),%ecx
    660a:	movslq %ecx,%rcx
    660d:	add    (%r11,%rcx,8),%rax
    6611:	sar    $0x10,%rax
    6615:	mov    %edi,%ecx
    6617:	mov    %al,(%r9,%rcx,1)
    661b:	lea    0x400(%r10),%eax
    6622:	movslq %eax,%rax
    6625:	mov    (%r11,%rax,8),%rax
    6629:	lea    0x300(%rsi),%r14d
    6630:	movslq %r14d,%r14
    6633:	add    (%r11,%r14,8),%rax
    6637:	lea    0x500(%rdx),%r14d
    663e:	movslq %r14d,%r14
    6641:	add    (%r11,%r14,8),%rax
    6645:	sar    $0x10,%rax
    6649:	mov    %al,(%r15,%rcx,1)
    664d:	lea    0x600(%r10),%eax
    6654:	movslq %eax,%rax
    6657:	mov    (%r11,%rax,8),%rax
    665b:	add    $0x500,%esi
    6661:	movslq %esi,%rsi
    6664:	add    (%r11,%rsi,8),%rax
    6668:	add    $0x700,%edx
    666e:	movslq %edx,%rdx
    6671:	add    (%r11,%rdx,8),%rax
    6675:	sar    $0x10,%rax
    6679:	mov    %al,(%r12,%rcx,1)
    667d:	add    $0x3,%rbx
    6681:	add    $0x1,%edi
    6684:	cmp    %r13d,%edi
    6687:	jb     65e6 <extbgr_ycc_convert_internal+0x36>
    668d:	mov    -0x18(%rbp),%rax
    6691:	lea    0x8(%rax),%rsi
    6695:	mov    -0x10(%rbp),%rax
    6699:	lea    0x1(%rax),%ecx
    669c:	xor    %edi,%edi
    669e:	mov    -0x8(%rbp),%rdx
    66a2:	add    $0xffffffff,%r8d
    66a6:	test   %r8d,%r8d
    66a9:	jns    66c1 <extbgr_ycc_convert_internal+0x111>
    66ab:	mov    -0x40(%rbp),%r15
    66af:	mov    -0x38(%rbp),%r14
    66b3:	mov    -0x30(%rbp),%r13
    66b7:	mov    -0x28(%rbp),%r12
    66bb:	mov    -0x20(%rbp),%rbx
    66bf:	leaveq 
    66c0:	retq   
    66c1:	mov    (%rsi),%rbx
    66c4:	mov    (%rdx),%rax
    66c7:	mov    %ecx,%r10d
    66ca:	mov    (%rax,%r10,8),%r9
    66ce:	mov    0x8(%rdx),%rax
    66d2:	mov    (%rax,%r10,8),%r15
    66d6:	mov    0x10(%rdx),%rax
    66da:	mov    (%rax,%r10,8),%r12
    66de:	mov    %rsi,-0x18(%rbp)
    66e2:	mov    %rcx,-0x10(%rbp)
    66e6:	jmp    6684 <extbgr_ycc_convert_internal+0xd4>
    66e8:	nopl   0x0(%rax,%rax,1)

00000000000066f0 <extbgr_gray_convert_internal>:
    66f0:	push   %rbp
    66f1:	mov    %rsp,%rbp
    66f4:	sub    $0x20,%rsp
    66f8:	mov    %r13,-0x8(%rbp)
    66fc:	mov    %r14,-0x10(%rbp)
    6700:	mov    %r15,-0x18(%rbp)
    6704:	mov    0x1d8(%rdi),%rax
    670b:	mov    0x10(%rax),%r10
    670f:	mov    0x30(%rdi),%r11d
    6713:	xor    %r14d,%r14d
    6716:	jmp    6762 <extbgr_gray_convert_internal+0x72>
    6718:	movzbl 0x1(%rdi),%eax
    671c:	add    $0x100,%eax
    6721:	movslq %eax,%rax
    6724:	mov    (%r10,%rax,8),%rax
    6728:	movzbl 0x2(%rdi),%r13d
    672d:	add    (%r10,%r13,8),%rax
    6731:	movzbl (%rdi),%r13d
    6735:	add    $0x200,%r13d
    673c:	movslq %r13d,%r13
    673f:	add    (%r10,%r13,8),%rax
    6743:	sar    $0x10,%rax
    6747:	mov    %r9d,%r13d
    674a:	mov    %al,(%r15,%r13,1)
    674e:	add    $0x3,%rdi
    6752:	add    $0x1,%r9d
    6756:	cmp    %r11d,%r9d
    6759:	jb     6718 <extbgr_gray_convert_internal+0x28>
    675b:	add    $0x8,%rsi
    675f:	add    $0x1,%ecx
    6762:	add    $0xffffffff,%r8d
    6766:	test   %r8d,%r8d
    6769:	jns    6779 <extbgr_gray_convert_internal+0x89>
    676b:	mov    -0x18(%rbp),%r15
    676f:	mov    -0x10(%rbp),%r14
    6773:	mov    -0x8(%rbp),%r13
    6777:	leaveq 
    6778:	retq   
    6779:	mov    (%rsi),%rdi
    677c:	mov    (%rdx),%r9
    677f:	mov    %ecx,%eax
    6781:	mov    (%r9,%rax,8),%r15
    6785:	mov    %r14,%r9
    6788:	jmp    6756 <extbgr_gray_convert_internal+0x66>
    678a:	nopw   0x0(%rax,%rax,1)

0000000000006790 <extbgr_rgb_convert_internal>:
    6790:	push   %rbp
    6791:	mov    %rsp,%rbp
    6794:	sub    $0x20,%rsp
    6798:	mov    %r12,-0x8(%rbp)
    679c:	mov    %r13,-0x10(%rbp)
    67a0:	mov    %r14,-0x18(%rbp)
    67a4:	mov    %r15,-0x20(%rbp)
    67a8:	mov    0x30(%rdi),%r10d
    67ac:	xor    %r11d,%r11d
    67af:	jmp    67e2 <extbgr_rgb_convert_internal+0x52>
    67b1:	movzbl 0x2(%rax),%r14d
    67b6:	mov    %edi,%r9d
    67b9:	mov    %r14b,(%r15,%r9,1)
    67bd:	movzbl 0x1(%rax),%r14d
    67c2:	mov    %r14b,0x0(%r13,%r9,1)
    67c7:	movzbl (%rax),%r14d
    67cb:	mov    %r14b,(%r12,%r9,1)
    67cf:	add    $0x3,%rax
    67d3:	add    $0x1,%edi
    67d6:	cmp    %r10d,%edi
    67d9:	jb     67b1 <extbgr_rgb_convert_internal+0x21>
    67db:	add    $0x8,%rsi
    67df:	add    $0x1,%ecx
    67e2:	add    $0xffffffff,%r8d
    67e6:	test   %r8d,%r8d
    67e9:	jns    67fd <extbgr_rgb_convert_internal+0x6d>
    67eb:	mov    -0x20(%rbp),%r15
    67ef:	mov    -0x18(%rbp),%r14
    67f3:	mov    -0x10(%rbp),%r13
    67f7:	mov    -0x8(%rbp),%r12
    67fb:	leaveq 
    67fc:	retq   
    67fd:	mov    (%rsi),%rax
    6800:	mov    (%rdx),%rdi
    6803:	mov    %ecx,%r9d
    6806:	mov    (%rdi,%r9,8),%r15
    680a:	mov    0x8(%rdx),%rdi
    680e:	mov    (%rdi,%r9,8),%r13
    6812:	mov    0x10(%rdx),%rdi
    6816:	mov    (%rdi,%r9,8),%r12
    681a:	mov    %r11,%rdi
    681d:	jmp    67d6 <extbgr_rgb_convert_internal+0x46>
    681f:	nop

0000000000006820 <extbgrx_ycc_convert_internal>:
    6820:	push   %rbp
    6821:	mov    %rsp,%rbp
    6824:	sub    $0x40,%rsp
    6828:	mov    %rbx,-0x20(%rbp)
    682c:	mov    %r12,-0x28(%rbp)
    6830:	mov    %r13,-0x30(%rbp)
    6834:	mov    %r14,-0x38(%rbp)
    6838:	mov    %r15,-0x40(%rbp)
    683c:	mov    %rdx,-0x8(%rbp)
    6840:	mov    0x1d8(%rdi),%rax
    6847:	mov    0x10(%rax),%r11
    684b:	mov    0x30(%rdi),%r13d
    684f:	xor    %edi,%edi
    6851:	jmpq   6912 <extbgrx_ycc_convert_internal+0xf2>
    6856:	movzbl 0x1(%rbx),%r10d
    685b:	lea    0x100(%r10),%eax
    6862:	movslq %eax,%rax
    6865:	mov    (%r11,%rax,8),%rax
    6869:	movzbl 0x2(%rbx),%esi
    686d:	add    (%r11,%rsi,8),%rax
    6871:	movzbl (%rbx),%edx
    6874:	lea    0x200(%rdx),%ecx
    687a:	movslq %ecx,%rcx
    687d:	add    (%r11,%rcx,8),%rax
    6881:	sar    $0x10,%rax
    6885:	mov    %edi,%ecx
    6887:	mov    %al,(%r9,%rcx,1)
    688b:	lea    0x400(%r10),%eax
    6892:	movslq %eax,%rax
    6895:	mov    (%r11,%rax,8),%rax
    6899:	lea    0x300(%rsi),%r14d
    68a0:	movslq %r14d,%r14
    68a3:	add    (%r11,%r14,8),%rax
    68a7:	lea    0x500(%rdx),%r14d
    68ae:	movslq %r14d,%r14
    68b1:	add    (%r11,%r14,8),%rax
    68b5:	sar    $0x10,%rax
    68b9:	mov    %al,(%r15,%rcx,1)
    68bd:	lea    0x600(%r10),%eax
    68c4:	movslq %eax,%rax
    68c7:	mov    (%r11,%rax,8),%rax
    68cb:	add    $0x500,%esi
    68d1:	movslq %esi,%rsi
    68d4:	add    (%r11,%rsi,8),%rax
    68d8:	add    $0x700,%edx
    68de:	movslq %edx,%rdx
    68e1:	add    (%r11,%rdx,8),%rax
    68e5:	sar    $0x10,%rax
    68e9:	mov    %al,(%r12,%rcx,1)
    68ed:	add    $0x4,%rbx
    68f1:	add    $0x1,%edi
    68f4:	cmp    %r13d,%edi
    68f7:	jb     6856 <extbgrx_ycc_convert_internal+0x36>
    68fd:	mov    -0x18(%rbp),%rax
    6901:	lea    0x8(%rax),%rsi
    6905:	mov    -0x10(%rbp),%rax
    6909:	lea    0x1(%rax),%ecx
    690c:	xor    %edi,%edi
    690e:	mov    -0x8(%rbp),%rdx
    6912:	add    $0xffffffff,%r8d
    6916:	test   %r8d,%r8d
    6919:	jns    6931 <extbgrx_ycc_convert_internal+0x111>
    691b:	mov    -0x40(%rbp),%r15
    691f:	mov    -0x38(%rbp),%r14
    6923:	mov    -0x30(%rbp),%r13
    6927:	mov    -0x28(%rbp),%r12
    692b:	mov    -0x20(%rbp),%rbx
    692f:	leaveq 
    6930:	retq   
    6931:	mov    (%rsi),%rbx
    6934:	mov    (%rdx),%rax
    6937:	mov    %ecx,%r10d
    693a:	mov    (%rax,%r10,8),%r9
    693e:	mov    0x8(%rdx),%rax
    6942:	mov    (%rax,%r10,8),%r15
    6946:	mov    0x10(%rdx),%rax
    694a:	mov    (%rax,%r10,8),%r12
    694e:	mov    %rsi,-0x18(%rbp)
    6952:	mov    %rcx,-0x10(%rbp)
    6956:	jmp    68f4 <extbgrx_ycc_convert_internal+0xd4>
    6958:	nopl   0x0(%rax,%rax,1)

0000000000006960 <extbgrx_gray_convert_internal>:
    6960:	push   %rbp
    6961:	mov    %rsp,%rbp
    6964:	sub    $0x20,%rsp
    6968:	mov    %r13,-0x8(%rbp)
    696c:	mov    %r14,-0x10(%rbp)
    6970:	mov    %r15,-0x18(%rbp)
    6974:	mov    0x1d8(%rdi),%rax
    697b:	mov    0x10(%rax),%r10
    697f:	mov    0x30(%rdi),%r11d
    6983:	xor    %r14d,%r14d
    6986:	jmp    69d2 <extbgrx_gray_convert_internal+0x72>
    6988:	movzbl 0x1(%rdi),%eax
    698c:	add    $0x100,%eax
    6991:	movslq %eax,%rax
    6994:	mov    (%r10,%rax,8),%rax
    6998:	movzbl 0x2(%rdi),%r13d
    699d:	add    (%r10,%r13,8),%rax
    69a1:	movzbl (%rdi),%r13d
    69a5:	add    $0x200,%r13d
    69ac:	movslq %r13d,%r13
    69af:	add    (%r10,%r13,8),%rax
    69b3:	sar    $0x10,%rax
    69b7:	mov    %r9d,%r13d
    69ba:	mov    %al,(%r15,%r13,1)
    69be:	add    $0x4,%rdi
    69c2:	add    $0x1,%r9d
    69c6:	cmp    %r11d,%r9d
    69c9:	jb     6988 <extbgrx_gray_convert_internal+0x28>
    69cb:	add    $0x8,%rsi
    69cf:	add    $0x1,%ecx
    69d2:	add    $0xffffffff,%r8d
    69d6:	test   %r8d,%r8d
    69d9:	jns    69e9 <extbgrx_gray_convert_internal+0x89>
    69db:	mov    -0x18(%rbp),%r15
    69df:	mov    -0x10(%rbp),%r14
    69e3:	mov    -0x8(%rbp),%r13
    69e7:	leaveq 
    69e8:	retq   
    69e9:	mov    (%rsi),%rdi
    69ec:	mov    (%rdx),%r9
    69ef:	mov    %ecx,%eax
    69f1:	mov    (%r9,%rax,8),%r15
    69f5:	mov    %r14,%r9
    69f8:	jmp    69c6 <extbgrx_gray_convert_internal+0x66>
    69fa:	nopw   0x0(%rax,%rax,1)

0000000000006a00 <extbgrx_rgb_convert_internal>:
    6a00:	push   %rbp
    6a01:	mov    %rsp,%rbp
    6a04:	sub    $0x20,%rsp
    6a08:	mov    %r12,-0x8(%rbp)
    6a0c:	mov    %r13,-0x10(%rbp)
    6a10:	mov    %r14,-0x18(%rbp)
    6a14:	mov    %r15,-0x20(%rbp)
    6a18:	mov    0x30(%rdi),%r10d
    6a1c:	xor    %r11d,%r11d
    6a1f:	jmp    6a52 <extbgrx_rgb_convert_internal+0x52>
    6a21:	movzbl 0x2(%rax),%r14d
    6a26:	mov    %edi,%r9d
    6a29:	mov    %r14b,(%r15,%r9,1)
    6a2d:	movzbl 0x1(%rax),%r14d
    6a32:	mov    %r14b,0x0(%r13,%r9,1)
    6a37:	movzbl (%rax),%r14d
    6a3b:	mov    %r14b,(%r12,%r9,1)
    6a3f:	add    $0x4,%rax
    6a43:	add    $0x1,%edi
    6a46:	cmp    %r10d,%edi
    6a49:	jb     6a21 <extbgrx_rgb_convert_internal+0x21>
    6a4b:	add    $0x8,%rsi
    6a4f:	add    $0x1,%ecx
    6a52:	add    $0xffffffff,%r8d
    6a56:	test   %r8d,%r8d
    6a59:	jns    6a6d <extbgrx_rgb_convert_internal+0x6d>
    6a5b:	mov    -0x20(%rbp),%r15
    6a5f:	mov    -0x18(%rbp),%r14
    6a63:	mov    -0x10(%rbp),%r13
    6a67:	mov    -0x8(%rbp),%r12
    6a6b:	leaveq 
    6a6c:	retq   
    6a6d:	mov    (%rsi),%rax
    6a70:	mov    (%rdx),%rdi
    6a73:	mov    %ecx,%r9d
    6a76:	mov    (%rdi,%r9,8),%r15
    6a7a:	mov    0x8(%rdx),%rdi
    6a7e:	mov    (%rdi,%r9,8),%r13
    6a82:	mov    0x10(%rdx),%rdi
    6a86:	mov    (%rdi,%r9,8),%r12
    6a8a:	mov    %r11,%rdi
    6a8d:	jmp    6a46 <extbgrx_rgb_convert_internal+0x46>
    6a8f:	nop

0000000000006a90 <extxbgr_ycc_convert_internal>:
    6a90:	push   %rbp
    6a91:	mov    %rsp,%rbp
    6a94:	sub    $0x40,%rsp
    6a98:	mov    %rbx,-0x20(%rbp)
    6a9c:	mov    %r12,-0x28(%rbp)
    6aa0:	mov    %r13,-0x30(%rbp)
    6aa4:	mov    %r14,-0x38(%rbp)
    6aa8:	mov    %r15,-0x40(%rbp)
    6aac:	mov    %rdx,-0x8(%rbp)
    6ab0:	mov    0x1d8(%rdi),%rax
    6ab7:	mov    0x10(%rax),%r11
    6abb:	mov    0x30(%rdi),%r13d
    6abf:	xor    %edi,%edi
    6ac1:	jmpq   6b83 <F_0_418+0x54>
    6ac6:	movzbl 0x2(%rbx),%r10d
    6acb:	lea    0x100(%r10),%eax
    6ad2:	movslq %eax,%rax
    6ad5:	mov    (%r11,%rax,8),%rax
    6ad9:	movzbl 0x3(%rbx),%esi
    6add:	add    (%r11,%rsi,8),%rax
    6ae1:	movzbl 0x1(%rbx),%edx
    6ae5:	lea    0x200(%rdx),%ecx
    6aeb:	movslq %ecx,%rcx
    6aee:	add    (%r11,%rcx,8),%rax
    6af2:	sar    $0x10,%rax
    6af6:	mov    %edi,%ecx
    6af8:	mov    %al,(%r9,%rcx,1)
    6afc:	lea    0x400(%r10),%eax
    6b03:	movslq %eax,%rax
    6b06:	mov    (%r11,%rax,8),%rax
    6b0a:	lea    0x300(%rsi),%r14d
    6b11:	movslq %r14d,%r14
    6b14:	add    (%r11,%r14,8),%rax
    6b18:	lea    0x500(%rdx),%r14d
    6b1f:	movslq %r14d,%r14
    6b22:	add    (%r11,%r14,8),%rax
    6b26:	sar    $0x10,%rax
    6b2a:	mov    %al,(%r15,%rcx,1)
    6b2e:	lea    0x600(%r10),%eax
    6b35:	movslq %eax,%rax
    6b38:	mov    (%r11,%rax,8),%rax
    6b3c:	add    $0x500,%esi
    6b42:	movslq %esi,%rsi
    6b45:	add    (%r11,%rsi,8),%rax
    6b49:	add    $0x700,%edx
    6b4f:	movslq %edx,%rdx
    6b52:	add    (%r11,%rdx,8),%rax
    6b56:	sar    $0x10,%rax
    6b5a:	mov    %al,(%r12,%rcx,1)
    6b5e:	add    $0x4,%rbx
    6b62:	add    $0x1,%edi
    6b65:	cmp    %r13d,%edi
    6b68:	jb     6ac6 <extxbgr_ycc_convert_internal+0x36>
    6b6e:	mov    -0x18(%rbp),%rax
    6b72:	lea    0x8(%rax),%rsi
    6b76:	mov    -0x10(%rbp),%rax
    6b7a:	lea    0x1(%rax),%ecx
    6b7d:	xor    %edi,%edi
    6b7f:	mov    -0x8(%rbp),%rdx
    6b83:	add    $0xffffffff,%r8d
    6b87:	test   %r8d,%r8d
    6b8a:	jns    6ba2 <F_0_418+0x73>
    6b8c:	mov    -0x40(%rbp),%r15
    6b90:	mov    -0x38(%rbp),%r14
    6b94:	mov    -0x30(%rbp),%r13
    6b98:	mov    -0x28(%rbp),%r12
    6b9c:	mov    -0x20(%rbp),%rbx
    6ba0:	leaveq 
    6ba1:	retq   
    6ba2:	mov    (%rsi),%rbx
    6ba5:	mov    (%rdx),%rax
    6ba8:	mov    %ecx,%r10d
    6bab:	mov    (%rax,%r10,8),%r9
    6baf:	mov    0x8(%rdx),%rax
    6bb3:	mov    (%rax,%r10,8),%r15
    6bb7:	mov    0x10(%rdx),%rax
    6bbb:	mov    (%rax,%r10,8),%r12
    6bbf:	mov    %rsi,-0x18(%rbp)
    6bc3:	mov    %rcx,-0x10(%rbp)
    6bc7:	jmp    6b65 <F_0_418+0x36>
    6bc9:	nopl   0x0(%rax)

0000000000006bd0 <extxbgr_gray_convert_internal>:
    6bd0:	push   %rbp
    6bd1:	mov    %rsp,%rbp
    6bd4:	sub    $0x20,%rsp
    6bd8:	mov    %r13,-0x8(%rbp)
    6bdc:	mov    %r14,-0x10(%rbp)
    6be0:	mov    %r15,-0x18(%rbp)
    6be4:	mov    0x1d8(%rdi),%rax
    6beb:	mov    0x10(%rax),%r10
    6bef:	mov    0x30(%rdi),%r11d
    6bf3:	xor    %r14d,%r14d
    6bf6:	jmp    6c43 <extxbgr_gray_convert_internal+0x73>
    6bf8:	movzbl 0x2(%rdi),%eax
    6bfc:	add    $0x100,%eax
    6c01:	movslq %eax,%rax
    6c04:	mov    (%r10,%rax,8),%rax
    6c08:	movzbl 0x3(%rdi),%r13d
    6c0d:	add    (%r10,%r13,8),%rax
    6c11:	movzbl 0x1(%rdi),%r13d
    6c16:	add    $0x200,%r13d
    6c1d:	movslq %r13d,%r13
    6c20:	add    (%r10,%r13,8),%rax
    6c24:	sar    $0x10,%rax
    6c28:	mov    %r9d,%r13d
    6c2b:	mov    %al,(%r15,%r13,1)
    6c2f:	add    $0x4,%rdi
    6c33:	add    $0x1,%r9d
    6c37:	cmp    %r11d,%r9d
    6c3a:	jb     6bf8 <extxbgr_gray_convert_internal+0x28>
    6c3c:	add    $0x8,%rsi
    6c40:	add    $0x1,%ecx
    6c43:	add    $0xffffffff,%r8d
    6c47:	test   %r8d,%r8d
    6c4a:	jns    6c5a <extxbgr_gray_convert_internal+0x8a>
    6c4c:	mov    -0x18(%rbp),%r15
    6c50:	mov    -0x10(%rbp),%r14
    6c54:	mov    -0x8(%rbp),%r13
    6c58:	leaveq 
    6c59:	retq   
    6c5a:	mov    (%rsi),%rdi
    6c5d:	mov    (%rdx),%r9
    6c60:	mov    %ecx,%eax
    6c62:	mov    (%r9,%rax,8),%r15
    6c66:	mov    %r14,%r9
    6c69:	jmp    6c37 <extxbgr_gray_convert_internal+0x67>
    6c6b:	nopl   0x0(%rax,%rax,1)

0000000000006c70 <extxbgr_rgb_convert_internal>:
    6c70:	push   %rbp
    6c71:	mov    %rsp,%rbp
    6c74:	sub    $0x20,%rsp
    6c78:	mov    %r12,-0x8(%rbp)
    6c7c:	mov    %r13,-0x10(%rbp)
    6c80:	mov    %r14,-0x18(%rbp)
    6c84:	mov    %r15,-0x20(%rbp)
    6c88:	mov    0x30(%rdi),%r10d
    6c8c:	xor    %r11d,%r11d
    6c8f:	jmp    6cc3 <extxbgr_rgb_convert_internal+0x53>
    6c91:	movzbl 0x3(%rax),%r14d
    6c96:	mov    %edi,%r9d
    6c99:	mov    %r14b,(%r15,%r9,1)
    6c9d:	movzbl 0x2(%rax),%r14d
    6ca2:	mov    %r14b,0x0(%r13,%r9,1)
    6ca7:	movzbl 0x1(%rax),%r14d
    6cac:	mov    %r14b,(%r12,%r9,1)
    6cb0:	add    $0x4,%rax
    6cb4:	add    $0x1,%edi
    6cb7:	cmp    %r10d,%edi
    6cba:	jb     6c91 <extxbgr_rgb_convert_internal+0x21>
    6cbc:	add    $0x8,%rsi
    6cc0:	add    $0x1,%ecx
    6cc3:	add    $0xffffffff,%r8d
    6cc7:	test   %r8d,%r8d
    6cca:	jns    6cde <extxbgr_rgb_convert_internal+0x6e>
    6ccc:	mov    -0x20(%rbp),%r15
    6cd0:	mov    -0x18(%rbp),%r14
    6cd4:	mov    -0x10(%rbp),%r13
    6cd8:	mov    -0x8(%rbp),%r12
    6cdc:	leaveq 
    6cdd:	retq   
    6cde:	mov    (%rsi),%rax
    6ce1:	mov    (%rdx),%rdi
    6ce4:	mov    %ecx,%r9d
    6ce7:	mov    (%rdi,%r9,8),%r15
    6ceb:	mov    0x8(%rdx),%rdi
    6cef:	mov    (%rdi,%r9,8),%r13
    6cf3:	mov    0x10(%rdx),%rdi
    6cf7:	mov    (%rdi,%r9,8),%r12
    6cfb:	mov    %r11,%rdi
    6cfe:	jmp    6cb7 <extxbgr_rgb_convert_internal+0x47>

0000000000006d00 <extxrgb_ycc_convert_internal>:
    6d00:	push   %rbp
    6d01:	mov    %rsp,%rbp
    6d04:	sub    $0x40,%rsp
    6d08:	mov    %rbx,-0x20(%rbp)
    6d0c:	mov    %r12,-0x28(%rbp)
    6d10:	mov    %r13,-0x30(%rbp)
    6d14:	mov    %r14,-0x38(%rbp)
    6d18:	mov    %r15,-0x40(%rbp)
    6d1c:	mov    %rdx,-0x8(%rbp)
    6d20:	mov    0x1d8(%rdi),%rax
    6d27:	mov    0x10(%rax),%r11
    6d2b:	mov    0x30(%rdi),%r13d
    6d2f:	xor    %edi,%edi
    6d31:	jmpq   6df3 <extxrgb_ycc_convert_internal+0xf3>
    6d36:	movzbl 0x2(%rbx),%r10d
    6d3b:	lea    0x100(%r10),%eax
    6d42:	movslq %eax,%rax
    6d45:	mov    (%r11,%rax,8),%rax
    6d49:	movzbl 0x1(%rbx),%esi
    6d4d:	add    (%r11,%rsi,8),%rax
    6d51:	movzbl 0x3(%rbx),%edx
    6d55:	lea    0x200(%rdx),%ecx
    6d5b:	movslq %ecx,%rcx
    6d5e:	add    (%r11,%rcx,8),%rax
    6d62:	sar    $0x10,%rax
    6d66:	mov    %edi,%ecx
    6d68:	mov    %al,(%r9,%rcx,1)
    6d6c:	lea    0x400(%r10),%eax
    6d73:	movslq %eax,%rax
    6d76:	mov    (%r11,%rax,8),%rax
    6d7a:	lea    0x300(%rsi),%r14d
    6d81:	movslq %r14d,%r14
    6d84:	add    (%r11,%r14,8),%rax
    6d88:	lea    0x500(%rdx),%r14d
    6d8f:	movslq %r14d,%r14
    6d92:	add    (%r11,%r14,8),%rax
    6d96:	sar    $0x10,%rax
    6d9a:	mov    %al,(%r15,%rcx,1)
    6d9e:	lea    0x600(%r10),%eax
    6da5:	movslq %eax,%rax
    6da8:	mov    (%r11,%rax,8),%rax
    6dac:	add    $0x500,%esi
    6db2:	movslq %esi,%rsi
    6db5:	add    (%r11,%rsi,8),%rax
    6db9:	add    $0x700,%edx
    6dbf:	movslq %edx,%rdx
    6dc2:	add    (%r11,%rdx,8),%rax
    6dc6:	sar    $0x10,%rax
    6dca:	mov    %al,(%r12,%rcx,1)
    6dce:	add    $0x4,%rbx
    6dd2:	add    $0x1,%edi
    6dd5:	cmp    %r13d,%edi
    6dd8:	jb     6d36 <extxrgb_ycc_convert_internal+0x36>
    6dde:	mov    -0x18(%rbp),%rax
    6de2:	lea    0x8(%rax),%rsi
    6de6:	mov    -0x10(%rbp),%rax
    6dea:	lea    0x1(%rax),%ecx
    6ded:	xor    %edi,%edi
    6def:	mov    -0x8(%rbp),%rdx
    6df3:	add    $0xffffffff,%r8d
    6df7:	test   %r8d,%r8d
    6dfa:	jns    6e12 <extxrgb_ycc_convert_internal+0x112>
    6dfc:	mov    -0x40(%rbp),%r15
    6e00:	mov    -0x38(%rbp),%r14
    6e04:	mov    -0x30(%rbp),%r13
    6e08:	mov    -0x28(%rbp),%r12
    6e0c:	mov    -0x20(%rbp),%rbx
    6e10:	leaveq 
    6e11:	retq   
    6e12:	mov    (%rsi),%rbx
    6e15:	mov    (%rdx),%rax
    6e18:	mov    %ecx,%r10d
    6e1b:	mov    (%rax,%r10,8),%r9
    6e1f:	mov    0x8(%rdx),%rax
    6e23:	mov    (%rax,%r10,8),%r15
    6e27:	mov    0x10(%rdx),%rax
    6e2b:	mov    (%rax,%r10,8),%r12
    6e2f:	mov    %rsi,-0x18(%rbp)
    6e33:	mov    %rcx,-0x10(%rbp)
    6e37:	jmp    6dd5 <extxrgb_ycc_convert_internal+0xd5>
    6e39:	nopl   0x0(%rax)

0000000000006e40 <extxrgb_gray_convert_internal>:
    6e40:	push   %rbp
    6e41:	mov    %rsp,%rbp
    6e44:	sub    $0x20,%rsp
    6e48:	mov    %r13,-0x8(%rbp)
    6e4c:	mov    %r14,-0x10(%rbp)
    6e50:	mov    %r15,-0x18(%rbp)
    6e54:	mov    0x1d8(%rdi),%rax
    6e5b:	mov    0x10(%rax),%r10
    6e5f:	mov    0x30(%rdi),%r11d
    6e63:	xor    %r14d,%r14d
    6e66:	jmp    6eb3 <extxrgb_gray_convert_internal+0x73>
    6e68:	movzbl 0x2(%rdi),%eax
    6e6c:	add    $0x100,%eax
    6e71:	movslq %eax,%rax
    6e74:	mov    (%r10,%rax,8),%rax
    6e78:	movzbl 0x1(%rdi),%r13d
    6e7d:	add    (%r10,%r13,8),%rax
    6e81:	movzbl 0x3(%rdi),%r13d
    6e86:	add    $0x200,%r13d
    6e8d:	movslq %r13d,%r13
    6e90:	add    (%r10,%r13,8),%rax
    6e94:	sar    $0x10,%rax
    6e98:	mov    %r9d,%r13d
    6e9b:	mov    %al,(%r15,%r13,1)
    6e9f:	add    $0x4,%rdi
    6ea3:	add    $0x1,%r9d
    6ea7:	cmp    %r11d,%r9d
    6eaa:	jb     6e68 <extxrgb_gray_convert_internal+0x28>
    6eac:	add    $0x8,%rsi
    6eb0:	add    $0x1,%ecx
    6eb3:	add    $0xffffffff,%r8d
    6eb7:	test   %r8d,%r8d
    6eba:	jns    6eca <extxrgb_gray_convert_internal+0x8a>
    6ebc:	mov    -0x18(%rbp),%r15
    6ec0:	mov    -0x10(%rbp),%r14
    6ec4:	mov    -0x8(%rbp),%r13
    6ec8:	leaveq 
    6ec9:	retq   
    6eca:	mov    (%rsi),%rdi
    6ecd:	mov    (%rdx),%r9
    6ed0:	mov    %ecx,%eax
    6ed2:	mov    (%r9,%rax,8),%r15
    6ed6:	mov    %r14,%r9
    6ed9:	jmp    6ea7 <extxrgb_gray_convert_internal+0x67>
    6edb:	nopl   0x0(%rax,%rax,1)

0000000000006ee0 <extxrgb_rgb_convert_internal>:
    6ee0:	push   %rbp
    6ee1:	mov    %rsp,%rbp
    6ee4:	sub    $0x20,%rsp
    6ee8:	mov    %r12,-0x8(%rbp)
    6eec:	mov    %r13,-0x10(%rbp)
    6ef0:	mov    %r14,-0x18(%rbp)
    6ef4:	mov    %r15,-0x20(%rbp)
    6ef8:	mov    0x30(%rdi),%r10d
    6efc:	xor    %r11d,%r11d
    6eff:	jmp    6f33 <extxrgb_rgb_convert_internal+0x53>
    6f01:	movzbl 0x1(%rax),%r14d
    6f06:	mov    %edi,%r9d
    6f09:	mov    %r14b,(%r15,%r9,1)
    6f0d:	movzbl 0x2(%rax),%r14d
    6f12:	mov    %r14b,0x0(%r13,%r9,1)
    6f17:	movzbl 0x3(%rax),%r14d
    6f1c:	mov    %r14b,(%r12,%r9,1)
    6f20:	add    $0x4,%rax
    6f24:	add    $0x1,%edi
    6f27:	cmp    %r10d,%edi
    6f2a:	jb     6f01 <extxrgb_rgb_convert_internal+0x21>
    6f2c:	add    $0x8,%rsi
    6f30:	add    $0x1,%ecx
    6f33:	add    $0xffffffff,%r8d
    6f37:	test   %r8d,%r8d
    6f3a:	jns    6f4e <extxrgb_rgb_convert_internal+0x6e>
    6f3c:	mov    -0x20(%rbp),%r15
    6f40:	mov    -0x18(%rbp),%r14
    6f44:	mov    -0x10(%rbp),%r13
    6f48:	mov    -0x8(%rbp),%r12
    6f4c:	leaveq 
    6f4d:	retq   
    6f4e:	mov    (%rsi),%rax
    6f51:	mov    (%rdx),%rdi
    6f54:	mov    %ecx,%r9d
    6f57:	mov    (%rdi,%r9,8),%r15
    6f5b:	mov    0x8(%rdx),%rdi
    6f5f:	mov    (%rdi,%r9,8),%r13
    6f63:	mov    0x10(%rdx),%rdi
    6f67:	mov    (%rdi,%r9,8),%r12
    6f6b:	mov    %r11,%rdi
    6f6e:	jmp    6f27 <extxrgb_rgb_convert_internal+0x47>

0000000000006f70 <rgb_ycc_start>:
    6f70:	push   %rbp
    6f71:	mov    %rsp,%rbp
    6f74:	sub    $0x10,%rsp
    6f78:	mov    %r15,-0x8(%rbp)
    6f7c:	mov    0x8(%rdi),%rax
    6f80:	mov    (%rax),%rax
    6f83:	mov    $0x1,%esi
    6f88:	mov    $0x4000,%edx
    6f8d:	mov    0x1d8(%rdi),%r15
    6f94:	callq  *%rax
    6f96:	mov    %rax,0x10(%r15)
    6f9a:	xor    %ecx,%ecx
    6f9c:	jmpq   7077 <rgb_ycc_start+0x107>
    6fa1:	lea    (%rcx,%rcx,8),%rsi
    6fa5:	mov    %rsi,%rdx
    6fa8:	shl    $0x4,%rdx
    6fac:	lea    (%rdx,%rcx,8),%rdx
    6fb0:	add    %rcx,%rdx
    6fb3:	shl    $0x7,%rdx
    6fb7:	lea    (%rdx,%rcx,8),%rdx
    6fbb:	lea    (%rdx,%rcx,2),%rdx
    6fbf:	add    %rcx,%rdx
    6fc2:	mov    %rdx,(%rax,%rcx,8)
    6fc6:	lea    (%rcx,%rsi,4),%rdx
    6fca:	shl    $0x4,%rdx
    6fce:	lea    (%rdx,%rcx,8),%rdx
    6fd2:	add    %rcx,%rdx
    6fd5:	shl    $0x6,%rdx
    6fd9:	lea    (%rdx,%rcx,4),%rdx
    6fdd:	lea    (%rdx,%rcx,2),%rdx
    6fe1:	mov    %rdx,0x800(%rax,%rcx,8)
    6fe9:	mov    %rcx,%rdx
    6fec:	imul   $0x1d2f,%rdx,%rdx
    6ff3:	add    $0x8000,%rdx
    6ffa:	mov    %rdx,0x1000(%rax,%rcx,8)
    7002:	mov    %rcx,%rdx
    7005:	imul   $0xffffffffffffd4cd,%rdx,%rdx
    700c:	mov    %rdx,0x1800(%rax,%rcx,8)
    7014:	mov    %rcx,%rdx
    7017:	imul   $0xffffffffffffab33,%rdx,%rdx
    701e:	mov    %rdx,0x2000(%rax,%rcx,8)
    7026:	mov    %rcx,%rdx
    7029:	shl    $0xf,%rdx
    702d:	add    $0x807fff,%rdx
    7034:	mov    %rdx,0x2800(%rax,%rcx,8)
    703c:	mov    %rcx,%rdx
    703f:	imul   $0xffffffffffff94d1,%rdx,%rdx
    7046:	mov    %rdx,0x3000(%rax,%rcx,8)
    704e:	lea    (%rcx,%rcx,4),%rdx
    7052:	shl    $0x6,%rdx
    7056:	lea    (%rdx,%rcx,8),%rdx
    705a:	lea    (%rdx,%rcx,4),%rdx
    705e:	add    %rcx,%rdx
    7061:	shl    $0x4,%rdx
    7065:	add    %rcx,%rdx
    7068:	neg    %rdx
    706b:	mov    %rdx,0x3800(%rax,%rcx,8)
    7073:	add    $0x1,%rcx
    7077:	cmp    $0xff,%rcx
    707e:	jle    6fa1 <rgb_ycc_start+0x31>
    7084:	mov    -0x8(%rbp),%r15
    7088:	leaveq 
    7089:	retq   
    708a:	nopw   0x0(%rax,%rax,1)

0000000000007090 <rgb_ycc_convert>:
    7090:	push   %rbp
    7091:	mov    %rsp,%rbp
    7094:	mov    0x3c(%rdi),%eax
    7097:	add    $0xfffffffa,%eax
    709a:	cmp    $0x9,%eax
    709d:	ja     70b6 <rgb_ycc_convert+0x26>
    709f:	lea    0x41fb2(%rip),%r9        # 49058 <_fini+0xd78>
    70a6:	movslq (%r9,%rax,4),%rax
    70aa:	add    %r9,%rax
    70ad:	jmpq   *%rax
    70af:	callq  6d00 <extxrgb_ycc_convert_internal>
    70b4:	leaveq 
    70b5:	retq   
    70b6:	callq  5e60 <rgb_ycc_convert_internal>
    70bb:	leaveq 
    70bc:	retq   
    70bd:	callq  60d0 <extrgb_ycc_convert_internal>
    70c2:	leaveq 
    70c3:	retq   
    70c4:	callq  6340 <extrgbx_ycc_convert_internal>
    70c9:	leaveq 
    70ca:	retq   
    70cb:	callq  65b0 <extbgr_ycc_convert_internal>
    70d0:	leaveq 
    70d1:	retq   
    70d2:	callq  6820 <extbgrx_ycc_convert_internal>
    70d7:	leaveq 
    70d8:	retq   
    70d9:	callq  6a90 <extxbgr_ycc_convert_internal>
    70de:	leaveq 
    70df:	retq   

00000000000070e0 <rgb_gray_convert>:
    70e0:	push   %rbp
    70e1:	mov    %rsp,%rbp
    70e4:	mov    0x3c(%rdi),%eax
    70e7:	add    $0xfffffffa,%eax
    70ea:	cmp    $0x9,%eax
    70ed:	ja     7106 <rgb_gray_convert+0x26>
    70ef:	lea    0x41f8a(%rip),%r9        # 49080 <_fini+0xda0>
    70f6:	movslq (%r9,%rax,4),%rax
    70fa:	add    %r9,%rax
    70fd:	jmpq   *%rax
    70ff:	callq  6e40 <extxrgb_gray_convert_internal>
    7104:	leaveq 
    7105:	retq   
    7106:	callq  5fa0 <rgb_gray_convert_internal>
    710b:	leaveq 
    710c:	retq   
    710d:	callq  6210 <extrgb_gray_convert_internal>
    7112:	leaveq 
    7113:	retq   
    7114:	callq  6480 <extrgbx_gray_convert_internal>
    7119:	leaveq 
    711a:	retq   
    711b:	callq  66f0 <extbgr_gray_convert_internal>
    7120:	leaveq 
    7121:	retq   
    7122:	callq  6960 <extbgrx_gray_convert_internal>
    7127:	leaveq 
    7128:	retq   
    7129:	callq  6bd0 <extxbgr_gray_convert_internal>
    712e:	leaveq 
    712f:	retq   

0000000000007130 <rgb_rgb_convert>:
    7130:	push   %rbp
    7131:	mov    %rsp,%rbp
    7134:	mov    0x3c(%rdi),%eax
    7137:	add    $0xfffffffa,%eax
    713a:	cmp    $0x9,%eax
    713d:	ja     7156 <rgb_rgb_convert+0x26>
    713f:	lea    0x41f62(%rip),%r9        # 490a8 <_fini+0xdc8>
    7146:	movslq (%r9,%rax,4),%rax
    714a:	add    %r9,%rax
    714d:	jmpq   *%rax
    714f:	callq  6ee0 <extxrgb_rgb_convert_internal>
    7154:	leaveq 
    7155:	retq   
    7156:	callq  6040 <rgb_rgb_convert_internal>
    715b:	leaveq 
    715c:	retq   
    715d:	callq  62b0 <extrgb_rgb_convert_internal>
    7162:	leaveq 
    7163:	retq   
    7164:	callq  6520 <extrgbx_rgb_convert_internal>
    7169:	leaveq 
    716a:	retq   
    716b:	callq  6790 <extbgr_rgb_convert_internal>
    7170:	leaveq 
    7171:	retq   
    7172:	callq  6a00 <extbgrx_rgb_convert_internal>
    7177:	leaveq 
    7178:	retq   
    7179:	callq  6c70 <extxbgr_rgb_convert_internal>
    717e:	leaveq 
    717f:	retq   

0000000000007180 <cmyk_ycck_convert>:
    7180:	push   %rbp
    7181:	mov    %rsp,%rbp
    7184:	sub    $0x50,%rsp
    7188:	mov    %r15,-0x48(%rbp)
    718c:	mov    %r14,-0x40(%rbp)
    7190:	mov    %r13,-0x38(%rbp)
    7194:	mov    %r12,-0x30(%rbp)
    7198:	mov    %rbx,-0x28(%rbp)
    719c:	mov    %rdx,-0x10(%rbp)
    71a0:	mov    0x1d8(%rdi),%rax
    71a7:	mov    0x10(%rax),%r9
    71ab:	mov    0x30(%rdi),%r11d
    71af:	mov    $0x1ff,%eax
    71b4:	mov    $0xff,%edi
    71b9:	xor    %ebx,%ebx
    71bb:	jmpq   729e <cmyk_ycck_convert+0x11e>
    71c0:	movzbl 0x3(%r8),%ecx
    71c5:	mov    %ebx,%r13d
    71c8:	movzbl 0x1(%r8),%edx
    71cd:	sub    %edx,%eax
    71cf:	movslq %eax,%rax
    71d2:	movzbl (%r8),%r14d
    71d6:	sub    %r14d,%edi
    71d9:	movslq %edi,%rsi
    71dc:	movzbl 0x2(%r8),%edi
    71e1:	mov    %cl,(%r15,%r13,1)
    71e5:	mov    (%r9,%rax,8),%rax
    71e9:	add    (%r9,%rsi,8),%rax
    71ed:	mov    $0x2ff,%ecx
    71f2:	sub    %edi,%ecx
    71f4:	movslq %ecx,%rcx
    71f7:	add    (%r9,%rcx,8),%rax
    71fb:	sar    $0x10,%rax
    71ff:	mov    %al,(%r10,%r13,1)
    7203:	mov    $0x4ff,%eax
    7208:	sub    %edx,%eax
    720a:	movslq %eax,%rax
    720d:	mov    (%r9,%rax,8),%rax
    7211:	mov    $0x3ff,%ecx
    7216:	sub    %r14d,%ecx
    7219:	movslq %ecx,%rcx
    721c:	add    (%r9,%rcx,8),%rax
    7220:	mov    $0x5ff,%ecx
    7225:	mov    %rcx,%rsi
    7228:	sub    %edi,%esi
    722a:	movslq %esi,%rsi
    722d:	add    (%r9,%rsi,8),%rax
    7231:	sar    $0x10,%rax
    7235:	mov    %al,(%r12,%r13,1)
    7239:	mov    $0x6ff,%eax
    723e:	sub    %edx,%eax
    7240:	movslq %eax,%rax
    7243:	mov    (%r9,%rax,8),%rax
    7247:	sub    %r14d,%ecx
    724a:	movslq %ecx,%rcx
    724d:	add    (%r9,%rcx,8),%rax
    7251:	mov    $0x7ff,%ecx
    7256:	sub    %edi,%ecx
    7258:	movslq %ecx,%rcx
    725b:	add    (%r9,%rcx,8),%rax
    725f:	sar    $0x10,%rax
    7263:	mov    -0x8(%rbp),%rcx
    7267:	mov    %al,(%rcx,%r13,1)
    726b:	add    $0x4,%r8
    726f:	add    $0x1,%ebx
    7272:	mov    $0xff,%edi
    7277:	mov    $0x1ff,%eax
    727c:	cmp    %r11d,%ebx
    727f:	jb     71c0 <cmyk_ycck_convert+0x40>
    7285:	mov    -0x20(%rbp),%rcx
    7289:	lea    0x8(%rcx),%rsi
    728d:	mov    -0x18(%rbp),%rcx
    7291:	add    $0x1,%ecx
    7294:	xor    %ebx,%ebx
    7296:	mov    -0x10(%rbp),%rdx
    729a:	mov    -0x50(%rbp),%r8
    729e:	add    $0xffffffff,%r8d
    72a2:	test   %r8d,%r8d
    72a5:	jns    72bd <cmyk_ycck_convert+0x13d>
    72a7:	mov    -0x28(%rbp),%rbx
    72ab:	mov    -0x30(%rbp),%r12
    72af:	mov    -0x38(%rbp),%r13
    72b3:	mov    -0x40(%rbp),%r14
    72b7:	mov    -0x48(%rbp),%r15
    72bb:	leaveq 
    72bc:	retq   
    72bd:	mov    %r8,-0x50(%rbp)
    72c1:	mov    (%rsi),%r8
    72c4:	mov    %rsi,-0x20(%rbp)
    72c8:	mov    (%rdx),%r10
    72cb:	mov    %rcx,-0x18(%rbp)
    72cf:	mov    %ecx,%esi
    72d1:	mov    (%r10,%rsi,8),%r10
    72d5:	mov    0x8(%rdx),%rcx
    72d9:	mov    (%rcx,%rsi,8),%r12
    72dd:	mov    0x10(%rdx),%rcx
    72e1:	mov    (%rcx,%rsi,8),%rcx
    72e5:	mov    %rcx,-0x8(%rbp)
    72e9:	mov    0x18(%rdx),%rcx
    72ed:	mov    (%rcx,%rsi,8),%r15
    72f1:	jmp    727c <cmyk_ycck_convert+0xfc>
    72f3:	data16 nopw %cs:0x0(%rax,%rax,1)
    72fe:	xchg   %ax,%ax

0000000000007300 <grayscale_convert>:
    7300:	push   %rbp
    7301:	mov    %rsp,%rbp
    7304:	sub    $0x20,%rsp
    7308:	mov    %r13,-0x8(%rbp)
    730c:	mov    %r14,-0x10(%rbp)
    7310:	mov    %r15,-0x18(%rbp)
    7314:	mov    0x30(%rdi),%r11d
    7318:	movslq 0x38(%rdi),%r9
    731c:	xor    %r10d,%r10d
    731f:	jmp    733f <grayscale_convert+0x3f>
    7321:	movzbl (%rax),%r15d
    7325:	mov    %edi,%r14d
    7328:	mov    %r15b,0x0(%r13,%r14,1)
    732d:	add    %r9,%rax
    7330:	add    $0x1,%edi
    7333:	cmp    %r11d,%edi
    7336:	jb     7321 <grayscale_convert+0x21>
    7338:	add    $0x8,%rsi
    733c:	add    $0x1,%ecx
    733f:	add    $0xffffffff,%r8d
    7343:	test   %r8d,%r8d
    7346:	jns    7356 <grayscale_convert+0x56>
    7348:	mov    -0x18(%rbp),%r15
    734c:	mov    -0x10(%rbp),%r14
    7350:	mov    -0x8(%rbp),%r13
    7354:	leaveq 
    7355:	retq   
    7356:	mov    (%rsi),%rax
    7359:	mov    (%rdx),%r13
    735c:	mov    %ecx,%edi
    735e:	mov    0x0(%r13,%rdi,8),%r13
    7363:	mov    %r10,%rdi
    7366:	jmp    7333 <grayscale_convert+0x33>
    7368:	nopl   0x0(%rax,%rax,1)

0000000000007370 <null_convert>:
    7370:	push   %rbp
    7371:	mov    %rsp,%rbp
    7374:	sub    $0x30,%rsp
    7378:	mov    %r12,-0x18(%rbp)
    737c:	mov    %r13,-0x20(%rbp)
    7380:	mov    %r14,-0x28(%rbp)
    7384:	mov    %r15,-0x30(%rbp)
    7388:	mov    0x30(%rdi),%r14d
    738c:	xor    %eax,%eax
    738e:	movslq 0x4c(%rdi),%r9
    7392:	cmp    $0x3,%r9d
    7396:	je     73d9 <null_convert+0x69>
    7398:	cmp    $0x4,%r9d
    739c:	je     73f4 <null_convert+0x84>
    739e:	mov    %rbx,-0x10(%rbp)
    73a2:	jmpq   742d <F_3_624+0x31>
    73a7:	movzbl (%rdi),%r10d
    73ab:	mov    %r9d,%r12d
    73ae:	mov    %r10b,0x0(%r13,%r12,1)
    73b3:	movzbl 0x1(%rdi),%r10d
    73b8:	mov    %r10b,(%r11,%r12,1)
    73bc:	movzbl 0x2(%rdi),%r10d
    73c1:	mov    %r10b,(%r15,%r12,1)
    73c5:	add    $0x3,%rdi
    73c9:	add    $0x1,%r9d
    73cd:	cmp    %r14d,%r9d
    73d0:	jb     73a7 <null_convert+0x37>
    73d2:	add    $0x8,%rsi
    73d6:	add    $0x1,%ecx
    73d9:	add    $0xffffffff,%r8d
    73dd:	test   %r8d,%r8d
    73e0:	jns    7450 <F_3_624+0x54>
    73e2:	mov    -0x30(%rbp),%r15
    73e6:	mov    -0x28(%rbp),%r14
    73ea:	mov    -0x20(%rbp),%r13
    73ee:	mov    -0x18(%rbp),%r12
    73f2:	leaveq 
    73f3:	retq   
    73f4:	mov    %rbx,-0x10(%rbp)
    73f8:	jmpq   74af <F_3_624+0xb3>
    73fd:	movzbl (%rcx,%r13,1),%r12d
    7402:	mov    %eax,%r10d
    7405:	mov    %r12b,(%r11,%r10,1)
    7409:	add    %r9,%rcx
    740c:	add    $0x1,%eax
    740f:	cmp    %eax,%r14d
    7412:	ja     73fd <F_3_624+0x1>
    7414:	add    $0x1,%edi
    7417:	xor    %eax,%eax
    7419:	cmp    %edi,%r9d
    741c:	jg     74ce <F_3_624+0xd2>
    7422:	add    $0x8,%rsi
    7426:	mov    -0x8(%rbp),%rcx
    742a:	add    $0x1,%ecx
    742d:	add    $0xffffffff,%r8d
    7431:	test   %r8d,%r8d
    7434:	jns    74e1 <F_3_624+0xe5>
    743a:	mov    -0x30(%rbp),%r15
    743e:	mov    -0x28(%rbp),%r14
    7442:	mov    -0x20(%rbp),%r13
    7446:	mov    -0x18(%rbp),%r12
    744a:	mov    -0x10(%rbp),%rbx
    744e:	leaveq 
    744f:	retq   
    7450:	mov    (%rsi),%rdi
    7453:	mov    (%rdx),%r9
    7456:	mov    %ecx,%r10d
    7459:	mov    (%r9,%r10,8),%r13
    745d:	mov    0x8(%rdx),%r9
    7461:	mov    (%r9,%r10,8),%r11
    7465:	mov    0x10(%rdx),%r9
    7469:	mov    (%r9,%r10,8),%r15
    746d:	mov    %rax,%r9
    7470:	jmpq   73cd <null_convert+0x5d>
    7475:	movzbl (%rdi),%r9d
    7479:	mov    %ebx,%r15d
    747c:	mov    %r9b,(%r12,%r15,1)
    7480:	movzbl 0x1(%rdi),%r9d
    7485:	mov    %r9b,0x0(%r13,%r15,1)
    748a:	movzbl 0x2(%rdi),%r9d
    748f:	mov    %r9b,(%r10,%r15,1)
    7493:	movzbl 0x3(%rdi),%r9d
    7498:	mov    %r9b,(%r11,%r15,1)
    749c:	add    $0x4,%rdi
    74a0:	add    $0x1,%ebx
    74a3:	cmp    %ebx,%r14d
    74a6:	ja     7475 <F_3_624+0x79>
    74a8:	add    $0x8,%rsi
    74ac:	add    $0x1,%ecx
    74af:	add    $0xffffffff,%r8d
    74b3:	test   %r8d,%r8d
    74b6:	jns    74ef <F_3_624+0xf3>
    74b8:	mov    -0x30(%rbp),%r15
    74bc:	mov    -0x28(%rbp),%r14
    74c0:	mov    -0x20(%rbp),%r13
    74c4:	mov    -0x18(%rbp),%r12
    74c8:	mov    -0x10(%rbp),%rbx
    74cc:	leaveq 
    74cd:	retq   
    74ce:	mov    (%rsi),%rcx
    74d1:	movslq %edi,%r13
    74d4:	mov    (%rdx,%r13,8),%r10
    74d8:	mov    (%r10,%rbx,8),%r11
    74dc:	jmpq   740f <F_3_624+0x13>
    74e1:	mov    %ecx,%ebx
    74e3:	mov    %rcx,-0x8(%rbp)
    74e7:	mov    %rax,%rdi
    74ea:	jmpq   7419 <F_3_624+0x1d>
    74ef:	mov    (%rsi),%rdi
    74f2:	mov    (%rdx),%r9
    74f5:	mov    %ecx,%ebx
    74f7:	mov    (%r9,%rbx,8),%r12
    74fb:	mov    0x8(%rdx),%r9
    74ff:	mov    (%r9,%rbx,8),%r13
    7503:	mov    0x10(%rdx),%r9
    7507:	mov    (%r9,%rbx,8),%r10
    750b:	mov    0x18(%rdx),%r9
    750f:	mov    (%r9,%rbx,8),%r11
    7513:	mov    %rax,%rbx
    7516:	jmp    74a3 <F_3_624+0xa7>
    7518:	nopl   0x0(%rax,%rax,1)

0000000000007520 <null_method>:
    7520:	push   %rbp
    7521:	mov    %rsp,%rbp
    7524:	leaveq 
    7525:	retq   
    7526:	nopw   %cs:0x0(%rax,%rax,1)

0000000000007530 <jinit_forward_dct>:
    7530:	push   %rbp
    7531:	mov    %rsp,%rbp
    7534:	sub    $0x20,%rsp
    7538:	mov    %r14,-0x10(%rbp)
    753c:	mov    %r15,-0x18(%rbp)
    7540:	mov    %r13,-0x8(%rbp)
    7544:	mov    $0x1,%r13d
    754a:	mov    0x8(%rdi),%rax
    754e:	mov    (%rax),%rax
    7551:	mov    $0x90,%edx
    7556:	mov    %rdi,%r15
    7559:	mov    %r13,%rsi
    755c:	callq  *%rax
    755e:	mov    %rax,0x1e8(%r15)
    7565:	lea    0x3f4(%rip),%rcx        # 7960 <start_pass_fdctmgr>
    756c:	mov    %rcx,(%rax)
    756f:	lea    0x84a(%rip),%rdx        # 7dc0 <forward_DCT>
    7576:	mov    0x114(%r15),%ecx
    757d:	test   %ecx,%ecx
    757f:	je     75b3 <jinit_forward_dct+0x83>
    7581:	cmp    $0x1,%ecx
    7584:	je     7605 <jinit_forward_dct+0xd5>
    7586:	cmp    $0x2,%ecx
    7589:	jne    75b7 <jinit_forward_dct+0x87>
    758b:	lea    0x9ee(%rip),%rcx        # 7f80 <forward_DCT_float>
    7592:	mov    %rcx,0x8(%rax)
    7596:	mov    %rax,%r14
    7599:	callq  3dc90 <jsimd_can_fdct_float>
    759e:	test   %eax,%eax
    75a0:	jne    7626 <jinit_forward_dct+0xf6>
    75a6:	mov    0x66a0b(%rip),%rax        # 6dfb8 <jpeg_fdct_float@@LIBJPEG_6.2+0x40a08>
    75ad:	mov    %rax,0x50(%r14)
    75b1:	jmp    75cf <jinit_forward_dct+0x9f>
    75b3:	test   %ecx,%ecx
    75b5:	je     7633 <jinit_forward_dct+0x103>
    75b7:	mov    (%r15),%rcx
    75ba:	movl   $0x30,0x28(%rcx)
    75c1:	mov    (%r15),%rcx
    75c4:	mov    (%rcx),%rcx
    75c7:	mov    %rax,%r14
    75ca:	mov    %r15,%rdi
    75cd:	callq  *%rcx
    75cf:	mov    0x114(%r15),%eax
    75d6:	test   %eax,%eax
    75d8:	je     7657 <jinit_forward_dct+0x127>
    75da:	cmp    $0x1,%eax
    75dd:	je     769c <jinit_forward_dct+0x16c>
    75e3:	cmp    $0x2,%eax
    75e6:	jne    765b <jinit_forward_dct+0x12b>
    75e8:	callq  3dbc0 <jsimd_can_convsamp_float>
    75ed:	test   %eax,%eax
    75ef:	jne    76b9 <jinit_forward_dct+0x189>
    75f5:	lea    0x884(%rip),%rax        # 7e80 <convsamp_float>
    75fc:	mov    %rax,0x58(%r14)
    7600:	jmpq   76c4 <jinit_forward_dct+0x194>
    7605:	mov    %rdx,0x8(%rax)
    7609:	mov    %rax,%r14
    760c:	callq  3dc50 <jsimd_can_fdct_ifast>
    7611:	test   %eax,%eax
    7613:	jne    76e1 <jinit_forward_dct+0x1b1>
    7619:	mov    0x66960(%rip),%rax        # 6df80 <jpeg_fdct_ifast@@LIBJPEG_6.2+0x406f0>
    7620:	mov    %rax,0x10(%r14)
    7624:	jmp    75cf <jinit_forward_dct+0x9f>
    7626:	lea    0x366c3(%rip),%rax        # 3dcf0 <jsimd_fdct_float>
    762d:	mov    %rax,0x50(%r14)
    7631:	jmp    75cf <jinit_forward_dct+0x9f>
    7633:	mov    %rdx,0x8(%rax)
    7637:	mov    %rax,%r14
    763a:	callq  3dc10 <jsimd_can_fdct_islow>
    763f:	test   %eax,%eax
    7641:	jne    76f1 <jinit_forward_dct+0x1c1>
    7647:	mov    0x6690a(%rip),%rax        # 6df58 <jpeg_fdct_islow@@LIBJPEG_6.2+0x40388>
    764e:	mov    %rax,0x10(%r14)
    7652:	jmpq   75cf <jinit_forward_dct+0x9f>
    7657:	test   %eax,%eax
    7659:	je     769c <jinit_forward_dct+0x16c>
    765b:	mov    (%r15),%rax
    765e:	movl   $0x30,0x28(%rax)
    7665:	mov    (%r15),%rax
    7668:	mov    (%rax),%rax
    766b:	mov    %r15,%rdi
    766e:	callq  *%rax
    7670:	mov    %r13,%rsi
    7673:	xor    %r13d,%r13d
    7676:	mov    0x114(%r15),%eax
    767d:	cmp    $0x2,%eax
    7680:	je     7701 <jinit_forward_dct+0x1d1>
    7682:	mov    0x8(%r15),%rax
    7686:	mov    (%rax),%rax
    7689:	mov    %r15,%rdi
    768c:	mov    $0x80,%edx
    7691:	callq  *%rax
    7693:	mov    %rax,0x48(%r14)
    7697:	jmpq   7734 <jinit_forward_dct+0x204>
    769c:	callq  3db90 <jsimd_can_convsamp>
    76a1:	test   %eax,%eax
    76a3:	jne    7748 <jinit_forward_dct+0x218>
    76a9:	lea    0x680(%rip),%rax        # 7d30 <convsamp>
    76b0:	mov    %rax,0x18(%r14)
    76b4:	jmpq   7753 <jinit_forward_dct+0x223>
    76b9:	lea    0x36540(%rip),%rax        # 3dc00 <jsimd_convsamp_float>
    76c0:	mov    %rax,0x58(%r14)
    76c4:	callq  3dd30 <jsimd_can_quantize_float>
    76c9:	test   %eax,%eax
    76cb:	jne    776f <jinit_forward_dct+0x23f>
    76d1:	lea    0x868(%rip),%rax        # 7f40 <quantize_float>
    76d8:	mov    %rax,0x60(%r14)
    76dc:	mov    %r13,%rsi
    76df:	jmp    7673 <jinit_forward_dct+0x143>
    76e1:	lea    0x365f8(%rip),%rax        # 3dce0 <jsimd_fdct_ifast>
    76e8:	mov    %rax,0x10(%r14)
    76ec:	jmpq   75cf <jinit_forward_dct+0x9f>
    76f1:	lea    0x365d8(%rip),%rax        # 3dcd0 <jsimd_fdct_islow>
    76f8:	mov    %rax,0x10(%r14)
    76fc:	jmpq   75cf <jinit_forward_dct+0x9f>
    7701:	mov    0x8(%r15),%rax
    7705:	mov    (%rax),%rax
    7708:	mov    %r15,%rdi
    770b:	mov    $0x100,%edx
    7710:	callq  *%rax
    7712:	mov    %rax,0x88(%r14)
    7719:	jmp    7734 <jinit_forward_dct+0x204>
    771b:	movslq %r13d,%rax
    771e:	movq   $0x0,0x28(%r14,%rax,8)
    7727:	movq   $0x0,0x68(%r14,%rax,8)
    7730:	add    $0x1,%r13d
    7734:	cmp    $0x3,%r13d
    7738:	jle    771b <jinit_forward_dct+0x1eb>
    773a:	mov    -0x8(%rbp),%r13
    773e:	mov    -0x18(%rbp),%r15
    7742:	mov    -0x10(%rbp),%r14
    7746:	leaveq 
    7747:	retq   
    7748:	lea    0x364a1(%rip),%rax        # 3dbf0 <jsimd_convsamp>
    774f:	mov    %rax,0x18(%r14)
    7753:	callq  3dd00 <jsimd_can_quantize>
    7758:	test   %eax,%eax
    775a:	jne    7782 <jinit_forward_dct+0x252>
    775c:	lea    0x3d(%rip),%rax        # 77a0 <quantize>
    7763:	mov    %rax,0x20(%r14)
    7767:	mov    %r13,%rsi
    776a:	jmpq   7673 <jinit_forward_dct+0x143>
    776f:	lea    0x365fa(%rip),%rax        # 3dd70 <jsimd_quantize_float>
    7776:	mov    %rax,0x60(%r14)
    777a:	mov    %r13,%rsi
    777d:	jmpq   7673 <jinit_forward_dct+0x143>
    7782:	lea    0x365d7(%rip),%rax        # 3dd60 <jsimd_quantize>
    7789:	mov    %rax,0x20(%r14)
    778d:	mov    %r13,%rsi
    7790:	jmpq   7673 <jinit_forward_dct+0x143>
    7795:	data16 nopw %cs:0x0(%rax,%rax,1)

00000000000077a0 <quantize>:
    77a0:	push   %rbp
    77a1:	mov    %rsp,%rbp
    77a4:	xor    %r8d,%r8d
    77a7:	jmp    77c6 <quantize+0x26>
    77a9:	neg    %eax
    77ab:	movswq %ax,%rax
    77af:	add    %ecx,%eax
    77b1:	imul   %r10d,%eax
    77b5:	lea    0x10(%r11),%ecx
    77b9:	shr    %cl,%eax
    77bb:	neg    %eax
    77bd:	mov    %ax,(%rdi,%r9,2)
    77c2:	add    $0x1,%r8d
    77c6:	cmp    $0x3f,%r8d
    77ca:	jle    77ce <quantize+0x2e>
    77cc:	leaveq 
    77cd:	retq   
    77ce:	movslq %r8d,%r9
    77d1:	movzwl (%rsi,%r9,2),%r10d
    77d6:	lea    0x40(%r8),%eax
    77da:	movslq %eax,%rax
    77dd:	movzwl (%rsi,%rax,2),%ecx
    77e1:	lea    0xc0(%r8),%eax
    77e8:	movslq %eax,%rax
    77eb:	movswq (%rsi,%rax,2),%r11
    77f0:	movswq (%rdx,%r9,2),%rax
    77f5:	test   %ax,%ax
    77f8:	js     77a9 <quantize+0x9>
    77fa:	add    %ecx,%eax
    77fc:	imul   %r10d,%eax
    7800:	lea    0x10(%r11),%ecx
    7804:	shr    %cl,%eax
    7806:	jmp    77bd <quantize+0x1d>
    7808:	nopl   0x0(%rax,%rax,1)

0000000000007810 <flss>:
    7810:	push   %rbp
    7811:	mov    %rsp,%rbp
    7814:	test   %di,%di
    7817:	jne    781d <flss+0xd>
    7819:	xor    %eax,%eax
    781b:	leaveq 
    781c:	retq   
    781d:	movzwl %di,%eax
    7820:	and    $0xff00,%eax
    7825:	test   %eax,%eax
    7827:	jle    7835 <flss+0x25>
    7829:	mov    $0xc,%ecx
    782e:	mov    $0x10,%eax
    7833:	jmp    7842 <flss+0x32>
    7835:	shl    $0x8,%edi
    7838:	mov    $0x4,%ecx
    783d:	mov    $0x8,%eax
    7842:	movzwl %di,%edx
    7845:	and    $0xf000,%edx
    784b:	test   %edx,%edx
    784d:	jg     7855 <flss+0x45>
    784f:	shl    $0x4,%edi
    7852:	mov    %rcx,%rax
    7855:	movzwl %di,%ecx
    7858:	and    $0xc000,%ecx
    785e:	test   %ecx,%ecx
    7860:	jg     7868 <flss+0x58>
    7862:	shl    $0x2,%edi
    7865:	add    $0xfffffffe,%eax
    7868:	movzwl %di,%ecx
    786b:	and    $0x8000,%ecx
    7871:	test   %ecx,%ecx
    7873:	jle    7877 <flss+0x67>
    7875:	leaveq 
    7876:	retq   
    7877:	add    $0xffffffff,%eax
    787a:	leaveq 
    787b:	retq   
    787c:	nopl   0x0(%rax)

0000000000007880 <compute_reciprocal>:
    7880:	push   %rbp
    7881:	mov    %rsp,%rbp
    7884:	sub    $0x20,%rsp
    7888:	xor    %eax,%eax
    788a:	cmp    $0x1,%di
    788e:	je     78dc <compute_reciprocal+0x5c>
    7890:	movzwl %di,%ecx
    7893:	mov    %rcx,%rax
    7896:	shr    %eax
    7898:	mov    %r13,-0x8(%rbp)
    789c:	mov    %r14,-0x10(%rbp)
    78a0:	mov    %r15,-0x18(%rbp)
    78a4:	mov    %rax,%r13
    78a7:	mov    %rsi,%r14
    78aa:	mov    %rcx,%r15
    78ad:	callq  7810 <flss>
    78b2:	add    $0xffffffff,%eax
    78b5:	movslq %eax,%rax
    78b8:	lea    0x10(%rax),%rcx
    78bc:	mov    $0x1,%esi
    78c1:	mov    %rsi,%rax
    78c4:	shl    %cl,%eax
    78c6:	xor    %edx,%edx
    78c8:	div    %r15d
    78cb:	test   %edx,%edx
    78cd:	je     78fe <compute_reciprocal+0x7e>
    78cf:	shr    %r15d
    78d2:	cmp    %r15d,%edx
    78d5:	jbe    7944 <compute_reciprocal+0xc4>
    78d7:	add    $0x1,%eax
    78da:	jmp    7903 <compute_reciprocal+0x83>
    78dc:	movw   $0x1,(%rsi)
    78e1:	movw   $0x0,0x80(%rsi)
    78ea:	movw   $0x1,0x100(%rsi)
    78f3:	movw   $0xfff0,0x180(%rsi)
    78fc:	leaveq 
    78fd:	retq   
    78fe:	shr    %eax
    7900:	add    $0xffffffff,%ecx
    7903:	mov    %ax,(%r14)
    7907:	mov    %r13w,0x80(%r14)
    790f:	mov    %rcx,%rdx
    7912:	mov    %rdx,%rcx
    7915:	neg    %ecx
    7917:	mov    %rsi,%rax
    791a:	shl    %cl,%eax
    791c:	mov    %ax,0x100(%r14)
    7924:	lea    -0x10(%rdx),%eax
    7927:	mov    %ax,0x180(%r14)
    792f:	cmp    $0x10,%edx
    7932:	jg     794a <compute_reciprocal+0xca>
    7934:	xor    %eax,%eax
    7936:	mov    -0x18(%rbp),%r15
    793a:	mov    -0x10(%rbp),%r14
    793e:	mov    -0x8(%rbp),%r13
    7942:	leaveq 
    7943:	retq   
    7944:	add    $0x1,%r13d
    7948:	jmp    7903 <compute_reciprocal+0x83>
    794a:	mov    %rsi,%rax
    794d:	mov    -0x18(%rbp),%r15
    7951:	mov    -0x10(%rbp),%r14
    7955:	mov    -0x8(%rbp),%r13
    7959:	leaveq 
    795a:	retq   
    795b:	nopl   0x0(%rax,%rax,1)

0000000000007960 <start_pass_fdctmgr>:
    7960:	push   %rbp
    7961:	mov    %rsp,%rbp
    7964:	sub    $0x60,%rsp
    7968:	mov    %r15,-0x28(%rbp)
    796c:	mov    %r14,-0x20(%rbp)
    7970:	mov    %rdi,-0x58(%rbp)
    7974:	mov    %rbx,-0x8(%rbp)
    7978:	mov    %r12,-0x10(%rbp)
    797c:	mov    %r13,-0x18(%rbp)
    7980:	mov    0x1e8(%rdi),%rbx
    7987:	movsd  0x41911(%rip),%xmm1        # 492a0 <aanscalefactor.7+0x40>
    798f:	movsd  0x41911(%rip),%xmm2        # 492a8 <aanscalefactor.7+0x48>
    7997:	mov    0x58(%rdi),%r15
    799b:	add    $0x10,%r15
    799f:	lea    0x363ba(%rip),%r12        # 3dd60 <jsimd_quantize>
    79a6:	mov    %r12,-0x60(%rbp)
    79aa:	mov    %rdi,%r14
    79ad:	mov    $0x1,%esi
    79b2:	mov    $0x200,%edx
    79b7:	lea    0x41822(%rip),%rax        # 491e0 <aanscales.6>
    79be:	mov    $0x100,%r10d
    79c4:	lea    0x41895(%rip),%r9        # 49260 <aanscalefactor.7>
    79cb:	xor    %r13d,%r13d
    79ce:	mov    %r13,%r8
    79d1:	jmp    7a27 <start_pass_fdctmgr+0xc7>
    79d3:	mov    (%rdi),%rax
    79d6:	movl   $0x30,0x28(%rax)
    79dd:	mov    (%rdi),%rax
    79e0:	mov    (%rax),%rax
    79e3:	mov    %r8,%r13
    79e6:	mov    %rdi,%r14
    79e9:	callq  *%rax
    79eb:	mov    %r13,%r8
    79ee:	lea    0x4186b(%rip),%r9        # 49260 <aanscalefactor.7>
    79f5:	lea    0x417e4(%rip),%rax        # 491e0 <aanscales.6>
    79fc:	xor    %r13d,%r13d
    79ff:	movsd  0x41899(%rip),%xmm1        # 492a0 <aanscalefactor.7+0x40>
    7a07:	movsd  0x41899(%rip),%xmm2        # 492a8 <aanscalefactor.7+0x48>
    7a0f:	add    $0x1,%r8d
    7a13:	add    $0x60,%r15
    7a17:	mov    $0x100,%r10d
    7a1d:	mov    $0x200,%edx
    7a22:	mov    $0x1,%esi
    7a27:	movslq 0x4c(%r14),%rcx
    7a2b:	cmp    %r8d,%ecx
    7a2e:	jg     7a46 <start_pass_fdctmgr+0xe6>
    7a30:	mov    -0x18(%rbp),%r13
    7a34:	mov    -0x10(%rbp),%r12
    7a38:	mov    -0x8(%rbp),%rbx
    7a3c:	mov    -0x20(%rbp),%r14
    7a40:	mov    -0x28(%rbp),%r15
    7a44:	leaveq 
    7a45:	retq   
    7a46:	movslq (%r15),%rcx
    7a49:	test   %ecx,%ecx
    7a4b:	js     7a61 <start_pass_fdctmgr+0x101>
    7a4d:	cmp    $0x3,%ecx
    7a50:	jg     7a61 <start_pass_fdctmgr+0x101>
    7a52:	mov    0x60(%r14,%rcx,8),%rdi
    7a57:	test   %rdi,%rdi
    7a5a:	je     7a61 <start_pass_fdctmgr+0x101>
    7a5c:	mov    %r14,%rdi
    7a5f:	jmp    7ac0 <start_pass_fdctmgr+0x160>
    7a61:	mov    (%r14),%rax
    7a64:	movl   $0x34,0x28(%rax)
    7a6b:	mov    (%r14),%rax
    7a6e:	mov    %ecx,0x2c(%rax)
    7a71:	mov    (%r14),%rax
    7a74:	mov    (%rax),%rax
    7a77:	mov    %rcx,%r12
    7a7a:	mov    %r8,%r13
    7a7d:	mov    %r14,%rdi
    7a80:	callq  *%rax
    7a82:	mov    %r12,%rcx
    7a85:	mov    %r14,%rdi
    7a88:	mov    %r13,%r8
    7a8b:	lea    0x417ce(%rip),%r9        # 49260 <aanscalefactor.7>
    7a92:	mov    $0x100,%r10d
    7a98:	lea    0x41741(%rip),%rax        # 491e0 <aanscales.6>
    7a9f:	mov    $0x200,%edx
    7aa4:	mov    $0x1,%esi
    7aa9:	xor    %r13d,%r13d
    7aac:	mov    -0x60(%rbp),%r12
    7ab0:	movsd  0x417e8(%rip),%xmm1        # 492a0 <aanscalefactor.7+0x40>
    7ab8:	movsd  0x417e8(%rip),%xmm2        # 492a8 <aanscalefactor.7+0x48>
    7ac0:	mov    0x60(%rdi,%rcx,8),%r14
    7ac5:	mov    0x114(%rdi),%r11d
    7acc:	test   %r11d,%r11d
    7acf:	je     7b39 <start_pass_fdctmgr+0x1d9>
    7ad1:	cmp    $0x1,%r11d
    7ad5:	je     7b54 <start_pass_fdctmgr+0x1f4>
    7ad7:	cmp    $0x2,%r11d
    7adb:	jne    79d3 <start_pass_fdctmgr+0x73>
    7ae1:	mov    0x68(%rbx,%rcx,8),%rax
    7ae6:	test   %rax,%rax
    7ae9:	jne    7b2c <start_pass_fdctmgr+0x1cc>
    7aeb:	mov    0x8(%rdi),%rax
    7aef:	mov    (%rax),%rax
    7af2:	mov    %r8,-0x40(%rbp)
    7af6:	mov    %r15,-0x50(%rbp)
    7afa:	mov    %r10,%rdx
    7afd:	mov    %r9,%r12
    7b00:	mov    %rcx,%r15
    7b03:	callq  *%rax
    7b05:	mov    %rax,0x68(%rbx,%r15,8)
    7b0a:	mov    %r15,%rcx
    7b0d:	mov    %r12,%r9
    7b10:	mov    -0x58(%rbp),%rdi
    7b14:	mov    -0x50(%rbp),%r15
    7b18:	mov    -0x40(%rbp),%r8
    7b1c:	movsd  0x4177c(%rip),%xmm1        # 492a0 <aanscalefactor.7+0x40>
    7b24:	movsd  0x4177c(%rip),%xmm2        # 492a8 <aanscalefactor.7+0x48>
    7b2c:	mov    0x68(%rbx,%rcx,8),%r12
    7b31:	mov    %r13,%rax
    7b34:	mov    %rax,%rdx
    7b37:	jmp    7bad <start_pass_fdctmgr+0x24d>
    7b39:	test   %r11d,%r11d
    7b3c:	jne    79d3 <start_pass_fdctmgr+0x73>
    7b42:	mov    0x28(%rbx,%rcx,8),%rax
    7b47:	test   %rax,%rax
    7b4a:	je     7bc9 <start_pass_fdctmgr+0x269>
    7b4c:	mov    %r15,%rax
    7b4f:	jmpq   7bed <start_pass_fdctmgr+0x28d>
    7b54:	mov    0x28(%rbx,%rcx,8),%r9
    7b59:	test   %r9,%r9
    7b5c:	je     7bfc <start_pass_fdctmgr+0x29c>
    7b62:	mov    %r15,%rdx
    7b65:	jmpq   7c27 <start_pass_fdctmgr+0x2c7>
    7b6a:	movslq %eax,%r11
    7b6d:	movzwl (%r14,%r11,2),%esi
    7b72:	movzwl %si,%esi
    7b75:	cvtsi2sd %rsi,%xmm0
    7b7a:	mulsd  (%r9,%r10,8),%xmm0
    7b80:	movslq %ecx,%rsi
    7b83:	mulsd  (%r9,%rsi,8),%xmm0
    7b89:	mulsd  %xmm2,%xmm0
    7b8d:	movapd %xmm1,%xmm3
    7b91:	divsd  %xmm0,%xmm3
    7b95:	cvtsd2ss %xmm3,%xmm0
    7b99:	movss  %xmm0,(%r12,%r11,4)
    7b9f:	add    $0x1,%eax
    7ba2:	add    $0x1,%ecx
    7ba5:	cmp    $0x7,%ecx
    7ba8:	jle    7b6a <start_pass_fdctmgr+0x20a>
    7baa:	add    $0x1,%edx
    7bad:	cmp    $0x7,%edx
    7bb0:	jle    7c39 <start_pass_fdctmgr+0x2d9>
    7bb6:	mov    %rdi,%r14
    7bb9:	lea    0x41620(%rip),%rax        # 491e0 <aanscales.6>
    7bc0:	mov    -0x60(%rbp),%r12
    7bc4:	jmpq   7a0f <start_pass_fdctmgr+0xaf>
    7bc9:	mov    0x8(%rdi),%rax
    7bcd:	mov    (%rax),%rax
    7bd0:	mov    %r8,-0x30(%rbp)
    7bd4:	mov    %r15,-0x48(%rbp)
    7bd8:	mov    %rcx,%r15
    7bdb:	callq  *%rax
    7bdd:	mov    %rax,0x28(%rbx,%r15,8)
    7be2:	mov    %r15,%rcx
    7be5:	mov    -0x48(%rbp),%rax
    7be9:	mov    -0x30(%rbp),%r8
    7bed:	mov    0x28(%rbx,%rcx,8),%r15
    7bf2:	mov    %r8,-0x30(%rbp)
    7bf6:	mov    %rax,-0x40(%rbp)
    7bfa:	jmp    7c74 <start_pass_fdctmgr+0x314>
    7bfc:	mov    0x8(%rdi),%rax
    7c00:	mov    (%rax),%rax
    7c03:	mov    %r8,-0x38(%rbp)
    7c07:	mov    %r15,-0x50(%rbp)
    7c0b:	mov    %rcx,%r15
    7c0e:	callq  *%rax
    7c10:	mov    %rax,0x28(%rbx,%r15,8)
    7c15:	mov    %r15,%rcx
    7c18:	mov    -0x50(%rbp),%rdx
    7c1c:	mov    -0x38(%rbp),%r8
    7c20:	lea    0x415b9(%rip),%rax        # 491e0 <aanscales.6>
    7c27:	mov    0x28(%rbx,%rcx,8),%r15
    7c2c:	mov    %r8,-0x38(%rbp)
    7c30:	mov    %rdx,-0x48(%rbp)
    7c34:	jmpq   7cf4 <start_pass_fdctmgr+0x394>
    7c39:	movslq %edx,%r10
    7c3c:	mov    %r13,%rcx
    7c3f:	jmpq   7ba5 <start_pass_fdctmgr+0x245>
    7c44:	movslq %r13d,%rax
    7c47:	movzwl (%r14,%rax,2),%edi
    7c4c:	shl    $0x3,%edi
    7c4f:	lea    (%r15,%rax,2),%rsi
    7c53:	callq  7880 <compute_reciprocal>
    7c58:	test   %eax,%eax
    7c5a:	jne    7c70 <start_pass_fdctmgr+0x310>
    7c5c:	mov    0x20(%rbx),%rax
    7c60:	cmp    %r12,%rax
    7c63:	jne    7c70 <start_pass_fdctmgr+0x310>
    7c65:	lea    -0x4cc(%rip),%rax        # 77a0 <quantize>
    7c6c:	mov    %rax,0x20(%rbx)
    7c70:	add    $0x1,%r13d
    7c74:	cmp    $0x3f,%r13d
    7c78:	jle    7c44 <start_pass_fdctmgr+0x2e4>
    7c7a:	mov    -0x58(%rbp),%r14
    7c7e:	mov    -0x40(%rbp),%r15
    7c82:	mov    -0x30(%rbp),%r8
    7c86:	lea    0x415d3(%rip),%r9        # 49260 <aanscalefactor.7>
    7c8d:	lea    0x4154c(%rip),%rax        # 491e0 <aanscales.6>
    7c94:	xor    %r13d,%r13d
    7c97:	movsd  0x41601(%rip),%xmm1        # 492a0 <aanscalefactor.7+0x40>
    7c9f:	movsd  0x41601(%rip),%xmm2        # 492a8 <aanscalefactor.7+0x48>
    7ca7:	jmpq   7a0f <start_pass_fdctmgr+0xaf>
    7cac:	movslq %r13d,%rdx
    7caf:	movswq (%rax,%rdx,2),%rax
    7cb4:	movzwl (%r14,%rdx,2),%ecx
    7cb9:	imul   %rcx,%rax
    7cbd:	lea    0x400(%rax),%rdi
    7cc4:	sar    $0xb,%rdi
    7cc8:	lea    (%r15,%rdx,2),%rsi
    7ccc:	callq  7880 <compute_reciprocal>
    7cd1:	test   %eax,%eax
    7cd3:	jne    7ce9 <start_pass_fdctmgr+0x389>
    7cd5:	mov    0x20(%rbx),%rax
    7cd9:	cmp    %r12,%rax
    7cdc:	jne    7ce9 <start_pass_fdctmgr+0x389>
    7cde:	lea    -0x545(%rip),%rax        # 77a0 <quantize>
    7ce5:	mov    %rax,0x20(%rbx)
    7ce9:	add    $0x1,%r13d
    7ced:	lea    0x414ec(%rip),%rax        # 491e0 <aanscales.6>
    7cf4:	cmp    $0x3f,%r13d
    7cf8:	jle    7cac <start_pass_fdctmgr+0x34c>
    7cfa:	mov    -0x58(%rbp),%r14
    7cfe:	mov    -0x48(%rbp),%r15
    7d02:	mov    -0x38(%rbp),%r8
    7d06:	lea    0x41553(%rip),%r9        # 49260 <aanscalefactor.7>
    7d0d:	xor    %r13d,%r13d
    7d10:	movsd  0x41588(%rip),%xmm1        # 492a0 <aanscalefactor.7+0x40>
    7d18:	movsd  0x41588(%rip),%xmm2        # 492a8 <aanscalefactor.7+0x48>
    7d20:	jmpq   7a0f <start_pass_fdctmgr+0xaf>
    7d25:	data16 nopw %cs:0x0(%rax,%rax,1)

0000000000007d30 <convsamp>:
    7d30:	push   %rbp
    7d31:	mov    %rsp,%rbp
    7d34:	mov    %esi,%r8d
    7d37:	xor    %eax,%eax
    7d39:	jmp    7daf <convsamp+0x7f>
    7d3b:	movslq %eax,%rcx
    7d3e:	mov    (%rdi,%rcx,8),%rsi
    7d42:	movzbl (%r8,%rsi,1),%ecx
    7d47:	add    $0xffffff80,%ecx
    7d4a:	mov    %cx,(%rdx)
    7d4d:	movzbl 0x1(%r8,%rsi,1),%ecx
    7d53:	add    $0xffffff80,%ecx
    7d56:	mov    %cx,0x2(%rdx)
    7d5a:	movzbl 0x2(%r8,%rsi,1),%ecx
    7d60:	add    $0xffffff80,%ecx
    7d63:	mov    %cx,0x4(%rdx)
    7d67:	movzbl 0x3(%r8,%rsi,1),%ecx
    7d6d:	add    $0xffffff80,%ecx
    7d70:	mov    %cx,0x6(%rdx)
    7d74:	movzbl 0x4(%r8,%rsi,1),%ecx
    7d7a:	add    $0xffffff80,%ecx
    7d7d:	mov    %cx,0x8(%rdx)
    7d81:	movzbl 0x5(%r8,%rsi,1),%ecx
    7d87:	add    $0xffffff80,%ecx
    7d8a:	mov    %cx,0xa(%rdx)
    7d8e:	movzbl 0x6(%r8,%rsi,1),%ecx
    7d94:	add    $0xffffff80,%ecx
    7d97:	mov    %cx,0xc(%rdx)
    7d9b:	movzbl 0x7(%r8,%rsi,1),%ecx
    7da1:	add    $0xffffff80,%ecx
    7da4:	mov    %cx,0xe(%rdx)
    7da8:	add    $0x1,%eax
    7dab:	add    $0x10,%rdx
    7daf:	cmp    $0x7,%eax
    7db2:	jle    7d3b <convsamp+0xb>
    7db4:	leaveq 
    7db5:	retq   
    7db6:	nopw   %cs:0x0(%rax,%rax,1)

0000000000007dc0 <forward_DCT>:
    7dc0:	push   %rbp
    7dc1:	mov    %rsp,%rbp
    7dc4:	sub    $0x50,%rsp
    7dc8:	mov    %r15,-0x48(%rbp)
    7dcc:	mov    %rbx,-0x28(%rbp)
    7dd0:	mov    %r12,-0x30(%rbp)
    7dd4:	mov    %r13,-0x38(%rbp)
    7dd8:	mov    %r14,-0x40(%rbp)
    7ddc:	mov    0x1e8(%rdi),%rdi
    7de3:	movslq 0x10(%rsi),%rax
    7de7:	mov    0x28(%rdi,%rax,8),%r15
    7dec:	mov    0x10(%rdi),%r12
    7df0:	mov    0x18(%rdi),%rax
    7df4:	mov    %rax,-0x10(%rbp)
    7df8:	mov    0x20(%rdi),%rsi
    7dfc:	mov    %rsi,-0x8(%rbp)
    7e00:	mov    0x48(%rdi),%r13
    7e04:	mov    0x10(%rbp),%esi
    7e07:	mov    %rsi,-0x50(%rbp)
    7e0b:	mov    %r8d,%edi
    7e0e:	lea    (%rdx,%rdi,8),%rdi
    7e12:	mov    %rdi,-0x18(%rbp)
    7e16:	mov    %rcx,%r14
    7e19:	xor    %ebx,%ebx
    7e1b:	jmp    7e5c <forward_DCT+0x9c>
    7e1d:	mov    %r9,%rsi
    7e20:	mov    %r13,%rdx
    7e23:	mov    %r9,-0x20(%rbp)
    7e27:	callq  *%rax
    7e29:	mov    %r13,%rdi
    7e2c:	callq  *%r12
    7e2f:	mov    %ebx,%eax
    7e31:	shl    $0x7,%rax
    7e35:	lea    (%r14,%rax,1),%rdi
    7e39:	mov    %r15,%rsi
    7e3c:	mov    %r13,%rdx
    7e3f:	mov    -0x8(%rbp),%rax
    7e43:	callq  *%rax
    7e45:	add    $0x1,%ebx
    7e48:	mov    -0x20(%rbp),%rax
    7e4c:	lea    0x8(%rax),%r9d
    7e50:	mov    -0x10(%rbp),%rax
    7e54:	mov    -0x18(%rbp),%rdi
    7e58:	mov    -0x50(%rbp),%rsi
    7e5c:	cmp    %esi,%ebx
    7e5e:	jb     7e1d <forward_DCT+0x5d>
    7e60:	mov    -0x40(%rbp),%r14
    7e64:	mov    -0x38(%rbp),%r13
    7e68:	mov    -0x30(%rbp),%r12
    7e6c:	mov    -0x28(%rbp),%rbx
    7e70:	mov    -0x48(%rbp),%r15
    7e74:	leaveq 
    7e75:	retq   
    7e76:	nopw   %cs:0x0(%rax,%rax,1)

0000000000007e80 <convsamp_float>:
    7e80:	push   %rbp
    7e81:	mov    %rsp,%rbp
    7e84:	mov    %esi,%r8d
    7e87:	xor    %eax,%eax
    7e89:	jmpq   7f2a <convsamp_float+0xaa>
    7e8e:	movslq %eax,%rcx
    7e91:	mov    (%rdi,%rcx,8),%rsi
    7e95:	movzbl (%r8,%rsi,1),%ecx
    7e9a:	add    $0xffffff80,%ecx
    7e9d:	cvtsi2ss %ecx,%xmm0
    7ea1:	movss  %xmm0,(%rdx)
    7ea5:	movzbl 0x1(%r8,%rsi,1),%ecx
    7eab:	add    $0xffffff80,%ecx
    7eae:	cvtsi2ss %ecx,%xmm0
    7eb2:	movss  %xmm0,0x4(%rdx)
    7eb7:	movzbl 0x2(%r8,%rsi,1),%ecx
    7ebd:	add    $0xffffff80,%ecx
    7ec0:	cvtsi2ss %ecx,%xmm0
    7ec4:	movss  %xmm0,0x8(%rdx)
    7ec9:	movzbl 0x3(%r8,%rsi,1),%ecx
    7ecf:	add    $0xffffff80,%ecx
    7ed2:	cvtsi2ss %ecx,%xmm0
    7ed6:	movss  %xmm0,0xc(%rdx)
    7edb:	movzbl 0x4(%r8,%rsi,1),%ecx
    7ee1:	add    $0xffffff80,%ecx
    7ee4:	cvtsi2ss %ecx,%xmm0
    7ee8:	movss  %xmm0,0x10(%rdx)
    7eed:	movzbl 0x5(%r8,%rsi,1),%ecx
    7ef3:	add    $0xffffff80,%ecx
    7ef6:	cvtsi2ss %ecx,%xmm0
    7efa:	movss  %xmm0,0x14(%rdx)
    7eff:	movzbl 0x6(%r8,%rsi,1),%ecx
    7f05:	add    $0xffffff80,%ecx
    7f08:	cvtsi2ss %ecx,%xmm0
    7f0c:	movss  %xmm0,0x18(%rdx)
    7f11:	movzbl 0x7(%r8,%rsi,1),%ecx
    7f17:	add    $0xffffff80,%ecx
    7f1a:	cvtsi2ss %ecx,%xmm0
    7f1e:	movss  %xmm0,0x1c(%rdx)
    7f23:	add    $0x1,%eax
    7f26:	add    $0x20,%rdx
    7f2a:	cmp    $0x7,%eax
    7f2d:	jle    7e8e <convsamp_float+0xe>
    7f33:	leaveq 
    7f34:	retq   
    7f35:	data16 nopw %cs:0x0(%rax,%rax,1)

0000000000007f40 <quantize_float>:
    7f40:	push   %rbp
    7f41:	mov    %rsp,%rbp
    7f44:	movss  0x41364(%rip),%xmm1        # 492b0 <aanscalefactor.7+0x50>
    7f4c:	xor    %eax,%eax
    7f4e:	jmp    7f75 <quantize_float+0x35>
    7f50:	movslq %eax,%r8
    7f53:	movss  (%rsi,%r8,4),%xmm0
    7f59:	mulss  (%rdx,%r8,4),%xmm0
    7f5f:	addss  %xmm1,%xmm0
    7f63:	cvttss2si %xmm0,%ecx
    7f67:	add    $0xffffc000,%ecx
    7f6d:	mov    %cx,(%rdi,%r8,2)
    7f72:	add    $0x1,%eax
    7f75:	cmp    $0x3f,%eax
    7f78:	jle    7f50 <quantize_float+0x10>
    7f7a:	leaveq 
    7f7b:	retq   
    7f7c:	nopl   0x0(%rax)

0000000000007f80 <forward_DCT_float>:
    7f80:	push   %rbp
    7f81:	mov    %rsp,%rbp
    7f84:	sub    $0x50,%rsp
    7f88:	mov    %r15,-0x48(%rbp)
    7f8c:	mov    %rbx,-0x28(%rbp)
    7f90:	mov    %r12,-0x30(%rbp)
    7f94:	mov    %r13,-0x38(%rbp)
    7f98:	mov    %r14,-0x40(%rbp)
    7f9c:	mov    0x1e8(%rdi),%rdi
    7fa3:	movslq 0x10(%rsi),%rax
    7fa7:	mov    0x68(%rdi,%rax,8),%r15
    7fac:	mov    0x50(%rdi),%r12
    7fb0:	mov    0x58(%rdi),%rax
    7fb4:	mov    %rax,-0x10(%rbp)
    7fb8:	mov    0x60(%rdi),%rsi
    7fbc:	mov    %rsi,-0x8(%rbp)
    7fc0:	mov    0x88(%rdi),%r13
    7fc7:	mov    0x10(%rbp),%esi
    7fca:	mov    %rsi,-0x50(%rbp)
    7fce:	mov    %r8d,%edi
    7fd1:	lea    (%rdx,%rdi,8),%rdi
    7fd5:	mov    %rdi,-0x18(%rbp)
    7fd9:	mov    %rcx,%r14
    7fdc:	xor    %ebx,%ebx
    7fde:	jmp    801f <forward_DCT_float+0x9f>
    7fe0:	mov    %r9,%rsi
    7fe3:	mov    %r13,%rdx
    7fe6:	mov    %r9,-0x20(%rbp)
    7fea:	callq  *%rax
    7fec:	mov    %r13,%rdi
    7fef:	callq  *%r12
    7ff2:	mov    %ebx,%eax
    7ff4:	shl    $0x7,%rax
    7ff8:	lea    (%r14,%rax,1),%rdi
    7ffc:	mov    %r15,%rsi
    7fff:	mov    %r13,%rdx
    8002:	mov    -0x8(%rbp),%rax
    8006:	callq  *%rax
    8008:	add    $0x1,%ebx
    800b:	mov    -0x20(%rbp),%rax
    800f:	lea    0x8(%rax),%r9d
    8013:	mov    -0x10(%rbp),%rax
    8017:	mov    -0x18(%rbp),%rdi
    801b:	mov    -0x50(%rbp),%rsi
    801f:	cmp    %esi,%ebx
    8021:	jb     7fe0 <forward_DCT_float+0x60>
    8023:	mov    -0x40(%rbp),%r14
    8027:	mov    -0x38(%rbp),%r13
    802b:	mov    -0x30(%rbp),%r12
    802f:	mov    -0x28(%rbp),%rbx
    8033:	mov    -0x48(%rbp),%r15
    8037:	leaveq 
    8038:	retq   
    8039:	nopl   0x0(%rax)

0000000000008040 <jinit_huff_encoder>:
    8040:	push   %rbp
    8041:	mov    %rsp,%rbp
    8044:	sub    $0x10,%rsp
    8048:	mov    %r15,-0x8(%rbp)
    804c:	mov    0x8(%rdi),%rax
    8050:	mov    (%rax),%rax
    8053:	mov    $0x1,%esi
    8058:	mov    $0xc8,%edx
    805d:	mov    %rdi,%r15
    8060:	callq  *%rax
    8062:	mov    %rax,0x1f0(%r15)
    8069:	lea    0xb70(%rip),%rcx        # 8be0 <start_pass_huff>
    8070:	mov    %rcx,(%rax)
    8073:	xor    %ecx,%ecx
    8075:	jmp    80a7 <jinit_huff_encoder+0x67>
    8077:	movslq %ecx,%rdx
    807a:	movq   $0x0,0x60(%rax,%rdx,8)
    8083:	movq   $0x0,0x40(%rax,%rdx,8)
    808c:	movq   $0x0,0xa0(%rax,%rdx,8)
    8098:	movq   $0x0,0x80(%rax,%rdx,8)
    80a4:	add    $0x1,%ecx
    80a7:	cmp    $0x3,%ecx
    80aa:	jle    8077 <jinit_huff_encoder+0x37>
    80ac:	mov    -0x8(%rbp),%r15
    80b0:	leaveq 
    80b1:	retq   
    80b2:	data16 nopw %cs:0x0(%rax,%rax,1)
    80bd:	nopl   (%rax)

00000000000080c0 <jpeg_make_c_derived_tbl>:
    80c0:	push   %rbp
    80c1:	mov    %rsp,%rbp
    80c4:	sub    $0x560,%rsp
    80cb:	mov    %r12,-0x10(%rbp)
    80cf:	mov    %r13,-0x18(%rbp)
    80d3:	mov    %r14,-0x20(%rbp)
    80d7:	mov    %r15,-0x28(%rbp)
    80db:	mov    %rbx,-0x8(%rbp)
    80df:	mov    %rsi,-0x38(%rbp)
    80e3:	mov    %rdi,-0x50(%rbp)
    80e7:	test   %edx,%edx
    80e9:	js     80fe <jpeg_make_c_derived_tbl+0x3e>
    80eb:	cmp    $0x3,%edx
    80ee:	jg     80fe <jpeg_make_c_derived_tbl+0x3e>
    80f0:	mov    %rcx,%rbx
    80f3:	mov    %rdx,%r12
    80f6:	mov    %rdi,%r13
    80f9:	mov    %rsi,%r14
    80fc:	jmp    8122 <jpeg_make_c_derived_tbl+0x62>
    80fe:	mov    (%rdi),%rax
    8101:	movl   $0x32,0x28(%rax)
    8108:	mov    (%rdi),%rax
    810b:	mov    %edx,0x2c(%rax)
    810e:	mov    (%rdi),%rax
    8111:	mov    (%rax),%rax
    8114:	mov    %rcx,%rbx
    8117:	mov    %rdx,%r12
    811a:	mov    %rsi,%r14
    811d:	mov    %rdi,%r13
    8120:	callq  *%rax
    8122:	test   %r14d,%r14d
    8125:	jne    8134 <jpeg_make_c_derived_tbl+0x74>
    8127:	movslq %r12d,%rax
    812a:	mov    0xa0(%r13,%rax,8),%r14
    8132:	jmp    813f <jpeg_make_c_derived_tbl+0x7f>
    8134:	movslq %r12d,%rax
    8137:	mov    0x80(%r13,%rax,8),%r14
    813f:	test   %r14,%r14
    8142:	jne    8163 <jpeg_make_c_derived_tbl+0xa3>
    8144:	mov    0x0(%r13),%rax
    8148:	movl   $0x32,0x28(%rax)
    814f:	mov    0x0(%r13),%rax
    8153:	mov    %r12d,0x2c(%rax)
    8157:	mov    0x0(%r13),%rax
    815b:	mov    (%rax),%rax
    815e:	mov    %r13,%rdi
    8161:	callq  *%rax
    8163:	mov    $0x1,%r15d
    8169:	mov    (%rbx),%rax
    816c:	test   %rax,%rax
    816f:	jne    8188 <jpeg_make_c_derived_tbl+0xc8>
    8171:	mov    0x8(%r13),%rax
    8175:	mov    (%rax),%rax
    8178:	mov    $0x500,%edx
    817d:	mov    %r13,%rdi
    8180:	mov    %r15,%rsi
    8183:	callq  *%rax
    8185:	mov    %rax,(%rbx)
    8188:	mov    (%rbx),%rax
    818b:	mov    %rax,-0x48(%rbp)
    818f:	xor    %ebx,%ebx
    8191:	jmp    81ae <jpeg_make_c_derived_tbl+0xee>
    8193:	movslq %ebx,%rax
    8196:	mov    %r15b,-0x555(%rbp,%rax,1)
    819e:	add    $0x1,%ebx
    81a1:	add    $0xffffffff,%r12d
    81a5:	test   %r12d,%r12d
    81a8:	jne    8193 <jpeg_make_c_derived_tbl+0xd3>
    81aa:	add    $0x1,%r15d
    81ae:	cmp    $0x10,%r15d
    81b2:	jle    81db <jpeg_make_c_derived_tbl+0x11b>
    81b4:	movslq %ebx,%rax
    81b7:	movb   $0x0,-0x555(%rbp,%rax,1)
    81bf:	movsbq -0x555(%rbp),%rcx
    81c7:	mov    %r14,-0x40(%rbp)
    81cb:	mov    %rbx,-0x30(%rbp)
    81cf:	xor    %ebx,%ebx
    81d1:	mov    $0x1,%eax
    81d6:	mov    %rbx,%r12
    81d9:	jmp    8259 <jpeg_make_c_derived_tbl+0x199>
    81db:	movslq %r15d,%rax
    81de:	movzbl (%r14,%rax,1),%r12d
    81e3:	lea    (%rbx,%r12,1),%eax
    81e7:	cmp    $0x100,%eax
    81ec:	jle    81a5 <jpeg_make_c_derived_tbl+0xe5>
    81ee:	mov    0x0(%r13),%rax
    81f2:	movl   $0x8,0x28(%rax)
    81f9:	mov    0x0(%r13),%rax
    81fd:	mov    (%rax),%rax
    8200:	mov    %r13,%rdi
    8203:	callq  *%rax
    8205:	jmp    81a5 <jpeg_make_c_derived_tbl+0xe5>
    8207:	mov    %ebx,-0x454(%rbp,%rsi,4)
    820e:	add    $0x1,%ebx
    8211:	add    $0x1,%r12d
    8215:	movslq %r12d,%rsi
    8218:	movsbq -0x555(%rbp,%rsi,1),%rdx
    8221:	cmp    %edx,%ecx
    8223:	je     8207 <jpeg_make_c_derived_tbl+0x147>
    8225:	mov    %rax,%rsi
    8228:	shl    %cl,%rsi
    822b:	mov    %ebx,%edx
    822d:	cmp    %rdx,%rsi
    8230:	jg     8254 <jpeg_make_c_derived_tbl+0x194>
    8232:	mov    0x0(%r13),%rax
    8236:	movl   $0x8,0x28(%rax)
    823d:	mov    0x0(%r13),%rax
    8241:	mov    (%rax),%rax
    8244:	mov    %rcx,%r14
    8247:	mov    %r13,%rdi
    824a:	callq  *%rax
    824c:	mov    %r14,%rcx
    824f:	mov    $0x1,%eax
    8254:	add    $0x1,%ecx
    8257:	add    %ebx,%ebx
    8259:	movslq %r12d,%rdx
    825c:	movsbq -0x555(%rbp,%rdx,1),%rdx
    8265:	test   %dl,%dl
    8267:	jne    8215 <jpeg_make_c_derived_tbl+0x155>
    8269:	mov    -0x48(%rbp),%r12
    826d:	lea    0x400(%r12),%rbx
    8275:	mov    $0x100,%edx
    827a:	mov    %rbx,%rdi
    827d:	xor    %r14d,%r14d
    8280:	mov    %r14,%rsi
    8283:	callq  41e0 <memset@plt>
    8288:	mov    -0x38(%rbp),%rax
    828c:	test   %eax,%eax
    828e:	jne    829f <jpeg_make_c_derived_tbl+0x1df>
    8290:	mov    $0xff,%edx
    8295:	mov    -0x30(%rbp),%rax
    8299:	mov    -0x40(%rbp),%rcx
    829d:	jmp    8313 <jpeg_make_c_derived_tbl+0x253>
    829f:	mov    $0xf,%edx
    82a4:	mov    -0x30(%rbp),%rax
    82a8:	mov    -0x40(%rbp),%rcx
    82ac:	jmp    8313 <jpeg_make_c_derived_tbl+0x253>
    82ae:	movslq %r14d,%rsi
    82b1:	movzbl 0x11(%rcx,%rsi,1),%r15d
    82b7:	cmp    %edx,%r15d
    82ba:	jg     82c6 <jpeg_make_c_derived_tbl+0x206>
    82bc:	movsbq (%rbx,%r15,1),%rdi
    82c1:	test   %dil,%dil
    82c4:	je     82f7 <jpeg_make_c_derived_tbl+0x237>
    82c6:	mov    0x0(%r13),%rax
    82ca:	movl   $0x8,0x28(%rax)
    82d1:	mov    0x0(%r13),%rax
    82d5:	mov    (%rax),%rax
    82d8:	mov    %rdx,-0x48(%rbp)
    82dc:	mov    %r13,%rdi
    82df:	mov    %rsi,%r13
    82e2:	callq  *%rax
    82e4:	mov    %r13,%rsi
    82e7:	mov    -0x50(%rbp),%r13
    82eb:	mov    -0x48(%rbp),%rdx
    82ef:	mov    -0x30(%rbp),%rax
    82f3:	mov    -0x40(%rbp),%rcx
    82f7:	mov    -0x454(%rbp,%rsi,4),%edi
    82fe:	mov    %edi,(%r12,%r15,4)
    8302:	movsbq -0x555(%rbp,%rsi,1),%rsi
    830b:	mov    %sil,(%rbx,%r15,1)
    830f:	add    $0x1,%r14d
    8313:	cmp    %eax,%r14d
    8316:	jl     82ae <jpeg_make_c_derived_tbl+0x1ee>
    8318:	mov    -0x8(%rbp),%rbx
    831c:	mov    -0x28(%rbp),%r15
    8320:	mov    -0x20(%rbp),%r14
    8324:	mov    -0x18(%rbp),%r13
    8328:	mov    -0x10(%rbp),%r12
    832c:	leaveq 
    832d:	retq   
    832e:	xchg   %ax,%ax

0000000000008330 <jpeg_gen_optimal_table>:
    8330:	push   %rbp
    8331:	mov    %rsp,%rbp
    8334:	sub    $0x860,%rsp
    833b:	mov    %rbx,-0x8(%rbp)
    833f:	mov    %r12,-0x10(%rbp)
    8343:	mov    %r13,-0x18(%rbp)
    8347:	mov    %r14,-0x20(%rbp)
    834b:	mov    %r15,-0x28(%rbp)
    834f:	mov    %rsi,%rbx
    8352:	mov    %rdi,%r13
    8355:	mov    %rdx,%r15
    8358:	lea    -0x851(%rbp),%r12
    835f:	xor    %r14d,%r14d
    8362:	mov    $0x21,%edx
    8367:	mov    %r12,%rdi
    836a:	mov    %r14,%rsi
    836d:	callq  41e0 <memset@plt>
    8372:	lea    -0x830(%rbp),%rdi
    8379:	mov    $0x404,%edx
    837e:	mov    %r14,%rsi
    8381:	callq  41e0 <memset@plt>
    8386:	mov    %r14,%rax
    8389:	jmp    839c <jpeg_gen_optimal_table+0x6c>
    838b:	movslq %eax,%rcx
    838e:	movl   $0xffffffff,-0x42c(%rbp,%rcx,4)
    8399:	add    $0x1,%eax
    839c:	cmp    $0x100,%eax
    83a1:	jle    838b <jpeg_gen_optimal_table+0x5b>
    83a3:	movq   $0x1,0x800(%r15)
    83ae:	mov    $0xffffffffffffffff,%rdi
    83b5:	mov    $0x3b9aca00,%edx
    83ba:	mov    %rdx,%rax
    83bd:	mov    %rdi,%r8
    83c0:	mov    %r14,%rcx
    83c3:	jmp    83df <jpeg_gen_optimal_table+0xaf>
    83c5:	movslq %ecx,%rsi
    83c8:	mov    (%r15,%rsi,8),%rsi
    83cc:	test   %rsi,%rsi
    83cf:	je     83dc <jpeg_gen_optimal_table+0xac>
    83d1:	cmp    %rax,%rsi
    83d4:	jg     83dc <jpeg_gen_optimal_table+0xac>
    83d6:	mov    %rsi,%rax
    83d9:	mov    %rcx,%r8
    83dc:	add    $0x1,%ecx
    83df:	cmp    $0x100,%ecx
    83e5:	jle    83c5 <jpeg_gen_optimal_table+0x95>
    83e7:	mov    %rdx,%rcx
    83ea:	mov    %rdi,%rax
    83ed:	mov    %r14,%r9
    83f0:	jmp    8412 <jpeg_gen_optimal_table+0xe2>
    83f2:	movslq %r9d,%rsi
    83f5:	mov    (%r15,%rsi,8),%rsi
    83f9:	test   %rsi,%rsi
    83fc:	je     840e <jpeg_gen_optimal_table+0xde>
    83fe:	cmp    %rcx,%rsi
    8401:	jg     840e <jpeg_gen_optimal_table+0xde>
    8403:	cmp    %r8d,%r9d
    8406:	je     840e <jpeg_gen_optimal_table+0xde>
    8408:	mov    %rsi,%rcx
    840b:	mov    %r9,%rax
    840e:	add    $0x1,%r9d
    8412:	cmp    $0x100,%r9d
    8419:	jle    83f2 <jpeg_gen_optimal_table+0xc2>
    841b:	test   %eax,%eax
    841d:	js     8497 <jpeg_gen_optimal_table+0x167>
    841f:	movslq %r8d,%r9
    8422:	mov    (%r15,%r9,8),%rcx
    8426:	movslq %eax,%rsi
    8429:	add    (%r15,%rsi,8),%rcx
    842d:	mov    %rcx,(%r15,%r9,8)
    8431:	movq   $0x0,(%r15,%rsi,8)
    8439:	movslq -0x830(%rbp,%r9,4),%rcx
    8441:	add    $0x1,%ecx
    8444:	mov    %ecx,-0x830(%rbp,%r9,4)
    844c:	jmp    84bd <jpeg_gen_optimal_table+0x18d>
    844e:	movslq %r14d,%r15
    8451:	movslq -0x830(%rbp,%r15,4),%rax
    8459:	test   %eax,%eax
    845b:	je     8493 <jpeg_gen_optimal_table+0x163>
    845d:	cmp    $0x20,%eax
    8460:	jle    8479 <jpeg_gen_optimal_table+0x149>
    8462:	mov    0x0(%r13),%rax
    8466:	movl   $0x27,0x28(%rax)
    846d:	mov    0x0(%r13),%rax
    8471:	mov    (%rax),%rax
    8474:	mov    %r13,%rdi
    8477:	callq  *%rax
    8479:	movslq -0x830(%rbp,%r15,4),%rcx
    8481:	movzbl -0x851(%rbp,%rcx,1),%eax
    8489:	add    $0x1,%eax
    848c:	mov    %al,-0x851(%rbp,%rcx,1)
    8493:	add    $0x1,%r14d
    8497:	cmp    $0x100,%r14d
    849e:	jle    844e <jpeg_gen_optimal_table+0x11e>
    84a0:	mov    $0x20,%eax
    84a5:	jmpq   8565 <jpeg_gen_optimal_table+0x235>
    84aa:	movslq -0x830(%rbp,%r8,4),%rcx
    84b2:	add    $0x1,%ecx
    84b5:	mov    %ecx,-0x830(%rbp,%r8,4)
    84bd:	movslq %r8d,%rcx
    84c0:	movslq -0x42c(%rbp,%rcx,4),%r8
    84c8:	test   %r8d,%r8d
    84cb:	jns    84aa <jpeg_gen_optimal_table+0x17a>
    84cd:	mov    %eax,-0x42c(%rbp,%rcx,4)
    84d4:	movslq -0x830(%rbp,%rsi,4),%rcx
    84dc:	add    $0x1,%ecx
    84df:	mov    %ecx,-0x830(%rbp,%rsi,4)
    84e6:	jmpq   858a <jpeg_gen_optimal_table+0x25a>
    84eb:	add    $0xffffffff,%eax
    84ee:	movslq %eax,%r8
    84f1:	movzbl -0x851(%rbp,%r8,1),%edx
    84fa:	test   %dl,%dl
    84fc:	je     84eb <jpeg_gen_optimal_table+0x1bb>
    84fe:	movzbl -0x851(%rbp,%r9,1),%edx
    8507:	add    $0xfe,%edx
    850d:	mov    %dl,-0x851(%rbp,%r9,1)
    8515:	movzbl -0x851(%rbp,%rsi,1),%edx
    851d:	add    $0x1,%edx
    8520:	mov    %dl,-0x851(%rbp,%rsi,1)
    8527:	add    $0x1,%eax
    852a:	movslq %eax,%rdx
    852d:	movzbl -0x851(%rbp,%rdx,1),%eax
    8535:	add    $0x2,%eax
    8538:	mov    %al,-0x851(%rbp,%rdx,1)
    853f:	movzbl -0x851(%rbp,%r8,1),%eax
    8548:	add    $0xff,%eax
    854d:	mov    %al,-0x851(%rbp,%r8,1)
    8555:	movzbl -0x851(%rbp,%r9,1),%eax
    855e:	test   %al,%al
    8560:	jne    85a7 <jpeg_gen_optimal_table+0x277>
    8562:	mov    %rdi,%rax
    8565:	cmp    $0x10,%eax
    8568:	jle    85b2 <jpeg_gen_optimal_table+0x282>
    856a:	movslq %eax,%r9
    856d:	lea    -0x1(%rax),%edi
    8570:	movslq %edi,%rsi
    8573:	lea    -0x2(%rax),%ecx
    8576:	jmp    8555 <jpeg_gen_optimal_table+0x225>
    8578:	movslq -0x830(%rbp,%rax,4),%rcx
    8580:	add    $0x1,%ecx
    8583:	mov    %ecx,-0x830(%rbp,%rax,4)
    858a:	movslq %eax,%rax
    858d:	movslq -0x42c(%rbp,%rax,4),%rax
    8595:	test   %eax,%eax
    8597:	jns    8578 <jpeg_gen_optimal_table+0x248>
    8599:	mov    %rdx,%rax
    859c:	mov    %rdi,%r8
    859f:	mov    %r14,%rcx
    85a2:	jmpq   83df <jpeg_gen_optimal_table+0xaf>
    85a7:	mov    %rcx,%rax
    85aa:	jmpq   84ee <jpeg_gen_optimal_table+0x1be>
    85af:	add    $0xffffffff,%eax
    85b2:	movslq %eax,%rdx
    85b5:	movzbl -0x851(%rbp,%rdx,1),%ecx
    85bd:	test   %cl,%cl
    85bf:	je     85af <jpeg_gen_optimal_table+0x27f>
    85c1:	lea    0xff(%rcx),%eax
    85c7:	mov    %al,-0x851(%rbp,%rdx,1)
    85ce:	mov    %r12,%rsi
    85d1:	mov    $0x11,%edx
    85d6:	mov    %rbx,%rdi
    85d9:	callq  42c0 <memcpy@plt>
    85de:	mov    $0x1,%edx
    85e3:	xor    %edi,%edi
    85e5:	mov    %rdi,%rax
    85e8:	jmp    8611 <jpeg_gen_optimal_table+0x2e1>
    85ea:	movslq %ecx,%rsi
    85ed:	movslq -0x830(%rbp,%rsi,4),%rsi
    85f5:	cmp    %edx,%esi
    85f7:	jne    8603 <jpeg_gen_optimal_table+0x2d3>
    85f9:	movslq %eax,%rsi
    85fc:	mov    %cl,0x11(%rbx,%rsi,1)
    8600:	add    $0x1,%eax
    8603:	add    $0x1,%ecx
    8606:	cmp    $0xff,%ecx
    860c:	jle    85ea <jpeg_gen_optimal_table+0x2ba>
    860e:	add    $0x1,%edx
    8611:	cmp    $0x20,%edx
    8614:	jle    8636 <jpeg_gen_optimal_table+0x306>
    8616:	movl   $0x0,0x114(%rbx)
    8620:	mov    -0x28(%rbp),%r15
    8624:	mov    -0x20(%rbp),%r14
    8628:	mov    -0x18(%rbp),%r13
    862c:	mov    -0x10(%rbp),%r12
    8630:	mov    -0x8(%rbp),%rbx
    8634:	leaveq 
    8635:	retq   
    8636:	mov    %rdi,%rcx
    8639:	jmp    8606 <jpeg_gen_optimal_table+0x2d6>
    863b:	nopl   0x0(%rax,%rax,1)

0000000000008640 <encode_mcu_huff>:
    8640:	push   %rbp
    8641:	mov    %rsp,%rbp
    8644:	sub    $0x70,%rsp
    8648:	mov    0x28(%rdi),%rax
    864c:	mov    (%rax),%rax
    864f:	mov    0x1f0(%rdi),%r8
    8656:	mov    %r8,-0x28(%rbp)
    865a:	mov    %rax,-0x68(%rbp)
    865e:	mov    0x28(%rdi),%rax
    8662:	mov    0x8(%rax),%rax
    8666:	mov    %rax,-0x60(%rbp)
    866a:	mov    0x18(%r8),%rax
    866e:	mov    %rax,-0x58(%rbp)
    8672:	mov    0x20(%r8),%rax
    8676:	mov    %rax,-0x50(%rbp)
    867a:	mov    0x28(%r8),%rax
    867e:	mov    %rax,-0x48(%rbp)
    8682:	mov    0x30(%r8),%rax
    8686:	mov    %rdi,-0x38(%rbp)
    868a:	mov    %rax,-0x40(%rbp)
    868e:	lea    -0x68(%rbp),%rax
    8692:	xor    %ecx,%ecx
    8694:	mov    0x118(%rdi),%edx
    869a:	test   %edx,%edx
    869c:	jne    86d7 <encode_mcu_huff+0x97>
    869e:	mov    %r12,%rdx
    86a1:	mov    %rcx,%r12
    86a4:	mov    %r13,%rcx
    86a7:	mov    %rsi,%r13
    86aa:	mov    %rbx,%rsi
    86ad:	mov    %rdi,%rbx
    86b0:	mov    %rax,%rdi
    86b3:	mov    %rsi,%rax
    86b6:	movslq 0xc0(%r8),%rsi
    86bd:	test   %esi,%esi
    86bf:	jne    86fd <encode_mcu_huff+0xbd>
    86c1:	mov    %rax,-0x8(%rbp)
    86c5:	mov    %rdx,-0x10(%rbp)
    86c9:	mov    %rcx,-0x18(%rbp)
    86cd:	mov    %r14,-0x20(%rbp)
    86d1:	mov    %r15,-0x30(%rbp)
    86d5:	jmp    8730 <encode_mcu_huff+0xf0>
    86d7:	mov    0x38(%r8),%edx
    86db:	test   %edx,%edx
    86dd:	je     878d <encode_mcu_huff+0x14d>
    86e3:	mov    %r12,%rdx
    86e6:	mov    %rcx,%r12
    86e9:	mov    %r13,%rcx
    86ec:	mov    %rsi,%r13
    86ef:	mov    %rbx,%rsi
    86f2:	mov    %rdi,%rbx
    86f5:	mov    %rax,%rdi
    86f8:	mov    %rsi,%rax
    86fb:	jmp    86b6 <encode_mcu_huff+0x76>
    86fd:	mov    %rax,-0x8(%rbp)
    8701:	mov    %rdx,-0x10(%rbp)
    8705:	mov    %rcx,-0x18(%rbp)
    8709:	mov    %r14,-0x20(%rbp)
    870d:	mov    %r15,-0x30(%rbp)
    8711:	jmpq   87e7 <encode_mcu_huff+0x1a7>
    8716:	mov    0x0(%r13,%r14,8),%rax
    871b:	movswq (%rax),%rax
    871f:	mov    %eax,-0x4c(%rbp,%r15,4)
    8724:	add    $0x1,%r12d
    8728:	lea    -0x68(%rbp),%rdi
    872c:	mov    -0x28(%rbp),%r8
    8730:	cmp    0x170(%rbx),%r12d
    8737:	jge    8840 <encode_mcu_huff+0x200>
    873d:	movslq %r12d,%r14
    8740:	mov    0x0(%r13,%r14,8),%rsi
    8745:	movslq 0x174(%rbx,%r14,4),%r15
    874d:	movslq -0x4c(%rbp,%r15,4),%rdx
    8752:	mov    0x148(%rbx,%r15,8),%r9
    875a:	movslq 0x14(%r9),%rax
    875e:	mov    0x40(%r8,%rax,8),%rcx
    8763:	movslq 0x18(%r9),%rax
    8767:	mov    0x60(%r8,%rax,8),%r8
    876c:	callq  9120 <encode_one_block>
    8771:	test   %eax,%eax
    8773:	jne    8716 <encode_mcu_huff+0xd6>
    8775:	mov    -0x30(%rbp),%r15
    8779:	mov    -0x20(%rbp),%r14
    877d:	mov    -0x18(%rbp),%r13
    8781:	mov    -0x10(%rbp),%r12
    8785:	mov    -0x8(%rbp),%rbx
    8789:	xor    %eax,%eax
    878b:	leaveq 
    878c:	retq   
    878d:	movslq 0x3c(%r8),%rcx
    8791:	mov    %rdi,-0x30(%rbp)
    8795:	mov    %rsi,-0x20(%rbp)
    8799:	mov    %rcx,%rsi
    879c:	mov    %rax,%rdi
    879f:	callq  12410 <emit_restart>
    87a4:	test   %eax,%eax
    87a6:	je     889c <encode_mcu_huff+0x25c>
    87ac:	mov    %rbx,%rax
    87af:	mov    %r13,%rcx
    87b2:	mov    %r12,%rdx
    87b5:	lea    -0x68(%rbp),%rdi
    87b9:	xor    %r12d,%r12d
    87bc:	mov    -0x20(%rbp),%r13
    87c0:	mov    -0x30(%rbp),%rbx
    87c4:	mov    -0x28(%rbp),%r8
    87c8:	jmpq   86b6 <encode_mcu_huff+0x76>
    87cd:	mov    0x0(%r13,%r14,8),%rax
    87d2:	movswq (%rax),%rax
    87d6:	mov    %eax,-0x4c(%rbp,%r15,4)
    87db:	add    $0x1,%r12d
    87df:	lea    -0x68(%rbp),%rdi
    87e3:	mov    -0x28(%rbp),%r8
    87e7:	cmp    0x170(%rbx),%r12d
    87ee:	jge    8840 <encode_mcu_huff+0x200>
    87f0:	movslq %r12d,%r14
    87f3:	mov    0x0(%r13,%r14,8),%rsi
    87f8:	movslq 0x174(%rbx,%r14,4),%r15
    8800:	movslq -0x4c(%rbp,%r15,4),%rdx
    8805:	mov    0x148(%rbx,%r15,8),%r9
    880d:	movslq 0x14(%r9),%rax
    8811:	mov    0x40(%r8,%rax,8),%rcx
    8816:	movslq 0x18(%r9),%rax
    881a:	mov    0x60(%r8,%rax,8),%r8
    881f:	callq  9000 <encode_one_block_simd>
    8824:	test   %eax,%eax
    8826:	jne    87cd <encode_mcu_huff+0x18d>
    8828:	mov    -0x30(%rbp),%r15
    882c:	mov    -0x20(%rbp),%r14
    8830:	mov    -0x18(%rbp),%r13
    8834:	mov    -0x10(%rbp),%r12
    8838:	mov    -0x8(%rbp),%rbx
    883c:	xor    %eax,%eax
    883e:	leaveq 
    883f:	retq   
    8840:	mov    -0x68(%rbp),%rcx
    8844:	mov    0x28(%rbx),%rax
    8848:	mov    %rcx,(%rax)
    884b:	mov    -0x60(%rbp),%rcx
    884f:	mov    0x28(%rbx),%rax
    8853:	mov    %rcx,0x8(%rax)
    8857:	mov    -0x58(%rbp),%rax
    885b:	mov    %rax,0x18(%r8)
    885f:	mov    -0x50(%rbp),%rax
    8863:	mov    %rax,0x20(%r8)
    8867:	mov    -0x48(%rbp),%rax
    886b:	mov    %rax,0x28(%r8)
    886f:	mov    -0x40(%rbp),%rax
    8873:	mov    %rax,0x30(%r8)
    8877:	mov    $0x1,%eax
    887c:	mov    0x118(%rbx),%edx
    8882:	test   %edx,%edx
    8884:	jne    88a0 <encode_mcu_huff+0x260>
    8886:	mov    -0x30(%rbp),%r15
    888a:	mov    -0x20(%rbp),%r14
    888e:	mov    -0x18(%rbp),%r13
    8892:	mov    -0x10(%rbp),%r12
    8896:	mov    -0x8(%rbp),%rbx
    889a:	leaveq 
    889b:	retq   
    889c:	xor    %eax,%eax
    889e:	leaveq 
    889f:	retq   
    88a0:	mov    0x38(%r8),%ecx
    88a4:	test   %ecx,%ecx
    88a6:	jne    88ba <encode_mcu_huff+0x27a>
    88a8:	mov    %edx,0x38(%r8)
    88ac:	movslq 0x3c(%r8),%rcx
    88b0:	add    $0x1,%ecx
    88b3:	and    $0x7,%ecx
    88b6:	mov    %ecx,0x3c(%r8)
    88ba:	mov    0x38(%r8),%ecx
    88be:	add    $0xffffffff,%ecx
    88c1:	mov    %ecx,0x38(%r8)
    88c5:	mov    -0x30(%rbp),%r15
    88c9:	mov    -0x20(%rbp),%r14
    88cd:	mov    -0x18(%rbp),%r13
    88d1:	mov    -0x10(%rbp),%r12
    88d5:	mov    -0x8(%rbp),%rbx
    88d9:	leaveq 
    88da:	retq   
    88db:	nopl   0x0(%rax,%rax,1)

00000000000088e0 <finish_pass_huff>:
    88e0:	push   %rbp
    88e1:	mov    %rsp,%rbp
    88e4:	sub    $0x50,%rsp
    88e8:	mov    %r14,-0x8(%rbp)
    88ec:	mov    %r15,-0x10(%rbp)
    88f0:	mov    0x28(%rdi),%rax
    88f4:	mov    (%rax),%rax
    88f7:	mov    0x1f0(%rdi),%r15
    88fe:	mov    %rax,-0x48(%rbp)
    8902:	mov    0x28(%rdi),%rax
    8906:	mov    0x8(%rax),%rax
    890a:	mov    %rax,-0x40(%rbp)
    890e:	mov    0x18(%r15),%rax
    8912:	mov    %rax,-0x38(%rbp)
    8916:	mov    0x20(%r15),%rax
    891a:	mov    %rax,-0x30(%rbp)
    891e:	mov    0x28(%r15),%rax
    8922:	mov    %rax,-0x28(%rbp)
    8926:	mov    0x30(%r15),%rax
    892a:	mov    %rdi,-0x18(%rbp)
    892e:	mov    %rax,-0x20(%rbp)
    8932:	mov    %rdi,%r14
    8935:	lea    -0x48(%rbp),%rdi
    8939:	callq  8e90 <flush_bits>
    893e:	test   %eax,%eax
    8940:	jne    8957 <finish_pass_huff+0x77>
    8942:	mov    (%r14),%rax
    8945:	movl   $0x18,0x28(%rax)
    894c:	mov    (%r14),%rax
    894f:	mov    (%rax),%rax
    8952:	mov    %r14,%rdi
    8955:	callq  *%rax
    8957:	mov    -0x48(%rbp),%rcx
    895b:	mov    0x28(%r14),%rax
    895f:	mov    %rcx,(%rax)
    8962:	mov    -0x40(%rbp),%rcx
    8966:	mov    0x28(%r14),%rax
    896a:	mov    %rcx,0x8(%rax)
    896e:	mov    -0x38(%rbp),%rax
    8972:	mov    %rax,0x18(%r15)
    8976:	mov    -0x30(%rbp),%rax
    897a:	mov    %rax,0x20(%r15)
    897e:	mov    -0x28(%rbp),%rax
    8982:	mov    %rax,0x28(%r15)
    8986:	mov    -0x20(%rbp),%rax
    898a:	mov    %rax,0x30(%r15)
    898e:	mov    -0x10(%rbp),%r15
    8992:	mov    -0x8(%rbp),%r14
    8996:	leaveq 
    8997:	retq   
    8998:	nopl   0x0(%rax,%rax,1)

00000000000089a0 <encode_mcu_gather>:
    89a0:	push   %rbp
    89a1:	mov    %rsp,%rbp
    89a4:	sub    $0x30,%rsp
    89a8:	mov    %rdi,-0x30(%rbp)
    89ac:	mov    0x1f0(%rdi),%rdx
    89b3:	xor    %ecx,%ecx
    89b5:	mov    0x118(%rdi),%eax
    89bb:	test   %eax,%eax
    89bd:	jne    89de <encode_mcu_gather+0x3e>
    89bf:	mov    %rbx,-0x8(%rbp)
    89c3:	mov    %r12,-0x10(%rbp)
    89c7:	mov    %r13,-0x18(%rbp)
    89cb:	mov    %r14,-0x20(%rbp)
    89cf:	mov    %r15,-0x28(%rbp)
    89d3:	mov    %rcx,%rbx
    89d6:	mov    %rdx,%r12
    89d9:	mov    %rsi,%r13
    89dc:	jmp    8a40 <encode_mcu_gather+0xa0>
    89de:	mov    0x38(%rdx),%eax
    89e1:	test   %eax,%eax
    89e3:	jne    8a8a <encode_mcu_gather+0xea>
    89e9:	mov    %rcx,%rax
    89ec:	jmpq   8a75 <encode_mcu_gather+0xd5>
    89f1:	movslq %ebx,%r15
    89f4:	mov    0x0(%r13,%r15,8),%rsi
    89f9:	movslq 0x174(%rdi,%r15,4),%r14
    8a01:	movslq 0x24(%r12,%r14,4),%rdx
    8a06:	mov    0x148(%rdi,%r14,8),%r8
    8a0e:	movslq 0x14(%r8),%rax
    8a12:	mov    0x80(%r12,%rax,8),%rcx
    8a1a:	movslq 0x18(%r8),%rax
    8a1e:	mov    0xa0(%r12,%rax,8),%r8
    8a26:	callq  124e0 <htest_one_block>
    8a2b:	mov    0x0(%r13,%r15,8),%rax
    8a30:	movswq (%rax),%rax
    8a34:	mov    %eax,0x24(%r12,%r14,4)
    8a39:	add    $0x1,%ebx
    8a3c:	mov    -0x30(%rbp),%rdi
    8a40:	movslq 0x170(%rdi),%rax
    8a47:	cmp    %ebx,%eax
    8a49:	jg     89f1 <encode_mcu_gather+0x51>
    8a4b:	mov    $0x1,%eax
    8a50:	mov    -0x28(%rbp),%r15
    8a54:	mov    -0x20(%rbp),%r14
    8a58:	mov    -0x18(%rbp),%r13
    8a5c:	mov    -0x10(%rbp),%r12
    8a60:	mov    -0x8(%rbp),%rbx
    8a64:	leaveq 
    8a65:	retq   
    8a66:	movslq %eax,%r8
    8a69:	movl   $0x0,0x24(%rdx,%r8,4)
    8a72:	add    $0x1,%eax
    8a75:	movslq 0x144(%rdi),%r8
    8a7c:	cmp    %eax,%r8d
    8a7f:	jg     8a66 <encode_mcu_gather+0xc6>
    8a81:	mov    0x118(%rdi),%eax
    8a87:	mov    %eax,0x38(%rdx)
    8a8a:	mov    0x38(%rdx),%eax
    8a8d:	add    $0xffffffff,%eax
    8a90:	mov    %eax,0x38(%rdx)
    8a93:	mov    %rbx,-0x8(%rbp)
    8a97:	mov    %r12,-0x10(%rbp)
    8a9b:	mov    %r13,-0x18(%rbp)
    8a9f:	mov    %r14,-0x20(%rbp)
    8aa3:	mov    %r15,-0x28(%rbp)
    8aa7:	mov    %rcx,%rbx
    8aaa:	mov    %rdx,%r12
    8aad:	mov    %rsi,%r13
    8ab0:	jmp    8a40 <encode_mcu_gather+0xa0>
    8ab2:	data16 nopw %cs:0x0(%rax,%rax,1)
    8abd:	nopl   (%rax)

0000000000008ac0 <finish_pass_gather>:
    8ac0:	push   %rbp
    8ac1:	mov    %rsp,%rbp
    8ac4:	sub    $0x50,%rsp
    8ac8:	mov    %r12,-0x10(%rbp)
    8acc:	mov    %r13,-0x18(%rbp)
    8ad0:	mov    %r14,-0x20(%rbp)
    8ad4:	mov    %r15,-0x28(%rbp)
    8ad8:	mov    %rbx,-0x8(%rbp)
    8adc:	mov    %rdi,%r12
    8adf:	mov    0x1f0(%r12),%r13
    8ae7:	lea    -0x48(%rbp),%rdi
    8aeb:	xor    %ebx,%ebx
    8aed:	mov    $0x10,%r14d
    8af3:	mov    %rbx,%rsi
    8af6:	mov    %r14,%rdx
    8af9:	callq  41e0 <memset@plt>
    8afe:	mov    %r14,%rdx
    8b01:	lea    -0x38(%rbp),%rdi
    8b05:	mov    %rbx,%rsi
    8b08:	callq  41e0 <memset@plt>
    8b0d:	jmpq   8bb6 <finish_pass_gather+0xf6>
    8b12:	movslq %ebx,%rax
    8b15:	mov    0x148(%r12,%rax,8),%rax
    8b1d:	movslq 0x18(%rax),%r14
    8b21:	movslq 0x14(%rax),%r15
    8b25:	movslq -0x48(%rbp,%r15,4),%rax
    8b2a:	test   %eax,%eax
    8b2c:	jne    8b6c <finish_pass_gather+0xac>
    8b2e:	mov    0x80(%r12,%r15,8),%rax
    8b36:	test   %rax,%rax
    8b39:	jne    8b4b <finish_pass_gather+0x8b>
    8b3b:	mov    %r12,%rdi
    8b3e:	callq  44a0 <jpeg_alloc_huff_table@plt>
    8b43:	mov    %rax,0x80(%r12,%r15,8)
    8b4b:	mov    0x80(%r12,%r15,8),%rsi
    8b53:	mov    0x80(%r13,%r15,8),%rdx
    8b5b:	mov    %r12,%rdi
    8b5e:	callq  40f0 <jpeg_gen_optimal_table@plt>
    8b63:	movl   $0x1,-0x48(%rbp,%r15,4)
    8b6c:	movslq -0x38(%rbp,%r14,4),%rax
    8b71:	test   %eax,%eax
    8b73:	jne    8bb3 <finish_pass_gather+0xf3>
    8b75:	mov    0xa0(%r12,%r14,8),%rax
    8b7d:	test   %rax,%rax
    8b80:	jne    8b92 <finish_pass_gather+0xd2>
    8b82:	mov    %r12,%rdi
    8b85:	callq  44a0 <jpeg_alloc_huff_table@plt>
    8b8a:	mov    %rax,0xa0(%r12,%r14,8)
    8b92:	mov    0xa0(%r12,%r14,8),%rsi
    8b9a:	mov    0xa0(%r13,%r14,8),%rdx
    8ba2:	mov    %r12,%rdi
    8ba5:	callq  40f0 <jpeg_gen_optimal_table@plt>
    8baa:	movl   $0x1,-0x38(%rbp,%r14,4)
    8bb3:	add    $0x1,%ebx
    8bb6:	movslq 0x144(%r12),%rax
    8bbe:	cmp    %ebx,%eax
    8bc0:	jg     8b12 <finish_pass_gather+0x52>
    8bc6:	mov    -0x8(%rbp),%rbx
    8bca:	mov    -0x28(%rbp),%r15
    8bce:	mov    -0x20(%rbp),%r14
    8bd2:	mov    -0x18(%rbp),%r13
    8bd6:	mov    -0x10(%rbp),%r12
    8bda:	leaveq 
    8bdb:	retq   
    8bdc:	nopl   0x0(%rax)

0000000000008be0 <start_pass_huff>:
    8be0:	push   %rbp
    8be1:	mov    %rsp,%rbp
    8be4:	sub    $0x40,%rsp
    8be8:	mov    %r13,-0x18(%rbp)
    8bec:	mov    %r14,-0x20(%rbp)
    8bf0:	mov    %r15,-0x28(%rbp)
    8bf4:	mov    %rsi,-0x40(%rbp)
    8bf8:	mov    %rbx,-0x8(%rbp)
    8bfc:	mov    %r12,-0x10(%rbp)
    8c00:	mov    0x1f0(%rdi),%r12
    8c07:	test   %esi,%esi
    8c09:	jne    8c25 <start_pass_huff+0x45>
    8c0b:	lea    -0x5d2(%rip),%rax        # 8640 <encode_mcu_huff>
    8c12:	mov    %rax,0x8(%r12)
    8c17:	lea    -0x33e(%rip),%rax        # 88e0 <finish_pass_huff>
    8c1e:	mov    %rax,0x10(%r12)
    8c23:	jmp    8c3d <start_pass_huff+0x5d>
    8c25:	lea    -0x28c(%rip),%rax        # 89a0 <encode_mcu_gather>
    8c2c:	mov    %rax,0x8(%r12)
    8c31:	lea    -0x178(%rip),%rax        # 8ac0 <finish_pass_gather>
    8c38:	mov    %rax,0x10(%r12)
    8c3d:	mov    %rdi,%rbx
    8c40:	mov    %rsi,%r14
    8c43:	callq  3db40 <jsimd_can_huff_encode_one_block>
    8c48:	mov    %eax,0xc0(%r12)
    8c50:	mov    $0x1,%esi
    8c55:	mov    $0x808,%edx
    8c5a:	xor    %r15d,%r15d
    8c5d:	mov    %r15,%r13
    8c60:	jmpq   8da0 <start_pass_huff+0x1c0>
    8c65:	test   %r8d,%r8d
    8c68:	js     8c70 <start_pass_huff+0x90>
    8c6a:	cmp    $0x3,%r8d
    8c6e:	jle    8cad <start_pass_huff+0xcd>
    8c70:	mov    (%rbx),%rcx
    8c73:	movl   $0x32,0x28(%rcx)
    8c7a:	mov    (%rbx),%rcx
    8c7d:	mov    %r8d,0x2c(%rcx)
    8c81:	mov    (%rbx),%rcx
    8c84:	mov    (%rcx),%rcx
    8c87:	mov    %rbx,%rdi
    8c8a:	mov    %r13,-0x38(%rbp)
    8c8e:	mov    %r8,%r13
    8c91:	mov    %rax,%r15
    8c94:	callq  *%rcx
    8c96:	mov    %r15,%rax
    8c99:	mov    %r13,%r8
    8c9c:	mov    -0x38(%rbp),%r13
    8ca0:	mov    $0x808,%edx
    8ca5:	mov    $0x1,%esi
    8caa:	xor    %r15d,%r15d
    8cad:	test   %eax,%eax
    8caf:	js     8cb6 <start_pass_huff+0xd6>
    8cb1:	cmp    $0x3,%eax
    8cb4:	jle    8cf2 <start_pass_huff+0x112>
    8cb6:	mov    (%rbx),%rcx
    8cb9:	movl   $0x32,0x28(%rcx)
    8cc0:	mov    (%rbx),%rcx
    8cc3:	mov    %eax,0x2c(%rcx)
    8cc6:	mov    (%rbx),%rcx
    8cc9:	mov    (%rcx),%rcx
    8ccc:	mov    %rbx,%rdi
    8ccf:	mov    %r13,-0x38(%rbp)
    8cd3:	mov    %rax,%r13
    8cd6:	mov    %r8,%r15
    8cd9:	callq  *%rcx
    8cdb:	mov    %r13,%rax
    8cde:	mov    %r15,%r8
    8ce1:	mov    -0x38(%rbp),%r13
    8ce5:	mov    $0x808,%edx
    8cea:	mov    $0x1,%esi
    8cef:	xor    %r15d,%r15d
    8cf2:	mov    0x80(%r12,%r8,8),%rcx
    8cfa:	test   %rcx,%rcx
    8cfd:	jne    8d2f <start_pass_huff+0x14f>
    8cff:	mov    0x8(%rbx),%rcx
    8d03:	mov    (%rcx),%rcx
    8d06:	mov    %rbx,%rdi
    8d09:	mov    %r13,-0x30(%rbp)
    8d0d:	mov    %rax,%r13
    8d10:	mov    %r8,%r15
    8d13:	callq  *%rcx
    8d15:	mov    %rax,0x80(%r12,%r15,8)
    8d1d:	mov    %r13,%rax
    8d20:	mov    %r15,%r8
    8d23:	mov    -0x30(%rbp),%r13
    8d27:	mov    $0x808,%edx
    8d2c:	xor    %r15d,%r15d
    8d2f:	mov    0x80(%r12,%r8,8),%rdi
    8d37:	mov    %r15,%rsi
    8d3a:	mov    %rax,%r15
    8d3d:	callq  41e0 <memset@plt>
    8d42:	mov    0xa0(%r12,%r15,8),%rax
    8d4a:	test   %rax,%rax
    8d4d:	jne    8d6d <start_pass_huff+0x18d>
    8d4f:	mov    0x8(%rbx),%rax
    8d53:	mov    (%rax),%rax
    8d56:	mov    %rbx,%rdi
    8d59:	mov    $0x1,%esi
    8d5e:	mov    $0x808,%edx
    8d63:	callq  *%rax
    8d65:	mov    %rax,0xa0(%r12,%r15,8)
    8d6d:	mov    0xa0(%r12,%r15,8),%rdi
    8d75:	xor    %r15d,%r15d
    8d78:	mov    %r15,%rsi
    8d7b:	mov    $0x808,%edx
    8d80:	callq  41e0 <memset@plt>
    8d85:	movl   $0x0,0x24(%r12,%r14,4)
    8d8e:	add    $0x1,%r13d
    8d92:	mov    $0x808,%edx
    8d97:	mov    $0x1,%esi
    8d9c:	mov    -0x40(%rbp),%r14
    8da0:	movslq 0x144(%rbx),%rax
    8da7:	cmp    %r13d,%eax
    8daa:	jg     8de8 <start_pass_huff+0x208>
    8dac:	movq   $0x0,0x18(%r12)
    8db5:	movl   $0x0,0x20(%r12)
    8dbe:	mov    0x118(%rbx),%eax
    8dc4:	mov    %eax,0x38(%r12)
    8dc9:	movl   $0x0,0x3c(%r12)
    8dd2:	mov    -0x10(%rbp),%r12
    8dd6:	mov    -0x8(%rbp),%rbx
    8dda:	mov    -0x28(%rbp),%r15
    8dde:	mov    -0x20(%rbp),%r14
    8de2:	mov    -0x18(%rbp),%r13
    8de6:	leaveq 
    8de7:	retq   
    8de8:	test   %r14d,%r14d
    8deb:	movslq %r13d,%r14
    8dee:	mov    0x148(%rbx,%r14,8),%rax
    8df6:	movslq 0x14(%rax),%r8
    8dfa:	movslq 0x18(%rax),%rax
    8dfe:	jne    8c65 <start_pass_huff+0x85>
    8e04:	mov    %r8,%rdx
    8e07:	mov    %rax,%r15
    8e0a:	lea    0x40(%r12,%rdx,8),%rcx
    8e0f:	mov    %rbx,%rdi
    8e12:	callq  40d0 <jpeg_make_c_derived_tbl@plt>
    8e17:	mov    %r15,%rdx
    8e1a:	lea    0x60(%r12,%rdx,8),%rcx
    8e1f:	mov    %rbx,%rdi
    8e22:	xor    %r15d,%r15d
    8e25:	mov    %r15,%rsi
    8e28:	callq  40d0 <jpeg_make_c_derived_tbl@plt>
    8e2d:	jmpq   8d85 <start_pass_huff+0x1a5>
    8e32:	data16 nopw %cs:0x0(%rax,%rax,1)
    8e3d:	nopl   (%rax)

0000000000008e40 <dump_buffer>:
    8e40:	push   %rbp
    8e41:	mov    %rsp,%rbp
    8e44:	sub    $0x10,%rsp
    8e48:	mov    %r14,-0x8(%rbp)
    8e4c:	mov    %r15,-0x10(%rbp)
    8e50:	mov    %rdi,%r15
    8e53:	mov    0x30(%r15),%rdi
    8e57:	mov    0x28(%rdi),%r14
    8e5b:	mov    0x18(%r14),%rax
    8e5f:	callq  *%rax
    8e61:	test   %eax,%eax
    8e63:	jne    8e71 <dump_buffer+0x31>
    8e65:	xor    %eax,%eax
    8e67:	mov    -0x10(%rbp),%r15
    8e6b:	mov    -0x8(%rbp),%r14
    8e6f:	leaveq 
    8e70:	retq   
    8e71:	mov    (%r14),%rax
    8e74:	mov    %rax,(%r15)
    8e77:	mov    0x8(%r14),%rax
    8e7b:	mov    %rax,0x8(%r15)
    8e7f:	mov    $0x1,%eax
    8e84:	mov    -0x10(%rbp),%r15
    8e88:	mov    -0x8(%rbp),%r14
    8e8c:	leaveq 
    8e8d:	retq   
    8e8e:	xchg   %ax,%ax

0000000000008e90 <flush_bits>:
    8e90:	push   %rbp
    8e91:	mov    %rsp,%rbp
    8e94:	sub    $0x130,%rsp
    8e9b:	mov    0x10(%rdi),%rcx
    8e9f:	movslq 0x18(%rdi),%r8
    8ea3:	xor    %esi,%esi
    8ea5:	mov    $0x1,%eax
    8eaa:	mov    0x8(%rdi),%rdx
    8eae:	cmp    $0xff,%rdx
    8eb5:	jbe    8ebf <flush_bits+0x2f>
    8eb7:	mov    (%rdi),%rdx
    8eba:	mov    %rsi,%r9
    8ebd:	jmp    8ec9 <flush_bits+0x39>
    8ebf:	lea    -0x128(%rbp),%rdx
    8ec6:	mov    %rax,%r9
    8ec9:	shl    $0x7,%rcx
    8ecd:	lea    0x7f(%rcx),%r10
    8ed1:	lea    0x7(%r8),%ecx
    8ed5:	mov    %r13,%r8
    8ed8:	mov    %rdx,%r13
    8edb:	mov    %rbx,%rdx
    8ede:	mov    %rsi,%rbx
    8ee1:	mov    %r12,%rsi
    8ee4:	mov    %rdi,%r12
    8ee7:	jmp    8ef1 <flush_bits+0x61>
    8ee9:	movb   $0x0,(%r11)
    8eed:	add    $0x2,%r13
    8ef1:	cmp    $0x7,%ecx
    8ef4:	jg     8f33 <flush_bits+0xa3>
    8ef6:	movq   $0x0,0x10(%r12)
    8eff:	movl   $0x0,0x18(%r12)
    8f08:	test   %r9d,%r9d
    8f0b:	jg     8f4f <flush_bits+0xbf>
    8f0d:	mov    (%r12),%rcx
    8f11:	mov    %r13,%rdi
    8f14:	sub    %rcx,%rdi
    8f17:	mov    0x8(%r12),%rcx
    8f1c:	sub    %rdi,%rcx
    8f1f:	mov    %rcx,0x8(%r12)
    8f24:	mov    %r13,(%r12)
    8f28:	mov    %rdx,%rbx
    8f2b:	mov    %rsi,%r12
    8f2e:	mov    %r8,%r13
    8f31:	leaveq 
    8f32:	retq   
    8f33:	add    $0xfffffff8,%ecx
    8f36:	mov    %r10,%rdi
    8f39:	shr    %cl,%rdi
    8f3c:	mov    %dil,0x0(%r13)
    8f40:	lea    0x1(%r13),%r11
    8f44:	cmp    $0xff,%dil
    8f48:	je     8ee9 <flush_bits+0x59>
    8f4a:	mov    %r11,%r13
    8f4d:	jmp    8ef1 <flush_bits+0x61>
    8f4f:	lea    -0x128(%rbp),%rax
    8f56:	sub    %rax,%r13
    8f59:	mov    %rdx,-0x8(%rbp)
    8f5d:	mov    %rsi,-0x10(%rbp)
    8f61:	mov    %r8,-0x18(%rbp)
    8f65:	mov    %r14,-0x20(%rbp)
    8f69:	mov    %r15,-0x28(%rbp)
    8f6d:	mov    %rax,%r14
    8f70:	jmp    8fb4 <flush_bits+0x124>
    8f72:	mov    0x8(%r12),%r15
    8f77:	cmp    %r13,%r15
    8f7a:	jbe    8f7f <flush_bits+0xef>
    8f7c:	mov    %r13,%r15
    8f7f:	mov    (%r12),%rdi
    8f83:	mov    %r14,%rsi
    8f86:	mov    %r15,%rdx
    8f89:	callq  42c0 <memcpy@plt>
    8f8e:	mov    %r15,%rax
    8f91:	add    (%r12),%rax
    8f95:	mov    %rax,(%r12)
    8f99:	mov    0x8(%r12),%rcx
    8f9e:	mov    %rcx,%rax
    8fa1:	sub    %r15,%rax
    8fa4:	mov    %rax,0x8(%r12)
    8fa9:	cmp    %r15,%rcx
    8fac:	je     8fd4 <flush_bits+0x144>
    8fae:	sub    %r15,%r13
    8fb1:	add    %r15,%r14
    8fb4:	test   %r13,%r13
    8fb7:	jne    8f72 <flush_bits+0xe2>
    8fb9:	mov    $0x1,%eax
    8fbe:	mov    -0x28(%rbp),%r15
    8fc2:	mov    -0x20(%rbp),%r14
    8fc6:	mov    -0x18(%rbp),%r13
    8fca:	mov    -0x10(%rbp),%r12
    8fce:	mov    -0x8(%rbp),%rbx
    8fd2:	leaveq 
    8fd3:	retq   
    8fd4:	mov    %r12,%rdi
    8fd7:	callq  8e40 <dump_buffer>
    8fdc:	test   %eax,%eax
    8fde:	jne    8fae <flush_bits+0x11e>
    8fe0:	mov    %rbx,%rax
    8fe3:	mov    -0x28(%rbp),%r15
    8fe7:	mov    -0x20(%rbp),%r14
    8feb:	mov    -0x18(%rbp),%r13
    8fef:	mov    -0x10(%rbp),%r12
    8ff3:	mov    -0x8(%rbp),%rbx
    8ff7:	leaveq 
    8ff8:	retq   
    8ff9:	nopl   0x0(%rax)

0000000000009000 <encode_one_block_simd>:
    9000:	push   %rbp
    9001:	mov    %rsp,%rbp
    9004:	sub    $0x120,%rsp
    900b:	mov    %r14,-0x18(%rbp)
    900f:	mov    %r15,-0x20(%rbp)
    9013:	xor    %r9d,%r9d
    9016:	mov    $0x1,%r14d
    901c:	mov    0x8(%rdi),%rax
    9020:	cmp    $0xff,%rax
    9026:	jbe    9030 <encode_one_block_simd+0x30>
    9028:	mov    (%rdi),%rax
    902b:	mov    %r9,%r14
    902e:	jmp    9037 <encode_one_block_simd+0x37>
    9030:	lea    -0x120(%rbp),%rax
    9037:	mov    %r8,%r9
    903a:	mov    %rcx,%r8
    903d:	mov    %rdx,%rcx
    9040:	mov    %rsi,%rdx
    9043:	mov    %rax,%rsi
    9046:	mov    %r12,%r15
    9049:	mov    %rdi,%r12
    904c:	callq  3db80 <jsimd_huff_encode_one_block>
    9051:	test   %r14d,%r14d
    9054:	jg     9083 <encode_one_block_simd+0x83>
    9056:	mov    (%r12),%rcx
    905a:	mov    %rax,%rdx
    905d:	sub    %rcx,%rdx
    9060:	mov    0x8(%r12),%rcx
    9065:	sub    %rdx,%rcx
    9068:	mov    %rcx,0x8(%r12)
    906d:	mov    %rax,(%r12)
    9071:	mov    %r15,%r12
    9074:	mov    $0x1,%eax
    9079:	mov    -0x20(%rbp),%r15
    907d:	mov    -0x18(%rbp),%r14
    9081:	leaveq 
    9082:	retq   
    9083:	lea    -0x120(%rbp),%rcx
    908a:	mov    %rax,%r14
    908d:	sub    %rcx,%r14
    9090:	mov    %r15,-0x8(%rbp)
    9094:	mov    %r13,-0x10(%rbp)
    9098:	mov    %rcx,%r15
    909b:	jmp    90df <encode_one_block_simd+0xdf>
    909d:	mov    0x8(%r12),%r13
    90a2:	cmp    %r14,%r13
    90a5:	jbe    90aa <encode_one_block_simd+0xaa>
    90a7:	mov    %r14,%r13
    90aa:	mov    (%r12),%rdi
    90ae:	mov    %r15,%rsi
    90b1:	mov    %r13,%rdx
    90b4:	callq  42c0 <memcpy@plt>
    90b9:	mov    %r13,%rax
    90bc:	add    (%r12),%rax
    90c0:	mov    %rax,(%r12)
    90c4:	mov    0x8(%r12),%rcx
    90c9:	mov    %rcx,%rax
    90cc:	sub    %r13,%rax
    90cf:	mov    %rax,0x8(%r12)
    90d4:	cmp    %r13,%rcx
    90d7:	je     90fb <encode_one_block_simd+0xfb>
    90d9:	sub    %r13,%r14
    90dc:	add    %r13,%r15
    90df:	test   %r14,%r14
    90e2:	jne    909d <encode_one_block_simd+0x9d>
    90e4:	mov    -0x10(%rbp),%r13
    90e8:	mov    -0x8(%rbp),%r12
    90ec:	mov    $0x1,%eax
    90f1:	mov    -0x20(%rbp),%r15
    90f5:	mov    -0x18(%rbp),%r14
    90f9:	leaveq 
    90fa:	retq   
    90fb:	mov    %r12,%rdi
    90fe:	callq  8e40 <dump_buffer>
    9103:	test   %eax,%eax
    9105:	jne    90d9 <encode_one_block_simd+0xd9>
    9107:	mov    -0x10(%rbp),%r13
    910b:	mov    -0x8(%rbp),%r12
    910f:	mov    -0x20(%rbp),%r15
    9113:	mov    -0x18(%rbp),%r14
    9117:	xor    %eax,%eax
    9119:	leaveq 
    911a:	retq   
    911b:	nopl   0x0(%rax,%rax,1)

0000000000009120 <encode_one_block>:
    9120:	push   %rbp
    9121:	mov    %rsp,%rbp
    9124:	sub    $0x230,%rsp
    912b:	mov    %r15,-0x30(%rbp)
    912f:	mov    %r14,-0x28(%rbp)
    9133:	mov    %r13,-0x20(%rbp)
    9137:	mov    %rbx,-0x10(%rbp)
    913b:	mov    %rdi,-0x8(%rbp)
    913f:	mov    %r8,-0x120(%rbp)
    9146:	mov    %r12,-0x18(%rbp)
    914a:	movslq 0x3c0(%r8),%r9
    9151:	mov    %r9,-0x128(%rbp)
    9158:	movsbq 0x4f0(%r8),%rbx
    9160:	mov    0x10(%rdi),%r15
    9164:	movslq 0x18(%rdi),%r14
    9168:	xor    %eax,%eax
    916a:	mov    $0x1,%r12d
    9170:	mov    0x8(%rdi),%r10
    9174:	cmp    $0xff,%r10
    917b:	jbe    9182 <encode_one_block+0x62>
    917d:	mov    (%rdi),%r13
    9180:	jmp    918c <encode_one_block+0x6c>
    9182:	lea    -0x228(%rbp),%r13
    9189:	mov    %r12,%rax
    918c:	mov    %rax,-0x38(%rbp)
    9190:	movswq (%rsi),%rdi
    9194:	sub    %edx,%edi
    9196:	mov    %rdi,%r11
    9199:	sar    $0x1f,%r11d
    919d:	mov    %r11,%rax
    91a0:	xor    %edi,%eax
    91a2:	sub    %r11d,%eax
    91a5:	movslq %eax,%rdx
    91a8:	lea    0x40105(%rip),%rax        # 492b4 <jpeg_nbits_table>
    91af:	movzbl (%rdx,%rax,1),%edx
    91b3:	movslq (%rcx,%rdx,4),%r10
    91b7:	movsbq 0x400(%rcx,%rdx,1),%rcx
    91c0:	cmp    $0x2f,%r14d
    91c4:	jg     9318 <encode_one_block+0x1f8>
    91ca:	xchg   %rcx,%r14
    91cd:	xchg   %rcx,%r14
    91d0:	shl    %cl,%r15
    91d3:	or     %r15,%r10
    91d6:	add    %ecx,%r14d
    91d9:	cmp    $0x2f,%r14d
    91dd:	jg     9341 <encode_one_block+0x221>
    91e3:	mov    %rdx,%rcx
    91e6:	mov    %r12,%rdx
    91e9:	shl    %cl,%rdx
    91ec:	add    $0xffffffff,%edx
    91ef:	add    %r11d,%edi
    91f2:	and    %edi,%edx
    91f4:	movslq %edx,%rdi
    91f7:	shl    %cl,%r10
    91fa:	or     %r10,%rdi
    91fd:	lea    (%r14,%rcx,1),%edx
    9201:	movswq 0x2(%rsi),%r14
    9206:	test   %r14w,%r14w
    920a:	jne    9365 <encode_one_block+0x245>
    9210:	mov    $0x10,%r11d
    9216:	mov    $0x2,%r10d
    921c:	movswq 0x10(%rsi),%r14
    9221:	test   %r14w,%r14w
    9225:	je     9294 <encode_one_block+0x174>
    9227:	mov    %r14,%r15
    922a:	sar    $0x1f,%r15d
    922e:	mov    %r15,%rcx
    9231:	xor    %r14d,%ecx
    9234:	sub    %r15d,%ecx
    9237:	movslq %ecx,%rcx
    923a:	movzbl (%rcx,%rax,1),%ecx
    923e:	lea    (%r11,%rcx,1),%r10d
    9242:	movslq %r10d,%r10
    9245:	movslq (%r8,%r10,4),%r11
    9249:	movsbq 0x400(%r8,%r10,1),%r10
    9252:	cmp    $0x1f,%edx
    9255:	jg     93d6 <encode_one_block+0x2b6>
    925b:	xchg   %rdi,%r15
    925e:	shl    %cl,%r12
    9261:	add    $0xffffffff,%r12d
    9265:	add    %r14d,%edi
    9268:	and    %edi,%r12d
    926b:	movslq %r12d,%rdi
    926e:	mov    %rcx,%r12
    9271:	mov    %r10,%rcx
    9274:	shl    %cl,%r15
    9277:	mov    %rcx,%r10
    927a:	or     %r15,%r11
    927d:	mov    %r12,%rcx
    9280:	shl    %cl,%r11
    9283:	or     %r11,%rdi
    9286:	add    %r10d,%edx
    9289:	add    %ecx,%edx
    928b:	mov    $0x1,%r12d
    9291:	xor    %r10d,%r10d
    9294:	movswq 0x20(%rsi),%r14
    9299:	test   %r14w,%r14w
    929d:	je     93fc <encode_one_block+0x2dc>
    92a3:	mov    %r14,%r15
    92a6:	sar    $0x1f,%r15d
    92aa:	mov    %r15,%rcx
    92ad:	xor    %r14d,%ecx
    92b0:	sub    %r15d,%ecx
    92b3:	movslq %ecx,%rcx
    92b6:	movzbl (%rcx,%rax,1),%ecx
    92ba:	shl    $0x4,%r10d
    92be:	add    %ecx,%r10d
    92c1:	movslq %r10d,%r10
    92c4:	movslq (%r8,%r10,4),%r11
    92c8:	movsbq 0x400(%r8,%r10,1),%r10
    92d1:	cmp    $0x1f,%edx
    92d4:	jg     9484 <encode_one_block+0x364>
    92da:	xchg   %rdi,%r15
    92dd:	shl    %cl,%r12
    92e0:	add    $0xffffffff,%r12d
    92e4:	add    %r14d,%edi
    92e7:	and    %edi,%r12d
    92ea:	movslq %r12d,%rdi
    92ed:	mov    %rcx,%r12
    92f0:	mov    %r10,%rcx
    92f3:	shl    %cl,%r15
    92f6:	mov    %rcx,%r10
    92f9:	or     %r15,%r11
    92fc:	mov    %r12,%rcx
    92ff:	shl    %cl,%r11
    9302:	or     %r11,%rdi
    9305:	add    %r10d,%edx
    9308:	add    %ecx,%edx
    930a:	mov    $0x1,%r12d
    9310:	xor    %r10d,%r10d
    9313:	jmpq   9400 <encode_one_block+0x2e0>
    9318:	mov    %r14,%rax
    931b:	mov    %rcx,%r14
    931e:	lea    0x38(%rax),%ecx
    9321:	mov    %r15,%r9
    9324:	shr    %cl,%r9
    9327:	mov    %r9b,0x0(%r13)
    932b:	lea    0x1(%r13),%rcx
    932f:	cmp    $0xff,%r9b
    9333:	je     94aa <encode_one_block+0x38a>
    9339:	mov    %rcx,%r9
    933c:	jmpq   94b1 <encode_one_block+0x391>
    9341:	lea    0x38(%r14),%ecx
    9345:	mov    %r10,%r15
    9348:	shr    %cl,%r15
    934b:	mov    %r15b,0x0(%r13)
    934f:	lea    0x1(%r13),%rcx
    9353:	cmp    $0xff,%r15b
    9357:	je     94d3 <encode_one_block+0x3b3>
    935d:	mov    %rcx,%r13
    9360:	jmpq   94da <encode_one_block+0x3ba>
    9365:	mov    %r14,%r11
    9368:	sar    $0x1f,%r11d
    936c:	mov    %r11,%rcx
    936f:	xor    %r14d,%ecx
    9372:	sub    %r11d,%ecx
    9375:	movslq %ecx,%rcx
    9378:	movzbl (%rcx,%rax,1),%ecx
    937c:	movslq (%r8,%rcx,4),%r10
    9380:	movsbq 0x400(%r8,%rcx,1),%rax
    9389:	cmp    $0x1f,%edx
    938c:	jg     94fe <encode_one_block+0x3de>
    9392:	mov    %rdi,%r15
    9395:	mov    %r12,%rdi
    9398:	shl    %cl,%rdi
    939b:	add    $0xffffffff,%edi
    939e:	add    %r14d,%r11d
    93a1:	and    %r11d,%edi
    93a4:	movslq %edi,%rdi
    93a7:	mov    %rcx,%r11
    93aa:	mov    %rax,%rcx
    93ad:	shl    %cl,%r15
    93b0:	mov    %rcx,%rax
    93b3:	or     %r15,%r10
    93b6:	mov    %r11,%rcx
    93b9:	shl    %cl,%r10
    93bc:	or     %r10,%rdi
    93bf:	add    %edx,%eax
    93c1:	lea    (%rax,%rcx,1),%edx
    93c4:	lea    0x3fee9(%rip),%rax        # 492b4 <jpeg_nbits_table>
    93cb:	xor    %r11d,%r11d
    93ce:	mov    %r12,%r10
    93d1:	jmpq   921c <encode_one_block+0xfc>
    93d6:	mov    %rcx,%rax
    93d9:	lea    0x38(%rdx),%ecx
    93dc:	mov    %rdi,%r9
    93df:	shr    %cl,%r9
    93e2:	mov    %r9b,0x0(%r13)
    93e6:	lea    0x1(%r13),%rcx
    93ea:	cmp    $0xff,%r9b
    93ee:	je     9524 <encode_one_block+0x404>
    93f4:	mov    %rcx,%r9
    93f7:	jmpq   952b <encode_one_block+0x40b>
    93fc:	add    $0x1,%r10d
    9400:	movswq 0x12(%rsi),%r15
    9405:	test   %r15w,%r15w
    9409:	je     954d <encode_one_block+0x42d>
    940f:	mov    %r15,%r14
    9412:	sar    $0x1f,%r14d
    9416:	mov    %r14,%rcx
    9419:	xor    %r15d,%ecx
    941c:	sub    %r14d,%ecx
    941f:	movslq %ecx,%rcx
    9422:	movzbl (%rcx,%rax,1),%ecx
    9426:	shl    $0x4,%r10d
    942a:	add    %ecx,%r10d
    942d:	movslq %r10d,%r10
    9430:	movslq (%r8,%r10,4),%r11
    9434:	movsbq 0x400(%r8,%r10,1),%r10
    943d:	cmp    $0x1f,%edx
    9440:	jg     95d5 <encode_one_block+0x4b5>
    9446:	xchg   %rdi,%r15
    9449:	shl    %cl,%r12
    944c:	add    $0xffffffff,%r12d
    9450:	add    %r14d,%edi
    9453:	and    %edi,%r12d
    9456:	movslq %r12d,%rdi
    9459:	mov    %rcx,%r12
    945c:	mov    %r10,%rcx
    945f:	shl    %cl,%r15
    9462:	mov    %rcx,%r10
    9465:	or     %r15,%r11
    9468:	mov    %r12,%rcx
    946b:	shl    %cl,%r11
    946e:	or     %r11,%rdi
    9471:	add    %r10d,%edx
    9474:	add    %ecx,%edx
    9476:	mov    $0x1,%r12d
    947c:	xor    %r10d,%r10d
    947f:	jmpq   9551 <encode_one_block+0x431>
    9484:	mov    %rcx,%rax
    9487:	lea    0x38(%rdx),%ecx
    948a:	mov    %rdi,%r9
    948d:	shr    %cl,%r9
    9490:	mov    %r9b,0x0(%r13)
    9494:	lea    0x1(%r13),%rcx
    9498:	cmp    $0xff,%r9b
    949c:	je     95fb <encode_one_block+0x4db>
    94a2:	mov    %rcx,%r9
    94a5:	jmpq   9602 <encode_one_block+0x4e2>
    94aa:	movb   $0x0,(%rcx)
    94ad:	lea    0x2(%r13),%r9
    94b1:	lea    0x30(%rax),%ecx
    94b4:	mov    %r15,%r13
    94b7:	shr    %cl,%r13
    94ba:	mov    %r13b,(%r9)
    94bd:	lea    0x1(%r9),%rcx
    94c1:	cmp    $0xff,%r13b
    94c5:	je     9624 <encode_one_block+0x504>
    94cb:	mov    %rcx,%r9
    94ce:	jmpq   962b <encode_one_block+0x50b>
    94d3:	movb   $0x0,(%rcx)
    94d6:	add    $0x2,%r13
    94da:	lea    0x30(%r14),%ecx
    94de:	mov    %r10,%r15
    94e1:	shr    %cl,%r15
    94e4:	mov    %r15b,0x0(%r13)
    94e8:	lea    0x1(%r13),%rcx
    94ec:	cmp    $0xff,%r15b
    94f0:	je     964d <F_0_587+0x7>
    94f6:	mov    %rcx,%r13
    94f9:	jmpq   9654 <F_0_587+0xe>
    94fe:	mov    %rcx,%r15
    9501:	lea    0x38(%rdx),%ecx
    9504:	mov    %rdi,%r9
    9507:	shr    %cl,%r9
    950a:	mov    %r9b,0x0(%r13)
    950e:	lea    0x1(%r13),%rcx
    9512:	cmp    $0xff,%r9b
    9516:	je     9678 <F_0_587+0x32>
    951c:	mov    %rcx,%r9
    951f:	jmpq   967f <F_0_587+0x39>
    9524:	movb   $0x0,(%rcx)
    9527:	lea    0x2(%r13),%r9
    952b:	lea    0x30(%rdx),%ecx
    952e:	mov    %rdi,%r13
    9531:	shr    %cl,%r13
    9534:	mov    %r13b,(%r9)
    9537:	lea    0x1(%r9),%rcx
    953b:	cmp    $0xff,%r13b
    953f:	je     96a1 <F_0_587+0x5b>
    9545:	mov    %rcx,%r9
    9548:	jmpq   96a8 <F_0_587+0x62>
    954d:	add    $0x1,%r10d
    9551:	movswq 0x4(%rsi),%r14
    9556:	test   %r14w,%r14w
    955a:	je     96ca <F_0_587+0x84>
    9560:	mov    %r14,%r15
    9563:	sar    $0x1f,%r15d
    9567:	mov    %r15,%rcx
    956a:	xor    %r14d,%ecx
    956d:	sub    %r15d,%ecx
    9570:	movslq %ecx,%rcx
    9573:	movzbl (%rcx,%rax,1),%ecx
    9577:	shl    $0x4,%r10d
    957b:	add    %ecx,%r10d
    957e:	movslq %r10d,%r10
    9581:	movslq (%r8,%r10,4),%r11
    9585:	movsbq 0x400(%r8,%r10,1),%r10
    958e:	cmp    $0x1f,%edx
    9591:	jg     9707 <F_0_587+0xc1>
    9597:	xchg   %rdi,%r15
    959a:	shl    %cl,%r12
    959d:	add    $0xffffffff,%r12d
    95a1:	add    %r14d,%edi
    95a4:	and    %edi,%r12d
    95a7:	movslq %r12d,%rdi
    95aa:	mov    %rcx,%r12
    95ad:	mov    %r10,%rcx
    95b0:	shl    %cl,%r15
    95b3:	mov    %rcx,%r10
    95b6:	or     %r15,%r11
    95b9:	mov    %r12,%rcx
    95bc:	shl    %cl,%r11
    95bf:	or     %r11,%rdi
    95c2:	add    %r10d,%edx
    95c5:	add    %ecx,%edx
    95c7:	mov    $0x1,%r12d
    95cd:	xor    %r11d,%r11d
    95d0:	jmpq   96ce <F_0_587+0x88>
    95d5:	mov    %rcx,%rax
    95d8:	lea    0x38(%rdx),%ecx
    95db:	mov    %rdi,%r12
    95de:	shr    %cl,%r12
    95e1:	mov    %r12b,0x0(%r13)
    95e5:	lea    0x1(%r13),%rcx
    95e9:	cmp    $0xff,%r12b
    95ed:	je     972d <F_0_587+0xe7>
    95f3:	mov    %rcx,%r12
    95f6:	jmpq   9734 <F_0_587+0xee>
    95fb:	movb   $0x0,(%rcx)
    95fe:	lea    0x2(%r13),%r9
    9602:	lea    0x30(%rdx),%ecx
    9605:	mov    %rdi,%r13
    9608:	shr    %cl,%r13
    960b:	mov    %r13b,(%r9)
    960e:	lea    0x1(%r9),%rcx
    9612:	cmp    $0xff,%r13b
    9616:	je     9758 <F_0_587+0x112>
    961c:	mov    %rcx,%r9
    961f:	jmpq   975f <F_0_587+0x119>
    9624:	movb   $0x0,(%rcx)
    9627:	add    $0x2,%r9
    962b:	lea    0x28(%rax),%ecx
    962e:	mov    %r15,%r13
    9631:	shr    %cl,%r13
    9634:	mov    %r13b,(%r9)
    9637:	lea    0x1(%r9),%rcx
    963b:	cmp    $0xff,%r13b
    963f:	je     9781 <F_0_587+0x13b>
    9645:	mov    %rcx,%r9
    9648:	jmpq   9788 <F_0_587+0x142>
    964d:	movb   $0x0,(%rcx)
    9650:	add    $0x2,%r13
    9654:	lea    0x28(%r14),%ecx
    9658:	mov    %r10,%r15
    965b:	shr    %cl,%r15
    965e:	mov    %r15b,0x0(%r13)
    9662:	lea    0x1(%r13),%rcx
    9666:	cmp    $0xff,%r15b
    966a:	je     97aa <F_0_587+0x164>
    9670:	mov    %rcx,%r13
    9673:	jmpq   97b1 <F_0_587+0x16b>
    9678:	movb   $0x0,(%rcx)
    967b:	lea    0x2(%r13),%r9
    967f:	lea    0x30(%rdx),%ecx
    9682:	mov    %rdi,%r13
    9685:	shr    %cl,%r13
    9688:	mov    %r13b,(%r9)
    968b:	lea    0x1(%r9),%rcx
    968f:	cmp    $0xff,%r13b
    9693:	je     97d5 <F_0_587+0x18f>
    9699:	mov    %rcx,%r9
    969c:	jmpq   97dc <F_0_587+0x196>
    96a1:	movb   $0x0,(%rcx)
    96a4:	add    $0x2,%r9
    96a8:	lea    0x28(%rdx),%ecx
    96ab:	mov    %rdi,%r13
    96ae:	shr    %cl,%r13
    96b1:	mov    %r13b,(%r9)
    96b4:	lea    0x1(%r9),%rcx
    96b8:	cmp    $0xff,%r13b
    96bc:	je     97fe <F_0_587+0x1b8>
    96c2:	mov    %rcx,%r9
    96c5:	jmpq   9805 <F_0_587+0x1bf>
    96ca:	lea    0x1(%r10),%r11d
    96ce:	movswq 0x6(%rsi),%r10
    96d3:	test   %r10w,%r10w
    96d7:	je     983f <F_0_587+0x1f9>
    96dd:	mov    %r10,%r14
    96e0:	sar    $0x1f,%r14d
    96e4:	mov    %r14,-0x118(%rbp)
    96eb:	mov    %r14,%rcx
    96ee:	xor    %r10d,%ecx
    96f1:	sub    %r14d,%ecx
    96f4:	movslq %ecx,%rcx
    96f7:	movzbl (%rcx,%rax,1),%ecx
    96fb:	mov    %rcx,-0x128(%rbp)
    9702:	jmpq   9954 <F_0_587+0x30e>
    9707:	mov    %rcx,%rax
    970a:	lea    0x38(%rdx),%ecx
    970d:	mov    %rdi,%r8
    9710:	shr    %cl,%r8
    9713:	mov    %r8b,0x0(%r13)
    9717:	lea    0x1(%r13),%rcx
    971b:	cmp    $0xff,%r8b
    971f:	je     99ce <F_0_587+0x388>
    9725:	mov    %rcx,%r8
    9728:	jmpq   99d5 <F_0_587+0x38f>
    972d:	movb   $0x0,(%rcx)
    9730:	lea    0x2(%r13),%r12
    9734:	lea    0x30(%rdx),%ecx
    9737:	mov    %rdi,%r13
    973a:	shr    %cl,%r13
    973d:	mov    %r13b,(%r12)
    9741:	lea    0x1(%r12),%rcx
    9746:	cmp    $0xff,%r13b
    974a:	je     99f7 <F_0_587+0x3b1>
    9750:	mov    %rcx,%r12
    9753:	jmpq   99fe <F_0_587+0x3b8>
    9758:	movb   $0x0,(%rcx)
    975b:	add    $0x2,%r9
    975f:	lea    0x28(%rdx),%ecx
    9762:	mov    %rdi,%r13
    9765:	shr    %cl,%r13
    9768:	mov    %r13b,(%r9)
    976b:	lea    0x1(%r9),%rcx
    976f:	cmp    $0xff,%r13b
    9773:	je     9a22 <F_0_587+0x3dc>
    9779:	mov    %rcx,%r9
    977c:	jmpq   9a29 <F_0_587+0x3e3>
    9781:	movb   $0x0,(%rcx)
    9784:	add    $0x2,%r9
    9788:	lea    0x20(%rax),%ecx
    978b:	mov    %r15,%r13
    978e:	shr    %cl,%r13
    9791:	mov    %r13b,(%r9)
    9794:	lea    0x1(%r9),%rcx
    9798:	cmp    $0xff,%r13b
    979c:	je     9a63 <F_0_587+0x41d>
    97a2:	mov    %rcx,%r9
    97a5:	jmpq   9a6a <F_0_587+0x424>
    97aa:	movb   $0x0,(%rcx)
    97ad:	add    $0x2,%r13
    97b1:	lea    0x20(%r14),%ecx
    97b5:	mov    %r10,%r15
    97b8:	shr    %cl,%r15
    97bb:	mov    %r15b,0x0(%r13)
    97bf:	lea    0x1(%r13),%rcx
    97c3:	cmp    $0xff,%r15b
    97c7:	je     9a8c <F_0_587+0x446>
    97cd:	mov    %rcx,%r13
    97d0:	jmpq   9a93 <F_0_587+0x44d>
    97d5:	movb   $0x0,(%rcx)
    97d8:	add    $0x2,%r9
    97dc:	lea    0x28(%rdx),%ecx
    97df:	mov    %rdi,%r13
    97e2:	shr    %cl,%r13
    97e5:	mov    %r13b,(%r9)
    97e8:	lea    0x1(%r9),%rcx
    97ec:	cmp    $0xff,%r13b
    97f0:	je     9ab7 <F_0_587+0x471>
    97f6:	mov    %rcx,%r9
    97f9:	jmpq   9abe <F_0_587+0x478>
    97fe:	movb   $0x0,(%rcx)
    9801:	add    $0x2,%r9
    9805:	lea    -0x20(%rdx),%ecx
    9808:	mov    %rax,%r13
    980b:	mov    %rdi,%rax
    980e:	shr    %cl,%rax
    9811:	mov    %rcx,%rdx
    9814:	mov    %al,(%r9)
    9817:	lea    0x1(%r9),%rcx
    981b:	cmp    $0xff,%al
    981d:	je     9af0 <F_0_587+0x4aa>
    9823:	mov    %r13,%rax
    9826:	mov    %rcx,%r13
    9829:	mov    %rax,%rcx
    982c:	mov    -0x128(%rbp),%r9
    9833:	lea    0x3fa7a(%rip),%rax        # 492b4 <jpeg_nbits_table>
    983a:	jmpq   925b <encode_one_block+0x13b>
    983f:	add    $0x1,%r11d
    9843:	movswq 0x14(%rsi),%r10
    9848:	test   %r10w,%r10w
    984c:	je     9b13 <F_0_587+0x4cd>
    9852:	mov    %r10,%r14
    9855:	sar    $0x1f,%r14d
    9859:	mov    %r14,-0x118(%rbp)
    9860:	mov    %r14,%rcx
    9863:	xor    %r10d,%ecx
    9866:	sub    %r14d,%ecx
    9869:	movslq %ecx,%rcx
    986c:	movzbl (%rcx,%rax,1),%ecx
    9870:	mov    %rcx,-0x128(%rbp)
    9877:	jmpq   9c28 <F_0_587+0x5e2>
    987c:	cmp    $0x2f,%edx
    987f:	jle    9942 <F_0_587+0x2fc>
    9885:	lea    0x38(%rdx),%ecx
    9888:	mov    %rdi,%r15
    988b:	shr    %cl,%r15
    988e:	mov    %r15b,0x0(%r13)
    9892:	lea    0x1(%r13),%r14
    9896:	cmp    $0xff,%r15b
    989a:	jne    98a4 <F_0_587+0x25e>
    989c:	movb   $0x0,(%r14)
    98a0:	lea    0x2(%r13),%r14
    98a4:	lea    0x30(%rdx),%ecx
    98a7:	mov    %rdi,%r15
    98aa:	shr    %cl,%r15
    98ad:	mov    %r15b,(%r14)
    98b0:	lea    0x1(%r14),%r13
    98b4:	cmp    $0xff,%r15b
    98b8:	jne    98c3 <F_0_587+0x27d>
    98ba:	movb   $0x0,0x0(%r13)
    98bf:	lea    0x2(%r14),%r13
    98c3:	lea    0x28(%rdx),%ecx
    98c6:	mov    %rdi,%r15
    98c9:	shr    %cl,%r15
    98cc:	mov    %r15b,0x0(%r13)
    98d0:	lea    0x1(%r13),%r14
    98d4:	cmp    $0xff,%r15b
    98d8:	jne    98e2 <F_0_587+0x29c>
    98da:	movb   $0x0,(%r14)
    98de:	lea    0x2(%r13),%r14
    98e2:	lea    0x20(%rdx),%ecx
    98e5:	mov    %rdi,%r15
    98e8:	shr    %cl,%r15
    98eb:	mov    %r15b,(%r14)
    98ee:	lea    0x1(%r14),%r13
    98f2:	cmp    $0xff,%r15b
    98f6:	jne    9901 <F_0_587+0x2bb>
    98f8:	movb   $0x0,0x0(%r13)
    98fd:	lea    0x2(%r14),%r13
    9901:	lea    0x18(%rdx),%ecx
    9904:	mov    %rdi,%r15
    9907:	shr    %cl,%r15
    990a:	mov    %r15b,0x0(%r13)
    990e:	lea    0x1(%r13),%r14
    9912:	cmp    $0xff,%r15b
    9916:	jne    9920 <F_0_587+0x2da>
    9918:	movb   $0x0,(%r14)
    991c:	lea    0x2(%r13),%r14
    9920:	lea    -0x30(%rdx),%ecx
    9923:	mov    %rdi,%r15
    9926:	shr    %cl,%r15
    9929:	mov    %rcx,%rdx
    992c:	mov    %r15b,(%r14)
    992f:	lea    0x1(%r14),%r13
    9933:	cmp    $0xff,%r15b
    9937:	jne    9942 <F_0_587+0x2fc>
    9939:	movb   $0x0,0x0(%r13)
    993e:	lea    0x2(%r14),%r13
    9942:	mov    %rbx,%rcx
    9945:	shl    %cl,%rdi
    9948:	mov    %rcx,%rbx
    994b:	or     %r9,%rdi
    994e:	add    %ebx,%edx
    9950:	add    $0xfffffff0,%r11d
    9954:	cmp    $0xf,%r11d
    9958:	jg     987c <F_0_587+0x236>
    995e:	shl    $0x4,%r11d
    9962:	mov    -0x128(%rbp),%rcx
    9969:	add    %ecx,%r11d
    996c:	movslq %r11d,%r11
    996f:	movslq (%r8,%r11,4),%r14
    9973:	movsbq 0x400(%r8,%r11,1),%r11
    997c:	cmp    $0x1f,%edx
    997f:	jg     9ca2 <F_0_587+0x65c>
    9985:	mov    %rdi,%r15
    9988:	shl    %cl,%r12
    998b:	lea    -0x1(%r12),%edi
    9990:	mov    -0x118(%rbp),%r12
    9997:	add    %r12d,%r10d
    999a:	and    %r10d,%edi
    999d:	movslq %edi,%rdi
    99a0:	mov    %r11,%r10
    99a3:	mov    %rcx,%r11
    99a6:	mov    %r10,%rcx
    99a9:	shl    %cl,%r15
    99ac:	mov    %rcx,%r10
    99af:	or     %r15,%r14
    99b2:	mov    %r11,%rcx
    99b5:	shl    %cl,%r14
    99b8:	or     %r14,%rdi
    99bb:	add    %r10d,%edx
    99be:	add    %ecx,%edx
    99c0:	mov    $0x1,%r12d
    99c6:	xor    %r11d,%r11d
    99c9:	jmpq   9843 <F_0_587+0x1fd>
    99ce:	movb   $0x0,(%rcx)
    99d1:	lea    0x2(%r13),%r8
    99d5:	lea    0x30(%rdx),%ecx
    99d8:	mov    %rdi,%r13
    99db:	shr    %cl,%r13
    99de:	mov    %r13b,(%r8)
    99e1:	lea    0x1(%r8),%rcx
    99e5:	cmp    $0xff,%r13b
    99e9:	je     9cc8 <F_0_587+0x682>
    99ef:	mov    %rcx,%r8
    99f2:	jmpq   9ccf <F_0_587+0x689>
    99f7:	movb   $0x0,(%rcx)
    99fa:	add    $0x2,%r12
    99fe:	lea    0x28(%rdx),%ecx
    9a01:	mov    %rdi,%r13
    9a04:	shr    %cl,%r13
    9a07:	mov    %r13b,(%r12)
    9a0b:	lea    0x1(%r12),%rcx
    9a10:	cmp    $0xff,%r13b
    9a14:	je     9cf1 <F_0_587+0x6ab>
    9a1a:	mov    %rcx,%r12
    9a1d:	jmpq   9cf8 <F_0_587+0x6b2>
    9a22:	movb   $0x0,(%rcx)
    9a25:	add    $0x2,%r9
    9a29:	lea    -0x20(%rdx),%ecx
    9a2c:	mov    %rax,%r13
    9a2f:	mov    %rdi,%rax
    9a32:	shr    %cl,%rax
    9a35:	mov    %rcx,%rdx
    9a38:	mov    %al,(%r9)
    9a3b:	lea    0x1(%r9),%rcx
    9a3f:	cmp    $0xff,%al
    9a41:	je     9d33 <F_0_587+0x6ed>
    9a47:	mov    %r13,%rax
    9a4a:	mov    %rcx,%r13
    9a4d:	mov    %rax,%rcx
    9a50:	mov    -0x128(%rbp),%r9
    9a57:	lea    0x3f856(%rip),%rax        # 492b4 <jpeg_nbits_table>
    9a5e:	jmpq   92da <encode_one_block+0x1ba>
    9a63:	movb   $0x0,(%rcx)
    9a66:	add    $0x2,%r9
    9a6a:	lea    0x18(%rax),%ecx
    9a6d:	mov    %r15,%r13
    9a70:	shr    %cl,%r13
    9a73:	mov    %r13b,(%r9)
    9a76:	lea    0x1(%r9),%rcx
    9a7a:	cmp    $0xff,%r13b
    9a7e:	je     9d56 <F_0_587+0x710>
    9a84:	mov    %rcx,%r9
    9a87:	jmpq   9d5d <F_0_587+0x717>
    9a8c:	movb   $0x0,(%rcx)
    9a8f:	add    $0x2,%r13
    9a93:	lea    0x18(%r14),%ecx
    9a97:	mov    %r10,%r15
    9a9a:	shr    %cl,%r15
    9a9d:	mov    %r15b,0x0(%r13)
    9aa1:	lea    0x1(%r13),%rcx
    9aa5:	cmp    $0xff,%r15b
    9aa9:	je     9d88 <F_0_587+0x742>
    9aaf:	mov    %rcx,%r15
    9ab2:	jmpq   9d8f <F_0_587+0x749>
    9ab7:	movb   $0x0,(%rcx)
    9aba:	add    $0x2,%r9
    9abe:	lea    -0x20(%rdx),%ecx
    9ac1:	mov    %rdi,%r13
    9ac4:	shr    %cl,%r13
    9ac7:	mov    %rcx,%rdx
    9aca:	mov    %r13b,(%r9)
    9acd:	lea    0x1(%r9),%rcx
    9ad1:	cmp    $0xff,%r13b
    9ad5:	je     9db2 <F_0_587+0x76c>
    9adb:	mov    %rcx,%r13
    9ade:	mov    %r15,%rcx
    9ae1:	mov    %rdi,%r15
    9ae4:	mov    -0x128(%rbp),%r9
    9aeb:	jmpq   9395 <encode_one_block+0x275>
    9af0:	movb   $0x0,(%rcx)
    9af3:	lea    0x2(%r9),%rcx
    9af7:	mov    %r13,%rax
    9afa:	mov    %rcx,%r13
    9afd:	mov    %rax,%rcx
    9b00:	mov    -0x128(%rbp),%r9
    9b07:	lea    0x3f7a6(%rip),%rax        # 492b4 <jpeg_nbits_table>
    9b0e:	jmpq   925b <encode_one_block+0x13b>
    9b13:	add    $0x1,%r11d
    9b17:	movswq 0x22(%rsi),%r10
    9b1c:	test   %r10w,%r10w
    9b20:	je     9dcb <F_0_587+0x785>
    9b26:	mov    %r10,%r14
    9b29:	sar    $0x1f,%r14d
    9b2d:	mov    %r14,-0x110(%rbp)
    9b34:	mov    %r14,%rcx
    9b37:	xor    %r10d,%ecx
    9b3a:	sub    %r14d,%ecx
    9b3d:	movslq %ecx,%rcx
    9b40:	movzbl (%rcx,%rax,1),%ecx
    9b44:	mov    %rcx,-0x128(%rbp)
    9b4b:	jmpq   9ee0 <F_0_587+0x89a>
    9b50:	cmp    $0x2f,%edx
    9b53:	jle    9c16 <F_0_587+0x5d0>
    9b59:	lea    0x38(%rdx),%ecx
    9b5c:	mov    %rdi,%r15
    9b5f:	shr    %cl,%r15
    9b62:	mov    %r15b,0x0(%r13)
    9b66:	lea    0x1(%r13),%r14
    9b6a:	cmp    $0xff,%r15b
    9b6e:	jne    9b78 <F_0_587+0x532>
    9b70:	movb   $0x0,(%r14)
    9b74:	lea    0x2(%r13),%r14
    9b78:	lea    0x30(%rdx),%ecx
    9b7b:	mov    %rdi,%r15
    9b7e:	shr    %cl,%r15
    9b81:	mov    %r15b,(%r14)
    9b84:	lea    0x1(%r14),%r13
    9b88:	cmp    $0xff,%r15b
    9b8c:	jne    9b97 <F_0_587+0x551>
    9b8e:	movb   $0x0,0x0(%r13)
    9b93:	lea    0x2(%r14),%r13
    9b97:	lea    0x28(%rdx),%ecx
    9b9a:	mov    %rdi,%r15
    9b9d:	shr    %cl,%r15
    9ba0:	mov    %r15b,0x0(%r13)
    9ba4:	lea    0x1(%r13),%r14
    9ba8:	cmp    $0xff,%r15b
    9bac:	jne    9bb6 <F_0_587+0x570>
    9bae:	movb   $0x0,(%r14)
    9bb2:	lea    0x2(%r13),%r14
    9bb6:	lea    0x20(%rdx),%ecx
    9bb9:	mov    %rdi,%r15
    9bbc:	shr    %cl,%r15
    9bbf:	mov    %r15b,(%r14)
    9bc2:	lea    0x1(%r14),%r13
    9bc6:	cmp    $0xff,%r15b
    9bca:	jne    9bd5 <F_0_587+0x58f>
    9bcc:	movb   $0x0,0x0(%r13)
    9bd1:	lea    0x2(%r14),%r13
    9bd5:	lea    0x18(%rdx),%ecx
    9bd8:	mov    %rdi,%r15
    9bdb:	shr    %cl,%r15
    9bde:	mov    %r15b,0x0(%r13)
    9be2:	lea    0x1(%r13),%r14
    9be6:	cmp    $0xff,%r15b
    9bea:	jne    9bf4 <F_0_587+0x5ae>
    9bec:	movb   $0x0,(%r14)
    9bf0:	lea    0x2(%r13),%r14
    9bf4:	lea    -0x30(%rdx),%ecx
    9bf7:	mov    %rdi,%r15
    9bfa:	shr    %cl,%r15
    9bfd:	mov    %rcx,%rdx
    9c00:	mov    %r15b,(%r14)
    9c03:	lea    0x1(%r14),%r13
    9c07:	cmp    $0xff,%r15b
    9c0b:	jne    9c16 <F_0_587+0x5d0>
    9c0d:	movb   $0x0,0x0(%r13)
    9c12:	lea    0x2(%r14),%r13
    9c16:	mov    %rbx,%rcx
    9c19:	shl    %cl,%rdi
    9c1c:	mov    %rcx,%rbx
    9c1f:	or     %r9,%rdi
    9c22:	add    %ebx,%edx
    9c24:	add    $0xfffffff0,%r11d
    9c28:	cmp    $0xf,%r11d
    9c2c:	jg     9b50 <F_0_587+0x50a>
    9c32:	shl    $0x4,%r11d
    9c36:	mov    -0x128(%rbp),%rcx
    9c3d:	add    %ecx,%r11d
    9c40:	movslq %r11d,%r11
    9c43:	movslq (%r8,%r11,4),%r14
    9c47:	movsbq 0x400(%r8,%r11,1),%r11
    9c50:	cmp    $0x1f,%edx
    9c53:	jg     9f5a <F_0_587+0x914>
    9c59:	mov    %rdi,%r15
    9c5c:	shl    %cl,%r12
    9c5f:	lea    -0x1(%r12),%edi
    9c64:	mov    -0x118(%rbp),%r12
    9c6b:	add    %r12d,%r10d
    9c6e:	and    %r10d,%edi
    9c71:	movslq %edi,%rdi
    9c74:	mov    %r11,%r10
    9c77:	mov    %rcx,%r11
    9c7a:	mov    %r10,%rcx
    9c7d:	shl    %cl,%r15
    9c80:	mov    %rcx,%r10
    9c83:	or     %r15,%r14
    9c86:	mov    %r11,%rcx
    9c89:	shl    %cl,%r14
    9c8c:	or     %r14,%rdi
    9c8f:	add    %r10d,%edx
    9c92:	add    %ecx,%edx
    9c94:	mov    $0x1,%r12d
    9c9a:	xor    %r11d,%r11d
    9c9d:	jmpq   9b17 <F_0_587+0x4d1>
    9ca2:	mov    %rcx,%r15
    9ca5:	lea    0x38(%rdx),%ecx
    9ca8:	mov    %rdi,%r8
    9cab:	shr    %cl,%r8
    9cae:	mov    %r8b,0x0(%r13)
    9cb2:	lea    0x1(%r13),%rcx
    9cb6:	cmp    $0xff,%r8b
    9cba:	je     9f80 <F_0_587+0x93a>
    9cc0:	mov    %rcx,%r8
    9cc3:	jmpq   9f87 <F_0_587+0x941>
    9cc8:	movb   $0x0,(%rcx)
    9ccb:	add    $0x2,%r8
    9ccf:	lea    0x28(%rdx),%ecx
    9cd2:	mov    %rdi,%r13
    9cd5:	shr    %cl,%r13
    9cd8:	mov    %r13b,(%r8)
    9cdb:	lea    0x1(%r8),%rcx
    9cdf:	cmp    $0xff,%r13b
    9ce3:	je     9fa9 <F_0_587+0x963>
    9ce9:	mov    %rcx,%r8
    9cec:	jmpq   9fb0 <F_0_587+0x96a>
    9cf1:	movb   $0x0,(%rcx)
    9cf4:	add    $0x2,%r12
    9cf8:	lea    -0x20(%rdx),%ecx
    9cfb:	mov    %rax,%r13
    9cfe:	mov    %rdi,%rax
    9d01:	shr    %cl,%rax
    9d04:	mov    %rcx,%rdx
    9d07:	mov    %al,(%r12)
    9d0b:	lea    0x1(%r12),%rcx
    9d10:	cmp    $0xff,%al
    9d12:	je     9fea <F_0_587+0x9a4>
    9d18:	mov    %r13,%rax
    9d1b:	mov    %rcx,%r13
    9d1e:	mov    %rax,%rcx
    9d21:	mov    $0x1,%r12d
    9d27:	lea    0x3f586(%rip),%rax        # 492b4 <jpeg_nbits_table>
    9d2e:	jmpq   9446 <encode_one_block+0x326>
    9d33:	movb   $0x0,(%rcx)
    9d36:	lea    0x2(%r9),%rcx
    9d3a:	mov    %r13,%rax
    9d3d:	mov    %rcx,%r13
    9d40:	mov    %rax,%rcx
    9d43:	mov    -0x128(%rbp),%r9
    9d4a:	lea    0x3f563(%rip),%rax        # 492b4 <jpeg_nbits_table>
    9d51:	jmpq   92da <encode_one_block+0x1ba>
    9d56:	movb   $0x0,(%rcx)
    9d59:	add    $0x2,%r9
    9d5d:	lea    -0x30(%rax),%ecx
    9d60:	mov    %r15,%rax
    9d63:	shr    %cl,%rax
    9d66:	mov    %al,(%r9)
    9d69:	lea    0x1(%r9),%r13
    9d6d:	cmp    $0xff,%al
    9d6f:	je     a00d <F_0_587+0x9c7>
    9d75:	mov    -0x128(%rbp),%r9
    9d7c:	lea    0x3f531(%rip),%rax        # 492b4 <jpeg_nbits_table>
    9d83:	jmpq   91cd <encode_one_block+0xad>
    9d88:	movb   $0x0,(%rcx)
    9d8b:	lea    0x2(%r13),%r15
    9d8f:	lea    -0x30(%r14),%ecx
    9d93:	mov    %r10,%r14
    9d96:	shr    %cl,%r14
    9d99:	mov    %r14b,(%r15)
    9d9c:	lea    0x1(%r15),%r13
    9da0:	cmp    $0xff,%r14b
    9da4:	je     a029 <F_0_587+0x9e3>
    9daa:	mov    %rcx,%r14
    9dad:	jmpq   91e3 <encode_one_block+0xc3>
    9db2:	movb   $0x0,(%rcx)
    9db5:	lea    0x2(%r9),%r13
    9db9:	mov    %r15,%rcx
    9dbc:	mov    %rdi,%r15
    9dbf:	mov    -0x128(%rbp),%r9
    9dc6:	jmpq   9395 <encode_one_block+0x275>
    9dcb:	add    $0x1,%r11d
    9dcf:	movswq 0x30(%rsi),%r10
    9dd4:	test   %r10w,%r10w
    9dd8:	je     a03a <F_0_587+0x9f4>
    9dde:	mov    %r10,%r14
    9de1:	sar    $0x1f,%r14d
    9de5:	mov    %r14,-0x110(%rbp)
    9dec:	mov    %r14,%rcx
    9def:	xor    %r10d,%ecx
    9df2:	sub    %r14d,%ecx
    9df5:	movslq %ecx,%rcx
    9df8:	movzbl (%rcx,%rax,1),%ecx
    9dfc:	mov    %rcx,-0x128(%rbp)
    9e03:	jmpq   a14f <F_0_587+0xb09>
    9e08:	cmp    $0x2f,%edx
    9e0b:	jle    9ece <F_0_587+0x888>
    9e11:	lea    0x38(%rdx),%ecx
    9e14:	mov    %rdi,%r15
    9e17:	shr    %cl,%r15
    9e1a:	mov    %r15b,0x0(%r13)
    9e1e:	lea    0x1(%r13),%r14
    9e22:	cmp    $0xff,%r15b
    9e26:	jne    9e30 <F_0_587+0x7ea>
    9e28:	movb   $0x0,(%r14)
    9e2c:	lea    0x2(%r13),%r14
    9e30:	lea    0x30(%rdx),%ecx
    9e33:	mov    %rdi,%r15
    9e36:	shr    %cl,%r15
    9e39:	mov    %r15b,(%r14)
    9e3c:	lea    0x1(%r14),%r13
    9e40:	cmp    $0xff,%r15b
    9e44:	jne    9e4f <F_0_587+0x809>
    9e46:	movb   $0x0,0x0(%r13)
    9e4b:	lea    0x2(%r14),%r13
    9e4f:	lea    0x28(%rdx),%ecx
    9e52:	mov    %rdi,%r15
    9e55:	shr    %cl,%r15
    9e58:	mov    %r15b,0x0(%r13)
    9e5c:	lea    0x1(%r13),%r14
    9e60:	cmp    $0xff,%r15b
    9e64:	jne    9e6e <F_0_587+0x828>
    9e66:	movb   $0x0,(%r14)
    9e6a:	lea    0x2(%r13),%r14
    9e6e:	lea    0x20(%rdx),%ecx
    9e71:	mov    %rdi,%r15
    9e74:	shr    %cl,%r15
    9e77:	mov    %r15b,(%r14)
    9e7a:	lea    0x1(%r14),%r13
    9e7e:	cmp    $0xff,%r15b
    9e82:	jne    9e8d <F_0_587+0x847>
    9e84:	movb   $0x0,0x0(%r13)
    9e89:	lea    0x2(%r14),%r13
    9e8d:	lea    0x18(%rdx),%ecx
    9e90:	mov    %rdi,%r15
    9e93:	shr    %cl,%r15
    9e96:	mov    %r15b,0x0(%r13)
    9e9a:	lea    0x1(%r13),%r14
    9e9e:	cmp    $0xff,%r15b
    9ea2:	jne    9eac <F_0_587+0x866>
    9ea4:	movb   $0x0,(%r14)
    9ea8:	lea    0x2(%r13),%r14
    9eac:	lea    -0x30(%rdx),%ecx
    9eaf:	mov    %rdi,%r15
    9eb2:	shr    %cl,%r15
    9eb5:	mov    %rcx,%rdx
    9eb8:	mov    %r15b,(%r14)
    9ebb:	lea    0x1(%r14),%r13
    9ebf:	cmp    $0xff,%r15b
    9ec3:	jne    9ece <F_0_587+0x888>
    9ec5:	movb   $0x0,0x0(%r13)
    9eca:	lea    0x2(%r14),%r13
    9ece:	mov    %rbx,%rcx
    9ed1:	shl    %cl,%rdi
    9ed4:	mov    %rcx,%rbx
    9ed7:	or     %r9,%rdi
    9eda:	add    %ebx,%edx
    9edc:	add    $0xfffffff0,%r11d
    9ee0:	cmp    $0xf,%r11d
    9ee4:	jg     9e08 <F_0_587+0x7c2>
    9eea:	shl    $0x4,%r11d
    9eee:	mov    -0x128(%rbp),%rcx
    9ef5:	add    %ecx,%r11d
    9ef8:	movslq %r11d,%r11
    9efb:	movslq (%r8,%r11,4),%r14
    9eff:	movsbq 0x400(%r8,%r11,1),%r11
    9f08:	cmp    $0x1f,%edx
    9f0b:	jg     a1c9 <F_0_587+0xb83>
    9f11:	mov    %rdi,%r15
    9f14:	shl    %cl,%r12
    9f17:	lea    -0x1(%r12),%edi
    9f1c:	mov    -0x110(%rbp),%r12
    9f23:	add    %r12d,%r10d
    9f26:	and    %r10d,%edi
    9f29:	movslq %edi,%rdi
    9f2c:	mov    %r11,%r10
    9f2f:	mov    %rcx,%r11
    9f32:	mov    %r10,%rcx
    9f35:	shl    %cl,%r15
    9f38:	mov    %rcx,%r10
    9f3b:	or     %r15,%r14
    9f3e:	mov    %r11,%rcx
    9f41:	shl    %cl,%r14
    9f44:	or     %r14,%rdi
    9f47:	add    %r10d,%edx
    9f4a:	add    %ecx,%edx
    9f4c:	mov    $0x1,%r12d
    9f52:	xor    %r11d,%r11d
    9f55:	jmpq   9dcf <F_0_587+0x789>
    9f5a:	mov    %rcx,%r15
    9f5d:	lea    0x38(%rdx),%ecx
    9f60:	mov    %rdi,%r8
    9f63:	shr    %cl,%r8
    9f66:	mov    %r8b,0x0(%r13)
    9f6a:	lea    0x1(%r13),%rcx
    9f6e:	cmp    $0xff,%r8b
    9f72:	je     a1ef <F_0_587+0xba9>
    9f78:	mov    %rcx,%r8
    9f7b:	jmpq   a1f6 <F_0_587+0xbb0>
    9f80:	movb   $0x0,(%rcx)
    9f83:	lea    0x2(%r13),%r8
    9f87:	lea    0x30(%rdx),%ecx
    9f8a:	mov    %rdi,%r13
    9f8d:	shr    %cl,%r13
    9f90:	mov    %r13b,(%r8)
    9f93:	lea    0x1(%r8),%rcx
    9f97:	cmp    $0xff,%r13b
    9f9b:	je     a218 <F_0_587+0xbd2>
    9fa1:	mov    %rcx,%r8
    9fa4:	jmpq   a21f <F_0_587+0xbd9>
    9fa9:	movb   $0x0,(%rcx)
    9fac:	add    $0x2,%r8
    9fb0:	lea    -0x20(%rdx),%ecx
    9fb3:	mov    %rax,%r13
    9fb6:	mov    %rdi,%rax
    9fb9:	shr    %cl,%rax
    9fbc:	mov    %rcx,%rdx
    9fbf:	mov    %al,(%r8)
    9fc2:	lea    0x1(%r8),%rcx
    9fc6:	cmp    $0xff,%al
    9fc8:	je     a241 <F_0_587+0xbfb>
    9fce:	mov    %r13,%rax
    9fd1:	mov    %rcx,%r13
    9fd4:	mov    %rax,%rcx
    9fd7:	mov    -0x120(%rbp),%r8
    9fde:	lea    0x3f2cf(%rip),%rax        # 492b4 <jpeg_nbits_table>
    9fe5:	jmpq   9597 <encode_one_block+0x477>
    9fea:	movb   $0x0,(%rcx)
    9fed:	lea    0x2(%r12),%rcx
    9ff2:	mov    %r13,%rax
    9ff5:	mov    %rcx,%r13
    9ff8:	mov    %rax,%rcx
    9ffb:	mov    $0x1,%r12d
    a001:	lea    0x3f2ac(%rip),%rax        # 492b4 <jpeg_nbits_table>
    a008:	jmpq   9446 <encode_one_block+0x326>
    a00d:	movb   $0x0,0x0(%r13)
    a012:	lea    0x2(%r9),%r13
    a016:	mov    -0x128(%rbp),%r9
    a01d:	lea    0x3f290(%rip),%rax        # 492b4 <jpeg_nbits_table>
    a024:	jmpq   91cd <encode_one_block+0xad>
    a029:	movb   $0x0,0x0(%r13)
    a02e:	lea    0x2(%r15),%r13
    a032:	mov    %rcx,%r14
    a035:	jmpq   91e3 <encode_one_block+0xc3>
    a03a:	add    $0x1,%r11d
    a03e:	movswq 0x40(%rsi),%r10
    a043:	test   %r10w,%r10w
    a047:	je     a264 <F_0_587+0xc1e>
    a04d:	mov    %r10,%r14
    a050:	sar    $0x1f,%r14d
    a054:	mov    %r14,-0x108(%rbp)
    a05b:	mov    %r14,%rcx
    a05e:	xor    %r10d,%ecx
    a061:	sub    %r14d,%ecx
    a064:	movslq %ecx,%rcx
    a067:	movzbl (%rcx,%rax,1),%ecx
    a06b:	mov    %rcx,-0x128(%rbp)
    a072:	jmpq   a379 <F_0_587+0xd33>
    a077:	cmp    $0x2f,%edx
    a07a:	jle    a13d <F_0_587+0xaf7>
    a080:	lea    0x38(%rdx),%ecx
    a083:	mov    %rdi,%r15
    a086:	shr    %cl,%r15
    a089:	mov    %r15b,0x0(%r13)
    a08d:	lea    0x1(%r13),%r14
    a091:	cmp    $0xff,%r15b
    a095:	jne    a09f <F_0_587+0xa59>
    a097:	movb   $0x0,(%r14)
    a09b:	lea    0x2(%r13),%r14
    a09f:	lea    0x30(%rdx),%ecx
    a0a2:	mov    %rdi,%r15
    a0a5:	shr    %cl,%r15
    a0a8:	mov    %r15b,(%r14)
    a0ab:	lea    0x1(%r14),%r13
    a0af:	cmp    $0xff,%r15b
    a0b3:	jne    a0be <F_0_587+0xa78>
    a0b5:	movb   $0x0,0x0(%r13)
    a0ba:	lea    0x2(%r14),%r13
    a0be:	lea    0x28(%rdx),%ecx
    a0c1:	mov    %rdi,%r15
    a0c4:	shr    %cl,%r15
    a0c7:	mov    %r15b,0x0(%r13)
    a0cb:	lea    0x1(%r13),%r14
    a0cf:	cmp    $0xff,%r15b
    a0d3:	jne    a0dd <F_0_587+0xa97>
    a0d5:	movb   $0x0,(%r14)
    a0d9:	lea    0x2(%r13),%r14
    a0dd:	lea    0x20(%rdx),%ecx
    a0e0:	mov    %rdi,%r15
    a0e3:	shr    %cl,%r15
    a0e6:	mov    %r15b,(%r14)
    a0e9:	lea    0x1(%r14),%r13
    a0ed:	cmp    $0xff,%r15b
    a0f1:	jne    a0fc <F_0_587+0xab6>
    a0f3:	movb   $0x0,0x0(%r13)
    a0f8:	lea    0x2(%r14),%r13
    a0fc:	lea    0x18(%rdx),%ecx
    a0ff:	mov    %rdi,%r15
    a102:	shr    %cl,%r15
    a105:	mov    %r15b,0x0(%r13)
    a109:	lea    0x1(%r13),%r14
    a10d:	cmp    $0xff,%r15b
    a111:	jne    a11b <F_0_587+0xad5>
    a113:	movb   $0x0,(%r14)
    a117:	lea    0x2(%r13),%r14
    a11b:	lea    -0x30(%rdx),%ecx
    a11e:	mov    %rdi,%r15
    a121:	shr    %cl,%r15
    a124:	mov    %rcx,%rdx
    a127:	mov    %r15b,(%r14)
    a12a:	lea    0x1(%r14),%r13
    a12e:	cmp    $0xff,%r15b
    a132:	jne    a13d <F_0_587+0xaf7>
    a134:	movb   $0x0,0x0(%r13)
    a139:	lea    0x2(%r14),%r13
    a13d:	mov    %rbx,%rcx
    a140:	shl    %cl,%rdi
    a143:	mov    %rcx,%rbx
    a146:	or     %r9,%rdi
    a149:	add    %ebx,%edx
    a14b:	add    $0xfffffff0,%r11d
    a14f:	cmp    $0xf,%r11d
    a153:	jg     a077 <F_0_587+0xa31>
    a159:	shl    $0x4,%r11d
    a15d:	mov    -0x128(%rbp),%rcx
    a164:	add    %ecx,%r11d
    a167:	movslq %r11d,%r11
    a16a:	movslq (%r8,%r11,4),%r14
    a16e:	movsbq 0x400(%r8,%r11,1),%r11
    a177:	cmp    $0x1f,%edx
    a17a:	jg     a3f3 <F_0_587+0xdad>
    a180:	mov    %rdi,%r15
    a183:	shl    %cl,%r12
    a186:	lea    -0x1(%r12),%edi
    a18b:	mov    -0x110(%rbp),%r12
    a192:	add    %r12d,%r10d
    a195:	and    %r10d,%edi
    a198:	movslq %edi,%rdi
    a19b:	mov    %r11,%r10
    a19e:	mov    %rcx,%r11
    a1a1:	mov    %r10,%rcx
    a1a4:	shl    %cl,%r15
    a1a7:	mov    %rcx,%r10
    a1aa:	or     %r15,%r14
    a1ad:	mov    %r11,%rcx
    a1b0:	shl    %cl,%r14
    a1b3:	or     %r14,%rdi
    a1b6:	add    %r10d,%edx
    a1b9:	add    %ecx,%edx
    a1bb:	mov    $0x1,%r12d
    a1c1:	xor    %r11d,%r11d
    a1c4:	jmpq   a03e <F_0_587+0x9f8>
    a1c9:	mov    %rcx,%r15
    a1cc:	lea    0x38(%rdx),%ecx
    a1cf:	mov    %rdi,%r8
    a1d2:	shr    %cl,%r8
    a1d5:	mov    %r8b,0x0(%r13)
    a1d9:	lea    0x1(%r13),%rcx
    a1dd:	cmp    $0xff,%r8b
    a1e1:	je     a419 <F_0_587+0xdd3>
    a1e7:	mov    %rcx,%r8
    a1ea:	jmpq   a420 <F_0_587+0xdda>
    a1ef:	movb   $0x0,(%rcx)
    a1f2:	lea    0x2(%r13),%r8
    a1f6:	lea    0x30(%rdx),%ecx
    a1f9:	mov    %rdi,%r13
    a1fc:	shr    %cl,%r13
    a1ff:	mov    %r13b,(%r8)
    a202:	lea    0x1(%r8),%rcx
    a206:	cmp    $0xff,%r13b
    a20a:	je     a442 <F_0_587+0xdfc>
    a210:	mov    %rcx,%r8
    a213:	jmpq   a449 <F_0_587+0xe03>
    a218:	movb   $0x0,(%rcx)
    a21b:	add    $0x2,%r8
    a21f:	lea    0x28(%rdx),%ecx
    a222:	mov    %rdi,%r13
    a225:	shr    %cl,%r13
    a228:	mov    %r13b,(%r8)
    a22b:	lea    0x1(%r8),%rcx
    a22f:	cmp    $0xff,%r13b
    a233:	je     a46b <F_0_587+0xe25>
    a239:	mov    %rcx,%r8
    a23c:	jmpq   a472 <F_0_587+0xe2c>
    a241:	movb   $0x0,(%rcx)
    a244:	lea    0x2(%r8),%rcx
    a248:	mov    %r13,%rax
    a24b:	mov    %rcx,%r13
    a24e:	mov    %rax,%rcx
    a251:	mov    -0x120(%rbp),%r8
    a258:	lea    0x3f055(%rip),%rax        # 492b4 <jpeg_nbits_table>
    a25f:	jmpq   9597 <encode_one_block+0x477>
    a264:	add    $0x1,%r11d
    a268:	movswq 0x32(%rsi),%r10
    a26d:	test   %r10w,%r10w
    a271:	je     a4a4 <F_0_587+0xe5e>
    a277:	mov    %r10,%r14
    a27a:	sar    $0x1f,%r14d
    a27e:	mov    %r14,-0x108(%rbp)
    a285:	mov    %r14,%rcx
    a288:	xor    %r10d,%ecx
    a28b:	sub    %r14d,%ecx
    a28e:	movslq %ecx,%rcx
    a291:	movzbl (%rcx,%rax,1),%ecx
    a295:	mov    %rcx,-0x128(%rbp)
    a29c:	jmpq   a5b9 <F_0_587+0xf73>
    a2a1:	cmp    $0x2f,%edx
    a2a4:	jle    a367 <F_0_587+0xd21>
    a2aa:	lea    0x38(%rdx),%ecx
    a2ad:	mov    %rdi,%r15
    a2b0:	shr    %cl,%r15
    a2b3:	mov    %r15b,0x0(%r13)
    a2b7:	lea    0x1(%r13),%r14
    a2bb:	cmp    $0xff,%r15b
    a2bf:	jne    a2c9 <F_0_587+0xc83>
    a2c1:	movb   $0x0,(%r14)
    a2c5:	lea    0x2(%r13),%r14
    a2c9:	lea    0x30(%rdx),%ecx
    a2cc:	mov    %rdi,%r15
    a2cf:	shr    %cl,%r15
    a2d2:	mov    %r15b,(%r14)
    a2d5:	lea    0x1(%r14),%r13
    a2d9:	cmp    $0xff,%r15b
    a2dd:	jne    a2e8 <F_0_587+0xca2>
    a2df:	movb   $0x0,0x0(%r13)
    a2e4:	lea    0x2(%r14),%r13
    a2e8:	lea    0x28(%rdx),%ecx
    a2eb:	mov    %rdi,%r15
    a2ee:	shr    %cl,%r15
    a2f1:	mov    %r15b,0x0(%r13)
    a2f5:	lea    0x1(%r13),%r14
    a2f9:	cmp    $0xff,%r15b
    a2fd:	jne    a307 <F_0_587+0xcc1>
    a2ff:	movb   $0x0,(%r14)
    a303:	lea    0x2(%r13),%r14
    a307:	lea    0x20(%rdx),%ecx
    a30a:	mov    %rdi,%r15
    a30d:	shr    %cl,%r15
    a310:	mov    %r15b,(%r14)
    a313:	lea    0x1(%r14),%r13
    a317:	cmp    $0xff,%r15b
    a31b:	jne    a326 <F_0_587+0xce0>
    a31d:	movb   $0x0,0x0(%r13)
    a322:	lea    0x2(%r14),%r13
    a326:	lea    0x18(%rdx),%ecx
    a329:	mov    %rdi,%r15
    a32c:	shr    %cl,%r15
    a32f:	mov    %r15b,0x0(%r13)
    a333:	lea    0x1(%r13),%r14
    a337:	cmp    $0xff,%r15b
    a33b:	jne    a345 <F_0_587+0xcff>
    a33d:	movb   $0x0,(%r14)
    a341:	lea    0x2(%r13),%r14
    a345:	lea    -0x30(%rdx),%ecx
    a348:	mov    %rdi,%r15
    a34b:	shr    %cl,%r15
    a34e:	mov    %rcx,%rdx
    a351:	mov    %r15b,(%r14)
    a354:	lea    0x1(%r14),%r13
    a358:	cmp    $0xff,%r15b
    a35c:	jne    a367 <F_0_587+0xd21>
    a35e:	movb   $0x0,0x0(%r13)
    a363:	lea    0x2(%r14),%r13
    a367:	mov    %rbx,%rcx
    a36a:	shl    %cl,%rdi
    a36d:	mov    %rcx,%rbx
    a370:	or     %r9,%rdi
    a373:	add    %ebx,%edx
    a375:	add    $0xfffffff0,%r11d
    a379:	cmp    $0xf,%r11d
    a37d:	jg     a2a1 <F_0_587+0xc5b>
    a383:	shl    $0x4,%r11d
    a387:	mov    -0x128(%rbp),%rcx
    a38e:	add    %ecx,%r11d
    a391:	movslq %r11d,%r11
    a394:	movslq (%r8,%r11,4),%r14
    a398:	movsbq 0x400(%r8,%r11,1),%r11
    a3a1:	cmp    $0x1f,%edx
    a3a4:	jg     a633 <F_0_587+0xfed>
    a3aa:	mov    %rdi,%r15
    a3ad:	shl    %cl,%r12
    a3b0:	lea    -0x1(%r12),%edi
    a3b5:	mov    -0x108(%rbp),%r12
    a3bc:	add    %r12d,%r10d
    a3bf:	and    %r10d,%edi
    a3c2:	movslq %edi,%rdi
    a3c5:	mov    %r11,%r10
    a3c8:	mov    %rcx,%r11
    a3cb:	mov    %r10,%rcx
    a3ce:	shl    %cl,%r15
    a3d1:	mov    %rcx,%r10
    a3d4:	or     %r15,%r14
    a3d7:	mov    %r11,%rcx
    a3da:	shl    %cl,%r14
    a3dd:	or     %r14,%rdi
    a3e0:	add    %r10d,%edx
    a3e3:	add    %ecx,%edx
    a3e5:	mov    $0x1,%r12d
    a3eb:	xor    %r11d,%r11d
    a3ee:	jmpq   a268 <F_0_587+0xc22>
    a3f3:	mov    %rcx,%r15
    a3f6:	lea    0x38(%rdx),%ecx
    a3f9:	mov    %rdi,%r8
    a3fc:	shr    %cl,%r8
    a3ff:	mov    %r8b,0x0(%r13)
    a403:	lea    0x1(%r13),%rcx
    a407:	cmp    $0xff,%r8b
    a40b:	je     a659 <F_0_587+0x1013>
    a411:	mov    %rcx,%r8
    a414:	jmpq   a660 <F_0_587+0x101a>
    a419:	movb   $0x0,(%rcx)
    a41c:	lea    0x2(%r13),%r8
    a420:	lea    0x30(%rdx),%ecx
    a423:	mov    %rdi,%r13
    a426:	shr    %cl,%r13
    a429:	mov    %r13b,(%r8)
    a42c:	lea    0x1(%r8),%rcx
    a430:	cmp    $0xff,%r13b
    a434:	je     a682 <F_0_587+0x103c>
    a43a:	mov    %rcx,%r8
    a43d:	jmpq   a689 <F_0_587+0x1043>
    a442:	movb   $0x0,(%rcx)
    a445:	add    $0x2,%r8
    a449:	lea    0x28(%rdx),%ecx
    a44c:	mov    %rdi,%r13
    a44f:	shr    %cl,%r13
    a452:	mov    %r13b,(%r8)
    a455:	lea    0x1(%r8),%rcx
    a459:	cmp    $0xff,%r13b
    a45d:	je     a6ab <F_0_587+0x1065>
    a463:	mov    %rcx,%r8
    a466:	jmpq   a6b2 <F_0_587+0x106c>
    a46b:	movb   $0x0,(%rcx)
    a46e:	add    $0x2,%r8
    a472:	lea    -0x20(%rdx),%ecx
    a475:	mov    %rdi,%r13
    a478:	shr    %cl,%r13
    a47b:	mov    %rcx,%rdx
    a47e:	mov    %r13b,(%r8)
    a481:	lea    0x1(%r8),%rcx
    a485:	cmp    $0xff,%r13b
    a489:	je     a6e4 <F_0_587+0x109e>
    a48f:	mov    %rcx,%r13
    a492:	mov    %r15,%rcx
    a495:	mov    %rdi,%r15
    a498:	mov    -0x120(%rbp),%r8
    a49f:	jmpq   9988 <F_0_587+0x342>
    a4a4:	add    $0x1,%r11d
    a4a8:	movswq 0x24(%rsi),%r10
    a4ad:	test   %r10w,%r10w
    a4b1:	je     a6fd <F_0_587+0x10b7>
    a4b7:	mov    %r10,%r14
    a4ba:	sar    $0x1f,%r14d
    a4be:	mov    %r14,-0x100(%rbp)
    a4c5:	mov    %r14,%rcx
    a4c8:	xor    %r10d,%ecx
    a4cb:	sub    %r14d,%ecx
    a4ce:	movslq %ecx,%rcx
    a4d1:	movzbl (%rcx,%rax,1),%ecx
    a4d5:	mov    %rcx,-0x128(%rbp)
    a4dc:	jmpq   a812 <F_0_587+0x11cc>
    a4e1:	cmp    $0x2f,%edx
    a4e4:	jle    a5a7 <F_0_587+0xf61>
    a4ea:	lea    0x38(%rdx),%ecx
    a4ed:	mov    %rdi,%r15
    a4f0:	shr    %cl,%r15
    a4f3:	mov    %r15b,0x0(%r13)
    a4f7:	lea    0x1(%r13),%r14
    a4fb:	cmp    $0xff,%r15b
    a4ff:	jne    a509 <F_0_587+0xec3>
    a501:	movb   $0x0,(%r14)
    a505:	lea    0x2(%r13),%r14
    a509:	lea    0x30(%rdx),%ecx
    a50c:	mov    %rdi,%r15
    a50f:	shr    %cl,%r15
    a512:	mov    %r15b,(%r14)
    a515:	lea    0x1(%r14),%r13
    a519:	cmp    $0xff,%r15b
    a51d:	jne    a528 <F_0_587+0xee2>
    a51f:	movb   $0x0,0x0(%r13)
    a524:	lea    0x2(%r14),%r13
    a528:	lea    0x28(%rdx),%ecx
    a52b:	mov    %rdi,%r15
    a52e:	shr    %cl,%r15
    a531:	mov    %r15b,0x0(%r13)
    a535:	lea    0x1(%r13),%r14
    a539:	cmp    $0xff,%r15b
    a53d:	jne    a547 <F_0_587+0xf01>
    a53f:	movb   $0x0,(%r14)
    a543:	lea    0x2(%r13),%r14
    a547:	lea    0x20(%rdx),%ecx
    a54a:	mov    %rdi,%r15
    a54d:	shr    %cl,%r15
    a550:	mov    %r15b,(%r14)
    a553:	lea    0x1(%r14),%r13
    a557:	cmp    $0xff,%r15b
    a55b:	jne    a566 <F_0_587+0xf20>
    a55d:	movb   $0x0,0x0(%r13)
    a562:	lea    0x2(%r14),%r13
    a566:	lea    0x18(%rdx),%ecx
    a569:	mov    %rdi,%r15
    a56c:	shr    %cl,%r15
    a56f:	mov    %r15b,0x0(%r13)
    a573:	lea    0x1(%r13),%r14
    a577:	cmp    $0xff,%r15b
    a57b:	jne    a585 <F_0_587+0xf3f>
    a57d:	movb   $0x0,(%r14)
    a581:	lea    0x2(%r13),%r14
    a585:	lea    -0x30(%rdx),%ecx
    a588:	mov    %rdi,%r15
    a58b:	shr    %cl,%r15
    a58e:	mov    %rcx,%rdx
    a591:	mov    %r15b,(%r14)
    a594:	lea    0x1(%r14),%r13
    a598:	cmp    $0xff,%r15b
    a59c:	jne    a5a7 <F_0_587+0xf61>
    a59e:	movb   $0x0,0x0(%r13)
    a5a3:	lea    0x2(%r14),%r13
    a5a7:	mov    %rbx,%rcx
    a5aa:	shl    %cl,%rdi
    a5ad:	mov    %rcx,%rbx
    a5b0:	or     %r9,%rdi
    a5b3:	add    %ebx,%edx
    a5b5:	add    $0xfffffff0,%r11d
    a5b9:	cmp    $0xf,%r11d
    a5bd:	jg     a4e1 <F_0_587+0xe9b>
    a5c3:	shl    $0x4,%r11d
    a5c7:	mov    -0x128(%rbp),%rcx
    a5ce:	add    %ecx,%r11d
    a5d1:	movslq %r11d,%r11
    a5d4:	movslq (%r8,%r11,4),%r14
    a5d8:	movsbq 0x400(%r8,%r11,1),%r11
    a5e1:	cmp    $0x1f,%edx
    a5e4:	jg     a889 <F_0_587+0x1243>
    a5ea:	mov    %rdi,%r15
    a5ed:	shl    %cl,%r12
    a5f0:	lea    -0x1(%r12),%edi
    a5f5:	mov    -0x108(%rbp),%r12
    a5fc:	add    %r12d,%r10d
    a5ff:	and    %r10d,%edi
    a602:	movslq %edi,%rdi
    a605:	mov    %r11,%r10
    a608:	mov    %rcx,%r11
    a60b:	mov    %r10,%rcx
    a60e:	shl    %cl,%r15
    a611:	mov    %rcx,%r10
    a614:	or     %r15,%r14
    a617:	mov    %r11,%rcx
    a61a:	shl    %cl,%r14
    a61d:	or     %r14,%rdi
    a620:	add    %r10d,%edx
    a623:	add    %ecx,%edx
    a625:	mov    $0x1,%r12d
    a62b:	xor    %r11d,%r11d
    a62e:	jmpq   a4a8 <F_0_587+0xe62>
    a633:	mov    %rcx,%r15
    a636:	lea    0x38(%rdx),%ecx
    a639:	mov    %rdi,%r8
    a63c:	shr    %cl,%r8
    a63f:	mov    %r8b,0x0(%r13)
    a643:	lea    0x1(%r13),%rcx
    a647:	cmp    $0xff,%r8b
    a64b:	je     a8af <F_0_587+0x1269>
    a651:	mov    %rcx,%r8
    a654:	jmpq   a8b6 <F_0_587+0x1270>
    a659:	movb   $0x0,(%rcx)
    a65c:	lea    0x2(%r13),%r8
    a660:	lea    0x30(%rdx),%ecx
    a663:	mov    %rdi,%r13
    a666:	shr    %cl,%r13
    a669:	mov    %r13b,(%r8)
    a66c:	lea    0x1(%r8),%rcx
    a670:	cmp    $0xff,%r13b
    a674:	je     a8d8 <F_0_587+0x1292>
    a67a:	mov    %rcx,%r8
    a67d:	jmpq   a8df <F_0_587+0x1299>
    a682:	movb   $0x0,(%rcx)
    a685:	add    $0x2,%r8
    a689:	lea    0x28(%rdx),%ecx
    a68c:	mov    %rdi,%r13
    a68f:	shr    %cl,%r13
    a692:	mov    %r13b,(%r8)
    a695:	lea    0x1(%r8),%rcx
    a699:	cmp    $0xff,%r13b
    a69d:	je     a901 <F_0_587+0x12bb>
    a6a3:	mov    %rcx,%r8
    a6a6:	jmpq   a908 <F_0_587+0x12c2>
    a6ab:	movb   $0x0,(%rcx)
    a6ae:	add    $0x2,%r8
    a6b2:	lea    -0x20(%rdx),%ecx
    a6b5:	mov    %rdi,%r13
    a6b8:	shr    %cl,%r13
    a6bb:	mov    %rcx,%rdx
    a6be:	mov    %r13b,(%r8)
    a6c1:	lea    0x1(%r8),%rcx
    a6c5:	cmp    $0xff,%r13b
    a6c9:	je     a93a <F_0_587+0x12f4>
    a6cf:	mov    %rcx,%r13
    a6d2:	mov    %r15,%rcx
    a6d5:	mov    %rdi,%r15
    a6d8:	mov    -0x120(%rbp),%r8
    a6df:	jmpq   9c5c <F_0_587+0x616>
    a6e4:	movb   $0x0,(%rcx)
    a6e7:	lea    0x2(%r8),%r13
    a6eb:	mov    %r15,%rcx
    a6ee:	mov    %rdi,%r15
    a6f1:	mov    -0x120(%rbp),%r8
    a6f8:	jmpq   9988 <F_0_587+0x342>
    a6fd:	add    $0x1,%r11d
    a701:	movswq 0x16(%rsi),%r10
    a706:	test   %r10w,%r10w
    a70a:	je     a953 <F_0_587+0x130d>
    a710:	mov    %r10,%r14
    a713:	sar    $0x1f,%r14d
    a717:	mov    %r14,-0x100(%rbp)
    a71e:	mov    %r14,%rcx
    a721:	xor    %r10d,%ecx
    a724:	sub    %r14d,%ecx
    a727:	movslq %ecx,%rcx
    a72a:	movzbl (%rcx,%rax,1),%ecx
    a72e:	mov    %rcx,-0x128(%rbp)
    a735:	jmpq   aa68 <F_0_587+0x1422>
    a73a:	cmp    $0x2f,%edx
    a73d:	jle    a800 <F_0_587+0x11ba>
    a743:	lea    0x38(%rdx),%ecx
    a746:	mov    %rdi,%r15
    a749:	shr    %cl,%r15
    a74c:	mov    %r15b,0x0(%r13)
    a750:	lea    0x1(%r13),%r14
    a754:	cmp    $0xff,%r15b
    a758:	jne    a762 <F_0_587+0x111c>
    a75a:	movb   $0x0,(%r14)
    a75e:	lea    0x2(%r13),%r14
    a762:	lea    0x30(%rdx),%ecx
    a765:	mov    %rdi,%r15
    a768:	shr    %cl,%r15
    a76b:	mov    %r15b,(%r14)
    a76e:	lea    0x1(%r14),%r13
    a772:	cmp    $0xff,%r15b
    a776:	jne    a781 <F_0_587+0x113b>
    a778:	movb   $0x0,0x0(%r13)
    a77d:	lea    0x2(%r14),%r13
    a781:	lea    0x28(%rdx),%ecx
    a784:	mov    %rdi,%r15
    a787:	shr    %cl,%r15
    a78a:	mov    %r15b,0x0(%r13)
    a78e:	lea    0x1(%r13),%r14
    a792:	cmp    $0xff,%r15b
    a796:	jne    a7a0 <F_0_587+0x115a>
    a798:	movb   $0x0,(%r14)
    a79c:	lea    0x2(%r13),%r14
    a7a0:	lea    0x20(%rdx),%ecx
    a7a3:	mov    %rdi,%r15
    a7a6:	shr    %cl,%r15
    a7a9:	mov    %r15b,(%r14)
    a7ac:	lea    0x1(%r14),%r13
    a7b0:	cmp    $0xff,%r15b
    a7b4:	jne    a7bf <F_0_587+0x1179>
    a7b6:	movb   $0x0,0x0(%r13)
    a7bb:	lea    0x2(%r14),%r13
    a7bf:	lea    0x18(%rdx),%ecx
    a7c2:	mov    %rdi,%r15
    a7c5:	shr    %cl,%r15
    a7c8:	mov    %r15b,0x0(%r13)
    a7cc:	lea    0x1(%r13),%r14
    a7d0:	cmp    $0xff,%r15b
    a7d4:	jne    a7de <F_0_587+0x1198>
    a7d6:	movb   $0x0,(%r14)
    a7da:	lea    0x2(%r13),%r14
    a7de:	lea    -0x30(%rdx),%ecx
    a7e1:	mov    %rdi,%r15
    a7e4:	shr    %cl,%r15
    a7e7:	mov    %rcx,%rdx
    a7ea:	mov    %r15b,(%r14)
    a7ed:	lea    0x1(%r14),%r13
    a7f1:	cmp    $0xff,%r15b
    a7f5:	jne    a800 <F_0_587+0x11ba>
    a7f7:	movb   $0x0,0x0(%r13)
    a7fc:	lea    0x2(%r14),%r13
    a800:	mov    %rbx,%rcx
    a803:	shl    %cl,%rdi
    a806:	mov    %rcx,%rbx
    a809:	or     %r9,%rdi
    a80c:	add    %ebx,%edx
    a80e:	add    $0xfffffff0,%r11d
    a812:	cmp    $0xf,%r11d
    a816:	jg     a73a <F_0_587+0x10f4>
    a81c:	shl    $0x4,%r11d
    a820:	mov    -0x128(%rbp),%rcx
    a827:	add    %ecx,%r11d
    a82a:	movslq %r11d,%r14
    a82d:	movslq (%r8,%r14,4),%r11
    a831:	movsbq 0x400(%r8,%r14,1),%r14
    a83a:	cmp    $0x1f,%edx
    a83d:	jg     aadf <F_0_587+0x1499>
    a843:	mov    %rdi,%r15
    a846:	shl    %cl,%r12
    a849:	lea    -0x1(%r12),%edi
    a84e:	mov    -0x100(%rbp),%r12
    a855:	add    %r12d,%r10d
    a858:	and    %r10d,%edi
    a85b:	movslq %edi,%rdi
    a85e:	mov    %rcx,%r12
    a861:	mov    %r14,%rcx
    a864:	shl    %cl,%r15
    a867:	mov    %rcx,%r10
    a86a:	or     %r15,%r11
    a86d:	mov    %r12,%rcx
    a870:	shl    %cl,%r11
    a873:	or     %r11,%rdi
    a876:	add    %r10d,%edx
    a879:	add    %ecx,%edx
    a87b:	mov    $0x1,%r12d
    a881:	xor    %r11d,%r11d
    a884:	jmpq   a701 <F_0_587+0x10bb>
    a889:	mov    %rcx,%r15
    a88c:	lea    0x38(%rdx),%ecx
    a88f:	mov    %rdi,%r8
    a892:	shr    %cl,%r8
    a895:	mov    %r8b,0x0(%r13)
    a899:	lea    0x1(%r13),%rcx
    a89d:	cmp    $0xff,%r8b
    a8a1:	je     ab05 <F_0_587+0x14bf>
    a8a7:	mov    %rcx,%r8
    a8aa:	jmpq   ab0c <F_0_587+0x14c6>
    a8af:	movb   $0x0,(%rcx)
    a8b2:	lea    0x2(%r13),%r8
    a8b6:	lea    0x30(%rdx),%ecx
    a8b9:	mov    %rdi,%r13
    a8bc:	shr    %cl,%r13
    a8bf:	mov    %r13b,(%r8)
    a8c2:	lea    0x1(%r8),%rcx
    a8c6:	cmp    $0xff,%r13b
    a8ca:	je     ab2e <F_0_587+0x14e8>
    a8d0:	mov    %rcx,%r8
    a8d3:	jmpq   ab35 <F_0_587+0x14ef>
    a8d8:	movb   $0x0,(%rcx)
    a8db:	add    $0x2,%r8
    a8df:	lea    0x28(%rdx),%ecx
    a8e2:	mov    %rdi,%r13
    a8e5:	shr    %cl,%r13
    a8e8:	mov    %r13b,(%r8)
    a8eb:	lea    0x1(%r8),%rcx
    a8ef:	cmp    $0xff,%r13b
    a8f3:	je     ab57 <F_0_587+0x1511>
    a8f9:	mov    %rcx,%r8
    a8fc:	jmpq   ab5e <F_0_587+0x1518>
    a901:	movb   $0x0,(%rcx)
    a904:	add    $0x2,%r8
    a908:	lea    -0x20(%rdx),%ecx
    a90b:	mov    %rdi,%r13
    a90e:	shr    %cl,%r13
    a911:	mov    %rcx,%rdx
    a914:	mov    %r13b,(%r8)
    a917:	lea    0x1(%r8),%rcx
    a91b:	cmp    $0xff,%r13b
    a91f:	je     ab90 <F_0_587+0x154a>
    a925:	mov    %rcx,%r13
    a928:	mov    %r15,%rcx
    a92b:	mov    %rdi,%r15
    a92e:	mov    -0x120(%rbp),%r8
    a935:	jmpq   9f14 <F_0_587+0x8ce>
    a93a:	movb   $0x0,(%rcx)
    a93d:	lea    0x2(%r8),%r13
    a941:	mov    %r15,%rcx
    a944:	mov    %rdi,%r15
    a947:	mov    -0x120(%rbp),%r8
    a94e:	jmpq   9c5c <F_0_587+0x616>
    a953:	add    $0x1,%r11d
    a957:	movswq 0x8(%rsi),%r10
    a95c:	test   %r10w,%r10w
    a960:	je     aba9 <F_0_587+0x1563>
    a966:	mov    %r10,%r14
    a969:	sar    $0x1f,%r14d
    a96d:	mov    %r14,-0xf8(%rbp)
    a974:	mov    %r14,%rcx
    a977:	xor    %r10d,%ecx
    a97a:	sub    %r14d,%ecx
    a97d:	movslq %ecx,%rcx
    a980:	movzbl (%rcx,%rax,1),%ecx
    a984:	mov    %rcx,-0x128(%rbp)
    a98b:	jmpq   acbe <F_0_587+0x1678>
    a990:	cmp    $0x2f,%edx
    a993:	jle    aa56 <F_0_587+0x1410>
    a999:	lea    0x38(%rdx),%ecx
    a99c:	mov    %rdi,%r15
    a99f:	shr    %cl,%r15
    a9a2:	mov    %r15b,0x0(%r13)
    a9a6:	lea    0x1(%r13),%r14
    a9aa:	cmp    $0xff,%r15b
    a9ae:	jne    a9b8 <F_0_587+0x1372>
    a9b0:	movb   $0x0,(%r14)
    a9b4:	lea    0x2(%r13),%r14
    a9b8:	lea    0x30(%rdx),%ecx
    a9bb:	mov    %rdi,%r15
    a9be:	shr    %cl,%r15
    a9c1:	mov    %r15b,(%r14)
    a9c4:	lea    0x1(%r14),%r13
    a9c8:	cmp    $0xff,%r15b
    a9cc:	jne    a9d7 <F_0_587+0x1391>
    a9ce:	movb   $0x0,0x0(%r13)
    a9d3:	lea    0x2(%r14),%r13
    a9d7:	lea    0x28(%rdx),%ecx
    a9da:	mov    %rdi,%r15
    a9dd:	shr    %cl,%r15
    a9e0:	mov    %r15b,0x0(%r13)
    a9e4:	lea    0x1(%r13),%r14
    a9e8:	cmp    $0xff,%r15b
    a9ec:	jne    a9f6 <F_0_587+0x13b0>
    a9ee:	movb   $0x0,(%r14)
    a9f2:	lea    0x2(%r13),%r14
    a9f6:	lea    0x20(%rdx),%ecx
    a9f9:	mov    %rdi,%r15
    a9fc:	shr    %cl,%r15
    a9ff:	mov    %r15b,(%r14)
    aa02:	lea    0x1(%r14),%r13
    aa06:	cmp    $0xff,%r15b
    aa0a:	jne    aa15 <F_0_587+0x13cf>
    aa0c:	movb   $0x0,0x0(%r13)
    aa11:	lea    0x2(%r14),%r13
    aa15:	lea    0x18(%rdx),%ecx
    aa18:	mov    %rdi,%r15
    aa1b:	shr    %cl,%r15
    aa1e:	mov    %r15b,0x0(%r13)
    aa22:	lea    0x1(%r13),%r14
    aa26:	cmp    $0xff,%r15b
    aa2a:	jne    aa34 <F_0_587+0x13ee>
    aa2c:	movb   $0x0,(%r14)
    aa30:	lea    0x2(%r13),%r14
    aa34:	lea    -0x30(%rdx),%ecx
    aa37:	mov    %rdi,%r15
    aa3a:	shr    %cl,%r15
    aa3d:	mov    %rcx,%rdx
    aa40:	mov    %r15b,(%r14)
    aa43:	lea    0x1(%r14),%r13
    aa47:	cmp    $0xff,%r15b
    aa4b:	jne    aa56 <F_0_587+0x1410>
    aa4d:	movb   $0x0,0x0(%r13)
    aa52:	lea    0x2(%r14),%r13
    aa56:	mov    %rbx,%rcx
    aa59:	shl    %cl,%rdi
    aa5c:	mov    %rcx,%rbx
    aa5f:	or     %r9,%rdi
    aa62:	add    %ebx,%edx
    aa64:	add    $0xfffffff0,%r11d
    aa68:	cmp    $0xf,%r11d
    aa6c:	jg     a990 <F_0_587+0x134a>
    aa72:	shl    $0x4,%r11d
    aa76:	mov    -0x128(%rbp),%rcx
    aa7d:	add    %ecx,%r11d
    aa80:	movslq %r11d,%r14
    aa83:	movslq (%r8,%r14,4),%r11
    aa87:	movsbq 0x400(%r8,%r14,1),%r14
    aa90:	cmp    $0x1f,%edx
    aa93:	jg     ad35 <F_0_587+0x16ef>
    aa99:	mov    %rdi,%r15
    aa9c:	shl    %cl,%r12
    aa9f:	lea    -0x1(%r12),%edi
    aaa4:	mov    -0x100(%rbp),%r12
    aaab:	add    %r12d,%r10d
    aaae:	and    %r10d,%edi
    aab1:	movslq %edi,%rdi
    aab4:	mov    %rcx,%r12
    aab7:	mov    %r14,%rcx
    aaba:	shl    %cl,%r15
    aabd:	mov    %rcx,%r10
    aac0:	or     %r15,%r11
    aac3:	mov    %r12,%rcx
    aac6:	shl    %cl,%r11
    aac9:	or     %r11,%rdi
    aacc:	add    %r10d,%edx
    aacf:	add    %ecx,%edx
    aad1:	mov    $0x1,%r12d
    aad7:	xor    %r11d,%r11d
    aada:	jmpq   a957 <F_0_587+0x1311>
    aadf:	mov    %rcx,%r15
    aae2:	lea    0x38(%rdx),%ecx
    aae5:	mov    %rdi,%r8
    aae8:	shr    %cl,%r8
    aaeb:	mov    %r8b,0x0(%r13)
    aaef:	lea    0x1(%r13),%rcx
    aaf3:	cmp    $0xff,%r8b
    aaf7:	je     ad5b <F_0_587+0x1715>
    aafd:	mov    %rcx,%r8
    ab00:	jmpq   ad62 <F_0_587+0x171c>
    ab05:	movb   $0x0,(%rcx)
    ab08:	lea    0x2(%r13),%r8
    ab0c:	lea    0x30(%rdx),%ecx
    ab0f:	mov    %rdi,%r13
    ab12:	shr    %cl,%r13
    ab15:	mov    %r13b,(%r8)
    ab18:	lea    0x1(%r8),%rcx
    ab1c:	cmp    $0xff,%r13b
    ab20:	je     ad84 <F_0_587+0x173e>
    ab26:	mov    %rcx,%r8
    ab29:	jmpq   ad8b <F_0_587+0x1745>
    ab2e:	movb   $0x0,(%rcx)
    ab31:	add    $0x2,%r8
    ab35:	lea    0x28(%rdx),%ecx
    ab38:	mov    %rdi,%r13
    ab3b:	shr    %cl,%r13
    ab3e:	mov    %r13b,(%r8)
    ab41:	lea    0x1(%r8),%rcx
    ab45:	cmp    $0xff,%r13b
    ab49:	je     adad <F_0_587+0x1767>
    ab4f:	mov    %rcx,%r8
    ab52:	jmpq   adb4 <F_0_587+0x176e>
    ab57:	movb   $0x0,(%rcx)
    ab5a:	add    $0x2,%r8
    ab5e:	lea    -0x20(%rdx),%ecx
    ab61:	mov    %rdi,%r13
    ab64:	shr    %cl,%r13
    ab67:	mov    %rcx,%rdx
    ab6a:	mov    %r13b,(%r8)
    ab6d:	lea    0x1(%r8),%rcx
    ab71:	cmp    $0xff,%r13b
    ab75:	je     ade6 <F_0_587+0x17a0>
    ab7b:	mov    %rcx,%r13
    ab7e:	mov    %r15,%rcx
    ab81:	mov    %rdi,%r15
    ab84:	mov    -0x120(%rbp),%r8
    ab8b:	jmpq   a183 <F_0_587+0xb3d>
    ab90:	movb   $0x0,(%rcx)
    ab93:	lea    0x2(%r8),%r13
    ab97:	mov    %r15,%rcx
    ab9a:	mov    %rdi,%r15
    ab9d:	mov    -0x120(%rbp),%r8
    aba4:	jmpq   9f14 <F_0_587+0x8ce>
    aba9:	add    $0x1,%r11d
    abad:	movswq 0xa(%rsi),%r10
    abb2:	test   %r10w,%r10w
    abb6:	je     adff <F_0_587+0x17b9>
    abbc:	mov    %r10,%r14
    abbf:	sar    $0x1f,%r14d
    abc3:	mov    %r14,-0xf8(%rbp)
    abca:	mov    %r14,%rcx
    abcd:	xor    %r10d,%ecx
    abd0:	sub    %r14d,%ecx
    abd3:	movslq %ecx,%rcx
    abd6:	movzbl (%rcx,%rax,1),%ecx
    abda:	mov    %rcx,-0x128(%rbp)
    abe1:	jmpq   af14 <F_0_587+0x18ce>
    abe6:	cmp    $0x2f,%edx
    abe9:	jle    acac <F_0_587+0x1666>
    abef:	lea    0x38(%rdx),%ecx
    abf2:	mov    %rdi,%r15
    abf5:	shr    %cl,%r15
    abf8:	mov    %r15b,0x0(%r13)
    abfc:	lea    0x1(%r13),%r14
    ac00:	cmp    $0xff,%r15b
    ac04:	jne    ac0e <F_0_587+0x15c8>
    ac06:	movb   $0x0,(%r14)
    ac0a:	lea    0x2(%r13),%r14
    ac0e:	lea    0x30(%rdx),%ecx
    ac11:	mov    %rdi,%r15
    ac14:	shr    %cl,%r15
    ac17:	mov    %r15b,(%r14)
    ac1a:	lea    0x1(%r14),%r13
    ac1e:	cmp    $0xff,%r15b
    ac22:	jne    ac2d <F_0_587+0x15e7>
    ac24:	movb   $0x0,0x0(%r13)
    ac29:	lea    0x2(%r14),%r13
    ac2d:	lea    0x28(%rdx),%ecx
    ac30:	mov    %rdi,%r15
    ac33:	shr    %cl,%r15
    ac36:	mov    %r15b,0x0(%r13)
    ac3a:	lea    0x1(%r13),%r14
    ac3e:	cmp    $0xff,%r15b
    ac42:	jne    ac4c <F_0_587+0x1606>
    ac44:	movb   $0x0,(%r14)
    ac48:	lea    0x2(%r13),%r14
    ac4c:	lea    0x20(%rdx),%ecx
    ac4f:	mov    %rdi,%r15
    ac52:	shr    %cl,%r15
    ac55:	mov    %r15b,(%r14)
    ac58:	lea    0x1(%r14),%r13
    ac5c:	cmp    $0xff,%r15b
    ac60:	jne    ac6b <F_0_587+0x1625>
    ac62:	movb   $0x0,0x0(%r13)
    ac67:	lea    0x2(%r14),%r13
    ac6b:	lea    0x18(%rdx),%ecx
    ac6e:	mov    %rdi,%r15
    ac71:	shr    %cl,%r15
    ac74:	mov    %r15b,0x0(%r13)
    ac78:	lea    0x1(%r13),%r14
    ac7c:	cmp    $0xff,%r15b
    ac80:	jne    ac8a <F_0_587+0x1644>
    ac82:	movb   $0x0,(%r14)
    ac86:	lea    0x2(%r13),%r14
    ac8a:	lea    -0x30(%rdx),%ecx
    ac8d:	mov    %rdi,%r15
    ac90:	shr    %cl,%r15
    ac93:	mov    %rcx,%rdx
    ac96:	mov    %r15b,(%r14)
    ac99:	lea    0x1(%r14),%r13
    ac9d:	cmp    $0xff,%r15b
    aca1:	jne    acac <F_0_587+0x1666>
    aca3:	movb   $0x0,0x0(%r13)
    aca8:	lea    0x2(%r14),%r13
    acac:	mov    %rbx,%rcx
    acaf:	shl    %cl,%rdi
    acb2:	mov    %rcx,%rbx
    acb5:	or     %r9,%rdi
    acb8:	add    %ebx,%edx
    acba:	add    $0xfffffff0,%r11d
    acbe:	cmp    $0xf,%r11d
    acc2:	jg     abe6 <F_0_587+0x15a0>
    acc8:	shl    $0x4,%r11d
    accc:	mov    -0x128(%rbp),%rcx
    acd3:	add    %ecx,%r11d
    acd6:	movslq %r11d,%r14
    acd9:	movslq (%r8,%r14,4),%r11
    acdd:	movsbq 0x400(%r8,%r14,1),%r14
    ace6:	cmp    $0x1f,%edx
    ace9:	jg     af8b <F_0_587+0x1945>
    acef:	mov    %rdi,%r15
    acf2:	shl    %cl,%r12
    acf5:	lea    -0x1(%r12),%edi
    acfa:	mov    -0xf8(%rbp),%r12
    ad01:	add    %r12d,%r10d
    ad04:	and    %r10d,%edi
    ad07:	movslq %edi,%rdi
    ad0a:	mov    %rcx,%r12
    ad0d:	mov    %r14,%rcx
    ad10:	shl    %cl,%r15
    ad13:	mov    %rcx,%r10
    ad16:	or     %r15,%r11
    ad19:	mov    %r12,%rcx
    ad1c:	shl    %cl,%r11
    ad1f:	or     %r11,%rdi
    ad22:	add    %r10d,%edx
    ad25:	add    %ecx,%edx
    ad27:	mov    $0x1,%r12d
    ad2d:	xor    %r11d,%r11d
    ad30:	jmpq   abad <F_0_587+0x1567>
    ad35:	mov    %rcx,%r15
    ad38:	lea    0x38(%rdx),%ecx
    ad3b:	mov    %rdi,%r8
    ad3e:	shr    %cl,%r8
    ad41:	mov    %r8b,0x0(%r13)
    ad45:	lea    0x1(%r13),%rcx
    ad49:	cmp    $0xff,%r8b
    ad4d:	je     afb1 <F_0_587+0x196b>
    ad53:	mov    %rcx,%r8
    ad56:	jmpq   afb8 <F_0_587+0x1972>
    ad5b:	movb   $0x0,(%rcx)
    ad5e:	lea    0x2(%r13),%r8
    ad62:	lea    0x30(%rdx),%ecx
    ad65:	mov    %rdi,%r13
    ad68:	shr    %cl,%r13
    ad6b:	mov    %r13b,(%r8)
    ad6e:	lea    0x1(%r8),%rcx
    ad72:	cmp    $0xff,%r13b
    ad76:	je     afda <F_0_587+0x1994>
    ad7c:	mov    %rcx,%r8
    ad7f:	jmpq   afe1 <F_0_587+0x199b>
    ad84:	movb   $0x0,(%rcx)
    ad87:	add    $0x2,%r8
    ad8b:	lea    0x28(%rdx),%ecx
    ad8e:	mov    %rdi,%r13
    ad91:	shr    %cl,%r13
    ad94:	mov    %r13b,(%r8)
    ad97:	lea    0x1(%r8),%rcx
    ad9b:	cmp    $0xff,%r13b
    ad9f:	je     b003 <F_0_587+0x19bd>
    ada5:	mov    %rcx,%r8
    ada8:	jmpq   b00a <F_0_587+0x19c4>
    adad:	movb   $0x0,(%rcx)
    adb0:	add    $0x2,%r8
    adb4:	lea    -0x20(%rdx),%ecx
    adb7:	mov    %rdi,%r13
    adba:	shr    %cl,%r13
    adbd:	mov    %rcx,%rdx
    adc0:	mov    %r13b,(%r8)
    adc3:	lea    0x1(%r8),%rcx
    adc7:	cmp    $0xff,%r13b
    adcb:	je     b03c <F_0_587+0x19f6>
    add1:	mov    %rcx,%r13
    add4:	mov    %r15,%rcx
    add7:	mov    %rdi,%r15
    adda:	mov    -0x120(%rbp),%r8
    ade1:	jmpq   a3ad <F_0_587+0xd67>
    ade6:	movb   $0x0,(%rcx)
    ade9:	lea    0x2(%r8),%r13
    aded:	mov    %r15,%rcx
    adf0:	mov    %rdi,%r15
    adf3:	mov    -0x120(%rbp),%r8
    adfa:	jmpq   a183 <F_0_587+0xb3d>
    adff:	add    $0x1,%r11d
    ae03:	movswq 0x18(%rsi),%r10
    ae08:	test   %r10w,%r10w
    ae0c:	je     b055 <F_0_587+0x1a0f>
    ae12:	mov    %r10,%r14
    ae15:	sar    $0x1f,%r14d
    ae19:	mov    %r14,-0xf0(%rbp)
    ae20:	mov    %r14,%rcx
    ae23:	xor    %r10d,%ecx
    ae26:	sub    %r14d,%ecx
    ae29:	movslq %ecx,%rcx
    ae2c:	movzbl (%rcx,%rax,1),%ecx
    ae30:	mov    %rcx,-0x128(%rbp)
    ae37:	jmpq   b16a <F_0_587+0x1b24>
    ae3c:	cmp    $0x2f,%edx
    ae3f:	jle    af02 <F_0_587+0x18bc>
    ae45:	lea    0x38(%rdx),%ecx
    ae48:	mov    %rdi,%r15
    ae4b:	shr    %cl,%r15
    ae4e:	mov    %r15b,0x0(%r13)
    ae52:	lea    0x1(%r13),%r14
    ae56:	cmp    $0xff,%r15b
    ae5a:	jne    ae64 <F_0_587+0x181e>
    ae5c:	movb   $0x0,(%r14)
    ae60:	lea    0x2(%r13),%r14
    ae64:	lea    0x30(%rdx),%ecx
    ae67:	mov    %rdi,%r15
    ae6a:	shr    %cl,%r15
    ae6d:	mov    %r15b,(%r14)
    ae70:	lea    0x1(%r14),%r13
    ae74:	cmp    $0xff,%r15b
    ae78:	jne    ae83 <F_0_587+0x183d>
    ae7a:	movb   $0x0,0x0(%r13)
    ae7f:	lea    0x2(%r14),%r13
    ae83:	lea    0x28(%rdx),%ecx
    ae86:	mov    %rdi,%r15
    ae89:	shr    %cl,%r15
    ae8c:	mov    %r15b,0x0(%r13)
    ae90:	lea    0x1(%r13),%r14
    ae94:	cmp    $0xff,%r15b
    ae98:	jne    aea2 <F_0_587+0x185c>
    ae9a:	movb   $0x0,(%r14)
    ae9e:	lea    0x2(%r13),%r14
    aea2:	lea    0x20(%rdx),%ecx
    aea5:	mov    %rdi,%r15
    aea8:	shr    %cl,%r15
    aeab:	mov    %r15b,(%r14)
    aeae:	lea    0x1(%r14),%r13
    aeb2:	cmp    $0xff,%r15b
    aeb6:	jne    aec1 <F_0_587+0x187b>
    aeb8:	movb   $0x0,0x0(%r13)
    aebd:	lea    0x2(%r14),%r13
    aec1:	lea    0x18(%rdx),%ecx
    aec4:	mov    %rdi,%r15
    aec7:	shr    %cl,%r15
    aeca:	mov    %r15b,0x0(%r13)
    aece:	lea    0x1(%r13),%r14
    aed2:	cmp    $0xff,%r15b
    aed6:	jne    aee0 <F_0_587+0x189a>
    aed8:	movb   $0x0,(%r14)
    aedc:	lea    0x2(%r13),%r14
    aee0:	lea    -0x30(%rdx),%ecx
    aee3:	mov    %rdi,%r15
    aee6:	shr    %cl,%r15
    aee9:	mov    %rcx,%rdx
    aeec:	mov    %r15b,(%r14)
    aeef:	lea    0x1(%r14),%r13
    aef3:	cmp    $0xff,%r15b
    aef7:	jne    af02 <F_0_587+0x18bc>
    aef9:	movb   $0x0,0x0(%r13)
    aefe:	lea    0x2(%r14),%r13
    af02:	mov    %rbx,%rcx
    af05:	shl    %cl,%rdi
    af08:	mov    %rcx,%rbx
    af0b:	or     %r9,%rdi
    af0e:	add    %ebx,%edx
    af10:	add    $0xfffffff0,%r11d
    af14:	cmp    $0xf,%r11d
    af18:	jg     ae3c <F_0_587+0x17f6>
    af1e:	shl    $0x4,%r11d
    af22:	mov    -0x128(%rbp),%rcx
    af29:	add    %ecx,%r11d
    af2c:	movslq %r11d,%r14
    af2f:	movslq (%r8,%r14,4),%r11
    af33:	movsbq 0x400(%r8,%r14,1),%r14
    af3c:	cmp    $0x1f,%edx
    af3f:	jg     b1e1 <F_0_587+0x1b9b>
    af45:	mov    %rdi,%r15
    af48:	shl    %cl,%r12
    af4b:	lea    -0x1(%r12),%edi
    af50:	mov    -0xf8(%rbp),%r12
    af57:	add    %r12d,%r10d
    af5a:	and    %r10d,%edi
    af5d:	movslq %edi,%rdi
    af60:	mov    %rcx,%r12
    af63:	mov    %r14,%rcx
    af66:	shl    %cl,%r15
    af69:	mov    %rcx,%r10
    af6c:	or     %r15,%r11
    af6f:	mov    %r12,%rcx
    af72:	shl    %cl,%r11
    af75:	or     %r11,%rdi
    af78:	add    %r10d,%edx
    af7b:	add    %ecx,%edx
    af7d:	mov    $0x1,%r12d
    af83:	xor    %r11d,%r11d
    af86:	jmpq   ae03 <F_0_587+0x17bd>
    af8b:	mov    %rcx,%r15
    af8e:	lea    0x38(%rdx),%ecx
    af91:	mov    %rdi,%r8
    af94:	shr    %cl,%r8
    af97:	mov    %r8b,0x0(%r13)
    af9b:	lea    0x1(%r13),%rcx
    af9f:	cmp    $0xff,%r8b
    afa3:	je     b207 <F_0_587+0x1bc1>
    afa9:	mov    %rcx,%r8
    afac:	jmpq   b20e <F_0_587+0x1bc8>
    afb1:	movb   $0x0,(%rcx)
    afb4:	lea    0x2(%r13),%r8
    afb8:	lea    0x30(%rdx),%ecx
    afbb:	mov    %rdi,%r13
    afbe:	shr    %cl,%r13
    afc1:	mov    %r13b,(%r8)
    afc4:	lea    0x1(%r8),%rcx
    afc8:	cmp    $0xff,%r13b
    afcc:	je     b230 <F_0_587+0x1bea>
    afd2:	mov    %rcx,%r8
    afd5:	jmpq   b237 <F_0_587+0x1bf1>
    afda:	movb   $0x0,(%rcx)
    afdd:	add    $0x2,%r8
    afe1:	lea    0x28(%rdx),%ecx
    afe4:	mov    %rdi,%r13
    afe7:	shr    %cl,%r13
    afea:	mov    %r13b,(%r8)
    afed:	lea    0x1(%r8),%rcx
    aff1:	cmp    $0xff,%r13b
    aff5:	je     b259 <F_0_587+0x1c13>
    affb:	mov    %rcx,%r8
    affe:	jmpq   b260 <F_0_587+0x1c1a>
    b003:	movb   $0x0,(%rcx)
    b006:	add    $0x2,%r8
    b00a:	lea    -0x20(%rdx),%ecx
    b00d:	mov    %rdi,%r13
    b010:	shr    %cl,%r13
    b013:	mov    %rcx,%rdx
    b016:	mov    %r13b,(%r8)
    b019:	lea    0x1(%r8),%rcx
    b01d:	cmp    $0xff,%r13b
    b021:	je     b292 <F_0_587+0x1c4c>
    b027:	mov    %rcx,%r13
    b02a:	mov    %r15,%rcx
    b02d:	mov    %rdi,%r15
    b030:	mov    -0x120(%rbp),%r8
    b037:	jmpq   a5ed <F_0_587+0xfa7>
    b03c:	movb   $0x0,(%rcx)
    b03f:	lea    0x2(%r8),%r13
    b043:	mov    %r15,%rcx
    b046:	mov    %rdi,%r15
    b049:	mov    -0x120(%rbp),%r8
    b050:	jmpq   a3ad <F_0_587+0xd67>
    b055:	add    $0x1,%r11d
    b059:	movswq 0x26(%rsi),%r10
    b05e:	test   %r10w,%r10w
    b062:	je     b2ab <F_0_587+0x1c65>
    b068:	mov    %r10,%r14
    b06b:	sar    $0x1f,%r14d
    b06f:	mov    %r14,-0xf0(%rbp)
    b076:	mov    %r14,%rcx
    b079:	xor    %r10d,%ecx
    b07c:	sub    %r14d,%ecx
    b07f:	movslq %ecx,%rcx
    b082:	movzbl (%rcx,%rax,1),%ecx
    b086:	mov    %rcx,-0x128(%rbp)
    b08d:	jmpq   b3c0 <F_0_587+0x1d7a>
    b092:	cmp    $0x2f,%edx
    b095:	jle    b158 <F_0_587+0x1b12>
    b09b:	lea    0x38(%rdx),%ecx
    b09e:	mov    %rdi,%r15
    b0a1:	shr    %cl,%r15
    b0a4:	mov    %r15b,0x0(%r13)
    b0a8:	lea    0x1(%r13),%r14
    b0ac:	cmp    $0xff,%r15b
    b0b0:	jne    b0ba <F_0_587+0x1a74>
    b0b2:	movb   $0x0,(%r14)
    b0b6:	lea    0x2(%r13),%r14
    b0ba:	lea    0x30(%rdx),%ecx
    b0bd:	mov    %rdi,%r15
    b0c0:	shr    %cl,%r15
    b0c3:	mov    %r15b,(%r14)
    b0c6:	lea    0x1(%r14),%r13
    b0ca:	cmp    $0xff,%r15b
    b0ce:	jne    b0d9 <F_0_587+0x1a93>
    b0d0:	movb   $0x0,0x0(%r13)
    b0d5:	lea    0x2(%r14),%r13
    b0d9:	lea    0x28(%rdx),%ecx
    b0dc:	mov    %rdi,%r15
    b0df:	shr    %cl,%r15
    b0e2:	mov    %r15b,0x0(%r13)
    b0e6:	lea    0x1(%r13),%r14
    b0ea:	cmp    $0xff,%r15b
    b0ee:	jne    b0f8 <F_0_587+0x1ab2>
    b0f0:	movb   $0x0,(%r14)
    b0f4:	lea    0x2(%r13),%r14
    b0f8:	lea    0x20(%rdx),%ecx
    b0fb:	mov    %rdi,%r15
    b0fe:	shr    %cl,%r15
    b101:	mov    %r15b,(%r14)
    b104:	lea    0x1(%r14),%r13
    b108:	cmp    $0xff,%r15b
    b10c:	jne    b117 <F_0_587+0x1ad1>
    b10e:	movb   $0x0,0x0(%r13)
    b113:	lea    0x2(%r14),%r13
    b117:	lea    0x18(%rdx),%ecx
    b11a:	mov    %rdi,%r15
    b11d:	shr    %cl,%r15
    b120:	mov    %r15b,0x0(%r13)
    b124:	lea    0x1(%r13),%r14
    b128:	cmp    $0xff,%r15b
    b12c:	jne    b136 <F_0_587+0x1af0>
    b12e:	movb   $0x0,(%r14)
    b132:	lea    0x2(%r13),%r14
    b136:	lea    -0x30(%rdx),%ecx
    b139:	mov    %rdi,%r15
    b13c:	shr    %cl,%r15
    b13f:	mov    %rcx,%rdx
    b142:	mov    %r15b,(%r14)
    b145:	lea    0x1(%r14),%r13
    b149:	cmp    $0xff,%r15b
    b14d:	jne    b158 <F_0_587+0x1b12>
    b14f:	movb   $0x0,0x0(%r13)
    b154:	lea    0x2(%r14),%r13
    b158:	mov    %rbx,%rcx
    b15b:	shl    %cl,%rdi
    b15e:	mov    %rcx,%rbx
    b161:	or     %r9,%rdi
    b164:	add    %ebx,%edx
    b166:	add    $0xfffffff0,%r11d
    b16a:	cmp    $0xf,%r11d
    b16e:	jg     b092 <F_0_587+0x1a4c>
    b174:	shl    $0x4,%r11d
    b178:	mov    -0x128(%rbp),%rcx
    b17f:	add    %ecx,%r11d
    b182:	movslq %r11d,%r14
    b185:	movslq (%r8,%r14,4),%r11
    b189:	movsbq 0x400(%r8,%r14,1),%r14
    b192:	cmp    $0x1f,%edx
    b195:	jg     b437 <F_0_587+0x1df1>
    b19b:	mov    %rdi,%r15
    b19e:	shl    %cl,%r12
    b1a1:	lea    -0x1(%r12),%edi
    b1a6:	mov    -0xf0(%rbp),%r12
    b1ad:	add    %r12d,%r10d
    b1b0:	and    %r10d,%edi
    b1b3:	movslq %edi,%rdi
    b1b6:	mov    %rcx,%r12
    b1b9:	mov    %r14,%rcx
    b1bc:	shl    %cl,%r15
    b1bf:	mov    %rcx,%r10
    b1c2:	or     %r15,%r11
    b1c5:	mov    %r12,%rcx
    b1c8:	shl    %cl,%r11
    b1cb:	or     %r11,%rdi
    b1ce:	add    %r10d,%edx
    b1d1:	add    %ecx,%edx
    b1d3:	mov    $0x1,%r12d
    b1d9:	xor    %r11d,%r11d
    b1dc:	jmpq   b059 <F_0_587+0x1a13>
    b1e1:	mov    %rcx,%r15
    b1e4:	lea    0x38(%rdx),%ecx
    b1e7:	mov    %rdi,%r8
    b1ea:	shr    %cl,%r8
    b1ed:	mov    %r8b,0x0(%r13)
    b1f1:	lea    0x1(%r13),%rcx
    b1f5:	cmp    $0xff,%r8b
    b1f9:	je     b45d <F_0_587+0x1e17>
    b1ff:	mov    %rcx,%r8
    b202:	jmpq   b464 <F_0_587+0x1e1e>
    b207:	movb   $0x0,(%rcx)
    b20a:	lea    0x2(%r13),%r8
    b20e:	lea    0x30(%rdx),%ecx
    b211:	mov    %rdi,%r13
    b214:	shr    %cl,%r13
    b217:	mov    %r13b,(%r8)
    b21a:	lea    0x1(%r8),%rcx
    b21e:	cmp    $0xff,%r13b
    b222:	je     b486 <F_0_587+0x1e40>
    b228:	mov    %rcx,%r8
    b22b:	jmpq   b48d <F_0_587+0x1e47>
    b230:	movb   $0x0,(%rcx)
    b233:	add    $0x2,%r8
    b237:	lea    0x28(%rdx),%ecx
    b23a:	mov    %rdi,%r13
    b23d:	shr    %cl,%r13
    b240:	mov    %r13b,(%r8)
    b243:	lea    0x1(%r8),%rcx
    b247:	cmp    $0xff,%r13b
    b24b:	je     b4af <F_0_587+0x1e69>
    b251:	mov    %rcx,%r8
    b254:	jmpq   b4b6 <F_0_587+0x1e70>
    b259:	movb   $0x0,(%rcx)
    b25c:	add    $0x2,%r8
    b260:	lea    -0x20(%rdx),%ecx
    b263:	mov    %rdi,%r13
    b266:	shr    %cl,%r13
    b269:	mov    %rcx,%rdx
    b26c:	mov    %r13b,(%r8)
    b26f:	lea    0x1(%r8),%rcx
    b273:	cmp    $0xff,%r13b
    b277:	je     b4e8 <F_0_587+0x1ea2>
    b27d:	mov    %rcx,%r13
    b280:	mov    %r15,%rcx
    b283:	mov    %rdi,%r15
    b286:	mov    -0x120(%rbp),%r8
    b28d:	jmpq   a846 <F_0_587+0x1200>
    b292:	movb   $0x0,(%rcx)
    b295:	lea    0x2(%r8),%r13
    b299:	mov    %r15,%rcx
    b29c:	mov    %rdi,%r15
    b29f:	mov    -0x120(%rbp),%r8
    b2a6:	jmpq   a5ed <F_0_587+0xfa7>
    b2ab:	add    $0x1,%r11d
    b2af:	movswq 0x34(%rsi),%r10
    b2b4:	test   %r10w,%r10w
    b2b8:	je     b501 <F_0_587+0x1ebb>
    b2be:	mov    %r10,%r14
    b2c1:	sar    $0x1f,%r14d
    b2c5:	mov    %r14,-0xe8(%rbp)
    b2cc:	mov    %r14,%rcx
    b2cf:	xor    %r10d,%ecx
    b2d2:	sub    %r14d,%ecx
    b2d5:	movslq %ecx,%rcx
    b2d8:	movzbl (%rcx,%rax,1),%ecx
    b2dc:	mov    %rcx,-0x128(%rbp)
    b2e3:	jmpq   b616 <F_0_587+0x1fd0>
    b2e8:	cmp    $0x2f,%edx
    b2eb:	jle    b3ae <F_0_587+0x1d68>
    b2f1:	lea    0x38(%rdx),%ecx
    b2f4:	mov    %rdi,%r15
    b2f7:	shr    %cl,%r15
    b2fa:	mov    %r15b,0x0(%r13)
    b2fe:	lea    0x1(%r13),%r14
    b302:	cmp    $0xff,%r15b
    b306:	jne    b310 <F_0_587+0x1cca>
    b308:	movb   $0x0,(%r14)
    b30c:	lea    0x2(%r13),%r14
    b310:	lea    0x30(%rdx),%ecx
    b313:	mov    %rdi,%r15
    b316:	shr    %cl,%r15
    b319:	mov    %r15b,(%r14)
    b31c:	lea    0x1(%r14),%r13
    b320:	cmp    $0xff,%r15b
    b324:	jne    b32f <F_0_587+0x1ce9>
    b326:	movb   $0x0,0x0(%r13)
    b32b:	lea    0x2(%r14),%r13
    b32f:	lea    0x28(%rdx),%ecx
    b332:	mov    %rdi,%r15
    b335:	shr    %cl,%r15
    b338:	mov    %r15b,0x0(%r13)
    b33c:	lea    0x1(%r13),%r14
    b340:	cmp    $0xff,%r15b
    b344:	jne    b34e <F_0_587+0x1d08>
    b346:	movb   $0x0,(%r14)
    b34a:	lea    0x2(%r13),%r14
    b34e:	lea    0x20(%rdx),%ecx
    b351:	mov    %rdi,%r15
    b354:	shr    %cl,%r15
    b357:	mov    %r15b,(%r14)
    b35a:	lea    0x1(%r14),%r13
    b35e:	cmp    $0xff,%r15b
    b362:	jne    b36d <F_0_587+0x1d27>
    b364:	movb   $0x0,0x0(%r13)
    b369:	lea    0x2(%r14),%r13
    b36d:	lea    0x18(%rdx),%ecx
    b370:	mov    %rdi,%r15
    b373:	shr    %cl,%r15
    b376:	mov    %r15b,0x0(%r13)
    b37a:	lea    0x1(%r13),%r14
    b37e:	cmp    $0xff,%r15b
    b382:	jne    b38c <F_0_587+0x1d46>
    b384:	movb   $0x0,(%r14)
    b388:	lea    0x2(%r13),%r14
    b38c:	lea    -0x30(%rdx),%ecx
    b38f:	mov    %rdi,%r15
    b392:	shr    %cl,%r15
    b395:	mov    %rcx,%rdx
    b398:	mov    %r15b,(%r14)
    b39b:	lea    0x1(%r14),%r13
    b39f:	cmp    $0xff,%r15b
    b3a3:	jne    b3ae <F_0_587+0x1d68>
    b3a5:	movb   $0x0,0x0(%r13)
    b3aa:	lea    0x2(%r14),%r13
    b3ae:	mov    %rbx,%rcx
    b3b1:	shl    %cl,%rdi
    b3b4:	mov    %rcx,%rbx
    b3b7:	or     %r9,%rdi
    b3ba:	add    %ebx,%edx
    b3bc:	add    $0xfffffff0,%r11d
    b3c0:	cmp    $0xf,%r11d
    b3c4:	jg     b2e8 <F_0_587+0x1ca2>
    b3ca:	shl    $0x4,%r11d
    b3ce:	mov    -0x128(%rbp),%rcx
    b3d5:	add    %ecx,%r11d
    b3d8:	movslq %r11d,%r14
    b3db:	movslq (%r8,%r14,4),%r11
    b3df:	movsbq 0x400(%r8,%r14,1),%r14
    b3e8:	cmp    $0x1f,%edx
    b3eb:	jg     b68d <F_0_587+0x2047>
    b3f1:	mov    %rdi,%r15
    b3f4:	shl    %cl,%r12
    b3f7:	lea    -0x1(%r12),%edi
    b3fc:	mov    -0xf0(%rbp),%r12
    b403:	add    %r12d,%r10d
    b406:	and    %r10d,%edi
    b409:	movslq %edi,%rdi
    b40c:	mov    %rcx,%r12
    b40f:	mov    %r14,%rcx
    b412:	shl    %cl,%r15
    b415:	mov    %rcx,%r10
    b418:	or     %r15,%r11
    b41b:	mov    %r12,%rcx
    b41e:	shl    %cl,%r11
    b421:	or     %r11,%rdi
    b424:	add    %r10d,%edx
    b427:	add    %ecx,%edx
    b429:	mov    $0x1,%r12d
    b42f:	xor    %r11d,%r11d
    b432:	jmpq   b2af <F_0_587+0x1c69>
    b437:	mov    %rcx,%r15
    b43a:	lea    0x38(%rdx),%ecx
    b43d:	mov    %rdi,%r8
    b440:	shr    %cl,%r8
    b443:	mov    %r8b,0x0(%r13)
    b447:	lea    0x1(%r13),%rcx
    b44b:	cmp    $0xff,%r8b
    b44f:	je     b6b3 <F_0_587+0x206d>
    b455:	mov    %rcx,%r8
    b458:	jmpq   b6ba <F_0_587+0x2074>
    b45d:	movb   $0x0,(%rcx)
    b460:	lea    0x2(%r13),%r8
    b464:	lea    0x30(%rdx),%ecx
    b467:	mov    %rdi,%r13
    b46a:	shr    %cl,%r13
    b46d:	mov    %r13b,(%r8)
    b470:	lea    0x1(%r8),%rcx
    b474:	cmp    $0xff,%r13b
    b478:	je     b6dc <F_0_714+0xa>
    b47e:	mov    %rcx,%r8
    b481:	jmpq   b6e3 <F_0_714+0x11>
    b486:	movb   $0x0,(%rcx)
    b489:	add    $0x2,%r8
    b48d:	lea    0x28(%rdx),%ecx
    b490:	mov    %rdi,%r13
    b493:	shr    %cl,%r13
    b496:	mov    %r13b,(%r8)
    b499:	lea    0x1(%r8),%rcx
    b49d:	cmp    $0xff,%r13b
    b4a1:	je     b705 <F_0_714+0x33>
    b4a7:	mov    %rcx,%r8
    b4aa:	jmpq   b70c <F_0_714+0x3a>
    b4af:	movb   $0x0,(%rcx)
    b4b2:	add    $0x2,%r8
    b4b6:	lea    -0x20(%rdx),%ecx
    b4b9:	mov    %rdi,%r13
    b4bc:	shr    %cl,%r13
    b4bf:	mov    %rcx,%rdx
    b4c2:	mov    %r13b,(%r8)
    b4c5:	lea    0x1(%r8),%rcx
    b4c9:	cmp    $0xff,%r13b
    b4cd:	je     b73e <F_0_714+0x6c>
    b4d3:	mov    %rcx,%r13
    b4d6:	mov    %r15,%rcx
    b4d9:	mov    %rdi,%r15
    b4dc:	mov    -0x120(%rbp),%r8
    b4e3:	jmpq   aa9c <F_0_587+0x1456>
    b4e8:	movb   $0x0,(%rcx)
    b4eb:	lea    0x2(%r8),%r13
    b4ef:	mov    %r15,%rcx
    b4f2:	mov    %rdi,%r15
    b4f5:	mov    -0x120(%rbp),%r8
    b4fc:	jmpq   a846 <F_0_587+0x1200>
    b501:	add    $0x1,%r11d
    b505:	movswq 0x42(%rsi),%r10
    b50a:	test   %r10w,%r10w
    b50e:	je     b757 <F_0_714+0x85>
    b514:	mov    %r10,%r14
    b517:	sar    $0x1f,%r14d
    b51b:	mov    %r14,-0xe8(%rbp)
    b522:	mov    %r14,%rcx
    b525:	xor    %r10d,%ecx
    b528:	sub    %r14d,%ecx
    b52b:	movslq %ecx,%rcx
    b52e:	movzbl (%rcx,%rax,1),%ecx
    b532:	mov    %rcx,-0x128(%rbp)
    b539:	jmpq   b86c <F_0_714+0x19a>
    b53e:	cmp    $0x2f,%edx
    b541:	jle    b604 <F_0_587+0x1fbe>
    b547:	lea    0x38(%rdx),%ecx
    b54a:	mov    %rdi,%r15
    b54d:	shr    %cl,%r15
    b550:	mov    %r15b,0x0(%r13)
    b554:	lea    0x1(%r13),%r14
    b558:	cmp    $0xff,%r15b
    b55c:	jne    b566 <F_0_587+0x1f20>
    b55e:	movb   $0x0,(%r14)
    b562:	lea    0x2(%r13),%r14
    b566:	lea    0x30(%rdx),%ecx
    b569:	mov    %rdi,%r15
    b56c:	shr    %cl,%r15
    b56f:	mov    %r15b,(%r14)
    b572:	lea    0x1(%r14),%r13
    b576:	cmp    $0xff,%r15b
    b57a:	jne    b585 <F_0_587+0x1f3f>
    b57c:	movb   $0x0,0x0(%r13)
    b581:	lea    0x2(%r14),%r13
    b585:	lea    0x28(%rdx),%ecx
    b588:	mov    %rdi,%r15
    b58b:	shr    %cl,%r15
    b58e:	mov    %r15b,0x0(%r13)
    b592:	lea    0x1(%r13),%r14
    b596:	cmp    $0xff,%r15b
    b59a:	jne    b5a4 <F_0_587+0x1f5e>
    b59c:	movb   $0x0,(%r14)
    b5a0:	lea    0x2(%r13),%r14
    b5a4:	lea    0x20(%rdx),%ecx
    b5a7:	mov    %rdi,%r15
    b5aa:	shr    %cl,%r15
    b5ad:	mov    %r15b,(%r14)
    b5b0:	lea    0x1(%r14),%r13
    b5b4:	cmp    $0xff,%r15b
    b5b8:	jne    b5c3 <F_0_587+0x1f7d>
    b5ba:	movb   $0x0,0x0(%r13)
    b5bf:	lea    0x2(%r14),%r13
    b5c3:	lea    0x18(%rdx),%ecx
    b5c6:	mov    %rdi,%r15
    b5c9:	shr    %cl,%r15
    b5cc:	mov    %r15b,0x0(%r13)
    b5d0:	lea    0x1(%r13),%r14
    b5d4:	cmp    $0xff,%r15b
    b5d8:	jne    b5e2 <F_0_587+0x1f9c>
    b5da:	movb   $0x0,(%r14)
    b5de:	lea    0x2(%r13),%r14
    b5e2:	lea    -0x30(%rdx),%ecx
    b5e5:	mov    %rdi,%r15
    b5e8:	shr    %cl,%r15
    b5eb:	mov    %rcx,%rdx
    b5ee:	mov    %r15b,(%r14)
    b5f1:	lea    0x1(%r14),%r13
    b5f5:	cmp    $0xff,%r15b
    b5f9:	jne    b604 <F_0_587+0x1fbe>
    b5fb:	movb   $0x0,0x0(%r13)
    b600:	lea    0x2(%r14),%r13
    b604:	mov    %rbx,%rcx
    b607:	shl    %cl,%rdi
    b60a:	mov    %rcx,%rbx
    b60d:	or     %r9,%rdi
    b610:	add    %ebx,%edx
    b612:	add    $0xfffffff0,%r11d
    b616:	cmp    $0xf,%r11d
    b61a:	jg     b53e <F_0_587+0x1ef8>
    b620:	shl    $0x4,%r11d
    b624:	mov    -0x128(%rbp),%rcx
    b62b:	add    %ecx,%r11d
    b62e:	movslq %r11d,%r14
    b631:	movslq (%r8,%r14,4),%r11
    b635:	movsbq 0x400(%r8,%r14,1),%r14
    b63e:	cmp    $0x1f,%edx
    b641:	jg     b8e3 <F_0_714+0x211>
    b647:	mov    %rdi,%r15
    b64a:	shl    %cl,%r12
    b64d:	lea    -0x1(%r12),%edi
    b652:	mov    -0xe8(%rbp),%r12
    b659:	add    %r12d,%r10d
    b65c:	and    %r10d,%edi
    b65f:	movslq %edi,%rdi
    b662:	mov    %rcx,%r12
    b665:	mov    %r14,%rcx
    b668:	shl    %cl,%r15
    b66b:	mov    %rcx,%r10
    b66e:	or     %r15,%r11
    b671:	mov    %r12,%rcx
    b674:	shl    %cl,%r11
    b677:	or     %r11,%rdi
    b67a:	add    %r10d,%edx
    b67d:	add    %ecx,%edx
    b67f:	mov    $0x1,%r12d
    b685:	xor    %r11d,%r11d
    b688:	jmpq   b505 <F_0_587+0x1ebf>
    b68d:	mov    %rcx,%r15
    b690:	lea    0x38(%rdx),%ecx
    b693:	mov    %rdi,%r8
    b696:	shr    %cl,%r8
    b699:	mov    %r8b,0x0(%r13)
    b69d:	lea    0x1(%r13),%rcx
    b6a1:	cmp    $0xff,%r8b
    b6a5:	je     b909 <F_0_714+0x237>
    b6ab:	mov    %rcx,%r8
    b6ae:	jmpq   b910 <F_0_714+0x23e>
    b6b3:	movb   $0x0,(%rcx)
    b6b6:	lea    0x2(%r13),%r8
    b6ba:	lea    0x30(%rdx),%ecx
    b6bd:	mov    %rdi,%r13
    b6c0:	shr    %cl,%r13
    b6c3:	mov    %r13b,(%r8)
    b6c6:	lea    0x1(%r8),%rcx
    b6ca:	cmp    $0xff,%r13b
    b6ce:	je     b932 <F_0_714+0x260>
    b6d4:	mov    %rcx,%r8
    b6d7:	jmpq   b939 <F_0_714+0x267>
    b6dc:	movb   $0x0,(%rcx)
    b6df:	add    $0x2,%r8
    b6e3:	lea    0x28(%rdx),%ecx
    b6e6:	mov    %rdi,%r13
    b6e9:	shr    %cl,%r13
    b6ec:	mov    %r13b,(%r8)
    b6ef:	lea    0x1(%r8),%rcx
    b6f3:	cmp    $0xff,%r13b
    b6f7:	je     b95b <F_0_714+0x289>
    b6fd:	mov    %rcx,%r8
    b700:	jmpq   b962 <F_0_714+0x290>
    b705:	movb   $0x0,(%rcx)
    b708:	add    $0x2,%r8
    b70c:	lea    -0x20(%rdx),%ecx
    b70f:	mov    %rdi,%r13
    b712:	shr    %cl,%r13
    b715:	mov    %rcx,%rdx
    b718:	mov    %r13b,(%r8)
    b71b:	lea    0x1(%r8),%rcx
    b71f:	cmp    $0xff,%r13b
    b723:	je     b994 <F_0_714+0x2c2>
    b729:	mov    %rcx,%r13
    b72c:	mov    %r15,%rcx
    b72f:	mov    %rdi,%r15
    b732:	mov    -0x120(%rbp),%r8
    b739:	jmpq   acf2 <F_0_587+0x16ac>
    b73e:	movb   $0x0,(%rcx)
    b741:	lea    0x2(%r8),%r13
    b745:	mov    %r15,%rcx
    b748:	mov    %rdi,%r15
    b74b:	mov    -0x120(%rbp),%r8
    b752:	jmpq   aa9c <F_0_587+0x1456>
    b757:	add    $0x1,%r11d
    b75b:	movswq 0x50(%rsi),%r10
    b760:	test   %r10w,%r10w
    b764:	je     b9ad <F_0_714+0x2db>
    b76a:	mov    %r10,%r14
    b76d:	sar    $0x1f,%r14d
    b771:	mov    %r14,-0xe0(%rbp)
    b778:	mov    %r14,%rcx
    b77b:	xor    %r10d,%ecx
    b77e:	sub    %r14d,%ecx
    b781:	movslq %ecx,%rcx
    b784:	movzbl (%rcx,%rax,1),%ecx
    b788:	mov    %rcx,-0x128(%rbp)
    b78f:	jmpq   bac2 <F_0_714+0x3f0>
    b794:	cmp    $0x2f,%edx
    b797:	jle    b85a <F_0_714+0x188>
    b79d:	lea    0x38(%rdx),%ecx
    b7a0:	mov    %rdi,%r15
    b7a3:	shr    %cl,%r15
    b7a6:	mov    %r15b,0x0(%r13)
    b7aa:	lea    0x1(%r13),%r14
    b7ae:	cmp    $0xff,%r15b
    b7b2:	jne    b7bc <F_0_714+0xea>
    b7b4:	movb   $0x0,(%r14)
    b7b8:	lea    0x2(%r13),%r14
    b7bc:	lea    0x30(%rdx),%ecx
    b7bf:	mov    %rdi,%r15
    b7c2:	shr    %cl,%r15
    b7c5:	mov    %r15b,(%r14)
    b7c8:	lea    0x1(%r14),%r13
    b7cc:	cmp    $0xff,%r15b
    b7d0:	jne    b7db <F_0_714+0x109>
    b7d2:	movb   $0x0,0x0(%r13)
    b7d7:	lea    0x2(%r14),%r13
    b7db:	lea    0x28(%rdx),%ecx
    b7de:	mov    %rdi,%r15
    b7e1:	shr    %cl,%r15
    b7e4:	mov    %r15b,0x0(%r13)
    b7e8:	lea    0x1(%r13),%r14
    b7ec:	cmp    $0xff,%r15b
    b7f0:	jne    b7fa <F_0_714+0x128>
    b7f2:	movb   $0x0,(%r14)
    b7f6:	lea    0x2(%r13),%r14
    b7fa:	lea    0x20(%rdx),%ecx
    b7fd:	mov    %rdi,%r15
    b800:	shr    %cl,%r15
    b803:	mov    %r15b,(%r14)
    b806:	lea    0x1(%r14),%r13
    b80a:	cmp    $0xff,%r15b
    b80e:	jne    b819 <F_0_714+0x147>
    b810:	movb   $0x0,0x0(%r13)
    b815:	lea    0x2(%r14),%r13
    b819:	lea    0x18(%rdx),%ecx
    b81c:	mov    %rdi,%r15
    b81f:	shr    %cl,%r15
    b822:	mov    %r15b,0x0(%r13)
    b826:	lea    0x1(%r13),%r14
    b82a:	cmp    $0xff,%r15b
    b82e:	jne    b838 <F_0_714+0x166>
    b830:	movb   $0x0,(%r14)
    b834:	lea    0x2(%r13),%r14
    b838:	lea    -0x30(%rdx),%ecx
    b83b:	mov    %rdi,%r15
    b83e:	shr    %cl,%r15
    b841:	mov    %rcx,%rdx
    b844:	mov    %r15b,(%r14)
    b847:	lea    0x1(%r14),%r13
    b84b:	cmp    $0xff,%r15b
    b84f:	jne    b85a <F_0_714+0x188>
    b851:	movb   $0x0,0x0(%r13)
    b856:	lea    0x2(%r14),%r13
    b85a:	mov    %rbx,%rcx
    b85d:	shl    %cl,%rdi
    b860:	mov    %rcx,%rbx
    b863:	or     %r9,%rdi
    b866:	add    %ebx,%edx
    b868:	add    $0xfffffff0,%r11d
    b86c:	cmp    $0xf,%r11d
    b870:	jg     b794 <F_0_714+0xc2>
    b876:	shl    $0x4,%r11d
    b87a:	mov    -0x128(%rbp),%rcx
    b881:	add    %ecx,%r11d
    b884:	movslq %r11d,%r14
    b887:	movslq (%r8,%r14,4),%r11
    b88b:	movsbq 0x400(%r8,%r14,1),%r14
    b894:	cmp    $0x1f,%edx
    b897:	jg     bb39 <F_0_714+0x467>
    b89d:	mov    %rdi,%r15
    b8a0:	shl    %cl,%r12
    b8a3:	lea    -0x1(%r12),%edi
    b8a8:	mov    -0xe8(%rbp),%r12
    b8af:	add    %r12d,%r10d
    b8b2:	and    %r10d,%edi
    b8b5:	movslq %edi,%rdi
    b8b8:	mov    %rcx,%r12
    b8bb:	mov    %r14,%rcx
    b8be:	shl    %cl,%r15
    b8c1:	mov    %rcx,%r10
    b8c4:	or     %r15,%r11
    b8c7:	mov    %r12,%rcx
    b8ca:	shl    %cl,%r11
    b8cd:	or     %r11,%rdi
    b8d0:	add    %r10d,%edx
    b8d3:	add    %ecx,%edx
    b8d5:	mov    $0x1,%r12d
    b8db:	xor    %r11d,%r11d
    b8de:	jmpq   b75b <F_0_714+0x89>
    b8e3:	mov    %rcx,%r15
    b8e6:	lea    0x38(%rdx),%ecx
    b8e9:	mov    %rdi,%r8
    b8ec:	shr    %cl,%r8
    b8ef:	mov    %r8b,0x0(%r13)
    b8f3:	lea    0x1(%r13),%rcx
    b8f7:	cmp    $0xff,%r8b
    b8fb:	je     bb5f <F_0_714+0x48d>
    b901:	mov    %rcx,%r8
    b904:	jmpq   bb66 <F_0_714+0x494>
    b909:	movb   $0x0,(%rcx)
    b90c:	lea    0x2(%r13),%r8
    b910:	lea    0x30(%rdx),%ecx
    b913:	mov    %rdi,%r13
    b916:	shr    %cl,%r13
    b919:	mov    %r13b,(%r8)
    b91c:	lea    0x1(%r8),%rcx
    b920:	cmp    $0xff,%r13b
    b924:	je     bb88 <F_0_714+0x4b6>
    b92a:	mov    %rcx,%r8
    b92d:	jmpq   bb8f <F_0_714+0x4bd>
    b932:	movb   $0x0,(%rcx)
    b935:	add    $0x2,%r8
    b939:	lea    0x28(%rdx),%ecx
    b93c:	mov    %rdi,%r13
    b93f:	shr    %cl,%r13
    b942:	mov    %r13b,(%r8)
    b945:	lea    0x1(%r8),%rcx
    b949:	cmp    $0xff,%r13b
    b94d:	je     bbb1 <F_0_714+0x4df>
    b953:	mov    %rcx,%r8
    b956:	jmpq   bbb8 <F_0_714+0x4e6>
    b95b:	movb   $0x0,(%rcx)
    b95e:	add    $0x2,%r8
    b962:	lea    -0x20(%rdx),%ecx
    b965:	mov    %rdi,%r13
    b968:	shr    %cl,%r13
    b96b:	mov    %rcx,%rdx
    b96e:	mov    %r13b,(%r8)
    b971:	lea    0x1(%r8),%rcx
    b975:	cmp    $0xff,%r13b
    b979:	je     bbea <F_0_714+0x518>
    b97f:	mov    %rcx,%r13
    b982:	mov    %r15,%rcx
    b985:	mov    %rdi,%r15
    b988:	mov    -0x120(%rbp),%r8
    b98f:	jmpq   af48 <F_0_587+0x1902>
    b994:	movb   $0x0,(%rcx)
    b997:	lea    0x2(%r8),%r13
    b99b:	mov    %r15,%rcx
    b99e:	mov    %rdi,%r15
    b9a1:	mov    -0x120(%rbp),%r8
    b9a8:	jmpq   acf2 <F_0_587+0x16ac>
    b9ad:	add    $0x1,%r11d
    b9b1:	movswq 0x60(%rsi),%r10
    b9b6:	test   %r10w,%r10w
    b9ba:	je     bc03 <F_0_714+0x531>
    b9c0:	mov    %r10,%r14
    b9c3:	sar    $0x1f,%r14d
    b9c7:	mov    %r14,-0xe0(%rbp)
    b9ce:	mov    %r14,%rcx
    b9d1:	xor    %r10d,%ecx
    b9d4:	sub    %r14d,%ecx
    b9d7:	movslq %ecx,%rcx
    b9da:	movzbl (%rcx,%rax,1),%ecx
    b9de:	mov    %rcx,-0x128(%rbp)
    b9e5:	jmpq   bd18 <F_0_714+0x646>
    b9ea:	cmp    $0x2f,%edx
    b9ed:	jle    bab0 <F_0_714+0x3de>
    b9f3:	lea    0x38(%rdx),%ecx
    b9f6:	mov    %rdi,%r15
    b9f9:	shr    %cl,%r15
    b9fc:	mov    %r15b,0x0(%r13)
    ba00:	lea    0x1(%r13),%r14
    ba04:	cmp    $0xff,%r15b
    ba08:	jne    ba12 <F_0_714+0x340>
    ba0a:	movb   $0x0,(%r14)
    ba0e:	lea    0x2(%r13),%r14
    ba12:	lea    0x30(%rdx),%ecx
    ba15:	mov    %rdi,%r15
    ba18:	shr    %cl,%r15
    ba1b:	mov    %r15b,(%r14)
    ba1e:	lea    0x1(%r14),%r13
    ba22:	cmp    $0xff,%r15b
    ba26:	jne    ba31 <F_0_714+0x35f>
    ba28:	movb   $0x0,0x0(%r13)
    ba2d:	lea    0x2(%r14),%r13
    ba31:	lea    0x28(%rdx),%ecx
    ba34:	mov    %rdi,%r15
    ba37:	shr    %cl,%r15
    ba3a:	mov    %r15b,0x0(%r13)
    ba3e:	lea    0x1(%r13),%r14
    ba42:	cmp    $0xff,%r15b
    ba46:	jne    ba50 <F_0_714+0x37e>
    ba48:	movb   $0x0,(%r14)
    ba4c:	lea    0x2(%r13),%r14
    ba50:	lea    0x20(%rdx),%ecx
    ba53:	mov    %rdi,%r15
    ba56:	shr    %cl,%r15
    ba59:	mov    %r15b,(%r14)
    ba5c:	lea    0x1(%r14),%r13
    ba60:	cmp    $0xff,%r15b
    ba64:	jne    ba6f <F_0_714+0x39d>
    ba66:	movb   $0x0,0x0(%r13)
    ba6b:	lea    0x2(%r14),%r13
    ba6f:	lea    0x18(%rdx),%ecx
    ba72:	mov    %rdi,%r15
    ba75:	shr    %cl,%r15
    ba78:	mov    %r15b,0x0(%r13)
    ba7c:	lea    0x1(%r13),%r14
    ba80:	cmp    $0xff,%r15b
    ba84:	jne    ba8e <F_0_714+0x3bc>
    ba86:	movb   $0x0,(%r14)
    ba8a:	lea    0x2(%r13),%r14
    ba8e:	lea    -0x30(%rdx),%ecx
    ba91:	mov    %rdi,%r15
    ba94:	shr    %cl,%r15
    ba97:	mov    %rcx,%rdx
    ba9a:	mov    %r15b,(%r14)
    ba9d:	lea    0x1(%r14),%r13
    baa1:	cmp    $0xff,%r15b
    baa5:	jne    bab0 <F_0_714+0x3de>
    baa7:	movb   $0x0,0x0(%r13)
    baac:	lea    0x2(%r14),%r13
    bab0:	mov    %rbx,%rcx
    bab3:	shl    %cl,%rdi
    bab6:	mov    %rcx,%rbx
    bab9:	or     %r9,%rdi
    babc:	add    %ebx,%edx
    babe:	add    $0xfffffff0,%r11d
    bac2:	cmp    $0xf,%r11d
    bac6:	jg     b9ea <F_0_714+0x318>
    bacc:	shl    $0x4,%r11d
    bad0:	mov    -0x128(%rbp),%rcx
    bad7:	add    %ecx,%r11d
    bada:	movslq %r11d,%r14
    badd:	movslq (%r8,%r14,4),%r11
    bae1:	movsbq 0x400(%r8,%r14,1),%r14
    baea:	cmp    $0x1f,%edx
    baed:	jg     bd8f <F_0_714+0x6bd>
    baf3:	mov    %rdi,%r15
    baf6:	shl    %cl,%r12
    baf9:	lea    -0x1(%r12),%edi
    bafe:	mov    -0xe0(%rbp),%r12
    bb05:	add    %r12d,%r10d
    bb08:	and    %r10d,%edi
    bb0b:	movslq %edi,%rdi
    bb0e:	mov    %rcx,%r12
    bb11:	mov    %r14,%rcx
    bb14:	shl    %cl,%r15
    bb17:	mov    %rcx,%r10
    bb1a:	or     %r15,%r11
    bb1d:	mov    %r12,%rcx
    bb20:	shl    %cl,%r11
    bb23:	or     %r11,%rdi
    bb26:	add    %r10d,%edx
    bb29:	add    %ecx,%edx
    bb2b:	mov    $0x1,%r12d
    bb31:	xor    %r11d,%r11d
    bb34:	jmpq   b9b1 <F_0_714+0x2df>
    bb39:	mov    %rcx,%r15
    bb3c:	lea    0x38(%rdx),%ecx
    bb3f:	mov    %rdi,%r8
    bb42:	shr    %cl,%r8
    bb45:	mov    %r8b,0x0(%r13)
    bb49:	lea    0x1(%r13),%rcx
    bb4d:	cmp    $0xff,%r8b
    bb51:	je     bdb5 <F_0_714+0x6e3>
    bb57:	mov    %rcx,%r8
    bb5a:	jmpq   bdbc <F_0_714+0x6ea>
    bb5f:	movb   $0x0,(%rcx)
    bb62:	lea    0x2(%r13),%r8
    bb66:	lea    0x30(%rdx),%ecx
    bb69:	mov    %rdi,%r13
    bb6c:	shr    %cl,%r13
    bb6f:	mov    %r13b,(%r8)
    bb72:	lea    0x1(%r8),%rcx
    bb76:	cmp    $0xff,%r13b
    bb7a:	je     bdde <F_0_714+0x70c>
    bb80:	mov    %rcx,%r8
    bb83:	jmpq   bde5 <F_0_714+0x713>
    bb88:	movb   $0x0,(%rcx)
    bb8b:	add    $0x2,%r8
    bb8f:	lea    0x28(%rdx),%ecx
    bb92:	mov    %rdi,%r13
    bb95:	shr    %cl,%r13
    bb98:	mov    %r13b,(%r8)
    bb9b:	lea    0x1(%r8),%rcx
    bb9f:	cmp    $0xff,%r13b
    bba3:	je     be07 <F_0_714+0x735>
    bba9:	mov    %rcx,%r8
    bbac:	jmpq   be0e <F_0_714+0x73c>
    bbb1:	movb   $0x0,(%rcx)
    bbb4:	add    $0x2,%r8
    bbb8:	lea    -0x20(%rdx),%ecx
    bbbb:	mov    %rdi,%r13
    bbbe:	shr    %cl,%r13
    bbc1:	mov    %rcx,%rdx
    bbc4:	mov    %r13b,(%r8)
    bbc7:	lea    0x1(%r8),%rcx
    bbcb:	cmp    $0xff,%r13b
    bbcf:	je     be40 <F_0_714+0x76e>
    bbd5:	mov    %rcx,%r13
    bbd8:	mov    %r15,%rcx
    bbdb:	mov    %rdi,%r15
    bbde:	mov    -0x120(%rbp),%r8
    bbe5:	jmpq   b19e <F_0_587+0x1b58>
    bbea:	movb   $0x0,(%rcx)
    bbed:	lea    0x2(%r8),%r13
    bbf1:	mov    %r15,%rcx
    bbf4:	mov    %rdi,%r15
    bbf7:	mov    -0x120(%rbp),%r8
    bbfe:	jmpq   af48 <F_0_587+0x1902>
    bc03:	add    $0x1,%r11d
    bc07:	movswq 0x52(%rsi),%r10
    bc0c:	test   %r10w,%r10w
    bc10:	je     be59 <F_0_714+0x787>
    bc16:	mov    %r10,%r14
    bc19:	sar    $0x1f,%r14d
    bc1d:	mov    %r14,-0xd8(%rbp)
    bc24:	mov    %r14,%rcx
    bc27:	xor    %r10d,%ecx
    bc2a:	sub    %r14d,%ecx
    bc2d:	movslq %ecx,%rcx
    bc30:	movzbl (%rcx,%rax,1),%ecx
    bc34:	mov    %rcx,-0x128(%rbp)
    bc3b:	jmpq   bf6e <F_0_714+0x89c>
    bc40:	cmp    $0x2f,%edx
    bc43:	jle    bd06 <F_0_714+0x634>
    bc49:	lea    0x38(%rdx),%ecx
    bc4c:	mov    %rdi,%r15
    bc4f:	shr    %cl,%r15
    bc52:	mov    %r15b,0x0(%r13)
    bc56:	lea    0x1(%r13),%r14
    bc5a:	cmp    $0xff,%r15b
    bc5e:	jne    bc68 <F_0_714+0x596>
    bc60:	movb   $0x0,(%r14)
    bc64:	lea    0x2(%r13),%r14
    bc68:	lea    0x30(%rdx),%ecx
    bc6b:	mov    %rdi,%r15
    bc6e:	shr    %cl,%r15
    bc71:	mov    %r15b,(%r14)
    bc74:	lea    0x1(%r14),%r13
    bc78:	cmp    $0xff,%r15b
    bc7c:	jne    bc87 <F_0_714+0x5b5>
    bc7e:	movb   $0x0,0x0(%r13)
    bc83:	lea    0x2(%r14),%r13
    bc87:	lea    0x28(%rdx),%ecx
    bc8a:	mov    %rdi,%r15
    bc8d:	shr    %cl,%r15
    bc90:	mov    %r15b,0x0(%r13)
    bc94:	lea    0x1(%r13),%r14
    bc98:	cmp    $0xff,%r15b
    bc9c:	jne    bca6 <F_0_714+0x5d4>
    bc9e:	movb   $0x0,(%r14)
    bca2:	lea    0x2(%r13),%r14
    bca6:	lea    0x20(%rdx),%ecx
    bca9:	mov    %rdi,%r15
    bcac:	shr    %cl,%r15
    bcaf:	mov    %r15b,(%r14)
    bcb2:	lea    0x1(%r14),%r13
    bcb6:	cmp    $0xff,%r15b
    bcba:	jne    bcc5 <F_0_714+0x5f3>
    bcbc:	movb   $0x0,0x0(%r13)
    bcc1:	lea    0x2(%r14),%r13
    bcc5:	lea    0x18(%rdx),%ecx
    bcc8:	mov    %rdi,%r15
    bccb:	shr    %cl,%r15
    bcce:	mov    %r15b,0x0(%r13)
    bcd2:	lea    0x1(%r13),%r14
    bcd6:	cmp    $0xff,%r15b
    bcda:	jne    bce4 <F_0_714+0x612>
    bcdc:	movb   $0x0,(%r14)
    bce0:	lea    0x2(%r13),%r14
    bce4:	lea    -0x30(%rdx),%ecx
    bce7:	mov    %rdi,%r15
    bcea:	shr    %cl,%r15
    bced:	mov    %rcx,%rdx
    bcf0:	mov    %r15b,(%r14)
    bcf3:	lea    0x1(%r14),%r13
    bcf7:	cmp    $0xff,%r15b
    bcfb:	jne    bd06 <F_0_714+0x634>
    bcfd:	movb   $0x0,0x0(%r13)
    bd02:	lea    0x2(%r14),%r13
    bd06:	mov    %rbx,%rcx
    bd09:	shl    %cl,%rdi
    bd0c:	mov    %rcx,%rbx
    bd0f:	or     %r9,%rdi
    bd12:	add    %ebx,%edx
    bd14:	add    $0xfffffff0,%r11d
    bd18:	cmp    $0xf,%r11d
    bd1c:	jg     bc40 <F_0_714+0x56e>
    bd22:	shl    $0x4,%r11d
    bd26:	mov    -0x128(%rbp),%rcx
    bd2d:	add    %ecx,%r11d
    bd30:	movslq %r11d,%r14
    bd33:	movslq (%r8,%r14,4),%r11
    bd37:	movsbq 0x400(%r8,%r14,1),%r14
    bd40:	cmp    $0x1f,%edx
    bd43:	jg     bfe5 <F_0_714+0x913>
    bd49:	mov    %rdi,%r15
    bd4c:	shl    %cl,%r12
    bd4f:	lea    -0x1(%r12),%edi
    bd54:	mov    -0xe0(%rbp),%r12
    bd5b:	add    %r12d,%r10d
    bd5e:	and    %r10d,%edi
    bd61:	movslq %edi,%rdi
    bd64:	mov    %rcx,%r12
    bd67:	mov    %r14,%rcx
    bd6a:	shl    %cl,%r15
    bd6d:	mov    %rcx,%r10
    bd70:	or     %r15,%r11
    bd73:	mov    %r12,%rcx
    bd76:	shl    %cl,%r11
    bd79:	or     %r11,%rdi
    bd7c:	add    %r10d,%edx
    bd7f:	add    %ecx,%edx
    bd81:	mov    $0x1,%r12d
    bd87:	xor    %r11d,%r11d
    bd8a:	jmpq   bc07 <F_0_714+0x535>
    bd8f:	mov    %rcx,%r15
    bd92:	lea    0x38(%rdx),%ecx
    bd95:	mov    %rdi,%r8
    bd98:	shr    %cl,%r8
    bd9b:	mov    %r8b,0x0(%r13)
    bd9f:	lea    0x1(%r13),%rcx
    bda3:	cmp    $0xff,%r8b
    bda7:	je     c00b <F_0_714+0x939>
    bdad:	mov    %rcx,%r8
    bdb0:	jmpq   c012 <F_0_714+0x940>
    bdb5:	movb   $0x0,(%rcx)
    bdb8:	lea    0x2(%r13),%r8
    bdbc:	lea    0x30(%rdx),%ecx
    bdbf:	mov    %rdi,%r13
    bdc2:	shr    %cl,%r13
    bdc5:	mov    %r13b,(%r8)
    bdc8:	lea    0x1(%r8),%rcx
    bdcc:	cmp    $0xff,%r13b
    bdd0:	je     c034 <F_0_714+0x962>
    bdd6:	mov    %rcx,%r8
    bdd9:	jmpq   c03b <F_0_714+0x969>
    bdde:	movb   $0x0,(%rcx)
    bde1:	add    $0x2,%r8
    bde5:	lea    0x28(%rdx),%ecx
    bde8:	mov    %rdi,%r13
    bdeb:	shr    %cl,%r13
    bdee:	mov    %r13b,(%r8)
    bdf1:	lea    0x1(%r8),%rcx
    bdf5:	cmp    $0xff,%r13b
    bdf9:	je     c05d <F_0_714+0x98b>
    bdff:	mov    %rcx,%r8
    be02:	jmpq   c064 <F_0_714+0x992>
    be07:	movb   $0x0,(%rcx)
    be0a:	add    $0x2,%r8
    be0e:	lea    -0x20(%rdx),%ecx
    be11:	mov    %rdi,%r13
    be14:	shr    %cl,%r13
    be17:	mov    %rcx,%rdx
    be1a:	mov    %r13b,(%r8)
    be1d:	lea    0x1(%r8),%rcx
    be21:	cmp    $0xff,%r13b
    be25:	je     c096 <F_0_714+0x9c4>
    be2b:	mov    %rcx,%r13
    be2e:	mov    %r15,%rcx
    be31:	mov    %rdi,%r15
    be34:	mov    -0x120(%rbp),%r8
    be3b:	jmpq   b3f4 <F_0_587+0x1dae>
    be40:	movb   $0x0,(%rcx)
    be43:	lea    0x2(%r8),%r13
    be47:	mov    %r15,%rcx
    be4a:	mov    %rdi,%r15
    be4d:	mov    -0x120(%rbp),%r8
    be54:	jmpq   b19e <F_0_587+0x1b58>
    be59:	add    $0x1,%r11d
    be5d:	movswq 0x44(%rsi),%r10
    be62:	test   %r10w,%r10w
    be66:	je     c0af <F_0_714+0x9dd>
    be6c:	mov    %r10,%r14
    be6f:	sar    $0x1f,%r14d
    be73:	mov    %r14,-0xd8(%rbp)
    be7a:	mov    %r14,%rcx
    be7d:	xor    %r10d,%ecx
    be80:	sub    %r14d,%ecx
    be83:	movslq %ecx,%rcx
    be86:	movzbl (%rcx,%rax,1),%ecx
    be8a:	mov    %rcx,-0x128(%rbp)
    be91:	jmpq   c1c4 <F_0_714+0xaf2>
    be96:	cmp    $0x2f,%edx
    be99:	jle    bf5c <F_0_714+0x88a>
    be9f:	lea    0x38(%rdx),%ecx
    bea2:	mov    %rdi,%r15
    bea5:	shr    %cl,%r15
    bea8:	mov    %r15b,0x0(%r13)
    beac:	lea    0x1(%r13),%r14
    beb0:	cmp    $0xff,%r15b
    beb4:	jne    bebe <F_0_714+0x7ec>
    beb6:	movb   $0x0,(%r14)
    beba:	lea    0x2(%r13),%r14
    bebe:	lea    0x30(%rdx),%ecx
    bec1:	mov    %rdi,%r15
    bec4:	shr    %cl,%r15
    bec7:	mov    %r15b,(%r14)
    beca:	lea    0x1(%r14),%r13
    bece:	cmp    $0xff,%r15b
    bed2:	jne    bedd <F_0_714+0x80b>
    bed4:	movb   $0x0,0x0(%r13)
    bed9:	lea    0x2(%r14),%r13
    bedd:	lea    0x28(%rdx),%ecx
    bee0:	mov    %rdi,%r15
    bee3:	shr    %cl,%r15
    bee6:	mov    %r15b,0x0(%r13)
    beea:	lea    0x1(%r13),%r14
    beee:	cmp    $0xff,%r15b
    bef2:	jne    befc <F_0_714+0x82a>
    bef4:	movb   $0x0,(%r14)
    bef8:	lea    0x2(%r13),%r14
    befc:	lea    0x20(%rdx),%ecx
    beff:	mov    %rdi,%r15
    bf02:	shr    %cl,%r15
    bf05:	mov    %r15b,(%r14)
    bf08:	lea    0x1(%r14),%r13
    bf0c:	cmp    $0xff,%r15b
    bf10:	jne    bf1b <F_0_714+0x849>
    bf12:	movb   $0x0,0x0(%r13)
    bf17:	lea    0x2(%r14),%r13
    bf1b:	lea    0x18(%rdx),%ecx
    bf1e:	mov    %rdi,%r15
    bf21:	shr    %cl,%r15
    bf24:	mov    %r15b,0x0(%r13)
    bf28:	lea    0x1(%r13),%r14
    bf2c:	cmp    $0xff,%r15b
    bf30:	jne    bf3a <F_0_714+0x868>
    bf32:	movb   $0x0,(%r14)
    bf36:	lea    0x2(%r13),%r14
    bf3a:	lea    -0x30(%rdx),%ecx
    bf3d:	mov    %rdi,%r15
    bf40:	shr    %cl,%r15
    bf43:	mov    %rcx,%rdx
    bf46:	mov    %r15b,(%r14)
    bf49:	lea    0x1(%r14),%r13
    bf4d:	cmp    $0xff,%r15b
    bf51:	jne    bf5c <F_0_714+0x88a>
    bf53:	movb   $0x0,0x0(%r13)
    bf58:	lea    0x2(%r14),%r13
    bf5c:	mov    %rbx,%rcx
    bf5f:	shl    %cl,%rdi
    bf62:	mov    %rcx,%rbx
    bf65:	or     %r9,%rdi
    bf68:	add    %ebx,%edx
    bf6a:	add    $0xfffffff0,%r11d
    bf6e:	cmp    $0xf,%r11d
    bf72:	jg     be96 <F_0_714+0x7c4>
    bf78:	shl    $0x4,%r11d
    bf7c:	mov    -0x128(%rbp),%rcx
    bf83:	add    %ecx,%r11d
    bf86:	movslq %r11d,%r14
    bf89:	movslq (%r8,%r14,4),%r11
    bf8d:	movsbq 0x400(%r8,%r14,1),%r14
    bf96:	cmp    $0x1f,%edx
    bf99:	jg     c23b <F_0_714+0xb69>
    bf9f:	mov    %rdi,%r15
    bfa2:	shl    %cl,%r12
    bfa5:	lea    -0x1(%r12),%edi
    bfaa:	mov    -0xd8(%rbp),%r12
    bfb1:	add    %r12d,%r10d
    bfb4:	and    %r10d,%edi
    bfb7:	movslq %edi,%rdi
    bfba:	mov    %rcx,%r12
    bfbd:	mov    %r14,%rcx
    bfc0:	shl    %cl,%r15
    bfc3:	mov    %rcx,%r10
    bfc6:	or     %r15,%r11
    bfc9:	mov    %r12,%rcx
    bfcc:	shl    %cl,%r11
    bfcf:	or     %r11,%rdi
    bfd2:	add    %r10d,%edx
    bfd5:	add    %ecx,%edx
    bfd7:	mov    $0x1,%r12d
    bfdd:	xor    %r11d,%r11d
    bfe0:	jmpq   be5d <F_0_714+0x78b>
    bfe5:	mov    %rcx,%r15
    bfe8:	lea    0x38(%rdx),%ecx
    bfeb:	mov    %rdi,%r8
    bfee:	shr    %cl,%r8
    bff1:	mov    %r8b,0x0(%r13)
    bff5:	lea    0x1(%r13),%rcx
    bff9:	cmp    $0xff,%r8b
    bffd:	je     c261 <F_0_714+0xb8f>
    c003:	mov    %rcx,%r8
    c006:	jmpq   c268 <F_0_714+0xb96>
    c00b:	movb   $0x0,(%rcx)
    c00e:	lea    0x2(%r13),%r8
    c012:	lea    0x30(%rdx),%ecx
    c015:	mov    %rdi,%r13
    c018:	shr    %cl,%r13
    c01b:	mov    %r13b,(%r8)
    c01e:	lea    0x1(%r8),%rcx
    c022:	cmp    $0xff,%r13b
    c026:	je     c28a <F_0_714+0xbb8>
    c02c:	mov    %rcx,%r8
    c02f:	jmpq   c291 <F_0_714+0xbbf>
    c034:	movb   $0x0,(%rcx)
    c037:	add    $0x2,%r8
    c03b:	lea    0x28(%rdx),%ecx
    c03e:	mov    %rdi,%r13
    c041:	shr    %cl,%r13
    c044:	mov    %r13b,(%r8)
    c047:	lea    0x1(%r8),%rcx
    c04b:	cmp    $0xff,%r13b
    c04f:	je     c2b3 <F_0_714+0xbe1>
    c055:	mov    %rcx,%r8
    c058:	jmpq   c2ba <F_0_714+0xbe8>
    c05d:	movb   $0x0,(%rcx)
    c060:	add    $0x2,%r8
    c064:	lea    -0x20(%rdx),%ecx
    c067:	mov    %rdi,%r13
    c06a:	shr    %cl,%r13
    c06d:	mov    %rcx,%rdx
    c070:	mov    %r13b,(%r8)
    c073:	lea    0x1(%r8),%rcx
    c077:	cmp    $0xff,%r13b
    c07b:	je     c2ec <F_0_714+0xc1a>
    c081:	mov    %rcx,%r13
    c084:	mov    %r15,%rcx
    c087:	mov    %rdi,%r15
    c08a:	mov    -0x120(%rbp),%r8
    c091:	jmpq   b64a <F_0_587+0x2004>
    c096:	movb   $0x0,(%rcx)
    c099:	lea    0x2(%r8),%r13
    c09d:	mov    %r15,%rcx
    c0a0:	mov    %rdi,%r15
    c0a3:	mov    -0x120(%rbp),%r8
    c0aa:	jmpq   b3f4 <F_0_587+0x1dae>
    c0af:	add    $0x1,%r11d
    c0b3:	movswq 0x36(%rsi),%r10
    c0b8:	test   %r10w,%r10w
    c0bc:	je     c305 <F_0_714+0xc33>
    c0c2:	mov    %r10,%r14
    c0c5:	sar    $0x1f,%r14d
    c0c9:	mov    %r14,-0xd0(%rbp)
    c0d0:	mov    %r14,%rcx
    c0d3:	xor    %r10d,%ecx
    c0d6:	sub    %r14d,%ecx
    c0d9:	movslq %ecx,%rcx
    c0dc:	movzbl (%rcx,%rax,1),%ecx
    c0e0:	mov    %rcx,-0x128(%rbp)
    c0e7:	jmpq   c41a <F_0_714+0xd48>
    c0ec:	cmp    $0x2f,%edx
    c0ef:	jle    c1b2 <F_0_714+0xae0>
    c0f5:	lea    0x38(%rdx),%ecx
    c0f8:	mov    %rdi,%r15
    c0fb:	shr    %cl,%r15
    c0fe:	mov    %r15b,0x0(%r13)
    c102:	lea    0x1(%r13),%r14
    c106:	cmp    $0xff,%r15b
    c10a:	jne    c114 <F_0_714+0xa42>
    c10c:	movb   $0x0,(%r14)
    c110:	lea    0x2(%r13),%r14
    c114:	lea    0x30(%rdx),%ecx
    c117:	mov    %rdi,%r15
    c11a:	shr    %cl,%r15
    c11d:	mov    %r15b,(%r14)
    c120:	lea    0x1(%r14),%r13
    c124:	cmp    $0xff,%r15b
    c128:	jne    c133 <F_0_714+0xa61>
    c12a:	movb   $0x0,0x0(%r13)
    c12f:	lea    0x2(%r14),%r13
    c133:	lea    0x28(%rdx),%ecx
    c136:	mov    %rdi,%r15
    c139:	shr    %cl,%r15
    c13c:	mov    %r15b,0x0(%r13)
    c140:	lea    0x1(%r13),%r14
    c144:	cmp    $0xff,%r15b
    c148:	jne    c152 <F_0_714+0xa80>
    c14a:	movb   $0x0,(%r14)
    c14e:	lea    0x2(%r13),%r14
    c152:	lea    0x20(%rdx),%ecx
    c155:	mov    %rdi,%r15
    c158:	shr    %cl,%r15
    c15b:	mov    %r15b,(%r14)
    c15e:	lea    0x1(%r14),%r13
    c162:	cmp    $0xff,%r15b
    c166:	jne    c171 <F_0_714+0xa9f>
    c168:	movb   $0x0,0x0(%r13)
    c16d:	lea    0x2(%r14),%r13
    c171:	lea    0x18(%rdx),%ecx
    c174:	mov    %rdi,%r15
    c177:	shr    %cl,%r15
    c17a:	mov    %r15b,0x0(%r13)
    c17e:	lea    0x1(%r13),%r14
    c182:	cmp    $0xff,%r15b
    c186:	jne    c190 <F_0_714+0xabe>
    c188:	movb   $0x0,(%r14)
    c18c:	lea    0x2(%r13),%r14
    c190:	lea    -0x30(%rdx),%ecx
    c193:	mov    %rdi,%r15
    c196:	shr    %cl,%r15
    c199:	mov    %rcx,%rdx
    c19c:	mov    %r15b,(%r14)
    c19f:	lea    0x1(%r14),%r13
    c1a3:	cmp    $0xff,%r15b
    c1a7:	jne    c1b2 <F_0_714+0xae0>
    c1a9:	movb   $0x0,0x0(%r13)
    c1ae:	lea    0x2(%r14),%r13
    c1b2:	mov    %rbx,%rcx
    c1b5:	shl    %cl,%rdi
    c1b8:	mov    %rcx,%rbx
    c1bb:	or     %r9,%rdi
    c1be:	add    %ebx,%edx
    c1c0:	add    $0xfffffff0,%r11d
    c1c4:	cmp    $0xf,%r11d
    c1c8:	jg     c0ec <F_0_714+0xa1a>
    c1ce:	shl    $0x4,%r11d
    c1d2:	mov    -0x128(%rbp),%rcx
    c1d9:	add    %ecx,%r11d
    c1dc:	movslq %r11d,%r14
    c1df:	movslq (%r8,%r14,4),%r11
    c1e3:	movsbq 0x400(%r8,%r14,1),%r14
    c1ec:	cmp    $0x1f,%edx
    c1ef:	jg     c491 <F_0_714+0xdbf>
    c1f5:	mov    %rdi,%r15
    c1f8:	shl    %cl,%r12
    c1fb:	lea    -0x1(%r12),%edi
    c200:	mov    -0xd8(%rbp),%r12
    c207:	add    %r12d,%r10d
    c20a:	and    %r10d,%edi
    c20d:	movslq %edi,%rdi
    c210:	mov    %rcx,%r12
    c213:	mov    %r14,%rcx
    c216:	shl    %cl,%r15
    c219:	mov    %rcx,%r10
    c21c:	or     %r15,%r11
    c21f:	mov    %r12,%rcx
    c222:	shl    %cl,%r11
    c225:	or     %r11,%rdi
    c228:	add    %r10d,%edx
    c22b:	add    %ecx,%edx
    c22d:	mov    $0x1,%r12d
    c233:	xor    %r11d,%r11d
    c236:	jmpq   c0b3 <F_0_714+0x9e1>
    c23b:	mov    %rcx,%r15
    c23e:	lea    0x38(%rdx),%ecx
    c241:	mov    %rdi,%r8
    c244:	shr    %cl,%r8
    c247:	mov    %r8b,0x0(%r13)
    c24b:	lea    0x1(%r13),%rcx
    c24f:	cmp    $0xff,%r8b
    c253:	je     c4b7 <F_0_714+0xde5>
    c259:	mov    %rcx,%r8
    c25c:	jmpq   c4be <F_0_714+0xdec>
    c261:	movb   $0x0,(%rcx)
    c264:	lea    0x2(%r13),%r8
    c268:	lea    0x30(%rdx),%ecx
    c26b:	mov    %rdi,%r13
    c26e:	shr    %cl,%r13
    c271:	mov    %r13b,(%r8)
    c274:	lea    0x1(%r8),%rcx
    c278:	cmp    $0xff,%r13b
    c27c:	je     c4e0 <F_0_714+0xe0e>
    c282:	mov    %rcx,%r8
    c285:	jmpq   c4e7 <F_0_714+0xe15>
    c28a:	movb   $0x0,(%rcx)
    c28d:	add    $0x2,%r8
    c291:	lea    0x28(%rdx),%ecx
    c294:	mov    %rdi,%r13
    c297:	shr    %cl,%r13
    c29a:	mov    %r13b,(%r8)
    c29d:	lea    0x1(%r8),%rcx
    c2a1:	cmp    $0xff,%r13b
    c2a5:	je     c509 <F_0_714+0xe37>
    c2ab:	mov    %rcx,%r8
    c2ae:	jmpq   c510 <F_0_714+0xe3e>
    c2b3:	movb   $0x0,(%rcx)
    c2b6:	add    $0x2,%r8
    c2ba:	lea    -0x20(%rdx),%ecx
    c2bd:	mov    %rdi,%r13
    c2c0:	shr    %cl,%r13
    c2c3:	mov    %rcx,%rdx
    c2c6:	mov    %r13b,(%r8)
    c2c9:	lea    0x1(%r8),%rcx
    c2cd:	cmp    $0xff,%r13b
    c2d1:	je     c542 <F_0_714+0xe70>
    c2d7:	mov    %rcx,%r13
    c2da:	mov    %r15,%rcx
    c2dd:	mov    %rdi,%r15
    c2e0:	mov    -0x120(%rbp),%r8
    c2e7:	jmpq   b8a0 <F_0_714+0x1ce>
    c2ec:	movb   $0x0,(%rcx)
    c2ef:	lea    0x2(%r8),%r13
    c2f3:	mov    %r15,%rcx
    c2f6:	mov    %rdi,%r15
    c2f9:	mov    -0x120(%rbp),%r8
    c300:	jmpq   b64a <F_0_587+0x2004>
    c305:	add    $0x1,%r11d
    c309:	movswq 0x28(%rsi),%r10
    c30e:	test   %r10w,%r10w
    c312:	je     c55b <F_0_714+0xe89>
    c318:	mov    %r10,%r14
    c31b:	sar    $0x1f,%r14d
    c31f:	mov    %r14,-0xd0(%rbp)
    c326:	mov    %r14,%rcx
    c329:	xor    %r10d,%ecx
    c32c:	sub    %r14d,%ecx
    c32f:	movslq %ecx,%rcx
    c332:	movzbl (%rcx,%rax,1),%ecx
    c336:	mov    %rcx,-0x128(%rbp)
    c33d:	jmpq   c670 <F_0_714+0xf9e>
    c342:	cmp    $0x2f,%edx
    c345:	jle    c408 <F_0_714+0xd36>
    c34b:	lea    0x38(%rdx),%ecx
    c34e:	mov    %rdi,%r15
    c351:	shr    %cl,%r15
    c354:	mov    %r15b,0x0(%r13)
    c358:	lea    0x1(%r13),%r14
    c35c:	cmp    $0xff,%r15b
    c360:	jne    c36a <F_0_714+0xc98>
    c362:	movb   $0x0,(%r14)
    c366:	lea    0x2(%r13),%r14
    c36a:	lea    0x30(%rdx),%ecx
    c36d:	mov    %rdi,%r15
    c370:	shr    %cl,%r15
    c373:	mov    %r15b,(%r14)
    c376:	lea    0x1(%r14),%r13
    c37a:	cmp    $0xff,%r15b
    c37e:	jne    c389 <F_0_714+0xcb7>
    c380:	movb   $0x0,0x0(%r13)
    c385:	lea    0x2(%r14),%r13
    c389:	lea    0x28(%rdx),%ecx
    c38c:	mov    %rdi,%r15
    c38f:	shr    %cl,%r15
    c392:	mov    %r15b,0x0(%r13)
    c396:	lea    0x1(%r13),%r14
    c39a:	cmp    $0xff,%r15b
    c39e:	jne    c3a8 <F_0_714+0xcd6>
    c3a0:	movb   $0x0,(%r14)
    c3a4:	lea    0x2(%r13),%r14
    c3a8:	lea    0x20(%rdx),%ecx
    c3ab:	mov    %rdi,%r15
    c3ae:	shr    %cl,%r15
    c3b1:	mov    %r15b,(%r14)
    c3b4:	lea    0x1(%r14),%r13
    c3b8:	cmp    $0xff,%r15b
    c3bc:	jne    c3c7 <F_0_714+0xcf5>
    c3be:	movb   $0x0,0x0(%r13)
    c3c3:	lea    0x2(%r14),%r13
    c3c7:	lea    0x18(%rdx),%ecx
    c3ca:	mov    %rdi,%r15
    c3cd:	shr    %cl,%r15
    c3d0:	mov    %r15b,0x0(%r13)
    c3d4:	lea    0x1(%r13),%r14
    c3d8:	cmp    $0xff,%r15b
    c3dc:	jne    c3e6 <F_0_714+0xd14>
    c3de:	movb   $0x0,(%r14)
    c3e2:	lea    0x2(%r13),%r14
    c3e6:	lea    -0x30(%rdx),%ecx
    c3e9:	mov    %rdi,%r15
    c3ec:	shr    %cl,%r15
    c3ef:	mov    %rcx,%rdx
    c3f2:	mov    %r15b,(%r14)
    c3f5:	lea    0x1(%r14),%r13
    c3f9:	cmp    $0xff,%r15b
    c3fd:	jne    c408 <F_0_714+0xd36>
    c3ff:	movb   $0x0,0x0(%r13)
    c404:	lea    0x2(%r14),%r13
    c408:	mov    %rbx,%rcx
    c40b:	shl    %cl,%rdi
    c40e:	mov    %rcx,%rbx
    c411:	or     %r9,%rdi
    c414:	add    %ebx,%edx
    c416:	add    $0xfffffff0,%r11d
    c41a:	cmp    $0xf,%r11d
    c41e:	jg     c342 <F_0_714+0xc70>
    c424:	shl    $0x4,%r11d
    c428:	mov    -0x128(%rbp),%rcx
    c42f:	add    %ecx,%r11d
    c432:	movslq %r11d,%r14
    c435:	movslq (%r8,%r14,4),%r11
    c439:	movsbq 0x400(%r8,%r14,1),%r14
    c442:	cmp    $0x1f,%edx
    c445:	jg     c6e7 <F_0_714+0x1015>
    c44b:	mov    %rdi,%r15
    c44e:	shl    %cl,%r12
    c451:	lea    -0x1(%r12),%edi
    c456:	mov    -0xd0(%rbp),%r12
    c45d:	add    %r12d,%r10d
    c460:	and    %r10d,%edi
    c463:	movslq %edi,%rdi
    c466:	mov    %rcx,%r12
    c469:	mov    %r14,%rcx
    c46c:	shl    %cl,%r15
    c46f:	mov    %rcx,%r10
    c472:	or     %r15,%r11
    c475:	mov    %r12,%rcx
    c478:	shl    %cl,%r11
    c47b:	or     %r11,%rdi
    c47e:	add    %r10d,%edx
    c481:	add    %ecx,%edx
    c483:	mov    $0x1,%r12d
    c489:	xor    %r11d,%r11d
    c48c:	jmpq   c309 <F_0_714+0xc37>
    c491:	mov    %rcx,%r15
    c494:	lea    0x38(%rdx),%ecx
    c497:	mov    %rdi,%r8
    c49a:	shr    %cl,%r8
    c49d:	mov    %r8b,0x0(%r13)
    c4a1:	lea    0x1(%r13),%rcx
    c4a5:	cmp    $0xff,%r8b
    c4a9:	je     c70d <F_0_714+0x103b>
    c4af:	mov    %rcx,%r8
    c4b2:	jmpq   c714 <F_0_714+0x1042>
    c4b7:	movb   $0x0,(%rcx)
    c4ba:	lea    0x2(%r13),%r8
    c4be:	lea    0x30(%rdx),%ecx
    c4c1:	mov    %rdi,%r13
    c4c4:	shr    %cl,%r13
    c4c7:	mov    %r13b,(%r8)
    c4ca:	lea    0x1(%r8),%rcx
    c4ce:	cmp    $0xff,%r13b
    c4d2:	je     c736 <F_0_714+0x1064>
    c4d8:	mov    %rcx,%r8
    c4db:	jmpq   c73d <F_0_714+0x106b>
    c4e0:	movb   $0x0,(%rcx)
    c4e3:	add    $0x2,%r8
    c4e7:	lea    0x28(%rdx),%ecx
    c4ea:	mov    %rdi,%r13
    c4ed:	shr    %cl,%r13
    c4f0:	mov    %r13b,(%r8)
    c4f3:	lea    0x1(%r8),%rcx
    c4f7:	cmp    $0xff,%r13b
    c4fb:	je     c75f <F_0_714+0x108d>
    c501:	mov    %rcx,%r8
    c504:	jmpq   c766 <F_0_714+0x1094>
    c509:	movb   $0x0,(%rcx)
    c50c:	add    $0x2,%r8
    c510:	lea    -0x20(%rdx),%ecx
    c513:	mov    %rdi,%r13
    c516:	shr    %cl,%r13
    c519:	mov    %rcx,%rdx
    c51c:	mov    %r13b,(%r8)
    c51f:	lea    0x1(%r8),%rcx
    c523:	cmp    $0xff,%r13b
    c527:	je     c798 <F_0_714+0x10c6>
    c52d:	mov    %rcx,%r13
    c530:	mov    %r15,%rcx
    c533:	mov    %rdi,%r15
    c536:	mov    -0x120(%rbp),%r8
    c53d:	jmpq   baf6 <F_0_714+0x424>
    c542:	movb   $0x0,(%rcx)
    c545:	lea    0x2(%r8),%r13
    c549:	mov    %r15,%rcx
    c54c:	mov    %rdi,%r15
    c54f:	mov    -0x120(%rbp),%r8
    c556:	jmpq   b8a0 <F_0_714+0x1ce>
    c55b:	add    $0x1,%r11d
    c55f:	movswq 0x1a(%rsi),%r10
    c564:	test   %r10w,%r10w
    c568:	je     c7b1 <F_0_714+0x10df>
    c56e:	mov    %r10,%r14
    c571:	sar    $0x1f,%r14d
    c575:	mov    %r14,-0xc8(%rbp)
    c57c:	mov    %r14,%rcx
    c57f:	xor    %r10d,%ecx
    c582:	sub    %r14d,%ecx
    c585:	movslq %ecx,%rcx
    c588:	movzbl (%rcx,%rax,1),%ecx
    c58c:	mov    %rcx,-0x128(%rbp)
    c593:	jmpq   c8c6 <F_0_714+0x11f4>
    c598:	cmp    $0x2f,%edx
    c59b:	jle    c65e <F_0_714+0xf8c>
    c5a1:	lea    0x38(%rdx),%ecx
    c5a4:	mov    %rdi,%r15
    c5a7:	shr    %cl,%r15
    c5aa:	mov    %r15b,0x0(%r13)
    c5ae:	lea    0x1(%r13),%r14
    c5b2:	cmp    $0xff,%r15b
    c5b6:	jne    c5c0 <F_0_714+0xeee>
    c5b8:	movb   $0x0,(%r14)
    c5bc:	lea    0x2(%r13),%r14
    c5c0:	lea    0x30(%rdx),%ecx
    c5c3:	mov    %rdi,%r15
    c5c6:	shr    %cl,%r15
    c5c9:	mov    %r15b,(%r14)
    c5cc:	lea    0x1(%r14),%r13
    c5d0:	cmp    $0xff,%r15b
    c5d4:	jne    c5df <F_0_714+0xf0d>
    c5d6:	movb   $0x0,0x0(%r13)
    c5db:	lea    0x2(%r14),%r13
    c5df:	lea    0x28(%rdx),%ecx
    c5e2:	mov    %rdi,%r15
    c5e5:	shr    %cl,%r15
    c5e8:	mov    %r15b,0x0(%r13)
    c5ec:	lea    0x1(%r13),%r14
    c5f0:	cmp    $0xff,%r15b
    c5f4:	jne    c5fe <F_0_714+0xf2c>
    c5f6:	movb   $0x0,(%r14)
    c5fa:	lea    0x2(%r13),%r14
    c5fe:	lea    0x20(%rdx),%ecx
    c601:	mov    %rdi,%r15
    c604:	shr    %cl,%r15
    c607:	mov    %r15b,(%r14)
    c60a:	lea    0x1(%r14),%r13
    c60e:	cmp    $0xff,%r15b
    c612:	jne    c61d <F_0_714+0xf4b>
    c614:	movb   $0x0,0x0(%r13)
    c619:	lea    0x2(%r14),%r13
    c61d:	lea    0x18(%rdx),%ecx
    c620:	mov    %rdi,%r15
    c623:	shr    %cl,%r15
    c626:	mov    %r15b,0x0(%r13)
    c62a:	lea    0x1(%r13),%r14
    c62e:	cmp    $0xff,%r15b
    c632:	jne    c63c <F_0_714+0xf6a>
    c634:	movb   $0x0,(%r14)
    c638:	lea    0x2(%r13),%r14
    c63c:	lea    -0x30(%rdx),%ecx
    c63f:	mov    %rdi,%r15
    c642:	shr    %cl,%r15
    c645:	mov    %rcx,%rdx
    c648:	mov    %r15b,(%r14)
    c64b:	lea    0x1(%r14),%r13
    c64f:	cmp    $0xff,%r15b
    c653:	jne    c65e <F_0_714+0xf8c>
    c655:	movb   $0x0,0x0(%r13)
    c65a:	lea    0x2(%r14),%r13
    c65e:	mov    %rbx,%rcx
    c661:	shl    %cl,%rdi
    c664:	mov    %rcx,%rbx
    c667:	or     %r9,%rdi
    c66a:	add    %ebx,%edx
    c66c:	add    $0xfffffff0,%r11d
    c670:	cmp    $0xf,%r11d
    c674:	jg     c598 <F_0_714+0xec6>
    c67a:	shl    $0x4,%r11d
    c67e:	mov    -0x128(%rbp),%rcx
    c685:	add    %ecx,%r11d
    c688:	movslq %r11d,%r14
    c68b:	movslq (%r8,%r14,4),%r11
    c68f:	movsbq 0x400(%r8,%r14,1),%r14
    c698:	cmp    $0x1f,%edx
    c69b:	jg     c93d <F_0_714+0x126b>
    c6a1:	mov    %rdi,%r15
    c6a4:	shl    %cl,%r12
    c6a7:	lea    -0x1(%r12),%edi
    c6ac:	mov    -0xd0(%rbp),%r12
    c6b3:	add    %r12d,%r10d
    c6b6:	and    %r10d,%edi
    c6b9:	movslq %edi,%rdi
    c6bc:	mov    %rcx,%r12
    c6bf:	mov    %r14,%rcx
    c6c2:	shl    %cl,%r15
    c6c5:	mov    %rcx,%r10
    c6c8:	or     %r15,%r11
    c6cb:	mov    %r12,%rcx
    c6ce:	shl    %cl,%r11
    c6d1:	or     %r11,%rdi
    c6d4:	add    %r10d,%edx
    c6d7:	add    %ecx,%edx
    c6d9:	mov    $0x1,%r12d
    c6df:	xor    %r11d,%r11d
    c6e2:	jmpq   c55f <F_0_714+0xe8d>
    c6e7:	mov    %rcx,%r15
    c6ea:	lea    0x38(%rdx),%ecx
    c6ed:	mov    %rdi,%r8
    c6f0:	shr    %cl,%r8
    c6f3:	mov    %r8b,0x0(%r13)
    c6f7:	lea    0x1(%r13),%rcx
    c6fb:	cmp    $0xff,%r8b
    c6ff:	je     c963 <F_0_714+0x1291>
    c705:	mov    %rcx,%r8
    c708:	jmpq   c96a <F_0_714+0x1298>
    c70d:	movb   $0x0,(%rcx)
    c710:	lea    0x2(%r13),%r8
    c714:	lea    0x30(%rdx),%ecx
    c717:	mov    %rdi,%r13
    c71a:	shr    %cl,%r13
    c71d:	mov    %r13b,(%r8)
    c720:	lea    0x1(%r8),%rcx
    c724:	cmp    $0xff,%r13b
    c728:	je     c98c <F_0_714+0x12ba>
    c72e:	mov    %rcx,%r8
    c731:	jmpq   c993 <F_0_714+0x12c1>
    c736:	movb   $0x0,(%rcx)
    c739:	add    $0x2,%r8
    c73d:	lea    0x28(%rdx),%ecx
    c740:	mov    %rdi,%r13
    c743:	shr    %cl,%r13
    c746:	mov    %r13b,(%r8)
    c749:	lea    0x1(%r8),%rcx
    c74d:	cmp    $0xff,%r13b
    c751:	je     c9b5 <F_0_714+0x12e3>
    c757:	mov    %rcx,%r8
    c75a:	jmpq   c9bc <F_0_714+0x12ea>
    c75f:	movb   $0x0,(%rcx)
    c762:	add    $0x2,%r8
    c766:	lea    -0x20(%rdx),%ecx
    c769:	mov    %rdi,%r13
    c76c:	shr    %cl,%r13
    c76f:	mov    %rcx,%rdx
    c772:	mov    %r13b,(%r8)
    c775:	lea    0x1(%r8),%rcx
    c779:	cmp    $0xff,%r13b
    c77d:	je     c9ee <F_0_714+0x131c>
    c783:	mov    %rcx,%r13
    c786:	mov    %r15,%rcx
    c789:	mov    %rdi,%r15
    c78c:	mov    -0x120(%rbp),%r8
    c793:	jmpq   bd4c <F_0_714+0x67a>
    c798:	movb   $0x0,(%rcx)
    c79b:	lea    0x2(%r8),%r13
    c79f:	mov    %r15,%rcx
    c7a2:	mov    %rdi,%r15
    c7a5:	mov    -0x120(%rbp),%r8
    c7ac:	jmpq   baf6 <F_0_714+0x424>
    c7b1:	add    $0x1,%r11d
    c7b5:	movswq 0xc(%rsi),%r10
    c7ba:	test   %r10w,%r10w
    c7be:	je     ca07 <F_0_714+0x1335>
    c7c4:	mov    %r10,%r14
    c7c7:	sar    $0x1f,%r14d
    c7cb:	mov    %r14,-0xc8(%rbp)
    c7d2:	mov    %r14,%rcx
    c7d5:	xor    %r10d,%ecx
    c7d8:	sub    %r14d,%ecx
    c7db:	movslq %ecx,%rcx
    c7de:	movzbl (%rcx,%rax,1),%ecx
    c7e2:	mov    %rcx,-0x128(%rbp)
    c7e9:	jmpq   cb1c <F_0_714+0x144a>
    c7ee:	cmp    $0x2f,%edx
    c7f1:	jle    c8b4 <F_0_714+0x11e2>
    c7f7:	lea    0x38(%rdx),%ecx
    c7fa:	mov    %rdi,%r15
    c7fd:	shr    %cl,%r15
    c800:	mov    %r15b,0x0(%r13)
    c804:	lea    0x1(%r13),%r14
    c808:	cmp    $0xff,%r15b
    c80c:	jne    c816 <F_0_714+0x1144>
    c80e:	movb   $0x0,(%r14)
    c812:	lea    0x2(%r13),%r14
    c816:	lea    0x30(%rdx),%ecx
    c819:	mov    %rdi,%r15
    c81c:	shr    %cl,%r15
    c81f:	mov    %r15b,(%r14)
    c822:	lea    0x1(%r14),%r13
    c826:	cmp    $0xff,%r15b
    c82a:	jne    c835 <F_0_714+0x1163>
    c82c:	movb   $0x0,0x0(%r13)
    c831:	lea    0x2(%r14),%r13
    c835:	lea    0x28(%rdx),%ecx
    c838:	mov    %rdi,%r15
    c83b:	shr    %cl,%r15
    c83e:	mov    %r15b,0x0(%r13)
    c842:	lea    0x1(%r13),%r14
    c846:	cmp    $0xff,%r15b
    c84a:	jne    c854 <F_0_714+0x1182>
    c84c:	movb   $0x0,(%r14)
    c850:	lea    0x2(%r13),%r14
    c854:	lea    0x20(%rdx),%ecx
    c857:	mov    %rdi,%r15
    c85a:	shr    %cl,%r15
    c85d:	mov    %r15b,(%r14)
    c860:	lea    0x1(%r14),%r13
    c864:	cmp    $0xff,%r15b
    c868:	jne    c873 <F_0_714+0x11a1>
    c86a:	movb   $0x0,0x0(%r13)
    c86f:	lea    0x2(%r14),%r13
    c873:	lea    0x18(%rdx),%ecx
    c876:	mov    %rdi,%r15
    c879:	shr    %cl,%r15
    c87c:	mov    %r15b,0x0(%r13)
    c880:	lea    0x1(%r13),%r14
    c884:	cmp    $0xff,%r15b
    c888:	jne    c892 <F_0_714+0x11c0>
    c88a:	movb   $0x0,(%r14)
    c88e:	lea    0x2(%r13),%r14
    c892:	lea    -0x30(%rdx),%ecx
    c895:	mov    %rdi,%r15
    c898:	shr    %cl,%r15
    c89b:	mov    %rcx,%rdx
    c89e:	mov    %r15b,(%r14)
    c8a1:	lea    0x1(%r14),%r13
    c8a5:	cmp    $0xff,%r15b
    c8a9:	jne    c8b4 <F_0_714+0x11e2>
    c8ab:	movb   $0x0,0x0(%r13)
    c8b0:	lea    0x2(%r14),%r13
    c8b4:	mov    %rbx,%rcx
    c8b7:	shl    %cl,%rdi
    c8ba:	mov    %rcx,%rbx
    c8bd:	or     %r9,%rdi
    c8c0:	add    %ebx,%edx
    c8c2:	add    $0xfffffff0,%r11d
    c8c6:	cmp    $0xf,%r11d
    c8ca:	jg     c7ee <F_0_714+0x111c>
    c8d0:	shl    $0x4,%r11d
    c8d4:	mov    -0x128(%rbp),%rcx
    c8db:	add    %ecx,%r11d
    c8de:	movslq %r11d,%r14
    c8e1:	movslq (%r8,%r14,4),%r11
    c8e5:	movsbq 0x400(%r8,%r14,1),%r14
    c8ee:	cmp    $0x1f,%edx
    c8f1:	jg     cb93 <F_0_714+0x14c1>
    c8f7:	mov    %rdi,%r15
    c8fa:	shl    %cl,%r12
    c8fd:	lea    -0x1(%r12),%edi
    c902:	mov    -0xc8(%rbp),%r12
    c909:	add    %r12d,%r10d
    c90c:	and    %r10d,%edi
    c90f:	movslq %edi,%rdi
    c912:	mov    %rcx,%r12
    c915:	mov    %r14,%rcx
    c918:	shl    %cl,%r15
    c91b:	mov    %rcx,%r10
    c91e:	or     %r15,%r11
    c921:	mov    %r12,%rcx
    c924:	shl    %cl,%r11
    c927:	or     %r11,%rdi
    c92a:	add    %r10d,%edx
    c92d:	add    %ecx,%edx
    c92f:	mov    $0x1,%r12d
    c935:	xor    %r11d,%r11d
    c938:	jmpq   c7b5 <F_0_714+0x10e3>
    c93d:	mov    %rcx,%r15
    c940:	lea    0x38(%rdx),%ecx
    c943:	mov    %rdi,%r8
    c946:	shr    %cl,%r8
    c949:	mov    %r8b,0x0(%r13)
    c94d:	lea    0x1(%r13),%rcx
    c951:	cmp    $0xff,%r8b
    c955:	je     cbb9 <F_0_714+0x14e7>
    c95b:	mov    %rcx,%r8
    c95e:	jmpq   cbc0 <F_0_714+0x14ee>
    c963:	movb   $0x0,(%rcx)
    c966:	lea    0x2(%r13),%r8
    c96a:	lea    0x30(%rdx),%ecx
    c96d:	mov    %rdi,%r13
    c970:	shr    %cl,%r13
    c973:	mov    %r13b,(%r8)
    c976:	lea    0x1(%r8),%rcx
    c97a:	cmp    $0xff,%r13b
    c97e:	je     cbe2 <F_0_714+0x1510>
    c984:	mov    %rcx,%r8
    c987:	jmpq   cbe9 <F_0_714+0x1517>
    c98c:	movb   $0x0,(%rcx)
    c98f:	add    $0x2,%r8
    c993:	lea    0x28(%rdx),%ecx
    c996:	mov    %rdi,%r13
    c999:	shr    %cl,%r13
    c99c:	mov    %r13b,(%r8)
    c99f:	lea    0x1(%r8),%rcx
    c9a3:	cmp    $0xff,%r13b
    c9a7:	je     cc0b <F_0_714+0x1539>
    c9ad:	mov    %rcx,%r8
    c9b0:	jmpq   cc12 <F_0_714+0x1540>
    c9b5:	movb   $0x0,(%rcx)
    c9b8:	add    $0x2,%r8
    c9bc:	lea    -0x20(%rdx),%ecx
    c9bf:	mov    %rdi,%r13
    c9c2:	shr    %cl,%r13
    c9c5:	mov    %rcx,%rdx
    c9c8:	mov    %r13b,(%r8)
    c9cb:	lea    0x1(%r8),%rcx
    c9cf:	cmp    $0xff,%r13b
    c9d3:	je     cc44 <F_0_714+0x1572>
    c9d9:	mov    %rcx,%r13
    c9dc:	mov    %r15,%rcx
    c9df:	mov    %rdi,%r15
    c9e2:	mov    -0x120(%rbp),%r8
    c9e9:	jmpq   bfa2 <F_0_714+0x8d0>
    c9ee:	movb   $0x0,(%rcx)
    c9f1:	lea    0x2(%r8),%r13
    c9f5:	mov    %r15,%rcx
    c9f8:	mov    %rdi,%r15
    c9fb:	mov    -0x120(%rbp),%r8
    ca02:	jmpq   bd4c <F_0_714+0x67a>
    ca07:	add    $0x1,%r11d
    ca0b:	movswq 0xe(%rsi),%r10
    ca10:	test   %r10w,%r10w
    ca14:	je     cc5d <F_0_714+0x158b>
    ca1a:	mov    %r10,%r14
    ca1d:	sar    $0x1f,%r14d
    ca21:	mov    %r14,-0xc0(%rbp)
    ca28:	mov    %r14,%rcx
    ca2b:	xor    %r10d,%ecx
    ca2e:	sub    %r14d,%ecx
    ca31:	movslq %ecx,%rcx
    ca34:	movzbl (%rcx,%rax,1),%ecx
    ca38:	mov    %rcx,-0x128(%rbp)
    ca3f:	jmpq   cd72 <F_0_714+0x16a0>
    ca44:	cmp    $0x2f,%edx
    ca47:	jle    cb0a <F_0_714+0x1438>
    ca4d:	lea    0x38(%rdx),%ecx
    ca50:	mov    %rdi,%r15
    ca53:	shr    %cl,%r15
    ca56:	mov    %r15b,0x0(%r13)
    ca5a:	lea    0x1(%r13),%r14
    ca5e:	cmp    $0xff,%r15b
    ca62:	jne    ca6c <F_0_714+0x139a>
    ca64:	movb   $0x0,(%r14)
    ca68:	lea    0x2(%r13),%r14
    ca6c:	lea    0x30(%rdx),%ecx
    ca6f:	mov    %rdi,%r15
    ca72:	shr    %cl,%r15
    ca75:	mov    %r15b,(%r14)
    ca78:	lea    0x1(%r14),%r13
    ca7c:	cmp    $0xff,%r15b
    ca80:	jne    ca8b <F_0_714+0x13b9>
    ca82:	movb   $0x0,0x0(%r13)
    ca87:	lea    0x2(%r14),%r13
    ca8b:	lea    0x28(%rdx),%ecx
    ca8e:	mov    %rdi,%r15
    ca91:	shr    %cl,%r15
    ca94:	mov    %r15b,0x0(%r13)
    ca98:	lea    0x1(%r13),%r14
    ca9c:	cmp    $0xff,%r15b
    caa0:	jne    caaa <F_0_714+0x13d8>
    caa2:	movb   $0x0,(%r14)
    caa6:	lea    0x2(%r13),%r14
    caaa:	lea    0x20(%rdx),%ecx
    caad:	mov    %rdi,%r15
    cab0:	shr    %cl,%r15
    cab3:	mov    %r15b,(%r14)
    cab6:	lea    0x1(%r14),%r13
    caba:	cmp    $0xff,%r15b
    cabe:	jne    cac9 <F_0_714+0x13f7>
    cac0:	movb   $0x0,0x0(%r13)
    cac5:	lea    0x2(%r14),%r13
    cac9:	lea    0x18(%rdx),%ecx
    cacc:	mov    %rdi,%r15
    cacf:	shr    %cl,%r15
    cad2:	mov    %r15b,0x0(%r13)
    cad6:	lea    0x1(%r13),%r14
    cada:	cmp    $0xff,%r15b
    cade:	jne    cae8 <F_0_714+0x1416>
    cae0:	movb   $0x0,(%r14)
    cae4:	lea    0x2(%r13),%r14
    cae8:	lea    -0x30(%rdx),%ecx
    caeb:	mov    %rdi,%r15
    caee:	shr    %cl,%r15
    caf1:	mov    %rcx,%rdx
    caf4:	mov    %r15b,(%r14)
    caf7:	lea    0x1(%r14),%r13
    cafb:	cmp    $0xff,%r15b
    caff:	jne    cb0a <F_0_714+0x1438>
    cb01:	movb   $0x0,0x0(%r13)
    cb06:	lea    0x2(%r14),%r13
    cb0a:	mov    %rbx,%rcx
    cb0d:	shl    %cl,%rdi
    cb10:	mov    %rcx,%rbx
    cb13:	or     %r9,%rdi
    cb16:	add    %ebx,%edx
    cb18:	add    $0xfffffff0,%r11d
    cb1c:	cmp    $0xf,%r11d
    cb20:	jg     ca44 <F_0_714+0x1372>
    cb26:	shl    $0x4,%r11d
    cb2a:	mov    -0x128(%rbp),%rcx
    cb31:	add    %ecx,%r11d
    cb34:	movslq %r11d,%r14
    cb37:	movslq (%r8,%r14,4),%r11
    cb3b:	movsbq 0x400(%r8,%r14,1),%r14
    cb44:	cmp    $0x1f,%edx
    cb47:	jg     cde9 <F_0_714+0x1717>
    cb4d:	mov    %rdi,%r15
    cb50:	shl    %cl,%r12
    cb53:	lea    -0x1(%r12),%edi
    cb58:	mov    -0xc8(%rbp),%r12
    cb5f:	add    %r12d,%r10d
    cb62:	and    %r10d,%edi
    cb65:	movslq %edi,%rdi
    cb68:	mov    %rcx,%r12
    cb6b:	mov    %r14,%rcx
    cb6e:	shl    %cl,%r15
    cb71:	mov    %rcx,%r10
    cb74:	or     %r15,%r11
    cb77:	mov    %r12,%rcx
    cb7a:	shl    %cl,%r11
    cb7d:	or     %r11,%rdi
    cb80:	add    %r10d,%edx
    cb83:	add    %ecx,%edx
    cb85:	mov    $0x1,%r12d
    cb8b:	xor    %r11d,%r11d
    cb8e:	jmpq   ca0b <F_0_714+0x1339>
    cb93:	mov    %rcx,%r15
    cb96:	lea    0x38(%rdx),%ecx
    cb99:	mov    %rdi,%r8
    cb9c:	shr    %cl,%r8
    cb9f:	mov    %r8b,0x0(%r13)
    cba3:	lea    0x1(%r13),%rcx
    cba7:	cmp    $0xff,%r8b
    cbab:	je     ce0f <F_0_714+0x173d>
    cbb1:	mov    %rcx,%r8
    cbb4:	jmpq   ce16 <F_0_714+0x1744>
    cbb9:	movb   $0x0,(%rcx)
    cbbc:	lea    0x2(%r13),%r8
    cbc0:	lea    0x30(%rdx),%ecx
    cbc3:	mov    %rdi,%r13
    cbc6:	shr    %cl,%r13
    cbc9:	mov    %r13b,(%r8)
    cbcc:	lea    0x1(%r8),%rcx
    cbd0:	cmp    $0xff,%r13b
    cbd4:	je     ce38 <F_0_714+0x1766>
    cbda:	mov    %rcx,%r8
    cbdd:	jmpq   ce3f <F_0_714+0x176d>
    cbe2:	movb   $0x0,(%rcx)
    cbe5:	add    $0x2,%r8
    cbe9:	lea    0x28(%rdx),%ecx
    cbec:	mov    %rdi,%r13
    cbef:	shr    %cl,%r13
    cbf2:	mov    %r13b,(%r8)
    cbf5:	lea    0x1(%r8),%rcx
    cbf9:	cmp    $0xff,%r13b
    cbfd:	je     ce61 <F_0_714+0x178f>
    cc03:	mov    %rcx,%r8
    cc06:	jmpq   ce68 <F_0_714+0x1796>
    cc0b:	movb   $0x0,(%rcx)
    cc0e:	add    $0x2,%r8
    cc12:	lea    -0x20(%rdx),%ecx
    cc15:	mov    %rdi,%r13
    cc18:	shr    %cl,%r13
    cc1b:	mov    %rcx,%rdx
    cc1e:	mov    %r13b,(%r8)
    cc21:	lea    0x1(%r8),%rcx
    cc25:	cmp    $0xff,%r13b
    cc29:	je     ce9a <F_0_714+0x17c8>
    cc2f:	mov    %rcx,%r13
    cc32:	mov    %r15,%rcx
    cc35:	mov    %rdi,%r15
    cc38:	mov    -0x120(%rbp),%r8
    cc3f:	jmpq   c1f8 <F_0_714+0xb26>
    cc44:	movb   $0x0,(%rcx)
    cc47:	lea    0x2(%r8),%r13
    cc4b:	mov    %r15,%rcx
    cc4e:	mov    %rdi,%r15
    cc51:	mov    -0x120(%rbp),%r8
    cc58:	jmpq   bfa2 <F_0_714+0x8d0>
    cc5d:	add    $0x1,%r11d
    cc61:	movswq 0x1c(%rsi),%r10
    cc66:	test   %r10w,%r10w
    cc6a:	je     ceb3 <F_0_714+0x17e1>
    cc70:	mov    %r10,%r14
    cc73:	sar    $0x1f,%r14d
    cc77:	mov    %r14,-0xc0(%rbp)
    cc7e:	mov    %r14,%rcx
    cc81:	xor    %r10d,%ecx
    cc84:	sub    %r14d,%ecx
    cc87:	movslq %ecx,%rcx
    cc8a:	movzbl (%rcx,%rax,1),%ecx
    cc8e:	mov    %rcx,-0x128(%rbp)
    cc95:	jmpq   cfc8 <F_0_714+0x18f6>
    cc9a:	cmp    $0x2f,%edx
    cc9d:	jle    cd60 <F_0_714+0x168e>
    cca3:	lea    0x38(%rdx),%ecx
    cca6:	mov    %rdi,%r15
    cca9:	shr    %cl,%r15
    ccac:	mov    %r15b,0x0(%r13)
    ccb0:	lea    0x1(%r13),%r14
    ccb4:	cmp    $0xff,%r15b
    ccb8:	jne    ccc2 <F_0_714+0x15f0>
    ccba:	movb   $0x0,(%r14)
    ccbe:	lea    0x2(%r13),%r14
    ccc2:	lea    0x30(%rdx),%ecx
    ccc5:	mov    %rdi,%r15
    ccc8:	shr    %cl,%r15
    cccb:	mov    %r15b,(%r14)
    ccce:	lea    0x1(%r14),%r13
    ccd2:	cmp    $0xff,%r15b
    ccd6:	jne    cce1 <F_0_714+0x160f>
    ccd8:	movb   $0x0,0x0(%r13)
    ccdd:	lea    0x2(%r14),%r13
    cce1:	lea    0x28(%rdx),%ecx
    cce4:	mov    %rdi,%r15
    cce7:	shr    %cl,%r15
    ccea:	mov    %r15b,0x0(%r13)
    ccee:	lea    0x1(%r13),%r14
    ccf2:	cmp    $0xff,%r15b
    ccf6:	jne    cd00 <F_0_714+0x162e>
    ccf8:	movb   $0x0,(%r14)
    ccfc:	lea    0x2(%r13),%r14
    cd00:	lea    0x20(%rdx),%ecx
    cd03:	mov    %rdi,%r15
    cd06:	shr    %cl,%r15
    cd09:	mov    %r15b,(%r14)
    cd0c:	lea    0x1(%r14),%r13
    cd10:	cmp    $0xff,%r15b
    cd14:	jne    cd1f <F_0_714+0x164d>
    cd16:	movb   $0x0,0x0(%r13)
    cd1b:	lea    0x2(%r14),%r13
    cd1f:	lea    0x18(%rdx),%ecx
    cd22:	mov    %rdi,%r15
    cd25:	shr    %cl,%r15
    cd28:	mov    %r15b,0x0(%r13)
    cd2c:	lea    0x1(%r13),%r14
    cd30:	cmp    $0xff,%r15b
    cd34:	jne    cd3e <F_0_714+0x166c>
    cd36:	movb   $0x0,(%r14)
    cd3a:	lea    0x2(%r13),%r14
    cd3e:	lea    -0x30(%rdx),%ecx
    cd41:	mov    %rdi,%r15
    cd44:	shr    %cl,%r15
    cd47:	mov    %rcx,%rdx
    cd4a:	mov    %r15b,(%r14)
    cd4d:	lea    0x1(%r14),%r13
    cd51:	cmp    $0xff,%r15b
    cd55:	jne    cd60 <F_0_714+0x168e>
    cd57:	movb   $0x0,0x0(%r13)
    cd5c:	lea    0x2(%r14),%r13
    cd60:	mov    %rbx,%rcx
    cd63:	shl    %cl,%rdi
    cd66:	mov    %rcx,%rbx
    cd69:	or     %r9,%rdi
    cd6c:	add    %ebx,%edx
    cd6e:	add    $0xfffffff0,%r11d
    cd72:	cmp    $0xf,%r11d
    cd76:	jg     cc9a <F_0_714+0x15c8>
    cd7c:	shl    $0x4,%r11d
    cd80:	mov    -0x128(%rbp),%rcx
    cd87:	add    %ecx,%r11d
    cd8a:	movslq %r11d,%r14
    cd8d:	movslq (%r8,%r14,4),%r11
    cd91:	movsbq 0x400(%r8,%r14,1),%r14
    cd9a:	cmp    $0x1f,%edx
    cd9d:	jg     d03f <F_0_714+0x196d>
    cda3:	mov    %rdi,%r15
    cda6:	shl    %cl,%r12
    cda9:	lea    -0x1(%r12),%edi
    cdae:	mov    -0xc0(%rbp),%r12
    cdb5:	add    %r12d,%r10d
    cdb8:	and    %r10d,%edi
    cdbb:	movslq %edi,%rdi
    cdbe:	mov    %rcx,%r12
    cdc1:	mov    %r14,%rcx
    cdc4:	shl    %cl,%r15
    cdc7:	mov    %rcx,%r10
    cdca:	or     %r15,%r11
    cdcd:	mov    %r12,%rcx
    cdd0:	shl    %cl,%r11
    cdd3:	or     %r11,%rdi
    cdd6:	add    %r10d,%edx
    cdd9:	add    %ecx,%edx
    cddb:	mov    $0x1,%r12d
    cde1:	xor    %r11d,%r11d
    cde4:	jmpq   cc61 <F_0_714+0x158f>
    cde9:	mov    %rcx,%r15
    cdec:	lea    0x38(%rdx),%ecx
    cdef:	mov    %rdi,%r8
    cdf2:	shr    %cl,%r8
    cdf5:	mov    %r8b,0x0(%r13)
    cdf9:	lea    0x1(%r13),%rcx
    cdfd:	cmp    $0xff,%r8b
    ce01:	je     d065 <F_0_714+0x1993>
    ce07:	mov    %rcx,%r8
    ce0a:	jmpq   d06c <F_0_714+0x199a>
    ce0f:	movb   $0x0,(%rcx)
    ce12:	lea    0x2(%r13),%r8
    ce16:	lea    0x30(%rdx),%ecx
    ce19:	mov    %rdi,%r13
    ce1c:	shr    %cl,%r13
    ce1f:	mov    %r13b,(%r8)
    ce22:	lea    0x1(%r8),%rcx
    ce26:	cmp    $0xff,%r13b
    ce2a:	je     d08e <F_0_714+0x19bc>
    ce30:	mov    %rcx,%r8
    ce33:	jmpq   d095 <F_0_714+0x19c3>
    ce38:	movb   $0x0,(%rcx)
    ce3b:	add    $0x2,%r8
    ce3f:	lea    0x28(%rdx),%ecx
    ce42:	mov    %rdi,%r13
    ce45:	shr    %cl,%r13
    ce48:	mov    %r13b,(%r8)
    ce4b:	lea    0x1(%r8),%rcx
    ce4f:	cmp    $0xff,%r13b
    ce53:	je     d0b7 <F_0_714+0x19e5>
    ce59:	mov    %rcx,%r8
    ce5c:	jmpq   d0be <F_0_714+0x19ec>
    ce61:	movb   $0x0,(%rcx)
    ce64:	add    $0x2,%r8
    ce68:	lea    -0x20(%rdx),%ecx
    ce6b:	mov    %rdi,%r13
    ce6e:	shr    %cl,%r13
    ce71:	mov    %rcx,%rdx
    ce74:	mov    %r13b,(%r8)
    ce77:	lea    0x1(%r8),%rcx
    ce7b:	cmp    $0xff,%r13b
    ce7f:	je     d0f0 <F_0_714+0x1a1e>
    ce85:	mov    %rcx,%r13
    ce88:	mov    %r15,%rcx
    ce8b:	mov    %rdi,%r15
    ce8e:	mov    -0x120(%rbp),%r8
    ce95:	jmpq   c44e <F_0_714+0xd7c>
    ce9a:	movb   $0x0,(%rcx)
    ce9d:	lea    0x2(%r8),%r13
    cea1:	mov    %r15,%rcx
    cea4:	mov    %rdi,%r15
    cea7:	mov    -0x120(%rbp),%r8
    ceae:	jmpq   c1f8 <F_0_714+0xb26>
    ceb3:	add    $0x1,%r11d
    ceb7:	movswq 0x2a(%rsi),%r10
    cebc:	test   %r10w,%r10w
    cec0:	je     d109 <F_0_714+0x1a37>
    cec6:	mov    %r10,%r14
    cec9:	sar    $0x1f,%r14d
    cecd:	mov    %r14,-0xb8(%rbp)
    ced4:	mov    %r14,%rcx
    ced7:	xor    %r10d,%ecx
    ceda:	sub    %r14d,%ecx
    cedd:	movslq %ecx,%rcx
    cee0:	movzbl (%rcx,%rax,1),%ecx
    cee4:	mov    %rcx,-0x128(%rbp)
    ceeb:	jmpq   d21e <F_0_714+0x1b4c>
    cef0:	cmp    $0x2f,%edx
    cef3:	jle    cfb6 <F_0_714+0x18e4>
    cef9:	lea    0x38(%rdx),%ecx
    cefc:	mov    %rdi,%r15
    ceff:	shr    %cl,%r15
    cf02:	mov    %r15b,0x0(%r13)
    cf06:	lea    0x1(%r13),%r14
    cf0a:	cmp    $0xff,%r15b
    cf0e:	jne    cf18 <F_0_714+0x1846>
    cf10:	movb   $0x0,(%r14)
    cf14:	lea    0x2(%r13),%r14
    cf18:	lea    0x30(%rdx),%ecx
    cf1b:	mov    %rdi,%r15
    cf1e:	shr    %cl,%r15
    cf21:	mov    %r15b,(%r14)
    cf24:	lea    0x1(%r14),%r13
    cf28:	cmp    $0xff,%r15b
    cf2c:	jne    cf37 <F_0_714+0x1865>
    cf2e:	movb   $0x0,0x0(%r13)
    cf33:	lea    0x2(%r14),%r13
    cf37:	lea    0x28(%rdx),%ecx
    cf3a:	mov    %rdi,%r15
    cf3d:	shr    %cl,%r15
    cf40:	mov    %r15b,0x0(%r13)
    cf44:	lea    0x1(%r13),%r14
    cf48:	cmp    $0xff,%r15b
    cf4c:	jne    cf56 <F_0_714+0x1884>
    cf4e:	movb   $0x0,(%r14)
    cf52:	lea    0x2(%r13),%r14
    cf56:	lea    0x20(%rdx),%ecx
    cf59:	mov    %rdi,%r15
    cf5c:	shr    %cl,%r15
    cf5f:	mov    %r15b,(%r14)
    cf62:	lea    0x1(%r14),%r13
    cf66:	cmp    $0xff,%r15b
    cf6a:	jne    cf75 <F_0_714+0x18a3>
    cf6c:	movb   $0x0,0x0(%r13)
    cf71:	lea    0x2(%r14),%r13
    cf75:	lea    0x18(%rdx),%ecx
    cf78:	mov    %rdi,%r15
    cf7b:	shr    %cl,%r15
    cf7e:	mov    %r15b,0x0(%r13)
    cf82:	lea    0x1(%r13),%r14
    cf86:	cmp    $0xff,%r15b
    cf8a:	jne    cf94 <F_0_714+0x18c2>
    cf8c:	movb   $0x0,(%r14)
    cf90:	lea    0x2(%r13),%r14
    cf94:	lea    -0x30(%rdx),%ecx
    cf97:	mov    %rdi,%r15
    cf9a:	shr    %cl,%r15
    cf9d:	mov    %rcx,%rdx
    cfa0:	mov    %r15b,(%r14)
    cfa3:	lea    0x1(%r14),%r13
    cfa7:	cmp    $0xff,%r15b
    cfab:	jne    cfb6 <F_0_714+0x18e4>
    cfad:	movb   $0x0,0x0(%r13)
    cfb2:	lea    0x2(%r14),%r13
    cfb6:	mov    %rbx,%rcx
    cfb9:	shl    %cl,%rdi
    cfbc:	mov    %rcx,%rbx
    cfbf:	or     %r9,%rdi
    cfc2:	add    %ebx,%edx
    cfc4:	add    $0xfffffff0,%r11d
    cfc8:	cmp    $0xf,%r11d
    cfcc:	jg     cef0 <F_0_714+0x181e>
    cfd2:	shl    $0x4,%r11d
    cfd6:	mov    -0x128(%rbp),%rcx
    cfdd:	add    %ecx,%r11d
    cfe0:	movslq %r11d,%r14
    cfe3:	movslq (%r8,%r14,4),%r11
    cfe7:	movsbq 0x400(%r8,%r14,1),%r14
    cff0:	cmp    $0x1f,%edx
    cff3:	jg     d295 <F_0_714+0x1bc3>
    cff9:	mov    %rdi,%r15
    cffc:	shl    %cl,%r12
    cfff:	lea    -0x1(%r12),%edi
    d004:	mov    -0xc0(%rbp),%r12
    d00b:	add    %r12d,%r10d
    d00e:	and    %r10d,%edi
    d011:	movslq %edi,%rdi
    d014:	mov    %rcx,%r12
    d017:	mov    %r14,%rcx
    d01a:	shl    %cl,%r15
    d01d:	mov    %rcx,%r10
    d020:	or     %r15,%r11
    d023:	mov    %r12,%rcx
    d026:	shl    %cl,%r11
    d029:	or     %r11,%rdi
    d02c:	add    %r10d,%edx
    d02f:	add    %ecx,%edx
    d031:	mov    $0x1,%r12d
    d037:	xor    %r11d,%r11d
    d03a:	jmpq   ceb7 <F_0_714+0x17e5>
    d03f:	mov    %rcx,%r15
    d042:	lea    0x38(%rdx),%ecx
    d045:	mov    %rdi,%r8
    d048:	shr    %cl,%r8
    d04b:	mov    %r8b,0x0(%r13)
    d04f:	lea    0x1(%r13),%rcx
    d053:	cmp    $0xff,%r8b
    d057:	je     d2bb <F_0_714+0x1be9>
    d05d:	mov    %rcx,%r8
    d060:	jmpq   d2c2 <F_0_714+0x1bf0>
    d065:	movb   $0x0,(%rcx)
    d068:	lea    0x2(%r13),%r8
    d06c:	lea    0x30(%rdx),%ecx
    d06f:	mov    %rdi,%r13
    d072:	shr    %cl,%r13
    d075:	mov    %r13b,(%r8)
    d078:	lea    0x1(%r8),%rcx
    d07c:	cmp    $0xff,%r13b
    d080:	je     d2e4 <F_0_714+0x1c12>
    d086:	mov    %rcx,%r8
    d089:	jmpq   d2eb <F_0_714+0x1c19>
    d08e:	movb   $0x0,(%rcx)
    d091:	add    $0x2,%r8
    d095:	lea    0x28(%rdx),%ecx
    d098:	mov    %rdi,%r13
    d09b:	shr    %cl,%r13
    d09e:	mov    %r13b,(%r8)
    d0a1:	lea    0x1(%r8),%rcx
    d0a5:	cmp    $0xff,%r13b
    d0a9:	je     d30d <F_0_714+0x1c3b>
    d0af:	mov    %rcx,%r8
    d0b2:	jmpq   d314 <F_0_714+0x1c42>
    d0b7:	movb   $0x0,(%rcx)
    d0ba:	add    $0x2,%r8
    d0be:	lea    -0x20(%rdx),%ecx
    d0c1:	mov    %rdi,%r13
    d0c4:	shr    %cl,%r13
    d0c7:	mov    %rcx,%rdx
    d0ca:	mov    %r13b,(%r8)
    d0cd:	lea    0x1(%r8),%rcx
    d0d1:	cmp    $0xff,%r13b
    d0d5:	je     d346 <F_0_714+0x1c74>
    d0db:	mov    %rcx,%r13
    d0de:	mov    %r15,%rcx
    d0e1:	mov    %rdi,%r15
    d0e4:	mov    -0x120(%rbp),%r8
    d0eb:	jmpq   c6a4 <F_0_714+0xfd2>
    d0f0:	movb   $0x0,(%rcx)
    d0f3:	lea    0x2(%r8),%r13
    d0f7:	mov    %r15,%rcx
    d0fa:	mov    %rdi,%r15
    d0fd:	mov    -0x120(%rbp),%r8
    d104:	jmpq   c44e <F_0_714+0xd7c>
    d109:	add    $0x1,%r11d
    d10d:	movswq 0x38(%rsi),%r10
    d112:	test   %r10w,%r10w
    d116:	je     d35f <F_0_714+0x1c8d>
    d11c:	mov    %r10,%r14
    d11f:	sar    $0x1f,%r14d
    d123:	mov    %r14,-0xb8(%rbp)
    d12a:	mov    %r14,%rcx
    d12d:	xor    %r10d,%ecx
    d130:	sub    %r14d,%ecx
    d133:	movslq %ecx,%rcx
    d136:	movzbl (%rcx,%rax,1),%ecx
    d13a:	mov    %rcx,-0x128(%rbp)
    d141:	jmpq   d474 <F_0_714+0x1da2>
    d146:	cmp    $0x2f,%edx
    d149:	jle    d20c <F_0_714+0x1b3a>
    d14f:	lea    0x38(%rdx),%ecx
    d152:	mov    %rdi,%r15
    d155:	shr    %cl,%r15
    d158:	mov    %r15b,0x0(%r13)
    d15c:	lea    0x1(%r13),%r14
    d160:	cmp    $0xff,%r15b
    d164:	jne    d16e <F_0_714+0x1a9c>
    d166:	movb   $0x0,(%r14)
    d16a:	lea    0x2(%r13),%r14
    d16e:	lea    0x30(%rdx),%ecx
    d171:	mov    %rdi,%r15
    d174:	shr    %cl,%r15
    d177:	mov    %r15b,(%r14)
    d17a:	lea    0x1(%r14),%r13
    d17e:	cmp    $0xff,%r15b
    d182:	jne    d18d <F_0_714+0x1abb>
    d184:	movb   $0x0,0x0(%r13)
    d189:	lea    0x2(%r14),%r13
    d18d:	lea    0x28(%rdx),%ecx
    d190:	mov    %rdi,%r15
    d193:	shr    %cl,%r15
    d196:	mov    %r15b,0x0(%r13)
    d19a:	lea    0x1(%r13),%r14
    d19e:	cmp    $0xff,%r15b
    d1a2:	jne    d1ac <F_0_714+0x1ada>
    d1a4:	movb   $0x0,(%r14)
    d1a8:	lea    0x2(%r13),%r14
    d1ac:	lea    0x20(%rdx),%ecx
    d1af:	mov    %rdi,%r15
    d1b2:	shr    %cl,%r15
    d1b5:	mov    %r15b,(%r14)
    d1b8:	lea    0x1(%r14),%r13
    d1bc:	cmp    $0xff,%r15b
    d1c0:	jne    d1cb <F_0_714+0x1af9>
    d1c2:	movb   $0x0,0x0(%r13)
    d1c7:	lea    0x2(%r14),%r13
    d1cb:	lea    0x18(%rdx),%ecx
    d1ce:	mov    %rdi,%r15
    d1d1:	shr    %cl,%r15
    d1d4:	mov    %r15b,0x0(%r13)
    d1d8:	lea    0x1(%r13),%r14
    d1dc:	cmp    $0xff,%r15b
    d1e0:	jne    d1ea <F_0_714+0x1b18>
    d1e2:	movb   $0x0,(%r14)
    d1e6:	lea    0x2(%r13),%r14
    d1ea:	lea    -0x30(%rdx),%ecx
    d1ed:	mov    %rdi,%r15
    d1f0:	shr    %cl,%r15
    d1f3:	mov    %rcx,%rdx
    d1f6:	mov    %r15b,(%r14)
    d1f9:	lea    0x1(%r14),%r13
    d1fd:	cmp    $0xff,%r15b
    d201:	jne    d20c <F_0_714+0x1b3a>
    d203:	movb   $0x0,0x0(%r13)
    d208:	lea    0x2(%r14),%r13
    d20c:	mov    %rbx,%rcx
    d20f:	shl    %cl,%rdi
    d212:	mov    %rcx,%rbx
    d215:	or     %r9,%rdi
    d218:	add    %ebx,%edx
    d21a:	add    $0xfffffff0,%r11d
    d21e:	cmp    $0xf,%r11d
    d222:	jg     d146 <F_0_714+0x1a74>
    d228:	shl    $0x4,%r11d
    d22c:	mov    -0x128(%rbp),%rcx
    d233:	add    %ecx,%r11d
    d236:	movslq %r11d,%r14
    d239:	movslq (%r8,%r14,4),%r11
    d23d:	movsbq 0x400(%r8,%r14,1),%r14
    d246:	cmp    $0x1f,%edx
    d249:	jg     d4eb <F_0_714+0x1e19>
    d24f:	mov    %rdi,%r15
    d252:	shl    %cl,%r12
    d255:	lea    -0x1(%r12),%edi
    d25a:	mov    -0xb8(%rbp),%r12
    d261:	add    %r12d,%r10d
    d264:	and    %r10d,%edi
    d267:	movslq %edi,%rdi
    d26a:	mov    %rcx,%r12
    d26d:	mov    %r14,%rcx
    d270:	shl    %cl,%r15
    d273:	mov    %rcx,%r10
    d276:	or     %r15,%r11
    d279:	mov    %r12,%rcx
    d27c:	shl    %cl,%r11
    d27f:	or     %r11,%rdi
    d282:	add    %r10d,%edx
    d285:	add    %ecx,%edx
    d287:	mov    $0x1,%r12d
    d28d:	xor    %r11d,%r11d
    d290:	jmpq   d10d <F_0_714+0x1a3b>
    d295:	mov    %rcx,%r15
    d298:	lea    0x38(%rdx),%ecx
    d29b:	mov    %rdi,%r8
    d29e:	shr    %cl,%r8
    d2a1:	mov    %r8b,0x0(%r13)
    d2a5:	lea    0x1(%r13),%rcx
    d2a9:	cmp    $0xff,%r8b
    d2ad:	je     d511 <F_0_714+0x1e3f>
    d2b3:	mov    %rcx,%r8
    d2b6:	jmpq   d518 <F_0_714+0x1e46>
    d2bb:	movb   $0x0,(%rcx)
    d2be:	lea    0x2(%r13),%r8
    d2c2:	lea    0x30(%rdx),%ecx
    d2c5:	mov    %rdi,%r13
    d2c8:	shr    %cl,%r13
    d2cb:	mov    %r13b,(%r8)
    d2ce:	lea    0x1(%r8),%rcx
    d2d2:	cmp    $0xff,%r13b
    d2d6:	je     d53a <F_0_714+0x1e68>
    d2dc:	mov    %rcx,%r8
    d2df:	jmpq   d541 <F_0_714+0x1e6f>
    d2e4:	movb   $0x0,(%rcx)
    d2e7:	add    $0x2,%r8
    d2eb:	lea    0x28(%rdx),%ecx
    d2ee:	mov    %rdi,%r13
    d2f1:	shr    %cl,%r13
    d2f4:	mov    %r13b,(%r8)
    d2f7:	lea    0x1(%r8),%rcx
    d2fb:	cmp    $0xff,%r13b
    d2ff:	je     d563 <F_0_714+0x1e91>
    d305:	mov    %rcx,%r8
    d308:	jmpq   d56a <F_0_714+0x1e98>
    d30d:	movb   $0x0,(%rcx)
    d310:	add    $0x2,%r8
    d314:	lea    -0x20(%rdx),%ecx
    d317:	mov    %rdi,%r13
    d31a:	shr    %cl,%r13
    d31d:	mov    %rcx,%rdx
    d320:	mov    %r13b,(%r8)
    d323:	lea    0x1(%r8),%rcx
    d327:	cmp    $0xff,%r13b
    d32b:	je     d59c <F_0_714+0x1eca>
    d331:	mov    %rcx,%r13
    d334:	mov    %r15,%rcx
    d337:	mov    %rdi,%r15
    d33a:	mov    -0x120(%rbp),%r8
    d341:	jmpq   c8fa <F_0_714+0x1228>
    d346:	movb   $0x0,(%rcx)
    d349:	lea    0x2(%r8),%r13
    d34d:	mov    %r15,%rcx
    d350:	mov    %rdi,%r15
    d353:	mov    -0x120(%rbp),%r8
    d35a:	jmpq   c6a4 <F_0_714+0xfd2>
    d35f:	add    $0x1,%r11d
    d363:	movswq 0x46(%rsi),%r10
    d368:	test   %r10w,%r10w
    d36c:	je     d5b5 <F_0_714+0x1ee3>
    d372:	mov    %r10,%r14
    d375:	sar    $0x1f,%r14d
    d379:	mov    %r14,-0xb0(%rbp)
    d380:	mov    %r14,%rcx
    d383:	xor    %r10d,%ecx
    d386:	sub    %r14d,%ecx
    d389:	movslq %ecx,%rcx
    d38c:	movzbl (%rcx,%rax,1),%ecx
    d390:	mov    %rcx,-0x128(%rbp)
    d397:	jmpq   d6ca <F_0_714+0x1ff8>
    d39c:	cmp    $0x2f,%edx
    d39f:	jle    d462 <F_0_714+0x1d90>
    d3a5:	lea    0x38(%rdx),%ecx
    d3a8:	mov    %rdi,%r15
    d3ab:	shr    %cl,%r15
    d3ae:	mov    %r15b,0x0(%r13)
    d3b2:	lea    0x1(%r13),%r14
    d3b6:	cmp    $0xff,%r15b
    d3ba:	jne    d3c4 <F_0_714+0x1cf2>
    d3bc:	movb   $0x0,(%r14)
    d3c0:	lea    0x2(%r13),%r14
    d3c4:	lea    0x30(%rdx),%ecx
    d3c7:	mov    %rdi,%r15
    d3ca:	shr    %cl,%r15
    d3cd:	mov    %r15b,(%r14)
    d3d0:	lea    0x1(%r14),%r13
    d3d4:	cmp    $0xff,%r15b
    d3d8:	jne    d3e3 <F_0_714+0x1d11>
    d3da:	movb   $0x0,0x0(%r13)
    d3df:	lea    0x2(%r14),%r13
    d3e3:	lea    0x28(%rdx),%ecx
    d3e6:	mov    %rdi,%r15
    d3e9:	shr    %cl,%r15
    d3ec:	mov    %r15b,0x0(%r13)
    d3f0:	lea    0x1(%r13),%r14
    d3f4:	cmp    $0xff,%r15b
    d3f8:	jne    d402 <F_0_714+0x1d30>
    d3fa:	movb   $0x0,(%r14)
    d3fe:	lea    0x2(%r13),%r14
    d402:	lea    0x20(%rdx),%ecx
    d405:	mov    %rdi,%r15
    d408:	shr    %cl,%r15
    d40b:	mov    %r15b,(%r14)
    d40e:	lea    0x1(%r14),%r13
    d412:	cmp    $0xff,%r15b
    d416:	jne    d421 <F_0_714+0x1d4f>
    d418:	movb   $0x0,0x0(%r13)
    d41d:	lea    0x2(%r14),%r13
    d421:	lea    0x18(%rdx),%ecx
    d424:	mov    %rdi,%r15
    d427:	shr    %cl,%r15
    d42a:	mov    %r15b,0x0(%r13)
    d42e:	lea    0x1(%r13),%r14
    d432:	cmp    $0xff,%r15b
    d436:	jne    d440 <F_0_714+0x1d6e>
    d438:	movb   $0x0,(%r14)
    d43c:	lea    0x2(%r13),%r14
    d440:	lea    -0x30(%rdx),%ecx
    d443:	mov    %rdi,%r15
    d446:	shr    %cl,%r15
    d449:	mov    %rcx,%rdx
    d44c:	mov    %r15b,(%r14)
    d44f:	lea    0x1(%r14),%r13
    d453:	cmp    $0xff,%r15b
    d457:	jne    d462 <F_0_714+0x1d90>
    d459:	movb   $0x0,0x0(%r13)
    d45e:	lea    0x2(%r14),%r13
    d462:	mov    %rbx,%rcx
    d465:	shl    %cl,%rdi
    d468:	mov    %rcx,%rbx
    d46b:	or     %r9,%rdi
    d46e:	add    %ebx,%edx
    d470:	add    $0xfffffff0,%r11d
    d474:	cmp    $0xf,%r11d
    d478:	jg     d39c <F_0_714+0x1cca>
    d47e:	shl    $0x4,%r11d
    d482:	mov    -0x128(%rbp),%rcx
    d489:	add    %ecx,%r11d
    d48c:	movslq %r11d,%r14
    d48f:	movslq (%r8,%r14,4),%r11
    d493:	movsbq 0x400(%r8,%r14,1),%r14
    d49c:	cmp    $0x1f,%edx
    d49f:	jg     d741 <F_0_714+0x206f>
    d4a5:	mov    %rdi,%r15
    d4a8:	shl    %cl,%r12
    d4ab:	lea    -0x1(%r12),%edi
    d4b0:	mov    -0xb8(%rbp),%r12
    d4b7:	add    %r12d,%r10d
    d4ba:	and    %r10d,%edi
    d4bd:	movslq %edi,%rdi
    d4c0:	mov    %rcx,%r12
    d4c3:	mov    %r14,%rcx
    d4c6:	shl    %cl,%r15
    d4c9:	mov    %rcx,%r10
    d4cc:	or     %r15,%r11
    d4cf:	mov    %r12,%rcx
    d4d2:	shl    %cl,%r11
    d4d5:	or     %r11,%rdi
    d4d8:	add    %r10d,%edx
    d4db:	add    %ecx,%edx
    d4dd:	mov    $0x1,%r12d
    d4e3:	xor    %r11d,%r11d
    d4e6:	jmpq   d363 <F_0_714+0x1c91>
    d4eb:	mov    %rcx,%r15
    d4ee:	lea    0x38(%rdx),%ecx
    d4f1:	mov    %rdi,%r8
    d4f4:	shr    %cl,%r8
    d4f7:	mov    %r8b,0x0(%r13)
    d4fb:	lea    0x1(%r13),%rcx
    d4ff:	cmp    $0xff,%r8b
    d503:	je     d767 <F_0_714+0x2095>
    d509:	mov    %rcx,%r8
    d50c:	jmpq   d76e <F_0_714+0x209c>
    d511:	movb   $0x0,(%rcx)
    d514:	lea    0x2(%r13),%r8
    d518:	lea    0x30(%rdx),%ecx
    d51b:	mov    %rdi,%r13
    d51e:	shr    %cl,%r13
    d521:	mov    %r13b,(%r8)
    d524:	lea    0x1(%r8),%rcx
    d528:	cmp    $0xff,%r13b
    d52c:	je     d790 <F_0_714+0x20be>
    d532:	mov    %rcx,%r8
    d535:	jmpq   d797 <F_0_714+0x20c5>
    d53a:	movb   $0x0,(%rcx)
    d53d:	add    $0x2,%r8
    d541:	lea    0x28(%rdx),%ecx
    d544:	mov    %rdi,%r13
    d547:	shr    %cl,%r13
    d54a:	mov    %r13b,(%r8)
    d54d:	lea    0x1(%r8),%rcx
    d551:	cmp    $0xff,%r13b
    d555:	je     d7b9 <F_0_714+0x20e7>
    d55b:	mov    %rcx,%r8
    d55e:	jmpq   d7c0 <F_0_714+0x20ee>
    d563:	movb   $0x0,(%rcx)
    d566:	add    $0x2,%r8
    d56a:	lea    -0x20(%rdx),%ecx
    d56d:	mov    %rdi,%r13
    d570:	shr    %cl,%r13
    d573:	mov    %rcx,%rdx
    d576:	mov    %r13b,(%r8)
    d579:	lea    0x1(%r8),%rcx
    d57d:	cmp    $0xff,%r13b
    d581:	je     d7f2 <F_0_714+0x2120>
    d587:	mov    %rcx,%r13
    d58a:	mov    %r15,%rcx
    d58d:	mov    %rdi,%r15
    d590:	mov    -0x120(%rbp),%r8
    d597:	jmpq   cb50 <F_0_714+0x147e>
    d59c:	movb   $0x0,(%rcx)
    d59f:	lea    0x2(%r8),%r13
    d5a3:	mov    %r15,%rcx
    d5a6:	mov    %rdi,%r15
    d5a9:	mov    -0x120(%rbp),%r8
    d5b0:	jmpq   c8fa <F_0_714+0x1228>
    d5b5:	add    $0x1,%r11d
    d5b9:	movswq 0x54(%rsi),%r10
    d5be:	test   %r10w,%r10w
    d5c2:	je     d80b <F_0_714+0x2139>
    d5c8:	mov    %r10,%r14
    d5cb:	sar    $0x1f,%r14d
    d5cf:	mov    %r14,-0xb0(%rbp)
    d5d6:	mov    %r14,%rcx
    d5d9:	xor    %r10d,%ecx
    d5dc:	sub    %r14d,%ecx
    d5df:	movslq %ecx,%rcx
    d5e2:	movzbl (%rcx,%rax,1),%ecx
    d5e6:	mov    %rcx,-0x128(%rbp)
    d5ed:	jmpq   d920 <F_0_714+0x224e>
    d5f2:	cmp    $0x2f,%edx
    d5f5:	jle    d6b8 <F_0_714+0x1fe6>
    d5fb:	lea    0x38(%rdx),%ecx
    d5fe:	mov    %rdi,%r15
    d601:	shr    %cl,%r15
    d604:	mov    %r15b,0x0(%r13)
    d608:	lea    0x1(%r13),%r14
    d60c:	cmp    $0xff,%r15b
    d610:	jne    d61a <F_0_714+0x1f48>
    d612:	movb   $0x0,(%r14)
    d616:	lea    0x2(%r13),%r14
    d61a:	lea    0x30(%rdx),%ecx
    d61d:	mov    %rdi,%r15
    d620:	shr    %cl,%r15
    d623:	mov    %r15b,(%r14)
    d626:	lea    0x1(%r14),%r13
    d62a:	cmp    $0xff,%r15b
    d62e:	jne    d639 <F_0_714+0x1f67>
    d630:	movb   $0x0,0x0(%r13)
    d635:	lea    0x2(%r14),%r13
    d639:	lea    0x28(%rdx),%ecx
    d63c:	mov    %rdi,%r15
    d63f:	shr    %cl,%r15
    d642:	mov    %r15b,0x0(%r13)
    d646:	lea    0x1(%r13),%r14
    d64a:	cmp    $0xff,%r15b
    d64e:	jne    d658 <F_0_714+0x1f86>
    d650:	movb   $0x0,(%r14)
    d654:	lea    0x2(%r13),%r14
    d658:	lea    0x20(%rdx),%ecx
    d65b:	mov    %rdi,%r15
    d65e:	shr    %cl,%r15
    d661:	mov    %r15b,(%r14)
    d664:	lea    0x1(%r14),%r13
    d668:	cmp    $0xff,%r15b
    d66c:	jne    d677 <F_0_714+0x1fa5>
    d66e:	movb   $0x0,0x0(%r13)
    d673:	lea    0x2(%r14),%r13
    d677:	lea    0x18(%rdx),%ecx
    d67a:	mov    %rdi,%r15
    d67d:	shr    %cl,%r15
    d680:	mov    %r15b,0x0(%r13)
    d684:	lea    0x1(%r13),%r14
    d688:	cmp    $0xff,%r15b
    d68c:	jne    d696 <F_0_714+0x1fc4>
    d68e:	movb   $0x0,(%r14)
    d692:	lea    0x2(%r13),%r14
    d696:	lea    -0x30(%rdx),%ecx
    d699:	mov    %rdi,%r15
    d69c:	shr    %cl,%r15
    d69f:	mov    %rcx,%rdx
    d6a2:	mov    %r15b,(%r14)
    d6a5:	lea    0x1(%r14),%r13
    d6a9:	cmp    $0xff,%r15b
    d6ad:	jne    d6b8 <F_0_714+0x1fe6>
    d6af:	movb   $0x0,0x0(%r13)
    d6b4:	lea    0x2(%r14),%r13
    d6b8:	mov    %rbx,%rcx
    d6bb:	shl    %cl,%rdi
    d6be:	mov    %rcx,%rbx
    d6c1:	or     %r9,%rdi
    d6c4:	add    %ebx,%edx
    d6c6:	add    $0xfffffff0,%r11d
    d6ca:	cmp    $0xf,%r11d
    d6ce:	jg     d5f2 <F_0_714+0x1f20>
    d6d4:	shl    $0x4,%r11d
    d6d8:	mov    -0x128(%rbp),%rcx
    d6df:	add    %ecx,%r11d
    d6e2:	movslq %r11d,%r14
    d6e5:	movslq (%r8,%r14,4),%r11
    d6e9:	movsbq 0x400(%r8,%r14,1),%r14
    d6f2:	cmp    $0x1f,%edx
    d6f5:	jg     d997 <F_0_714+0x22c5>
    d6fb:	mov    %rdi,%r15
    d6fe:	shl    %cl,%r12
    d701:	lea    -0x1(%r12),%edi
    d706:	mov    -0xb0(%rbp),%r12
    d70d:	add    %r12d,%r10d
    d710:	and    %r10d,%edi
    d713:	movslq %edi,%rdi
    d716:	mov    %rcx,%r12
    d719:	mov    %r14,%rcx
    d71c:	shl    %cl,%r15
    d71f:	mov    %rcx,%r10
    d722:	or     %r15,%r11
    d725:	mov    %r12,%rcx
    d728:	shl    %cl,%r11
    d72b:	or     %r11,%rdi
    d72e:	add    %r10d,%edx
    d731:	add    %ecx,%edx
    d733:	mov    $0x1,%r12d
    d739:	xor    %r11d,%r11d
    d73c:	jmpq   d5b9 <F_0_714+0x1ee7>
    d741:	mov    %rcx,%r15
    d744:	lea    0x38(%rdx),%ecx
    d747:	mov    %rdi,%r8
    d74a:	shr    %cl,%r8
    d74d:	mov    %r8b,0x0(%r13)
    d751:	lea    0x1(%r13),%rcx
    d755:	cmp    $0xff,%r8b
    d759:	je     d9bd <F_0_714+0x22eb>
    d75f:	mov    %rcx,%r8
    d762:	jmpq   d9c4 <F_0_714+0x22f2>
    d767:	movb   $0x0,(%rcx)
    d76a:	lea    0x2(%r13),%r8
    d76e:	lea    0x30(%rdx),%ecx
    d771:	mov    %rdi,%r13
    d774:	shr    %cl,%r13
    d777:	mov    %r13b,(%r8)
    d77a:	lea    0x1(%r8),%rcx
    d77e:	cmp    $0xff,%r13b
    d782:	je     d9e6 <F_0_714+0x2314>
    d788:	mov    %rcx,%r8
    d78b:	jmpq   d9ed <F_0_714+0x231b>
    d790:	movb   $0x0,(%rcx)
    d793:	add    $0x2,%r8
    d797:	lea    0x28(%rdx),%ecx
    d79a:	mov    %rdi,%r13
    d79d:	shr    %cl,%r13
    d7a0:	mov    %r13b,(%r8)
    d7a3:	lea    0x1(%r8),%rcx
    d7a7:	cmp    $0xff,%r13b
    d7ab:	je     da0f <F_0_714+0x233d>
    d7b1:	mov    %rcx,%r8
    d7b4:	jmpq   da16 <F_0_714+0x2344>
    d7b9:	movb   $0x0,(%rcx)
    d7bc:	add    $0x2,%r8
    d7c0:	lea    -0x20(%rdx),%ecx
    d7c3:	mov    %rdi,%r13
    d7c6:	shr    %cl,%r13
    d7c9:	mov    %rcx,%rdx
    d7cc:	mov    %r13b,(%r8)
    d7cf:	lea    0x1(%r8),%rcx
    d7d3:	cmp    $0xff,%r13b
    d7d7:	je     da48 <F_0_714+0x2376>
    d7dd:	mov    %rcx,%r13
    d7e0:	mov    %r15,%rcx
    d7e3:	mov    %rdi,%r15
    d7e6:	mov    -0x120(%rbp),%r8
    d7ed:	jmpq   cda6 <F_0_714+0x16d4>
    d7f2:	movb   $0x0,(%rcx)
    d7f5:	lea    0x2(%r8),%r13
    d7f9:	mov    %r15,%rcx
    d7fc:	mov    %rdi,%r15
    d7ff:	mov    -0x120(%rbp),%r8
    d806:	jmpq   cb50 <F_0_714+0x147e>
    d80b:	add    $0x1,%r11d
    d80f:	movswq 0x62(%rsi),%r10
    d814:	test   %r10w,%r10w
    d818:	je     da61 <F_0_714+0x238f>
    d81e:	mov    %r10,%r14
    d821:	sar    $0x1f,%r14d
    d825:	mov    %r14,-0xa8(%rbp)
    d82c:	mov    %r14,%rcx
    d82f:	xor    %r10d,%ecx
    d832:	sub    %r14d,%ecx
    d835:	movslq %ecx,%rcx
    d838:	movzbl (%rcx,%rax,1),%ecx
    d83c:	mov    %rcx,-0x128(%rbp)
    d843:	jmpq   db76 <F_0_714+0x24a4>
    d848:	cmp    $0x2f,%edx
    d84b:	jle    d90e <F_0_714+0x223c>
    d851:	lea    0x38(%rdx),%ecx
    d854:	mov    %rdi,%r15
    d857:	shr    %cl,%r15
    d85a:	mov    %r15b,0x0(%r13)
    d85e:	lea    0x1(%r13),%r14
    d862:	cmp    $0xff,%r15b
    d866:	jne    d870 <F_0_714+0x219e>
    d868:	movb   $0x0,(%r14)
    d86c:	lea    0x2(%r13),%r14
    d870:	lea    0x30(%rdx),%ecx
    d873:	mov    %rdi,%r15
    d876:	shr    %cl,%r15
    d879:	mov    %r15b,(%r14)
    d87c:	lea    0x1(%r14),%r13
    d880:	cmp    $0xff,%r15b
    d884:	jne    d88f <F_0_714+0x21bd>
    d886:	movb   $0x0,0x0(%r13)
    d88b:	lea    0x2(%r14),%r13
    d88f:	lea    0x28(%rdx),%ecx
    d892:	mov    %rdi,%r15
    d895:	shr    %cl,%r15
    d898:	mov    %r15b,0x0(%r13)
    d89c:	lea    0x1(%r13),%r14
    d8a0:	cmp    $0xff,%r15b
    d8a4:	jne    d8ae <F_0_714+0x21dc>
    d8a6:	movb   $0x0,(%r14)
    d8aa:	lea    0x2(%r13),%r14
    d8ae:	lea    0x20(%rdx),%ecx
    d8b1:	mov    %rdi,%r15
    d8b4:	shr    %cl,%r15
    d8b7:	mov    %r15b,(%r14)
    d8ba:	lea    0x1(%r14),%r13
    d8be:	cmp    $0xff,%r15b
    d8c2:	jne    d8cd <F_0_714+0x21fb>
    d8c4:	movb   $0x0,0x0(%r13)
    d8c9:	lea    0x2(%r14),%r13
    d8cd:	lea    0x18(%rdx),%ecx
    d8d0:	mov    %rdi,%r15
    d8d3:	shr    %cl,%r15
    d8d6:	mov    %r15b,0x0(%r13)
    d8da:	lea    0x1(%r13),%r14
    d8de:	cmp    $0xff,%r15b
    d8e2:	jne    d8ec <F_0_714+0x221a>
    d8e4:	movb   $0x0,(%r14)
    d8e8:	lea    0x2(%r13),%r14
    d8ec:	lea    -0x30(%rdx),%ecx
    d8ef:	mov    %rdi,%r15
    d8f2:	shr    %cl,%r15
    d8f5:	mov    %rcx,%rdx
    d8f8:	mov    %r15b,(%r14)
    d8fb:	lea    0x1(%r14),%r13
    d8ff:	cmp    $0xff,%r15b
    d903:	jne    d90e <F_0_714+0x223c>
    d905:	movb   $0x0,0x0(%r13)
    d90a:	lea    0x2(%r14),%r13
    d90e:	mov    %rbx,%rcx
    d911:	shl    %cl,%rdi
    d914:	mov    %rcx,%rbx
    d917:	or     %r9,%rdi
    d91a:	add    %ebx,%edx
    d91c:	add    $0xfffffff0,%r11d
    d920:	cmp    $0xf,%r11d
    d924:	jg     d848 <F_0_714+0x2176>
    d92a:	shl    $0x4,%r11d
    d92e:	mov    -0x128(%rbp),%rcx
    d935:	add    %ecx,%r11d
    d938:	movslq %r11d,%r14
    d93b:	movslq (%r8,%r14,4),%r11
    d93f:	movsbq 0x400(%r8,%r14,1),%r14
    d948:	cmp    $0x1f,%edx
    d94b:	jg     dbed <F_0_714+0x251b>
    d951:	mov    %rdi,%r15
    d954:	shl    %cl,%r12
    d957:	lea    -0x1(%r12),%edi
    d95c:	mov    -0xb0(%rbp),%r12
    d963:	add    %r12d,%r10d
    d966:	and    %r10d,%edi
    d969:	movslq %edi,%rdi
    d96c:	mov    %rcx,%r12
    d96f:	mov    %r14,%rcx
    d972:	shl    %cl,%r15
    d975:	mov    %rcx,%r10
    d978:	or     %r15,%r11
    d97b:	mov    %r12,%rcx
    d97e:	shl    %cl,%r11
    d981:	or     %r11,%rdi
    d984:	add    %r10d,%edx
    d987:	add    %ecx,%edx
    d989:	mov    $0x1,%r12d
    d98f:	xor    %r11d,%r11d
    d992:	jmpq   d80f <F_0_714+0x213d>
    d997:	mov    %rcx,%r15
    d99a:	lea    0x38(%rdx),%ecx
    d99d:	mov    %rdi,%r8
    d9a0:	shr    %cl,%r8
    d9a3:	mov    %r8b,0x0(%r13)
    d9a7:	lea    0x1(%r13),%rcx
    d9ab:	cmp    $0xff,%r8b
    d9af:	je     dc13 <F_0_714+0x2541>
    d9b5:	mov    %rcx,%r8
    d9b8:	jmpq   dc1a <F_0_714+0x2548>
    d9bd:	movb   $0x0,(%rcx)
    d9c0:	lea    0x2(%r13),%r8
    d9c4:	lea    0x30(%rdx),%ecx
    d9c7:	mov    %rdi,%r13
    d9ca:	shr    %cl,%r13
    d9cd:	mov    %r13b,(%r8)
    d9d0:	lea    0x1(%r8),%rcx
    d9d4:	cmp    $0xff,%r13b
    d9d8:	je     dc3c <F_0_714+0x256a>
    d9de:	mov    %rcx,%r8
    d9e1:	jmpq   dc43 <F_0_714+0x2571>
    d9e6:	movb   $0x0,(%rcx)
    d9e9:	add    $0x2,%r8
    d9ed:	lea    0x28(%rdx),%ecx
    d9f0:	mov    %rdi,%r13
    d9f3:	shr    %cl,%r13
    d9f6:	mov    %r13b,(%r8)
    d9f9:	lea    0x1(%r8),%rcx
    d9fd:	cmp    $0xff,%r13b
    da01:	je     dc65 <F_0_714+0x2593>
    da07:	mov    %rcx,%r8
    da0a:	jmpq   dc6c <F_0_714+0x259a>
    da0f:	movb   $0x0,(%rcx)
    da12:	add    $0x2,%r8
    da16:	lea    -0x20(%rdx),%ecx
    da19:	mov    %rdi,%r13
    da1c:	shr    %cl,%r13
    da1f:	mov    %rcx,%rdx
    da22:	mov    %r13b,(%r8)
    da25:	lea    0x1(%r8),%rcx
    da29:	cmp    $0xff,%r13b
    da2d:	je     dc9e <F_0_714+0x25cc>
    da33:	mov    %rcx,%r13
    da36:	mov    %r15,%rcx
    da39:	mov    %rdi,%r15
    da3c:	mov    -0x120(%rbp),%r8
    da43:	jmpq   cffc <F_0_714+0x192a>
    da48:	movb   $0x0,(%rcx)
    da4b:	lea    0x2(%r8),%r13
    da4f:	mov    %r15,%rcx
    da52:	mov    %rdi,%r15
    da55:	mov    -0x120(%rbp),%r8
    da5c:	jmpq   cda6 <F_0_714+0x16d4>
    da61:	add    $0x1,%r11d
    da65:	movswq 0x70(%rsi),%r10
    da6a:	test   %r10w,%r10w
    da6e:	je     dcb7 <F_0_714+0x25e5>
    da74:	mov    %r10,%r14
    da77:	sar    $0x1f,%r14d
    da7b:	mov    %r14,-0xa8(%rbp)
    da82:	mov    %r14,%rcx
    da85:	xor    %r10d,%ecx
    da88:	sub    %r14d,%ecx
    da8b:	movslq %ecx,%rcx
    da8e:	movzbl (%rcx,%rax,1),%ecx
    da92:	mov    %rcx,-0x128(%rbp)
    da99:	jmpq   ddcc <F_0_714+0x26fa>
    da9e:	cmp    $0x2f,%edx
    daa1:	jle    db64 <F_0_714+0x2492>
    daa7:	lea    0x38(%rdx),%ecx
    daaa:	mov    %rdi,%r15
    daad:	shr    %cl,%r15
    dab0:	mov    %r15b,0x0(%r13)
    dab4:	lea    0x1(%r13),%r14
    dab8:	cmp    $0xff,%r15b
    dabc:	jne    dac6 <F_0_714+0x23f4>
    dabe:	movb   $0x0,(%r14)
    dac2:	lea    0x2(%r13),%r14
    dac6:	lea    0x30(%rdx),%ecx
    dac9:	mov    %rdi,%r15
    dacc:	shr    %cl,%r15
    dacf:	mov    %r15b,(%r14)
    dad2:	lea    0x1(%r14),%r13
    dad6:	cmp    $0xff,%r15b
    dada:	jne    dae5 <F_0_714+0x2413>
    dadc:	movb   $0x0,0x0(%r13)
    dae1:	lea    0x2(%r14),%r13
    dae5:	lea    0x28(%rdx),%ecx
    dae8:	mov    %rdi,%r15
    daeb:	shr    %cl,%r15
    daee:	mov    %r15b,0x0(%r13)
    daf2:	lea    0x1(%r13),%r14
    daf6:	cmp    $0xff,%r15b
    dafa:	jne    db04 <F_0_714+0x2432>
    dafc:	movb   $0x0,(%r14)
    db00:	lea    0x2(%r13),%r14
    db04:	lea    0x20(%rdx),%ecx
    db07:	mov    %rdi,%r15
    db0a:	shr    %cl,%r15
    db0d:	mov    %r15b,(%r14)
    db10:	lea    0x1(%r14),%r13
    db14:	cmp    $0xff,%r15b
    db18:	jne    db23 <F_0_714+0x2451>
    db1a:	movb   $0x0,0x0(%r13)
    db1f:	lea    0x2(%r14),%r13
    db23:	lea    0x18(%rdx),%ecx
    db26:	mov    %rdi,%r15
    db29:	shr    %cl,%r15
    db2c:	mov    %r15b,0x0(%r13)
    db30:	lea    0x1(%r13),%r14
    db34:	cmp    $0xff,%r15b
    db38:	jne    db42 <F_0_714+0x2470>
    db3a:	movb   $0x0,(%r14)
    db3e:	lea    0x2(%r13),%r14
    db42:	lea    -0x30(%rdx),%ecx
    db45:	mov    %rdi,%r15
    db48:	shr    %cl,%r15
    db4b:	mov    %rcx,%rdx
    db4e:	mov    %r15b,(%r14)
    db51:	lea    0x1(%r14),%r13
    db55:	cmp    $0xff,%r15b
    db59:	jne    db64 <F_0_714+0x2492>
    db5b:	movb   $0x0,0x0(%r13)
    db60:	lea    0x2(%r14),%r13
    db64:	mov    %rbx,%rcx
    db67:	shl    %cl,%rdi
    db6a:	mov    %rcx,%rbx
    db6d:	or     %r9,%rdi
    db70:	add    %ebx,%edx
    db72:	add    $0xfffffff0,%r11d
    db76:	cmp    $0xf,%r11d
    db7a:	jg     da9e <F_0_714+0x23cc>
    db80:	shl    $0x4,%r11d
    db84:	mov    -0x128(%rbp),%rcx
    db8b:	add    %ecx,%r11d
    db8e:	movslq %r11d,%r14
    db91:	movslq (%r8,%r14,4),%r11
    db95:	movsbq 0x400(%r8,%r14,1),%r14
    db9e:	cmp    $0x1f,%edx
    dba1:	jg     de43 <F_0_714+0x2771>
    dba7:	mov    %rdi,%r15
    dbaa:	shl    %cl,%r12
    dbad:	lea    -0x1(%r12),%edi
    dbb2:	mov    -0xa8(%rbp),%r12
    dbb9:	add    %r12d,%r10d
    dbbc:	and    %r10d,%edi
    dbbf:	movslq %edi,%rdi
    dbc2:	mov    %rcx,%r12
    dbc5:	mov    %r14,%rcx
    dbc8:	shl    %cl,%r15
    dbcb:	mov    %rcx,%r10
    dbce:	or     %r15,%r11
    dbd1:	mov    %r12,%rcx
    dbd4:	shl    %cl,%r11
    dbd7:	or     %r11,%rdi
    dbda:	add    %r10d,%edx
    dbdd:	add    %ecx,%edx
    dbdf:	mov    $0x1,%r12d
    dbe5:	xor    %r11d,%r11d
    dbe8:	jmpq   da65 <F_0_714+0x2393>
    dbed:	mov    %rcx,%r15
    dbf0:	lea    0x38(%rdx),%ecx
    dbf3:	mov    %rdi,%r8
    dbf6:	shr    %cl,%r8
    dbf9:	mov    %r8b,0x0(%r13)
    dbfd:	lea    0x1(%r13),%rcx
    dc01:	cmp    $0xff,%r8b
    dc05:	je     de69 <F_0_714+0x2797>
    dc0b:	mov    %rcx,%r8
    dc0e:	jmpq   de70 <F_0_714+0x279e>
    dc13:	movb   $0x0,(%rcx)
    dc16:	lea    0x2(%r13),%r8
    dc1a:	lea    0x30(%rdx),%ecx
    dc1d:	mov    %rdi,%r13
    dc20:	shr    %cl,%r13
    dc23:	mov    %r13b,(%r8)
    dc26:	lea    0x1(%r8),%rcx
    dc2a:	cmp    $0xff,%r13b
    dc2e:	je     de92 <F_0_714+0x27c0>
    dc34:	mov    %rcx,%r8
    dc37:	jmpq   de99 <F_0_714+0x27c7>
    dc3c:	movb   $0x0,(%rcx)
    dc3f:	add    $0x2,%r8
    dc43:	lea    0x28(%rdx),%ecx
    dc46:	mov    %rdi,%r13
    dc49:	shr    %cl,%r13
    dc4c:	mov    %r13b,(%r8)
    dc4f:	lea    0x1(%r8),%rcx
    dc53:	cmp    $0xff,%r13b
    dc57:	je     debb <F_0_714+0x27e9>
    dc5d:	mov    %rcx,%r8
    dc60:	jmpq   dec2 <F_0_714+0x27f0>
    dc65:	movb   $0x0,(%rcx)
    dc68:	add    $0x2,%r8
    dc6c:	lea    -0x20(%rdx),%ecx
    dc6f:	mov    %rdi,%r13
    dc72:	shr    %cl,%r13
    dc75:	mov    %rcx,%rdx
    dc78:	mov    %r13b,(%r8)
    dc7b:	lea    0x1(%r8),%rcx
    dc7f:	cmp    $0xff,%r13b
    dc83:	je     def4 <F_0_714+0x2822>
    dc89:	mov    %rcx,%r13
    dc8c:	mov    %r15,%rcx
    dc8f:	mov    %rdi,%r15
    dc92:	mov    -0x120(%rbp),%r8
    dc99:	jmpq   d252 <F_0_714+0x1b80>
    dc9e:	movb   $0x0,(%rcx)
    dca1:	lea    0x2(%r8),%r13
    dca5:	mov    %r15,%rcx
    dca8:	mov    %rdi,%r15
    dcab:	mov    -0x120(%rbp),%r8
    dcb2:	jmpq   cffc <F_0_714+0x192a>
    dcb7:	add    $0x1,%r11d
    dcbb:	movswq 0x72(%rsi),%r10
    dcc0:	test   %r10w,%r10w
    dcc4:	je     df0d <F_0_714+0x283b>
    dcca:	mov    %r10,%r14
    dccd:	sar    $0x1f,%r14d
    dcd1:	mov    %r14,-0xa0(%rbp)
    dcd8:	mov    %r14,%rcx
    dcdb:	xor    %r10d,%ecx
    dcde:	sub    %r14d,%ecx
    dce1:	movslq %ecx,%rcx
    dce4:	movzbl (%rcx,%rax,1),%ecx
    dce8:	mov    %rcx,-0x128(%rbp)
    dcef:	jmpq   e022 <F_0_714+0x2950>
    dcf4:	cmp    $0x2f,%edx
    dcf7:	jle    ddba <F_0_714+0x26e8>
    dcfd:	lea    0x38(%rdx),%ecx
    dd00:	mov    %rdi,%r15
    dd03:	shr    %cl,%r15
    dd06:	mov    %r15b,0x0(%r13)
    dd0a:	lea    0x1(%r13),%r14
    dd0e:	cmp    $0xff,%r15b
    dd12:	jne    dd1c <F_0_714+0x264a>
    dd14:	movb   $0x0,(%r14)
    dd18:	lea    0x2(%r13),%r14
    dd1c:	lea    0x30(%rdx),%ecx
    dd1f:	mov    %rdi,%r15
    dd22:	shr    %cl,%r15
    dd25:	mov    %r15b,(%r14)
    dd28:	lea    0x1(%r14),%r13
    dd2c:	cmp    $0xff,%r15b
    dd30:	jne    dd3b <F_0_714+0x2669>
    dd32:	movb   $0x0,0x0(%r13)
    dd37:	lea    0x2(%r14),%r13
    dd3b:	lea    0x28(%rdx),%ecx
    dd3e:	mov    %rdi,%r15
    dd41:	shr    %cl,%r15
    dd44:	mov    %r15b,0x0(%r13)
    dd48:	lea    0x1(%r13),%r14
    dd4c:	cmp    $0xff,%r15b
    dd50:	jne    dd5a <F_0_714+0x2688>
    dd52:	movb   $0x0,(%r14)
    dd56:	lea    0x2(%r13),%r14
    dd5a:	lea    0x20(%rdx),%ecx
    dd5d:	mov    %rdi,%r15
    dd60:	shr    %cl,%r15
    dd63:	mov    %r15b,(%r14)
    dd66:	lea    0x1(%r14),%r13
    dd6a:	cmp    $0xff,%r15b
    dd6e:	jne    dd79 <F_0_714+0x26a7>
    dd70:	movb   $0x0,0x0(%r13)
    dd75:	lea    0x2(%r14),%r13
    dd79:	lea    0x18(%rdx),%ecx
    dd7c:	mov    %rdi,%r15
    dd7f:	shr    %cl,%r15
    dd82:	mov    %r15b,0x0(%r13)
    dd86:	lea    0x1(%r13),%r14
    dd8a:	cmp    $0xff,%r15b
    dd8e:	jne    dd98 <F_0_714+0x26c6>
    dd90:	movb   $0x0,(%r14)
    dd94:	lea    0x2(%r13),%r14
    dd98:	lea    -0x30(%rdx),%ecx
    dd9b:	mov    %rdi,%r15
    dd9e:	shr    %cl,%r15
    dda1:	mov    %rcx,%rdx
    dda4:	mov    %r15b,(%r14)
    dda7:	lea    0x1(%r14),%r13
    ddab:	cmp    $0xff,%r15b
    ddaf:	jne    ddba <F_0_714+0x26e8>
    ddb1:	movb   $0x0,0x0(%r13)
    ddb6:	lea    0x2(%r14),%r13
    ddba:	mov    %rbx,%rcx
    ddbd:	shl    %cl,%rdi
    ddc0:	mov    %rcx,%rbx
    ddc3:	or     %r9,%rdi
    ddc6:	add    %ebx,%edx
    ddc8:	add    $0xfffffff0,%r11d
    ddcc:	cmp    $0xf,%r11d
    ddd0:	jg     dcf4 <F_0_714+0x2622>
    ddd6:	shl    $0x4,%r11d
    ddda:	mov    -0x128(%rbp),%rcx
    dde1:	add    %ecx,%r11d
    dde4:	movslq %r11d,%r14
    dde7:	movslq (%r8,%r14,4),%r11
    ddeb:	movsbq 0x400(%r8,%r14,1),%r14
    ddf4:	cmp    $0x1f,%edx
    ddf7:	jg     e099 <F_0_714+0x29c7>
    ddfd:	mov    %rdi,%r15
    de00:	shl    %cl,%r12
    de03:	lea    -0x1(%r12),%edi
    de08:	mov    -0xa8(%rbp),%r12
    de0f:	add    %r12d,%r10d
    de12:	and    %r10d,%edi
    de15:	movslq %edi,%rdi
    de18:	mov    %rcx,%r12
    de1b:	mov    %r14,%rcx
    de1e:	shl    %cl,%r15
    de21:	mov    %rcx,%r10
    de24:	or     %r15,%r11
    de27:	mov    %r12,%rcx
    de2a:	shl    %cl,%r11
    de2d:	or     %r11,%rdi
    de30:	add    %r10d,%edx
    de33:	add    %ecx,%edx
    de35:	mov    $0x1,%r12d
    de3b:	xor    %r11d,%r11d
    de3e:	jmpq   dcbb <F_0_714+0x25e9>
    de43:	mov    %rcx,%r15
    de46:	lea    0x38(%rdx),%ecx
    de49:	mov    %rdi,%r8
    de4c:	shr    %cl,%r8
    de4f:	mov    %r8b,0x0(%r13)
    de53:	lea    0x1(%r13),%rcx
    de57:	cmp    $0xff,%r8b
    de5b:	je     e0bf <F_0_714+0x29ed>
    de61:	mov    %rcx,%r8
    de64:	jmpq   e0c6 <F_0_714+0x29f4>
    de69:	movb   $0x0,(%rcx)
    de6c:	lea    0x2(%r13),%r8
    de70:	lea    0x30(%rdx),%ecx
    de73:	mov    %rdi,%r13
    de76:	shr    %cl,%r13
    de79:	mov    %r13b,(%r8)
    de7c:	lea    0x1(%r8),%rcx
    de80:	cmp    $0xff,%r13b
    de84:	je     e0e8 <F_0_714+0x2a16>
    de8a:	mov    %rcx,%r8
    de8d:	jmpq   e0ef <F_0_714+0x2a1d>
    de92:	movb   $0x0,(%rcx)
    de95:	add    $0x2,%r8
    de99:	lea    0x28(%rdx),%ecx
    de9c:	mov    %rdi,%r13
    de9f:	shr    %cl,%r13
    dea2:	mov    %r13b,(%r8)
    dea5:	lea    0x1(%r8),%rcx
    dea9:	cmp    $0xff,%r13b
    dead:	je     e111 <F_0_714+0x2a3f>
    deb3:	mov    %rcx,%r8
    deb6:	jmpq   e118 <F_0_714+0x2a46>
    debb:	movb   $0x0,(%rcx)
    debe:	add    $0x2,%r8
    dec2:	lea    -0x20(%rdx),%ecx
    dec5:	mov    %rdi,%r13
    dec8:	shr    %cl,%r13
    decb:	mov    %rcx,%rdx
    dece:	mov    %r13b,(%r8)
    ded1:	lea    0x1(%r8),%rcx
    ded5:	cmp    $0xff,%r13b
    ded9:	je     e14a <F_0_714+0x2a78>
    dedf:	mov    %rcx,%r13
    dee2:	mov    %r15,%rcx
    dee5:	mov    %rdi,%r15
    dee8:	mov    -0x120(%rbp),%r8
    deef:	jmpq   d4a8 <F_0_714+0x1dd6>
    def4:	movb   $0x0,(%rcx)
    def7:	lea    0x2(%r8),%r13
    defb:	mov    %r15,%rcx
    defe:	mov    %rdi,%r15
    df01:	mov    -0x120(%rbp),%r8
    df08:	jmpq   d252 <F_0_714+0x1b80>
    df0d:	add    $0x1,%r11d
    df11:	movswq 0x64(%rsi),%r10
    df16:	test   %r10w,%r10w
    df1a:	je     e163 <F_0_714+0x2a91>
    df20:	mov    %r10,%r14
    df23:	sar    $0x1f,%r14d
    df27:	mov    %r14,-0xa0(%rbp)
    df2e:	mov    %r14,%rcx
    df31:	xor    %r10d,%ecx
    df34:	sub    %r14d,%ecx
    df37:	movslq %ecx,%rcx
    df3a:	movzbl (%rcx,%rax,1),%ecx
    df3e:	mov    %rcx,-0x128(%rbp)
    df45:	jmpq   e278 <F_0_714+0x2ba6>
    df4a:	cmp    $0x2f,%edx
    df4d:	jle    e010 <F_0_714+0x293e>
    df53:	lea    0x38(%rdx),%ecx
    df56:	mov    %rdi,%r15
    df59:	shr    %cl,%r15
    df5c:	mov    %r15b,0x0(%r13)
    df60:	lea    0x1(%r13),%r14
    df64:	cmp    $0xff,%r15b
    df68:	jne    df72 <F_0_714+0x28a0>
    df6a:	movb   $0x0,(%r14)
    df6e:	lea    0x2(%r13),%r14
    df72:	lea    0x30(%rdx),%ecx
    df75:	mov    %rdi,%r15
    df78:	shr    %cl,%r15
    df7b:	mov    %r15b,(%r14)
    df7e:	lea    0x1(%r14),%r13
    df82:	cmp    $0xff,%r15b
    df86:	jne    df91 <F_0_714+0x28bf>
    df88:	movb   $0x0,0x0(%r13)
    df8d:	lea    0x2(%r14),%r13
    df91:	lea    0x28(%rdx),%ecx
    df94:	mov    %rdi,%r15
    df97:	shr    %cl,%r15
    df9a:	mov    %r15b,0x0(%r13)
    df9e:	lea    0x1(%r13),%r14
    dfa2:	cmp    $0xff,%r15b
    dfa6:	jne    dfb0 <F_0_714+0x28de>
    dfa8:	movb   $0x0,(%r14)
    dfac:	lea    0x2(%r13),%r14
    dfb0:	lea    0x20(%rdx),%ecx
    dfb3:	mov    %rdi,%r15
    dfb6:	shr    %cl,%r15
    dfb9:	mov    %r15b,(%r14)
    dfbc:	lea    0x1(%r14),%r13
    dfc0:	cmp    $0xff,%r15b
    dfc4:	jne    dfcf <F_0_714+0x28fd>
    dfc6:	movb   $0x0,0x0(%r13)
    dfcb:	lea    0x2(%r14),%r13
    dfcf:	lea    0x18(%rdx),%ecx
    dfd2:	mov    %rdi,%r15
    dfd5:	shr    %cl,%r15
    dfd8:	mov    %r15b,0x0(%r13)
    dfdc:	lea    0x1(%r13),%r14
    dfe0:	cmp    $0xff,%r15b
    dfe4:	jne    dfee <F_0_714+0x291c>
    dfe6:	movb   $0x0,(%r14)
    dfea:	lea    0x2(%r13),%r14
    dfee:	lea    -0x30(%rdx),%ecx
    dff1:	mov    %rdi,%r15
    dff4:	shr    %cl,%r15
    dff7:	mov    %rcx,%rdx
    dffa:	mov    %r15b,(%r14)
    dffd:	lea    0x1(%r14),%r13
    e001:	cmp    $0xff,%r15b
    e005:	jne    e010 <F_0_714+0x293e>
    e007:	movb   $0x0,0x0(%r13)
    e00c:	lea    0x2(%r14),%r13
    e010:	mov    %rbx,%rcx
    e013:	shl    %cl,%rdi
    e016:	mov    %rcx,%rbx
    e019:	or     %r9,%rdi
    e01c:	add    %ebx,%edx
    e01e:	add    $0xfffffff0,%r11d
    e022:	cmp    $0xf,%r11d
    e026:	jg     df4a <F_0_714+0x2878>
    e02c:	shl    $0x4,%r11d
    e030:	mov    -0x128(%rbp),%rcx
    e037:	add    %ecx,%r11d
    e03a:	movslq %r11d,%r14
    e03d:	movslq (%r8,%r14,4),%r11
    e041:	movsbq 0x400(%r8,%r14,1),%r14
    e04a:	cmp    $0x1f,%edx
    e04d:	jg     e2ef <F_0_714+0x2c1d>
    e053:	mov    %rdi,%r15
    e056:	shl    %cl,%r12
    e059:	lea    -0x1(%r12),%edi
    e05e:	mov    -0xa0(%rbp),%r12
    e065:	add    %r12d,%r10d
    e068:	and    %r10d,%edi
    e06b:	movslq %edi,%rdi
    e06e:	mov    %rcx,%r12
    e071:	mov    %r14,%rcx
    e074:	shl    %cl,%r15
    e077:	mov    %rcx,%r10
    e07a:	or     %r15,%r11
    e07d:	mov    %r12,%rcx
    e080:	shl    %cl,%r11
    e083:	or     %r11,%rdi
    e086:	add    %r10d,%edx
    e089:	add    %ecx,%edx
    e08b:	mov    $0x1,%r12d
    e091:	xor    %r11d,%r11d
    e094:	jmpq   df11 <F_0_714+0x283f>
    e099:	mov    %rcx,%r15
    e09c:	lea    0x38(%rdx),%ecx
    e09f:	mov    %rdi,%r8
    e0a2:	shr    %cl,%r8
    e0a5:	mov    %r8b,0x0(%r13)
    e0a9:	lea    0x1(%r13),%rcx
    e0ad:	cmp    $0xff,%r8b
    e0b1:	je     e315 <F_0_714+0x2c43>
    e0b7:	mov    %rcx,%r8
    e0ba:	jmpq   e31c <F_0_714+0x2c4a>
    e0bf:	movb   $0x0,(%rcx)
    e0c2:	lea    0x2(%r13),%r8
    e0c6:	lea    0x30(%rdx),%ecx
    e0c9:	mov    %rdi,%r13
    e0cc:	shr    %cl,%r13
    e0cf:	mov    %r13b,(%r8)
    e0d2:	lea    0x1(%r8),%rcx
    e0d6:	cmp    $0xff,%r13b
    e0da:	je     e33e <F_0_714+0x2c6c>
    e0e0:	mov    %rcx,%r8
    e0e3:	jmpq   e345 <F_0_714+0x2c73>
    e0e8:	movb   $0x0,(%rcx)
    e0eb:	add    $0x2,%r8
    e0ef:	lea    0x28(%rdx),%ecx
    e0f2:	mov    %rdi,%r13
    e0f5:	shr    %cl,%r13
    e0f8:	mov    %r13b,(%r8)
    e0fb:	lea    0x1(%r8),%rcx
    e0ff:	cmp    $0xff,%r13b
    e103:	je     e367 <F_0_714+0x2c95>
    e109:	mov    %rcx,%r8
    e10c:	jmpq   e36e <F_0_714+0x2c9c>
    e111:	movb   $0x0,(%rcx)
    e114:	add    $0x2,%r8
    e118:	lea    -0x20(%rdx),%ecx
    e11b:	mov    %rdi,%r13
    e11e:	shr    %cl,%r13
    e121:	mov    %rcx,%rdx
    e124:	mov    %r13b,(%r8)
    e127:	lea    0x1(%r8),%rcx
    e12b:	cmp    $0xff,%r13b
    e12f:	je     e3a0 <F_0_714+0x2cce>
    e135:	mov    %rcx,%r13
    e138:	mov    %r15,%rcx
    e13b:	mov    %rdi,%r15
    e13e:	mov    -0x120(%rbp),%r8
    e145:	jmpq   d6fe <F_0_714+0x202c>
    e14a:	movb   $0x0,(%rcx)
    e14d:	lea    0x2(%r8),%r13
    e151:	mov    %r15,%rcx
    e154:	mov    %rdi,%r15
    e157:	mov    -0x120(%rbp),%r8
    e15e:	jmpq   d4a8 <F_0_714+0x1dd6>
    e163:	add    $0x1,%r11d
    e167:	movswq 0x56(%rsi),%r10
    e16c:	test   %r10w,%r10w
    e170:	je     e3b9 <F_0_714+0x2ce7>
    e176:	mov    %r10,%r14
    e179:	sar    $0x1f,%r14d
    e17d:	mov    %r14,-0x98(%rbp)
    e184:	mov    %r14,%rcx
    e187:	xor    %r10d,%ecx
    e18a:	sub    %r14d,%ecx
    e18d:	movslq %ecx,%rcx
    e190:	movzbl (%rcx,%rax,1),%ecx
    e194:	mov    %rcx,-0x128(%rbp)
    e19b:	jmpq   e4ce <F_0_714+0x2dfc>
    e1a0:	cmp    $0x2f,%edx
    e1a3:	jle    e266 <F_0_714+0x2b94>
    e1a9:	lea    0x38(%rdx),%ecx
    e1ac:	mov    %rdi,%r15
    e1af:	shr    %cl,%r15
    e1b2:	mov    %r15b,0x0(%r13)
    e1b6:	lea    0x1(%r13),%r14
    e1ba:	cmp    $0xff,%r15b
    e1be:	jne    e1c8 <F_0_714+0x2af6>
    e1c0:	movb   $0x0,(%r14)
    e1c4:	lea    0x2(%r13),%r14
    e1c8:	lea    0x30(%rdx),%ecx
    e1cb:	mov    %rdi,%r15
    e1ce:	shr    %cl,%r15
    e1d1:	mov    %r15b,(%r14)
    e1d4:	lea    0x1(%r14),%r13
    e1d8:	cmp    $0xff,%r15b
    e1dc:	jne    e1e7 <F_0_714+0x2b15>
    e1de:	movb   $0x0,0x0(%r13)
    e1e3:	lea    0x2(%r14),%r13
    e1e7:	lea    0x28(%rdx),%ecx
    e1ea:	mov    %rdi,%r15
    e1ed:	shr    %cl,%r15
    e1f0:	mov    %r15b,0x0(%r13)
    e1f4:	lea    0x1(%r13),%r14
    e1f8:	cmp    $0xff,%r15b
    e1fc:	jne    e206 <F_0_714+0x2b34>
    e1fe:	movb   $0x0,(%r14)
    e202:	lea    0x2(%r13),%r14
    e206:	lea    0x20(%rdx),%ecx
    e209:	mov    %rdi,%r15
    e20c:	shr    %cl,%r15
    e20f:	mov    %r15b,(%r14)
    e212:	lea    0x1(%r14),%r13
    e216:	cmp    $0xff,%r15b
    e21a:	jne    e225 <F_0_714+0x2b53>
    e21c:	movb   $0x0,0x0(%r13)
    e221:	lea    0x2(%r14),%r13
    e225:	lea    0x18(%rdx),%ecx
    e228:	mov    %rdi,%r15
    e22b:	shr    %cl,%r15
    e22e:	mov    %r15b,0x0(%r13)
    e232:	lea    0x1(%r13),%r14
    e236:	cmp    $0xff,%r15b
    e23a:	jne    e244 <F_0_714+0x2b72>
    e23c:	movb   $0x0,(%r14)
    e240:	lea    0x2(%r13),%r14
    e244:	lea    -0x30(%rdx),%ecx
    e247:	mov    %rdi,%r15
    e24a:	shr    %cl,%r15
    e24d:	mov    %rcx,%rdx
    e250:	mov    %r15b,(%r14)
    e253:	lea    0x1(%r14),%r13
    e257:	cmp    $0xff,%r15b
    e25b:	jne    e266 <F_0_714+0x2b94>
    e25d:	movb   $0x0,0x0(%r13)
    e262:	lea    0x2(%r14),%r13
    e266:	mov    %rbx,%rcx
    e269:	shl    %cl,%rdi
    e26c:	mov    %rcx,%rbx
    e26f:	or     %r9,%rdi
    e272:	add    %ebx,%edx
    e274:	add    $0xfffffff0,%r11d
    e278:	cmp    $0xf,%r11d
    e27c:	jg     e1a0 <F_0_714+0x2ace>
    e282:	shl    $0x4,%r11d
    e286:	mov    -0x128(%rbp),%rcx
    e28d:	add    %ecx,%r11d
    e290:	movslq %r11d,%r14
    e293:	movslq (%r8,%r14,4),%r11
    e297:	movsbq 0x400(%r8,%r14,1),%r14
    e2a0:	cmp    $0x1f,%edx
    e2a3:	jg     e545 <F_0_714+0x2e73>
    e2a9:	mov    %rdi,%r15
    e2ac:	shl    %cl,%r12
    e2af:	lea    -0x1(%r12),%edi
    e2b4:	mov    -0xa0(%rbp),%r12
    e2bb:	add    %r12d,%r10d
    e2be:	and    %r10d,%edi
    e2c1:	movslq %edi,%rdi
    e2c4:	mov    %rcx,%r12
    e2c7:	mov    %r14,%rcx
    e2ca:	shl    %cl,%r15
    e2cd:	mov    %rcx,%r10
    e2d0:	or     %r15,%r11
    e2d3:	mov    %r12,%rcx
    e2d6:	shl    %cl,%r11
    e2d9:	or     %r11,%rdi
    e2dc:	add    %r10d,%edx
    e2df:	add    %ecx,%edx
    e2e1:	mov    $0x1,%r12d
    e2e7:	xor    %r11d,%r11d
    e2ea:	jmpq   e167 <F_0_714+0x2a95>
    e2ef:	mov    %rcx,%r15
    e2f2:	lea    0x38(%rdx),%ecx
    e2f5:	mov    %rdi,%r8
    e2f8:	shr    %cl,%r8
    e2fb:	mov    %r8b,0x0(%r13)
    e2ff:	lea    0x1(%r13),%rcx
    e303:	cmp    $0xff,%r8b
    e307:	je     e56b <F_0_714+0x2e99>
    e30d:	mov    %rcx,%r8
    e310:	jmpq   e572 <F_0_714+0x2ea0>
    e315:	movb   $0x0,(%rcx)
    e318:	lea    0x2(%r13),%r8
    e31c:	lea    0x30(%rdx),%ecx
    e31f:	mov    %rdi,%r13
    e322:	shr    %cl,%r13
    e325:	mov    %r13b,(%r8)
    e328:	lea    0x1(%r8),%rcx
    e32c:	cmp    $0xff,%r13b
    e330:	je     e594 <F_0_714+0x2ec2>
    e336:	mov    %rcx,%r8
    e339:	jmpq   e59b <F_0_714+0x2ec9>
    e33e:	movb   $0x0,(%rcx)
    e341:	add    $0x2,%r8
    e345:	lea    0x28(%rdx),%ecx
    e348:	mov    %rdi,%r13
    e34b:	shr    %cl,%r13
    e34e:	mov    %r13b,(%r8)
    e351:	lea    0x1(%r8),%rcx
    e355:	cmp    $0xff,%r13b
    e359:	je     e5bd <F_0_714+0x2eeb>
    e35f:	mov    %rcx,%r8
    e362:	jmpq   e5c4 <F_0_714+0x2ef2>
    e367:	movb   $0x0,(%rcx)
    e36a:	add    $0x2,%r8
    e36e:	lea    -0x20(%rdx),%ecx
    e371:	mov    %rdi,%r13
    e374:	shr    %cl,%r13
    e377:	mov    %rcx,%rdx
    e37a:	mov    %r13b,(%r8)
    e37d:	lea    0x1(%r8),%rcx
    e381:	cmp    $0xff,%r13b
    e385:	je     e5f6 <F_0_714+0x2f24>
    e38b:	mov    %rcx,%r13
    e38e:	mov    %r15,%rcx
    e391:	mov    %rdi,%r15
    e394:	mov    -0x120(%rbp),%r8
    e39b:	jmpq   d954 <F_0_714+0x2282>
    e3a0:	movb   $0x0,(%rcx)
    e3a3:	lea    0x2(%r8),%r13
    e3a7:	mov    %r15,%rcx
    e3aa:	mov    %rdi,%r15
    e3ad:	mov    -0x120(%rbp),%r8
    e3b4:	jmpq   d6fe <F_0_714+0x202c>
    e3b9:	add    $0x1,%r11d
    e3bd:	movswq 0x48(%rsi),%r10
    e3c2:	test   %r10w,%r10w
    e3c6:	je     e60f <F_0_714+0x2f3d>
    e3cc:	mov    %r10,%r14
    e3cf:	sar    $0x1f,%r14d
    e3d3:	mov    %r14,-0x98(%rbp)
    e3da:	mov    %r14,%rcx
    e3dd:	xor    %r10d,%ecx
    e3e0:	sub    %r14d,%ecx
    e3e3:	movslq %ecx,%rcx
    e3e6:	movzbl (%rcx,%rax,1),%ecx
    e3ea:	mov    %rcx,-0x128(%rbp)
    e3f1:	jmpq   e724 <F_0_714+0x3052>
    e3f6:	cmp    $0x2f,%edx
    e3f9:	jle    e4bc <F_0_714+0x2dea>
    e3ff:	lea    0x38(%rdx),%ecx
    e402:	mov    %rdi,%r15
    e405:	shr    %cl,%r15
    e408:	mov    %r15b,0x0(%r13)
    e40c:	lea    0x1(%r13),%r14
    e410:	cmp    $0xff,%r15b
    e414:	jne    e41e <F_0_714+0x2d4c>
    e416:	movb   $0x0,(%r14)
    e41a:	lea    0x2(%r13),%r14
    e41e:	lea    0x30(%rdx),%ecx
    e421:	mov    %rdi,%r15
    e424:	shr    %cl,%r15
    e427:	mov    %r15b,(%r14)
    e42a:	lea    0x1(%r14),%r13
    e42e:	cmp    $0xff,%r15b
    e432:	jne    e43d <F_0_714+0x2d6b>
    e434:	movb   $0x0,0x0(%r13)
    e439:	lea    0x2(%r14),%r13
    e43d:	lea    0x28(%rdx),%ecx
    e440:	mov    %rdi,%r15
    e443:	shr    %cl,%r15
    e446:	mov    %r15b,0x0(%r13)
    e44a:	lea    0x1(%r13),%r14
    e44e:	cmp    $0xff,%r15b
    e452:	jne    e45c <F_0_714+0x2d8a>
    e454:	movb   $0x0,(%r14)
    e458:	lea    0x2(%r13),%r14
    e45c:	lea    0x20(%rdx),%ecx
    e45f:	mov    %rdi,%r15
    e462:	shr    %cl,%r15
    e465:	mov    %r15b,(%r14)
    e468:	lea    0x1(%r14),%r13
    e46c:	cmp    $0xff,%r15b
    e470:	jne    e47b <F_0_714+0x2da9>
    e472:	movb   $0x0,0x0(%r13)
    e477:	lea    0x2(%r14),%r13
    e47b:	lea    0x18(%rdx),%ecx
    e47e:	mov    %rdi,%r15
    e481:	shr    %cl,%r15
    e484:	mov    %r15b,0x0(%r13)
    e488:	lea    0x1(%r13),%r14
    e48c:	cmp    $0xff,%r15b
    e490:	jne    e49a <F_0_714+0x2dc8>
    e492:	movb   $0x0,(%r14)
    e496:	lea    0x2(%r13),%r14
    e49a:	lea    -0x30(%rdx),%ecx
    e49d:	mov    %rdi,%r15
    e4a0:	shr    %cl,%r15
    e4a3:	mov    %rcx,%rdx
    e4a6:	mov    %r15b,(%r14)
    e4a9:	lea    0x1(%r14),%r13
    e4ad:	cmp    $0xff,%r15b
    e4b1:	jne    e4bc <F_0_714+0x2dea>
    e4b3:	movb   $0x0,0x0(%r13)
    e4b8:	lea    0x2(%r14),%r13
    e4bc:	mov    %rbx,%rcx
    e4bf:	shl    %cl,%rdi
    e4c2:	mov    %rcx,%rbx
    e4c5:	or     %r9,%rdi
    e4c8:	add    %ebx,%edx
    e4ca:	add    $0xfffffff0,%r11d
    e4ce:	cmp    $0xf,%r11d
    e4d2:	jg     e3f6 <F_0_714+0x2d24>
    e4d8:	shl    $0x4,%r11d
    e4dc:	mov    -0x128(%rbp),%rcx
    e4e3:	add    %ecx,%r11d
    e4e6:	movslq %r11d,%r14
    e4e9:	movslq (%r8,%r14,4),%r11
    e4ed:	movsbq 0x400(%r8,%r14,1),%r14
    e4f6:	cmp    $0x1f,%edx
    e4f9:	jg     e79e <F_0_714+0x30cc>
    e4ff:	mov    %rdi,%r15
    e502:	shl    %cl,%r12
    e505:	lea    -0x1(%r12),%edi
    e50a:	mov    -0x98(%rbp),%r12
    e511:	add    %r12d,%r10d
    e514:	and    %r10d,%edi
    e517:	movslq %edi,%rdi
    e51a:	mov    %rcx,%r12
    e51d:	mov    %r14,%rcx
    e520:	shl    %cl,%r15
    e523:	mov    %rcx,%r10
    e526:	or     %r15,%r11
    e529:	mov    %r12,%rcx
    e52c:	shl    %cl,%r11
    e52f:	or     %r11,%rdi
    e532:	add    %r10d,%edx
    e535:	add    %ecx,%edx
    e537:	mov    $0x1,%r12d
    e53d:	xor    %r11d,%r11d
    e540:	jmpq   e3bd <F_0_714+0x2ceb>
    e545:	mov    %rcx,%r15
    e548:	lea    0x38(%rdx),%ecx
    e54b:	mov    %rdi,%r8
    e54e:	shr    %cl,%r8
    e551:	mov    %r8b,0x0(%r13)
    e555:	lea    0x1(%r13),%rcx
    e559:	cmp    $0xff,%r8b
    e55d:	je     e7c4 <F_0_714+0x30f2>
    e563:	mov    %rcx,%r8
    e566:	jmpq   e7cb <F_0_714+0x30f9>
    e56b:	movb   $0x0,(%rcx)
    e56e:	lea    0x2(%r13),%r8
    e572:	lea    0x30(%rdx),%ecx
    e575:	mov    %rdi,%r13
    e578:	shr    %cl,%r13
    e57b:	mov    %r13b,(%r8)
    e57e:	lea    0x1(%r8),%rcx
    e582:	cmp    $0xff,%r13b
    e586:	je     e7ed <F_0_714+0x311b>
    e58c:	mov    %rcx,%r8
    e58f:	jmpq   e7f4 <F_0_714+0x3122>
    e594:	movb   $0x0,(%rcx)
    e597:	add    $0x2,%r8
    e59b:	lea    0x28(%rdx),%ecx
    e59e:	mov    %rdi,%r13
    e5a1:	shr    %cl,%r13
    e5a4:	mov    %r13b,(%r8)
    e5a7:	lea    0x1(%r8),%rcx
    e5ab:	cmp    $0xff,%r13b
    e5af:	je     e816 <F_0_714+0x3144>
    e5b5:	mov    %rcx,%r8
    e5b8:	jmpq   e81d <F_0_714+0x314b>
    e5bd:	movb   $0x0,(%rcx)
    e5c0:	add    $0x2,%r8
    e5c4:	lea    -0x20(%rdx),%ecx
    e5c7:	mov    %rdi,%r13
    e5ca:	shr    %cl,%r13
    e5cd:	mov    %rcx,%rdx
    e5d0:	mov    %r13b,(%r8)
    e5d3:	lea    0x1(%r8),%rcx
    e5d7:	cmp    $0xff,%r13b
    e5db:	je     e84f <F_0_714+0x317d>
    e5e1:	mov    %rcx,%r13
    e5e4:	mov    %r15,%rcx
    e5e7:	mov    %rdi,%r15
    e5ea:	mov    -0x120(%rbp),%r8
    e5f1:	jmpq   dbaa <F_0_714+0x24d8>
    e5f6:	movb   $0x0,(%rcx)
    e5f9:	lea    0x2(%r8),%r13
    e5fd:	mov    %r15,%rcx
    e600:	mov    %rdi,%r15
    e603:	mov    -0x120(%rbp),%r8
    e60a:	jmpq   d954 <F_0_714+0x2282>
    e60f:	add    $0x1,%r11d
    e613:	movswq 0x3a(%rsi),%r10
    e618:	test   %r10w,%r10w
    e61c:	je     e868 <F_0_714+0x3196>
    e622:	mov    %r10,%r14
    e625:	sar    $0x1f,%r14d
    e629:	mov    %r14,-0x90(%rbp)
    e630:	mov    %r14,%rcx
    e633:	xor    %r10d,%ecx
    e636:	sub    %r14d,%ecx
    e639:	movslq %ecx,%rcx
    e63c:	movzbl (%rcx,%rax,1),%ecx
    e640:	mov    %rcx,-0x128(%rbp)
    e647:	jmpq   e97d <F_0_714+0x32ab>
    e64c:	cmp    $0x2f,%edx
    e64f:	jle    e712 <F_0_714+0x3040>
    e655:	lea    0x38(%rdx),%ecx
    e658:	mov    %rdi,%r15
    e65b:	shr    %cl,%r15
    e65e:	mov    %r15b,0x0(%r13)
    e662:	lea    0x1(%r13),%r14
    e666:	cmp    $0xff,%r15b
    e66a:	jne    e674 <F_0_714+0x2fa2>
    e66c:	movb   $0x0,(%r14)
    e670:	lea    0x2(%r13),%r14
    e674:	lea    0x30(%rdx),%ecx
    e677:	mov    %rdi,%r15
    e67a:	shr    %cl,%r15
    e67d:	mov    %r15b,(%r14)
    e680:	lea    0x1(%r14),%r13
    e684:	cmp    $0xff,%r15b
    e688:	jne    e693 <F_0_714+0x2fc1>
    e68a:	movb   $0x0,0x0(%r13)
    e68f:	lea    0x2(%r14),%r13
    e693:	lea    0x28(%rdx),%ecx
    e696:	mov    %rdi,%r15
    e699:	shr    %cl,%r15
    e69c:	mov    %r15b,0x0(%r13)
    e6a0:	lea    0x1(%r13),%r14
    e6a4:	cmp    $0xff,%r15b
    e6a8:	jne    e6b2 <F_0_714+0x2fe0>
    e6aa:	movb   $0x0,(%r14)
    e6ae:	lea    0x2(%r13),%r14
    e6b2:	lea    0x20(%rdx),%ecx
    e6b5:	mov    %rdi,%r15
    e6b8:	shr    %cl,%r15
    e6bb:	mov    %r15b,(%r14)
    e6be:	lea    0x1(%r14),%r13
    e6c2:	cmp    $0xff,%r15b
    e6c6:	jne    e6d1 <F_0_714+0x2fff>
    e6c8:	movb   $0x0,0x0(%r13)
    e6cd:	lea    0x2(%r14),%r13
    e6d1:	lea    0x18(%rdx),%ecx
    e6d4:	mov    %rdi,%r15
    e6d7:	shr    %cl,%r15
    e6da:	mov    %r15b,0x0(%r13)
    e6de:	lea    0x1(%r13),%r14
    e6e2:	cmp    $0xff,%r15b
    e6e6:	jne    e6f0 <F_0_714+0x301e>
    e6e8:	movb   $0x0,(%r14)
    e6ec:	lea    0x2(%r13),%r14
    e6f0:	lea    -0x30(%rdx),%ecx
    e6f3:	mov    %rdi,%r15
    e6f6:	shr    %cl,%r15
    e6f9:	mov    %rcx,%rdx
    e6fc:	mov    %r15b,(%r14)
    e6ff:	lea    0x1(%r14),%r13
    e703:	cmp    $0xff,%r15b
    e707:	jne    e712 <F_0_714+0x3040>
    e709:	movb   $0x0,0x0(%r13)
    e70e:	lea    0x2(%r14),%r13
    e712:	mov    %rbx,%rcx
    e715:	shl    %cl,%rdi
    e718:	mov    %rcx,%rbx
    e71b:	or     %r9,%rdi
    e71e:	add    %ebx,%edx
    e720:	add    $0xfffffff0,%r11d
    e724:	cmp    $0xf,%r11d
    e728:	jg     e64c <F_0_714+0x2f7a>
    e72e:	shl    $0x4,%r11d
    e732:	mov    -0x128(%rbp),%rcx
    e739:	add    %ecx,%r11d
    e73c:	movslq %r11d,%r11
    e73f:	movslq (%r8,%r11,4),%r14
    e743:	movsbq 0x400(%r8,%r11,1),%r11
    e74c:	cmp    $0x1f,%edx
    e74f:	jg     e9f7 <F_0_714+0x3325>
    e755:	mov    %rdi,%r15
    e758:	shl    %cl,%r12
    e75b:	lea    -0x1(%r12),%edi
    e760:	mov    -0x98(%rbp),%r12
    e767:	add    %r12d,%r10d
    e76a:	and    %r10d,%edi
    e76d:	movslq %edi,%rdi
    e770:	mov    %r11,%r10
    e773:	mov    %rcx,%r11
    e776:	mov    %r10,%rcx
    e779:	shl    %cl,%r15
    e77c:	mov    %rcx,%r10
    e77f:	or     %r15,%r14
    e782:	mov    %r11,%rcx
    e785:	shl    %cl,%r14
    e788:	or     %r14,%rdi
    e78b:	add    %r10d,%edx
    e78e:	add    %ecx,%edx
    e790:	mov    $0x1,%r12d
    e796:	xor    %r11d,%r11d
    e799:	jmpq   e613 <F_0_714+0x2f41>
    e79e:	mov    %rcx,%r15
    e7a1:	lea    0x38(%rdx),%ecx
    e7a4:	mov    %rdi,%r8
    e7a7:	shr    %cl,%r8
    e7aa:	mov    %r8b,0x0(%r13)
    e7ae:	lea    0x1(%r13),%rcx
    e7b2:	cmp    $0xff,%r8b
    e7b6:	je     ea1d <F_0_714+0x334b>
    e7bc:	mov    %rcx,%r8
    e7bf:	jmpq   ea24 <F_0_714+0x3352>
    e7c4:	movb   $0x0,(%rcx)
    e7c7:	lea    0x2(%r13),%r8
    e7cb:	lea    0x30(%rdx),%ecx
    e7ce:	mov    %rdi,%r13
    e7d1:	shr    %cl,%r13
    e7d4:	mov    %r13b,(%r8)
    e7d7:	lea    0x1(%r8),%rcx
    e7db:	cmp    $0xff,%r13b
    e7df:	je     ea46 <F_0_714+0x3374>
    e7e5:	mov    %rcx,%r8
    e7e8:	jmpq   ea4d <F_0_714+0x337b>
    e7ed:	movb   $0x0,(%rcx)
    e7f0:	add    $0x2,%r8
    e7f4:	lea    0x28(%rdx),%ecx
    e7f7:	mov    %rdi,%r13
    e7fa:	shr    %cl,%r13
    e7fd:	mov    %r13b,(%r8)
    e800:	lea    0x1(%r8),%rcx
    e804:	cmp    $0xff,%r13b
    e808:	je     ea6f <F_0_714+0x339d>
    e80e:	mov    %rcx,%r8
    e811:	jmpq   ea76 <F_0_714+0x33a4>
    e816:	movb   $0x0,(%rcx)
    e819:	add    $0x2,%r8
    e81d:	lea    -0x20(%rdx),%ecx
    e820:	mov    %rdi,%r13
    e823:	shr    %cl,%r13
    e826:	mov    %rcx,%rdx
    e829:	mov    %r13b,(%r8)
    e82c:	lea    0x1(%r8),%rcx
    e830:	cmp    $0xff,%r13b
    e834:	je     eaa8 <F_0_714+0x33d6>
    e83a:	mov    %rcx,%r13
    e83d:	mov    %r15,%rcx
    e840:	mov    %rdi,%r15
    e843:	mov    -0x120(%rbp),%r8
    e84a:	jmpq   de00 <F_0_714+0x272e>
    e84f:	movb   $0x0,(%rcx)
    e852:	lea    0x2(%r8),%r13
    e856:	mov    %r15,%rcx
    e859:	mov    %rdi,%r15
    e85c:	mov    -0x120(%rbp),%r8
    e863:	jmpq   dbaa <F_0_714+0x24d8>
    e868:	add    $0x1,%r11d
    e86c:	movswq 0x2c(%rsi),%r10
    e871:	test   %r10w,%r10w
    e875:	je     eac1 <F_0_714+0x33ef>
    e87b:	mov    %r10,%r14
    e87e:	sar    $0x1f,%r14d
    e882:	mov    %r14,-0x90(%rbp)
    e889:	mov    %r14,%rcx
    e88c:	xor    %r10d,%ecx
    e88f:	sub    %r14d,%ecx
    e892:	movslq %ecx,%rcx
    e895:	movzbl (%rcx,%rax,1),%ecx
    e899:	mov    %rcx,-0x128(%rbp)
    e8a0:	jmpq   ebd6 <F_0_714+0x3504>
    e8a5:	cmp    $0x2f,%edx
    e8a8:	jle    e96b <F_0_714+0x3299>
    e8ae:	lea    0x38(%rdx),%ecx
    e8b1:	mov    %rdi,%r15
    e8b4:	shr    %cl,%r15
    e8b7:	mov    %r15b,0x0(%r13)
    e8bb:	lea    0x1(%r13),%r14
    e8bf:	cmp    $0xff,%r15b
    e8c3:	jne    e8cd <F_0_714+0x31fb>
    e8c5:	movb   $0x0,(%r14)
    e8c9:	lea    0x2(%r13),%r14
    e8cd:	lea    0x30(%rdx),%ecx
    e8d0:	mov    %rdi,%r15
    e8d3:	shr    %cl,%r15
    e8d6:	mov    %r15b,(%r14)
    e8d9:	lea    0x1(%r14),%r13
    e8dd:	cmp    $0xff,%r15b
    e8e1:	jne    e8ec <F_0_714+0x321a>
    e8e3:	movb   $0x0,0x0(%r13)
    e8e8:	lea    0x2(%r14),%r13
    e8ec:	lea    0x28(%rdx),%ecx
    e8ef:	mov    %rdi,%r15
    e8f2:	shr    %cl,%r15
    e8f5:	mov    %r15b,0x0(%r13)
    e8f9:	lea    0x1(%r13),%r14
    e8fd:	cmp    $0xff,%r15b
    e901:	jne    e90b <F_0_714+0x3239>
    e903:	movb   $0x0,(%r14)
    e907:	lea    0x2(%r13),%r14
    e90b:	lea    0x20(%rdx),%ecx
    e90e:	mov    %rdi,%r15
    e911:	shr    %cl,%r15
    e914:	mov    %r15b,(%r14)
    e917:	lea    0x1(%r14),%r13
    e91b:	cmp    $0xff,%r15b
    e91f:	jne    e92a <F_0_714+0x3258>
    e921:	movb   $0x0,0x0(%r13)
    e926:	lea    0x2(%r14),%r13
    e92a:	lea    0x18(%rdx),%ecx
    e92d:	mov    %rdi,%r15
    e930:	shr    %cl,%r15
    e933:	mov    %r15b,0x0(%r13)
    e937:	lea    0x1(%r13),%r14
    e93b:	cmp    $0xff,%r15b
    e93f:	jne    e949 <F_0_714+0x3277>
    e941:	movb   $0x0,(%r14)
    e945:	lea    0x2(%r13),%r14
    e949:	lea    -0x30(%rdx),%ecx
    e94c:	mov    %rdi,%r15
    e94f:	shr    %cl,%r15
    e952:	mov    %rcx,%rdx
    e955:	mov    %r15b,(%r14)
    e958:	lea    0x1(%r14),%r13
    e95c:	cmp    $0xff,%r15b
    e960:	jne    e96b <F_0_714+0x3299>
    e962:	movb   $0x0,0x0(%r13)
    e967:	lea    0x2(%r14),%r13
    e96b:	mov    %rbx,%rcx
    e96e:	shl    %cl,%rdi
    e971:	mov    %rcx,%rbx
    e974:	or     %r9,%rdi
    e977:	add    %ebx,%edx
    e979:	add    $0xfffffff0,%r11d
    e97d:	cmp    $0xf,%r11d
    e981:	jg     e8a5 <F_0_714+0x31d3>
    e987:	shl    $0x4,%r11d
    e98b:	mov    -0x128(%rbp),%rcx
    e992:	add    %ecx,%r11d
    e995:	movslq %r11d,%r11
    e998:	movslq (%r8,%r11,4),%r14
    e99c:	movsbq 0x400(%r8,%r11,1),%r11
    e9a5:	cmp    $0x1f,%edx
    e9a8:	jg     ec50 <F_0_714+0x357e>
    e9ae:	mov    %rdi,%r15
    e9b1:	shl    %cl,%r12
    e9b4:	lea    -0x1(%r12),%edi
    e9b9:	mov    -0x90(%rbp),%r12
    e9c0:	add    %r12d,%r10d
    e9c3:	and    %r10d,%edi
    e9c6:	movslq %edi,%rdi
    e9c9:	mov    %r11,%r10
    e9cc:	mov    %rcx,%r11
    e9cf:	mov    %r10,%rcx
    e9d2:	shl    %cl,%r15
    e9d5:	mov    %rcx,%r10
    e9d8:	or     %r15,%r14
    e9db:	mov    %r11,%rcx
    e9de:	shl    %cl,%r14
    e9e1:	or     %r14,%rdi
    e9e4:	add    %r10d,%edx
    e9e7:	add    %ecx,%edx
    e9e9:	mov    $0x1,%r12d
    e9ef:	xor    %r11d,%r11d
    e9f2:	jmpq   e86c <F_0_714+0x319a>
    e9f7:	mov    %rcx,%r15
    e9fa:	lea    0x38(%rdx),%ecx
    e9fd:	mov    %rdi,%r8
    ea00:	shr    %cl,%r8
    ea03:	mov    %r8b,0x0(%r13)
    ea07:	lea    0x1(%r13),%rcx
    ea0b:	cmp    $0xff,%r8b
    ea0f:	je     ec76 <F_0_714+0x35a4>
    ea15:	mov    %rcx,%r8
    ea18:	jmpq   ec7d <F_0_714+0x35ab>
    ea1d:	movb   $0x0,(%rcx)
    ea20:	lea    0x2(%r13),%r8
    ea24:	lea    0x30(%rdx),%ecx
    ea27:	mov    %rdi,%r13
    ea2a:	shr    %cl,%r13
    ea2d:	mov    %r13b,(%r8)
    ea30:	lea    0x1(%r8),%rcx
    ea34:	cmp    $0xff,%r13b
    ea38:	je     ec9f <F_0_714+0x35cd>
    ea3e:	mov    %rcx,%r8
    ea41:	jmpq   eca6 <F_0_714+0x35d4>
    ea46:	movb   $0x0,(%rcx)
    ea49:	add    $0x2,%r8
    ea4d:	lea    0x28(%rdx),%ecx
    ea50:	mov    %rdi,%r13
    ea53:	shr    %cl,%r13
    ea56:	mov    %r13b,(%r8)
    ea59:	lea    0x1(%r8),%rcx
    ea5d:	cmp    $0xff,%r13b
    ea61:	je     ecc8 <F_0_714+0x35f6>
    ea67:	mov    %rcx,%r8
    ea6a:	jmpq   eccf <F_0_714+0x35fd>
    ea6f:	movb   $0x0,(%rcx)
    ea72:	add    $0x2,%r8
    ea76:	lea    -0x20(%rdx),%ecx
    ea79:	mov    %rdi,%r13
    ea7c:	shr    %cl,%r13
    ea7f:	mov    %rcx,%rdx
    ea82:	mov    %r13b,(%r8)
    ea85:	lea    0x1(%r8),%rcx
    ea89:	cmp    $0xff,%r13b
    ea8d:	je     ed01 <F_0_714+0x362f>
    ea93:	mov    %rcx,%r13
    ea96:	mov    %r15,%rcx
    ea99:	mov    %rdi,%r15
    ea9c:	mov    -0x120(%rbp),%r8
    eaa3:	jmpq   e056 <F_0_714+0x2984>
    eaa8:	movb   $0x0,(%rcx)
    eaab:	lea    0x2(%r8),%r13
    eaaf:	mov    %r15,%rcx
    eab2:	mov    %rdi,%r15
    eab5:	mov    -0x120(%rbp),%r8
    eabc:	jmpq   de00 <F_0_714+0x272e>
    eac1:	add    $0x1,%r11d
    eac5:	movswq 0x1e(%rsi),%r10
    eaca:	test   %r10w,%r10w
    eace:	je     ed1a <F_0_714+0x3648>
    ead4:	mov    %r10,%r14
    ead7:	sar    $0x1f,%r14d
    eadb:	mov    %r14,-0x88(%rbp)
    eae2:	mov    %r14,%rcx
    eae5:	xor    %r10d,%ecx
    eae8:	sub    %r14d,%ecx
    eaeb:	movslq %ecx,%rcx
    eaee:	movzbl (%rcx,%rax,1),%ecx
    eaf2:	mov    %rcx,-0x128(%rbp)
    eaf9:	jmpq   ee2f <F_0_714+0x375d>
    eafe:	cmp    $0x2f,%edx
    eb01:	jle    ebc4 <F_0_714+0x34f2>
    eb07:	lea    0x38(%rdx),%ecx
    eb0a:	mov    %rdi,%r15
    eb0d:	shr    %cl,%r15
    eb10:	mov    %r15b,0x0(%r13)
    eb14:	lea    0x1(%r13),%r14
    eb18:	cmp    $0xff,%r15b
    eb1c:	jne    eb26 <F_0_714+0x3454>
    eb1e:	movb   $0x0,(%r14)
    eb22:	lea    0x2(%r13),%r14
    eb26:	lea    0x30(%rdx),%ecx
    eb29:	mov    %rdi,%r15
    eb2c:	shr    %cl,%r15
    eb2f:	mov    %r15b,(%r14)
    eb32:	lea    0x1(%r14),%r13
    eb36:	cmp    $0xff,%r15b
    eb3a:	jne    eb45 <F_0_714+0x3473>
    eb3c:	movb   $0x0,0x0(%r13)
    eb41:	lea    0x2(%r14),%r13
    eb45:	lea    0x28(%rdx),%ecx
    eb48:	mov    %rdi,%r15
    eb4b:	shr    %cl,%r15
    eb4e:	mov    %r15b,0x0(%r13)
    eb52:	lea    0x1(%r13),%r14
    eb56:	cmp    $0xff,%r15b
    eb5a:	jne    eb64 <F_0_714+0x3492>
    eb5c:	movb   $0x0,(%r14)
    eb60:	lea    0x2(%r13),%r14
    eb64:	lea    0x20(%rdx),%ecx
    eb67:	mov    %rdi,%r15
    eb6a:	shr    %cl,%r15
    eb6d:	mov    %r15b,(%r14)
    eb70:	lea    0x1(%r14),%r13
    eb74:	cmp    $0xff,%r15b
    eb78:	jne    eb83 <F_0_714+0x34b1>
    eb7a:	movb   $0x0,0x0(%r13)
    eb7f:	lea    0x2(%r14),%r13
    eb83:	lea    0x18(%rdx),%ecx
    eb86:	mov    %rdi,%r15
    eb89:	shr    %cl,%r15
    eb8c:	mov    %r15b,0x0(%r13)
    eb90:	lea    0x1(%r13),%r14
    eb94:	cmp    $0xff,%r15b
    eb98:	jne    eba2 <F_0_714+0x34d0>
    eb9a:	movb   $0x0,(%r14)
    eb9e:	lea    0x2(%r13),%r14
    eba2:	lea    -0x30(%rdx),%ecx
    eba5:	mov    %rdi,%r15
    eba8:	shr    %cl,%r15
    ebab:	mov    %rcx,%rdx
    ebae:	mov    %r15b,(%r14)
    ebb1:	lea    0x1(%r14),%r13
    ebb5:	cmp    $0xff,%r15b
    ebb9:	jne    ebc4 <F_0_714+0x34f2>
    ebbb:	movb   $0x0,0x0(%r13)
    ebc0:	lea    0x2(%r14),%r13
    ebc4:	mov    %rbx,%rcx
    ebc7:	shl    %cl,%rdi
    ebca:	mov    %rcx,%rbx
    ebcd:	or     %r9,%rdi
    ebd0:	add    %ebx,%edx
    ebd2:	add    $0xfffffff0,%r11d
    ebd6:	cmp    $0xf,%r11d
    ebda:	jg     eafe <F_0_714+0x342c>
    ebe0:	shl    $0x4,%r11d
    ebe4:	mov    -0x128(%rbp),%rcx
    ebeb:	add    %ecx,%r11d
    ebee:	movslq %r11d,%r11
    ebf1:	movslq (%r8,%r11,4),%r14
    ebf5:	movsbq 0x400(%r8,%r11,1),%r11
    ebfe:	cmp    $0x1f,%edx
    ec01:	jg     eea6 <F_0_714+0x37d4>
    ec07:	mov    %rdi,%r15
    ec0a:	shl    %cl,%r12
    ec0d:	lea    -0x1(%r12),%edi
    ec12:	mov    -0x90(%rbp),%r12
    ec19:	add    %r12d,%r10d
    ec1c:	and    %r10d,%edi
    ec1f:	movslq %edi,%rdi
    ec22:	mov    %r11,%r10
    ec25:	mov    %rcx,%r11
    ec28:	mov    %r10,%rcx
    ec2b:	shl    %cl,%r15
    ec2e:	mov    %rcx,%r10
    ec31:	or     %r15,%r14
    ec34:	mov    %r11,%rcx
    ec37:	shl    %cl,%r14
    ec3a:	or     %r14,%rdi
    ec3d:	add    %r10d,%edx
    ec40:	add    %ecx,%edx
    ec42:	mov    $0x1,%r12d
    ec48:	xor    %r11d,%r11d
    ec4b:	jmpq   eac5 <F_0_714+0x33f3>
    ec50:	mov    %rcx,%r15
    ec53:	lea    0x38(%rdx),%ecx
    ec56:	mov    %rdi,%r8
    ec59:	shr    %cl,%r8
    ec5c:	mov    %r8b,0x0(%r13)
    ec60:	lea    0x1(%r13),%rcx
    ec64:	cmp    $0xff,%r8b
    ec68:	je     eecc <F_0_714+0x37fa>
    ec6e:	mov    %rcx,%r8
    ec71:	jmpq   eed3 <F_0_714+0x3801>
    ec76:	movb   $0x0,(%rcx)
    ec79:	lea    0x2(%r13),%r8
    ec7d:	lea    0x30(%rdx),%ecx
    ec80:	mov    %rdi,%r13
    ec83:	shr    %cl,%r13
    ec86:	mov    %r13b,(%r8)
    ec89:	lea    0x1(%r8),%rcx
    ec8d:	cmp    $0xff,%r13b
    ec91:	je     eef5 <F_0_714+0x3823>
    ec97:	mov    %rcx,%r8
    ec9a:	jmpq   eefc <F_0_714+0x382a>
    ec9f:	movb   $0x0,(%rcx)
    eca2:	add    $0x2,%r8
    eca6:	lea    0x28(%rdx),%ecx
    eca9:	mov    %rdi,%r13
    ecac:	shr    %cl,%r13
    ecaf:	mov    %r13b,(%r8)
    ecb2:	lea    0x1(%r8),%rcx
    ecb6:	cmp    $0xff,%r13b
    ecba:	je     ef1e <F_0_714+0x384c>
    ecc0:	mov    %rcx,%r8
    ecc3:	jmpq   ef25 <F_0_714+0x3853>
    ecc8:	movb   $0x0,(%rcx)
    eccb:	add    $0x2,%r8
    eccf:	lea    -0x20(%rdx),%ecx
    ecd2:	mov    %rdi,%r13
    ecd5:	shr    %cl,%r13
    ecd8:	mov    %rcx,%rdx
    ecdb:	mov    %r13b,(%r8)
    ecde:	lea    0x1(%r8),%rcx
    ece2:	cmp    $0xff,%r13b
    ece6:	je     ef57 <F_0_714+0x3885>
    ecec:	mov    %rcx,%r13
    ecef:	mov    %r15,%rcx
    ecf2:	mov    %rdi,%r15
    ecf5:	mov    -0x120(%rbp),%r8
    ecfc:	jmpq   e2ac <F_0_714+0x2bda>
    ed01:	movb   $0x0,(%rcx)
    ed04:	lea    0x2(%r8),%r13
    ed08:	mov    %r15,%rcx
    ed0b:	mov    %rdi,%r15
    ed0e:	mov    -0x120(%rbp),%r8
    ed15:	jmpq   e056 <F_0_714+0x2984>
    ed1a:	add    $0x1,%r11d
    ed1e:	movswq 0x2e(%rsi),%r10
    ed23:	test   %r10w,%r10w
    ed27:	je     ef70 <F_0_714+0x389e>
    ed2d:	mov    %r10,%r14
    ed30:	sar    $0x1f,%r14d
    ed34:	mov    %r14,-0x88(%rbp)
    ed3b:	mov    %r14,%rcx
    ed3e:	xor    %r10d,%ecx
    ed41:	sub    %r14d,%ecx
    ed44:	movslq %ecx,%rcx
    ed47:	movzbl (%rcx,%rax,1),%ecx
    ed4b:	mov    %rcx,-0x128(%rbp)
    ed52:	jmpq   f082 <F_0_714+0x39b0>
    ed57:	cmp    $0x2f,%edx
    ed5a:	jle    ee1d <F_0_714+0x374b>
    ed60:	lea    0x38(%rdx),%ecx
    ed63:	mov    %rdi,%r15
    ed66:	shr    %cl,%r15
    ed69:	mov    %r15b,0x0(%r13)
    ed6d:	lea    0x1(%r13),%r14
    ed71:	cmp    $0xff,%r15b
    ed75:	jne    ed7f <F_0_714+0x36ad>
    ed77:	movb   $0x0,(%r14)
    ed7b:	lea    0x2(%r13),%r14
    ed7f:	lea    0x30(%rdx),%ecx
    ed82:	mov    %rdi,%r15
    ed85:	shr    %cl,%r15
    ed88:	mov    %r15b,(%r14)
    ed8b:	lea    0x1(%r14),%r13
    ed8f:	cmp    $0xff,%r15b
    ed93:	jne    ed9e <F_0_714+0x36cc>
    ed95:	movb   $0x0,0x0(%r13)
    ed9a:	lea    0x2(%r14),%r13
    ed9e:	lea    0x28(%rdx),%ecx
    eda1:	mov    %rdi,%r15
    eda4:	shr    %cl,%r15
    eda7:	mov    %r15b,0x0(%r13)
    edab:	lea    0x1(%r13),%r14
    edaf:	cmp    $0xff,%r15b
    edb3:	jne    edbd <F_0_714+0x36eb>
    edb5:	movb   $0x0,(%r14)
    edb9:	lea    0x2(%r13),%r14
    edbd:	lea    0x20(%rdx),%ecx
    edc0:	mov    %rdi,%r15
    edc3:	shr    %cl,%r15
    edc6:	mov    %r15b,(%r14)
    edc9:	lea    0x1(%r14),%r13
    edcd:	cmp    $0xff,%r15b
    edd1:	jne    eddc <F_0_714+0x370a>
    edd3:	movb   $0x0,0x0(%r13)
    edd8:	lea    0x2(%r14),%r13
    eddc:	lea    0x18(%rdx),%ecx
    eddf:	mov    %rdi,%r15
    ede2:	shr    %cl,%r15
    ede5:	mov    %r15b,0x0(%r13)
    ede9:	lea    0x1(%r13),%r14
    eded:	cmp    $0xff,%r15b
    edf1:	jne    edfb <F_0_714+0x3729>
    edf3:	movb   $0x0,(%r14)
    edf7:	lea    0x2(%r13),%r14
    edfb:	lea    -0x30(%rdx),%ecx
    edfe:	mov    %rdi,%r15
    ee01:	shr    %cl,%r15
    ee04:	mov    %rcx,%rdx
    ee07:	mov    %r15b,(%r14)
    ee0a:	lea    0x1(%r14),%r13
    ee0e:	cmp    $0xff,%r15b
    ee12:	jne    ee1d <F_0_714+0x374b>
    ee14:	movb   $0x0,0x0(%r13)
    ee19:	lea    0x2(%r14),%r13
    ee1d:	mov    %rbx,%rcx
    ee20:	shl    %cl,%rdi
    ee23:	mov    %rcx,%rbx
    ee26:	or     %r9,%rdi
    ee29:	add    %ebx,%edx
    ee2b:	add    $0xfffffff0,%r11d
    ee2f:	cmp    $0xf,%r11d
    ee33:	jg     ed57 <F_0_714+0x3685>
    ee39:	shl    $0x4,%r11d
    ee3d:	mov    -0x128(%rbp),%rcx
    ee44:	add    %ecx,%r11d
    ee47:	movslq %r11d,%r14
    ee4a:	movslq (%r8,%r14,4),%r11
    ee4e:	movsbq 0x400(%r8,%r14,1),%r14
    ee57:	cmp    $0x1f,%edx
    ee5a:	jg     f0f9 <F_0_714+0x3a27>
    ee60:	mov    %rdi,%r15
    ee63:	shl    %cl,%r12
    ee66:	lea    -0x1(%r12),%edi
    ee6b:	mov    -0x88(%rbp),%r12
    ee72:	add    %r12d,%r10d
    ee75:	and    %r10d,%edi
    ee78:	movslq %edi,%rdi
    ee7b:	mov    %rcx,%r12
    ee7e:	mov    %r14,%rcx
    ee81:	shl    %cl,%r15
    ee84:	mov    %rcx,%r10
    ee87:	or     %r15,%r11
    ee8a:	mov    %r12,%rcx
    ee8d:	shl    %cl,%r11
    ee90:	or     %r11,%rdi
    ee93:	add    %r10d,%edx
    ee96:	add    %ecx,%edx
    ee98:	mov    $0x1,%r12d
    ee9e:	xor    %r11d,%r11d
    eea1:	jmpq   ed1e <F_0_714+0x364c>
    eea6:	mov    %rcx,%r15
    eea9:	lea    0x38(%rdx),%ecx
    eeac:	mov    %rdi,%r8
    eeaf:	shr    %cl,%r8
    eeb2:	mov    %r8b,0x0(%r13)
    eeb6:	lea    0x1(%r13),%rcx
    eeba:	cmp    $0xff,%r8b
    eebe:	je     f11f <F_0_714+0x3a4d>
    eec4:	mov    %rcx,%r8
    eec7:	jmpq   f126 <F_0_714+0x3a54>
    eecc:	movb   $0x0,(%rcx)
    eecf:	lea    0x2(%r13),%r8
    eed3:	lea    0x30(%rdx),%ecx
    eed6:	mov    %rdi,%r13
    eed9:	shr    %cl,%r13
    eedc:	mov    %r13b,(%r8)
    eedf:	lea    0x1(%r8),%rcx
    eee3:	cmp    $0xff,%r13b
    eee7:	je     f148 <F_0_714+0x3a76>
    eeed:	mov    %rcx,%r8
    eef0:	jmpq   f14f <F_0_714+0x3a7d>
    eef5:	movb   $0x0,(%rcx)
    eef8:	add    $0x2,%r8
    eefc:	lea    0x28(%rdx),%ecx
    eeff:	mov    %rdi,%r13
    ef02:	shr    %cl,%r13
    ef05:	mov    %r13b,(%r8)
    ef08:	lea    0x1(%r8),%rcx
    ef0c:	cmp    $0xff,%r13b
    ef10:	je     f171 <F_0_714+0x3a9f>
    ef16:	mov    %rcx,%r8
    ef19:	jmpq   f178 <F_0_714+0x3aa6>
    ef1e:	movb   $0x0,(%rcx)
    ef21:	add    $0x2,%r8
    ef25:	lea    -0x20(%rdx),%ecx
    ef28:	mov    %rdi,%r13
    ef2b:	shr    %cl,%r13
    ef2e:	mov    %rcx,%rdx
    ef31:	mov    %r13b,(%r8)
    ef34:	lea    0x1(%r8),%rcx
    ef38:	cmp    $0xff,%r13b
    ef3c:	je     f1aa <F_0_714+0x3ad8>
    ef42:	mov    %rcx,%r13
    ef45:	mov    %r15,%rcx
    ef48:	mov    %rdi,%r15
    ef4b:	mov    -0x120(%rbp),%r8
    ef52:	jmpq   e502 <F_0_714+0x2e30>
    ef57:	movb   $0x0,(%rcx)
    ef5a:	lea    0x2(%r8),%r13
    ef5e:	mov    %r15,%rcx
    ef61:	mov    %rdi,%r15
    ef64:	mov    -0x120(%rbp),%r8
    ef6b:	jmpq   e2ac <F_0_714+0x2bda>
    ef70:	add    $0x1,%r11d
    ef74:	movswq 0x3c(%rsi),%r10
    ef79:	test   %r10w,%r10w
    ef7d:	je     f1c3 <F_0_714+0x3af1>
    ef83:	mov    %r10,%r14
    ef86:	sar    $0x1f,%r14d
    ef8a:	mov    %r14,-0x80(%rbp)
    ef8e:	mov    %r14,%rcx
    ef91:	xor    %r10d,%ecx
    ef94:	sub    %r14d,%ecx
    ef97:	movslq %ecx,%rcx
    ef9a:	movzbl (%rcx,%rax,1),%ecx
    ef9e:	mov    %rcx,-0x128(%rbp)
    efa5:	jmpq   f2d5 <F_0_714+0x3c03>
    efaa:	cmp    $0x2f,%edx
    efad:	jle    f070 <F_0_714+0x399e>
    efb3:	lea    0x38(%rdx),%ecx
    efb6:	mov    %rdi,%r15
    efb9:	shr    %cl,%r15
    efbc:	mov    %r15b,0x0(%r13)
    efc0:	lea    0x1(%r13),%r14
    efc4:	cmp    $0xff,%r15b
    efc8:	jne    efd2 <F_0_714+0x3900>
    efca:	movb   $0x0,(%r14)
    efce:	lea    0x2(%r13),%r14
    efd2:	lea    0x30(%rdx),%ecx
    efd5:	mov    %rdi,%r15
    efd8:	shr    %cl,%r15
    efdb:	mov    %r15b,(%r14)
    efde:	lea    0x1(%r14),%r13
    efe2:	cmp    $0xff,%r15b
    efe6:	jne    eff1 <F_0_714+0x391f>
    efe8:	movb   $0x0,0x0(%r13)
    efed:	lea    0x2(%r14),%r13
    eff1:	lea    0x28(%rdx),%ecx
    eff4:	mov    %rdi,%r15
    eff7:	shr    %cl,%r15
    effa:	mov    %r15b,0x0(%r13)
    effe:	lea    0x1(%r13),%r14
    f002:	cmp    $0xff,%r15b
    f006:	jne    f010 <F_0_714+0x393e>
    f008:	movb   $0x0,(%r14)
    f00c:	lea    0x2(%r13),%r14
    f010:	lea    0x20(%rdx),%ecx
    f013:	mov    %rdi,%r15
    f016:	shr    %cl,%r15
    f019:	mov    %r15b,(%r14)
    f01c:	lea    0x1(%r14),%r13
    f020:	cmp    $0xff,%r15b
    f024:	jne    f02f <F_0_714+0x395d>
    f026:	movb   $0x0,0x0(%r13)
    f02b:	lea    0x2(%r14),%r13
    f02f:	lea    0x18(%rdx),%ecx
    f032:	mov    %rdi,%r15
    f035:	shr    %cl,%r15
    f038:	mov    %r15b,0x0(%r13)
    f03c:	lea    0x1(%r13),%r14
    f040:	cmp    $0xff,%r15b
    f044:	jne    f04e <F_0_714+0x397c>
    f046:	movb   $0x0,(%r14)
    f04a:	lea    0x2(%r13),%r14
    f04e:	lea    -0x30(%rdx),%ecx
    f051:	mov    %rdi,%r15
    f054:	shr    %cl,%r15
    f057:	mov    %rcx,%rdx
    f05a:	mov    %r15b,(%r14)
    f05d:	lea    0x1(%r14),%r13
    f061:	cmp    $0xff,%r15b
    f065:	jne    f070 <F_0_714+0x399e>
    f067:	movb   $0x0,0x0(%r13)
    f06c:	lea    0x2(%r14),%r13
    f070:	mov    %rbx,%rcx
    f073:	shl    %cl,%rdi
    f076:	mov    %rcx,%rbx
    f079:	or     %r9,%rdi
    f07c:	add    %ebx,%edx
    f07e:	add    $0xfffffff0,%r11d
    f082:	cmp    $0xf,%r11d
    f086:	jg     efaa <F_0_714+0x38d8>
    f08c:	shl    $0x4,%r11d
    f090:	mov    -0x128(%rbp),%rcx
    f097:	add    %ecx,%r11d
    f09a:	movslq %r11d,%r14
    f09d:	movslq (%r8,%r14,4),%r11
    f0a1:	movsbq 0x400(%r8,%r14,1),%r14
    f0aa:	cmp    $0x1f,%edx
    f0ad:	jg     f349 <F_0_714+0x3c77>
    f0b3:	mov    %rdi,%r15
    f0b6:	shl    %cl,%r12
    f0b9:	lea    -0x1(%r12),%edi
    f0be:	mov    -0x88(%rbp),%r12
    f0c5:	add    %r12d,%r10d
    f0c8:	and    %r10d,%edi
    f0cb:	movslq %edi,%rdi
    f0ce:	mov    %rcx,%r12
    f0d1:	mov    %r14,%rcx
    f0d4:	shl    %cl,%r15
    f0d7:	mov    %rcx,%r10
    f0da:	or     %r15,%r11
    f0dd:	mov    %r12,%rcx
    f0e0:	shl    %cl,%r11
    f0e3:	or     %r11,%rdi
    f0e6:	add    %r10d,%edx
    f0e9:	add    %ecx,%edx
    f0eb:	mov    $0x1,%r12d
    f0f1:	xor    %r11d,%r11d
    f0f4:	jmpq   ef74 <F_0_714+0x38a2>
    f0f9:	mov    %rcx,%r15
    f0fc:	lea    0x38(%rdx),%ecx
    f0ff:	mov    %rdi,%r8
    f102:	shr    %cl,%r8
    f105:	mov    %r8b,0x0(%r13)
    f109:	lea    0x1(%r13),%rcx
    f10d:	cmp    $0xff,%r8b
    f111:	je     f36f <F_0_714+0x3c9d>
    f117:	mov    %rcx,%r8
    f11a:	jmpq   f376 <F_0_714+0x3ca4>
    f11f:	movb   $0x0,(%rcx)
    f122:	lea    0x2(%r13),%r8
    f126:	lea    0x30(%rdx),%ecx
    f129:	mov    %rdi,%r13
    f12c:	shr    %cl,%r13
    f12f:	mov    %r13b,(%r8)
    f132:	lea    0x1(%r8),%rcx
    f136:	cmp    $0xff,%r13b
    f13a:	je     f398 <F_0_714+0x3cc6>
    f140:	mov    %rcx,%r8
    f143:	jmpq   f39f <F_0_714+0x3ccd>
    f148:	movb   $0x0,(%rcx)
    f14b:	add    $0x2,%r8
    f14f:	lea    0x28(%rdx),%ecx
    f152:	mov    %rdi,%r13
    f155:	shr    %cl,%r13
    f158:	mov    %r13b,(%r8)
    f15b:	lea    0x1(%r8),%rcx
    f15f:	cmp    $0xff,%r13b
    f163:	je     f3c1 <F_0_714+0x3cef>
    f169:	mov    %rcx,%r8
    f16c:	jmpq   f3c8 <F_0_714+0x3cf6>
    f171:	movb   $0x0,(%rcx)
    f174:	add    $0x2,%r8
    f178:	lea    -0x20(%rdx),%ecx
    f17b:	mov    %rdi,%r13
    f17e:	shr    %cl,%r13
    f181:	mov    %rcx,%rdx
    f184:	mov    %r13b,(%r8)
    f187:	lea    0x1(%r8),%rcx
    f18b:	cmp    $0xff,%r13b
    f18f:	je     f3fa <F_0_714+0x3d28>
    f195:	mov    %rcx,%r13
    f198:	mov    %r15,%rcx
    f19b:	mov    %rdi,%r15
    f19e:	mov    -0x120(%rbp),%r8
    f1a5:	jmpq   e758 <F_0_714+0x3086>
    f1aa:	movb   $0x0,(%rcx)
    f1ad:	lea    0x2(%r8),%r13
    f1b1:	mov    %r15,%rcx
    f1b4:	mov    %rdi,%r15
    f1b7:	mov    -0x120(%rbp),%r8
    f1be:	jmpq   e502 <F_0_714+0x2e30>
    f1c3:	add    $0x1,%r11d
    f1c7:	movswq 0x4a(%rsi),%r10
    f1cc:	test   %r10w,%r10w
    f1d0:	je     f413 <F_0_714+0x3d41>
    f1d6:	mov    %r10,%r14
    f1d9:	sar    $0x1f,%r14d
    f1dd:	mov    %r14,-0x80(%rbp)
    f1e1:	mov    %r14,%rcx
    f1e4:	xor    %r10d,%ecx
    f1e7:	sub    %r14d,%ecx
    f1ea:	movslq %ecx,%rcx
    f1ed:	movzbl (%rcx,%rax,1),%ecx
    f1f1:	mov    %rcx,-0x128(%rbp)
    f1f8:	jmpq   f525 <F_0_714+0x3e53>
    f1fd:	cmp    $0x2f,%edx
    f200:	jle    f2c3 <F_0_714+0x3bf1>
    f206:	lea    0x38(%rdx),%ecx
    f209:	mov    %rdi,%r15
    f20c:	shr    %cl,%r15
    f20f:	mov    %r15b,0x0(%r13)
    f213:	lea    0x1(%r13),%r14
    f217:	cmp    $0xff,%r15b
    f21b:	jne    f225 <F_0_714+0x3b53>
    f21d:	movb   $0x0,(%r14)
    f221:	lea    0x2(%r13),%r14
    f225:	lea    0x30(%rdx),%ecx
    f228:	mov    %rdi,%r15
    f22b:	shr    %cl,%r15
    f22e:	mov    %r15b,(%r14)
    f231:	lea    0x1(%r14),%r13
    f235:	cmp    $0xff,%r15b
    f239:	jne    f244 <F_0_714+0x3b72>
    f23b:	movb   $0x0,0x0(%r13)
    f240:	lea    0x2(%r14),%r13
    f244:	lea    0x28(%rdx),%ecx
    f247:	mov    %rdi,%r15
    f24a:	shr    %cl,%r15
    f24d:	mov    %r15b,0x0(%r13)
    f251:	lea    0x1(%r13),%r14
    f255:	cmp    $0xff,%r15b
    f259:	jne    f263 <F_0_714+0x3b91>
    f25b:	movb   $0x0,(%r14)
    f25f:	lea    0x2(%r13),%r14
    f263:	lea    0x20(%rdx),%ecx
    f266:	mov    %rdi,%r15
    f269:	shr    %cl,%r15
    f26c:	mov    %r15b,(%r14)
    f26f:	lea    0x1(%r14),%r13
    f273:	cmp    $0xff,%r15b
    f277:	jne    f282 <F_0_714+0x3bb0>
    f279:	movb   $0x0,0x0(%r13)
    f27e:	lea    0x2(%r14),%r13
    f282:	lea    0x18(%rdx),%ecx
    f285:	mov    %rdi,%r15
    f288:	shr    %cl,%r15
    f28b:	mov    %r15b,0x0(%r13)
    f28f:	lea    0x1(%r13),%r14
    f293:	cmp    $0xff,%r15b
    f297:	jne    f2a1 <F_0_714+0x3bcf>
    f299:	movb   $0x0,(%r14)
    f29d:	lea    0x2(%r13),%r14
    f2a1:	lea    -0x30(%rdx),%ecx
    f2a4:	mov    %rdi,%r15
    f2a7:	shr    %cl,%r15
    f2aa:	mov    %rcx,%rdx
    f2ad:	mov    %r15b,(%r14)
    f2b0:	lea    0x1(%r14),%r13
    f2b4:	cmp    $0xff,%r15b
    f2b8:	jne    f2c3 <F_0_714+0x3bf1>
    f2ba:	movb   $0x0,0x0(%r13)
    f2bf:	lea    0x2(%r14),%r13
    f2c3:	mov    %rbx,%rcx
    f2c6:	shl    %cl,%rdi
    f2c9:	mov    %rcx,%rbx
    f2cc:	or     %r9,%rdi
    f2cf:	add    %ebx,%edx
    f2d1:	add    $0xfffffff0,%r11d
    f2d5:	cmp    $0xf,%r11d
    f2d9:	jg     f1fd <F_0_714+0x3b2b>
    f2df:	shl    $0x4,%r11d
    f2e3:	mov    -0x128(%rbp),%rcx
    f2ea:	add    %ecx,%r11d
    f2ed:	movslq %r11d,%r14
    f2f0:	movslq (%r8,%r14,4),%r11
    f2f4:	movsbq 0x400(%r8,%r14,1),%r14
    f2fd:	cmp    $0x1f,%edx
    f300:	jg     f599 <F_0_714+0x3ec7>
    f306:	mov    %rdi,%r15
    f309:	shl    %cl,%r12
    f30c:	lea    -0x1(%r12),%edi
    f311:	mov    -0x80(%rbp),%r12
    f315:	add    %r12d,%r10d
    f318:	and    %r10d,%edi
    f31b:	movslq %edi,%rdi
    f31e:	mov    %rcx,%r12
    f321:	mov    %r14,%rcx
    f324:	shl    %cl,%r15
    f327:	mov    %rcx,%r10
    f32a:	or     %r15,%r11
    f32d:	mov    %r12,%rcx
    f330:	shl    %cl,%r11
    f333:	or     %r11,%rdi
    f336:	add    %r10d,%edx
    f339:	add    %ecx,%edx
    f33b:	mov    $0x1,%r12d
    f341:	xor    %r11d,%r11d
    f344:	jmpq   f1c7 <F_0_714+0x3af5>
    f349:	mov    %rcx,%r15
    f34c:	lea    0x38(%rdx),%ecx
    f34f:	mov    %rdi,%r8
    f352:	shr    %cl,%r8
    f355:	mov    %r8b,0x0(%r13)
    f359:	lea    0x1(%r13),%rcx
    f35d:	cmp    $0xff,%r8b
    f361:	je     f5bf <F_0_714+0x3eed>
    f367:	mov    %rcx,%r8
    f36a:	jmpq   f5c6 <F_0_714+0x3ef4>
    f36f:	movb   $0x0,(%rcx)
    f372:	lea    0x2(%r13),%r8
    f376:	lea    0x30(%rdx),%ecx
    f379:	mov    %rdi,%r13
    f37c:	shr    %cl,%r13
    f37f:	mov    %r13b,(%r8)
    f382:	lea    0x1(%r8),%rcx
    f386:	cmp    $0xff,%r13b
    f38a:	je     f5e8 <F_0_714+0x3f16>
    f390:	mov    %rcx,%r8
    f393:	jmpq   f5ef <F_0_714+0x3f1d>
    f398:	movb   $0x0,(%rcx)
    f39b:	add    $0x2,%r8
    f39f:	lea    0x28(%rdx),%ecx
    f3a2:	mov    %rdi,%r13
    f3a5:	shr    %cl,%r13
    f3a8:	mov    %r13b,(%r8)
    f3ab:	lea    0x1(%r8),%rcx
    f3af:	cmp    $0xff,%r13b
    f3b3:	je     f611 <F_0_714+0x3f3f>
    f3b9:	mov    %rcx,%r8
    f3bc:	jmpq   f618 <F_0_714+0x3f46>
    f3c1:	movb   $0x0,(%rcx)
    f3c4:	add    $0x2,%r8
    f3c8:	lea    -0x20(%rdx),%ecx
    f3cb:	mov    %rdi,%r13
    f3ce:	shr    %cl,%r13
    f3d1:	mov    %rcx,%rdx
    f3d4:	mov    %r13b,(%r8)
    f3d7:	lea    0x1(%r8),%rcx
    f3db:	cmp    $0xff,%r13b
    f3df:	je     f64a <F_0_714+0x3f78>
    f3e5:	mov    %rcx,%r13
    f3e8:	mov    %r15,%rcx
    f3eb:	mov    %rdi,%r15
    f3ee:	mov    -0x120(%rbp),%r8
    f3f5:	jmpq   e9b1 <F_0_714+0x32df>
    f3fa:	movb   $0x0,(%rcx)
    f3fd:	lea    0x2(%r8),%r13
    f401:	mov    %r15,%rcx
    f404:	mov    %rdi,%r15
    f407:	mov    -0x120(%rbp),%r8
    f40e:	jmpq   e758 <F_0_714+0x3086>
    f413:	add    $0x1,%r11d
    f417:	movswq 0x58(%rsi),%r10
    f41c:	test   %r10w,%r10w
    f420:	je     f663 <F_0_714+0x3f91>
    f426:	mov    %r10,%r14
    f429:	sar    $0x1f,%r14d
    f42d:	mov    %r14,-0x78(%rbp)
    f431:	mov    %r14,%rcx
    f434:	xor    %r10d,%ecx
    f437:	sub    %r14d,%ecx
    f43a:	movslq %ecx,%rcx
    f43d:	movzbl (%rcx,%rax,1),%ecx
    f441:	mov    %rcx,-0x128(%rbp)
    f448:	jmpq   f775 <F_0_714+0x40a3>
    f44d:	cmp    $0x2f,%edx
    f450:	jle    f513 <F_0_714+0x3e41>
    f456:	lea    0x38(%rdx),%ecx
    f459:	mov    %rdi,%r15
    f45c:	shr    %cl,%r15
    f45f:	mov    %r15b,0x0(%r13)
    f463:	lea    0x1(%r13),%r14
    f467:	cmp    $0xff,%r15b
    f46b:	jne    f475 <F_0_714+0x3da3>
    f46d:	movb   $0x0,(%r14)
    f471:	lea    0x2(%r13),%r14
    f475:	lea    0x30(%rdx),%ecx
    f478:	mov    %rdi,%r15
    f47b:	shr    %cl,%r15
    f47e:	mov    %r15b,(%r14)
    f481:	lea    0x1(%r14),%r13
    f485:	cmp    $0xff,%r15b
    f489:	jne    f494 <F_0_714+0x3dc2>
    f48b:	movb   $0x0,0x0(%r13)
    f490:	lea    0x2(%r14),%r13
    f494:	lea    0x28(%rdx),%ecx
    f497:	mov    %rdi,%r15
    f49a:	shr    %cl,%r15
    f49d:	mov    %r15b,0x0(%r13)
    f4a1:	lea    0x1(%r13),%r14
    f4a5:	cmp    $0xff,%r15b
    f4a9:	jne    f4b3 <F_0_714+0x3de1>
    f4ab:	movb   $0x0,(%r14)
    f4af:	lea    0x2(%r13),%r14
    f4b3:	lea    0x20(%rdx),%ecx
    f4b6:	mov    %rdi,%r15
    f4b9:	shr    %cl,%r15
    f4bc:	mov    %r15b,(%r14)
    f4bf:	lea    0x1(%r14),%r13
    f4c3:	cmp    $0xff,%r15b
    f4c7:	jne    f4d2 <F_0_714+0x3e00>
    f4c9:	movb   $0x0,0x0(%r13)
    f4ce:	lea    0x2(%r14),%r13
    f4d2:	lea    0x18(%rdx),%ecx
    f4d5:	mov    %rdi,%r15
    f4d8:	shr    %cl,%r15
    f4db:	mov    %r15b,0x0(%r13)
    f4df:	lea    0x1(%r13),%r14
    f4e3:	cmp    $0xff,%r15b
    f4e7:	jne    f4f1 <F_0_714+0x3e1f>
    f4e9:	movb   $0x0,(%r14)
    f4ed:	lea    0x2(%r13),%r14
    f4f1:	lea    -0x30(%rdx),%ecx
    f4f4:	mov    %rdi,%r15
    f4f7:	shr    %cl,%r15
    f4fa:	mov    %rcx,%rdx
    f4fd:	mov    %r15b,(%r14)
    f500:	lea    0x1(%r14),%r13
    f504:	cmp    $0xff,%r15b
    f508:	jne    f513 <F_0_714+0x3e41>
    f50a:	movb   $0x0,0x0(%r13)
    f50f:	lea    0x2(%r14),%r13
    f513:	mov    %rbx,%rcx
    f516:	shl    %cl,%rdi
    f519:	mov    %rcx,%rbx
    f51c:	or     %r9,%rdi
    f51f:	add    %ebx,%edx
    f521:	add    $0xfffffff0,%r11d
    f525:	cmp    $0xf,%r11d
    f529:	jg     f44d <F_0_714+0x3d7b>
    f52f:	shl    $0x4,%r11d
    f533:	mov    -0x128(%rbp),%rcx
    f53a:	add    %ecx,%r11d
    f53d:	movslq %r11d,%r14
    f540:	movslq (%r8,%r14,4),%r11
    f544:	movsbq 0x400(%r8,%r14,1),%r14
    f54d:	cmp    $0x1f,%edx
    f550:	jg     f7e9 <F_0_714+0x4117>
    f556:	mov    %rdi,%r15
    f559:	shl    %cl,%r12
    f55c:	lea    -0x1(%r12),%edi
    f561:	mov    -0x80(%rbp),%r12
    f565:	add    %r12d,%r10d
    f568:	and    %r10d,%edi
    f56b:	movslq %edi,%rdi
    f56e:	mov    %rcx,%r12
    f571:	mov    %r14,%rcx
    f574:	shl    %cl,%r15
    f577:	mov    %rcx,%r10
    f57a:	or     %r15,%r11
    f57d:	mov    %r12,%rcx
    f580:	shl    %cl,%r11
    f583:	or     %r11,%rdi
    f586:	add    %r10d,%edx
    f589:	add    %ecx,%edx
    f58b:	mov    $0x1,%r12d
    f591:	xor    %r11d,%r11d
    f594:	jmpq   f417 <F_0_714+0x3d45>
    f599:	mov    %rcx,%r15
    f59c:	lea    0x38(%rdx),%ecx
    f59f:	mov    %rdi,%r8
    f5a2:	shr    %cl,%r8
    f5a5:	mov    %r8b,0x0(%r13)
    f5a9:	lea    0x1(%r13),%rcx
    f5ad:	cmp    $0xff,%r8b
    f5b1:	je     f80f <F_0_714+0x413d>
    f5b7:	mov    %rcx,%r8
    f5ba:	jmpq   f816 <F_0_714+0x4144>
    f5bf:	movb   $0x0,(%rcx)
    f5c2:	lea    0x2(%r13),%r8
    f5c6:	lea    0x30(%rdx),%ecx
    f5c9:	mov    %rdi,%r13
    f5cc:	shr    %cl,%r13
    f5cf:	mov    %r13b,(%r8)
    f5d2:	lea    0x1(%r8),%rcx
    f5d6:	cmp    $0xff,%r13b
    f5da:	je     f838 <F_0_714+0x4166>
    f5e0:	mov    %rcx,%r8
    f5e3:	jmpq   f83f <F_0_714+0x416d>
    f5e8:	movb   $0x0,(%rcx)
    f5eb:	add    $0x2,%r8
    f5ef:	lea    0x28(%rdx),%ecx
    f5f2:	mov    %rdi,%r13
    f5f5:	shr    %cl,%r13
    f5f8:	mov    %r13b,(%r8)
    f5fb:	lea    0x1(%r8),%rcx
    f5ff:	cmp    $0xff,%r13b
    f603:	je     f861 <F_0_714+0x418f>
    f609:	mov    %rcx,%r8
    f60c:	jmpq   f868 <F_0_714+0x4196>
    f611:	movb   $0x0,(%rcx)
    f614:	add    $0x2,%r8
    f618:	lea    -0x20(%rdx),%ecx
    f61b:	mov    %rdi,%r13
    f61e:	shr    %cl,%r13
    f621:	mov    %rcx,%rdx
    f624:	mov    %r13b,(%r8)
    f627:	lea    0x1(%r8),%rcx
    f62b:	cmp    $0xff,%r13b
    f62f:	je     f89a <F_0_714+0x41c8>
    f635:	mov    %rcx,%r13
    f638:	mov    %r15,%rcx
    f63b:	mov    %rdi,%r15
    f63e:	mov    -0x120(%rbp),%r8
    f645:	jmpq   ec0a <F_0_714+0x3538>
    f64a:	movb   $0x0,(%rcx)
    f64d:	lea    0x2(%r8),%r13
    f651:	mov    %r15,%rcx
    f654:	mov    %rdi,%r15
    f657:	mov    -0x120(%rbp),%r8
    f65e:	jmpq   e9b1 <F_0_714+0x32df>
    f663:	add    $0x1,%r11d
    f667:	movswq 0x66(%rsi),%r10
    f66c:	test   %r10w,%r10w
    f670:	je     f8b3 <F_0_714+0x41e1>
    f676:	mov    %r10,%r14
    f679:	sar    $0x1f,%r14d
    f67d:	mov    %r14,-0x78(%rbp)
    f681:	mov    %r14,%rcx
    f684:	xor    %r10d,%ecx
    f687:	sub    %r14d,%ecx
    f68a:	movslq %ecx,%rcx
    f68d:	movzbl (%rcx,%rax,1),%ecx
    f691:	mov    %rcx,-0x128(%rbp)
    f698:	jmpq   f9c5 <F_0_714+0x42f3>
    f69d:	cmp    $0x2f,%edx
    f6a0:	jle    f763 <F_0_714+0x4091>
    f6a6:	lea    0x38(%rdx),%ecx
    f6a9:	mov    %rdi,%r15
    f6ac:	shr    %cl,%r15
    f6af:	mov    %r15b,0x0(%r13)
    f6b3:	lea    0x1(%r13),%r14
    f6b7:	cmp    $0xff,%r15b
    f6bb:	jne    f6c5 <F_0_714+0x3ff3>
    f6bd:	movb   $0x0,(%r14)
    f6c1:	lea    0x2(%r13),%r14
    f6c5:	lea    0x30(%rdx),%ecx
    f6c8:	mov    %rdi,%r15
    f6cb:	shr    %cl,%r15
    f6ce:	mov    %r15b,(%r14)
    f6d1:	lea    0x1(%r14),%r13
    f6d5:	cmp    $0xff,%r15b
    f6d9:	jne    f6e4 <F_0_714+0x4012>
    f6db:	movb   $0x0,0x0(%r13)
    f6e0:	lea    0x2(%r14),%r13
    f6e4:	lea    0x28(%rdx),%ecx
    f6e7:	mov    %rdi,%r15
    f6ea:	shr    %cl,%r15
    f6ed:	mov    %r15b,0x0(%r13)
    f6f1:	lea    0x1(%r13),%r14
    f6f5:	cmp    $0xff,%r15b
    f6f9:	jne    f703 <F_0_714+0x4031>
    f6fb:	movb   $0x0,(%r14)
    f6ff:	lea    0x2(%r13),%r14
    f703:	lea    0x20(%rdx),%ecx
    f706:	mov    %rdi,%r15
    f709:	shr    %cl,%r15
    f70c:	mov    %r15b,(%r14)
    f70f:	lea    0x1(%r14),%r13
    f713:	cmp    $0xff,%r15b
    f717:	jne    f722 <F_0_714+0x4050>
    f719:	movb   $0x0,0x0(%r13)
    f71e:	lea    0x2(%r14),%r13
    f722:	lea    0x18(%rdx),%ecx
    f725:	mov    %rdi,%r15
    f728:	shr    %cl,%r15
    f72b:	mov    %r15b,0x0(%r13)
    f72f:	lea    0x1(%r13),%r14
    f733:	cmp    $0xff,%r15b
    f737:	jne    f741 <F_0_714+0x406f>
    f739:	movb   $0x0,(%r14)
    f73d:	lea    0x2(%r13),%r14
    f741:	lea    -0x30(%rdx),%ecx
    f744:	mov    %rdi,%r15
    f747:	shr    %cl,%r15
    f74a:	mov    %rcx,%rdx
    f74d:	mov    %r15b,(%r14)
    f750:	lea    0x1(%r14),%r13
    f754:	cmp    $0xff,%r15b
    f758:	jne    f763 <F_0_714+0x4091>
    f75a:	movb   $0x0,0x0(%r13)
    f75f:	lea    0x2(%r14),%r13
    f763:	mov    %rbx,%rcx
    f766:	shl    %cl,%rdi
    f769:	mov    %rcx,%rbx
    f76c:	or     %r9,%rdi
    f76f:	add    %ebx,%edx
    f771:	add    $0xfffffff0,%r11d
    f775:	cmp    $0xf,%r11d
    f779:	jg     f69d <F_0_714+0x3fcb>
    f77f:	shl    $0x4,%r11d
    f783:	mov    -0x128(%rbp),%rcx
    f78a:	add    %ecx,%r11d
    f78d:	movslq %r11d,%r14
    f790:	movslq (%r8,%r14,4),%r11
    f794:	movsbq 0x400(%r8,%r14,1),%r14
    f79d:	cmp    $0x1f,%edx
    f7a0:	jg     fa39 <F_0_714+0x4367>
    f7a6:	mov    %rdi,%r15
    f7a9:	shl    %cl,%r12
    f7ac:	lea    -0x1(%r12),%edi
    f7b1:	mov    -0x78(%rbp),%r12
    f7b5:	add    %r12d,%r10d
    f7b8:	and    %r10d,%edi
    f7bb:	movslq %edi,%rdi
    f7be:	mov    %rcx,%r12
    f7c1:	mov    %r14,%rcx
    f7c4:	shl    %cl,%r15
    f7c7:	mov    %rcx,%r10
    f7ca:	or     %r15,%r11
    f7cd:	mov    %r12,%rcx
    f7d0:	shl    %cl,%r11
    f7d3:	or     %r11,%rdi
    f7d6:	add    %r10d,%edx
    f7d9:	add    %ecx,%edx
    f7db:	mov    $0x1,%r12d
    f7e1:	xor    %r11d,%r11d
    f7e4:	jmpq   f667 <F_0_714+0x3f95>
    f7e9:	mov    %rcx,%r15
    f7ec:	lea    0x38(%rdx),%ecx
    f7ef:	mov    %rdi,%r8
    f7f2:	shr    %cl,%r8
    f7f5:	mov    %r8b,0x0(%r13)
    f7f9:	lea    0x1(%r13),%rcx
    f7fd:	cmp    $0xff,%r8b
    f801:	je     fa5f <F_0_714+0x438d>
    f807:	mov    %rcx,%r8
    f80a:	jmpq   fa66 <F_0_714+0x4394>
    f80f:	movb   $0x0,(%rcx)
    f812:	lea    0x2(%r13),%r8
    f816:	lea    0x30(%rdx),%ecx
    f819:	mov    %rdi,%r13
    f81c:	shr    %cl,%r13
    f81f:	mov    %r13b,(%r8)
    f822:	lea    0x1(%r8),%rcx
    f826:	cmp    $0xff,%r13b
    f82a:	je     fa88 <F_0_714+0x43b6>
    f830:	mov    %rcx,%r8
    f833:	jmpq   fa8f <F_0_714+0x43bd>
    f838:	movb   $0x0,(%rcx)
    f83b:	add    $0x2,%r8
    f83f:	lea    0x28(%rdx),%ecx
    f842:	mov    %rdi,%r13
    f845:	shr    %cl,%r13
    f848:	mov    %r13b,(%r8)
    f84b:	lea    0x1(%r8),%rcx
    f84f:	cmp    $0xff,%r13b
    f853:	je     fab1 <F_0_714+0x43df>
    f859:	mov    %rcx,%r8
    f85c:	jmpq   fab8 <F_0_714+0x43e6>
    f861:	movb   $0x0,(%rcx)
    f864:	add    $0x2,%r8
    f868:	lea    -0x20(%rdx),%ecx
    f86b:	mov    %rdi,%r13
    f86e:	shr    %cl,%r13
    f871:	mov    %rcx,%rdx
    f874:	mov    %r13b,(%r8)
    f877:	lea    0x1(%r8),%rcx
    f87b:	cmp    $0xff,%r13b
    f87f:	je     faea <F_0_714+0x4418>
    f885:	mov    %rcx,%r13
    f888:	mov    %r15,%rcx
    f88b:	mov    %rdi,%r15
    f88e:	mov    -0x120(%rbp),%r8
    f895:	jmpq   ee63 <F_0_714+0x3791>
    f89a:	movb   $0x0,(%rcx)
    f89d:	lea    0x2(%r8),%r13
    f8a1:	mov    %r15,%rcx
    f8a4:	mov    %rdi,%r15
    f8a7:	mov    -0x120(%rbp),%r8
    f8ae:	jmpq   ec0a <F_0_714+0x3538>
    f8b3:	add    $0x1,%r11d
    f8b7:	movswq 0x74(%rsi),%r10
    f8bc:	test   %r10w,%r10w
    f8c0:	je     fb03 <F_0_714+0x4431>
    f8c6:	mov    %r10,%r14
    f8c9:	sar    $0x1f,%r14d
    f8cd:	mov    %r14,-0x70(%rbp)
    f8d1:	mov    %r14,%rcx
    f8d4:	xor    %r10d,%ecx
    f8d7:	sub    %r14d,%ecx
    f8da:	movslq %ecx,%rcx
    f8dd:	movzbl (%rcx,%rax,1),%ecx
    f8e1:	mov    %rcx,-0x128(%rbp)
    f8e8:	jmpq   fc15 <F_0_714+0x4543>
    f8ed:	cmp    $0x2f,%edx
    f8f0:	jle    f9b3 <F_0_714+0x42e1>
    f8f6:	lea    0x38(%rdx),%ecx
    f8f9:	mov    %rdi,%r15
    f8fc:	shr    %cl,%r15
    f8ff:	mov    %r15b,0x0(%r13)
    f903:	lea    0x1(%r13),%r14
    f907:	cmp    $0xff,%r15b
    f90b:	jne    f915 <F_0_714+0x4243>
    f90d:	movb   $0x0,(%r14)
    f911:	lea    0x2(%r13),%r14
    f915:	lea    0x30(%rdx),%ecx
    f918:	mov    %rdi,%r15
    f91b:	shr    %cl,%r15
    f91e:	mov    %r15b,(%r14)
    f921:	lea    0x1(%r14),%r13
    f925:	cmp    $0xff,%r15b
    f929:	jne    f934 <F_0_714+0x4262>
    f92b:	movb   $0x0,0x0(%r13)
    f930:	lea    0x2(%r14),%r13
    f934:	lea    0x28(%rdx),%ecx
    f937:	mov    %rdi,%r15
    f93a:	shr    %cl,%r15
    f93d:	mov    %r15b,0x0(%r13)
    f941:	lea    0x1(%r13),%r14
    f945:	cmp    $0xff,%r15b
    f949:	jne    f953 <F_0_714+0x4281>
    f94b:	movb   $0x0,(%r14)
    f94f:	lea    0x2(%r13),%r14
    f953:	lea    0x20(%rdx),%ecx
    f956:	mov    %rdi,%r15
    f959:	shr    %cl,%r15
    f95c:	mov    %r15b,(%r14)
    f95f:	lea    0x1(%r14),%r13
    f963:	cmp    $0xff,%r15b
    f967:	jne    f972 <F_0_714+0x42a0>
    f969:	movb   $0x0,0x0(%r13)
    f96e:	lea    0x2(%r14),%r13
    f972:	lea    0x18(%rdx),%ecx
    f975:	mov    %rdi,%r15
    f978:	shr    %cl,%r15
    f97b:	mov    %r15b,0x0(%r13)
    f97f:	lea    0x1(%r13),%r14
    f983:	cmp    $0xff,%r15b
    f987:	jne    f991 <F_0_714+0x42bf>
    f989:	movb   $0x0,(%r14)
    f98d:	lea    0x2(%r13),%r14
    f991:	lea    -0x30(%rdx),%ecx
    f994:	mov    %rdi,%r15
    f997:	shr    %cl,%r15
    f99a:	mov    %rcx,%rdx
    f99d:	mov    %r15b,(%r14)
    f9a0:	lea    0x1(%r14),%r13
    f9a4:	cmp    $0xff,%r15b
    f9a8:	jne    f9b3 <F_0_714+0x42e1>
    f9aa:	movb   $0x0,0x0(%r13)
    f9af:	lea    0x2(%r14),%r13
    f9b3:	mov    %rbx,%rcx
    f9b6:	shl    %cl,%rdi
    f9b9:	mov    %rcx,%rbx
    f9bc:	or     %r9,%rdi
    f9bf:	add    %ebx,%edx
    f9c1:	add    $0xfffffff0,%r11d
    f9c5:	cmp    $0xf,%r11d
    f9c9:	jg     f8ed <F_0_714+0x421b>
    f9cf:	shl    $0x4,%r11d
    f9d3:	mov    -0x128(%rbp),%rcx
    f9da:	add    %ecx,%r11d
    f9dd:	movslq %r11d,%r14
    f9e0:	movslq (%r8,%r14,4),%r11
    f9e4:	movsbq 0x400(%r8,%r14,1),%r14
    f9ed:	cmp    $0x1f,%edx
    f9f0:	jg     fc89 <F_0_714+0x45b7>
    f9f6:	mov    %rdi,%r15
    f9f9:	shl    %cl,%r12
    f9fc:	lea    -0x1(%r12),%edi
    fa01:	mov    -0x78(%rbp),%r12
    fa05:	add    %r12d,%r10d
    fa08:	and    %r10d,%edi
    fa0b:	movslq %edi,%rdi
    fa0e:	mov    %rcx,%r12
    fa11:	mov    %r14,%rcx
    fa14:	shl    %cl,%r15
    fa17:	mov    %rcx,%r10
    fa1a:	or     %r15,%r11
    fa1d:	mov    %r12,%rcx
    fa20:	shl    %cl,%r11
    fa23:	or     %r11,%rdi
    fa26:	add    %r10d,%edx
    fa29:	add    %ecx,%edx
    fa2b:	mov    $0x1,%r12d
    fa31:	xor    %r11d,%r11d
    fa34:	jmpq   f8b7 <F_0_714+0x41e5>
    fa39:	mov    %rcx,%r15
    fa3c:	lea    0x38(%rdx),%ecx
    fa3f:	mov    %rdi,%r8
    fa42:	shr    %cl,%r8
    fa45:	mov    %r8b,0x0(%r13)
    fa49:	lea    0x1(%r13),%rcx
    fa4d:	cmp    $0xff,%r8b
    fa51:	je     fcaf <F_0_714+0x45dd>
    fa57:	mov    %rcx,%r8
    fa5a:	jmpq   fcb6 <F_0_714+0x45e4>
    fa5f:	movb   $0x0,(%rcx)
    fa62:	lea    0x2(%r13),%r8
    fa66:	lea    0x30(%rdx),%ecx
    fa69:	mov    %rdi,%r13
    fa6c:	shr    %cl,%r13
    fa6f:	mov    %r13b,(%r8)
    fa72:	lea    0x1(%r8),%rcx
    fa76:	cmp    $0xff,%r13b
    fa7a:	je     fcd8 <F_0_714+0x4606>
    fa80:	mov    %rcx,%r8
    fa83:	jmpq   fcdf <F_0_714+0x460d>
    fa88:	movb   $0x0,(%rcx)
    fa8b:	add    $0x2,%r8
    fa8f:	lea    0x28(%rdx),%ecx
    fa92:	mov    %rdi,%r13
    fa95:	shr    %cl,%r13
    fa98:	mov    %r13b,(%r8)
    fa9b:	lea    0x1(%r8),%rcx
    fa9f:	cmp    $0xff,%r13b
    faa3:	je     fd01 <F_0_714+0x462f>
    faa9:	mov    %rcx,%r8
    faac:	jmpq   fd08 <F_0_714+0x4636>
    fab1:	movb   $0x0,(%rcx)
    fab4:	add    $0x2,%r8
    fab8:	lea    -0x20(%rdx),%ecx
    fabb:	mov    %rdi,%r13
    fabe:	shr    %cl,%r13
    fac1:	mov    %rcx,%rdx
    fac4:	mov    %r13b,(%r8)
    fac7:	lea    0x1(%r8),%rcx
    facb:	cmp    $0xff,%r13b
    facf:	je     fd3a <F_0_714+0x4668>
    fad5:	mov    %rcx,%r13
    fad8:	mov    %r15,%rcx
    fadb:	mov    %rdi,%r15
    fade:	mov    -0x120(%rbp),%r8
    fae5:	jmpq   f0b6 <F_0_714+0x39e4>
    faea:	movb   $0x0,(%rcx)
    faed:	lea    0x2(%r8),%r13
    faf1:	mov    %r15,%rcx
    faf4:	mov    %rdi,%r15
    faf7:	mov    -0x120(%rbp),%r8
    fafe:	jmpq   ee63 <F_0_714+0x3791>
    fb03:	add    $0x1,%r11d
    fb07:	movswq 0x76(%rsi),%r10
    fb0c:	test   %r10w,%r10w
    fb10:	je     fd53 <F_0_714+0x4681>
    fb16:	mov    %r10,%r14
    fb19:	sar    $0x1f,%r14d
    fb1d:	mov    %r14,-0x70(%rbp)
    fb21:	mov    %r14,%rcx
    fb24:	xor    %r10d,%ecx
    fb27:	sub    %r14d,%ecx
    fb2a:	movslq %ecx,%rcx
    fb2d:	movzbl (%rcx,%rax,1),%ecx
    fb31:	mov    %rcx,-0x128(%rbp)
    fb38:	jmpq   fe65 <F_0_714+0x4793>
    fb3d:	cmp    $0x2f,%edx
    fb40:	jle    fc03 <F_0_714+0x4531>
    fb46:	lea    0x38(%rdx),%ecx
    fb49:	mov    %rdi,%r15
    fb4c:	shr    %cl,%r15
    fb4f:	mov    %r15b,0x0(%r13)
    fb53:	lea    0x1(%r13),%r14
    fb57:	cmp    $0xff,%r15b
    fb5b:	jne    fb65 <F_0_714+0x4493>
    fb5d:	movb   $0x0,(%r14)
    fb61:	lea    0x2(%r13),%r14
    fb65:	lea    0x30(%rdx),%ecx
    fb68:	mov    %rdi,%r15
    fb6b:	shr    %cl,%r15
    fb6e:	mov    %r15b,(%r14)
    fb71:	lea    0x1(%r14),%r13
    fb75:	cmp    $0xff,%r15b
    fb79:	jne    fb84 <F_0_714+0x44b2>
    fb7b:	movb   $0x0,0x0(%r13)
    fb80:	lea    0x2(%r14),%r13
    fb84:	lea    0x28(%rdx),%ecx
    fb87:	mov    %rdi,%r15
    fb8a:	shr    %cl,%r15
    fb8d:	mov    %r15b,0x0(%r13)
    fb91:	lea    0x1(%r13),%r14
    fb95:	cmp    $0xff,%r15b
    fb99:	jne    fba3 <F_0_714+0x44d1>
    fb9b:	movb   $0x0,(%r14)
    fb9f:	lea    0x2(%r13),%r14
    fba3:	lea    0x20(%rdx),%ecx
    fba6:	mov    %rdi,%r15
    fba9:	shr    %cl,%r15
    fbac:	mov    %r15b,(%r14)
    fbaf:	lea    0x1(%r14),%r13
    fbb3:	cmp    $0xff,%r15b
    fbb7:	jne    fbc2 <F_0_714+0x44f0>
    fbb9:	movb   $0x0,0x0(%r13)
    fbbe:	lea    0x2(%r14),%r13
    fbc2:	lea    0x18(%rdx),%ecx
    fbc5:	mov    %rdi,%r15
    fbc8:	shr    %cl,%r15
    fbcb:	mov    %r15b,0x0(%r13)
    fbcf:	lea    0x1(%r13),%r14
    fbd3:	cmp    $0xff,%r15b
    fbd7:	jne    fbe1 <F_0_714+0x450f>
    fbd9:	movb   $0x0,(%r14)
    fbdd:	lea    0x2(%r13),%r14
    fbe1:	lea    -0x30(%rdx),%ecx
    fbe4:	mov    %rdi,%r15
    fbe7:	shr    %cl,%r15
    fbea:	mov    %rcx,%rdx
    fbed:	mov    %r15b,(%r14)
    fbf0:	lea    0x1(%r14),%r13
    fbf4:	cmp    $0xff,%r15b
    fbf8:	jne    fc03 <F_0_714+0x4531>
    fbfa:	movb   $0x0,0x0(%r13)
    fbff:	lea    0x2(%r14),%r13
    fc03:	mov    %rbx,%rcx
    fc06:	shl    %cl,%rdi
    fc09:	mov    %rcx,%rbx
    fc0c:	or     %r9,%rdi
    fc0f:	add    %ebx,%edx
    fc11:	add    $0xfffffff0,%r11d
    fc15:	cmp    $0xf,%r11d
    fc19:	jg     fb3d <F_0_714+0x446b>
    fc1f:	shl    $0x4,%r11d
    fc23:	mov    -0x128(%rbp),%rcx
    fc2a:	add    %ecx,%r11d
    fc2d:	movslq %r11d,%r14
    fc30:	movslq (%r8,%r14,4),%r11
    fc34:	movsbq 0x400(%r8,%r14,1),%r14
    fc3d:	cmp    $0x1f,%edx
    fc40:	jg     fed9 <F_0_714+0x4807>
    fc46:	mov    %rdi,%r15
    fc49:	shl    %cl,%r12
    fc4c:	lea    -0x1(%r12),%edi
    fc51:	mov    -0x70(%rbp),%r12
    fc55:	add    %r12d,%r10d
    fc58:	and    %r10d,%edi
    fc5b:	movslq %edi,%rdi
    fc5e:	mov    %rcx,%r12
    fc61:	mov    %r14,%rcx
    fc64:	shl    %cl,%r15
    fc67:	mov    %rcx,%r10
    fc6a:	or     %r15,%r11
    fc6d:	mov    %r12,%rcx
    fc70:	shl    %cl,%r11
    fc73:	or     %r11,%rdi
    fc76:	add    %r10d,%edx
    fc79:	add    %ecx,%edx
    fc7b:	mov    $0x1,%r12d
    fc81:	xor    %r11d,%r11d
    fc84:	jmpq   fb07 <F_0_714+0x4435>
    fc89:	mov    %rcx,%r15
    fc8c:	lea    0x38(%rdx),%ecx
    fc8f:	mov    %rdi,%r8
    fc92:	shr    %cl,%r8
    fc95:	mov    %r8b,0x0(%r13)
    fc99:	lea    0x1(%r13),%rcx
    fc9d:	cmp    $0xff,%r8b
    fca1:	je     feff <F_0_714+0x482d>
    fca7:	mov    %rcx,%r8
    fcaa:	jmpq   ff06 <F_0_714+0x4834>
    fcaf:	movb   $0x0,(%rcx)
    fcb2:	lea    0x2(%r13),%r8
    fcb6:	lea    0x30(%rdx),%ecx
    fcb9:	mov    %rdi,%r13
    fcbc:	shr    %cl,%r13
    fcbf:	mov    %r13b,(%r8)
    fcc2:	lea    0x1(%r8),%rcx
    fcc6:	cmp    $0xff,%r13b
    fcca:	je     ff28 <F_0_714+0x4856>
    fcd0:	mov    %rcx,%r8
    fcd3:	jmpq   ff2f <F_0_714+0x485d>
    fcd8:	movb   $0x0,(%rcx)
    fcdb:	add    $0x2,%r8
    fcdf:	lea    0x28(%rdx),%ecx
    fce2:	mov    %rdi,%r13
    fce5:	shr    %cl,%r13
    fce8:	mov    %r13b,(%r8)
    fceb:	lea    0x1(%r8),%rcx
    fcef:	cmp    $0xff,%r13b
    fcf3:	je     ff51 <F_0_714+0x487f>
    fcf9:	mov    %rcx,%r8
    fcfc:	jmpq   ff58 <F_0_714+0x4886>
    fd01:	movb   $0x0,(%rcx)
    fd04:	add    $0x2,%r8
    fd08:	lea    -0x20(%rdx),%ecx
    fd0b:	mov    %rdi,%r13
    fd0e:	shr    %cl,%r13
    fd11:	mov    %rcx,%rdx
    fd14:	mov    %r13b,(%r8)
    fd17:	lea    0x1(%r8),%rcx
    fd1b:	cmp    $0xff,%r13b
    fd1f:	je     ff8a <F_0_714+0x48b8>
    fd25:	mov    %rcx,%r13
    fd28:	mov    %r15,%rcx
    fd2b:	mov    %rdi,%r15
    fd2e:	mov    -0x120(%rbp),%r8
    fd35:	jmpq   f309 <F_0_714+0x3c37>
    fd3a:	movb   $0x0,(%rcx)
    fd3d:	lea    0x2(%r8),%r13
    fd41:	mov    %r15,%rcx
    fd44:	mov    %rdi,%r15
    fd47:	mov    -0x120(%rbp),%r8
    fd4e:	jmpq   f0b6 <F_0_714+0x39e4>
    fd53:	add    $0x1,%r11d
    fd57:	movswq 0x68(%rsi),%r10
    fd5c:	test   %r10w,%r10w
    fd60:	je     ffa3 <F_0_714+0x48d1>
    fd66:	mov    %r10,%r14
    fd69:	sar    $0x1f,%r14d
    fd6d:	mov    %r14,-0x68(%rbp)
    fd71:	mov    %r14,%rcx
    fd74:	xor    %r10d,%ecx
    fd77:	sub    %r14d,%ecx
    fd7a:	movslq %ecx,%rcx
    fd7d:	movzbl (%rcx,%rax,1),%ecx
    fd81:	mov    %rcx,-0x128(%rbp)
    fd88:	jmpq   100b5 <F_0_714+0x49e3>
    fd8d:	cmp    $0x2f,%edx
    fd90:	jle    fe53 <F_0_714+0x4781>
    fd96:	lea    0x38(%rdx),%ecx
    fd99:	mov    %rdi,%r15
    fd9c:	shr    %cl,%r15
    fd9f:	mov    %r15b,0x0(%r13)
    fda3:	lea    0x1(%r13),%r14
    fda7:	cmp    $0xff,%r15b
    fdab:	jne    fdb5 <F_0_714+0x46e3>
    fdad:	movb   $0x0,(%r14)
    fdb1:	lea    0x2(%r13),%r14
    fdb5:	lea    0x30(%rdx),%ecx
    fdb8:	mov    %rdi,%r15
    fdbb:	shr    %cl,%r15
    fdbe:	mov    %r15b,(%r14)
    fdc1:	lea    0x1(%r14),%r13
    fdc5:	cmp    $0xff,%r15b
    fdc9:	jne    fdd4 <F_0_714+0x4702>
    fdcb:	movb   $0x0,0x0(%r13)
    fdd0:	lea    0x2(%r14),%r13
    fdd4:	lea    0x28(%rdx),%ecx
    fdd7:	mov    %rdi,%r15
    fdda:	shr    %cl,%r15
    fddd:	mov    %r15b,0x0(%r13)
    fde1:	lea    0x1(%r13),%r14
    fde5:	cmp    $0xff,%r15b
    fde9:	jne    fdf3 <F_0_714+0x4721>
    fdeb:	movb   $0x0,(%r14)
    fdef:	lea    0x2(%r13),%r14
    fdf3:	lea    0x20(%rdx),%ecx
    fdf6:	mov    %rdi,%r15
    fdf9:	shr    %cl,%r15
    fdfc:	mov    %r15b,(%r14)
    fdff:	lea    0x1(%r14),%r13
    fe03:	cmp    $0xff,%r15b
    fe07:	jne    fe12 <F_0_714+0x4740>
    fe09:	movb   $0x0,0x0(%r13)
    fe0e:	lea    0x2(%r14),%r13
    fe12:	lea    0x18(%rdx),%ecx
    fe15:	mov    %rdi,%r15
    fe18:	shr    %cl,%r15
    fe1b:	mov    %r15b,0x0(%r13)
    fe1f:	lea    0x1(%r13),%r14
    fe23:	cmp    $0xff,%r15b
    fe27:	jne    fe31 <F_0_714+0x475f>
    fe29:	movb   $0x0,(%r14)
    fe2d:	lea    0x2(%r13),%r14
    fe31:	lea    -0x30(%rdx),%ecx
    fe34:	mov    %rdi,%r15
    fe37:	shr    %cl,%r15
    fe3a:	mov    %rcx,%rdx
    fe3d:	mov    %r15b,(%r14)
    fe40:	lea    0x1(%r14),%r13
    fe44:	cmp    $0xff,%r15b
    fe48:	jne    fe53 <F_0_714+0x4781>
    fe4a:	movb   $0x0,0x0(%r13)
    fe4f:	lea    0x2(%r14),%r13
    fe53:	mov    %rbx,%rcx
    fe56:	shl    %cl,%rdi
    fe59:	mov    %rcx,%rbx
    fe5c:	or     %r9,%rdi
    fe5f:	add    %ebx,%edx
    fe61:	add    $0xfffffff0,%r11d
    fe65:	cmp    $0xf,%r11d
    fe69:	jg     fd8d <F_0_714+0x46bb>
    fe6f:	shl    $0x4,%r11d
    fe73:	mov    -0x128(%rbp),%rcx
    fe7a:	add    %ecx,%r11d
    fe7d:	movslq %r11d,%r14
    fe80:	movslq (%r8,%r14,4),%r11
    fe84:	movsbq 0x400(%r8,%r14,1),%r14
    fe8d:	cmp    $0x1f,%edx
    fe90:	jg     10129 <F_0_714+0x4a57>
    fe96:	mov    %rdi,%r15
    fe99:	shl    %cl,%r12
    fe9c:	lea    -0x1(%r12),%edi
    fea1:	mov    -0x70(%rbp),%r12
    fea5:	add    %r12d,%r10d
    fea8:	and    %r10d,%edi
    feab:	movslq %edi,%rdi
    feae:	mov    %rcx,%r12
    feb1:	mov    %r14,%rcx
    feb4:	shl    %cl,%r15
    feb7:	mov    %rcx,%r10
    feba:	or     %r15,%r11
    febd:	mov    %r12,%rcx
    fec0:	shl    %cl,%r11
    fec3:	or     %r11,%rdi
    fec6:	add    %r10d,%edx
    fec9:	add    %ecx,%edx
    fecb:	mov    $0x1,%r12d
    fed1:	xor    %r11d,%r11d
    fed4:	jmpq   fd57 <F_0_714+0x4685>
    fed9:	mov    %rcx,%r15
    fedc:	lea    0x38(%rdx),%ecx
    fedf:	mov    %rdi,%r8
    fee2:	shr    %cl,%r8
    fee5:	mov    %r8b,0x0(%r13)
    fee9:	lea    0x1(%r13),%rcx
    feed:	cmp    $0xff,%r8b
    fef1:	je     1014f <F_0_714+0x4a7d>
    fef7:	mov    %rcx,%r8
    fefa:	jmpq   10156 <F_0_714+0x4a84>
    feff:	movb   $0x0,(%rcx)
    ff02:	lea    0x2(%r13),%r8
    ff06:	lea    0x30(%rdx),%ecx
    ff09:	mov    %rdi,%r13
    ff0c:	shr    %cl,%r13
    ff0f:	mov    %r13b,(%r8)
    ff12:	lea    0x1(%r8),%rcx
    ff16:	cmp    $0xff,%r13b
    ff1a:	je     10178 <F_0_714+0x4aa6>
    ff20:	mov    %rcx,%r8
    ff23:	jmpq   1017f <F_0_714+0x4aad>
    ff28:	movb   $0x0,(%rcx)
    ff2b:	add    $0x2,%r8
    ff2f:	lea    0x28(%rdx),%ecx
    ff32:	mov    %rdi,%r13
    ff35:	shr    %cl,%r13
    ff38:	mov    %r13b,(%r8)
    ff3b:	lea    0x1(%r8),%rcx
    ff3f:	cmp    $0xff,%r13b
    ff43:	je     101a1 <F_0_714+0x4acf>
    ff49:	mov    %rcx,%r8
    ff4c:	jmpq   101a8 <F_0_714+0x4ad6>
    ff51:	movb   $0x0,(%rcx)
    ff54:	add    $0x2,%r8
    ff58:	lea    -0x20(%rdx),%ecx
    ff5b:	mov    %rdi,%r13
    ff5e:	shr    %cl,%r13
    ff61:	mov    %rcx,%rdx
    ff64:	mov    %r13b,(%r8)
    ff67:	lea    0x1(%r8),%rcx
    ff6b:	cmp    $0xff,%r13b
    ff6f:	je     101da <F_0_714+0x4b08>
    ff75:	mov    %rcx,%r13
    ff78:	mov    %r15,%rcx
    ff7b:	mov    %rdi,%r15
    ff7e:	mov    -0x120(%rbp),%r8
    ff85:	jmpq   f559 <F_0_714+0x3e87>
    ff8a:	movb   $0x0,(%rcx)
    ff8d:	lea    0x2(%r8),%r13
    ff91:	mov    %r15,%rcx
    ff94:	mov    %rdi,%r15
    ff97:	mov    -0x120(%rbp),%r8
    ff9e:	jmpq   f309 <F_0_714+0x3c37>
    ffa3:	add    $0x1,%r11d
    ffa7:	movswq 0x5a(%rsi),%r10
    ffac:	test   %r10w,%r10w
    ffb0:	je     101f3 <F_0_714+0x4b21>
    ffb6:	mov    %r10,%r14
    ffb9:	sar    $0x1f,%r14d
    ffbd:	mov    %r14,-0x68(%rbp)
    ffc1:	mov    %r14,%rcx
    ffc4:	xor    %r10d,%ecx
    ffc7:	sub    %r14d,%ecx
    ffca:	movslq %ecx,%rcx
    ffcd:	movzbl (%rcx,%rax,1),%ecx
    ffd1:	mov    %rcx,-0x128(%rbp)
    ffd8:	jmpq   10305 <F_0_714+0x4c33>
    ffdd:	cmp    $0x2f,%edx
    ffe0:	jle    100a3 <F_0_714+0x49d1>
    ffe6:	lea    0x38(%rdx),%ecx
    ffe9:	mov    %rdi,%r15
    ffec:	shr    %cl,%r15
    ffef:	mov    %r15b,0x0(%r13)
    fff3:	lea    0x1(%r13),%r14
    fff7:	cmp    $0xff,%r15b
    fffb:	jne    10005 <F_0_714+0x4933>
    fffd:	movb   $0x0,(%r14)
   10001:	lea    0x2(%r13),%r14
   10005:	lea    0x30(%rdx),%ecx
   10008:	mov    %rdi,%r15
   1000b:	shr    %cl,%r15
   1000e:	mov    %r15b,(%r14)
   10011:	lea    0x1(%r14),%r13
   10015:	cmp    $0xff,%r15b
   10019:	jne    10024 <F_0_714+0x4952>
   1001b:	movb   $0x0,0x0(%r13)
   10020:	lea    0x2(%r14),%r13
   10024:	lea    0x28(%rdx),%ecx
   10027:	mov    %rdi,%r15
   1002a:	shr    %cl,%r15
   1002d:	mov    %r15b,0x0(%r13)
   10031:	lea    0x1(%r13),%r14
   10035:	cmp    $0xff,%r15b
   10039:	jne    10043 <F_0_714+0x4971>
   1003b:	movb   $0x0,(%r14)
   1003f:	lea    0x2(%r13),%r14
   10043:	lea    0x20(%rdx),%ecx
   10046:	mov    %rdi,%r15
   10049:	shr    %cl,%r15
   1004c:	mov    %r15b,(%r14)
   1004f:	lea    0x1(%r14),%r13
   10053:	cmp    $0xff,%r15b
   10057:	jne    10062 <F_0_714+0x4990>
   10059:	movb   $0x0,0x0(%r13)
   1005e:	lea    0x2(%r14),%r13
   10062:	lea    0x18(%rdx),%ecx
   10065:	mov    %rdi,%r15
   10068:	shr    %cl,%r15
   1006b:	mov    %r15b,0x0(%r13)
   1006f:	lea    0x1(%r13),%r14
   10073:	cmp    $0xff,%r15b
   10077:	jne    10081 <F_0_714+0x49af>
   10079:	movb   $0x0,(%r14)
   1007d:	lea    0x2(%r13),%r14
   10081:	lea    -0x30(%rdx),%ecx
   10084:	mov    %rdi,%r15
   10087:	shr    %cl,%r15
   1008a:	mov    %rcx,%rdx
   1008d:	mov    %r15b,(%r14)
   10090:	lea    0x1(%r14),%r13
   10094:	cmp    $0xff,%r15b
   10098:	jne    100a3 <F_0_714+0x49d1>
   1009a:	movb   $0x0,0x0(%r13)
   1009f:	lea    0x2(%r14),%r13
   100a3:	mov    %rbx,%rcx
   100a6:	shl    %cl,%rdi
   100a9:	mov    %rcx,%rbx
   100ac:	or     %r9,%rdi
   100af:	add    %ebx,%edx
   100b1:	add    $0xfffffff0,%r11d
   100b5:	cmp    $0xf,%r11d
   100b9:	jg     ffdd <F_0_714+0x490b>
   100bf:	shl    $0x4,%r11d
   100c3:	mov    -0x128(%rbp),%rcx
   100ca:	add    %ecx,%r11d
   100cd:	movslq %r11d,%r14
   100d0:	movslq (%r8,%r14,4),%r11
   100d4:	movsbq 0x400(%r8,%r14,1),%r14
   100dd:	cmp    $0x1f,%edx
   100e0:	jg     10379 <F_0_714+0x4ca7>
   100e6:	mov    %rdi,%r15
   100e9:	shl    %cl,%r12
   100ec:	lea    -0x1(%r12),%edi
   100f1:	mov    -0x68(%rbp),%r12
   100f5:	add    %r12d,%r10d
   100f8:	and    %r10d,%edi
   100fb:	movslq %edi,%rdi
   100fe:	mov    %rcx,%r12
   10101:	mov    %r14,%rcx
   10104:	shl    %cl,%r15
   10107:	mov    %rcx,%r10
   1010a:	or     %r15,%r11
   1010d:	mov    %r12,%rcx
   10110:	shl    %cl,%r11
   10113:	or     %r11,%rdi
   10116:	add    %r10d,%edx
   10119:	add    %ecx,%edx
   1011b:	mov    $0x1,%r12d
   10121:	xor    %r11d,%r11d
   10124:	jmpq   ffa7 <F_0_714+0x48d5>
   10129:	mov    %rcx,%r15
   1012c:	lea    0x38(%rdx),%ecx
   1012f:	mov    %rdi,%r8
   10132:	shr    %cl,%r8
   10135:	mov    %r8b,0x0(%r13)
   10139:	lea    0x1(%r13),%rcx
   1013d:	cmp    $0xff,%r8b
   10141:	je     1039f <F_0_714+0x4ccd>
   10147:	mov    %rcx,%r8
   1014a:	jmpq   103a6 <F_0_714+0x4cd4>
   1014f:	movb   $0x0,(%rcx)
   10152:	lea    0x2(%r13),%r8
   10156:	lea    0x30(%rdx),%ecx
   10159:	mov    %rdi,%r13
   1015c:	shr    %cl,%r13
   1015f:	mov    %r13b,(%r8)
   10162:	lea    0x1(%r8),%rcx
   10166:	cmp    $0xff,%r13b
   1016a:	je     103c8 <F_0_714+0x4cf6>
   10170:	mov    %rcx,%r8
   10173:	jmpq   103cf <F_0_714+0x4cfd>
   10178:	movb   $0x0,(%rcx)
   1017b:	add    $0x2,%r8
   1017f:	lea    0x28(%rdx),%ecx
   10182:	mov    %rdi,%r13
   10185:	shr    %cl,%r13
   10188:	mov    %r13b,(%r8)
   1018b:	lea    0x1(%r8),%rcx
   1018f:	cmp    $0xff,%r13b
   10193:	je     103f1 <F_0_714+0x4d1f>
   10199:	mov    %rcx,%r8
   1019c:	jmpq   103f8 <F_0_714+0x4d26>
   101a1:	movb   $0x0,(%rcx)
   101a4:	add    $0x2,%r8
   101a8:	lea    -0x20(%rdx),%ecx
   101ab:	mov    %rdi,%r13
   101ae:	shr    %cl,%r13
   101b1:	mov    %rcx,%rdx
   101b4:	mov    %r13b,(%r8)
   101b7:	lea    0x1(%r8),%rcx
   101bb:	cmp    $0xff,%r13b
   101bf:	je     1042a <F_0_714+0x4d58>
   101c5:	mov    %rcx,%r13
   101c8:	mov    %r15,%rcx
   101cb:	mov    %rdi,%r15
   101ce:	mov    -0x120(%rbp),%r8
   101d5:	jmpq   f7a9 <F_0_714+0x40d7>
   101da:	movb   $0x0,(%rcx)
   101dd:	lea    0x2(%r8),%r13
   101e1:	mov    %r15,%rcx
   101e4:	mov    %rdi,%r15
   101e7:	mov    -0x120(%rbp),%r8
   101ee:	jmpq   f559 <F_0_714+0x3e87>
   101f3:	add    $0x1,%r11d
   101f7:	movswq 0x4c(%rsi),%r10
   101fc:	test   %r10w,%r10w
   10200:	je     10443 <F_0_714+0x4d71>
   10206:	mov    %r10,%r14
   10209:	sar    $0x1f,%r14d
   1020d:	mov    %r14,-0x60(%rbp)
   10211:	mov    %r14,%rcx
   10214:	xor    %r10d,%ecx
   10217:	sub    %r14d,%ecx
   1021a:	movslq %ecx,%rcx
   1021d:	movzbl (%rcx,%rax,1),%ecx
   10221:	mov    %rcx,-0x128(%rbp)
   10228:	jmpq   10555 <F_0_714+0x4e83>
   1022d:	cmp    $0x2f,%edx
   10230:	jle    102f3 <F_0_714+0x4c21>
   10236:	lea    0x38(%rdx),%ecx
   10239:	mov    %rdi,%r15
   1023c:	shr    %cl,%r15
   1023f:	mov    %r15b,0x0(%r13)
   10243:	lea    0x1(%r13),%r14
   10247:	cmp    $0xff,%r15b
   1024b:	jne    10255 <F_0_714+0x4b83>
   1024d:	movb   $0x0,(%r14)
   10251:	lea    0x2(%r13),%r14
   10255:	lea    0x30(%rdx),%ecx
   10258:	mov    %rdi,%r15
   1025b:	shr    %cl,%r15
   1025e:	mov    %r15b,(%r14)
   10261:	lea    0x1(%r14),%r13
   10265:	cmp    $0xff,%r15b
   10269:	jne    10274 <F_0_714+0x4ba2>
   1026b:	movb   $0x0,0x0(%r13)
   10270:	lea    0x2(%r14),%r13
   10274:	lea    0x28(%rdx),%ecx
   10277:	mov    %rdi,%r15
   1027a:	shr    %cl,%r15
   1027d:	mov    %r15b,0x0(%r13)
   10281:	lea    0x1(%r13),%r14
   10285:	cmp    $0xff,%r15b
   10289:	jne    10293 <F_0_714+0x4bc1>
   1028b:	movb   $0x0,(%r14)
   1028f:	lea    0x2(%r13),%r14
   10293:	lea    0x20(%rdx),%ecx
   10296:	mov    %rdi,%r15
   10299:	shr    %cl,%r15
   1029c:	mov    %r15b,(%r14)
   1029f:	lea    0x1(%r14),%r13
   102a3:	cmp    $0xff,%r15b
   102a7:	jne    102b2 <F_0_714+0x4be0>
   102a9:	movb   $0x0,0x0(%r13)
   102ae:	lea    0x2(%r14),%r13
   102b2:	lea    0x18(%rdx),%ecx
   102b5:	mov    %rdi,%r15
   102b8:	shr    %cl,%r15
   102bb:	mov    %r15b,0x0(%r13)
   102bf:	lea    0x1(%r13),%r14
   102c3:	cmp    $0xff,%r15b
   102c7:	jne    102d1 <F_0_714+0x4bff>
   102c9:	movb   $0x0,(%r14)
   102cd:	lea    0x2(%r13),%r14
   102d1:	lea    -0x30(%rdx),%ecx
   102d4:	mov    %rdi,%r15
   102d7:	shr    %cl,%r15
   102da:	mov    %rcx,%rdx
   102dd:	mov    %r15b,(%r14)
   102e0:	lea    0x1(%r14),%r13
   102e4:	cmp    $0xff,%r15b
   102e8:	jne    102f3 <F_0_714+0x4c21>
   102ea:	movb   $0x0,0x0(%r13)
   102ef:	lea    0x2(%r14),%r13
   102f3:	mov    %rbx,%rcx
   102f6:	shl    %cl,%rdi
   102f9:	mov    %rcx,%rbx
   102fc:	or     %r9,%rdi
   102ff:	add    %ebx,%edx
   10301:	add    $0xfffffff0,%r11d
   10305:	cmp    $0xf,%r11d
   10309:	jg     1022d <F_0_714+0x4b5b>
   1030f:	shl    $0x4,%r11d
   10313:	mov    -0x128(%rbp),%rcx
   1031a:	add    %ecx,%r11d
   1031d:	movslq %r11d,%r14
   10320:	movslq (%r8,%r14,4),%r11
   10324:	movsbq 0x400(%r8,%r14,1),%r14
   1032d:	cmp    $0x1f,%edx
   10330:	jg     105c9 <F_0_714+0x4ef7>
   10336:	mov    %rdi,%r15
   10339:	shl    %cl,%r12
   1033c:	lea    -0x1(%r12),%edi
   10341:	mov    -0x68(%rbp),%r12
   10345:	add    %r12d,%r10d
   10348:	and    %r10d,%edi
   1034b:	movslq %edi,%rdi
   1034e:	mov    %rcx,%r12
   10351:	mov    %r14,%rcx
   10354:	shl    %cl,%r15
   10357:	mov    %rcx,%r10
   1035a:	or     %r15,%r11
   1035d:	mov    %r12,%rcx
   10360:	shl    %cl,%r11
   10363:	or     %r11,%rdi
   10366:	add    %r10d,%edx
   10369:	add    %ecx,%edx
   1036b:	mov    $0x1,%r12d
   10371:	xor    %r11d,%r11d
   10374:	jmpq   101f7 <F_0_714+0x4b25>
   10379:	mov    %rcx,%r15
   1037c:	lea    0x38(%rdx),%ecx
   1037f:	mov    %rdi,%r8
   10382:	shr    %cl,%r8
   10385:	mov    %r8b,0x0(%r13)
   10389:	lea    0x1(%r13),%rcx
   1038d:	cmp    $0xff,%r8b
   10391:	je     105ef <F_0_714+0x4f1d>
   10397:	mov    %rcx,%r8
   1039a:	jmpq   105f6 <F_0_714+0x4f24>
   1039f:	movb   $0x0,(%rcx)
   103a2:	lea    0x2(%r13),%r8
   103a6:	lea    0x30(%rdx),%ecx
   103a9:	mov    %rdi,%r13
   103ac:	shr    %cl,%r13
   103af:	mov    %r13b,(%r8)
   103b2:	lea    0x1(%r8),%rcx
   103b6:	cmp    $0xff,%r13b
   103ba:	je     10618 <F_0_714+0x4f46>
   103c0:	mov    %rcx,%r8
   103c3:	jmpq   1061f <F_0_714+0x4f4d>
   103c8:	movb   $0x0,(%rcx)
   103cb:	add    $0x2,%r8
   103cf:	lea    0x28(%rdx),%ecx
   103d2:	mov    %rdi,%r13
   103d5:	shr    %cl,%r13
   103d8:	mov    %r13b,(%r8)
   103db:	lea    0x1(%r8),%rcx
   103df:	cmp    $0xff,%r13b
   103e3:	je     10641 <F_0_714+0x4f6f>
   103e9:	mov    %rcx,%r8
   103ec:	jmpq   10648 <F_0_714+0x4f76>
   103f1:	movb   $0x0,(%rcx)
   103f4:	add    $0x2,%r8
   103f8:	lea    -0x20(%rdx),%ecx
   103fb:	mov    %rdi,%r13
   103fe:	shr    %cl,%r13
   10401:	mov    %rcx,%rdx
   10404:	mov    %r13b,(%r8)
   10407:	lea    0x1(%r8),%rcx
   1040b:	cmp    $0xff,%r13b
   1040f:	je     1067a <F_0_714+0x4fa8>
   10415:	mov    %rcx,%r13
   10418:	mov    %r15,%rcx
   1041b:	mov    %rdi,%r15
   1041e:	mov    -0x120(%rbp),%r8
   10425:	jmpq   f9f9 <F_0_714+0x4327>
   1042a:	movb   $0x0,(%rcx)
   1042d:	lea    0x2(%r8),%r13
   10431:	mov    %r15,%rcx
   10434:	mov    %rdi,%r15
   10437:	mov    -0x120(%rbp),%r8
   1043e:	jmpq   f7a9 <F_0_714+0x40d7>
   10443:	add    $0x1,%r11d
   10447:	movswq 0x3e(%rsi),%r10
   1044c:	test   %r10w,%r10w
   10450:	je     10693 <F_0_714+0x4fc1>
   10456:	mov    %r10,%r14
   10459:	sar    $0x1f,%r14d
   1045d:	mov    %r14,-0x60(%rbp)
   10461:	mov    %r14,%rcx
   10464:	xor    %r10d,%ecx
   10467:	sub    %r14d,%ecx
   1046a:	movslq %ecx,%rcx
   1046d:	movzbl (%rcx,%rax,1),%ecx
   10471:	mov    %rcx,-0x128(%rbp)
   10478:	jmpq   107a8 <F_0_714+0x50d6>
   1047d:	cmp    $0x2f,%edx
   10480:	jle    10543 <F_0_714+0x4e71>
   10486:	lea    0x38(%rdx),%ecx
   10489:	mov    %rdi,%r15
   1048c:	shr    %cl,%r15
   1048f:	mov    %r15b,0x0(%r13)
   10493:	lea    0x1(%r13),%r14
   10497:	cmp    $0xff,%r15b
   1049b:	jne    104a5 <F_0_714+0x4dd3>
   1049d:	movb   $0x0,(%r14)
   104a1:	lea    0x2(%r13),%r14
   104a5:	lea    0x30(%rdx),%ecx
   104a8:	mov    %rdi,%r15
   104ab:	shr    %cl,%r15
   104ae:	mov    %r15b,(%r14)
   104b1:	lea    0x1(%r14),%r13
   104b5:	cmp    $0xff,%r15b
   104b9:	jne    104c4 <F_0_714+0x4df2>
   104bb:	movb   $0x0,0x0(%r13)
   104c0:	lea    0x2(%r14),%r13
   104c4:	lea    0x28(%rdx),%ecx
   104c7:	mov    %rdi,%r15
   104ca:	shr    %cl,%r15
   104cd:	mov    %r15b,0x0(%r13)
   104d1:	lea    0x1(%r13),%r14
   104d5:	cmp    $0xff,%r15b
   104d9:	jne    104e3 <F_0_714+0x4e11>
   104db:	movb   $0x0,(%r14)
   104df:	lea    0x2(%r13),%r14
   104e3:	lea    0x20(%rdx),%ecx
   104e6:	mov    %rdi,%r15
   104e9:	shr    %cl,%r15
   104ec:	mov    %r15b,(%r14)
   104ef:	lea    0x1(%r14),%r13
   104f3:	cmp    $0xff,%r15b
   104f7:	jne    10502 <F_0_714+0x4e30>
   104f9:	movb   $0x0,0x0(%r13)
   104fe:	lea    0x2(%r14),%r13
   10502:	lea    0x18(%rdx),%ecx
   10505:	mov    %rdi,%r15
   10508:	shr    %cl,%r15
   1050b:	mov    %r15b,0x0(%r13)
   1050f:	lea    0x1(%r13),%r14
   10513:	cmp    $0xff,%r15b
   10517:	jne    10521 <F_0_714+0x4e4f>
   10519:	movb   $0x0,(%r14)
   1051d:	lea    0x2(%r13),%r14
   10521:	lea    -0x30(%rdx),%ecx
   10524:	mov    %rdi,%r15
   10527:	shr    %cl,%r15
   1052a:	mov    %rcx,%rdx
   1052d:	mov    %r15b,(%r14)
   10530:	lea    0x1(%r14),%r13
   10534:	cmp    $0xff,%r15b
   10538:	jne    10543 <F_0_714+0x4e71>
   1053a:	movb   $0x0,0x0(%r13)
   1053f:	lea    0x2(%r14),%r13
   10543:	mov    %rbx,%rcx
   10546:	shl    %cl,%rdi
   10549:	mov    %rcx,%rbx
   1054c:	or     %r9,%rdi
   1054f:	add    %ebx,%edx
   10551:	add    $0xfffffff0,%r11d
   10555:	cmp    $0xf,%r11d
   10559:	jg     1047d <F_0_714+0x4dab>
   1055f:	shl    $0x4,%r11d
   10563:	mov    -0x128(%rbp),%rcx
   1056a:	add    %ecx,%r11d
   1056d:	movslq %r11d,%r14
   10570:	movslq (%r8,%r14,4),%r11
   10574:	movsbq 0x400(%r8,%r14,1),%r14
   1057d:	cmp    $0x1f,%edx
   10580:	jg     1081c <F_0_714+0x514a>
   10586:	mov    %rdi,%r15
   10589:	shl    %cl,%r12
   1058c:	lea    -0x1(%r12),%edi
   10591:	mov    -0x60(%rbp),%r12
   10595:	add    %r12d,%r10d
   10598:	and    %r10d,%edi
   1059b:	movslq %edi,%rdi
   1059e:	mov    %rcx,%r12
   105a1:	mov    %r14,%rcx
   105a4:	shl    %cl,%r15
   105a7:	mov    %rcx,%r10
   105aa:	or     %r15,%r11
   105ad:	mov    %r12,%rcx
   105b0:	shl    %cl,%r11
   105b3:	or     %r11,%rdi
   105b6:	add    %r10d,%edx
   105b9:	add    %ecx,%edx
   105bb:	mov    $0x1,%r12d
   105c1:	xor    %r11d,%r11d
   105c4:	jmpq   10447 <F_0_714+0x4d75>
   105c9:	mov    %rcx,%r15
   105cc:	lea    0x38(%rdx),%ecx
   105cf:	mov    %rdi,%r8
   105d2:	shr    %cl,%r8
   105d5:	mov    %r8b,0x0(%r13)
   105d9:	lea    0x1(%r13),%rcx
   105dd:	cmp    $0xff,%r8b
   105e1:	je     10842 <F_0_714+0x5170>
   105e7:	mov    %rcx,%r8
   105ea:	jmpq   10849 <F_0_714+0x5177>
   105ef:	movb   $0x0,(%rcx)
   105f2:	lea    0x2(%r13),%r8
   105f6:	lea    0x30(%rdx),%ecx
   105f9:	mov    %rdi,%r13
   105fc:	shr    %cl,%r13
   105ff:	mov    %r13b,(%r8)
   10602:	lea    0x1(%r8),%rcx
   10606:	cmp    $0xff,%r13b
   1060a:	je     1086b <F_0_714+0x5199>
   10610:	mov    %rcx,%r8
   10613:	jmpq   10872 <F_0_714+0x51a0>
   10618:	movb   $0x0,(%rcx)
   1061b:	add    $0x2,%r8
   1061f:	lea    0x28(%rdx),%ecx
   10622:	mov    %rdi,%r13
   10625:	shr    %cl,%r13
   10628:	mov    %r13b,(%r8)
   1062b:	lea    0x1(%r8),%rcx
   1062f:	cmp    $0xff,%r13b
   10633:	je     10894 <F_0_714+0x51c2>
   10639:	mov    %rcx,%r8
   1063c:	jmpq   1089b <F_0_714+0x51c9>
   10641:	movb   $0x0,(%rcx)
   10644:	add    $0x2,%r8
   10648:	lea    -0x20(%rdx),%ecx
   1064b:	mov    %rdi,%r13
   1064e:	shr    %cl,%r13
   10651:	mov    %rcx,%rdx
   10654:	mov    %r13b,(%r8)
   10657:	lea    0x1(%r8),%rcx
   1065b:	cmp    $0xff,%r13b
   1065f:	je     108cd <F_0_714+0x51fb>
   10665:	mov    %rcx,%r13
   10668:	mov    %r15,%rcx
   1066b:	mov    %rdi,%r15
   1066e:	mov    -0x120(%rbp),%r8
   10675:	jmpq   fc49 <F_0_714+0x4577>
   1067a:	movb   $0x0,(%rcx)
   1067d:	lea    0x2(%r8),%r13
   10681:	mov    %r15,%rcx
   10684:	mov    %rdi,%r15
   10687:	mov    -0x120(%rbp),%r8
   1068e:	jmpq   f9f9 <F_0_714+0x4327>
   10693:	add    $0x1,%r11d
   10697:	movswq 0x4e(%rsi),%r10
   1069c:	test   %r10w,%r10w
   106a0:	je     108e6 <F_0_714+0x5214>
   106a6:	mov    %r10,%r14
   106a9:	sar    $0x1f,%r14d
   106ad:	mov    %r14,-0x120(%rbp)
   106b4:	mov    %r14,%rcx
   106b7:	xor    %r10d,%ecx
   106ba:	sub    %r14d,%ecx
   106bd:	movslq %ecx,%rcx
   106c0:	movzbl (%rcx,%rax,1),%ecx
   106c4:	mov    %rcx,-0x128(%rbp)
   106cb:	jmpq   109fc <F_0_714+0x532a>
   106d0:	cmp    $0x2f,%edx
   106d3:	jle    10796 <F_0_714+0x50c4>
   106d9:	lea    0x38(%rdx),%ecx
   106dc:	mov    %rdi,%r15
   106df:	shr    %cl,%r15
   106e2:	mov    %r15b,0x0(%r13)
   106e6:	lea    0x1(%r13),%r14
   106ea:	cmp    $0xff,%r15b
   106ee:	jne    106f8 <F_0_714+0x5026>
   106f0:	movb   $0x0,(%r14)
   106f4:	lea    0x2(%r13),%r14
   106f8:	lea    0x30(%rdx),%ecx
   106fb:	mov    %rdi,%r15
   106fe:	shr    %cl,%r15
   10701:	mov    %r15b,(%r14)
   10704:	lea    0x1(%r14),%r13
   10708:	cmp    $0xff,%r15b
   1070c:	jne    10717 <F_0_714+0x5045>
   1070e:	movb   $0x0,0x0(%r13)
   10713:	lea    0x2(%r14),%r13
   10717:	lea    0x28(%rdx),%ecx
   1071a:	mov    %rdi,%r15
   1071d:	shr    %cl,%r15
   10720:	mov    %r15b,0x0(%r13)
   10724:	lea    0x1(%r13),%r14
   10728:	cmp    $0xff,%r15b
   1072c:	jne    10736 <F_0_714+0x5064>
   1072e:	movb   $0x0,(%r14)
   10732:	lea    0x2(%r13),%r14
   10736:	lea    0x20(%rdx),%ecx
   10739:	mov    %rdi,%r15
   1073c:	shr    %cl,%r15
   1073f:	mov    %r15b,(%r14)
   10742:	lea    0x1(%r14),%r13
   10746:	cmp    $0xff,%r15b
   1074a:	jne    10755 <F_0_714+0x5083>
   1074c:	movb   $0x0,0x0(%r13)
   10751:	lea    0x2(%r14),%r13
   10755:	lea    0x18(%rdx),%ecx
   10758:	mov    %rdi,%r15
   1075b:	shr    %cl,%r15
   1075e:	mov    %r15b,0x0(%r13)
   10762:	lea    0x1(%r13),%r14
   10766:	cmp    $0xff,%r15b
   1076a:	jne    10774 <F_0_714+0x50a2>
   1076c:	movb   $0x0,(%r14)
   10770:	lea    0x2(%r13),%r14
   10774:	lea    -0x30(%rdx),%ecx
   10777:	mov    %rdi,%r15
   1077a:	shr    %cl,%r15
   1077d:	mov    %rcx,%rdx
   10780:	mov    %r15b,(%r14)
   10783:	lea    0x1(%r14),%r13
   10787:	cmp    $0xff,%r15b
   1078b:	jne    10796 <F_0_714+0x50c4>
   1078d:	movb   $0x0,0x0(%r13)
   10792:	lea    0x2(%r14),%r13
   10796:	mov    %rbx,%rcx
   10799:	shl    %cl,%rdi
   1079c:	mov    %rcx,%rbx
   1079f:	or     %r9,%rdi
   107a2:	add    %ebx,%edx
   107a4:	add    $0xfffffff0,%r11d
   107a8:	cmp    $0xf,%r11d
   107ac:	jg     106d0 <F_0_714+0x4ffe>
   107b2:	shl    $0x4,%r11d
   107b6:	mov    -0x128(%rbp),%rcx
   107bd:	add    %ecx,%r11d
   107c0:	movslq %r11d,%r14
   107c3:	movslq (%r8,%r14,4),%r11
   107c7:	movsbq 0x400(%r8,%r14,1),%r14
   107d0:	cmp    $0x1f,%edx
   107d3:	jg     10a73 <F_0_714+0x53a1>
   107d9:	mov    %rdi,%r15
   107dc:	shl    %cl,%r12
   107df:	lea    -0x1(%r12),%edi
   107e4:	mov    -0x60(%rbp),%r12
   107e8:	add    %r12d,%r10d
   107eb:	and    %r10d,%edi
   107ee:	movslq %edi,%rdi
   107f1:	mov    %rcx,%r12
   107f4:	mov    %r14,%rcx
   107f7:	shl    %cl,%r15
   107fa:	mov    %rcx,%r10
   107fd:	or     %r15,%r11
   10800:	mov    %r12,%rcx
   10803:	shl    %cl,%r11
   10806:	or     %r11,%rdi
   10809:	add    %r10d,%edx
   1080c:	add    %ecx,%edx
   1080e:	mov    $0x1,%r12d
   10814:	xor    %r11d,%r11d
   10817:	jmpq   10697 <F_0_714+0x4fc5>
   1081c:	mov    %rcx,%r15
   1081f:	lea    0x38(%rdx),%ecx
   10822:	mov    %rdi,%r8
   10825:	shr    %cl,%r8
   10828:	mov    %r8b,0x0(%r13)
   1082c:	lea    0x1(%r13),%rcx
   10830:	cmp    $0xff,%r8b
   10834:	je     10a99 <F_0_714+0x53c7>
   1083a:	mov    %rcx,%r8
   1083d:	jmpq   10aa0 <F_0_714+0x53ce>
   10842:	movb   $0x0,(%rcx)
   10845:	lea    0x2(%r13),%r8
   10849:	lea    0x30(%rdx),%ecx
   1084c:	mov    %rdi,%r13
   1084f:	shr    %cl,%r13
   10852:	mov    %r13b,(%r8)
   10855:	lea    0x1(%r8),%rcx
   10859:	cmp    $0xff,%r13b
   1085d:	je     10ac2 <F_0_714+0x53f0>
   10863:	mov    %rcx,%r8
   10866:	jmpq   10ac9 <F_0_714+0x53f7>
   1086b:	movb   $0x0,(%rcx)
   1086e:	add    $0x2,%r8
   10872:	lea    0x28(%rdx),%ecx
   10875:	mov    %rdi,%r13
   10878:	shr    %cl,%r13
   1087b:	mov    %r13b,(%r8)
   1087e:	lea    0x1(%r8),%rcx
   10882:	cmp    $0xff,%r13b
   10886:	je     10aeb <F_0_714+0x5419>
   1088c:	mov    %rcx,%r8
   1088f:	jmpq   10af2 <F_0_714+0x5420>
   10894:	movb   $0x0,(%rcx)
   10897:	add    $0x2,%r8
   1089b:	lea    -0x20(%rdx),%ecx
   1089e:	mov    %rdi,%r13
   108a1:	shr    %cl,%r13
   108a4:	mov    %rcx,%rdx
   108a7:	mov    %r13b,(%r8)
   108aa:	lea    0x1(%r8),%rcx
   108ae:	cmp    $0xff,%r13b
   108b2:	je     10b24 <F_0_714+0x5452>
   108b8:	mov    %rcx,%r13
   108bb:	mov    %r15,%rcx
   108be:	mov    %rdi,%r15
   108c1:	mov    -0x120(%rbp),%r8
   108c8:	jmpq   fe99 <F_0_714+0x47c7>
   108cd:	movb   $0x0,(%rcx)
   108d0:	lea    0x2(%r8),%r13
   108d4:	mov    %r15,%rcx
   108d7:	mov    %rdi,%r15
   108da:	mov    -0x120(%rbp),%r8
   108e1:	jmpq   fc49 <F_0_714+0x4577>
   108e6:	lea    0x1(%r11),%r14d
   108ea:	movswq 0x5c(%rsi),%r11
   108ef:	test   %r11w,%r11w
   108f3:	je     10b3d <F_0_714+0x546b>
   108f9:	mov    %r11,%r10
   108fc:	sar    $0x1f,%r10d
   10900:	mov    %r10,-0x58(%rbp)
   10904:	mov    %r10,%rcx
   10907:	xor    %r11d,%ecx
   1090a:	sub    %r10d,%ecx
   1090d:	movslq %ecx,%rcx
   10910:	movzbl (%rcx,%rax,1),%eax
   10914:	mov    %rax,-0x128(%rbp)
   1091b:	mov    -0x38(%rbp),%r10
   1091f:	jmpq   10c50 <F_0_714+0x557e>
   10924:	cmp    $0x2f,%edx
   10927:	jle    109ea <F_0_714+0x5318>
   1092d:	lea    0x38(%rdx),%ecx
   10930:	mov    %rdi,%r15
   10933:	shr    %cl,%r15
   10936:	mov    %r15b,0x0(%r13)
   1093a:	lea    0x1(%r13),%r14
   1093e:	cmp    $0xff,%r15b
   10942:	jne    1094c <F_0_714+0x527a>
   10944:	movb   $0x0,(%r14)
   10948:	lea    0x2(%r13),%r14
   1094c:	lea    0x30(%rdx),%ecx
   1094f:	mov    %rdi,%r15
   10952:	shr    %cl,%r15
   10955:	mov    %r15b,(%r14)
   10958:	lea    0x1(%r14),%r13
   1095c:	cmp    $0xff,%r15b
   10960:	jne    1096b <F_0_714+0x5299>
   10962:	movb   $0x0,0x0(%r13)
   10967:	lea    0x2(%r14),%r13
   1096b:	lea    0x28(%rdx),%ecx
   1096e:	mov    %rdi,%r15
   10971:	shr    %cl,%r15
   10974:	mov    %r15b,0x0(%r13)
   10978:	lea    0x1(%r13),%r14
   1097c:	cmp    $0xff,%r15b
   10980:	jne    1098a <F_0_714+0x52b8>
   10982:	movb   $0x0,(%r14)
   10986:	lea    0x2(%r13),%r14
   1098a:	lea    0x20(%rdx),%ecx
   1098d:	mov    %rdi,%r15
   10990:	shr    %cl,%r15
   10993:	mov    %r15b,(%r14)
   10996:	lea    0x1(%r14),%r13
   1099a:	cmp    $0xff,%r15b
   1099e:	jne    109a9 <F_0_714+0x52d7>
   109a0:	movb   $0x0,0x0(%r13)
   109a5:	lea    0x2(%r14),%r13
   109a9:	lea    0x18(%rdx),%ecx
   109ac:	mov    %rdi,%r15
   109af:	shr    %cl,%r15
   109b2:	mov    %r15b,0x0(%r13)
   109b6:	lea    0x1(%r13),%r14
   109ba:	cmp    $0xff,%r15b
   109be:	jne    109c8 <F_0_714+0x52f6>
   109c0:	movb   $0x0,(%r14)
   109c4:	lea    0x2(%r13),%r14
   109c8:	lea    -0x30(%rdx),%ecx
   109cb:	mov    %rdi,%r15
   109ce:	shr    %cl,%r15
   109d1:	mov    %rcx,%rdx
   109d4:	mov    %r15b,(%r14)
   109d7:	lea    0x1(%r14),%r13
   109db:	cmp    $0xff,%r15b
   109df:	jne    109ea <F_0_714+0x5318>
   109e1:	movb   $0x0,0x0(%r13)
   109e6:	lea    0x2(%r14),%r13
   109ea:	mov    %rbx,%rcx
   109ed:	shl    %cl,%rdi
   109f0:	mov    %rcx,%rbx
   109f3:	or     %r9,%rdi
   109f6:	add    %ebx,%edx
   109f8:	add    $0xfffffff0,%r11d
   109fc:	cmp    $0xf,%r11d
   10a00:	jg     10924 <F_0_714+0x5252>
   10a06:	shl    $0x4,%r11d
   10a0a:	mov    -0x128(%rbp),%rcx
   10a11:	add    %ecx,%r11d
   10a14:	movslq %r11d,%r14
   10a17:	movslq (%r8,%r14,4),%r11
   10a1b:	movsbq 0x400(%r8,%r14,1),%r14
   10a24:	cmp    $0x1f,%edx
   10a27:	jg     10ccc <F_0_714+0x55fa>
   10a2d:	mov    %rdi,%r15
   10a30:	shl    %cl,%r12
   10a33:	lea    -0x1(%r12),%edi
   10a38:	mov    -0x120(%rbp),%r12
   10a3f:	add    %r12d,%r10d
   10a42:	and    %r10d,%edi
   10a45:	movslq %edi,%rdi
   10a48:	mov    %rcx,%r12
   10a4b:	mov    %r14,%rcx
   10a4e:	shl    %cl,%r15
   10a51:	mov    %rcx,%r10
   10a54:	or     %r15,%r11
   10a57:	mov    %r12,%rcx
   10a5a:	shl    %cl,%r11
   10a5d:	or     %r11,%rdi
   10a60:	add    %r10d,%edx
   10a63:	add    %ecx,%edx
   10a65:	mov    $0x1,%r12d
   10a6b:	xor    %r14d,%r14d
   10a6e:	jmpq   108ea <F_0_714+0x5218>
   10a73:	mov    %rcx,%r15
   10a76:	lea    0x38(%rdx),%ecx
   10a79:	mov    %rdi,%r8
   10a7c:	shr    %cl,%r8
   10a7f:	mov    %r8b,0x0(%r13)
   10a83:	lea    0x1(%r13),%rcx
   10a87:	cmp    $0xff,%r8b
   10a8b:	je     10cf0 <F_0_714+0x561e>
   10a91:	mov    %rcx,%r8
   10a94:	jmpq   10cf7 <F_0_714+0x5625>
   10a99:	movb   $0x0,(%rcx)
   10a9c:	lea    0x2(%r13),%r8
   10aa0:	lea    0x30(%rdx),%ecx
   10aa3:	mov    %rdi,%r13
   10aa6:	shr    %cl,%r13
   10aa9:	mov    %r13b,(%r8)
   10aac:	lea    0x1(%r8),%rcx
   10ab0:	cmp    $0xff,%r13b
   10ab4:	je     10d19 <F_0_714+0x5647>
   10aba:	mov    %rcx,%r8
   10abd:	jmpq   10d20 <F_0_714+0x564e>
   10ac2:	movb   $0x0,(%rcx)
   10ac5:	add    $0x2,%r8
   10ac9:	lea    0x28(%rdx),%ecx
   10acc:	mov    %rdi,%r13
   10acf:	shr    %cl,%r13
   10ad2:	mov    %r13b,(%r8)
   10ad5:	lea    0x1(%r8),%rcx
   10ad9:	cmp    $0xff,%r13b
   10add:	je     10d42 <F_0_714+0x5670>
   10ae3:	mov    %rcx,%r8
   10ae6:	jmpq   10d49 <F_0_714+0x5677>
   10aeb:	movb   $0x0,(%rcx)
   10aee:	add    $0x2,%r8
   10af2:	lea    -0x20(%rdx),%ecx
   10af5:	mov    %rdi,%r13
   10af8:	shr    %cl,%r13
   10afb:	mov    %rcx,%rdx
   10afe:	mov    %r13b,(%r8)
   10b01:	lea    0x1(%r8),%rcx
   10b05:	cmp    $0xff,%r13b
   10b09:	je     10d7b <F_0_714+0x56a9>
   10b0f:	mov    %rcx,%r13
   10b12:	mov    %r15,%rcx
   10b15:	mov    %rdi,%r15
   10b18:	mov    -0x120(%rbp),%r8
   10b1f:	jmpq   100e9 <F_0_714+0x4a17>
   10b24:	movb   $0x0,(%rcx)
   10b27:	lea    0x2(%r8),%r13
   10b2b:	mov    %r15,%rcx
   10b2e:	mov    %rdi,%r15
   10b31:	mov    -0x120(%rbp),%r8
   10b38:	jmpq   fe99 <F_0_714+0x47c7>
   10b3d:	add    $0x1,%r14d
   10b41:	mov    -0x38(%rbp),%r10
   10b45:	movswq 0x6a(%rsi),%r11
   10b4a:	test   %r11w,%r11w
   10b4e:	je     10d94 <F_0_714+0x56c2>
   10b54:	mov    %r11,%r15
   10b57:	sar    $0x1f,%r15d
   10b5b:	mov    %r15,-0x58(%rbp)
   10b5f:	mov    %r15,%rcx
   10b62:	xor    %r11d,%ecx
   10b65:	sub    %r15d,%ecx
   10b68:	movslq %ecx,%rcx
   10b6b:	movzbl (%rcx,%rax,1),%eax
   10b6f:	mov    %rax,-0x128(%rbp)
   10b76:	jmpq   10ea3 <F_0_714+0x57d1>
   10b7b:	cmp    $0x2f,%edx
   10b7e:	jle    10c3e <F_0_714+0x556c>
   10b84:	lea    0x38(%rdx),%ecx
   10b87:	mov    %rdi,%r15
   10b8a:	shr    %cl,%r15
   10b8d:	mov    %r15b,0x0(%r13)
   10b91:	lea    0x1(%r13),%rax
   10b95:	cmp    $0xff,%r15b
   10b99:	jne    10ba2 <F_0_714+0x54d0>
   10b9b:	movb   $0x0,(%rax)
   10b9e:	lea    0x2(%r13),%rax
   10ba2:	lea    0x30(%rdx),%ecx
   10ba5:	mov    %rdi,%r15
   10ba8:	shr    %cl,%r15
   10bab:	mov    %r15b,(%rax)
   10bae:	lea    0x1(%rax),%r13
   10bb2:	cmp    $0xff,%r15b
   10bb6:	jne    10bc1 <F_0_714+0x54ef>
   10bb8:	movb   $0x0,0x0(%r13)
   10bbd:	lea    0x2(%rax),%r13
   10bc1:	lea    0x28(%rdx),%ecx
   10bc4:	mov    %rdi,%r15
   10bc7:	shr    %cl,%r15
   10bca:	mov    %r15b,0x0(%r13)
   10bce:	lea    0x1(%r13),%rax
   10bd2:	cmp    $0xff,%r15b
   10bd6:	jne    10bdf <F_0_714+0x550d>
   10bd8:	movb   $0x0,(%rax)
   10bdb:	lea    0x2(%r13),%rax
   10bdf:	lea    0x20(%rdx),%ecx
   10be2:	mov    %rdi,%r15
   10be5:	shr    %cl,%r15
   10be8:	mov    %r15b,(%rax)
   10beb:	lea    0x1(%rax),%r13
   10bef:	cmp    $0xff,%r15b
   10bf3:	jne    10bfe <F_0_714+0x552c>
   10bf5:	movb   $0x0,0x0(%r13)
   10bfa:	lea    0x2(%rax),%r13
   10bfe:	lea    0x18(%rdx),%ecx
   10c01:	mov    %rdi,%r15
   10c04:	shr    %cl,%r15
   10c07:	mov    %r15b,0x0(%r13)
   10c0b:	lea    0x1(%r13),%rax
   10c0f:	cmp    $0xff,%r15b
   10c13:	jne    10c1c <F_0_714+0x554a>
   10c15:	movb   $0x0,(%rax)
   10c18:	lea    0x2(%r13),%rax
   10c1c:	lea    -0x30(%rdx),%ecx
   10c1f:	mov    %rdi,%r15
   10c22:	shr    %cl,%r15
   10c25:	mov    %rcx,%rdx
   10c28:	mov    %r15b,(%rax)
   10c2b:	lea    0x1(%rax),%r13
   10c2f:	cmp    $0xff,%r15b
   10c33:	jne    10c3e <F_0_714+0x556c>
   10c35:	movb   $0x0,0x0(%r13)
   10c3a:	lea    0x2(%rax),%r13
   10c3e:	mov    %rbx,%rcx
   10c41:	shl    %cl,%rdi
   10c44:	mov    %rcx,%rbx
   10c47:	or     %r9,%rdi
   10c4a:	add    %ebx,%edx
   10c4c:	add    $0xfffffff0,%r14d
   10c50:	cmp    $0xf,%r14d
   10c54:	jg     10b7b <F_0_714+0x54a9>
   10c5a:	shl    $0x4,%r14d
   10c5e:	mov    -0x128(%rbp),%rcx
   10c65:	lea    (%rcx,%r14,1),%eax
   10c69:	movslq %eax,%rax
   10c6c:	movslq (%r8,%rax,4),%r14
   10c70:	movsbq 0x400(%r8,%rax,1),%rax
   10c79:	cmp    $0x1f,%edx
   10c7c:	jg     10f1f <F_0_714+0x584d>
   10c82:	mov    %rdi,%r15
   10c85:	shl    %cl,%r12
   10c88:	lea    -0x1(%r12),%edi
   10c8d:	mov    -0x58(%rbp),%r12
   10c91:	add    %r12d,%r11d
   10c94:	and    %r11d,%edi
   10c97:	movslq %edi,%rdi
   10c9a:	mov    %rcx,%r11
   10c9d:	mov    %rax,%rcx
   10ca0:	shl    %cl,%r15
   10ca3:	mov    %rcx,%rax
   10ca6:	or     %r15,%r14
   10ca9:	mov    %r11,%rcx
   10cac:	shl    %cl,%r14
   10caf:	or     %r14,%rdi
   10cb2:	add    %edx,%eax
   10cb4:	lea    (%rcx,%rax,1),%edx
   10cb7:	mov    $0x1,%r12d
   10cbd:	lea    0x385f0(%rip),%rax        # 492b4 <jpeg_nbits_table>
   10cc4:	xor    %r14d,%r14d
   10cc7:	jmpq   10b45 <F_0_714+0x5473>
   10ccc:	mov    %rcx,%r15
   10ccf:	lea    0x38(%rdx),%ecx
   10cd2:	mov    %rdi,%rax
   10cd5:	shr    %cl,%rax
   10cd8:	mov    %al,0x0(%r13)
   10cdc:	lea    0x1(%r13),%rcx
   10ce0:	cmp    $0xff,%al
   10ce2:	je     10f45 <F_0_714+0x5873>
   10ce8:	mov    %rcx,%rax
   10ceb:	jmpq   10f4c <F_0_714+0x587a>
   10cf0:	movb   $0x0,(%rcx)
   10cf3:	lea    0x2(%r13),%r8
   10cf7:	lea    0x30(%rdx),%ecx
   10cfa:	mov    %rdi,%r13
   10cfd:	shr    %cl,%r13
   10d00:	mov    %r13b,(%r8)
   10d03:	lea    0x1(%r8),%rcx
   10d07:	cmp    $0xff,%r13b
   10d0b:	je     10f6e <F_0_714+0x589c>
   10d11:	mov    %rcx,%r8
   10d14:	jmpq   10f75 <F_0_714+0x58a3>
   10d19:	movb   $0x0,(%rcx)
   10d1c:	add    $0x2,%r8
   10d20:	lea    0x28(%rdx),%ecx
   10d23:	mov    %rdi,%r13
   10d26:	shr    %cl,%r13
   10d29:	mov    %r13b,(%r8)
   10d2c:	lea    0x1(%r8),%rcx
   10d30:	cmp    $0xff,%r13b
   10d34:	je     10f97 <F_0_714+0x58c5>
   10d3a:	mov    %rcx,%r8
   10d3d:	jmpq   10f9e <F_0_714+0x58cc>
   10d42:	movb   $0x0,(%rcx)
   10d45:	add    $0x2,%r8
   10d49:	lea    -0x20(%rdx),%ecx
   10d4c:	mov    %rdi,%r13
   10d4f:	shr    %cl,%r13
   10d52:	mov    %rcx,%rdx
   10d55:	mov    %r13b,(%r8)
   10d58:	lea    0x1(%r8),%rcx
   10d5c:	cmp    $0xff,%r13b
   10d60:	je     10fd0 <F_0_714+0x58fe>
   10d66:	mov    %rcx,%r13
   10d69:	mov    %r15,%rcx
   10d6c:	mov    %rdi,%r15
   10d6f:	mov    -0x120(%rbp),%r8
   10d76:	jmpq   10339 <F_0_714+0x4c67>
   10d7b:	movb   $0x0,(%rcx)
   10d7e:	lea    0x2(%r8),%r13
   10d82:	mov    %r15,%rcx
   10d85:	mov    %rdi,%r15
   10d88:	mov    -0x120(%rbp),%r8
   10d8f:	jmpq   100e9 <F_0_714+0x4a17>
   10d94:	add    $0x1,%r14d
   10d98:	movswq 0x78(%rsi),%r11
   10d9d:	test   %r11w,%r11w
   10da1:	je     10fe9 <F_0_714+0x5917>
   10da7:	mov    %r11,%r15
   10daa:	sar    $0x1f,%r15d
   10dae:	mov    %r15,-0x50(%rbp)
   10db2:	mov    %r15,%rcx
   10db5:	xor    %r11d,%ecx
   10db8:	sub    %r15d,%ecx
   10dbb:	movslq %ecx,%rcx
   10dbe:	movzbl (%rcx,%rax,1),%eax
   10dc2:	mov    %rax,-0x128(%rbp)
   10dc9:	jmpq   110f8 <F_0_714+0x5a26>
   10dce:	cmp    $0x2f,%edx
   10dd1:	jle    10e91 <F_0_714+0x57bf>
   10dd7:	lea    0x38(%rdx),%ecx
   10dda:	mov    %rdi,%r15
   10ddd:	shr    %cl,%r15
   10de0:	mov    %r15b,0x0(%r13)
   10de4:	lea    0x1(%r13),%rax
   10de8:	cmp    $0xff,%r15b
   10dec:	jne    10df5 <F_0_714+0x5723>
   10dee:	movb   $0x0,(%rax)
   10df1:	lea    0x2(%r13),%rax
   10df5:	lea    0x30(%rdx),%ecx
   10df8:	mov    %rdi,%r15
   10dfb:	shr    %cl,%r15
   10dfe:	mov    %r15b,(%rax)
   10e01:	lea    0x1(%rax),%r13
   10e05:	cmp    $0xff,%r15b
   10e09:	jne    10e14 <F_0_714+0x5742>
   10e0b:	movb   $0x0,0x0(%r13)
   10e10:	lea    0x2(%rax),%r13
   10e14:	lea    0x28(%rdx),%ecx
   10e17:	mov    %rdi,%r15
   10e1a:	shr    %cl,%r15
   10e1d:	mov    %r15b,0x0(%r13)
   10e21:	lea    0x1(%r13),%rax
   10e25:	cmp    $0xff,%r15b
   10e29:	jne    10e32 <F_0_714+0x5760>
   10e2b:	movb   $0x0,(%rax)
   10e2e:	lea    0x2(%r13),%rax
   10e32:	lea    0x20(%rdx),%ecx
   10e35:	mov    %rdi,%r15
   10e38:	shr    %cl,%r15
   10e3b:	mov    %r15b,(%rax)
   10e3e:	lea    0x1(%rax),%r13
   10e42:	cmp    $0xff,%r15b
   10e46:	jne    10e51 <F_0_714+0x577f>
   10e48:	movb   $0x0,0x0(%r13)
   10e4d:	lea    0x2(%rax),%r13
   10e51:	lea    0x18(%rdx),%ecx
   10e54:	mov    %rdi,%r15
   10e57:	shr    %cl,%r15
   10e5a:	mov    %r15b,0x0(%r13)
   10e5e:	lea    0x1(%r13),%rax
   10e62:	cmp    $0xff,%r15b
   10e66:	jne    10e6f <F_0_714+0x579d>
   10e68:	movb   $0x0,(%rax)
   10e6b:	lea    0x2(%r13),%rax
   10e6f:	lea    -0x30(%rdx),%ecx
   10e72:	mov    %rdi,%r15
   10e75:	shr    %cl,%r15
   10e78:	mov    %rcx,%rdx
   10e7b:	mov    %r15b,(%rax)
   10e7e:	lea    0x1(%rax),%r13
   10e82:	cmp    $0xff,%r15b
   10e86:	jne    10e91 <F_0_714+0x57bf>
   10e88:	movb   $0x0,0x0(%r13)
   10e8d:	lea    0x2(%rax),%r13
   10e91:	mov    %rbx,%rcx
   10e94:	shl    %cl,%rdi
   10e97:	mov    %rcx,%rbx
   10e9a:	or     %r9,%rdi
   10e9d:	add    %ebx,%edx
   10e9f:	add    $0xfffffff0,%r14d
   10ea3:	cmp    $0xf,%r14d
   10ea7:	jg     10dce <F_0_714+0x56fc>
   10ead:	shl    $0x4,%r14d
   10eb1:	mov    -0x128(%rbp),%rcx
   10eb8:	lea    (%rcx,%r14,1),%eax
   10ebc:	movslq %eax,%rax
   10ebf:	movslq (%r8,%rax,4),%r14
   10ec3:	movsbq 0x400(%r8,%rax,1),%rax
   10ecc:	cmp    $0x1f,%edx
   10ecf:	jg     11176 <F_0_714+0x5aa4>
   10ed5:	mov    %rdi,%r15
   10ed8:	shl    %cl,%r12
   10edb:	lea    -0x1(%r12),%edi
   10ee0:	mov    -0x58(%rbp),%r12
   10ee4:	add    %r12d,%r11d
   10ee7:	and    %r11d,%edi
   10eea:	movslq %edi,%rdi
   10eed:	mov    %rcx,%r11
   10ef0:	mov    %rax,%rcx
   10ef3:	shl    %cl,%r15
   10ef6:	mov    %rcx,%rax
   10ef9:	or     %r15,%r14
   10efc:	mov    %r11,%rcx
   10eff:	shl    %cl,%r14
   10f02:	or     %r14,%rdi
   10f05:	add    %edx,%eax
   10f07:	lea    (%rcx,%rax,1),%edx
   10f0a:	mov    $0x1,%r12d
   10f10:	lea    0x3839d(%rip),%rax        # 492b4 <jpeg_nbits_table>
   10f17:	xor    %r14d,%r14d
   10f1a:	jmpq   10d98 <F_0_714+0x56c6>
   10f1f:	mov    %rcx,%r15
   10f22:	lea    0x38(%rdx),%ecx
   10f25:	mov    %rdi,%r10
   10f28:	shr    %cl,%r10
   10f2b:	mov    %r10b,0x0(%r13)
   10f2f:	lea    0x1(%r13),%rcx
   10f33:	cmp    $0xff,%r10b
   10f37:	je     1119c <F_0_714+0x5aca>
   10f3d:	mov    %rcx,%r10
   10f40:	jmpq   111a3 <F_0_714+0x5ad1>
   10f45:	movb   $0x0,(%rcx)
   10f48:	lea    0x2(%r13),%rax
   10f4c:	lea    0x30(%rdx),%ecx
   10f4f:	mov    %rdi,%r13
   10f52:	shr    %cl,%r13
   10f55:	mov    %r13b,(%rax)
   10f58:	lea    0x1(%rax),%rcx
   10f5c:	cmp    $0xff,%r13b
   10f60:	je     111c5 <F_0_714+0x5af3>
   10f66:	mov    %rcx,%rax
   10f69:	jmpq   111cc <F_0_714+0x5afa>
   10f6e:	movb   $0x0,(%rcx)
   10f71:	add    $0x2,%r8
   10f75:	lea    0x28(%rdx),%ecx
   10f78:	mov    %rdi,%r13
   10f7b:	shr    %cl,%r13
   10f7e:	mov    %r13b,(%r8)
   10f81:	lea    0x1(%r8),%rcx
   10f85:	cmp    $0xff,%r13b
   10f89:	je     111ee <F_0_714+0x5b1c>
   10f8f:	mov    %rcx,%r8
   10f92:	jmpq   111f5 <F_0_714+0x5b23>
   10f97:	movb   $0x0,(%rcx)
   10f9a:	add    $0x2,%r8
   10f9e:	lea    -0x20(%rdx),%ecx
   10fa1:	mov    %rdi,%r13
   10fa4:	shr    %cl,%r13
   10fa7:	mov    %rcx,%rdx
   10faa:	mov    %r13b,(%r8)
   10fad:	lea    0x1(%r8),%rcx
   10fb1:	cmp    $0xff,%r13b
   10fb5:	je     11227 <F_0_714+0x5b55>
   10fbb:	mov    %rcx,%r13
   10fbe:	mov    %r15,%rcx
   10fc1:	mov    %rdi,%r15
   10fc4:	mov    -0x120(%rbp),%r8
   10fcb:	jmpq   10589 <F_0_714+0x4eb7>
   10fd0:	movb   $0x0,(%rcx)
   10fd3:	lea    0x2(%r8),%r13
   10fd7:	mov    %r15,%rcx
   10fda:	mov    %rdi,%r15
   10fdd:	mov    -0x120(%rbp),%r8
   10fe4:	jmpq   10339 <F_0_714+0x4c67>
   10fe9:	add    $0x1,%r14d
   10fed:	movswq 0x7a(%rsi),%r11
   10ff2:	test   %r11w,%r11w
   10ff6:	je     11240 <F_0_714+0x5b6e>
   10ffc:	mov    %r11,%r15
   10fff:	sar    $0x1f,%r15d
   11003:	mov    %r15,-0x50(%rbp)
   11007:	mov    %r15,%rcx
   1100a:	xor    %r11d,%ecx
   1100d:	sub    %r15d,%ecx
   11010:	movslq %ecx,%rcx
   11013:	movzbl (%rcx,%rax,1),%eax
   11017:	mov    %rax,-0x128(%rbp)
   1101e:	jmpq   1134f <F_0_714+0x5c7d>
   11023:	cmp    $0x2f,%edx
   11026:	jle    110e6 <F_0_714+0x5a14>
   1102c:	lea    0x38(%rdx),%ecx
   1102f:	mov    %rdi,%r15
   11032:	shr    %cl,%r15
   11035:	mov    %r15b,0x0(%r13)
   11039:	lea    0x1(%r13),%rax
   1103d:	cmp    $0xff,%r15b
   11041:	jne    1104a <F_0_714+0x5978>
   11043:	movb   $0x0,(%rax)
   11046:	lea    0x2(%r13),%rax
   1104a:	lea    0x30(%rdx),%ecx
   1104d:	mov    %rdi,%r15
   11050:	shr    %cl,%r15
   11053:	mov    %r15b,(%rax)
   11056:	lea    0x1(%rax),%r13
   1105a:	cmp    $0xff,%r15b
   1105e:	jne    11069 <F_0_714+0x5997>
   11060:	movb   $0x0,0x0(%r13)
   11065:	lea    0x2(%rax),%r13
   11069:	lea    0x28(%rdx),%ecx
   1106c:	mov    %rdi,%r15
   1106f:	shr    %cl,%r15
   11072:	mov    %r15b,0x0(%r13)
   11076:	lea    0x1(%r13),%rax
   1107a:	cmp    $0xff,%r15b
   1107e:	jne    11087 <F_0_714+0x59b5>
   11080:	movb   $0x0,(%rax)
   11083:	lea    0x2(%r13),%rax
   11087:	lea    0x20(%rdx),%ecx
   1108a:	mov    %rdi,%r15
   1108d:	shr    %cl,%r15
   11090:	mov    %r15b,(%rax)
   11093:	lea    0x1(%rax),%r13
   11097:	cmp    $0xff,%r15b
   1109b:	jne    110a6 <F_0_714+0x59d4>
   1109d:	movb   $0x0,0x0(%r13)
   110a2:	lea    0x2(%rax),%r13
   110a6:	lea    0x18(%rdx),%ecx
   110a9:	mov    %rdi,%r15
   110ac:	shr    %cl,%r15
   110af:	mov    %r15b,0x0(%r13)
   110b3:	lea    0x1(%r13),%rax
   110b7:	cmp    $0xff,%r15b
   110bb:	jne    110c4 <F_0_714+0x59f2>
   110bd:	movb   $0x0,(%rax)
   110c0:	lea    0x2(%r13),%rax
   110c4:	lea    -0x30(%rdx),%ecx
   110c7:	mov    %rdi,%r15
   110ca:	shr    %cl,%r15
   110cd:	mov    %rcx,%rdx
   110d0:	mov    %r15b,(%rax)
   110d3:	lea    0x1(%rax),%r13
   110d7:	cmp    $0xff,%r15b
   110db:	jne    110e6 <F_0_714+0x5a14>
   110dd:	movb   $0x0,0x0(%r13)
   110e2:	lea    0x2(%rax),%r13
   110e6:	mov    %rbx,%rcx
   110e9:	shl    %cl,%rdi
   110ec:	mov    %rcx,%rbx
   110ef:	or     %r9,%rdi
   110f2:	add    %ebx,%edx
   110f4:	add    $0xfffffff0,%r14d
   110f8:	cmp    $0xf,%r14d
   110fc:	jg     11023 <F_0_714+0x5951>
   11102:	shl    $0x4,%r14d
   11106:	mov    -0x128(%rbp),%rcx
   1110d:	lea    (%rcx,%r14,1),%eax
   11111:	movslq %eax,%r14
   11114:	movslq (%r8,%r14,4),%rax
   11118:	movsbq 0x400(%r8,%r14,1),%r14
   11121:	cmp    $0x1f,%edx
   11124:	jg     113cd <F_0_714+0x5cfb>
   1112a:	mov    %rdi,%r15
   1112d:	shl    %cl,%r12
   11130:	lea    -0x1(%r12),%edi
   11135:	mov    -0x50(%rbp),%r12
   11139:	add    %r12d,%r11d
   1113c:	and    %r11d,%edi
   1113f:	movslq %edi,%rdi
   11142:	mov    %rcx,%r12
   11145:	mov    %r14,%rcx
   11148:	shl    %cl,%r15
   1114b:	mov    %rcx,%r11
   1114e:	or     %r15,%rax
   11151:	mov    %r12,%rcx
   11154:	shl    %cl,%rax
   11157:	or     %rax,%rdi
   1115a:	lea    (%rdx,%r11,1),%eax
   1115e:	lea    (%rcx,%rax,1),%edx
   11161:	mov    $0x1,%r12d
   11167:	lea    0x38146(%rip),%rax        # 492b4 <jpeg_nbits_table>
   1116e:	xor    %r14d,%r14d
   11171:	jmpq   10fed <F_0_714+0x591b>
   11176:	mov    %rcx,%r15
   11179:	lea    0x38(%rdx),%ecx
   1117c:	mov    %rdi,%r10
   1117f:	shr    %cl,%r10
   11182:	mov    %r10b,0x0(%r13)
   11186:	lea    0x1(%r13),%rcx
   1118a:	cmp    $0xff,%r10b
   1118e:	je     113f3 <F_0_714+0x5d21>
   11194:	mov    %rcx,%r10
   11197:	jmpq   113fa <F_0_714+0x5d28>
   1119c:	movb   $0x0,(%rcx)
   1119f:	lea    0x2(%r13),%r10
   111a3:	lea    0x30(%rdx),%ecx
   111a6:	mov    %rdi,%r13
   111a9:	shr    %cl,%r13
   111ac:	mov    %r13b,(%r10)
   111af:	lea    0x1(%r10),%rcx
   111b3:	cmp    $0xff,%r13b
   111b7:	je     1141c <F_0_714+0x5d4a>
   111bd:	mov    %rcx,%r10
   111c0:	jmpq   11423 <F_0_714+0x5d51>
   111c5:	movb   $0x0,(%rcx)
   111c8:	add    $0x2,%rax
   111cc:	lea    0x28(%rdx),%ecx
   111cf:	mov    %rdi,%r13
   111d2:	shr    %cl,%r13
   111d5:	mov    %r13b,(%rax)
   111d8:	lea    0x1(%rax),%rcx
   111dc:	cmp    $0xff,%r13b
   111e0:	je     11445 <F_0_714+0x5d73>
   111e6:	mov    %rcx,%rax
   111e9:	jmpq   1144c <F_0_714+0x5d7a>
   111ee:	movb   $0x0,(%rcx)
   111f1:	add    $0x2,%r8
   111f5:	lea    -0x20(%rdx),%ecx
   111f8:	mov    %rdi,%r13
   111fb:	shr    %cl,%r13
   111fe:	mov    %rcx,%rdx
   11201:	mov    %r13b,(%r8)
   11204:	lea    0x1(%r8),%rcx
   11208:	cmp    $0xff,%r13b
   1120c:	je     1147e <F_0_714+0x5dac>
   11212:	mov    %rcx,%r13
   11215:	mov    %r15,%rcx
   11218:	mov    %rdi,%r15
   1121b:	mov    -0x120(%rbp),%r8
   11222:	jmpq   107dc <F_0_714+0x510a>
   11227:	movb   $0x0,(%rcx)
   1122a:	lea    0x2(%r8),%r13
   1122e:	mov    %r15,%rcx
   11231:	mov    %rdi,%r15
   11234:	mov    -0x120(%rbp),%r8
   1123b:	jmpq   10589 <F_0_714+0x4eb7>
   11240:	add    $0x1,%r14d
   11244:	movswq 0x6c(%rsi),%r11
   11249:	test   %r11w,%r11w
   1124d:	je     11497 <F_0_714+0x5dc5>
   11253:	mov    %r11,%r15
   11256:	sar    $0x1f,%r15d
   1125a:	mov    %r15,-0x48(%rbp)
   1125e:	mov    %r15,%rcx
   11261:	xor    %r11d,%ecx
   11264:	sub    %r15d,%ecx
   11267:	movslq %ecx,%rcx
   1126a:	movzbl (%rcx,%rax,1),%eax
   1126e:	mov    %rax,-0x128(%rbp)
   11275:	jmpq   115a6 <F_0_714+0x5ed4>
   1127a:	cmp    $0x2f,%edx
   1127d:	jle    1133d <F_0_714+0x5c6b>
   11283:	lea    0x38(%rdx),%ecx
   11286:	mov    %rdi,%r15
   11289:	shr    %cl,%r15
   1128c:	mov    %r15b,0x0(%r13)
   11290:	lea    0x1(%r13),%rax
   11294:	cmp    $0xff,%r15b
   11298:	jne    112a1 <F_0_714+0x5bcf>
   1129a:	movb   $0x0,(%rax)
   1129d:	lea    0x2(%r13),%rax
   112a1:	lea    0x30(%rdx),%ecx
   112a4:	mov    %rdi,%r15
   112a7:	shr    %cl,%r15
   112aa:	mov    %r15b,(%rax)
   112ad:	lea    0x1(%rax),%r13
   112b1:	cmp    $0xff,%r15b
   112b5:	jne    112c0 <F_0_714+0x5bee>
   112b7:	movb   $0x0,0x0(%r13)
   112bc:	lea    0x2(%rax),%r13
   112c0:	lea    0x28(%rdx),%ecx
   112c3:	mov    %rdi,%r15
   112c6:	shr    %cl,%r15
   112c9:	mov    %r15b,0x0(%r13)
   112cd:	lea    0x1(%r13),%rax
   112d1:	cmp    $0xff,%r15b
   112d5:	jne    112de <F_0_714+0x5c0c>
   112d7:	movb   $0x0,(%rax)
   112da:	lea    0x2(%r13),%rax
   112de:	lea    0x20(%rdx),%ecx
   112e1:	mov    %rdi,%r15
   112e4:	shr    %cl,%r15
   112e7:	mov    %r15b,(%rax)
   112ea:	lea    0x1(%rax),%r13
   112ee:	cmp    $0xff,%r15b
   112f2:	jne    112fd <F_0_714+0x5c2b>
   112f4:	movb   $0x0,0x0(%r13)
   112f9:	lea    0x2(%rax),%r13
   112fd:	lea    0x18(%rdx),%ecx
   11300:	mov    %rdi,%r15
   11303:	shr    %cl,%r15
   11306:	mov    %r15b,0x0(%r13)
   1130a:	lea    0x1(%r13),%rax
   1130e:	cmp    $0xff,%r15b
   11312:	jne    1131b <F_0_714+0x5c49>
   11314:	movb   $0x0,(%rax)
   11317:	lea    0x2(%r13),%rax
   1131b:	lea    -0x30(%rdx),%ecx
   1131e:	mov    %rdi,%r15
   11321:	shr    %cl,%r15
   11324:	mov    %rcx,%rdx
   11327:	mov    %r15b,(%rax)
   1132a:	lea    0x1(%rax),%r13
   1132e:	cmp    $0xff,%r15b
   11332:	jne    1133d <F_0_714+0x5c6b>
   11334:	movb   $0x0,0x0(%r13)
   11339:	lea    0x2(%rax),%r13
   1133d:	mov    %rbx,%rcx
   11340:	shl    %cl,%rdi
   11343:	mov    %rcx,%rbx
   11346:	or     %r9,%rdi
   11349:	add    %ebx,%edx
   1134b:	add    $0xfffffff0,%r14d
   1134f:	cmp    $0xf,%r14d
   11353:	jg     1127a <F_0_714+0x5ba8>
   11359:	shl    $0x4,%r14d
   1135d:	mov    -0x128(%rbp),%rcx
   11364:	lea    (%rcx,%r14,1),%eax
   11368:	movslq %eax,%r14
   1136b:	movslq (%r8,%r14,4),%rax
   1136f:	movsbq 0x400(%r8,%r14,1),%r14
   11378:	cmp    $0x1f,%edx
   1137b:	jg     11624 <F_0_714+0x5f52>
   11381:	mov    %rdi,%r15
   11384:	shl    %cl,%r12
   11387:	lea    -0x1(%r12),%edi
   1138c:	mov    -0x50(%rbp),%r12
   11390:	add    %r12d,%r11d
   11393:	and    %r11d,%edi
   11396:	movslq %edi,%rdi
   11399:	mov    %rcx,%r12
   1139c:	mov    %r14,%rcx
   1139f:	shl    %cl,%r15
   113a2:	mov    %rcx,%r11
   113a5:	or     %r15,%rax
   113a8:	mov    %r12,%rcx
   113ab:	shl    %cl,%rax
   113ae:	or     %rax,%rdi
   113b1:	lea    (%rdx,%r11,1),%eax
   113b5:	lea    (%rcx,%rax,1),%edx
   113b8:	mov    $0x1,%r12d
   113be:	lea    0x37eef(%rip),%rax        # 492b4 <jpeg_nbits_table>
   113c5:	xor    %r14d,%r14d
   113c8:	jmpq   11244 <F_0_714+0x5b72>
   113cd:	mov    %rcx,%r15
   113d0:	lea    0x38(%rdx),%ecx
   113d3:	mov    %rdi,%r10
   113d6:	shr    %cl,%r10
   113d9:	mov    %r10b,0x0(%r13)
   113dd:	lea    0x1(%r13),%rcx
   113e1:	cmp    $0xff,%r10b
   113e5:	je     1164a <F_0_714+0x5f78>
   113eb:	mov    %rcx,%r10
   113ee:	jmpq   11651 <F_0_714+0x5f7f>
   113f3:	movb   $0x0,(%rcx)
   113f6:	lea    0x2(%r13),%r10
   113fa:	lea    0x30(%rdx),%ecx
   113fd:	mov    %rdi,%r13
   11400:	shr    %cl,%r13
   11403:	mov    %r13b,(%r10)
   11406:	lea    0x1(%r10),%rcx
   1140a:	cmp    $0xff,%r13b
   1140e:	je     11673 <F_0_714+0x5fa1>
   11414:	mov    %rcx,%r10
   11417:	jmpq   1167a <F_0_714+0x5fa8>
   1141c:	movb   $0x0,(%rcx)
   1141f:	add    $0x2,%r10
   11423:	lea    0x28(%rdx),%ecx
   11426:	mov    %rdi,%r13
   11429:	shr    %cl,%r13
   1142c:	mov    %r13b,(%r10)
   1142f:	lea    0x1(%r10),%rcx
   11433:	cmp    $0xff,%r13b
   11437:	je     1169c <F_0_714+0x5fca>
   1143d:	mov    %rcx,%r10
   11440:	jmpq   116a3 <F_0_714+0x5fd1>
   11445:	movb   $0x0,(%rcx)
   11448:	add    $0x2,%rax
   1144c:	lea    -0x20(%rdx),%ecx
   1144f:	mov    %rdi,%r13
   11452:	shr    %cl,%r13
   11455:	mov    %rcx,%rdx
   11458:	mov    %r13b,(%rax)
   1145b:	lea    0x1(%rax),%rcx
   1145f:	cmp    $0xff,%r13b
   11463:	je     116d2 <F_0_714+0x6000>
   11469:	mov    %rcx,%r13
   1146c:	mov    %r15,%rcx
   1146f:	mov    %rdi,%r15
   11472:	lea    0x37e3b(%rip),%rax        # 492b4 <jpeg_nbits_table>
   11479:	jmpq   10a30 <F_0_714+0x535e>
   1147e:	movb   $0x0,(%rcx)
   11481:	lea    0x2(%r8),%r13
   11485:	mov    %r15,%rcx
   11488:	mov    %rdi,%r15
   1148b:	mov    -0x120(%rbp),%r8
   11492:	jmpq   107dc <F_0_714+0x510a>
   11497:	add    $0x1,%r14d
   1149b:	movswq 0x5e(%rsi),%r11
   114a0:	test   %r11w,%r11w
   114a4:	je     116eb <F_0_714+0x6019>
   114aa:	mov    %r11,%r15
   114ad:	sar    $0x1f,%r15d
   114b1:	mov    %r15,-0x48(%rbp)
   114b5:	mov    %r15,%rcx
   114b8:	xor    %r11d,%ecx
   114bb:	sub    %r15d,%ecx
   114be:	movslq %ecx,%rcx
   114c1:	movzbl (%rcx,%rax,1),%eax
   114c5:	mov    %rax,-0x128(%rbp)
   114cc:	jmpq   117fa <F_0_714+0x6128>
   114d1:	cmp    $0x2f,%edx
   114d4:	jle    11594 <F_0_714+0x5ec2>
   114da:	lea    0x38(%rdx),%ecx
   114dd:	mov    %rdi,%r15
   114e0:	shr    %cl,%r15
   114e3:	mov    %r15b,0x0(%r13)
   114e7:	lea    0x1(%r13),%rax
   114eb:	cmp    $0xff,%r15b
   114ef:	jne    114f8 <F_0_714+0x5e26>
   114f1:	movb   $0x0,(%rax)
   114f4:	lea    0x2(%r13),%rax
   114f8:	lea    0x30(%rdx),%ecx
   114fb:	mov    %rdi,%r15
   114fe:	shr    %cl,%r15
   11501:	mov    %r15b,(%rax)
   11504:	lea    0x1(%rax),%r13
   11508:	cmp    $0xff,%r15b
   1150c:	jne    11517 <F_0_714+0x5e45>
   1150e:	movb   $0x0,0x0(%r13)
   11513:	lea    0x2(%rax),%r13
   11517:	lea    0x28(%rdx),%ecx
   1151a:	mov    %rdi,%r15
   1151d:	shr    %cl,%r15
   11520:	mov    %r15b,0x0(%r13)
   11524:	lea    0x1(%r13),%rax
   11528:	cmp    $0xff,%r15b
   1152c:	jne    11535 <F_0_714+0x5e63>
   1152e:	movb   $0x0,(%rax)
   11531:	lea    0x2(%r13),%rax
   11535:	lea    0x20(%rdx),%ecx
   11538:	mov    %rdi,%r15
   1153b:	shr    %cl,%r15
   1153e:	mov    %r15b,(%rax)
   11541:	lea    0x1(%rax),%r13
   11545:	cmp    $0xff,%r15b
   11549:	jne    11554 <F_0_714+0x5e82>
   1154b:	movb   $0x0,0x0(%r13)
   11550:	lea    0x2(%rax),%r13
   11554:	lea    0x18(%rdx),%ecx
   11557:	mov    %rdi,%r15
   1155a:	shr    %cl,%r15
   1155d:	mov    %r15b,0x0(%r13)
   11561:	lea    0x1(%r13),%rax
   11565:	cmp    $0xff,%r15b
   11569:	jne    11572 <F_0_714+0x5ea0>
   1156b:	movb   $0x0,(%rax)
   1156e:	lea    0x2(%r13),%rax
   11572:	lea    -0x30(%rdx),%ecx
   11575:	mov    %rdi,%r15
   11578:	shr    %cl,%r15
   1157b:	mov    %rcx,%rdx
   1157e:	mov    %r15b,(%rax)
   11581:	lea    0x1(%rax),%r13
   11585:	cmp    $0xff,%r15b
   11589:	jne    11594 <F_0_714+0x5ec2>
   1158b:	movb   $0x0,0x0(%r13)
   11590:	lea    0x2(%rax),%r13
   11594:	mov    %rbx,%rcx
   11597:	shl    %cl,%rdi
   1159a:	mov    %rcx,%rbx
   1159d:	or     %r9,%rdi
   115a0:	add    %ebx,%edx
   115a2:	add    $0xfffffff0,%r14d
   115a6:	cmp    $0xf,%r14d
   115aa:	jg     114d1 <F_0_714+0x5dff>
   115b0:	shl    $0x4,%r14d
   115b4:	mov    -0x128(%rbp),%rcx
   115bb:	lea    (%rcx,%r14,1),%eax
   115bf:	movslq %eax,%r14
   115c2:	movslq (%r8,%r14,4),%rax
   115c6:	movsbq 0x400(%r8,%r14,1),%r14
   115cf:	cmp    $0x1f,%edx
   115d2:	jg     11878 <F_0_714+0x61a6>
   115d8:	mov    %rdi,%r15
   115db:	shl    %cl,%r12
   115de:	lea    -0x1(%r12),%edi
   115e3:	mov    -0x48(%rbp),%r12
   115e7:	add    %r12d,%r11d
   115ea:	and    %r11d,%edi
   115ed:	movslq %edi,%rdi
   115f0:	mov    %rcx,%r12
   115f3:	mov    %r14,%rcx
   115f6:	shl    %cl,%r15
   115f9:	mov    %rcx,%r11
   115fc:	or     %r15,%rax
   115ff:	mov    %r12,%rcx
   11602:	shl    %cl,%rax
   11605:	or     %rax,%rdi
   11608:	lea    (%rdx,%r11,1),%eax
   1160c:	lea    (%rcx,%rax,1),%edx
   1160f:	mov    $0x1,%r12d
   11615:	lea    0x37c98(%rip),%rax        # 492b4 <jpeg_nbits_table>
   1161c:	xor    %r14d,%r14d
   1161f:	jmpq   1149b <F_0_714+0x5dc9>
   11624:	mov    %rcx,%r15
   11627:	lea    0x38(%rdx),%ecx
   1162a:	mov    %rdi,%r10
   1162d:	shr    %cl,%r10
   11630:	mov    %r10b,0x0(%r13)
   11634:	lea    0x1(%r13),%rcx
   11638:	cmp    $0xff,%r10b
   1163c:	je     1189e <F_0_714+0x61cc>
   11642:	mov    %rcx,%r10
   11645:	jmpq   118a5 <F_0_714+0x61d3>
   1164a:	movb   $0x0,(%rcx)
   1164d:	lea    0x2(%r13),%r10
   11651:	lea    0x30(%rdx),%ecx
   11654:	mov    %rdi,%r13
   11657:	shr    %cl,%r13
   1165a:	mov    %r13b,(%r10)
   1165d:	lea    0x1(%r10),%rcx
   11661:	cmp    $0xff,%r13b
   11665:	je     118c7 <F_0_714+0x61f5>
   1166b:	mov    %rcx,%r10
   1166e:	jmpq   118ce <F_0_714+0x61fc>
   11673:	movb   $0x0,(%rcx)
   11676:	add    $0x2,%r10
   1167a:	lea    0x28(%rdx),%ecx
   1167d:	mov    %rdi,%r13
   11680:	shr    %cl,%r13
   11683:	mov    %r13b,(%r10)
   11686:	lea    0x1(%r10),%rcx
   1168a:	cmp    $0xff,%r13b
   1168e:	je     118f0 <F_0_714+0x621e>
   11694:	mov    %rcx,%r10
   11697:	jmpq   118f7 <F_0_714+0x6225>
   1169c:	movb   $0x0,(%rcx)
   1169f:	add    $0x2,%r10
   116a3:	lea    -0x20(%rdx),%ecx
   116a6:	mov    %rdi,%r13
   116a9:	shr    %cl,%r13
   116ac:	mov    %rcx,%rdx
   116af:	mov    %r13b,(%r10)
   116b2:	lea    0x1(%r10),%rcx
   116b6:	cmp    $0xff,%r13b
   116ba:	je     11926 <F_0_714+0x6254>
   116c0:	mov    %rcx,%r13
   116c3:	mov    %r15,%rcx
   116c6:	mov    %rdi,%r15
   116c9:	mov    -0x38(%rbp),%r10
   116cd:	jmpq   10c85 <F_0_714+0x55b3>
   116d2:	movb   $0x0,(%rcx)
   116d5:	lea    0x2(%rax),%r13
   116d9:	mov    %r15,%rcx
   116dc:	mov    %rdi,%r15
   116df:	lea    0x37bce(%rip),%rax        # 492b4 <jpeg_nbits_table>
   116e6:	jmpq   10a30 <F_0_714+0x535e>
   116eb:	add    $0x1,%r14d
   116ef:	movswq 0x6e(%rsi),%r11
   116f4:	test   %r11w,%r11w
   116f8:	je     1193c <F_0_714+0x626a>
   116fe:	mov    %r11,%r15
   11701:	sar    $0x1f,%r15d
   11705:	mov    %r15,-0x40(%rbp)
   11709:	mov    %r15,%rcx
   1170c:	xor    %r11d,%ecx
   1170f:	sub    %r15d,%ecx
   11712:	movslq %ecx,%rcx
   11715:	movzbl (%rcx,%rax,1),%eax
   11719:	mov    %rax,-0x128(%rbp)
   11720:	jmpq   11a4b <F_0_714+0x6379>
   11725:	cmp    $0x2f,%edx
   11728:	jle    117e8 <F_0_714+0x6116>
   1172e:	lea    0x38(%rdx),%ecx
   11731:	mov    %rdi,%r15
   11734:	shr    %cl,%r15
   11737:	mov    %r15b,0x0(%r13)
   1173b:	lea    0x1(%r13),%rax
   1173f:	cmp    $0xff,%r15b
   11743:	jne    1174c <F_0_714+0x607a>
   11745:	movb   $0x0,(%rax)
   11748:	lea    0x2(%r13),%rax
   1174c:	lea    0x30(%rdx),%ecx
   1174f:	mov    %rdi,%r15
   11752:	shr    %cl,%r15
   11755:	mov    %r15b,(%rax)
   11758:	lea    0x1(%rax),%r13
   1175c:	cmp    $0xff,%r15b
   11760:	jne    1176b <F_0_714+0x6099>
   11762:	movb   $0x0,0x0(%r13)
   11767:	lea    0x2(%rax),%r13
   1176b:	lea    0x28(%rdx),%ecx
   1176e:	mov    %rdi,%r15
   11771:	shr    %cl,%r15
   11774:	mov    %r15b,0x0(%r13)
   11778:	lea    0x1(%r13),%rax
   1177c:	cmp    $0xff,%r15b
   11780:	jne    11789 <F_0_714+0x60b7>
   11782:	movb   $0x0,(%rax)
   11785:	lea    0x2(%r13),%rax
   11789:	lea    0x20(%rdx),%ecx
   1178c:	mov    %rdi,%r15
   1178f:	shr    %cl,%r15
   11792:	mov    %r15b,(%rax)
   11795:	lea    0x1(%rax),%r13
   11799:	cmp    $0xff,%r15b
   1179d:	jne    117a8 <F_0_714+0x60d6>
   1179f:	movb   $0x0,0x0(%r13)
   117a4:	lea    0x2(%rax),%r13
   117a8:	lea    0x18(%rdx),%ecx
   117ab:	mov    %rdi,%r15
   117ae:	shr    %cl,%r15
   117b1:	mov    %r15b,0x0(%r13)
   117b5:	lea    0x1(%r13),%rax
   117b9:	cmp    $0xff,%r15b
   117bd:	jne    117c6 <F_0_714+0x60f4>
   117bf:	movb   $0x0,(%rax)
   117c2:	lea    0x2(%r13),%rax
   117c6:	lea    -0x30(%rdx),%ecx
   117c9:	mov    %rdi,%r15
   117cc:	shr    %cl,%r15
   117cf:	mov    %rcx,%rdx
   117d2:	mov    %r15b,(%rax)
   117d5:	lea    0x1(%rax),%r13
   117d9:	cmp    $0xff,%r15b
   117dd:	jne    117e8 <F_0_714+0x6116>
   117df:	movb   $0x0,0x0(%r13)
   117e4:	lea    0x2(%rax),%r13
   117e8:	mov    %rbx,%rcx
   117eb:	shl    %cl,%rdi
   117ee:	mov    %rcx,%rbx
   117f1:	or     %r9,%rdi
   117f4:	add    %ebx,%edx
   117f6:	add    $0xfffffff0,%r14d
   117fa:	cmp    $0xf,%r14d
   117fe:	jg     11725 <F_0_714+0x6053>
   11804:	shl    $0x4,%r14d
   11808:	mov    -0x128(%rbp),%rcx
   1180f:	lea    (%rcx,%r14,1),%eax
   11813:	movslq %eax,%r14
   11816:	movslq (%r8,%r14,4),%rax
   1181a:	movsbq 0x400(%r8,%r14,1),%r14
   11823:	cmp    $0x1f,%edx
   11826:	jg     11ac9 <F_0_714+0x63f7>
   1182c:	mov    %rdi,%r15
   1182f:	shl    %cl,%r12
   11832:	lea    -0x1(%r12),%edi
   11837:	mov    -0x48(%rbp),%r12
   1183b:	add    %r12d,%r11d
   1183e:	and    %r11d,%edi
   11841:	movslq %edi,%rdi
   11844:	mov    %rcx,%r12
   11847:	mov    %r14,%rcx
   1184a:	shl    %cl,%r15
   1184d:	mov    %rcx,%r11
   11850:	or     %r15,%rax
   11853:	mov    %r12,%rcx
   11856:	shl    %cl,%rax
   11859:	or     %rax,%rdi
   1185c:	lea    (%rdx,%r11,1),%eax
   11860:	lea    (%rcx,%rax,1),%edx
   11863:	mov    $0x1,%r12d
   11869:	lea    0x37a44(%rip),%rax        # 492b4 <jpeg_nbits_table>
   11870:	xor    %r14d,%r14d
   11873:	jmpq   116ef <F_0_714+0x601d>
   11878:	mov    %rcx,%r15
   1187b:	lea    0x38(%rdx),%ecx
   1187e:	mov    %rdi,%r10
   11881:	shr    %cl,%r10
   11884:	mov    %r10b,0x0(%r13)
   11888:	lea    0x1(%r13),%rcx
   1188c:	cmp    $0xff,%r10b
   11890:	je     11aef <F_0_714+0x641d>
   11896:	mov    %rcx,%r10
   11899:	jmpq   11af6 <F_0_714+0x6424>
   1189e:	movb   $0x0,(%rcx)
   118a1:	lea    0x2(%r13),%r10
   118a5:	lea    0x30(%rdx),%ecx
   118a8:	mov    %rdi,%r13
   118ab:	shr    %cl,%r13
   118ae:	mov    %r13b,(%r10)
   118b1:	lea    0x1(%r10),%rcx
   118b5:	cmp    $0xff,%r13b
   118b9:	je     11b18 <F_0_714+0x6446>
   118bf:	mov    %rcx,%r10
   118c2:	jmpq   11b1f <F_0_714+0x644d>
   118c7:	movb   $0x0,(%rcx)
   118ca:	add    $0x2,%r10
   118ce:	lea    0x28(%rdx),%ecx
   118d1:	mov    %rdi,%r13
   118d4:	shr    %cl,%r13
   118d7:	mov    %r13b,(%r10)
   118da:	lea    0x1(%r10),%rcx
   118de:	cmp    $0xff,%r13b
   118e2:	je     11b41 <F_0_714+0x646f>
   118e8:	mov    %rcx,%r10
   118eb:	jmpq   11b48 <F_0_714+0x6476>
   118f0:	movb   $0x0,(%rcx)
   118f3:	add    $0x2,%r10
   118f7:	lea    -0x20(%rdx),%ecx
   118fa:	mov    %rdi,%r13
   118fd:	shr    %cl,%r13
   11900:	mov    %rcx,%rdx
   11903:	mov    %r13b,(%r10)
   11906:	lea    0x1(%r10),%rcx
   1190a:	cmp    $0xff,%r13b
   1190e:	je     11b77 <F_0_714+0x64a5>
   11914:	mov    %rcx,%r13
   11917:	mov    %r15,%rcx
   1191a:	mov    %rdi,%r15
   1191d:	mov    -0x38(%rbp),%r10
   11921:	jmpq   10ed8 <F_0_714+0x5806>
   11926:	movb   $0x0,(%rcx)
   11929:	lea    0x2(%r10),%r13
   1192d:	mov    %r15,%rcx
   11930:	mov    %rdi,%r15
   11933:	mov    -0x38(%rbp),%r10
   11937:	jmpq   10c85 <F_0_714+0x55b3>
   1193c:	add    $0x1,%r14d
   11940:	movswq 0x7c(%rsi),%r11
   11945:	test   %r11w,%r11w
   11949:	je     11b8d <F_0_714+0x64bb>
   1194f:	mov    %r11,%r15
   11952:	sar    $0x1f,%r15d
   11956:	mov    %r15,-0x40(%rbp)
   1195a:	mov    %r15,%rcx
   1195d:	xor    %r11d,%ecx
   11960:	sub    %r15d,%ecx
   11963:	movslq %ecx,%rcx
   11966:	movzbl (%rcx,%rax,1),%eax
   1196a:	mov    %rax,-0x128(%rbp)
   11971:	jmpq   11c8f <F_0_714+0x65bd>
   11976:	cmp    $0x2f,%edx
   11979:	jle    11a39 <F_0_714+0x6367>
   1197f:	lea    0x38(%rdx),%ecx
   11982:	mov    %rdi,%r15
   11985:	shr    %cl,%r15
   11988:	mov    %r15b,0x0(%r13)
   1198c:	lea    0x1(%r13),%rax
   11990:	cmp    $0xff,%r15b
   11994:	jne    1199d <F_0_714+0x62cb>
   11996:	movb   $0x0,(%rax)
   11999:	lea    0x2(%r13),%rax
   1199d:	lea    0x30(%rdx),%ecx
   119a0:	mov    %rdi,%r15
   119a3:	shr    %cl,%r15
   119a6:	mov    %r15b,(%rax)
   119a9:	lea    0x1(%rax),%r13
   119ad:	cmp    $0xff,%r15b
   119b1:	jne    119bc <F_0_714+0x62ea>
   119b3:	movb   $0x0,0x0(%r13)
   119b8:	lea    0x2(%rax),%r13
   119bc:	lea    0x28(%rdx),%ecx
   119bf:	mov    %rdi,%r15
   119c2:	shr    %cl,%r15
   119c5:	mov    %r15b,0x0(%r13)
   119c9:	lea    0x1(%r13),%rax
   119cd:	cmp    $0xff,%r15b
   119d1:	jne    119da <F_0_714+0x6308>
   119d3:	movb   $0x0,(%rax)
   119d6:	lea    0x2(%r13),%rax
   119da:	lea    0x20(%rdx),%ecx
   119dd:	mov    %rdi,%r15
   119e0:	shr    %cl,%r15
   119e3:	mov    %r15b,(%rax)
   119e6:	lea    0x1(%rax),%r13
   119ea:	cmp    $0xff,%r15b
   119ee:	jne    119f9 <F_0_714+0x6327>
   119f0:	movb   $0x0,0x0(%r13)
   119f5:	lea    0x2(%rax),%r13
   119f9:	lea    0x18(%rdx),%ecx
   119fc:	mov    %rdi,%r15
   119ff:	shr    %cl,%r15
   11a02:	mov    %r15b,0x0(%r13)
   11a06:	lea    0x1(%r13),%rax
   11a0a:	cmp    $0xff,%r15b
   11a0e:	jne    11a17 <F_0_714+0x6345>
   11a10:	movb   $0x0,(%rax)
   11a13:	lea    0x2(%r13),%rax
   11a17:	lea    -0x30(%rdx),%ecx
   11a1a:	mov    %rdi,%r15
   11a1d:	shr    %cl,%r15
   11a20:	mov    %rcx,%rdx
   11a23:	mov    %r15b,(%rax)
   11a26:	lea    0x1(%rax),%r13
   11a2a:	cmp    $0xff,%r15b
   11a2e:	jne    11a39 <F_0_714+0x6367>
   11a30:	movb   $0x0,0x0(%r13)
   11a35:	lea    0x2(%rax),%r13
   11a39:	mov    %rbx,%rcx
   11a3c:	shl    %cl,%rdi
   11a3f:	mov    %rcx,%rbx
   11a42:	or     %r9,%rdi
   11a45:	add    %ebx,%edx
   11a47:	add    $0xfffffff0,%r14d
   11a4b:	cmp    $0xf,%r14d
   11a4f:	jg     11976 <F_0_714+0x62a4>
   11a55:	shl    $0x4,%r14d
   11a59:	mov    -0x128(%rbp),%rcx
   11a60:	lea    (%rcx,%r14,1),%eax
   11a64:	movslq %eax,%r14
   11a67:	movslq (%r8,%r14,4),%rax
   11a6b:	movsbq 0x400(%r8,%r14,1),%r14
   11a74:	cmp    $0x1f,%edx
   11a77:	jg     11d0b <F_0_714+0x6639>
   11a7d:	mov    %rdi,%r15
   11a80:	shl    %cl,%r12
   11a83:	lea    -0x1(%r12),%edi
   11a88:	mov    -0x40(%rbp),%r12
   11a8c:	add    %r12d,%r11d
   11a8f:	and    %r11d,%edi
   11a92:	movslq %edi,%rdi
   11a95:	mov    %rcx,%r12
   11a98:	mov    %r14,%rcx
   11a9b:	shl    %cl,%r15
   11a9e:	mov    %rcx,%r11
   11aa1:	or     %r15,%rax
   11aa4:	mov    %r12,%rcx
   11aa7:	shl    %cl,%rax
   11aaa:	or     %rax,%rdi
   11aad:	lea    (%rdx,%r11,1),%eax
   11ab1:	lea    (%rcx,%rax,1),%edx
   11ab4:	mov    $0x1,%r12d
   11aba:	lea    0x377f3(%rip),%rax        # 492b4 <jpeg_nbits_table>
   11ac1:	xor    %r14d,%r14d
   11ac4:	jmpq   11940 <F_0_714+0x626e>
   11ac9:	mov    %rcx,%r15
   11acc:	lea    0x38(%rdx),%ecx
   11acf:	mov    %rdi,%r12
   11ad2:	shr    %cl,%r12
   11ad5:	mov    %r12b,0x0(%r13)
   11ad9:	lea    0x1(%r13),%rcx
   11add:	cmp    $0xff,%r12b
   11ae1:	je     11d31 <F_0_714+0x665f>
   11ae7:	mov    %rcx,%r12
   11aea:	jmpq   11d38 <F_0_714+0x6666>
   11aef:	movb   $0x0,(%rcx)
   11af2:	lea    0x2(%r13),%r10
   11af6:	lea    0x30(%rdx),%ecx
   11af9:	mov    %rdi,%r13
   11afc:	shr    %cl,%r13
   11aff:	mov    %r13b,(%r10)
   11b02:	lea    0x1(%r10),%rcx
   11b06:	cmp    $0xff,%r13b
   11b0a:	je     11d5c <F_0_714+0x668a>
   11b10:	mov    %rcx,%r10
   11b13:	jmpq   11d63 <F_0_714+0x6691>
   11b18:	movb   $0x0,(%rcx)
   11b1b:	add    $0x2,%r10
   11b1f:	lea    0x28(%rdx),%ecx
   11b22:	mov    %rdi,%r13
   11b25:	shr    %cl,%r13
   11b28:	mov    %r13b,(%r10)
   11b2b:	lea    0x1(%r10),%rcx
   11b2f:	cmp    $0xff,%r13b
   11b33:	je     11d85 <F_0_714+0x66b3>
   11b39:	mov    %rcx,%r10
   11b3c:	jmpq   11d8c <F_0_714+0x66ba>
   11b41:	movb   $0x0,(%rcx)
   11b44:	add    $0x2,%r10
   11b48:	lea    -0x20(%rdx),%ecx
   11b4b:	mov    %rdi,%r13
   11b4e:	shr    %cl,%r13
   11b51:	mov    %rcx,%rdx
   11b54:	mov    %r13b,(%r10)
   11b57:	lea    0x1(%r10),%rcx
   11b5b:	cmp    $0xff,%r13b
   11b5f:	je     11dbb <F_0_714+0x66e9>
   11b65:	mov    %rcx,%r13
   11b68:	mov    %r15,%rcx
   11b6b:	mov    %rdi,%r15
   11b6e:	mov    -0x38(%rbp),%r10
   11b72:	jmpq   1112d <F_0_714+0x5a5b>
   11b77:	movb   $0x0,(%rcx)
   11b7a:	lea    0x2(%r10),%r13
   11b7e:	mov    %r15,%rcx
   11b81:	mov    %rdi,%r15
   11b84:	mov    -0x38(%rbp),%r10
   11b88:	jmpq   10ed8 <F_0_714+0x5806>
   11b8d:	add    $0x1,%r14d
   11b91:	movswq 0x7e(%rsi),%rsi
   11b96:	test   %si,%si
   11b99:	je     11dd1 <F_0_714+0x66ff>
   11b9f:	mov    %rsi,%r11
   11ba2:	sar    $0x1f,%r11d
   11ba6:	mov    %r11,%rcx
   11ba9:	xor    %esi,%ecx
   11bab:	sub    %r11d,%ecx
   11bae:	movslq %ecx,%rcx
   11bb1:	movzbl (%rcx,%rax,1),%eax
   11bb5:	jmpq   11e80 <F_0_714+0x67ae>
   11bba:	cmp    $0x2f,%edx
   11bbd:	jle    11c7d <F_0_714+0x65ab>
   11bc3:	lea    0x38(%rdx),%ecx
   11bc6:	mov    %rdi,%r15
   11bc9:	shr    %cl,%r15
   11bcc:	mov    %r15b,0x0(%r13)
   11bd0:	lea    0x1(%r13),%rax
   11bd4:	cmp    $0xff,%r15b
   11bd8:	jne    11be1 <F_0_714+0x650f>
   11bda:	movb   $0x0,(%rax)
   11bdd:	lea    0x2(%r13),%rax
   11be1:	lea    0x30(%rdx),%ecx
   11be4:	mov    %rdi,%r15
   11be7:	shr    %cl,%r15
   11bea:	mov    %r15b,(%rax)
   11bed:	lea    0x1(%rax),%r13
   11bf1:	cmp    $0xff,%r15b
   11bf5:	jne    11c00 <F_0_714+0x652e>
   11bf7:	movb   $0x0,0x0(%r13)
   11bfc:	lea    0x2(%rax),%r13
   11c00:	lea    0x28(%rdx),%ecx
   11c03:	mov    %rdi,%r15
   11c06:	shr    %cl,%r15
   11c09:	mov    %r15b,0x0(%r13)
   11c0d:	lea    0x1(%r13),%rax
   11c11:	cmp    $0xff,%r15b
   11c15:	jne    11c1e <F_0_714+0x654c>
   11c17:	movb   $0x0,(%rax)
   11c1a:	lea    0x2(%r13),%rax
   11c1e:	lea    0x20(%rdx),%ecx
   11c21:	mov    %rdi,%r15
   11c24:	shr    %cl,%r15
   11c27:	mov    %r15b,(%rax)
   11c2a:	lea    0x1(%rax),%r13
   11c2e:	cmp    $0xff,%r15b
   11c32:	jne    11c3d <F_0_714+0x656b>
   11c34:	movb   $0x0,0x0(%r13)
   11c39:	lea    0x2(%rax),%r13
   11c3d:	lea    0x18(%rdx),%ecx
   11c40:	mov    %rdi,%r15
   11c43:	shr    %cl,%r15
   11c46:	mov    %r15b,0x0(%r13)
   11c4a:	lea    0x1(%r13),%rax
   11c4e:	cmp    $0xff,%r15b
   11c52:	jne    11c5b <F_0_714+0x6589>
   11c54:	movb   $0x0,(%rax)
   11c57:	lea    0x2(%r13),%rax
   11c5b:	lea    -0x30(%rdx),%ecx
   11c5e:	mov    %rdi,%r15
   11c61:	shr    %cl,%r15
   11c64:	mov    %rcx,%rdx
   11c67:	mov    %r15b,(%rax)
   11c6a:	lea    0x1(%rax),%r13
   11c6e:	cmp    $0xff,%r15b
   11c72:	jne    11c7d <F_0_714+0x65ab>
   11c74:	movb   $0x0,0x0(%r13)
   11c79:	lea    0x2(%rax),%r13
   11c7d:	mov    %rbx,%rcx
   11c80:	shl    %cl,%rdi
   11c83:	mov    %rcx,%rbx
   11c86:	or     %r9,%rdi
   11c89:	add    %ebx,%edx
   11c8b:	add    $0xfffffff0,%r14d
   11c8f:	cmp    $0xf,%r14d
   11c93:	jg     11bba <F_0_714+0x64e8>
   11c99:	shl    $0x4,%r14d
   11c9d:	mov    -0x128(%rbp),%rcx
   11ca4:	lea    (%rcx,%r14,1),%eax
   11ca8:	movslq %eax,%rax
   11cab:	movslq (%r8,%rax,4),%r14
   11caf:	movsbq 0x400(%r8,%rax,1),%rax
   11cb8:	cmp    $0x1f,%edx
   11cbb:	jg     11ee6 <F_0_714+0x6814>
   11cc1:	mov    %rdi,%r15
   11cc4:	shl    %cl,%r12
   11cc7:	lea    -0x1(%r12),%edi
   11ccc:	mov    -0x40(%rbp),%r12
   11cd0:	add    %r12d,%r11d
   11cd3:	and    %r11d,%edi
   11cd6:	movslq %edi,%rdi
   11cd9:	mov    %rcx,%r11
   11cdc:	mov    %rax,%rcx
   11cdf:	shl    %cl,%r15
   11ce2:	mov    %rcx,%rax
   11ce5:	or     %r15,%r14
   11ce8:	mov    %r11,%rcx
   11ceb:	shl    %cl,%r14
   11cee:	or     %r14,%rdi
   11cf1:	add    %edx,%eax
   11cf3:	lea    (%rcx,%rax,1),%edx
   11cf6:	mov    $0x1,%r12d
   11cfc:	lea    0x375b1(%rip),%rax        # 492b4 <jpeg_nbits_table>
   11d03:	xor    %r14d,%r14d
   11d06:	jmpq   11b91 <F_0_714+0x64bf>
   11d0b:	mov    %rcx,%r15
   11d0e:	lea    0x38(%rdx),%ecx
   11d11:	mov    %rdi,%r12
   11d14:	shr    %cl,%r12
   11d17:	mov    %r12b,0x0(%r13)
   11d1b:	lea    0x1(%r13),%rcx
   11d1f:	cmp    $0xff,%r12b
   11d23:	je     11f0c <F_0_714+0x683a>
   11d29:	mov    %rcx,%r12
   11d2c:	jmpq   11f13 <F_0_714+0x6841>
   11d31:	movb   $0x0,(%rcx)
   11d34:	lea    0x2(%r13),%r12
   11d38:	lea    0x30(%rdx),%ecx
   11d3b:	mov    %rdi,%r13
   11d3e:	shr    %cl,%r13
   11d41:	mov    %r13b,(%r12)
   11d45:	lea    0x1(%r12),%rcx
   11d4a:	cmp    $0xff,%r13b
   11d4e:	je     11f37 <F_0_714+0x6865>
   11d54:	mov    %rcx,%r12
   11d57:	jmpq   11f3e <F_0_714+0x686c>
   11d5c:	movb   $0x0,(%rcx)
   11d5f:	add    $0x2,%r10
   11d63:	lea    0x28(%rdx),%ecx
   11d66:	mov    %rdi,%r13
   11d69:	shr    %cl,%r13
   11d6c:	mov    %r13b,(%r10)
   11d6f:	lea    0x1(%r10),%rcx
   11d73:	cmp    $0xff,%r13b
   11d77:	je     11f62 <F_0_714+0x6890>
   11d7d:	mov    %rcx,%r10
   11d80:	jmpq   11f69 <F_0_714+0x6897>
   11d85:	movb   $0x0,(%rcx)
   11d88:	add    $0x2,%r10
   11d8c:	lea    -0x20(%rdx),%ecx
   11d8f:	mov    %rdi,%r13
   11d92:	shr    %cl,%r13
   11d95:	mov    %rcx,%rdx
   11d98:	mov    %r13b,(%r10)
   11d9b:	lea    0x1(%r10),%rcx
   11d9f:	cmp    $0xff,%r13b
   11da3:	je     11f98 <F_0_714+0x68c6>
   11da9:	mov    %rcx,%r13
   11dac:	mov    %r15,%rcx
   11daf:	mov    %rdi,%r15
   11db2:	mov    -0x38(%rbp),%r10
   11db6:	jmpq   11384 <F_0_714+0x5cb2>
   11dbb:	movb   $0x0,(%rcx)
   11dbe:	lea    0x2(%r10),%r13
   11dc2:	mov    %r15,%rcx
   11dc5:	mov    %rdi,%r15
   11dc8:	mov    -0x38(%rbp),%r10
   11dcc:	jmpq   1112d <F_0_714+0x5a5b>
   11dd1:	lea    0x1(%r14),%eax
   11dd5:	test   %eax,%eax
   11dd7:	jle    11e01 <F_0_714+0x672f>
   11dd9:	movslq (%r8),%rsi
   11ddc:	movsbq 0x400(%r8),%rax
   11de4:	cmp    $0x2f,%edx
   11de7:	jg     11fae <F_0_714+0x68dc>
   11ded:	mov    %rdi,%rcx
   11df0:	mov    %rsi,%rdi
   11df3:	mov    %rcx,%rsi
   11df6:	mov    %rax,%rcx
   11df9:	shl    %cl,%rsi
   11dfc:	or     %rsi,%rdi
   11dff:	add    %ecx,%edx
   11e01:	mov    -0x8(%rbp),%r14
   11e05:	mov    %rdi,0x10(%r14)
   11e09:	mov    %edx,0x18(%r14)
   11e0d:	test   %r10d,%r10d
   11e10:	jg     1206d <F_0_714+0x699b>
   11e16:	mov    (%r14),%rax
   11e19:	mov    %r13,%rcx
   11e1c:	sub    %rax,%rcx
   11e1f:	mov    0x8(%r14),%rax
   11e23:	sub    %rcx,%rax
   11e26:	mov    %rax,0x8(%r14)
   11e2a:	mov    %r13,(%r14)
   11e2d:	mov    %r12,%rax
   11e30:	mov    -0x18(%rbp),%r12
   11e34:	mov    -0x10(%rbp),%rbx
   11e38:	mov    -0x20(%rbp),%r13
   11e3c:	mov    -0x28(%rbp),%r14
   11e40:	mov    -0x30(%rbp),%r15
   11e44:	leaveq 
   11e45:	retq   
   11e46:	movb   $0x0,(%rcx)
   11e49:	add    $0x2,%r13
   11e4d:	lea    -0x30(%rdx),%ecx
   11e50:	mov    %rdi,%r15
   11e53:	shr    %cl,%r15
   11e56:	mov    %rcx,%rdx
   11e59:	mov    %r15b,0x0(%r13)
   11e5d:	lea    0x1(%r13),%rcx
   11e61:	cmp    $0xff,%r15b
   11e65:	je     1207c <F_0_714+0x69aa>
   11e6b:	mov    %rcx,%r13
   11e6e:	mov    %rbx,%rcx
   11e71:	shl    %cl,%rdi
   11e74:	mov    %rcx,%rbx
   11e77:	or     %r9,%rdi
   11e7a:	add    %ebx,%edx
   11e7c:	add    $0xfffffff0,%r14d
   11e80:	cmp    $0xf,%r14d
   11e84:	jg     12088 <F_0_714+0x69b6>
   11e8a:	shl    $0x4,%r14d
   11e8e:	lea    (%rax,%r14,1),%ecx
   11e92:	movslq %ecx,%rcx
   11e95:	movslq (%r8,%rcx,4),%r9
   11e99:	movsbq 0x400(%r8,%rcx,1),%rbx
   11ea2:	cmp    $0x1f,%edx
   11ea5:	jg     120b4 <F_0_714+0x69e2>
   11eab:	mov    %rdi,%r14
   11eae:	mov    %rax,%rcx
   11eb1:	mov    %r12,%rax
   11eb4:	shl    %cl,%rax
   11eb7:	add    $0xffffffff,%eax
   11eba:	add    %r11d,%esi
   11ebd:	and    %esi,%eax
   11ebf:	movslq %eax,%rdi
   11ec2:	mov    %rcx,%rsi
   11ec5:	mov    %rbx,%rcx
   11ec8:	shl    %cl,%r14
   11ecb:	mov    %rcx,%rax
   11ece:	or     %r14,%r9
   11ed1:	mov    %rsi,%rcx
   11ed4:	shl    %cl,%r9
   11ed7:	or     %r9,%rdi
   11eda:	add    %edx,%eax
   11edc:	lea    (%rax,%rcx,1),%edx
   11edf:	xor    %eax,%eax
   11ee1:	jmpq   11dd5 <F_0_714+0x6703>
   11ee6:	mov    %rcx,%r15
   11ee9:	lea    0x38(%rdx),%ecx
   11eec:	mov    %rdi,%r12
   11eef:	shr    %cl,%r12
   11ef2:	mov    %r12b,0x0(%r13)
   11ef6:	lea    0x1(%r13),%rcx
   11efa:	cmp    $0xff,%r12b
   11efe:	je     12136 <F_0_714+0x6a64>
   11f04:	mov    %rcx,%r12
   11f07:	jmpq   1213d <F_0_714+0x6a6b>
   11f0c:	movb   $0x0,(%rcx)
   11f0f:	lea    0x2(%r13),%r12
   11f13:	lea    0x30(%rdx),%ecx
   11f16:	mov    %rdi,%r13
   11f19:	shr    %cl,%r13
   11f1c:	mov    %r13b,(%r12)
   11f20:	lea    0x1(%r12),%rcx
   11f25:	cmp    $0xff,%r13b
   11f29:	je     12161 <F_0_714+0x6a8f>
   11f2f:	mov    %rcx,%r12
   11f32:	jmpq   12168 <F_0_714+0x6a96>
   11f37:	movb   $0x0,(%rcx)
   11f3a:	add    $0x2,%r12
   11f3e:	lea    0x28(%rdx),%ecx
   11f41:	mov    %rdi,%r13
   11f44:	shr    %cl,%r13
   11f47:	mov    %r13b,(%r12)
   11f4b:	lea    0x1(%r12),%rcx
   11f50:	cmp    $0xff,%r13b
   11f54:	je     1218c <F_0_714+0x6aba>
   11f5a:	mov    %rcx,%r12
   11f5d:	jmpq   12193 <F_0_714+0x6ac1>
   11f62:	movb   $0x0,(%rcx)
   11f65:	add    $0x2,%r10
   11f69:	lea    -0x20(%rdx),%ecx
   11f6c:	mov    %rdi,%r13
   11f6f:	shr    %cl,%r13
   11f72:	mov    %rcx,%rdx
   11f75:	mov    %r13b,(%r10)
   11f78:	lea    0x1(%r10),%rcx
   11f7c:	cmp    $0xff,%r13b
   11f80:	je     121c6 <F_0_714+0x6af4>
   11f86:	mov    %rcx,%r13
   11f89:	mov    %r15,%rcx
   11f8c:	mov    %rdi,%r15
   11f8f:	mov    -0x38(%rbp),%r10
   11f93:	jmpq   115db <F_0_714+0x5f09>
   11f98:	movb   $0x0,(%rcx)
   11f9b:	lea    0x2(%r10),%r13
   11f9f:	mov    %r15,%rcx
   11fa2:	mov    %rdi,%r15
   11fa5:	mov    -0x38(%rbp),%r10
   11fa9:	jmpq   11384 <F_0_714+0x5cb2>
   11fae:	lea    0x38(%rdx),%ecx
   11fb1:	mov    %rdi,%r8
   11fb4:	shr    %cl,%r8
   11fb7:	mov    %r8b,0x0(%r13)
   11fbb:	lea    0x1(%r13),%rbx
   11fbf:	cmp    $0xff,%r8b
   11fc3:	jne    11fcc <F_0_714+0x68fa>
   11fc5:	movb   $0x0,(%rbx)
   11fc8:	lea    0x2(%r13),%rbx
   11fcc:	lea    0x30(%rdx),%ecx
   11fcf:	mov    %rdi,%r9
   11fd2:	shr    %cl,%r9
   11fd5:	mov    %r9b,(%rbx)
   11fd8:	lea    0x1(%rbx),%r8
   11fdc:	cmp    $0xff,%r9b
   11fe0:	jne    11fea <F_0_714+0x6918>
   11fe2:	movb   $0x0,(%r8)
   11fe6:	lea    0x2(%rbx),%r8
   11fea:	lea    0x28(%rdx),%ecx
   11fed:	mov    %rdi,%r9
   11ff0:	shr    %cl,%r9
   11ff3:	mov    %r9b,(%r8)
   11ff6:	lea    0x1(%r8),%rbx
   11ffa:	cmp    $0xff,%r9b
   11ffe:	jne    12007 <F_0_714+0x6935>
   12000:	movb   $0x0,(%rbx)
   12003:	lea    0x2(%r8),%rbx
   12007:	lea    0x20(%rdx),%ecx
   1200a:	mov    %rdi,%r9
   1200d:	shr    %cl,%r9
   12010:	mov    %r9b,(%rbx)
   12013:	lea    0x1(%rbx),%r8
   12017:	cmp    $0xff,%r9b
   1201b:	jne    12025 <F_0_714+0x6953>
   1201d:	movb   $0x0,(%r8)
   12021:	lea    0x2(%rbx),%r8
   12025:	lea    0x18(%rdx),%ecx
   12028:	mov    %rdi,%r9
   1202b:	shr    %cl,%r9
   1202e:	mov    %r9b,(%r8)
   12031:	lea    0x1(%r8),%rbx
   12035:	cmp    $0xff,%r9b
   12039:	jne    12042 <F_0_714+0x6970>
   1203b:	movb   $0x0,(%rbx)
   1203e:	lea    0x2(%r8),%rbx
   12042:	lea    -0x30(%rdx),%ecx
   12045:	mov    %rdi,%r8
   12048:	shr    %cl,%r8
   1204b:	mov    %rcx,%rdx
   1204e:	mov    %r8b,(%rbx)
   12051:	lea    0x1(%rbx),%r13
   12055:	cmp    $0xff,%r8b
   12059:	je     121dc <F_0_714+0x6b0a>
   1205f:	mov    %rdi,%rcx
   12062:	mov    %rsi,%rdi
   12065:	mov    %rcx,%rsi
   12068:	jmpq   11df6 <F_0_714+0x6724>
   1206d:	lea    -0x228(%rbp),%rbx
   12074:	sub    %rbx,%r13
   12077:	jmpq   1223f <F_0_714+0x6b6d>
   1207c:	movb   $0x0,(%rcx)
   1207f:	add    $0x2,%r13
   12083:	jmpq   11e6e <F_0_714+0x679c>
   12088:	cmp    $0x2f,%edx
   1208b:	jle    11e6e <F_0_714+0x679c>
   12091:	lea    0x38(%rdx),%ecx
   12094:	mov    %rdi,%r15
   12097:	shr    %cl,%r15
   1209a:	mov    %r15b,0x0(%r13)
   1209e:	lea    0x1(%r13),%rcx
   120a2:	cmp    $0xff,%r15b
   120a6:	je     1225d <F_0_714+0x6b8b>
   120ac:	mov    %rcx,%r13
   120af:	jmpq   12264 <F_0_714+0x6b92>
   120b4:	lea    0x38(%rdx),%ecx
   120b7:	mov    %rdi,%r15
   120ba:	shr    %cl,%r15
   120bd:	mov    %r15b,0x0(%r13)
   120c1:	lea    0x1(%r13),%r14
   120c5:	cmp    $0xff,%r15b
   120c9:	jne    120d3 <F_0_714+0x6a01>
   120cb:	movb   $0x0,(%r14)
   120cf:	lea    0x2(%r13),%r14
   120d3:	lea    0x30(%rdx),%ecx
   120d6:	mov    %rdi,%r15
   120d9:	shr    %cl,%r15
   120dc:	mov    %r15b,(%r14)
   120df:	lea    0x1(%r14),%r13
   120e3:	cmp    $0xff,%r15b
   120e7:	jne    120f2 <F_0_714+0x6a20>
   120e9:	movb   $0x0,0x0(%r13)
   120ee:	lea    0x2(%r14),%r13
   120f2:	lea    0x28(%rdx),%ecx
   120f5:	mov    %rdi,%r15
   120f8:	shr    %cl,%r15
   120fb:	mov    %r15b,0x0(%r13)
   120ff:	lea    0x1(%r13),%r14
   12103:	cmp    $0xff,%r15b
   12107:	jne    12111 <F_0_714+0x6a3f>
   12109:	movb   $0x0,(%r14)
   1210d:	lea    0x2(%r13),%r14
   12111:	lea    -0x20(%rdx),%ecx
   12114:	mov    %rdi,%r15
   12117:	shr    %cl,%r15
   1211a:	mov    %rcx,%rdx
   1211d:	mov    %r15b,(%r14)
   12120:	lea    0x1(%r14),%r13
   12124:	cmp    $0xff,%r15b
   12128:	je     12287 <F_0_714+0x6bb5>
   1212e:	mov    %rdi,%r14
   12131:	jmpq   11eae <F_0_714+0x67dc>
   12136:	movb   $0x0,(%rcx)
   12139:	lea    0x2(%r13),%r12
   1213d:	lea    0x30(%rdx),%ecx
   12140:	mov    %rdi,%r13
   12143:	shr    %cl,%r13
   12146:	mov    %r13b,(%r12)
   1214a:	lea    0x1(%r12),%rcx
   1214f:	cmp    $0xff,%r13b
   12153:	je     12298 <F_0_714+0x6bc6>
   12159:	mov    %rcx,%r12
   1215c:	jmpq   1229f <F_0_714+0x6bcd>
   12161:	movb   $0x0,(%rcx)
   12164:	add    $0x2,%r12
   12168:	lea    0x28(%rdx),%ecx
   1216b:	mov    %rdi,%r13
   1216e:	shr    %cl,%r13
   12171:	mov    %r13b,(%r12)
   12175:	lea    0x1(%r12),%rcx
   1217a:	cmp    $0xff,%r13b
   1217e:	je     122c3 <F_0_714+0x6bf1>
   12184:	mov    %rcx,%r12
   12187:	jmpq   122ca <F_0_714+0x6bf8>
   1218c:	movb   $0x0,(%rcx)
   1218f:	add    $0x2,%r12
   12193:	lea    -0x20(%rdx),%ecx
   12196:	mov    %rdi,%r13
   12199:	shr    %cl,%r13
   1219c:	mov    %rcx,%rdx
   1219f:	mov    %r13b,(%r12)
   121a3:	lea    0x1(%r12),%rcx
   121a8:	cmp    $0xff,%r13b
   121ac:	je     122fd <F_0_714+0x6c2b>
   121b2:	mov    %rcx,%r13
   121b5:	mov    %r15,%rcx
   121b8:	mov    %rdi,%r15
   121bb:	mov    $0x1,%r12d
   121c1:	jmpq   1182f <F_0_714+0x615d>
   121c6:	movb   $0x0,(%rcx)
   121c9:	lea    0x2(%r10),%r13
   121cd:	mov    %r15,%rcx
   121d0:	mov    %rdi,%r15
   121d3:	mov    -0x38(%rbp),%r10
   121d7:	jmpq   115db <F_0_714+0x5f09>
   121dc:	movb   $0x0,0x0(%r13)
   121e1:	lea    0x2(%rbx),%r13
   121e5:	mov    %rdi,%rcx
   121e8:	mov    %rsi,%rdi
   121eb:	mov    %rcx,%rsi
   121ee:	jmpq   11df6 <F_0_714+0x6724>
   121f3:	mov    0x8(%r14),%r15
   121f7:	cmp    %r13,%r15
   121fa:	jbe    121ff <F_0_714+0x6b2d>
   121fc:	mov    %r13,%r15
   121ff:	mov    (%r14),%rdi
   12202:	mov    %rbx,%rsi
   12205:	mov    %r15,%rdx
   12208:	callq  42c0 <memcpy@plt>
   1220d:	mov    %r15,%rax
   12210:	add    (%r14),%rax
   12213:	mov    %rax,(%r14)
   12216:	mov    0x8(%r14),%rcx
   1221a:	mov    %rcx,%rax
   1221d:	sub    %r15,%rax
   12220:	mov    %rax,0x8(%r14)
   12224:	cmp    %r15,%rcx
   12227:	jne    12239 <F_0_714+0x6b67>
   12229:	mov    %r14,%rdi
   1222c:	callq  8e40 <dump_buffer>
   12231:	test   %eax,%eax
   12233:	je     12316 <F_0_714+0x6c44>
   12239:	sub    %r15,%r13
   1223c:	add    %r15,%rbx
   1223f:	test   %r13,%r13
   12242:	jne    121f3 <F_0_714+0x6b21>
   12244:	mov    %r12,%rax
   12247:	mov    -0x18(%rbp),%r12
   1224b:	mov    -0x10(%rbp),%rbx
   1224f:	mov    -0x20(%rbp),%r13
   12253:	mov    -0x28(%rbp),%r14
   12257:	mov    -0x30(%rbp),%r15
   1225b:	leaveq 
   1225c:	retq   
   1225d:	movb   $0x0,(%rcx)
   12260:	add    $0x2,%r13
   12264:	lea    0x30(%rdx),%ecx
   12267:	mov    %rdi,%r15
   1226a:	shr    %cl,%r15
   1226d:	mov    %r15b,0x0(%r13)
   12271:	lea    0x1(%r13),%rcx
   12275:	cmp    $0xff,%r15b
   12279:	je     1232e <F_0_714+0x6c5c>
   1227f:	mov    %rcx,%r13
   12282:	jmpq   12335 <F_0_714+0x6c63>
   12287:	movb   $0x0,0x0(%r13)
   1228c:	lea    0x2(%r14),%r13
   12290:	mov    %rdi,%r14
   12293:	jmpq   11eae <F_0_714+0x67dc>
   12298:	movb   $0x0,(%rcx)
   1229b:	add    $0x2,%r12
   1229f:	lea    0x28(%rdx),%ecx
   122a2:	mov    %rdi,%r13
   122a5:	shr    %cl,%r13
   122a8:	mov    %r13b,(%r12)
   122ac:	lea    0x1(%r12),%rcx
   122b1:	cmp    $0xff,%r13b
   122b5:	je     12351 <F_0_714+0x6c7f>
   122bb:	mov    %rcx,%r12
   122be:	jmpq   12358 <F_0_714+0x6c86>
   122c3:	movb   $0x0,(%rcx)
   122c6:	add    $0x2,%r12
   122ca:	lea    -0x20(%rdx),%ecx
   122cd:	mov    %rdi,%r13
   122d0:	shr    %cl,%r13
   122d3:	mov    %rcx,%rdx
   122d6:	mov    %r13b,(%r12)
   122da:	lea    0x1(%r12),%rcx
   122df:	cmp    $0xff,%r13b
   122e3:	je     12387 <F_0_714+0x6cb5>
   122e9:	mov    %rcx,%r13
   122ec:	mov    %r15,%rcx
   122ef:	mov    %rdi,%r15
   122f2:	mov    $0x1,%r12d
   122f8:	jmpq   11a80 <F_0_714+0x63ae>
   122fd:	movb   $0x0,(%rcx)
   12300:	lea    0x2(%r12),%r13
   12305:	mov    %r15,%rcx
   12308:	mov    %rdi,%r15
   1230b:	mov    $0x1,%r12d
   12311:	jmpq   1182f <F_0_714+0x615d>
   12316:	mov    -0x18(%rbp),%r12
   1231a:	xor    %eax,%eax
   1231c:	mov    -0x10(%rbp),%rbx
   12320:	mov    -0x20(%rbp),%r13
   12324:	mov    -0x28(%rbp),%r14
   12328:	mov    -0x30(%rbp),%r15
   1232c:	leaveq 
   1232d:	retq   
   1232e:	movb   $0x0,(%rcx)
   12331:	add    $0x2,%r13
   12335:	lea    0x28(%rdx),%ecx
   12338:	mov    %rdi,%r15
   1233b:	shr    %cl,%r15
   1233e:	mov    %r15b,0x0(%r13)
   12342:	lea    0x1(%r13),%rcx
   12346:	cmp    $0xff,%r15b
   1234a:	je     123a0 <F_0_714+0x6cce>
   1234c:	mov    %rcx,%r13
   1234f:	jmp    123a7 <F_0_714+0x6cd5>
   12351:	movb   $0x0,(%rcx)
   12354:	add    $0x2,%r12
   12358:	lea    -0x20(%rdx),%ecx
   1235b:	mov    %rdi,%r13
   1235e:	shr    %cl,%r13
   12361:	mov    %rcx,%rdx
   12364:	mov    %r13b,(%r12)
   12368:	lea    0x1(%r12),%rcx
   1236d:	cmp    $0xff,%r13b
   12371:	je     123c3 <F_0_714+0x6cf1>
   12373:	mov    %rcx,%r13
   12376:	mov    %r15,%rcx
   12379:	mov    %rdi,%r15
   1237c:	mov    $0x1,%r12d
   12382:	jmpq   11cc4 <F_0_714+0x65f2>
   12387:	movb   $0x0,(%rcx)
   1238a:	lea    0x2(%r12),%r13
   1238f:	mov    %r15,%rcx
   12392:	mov    %rdi,%r15
   12395:	mov    $0x1,%r12d
   1239b:	jmpq   11a80 <F_0_714+0x63ae>
   123a0:	movb   $0x0,(%rcx)
   123a3:	add    $0x2,%r13
   123a7:	lea    0x20(%rdx),%ecx
   123aa:	mov    %rdi,%r15
   123ad:	shr    %cl,%r15
   123b0:	mov    %r15b,0x0(%r13)
   123b4:	lea    0x1(%r13),%rcx
   123b8:	cmp    $0xff,%r15b
   123bc:	je     123dc <F_0_714+0x6d0a>
   123be:	mov    %rcx,%r13
   123c1:	jmp    123e3 <F_0_714+0x6d11>
   123c3:	movb   $0x0,(%rcx)
   123c6:	lea    0x2(%r12),%r13
   123cb:	mov    %r15,%rcx
   123ce:	mov    %rdi,%r15
   123d1:	mov    $0x1,%r12d
   123d7:	jmpq   11cc4 <F_0_714+0x65f2>
   123dc:	movb   $0x0,(%rcx)
   123df:	add    $0x2,%r13
   123e3:	lea    0x18(%rdx),%ecx
   123e6:	mov    %rdi,%r15
   123e9:	shr    %cl,%r15
   123ec:	mov    %r15b,0x0(%r13)
   123f0:	lea    0x1(%r13),%rcx
   123f4:	cmp    $0xff,%r15b
   123f8:	je     11e46 <F_0_714+0x6774>
   123fe:	mov    %rcx,%r13
   12401:	jmpq   11e4d <F_0_714+0x677b>
   12406:	nopw   %cs:0x0(%rax,%rax,1)

0000000000012410 <emit_restart>:
   12410:	push   %rbp
   12411:	mov    %rsp,%rbp
   12414:	sub    $0x10,%rsp
   12418:	mov    %r15,-0x8(%rbp)
   1241c:	mov    %rsi,-0x10(%rbp)
   12420:	mov    %rdi,%r15
   12423:	callq  8e90 <flush_bits>
   12428:	test   %eax,%eax
   1242a:	jne    12434 <emit_restart+0x24>
   1242c:	xor    %eax,%eax
   1242e:	mov    -0x8(%rbp),%r15
   12432:	leaveq 
   12433:	retq   
   12434:	mov    (%r15),%rcx
   12437:	lea    0x1(%rcx),%rax
   1243b:	mov    %rax,(%r15)
   1243e:	movb   $0xff,(%rcx)
   12441:	mov    0x8(%r15),%rax
   12445:	add    $0xffffffffffffffff,%rax
   12449:	mov    %rax,0x8(%r15)
   1244d:	test   %rax,%rax
   12450:	je     1247c <emit_restart+0x6c>
   12452:	mov    (%r15),%rcx
   12455:	lea    0x1(%rcx),%rax
   12459:	mov    %rax,(%r15)
   1245c:	mov    -0x10(%rbp),%rax
   12460:	add    $0xd0,%eax
   12465:	mov    %al,(%rcx)
   12467:	mov    0x8(%r15),%rax
   1246b:	add    $0xffffffffffffffff,%rax
   1246f:	mov    %rax,0x8(%r15)
   12473:	test   %rax,%rax
   12476:	je     12490 <emit_restart+0x80>
   12478:	xor    %eax,%eax
   1247a:	jmp    124af <emit_restart+0x9f>
   1247c:	mov    %r15,%rdi
   1247f:	callq  8e40 <dump_buffer>
   12484:	test   %eax,%eax
   12486:	jne    12452 <emit_restart+0x42>
   12488:	xor    %eax,%eax
   1248a:	mov    -0x8(%rbp),%r15
   1248e:	leaveq 
   1248f:	retq   
   12490:	mov    %r15,%rdi
   12493:	callq  8e40 <dump_buffer>
   12498:	test   %eax,%eax
   1249a:	je     124c9 <emit_restart+0xb9>
   1249c:	xor    %eax,%eax
   1249e:	jmp    124af <emit_restart+0x9f>
   124a0:	movslq %eax,%rcx
   124a3:	movl   $0x0,0x1c(%r15,%rcx,4)
   124ac:	add    $0x1,%eax
   124af:	mov    0x30(%r15),%rcx
   124b3:	movslq 0x144(%rcx),%rcx
   124ba:	cmp    %eax,%ecx
   124bc:	jg     124a0 <emit_restart+0x90>
   124be:	mov    $0x1,%eax
   124c3:	mov    -0x8(%rbp),%r15
   124c7:	leaveq 
   124c8:	retq   
   124c9:	xor    %eax,%eax
   124cb:	mov    -0x8(%rbp),%r15
   124cf:	leaveq 
   124d0:	retq   
   124d1:	data16 nopw %cs:0x0(%rax,%rax,1)
   124dc:	nopl   0x0(%rax)

00000000000124e0 <htest_one_block>:
   124e0:	push   %rbp
   124e1:	mov    %rsp,%rbp
   124e4:	sub    $0x40,%rsp
   124e8:	mov    %rbx,-0x8(%rbp)
   124ec:	mov    %r12,-0x10(%rbp)
   124f0:	mov    %r13,-0x18(%rbp)
   124f4:	mov    %r14,-0x20(%rbp)
   124f8:	mov    %r15,-0x28(%rbp)
   124fc:	mov    %rdi,-0x38(%rbp)
   12500:	mov    %rsi,-0x30(%rbp)
   12504:	xor    %r9d,%r9d
   12507:	movswq (%rsi),%rbx
   1250b:	mov    %rbx,%rax
   1250e:	sub    %edx,%eax
   12510:	test   %eax,%eax
   12512:	js     12519 <htest_one_block+0x39>
   12514:	mov    %r9,%rbx
   12517:	jmp    12528 <htest_one_block+0x48>
   12519:	mov    %rdx,%rax
   1251c:	sub    %ebx,%eax
   1251e:	mov    %r9,%rbx
   12521:	jmp    12528 <htest_one_block+0x48>
   12523:	sar    %eax
   12525:	add    $0x1,%ebx
   12528:	test   %eax,%eax
   1252a:	jne    12523 <htest_one_block+0x43>
   1252c:	cmp    $0xb,%ebx
   1252f:	jg     12536 <htest_one_block+0x56>
   12531:	mov    %r8,%r13
   12534:	jmp    12561 <htest_one_block+0x81>
   12536:	mov    (%rdi),%rax
   12539:	movl   $0x6,0x28(%rax)
   12540:	mov    (%rdi),%rax
   12543:	mov    (%rax),%rax
   12546:	mov    %r9,%r12
   12549:	mov    %r8,%r13
   1254c:	mov    %rsi,%r14
   1254f:	mov    %rcx,%r15
   12552:	callq  *%rax
   12554:	mov    %r15,%rcx
   12557:	mov    %r14,%rsi
   1255a:	mov    %r12,%r9
   1255d:	mov    -0x38(%rbp),%rdi
   12561:	mov    0x5ba70(%rip),%r14        # 6dfd8 <jpeg_natural_order@@LIBJPEG_6.2+0x129f4>
   12568:	movslq %ebx,%rax
   1256b:	lea    (%rcx,%rax,8),%rcx
   1256f:	mov    (%rcx),%rax
   12572:	add    $0x1,%rax
   12576:	mov    %rax,(%rcx)
   12579:	mov    $0x1,%edx
   1257e:	mov    %rdx,%r15
   12581:	mov    %r9,%rbx
   12584:	jmp    1259e <htest_one_block+0xbe>
   12586:	movslq %r15d,%rax
   12589:	movslq (%r14,%rax,4),%rax
   1258d:	movswq (%rsi,%rax,2),%rax
   12592:	test   %ax,%ax
   12595:	jne    125d3 <htest_one_block+0xf3>
   12597:	add    $0x1,%ebx
   1259a:	add    $0x1,%r15d
   1259e:	cmp    $0x3f,%r15d
   125a2:	jle    12586 <htest_one_block+0xa6>
   125a4:	test   %ebx,%ebx
   125a6:	jg     125e2 <htest_one_block+0x102>
   125a8:	mov    -0x28(%rbp),%r15
   125ac:	mov    -0x20(%rbp),%r14
   125b0:	mov    -0x18(%rbp),%r13
   125b4:	mov    -0x10(%rbp),%r12
   125b8:	mov    -0x8(%rbp),%rbx
   125bc:	leaveq 
   125bd:	retq   
   125be:	mov    0x780(%r13),%rcx
   125c5:	add    $0x1,%rcx
   125c9:	mov    %rcx,0x780(%r13)
   125d0:	add    $0xfffffff0,%ebx
   125d3:	cmp    $0xf,%ebx
   125d6:	jg     125be <htest_one_block+0xde>
   125d8:	test   %ax,%ax
   125db:	js     12604 <htest_one_block+0x124>
   125dd:	mov    %rdx,%r12
   125e0:	jmp    12611 <htest_one_block+0x131>
   125e2:	mov    0x0(%r13),%rax
   125e6:	add    $0x1,%rax
   125ea:	mov    %rax,0x0(%r13)
   125ee:	mov    -0x28(%rbp),%r15
   125f2:	mov    -0x20(%rbp),%r14
   125f6:	mov    -0x18(%rbp),%r13
   125fa:	mov    -0x10(%rbp),%r12
   125fe:	mov    -0x8(%rbp),%rbx
   12602:	leaveq 
   12603:	retq   
   12604:	neg    %eax
   12606:	mov    %rdx,%r12
   12609:	jmp    12611 <htest_one_block+0x131>
   1260b:	sar    %eax
   1260d:	add    $0x1,%r12d
   12611:	mov    %rax,%rcx
   12614:	and    $0xfffffffe,%ecx
   12617:	test   %ecx,%ecx
   12619:	jne    1260b <htest_one_block+0x12b>
   1261b:	cmp    $0xa,%r12d
   1261f:	jle    12643 <htest_one_block+0x163>
   12621:	mov    (%rdi),%rax
   12624:	movl   $0x6,0x28(%rax)
   1262b:	mov    (%rdi),%rax
   1262e:	mov    (%rax),%rax
   12631:	callq  *%rax
   12633:	mov    $0x1,%edx
   12638:	xor    %r9d,%r9d
   1263b:	mov    -0x30(%rbp),%rsi
   1263f:	mov    -0x38(%rbp),%rdi
   12643:	shl    $0x4,%ebx
   12646:	lea    (%r12,%rbx,1),%eax
   1264a:	movslq %eax,%rcx
   1264d:	mov    0x0(%r13,%rcx,8),%rax
   12652:	add    $0x1,%rax
   12656:	mov    %rax,0x0(%r13,%rcx,8)
   1265b:	mov    %r9,%rbx
   1265e:	jmpq   1259a <htest_one_block+0xba>
   12663:	nopw   %cs:0x0(%rax,%rax,1)
   1266d:	nopl   (%rax)

0000000000012670 <jinit_compress_master>:
   12670:	push   %rbp
   12671:	mov    %rsp,%rbp
   12674:	sub    $0x10,%rsp
   12678:	mov    %r15,-0x8(%rbp)
   1267c:	xor    %esi,%esi
   1267e:	mov    %rdi,%r15
   12681:	callq  43c0 <jinit_c_master_control@plt>
   12686:	movslq 0x100(%r15),%rax
   1268d:	test   %eax,%eax
   1268f:	jne    126ab <jinit_compress_master+0x3b>
   12691:	mov    %r15,%rdi
   12694:	callq  41b0 <jinit_color_converter@plt>
   12699:	mov    %r15,%rdi
   1269c:	callq  4480 <jinit_downsampler@plt>
   126a1:	mov    %r15,%rdi
   126a4:	xor    %esi,%esi
   126a6:	callq  42e0 <jinit_c_prep_controller@plt>
   126ab:	mov    %r15,%rdi
   126ae:	callq  41a0 <jinit_forward_dct@plt>
   126b3:	movslq 0x104(%r15),%rax
   126ba:	test   %eax,%eax
   126bc:	jne    126d3 <jinit_compress_master+0x63>
   126be:	movslq 0x134(%r15),%rax
   126c5:	test   %eax,%eax
   126c7:	jne    12728 <jinit_compress_master+0xb8>
   126c9:	mov    %r15,%rdi
   126cc:	callq  4080 <jinit_huff_encoder@plt>
   126d1:	jmp    126db <jinit_compress_master+0x6b>
   126d3:	mov    %r15,%rdi
   126d6:	callq  4190 <jinit_arith_encoder@plt>
   126db:	mov    $0x1,%esi
   126e0:	movslq 0xf0(%r15),%rax
   126e7:	cmp    $0x1,%eax
   126ea:	jle    12732 <jinit_compress_master+0xc2>
   126ec:	mov    %r15,%rdi
   126ef:	callq  4380 <jinit_c_coef_controller@plt>
   126f4:	mov    %r15,%rdi
   126f7:	xor    %esi,%esi
   126f9:	callq  4140 <jinit_c_main_controller@plt>
   126fe:	mov    %r15,%rdi
   12701:	callq  4120 <jinit_marker_writer@plt>
   12706:	mov    0x8(%r15),%rax
   1270a:	mov    0x30(%rax),%rax
   1270e:	mov    %r15,%rdi
   12711:	callq  *%rax
   12713:	mov    0x1d0(%r15),%rax
   1271a:	mov    (%rax),%rax
   1271d:	mov    %r15,%rdi
   12720:	callq  *%rax
   12722:	mov    -0x8(%rbp),%r15
   12726:	leaveq 
   12727:	retq   
   12728:	mov    %r15,%rdi
   1272b:	callq  4460 <jinit_phuff_encoder@plt>
   12730:	jmp    126db <jinit_compress_master+0x6b>
   12732:	movslq 0x108(%r15),%rax
   12739:	test   %eax,%eax
   1273b:	jne    126ec <jinit_compress_master+0x7c>
   1273d:	xor    %esi,%esi
   1273f:	jmp    126ec <jinit_compress_master+0x7c>
   12741:	nopw   %cs:0x0(%rax,%rax,1)
   1274b:	nopl   0x0(%rax,%rax,1)

0000000000012750 <jinit_c_main_controller>:
   12750:	push   %rbp
   12751:	mov    %rsp,%rbp
   12754:	sub    $0x30,%rsp
   12758:	mov    %r15,-0x20(%rbp)
   1275c:	mov    %rsi,-0x28(%rbp)
   12760:	mov    0x8(%rdi),%rax
   12764:	mov    (%rax),%rax
   12767:	mov    %rbx,%r15
   1276a:	mov    $0x1,%esi
   1276f:	mov    $0x70,%edx
   12774:	mov    %rdi,%rbx
   12777:	callq  *%rax
   12779:	mov    %rax,0x1b8(%rbx)
   12780:	lea    0x219(%rip),%rcx        # 129a0 <start_pass_main>
   12787:	mov    %rcx,(%rax)
   1278a:	movslq 0x100(%rbx),%rcx
   12791:	test   %ecx,%ecx
   12793:	je     1279e <jinit_c_main_controller+0x4e>
   12795:	mov    %r15,%rbx
   12798:	mov    -0x20(%rbp),%r15
   1279c:	leaveq 
   1279d:	retq   
   1279e:	mov    -0x28(%rbp),%rcx
   127a2:	test   %ecx,%ecx
   127a4:	jne    127cd <jinit_c_main_controller+0x7d>
   127a6:	mov    0x58(%rbx),%rdx
   127aa:	xor    %ecx,%ecx
   127ac:	mov    %r15,-0x8(%rbp)
   127b0:	mov    %r12,-0x10(%rbp)
   127b4:	mov    %r13,-0x18(%rbp)
   127b8:	mov    %r14,-0x28(%rbp)
   127bc:	mov    %rdx,%r12
   127bf:	mov    %rax,%r13
   127c2:	mov    %rcx,%r15
   127c5:	mov    $0x1,%r14d
   127cb:	jmp    1281b <jinit_c_main_controller+0xcb>
   127cd:	mov    (%rbx),%rax
   127d0:	movl   $0x4,0x28(%rax)
   127d7:	mov    (%rbx),%rax
   127da:	mov    (%rax),%rax
   127dd:	mov    %rbx,%rdi
   127e0:	mov    %r15,%rbx
   127e3:	callq  *%rax
   127e5:	mov    -0x20(%rbp),%r15
   127e9:	leaveq 
   127ea:	retq   
   127eb:	mov    0x8(%rbx),%rax
   127ef:	mov    0x10(%rax),%rax
   127f3:	mov    0x1c(%r12),%edx
   127f8:	shl    $0x3,%edx
   127fb:	mov    0xc(%r12),%ecx
   12800:	shl    $0x3,%ecx
   12803:	mov    %rbx,%rdi
   12806:	mov    %r14,%rsi
   12809:	callq  *%rax
   1280b:	movslq %r15d,%rcx
   1280e:	mov    %rax,0x20(%r13,%rcx,8)
   12813:	add    $0x1,%r15d
   12817:	add    $0x60,%r12
   1281b:	movslq 0x4c(%rbx),%rax
   1281f:	cmp    %r15d,%eax
   12822:	jg     127eb <jinit_c_main_controller+0x9b>
   12824:	mov    -0x28(%rbp),%r14
   12828:	mov    -0x18(%rbp),%r13
   1282c:	mov    -0x10(%rbp),%r12
   12830:	mov    -0x8(%rbp),%rbx
   12834:	mov    -0x20(%rbp),%r15
   12838:	leaveq 
   12839:	retq   
   1283a:	nopw   0x0(%rax,%rax,1)

0000000000012840 <process_data_simple_main>:
   12840:	push   %rbp
   12841:	mov    %rsp,%rbp
   12844:	sub    $0x40,%rsp
   12848:	mov    %rsi,-0x30(%rbp)
   1284c:	mov    %rcx,-0x38(%rbp)
   12850:	mov    %rbx,-0x8(%rbp)
   12854:	mov    %r12,-0x10(%rbp)
   12858:	mov    %r13,-0x18(%rbp)
   1285c:	mov    %r14,-0x20(%rbp)
   12860:	mov    %r15,-0x28(%rbp)
   12864:	mov    0x1b8(%rdi),%r13
   1286b:	lea    0x20(%r13),%rax
   1286f:	mov    %rax,-0x40(%rbp)
   12873:	lea    0x14(%r13),%r15
   12877:	mov    %rsi,%rbx
   1287a:	mov    %rax,%rsi
   1287d:	mov    %rdi,%r12
   12880:	mov    %rdx,%r14
   12883:	jmpq   1291b <process_data_simple_main+0xdb>
   12888:	mov    0x14(%r13),%eax
   1288c:	cmp    $0x7,%eax
   1288f:	ja     128ca <process_data_simple_main+0x8a>
   12891:	sub    $0x10,%rsp
   12895:	mov    0x1c0(%r12),%rax
   1289d:	mov    0x8(%rax),%rax
   128a1:	mov    %rbx,%r10
   128a4:	mov    %rsi,%rbx
   128a7:	mov    %r10,%rsi
   128aa:	movl   $0x8,(%rsp)
   128b1:	mov    %r12,%rdi
   128b4:	mov    %r14,%rdx
   128b7:	mov    %rbx,%r8
   128ba:	mov    %r15,%r9
   128bd:	callq  *%rax
   128bf:	add    $0x10,%rsp
   128c3:	mov    %rbx,%rsi
   128c6:	mov    -0x30(%rbp),%rbx
   128ca:	mov    0x14(%r13),%eax
   128ce:	cmp    $0x8,%eax
   128d1:	jne    12943 <process_data_simple_main+0x103>
   128d3:	mov    0x1c8(%r12),%rax
   128db:	mov    0x8(%rax),%rax
   128df:	mov    %r12,%rdi
   128e2:	callq  *%rax
   128e4:	test   %eax,%eax
   128e6:	je     12959 <process_data_simple_main+0x119>
   128e8:	movslq 0x18(%r13),%rax
   128ec:	test   %eax,%eax
   128ee:	je     12901 <process_data_simple_main+0xc1>
   128f0:	mov    (%r14),%eax
   128f3:	add    $0x1,%eax
   128f6:	mov    %eax,(%r14)
   128f9:	movl   $0x0,0x18(%r13)
   12901:	movl   $0x0,(%r15)
   12908:	mov    0x10(%r13),%eax
   1290c:	add    $0x1,%eax
   1290f:	mov    %eax,0x10(%r13)
   12913:	mov    -0x40(%rbp),%rsi
   12917:	mov    -0x38(%rbp),%rcx
   1291b:	mov    0x140(%r12),%eax
   12923:	cmp    0x10(%r13),%eax
   12927:	ja     12888 <process_data_simple_main+0x48>
   1292d:	mov    -0x28(%rbp),%r15
   12931:	mov    -0x20(%rbp),%r14
   12935:	mov    -0x18(%rbp),%r13
   12939:	mov    -0x10(%rbp),%r12
   1293d:	mov    -0x8(%rbp),%rbx
   12941:	leaveq 
   12942:	retq   
   12943:	mov    -0x28(%rbp),%r15
   12947:	mov    -0x20(%rbp),%r14
   1294b:	mov    -0x18(%rbp),%r13
   1294f:	mov    -0x10(%rbp),%r12
   12953:	mov    -0x8(%rbp),%rbx
   12957:	leaveq 
   12958:	retq   
   12959:	movslq 0x18(%r13),%rax
   1295d:	test   %eax,%eax
   1295f:	je     12977 <process_data_simple_main+0x137>
   12961:	mov    -0x28(%rbp),%r15
   12965:	mov    -0x20(%rbp),%r14
   12969:	mov    -0x18(%rbp),%r13
   1296d:	mov    -0x10(%rbp),%r12
   12971:	mov    -0x8(%rbp),%rbx
   12975:	leaveq 
   12976:	retq   
   12977:	mov    (%r14),%eax
   1297a:	add    $0xffffffff,%eax
   1297d:	mov    %eax,(%r14)
   12980:	movl   $0x1,0x18(%r13)
   12988:	mov    -0x28(%rbp),%r15
   1298c:	mov    -0x20(%rbp),%r14
   12990:	mov    -0x18(%rbp),%r13
   12994:	mov    -0x10(%rbp),%r12
   12998:	mov    -0x8(%rbp),%rbx
   1299c:	leaveq 
   1299d:	retq   
   1299e:	xchg   %ax,%ax

00000000000129a0 <start_pass_main>:
   129a0:	push   %rbp
   129a1:	mov    %rsp,%rbp
   129a4:	sub    $0x10,%rsp
   129a8:	mov    0x1b8(%rdi),%rax
   129af:	movslq 0x100(%rdi),%rcx
   129b6:	test   %ecx,%ecx
   129b8:	je     129bc <start_pass_main+0x1c>
   129ba:	leaveq 
   129bb:	retq   
   129bc:	test   %esi,%esi
   129be:	je     129ee <start_pass_main+0x4e>
   129c0:	mov    (%rdi),%rcx
   129c3:	movl   $0x4,0x28(%rcx)
   129ca:	mov    (%rdi),%rcx
   129cd:	mov    (%rcx),%rcx
   129d0:	mov    %r14,-0x8(%rbp)
   129d4:	mov    %r15,-0x10(%rbp)
   129d8:	mov    %rax,%r14
   129db:	mov    %rsi,%r15
   129de:	callq  *%rcx
   129e0:	mov    %r14,%rax
   129e3:	mov    %r15,%rsi
   129e6:	mov    -0x10(%rbp),%r15
   129ea:	mov    -0x8(%rbp),%r14
   129ee:	movl   $0x0,0x10(%rax)
   129f5:	movl   $0x0,0x14(%rax)
   129fc:	movl   $0x0,0x18(%rax)
   12a03:	mov    %esi,0x1c(%rax)
   12a06:	lea    -0x1cd(%rip),%rcx        # 12840 <process_data_simple_main>
   12a0d:	mov    %rcx,0x8(%rax)
   12a11:	leaveq 
   12a12:	retq   
   12a13:	nopw   %cs:0x0(%rax,%rax,1)
   12a1d:	nopl   (%rax)

0000000000012a20 <jinit_marker_writer>:
   12a20:	push   %rbp
   12a21:	mov    %rsp,%rbp
   12a24:	sub    $0x10,%rsp
   12a28:	mov    %r15,-0x8(%rbp)
   12a2c:	mov    0x8(%rdi),%rax
   12a30:	mov    (%rax),%rax
   12a33:	mov    $0x1,%esi
   12a38:	mov    $0x40,%edx
   12a3d:	mov    %rdi,%r15
   12a40:	callq  *%rax
   12a42:	mov    %rax,0x1d0(%r15)
   12a49:	lea    0x9f0(%rip),%rcx        # 13440 <write_file_header>
   12a50:	mov    %rcx,(%rax)
   12a53:	lea    0xa56(%rip),%rcx        # 134b0 <write_frame_header>
   12a5a:	mov    %rcx,0x8(%rax)
   12a5e:	lea    0xc0b(%rip),%rcx        # 13670 <write_scan_header>
   12a65:	mov    %rcx,0x10(%rax)
   12a69:	lea    0xd00(%rip),%rcx        # 13770 <write_file_trailer>
   12a70:	mov    %rcx,0x18(%rax)
   12a74:	lea    0xd05(%rip),%rcx        # 13780 <write_tables_only>
   12a7b:	mov    %rcx,0x20(%rax)
   12a7f:	lea    0x93a(%rip),%rcx        # 133c0 <write_marker_header>
   12a86:	mov    %rcx,0x28(%rax)
   12a8a:	lea    0x99f(%rip),%rcx        # 13430 <write_marker_byte>
   12a91:	mov    %rcx,0x30(%rax)
   12a95:	movl   $0x0,0x38(%rax)
   12a9c:	mov    -0x8(%rbp),%r15
   12aa0:	leaveq 
   12aa1:	retq   
   12aa2:	data16 nopw %cs:0x0(%rax,%rax,1)
   12aad:	nopl   (%rax)

0000000000012ab0 <emit_byte>:
   12ab0:	push   %rbp
   12ab1:	mov    %rsp,%rbp
   12ab4:	sub    $0x10,%rsp
   12ab8:	mov    0x28(%rdi),%rcx
   12abc:	mov    (%rcx),%rax
   12abf:	lea    0x1(%rax),%rdx
   12ac3:	mov    %rdx,(%rcx)
   12ac6:	mov    %sil,(%rax)
   12ac9:	mov    0x8(%rcx),%rax
   12acd:	add    $0xffffffffffffffff,%rax
   12ad1:	mov    %rax,0x8(%rcx)
   12ad5:	test   %rax,%rax
   12ad8:	je     12adc <emit_byte+0x2c>
   12ada:	leaveq 
   12adb:	retq   
   12adc:	mov    %rdi,%rax
   12adf:	mov    %r15,-0x8(%rbp)
   12ae3:	mov    %rdi,%r15
   12ae6:	mov    %rax,%rdi
   12ae9:	callq  *0x18(%rcx)
   12aec:	test   %eax,%eax
   12aee:	je     12af6 <emit_byte+0x46>
   12af0:	mov    -0x8(%rbp),%r15
   12af4:	leaveq 
   12af5:	retq   
   12af6:	mov    (%r15),%rax
   12af9:	movl   $0x18,0x28(%rax)
   12b00:	mov    (%r15),%rax
   12b03:	mov    (%rax),%rax
   12b06:	mov    %r15,%rdi
   12b09:	callq  *%rax
   12b0b:	mov    -0x8(%rbp),%r15
   12b0f:	leaveq 
   12b10:	retq   
   12b11:	data16 nopw %cs:0x0(%rax,%rax,1)
   12b1c:	nopl   0x0(%rax)

0000000000012b20 <emit_marker>:
   12b20:	push   %rbp
   12b21:	mov    %rsp,%rbp
   12b24:	sub    $0x10,%rsp
   12b28:	mov    %r14,-0x8(%rbp)
   12b2c:	mov    %r15,-0x10(%rbp)
   12b30:	mov    %rsi,%r15
   12b33:	mov    $0xff,%esi
   12b38:	mov    %rdi,%r14
   12b3b:	callq  12ab0 <emit_byte>
   12b40:	mov    %r15,%rsi
   12b43:	mov    %r14,%rdi
   12b46:	callq  12ab0 <emit_byte>
   12b4b:	mov    -0x10(%rbp),%r15
   12b4f:	mov    -0x8(%rbp),%r14
   12b53:	leaveq 
   12b54:	retq   
   12b55:	data16 nopw %cs:0x0(%rax,%rax,1)

0000000000012b60 <emit_2bytes>:
   12b60:	push   %rbp
   12b61:	mov    %rsp,%rbp
   12b64:	sub    $0x10,%rsp
   12b68:	mov    %r14,-0x8(%rbp)
   12b6c:	mov    %r15,-0x10(%rbp)
   12b70:	mov    %rsi,%rax
   12b73:	and    $0xff00,%eax
   12b78:	shr    $0x8,%eax
   12b7b:	mov    %rsi,%r15
   12b7e:	mov    %rax,%rsi
   12b81:	mov    %rdi,%r14
   12b84:	callq  12ab0 <emit_byte>
   12b89:	movzbl %r15b,%esi
   12b8d:	mov    %r14,%rdi
   12b90:	callq  12ab0 <emit_byte>
   12b95:	mov    -0x10(%rbp),%r15
   12b99:	mov    -0x8(%rbp),%r14
   12b9d:	leaveq 
   12b9e:	retq   
   12b9f:	nop

0000000000012ba0 <emit_dqt>:
   12ba0:	push   %rbp
   12ba1:	mov    %rsp,%rbp
   12ba4:	sub    $0x30,%rsp
   12ba8:	mov    %r13,-0x20(%rbp)
   12bac:	mov    %r14,-0x28(%rbp)
   12bb0:	mov    %r15,-0x30(%rbp)
   12bb4:	mov    %rdi,-0x18(%rbp)
   12bb8:	mov    %rsi,-0x10(%rbp)
   12bbc:	xor    %r13d,%r13d
   12bbf:	mov    $0x1,%r14d
   12bc5:	movslq %esi,%rax
   12bc8:	mov    0x60(%rdi,%rax,8),%r15
   12bcd:	mov    %r15,-0x8(%rbp)
   12bd1:	test   %r15,%r15
   12bd4:	je     12be4 <emit_dqt+0x44>
   12bd6:	mov    %r12,%rdx
   12bd9:	mov    %rbx,%r12
   12bdc:	mov    %r13,%rax
   12bdf:	mov    %rax,%rbx
   12be2:	jmp    12c25 <emit_dqt+0x85>
   12be4:	mov    (%rdi),%rax
   12be7:	movl   $0x34,0x28(%rax)
   12bee:	mov    (%rdi),%rax
   12bf1:	mov    %esi,0x2c(%rax)
   12bf4:	mov    (%rdi),%rax
   12bf7:	mov    (%rax),%rax
   12bfa:	mov    %r12,%rcx
   12bfd:	mov    %rbx,%r12
   12c00:	mov    %rcx,%rbx
   12c03:	callq  *%rax
   12c05:	mov    %rbx,%rdx
   12c08:	mov    %r13,%rax
   12c0b:	mov    %rax,%rbx
   12c0e:	jmp    12c25 <emit_dqt+0x85>
   12c10:	movslq %eax,%rcx
   12c13:	movzwl (%r15,%rcx,2),%ecx
   12c18:	cmp    $0xff,%cx
   12c1d:	jbe    12c22 <emit_dqt+0x82>
   12c1f:	mov    %r14,%rbx
   12c22:	add    $0x1,%eax
   12c25:	cmp    $0x3f,%eax
   12c28:	jle    12c10 <emit_dqt+0x70>
   12c2a:	movslq 0x80(%r15),%rax
   12c31:	test   %eax,%eax
   12c33:	je     12c4c <emit_dqt+0xac>
   12c35:	mov    %rbx,%rax
   12c38:	mov    %r12,%rbx
   12c3b:	mov    %rdx,%r12
   12c3e:	mov    -0x30(%rbp),%r15
   12c42:	mov    -0x28(%rbp),%r14
   12c46:	mov    -0x20(%rbp),%r13
   12c4a:	leaveq 
   12c4b:	retq   
   12c4c:	mov    $0xdb,%esi
   12c51:	mov    -0x18(%rbp),%r14
   12c55:	mov    %r14,%rdi
   12c58:	mov    %rdx,-0x18(%rbp)
   12c5c:	callq  12b20 <emit_marker>
   12c61:	test   %ebx,%ebx
   12c63:	jg     12c6c <emit_dqt+0xcc>
   12c65:	mov    $0x43,%esi
   12c6a:	jmp    12c71 <emit_dqt+0xd1>
   12c6c:	mov    $0x83,%esi
   12c71:	mov    %r14,%rdi
   12c74:	callq  12b60 <emit_2bytes>
   12c79:	mov    %rbx,%rax
   12c7c:	neg    %eax
   12c7e:	and    $0x10,%eax
   12c81:	mov    -0x10(%rbp),%rcx
   12c85:	lea    (%rcx,%rax,1),%esi
   12c88:	mov    %r14,%rdi
   12c8b:	callq  12ab0 <emit_byte>
   12c90:	mov    0x5b341(%rip),%rax        # 6dfd8 <jpeg_natural_order@@LIBJPEG_6.2+0x129f4>
   12c97:	mov    %r12,-0x10(%rbp)
   12c9b:	mov    %rax,%r12
   12c9e:	jmp    12cd7 <emit_dqt+0x137>
   12ca0:	test   %ebx,%ebx
   12ca2:	movslq %r13d,%rax
   12ca5:	movslq (%r12,%rax,4),%rax
   12ca9:	movzwl (%r15,%rax,2),%eax
   12cae:	jle    12cc8 <emit_dqt+0x128>
   12cb0:	mov    %rax,%r15
   12cb3:	mov    %r15,%rsi
   12cb6:	shr    $0x8,%esi
   12cb9:	mov    %r14,%rdi
   12cbc:	callq  12ab0 <emit_byte>
   12cc1:	mov    %r15,%rax
   12cc4:	mov    -0x8(%rbp),%r15
   12cc8:	movzbl %al,%esi
   12ccb:	mov    %r14,%rdi
   12cce:	callq  12ab0 <emit_byte>
   12cd3:	add    $0x1,%r13d
   12cd7:	cmp    $0x3f,%r13d
   12cdb:	jle    12ca0 <emit_dqt+0x100>
   12cdd:	movl   $0x1,0x80(%r15)
   12ce8:	mov    %rbx,%rax
   12ceb:	mov    -0x10(%rbp),%rbx
   12cef:	mov    -0x18(%rbp),%r12
   12cf3:	mov    -0x30(%rbp),%r15
   12cf7:	mov    -0x28(%rbp),%r14
   12cfb:	mov    -0x20(%rbp),%r13
   12cff:	leaveq 
   12d00:	retq   
   12d01:	data16 nopw %cs:0x0(%rax,%rax,1)
   12d0c:	nopl   0x0(%rax)

0000000000012d10 <emit_dht>:
   12d10:	push   %rbp
   12d11:	mov    %rsp,%rbp
   12d14:	sub    $0x30,%rsp
   12d18:	mov    %r15,-0x28(%rbp)
   12d1c:	test   %edx,%edx
   12d1e:	jne    12d2d <emit_dht+0x1d>
   12d20:	movslq %esi,%rax
   12d23:	mov    0x80(%rdi,%rax,8),%rax
   12d2b:	jmp    12d3b <emit_dht+0x2b>
   12d2d:	movslq %esi,%rax
   12d30:	mov    0xa0(%rdi,%rax,8),%rax
   12d38:	add    $0x10,%esi
   12d3b:	test   %rax,%rax
   12d3e:	je     12d57 <emit_dht+0x47>
   12d40:	mov    %r13,%rdx
   12d43:	mov    %rbx,%r13
   12d46:	mov    %rax,%rbx
   12d49:	mov    %r15,%rax
   12d4c:	mov    %r14,%r15
   12d4f:	mov    %r12,%r14
   12d52:	mov    %rdi,%r12
   12d55:	jmp    12d9b <emit_dht+0x8b>
   12d57:	mov    (%rdi),%rcx
   12d5a:	movl   $0x32,0x28(%rcx)
   12d61:	mov    (%rdi),%rcx
   12d64:	mov    %esi,0x2c(%rcx)
   12d67:	mov    (%rdi),%rcx
   12d6a:	mov    (%rcx),%rcx
   12d6d:	mov    %rdi,%rdx
   12d70:	mov    %rdi,-0x20(%rbp)
   12d74:	mov    %rsi,-0x18(%rbp)
   12d78:	mov    %rdx,%rdi
   12d7b:	mov    %r14,%r15
   12d7e:	mov    %r12,%r14
   12d81:	mov    %r13,%r12
   12d84:	mov    %rbx,%r13
   12d87:	mov    %rax,%rbx
   12d8a:	callq  *%rcx
   12d8c:	mov    %r12,%rdx
   12d8f:	mov    -0x18(%rbp),%rsi
   12d93:	mov    -0x20(%rbp),%r12
   12d97:	mov    -0x28(%rbp),%rax
   12d9b:	movslq 0x114(%rbx),%rcx
   12da2:	test   %ecx,%ecx
   12da4:	je     12db7 <emit_dht+0xa7>
   12da6:	mov    %r13,%rbx
   12da9:	mov    %rdx,%r13
   12dac:	mov    %r14,%r12
   12daf:	mov    %r15,%r14
   12db2:	mov    %rax,%r15
   12db5:	leaveq 
   12db6:	retq   
   12db7:	mov    $0xc4,%eax
   12dbc:	mov    %r12,%rdi
   12dbf:	mov    %rdx,-0x18(%rbp)
   12dc3:	mov    %r15,-0x20(%rbp)
   12dc7:	mov    %rsi,%r15
   12dca:	mov    %rax,%rsi
   12dcd:	callq  12b20 <emit_marker>
   12dd2:	xor    %eax,%eax
   12dd4:	mov    $0x1,%r8d
   12dda:	mov    %r8,%rcx
   12ddd:	jmp    12deb <emit_dht+0xdb>
   12ddf:	movslq %ecx,%rdx
   12de2:	movzbl (%rbx,%rdx,1),%edx
   12de6:	add    %edx,%eax
   12de8:	add    $0x1,%ecx
   12deb:	cmp    $0x10,%ecx
   12dee:	jle    12ddf <emit_dht+0xcf>
   12df0:	lea    0x13(%rax),%esi
   12df3:	mov    %r12,%rdi
   12df6:	mov    %r13,-0x8(%rbp)
   12dfa:	mov    %r14,-0x10(%rbp)
   12dfe:	mov    %rax,%r13
   12e01:	mov    %r8,%r14
   12e04:	callq  12b60 <emit_2bytes>
   12e09:	mov    %r15,%rsi
   12e0c:	mov    %r12,%rdi
   12e0f:	callq  12ab0 <emit_byte>
   12e14:	jmp    12e29 <emit_dht+0x119>
   12e16:	movslq %r14d,%rax
   12e19:	movzbl (%rbx,%rax,1),%esi
   12e1d:	mov    %r12,%rdi
   12e20:	callq  12ab0 <emit_byte>
   12e25:	add    $0x1,%r14d
   12e29:	cmp    $0x10,%r14d
   12e2d:	jle    12e16 <emit_dht+0x106>
   12e2f:	xor    %r14d,%r14d
   12e32:	jmp    12e48 <emit_dht+0x138>
   12e34:	movslq %r14d,%rax
   12e37:	movzbl 0x11(%rbx,%rax,1),%esi
   12e3c:	mov    %r12,%rdi
   12e3f:	callq  12ab0 <emit_byte>
   12e44:	add    $0x1,%r14d
   12e48:	cmp    %r13d,%r14d
   12e4b:	jl     12e34 <emit_dht+0x124>
   12e4d:	movl   $0x1,0x114(%rbx)
   12e57:	mov    -0x10(%rbp),%r12
   12e5b:	mov    -0x8(%rbp),%rbx
   12e5f:	mov    -0x20(%rbp),%r14
   12e63:	mov    -0x18(%rbp),%r13
   12e67:	mov    -0x28(%rbp),%r15
   12e6b:	leaveq 
   12e6c:	retq   
   12e6d:	nopl   (%rax)

0000000000012e70 <emit_dac>:
   12e70:	push   %rbp
   12e71:	mov    %rsp,%rbp
   12e74:	sub    $0x40,%rsp
   12e78:	xor    %r8d,%r8d
   12e7b:	mov    %r8,%rax
   12e7e:	jmp    12e90 <emit_dac+0x20>
   12e80:	movslq %eax,%rcx
   12e83:	movb   $0x0,-0x28(%rbp,%rcx,1)
   12e88:	movb   $0x0,-0x38(%rbp,%rcx,1)
   12e8d:	add    $0x1,%eax
   12e90:	cmp    $0xf,%eax
   12e93:	jle    12e80 <emit_dac+0x10>
   12e95:	mov    %r8,%rax
   12e98:	jmp    12edb <emit_dac+0x6b>
   12e9a:	movslq %eax,%rcx
   12e9d:	mov    0x148(%rdi,%rcx,8),%rdx
   12ea5:	movslq 0x19c(%rdi),%rcx
   12eac:	test   %ecx,%ecx
   12eae:	jne    12ec4 <emit_dac+0x54>
   12eb0:	movslq 0x1a4(%rdi),%rcx
   12eb7:	test   %ecx,%ecx
   12eb9:	jne    12ec4 <emit_dac+0x54>
   12ebb:	movslq 0x14(%rdx),%rcx
   12ebf:	movb   $0x1,-0x38(%rbp,%rcx,1)
   12ec4:	movslq 0x1a0(%rdi),%rcx
   12ecb:	test   %ecx,%ecx
   12ecd:	je     12ed8 <emit_dac+0x68>
   12ecf:	movslq 0x18(%rdx),%rcx
   12ed3:	movb   $0x1,-0x28(%rbp,%rcx,1)
   12ed8:	add    $0x1,%eax
   12edb:	movslq 0x144(%rdi),%rcx
   12ee2:	cmp    %eax,%ecx
   12ee4:	jg     12e9a <emit_dac+0x2a>
   12ee6:	mov    %r8,%rax
   12ee9:	mov    %rax,%rcx
   12eec:	jmp    12f04 <emit_dac+0x94>
   12eee:	movslq %ecx,%rdx
   12ef1:	movsbq -0x28(%rbp,%rdx,1),%rsi
   12ef7:	movsbq -0x38(%rbp,%rdx,1),%rdx
   12efd:	add    %esi,%edx
   12eff:	add    %edx,%eax
   12f01:	add    $0x1,%ecx
   12f04:	cmp    $0xf,%ecx
   12f07:	jle    12eee <emit_dac+0x7e>
   12f09:	test   %eax,%eax
   12f0b:	jne    12f0f <emit_dac+0x9f>
   12f0d:	leaveq 
   12f0e:	retq   
   12f0f:	mov    $0xcc,%esi
   12f14:	mov    %rdi,%rcx
   12f17:	mov    %r13,-0x8(%rbp)
   12f1b:	mov    %r14,-0x10(%rbp)
   12f1f:	mov    %r15,-0x18(%rbp)
   12f23:	mov    %r8,%r13
   12f26:	mov    %rdi,%r14
   12f29:	mov    %rcx,%rdi
   12f2c:	mov    %rax,%r15
   12f2f:	callq  12b20 <emit_marker>
   12f34:	lea    0x2(%r15,%r15,1),%esi
   12f39:	mov    %r14,%rdi
   12f3c:	callq  12b60 <emit_2bytes>
   12f41:	jmp    12fa6 <emit_dac+0x136>
   12f43:	movslq %r13d,%r15
   12f46:	movsbq -0x38(%rbp,%r15,1),%rax
   12f4c:	test   %al,%al
   12f4e:	je     12f7b <emit_dac+0x10b>
   12f50:	mov    %r14,%rdi
   12f53:	mov    %r13,%rsi
   12f56:	callq  12ab0 <emit_byte>
   12f5b:	movzbl 0xc0(%r14,%r15,1),%ecx
   12f64:	movzbl 0xd0(%r14,%r15,1),%eax
   12f6d:	shl    $0x4,%eax
   12f70:	lea    (%rcx,%rax,1),%esi
   12f73:	mov    %r14,%rdi
   12f76:	callq  12ab0 <emit_byte>
   12f7b:	movsbq -0x28(%rbp,%r15,1),%rax
   12f81:	test   %al,%al
   12f83:	je     12fa2 <emit_dac+0x132>
   12f85:	lea    0x10(%r13),%esi
   12f89:	mov    %r14,%rdi
   12f8c:	callq  12ab0 <emit_byte>
   12f91:	movzbl 0xe0(%r14,%r15,1),%esi
   12f9a:	mov    %r14,%rdi
   12f9d:	callq  12ab0 <emit_byte>
   12fa2:	add    $0x1,%r13d
   12fa6:	cmp    $0xf,%r13d
   12faa:	jle    12f43 <emit_dac+0xd3>
   12fac:	mov    -0x18(%rbp),%r15
   12fb0:	mov    -0x10(%rbp),%r14
   12fb4:	mov    -0x8(%rbp),%r13
   12fb8:	leaveq 
   12fb9:	retq   
   12fba:	nopw   0x0(%rax,%rax,1)

0000000000012fc0 <emit_dri>:
   12fc0:	push   %rbp
   12fc1:	mov    %rsp,%rbp
   12fc4:	sub    $0x10,%rsp
   12fc8:	mov    %r15,-0x8(%rbp)
   12fcc:	mov    $0xdd,%esi
   12fd1:	mov    %rdi,%r15
   12fd4:	callq  12b20 <emit_marker>
   12fd9:	mov    $0x4,%esi
   12fde:	mov    %r15,%rdi
   12fe1:	callq  12b60 <emit_2bytes>
   12fe6:	mov    %r15,%rdi
   12fe9:	movslq 0x118(%rdi),%rsi
   12ff0:	callq  12b60 <emit_2bytes>
   12ff5:	mov    -0x8(%rbp),%r15
   12ff9:	leaveq 
   12ffa:	retq   
   12ffb:	nopl   0x0(%rax,%rax,1)

0000000000013000 <emit_sof>:
   13000:	push   %rbp
   13001:	mov    %rsp,%rbp
   13004:	sub    $0x20,%rsp
   13008:	mov    %r15,-0x18(%rbp)
   1300c:	mov    %r13,-0x8(%rbp)
   13010:	mov    %r14,-0x10(%rbp)
   13014:	mov    %rdi,%r13
   13017:	callq  12b20 <emit_marker>
   1301c:	movslq 0x4c(%r13),%rax
   13020:	lea    0x8(%rax,%rax,2),%esi
   13024:	mov    %r13,%rdi
   13027:	callq  12b60 <emit_2bytes>
   1302c:	mov    0x34(%r13),%eax
   13030:	cmp    $0xffff,%eax
   13035:	ja     13042 <emit_sof+0x42>
   13037:	mov    0x30(%r13),%eax
   1303b:	cmp    $0xffff,%eax
   13040:	jbe    13064 <emit_sof+0x64>
   13042:	mov    0x0(%r13),%rax
   13046:	movl   $0x29,0x28(%rax)
   1304d:	mov    0x0(%r13),%rax
   13051:	movl   $0xffff,0x2c(%rax)
   13058:	mov    0x0(%r13),%rax
   1305c:	mov    (%rax),%rax
   1305f:	mov    %r13,%rdi
   13062:	callq  *%rax
   13064:	movslq 0x48(%r13),%rsi
   13068:	mov    %r13,%rdi
   1306b:	callq  12ab0 <emit_byte>
   13070:	movslq 0x34(%r13),%rsi
   13074:	mov    %r13,%rdi
   13077:	callq  12b60 <emit_2bytes>
   1307c:	movslq 0x30(%r13),%rsi
   13080:	mov    %r13,%rdi
   13083:	callq  12b60 <emit_2bytes>
   13088:	movslq 0x4c(%r13),%rsi
   1308c:	mov    %r13,%rdi
   1308f:	callq  12ab0 <emit_byte>
   13094:	mov    0x58(%r13),%r15
   13098:	xor    %r14d,%r14d
   1309b:	jmp    130cf <emit_sof+0xcf>
   1309d:	movslq (%r15),%rsi
   130a0:	mov    %r13,%rdi
   130a3:	callq  12ab0 <emit_byte>
   130a8:	movslq 0x8(%r15),%rsi
   130ac:	shl    $0x4,%esi
   130af:	add    0xc(%r15),%esi
   130b3:	mov    %r13,%rdi
   130b6:	callq  12ab0 <emit_byte>
   130bb:	movslq 0x10(%r15),%rsi
   130bf:	mov    %r13,%rdi
   130c2:	callq  12ab0 <emit_byte>
   130c7:	add    $0x1,%r14d
   130cb:	add    $0x60,%r15
   130cf:	movslq 0x4c(%r13),%rax
   130d3:	cmp    %r14d,%eax
   130d6:	jg     1309d <emit_sof+0x9d>
   130d8:	mov    -0x10(%rbp),%r14
   130dc:	mov    -0x8(%rbp),%r13
   130e0:	mov    -0x18(%rbp),%r15
   130e4:	leaveq 
   130e5:	retq   
   130e6:	nopw   %cs:0x0(%rax,%rax,1)

00000000000130f0 <emit_sos>:
   130f0:	push   %rbp
   130f1:	mov    %rsp,%rbp
   130f4:	sub    $0x20,%rsp
   130f8:	mov    %r15,-0x20(%rbp)
   130fc:	mov    %r12,-0x8(%rbp)
   13100:	mov    %r13,-0x10(%rbp)
   13104:	mov    %r14,-0x18(%rbp)
   13108:	mov    $0xda,%esi
   1310d:	mov    %rdi,%r12
   13110:	callq  12b20 <emit_marker>
   13115:	movslq 0x144(%r12),%rax
   1311d:	lea    0x6(%rax,%rax,1),%esi
   13121:	mov    %r12,%rdi
   13124:	callq  12b60 <emit_2bytes>
   13129:	movslq 0x144(%r12),%rsi
   13131:	mov    %r12,%rdi
   13134:	callq  12ab0 <emit_byte>
   13139:	xor    %r13d,%r13d
   1313c:	mov    %r13,%r14
   1313f:	jmp    13157 <emit_sos+0x67>
   13141:	movslq 0x18(%r15),%rcx
   13145:	shl    $0x4,%eax
   13148:	lea    (%rcx,%rax,1),%esi
   1314b:	mov    %r12,%rdi
   1314e:	callq  12ab0 <emit_byte>
   13153:	add    $0x1,%r14d
   13157:	movslq 0x144(%r12),%rax
   1315f:	cmp    %r14d,%eax
   13162:	jg     131b1 <emit_sos+0xc1>
   13164:	movslq 0x19c(%r12),%rsi
   1316c:	mov    %r12,%rdi
   1316f:	callq  12ab0 <emit_byte>
   13174:	movslq 0x1a0(%r12),%rsi
   1317c:	mov    %r12,%rdi
   1317f:	callq  12ab0 <emit_byte>
   13184:	movslq 0x1a4(%r12),%rsi
   1318c:	shl    $0x4,%esi
   1318f:	add    0x1a8(%r12),%esi
   13197:	mov    %r12,%rdi
   1319a:	callq  12ab0 <emit_byte>
   1319f:	mov    -0x18(%rbp),%r14
   131a3:	mov    -0x10(%rbp),%r13
   131a7:	mov    -0x8(%rbp),%r12
   131ab:	mov    -0x20(%rbp),%r15
   131af:	leaveq 
   131b0:	retq   
   131b1:	movslq %r14d,%rax
   131b4:	mov    0x148(%r12,%rax,8),%r15
   131bc:	movslq (%r15),%rsi
   131bf:	mov    %r12,%rdi
   131c2:	callq  12ab0 <emit_byte>
   131c7:	movslq 0x19c(%r12),%rax
   131cf:	test   %eax,%eax
   131d1:	je     131ee <emit_sos+0xfe>
   131d3:	mov    %r13,%rax
   131d6:	movslq 0x1a0(%r12),%rcx
   131de:	test   %ecx,%ecx
   131e0:	jne    13141 <emit_sos+0x51>
   131e6:	mov    %r13,%rcx
   131e9:	jmpq   13145 <emit_sos+0x55>
   131ee:	movslq 0x1a4(%r12),%rax
   131f6:	test   %eax,%eax
   131f8:	je     131ff <emit_sos+0x10f>
   131fa:	mov    %r13,%rax
   131fd:	jmp    131d6 <emit_sos+0xe6>
   131ff:	movslq 0x14(%r15),%rax
   13203:	jmp    131d6 <emit_sos+0xe6>
   13205:	data16 nopw %cs:0x0(%rax,%rax,1)

0000000000013210 <emit_jfif_app0>:
   13210:	push   %rbp
   13211:	mov    %rsp,%rbp
   13214:	sub    $0x10,%rsp
   13218:	mov    %r15,-0x10(%rbp)
   1321c:	mov    %r14,-0x8(%rbp)
   13220:	mov    $0xe0,%esi
   13225:	mov    %rdi,%r14
   13228:	callq  12b20 <emit_marker>
   1322d:	mov    $0x10,%esi
   13232:	mov    %r14,%rdi
   13235:	callq  12b60 <emit_2bytes>
   1323a:	mov    $0x4a,%esi
   1323f:	mov    %r14,%rdi
   13242:	callq  12ab0 <emit_byte>
   13247:	mov    $0x46,%r15d
   1324d:	mov    %r14,%rdi
   13250:	mov    %r15,%rsi
   13253:	callq  12ab0 <emit_byte>
   13258:	mov    $0x49,%esi
   1325d:	mov    %r14,%rdi
   13260:	callq  12ab0 <emit_byte>
   13265:	mov    %r15,%rsi
   13268:	mov    %r14,%rdi
   1326b:	callq  12ab0 <emit_byte>
   13270:	xor    %r15d,%r15d
   13273:	mov    %r14,%rdi
   13276:	mov    %r15,%rsi
   13279:	callq  12ab0 <emit_byte>
   1327e:	movzbl 0x124(%r14),%esi
   13286:	mov    %r14,%rdi
   13289:	callq  12ab0 <emit_byte>
   1328e:	movzbl 0x125(%r14),%esi
   13296:	mov    %r14,%rdi
   13299:	callq  12ab0 <emit_byte>
   1329e:	movzbl 0x126(%r14),%esi
   132a6:	mov    %r14,%rdi
   132a9:	callq  12ab0 <emit_byte>
   132ae:	movzwl 0x128(%r14),%esi
   132b6:	mov    %r14,%rdi
   132b9:	callq  12b60 <emit_2bytes>
   132be:	movzwl 0x12a(%r14),%esi
   132c6:	mov    %r14,%rdi
   132c9:	callq  12b60 <emit_2bytes>
   132ce:	mov    %r14,%rdi
   132d1:	mov    %r15,%rsi
   132d4:	callq  12ab0 <emit_byte>
   132d9:	mov    %r15,%rsi
   132dc:	mov    %r14,%rdi
   132df:	callq  12ab0 <emit_byte>
   132e4:	mov    -0x8(%rbp),%r14
   132e8:	mov    -0x10(%rbp),%r15
   132ec:	leaveq 
   132ed:	retq   
   132ee:	xchg   %ax,%ax

00000000000132f0 <emit_adobe_app14>:
   132f0:	push   %rbp
   132f1:	mov    %rsp,%rbp
   132f4:	sub    $0x10,%rsp
   132f8:	mov    %r15,-0x8(%rbp)
   132fc:	mov    $0xee,%esi
   13301:	mov    %rdi,%r15
   13304:	callq  12b20 <emit_marker>
   13309:	mov    $0xe,%esi
   1330e:	mov    %r15,%rdi
   13311:	callq  12b60 <emit_2bytes>
   13316:	mov    $0x41,%esi
   1331b:	mov    %r15,%rdi
   1331e:	callq  12ab0 <emit_byte>
   13323:	mov    $0x64,%esi
   13328:	mov    %r15,%rdi
   1332b:	callq  12ab0 <emit_byte>
   13330:	mov    $0x6f,%esi
   13335:	mov    %r15,%rdi
   13338:	callq  12ab0 <emit_byte>
   1333d:	mov    $0x62,%esi
   13342:	mov    %r15,%rdi
   13345:	callq  12ab0 <emit_byte>
   1334a:	mov    $0x65,%esi
   1334f:	mov    %r15,%rdi
   13352:	callq  12ab0 <emit_byte>
   13357:	mov    %r15,%rdi
   1335a:	mov    $0x64,%esi
   1335f:	callq  12b60 <emit_2bytes>
   13364:	xor    %esi,%esi
   13366:	mov    %r15,%rdi
   13369:	callq  12b60 <emit_2bytes>
   1336e:	mov    %r15,%rdi
   13371:	xor    %esi,%esi
   13373:	callq  12b60 <emit_2bytes>
   13378:	mov    0x50(%r15),%eax
   1337c:	cmp    $0x3,%eax
   1337f:	je     13396 <emit_adobe_app14+0xa6>
   13381:	cmp    $0x5,%eax
   13384:	je     133a9 <emit_adobe_app14+0xb9>
   13386:	mov    %r15,%rdi
   13389:	xor    %esi,%esi
   1338b:	callq  12ab0 <emit_byte>
   13390:	mov    -0x8(%rbp),%r15
   13394:	leaveq 
   13395:	retq   
   13396:	mov    %r15,%rdi
   13399:	mov    $0x1,%esi
   1339e:	callq  12ab0 <emit_byte>
   133a3:	mov    -0x8(%rbp),%r15
   133a7:	leaveq 
   133a8:	retq   
   133a9:	mov    %r15,%rdi
   133ac:	mov    $0x2,%esi
   133b1:	callq  12ab0 <emit_byte>
   133b6:	mov    -0x8(%rbp),%r15
   133ba:	leaveq 
   133bb:	retq   
   133bc:	nopl   0x0(%rax)

00000000000133c0 <write_marker_header>:
   133c0:	push   %rbp
   133c1:	mov    %rsp,%rbp
   133c4:	sub    $0x20,%rsp
   133c8:	mov    %r14,-0x10(%rbp)
   133cc:	mov    %r15,-0x18(%rbp)
   133d0:	cmp    $0xfffd,%edx
   133d6:	ja     133e0 <write_marker_header+0x20>
   133d8:	mov    %rdi,%r14
   133db:	mov    %rdx,%r15
   133de:	jmp    1340c <write_marker_header+0x4c>
   133e0:	mov    (%rdi),%rax
   133e3:	movl   $0xb,0x28(%rax)
   133ea:	mov    (%rdi),%rax
   133ed:	mov    (%rax),%rax
   133f0:	mov    %rdi,%rcx
   133f3:	mov    %r13,-0x8(%rbp)
   133f7:	mov    %rsi,%r13
   133fa:	mov    %rdi,%r14
   133fd:	mov    %rcx,%rdi
   13400:	mov    %rdx,%r15
   13403:	callq  *%rax
   13405:	mov    %r13,%rsi
   13408:	mov    -0x8(%rbp),%r13
   1340c:	mov    %r14,%rdi
   1340f:	callq  12b20 <emit_marker>
   13414:	lea    0x2(%r15),%esi
   13418:	mov    %r14,%rdi
   1341b:	callq  12b60 <emit_2bytes>
   13420:	mov    -0x18(%rbp),%r15
   13424:	mov    -0x10(%rbp),%r14
   13428:	leaveq 
   13429:	retq   
   1342a:	nopw   0x0(%rax,%rax,1)

0000000000013430 <write_marker_byte>:
   13430:	push   %rbp
   13431:	mov    %rsp,%rbp
   13434:	callq  12ab0 <emit_byte>
   13439:	leaveq 
   1343a:	retq   
   1343b:	nopl   0x0(%rax,%rax,1)

0000000000013440 <write_file_header>:
   13440:	push   %rbp
   13441:	mov    %rsp,%rbp
   13444:	sub    $0x10,%rsp
   13448:	mov    %r14,-0x8(%rbp)
   1344c:	mov    %r15,-0x10(%rbp)
   13450:	mov    $0xd8,%esi
   13455:	mov    0x1d0(%rdi),%r15
   1345c:	mov    %rdi,%r14
   1345f:	callq  12b20 <emit_marker>
   13464:	movl   $0x0,0x38(%r15)
   1346c:	movslq 0x120(%r14),%rax
   13473:	test   %eax,%eax
   13475:	je     1347f <write_file_header+0x3f>
   13477:	mov    %r14,%rdi
   1347a:	callq  13210 <emit_jfif_app0>
   1347f:	movslq 0x12c(%r14),%rax
   13486:	test   %eax,%eax
   13488:	jne    13494 <write_file_header+0x54>
   1348a:	mov    -0x10(%rbp),%r15
   1348e:	mov    -0x8(%rbp),%r14
   13492:	leaveq 
   13493:	retq   
   13494:	mov    %r14,%rdi
   13497:	callq  132f0 <emit_adobe_app14>
   1349c:	mov    -0x10(%rbp),%r15
   134a0:	mov    -0x8(%rbp),%r14
   134a4:	leaveq 
   134a5:	retq   
   134a6:	nopw   %cs:0x0(%rax,%rax,1)

00000000000134b0 <write_frame_header>:
   134b0:	push   %rbp
   134b1:	mov    %rsp,%rbp
   134b4:	sub    $0x20,%rsp
   134b8:	mov    %r12,-0x8(%rbp)
   134bc:	mov    %r13,-0x10(%rbp)
   134c0:	mov    %r14,-0x18(%rbp)
   134c4:	mov    %r15,-0x20(%rbp)
   134c8:	mov    0x58(%rdi),%rax
   134cc:	add    $0x10,%rax
   134d0:	mov    %rdi,%r12
   134d3:	xor    %r13d,%r13d
   134d6:	mov    %r13,%r14
   134d9:	jmp    134f4 <write_frame_header+0x44>
   134db:	lea    0x60(%rax),%r15
   134df:	movslq (%rax),%rsi
   134e2:	mov    %r12,%rdi
   134e5:	callq  12ba0 <emit_dqt>
   134ea:	add    %eax,%r14d
   134ed:	add    $0x1,%r13d
   134f1:	mov    %r15,%rax
   134f4:	movslq 0x4c(%r12),%rcx
   134f9:	cmp    %r13d,%ecx
   134fc:	jg     134db <write_frame_header+0x2b>
   134fe:	movslq 0x104(%r12),%rax
   13506:	test   %eax,%eax
   13508:	je     13547 <write_frame_header+0x97>
   1350a:	xor    %eax,%eax
   1350c:	movslq 0x104(%r12),%rcx
   13514:	test   %ecx,%ecx
   13516:	jne    13557 <write_frame_header+0xa7>
   13518:	movslq 0x134(%r12),%rcx
   13520:	test   %ecx,%ecx
   13522:	jne    13582 <write_frame_header+0xd2>
   13524:	test   %eax,%eax
   13526:	jg     135a1 <write_frame_header+0xf1>
   13528:	mov    %r12,%rdi
   1352b:	mov    $0xc1,%esi
   13530:	callq  13000 <emit_sof>
   13535:	mov    -0x20(%rbp),%r15
   13539:	mov    -0x18(%rbp),%r14
   1353d:	mov    -0x10(%rbp),%r13
   13541:	mov    -0x8(%rbp),%r12
   13545:	leaveq 
   13546:	retq   
   13547:	movslq 0x134(%r12),%rax
   1354f:	test   %eax,%eax
   13551:	je     135c0 <write_frame_header+0x110>
   13553:	xor    %eax,%eax
   13555:	jmp    1350c <write_frame_header+0x5c>
   13557:	movslq 0x134(%r12),%rax
   1355f:	test   %eax,%eax
   13561:	jne    135d1 <write_frame_header+0x121>
   13563:	mov    %r12,%rdi
   13566:	mov    $0xc9,%esi
   1356b:	callq  13000 <emit_sof>
   13570:	mov    -0x20(%rbp),%r15
   13574:	mov    -0x18(%rbp),%r14
   13578:	mov    -0x10(%rbp),%r13
   1357c:	mov    -0x8(%rbp),%r12
   13580:	leaveq 
   13581:	retq   
   13582:	mov    %r12,%rdi
   13585:	mov    $0xc2,%esi
   1358a:	callq  13000 <emit_sof>
   1358f:	mov    -0x20(%rbp),%r15
   13593:	mov    -0x18(%rbp),%r14
   13597:	mov    -0x10(%rbp),%r13
   1359b:	mov    -0x8(%rbp),%r12
   1359f:	leaveq 
   135a0:	retq   
   135a1:	mov    %r12,%rdi
   135a4:	mov    $0xc0,%esi
   135a9:	callq  13000 <emit_sof>
   135ae:	mov    -0x20(%rbp),%r15
   135b2:	mov    -0x18(%rbp),%r14
   135b6:	mov    -0x10(%rbp),%r13
   135ba:	mov    -0x8(%rbp),%r12
   135be:	leaveq 
   135bf:	retq   
   135c0:	movslq 0x48(%r12),%rax
   135c5:	cmp    $0x8,%eax
   135c8:	je     135f0 <write_frame_header+0x140>
   135ca:	xor    %eax,%eax
   135cc:	jmpq   1350c <write_frame_header+0x5c>
   135d1:	mov    %r12,%rdi
   135d4:	mov    $0xca,%esi
   135d9:	callq  13000 <emit_sof>
   135de:	mov    -0x20(%rbp),%r15
   135e2:	mov    -0x18(%rbp),%r14
   135e6:	mov    -0x10(%rbp),%r13
   135ea:	mov    -0x8(%rbp),%r12
   135ee:	leaveq 
   135ef:	retq   
   135f0:	mov    0x58(%r12),%rcx
   135f5:	mov    $0x1,%eax
   135fa:	xor    %r13d,%r13d
   135fd:	mov    %r13,%rdx
   13600:	jmp    13615 <write_frame_header+0x165>
   13602:	movslq 0x14(%rcx),%rsi
   13606:	cmp    $0x1,%esi
   13609:	jle    13633 <write_frame_header+0x183>
   1360b:	mov    %r13,%rax
   1360e:	add    $0x60,%rcx
   13612:	add    $0x1,%edx
   13615:	movslq 0x4c(%r12),%rsi
   1361a:	cmp    %edx,%esi
   1361c:	jg     13602 <write_frame_header+0x152>
   1361e:	test   %r14d,%r14d
   13621:	je     1350c <write_frame_header+0x5c>
   13627:	test   %eax,%eax
   13629:	jg     13641 <write_frame_header+0x191>
   1362b:	mov    %r13,%rax
   1362e:	jmpq   1350c <write_frame_header+0x5c>
   13633:	movslq 0x18(%rcx),%rsi
   13637:	cmp    $0x1,%esi
   1363a:	jle    1360e <write_frame_header+0x15e>
   1363c:	mov    %r13,%rax
   1363f:	jmp    1360e <write_frame_header+0x15e>
   13641:	mov    (%r12),%rax
   13645:	movl   $0x4b,0x28(%rax)
   1364c:	mov    (%r12),%rax
   13650:	mov    0x8(%rax),%rax
   13654:	mov    %r12,%rdi
   13657:	mov    %r13,%rsi
   1365a:	callq  *%rax
   1365c:	mov    %r13,%rax
   1365f:	jmpq   1350c <write_frame_header+0x5c>
   13664:	data16 nopw %cs:0x0(%rax,%rax,1)
   1366f:	nop

0000000000013670 <write_scan_header>:
   13670:	push   %rbp
   13671:	mov    %rsp,%rbp
   13674:	sub    $0x30,%rsp
   13678:	mov    %r14,-0x20(%rbp)
   1367c:	mov    %r15,-0x28(%rbp)
   13680:	mov    0x1d0(%rdi),%rcx
   13687:	movslq 0x104(%rdi),%rax
   1368e:	test   %eax,%eax
   13690:	jne    136b6 <write_scan_header+0x46>
   13692:	xor    %r14d,%r14d
   13695:	mov    $0x1,%r15d
   1369b:	mov    %rcx,-0x30(%rbp)
   1369f:	mov    %rbx,-0x8(%rbp)
   136a3:	mov    %r12,-0x10(%rbp)
   136a7:	mov    %r13,-0x18(%rbp)
   136ab:	mov    %rdi,%rbx
   136ae:	mov    %r14,%r12
   136b1:	jmpq   13745 <write_scan_header+0xd5>
   136b6:	mov    %rbx,%r14
   136b9:	mov    %rcx,%r15
   136bc:	mov    %rdi,%rbx
   136bf:	callq  12e70 <emit_dac>
   136c4:	mov    0x38(%r15),%eax
   136c8:	cmp    0x118(%rbx),%eax
   136ce:	je     136e2 <write_scan_header+0x72>
   136d0:	mov    %rbx,%rdi
   136d3:	callq  12fc0 <emit_dri>
   136d8:	mov    0x118(%rbx),%eax
   136de:	mov    %eax,0x38(%r15)
   136e2:	mov    %rbx,%rdi
   136e5:	callq  130f0 <emit_sos>
   136ea:	mov    %r14,%rbx
   136ed:	mov    -0x28(%rbp),%r15
   136f1:	mov    -0x20(%rbp),%r14
   136f5:	leaveq 
   136f6:	retq   
   136f7:	movslq %r12d,%rax
   136fa:	mov    0x148(%rbx,%rax,8),%r13
   13702:	movslq 0x19c(%rbx),%rax
   13709:	test   %eax,%eax
   1370b:	jne    13727 <write_scan_header+0xb7>
   1370d:	movslq 0x1a4(%rbx),%rax
   13714:	test   %eax,%eax
   13716:	jne    13727 <write_scan_header+0xb7>
   13718:	movslq 0x14(%r13),%rsi
   1371c:	mov    %rbx,%rdi
   1371f:	mov    %r14,%rdx
   13722:	callq  12d10 <emit_dht>
   13727:	movslq 0x1a0(%rbx),%rax
   1372e:	test   %eax,%eax
   13730:	je     13741 <write_scan_header+0xd1>
   13732:	movslq 0x18(%r13),%rsi
   13736:	mov    %rbx,%rdi
   13739:	mov    %r15,%rdx
   1373c:	callq  12d10 <emit_dht>
   13741:	add    $0x1,%r12d
   13745:	movslq 0x144(%rbx),%rax
   1374c:	cmp    %r12d,%eax
   1374f:	jg     136f7 <write_scan_header+0x87>
   13751:	mov    -0x18(%rbp),%r13
   13755:	mov    -0x10(%rbp),%r12
   13759:	mov    -0x8(%rbp),%r14
   1375d:	mov    -0x30(%rbp),%r15
   13761:	jmpq   136c4 <write_scan_header+0x54>
   13766:	nopw   %cs:0x0(%rax,%rax,1)

0000000000013770 <write_file_trailer>:
   13770:	push   %rbp
   13771:	mov    %rsp,%rbp
   13774:	mov    $0xd9,%esi
   13779:	callq  12b20 <emit_marker>
   1377e:	leaveq 
   1377f:	retq   

0000000000013780 <write_tables_only>:
   13780:	push   %rbp
   13781:	mov    %rsp,%rbp
   13784:	sub    $0x30,%rsp
   13788:	mov    %r15,-0x28(%rbp)
   1378c:	mov    %r14,-0x20(%rbp)
   13790:	mov    %rbx,%r14
   13793:	mov    $0xd8,%esi
   13798:	mov    %rdi,%rbx
   1379b:	callq  12b20 <emit_marker>
   137a0:	xor    %r15d,%r15d
   137a3:	jmp    137c1 <write_tables_only+0x41>
   137a5:	movslq %r15d,%rax
   137a8:	mov    0x60(%rbx,%rax,8),%rax
   137ad:	test   %rax,%rax
   137b0:	je     137bd <write_tables_only+0x3d>
   137b2:	mov    %rbx,%rdi
   137b5:	mov    %r15,%rsi
   137b8:	callq  12ba0 <emit_dqt>
   137bd:	add    $0x1,%r15d
   137c1:	cmp    $0x3,%r15d
   137c5:	jle    137a5 <write_tables_only+0x25>
   137c7:	movslq 0x104(%rbx),%rax
   137ce:	test   %eax,%eax
   137d0:	jne    1383b <write_tables_only+0xbb>
   137d2:	mov    $0x1,%r15d
   137d8:	mov    %r14,-0x8(%rbp)
   137dc:	mov    %r12,-0x10(%rbp)
   137e0:	mov    %r13,-0x18(%rbp)
   137e4:	xor    %r12d,%r12d
   137e7:	mov    %r12,%r13
   137ea:	jmp    13829 <write_tables_only+0xa9>
   137ec:	movslq %r13d,%r14
   137ef:	mov    0x80(%rbx,%r14,8),%rax
   137f7:	test   %rax,%rax
   137fa:	je     1380a <write_tables_only+0x8a>
   137fc:	mov    %rbx,%rdi
   137ff:	mov    %r13,%rsi
   13802:	mov    %r12,%rdx
   13805:	callq  12d10 <emit_dht>
   1380a:	mov    0xa0(%rbx,%r14,8),%rax
   13812:	test   %rax,%rax
   13815:	je     13825 <write_tables_only+0xa5>
   13817:	mov    %rbx,%rdi
   1381a:	mov    %r13,%rsi
   1381d:	mov    %r15,%rdx
   13820:	callq  12d10 <emit_dht>
   13825:	add    $0x1,%r13d
   13829:	cmp    $0x3,%r13d
   1382d:	jle    137ec <write_tables_only+0x6c>
   1382f:	mov    -0x18(%rbp),%r13
   13833:	mov    -0x10(%rbp),%r12
   13837:	mov    -0x8(%rbp),%r14
   1383b:	mov    %rbx,%rdi
   1383e:	mov    $0xd9,%esi
   13843:	callq  12b20 <emit_marker>
   13848:	mov    %r14,%rbx
   1384b:	mov    -0x20(%rbp),%r14
   1384f:	mov    -0x28(%rbp),%r15
   13853:	leaveq 
   13854:	retq   
   13855:	nopw   %cs:0x0(%rax,%rax,1)
   1385f:	nop

0000000000013860 <jinit_c_master_control>:
   13860:	push   %rbp
   13861:	mov    %rsp,%rbp
   13864:	sub    $0x20,%rsp
   13868:	mov    %r14,-0x10(%rbp)
   1386c:	mov    %r15,-0x18(%rbp)
   13870:	mov    %r13,-0x8(%rbp)
   13874:	mov    0x8(%rdi),%rax
   13878:	mov    (%rax),%rax
   1387b:	mov    %rsi,%r14
   1387e:	mov    $0x1,%esi
   13883:	mov    $0x38,%edx
   13888:	mov    %rdi,%r13
   1388b:	callq  *%rax
   1388d:	mov    %rax,0x1b0(%r13)
   13894:	lea    0xc35(%rip),%rcx        # 144d0 <prepare_for_pass>
   1389b:	mov    %rcx,(%rax)
   1389e:	lea    0xe9b(%rip),%rcx        # 14740 <pass_startup>
   138a5:	mov    %rcx,0x8(%rax)
   138a9:	lea    0xed0(%rip),%rcx        # 14780 <finish_pass_master>
   138b0:	mov    %rcx,0x10(%rax)
   138b4:	mov    %rax,%r15
   138b7:	movl   $0x0,0x1c(%r15)
   138bf:	mov    %r13,%rdi
   138c2:	mov    %r14,%rsi
   138c5:	callq  139a0 <initial_setup>
   138ca:	mov    0xf8(%r13),%rax
   138d1:	test   %rax,%rax
   138d4:	jne    138ee <jinit_c_master_control+0x8e>
   138d6:	movl   $0x0,0x134(%r13)
   138e1:	movl   $0x1,0xf0(%r13)
   138ec:	jmp    138f6 <jinit_c_master_control+0x96>
   138ee:	mov    %r13,%rdi
   138f1:	callq  13c20 <validate_script>
   138f6:	movslq 0x134(%r13),%rax
   138fd:	test   %eax,%eax
   138ff:	jne    13936 <jinit_c_master_control+0xd6>
   13901:	test   %r14d,%r14d
   13904:	jne    1394e <jinit_c_master_control+0xee>
   13906:	movl   $0x0,0x20(%r15)
   1390e:	movl   $0x0,0x2c(%r15)
   13916:	movl   $0x0,0x24(%r15)
   1391e:	movslq 0x108(%r13),%rax
   13925:	test   %eax,%eax
   13927:	jne    13963 <jinit_c_master_control+0x103>
   13929:	movslq 0xf0(%r13),%rax
   13930:	mov    %eax,0x28(%r15)
   13934:	jmp    13970 <jinit_c_master_control+0x110>
   13936:	movslq 0x104(%r13),%rax
   1393d:	test   %eax,%eax
   1393f:	jne    13901 <jinit_c_master_control+0xa1>
   13941:	movl   $0x1,0x108(%r13)
   1394c:	jmp    13901 <jinit_c_master_control+0xa1>
   1394e:	movslq 0x108(%r13),%rax
   13955:	test   %eax,%eax
   13957:	jne    13989 <jinit_c_master_control+0x129>
   13959:	movl   $0x2,0x20(%r15)
   13961:	jmp    1390e <jinit_c_master_control+0xae>
   13963:	movslq 0xf0(%r13),%rax
   1396a:	add    %eax,%eax
   1396c:	mov    %eax,0x28(%r15)
   13970:	lea    0x4593d(%rip),%rax        # 592b4 <jpeg_nbits_table+0x10000>
   13977:	mov    %rax,0x30(%r15)
   1397b:	mov    -0x8(%rbp),%r13
   1397f:	mov    -0x18(%rbp),%r15
   13983:	mov    -0x10(%rbp),%r14
   13987:	leaveq 
   13988:	retq   
   13989:	movl   $0x1,0x20(%r15)
   13991:	jmpq   1390e <jinit_c_master_control+0xae>
   13996:	nopw   %cs:0x0(%rax,%rax,1)

00000000000139a0 <initial_setup>:
   139a0:	push   %rbp
   139a1:	mov    %rsp,%rbp
   139a4:	sub    $0x20,%rsp
   139a8:	mov    %r15,-0x18(%rbp)
   139ac:	mov    %r13,-0x8(%rbp)
   139b0:	mov    %r14,-0x10(%rbp)
   139b4:	mov    0x34(%rdi),%eax
   139b7:	test   %eax,%eax
   139b9:	je     139d7 <initial_setup+0x37>
   139bb:	mov    0x30(%rdi),%eax
   139be:	test   %eax,%eax
   139c0:	je     139d7 <initial_setup+0x37>
   139c2:	movslq 0x4c(%rdi),%rax
   139c6:	test   %eax,%eax
   139c8:	jle    139d7 <initial_setup+0x37>
   139ca:	movslq 0x38(%rdi),%rax
   139ce:	test   %eax,%eax
   139d0:	jle    139d7 <initial_setup+0x37>
   139d2:	mov    %rdi,%r13
   139d5:	jmp    139ec <initial_setup+0x4c>
   139d7:	mov    (%rdi),%rax
   139da:	movl   $0x20,0x28(%rax)
   139e1:	mov    (%rdi),%rax
   139e4:	mov    (%rax),%rax
   139e7:	mov    %rdi,%r13
   139ea:	callq  *%rax
   139ec:	mov    0x34(%r13),%eax
   139f0:	cmp    $0xffdc,%eax
   139f5:	ja     13a02 <initial_setup+0x62>
   139f7:	mov    0x30(%r13),%eax
   139fb:	cmp    $0xffdc,%eax
   13a00:	jbe    13a24 <initial_setup+0x84>
   13a02:	mov    0x0(%r13),%rax
   13a06:	movl   $0x29,0x28(%rax)
   13a0d:	mov    0x0(%r13),%rax
   13a11:	movl   $0xffdc,0x2c(%rax)
   13a18:	mov    0x0(%r13),%rax
   13a1c:	mov    (%rax),%rax
   13a1f:	mov    %r13,%rdi
   13a22:	callq  *%rax
   13a24:	movslq 0x38(%r13),%rax
   13a28:	mov    0x30(%r13),%ecx
   13a2c:	imul   %rcx,%rax
   13a30:	mov    %eax,%ecx
   13a32:	cmp    %rax,%rcx
   13a35:	je     13a4e <initial_setup+0xae>
   13a37:	mov    0x0(%r13),%rax
   13a3b:	movl   $0x46,0x28(%rax)
   13a42:	mov    0x0(%r13),%rax
   13a46:	mov    (%rax),%rax
   13a49:	mov    %r13,%rdi
   13a4c:	callq  *%rax
   13a4e:	movslq 0x48(%r13),%rax
   13a52:	cmp    $0x8,%eax
   13a55:	je     13a79 <initial_setup+0xd9>
   13a57:	mov    0x0(%r13),%rax
   13a5b:	movl   $0xf,0x28(%rax)
   13a62:	movslq 0x48(%r13),%rcx
   13a66:	mov    0x0(%r13),%rax
   13a6a:	mov    %ecx,0x2c(%rax)
   13a6d:	mov    0x0(%r13),%rax
   13a71:	mov    (%rax),%rax
   13a74:	mov    %r13,%rdi
   13a77:	callq  *%rax
   13a79:	movslq 0x4c(%r13),%rax
   13a7d:	cmp    $0xa,%eax
   13a80:	jle    13aaf <initial_setup+0x10f>
   13a82:	mov    0x0(%r13),%rax
   13a86:	movl   $0x1a,0x28(%rax)
   13a8d:	movslq 0x4c(%r13),%rcx
   13a91:	mov    0x0(%r13),%rax
   13a95:	mov    %ecx,0x2c(%rax)
   13a98:	mov    0x0(%r13),%rax
   13a9c:	movl   $0xa,0x30(%rax)
   13aa3:	mov    0x0(%r13),%rax
   13aa7:	mov    (%rax),%rax
   13aaa:	mov    %r13,%rdi
   13aad:	callq  *%rax
   13aaf:	mov    0x58(%r13),%r14
   13ab3:	movl   $0x1,0x138(%r13)
   13abe:	movl   $0x1,0x13c(%r13)
   13ac9:	xor    %r15d,%r15d
   13acc:	jmp    13b39 <initial_setup+0x199>
   13ace:	movslq 0x8(%r14),%rax
   13ad2:	test   %eax,%eax
   13ad4:	jle    13ae8 <initial_setup+0x148>
   13ad6:	cmp    $0x4,%eax
   13ad9:	jg     13ae8 <initial_setup+0x148>
   13adb:	movslq 0xc(%r14),%rax
   13adf:	test   %eax,%eax
   13ae1:	jle    13ae8 <initial_setup+0x148>
   13ae3:	cmp    $0x4,%eax
   13ae6:	jle    13aff <initial_setup+0x15f>
   13ae8:	mov    0x0(%r13),%rax
   13aec:	movl   $0x12,0x28(%rax)
   13af3:	mov    0x0(%r13),%rax
   13af7:	mov    (%rax),%rax
   13afa:	mov    %r13,%rdi
   13afd:	callq  *%rax
   13aff:	movslq 0x138(%r13),%rcx
   13b06:	movslq 0x8(%r14),%rax
   13b0a:	cmp    %ecx,%eax
   13b0c:	jge    13b11 <initial_setup+0x171>
   13b0e:	mov    %rcx,%rax
   13b11:	mov    %eax,0x138(%r13)
   13b18:	movslq 0x13c(%r13),%rcx
   13b1f:	movslq 0xc(%r14),%rax
   13b23:	cmp    %ecx,%eax
   13b25:	jge    13b2a <initial_setup+0x18a>
   13b27:	mov    %rcx,%rax
   13b2a:	mov    %eax,0x13c(%r13)
   13b31:	add    $0x60,%r14
   13b35:	add    $0x1,%r15d
   13b39:	movslq 0x4c(%r13),%rax
   13b3d:	cmp    %r15d,%eax
   13b40:	jg     13ace <initial_setup+0x12e>
   13b42:	mov    0x58(%r13),%r15
   13b46:	xor    %r14d,%r14d
   13b49:	jmpq   13be6 <initial_setup+0x246>
   13b4e:	mov    %r14d,0x4(%r15)
   13b52:	movl   $0x8,0x24(%r15)
   13b5a:	movslq 0x8(%r15),%rdi
   13b5e:	mov    0x30(%r13),%eax
   13b62:	imul   %rax,%rdi
   13b66:	movslq 0x138(%r13),%rax
   13b6d:	shl    $0x3,%eax
   13b70:	movslq %eax,%rsi
   13b73:	callq  4150 <jdiv_round_up@plt>
   13b78:	mov    %eax,0x1c(%r15)
   13b7c:	movslq 0xc(%r15),%rdi
   13b80:	mov    0x34(%r13),%eax
   13b84:	imul   %rax,%rdi
   13b88:	movslq 0x13c(%r13),%rax
   13b8f:	shl    $0x3,%eax
   13b92:	movslq %eax,%rsi
   13b95:	callq  4150 <jdiv_round_up@plt>
   13b9a:	mov    %eax,0x20(%r15)
   13b9e:	movslq 0x8(%r15),%rdi
   13ba2:	mov    0x30(%r13),%eax
   13ba6:	imul   %rax,%rdi
   13baa:	movslq 0x138(%r13),%rsi
   13bb1:	callq  4150 <jdiv_round_up@plt>
   13bb6:	mov    %eax,0x28(%r15)
   13bba:	movslq 0xc(%r15),%rdi
   13bbe:	mov    0x34(%r13),%eax
   13bc2:	imul   %rax,%rdi
   13bc6:	movslq 0x13c(%r13),%rsi
   13bcd:	callq  4150 <jdiv_round_up@plt>
   13bd2:	mov    %eax,0x2c(%r15)
   13bd6:	movl   $0x1,0x30(%r15)
   13bde:	add    $0x1,%r14d
   13be2:	add    $0x60,%r15
   13be6:	movslq 0x4c(%r13),%rax
   13bea:	cmp    %r14d,%eax
   13bed:	jg     13b4e <initial_setup+0x1ae>
   13bf3:	mov    0x34(%r13),%edi
   13bf7:	movslq 0x13c(%r13),%rax
   13bfe:	shl    $0x3,%eax
   13c01:	movslq %eax,%rsi
   13c04:	callq  4150 <jdiv_round_up@plt>
   13c09:	mov    %eax,0x140(%r13)
   13c10:	mov    -0x10(%rbp),%r14
   13c14:	mov    -0x8(%rbp),%r13
   13c18:	mov    -0x18(%rbp),%r15
   13c1c:	leaveq 
   13c1d:	retq   
   13c1e:	xchg   %ax,%ax

0000000000013c20 <validate_script>:
   13c20:	push   %rbp
   13c21:	mov    %rsp,%rbp
   13c24:	sub    $0xaa0,%rsp
   13c2b:	mov    %r15,-0x28(%rbp)
   13c2f:	mov    %rdi,-0x50(%rbp)
   13c33:	mov    %rbx,-0x8(%rbp)
   13c37:	mov    %r12,-0x10(%rbp)
   13c3b:	mov    %r13,-0x18(%rbp)
   13c3f:	mov    %r14,-0x20(%rbp)
   13c43:	movslq 0xf0(%rdi),%rax
   13c4a:	test   %eax,%eax
   13c4c:	jg     13c70 <validate_script+0x50>
   13c4e:	mov    (%rdi),%rax
   13c51:	movl   $0x13,0x28(%rax)
   13c58:	mov    (%rdi),%rax
   13c5b:	movl   $0x0,0x2c(%rax)
   13c62:	mov    (%rdi),%rax
   13c65:	mov    (%rax),%rax
   13c68:	mov    %rdi,%rbx
   13c6b:	callq  *%rax
   13c6d:	mov    %rbx,%rdi
   13c70:	lea    -0xa70(%rbp),%rcx
   13c77:	xor    %ebx,%ebx
   13c79:	mov    $0x1,%eax
   13c7e:	mov    0xf8(%rdi),%r14
   13c85:	movslq 0x14(%r14),%rdx
   13c89:	test   %edx,%edx
   13c8b:	jne    13ca5 <validate_script+0x85>
   13c8d:	movslq 0x18(%r14),%rdx
   13c91:	cmp    $0x3f,%edx
   13c94:	jne    13ca5 <validate_script+0x85>
   13c96:	movl   $0x0,0x134(%rdi)
   13ca0:	mov    %rbx,%rcx
   13ca3:	jmp    13cc5 <validate_script+0xa5>
   13ca5:	movl   $0x1,0x134(%rdi)
   13caf:	mov    %rbx,%rsi
   13cb2:	jmp    13ce4 <validate_script+0xc4>
   13cb4:	movslq %ecx,%rdx
   13cb7:	movl   $0x0,-0xa98(%rbp,%rdx,4)
   13cc2:	add    $0x1,%ecx
   13cc5:	movslq 0x4c(%rdi),%rdx
   13cc9:	cmp    %ecx,%edx
   13ccb:	jg     13cb4 <validate_script+0x94>
   13ccd:	jmp    13d44 <validate_script+0x124>
   13ccf:	movl   $0xffffffff,(%rcx)
   13cd5:	add    $0x4,%rcx
   13cd9:	add    $0x1,%edx
   13cdc:	cmp    $0x3f,%edx
   13cdf:	jle    13ccf <validate_script+0xaf>
   13ce1:	add    $0x1,%esi
   13ce4:	movslq 0x4c(%rdi),%rdx
   13ce8:	cmp    %esi,%edx
   13cea:	jle    13d44 <validate_script+0x124>
   13cec:	mov    %rbx,%rdx
   13cef:	jmp    13cdc <validate_script+0xbc>
   13cf1:	movslq %ebx,%rcx
   13cf4:	movslq 0x4(%r14,%rcx,4),%r12
   13cf9:	movslq -0xa98(%rbp,%r12,4),%rcx
   13d01:	test   %ecx,%ecx
   13d03:	je     13d27 <validate_script+0x107>
   13d05:	mov    (%rdi),%rcx
   13d08:	movl   $0x13,0x28(%rcx)
   13d0f:	mov    (%rdi),%rcx
   13d12:	mov    %eax,0x2c(%rcx)
   13d15:	mov    (%rdi),%rax
   13d18:	mov    (%rax),%rax
   13d1b:	mov    %rdi,%r13
   13d1e:	callq  *%rax
   13d20:	mov    %r13,%rdi
   13d23:	mov    -0x48(%rbp),%rax
   13d27:	movl   $0x1,-0xa98(%rbp,%r12,4)
   13d33:	add    $0x1,%ebx
   13d36:	cmp    %r15d,%ebx
   13d39:	jl     13cf1 <validate_script+0xd1>
   13d3b:	xor    %ebx,%ebx
   13d3d:	add    $0x24,%r14
   13d41:	add    $0x1,%eax
   13d44:	mov    %rax,-0x48(%rbp)
   13d48:	mov    %r14,-0x30(%rbp)
   13d4c:	movslq 0xf0(%rdi),%rcx
   13d53:	cmp    %eax,%ecx
   13d55:	jge    13d72 <validate_script+0x152>
   13d57:	movslq 0x134(%rdi),%rax
   13d5e:	test   %eax,%eax
   13d60:	je     13de6 <validate_script+0x1c6>
   13d66:	lea    -0xa70(%rbp),%r12
   13d6d:	jmpq   13e2e <validate_script+0x20e>
   13d72:	movslq (%r14),%r15
   13d75:	mov    %r15,-0x38(%rbp)
   13d79:	test   %r15d,%r15d
   13d7c:	jle    13d88 <validate_script+0x168>
   13d7e:	cmp    $0x4,%r15d
   13d82:	jle    13eb9 <validate_script+0x299>
   13d88:	mov    (%rdi),%rcx
   13d8b:	movl   $0x1a,0x28(%rcx)
   13d92:	mov    (%rdi),%rcx
   13d95:	mov    %r15d,0x2c(%rcx)
   13d99:	mov    (%rdi),%rcx
   13d9c:	movl   $0x4,0x30(%rcx)
   13da3:	mov    (%rdi),%rcx
   13da6:	mov    (%rcx),%rcx
   13da9:	mov    %rax,%r12
   13dac:	mov    %rdi,%r13
   13daf:	callq  *%rcx
   13db1:	mov    %r12,%rax
   13db4:	mov    %r13,%rdi
   13db7:	jmpq   13eb9 <validate_script+0x299>
   13dbc:	movslq %ebx,%rax
   13dbf:	movslq -0xa98(%rbp,%rax,4),%rax
   13dc7:	test   %eax,%eax
   13dc9:	jne    13de3 <validate_script+0x1c3>
   13dcb:	mov    (%rdi),%rax
   13dce:	movl   $0x2d,0x28(%rax)
   13dd5:	mov    (%rdi),%rax
   13dd8:	mov    (%rax),%rax
   13ddb:	mov    %rdi,%r12
   13dde:	callq  *%rax
   13de0:	mov    %r12,%rdi
   13de3:	add    $0x1,%ebx
   13de6:	movslq 0x4c(%rdi),%rax
   13dea:	cmp    %ebx,%eax
   13dec:	jg     13dbc <validate_script+0x19c>
   13dee:	mov    -0x20(%rbp),%r14
   13df2:	mov    -0x18(%rbp),%r13
   13df6:	mov    -0x10(%rbp),%r12
   13dfa:	mov    -0x8(%rbp),%rbx
   13dfe:	mov    -0x28(%rbp),%r15
   13e02:	leaveq 
   13e03:	retq   
   13e04:	movslq %ebx,%rax
   13e07:	shl    $0x8,%rax
   13e0b:	movslq (%r12,%rax,1),%rax
   13e0f:	test   %eax,%eax
   13e11:	jns    13e2b <validate_script+0x20b>
   13e13:	mov    (%rdi),%rax
   13e16:	movl   $0x2d,0x28(%rax)
   13e1d:	mov    (%rdi),%rax
   13e20:	mov    (%rax),%rax
   13e23:	mov    %rdi,%r13
   13e26:	callq  *%rax
   13e28:	mov    %r13,%rdi
   13e2b:	add    $0x1,%ebx
   13e2e:	movslq 0x4c(%rdi),%rax
   13e32:	cmp    %ebx,%eax
   13e34:	jg     13e04 <validate_script+0x1e4>
   13e36:	mov    -0x20(%rbp),%r14
   13e3a:	mov    -0x18(%rbp),%r13
   13e3e:	mov    -0x10(%rbp),%r12
   13e42:	mov    -0x8(%rbp),%rbx
   13e46:	mov    -0x28(%rbp),%r15
   13e4a:	leaveq 
   13e4b:	retq   
   13e4c:	movslq %ebx,%rcx
   13e4f:	movslq 0x4(%r14,%rcx,4),%r12
   13e54:	test   %r12d,%r12d
   13e57:	js     13e5f <validate_script+0x23f>
   13e59:	cmp    0x4c(%rdi),%r12d
   13e5d:	jl     13e81 <validate_script+0x261>
   13e5f:	mov    (%rdi),%rcx
   13e62:	movl   $0x13,0x28(%rcx)
   13e69:	mov    (%rdi),%rcx
   13e6c:	mov    %eax,0x2c(%rcx)
   13e6f:	mov    (%rdi),%rax
   13e72:	mov    (%rax),%rax
   13e75:	mov    %rdi,%r13
   13e78:	callq  *%rax
   13e7a:	mov    %r13,%rdi
   13e7d:	mov    -0x48(%rbp),%rax
   13e81:	test   %ebx,%ebx
   13e83:	jle    13eb6 <validate_script+0x296>
   13e85:	lea    -0x1(%rbx),%ecx
   13e88:	movslq %ecx,%rcx
   13e8b:	cmp    0x4(%r14,%rcx,4),%r12d
   13e90:	jg     13eb6 <validate_script+0x296>
   13e92:	mov    (%rdi),%rcx
   13e95:	movl   $0x13,0x28(%rcx)
   13e9c:	mov    (%rdi),%rcx
   13e9f:	mov    %eax,0x2c(%rcx)
   13ea2:	mov    (%rdi),%rcx
   13ea5:	mov    (%rcx),%rcx
   13ea8:	mov    %rax,%r12
   13eab:	mov    %rdi,%r13
   13eae:	callq  *%rcx
   13eb0:	mov    %r12,%rax
   13eb3:	mov    %r13,%rdi
   13eb6:	add    $0x1,%ebx
   13eb9:	cmp    %ebx,%r15d
   13ebc:	jg     13e4c <validate_script+0x22c>
   13ebe:	movslq 0x14(%r14),%rsi
   13ec2:	mov    %rsi,-0x70(%rbp)
   13ec6:	movslq 0x18(%r14),%r12
   13eca:	movslq 0x1c(%r14),%rcx
   13ece:	mov    %rcx,-0x60(%rbp)
   13ed2:	movslq 0x20(%r14),%r13
   13ed6:	mov    %r13,-0x58(%rbp)
   13eda:	movslq 0x134(%rdi),%rdx
   13ee1:	test   %edx,%edx
   13ee3:	jne    13f0f <validate_script+0x2ef>
   13ee5:	test   %esi,%esi
   13ee7:	jne    13f88 <validate_script+0x368>
   13eed:	cmp    $0x3f,%r12d
   13ef1:	jne    13f88 <validate_script+0x368>
   13ef7:	test   %ecx,%ecx
   13ef9:	jne    13f88 <validate_script+0x368>
   13eff:	test   %r13d,%r13d
   13f02:	jne    13f88 <validate_script+0x368>
   13f08:	xor    %ebx,%ebx
   13f0a:	jmpq   13d36 <validate_script+0x116>
   13f0f:	test   %esi,%esi
   13f11:	js     13f37 <validate_script+0x317>
   13f13:	cmp    $0x3f,%esi
   13f16:	jg     13f37 <validate_script+0x317>
   13f18:	cmp    %r12d,%esi
   13f1b:	jg     13f37 <validate_script+0x317>
   13f1d:	cmp    $0x3f,%r12d
   13f21:	jg     13f37 <validate_script+0x317>
   13f23:	test   %ecx,%ecx
   13f25:	js     13f37 <validate_script+0x317>
   13f27:	cmp    $0xa,%ecx
   13f2a:	jg     13f37 <validate_script+0x317>
   13f2c:	test   %r13d,%r13d
   13f2f:	js     13f37 <validate_script+0x317>
   13f31:	cmp    $0xa,%r13d
   13f35:	jle    13f6d <validate_script+0x34d>
   13f37:	mov    (%rdi),%rdx
   13f3a:	movl   $0x11,0x28(%rdx)
   13f41:	mov    (%rdi),%rdx
   13f44:	mov    %eax,0x2c(%rdx)
   13f47:	mov    (%rdi),%rax
   13f4a:	mov    (%rax),%rax
   13f4d:	mov    %rcx,%rbx
   13f50:	mov    %rsi,%r13
   13f53:	mov    %rdi,%r14
   13f56:	callq  *%rax
   13f58:	mov    %rbx,%rcx
   13f5b:	mov    %r13,%rsi
   13f5e:	mov    %r14,%rdi
   13f61:	mov    -0x58(%rbp),%r13
   13f65:	mov    -0x30(%rbp),%r14
   13f69:	mov    -0x48(%rbp),%rax
   13f6d:	lea    -0x1(%rcx),%edx
   13f70:	mov    %rdx,-0x68(%rbp)
   13f74:	test   %esi,%esi
   13f76:	je     13fb3 <validate_script+0x393>
   13f78:	cmp    $0x1,%r15d
   13f7c:	jne    13fc6 <validate_script+0x3a6>
   13f7e:	xor    %ebx,%ebx
   13f80:	mov    %rbx,%r8
   13f83:	jmpq   14064 <validate_script+0x444>
   13f88:	mov    (%rdi),%rcx
   13f8b:	movl   $0x11,0x28(%rcx)
   13f92:	mov    (%rdi),%rcx
   13f95:	mov    %eax,0x2c(%rcx)
   13f98:	mov    (%rdi),%rcx
   13f9b:	mov    (%rcx),%rcx
   13f9e:	mov    %rax,%r12
   13fa1:	mov    %rdi,%r13
   13fa4:	callq  *%rcx
   13fa6:	mov    %r12,%rax
   13fa9:	mov    %r13,%rdi
   13fac:	xor    %ebx,%ebx
   13fae:	jmpq   13d36 <validate_script+0x116>
   13fb3:	test   %r12d,%r12d
   13fb6:	jne    1408b <validate_script+0x46b>
   13fbc:	xor    %ebx,%ebx
   13fbe:	mov    %rbx,%r8
   13fc1:	jmpq   14064 <validate_script+0x444>
   13fc6:	mov    (%rdi),%rcx
   13fc9:	movl   $0x11,0x28(%rcx)
   13fd0:	mov    (%rdi),%rcx
   13fd3:	mov    %eax,0x2c(%rcx)
   13fd6:	mov    (%rdi),%rax
   13fd9:	mov    (%rax),%rax
   13fdc:	mov    %rsi,%r13
   13fdf:	mov    %rdi,%rbx
   13fe2:	callq  *%rax
   13fe4:	mov    %r13,%rsi
   13fe7:	mov    %rbx,%rdi
   13fea:	xor    %r8d,%r8d
   13fed:	mov    -0x68(%rbp),%rdx
   13ff1:	mov    -0x60(%rbp),%rcx
   13ff5:	mov    -0x58(%rbp),%r13
   13ff9:	mov    -0x48(%rbp),%rax
   13ffd:	mov    %r8,%rbx
   14000:	jmp    14064 <validate_script+0x444>
   14002:	movslq %ebx,%r15
   14005:	movslq (%r14,%r15,4),%rsi
   14009:	test   %esi,%esi
   1400b:	js     140c7 <validate_script+0x4a7>
   14011:	cmp    %esi,%ecx
   14013:	jne    1401a <validate_script+0x3fa>
   14015:	cmp    %edx,%r13d
   14018:	je     14042 <validate_script+0x422>
   1401a:	mov    (%rdi),%rcx
   1401d:	movl   $0x11,0x28(%rcx)
   14024:	mov    (%rdi),%rcx
   14027:	mov    %eax,0x2c(%rcx)
   1402a:	mov    (%rdi),%rax
   1402d:	mov    (%rax),%rax
   14030:	callq  *%rax
   14032:	mov    -0x50(%rbp),%rdi
   14036:	mov    -0x68(%rbp),%rdx
   1403a:	mov    -0x60(%rbp),%rcx
   1403e:	mov    -0x48(%rbp),%rax
   14042:	mov    %r13d,(%r14,%r15,4)
   14046:	add    $0x1,%ebx
   14049:	cmp    %ebx,%r12d
   1404c:	jge    14002 <validate_script+0x3e2>
   1404e:	mov    -0x40(%rbp),%rsi
   14052:	lea    0x1(%rsi),%r8d
   14056:	mov    -0x70(%rbp),%rsi
   1405a:	xor    %ebx,%ebx
   1405c:	mov    -0x38(%rbp),%r15
   14060:	mov    -0x30(%rbp),%r14
   14064:	cmp    %r8d,%r15d
   14067:	jle    13d3d <validate_script+0x11d>
   1406d:	movslq %r8d,%r9
   14070:	movslq 0x4(%r14,%r9,4),%r9
   14075:	shl    $0x8,%r9
   14079:	test   %esi,%esi
   1407b:	lea    -0xa70(%rbp,%r9,1),%r14
   14083:	jne    140fc <validate_script+0x4dc>
   14085:	mov    %r8,-0x40(%rbp)
   14089:	jmp    14049 <validate_script+0x429>
   1408b:	mov    (%rdi),%rcx
   1408e:	movl   $0x11,0x28(%rcx)
   14095:	mov    (%rdi),%rcx
   14098:	mov    %eax,0x2c(%rcx)
   1409b:	mov    (%rdi),%rax
   1409e:	mov    (%rax),%rax
   140a1:	mov    %rsi,%rbx
   140a4:	mov    %rdi,%r13
   140a7:	callq  *%rax
   140a9:	mov    %rbx,%rsi
   140ac:	mov    %r13,%rdi
   140af:	xor    %r8d,%r8d
   140b2:	mov    -0x68(%rbp),%rdx
   140b6:	mov    -0x60(%rbp),%rcx
   140ba:	mov    -0x58(%rbp),%r13
   140be:	mov    -0x48(%rbp),%rax
   140c2:	mov    %r8,%rbx
   140c5:	jmp    14064 <validate_script+0x444>
   140c7:	test   %ecx,%ecx
   140c9:	je     14042 <validate_script+0x422>
   140cf:	mov    (%rdi),%rcx
   140d2:	movl   $0x11,0x28(%rcx)
   140d9:	mov    (%rdi),%rcx
   140dc:	mov    %eax,0x2c(%rcx)
   140df:	mov    (%rdi),%rax
   140e2:	mov    (%rax),%rax
   140e5:	callq  *%rax
   140e7:	mov    -0x50(%rbp),%rdi
   140eb:	mov    -0x68(%rbp),%rdx
   140ef:	mov    -0x60(%rbp),%rcx
   140f3:	mov    -0x48(%rbp),%rax
   140f7:	jmpq   14042 <validate_script+0x422>
   140fc:	movslq (%r14),%rbx
   140ff:	test   %ebx,%ebx
   14101:	js     1410f <validate_script+0x4ef>
   14103:	mov    %r8,-0x40(%rbp)
   14107:	mov    %rsi,%rbx
   1410a:	jmpq   14049 <validate_script+0x429>
   1410f:	mov    (%rdi),%rdx
   14112:	movl   $0x11,0x28(%rdx)
   14119:	mov    (%rdi),%rdx
   1411c:	mov    %eax,0x2c(%rdx)
   1411f:	mov    (%rdi),%rax
   14122:	mov    (%rax),%rax
   14125:	mov    %rdi,%rdx
   14128:	mov    %r8,-0x40(%rbp)
   1412c:	mov    %rsi,%rbx
   1412f:	mov    %rcx,%r13
   14132:	mov    %rdi,%r15
   14135:	mov    %rdx,%rdi
   14138:	callq  *%rax
   1413a:	mov    %r13,%rcx
   1413d:	mov    %r15,%rdi
   14140:	mov    -0x68(%rbp),%rdx
   14144:	mov    -0x58(%rbp),%r13
   14148:	mov    -0x48(%rbp),%rax
   1414c:	jmpq   14049 <validate_script+0x429>
   14151:	data16 nopw %cs:0x0(%rax,%rax,1)
   1415c:	nopl   0x0(%rax)

0000000000014160 <select_scan_parameters>:
   14160:	push   %rbp
   14161:	mov    %rsp,%rbp
   14164:	sub    $0x10,%rsp
   14168:	xor    %eax,%eax
   1416a:	mov    0xf8(%rdi),%rdx
   14171:	test   %rdx,%rdx
   14174:	jne    141d3 <select_scan_parameters+0x73>
   14176:	movslq 0x4c(%rdi),%rcx
   1417a:	cmp    $0x4,%ecx
   1417d:	jle    141c7 <select_scan_parameters+0x67>
   1417f:	mov    (%rdi),%rcx
   14182:	movl   $0x1a,0x28(%rcx)
   14189:	movslq 0x4c(%rdi),%rdx
   1418d:	mov    (%rdi),%rcx
   14190:	mov    %edx,0x2c(%rcx)
   14193:	mov    (%rdi),%rcx
   14196:	movl   $0x4,0x30(%rcx)
   1419d:	mov    (%rdi),%rcx
   141a0:	mov    (%rcx),%rcx
   141a3:	mov    %rdi,%rdx
   141a6:	mov    %r14,-0x8(%rbp)
   141aa:	mov    %r15,-0x10(%rbp)
   141ae:	mov    %rax,%r14
   141b1:	mov    %rdi,%r15
   141b4:	mov    %rdx,%rdi
   141b7:	callq  *%rcx
   141b9:	mov    %r14,%rax
   141bc:	mov    %r15,%rdi
   141bf:	mov    -0x10(%rbp),%r15
   141c3:	mov    -0x8(%rbp),%r14
   141c7:	movslq 0x4c(%rdi),%rcx
   141cb:	mov    %ecx,0x144(%rdi)
   141d1:	jmp    1420b <select_scan_parameters+0xab>
   141d3:	mov    0x1b0(%rdi),%rcx
   141da:	movslq 0x2c(%rcx),%rcx
   141de:	lea    (%rcx,%rcx,8),%rcx
   141e2:	lea    (%rdx,%rcx,4),%rsi
   141e6:	movslq (%rsi),%rcx
   141e9:	mov    %ecx,0x144(%rdi)
   141ef:	jmp    1425c <select_scan_parameters+0xfc>
   141f1:	movslq %eax,%rdx
   141f4:	lea    (%rdx,%rdx,2),%rcx
   141f8:	shl    $0x5,%rcx
   141fc:	add    0x58(%rdi),%rcx
   14200:	mov    %rcx,0x148(%rdi,%rdx,8)
   14208:	add    $0x1,%eax
   1420b:	movslq 0x4c(%rdi),%rcx
   1420f:	cmp    %eax,%ecx
   14211:	jg     141f1 <select_scan_parameters+0x91>
   14213:	movl   $0x0,0x19c(%rdi)
   1421d:	movl   $0x3f,0x1a0(%rdi)
   14227:	movl   $0x0,0x1a4(%rdi)
   14231:	movl   $0x0,0x1a8(%rdi)
   1423b:	leaveq 
   1423c:	retq   
   1423d:	movslq %eax,%rdx
   14240:	movslq 0x4(%rsi,%rdx,4),%rcx
   14245:	lea    (%rcx,%rcx,2),%rcx
   14249:	shl    $0x5,%rcx
   1424d:	add    0x58(%rdi),%rcx
   14251:	mov    %rcx,0x148(%rdi,%rdx,8)
   14259:	add    $0x1,%eax
   1425c:	movslq (%rsi),%rcx
   1425f:	cmp    %eax,%ecx
   14261:	jg     1423d <select_scan_parameters+0xdd>
   14263:	movslq 0x14(%rsi),%rax
   14267:	mov    %eax,0x19c(%rdi)
   1426d:	movslq 0x18(%rsi),%rax
   14271:	mov    %eax,0x1a0(%rdi)
   14277:	movslq 0x1c(%rsi),%rax
   1427b:	mov    %eax,0x1a4(%rdi)
   14281:	movslq 0x20(%rsi),%rax
   14285:	mov    %eax,0x1a8(%rdi)
   1428b:	leaveq 
   1428c:	retq   
   1428d:	nopl   (%rax)

0000000000014290 <per_scan_setup>:
   14290:	push   %rbp
   14291:	mov    %rsp,%rbp
   14294:	sub    $0x20,%rsp
   14298:	movslq 0x144(%rdi),%rax
   1429f:	cmp    $0x1,%eax
   142a2:	je     142c3 <per_scan_setup+0x33>
   142a4:	test   %eax,%eax
   142a6:	jle    14346 <per_scan_setup+0xb6>
   142ac:	cmp    $0x4,%eax
   142af:	jg     14346 <per_scan_setup+0xb6>
   142b5:	mov    %r15,%rcx
   142b8:	mov    %r14,%r15
   142bb:	mov    %rdi,%r14
   142be:	jmpq   14383 <per_scan_setup+0xf3>
   142c3:	mov    0x148(%rdi),%rsi
   142ca:	mov    0x1c(%rsi),%eax
   142cd:	mov    %eax,0x168(%rdi)
   142d3:	mov    0x20(%rsi),%eax
   142d6:	mov    %eax,0x16c(%rdi)
   142dc:	mov    %r14,%rcx
   142df:	mov    %rdi,%r14
   142e2:	movl   $0x1,0x34(%rsi)
   142e9:	movl   $0x1,0x38(%rsi)
   142f0:	movl   $0x1,0x3c(%rsi)
   142f7:	movl   $0x8,0x40(%rsi)
   142fe:	movl   $0x1,0x44(%rsi)
   14305:	mov    0x20(%rsi),%eax
   14308:	mov    0xc(%rsi),%r8d
   1430c:	xor    %edx,%edx
   1430e:	div    %r8d
   14311:	test   %edx,%edx
   14313:	jne    14319 <per_scan_setup+0x89>
   14315:	movslq 0xc(%rsi),%rdx
   14319:	mov    %edx,0x48(%rsi)
   1431c:	movl   $0x1,0x170(%r14)
   14327:	movl   $0x0,0x174(%r14)
   14332:	movslq 0x11c(%r14),%rdx
   14339:	test   %edx,%edx
   1433b:	jg     143db <per_scan_setup+0x14b>
   14341:	mov    %rcx,%r14
   14344:	leaveq 
   14345:	retq   
   14346:	mov    (%rdi),%rax
   14349:	movl   $0x1a,0x28(%rax)
   14350:	movslq 0x144(%rdi),%rax
   14357:	mov    (%rdi),%rcx
   1435a:	mov    %eax,0x2c(%rcx)
   1435d:	mov    (%rdi),%rax
   14360:	movl   $0x4,0x30(%rax)
   14367:	mov    (%rdi),%rax
   1436a:	mov    (%rax),%rax
   1436d:	mov    %rdi,%rcx
   14370:	mov    %r15,-0x18(%rbp)
   14374:	mov    %r14,%r15
   14377:	mov    %rdi,%r14
   1437a:	mov    %rcx,%rdi
   1437d:	callq  *%rax
   1437f:	mov    -0x18(%rbp),%rcx
   14383:	mov    0x30(%r14),%edi
   14387:	movslq 0x138(%r14),%rax
   1438e:	shl    $0x3,%eax
   14391:	movslq %eax,%rsi
   14394:	mov    %rcx,-0x18(%rbp)
   14398:	callq  4150 <jdiv_round_up@plt>
   1439d:	mov    %eax,0x168(%r14)
   143a4:	mov    0x34(%r14),%edi
   143a8:	movslq 0x13c(%r14),%rax
   143af:	shl    $0x3,%eax
   143b2:	movslq %eax,%rsi
   143b5:	callq  4150 <jdiv_round_up@plt>
   143ba:	mov    %eax,0x16c(%r14)
   143c1:	movl   $0x0,0x170(%r14)
   143cc:	xor    %eax,%eax
   143ce:	mov    %r13,-0x8(%rbp)
   143d2:	mov    %r15,-0x10(%rbp)
   143d6:	mov    %rax,%r15
   143d9:	jmp    14425 <per_scan_setup+0x195>
   143db:	mov    0x168(%r14),%eax
   143e2:	imul   %rdx,%rax
   143e6:	cmp    $0xfffe,%rax
   143ec:	jle    143f3 <per_scan_setup+0x163>
   143ee:	mov    $0xffff,%eax
   143f3:	mov    %eax,0x118(%r14)
   143fa:	mov    %rcx,%r14
   143fd:	leaveq 
   143fe:	retq   
   143ff:	movslq 0x170(%r14),%rcx
   14406:	lea    0x1(%rcx),%eax
   14409:	mov    %eax,0x170(%r14)
   14410:	mov    %r15d,0x174(%r14,%rcx,4)
   14418:	add    $0xffffffff,%r13d
   1441c:	test   %r13d,%r13d
   1441f:	jg     143ff <per_scan_setup+0x16f>
   14421:	add    $0x1,%r15d
   14425:	movslq 0x144(%r14),%rax
   1442c:	cmp    %r15d,%eax
   1442f:	jg     14442 <per_scan_setup+0x1b2>
   14431:	mov    -0x10(%rbp),%rcx
   14435:	mov    -0x8(%rbp),%r13
   14439:	mov    -0x18(%rbp),%r15
   1443d:	jmpq   14332 <per_scan_setup+0xa2>
   14442:	movslq %r15d,%rax
   14445:	mov    0x148(%r14,%rax,8),%rcx
   1444d:	movslq 0x8(%rcx),%rsi
   14451:	mov    %esi,0x34(%rcx)
   14454:	movslq 0xc(%rcx),%rax
   14458:	mov    %eax,0x38(%rcx)
   1445b:	imul   %esi,%eax
   1445e:	mov    %eax,0x3c(%rcx)
   14461:	mov    %rsi,%rax
   14464:	shl    $0x3,%eax
   14467:	mov    %eax,0x40(%rcx)
   1446a:	mov    0x1c(%rcx),%eax
   1446d:	xor    %edx,%edx
   1446f:	div    %esi
   14471:	test   %edx,%edx
   14473:	jne    14479 <per_scan_setup+0x1e9>
   14475:	movslq 0x34(%rcx),%rdx
   14479:	mov    %edx,0x44(%rcx)
   1447c:	mov    0x20(%rcx),%eax
   1447f:	mov    0x38(%rcx),%esi
   14482:	xor    %edx,%edx
   14484:	div    %esi
   14486:	test   %edx,%edx
   14488:	jne    1448e <per_scan_setup+0x1fe>
   1448a:	movslq 0x38(%rcx),%rdx
   1448e:	mov    %edx,0x48(%rcx)
   14491:	movslq 0x3c(%rcx),%r13
   14495:	mov    %r13,%rax
   14498:	add    0x170(%r14),%eax
   1449f:	cmp    $0xa,%eax
   144a2:	jle    1441c <per_scan_setup+0x18c>
   144a8:	mov    (%r14),%rax
   144ab:	movl   $0xd,0x28(%rax)
   144b2:	mov    (%r14),%rax
   144b5:	mov    (%rax),%rax
   144b8:	mov    %r14,%rdi
   144bb:	callq  *%rax
   144bd:	jmpq   1441c <per_scan_setup+0x18c>
   144c2:	data16 nopw %cs:0x0(%rax,%rax,1)
   144cd:	nopl   (%rax)

00000000000144d0 <prepare_for_pass>:
   144d0:	push   %rbp
   144d1:	mov    %rsp,%rbp
   144d4:	sub    $0x20,%rsp
   144d8:	mov    %r14,-0x8(%rbp)
   144dc:	mov    %r15,-0x10(%rbp)
   144e0:	xor    %esi,%esi
   144e2:	mov    %rsi,-0x20(%rbp)
   144e6:	mov    $0x1,%eax
   144eb:	mov    %rax,-0x18(%rbp)
   144ef:	mov    0x1b0(%rdi),%r15
   144f6:	mov    0x20(%r15),%eax
   144fa:	test   %eax,%eax
   144fc:	je     14585 <prepare_for_pass+0xb5>
   14502:	cmp    $0x1,%eax
   14505:	je     145d6 <prepare_for_pass+0x106>
   1450b:	cmp    $0x2,%eax
   1450e:	jne    1458d <prepare_for_pass+0xbd>
   14510:	mov    %rdi,%r14
   14513:	movslq 0x108(%r14),%rax
   1451a:	test   %eax,%eax
   1451c:	jne    14530 <prepare_for_pass+0x60>
   1451e:	mov    %r14,%rdi
   14521:	callq  14160 <select_scan_parameters>
   14526:	mov    %r14,%rdi
   14529:	callq  14290 <per_scan_setup>
   1452e:	xor    %esi,%esi
   14530:	mov    0x1f0(%r14),%rax
   14537:	mov    (%rax),%rax
   1453a:	mov    %r14,%rdi
   1453d:	callq  *%rax
   1453f:	mov    0x1c8(%r14),%rax
   14546:	mov    (%rax),%rax
   14549:	mov    %r14,%rdi
   1454c:	mov    $0x2,%esi
   14551:	callq  *%rax
   14553:	movslq 0x2c(%r15),%rax
   14557:	test   %eax,%eax
   14559:	jne    1456b <prepare_for_pass+0x9b>
   1455b:	mov    0x1d0(%r14),%rax
   14562:	mov    0x8(%rax),%rax
   14566:	mov    %r14,%rdi
   14569:	callq  *%rax
   1456b:	mov    0x1d0(%r14),%rax
   14572:	mov    0x10(%rax),%rax
   14576:	mov    %r14,%rdi
   14579:	callq  *%rax
   1457b:	movl   $0x0,0x18(%r15)
   14583:	jmp    145a2 <prepare_for_pass+0xd2>
   14585:	test   %eax,%eax
   14587:	je     1462d <prepare_for_pass+0x15d>
   1458d:	mov    (%rdi),%rax
   14590:	movl   $0x30,0x28(%rax)
   14597:	mov    (%rdi),%rax
   1459a:	mov    (%rax),%rax
   1459d:	mov    %rdi,%r14
   145a0:	callq  *%rax
   145a2:	movslq 0x24(%r15),%rcx
   145a6:	movslq 0x28(%r15),%rax
   145aa:	add    $0xffffffff,%eax
   145ad:	cmp    %ecx,%eax
   145af:	jne    145b7 <prepare_for_pass+0xe7>
   145b1:	pushq  -0x18(%rbp)
   145b4:	popq   -0x20(%rbp)
   145b7:	mov    -0x20(%rbp),%rax
   145bb:	mov    %eax,0x1c(%r15)
   145bf:	mov    0x10(%r14),%rax
   145c3:	test   %rax,%rax
   145c6:	jne    146b3 <prepare_for_pass+0x1e3>
   145cc:	mov    -0x10(%rbp),%r15
   145d0:	mov    -0x8(%rbp),%r14
   145d4:	leaveq 
   145d5:	retq   
   145d6:	mov    %rdi,%r14
   145d9:	callq  14160 <select_scan_parameters>
   145de:	mov    %r14,%rdi
   145e1:	callq  14290 <per_scan_setup>
   145e6:	movslq 0x19c(%r14),%rax
   145ed:	test   %eax,%eax
   145ef:	jne    146cb <prepare_for_pass+0x1fb>
   145f5:	movslq 0x1a4(%r14),%rax
   145fc:	test   %eax,%eax
   145fe:	je     146cb <prepare_for_pass+0x1fb>
   14604:	movslq 0x104(%r14),%rax
   1460b:	test   %eax,%eax
   1460d:	jne    146cb <prepare_for_pass+0x1fb>
   14613:	movl   $0x2,0x20(%r15)
   1461b:	movslq 0x24(%r15),%rax
   1461f:	add    $0x1,%eax
   14622:	mov    %eax,0x24(%r15)
   14626:	xor    %esi,%esi
   14628:	jmpq   14513 <prepare_for_pass+0x43>
   1462d:	mov    %rdi,%r14
   14630:	callq  14160 <select_scan_parameters>
   14635:	mov    %r14,%rdi
   14638:	callq  14290 <per_scan_setup>
   1463d:	movslq 0x100(%r14),%rax
   14644:	test   %eax,%eax
   14646:	jne    14677 <prepare_for_pass+0x1a7>
   14648:	mov    0x1d8(%r14),%rax
   1464f:	mov    (%rax),%rax
   14652:	mov    %r14,%rdi
   14655:	callq  *%rax
   14657:	mov    0x1e0(%r14),%rax
   1465e:	mov    (%rax),%rax
   14661:	mov    %r14,%rdi
   14664:	callq  *%rax
   14666:	mov    0x1c0(%r14),%rax
   1466d:	mov    (%rax),%rax
   14670:	mov    %r14,%rdi
   14673:	xor    %esi,%esi
   14675:	callq  *%rax
   14677:	mov    0x1e8(%r14),%rax
   1467e:	mov    (%rax),%rax
   14681:	mov    %r14,%rdi
   14684:	callq  *%rax
   14686:	mov    0x1f0(%r14),%rax
   1468d:	mov    (%rax),%rax
   14690:	movslq 0x108(%r14),%rsi
   14697:	mov    %r14,%rdi
   1469a:	callq  *%rax
   1469c:	mov    0x1c8(%r14),%rax
   146a3:	mov    (%rax),%rax
   146a6:	movslq 0x28(%r15),%rcx
   146aa:	cmp    $0x1,%ecx
   146ad:	jg     14700 <prepare_for_pass+0x230>
   146af:	xor    %esi,%esi
   146b1:	jmp    14705 <prepare_for_pass+0x235>
   146b3:	mov    %ecx,0x18(%rax)
   146b6:	movslq 0x28(%r15),%rcx
   146ba:	mov    0x10(%r14),%rax
   146be:	mov    %ecx,0x1c(%rax)
   146c1:	mov    -0x10(%rbp),%r15
   146c5:	mov    -0x8(%rbp),%r14
   146c9:	leaveq 
   146ca:	retq   
   146cb:	mov    0x1f0(%r14),%rax
   146d2:	mov    (%rax),%rax
   146d5:	mov    %r14,%rdi
   146d8:	mov    $0x1,%esi
   146dd:	callq  *%rax
   146df:	mov    0x1c8(%r14),%rax
   146e6:	mov    (%rax),%rax
   146e9:	mov    %r14,%rdi
   146ec:	mov    $0x2,%esi
   146f1:	callq  *%rax
   146f3:	movl   $0x0,0x18(%r15)
   146fb:	jmpq   145a2 <prepare_for_pass+0xd2>
   14700:	mov    $0x3,%esi
   14705:	mov    %r14,%rdi
   14708:	callq  *%rax
   1470a:	mov    0x1b8(%r14),%rax
   14711:	mov    (%rax),%rax
   14714:	mov    %r14,%rdi
   14717:	xor    %esi,%esi
   14719:	callq  *%rax
   1471b:	movslq 0x108(%r14),%rax
   14722:	test   %eax,%eax
   14724:	jne    14733 <prepare_for_pass+0x263>
   14726:	movl   $0x1,0x18(%r15)
   1472e:	jmpq   145a2 <prepare_for_pass+0xd2>
   14733:	movl   $0x0,0x18(%r15)
   1473b:	jmpq   145a2 <prepare_for_pass+0xd2>

0000000000014740 <pass_startup>:
   14740:	push   %rbp
   14741:	mov    %rsp,%rbp
   14744:	sub    $0x10,%rsp
   14748:	mov    %r15,-0x8(%rbp)
   1474c:	mov    0x1b0(%rdi),%rax
   14753:	movl   $0x0,0x18(%rax)
   1475a:	mov    0x1d0(%rdi),%rax
   14761:	mov    0x8(%rax),%rax
   14765:	mov    %rdi,%r15
   14768:	callq  *%rax
   1476a:	mov    0x1d0(%r15),%rax
   14771:	mov    0x10(%rax),%rax
   14775:	mov    %r15,%rdi
   14778:	callq  *%rax
   1477a:	mov    -0x8(%rbp),%r15
   1477e:	leaveq 
   1477f:	retq   

0000000000014780 <finish_pass_master>:
   14780:	push   %rbp
   14781:	mov    %rsp,%rbp
   14784:	sub    $0x10,%rsp
   14788:	mov    %r14,-0x8(%rbp)
   1478c:	mov    %r15,-0x10(%rbp)
   14790:	mov    0x1f0(%rdi),%rax
   14797:	mov    0x10(%rax),%rax
   1479b:	mov    0x1b0(%rdi),%r14
   147a2:	mov    %rdi,%r15
   147a5:	callq  *%rax
   147a7:	mov    0x20(%r14),%eax
   147ab:	test   %eax,%eax
   147ad:	je     147d9 <finish_pass_master+0x59>
   147af:	cmp    $0x1,%eax
   147b2:	je     147fd <finish_pass_master+0x7d>
   147b4:	cmp    $0x2,%eax
   147b7:	jne    14805 <finish_pass_master+0x85>
   147b9:	movslq 0x108(%r15),%rax
   147c0:	test   %eax,%eax
   147c2:	je     147cc <finish_pass_master+0x4c>
   147c4:	movl   $0x1,0x20(%r14)
   147cc:	movslq 0x2c(%r14),%rax
   147d0:	add    $0x1,%eax
   147d3:	mov    %eax,0x2c(%r14)
   147d7:	jmp    14805 <finish_pass_master+0x85>
   147d9:	test   %eax,%eax
   147db:	jne    14805 <finish_pass_master+0x85>
   147dd:	movl   $0x2,0x20(%r14)
   147e5:	movslq 0x108(%r15),%rax
   147ec:	test   %eax,%eax
   147ee:	jne    14805 <finish_pass_master+0x85>
   147f0:	movslq 0x2c(%r14),%rax
   147f4:	add    $0x1,%eax
   147f7:	mov    %eax,0x2c(%r14)
   147fb:	jmp    14805 <finish_pass_master+0x85>
   147fd:	movl   $0x2,0x20(%r14)
   14805:	movslq 0x24(%r14),%rax
   14809:	add    $0x1,%eax
   1480c:	mov    %eax,0x24(%r14)
   14810:	mov    -0x10(%rbp),%r15
   14814:	mov    -0x8(%rbp),%r14
   14818:	leaveq 
   14819:	retq   
   1481a:	nopw   0x0(%rax,%rax,1)

0000000000014820 <jpeg_alloc_quant_table>:
   14820:	push   %rbp
   14821:	mov    %rsp,%rbp
   14824:	mov    0x8(%rdi),%rax
   14828:	mov    (%rax),%rax
   1482b:	xor    %esi,%esi
   1482d:	mov    $0x84,%edx
   14832:	callq  *%rax
   14834:	movl   $0x0,0x80(%rax)
   1483e:	leaveq 
   1483f:	retq   

0000000000014840 <jpeg_alloc_huff_table>:
   14840:	push   %rbp
   14841:	mov    %rsp,%rbp
   14844:	mov    0x8(%rdi),%rax
   14848:	mov    (%rax),%rax
   1484b:	xor    %esi,%esi
   1484d:	mov    $0x118,%edx
   14852:	callq  *%rax
   14854:	movl   $0x0,0x114(%rax)
   1485e:	leaveq 
   1485f:	retq   

0000000000014860 <jpeg_abort>:
   14860:	push   %rbp
   14861:	mov    %rsp,%rbp
   14864:	sub    $0x10,%rsp
   14868:	mov    0x8(%rdi),%rax
   1486c:	test   %rax,%rax
   1486f:	je     14886 <jpeg_abort+0x26>
   14871:	mov    $0x1,%eax
   14876:	mov    %r14,-0x8(%rbp)
   1487a:	mov    %r15,-0x10(%rbp)
   1487e:	mov    %rdi,%r14
   14881:	mov    %rax,%r15
   14884:	jmp    1489c <jpeg_abort+0x3c>
   14886:	leaveq 
   14887:	retq   
   14888:	mov    0x8(%r14),%rax
   1488c:	mov    0x48(%rax),%rax
   14890:	mov    %r14,%rdi
   14893:	mov    %r15,%rsi
   14896:	callq  *%rax
   14898:	add    $0xffffffff,%r15d
   1489c:	test   %r15d,%r15d
   1489f:	jg     14888 <jpeg_abort+0x28>
   148a1:	movslq 0x20(%r14),%rax
   148a5:	test   %eax,%eax
   148a7:	jne    148bb <jpeg_abort+0x5b>
   148a9:	movl   $0x64,0x24(%r14)
   148b1:	mov    -0x10(%rbp),%r15
   148b5:	mov    -0x8(%rbp),%r14
   148b9:	leaveq 
   148ba:	retq   
   148bb:	movl   $0xc8,0x24(%r14)
   148c3:	movq   $0x0,0x190(%r14)
   148ce:	mov    -0x10(%rbp),%r15
   148d2:	mov    -0x8(%rbp),%r14
   148d6:	leaveq 
   148d7:	retq   
   148d8:	nopl   0x0(%rax,%rax,1)

00000000000148e0 <jpeg_destroy>:
   148e0:	push   %rbp
   148e1:	mov    %rsp,%rbp
   148e4:	sub    $0x10,%rsp
   148e8:	mov    0x8(%rdi),%rax
   148ec:	test   %rax,%rax
   148ef:	je     14908 <jpeg_destroy+0x28>
   148f1:	mov    %rdi,%rcx
   148f4:	mov    %r15,-0x8(%rbp)
   148f8:	mov    %rdi,%r15
   148fb:	mov    %rcx,%rdi
   148fe:	callq  *0x50(%rax)
   14901:	mov    %r15,%rdi
   14904:	mov    -0x8(%rbp),%r15
   14908:	movq   $0x0,0x8(%rdi)
   14910:	movl   $0x0,0x24(%rdi)
   14917:	leaveq 
   14918:	retq   
   14919:	nopl   0x0(%rax)

0000000000014920 <jpeg_set_defaults>:
   14920:	push   %rbp
   14921:	mov    %rsp,%rbp
   14924:	sub    $0x10,%rsp
   14928:	mov    %r15,-0x10(%rbp)
   1492c:	mov    %r14,-0x8(%rbp)
   14930:	movslq 0x24(%rdi),%rax
   14934:	cmp    $0x64,%eax
   14937:	jne    1493e <jpeg_set_defaults+0x1e>
   14939:	mov    %rdi,%r15
   1493c:	jmp    1495d <jpeg_set_defaults+0x3d>
   1493e:	mov    (%rdi),%rax
   14941:	movl   $0x14,0x28(%rax)
   14948:	movslq 0x24(%rdi),%rcx
   1494c:	mov    (%rdi),%rax
   1494f:	mov    %ecx,0x2c(%rax)
   14952:	mov    (%rdi),%rax
   14955:	mov    (%rax),%rax
   14958:	mov    %rdi,%r15
   1495b:	callq  *%rax
   1495d:	xor    %r14d,%r14d
   14960:	mov    0x58(%r15),%rax
   14964:	test   %rax,%rax
   14967:	jne    14981 <jpeg_set_defaults+0x61>
   14969:	mov    0x8(%r15),%rax
   1496d:	mov    (%rax),%rax
   14970:	mov    $0x3c0,%edx
   14975:	mov    %r15,%rdi
   14978:	mov    %r14,%rsi
   1497b:	callq  *%rax
   1497d:	mov    %rax,0x58(%r15)
   14981:	movl   $0x8,0x48(%r15)
   14989:	mov    $0x4b,%esi
   1498e:	mov    $0x1,%edx
   14993:	mov    %r15,%rdi
   14996:	callq  4310 <jpeg_set_quality@plt>
   1499b:	mov    %r15,%rdi
   1499e:	callq  155b0 <std_huff_tables>
   149a3:	jmp    149c7 <jpeg_set_defaults+0xa7>
   149a5:	movslq %r14d,%rax
   149a8:	movb   $0x0,0xc0(%r15,%rax,1)
   149b1:	movb   $0x1,0xd0(%r15,%rax,1)
   149ba:	movb   $0x5,0xe0(%r15,%rax,1)
   149c3:	add    $0x1,%r14d
   149c7:	cmp    $0xf,%r14d
   149cb:	jle    149a5 <jpeg_set_defaults+0x85>
   149cd:	movq   $0x0,0xf8(%r15)
   149d8:	movl   $0x0,0xf0(%r15)
   149e3:	movl   $0x0,0x100(%r15)
   149ee:	movl   $0x0,0x104(%r15)
   149f9:	movl   $0x0,0x108(%r15)
   14a04:	movslq 0x48(%r15),%rax
   14a08:	cmp    $0x8,%eax
   14a0b:	jle    14a18 <jpeg_set_defaults+0xf8>
   14a0d:	movl   $0x1,0x108(%r15)
   14a18:	mov    %r15,%rdi
   14a1b:	movl   $0x0,0x10c(%rdi)
   14a25:	movl   $0x0,0x110(%rdi)
   14a2f:	movl   $0x0,0x114(%rdi)
   14a39:	movl   $0x0,0x118(%rdi)
   14a43:	movl   $0x0,0x11c(%rdi)
   14a4d:	movb   $0x1,0x124(%rdi)
   14a54:	movb   $0x1,0x125(%rdi)
   14a5b:	movb   $0x0,0x126(%rdi)
   14a62:	movw   $0x1,0x128(%rdi)
   14a6b:	movw   $0x1,0x12a(%rdi)
   14a74:	callq  4070 <jpeg_default_colorspace@plt>
   14a79:	mov    -0x8(%rbp),%r14
   14a7d:	mov    -0x10(%rbp),%r15
   14a81:	leaveq 
   14a82:	retq   
   14a83:	data16 nopw %cs:0x0(%rax,%rax,1)
   14a8e:	xchg   %ax,%ax

0000000000014a90 <jpeg_set_colorspace>:
   14a90:	push   %rbp
   14a91:	mov    %rsp,%rbp
   14a94:	sub    $0x10,%rsp
   14a98:	movslq 0x24(%rdi),%rax
   14a9c:	cmp    $0x64,%eax
   14a9f:	je     14adf <jpeg_set_colorspace+0x4f>
   14aa1:	mov    (%rdi),%rax
   14aa4:	movl   $0x14,0x28(%rax)
   14aab:	movslq 0x24(%rdi),%rcx
   14aaf:	mov    (%rdi),%rax
   14ab2:	mov    %ecx,0x2c(%rax)
   14ab5:	mov    (%rdi),%rax
   14ab8:	mov    (%rax),%rax
   14abb:	mov    %rdi,%rcx
   14abe:	mov    %r14,-0x8(%rbp)
   14ac2:	mov    %r15,-0x10(%rbp)
   14ac6:	mov    %rdi,%r14
   14ac9:	mov    %rcx,%rdi
   14acc:	mov    %rsi,%r15
   14acf:	callq  *%rax
   14ad1:	mov    %r15,%rsi
   14ad4:	mov    %r14,%rdi
   14ad7:	mov    -0x10(%rbp),%r15
   14adb:	mov    -0x8(%rbp),%r14
   14adf:	mov    %esi,0x50(%rdi)
   14ae2:	movl   $0x0,0x120(%rdi)
   14aec:	movl   $0x0,0x12c(%rdi)
   14af6:	cmp    $0x5,%esi
   14af9:	ja     14b35 <jpeg_set_colorspace+0xa5>
   14afb:	lea    0x447e2(%rip),%rcx        # 592e4 <jpeg_nbits_table+0x10030>
   14b02:	movslq (%rcx,%rsi,4),%rax
   14b06:	add    %rcx,%rax
   14b09:	jmpq   *%rax
   14b0b:	movslq 0x38(%rdi),%rax
   14b0f:	mov    %eax,0x4c(%rdi)
   14b12:	xor    %edx,%edx
   14b14:	test   %eax,%eax
   14b16:	jle    14ec1 <jpeg_set_colorspace+0x431>
   14b1c:	cmp    $0xa,%eax
   14b1f:	jg     14ec1 <jpeg_set_colorspace+0x431>
   14b25:	mov    %r14,-0x8(%rbp)
   14b29:	mov    %r15,-0x10(%rbp)
   14b2d:	mov    %rdx,%r14
   14b30:	jmpq   14f39 <jpeg_set_colorspace+0x4a9>
   14b35:	mov    (%rdi),%rax
   14b38:	movl   $0xa,0x28(%rax)
   14b3f:	mov    (%rdi),%rax
   14b42:	mov    (%rax),%rax
   14b45:	callq  *%rax
   14b47:	leaveq 
   14b48:	retq   
   14b49:	movl   $0x1,0x120(%rdi)
   14b53:	movl   $0x1,0x4c(%rdi)
   14b5a:	mov    0x58(%rdi),%rax
   14b5e:	movl   $0x1,(%rax)
   14b64:	movl   $0x1,0x8(%rax)
   14b6b:	movl   $0x1,0xc(%rax)
   14b72:	movl   $0x0,0x10(%rax)
   14b79:	movl   $0x0,0x14(%rax)
   14b80:	movl   $0x0,0x18(%rax)
   14b87:	leaveq 
   14b88:	retq   
   14b89:	movl   $0x1,0x12c(%rdi)
   14b93:	movl   $0x3,0x4c(%rdi)
   14b9a:	mov    0x58(%rdi),%rax
   14b9e:	movl   $0x52,(%rax)
   14ba4:	movl   $0x1,0x8(%rax)
   14bab:	movl   $0x1,0xc(%rax)
   14bb2:	movl   $0x0,0x10(%rax)
   14bb9:	movl   $0x0,0x14(%rax)
   14bc0:	movl   $0x0,0x18(%rax)
   14bc7:	mov    0x58(%rdi),%rax
   14bcb:	movl   $0x47,0x60(%rax)
   14bd2:	movl   $0x1,0x68(%rax)
   14bd9:	movl   $0x1,0x6c(%rax)
   14be0:	movl   $0x0,0x70(%rax)
   14be7:	movl   $0x0,0x74(%rax)
   14bee:	movl   $0x0,0x78(%rax)
   14bf5:	mov    0x58(%rdi),%rax
   14bf9:	movl   $0x42,0xc0(%rax)
   14c03:	movl   $0x1,0xc8(%rax)
   14c0d:	movl   $0x1,0xcc(%rax)
   14c17:	movl   $0x0,0xd0(%rax)
   14c21:	movl   $0x0,0xd4(%rax)
   14c2b:	movl   $0x0,0xd8(%rax)
   14c35:	leaveq 
   14c36:	retq   
   14c37:	movl   $0x1,0x120(%rdi)
   14c41:	movl   $0x3,0x4c(%rdi)
   14c48:	mov    0x58(%rdi),%rax
   14c4c:	movl   $0x1,(%rax)
   14c52:	movl   $0x2,0x8(%rax)
   14c59:	movl   $0x2,0xc(%rax)
   14c60:	movl   $0x0,0x10(%rax)
   14c67:	movl   $0x0,0x14(%rax)
   14c6e:	movl   $0x0,0x18(%rax)
   14c75:	mov    0x58(%rdi),%rax
   14c79:	movl   $0x2,0x60(%rax)
   14c80:	movl   $0x1,0x68(%rax)
   14c87:	movl   $0x1,0x6c(%rax)
   14c8e:	movl   $0x1,0x70(%rax)
   14c95:	movl   $0x1,0x74(%rax)
   14c9c:	movl   $0x1,0x78(%rax)
   14ca3:	mov    0x58(%rdi),%rax
   14ca7:	movl   $0x3,0xc0(%rax)
   14cb1:	movl   $0x1,0xc8(%rax)
   14cbb:	movl   $0x1,0xcc(%rax)
   14cc5:	movl   $0x1,0xd0(%rax)
   14ccf:	movl   $0x1,0xd4(%rax)
   14cd9:	movl   $0x1,0xd8(%rax)
   14ce3:	leaveq 
   14ce4:	retq   
   14ce5:	movl   $0x1,0x12c(%rdi)
   14cef:	movl   $0x4,0x4c(%rdi)
   14cf6:	mov    0x58(%rdi),%rax
   14cfa:	movl   $0x43,(%rax)
   14d00:	movl   $0x1,0x8(%rax)
   14d07:	movl   $0x1,0xc(%rax)
   14d0e:	movl   $0x0,0x10(%rax)
   14d15:	movl   $0x0,0x14(%rax)
   14d1c:	movl   $0x0,0x18(%rax)
   14d23:	mov    0x58(%rdi),%rax
   14d27:	movl   $0x4d,0x60(%rax)
   14d2e:	movl   $0x1,0x68(%rax)
   14d35:	movl   $0x1,0x6c(%rax)
   14d3c:	movl   $0x0,0x70(%rax)
   14d43:	movl   $0x0,0x74(%rax)
   14d4a:	movl   $0x0,0x78(%rax)
   14d51:	mov    0x58(%rdi),%rax
   14d55:	movl   $0x59,0xc0(%rax)
   14d5f:	movl   $0x1,0xc8(%rax)
   14d69:	movl   $0x1,0xcc(%rax)
   14d73:	movl   $0x0,0xd0(%rax)
   14d7d:	movl   $0x0,0xd4(%rax)
   14d87:	movl   $0x0,0xd8(%rax)
   14d91:	mov    0x58(%rdi),%rax
   14d95:	movl   $0x4b,0x120(%rax)
   14d9f:	movl   $0x1,0x128(%rax)
   14da9:	movl   $0x1,0x12c(%rax)
   14db3:	movl   $0x0,0x130(%rax)
   14dbd:	movl   $0x0,0x134(%rax)
   14dc7:	movl   $0x0,0x138(%rax)
   14dd1:	leaveq 
   14dd2:	retq   
   14dd3:	movl   $0x1,0x12c(%rdi)
   14ddd:	movl   $0x4,0x4c(%rdi)
   14de4:	mov    0x58(%rdi),%rax
   14de8:	movl   $0x1,(%rax)
   14dee:	movl   $0x2,0x8(%rax)
   14df5:	movl   $0x2,0xc(%rax)
   14dfc:	movl   $0x0,0x10(%rax)
   14e03:	movl   $0x0,0x14(%rax)
   14e0a:	movl   $0x0,0x18(%rax)
   14e11:	mov    0x58(%rdi),%rax
   14e15:	movl   $0x2,0x60(%rax)
   14e1c:	movl   $0x1,0x68(%rax)
   14e23:	movl   $0x1,0x6c(%rax)
   14e2a:	movl   $0x1,0x70(%rax)
   14e31:	movl   $0x1,0x74(%rax)
   14e38:	movl   $0x1,0x78(%rax)
   14e3f:	mov    0x58(%rdi),%rax
   14e43:	movl   $0x3,0xc0(%rax)
   14e4d:	movl   $0x1,0xc8(%rax)
   14e57:	movl   $0x1,0xcc(%rax)
   14e61:	movl   $0x1,0xd0(%rax)
   14e6b:	movl   $0x1,0xd4(%rax)
   14e75:	movl   $0x1,0xd8(%rax)
   14e7f:	mov    0x58(%rdi),%rax
   14e83:	movl   $0x4,0x120(%rax)
   14e8d:	movl   $0x2,0x128(%rax)
   14e97:	movl   $0x2,0x12c(%rax)
   14ea1:	movl   $0x0,0x130(%rax)
   14eab:	movl   $0x0,0x134(%rax)
   14eb5:	movl   $0x0,0x138(%rax)
   14ebf:	leaveq 
   14ec0:	retq   
   14ec1:	mov    (%rdi),%rax
   14ec4:	movl   $0x1a,0x28(%rax)
   14ecb:	movslq 0x4c(%rdi),%rcx
   14ecf:	mov    (%rdi),%rax
   14ed2:	mov    %ecx,0x2c(%rax)
   14ed5:	mov    (%rdi),%rax
   14ed8:	movl   $0xa,0x30(%rax)
   14edf:	mov    (%rdi),%rax
   14ee2:	mov    (%rax),%rax
   14ee5:	mov    %rdi,%rcx
   14ee8:	mov    %r14,-0x8(%rbp)
   14eec:	mov    %r15,-0x10(%rbp)
   14ef0:	mov    %rdx,%r14
   14ef3:	mov    %rdi,%r15
   14ef6:	mov    %rcx,%rdi
   14ef9:	callq  *%rax
   14efb:	mov    %r15,%rdi
   14efe:	jmp    14f39 <jpeg_set_colorspace+0x4a9>
   14f00:	movslq %r14d,%rax
   14f03:	lea    (%rax,%rax,2),%rax
   14f07:	shl    $0x5,%rax
   14f0b:	add    0x58(%rdi),%rax
   14f0f:	mov    %r14d,(%rax)
   14f12:	movl   $0x1,0x8(%rax)
   14f19:	movl   $0x1,0xc(%rax)
   14f20:	movl   $0x0,0x10(%rax)
   14f27:	movl   $0x0,0x14(%rax)
   14f2e:	movl   $0x0,0x18(%rax)
   14f35:	add    $0x1,%r14d
   14f39:	movslq 0x4c(%rdi),%rax
   14f3d:	cmp    %r14d,%eax
   14f40:	jg     14f00 <jpeg_set_colorspace+0x470>
   14f42:	mov    -0x10(%rbp),%r15
   14f46:	mov    -0x8(%rbp),%r14
   14f4a:	leaveq 
   14f4b:	retq   
   14f4c:	nopl   0x0(%rax)

0000000000014f50 <jpeg_default_colorspace>:
   14f50:	push   %rbp
   14f51:	mov    %rsp,%rbp
   14f54:	mov    0x3c(%rdi),%eax
   14f57:	cmp    $0xf,%eax
   14f5a:	ja     14f7a <jpeg_default_colorspace+0x2a>
   14f5c:	mov    $0x3,%esi
   14f61:	lea    0x44394(%rip),%rcx        # 592fc <jpeg_nbits_table+0x10048>
   14f68:	movslq (%rcx,%rax,4),%rax
   14f6c:	add    %rcx,%rax
   14f6f:	jmpq   *%rax
   14f71:	xor    %esi,%esi
   14f73:	callq  4170 <jpeg_set_colorspace@plt>
   14f78:	leaveq 
   14f79:	retq   
   14f7a:	mov    (%rdi),%rax
   14f7d:	movl   $0x9,0x28(%rax)
   14f84:	mov    (%rdi),%rax
   14f87:	mov    (%rax),%rax
   14f8a:	callq  *%rax
   14f8c:	leaveq 
   14f8d:	retq   
   14f8e:	mov    $0x1,%esi
   14f93:	callq  4170 <jpeg_set_colorspace@plt>
   14f98:	leaveq 
   14f99:	retq   
   14f9a:	callq  4170 <jpeg_set_colorspace@plt>
   14f9f:	leaveq 
   14fa0:	retq   
   14fa1:	callq  4170 <jpeg_set_colorspace@plt>
   14fa6:	leaveq 
   14fa7:	retq   
   14fa8:	mov    $0x4,%esi
   14fad:	callq  4170 <jpeg_set_colorspace@plt>
   14fb2:	leaveq 
   14fb3:	retq   
   14fb4:	mov    $0x5,%esi
   14fb9:	callq  4170 <jpeg_set_colorspace@plt>
   14fbe:	leaveq 
   14fbf:	retq   

0000000000014fc0 <jpeg_set_quality>:
   14fc0:	push   %rbp
   14fc1:	mov    %rsp,%rbp
   14fc4:	sub    $0x10,%rsp
   14fc8:	mov    %r14,-0x8(%rbp)
   14fcc:	mov    %r15,-0x10(%rbp)
   14fd0:	mov    %rdi,%r14
   14fd3:	mov    %rsi,%rdi
   14fd6:	mov    %rdx,%r15
   14fd9:	callq  43b0 <jpeg_quality_scaling@plt>
   14fde:	mov    %r15,%rdx
   14fe1:	mov    %rax,%rsi
   14fe4:	mov    %r14,%rdi
   14fe7:	callq  4400 <jpeg_set_linear_quality@plt>
   14fec:	mov    -0x10(%rbp),%r15
   14ff0:	mov    -0x8(%rbp),%r14
   14ff4:	leaveq 
   14ff5:	retq   
   14ff6:	nopw   %cs:0x0(%rax,%rax,1)

0000000000015000 <jpeg_set_linear_quality>:
   15000:	push   %rbp
   15001:	mov    %rsp,%rbp
   15004:	sub    $0x20,%rsp
   15008:	mov    %r13,-0x8(%rbp)
   1500c:	mov    %r14,-0x10(%rbp)
   15010:	mov    %r15,-0x18(%rbp)
   15014:	mov    %rdx,%r13
   15017:	mov    %rsi,%r15
   1501a:	xor    %esi,%esi
   1501c:	lea    0x44319(%rip),%rdx        # 5933c <std_luminance_quant_tbl>
   15023:	mov    %rdi,%r14
   15026:	mov    %r15,%rcx
   15029:	mov    %r13,%r8
   1502c:	callq  42f0 <jpeg_add_quant_table@plt>
   15031:	mov    %r15,%rcx
   15034:	mov    %r14,%rdi
   15037:	mov    %r13,%r8
   1503a:	mov    $0x1,%esi
   1503f:	lea    0x443f6(%rip),%rdx        # 5943c <std_chrominance_quant_tbl>
   15046:	callq  42f0 <jpeg_add_quant_table@plt>
   1504b:	mov    -0x18(%rbp),%r15
   1504f:	mov    -0x10(%rbp),%r14
   15053:	mov    -0x8(%rbp),%r13
   15057:	leaveq 
   15058:	retq   
   15059:	nopl   0x0(%rax)

0000000000015060 <jpeg_add_quant_table>:
   15060:	push   %rbp
   15061:	mov    %rsp,%rbp
   15064:	sub    $0x30,%rsp
   15068:	mov    %rbx,-0x8(%rbp)
   1506c:	mov    %r12,-0x10(%rbp)
   15070:	mov    %r13,-0x18(%rbp)
   15074:	mov    %r14,-0x20(%rbp)
   15078:	mov    %r15,-0x28(%rbp)
   1507c:	movslq 0x24(%rdi),%rax
   15080:	cmp    $0x64,%eax
   15083:	jne    15096 <jpeg_add_quant_table+0x36>
   15085:	mov    %rdi,%rbx
   15088:	mov    %rdx,%r12
   1508b:	mov    %r8,%r13
   1508e:	mov    %rcx,%r14
   15091:	mov    %rsi,%r15
   15094:	jmp    150c1 <jpeg_add_quant_table+0x61>
   15096:	mov    (%rdi),%rax
   15099:	movl   $0x14,0x28(%rax)
   150a0:	movslq 0x24(%rdi),%rbx
   150a4:	mov    (%rdi),%rax
   150a7:	mov    %ebx,0x2c(%rax)
   150aa:	mov    (%rdi),%rax
   150ad:	mov    (%rax),%rax
   150b0:	mov    %rdx,%r12
   150b3:	mov    %r8,%r13
   150b6:	mov    %rcx,%r14
   150b9:	mov    %rsi,%r15
   150bc:	mov    %rdi,%rbx
   150bf:	callq  *%rax
   150c1:	test   %r15d,%r15d
   150c4:	js     150d1 <jpeg_add_quant_table+0x71>
   150c6:	cmp    $0x3,%r15d
   150ca:	jg     150d1 <jpeg_add_quant_table+0x71>
   150cc:	mov    %r15,%rax
   150cf:	jmp    150f0 <jpeg_add_quant_table+0x90>
   150d1:	mov    (%rbx),%rax
   150d4:	movl   $0x1f,0x28(%rax)
   150db:	mov    (%rbx),%rax
   150de:	mov    %r15d,0x2c(%rax)
   150e2:	mov    (%rbx),%rax
   150e5:	mov    (%rax),%rax
   150e8:	mov    %rbx,%rdi
   150eb:	callq  *%rax
   150ed:	mov    %r15,%rax
   150f0:	movslq %r14d,%r15
   150f3:	xor    %ecx,%ecx
   150f5:	mov    $0xff,%edi
   150fa:	mov    $0x7fff,%r8d
   15100:	mov    $0x1,%r9d
   15106:	mov    $0x64,%r10d
   1510c:	movslq %eax,%r14
   1510f:	mov    0x60(%rbx,%r14,8),%rax
   15114:	test   %rax,%rax
   15117:	jne    15184 <jpeg_add_quant_table+0x124>
   15119:	mov    %rbx,%rdi
   1511c:	callq  4270 <jpeg_alloc_quant_table@plt>
   15121:	mov    %rax,0x60(%rbx,%r14,8)
   15126:	mov    $0xff,%edi
   1512b:	mov    $0x7fff,%r8d
   15131:	mov    $0x1,%r9d
   15137:	mov    $0x64,%r10d
   1513d:	xor    %ecx,%ecx
   1513f:	jmp    15184 <jpeg_add_quant_table+0x124>
   15141:	movslq %ecx,%rsi
   15144:	mov    (%r12,%rsi,4),%eax
   15148:	imul   %r15,%rax
   1514c:	add    $0x32,%rax
   15150:	cqto   
   15152:	idiv   %r10
   15155:	test   %rax,%rax
   15158:	jg     1515d <jpeg_add_quant_table+0xfd>
   1515a:	mov    %r9,%rax
   1515d:	cmp    $0x7fff,%rax
   15163:	jle    15168 <jpeg_add_quant_table+0x108>
   15165:	mov    %r8,%rax
   15168:	test   %r13d,%r13d
   1516b:	je     15178 <jpeg_add_quant_table+0x118>
   1516d:	cmp    $0xff,%rax
   15173:	jle    15178 <jpeg_add_quant_table+0x118>
   15175:	mov    %rdi,%rax
   15178:	mov    0x60(%rbx,%r14,8),%rdx
   1517d:	mov    %ax,(%rdx,%rsi,2)
   15181:	add    $0x1,%ecx
   15184:	cmp    $0x3f,%ecx
   15187:	jle    15141 <jpeg_add_quant_table+0xe1>
   15189:	mov    0x60(%rbx,%r14,8),%rax
   1518e:	movl   $0x0,0x80(%rax)
   15198:	mov    -0x28(%rbp),%r15
   1519c:	mov    -0x20(%rbp),%r14
   151a0:	mov    -0x18(%rbp),%r13
   151a4:	mov    -0x10(%rbp),%r12
   151a8:	mov    -0x8(%rbp),%rbx
   151ac:	leaveq 
   151ad:	retq   
   151ae:	xchg   %ax,%ax

00000000000151b0 <jpeg_quality_scaling>:
   151b0:	push   %rbp
   151b1:	mov    %rsp,%rbp
   151b4:	test   %edi,%edi
   151b6:	jg     151bd <jpeg_quality_scaling+0xd>
   151b8:	mov    $0x1,%edi
   151bd:	cmp    $0x64,%edi
   151c0:	jle    151c7 <jpeg_quality_scaling+0x17>
   151c2:	mov    $0x64,%edi
   151c7:	cmp    $0x31,%edi
   151ca:	jle    151d8 <jpeg_quality_scaling+0x28>
   151cc:	mov    $0xc8,%eax
   151d1:	lea    (%rdi,%rdi,1),%ecx
   151d4:	sub    %ecx,%eax
   151d6:	leaveq 
   151d7:	retq   
   151d8:	mov    $0x1388,%eax
   151dd:	cltd   
   151de:	idiv   %edi
   151e0:	leaveq 
   151e1:	retq   
   151e2:	data16 nopw %cs:0x0(%rax,%rax,1)
   151ed:	nopl   (%rax)

00000000000151f0 <jpeg_simple_progression>:
   151f0:	push   %rbp
   151f1:	mov    %rsp,%rbp
   151f4:	sub    $0x30,%rsp
   151f8:	mov    %r14,-0x20(%rbp)
   151fc:	mov    %r15,-0x28(%rbp)
   15200:	mov    %r13,-0x18(%rbp)
   15204:	movslq 0x4c(%rdi),%r15
   15208:	movslq 0x24(%rdi),%rax
   1520c:	cmp    $0x64,%eax
   1520f:	je     15237 <jpeg_simple_progression+0x47>
   15211:	mov    (%rdi),%rax
   15214:	movl   $0x14,0x28(%rax)
   1521b:	movslq 0x24(%rdi),%rcx
   1521f:	mov    (%rdi),%rax
   15222:	mov    %ecx,0x2c(%rax)
   15225:	mov    (%rdi),%rax
   15228:	mov    (%rax),%rax
   1522b:	mov    %rdi,%r14
   1522e:	callq  *%rax
   15230:	mov    %r14,%rdi
   15233:	mov    -0x20(%rbp),%r14
   15237:	mov    $0xa,%edx
   1523c:	cmp    $0x3,%r15d
   15240:	je     15252 <jpeg_simple_progression+0x62>
   15242:	cmp    $0x4,%r15d
   15246:	jg     1525f <jpeg_simple_progression+0x6f>
   15248:	lea    0x2(,%r15,4),%eax
   15250:	jmp    15265 <jpeg_simple_progression+0x75>
   15252:	mov    0x50(%rdi),%eax
   15255:	cmp    $0x3,%eax
   15258:	jne    15242 <jpeg_simple_progression+0x52>
   1525a:	mov    %rdx,%rax
   1525d:	jmp    15265 <jpeg_simple_progression+0x75>
   1525f:	lea    (%r15,%r15,2),%eax
   15263:	add    %eax,%eax
   15265:	xor    %esi,%esi
   15267:	mov    0x1f8(%rdi),%rcx
   1526e:	test   %rcx,%rcx
   15271:	je     1527b <jpeg_simple_progression+0x8b>
   15273:	cmp    0x200(%rdi),%eax
   15279:	jle    152ba <jpeg_simple_progression+0xca>
   1527b:	cmp    $0xa,%eax
   1527e:	jle    15283 <jpeg_simple_progression+0x93>
   15280:	mov    %rax,%rdx
   15283:	mov    %edx,0x200(%rdi)
   15289:	mov    0x8(%rdi),%rcx
   1528d:	mov    (%rcx),%rcx
   15290:	movslq %edx,%rdx
   15293:	lea    (%rdx,%rdx,8),%rdx
   15297:	shl    $0x2,%rdx
   1529b:	mov    %rax,%r14
   1529e:	mov    %rdi,%r13
   152a1:	callq  *%rcx
   152a3:	mov    %rax,0x1f8(%r13)
   152aa:	mov    %r14,%rax
   152ad:	mov    %r13,%rdi
   152b0:	xor    %esi,%esi
   152b2:	mov    -0x18(%rbp),%r13
   152b6:	mov    -0x20(%rbp),%r14
   152ba:	cmp    $0x3,%r15d
   152be:	mov    0x1f8(%rdi),%r10
   152c5:	mov    %r10,0xf8(%rdi)
   152cc:	mov    %eax,0xf0(%rdi)
   152d2:	mov    $0x1,%ecx
   152d7:	mov    $0x5,%r11d
   152dd:	mov    $0x2,%r8d
   152e3:	mov    $0x3f,%r9d
   152e9:	je     1538a <jpeg_simple_progression+0x19a>
   152ef:	mov    %rsi,%rdx
   152f2:	mov    %r10,%rdi
   152f5:	mov    %r15,%rsi
   152f8:	callq  156d0 <fill_dc_scans>
   152fd:	mov    %rax,%rdi
   15300:	mov    %r15,%rsi
   15303:	mov    $0x1,%edx
   15308:	xor    %r8d,%r8d
   1530b:	mov    $0x2,%r9d
   15311:	mov    $0x5,%ecx
   15316:	callq  15690 <fill_scans>
   1531b:	mov    %rax,%rdi
   1531e:	mov    %r15,%rsi
   15321:	mov    $0x3f,%ecx
   15326:	xor    %r8d,%r8d
   15329:	mov    $0x2,%r9d
   1532f:	mov    $0x6,%edx
   15334:	callq  15690 <fill_scans>
   15339:	mov    %rax,%rdi
   1533c:	mov    $0x1,%edx
   15341:	mov    %rdx,%r9
   15344:	mov    %r15,%rsi
   15347:	mov    $0x3f,%ecx
   1534c:	mov    $0x2,%r8d
   15352:	callq  15690 <fill_scans>
   15357:	mov    %rax,%rdi
   1535a:	mov    %r15,%rsi
   1535d:	mov    $0x1,%edx
   15362:	xor    %ecx,%ecx
   15364:	callq  156d0 <fill_dc_scans>
   15369:	mov    %r15,%rsi
   1536c:	mov    %rax,%rdi
   1536f:	mov    $0x1,%edx
   15374:	mov    %rdx,%r8
   15377:	mov    $0x3f,%ecx
   1537c:	xor    %r9d,%r9d
   1537f:	callq  15690 <fill_scans>
   15384:	mov    -0x28(%rbp),%r15
   15388:	leaveq 
   15389:	retq   
   1538a:	mov    0x50(%rdi),%eax
   1538d:	cmp    $0x3,%eax
   15390:	jne    152ef <jpeg_simple_progression+0xff>
   15396:	mov    $0x3,%eax
   1539b:	mov    %rsi,%rdx
   1539e:	mov    %rcx,%rdi
   153a1:	mov    %rbx,-0x8(%rbp)
   153a5:	mov    %r12,-0x10(%rbp)
   153a9:	mov    %r9,%rbx
   153ac:	mov    %rsi,%r12
   153af:	mov    %rax,%rsi
   153b2:	mov    %rcx,%r13
   153b5:	mov    %rdi,%rcx
   153b8:	mov    %r10,%rdi
   153bb:	mov    %r8,%r14
   153be:	mov    %r11,%r15
   153c1:	callq  156d0 <fill_dc_scans>
   153c6:	mov    %r15,%rcx
   153c9:	mov    %rax,%rdi
   153cc:	mov    %r12,%r8
   153cf:	mov    %r12,%rsi
   153d2:	mov    %r13,%rdx
   153d5:	mov    %r14,%r9
   153d8:	callq  15660 <fill_a_scan>
   153dd:	mov    %rax,%rdi
   153e0:	mov    %r13,%r9
   153e3:	mov    %r14,%rsi
   153e6:	mov    %r13,%rdx
   153e9:	mov    %rbx,%rcx
   153ec:	mov    %r12,%r8
   153ef:	callq  15660 <fill_a_scan>
   153f4:	mov    %rax,%rdi
   153f7:	mov    %r13,%rdx
   153fa:	mov    %r13,%r9
   153fd:	mov    %r13,%rsi
   15400:	mov    %rbx,%rcx
   15403:	mov    %r12,%r8
   15406:	callq  15660 <fill_a_scan>
   1540b:	mov    %rax,%rdi
   1540e:	mov    %r12,%r8
   15411:	mov    %r12,%rsi
   15414:	mov    %rbx,%rcx
   15417:	mov    %r14,%r9
   1541a:	mov    $0x6,%edx
   1541f:	callq  15660 <fill_a_scan>
   15424:	mov    %rax,%rdi
   15427:	mov    %r13,%r9
   1542a:	mov    %r12,%rsi
   1542d:	mov    %r13,%rdx
   15430:	mov    %rbx,%rcx
   15433:	mov    %r14,%r8
   15436:	callq  15660 <fill_a_scan>
   1543b:	mov    %rax,%rdi
   1543e:	mov    %r13,%rdx
   15441:	mov    %r12,%rcx
   15444:	mov    $0x3,%esi
   15449:	callq  156d0 <fill_dc_scans>
   1544e:	mov    %r14,%rsi
   15451:	mov    %rax,%rdi
   15454:	mov    %r13,%r8
   15457:	mov    %r13,%rdx
   1545a:	mov    %rbx,%rcx
   1545d:	mov    %r12,%r9
   15460:	callq  15660 <fill_a_scan>
   15465:	mov    %rax,%rdi
   15468:	mov    %r13,%rdx
   1546b:	mov    %r13,%r8
   1546e:	mov    %r13,%rsi
   15471:	mov    %rbx,%rcx
   15474:	mov    %r12,%r9
   15477:	callq  15660 <fill_a_scan>
   1547c:	mov    %rbx,%rcx
   1547f:	mov    %r13,%rdx
   15482:	mov    %r12,%rsi
   15485:	mov    %rax,%rdi
   15488:	mov    %rsi,%r9
   1548b:	mov    %rdx,%r8
   1548e:	callq  15660 <fill_a_scan>
   15493:	mov    -0x10(%rbp),%r12
   15497:	mov    -0x8(%rbp),%rbx
   1549b:	mov    -0x18(%rbp),%r13
   1549f:	mov    -0x28(%rbp),%r15
   154a3:	mov    -0x20(%rbp),%r14
   154a7:	leaveq 
   154a8:	retq   
   154a9:	nopl   0x0(%rax)

00000000000154b0 <add_huff_table>:
   154b0:	push   %rbp
   154b1:	mov    %rsp,%rbp
   154b4:	sub    $0x20,%rsp
   154b8:	mov    (%rsi),%rax
   154bb:	test   %rax,%rax
   154be:	je     154c2 <add_huff_table+0x12>
   154c0:	leaveq 
   154c1:	retq   
   154c2:	mov    %rdi,%rax
   154c5:	mov    %r12,-0x8(%rbp)
   154c9:	mov    %r13,-0x10(%rbp)
   154cd:	mov    %r14,-0x18(%rbp)
   154d1:	mov    %r15,-0x20(%rbp)
   154d5:	mov    %rsi,%r12
   154d8:	mov    %rcx,%r13
   154db:	mov    %rdi,%r14
   154de:	mov    %rax,%rdi
   154e1:	mov    %rdx,%r15
   154e4:	callq  44a0 <jpeg_alloc_huff_table@plt>
   154e9:	mov    %rax,%rdi
   154ec:	mov    %rdi,(%r12)
   154f0:	mov    $0x11,%edx
   154f5:	mov    %r15,%rsi
   154f8:	callq  42c0 <memcpy@plt>
   154fd:	xor    %edx,%edx
   154ff:	mov    $0x1,%r8d
   15505:	mov    %rdx,%rax
   15508:	jmp    15518 <add_huff_table+0x68>
   1550a:	movslq %r8d,%rcx
   1550d:	movzbl (%r15,%rcx,1),%ecx
   15512:	add    %ecx,%eax
   15514:	add    $0x1,%r8d
   15518:	cmp    $0x10,%r8d
   1551c:	jle    1550a <add_huff_table+0x5a>
   1551e:	test   %eax,%eax
   15520:	jle    1552e <add_huff_table+0x7e>
   15522:	cmp    $0x100,%eax
   15527:	jg     1552e <add_huff_table+0x7e>
   15529:	mov    %rdx,%r14
   1552c:	jmp    1554c <add_huff_table+0x9c>
   1552e:	mov    (%r14),%rcx
   15531:	movl   $0x8,0x28(%rcx)
   15538:	mov    (%r14),%rcx
   1553b:	mov    (%rcx),%rcx
   1553e:	mov    %r14,%rdi
   15541:	mov    %rdx,%r14
   15544:	mov    %rax,%r15
   15547:	callq  *%rcx
   15549:	mov    %r15,%rax
   1554c:	mov    (%r12),%rdi
   15550:	add    $0x11,%rdi
   15554:	mov    %r13,%rsi
   15557:	mov    %rax,%r13
   1555a:	movslq %r13d,%r15
   1555d:	mov    %r15,%rdx
   15560:	callq  42c0 <memcpy@plt>
   15565:	mov    (%r12),%rax
   15569:	lea    0x11(%rax,%r15,1),%rdi
   1556e:	mov    $0x100,%eax
   15573:	sub    %r13d,%eax
   15576:	movslq %eax,%rdx
   15579:	mov    %r14,%rsi
   1557c:	callq  41e0 <memset@plt>
   15581:	mov    (%r12),%rax
   15585:	movl   $0x0,0x114(%rax)
   1558f:	mov    -0x20(%rbp),%r15
   15593:	mov    -0x18(%rbp),%r14
   15597:	mov    -0x10(%rbp),%r13
   1559b:	mov    -0x8(%rbp),%r12
   1559f:	leaveq 
   155a0:	retq   
   155a1:	data16 nopw %cs:0x0(%rax,%rax,1)
   155ac:	nopl   0x0(%rax)

00000000000155b0 <std_huff_tables>:
   155b0:	push   %rbp
   155b1:	mov    %rsp,%rbp
   155b4:	sub    $0x20,%rsp
   155b8:	mov    %r13,-0x8(%rbp)
   155bc:	mov    %r14,-0x10(%rbp)
   155c0:	mov    %r15,-0x18(%rbp)
   155c4:	movslq 0x20(%rdi),%rax
   155c8:	test   %eax,%eax
   155ca:	jne    155dc <std_huff_tables+0x2c>
   155cc:	lea    0x80(%rdi),%r15
   155d3:	lea    0xa0(%rdi),%r13
   155da:	jmp    155ea <std_huff_tables+0x3a>
   155dc:	lea    0xe8(%rdi),%r15
   155e3:	lea    0x108(%rdi),%r13
   155ea:	lea    0x43f4b(%rip),%rdx        # 5953c <bits_dc_luminance.5>
   155f1:	lea    0x43f55(%rip),%rcx        # 5954d <val_dc_luminance.6>
   155f8:	mov    %rdi,%r14
   155fb:	mov    %r15,%rsi
   155fe:	callq  154b0 <add_huff_table>
   15603:	lea    0x43f6c(%rip),%rdx        # 59576 <bits_ac_luminance.9>
   1560a:	lea    0x43f76(%rip),%rcx        # 59587 <val_ac_luminance.10>
   15611:	mov    %r14,%rdi
   15614:	mov    %r13,%rsi
   15617:	callq  154b0 <add_huff_table>
   1561c:	lea    0x8(%r15),%rsi
   15620:	lea    0x43f32(%rip),%rdx        # 59559 <bits_dc_chrominance.7>
   15627:	lea    0x43f3c(%rip),%rcx        # 5956a <val_dc_chrominance.8>
   1562e:	mov    %r14,%rdi
   15631:	callq  154b0 <add_huff_table>
   15636:	lea    0x8(%r13),%rsi
   1563a:	mov    %r14,%rdi
   1563d:	lea    0x43fe5(%rip),%rdx        # 59629 <bits_ac_chrominance.11>
   15644:	lea    0x43fef(%rip),%rcx        # 5963a <val_ac_chrominance.12>
   1564b:	callq  154b0 <add_huff_table>
   15650:	mov    -0x18(%rbp),%r15
   15654:	mov    -0x10(%rbp),%r14
   15658:	mov    -0x8(%rbp),%r13
   1565c:	leaveq 
   1565d:	retq   
   1565e:	xchg   %ax,%ax

0000000000015660 <fill_a_scan>:
   15660:	push   %rbp
   15661:	mov    %rsp,%rbp
   15664:	movl   $0x1,(%rdi)
   1566a:	mov    %esi,0x4(%rdi)
   1566d:	mov    %edx,0x14(%rdi)
   15670:	mov    %ecx,0x18(%rdi)
   15673:	mov    %r8d,0x1c(%rdi)
   15677:	mov    %r9d,0x20(%rdi)
   1567b:	lea    0x24(%rdi),%rax
   1567f:	leaveq 
   15680:	retq   
   15681:	data16 nopw %cs:0x0(%rax,%rax,1)
   1568c:	nopl   0x0(%rax)

0000000000015690 <fill_scans>:
   15690:	push   %rbp
   15691:	mov    %rsp,%rbp
   15694:	mov    %rdi,%rax
   15697:	xor    %r10d,%r10d
   1569a:	jmp    156bc <fill_scans+0x2c>
   1569c:	movl   $0x1,(%rax)
   156a2:	mov    %r10d,0x4(%rax)
   156a6:	mov    %edx,0x14(%rax)
   156a9:	mov    %ecx,0x18(%rax)
   156ac:	mov    %r8d,0x1c(%rax)
   156b0:	mov    %r9d,0x20(%rax)
   156b4:	add    $0x24,%rax
   156b8:	add    $0x1,%r10d
   156bc:	cmp    %esi,%r10d
   156bf:	jl     1569c <fill_scans+0xc>
   156c1:	leaveq 
   156c2:	retq   
   156c3:	data16 nopw %cs:0x0(%rax,%rax,1)
   156ce:	xchg   %ax,%ax

00000000000156d0 <fill_dc_scans>:
   156d0:	push   %rbp
   156d1:	mov    %rsp,%rbp
   156d4:	xor    %eax,%eax
   156d6:	cmp    $0x4,%esi
   156d9:	jle    156ee <fill_dc_scans+0x1e>
   156db:	mov    %rdx,%r8
   156de:	mov    %rax,%rdx
   156e1:	mov    %rcx,%r9
   156e4:	mov    %rdx,%rcx
   156e7:	callq  15690 <fill_scans>
   156ec:	leaveq 
   156ed:	retq   
   156ee:	mov    %esi,(%rdi)
   156f0:	jmp    156fd <fill_dc_scans+0x2d>
   156f2:	movslq %eax,%r8
   156f5:	mov    %eax,0x4(%rdi,%r8,4)
   156fa:	add    $0x1,%eax
   156fd:	cmp    %esi,%eax
   156ff:	jl     156f2 <fill_dc_scans+0x22>
   15701:	movl   $0x0,0x18(%rdi)
   15708:	movl   $0x0,0x14(%rdi)
   1570f:	mov    %edx,0x1c(%rdi)
   15712:	mov    %ecx,0x20(%rdi)
   15715:	lea    0x24(%rdi),%rax
   15719:	leaveq 
   1571a:	retq   
   1571b:	nopl   0x0(%rax,%rax,1)

0000000000015720 <jinit_phuff_encoder>:
   15720:	push   %rbp
   15721:	mov    %rsp,%rbp
   15724:	sub    $0x10,%rsp
   15728:	mov    %r15,-0x8(%rbp)
   1572c:	mov    0x8(%rdi),%rax
   15730:	mov    (%rax),%rax
   15733:	mov    $0x1,%esi
   15738:	mov    $0xb8,%edx
   1573d:	mov    %rdi,%r15
   15740:	callq  *%rax
   15742:	mov    %rax,0x1f0(%r15)
   15749:	lea    0x9c0(%rip),%rcx        # 16110 <start_pass_phuff>
   15750:	mov    %rcx,(%rax)
   15753:	xor    %ecx,%ecx
   15755:	jmp    15772 <jinit_phuff_encoder+0x52>
   15757:	movslq %ecx,%rdx
   1575a:	movq   $0x0,0x78(%rax,%rdx,8)
   15763:	movq   $0x0,0x98(%rax,%rdx,8)
   1576f:	add    $0x1,%ecx
   15772:	cmp    $0x3,%ecx
   15775:	jle    15757 <jinit_phuff_encoder+0x37>
   15777:	movq   $0x0,0x68(%rax)
   1577f:	mov    -0x8(%rbp),%r15
   15783:	leaveq 
   15784:	retq   
   15785:	data16 nopw %cs:0x0(%rax,%rax,1)

0000000000015790 <encode_mcu_DC_first>:
   15790:	push   %rbp
   15791:	mov    %rsp,%rbp
   15794:	sub    $0x40,%rsp
   15798:	mov    %rbx,-0x8(%rbp)
   1579c:	mov    %r12,-0x10(%rbp)
   157a0:	mov    %r13,-0x18(%rbp)
   157a4:	mov    %r14,-0x20(%rbp)
   157a8:	mov    %r15,-0x28(%rbp)
   157ac:	mov    %rdi,-0x40(%rbp)
   157b0:	mov    %rsi,-0x38(%rbp)
   157b4:	mov    0x1a8(%rdi),%ecx
   157ba:	mov    0x1f0(%rdi),%r13
   157c1:	mov    0x28(%rdi),%rax
   157c5:	mov    (%rax),%rax
   157c8:	mov    %rax,0x20(%r13)
   157cc:	mov    0x28(%rdi),%rax
   157d0:	mov    0x8(%rax),%rax
   157d4:	mov    %rax,0x28(%r13)
   157d8:	xor    %ebx,%ebx
   157da:	mov    0x118(%rdi),%eax
   157e0:	test   %eax,%eax
   157e2:	jne    157ec <encode_mcu_DC_first+0x5c>
   157e4:	mov    %rdi,%r12
   157e7:	mov    %rbx,%r14
   157ea:	jmp    1585e <encode_mcu_DC_first+0xce>
   157ec:	mov    0x70(%r13),%eax
   157f0:	test   %eax,%eax
   157f2:	je     158ab <encode_mcu_DC_first+0x11b>
   157f8:	mov    %rdi,%r12
   157fb:	mov    %rbx,%r14
   157fe:	jmp    1585e <encode_mcu_DC_first+0xce>
   15800:	sar    %eax
   15802:	add    $0x1,%ebx
   15805:	test   %eax,%eax
   15807:	jne    15800 <encode_mcu_DC_first+0x70>
   15809:	cmp    $0xb,%ebx
   1580c:	jle    1582f <encode_mcu_DC_first+0x9f>
   1580e:	mov    (%r12),%rax
   15812:	movl   $0x6,0x28(%rax)
   15819:	mov    (%r12),%rax
   1581d:	mov    (%rax),%rax
   15820:	mov    %r12,%rdi
   15823:	mov    %rdx,%r12
   15826:	callq  *%rax
   15828:	mov    %r12,%rdx
   1582b:	mov    -0x40(%rbp),%r12
   1582f:	movslq 0x14(%rdx),%rsi
   15833:	mov    %r13,%rdi
   15836:	mov    %rbx,%rdx
   15839:	callq  16570 <emit_symbol>
   1583e:	test   %ebx,%ebx
   15840:	je     15850 <encode_mcu_DC_first+0xc0>
   15842:	mov    %rbx,%rdx
   15845:	mov    %r15,%rsi
   15848:	mov    %r13,%rdi
   1584b:	callq  163e0 <emit_bits>
   15850:	add    $0x1,%r14d
   15854:	xor    %ebx,%ebx
   15856:	mov    -0x38(%rbp),%rsi
   1585a:	mov    -0x30(%rbp),%rcx
   1585e:	movslq 0x170(%r12),%rax
   15866:	cmp    %r14d,%eax
   15869:	jg     158cb <encode_mcu_DC_first+0x13b>
   1586b:	mov    0x20(%r13),%rcx
   1586f:	mov    0x28(%r12),%rax
   15874:	mov    %rcx,(%rax)
   15877:	mov    0x28(%r13),%rcx
   1587b:	mov    0x28(%r12),%rax
   15880:	mov    %rcx,0x8(%rax)
   15884:	mov    $0x1,%eax
   15889:	mov    0x118(%r12),%edx
   15891:	test   %edx,%edx
   15893:	jne    15909 <encode_mcu_DC_first+0x179>
   15895:	mov    -0x28(%rbp),%r15
   15899:	mov    -0x20(%rbp),%r14
   1589d:	mov    -0x18(%rbp),%r13
   158a1:	mov    -0x10(%rbp),%r12
   158a5:	mov    -0x8(%rbp),%rbx
   158a9:	leaveq 
   158aa:	retq   
   158ab:	mov    %rdi,%r12
   158ae:	mov    %rsi,%r14
   158b1:	mov    %rcx,%r15
   158b4:	movslq 0x74(%r13),%rsi
   158b8:	mov    %r13,%rdi
   158bb:	callq  16700 <emit_restart>
   158c0:	mov    %r15,%rcx
   158c3:	mov    %r14,%rsi
   158c6:	mov    %rbx,%r14
   158c9:	jmp    1585e <encode_mcu_DC_first+0xce>
   158cb:	movslq %r14d,%rax
   158ce:	movslq 0x174(%r12,%rax,4),%rdi
   158d6:	mov    0x148(%r12,%rdi,8),%rdx
   158de:	mov    (%rsi,%rax,8),%rax
   158e2:	movswq (%rax),%rsi
   158e6:	sar    %cl,%esi
   158e8:	mov    %rcx,-0x30(%rbp)
   158ec:	movslq 0x48(%r13,%rdi,4),%rax
   158f1:	mov    %esi,0x48(%r13,%rdi,4)
   158f6:	mov    %rsi,%r15
   158f9:	sub    %eax,%r15d
   158fc:	test   %r15d,%r15d
   158ff:	js     15944 <encode_mcu_DC_first+0x1b4>
   15901:	mov    %r15,%rax
   15904:	jmpq   15805 <encode_mcu_DC_first+0x75>
   15909:	mov    0x70(%r13),%ecx
   1590d:	test   %ecx,%ecx
   1590f:	jne    15923 <encode_mcu_DC_first+0x193>
   15911:	mov    %edx,0x70(%r13)
   15915:	movslq 0x74(%r13),%rcx
   15919:	add    $0x1,%ecx
   1591c:	and    $0x7,%ecx
   1591f:	mov    %ecx,0x74(%r13)
   15923:	mov    0x70(%r13),%ecx
   15927:	add    $0xffffffff,%ecx
   1592a:	mov    %ecx,0x70(%r13)
   1592e:	mov    -0x28(%rbp),%r15
   15932:	mov    -0x20(%rbp),%r14
   15936:	mov    -0x18(%rbp),%r13
   1593a:	mov    -0x10(%rbp),%r12
   1593e:	mov    -0x8(%rbp),%rbx
   15942:	leaveq 
   15943:	retq   
   15944:	sub    %esi,%eax
   15946:	add    $0xffffffff,%r15d
   1594a:	jmpq   15805 <encode_mcu_DC_first+0x75>
   1594f:	nop

0000000000015950 <encode_mcu_AC_first>:
   15950:	push   %rbp
   15951:	mov    %rsp,%rbp
   15954:	sub    $0x60,%rsp
   15958:	mov    %rbx,-0x8(%rbp)
   1595c:	mov    %r12,-0x10(%rbp)
   15960:	mov    %r13,-0x18(%rbp)
   15964:	mov    %r14,-0x20(%rbp)
   15968:	mov    %r15,-0x28(%rbp)
   1596c:	mov    %rdi,-0x58(%rbp)
   15970:	movslq 0x1a0(%rdi),%rax
   15977:	mov    %rax,-0x60(%rbp)
   1597b:	mov    0x1a8(%rdi),%ecx
   15981:	mov    0x1f0(%rdi),%rbx
   15988:	mov    0x28(%rdi),%rdx
   1598c:	mov    (%rdx),%rdx
   1598f:	mov    %rdx,0x20(%rbx)
   15993:	mov    0x28(%rdi),%rdx
   15997:	mov    0x8(%rdx),%rdx
   1599b:	mov    %rdx,0x28(%rbx)
   1599f:	mov    0x118(%rdi),%edx
   159a5:	test   %edx,%edx
   159a7:	jne    159cd <encode_mcu_AC_first+0x7d>
   159a9:	mov    (%rsi),%rsi
   159ac:	mov    %rsi,-0x48(%rbp)
   159b0:	movslq 0x19c(%rdi),%r12
   159b7:	mov    0x5861a(%rip),%rdx        # 6dfd8 <jpeg_natural_order@@LIBJPEG_6.2+0x129f4>
   159be:	mov    %rdx,-0x50(%rbp)
   159c2:	mov    $0xf0,%r14d
   159c8:	xor    %r13d,%r13d
   159cb:	jmp    15a02 <encode_mcu_AC_first+0xb2>
   159cd:	mov    0x70(%rbx),%edx
   159d0:	test   %edx,%edx
   159d2:	jne    159a9 <encode_mcu_AC_first+0x59>
   159d4:	mov    %rcx,%r12
   159d7:	mov    %rax,%r13
   159da:	mov    %rdi,%r14
   159dd:	mov    %rsi,%r15
   159e0:	movslq 0x74(%rbx),%rsi
   159e4:	mov    %rbx,%rdi
   159e7:	callq  16700 <emit_restart>
   159ec:	mov    %r13,%rax
   159ef:	mov    %r12,%rcx
   159f2:	mov    %r15,%rsi
   159f5:	mov    %r14,%rdi
   159f8:	jmp    159a9 <encode_mcu_AC_first+0x59>
   159fa:	add    $0x1,%r13d
   159fe:	add    $0x1,%r12d
   15a02:	cmp    %eax,%r12d
   15a05:	jle    15a64 <encode_mcu_AC_first+0x114>
   15a07:	test   %r13d,%r13d
   15a0a:	jle    15a24 <encode_mcu_AC_first+0xd4>
   15a0c:	mov    0x5c(%rbx),%eax
   15a0f:	add    $0x1,%eax
   15a12:	mov    %eax,0x5c(%rbx)
   15a15:	cmp    $0x7fff,%eax
   15a1a:	jne    15a24 <encode_mcu_AC_first+0xd4>
   15a1c:	mov    %rbx,%rdi
   15a1f:	callq  16630 <emit_eobrun>
   15a24:	mov    0x20(%rbx),%rcx
   15a28:	mov    -0x58(%rbp),%rdx
   15a2c:	mov    0x28(%rdx),%rax
   15a30:	mov    %rcx,(%rax)
   15a33:	mov    0x28(%rbx),%rcx
   15a37:	mov    0x28(%rdx),%rax
   15a3b:	mov    %rcx,0x8(%rax)
   15a3f:	mov    0x118(%rdx),%ecx
   15a45:	test   %ecx,%ecx
   15a47:	jne    15a84 <encode_mcu_AC_first+0x134>
   15a49:	mov    $0x1,%eax
   15a4e:	mov    -0x28(%rbp),%r15
   15a52:	mov    -0x20(%rbp),%r14
   15a56:	mov    -0x18(%rbp),%r13
   15a5a:	mov    -0x10(%rbp),%r12
   15a5e:	mov    -0x8(%rbp),%rbx
   15a62:	leaveq 
   15a63:	retq   
   15a64:	movslq %r12d,%rdi
   15a67:	movslq (%rdx,%rdi,4),%rdi
   15a6b:	movswq (%rsi,%rdi,2),%r8
   15a70:	test   %r8w,%r8w
   15a74:	je     159fa <encode_mcu_AC_first+0xaa>
   15a76:	test   %r8w,%r8w
   15a7a:	js     15abf <encode_mcu_AC_first+0x16f>
   15a7c:	sar    %cl,%r8d
   15a7f:	mov    %r8,%r15
   15a82:	jmp    15acb <encode_mcu_AC_first+0x17b>
   15a84:	mov    0x70(%rbx),%eax
   15a87:	test   %eax,%eax
   15a89:	jne    15a9b <encode_mcu_AC_first+0x14b>
   15a8b:	mov    %ecx,0x70(%rbx)
   15a8e:	movslq 0x74(%rbx),%rax
   15a92:	add    $0x1,%eax
   15a95:	and    $0x7,%eax
   15a98:	mov    %eax,0x74(%rbx)
   15a9b:	mov    0x70(%rbx),%eax
   15a9e:	add    $0xffffffff,%eax
   15aa1:	mov    %eax,0x70(%rbx)
   15aa4:	mov    $0x1,%eax
   15aa9:	mov    -0x28(%rbp),%r15
   15aad:	mov    -0x20(%rbp),%r14
   15ab1:	mov    -0x18(%rbp),%r13
   15ab5:	mov    -0x10(%rbp),%r12
   15ab9:	mov    -0x8(%rbp),%rbx
   15abd:	leaveq 
   15abe:	retq   
   15abf:	neg    %r8d
   15ac2:	sar    %cl,%r8d
   15ac5:	mov    %r8,%r15
   15ac8:	not    %r15d
   15acb:	test   %r8d,%r8d
   15ace:	je     15ae1 <encode_mcu_AC_first+0x191>
   15ad0:	mov    0x5c(%rbx),%eax
   15ad3:	test   %eax,%eax
   15ad5:	jne    15aea <encode_mcu_AC_first+0x19a>
   15ad7:	mov    %rcx,-0x40(%rbp)
   15adb:	mov    %r8,-0x30(%rbp)
   15adf:	jmp    15b1a <encode_mcu_AC_first+0x1ca>
   15ae1:	add    $0x1,%r13d
   15ae5:	jmpq   159fe <encode_mcu_AC_first+0xae>
   15aea:	mov    %rbx,%rdi
   15aed:	mov    %r12,-0x38(%rbp)
   15af1:	mov    %rcx,-0x40(%rbp)
   15af5:	mov    %r8,%r12
   15af8:	callq  16630 <emit_eobrun>
   15afd:	mov    %r12,-0x30(%rbp)
   15b01:	mov    -0x38(%rbp),%r12
   15b05:	jmp    15b1a <encode_mcu_AC_first+0x1ca>
   15b07:	movslq 0x58(%rbx),%rsi
   15b0b:	mov    %rbx,%rdi
   15b0e:	mov    %r14,%rdx
   15b11:	callq  16570 <emit_symbol>
   15b16:	add    $0xfffffff0,%r13d
   15b1a:	cmp    $0xf,%r13d
   15b1e:	jg     15b07 <encode_mcu_AC_first+0x1b7>
   15b20:	mov    -0x30(%rbp),%rax
   15b24:	mov    -0x40(%rbp),%rcx
   15b28:	mov    $0x1,%r14d
   15b2e:	jmp    15b36 <encode_mcu_AC_first+0x1e6>
   15b30:	sar    %eax
   15b32:	add    $0x1,%r14d
   15b36:	mov    %rax,%rdx
   15b39:	and    $0xfffffffe,%edx
   15b3c:	test   %edx,%edx
   15b3e:	jne    15b30 <encode_mcu_AC_first+0x1e0>
   15b40:	cmp    $0xa,%r14d
   15b44:	jle    15b64 <encode_mcu_AC_first+0x214>
   15b46:	mov    -0x58(%rbp),%rdi
   15b4a:	mov    (%rdi),%rax
   15b4d:	movl   $0x6,0x28(%rax)
   15b54:	mov    (%rdi),%rax
   15b57:	mov    (%rax),%rax
   15b5a:	mov    %rcx,-0x40(%rbp)
   15b5e:	callq  *%rax
   15b60:	mov    -0x40(%rbp),%rcx
   15b64:	shl    $0x4,%r13d
   15b68:	lea    (%r14,%r13,1),%edx
   15b6c:	mov    %rcx,%r13
   15b6f:	movslq 0x58(%rbx),%rsi
   15b73:	mov    %rbx,%rdi
   15b76:	callq  16570 <emit_symbol>
   15b7b:	mov    %r14,%rdx
   15b7e:	mov    %r15,%rsi
   15b81:	mov    %r13,%r15
   15b84:	mov    %rbx,%rdi
   15b87:	callq  163e0 <emit_bits>
   15b8c:	mov    %r15,%rcx
   15b8f:	mov    $0xf0,%r14d
   15b95:	xor    %r13d,%r13d
   15b98:	mov    -0x48(%rbp),%rsi
   15b9c:	mov    -0x50(%rbp),%rdx
   15ba0:	mov    -0x60(%rbp),%rax
   15ba4:	jmpq   159fe <encode_mcu_AC_first+0xae>
   15ba9:	nopl   0x0(%rax)

0000000000015bb0 <encode_mcu_DC_refine>:
   15bb0:	push   %rbp
   15bb1:	mov    %rsp,%rbp
   15bb4:	sub    $0x30,%rsp
   15bb8:	mov    %rbx,-0x8(%rbp)
   15bbc:	mov    %r12,-0x10(%rbp)
   15bc0:	mov    %r13,-0x18(%rbp)
   15bc4:	mov    %r14,-0x20(%rbp)
   15bc8:	mov    %r15,-0x28(%rbp)
   15bcc:	mov    0x1a8(%rdi),%ebx
   15bd2:	mov    0x1f0(%rdi),%r14
   15bd9:	mov    0x28(%rdi),%rax
   15bdd:	mov    (%rax),%rax
   15be0:	mov    %rax,0x20(%r14)
   15be4:	mov    0x28(%rdi),%rax
   15be8:	mov    0x8(%rax),%rax
   15bec:	mov    %rax,0x28(%r14)
   15bf0:	mov    $0x1,%edx
   15bf5:	xor    %r12d,%r12d
   15bf8:	mov    0x118(%rdi),%eax
   15bfe:	test   %eax,%eax
   15c00:	jne    15c0a <encode_mcu_DC_refine+0x5a>
   15c02:	mov    %rdi,%r13
   15c05:	mov    %rsi,%r15
   15c08:	jmp    15c3e <encode_mcu_DC_refine+0x8e>
   15c0a:	mov    0x70(%r14),%eax
   15c0e:	test   %eax,%eax
   15c10:	je     15c85 <encode_mcu_DC_refine+0xd5>
   15c12:	mov    %rdi,%r13
   15c15:	mov    %rsi,%r15
   15c18:	jmp    15c3e <encode_mcu_DC_refine+0x8e>
   15c1a:	movslq %r12d,%rax
   15c1d:	mov    (%r15,%rax,8),%rax
   15c21:	movswq (%rax),%rsi
   15c25:	mov    %rbx,%rcx
   15c28:	sar    %cl,%esi
   15c2a:	mov    %rcx,%rbx
   15c2d:	mov    %r14,%rdi
   15c30:	callq  163e0 <emit_bits>
   15c35:	add    $0x1,%r12d
   15c39:	mov    $0x1,%edx
   15c3e:	movslq 0x170(%r13),%rax
   15c45:	cmp    %r12d,%eax
   15c48:	jg     15c1a <encode_mcu_DC_refine+0x6a>
   15c4a:	mov    0x20(%r14),%rcx
   15c4e:	mov    0x28(%r13),%rax
   15c52:	mov    %rcx,(%rax)
   15c55:	mov    0x28(%r14),%rcx
   15c59:	mov    0x28(%r13),%rax
   15c5d:	mov    %rcx,0x8(%rax)
   15c61:	mov    0x118(%r13),%ecx
   15c68:	test   %ecx,%ecx
   15c6a:	jne    15c9e <encode_mcu_DC_refine+0xee>
   15c6c:	mov    %rdx,%rax
   15c6f:	mov    -0x28(%rbp),%r15
   15c73:	mov    -0x20(%rbp),%r14
   15c77:	mov    -0x18(%rbp),%r13
   15c7b:	mov    -0x10(%rbp),%r12
   15c7f:	mov    -0x8(%rbp),%rbx
   15c83:	leaveq 
   15c84:	retq   
   15c85:	mov    %rdi,%r13
   15c88:	mov    %rsi,%r15
   15c8b:	movslq 0x74(%r14),%rsi
   15c8f:	mov    %r14,%rdi
   15c92:	callq  16700 <emit_restart>
   15c97:	mov    $0x1,%edx
   15c9c:	jmp    15c3e <encode_mcu_DC_refine+0x8e>
   15c9e:	mov    0x70(%r14),%eax
   15ca2:	test   %eax,%eax
   15ca4:	jne    15cb8 <encode_mcu_DC_refine+0x108>
   15ca6:	mov    %ecx,0x70(%r14)
   15caa:	movslq 0x74(%r14),%rax
   15cae:	add    $0x1,%eax
   15cb1:	and    $0x7,%eax
   15cb4:	mov    %eax,0x74(%r14)
   15cb8:	mov    0x70(%r14),%eax
   15cbc:	add    $0xffffffff,%eax
   15cbf:	mov    %eax,0x70(%r14)
   15cc3:	mov    %rdx,%rax
   15cc6:	mov    -0x28(%rbp),%r15
   15cca:	mov    -0x20(%rbp),%r14
   15cce:	mov    -0x18(%rbp),%r13
   15cd2:	mov    -0x10(%rbp),%r12
   15cd6:	mov    -0x8(%rbp),%rbx
   15cda:	leaveq 
   15cdb:	retq   
   15cdc:	nopl   0x0(%rax)

0000000000015ce0 <encode_mcu_AC_refine>:
   15ce0:	push   %rbp
   15ce1:	mov    %rsp,%rbp
   15ce4:	sub    $0x170,%rsp
   15ceb:	mov    %rbx,-0x8(%rbp)
   15cef:	mov    %r12,-0x10(%rbp)
   15cf3:	mov    %r13,-0x18(%rbp)
   15cf7:	mov    %r14,-0x20(%rbp)
   15cfb:	mov    %r15,-0x28(%rbp)
   15cff:	mov    %rdi,-0x30(%rbp)
   15d03:	movslq 0x1a0(%rdi),%rdx
   15d0a:	mov    %rdx,-0x68(%rbp)
   15d0e:	mov    0x1a8(%rdi),%ecx
   15d14:	mov    0x1f0(%rdi),%rbx
   15d1b:	mov    0x28(%rdi),%rax
   15d1f:	mov    (%rax),%rax
   15d22:	mov    %rax,0x20(%rbx)
   15d26:	mov    0x28(%rdi),%rax
   15d2a:	mov    0x8(%rax),%rax
   15d2e:	mov    %rax,0x28(%rbx)
   15d32:	mov    0x118(%rdi),%eax
   15d38:	test   %eax,%eax
   15d3a:	jne    15d5d <encode_mcu_AC_refine+0x7d>
   15d3c:	mov    (%rsi),%r8
   15d3f:	mov    %r8,-0x50(%rbp)
   15d43:	movslq 0x19c(%rdi),%r10
   15d4a:	mov    0x58287(%rip),%r9        # 6dfd8 <jpeg_natural_order@@LIBJPEG_6.2+0x129f4>
   15d51:	mov    %r9,-0x58(%rbp)
   15d55:	xor    %eax,%eax
   15d57:	mov    %rax,-0x48(%rbp)
   15d5b:	jmp    15db3 <encode_mcu_AC_refine+0xd3>
   15d5d:	mov    0x70(%rbx),%eax
   15d60:	test   %eax,%eax
   15d62:	jne    15d3c <encode_mcu_AC_refine+0x5c>
   15d64:	mov    %rcx,%r12
   15d67:	mov    %rdx,%r13
   15d6a:	mov    %rdi,%r14
   15d6d:	mov    %rsi,%r15
   15d70:	movslq 0x74(%rbx),%rsi
   15d74:	mov    %rbx,%rdi
   15d77:	callq  16700 <emit_restart>
   15d7c:	mov    %r12,%rcx
   15d7f:	mov    %r13,%rdx
   15d82:	mov    %r15,%rsi
   15d85:	mov    %r14,%rdi
   15d88:	jmp    15d3c <encode_mcu_AC_refine+0x5c>
   15d8a:	movslq %r10d,%r11
   15d8d:	movslq (%r9,%r11,4),%rsi
   15d91:	movswq (%r8,%rsi,2),%rsi
   15d96:	test   %si,%si
   15d99:	jns    15d9d <encode_mcu_AC_refine+0xbd>
   15d9b:	neg    %esi
   15d9d:	sar    %cl,%esi
   15d9f:	mov    %esi,-0x170(%rbp,%r11,4)
   15da7:	cmp    $0x1,%esi
   15daa:	jne    15daf <encode_mcu_AC_refine+0xcf>
   15dac:	mov    %r10,%rax
   15daf:	add    $0x1,%r10d
   15db3:	mov    %rax,-0x70(%rbp)
   15db7:	cmp    %edx,%r10d
   15dba:	jle    15d8a <encode_mcu_AC_refine+0xaa>
   15dbc:	movslq 0x19c(%rdi),%r13
   15dc3:	mov    0x60(%rbx),%r12d
   15dc7:	add    0x68(%rbx),%r12
   15dcb:	mov    $0x1,%ecx
   15dd0:	mov    %rcx,-0x40(%rbp)
   15dd4:	xor    %r15d,%r15d
   15dd7:	mov    %r15,%r14
   15dda:	jmp    15de4 <encode_mcu_AC_refine+0x104>
   15ddc:	add    $0x1,%r15d
   15de0:	add    $0x1,%r13d
   15de4:	cmp    %edx,%r13d
   15de7:	jle    15e5c <encode_mcu_AC_refine+0x17c>
   15de9:	test   %r15d,%r15d
   15dec:	jg     15df3 <encode_mcu_AC_refine+0x113>
   15dee:	test   %r14d,%r14d
   15df1:	je     15e1c <encode_mcu_AC_refine+0x13c>
   15df3:	mov    0x5c(%rbx),%eax
   15df6:	add    $0x1,%eax
   15df9:	mov    %eax,0x5c(%rbx)
   15dfc:	add    0x60(%rbx),%r14d
   15e00:	mov    %r14d,0x60(%rbx)
   15e04:	cmp    $0x7fff,%eax
   15e09:	je     15e14 <encode_mcu_AC_refine+0x134>
   15e0b:	cmp    $0x3a9,%r14d
   15e12:	jbe    15e1c <encode_mcu_AC_refine+0x13c>
   15e14:	mov    %rbx,%rdi
   15e17:	callq  16630 <emit_eobrun>
   15e1c:	mov    0x20(%rbx),%rcx
   15e20:	mov    -0x30(%rbp),%rdx
   15e24:	mov    0x28(%rdx),%rax
   15e28:	mov    %rcx,(%rax)
   15e2b:	mov    0x28(%rbx),%rcx
   15e2f:	mov    0x28(%rdx),%rax
   15e33:	mov    %rcx,0x8(%rax)
   15e37:	mov    0x118(%rdx),%ecx
   15e3d:	test   %ecx,%ecx
   15e3f:	jne    15e79 <encode_mcu_AC_refine+0x199>
   15e41:	mov    $0x1,%eax
   15e46:	mov    -0x28(%rbp),%r15
   15e4a:	mov    -0x20(%rbp),%r14
   15e4e:	mov    -0x18(%rbp),%r13
   15e52:	mov    -0x10(%rbp),%r12
   15e56:	mov    -0x8(%rbp),%rbx
   15e5a:	leaveq 
   15e5b:	retq   
   15e5c:	movslq %r13d,%rsi
   15e5f:	movslq -0x170(%rbp,%rsi,4),%rcx
   15e67:	test   %ecx,%ecx
   15e69:	je     15ddc <encode_mcu_AC_refine+0xfc>
   15e6f:	mov    %rcx,-0x38(%rbp)
   15e73:	mov    %rsi,-0x60(%rbp)
   15e77:	jmp    15eef <encode_mcu_AC_refine+0x20f>
   15e79:	mov    0x70(%rbx),%eax
   15e7c:	test   %eax,%eax
   15e7e:	jne    15e90 <encode_mcu_AC_refine+0x1b0>
   15e80:	mov    %ecx,0x70(%rbx)
   15e83:	movslq 0x74(%rbx),%rax
   15e87:	add    $0x1,%eax
   15e8a:	and    $0x7,%eax
   15e8d:	mov    %eax,0x74(%rbx)
   15e90:	mov    0x70(%rbx),%eax
   15e93:	add    $0xffffffff,%eax
   15e96:	mov    %eax,0x70(%rbx)
   15e99:	mov    $0x1,%eax
   15e9e:	mov    -0x28(%rbp),%r15
   15ea2:	mov    -0x20(%rbp),%r14
   15ea6:	mov    -0x18(%rbp),%r13
   15eaa:	mov    -0x10(%rbp),%r12
   15eae:	mov    -0x8(%rbp),%rbx
   15eb2:	leaveq 
   15eb3:	retq   
   15eb4:	cmp    %eax,%r13d
   15eb7:	jg     15ef5 <encode_mcu_AC_refine+0x215>
   15eb9:	mov    %rbx,%rdi
   15ebc:	callq  16630 <emit_eobrun>
   15ec1:	movslq 0x58(%rbx),%rsi
   15ec5:	mov    %rbx,%rdi
   15ec8:	mov    $0xf0,%edx
   15ecd:	callq  16570 <emit_symbol>
   15ed2:	mov    %r14,%rdx
   15ed5:	mov    %r12,%rsi
   15ed8:	mov    %rbx,%rdi
   15edb:	callq  165c0 <emit_buffered_bits>
   15ee0:	mov    0x68(%rbx),%r12
   15ee4:	add    $0xfffffff0,%r15d
   15ee8:	xor    %r14d,%r14d
   15eeb:	mov    -0x70(%rbp),%rax
   15eef:	cmp    $0xf,%r15d
   15ef3:	jg     15eb4 <encode_mcu_AC_refine+0x1d4>
   15ef5:	mov    -0x38(%rbp),%rcx
   15ef9:	cmp    $0x1,%ecx
   15efc:	jg     15f3c <encode_mcu_AC_refine+0x25c>
   15efe:	mov    %rbx,%rdi
   15f01:	callq  16630 <emit_eobrun>
   15f06:	movslq 0x58(%rbx),%rsi
   15f0a:	shl    $0x4,%r15d
   15f0e:	lea    0x1(%r15),%edx
   15f12:	mov    %rbx,%rdi
   15f15:	callq  16570 <emit_symbol>
   15f1a:	mov    -0x60(%rbp),%rcx
   15f1e:	mov    -0x58(%rbp),%rax
   15f22:	movslq (%rax,%rcx,4),%rax
   15f26:	mov    -0x50(%rbp),%rcx
   15f2a:	movswq (%rcx,%rax,2),%rax
   15f2f:	test   %ax,%ax
   15f32:	js     15f53 <encode_mcu_AC_refine+0x273>
   15f34:	pushq  -0x40(%rbp)
   15f37:	popq   -0x60(%rbp)
   15f3a:	jmp    15f59 <encode_mcu_AC_refine+0x279>
   15f3c:	and    $0x1,%cl
   15f3f:	mov    %r14d,%edx
   15f42:	mov    %cl,(%r12,%rdx,1)
   15f46:	add    $0x1,%r14d
   15f4a:	mov    -0x68(%rbp),%rdx
   15f4e:	jmpq   15de0 <encode_mcu_AC_refine+0x100>
   15f53:	pushq  -0x48(%rbp)
   15f56:	popq   -0x60(%rbp)
   15f59:	mov    %rbx,%rdi
   15f5c:	mov    $0x1,%edx
   15f61:	mov    -0x60(%rbp),%rsi
   15f65:	callq  163e0 <emit_bits>
   15f6a:	mov    %r14,%rdx
   15f6d:	mov    %r12,%rsi
   15f70:	mov    %rbx,%rdi
   15f73:	callq  165c0 <emit_buffered_bits>
   15f78:	mov    0x68(%rbx),%r12
   15f7c:	mov    -0x68(%rbp),%rdx
   15f80:	xor    %r15d,%r15d
   15f83:	mov    -0x70(%rbp),%rax
   15f87:	mov    %r15,%r14
   15f8a:	jmpq   15de0 <encode_mcu_AC_refine+0x100>
   15f8f:	nop

0000000000015f90 <finish_pass_phuff>:
   15f90:	push   %rbp
   15f91:	mov    %rsp,%rbp
   15f94:	sub    $0x10,%rsp
   15f98:	mov    %r14,-0x8(%rbp)
   15f9c:	mov    %r15,-0x10(%rbp)
   15fa0:	mov    0x1f0(%rdi),%r15
   15fa7:	mov    0x28(%rdi),%rax
   15fab:	mov    (%rax),%rax
   15fae:	mov    %rax,0x20(%r15)
   15fb2:	mov    0x28(%rdi),%rax
   15fb6:	mov    0x8(%rax),%rax
   15fba:	mov    %rax,0x28(%r15)
   15fbe:	mov    %rdi,%r14
   15fc1:	mov    %r15,%rdi
   15fc4:	callq  16630 <emit_eobrun>
   15fc9:	mov    %r15,%rdi
   15fcc:	callq  16530 <flush_bits>
   15fd1:	mov    0x20(%r15),%rcx
   15fd5:	mov    0x28(%r14),%rax
   15fd9:	mov    %rcx,(%rax)
   15fdc:	mov    0x28(%r15),%rcx
   15fe0:	mov    0x28(%r14),%rax
   15fe4:	mov    %rcx,0x8(%rax)
   15fe8:	mov    -0x10(%rbp),%r15
   15fec:	mov    -0x8(%rbp),%r14
   15ff0:	leaveq 
   15ff1:	retq   
   15ff2:	data16 nopw %cs:0x0(%rax,%rax,1)
   15ffd:	nopl   (%rax)

0000000000016000 <finish_pass_gather_phuff>:
   16000:	push   %rbp
   16001:	mov    %rsp,%rbp
   16004:	sub    $0x40,%rsp
   16008:	mov    %r14,-0x20(%rbp)
   1600c:	mov    %r15,-0x28(%rbp)
   16010:	mov    %r12,-0x10(%rbp)
   16014:	mov    %r13,-0x18(%rbp)
   16018:	mov    %rbx,-0x8(%rbp)
   1601c:	mov    %rdi,%rbx
   1601f:	mov    0x1f0(%rbx),%r12
   16026:	mov    %r12,%rdi
   16029:	callq  16630 <emit_eobrun>
   1602e:	xor    %r13d,%r13d
   16031:	movslq 0x19c(%rbx),%rax
   16038:	test   %eax,%eax
   1603a:	je     16041 <finish_pass_gather_phuff+0x41>
   1603c:	mov    %r13,%r14
   1603f:	jmp    16047 <finish_pass_gather_phuff+0x47>
   16041:	mov    $0x1,%r14d
   16047:	mov    %r14,-0x30(%rbp)
   1604b:	lea    -0x40(%rbp),%rdi
   1604f:	mov    $0x10,%edx
   16054:	mov    %r13,%rsi
   16057:	callq  41e0 <memset@plt>
   1605c:	jmp    160a3 <finish_pass_gather_phuff+0xa3>
   1605e:	lea    0x80(%rbx,%r15,8),%rax
   16066:	mov    (%rax),%rcx
   16069:	test   %rcx,%rcx
   1606c:	jne    16083 <finish_pass_gather_phuff+0x83>
   1606e:	mov    %rax,%r14
   16071:	mov    %rbx,%rdi
   16074:	callq  44a0 <jpeg_alloc_huff_table@plt>
   16079:	mov    %rax,(%r14)
   1607c:	mov    %r14,%rax
   1607f:	mov    -0x30(%rbp),%r14
   16083:	mov    0x98(%r12,%r15,8),%rdx
   1608b:	mov    (%rax),%rsi
   1608e:	mov    %rbx,%rdi
   16091:	callq  40f0 <jpeg_gen_optimal_table@plt>
   16096:	movl   $0x1,-0x40(%rbp,%r15,4)
   1609f:	add    $0x1,%r13d
   160a3:	movslq 0x144(%rbx),%rax
   160aa:	cmp    %r13d,%eax
   160ad:	jg     160c5 <finish_pass_gather_phuff+0xc5>
   160af:	mov    -0x8(%rbp),%rbx
   160b3:	mov    -0x18(%rbp),%r13
   160b7:	mov    -0x10(%rbp),%r12
   160bb:	mov    -0x28(%rbp),%r15
   160bf:	mov    -0x20(%rbp),%r14
   160c3:	leaveq 
   160c4:	retq   
   160c5:	test   %r14d,%r14d
   160c8:	movslq %r13d,%rax
   160cb:	mov    0x148(%rbx,%rax,8),%rcx
   160d3:	jg     160fb <finish_pass_gather_phuff+0xfb>
   160d5:	movslq 0x18(%rcx),%rax
   160d9:	movslq %eax,%r15
   160dc:	movslq -0x40(%rbp,%r15,4),%rax
   160e1:	test   %eax,%eax
   160e3:	jne    1609f <finish_pass_gather_phuff+0x9f>
   160e5:	test   %r14d,%r14d
   160e8:	jg     1605e <finish_pass_gather_phuff+0x5e>
   160ee:	lea    0xa0(%rbx,%r15,8),%rax
   160f6:	jmpq   16066 <finish_pass_gather_phuff+0x66>
   160fb:	movslq 0x1a4(%rbx),%rax
   16102:	test   %eax,%eax
   16104:	jne    1609f <finish_pass_gather_phuff+0x9f>
   16106:	movslq 0x14(%rcx),%rax
   1610a:	jmp    160d9 <finish_pass_gather_phuff+0xd9>
   1610c:	nopl   0x0(%rax)

0000000000016110 <start_pass_phuff>:
   16110:	push   %rbp
   16111:	mov    %rsp,%rbp
   16114:	sub    $0x30,%rsp
   16118:	mov    %r15,-0x28(%rbp)
   1611c:	mov    %rbx,-0x8(%rbp)
   16120:	mov    %r12,-0x10(%rbp)
   16124:	mov    %r13,-0x18(%rbp)
   16128:	mov    %r14,-0x20(%rbp)
   1612c:	mov    %rsi,-0x30(%rbp)
   16130:	mov    0x1f0(%rdi),%r12
   16137:	mov    %rdi,0x40(%r12)
   1613c:	mov    %esi,0x18(%r12)
   16141:	mov    $0x1,%eax
   16146:	xor    %r14d,%r14d
   16149:	movslq 0x19c(%rdi),%rcx
   16150:	test   %ecx,%ecx
   16152:	je     16159 <start_pass_phuff+0x49>
   16154:	mov    %r14,%r13
   16157:	jmp    1615c <start_pass_phuff+0x4c>
   16159:	mov    %rax,%r13
   1615c:	movslq 0x1a4(%rdi),%rcx
   16163:	test   %ecx,%ecx
   16165:	je     1618d <start_pass_phuff+0x7d>
   16167:	test   %r13d,%r13d
   1616a:	jg     161a9 <start_pass_phuff+0x99>
   1616c:	lea    -0x493(%rip),%rcx        # 15ce0 <encode_mcu_AC_refine>
   16173:	mov    %rcx,0x8(%r12)
   16178:	mov    0x68(%r12),%rcx
   1617d:	test   %rcx,%rcx
   16180:	je     161c0 <start_pass_phuff+0xb0>
   16182:	mov    %rdi,%rbx
   16185:	mov    %rsi,%r15
   16188:	mov    %r14,%rsi
   1618b:	jmp    161fb <start_pass_phuff+0xeb>
   1618d:	test   %r13d,%r13d
   16190:	jg     161e6 <start_pass_phuff+0xd6>
   16192:	lea    -0x849(%rip),%rcx        # 15950 <encode_mcu_AC_first>
   16199:	mov    %rcx,0x8(%r12)
   1619e:	mov    %rdi,%rbx
   161a1:	mov    %rsi,%r15
   161a4:	mov    %r14,%rsi
   161a7:	jmp    161fb <start_pass_phuff+0xeb>
   161a9:	lea    -0x600(%rip),%rcx        # 15bb0 <encode_mcu_DC_refine>
   161b0:	mov    %rcx,0x8(%r12)
   161b5:	mov    %rdi,%rbx
   161b8:	mov    %rsi,%r15
   161bb:	mov    %r14,%rsi
   161be:	jmp    161fb <start_pass_phuff+0xeb>
   161c0:	mov    0x8(%rdi),%rcx
   161c4:	mov    (%rcx),%rcx
   161c7:	mov    %rsi,%r15
   161ca:	mov    %rax,%rsi
   161cd:	mov    $0x3e8,%edx
   161d2:	mov    %rdi,%rbx
   161d5:	callq  *%rcx
   161d7:	mov    %rax,0x68(%r12)
   161dc:	mov    %r14,%rsi
   161df:	mov    $0x1,%eax
   161e4:	jmp    161fb <start_pass_phuff+0xeb>
   161e6:	lea    -0xa5d(%rip),%rcx        # 15790 <encode_mcu_DC_first>
   161ed:	mov    %rcx,0x8(%r12)
   161f2:	mov    %rdi,%rbx
   161f5:	mov    %rsi,%r15
   161f8:	mov    %r14,%rsi
   161fb:	mov    $0x808,%edx
   16200:	test   %r15d,%r15d
   16203:	jne    16219 <start_pass_phuff+0x109>
   16205:	lea    -0x27c(%rip),%rcx        # 15f90 <finish_pass_phuff>
   1620c:	mov    %rcx,0x10(%r12)
   16211:	mov    %rsi,%r14
   16214:	jmpq   162bd <start_pass_phuff+0x1ad>
   16219:	lea    -0x220(%rip),%rcx        # 16000 <finish_pass_gather_phuff>
   16220:	mov    %rcx,0x10(%r12)
   16225:	mov    %rsi,%r14
   16228:	jmpq   162bd <start_pass_phuff+0x1ad>
   1622d:	test   %r8d,%r8d
   16230:	js     16238 <start_pass_phuff+0x128>
   16232:	cmp    $0x3,%r8d
   16236:	jle    1626a <start_pass_phuff+0x15a>
   16238:	mov    (%rbx),%rax
   1623b:	movl   $0x32,0x28(%rax)
   16242:	mov    (%rbx),%rax
   16245:	mov    %r8d,0x2c(%rax)
   16249:	mov    (%rbx),%rax
   1624c:	mov    (%rax),%rax
   1624f:	mov    %rcx,%r15
   16252:	mov    %rbx,%rdi
   16255:	callq  *%rax
   16257:	mov    %r15,%rcx
   1625a:	mov    -0x30(%rbp),%r15
   1625e:	mov    $0x808,%edx
   16263:	xor    %esi,%esi
   16265:	mov    $0x1,%eax
   1626a:	mov    0x98(%r12,%rcx,8),%rdi
   16272:	test   %rdi,%rdi
   16275:	jne    162a0 <start_pass_phuff+0x190>
   16277:	mov    0x8(%rbx),%rsi
   1627b:	mov    (%rsi),%r8
   1627e:	mov    %rax,%rsi
   16281:	mov    %rcx,%r15
   16284:	mov    %rbx,%rdi
   16287:	callq  *%r8
   1628a:	mov    %rax,0x98(%r12,%r15,8)
   16292:	mov    %r15,%rcx
   16295:	mov    -0x30(%rbp),%r15
   16299:	mov    $0x808,%edx
   1629e:	xor    %esi,%esi
   162a0:	mov    0x98(%r12,%rcx,8),%rdi
   162a8:	callq  41e0 <memset@plt>
   162ad:	mov    $0x808,%edx
   162b2:	xor    %esi,%esi
   162b4:	mov    $0x1,%eax
   162b9:	add    $0x1,%r14d
   162bd:	movslq 0x144(%rbx),%rcx
   162c4:	cmp    %r14d,%ecx
   162c7:	jg     16317 <start_pass_phuff+0x207>
   162c9:	movl   $0x0,0x5c(%r12)
   162d2:	movl   $0x0,0x60(%r12)
   162db:	movq   $0x0,0x30(%r12)
   162e4:	movl   $0x0,0x38(%r12)
   162ed:	mov    0x118(%rbx),%eax
   162f3:	mov    %eax,0x70(%r12)
   162f8:	movl   $0x0,0x74(%r12)
   16301:	mov    -0x20(%rbp),%r14
   16305:	mov    -0x18(%rbp),%r13
   16309:	mov    -0x10(%rbp),%r12
   1630d:	mov    -0x8(%rbp),%rbx
   16311:	mov    -0x28(%rbp),%r15
   16315:	leaveq 
   16316:	retq   
   16317:	test   %r13d,%r13d
   1631a:	movslq %r14d,%rcx
   1631d:	mov    0x148(%rbx,%rcx,8),%rdi
   16325:	movl   $0x0,0x48(%r12,%rcx,4)
   1632e:	jg     16369 <start_pass_phuff+0x259>
   16330:	movslq 0x18(%rdi),%r8
   16334:	mov    %r8d,0x58(%r12)
   16339:	test   %r15d,%r15d
   1633c:	movslq %r8d,%rcx
   1633f:	jne    1622d <start_pass_phuff+0x11d>
   16345:	lea    0x78(%r12,%rcx,8),%rcx
   1634a:	mov    %r8,%rdx
   1634d:	mov    %rbx,%rdi
   16350:	mov    %r13,%rsi
   16353:	callq  40d0 <jpeg_make_c_derived_tbl@plt>
   16358:	mov    $0x808,%edx
   1635d:	xor    %esi,%esi
   1635f:	mov    $0x1,%eax
   16364:	jmpq   162b9 <start_pass_phuff+0x1a9>
   16369:	movslq 0x1a4(%rbx),%rcx
   16370:	test   %ecx,%ecx
   16372:	jne    162b9 <start_pass_phuff+0x1a9>
   16378:	movslq 0x14(%rdi),%r8
   1637c:	jmp    16339 <start_pass_phuff+0x229>
   1637e:	xchg   %ax,%ax

0000000000016380 <dump_buffer>:
   16380:	push   %rbp
   16381:	mov    %rsp,%rbp
   16384:	sub    $0x10,%rsp
   16388:	mov    %r14,-0x8(%rbp)
   1638c:	mov    %r15,-0x10(%rbp)
   16390:	mov    %rdi,%r15
   16393:	mov    0x40(%r15),%rdi
   16397:	mov    0x28(%rdi),%r14
   1639b:	mov    0x18(%r14),%rax
   1639f:	callq  *%rax
   163a1:	test   %eax,%eax
   163a3:	jne    163bf <dump_buffer+0x3f>
   163a5:	mov    0x40(%r15),%rax
   163a9:	mov    (%rax),%rax
   163ac:	movl   $0x18,0x28(%rax)
   163b3:	mov    0x40(%r15),%rdi
   163b7:	mov    (%rdi),%rax
   163ba:	mov    (%rax),%rax
   163bd:	callq  *%rax
   163bf:	mov    (%r14),%rax
   163c2:	mov    %rax,0x20(%r15)
   163c6:	mov    0x8(%r14),%rax
   163ca:	mov    %rax,0x28(%r15)
   163ce:	mov    -0x10(%rbp),%r15
   163d2:	mov    -0x8(%rbp),%r14
   163d6:	leaveq 
   163d7:	retq   
   163d8:	nopl   0x0(%rax,%rax,1)

00000000000163e0 <emit_bits>:
   163e0:	push   %rbp
   163e1:	mov    %rsp,%rbp
   163e4:	sub    $0x20,%rsp
   163e8:	mov    %r15,-0x8(%rbp)
   163ec:	movslq 0x38(%rdi),%r8
   163f0:	test   %edx,%edx
   163f2:	je     16402 <emit_bits+0x22>
   163f4:	mov    %r14,%rax
   163f7:	mov    %r12,%r14
   163fa:	mov    %rdi,%r12
   163fd:	mov    %rdx,%rcx
   16400:	jmp    16447 <emit_bits+0x67>
   16402:	mov    0x40(%rdi),%rax
   16406:	mov    (%rax),%rax
   16409:	movl   $0x28,0x28(%rax)
   16410:	mov    0x40(%rdi),%rcx
   16414:	mov    (%rcx),%rax
   16417:	mov    (%rax),%rax
   1641a:	mov    %rdx,-0x18(%rbp)
   1641e:	mov    %rsi,-0x10(%rbp)
   16422:	mov    %r8,-0x20(%rbp)
   16426:	mov    %r14,%r15
   16429:	mov    %r12,%r14
   1642c:	mov    %rdi,%r12
   1642f:	mov    %rcx,%rdi
   16432:	callq  *%rax
   16434:	mov    %r15,%rax
   16437:	mov    -0x20(%rbp),%r8
   1643b:	mov    -0x10(%rbp),%rsi
   1643f:	mov    -0x18(%rbp),%rcx
   16443:	mov    -0x8(%rbp),%r15
   16447:	movslq 0x18(%r12),%rdx
   1644c:	test   %edx,%edx
   1644e:	je     16458 <emit_bits+0x78>
   16450:	mov    %r14,%r12
   16453:	mov    %rax,%r14
   16456:	leaveq 
   16457:	retq   
   16458:	mov    %r13,%rdi
   1645b:	mov    $0x1,%edx
   16460:	shl    %cl,%rdx
   16463:	lea    -0x1(%rdx),%r15
   16467:	mov    %esi,%edx
   16469:	and    %rdx,%r15
   1646c:	lea    (%rcx,%r8,1),%r13d
   16470:	mov    $0x18,%ecx
   16475:	sub    %r13d,%ecx
   16478:	shl    %cl,%r15
   1647b:	or     0x30(%r12),%r15
   16480:	mov    %r14,-0x10(%rbp)
   16484:	mov    %rdi,-0x18(%rbp)
   16488:	mov    %rax,-0x20(%rbp)
   1648c:	jmp    16505 <emit_bits+0x125>
   1648e:	mov    0x20(%r12),%rcx
   16493:	lea    0x1(%rcx),%rax
   16497:	mov    %rax,0x20(%r12)
   1649c:	mov    %r15,%r14
   1649f:	and    $0xff0000,%r14
   164a6:	shr    $0x10,%r14
   164aa:	mov    %r14b,(%rcx)
   164ad:	mov    0x28(%r12),%rax
   164b2:	add    $0xffffffffffffffff,%rax
   164b6:	mov    %rax,0x28(%r12)
   164bb:	test   %rax,%rax
   164be:	jne    164c8 <emit_bits+0xe8>
   164c0:	mov    %r12,%rdi
   164c3:	callq  16380 <dump_buffer>
   164c8:	cmp    $0xff,%r14d
   164cf:	jne    164fd <emit_bits+0x11d>
   164d1:	mov    0x20(%r12),%rcx
   164d6:	lea    0x1(%rcx),%rax
   164da:	mov    %rax,0x20(%r12)
   164df:	movb   $0x0,(%rcx)
   164e2:	mov    0x28(%r12),%rax
   164e7:	add    $0xffffffffffffffff,%rax
   164eb:	mov    %rax,0x28(%r12)
   164f0:	test   %rax,%rax
   164f3:	jne    164fd <emit_bits+0x11d>
   164f5:	mov    %r12,%rdi
   164f8:	callq  16380 <dump_buffer>
   164fd:	shl    $0x8,%r15
   16501:	add    $0xfffffff8,%r13d
   16505:	cmp    $0x7,%r13d
   16509:	jg     1648e <emit_bits+0xae>
   1650b:	mov    %r15,0x30(%r12)
   16510:	mov    %r13d,0x38(%r12)
   16515:	mov    -0x20(%rbp),%r14
   16519:	mov    -0x18(%rbp),%r13
   1651d:	mov    -0x10(%rbp),%r12
   16521:	mov    -0x8(%rbp),%r15
   16525:	leaveq 
   16526:	retq   
   16527:	nopw   0x0(%rax,%rax,1)

0000000000016530 <flush_bits>:
   16530:	push   %rbp
   16531:	mov    %rsp,%rbp
   16534:	sub    $0x10,%rsp
   16538:	mov    %r15,-0x8(%rbp)
   1653c:	mov    $0x7f,%esi
   16541:	mov    $0x7,%edx
   16546:	mov    %rdi,%r15
   16549:	callq  163e0 <emit_bits>
   1654e:	movq   $0x0,0x30(%r15)
   16556:	movl   $0x0,0x38(%r15)
   1655e:	mov    -0x8(%rbp),%r15
   16562:	leaveq 
   16563:	retq   
   16564:	data16 nopw %cs:0x0(%rax,%rax,1)
   1656f:	nop

0000000000016570 <emit_symbol>:
   16570:	push   %rbp
   16571:	mov    %rsp,%rbp
   16574:	movslq 0x18(%rdi),%rax
   16578:	test   %eax,%eax
   1657a:	jne    1659a <emit_symbol+0x2a>
   1657c:	movslq %esi,%rax
   1657f:	mov    0x78(%rdi,%rax,8),%rcx
   16584:	movslq %edx,%rax
   16587:	mov    (%rcx,%rax,4),%esi
   1658a:	movsbq 0x400(%rcx,%rax,1),%rdx
   16593:	callq  163e0 <emit_bits>
   16598:	leaveq 
   16599:	retq   
   1659a:	movslq %edx,%rax
   1659d:	shl    $0x3,%rax
   165a1:	movslq %esi,%rcx
   165a4:	add    0x98(%rdi,%rcx,8),%rax
   165ac:	mov    (%rax),%rcx
   165af:	add    $0x1,%rcx
   165b3:	mov    %rcx,(%rax)
   165b6:	leaveq 
   165b7:	retq   
   165b8:	nopl   0x0(%rax,%rax,1)

00000000000165c0 <emit_buffered_bits>:
   165c0:	push   %rbp
   165c1:	mov    %rsp,%rbp
   165c4:	sub    $0x20,%rsp
   165c8:	movslq 0x18(%rdi),%rax
   165cc:	test   %eax,%eax
   165ce:	jne    165f3 <emit_buffered_bits+0x33>
   165d0:	mov    $0x1,%eax
   165d5:	mov    %r12,-0x8(%rbp)
   165d9:	mov    %r13,-0x10(%rbp)
   165dd:	mov    %r14,-0x18(%rbp)
   165e1:	mov    %r15,-0x20(%rbp)
   165e5:	mov    %rdx,%r12
   165e8:	mov    %rsi,%r13
   165eb:	mov    %rdi,%r14
   165ee:	mov    %rax,%r15
   165f1:	jmp    1660d <emit_buffered_bits+0x4d>
   165f3:	leaveq 
   165f4:	retq   
   165f5:	movsbq 0x0(%r13),%rsi
   165fa:	mov    %r14,%rdi
   165fd:	mov    %r15,%rdx
   16600:	callq  163e0 <emit_bits>
   16605:	add    $0xffffffff,%r12d
   16609:	add    $0x1,%r13
   1660d:	test   %r12d,%r12d
   16610:	jne    165f5 <emit_buffered_bits+0x35>
   16612:	mov    -0x20(%rbp),%r15
   16616:	mov    -0x18(%rbp),%r14
   1661a:	mov    -0x10(%rbp),%r13
   1661e:	mov    -0x8(%rbp),%r12
   16622:	leaveq 
   16623:	retq   
   16624:	data16 nopw %cs:0x0(%rax,%rax,1)
   1662f:	nop

0000000000016630 <emit_eobrun>:
   16630:	push   %rbp
   16631:	mov    %rsp,%rbp
   16634:	sub    $0x10,%rsp
   16638:	mov    0x5c(%rdi),%eax
   1663b:	test   %eax,%eax
   1663d:	jne    16641 <emit_eobrun+0x11>
   1663f:	leaveq 
   16640:	retq   
   16641:	xor    %edx,%edx
   16643:	jmp    1664a <emit_eobrun+0x1a>
   16645:	sar    %eax
   16647:	add    $0x1,%edx
   1664a:	mov    %rax,%rcx
   1664d:	and    $0xfffffffe,%ecx
   16650:	test   %ecx,%ecx
   16652:	jne    16645 <emit_eobrun+0x15>
   16654:	cmp    $0xe,%edx
   16657:	jg     16661 <emit_eobrun+0x31>
   16659:	mov    %r14,%rax
   1665c:	mov    %rdi,%r14
   1665f:	jmp    16697 <emit_eobrun+0x67>
   16661:	mov    0x40(%rdi),%rax
   16665:	mov    (%rax),%rax
   16668:	movl   $0x28,0x28(%rax)
   1666f:	mov    0x40(%rdi),%rcx
   16673:	mov    (%rcx),%rax
   16676:	mov    (%rax),%rax
   16679:	mov    %r14,-0x8(%rbp)
   1667d:	mov    %r15,-0x10(%rbp)
   16681:	mov    %rdi,%r14
   16684:	mov    %rcx,%rdi
   16687:	mov    %rdx,%r15
   1668a:	callq  *%rax
   1668c:	mov    %r15,%rdx
   1668f:	mov    -0x10(%rbp),%r15
   16693:	mov    -0x8(%rbp),%rax
   16697:	movslq 0x58(%r14),%rsi
   1669b:	mov    %rdx,%rcx
   1669e:	shl    $0x4,%ecx
   166a1:	mov    %r14,%rdi
   166a4:	mov    %rax,-0x8(%rbp)
   166a8:	mov    %r15,-0x10(%rbp)
   166ac:	mov    %rdx,%r15
   166af:	mov    %rcx,%rdx
   166b2:	callq  16570 <emit_symbol>
   166b7:	test   %r15d,%r15d
   166ba:	je     166cb <emit_eobrun+0x9b>
   166bc:	mov    %r15,%rdx
   166bf:	mov    0x5c(%r14),%esi
   166c3:	mov    %r14,%rdi
   166c6:	callq  163e0 <emit_bits>
   166cb:	movl   $0x0,0x5c(%r14)
   166d3:	mov    0x68(%r14),%rsi
   166d7:	mov    0x60(%r14),%edx
   166db:	mov    %r14,%rdi
   166de:	callq  165c0 <emit_buffered_bits>
   166e3:	movl   $0x0,0x60(%r14)
   166eb:	mov    -0x10(%rbp),%r15
   166ef:	mov    -0x8(%rbp),%r14
   166f3:	leaveq 
   166f4:	retq   
   166f5:	data16 nopw %cs:0x0(%rax,%rax,1)

0000000000016700 <emit_restart>:
   16700:	push   %rbp
   16701:	mov    %rsp,%rbp
   16704:	sub    $0x10,%rsp
   16708:	mov    %r15,-0x8(%rbp)
   1670c:	mov    %rsi,-0x10(%rbp)
   16710:	mov    %rdi,%r15
   16713:	callq  16630 <emit_eobrun>
   16718:	movslq 0x18(%r15),%rax
   1671c:	test   %eax,%eax
   1671e:	je     16736 <emit_restart+0x36>
   16720:	mov    0x40(%r15),%rax
   16724:	movslq 0x19c(%rax),%rax
   1672b:	test   %eax,%eax
   1672d:	jne    16798 <emit_restart+0x98>
   1672f:	xor    %eax,%eax
   16731:	jmpq   167bd <emit_restart+0xbd>
   16736:	mov    %r15,%rdi
   16739:	callq  16530 <flush_bits>
   1673e:	mov    0x20(%r15),%rcx
   16742:	lea    0x1(%rcx),%rax
   16746:	mov    %rax,0x20(%r15)
   1674a:	movb   $0xff,(%rcx)
   1674d:	mov    0x28(%r15),%rax
   16751:	add    $0xffffffffffffffff,%rax
   16755:	mov    %rax,0x28(%r15)
   16759:	test   %rax,%rax
   1675c:	jne    16766 <emit_restart+0x66>
   1675e:	mov    %r15,%rdi
   16761:	callq  16380 <dump_buffer>
   16766:	mov    0x20(%r15),%rcx
   1676a:	lea    0x1(%rcx),%rax
   1676e:	mov    %rax,0x20(%r15)
   16772:	mov    -0x10(%rbp),%rax
   16776:	add    $0xd0,%eax
   1677b:	mov    %al,(%rcx)
   1677d:	mov    0x28(%r15),%rax
   16781:	add    $0xffffffffffffffff,%rax
   16785:	mov    %rax,0x28(%r15)
   16789:	test   %rax,%rax
   1678c:	jne    16720 <emit_restart+0x20>
   1678e:	mov    %r15,%rdi
   16791:	callq  16380 <dump_buffer>
   16796:	jmp    16720 <emit_restart+0x20>
   16798:	movl   $0x0,0x5c(%r15)
   167a0:	movl   $0x0,0x60(%r15)
   167a8:	mov    -0x8(%rbp),%r15
   167ac:	leaveq 
   167ad:	retq   
   167ae:	movslq %eax,%rcx
   167b1:	movl   $0x0,0x48(%r15,%rcx,4)
   167ba:	add    $0x1,%eax
   167bd:	mov    0x40(%r15),%rcx
   167c1:	movslq 0x144(%rcx),%rcx
   167c8:	cmp    %eax,%ecx
   167ca:	jg     167ae <emit_restart+0xae>
   167cc:	mov    -0x8(%rbp),%r15
   167d0:	leaveq 
   167d1:	retq   
   167d2:	nopw   %cs:0x0(%rax,%rax,1)
   167dc:	nopl   0x0(%rax)

00000000000167e0 <jinit_c_prep_controller>:
   167e0:	push   %rbp
   167e1:	mov    %rsp,%rbp
   167e4:	sub    $0x30,%rsp
   167e8:	mov    %r15,-0x28(%rbp)
   167ec:	test   %esi,%esi
   167ee:	jne    167fe <jinit_c_prep_controller+0x1e>
   167f0:	mov    %r13,%r15
   167f3:	mov    %r12,%r13
   167f6:	mov    %rbx,%r12
   167f9:	mov    %rdi,%rbx
   167fc:	jmp    1681c <jinit_c_prep_controller+0x3c>
   167fe:	mov    (%rdi),%rax
   16801:	movl   $0x4,0x28(%rax)
   16808:	mov    (%rdi),%rax
   1680b:	mov    (%rax),%rax
   1680e:	mov    %r13,%r15
   16811:	mov    %r12,%r13
   16814:	mov    %rbx,%r12
   16817:	mov    %rdi,%rbx
   1681a:	callq  *%rax
   1681c:	mov    0x8(%rbx),%rax
   16820:	mov    (%rax),%rax
   16823:	mov    $0x1,%esi
   16828:	mov    $0x70,%edx
   1682d:	mov    %rbx,%rdi
   16830:	callq  *%rax
   16832:	mov    %rax,0x1c0(%rbx)
   16839:	lea    0xd0(%rip),%rcx        # 16910 <start_pass_prep>
   16840:	mov    %rcx,(%rax)
   16843:	mov    0x1e0(%rbx),%rcx
   1684a:	movslq 0x10(%rcx),%rcx
   1684e:	test   %ecx,%ecx
   16850:	jne    16884 <jinit_c_prep_controller+0xa4>
   16852:	lea    0x197(%rip),%rcx        # 169f0 <pre_process_data>
   16859:	mov    %rcx,0x8(%rax)
   1685d:	mov    0x58(%rbx),%rdx
   16861:	xor    %ecx,%ecx
   16863:	mov    %r12,-0x8(%rbp)
   16867:	mov    %r13,-0x10(%rbp)
   1686b:	mov    %r15,-0x18(%rbp)
   1686f:	mov    %r14,-0x20(%rbp)
   16873:	mov    %rcx,%r12
   16876:	mov    %rdx,%r13
   16879:	mov    %rax,%r15
   1687c:	mov    $0x1,%r14d
   16882:	jmp    168ec <jinit_c_prep_controller+0x10c>
   16884:	lea    0x385(%rip),%rcx        # 16c10 <pre_process_context>
   1688b:	mov    %rcx,0x8(%rax)
   1688f:	mov    %rbx,%rdi
   16892:	callq  16ec0 <create_context_buffer>
   16897:	mov    %r12,%rbx
   1689a:	mov    %r13,%r12
   1689d:	mov    %r15,%r13
   168a0:	mov    -0x28(%rbp),%r15
   168a4:	leaveq 
   168a5:	retq   
   168a6:	movslq 0x138(%rbx),%rax
   168ad:	mov    0x1c(%r13),%ecx
   168b1:	imul   %rcx,%rax
   168b5:	shl    $0x3,%rax
   168b9:	cqto   
   168bb:	movslq 0x8(%r13),%rcx
   168bf:	mov    0x8(%rbx),%rsi
   168c3:	mov    0x10(%rsi),%r8
   168c7:	idiv   %rcx
   168ca:	mov    %rax,%rdx
   168cd:	mov    0x13c(%rbx),%ecx
   168d3:	mov    %rbx,%rdi
   168d6:	mov    %r14,%rsi
   168d9:	callq  *%r8
   168dc:	movslq %r12d,%rcx
   168df:	mov    %rax,0x10(%r15,%rcx,8)
   168e4:	add    $0x1,%r12d
   168e8:	add    $0x60,%r13
   168ec:	movslq 0x4c(%rbx),%rax
   168f0:	cmp    %r12d,%eax
   168f3:	jg     168a6 <jinit_c_prep_controller+0xc6>
   168f5:	mov    -0x20(%rbp),%r14
   168f9:	mov    -0x18(%rbp),%r13
   168fd:	mov    -0x10(%rbp),%r12
   16901:	mov    -0x8(%rbp),%rbx
   16905:	mov    -0x28(%rbp),%r15
   16909:	leaveq 
   1690a:	retq   
   1690b:	nopl   0x0(%rax,%rax,1)

0000000000016910 <start_pass_prep>:
   16910:	push   %rbp
   16911:	mov    %rsp,%rbp
   16914:	sub    $0x10,%rsp
   16918:	mov    0x1c0(%rdi),%rax
   1691f:	test   %esi,%esi
   16921:	je     16957 <start_pass_prep+0x47>
   16923:	mov    (%rdi),%rcx
   16926:	movl   $0x4,0x28(%rcx)
   1692d:	mov    (%rdi),%rcx
   16930:	mov    (%rcx),%rcx
   16933:	mov    %rdi,%rdx
   16936:	mov    %r14,-0x8(%rbp)
   1693a:	mov    %r15,-0x10(%rbp)
   1693e:	mov    %rdi,%r14
   16941:	mov    %rdx,%rdi
   16944:	mov    %rax,%r15
   16947:	callq  *%rcx
   16949:	mov    %r15,%rax
   1694c:	mov    %r14,%rdi
   1694f:	mov    -0x10(%rbp),%r15
   16953:	mov    -0x8(%rbp),%r14
   16957:	mov    0x34(%rdi),%ecx
   1695a:	mov    %ecx,0x60(%rax)
   1695d:	movl   $0x0,0x64(%rax)
   16964:	movl   $0x0,0x68(%rax)
   1696b:	movslq 0x13c(%rdi),%rcx
   16972:	add    %ecx,%ecx
   16974:	mov    %ecx,0x6c(%rax)
   16977:	leaveq 
   16978:	retq   
   16979:	nopl   0x0(%rax)

0000000000016980 <expand_bottom_edge>:
   16980:	push   %rbp
   16981:	mov    %rsp,%rbp
   16984:	sub    $0x30,%rsp
   16988:	mov    %rbx,-0x8(%rbp)
   1698c:	mov    %r12,-0x10(%rbp)
   16990:	mov    %r13,-0x18(%rbp)
   16994:	mov    %r14,-0x20(%rbp)
   16998:	mov    %r15,-0x28(%rbp)
   1699c:	mov    %rdx,%rbx
   1699f:	mov    %rcx,%r12
   169a2:	mov    %rdi,%r13
   169a5:	mov    %rsi,%r15
   169a8:	lea    -0x1(%rbx),%r14d
   169ac:	mov    $0x1,%r8d
   169b2:	jmp    169d1 <expand_bottom_edge+0x51>
   169b4:	mov    %r13,%rdx
   169b7:	mov    %r13,%rdi
   169ba:	mov    %r14,%rsi
   169bd:	mov    %rbx,%rcx
   169c0:	mov    %r15,%r9
   169c3:	callq  43f0 <jcopy_sample_rows@plt>
   169c8:	add    $0x1,%ebx
   169cb:	mov    $0x1,%r8d
   169d1:	cmp    %r12d,%ebx
   169d4:	jl     169b4 <expand_bottom_edge+0x34>
   169d6:	mov    -0x28(%rbp),%r15
   169da:	mov    -0x20(%rbp),%r14
   169de:	mov    -0x18(%rbp),%r13
   169e2:	mov    -0x10(%rbp),%r12
   169e6:	mov    -0x8(%rbp),%rbx
   169ea:	leaveq 
   169eb:	retq   
   169ec:	nopl   0x0(%rax)

00000000000169f0 <pre_process_data>:
   169f0:	push   %rbp
   169f1:	mov    %rsp,%rbp
   169f4:	sub    $0x60,%rsp
   169f8:	mov    %r15,-0x28(%rbp)
   169fc:	mov    %rsi,-0x40(%rbp)
   16a00:	mov    %r8,-0x38(%rbp)
   16a04:	mov    %rcx,-0x48(%rbp)
   16a08:	mov    %rbx,-0x8(%rbp)
   16a0c:	mov    %r12,-0x10(%rbp)
   16a10:	mov    %r13,-0x18(%rbp)
   16a14:	mov    %r14,-0x20(%rbp)
   16a18:	mov    0x10(%rbp),%eax
   16a1b:	mov    %rax,-0x30(%rbp)
   16a1f:	mov    0x1c0(%rdi),%r14
   16a26:	lea    0x10(%r14),%rbx
   16a2a:	mov    %rbx,-0x58(%rbp)
   16a2e:	mov    %rdi,%r12
   16a31:	mov    %rdx,%r13
   16a34:	mov    %r9,%r15
   16a37:	jmpq   16b01 <pre_process_data+0x111>
   16a3c:	mov    (%r15),%edx
   16a3f:	cmp    %eax,%edx
   16a41:	jae    16b23 <pre_process_data+0x133>
   16a47:	movslq 0x64(%r14),%rdx
   16a4b:	movslq 0x13c(%r12),%rax
   16a53:	sub    %edx,%eax
   16a55:	sub    %edi,%ecx
   16a57:	cmp    %eax,%ecx
   16a59:	jbe    16a5e <pre_process_data+0x6e>
   16a5b:	mov    %rax,%rcx
   16a5e:	lea    (%rsi,%rdi,8),%rsi
   16a62:	mov    0x1d8(%r12),%rax
   16a6a:	mov    0x8(%rax),%rax
   16a6e:	mov    %rdx,%r9
   16a71:	mov    %rbx,%rdx
   16a74:	mov    %rcx,%rbx
   16a77:	mov    %r9,%rcx
   16a7a:	mov    %r12,%rdi
   16a7d:	mov    %rbx,%r8
   16a80:	callq  *%rax
   16a82:	mov    %rbx,%rax
   16a85:	add    0x0(%r13),%eax
   16a89:	mov    %eax,0x0(%r13)
   16a8d:	mov    %rbx,%rdx
   16a90:	add    0x64(%r14),%edx
   16a94:	mov    %edx,0x64(%r14)
   16a98:	mov    0x60(%r14),%ecx
   16a9c:	mov    %rcx,%rax
   16a9f:	sub    %ebx,%eax
   16aa1:	mov    %eax,0x60(%r14)
   16aa5:	cmp    %ecx,%ebx
   16aa7:	je     16b39 <pre_process_data+0x149>
   16aad:	mov    -0x58(%rbp),%rbx
   16ab1:	movslq 0x13c(%r12),%rax
   16ab9:	cmp    0x64(%r14),%eax
   16abd:	jne    16aed <pre_process_data+0xfd>
   16abf:	mov    0x1e0(%r12),%rax
   16ac7:	mov    0x8(%rax),%rax
   16acb:	mov    (%r15),%r8d
   16ace:	mov    %r12,%rdi
   16ad1:	mov    %rbx,%rsi
   16ad4:	xor    %edx,%edx
   16ad6:	mov    -0x38(%rbp),%rcx
   16ada:	callq  *%rax
   16adc:	movl   $0x0,0x64(%r14)
   16ae4:	mov    (%r15),%eax
   16ae7:	add    $0x1,%eax
   16aea:	mov    %eax,(%r15)
   16aed:	mov    0x60(%r14),%eax
   16af1:	test   %eax,%eax
   16af3:	je     16b4c <pre_process_data+0x15c>
   16af5:	mov    -0x48(%rbp),%rcx
   16af9:	mov    -0x30(%rbp),%rax
   16afd:	mov    -0x40(%rbp),%rsi
   16b01:	mov    0x0(%r13),%edi
   16b05:	cmp    %ecx,%edi
   16b07:	jb     16a3c <pre_process_data+0x4c>
   16b0d:	mov    -0x20(%rbp),%r14
   16b11:	mov    -0x18(%rbp),%r13
   16b15:	mov    -0x10(%rbp),%r12
   16b19:	mov    -0x8(%rbp),%rbx
   16b1d:	mov    -0x28(%rbp),%r15
   16b21:	leaveq 
   16b22:	retq   
   16b23:	mov    -0x20(%rbp),%r14
   16b27:	mov    -0x18(%rbp),%r13
   16b2b:	mov    -0x10(%rbp),%r12
   16b2f:	mov    -0x8(%rbp),%rbx
   16b33:	mov    -0x28(%rbp),%r15
   16b37:	leaveq 
   16b38:	retq   
   16b39:	cmp    0x13c(%r12),%edx
   16b41:	jl     16b5f <pre_process_data+0x16f>
   16b43:	mov    -0x58(%rbp),%rbx
   16b47:	jmpq   16ab1 <pre_process_data+0xc1>
   16b4c:	mov    -0x30(%rbp),%rax
   16b50:	cmp    (%r15),%eax
   16b53:	ja     16b6c <pre_process_data+0x17c>
   16b55:	mov    -0x48(%rbp),%rcx
   16b59:	mov    -0x40(%rbp),%rsi
   16b5d:	jmp    16b01 <pre_process_data+0x111>
   16b5f:	mov    %r15,-0x50(%rbp)
   16b63:	mov    -0x58(%rbp),%rbx
   16b67:	xor    %r15d,%r15d
   16b6a:	jmp    16b9a <pre_process_data+0x1aa>
   16b6c:	mov    0x58(%r12),%r13
   16b71:	mov    -0x38(%rbp),%r14
   16b75:	xor    %ebx,%ebx
   16b77:	jmp    16be8 <pre_process_data+0x1f8>
   16b79:	movslq %r15d,%rax
   16b7c:	mov    (%rbx,%rax,8),%rdi
   16b80:	mov    0x30(%r12),%esi
   16b85:	movslq 0x64(%r14),%rdx
   16b89:	movslq 0x13c(%r12),%rcx
   16b91:	callq  16980 <expand_bottom_edge>
   16b96:	add    $0x1,%r15d
   16b9a:	movslq 0x4c(%r12),%rax
   16b9f:	cmp    %r15d,%eax
   16ba2:	jg     16b79 <pre_process_data+0x189>
   16ba4:	movslq 0x13c(%r12),%rax
   16bac:	mov    %eax,0x64(%r14)
   16bb0:	mov    -0x50(%rbp),%r15
   16bb4:	jmpq   16ab1 <pre_process_data+0xc1>
   16bb9:	movslq %ebx,%rcx
   16bbc:	mov    (%r14,%rcx,8),%rdi
   16bc0:	mov    0xc(%r13),%ecx
   16bc4:	mov    %rcx,%rdx
   16bc7:	imul   (%r15),%edx
   16bcb:	imul   %ecx,%eax
   16bce:	mov    0x1c(%r13),%esi
   16bd2:	shl    $0x3,%esi
   16bd5:	mov    %rax,%rcx
   16bd8:	callq  16980 <expand_bottom_edge>
   16bdd:	add    $0x1,%ebx
   16be0:	add    $0x60,%r13
   16be4:	mov    -0x30(%rbp),%rax
   16be8:	movslq 0x4c(%r12),%rcx
   16bed:	cmp    %ebx,%ecx
   16bef:	jg     16bb9 <pre_process_data+0x1c9>
   16bf1:	mov    %eax,(%r15)
   16bf4:	mov    -0x20(%rbp),%r14
   16bf8:	mov    -0x18(%rbp),%r13
   16bfc:	mov    -0x10(%rbp),%r12
   16c00:	mov    -0x8(%rbp),%rbx
   16c04:	mov    -0x28(%rbp),%r15
   16c08:	leaveq 
   16c09:	retq   
   16c0a:	nopw   0x0(%rax,%rax,1)

0000000000016c10 <pre_process_context>:
   16c10:	push   %rbp
   16c11:	mov    %rsp,%rbp
   16c14:	sub    $0x80,%rsp
   16c1b:	mov    %r15,-0x28(%rbp)
   16c1f:	mov    %r14,-0x20(%rbp)
   16c23:	mov    %r13,-0x18(%rbp)
   16c27:	mov    %rsi,-0x58(%rbp)
   16c2b:	mov    %r8,-0x48(%rbp)
   16c2f:	mov    %rcx,-0x78(%rbp)
   16c33:	mov    %rdx,-0x40(%rbp)
   16c37:	mov    %rbx,-0x8(%rbp)
   16c3b:	mov    %r12,-0x10(%rbp)
   16c3f:	mov    %r9,-0x50(%rbp)
   16c43:	mov    0x10(%rbp),%eax
   16c46:	mov    %rax,-0x30(%rbp)
   16c4a:	xor    %r13d,%r13d
   16c4d:	mov    0x1c0(%rdi),%r12
   16c54:	lea    0x10(%r12),%r14
   16c59:	mov    %r14,-0x60(%rbp)
   16c5d:	movslq 0x13c(%rdi),%rbx
   16c64:	lea    (%rbx,%rbx,2),%r10d
   16c68:	mov    %r10,-0x70(%rbp)
   16c6c:	mov    %rdi,%rbx
   16c6f:	mov    %r9,%r15
   16c72:	jmpq   16d9a <pre_process_context+0x18a>
   16c77:	movslq 0x64(%r12),%r9
   16c7c:	movslq 0x6c(%r12),%rax
   16c81:	sub    %r9d,%eax
   16c84:	sub    %edi,%ecx
   16c86:	cmp    %ecx,%eax
   16c88:	jae    16c8d <pre_process_context+0x7d>
   16c8a:	mov    %rax,%rcx
   16c8d:	lea    (%rsi,%rdi,8),%rsi
   16c91:	mov    0x1d8(%rbx),%rax
   16c98:	mov    0x8(%rax),%rax
   16c9c:	mov    %rdx,%r13
   16c9f:	mov    %r14,%rdx
   16ca2:	mov    %rcx,%r14
   16ca5:	mov    %r9,%rcx
   16ca8:	mov    %rbx,%rdi
   16cab:	mov    %r14,%r8
   16cae:	callq  *%rax
   16cb0:	mov    0x34(%rbx),%eax
   16cb3:	cmp    0x60(%r12),%eax
   16cb8:	je     16db7 <pre_process_context+0x1a7>
   16cbe:	mov    %r13,%rdx
   16cc1:	xor    %r13d,%r13d
   16cc4:	mov    %r14,%rax
   16cc7:	add    (%rdx),%eax
   16cc9:	mov    %eax,(%rdx)
   16ccb:	mov    %r14,%rax
   16cce:	add    0x64(%r12),%eax
   16cd3:	mov    %eax,0x64(%r12)
   16cd8:	mov    0x60(%r12),%eax
   16cdd:	sub    %r14d,%eax
   16ce0:	mov    %eax,0x60(%r12)
   16ce5:	mov    -0x60(%rbp),%r14
   16ce9:	mov    -0x78(%rbp),%rcx
   16ced:	mov    -0x30(%rbp),%rax
   16cf1:	mov    -0x48(%rbp),%r8
   16cf5:	mov    -0x58(%rbp),%rsi
   16cf9:	mov    -0x70(%rbp),%r10
   16cfd:	movslq 0x6c(%r12),%rdi
   16d02:	cmp    0x64(%r12),%edi
   16d07:	jne    16d9a <pre_process_context+0x18a>
   16d0d:	mov    0x1e0(%rbx),%rcx
   16d14:	mov    0x8(%rcx),%r9
   16d18:	mov    %r8,%rcx
   16d1b:	mov    %r14,%rsi
   16d1e:	mov    %r10,%r14
   16d21:	mov    %rax,%r13
   16d24:	mov    0x68(%r12),%edx
   16d29:	mov    (%r15),%r8d
   16d2c:	mov    %rbx,%rdi
   16d2f:	callq  *%r9
   16d32:	mov    (%r15),%eax
   16d35:	add    $0x1,%eax
   16d38:	mov    %eax,(%r15)
   16d3b:	movslq 0x68(%r12),%rax
   16d40:	add    0x13c(%rbx),%eax
   16d46:	mov    %eax,0x68(%r12)
   16d4b:	cmp    %r14d,%eax
   16d4e:	jl     16d59 <pre_process_context+0x149>
   16d50:	movl   $0x0,0x68(%r12)
   16d59:	movslq 0x64(%r12),%rax
   16d5e:	cmp    %r14d,%eax
   16d61:	jl     16d6c <pre_process_context+0x15c>
   16d63:	movl   $0x0,0x64(%r12)
   16d6c:	movslq 0x13c(%rbx),%rax
   16d73:	add    0x64(%r12),%eax
   16d78:	mov    %eax,0x6c(%r12)
   16d7d:	mov    %r13,%rax
   16d80:	mov    %r14,%r10
   16d83:	mov    -0x40(%rbp),%rdx
   16d87:	mov    -0x60(%rbp),%r14
   16d8b:	mov    -0x78(%rbp),%rcx
   16d8f:	mov    -0x48(%rbp),%r8
   16d93:	mov    -0x58(%rbp),%rsi
   16d97:	xor    %r13d,%r13d
   16d9a:	mov    (%r15),%edi
   16d9d:	cmp    %eax,%edi
   16d9f:	jb     16dc9 <pre_process_context+0x1b9>
   16da1:	mov    -0x10(%rbp),%r12
   16da5:	mov    -0x8(%rbp),%rbx
   16da9:	mov    -0x18(%rbp),%r13
   16dad:	mov    -0x20(%rbp),%r14
   16db1:	mov    -0x28(%rbp),%r15
   16db5:	leaveq 
   16db6:	retq   
   16db7:	mov    %r14,-0x38(%rbp)
   16dbb:	xor    %r13d,%r13d
   16dbe:	mov    $0x1,%r8d
   16dc4:	mov    %r13,%rax
   16dc7:	jmp    16e27 <pre_process_context+0x217>
   16dc9:	mov    (%rdx),%edi
   16dcb:	cmp    %ecx,%edi
   16dcd:	jb     16c77 <pre_process_context+0x67>
   16dd3:	mov    0x60(%r12),%edi
   16dd8:	test   %edi,%edi
   16dda:	jne    16e40 <pre_process_context+0x230>
   16ddc:	movslq 0x6c(%r12),%rdi
   16de1:	cmp    0x64(%r12),%edi
   16de6:	jg     16e73 <pre_process_context+0x263>
   16dec:	jmpq   16cfd <pre_process_context+0xed>
   16df1:	mov    0x10(%r12,%r14,8),%rdi
   16df6:	mov    %r15,%rcx
   16df9:	neg    %ecx
   16dfb:	mov    0x30(%rbx),%r9d
   16dff:	mov    %rdi,%rdx
   16e02:	mov    %r13,%rsi
   16e05:	callq  43f0 <jcopy_sample_rows@plt>
   16e0a:	add    $0x1,%r15d
   16e0e:	mov    $0x1,%r8d
   16e14:	movslq 0x13c(%rbx),%rax
   16e1b:	cmp    %r15d,%eax
   16e1e:	jge    16df1 <pre_process_context+0x1e1>
   16e20:	mov    -0x68(%rbp),%rax
   16e24:	add    $0x1,%eax
   16e27:	movslq 0x4c(%rbx),%rcx
   16e2b:	cmp    %eax,%ecx
   16e2d:	jg     16ea6 <pre_process_context+0x296>
   16e2f:	mov    -0x50(%rbp),%r15
   16e33:	mov    -0x38(%rbp),%r14
   16e37:	mov    -0x40(%rbp),%rdx
   16e3b:	jmpq   16cc4 <pre_process_context+0xb4>
   16e40:	mov    -0x10(%rbp),%r12
   16e44:	mov    -0x8(%rbp),%rbx
   16e48:	mov    -0x18(%rbp),%r13
   16e4c:	mov    -0x20(%rbp),%r14
   16e50:	mov    -0x28(%rbp),%r15
   16e54:	leaveq 
   16e55:	retq   
   16e56:	movslq %r13d,%rax
   16e59:	mov    (%r14,%rax,8),%rdi
   16e5d:	mov    0x30(%rbx),%esi
   16e60:	movslq 0x64(%r12),%rdx
   16e65:	movslq 0x6c(%r12),%rcx
   16e6a:	callq  16980 <expand_bottom_edge>
   16e6f:	add    $0x1,%r13d
   16e73:	movslq 0x4c(%rbx),%rax
   16e77:	cmp    %r13d,%eax
   16e7a:	jg     16e56 <pre_process_context+0x246>
   16e7c:	movslq 0x6c(%r12),%rax
   16e81:	mov    %eax,0x64(%r12)
   16e86:	mov    -0x40(%rbp),%rdx
   16e8a:	mov    -0x78(%rbp),%rcx
   16e8e:	mov    -0x30(%rbp),%rax
   16e92:	mov    -0x48(%rbp),%r8
   16e96:	mov    -0x58(%rbp),%rsi
   16e9a:	mov    -0x70(%rbp),%r10
   16e9e:	xor    %r13d,%r13d
   16ea1:	jmpq   16cfd <pre_process_context+0xed>
   16ea6:	movslq %eax,%r14
   16ea9:	mov    %rax,-0x68(%rbp)
   16ead:	mov    %r8,%r15
   16eb0:	jmpq   16e14 <pre_process_context+0x204>
   16eb5:	data16 nopw %cs:0x0(%rax,%rax,1)

0000000000016ec0 <create_context_buffer>:
   16ec0:	push   %rbp
   16ec1:	mov    %rsp,%rbp
   16ec4:	sub    $0x60,%rsp
   16ec8:	mov    %r13,-0x18(%rbp)
   16ecc:	mov    %r14,-0x20(%rbp)
   16ed0:	mov    %r15,-0x28(%rbp)
   16ed4:	mov    %rdi,-0x58(%rbp)
   16ed8:	mov    %rbx,-0x8(%rbp)
   16edc:	mov    %r12,-0x10(%rbp)
   16ee0:	mov    0x1c0(%rdi),%rax
   16ee7:	mov    %rax,-0x38(%rbp)
   16eeb:	movslq 0x13c(%rdi),%r12
   16ef2:	mov    %r12,%rax
   16ef5:	imul   0x4c(%rdi),%eax
   16ef9:	lea    (%rax,%rax,4),%eax
   16efc:	movslq %eax,%rdx
   16eff:	shl    $0x3,%rdx
   16f03:	mov    0x8(%rdi),%rax
   16f07:	mov    (%rax),%rax
   16f0a:	mov    $0x1,%r13d
   16f10:	mov    %rdi,%r15
   16f13:	mov    %r13,%rsi
   16f16:	callq  *%rax
   16f18:	mov    0x58(%r15),%r8
   16f1c:	lea    (%r12,%r12,2),%ecx
   16f20:	mov    %rcx,-0x50(%rbp)
   16f24:	movslq %ecx,%rbx
   16f27:	shl    $0x3,%rbx
   16f2b:	mov    %rbx,-0x40(%rbp)
   16f2f:	lea    (%r12,%r12,4),%edx
   16f33:	movslq %edx,%rdx
   16f36:	mov    %rdx,-0x48(%rbp)
   16f3a:	mov    %r13,%rsi
   16f3d:	mov    %rax,%r13
   16f40:	mov    %r15,%rdi
   16f43:	xor    %r14d,%r14d
   16f46:	mov    %r14,%r15
   16f49:	jmp    16fa8 <create_context_buffer+0xe8>
   16f4b:	lea    (%rcx,%r12,2),%eax
   16f4f:	movslq %eax,%rax
   16f52:	mov    (%rbx,%rax,8),%rax
   16f56:	movslq %ecx,%rdx
   16f59:	mov    %rax,0x0(%r13,%rdx,8)
   16f5e:	mov    (%rbx,%rdx,8),%rdx
   16f62:	lea    (%rcx,%r12,4),%eax
   16f66:	movslq %eax,%rax
   16f69:	mov    %rdx,0x0(%r13,%rax,8)
   16f6e:	add    $0x1,%ecx
   16f71:	cmp    %r12d,%ecx
   16f74:	jl     16f4b <create_context_buffer+0x8b>
   16f76:	movslq %r15d,%rax
   16f79:	mov    -0x30(%rbp),%rdx
   16f7d:	mov    -0x38(%rbp),%rcx
   16f81:	mov    %rdx,0x10(%rcx,%rax,8)
   16f86:	add    $0x1,%r15d
   16f8a:	mov    -0x48(%rbp),%rax
   16f8e:	lea    0x0(%r13,%rax,8),%r13
   16f93:	lea    0x60(%rsi),%r8
   16f97:	mov    -0x40(%rbp),%rbx
   16f9b:	mov    -0x50(%rbp),%rcx
   16f9f:	mov    -0x58(%rbp),%rdi
   16fa3:	mov    $0x1,%esi
   16fa8:	movslq 0x4c(%rdi),%rax
   16fac:	cmp    %r15d,%eax
   16faf:	jg     16fc7 <create_context_buffer+0x107>
   16fb1:	mov    -0x10(%rbp),%r12
   16fb5:	mov    -0x8(%rbp),%rbx
   16fb9:	mov    -0x28(%rbp),%r15
   16fbd:	mov    -0x20(%rbp),%r14
   16fc1:	mov    -0x18(%rbp),%r13
   16fc5:	leaveq 
   16fc6:	retq   
   16fc7:	movslq 0x138(%rdi),%rax
   16fce:	mov    0x1c(%r8),%edx
   16fd2:	imul   %rdx,%rax
   16fd6:	shl    $0x3,%rax
   16fda:	cqto   
   16fdc:	movslq 0x8(%r8),%r9
   16fe0:	mov    %r8,-0x60(%rbp)
   16fe4:	mov    0x8(%rdi),%r8
   16fe8:	mov    0x10(%r8),%r8
   16fec:	idiv   %r9
   16fef:	mov    %rax,%rdx
   16ff2:	callq  *%r8
   16ff5:	mov    %rbx,%rdx
   16ff8:	mov    %rax,%rbx
   16ffb:	lea    0x0(%r13,%r12,8),%rdi
   17000:	mov    %rdi,-0x30(%rbp)
   17004:	mov    %rbx,%rsi
   17007:	callq  42c0 <memcpy@plt>
   1700c:	mov    -0x60(%rbp),%rsi
   17010:	mov    %r14,%rcx
   17013:	jmpq   16f71 <create_context_buffer+0xb1>
   17018:	nopl   0x0(%rax,%rax,1)

0000000000017020 <jinit_downsampler>:
   17020:	push   %rbp
   17021:	mov    %rsp,%rbp
   17024:	sub    $0x50,%rsp
   17028:	mov    %r14,-0x20(%rbp)
   1702c:	mov    %r15,-0x28(%rbp)
   17030:	mov    %r13,-0x18(%rbp)
   17034:	mov    %r12,-0x10(%rbp)
   17038:	mov    %rdi,-0x40(%rbp)
   1703c:	mov    %rbx,-0x8(%rbp)
   17040:	mov    0x8(%rdi),%rax
   17044:	mov    (%rax),%rax
   17047:	mov    $0x1,%r15d
   1704d:	mov    $0x68,%edx
   17052:	mov    %rdi,%r12
   17055:	mov    %r15,%rsi
   17058:	callq  *%rax
   1705a:	mov    %rax,0x1e0(%r12)
   17062:	lea    0x347(%rip),%rcx        # 173b0 <start_pass_downsample>
   17069:	mov    %rcx,(%rax)
   1706c:	lea    0x39d(%rip),%rcx        # 17410 <sep_downsample>
   17073:	mov    %rcx,0x8(%rax)
   17077:	movl   $0x0,0x10(%rax)
   1707e:	movslq 0x10c(%r12),%rcx
   17086:	test   %ecx,%ecx
   17088:	jne    1708f <jinit_downsampler+0x6f>
   1708a:	mov    %rax,%rbx
   1708d:	jmp    170a9 <jinit_downsampler+0x89>
   1708f:	mov    (%r12),%rcx
   17093:	movl   $0x19,0x28(%rcx)
   1709a:	mov    (%r12),%rcx
   1709e:	mov    (%rcx),%rcx
   170a1:	mov    %rax,%rbx
   170a4:	mov    %r12,%rdi
   170a7:	callq  *%rcx
   170a9:	mov    0x58(%r12),%r13
   170ae:	lea    0x2678b(%rip),%rcx        # 3d840 <jsimd_h2v1_downsample>
   170b5:	mov    %rcx,-0x30(%rbp)
   170b9:	lea    0x26740(%rip),%rdi        # 3d800 <jsimd_h2v2_downsample>
   170c0:	mov    %rdi,-0x38(%rbp)
   170c4:	xor    %esi,%esi
   170c6:	lea    0xa43(%rip),%r8        # 17b10 <fullsize_smooth_downsample>
   170cd:	lea    0x56c(%rip),%rax        # 17640 <fullsize_downsample>
   170d4:	lea    0x765(%rip),%rdx        # 17840 <h2v2_smooth_downsample>
   170db:	mov    %rsi,%r14
   170de:	jmpq   1717c <jinit_downsampler+0x15c>
   170e3:	movslq %r14d,%r9
   170e6:	movslq 0x138(%r12),%r10
   170ee:	cmp    0x8(%r13),%r10d
   170f2:	je     171b0 <jinit_downsampler+0x190>
   170f8:	movslq 0x138(%r12),%r10
   17100:	movslq 0x8(%r13),%rax
   17104:	add    %eax,%eax
   17106:	cmp    %eax,%r10d
   17109:	je     171d9 <jinit_downsampler+0x1b9>
   1710f:	movslq 0x138(%r12),%r10
   17117:	movslq 0x8(%r13),%rax
   1711b:	add    %eax,%eax
   1711d:	cmp    %eax,%r10d
   17120:	je     17232 <jinit_downsampler+0x212>
   17126:	movslq 0x138(%r12),%rax
   1712e:	movslq 0x8(%r13),%r10
   17132:	cltd   
   17133:	idiv   %r10d
   17136:	test   %edx,%edx
   17138:	je     172a5 <jinit_downsampler+0x285>
   1713e:	mov    (%r12),%rax
   17142:	movl   $0x26,0x28(%rax)
   17149:	mov    (%r12),%rax
   1714d:	mov    (%rax),%rax
   17150:	mov    %r12,%rdi
   17153:	callq  *%rax
   17155:	mov    -0x30(%rbp),%rcx
   17159:	lea    0x6e0(%rip),%rdx        # 17840 <h2v2_smooth_downsample>
   17160:	lea    0x9a9(%rip),%r8        # 17b10 <fullsize_smooth_downsample>
   17167:	mov    -0x38(%rbp),%rdi
   1716b:	lea    0x4ce(%rip),%rax        # 17640 <fullsize_downsample>
   17172:	add    $0x1,%r14d
   17176:	add    $0x60,%r13
   1717a:	xor    %esi,%esi
   1717c:	movslq 0x4c(%r12),%r9
   17181:	cmp    %r14d,%r9d
   17184:	jg     170e3 <jinit_downsampler+0xc3>
   1718a:	movslq 0x110(%r12),%rax
   17192:	test   %eax,%eax
   17194:	jne    172df <jinit_downsampler+0x2bf>
   1719a:	mov    -0x8(%rbp),%rbx
   1719e:	mov    -0x10(%rbp),%r12
   171a2:	mov    -0x18(%rbp),%r13
   171a6:	mov    -0x28(%rbp),%r15
   171aa:	mov    -0x20(%rbp),%r14
   171ae:	leaveq 
   171af:	retq   
   171b0:	movslq 0x13c(%r12),%r10
   171b8:	cmp    0xc(%r13),%r10d
   171bc:	jne    170f8 <jinit_downsampler+0xd8>
   171c2:	movslq 0x110(%r12),%rsi
   171ca:	test   %esi,%esi
   171cc:	jne    172fe <jinit_downsampler+0x2de>
   171d2:	mov    %rax,0x18(%rbx,%r9,8)
   171d7:	jmp    17172 <jinit_downsampler+0x152>
   171d9:	movslq 0x13c(%r12),%rax
   171e1:	cmp    0xc(%r13),%eax
   171e5:	jne    1710f <jinit_downsampler+0xef>
   171eb:	mov    %r9,%r12
   171ee:	mov    %rcx,%r15
   171f1:	callq  3d7d0 <jsimd_can_h2v1_downsample>
   171f6:	test   %eax,%eax
   171f8:	jne    1730f <jinit_downsampler+0x2ef>
   171fe:	lea    0x49b(%rip),%rax        # 176a0 <h2v1_downsample>
   17205:	mov    %rax,0x18(%rbx,%r12,8)
   1720a:	mov    %r15,%rcx
   1720d:	lea    0x62c(%rip),%rdx        # 17840 <h2v2_smooth_downsample>
   17214:	lea    0x8f5(%rip),%r8        # 17b10 <fullsize_smooth_downsample>
   1721b:	xor    %r15d,%r15d
   1721e:	mov    -0x38(%rbp),%rdi
   17222:	mov    -0x40(%rbp),%r12
   17226:	lea    0x413(%rip),%rax        # 17640 <fullsize_downsample>
   1722d:	jmpq   17172 <jinit_downsampler+0x152>
   17232:	movslq 0x13c(%r12),%r10
   1723a:	movslq 0xc(%r13),%rax
   1723e:	add    %eax,%eax
   17240:	cmp    %eax,%r10d
   17243:	jne    17126 <jinit_downsampler+0x106>
   17249:	movslq 0x110(%r12),%rax
   17251:	test   %eax,%eax
   17253:	jne    1733c <jinit_downsampler+0x31c>
   17259:	mov    %r13,-0x48(%rbp)
   1725d:	mov    %r9,%r12
   17260:	mov    %rdi,%r13
   17263:	callq  3d7a0 <jsimd_can_h2v2_downsample>
   17268:	test   %eax,%eax
   1726a:	jne    17354 <jinit_downsampler+0x334>
   17270:	lea    0x4d9(%rip),%rax        # 17750 <h2v2_downsample>
   17277:	mov    %rax,0x18(%rbx,%r12,8)
   1727c:	mov    %r13,%rdi
   1727f:	mov    -0x30(%rbp),%rcx
   17283:	mov    -0x48(%rbp),%r13
   17287:	lea    0x5b2(%rip),%rdx        # 17840 <h2v2_smooth_downsample>
   1728e:	lea    0x87b(%rip),%r8        # 17b10 <fullsize_smooth_downsample>
   17295:	mov    -0x40(%rbp),%r12
   17299:	lea    0x3a0(%rip),%rax        # 17640 <fullsize_downsample>
   172a0:	jmpq   17172 <jinit_downsampler+0x152>
   172a5:	movslq 0x13c(%r12),%rax
   172ad:	movslq 0xc(%r13),%r10
   172b1:	cltd   
   172b2:	idiv   %r10d
   172b5:	test   %edx,%edx
   172b7:	jne    1713e <jinit_downsampler+0x11e>
   172bd:	lea    0x1fc(%rip),%rax        # 174c0 <int_downsample>
   172c4:	mov    %rax,0x18(%rbx,%r9,8)
   172c9:	mov    %rsi,%r15
   172cc:	lea    0x56d(%rip),%rdx        # 17840 <h2v2_smooth_downsample>
   172d3:	lea    0x366(%rip),%rax        # 17640 <fullsize_downsample>
   172da:	jmpq   17172 <jinit_downsampler+0x152>
   172df:	test   %r15d,%r15d
   172e2:	jle    17382 <jinit_downsampler+0x362>
   172e8:	mov    -0x8(%rbp),%rbx
   172ec:	mov    -0x10(%rbp),%r12
   172f0:	mov    -0x18(%rbp),%r13
   172f4:	mov    -0x28(%rbp),%r15
   172f8:	mov    -0x20(%rbp),%r14
   172fc:	leaveq 
   172fd:	retq   
   172fe:	mov    %r8,0x18(%rbx,%r9,8)
   17303:	movl   $0x1,0x10(%rbx)
   1730a:	jmpq   17172 <jinit_downsampler+0x152>
   1730f:	mov    %r15,0x18(%rbx,%r12,8)
   17314:	mov    %r15,%rcx
   17317:	lea    0x522(%rip),%rdx        # 17840 <h2v2_smooth_downsample>
   1731e:	lea    0x7eb(%rip),%r8        # 17b10 <fullsize_smooth_downsample>
   17325:	xor    %r15d,%r15d
   17328:	mov    -0x38(%rbp),%rdi
   1732c:	mov    -0x40(%rbp),%r12
   17330:	lea    0x309(%rip),%rax        # 17640 <fullsize_downsample>
   17337:	jmpq   17172 <jinit_downsampler+0x152>
   1733c:	mov    %rdx,0x18(%rbx,%r9,8)
   17341:	movl   $0x1,0x10(%rbx)
   17348:	lea    0x2f1(%rip),%rax        # 17640 <fullsize_downsample>
   1734f:	jmpq   17172 <jinit_downsampler+0x152>
   17354:	mov    %r13,0x18(%rbx,%r12,8)
   17359:	mov    %r13,%rdi
   1735c:	mov    -0x30(%rbp),%rcx
   17360:	mov    -0x48(%rbp),%r13
   17364:	lea    0x4d5(%rip),%rdx        # 17840 <h2v2_smooth_downsample>
   1736b:	lea    0x79e(%rip),%r8        # 17b10 <fullsize_smooth_downsample>
   17372:	mov    -0x40(%rbp),%r12
   17376:	lea    0x2c3(%rip),%rax        # 17640 <fullsize_downsample>
   1737d:	jmpq   17172 <jinit_downsampler+0x152>
   17382:	mov    (%r12),%rax
   17386:	movl   $0x63,0x28(%rax)
   1738d:	mov    (%r12),%rax
   17391:	mov    0x8(%rax),%rax
   17395:	mov    %r12,%rdi
   17398:	callq  *%rax
   1739a:	mov    -0x8(%rbp),%rbx
   1739e:	mov    -0x10(%rbp),%r12
   173a2:	mov    -0x18(%rbp),%r13
   173a6:	mov    -0x28(%rbp),%r15
   173aa:	mov    -0x20(%rbp),%r14
   173ae:	leaveq 
   173af:	retq   

00000000000173b0 <start_pass_downsample>:
   173b0:	push   %rbp
   173b1:	mov    %rsp,%rbp
   173b4:	leaveq 
   173b5:	retq   
   173b6:	nopw   %cs:0x0(%rax,%rax,1)

00000000000173c0 <expand_right_edge>:
   173c0:	push   %rbp
   173c1:	mov    %rsp,%rbp
   173c4:	sub    %edx,%ecx
   173c6:	test   %ecx,%ecx
   173c8:	jg     173cc <expand_right_edge+0xc>
   173ca:	leaveq 
   173cb:	retq   
   173cc:	mov    %edx,%r9d
   173cf:	xor    %r8d,%r8d
   173d2:	jmp    173e6 <expand_right_edge+0x26>
   173d4:	mov    %r10b,(%rax)
   173d7:	add    $0x1,%rax
   173db:	add    $0xffffffff,%edx
   173de:	test   %edx,%edx
   173e0:	jg     173d4 <expand_right_edge+0x14>
   173e2:	add    $0x1,%r8d
   173e6:	cmp    %esi,%r8d
   173e9:	jl     173ed <expand_right_edge+0x2d>
   173eb:	leaveq 
   173ec:	retq   
   173ed:	movslq %r8d,%rax
   173f0:	mov    (%rdi,%rax,8),%rax
   173f4:	add    %r9,%rax
   173f7:	movzbl -0x1(%rax),%r10d
   173fc:	mov    %rcx,%rdx
   173ff:	jmp    173de <expand_right_edge+0x1e>
   17401:	data16 nopw %cs:0x0(%rax,%rax,1)
   1740c:	nopl   0x0(%rax)

0000000000017410 <sep_downsample>:
   17410:	push   %rbp
   17411:	mov    %rsp,%rbp
   17414:	sub    $0x40,%rsp
   17418:	mov    %r8,-0x38(%rbp)
   1741c:	mov    %rcx,-0x30(%rbp)
   17420:	mov    %rbx,-0x8(%rbp)
   17424:	mov    %r12,-0x10(%rbp)
   17428:	mov    %r13,-0x18(%rbp)
   1742c:	mov    %r14,-0x20(%rbp)
   17430:	mov    %r15,-0x28(%rbp)
   17434:	mov    0x1e0(%rdi),%r9
   1743b:	mov    %r9,-0x40(%rbp)
   1743f:	mov    0x58(%rdi),%r13
   17443:	mov    %edx,%ebx
   17445:	shl    $0x3,%rbx
   17449:	mov    %rcx,%rax
   1744c:	mov    %rsi,%r14
   1744f:	mov    %rdi,%r15
   17452:	xor    %r12d,%r12d
   17455:	jmp    17492 <sep_downsample+0x82>
   17457:	movslq %r12d,%rsi
   1745a:	mov    %rbx,%rdx
   1745d:	add    (%r14,%rsi,8),%rdx
   17461:	imul   0xc(%r13),%r8d
   17466:	mov    %r8d,%ecx
   17469:	shl    $0x3,%rcx
   1746d:	add    (%rax,%rsi,8),%rcx
   17471:	mov    0x18(%r9,%rsi,8),%rax
   17476:	mov    %r15,%rdi
   17479:	mov    %r13,%rsi
   1747c:	callq  *%rax
   1747e:	add    $0x1,%r12d
   17482:	add    $0x60,%r13
   17486:	mov    -0x40(%rbp),%r9
   1748a:	mov    -0x30(%rbp),%rax
   1748e:	mov    -0x38(%rbp),%r8
   17492:	movslq 0x4c(%r15),%rcx
   17496:	cmp    %r12d,%ecx
   17499:	jg     17457 <sep_downsample+0x47>
   1749b:	mov    -0x28(%rbp),%r15
   1749f:	mov    -0x20(%rbp),%r14
   174a3:	mov    -0x18(%rbp),%r13
   174a7:	mov    -0x10(%rbp),%r12
   174ab:	mov    -0x8(%rbp),%rbx
   174af:	leaveq 
   174b0:	retq   
   174b1:	data16 nopw %cs:0x0(%rax,%rax,1)
   174bc:	nopl   0x0(%rax)

00000000000174c0 <int_downsample>:
   174c0:	push   %rbp
   174c1:	mov    %rsp,%rbp
   174c4:	sub    $0x80,%rsp
   174cb:	mov    %r15,-0x28(%rbp)
   174cf:	mov    %r14,-0x20(%rbp)
   174d3:	mov    %rcx,-0x40(%rbp)
   174d7:	mov    %rdx,-0x78(%rbp)
   174db:	mov    %rbx,-0x8(%rbp)
   174df:	mov    %r12,-0x10(%rbp)
   174e3:	mov    %r13,-0x18(%rbp)
   174e7:	mov    %rdi,%r8
   174ea:	mov    %rdx,%rdi
   174ed:	mov    %rsi,%r14
   174f0:	mov    %r14,-0x30(%rbp)
   174f4:	movslq 0x138(%r8),%rax
   174fb:	movslq 0x8(%r14),%rcx
   174ff:	cltd   
   17500:	mov    0x1c(%r14),%r13d
   17504:	idiv   %ecx
   17506:	mov    %r13,%rcx
   17509:	imul   %eax,%ecx
   1750c:	shl    $0x3,%ecx
   1750f:	movslq 0x13c(%r8),%r15
   17516:	movslq 0xc(%r14),%r12
   1751a:	movslq 0x13c(%r8),%rsi
   17521:	mov    0x30(%r8),%edx
   17525:	mov    %rax,%rbx
   17528:	callq  173c0 <expand_right_edge>
   1752d:	mov    %r15,%rax
   17530:	cltd   
   17531:	idiv   %r12d
   17534:	mov    %rbx,%rdx
   17537:	imul   %eax,%edx
   1753a:	mov    %rdx,%rcx
   1753d:	shr    $0x1f,%ecx
   17540:	add    %edx,%ecx
   17542:	sar    %ecx
   17544:	movslq %ecx,%r9
   17547:	movslq %edx,%r10
   1754a:	shl    $0x3,%r13d
   1754e:	mov    %r13,-0x70(%rbp)
   17552:	mov    %rax,%r8
   17555:	xor    %r11d,%r11d
   17558:	mov    -0x78(%rbp),%r12
   1755c:	mov    -0x40(%rbp),%rcx
   17560:	mov    %r11,%rdx
   17563:	mov    %rdx,%rdi
   17566:	jmp    175ce <int_downsample+0x10e>
   17568:	lea    0x1(%rsi),%r13
   1756c:	add    $0x1,%edx
   1756f:	movzbl (%rsi),%eax
   17572:	add    %rax,%rcx
   17575:	mov    %r13,%rsi
   17578:	cmp    %ebx,%edx
   1757a:	jl     17568 <int_downsample+0xa8>
   1757c:	add    $0x1,%edi
   1757f:	mov    -0x78(%rbp),%rax
   17583:	lea    0x1(%rax),%edx
   17586:	mov    -0x48(%rbp),%rsi
   1758a:	cmp    %r8d,%edx
   1758d:	jl     175f0 <int_downsample+0x130>
   1758f:	lea    (%r9,%rcx,1),%rax
   17593:	cqto   
   17595:	idiv   %r10
   17598:	mov    -0x38(%rbp),%rcx
   1759c:	mov    %al,(%rcx)
   1759e:	lea    0x1(%rcx),%rax
   175a2:	mov    -0x68(%rbp),%rcx
   175a6:	add    $0x1,%ecx
   175a9:	mov    -0x50(%rbp),%rdx
   175ad:	add    %ebx,%edx
   175af:	mov    -0x58(%rbp),%rdi
   175b3:	mov    -0x70(%rbp),%r13
   175b7:	cmp    %r13d,%ecx
   175ba:	jb     17603 <int_downsample+0x143>
   175bc:	mov    -0x60(%rbp),%rax
   175c0:	lea    0x1(%rax),%edx
   175c3:	add    %r8d,%edi
   175c6:	mov    -0x30(%rbp),%r14
   175ca:	mov    -0x40(%rbp),%rcx
   175ce:	mov    %rdi,-0x58(%rbp)
   175d2:	movslq 0xc(%r14),%rax
   175d6:	cmp    %edx,%eax
   175d8:	jg     17620 <int_downsample+0x160>
   175da:	mov    -0x18(%rbp),%r13
   175de:	mov    -0x10(%rbp),%r12
   175e2:	mov    -0x8(%rbp),%rbx
   175e6:	mov    -0x20(%rbp),%r14
   175ea:	mov    -0x28(%rbp),%r15
   175ee:	leaveq 
   175ef:	retq   
   175f0:	movslq %edi,%rax
   175f3:	add    (%r12,%rax,8),%rsi
   175f7:	mov    %rdx,-0x78(%rbp)
   175fb:	mov    %r11,%rdx
   175fe:	jmpq   17578 <int_downsample+0xb8>
   17603:	mov    %edx,%esi
   17605:	mov    %rax,-0x38(%rbp)
   17609:	mov    %rcx,-0x68(%rbp)
   1760d:	mov    %rdx,-0x50(%rbp)
   17611:	mov    %rsi,-0x48(%rbp)
   17615:	mov    %r11,%rcx
   17618:	mov    %rcx,%rdx
   1761b:	jmpq   1758a <int_downsample+0xca>
   17620:	movslq %edx,%rax
   17623:	mov    (%rcx,%rax,8),%rax
   17627:	mov    %rdx,-0x60(%rbp)
   1762b:	mov    %r11,%rcx
   1762e:	mov    %rcx,%rdx
   17631:	jmp    175b7 <int_downsample+0xf7>
   17633:	data16 nopw %cs:0x0(%rax,%rax,1)
   1763e:	xchg   %ax,%ax

0000000000017640 <fullsize_downsample>:
   17640:	push   %rbp
   17641:	mov    %rsp,%rbp
   17644:	sub    $0x20,%rsp
   17648:	mov    %r13,-0x8(%rbp)
   1764c:	mov    %r14,-0x10(%rbp)
   17650:	mov    %r15,-0x18(%rbp)
   17654:	mov    %rsi,%r13
   17657:	mov    %rcx,%r14
   1765a:	mov    %rdi,%r15
   1765d:	mov    %rdx,%rdi
   17660:	xor    %esi,%esi
   17662:	movslq 0x13c(%r15),%r8
   17669:	mov    0x30(%r15),%r9d
   1766d:	mov    %rsi,%rcx
   17670:	mov    %r14,%rdx
   17673:	callq  43f0 <jcopy_sample_rows@plt>
   17678:	movslq 0x13c(%r15),%rsi
   1767f:	mov    0x30(%r15),%edx
   17683:	mov    0x1c(%r13),%ecx
   17687:	shl    $0x3,%ecx
   1768a:	mov    %r14,%rdi
   1768d:	callq  173c0 <expand_right_edge>
   17692:	mov    -0x18(%rbp),%r15
   17696:	mov    -0x10(%rbp),%r14
   1769a:	mov    -0x8(%rbp),%r13
   1769e:	leaveq 
   1769f:	retq   

00000000000176a0 <h2v1_downsample>:
   176a0:	push   %rbp
   176a1:	mov    %rsp,%rbp
   176a4:	sub    $0x20,%rsp
   176a8:	mov    %r12,-0x8(%rbp)
   176ac:	mov    %r13,-0x10(%rbp)
   176b0:	mov    %r14,-0x18(%rbp)
   176b4:	mov    %r15,-0x20(%rbp)
   176b8:	movslq 0x13c(%rdi),%rax
   176bf:	mov    0x30(%rdi),%r9d
   176c3:	mov    %rdx,%r13
   176c6:	mov    %r9,%rdx
   176c9:	mov    %rcx,%r14
   176cc:	mov    %rsi,%r15
   176cf:	mov    %rax,%rsi
   176d2:	mov    0x1c(%r15),%r12d
   176d6:	mov    %r12,%rcx
   176d9:	shl    $0x4,%ecx
   176dc:	mov    %r13,%rdi
   176df:	callq  173c0 <expand_right_edge>
   176e4:	shl    $0x3,%r12d
   176e8:	xor    %esi,%esi
   176ea:	mov    %rsi,%r10
   176ed:	jmp    17720 <h2v1_downsample+0x80>
   176ef:	mov    %r8,%r11
   176f2:	xor    $0x1,%r11d
   176f6:	movzbl 0x1(%rax),%edx
   176fa:	movzbl (%rax),%ecx
   176fd:	add    %edx,%ecx
   176ff:	add    %ecx,%r8d
   17702:	shr    %r8d
   17705:	mov    %r8b,(%rdi)
   17708:	add    $0x2,%rax
   1770c:	add    $0x1,%rdi
   17710:	add    $0x1,%r9d
   17714:	mov    %r11,%r8
   17717:	cmp    %r12d,%r9d
   1771a:	jb     176ef <h2v1_downsample+0x4f>
   1771c:	add    $0x1,%r10d
   17720:	movslq 0xc(%r15),%rax
   17724:	cmp    %r10d,%eax
   17727:	jg     1773b <h2v1_downsample+0x9b>
   17729:	mov    -0x20(%rbp),%r15
   1772d:	mov    -0x18(%rbp),%r14
   17731:	mov    -0x10(%rbp),%r13
   17735:	mov    -0x8(%rbp),%r12
   17739:	leaveq 
   1773a:	retq   
   1773b:	movslq %r10d,%rax
   1773e:	mov    (%r14,%rax,8),%rdi
   17742:	mov    0x0(%r13,%rax,8),%rax
   17747:	mov    %rsi,%r8
   1774a:	mov    %r8,%r9
   1774d:	jmp    17717 <h2v1_downsample+0x77>
   1774f:	nop

0000000000017750 <h2v2_downsample>:
   17750:	push   %rbp
   17751:	mov    %rsp,%rbp
   17754:	sub    $0x30,%rsp
   17758:	mov    %r12,-0x10(%rbp)
   1775c:	mov    %r13,-0x18(%rbp)
   17760:	mov    %r14,-0x20(%rbp)
   17764:	mov    %r15,-0x28(%rbp)
   17768:	mov    %rbx,-0x8(%rbp)
   1776c:	movslq 0x13c(%rdi),%rax
   17773:	mov    0x30(%rdi),%r8d
   17777:	mov    %rsi,%r13
   1777a:	mov    %rax,%rsi
   1777d:	mov    %rcx,%r14
   17780:	mov    %rdx,%r15
   17783:	mov    %r8,%rdx
   17786:	mov    0x1c(%r13),%r12d
   1778a:	mov    %r12,%rcx
   1778d:	shl    $0x4,%ecx
   17790:	mov    %r15,%rdi
   17793:	callq  173c0 <expand_right_edge>
   17798:	shl    $0x3,%r12d
   1779c:	xor    %eax,%eax
   1779e:	mov    $0x1,%r9d
   177a4:	mov    %rax,%r10
   177a7:	mov    %r10,%r11
   177aa:	jmp    177f7 <h2v2_downsample+0xa7>
   177ac:	mov    %r9,%rsi
   177af:	xor    $0x3,%esi
   177b2:	movzbl 0x1(%rbx),%edx
   177b6:	movzbl (%rbx),%ecx
   177b9:	add    %ecx,%edx
   177bb:	movzbl (%rdi),%ecx
   177be:	add    %ecx,%edx
   177c0:	movzbl 0x1(%rdi),%ecx
   177c4:	add    %edx,%ecx
   177c6:	add    %ecx,%r9d
   177c9:	shr    $0x2,%r9d
   177cd:	mov    %r9b,(%r8)
   177d0:	add    $0x2,%rdi
   177d4:	add    $0x2,%rbx
   177d8:	add    $0x1,%r8
   177dc:	add    $0x1,%eax
   177df:	mov    %rsi,%r9
   177e2:	cmp    %r12d,%eax
   177e5:	jb     177ac <h2v2_downsample+0x5c>
   177e7:	add    $0x1,%r10d
   177eb:	add    $0x2,%r11d
   177ef:	mov    $0x1,%r9d
   177f5:	xor    %eax,%eax
   177f7:	movslq 0xc(%r13),%rcx
   177fb:	cmp    %r10d,%ecx
   177fe:	jg     17816 <h2v2_downsample+0xc6>
   17800:	mov    -0x8(%rbp),%rbx
   17804:	mov    -0x28(%rbp),%r15
   17808:	mov    -0x20(%rbp),%r14
   1780c:	mov    -0x18(%rbp),%r13
   17810:	mov    -0x10(%rbp),%r12
   17814:	leaveq 
   17815:	retq   
   17816:	movslq %r10d,%rcx
   17819:	mov    (%r14,%rcx,8),%r8
   1781d:	movslq %r11d,%rcx
   17820:	mov    (%r15,%rcx,8),%rbx
   17824:	lea    0x1(%r11),%ecx
   17828:	movslq %ecx,%rcx
   1782b:	mov    (%r15,%rcx,8),%rdi
   1782f:	jmp    177e2 <h2v2_downsample+0x92>
   17831:	data16 nopw %cs:0x0(%rax,%rax,1)
   1783c:	nopl   0x0(%rax)

0000000000017840 <h2v2_smooth_downsample>:
   17840:	push   %rbp
   17841:	mov    %rsp,%rbp
   17844:	sub    $0x60,%rsp
   17848:	mov    %rbx,-0x8(%rbp)
   1784c:	mov    %r12,-0x10(%rbp)
   17850:	mov    %r13,-0x18(%rbp)
   17854:	mov    %r14,-0x20(%rbp)
   17858:	mov    %r15,-0x28(%rbp)
   1785c:	mov    %rsi,-0x38(%rbp)
   17860:	mov    %rdx,-0x50(%rbp)
   17864:	mov    %rcx,-0x40(%rbp)
   17868:	lea    -0x8(%rdx),%rbx
   1786c:	movslq 0x13c(%rdi),%rax
   17873:	add    $0x2,%eax
   17876:	mov    %rdx,%r12
   17879:	mov    %rsi,%r13
   1787c:	mov    %rax,%rsi
   1787f:	mov    %rdi,%r15
   17882:	mov    %rbx,%rdi
   17885:	mov    %rcx,%rbx
   17888:	mov    0x30(%r15),%edx
   1788c:	mov    0x1c(%r13),%r14d
   17890:	mov    %r14,%rcx
   17893:	shl    $0x4,%ecx
   17896:	callq  173c0 <expand_right_edge>
   1789b:	movslq 0x110(%r15),%rcx
   178a2:	mov    %rcx,%rax
   178a5:	shl    $0x4,%eax
   178a8:	movslq %eax,%r15
   178ab:	mov    $0x4000,%eax
   178b0:	lea    (%rcx,%rcx,4),%ecx
   178b3:	shl    $0x4,%ecx
   178b6:	sub    %ecx,%eax
   178b8:	movslq %eax,%r11
   178bb:	xor    %eax,%eax
   178bd:	lea    -0x2(,%r14,8),%ecx
   178c5:	mov    %rcx,-0x30(%rbp)
   178c9:	mov    %rax,%rdi
   178cc:	jmpq   17a15 <h2v2_smooth_downsample+0x1d5>
   178d1:	lea    0x2(%r9),%r13
   178d5:	movzbl 0x0(%r13),%r10d
   178da:	movzbl -0x1(%r9),%ebx
   178df:	add    %r10d,%ebx
   178e2:	movzbl -0x1(%rdx),%r10d
   178e7:	add    %r10d,%ebx
   178ea:	lea    0x2(%rdx),%r14
   178ee:	movzbl (%r14),%r10d
   178f2:	add    %r10d,%ebx
   178f5:	movslq %ebx,%r12
   178f8:	movzbl 0x1(%r9),%r10d
   178fd:	movzbl (%r9),%ebx
   17901:	add    %r10d,%ebx
   17904:	movzbl (%rdx),%r9d
   17908:	add    %r9d,%ebx
   1790b:	movzbl 0x1(%rdx),%edx
   1790f:	add    %ebx,%edx
   17911:	movzbl -0x1(%rsi),%ebx
   17915:	lea    (%rbx,%rdx,1),%r9d
   17919:	lea    0x2(%rsi),%rbx
   1791d:	movzbl (%rbx),%edx
   17920:	add    %edx,%r9d
   17923:	movzbl -0x1(%r8),%edx
   17928:	lea    (%rdx,%r9,1),%r10d
   1792c:	lea    0x2(%r8),%r9
   17930:	movzbl (%r9),%edx
   17934:	add    %r10d,%edx
   17937:	movslq %edx,%rdx
   1793a:	lea    (%r12,%rdx,2),%rdx
   1793e:	imul   %r15,%rdx
   17942:	movzbl 0x1(%rsi),%r10d
   17947:	movzbl (%rsi),%esi
   1794a:	add    %r10d,%esi
   1794d:	movzbl (%r8),%r10d
   17951:	add    %r10d,%esi
   17954:	movzbl 0x1(%r8),%r8d
   17959:	add    %r8d,%esi
   1795c:	movslq %esi,%rsi
   1795f:	imul   %r11,%rsi
   17963:	lea    0x8000(%rdx,%rsi,1),%rdx
   1796b:	sar    $0x10,%rdx
   1796f:	mov    %dl,(%rax)
   17971:	add    $0x1,%rax
   17975:	add    $0xffffffff,%ecx
   17978:	mov    %r14,%rdx
   1797b:	mov    %rbx,%rsi
   1797e:	mov    %r9,%r8
   17981:	mov    %r13,%r9
   17984:	test   %ecx,%ecx
   17986:	jne    178d1 <h2v2_smooth_downsample+0x91>
   1798c:	movzbl 0x1(%r9),%ebx
   17991:	movzbl -0x1(%r9),%ecx
   17996:	add    %ebx,%ecx
   17998:	movzbl -0x1(%rdx),%r10d
   1799d:	add    %r10d,%ecx
   179a0:	movzbl 0x1(%rdx),%r12d
   179a5:	add    %r12d,%ecx
   179a8:	movslq %ecx,%r10
   179ab:	movzbl (%r9),%ecx
   179af:	add    %ebx,%ecx
   179b1:	movzbl (%rdx),%edx
   179b4:	add    %edx,%ecx
   179b6:	add    %r12d,%ecx
   179b9:	movzbl -0x1(%rsi),%edx
   179bd:	add    %edx,%ecx
   179bf:	movzbl 0x1(%rsi),%ebx
   179c3:	add    %ebx,%ecx
   179c5:	movzbl -0x1(%r8),%edx
   179ca:	add    %edx,%ecx
   179cc:	movzbl 0x1(%r8),%r9d
   179d1:	add    %r9d,%ecx
   179d4:	movslq %ecx,%rcx
   179d7:	lea    (%r10,%rcx,2),%rcx
   179db:	imul   %r15,%rcx
   179df:	movzbl (%rsi),%edx
   179e2:	add    %ebx,%edx
   179e4:	movzbl (%r8),%esi
   179e8:	add    %esi,%edx
   179ea:	add    %r9d,%edx
   179ed:	movslq %edx,%rdx
   179f0:	imul   %r11,%rdx
   179f4:	lea    0x8000(%rcx,%rdx,1),%rcx
   179fc:	sar    $0x10,%rcx
   17a00:	mov    %cl,(%rax)
   17a02:	add    $0x1,%edi
   17a05:	mov    -0x40(%rbp),%rbx
   17a09:	mov    -0x50(%rbp),%r12
   17a0d:	mov    -0x38(%rbp),%r13
   17a11:	mov    -0x58(%rbp),%rax
   17a15:	movslq 0xc(%r13),%rcx
   17a19:	cmp    %edi,%ecx
   17a1b:	jg     17a33 <h2v2_smooth_downsample+0x1f3>
   17a1d:	mov    -0x28(%rbp),%r15
   17a21:	mov    -0x20(%rbp),%r14
   17a25:	mov    -0x18(%rbp),%r13
   17a29:	mov    -0x10(%rbp),%r12
   17a2d:	mov    -0x8(%rbp),%rbx
   17a31:	leaveq 
   17a32:	retq   
   17a33:	lea    -0x1(%rax),%ecx
   17a36:	movslq %ecx,%rcx
   17a39:	mov    (%r12,%rcx,8),%r10
   17a3d:	lea    0x2(%r10),%r9
   17a41:	movzbl (%r9),%ecx
   17a45:	movzbl (%r10),%r8d
   17a49:	add    %r8d,%ecx
   17a4c:	lea    0x2(%rax),%edx
   17a4f:	mov    %rdx,-0x58(%rbp)
   17a53:	movslq %edx,%rdx
   17a56:	mov    (%r12,%rdx,8),%r14
   17a5a:	movzbl (%r14),%r13d
   17a5e:	add    %r13d,%ecx
   17a61:	lea    0x2(%r14),%rdx
   17a65:	movzbl (%rdx),%esi
   17a68:	add    %esi,%ecx
   17a6a:	movslq %ecx,%rsi
   17a6d:	movzbl 0x1(%r10),%ecx
   17a72:	add    %r8d,%ecx
   17a75:	add    %r13d,%ecx
   17a78:	movzbl 0x1(%r14),%r8d
   17a7d:	add    %r8d,%ecx
   17a80:	movslq %eax,%r8
   17a83:	mov    (%r12,%r8,8),%r13
   17a87:	movzbl 0x0(%r13),%r10d
   17a8c:	add    %r10d,%ecx
   17a8f:	lea    0x2(%r13),%r8
   17a93:	mov    %r8,-0x48(%rbp)
   17a97:	movzbl (%r8),%r8d
   17a9b:	add    %r8d,%ecx
   17a9e:	add    $0x1,%eax
   17aa1:	movslq %eax,%rax
   17aa4:	mov    (%r12,%rax,8),%r14
   17aa8:	movzbl (%r14),%r12d
   17aac:	lea    (%r12,%rcx,1),%eax
   17ab0:	lea    0x2(%r14),%r8
   17ab4:	movzbl (%r8),%ecx
   17ab8:	add    %ecx,%eax
   17aba:	movslq %eax,%rax
   17abd:	lea    (%rsi,%rax,2),%rax
   17ac1:	mov    %r15,%rsi
   17ac4:	imul   %rax,%rsi
   17ac8:	movzbl 0x1(%r13),%eax
   17acd:	add    %r10d,%eax
   17ad0:	add    %r12d,%eax
   17ad3:	movzbl 0x1(%r14),%ecx
   17ad8:	add    %ecx,%eax
   17ada:	movslq %eax,%rax
   17add:	imul   %r11,%rax
   17ae1:	lea    0x8000(%rsi,%rax,1),%rax
   17ae9:	sar    $0x10,%rax
   17aed:	movslq %edi,%rcx
   17af0:	mov    (%rbx,%rcx,8),%rcx
   17af4:	mov    %al,(%rcx)
   17af6:	lea    0x1(%rcx),%rax
   17afa:	mov    -0x48(%rbp),%rsi
   17afe:	mov    -0x30(%rbp),%rcx
   17b02:	jmpq   17984 <h2v2_smooth_downsample+0x144>
   17b07:	nopw   0x0(%rax,%rax,1)

0000000000017b10 <fullsize_smooth_downsample>:
   17b10:	push   %rbp
   17b11:	mov    %rsp,%rbp
   17b14:	sub    $0x50,%rsp
   17b18:	mov    %rbx,-0x8(%rbp)
   17b1c:	mov    %r12,-0x10(%rbp)
   17b20:	mov    %r13,-0x18(%rbp)
   17b24:	mov    %r14,-0x20(%rbp)
   17b28:	mov    %r15,-0x28(%rbp)
   17b2c:	mov    %rdx,-0x38(%rbp)
   17b30:	mov    %rcx,-0x30(%rbp)
   17b34:	lea    -0x8(%rdx),%r8
   17b38:	movslq 0x13c(%rdi),%rax
   17b3f:	add    $0x2,%eax
   17b42:	mov    %rcx,%r12
   17b45:	mov    %rdx,%r13
   17b48:	mov    %rsi,%r14
   17b4b:	mov    %rax,%rsi
   17b4e:	mov    %rdi,%r15
   17b51:	mov    %r8,%rdi
   17b54:	mov    0x30(%r15),%edx
   17b58:	mov    0x1c(%r14),%ebx
   17b5c:	mov    %rbx,%rcx
   17b5f:	shl    $0x3,%ecx
   17b62:	callq  173c0 <expand_right_edge>
   17b67:	movslq 0x110(%r15),%rax
   17b6e:	mov    %rax,%rcx
   17b71:	shl    $0x6,%ecx
   17b74:	movslq %ecx,%r15
   17b77:	mov    $0x10000,%r11d
   17b7d:	shl    $0x9,%rax
   17b81:	sub    %rax,%r11
   17b84:	xor    %ecx,%ecx
   17b86:	lea    -0x2(,%rbx,8),%eax
   17b8d:	mov    %rax,-0x48(%rbp)
   17b91:	jmpq   17c28 <fullsize_smooth_downsample+0x118>
   17b96:	add    $0x1,%rdi
   17b9a:	movzbl (%rdi),%r12d
   17b9e:	add    $0x1,%rbx
   17ba2:	movzbl (%rbx),%esi
   17ba5:	add    %r12d,%esi
   17ba8:	lea    0x1(%r8),%r13
   17bac:	movzbl 0x0(%r13),%r12d
   17bb1:	add    %r12d,%esi
   17bb4:	movslq %esi,%r12
   17bb7:	movzbl (%r8),%r8d
   17bbb:	sub    %r8,%rdx
   17bbe:	add    %r10,%rdx
   17bc1:	add    %r12,%rdx
   17bc4:	imul   %r15,%rdx
   17bc8:	imul   %r11,%r8
   17bcc:	lea    0x8000(%rdx,%r8,1),%rdx
   17bd4:	sar    $0x10,%rdx
   17bd8:	mov    %dl,(%rcx)
   17bda:	add    $0x1,%rcx
   17bde:	add    $0xffffffff,%eax
   17be1:	mov    %r9,%rdx
   17be4:	mov    %rsi,%r9
   17be7:	mov    %r13,%r8
   17bea:	movslq %edx,%r10
   17bed:	movslq %r9d,%rdx
   17bf0:	test   %eax,%eax
   17bf2:	jne    17b96 <fullsize_smooth_downsample+0x86>
   17bf4:	movzbl (%r8),%esi
   17bf8:	sub    %rsi,%r10
   17bfb:	lea    (%r10,%rdx,2),%rax
   17bff:	imul   %r15,%rax
   17c03:	mov    %r11,%rdx
   17c06:	imul   %rsi,%rdx
   17c0a:	lea    0x8000(%rax,%rdx,1),%rax
   17c12:	sar    $0x10,%rax
   17c16:	mov    %al,(%rcx)
   17c18:	mov    -0x48(%rbp),%rax
   17c1c:	mov    -0x30(%rbp),%r12
   17c20:	mov    -0x40(%rbp),%rcx
   17c24:	mov    -0x38(%rbp),%r13
   17c28:	movslq 0xc(%r14),%rdx
   17c2c:	cmp    %ecx,%edx
   17c2e:	jg     17c46 <fullsize_smooth_downsample+0x136>
   17c30:	mov    -0x28(%rbp),%r15
   17c34:	mov    -0x20(%rbp),%r14
   17c38:	mov    -0x18(%rbp),%r13
   17c3c:	mov    -0x10(%rbp),%r12
   17c40:	mov    -0x8(%rbp),%rbx
   17c44:	leaveq 
   17c45:	retq   
   17c46:	lea    0x1(%rcx),%edx
   17c49:	mov    %rdx,-0x40(%rbp)
   17c4d:	movslq %edx,%rdx
   17c50:	mov    0x0(%r13,%rdx,8),%r10
   17c55:	lea    0x1(%r10),%rdi
   17c59:	movzbl (%rdi),%r8d
   17c5d:	lea    -0x1(%rcx),%edx
   17c60:	movslq %edx,%rdx
   17c63:	mov    0x0(%r13,%rdx,8),%rdx
   17c68:	lea    0x1(%rdx),%rbx
   17c6c:	movzbl (%rbx),%esi
   17c6f:	lea    (%r8,%rsi,1),%r9d
   17c73:	movslq %ecx,%rsi
   17c76:	mov    0x0(%r13,%rsi,8),%r13
   17c7b:	lea    0x1(%r13),%r8
   17c7f:	movzbl (%r8),%ecx
   17c83:	add    %ecx,%r9d
   17c86:	movslq %r9d,%rcx
   17c89:	movzbl 0x0(%r13),%r13d
   17c8e:	sub    %r13,%rcx
   17c91:	movzbl (%r10),%r10d
   17c95:	movzbl (%rdx),%edx
   17c98:	add    %r10d,%edx
   17c9b:	add    %r13d,%edx
   17c9e:	movslq %edx,%r10
   17ca1:	lea    (%rcx,%r10,2),%rcx
   17ca5:	mov    %r15,%r10
   17ca8:	imul   %rcx,%r10
   17cac:	mov    %r11,%rcx
   17caf:	imul   %r13,%rcx
   17cb3:	lea    0x8000(%r10,%rcx,1),%rcx
   17cbb:	sar    $0x10,%rcx
   17cbf:	mov    (%r12,%rsi,8),%rsi
   17cc3:	mov    %cl,(%rsi)
   17cc5:	lea    0x1(%rsi),%rcx
   17cc9:	jmpq   17bea <fullsize_smooth_downsample+0xda>
   17cce:	xchg   %ax,%ax

0000000000017cd0 <jpeg_write_coefficients>:
   17cd0:	push   %rbp
   17cd1:	mov    %rsp,%rbp
   17cd4:	sub    $0x10,%rsp
   17cd8:	mov    %r14,-0x8(%rbp)
   17cdc:	mov    %r15,-0x10(%rbp)
   17ce0:	movslq 0x24(%rdi),%rax
   17ce4:	cmp    $0x64,%eax
   17ce7:	jne    17cf1 <jpeg_write_coefficients+0x21>
   17ce9:	mov    %rdi,%r14
   17cec:	mov    %rsi,%r15
   17cef:	jmp    17d13 <jpeg_write_coefficients+0x43>
   17cf1:	mov    (%rdi),%rax
   17cf4:	movl   $0x14,0x28(%rax)
   17cfb:	movslq 0x24(%rdi),%rcx
   17cff:	mov    (%rdi),%rax
   17d02:	mov    %ecx,0x2c(%rax)
   17d05:	mov    (%rdi),%rax
   17d08:	mov    (%rax),%rax
   17d0b:	mov    %rsi,%r15
   17d0e:	mov    %rdi,%r14
   17d11:	callq  *%rax
   17d13:	xor    %esi,%esi
   17d15:	mov    %r14,%rdi
   17d18:	callq  4390 <jpeg_suppress_tables@plt>
   17d1d:	mov    (%r14),%rax
   17d20:	mov    0x20(%rax),%rax
   17d24:	mov    %r14,%rdi
   17d27:	callq  *%rax
   17d29:	mov    0x28(%r14),%rax
   17d2d:	mov    0x10(%rax),%rax
   17d31:	mov    %r14,%rdi
   17d34:	callq  *%rax
   17d36:	mov    %r15,%rsi
   17d39:	mov    %r14,%rdi
   17d3c:	callq  18040 <transencode_master_selection>
   17d41:	movl   $0x0,0x130(%r14)
   17d4c:	movl   $0x67,0x24(%r14)
   17d54:	mov    -0x10(%rbp),%r15
   17d58:	mov    -0x8(%rbp),%r14
   17d5c:	leaveq 
   17d5d:	retq   
   17d5e:	xchg   %ax,%ax

0000000000017d60 <jpeg_copy_critical_parameters>:
   17d60:	push   %rbp
   17d61:	mov    %rsp,%rbp
   17d64:	sub    $0x50,%rsp
   17d68:	mov    %r14,-0x20(%rbp)
   17d6c:	mov    %r15,-0x28(%rbp)
   17d70:	mov    %rsi,-0x50(%rbp)
   17d74:	mov    %rbx,-0x8(%rbp)
   17d78:	mov    %r12,-0x10(%rbp)
   17d7c:	mov    %r13,-0x18(%rbp)
   17d80:	mov    %rdi,-0x48(%rbp)
   17d84:	movslq 0x24(%rsi),%rax
   17d88:	cmp    $0x64,%eax
   17d8b:	jne    17d95 <jpeg_copy_critical_parameters+0x35>
   17d8d:	mov    %rsi,%rbx
   17d90:	mov    %rdi,%r14
   17d93:	jmp    17dba <jpeg_copy_critical_parameters+0x5a>
   17d95:	mov    (%rsi),%rax
   17d98:	movl   $0x14,0x28(%rax)
   17d9f:	movslq 0x24(%rsi),%rcx
   17da3:	mov    (%rsi),%rax
   17da6:	mov    %ecx,0x2c(%rax)
   17da9:	mov    (%rsi),%rax
   17dac:	mov    (%rax),%rax
   17daf:	mov    %rsi,%rbx
   17db2:	mov    %rdi,%r14
   17db5:	mov    %rbx,%rdi
   17db8:	callq  *%rax
   17dba:	mov    0x30(%r14),%eax
   17dbe:	mov    %eax,0x30(%rbx)
   17dc1:	mov    0x34(%r14),%eax
   17dc5:	mov    %eax,0x34(%rbx)
   17dc8:	movslq 0x38(%r14),%rax
   17dcc:	mov    %eax,0x38(%rbx)
   17dcf:	mov    0x3c(%r14),%eax
   17dd3:	mov    %eax,0x3c(%rbx)
   17dd6:	mov    %rbx,%rdi
   17dd9:	callq  4110 <jpeg_set_defaults@plt>
   17dde:	mov    0x3c(%r14),%esi
   17de2:	mov    %rbx,%rdi
   17de5:	callq  4170 <jpeg_set_colorspace@plt>
   17dea:	movslq 0x128(%r14),%rax
   17df1:	mov    %eax,0x48(%rbx)
   17df4:	movslq 0x188(%r14),%rax
   17dfb:	mov    %eax,0x10c(%rbx)
   17e01:	mov    $0x80,%r13d
   17e07:	xor    %r12d,%r12d
   17e0a:	jmp    17e5b <jpeg_copy_critical_parameters+0xfb>
   17e0c:	movslq %r12d,%r15
   17e0f:	mov    0xc8(%r14,%r15,8),%rax
   17e17:	test   %rax,%rax
   17e1a:	je     17e57 <jpeg_copy_critical_parameters+0xf7>
   17e1c:	mov    0x60(%rbx,%r15,8),%rax
   17e21:	test   %rax,%rax
   17e24:	jne    17e33 <jpeg_copy_critical_parameters+0xd3>
   17e26:	mov    %rbx,%rdi
   17e29:	callq  4270 <jpeg_alloc_quant_table@plt>
   17e2e:	mov    %rax,0x60(%rbx,%r15,8)
   17e33:	mov    0x60(%rbx,%r15,8),%rdi
   17e38:	mov    0xc8(%r14,%r15,8),%rsi
   17e40:	mov    %r13,%rdx
   17e43:	callq  42c0 <memcpy@plt>
   17e48:	mov    0x60(%rbx,%r15,8),%rax
   17e4d:	movl   $0x0,0x80(%rax)
   17e57:	add    $0x1,%r12d
   17e5b:	cmp    $0x3,%r12d
   17e5f:	jle    17e0c <jpeg_copy_critical_parameters+0xac>
   17e61:	movslq 0x38(%r14),%rax
   17e65:	mov    %eax,0x4c(%rbx)
   17e68:	test   %eax,%eax
   17e6a:	jle    17e71 <jpeg_copy_critical_parameters+0x111>
   17e6c:	cmp    $0xa,%eax
   17e6f:	jle    17e9a <jpeg_copy_critical_parameters+0x13a>
   17e71:	mov    (%rbx),%rax
   17e74:	movl   $0x1a,0x28(%rax)
   17e7b:	movslq 0x4c(%rbx),%rcx
   17e7f:	mov    (%rbx),%rax
   17e82:	mov    %ecx,0x2c(%rax)
   17e85:	mov    (%rbx),%rax
   17e88:	movl   $0xa,0x30(%rax)
   17e8f:	mov    (%rbx),%rax
   17e92:	mov    (%rax),%rax
   17e95:	mov    %rbx,%rdi
   17e98:	callq  *%rax
   17e9a:	mov    0x130(%r14),%rax
   17ea1:	mov    0x58(%rbx),%rcx
   17ea5:	xor    %r12d,%r12d
   17ea8:	mov    %r12,%rdx
   17eab:	jmp    17f04 <jpeg_copy_critical_parameters+0x1a4>
   17ead:	mov    (%rbx),%rsi
   17eb0:	movl   $0x34,0x28(%rsi)
   17eb7:	mov    (%rbx),%rsi
   17eba:	mov    %r13d,0x2c(%rsi)
   17ebe:	mov    (%rbx),%rsi
   17ec1:	mov    (%rsi),%rsi
   17ec4:	mov    %rbx,%rdi
   17ec7:	mov    %rcx,%rbx
   17eca:	mov    %rdx,%r12
   17ecd:	mov    %rax,%r15
   17ed0:	callq  *%rsi
   17ed2:	mov    %r15,%rax
   17ed5:	mov    %rbx,%rcx
   17ed8:	mov    %r12,%rdx
   17edb:	mov    %r14,%rsi
   17ede:	xor    %r12d,%r12d
   17ee1:	mov    -0x50(%rbp),%rbx
   17ee5:	mov    0xc8(%rsi,%r13,8),%r15
   17eed:	mov    0x50(%rax),%r14
   17ef1:	test   %r14,%r14
   17ef4:	jne    17f2d <jpeg_copy_critical_parameters+0x1cd>
   17ef6:	mov    %rsi,%r14
   17ef9:	add    $0x1,%edx
   17efc:	add    $0x60,%rax
   17f00:	add    $0x60,%rcx
   17f04:	movslq 0x4c(%rbx),%rsi
   17f08:	cmp    %edx,%esi
   17f0a:	jg     17f3e <jpeg_copy_critical_parameters+0x1de>
   17f0c:	movslq 0x174(%r14),%rax
   17f13:	test   %eax,%eax
   17f15:	jne    17f85 <jpeg_copy_critical_parameters+0x225>
   17f17:	mov    -0x18(%rbp),%r13
   17f1b:	mov    -0x10(%rbp),%r12
   17f1f:	mov    -0x8(%rbp),%rbx
   17f23:	mov    -0x28(%rbp),%r15
   17f27:	mov    -0x20(%rbp),%r14
   17f2b:	leaveq 
   17f2c:	retq   
   17f2d:	mov    %rdx,-0x30(%rbp)
   17f31:	mov    %rax,-0x40(%rbp)
   17f35:	mov    %rcx,-0x38(%rbp)
   17f39:	jmpq   1801a <jpeg_copy_critical_parameters+0x2ba>
   17f3e:	movslq (%rax),%rsi
   17f41:	mov    %esi,(%rcx)
   17f43:	movslq 0x8(%rax),%rsi
   17f47:	mov    %esi,0x8(%rcx)
   17f4a:	movslq 0xc(%rax),%rsi
   17f4e:	mov    %esi,0xc(%rcx)
   17f51:	movslq 0x10(%rax),%r13
   17f55:	mov    %r13d,0x10(%rcx)
   17f59:	test   %r13d,%r13d
   17f5c:	js     17ead <jpeg_copy_critical_parameters+0x14d>
   17f62:	cmp    $0x3,%r13d
   17f66:	jg     17ead <jpeg_copy_critical_parameters+0x14d>
   17f6c:	mov    0xc8(%r14,%r13,8),%rsi
   17f74:	test   %rsi,%rsi
   17f77:	je     17ead <jpeg_copy_critical_parameters+0x14d>
   17f7d:	mov    %r14,%rsi
   17f80:	jmpq   17ee5 <jpeg_copy_critical_parameters+0x185>
   17f85:	movzbl 0x178(%r14),%eax
   17f8d:	cmp    $0x1,%al
   17f8f:	jne    17fa6 <jpeg_copy_critical_parameters+0x246>
   17f91:	movb   $0x1,0x124(%rbx)
   17f98:	movzbl 0x179(%r14),%eax
   17fa0:	mov    %al,0x125(%rbx)
   17fa6:	movzbl 0x17a(%r14),%eax
   17fae:	mov    %al,0x126(%rbx)
   17fb4:	movzwl 0x17c(%r14),%eax
   17fbc:	mov    %ax,0x128(%rbx)
   17fc3:	movzwl 0x17e(%r14),%eax
   17fcb:	mov    %ax,0x12a(%rbx)
   17fd2:	mov    -0x18(%rbp),%r13
   17fd6:	mov    -0x10(%rbp),%r12
   17fda:	mov    -0x8(%rbp),%rbx
   17fde:	mov    -0x28(%rbp),%r15
   17fe2:	mov    -0x20(%rbp),%r14
   17fe6:	leaveq 
   17fe7:	retq   
   17fe8:	movslq %r12d,%rax
   17feb:	movzwl (%r15,%rax,2),%ecx
   17ff0:	movzwl (%r14,%rax,2),%eax
   17ff5:	cmp    %ax,%cx
   17ff8:	je     18016 <jpeg_copy_critical_parameters+0x2b6>
   17ffa:	mov    (%rbx),%rax
   17ffd:	movl   $0x2c,0x28(%rax)
   18004:	mov    (%rbx),%rax
   18007:	mov    %r13d,0x2c(%rax)
   1800b:	mov    (%rbx),%rax
   1800e:	mov    (%rax),%rax
   18011:	mov    %rbx,%rdi
   18014:	callq  *%rax
   18016:	add    $0x1,%r12d
   1801a:	cmp    $0x3f,%r12d
   1801e:	jle    17fe8 <jpeg_copy_critical_parameters+0x288>
   18020:	mov    -0x48(%rbp),%r14
   18024:	mov    -0x38(%rbp),%rcx
   18028:	mov    -0x40(%rbp),%rax
   1802c:	mov    -0x30(%rbp),%rdx
   18030:	xor    %r12d,%r12d
   18033:	jmpq   17ef9 <jpeg_copy_critical_parameters+0x199>
   18038:	nopl   0x0(%rax,%rax,1)

0000000000018040 <transencode_master_selection>:
   18040:	push   %rbp
   18041:	mov    %rsp,%rbp
   18044:	sub    $0x10,%rsp
   18048:	mov    %r14,-0x8(%rbp)
   1804c:	mov    %r15,-0x10(%rbp)
   18050:	mov    %rsi,%r15
   18053:	movl   $0x1,0x38(%rdi)
   1805a:	mov    $0x1,%esi
   1805f:	mov    %rdi,%r14
   18062:	callq  43c0 <jinit_c_master_control@plt>
   18067:	movslq 0x104(%r14),%rax
   1806e:	test   %eax,%eax
   18070:	jne    18087 <transencode_master_selection+0x47>
   18072:	movslq 0x134(%r14),%rax
   18079:	test   %eax,%eax
   1807b:	jne    180c8 <transencode_master_selection+0x88>
   1807d:	mov    %r14,%rdi
   18080:	callq  4080 <jinit_huff_encoder@plt>
   18085:	jmp    1808f <transencode_master_selection+0x4f>
   18087:	mov    %r14,%rdi
   1808a:	callq  4190 <jinit_arith_encoder@plt>
   1808f:	mov    %r15,%rsi
   18092:	mov    %r14,%rdi
   18095:	callq  180e0 <transencode_coef_controller>
   1809a:	mov    %r14,%rdi
   1809d:	callq  4120 <jinit_marker_writer@plt>
   180a2:	mov    0x8(%r14),%rax
   180a6:	mov    0x30(%rax),%rax
   180aa:	mov    %r14,%rdi
   180ad:	callq  *%rax
   180af:	mov    0x1d0(%r14),%rax
   180b6:	mov    (%rax),%rax
   180b9:	mov    %r14,%rdi
   180bc:	callq  *%rax
   180be:	mov    -0x10(%rbp),%r15
   180c2:	mov    -0x8(%rbp),%r14
   180c6:	leaveq 
   180c7:	retq   
   180c8:	mov    %r14,%rdi
   180cb:	callq  4460 <jinit_phuff_encoder@plt>
   180d0:	jmp    1808f <transencode_master_selection+0x4f>
   180d2:	data16 nopw %cs:0x0(%rax,%rax,1)
   180dd:	nopl   (%rax)

00000000000180e0 <transencode_coef_controller>:
   180e0:	push   %rbp
   180e1:	mov    %rsp,%rbp
   180e4:	sub    $0x20,%rsp
   180e8:	mov    %r13,-0x8(%rbp)
   180ec:	mov    %r14,-0x10(%rbp)
   180f0:	mov    %r15,-0x18(%rbp)
   180f4:	mov    0x8(%rdi),%rax
   180f8:	mov    (%rax),%rax
   180fb:	mov    %rsi,%r14
   180fe:	mov    $0x1,%r13d
   18104:	mov    $0x78,%edx
   18109:	mov    %rdi,%r15
   1810c:	mov    %r13,%rsi
   1810f:	callq  *%rax
   18111:	mov    %rax,0x1c8(%r15)
   18118:	lea    0xd1(%rip),%rcx        # 181f0 <start_pass_coef>
   1811f:	mov    %rcx,(%rax)
   18122:	lea    0x127(%rip),%rcx        # 18250 <compress_output>
   18129:	mov    %rcx,0x8(%rax)
   1812d:	mov    %r14,0x20(%rax)
   18131:	mov    0x8(%r15),%rcx
   18135:	mov    0x8(%rcx),%rcx
   18139:	mov    %r13,%rsi
   1813c:	mov    %rax,%r13
   1813f:	mov    %r15,%rdi
   18142:	mov    $0x500,%r14d
   18148:	mov    %r14,%rdx
   1814b:	callq  *%rcx
   1814d:	mov    %r14,%rsi
   18150:	mov    %rax,%r14
   18153:	mov    %r14,%rdi
   18156:	callq  44d0 <jzero_far@plt>
   1815b:	xor    %ecx,%ecx
   1815d:	jmp    18174 <transencode_coef_controller+0x94>
   1815f:	movslq %ecx,%rdx
   18162:	mov    %rdx,%rax
   18165:	shl    $0x7,%rax
   18169:	add    %r14,%rax
   1816c:	mov    %rax,0x28(%r13,%rdx,8)
   18171:	add    $0x1,%ecx
   18174:	cmp    $0x9,%ecx
   18177:	jle    1815f <transencode_coef_controller+0x7f>
   18179:	mov    -0x18(%rbp),%r15
   1817d:	mov    -0x10(%rbp),%r14
   18181:	mov    -0x8(%rbp),%r13
   18185:	leaveq 
   18186:	retq   
   18187:	nopw   0x0(%rax,%rax,1)

0000000000018190 <start_iMCU_row>:
   18190:	push   %rbp
   18191:	mov    %rsp,%rbp
   18194:	mov    0x1c8(%rdi),%rcx
   1819b:	movslq 0x144(%rdi),%rax
   181a2:	cmp    $0x1,%eax
   181a5:	jg     181c5 <start_iMCU_row+0x35>
   181a7:	mov    0x140(%rdi),%eax
   181ad:	add    $0xffffffff,%eax
   181b0:	cmp    0x10(%rcx),%eax
   181b3:	ja     181dc <start_iMCU_row+0x4c>
   181b5:	mov    0x148(%rdi),%rax
   181bc:	movslq 0x48(%rax),%rax
   181c0:	mov    %eax,0x1c(%rcx)
   181c3:	jmp    181cc <start_iMCU_row+0x3c>
   181c5:	movl   $0x1,0x1c(%rcx)
   181cc:	movl   $0x0,0x14(%rcx)
   181d3:	movl   $0x0,0x18(%rcx)
   181da:	leaveq 
   181db:	retq   
   181dc:	mov    0x148(%rdi),%rax
   181e3:	movslq 0xc(%rax),%rax
   181e7:	mov    %eax,0x1c(%rcx)
   181ea:	jmp    181cc <start_iMCU_row+0x3c>
   181ec:	nopl   0x0(%rax)

00000000000181f0 <start_pass_coef>:
   181f0:	push   %rbp
   181f1:	mov    %rsp,%rbp
   181f4:	sub    $0x10,%rsp
   181f8:	mov    0x1c8(%rdi),%rax
   181ff:	cmp    $0x2,%esi
   18202:	je     18238 <start_pass_coef+0x48>
   18204:	mov    (%rdi),%rcx
   18207:	movl   $0x4,0x28(%rcx)
   1820e:	mov    (%rdi),%rcx
   18211:	mov    (%rcx),%rcx
   18214:	mov    %rdi,%rdx
   18217:	mov    %r14,-0x8(%rbp)
   1821b:	mov    %r15,-0x10(%rbp)
   1821f:	mov    %rdi,%r14
   18222:	mov    %rdx,%rdi
   18225:	mov    %rax,%r15
   18228:	callq  *%rcx
   1822a:	mov    %r15,%rax
   1822d:	mov    %r14,%rdi
   18230:	mov    -0x10(%rbp),%r15
   18234:	mov    -0x8(%rbp),%r14
   18238:	movl   $0x0,0x10(%rax)
   1823f:	callq  18190 <start_iMCU_row>
   18244:	leaveq 
   18245:	retq   
   18246:	nopw   %cs:0x0(%rax,%rax,1)

0000000000018250 <compress_output>:
   18250:	push   %rbp
   18251:	mov    %rsp,%rbp
   18254:	sub    $0xd0,%rsp
   1825b:	mov    %rbx,-0x8(%rbp)
   1825f:	mov    %r12,-0x10(%rbp)
   18263:	mov    %r13,-0x18(%rbp)
   18267:	mov    %r14,-0x20(%rbp)
   1826b:	mov    %r15,-0x28(%rbp)
   1826f:	mov    0x1c8(%rdi),%rax
   18276:	mov    %rax,-0x48(%rbp)
   1827a:	mov    0x168(%rdi),%ecx
   18280:	mov    %rcx,-0x58(%rbp)
   18284:	mov    0x140(%rdi),%ecx
   1828a:	mov    %rcx,-0x60(%rbp)
   1828e:	mov    %rdi,%r15
   18291:	xor    %r14d,%r14d
   18294:	mov    %r14,%rbx
   18297:	jmp    182dc <compress_output+0x8c>
   18299:	movslq %ebx,%r12
   1829c:	mov    0x148(%r15,%r12,8),%rdi
   182a4:	movslq 0x4(%rdi),%rcx
   182a8:	mov    0x20(%rax),%rdx
   182ac:	mov    (%rdx,%rcx,8),%rsi
   182b0:	mov    0xc(%rdi),%ecx
   182b3:	mov    %rcx,%rdx
   182b6:	imul   0x10(%rax),%edx
   182ba:	mov    0x8(%r15),%rdi
   182be:	mov    0x40(%rdi),%r9
   182c2:	mov    %rax,%r13
   182c5:	mov    %r15,%rdi
   182c8:	mov    %r14,%r8
   182cb:	callq  *%r9
   182ce:	mov    %rax,-0xd0(%rbp,%r12,8)
   182d6:	add    $0x1,%ebx
   182d9:	mov    %r13,%rax
   182dc:	movslq 0x144(%r15),%rcx
   182e3:	cmp    %ebx,%ecx
   182e5:	jg     18299 <compress_output+0x49>
   182e7:	movslq 0x18(%rax),%rdi
   182eb:	mov    -0x58(%rbp),%rcx
   182ef:	lea    -0x1(%rcx),%r12d
   182f3:	mov    %r12,-0x30(%rbp)
   182f7:	mov    -0x60(%rbp),%rcx
   182fb:	lea    -0x1(%rcx),%ebx
   182fe:	mov    %rbx,-0x40(%rbp)
   18302:	jmpq   183be <compress_output+0x16e>
   18307:	movslq %ecx,%rsi
   1830a:	mov    0x28(%rax,%rsi,8),%rbx
   1830f:	mov    %rbx,-0xb0(%rbp,%rsi,8)
   18317:	lea    -0x1(%rcx),%esi
   1831a:	movslq %esi,%rsi
   1831d:	mov    -0xb0(%rbp,%rsi,8),%rsi
   18325:	movswq (%rsi),%rsi
   18329:	mov    %si,(%rbx)
   1832c:	add    $0x1,%ecx
   1832f:	add    $0x1,%edx
   18332:	movslq 0x34(%r10),%rsi
   18336:	cmp    %edx,%esi
   18338:	jg     18307 <compress_output+0xb7>
   1833a:	add    $0x1,%r8d
   1833e:	mov    -0x38(%rbp),%rsi
   18342:	mov    -0x40(%rbp),%rbx
   18346:	movslq 0x38(%r10),%rdx
   1834a:	cmp    %r8d,%edx
   1834d:	jg     183fa <compress_output+0x1aa>
   18353:	mov    -0x60(%rbp),%rdx
   18357:	add    $0x1,%edx
   1835a:	mov    -0x30(%rbp),%r12
   1835e:	mov    -0x58(%rbp),%r13
   18362:	mov    %rdx,-0x60(%rbp)
   18366:	movslq 0x144(%r15),%rsi
   1836d:	cmp    %edx,%esi
   1836f:	jg     18415 <compress_output+0x1c5>
   18375:	mov    0x1f0(%r15),%rax
   1837c:	mov    0x8(%rax),%rax
   18380:	mov    %r15,%rdi
   18383:	lea    -0xb0(%rbp),%rsi
   1838a:	callq  *%rax
   1838c:	test   %eax,%eax
   1838e:	je     18442 <compress_output+0x1f2>
   18394:	add    $0x1,%r13d
   18398:	mov    -0x50(%rbp),%rdi
   1839c:	mov    -0x48(%rbp),%rax
   183a0:	mov    %r13,-0x58(%rbp)
   183a4:	mov    0x168(%r15),%ecx
   183ab:	cmp    %r13d,%ecx
   183ae:	ja     1846a <compress_output+0x21a>
   183b4:	movl   $0x0,0x14(%rax)
   183bb:	add    $0x1,%edi
   183be:	mov    %rdi,-0x50(%rbp)
   183c2:	movslq 0x1c(%rax),%rcx
   183c6:	cmp    %edi,%ecx
   183c8:	jg     18475 <compress_output+0x225>
   183ce:	mov    0x10(%rax),%ecx
   183d1:	add    $0x1,%ecx
   183d4:	mov    %ecx,0x10(%rax)
   183d7:	mov    %r15,%rdi
   183da:	callq  18190 <start_iMCU_row>
   183df:	mov    $0x1,%eax
   183e4:	mov    -0x28(%rbp),%r15
   183e8:	mov    -0x20(%rbp),%r14
   183ec:	mov    -0x18(%rbp),%r13
   183f0:	mov    -0x10(%rbp),%r12
   183f4:	mov    -0x8(%rbp),%rbx
   183f8:	leaveq 
   183f9:	retq   
   183fa:	mov    0x10(%rax),%edx
   183fd:	cmp    %ebx,%edx
   183ff:	jb     1847e <compress_output+0x22e>
   18401:	lea    (%rdi,%r8,1),%edx
   18405:	movslq 0x48(%r10),%rbx
   18409:	cmp    %edx,%ebx
   1840b:	jg     1847e <compress_output+0x22e>
   1840d:	mov    %r14,%rdx
   18410:	jmpq   18332 <compress_output+0xe2>
   18415:	movslq %edx,%r11
   18418:	mov    0x148(%r15,%r11,8),%r10
   18420:	movslq 0x34(%r10),%r9
   18424:	mov    %r13,%rdx
   18427:	imul   %r9d,%edx
   1842b:	mov    %edx,%esi
   1842d:	shl    $0x7,%rsi
   18431:	mov    %rsi,-0x38(%rbp)
   18435:	cmp    %r12d,%r13d
   18438:	jae    18496 <compress_output+0x246>
   1843a:	mov    %r14,%r8
   1843d:	jmpq   18346 <compress_output+0xf6>
   18442:	mov    -0x50(%rbp),%rcx
   18446:	mov    -0x48(%rbp),%rax
   1844a:	mov    %ecx,0x18(%rax)
   1844d:	mov    %r13d,0x14(%rax)
   18451:	mov    %r14,%rax
   18454:	mov    -0x28(%rbp),%r15
   18458:	mov    -0x20(%rbp),%r14
   1845c:	mov    -0x18(%rbp),%r13
   18460:	mov    -0x10(%rbp),%r12
   18464:	mov    -0x8(%rbp),%rbx
   18468:	leaveq 
   18469:	retq   
   1846a:	mov    %r14,%rcx
   1846d:	mov    %rcx,%rdx
   18470:	jmpq   18362 <compress_output+0x112>
   18475:	mov    0x14(%rax),%r13d
   18479:	jmpq   183a0 <compress_output+0x150>
   1847e:	lea    (%rdi,%r8,1),%edx
   18482:	movslq %edx,%rdx
   18485:	mov    -0xd0(%rbp,%r11,8),%rbx
   1848d:	add    (%rbx,%rdx,8),%rsi
   18491:	mov    %r14,%rdx
   18494:	jmp    184ba <compress_output+0x26a>
   18496:	movslq 0x44(%r10),%r9
   1849a:	mov    %r14,%r8
   1849d:	jmpq   18346 <compress_output+0xf6>
   184a2:	movslq %ecx,%rbx
   184a5:	mov    %rsi,-0xb0(%rbp,%rbx,8)
   184ad:	add    $0x80,%rsi
   184b4:	add    $0x1,%ecx
   184b7:	add    $0x1,%edx
   184ba:	cmp    %r9d,%edx
   184bd:	jl     184a2 <compress_output+0x252>
   184bf:	jmpq   18332 <compress_output+0xe2>
   184c4:	nopw   %cs:0x0(%rax,%rax,1)
   184ce:	xchg   %ax,%ax

00000000000184d0 <jpeg_CreateDecompress>:
   184d0:	push   %rbp
   184d1:	mov    %rsp,%rbp
   184d4:	sub    $0x20,%rsp
   184d8:	mov    %r14,-0x18(%rbp)
   184dc:	mov    %r15,-0x20(%rbp)
   184e0:	mov    %r12,-0x8(%rbp)
   184e4:	mov    %r13,-0x10(%rbp)
   184e8:	movq   $0x0,0x8(%rdi)
   184f0:	cmp    $0x3e,%esi
   184f3:	jne    184fa <jpeg_CreateDecompress+0x2a>
   184f5:	mov    %rdi,%r12
   184f8:	jmp    18525 <jpeg_CreateDecompress+0x55>
   184fa:	mov    (%rdi),%rax
   184fd:	movl   $0xc,0x28(%rax)
   18504:	mov    (%rdi),%rax
   18507:	movl   $0x3e,0x2c(%rax)
   1850e:	mov    (%rdi),%rax
   18511:	mov    %esi,0x30(%rax)
   18514:	mov    (%rdi),%rax
   18517:	mov    (%rax),%rax
   1851a:	mov    %rdx,%r13
   1851d:	mov    %rdi,%r12
   18520:	callq  *%rax
   18522:	mov    %r13,%rdx
   18525:	cmp    $0x278,%rdx
   1852c:	je     18557 <jpeg_CreateDecompress+0x87>
   1852e:	mov    (%r12),%rax
   18532:	movl   $0x15,0x28(%rax)
   18539:	mov    (%r12),%rax
   1853d:	movl   $0x278,0x2c(%rax)
   18544:	mov    (%r12),%rax
   18548:	mov    %edx,0x30(%rax)
   1854b:	mov    (%r12),%rax
   1854f:	mov    (%rax),%rax
   18552:	mov    %r12,%rdi
   18555:	callq  *%rax
   18557:	xor    %r13d,%r13d
   1855a:	mov    $0x278,%edx
   1855f:	mov    (%r12),%r15
   18563:	mov    0x18(%r12),%r14
   18568:	mov    %r12,%rdi
   1856b:	mov    %r13,%rsi
   1856e:	callq  41e0 <memset@plt>
   18573:	mov    %r15,(%r12)
   18577:	mov    %r14,0x18(%r12)
   1857c:	movl   $0x1,0x20(%r12)
   18585:	mov    %r12,%rdi
   18588:	callq  4240 <jinit_memory_mgr@plt>
   1858d:	movq   $0x0,0x10(%r12)
   18596:	movq   $0x0,0x28(%r12)
   1859f:	mov    %r13,%rax
   185a2:	jmp    185b6 <jpeg_CreateDecompress+0xe6>
   185a4:	movslq %eax,%rcx
   185a7:	movq   $0x0,0xc8(%r12,%rcx,8)
   185b3:	add    $0x1,%eax
   185b6:	cmp    $0x3,%eax
   185b9:	jle    185a4 <jpeg_CreateDecompress+0xd4>
   185bb:	mov    %r13,%rax
   185be:	jmp    185de <jpeg_CreateDecompress+0x10e>
   185c0:	movslq %eax,%rcx
   185c3:	movq   $0x0,0xe8(%r12,%rcx,8)
   185cf:	movq   $0x0,0x108(%r12,%rcx,8)
   185db:	add    $0x1,%eax
   185de:	cmp    $0x3,%eax
   185e1:	jle    185c0 <jpeg_CreateDecompress+0xf0>
   185e3:	movq   $0x0,0x190(%r12)
   185ef:	mov    %r12,%rdi
   185f2:	callq  44b0 <jinit_marker_reader@plt>
   185f7:	mov    %r12,%rdi
   185fa:	callq  43d0 <jinit_input_controller@plt>
   185ff:	movl   $0xc8,0x24(%r12)
   18608:	mov    0x8(%r12),%rax
   1860d:	mov    (%rax),%rax
   18610:	mov    $0x88,%r14d
   18616:	mov    %r12,%rdi
   18619:	mov    %r13,%rsi
   1861c:	mov    %r14,%rdx
   1861f:	callq  *%rax
   18621:	mov    %rax,0x220(%r12)
   18629:	mov    %r14,%rdx
   1862c:	mov    %r13,%rsi
   1862f:	mov    %rax,%rdi
   18632:	callq  41e0 <memset@plt>
   18637:	mov    -0x10(%rbp),%r13
   1863b:	mov    -0x8(%rbp),%r12
   1863f:	mov    -0x20(%rbp),%r15
   18643:	mov    -0x18(%rbp),%r14
   18647:	leaveq 
   18648:	retq   
   18649:	nopl   0x0(%rax)

0000000000018650 <jpeg_destroy_decompress>:
   18650:	push   %rbp
   18651:	mov    %rsp,%rbp
   18654:	callq  4030 <jpeg_destroy@plt>
   18659:	leaveq 
   1865a:	retq   
   1865b:	nopl   0x0(%rax,%rax,1)

0000000000018660 <jpeg_read_header>:
   18660:	push   %rbp
   18661:	mov    %rsp,%rbp
   18664:	sub    $0x20,%rsp
   18668:	mov    %rsi,-0x10(%rbp)
   1866c:	mov    %rdi,-0x8(%rbp)
   18670:	movslq 0x24(%rdi),%rax
   18674:	cmp    $0xc8,%eax
   18679:	jne    1868c <jpeg_read_header+0x2c>
   1867b:	callq  4160 <jpeg_consume_input@plt>
   18680:	cmp    $0x1,%eax
   18683:	jne    186c5 <jpeg_read_header+0x65>
   18685:	mov    $0x1,%eax
   1868a:	leaveq 
   1868b:	retq   
   1868c:	cmp    $0xc9,%eax
   18691:	je     1867b <jpeg_read_header+0x1b>
   18693:	mov    (%rdi),%rax
   18696:	movl   $0x14,0x28(%rax)
   1869d:	movslq 0x24(%rdi),%rcx
   186a1:	mov    (%rdi),%rax
   186a4:	mov    %ecx,0x2c(%rax)
   186a7:	mov    (%rdi),%rax
   186aa:	mov    (%rax),%rax
   186ad:	mov    %rdi,%rcx
   186b0:	mov    %r15,-0x18(%rbp)
   186b4:	mov    %rdi,%r15
   186b7:	mov    %rcx,%rdi
   186ba:	callq  *%rax
   186bc:	mov    %r15,%rdi
   186bf:	mov    -0x18(%rbp),%r15
   186c3:	jmp    1867b <jpeg_read_header+0x1b>
   186c5:	cmp    $0x2,%eax
   186c8:	je     186cc <jpeg_read_header+0x6c>
   186ca:	leaveq 
   186cb:	retq   
   186cc:	mov    -0x10(%rbp),%rax
   186d0:	test   %eax,%eax
   186d2:	jne    186da <jpeg_read_header+0x7a>
   186d4:	mov    -0x8(%rbp),%rdi
   186d8:	jmp    18701 <jpeg_read_header+0xa1>
   186da:	mov    -0x8(%rbp),%rcx
   186de:	mov    (%rcx),%rax
   186e1:	movl   $0x33,0x28(%rax)
   186e8:	mov    (%rcx),%rax
   186eb:	mov    (%rax),%rax
   186ee:	mov    %rcx,%rdi
   186f1:	mov    %r15,-0x18(%rbp)
   186f5:	mov    %rcx,%r15
   186f8:	callq  *%rax
   186fa:	mov    %r15,%rdi
   186fd:	mov    -0x18(%rbp),%r15
   18701:	callq  4130 <jpeg_abort@plt>
   18706:	mov    $0x2,%eax
   1870b:	leaveq 
   1870c:	retq   
   1870d:	nopl   (%rax)

0000000000018710 <jpeg_finish_decompress>:
   18710:	push   %rbp
   18711:	mov    %rsp,%rbp
   18714:	sub    $0x10,%rsp
   18718:	mov    %r15,-0x8(%rbp)
   1871c:	movslq 0x24(%rdi),%rax
   18720:	cmp    $0xcd,%eax
   18725:	je     18745 <jpeg_finish_decompress+0x35>
   18727:	cmp    $0xce,%eax
   1872c:	je     18745 <jpeg_finish_decompress+0x35>
   1872e:	movslq 0x24(%rdi),%rax
   18732:	cmp    $0xcf,%eax
   18737:	je     18760 <jpeg_finish_decompress+0x50>
   18739:	cmp    $0xd2,%eax
   1873e:	jne    1876d <jpeg_finish_decompress+0x5d>
   18740:	mov    %rdi,%r15
   18743:	jmp    18797 <jpeg_finish_decompress+0x87>
   18745:	movslq 0x58(%rdi),%rax
   18749:	test   %eax,%eax
   1874b:	jne    1872e <jpeg_finish_decompress+0x1e>
   1874d:	mov    0x8c(%rdi),%eax
   18753:	cmp    0xa8(%rdi),%eax
   18759:	ja     187c6 <jpeg_finish_decompress+0xb6>
   1875b:	mov    %rdi,%r15
   1875e:	jmp    187db <jpeg_finish_decompress+0xcb>
   18760:	mov    %rdi,%r15
   18763:	movl   $0xd2,0x24(%r15)
   1876b:	jmp    18797 <jpeg_finish_decompress+0x87>
   1876d:	mov    (%rdi),%rax
   18770:	movl   $0x14,0x28(%rax)
   18777:	movslq 0x24(%rdi),%rcx
   1877b:	mov    (%rdi),%rax
   1877e:	mov    %ecx,0x2c(%rax)
   18781:	mov    (%rdi),%rax
   18784:	mov    (%rax),%rax
   18787:	mov    %rdi,%r15
   1878a:	callq  *%rax
   1878c:	jmp    18797 <jpeg_finish_decompress+0x87>
   1878e:	mov    %r15,%rdi
   18791:	callq  *(%rax)
   18793:	test   %eax,%eax
   18795:	je     187f5 <jpeg_finish_decompress+0xe5>
   18797:	mov    0x240(%r15),%rax
   1879e:	movslq 0x24(%rax),%rcx
   187a2:	test   %ecx,%ecx
   187a4:	je     1878e <jpeg_finish_decompress+0x7e>
   187a6:	mov    0x28(%r15),%rax
   187aa:	mov    0x30(%rax),%rax
   187ae:	mov    %r15,%rdi
   187b1:	callq  *%rax
   187b3:	mov    %r15,%rdi
   187b6:	callq  4130 <jpeg_abort@plt>
   187bb:	mov    $0x1,%eax
   187c0:	mov    -0x8(%rbp),%r15
   187c4:	leaveq 
   187c5:	retq   
   187c6:	mov    (%rdi),%rax
   187c9:	movl   $0x43,0x28(%rax)
   187d0:	mov    (%rdi),%rax
   187d3:	mov    (%rax),%rax
   187d6:	mov    %rdi,%r15
   187d9:	callq  *%rax
   187db:	mov    0x220(%r15),%rax
   187e2:	mov    0x8(%rax),%rax
   187e6:	mov    %r15,%rdi
   187e9:	callq  *%rax
   187eb:	movl   $0xd2,0x24(%r15)
   187f3:	jmp    18797 <jpeg_finish_decompress+0x87>
   187f5:	xor    %eax,%eax
   187f7:	mov    -0x8(%rbp),%r15
   187fb:	leaveq 
   187fc:	retq   
   187fd:	nopl   (%rax)

0000000000018800 <jpeg_has_multiple_scans>:
   18800:	push   %rbp
   18801:	mov    %rsp,%rbp
   18804:	sub    $0x10,%rsp
   18808:	movslq 0x24(%rdi),%rax
   1880c:	cmp    $0xc9,%eax
   18811:	jle    1881a <jpeg_has_multiple_scans+0x1a>
   18813:	cmp    $0xd2,%eax
   18818:	jle    1884a <jpeg_has_multiple_scans+0x4a>
   1881a:	mov    (%rdi),%rax
   1881d:	movl   $0x14,0x28(%rax)
   18824:	movslq 0x24(%rdi),%rcx
   18828:	mov    (%rdi),%rax
   1882b:	mov    %ecx,0x2c(%rax)
   1882e:	mov    (%rdi),%rax
   18831:	mov    (%rax),%rax
   18834:	mov    %rdi,%rcx
   18837:	mov    %r15,-0x8(%rbp)
   1883b:	mov    %rdi,%r15
   1883e:	mov    %rcx,%rdi
   18841:	callq  *%rax
   18843:	mov    %r15,%rdi
   18846:	mov    -0x8(%rbp),%r15
   1884a:	mov    0x240(%rdi),%rax
   18851:	movslq 0x20(%rax),%rax
   18855:	leaveq 
   18856:	retq   
   18857:	nopw   0x0(%rax,%rax,1)

0000000000018860 <jpeg_input_complete>:
   18860:	push   %rbp
   18861:	mov    %rsp,%rbp
   18864:	sub    $0x10,%rsp
   18868:	movslq 0x24(%rdi),%rax
   1886c:	cmp    $0xc7,%eax
   18871:	jle    1887a <jpeg_input_complete+0x1a>
   18873:	cmp    $0xd2,%eax
   18878:	jle    188aa <jpeg_input_complete+0x4a>
   1887a:	mov    (%rdi),%rax
   1887d:	movl   $0x14,0x28(%rax)
   18884:	movslq 0x24(%rdi),%rcx
   18888:	mov    (%rdi),%rax
   1888b:	mov    %ecx,0x2c(%rax)
   1888e:	mov    (%rdi),%rax
   18891:	mov    (%rax),%rax
   18894:	mov    %rdi,%rcx
   18897:	mov    %r15,-0x8(%rbp)
   1889b:	mov    %rdi,%r15
   1889e:	mov    %rcx,%rdi
   188a1:	callq  *%rax
   188a3:	mov    %r15,%rdi
   188a6:	mov    -0x8(%rbp),%r15
   188aa:	mov    0x240(%rdi),%rax
   188b1:	movslq 0x24(%rax),%rax
   188b5:	leaveq 
   188b6:	retq   
   188b7:	nopw   0x0(%rax,%rax,1)

00000000000188c0 <jpeg_consume_input>:
   188c0:	push   %rbp
   188c1:	mov    %rsp,%rbp
   188c4:	sub    $0x10,%rsp
   188c8:	mov    0x24(%rdi),%ecx
   188cb:	add    $0xffffff38,%ecx
   188d1:	cmp    $0xa,%ecx
   188d4:	ja     188ed <jpeg_consume_input+0x2d>
   188d6:	mov    $0x1,%eax
   188db:	lea    0x40dfe(%rip),%rdx        # 596e0 <val_ac_chrominance.12+0xa6>
   188e2:	movslq (%rdx,%rcx,4),%rcx
   188e6:	add    %rdx,%rcx
   188e9:	jmpq   *%rcx
   188eb:	leaveq 
   188ec:	retq   
   188ed:	mov    (%rdi),%rax
   188f0:	movl   $0x14,0x28(%rax)
   188f7:	movslq 0x24(%rdi),%rcx
   188fb:	mov    (%rdi),%rax
   188fe:	mov    %ecx,0x2c(%rax)
   18901:	mov    (%rdi),%rax
   18904:	mov    (%rax),%rax
   18907:	callq  *%rax
   18909:	xor    %eax,%eax
   1890b:	leaveq 
   1890c:	retq   
   1890d:	mov    0x240(%rdi),%rax
   18914:	mov    0x8(%rax),%rax
   18918:	mov    %rdi,%rcx
   1891b:	mov    %r15,-0x8(%rbp)
   1891f:	mov    %rdi,%r15
   18922:	mov    %rcx,%rdi
   18925:	callq  *%rax
   18927:	mov    0x28(%r15),%rax
   1892b:	mov    0x10(%rax),%rax
   1892f:	mov    %r15,%rdi
   18932:	callq  *%rax
   18934:	mov    %r15,%rdi
   18937:	movl   $0xc9,0x24(%rdi)
   1893e:	mov    -0x8(%rbp),%r15
   18942:	mov    0x240(%rdi),%rax
   18949:	mov    (%rax),%rax
   1894c:	mov    %rdi,%rcx
   1894f:	mov    %rdi,-0x8(%rbp)
   18953:	mov    %rcx,%rdi
   18956:	callq  *%rax
   18958:	cmp    $0x1,%eax
   1895b:	je     1896d <jpeg_consume_input+0xad>
   1895d:	leaveq 
   1895e:	retq   
   1895f:	mov    0x240(%rdi),%rax
   18966:	mov    (%rax),%rax
   18969:	callq  *%rax
   1896b:	leaveq 
   1896c:	retq   
   1896d:	mov    -0x8(%rbp),%rax
   18971:	mov    %rax,%rdi
   18974:	mov    %r15,-0x8(%rbp)
   18978:	mov    %rax,%r15
   1897b:	callq  189b0 <default_decompress_parms>
   18980:	movl   $0xca,0x24(%r15)
   18988:	mov    $0x1,%eax
   1898d:	mov    -0x8(%rbp),%r15
   18991:	leaveq 
   18992:	retq   
   18993:	data16 nopw %cs:0x0(%rax,%rax,1)
   1899e:	xchg   %ax,%ax

00000000000189a0 <jpeg_abort_decompress>:
   189a0:	push   %rbp
   189a1:	mov    %rsp,%rbp
   189a4:	callq  4130 <jpeg_abort@plt>
   189a9:	leaveq 
   189aa:	retq   
   189ab:	nopl   0x0(%rax,%rax,1)

00000000000189b0 <default_decompress_parms>:
   189b0:	push   %rbp
   189b1:	mov    %rsp,%rbp
   189b4:	sub    $0x10,%rsp
   189b8:	movslq 0x38(%rdi),%rax
   189bc:	cmp    $0x2,%eax
   189bf:	jle    189f5 <default_decompress_parms+0x45>
   189c1:	mov    $0xffffffffffffffff,%rsi
   189c8:	cmp    $0x3,%eax
   189cb:	je     18a8e <default_decompress_parms+0xde>
   189d1:	cmp    $0x4,%eax
   189d4:	jne    189fe <default_decompress_parms+0x4e>
   189d6:	movslq 0x180(%rdi),%rax
   189dd:	test   %eax,%eax
   189df:	jne    18b14 <default_decompress_parms+0x164>
   189e5:	movl   $0x4,0x3c(%rdi)
   189ec:	movl   $0x4,0x40(%rdi)
   189f3:	jmp    18a0c <default_decompress_parms+0x5c>
   189f5:	cmp    $0x1,%eax
   189f8:	je     18b6b <default_decompress_parms+0x1bb>
   189fe:	movl   $0x0,0x3c(%rdi)
   18a05:	movl   $0x0,0x40(%rdi)
   18a0c:	movl   $0x1,0x44(%rdi)
   18a13:	movl   $0x1,0x48(%rdi)
   18a1a:	movsd  0x40cee(%rip),%xmm0        # 59710 <val_ac_chrominance.12+0xd6>
   18a22:	movsd  %xmm0,0x50(%rdi)
   18a27:	movl   $0x0,0x58(%rdi)
   18a2e:	movl   $0x0,0x5c(%rdi)
   18a35:	movl   $0x0,0x60(%rdi)
   18a3c:	movl   $0x1,0x64(%rdi)
   18a43:	movl   $0x1,0x68(%rdi)
   18a4a:	movl   $0x0,0x6c(%rdi)
   18a51:	movl   $0x2,0x70(%rdi)
   18a58:	movl   $0x1,0x74(%rdi)
   18a5f:	movl   $0x100,0x78(%rdi)
   18a66:	movq   $0x0,0xa0(%rdi)
   18a71:	movl   $0x0,0x7c(%rdi)
   18a78:	movl   $0x0,0x80(%rdi)
   18a82:	movl   $0x0,0x84(%rdi)
   18a8c:	leaveq 
   18a8d:	retq   
   18a8e:	movslq 0x174(%rdi),%rax
   18a95:	test   %eax,%eax
   18a97:	jne    18b7e <default_decompress_parms+0x1ce>
   18a9d:	movslq 0x180(%rdi),%rax
   18aa4:	test   %eax,%eax
   18aa6:	jne    18b91 <default_decompress_parms+0x1e1>
   18aac:	mov    0x130(%rdi),%rdx
   18ab3:	movslq 0x60(%rdx),%rcx
   18ab7:	movslq 0xc0(%rdx),%rax
   18abe:	movslq (%rdx),%rsi
   18ac1:	cmp    $0x1,%esi
   18ac4:	je     18be5 <default_decompress_parms+0x235>
   18aca:	cmp    $0x52,%esi
   18acd:	je     18c00 <default_decompress_parms+0x250>
   18ad3:	mov    (%rdi),%rdx
   18ad6:	mov    %esi,0x2c(%rdx)
   18ad9:	mov    %ecx,0x30(%rdx)
   18adc:	mov    %eax,0x34(%rdx)
   18adf:	mov    (%rdi),%rax
   18ae2:	movl   $0x6f,0x28(%rax)
   18ae9:	mov    (%rdi),%rax
   18aec:	mov    0x8(%rax),%rax
   18af0:	mov    $0x1,%esi
   18af5:	mov    %rdi,%rcx
   18af8:	mov    %r15,-0x8(%rbp)
   18afc:	mov    %rdi,%r15
   18aff:	mov    %rcx,%rdi
   18b02:	callq  *%rax
   18b04:	mov    %r15,%rdi
   18b07:	movl   $0x3,0x3c(%rdi)
   18b0e:	mov    -0x8(%rbp),%r15
   18b12:	jmp    18b85 <default_decompress_parms+0x1d5>
   18b14:	movzbl 0x184(%rdi),%eax
   18b1b:	test   %al,%al
   18b1d:	je     18c1e <default_decompress_parms+0x26e>
   18b23:	cmp    $0x2,%al
   18b25:	je     18c2a <default_decompress_parms+0x27a>
   18b2b:	mov    (%rdi),%rax
   18b2e:	movl   $0x72,0x28(%rax)
   18b35:	movzbl 0x184(%rdi),%ecx
   18b3c:	mov    (%rdi),%rax
   18b3f:	mov    %ecx,0x2c(%rax)
   18b42:	mov    (%rdi),%rax
   18b45:	mov    0x8(%rax),%rax
   18b49:	mov    %rdi,%rcx
   18b4c:	mov    %r15,-0x8(%rbp)
   18b50:	mov    %rdi,%r15
   18b53:	mov    %rcx,%rdi
   18b56:	callq  *%rax
   18b58:	mov    %r15,%rdi
   18b5b:	movl   $0x5,0x3c(%rdi)
   18b62:	mov    -0x8(%rbp),%r15
   18b66:	jmpq   189ec <default_decompress_parms+0x3c>
   18b6b:	movl   $0x1,0x3c(%rdi)
   18b72:	movl   $0x1,0x40(%rdi)
   18b79:	jmpq   18a0c <default_decompress_parms+0x5c>
   18b7e:	movl   $0x3,0x3c(%rdi)
   18b85:	movl   $0x2,0x40(%rdi)
   18b8c:	jmpq   18a0c <default_decompress_parms+0x5c>
   18b91:	movzbl 0x184(%rdi),%eax
   18b98:	test   %al,%al
   18b9a:	je     18c36 <default_decompress_parms+0x286>
   18ba0:	cmp    $0x1,%al
   18ba2:	je     18c42 <default_decompress_parms+0x292>
   18ba8:	mov    (%rdi),%rax
   18bab:	movl   $0x72,0x28(%rax)
   18bb2:	movzbl 0x184(%rdi),%ecx
   18bb9:	mov    (%rdi),%rax
   18bbc:	mov    %ecx,0x2c(%rax)
   18bbf:	mov    (%rdi),%rax
   18bc2:	mov    0x8(%rax),%rax
   18bc6:	mov    %rdi,%rcx
   18bc9:	mov    %r15,-0x8(%rbp)
   18bcd:	mov    %rdi,%r15
   18bd0:	mov    %rcx,%rdi
   18bd3:	callq  *%rax
   18bd5:	mov    %r15,%rdi
   18bd8:	movl   $0x3,0x3c(%rdi)
   18bdf:	mov    -0x8(%rbp),%r15
   18be3:	jmp    18b85 <default_decompress_parms+0x1d5>
   18be5:	cmp    $0x2,%ecx
   18be8:	jne    18aca <default_decompress_parms+0x11a>
   18bee:	cmp    $0x3,%eax
   18bf1:	jne    18aca <default_decompress_parms+0x11a>
   18bf7:	movl   $0x3,0x3c(%rdi)
   18bfe:	jmp    18b85 <default_decompress_parms+0x1d5>
   18c00:	cmp    $0x47,%ecx
   18c03:	jne    18ad3 <default_decompress_parms+0x123>
   18c09:	cmp    $0x42,%eax
   18c0c:	jne    18ad3 <default_decompress_parms+0x123>
   18c12:	movl   $0x2,0x3c(%rdi)
   18c19:	jmpq   18b85 <default_decompress_parms+0x1d5>
   18c1e:	movl   $0x4,0x3c(%rdi)
   18c25:	jmpq   189ec <default_decompress_parms+0x3c>
   18c2a:	movl   $0x5,0x3c(%rdi)
   18c31:	jmpq   189ec <default_decompress_parms+0x3c>
   18c36:	movl   $0x2,0x3c(%rdi)
   18c3d:	jmpq   18b85 <default_decompress_parms+0x1d5>
   18c42:	movl   $0x3,0x3c(%rdi)
   18c49:	jmpq   18b85 <default_decompress_parms+0x1d5>
   18c4e:	xchg   %ax,%ax

0000000000018c50 <jpeg_start_decompress>:
   18c50:	push   %rbp
   18c51:	mov    %rsp,%rbp
   18c54:	sub    $0x10,%rsp
   18c58:	movslq 0x24(%rdi),%rax
   18c5c:	cmp    $0xca,%eax
   18c61:	je     18ca6 <jpeg_start_decompress+0x56>
   18c63:	mov    %r15,%rax
   18c66:	mov    %rdi,%r15
   18c69:	movslq 0x24(%r15),%rcx
   18c6d:	cmp    $0xcb,%ecx
   18c73:	je     18cce <jpeg_start_decompress+0x7e>
   18c75:	cmp    $0xcc,%ecx
   18c7b:	je     18cf5 <jpeg_start_decompress+0xa5>
   18c7d:	mov    (%r15),%rcx
   18c80:	movl   $0x14,0x28(%rcx)
   18c87:	movslq 0x24(%r15),%rdx
   18c8b:	mov    (%r15),%rcx
   18c8e:	mov    %edx,0x2c(%rcx)
   18c91:	mov    (%r15),%rcx
   18c94:	mov    (%rcx),%rcx
   18c97:	mov    %r15,%rdi
   18c9a:	mov    %rax,-0x8(%rbp)
   18c9e:	callq  *%rcx
   18ca0:	mov    -0x8(%rbp),%rax
   18ca4:	jmp    18cf5 <jpeg_start_decompress+0xa5>
   18ca6:	mov    %rdi,%rax
   18ca9:	mov    %r15,-0x8(%rbp)
   18cad:	mov    %rdi,%r15
   18cb0:	mov    %rax,%rdi
   18cb3:	callq  41f0 <jinit_master_decompress@plt>
   18cb8:	movslq 0x58(%r15),%rax
   18cbc:	test   %eax,%eax
   18cbe:	jne    18d02 <jpeg_start_decompress+0xb2>
   18cc0:	movl   $0xcb,0x24(%r15)
   18cc8:	mov    -0x8(%rbp),%rax
   18ccc:	jmp    18c69 <jpeg_start_decompress+0x19>
   18cce:	mov    0x240(%r15),%rcx
   18cd5:	movslq 0x20(%rcx),%rcx
   18cd9:	test   %ecx,%ecx
   18cdb:	je     18ce7 <jpeg_start_decompress+0x97>
   18cdd:	mov    %rax,-0x8(%rbp)
   18ce1:	jmp    18d23 <jpeg_start_decompress+0xd3>
   18ce3:	mov    -0x8(%rbp),%rax
   18ce7:	movslq 0xac(%r15),%rcx
   18cee:	mov    %ecx,0xb4(%r15)
   18cf5:	mov    %r15,%rdi
   18cf8:	mov    %rax,%r15
   18cfb:	callq  19b00 <output_pass_setup>
   18d00:	leaveq 
   18d01:	retq   
   18d02:	movl   $0xcf,0x24(%r15)
   18d0a:	mov    $0x1,%eax
   18d0f:	mov    -0x8(%rbp),%r15
   18d13:	leaveq 
   18d14:	retq   
   18d15:	cmp    $0x2,%eax
   18d18:	je     18ce3 <jpeg_start_decompress+0x93>
   18d1a:	mov    0x10(%r15),%rcx
   18d1e:	test   %rcx,%rcx
   18d21:	jne    18d4c <jpeg_start_decompress+0xfc>
   18d23:	mov    0x10(%r15),%rax
   18d27:	test   %rax,%rax
   18d2a:	je     18d31 <jpeg_start_decompress+0xe1>
   18d2c:	mov    %r15,%rdi
   18d2f:	callq  *(%rax)
   18d31:	mov    0x240(%r15),%rax
   18d38:	mov    (%rax),%rax
   18d3b:	mov    %r15,%rdi
   18d3e:	callq  *%rax
   18d40:	test   %eax,%eax
   18d42:	jne    18d15 <jpeg_start_decompress+0xc5>
   18d44:	xor    %eax,%eax
   18d46:	mov    -0x8(%rbp),%r15
   18d4a:	leaveq 
   18d4b:	retq   
   18d4c:	cmp    $0x3,%eax
   18d4f:	jne    18d7a <jpeg_start_decompress+0x12a>
   18d51:	mov    0x8(%rcx),%rax
   18d55:	add    $0x1,%rax
   18d59:	mov    %rax,0x8(%rcx)
   18d5d:	mov    0x10(%r15),%rdx
   18d61:	mov    0x10(%rdx),%rcx
   18d65:	cmp    %rcx,%rax
   18d68:	jl     18d23 <jpeg_start_decompress+0xd3>
   18d6a:	mov    0x1a4(%r15),%eax
   18d71:	add    %rcx,%rax
   18d74:	mov    %rax,0x10(%rdx)
   18d78:	jmp    18d23 <jpeg_start_decompress+0xd3>
   18d7a:	cmp    $0x1,%eax
   18d7d:	je     18d51 <jpeg_start_decompress+0x101>
   18d7f:	jmp    18d23 <jpeg_start_decompress+0xd3>
   18d81:	data16 nopw %cs:0x0(%rax,%rax,1)
   18d8c:	nopl   0x0(%rax)

0000000000018d90 <jpeg_read_scanlines>:
   18d90:	push   %rbp
   18d91:	mov    %rsp,%rbp
   18d94:	sub    $0x20,%rsp
   18d98:	mov    %r15,-0x18(%rbp)
   18d9c:	movslq 0x24(%rdi),%rax
   18da0:	cmp    $0xcd,%eax
   18da5:	jne    18db2 <jpeg_read_scanlines+0x22>
   18da7:	mov    %r15,%rax
   18daa:	mov    %rdi,%r15
   18dad:	mov    %rdx,%rcx
   18db0:	jmp    18deb <jpeg_read_scanlines+0x5b>
   18db2:	mov    (%rdi),%rax
   18db5:	movl   $0x14,0x28(%rax)
   18dbc:	movslq 0x24(%rdi),%rcx
   18dc0:	mov    (%rdi),%rax
   18dc3:	mov    %ecx,0x2c(%rax)
   18dc6:	mov    (%rdi),%rax
   18dc9:	mov    (%rax),%rax
   18dcc:	mov    %rdi,%rcx
   18dcf:	mov    %rsi,-0x8(%rbp)
   18dd3:	mov    %rdx,-0x10(%rbp)
   18dd7:	mov    %rdi,%r15
   18dda:	mov    %rcx,%rdi
   18ddd:	callq  *%rax
   18ddf:	mov    -0x10(%rbp),%rcx
   18de3:	mov    -0x8(%rbp),%rsi
   18de7:	mov    -0x18(%rbp),%rax
   18deb:	mov    0x8c(%r15),%edi
   18df2:	mov    0xa8(%r15),%edx
   18df9:	cmp    %edx,%edi
   18dfb:	jbe    18e76 <jpeg_read_scanlines+0xe6>
   18dfd:	mov    0x10(%r15),%rax
   18e01:	test   %rax,%rax
   18e04:	je     18e41 <jpeg_read_scanlines+0xb1>
   18e06:	mov    %rdx,0x8(%rax)
   18e0a:	mov    0x8c(%r15),%edx
   18e11:	mov    0x10(%r15),%rax
   18e15:	mov    %rdx,0x10(%rax)
   18e19:	mov    0x10(%r15),%rax
   18e1d:	mov    (%rax),%rax
   18e20:	mov    %r15,%rdi
   18e23:	mov    %r13,-0x8(%rbp)
   18e27:	mov    %r14,-0x10(%rbp)
   18e2b:	mov    %rsi,%r13
   18e2e:	mov    %rcx,%r14
   18e31:	callq  *%rax
   18e33:	mov    %r14,%rcx
   18e36:	mov    %r13,%rsi
   18e39:	mov    -0x10(%rbp),%r14
   18e3d:	mov    -0x8(%rbp),%r13
   18e41:	movl   $0x0,-0x1c(%rbp)
   18e48:	mov    0x228(%r15),%rax
   18e4f:	mov    0x8(%rax),%rax
   18e53:	lea    -0x1c(%rbp),%rdx
   18e57:	mov    %r15,%rdi
   18e5a:	callq  *%rax
   18e5c:	mov    -0x1c(%rbp),%eax
   18e5f:	mov    %rax,%rcx
   18e62:	add    0xa8(%r15),%ecx
   18e69:	mov    %ecx,0xa8(%r15)
   18e70:	mov    -0x18(%rbp),%r15
   18e74:	leaveq 
   18e75:	retq   
   18e76:	mov    (%r15),%rcx
   18e79:	movl   $0x7b,0x28(%rcx)
   18e80:	mov    (%r15),%rcx
   18e83:	mov    0x8(%rcx),%rcx
   18e87:	mov    %r15,%rdi
   18e8a:	mov    %rax,%r15
   18e8d:	mov    $0xffffffffffffffff,%rsi
   18e94:	callq  *%rcx
   18e96:	xor    %eax,%eax
   18e98:	leaveq 
   18e99:	retq   
   18e9a:	nopw   0x0(%rax,%rax,1)

0000000000018ea0 <jpeg_skip_scanlines>:
   18ea0:	push   %rbp
   18ea1:	mov    %rsp,%rbp
   18ea4:	sub    $0x70,%rsp
   18ea8:	mov    %r15,-0x48(%rbp)
   18eac:	mov    0x260(%rdi),%r8
   18eb3:	mov    0x228(%rdi),%r10
   18eba:	mov    0x230(%rdi),%rdx
   18ec1:	movslq 0x24(%rdi),%rax
   18ec5:	cmp    $0xcd,%eax
   18eca:	jne    18edd <jpeg_skip_scanlines+0x3d>
   18ecc:	mov    %r14,%rcx
   18ecf:	mov    %rdi,%r14
   18ed2:	mov    %r15,%r9
   18ed5:	mov    %rbx,%r15
   18ed8:	mov    %rdx,%rbx
   18edb:	jmp    18f2f <jpeg_skip_scanlines+0x8f>
   18edd:	mov    (%rdi),%rax
   18ee0:	movl   $0x14,0x28(%rax)
   18ee7:	movslq 0x24(%rdi),%rcx
   18eeb:	mov    (%rdi),%rax
   18eee:	mov    %ecx,0x2c(%rax)
   18ef1:	mov    (%rdi),%rax
   18ef4:	mov    (%rax),%rax
   18ef7:	mov    %rdi,%rcx
   18efa:	mov    %r14,-0x50(%rbp)
   18efe:	mov    %r10,-0x68(%rbp)
   18f02:	mov    %r8,-0x60(%rbp)
   18f06:	mov    %rdx,-0x58(%rbp)
   18f0a:	mov    %rdi,%r14
   18f0d:	mov    %rcx,%rdi
   18f10:	mov    %rbx,%r15
   18f13:	mov    %rsi,%rbx
   18f16:	callq  *%rax
   18f18:	mov    %rbx,%rsi
   18f1b:	mov    -0x58(%rbp),%rbx
   18f1f:	mov    -0x60(%rbp),%r8
   18f23:	mov    -0x68(%rbp),%r10
   18f27:	mov    -0x48(%rbp),%r9
   18f2b:	mov    -0x50(%rbp),%rcx
   18f2f:	mov    0xa8(%r14),%edx
   18f36:	lea    (%rdx,%rsi,1),%eax
   18f39:	mov    0x8c(%r14),%edi
   18f40:	cmp    %eax,%edi
   18f42:	jbe    18f55 <jpeg_skip_scanlines+0xb5>
   18f44:	xor    %eax,%eax
   18f46:	test   %esi,%esi
   18f48:	jne    18f99 <jpeg_skip_scanlines+0xf9>
   18f4a:	mov    %r15,%rbx
   18f4d:	mov    %r9,%r15
   18f50:	mov    %rcx,%r14
   18f53:	leaveq 
   18f54:	retq   
   18f55:	mov    %edi,0xa8(%r14)
   18f5c:	mov    0x240(%r14),%rax
   18f63:	mov    0x18(%rax),%rax
   18f67:	mov    %rcx,%rbx
   18f6a:	mov    %r14,%rdi
   18f6d:	callq  *%rax
   18f6f:	mov    0x240(%r14),%rax
   18f76:	movl   $0x1,0x24(%rax)
   18f7d:	mov    0x8c(%r14),%eax
   18f84:	mov    0xa8(%r14),%ecx
   18f8b:	sub    %ecx,%eax
   18f8d:	mov    %rbx,%r14
   18f90:	mov    %r15,%rbx
   18f93:	mov    -0x48(%rbp),%r15
   18f97:	leaveq 
   18f98:	retq   
   18f99:	movslq 0x19c(%r14),%r11
   18fa0:	imul   0x1a0(%r14),%r11d
   18fa8:	mov    %rdx,%rax
   18fab:	xor    %edi,%edi
   18fad:	mov    %rdi,%rdx
   18fb0:	div    %r11d
   18fb3:	mov    %r11,%rax
   18fb6:	sub    %edx,%eax
   18fb8:	mov    %rdi,%rdx
   18fbb:	div    %r11d
   18fbe:	mov    %rsi,%rdi
   18fc1:	sub    %edx,%edi
   18fc3:	mov    0x260(%r14),%rax
   18fca:	movslq 0x10(%rax),%rax
   18fce:	test   %eax,%eax
   18fd0:	jne    19045 <jpeg_skip_scanlines+0x1a5>
   18fd2:	cmp    %edx,%esi
   18fd4:	jb     1911f <jpeg_skip_scanlines+0x27f>
   18fda:	add    0xa8(%r14),%edx
   18fe1:	mov    %edx,0xa8(%r14)
   18fe8:	movl   $0x0,0x60(%r10)
   18ff0:	movl   $0x0,0x64(%r10)
   18ff8:	movslq 0x19c(%r14),%rax
   18fff:	mov    %eax,0xb8(%r8)
   19006:	mov    0x8c(%r14),%eax
   1900d:	mov    0xa8(%r14),%edx
   19014:	sub    %edx,%eax
   19016:	mov    %eax,0xbc(%r8)
   1901d:	mov    %rdi,%r9
   19020:	mov    0x260(%r14),%rax
   19027:	movslq 0x10(%rax),%rax
   1902b:	test   %eax,%eax
   1902d:	jne    19146 <jpeg_skip_scanlines+0x2a6>
   19033:	xor    %edx,%edx
   19035:	mov    %r9,%rax
   19038:	div    %r11d
   1903b:	mov    %r9,%rdi
   1903e:	sub    %edx,%edi
   19040:	jmpq   1915c <jpeg_skip_scanlines+0x2bc>
   19045:	lea    0x1(%rdx),%eax
   19048:	cmp    %eax,%esi
   1904a:	jb     191a7 <jpeg_skip_scanlines+0x307>
   19050:	cmp    $0x1,%edx
   19053:	jbe    191ce <jpeg_skip_scanlines+0x32e>
   19059:	xor    %eax,%eax
   1905b:	test   %rax,%rax
   1905e:	jne    191ec <jpeg_skip_scanlines+0x34c>
   19064:	mov    %rdx,%rax
   19067:	add    0xa8(%r14),%eax
   1906e:	mov    %rdi,%r9
   19071:	mov    %eax,0xa8(%r14)
   19078:	mov    0x84(%r10),%eax
   1907f:	test   %eax,%eax
   19081:	je     1908d <jpeg_skip_scanlines+0x1ed>
   19083:	cmp    $0x1,%eax
   19086:	jne    190dd <jpeg_skip_scanlines+0x23d>
   19088:	cmp    $0x2,%edx
   1908b:	jbe    190dd <jpeg_skip_scanlines+0x23d>
   1908d:	mov    %r14,%rdi
   19090:	mov    %rcx,-0x40(%rbp)
   19094:	mov    %rbx,-0x68(%rbp)
   19098:	mov    %rsi,-0x20(%rbp)
   1909c:	mov    %r15,-0x28(%rbp)
   190a0:	mov    %r12,-0x30(%rbp)
   190a4:	mov    %r13,-0x38(%rbp)
   190a8:	mov    %r10,%rbx
   190ab:	mov    %r11,%r12
   190ae:	mov    %r9,%r13
   190b1:	mov    %r8,%r15
   190b4:	callq  199b0 <set_wraparound_pointers>
   190b9:	mov    %r15,%r8
   190bc:	mov    %r13,%r9
   190bf:	mov    %rbx,%r10
   190c2:	mov    %r12,%r11
   190c5:	mov    -0x38(%rbp),%r13
   190c9:	mov    -0x30(%rbp),%r12
   190cd:	mov    -0x28(%rbp),%r15
   190d1:	mov    -0x20(%rbp),%rsi
   190d5:	mov    -0x68(%rbp),%rbx
   190d9:	mov    -0x40(%rbp),%rcx
   190dd:	movl   $0x0,0x60(%r10)
   190e5:	movl   $0x0,0x64(%r10)
   190ed:	movl   $0x0,0x7c(%r10)
   190f5:	movslq 0x19c(%r14),%rax
   190fc:	mov    %eax,0xb8(%r8)
   19103:	mov    0x8c(%r14),%eax
   1910a:	mov    0xa8(%r14),%edx
   19111:	sub    %edx,%eax
   19113:	mov    %eax,0xbc(%r8)
   1911a:	jmpq   19020 <jpeg_skip_scanlines+0x180>
   1911f:	mov    %rsi,%rax
   19122:	mov    %rsi,-0x68(%rbp)
   19126:	mov    %rax,%rsi
   19129:	mov    %r14,%rdi
   1912c:	mov    %rcx,%r14
   1912f:	mov    %r9,%rbx
   19132:	callq  19d50 <increment_simple_rowgroup_ctr>
   19137:	mov    %r15,%rcx
   1913a:	mov    %rbx,%r15
   1913d:	mov    %rcx,%rbx
   19140:	mov    -0x68(%rbp),%rax
   19144:	leaveq 
   19145:	retq   
   19146:	lea    -0x1(%r9),%edi
   1914a:	mov    %rdi,%rax
   1914d:	mov    %rsi,-0x68(%rbp)
   19151:	xor    %edx,%edx
   19153:	div    %r11d
   19156:	sub    %edx,%edi
   19158:	mov    -0x68(%rbp),%rsi
   1915c:	mov    %rdi,-0x60(%rbp)
   19160:	mov    %r9,%rax
   19163:	sub    %edi,%eax
   19165:	mov    %rsi,-0x20(%rbp)
   19169:	mov    0x240(%r14),%rdx
   19170:	movslq 0x20(%rdx),%rdx
   19174:	test   %edx,%edx
   19176:	jne    19211 <jpeg_skip_scanlines+0x371>
   1917c:	mov    %rcx,-0x40(%rbp)
   19180:	mov    %r10,-0x10(%rbp)
   19184:	mov    %r8,-0x8(%rbp)
   19188:	mov    %r15,-0x28(%rbp)
   1918c:	mov    %r12,-0x30(%rbp)
   19190:	mov    %r13,-0x38(%rbp)
   19194:	mov    %r11,-0x50(%rbp)
   19198:	mov    %rax,-0x18(%rbp)
   1919c:	xor    %r12d,%r12d
   1919f:	mov    %r12,%rax
   191a2:	jmpq   19278 <jpeg_skip_scanlines+0x3d8>
   191a7:	mov    %rsi,%rax
   191aa:	mov    %rsi,-0x68(%rbp)
   191ae:	mov    %rax,%rsi
   191b1:	mov    %r14,%rdi
   191b4:	mov    %rcx,%r14
   191b7:	mov    %r9,%rbx
   191ba:	callq  19c60 <read_and_discard_scanlines>
   191bf:	mov    %r15,%rcx
   191c2:	mov    %rbx,%r15
   191c5:	mov    %rcx,%rbx
   191c8:	mov    -0x68(%rbp),%rax
   191cc:	leaveq 
   191cd:	retq   
   191ce:	mov    $0x1,%eax
   191d3:	mov    %rbx,-0x68(%rbp)
   191d7:	movslq 0x60(%r10),%rbx
   191db:	test   %ebx,%ebx
   191dd:	jne    192b5 <jpeg_skip_scanlines+0x415>
   191e3:	mov    -0x68(%rbp),%rbx
   191e7:	jmpq   1905b <jpeg_skip_scanlines+0x1bb>
   191ec:	movslq 0x60(%r10),%rax
   191f0:	test   %eax,%eax
   191f2:	je     19064 <jpeg_skip_scanlines+0x1c4>
   191f8:	lea    (%rdx,%r11,1),%edi
   191fc:	mov    %rdi,%rax
   191ff:	add    0xa8(%r14),%eax
   19206:	mov    %rsi,%r9
   19209:	sub    %edi,%r9d
   1920c:	jmpq   19071 <jpeg_skip_scanlines+0x1d1>
   19211:	mov    0x260(%r14),%rdx
   19218:	movslq 0x10(%rdx),%rdx
   1921c:	test   %edx,%edx
   1921e:	jne    192ca <jpeg_skip_scanlines+0x42a>
   19224:	mov    %rdi,%rdx
   19227:	add    0xa8(%r14),%edx
   1922e:	mov    %edx,0xa8(%r14)
   19235:	mov    %rax,%rsi
   19238:	mov    %rdi,%rax
   1923b:	xor    %edx,%edx
   1923d:	div    %r11d
   19240:	add    0xb8(%r14),%eax
   19247:	mov    %eax,0xb8(%r14)
   1924e:	mov    %r14,%rdi
   19251:	mov    %rcx,-0x68(%rbp)
   19255:	mov    %r8,%rbx
   19258:	callq  19d50 <increment_simple_rowgroup_ctr>
   1925d:	jmpq   1931d <jpeg_skip_scanlines+0x47d>
   19262:	mov    %r14,%rdi
   19265:	callq  19aa0 <start_iMCU_row>
   1926a:	mov    -0x58(%rbp),%rax
   1926e:	mov    -0x50(%rbp),%rcx
   19272:	add    %ecx,%eax
   19274:	mov    -0x60(%rbp),%rdi
   19278:	cmp    %edi,%eax
   1927a:	jb     19344 <jpeg_skip_scanlines+0x4a4>
   19280:	mov    %rdi,%rax
   19283:	add    0xa8(%r14),%eax
   1928a:	mov    %eax,0xa8(%r14)
   19291:	mov    0x260(%r14),%rax
   19298:	movslq 0x10(%rax),%rax
   1929c:	test   %eax,%eax
   1929e:	jne    19350 <jpeg_skip_scanlines+0x4b0>
   192a4:	mov    %r14,%rdi
   192a7:	mov    -0x18(%rbp),%rsi
   192ab:	callq  19d50 <increment_simple_rowgroup_ctr>
   192b0:	jmpq   19377 <jpeg_skip_scanlines+0x4d7>
   192b5:	lea    0x1(%r11),%ebx
   192b9:	cmp    %edi,%ebx
   192bb:	ja     191a7 <jpeg_skip_scanlines+0x307>
   192c1:	mov    -0x68(%rbp),%rbx
   192c5:	jmpq   1905b <jpeg_skip_scanlines+0x1bb>
   192ca:	mov    %rdi,%rdx
   192cd:	add    0xa8(%r14),%edx
   192d4:	mov    %edx,0xa8(%r14)
   192db:	mov    %rax,%rsi
   192de:	mov    %rdi,%rax
   192e1:	xor    %ebx,%ebx
   192e3:	mov    %rbx,%rdx
   192e6:	div    %r11d
   192e9:	add    0xb8(%r14),%eax
   192f0:	mov    %eax,0xb8(%r14)
   192f7:	mov    %r9,%rax
   192fa:	mov    %rbx,%rdx
   192fd:	div    %r11d
   19300:	add    0x84(%r10),%eax
   19307:	mov    %eax,0x84(%r10)
   1930e:	mov    %r14,%rdi
   19311:	mov    %rcx,-0x68(%rbp)
   19315:	mov    %r8,%rbx
   19318:	callq  19c60 <read_and_discard_scanlines>
   1931d:	mov    0x8c(%r14),%eax
   19324:	mov    0xa8(%r14),%ecx
   1932b:	sub    %ecx,%eax
   1932d:	mov    %eax,0xbc(%rbx)
   19333:	mov    %r15,%rbx
   19336:	mov    -0x20(%rbp),%rax
   1933a:	mov    -0x48(%rbp),%r15
   1933e:	mov    -0x68(%rbp),%r14
   19342:	leaveq 
   19343:	retq   
   19344:	mov    %rax,-0x58(%rbp)
   19348:	mov    %r12,%rax
   1934b:	jmpq   193d5 <jpeg_skip_scanlines+0x535>
   19350:	mov    %rdi,%rax
   19353:	xor    %edx,%edx
   19355:	mov    -0x50(%rbp),%rcx
   19359:	div    %ecx
   1935b:	mov    -0x10(%rbp),%rcx
   1935f:	add    0x84(%rcx),%eax
   19365:	mov    %eax,0x84(%rcx)
   1936b:	mov    %r14,%rdi
   1936e:	mov    -0x18(%rbp),%rsi
   19372:	callq  19c60 <read_and_discard_scanlines>
   19377:	mov    0x8c(%r14),%eax
   1937e:	mov    0xa8(%r14),%ecx
   19385:	sub    %ecx,%eax
   19387:	mov    -0x8(%rbp),%rcx
   1938b:	mov    %eax,0xbc(%rcx)
   19391:	mov    -0x38(%rbp),%r13
   19395:	mov    -0x30(%rbp),%r12
   19399:	mov    -0x28(%rbp),%rbx
   1939d:	mov    -0x20(%rbp),%rax
   193a1:	mov    -0x48(%rbp),%r15
   193a5:	mov    -0x40(%rbp),%r14
   193a9:	leaveq 
   193aa:	retq   
   193ab:	mov    0x250(%r14),%rax
   193b2:	mov    0x8(%rax),%rax
   193b6:	mov    %r14,%rdi
   193b9:	mov    %r12,%rsi
   193bc:	callq  *%rax
   193be:	add    $0x1,%r13d
   193c2:	mov    0x1d8(%r14),%eax
   193c9:	cmp    %r13d,%eax
   193cc:	ja     193ab <jpeg_skip_scanlines+0x50b>
   193ce:	mov    -0x68(%rbp),%rax
   193d2:	add    $0x1,%eax
   193d5:	movslq 0x30(%rbx),%rcx
   193d9:	cmp    %eax,%ecx
   193db:	jg     19421 <jpeg_skip_scanlines+0x581>
   193dd:	mov    0xb0(%r14),%eax
   193e4:	add    $0x1,%eax
   193e7:	mov    %eax,0xb0(%r14)
   193ee:	mov    0xb8(%r14),%ecx
   193f5:	add    $0x1,%ecx
   193f8:	mov    %ecx,0xb8(%r14)
   193ff:	cmp    0x1a4(%r14),%eax
   19406:	jb     19262 <jpeg_skip_scanlines+0x3c2>
   1940c:	mov    0x240(%r14),%rax
   19413:	mov    0x18(%rax),%rax
   19417:	mov    %r14,%rdi
   1941a:	callq  *%rax
   1941c:	jmpq   1926a <jpeg_skip_scanlines+0x3ca>
   19421:	mov    %rax,-0x68(%rbp)
   19425:	mov    %r12,%r13
   19428:	jmp    193c2 <jpeg_skip_scanlines+0x522>
   1942a:	nopw   0x0(%rax,%rax,1)

0000000000019430 <jpeg_crop_scanline>:
   19430:	push   %rbp
   19431:	mov    %rsp,%rbp
   19434:	sub    $0x50,%rsp
   19438:	mov    %r13,-0x18(%rbp)
   1943c:	mov    %r14,-0x20(%rbp)
   19440:	mov    %r15,-0x28(%rbp)
   19444:	mov    %rsi,-0x40(%rbp)
   19448:	mov    %rdi,-0x48(%rbp)
   1944c:	movslq 0x24(%rdi),%rax
   19450:	cmp    $0xcd,%eax
   19455:	jne    19478 <jpeg_crop_scanline+0x48>
   19457:	mov    0xa8(%rdi),%eax
   1945d:	test   %eax,%eax
   1945f:	jne    19478 <jpeg_crop_scanline+0x48>
   19461:	mov    %r13,%rax
   19464:	mov    %r12,%r13
   19467:	mov    %rsi,%r12
   1946a:	mov    %r15,%rcx
   1946d:	mov    %rdx,%r15
   19470:	mov    %r14,%r8
   19473:	mov    %rdi,%r14
   19476:	jmp    194ac <jpeg_crop_scanline+0x7c>
   19478:	mov    (%rdi),%rax
   1947b:	movl   $0x14,0x28(%rax)
   19482:	movslq 0x24(%rdi),%rcx
   19486:	mov    (%rdi),%rax
   19489:	mov    %ecx,0x2c(%rax)
   1948c:	mov    (%rdi),%rax
   1948f:	mov    (%rax),%rax
   19492:	mov    %r12,%r13
   19495:	mov    %rsi,%r12
   19498:	mov    %rdx,%r15
   1949b:	mov    %rdi,%r14
   1949e:	callq  *%rax
   194a0:	mov    -0x28(%rbp),%rcx
   194a4:	mov    -0x20(%rbp),%r8
   194a8:	mov    -0x18(%rbp),%rax
   194ac:	test   %r12,%r12
   194af:	jne    19529 <jpeg_crop_scanline+0xf9>
   194b1:	mov    (%r14),%rax
   194b4:	movl   $0x7c,0x28(%rax)
   194bb:	mov    (%r14),%rax
   194be:	mov    (%rax),%rax
   194c1:	mov    %r14,%rdi
   194c4:	callq  *%rax
   194c6:	mov    -0x28(%rbp),%rcx
   194ca:	mov    -0x20(%rbp),%r8
   194ce:	mov    -0x18(%rbp),%rax
   194d2:	mov    (%r15),%edx
   194d5:	test   %edx,%edx
   194d7:	je     194e8 <jpeg_crop_scanline+0xb8>
   194d9:	add    (%r12),%edx
   194dd:	mov    0x88(%r14),%esi
   194e4:	cmp    %edx,%esi
   194e6:	jae    1950f <jpeg_crop_scanline+0xdf>
   194e8:	mov    (%r14),%rcx
   194eb:	movl   $0x46,0x28(%rcx)
   194f2:	mov    (%r14),%rcx
   194f5:	mov    (%rcx),%rcx
   194f8:	mov    %rax,%r12
   194fb:	mov    %r14,%rdi
   194fe:	callq  *%rcx
   19500:	mov    %r12,%rax
   19503:	mov    -0x40(%rbp),%r12
   19507:	mov    -0x28(%rbp),%rcx
   1950b:	mov    -0x20(%rbp),%r8
   1950f:	mov    0x88(%r14),%edx
   19516:	cmp    (%r15),%edx
   19519:	jne    19530 <jpeg_crop_scanline+0x100>
   1951b:	mov    %r13,%r12
   1951e:	mov    %rax,%r13
   19521:	mov    %r8,%r14
   19524:	mov    %rcx,%r15
   19527:	leaveq 
   19528:	retq   
   19529:	test   %r15,%r15
   1952c:	jne    194d2 <jpeg_crop_scanline+0xa2>
   1952e:	jmp    194b1 <jpeg_crop_scanline+0x81>
   19530:	movslq 0x1b0(%r14),%rax
   19537:	cmp    $0x1,%eax
   1953a:	je     195cb <jpeg_crop_scanline+0x19b>
   19540:	movslq 0x198(%r14),%rsi
   19547:	imul   0x1a0(%r14),%esi
   1954f:	mov    (%r12),%edi
   19553:	xor    %ecx,%ecx
   19555:	mov    %rdi,%rax
   19558:	mov    %rcx,%rdx
   1955b:	div    %esi
   1955d:	sub    %edx,%edi
   1955f:	mov    %edi,(%r12)
   19563:	add    (%r15),%edx
   19566:	mov    %edx,(%r15)
   19569:	mov    %edx,0x88(%r14)
   19570:	mov    (%r12),%eax
   19574:	movslq %esi,%rsi
   19577:	mov    %rsi,-0x38(%rbp)
   1957b:	cqto   
   1957d:	mov    0x220(%r14),%rdi
   19584:	idiv   %rsi
   19587:	mov    %eax,0x14(%rdi)
   1958a:	mov    0x88(%r14),%eax
   19591:	add    (%r12),%eax
   19595:	mov    %eax,%edi
   19597:	mov    0x220(%r14),%rax
   1959e:	mov    %rbx,-0x8(%rbp)
   195a2:	mov    %r13,-0x10(%rbp)
   195a6:	mov    %rax,%rbx
   195a9:	mov    %rcx,%r15
   195ac:	callq  4150 <jdiv_round_up@plt>
   195b1:	add    $0xffffffff,%eax
   195b4:	mov    %eax,0x18(%rbx)
   195b7:	mov    0x130(%r14),%r13
   195be:	mov    $0x1,%ebx
   195c3:	mov    %r15,%rcx
   195c6:	jmpq   1969e <jpeg_crop_scanline+0x26e>
   195cb:	movslq 0x38(%r14),%rax
   195cf:	cmp    $0x1,%eax
   195d2:	jne    19540 <jpeg_crop_scanline+0x110>
   195d8:	movslq 0x1a0(%r14),%rsi
   195df:	jmpq   1954f <jpeg_crop_scanline+0x11f>
   195e4:	movslq 0x1b0(%r14),%rax
   195eb:	cmp    $0x1,%eax
   195ee:	jne    195f5 <jpeg_crop_scanline+0x1c5>
   195f0:	cmp    $0x1,%edx
   195f3:	je     195f9 <jpeg_crop_scanline+0x1c9>
   195f5:	mov    0x8(%r13),%ebx
   195f9:	movslq 0x28(%r13),%rdx
   195fd:	mov    0x8(%r13),%eax
   19601:	imul   0x88(%r14),%eax
   19609:	mov    %eax,%edi
   1960b:	movslq 0x198(%r14),%rsi
   19612:	mov    %rcx,-0x50(%rbp)
   19616:	mov    %rdx,%r14
   19619:	callq  4150 <jdiv_round_up@plt>
   1961e:	mov    %eax,0x28(%r13)
   19622:	cmp    $0x1,%eax
   19625:	ja     19633 <jpeg_crop_scanline+0x203>
   19627:	cmp    $0x1,%r14d
   1962b:	jle    19633 <jpeg_crop_scanline+0x203>
   1962d:	mov    $0x1,%r15d
   19633:	mov    %r15,-0x30(%rbp)
   19637:	mov    %rbx,%rax
   1963a:	imul   (%r12),%eax
   1963f:	mov    %eax,%eax
   19641:	cqto   
   19643:	mov    -0x48(%rbp),%r14
   19647:	mov    0x220(%r14),%rcx
   1964e:	mov    -0x38(%rbp),%rsi
   19652:	idiv   %rsi
   19655:	mov    -0x50(%rbp),%rdx
   19659:	movslq %edx,%r15
   1965c:	mov    %eax,0x1c(%rcx,%r15,4)
   19661:	mov    0x88(%r14),%eax
   19668:	add    (%r12),%eax
   1966c:	imul   %eax,%ebx
   1966f:	mov    %ebx,%edi
   19671:	mov    %rdx,%r12
   19674:	mov    0x220(%r14),%rbx
   1967b:	callq  4150 <jdiv_round_up@plt>
   19680:	add    $0xffffffff,%eax
   19683:	mov    %eax,0x44(%rbx,%r15,4)
   19688:	add    $0x60,%r13
   1968c:	lea    0x1(%r12),%ecx
   19691:	mov    -0x30(%rbp),%r15
   19695:	mov    $0x1,%ebx
   1969a:	mov    -0x40(%rbp),%r12
   1969e:	movslq 0x38(%r14),%rdx
   196a2:	cmp    %ecx,%edx
   196a4:	jg     195e4 <jpeg_crop_scanline+0x1b4>
   196aa:	test   %r15d,%r15d
   196ad:	jg     196c5 <jpeg_crop_scanline+0x295>
   196af:	mov    -0x10(%rbp),%r12
   196b3:	mov    -0x8(%rbp),%rbx
   196b7:	mov    -0x28(%rbp),%r15
   196bb:	mov    -0x20(%rbp),%r14
   196bf:	mov    -0x18(%rbp),%r13
   196c3:	leaveq 
   196c4:	retq   
   196c5:	mov    0x220(%r14),%rax
   196cc:	movl   $0x1,0x6c(%rax)
   196d3:	mov    %r14,%rdi
   196d6:	callq  43e0 <jinit_upsampler@plt>
   196db:	mov    0x220(%r14),%rax
   196e2:	movl   $0x0,0x6c(%rax)
   196e9:	mov    -0x10(%rbp),%r12
   196ed:	mov    -0x8(%rbp),%rbx
   196f1:	mov    -0x28(%rbp),%r15
   196f5:	mov    -0x20(%rbp),%r14
   196f9:	mov    -0x18(%rbp),%r13
   196fd:	leaveq 
   196fe:	retq   
   196ff:	nop

0000000000019700 <jpeg_read_raw_data>:
   19700:	push   %rbp
   19701:	mov    %rsp,%rbp
   19704:	sub    $0x20,%rsp
   19708:	mov    %r14,-0x8(%rbp)
   1970c:	mov    %r15,-0x10(%rbp)
   19710:	movslq 0x24(%rdi),%rax
   19714:	cmp    $0xce,%eax
   19719:	jne    19726 <jpeg_read_raw_data+0x26>
   1971b:	mov    %r15,%rcx
   1971e:	mov    %r14,%r15
   19721:	mov    %rdi,%r14
   19724:	jmp    19761 <jpeg_read_raw_data+0x61>
   19726:	mov    (%rdi),%rax
   19729:	movl   $0x14,0x28(%rax)
   19730:	movslq 0x24(%rdi),%rcx
   19734:	mov    (%rdi),%rax
   19737:	mov    %ecx,0x2c(%rax)
   1973a:	mov    (%rdi),%rax
   1973d:	mov    (%rax),%rax
   19740:	mov    %rdi,%rcx
   19743:	mov    %rsi,-0x18(%rbp)
   19747:	mov    %rdi,%r14
   1974a:	mov    %rcx,%rdi
   1974d:	mov    %rdx,%r15
   19750:	callq  *%rax
   19752:	mov    %r15,%rdx
   19755:	mov    -0x18(%rbp),%rsi
   19759:	mov    -0x10(%rbp),%rcx
   1975d:	mov    -0x8(%rbp),%r15
   19761:	mov    0x8c(%r14),%eax
   19768:	mov    0xa8(%r14),%edi
   1976f:	cmp    %edi,%eax
   19771:	jbe    1980c <jpeg_read_raw_data+0x10c>
   19777:	mov    0x10(%r14),%rax
   1977b:	test   %rax,%rax
   1977e:	je     197b7 <jpeg_read_raw_data+0xb7>
   19780:	mov    %rdi,0x8(%rax)
   19784:	mov    0x8c(%r14),%ecx
   1978b:	mov    0x10(%r14),%rax
   1978f:	mov    %rcx,0x10(%rax)
   19793:	mov    0x10(%r14),%rax
   19797:	mov    (%rax),%rax
   1979a:	mov    %r14,%rdi
   1979d:	mov    %r13,-0x18(%rbp)
   197a1:	mov    %rdx,%r13
   197a4:	mov    %rsi,%r15
   197a7:	callq  *%rax
   197a9:	mov    %r13,%rdx
   197ac:	mov    %r15,%rsi
   197af:	mov    -0x18(%rbp),%r13
   197b3:	mov    -0x8(%rbp),%r15
   197b7:	movslq 0x1a0(%r14),%rax
   197be:	imul   0x19c(%r14),%eax
   197c6:	mov    %rax,-0x18(%rbp)
   197ca:	cmp    %edx,%eax
   197cc:	jbe    197ed <jpeg_read_raw_data+0xed>
   197ce:	mov    (%r14),%rax
   197d1:	movl   $0x17,0x28(%rax)
   197d8:	mov    (%r14),%rax
   197db:	mov    (%rax),%rax
   197de:	mov    %rsi,%r15
   197e1:	mov    %r14,%rdi
   197e4:	callq  *%rax
   197e6:	mov    %r15,%rsi
   197e9:	mov    -0x8(%rbp),%r15
   197ed:	mov    0x230(%r14),%rax
   197f4:	mov    0x18(%rax),%rax
   197f8:	mov    %r14,%rdi
   197fb:	callq  *%rax
   197fd:	test   %eax,%eax
   197ff:	jne    19839 <jpeg_read_raw_data+0x139>
   19801:	mov    %r15,%r14
   19804:	xor    %eax,%eax
   19806:	mov    -0x10(%rbp),%r15
   1980a:	leaveq 
   1980b:	retq   
   1980c:	mov    (%r14),%rax
   1980f:	movl   $0x7b,0x28(%rax)
   19816:	mov    (%r14),%rax
   19819:	mov    0x8(%rax),%rax
   1981d:	mov    %r14,%rdi
   19820:	mov    %rcx,%r14
   19823:	mov    $0xffffffffffffffff,%rsi
   1982a:	callq  *%rax
   1982c:	mov    %r15,%rcx
   1982f:	mov    %r14,%r15
   19832:	mov    %rcx,%r14
   19835:	xor    %eax,%eax
   19837:	leaveq 
   19838:	retq   
   19839:	mov    -0x18(%rbp),%rax
   1983d:	mov    %rax,%rcx
   19840:	add    0xa8(%r14),%ecx
   19847:	mov    %ecx,0xa8(%r14)
   1984e:	mov    %r15,%r14
   19851:	mov    -0x10(%rbp),%r15
   19855:	leaveq 
   19856:	retq   
   19857:	nopw   0x0(%rax,%rax,1)

0000000000019860 <jpeg_start_output>:
   19860:	push   %rbp
   19861:	mov    %rsp,%rbp
   19864:	sub    $0x10,%rsp
   19868:	movslq 0x24(%rdi),%rax
   1986c:	cmp    $0xcf,%eax
   19871:	jne    19898 <jpeg_start_output+0x38>
   19873:	test   %esi,%esi
   19875:	jg     1987c <jpeg_start_output+0x1c>
   19877:	mov    $0x1,%esi
   1987c:	mov    0x240(%rdi),%rax
   19883:	movslq 0x24(%rax),%rax
   19887:	test   %eax,%eax
   19889:	jne    198df <jpeg_start_output+0x7f>
   1988b:	mov    %esi,0xb4(%rdi)
   19891:	callq  19b00 <output_pass_setup>
   19896:	leaveq 
   19897:	retq   
   19898:	cmp    $0xcc,%eax
   1989d:	je     19873 <jpeg_start_output+0x13>
   1989f:	mov    (%rdi),%rax
   198a2:	movl   $0x14,0x28(%rax)
   198a9:	movslq 0x24(%rdi),%rcx
   198ad:	mov    (%rdi),%rax
   198b0:	mov    %ecx,0x2c(%rax)
   198b3:	mov    (%rdi),%rax
   198b6:	mov    (%rax),%rax
   198b9:	mov    %rdi,%rcx
   198bc:	mov    %r14,-0x8(%rbp)
   198c0:	mov    %r15,-0x10(%rbp)
   198c4:	mov    %rsi,%r14
   198c7:	mov    %rdi,%r15
   198ca:	mov    %rcx,%rdi
   198cd:	callq  *%rax
   198cf:	mov    %r14,%rsi
   198d2:	mov    %r15,%rdi
   198d5:	mov    -0x10(%rbp),%r15
   198d9:	mov    -0x8(%rbp),%r14
   198dd:	jmp    19873 <jpeg_start_output+0x13>
   198df:	movslq 0xac(%rdi),%rax
   198e6:	cmp    %esi,%eax
   198e8:	jge    1988b <jpeg_start_output+0x2b>
   198ea:	mov    %rax,%rsi
   198ed:	jmp    1988b <jpeg_start_output+0x2b>
   198ef:	nop

00000000000198f0 <jpeg_finish_output>:
   198f0:	push   %rbp
   198f1:	mov    %rsp,%rbp
   198f4:	sub    $0x10,%rsp
   198f8:	mov    %r15,-0x8(%rbp)
   198fc:	movslq 0x24(%rdi),%rax
   19900:	cmp    $0xcd,%eax
   19905:	je     1991e <jpeg_finish_output+0x2e>
   19907:	cmp    $0xce,%eax
   1990c:	je     1991e <jpeg_finish_output+0x2e>
   1990e:	movslq 0x24(%rdi),%rax
   19912:	cmp    $0xd0,%eax
   19917:	jne    1996e <jpeg_finish_output+0x7e>
   19919:	mov    %rdi,%r15
   1991c:	jmp    1993e <jpeg_finish_output+0x4e>
   1991e:	movslq 0x58(%rdi),%rax
   19922:	test   %eax,%eax
   19924:	je     1990e <jpeg_finish_output+0x1e>
   19926:	mov    0x220(%rdi),%rax
   1992d:	mov    0x8(%rax),%rax
   19931:	mov    %rdi,%r15
   19934:	callq  *%rax
   19936:	movl   $0xd0,0x24(%r15)
   1993e:	movslq 0xb4(%r15),%rax
   19945:	cmp    0xac(%r15),%eax
   1994c:	jl     1998f <jpeg_finish_output+0x9f>
   1994e:	mov    0x240(%r15),%rax
   19955:	movslq 0x24(%rax),%rcx
   19959:	test   %ecx,%ecx
   1995b:	jne    1998f <jpeg_finish_output+0x9f>
   1995d:	mov    %r15,%rdi
   19960:	callq  *(%rax)
   19962:	test   %eax,%eax
   19964:	jne    1993e <jpeg_finish_output+0x4e>
   19966:	xor    %eax,%eax
   19968:	mov    -0x8(%rbp),%r15
   1996c:	leaveq 
   1996d:	retq   
   1996e:	mov    (%rdi),%rax
   19971:	movl   $0x14,0x28(%rax)
   19978:	movslq 0x24(%rdi),%rcx
   1997c:	mov    (%rdi),%rax
   1997f:	mov    %ecx,0x2c(%rax)
   19982:	mov    (%rdi),%rax
   19985:	mov    (%rax),%rax
   19988:	mov    %rdi,%r15
   1998b:	callq  *%rax
   1998d:	jmp    1993e <jpeg_finish_output+0x4e>
   1998f:	movl   $0xcf,0x24(%r15)
   19997:	mov    $0x1,%eax
   1999c:	mov    -0x8(%rbp),%r15
   199a0:	leaveq 
   199a1:	retq   
   199a2:	data16 nopw %cs:0x0(%rax,%rax,1)
   199ad:	nopl   (%rax)

00000000000199b0 <set_wraparound_pointers>:
   199b0:	push   %rbp
   199b1:	mov    %rsp,%rbp
   199b4:	sub    $0x30,%rsp
   199b8:	mov    %rbx,-0x8(%rbp)
   199bc:	mov    %r12,-0x10(%rbp)
   199c0:	mov    %r13,-0x18(%rbp)
   199c4:	mov    %r14,-0x20(%rbp)
   199c8:	mov    %r15,-0x28(%rbp)
   199cc:	mov    0x228(%rdi),%rsi
   199d3:	mov    0x130(%rdi),%r8
   199da:	movslq 0x1a0(%rdi),%rax
   199e1:	lea    0x1(%rax),%r9d
   199e5:	lea    0x2(%rax),%ebx
   199e8:	mov    %rbx,-0x30(%rbp)
   199ec:	xor    %ecx,%ecx
   199ee:	mov    %rcx,%r10
   199f1:	jmp    19a45 <set_wraparound_pointers+0x95>
   199f3:	lea    (%rcx,%r15,1),%edx
   199f7:	movslq %edx,%r14
   199fa:	mov    0x0(%r13,%r14,8),%rbx
   199ff:	mov    %rcx,%rdx
   19a02:	sub    %eax,%edx
   19a04:	movslq %edx,%rdx
   19a07:	mov    %rbx,0x0(%r13,%rdx,8)
   19a0c:	mov    (%r11,%r14,8),%rbx
   19a10:	mov    %rbx,(%r11,%rdx,8)
   19a14:	movslq %ecx,%r14
   19a17:	mov    0x0(%r13,%r14,8),%rdx
   19a1c:	lea    (%rcx,%r12,1),%ebx
   19a20:	movslq %ebx,%rbx
   19a23:	mov    %rdx,0x0(%r13,%rbx,8)
   19a28:	mov    (%r11,%r14,8),%rdx
   19a2c:	mov    %rdx,(%r11,%rbx,8)
   19a30:	add    $0x1,%ecx
   19a33:	cmp    %eax,%ecx
   19a35:	jl     199f3 <set_wraparound_pointers+0x43>
   19a37:	add    $0x1,%r10d
   19a3b:	add    $0x60,%r8
   19a3f:	xor    %ecx,%ecx
   19a41:	mov    -0x30(%rbp),%rbx
   19a45:	movslq 0x38(%rdi),%rax
   19a49:	cmp    %r10d,%eax
   19a4c:	jg     19a64 <set_wraparound_pointers+0xb4>
   19a4e:	mov    -0x28(%rbp),%r15
   19a52:	mov    -0x20(%rbp),%r14
   19a56:	mov    -0x18(%rbp),%r13
   19a5a:	mov    -0x10(%rbp),%r12
   19a5e:	mov    -0x8(%rbp),%rbx
   19a62:	leaveq 
   19a63:	retq   
   19a64:	movslq %r10d,%r11
   19a67:	movslq 0x24(%r8),%rax
   19a6b:	imul   0xc(%r8),%eax
   19a70:	cltd   
   19a71:	movslq 0x1a0(%rdi),%r12
   19a78:	mov    0x68(%rsi),%r13
   19a7c:	mov    0x0(%r13,%r11,8),%r13
   19a81:	mov    0x70(%rsi),%r14
   19a85:	mov    (%r14,%r11,8),%r11
   19a89:	idiv   %r12d
   19a8c:	mov    %rax,%r15
   19a8f:	imul   %r9d,%r15d
   19a93:	mov    %rax,%r12
   19a96:	imul   %ebx,%r12d
   19a9a:	jmp    19a33 <set_wraparound_pointers+0x83>
   19a9c:	nopl   0x0(%rax)

0000000000019aa0 <start_iMCU_row>:
   19aa0:	push   %rbp
   19aa1:	mov    %rsp,%rbp
   19aa4:	mov    0x230(%rdi),%rcx
   19aab:	movslq 0x1b0(%rdi),%rax
   19ab2:	cmp    $0x1,%eax
   19ab5:	jg     19ad8 <start_iMCU_row+0x38>
   19ab7:	mov    0x1a4(%rdi),%eax
   19abd:	add    $0xffffffff,%eax
   19ac0:	cmp    0xb0(%rdi),%eax
   19ac6:	ja     19aef <start_iMCU_row+0x4f>
   19ac8:	mov    0x1b8(%rdi),%rax
   19acf:	movslq 0x48(%rax),%rax
   19ad3:	mov    %eax,0x30(%rcx)
   19ad6:	jmp    19adf <start_iMCU_row+0x3f>
   19ad8:	movl   $0x1,0x30(%rcx)
   19adf:	movl   $0x0,0x28(%rcx)
   19ae6:	movl   $0x0,0x2c(%rcx)
   19aed:	leaveq 
   19aee:	retq   
   19aef:	mov    0x1b8(%rdi),%rax
   19af6:	movslq 0xc(%rax),%rax
   19afa:	mov    %eax,0x30(%rcx)
   19afd:	jmp    19adf <start_iMCU_row+0x3f>
   19aff:	nop

0000000000019b00 <output_pass_setup>:
   19b00:	push   %rbp
   19b01:	mov    %rsp,%rbp
   19b04:	sub    $0x20,%rsp
   19b08:	mov    %r13,-0x10(%rbp)
   19b0c:	mov    %r14,-0x18(%rbp)
   19b10:	mov    %r15,-0x20(%rbp)
   19b14:	mov    %r12,-0x8(%rbp)
   19b18:	xor    %r12d,%r12d
   19b1b:	lea    0xa8(%rdi),%r14
   19b22:	movslq 0x24(%rdi),%rax
   19b26:	cmp    $0xcc,%eax
   19b2b:	jne    19b35 <output_pass_setup+0x35>
   19b2d:	mov    %rdi,%r13
   19b30:	jmpq   19be0 <output_pass_setup+0xe0>
   19b35:	mov    0x220(%rdi),%rax
   19b3c:	mov    (%rax),%rax
   19b3f:	mov    %rdi,%r13
   19b42:	callq  *%rax
   19b44:	movl   $0x0,(%r14)
   19b4b:	movl   $0xcc,0x24(%r13)
   19b53:	jmpq   19be0 <output_pass_setup+0xe0>
   19b58:	mov    0x10(%r13),%rax
   19b5c:	test   %rax,%rax
   19b5f:	je     19b80 <output_pass_setup+0x80>
   19b61:	mov    %rcx,0x8(%rax)
   19b65:	mov    0x8c(%r13),%ecx
   19b6c:	mov    0x10(%r13),%rax
   19b70:	mov    %rcx,0x10(%rax)
   19b74:	mov    0x10(%r13),%rax
   19b78:	mov    (%rax),%rax
   19b7b:	mov    %r13,%rdi
   19b7e:	callq  *%rax
   19b80:	mov    0x228(%r13),%rax
   19b87:	mov    0x8(%rax),%rax
   19b8b:	mov    0xa8(%r13),%r15d
   19b92:	mov    %r12,%rcx
   19b95:	mov    %r13,%rdi
   19b98:	mov    %r12,%rsi
   19b9b:	mov    %r14,%rdx
   19b9e:	callq  *%rax
   19ba0:	mov    0xa8(%r13),%eax
   19ba7:	cmp    %r15d,%eax
   19baa:	je     19bfe <output_pass_setup+0xfe>
   19bac:	mov    (%r14),%ecx
   19baf:	mov    0x8c(%r13),%eax
   19bb6:	cmp    %ecx,%eax
   19bb8:	ja     19b58 <output_pass_setup+0x58>
   19bba:	mov    0x220(%r13),%rax
   19bc1:	mov    0x8(%rax),%rax
   19bc5:	mov    %r13,%rdi
   19bc8:	callq  *%rax
   19bca:	mov    0x220(%r13),%rax
   19bd1:	mov    (%rax),%rax
   19bd4:	mov    %r13,%rdi
   19bd7:	callq  *%rax
   19bd9:	movl   $0x0,(%r14)
   19be0:	mov    0x220(%r13),%rax
   19be7:	movslq 0x10(%rax),%rax
   19beb:	test   %eax,%eax
   19bed:	jne    19bac <output_pass_setup+0xac>
   19bef:	movslq 0x5c(%r13),%rax
   19bf3:	test   %eax,%eax
   19bf5:	jne    19c13 <output_pass_setup+0x113>
   19bf7:	mov    $0xcd,%eax
   19bfc:	jmp    19c18 <output_pass_setup+0x118>
   19bfe:	mov    %r12,%rax
   19c01:	mov    -0x8(%rbp),%r12
   19c05:	mov    -0x20(%rbp),%r15
   19c09:	mov    -0x18(%rbp),%r14
   19c0d:	mov    -0x10(%rbp),%r13
   19c11:	leaveq 
   19c12:	retq   
   19c13:	mov    $0xce,%eax
   19c18:	mov    %eax,0x24(%r13)
   19c1c:	mov    $0x1,%eax
   19c21:	mov    -0x8(%rbp),%r12
   19c25:	mov    -0x20(%rbp),%r15
   19c29:	mov    -0x18(%rbp),%r14
   19c2d:	mov    -0x10(%rbp),%r13
   19c31:	leaveq 
   19c32:	retq   
   19c33:	data16 nopw %cs:0x0(%rax,%rax,1)
   19c3e:	xchg   %ax,%ax

0000000000019c40 <noop_convert>:
   19c40:	push   %rbp
   19c41:	mov    %rsp,%rbp
   19c44:	leaveq 
   19c45:	retq   
   19c46:	nopw   %cs:0x0(%rax,%rax,1)

0000000000019c50 <noop_quantize>:
   19c50:	push   %rbp
   19c51:	mov    %rsp,%rbp
   19c54:	leaveq 
   19c55:	retq   
   19c56:	nopw   %cs:0x0(%rax,%rax,1)

0000000000019c60 <read_and_discard_scanlines>:
   19c60:	push   %rbp
   19c61:	mov    %rsp,%rbp
   19c64:	sub    $0x30,%rsp
   19c68:	mov    %rbx,-0x10(%rbp)
   19c6c:	mov    %r12,-0x18(%rbp)
   19c70:	mov    %r13,-0x20(%rbp)
   19c74:	mov    %r14,-0x28(%rbp)
   19c78:	mov    %r15,-0x30(%rbp)
   19c7c:	mov    0x268(%rdi),%rcx
   19c83:	mov    0x8(%rcx),%rax
   19c87:	mov    %rax,-0x8(%rbp)
   19c8b:	lea    -0x52(%rip),%rax        # 19c40 <noop_convert>
   19c92:	mov    %rax,0x8(%rcx)
   19c96:	xor    %r12d,%r12d
   19c99:	mov    $0x1,%edx
   19c9e:	mov    0x270(%rdi),%rax
   19ca5:	test   %rax,%rax
   19ca8:	jne    19cb8 <read_and_discard_scanlines+0x58>
   19caa:	mov    %rdi,%rbx
   19cad:	mov    %rsi,%r13
   19cb0:	mov    %r12,%r14
   19cb3:	mov    %r14,%r15
   19cb6:	jmp    19ce3 <read_and_discard_scanlines+0x83>
   19cb8:	mov    0x8(%rax),%r14
   19cbc:	test   %r14,%r14
   19cbf:	jne    19d12 <read_and_discard_scanlines+0xb2>
   19cc1:	mov    %rdi,%rbx
   19cc4:	mov    %rsi,%r13
   19cc7:	mov    %r12,%r14
   19cca:	mov    %r14,%r15
   19ccd:	jmp    19ce3 <read_and_discard_scanlines+0x83>
   19ccf:	mov    %rbx,%rdi
   19cd2:	mov    %r12,%rsi
   19cd5:	callq  4420 <jpeg_read_scanlines@plt>
   19cda:	add    $0x1,%r15d
   19cde:	mov    $0x1,%edx
   19ce3:	cmp    %r13d,%r15d
   19ce6:	jb     19ccf <read_and_discard_scanlines+0x6f>
   19ce8:	mov    0x268(%rbx),%rax
   19cef:	mov    -0x8(%rbp),%rcx
   19cf3:	mov    %rcx,0x8(%rax)
   19cf7:	test   %r14,%r14
   19cfa:	jne    19d28 <read_and_discard_scanlines+0xc8>
   19cfc:	mov    -0x30(%rbp),%r15
   19d00:	mov    -0x28(%rbp),%r14
   19d04:	mov    -0x20(%rbp),%r13
   19d08:	mov    -0x18(%rbp),%r12
   19d0c:	mov    -0x10(%rbp),%rbx
   19d10:	leaveq 
   19d11:	retq   
   19d12:	lea    -0xc9(%rip),%rcx        # 19c50 <noop_quantize>
   19d19:	mov    %rcx,0x8(%rax)
   19d1d:	mov    %rdi,%rbx
   19d20:	mov    %rsi,%r13
   19d23:	mov    %r12,%r15
   19d26:	jmp    19ce3 <read_and_discard_scanlines+0x83>
   19d28:	mov    0x270(%rbx),%rax
   19d2f:	mov    %r14,0x8(%rax)
   19d33:	mov    -0x30(%rbp),%r15
   19d37:	mov    -0x28(%rbp),%r14
   19d3b:	mov    -0x20(%rbp),%r13
   19d3f:	mov    -0x18(%rbp),%r12
   19d43:	mov    -0x10(%rbp),%rbx
   19d47:	leaveq 
   19d48:	retq   
   19d49:	nopl   0x0(%rax)

0000000000019d50 <increment_simple_rowgroup_ctr>:
   19d50:	push   %rbp
   19d51:	mov    %rsp,%rbp
   19d54:	mov    0x19c(%rdi),%r9d
   19d5b:	xor    %ecx,%ecx
   19d5d:	mov    0x228(%rdi),%r8
   19d64:	mov    %rsi,%rax
   19d67:	mov    %rcx,%rdx
   19d6a:	div    %r9d
   19d6d:	add    0x64(%r8),%eax
   19d71:	mov    %eax,0x64(%r8)
   19d75:	mov    %rcx,%rdx
   19d78:	mov    0x19c(%rdi),%r8d
   19d7f:	mov    %rsi,%rax
   19d82:	div    %r8d
   19d85:	sub    %edx,%esi
   19d87:	add    0xa8(%rdi),%esi
   19d8d:	mov    %esi,0xa8(%rdi)
   19d93:	mov    %rdx,%rsi
   19d96:	callq  19c60 <read_and_discard_scanlines>
   19d9b:	leaveq 
   19d9c:	retq   
   19d9d:	nopl   (%rax)

0000000000019da0 <jpeg_stdio_dest>:
   19da0:	push   %rbp
   19da1:	mov    %rsp,%rbp
   19da4:	sub    $0x10,%rsp
   19da8:	lea    0x261(%rip),%rax        # 1a010 <init_destination>
   19daf:	mov    0x28(%rdi),%rcx
   19db3:	test   %rcx,%rcx
   19db6:	je     19dfe <jpeg_stdio_dest+0x5e>
   19db8:	mov    0x10(%rcx),%rcx
   19dbc:	cmp    %rax,%rcx
   19dbf:	je     19e3f <jpeg_stdio_dest+0x9f>
   19dc1:	mov    (%rdi),%rax
   19dc4:	movl   $0x17,0x28(%rax)
   19dcb:	mov    (%rdi),%rax
   19dce:	mov    (%rax),%rax
   19dd1:	mov    %rdi,%rcx
   19dd4:	mov    %r14,-0x8(%rbp)
   19dd8:	mov    %r15,-0x10(%rbp)
   19ddc:	mov    %rsi,%r14
   19ddf:	mov    %rdi,%r15
   19de2:	mov    %rcx,%rdi
   19de5:	callq  *%rax
   19de7:	mov    %r14,%rsi
   19dea:	mov    %r15,%rdi
   19ded:	lea    0x21c(%rip),%rax        # 1a010 <init_destination>
   19df4:	mov    -0x10(%rbp),%r15
   19df8:	mov    -0x8(%rbp),%r14
   19dfc:	jmp    19e3f <jpeg_stdio_dest+0x9f>
   19dfe:	mov    0x8(%rdi),%rax
   19e02:	mov    (%rax),%rax
   19e05:	xor    %r8d,%r8d
   19e08:	mov    $0x38,%edx
   19e0d:	mov    %rdi,%rcx
   19e10:	mov    %r14,-0x8(%rbp)
   19e14:	mov    %r15,-0x10(%rbp)
   19e18:	mov    %rdi,%r14
   19e1b:	mov    %rcx,%rdi
   19e1e:	mov    %rsi,%r15
   19e21:	mov    %r8,%rsi
   19e24:	callq  *%rax
   19e26:	mov    %rax,0x28(%r14)
   19e2a:	mov    %r15,%rsi
   19e2d:	mov    %r14,%rdi
   19e30:	lea    0x1d9(%rip),%rax        # 1a010 <init_destination>
   19e37:	mov    -0x10(%rbp),%r15
   19e3b:	mov    -0x8(%rbp),%r14
   19e3f:	mov    0x28(%rdi),%rcx
   19e43:	mov    %rax,0x10(%rcx)
   19e47:	lea    0x212(%rip),%rax        # 1a060 <empty_output_buffer>
   19e4e:	mov    %rax,0x18(%rcx)
   19e52:	lea    0x327(%rip),%rax        # 1a180 <term_destination>
   19e59:	mov    %rax,0x20(%rcx)
   19e5d:	mov    %rsi,0x28(%rcx)
   19e61:	leaveq 
   19e62:	retq   
   19e63:	data16 nopw %cs:0x0(%rax,%rax,1)
   19e6e:	xchg   %ax,%ax

0000000000019e70 <jpeg_mem_dest>:
   19e70:	push   %rbp
   19e71:	mov    %rsp,%rbp
   19e74:	sub    $0x20,%rsp
   19e78:	mov    %r13,-0x10(%rbp)
   19e7c:	mov    %r14,-0x18(%rbp)
   19e80:	mov    %r15,-0x20(%rbp)
   19e84:	test   %rsi,%rsi
   19e87:	je     19ea5 <jpeg_mem_dest+0x35>
   19e89:	test   %rdx,%rdx
   19e8c:	je     19ea5 <jpeg_mem_dest+0x35>
   19e8e:	mov    %r15,%rax
   19e91:	mov    %rdi,%r15
   19e94:	mov    %r14,%rcx
   19e97:	mov    %r12,%r14
   19e9a:	mov    %rsi,%r12
   19e9d:	mov    %r13,%r8
   19ea0:	mov    %rdx,%r13
   19ea3:	jmp    19ecf <jpeg_mem_dest+0x5f>
   19ea5:	mov    (%rdi),%rax
   19ea8:	movl   $0x17,0x28(%rax)
   19eaf:	mov    (%rdi),%rax
   19eb2:	mov    (%rax),%rax
   19eb5:	mov    %rdx,%r13
   19eb8:	mov    %r12,%r14
   19ebb:	mov    %rsi,%r12
   19ebe:	mov    %rdi,%r15
   19ec1:	callq  *%rax
   19ec3:	mov    -0x20(%rbp),%rax
   19ec7:	mov    -0x18(%rbp),%rcx
   19ecb:	mov    -0x10(%rbp),%r8
   19ecf:	lea    0x17a(%rip),%rdx        # 1a050 <init_mem_destination>
   19ed6:	mov    0x28(%r15),%rsi
   19eda:	test   %rsi,%rsi
   19edd:	je     19f12 <jpeg_mem_dest+0xa2>
   19edf:	mov    0x10(%rsi),%rsi
   19ee3:	cmp    %rdx,%rsi
   19ee6:	je     19f3c <jpeg_mem_dest+0xcc>
   19ee8:	mov    (%r15),%rax
   19eeb:	movl   $0x17,0x28(%rax)
   19ef2:	mov    (%r15),%rax
   19ef5:	mov    (%rax),%rax
   19ef8:	mov    %r15,%rdi
   19efb:	callq  *%rax
   19efd:	lea    0x14c(%rip),%rdx        # 1a050 <init_mem_destination>
   19f04:	mov    -0x20(%rbp),%rax
   19f08:	mov    -0x18(%rbp),%rcx
   19f0c:	mov    -0x10(%rbp),%r8
   19f10:	jmp    19f3c <jpeg_mem_dest+0xcc>
   19f12:	mov    0x8(%r15),%rax
   19f16:	mov    (%rax),%rax
   19f19:	xor    %esi,%esi
   19f1b:	mov    $0x50,%edx
   19f20:	mov    %r15,%rdi
   19f23:	callq  *%rax
   19f25:	mov    %rax,0x28(%r15)
   19f29:	lea    0x120(%rip),%rdx        # 1a050 <init_mem_destination>
   19f30:	mov    -0x20(%rbp),%rax
   19f34:	mov    -0x18(%rbp),%rcx
   19f38:	mov    -0x10(%rbp),%r8
   19f3c:	mov    0x28(%r15),%rsi
   19f40:	mov    %rdx,0x10(%rsi)
   19f44:	lea    0x185(%rip),%rdx        # 1a0d0 <empty_mem_output_buffer>
   19f4b:	mov    %rdx,0x18(%rsi)
   19f4f:	lea    0x2ea(%rip),%rdx        # 1a240 <term_mem_destination>
   19f56:	mov    %rdx,0x20(%rsi)
   19f5a:	mov    %r12,0x28(%rsi)
   19f5e:	mov    %r13,0x30(%rsi)
   19f62:	movq   $0x0,0x38(%rsi)
   19f6a:	mov    (%r12),%rdx
   19f6e:	test   %rdx,%rdx
   19f71:	je     19f81 <jpeg_mem_dest+0x111>
   19f73:	mov    0x0(%r13),%rdx
   19f77:	test   %rdx,%rdx
   19f7a:	je     19f81 <jpeg_mem_dest+0x111>
   19f7c:	mov    %rsi,%r15
   19f7f:	jmp    19fde <jpeg_mem_dest+0x16e>
   19f81:	mov    $0x1000,%edi
   19f86:	mov    %r14,-0x8(%rbp)
   19f8a:	mov    %rsi,%r14
   19f8d:	callq  4320 <malloc@plt>
   19f92:	mov    %rax,(%r12)
   19f96:	mov    %rax,0x38(%r14)
   19f9a:	test   %rax,%rax
   19f9d:	je     19fa4 <jpeg_mem_dest+0x134>
   19f9f:	mov    %r14,%r15
   19fa2:	jmp    19fc6 <jpeg_mem_dest+0x156>
   19fa4:	mov    (%r15),%rax
   19fa7:	movl   $0x36,0x28(%rax)
   19fae:	mov    (%r15),%rax
   19fb1:	movl   $0xa,0x2c(%rax)
   19fb8:	mov    (%r15),%rax
   19fbb:	mov    (%rax),%rax
   19fbe:	mov    %r15,%rdi
   19fc1:	mov    %r14,%r15
   19fc4:	callq  *%rax
   19fc6:	movq   $0x1000,0x0(%r13)
   19fce:	mov    -0x8(%rbp),%r14
   19fd2:	mov    -0x20(%rbp),%rax
   19fd6:	mov    -0x18(%rbp),%rcx
   19fda:	mov    -0x10(%rbp),%r8
   19fde:	mov    (%r12),%rdx
   19fe2:	mov    %rdx,0x40(%r15)
   19fe6:	mov    %rdx,(%r15)
   19fe9:	mov    0x0(%r13),%rdx
   19fed:	mov    %rdx,0x48(%r15)
   19ff1:	mov    %rdx,0x8(%r15)
   19ff5:	mov    %r14,%r12
   19ff8:	mov    %rcx,%r14
   19ffb:	mov    %r8,%r13
   19ffe:	mov    %rax,%r15
   1a001:	leaveq 
   1a002:	retq   
   1a003:	data16 nopw %cs:0x0(%rax,%rax,1)
   1a00e:	xchg   %ax,%ax

000000000001a010 <init_destination>:
   1a010:	push   %rbp
   1a011:	mov    %rsp,%rbp
   1a014:	sub    $0x10,%rsp
   1a018:	mov    %r15,-0x8(%rbp)
   1a01c:	mov    0x8(%rdi),%rax
   1a020:	mov    (%rax),%rax
   1a023:	mov    $0x1,%esi
   1a028:	mov    $0x1000,%edx
   1a02d:	mov    0x28(%rdi),%r15
   1a031:	callq  *%rax
   1a033:	mov    %rax,0x30(%r15)
   1a037:	mov    %rax,(%r15)
   1a03a:	movq   $0x1000,0x8(%r15)
   1a042:	mov    -0x8(%rbp),%r15
   1a046:	leaveq 
   1a047:	retq   
   1a048:	nopl   0x0(%rax,%rax,1)

000000000001a050 <init_mem_destination>:
   1a050:	push   %rbp
   1a051:	mov    %rsp,%rbp
   1a054:	leaveq 
   1a055:	retq   
   1a056:	nopw   %cs:0x0(%rax,%rax,1)

000000000001a060 <empty_output_buffer>:
   1a060:	push   %rbp
   1a061:	mov    %rsp,%rbp
   1a064:	sub    $0x10,%rsp
   1a068:	mov    %r14,-0x8(%rbp)
   1a06c:	mov    %r15,-0x10(%rbp)
   1a070:	mov    %rdi,%r15
   1a073:	mov    $0x1,%esi
   1a078:	mov    0x28(%r15),%r14
   1a07c:	mov    0x30(%r14),%rdi
   1a080:	mov    $0x1000,%edx
   1a085:	mov    0x28(%r14),%rcx
   1a089:	callq  4450 <fwrite@plt>
   1a08e:	cmp    $0x1000,%rax
   1a094:	je     1a0ab <empty_output_buffer+0x4b>
   1a096:	mov    (%r15),%rax
   1a099:	movl   $0x25,0x28(%rax)
   1a0a0:	mov    (%r15),%rax
   1a0a3:	mov    (%rax),%rax
   1a0a6:	mov    %r15,%rdi
   1a0a9:	callq  *%rax
   1a0ab:	mov    0x30(%r14),%rax
   1a0af:	mov    %rax,(%r14)
   1a0b2:	movq   $0x1000,0x8(%r14)
   1a0ba:	mov    $0x1,%eax
   1a0bf:	mov    -0x10(%rbp),%r15
   1a0c3:	mov    -0x8(%rbp),%r14
   1a0c7:	leaveq 
   1a0c8:	retq   
   1a0c9:	nopl   0x0(%rax)

000000000001a0d0 <empty_mem_output_buffer>:
   1a0d0:	push   %rbp
   1a0d1:	mov    %rsp,%rbp
   1a0d4:	sub    $0x20,%rsp
   1a0d8:	mov    %r13,-0x8(%rbp)
   1a0dc:	mov    %r14,-0x10(%rbp)
   1a0e0:	mov    %r15,-0x18(%rbp)
   1a0e4:	mov    0x28(%rdi),%r13
   1a0e8:	mov    0x48(%r13),%rax
   1a0ec:	lea    (%rax,%rax,1),%r14
   1a0f0:	mov    %rdi,%r15
   1a0f3:	mov    %r14,%rdi
   1a0f6:	callq  4320 <malloc@plt>
   1a0fb:	test   %rax,%rax
   1a0fe:	je     1a105 <empty_mem_output_buffer+0x35>
   1a100:	mov    %rax,%r15
   1a103:	jmp    1a127 <empty_mem_output_buffer+0x57>
   1a105:	mov    (%r15),%rcx
   1a108:	movl   $0x36,0x28(%rcx)
   1a10f:	mov    (%r15),%rcx
   1a112:	movl   $0xa,0x2c(%rcx)
   1a119:	mov    (%r15),%rcx
   1a11c:	mov    (%rcx),%rcx
   1a11f:	mov    %r15,%rdi
   1a122:	mov    %rax,%r15
   1a125:	callq  *%rcx
   1a127:	mov    0x40(%r13),%rsi
   1a12b:	mov    0x48(%r13),%rdx
   1a12f:	mov    %r15,%rdi
   1a132:	callq  42c0 <memcpy@plt>
   1a137:	mov    0x38(%r13),%rdi
   1a13b:	test   %rdi,%rdi
   1a13e:	je     1a145 <empty_mem_output_buffer+0x75>
   1a140:	callq  4060 <free@plt>
   1a145:	mov    %r15,0x38(%r13)
   1a149:	mov    0x48(%r13),%rcx
   1a14d:	lea    (%r15,%rcx,1),%rax
   1a151:	mov    %rax,0x0(%r13)
   1a155:	mov    %rcx,0x8(%r13)
   1a159:	mov    %r15,0x40(%r13)
   1a15d:	mov    %r14,0x48(%r13)
   1a161:	mov    $0x1,%eax
   1a166:	mov    -0x18(%rbp),%r15
   1a16a:	mov    -0x10(%rbp),%r14
   1a16e:	mov    -0x8(%rbp),%r13
   1a172:	leaveq 
   1a173:	retq   
   1a174:	data16 nopw %cs:0x0(%rax,%rax,1)
   1a17f:	nop

000000000001a180 <term_destination>:
   1a180:	push   %rbp
   1a181:	mov    %rsp,%rbp
   1a184:	sub    $0x20,%rsp
   1a188:	mov    %r14,-0x10(%rbp)
   1a18c:	mov    %r15,-0x18(%rbp)
   1a190:	mov    0x28(%rdi),%r15
   1a194:	mov    0x8(%r15),%rax
   1a198:	cmp    $0x1000,%rax
   1a19e:	jne    1a1c3 <term_destination+0x43>
   1a1a0:	mov    %rdi,%r14
   1a1a3:	mov    0x28(%r15),%rdi
   1a1a7:	callq  4330 <fflush@plt>
   1a1ac:	mov    0x28(%r15),%rdi
   1a1b0:	callq  40c0 <ferror@plt>
   1a1b5:	test   %eax,%eax
   1a1b7:	jne    1a1f9 <term_destination+0x79>
   1a1b9:	mov    -0x18(%rbp),%r15
   1a1bd:	mov    -0x10(%rbp),%r14
   1a1c1:	leaveq 
   1a1c2:	retq   
   1a1c3:	mov    $0x1000,%r14d
   1a1c9:	sub    %rax,%r14
   1a1cc:	mov    0x30(%r15),%rax
   1a1d0:	mov    $0x1,%esi
   1a1d5:	mov    0x28(%r15),%rcx
   1a1d9:	mov    %r14,%rdx
   1a1dc:	mov    %r13,-0x8(%rbp)
   1a1e0:	mov    %r14,%r13
   1a1e3:	mov    %rdi,%r14
   1a1e6:	mov    %rax,%rdi
   1a1e9:	callq  4450 <fwrite@plt>
   1a1ee:	cmp    %r13,%rax
   1a1f1:	jne    1a218 <term_destination+0x98>
   1a1f3:	mov    -0x8(%rbp),%r13
   1a1f7:	jmp    1a1a3 <term_destination+0x23>
   1a1f9:	mov    (%r14),%rax
   1a1fc:	movl   $0x25,0x28(%rax)
   1a203:	mov    (%r14),%rax
   1a206:	mov    (%rax),%rax
   1a209:	mov    %r14,%rdi
   1a20c:	callq  *%rax
   1a20e:	mov    -0x18(%rbp),%r15
   1a212:	mov    -0x10(%rbp),%r14
   1a216:	leaveq 
   1a217:	retq   
   1a218:	mov    (%r14),%rax
   1a21b:	movl   $0x25,0x28(%rax)
   1a222:	mov    (%r14),%rax
   1a225:	mov    (%rax),%rax
   1a228:	mov    %r14,%rdi
   1a22b:	callq  *%rax
   1a22d:	mov    -0x8(%rbp),%r13
   1a231:	jmpq   1a1a3 <term_destination+0x23>
   1a236:	nopw   %cs:0x0(%rax,%rax,1)

000000000001a240 <term_mem_destination>:
   1a240:	push   %rbp
   1a241:	mov    %rsp,%rbp
   1a244:	mov    0x28(%rdi),%rdx
   1a248:	mov    0x40(%rdx),%rax
   1a24c:	mov    0x28(%rdx),%rcx
   1a250:	mov    %rax,(%rcx)
   1a253:	mov    0x48(%rdx),%rax
   1a257:	mov    0x8(%rdx),%rcx
   1a25b:	sub    %rcx,%rax
   1a25e:	mov    0x30(%rdx),%rcx
   1a262:	mov    %rax,(%rcx)
   1a265:	leaveq 
   1a266:	retq   
   1a267:	nopw   0x0(%rax,%rax,1)

000000000001a270 <jpeg_stdio_src>:
   1a270:	push   %rbp
   1a271:	mov    %rsp,%rbp
   1a274:	sub    $0x20,%rsp
   1a278:	lea    0x221(%rip),%rdx        # 1a4a0 <init_source>
   1a27f:	mov    0x28(%rdi),%rax
   1a283:	test   %rax,%rax
   1a286:	je     1a2a3 <jpeg_stdio_src+0x33>
   1a288:	mov    0x10(%rax),%rax
   1a28c:	cmp    %rdx,%rax
   1a28f:	jne    1a34e <jpeg_stdio_src+0xde>
   1a295:	mov    %r14,%rax
   1a298:	mov    %rdi,%r14
   1a29b:	mov    %r15,%rcx
   1a29e:	mov    %rsi,%r15
   1a2a1:	jmp    1a2ff <jpeg_stdio_src+0x8f>
   1a2a3:	mov    0x8(%rdi),%rax
   1a2a7:	mov    (%rax),%rcx
   1a2aa:	xor    %eax,%eax
   1a2ac:	mov    $0x50,%edx
   1a2b1:	mov    %rdi,%r8
   1a2b4:	mov    %r14,-0x10(%rbp)
   1a2b8:	mov    %r15,-0x18(%rbp)
   1a2bc:	mov    %rdi,%r14
   1a2bf:	mov    %r8,%rdi
   1a2c2:	mov    %rsi,%r15
   1a2c5:	mov    %rax,%rsi
   1a2c8:	callq  *%rcx
   1a2ca:	mov    %rax,0x28(%r14)
   1a2ce:	mov    0x8(%r14),%rcx
   1a2d2:	mov    (%rcx),%rcx
   1a2d5:	mov    $0x1000,%edx
   1a2da:	mov    %r14,%rdi
   1a2dd:	mov    %r13,-0x8(%rbp)
   1a2e1:	mov    %rax,%r13
   1a2e4:	xor    %esi,%esi
   1a2e6:	callq  *%rcx
   1a2e8:	mov    %rax,0x40(%r13)
   1a2ec:	mov    -0x8(%rbp),%r13
   1a2f0:	lea    0x1a9(%rip),%rdx        # 1a4a0 <init_source>
   1a2f7:	mov    -0x18(%rbp),%rcx
   1a2fb:	mov    -0x10(%rbp),%rax
   1a2ff:	mov    0x28(%r14),%rsi
   1a303:	mov    %rdx,0x10(%rsi)
   1a307:	lea    0x1c2(%rip),%rdx        # 1a4d0 <fill_input_buffer>
   1a30e:	mov    %rdx,0x18(%rsi)
   1a312:	lea    0x2b7(%rip),%rdx        # 1a5d0 <skip_input_data>
   1a319:	mov    %rdx,0x20(%rsi)
   1a31d:	mov    0x53c0c(%rip),%rdx        # 6df30 <jpeg_resync_to_restart@@LIBJPEG_6.2+0x4ad90>
   1a324:	mov    %rdx,0x28(%rsi)
   1a328:	lea    0x311(%rip),%rdx        # 1a640 <term_source>
   1a32f:	mov    %rdx,0x30(%rsi)
   1a333:	mov    %r15,0x38(%rsi)
   1a337:	movq   $0x0,0x8(%rsi)
   1a33f:	movq   $0x0,(%rsi)
   1a346:	mov    %rax,%r14
   1a349:	mov    %rcx,%r15
   1a34c:	leaveq 
   1a34d:	retq   
   1a34e:	mov    (%rdi),%rax
   1a351:	movl   $0x17,0x28(%rax)
   1a358:	mov    (%rdi),%rax
   1a35b:	mov    (%rax),%rax
   1a35e:	mov    %rdi,%rcx
   1a361:	mov    %r14,-0x10(%rbp)
   1a365:	mov    %r15,-0x18(%rbp)
   1a369:	mov    %rdi,%r14
   1a36c:	mov    %rcx,%rdi
   1a36f:	mov    %rsi,%r15
   1a372:	callq  *%rax
   1a374:	lea    0x125(%rip),%rdx        # 1a4a0 <init_source>
   1a37b:	mov    -0x18(%rbp),%rcx
   1a37f:	mov    -0x10(%rbp),%rax
   1a383:	jmpq   1a2ff <jpeg_stdio_src+0x8f>
   1a388:	nopl   0x0(%rax,%rax,1)

000000000001a390 <jpeg_mem_src>:
   1a390:	push   %rbp
   1a391:	mov    %rsp,%rbp
   1a394:	sub    $0x20,%rsp
   1a398:	mov    %r13,-0x8(%rbp)
   1a39c:	mov    %r14,-0x10(%rbp)
   1a3a0:	mov    %r15,-0x18(%rbp)
   1a3a4:	test   %rsi,%rsi
   1a3a7:	je     1a3c2 <jpeg_mem_src+0x32>
   1a3a9:	test   %rdx,%rdx
   1a3ac:	je     1a3c2 <jpeg_mem_src+0x32>
   1a3ae:	mov    %r13,%rax
   1a3b1:	mov    %rsi,%r13
   1a3b4:	mov    %r15,%rcx
   1a3b7:	mov    %rdx,%r15
   1a3ba:	mov    %r14,%r8
   1a3bd:	mov    %rdi,%r14
   1a3c0:	jmp    1a3e9 <jpeg_mem_src+0x59>
   1a3c2:	mov    (%rdi),%rax
   1a3c5:	movl   $0x2a,0x28(%rax)
   1a3cc:	mov    (%rdi),%rax
   1a3cf:	mov    (%rax),%rax
   1a3d2:	mov    %rsi,%r13
   1a3d5:	mov    %rdx,%r15
   1a3d8:	mov    %rdi,%r14
   1a3db:	callq  *%rax
   1a3dd:	mov    -0x18(%rbp),%rcx
   1a3e1:	mov    -0x10(%rbp),%r8
   1a3e5:	mov    -0x8(%rbp),%rax
   1a3e9:	lea    0xd0(%rip),%rdx        # 1a4c0 <init_mem_source>
   1a3f0:	mov    0x28(%r14),%rsi
   1a3f4:	test   %rsi,%rsi
   1a3f7:	je     1a42c <jpeg_mem_src+0x9c>
   1a3f9:	mov    0x10(%rsi),%rsi
   1a3fd:	cmp    %rdx,%rsi
   1a400:	je     1a456 <jpeg_mem_src+0xc6>
   1a402:	mov    (%r14),%rax
   1a405:	movl   $0x17,0x28(%rax)
   1a40c:	mov    (%r14),%rax
   1a40f:	mov    (%rax),%rax
   1a412:	mov    %r14,%rdi
   1a415:	callq  *%rax
   1a417:	lea    0xa2(%rip),%rdx        # 1a4c0 <init_mem_source>
   1a41e:	mov    -0x18(%rbp),%rcx
   1a422:	mov    -0x10(%rbp),%r8
   1a426:	mov    -0x8(%rbp),%rax
   1a42a:	jmp    1a456 <jpeg_mem_src+0xc6>
   1a42c:	mov    0x8(%r14),%rax
   1a430:	mov    (%rax),%rax
   1a433:	xor    %esi,%esi
   1a435:	mov    $0x38,%edx
   1a43a:	mov    %r14,%rdi
   1a43d:	callq  *%rax
   1a43f:	mov    %rax,0x28(%r14)
   1a443:	lea    0x76(%rip),%rdx        # 1a4c0 <init_mem_source>
   1a44a:	mov    -0x18(%rbp),%rcx
   1a44e:	mov    -0x10(%rbp),%r8
   1a452:	mov    -0x8(%rbp),%rax
   1a456:	mov    0x28(%r14),%rsi
   1a45a:	mov    %rdx,0x10(%rsi)
   1a45e:	lea    0x11b(%rip),%rdx        # 1a580 <fill_mem_input_buffer>
   1a465:	mov    %rdx,0x18(%rsi)
   1a469:	lea    0x160(%rip),%rdx        # 1a5d0 <skip_input_data>
   1a470:	mov    %rdx,0x20(%rsi)
   1a474:	mov    0x53ab5(%rip),%rdx        # 6df30 <jpeg_resync_to_restart@@LIBJPEG_6.2+0x4ad90>
   1a47b:	mov    %rdx,0x28(%rsi)
   1a47f:	lea    0x1ba(%rip),%rdx        # 1a640 <term_source>
   1a486:	mov    %rdx,0x30(%rsi)
   1a48a:	mov    %r15,0x8(%rsi)
   1a48e:	mov    %r13,(%rsi)
   1a491:	mov    %rax,%r13
   1a494:	mov    %r8,%r14
   1a497:	mov    %rcx,%r15
   1a49a:	leaveq 
   1a49b:	retq   
   1a49c:	nopl   0x0(%rax)

000000000001a4a0 <init_source>:
   1a4a0:	push   %rbp
   1a4a1:	mov    %rsp,%rbp
   1a4a4:	mov    0x28(%rdi),%rax
   1a4a8:	movl   $0x1,0x48(%rax)
   1a4af:	leaveq 
   1a4b0:	retq   
   1a4b1:	data16 nopw %cs:0x0(%rax,%rax,1)
   1a4bc:	nopl   0x0(%rax)

000000000001a4c0 <init_mem_source>:
   1a4c0:	push   %rbp
   1a4c1:	mov    %rsp,%rbp
   1a4c4:	leaveq 
   1a4c5:	retq   
   1a4c6:	nopw   %cs:0x0(%rax,%rax,1)

000000000001a4d0 <fill_input_buffer>:
   1a4d0:	push   %rbp
   1a4d1:	mov    %rsp,%rbp
   1a4d4:	sub    $0x10,%rsp
   1a4d8:	mov    %r14,-0x8(%rbp)
   1a4dc:	mov    %r15,-0x10(%rbp)
   1a4e0:	mov    %rdi,%r15
   1a4e3:	mov    $0x1,%esi
   1a4e8:	mov    0x28(%r15),%r14
   1a4ec:	mov    0x40(%r14),%rdi
   1a4f0:	mov    $0x1000,%edx
   1a4f5:	mov    0x38(%r14),%rcx
   1a4f9:	callq  40e0 <fread@plt>
   1a4fe:	test   %rax,%rax
   1a501:	jne    1a551 <fill_input_buffer+0x81>
   1a503:	movslq 0x48(%r14),%rax
   1a507:	test   %eax,%eax
   1a509:	je     1a520 <fill_input_buffer+0x50>
   1a50b:	mov    (%r15),%rax
   1a50e:	movl   $0x2a,0x28(%rax)
   1a515:	mov    (%r15),%rax
   1a518:	mov    (%rax),%rax
   1a51b:	mov    %r15,%rdi
   1a51e:	callq  *%rax
   1a520:	mov    (%r15),%rax
   1a523:	movl   $0x78,0x28(%rax)
   1a52a:	mov    (%r15),%rax
   1a52d:	mov    0x8(%rax),%rax
   1a531:	mov    %r15,%rdi
   1a534:	mov    $0xffffffffffffffff,%rsi
   1a53b:	callq  *%rax
   1a53d:	mov    0x40(%r14),%rax
   1a541:	movb   $0xff,(%rax)
   1a544:	mov    0x40(%r14),%rax
   1a548:	movb   $0xd9,0x1(%rax)
   1a54c:	mov    $0x2,%eax
   1a551:	mov    0x40(%r14),%rcx
   1a555:	mov    %rcx,(%r14)
   1a558:	mov    %rax,0x8(%r14)
   1a55c:	movl   $0x0,0x48(%r14)
   1a564:	mov    $0x1,%eax
   1a569:	mov    -0x10(%rbp),%r15
   1a56d:	mov    -0x8(%rbp),%r14
   1a571:	leaveq 
   1a572:	retq   
   1a573:	data16 nopw %cs:0x0(%rax,%rax,1)
   1a57e:	xchg   %ax,%ax

000000000001a580 <fill_mem_input_buffer>:
   1a580:	push   %rbp
   1a581:	mov    %rsp,%rbp
   1a584:	sub    $0x10,%rsp
   1a588:	mov    %r15,-0x8(%rbp)
   1a58c:	mov    (%rdi),%rax
   1a58f:	movl   $0x78,0x28(%rax)
   1a596:	mov    (%rdi),%rax
   1a599:	mov    0x8(%rax),%rax
   1a59d:	mov    $0xffffffffffffffff,%rsi
   1a5a4:	mov    %rdi,%r15
   1a5a7:	callq  *%rax
   1a5a9:	lea    0x3f168(%rip),%rcx        # 59718 <mybuffer.5>
   1a5b0:	mov    0x28(%r15),%rax
   1a5b4:	mov    %rcx,(%rax)
   1a5b7:	mov    0x28(%r15),%rax
   1a5bb:	movq   $0x2,0x8(%rax)
   1a5c3:	mov    $0x1,%eax
   1a5c8:	mov    -0x8(%rbp),%r15
   1a5cc:	leaveq 
   1a5cd:	retq   
   1a5ce:	xchg   %ax,%ax

000000000001a5d0 <skip_input_data>:
   1a5d0:	push   %rbp
   1a5d1:	mov    %rsp,%rbp
   1a5d4:	sub    $0x20,%rsp
   1a5d8:	mov    0x28(%rdi),%rax
   1a5dc:	test   %rsi,%rsi
   1a5df:	jg     1a5e3 <skip_input_data+0x13>
   1a5e1:	leaveq 
   1a5e2:	retq   
   1a5e3:	mov    %r13,-0x8(%rbp)
   1a5e7:	mov    %r14,-0x10(%rbp)
   1a5eb:	mov    %r15,-0x18(%rbp)
   1a5ef:	mov    %r12,%r13
   1a5f2:	mov    %rbx,%r12
   1a5f5:	mov    %rsi,%rbx
   1a5f8:	mov    %rdi,%r14
   1a5fb:	mov    %rax,%r15
   1a5fe:	jmp    1a60a <skip_input_data+0x3a>
   1a600:	sub    %rax,%rbx
   1a603:	mov    %r14,%rdi
   1a606:	callq  *0x18(%r15)
   1a60a:	mov    0x8(%r15),%rax
   1a60e:	cmp    %rbx,%rax
   1a611:	jl     1a600 <skip_input_data+0x30>
   1a613:	mov    %rbx,%rcx
   1a616:	add    (%r15),%rcx
   1a619:	mov    %rcx,(%r15)
   1a61c:	sub    %rbx,%rax
   1a61f:	mov    %rax,0x8(%r15)
   1a623:	mov    %r12,%rbx
   1a626:	mov    %r13,%r12
   1a629:	mov    -0x18(%rbp),%r15
   1a62d:	mov    -0x10(%rbp),%r14
   1a631:	mov    -0x8(%rbp),%r13
   1a635:	leaveq 
   1a636:	retq   
   1a637:	nopw   0x0(%rax,%rax,1)

000000000001a640 <term_source>:
   1a640:	push   %rbp
   1a641:	mov    %rsp,%rbp
   1a644:	leaveq 
   1a645:	retq   
   1a646:	nopw   %cs:0x0(%rax,%rax,1)

000000000001a650 <jinit_d_coef_controller>:
   1a650:	push   %rbp
   1a651:	mov    %rsp,%rbp
   1a654:	sub    $0x40,%rsp
   1a658:	mov    %r13,-0x20(%rbp)
   1a65c:	mov    %r14,-0x28(%rbp)
   1a660:	mov    %r15,-0x30(%rbp)
   1a664:	mov    $0x1,%r15d
   1a66a:	mov    0x8(%rdi),%rax
   1a66e:	mov    (%rax),%rax
   1a671:	mov    %rbx,%r13
   1a674:	mov    %rsi,%r14
   1a677:	mov    $0xe8,%edx
   1a67c:	mov    %rdi,%rbx
   1a67f:	mov    %r15,%rsi
   1a682:	callq  *%rax
   1a684:	mov    %rax,0x230(%rbx)
   1a68b:	lea    0x129e(%rip),%rcx        # 1b930 <start_input_pass>
   1a692:	mov    %rcx,(%rax)
   1a695:	lea    0x12b4(%rip),%rcx        # 1b950 <start_output_pass>
   1a69c:	mov    %rcx,0x10(%rax)
   1a6a0:	movq   $0x0,0xe0(%rax)
   1a6ab:	xor    %esi,%esi
   1a6ad:	test   %r14d,%r14d
   1a6b0:	jne    1a6d2 <jinit_d_coef_controller+0x82>
   1a6b2:	mov    0x8(%rbx),%rcx
   1a6b6:	mov    0x8(%rcx),%rcx
   1a6ba:	mov    %rax,%r14
   1a6bd:	mov    %r15,%rax
   1a6c0:	mov    %rsi,%r15
   1a6c3:	mov    %rax,%rsi
   1a6c6:	mov    $0x500,%edx
   1a6cb:	mov    %rbx,%rdi
   1a6ce:	callq  *%rcx
   1a6d0:	jmp    1a70e <jinit_d_coef_controller+0xbe>
   1a6d2:	mov    0x130(%rbx),%rdx
   1a6d9:	lea    0x90(%rax),%rcx
   1a6e0:	mov    %rcx,-0x38(%rbp)
   1a6e4:	mov    %rax,-0x8(%rbp)
   1a6e8:	mov    %r13,-0x10(%rbp)
   1a6ec:	mov    %r12,-0x18(%rbp)
   1a6f0:	mov    %rsi,%r13
   1a6f3:	jmpq   1a7ad <jinit_d_coef_controller+0x15d>
   1a6f8:	movslq %r15d,%rdx
   1a6fb:	mov    %rdx,%rcx
   1a6fe:	shl    $0x7,%rcx
   1a702:	add    %rax,%rcx
   1a705:	mov    %rcx,0x38(%r14,%rdx,8)
   1a70a:	add    $0x1,%r15d
   1a70e:	cmp    $0x9,%r15d
   1a712:	jle    1a6f8 <jinit_d_coef_controller+0xa8>
   1a714:	lea    0x12b5(%rip),%rax        # 1b9d0 <dummy_consume_data>
   1a71b:	mov    %rax,0x8(%r14)
   1a71f:	lea    0x14a(%rip),%rax        # 1a870 <decompress_onepass>
   1a726:	mov    %rax,0x18(%r14)
   1a72a:	movq   $0x0,0x20(%r14)
   1a732:	mov    $0x1,%r15d
   1a738:	jmpq   1a7dc <jinit_d_coef_controller+0x18c>
   1a73d:	movslq 0xc(%rdx),%r12
   1a741:	movslq 0x138(%rbx),%rax
   1a748:	test   %eax,%eax
   1a74a:	je     1a750 <jinit_d_coef_controller+0x100>
   1a74c:	lea    (%r12,%r12,2),%r12d
   1a750:	mov    0x1c(%rdx),%edi
   1a753:	movslq 0x8(%rdx),%rsi
   1a757:	mov    0x8(%rbx),%rax
   1a75b:	mov    0x28(%rax),%r14
   1a75f:	mov    %rdx,%r15
   1a762:	callq  42b0 <jround_up@plt>
   1a767:	mov    0x20(%r15),%edi
   1a76b:	movslq 0xc(%r15),%rsi
   1a76f:	mov    %r15,-0x40(%rbp)
   1a773:	mov    %rax,%r15
   1a776:	callq  42b0 <jround_up@plt>
   1a77b:	mov    %r15,%rcx
   1a77e:	mov    %rax,%r8
   1a781:	mov    %r12,%r9
   1a784:	mov    $0x1,%r15d
   1a78a:	mov    %r15,%rdx
   1a78d:	mov    %rbx,%rdi
   1a790:	mov    %r15,%rsi
   1a793:	callq  *%r14
   1a796:	movslq %r13d,%rdx
   1a799:	mov    -0x38(%rbp),%rcx
   1a79d:	mov    %rax,(%rcx,%rdx,8)
   1a7a1:	mov    -0x40(%rbp),%rax
   1a7a5:	lea    0x60(%rax),%rdx
   1a7a9:	add    $0x1,%r13d
   1a7ad:	movslq 0x38(%rbx),%rax
   1a7b1:	cmp    %r13d,%eax
   1a7b4:	jg     1a73d <jinit_d_coef_controller+0xed>
   1a7b6:	lea    0x1223(%rip),%rax        # 1b9e0 <consume_data>
   1a7bd:	mov    -0x8(%rbp),%r14
   1a7c1:	mov    %rax,0x8(%r14)
   1a7c5:	lea    0x394(%rip),%rax        # 1ab60 <decompress_data>
   1a7cc:	mov    %rax,0x18(%r14)
   1a7d0:	mov    %rcx,0x20(%r14)
   1a7d4:	mov    -0x18(%rbp),%r12
   1a7d8:	mov    -0x10(%rbp),%r13
   1a7dc:	mov    0x8(%rbx),%rax
   1a7e0:	mov    (%rax),%rax
   1a7e3:	mov    %r15,%rsi
   1a7e6:	mov    %rbx,%rdi
   1a7e9:	mov    $0x80,%edx
   1a7ee:	callq  *%rax
   1a7f0:	mov    %rax,0x88(%r14)
   1a7f7:	mov    %r13,%rbx
   1a7fa:	mov    -0x30(%rbp),%r15
   1a7fe:	mov    -0x28(%rbp),%r14
   1a802:	mov    -0x20(%rbp),%r13
   1a806:	leaveq 
   1a807:	retq   
   1a808:	nopl   0x0(%rax,%rax,1)

000000000001a810 <start_iMCU_row>:
   1a810:	push   %rbp
   1a811:	mov    %rsp,%rbp
   1a814:	mov    0x230(%rdi),%rcx
   1a81b:	movslq 0x1b0(%rdi),%rax
   1a822:	cmp    $0x1,%eax
   1a825:	jg     1a848 <start_iMCU_row+0x38>
   1a827:	mov    0x1a4(%rdi),%eax
   1a82d:	add    $0xffffffff,%eax
   1a830:	cmp    0xb0(%rdi),%eax
   1a836:	ja     1a85f <start_iMCU_row+0x4f>
   1a838:	mov    0x1b8(%rdi),%rax
   1a83f:	movslq 0x48(%rax),%rax
   1a843:	mov    %eax,0x30(%rcx)
   1a846:	jmp    1a84f <start_iMCU_row+0x3f>
   1a848:	movl   $0x1,0x30(%rcx)
   1a84f:	movl   $0x0,0x28(%rcx)
   1a856:	movl   $0x0,0x2c(%rcx)
   1a85d:	leaveq 
   1a85e:	retq   
   1a85f:	mov    0x1b8(%rdi),%rax
   1a866:	movslq 0xc(%rax),%rax
   1a86a:	mov    %eax,0x30(%rcx)
   1a86d:	jmp    1a84f <start_iMCU_row+0x3f>
   1a86f:	nop

000000000001a870 <decompress_onepass>:
   1a870:	push   %rbp
   1a871:	mov    %rsp,%rbp
   1a874:	sub    $0xa0,%rsp
   1a87b:	mov    %rsi,-0x50(%rbp)
   1a87f:	mov    %rdi,-0x80(%rbp)
   1a883:	mov    %rbx,-0x8(%rbp)
   1a887:	mov    %r12,-0x10(%rbp)
   1a88b:	mov    %r13,-0x18(%rbp)
   1a88f:	mov    %r14,-0x20(%rbp)
   1a893:	mov    %r15,-0x28(%rbp)
   1a897:	mov    0x230(%rdi),%r15
   1a89e:	mov    %r15,-0x78(%rbp)
   1a8a2:	movslq 0x2c(%r15),%rax
   1a8a6:	mov    0x1d8(%rdi),%r13d
   1a8ad:	add    $0xffffffff,%r13d
   1a8b1:	mov    %r13,-0x30(%rbp)
   1a8b5:	mov    0x1a4(%rdi),%ecx
   1a8bb:	add    $0xffffffff,%ecx
   1a8be:	mov    %rcx,-0x68(%rbp)
   1a8c2:	lea    0x38(%r15),%rdx
   1a8c6:	mov    %rdx,-0x70(%rbp)
   1a8ca:	jmp    1a93b <decompress_onepass+0xcb>
   1a8cc:	mov    0x38(%r15),%rax
   1a8d0:	movslq 0x1e0(%rdi),%rsi
   1a8d7:	shl    $0x7,%rsi
   1a8db:	mov    %rdx,%r12
   1a8de:	mov    %rdi,%r14
   1a8e1:	mov    %rax,%rdi
   1a8e4:	callq  44d0 <jzero_far@plt>
   1a8e9:	mov    0x250(%r14),%rax
   1a8f0:	mov    0x8(%rax),%rax
   1a8f4:	mov    %r14,%rdi
   1a8f7:	mov    %r12,%rsi
   1a8fa:	callq  *%rax
   1a8fc:	test   %eax,%eax
   1a8fe:	je     1a99e <decompress_onepass+0x12e>
   1a904:	mov    0x220(%r14),%rax
   1a90b:	cmp    0x14(%rax),%ebx
   1a90e:	jae    1a9c5 <decompress_onepass+0x155>
   1a914:	mov    %r12,%rdx
   1a917:	mov    %r14,%rdi
   1a91a:	add    $0x1,%ebx
   1a91d:	mov    -0x88(%rbp),%rax
   1a924:	mov    %rbx,-0x90(%rbp)
   1a92b:	cmp    %r13d,%ebx
   1a92e:	jbe    1a8cc <decompress_onepass+0x5c>
   1a930:	movl   $0x0,0x28(%r15)
   1a938:	add    $0x1,%eax
   1a93b:	mov    %rax,-0x88(%rbp)
   1a942:	movslq 0x30(%r15),%rcx
   1a946:	cmp    %eax,%ecx
   1a948:	jg     1a9d7 <decompress_onepass+0x167>
   1a94e:	mov    0xb8(%rdi),%eax
   1a954:	add    $0x1,%eax
   1a957:	mov    %eax,0xb8(%rdi)
   1a95d:	mov    0xb0(%rdi),%eax
   1a963:	add    $0x1,%eax
   1a966:	mov    %eax,0xb0(%rdi)
   1a96c:	mov    0x1a4(%rdi),%ecx
   1a972:	cmp    %eax,%ecx
   1a974:	ja     1a9e0 <decompress_onepass+0x170>
   1a976:	mov    0x240(%rdi),%rax
   1a97d:	mov    0x18(%rax),%rax
   1a981:	callq  *%rax
   1a983:	mov    $0x4,%eax
   1a988:	mov    -0x28(%rbp),%r15
   1a98c:	mov    -0x20(%rbp),%r14
   1a990:	mov    -0x18(%rbp),%r13
   1a994:	mov    -0x10(%rbp),%r12
   1a998:	mov    -0x8(%rbp),%rbx
   1a99c:	leaveq 
   1a99d:	retq   
   1a99e:	mov    -0x88(%rbp),%rax
   1a9a5:	mov    %eax,0x2c(%r15)
   1a9a9:	mov    %ebx,0x28(%r15)
   1a9ad:	mov    -0x28(%rbp),%r15
   1a9b1:	mov    -0x20(%rbp),%r14
   1a9b5:	mov    -0x18(%rbp),%r13
   1a9b9:	mov    -0x10(%rbp),%r12
   1a9bd:	mov    -0x8(%rbp),%rbx
   1a9c1:	xor    %eax,%eax
   1a9c3:	leaveq 
   1a9c4:	retq   
   1a9c5:	mov    0x18(%rax),%eax
   1a9c8:	cmp    %ebx,%eax
   1a9ca:	jae    1aa00 <decompress_onepass+0x190>
   1a9cc:	mov    %r12,%rdx
   1a9cf:	mov    %r14,%rdi
   1a9d2:	jmpq   1a91a <decompress_onepass+0xaa>
   1a9d7:	mov    0x28(%r15),%ebx
   1a9db:	jmpq   1a924 <decompress_onepass+0xb4>
   1a9e0:	callq  1a810 <start_iMCU_row>
   1a9e5:	mov    $0x3,%eax
   1a9ea:	mov    -0x28(%rbp),%r15
   1a9ee:	mov    -0x20(%rbp),%r14
   1a9f2:	mov    -0x18(%rbp),%r13
   1a9f6:	mov    -0x10(%rbp),%r12
   1a9fa:	mov    -0x8(%rbp),%rbx
   1a9fe:	leaveq 
   1a9ff:	retq   
   1aa00:	mov    %r12,%rdx
   1aa03:	mov    %r14,%rdi
   1aa06:	xor    %r15d,%r15d
   1aa09:	mov    -0x68(%rbp),%r8
   1aa0d:	mov    -0x50(%rbp),%r9
   1aa11:	mov    -0x88(%rbp),%rsi
   1aa18:	mov    %r15,%r10
   1aa1b:	mov    %r10,%r12
   1aa1e:	jmp    1aa42 <decompress_onepass+0x1d2>
   1aa20:	movslq %r10d,%rax
   1aa23:	mov    0x1b8(%rdi,%rax,8),%r14
   1aa2b:	movslq 0x30(%r14),%rax
   1aa2f:	test   %eax,%eax
   1aa31:	jne    1aa57 <decompress_onepass+0x1e7>
   1aa33:	add    0x3c(%r14),%r12d
   1aa37:	add    $0x1,%r10d
   1aa3b:	mov    -0x90(%rbp),%rbx
   1aa42:	movslq 0x1b0(%rdi),%rax
   1aa49:	cmp    %r10d,%eax
   1aa4c:	jg     1aa20 <decompress_onepass+0x1b0>
   1aa4e:	mov    -0x78(%rbp),%r15
   1aa52:	jmpq   1a91a <decompress_onepass+0xaa>
   1aa57:	cmp    %r13d,%ebx
   1aa5a:	mov    0x258(%rdi),%rax
   1aa61:	movslq 0x4(%r14),%rcx
   1aa65:	mov    0x8(%rax,%rcx,8),%rax
   1aa6a:	mov    %rax,-0x40(%rbp)
   1aa6e:	jb     1aa76 <decompress_onepass+0x206>
   1aa70:	movslq 0x44(%r14),%r13
   1aa74:	jmp    1aa7a <decompress_onepass+0x20a>
   1aa76:	movslq 0x34(%r14),%r13
   1aa7a:	mov    %rsi,%rcx
   1aa7d:	imul   0x24(%r14),%ecx
   1aa82:	movslq %ecx,%rcx
   1aa85:	shl    $0x3,%rcx
   1aa89:	movslq 0x4(%r14),%r11
   1aa8d:	add    (%r9,%r11,8),%rcx
   1aa91:	mov    0x220(%rdi),%r9
   1aa98:	mov    0x14(%r9),%r9d
   1aa9c:	sub    %r9d,%ebx
   1aa9f:	imul   0x40(%r14),%ebx
   1aaa4:	mov    %r10,-0x98(%rbp)
   1aaab:	mov    %rbx,-0x58(%rbp)
   1aaaf:	mov    %r15,%r9
   1aab2:	jmp    1ab0a <decompress_onepass+0x29a>
   1aab4:	lea    (%r15,%r12,1),%esi
   1aab8:	movslq %esi,%rsi
   1aabb:	mov    (%rdx,%rsi,8),%rdx
   1aabf:	mov    %r14,%rsi
   1aac2:	mov    %rbx,%r8
   1aac5:	callq  *%rax
   1aac7:	add    0x24(%r14),%ebx
   1aacb:	add    $0x1,%r15d
   1aacf:	mov    -0x40(%rbp),%rax
   1aad3:	mov    -0x48(%rbp),%rcx
   1aad7:	mov    -0x80(%rbp),%rdi
   1aadb:	mov    -0x70(%rbp),%rdx
   1aadf:	cmp    %r13d,%r15d
   1aae2:	jl     1aab4 <decompress_onepass+0x244>
   1aae4:	mov    -0x58(%rbp),%rbx
   1aae8:	mov    -0x38(%rbp),%r9
   1aaec:	mov    -0x60(%rbp),%rsi
   1aaf0:	mov    -0x68(%rbp),%r8
   1aaf4:	add    0x34(%r14),%r12d
   1aaf8:	movslq 0x24(%r14),%r10
   1aafc:	lea    (%rcx,%r10,8),%rcx
   1ab00:	add    $0x1,%esi
   1ab03:	add    $0x1,%r9d
   1ab07:	xor    %r15d,%r15d
   1ab0a:	mov    %rcx,-0x48(%rbp)
   1ab0e:	movslq 0x38(%r14),%r10
   1ab12:	cmp    %r9d,%r10d
   1ab15:	jg     1ab32 <decompress_onepass+0x2c2>
   1ab17:	mov    -0x98(%rbp),%r10
   1ab1e:	mov    -0x30(%rbp),%r13
   1ab22:	mov    -0x50(%rbp),%r9
   1ab26:	mov    -0x88(%rbp),%rsi
   1ab2d:	jmpq   1aa37 <decompress_onepass+0x1c7>
   1ab32:	mov    0xb0(%rdi),%r10d
   1ab39:	cmp    %r8d,%r10d
   1ab3c:	jae    1ab48 <decompress_onepass+0x2d8>
   1ab3e:	mov    %rsi,-0x60(%rbp)
   1ab42:	mov    %r9,-0x38(%rbp)
   1ab46:	jmp    1aadf <decompress_onepass+0x26f>
   1ab48:	cmp    0x48(%r14),%esi
   1ab4c:	jge    1aaf4 <decompress_onepass+0x284>
   1ab4e:	mov    %rsi,-0x60(%rbp)
   1ab52:	mov    %r9,-0x38(%rbp)
   1ab56:	jmp    1aadf <decompress_onepass+0x26f>
   1ab58:	nopl   0x0(%rax,%rax,1)

000000000001ab60 <decompress_data>:
   1ab60:	push   %rbp
   1ab61:	mov    %rsp,%rbp
   1ab64:	sub    $0x80,%rsp
   1ab6b:	mov    %r14,-0x20(%rbp)
   1ab6f:	mov    %r15,-0x28(%rbp)
   1ab73:	mov    %rsi,-0x58(%rbp)
   1ab77:	mov    0x230(%rdi),%rax
   1ab7e:	mov    %rax,-0x68(%rbp)
   1ab82:	mov    0x1a4(%rdi),%eax
   1ab88:	mov    %rax,-0x78(%rbp)
   1ab8c:	mov    %rbx,%rcx
   1ab8f:	mov    %rdi,%rbx
   1ab92:	mov    %r13,%rdx
   1ab95:	xor    %r14d,%r14d
   1ab98:	jmp    1aba0 <decompress_data+0x40>
   1ab9a:	mov    %r15,%rcx
   1ab9d:	mov    %r13,%rdx
   1aba0:	movslq 0xb4(%rbx),%rsi
   1aba7:	movslq 0xac(%rbx),%rax
   1abae:	cmp    %eax,%esi
   1abb0:	jle    1abdb <decompress_data+0x7b>
   1abb2:	mov    0x240(%rbx),%rax
   1abb9:	mov    (%rax),%rax
   1abbc:	mov    %rdx,%r13
   1abbf:	mov    %rcx,%r15
   1abc2:	mov    %rbx,%rdi
   1abc5:	callq  *%rax
   1abc7:	test   %eax,%eax
   1abc9:	jne    1ab9a <decompress_data+0x3a>
   1abcb:	mov    %r14,%rax
   1abce:	mov    %r15,%rbx
   1abd1:	mov    -0x28(%rbp),%r15
   1abd5:	mov    -0x20(%rbp),%r14
   1abd9:	leaveq 
   1abda:	retq   
   1abdb:	cmp    %eax,%esi
   1abdd:	jne    1abed <decompress_data+0x8d>
   1abdf:	mov    0xb8(%rbx),%eax
   1abe5:	cmp    0xb0(%rbx),%eax
   1abeb:	jae    1abb2 <decompress_data+0x52>
   1abed:	mov    0x130(%rbx),%r15
   1abf4:	mov    -0x78(%rbp),%rax
   1abf8:	lea    -0x1(%rax),%r13d
   1abfc:	mov    %rcx,-0x8(%rbp)
   1ac00:	mov    %r12,-0x10(%rbp)
   1ac04:	mov    %rdx,-0x18(%rbp)
   1ac08:	mov    %r13,-0x60(%rbp)
   1ac0c:	mov    -0x58(%rbp),%r12
   1ac10:	mov    -0x68(%rbp),%rax
   1ac14:	mov    %r14,%r8
   1ac17:	jmp    1ac8e <decompress_data+0x12e>
   1ac19:	mov    %rbx,%rdi
   1ac1c:	mov    %r15,%rsi
   1ac1f:	mov    %r12,%rdx
   1ac22:	mov    %r14,%r8
   1ac25:	callq  *%r9
   1ac28:	add    0x24(%r15),%r14d
   1ac2c:	add    $0x80,%r12
   1ac33:	add    $0x1,%r13d
   1ac37:	mov    -0x40(%rbp),%r9
   1ac3b:	mov    -0x50(%rbp),%rcx
   1ac3f:	mov    -0x38(%rbp),%r10
   1ac43:	mov    0x220(%rbx),%rax
   1ac4a:	mov    0x44(%rax,%r10,4),%eax
   1ac4f:	cmp    %r13d,%eax
   1ac52:	jae    1ac19 <decompress_data+0xb9>
   1ac54:	mov    -0x78(%rbp),%rax
   1ac58:	lea    0x1(%rax),%esi
   1ac5b:	movslq 0x24(%r15),%rax
   1ac5f:	lea    (%rcx,%rax,8),%rcx
   1ac63:	mov    -0x48(%rbp),%rax
   1ac67:	mov    -0x30(%rbp),%rdx
   1ac6b:	xor    %r14d,%r14d
   1ac6e:	mov    %rcx,-0x50(%rbp)
   1ac72:	cmp    %esi,%edx
   1ac74:	jg     1accf <decompress_data+0x16f>
   1ac76:	mov    -0x60(%rbp),%r13
   1ac7a:	mov    -0x58(%rbp),%r12
   1ac7e:	mov    -0x68(%rbp),%rax
   1ac82:	mov    -0x70(%rbp),%r8
   1ac86:	add    $0x1,%r8d
   1ac8a:	add    $0x60,%r15
   1ac8e:	movslq 0x38(%rbx),%rcx
   1ac92:	cmp    %r8d,%ecx
   1ac95:	jg     1acf2 <decompress_data+0x192>
   1ac97:	mov    0xb8(%rbx),%eax
   1ac9d:	add    $0x1,%eax
   1aca0:	mov    %eax,0xb8(%rbx)
   1aca6:	mov    0x1a4(%rbx),%ecx
   1acac:	cmp    %eax,%ecx
   1acae:	jbe    1ad58 <decompress_data+0x1f8>
   1acb4:	mov    $0x3,%eax
   1acb9:	mov    -0x18(%rbp),%r13
   1acbd:	mov    -0x10(%rbp),%r12
   1acc1:	mov    -0x8(%rbp),%rbx
   1acc5:	mov    -0x28(%rbp),%r15
   1acc9:	mov    -0x20(%rbp),%r14
   1accd:	leaveq 
   1acce:	retq   
   1accf:	mov    0x220(%rbx),%rdx
   1acd6:	mov    0x1c(%rdx,%r10,4),%r13d
   1acdb:	mov    %r13,%r12
   1acde:	shl    $0x7,%r12
   1ace2:	movslq %esi,%rdx
   1ace5:	add    (%rax,%rdx,8),%r12
   1ace9:	mov    %rsi,-0x78(%rbp)
   1aced:	jmpq   1ac43 <decompress_data+0xe3>
   1acf2:	movslq 0x30(%r15),%rcx
   1acf6:	test   %ecx,%ecx
   1acf8:	je     1ac86 <decompress_data+0x126>
   1acfa:	movslq %r8d,%r9
   1acfd:	mov    %r9,-0x38(%rbp)
   1ad01:	mov    0x90(%rax,%r9,8),%rsi
   1ad09:	mov    0xc(%r15),%ecx
   1ad0d:	mov    %rcx,%rdx
   1ad10:	imul   0xb8(%rbx),%edx
   1ad17:	mov    0x8(%rbx),%rax
   1ad1b:	mov    0x40(%rax),%rax
   1ad1f:	mov    %rbx,%rdi
   1ad22:	mov    %r8,-0x70(%rbp)
   1ad26:	mov    %r14,%r8
   1ad29:	mov    %r9,%r14
   1ad2c:	callq  *%rax
   1ad2e:	mov    %rax,-0x48(%rbp)
   1ad32:	mov    0xb8(%rbx),%ecx
   1ad38:	cmp    %r13d,%ecx
   1ad3b:	jb     1ad73 <decompress_data+0x213>
   1ad3d:	mov    %rax,%rsi
   1ad40:	mov    %r14,%r10
   1ad43:	mov    0x20(%r15),%eax
   1ad47:	mov    0xc(%r15),%ecx
   1ad4b:	xor    %edx,%edx
   1ad4d:	div    %ecx
   1ad4f:	test   %edx,%edx
   1ad51:	je     1ad9d <decompress_data+0x23d>
   1ad53:	mov    %rsi,%rax
   1ad56:	jmp    1ad7a <decompress_data+0x21a>
   1ad58:	mov    $0x4,%eax
   1ad5d:	mov    -0x18(%rbp),%r13
   1ad61:	mov    -0x10(%rbp),%r12
   1ad65:	mov    -0x8(%rbp),%rbx
   1ad69:	mov    -0x28(%rbp),%r15
   1ad6d:	mov    -0x20(%rbp),%r14
   1ad71:	leaveq 
   1ad72:	retq   
   1ad73:	movslq 0xc(%r15),%rdx
   1ad77:	mov    %r14,%r10
   1ad7a:	mov    %rdx,-0x30(%rbp)
   1ad7e:	mov    0x258(%rbx),%rcx
   1ad85:	mov    0x8(%rcx,%r10,8),%r9
   1ad8a:	mov    %r9,-0x40(%rbp)
   1ad8e:	mov    (%r12,%r10,8),%rcx
   1ad92:	xor    %r14d,%r14d
   1ad95:	mov    %r14,%rsi
   1ad98:	jmpq   1ac6e <decompress_data+0x10e>
   1ad9d:	movslq 0xc(%r15),%rdx
   1ada1:	mov    %rsi,%rax
   1ada4:	jmp    1ad7a <decompress_data+0x21a>
   1ada6:	nopw   %cs:0x0(%rax,%rax,1)

000000000001adb0 <smoothing_ok>:
   1adb0:	push   %rbp
   1adb1:	mov    %rsp,%rbp
   1adb4:	sub    $0x20,%rsp
   1adb8:	mov    0x230(%rdi),%rcx
   1adbf:	xor    %eax,%eax
   1adc1:	movslq 0x138(%rdi),%rdx
   1adc8:	test   %edx,%edx
   1adca:	jne    1adce <smoothing_ok+0x1e>
   1adcc:	leaveq 
   1adcd:	retq   
   1adce:	mov    0xc0(%rdi),%rdx
   1add5:	test   %rdx,%rdx
   1add8:	jne    1addc <smoothing_ok+0x2c>
   1adda:	leaveq 
   1addb:	retq   
   1addc:	mov    $0x1,%r9d
   1ade2:	mov    0xe0(%rcx),%rdx
   1ade9:	test   %rdx,%rdx
   1adec:	je     1adf3 <smoothing_ok+0x43>
   1adee:	mov    %rax,%r11
   1adf1:	jmp    1ae51 <smoothing_ok+0xa1>
   1adf3:	mov    0x8(%rdi),%rdx
   1adf7:	mov    (%rdx),%r8
   1adfa:	movslq 0x38(%rdi),%rdx
   1adfe:	lea    (%rdx,%rdx,2),%rdx
   1ae02:	shl    $0x3,%rdx
   1ae06:	mov    %rdi,%r10
   1ae09:	mov    %r9,%rsi
   1ae0c:	mov    %r12,-0x8(%rbp)
   1ae10:	mov    %r13,-0x10(%rbp)
   1ae14:	mov    %r14,-0x18(%rbp)
   1ae18:	mov    %r15,-0x20(%rbp)
   1ae1c:	mov    %rax,%r12
   1ae1f:	mov    %r9,%r13
   1ae22:	mov    %rdi,%r14
   1ae25:	mov    %r10,%rdi
   1ae28:	mov    %rcx,%r15
   1ae2b:	callq  *%r8
   1ae2e:	mov    %rax,0xe0(%r15)
   1ae35:	mov    %r15,%rcx
   1ae38:	mov    %r14,%rdi
   1ae3b:	mov    %r13,%r9
   1ae3e:	mov    %r12,%r11
   1ae41:	mov    -0x20(%rbp),%r15
   1ae45:	mov    -0x18(%rbp),%r14
   1ae49:	mov    -0x10(%rbp),%r13
   1ae4d:	mov    -0x8(%rbp),%r12
   1ae51:	mov    0xe0(%rcx),%rsi
   1ae58:	mov    0x130(%rdi),%rdx
   1ae5f:	add    $0x50,%rdx
   1ae63:	mov    %r14,-0x18(%rbp)
   1ae67:	mov    %r15,-0x20(%rbp)
   1ae6b:	mov    %r11,%rax
   1ae6e:	mov    %rax,%r10
   1ae71:	cmp    0x38(%rdi),%r10d
   1ae75:	jl     1ae81 <smoothing_ok+0xd1>
   1ae77:	mov    -0x20(%rbp),%r15
   1ae7b:	mov    -0x18(%rbp),%r14
   1ae7f:	leaveq 
   1ae80:	retq   
   1ae81:	mov    (%rdx),%r8
   1ae84:	test   %r8,%r8
   1ae87:	je     1aee1 <smoothing_ok+0x131>
   1ae89:	movzwl (%r8),%ecx
   1ae8d:	test   %cx,%cx
   1ae90:	je     1aeee <smoothing_ok+0x13e>
   1ae92:	movzwl 0x2(%r8),%ecx
   1ae97:	test   %cx,%cx
   1ae9a:	je     1aefb <smoothing_ok+0x14b>
   1ae9c:	movzwl 0x10(%r8),%ecx
   1aea1:	test   %cx,%cx
   1aea4:	je     1af08 <smoothing_ok+0x158>
   1aea6:	movzwl 0x20(%r8),%ecx
   1aeab:	test   %cx,%cx
   1aeae:	je     1af15 <smoothing_ok+0x165>
   1aeb0:	movzwl 0x12(%r8),%ecx
   1aeb5:	test   %cx,%cx
   1aeb8:	je     1af22 <smoothing_ok+0x172>
   1aeba:	movzwl 0x4(%r8),%ecx
   1aebf:	test   %cx,%cx
   1aec2:	je     1af2f <smoothing_ok+0x17f>
   1aec4:	movslq %r10d,%r8
   1aec7:	shl    $0x8,%r8
   1aecb:	add    0xc0(%rdi),%r8
   1aed2:	movslq (%r8),%rcx
   1aed5:	test   %ecx,%ecx
   1aed7:	js     1af3c <smoothing_ok+0x18c>
   1aed9:	mov    %r9,%rcx
   1aedc:	jmpq   1af63 <smoothing_ok+0x1b3>
   1aee1:	mov    %r11,%rax
   1aee4:	mov    -0x20(%rbp),%r15
   1aee8:	mov    -0x18(%rbp),%r14
   1aeec:	leaveq 
   1aeed:	retq   
   1aeee:	mov    %r11,%rax
   1aef1:	mov    -0x20(%rbp),%r15
   1aef5:	mov    -0x18(%rbp),%r14
   1aef9:	leaveq 
   1aefa:	retq   
   1aefb:	mov    %r11,%rax
   1aefe:	mov    -0x20(%rbp),%r15
   1af02:	mov    -0x18(%rbp),%r14
   1af06:	leaveq 
   1af07:	retq   
   1af08:	mov    %r11,%rax
   1af0b:	mov    -0x20(%rbp),%r15
   1af0f:	mov    -0x18(%rbp),%r14
   1af13:	leaveq 
   1af14:	retq   
   1af15:	mov    %r11,%rax
   1af18:	mov    -0x20(%rbp),%r15
   1af1c:	mov    -0x18(%rbp),%r14
   1af20:	leaveq 
   1af21:	retq   
   1af22:	mov    %r11,%rax
   1af25:	mov    -0x20(%rbp),%r15
   1af29:	mov    -0x18(%rbp),%r14
   1af2d:	leaveq 
   1af2e:	retq   
   1af2f:	mov    %r11,%rax
   1af32:	mov    -0x20(%rbp),%r15
   1af36:	mov    -0x18(%rbp),%r14
   1af3a:	leaveq 
   1af3b:	retq   
   1af3c:	mov    %r11,%rax
   1af3f:	mov    -0x20(%rbp),%r15
   1af43:	mov    -0x18(%rbp),%r14
   1af47:	leaveq 
   1af48:	retq   
   1af49:	movslq %ecx,%r14
   1af4c:	movslq (%r8,%r14,4),%r15
   1af50:	mov    %r15d,(%rsi,%r14,4)
   1af54:	movslq (%r8,%r14,4),%r14
   1af58:	test   %r14d,%r14d
   1af5b:	je     1af60 <smoothing_ok+0x1b0>
   1af5d:	mov    %r9,%rax
   1af60:	add    $0x1,%ecx
   1af63:	cmp    $0x5,%ecx
   1af66:	jle    1af49 <smoothing_ok+0x199>
   1af68:	add    $0x60,%rdx
   1af6c:	add    $0x1,%r10d
   1af70:	add    $0x18,%rsi
   1af74:	jmpq   1ae71 <smoothing_ok+0xc1>
   1af79:	nopl   0x0(%rax)

000000000001af80 <decompress_smooth_data>:
   1af80:	push   %rbp
   1af81:	mov    %rsp,%rbp
   1af84:	sub    $0x180,%rsp
   1af8b:	mov    %r13,-0x18(%rbp)
   1af8f:	mov    %r14,-0x20(%rbp)
   1af93:	mov    %r15,-0x28(%rbp)
   1af97:	mov    %rsi,-0x160(%rbp)
   1af9e:	mov    %rdi,-0x170(%rbp)
   1afa5:	mov    0x1a4(%rdi),%eax
   1afab:	mov    %rax,-0x180(%rbp)
   1afb2:	mov    0x230(%rdi),%rax
   1afb9:	mov    %rax,-0x178(%rbp)
   1afc0:	mov    0x88(%rax),%rax
   1afc7:	mov    %rax,-0xd8(%rbp)
   1afce:	xor    %r13d,%r13d
   1afd1:	mov    %r13,-0x128(%rbp)
   1afd8:	mov    %r12,%rcx
   1afdb:	mov    %rbx,%r12
   1afde:	mov    %rdi,%r14
   1afe1:	mov    $0x1,%ebx
   1afe6:	mov    %rbx,-0x120(%rbp)
   1afed:	jmp    1aff2 <decompress_smooth_data+0x72>
   1afef:	mov    %r15,%rcx
   1aff2:	movslq 0xb4(%r14),%rsi
   1aff9:	movslq 0xac(%r14),%rdx
   1b000:	cmp    %edx,%esi
   1b002:	jl     1b057 <decompress_smooth_data+0xd7>
   1b004:	mov    0x240(%r14),%rax
   1b00b:	movslq 0x24(%rax),%rax
   1b00f:	test   %eax,%eax
   1b011:	jne    1b057 <decompress_smooth_data+0xd7>
   1b013:	cmp    %edx,%esi
   1b015:	je     1b086 <decompress_smooth_data+0x106>
   1b017:	mov    0x240(%r14),%rax
   1b01e:	mov    (%rax),%rax
   1b021:	mov    %rcx,%r15
   1b024:	mov    %r14,%rdi
   1b027:	callq  *%rax
   1b029:	test   %eax,%eax
   1b02b:	jne    1afef <decompress_smooth_data+0x6f>
   1b02d:	mov    %r13,%rax
   1b030:	mov    %r12,%rbx
   1b033:	mov    %r15,%r12
   1b036:	mov    -0x28(%rbp),%r15
   1b03a:	mov    -0x20(%rbp),%r14
   1b03e:	mov    -0x18(%rbp),%r13
   1b042:	leaveq 
   1b043:	retq   
   1b044:	mov    %rbx,%rax
   1b047:	add    0xb8(%r14),%eax
   1b04e:	cmp    0xb0(%r14),%eax
   1b055:	jae    1b017 <decompress_smooth_data+0x97>
   1b057:	mov    0x130(%r14),%r15
   1b05e:	mov    -0x180(%rbp),%rax
   1b065:	add    $0xffffffff,%eax
   1b068:	mov    %rax,-0x168(%rbp)
   1b06f:	mov    %r12,-0x8(%rbp)
   1b073:	mov    %rcx,-0x10(%rbp)
   1b077:	mov    -0x178(%rbp),%r12
   1b07e:	mov    %r13,%r9
   1b081:	jmpq   1b237 <decompress_smooth_data+0x2b7>
   1b086:	movslq 0x20c(%r14),%rax
   1b08d:	test   %eax,%eax
   1b08f:	je     1b044 <decompress_smooth_data+0xc4>
   1b091:	mov    %r13,%rax
   1b094:	jmp    1b047 <decompress_smooth_data+0xc7>
   1b096:	movswq (%r12),%r13
   1b09b:	movswq (%rcx),%rsi
   1b09f:	movswq (%rax),%r11
   1b0a3:	mov    %r13,-0x58(%rbp)
   1b0a7:	mov    %r11,-0xa8(%rbp)
   1b0ae:	mov    %rsi,-0x148(%rbp)
   1b0b5:	mov    -0xc0(%rbp),%r10
   1b0bc:	movslq 0x4(%r10),%rcx
   1b0c0:	test   %ecx,%ecx
   1b0c2:	jne    1b286 <decompress_smooth_data+0x306>
   1b0c8:	mov    -0x150(%rbp),%rdi
   1b0cf:	mov    -0xe0(%rbp),%r8
   1b0d6:	mov    -0xd8(%rbp),%r9
   1b0dd:	movslq 0x8(%r10),%rcx
   1b0e1:	test   %ecx,%ecx
   1b0e3:	jne    1b2ae <decompress_smooth_data+0x32e>
   1b0e9:	mov    -0xa0(%rbp),%r14
   1b0f0:	mov    -0xb8(%rbp),%r15
   1b0f7:	movslq 0xc(%r10),%rcx
   1b0fb:	test   %ecx,%ecx
   1b0fd:	jne    1b2cf <decompress_smooth_data+0x34f>
   1b103:	mov    -0xf8(%rbp),%r14
   1b10a:	movslq 0x10(%r10),%rcx
   1b10e:	test   %ecx,%ecx
   1b110:	jne    1b2e9 <decompress_smooth_data+0x369>
   1b116:	movslq 0x14(%r10),%rcx
   1b11a:	test   %ecx,%ecx
   1b11c:	jne    1b344 <decompress_smooth_data+0x3c4>
   1b122:	mov    %r9,%rdx
   1b125:	mov    -0x170(%rbp),%r14
   1b12c:	mov    %r14,%rdi
   1b12f:	mov    -0x180(%rbp),%r15
   1b136:	mov    %r15,%rsi
   1b139:	mov    -0x38(%rbp),%rcx
   1b13d:	mov    -0x40(%rbp),%r13
   1b141:	mov    %r13,%r8
   1b144:	mov    -0x30(%rbp),%rax
   1b148:	callq  *%rax
   1b14a:	add    0x24(%r15),%r13d
   1b14e:	mov    %r13,-0x40(%rbp)
   1b152:	add    $0x1,%ebx
   1b155:	mov    -0x148(%rbp),%rcx
   1b15c:	mov    -0xa8(%rbp),%rdi
   1b163:	mov    -0x58(%rbp),%rdx
   1b167:	mov    -0xe8(%rbp),%r13
   1b16e:	mov    -0xb0(%rbp),%rax
   1b175:	mov    -0xf0(%rbp),%r15
   1b17c:	mov    -0xf8(%rbp),%r8
   1b183:	mov    -0x108(%rbp),%r9
   1b18a:	mov    -0xd8(%rbp),%rsi
   1b191:	pushq  -0xa0(%rbp)
   1b197:	pushq  -0xb8(%rbp)
   1b19d:	popq   -0x88(%rbp)
   1b1a3:	popq   -0x80(%rbp)
   1b1a6:	mov    %rdi,-0xb8(%rbp)
   1b1ad:	mov    %rdx,-0xa0(%rbp)
   1b1b4:	mov    0x220(%r14),%rdx
   1b1bb:	mov    0x44(%rdx,%r9,4),%edx
   1b1c0:	cmp    %ebx,%edx
   1b1c2:	jae    1b394 <decompress_smooth_data+0x414>
   1b1c8:	mov    -0x180(%rbp),%r15
   1b1cf:	movslq 0x24(%r15),%rcx
   1b1d3:	mov    -0x38(%rbp),%rax
   1b1d7:	lea    (%rax,%rcx,8),%rax
   1b1db:	mov    %rax,-0x38(%rbp)
   1b1df:	mov    -0x140(%rbp),%r10
   1b1e6:	mov    -0x100(%rbp),%rax
   1b1ed:	mov    -0x110(%rbp),%r8
   1b1f4:	mov    -0x130(%rbp),%rdi
   1b1fb:	mov    -0x118(%rbp),%rcx
   1b202:	mov    -0x138(%rbp),%rdx
   1b209:	xor    %r13d,%r13d
   1b20c:	mov    $0x1,%ebx
   1b211:	cmp    %r10d,%edx
   1b214:	jg     1b3f8 <decompress_smooth_data+0x478>
   1b21a:	mov    -0x158(%rbp),%r9
   1b221:	mov    -0x178(%rbp),%r12
   1b228:	mov    -0x168(%rbp),%rax
   1b22f:	add    $0x1,%r9d
   1b233:	add    $0x60,%r15
   1b237:	mov    %r15,-0x180(%rbp)
   1b23e:	movslq 0x38(%r14),%rcx
   1b242:	cmp    %r9d,%ecx
   1b245:	jg     1b428 <decompress_smooth_data+0x4a8>
   1b24b:	mov    0xb8(%r14),%eax
   1b252:	add    $0x1,%eax
   1b255:	mov    %eax,0xb8(%r14)
   1b25c:	mov    0x1a4(%r14),%ecx
   1b263:	cmp    %eax,%ecx
   1b265:	jbe    1b45f <decompress_smooth_data+0x4df>
   1b26b:	mov    $0x3,%eax
   1b270:	mov    -0x10(%rbp),%r12
   1b274:	mov    -0x8(%rbp),%rbx
   1b278:	mov    -0x28(%rbp),%r15
   1b27c:	mov    -0x20(%rbp),%r14
   1b280:	mov    -0x18(%rbp),%r13
   1b284:	leaveq 
   1b285:	retq   
   1b286:	mov    -0xd8(%rbp),%r9
   1b28d:	movswq 0x2(%r9),%rax
   1b292:	test   %ax,%ax
   1b295:	je     1b47a <decompress_smooth_data+0x4fa>
   1b29b:	mov    -0x150(%rbp),%rdi
   1b2a2:	mov    -0xe0(%rbp),%r8
   1b2a9:	jmpq   1b0dd <decompress_smooth_data+0x15d>
   1b2ae:	movswq 0x10(%r9),%rax
   1b2b3:	test   %ax,%ax
   1b2b6:	je     1b4cf <decompress_smooth_data+0x54f>
   1b2bc:	mov    -0xa0(%rbp),%r14
   1b2c3:	mov    -0xb8(%rbp),%r15
   1b2ca:	jmpq   1b0f7 <decompress_smooth_data+0x177>
   1b2cf:	movswq 0x20(%r9),%rax
   1b2d4:	test   %ax,%ax
   1b2d7:	je     1b52d <decompress_smooth_data+0x5ad>
   1b2dd:	mov    -0xf8(%rbp),%r14
   1b2e4:	jmpq   1b10a <decompress_smooth_data+0x18a>
   1b2e9:	movswq 0x12(%r9),%rax
   1b2ee:	test   %ax,%ax
   1b2f1:	jne    1b116 <decompress_smooth_data+0x196>
   1b2f7:	mov    -0x88(%rbp),%rax
   1b2fe:	lea    0x0(%r13,%rax,1),%edx
   1b303:	mov    -0x80(%rbp),%rax
   1b307:	sub    %edx,%eax
   1b309:	add    %r11d,%eax
   1b30c:	movslq %eax,%rax
   1b30f:	imul   %rdi,%rax
   1b313:	lea    (%rax,%rax,4),%rdx
   1b317:	test   %rdx,%rdx
   1b31a:	jns    1b57c <decompress_smooth_data+0x5fc>
   1b320:	mov    -0x78(%rbp),%rax
   1b324:	sub    %rdx,%rax
   1b327:	cqto   
   1b329:	mov    -0x70(%rbp),%r11
   1b32d:	idiv   %r11
   1b330:	test   %ecx,%ecx
   1b332:	jg     1b5ab <decompress_smooth_data+0x62b>
   1b338:	neg    %eax
   1b33a:	mov    %ax,0x12(%r9)
   1b33f:	jmpq   1b116 <decompress_smooth_data+0x196>
   1b344:	movswq 0x4(%r9),%rax
   1b349:	test   %ax,%ax
   1b34c:	jne    1b122 <decompress_smooth_data+0x1a2>
   1b352:	lea    (%rsi,%r8,1),%eax
   1b356:	lea    (%r14,%r14,1),%edx
   1b35a:	sub    %edx,%eax
   1b35c:	movslq %eax,%rax
   1b35f:	imul   %rax,%rdi
   1b363:	lea    (%rdi,%rdi,8),%rdx
   1b367:	test   %rdx,%rdx
   1b36a:	jns    1b5c2 <decompress_smooth_data+0x642>
   1b370:	mov    -0x68(%rbp),%rax
   1b374:	sub    %rdx,%rax
   1b377:	cqto   
   1b379:	mov    -0x60(%rbp),%rsi
   1b37d:	idiv   %rsi
   1b380:	test   %ecx,%ecx
   1b382:	jg     1b5f1 <decompress_smooth_data+0x671>
   1b388:	neg    %eax
   1b38a:	mov    %ax,0x4(%r9)
   1b38f:	jmpq   1b122 <decompress_smooth_data+0x1a2>
   1b394:	mov    %r13,%rdi
   1b397:	mov    $0x1,%edx
   1b39c:	mov    %rcx,-0xf8(%rbp)
   1b3a3:	mov    %r8,-0xe0(%rbp)
   1b3aa:	mov    %rax,%r14
   1b3ad:	callq  4470 <jcopy_block_row@plt>
   1b3b2:	add    $0x80,%r12
   1b3b9:	lea    0x80(%r13),%rcx
   1b3c0:	mov    %rcx,-0xe8(%rbp)
   1b3c7:	lea    0x80(%r14),%rax
   1b3ce:	mov    %rax,-0xb0(%rbp)
   1b3d5:	cmp    %r15d,%ebx
   1b3d8:	jb     1b096 <decompress_smooth_data+0x116>
   1b3de:	mov    -0xf8(%rbp),%rsi
   1b3e5:	mov    -0xa0(%rbp),%r13
   1b3ec:	mov    -0xb8(%rbp),%r11
   1b3f3:	jmpq   1b0a3 <decompress_smooth_data+0x123>
   1b3f8:	mov    0x220(%r14),%rdx
   1b3ff:	mov    0x1c(%rdx,%r9,4),%r13d
   1b404:	shl    $0x7,%r13
   1b408:	movslq %r10d,%rdx
   1b40b:	add    (%rax,%rdx,8),%r13
   1b40f:	test   %edi,%edi
   1b411:	jle    1b608 <decompress_smooth_data+0x688>
   1b417:	test   %r10d,%r10d
   1b41a:	jne    1b608 <decompress_smooth_data+0x688>
   1b420:	mov    %r13,%r12
   1b423:	jmpq   1b613 <decompress_smooth_data+0x693>
   1b428:	movslq 0x30(%r15),%rcx
   1b42c:	test   %ecx,%ecx
   1b42e:	je     1b22f <decompress_smooth_data+0x2af>
   1b434:	mov    0xb8(%r14),%ecx
   1b43b:	cmp    %eax,%ecx
   1b43d:	jb     1b637 <decompress_smooth_data+0x6b7>
   1b443:	mov    0x20(%r15),%eax
   1b447:	mov    0xc(%r15),%ecx
   1b44b:	xor    %edx,%edx
   1b44d:	div    %ecx
   1b44f:	test   %edx,%edx
   1b451:	je     1b69d <decompress_smooth_data+0x71d>
   1b457:	mov    %rdx,%rcx
   1b45a:	jmpq   1b641 <decompress_smooth_data+0x6c1>
   1b45f:	mov    $0x4,%eax
   1b464:	mov    -0x10(%rbp),%r12
   1b468:	mov    -0x8(%rbp),%rbx
   1b46c:	mov    -0x28(%rbp),%r15
   1b470:	mov    -0x20(%rbp),%r14
   1b474:	mov    -0x18(%rbp),%r13
   1b478:	leaveq 
   1b479:	retq   
   1b47a:	mov    -0xe0(%rbp),%r8
   1b481:	mov    %r8,%rax
   1b484:	sub    %esi,%eax
   1b486:	movslq %eax,%rax
   1b489:	mov    -0x150(%rbp),%rdi
   1b490:	imul   %rdi,%rax
   1b494:	lea    (%rax,%rax,8),%rdx
   1b498:	shl    $0x2,%rdx
   1b49c:	test   %rdx,%rdx
   1b49f:	jns    1b6a6 <decompress_smooth_data+0x726>
   1b4a5:	mov    -0xd0(%rbp),%rax
   1b4ac:	sub    %rdx,%rax
   1b4af:	cqto   
   1b4b1:	mov    -0xc8(%rbp),%r14
   1b4b8:	idiv   %r14
   1b4bb:	test   %ecx,%ecx
   1b4bd:	jg     1b6db <decompress_smooth_data+0x75b>
   1b4c3:	neg    %eax
   1b4c5:	mov    %ax,0x2(%r9)
   1b4ca:	jmpq   1b0dd <decompress_smooth_data+0x15d>
   1b4cf:	mov    -0xa0(%rbp),%r14
   1b4d6:	mov    -0xb8(%rbp),%r15
   1b4dd:	mov    %r14,%rax
   1b4e0:	sub    %r15d,%eax
   1b4e3:	movslq %eax,%rax
   1b4e6:	imul   %rdi,%rax
   1b4ea:	lea    (%rax,%rax,8),%rdx
   1b4ee:	shl    $0x2,%rdx
   1b4f2:	test   %rdx,%rdx
   1b4f5:	jns    1b6f2 <decompress_smooth_data+0x772>
   1b4fb:	mov    -0x50(%rbp),%rax
   1b4ff:	sub    %rdx,%rax
   1b502:	mov    %r12,-0xe0(%rbp)
   1b509:	cqto   
   1b50b:	mov    -0x48(%rbp),%r12
   1b50f:	idiv   %r12
   1b512:	test   %ecx,%ecx
   1b514:	jg     1b728 <decompress_smooth_data+0x7a8>
   1b51a:	neg    %eax
   1b51c:	mov    %ax,0x10(%r9)
   1b521:	mov    -0xe0(%rbp),%r12
   1b528:	jmpq   1b0f7 <decompress_smooth_data+0x177>
   1b52d:	lea    (%r15,%r14,1),%eax
   1b531:	mov    -0xf8(%rbp),%r14
   1b538:	lea    (%r14,%r14,1),%edx
   1b53c:	sub    %edx,%eax
   1b53e:	movslq %eax,%rax
   1b541:	imul   %rdi,%rax
   1b545:	lea    (%rax,%rax,8),%rdx
   1b549:	test   %rdx,%rdx
   1b54c:	jns    1b73f <decompress_smooth_data+0x7bf>
   1b552:	mov    -0x98(%rbp),%rax
   1b559:	sub    %rdx,%rax
   1b55c:	cqto   
   1b55e:	mov    -0x90(%rbp),%r15
   1b565:	idiv   %r15
   1b568:	test   %ecx,%ecx
   1b56a:	jg     1b774 <decompress_smooth_data+0x7f4>
   1b570:	neg    %eax
   1b572:	mov    %ax,0x20(%r9)
   1b577:	jmpq   1b10a <decompress_smooth_data+0x18a>
   1b57c:	mov    -0x78(%rbp),%rax
   1b580:	add    %rdx,%rax
   1b583:	cqto   
   1b585:	mov    -0x70(%rbp),%r11
   1b589:	idiv   %r11
   1b58c:	test   %ecx,%ecx
   1b58e:	jle    1b33a <decompress_smooth_data+0x3ba>
   1b594:	mov    $0x1,%edx
   1b599:	shl    %cl,%edx
   1b59b:	cmp    %eax,%edx
   1b59d:	jg     1b33a <decompress_smooth_data+0x3ba>
   1b5a3:	lea    -0x1(%rdx),%eax
   1b5a6:	jmpq   1b33a <decompress_smooth_data+0x3ba>
   1b5ab:	mov    $0x1,%edx
   1b5b0:	shl    %cl,%edx
   1b5b2:	cmp    %eax,%edx
   1b5b4:	jg     1b338 <decompress_smooth_data+0x3b8>
   1b5ba:	lea    -0x1(%rdx),%eax
   1b5bd:	jmpq   1b338 <decompress_smooth_data+0x3b8>
   1b5c2:	mov    -0x68(%rbp),%rax
   1b5c6:	add    %rdx,%rax
   1b5c9:	cqto   
   1b5cb:	mov    -0x60(%rbp),%rsi
   1b5cf:	idiv   %rsi
   1b5d2:	test   %ecx,%ecx
   1b5d4:	jle    1b38a <decompress_smooth_data+0x40a>
   1b5da:	mov    $0x1,%edx
   1b5df:	shl    %cl,%edx
   1b5e1:	cmp    %eax,%edx
   1b5e3:	jg     1b38a <decompress_smooth_data+0x40a>
   1b5e9:	lea    -0x1(%rdx),%eax
   1b5ec:	jmpq   1b38a <decompress_smooth_data+0x40a>
   1b5f1:	mov    $0x1,%edx
   1b5f6:	shl    %cl,%edx
   1b5f8:	cmp    %eax,%edx
   1b5fa:	jg     1b388 <decompress_smooth_data+0x408>
   1b600:	lea    -0x1(%rdx),%eax
   1b603:	jmpq   1b388 <decompress_smooth_data+0x408>
   1b608:	lea    -0x1(%r10),%edx
   1b60c:	movslq %edx,%rdx
   1b60f:	mov    (%rax,%rdx,8),%r12
   1b613:	test   %ecx,%ecx
   1b615:	lea    0x1(%r10),%ecx
   1b619:	mov    %rcx,-0x140(%rbp)
   1b620:	jle    1b78b <decompress_smooth_data+0x80b>
   1b626:	cmp    %r8d,%r10d
   1b629:	jne    1b78b <decompress_smooth_data+0x80b>
   1b62f:	mov    %r13,%rax
   1b632:	jmpq   1b792 <decompress_smooth_data+0x812>
   1b637:	movslq 0xc(%r15),%rdx
   1b63b:	lea    (%rdx,%rdx,1),%ecx
   1b63e:	mov    %r13,%rbx
   1b641:	mov    %rdx,-0x138(%rbp)
   1b648:	mov    %rbx,-0x118(%rbp)
   1b64f:	movslq %r9d,%rbx
   1b652:	mov    %rbx,-0x108(%rbp)
   1b659:	mov    0xb8(%r14),%eax
   1b660:	test   %eax,%eax
   1b662:	jne    1b7d7 <decompress_smooth_data+0x857>
   1b668:	mov    0x90(%r12,%rbx,8),%rsi
   1b670:	mov    0x8(%r14),%rax
   1b674:	mov    0x40(%rax),%rax
   1b678:	mov    %r13,%rdx
   1b67b:	mov    %rbx,%r13
   1b67e:	mov    %r9,%rbx
   1b681:	mov    %rdx,%r8
   1b684:	mov    %r14,%rdi
   1b687:	callq  *%rax
   1b689:	mov    %r13,%r9
   1b68c:	pushq  -0x120(%rbp)
   1b692:	popq   -0x130(%rbp)
   1b698:	jmpq   1b81b <decompress_smooth_data+0x89b>
   1b69d:	movslq 0xc(%r15),%rdx
   1b6a1:	mov    %rdx,%rcx
   1b6a4:	jmp    1b641 <decompress_smooth_data+0x6c1>
   1b6a6:	mov    -0xd0(%rbp),%rax
   1b6ad:	add    %rdx,%rax
   1b6b0:	cqto   
   1b6b2:	mov    -0xc8(%rbp),%r14
   1b6b9:	idiv   %r14
   1b6bc:	test   %ecx,%ecx
   1b6be:	jle    1b4c5 <decompress_smooth_data+0x545>
   1b6c4:	mov    $0x1,%edx
   1b6c9:	shl    %cl,%edx
   1b6cb:	cmp    %eax,%edx
   1b6cd:	jg     1b4c5 <decompress_smooth_data+0x545>
   1b6d3:	lea    -0x1(%rdx),%eax
   1b6d6:	jmpq   1b4c5 <decompress_smooth_data+0x545>
   1b6db:	mov    $0x1,%edx
   1b6e0:	shl    %cl,%edx
   1b6e2:	cmp    %eax,%edx
   1b6e4:	jg     1b4c3 <decompress_smooth_data+0x543>
   1b6ea:	lea    -0x1(%rdx),%eax
   1b6ed:	jmpq   1b4c3 <decompress_smooth_data+0x543>
   1b6f2:	mov    -0x50(%rbp),%rax
   1b6f6:	add    %rdx,%rax
   1b6f9:	mov    %r12,-0xe0(%rbp)
   1b700:	cqto   
   1b702:	mov    -0x48(%rbp),%r12
   1b706:	idiv   %r12
   1b709:	test   %ecx,%ecx
   1b70b:	jle    1b51c <decompress_smooth_data+0x59c>
   1b711:	mov    $0x1,%edx
   1b716:	shl    %cl,%edx
   1b718:	cmp    %eax,%edx
   1b71a:	jg     1b51c <decompress_smooth_data+0x59c>
   1b720:	lea    -0x1(%rdx),%eax
   1b723:	jmpq   1b51c <decompress_smooth_data+0x59c>
   1b728:	mov    $0x1,%edx
   1b72d:	shl    %cl,%edx
   1b72f:	cmp    %eax,%edx
   1b731:	jg     1b51a <decompress_smooth_data+0x59a>
   1b737:	lea    -0x1(%rdx),%eax
   1b73a:	jmpq   1b51a <decompress_smooth_data+0x59a>
   1b73f:	mov    -0x98(%rbp),%rax
   1b746:	add    %rdx,%rax
   1b749:	cqto   
   1b74b:	mov    -0x90(%rbp),%r15
   1b752:	idiv   %r15
   1b755:	test   %ecx,%ecx
   1b757:	jle    1b572 <decompress_smooth_data+0x5f2>
   1b75d:	mov    $0x1,%edx
   1b762:	shl    %cl,%edx
   1b764:	cmp    %eax,%edx
   1b766:	jg     1b572 <decompress_smooth_data+0x5f2>
   1b76c:	lea    -0x1(%rdx),%eax
   1b76f:	jmpq   1b572 <decompress_smooth_data+0x5f2>
   1b774:	mov    $0x1,%edx
   1b779:	shl    %cl,%edx
   1b77b:	cmp    %eax,%edx
   1b77d:	jg     1b570 <decompress_smooth_data+0x5f0>
   1b783:	lea    -0x1(%rdx),%eax
   1b786:	jmpq   1b570 <decompress_smooth_data+0x5f0>
   1b78b:	movslq %ecx,%rcx
   1b78e:	mov    (%rax,%rcx,8),%rax
   1b792:	movswq (%r12),%rdx
   1b797:	mov    %rdx,-0x80(%rbp)
   1b79b:	movswq 0x0(%r13),%rcx
   1b7a0:	movswq (%rax),%rdi
   1b7a4:	mov    %rdi,-0x88(%rbp)
   1b7ab:	mov    0x220(%r14),%rbx
   1b7b2:	mov    0x1c(%rbx,%r9,4),%ebx
   1b7b7:	mov    0x1c(%r15),%r15d
   1b7bb:	add    $0xffffffff,%r15d
   1b7bf:	mov    %r15,-0xf0(%rbp)
   1b7c6:	mov    %rcx,%r8
   1b7c9:	pushq  -0x128(%rbp)
   1b7cf:	popq   -0x40(%rbp)
   1b7d2:	jmpq   1b1a6 <decompress_smooth_data+0x226>
   1b7d7:	mov    0x90(%r12,%rbx,8),%rsi
   1b7df:	movslq 0xc(%r15),%rdi
   1b7e3:	add    $0xffffffff,%eax
   1b7e6:	mov    %rdi,%rdx
   1b7e9:	imul   %eax,%edx
   1b7ec:	add    %edi,%ecx
   1b7ee:	mov    0x8(%r14),%rax
   1b7f2:	mov    0x40(%rax),%rax
   1b7f6:	mov    %r13,%r8
   1b7f9:	mov    %rbx,%r13
   1b7fc:	mov    %r9,%rbx
   1b7ff:	mov    %r14,%rdi
   1b802:	callq  *%rax
   1b804:	movslq 0xc(%r15),%rcx
   1b808:	lea    (%rax,%rcx,8),%rax
   1b80c:	mov    %r13,%r9
   1b80f:	pushq  -0x128(%rbp)
   1b815:	popq   -0x130(%rbp)
   1b81b:	mov    %rax,-0x100(%rbp)
   1b822:	lea    (%rbx,%rbx,2),%ecx
   1b825:	add    %ecx,%ecx
   1b827:	movslq %ecx,%rcx
   1b82a:	shl    $0x2,%rcx
   1b82e:	add    0xe0(%r12),%rcx
   1b836:	mov    %rcx,-0xc0(%rbp)
   1b83d:	mov    0x258(%r14),%rcx
   1b844:	mov    0x8(%rcx,%r9,8),%rcx
   1b849:	mov    %rcx,-0x30(%rbp)
   1b84d:	mov    0x50(%r15),%rsi
   1b851:	movzwl (%rsi),%ecx
   1b854:	mov    %rcx,-0x150(%rbp)
   1b85b:	mov    -0x160(%rbp),%rcx
   1b862:	mov    (%rcx,%r9,8),%rcx
   1b866:	mov    %rcx,-0x38(%rbp)
   1b86a:	movzwl 0x2(%rsi),%ecx
   1b86e:	mov    %rcx,%rdx
   1b871:	shl    $0x7,%rdx
   1b875:	mov    %rdx,-0xd0(%rbp)
   1b87c:	shl    $0x8,%rcx
   1b880:	mov    %rcx,-0xc8(%rbp)
   1b887:	movzwl 0x4(%rsi),%ecx
   1b88b:	mov    %rcx,%rdx
   1b88e:	shl    $0x7,%rdx
   1b892:	mov    %rdx,-0x68(%rbp)
   1b896:	shl    $0x8,%rcx
   1b89a:	mov    %rbx,-0x158(%rbp)
   1b8a1:	mov    %rcx,-0x60(%rbp)
   1b8a5:	movzwl 0x10(%rsi),%ecx
   1b8a9:	mov    %rcx,%rdx
   1b8ac:	shl    $0x7,%rdx
   1b8b0:	mov    %rdx,-0x50(%rbp)
   1b8b4:	shl    $0x8,%rcx
   1b8b8:	mov    %rcx,-0x48(%rbp)
   1b8bc:	movzwl 0x20(%rsi),%ecx
   1b8c0:	mov    %rcx,%rdx
   1b8c3:	shl    $0x7,%rdx
   1b8c7:	mov    %rdx,-0x98(%rbp)
   1b8ce:	shl    $0x8,%rcx
   1b8d2:	mov    %rcx,-0x90(%rbp)
   1b8d9:	movzwl 0x12(%rsi),%ecx
   1b8dd:	mov    %rcx,%rdx
   1b8e0:	shl    $0x7,%rdx
   1b8e4:	mov    %rdx,-0x78(%rbp)
   1b8e8:	shl    $0x8,%rcx
   1b8ec:	mov    %rcx,-0x70(%rbp)
   1b8f0:	mov    -0x138(%rbp),%rdx
   1b8f7:	lea    -0x1(%rdx),%r8d
   1b8fb:	mov    %r8,-0x110(%rbp)
   1b902:	mov    -0x130(%rbp),%rdi
   1b909:	mov    -0x118(%rbp),%rcx
   1b910:	xor    %r13d,%r13d
   1b913:	mov    $0x1,%ebx
   1b918:	mov    -0xd8(%rbp),%rsi
   1b91f:	mov    %r13,%r10
   1b922:	jmpq   1b211 <decompress_smooth_data+0x291>
   1b927:	nopw   0x0(%rax,%rax,1)

000000000001b930 <start_input_pass>:
   1b930:	push   %rbp
   1b931:	mov    %rsp,%rbp
   1b934:	movl   $0x0,0xb0(%rdi)
   1b93e:	callq  1a810 <start_iMCU_row>
   1b943:	leaveq 
   1b944:	retq   
   1b945:	data16 nopw %cs:0x0(%rax,%rax,1)

000000000001b950 <start_output_pass>:
   1b950:	push   %rbp
   1b951:	mov    %rsp,%rbp
   1b954:	sub    $0x10,%rsp
   1b958:	mov    0x230(%rdi),%rax
   1b95f:	mov    0x20(%rax),%rcx
   1b963:	test   %rcx,%rcx
   1b966:	jne    1b974 <start_output_pass+0x24>
   1b968:	movl   $0x0,0xb8(%rdi)
   1b972:	leaveq 
   1b973:	retq   
   1b974:	movslq 0x68(%rdi),%rcx
   1b978:	test   %ecx,%ecx
   1b97a:	jne    1b989 <start_output_pass+0x39>
   1b97c:	lea    -0xe23(%rip),%rcx        # 1ab60 <decompress_data>
   1b983:	mov    %rcx,0x18(%rax)
   1b987:	jmp    1b968 <start_output_pass+0x18>
   1b989:	mov    %rdi,%rcx
   1b98c:	mov    %r14,-0x8(%rbp)
   1b990:	mov    %r15,-0x10(%rbp)
   1b994:	mov    %rax,%r14
   1b997:	mov    %rdi,%r15
   1b99a:	mov    %rcx,%rdi
   1b99d:	callq  1adb0 <smoothing_ok>
   1b9a2:	test   %eax,%eax
   1b9a4:	jne    1b9b6 <start_output_pass+0x66>
   1b9a6:	mov    %r14,%rax
   1b9a9:	mov    %r15,%rdi
   1b9ac:	mov    -0x10(%rbp),%r15
   1b9b0:	mov    -0x8(%rbp),%r14
   1b9b4:	jmp    1b97c <start_output_pass+0x2c>
   1b9b6:	lea    -0xa3d(%rip),%rax        # 1af80 <decompress_smooth_data>
   1b9bd:	mov    %rax,0x18(%r14)
   1b9c1:	mov    %r15,%rdi
   1b9c4:	mov    -0x10(%rbp),%r15
   1b9c8:	mov    -0x8(%rbp),%r14
   1b9cc:	jmp    1b968 <start_output_pass+0x18>
   1b9ce:	xchg   %ax,%ax

000000000001b9d0 <dummy_consume_data>:
   1b9d0:	push   %rbp
   1b9d1:	mov    %rsp,%rbp
   1b9d4:	xor    %eax,%eax
   1b9d6:	leaveq 
   1b9d7:	retq   
   1b9d8:	nopl   0x0(%rax,%rax,1)

000000000001b9e0 <consume_data>:
   1b9e0:	push   %rbp
   1b9e1:	mov    %rsp,%rbp
   1b9e4:	sub    $0x50,%rsp
   1b9e8:	mov    %rbx,-0x8(%rbp)
   1b9ec:	mov    %r12,-0x10(%rbp)
   1b9f0:	mov    %r13,-0x18(%rbp)
   1b9f4:	mov    %r14,-0x20(%rbp)
   1b9f8:	mov    %r15,-0x28(%rbp)
   1b9fc:	mov    0x230(%rdi),%rbx
   1ba03:	mov    %rbx,-0x30(%rbp)
   1ba07:	mov    %rdi,%r12
   1ba0a:	xor    %r13d,%r13d
   1ba0d:	mov    $0x1,%r14d
   1ba13:	jmp    1ba55 <consume_data+0x75>
   1ba15:	movslq %r13d,%r15
   1ba18:	mov    0x1b8(%r12,%r15,8),%rcx
   1ba20:	movslq 0x4(%rcx),%rax
   1ba24:	mov    0x90(%rbx,%rax,8),%rsi
   1ba2c:	mov    0xc(%rcx),%ecx
   1ba2f:	mov    %rcx,%rdx
   1ba32:	imul   0xb0(%r12),%edx
   1ba3b:	mov    0x8(%r12),%rax
   1ba40:	mov    0x40(%rax),%rax
   1ba44:	mov    %r12,%rdi
   1ba47:	mov    %r14,%r8
   1ba4a:	callq  *%rax
   1ba4c:	mov    %rax,-0x50(%rbp,%r15,8)
   1ba51:	add    $0x1,%r13d
   1ba55:	movslq 0x1b0(%r12),%rax
   1ba5d:	cmp    %r13d,%eax
   1ba60:	jg     1ba15 <consume_data+0x35>
   1ba62:	movslq 0x2c(%rbx),%r14
   1ba66:	lea    0x38(%rbx),%r15
   1ba6a:	xor    %r13d,%r13d
   1ba6d:	jmpq   1baf3 <consume_data+0x113>
   1ba72:	movslq %ecx,%rdi
   1ba75:	mov    %rdx,(%r15,%rdi,8)
   1ba79:	add    $0x80,%rdx
   1ba80:	add    $0x1,%ecx
   1ba83:	add    $0x1,%esi
   1ba86:	movslq 0x34(%r10),%rdi
   1ba8a:	cmp    %esi,%edi
   1ba8c:	jg     1ba72 <consume_data+0x92>
   1ba8e:	add    $0x1,%ebx
   1ba91:	movslq 0x38(%r10),%rdx
   1ba95:	cmp    %ebx,%edx
   1ba97:	jg     1bb4f <consume_data+0x16f>
   1ba9d:	add    $0x1,%r8d
   1baa1:	movslq 0x1b0(%r12),%rdx
   1baa9:	cmp    %r8d,%edx
   1baac:	jg     1bb6a <consume_data+0x18a>
   1bab2:	mov    0x250(%r12),%rcx
   1baba:	mov    0x8(%rcx),%rcx
   1babe:	mov    %rax,%rbx
   1bac1:	mov    %r12,%rdi
   1bac4:	mov    %r15,%rsi
   1bac7:	callq  *%rcx
   1bac9:	test   %eax,%eax
   1bacb:	je     1bb8c <consume_data+0x1ac>
   1bad1:	lea    0x1(%rbx),%eax
   1bad4:	mov    0x1d8(%r12),%ecx
   1badc:	cmp    %eax,%ecx
   1bade:	ja     1bbb0 <consume_data+0x1d0>
   1bae4:	mov    -0x30(%rbp),%rbx
   1bae8:	movl   $0x0,0x28(%rbx)
   1baef:	add    $0x1,%r14d
   1baf3:	movslq 0x30(%rbx),%rax
   1baf7:	cmp    %r14d,%eax
   1bafa:	jg     1bbbb <consume_data+0x1db>
   1bb00:	mov    0xb0(%r12),%eax
   1bb08:	add    $0x1,%eax
   1bb0b:	mov    %eax,0xb0(%r12)
   1bb13:	mov    0x1a4(%r12),%ecx
   1bb1b:	cmp    %eax,%ecx
   1bb1d:	ja     1bbc3 <consume_data+0x1e3>
   1bb23:	mov    0x240(%r12),%rax
   1bb2b:	mov    0x18(%rax),%rax
   1bb2f:	mov    %r12,%rdi
   1bb32:	callq  *%rax
   1bb34:	mov    $0x4,%eax
   1bb39:	mov    -0x28(%rbp),%r15
   1bb3d:	mov    -0x20(%rbp),%r14
   1bb41:	mov    -0x18(%rbp),%r13
   1bb45:	mov    -0x10(%rbp),%r12
   1bb49:	mov    -0x8(%rbp),%rbx
   1bb4d:	leaveq 
   1bb4e:	retq   
   1bb4f:	lea    (%r14,%rbx,1),%edx
   1bb53:	movslq %edx,%rdx
   1bb56:	mov    -0x50(%rbp,%r11,8),%rsi
   1bb5b:	mov    (%rsi,%rdx,8),%rdx
   1bb5f:	add    %r9,%rdx
   1bb62:	mov    %r13,%rsi
   1bb65:	jmpq   1ba86 <consume_data+0xa6>
   1bb6a:	movslq %r8d,%r11
   1bb6d:	mov    0x1b8(%r12,%r11,8),%r10
   1bb75:	mov    %rax,%rdx
   1bb78:	imul   0x34(%r10),%edx
   1bb7d:	mov    %edx,%r9d
   1bb80:	shl    $0x7,%r9
   1bb84:	mov    %r13,%rbx
   1bb87:	jmpq   1ba91 <consume_data+0xb1>
   1bb8c:	mov    -0x30(%rbp),%rax
   1bb90:	mov    %r14d,0x2c(%rax)
   1bb94:	mov    %ebx,0x28(%rax)
   1bb97:	mov    %r13,%rax
   1bb9a:	mov    -0x28(%rbp),%r15
   1bb9e:	mov    -0x20(%rbp),%r14
   1bba2:	mov    -0x18(%rbp),%r13
   1bba6:	mov    -0x10(%rbp),%r12
   1bbaa:	mov    -0x8(%rbp),%rbx
   1bbae:	leaveq 
   1bbaf:	retq   
   1bbb0:	mov    %r13,%rcx
   1bbb3:	mov    %rcx,%r8
   1bbb6:	jmpq   1baa1 <consume_data+0xc1>
   1bbbb:	mov    0x28(%rbx),%eax
   1bbbe:	jmpq   1bad4 <consume_data+0xf4>
   1bbc3:	mov    %r12,%rdi
   1bbc6:	callq  1a810 <start_iMCU_row>
   1bbcb:	mov    $0x3,%eax
   1bbd0:	mov    -0x28(%rbp),%r15
   1bbd4:	mov    -0x20(%rbp),%r14
   1bbd8:	mov    -0x18(%rbp),%r13
   1bbdc:	mov    -0x10(%rbp),%r12
   1bbe0:	mov    -0x8(%rbp),%rbx
   1bbe4:	leaveq 
   1bbe5:	retq   
   1bbe6:	nopw   %cs:0x0(%rax,%rax,1)

000000000001bbf0 <jinit_color_deconverter>:
   1bbf0:	push   %rbp
   1bbf1:	mov    %rsp,%rbp
   1bbf4:	sub    $0x20,%rsp
   1bbf8:	mov    %r15,-0x20(%rbp)
   1bbfc:	mov    0x8(%rdi),%rax
   1bc00:	mov    (%rax),%rax
   1bc03:	mov    $0x1,%esi
   1bc08:	mov    $0x38,%edx
   1bc0d:	mov    %rdi,%r15
   1bc10:	callq  *%rax
   1bc12:	mov    %rax,0x268(%r15)
   1bc19:	lea    0x3840(%rip),%rcx        # 1f460 <start_pass_dcolor>
   1bc20:	mov    %rcx,(%rax)
   1bc23:	mov    0x3c(%r15),%ecx
   1bc27:	add    $0xffffffff,%ecx
   1bc2a:	cmp    $0x4,%ecx
   1bc2d:	ja     1bc3f <jinit_color_deconverter+0x4f>
   1bc2f:	lea    0x3daea(%rip),%rdx        # 59720 <mybuffer.5+0x8>
   1bc36:	movslq (%rdx,%rcx,4),%rcx
   1bc3a:	add    %rdx,%rcx
   1bc3d:	jmpq   *%rcx
   1bc3f:	movslq 0x38(%r15),%rcx
   1bc43:	test   %ecx,%ecx
   1bc45:	jg     1bc6a <jinit_color_deconverter+0x7a>
   1bc47:	mov    (%r15),%rcx
   1bc4a:	movl   $0xa,0x28(%rcx)
   1bc51:	mov    (%r15),%rcx
   1bc54:	mov    (%rcx),%rcx
   1bc57:	mov    %r15,%rdi
   1bc5a:	mov    %r14,-0x18(%rbp)
   1bc5e:	mov    %rax,%r14
   1bc61:	callq  *%rcx
   1bc63:	mov    %r14,%rax
   1bc66:	mov    -0x18(%rbp),%r14
   1bc6a:	lea    0x158f(%rip),%rsi        # 1d200 <null_convert>
   1bc71:	mov    0x40(%r15),%edi
   1bc75:	lea    -0x1(%rdi),%ecx
   1bc78:	cmp    $0xf,%ecx
   1bc7b:	ja     1bd67 <jinit_color_deconverter+0x177>
   1bc81:	lea    0x3daac(%rip),%rdx        # 59734 <mybuffer.5+0x1c>
   1bc88:	movslq (%rdx,%rcx,4),%rcx
   1bc8c:	add    %rdx,%rcx
   1bc8f:	jmpq   *%rcx
   1bc91:	movl   $0x4,0x90(%r15)
   1bc9c:	mov    0x3c(%r15),%ecx
   1bca0:	cmp    $0x5,%ecx
   1bca3:	je     1be64 <jinit_color_deconverter+0x274>
   1bca9:	cmp    $0x4,%ecx
   1bcac:	je     1be79 <jinit_color_deconverter+0x289>
   1bcb2:	mov    (%r15),%rax
   1bcb5:	movl   $0x1b,0x28(%rax)
   1bcbc:	mov    (%r15),%rax
   1bcbf:	mov    (%rax),%rax
   1bcc2:	mov    %r15,%rdi
   1bcc5:	callq  *%rax
   1bcc7:	jmpq   1be8e <jinit_color_deconverter+0x29e>
   1bccc:	movslq 0x38(%r15),%rcx
   1bcd0:	cmp    $0x1,%ecx
   1bcd3:	je     1bc6a <jinit_color_deconverter+0x7a>
   1bcd5:	mov    (%r15),%rcx
   1bcd8:	movl   $0xa,0x28(%rcx)
   1bcdf:	mov    (%r15),%rcx
   1bce2:	mov    (%rcx),%rcx
   1bce5:	mov    %r15,%rdi
   1bce8:	mov    %r14,-0x10(%rbp)
   1bcec:	mov    %rax,%r14
   1bcef:	callq  *%rcx
   1bcf1:	mov    %r14,%rax
   1bcf4:	mov    -0x10(%rbp),%r14
   1bcf8:	jmpq   1bc6a <jinit_color_deconverter+0x7a>
   1bcfd:	movslq 0x38(%r15),%rcx
   1bd01:	cmp    $0x3,%ecx
   1bd04:	je     1bc6a <jinit_color_deconverter+0x7a>
   1bd0a:	mov    (%r15),%rcx
   1bd0d:	movl   $0xa,0x28(%rcx)
   1bd14:	mov    (%r15),%rcx
   1bd17:	mov    (%rcx),%rcx
   1bd1a:	mov    %r15,%rdi
   1bd1d:	mov    %r14,-0x10(%rbp)
   1bd21:	mov    %rax,%r14
   1bd24:	callq  *%rcx
   1bd26:	mov    %r14,%rax
   1bd29:	mov    -0x10(%rbp),%r14
   1bd2d:	jmpq   1bc6a <jinit_color_deconverter+0x7a>
   1bd32:	movslq 0x38(%r15),%rcx
   1bd36:	cmp    $0x4,%ecx
   1bd39:	je     1bc6a <jinit_color_deconverter+0x7a>
   1bd3f:	mov    (%r15),%rcx
   1bd42:	movl   $0xa,0x28(%rcx)
   1bd49:	mov    (%r15),%rcx
   1bd4c:	mov    (%rcx),%rcx
   1bd4f:	mov    %r15,%rdi
   1bd52:	mov    %r14,-0x18(%rbp)
   1bd56:	mov    %rax,%r14
   1bd59:	callq  *%rcx
   1bd5b:	mov    %r14,%rax
   1bd5e:	mov    -0x18(%rbp),%r14
   1bd62:	jmpq   1bc6a <jinit_color_deconverter+0x7a>
   1bd67:	cmp    0x3c(%r15),%edi
   1bd6b:	je     1be7f <jinit_color_deconverter+0x28f>
   1bd71:	mov    (%r15),%rax
   1bd74:	movl   $0x1b,0x28(%rax)
   1bd7b:	mov    (%r15),%rax
   1bd7e:	mov    (%rax),%rax
   1bd81:	mov    %r15,%rdi
   1bd84:	callq  *%rax
   1bd86:	jmpq   1be8e <jinit_color_deconverter+0x29e>
   1bd8b:	movl   $0x1,0x90(%r15)
   1bd96:	mov    0x3c(%r15),%ecx
   1bd9a:	cmp    $0x1,%ecx
   1bd9d:	je     1beae <jinit_color_deconverter+0x2be>
   1bda3:	cmp    $0x3,%ecx
   1bda6:	je     1beae <jinit_color_deconverter+0x2be>
   1bdac:	cmp    $0x2,%ecx
   1bdaf:	je     1bec3 <jinit_color_deconverter+0x2d3>
   1bdb5:	mov    (%r15),%rax
   1bdb8:	movl   $0x1b,0x28(%rax)
   1bdbf:	mov    (%r15),%rax
   1bdc2:	mov    (%rax),%rax
   1bdc5:	mov    %r15,%rdi
   1bdc8:	callq  *%rax
   1bdca:	jmpq   1be8e <jinit_color_deconverter+0x29e>
   1bdcf:	lea    0x3dae2(%rip),%rcx        # 598b8 <rgb_pixelsize>
   1bdd6:	movslq (%rcx,%rdi,4),%rdx
   1bdda:	mov    %edx,0x90(%r15)
   1bde1:	mov    0x3c(%r15),%ecx
   1bde5:	cmp    $0x3,%ecx
   1bde8:	je     1bed8 <jinit_color_deconverter+0x2e8>
   1bdee:	cmp    $0x1,%ecx
   1bdf1:	je     1bf05 <jinit_color_deconverter+0x315>
   1bdf7:	cmp    $0x2,%ecx
   1bdfa:	je     1bf15 <jinit_color_deconverter+0x325>
   1be00:	mov    (%r15),%rax
   1be03:	movl   $0x1b,0x28(%rax)
   1be0a:	mov    (%r15),%rax
   1be0d:	mov    (%rax),%rax
   1be10:	mov    %r15,%rdi
   1be13:	callq  *%rax
   1be15:	jmp    1be8e <jinit_color_deconverter+0x29e>
   1be17:	movl   $0x3,0x90(%r15)
   1be22:	mov    0x70(%r15),%ecx
   1be26:	test   %ecx,%ecx
   1be28:	je     1bf62 <jinit_color_deconverter+0x372>
   1be2e:	mov    0x3c(%r15),%ecx
   1be32:	cmp    $0x3,%ecx
   1be35:	je     1bf9b <jinit_color_deconverter+0x3ab>
   1be3b:	cmp    $0x1,%ecx
   1be3e:	je     1bfb3 <jinit_color_deconverter+0x3c3>
   1be44:	cmp    $0x2,%ecx
   1be47:	je     1bfc3 <jinit_color_deconverter+0x3d3>
   1be4d:	mov    (%r15),%rax
   1be50:	movl   $0x1b,0x28(%rax)
   1be57:	mov    (%r15),%rax
   1be5a:	mov    (%rax),%rax
   1be5d:	mov    %r15,%rdi
   1be60:	callq  *%rax
   1be62:	jmp    1be8e <jinit_color_deconverter+0x29e>
   1be64:	lea    0x1605(%rip),%rcx        # 1d470 <ycck_cmyk_convert>
   1be6b:	mov    %rcx,0x8(%rax)
   1be6f:	mov    %r15,%rdi
   1be72:	callq  1cf20 <build_ycc_rgb_table>
   1be77:	jmp    1be8e <jinit_color_deconverter+0x29e>
   1be79:	mov    %rsi,0x8(%rax)
   1be7d:	jmp    1be8e <jinit_color_deconverter+0x29e>
   1be7f:	movslq 0x38(%r15),%rcx
   1be83:	mov    %ecx,0x90(%r15)
   1be8a:	mov    %rsi,0x8(%rax)
   1be8e:	movslq 0x6c(%r15),%rax
   1be92:	test   %eax,%eax
   1be94:	jne    1bfd3 <jinit_color_deconverter+0x3e3>
   1be9a:	movslq 0x90(%r15),%rax
   1bea1:	mov    %eax,0x94(%r15)
   1bea8:	mov    -0x20(%rbp),%r15
   1beac:	leaveq 
   1bead:	retq   
   1beae:	lea    0x14eb(%rip),%rcx        # 1d3a0 <grayscale_convert>
   1beb5:	mov    %rcx,0x8(%rax)
   1beb9:	mov    $0x1,%eax
   1bebe:	jmpq   1c001 <jinit_color_deconverter+0x411>
   1bec3:	lea    0x1276(%rip),%rcx        # 1d140 <rgb_gray_convert>
   1beca:	mov    %rcx,0x8(%rax)
   1bece:	mov    %r15,%rdi
   1bed1:	callq  1d090 <build_rgb_y_table>
   1bed6:	jmp    1be8e <jinit_color_deconverter+0x29e>
   1bed8:	mov    %r14,-0x8(%rbp)
   1bedc:	mov    %rax,%r14
   1bedf:	callq  3d5f0 <jsimd_can_ycc_rgb>
   1bee4:	test   %eax,%eax
   1bee6:	jne    1c00e <jinit_color_deconverter+0x41e>
   1beec:	lea    0x114d(%rip),%rax        # 1d040 <ycc_rgb_convert>
   1bef3:	mov    %rax,0x8(%r14)
   1bef7:	mov    %r15,%rdi
   1befa:	callq  1cf20 <build_ycc_rgb_table>
   1beff:	mov    -0x8(%rbp),%r14
   1bf03:	jmp    1be8e <jinit_color_deconverter+0x29e>
   1bf05:	lea    0x14c4(%rip),%rcx        # 1d3d0 <gray_rgb_convert>
   1bf0c:	mov    %rcx,0x8(%rax)
   1bf10:	jmpq   1be8e <jinit_color_deconverter+0x29e>
   1bf15:	lea    0x3d8d0(%rip),%rcx        # 597ec <rgb_red>
   1bf1c:	movslq (%rcx,%rdi,4),%rcx
   1bf20:	test   %ecx,%ecx
   1bf22:	jne    1c022 <jinit_color_deconverter+0x432>
   1bf28:	lea    0x3d901(%rip),%rcx        # 59830 <rgb_green>
   1bf2f:	movslq (%rcx,%rdi,4),%rcx
   1bf33:	cmp    $0x1,%ecx
   1bf36:	jne    1c022 <jinit_color_deconverter+0x432>
   1bf3c:	lea    0x3d931(%rip),%rcx        # 59874 <rgb_blue>
   1bf43:	movslq (%rcx,%rdi,4),%rcx
   1bf47:	cmp    $0x2,%ecx
   1bf4a:	jne    1c022 <jinit_color_deconverter+0x432>
   1bf50:	cmp    $0x3,%edx
   1bf53:	jne    1c022 <jinit_color_deconverter+0x432>
   1bf59:	mov    %rsi,0x8(%rax)
   1bf5d:	jmpq   1be8e <jinit_color_deconverter+0x29e>
   1bf62:	mov    0x3c(%r15),%ecx
   1bf66:	cmp    $0x3,%ecx
   1bf69:	je     1c032 <jinit_color_deconverter+0x442>
   1bf6f:	cmp    $0x1,%ecx
   1bf72:	je     1c05e <jinit_color_deconverter+0x46e>
   1bf78:	cmp    $0x2,%ecx
   1bf7b:	je     1c06e <jinit_color_deconverter+0x47e>
   1bf81:	mov    (%r15),%rax
   1bf84:	movl   $0x1b,0x28(%rax)
   1bf8b:	mov    (%r15),%rax
   1bf8e:	mov    (%rax),%rax
   1bf91:	mov    %r15,%rdi
   1bf94:	callq  *%rax
   1bf96:	jmpq   1be8e <jinit_color_deconverter+0x29e>
   1bf9b:	lea    0x31ee(%rip),%rcx        # 1f190 <ycc_rgb565D_convert>
   1bfa2:	mov    %rcx,0x8(%rax)
   1bfa6:	mov    %r15,%rdi
   1bfa9:	callq  1cf20 <build_ycc_rgb_table>
   1bfae:	jmpq   1be8e <jinit_color_deconverter+0x29e>
   1bfb3:	lea    0x3416(%rip),%rcx        # 1f3d0 <gray_rgb565D_convert>
   1bfba:	mov    %rcx,0x8(%rax)
   1bfbe:	jmpq   1be8e <jinit_color_deconverter+0x29e>
   1bfc3:	lea    0x32e6(%rip),%rcx        # 1f2b0 <rgb_rgb565D_convert>
   1bfca:	mov    %rcx,0x8(%rax)
   1bfce:	jmpq   1be8e <jinit_color_deconverter+0x29e>
   1bfd3:	movl   $0x1,0x94(%r15)
   1bfde:	mov    -0x20(%rbp),%r15
   1bfe2:	leaveq 
   1bfe3:	retq   
   1bfe4:	mov    0x130(%r15),%rdx
   1bfeb:	movslq %eax,%rcx
   1bfee:	lea    (%rcx,%rcx,2),%rcx
   1bff2:	shl    $0x5,%rcx
   1bff6:	movl   $0x0,0x30(%rdx,%rcx,1)
   1bffe:	add    $0x1,%eax
   1c001:	movslq 0x38(%r15),%rcx
   1c005:	cmp    %eax,%ecx
   1c007:	jg     1bfe4 <jinit_color_deconverter+0x3f4>
   1c009:	jmpq   1be8e <jinit_color_deconverter+0x29e>
   1c00e:	lea    0x2170b(%rip),%rax        # 3d720 <jsimd_ycc_rgb_convert>
   1c015:	mov    %rax,0x8(%r14)
   1c019:	mov    -0x8(%rbp),%r14
   1c01d:	jmpq   1be8e <jinit_color_deconverter+0x29e>
   1c022:	lea    0x13f7(%rip),%rcx        # 1d420 <rgb_rgb_convert>
   1c029:	mov    %rcx,0x8(%rax)
   1c02d:	jmpq   1be8e <jinit_color_deconverter+0x29e>
   1c032:	mov    %r14,-0x8(%rbp)
   1c036:	mov    %rax,%r14
   1c039:	callq  3d630 <jsimd_can_ycc_rgb565>
   1c03e:	test   %eax,%eax
   1c040:	jne    1c07e <jinit_color_deconverter+0x48e>
   1c042:	lea    0x30b7(%rip),%rax        # 1f100 <ycc_rgb565_convert>
   1c049:	mov    %rax,0x8(%r14)
   1c04d:	mov    %r15,%rdi
   1c050:	callq  1cf20 <build_ycc_rgb_table>
   1c055:	mov    -0x8(%rbp),%r14
   1c059:	jmpq   1be8e <jinit_color_deconverter+0x29e>
   1c05e:	lea    0x32db(%rip),%rcx        # 1f340 <gray_rgb565_convert>
   1c065:	mov    %rcx,0x8(%rax)
   1c069:	jmpq   1be8e <jinit_color_deconverter+0x29e>
   1c06e:	lea    0x31ab(%rip),%rcx        # 1f220 <rgb_rgb565_convert>
   1c075:	mov    %rcx,0x8(%rax)
   1c079:	jmpq   1be8e <jinit_color_deconverter+0x29e>
   1c07e:	lea    0x2170b(%rip),%rax        # 3d790 <jsimd_ycc_rgb565_convert>
   1c085:	mov    %rax,0x8(%r14)
   1c089:	mov    -0x8(%rbp),%r14
   1c08d:	jmpq   1be8e <jinit_color_deconverter+0x29e>
   1c092:	data16 nopw %cs:0x0(%rax,%rax,1)
   1c09d:	nopl   (%rax)

000000000001c0a0 <ycc_rgb_convert_internal>:
   1c0a0:	push   %rbp
   1c0a1:	mov    %rsp,%rbp
   1c0a4:	sub    $0x50,%rsp
   1c0a8:	mov    %r15,-0x48(%rbp)
   1c0ac:	mov    %r14,-0x40(%rbp)
   1c0b0:	mov    %rsi,-0x18(%rbp)
   1c0b4:	mov    %rbx,-0x28(%rbp)
   1c0b8:	mov    %r12,-0x30(%rbp)
   1c0bc:	mov    %r13,-0x38(%rbp)
   1c0c0:	mov    0x88(%rdi),%r13d
   1c0c7:	mov    0x1a8(%rdi),%r14
   1c0ce:	mov    0x268(%rdi),%rdi
   1c0d5:	mov    0x10(%rdi),%rax
   1c0d9:	mov    %rax,-0x10(%rbp)
   1c0dd:	mov    0x18(%rdi),%r11
   1c0e1:	mov    0x20(%rdi),%r9
   1c0e5:	mov    0x28(%rdi),%r15
   1c0e9:	xor    %edi,%edi
   1c0eb:	jmp    1c15f <ycc_rgb_convert_internal+0xbf>
   1c0ed:	mov    %edi,%r8d
   1c0f0:	movzbl (%r12,%r8,1),%ecx
   1c0f5:	movzbl (%rbx,%r8,1),%edx
   1c0fa:	mov    (%rax,%rdx,4),%eax
   1c0fd:	add    %ecx,%eax
   1c0ff:	movslq %eax,%rax
   1c102:	movzbl (%rax,%r14,1),%eax
   1c107:	movzbl (%r10,%r8,1),%r8d
   1c10c:	mov    %al,(%rsi)
   1c10e:	mov    (%r9,%rdx,8),%rax
   1c112:	add    (%r15,%r8,8),%rax
   1c116:	sar    $0x10,%rax
   1c11a:	add    %ecx,%eax
   1c11c:	movslq %eax,%rax
   1c11f:	movzbl (%rax,%r14,1),%eax
   1c124:	mov    %al,0x1(%rsi)
   1c127:	add    (%r11,%r8,4),%ecx
   1c12b:	movslq %ecx,%rax
   1c12e:	movzbl (%rax,%r14,1),%eax
   1c133:	mov    %al,0x2(%rsi)
   1c136:	add    $0x1,%edi
   1c139:	add    $0x3,%rsi
   1c13d:	mov    -0x10(%rbp),%rax
   1c141:	cmp    %r13d,%edi
   1c144:	jb     1c0ed <ycc_rgb_convert_internal+0x4d>
   1c146:	mov    -0x20(%rbp),%rcx
   1c14a:	lea    0x1(%rcx),%edx
   1c14d:	mov    -0x8(%rbp),%rcx
   1c151:	add    $0x8,%rcx
   1c155:	xor    %edi,%edi
   1c157:	mov    -0x50(%rbp),%r8
   1c15b:	mov    -0x18(%rbp),%rsi
   1c15f:	add    $0xffffffff,%r8d
   1c163:	test   %r8d,%r8d
   1c166:	jns    1c17e <ycc_rgb_convert_internal+0xde>
   1c168:	mov    -0x38(%rbp),%r13
   1c16c:	mov    -0x30(%rbp),%r12
   1c170:	mov    -0x28(%rbp),%rbx
   1c174:	mov    -0x40(%rbp),%r14
   1c178:	mov    -0x48(%rbp),%r15
   1c17c:	leaveq 
   1c17d:	retq   
   1c17e:	mov    (%rsi),%r10
   1c181:	mov    %edx,%ebx
   1c183:	mov    (%r10,%rbx,8),%r12
   1c187:	mov    0x8(%rsi),%r10
   1c18b:	mov    (%r10,%rbx,8),%r10
   1c18f:	mov    0x10(%rsi),%rsi
   1c193:	mov    (%rsi,%rbx,8),%rbx
   1c197:	mov    (%rcx),%rsi
   1c19a:	mov    %rdx,-0x20(%rbp)
   1c19e:	mov    %rcx,-0x8(%rbp)
   1c1a2:	mov    %r8,-0x50(%rbp)
   1c1a6:	jmp    1c141 <ycc_rgb_convert_internal+0xa1>
   1c1a8:	nopl   0x0(%rax,%rax,1)

000000000001c1b0 <gray_rgb_convert_internal>:
   1c1b0:	push   %rbp
   1c1b1:	mov    %rsp,%rbp
   1c1b4:	sub    $0x10,%rsp
   1c1b8:	mov    %r15,-0x8(%rbp)
   1c1bc:	mov    0x88(%rdi),%r9d
   1c1c3:	xor    %r10d,%r10d
   1c1c6:	jmp    1c1ee <gray_rgb_convert_internal+0x3e>
   1c1c8:	mov    %edi,%r11d
   1c1cb:	movzbl (%r15,%r11,1),%r11d
   1c1d0:	mov    %r11b,0x2(%rax)
   1c1d4:	mov    %r11b,0x1(%rax)
   1c1d8:	mov    %r11b,(%rax)
   1c1db:	add    $0x1,%edi
   1c1de:	add    $0x3,%rax
   1c1e2:	cmp    %r9d,%edi
   1c1e5:	jb     1c1c8 <gray_rgb_convert_internal+0x18>
   1c1e7:	add    $0x1,%edx
   1c1ea:	add    $0x8,%rcx
   1c1ee:	add    $0xffffffff,%r8d
   1c1f2:	test   %r8d,%r8d
   1c1f5:	jns    1c1fd <gray_rgb_convert_internal+0x4d>
   1c1f7:	mov    -0x8(%rbp),%r15
   1c1fb:	leaveq 
   1c1fc:	retq   
   1c1fd:	mov    (%rsi),%rax
   1c200:	mov    %edx,%edi
   1c202:	mov    (%rax,%rdi,8),%r15
   1c206:	mov    (%rcx),%rax
   1c209:	mov    %r10,%rdi
   1c20c:	jmp    1c1e2 <gray_rgb_convert_internal+0x32>
   1c20e:	xchg   %ax,%ax

000000000001c210 <rgb_rgb_convert_internal>:
   1c210:	push   %rbp
   1c211:	mov    %rsp,%rbp
   1c214:	sub    $0x20,%rsp
   1c218:	mov    %r12,-0x8(%rbp)
   1c21c:	mov    %r13,-0x10(%rbp)
   1c220:	mov    %r14,-0x18(%rbp)
   1c224:	mov    %r15,-0x20(%rbp)
   1c228:	mov    0x88(%rdi),%r9d
   1c22f:	xor    %r10d,%r10d
   1c232:	jmp    1c264 <rgb_rgb_convert_internal+0x54>
   1c234:	mov    %edi,%r13d
   1c237:	movzbl (%r14,%r13,1),%r12d
   1c23c:	mov    %r12b,(%rax)
   1c23f:	movzbl (%r11,%r13,1),%r12d
   1c244:	mov    %r12b,0x1(%rax)
   1c248:	movzbl (%r15,%r13,1),%r12d
   1c24d:	mov    %r12b,0x2(%rax)
   1c251:	add    $0x1,%edi
   1c254:	add    $0x3,%rax
   1c258:	cmp    %r9d,%edi
   1c25b:	jb     1c234 <rgb_rgb_convert_internal+0x24>
   1c25d:	add    $0x1,%edx
   1c260:	add    $0x8,%rcx
   1c264:	add    $0xffffffff,%r8d
   1c268:	test   %r8d,%r8d
   1c26b:	jns    1c27f <rgb_rgb_convert_internal+0x6f>
   1c26d:	mov    -0x20(%rbp),%r15
   1c271:	mov    -0x18(%rbp),%r14
   1c275:	mov    -0x10(%rbp),%r13
   1c279:	mov    -0x8(%rbp),%r12
   1c27d:	leaveq 
   1c27e:	retq   
   1c27f:	mov    (%rsi),%rax
   1c282:	mov    %edx,%edi
   1c284:	mov    (%rax,%rdi,8),%r14
   1c288:	mov    0x8(%rsi),%rax
   1c28c:	mov    (%rax,%rdi,8),%r11
   1c290:	mov    0x10(%rsi),%rax
   1c294:	mov    (%rax,%rdi,8),%r15
   1c298:	mov    (%rcx),%rax
   1c29b:	mov    %r10,%rdi
   1c29e:	jmp    1c258 <rgb_rgb_convert_internal+0x48>

000000000001c2a0 <ycc_extrgb_convert_internal>:
   1c2a0:	push   %rbp
   1c2a1:	mov    %rsp,%rbp
   1c2a4:	sub    $0x50,%rsp
   1c2a8:	mov    %r15,-0x48(%rbp)
   1c2ac:	mov    %r14,-0x40(%rbp)
   1c2b0:	mov    %rsi,-0x18(%rbp)
   1c2b4:	mov    %rbx,-0x28(%rbp)
   1c2b8:	mov    %r12,-0x30(%rbp)
   1c2bc:	mov    %r13,-0x38(%rbp)
   1c2c0:	mov    0x88(%rdi),%r13d
   1c2c7:	mov    0x1a8(%rdi),%r14
   1c2ce:	mov    0x268(%rdi),%rdi
   1c2d5:	mov    0x10(%rdi),%rax
   1c2d9:	mov    %rax,-0x10(%rbp)
   1c2dd:	mov    0x18(%rdi),%r11
   1c2e1:	mov    0x20(%rdi),%r9
   1c2e5:	mov    0x28(%rdi),%r15
   1c2e9:	xor    %edi,%edi
   1c2eb:	jmp    1c35f <ycc_extrgb_convert_internal+0xbf>
   1c2ed:	mov    %edi,%r8d
   1c2f0:	movzbl (%r12,%r8,1),%ecx
   1c2f5:	movzbl (%rbx,%r8,1),%edx
   1c2fa:	mov    (%rax,%rdx,4),%eax
   1c2fd:	add    %ecx,%eax
   1c2ff:	movslq %eax,%rax
   1c302:	movzbl (%rax,%r14,1),%eax
   1c307:	movzbl (%r10,%r8,1),%r8d
   1c30c:	mov    %al,(%rsi)
   1c30e:	mov    (%r9,%rdx,8),%rax
   1c312:	add    (%r15,%r8,8),%rax
   1c316:	sar    $0x10,%rax
   1c31a:	add    %ecx,%eax
   1c31c:	movslq %eax,%rax
   1c31f:	movzbl (%rax,%r14,1),%eax
   1c324:	mov    %al,0x1(%rsi)
   1c327:	add    (%r11,%r8,4),%ecx
   1c32b:	movslq %ecx,%rax
   1c32e:	movzbl (%rax,%r14,1),%eax
   1c333:	mov    %al,0x2(%rsi)
   1c336:	add    $0x1,%edi
   1c339:	add    $0x3,%rsi
   1c33d:	mov    -0x10(%rbp),%rax
   1c341:	cmp    %r13d,%edi
   1c344:	jb     1c2ed <ycc_extrgb_convert_internal+0x4d>
   1c346:	mov    -0x20(%rbp),%rcx
   1c34a:	lea    0x1(%rcx),%edx
   1c34d:	mov    -0x8(%rbp),%rcx
   1c351:	add    $0x8,%rcx
   1c355:	xor    %edi,%edi
   1c357:	mov    -0x50(%rbp),%r8
   1c35b:	mov    -0x18(%rbp),%rsi
   1c35f:	add    $0xffffffff,%r8d
   1c363:	test   %r8d,%r8d
   1c366:	jns    1c37e <ycc_extrgb_convert_internal+0xde>
   1c368:	mov    -0x38(%rbp),%r13
   1c36c:	mov    -0x30(%rbp),%r12
   1c370:	mov    -0x28(%rbp),%rbx
   1c374:	mov    -0x40(%rbp),%r14
   1c378:	mov    -0x48(%rbp),%r15
   1c37c:	leaveq 
   1c37d:	retq   
   1c37e:	mov    (%rsi),%r10
   1c381:	mov    %edx,%ebx
   1c383:	mov    (%r10,%rbx,8),%r12
   1c387:	mov    0x8(%rsi),%r10
   1c38b:	mov    (%r10,%rbx,8),%r10
   1c38f:	mov    0x10(%rsi),%rsi
   1c393:	mov    (%rsi,%rbx,8),%rbx
   1c397:	mov    (%rcx),%rsi
   1c39a:	mov    %rdx,-0x20(%rbp)
   1c39e:	mov    %rcx,-0x8(%rbp)
   1c3a2:	mov    %r8,-0x50(%rbp)
   1c3a6:	jmp    1c341 <ycc_extrgb_convert_internal+0xa1>
   1c3a8:	nopl   0x0(%rax,%rax,1)

000000000001c3b0 <gray_extrgb_convert_internal>:
   1c3b0:	push   %rbp
   1c3b1:	mov    %rsp,%rbp
   1c3b4:	sub    $0x10,%rsp
   1c3b8:	mov    %r15,-0x8(%rbp)
   1c3bc:	mov    0x88(%rdi),%r9d
   1c3c3:	xor    %r10d,%r10d
   1c3c6:	jmp    1c3ee <gray_extrgb_convert_internal+0x3e>
   1c3c8:	mov    %edi,%r11d
   1c3cb:	movzbl (%r15,%r11,1),%r11d
   1c3d0:	mov    %r11b,0x2(%rax)
   1c3d4:	mov    %r11b,0x1(%rax)
   1c3d8:	mov    %r11b,(%rax)
   1c3db:	add    $0x1,%edi
   1c3de:	add    $0x3,%rax
   1c3e2:	cmp    %r9d,%edi
   1c3e5:	jb     1c3c8 <gray_extrgb_convert_internal+0x18>
   1c3e7:	add    $0x1,%edx
   1c3ea:	add    $0x8,%rcx
   1c3ee:	add    $0xffffffff,%r8d
   1c3f2:	test   %r8d,%r8d
   1c3f5:	jns    1c3fd <gray_extrgb_convert_internal+0x4d>
   1c3f7:	mov    -0x8(%rbp),%r15
   1c3fb:	leaveq 
   1c3fc:	retq   
   1c3fd:	mov    (%rsi),%rax
   1c400:	mov    %edx,%edi
   1c402:	mov    (%rax,%rdi,8),%r15
   1c406:	mov    (%rcx),%rax
   1c409:	mov    %r10,%rdi
   1c40c:	jmp    1c3e2 <gray_extrgb_convert_internal+0x32>
   1c40e:	xchg   %ax,%ax

000000000001c410 <rgb_extrgb_convert_internal>:
   1c410:	push   %rbp
   1c411:	mov    %rsp,%rbp
   1c414:	sub    $0x20,%rsp
   1c418:	mov    %r12,-0x8(%rbp)
   1c41c:	mov    %r13,-0x10(%rbp)
   1c420:	mov    %r14,-0x18(%rbp)
   1c424:	mov    %r15,-0x20(%rbp)
   1c428:	mov    0x88(%rdi),%r9d
   1c42f:	xor    %r10d,%r10d
   1c432:	jmp    1c464 <rgb_extrgb_convert_internal+0x54>
   1c434:	mov    %edi,%r13d
   1c437:	movzbl (%r14,%r13,1),%r12d
   1c43c:	mov    %r12b,(%rax)
   1c43f:	movzbl (%r11,%r13,1),%r12d
   1c444:	mov    %r12b,0x1(%rax)
   1c448:	movzbl (%r15,%r13,1),%r12d
   1c44d:	mov    %r12b,0x2(%rax)
   1c451:	add    $0x1,%edi
   1c454:	add    $0x3,%rax
   1c458:	cmp    %r9d,%edi
   1c45b:	jb     1c434 <rgb_extrgb_convert_internal+0x24>
   1c45d:	add    $0x1,%edx
   1c460:	add    $0x8,%rcx
   1c464:	add    $0xffffffff,%r8d
   1c468:	test   %r8d,%r8d
   1c46b:	jns    1c47f <rgb_extrgb_convert_internal+0x6f>
   1c46d:	mov    -0x20(%rbp),%r15
   1c471:	mov    -0x18(%rbp),%r14
   1c475:	mov    -0x10(%rbp),%r13
   1c479:	mov    -0x8(%rbp),%r12
   1c47d:	leaveq 
   1c47e:	retq   
   1c47f:	mov    (%rsi),%rax
   1c482:	mov    %edx,%edi
   1c484:	mov    (%rax,%rdi,8),%r14
   1c488:	mov    0x8(%rsi),%rax
   1c48c:	mov    (%rax,%rdi,8),%r11
   1c490:	mov    0x10(%rsi),%rax
   1c494:	mov    (%rax,%rdi,8),%r15
   1c498:	mov    (%rcx),%rax
   1c49b:	mov    %r10,%rdi
   1c49e:	jmp    1c458 <rgb_extrgb_convert_internal+0x48>

000000000001c4a0 <ycc_extrgbx_convert_internal>:
   1c4a0:	push   %rbp
   1c4a1:	mov    %rsp,%rbp
   1c4a4:	sub    $0x50,%rsp
   1c4a8:	mov    %r15,-0x48(%rbp)
   1c4ac:	mov    %r14,-0x40(%rbp)
   1c4b0:	mov    %rsi,-0x18(%rbp)
   1c4b4:	mov    %rbx,-0x28(%rbp)
   1c4b8:	mov    %r12,-0x30(%rbp)
   1c4bc:	mov    %r13,-0x38(%rbp)
   1c4c0:	mov    0x88(%rdi),%r13d
   1c4c7:	mov    0x1a8(%rdi),%r14
   1c4ce:	mov    0x268(%rdi),%rdi
   1c4d5:	mov    0x10(%rdi),%rax
   1c4d9:	mov    %rax,-0x10(%rbp)
   1c4dd:	mov    0x18(%rdi),%r11
   1c4e1:	mov    0x20(%rdi),%r9
   1c4e5:	mov    0x28(%rdi),%r15
   1c4e9:	xor    %edi,%edi
   1c4eb:	jmp    1c563 <ycc_extrgbx_convert_internal+0xc3>
   1c4ed:	mov    %edi,%r8d
   1c4f0:	movzbl (%r12,%r8,1),%ecx
   1c4f5:	movzbl (%rbx,%r8,1),%edx
   1c4fa:	mov    (%rax,%rdx,4),%eax
   1c4fd:	add    %ecx,%eax
   1c4ff:	movslq %eax,%rax
   1c502:	movzbl (%rax,%r14,1),%eax
   1c507:	movzbl (%r10,%r8,1),%r8d
   1c50c:	mov    %al,(%rsi)
   1c50e:	mov    (%r9,%rdx,8),%rax
   1c512:	add    (%r15,%r8,8),%rax
   1c516:	sar    $0x10,%rax
   1c51a:	add    %ecx,%eax
   1c51c:	movslq %eax,%rax
   1c51f:	movzbl (%rax,%r14,1),%eax
   1c524:	mov    %al,0x1(%rsi)
   1c527:	add    (%r11,%r8,4),%ecx
   1c52b:	movslq %ecx,%rax
   1c52e:	movzbl (%rax,%r14,1),%eax
   1c533:	mov    %al,0x2(%rsi)
   1c536:	movb   $0xff,0x3(%rsi)
   1c53a:	add    $0x1,%edi
   1c53d:	add    $0x4,%rsi
   1c541:	mov    -0x10(%rbp),%rax
   1c545:	cmp    %r13d,%edi
   1c548:	jb     1c4ed <ycc_extrgbx_convert_internal+0x4d>
   1c54a:	mov    -0x20(%rbp),%rcx
   1c54e:	lea    0x1(%rcx),%edx
   1c551:	mov    -0x8(%rbp),%rcx
   1c555:	add    $0x8,%rcx
   1c559:	xor    %edi,%edi
   1c55b:	mov    -0x50(%rbp),%r8
   1c55f:	mov    -0x18(%rbp),%rsi
   1c563:	add    $0xffffffff,%r8d
   1c567:	test   %r8d,%r8d
   1c56a:	jns    1c582 <ycc_extrgbx_convert_internal+0xe2>
   1c56c:	mov    -0x38(%rbp),%r13
   1c570:	mov    -0x30(%rbp),%r12
   1c574:	mov    -0x28(%rbp),%rbx
   1c578:	mov    -0x40(%rbp),%r14
   1c57c:	mov    -0x48(%rbp),%r15
   1c580:	leaveq 
   1c581:	retq   
   1c582:	mov    (%rsi),%r10
   1c585:	mov    %edx,%ebx
   1c587:	mov    (%r10,%rbx,8),%r12
   1c58b:	mov    0x8(%rsi),%r10
   1c58f:	mov    (%r10,%rbx,8),%r10
   1c593:	mov    0x10(%rsi),%rsi
   1c597:	mov    (%rsi,%rbx,8),%rbx
   1c59b:	mov    (%rcx),%rsi
   1c59e:	mov    %rdx,-0x20(%rbp)
   1c5a2:	mov    %rcx,-0x8(%rbp)
   1c5a6:	mov    %r8,-0x50(%rbp)
   1c5aa:	jmp    1c545 <ycc_extrgbx_convert_internal+0xa5>
   1c5ac:	nopl   0x0(%rax)

000000000001c5b0 <gray_extrgbx_convert_internal>:
   1c5b0:	push   %rbp
   1c5b1:	mov    %rsp,%rbp
   1c5b4:	sub    $0x10,%rsp
   1c5b8:	mov    %r15,-0x8(%rbp)
   1c5bc:	mov    0x88(%rdi),%r9d
   1c5c3:	xor    %r10d,%r10d
   1c5c6:	jmp    1c5f2 <gray_extrgbx_convert_internal+0x42>
   1c5c8:	mov    %edi,%r11d
   1c5cb:	movzbl (%r15,%r11,1),%r11d
   1c5d0:	mov    %r11b,0x2(%rax)
   1c5d4:	mov    %r11b,0x1(%rax)
   1c5d8:	mov    %r11b,(%rax)
   1c5db:	movb   $0xff,0x3(%rax)
   1c5df:	add    $0x1,%edi
   1c5e2:	add    $0x4,%rax
   1c5e6:	cmp    %r9d,%edi
   1c5e9:	jb     1c5c8 <gray_extrgbx_convert_internal+0x18>
   1c5eb:	add    $0x1,%edx
   1c5ee:	add    $0x8,%rcx
   1c5f2:	add    $0xffffffff,%r8d
   1c5f6:	test   %r8d,%r8d
   1c5f9:	jns    1c601 <gray_extrgbx_convert_internal+0x51>
   1c5fb:	mov    -0x8(%rbp),%r15
   1c5ff:	leaveq 
   1c600:	retq   
   1c601:	mov    (%rsi),%rax
   1c604:	mov    %edx,%edi
   1c606:	mov    (%rax,%rdi,8),%r15
   1c60a:	mov    (%rcx),%rax
   1c60d:	mov    %r10,%rdi
   1c610:	jmp    1c5e6 <gray_extrgbx_convert_internal+0x36>
   1c612:	data16 nopw %cs:0x0(%rax,%rax,1)
   1c61d:	nopl   (%rax)

000000000001c620 <rgb_extrgbx_convert_internal>:
   1c620:	push   %rbp
   1c621:	mov    %rsp,%rbp
   1c624:	sub    $0x20,%rsp
   1c628:	mov    %r12,-0x8(%rbp)
   1c62c:	mov    %r13,-0x10(%rbp)
   1c630:	mov    %r14,-0x18(%rbp)
   1c634:	mov    %r15,-0x20(%rbp)
   1c638:	mov    0x88(%rdi),%r9d
   1c63f:	xor    %r10d,%r10d
   1c642:	jmp    1c678 <rgb_extrgbx_convert_internal+0x58>
   1c644:	mov    %edi,%r13d
   1c647:	movzbl (%r14,%r13,1),%r12d
   1c64c:	mov    %r12b,(%rax)
   1c64f:	movzbl (%r11,%r13,1),%r12d
   1c654:	mov    %r12b,0x1(%rax)
   1c658:	movzbl (%r15,%r13,1),%r12d
   1c65d:	mov    %r12b,0x2(%rax)
   1c661:	movb   $0xff,0x3(%rax)
   1c665:	add    $0x1,%edi
   1c668:	add    $0x4,%rax
   1c66c:	cmp    %r9d,%edi
   1c66f:	jb     1c644 <rgb_extrgbx_convert_internal+0x24>
   1c671:	add    $0x1,%edx
   1c674:	add    $0x8,%rcx
   1c678:	add    $0xffffffff,%r8d
   1c67c:	test   %r8d,%r8d
   1c67f:	jns    1c693 <rgb_extrgbx_convert_internal+0x73>
   1c681:	mov    -0x20(%rbp),%r15
   1c685:	mov    -0x18(%rbp),%r14
   1c689:	mov    -0x10(%rbp),%r13
   1c68d:	mov    -0x8(%rbp),%r12
   1c691:	leaveq 
   1c692:	retq   
   1c693:	mov    (%rsi),%rax
   1c696:	mov    %edx,%edi
   1c698:	mov    (%rax,%rdi,8),%r14
   1c69c:	mov    0x8(%rsi),%rax
   1c6a0:	mov    (%rax,%rdi,8),%r11
   1c6a4:	mov    0x10(%rsi),%rax
   1c6a8:	mov    (%rax,%rdi,8),%r15
   1c6ac:	mov    (%rcx),%rax
   1c6af:	mov    %r10,%rdi
   1c6b2:	jmp    1c66c <rgb_extrgbx_convert_internal+0x4c>
   1c6b4:	data16 nopw %cs:0x0(%rax,%rax,1)
   1c6bf:	nop

000000000001c6c0 <ycc_extbgr_convert_internal>:
   1c6c0:	push   %rbp
   1c6c1:	mov    %rsp,%rbp
   1c6c4:	sub    $0x50,%rsp
   1c6c8:	mov    %r15,-0x48(%rbp)
   1c6cc:	mov    %r14,-0x40(%rbp)
   1c6d0:	mov    %rsi,-0x18(%rbp)
   1c6d4:	mov    %rbx,-0x28(%rbp)
   1c6d8:	mov    %r12,-0x30(%rbp)
   1c6dc:	mov    %r13,-0x38(%rbp)
   1c6e0:	mov    0x88(%rdi),%r13d
   1c6e7:	mov    0x1a8(%rdi),%r14
   1c6ee:	mov    0x268(%rdi),%rdi
   1c6f5:	mov    0x10(%rdi),%rax
   1c6f9:	mov    %rax,-0x10(%rbp)
   1c6fd:	mov    0x18(%rdi),%r11
   1c701:	mov    0x20(%rdi),%r9
   1c705:	mov    0x28(%rdi),%r15
   1c709:	xor    %edi,%edi
   1c70b:	jmp    1c77f <ycc_extbgr_convert_internal+0xbf>
   1c70d:	mov    %edi,%r8d
   1c710:	movzbl (%r12,%r8,1),%ecx
   1c715:	movzbl (%rbx,%r8,1),%edx
   1c71a:	mov    (%rax,%rdx,4),%eax
   1c71d:	add    %ecx,%eax
   1c71f:	movslq %eax,%rax
   1c722:	movzbl (%rax,%r14,1),%eax
   1c727:	movzbl (%r10,%r8,1),%r8d
   1c72c:	mov    %al,0x2(%rsi)
   1c72f:	mov    (%r9,%rdx,8),%rax
   1c733:	add    (%r15,%r8,8),%rax
   1c737:	sar    $0x10,%rax
   1c73b:	add    %ecx,%eax
   1c73d:	movslq %eax,%rax
   1c740:	movzbl (%rax,%r14,1),%eax
   1c745:	mov    %al,0x1(%rsi)
   1c748:	add    (%r11,%r8,4),%ecx
   1c74c:	movslq %ecx,%rax
   1c74f:	movzbl (%rax,%r14,1),%eax
   1c754:	mov    %al,(%rsi)
   1c756:	add    $0x1,%edi
   1c759:	add    $0x3,%rsi
   1c75d:	mov    -0x10(%rbp),%rax
   1c761:	cmp    %r13d,%edi
   1c764:	jb     1c70d <ycc_extbgr_convert_internal+0x4d>
   1c766:	mov    -0x20(%rbp),%rcx
   1c76a:	lea    0x1(%rcx),%edx
   1c76d:	mov    -0x8(%rbp),%rcx
   1c771:	add    $0x8,%rcx
   1c775:	xor    %edi,%edi
   1c777:	mov    -0x50(%rbp),%r8
   1c77b:	mov    -0x18(%rbp),%rsi
   1c77f:	add    $0xffffffff,%r8d
   1c783:	test   %r8d,%r8d
   1c786:	jns    1c79e <ycc_extbgr_convert_internal+0xde>
   1c788:	mov    -0x38(%rbp),%r13
   1c78c:	mov    -0x30(%rbp),%r12
   1c790:	mov    -0x28(%rbp),%rbx
   1c794:	mov    -0x40(%rbp),%r14
   1c798:	mov    -0x48(%rbp),%r15
   1c79c:	leaveq 
   1c79d:	retq   
   1c79e:	mov    (%rsi),%r10
   1c7a1:	mov    %edx,%ebx
   1c7a3:	mov    (%r10,%rbx,8),%r12
   1c7a7:	mov    0x8(%rsi),%r10
   1c7ab:	mov    (%r10,%rbx,8),%r10
   1c7af:	mov    0x10(%rsi),%rsi
   1c7b3:	mov    (%rsi,%rbx,8),%rbx
   1c7b7:	mov    (%rcx),%rsi
   1c7ba:	mov    %rdx,-0x20(%rbp)
   1c7be:	mov    %rcx,-0x8(%rbp)
   1c7c2:	mov    %r8,-0x50(%rbp)
   1c7c6:	jmp    1c761 <ycc_extbgr_convert_internal+0xa1>
   1c7c8:	nopl   0x0(%rax,%rax,1)

000000000001c7d0 <gray_extbgr_convert_internal>:
   1c7d0:	push   %rbp
   1c7d1:	mov    %rsp,%rbp
   1c7d4:	sub    $0x10,%rsp
   1c7d8:	mov    %r15,-0x8(%rbp)
   1c7dc:	mov    0x88(%rdi),%r9d
   1c7e3:	xor    %r10d,%r10d
   1c7e6:	jmp    1c80e <gray_extbgr_convert_internal+0x3e>
   1c7e8:	mov    %edi,%r11d
   1c7eb:	movzbl (%r15,%r11,1),%r11d
   1c7f0:	mov    %r11b,(%rax)
   1c7f3:	mov    %r11b,0x1(%rax)
   1c7f7:	mov    %r11b,0x2(%rax)
   1c7fb:	add    $0x1,%edi
   1c7fe:	add    $0x3,%rax
   1c802:	cmp    %r9d,%edi
   1c805:	jb     1c7e8 <gray_extbgr_convert_internal+0x18>
   1c807:	add    $0x1,%edx
   1c80a:	add    $0x8,%rcx
   1c80e:	add    $0xffffffff,%r8d
   1c812:	test   %r8d,%r8d
   1c815:	jns    1c81d <gray_extbgr_convert_internal+0x4d>
   1c817:	mov    -0x8(%rbp),%r15
   1c81b:	leaveq 
   1c81c:	retq   
   1c81d:	mov    (%rsi),%rax
   1c820:	mov    %edx,%edi
   1c822:	mov    (%rax,%rdi,8),%r15
   1c826:	mov    (%rcx),%rax
   1c829:	mov    %r10,%rdi
   1c82c:	jmp    1c802 <gray_extbgr_convert_internal+0x32>
   1c82e:	xchg   %ax,%ax

000000000001c830 <rgb_extbgr_convert_internal>:
   1c830:	push   %rbp
   1c831:	mov    %rsp,%rbp
   1c834:	sub    $0x20,%rsp
   1c838:	mov    %r12,-0x8(%rbp)
   1c83c:	mov    %r13,-0x10(%rbp)
   1c840:	mov    %r14,-0x18(%rbp)
   1c844:	mov    %r15,-0x20(%rbp)
   1c848:	mov    0x88(%rdi),%r9d
   1c84f:	xor    %r10d,%r10d
   1c852:	jmp    1c884 <rgb_extbgr_convert_internal+0x54>
   1c854:	mov    %edi,%r13d
   1c857:	movzbl (%r14,%r13,1),%r12d
   1c85c:	mov    %r12b,0x2(%rax)
   1c860:	movzbl (%r11,%r13,1),%r12d
   1c865:	mov    %r12b,0x1(%rax)
   1c869:	movzbl (%r15,%r13,1),%r12d
   1c86e:	mov    %r12b,(%rax)
   1c871:	add    $0x1,%edi
   1c874:	add    $0x3,%rax
   1c878:	cmp    %r9d,%edi
   1c87b:	jb     1c854 <rgb_extbgr_convert_internal+0x24>
   1c87d:	add    $0x1,%edx
   1c880:	add    $0x8,%rcx
   1c884:	add    $0xffffffff,%r8d
   1c888:	test   %r8d,%r8d
   1c88b:	jns    1c89f <rgb_extbgr_convert_internal+0x6f>
   1c88d:	mov    -0x20(%rbp),%r15
   1c891:	mov    -0x18(%rbp),%r14
   1c895:	mov    -0x10(%rbp),%r13
   1c899:	mov    -0x8(%rbp),%r12
   1c89d:	leaveq 
   1c89e:	retq   
   1c89f:	mov    (%rsi),%rax
   1c8a2:	mov    %edx,%edi
   1c8a4:	mov    (%rax,%rdi,8),%r14
   1c8a8:	mov    0x8(%rsi),%rax
   1c8ac:	mov    (%rax,%rdi,8),%r11
   1c8b0:	mov    0x10(%rsi),%rax
   1c8b4:	mov    (%rax,%rdi,8),%r15
   1c8b8:	mov    (%rcx),%rax
   1c8bb:	mov    %r10,%rdi
   1c8be:	jmp    1c878 <rgb_extbgr_convert_internal+0x48>

000000000001c8c0 <ycc_extbgrx_convert_internal>:
   1c8c0:	push   %rbp
   1c8c1:	mov    %rsp,%rbp
   1c8c4:	sub    $0x50,%rsp
   1c8c8:	mov    %r15,-0x48(%rbp)
   1c8cc:	mov    %r14,-0x40(%rbp)
   1c8d0:	mov    %rsi,-0x18(%rbp)
   1c8d4:	mov    %rbx,-0x28(%rbp)
   1c8d8:	mov    %r12,-0x30(%rbp)
   1c8dc:	mov    %r13,-0x38(%rbp)
   1c8e0:	mov    0x88(%rdi),%r13d
   1c8e7:	mov    0x1a8(%rdi),%r14
   1c8ee:	mov    0x268(%rdi),%rdi
   1c8f5:	mov    0x10(%rdi),%rax
   1c8f9:	mov    %rax,-0x10(%rbp)
   1c8fd:	mov    0x18(%rdi),%r11
   1c901:	mov    0x20(%rdi),%r9
   1c905:	mov    0x28(%rdi),%r15
   1c909:	xor    %edi,%edi
   1c90b:	jmp    1c983 <ycc_extbgrx_convert_internal+0xc3>
   1c90d:	mov    %edi,%r8d
   1c910:	movzbl (%r12,%r8,1),%ecx
   1c915:	movzbl (%rbx,%r8,1),%edx
   1c91a:	mov    (%rax,%rdx,4),%eax
   1c91d:	add    %ecx,%eax
   1c91f:	movslq %eax,%rax
   1c922:	movzbl (%rax,%r14,1),%eax
   1c927:	movzbl (%r10,%r8,1),%r8d
   1c92c:	mov    %al,0x2(%rsi)
   1c92f:	mov    (%r9,%rdx,8),%rax
   1c933:	add    (%r15,%r8,8),%rax
   1c937:	sar    $0x10,%rax
   1c93b:	add    %ecx,%eax
   1c93d:	movslq %eax,%rax
   1c940:	movzbl (%rax,%r14,1),%eax
   1c945:	mov    %al,0x1(%rsi)
   1c948:	add    (%r11,%r8,4),%ecx
   1c94c:	movslq %ecx,%rax
   1c94f:	movzbl (%rax,%r14,1),%eax
   1c954:	mov    %al,(%rsi)
   1c956:	movb   $0xff,0x3(%rsi)
   1c95a:	add    $0x1,%edi
   1c95d:	add    $0x4,%rsi
   1c961:	mov    -0x10(%rbp),%rax
   1c965:	cmp    %r13d,%edi
   1c968:	jb     1c90d <ycc_extbgrx_convert_internal+0x4d>
   1c96a:	mov    -0x20(%rbp),%rcx
   1c96e:	lea    0x1(%rcx),%edx
   1c971:	mov    -0x8(%rbp),%rcx
   1c975:	add    $0x8,%rcx
   1c979:	xor    %edi,%edi
   1c97b:	mov    -0x50(%rbp),%r8
   1c97f:	mov    -0x18(%rbp),%rsi
   1c983:	add    $0xffffffff,%r8d
   1c987:	test   %r8d,%r8d
   1c98a:	jns    1c9a2 <ycc_extbgrx_convert_internal+0xe2>
   1c98c:	mov    -0x38(%rbp),%r13
   1c990:	mov    -0x30(%rbp),%r12
   1c994:	mov    -0x28(%rbp),%rbx
   1c998:	mov    -0x40(%rbp),%r14
   1c99c:	mov    -0x48(%rbp),%r15
   1c9a0:	leaveq 
   1c9a1:	retq   
   1c9a2:	mov    (%rsi),%r10
   1c9a5:	mov    %edx,%ebx
   1c9a7:	mov    (%r10,%rbx,8),%r12
   1c9ab:	mov    0x8(%rsi),%r10
   1c9af:	mov    (%r10,%rbx,8),%r10
   1c9b3:	mov    0x10(%rsi),%rsi
   1c9b7:	mov    (%rsi,%rbx,8),%rbx
   1c9bb:	mov    (%rcx),%rsi
   1c9be:	mov    %rdx,-0x20(%rbp)
   1c9c2:	mov    %rcx,-0x8(%rbp)
   1c9c6:	mov    %r8,-0x50(%rbp)
   1c9ca:	jmp    1c965 <ycc_extbgrx_convert_internal+0xa5>
   1c9cc:	nopl   0x0(%rax)

000000000001c9d0 <gray_extbgrx_convert_internal>:
   1c9d0:	push   %rbp
   1c9d1:	mov    %rsp,%rbp
   1c9d4:	sub    $0x10,%rsp
   1c9d8:	mov    %r15,-0x8(%rbp)
   1c9dc:	mov    0x88(%rdi),%r9d
   1c9e3:	xor    %r10d,%r10d
   1c9e6:	jmp    1ca12 <gray_extbgrx_convert_internal+0x42>
   1c9e8:	mov    %edi,%r11d
   1c9eb:	movzbl (%r15,%r11,1),%r11d
   1c9f0:	mov    %r11b,(%rax)
   1c9f3:	mov    %r11b,0x1(%rax)
   1c9f7:	mov    %r11b,0x2(%rax)
   1c9fb:	movb   $0xff,0x3(%rax)
   1c9ff:	add    $0x1,%edi
   1ca02:	add    $0x4,%rax
   1ca06:	cmp    %r9d,%edi
   1ca09:	jb     1c9e8 <gray_extbgrx_convert_internal+0x18>
   1ca0b:	add    $0x1,%edx
   1ca0e:	add    $0x8,%rcx
   1ca12:	add    $0xffffffff,%r8d
   1ca16:	test   %r8d,%r8d
   1ca19:	jns    1ca21 <gray_extbgrx_convert_internal+0x51>
   1ca1b:	mov    -0x8(%rbp),%r15
   1ca1f:	leaveq 
   1ca20:	retq   
   1ca21:	mov    (%rsi),%rax
   1ca24:	mov    %edx,%edi
   1ca26:	mov    (%rax,%rdi,8),%r15
   1ca2a:	mov    (%rcx),%rax
   1ca2d:	mov    %r10,%rdi
   1ca30:	jmp    1ca06 <gray_extbgrx_convert_internal+0x36>
   1ca32:	data16 nopw %cs:0x0(%rax,%rax,1)
   1ca3d:	nopl   (%rax)

000000000001ca40 <rgb_extbgrx_convert_internal>:
   1ca40:	push   %rbp
   1ca41:	mov    %rsp,%rbp
   1ca44:	sub    $0x20,%rsp
   1ca48:	mov    %r12,-0x8(%rbp)
   1ca4c:	mov    %r13,-0x10(%rbp)
   1ca50:	mov    %r14,-0x18(%rbp)
   1ca54:	mov    %r15,-0x20(%rbp)
   1ca58:	mov    0x88(%rdi),%r9d
   1ca5f:	xor    %r10d,%r10d
   1ca62:	jmp    1ca98 <rgb_extbgrx_convert_internal+0x58>
   1ca64:	mov    %edi,%r13d
   1ca67:	movzbl (%r14,%r13,1),%r12d
   1ca6c:	mov    %r12b,0x2(%rax)
   1ca70:	movzbl (%r11,%r13,1),%r12d
   1ca75:	mov    %r12b,0x1(%rax)
   1ca79:	movzbl (%r15,%r13,1),%r12d
   1ca7e:	mov    %r12b,(%rax)
   1ca81:	movb   $0xff,0x3(%rax)
   1ca85:	add    $0x1,%edi
   1ca88:	add    $0x4,%rax
   1ca8c:	cmp    %r9d,%edi
   1ca8f:	jb     1ca64 <rgb_extbgrx_convert_internal+0x24>
   1ca91:	add    $0x1,%edx
   1ca94:	add    $0x8,%rcx
   1ca98:	add    $0xffffffff,%r8d
   1ca9c:	test   %r8d,%r8d
   1ca9f:	jns    1cab3 <rgb_extbgrx_convert_internal+0x73>
   1caa1:	mov    -0x20(%rbp),%r15
   1caa5:	mov    -0x18(%rbp),%r14
   1caa9:	mov    -0x10(%rbp),%r13
   1caad:	mov    -0x8(%rbp),%r12
   1cab1:	leaveq 
   1cab2:	retq   
   1cab3:	mov    (%rsi),%rax
   1cab6:	mov    %edx,%edi
   1cab8:	mov    (%rax,%rdi,8),%r14
   1cabc:	mov    0x8(%rsi),%rax
   1cac0:	mov    (%rax,%rdi,8),%r11
   1cac4:	mov    0x10(%rsi),%rax
   1cac8:	mov    (%rax,%rdi,8),%r15
   1cacc:	mov    (%rcx),%rax
   1cacf:	mov    %r10,%rdi
   1cad2:	jmp    1ca8c <rgb_extbgrx_convert_internal+0x4c>
   1cad4:	data16 nopw %cs:0x0(%rax,%rax,1)
   1cadf:	nop

000000000001cae0 <ycc_extxbgr_convert_internal>:
   1cae0:	push   %rbp
   1cae1:	mov    %rsp,%rbp
   1cae4:	sub    $0x50,%rsp
   1cae8:	mov    %r15,-0x48(%rbp)
   1caec:	mov    %r14,-0x40(%rbp)
   1caf0:	mov    %rsi,-0x18(%rbp)
   1caf4:	mov    %rbx,-0x28(%rbp)
   1caf8:	mov    %r12,-0x30(%rbp)
   1cafc:	mov    %r13,-0x38(%rbp)
   1cb00:	mov    0x88(%rdi),%r13d
   1cb07:	mov    0x1a8(%rdi),%r14
   1cb0e:	mov    0x268(%rdi),%rdi
   1cb15:	mov    0x10(%rdi),%rax
   1cb19:	mov    %rax,-0x10(%rbp)
   1cb1d:	mov    0x18(%rdi),%r11
   1cb21:	mov    0x20(%rdi),%r9
   1cb25:	mov    0x28(%rdi),%r15
   1cb29:	xor    %edi,%edi
   1cb2b:	jmp    1cba3 <ycc_extxbgr_convert_internal+0xc3>
   1cb2d:	mov    %edi,%r8d
   1cb30:	movzbl (%r12,%r8,1),%ecx
   1cb35:	movzbl (%rbx,%r8,1),%edx
   1cb3a:	mov    (%rax,%rdx,4),%eax
   1cb3d:	add    %ecx,%eax
   1cb3f:	movslq %eax,%rax
   1cb42:	movzbl (%rax,%r14,1),%eax
   1cb47:	movzbl (%r10,%r8,1),%r8d
   1cb4c:	mov    %al,0x3(%rsi)
   1cb4f:	mov    (%r9,%rdx,8),%rax
   1cb53:	add    (%r15,%r8,8),%rax
   1cb57:	sar    $0x10,%rax
   1cb5b:	add    %ecx,%eax
   1cb5d:	movslq %eax,%rax
   1cb60:	movzbl (%rax,%r14,1),%eax
   1cb65:	mov    %al,0x2(%rsi)
   1cb68:	add    (%r11,%r8,4),%ecx
   1cb6c:	movslq %ecx,%rax
   1cb6f:	movzbl (%rax,%r14,1),%eax
   1cb74:	mov    %al,0x1(%rsi)
   1cb77:	movb   $0xff,(%rsi)
   1cb7a:	add    $0x1,%edi
   1cb7d:	add    $0x4,%rsi
   1cb81:	mov    -0x10(%rbp),%rax
   1cb85:	cmp    %r13d,%edi
   1cb88:	jb     1cb2d <ycc_extxbgr_convert_internal+0x4d>
   1cb8a:	mov    -0x20(%rbp),%rcx
   1cb8e:	lea    0x1(%rcx),%edx
   1cb91:	mov    -0x8(%rbp),%rcx
   1cb95:	add    $0x8,%rcx
   1cb99:	xor    %edi,%edi
   1cb9b:	mov    -0x50(%rbp),%r8
   1cb9f:	mov    -0x18(%rbp),%rsi
   1cba3:	add    $0xffffffff,%r8d
   1cba7:	test   %r8d,%r8d
   1cbaa:	jns    1cbc2 <ycc_extxbgr_convert_internal+0xe2>
   1cbac:	mov    -0x38(%rbp),%r13
   1cbb0:	mov    -0x30(%rbp),%r12
   1cbb4:	mov    -0x28(%rbp),%rbx
   1cbb8:	mov    -0x40(%rbp),%r14
   1cbbc:	mov    -0x48(%rbp),%r15
   1cbc0:	leaveq 
   1cbc1:	retq   
   1cbc2:	mov    (%rsi),%r10
   1cbc5:	mov    %edx,%ebx
   1cbc7:	mov    (%r10,%rbx,8),%r12
   1cbcb:	mov    0x8(%rsi),%r10
   1cbcf:	mov    (%r10,%rbx,8),%r10
   1cbd3:	mov    0x10(%rsi),%rsi
   1cbd7:	mov    (%rsi,%rbx,8),%rbx
   1cbdb:	mov    (%rcx),%rsi
   1cbde:	mov    %rdx,-0x20(%rbp)
   1cbe2:	mov    %rcx,-0x8(%rbp)
   1cbe6:	mov    %r8,-0x50(%rbp)
   1cbea:	jmp    1cb85 <ycc_extxbgr_convert_internal+0xa5>
   1cbec:	nopl   0x0(%rax)

000000000001cbf0 <gray_extxbgr_convert_internal>:
   1cbf0:	push   %rbp
   1cbf1:	mov    %rsp,%rbp
   1cbf4:	sub    $0x10,%rsp
   1cbf8:	mov    %r15,-0x8(%rbp)
   1cbfc:	mov    0x88(%rdi),%r9d
   1cc03:	xor    %r10d,%r10d
   1cc06:	jmp    1cc32 <gray_extxbgr_convert_internal+0x42>
   1cc08:	mov    %edi,%r11d
   1cc0b:	movzbl (%r15,%r11,1),%r11d
   1cc10:	mov    %r11b,0x1(%rax)
   1cc14:	mov    %r11b,0x2(%rax)
   1cc18:	mov    %r11b,0x3(%rax)
   1cc1c:	movb   $0xff,(%rax)
   1cc1f:	add    $0x1,%edi
   1cc22:	add    $0x4,%rax
   1cc26:	cmp    %r9d,%edi
   1cc29:	jb     1cc08 <gray_extxbgr_convert_internal+0x18>
   1cc2b:	add    $0x1,%edx
   1cc2e:	add    $0x8,%rcx
   1cc32:	add    $0xffffffff,%r8d
   1cc36:	test   %r8d,%r8d
   1cc39:	jns    1cc41 <gray_extxbgr_convert_internal+0x51>
   1cc3b:	mov    -0x8(%rbp),%r15
   1cc3f:	leaveq 
   1cc40:	retq   
   1cc41:	mov    (%rsi),%rax
   1cc44:	mov    %edx,%edi
   1cc46:	mov    (%rax,%rdi,8),%r15
   1cc4a:	mov    (%rcx),%rax
   1cc4d:	mov    %r10,%rdi
   1cc50:	jmp    1cc26 <gray_extxbgr_convert_internal+0x36>
   1cc52:	data16 nopw %cs:0x0(%rax,%rax,1)
   1cc5d:	nopl   (%rax)

000000000001cc60 <rgb_extxbgr_convert_internal>:
   1cc60:	push   %rbp
   1cc61:	mov    %rsp,%rbp
   1cc64:	sub    $0x20,%rsp
   1cc68:	mov    %r12,-0x8(%rbp)
   1cc6c:	mov    %r13,-0x10(%rbp)
   1cc70:	mov    %r14,-0x18(%rbp)
   1cc74:	mov    %r15,-0x20(%rbp)
   1cc78:	mov    0x88(%rdi),%r9d
   1cc7f:	xor    %r10d,%r10d
   1cc82:	jmp    1ccb8 <rgb_extxbgr_convert_internal+0x58>
   1cc84:	mov    %edi,%r13d
   1cc87:	movzbl (%r14,%r13,1),%r12d
   1cc8c:	mov    %r12b,0x3(%rax)
   1cc90:	movzbl (%r11,%r13,1),%r12d
   1cc95:	mov    %r12b,0x2(%rax)
   1cc99:	movzbl (%r15,%r13,1),%r12d
   1cc9e:	mov    %r12b,0x1(%rax)
   1cca2:	movb   $0xff,(%rax)
   1cca5:	add    $0x1,%edi
   1cca8:	add    $0x4,%rax
   1ccac:	cmp    %r9d,%edi
   1ccaf:	jb     1cc84 <rgb_extxbgr_convert_internal+0x24>
   1ccb1:	add    $0x1,%edx
   1ccb4:	add    $0x8,%rcx
   1ccb8:	add    $0xffffffff,%r8d
   1ccbc:	test   %r8d,%r8d
   1ccbf:	jns    1ccd3 <rgb_extxbgr_convert_internal+0x73>
   1ccc1:	mov    -0x20(%rbp),%r15
   1ccc5:	mov    -0x18(%rbp),%r14
   1ccc9:	mov    -0x10(%rbp),%r13
   1cccd:	mov    -0x8(%rbp),%r12
   1ccd1:	leaveq 
   1ccd2:	retq   
   1ccd3:	mov    (%rsi),%rax
   1ccd6:	mov    %edx,%edi
   1ccd8:	mov    (%rax,%rdi,8),%r14
   1ccdc:	mov    0x8(%rsi),%rax
   1cce0:	mov    (%rax,%rdi,8),%r11
   1cce4:	mov    0x10(%rsi),%rax
   1cce8:	mov    (%rax,%rdi,8),%r15
   1ccec:	mov    (%rcx),%rax
   1ccef:	mov    %r10,%rdi
   1ccf2:	jmp    1ccac <rgb_extxbgr_convert_internal+0x4c>
   1ccf4:	data16 nopw %cs:0x0(%rax,%rax,1)
   1ccff:	nop

000000000001cd00 <ycc_extxrgb_convert_internal>:
   1cd00:	push   %rbp
   1cd01:	mov    %rsp,%rbp
   1cd04:	sub    $0x50,%rsp
   1cd08:	mov    %r15,-0x48(%rbp)
   1cd0c:	mov    %r14,-0x40(%rbp)
   1cd10:	mov    %rsi,-0x18(%rbp)
   1cd14:	mov    %rbx,-0x28(%rbp)
   1cd18:	mov    %r12,-0x30(%rbp)
   1cd1c:	mov    %r13,-0x38(%rbp)
   1cd20:	mov    0x88(%rdi),%r13d
   1cd27:	mov    0x1a8(%rdi),%r14
   1cd2e:	mov    0x268(%rdi),%rdi
   1cd35:	mov    0x10(%rdi),%rax
   1cd39:	mov    %rax,-0x10(%rbp)
   1cd3d:	mov    0x18(%rdi),%r11
   1cd41:	mov    0x20(%rdi),%r9
   1cd45:	mov    0x28(%rdi),%r15
   1cd49:	xor    %edi,%edi
   1cd4b:	jmp    1cdc3 <ycc_extxrgb_convert_internal+0xc3>
   1cd4d:	mov    %edi,%r8d
   1cd50:	movzbl (%r12,%r8,1),%ecx
   1cd55:	movzbl (%rbx,%r8,1),%edx
   1cd5a:	mov    (%rax,%rdx,4),%eax
   1cd5d:	add    %ecx,%eax
   1cd5f:	movslq %eax,%rax
   1cd62:	movzbl (%rax,%r14,1),%eax
   1cd67:	movzbl (%r10,%r8,1),%r8d
   1cd6c:	mov    %al,0x1(%rsi)
   1cd6f:	mov    (%r9,%rdx,8),%rax
   1cd73:	add    (%r15,%r8,8),%rax
   1cd77:	sar    $0x10,%rax
   1cd7b:	add    %ecx,%eax
   1cd7d:	movslq %eax,%rax
   1cd80:	movzbl (%rax,%r14,1),%eax
   1cd85:	mov    %al,0x2(%rsi)
   1cd88:	add    (%r11,%r8,4),%ecx
   1cd8c:	movslq %ecx,%rax
   1cd8f:	movzbl (%rax,%r14,1),%eax
   1cd94:	mov    %al,0x3(%rsi)
   1cd97:	movb   $0xff,(%rsi)
   1cd9a:	add    $0x1,%edi
   1cd9d:	add    $0x4,%rsi
   1cda1:	mov    -0x10(%rbp),%rax
   1cda5:	cmp    %r13d,%edi
   1cda8:	jb     1cd4d <ycc_extxrgb_convert_internal+0x4d>
   1cdaa:	mov    -0x20(%rbp),%rcx
   1cdae:	lea    0x1(%rcx),%edx
   1cdb1:	mov    -0x8(%rbp),%rcx
   1cdb5:	add    $0x8,%rcx
   1cdb9:	xor    %edi,%edi
   1cdbb:	mov    -0x50(%rbp),%r8
   1cdbf:	mov    -0x18(%rbp),%rsi
   1cdc3:	add    $0xffffffff,%r8d
   1cdc7:	test   %r8d,%r8d
   1cdca:	jns    1cde2 <ycc_extxrgb_convert_internal+0xe2>
   1cdcc:	mov    -0x38(%rbp),%r13
   1cdd0:	mov    -0x30(%rbp),%r12
   1cdd4:	mov    -0x28(%rbp),%rbx
   1cdd8:	mov    -0x40(%rbp),%r14
   1cddc:	mov    -0x48(%rbp),%r15
   1cde0:	leaveq 
   1cde1:	retq   
   1cde2:	mov    (%rsi),%r10
   1cde5:	mov    %edx,%ebx
   1cde7:	mov    (%r10,%rbx,8),%r12
   1cdeb:	mov    0x8(%rsi),%r10
   1cdef:	mov    (%r10,%rbx,8),%r10
   1cdf3:	mov    0x10(%rsi),%rsi
   1cdf7:	mov    (%rsi,%rbx,8),%rbx
   1cdfb:	mov    (%rcx),%rsi
   1cdfe:	mov    %rdx,-0x20(%rbp)
   1ce02:	mov    %rcx,-0x8(%rbp)
   1ce06:	mov    %r8,-0x50(%rbp)
   1ce0a:	jmp    1cda5 <ycc_extxrgb_convert_internal+0xa5>
   1ce0c:	nopl   0x0(%rax)

000000000001ce10 <gray_extxrgb_convert_internal>:
   1ce10:	push   %rbp
   1ce11:	mov    %rsp,%rbp
   1ce14:	sub    $0x10,%rsp
   1ce18:	mov    %r15,-0x8(%rbp)
   1ce1c:	mov    0x88(%rdi),%r9d
   1ce23:	xor    %r10d,%r10d
   1ce26:	jmp    1ce52 <gray_extxrgb_convert_internal+0x42>
   1ce28:	mov    %edi,%r11d
   1ce2b:	movzbl (%r15,%r11,1),%r11d
   1ce30:	mov    %r11b,0x3(%rax)
   1ce34:	mov    %r11b,0x2(%rax)
   1ce38:	mov    %r11b,0x1(%rax)
   1ce3c:	movb   $0xff,(%rax)
   1ce3f:	add    $0x1,%edi
   1ce42:	add    $0x4,%rax
   1ce46:	cmp    %r9d,%edi
   1ce49:	jb     1ce28 <gray_extxrgb_convert_internal+0x18>
   1ce4b:	add    $0x1,%edx
   1ce4e:	add    $0x8,%rcx
   1ce52:	add    $0xffffffff,%r8d
   1ce56:	test   %r8d,%r8d
   1ce59:	jns    1ce61 <gray_extxrgb_convert_internal+0x51>
   1ce5b:	mov    -0x8(%rbp),%r15
   1ce5f:	leaveq 
   1ce60:	retq   
   1ce61:	mov    (%rsi),%rax
   1ce64:	mov    %edx,%edi
   1ce66:	mov    (%rax,%rdi,8),%r15
   1ce6a:	mov    (%rcx),%rax
   1ce6d:	mov    %r10,%rdi
   1ce70:	jmp    1ce46 <gray_extxrgb_convert_internal+0x36>
   1ce72:	data16 nopw %cs:0x0(%rax,%rax,1)
   1ce7d:	nopl   (%rax)

000000000001ce80 <rgb_extxrgb_convert_internal>:
   1ce80:	push   %rbp
   1ce81:	mov    %rsp,%rbp
   1ce84:	sub    $0x20,%rsp
   1ce88:	mov    %r12,-0x8(%rbp)
   1ce8c:	mov    %r13,-0x10(%rbp)
   1ce90:	mov    %r14,-0x18(%rbp)
   1ce94:	mov    %r15,-0x20(%rbp)
   1ce98:	mov    0x88(%rdi),%r9d
   1ce9f:	xor    %r10d,%r10d
   1cea2:	jmp    1ced8 <rgb_extxrgb_convert_internal+0x58>
   1cea4:	mov    %edi,%r13d
   1cea7:	movzbl (%r14,%r13,1),%r12d
   1ceac:	mov    %r12b,0x1(%rax)
   1ceb0:	movzbl (%r11,%r13,1),%r12d
   1ceb5:	mov    %r12b,0x2(%rax)
   1ceb9:	movzbl (%r15,%r13,1),%r12d
   1cebe:	mov    %r12b,0x3(%rax)
   1cec2:	movb   $0xff,(%rax)
   1cec5:	add    $0x1,%edi
   1cec8:	add    $0x4,%rax
   1cecc:	cmp    %r9d,%edi
   1cecf:	jb     1cea4 <rgb_extxrgb_convert_internal+0x24>
   1ced1:	add    $0x1,%edx
   1ced4:	add    $0x8,%rcx
   1ced8:	add    $0xffffffff,%r8d
   1cedc:	test   %r8d,%r8d
   1cedf:	jns    1cef3 <rgb_extxrgb_convert_internal+0x73>
   1cee1:	mov    -0x20(%rbp),%r15
   1cee5:	mov    -0x18(%rbp),%r14
   1cee9:	mov    -0x10(%rbp),%r13
   1ceed:	mov    -0x8(%rbp),%r12
   1cef1:	leaveq 
   1cef2:	retq   
   1cef3:	mov    (%rsi),%rax
   1cef6:	mov    %edx,%edi
   1cef8:	mov    (%rax,%rdi,8),%r14
   1cefc:	mov    0x8(%rsi),%rax
   1cf00:	mov    (%rax,%rdi,8),%r11
   1cf04:	mov    0x10(%rsi),%rax
   1cf08:	mov    (%rax,%rdi,8),%r15
   1cf0c:	mov    (%rcx),%rax
   1cf0f:	mov    %r10,%rdi
   1cf12:	jmp    1cecc <rgb_extxrgb_convert_internal+0x4c>
   1cf14:	data16 nopw %cs:0x0(%rax,%rax,1)
   1cf1f:	nop

000000000001cf20 <build_ycc_rgb_table>:
   1cf20:	push   %rbp
   1cf21:	mov    %rsp,%rbp
   1cf24:	sub    $0x20,%rsp
   1cf28:	mov    %r12,-0x8(%rbp)
   1cf2c:	mov    %r13,-0x10(%rbp)
   1cf30:	mov    %r14,-0x18(%rbp)
   1cf34:	mov    %r15,-0x20(%rbp)
   1cf38:	mov    0x8(%rdi),%rax
   1cf3c:	mov    (%rax),%rax
   1cf3f:	mov    $0x1,%r13d
   1cf45:	mov    $0x400,%r15d
   1cf4b:	mov    0x268(%rdi),%r14
   1cf52:	mov    %rdi,%r12
   1cf55:	mov    %r13,%rsi
   1cf58:	mov    %r15,%rdx
   1cf5b:	callq  *%rax
   1cf5d:	mov    %rax,0x10(%r14)
   1cf61:	mov    0x8(%r12),%rax
   1cf66:	mov    (%rax),%rax
   1cf69:	mov    %r15,%rdx
   1cf6c:	mov    %r12,%rdi
   1cf6f:	mov    %r13,%rsi
   1cf72:	callq  *%rax
   1cf74:	mov    %rax,0x18(%r14)
   1cf78:	mov    0x8(%r12),%rax
   1cf7d:	mov    (%rax),%rax
   1cf80:	mov    $0x800,%r15d
   1cf86:	mov    %r12,%rdi
   1cf89:	mov    %r13,%rsi
   1cf8c:	mov    %r15,%rdx
   1cf8f:	callq  *%rax
   1cf91:	mov    %rax,0x20(%r14)
   1cf95:	mov    0x8(%r12),%rax
   1cf9a:	mov    (%rax),%rax
   1cf9d:	mov    %r15,%rdx
   1cfa0:	mov    %r13,%rsi
   1cfa3:	mov    %r12,%rdi
   1cfa6:	callq  *%rax
   1cfa8:	mov    %rax,0x28(%r14)
   1cfac:	xor    %eax,%eax
   1cfae:	mov    $0xffffffffffffff80,%rcx
   1cfb5:	jmp    1d024 <build_ycc_rgb_table+0x104>
   1cfb7:	mov    %rcx,%rdx
   1cfba:	imul   $0x166e9,%rdx,%rdx
   1cfc1:	add    $0x8000,%rdx
   1cfc8:	sar    $0x10,%rdx
   1cfcc:	mov    0x10(%r14),%rsi
   1cfd0:	movslq %eax,%rdi
   1cfd3:	mov    %edx,(%rsi,%rdi,4)
   1cfd6:	mov    %rcx,%rdx
   1cfd9:	imul   $0x1c5a2,%rdx,%rdx
   1cfe0:	add    $0x8000,%rdx
   1cfe7:	sar    $0x10,%rdx
   1cfeb:	mov    0x18(%r14),%rsi
   1cfef:	mov    %edx,(%rsi,%rdi,4)
   1cff2:	mov    %rcx,%rsi
   1cff5:	imul   $0xffffffffffff492e,%rsi,%rsi
   1cffc:	mov    0x20(%r14),%rdx
   1d000:	mov    %rsi,(%rdx,%rdi,8)
   1d004:	mov    %rcx,%rdx
   1d007:	imul   $0xffffffffffffa7e6,%rdx,%rdx
   1d00e:	lea    0x8000(%rdx),%rsi
   1d015:	mov    0x28(%r14),%rdx
   1d019:	mov    %rsi,(%rdx,%rdi,8)
   1d01d:	add    $0x1,%eax
   1d020:	add    $0x1,%rcx
   1d024:	cmp    $0xff,%eax
   1d029:	jle    1cfb7 <build_ycc_rgb_table+0x97>
   1d02b:	mov    -0x20(%rbp),%r15
   1d02f:	mov    -0x18(%rbp),%r14
   1d033:	mov    -0x10(%rbp),%r13
   1d037:	mov    -0x8(%rbp),%r12
   1d03b:	leaveq 
   1d03c:	retq   
   1d03d:	nopl   (%rax)

000000000001d040 <ycc_rgb_convert>:
   1d040:	push   %rbp
   1d041:	mov    %rsp,%rbp
   1d044:	mov    0x40(%rdi),%eax
   1d047:	add    $0xfffffffa,%eax
   1d04a:	cmp    $0x9,%eax
   1d04d:	ja     1d066 <ycc_rgb_convert+0x26>
   1d04f:	lea    0x3c71e(%rip),%r9        # 59774 <mybuffer.5+0x5c>
   1d056:	movslq (%r9,%rax,4),%rax
   1d05a:	add    %r9,%rax
   1d05d:	jmpq   *%rax
   1d05f:	callq  1cd00 <ycc_extxrgb_convert_internal>
   1d064:	leaveq 
   1d065:	retq   
   1d066:	callq  1c0a0 <ycc_rgb_convert_internal>
   1d06b:	leaveq 
   1d06c:	retq   
   1d06d:	callq  1c2a0 <ycc_extrgb_convert_internal>
   1d072:	leaveq 
   1d073:	retq   
   1d074:	callq  1c4a0 <ycc_extrgbx_convert_internal>
   1d079:	leaveq 
   1d07a:	retq   
   1d07b:	callq  1c6c0 <ycc_extbgr_convert_internal>
   1d080:	leaveq 
   1d081:	retq   
   1d082:	callq  1c8c0 <ycc_extbgrx_convert_internal>
   1d087:	leaveq 
   1d088:	retq   
   1d089:	callq  1cae0 <ycc_extxbgr_convert_internal>
   1d08e:	leaveq 
   1d08f:	retq   

000000000001d090 <build_rgb_y_table>:
   1d090:	push   %rbp
   1d091:	mov    %rsp,%rbp
   1d094:	sub    $0x10,%rsp
   1d098:	mov    %r15,-0x8(%rbp)
   1d09c:	mov    0x8(%rdi),%rax
   1d0a0:	mov    (%rax),%rax
   1d0a3:	mov    $0x1,%esi
   1d0a8:	mov    $0x1800,%edx
   1d0ad:	mov    0x268(%rdi),%r15
   1d0b4:	callq  *%rax
   1d0b6:	mov    %rax,0x30(%r15)
   1d0ba:	xor    %ecx,%ecx
   1d0bc:	jmp    1d123 <build_rgb_y_table+0x93>
   1d0be:	lea    (%rcx,%rcx,8),%rsi
   1d0c2:	mov    %rsi,%rdx
   1d0c5:	shl    $0x4,%rdx
   1d0c9:	lea    (%rdx,%rcx,8),%rdx
   1d0cd:	add    %rcx,%rdx
   1d0d0:	shl    $0x7,%rdx
   1d0d4:	lea    (%rdx,%rcx,8),%rdx
   1d0d8:	lea    (%rdx,%rcx,2),%rdx
   1d0dc:	add    %rcx,%rdx
   1d0df:	mov    %rdx,(%rax,%rcx,8)
   1d0e3:	lea    (%rcx,%rsi,4),%rdx
   1d0e7:	shl    $0x4,%rdx
   1d0eb:	lea    (%rdx,%rcx,8),%rdx
   1d0ef:	add    %rcx,%rdx
   1d0f2:	shl    $0x6,%rdx
   1d0f6:	lea    (%rdx,%rcx,4),%rdx
   1d0fa:	lea    (%rdx,%rcx,2),%rdx
   1d0fe:	mov    %rdx,0x800(%rax,%rcx,8)
   1d106:	mov    %rcx,%rdx
   1d109:	imul   $0x1d2f,%rdx,%rdx
   1d110:	add    $0x8000,%rdx
   1d117:	mov    %rdx,0x1000(%rax,%rcx,8)
   1d11f:	add    $0x1,%rcx
   1d123:	cmp    $0xff,%rcx
   1d12a:	jle    1d0be <build_rgb_y_table+0x2e>
   1d12c:	mov    -0x8(%rbp),%r15
   1d130:	leaveq 
   1d131:	retq   
   1d132:	data16 nopw %cs:0x0(%rax,%rax,1)
   1d13d:	nopl   (%rax)

000000000001d140 <rgb_gray_convert>:
   1d140:	push   %rbp
   1d141:	mov    %rsp,%rbp
   1d144:	sub    $0x30,%rsp
   1d148:	mov    %rbx,-0x8(%rbp)
   1d14c:	mov    %r12,-0x10(%rbp)
   1d150:	mov    %r13,-0x18(%rbp)
   1d154:	mov    %r14,-0x20(%rbp)
   1d158:	mov    %r15,-0x28(%rbp)
   1d15c:	mov    0x268(%rdi),%rax
   1d163:	mov    0x30(%rax),%r10
   1d167:	mov    0x88(%rdi),%r12d
   1d16e:	xor    %edi,%edi
   1d170:	jmp    1d1ba <rgb_gray_convert+0x7a>
   1d172:	mov    %edi,%ebx
   1d174:	movzbl (%r9,%rbx,1),%eax
   1d179:	add    $0x100,%eax
   1d17e:	movslq %eax,%rax
   1d181:	mov    (%r10,%rax,8),%rax
   1d185:	movzbl (%r14,%rbx,1),%r13d
   1d18a:	add    (%r10,%r13,8),%rax
   1d18e:	movzbl (%r15,%rbx,1),%r13d
   1d193:	add    $0x200,%r13d
   1d19a:	movslq %r13d,%r13
   1d19d:	add    (%r10,%r13,8),%rax
   1d1a1:	sar    $0x10,%rax
   1d1a5:	mov    %al,(%r11,%rbx,1)
   1d1a9:	add    $0x1,%edi
   1d1ac:	cmp    %r12d,%edi
   1d1af:	jb     1d172 <rgb_gray_convert+0x32>
   1d1b1:	add    $0x1,%edx
   1d1b4:	add    $0x8,%rcx
   1d1b8:	xor    %edi,%edi
   1d1ba:	add    $0xffffffff,%r8d
   1d1be:	test   %r8d,%r8d
   1d1c1:	jns    1d1d9 <rgb_gray_convert+0x99>
   1d1c3:	mov    -0x28(%rbp),%r15
   1d1c7:	mov    -0x20(%rbp),%r14
   1d1cb:	mov    -0x18(%rbp),%r13
   1d1cf:	mov    -0x10(%rbp),%r12
   1d1d3:	mov    -0x8(%rbp),%rbx
   1d1d7:	leaveq 
   1d1d8:	retq   
   1d1d9:	mov    (%rsi),%rax
   1d1dc:	mov    %edx,%ebx
   1d1de:	mov    (%rax,%rbx,8),%r14
   1d1e2:	mov    0x8(%rsi),%rax
   1d1e6:	mov    (%rax,%rbx,8),%r9
   1d1ea:	mov    0x10(%rsi),%rax
   1d1ee:	mov    (%rax,%rbx,8),%r15
   1d1f2:	mov    (%rcx),%r11
   1d1f5:	jmp    1d1ac <rgb_gray_convert+0x6c>
   1d1f7:	nopw   0x0(%rax,%rax,1)

000000000001d200 <null_convert>:
   1d200:	push   %rbp
   1d201:	mov    %rsp,%rbp
   1d204:	sub    $0x30,%rsp
   1d208:	mov    %r12,-0x10(%rbp)
   1d20c:	mov    %r13,-0x18(%rbp)
   1d210:	mov    %r14,-0x20(%rbp)
   1d214:	mov    %r15,-0x28(%rbp)
   1d218:	mov    0x88(%rdi),%r15d
   1d21f:	xor    %r14d,%r14d
   1d222:	movslq 0x38(%rdi),%r9
   1d226:	cmp    $0x3,%r9d
   1d22a:	je     1d269 <null_convert+0x69>
   1d22c:	cmp    $0x4,%r9d
   1d230:	je     1d284 <null_convert+0x84>
   1d232:	mov    %rbx,-0x8(%rbp)
   1d236:	jmp    1d2b7 <null_convert+0xb7>
   1d238:	mov    %edi,%r12d
   1d23b:	movzbl (%r10,%r12,1),%r9d
   1d240:	mov    %r9b,(%rax)
   1d243:	movzbl (%r11,%r12,1),%r9d
   1d248:	mov    %r9b,0x1(%rax)
   1d24c:	movzbl 0x0(%r13,%r12,1),%r9d
   1d252:	mov    %r9b,0x2(%rax)
   1d256:	add    $0x1,%edi
   1d259:	add    $0x3,%rax
   1d25d:	cmp    %r15d,%edi
   1d260:	jb     1d238 <null_convert+0x38>
   1d262:	add    $0x1,%edx
   1d265:	add    $0x8,%rcx
   1d269:	add    $0xffffffff,%r8d
   1d26d:	test   %r8d,%r8d
   1d270:	jns    1d2da <null_convert+0xda>
   1d272:	mov    -0x28(%rbp),%r15
   1d276:	mov    -0x20(%rbp),%r14
   1d27a:	mov    -0x18(%rbp),%r13
   1d27e:	mov    -0x10(%rbp),%r12
   1d282:	leaveq 
   1d283:	retq   
   1d284:	mov    %rbx,-0x8(%rbp)
   1d288:	jmpq   1d334 <null_convert+0x134>
   1d28d:	mov    %edi,%r11d
   1d290:	movzbl (%r12,%r11,1),%r11d
   1d295:	mov    %r11b,(%rax,%r13,1)
   1d299:	add    $0x1,%edi
   1d29c:	add    %r9,%rax
   1d29f:	cmp    %edi,%r15d
   1d2a2:	ja     1d28d <null_convert+0x8d>
   1d2a4:	add    $0x1,%ebx
   1d2a7:	cmp    %ebx,%r9d
   1d2aa:	jg     1d353 <null_convert+0x153>
   1d2b0:	add    $0x1,%edx
   1d2b3:	add    $0x8,%rcx
   1d2b7:	add    $0xffffffff,%r8d
   1d2bb:	test   %r8d,%r8d
   1d2be:	jns    1d369 <null_convert+0x169>
   1d2c4:	mov    -0x28(%rbp),%r15
   1d2c8:	mov    -0x20(%rbp),%r14
   1d2cc:	mov    -0x18(%rbp),%r13
   1d2d0:	mov    -0x10(%rbp),%r12
   1d2d4:	mov    -0x8(%rbp),%rbx
   1d2d8:	leaveq 
   1d2d9:	retq   
   1d2da:	mov    (%rsi),%rax
   1d2dd:	mov    %edx,%edi
   1d2df:	mov    (%rax,%rdi,8),%r10
   1d2e3:	mov    0x8(%rsi),%rax
   1d2e7:	mov    (%rax,%rdi,8),%r11
   1d2eb:	mov    0x10(%rsi),%rax
   1d2ef:	mov    (%rax,%rdi,8),%r13
   1d2f3:	mov    (%rcx),%rax
   1d2f6:	mov    %r14,%rdi
   1d2f9:	jmpq   1d25d <null_convert+0x5d>
   1d2fe:	mov    %edi,%r10d
   1d301:	movzbl (%r12,%r10,1),%ebx
   1d306:	mov    %bl,(%rax)
   1d308:	movzbl (%r11,%r10,1),%ebx
   1d30d:	mov    %bl,0x1(%rax)
   1d310:	movzbl 0x0(%r13,%r10,1),%ebx
   1d316:	mov    %bl,0x2(%rax)
   1d319:	movzbl (%r9,%r10,1),%ebx
   1d31e:	mov    %bl,0x3(%rax)
   1d321:	add    $0x1,%edi
   1d324:	add    $0x4,%rax
   1d328:	cmp    %edi,%r15d
   1d32b:	ja     1d2fe <null_convert+0xfe>
   1d32d:	add    $0x1,%edx
   1d330:	add    $0x8,%rcx
   1d334:	add    $0xffffffff,%r8d
   1d338:	test   %r8d,%r8d
   1d33b:	jns    1d374 <null_convert+0x174>
   1d33d:	mov    -0x28(%rbp),%r15
   1d341:	mov    -0x20(%rbp),%r14
   1d345:	mov    -0x18(%rbp),%r13
   1d349:	mov    -0x10(%rbp),%r12
   1d34d:	mov    -0x8(%rbp),%rbx
   1d351:	leaveq 
   1d352:	retq   
   1d353:	movslq %ebx,%r13
   1d356:	mov    (%rsi,%r13,8),%rax
   1d35a:	mov    (%rax,%r10,8),%r12
   1d35e:	mov    (%rcx),%rax
   1d361:	mov    %r14,%rdi
   1d364:	jmpq   1d29f <null_convert+0x9f>
   1d369:	mov    %edx,%r10d
   1d36c:	mov    %r14,%rbx
   1d36f:	jmpq   1d2a7 <null_convert+0xa7>
   1d374:	mov    (%rsi),%rdi
   1d377:	mov    %edx,%eax
   1d379:	mov    (%rdi,%rax,8),%r12
   1d37d:	mov    0x8(%rsi),%rdi
   1d381:	mov    (%rdi,%rax,8),%r11
   1d385:	mov    0x10(%rsi),%rdi
   1d389:	mov    (%rdi,%rax,8),%r13
   1d38d:	mov    0x18(%rsi),%rdi
   1d391:	mov    (%rdi,%rax,8),%r9
   1d395:	mov    (%rcx),%rax
   1d398:	mov    %r14,%rdi
   1d39b:	jmp    1d328 <null_convert+0x128>
   1d39d:	nopl   (%rax)

000000000001d3a0 <grayscale_convert>:
   1d3a0:	push   %rbp
   1d3a1:	mov    %rsp,%rbp
   1d3a4:	mov    (%rsi),%rsi
   1d3a7:	xor    %eax,%eax
   1d3a9:	mov    0x88(%rdi),%r9d
   1d3b0:	mov    %rsi,%rdi
   1d3b3:	mov    %rdx,%rsi
   1d3b6:	mov    %rcx,%rdx
   1d3b9:	mov    %rax,%rcx
   1d3bc:	callq  43f0 <jcopy_sample_rows@plt>
   1d3c1:	leaveq 
   1d3c2:	retq   
   1d3c3:	data16 nopw %cs:0x0(%rax,%rax,1)
   1d3ce:	xchg   %ax,%ax

000000000001d3d0 <gray_rgb_convert>:
   1d3d0:	push   %rbp
   1d3d1:	mov    %rsp,%rbp
   1d3d4:	mov    0x40(%rdi),%eax
   1d3d7:	add    $0xfffffffa,%eax
   1d3da:	cmp    $0x9,%eax
   1d3dd:	ja     1d3f6 <gray_rgb_convert+0x26>
   1d3df:	lea    0x3c3b6(%rip),%r9        # 5979c <mybuffer.5+0x84>
   1d3e6:	movslq (%r9,%rax,4),%rax
   1d3ea:	add    %r9,%rax
   1d3ed:	jmpq   *%rax
   1d3ef:	callq  1ce10 <gray_extxrgb_convert_internal>
   1d3f4:	leaveq 
   1d3f5:	retq   
   1d3f6:	callq  1c1b0 <gray_rgb_convert_internal>
   1d3fb:	leaveq 
   1d3fc:	retq   
   1d3fd:	callq  1c3b0 <gray_extrgb_convert_internal>
   1d402:	leaveq 
   1d403:	retq   
   1d404:	callq  1c5b0 <gray_extrgbx_convert_internal>
   1d409:	leaveq 
   1d40a:	retq   
   1d40b:	callq  1c7d0 <gray_extbgr_convert_internal>
   1d410:	leaveq 
   1d411:	retq   
   1d412:	callq  1c9d0 <gray_extbgrx_convert_internal>
   1d417:	leaveq 
   1d418:	retq   
   1d419:	callq  1cbf0 <gray_extxbgr_convert_internal>
   1d41e:	leaveq 
   1d41f:	retq   

000000000001d420 <rgb_rgb_convert>:
   1d420:	push   %rbp
   1d421:	mov    %rsp,%rbp
   1d424:	mov    0x40(%rdi),%eax
   1d427:	add    $0xfffffffa,%eax
   1d42a:	cmp    $0x9,%eax
   1d42d:	ja     1d446 <rgb_rgb_convert+0x26>
   1d42f:	lea    0x3c38e(%rip),%r9        # 597c4 <mybuffer.5+0xac>
   1d436:	movslq (%r9,%rax,4),%rax
   1d43a:	add    %r9,%rax
   1d43d:	jmpq   *%rax
   1d43f:	callq  1ce80 <rgb_extxrgb_convert_internal>
   1d444:	leaveq 
   1d445:	retq   
   1d446:	callq  1c210 <rgb_rgb_convert_internal>
   1d44b:	leaveq 
   1d44c:	retq   
   1d44d:	callq  1c410 <rgb_extrgb_convert_internal>
   1d452:	leaveq 
   1d453:	retq   
   1d454:	callq  1c620 <rgb_extrgbx_convert_internal>
   1d459:	leaveq 
   1d45a:	retq   
   1d45b:	callq  1c830 <rgb_extbgr_convert_internal>
   1d460:	leaveq 
   1d461:	retq   
   1d462:	callq  1ca40 <rgb_extbgrx_convert_internal>
   1d467:	leaveq 
   1d468:	retq   
   1d469:	callq  1cc60 <rgb_extxbgr_convert_internal>
   1d46e:	leaveq 
   1d46f:	retq   

000000000001d470 <ycck_cmyk_convert>:
   1d470:	push   %rbp
   1d471:	mov    %rsp,%rbp
   1d474:	sub    $0x60,%rsp
   1d478:	mov    %r15,-0x58(%rbp)
   1d47c:	mov    %r14,-0x50(%rbp)
   1d480:	mov    %r13,-0x48(%rbp)
   1d484:	mov    %rsi,-0x28(%rbp)
   1d488:	mov    %rbx,-0x38(%rbp)
   1d48c:	mov    %r12,-0x40(%rbp)
   1d490:	mov    0x88(%rdi),%r12d
   1d497:	mov    0x1a8(%rdi),%r14
   1d49e:	mov    0x268(%rdi),%rdi
   1d4a5:	mov    0x10(%rdi),%rax
   1d4a9:	mov    %rax,-0x18(%rbp)
   1d4ad:	mov    0x18(%rdi),%r9
   1d4b1:	mov    0x20(%rdi),%r15
   1d4b5:	mov    0x28(%rdi),%r13
   1d4b9:	xor    %edi,%edi
   1d4bb:	jmpq   1d557 <ycck_cmyk_convert+0xe7>
   1d4c0:	mov    %edi,%r10d
   1d4c3:	movzbl (%rbx,%r10,1),%ecx
   1d4c8:	movzbl (%rdx,%r10,1),%ebx
   1d4cd:	mov    %rcx,%rdx
   1d4d0:	add    (%rax,%rbx,4),%edx
   1d4d3:	mov    $0xff,%eax
   1d4d8:	sub    %edx,%eax
   1d4da:	movslq %eax,%rax
   1d4dd:	movzbl (%rax,%r14,1),%eax
   1d4e2:	movzbl (%r8,%r10,1),%edx
   1d4e7:	mov    %al,(%rsi)
   1d4e9:	mov    (%r15,%rbx,8),%rax
   1d4ed:	add    0x0(%r13,%rdx,8),%rax
   1d4f2:	sar    $0x10,%rax
   1d4f6:	lea    (%rax,%rcx,1),%ebx
   1d4f9:	mov    $0xff,%eax
   1d4fe:	neg    %ebx
   1d500:	add    %eax,%ebx
   1d502:	movslq %ebx,%rbx
   1d505:	movzbl (%rbx,%r14,1),%ebx
   1d50a:	mov    %bl,0x1(%rsi)
   1d50d:	add    (%r9,%rdx,4),%ecx
   1d511:	sub    %ecx,%eax
   1d513:	movslq %eax,%rax
   1d516:	movzbl (%rax,%r14,1),%eax
   1d51b:	mov    %al,0x2(%rsi)
   1d51e:	movzbl (%r11,%r10,1),%eax
   1d523:	mov    %al,0x3(%rsi)
   1d526:	add    $0x1,%edi
   1d529:	add    $0x4,%rsi
   1d52d:	mov    -0x10(%rbp),%rbx
   1d531:	mov    -0x18(%rbp),%rax
   1d535:	mov    -0x20(%rbp),%rdx
   1d539:	cmp    %r12d,%edi
   1d53c:	jb     1d4c0 <ycck_cmyk_convert+0x50>
   1d53e:	mov    -0x30(%rbp),%rcx
   1d542:	lea    0x1(%rcx),%edx
   1d545:	mov    -0x8(%rbp),%rcx
   1d549:	add    $0x8,%rcx
   1d54d:	xor    %edi,%edi
   1d54f:	mov    -0x28(%rbp),%rsi
   1d553:	mov    -0x60(%rbp),%r8
   1d557:	add    $0xffffffff,%r8d
   1d55b:	test   %r8d,%r8d
   1d55e:	jns    1d576 <ycck_cmyk_convert+0x106>
   1d560:	mov    -0x40(%rbp),%r12
   1d564:	mov    -0x38(%rbp),%rbx
   1d568:	mov    -0x48(%rbp),%r13
   1d56c:	mov    -0x50(%rbp),%r14
   1d570:	mov    -0x58(%rbp),%r15
   1d574:	leaveq 
   1d575:	retq   
   1d576:	mov    (%rsi),%rbx
   1d579:	mov    %edx,%r10d
   1d57c:	mov    (%rbx,%r10,8),%rbx
   1d580:	mov    %r8,-0x60(%rbp)
   1d584:	mov    %rbx,-0x10(%rbp)
   1d588:	mov    0x8(%rsi),%r8
   1d58c:	mov    (%r8,%r10,8),%r8
   1d590:	mov    %rdx,-0x30(%rbp)
   1d594:	mov    0x10(%rsi),%rdx
   1d598:	mov    (%rdx,%r10,8),%rdx
   1d59c:	mov    %rdx,-0x20(%rbp)
   1d5a0:	mov    0x18(%rsi),%rsi
   1d5a4:	mov    (%rsi,%r10,8),%r11
   1d5a8:	mov    (%rcx),%rsi
   1d5ab:	mov    %rcx,-0x8(%rbp)
   1d5af:	jmp    1d539 <ycck_cmyk_convert+0xc9>
   1d5b1:	data16 nopw %cs:0x0(%rax,%rax,1)
   1d5bc:	nopl   0x0(%rax)

000000000001d5c0 <is_big_endian>:
   1d5c0:	push   %rbp
   1d5c1:	mov    %rsp,%rbp
   1d5c4:	xor    %eax,%eax
   1d5c6:	leaveq 
   1d5c7:	retq   
   1d5c8:	nopl   0x0(%rax,%rax,1)

000000000001d5d0 <ycc_rgb565_convert_le>:
   1d5d0:	push   %rbp
   1d5d1:	mov    %rsp,%rbp
   1d5d4:	sub    $0x60,%rsp
   1d5d8:	mov    %r15,-0x28(%rbp)
   1d5dc:	mov    %r14,-0x20(%rbp)
   1d5e0:	mov    %rsi,-0x40(%rbp)
   1d5e4:	mov    %rbx,-0x8(%rbp)
   1d5e8:	mov    %r12,-0x10(%rbp)
   1d5ec:	mov    %r13,-0x18(%rbp)
   1d5f0:	mov    0x88(%rdi),%ebx
   1d5f6:	mov    0x1a8(%rdi),%r15
   1d5fd:	mov    0x268(%rdi),%rax
   1d604:	mov    0x10(%rax),%r14
   1d608:	mov    0x18(%rax),%r12
   1d60c:	mov    0x20(%rax),%r9
   1d610:	mov    %r9,-0x38(%rbp)
   1d614:	mov    0x28(%rax),%r13
   1d618:	xor    %edi,%edi
   1d61a:	jmpq   1d721 <ycc_rgb565_convert_le+0x151>
   1d61f:	movzbl (%r11),%ecx
   1d623:	movzbl (%r10),%edx
   1d627:	mov    %rcx,%rax
   1d62a:	add    (%r14,%rdx,4),%eax
   1d62e:	movslq %eax,%rax
   1d631:	movzbl (%rax,%r15,1),%eax
   1d636:	and    $0xf8,%eax
   1d63b:	shl    $0x8,%eax
   1d63e:	mov    (%r9,%rdx,8),%rdx
   1d642:	mov    %rbx,-0x58(%rbp)
   1d646:	movzbl (%r8),%ebx
   1d64a:	add    0x0(%r13,%rbx,8),%rdx
   1d64f:	sar    $0x10,%rdx
   1d653:	add    %ecx,%edx
   1d655:	movslq %edx,%rdx
   1d658:	movzbl (%rdx,%r15,1),%edx
   1d65d:	and    $0xfc,%edx
   1d663:	lea    (%rax,%rdx,8),%edx
   1d666:	add    (%r12,%rbx,4),%ecx
   1d66a:	movslq %ecx,%rax
   1d66d:	movzbl (%r15,%rax,1),%eax
   1d672:	shr    $0x3,%eax
   1d675:	lea    (%rdx,%rax,1),%ebx
   1d678:	movzbl 0x1(%r11),%edx
   1d67d:	movzbl 0x1(%r10),%ecx
   1d682:	mov    %rdx,%rax
   1d685:	add    (%r14,%rcx,4),%eax
   1d689:	movslq %eax,%rax
   1d68c:	movzbl (%r15,%rax,1),%eax
   1d691:	and    $0xf8,%eax
   1d696:	shl    $0x8,%eax
   1d699:	mov    (%r9,%rcx,8),%rcx
   1d69d:	movzbl 0x1(%r8),%r9d
   1d6a2:	add    0x0(%r13,%r9,8),%rcx
   1d6a7:	sar    $0x10,%rcx
   1d6ab:	add    %edx,%ecx
   1d6ad:	movslq %ecx,%rcx
   1d6b0:	movzbl (%r15,%rcx,1),%ecx
   1d6b5:	and    $0xfc,%ecx
   1d6bb:	lea    (%rax,%rcx,8),%ecx
   1d6be:	add    (%r12,%r9,4),%edx
   1d6c2:	movslq %edx,%rax
   1d6c5:	movzbl (%r15,%rax,1),%eax
   1d6ca:	shr    $0x3,%eax
   1d6cd:	add    %ecx,%eax
   1d6cf:	shl    $0x10,%eax
   1d6d2:	add    %ebx,%eax
   1d6d4:	mov    %eax,(%rsi)
   1d6d6:	add    $0x2,%r11
   1d6da:	add    $0x2,%r10
   1d6de:	add    $0x2,%r8
   1d6e2:	add    $0x4,%rsi
   1d6e6:	add    $0x1,%edi
   1d6e9:	mov    -0x38(%rbp),%r9
   1d6ed:	mov    -0x58(%rbp),%rbx
   1d6f1:	mov    %rbx,%rax
   1d6f4:	shr    %eax
   1d6f6:	cmp    %edi,%eax
   1d6f8:	ja     1d61f <ycc_rgb565_convert_le+0x4f>
   1d6fe:	mov    -0x48(%rbp),%rax
   1d702:	lea    0x1(%rax),%edx
   1d705:	mov    -0x30(%rbp),%rax
   1d709:	lea    0x8(%rax),%rcx
   1d70d:	mov    %rbx,%rax
   1d710:	and    $0x1,%eax
   1d713:	test   %eax,%eax
   1d715:	jne    1d73f <ycc_rgb565_convert_le+0x16f>
   1d717:	xor    %edi,%edi
   1d719:	mov    -0x50(%rbp),%r8
   1d71d:	mov    -0x40(%rbp),%rsi
   1d721:	lea    -0x1(%r8),%eax
   1d725:	test   %eax,%eax
   1d727:	jns    1d7a1 <ycc_rgb565_convert_le+0x1d1>
   1d729:	mov    -0x18(%rbp),%r13
   1d72d:	mov    -0x10(%rbp),%r12
   1d731:	mov    -0x8(%rbp),%rbx
   1d735:	mov    -0x20(%rbp),%r14
   1d739:	mov    -0x28(%rbp),%r15
   1d73d:	leaveq 
   1d73e:	retq   
   1d73f:	movzbl (%r11),%r11d
   1d743:	movzbl (%r10),%r10d
   1d747:	mov    %r11,%rax
   1d74a:	add    (%r14,%r10,4),%eax
   1d74e:	movslq %eax,%rax
   1d751:	movzbl (%r15,%rax,1),%edi
   1d756:	and    $0xf8,%di
   1d75b:	shl    $0x8,%edi
   1d75e:	mov    (%r9,%r10,8),%rax
   1d762:	movzbl (%r8),%r8d
   1d766:	add    0x0(%r13,%r8,8),%rax
   1d76b:	sar    $0x10,%rax
   1d76f:	add    %r11d,%eax
   1d772:	movslq %eax,%rax
   1d775:	movzbl (%r15,%rax,1),%eax
   1d77a:	and    $0xfc,%ax
   1d77e:	lea    (%rdi,%rax,8),%edi
   1d781:	add    (%r12,%r8,4),%r11d
   1d785:	movslq %r11d,%rax
   1d788:	movzbl (%r15,%rax,1),%eax
   1d78d:	shr    $0x3,%eax
   1d790:	add    %edi,%eax
   1d792:	mov    %ax,(%rsi)
   1d795:	xor    %edi,%edi
   1d797:	mov    -0x50(%rbp),%r8
   1d79b:	mov    -0x40(%rbp),%rsi
   1d79f:	jmp    1d721 <ycc_rgb565_convert_le+0x151>
   1d7a1:	mov    (%rsi),%r8
   1d7a4:	mov    %edx,%r10d
   1d7a7:	mov    (%r8,%r10,8),%r11
   1d7ab:	mov    0x8(%rsi),%r8
   1d7af:	mov    (%r8,%r10,8),%r8
   1d7b3:	mov    0x10(%rsi),%rsi
   1d7b7:	mov    (%rsi,%r10,8),%r10
   1d7bb:	mov    (%rcx),%rsi
   1d7be:	mov    %rax,-0x50(%rbp)
   1d7c2:	mov    %rsi,%rax
   1d7c5:	and    $0x3,%rax
   1d7c9:	test   %rax,%rax
   1d7cc:	jne    1d7db <ycc_rgb565_convert_le+0x20b>
   1d7ce:	mov    %rcx,-0x30(%rbp)
   1d7d2:	mov    %rdx,-0x48(%rbp)
   1d7d6:	jmpq   1d6f1 <ycc_rgb565_convert_le+0x121>
   1d7db:	movzbl (%r11),%edi
   1d7df:	mov    %rcx,-0x30(%rbp)
   1d7e3:	movzbl (%r10),%ecx
   1d7e7:	mov    %rdx,-0x48(%rbp)
   1d7eb:	mov    %rdi,%rax
   1d7ee:	add    (%r14,%rcx,4),%eax
   1d7f2:	movslq %eax,%rax
   1d7f5:	movzbl (%r15,%rax,1),%eax
   1d7fa:	and    $0xf8,%ax
   1d7fe:	shl    $0x8,%eax
   1d801:	mov    (%r9,%rcx,8),%rcx
   1d805:	movzbl (%r8),%edx
   1d809:	add    0x0(%r13,%rdx,8),%rcx
   1d80e:	sar    $0x10,%rcx
   1d812:	add    %edi,%ecx
   1d814:	movslq %ecx,%rcx
   1d817:	movzbl (%r15,%rcx,1),%ecx
   1d81c:	and    $0xfc,%cx
   1d821:	lea    (%rax,%rcx,8),%ecx
   1d824:	add    (%r12,%rdx,4),%edi
   1d828:	movslq %edi,%rax
   1d82b:	movzbl (%r15,%rax,1),%eax
   1d830:	shr    $0x3,%eax
   1d833:	add    %ecx,%eax
   1d835:	mov    %ax,(%rsi)
   1d838:	add    $0x1,%r11
   1d83c:	add    $0x1,%r10
   1d840:	add    $0x1,%r8
   1d844:	add    $0x2,%rsi
   1d848:	add    $0xffffffff,%ebx
   1d84b:	xor    %edi,%edi
   1d84d:	jmpq   1d6f1 <ycc_rgb565_convert_le+0x121>
   1d852:	data16 nopw %cs:0x0(%rax,%rax,1)
   1d85d:	nopl   (%rax)

000000000001d860 <ycc_rgb565D_convert_le>:
   1d860:	push   %rbp
   1d861:	mov    %rsp,%rbp
   1d864:	sub    $0x80,%rsp
   1d86b:	mov    %r15,-0x28(%rbp)
   1d86f:	mov    %r14,-0x20(%rbp)
   1d873:	mov    %r13,-0x18(%rbp)
   1d877:	mov    %r12,-0x10(%rbp)
   1d87b:	mov    %rsi,-0x58(%rbp)
   1d87f:	mov    %rbx,-0x8(%rbp)
   1d883:	mov    0x88(%rdi),%ebx
   1d889:	mov    0x1a8(%rdi),%r15
   1d890:	mov    0x268(%rdi),%rax
   1d897:	mov    0x10(%rax),%r12
   1d89b:	mov    %r12,-0x40(%rbp)
   1d89f:	mov    0x18(%rax),%r14
   1d8a3:	mov    0x20(%rax),%r9
   1d8a7:	mov    %r9,-0x48(%rbp)
   1d8ab:	mov    0x28(%rax),%r10
   1d8af:	mov    %r10,-0x50(%rbp)
   1d8b3:	lea    0x3c046(%rip),%r11        # 59900 <dither_matrix>
   1d8ba:	mov    0xa8(%rdi),%eax
   1d8c0:	and    $0x3,%eax
   1d8c3:	mov    %eax,%eax
   1d8c5:	mov    (%r11,%rax,8),%rax
   1d8c9:	mov    %rdx,%r13
   1d8cc:	mov    %rcx,%rdx
   1d8cf:	xor    %edi,%edi
   1d8d1:	jmpq   1da42 <ycc_rgb565D_convert_le+0x1e2>
   1d8d6:	movzbl (%r8),%r13d
   1d8da:	movzbl (%rsi),%edx
   1d8dd:	mov    %rbx,-0x70(%rbp)
   1d8e1:	mov    %r13,%rbx
   1d8e4:	add    (%r12,%rdx,4),%ebx
   1d8e8:	movslq %ebx,%rbx
   1d8eb:	mov    %rdi,-0x78(%rbp)
   1d8ef:	movzbl %al,%edi
   1d8f2:	mov    %rcx,-0x38(%rbp)
   1d8f6:	lea    (%r15,%rdi,1),%rcx
   1d8fa:	movzbl (%rcx,%rbx,1),%ecx
   1d8fe:	and    $0xf8,%ecx
   1d904:	shl    $0x8,%ecx
   1d907:	mov    (%r9,%rdx,8),%rdx
   1d90b:	movzbl (%r11),%ebx
   1d90f:	add    (%r10,%rbx,8),%rdx
   1d913:	sar    $0x10,%rdx
   1d917:	add    %r13d,%edx
   1d91a:	movslq %edx,%r10
   1d91d:	mov    %rax,%rdx
   1d920:	and    $0xfe,%rdx
   1d927:	shr    %rdx
   1d92a:	add    %r15,%rdx
   1d92d:	movzbl (%rdx,%r10,1),%edx
   1d932:	and    $0xfc,%edx
   1d938:	lea    (%rcx,%rdx,8),%edx
   1d93b:	add    (%r14,%rbx,4),%r13d
   1d93f:	movslq %r13d,%rcx
   1d942:	add    %r15,%rcx
   1d945:	movzbl (%rcx,%rdi,1),%ecx
   1d949:	shr    $0x3,%ecx
   1d94c:	lea    (%rdx,%rcx,1),%r13d
   1d950:	movzbl 0x1(%r8),%ebx
   1d955:	movzbl 0x1(%rsi),%r10d
   1d95a:	mov    %rbx,%rcx
   1d95d:	add    (%r12,%r10,4),%ecx
   1d961:	movslq %ecx,%rcx
   1d964:	mov    $0xffffff00,%edx
   1d969:	and    %rdx,%rax
   1d96c:	shr    $0x8,%rax
   1d970:	shl    $0x18,%rdi
   1d974:	lea    (%rdi,%rax,1),%rdx
   1d978:	movzbl %dl,%edi
   1d97b:	lea    (%r15,%rdi,1),%rax
   1d97f:	movzbl (%rax,%rcx,1),%eax
   1d983:	and    $0xf8,%eax
   1d988:	shl    $0x8,%eax
   1d98b:	mov    (%r9,%r10,8),%rcx
   1d98f:	movzbl 0x1(%r11),%r10d
   1d994:	mov    -0x50(%rbp),%r9
   1d998:	add    (%r9,%r10,8),%rcx
   1d99c:	sar    $0x10,%rcx
   1d9a0:	add    %ebx,%ecx
   1d9a2:	movslq %ecx,%r9
   1d9a5:	mov    %rdx,%rcx
   1d9a8:	and    $0xfe,%rcx
   1d9af:	shr    %rcx
   1d9b2:	add    %r15,%rcx
   1d9b5:	movzbl (%rcx,%r9,1),%ecx
   1d9ba:	and    $0xfc,%ecx
   1d9c0:	lea    (%rax,%rcx,8),%ecx
   1d9c3:	add    (%r14,%r10,4),%ebx
   1d9c7:	movslq %ebx,%rax
   1d9ca:	add    %r15,%rax
   1d9cd:	movzbl (%rax,%rdi,1),%eax
   1d9d1:	shr    $0x3,%eax
   1d9d4:	add    %ecx,%eax
   1d9d6:	shl    $0x10,%eax
   1d9d9:	add    %r13d,%eax
   1d9dc:	mov    -0x38(%rbp),%rcx
   1d9e0:	mov    %eax,(%rcx)
   1d9e2:	shr    $0x8,%rdx
   1d9e6:	shl    $0x18,%rdi
   1d9ea:	lea    (%rdx,%rdi,1),%rax
   1d9ee:	add    $0x2,%r8
   1d9f2:	add    $0x2,%rsi
   1d9f6:	add    $0x2,%r11
   1d9fa:	add    $0x4,%rcx
   1d9fe:	mov    -0x78(%rbp),%rdx
   1da02:	lea    0x1(%rdx),%edi
   1da05:	mov    -0x48(%rbp),%r9
   1da09:	mov    -0x70(%rbp),%rbx
   1da0d:	mov    -0x50(%rbp),%r10
   1da11:	mov    %rbx,%rdx
   1da14:	shr    %edx
   1da16:	cmp    %edi,%edx
   1da18:	ja     1d8d6 <ycc_rgb565D_convert_le+0x76>
   1da1e:	mov    -0x60(%rbp),%rdx
   1da22:	lea    0x1(%rdx),%r13d
   1da26:	mov    -0x30(%rbp),%rdx
   1da2a:	add    $0x8,%rdx
   1da2e:	mov    %rbx,%rdi
   1da31:	and    $0x1,%edi
   1da34:	test   %edi,%edi
   1da36:	jne    1da64 <ycc_rgb565D_convert_le+0x204>
   1da38:	xor    %edi,%edi
   1da3a:	mov    -0x58(%rbp),%rsi
   1da3e:	mov    -0x68(%rbp),%r8
   1da42:	lea    -0x1(%r8),%ecx
   1da46:	test   %ecx,%ecx
   1da48:	jns    1daee <ycc_rgb565D_convert_le+0x28e>
   1da4e:	mov    -0x8(%rbp),%rbx
   1da52:	mov    -0x10(%rbp),%r12
   1da56:	mov    -0x18(%rbp),%r13
   1da5a:	mov    -0x20(%rbp),%r14
   1da5e:	mov    -0x28(%rbp),%r15
   1da62:	leaveq 
   1da63:	retq   
   1da64:	movzbl (%r8),%edi
   1da68:	movzbl (%rsi),%r8d
   1da6c:	mov    %rdi,%rsi
   1da6f:	add    (%r12,%r8,4),%esi
   1da73:	movslq %esi,%rsi
   1da76:	movzbl %al,%r12d
   1da7a:	mov    %rdx,-0x78(%rbp)
   1da7e:	lea    (%r15,%r12,1),%rdx
   1da82:	movzbl (%rdx,%rsi,1),%esi
   1da86:	and    $0xf8,%si
   1da8b:	shl    $0x8,%esi
   1da8e:	mov    (%r9,%r8,8),%rdx
   1da92:	movzbl (%r11),%r11d
   1da96:	add    (%r10,%r11,8),%rdx
   1da9a:	sar    $0x10,%rdx
   1da9e:	add    %edi,%edx
   1daa0:	movslq %edx,%r8
   1daa3:	mov    %rax,%rdx
   1daa6:	and    $0xfe,%rdx
   1daad:	shr    %rdx
   1dab0:	add    %r15,%rdx
   1dab3:	movzbl (%rdx,%r8,1),%edx
   1dab8:	and    $0xfc,%dx
   1dabd:	lea    (%rsi,%rdx,8),%esi
   1dac0:	add    (%r14,%r11,4),%edi
   1dac4:	movslq %edi,%rdx
   1dac7:	add    %r15,%rdx
   1daca:	movzbl (%r12,%rdx,1),%edx
   1dacf:	shr    $0x3,%edx
   1dad2:	add    %esi,%edx
   1dad4:	mov    %dx,(%rcx)
   1dad7:	mov    -0x78(%rbp),%rdx
   1dadb:	mov    -0x40(%rbp),%r12
   1dadf:	xor    %edi,%edi
   1dae1:	mov    -0x58(%rbp),%rsi
   1dae5:	mov    -0x68(%rbp),%r8
   1dae9:	jmpq   1da42 <ycc_rgb565D_convert_le+0x1e2>
   1daee:	mov    (%rsi),%r8
   1daf1:	mov    %rcx,-0x68(%rbp)
   1daf5:	mov    %r13d,%ecx
   1daf8:	mov    (%r8,%rcx,8),%r8
   1dafc:	mov    %r13,-0x60(%rbp)
   1db00:	mov    0x8(%rsi),%r11
   1db04:	mov    (%r11,%rcx,8),%r11
   1db08:	mov    0x10(%rsi),%rsi
   1db0c:	mov    (%rsi,%rcx,8),%rsi
   1db10:	mov    (%rdx),%rcx
   1db13:	mov    %rdx,-0x30(%rbp)
   1db17:	mov    %rcx,%rdx
   1db1a:	and    $0x3,%rdx
   1db1e:	test   %rdx,%rdx
   1db21:	je     1da11 <ycc_rgb565D_convert_le+0x1b1>
   1db27:	movzbl (%r8),%r13d
   1db2b:	movzbl (%rsi),%edx
   1db2e:	mov    %r13,%rdi
   1db31:	add    (%r12,%rdx,4),%edi
   1db35:	movslq %edi,%rdi
   1db38:	movzbl %al,%r12d
   1db3c:	mov    %rbx,-0x78(%rbp)
   1db40:	lea    (%r15,%r12,1),%rbx
   1db44:	movzbl (%rbx,%rdi,1),%edi
   1db48:	and    $0xf8,%di
   1db4d:	shl    $0x8,%edi
   1db50:	mov    (%r9,%rdx,8),%rdx
   1db54:	movzbl (%r11),%ebx
   1db58:	add    (%r10,%rbx,8),%rdx
   1db5c:	sar    $0x10,%rdx
   1db60:	add    %r13d,%edx
   1db63:	movslq %edx,%r10
   1db66:	mov    %rax,%rdx
   1db69:	and    $0xfe,%rdx
   1db70:	shr    %rdx
   1db73:	add    %r15,%rdx
   1db76:	movzbl (%rdx,%r10,1),%edx
   1db7b:	and    $0xfc,%dx
   1db80:	lea    (%rdi,%rdx,8),%edi
   1db83:	add    (%r14,%rbx,4),%r13d
   1db87:	movslq %r13d,%rdx
   1db8a:	add    %r15,%rdx
   1db8d:	movzbl (%r12,%rdx,1),%edx
   1db92:	shr    $0x3,%edx
   1db95:	add    %edi,%edx
   1db97:	mov    %dx,(%rcx)
   1db9a:	add    $0x1,%r8
   1db9e:	add    $0x1,%rsi
   1dba2:	add    $0x1,%r11
   1dba6:	add    $0x2,%rcx
   1dbaa:	mov    -0x78(%rbp),%rdx
   1dbae:	lea    -0x1(%rdx),%ebx
   1dbb1:	mov    -0x50(%rbp),%r10
   1dbb5:	mov    -0x40(%rbp),%r12
   1dbb9:	xor    %edi,%edi
   1dbbb:	jmpq   1da11 <ycc_rgb565D_convert_le+0x1b1>

000000000001dbc0 <rgb_rgb565_convert_le>:
   1dbc0:	push   %rbp
   1dbc1:	mov    %rsp,%rbp
   1dbc4:	sub    $0x30,%rsp
   1dbc8:	mov    %rbx,-0x8(%rbp)
   1dbcc:	mov    %r12,-0x10(%rbp)
   1dbd0:	mov    %r13,-0x18(%rbp)
   1dbd4:	mov    %r14,-0x20(%rbp)
   1dbd8:	mov    %r15,-0x28(%rbp)
   1dbdc:	mov    0x88(%rdi),%r13d
   1dbe3:	xor    %r14d,%r14d
   1dbe6:	jmpq   1dc8f <rgb_rgb565_convert_le+0xcf>
   1dbeb:	movzbl (%rdi),%eax
   1dbee:	and    $0xf8,%eax
   1dbf3:	shl    $0x8,%eax
   1dbf6:	movzbl (%r10),%r11d
   1dbfa:	and    $0xfc,%r11d
   1dc01:	lea    (%rax,%r11,8),%r11d
   1dc05:	movzbl (%rbx),%eax
   1dc08:	shr    $0x3,%eax
   1dc0b:	lea    (%r11,%rax,1),%r15d
   1dc0f:	movzbl 0x1(%rdi),%eax
   1dc13:	and    $0xf8,%eax
   1dc18:	shl    $0x8,%eax
   1dc1b:	movzbl 0x1(%r10),%r11d
   1dc20:	and    $0xfc,%r11d
   1dc27:	lea    (%rax,%r11,8),%r11d
   1dc2b:	movzbl 0x1(%rbx),%eax
   1dc2f:	shr    $0x3,%eax
   1dc32:	add    %r11d,%eax
   1dc35:	shl    $0x10,%eax
   1dc38:	add    %r15d,%eax
   1dc3b:	mov    %eax,(%r9)
   1dc3e:	add    $0x2,%rdi
   1dc42:	add    $0x2,%r10
   1dc46:	add    $0x2,%rbx
   1dc4a:	add    $0x4,%r9
   1dc4e:	add    $0x1,%r12d
   1dc52:	mov    %r13,%rax
   1dc55:	shr    %eax
   1dc57:	cmp    %r12d,%eax
   1dc5a:	ja     1dbeb <rgb_rgb565_convert_le+0x2b>
   1dc5c:	add    $0x1,%edx
   1dc5f:	add    $0x8,%rcx
   1dc63:	mov    %r13,%rax
   1dc66:	and    $0x1,%eax
   1dc69:	test   %eax,%eax
   1dc6b:	je     1dc8f <rgb_rgb565_convert_le+0xcf>
   1dc6d:	movzbl (%rdi),%eax
   1dc70:	and    $0xf8,%ax
   1dc74:	shl    $0x8,%eax
   1dc77:	movzbl (%r10),%edi
   1dc7b:	and    $0xfc,%di
   1dc80:	lea    (%rax,%rdi,8),%edi
   1dc83:	movzbl (%rbx),%eax
   1dc86:	shr    $0x3,%eax
   1dc89:	add    %edi,%eax
   1dc8b:	mov    %ax,(%r9)
   1dc8f:	add    $0xffffffff,%r8d
   1dc93:	test   %r8d,%r8d
   1dc96:	jns    1dcae <rgb_rgb565_convert_le+0xee>
   1dc98:	mov    -0x28(%rbp),%r15
   1dc9c:	mov    -0x20(%rbp),%r14
   1dca0:	mov    -0x18(%rbp),%r13
   1dca4:	mov    -0x10(%rbp),%r12
   1dca8:	mov    -0x8(%rbp),%rbx
   1dcac:	leaveq 
   1dcad:	retq   
   1dcae:	mov    (%rsi),%rax
   1dcb1:	mov    %edx,%ebx
   1dcb3:	mov    (%rax,%rbx,8),%rdi
   1dcb7:	mov    0x8(%rsi),%rax
   1dcbb:	mov    (%rax,%rbx,8),%r10
   1dcbf:	mov    0x10(%rsi),%rax
   1dcc3:	mov    (%rax,%rbx,8),%rbx
   1dcc7:	mov    (%rcx),%r9
   1dcca:	mov    %r9,%rax
   1dccd:	and    $0x3,%rax
   1dcd1:	test   %rax,%rax
   1dcd4:	jne    1dcde <rgb_rgb565_convert_le+0x11e>
   1dcd6:	mov    %r14,%r12
   1dcd9:	jmpq   1dc52 <rgb_rgb565_convert_le+0x92>
   1dcde:	movzbl (%rdi),%eax
   1dce1:	and    $0xf8,%ax
   1dce5:	shl    $0x8,%eax
   1dce8:	movzbl (%r10),%r11d
   1dcec:	and    $0xfc,%r11w
   1dcf2:	lea    (%rax,%r11,8),%r11d
   1dcf6:	movzbl (%rbx),%eax
   1dcf9:	shr    $0x3,%eax
   1dcfc:	add    %r11d,%eax
   1dcff:	mov    %ax,(%r9)
   1dd03:	add    $0x1,%rdi
   1dd07:	add    $0x1,%r10
   1dd0b:	add    $0x1,%rbx
   1dd0f:	add    $0x2,%r9
   1dd13:	add    $0xffffffff,%r13d
   1dd17:	mov    %r14,%r12
   1dd1a:	jmpq   1dc52 <rgb_rgb565_convert_le+0x92>
   1dd1f:	nop

000000000001dd20 <rgb_rgb565D_convert_le>:
   1dd20:	push   %rbp
   1dd21:	mov    %rsp,%rbp
   1dd24:	sub    $0x50,%rsp
   1dd28:	mov    %rsi,-0x40(%rbp)
   1dd2c:	mov    %rbx,-0x8(%rbp)
   1dd30:	mov    %r12,-0x10(%rbp)
   1dd34:	mov    %r13,-0x18(%rbp)
   1dd38:	mov    %r14,-0x20(%rbp)
   1dd3c:	mov    %r15,-0x28(%rbp)
   1dd40:	mov    0x1a8(%rdi),%r14
   1dd47:	mov    0x88(%rdi),%r12d
   1dd4e:	lea    0x3bbab(%rip),%rbx        # 59900 <dither_matrix>
   1dd55:	mov    0xa8(%rdi),%eax
   1dd5b:	and    $0x3,%eax
   1dd5e:	mov    %eax,%eax
   1dd60:	mov    (%rbx,%rax,8),%rax
   1dd64:	mov    $0xffffff00,%ebx
   1dd69:	xor    %edi,%edi
   1dd6b:	jmpq   1de76 <rgb_rgb565D_convert_le+0x156>
   1dd70:	mov    %rax,%rcx
   1dd73:	and    %rbx,%rcx
   1dd76:	shr    $0x8,%rcx
   1dd7a:	movzbl %al,%r15d
   1dd7e:	mov    %r15,%rdx
   1dd81:	shl    $0x18,%rdx
   1dd85:	lea    (%rdx,%rcx,1),%r11
   1dd89:	movzbl %r11b,%ebx
   1dd8d:	lea    (%r14,%rbx,1),%rcx
   1dd91:	movzbl 0x1(%r10),%edx
   1dd96:	movzbl (%rcx,%rdx,1),%ecx
   1dd9a:	and    $0xf8,%ecx
   1dda0:	shl    $0x8,%ecx
   1dda3:	mov    %r11,%rdx
   1dda6:	and    $0xfe,%rdx
   1ddad:	shr    %rdx
   1ddb0:	add    %r14,%rdx
   1ddb3:	movzbl 0x1(%r8),%r13d
   1ddb8:	movzbl (%rdx,%r13,1),%edx
   1ddbd:	and    $0xfc,%edx
   1ddc3:	lea    (%rcx,%rdx,8),%edx
   1ddc6:	movzbl 0x1(%rsi),%ecx
   1ddca:	add    %r14,%rcx
   1ddcd:	movzbl (%rcx,%rbx,1),%ecx
   1ddd1:	shr    $0x3,%ecx
   1ddd4:	add    %ecx,%edx
   1ddd6:	shl    $0x10,%edx
   1ddd9:	lea    (%r14,%r15,1),%r13
   1dddd:	movzbl (%r10),%ecx
   1dde1:	movzbl 0x0(%r13,%rcx,1),%ecx
   1dde7:	and    $0xf8,%ecx
   1dded:	shl    $0x8,%ecx
   1ddf0:	and    $0xfe,%rax
   1ddf6:	shr    %rax
   1ddf9:	add    %r14,%rax
   1ddfc:	movzbl (%r8),%r13d
   1de00:	movzbl (%rax,%r13,1),%eax
   1de05:	and    $0xfc,%eax
   1de0a:	lea    (%rcx,%rax,8),%ecx
   1de0d:	movzbl (%rsi),%eax
   1de10:	add    %r14,%rax
   1de13:	movzbl (%rax,%r15,1),%eax
   1de18:	shr    $0x3,%eax
   1de1b:	add    %ecx,%eax
   1de1d:	add    %edx,%eax
   1de1f:	mov    %eax,(%r9)
   1de22:	shr    $0x8,%r11
   1de26:	shl    $0x18,%rbx
   1de2a:	lea    (%r11,%rbx,1),%rax
   1de2e:	add    $0x2,%r10
   1de32:	add    $0x2,%r8
   1de36:	add    $0x2,%rsi
   1de3a:	add    $0x4,%r9
   1de3e:	add    $0x1,%edi
   1de41:	mov    $0xffffff00,%ebx
   1de46:	mov    %r12,%rcx
   1de49:	shr    %ecx
   1de4b:	cmp    %edi,%ecx
   1de4d:	ja     1dd70 <rgb_rgb565D_convert_le+0x50>
   1de53:	mov    -0x48(%rbp),%rcx
   1de57:	lea    0x1(%rcx),%edx
   1de5a:	mov    -0x38(%rbp),%rcx
   1de5e:	add    $0x8,%rcx
   1de62:	mov    %r12,%rdi
   1de65:	and    $0x1,%edi
   1de68:	test   %edi,%edi
   1de6a:	jne    1de95 <rgb_rgb565D_convert_le+0x175>
   1de6c:	xor    %edi,%edi
   1de6e:	mov    -0x30(%rbp),%r8
   1de72:	mov    -0x40(%rbp),%rsi
   1de76:	lea    -0x1(%r8),%r11d
   1de7a:	test   %r11d,%r11d
   1de7d:	jns    1def2 <rgb_rgb565D_convert_le+0x1d2>
   1de7f:	mov    -0x28(%rbp),%r15
   1de83:	mov    -0x20(%rbp),%r14
   1de87:	mov    -0x18(%rbp),%r13
   1de8b:	mov    -0x10(%rbp),%r12
   1de8f:	mov    -0x8(%rbp),%rbx
   1de93:	leaveq 
   1de94:	retq   
   1de95:	movzbl %al,%r13d
   1de99:	lea    (%r14,%r13,1),%r11
   1de9d:	movzbl (%r10),%edi
   1dea1:	movzbl (%r11,%rdi,1),%edi
   1dea6:	and    $0xf8,%di
   1deab:	shl    $0x8,%edi
   1deae:	mov    %rax,%r10
   1deb1:	and    $0xfe,%r10
   1deb8:	shr    %r10
   1debb:	add    %r14,%r10
   1debe:	movzbl (%r8),%r8d
   1dec2:	movzbl (%r10,%r8,1),%r8d
   1dec7:	and    $0xfc,%r8w
   1decd:	lea    (%rdi,%r8,8),%edi
   1ded1:	movzbl (%rsi),%esi
   1ded4:	add    %r14,%rsi
   1ded7:	movzbl 0x0(%r13,%rsi,1),%esi
   1dedd:	shr    $0x3,%esi
   1dee0:	add    %edi,%esi
   1dee2:	mov    %si,(%r9)
   1dee6:	xor    %edi,%edi
   1dee8:	mov    -0x30(%rbp),%r8
   1deec:	mov    -0x40(%rbp),%rsi
   1def0:	jmp    1de76 <rgb_rgb565D_convert_le+0x156>
   1def2:	mov    (%rsi),%r8
   1def5:	mov    %edx,%r9d
   1def8:	mov    (%r8,%r9,8),%r10
   1defc:	mov    0x8(%rsi),%r8
   1df00:	mov    (%r8,%r9,8),%r8
   1df04:	mov    0x10(%rsi),%rsi
   1df08:	mov    (%rsi,%r9,8),%rsi
   1df0c:	mov    (%rcx),%r9
   1df0f:	mov    %r9,%r13
   1df12:	and    $0x3,%r13
   1df16:	test   %r13,%r13
   1df19:	jne    1df2c <rgb_rgb565D_convert_le+0x20c>
   1df1b:	mov    %r11,-0x30(%rbp)
   1df1f:	mov    %rcx,-0x38(%rbp)
   1df23:	mov    %rdx,-0x48(%rbp)
   1df27:	jmpq   1de46 <rgb_rgb565D_convert_le+0x126>
   1df2c:	movzbl %al,%r15d
   1df30:	lea    (%r14,%r15,1),%r13
   1df34:	mov    %r11,-0x30(%rbp)
   1df38:	movzbl (%r10),%r11d
   1df3c:	movzbl 0x0(%r13,%r11,1),%r11d
   1df42:	and    $0xf8,%r11w
   1df48:	shl    $0x8,%r11d
   1df4c:	mov    %rax,%r13
   1df4f:	and    $0xfe,%r13
   1df56:	shr    %r13
   1df59:	add    %r14,%r13
   1df5c:	mov    %rcx,-0x38(%rbp)
   1df60:	movzbl (%r8),%ecx
   1df64:	movzbl 0x0(%r13,%rcx,1),%ecx
   1df6a:	and    $0xfc,%cx
   1df6f:	lea    (%r11,%rcx,8),%r11d
   1df73:	movzbl (%rsi),%ecx
   1df76:	add    %r14,%rcx
   1df79:	movzbl (%r15,%rcx,1),%ecx
   1df7e:	shr    $0x3,%ecx
   1df81:	add    %r11d,%ecx
   1df84:	mov    %cx,(%r9)
   1df88:	add    $0x1,%r10
   1df8c:	add    $0x1,%r8
   1df90:	add    $0x1,%rsi
   1df94:	add    $0x2,%r9
   1df98:	add    $0xffffffff,%r12d
   1df9c:	mov    %rdx,-0x48(%rbp)
   1dfa0:	jmpq   1de46 <rgb_rgb565D_convert_le+0x126>
   1dfa5:	data16 nopw %cs:0x0(%rax,%rax,1)

000000000001dfb0 <gray_rgb565_convert_le>:
   1dfb0:	push   %rbp
   1dfb1:	mov    %rsp,%rbp
   1dfb4:	sub    $0x20,%rsp
   1dfb8:	mov    %r12,-0x8(%rbp)
   1dfbc:	mov    %r13,-0x10(%rbp)
   1dfc0:	mov    %r14,-0x18(%rbp)
   1dfc4:	mov    %r15,-0x20(%rbp)
   1dfc8:	mov    0x88(%rdi),%r12d
   1dfcf:	xor    %r13d,%r13d
   1dfd2:	jmpq   1e083 <gray_rgb565_convert_le+0xd3>
   1dfd7:	movzbl (%rax),%r10d
   1dfdb:	mov    %r10,%r9
   1dfde:	and    $0xf8,%r9d
   1dfe5:	shl    $0x8,%r9d
   1dfe9:	mov    %r10,%r14
   1dfec:	and    $0xfc,%r14d
   1dff3:	lea    (%r9,%r14,8),%r9d
   1dff7:	shr    $0x3,%r10d
   1dffb:	lea    (%r9,%r10,1),%r15d
   1dfff:	movzbl 0x1(%rax),%r9d
   1e004:	mov    %r9,%r10
   1e007:	and    $0xf8,%r10d
   1e00e:	shl    $0x8,%r10d
   1e012:	mov    %r9,%r14
   1e015:	and    $0xfc,%r14d
   1e01c:	lea    (%r10,%r14,8),%r10d
   1e020:	shr    $0x3,%r9d
   1e024:	add    %r10d,%r9d
   1e027:	shl    $0x10,%r9d
   1e02b:	add    %r15d,%r9d
   1e02e:	mov    %r9d,(%rdi)
   1e031:	add    $0x2,%rax
   1e035:	add    $0x4,%rdi
   1e039:	add    $0x1,%r11d
   1e03d:	mov    %r12,%r9
   1e040:	shr    %r9d
   1e043:	cmp    %r11d,%r9d
   1e046:	ja     1dfd7 <gray_rgb565_convert_le+0x27>
   1e048:	add    $0x1,%edx
   1e04b:	add    $0x8,%rcx
   1e04f:	mov    %r12,%r9
   1e052:	and    $0x1,%r9d
   1e056:	test   %r9d,%r9d
   1e059:	je     1e083 <gray_rgb565_convert_le+0xd3>
   1e05b:	movzbl (%rax),%eax
   1e05e:	mov    %rax,%r9
   1e061:	and    $0xf8,%r9d
   1e068:	shl    $0x8,%r9d
   1e06c:	mov    %rax,%r10
   1e06f:	and    $0xfc,%r10d
   1e076:	lea    (%r9,%r10,8),%r9d
   1e07a:	shr    $0x3,%eax
   1e07d:	add    %r9d,%eax
   1e080:	mov    %ax,(%rdi)
   1e083:	add    $0xffffffff,%r8d
   1e087:	test   %r8d,%r8d
   1e08a:	jns    1e09e <gray_rgb565_convert_le+0xee>
   1e08c:	mov    -0x20(%rbp),%r15
   1e090:	mov    -0x18(%rbp),%r14
   1e094:	mov    -0x10(%rbp),%r13
   1e098:	mov    -0x8(%rbp),%r12
   1e09c:	leaveq 
   1e09d:	retq   
   1e09e:	mov    (%rsi),%rdi
   1e0a1:	mov    %edx,%eax
   1e0a3:	mov    (%rdi,%rax,8),%rax
   1e0a7:	mov    (%rcx),%rdi
   1e0aa:	mov    %rdi,%r9
   1e0ad:	and    $0x3,%r9
   1e0b1:	test   %r9,%r9
   1e0b4:	jne    1e0bb <gray_rgb565_convert_le+0x10b>
   1e0b6:	mov    %r13,%r11
   1e0b9:	jmp    1e03d <gray_rgb565_convert_le+0x8d>
   1e0bb:	movzbl (%rax),%r10d
   1e0bf:	mov    %r10,%r9
   1e0c2:	and    $0xf8,%r9d
   1e0c9:	shl    $0x8,%r9d
   1e0cd:	mov    %r10,%r11
   1e0d0:	and    $0xfc,%r11d
   1e0d7:	lea    (%r9,%r11,8),%r9d
   1e0db:	shr    $0x3,%r10d
   1e0df:	add    %r10d,%r9d
   1e0e2:	mov    %r9w,(%rdi)
   1e0e6:	add    $0x1,%rax
   1e0ea:	add    $0x2,%rdi
   1e0ee:	add    $0xffffffff,%r12d
   1e0f2:	mov    %r13,%r11
   1e0f5:	jmpq   1e03d <gray_rgb565_convert_le+0x8d>
   1e0fa:	nopw   0x0(%rax,%rax,1)

000000000001e100 <gray_rgb565D_convert_le>:
   1e100:	push   %rbp
   1e101:	mov    %rsp,%rbp
   1e104:	sub    $0x40,%rsp
   1e108:	mov    %rbx,-0x8(%rbp)
   1e10c:	mov    %r12,-0x10(%rbp)
   1e110:	mov    %r13,-0x18(%rbp)
   1e114:	mov    %r14,-0x20(%rbp)
   1e118:	mov    %r15,-0x28(%rbp)
   1e11c:	mov    0x1a8(%rdi),%r13
   1e123:	mov    0x88(%rdi),%r11d
   1e12a:	lea    0x3b7cf(%rip),%rbx        # 59900 <dither_matrix>
   1e131:	mov    0xa8(%rdi),%eax
   1e137:	and    $0x3,%eax
   1e13a:	mov    %eax,%eax
   1e13c:	mov    (%rbx,%rax,8),%rax
   1e140:	mov    $0xffffff00,%r15d
   1e146:	xor    %edi,%edi
   1e148:	jmpq   1e209 <gray_rgb565D_convert_le+0x109>
   1e14d:	movzbl %al,%ecx
   1e150:	lea    0x0(%r13,%rcx,1),%rdx
   1e155:	movzbl (%r9),%r10d
   1e159:	movzbl (%rdx,%r10,1),%edx
   1e15e:	mov    %rdx,%r10
   1e161:	and    $0xf8,%r10d
   1e168:	shl    $0x8,%r10d
   1e16c:	mov    %rdx,%r12
   1e16f:	and    $0xfc,%r12d
   1e176:	lea    (%r10,%r12,8),%r10d
   1e17a:	shr    $0x3,%edx
   1e17d:	lea    (%r10,%rdx,1),%r14d
   1e181:	and    %r15,%rax
   1e184:	shr    $0x8,%rax
   1e188:	shl    $0x18,%rcx
   1e18c:	add    %rcx,%rax
   1e18f:	movzbl %al,%ecx
   1e192:	lea    0x0(%r13,%rcx,1),%rdx
   1e197:	movzbl 0x1(%r9),%r10d
   1e19c:	movzbl (%rdx,%r10,1),%edx
   1e1a1:	mov    %rdx,%r10
   1e1a4:	and    $0xf8,%r10d
   1e1ab:	shl    $0x8,%r10d
   1e1af:	mov    %rdx,%r12
   1e1b2:	and    $0xfc,%r12d
   1e1b9:	lea    (%r10,%r12,8),%r10d
   1e1bd:	shr    $0x3,%edx
   1e1c0:	add    %r10d,%edx
   1e1c3:	shl    $0x10,%edx
   1e1c6:	add    %r14d,%edx
   1e1c9:	mov    %edx,(%rbx)
   1e1cb:	shr    $0x8,%rax
   1e1cf:	shl    $0x18,%rcx
   1e1d3:	add    %rcx,%rax
   1e1d6:	add    $0x2,%r9
   1e1da:	add    $0x4,%rbx
   1e1de:	add    $0x1,%edi
   1e1e1:	mov    %r11,%rcx
   1e1e4:	shr    %ecx
   1e1e6:	cmp    %edi,%ecx
   1e1e8:	ja     1e14d <gray_rgb565D_convert_le+0x4d>
   1e1ee:	mov    -0x38(%rbp),%rcx
   1e1f2:	lea    0x1(%rcx),%edx
   1e1f5:	mov    -0x30(%rbp),%rcx
   1e1f9:	add    $0x8,%rcx
   1e1fd:	mov    %r11,%rdi
   1e200:	and    $0x1,%edi
   1e203:	test   %edi,%edi
   1e205:	jne    1e228 <gray_rgb565D_convert_le+0x128>
   1e207:	xor    %edi,%edi
   1e209:	add    $0xffffffff,%r8d
   1e20d:	test   %r8d,%r8d
   1e210:	jns    1e262 <gray_rgb565D_convert_le+0x162>
   1e212:	mov    -0x28(%rbp),%r15
   1e216:	mov    -0x20(%rbp),%r14
   1e21a:	mov    -0x18(%rbp),%r13
   1e21e:	mov    -0x10(%rbp),%r12
   1e222:	mov    -0x8(%rbp),%rbx
   1e226:	leaveq 
   1e227:	retq   
   1e228:	movzbl %al,%edi
   1e22b:	lea    0x0(%r13,%rdi,1),%r10
   1e230:	movzbl (%r9),%edi
   1e234:	movzbl (%r10,%rdi,1),%edi
   1e239:	mov    %rdi,%r9
   1e23c:	and    $0xf8,%r9d
   1e243:	shl    $0x8,%r9d
   1e247:	mov    %rdi,%r10
   1e24a:	and    $0xfc,%r10d
   1e251:	lea    (%r9,%r10,8),%r9d
   1e255:	shr    $0x3,%edi
   1e258:	add    %r9d,%edi
   1e25b:	mov    %di,(%rbx)
   1e25e:	xor    %edi,%edi
   1e260:	jmp    1e209 <gray_rgb565D_convert_le+0x109>
   1e262:	mov    (%rsi),%rbx
   1e265:	mov    %edx,%r9d
   1e268:	mov    (%rbx,%r9,8),%r9
   1e26c:	mov    (%rcx),%rbx
   1e26f:	mov    %rbx,%r10
   1e272:	and    $0x3,%r10
   1e276:	test   %r10,%r10
   1e279:	jne    1e288 <gray_rgb565D_convert_le+0x188>
   1e27b:	mov    %rdx,-0x38(%rbp)
   1e27f:	mov    %rcx,-0x30(%rbp)
   1e283:	jmpq   1e1e1 <gray_rgb565D_convert_le+0xe1>
   1e288:	movzbl %al,%r10d
   1e28c:	lea    0x0(%r13,%r10,1),%r12
   1e291:	movzbl (%r9),%r10d
   1e295:	movzbl (%r12,%r10,1),%r12d
   1e29a:	mov    %r12,%r10
   1e29d:	and    $0xf8,%r10d
   1e2a4:	shl    $0x8,%r10d
   1e2a8:	mov    %r12,%r14
   1e2ab:	and    $0xfc,%r14d
   1e2b2:	lea    (%r10,%r14,8),%r10d
   1e2b6:	shr    $0x3,%r12d
   1e2ba:	add    %r12d,%r10d
   1e2bd:	mov    %r10w,(%rbx)
   1e2c1:	add    $0x1,%r9
   1e2c5:	add    $0x2,%rbx
   1e2c9:	add    $0xffffffff,%r11d
   1e2cd:	mov    %rdx,-0x38(%rbp)
   1e2d1:	mov    %rcx,-0x30(%rbp)
   1e2d5:	jmpq   1e1e1 <gray_rgb565D_convert_le+0xe1>
   1e2da:	nopw   0x0(%rax,%rax,1)

000000000001e2e0 <ycc_rgb565_convert_be>:
   1e2e0:	push   %rbp
   1e2e1:	mov    %rsp,%rbp
   1e2e4:	sub    $0x60,%rsp
   1e2e8:	mov    %r15,-0x28(%rbp)
   1e2ec:	mov    %r14,-0x20(%rbp)
   1e2f0:	mov    %rsi,-0x40(%rbp)
   1e2f4:	mov    %rbx,-0x8(%rbp)
   1e2f8:	mov    %r12,-0x10(%rbp)
   1e2fc:	mov    %r13,-0x18(%rbp)
   1e300:	mov    0x88(%rdi),%ebx
   1e306:	mov    0x1a8(%rdi),%r15
   1e30d:	mov    0x268(%rdi),%rax
   1e314:	mov    0x10(%rax),%r13
   1e318:	mov    0x18(%rax),%r12
   1e31c:	mov    0x20(%rax),%r14
   1e320:	mov    0x28(%rax),%r9
   1e324:	mov    %r9,-0x38(%rbp)
   1e328:	xor    %edi,%edi
   1e32a:	jmpq   1e44b <ycc_rgb565_convert_be+0x16b>
   1e32f:	movzbl (%r11),%ecx
   1e333:	mov    (%r14,%rcx,8),%rax
   1e337:	movzbl (%rsi),%edx
   1e33a:	add    (%r9,%rdx,8),%rax
   1e33e:	sar    $0x10,%rax
   1e342:	mov    %rbx,-0x58(%rbp)
   1e346:	movzbl (%r8),%ebx
   1e34a:	add    %ebx,%eax
   1e34c:	movslq %eax,%rax
   1e34f:	movzbl (%rax,%r15,1),%eax
   1e354:	mov    %rdi,-0x60(%rbp)
   1e358:	mov    %rax,%rdi
   1e35b:	shr    $0x5,%edi
   1e35e:	mov    0x0(%r13,%rcx,4),%ecx
   1e363:	add    %ebx,%ecx
   1e365:	movslq %ecx,%rcx
   1e368:	movzbl (%rcx,%r15,1),%ecx
   1e36d:	and    $0xf8,%ecx
   1e373:	add    %edi,%ecx
   1e375:	and    $0x1c,%eax
   1e378:	shl    $0xb,%eax
   1e37b:	add    %eax,%ecx
   1e37d:	add    (%r12,%rdx,4),%ebx
   1e381:	movslq %ebx,%rax
   1e384:	movzbl (%rax,%r15,1),%eax
   1e389:	and    $0xf8,%eax
   1e38e:	shl    $0x5,%eax
   1e391:	add    %eax,%ecx
   1e393:	shl    $0x10,%ecx
   1e396:	movzbl 0x1(%r11),%edi
   1e39b:	mov    (%r14,%rdi,8),%rax
   1e39f:	movzbl 0x1(%rsi),%ebx
   1e3a3:	add    (%r9,%rbx,8),%rax
   1e3a7:	sar    $0x10,%rax
   1e3ab:	movzbl 0x1(%r8),%edx
   1e3b0:	add    %edx,%eax
   1e3b2:	movslq %eax,%rax
   1e3b5:	movzbl (%rax,%r15,1),%eax
   1e3ba:	mov    %rax,%r9
   1e3bd:	shr    $0x5,%r9d
   1e3c1:	mov    0x0(%r13,%rdi,4),%edi
   1e3c6:	add    %edx,%edi
   1e3c8:	movslq %edi,%rdi
   1e3cb:	movzbl (%r15,%rdi,1),%edi
   1e3d0:	and    $0xf8,%edi
   1e3d6:	add    %r9d,%edi
   1e3d9:	and    $0x1c,%eax
   1e3dc:	shl    $0xb,%eax
   1e3df:	add    %eax,%edi
   1e3e1:	add    (%r12,%rbx,4),%edx
   1e3e5:	movslq %edx,%rax
   1e3e8:	movzbl (%r15,%rax,1),%eax
   1e3ed:	and    $0xf8,%eax
   1e3f2:	shl    $0x5,%eax
   1e3f5:	add    %edi,%eax
   1e3f7:	add    %ecx,%eax
   1e3f9:	mov    %eax,(%r10)
   1e3fc:	add    $0x2,%r11
   1e400:	add    $0x2,%rsi
   1e404:	add    $0x2,%r8
   1e408:	add    $0x4,%r10
   1e40c:	mov    -0x60(%rbp),%rax
   1e410:	lea    0x1(%rax),%edi
   1e413:	mov    -0x58(%rbp),%rbx
   1e417:	mov    -0x38(%rbp),%r9
   1e41b:	mov    %rbx,%rax
   1e41e:	shr    %eax
   1e420:	cmp    %edi,%eax
   1e422:	ja     1e32f <ycc_rgb565_convert_be+0x4f>
   1e428:	mov    -0x48(%rbp),%rax
   1e42c:	lea    0x1(%rax),%edx
   1e42f:	mov    -0x30(%rbp),%rax
   1e433:	lea    0x8(%rax),%rcx
   1e437:	mov    %rbx,%rax
   1e43a:	and    $0x1,%eax
   1e43d:	test   %eax,%eax
   1e43f:	jne    1e46d <ycc_rgb565_convert_be+0x18d>
   1e441:	xor    %edi,%edi
   1e443:	mov    -0x50(%rbp),%r8
   1e447:	mov    -0x40(%rbp),%rsi
   1e44b:	lea    -0x1(%r8),%eax
   1e44f:	test   %eax,%eax
   1e451:	jns    1e4de <ycc_rgb565_convert_be+0x1fe>
   1e457:	mov    -0x18(%rbp),%r13
   1e45b:	mov    -0x10(%rbp),%r12
   1e45f:	mov    -0x8(%rbp),%rbx
   1e463:	mov    -0x20(%rbp),%r14
   1e467:	mov    -0x28(%rbp),%r15
   1e46b:	leaveq 
   1e46c:	retq   
   1e46d:	movzbl (%r11),%edi
   1e471:	mov    (%r14,%rdi,8),%rax
   1e475:	movzbl (%rsi),%r11d
   1e479:	add    (%r9,%r11,8),%rax
   1e47d:	sar    $0x10,%rax
   1e481:	movzbl (%r8),%esi
   1e485:	add    %esi,%eax
   1e487:	movslq %eax,%rax
   1e48a:	movzbl (%r15,%rax,1),%eax
   1e48f:	mov    %rax,%r8
   1e492:	shr    $0x5,%r8d
   1e496:	mov    0x0(%r13,%rdi,4),%edi
   1e49b:	add    %esi,%edi
   1e49d:	movslq %edi,%rdi
   1e4a0:	movzbl (%r15,%rdi,1),%edi
   1e4a5:	and    $0xf8,%edi
   1e4ab:	add    %r8d,%edi
   1e4ae:	and    $0x1c,%eax
   1e4b1:	shl    $0xb,%eax
   1e4b4:	add    %eax,%edi
   1e4b6:	add    (%r12,%r11,4),%esi
   1e4ba:	movslq %esi,%rax
   1e4bd:	movzbl (%r15,%rax,1),%eax
   1e4c2:	and    $0xf8,%ax
   1e4c6:	shl    $0x5,%eax
   1e4c9:	add    %edi,%eax
   1e4cb:	mov    %ax,(%r10)
   1e4cf:	xor    %edi,%edi
   1e4d1:	mov    -0x50(%rbp),%r8
   1e4d5:	mov    -0x40(%rbp),%rsi
   1e4d9:	jmpq   1e44b <ycc_rgb565_convert_be+0x16b>
   1e4de:	mov    0x10(%rsi),%r8
   1e4e2:	mov    %edx,%r10d
   1e4e5:	mov    (%r8,%r10,8),%r11
   1e4e9:	mov    (%rsi),%r8
   1e4ec:	mov    (%r8,%r10,8),%r8
   1e4f0:	mov    0x8(%rsi),%rsi
   1e4f4:	mov    (%rsi,%r10,8),%rsi
   1e4f8:	mov    (%rcx),%r10
   1e4fb:	mov    %rax,-0x50(%rbp)
   1e4ff:	mov    %r10,%rax
   1e502:	and    $0x3,%rax
   1e506:	test   %rax,%rax
   1e509:	jne    1e518 <ycc_rgb565_convert_be+0x238>
   1e50b:	mov    %rcx,-0x30(%rbp)
   1e50f:	mov    %rdx,-0x48(%rbp)
   1e513:	jmpq   1e41b <ycc_rgb565_convert_be+0x13b>
   1e518:	movzbl (%r11),%edi
   1e51c:	mov    %rcx,-0x30(%rbp)
   1e520:	mov    (%r14,%rdi,8),%rax
   1e524:	mov    %rdx,-0x48(%rbp)
   1e528:	movzbl (%rsi),%edx
   1e52b:	add    (%r9,%rdx,8),%rax
   1e52f:	sar    $0x10,%rax
   1e533:	movzbl (%r8),%ecx
   1e537:	add    %ecx,%eax
   1e539:	movslq %eax,%rax
   1e53c:	movzbl (%r15,%rax,1),%eax
   1e541:	mov    %rax,%r9
   1e544:	shr    $0x5,%r9d
   1e548:	mov    0x0(%r13,%rdi,4),%edi
   1e54d:	add    %ecx,%edi
   1e54f:	movslq %edi,%rdi
   1e552:	movzbl (%r15,%rdi,1),%edi
   1e557:	and    $0xf8,%edi
   1e55d:	add    %r9d,%edi
   1e560:	and    $0x1c,%eax
   1e563:	shl    $0xb,%eax
   1e566:	add    %eax,%edi
   1e568:	add    (%r12,%rdx,4),%ecx
   1e56c:	movslq %ecx,%rax
   1e56f:	movzbl (%r15,%rax,1),%eax
   1e574:	and    $0xf8,%ax
   1e578:	shl    $0x5,%eax
   1e57b:	add    %edi,%eax
   1e57d:	mov    %ax,(%r10)
   1e581:	add    $0x1,%r11
   1e585:	add    $0x1,%rsi
   1e589:	add    $0x1,%r8
   1e58d:	add    $0x2,%r10
   1e591:	add    $0xffffffff,%ebx
   1e594:	mov    -0x38(%rbp),%r9
   1e598:	xor    %edi,%edi
   1e59a:	jmpq   1e41b <ycc_rgb565_convert_be+0x13b>
   1e59f:	nop

000000000001e5a0 <ycc_rgb565D_convert_be>:
   1e5a0:	push   %rbp
   1e5a1:	mov    %rsp,%rbp
   1e5a4:	sub    $0x80,%rsp
   1e5ab:	mov    %r15,-0x28(%rbp)
   1e5af:	mov    %r14,-0x20(%rbp)
   1e5b3:	mov    %r13,-0x18(%rbp)
   1e5b7:	mov    %r12,-0x10(%rbp)
   1e5bb:	mov    %rsi,-0x58(%rbp)
   1e5bf:	mov    %rbx,-0x8(%rbp)
   1e5c3:	mov    0x88(%rdi),%ebx
   1e5c9:	mov    0x1a8(%rdi),%r15
   1e5d0:	mov    0x268(%rdi),%rax
   1e5d7:	mov    0x10(%rax),%r10
   1e5db:	mov    %r10,-0x40(%rbp)
   1e5df:	mov    0x18(%rax),%r14
   1e5e3:	mov    0x20(%rax),%r11
   1e5e7:	mov    %r11,-0x48(%rbp)
   1e5eb:	mov    0x28(%rax),%r12
   1e5ef:	mov    %r12,-0x50(%rbp)
   1e5f3:	lea    0x3b306(%rip),%r9        # 59900 <dither_matrix>
   1e5fa:	mov    0xa8(%rdi),%eax
   1e600:	and    $0x3,%eax
   1e603:	mov    %eax,%eax
   1e605:	mov    (%r9,%rax,8),%rdi
   1e609:	mov    %rcx,%rax
   1e60c:	xor    %r9d,%r9d
   1e60f:	jmpq   1e7a5 <ycc_rgb565D_convert_be+0x205>
   1e614:	movzbl (%r8),%edx
   1e618:	mov    (%r11,%rdx,8),%rax
   1e61c:	mov    %rbx,-0x78(%rbp)
   1e620:	movzbl (%rsi),%ebx
   1e623:	add    (%r12,%rbx,8),%rax
   1e627:	sar    $0x10,%rax
   1e62b:	mov    %r9,-0x80(%rbp)
   1e62f:	movzbl 0x0(%r13),%r9d
   1e634:	add    %r9d,%eax
   1e637:	movslq %eax,%rax
   1e63a:	mov    %rcx,-0x38(%rbp)
   1e63e:	mov    %rdi,%rcx
   1e641:	and    $0xfe,%rcx
   1e648:	shr    %rcx
   1e64b:	add    %r15,%rcx
   1e64e:	movzbl (%rcx,%rax,1),%eax
   1e652:	mov    %rax,%rcx
   1e655:	shr    $0x5,%ecx
   1e658:	mov    (%r10,%rdx,4),%edx
   1e65c:	add    %r9d,%edx
   1e65f:	movslq %edx,%r10
   1e662:	movzbl %dil,%edx
   1e666:	mov    %rdi,-0x68(%rbp)
   1e66a:	lea    (%r15,%rdx,1),%rdi
   1e66e:	movzbl (%rdi,%r10,1),%edi
   1e673:	and    $0xf8,%edi
   1e679:	add    %edi,%ecx
   1e67b:	and    $0x1c,%eax
   1e67e:	shl    $0xb,%eax
   1e681:	add    %eax,%ecx
   1e683:	add    (%r14,%rbx,4),%r9d
   1e687:	movslq %r9d,%rax
   1e68a:	add    %r15,%rax
   1e68d:	movzbl (%rax,%rdx,1),%eax
   1e691:	and    $0xf8,%eax
   1e696:	shl    $0x5,%eax
   1e699:	add    %eax,%ecx
   1e69b:	shl    $0x10,%ecx
   1e69e:	movzbl 0x1(%r8),%r9d
   1e6a3:	mov    (%r11,%r9,8),%rax
   1e6a7:	movzbl 0x1(%rsi),%r11d
   1e6ac:	add    (%r12,%r11,8),%rax
   1e6b0:	sar    $0x10,%rax
   1e6b4:	movzbl 0x1(%r13),%edi
   1e6b9:	add    %edi,%eax
   1e6bb:	movslq %eax,%r10
   1e6be:	mov    -0x68(%rbp),%rax
   1e6c2:	mov    $0xffffff00,%ebx
   1e6c7:	and    %rbx,%rax
   1e6ca:	shr    $0x8,%rax
   1e6ce:	shl    $0x18,%rdx
   1e6d2:	add    %rax,%rdx
   1e6d5:	mov    %rdx,%rax
   1e6d8:	and    $0xfe,%rax
   1e6de:	shr    %rax
   1e6e1:	add    %r15,%rax
   1e6e4:	movzbl (%rax,%r10,1),%eax
   1e6e9:	mov    %rax,%r10
   1e6ec:	shr    $0x5,%r10d
   1e6f0:	mov    -0x40(%rbp),%rbx
   1e6f4:	mov    (%rbx,%r9,4),%ebx
   1e6f8:	add    %edi,%ebx
   1e6fa:	movslq %ebx,%r9
   1e6fd:	movzbl %dl,%ebx
   1e700:	lea    (%r15,%rbx,1),%r12
   1e704:	movzbl (%r12,%r9,1),%r9d
   1e709:	and    $0xf8,%r9d
   1e710:	add    %r10d,%r9d
   1e713:	and    $0x1c,%eax
   1e716:	shl    $0xb,%eax
   1e719:	add    %eax,%r9d
   1e71c:	add    (%r14,%r11,4),%edi
   1e720:	movslq %edi,%rax
   1e723:	add    %r15,%rax
   1e726:	movzbl (%rax,%rbx,1),%eax
   1e72a:	and    $0xf8,%eax
   1e72f:	shl    $0x5,%eax
   1e732:	add    %r9d,%eax
   1e735:	add    %eax,%ecx
   1e737:	mov    -0x38(%rbp),%rax
   1e73b:	mov    %ecx,(%rax)
   1e73d:	shr    $0x8,%rdx
   1e741:	shl    $0x18,%rbx
   1e745:	lea    (%rdx,%rbx,1),%rdi
   1e749:	add    $0x2,%r8
   1e74d:	add    $0x2,%rsi
   1e751:	add    $0x2,%r13
   1e755:	lea    0x4(%rax),%rcx
   1e759:	mov    -0x80(%rbp),%rax
   1e75d:	lea    0x1(%rax),%r9d
   1e761:	mov    -0x78(%rbp),%rbx
   1e765:	mov    -0x40(%rbp),%r10
   1e769:	mov    -0x48(%rbp),%r11
   1e76d:	mov    -0x50(%rbp),%r12
   1e771:	mov    %rbx,%rax
   1e774:	shr    %eax
   1e776:	cmp    %r9d,%eax
   1e779:	ja     1e614 <ycc_rgb565D_convert_be+0x74>
   1e77f:	mov    -0x60(%rbp),%rax
   1e783:	lea    0x1(%rax),%edx
   1e786:	mov    -0x30(%rbp),%rax
   1e78a:	add    $0x8,%rax
   1e78e:	mov    %rbx,%r9
   1e791:	and    $0x1,%r9d
   1e795:	test   %r9d,%r9d
   1e798:	jne    1e7c7 <ycc_rgb565D_convert_be+0x227>
   1e79a:	xor    %r9d,%r9d
   1e79d:	mov    -0x58(%rbp),%rsi
   1e7a1:	mov    -0x70(%rbp),%r8
   1e7a5:	lea    -0x1(%r8),%ecx
   1e7a9:	test   %ecx,%ecx
   1e7ab:	jns    1e866 <ycc_rgb565D_convert_be+0x2c6>
   1e7b1:	mov    -0x8(%rbp),%rbx
   1e7b5:	mov    -0x10(%rbp),%r12
   1e7b9:	mov    -0x18(%rbp),%r13
   1e7bd:	mov    -0x20(%rbp),%r14
   1e7c1:	mov    -0x28(%rbp),%r15
   1e7c5:	leaveq 
   1e7c6:	retq   
   1e7c7:	movzbl (%r8),%r8d
   1e7cb:	mov    (%r11,%r8,8),%r9
   1e7cf:	movzbl (%rsi),%r11d
   1e7d3:	add    (%r12,%r11,8),%r9
   1e7d7:	sar    $0x10,%r9
   1e7db:	movzbl 0x0(%r13),%r12d
   1e7e0:	lea    (%r9,%r12,1),%esi
   1e7e4:	movslq %esi,%r9
   1e7e7:	mov    %rdi,%rsi
   1e7ea:	and    $0xfe,%rsi
   1e7f1:	shr    %rsi
   1e7f4:	add    %r15,%rsi
   1e7f7:	movzbl (%rsi,%r9,1),%esi
   1e7fc:	mov    %rsi,%r13
   1e7ff:	shr    $0x5,%r13d
   1e803:	mov    (%r10,%r8,4),%r8d
   1e807:	add    %r12d,%r8d
   1e80a:	movslq %r8d,%r8
   1e80d:	movzbl %dil,%r10d
   1e811:	lea    (%r15,%r10,1),%r9
   1e815:	movzbl (%r9,%r8,1),%r8d
   1e81a:	and    $0xf8,%r8d
   1e821:	add    %r13d,%r8d
   1e824:	and    $0x1c,%esi
   1e827:	shl    $0xb,%esi
   1e82a:	add    %esi,%r8d
   1e82d:	add    (%r14,%r11,4),%r12d
   1e831:	movslq %r12d,%rsi
   1e834:	add    %r15,%rsi
   1e837:	movzbl (%r10,%rsi,1),%esi
   1e83c:	and    $0xf8,%si
   1e841:	shl    $0x5,%esi
   1e844:	add    %r8d,%esi
   1e847:	mov    %si,(%rcx)
   1e84a:	mov    -0x40(%rbp),%r10
   1e84e:	mov    -0x48(%rbp),%r11
   1e852:	mov    -0x50(%rbp),%r12
   1e856:	xor    %r9d,%r9d
   1e859:	mov    -0x58(%rbp),%rsi
   1e85d:	mov    -0x70(%rbp),%r8
   1e861:	jmpq   1e7a5 <ycc_rgb565D_convert_be+0x205>
   1e866:	mov    0x10(%rsi),%r8
   1e86a:	mov    %rcx,-0x70(%rbp)
   1e86e:	mov    %edx,%ecx
   1e870:	mov    (%r8,%rcx,8),%r8
   1e874:	mov    %rdx,-0x60(%rbp)
   1e878:	mov    (%rsi),%rdx
   1e87b:	mov    (%rdx,%rcx,8),%r13
   1e87f:	mov    0x8(%rsi),%rdx
   1e883:	mov    (%rdx,%rcx,8),%rsi
   1e887:	mov    (%rax),%rcx
   1e88a:	mov    %rax,-0x30(%rbp)
   1e88e:	mov    %rcx,%rax
   1e891:	and    $0x3,%rax
   1e895:	test   %rax,%rax
   1e898:	je     1e771 <ycc_rgb565D_convert_be+0x1d1>
   1e89e:	movzbl (%r8),%edx
   1e8a2:	mov    (%r11,%rdx,8),%rax
   1e8a6:	movzbl (%rsi),%r11d
   1e8aa:	add    (%r12,%r11,8),%rax
   1e8ae:	sar    $0x10,%rax
   1e8b2:	movzbl 0x0(%r13),%r9d
   1e8b7:	add    %r9d,%eax
   1e8ba:	movslq %eax,%r12
   1e8bd:	mov    %rdi,%rax
   1e8c0:	and    $0xfe,%rax
   1e8c6:	shr    %rax
   1e8c9:	add    %r15,%rax
   1e8cc:	movzbl (%rax,%r12,1),%eax
   1e8d1:	mov    %rax,%r12
   1e8d4:	shr    $0x5,%r12d
   1e8d8:	mov    (%r10,%rdx,4),%edx
   1e8dc:	add    %r9d,%edx
   1e8df:	movslq %edx,%rdx
   1e8e2:	movzbl %dil,%r10d
   1e8e6:	mov    %rdi,-0x80(%rbp)
   1e8ea:	lea    (%r15,%r10,1),%rdi
   1e8ee:	movzbl (%rdi,%rdx,1),%edx
   1e8f2:	and    $0xf8,%edx
   1e8f8:	add    %r12d,%edx
   1e8fb:	and    $0x1c,%eax
   1e8fe:	shl    $0xb,%eax
   1e901:	add    %eax,%edx
   1e903:	add    (%r14,%r11,4),%r9d
   1e907:	movslq %r9d,%rax
   1e90a:	add    %r15,%rax
   1e90d:	movzbl (%r10,%rax,1),%eax
   1e912:	and    $0xf8,%ax
   1e916:	shl    $0x5,%eax
   1e919:	add    %edx,%eax
   1e91b:	mov    %ax,(%rcx)
   1e91e:	add    $0x1,%r8
   1e922:	add    $0x1,%rsi
   1e926:	add    $0x1,%r13
   1e92a:	add    $0x2,%rcx
   1e92e:	add    $0xffffffff,%ebx
   1e931:	mov    -0x80(%rbp),%rdi
   1e935:	mov    -0x40(%rbp),%r10
   1e939:	mov    -0x48(%rbp),%r11
   1e93d:	mov    -0x50(%rbp),%r12
   1e941:	xor    %r9d,%r9d
   1e944:	jmpq   1e771 <ycc_rgb565D_convert_be+0x1d1>
   1e949:	nopl   0x0(%rax)

000000000001e950 <rgb_rgb565_convert_be>:
   1e950:	push   %rbp
   1e951:	mov    %rsp,%rbp
   1e954:	sub    $0x30,%rsp
   1e958:	mov    %rbx,-0x8(%rbp)
   1e95c:	mov    %r12,-0x10(%rbp)
   1e960:	mov    %r13,-0x18(%rbp)
   1e964:	mov    %r14,-0x20(%rbp)
   1e968:	mov    %r15,-0x28(%rbp)
   1e96c:	mov    0x88(%rdi),%r14d
   1e973:	xor    %edi,%edi
   1e975:	jmpq   1ea1a <rgb_rgb565_convert_be+0xca>
   1e97a:	movzbl (%rbx),%eax
   1e97d:	mov    %rax,%r13
   1e980:	shr    $0x5,%r13d
   1e984:	movzbl (%r10),%r12d
   1e988:	and    $0xf8,%r12d
   1e98f:	add    %r13d,%r12d
   1e992:	and    $0x1c,%eax
   1e995:	shl    $0xb,%eax
   1e998:	add    %eax,%r12d
   1e99b:	movzbl (%r11),%eax
   1e99f:	and    $0xf8,%eax
   1e9a4:	shl    $0x5,%eax
   1e9a7:	add    %eax,%r12d
   1e9aa:	shl    $0x10,%r12d
   1e9ae:	movzbl 0x1(%rbx),%eax
   1e9b2:	mov    %rax,%r15
   1e9b5:	shr    $0x5,%r15d
   1e9b9:	movzbl 0x1(%r10),%r13d
   1e9be:	and    $0xf8,%r13d
   1e9c5:	add    %r15d,%r13d
   1e9c8:	and    $0x1c,%eax
   1e9cb:	shl    $0xb,%eax
   1e9ce:	add    %eax,%r13d
   1e9d1:	movzbl 0x1(%r11),%eax
   1e9d6:	and    $0xf8,%eax
   1e9db:	shl    $0x5,%eax
   1e9de:	add    %r13d,%eax
   1e9e1:	add    %r12d,%eax
   1e9e4:	mov    %eax,(%r9)
   1e9e7:	add    $0x2,%rbx
   1e9eb:	add    $0x2,%r10
   1e9ef:	add    $0x2,%r11
   1e9f3:	add    $0x4,%r9
   1e9f7:	add    $0x1,%edi
   1e9fa:	mov    %r14,%rax
   1e9fd:	shr    %eax
   1e9ff:	cmp    %edi,%eax
   1ea01:	ja     1e97a <rgb_rgb565_convert_be+0x2a>
   1ea07:	add    $0x1,%edx
   1ea0a:	add    $0x8,%rcx
   1ea0e:	mov    %r14,%rax
   1ea11:	and    $0x1,%eax
   1ea14:	test   %eax,%eax
   1ea16:	jne    1ea39 <rgb_rgb565_convert_be+0xe9>
   1ea18:	xor    %edi,%edi
   1ea1a:	add    $0xffffffff,%r8d
   1ea1e:	test   %r8d,%r8d
   1ea21:	jns    1ea6b <rgb_rgb565_convert_be+0x11b>
   1ea23:	mov    -0x28(%rbp),%r15
   1ea27:	mov    -0x20(%rbp),%r14
   1ea2b:	mov    -0x18(%rbp),%r13
   1ea2f:	mov    -0x10(%rbp),%r12
   1ea33:	mov    -0x8(%rbp),%rbx
   1ea37:	leaveq 
   1ea38:	retq   
   1ea39:	movzbl (%rbx),%eax
   1ea3c:	mov    %rax,%rbx
   1ea3f:	shr    $0x5,%ebx
   1ea42:	movzbl (%r10),%edi
   1ea46:	and    $0xf8,%edi
   1ea4c:	add    %ebx,%edi
   1ea4e:	and    $0x1c,%eax
   1ea51:	shl    $0xb,%eax
   1ea54:	add    %eax,%edi
   1ea56:	movzbl (%r11),%eax
   1ea5a:	and    $0xf8,%ax
   1ea5e:	shl    $0x5,%eax
   1ea61:	add    %edi,%eax
   1ea63:	mov    %ax,(%r9)
   1ea67:	xor    %edi,%edi
   1ea69:	jmp    1ea1a <rgb_rgb565_convert_be+0xca>
   1ea6b:	mov    0x8(%rsi),%rbx
   1ea6f:	mov    %edx,%eax
   1ea71:	mov    (%rbx,%rax,8),%rbx
   1ea75:	mov    (%rsi),%r9
   1ea78:	mov    (%r9,%rax,8),%r10
   1ea7c:	mov    0x10(%rsi),%r9
   1ea80:	mov    (%r9,%rax,8),%r11
   1ea84:	mov    (%rcx),%r9
   1ea87:	mov    %r9,%rax
   1ea8a:	and    $0x3,%rax
   1ea8e:	test   %rax,%rax
   1ea91:	je     1e9fa <rgb_rgb565_convert_be+0xaa>
   1ea97:	movzbl (%rbx),%eax
   1ea9a:	mov    %rax,%r13
   1ea9d:	shr    $0x5,%r13d
   1eaa1:	movzbl (%r10),%r12d
   1eaa5:	and    $0xf8,%r12d
   1eaac:	add    %r13d,%r12d
   1eaaf:	and    $0x1c,%eax
   1eab2:	shl    $0xb,%eax
   1eab5:	add    %eax,%r12d
   1eab8:	movzbl (%r11),%eax
   1eabc:	and    $0xf8,%ax
   1eac0:	shl    $0x5,%eax
   1eac3:	add    %r12d,%eax
   1eac6:	mov    %ax,(%r9)
   1eaca:	add    $0x1,%rbx
   1eace:	add    $0x1,%r10
   1ead2:	add    $0x1,%r11
   1ead6:	add    $0x2,%r9
   1eada:	add    $0xffffffff,%r14d
   1eade:	jmpq   1e9fa <rgb_rgb565_convert_be+0xaa>
   1eae3:	data16 nopw %cs:0x0(%rax,%rax,1)
   1eaee:	xchg   %ax,%ax

000000000001eaf0 <rgb_rgb565D_convert_be>:
   1eaf0:	push   %rbp
   1eaf1:	mov    %rsp,%rbp
   1eaf4:	sub    $0x50,%rsp
   1eaf8:	mov    %rsi,-0x40(%rbp)
   1eafc:	mov    %rbx,-0x8(%rbp)
   1eb00:	mov    %r12,-0x10(%rbp)
   1eb04:	mov    %r13,-0x18(%rbp)
   1eb08:	mov    %r14,-0x20(%rbp)
   1eb0c:	mov    %r15,-0x28(%rbp)
   1eb10:	mov    0x1a8(%rdi),%r14
   1eb17:	mov    0x88(%rdi),%ebx
   1eb1d:	lea    0x3addc(%rip),%r9        # 59900 <dither_matrix>
   1eb24:	mov    0xa8(%rdi),%eax
   1eb2a:	and    $0x3,%eax
   1eb2d:	mov    %eax,%eax
   1eb2f:	mov    (%r9,%rax,8),%rax
   1eb33:	mov    $0xffffff00,%r9d
   1eb39:	xor    %edi,%edi
   1eb3b:	jmpq   1ec69 <rgb_rgb565D_convert_be+0x179>
   1eb40:	mov    %rax,%rcx
   1eb43:	and    %r9,%rcx
   1eb46:	shr    $0x8,%rcx
   1eb4a:	movzbl %al,%r15d
   1eb4e:	mov    %r15,%rdx
   1eb51:	shl    $0x18,%rdx
   1eb55:	add    %rcx,%rdx
   1eb58:	mov    %rdx,%rcx
   1eb5b:	and    $0xfe,%rcx
   1eb62:	shr    %rcx
   1eb65:	lea    (%r14,%rcx,1),%r9
   1eb69:	movzbl 0x1(%r11),%ecx
   1eb6e:	movzbl (%r9,%rcx,1),%ecx
   1eb73:	mov    %rcx,%r12
   1eb76:	shr    $0x5,%r12d
   1eb7a:	movzbl %dl,%r9d
   1eb7e:	lea    (%r14,%r9,1),%r13
   1eb82:	mov    %rbx,-0x50(%rbp)
   1eb86:	movzbl 0x1(%r8),%ebx
   1eb8b:	movzbl 0x0(%r13,%rbx,1),%ebx
   1eb91:	and    $0xf8,%ebx
   1eb97:	add    %r12d,%ebx
   1eb9a:	and    $0x1c,%ecx
   1eb9d:	shl    $0xb,%ecx
   1eba0:	add    %ecx,%ebx
   1eba2:	movzbl 0x1(%rsi),%ecx
   1eba6:	add    %r14,%rcx
   1eba9:	movzbl (%rcx,%r9,1),%ecx
   1ebae:	and    $0xf8,%ecx
   1ebb4:	shl    $0x5,%ecx
   1ebb7:	add    %ecx,%ebx
   1ebb9:	and    $0xfe,%rax
   1ebbf:	shr    %rax
   1ebc2:	lea    (%r14,%rax,1),%rcx
   1ebc6:	movzbl (%r11),%eax
   1ebca:	movzbl (%rcx,%rax,1),%eax
   1ebce:	mov    %rax,%r12
   1ebd1:	shr    $0x5,%r12d
   1ebd5:	lea    (%r14,%r15,1),%rcx
   1ebd9:	movzbl (%r8),%r13d
   1ebdd:	movzbl (%rcx,%r13,1),%ecx
   1ebe2:	and    $0xf8,%ecx
   1ebe8:	add    %r12d,%ecx
   1ebeb:	and    $0x1c,%eax
   1ebee:	shl    $0xb,%eax
   1ebf1:	add    %eax,%ecx
   1ebf3:	movzbl (%rsi),%eax
   1ebf6:	add    %r14,%rax
   1ebf9:	movzbl (%rax,%r15,1),%eax
   1ebfe:	and    $0xf8,%eax
   1ec03:	shl    $0x5,%eax
   1ec06:	add    %ecx,%eax
   1ec08:	shl    $0x10,%eax
   1ec0b:	add    %ebx,%eax
   1ec0d:	mov    %eax,(%r10)
   1ec10:	shr    $0x8,%rdx
   1ec14:	shl    $0x18,%r9
   1ec18:	lea    (%rdx,%r9,1),%rax
   1ec1c:	add    $0x2,%r11
   1ec20:	add    $0x2,%r8
   1ec24:	add    $0x2,%rsi
   1ec28:	add    $0x4,%r10
   1ec2c:	add    $0x1,%edi
   1ec2f:	mov    -0x50(%rbp),%rbx
   1ec33:	mov    $0xffffff00,%r9d
   1ec39:	mov    %rbx,%rcx
   1ec3c:	shr    %ecx
   1ec3e:	cmp    %edi,%ecx
   1ec40:	ja     1eb40 <rgb_rgb565D_convert_be+0x50>
   1ec46:	mov    -0x48(%rbp),%rcx
   1ec4a:	lea    0x1(%rcx),%edx
   1ec4d:	mov    -0x38(%rbp),%rcx
   1ec51:	add    $0x8,%rcx
   1ec55:	mov    %rbx,%rdi
   1ec58:	and    $0x1,%edi
   1ec5b:	test   %edi,%edi
   1ec5d:	jne    1ec8c <rgb_rgb565D_convert_be+0x19c>
   1ec5f:	xor    %edi,%edi
   1ec61:	mov    -0x30(%rbp),%r8
   1ec65:	mov    -0x40(%rbp),%rsi
   1ec69:	lea    -0x1(%r8),%r15d
   1ec6d:	test   %r15d,%r15d
   1ec70:	jns    1ecf9 <rgb_rgb565D_convert_be+0x209>
   1ec76:	mov    -0x28(%rbp),%r15
   1ec7a:	mov    -0x20(%rbp),%r14
   1ec7e:	mov    -0x18(%rbp),%r13
   1ec82:	mov    -0x10(%rbp),%r12
   1ec86:	mov    -0x8(%rbp),%rbx
   1ec8a:	leaveq 
   1ec8b:	retq   
   1ec8c:	mov    %rax,%rdi
   1ec8f:	and    $0xfe,%rdi
   1ec96:	shr    %rdi
   1ec99:	lea    (%r14,%rdi,1),%r12
   1ec9d:	movzbl (%r11),%edi
   1eca1:	movzbl (%r12,%rdi,1),%edi
   1eca6:	mov    %rdi,%r13
   1eca9:	shr    $0x5,%r13d
   1ecad:	movzbl %al,%r12d
   1ecb1:	lea    (%r14,%r12,1),%r11
   1ecb5:	movzbl (%r8),%r8d
   1ecb9:	movzbl (%r11,%r8,1),%r8d
   1ecbe:	and    $0xf8,%r8d
   1ecc5:	add    %r13d,%r8d
   1ecc8:	and    $0x1c,%edi
   1eccb:	shl    $0xb,%edi
   1ecce:	add    %r8d,%edi
   1ecd1:	movzbl (%rsi),%esi
   1ecd4:	add    %r14,%rsi
   1ecd7:	movzbl (%r12,%rsi,1),%esi
   1ecdc:	and    $0xf8,%si
   1ece1:	shl    $0x5,%esi
   1ece4:	add    %edi,%esi
   1ece6:	mov    %si,(%r10)
   1ecea:	xor    %edi,%edi
   1ecec:	mov    -0x30(%rbp),%r8
   1ecf0:	mov    -0x40(%rbp),%rsi
   1ecf4:	jmpq   1ec69 <rgb_rgb565D_convert_be+0x179>
   1ecf9:	mov    0x8(%rsi),%r8
   1ecfd:	mov    %edx,%r10d
   1ed00:	mov    (%r8,%r10,8),%r11
   1ed04:	mov    (%rsi),%r8
   1ed07:	mov    (%r8,%r10,8),%r8
   1ed0b:	mov    0x10(%rsi),%rsi
   1ed0f:	mov    (%rsi,%r10,8),%rsi
   1ed13:	mov    (%rcx),%r10
   1ed16:	mov    %r10,%r12
   1ed19:	and    $0x3,%r12
   1ed1d:	test   %r12,%r12
   1ed20:	jne    1ed33 <rgb_rgb565D_convert_be+0x243>
   1ed22:	mov    %r15,-0x30(%rbp)
   1ed26:	mov    %rcx,-0x38(%rbp)
   1ed2a:	mov    %rdx,-0x48(%rbp)
   1ed2e:	jmpq   1ec39 <rgb_rgb565D_convert_be+0x149>
   1ed33:	mov    %rax,%r12
   1ed36:	and    $0xfe,%r12
   1ed3d:	shr    %r12
   1ed40:	lea    (%r14,%r12,1),%r13
   1ed44:	movzbl (%r11),%r12d
   1ed48:	movzbl 0x0(%r13,%r12,1),%r13d
   1ed4e:	mov    %r13,%r12
   1ed51:	shr    $0x5,%r12d
   1ed55:	mov    %r15,-0x30(%rbp)
   1ed59:	movzbl %al,%r15d
   1ed5d:	mov    %rcx,-0x38(%rbp)
   1ed61:	lea    (%r14,%r15,1),%rcx
   1ed65:	mov    %rdx,-0x48(%rbp)
   1ed69:	movzbl (%r8),%edx
   1ed6d:	movzbl (%rcx,%rdx,1),%ecx
   1ed71:	and    $0xf8,%ecx
   1ed77:	add    %r12d,%ecx
   1ed7a:	and    $0x1c,%r13d
   1ed7e:	shl    $0xb,%r13d
   1ed82:	lea    (%rcx,%r13,1),%edx
   1ed86:	movzbl (%rsi),%ecx
   1ed89:	add    %r14,%rcx
   1ed8c:	movzbl (%r15,%rcx,1),%ecx
   1ed91:	and    $0xf8,%cx
   1ed96:	shl    $0x5,%ecx
   1ed99:	add    %edx,%ecx
   1ed9b:	mov    %cx,(%r10)
   1ed9f:	add    $0x1,%r11
   1eda3:	add    $0x1,%r8
   1eda7:	add    $0x1,%rsi
   1edab:	add    $0x2,%r10
   1edaf:	add    $0xffffffff,%ebx
   1edb2:	jmpq   1ec39 <rgb_rgb565D_convert_be+0x149>
   1edb7:	nopw   0x0(%rax,%rax,1)

000000000001edc0 <gray_rgb565_convert_be>:
   1edc0:	push   %rbp
   1edc1:	mov    %rsp,%rbp
   1edc4:	sub    $0x20,%rsp
   1edc8:	mov    %r12,-0x8(%rbp)
   1edcc:	mov    %r13,-0x10(%rbp)
   1edd0:	mov    %r14,-0x18(%rbp)
   1edd4:	mov    %r15,-0x20(%rbp)
   1edd8:	mov    0x88(%rdi),%r12d
   1eddf:	xor    %r13d,%r13d
   1ede2:	jmpq   1ee8f <gray_rgb565_convert_be+0xcf>
   1ede7:	movzbl 0x1(%rdi),%eax
   1edeb:	mov    %rax,%r14
   1edee:	shr    $0x5,%r14d
   1edf2:	mov    %rax,%r10
   1edf5:	and    $0xf8,%r10d
   1edfc:	add    %r10d,%r14d
   1edff:	and    $0x1c,%eax
   1ee02:	shl    $0xb,%eax
   1ee05:	add    %r14d,%eax
   1ee08:	shl    $0x5,%r10d
   1ee0c:	lea    (%rax,%r10,1),%r14d
   1ee10:	movzbl (%rdi),%eax
   1ee13:	mov    %rax,%r15
   1ee16:	shr    $0x5,%r15d
   1ee1a:	mov    %rax,%r10
   1ee1d:	and    $0xf8,%r10d
   1ee24:	add    %r10d,%r15d
   1ee27:	and    $0x1c,%eax
   1ee2a:	shl    $0xb,%eax
   1ee2d:	add    %r15d,%eax
   1ee30:	shl    $0x5,%r10d
   1ee34:	add    %r10d,%eax
   1ee37:	shl    $0x10,%eax
   1ee3a:	add    %r14d,%eax
   1ee3d:	mov    %eax,(%r9)
   1ee40:	add    $0x2,%rdi
   1ee44:	add    $0x4,%r9
   1ee48:	add    $0x1,%r11d
   1ee4c:	mov    %r12,%rax
   1ee4f:	shr    %eax
   1ee51:	cmp    %r11d,%eax
   1ee54:	ja     1ede7 <gray_rgb565_convert_be+0x27>
   1ee56:	add    $0x1,%edx
   1ee59:	add    $0x8,%rcx
   1ee5d:	mov    %r12,%rax
   1ee60:	and    $0x1,%eax
   1ee63:	test   %eax,%eax
   1ee65:	je     1ee8f <gray_rgb565_convert_be+0xcf>
   1ee67:	movzbl (%rdi),%eax
   1ee6a:	mov    %rax,%r10
   1ee6d:	shr    $0x5,%r10d
   1ee71:	mov    %rax,%rdi
   1ee74:	and    $0xf8,%edi
   1ee7a:	add    %edi,%r10d
   1ee7d:	and    $0x1c,%eax
   1ee80:	shl    $0xb,%eax
   1ee83:	add    %r10d,%eax
   1ee86:	shl    $0x5,%edi
   1ee89:	add    %edi,%eax
   1ee8b:	mov    %ax,(%r9)
   1ee8f:	add    $0xffffffff,%r8d
   1ee93:	test   %r8d,%r8d
   1ee96:	jns    1eeaa <gray_rgb565_convert_be+0xea>
   1ee98:	mov    -0x20(%rbp),%r15
   1ee9c:	mov    -0x18(%rbp),%r14
   1eea0:	mov    -0x10(%rbp),%r13
   1eea4:	mov    -0x8(%rbp),%r12
   1eea8:	leaveq 
   1eea9:	retq   
   1eeaa:	mov    (%rsi),%rax
   1eead:	mov    %edx,%edi
   1eeaf:	mov    (%rax,%rdi,8),%rdi
   1eeb3:	mov    (%rcx),%r9
   1eeb6:	mov    %r9,%rax
   1eeb9:	and    $0x3,%rax
   1eebd:	test   %rax,%rax
   1eec0:	jne    1eec7 <gray_rgb565_convert_be+0x107>
   1eec2:	mov    %r13,%r11
   1eec5:	jmp    1ee4c <gray_rgb565_convert_be+0x8c>
   1eec7:	movzbl (%rdi),%eax
   1eeca:	mov    %rax,%r11
   1eecd:	shr    $0x5,%r11d
   1eed1:	mov    %rax,%r10
   1eed4:	and    $0xf8,%r10d
   1eedb:	add    %r10d,%r11d
   1eede:	and    $0x1c,%eax
   1eee1:	shl    $0xb,%eax
   1eee4:	add    %r11d,%eax
   1eee7:	shl    $0x5,%r10d
   1eeeb:	add    %r10d,%eax
   1eeee:	mov    %ax,(%r9)
   1eef2:	add    $0x1,%rdi
   1eef6:	add    $0x2,%r9
   1eefa:	add    $0xffffffff,%r12d
   1eefe:	mov    %r13,%r11
   1ef01:	jmpq   1ee4c <gray_rgb565_convert_be+0x8c>
   1ef06:	nopw   %cs:0x0(%rax,%rax,1)

000000000001ef10 <gray_rgb565D_convert_be>:
   1ef10:	push   %rbp
   1ef11:	mov    %rsp,%rbp
   1ef14:	sub    $0x40,%rsp
   1ef18:	mov    %rbx,-0x8(%rbp)
   1ef1c:	mov    %r12,-0x10(%rbp)
   1ef20:	mov    %r13,-0x18(%rbp)
   1ef24:	mov    %r14,-0x20(%rbp)
   1ef28:	mov    %r15,-0x28(%rbp)
   1ef2c:	mov    0x1a8(%rdi),%r13
   1ef33:	mov    0x88(%rdi),%r11d
   1ef3a:	lea    0x3a9bf(%rip),%rbx        # 59900 <dither_matrix>
   1ef41:	mov    0xa8(%rdi),%eax
   1ef47:	and    $0x3,%eax
   1ef4a:	mov    %eax,%eax
   1ef4c:	mov    (%rbx,%rax,8),%rax
   1ef50:	mov    $0xffffff00,%r15d
   1ef56:	xor    %edi,%edi
   1ef58:	jmpq   1f025 <gray_rgb565D_convert_be+0x115>
   1ef5d:	mov    %rax,%rcx
   1ef60:	and    %r15,%rcx
   1ef63:	shr    $0x8,%rcx
   1ef67:	movzbl %al,%r12d
   1ef6b:	mov    %r12,%rax
   1ef6e:	shl    $0x18,%rax
   1ef72:	add    %rax,%rcx
   1ef75:	movzbl %cl,%edx
   1ef78:	lea    0x0(%r13,%rdx,1),%rax
   1ef7d:	movzbl 0x1(%rbx),%r10d
   1ef82:	movzbl (%rax,%r10,1),%eax
   1ef87:	mov    %rax,%r14
   1ef8a:	shr    $0x5,%r14d
   1ef8e:	mov    %rax,%r10
   1ef91:	and    $0xf8,%r10d
   1ef98:	add    %r10d,%r14d
   1ef9b:	and    $0x1c,%eax
   1ef9e:	shl    $0xb,%eax
   1efa1:	add    %r14d,%eax
   1efa4:	shl    $0x5,%r10d
   1efa8:	lea    (%rax,%r10,1),%r14d
   1efac:	lea    0x0(%r13,%r12,1),%r10
   1efb1:	movzbl (%rbx),%eax
   1efb4:	movzbl (%r10,%rax,1),%eax
   1efb9:	mov    %rax,%r12
   1efbc:	shr    $0x5,%r12d
   1efc0:	mov    %rax,%r10
   1efc3:	and    $0xf8,%r10d
   1efca:	add    %r10d,%r12d
   1efcd:	and    $0x1c,%eax
   1efd0:	shl    $0xb,%eax
   1efd3:	add    %r12d,%eax
   1efd6:	shl    $0x5,%r10d
   1efda:	add    %r10d,%eax
   1efdd:	shl    $0x10,%eax
   1efe0:	add    %r14d,%eax
   1efe3:	mov    %eax,(%r9)
   1efe6:	shr    $0x8,%rcx
   1efea:	shl    $0x18,%rdx
   1efee:	lea    (%rcx,%rdx,1),%rax
   1eff2:	add    $0x2,%rbx
   1eff6:	add    $0x4,%r9
   1effa:	add    $0x1,%edi
   1effd:	mov    %r11,%rcx
   1f000:	shr    %ecx
   1f002:	cmp    %edi,%ecx
   1f004:	ja     1ef5d <gray_rgb565D_convert_be+0x4d>
   1f00a:	mov    -0x38(%rbp),%rcx
   1f00e:	lea    0x1(%rcx),%edx
   1f011:	mov    -0x30(%rbp),%rcx
   1f015:	add    $0x8,%rcx
   1f019:	mov    %r11,%rdi
   1f01c:	and    $0x1,%edi
   1f01f:	test   %edi,%edi
   1f021:	jne    1f044 <gray_rgb565D_convert_be+0x134>
   1f023:	xor    %edi,%edi
   1f025:	add    $0xffffffff,%r8d
   1f029:	test   %r8d,%r8d
   1f02c:	jns    1f07d <gray_rgb565D_convert_be+0x16d>
   1f02e:	mov    -0x28(%rbp),%r15
   1f032:	mov    -0x20(%rbp),%r14
   1f036:	mov    -0x18(%rbp),%r13
   1f03a:	mov    -0x10(%rbp),%r12
   1f03e:	mov    -0x8(%rbp),%rbx
   1f042:	leaveq 
   1f043:	retq   
   1f044:	movzbl %al,%edi
   1f047:	lea    0x0(%r13,%rdi,1),%r10
   1f04c:	movzbl (%rbx),%edi
   1f04f:	movzbl (%r10,%rdi,1),%edi
   1f054:	mov    %rdi,%r10
   1f057:	shr    $0x5,%r10d
   1f05b:	mov    %rdi,%rbx
   1f05e:	and    $0xf8,%ebx
   1f064:	add    %ebx,%r10d
   1f067:	and    $0x1c,%edi
   1f06a:	shl    $0xb,%edi
   1f06d:	add    %r10d,%edi
   1f070:	shl    $0x5,%ebx
   1f073:	add    %ebx,%edi
   1f075:	mov    %di,(%r9)
   1f079:	xor    %edi,%edi
   1f07b:	jmp    1f025 <gray_rgb565D_convert_be+0x115>
   1f07d:	mov    (%rsi),%r9
   1f080:	mov    %edx,%ebx
   1f082:	mov    (%r9,%rbx,8),%rbx
   1f086:	mov    (%rcx),%r9
   1f089:	mov    %r9,%r10
   1f08c:	and    $0x3,%r10
   1f090:	test   %r10,%r10
   1f093:	jne    1f0a2 <gray_rgb565D_convert_be+0x192>
   1f095:	mov    %rdx,-0x38(%rbp)
   1f099:	mov    %rcx,-0x30(%rbp)
   1f09d:	jmpq   1effd <gray_rgb565D_convert_be+0xed>
   1f0a2:	movzbl %al,%r10d
   1f0a6:	add    %r13,%r10
   1f0a9:	movzbl (%rbx),%r12d
   1f0ad:	movzbl (%r10,%r12,1),%r10d
   1f0b2:	mov    %r10,%r14
   1f0b5:	shr    $0x5,%r14d
   1f0b9:	mov    %r10,%r12
   1f0bc:	and    $0xf8,%r12d
   1f0c3:	add    %r12d,%r14d
   1f0c6:	and    $0x1c,%r10d
   1f0ca:	shl    $0xb,%r10d
   1f0ce:	add    %r14d,%r10d
   1f0d1:	shl    $0x5,%r12d
   1f0d5:	add    %r12d,%r10d
   1f0d8:	mov    %r10w,(%r9)
   1f0dc:	add    $0x1,%rbx
   1f0e0:	add    $0x2,%r9
   1f0e4:	add    $0xffffffff,%r11d
   1f0e8:	mov    %rdx,-0x38(%rbp)
   1f0ec:	mov    %rcx,-0x30(%rbp)
   1f0f0:	jmpq   1effd <gray_rgb565D_convert_be+0xed>
   1f0f5:	data16 nopw %cs:0x0(%rax,%rax,1)

000000000001f100 <ycc_rgb565_convert>:
   1f100:	push   %rbp
   1f101:	mov    %rsp,%rbp
   1f104:	sub    $0x30,%rsp
   1f108:	mov    %rbx,-0x8(%rbp)
   1f10c:	mov    %r12,-0x10(%rbp)
   1f110:	mov    %r13,-0x18(%rbp)
   1f114:	mov    %r14,-0x20(%rbp)
   1f118:	mov    %r15,-0x28(%rbp)
   1f11c:	mov    %rsi,%rbx
   1f11f:	mov    %r8,%r12
   1f122:	mov    %rcx,%r13
   1f125:	mov    %rdx,%r14
   1f128:	mov    %rdi,%r15
   1f12b:	callq  1d5c0 <is_big_endian>
   1f130:	test   %eax,%eax
   1f132:	jne    1f15e <ycc_rgb565_convert+0x5e>
   1f134:	mov    %r13,%rcx
   1f137:	mov    %r14,%rdx
   1f13a:	mov    %rbx,%rsi
   1f13d:	mov    %r15,%rdi
   1f140:	mov    %r12,%r8
   1f143:	callq  1d5d0 <ycc_rgb565_convert_le>
   1f148:	mov    -0x28(%rbp),%r15
   1f14c:	mov    -0x20(%rbp),%r14
   1f150:	mov    -0x18(%rbp),%r13
   1f154:	mov    -0x10(%rbp),%r12
   1f158:	mov    -0x8(%rbp),%rbx
   1f15c:	leaveq 
   1f15d:	retq   
   1f15e:	mov    %r13,%rcx
   1f161:	mov    %r14,%rdx
   1f164:	mov    %rbx,%rsi
   1f167:	mov    %r15,%rdi
   1f16a:	mov    %r12,%r8
   1f16d:	callq  1e2e0 <ycc_rgb565_convert_be>
   1f172:	mov    -0x28(%rbp),%r15
   1f176:	mov    -0x20(%rbp),%r14
   1f17a:	mov    -0x18(%rbp),%r13
   1f17e:	mov    -0x10(%rbp),%r12
   1f182:	mov    -0x8(%rbp),%rbx
   1f186:	leaveq 
   1f187:	retq   
   1f188:	nopl   0x0(%rax,%rax,1)

000000000001f190 <ycc_rgb565D_convert>:
   1f190:	push   %rbp
   1f191:	mov    %rsp,%rbp
   1f194:	sub    $0x30,%rsp
   1f198:	mov    %rbx,-0x8(%rbp)
   1f19c:	mov    %r12,-0x10(%rbp)
   1f1a0:	mov    %r13,-0x18(%rbp)
   1f1a4:	mov    %r14,-0x20(%rbp)
   1f1a8:	mov    %r15,-0x28(%rbp)
   1f1ac:	mov    %rsi,%rbx
   1f1af:	mov    %r8,%r12
   1f1b2:	mov    %rcx,%r13
   1f1b5:	mov    %rdx,%r14
   1f1b8:	mov    %rdi,%r15
   1f1bb:	callq  1d5c0 <is_big_endian>
   1f1c0:	test   %eax,%eax
   1f1c2:	jne    1f1ee <ycc_rgb565D_convert+0x5e>
   1f1c4:	mov    %r13,%rcx
   1f1c7:	mov    %r14,%rdx
   1f1ca:	mov    %rbx,%rsi
   1f1cd:	mov    %r15,%rdi
   1f1d0:	mov    %r12,%r8
   1f1d3:	callq  1d860 <ycc_rgb565D_convert_le>
   1f1d8:	mov    -0x28(%rbp),%r15
   1f1dc:	mov    -0x20(%rbp),%r14
   1f1e0:	mov    -0x18(%rbp),%r13
   1f1e4:	mov    -0x10(%rbp),%r12
   1f1e8:	mov    -0x8(%rbp),%rbx
   1f1ec:	leaveq 
   1f1ed:	retq   
   1f1ee:	mov    %r13,%rcx
   1f1f1:	mov    %r14,%rdx
   1f1f4:	mov    %rbx,%rsi
   1f1f7:	mov    %r15,%rdi
   1f1fa:	mov    %r12,%r8
   1f1fd:	callq  1e5a0 <ycc_rgb565D_convert_be>
   1f202:	mov    -0x28(%rbp),%r15
   1f206:	mov    -0x20(%rbp),%r14
   1f20a:	mov    -0x18(%rbp),%r13
   1f20e:	mov    -0x10(%rbp),%r12
   1f212:	mov    -0x8(%rbp),%rbx
   1f216:	leaveq 
   1f217:	retq   
   1f218:	nopl   0x0(%rax,%rax,1)

000000000001f220 <rgb_rgb565_convert>:
   1f220:	push   %rbp
   1f221:	mov    %rsp,%rbp
   1f224:	sub    $0x30,%rsp
   1f228:	mov    %rbx,-0x8(%rbp)
   1f22c:	mov    %r12,-0x10(%rbp)
   1f230:	mov    %r13,-0x18(%rbp)
   1f234:	mov    %r14,-0x20(%rbp)
   1f238:	mov    %r15,-0x28(%rbp)
   1f23c:	mov    %rsi,%rbx
   1f23f:	mov    %r8,%r12
   1f242:	mov    %rcx,%r13
   1f245:	mov    %rdx,%r14
   1f248:	mov    %rdi,%r15
   1f24b:	callq  1d5c0 <is_big_endian>
   1f250:	test   %eax,%eax
   1f252:	jne    1f27e <rgb_rgb565_convert+0x5e>
   1f254:	mov    %r13,%rcx
   1f257:	mov    %r14,%rdx
   1f25a:	mov    %rbx,%rsi
   1f25d:	mov    %r15,%rdi
   1f260:	mov    %r12,%r8
   1f263:	callq  1dbc0 <rgb_rgb565_convert_le>
   1f268:	mov    -0x28(%rbp),%r15
   1f26c:	mov    -0x20(%rbp),%r14
   1f270:	mov    -0x18(%rbp),%r13
   1f274:	mov    -0x10(%rbp),%r12
   1f278:	mov    -0x8(%rbp),%rbx
   1f27c:	leaveq 
   1f27d:	retq   
   1f27e:	mov    %r13,%rcx
   1f281:	mov    %r14,%rdx
   1f284:	mov    %rbx,%rsi
   1f287:	mov    %r15,%rdi
   1f28a:	mov    %r12,%r8
   1f28d:	callq  1e950 <rgb_rgb565_convert_be>
   1f292:	mov    -0x28(%rbp),%r15
   1f296:	mov    -0x20(%rbp),%r14
   1f29a:	mov    -0x18(%rbp),%r13
   1f29e:	mov    -0x10(%rbp),%r12
   1f2a2:	mov    -0x8(%rbp),%rbx
   1f2a6:	leaveq 
   1f2a7:	retq   
   1f2a8:	nopl   0x0(%rax,%rax,1)

000000000001f2b0 <rgb_rgb565D_convert>:
   1f2b0:	push   %rbp
   1f2b1:	mov    %rsp,%rbp
   1f2b4:	sub    $0x30,%rsp
   1f2b8:	mov    %rbx,-0x8(%rbp)
   1f2bc:	mov    %r12,-0x10(%rbp)
   1f2c0:	mov    %r13,-0x18(%rbp)
   1f2c4:	mov    %r14,-0x20(%rbp)
   1f2c8:	mov    %r15,-0x28(%rbp)
   1f2cc:	mov    %rsi,%rbx
   1f2cf:	mov    %r8,%r12
   1f2d2:	mov    %rcx,%r13
   1f2d5:	mov    %rdx,%r14
   1f2d8:	mov    %rdi,%r15
   1f2db:	callq  1d5c0 <is_big_endian>
   1f2e0:	test   %eax,%eax
   1f2e2:	jne    1f30e <rgb_rgb565D_convert+0x5e>
   1f2e4:	mov    %r13,%rcx
   1f2e7:	mov    %r14,%rdx
   1f2ea:	mov    %rbx,%rsi
   1f2ed:	mov    %r15,%rdi
   1f2f0:	mov    %r12,%r8
   1f2f3:	callq  1dd20 <rgb_rgb565D_convert_le>
   1f2f8:	mov    -0x28(%rbp),%r15
   1f2fc:	mov    -0x20(%rbp),%r14
   1f300:	mov    -0x18(%rbp),%r13
   1f304:	mov    -0x10(%rbp),%r12
   1f308:	mov    -0x8(%rbp),%rbx
   1f30c:	leaveq 
   1f30d:	retq   
   1f30e:	mov    %r13,%rcx
   1f311:	mov    %r14,%rdx
   1f314:	mov    %rbx,%rsi
   1f317:	mov    %r15,%rdi
   1f31a:	mov    %r12,%r8
   1f31d:	callq  1eaf0 <rgb_rgb565D_convert_be>
   1f322:	mov    -0x28(%rbp),%r15
   1f326:	mov    -0x20(%rbp),%r14
   1f32a:	mov    -0x18(%rbp),%r13
   1f32e:	mov    -0x10(%rbp),%r12
   1f332:	mov    -0x8(%rbp),%rbx
   1f336:	leaveq 
   1f337:	retq   
   1f338:	nopl   0x0(%rax,%rax,1)

000000000001f340 <gray_rgb565_convert>:
   1f340:	push   %rbp
   1f341:	mov    %rsp,%rbp
   1f344:	sub    $0x30,%rsp
   1f348:	mov    %rbx,-0x8(%rbp)
   1f34c:	mov    %r12,-0x10(%rbp)
   1f350:	mov    %r13,-0x18(%rbp)
   1f354:	mov    %r14,-0x20(%rbp)
   1f358:	mov    %r15,-0x28(%rbp)
   1f35c:	mov    %rsi,%rbx
   1f35f:	mov    %r8,%r12
   1f362:	mov    %rcx,%r13
   1f365:	mov    %rdx,%r14
   1f368:	mov    %rdi,%r15
   1f36b:	callq  1d5c0 <is_big_endian>
   1f370:	test   %eax,%eax
   1f372:	jne    1f39e <gray_rgb565_convert+0x5e>
   1f374:	mov    %r13,%rcx
   1f377:	mov    %r14,%rdx
   1f37a:	mov    %rbx,%rsi
   1f37d:	mov    %r15,%rdi
   1f380:	mov    %r12,%r8
   1f383:	callq  1dfb0 <gray_rgb565_convert_le>
   1f388:	mov    -0x28(%rbp),%r15
   1f38c:	mov    -0x20(%rbp),%r14
   1f390:	mov    -0x18(%rbp),%r13
   1f394:	mov    -0x10(%rbp),%r12
   1f398:	mov    -0x8(%rbp),%rbx
   1f39c:	leaveq 
   1f39d:	retq   
   1f39e:	mov    %r13,%rcx
   1f3a1:	mov    %r14,%rdx
   1f3a4:	mov    %rbx,%rsi
   1f3a7:	mov    %r15,%rdi
   1f3aa:	mov    %r12,%r8
   1f3ad:	callq  1edc0 <gray_rgb565_convert_be>
   1f3b2:	mov    -0x28(%rbp),%r15
   1f3b6:	mov    -0x20(%rbp),%r14
   1f3ba:	mov    -0x18(%rbp),%r13
   1f3be:	mov    -0x10(%rbp),%r12
   1f3c2:	mov    -0x8(%rbp),%rbx
   1f3c6:	leaveq 
   1f3c7:	retq   
   1f3c8:	nopl   0x0(%rax,%rax,1)

000000000001f3d0 <gray_rgb565D_convert>:
   1f3d0:	push   %rbp
   1f3d1:	mov    %rsp,%rbp
   1f3d4:	sub    $0x30,%rsp
   1f3d8:	mov    %rbx,-0x8(%rbp)
   1f3dc:	mov    %r12,-0x10(%rbp)
   1f3e0:	mov    %r13,-0x18(%rbp)
   1f3e4:	mov    %r14,-0x20(%rbp)
   1f3e8:	mov    %r15,-0x28(%rbp)
   1f3ec:	mov    %rsi,%rbx
   1f3ef:	mov    %r8,%r12
   1f3f2:	mov    %rcx,%r13
   1f3f5:	mov    %rdx,%r14
   1f3f8:	mov    %rdi,%r15
   1f3fb:	callq  1d5c0 <is_big_endian>
   1f400:	test   %eax,%eax
   1f402:	jne    1f42e <gray_rgb565D_convert+0x5e>
   1f404:	mov    %r13,%rcx
   1f407:	mov    %r14,%rdx
   1f40a:	mov    %rbx,%rsi
   1f40d:	mov    %r15,%rdi
   1f410:	mov    %r12,%r8
   1f413:	callq  1e100 <gray_rgb565D_convert_le>
   1f418:	mov    -0x28(%rbp),%r15
   1f41c:	mov    -0x20(%rbp),%r14
   1f420:	mov    -0x18(%rbp),%r13
   1f424:	mov    -0x10(%rbp),%r12
   1f428:	mov    -0x8(%rbp),%rbx
   1f42c:	leaveq 
   1f42d:	retq   
   1f42e:	mov    %r13,%rcx
   1f431:	mov    %r14,%rdx
   1f434:	mov    %rbx,%rsi
   1f437:	mov    %r15,%rdi
   1f43a:	mov    %r12,%r8
   1f43d:	callq  1ef10 <gray_rgb565D_convert_be>
   1f442:	mov    -0x28(%rbp),%r15
   1f446:	mov    -0x20(%rbp),%r14
   1f44a:	mov    -0x18(%rbp),%r13
   1f44e:	mov    -0x10(%rbp),%r12
   1f452:	mov    -0x8(%rbp),%rbx
   1f456:	leaveq 
   1f457:	retq   
   1f458:	nopl   0x0(%rax,%rax,1)

000000000001f460 <start_pass_dcolor>:
   1f460:	push   %rbp
   1f461:	mov    %rsp,%rbp
   1f464:	leaveq 
   1f465:	retq   
   1f466:	nopw   %cs:0x0(%rax,%rax,1)

000000000001f470 <jinit_inverse_dct>:
   1f470:	push   %rbp
   1f471:	mov    %rsp,%rbp
   1f474:	sub    $0x30,%rsp
   1f478:	mov    %r14,-0x20(%rbp)
   1f47c:	mov    %r15,-0x28(%rbp)
   1f480:	mov    %rbx,-0x8(%rbp)
   1f484:	mov    %r12,-0x10(%rbp)
   1f488:	mov    %r13,-0x18(%rbp)
   1f48c:	mov    0x8(%rdi),%rax
   1f490:	mov    (%rax),%rax
   1f493:	mov    $0x1,%r14d
   1f499:	mov    $0x80,%edx
   1f49e:	mov    %rdi,%r13
   1f4a1:	mov    %r14,%rsi
   1f4a4:	callq  *%rax
   1f4a6:	mov    %rax,0x258(%r13)
   1f4ad:	lea    0x8c(%rip),%rcx        # 1f540 <start_pass>
   1f4b4:	mov    %rcx,(%rax)
   1f4b7:	mov    0x130(%r13),%r12
   1f4be:	add    $0x58,%r12
   1f4c2:	mov    %rax,%r15
   1f4c5:	mov    $0x100,%ebx
   1f4ca:	xor    %esi,%esi
   1f4cc:	mov    %rsi,%rax
   1f4cf:	jmp    1f51c <jinit_inverse_dct+0xac>
   1f4d1:	mov    0x8(%r13),%rcx
   1f4d5:	mov    (%rcx),%rcx
   1f4d8:	mov    %rbx,%rdx
   1f4db:	mov    %rsi,%rbx
   1f4de:	mov    %r14,%rsi
   1f4e1:	mov    %rax,%r14
   1f4e4:	mov    %r13,%rdi
   1f4e7:	callq  *%rcx
   1f4e9:	mov    %rax,(%r12)
   1f4ed:	mov    %rbx,%rsi
   1f4f0:	mov    %rax,%rdi
   1f4f3:	mov    $0x100,%ebx
   1f4f8:	mov    %rbx,%rdx
   1f4fb:	callq  41e0 <memset@plt>
   1f500:	movslq %r14d,%rax
   1f503:	movl   $0xffffffff,0x58(%r15,%rax,4)
   1f50c:	lea    0x1(%r14),%eax
   1f510:	add    $0x60,%r12
   1f514:	xor    %esi,%esi
   1f516:	mov    $0x1,%r14d
   1f51c:	movslq 0x38(%r13),%rcx
   1f520:	cmp    %eax,%ecx
   1f522:	jg     1f4d1 <jinit_inverse_dct+0x61>
   1f524:	mov    -0x18(%rbp),%r13
   1f528:	mov    -0x10(%rbp),%r12
   1f52c:	mov    -0x8(%rbp),%rbx
   1f530:	mov    -0x28(%rbp),%r15
   1f534:	mov    -0x20(%rbp),%r14
   1f538:	leaveq 
   1f539:	retq   
   1f53a:	nopw   0x0(%rax,%rax,1)

000000000001f540 <start_pass>:
   1f540:	push   %rbp
   1f541:	mov    %rsp,%rbp
   1f544:	sub    $0x110,%rsp
   1f54b:	mov    %r15,-0x28(%rbp)
   1f54f:	mov    %r14,-0x20(%rbp)
   1f553:	mov    %r13,-0x18(%rbp)
   1f557:	mov    %r12,-0x10(%rbp)
   1f55b:	mov    %rbx,-0x8(%rbp)
   1f55f:	mov    0x258(%rdi),%rax
   1f566:	mov    %rax,-0x108(%rbp)
   1f56d:	mov    0x130(%rdi),%rbx
   1f574:	mov    0x4ea45(%rip),%r15        # 6dfc0 <jpeg_idct_1x1@@LIBJPEG_6.2+0x38150>
   1f57b:	lea    0x1e87e(%rip),%rax        # 3de00 <jsimd_idct_2x2>
   1f582:	mov    %rax,-0x38(%rbp)
   1f586:	mov    0x4e98b(%rip),%rax        # 6df18 <jpeg_idct_2x2@@LIBJPEG_6.2+0x38358>
   1f58d:	mov    %rax,-0x40(%rbp)
   1f591:	mov    0x4e9d8(%rip),%r14        # 6df70 <jpeg_idct_3x3@@LIBJPEG_6.2+0x3dea0>
   1f598:	lea    0x1e881(%rip),%rax        # 3de20 <jsimd_idct_4x4>
   1f59f:	mov    %rax,-0x48(%rbp)
   1f5a3:	mov    0x4e976(%rip),%rax        # 6df20 <jpeg_idct_4x4@@LIBJPEG_6.2+0x38880>
   1f5aa:	mov    %rax,-0x50(%rbp)
   1f5ae:	mov    0x4e9d3(%rip),%rax        # 6df88 <jpeg_idct_5x5@@LIBJPEG_6.2+0x3e238>
   1f5b5:	mov    %rax,-0x58(%rbp)
   1f5b9:	mov    0x4e968(%rip),%r8        # 6df28 <jpeg_idct_6x6@@LIBJPEG_6.2+0x3e588>
   1f5c0:	mov    %r8,-0x60(%rbp)
   1f5c4:	mov    0x4e9d5(%rip),%rdx        # 6dfa0 <jpeg_idct_7x7@@LIBJPEG_6.2+0x3ebf0>
   1f5cb:	mov    %rdx,-0x68(%rbp)
   1f5cf:	lea    0x1e92a(%rip),%rcx        # 3df00 <jsimd_idct_islow>
   1f5d6:	mov    %rcx,-0x70(%rbp)
   1f5da:	mov    0x4e97f(%rip),%rcx        # 6df60 <jpeg_idct_islow@@LIBJPEG_6.2+0x3f360>
   1f5e1:	mov    %rcx,-0x78(%rbp)
   1f5e5:	lea    0x1e934(%rip),%rcx        # 3df20 <jsimd_idct_ifast>
   1f5ec:	mov    %rcx,-0x80(%rbp)
   1f5f0:	mov    0x4e9e9(%rip),%rcx        # 6dfe0 <jpeg_idct_ifast@@LIBJPEG_6.2+0x3fa20>
   1f5f7:	mov    %rcx,-0x88(%rbp)
   1f5fe:	lea    0x1e93b(%rip),%rcx        # 3df40 <jsimd_idct_float>
   1f605:	mov    %rcx,-0x90(%rbp)
   1f60c:	mov    0x4e985(%rip),%rcx        # 6df98 <jpeg_idct_float@@LIBJPEG_6.2+0x3fee8>
   1f613:	mov    %rcx,-0x98(%rbp)
   1f61a:	mov    0x4e98f(%rip),%rcx        # 6dfb0 <jpeg_idct_9x9@@LIBJPEG_6.2+0x3dce0>
   1f621:	mov    %rcx,-0xa0(%rbp)
   1f628:	mov    0x4e949(%rip),%rsi        # 6df78 <jpeg_idct_10x10@@LIBJPEG_6.2+0x3d5f8>
   1f62f:	mov    %rsi,-0xc0(%rbp)
   1f636:	mov    0x4e8fb(%rip),%r9        # 6df38 <jpeg_idct_11x11@@LIBJPEG_6.2+0x3cd88>
   1f63d:	mov    %r9,-0xc8(%rbp)
   1f644:	mov    0x4e91d(%rip),%r11        # 6df68 <jpeg_idct_12x12@@LIBJPEG_6.2+0x3c308>
   1f64b:	mov    %r11,-0xd0(%rbp)
   1f652:	mov    0x4e98f(%rip),%r10        # 6dfe8 <jpeg_idct_13x13@@LIBJPEG_6.2+0x3ba58>
   1f659:	mov    %r10,-0xd8(%rbp)
   1f660:	mov    0x4e941(%rip),%r12        # 6dfa8 <jpeg_idct_14x14@@LIBJPEG_6.2+0x3adb8>
   1f667:	mov    %r12,-0xe0(%rbp)
   1f66e:	mov    0x4e8cb(%rip),%r12        # 6df40 <jpeg_idct_15x15@@LIBJPEG_6.2+0x3a260>
   1f675:	mov    %r12,-0xe8(%rbp)
   1f67c:	mov    0x4e90d(%rip),%r12        # 6df90 <jpeg_idct_16x16@@LIBJPEG_6.2+0x395f0>
   1f683:	mov    %r12,-0xf0(%rbp)
   1f68a:	xor    %r12d,%r12d
   1f68d:	mov    %r12,-0xf8(%rbp)
   1f694:	mov    $0x1,%r12d
   1f69a:	mov    %r12,-0xb0(%rbp)
   1f6a1:	mov    $0x2,%r12d
   1f6a7:	mov    %r12,-0xa8(%rbp)
   1f6ae:	mov    %rdi,%r13
   1f6b1:	xor    %r12d,%r12d
   1f6b4:	pushq  -0xf8(%rbp)
   1f6ba:	pushq  -0xf8(%rbp)
   1f6c0:	popq   -0x100(%rbp)
   1f6c6:	popq   -0xb8(%rbp)
   1f6cc:	jmpq   1f75e <start_pass+0x21e>
   1f6d1:	mov    0x24(%rbx),%edi
   1f6d4:	add    $0xffffffff,%edi
   1f6d7:	cmp    $0xf,%edi
   1f6da:	jbe    1f781 <start_pass+0x241>
   1f6e0:	mov    0x0(%r13),%rax
   1f6e4:	movl   $0x7,0x28(%rax)
   1f6eb:	movslq 0x24(%rbx),%rcx
   1f6ef:	mov    0x0(%r13),%rax
   1f6f3:	mov    %ecx,0x2c(%rax)
   1f6f6:	mov    0x0(%r13),%rax
   1f6fa:	mov    (%rax),%rax
   1f6fd:	mov    %r13,%rdi
   1f700:	callq  *%rax
   1f702:	mov    -0x58(%rbp),%rax
   1f706:	mov    -0xc0(%rbp),%rsi
   1f70d:	mov    -0xa0(%rbp),%rcx
   1f714:	mov    -0x68(%rbp),%rdx
   1f718:	mov    -0x60(%rbp),%r8
   1f71c:	mov    -0x100(%rbp),%r9
   1f723:	mov    %r9,-0x100(%rbp)
   1f72a:	movslq %r12d,%r10
   1f72d:	mov    -0x108(%rbp),%r11
   1f734:	mov    %r9,0x8(%r11,%r10,8)
   1f739:	movslq 0x30(%rbx),%rdi
   1f73d:	test   %edi,%edi
   1f73f:	jne    1f7b7 <start_pass+0x277>
   1f741:	add    $0x1,%r12d
   1f745:	add    $0x60,%rbx
   1f749:	mov    -0xd8(%rbp),%r10
   1f750:	mov    -0xd0(%rbp),%r11
   1f757:	mov    -0xc8(%rbp),%r9
   1f75e:	movslq 0x38(%r13),%rdi
   1f762:	cmp    %r12d,%edi
   1f765:	jg     1f6d1 <start_pass+0x191>
   1f76b:	mov    -0x8(%rbp),%rbx
   1f76f:	mov    -0x10(%rbp),%r12
   1f773:	mov    -0x18(%rbp),%r13
   1f777:	mov    -0x20(%rbp),%r14
   1f77b:	mov    -0x28(%rbp),%r15
   1f77f:	leaveq 
   1f780:	retq   
   1f781:	mov    %rbx,-0x110(%rbp)
   1f788:	lea    0x3a191(%rip),%rbx        # 59920 <dither_matrix+0x20>
   1f78f:	movslq (%rbx,%rdi,4),%rdi
   1f793:	add    %rbx,%rdi
   1f796:	jmpq   *%rdi
   1f798:	mov    -0x110(%rbp),%rbx
   1f79f:	mov    -0xf0(%rbp),%r9
   1f7a6:	pushq  -0xf8(%rbp)
   1f7ac:	popq   -0xb8(%rbp)
   1f7b2:	jmpq   1f723 <start_pass+0x1e3>
   1f7b7:	mov    -0xb8(%rbp),%rdi
   1f7be:	cmp    0x58(%r11,%r10,4),%edi
   1f7c3:	je     1f741 <start_pass+0x201>
   1f7c9:	mov    0x50(%rbx),%r9
   1f7cd:	test   %r9,%r9
   1f7d0:	jne    1fa27 <start_pass+0x4e7>
   1f7d6:	mov    -0xc0(%rbp),%rsi
   1f7dd:	jmpq   1f741 <start_pass+0x201>
   1f7e2:	mov    -0x110(%rbp),%rbx
   1f7e9:	mov    %r15,%r9
   1f7ec:	pushq  -0xf8(%rbp)
   1f7f2:	popq   -0xb8(%rbp)
   1f7f8:	jmpq   1f723 <start_pass+0x1e3>
   1f7fd:	mov    %rax,%rbx
   1f800:	callq  3dd80 <jsimd_can_idct_2x2>
   1f805:	test   %eax,%eax
   1f807:	jne    1fa69 <start_pass+0x529>
   1f80d:	mov    %rbx,%rax
   1f810:	mov    -0xc0(%rbp),%rsi
   1f817:	mov    -0xa0(%rbp),%rcx
   1f81e:	mov    -0x68(%rbp),%rdx
   1f822:	mov    -0x60(%rbp),%r8
   1f826:	mov    -0x110(%rbp),%rbx
   1f82d:	mov    -0x40(%rbp),%r9
   1f831:	pushq  -0xf8(%rbp)
   1f837:	popq   -0xb8(%rbp)
   1f83d:	jmpq   1f723 <start_pass+0x1e3>
   1f842:	mov    -0x110(%rbp),%rbx
   1f849:	mov    %r14,%r9
   1f84c:	pushq  -0xf8(%rbp)
   1f852:	popq   -0xb8(%rbp)
   1f858:	jmpq   1f723 <start_pass+0x1e3>
   1f85d:	mov    %rax,%rbx
   1f860:	callq  3ddc0 <jsimd_can_idct_4x4>
   1f865:	test   %eax,%eax
   1f867:	jne    1fa9e <start_pass+0x55e>
   1f86d:	mov    %rbx,%rax
   1f870:	mov    -0xc0(%rbp),%rsi
   1f877:	mov    -0xa0(%rbp),%rcx
   1f87e:	mov    -0x68(%rbp),%rdx
   1f882:	mov    -0x60(%rbp),%r8
   1f886:	mov    -0x110(%rbp),%rbx
   1f88d:	mov    -0x50(%rbp),%r9
   1f891:	pushq  -0xf8(%rbp)
   1f897:	popq   -0xb8(%rbp)
   1f89d:	jmpq   1f723 <start_pass+0x1e3>
   1f8a2:	mov    -0x110(%rbp),%rbx
   1f8a9:	mov    %rax,%r9
   1f8ac:	pushq  -0xf8(%rbp)
   1f8b2:	popq   -0xb8(%rbp)
   1f8b8:	jmpq   1f723 <start_pass+0x1e3>
   1f8bd:	mov    -0x110(%rbp),%rbx
   1f8c4:	mov    %r8,%r9
   1f8c7:	pushq  -0xf8(%rbp)
   1f8cd:	popq   -0xb8(%rbp)
   1f8d3:	jmpq   1f723 <start_pass+0x1e3>
   1f8d8:	mov    -0x110(%rbp),%rbx
   1f8df:	mov    %rdx,%r9
   1f8e2:	pushq  -0xf8(%rbp)
   1f8e8:	popq   -0xb8(%rbp)
   1f8ee:	jmpq   1f723 <start_pass+0x1e3>
   1f8f3:	mov    0x60(%r13),%ecx
   1f8f7:	test   %ecx,%ecx
   1f8f9:	je     1fad3 <start_pass+0x593>
   1f8ff:	cmp    $0x1,%ecx
   1f902:	je     1fb20 <start_pass+0x5e0>
   1f908:	cmp    $0x2,%ecx
   1f90b:	jne    1fb68 <start_pass+0x628>
   1f911:	mov    %rax,%rbx
   1f914:	callq  3dec0 <jsimd_can_idct_float>
   1f919:	test   %eax,%eax
   1f91b:	jne    1fbae <start_pass+0x66e>
   1f921:	mov    %rbx,%rax
   1f924:	mov    -0xc0(%rbp),%rsi
   1f92b:	mov    -0xa0(%rbp),%rcx
   1f932:	mov    -0x68(%rbp),%rdx
   1f936:	mov    -0x60(%rbp),%r8
   1f93a:	mov    -0x110(%rbp),%rbx
   1f941:	mov    -0x98(%rbp),%r9
   1f948:	pushq  -0xa8(%rbp)
   1f94e:	popq   -0xb8(%rbp)
   1f954:	jmpq   1f723 <start_pass+0x1e3>
   1f959:	mov    -0x110(%rbp),%rbx
   1f960:	mov    %rcx,%r9
   1f963:	pushq  -0xf8(%rbp)
   1f969:	popq   -0xb8(%rbp)
   1f96f:	jmpq   1f723 <start_pass+0x1e3>
   1f974:	mov    -0x110(%rbp),%rbx
   1f97b:	mov    %rsi,%r9
   1f97e:	pushq  -0xf8(%rbp)
   1f984:	popq   -0xb8(%rbp)
   1f98a:	jmpq   1f723 <start_pass+0x1e3>
   1f98f:	mov    -0x110(%rbp),%rbx
   1f996:	pushq  -0xf8(%rbp)
   1f99c:	popq   -0xb8(%rbp)
   1f9a2:	jmpq   1f723 <start_pass+0x1e3>
   1f9a7:	mov    %r11,%r9
   1f9aa:	mov    -0x110(%rbp),%rbx
   1f9b1:	pushq  -0xf8(%rbp)
   1f9b7:	popq   -0xb8(%rbp)
   1f9bd:	jmpq   1f723 <start_pass+0x1e3>
   1f9c2:	mov    %r10,%r9
   1f9c5:	mov    -0x110(%rbp),%rbx
   1f9cc:	pushq  -0xf8(%rbp)
   1f9d2:	popq   -0xb8(%rbp)
   1f9d8:	jmpq   1f723 <start_pass+0x1e3>
   1f9dd:	mov    -0xe0(%rbp),%r9
   1f9e4:	mov    -0x110(%rbp),%rbx
   1f9eb:	pushq  -0xf8(%rbp)
   1f9f1:	popq   -0xb8(%rbp)
   1f9f7:	jmpq   1f723 <start_pass+0x1e3>
   1f9fc:	mov    -0x110(%rbp),%rbx
   1fa03:	mov    -0xe8(%rbp),%r9
   1fa0a:	pushq  -0xf8(%rbp)
   1fa10:	popq   -0xb8(%rbp)
   1fa16:	jmpq   1f723 <start_pass+0x1e3>
   1fa1b:	mov    -0x110(%rbp),%rbx
   1fa22:	jmpq   1f6e0 <start_pass+0x1a0>
   1fa27:	mov    %edi,0x58(%r11,%r10,4)
   1fa2c:	test   %edi,%edi
   1fa2e:	je     1fbe6 <start_pass+0x6a6>
   1fa34:	cmp    $0x1,%edi
   1fa37:	je     1fc3a <start_pass+0x6fa>
   1fa3d:	cmp    $0x2,%edi
   1fa40:	jne    1fbee <start_pass+0x6ae>
   1fa46:	mov    0x58(%rbx),%rsi
   1fa4a:	mov    %r15,-0x30(%rbp)
   1fa4e:	mov    %r14,-0x110(%rbp)
   1fa55:	xor    %eax,%eax
   1fa57:	lea    0x39f82(%rip),%r11        # 599e0 <aanscalefactor.6>
   1fa5e:	mov    %rax,%rcx
   1fa61:	mov    %rcx,%rdx
   1fa64:	jmpq   1fc8c <start_pass+0x74c>
   1fa69:	mov    %rbx,%rax
   1fa6c:	mov    -0xc0(%rbp),%rsi
   1fa73:	mov    -0xa0(%rbp),%rcx
   1fa7a:	mov    -0x68(%rbp),%rdx
   1fa7e:	mov    -0x60(%rbp),%r8
   1fa82:	mov    -0x110(%rbp),%rbx
   1fa89:	mov    -0x38(%rbp),%r9
   1fa8d:	pushq  -0xf8(%rbp)
   1fa93:	popq   -0xb8(%rbp)
   1fa99:	jmpq   1f723 <start_pass+0x1e3>
   1fa9e:	mov    %rbx,%rax
   1faa1:	mov    -0xc0(%rbp),%rsi
   1faa8:	mov    -0xa0(%rbp),%rcx
   1faaf:	mov    -0x68(%rbp),%rdx
   1fab3:	mov    -0x60(%rbp),%r8
   1fab7:	mov    -0x110(%rbp),%rbx
   1fabe:	mov    -0x48(%rbp),%r9
   1fac2:	pushq  -0xf8(%rbp)
   1fac8:	popq   -0xb8(%rbp)
   1face:	jmpq   1f723 <start_pass+0x1e3>
   1fad3:	test   %ecx,%ecx
   1fad5:	jne    1fb68 <start_pass+0x628>
   1fadb:	mov    %rax,%rbx
   1fade:	callq  3de40 <jsimd_can_idct_islow>
   1fae3:	test   %eax,%eax
   1fae5:	jne    1fcbf <start_pass+0x77f>
   1faeb:	mov    %rbx,%rax
   1faee:	mov    -0xc0(%rbp),%rsi
   1faf5:	mov    -0xa0(%rbp),%rcx
   1fafc:	mov    -0x68(%rbp),%rdx
   1fb00:	mov    -0x60(%rbp),%r8
   1fb04:	mov    -0x110(%rbp),%rbx
   1fb0b:	mov    -0x78(%rbp),%r9
   1fb0f:	pushq  -0xf8(%rbp)
   1fb15:	popq   -0xb8(%rbp)
   1fb1b:	jmpq   1f723 <start_pass+0x1e3>
   1fb20:	mov    %rax,%rbx
   1fb23:	callq  3de80 <jsimd_can_idct_ifast>
   1fb28:	test   %eax,%eax
   1fb2a:	jne    1fcf4 <start_pass+0x7b4>
   1fb30:	mov    %rbx,%rax
   1fb33:	mov    -0xc0(%rbp),%rsi
   1fb3a:	mov    -0xa0(%rbp),%rcx
   1fb41:	mov    -0x68(%rbp),%rdx
   1fb45:	mov    -0x60(%rbp),%r8
   1fb49:	mov    -0x110(%rbp),%rbx
   1fb50:	mov    -0x88(%rbp),%r9
   1fb57:	pushq  -0xb0(%rbp)
   1fb5d:	popq   -0xb8(%rbp)
   1fb63:	jmpq   1f723 <start_pass+0x1e3>
   1fb68:	mov    0x0(%r13),%rcx
   1fb6c:	movl   $0x30,0x28(%rcx)
   1fb73:	mov    0x0(%r13),%rcx
   1fb77:	mov    (%rcx),%rcx
   1fb7a:	mov    %rax,%rbx
   1fb7d:	mov    %r13,%rdi
   1fb80:	callq  *%rcx
   1fb82:	mov    %rbx,%rax
   1fb85:	mov    -0xc0(%rbp),%rsi
   1fb8c:	mov    -0xa0(%rbp),%rcx
   1fb93:	mov    -0x68(%rbp),%rdx
   1fb97:	mov    -0x60(%rbp),%r8
   1fb9b:	mov    -0x110(%rbp),%rbx
   1fba2:	mov    -0x100(%rbp),%r9
   1fba9:	jmpq   1f723 <start_pass+0x1e3>
   1fbae:	mov    %rbx,%rax
   1fbb1:	mov    -0xc0(%rbp),%rsi
   1fbb8:	mov    -0xa0(%rbp),%rcx
   1fbbf:	mov    -0x68(%rbp),%rdx
   1fbc3:	mov    -0x60(%rbp),%r8
   1fbc7:	mov    -0x110(%rbp),%rbx
   1fbce:	mov    -0x90(%rbp),%r9
   1fbd5:	pushq  -0xa8(%rbp)
   1fbdb:	popq   -0xb8(%rbp)
   1fbe1:	jmpq   1f723 <start_pass+0x1e3>
   1fbe6:	test   %edi,%edi
   1fbe8:	je     1fd29 <start_pass+0x7e9>
   1fbee:	mov    0x0(%r13),%rax
   1fbf2:	movl   $0x30,0x28(%rax)
   1fbf9:	mov    0x0(%r13),%rax
   1fbfd:	mov    (%rax),%rax
   1fc00:	mov    %r13,%rdi
   1fc03:	mov    %r15,-0x30(%rbp)
   1fc07:	mov    %r14,-0x110(%rbp)
   1fc0e:	callq  *%rax
   1fc10:	mov    -0x110(%rbp),%r14
   1fc17:	mov    -0x30(%rbp),%r15
   1fc1b:	mov    -0x58(%rbp),%rax
   1fc1f:	mov    -0xc0(%rbp),%rsi
   1fc26:	mov    -0xa0(%rbp),%rcx
   1fc2d:	mov    -0x68(%rbp),%rdx
   1fc31:	mov    -0x60(%rbp),%r8
   1fc35:	jmpq   1f741 <start_pass+0x201>
   1fc3a:	mov    0x58(%rbx),%rdx
   1fc3e:	mov    %r14,-0x110(%rbp)
   1fc45:	xor    %eax,%eax
   1fc47:	lea    0x39d12(%rip),%r8        # 59960 <aanscales.5>
   1fc4e:	jmpq   1fd54 <start_pass+0x814>
   1fc53:	movslq %ecx,%r8
   1fc56:	movzwl (%r9,%r8,2),%edi
   1fc5b:	movzwl %di,%edi
   1fc5e:	cvtsi2sd %rdi,%xmm0
   1fc63:	mulsd  (%r11,%r10,8),%xmm0
   1fc69:	movslq %eax,%rdi
   1fc6c:	mulsd  (%r11,%rdi,8),%xmm0
   1fc72:	cvtsd2ss %xmm0,%xmm0
   1fc76:	movss  %xmm0,(%rsi,%r8,4)
   1fc7c:	add    $0x1,%eax
   1fc7f:	add    $0x1,%ecx
   1fc82:	cmp    $0x7,%eax
   1fc85:	jle    1fc53 <start_pass+0x713>
   1fc87:	add    $0x1,%edx
   1fc8a:	xor    %eax,%eax
   1fc8c:	cmp    $0x7,%edx
   1fc8f:	jle    1fd7f <start_pass+0x83f>
   1fc95:	mov    -0x110(%rbp),%r14
   1fc9c:	mov    -0x30(%rbp),%r15
   1fca0:	mov    -0x58(%rbp),%rax
   1fca4:	mov    -0xc0(%rbp),%rsi
   1fcab:	mov    -0xa0(%rbp),%rcx
   1fcb2:	mov    -0x68(%rbp),%rdx
   1fcb6:	mov    -0x60(%rbp),%r8
   1fcba:	jmpq   1f741 <start_pass+0x201>
   1fcbf:	mov    %rbx,%rax
   1fcc2:	mov    -0xc0(%rbp),%rsi
   1fcc9:	mov    -0xa0(%rbp),%rcx
   1fcd0:	mov    -0x68(%rbp),%rdx
   1fcd4:	mov    -0x60(%rbp),%r8
   1fcd8:	mov    -0x110(%rbp),%rbx
   1fcdf:	mov    -0x70(%rbp),%r9
   1fce3:	pushq  -0xf8(%rbp)
   1fce9:	popq   -0xb8(%rbp)
   1fcef:	jmpq   1f723 <start_pass+0x1e3>
   1fcf4:	mov    %rbx,%rax
   1fcf7:	mov    -0xc0(%rbp),%rsi
   1fcfe:	mov    -0xa0(%rbp),%rcx
   1fd05:	mov    -0x68(%rbp),%rdx
   1fd09:	mov    -0x60(%rbp),%r8
   1fd0d:	mov    -0x110(%rbp),%rbx
   1fd14:	mov    -0x80(%rbp),%r9
   1fd18:	pushq  -0xb0(%rbp)
   1fd1e:	popq   -0xb8(%rbp)
   1fd24:	jmpq   1f723 <start_pass+0x1e3>
   1fd29:	mov    0x58(%rbx),%rdx
   1fd2d:	xor    %ecx,%ecx
   1fd2f:	jmp    1fd96 <start_pass+0x856>
   1fd31:	movslq %eax,%rdi
   1fd34:	movswq (%r8,%rdi,2),%rcx
   1fd39:	movzwl (%r9,%rdi,2),%esi
   1fd3e:	imul   %rsi,%rcx
   1fd42:	add    $0x800,%rcx
   1fd49:	sar    $0xc,%rcx
   1fd4d:	mov    %cx,(%rdx,%rdi,2)
   1fd51:	add    $0x1,%eax
   1fd54:	cmp    $0x3f,%eax
   1fd57:	jle    1fd31 <start_pass+0x7f1>
   1fd59:	mov    -0x110(%rbp),%r14
   1fd60:	mov    -0x58(%rbp),%rax
   1fd64:	mov    -0xc0(%rbp),%rsi
   1fd6b:	mov    -0xa0(%rbp),%rcx
   1fd72:	mov    -0x68(%rbp),%rdx
   1fd76:	mov    -0x60(%rbp),%r8
   1fd7a:	jmpq   1f741 <start_pass+0x201>
   1fd7f:	movslq %edx,%r10
   1fd82:	jmpq   1fc82 <start_pass+0x742>
   1fd87:	movslq %ecx,%rdi
   1fd8a:	movswq (%r9,%rdi,2),%rsi
   1fd8f:	mov    %si,(%rdx,%rdi,2)
   1fd93:	add    $0x1,%ecx
   1fd96:	cmp    $0x3f,%ecx
   1fd99:	jle    1fd87 <start_pass+0x847>
   1fd9b:	mov    -0xc0(%rbp),%rsi
   1fda2:	mov    -0xa0(%rbp),%rcx
   1fda9:	mov    -0x68(%rbp),%rdx
   1fdad:	mov    -0x60(%rbp),%r8
   1fdb1:	jmpq   1f741 <start_pass+0x201>
   1fdb6:	nopw   %cs:0x0(%rax,%rax,1)

000000000001fdc0 <jinit_huff_decoder>:
   1fdc0:	push   %rbp
   1fdc1:	mov    %rsp,%rbp
   1fdc4:	sub    $0x10,%rsp
   1fdc8:	mov    %r15,-0x8(%rbp)
   1fdcc:	mov    %rdi,%r15
   1fdcf:	callq  20610 <std_huff_tables>
   1fdd4:	mov    0x8(%r15),%rax
   1fdd8:	mov    (%rax),%rax
   1fddb:	mov    $0x1,%esi
   1fde0:	mov    $0x170,%edx
   1fde5:	mov    %r15,%rdi
   1fde8:	callq  *%rax
   1fdea:	mov    %rax,0x250(%r15)
   1fdf1:	lea    0x8c8(%rip),%rcx        # 206c0 <start_pass_huff_decoder>
   1fdf8:	mov    %rcx,(%rax)
   1fdfb:	lea    0x1fae(%rip),%rcx        # 21db0 <decode_mcu>
   1fe02:	mov    %rcx,0x8(%rax)
   1fe06:	xor    %ecx,%ecx
   1fe08:	jmp    1fe22 <jinit_huff_decoder+0x62>
   1fe0a:	movslq %ecx,%rdx
   1fe0d:	movq   $0x0,0x60(%rax,%rdx,8)
   1fe16:	movq   $0x0,0x40(%rax,%rdx,8)
   1fe1f:	add    $0x1,%ecx
   1fe22:	cmp    $0x3,%ecx
   1fe25:	jle    1fe0a <jinit_huff_decoder+0x4a>
   1fe27:	mov    -0x8(%rbp),%r15
   1fe2b:	leaveq 
   1fe2c:	retq   
   1fe2d:	nopl   (%rax)

000000000001fe30 <jpeg_make_d_derived_tbl>:
   1fe30:	push   %rbp
   1fe31:	mov    %rsp,%rbp
   1fe34:	sub    $0x560,%rsp
   1fe3b:	mov    %r12,-0x20(%rbp)
   1fe3f:	mov    %r13,-0x28(%rbp)
   1fe43:	mov    %r14,-0x30(%rbp)
   1fe47:	mov    %r15,-0x38(%rbp)
   1fe4b:	mov    %rbx,-0x18(%rbp)
   1fe4f:	mov    %rsi,-0x40(%rbp)
   1fe53:	test   %edx,%edx
   1fe55:	js     1fe6a <jpeg_make_d_derived_tbl+0x3a>
   1fe57:	cmp    $0x3,%edx
   1fe5a:	jg     1fe6a <jpeg_make_d_derived_tbl+0x3a>
   1fe5c:	mov    %rcx,%rbx
   1fe5f:	mov    %rsi,%r12
   1fe62:	mov    %rdi,%r14
   1fe65:	mov    %rdx,%r15
   1fe68:	jmp    1fe8e <jpeg_make_d_derived_tbl+0x5e>
   1fe6a:	mov    (%rdi),%rax
   1fe6d:	movl   $0x32,0x28(%rax)
   1fe74:	mov    (%rdi),%rax
   1fe77:	mov    %edx,0x2c(%rax)
   1fe7a:	mov    (%rdi),%rax
   1fe7d:	mov    (%rax),%rax
   1fe80:	mov    %rcx,%rbx
   1fe83:	mov    %rsi,%r12
   1fe86:	mov    %rdx,%r15
   1fe89:	mov    %rdi,%r14
   1fe8c:	callq  *%rax
   1fe8e:	test   %r12d,%r12d
   1fe91:	jne    1fea0 <jpeg_make_d_derived_tbl+0x70>
   1fe93:	movslq %r15d,%rax
   1fe96:	mov    0x108(%r14,%rax,8),%r13
   1fe9e:	jmp    1feab <jpeg_make_d_derived_tbl+0x7b>
   1fea0:	movslq %r15d,%rax
   1fea3:	mov    0xe8(%r14,%rax,8),%r13
   1feab:	test   %r13,%r13
   1feae:	jne    1fecc <jpeg_make_d_derived_tbl+0x9c>
   1feb0:	mov    (%r14),%rax
   1feb3:	movl   $0x32,0x28(%rax)
   1feba:	mov    (%r14),%rax
   1febd:	mov    %r15d,0x2c(%rax)
   1fec1:	mov    (%r14),%rax
   1fec4:	mov    (%rax),%rax
   1fec7:	mov    %r14,%rdi
   1feca:	callq  *%rax
   1fecc:	mov    $0x1,%r15d
   1fed2:	mov    (%rbx),%rax
   1fed5:	test   %rax,%rax
   1fed8:	jne    1fef1 <jpeg_make_d_derived_tbl+0xc1>
   1feda:	mov    0x8(%r14),%rax
   1fede:	mov    (%rax),%rax
   1fee1:	mov    $0x528,%edx
   1fee6:	mov    %r14,%rdi
   1fee9:	mov    %r15,%rsi
   1feec:	callq  *%rax
   1feee:	mov    %rax,(%rbx)
   1fef1:	mov    (%rbx),%rax
   1fef4:	mov    %rax,-0x50(%rbp)
   1fef8:	mov    %r13,0x120(%rax)
   1feff:	xor    %r12d,%r12d
   1ff02:	jmp    1ff1e <jpeg_make_d_derived_tbl+0xee>
   1ff04:	movslq %r12d,%rax
   1ff07:	mov    %r15b,-0x555(%rbp,%rax,1)
   1ff0f:	add    $0x1,%r12d
   1ff13:	add    $0xffffffff,%ebx
   1ff16:	test   %ebx,%ebx
   1ff18:	jne    1ff04 <jpeg_make_d_derived_tbl+0xd4>
   1ff1a:	add    $0x1,%r15d
   1ff1e:	cmp    $0x10,%r15d
   1ff22:	jle    1ff42 <jpeg_make_d_derived_tbl+0x112>
   1ff24:	movslq %r12d,%rax
   1ff27:	movb   $0x0,-0x555(%rbp,%rax,1)
   1ff2f:	movsbq -0x555(%rbp),%rcx
   1ff37:	mov    %r13,-0x48(%rbp)
   1ff3b:	xor    %ebx,%ebx
   1ff3d:	mov    %rbx,%r13
   1ff40:	jmp    1ff95 <jpeg_make_d_derived_tbl+0x165>
   1ff42:	movslq %r15d,%rax
   1ff45:	movzbl 0x0(%r13,%rax,1),%ebx
   1ff4b:	lea    (%r12,%rbx,1),%eax
   1ff4f:	cmp    $0x100,%eax
   1ff54:	jle    1ff16 <jpeg_make_d_derived_tbl+0xe6>
   1ff56:	mov    (%r14),%rax
   1ff59:	movl   $0x8,0x28(%rax)
   1ff60:	mov    (%r14),%rax
   1ff63:	mov    (%rax),%rax
   1ff66:	mov    %r14,%rdi
   1ff69:	callq  *%rax
   1ff6b:	jmp    1ff16 <jpeg_make_d_derived_tbl+0xe6>
   1ff6d:	mov    (%r14),%rax
   1ff70:	movl   $0x8,0x28(%rax)
   1ff77:	mov    (%r14),%rax
   1ff7a:	mov    (%rax),%rax
   1ff7d:	mov    %r14,%rdi
   1ff80:	mov    %r12,-0x10(%rbp)
   1ff84:	mov    %rcx,%r12
   1ff87:	callq  *%rax
   1ff89:	mov    %r12,%rcx
   1ff8c:	add    $0x1,%ecx
   1ff8f:	add    %ebx,%ebx
   1ff91:	mov    -0x10(%rbp),%r12
   1ff95:	movslq %r13d,%rax
   1ff98:	movsbq -0x555(%rbp,%rax,1),%rax
   1ffa1:	test   %al,%al
   1ffa3:	jne    1ffc4 <jpeg_make_d_derived_tbl+0x194>
   1ffa5:	mov    -0x50(%rbp),%r8
   1ffa9:	mov    -0x48(%rbp),%rbx
   1ffad:	xor    %eax,%eax
   1ffaf:	mov    $0x1,%ecx
   1ffb4:	jmp    20018 <jpeg_make_d_derived_tbl+0x1e8>
   1ffb6:	mov    %ebx,-0x454(%rbp,%rdx,4)
   1ffbd:	add    $0x1,%ebx
   1ffc0:	add    $0x1,%r13d
   1ffc4:	movslq %r13d,%rdx
   1ffc7:	movsbq -0x555(%rbp,%rdx,1),%rax
   1ffd0:	cmp    %eax,%ecx
   1ffd2:	je     1ffb6 <jpeg_make_d_derived_tbl+0x186>
   1ffd4:	mov    $0x1,%eax
   1ffd9:	shl    %cl,%rax
   1ffdc:	mov    %ebx,%edx
   1ffde:	cmp    %rdx,%rax
   1ffe1:	jle    1ff6d <jpeg_make_d_derived_tbl+0x13d>
   1ffe3:	mov    %r12,-0x10(%rbp)
   1ffe7:	jmp    1ff8c <jpeg_make_d_derived_tbl+0x15c>
   1ffe9:	movslq %eax,%rdx
   1ffec:	mov    -0x454(%rbp,%rdx,4),%esi
   1fff3:	sub    %rsi,%rdx
   1fff6:	mov    %rdx,0x90(%r8,%rdi,8)
   1fffe:	movzbl (%rbx,%rdi,1),%edx
   20002:	add    %edx,%eax
   20004:	lea    -0x1(%rax),%edx
   20007:	movslq %edx,%rdx
   2000a:	mov    -0x454(%rbp,%rdx,4),%edx
   20011:	mov    %rdx,(%r8,%rdi,8)
   20015:	add    $0x1,%ecx
   20018:	cmp    $0x10,%ecx
   2001b:	jle    20037 <jpeg_make_d_derived_tbl+0x207>
   2001d:	movq   $0x0,0x118(%r8)
   20028:	movq   $0xfffff,0x88(%r8)
   20033:	xor    %eax,%eax
   20035:	jmp    2005e <jpeg_make_d_derived_tbl+0x22e>
   20037:	movslq %ecx,%rdi
   2003a:	movzbl (%rbx,%rdi,1),%edx
   2003e:	test   %dl,%dl
   20040:	jne    1ffe9 <jpeg_make_d_derived_tbl+0x1b9>
   20042:	movq   $0xffffffffffffffff,(%r8,%rdi,8)
   2004a:	jmp    20015 <jpeg_make_d_derived_tbl+0x1e5>
   2004c:	movslq %eax,%rcx
   2004f:	movl   $0x900,0x128(%r8,%rcx,4)
   2005b:	add    $0x1,%eax
   2005e:	cmp    $0xff,%eax
   20063:	jle    2004c <jpeg_make_d_derived_tbl+0x21c>
   20065:	mov    $0x8,%ecx
   2006a:	mov    %r12,-0x10(%rbp)
   2006e:	mov    %r14,-0x8(%rbp)
   20072:	xor    %esi,%esi
   20074:	mov    $0x1,%edx
   20079:	mov    %rdx,%rax
   2007c:	jmp    200c1 <jpeg_make_d_derived_tbl+0x291>
   2007e:	movzbl 0x11(%rbx,%r11,1),%r12d
   20084:	lea    (%r12,%rdi,1),%r13d
   20088:	movslq %eax,%r12
   2008b:	mov    %r13d,0x128(%r8,%r12,4)
   20093:	add    $0x1,%eax
   20096:	add    $0xffffffff,%ecx
   20099:	test   %ecx,%ecx
   2009b:	jg     2007e <jpeg_make_d_derived_tbl+0x24e>
   2009d:	add    $0x1,%esi
   200a0:	add    $0x1,%edx
   200a3:	mov    -0x50(%rbp),%rcx
   200a7:	movzbl (%rbx,%r9,1),%eax
   200ac:	cmp    %edx,%eax
   200ae:	jge    200db <jpeg_make_d_derived_tbl+0x2ab>
   200b0:	mov    -0x48(%rbp),%rax
   200b4:	add    $0x1,%eax
   200b7:	mov    $0x8,%ecx
   200bc:	mov    $0x1,%edx
   200c1:	cmp    $0x8,%eax
   200c4:	jle    200f1 <jpeg_make_d_derived_tbl+0x2c1>
   200c6:	mov    -0x40(%rbp),%rax
   200ca:	test   %eax,%eax
   200cc:	je     20108 <jpeg_make_d_derived_tbl+0x2d8>
   200ce:	xor    %r12d,%r12d
   200d1:	mov    -0x8(%rbp),%r13
   200d5:	mov    -0x10(%rbp),%r14
   200d9:	jmp    20145 <jpeg_make_d_derived_tbl+0x315>
   200db:	movslq %esi,%r11
   200de:	movslq -0x454(%rbp,%r11,4),%rax
   200e6:	shl    %cl,%eax
   200e8:	mov    %rcx,-0x50(%rbp)
   200ec:	mov    %r10,%rcx
   200ef:	jmp    20099 <jpeg_make_d_derived_tbl+0x269>
   200f1:	movslq %eax,%r9
   200f4:	mov    %rax,%rdi
   200f7:	shl    $0x8,%edi
   200fa:	sub    %eax,%ecx
   200fc:	mov    %rdx,%r10
   200ff:	shl    %cl,%r10d
   20102:	mov    %rax,-0x48(%rbp)
   20106:	jmp    200a7 <jpeg_make_d_derived_tbl+0x277>
   20108:	mov    -0x18(%rbp),%rbx
   2010c:	mov    -0x38(%rbp),%r15
   20110:	mov    -0x30(%rbp),%r14
   20114:	mov    -0x28(%rbp),%r13
   20118:	mov    -0x20(%rbp),%r12
   2011c:	leaveq 
   2011d:	retq   
   2011e:	movslq %r12d,%rax
   20121:	movzbl 0x11(%rbx,%rax,1),%eax
   20126:	cmp    $0xf,%al
   20128:	jbe    20141 <jpeg_make_d_derived_tbl+0x311>
   2012a:	mov    0x0(%r13),%rax
   2012e:	movl   $0x8,0x28(%rax)
   20135:	mov    0x0(%r13),%rax
   20139:	mov    (%rax),%rax
   2013c:	mov    %r13,%rdi
   2013f:	callq  *%rax
   20141:	add    $0x1,%r12d
   20145:	cmp    %r14d,%r12d
   20148:	jl     2011e <jpeg_make_d_derived_tbl+0x2ee>
   2014a:	mov    -0x18(%rbp),%rbx
   2014e:	mov    -0x38(%rbp),%r15
   20152:	mov    -0x30(%rbp),%r14
   20156:	mov    -0x28(%rbp),%r13
   2015a:	mov    -0x20(%rbp),%r12
   2015e:	leaveq 
   2015f:	retq   

0000000000020160 <jpeg_fill_bit_buffer>:
   20160:	push   %rbp
   20161:	mov    %rsp,%rbp
   20164:	sub    $0x30,%rsp
   20168:	mov    (%rdi),%r8
   2016b:	mov    0x8(%rdi),%rax
   2016f:	mov    0x20(%rdi),%r10
   20173:	movslq 0x21c(%r10),%r9
   2017a:	test   %r9d,%r9d
   2017d:	je     201a7 <jpeg_fill_bit_buffer+0x47>
   2017f:	mov    %rbx,%r9
   20182:	mov    %rsi,%rbx
   20185:	mov    %rcx,%rsi
   20188:	mov    %r14,%rcx
   2018b:	mov    %r10,%r14
   2018e:	mov    %r12,%r10
   20191:	mov    %rdi,%r12
   20194:	mov    %r13,%r11
   20197:	mov    %rdx,%r13
   2019a:	cmp    %esi,%r13d
   2019d:	jl     201d9 <jpeg_fill_bit_buffer+0x79>
   2019f:	mov    %rcx,%r14
   201a2:	jmpq   20262 <jpeg_fill_bit_buffer+0x102>
   201a7:	mov    $0xff,%r9d
   201ad:	mov    %rbx,-0x8(%rbp)
   201b1:	mov    %r12,-0x10(%rbp)
   201b5:	mov    %r13,-0x18(%rbp)
   201b9:	mov    %r14,-0x20(%rbp)
   201bd:	mov    %r15,-0x28(%rbp)
   201c1:	mov    %rcx,-0x30(%rbp)
   201c5:	mov    %rsi,%rbx
   201c8:	mov    %rdi,%r12
   201cb:	mov    %rdx,%r13
   201ce:	mov    %r10,%r14
   201d1:	mov    %r9,%r15
   201d4:	jmpq   20296 <jpeg_fill_bit_buffer+0x136>
   201d9:	mov    0x250(%r14),%rdx
   201e0:	movslq 0x10(%rdx),%rdx
   201e4:	test   %edx,%edx
   201e6:	je     201f0 <jpeg_fill_bit_buffer+0x90>
   201e8:	mov    %rcx,%r14
   201eb:	mov    %r13,%rcx
   201ee:	jmp    20254 <jpeg_fill_bit_buffer+0xf4>
   201f0:	mov    (%r14),%rdx
   201f3:	movl   $0x75,0x28(%rdx)
   201fa:	mov    (%r14),%rdx
   201fd:	mov    0x8(%rdx),%rdx
   20201:	mov    $0xffffffffffffffff,%rsi
   20208:	mov    %r14,%rdi
   2020b:	mov    %rax,-0x8(%rbp)
   2020f:	mov    %r9,-0x10(%rbp)
   20213:	mov    %r10,-0x18(%rbp)
   20217:	mov    %r11,-0x20(%rbp)
   2021b:	mov    %rcx,-0x28(%rbp)
   2021f:	mov    %r15,-0x30(%rbp)
   20223:	mov    %r8,%r15
   20226:	callq  *%rdx
   20228:	mov    0x250(%r14),%rax
   2022f:	movl   $0x1,0x10(%rax)
   20236:	mov    %r13,%rcx
   20239:	mov    %r15,%r8
   2023c:	mov    -0x30(%rbp),%r15
   20240:	mov    -0x28(%rbp),%r14
   20244:	mov    -0x20(%rbp),%r11
   20248:	mov    -0x18(%rbp),%r10
   2024c:	mov    -0x10(%rbp),%r9
   20250:	mov    -0x8(%rbp),%rax
   20254:	mov    $0x39,%r13d
   2025a:	neg    %ecx
   2025c:	add    %r13d,%ecx
   2025f:	shl    %cl,%rbx
   20262:	mov    %r8,(%r12)
   20266:	mov    %rax,0x8(%r12)
   2026b:	mov    %rbx,0x10(%r12)
   20270:	mov    %r13d,0x18(%r12)
   20275:	mov    %r9,%rbx
   20278:	mov    %r10,%r12
   2027b:	mov    %r11,%r13
   2027e:	mov    $0x1,%eax
   20283:	leaveq 
   20284:	retq   
   20285:	mov    %rdx,%r8
   20288:	movslq %ecx,%rcx
   2028b:	shl    $0x8,%rbx
   2028f:	add    %rcx,%rbx
   20292:	add    $0x8,%r13d
   20296:	cmp    $0x38,%r13d
   2029a:	jle    202b2 <jpeg_fill_bit_buffer+0x152>
   2029c:	mov    -0x28(%rbp),%r15
   202a0:	mov    -0x20(%rbp),%r14
   202a4:	mov    -0x18(%rbp),%r11
   202a8:	mov    -0x10(%rbp),%r10
   202ac:	mov    -0x8(%rbp),%r9
   202b0:	jmp    20262 <jpeg_fill_bit_buffer+0x102>
   202b2:	test   %rax,%rax
   202b5:	je     202ec <jpeg_fill_bit_buffer+0x18c>
   202b7:	add    $0xffffffffffffffff,%rax
   202bb:	lea    0x1(%r8),%rdx
   202bf:	movzbl (%r8),%ecx
   202c3:	cmp    $0xff,%cl
   202c6:	jne    20285 <jpeg_fill_bit_buffer+0x125>
   202c8:	test   %rax,%rax
   202cb:	je     2030a <jpeg_fill_bit_buffer+0x1aa>
   202cd:	mov    %rdx,%rcx
   202d0:	add    $0xffffffffffffffff,%rax
   202d4:	lea    0x1(%rcx),%rdx
   202d8:	movzbl (%rcx),%ecx
   202db:	cmp    $0xff,%cl
   202de:	je     202c8 <jpeg_fill_bit_buffer+0x168>
   202e0:	test   %cl,%cl
   202e2:	jne    20328 <jpeg_fill_bit_buffer+0x1c8>
   202e4:	mov    %rdx,%r8
   202e7:	mov    %r15,%rcx
   202ea:	jmp    20288 <jpeg_fill_bit_buffer+0x128>
   202ec:	mov    0x28(%r14),%rax
   202f0:	mov    0x18(%rax),%rax
   202f4:	mov    %r14,%rdi
   202f7:	callq  *%rax
   202f9:	test   %eax,%eax
   202fb:	je     2034f <jpeg_fill_bit_buffer+0x1ef>
   202fd:	mov    0x28(%r14),%rax
   20301:	mov    (%rax),%r8
   20304:	mov    0x8(%rax),%rax
   20308:	jmp    202b7 <jpeg_fill_bit_buffer+0x157>
   2030a:	mov    0x28(%r14),%rax
   2030e:	mov    0x18(%rax),%rax
   20312:	mov    %r14,%rdi
   20315:	callq  *%rax
   20317:	test   %eax,%eax
   20319:	je     20367 <jpeg_fill_bit_buffer+0x207>
   2031b:	mov    0x28(%r14),%rax
   2031f:	mov    (%rax),%rcx
   20322:	mov    0x8(%rax),%rax
   20326:	jmp    202d0 <jpeg_fill_bit_buffer+0x170>
   20328:	mov    %ecx,0x21c(%r14)
   2032f:	mov    %rdx,%r8
   20332:	mov    -0x30(%rbp),%rsi
   20336:	mov    -0x28(%rbp),%r15
   2033a:	mov    -0x20(%rbp),%rcx
   2033e:	mov    -0x18(%rbp),%r11
   20342:	mov    -0x10(%rbp),%r10
   20346:	mov    -0x8(%rbp),%r9
   2034a:	jmpq   2019a <jpeg_fill_bit_buffer+0x3a>
   2034f:	xor    %eax,%eax
   20351:	mov    -0x28(%rbp),%r15
   20355:	mov    -0x20(%rbp),%r14
   20359:	mov    -0x18(%rbp),%r13
   2035d:	mov    -0x10(%rbp),%r12
   20361:	mov    -0x8(%rbp),%rbx
   20365:	leaveq 
   20366:	retq   
   20367:	xor    %eax,%eax
   20369:	mov    -0x28(%rbp),%r15
   2036d:	mov    -0x20(%rbp),%r14
   20371:	mov    -0x18(%rbp),%r13
   20375:	mov    -0x10(%rbp),%r12
   20379:	mov    -0x8(%rbp),%rbx
   2037d:	leaveq 
   2037e:	retq   
   2037f:	nop

0000000000020380 <jpeg_huff_decode>:
   20380:	push   %rbp
   20381:	mov    %rsp,%rbp
   20384:	sub    $0x30,%rsp
   20388:	mov    %r15,-0x18(%rbp)
   2038c:	cmp    %edx,%r8d
   2038f:	jg     203d9 <jpeg_huff_decode+0x59>
   20391:	mov    %rbx,%r9
   20394:	mov    %r12,%r10
   20397:	mov    %rdi,%r12
   2039a:	mov    %r13,%r11
   2039d:	mov    %rcx,%r13
   203a0:	mov    %r8,%rcx
   203a3:	mov    $0x1,%r15d
   203a9:	mov    %r15,%rax
   203ac:	shl    %cl,%eax
   203ae:	mov    %rcx,%rbx
   203b1:	add    $0xffffffff,%eax
   203b4:	mov    %rdx,%rcx
   203b7:	sub    %ebx,%ecx
   203b9:	mov    %r14,%rdx
   203bc:	mov    %rsi,%rdi
   203bf:	shr    %cl,%rdi
   203c2:	and    %edi,%eax
   203c4:	movslq %eax,%r14
   203c7:	mov    %r9,-0x8(%rbp)
   203cb:	mov    %r10,-0x10(%rbp)
   203cf:	mov    %r11,-0x20(%rbp)
   203d3:	mov    %rdx,-0x28(%rbp)
   203d7:	jmp    2044a <jpeg_huff_decode+0xca>
   203d9:	mov    %rdi,%rax
   203dc:	mov    %r8,%r9
   203df:	mov    %r8,-0x28(%rbp)
   203e3:	mov    %rcx,-0x20(%rbp)
   203e7:	mov    %r9,%rcx
   203ea:	mov    %r12,%r15
   203ed:	mov    %rdi,%r12
   203f0:	mov    %rax,%rdi
   203f3:	callq  4410 <jpeg_fill_bit_buffer@plt>
   203f8:	test   %eax,%eax
   203fa:	jne    20493 <jpeg_huff_decode+0x113>
   20400:	mov    %r15,%r12
   20403:	mov    $0xffffffffffffffff,%rax
   2040a:	mov    -0x18(%rbp),%r15
   2040e:	leaveq 
   2040f:	retq   
   20410:	test   %ecx,%ecx
   20412:	jg     20434 <jpeg_huff_decode+0xb4>
   20414:	mov    %rcx,%rdx
   20417:	mov    %r12,%rdi
   2041a:	mov    %r15,%rcx
   2041d:	callq  4410 <jpeg_fill_bit_buffer@plt>
   20422:	test   %eax,%eax
   20424:	je     204b3 <jpeg_huff_decode+0x133>
   2042a:	mov    0x10(%r12),%rsi
   2042f:	movslq 0x18(%r12),%rcx
   20434:	add    $0x1,%ebx
   20437:	add    $0xffffffff,%ecx
   2043a:	mov    %rsi,%rax
   2043d:	shr    %cl,%rax
   20440:	and    $0x1,%eax
   20443:	movslq %eax,%rax
   20446:	lea    (%rax,%r14,2),%r14
   2044a:	movslq %ebx,%rdx
   2044d:	mov    0x0(%r13,%rdx,8),%rax
   20452:	cmp    %r14,%rax
   20455:	jl     20410 <jpeg_huff_decode+0x90>
   20457:	mov    %rsi,0x10(%r12)
   2045c:	mov    %ecx,0x18(%r12)
   20461:	cmp    $0x10,%ebx
   20464:	jg     204d0 <jpeg_huff_decode+0x150>
   20466:	add    0x90(%r13,%rdx,8),%r14
   2046e:	movslq %r14d,%rax
   20471:	mov    0x120(%r13),%rcx
   20478:	movzbl 0x11(%rcx,%rax,1),%eax
   2047d:	mov    -0x28(%rbp),%r14
   20481:	mov    -0x20(%rbp),%r13
   20485:	mov    -0x10(%rbp),%r12
   20489:	mov    -0x8(%rbp),%rbx
   2048d:	mov    -0x18(%rbp),%r15
   20491:	leaveq 
   20492:	retq   
   20493:	mov    0x10(%r12),%rsi
   20498:	movslq 0x18(%r12),%rdx
   2049d:	mov    %rbx,%r9
   204a0:	mov    %r15,%r10
   204a3:	mov    %r13,%r11
   204a6:	mov    -0x20(%rbp),%r13
   204aa:	mov    -0x28(%rbp),%rcx
   204ae:	jmpq   203a3 <jpeg_huff_decode+0x23>
   204b3:	mov    -0x28(%rbp),%r14
   204b7:	mov    -0x20(%rbp),%r13
   204bb:	mov    -0x10(%rbp),%r12
   204bf:	mov    -0x8(%rbp),%rbx
   204c3:	mov    $0xffffffffffffffff,%rax
   204ca:	mov    -0x18(%rbp),%r15
   204ce:	leaveq 
   204cf:	retq   
   204d0:	mov    0x20(%r12),%rax
   204d5:	mov    (%rax),%rax
   204d8:	movl   $0x76,0x28(%rax)
   204df:	mov    0x20(%r12),%rdi
   204e4:	mov    (%rdi),%rax
   204e7:	mov    0x8(%rax),%rax
   204eb:	mov    $0xffffffffffffffff,%rsi
   204f2:	callq  *%rax
   204f4:	xor    %eax,%eax
   204f6:	mov    -0x28(%rbp),%r14
   204fa:	mov    -0x20(%rbp),%r13
   204fe:	mov    -0x10(%rbp),%r12
   20502:	mov    -0x8(%rbp),%rbx
   20506:	mov    -0x18(%rbp),%r15
   2050a:	leaveq 
   2050b:	retq   
   2050c:	nopl   0x0(%rax)

0000000000020510 <add_huff_table>:
   20510:	push   %rbp
   20511:	mov    %rsp,%rbp
   20514:	sub    $0x20,%rsp
   20518:	mov    (%rsi),%rax
   2051b:	test   %rax,%rax
   2051e:	je     20522 <add_huff_table+0x12>
   20520:	leaveq 
   20521:	retq   
   20522:	mov    %rdi,%rax
   20525:	mov    %r12,-0x8(%rbp)
   20529:	mov    %r13,-0x10(%rbp)
   2052d:	mov    %r14,-0x18(%rbp)
   20531:	mov    %r15,-0x20(%rbp)
   20535:	mov    %rsi,%r12
   20538:	mov    %rcx,%r13
   2053b:	mov    %rdi,%r14
   2053e:	mov    %rax,%rdi
   20541:	mov    %rdx,%r15
   20544:	callq  44a0 <jpeg_alloc_huff_table@plt>
   20549:	mov    %rax,%rdi
   2054c:	mov    %rdi,(%r12)
   20550:	mov    $0x11,%edx
   20555:	mov    %r15,%rsi
   20558:	callq  42c0 <memcpy@plt>
   2055d:	xor    %edx,%edx
   2055f:	mov    $0x1,%r8d
   20565:	mov    %rdx,%rax
   20568:	jmp    20578 <add_huff_table+0x68>
   2056a:	movslq %r8d,%rcx
   2056d:	movzbl (%r15,%rcx,1),%ecx
   20572:	add    %ecx,%eax
   20574:	add    $0x1,%r8d
   20578:	cmp    $0x10,%r8d
   2057c:	jle    2056a <add_huff_table+0x5a>
   2057e:	test   %eax,%eax
   20580:	jle    2058e <add_huff_table+0x7e>
   20582:	cmp    $0x100,%eax
   20587:	jg     2058e <add_huff_table+0x7e>
   20589:	mov    %rdx,%r14
   2058c:	jmp    205ac <add_huff_table+0x9c>
   2058e:	mov    (%r14),%rcx
   20591:	movl   $0x8,0x28(%rcx)
   20598:	mov    (%r14),%rcx
   2059b:	mov    (%rcx),%rcx
   2059e:	mov    %r14,%rdi
   205a1:	mov    %rdx,%r14
   205a4:	mov    %rax,%r15
   205a7:	callq  *%rcx
   205a9:	mov    %r15,%rax
   205ac:	mov    (%r12),%rdi
   205b0:	add    $0x11,%rdi
   205b4:	mov    %r13,%rsi
   205b7:	mov    %rax,%r13
   205ba:	movslq %r13d,%r15
   205bd:	mov    %r15,%rdx
   205c0:	callq  42c0 <memcpy@plt>
   205c5:	mov    (%r12),%rax
   205c9:	lea    0x11(%rax,%r15,1),%rdi
   205ce:	mov    $0x100,%eax
   205d3:	sub    %r13d,%eax
   205d6:	movslq %eax,%rdx
   205d9:	mov    %r14,%rsi
   205dc:	callq  41e0 <memset@plt>
   205e1:	mov    (%r12),%rax
   205e5:	movl   $0x0,0x114(%rax)
   205ef:	mov    -0x20(%rbp),%r15
   205f3:	mov    -0x18(%rbp),%r14
   205f7:	mov    -0x10(%rbp),%r13
   205fb:	mov    -0x8(%rbp),%r12
   205ff:	leaveq 
   20600:	retq   
   20601:	data16 nopw %cs:0x0(%rax,%rax,1)
   2060c:	nopl   0x0(%rax)

0000000000020610 <std_huff_tables>:
   20610:	push   %rbp
   20611:	mov    %rsp,%rbp
   20614:	sub    $0x20,%rsp
   20618:	mov    %r13,-0x8(%rbp)
   2061c:	mov    %r14,-0x10(%rbp)
   20620:	mov    %r15,-0x18(%rbp)
   20624:	movslq 0x20(%rdi),%rax
   20628:	test   %eax,%eax
   2062a:	jne    2063c <std_huff_tables+0x2c>
   2062c:	lea    0x80(%rdi),%r15
   20633:	lea    0xa0(%rdi),%r13
   2063a:	jmp    2064a <std_huff_tables+0x3a>
   2063c:	lea    0xe8(%rdi),%r15
   20643:	lea    0x108(%rdi),%r13
   2064a:	lea    0x393cf(%rip),%rdx        # 59a20 <bits_dc_luminance.9>
   20651:	lea    0x393d9(%rip),%rcx        # 59a31 <val_dc_luminance.10>
   20658:	mov    %rdi,%r14
   2065b:	mov    %r15,%rsi
   2065e:	callq  20510 <add_huff_table>
   20663:	lea    0x393f0(%rip),%rdx        # 59a5a <bits_ac_luminance.13>
   2066a:	lea    0x393fa(%rip),%rcx        # 59a6b <val_ac_luminance.14>
   20671:	mov    %r14,%rdi
   20674:	mov    %r13,%rsi
   20677:	callq  20510 <add_huff_table>
   2067c:	lea    0x8(%r15),%rsi
   20680:	lea    0x393b6(%rip),%rdx        # 59a3d <bits_dc_chrominance.11>
   20687:	lea    0x393c0(%rip),%rcx        # 59a4e <val_dc_chrominance.12>
   2068e:	mov    %r14,%rdi
   20691:	callq  20510 <add_huff_table>
   20696:	lea    0x8(%r13),%rsi
   2069a:	mov    %r14,%rdi
   2069d:	lea    0x39469(%rip),%rdx        # 59b0d <bits_ac_chrominance.15>
   206a4:	lea    0x39473(%rip),%rcx        # 59b1e <val_ac_chrominance.16>
   206ab:	callq  20510 <add_huff_table>
   206b0:	mov    -0x18(%rbp),%r15
   206b4:	mov    -0x10(%rbp),%r14
   206b8:	mov    -0x8(%rbp),%r13
   206bc:	leaveq 
   206bd:	retq   
   206be:	xchg   %ax,%ax

00000000000206c0 <start_pass_huff_decoder>:
   206c0:	push   %rbp
   206c1:	mov    %rsp,%rbp
   206c4:	sub    $0x30,%rsp
   206c8:	mov    %r12,-0x10(%rbp)
   206cc:	mov    %r13,-0x18(%rbp)
   206d0:	mov    %r14,-0x20(%rbp)
   206d4:	mov    %r15,-0x28(%rbp)
   206d8:	mov    %rbx,-0x8(%rbp)
   206dc:	mov    0x250(%rdi),%r12
   206e3:	mov    $0x1,%esi
   206e8:	xor    %r14d,%r14d
   206eb:	movslq 0x20c(%rdi),%rax
   206f2:	test   %eax,%eax
   206f4:	jne    20720 <start_pass_huff_decoder+0x60>
   206f6:	movslq 0x210(%rdi),%rax
   206fd:	cmp    $0x3f,%eax
   20700:	jne    20720 <start_pass_huff_decoder+0x60>
   20702:	movslq 0x214(%rdi),%rax
   20709:	test   %eax,%eax
   2070b:	jne    20720 <start_pass_huff_decoder+0x60>
   2070d:	movslq 0x218(%rdi),%rax
   20714:	test   %eax,%eax
   20716:	jne    20720 <start_pass_huff_decoder+0x60>
   20718:	mov    %rdi,%rbx
   2071b:	mov    %r14,%r13
   2071e:	jmp    20790 <start_pass_huff_decoder+0xd0>
   20720:	mov    (%rdi),%rax
   20723:	movl   $0x7a,0x28(%rax)
   2072a:	mov    (%rdi),%rax
   2072d:	mov    0x8(%rax),%rax
   20731:	mov    %rsi,%r13
   20734:	mov    $0xffffffffffffffff,%rsi
   2073b:	mov    %rdi,%rbx
   2073e:	callq  *%rax
   20740:	mov    %r13,%rsi
   20743:	mov    %r14,%r13
   20746:	jmp    20790 <start_pass_huff_decoder+0xd0>
   20748:	movslq %r13d,%r15
   2074b:	mov    0x1b8(%rbx,%r15,8),%rax
   20753:	movslq 0x14(%rax),%rdx
   20757:	lea    0x40(%r12,%rdx,8),%rcx
   2075c:	movslq 0x18(%rax),%r14
   20760:	mov    %rbx,%rdi
   20763:	callq  44c0 <jpeg_make_d_derived_tbl@plt>
   20768:	mov    %r14,%rdx
   2076b:	lea    0x60(%r12,%rdx,8),%rcx
   20770:	mov    %rbx,%rdi
   20773:	xor    %r14d,%r14d
   20776:	mov    %r14,%rsi
   20779:	callq  44c0 <jpeg_make_d_derived_tbl@plt>
   2077e:	movl   $0x0,0x28(%r12,%r15,4)
   20787:	add    $0x1,%r13d
   2078b:	mov    $0x1,%esi
   20790:	movslq 0x1b0(%rbx),%rax
   20797:	cmp    %r13d,%eax
   2079a:	jg     20748 <start_pass_huff_decoder+0x88>
   2079c:	mov    %r14,%rax
   2079f:	jmp    207af <start_pass_huff_decoder+0xef>
   207a1:	mov    %rsi,%rcx
   207a4:	mov    %ecx,0x148(%r12,%rdi,4)
   207ac:	add    $0x1,%eax
   207af:	movslq 0x1e0(%rbx),%rcx
   207b6:	cmp    %eax,%ecx
   207b8:	jg     207f6 <start_pass_huff_decoder+0x136>
   207ba:	movl   $0x0,0x20(%r12)
   207c3:	movq   $0x0,0x18(%r12)
   207cc:	movl   $0x0,0x10(%r12)
   207d5:	mov    0x170(%rbx),%eax
   207db:	mov    %eax,0x38(%r12)
   207e0:	mov    -0x8(%rbp),%rbx
   207e4:	mov    -0x28(%rbp),%r15
   207e8:	mov    -0x20(%rbp),%r14
   207ec:	mov    -0x18(%rbp),%r13
   207f0:	mov    -0x10(%rbp),%r12
   207f4:	leaveq 
   207f5:	retq   
   207f6:	movslq %eax,%rdi
   207f9:	movslq 0x1e4(%rbx,%rdi,4),%rcx
   20801:	mov    0x1b8(%rbx,%rcx,8),%rdx
   20809:	movslq 0x14(%rdx),%rcx
   2080d:	mov    0x40(%r12,%rcx,8),%rcx
   20812:	mov    %rcx,0x80(%r12,%rdi,8)
   2081a:	movslq 0x18(%rdx),%rcx
   2081e:	mov    0x60(%r12,%rcx,8),%rcx
   20823:	mov    %rcx,0xd0(%r12,%rdi,8)
   2082b:	movslq 0x30(%rdx),%rcx
   2082f:	test   %ecx,%ecx
   20831:	jne    20850 <start_pass_huff_decoder+0x190>
   20833:	movl   $0x0,0x148(%r12,%rdi,4)
   2083f:	movl   $0x0,0x120(%r12,%rdi,4)
   2084b:	jmpq   207ac <start_pass_huff_decoder+0xec>
   20850:	movl   $0x1,0x120(%r12,%rdi,4)
   2085c:	movslq 0x24(%rdx),%rcx
   20860:	cmp    $0x1,%ecx
   20863:	jg     207a1 <start_pass_huff_decoder+0xe1>
   20869:	mov    %r14,%rcx
   2086c:	jmpq   207a4 <start_pass_huff_decoder+0xe4>
   20871:	data16 nopw %cs:0x0(%rax,%rax,1)
   2087c:	nopl   0x0(%rax)

0000000000020880 <process_restart>:
   20880:	push   %rbp
   20881:	mov    %rsp,%rbp
   20884:	sub    $0x10,%rsp
   20888:	mov    %rdi,-0x8(%rbp)
   2088c:	mov    0x250(%rdi),%rdx
   20893:	mov    %rdx,-0x10(%rbp)
   20897:	movslq 0x20(%rdx),%rcx
   2089b:	mov    %rcx,%rax
   2089e:	sar    $0x2,%eax
   208a1:	shr    $0x1d,%eax
   208a4:	add    %ecx,%eax
   208a6:	sar    $0x3,%eax
   208a9:	mov    0x248(%rdi),%rcx
   208b0:	add    0x24(%rcx),%eax
   208b3:	mov    %eax,0x24(%rcx)
   208b6:	movl   $0x0,0x20(%rdx)
   208bd:	mov    0x248(%rdi),%rax
   208c4:	mov    0x10(%rax),%rax
   208c8:	callq  *%rax
   208ca:	test   %eax,%eax
   208cc:	jne    208d2 <process_restart+0x52>
   208ce:	xor    %eax,%eax
   208d0:	leaveq 
   208d1:	retq   
   208d2:	xor    %eax,%eax
   208d4:	mov    -0x10(%rbp),%rdx
   208d8:	mov    -0x8(%rbp),%rsi
   208dc:	jmp    208ec <process_restart+0x6c>
   208de:	movslq %eax,%rcx
   208e1:	movl   $0x0,0x28(%rdx,%rcx,4)
   208e9:	add    $0x1,%eax
   208ec:	movslq 0x1b0(%rsi),%rcx
   208f3:	cmp    %eax,%ecx
   208f5:	jg     208de <process_restart+0x5e>
   208f7:	mov    0x170(%rsi),%eax
   208fd:	mov    %eax,0x38(%rdx)
   20900:	mov    $0x1,%eax
   20905:	movslq 0x21c(%rsi),%rcx
   2090c:	test   %ecx,%ecx
   2090e:	je     20912 <process_restart+0x92>
   20910:	leaveq 
   20911:	retq   
   20912:	movl   $0x0,0x10(%rdx)
   20919:	leaveq 
   2091a:	retq   
   2091b:	nopl   0x0(%rax,%rax,1)

0000000000020920 <decode_mcu_slow>:
   20920:	push   %rbp
   20921:	mov    %rsp,%rbp
   20924:	sub    $0xa0,%rsp
   2092b:	mov    %r15,-0x28(%rbp)
   2092f:	mov    %r14,-0x20(%rbp)
   20933:	mov    %rsi,-0x60(%rbp)
   20937:	mov    %rbx,-0x8(%rbp)
   2093b:	mov    %r12,-0x10(%rbp)
   2093f:	mov    %r13,-0x18(%rbp)
   20943:	mov    %rdi,-0x48(%rbp)
   20947:	mov    0x250(%rdi),%rax
   2094e:	mov    %rax,-0x50(%rbp)
   20952:	mov    %rdi,-0x78(%rbp)
   20956:	mov    0x28(%rdi),%rcx
   2095a:	mov    (%rcx),%rcx
   2095d:	mov    %rcx,-0x98(%rbp)
   20964:	mov    0x28(%rdi),%rcx
   20968:	mov    0x8(%rcx),%rcx
   2096c:	mov    %rcx,-0x90(%rbp)
   20973:	mov    0x18(%rax),%r8
   20977:	movslq 0x20(%rax),%rdx
   2097b:	mov    0x28(%rax),%rcx
   2097f:	mov    %rcx,-0x70(%rbp)
   20983:	mov    0x30(%rax),%rcx
   20987:	mov    %rcx,-0x68(%rbp)
   2098b:	mov    0x4d646(%rip),%r9        # 6dfd8 <jpeg_natural_order@@LIBJPEG_6.2+0x129f4>
   20992:	mov    %r9,-0x40(%rbp)
   20996:	mov    %rsi,%rcx
   20999:	mov    %r8,%rsi
   2099c:	lea    -0x98(%rbp),%rbx
   209a3:	xor    %r14d,%r14d
   209a6:	mov    $0x1,%r13d
   209ac:	mov    %r14,%r8
   209af:	jmp    209ef <decode_mcu_slow+0xcf>
   209b1:	cmp    %r8d,%edx
   209b4:	jl     20a49 <decode_mcu_slow+0x129>
   209ba:	sub    %r8d,%edx
   209bd:	sar    $0x4,%eax
   209c0:	add    %r15d,%eax
   209c3:	lea    0x1(%rax),%r15d
   209c7:	mov    $0x1,%r13d
   209cd:	cmp    $0x3f,%r15d
   209d1:	jle    20a77 <decode_mcu_slow+0x157>
   209d7:	mov    -0x40(%rbp),%r9
   209db:	mov    -0x58(%rbp),%rax
   209df:	lea    0x1(%rax),%r8d
   209e3:	mov    -0x50(%rbp),%rax
   209e7:	mov    -0x48(%rbp),%rdi
   209eb:	mov    -0x60(%rbp),%rcx
   209ef:	cmp    0x1e0(%rdi),%r8d
   209f6:	jl     20aa8 <decode_mcu_slow+0x188>
   209fc:	mov    -0x98(%rbp),%rbx
   20a03:	mov    0x28(%rdi),%rcx
   20a07:	mov    %rbx,(%rcx)
   20a0a:	mov    -0x90(%rbp),%rbx
   20a11:	mov    0x28(%rdi),%rcx
   20a15:	mov    %rbx,0x8(%rcx)
   20a19:	mov    %rsi,0x18(%rax)
   20a1d:	mov    %edx,0x20(%rax)
   20a20:	mov    -0x70(%rbp),%rcx
   20a24:	mov    %rcx,0x28(%rax)
   20a28:	mov    -0x68(%rbp),%rcx
   20a2c:	mov    %rcx,0x30(%rax)
   20a30:	mov    %r13,%rax
   20a33:	mov    -0x18(%rbp),%r13
   20a37:	mov    -0x10(%rbp),%r12
   20a3b:	mov    -0x8(%rbp),%rbx
   20a3f:	mov    -0x20(%rbp),%r14
   20a43:	mov    -0x28(%rbp),%r15
   20a47:	leaveq 
   20a48:	retq   
   20a49:	mov    %r8,%r13
   20a4c:	mov    %rax,%r14
   20a4f:	mov    %rbx,%rdi
   20a52:	mov    %r13,%rcx
   20a55:	callq  4410 <jpeg_fill_bit_buffer@plt>
   20a5a:	test   %eax,%eax
   20a5c:	je     20abc <decode_mcu_slow+0x19c>
   20a5e:	mov    %r14,%rax
   20a61:	mov    %r13,%r8
   20a64:	mov    -0x88(%rbp),%rsi
   20a6b:	movslq -0x80(%rbp),%rdx
   20a6f:	xor    %r14d,%r14d
   20a72:	jmpq   209ba <decode_mcu_slow+0x9a>
   20a77:	cmp    $0x7,%edx
   20a7a:	jle    20ad4 <decode_mcu_slow+0x1b4>
   20a7c:	lea    0x38(%rdx),%ecx
   20a7f:	mov    %rsi,%rax
   20a82:	shr    %cl,%rax
   20a85:	movzbl %al,%eax
   20a88:	movslq %eax,%rax
   20a8b:	movslq 0x128(%r12,%rax,4),%rax
   20a93:	mov    %rax,%r8
   20a96:	sar    $0x8,%r8d
   20a9a:	cmp    $0x8,%r8d
   20a9e:	jg     20afa <decode_mcu_slow+0x1da>
   20aa0:	sub    %r8d,%edx
   20aa3:	movzbl %al,%eax
   20aa6:	jmp    20b18 <decode_mcu_slow+0x1f8>
   20aa8:	test   %rcx,%rcx
   20aab:	movslq %r8d,%r10
   20aae:	jne    20b3f <decode_mcu_slow+0x21f>
   20ab4:	mov    %r14,%r15
   20ab7:	jmpq   20b43 <decode_mcu_slow+0x223>
   20abc:	mov    -0x18(%rbp),%r13
   20ac0:	mov    -0x10(%rbp),%r12
   20ac4:	mov    -0x8(%rbp),%rbx
   20ac8:	xor    %eax,%eax
   20aca:	mov    -0x20(%rbp),%r14
   20ace:	mov    -0x28(%rbp),%r15
   20ad2:	leaveq 
   20ad3:	retq   
   20ad4:	mov    %rbx,%rdi
   20ad7:	mov    %r14,%rcx
   20ada:	callq  4410 <jpeg_fill_bit_buffer@plt>
   20adf:	test   %eax,%eax
   20ae1:	je     20b94 <decode_mcu_slow+0x274>
   20ae7:	mov    -0x88(%rbp),%rsi
   20aee:	movslq -0x80(%rbp),%rdx
   20af2:	cmp    $0x7,%edx
   20af5:	jg     20a7c <decode_mcu_slow+0x15c>
   20af7:	mov    %r13,%r8
   20afa:	mov    %rbx,%rdi
   20afd:	mov    %r12,%rcx
   20b00:	callq  41c0 <jpeg_huff_decode@plt>
   20b05:	test   %eax,%eax
   20b07:	js     20bad <decode_mcu_slow+0x28d>
   20b0d:	mov    -0x88(%rbp),%rsi
   20b14:	movslq -0x80(%rbp),%rdx
   20b18:	mov    %rax,%r8
   20b1b:	and    $0xf,%r8d
   20b1f:	test   %r8d,%r8d
   20b22:	jg     209b1 <decode_mcu_slow+0x91>
   20b28:	and    $0xfffffff0,%eax
   20b2b:	cmp    $0xf0,%eax
   20b30:	jne    20bc6 <decode_mcu_slow+0x2a6>
   20b36:	lea    0xf(%r15),%eax
   20b3a:	jmpq   209c3 <decode_mcu_slow+0xa3>
   20b3f:	mov    (%rcx,%r10,8),%r15
   20b43:	mov    0x80(%rax,%r10,8),%r11
   20b4b:	mov    %r8,-0x58(%rbp)
   20b4f:	mov    0xd0(%rax,%r10,8),%r12
   20b57:	mov    %r12,-0x30(%rbp)
   20b5b:	cmp    $0x7,%edx
   20b5e:	jle    20bcf <decode_mcu_slow+0x2af>
   20b60:	lea    0x38(%rdx),%ecx
   20b63:	mov    %rsi,%r8
   20b66:	shr    %cl,%r8
   20b69:	movzbl %r8b,%ecx
   20b6d:	movslq %ecx,%rcx
   20b70:	movslq 0x128(%r11,%rcx,4),%rcx
   20b78:	mov    %rcx,%r8
   20b7b:	sar    $0x8,%r8d
   20b7f:	cmp    $0x8,%r8d
   20b83:	jg     20c1f <decode_mcu_slow+0x2ff>
   20b89:	sub    %r8d,%edx
   20b8c:	movzbl %cl,%ecx
   20b8f:	jmpq   20c69 <decode_mcu_slow+0x349>
   20b94:	mov    %r14,%rax
   20b97:	mov    -0x18(%rbp),%r13
   20b9b:	mov    -0x10(%rbp),%r12
   20b9f:	mov    -0x8(%rbp),%rbx
   20ba3:	mov    -0x20(%rbp),%r14
   20ba7:	mov    -0x28(%rbp),%r15
   20bab:	leaveq 
   20bac:	retq   
   20bad:	mov    %r14,%rax
   20bb0:	mov    -0x18(%rbp),%r13
   20bb4:	mov    -0x10(%rbp),%r12
   20bb8:	mov    -0x8(%rbp),%rbx
   20bbc:	mov    -0x20(%rbp),%r14
   20bc0:	mov    -0x28(%rbp),%r15
   20bc4:	leaveq 
   20bc5:	retq   
   20bc6:	mov    -0x40(%rbp),%r9
   20bca:	jmpq   209db <decode_mcu_slow+0xbb>
   20bcf:	mov    %r14,%rcx
   20bd2:	mov    %rdi,%r14
   20bd5:	mov    %rbx,%rdi
   20bd8:	mov    %rax,%rbx
   20bdb:	mov    %r10,%r12
   20bde:	mov    %r11,%r13
   20be1:	callq  4410 <jpeg_fill_bit_buffer@plt>
   20be6:	test   %eax,%eax
   20be8:	je     20c9d <decode_mcu_slow+0x37d>
   20bee:	mov    -0x88(%rbp),%rsi
   20bf5:	movslq -0x80(%rbp),%rdx
   20bf9:	cmp    $0x7,%edx
   20bfc:	jg     20cb5 <decode_mcu_slow+0x395>
   20c02:	mov    %rbx,%rax
   20c05:	mov    %r14,%rdi
   20c08:	mov    %r12,%r10
   20c0b:	mov    %r13,%r11
   20c0e:	lea    -0x98(%rbp),%rbx
   20c15:	mov    $0x1,%r8d
   20c1b:	mov    -0x30(%rbp),%r12
   20c1f:	mov    %r11,%rcx
   20c22:	mov    %r10,%r13
   20c25:	mov    %rax,%r14
   20c28:	mov    %rbx,%r11
   20c2b:	mov    %rdi,%rbx
   20c2e:	mov    %r11,%rdi
   20c31:	callq  41c0 <jpeg_huff_decode@plt>
   20c36:	test   %eax,%eax
   20c38:	js     20cde <decode_mcu_slow+0x3be>
   20c3e:	mov    %rax,%rcx
   20c41:	mov    %r14,%rax
   20c44:	mov    %rbx,%rdi
   20c47:	mov    %r13,%r10
   20c4a:	mov    -0x88(%rbp),%rsi
   20c51:	movslq -0x80(%rbp),%rdx
   20c55:	mov    -0x40(%rbp),%r9
   20c59:	xor    %r14d,%r14d
   20c5c:	lea    -0x98(%rbp),%rbx
   20c63:	mov    $0x1,%r13d
   20c69:	test   %ecx,%ecx
   20c6b:	jne    20cf6 <decode_mcu_slow+0x3d6>
   20c71:	mov    %r14,%rcx
   20c74:	movslq 0x120(%rax,%r10,4),%r8
   20c7c:	test   %r8d,%r8d
   20c7f:	jne    20d93 <decode_mcu_slow+0x473>
   20c85:	movslq 0x148(%rax,%r10,4),%rax
   20c8d:	test   %eax,%eax
   20c8f:	jne    20db5 <decode_mcu_slow+0x495>
   20c95:	mov    %r13,%r15
   20c98:	jmpq   209cd <decode_mcu_slow+0xad>
   20c9d:	mov    -0x18(%rbp),%r13
   20ca1:	mov    -0x10(%rbp),%r12
   20ca5:	mov    -0x8(%rbp),%rbx
   20ca9:	xor    %eax,%eax
   20cab:	mov    -0x20(%rbp),%r14
   20caf:	mov    -0x28(%rbp),%r15
   20cb3:	leaveq 
   20cb4:	retq   
   20cb5:	mov    %rbx,%rax
   20cb8:	mov    %r14,%rdi
   20cbb:	mov    %r12,%r10
   20cbe:	mov    %r13,%r11
   20cc1:	mov    -0x40(%rbp),%r9
   20cc5:	xor    %r14d,%r14d
   20cc8:	lea    -0x98(%rbp),%rbx
   20ccf:	mov    $0x1,%r13d
   20cd5:	mov    -0x30(%rbp),%r12
   20cd9:	jmpq   20b60 <decode_mcu_slow+0x240>
   20cde:	mov    -0x18(%rbp),%r13
   20ce2:	mov    -0x10(%rbp),%r12
   20ce6:	mov    -0x8(%rbp),%rbx
   20cea:	xor    %eax,%eax
   20cec:	mov    -0x20(%rbp),%r14
   20cf0:	mov    -0x28(%rbp),%r15
   20cf4:	leaveq 
   20cf5:	retq   
   20cf6:	cmp    %edx,%ecx
   20cf8:	jle    20d41 <decode_mcu_slow+0x421>
   20cfa:	mov    %rdi,%r12
   20cfd:	mov    %rbx,%rdi
   20d00:	mov    %r10,%r13
   20d03:	mov    %rax,%r14
   20d06:	mov    %rcx,%rbx
   20d09:	callq  4410 <jpeg_fill_bit_buffer@plt>
   20d0e:	test   %eax,%eax
   20d10:	je     20dc7 <decode_mcu_slow+0x4a7>
   20d16:	mov    %r14,%rax
   20d19:	mov    %rbx,%rcx
   20d1c:	mov    %r12,%rdi
   20d1f:	mov    %r13,%r10
   20d22:	mov    -0x88(%rbp),%rsi
   20d29:	movslq -0x80(%rbp),%rdx
   20d2d:	xor    %r14d,%r14d
   20d30:	lea    -0x98(%rbp),%rbx
   20d37:	mov    $0x1,%r13d
   20d3d:	mov    -0x30(%rbp),%r12
   20d41:	mov    %r13,%r8
   20d44:	shl    %cl,%r8d
   20d47:	add    $0xffffffff,%r8d
   20d4b:	sub    %ecx,%edx
   20d4d:	mov    %rcx,%r9
   20d50:	mov    %rdx,%rcx
   20d53:	mov    %rsi,%r11
   20d56:	shr    %cl,%r11
   20d59:	mov    %rcx,%rdx
   20d5c:	and    %r11d,%r8d
   20d5f:	lea    0x1f(%r9),%ecx
   20d63:	mov    %r13,%r11
   20d66:	shl    %cl,%r11d
   20d69:	neg    %r11d
   20d6c:	add    %r8d,%r11d
   20d6f:	sar    $0x1f,%r11d
   20d73:	mov    %r9,%rcx
   20d76:	mov    $0xffffffffffffffff,%r9
   20d7d:	shl    %cl,%r9d
   20d80:	lea    0x1(%r9),%ecx
   20d84:	and    %r11d,%ecx
   20d87:	add    %r8d,%ecx
   20d8a:	mov    -0x40(%rbp),%r9
   20d8e:	jmpq   20c74 <decode_mcu_slow+0x354>
   20d93:	movslq 0x1e4(%rdi,%r10,4),%rdi
   20d9b:	add    -0x70(%rbp,%rdi,4),%ecx
   20d9f:	mov    %ecx,-0x70(%rbp,%rdi,4)
   20da3:	test   %r15,%r15
   20da6:	je     20c85 <decode_mcu_slow+0x365>
   20dac:	mov    %cx,(%r15)
   20db0:	jmpq   20c85 <decode_mcu_slow+0x365>
   20db5:	test   %r15,%r15
   20db8:	je     20ddf <decode_mcu_slow+0x4bf>
   20dba:	mov    $0xffffffff,%edi
   20dbf:	mov    %r13,%rax
   20dc2:	jmpq   20e8b <decode_mcu_slow+0x56b>
   20dc7:	mov    -0x18(%rbp),%r13
   20dcb:	mov    -0x10(%rbp),%r12
   20dcf:	mov    -0x8(%rbp),%rbx
   20dd3:	xor    %eax,%eax
   20dd5:	mov    -0x20(%rbp),%r14
   20dd9:	mov    -0x28(%rbp),%r15
   20ddd:	leaveq 
   20dde:	retq   
   20ddf:	mov    %r13,%r15
   20de2:	jmpq   209cd <decode_mcu_slow+0xad>
   20de7:	cmp    %edx,%ecx
   20de9:	jle    20e2e <decode_mcu_slow+0x50e>
   20deb:	mov    %rbx,%rdi
   20dee:	mov    %r9,%r12
   20df1:	mov    %rax,%r13
   20df4:	mov    %rcx,%rbx
   20df7:	callq  4410 <jpeg_fill_bit_buffer@plt>
   20dfc:	test   %eax,%eax
   20dfe:	je     20ecb <decode_mcu_slow+0x5ab>
   20e04:	mov    %r13,%rax
   20e07:	mov    %rbx,%rcx
   20e0a:	mov    %r12,%r9
   20e0d:	mov    -0x88(%rbp),%rsi
   20e14:	movslq -0x80(%rbp),%rdx
   20e18:	lea    -0x98(%rbp),%rbx
   20e1f:	mov    $0x1,%r13d
   20e25:	mov    -0x30(%rbp),%r12
   20e29:	mov    $0xffffffff,%edi
   20e2e:	mov    %r13,%r8
   20e31:	shl    %cl,%r8d
   20e34:	add    $0xffffffff,%r8d
   20e38:	sub    %ecx,%edx
   20e3a:	mov    %rcx,%r11
   20e3d:	mov    %rdx,%rcx
   20e40:	mov    %rsi,%r10
   20e43:	shr    %cl,%r10
   20e46:	mov    %rcx,%rdx
   20e49:	and    %r10d,%r8d
   20e4c:	lea    0x1f(%r11),%ecx
   20e50:	mov    %r13,%r10
   20e53:	shl    %cl,%r10d
   20e56:	neg    %r10d
   20e59:	add    %r8d,%r10d
   20e5c:	sar    $0x1f,%r10d
   20e60:	mov    %r11,%rcx
   20e63:	mov    %rdi,%r11
   20e66:	shl    %cl,%r11d
   20e69:	lea    0x1(%r11),%ecx
   20e6d:	and    %ecx,%r10d
   20e70:	add    %r10d,%r8d
   20e73:	sar    $0x4,%eax
   20e76:	add    %r14d,%eax
   20e79:	movslq %eax,%rcx
   20e7c:	movslq (%r9,%rcx,4),%rcx
   20e80:	mov    %r8w,(%r15,%rcx,2)
   20e85:	add    $0x1,%eax
   20e88:	xor    %r14d,%r14d
   20e8b:	cmp    $0x3f,%eax
   20e8e:	jg     209db <decode_mcu_slow+0xbb>
   20e94:	cmp    $0x7,%edx
   20e97:	jle    20ee3 <decode_mcu_slow+0x5c3>
   20e99:	mov    %rax,%r14
   20e9c:	lea    0x38(%rdx),%ecx
   20e9f:	mov    %rsi,%rax
   20ea2:	shr    %cl,%rax
   20ea5:	movzbl %al,%eax
   20ea8:	movslq %eax,%rax
   20eab:	movslq 0x128(%r12,%rax,4),%rax
   20eb3:	mov    %rax,%r8
   20eb6:	sar    $0x8,%r8d
   20eba:	cmp    $0x8,%r8d
   20ebe:	jg     20f1e <decode_mcu_slow+0x5fe>
   20ec0:	sub    %r8d,%edx
   20ec3:	movzbl %al,%eax
   20ec6:	jmpq   20f61 <decode_mcu_slow+0x641>
   20ecb:	mov    -0x18(%rbp),%r13
   20ecf:	mov    -0x10(%rbp),%r12
   20ed3:	mov    -0x8(%rbp),%rbx
   20ed7:	xor    %eax,%eax
   20ed9:	mov    -0x20(%rbp),%r14
   20edd:	mov    -0x28(%rbp),%r15
   20ee1:	leaveq 
   20ee2:	retq   
   20ee3:	mov    %rbx,%rdi
   20ee6:	mov    %r15,-0x38(%rbp)
   20eea:	mov    %r14,%rcx
   20eed:	mov    %rax,%r14
   20ef0:	mov    %r9,%r15
   20ef3:	callq  4410 <jpeg_fill_bit_buffer@plt>
   20ef8:	test   %eax,%eax
   20efa:	je     20f82 <decode_mcu_slow+0x662>
   20f00:	mov    -0x88(%rbp),%rsi
   20f07:	movslq -0x80(%rbp),%rdx
   20f0b:	cmp    $0x7,%edx
   20f0e:	jg     20f9a <decode_mcu_slow+0x67a>
   20f14:	mov    %r13,%r8
   20f17:	mov    %r15,%r9
   20f1a:	mov    -0x38(%rbp),%r15
   20f1e:	mov    %r9,%r13
   20f21:	mov    %rbx,%rdi
   20f24:	mov    %r12,%rcx
   20f27:	callq  41c0 <jpeg_huff_decode@plt>
   20f2c:	test   %eax,%eax
   20f2e:	jns    20f48 <decode_mcu_slow+0x628>
   20f30:	mov    -0x18(%rbp),%r13
   20f34:	mov    -0x10(%rbp),%r12
   20f38:	mov    -0x8(%rbp),%rbx
   20f3c:	xor    %eax,%eax
   20f3e:	mov    -0x20(%rbp),%r14
   20f42:	mov    -0x28(%rbp),%r15
   20f46:	leaveq 
   20f47:	retq   
   20f48:	mov    %r13,%r9
   20f4b:	mov    -0x88(%rbp),%rsi
   20f52:	movslq -0x80(%rbp),%rdx
   20f56:	mov    $0x1,%r13d
   20f5c:	mov    $0xffffffff,%edi
   20f61:	mov    %rax,%rcx
   20f64:	and    $0xf,%ecx
   20f67:	test   %ecx,%ecx
   20f69:	jg     20de7 <decode_mcu_slow+0x4c7>
   20f6f:	and    $0xfffffff0,%eax
   20f72:	cmp    $0xf0,%eax
   20f77:	jne    20fab <decode_mcu_slow+0x68b>
   20f79:	lea    0xf(%r14),%eax
   20f7d:	jmpq   20e85 <decode_mcu_slow+0x565>
   20f82:	mov    -0x18(%rbp),%r13
   20f86:	mov    -0x10(%rbp),%r12
   20f8a:	mov    -0x8(%rbp),%rbx
   20f8e:	xor    %eax,%eax
   20f90:	mov    -0x20(%rbp),%r14
   20f94:	mov    -0x28(%rbp),%r15
   20f98:	leaveq 
   20f99:	retq   
   20f9a:	mov    %r15,%r9
   20f9d:	mov    -0x38(%rbp),%r15
   20fa1:	mov    $0xffffffff,%edi
   20fa6:	jmpq   20e9c <decode_mcu_slow+0x57c>
   20fab:	xor    %r14d,%r14d
   20fae:	jmpq   209db <decode_mcu_slow+0xbb>
   20fb3:	data16 nopw %cs:0x0(%rax,%rax,1)
   20fbe:	xchg   %ax,%ax

0000000000020fc0 <decode_mcu_fast>:
   20fc0:	push   %rbp
   20fc1:	mov    %rsp,%rbp
   20fc4:	sub    $0x80,%rsp
   20fcb:	mov    %r15,-0x38(%rbp)
   20fcf:	mov    %r14,-0x30(%rbp)
   20fd3:	mov    %rsi,-0x58(%rbp)
   20fd7:	mov    %rbx,-0x18(%rbp)
   20fdb:	mov    %r12,-0x20(%rbp)
   20fdf:	mov    %r13,-0x28(%rbp)
   20fe3:	mov    0x28(%rdi),%rcx
   20fe7:	mov    0x8(%rcx),%rax
   20feb:	mov    %rax,-0x8(%rbp)
   20fef:	mov    (%rcx),%rbx
   20ff2:	mov    %rbx,-0x10(%rbp)
   20ff6:	mov    0x250(%rdi),%r8
   20ffd:	mov    %r8,-0x60(%rbp)
   21001:	mov    0x18(%r8),%rdx
   21005:	movslq 0x20(%r8),%rcx
   21009:	mov    0x28(%r8),%rax
   2100d:	mov    %rax,-0x80(%rbp)
   21011:	mov    0x30(%r8),%rax
   21015:	mov    %rax,-0x78(%rbp)
   21019:	mov    0x4cfb8(%rip),%r10        # 6dfd8 <jpeg_natural_order@@LIBJPEG_6.2+0x129f4>
   21020:	mov    %r10,-0x40(%rbp)
   21024:	xor    %r13d,%r13d
   21027:	mov    $0x1,%eax
   2102c:	mov    %r13,%r9
   2102f:	jmpq   21155 <decode_mcu_fast+0x195>
   21034:	cmp    $0x10,%ecx
   21037:	jg     2112e <decode_mcu_fast+0x16e>
   2103d:	lea    0x1(%rbx),%r12
   21041:	movzbl (%r12),%r13d
   21046:	movzbl (%rbx),%r15d
   2104a:	shl    $0x8,%rdx
   2104e:	add    %r15,%rdx
   21051:	cmp    $0xff,%r15b
   21055:	jne    21064 <decode_mcu_fast+0xa4>
   21057:	test   %r13b,%r13b
   2105a:	jne    211bf <decode_mcu_fast+0x1ff>
   21060:	lea    0x2(%rbx),%r12
   21064:	lea    0x1(%r12),%r13
   21069:	movzbl 0x0(%r13),%r15d
   2106e:	movzbl (%r12),%ebx
   21073:	shl    $0x8,%rdx
   21077:	add    %rbx,%rdx
   2107a:	cmp    $0xff,%bl
   2107d:	jne    2108d <decode_mcu_fast+0xcd>
   2107f:	test   %r15b,%r15b
   21082:	jne    211d5 <decode_mcu_fast+0x215>
   21088:	lea    0x2(%r12),%r13
   2108d:	lea    0x1(%r13),%rbx
   21091:	movzbl (%rbx),%r15d
   21095:	movzbl 0x0(%r13),%r12d
   2109a:	shl    $0x8,%rdx
   2109e:	add    %r12,%rdx
   210a1:	cmp    $0xff,%r12b
   210a5:	jne    210b4 <decode_mcu_fast+0xf4>
   210a7:	test   %r15b,%r15b
   210aa:	jne    211eb <decode_mcu_fast+0x22b>
   210b0:	lea    0x2(%r13),%rbx
   210b4:	lea    0x1(%rbx),%r13
   210b8:	movzbl 0x0(%r13),%r15d
   210bd:	movzbl (%rbx),%r12d
   210c1:	shl    $0x8,%rdx
   210c5:	add    %r12,%rdx
   210c8:	cmp    $0xff,%r12b
   210cc:	jne    210db <decode_mcu_fast+0x11b>
   210ce:	test   %r15b,%r15b
   210d1:	jne    21201 <decode_mcu_fast+0x241>
   210d7:	lea    0x2(%rbx),%r13
   210db:	lea    0x1(%r13),%r12
   210df:	movzbl (%r12),%r15d
   210e4:	movzbl 0x0(%r13),%ebx
   210e9:	shl    $0x8,%rdx
   210ed:	add    %rbx,%rdx
   210f0:	cmp    $0xff,%bl
   210f3:	jne    21102 <decode_mcu_fast+0x142>
   210f5:	test   %r15b,%r15b
   210f8:	jne    21217 <decode_mcu_fast+0x257>
   210fe:	lea    0x2(%r13),%r12
   21102:	lea    0x1(%r12),%rbx
   21107:	movzbl (%rbx),%r15d
   2110b:	movzbl (%r12),%r13d
   21110:	shl    $0x8,%rdx
   21114:	add    %r13,%rdx
   21117:	add    $0x30,%ecx
   2111a:	cmp    $0xff,%r13b
   2111e:	jne    2112e <decode_mcu_fast+0x16e>
   21120:	test   %r15b,%r15b
   21123:	jne    2122d <decode_mcu_fast+0x26d>
   21129:	lea    0x2(%r12),%rbx
   2112e:	sub    %r14d,%ecx
   21131:	shr    $0x4,%r11d
   21135:	add    %r11d,%r10d
   21138:	add    $0x1,%r10d
   2113c:	cmp    $0x3f,%r10d
   21140:	jle    21243 <decode_mcu_fast+0x283>
   21146:	mov    -0x40(%rbp),%r10
   2114a:	add    $0x1,%r9d
   2114e:	xor    %r13d,%r13d
   21151:	mov    -0x58(%rbp),%rsi
   21155:	movslq 0x1e0(%rdi),%r11
   2115c:	cmp    %r9d,%r11d
   2115f:	jg     2139b <decode_mcu_fast+0x3db>
   21165:	movslq 0x21c(%rdi),%rsi
   2116c:	test   %esi,%esi
   2116e:	jne    213af <decode_mcu_fast+0x3ef>
   21174:	mov    0x28(%rdi),%rsi
   21178:	mov    %rbx,(%rsi)
   2117b:	mov    -0x10(%rbp),%rsi
   2117f:	sub    %rsi,%rbx
   21182:	mov    -0x8(%rbp),%rsi
   21186:	sub    %rbx,%rsi
   21189:	mov    0x28(%rdi),%rdi
   2118d:	mov    %rsi,0x8(%rdi)
   21191:	mov    %rdx,0x18(%r8)
   21195:	mov    %ecx,0x20(%r8)
   21199:	mov    -0x80(%rbp),%rcx
   2119d:	mov    %rcx,0x28(%r8)
   211a1:	mov    -0x78(%rbp),%rcx
   211a5:	mov    %rcx,0x30(%r8)
   211a9:	mov    -0x28(%rbp),%r13
   211ad:	mov    -0x20(%rbp),%r12
   211b1:	mov    -0x18(%rbp),%rbx
   211b5:	mov    -0x30(%rbp),%r14
   211b9:	mov    -0x38(%rbp),%r15
   211bd:	leaveq 
   211be:	retq   
   211bf:	and    $0xffffffffffffff00,%rdx
   211c6:	mov    %r13d,0x21c(%rdi)
   211cd:	mov    %rbx,%r12
   211d0:	jmpq   21064 <decode_mcu_fast+0xa4>
   211d5:	and    $0xffffffffffffff00,%rdx
   211dc:	mov    %r15d,0x21c(%rdi)
   211e3:	mov    %r12,%r13
   211e6:	jmpq   2108d <decode_mcu_fast+0xcd>
   211eb:	and    $0xffffffffffffff00,%rdx
   211f2:	mov    %r15d,0x21c(%rdi)
   211f9:	mov    %r13,%rbx
   211fc:	jmpq   210b4 <decode_mcu_fast+0xf4>
   21201:	and    $0xffffffffffffff00,%rdx
   21208:	mov    %r15d,0x21c(%rdi)
   2120f:	mov    %rbx,%r13
   21212:	jmpq   210db <decode_mcu_fast+0x11b>
   21217:	and    $0xffffffffffffff00,%rdx
   2121e:	mov    %r15d,0x21c(%rdi)
   21225:	mov    %r13,%r12
   21228:	jmpq   21102 <decode_mcu_fast+0x142>
   2122d:	and    $0xffffffffffffff00,%rdx
   21234:	mov    %r15d,0x21c(%rdi)
   2123b:	mov    %r12,%rbx
   2123e:	jmpq   2112e <decode_mcu_fast+0x16e>
   21243:	cmp    $0x10,%ecx
   21246:	jg     21339 <decode_mcu_fast+0x379>
   2124c:	lea    0x1(%rbx),%r11
   21250:	movzbl (%r11),%r13d
   21254:	movzbl (%rbx),%r12d
   21258:	shl    $0x8,%rdx
   2125c:	add    %r12,%rdx
   2125f:	cmp    $0xff,%r12b
   21263:	jne    21272 <decode_mcu_fast+0x2b2>
   21265:	test   %r13b,%r13b
   21268:	jne    213d2 <decode_mcu_fast+0x412>
   2126e:	lea    0x2(%rbx),%r11
   21272:	lea    0x1(%r11),%r12
   21276:	movzbl (%r12),%r13d
   2127b:	movzbl (%r11),%ebx
   2127f:	shl    $0x8,%rdx
   21283:	add    %rbx,%rdx
   21286:	cmp    $0xff,%bl
   21289:	jne    21298 <decode_mcu_fast+0x2d8>
   2128b:	test   %r13b,%r13b
   2128e:	jne    213e8 <decode_mcu_fast+0x428>
   21294:	lea    0x2(%r11),%r12
   21298:	lea    0x1(%r12),%rbx
   2129d:	movzbl (%rbx),%r13d
   212a1:	movzbl (%r12),%r11d
   212a6:	shl    $0x8,%rdx
   212aa:	add    %r11,%rdx
   212ad:	cmp    $0xff,%r11b
   212b1:	jne    212c1 <decode_mcu_fast+0x301>
   212b3:	test   %r13b,%r13b
   212b6:	jne    213fe <decode_mcu_fast+0x43e>
   212bc:	lea    0x2(%r12),%rbx
   212c1:	lea    0x1(%rbx),%r11
   212c5:	movzbl (%r11),%r13d
   212c9:	movzbl (%rbx),%r12d
   212cd:	shl    $0x8,%rdx
   212d1:	add    %r12,%rdx
   212d4:	cmp    $0xff,%r12b
   212d8:	jne    212e7 <decode_mcu_fast+0x327>
   212da:	test   %r13b,%r13b
   212dd:	jne    21414 <decode_mcu_fast+0x454>
   212e3:	lea    0x2(%rbx),%r11
   212e7:	lea    0x1(%r11),%r12
   212eb:	movzbl (%r12),%r13d
   212f0:	movzbl (%r11),%ebx
   212f4:	shl    $0x8,%rdx
   212f8:	add    %rbx,%rdx
   212fb:	cmp    $0xff,%bl
   212fe:	jne    2130d <decode_mcu_fast+0x34d>
   21300:	test   %r13b,%r13b
   21303:	jne    2142a <decode_mcu_fast+0x46a>
   21309:	lea    0x2(%r11),%r12
   2130d:	lea    0x1(%r12),%rbx
   21312:	movzbl (%rbx),%r13d
   21316:	movzbl (%r12),%r11d
   2131b:	shl    $0x8,%rdx
   2131f:	add    %r11,%rdx
   21322:	add    $0x30,%ecx
   21325:	cmp    $0xff,%r11b
   21329:	jne    21339 <decode_mcu_fast+0x379>
   2132b:	test   %r13b,%r13b
   2132e:	jne    21440 <decode_mcu_fast+0x480>
   21334:	lea    0x2(%r12),%rbx
   21339:	mov    %rcx,%r12
   2133c:	lea    0x38(%r12),%ecx
   21341:	mov    %rdx,%r11
   21344:	shr    %cl,%r11
   21347:	movzbl %r11b,%ecx
   2134b:	movslq %ecx,%rcx
   2134e:	movslq 0x128(%rsi,%rcx,4),%r13
   21356:	mov    %r13,%r11
   21359:	sar    $0x8,%r11d
   2135d:	mov    %r12,%rcx
   21360:	sub    %r11d,%ecx
   21363:	cmp    $0x8,%r11d
   21367:	jg     21456 <decode_mcu_fast+0x496>
   2136d:	movzbl %r13b,%r11d
   21371:	mov    %r11,%r14
   21374:	and    $0xf,%r14d
   21378:	test   %r14d,%r14d
   2137b:	jg     21034 <decode_mcu_fast+0x74>
   21381:	and    $0xfffffff0,%r11d
   21385:	cmp    $0xe0,%r11d
   2138c:	jle    2147a <decode_mcu_fast+0x4ba>
   21392:	add    $0xf,%r10d
   21396:	jmpq   21138 <decode_mcu_fast+0x178>
   2139b:	test   %rsi,%rsi
   2139e:	movslq %r9d,%r12
   213a1:	jne    21483 <decode_mcu_fast+0x4c3>
   213a7:	mov    %r13,%r11
   213aa:	jmpq   21487 <decode_mcu_fast+0x4c7>
   213af:	movl   $0x0,0x21c(%rdi)
   213b9:	mov    %r13,%rax
   213bc:	mov    -0x28(%rbp),%r13
   213c0:	mov    -0x20(%rbp),%r12
   213c4:	mov    -0x18(%rbp),%rbx
   213c8:	mov    -0x30(%rbp),%r14
   213cc:	mov    -0x38(%rbp),%r15
   213d0:	leaveq 
   213d1:	retq   
   213d2:	and    $0xffffffffffffff00,%rdx
   213d9:	mov    %r13d,0x21c(%rdi)
   213e0:	mov    %rbx,%r11
   213e3:	jmpq   21272 <decode_mcu_fast+0x2b2>
   213e8:	and    $0xffffffffffffff00,%rdx
   213ef:	mov    %r13d,0x21c(%rdi)
   213f6:	mov    %r11,%r12
   213f9:	jmpq   21298 <decode_mcu_fast+0x2d8>
   213fe:	and    $0xffffffffffffff00,%rdx
   21405:	mov    %r13d,0x21c(%rdi)
   2140c:	mov    %r12,%rbx
   2140f:	jmpq   212c1 <decode_mcu_fast+0x301>
   21414:	and    $0xffffffffffffff00,%rdx
   2141b:	mov    %r13d,0x21c(%rdi)
   21422:	mov    %rbx,%r11
   21425:	jmpq   212e7 <decode_mcu_fast+0x327>
   2142a:	and    $0xffffffffffffff00,%rdx
   21431:	mov    %r13d,0x21c(%rdi)
   21438:	mov    %r11,%r12
   2143b:	jmpq   2130d <decode_mcu_fast+0x34d>
   21440:	and    $0xffffffffffffff00,%rdx
   21447:	mov    %r13d,0x21c(%rdi)
   2144e:	mov    %r12,%rbx
   21451:	jmpq   21339 <decode_mcu_fast+0x379>
   21456:	mov    %rdx,%r12
   21459:	shr    %cl,%r12
   2145c:	mov    %rcx,%r13
   2145f:	mov    %r11,%rcx
   21462:	mov    %rax,%r14
   21465:	shl    %cl,%r14d
   21468:	mov    %rcx,%r11
   2146b:	lea    -0x1(%r14),%ecx
   2146f:	and    %ecx,%r12d
   21472:	mov    %r13,%rcx
   21475:	jmpq   21763 <decode_mcu_fast+0x7a3>
   2147a:	mov    -0x40(%rbp),%r10
   2147e:	jmpq   2114a <decode_mcu_fast+0x18a>
   21483:	mov    (%rsi,%r12,8),%r11
   21487:	mov    0xd0(%r8,%r12,8),%rsi
   2148f:	mov    %r9,-0x70(%rbp)
   21493:	mov    0x80(%r8,%r12,8),%r15
   2149b:	cmp    $0x10,%ecx
   2149e:	jg     21584 <decode_mcu_fast+0x5c4>
   214a4:	lea    0x1(%rbx),%r9
   214a8:	movzbl (%r9),%r10d
   214ac:	movzbl (%rbx),%r14d
   214b0:	shl    $0x8,%rdx
   214b4:	add    %r14,%rdx
   214b7:	cmp    $0xff,%r14b
   214bb:	jne    214ca <decode_mcu_fast+0x50a>
   214bd:	test   %r10b,%r10b
   214c0:	jne    21790 <decode_mcu_fast+0x7d0>
   214c6:	lea    0x2(%rbx),%r9
   214ca:	lea    0x1(%r9),%r10
   214ce:	movzbl (%r10),%ebx
   214d2:	movzbl (%r9),%r14d
   214d6:	shl    $0x8,%rdx
   214da:	add    %r14,%rdx
   214dd:	cmp    $0xff,%r14b
   214e1:	jne    214ef <decode_mcu_fast+0x52f>
   214e3:	test   %bl,%bl
   214e5:	jne    217a6 <decode_mcu_fast+0x7e6>
   214eb:	lea    0x2(%r9),%r10
   214ef:	lea    0x1(%r10),%rbx
   214f3:	movzbl (%rbx),%r9d
   214f7:	movzbl (%r10),%r14d
   214fb:	shl    $0x8,%rdx
   214ff:	add    %r14,%rdx
   21502:	cmp    $0xff,%r14b
   21506:	jne    21515 <decode_mcu_fast+0x555>
   21508:	test   %r9b,%r9b
   2150b:	jne    217bb <decode_mcu_fast+0x7fb>
   21511:	lea    0x2(%r10),%rbx
   21515:	lea    0x1(%rbx),%r9
   21519:	movzbl (%r9),%r10d
   2151d:	movzbl (%rbx),%r14d
   21521:	shl    $0x8,%rdx
   21525:	add    %r14,%rdx
   21528:	cmp    $0xff,%r14b
   2152c:	jne    2153b <decode_mcu_fast+0x57b>
   2152e:	test   %r10b,%r10b
   21531:	jne    217d1 <decode_mcu_fast+0x811>
   21537:	lea    0x2(%rbx),%r9
   2153b:	lea    0x1(%r9),%r14
   2153f:	movzbl (%r14),%ebx
   21543:	movzbl (%r9),%r10d
   21547:	shl    $0x8,%rdx
   2154b:	add    %r10,%rdx
   2154e:	cmp    $0xff,%r10b
   21552:	jne    21560 <decode_mcu_fast+0x5a0>
   21554:	test   %bl,%bl
   21556:	jne    217e7 <decode_mcu_fast+0x827>
   2155c:	lea    0x2(%r9),%r14
   21560:	lea    0x1(%r14),%rbx
   21564:	movzbl (%rbx),%r9d
   21568:	movzbl (%r14),%r10d
   2156c:	shl    $0x8,%rdx
   21570:	add    %r10,%rdx
   21573:	add    $0x30,%ecx
   21576:	cmp    $0xff,%r10b
   2157a:	je     217fc <decode_mcu_fast+0x83c>
   21580:	mov    -0x40(%rbp),%r10
   21584:	mov    %rcx,%r14
   21587:	lea    0x38(%r14),%ecx
   2158b:	mov    %rdx,%r9
   2158e:	shr    %cl,%r9
   21591:	movzbl %r9b,%ecx
   21595:	movslq %ecx,%rcx
   21598:	movslq 0x128(%r15,%rcx,4),%rcx
   215a0:	mov    %rcx,%r9
   215a3:	sar    $0x8,%r9d
   215a7:	sub    %r9d,%r14d
   215aa:	cmp    $0x8,%r9d
   215ae:	jg     21812 <decode_mcu_fast+0x852>
   215b4:	movzbl %cl,%r15d
   215b8:	mov    %r14,%rcx
   215bb:	mov    -0x70(%rbp),%r9
   215bf:	test   %r15d,%r15d
   215c2:	jle    2170c <decode_mcu_fast+0x74c>
   215c8:	cmp    $0x10,%ecx
   215cb:	jg     216b8 <decode_mcu_fast+0x6f8>
   215d1:	lea    0x1(%rbx),%r9
   215d5:	movzbl (%r9),%r14d
   215d9:	movzbl (%rbx),%r13d
   215dd:	shl    $0x8,%rdx
   215e1:	add    %r13,%rdx
   215e4:	cmp    $0xff,%r13b
   215e8:	jne    215f7 <decode_mcu_fast+0x637>
   215ea:	test   %r14b,%r14b
   215ed:	jne    21849 <decode_mcu_fast+0x889>
   215f3:	lea    0x2(%rbx),%r9
   215f7:	lea    0x1(%r9),%rbx
   215fb:	movzbl (%rbx),%r14d
   215ff:	movzbl (%r9),%r13d
   21603:	shl    $0x8,%rdx
   21607:	add    %r13,%rdx
   2160a:	cmp    $0xff,%r13b
   2160e:	jne    2161d <decode_mcu_fast+0x65d>
   21610:	test   %r14b,%r14b
   21613:	jne    2185f <decode_mcu_fast+0x89f>
   21619:	lea    0x2(%r9),%rbx
   2161d:	lea    0x1(%rbx),%r9
   21621:	movzbl (%r9),%r14d
   21625:	movzbl (%rbx),%r13d
   21629:	shl    $0x8,%rdx
   2162d:	add    %r13,%rdx
   21630:	cmp    $0xff,%r13b
   21634:	jne    21643 <decode_mcu_fast+0x683>
   21636:	test   %r14b,%r14b
   21639:	jne    21875 <decode_mcu_fast+0x8b5>
   2163f:	lea    0x2(%rbx),%r9
   21643:	lea    0x1(%r9),%rbx
   21647:	movzbl (%rbx),%r14d
   2164b:	movzbl (%r9),%r13d
   2164f:	shl    $0x8,%rdx
   21653:	add    %r13,%rdx
   21656:	cmp    $0xff,%r13b
   2165a:	jne    21669 <decode_mcu_fast+0x6a9>
   2165c:	test   %r14b,%r14b
   2165f:	jne    2188b <decode_mcu_fast+0x8cb>
   21665:	lea    0x2(%r9),%rbx
   21669:	lea    0x1(%rbx),%r9
   2166d:	movzbl (%r9),%r14d
   21671:	movzbl (%rbx),%r13d
   21675:	shl    $0x8,%rdx
   21679:	add    %r13,%rdx
   2167c:	cmp    $0xff,%r13b
   21680:	jne    2168f <decode_mcu_fast+0x6cf>
   21682:	test   %r14b,%r14b
   21685:	jne    218a1 <decode_mcu_fast+0x8e1>
   2168b:	lea    0x2(%rbx),%r9
   2168f:	lea    0x1(%r9),%rbx
   21693:	movzbl (%rbx),%r14d
   21697:	movzbl (%r9),%r13d
   2169b:	shl    $0x8,%rdx
   2169f:	add    %r13,%rdx
   216a2:	add    $0x30,%ecx
   216a5:	cmp    $0xff,%r13b
   216a9:	jne    216b8 <decode_mcu_fast+0x6f8>
   216ab:	test   %r14b,%r14b
   216ae:	jne    218b7 <decode_mcu_fast+0x8f7>
   216b4:	lea    0x2(%r9),%rbx
   216b8:	sub    %r15d,%ecx
   216bb:	mov    %rdx,%r14
   216be:	shr    %cl,%r14
   216c1:	mov    %r15,%r9
   216c4:	mov    %rcx,%r15
   216c7:	mov    %r9,%rcx
   216ca:	mov    %rax,%r13
   216cd:	shl    %cl,%r13d
   216d0:	mov    %rcx,%r9
   216d3:	add    $0xffffffff,%r13d
   216d7:	and    %r14d,%r13d
   216da:	lea    0x1f(%r9),%ecx
   216de:	mov    %rax,%r14
   216e1:	shl    %cl,%r14d
   216e4:	neg    %r14d
   216e7:	add    %r13d,%r14d
   216ea:	sar    $0x1f,%r14d
   216ee:	mov    %r9,%rcx
   216f1:	mov    $0xffffffffffffffff,%r9
   216f8:	shl    %cl,%r9d
   216fb:	lea    0x1(%r9),%ecx
   216ff:	and    %r14d,%ecx
   21702:	add    %ecx,%r13d
   21705:	mov    %r15,%rcx
   21708:	mov    -0x70(%rbp),%r9
   2170c:	movslq 0x120(%r8,%r12,4),%r14
   21714:	test   %r14d,%r14d
   21717:	je     21734 <decode_mcu_fast+0x774>
   21719:	movslq 0x1e4(%rdi,%r12,4),%r14
   21721:	add    -0x80(%rbp,%r14,4),%r13d
   21726:	mov    %r13d,-0x80(%rbp,%r14,4)
   2172b:	test   %r11,%r11
   2172e:	je     21734 <decode_mcu_fast+0x774>
   21730:	mov    %r13w,(%r11)
   21734:	movslq 0x148(%r8,%r12,4),%r12
   2173c:	test   %r12d,%r12d
   2173f:	jne    218cd <decode_mcu_fast+0x90d>
   21745:	mov    %rax,%r10
   21748:	jmpq   2113c <decode_mcu_fast+0x17c>
   2174d:	add    $0x1,%r11d
   21751:	add    $0xffffffff,%ecx
   21754:	mov    %rdx,%r13
   21757:	shr    %cl,%r13
   2175a:	and    $0x1,%r13d
   2175e:	lea    0x0(%r13,%r12,2),%r12d
   21763:	movslq %r11d,%r13
   21766:	movslq %r12d,%r14
   21769:	cmp    (%rsi,%r13,8),%r14
   2176d:	jg     2174d <decode_mcu_fast+0x78d>
   2176f:	add    0x90(%rsi,%r13,8),%r12d
   21777:	movzbl %r12b,%r11d
   2177b:	movslq %r11d,%r11
   2177e:	mov    0x120(%rsi),%r12
   21785:	movzbl 0x11(%r12,%r11,1),%r11d
   2178b:	jmpq   21371 <decode_mcu_fast+0x3b1>
   21790:	and    $0xffffffffffffff00,%rdx
   21797:	mov    %r10d,0x21c(%rdi)
   2179e:	mov    %rbx,%r9
   217a1:	jmpq   214ca <decode_mcu_fast+0x50a>
   217a6:	and    $0xffffffffffffff00,%rdx
   217ad:	mov    %ebx,0x21c(%rdi)
   217b3:	mov    %r9,%r10
   217b6:	jmpq   214ef <decode_mcu_fast+0x52f>
   217bb:	and    $0xffffffffffffff00,%rdx
   217c2:	mov    %r9d,0x21c(%rdi)
   217c9:	mov    %r10,%rbx
   217cc:	jmpq   21515 <decode_mcu_fast+0x555>
   217d1:	and    $0xffffffffffffff00,%rdx
   217d8:	mov    %r10d,0x21c(%rdi)
   217df:	mov    %rbx,%r9
   217e2:	jmpq   2153b <decode_mcu_fast+0x57b>
   217e7:	and    $0xffffffffffffff00,%rdx
   217ee:	mov    %ebx,0x21c(%rdi)
   217f4:	mov    %r9,%r14
   217f7:	jmpq   21560 <decode_mcu_fast+0x5a0>
   217fc:	test   %r9b,%r9b
   217ff:	jne    218e0 <decode_mcu_fast+0x920>
   21805:	lea    0x2(%r14),%rbx
   21809:	mov    -0x40(%rbp),%r10
   2180d:	jmpq   21584 <decode_mcu_fast+0x5c4>
   21812:	mov    %r14,%rcx
   21815:	mov    %rdx,%r10
   21818:	shr    %cl,%r10
   2181b:	mov    %rcx,%r14
   2181e:	mov    %r9,%rcx
   21821:	mov    %rax,%r9
   21824:	shl    %cl,%r9d
   21827:	add    $0xffffffff,%r9d
   2182b:	and    %r9d,%r10d
   2182e:	mov    %rbx,-0x68(%rbp)
   21832:	mov    %r11,-0x50(%rbp)
   21836:	mov    %rsi,-0x48(%rbp)
   2183a:	mov    %rcx,%rsi
   2183d:	mov    %r14,%rcx
   21840:	mov    -0x70(%rbp),%r9
   21844:	jmpq   2190d <decode_mcu_fast+0x94d>
   21849:	and    $0xffffffffffffff00,%rdx
   21850:	mov    %r14d,0x21c(%rdi)
   21857:	mov    %rbx,%r9
   2185a:	jmpq   215f7 <decode_mcu_fast+0x637>
   2185f:	and    $0xffffffffffffff00,%rdx
   21866:	mov    %r14d,0x21c(%rdi)
   2186d:	mov    %r9,%rbx
   21870:	jmpq   2161d <decode_mcu_fast+0x65d>
   21875:	and    $0xffffffffffffff00,%rdx
   2187c:	mov    %r14d,0x21c(%rdi)
   21883:	mov    %rbx,%r9
   21886:	jmpq   21643 <decode_mcu_fast+0x683>
   2188b:	and    $0xffffffffffffff00,%rdx
   21892:	mov    %r14d,0x21c(%rdi)
   21899:	mov    %r9,%rbx
   2189c:	jmpq   21669 <decode_mcu_fast+0x6a9>
   218a1:	and    $0xffffffffffffff00,%rdx
   218a8:	mov    %r14d,0x21c(%rdi)
   218af:	mov    %rbx,%r9
   218b2:	jmpq   2168f <decode_mcu_fast+0x6cf>
   218b7:	and    $0xffffffffffffff00,%rdx
   218be:	mov    %r14d,0x21c(%rdi)
   218c5:	mov    %r9,%rbx
   218c8:	jmpq   216b8 <decode_mcu_fast+0x6f8>
   218cd:	test   %r11,%r11
   218d0:	je     2194d <decode_mcu_fast+0x98d>
   218d2:	mov    $0xffffffff,%r8d
   218d8:	mov    %rax,%r13
   218db:	jmpq   21a9f <decode_mcu_fast+0xadf>
   218e0:	and    $0xffffffffffffff00,%rdx
   218e7:	mov    %r9d,0x21c(%rdi)
   218ee:	mov    %r14,%rbx
   218f1:	mov    -0x40(%rbp),%r10
   218f5:	jmpq   21584 <decode_mcu_fast+0x5c4>
   218fa:	add    $0x1,%esi
   218fd:	add    $0xffffffff,%ecx
   21900:	mov    %rdx,%rbx
   21903:	shr    %cl,%rbx
   21906:	and    $0x1,%ebx
   21909:	lea    (%rbx,%r10,2),%r10d
   2190d:	movslq %esi,%rbx
   21910:	mov    (%r15,%rbx,8),%r11
   21914:	movslq %r10d,%r14
   21917:	cmp    %r14,%r11
   2191a:	jl     218fa <decode_mcu_fast+0x93a>
   2191c:	add    0x90(%r15,%rbx,8),%r10d
   21924:	movzbl %r10b,%esi
   21928:	movslq %esi,%rsi
   2192b:	mov    0x120(%r15),%rbx
   21932:	movzbl 0x11(%rbx,%rsi,1),%r15d
   21938:	mov    -0x48(%rbp),%rsi
   2193c:	mov    -0x50(%rbp),%r11
   21940:	mov    -0x68(%rbp),%rbx
   21944:	mov    -0x40(%rbp),%r10
   21948:	jmpq   215bf <decode_mcu_fast+0x5ff>
   2194d:	mov    %rax,%r10
   21950:	jmpq   2113c <decode_mcu_fast+0x17c>
   21955:	cmp    $0x10,%ecx
   21958:	jg     21a40 <decode_mcu_fast+0xa80>
   2195e:	lea    0x1(%rbx),%r8
   21962:	movzbl (%r8),%r15d
   21966:	movzbl (%rbx),%r14d
   2196a:	shl    $0x8,%rdx
   2196e:	add    %r14,%rdx
   21971:	cmp    $0xff,%r14b
   21975:	jne    21984 <decode_mcu_fast+0x9c4>
   21977:	test   %r15b,%r15b
   2197a:	jne    21ab6 <decode_mcu_fast+0xaf6>
   21980:	lea    0x2(%rbx),%r8
   21984:	lea    0x1(%r8),%r14
   21988:	movzbl (%r14),%ebx
   2198c:	movzbl (%r8),%r15d
   21990:	shl    $0x8,%rdx
   21994:	add    %r15,%rdx
   21997:	cmp    $0xff,%r15b
   2199b:	jne    219a9 <decode_mcu_fast+0x9e9>
   2199d:	test   %bl,%bl
   2199f:	jne    21acc <decode_mcu_fast+0xb0c>
   219a5:	lea    0x2(%r8),%r14
   219a9:	lea    0x1(%r14),%rbx
   219ad:	movzbl (%rbx),%r15d
   219b1:	movzbl (%r14),%r8d
   219b5:	shl    $0x8,%rdx
   219b9:	add    %r8,%rdx
   219bc:	cmp    $0xff,%r8b
   219c0:	jne    219cf <decode_mcu_fast+0xa0f>
   219c2:	test   %r15b,%r15b
   219c5:	jne    21ae1 <decode_mcu_fast+0xb21>
   219cb:	lea    0x2(%r14),%rbx
   219cf:	lea    0x1(%rbx),%r8
   219d3:	movzbl (%r8),%r14d
   219d7:	movzbl (%rbx),%r15d
   219db:	shl    $0x8,%rdx
   219df:	add    %r15,%rdx
   219e2:	cmp    $0xff,%r15b
   219e6:	jne    219f5 <decode_mcu_fast+0xa35>
   219e8:	test   %r14b,%r14b
   219eb:	jne    21af7 <decode_mcu_fast+0xb37>
   219f1:	lea    0x2(%rbx),%r8
   219f5:	lea    0x1(%r8),%r14
   219f9:	movzbl (%r14),%ebx
   219fd:	movzbl (%r8),%r15d
   21a01:	shl    $0x8,%rdx
   21a05:	add    %r15,%rdx
   21a08:	cmp    $0xff,%r15b
   21a0c:	jne    21a1a <decode_mcu_fast+0xa5a>
   21a0e:	test   %bl,%bl
   21a10:	jne    21b0d <decode_mcu_fast+0xb4d>
   21a16:	lea    0x2(%r8),%r14
   21a1a:	lea    0x1(%r14),%rbx
   21a1e:	movzbl (%rbx),%r8d
   21a22:	movzbl (%r14),%r15d
   21a26:	shl    $0x8,%rdx
   21a2a:	add    %r15,%rdx
   21a2d:	add    $0x30,%ecx
   21a30:	cmp    $0xff,%r15b
   21a34:	je     21b22 <decode_mcu_fast+0xb62>
   21a3a:	mov    $0xffffffff,%r8d
   21a40:	sub    %r12d,%ecx
   21a43:	mov    %rdx,%r14
   21a46:	shr    %cl,%r14
   21a49:	mov    %rcx,%r15
   21a4c:	mov    %r12,%rcx
   21a4f:	mov    %rax,%r12
   21a52:	shl    %cl,%r12d
   21a55:	add    $0xffffffff,%r12d
   21a59:	and    %r14d,%r12d
   21a5c:	mov    %rcx,%r14
   21a5f:	lea    0x1f(%r14),%ecx
   21a63:	shl    %cl,%eax
   21a65:	neg    %eax
   21a67:	add    %r12d,%eax
   21a6a:	sar    $0x1f,%eax
   21a6d:	mov    %r14,%rcx
   21a70:	mov    %r8,%r14
   21a73:	shl    %cl,%r14d
   21a76:	lea    0x1(%r14),%ecx
   21a7a:	and    %ecx,%eax
   21a7c:	add    %eax,%r12d
   21a7f:	shr    $0x4,%r9d
   21a83:	lea    (%r9,%r13,1),%eax
   21a87:	movslq %eax,%rcx
   21a8a:	movslq (%r10,%rcx,4),%rcx
   21a8e:	mov    %r12w,(%r11,%rcx,2)
   21a93:	mov    %r15,%rcx
   21a96:	lea    0x1(%rax),%r13d
   21a9a:	mov    $0x1,%eax
   21a9f:	cmp    $0x3f,%r13d
   21aa3:	jle    21b3a <decode_mcu_fast+0xb7a>
   21aa9:	mov    -0x60(%rbp),%r8
   21aad:	mov    -0x70(%rbp),%r9
   21ab1:	jmpq   2114a <decode_mcu_fast+0x18a>
   21ab6:	and    $0xffffffffffffff00,%rdx
   21abd:	mov    %r15d,0x21c(%rdi)
   21ac4:	mov    %rbx,%r8
   21ac7:	jmpq   21984 <decode_mcu_fast+0x9c4>
   21acc:	and    $0xffffffffffffff00,%rdx
   21ad3:	mov    %ebx,0x21c(%rdi)
   21ad9:	mov    %r8,%r14
   21adc:	jmpq   219a9 <decode_mcu_fast+0x9e9>
   21ae1:	and    $0xffffffffffffff00,%rdx
   21ae8:	mov    %r15d,0x21c(%rdi)
   21aef:	mov    %r14,%rbx
   21af2:	jmpq   219cf <decode_mcu_fast+0xa0f>
   21af7:	and    $0xffffffffffffff00,%rdx
   21afe:	mov    %r14d,0x21c(%rdi)
   21b05:	mov    %rbx,%r8
   21b08:	jmpq   219f5 <decode_mcu_fast+0xa35>
   21b0d:	and    $0xffffffffffffff00,%rdx
   21b14:	mov    %ebx,0x21c(%rdi)
   21b1a:	mov    %r8,%r14
   21b1d:	jmpq   21a1a <decode_mcu_fast+0xa5a>
   21b22:	test   %r8b,%r8b
   21b25:	jne    21c8b <decode_mcu_fast+0xccb>
   21b2b:	lea    0x2(%r14),%rbx
   21b2f:	mov    $0xffffffff,%r8d
   21b35:	jmpq   21a40 <decode_mcu_fast+0xa80>
   21b3a:	cmp    $0x10,%ecx
   21b3d:	jg     21c2a <decode_mcu_fast+0xc6a>
   21b43:	lea    0x1(%rbx),%r9
   21b47:	movzbl (%r9),%r14d
   21b4b:	movzbl (%rbx),%r12d
   21b4f:	shl    $0x8,%rdx
   21b53:	add    %r12,%rdx
   21b56:	cmp    $0xff,%r12b
   21b5a:	jne    21b69 <decode_mcu_fast+0xba9>
   21b5c:	test   %r14b,%r14b
   21b5f:	jne    21ca7 <decode_mcu_fast+0xce7>
   21b65:	lea    0x2(%rbx),%r9
   21b69:	lea    0x1(%r9),%rbx
   21b6d:	movzbl (%rbx),%r14d
   21b71:	movzbl (%r9),%r12d
   21b75:	shl    $0x8,%rdx
   21b79:	add    %r12,%rdx
   21b7c:	cmp    $0xff,%r12b
   21b80:	jne    21b8f <decode_mcu_fast+0xbcf>
   21b82:	test   %r14b,%r14b
   21b85:	jne    21cbd <decode_mcu_fast+0xcfd>
   21b8b:	lea    0x2(%r9),%rbx
   21b8f:	lea    0x1(%rbx),%r9
   21b93:	movzbl (%r9),%r14d
   21b97:	movzbl (%rbx),%r12d
   21b9b:	shl    $0x8,%rdx
   21b9f:	add    %r12,%rdx
   21ba2:	cmp    $0xff,%r12b
   21ba6:	jne    21bb5 <decode_mcu_fast+0xbf5>
   21ba8:	test   %r14b,%r14b
   21bab:	jne    21cd3 <decode_mcu_fast+0xd13>
   21bb1:	lea    0x2(%rbx),%r9
   21bb5:	lea    0x1(%r9),%rbx
   21bb9:	movzbl (%rbx),%r14d
   21bbd:	movzbl (%r9),%r12d
   21bc1:	shl    $0x8,%rdx
   21bc5:	add    %r12,%rdx
   21bc8:	cmp    $0xff,%r12b
   21bcc:	jne    21bdb <decode_mcu_fast+0xc1b>
   21bce:	test   %r14b,%r14b
   21bd1:	jne    21ce9 <decode_mcu_fast+0xd29>
   21bd7:	lea    0x2(%r9),%rbx
   21bdb:	lea    0x1(%rbx),%r9
   21bdf:	movzbl (%r9),%r14d
   21be3:	movzbl (%rbx),%r12d
   21be7:	shl    $0x8,%rdx
   21beb:	add    %r12,%rdx
   21bee:	cmp    $0xff,%r12b
   21bf2:	jne    21c01 <decode_mcu_fast+0xc41>
   21bf4:	test   %r14b,%r14b
   21bf7:	jne    21cff <decode_mcu_fast+0xd3f>
   21bfd:	lea    0x2(%rbx),%r9
   21c01:	lea    0x1(%r9),%rbx
   21c05:	movzbl (%rbx),%r14d
   21c09:	movzbl (%r9),%r12d
   21c0d:	shl    $0x8,%rdx
   21c11:	add    %r12,%rdx
   21c14:	add    $0x30,%ecx
   21c17:	cmp    $0xff,%r12b
   21c1b:	jne    21c2a <decode_mcu_fast+0xc6a>
   21c1d:	test   %r14b,%r14b
   21c20:	jne    21d15 <decode_mcu_fast+0xd55>
   21c26:	lea    0x2(%r9),%rbx
   21c2a:	mov    %rcx,%r14
   21c2d:	lea    0x38(%r14),%ecx
   21c31:	mov    %rdx,%r9
   21c34:	shr    %cl,%r9
   21c37:	movzbl %r9b,%ecx
   21c3b:	movslq %ecx,%rcx
   21c3e:	movslq 0x128(%rsi,%rcx,4),%r12
   21c46:	mov    %r12,%r9
   21c49:	sar    $0x8,%r9d
   21c4d:	mov    %r14,%rcx
   21c50:	sub    %r9d,%ecx
   21c53:	cmp    $0x8,%r9d
   21c57:	jg     21d2b <decode_mcu_fast+0xd6b>
   21c5d:	movzbl %r12b,%r9d
   21c61:	mov    %r9,%r12
   21c64:	and    $0xf,%r12d
   21c68:	test   %r12d,%r12d
   21c6b:	jg     21955 <decode_mcu_fast+0x995>
   21c71:	and    $0xfffffff0,%r9d
   21c75:	cmp    $0xe0,%r9d
   21c7c:	jle    21d54 <decode_mcu_fast+0xd94>
   21c82:	lea    0xf(%r13),%eax
   21c86:	jmpq   21a96 <decode_mcu_fast+0xad6>
   21c8b:	and    $0xffffffffffffff00,%rdx
   21c92:	mov    %r8d,0x21c(%rdi)
   21c99:	mov    %r14,%rbx
   21c9c:	mov    $0xffffffff,%r8d
   21ca2:	jmpq   21a40 <decode_mcu_fast+0xa80>
   21ca7:	and    $0xffffffffffffff00,%rdx
   21cae:	mov    %r14d,0x21c(%rdi)
   21cb5:	mov    %rbx,%r9
   21cb8:	jmpq   21b69 <decode_mcu_fast+0xba9>
   21cbd:	and    $0xffffffffffffff00,%rdx
   21cc4:	mov    %r14d,0x21c(%rdi)
   21ccb:	mov    %r9,%rbx
   21cce:	jmpq   21b8f <decode_mcu_fast+0xbcf>
   21cd3:	and    $0xffffffffffffff00,%rdx
   21cda:	mov    %r14d,0x21c(%rdi)
   21ce1:	mov    %rbx,%r9
   21ce4:	jmpq   21bb5 <decode_mcu_fast+0xbf5>
   21ce9:	and    $0xffffffffffffff00,%rdx
   21cf0:	mov    %r14d,0x21c(%rdi)
   21cf7:	mov    %r9,%rbx
   21cfa:	jmpq   21bdb <decode_mcu_fast+0xc1b>
   21cff:	and    $0xffffffffffffff00,%rdx
   21d06:	mov    %r14d,0x21c(%rdi)
   21d0d:	mov    %rbx,%r9
   21d10:	jmpq   21c01 <decode_mcu_fast+0xc41>
   21d15:	and    $0xffffffffffffff00,%rdx
   21d1c:	mov    %r14d,0x21c(%rdi)
   21d23:	mov    %r9,%rbx
   21d26:	jmpq   21c2a <decode_mcu_fast+0xc6a>
   21d2b:	mov    %rdx,%r12
   21d2e:	shr    %cl,%r12
   21d31:	mov    %rcx,%r15
   21d34:	mov    %r9,%rcx
   21d37:	mov    %rax,%r14
   21d3a:	shl    %cl,%r14d
   21d3d:	mov    %rcx,%r9
   21d40:	lea    -0x1(%r14),%ecx
   21d44:	and    %ecx,%r12d
   21d47:	mov    %rbx,-0x50(%rbp)
   21d4b:	mov    %r13,-0x68(%rbp)
   21d4f:	mov    %r15,%rcx
   21d52:	jmp    21d75 <decode_mcu_fast+0xdb5>
   21d54:	mov    -0x60(%rbp),%r8
   21d58:	mov    -0x70(%rbp),%r9
   21d5c:	jmpq   2114a <decode_mcu_fast+0x18a>
   21d61:	add    $0x1,%r9d
   21d65:	add    $0xffffffff,%ecx
   21d68:	mov    %rdx,%rbx
   21d6b:	shr    %cl,%rbx
   21d6e:	and    $0x1,%ebx
   21d71:	lea    (%rbx,%r12,2),%r12d
   21d75:	movslq %r9d,%r14
   21d78:	mov    (%rsi,%r14,8),%r13
   21d7c:	movslq %r12d,%rbx
   21d7f:	cmp    %rbx,%r13
   21d82:	jl     21d61 <decode_mcu_fast+0xda1>
   21d84:	add    0x90(%rsi,%r14,8),%r12d
   21d8c:	movzbl %r12b,%ebx
   21d90:	movslq %ebx,%rbx
   21d93:	mov    0x120(%rsi),%r9
   21d9a:	movzbl 0x11(%r9,%rbx,1),%r9d
   21da0:	mov    -0x68(%rbp),%r13
   21da4:	mov    -0x50(%rbp),%rbx
   21da8:	jmpq   21c61 <decode_mcu_fast+0xca1>
   21dad:	nopl   (%rax)

0000000000021db0 <decode_mcu>:
   21db0:	push   %rbp
   21db1:	mov    %rsp,%rbp
   21db4:	sub    $0x20,%rsp
   21db8:	mov    0x250(%rdi),%rcx
   21dbf:	xor    %edx,%edx
   21dc1:	mov    $0x1,%eax
   21dc6:	mov    0x170(%rdi),%r8d
   21dcd:	test   %r8d,%r8d
   21dd0:	jne    21e01 <decode_mcu+0x51>
   21dd2:	mov    %rax,%r9
   21dd5:	mov    0x28(%rdi),%r8
   21dd9:	mov    0x8(%r8),%r10
   21ddd:	movslq 0x1e0(%rdi),%r8
   21de4:	shl    $0x9,%r8
   21de8:	cmp    %r8,%r10
   21deb:	jae    21e0f <decode_mcu+0x5f>
   21ded:	movslq 0x10(%rcx),%r8
   21df1:	test   %r8d,%r8d
   21df4:	je     21e20 <decode_mcu+0x70>
   21df6:	mov    0x38(%rcx),%edx
   21df9:	add    $0xffffffff,%edx
   21dfc:	mov    %edx,0x38(%rcx)
   21dff:	leaveq 
   21e00:	retq   
   21e01:	mov    0x38(%rcx),%r8d
   21e05:	test   %r8d,%r8d
   21e08:	je     21e40 <decode_mcu+0x90>
   21e0a:	mov    %rdx,%r9
   21e0d:	jmp    21dd5 <decode_mcu+0x25>
   21e0f:	movslq 0x21c(%rdi),%r8
   21e16:	test   %r8d,%r8d
   21e19:	jne    21ded <decode_mcu+0x3d>
   21e1b:	mov    %r9,%rdx
   21e1e:	jmp    21ded <decode_mcu+0x3d>
   21e20:	test   %edx,%edx
   21e22:	jg     21e76 <decode_mcu+0xc6>
   21e24:	mov    %rcx,-0x18(%rbp)
   21e28:	callq  20920 <decode_mcu_slow>
   21e2d:	test   %eax,%eax
   21e2f:	je     21eb9 <decode_mcu+0x109>
   21e35:	mov    $0x1,%eax
   21e3a:	mov    -0x18(%rbp),%rcx
   21e3e:	jmp    21df6 <decode_mcu+0x46>
   21e40:	mov    %rdi,%rax
   21e43:	mov    %rdi,-0x18(%rbp)
   21e47:	mov    %rcx,-0x10(%rbp)
   21e4b:	mov    %rsi,-0x8(%rbp)
   21e4f:	mov    %rax,%rdi
   21e52:	callq  20880 <process_restart>
   21e57:	test   %eax,%eax
   21e59:	je     21ebd <decode_mcu+0x10d>
   21e5b:	mov    $0x1,%eax
   21e60:	xor    %edx,%edx
   21e62:	mov    -0x8(%rbp),%rsi
   21e66:	mov    -0x10(%rbp),%rcx
   21e6a:	mov    -0x18(%rbp),%rdi
   21e6e:	mov    %rdx,%r9
   21e71:	jmpq   21dd5 <decode_mcu+0x25>
   21e76:	mov    %rdi,%rax
   21e79:	mov    %rsi,%rdx
   21e7c:	mov    %r13,-0x8(%rbp)
   21e80:	mov    %r14,-0x10(%rbp)
   21e84:	mov    %r15,-0x18(%rbp)
   21e88:	mov    %rcx,%r13
   21e8b:	mov    %rdi,%r14
   21e8e:	mov    %rax,%rdi
   21e91:	mov    %rsi,%r15
   21e94:	mov    %rdx,%rsi
   21e97:	callq  20fc0 <decode_mcu_fast>
   21e9c:	test   %eax,%eax
   21e9e:	je     21ec1 <decode_mcu+0x111>
   21ea0:	mov    %r13,%rcx
   21ea3:	mov    -0x18(%rbp),%r15
   21ea7:	mov    -0x10(%rbp),%r14
   21eab:	mov    -0x8(%rbp),%r13
   21eaf:	mov    $0x1,%eax
   21eb4:	jmpq   21df6 <decode_mcu+0x46>
   21eb9:	xor    %eax,%eax
   21ebb:	leaveq 
   21ebc:	retq   
   21ebd:	xor    %eax,%eax
   21ebf:	leaveq 
   21ec0:	retq   
   21ec1:	mov    %r13,%rcx
   21ec4:	mov    %r15,%rsi
   21ec7:	mov    %r14,%rdi
   21eca:	mov    -0x18(%rbp),%r15
   21ece:	mov    -0x10(%rbp),%r14
   21ed2:	mov    -0x8(%rbp),%r13
   21ed6:	jmpq   21e24 <decode_mcu+0x74>
   21edb:	nopl   0x0(%rax,%rax,1)

0000000000021ee0 <jinit_input_controller>:
   21ee0:	push   %rbp
   21ee1:	mov    %rsp,%rbp
   21ee4:	sub    $0x10,%rsp
   21ee8:	mov    %r15,-0x8(%rbp)
   21eec:	mov    0x8(%rdi),%rax
   21ef0:	mov    (%rax),%rax
   21ef3:	xor    %esi,%esi
   21ef5:	mov    $0x30,%edx
   21efa:	mov    %rdi,%r15
   21efd:	callq  *%rax
   21eff:	mov    %rax,0x240(%r15)
   21f06:	lea    0x43(%rip),%rcx        # 21f50 <consume_markers>
   21f0d:	mov    %rcx,(%rax)
   21f10:	lea    0x769(%rip),%rcx        # 22680 <reset_input_controller>
   21f17:	mov    %rcx,0x8(%rax)
   21f1b:	lea    0x6de(%rip),%rcx        # 22600 <start_input_pass>
   21f22:	mov    %rcx,0x10(%rax)
   21f26:	lea    0x733(%rip),%rcx        # 22660 <finish_input_pass>
   21f2d:	mov    %rcx,0x18(%rax)
   21f31:	movl   $0x0,0x20(%rax)
   21f38:	movl   $0x0,0x24(%rax)
   21f3f:	movl   $0x1,0x28(%rax)
   21f46:	mov    -0x8(%rbp),%r15
   21f4a:	leaveq 
   21f4b:	retq   
   21f4c:	nopl   0x0(%rax)

0000000000021f50 <consume_markers>:
   21f50:	push   %rbp
   21f51:	mov    %rsp,%rbp
   21f54:	sub    $0x10,%rsp
   21f58:	mov    $0x2,%eax
   21f5d:	mov    0x240(%rdi),%rdx
   21f64:	movslq 0x24(%rdx),%rcx
   21f68:	test   %ecx,%ecx
   21f6a:	je     21f6e <consume_markers+0x1e>
   21f6c:	leaveq 
   21f6d:	retq   
   21f6e:	mov    0x248(%rdi),%rax
   21f75:	mov    0x8(%rax),%rax
   21f79:	mov    %rdi,%rcx
   21f7c:	mov    %r15,-0x10(%rbp)
   21f80:	mov    %rdi,-0x8(%rbp)
   21f84:	mov    %rcx,%rdi
   21f87:	mov    %rdx,%r15
   21f8a:	callq  *%rax
   21f8c:	cmp    $0x1,%eax
   21f8f:	je     21f9c <consume_markers+0x4c>
   21f91:	cmp    $0x2,%eax
   21f94:	je     21fb7 <consume_markers+0x67>
   21f96:	mov    -0x10(%rbp),%r15
   21f9a:	leaveq 
   21f9b:	retq   
   21f9c:	mov    $0x1,%eax
   21fa1:	movslq 0x28(%r15),%rcx
   21fa5:	test   %ecx,%ecx
   21fa7:	jne    21fe5 <consume_markers+0x95>
   21fa9:	movslq 0x20(%r15),%rcx
   21fad:	test   %ecx,%ecx
   21faf:	je     22001 <consume_markers+0xb1>
   21fb1:	mov    -0x8(%rbp),%rdi
   21fb5:	jmp    22022 <consume_markers+0xd2>
   21fb7:	movl   $0x1,0x24(%r15)
   21fbf:	movslq 0x28(%r15),%rax
   21fc3:	test   %eax,%eax
   21fc5:	jne    22033 <consume_markers+0xe3>
   21fc7:	mov    -0x8(%rbp),%rcx
   21fcb:	movslq 0xac(%rcx),%rax
   21fd2:	cmp    0xb4(%rcx),%eax
   21fd8:	jl     22051 <consume_markers+0x101>
   21fda:	mov    $0x2,%eax
   21fdf:	mov    -0x10(%rbp),%r15
   21fe3:	leaveq 
   21fe4:	retq   
   21fe5:	mov    -0x8(%rbp),%rdi
   21fe9:	callq  22080 <initial_setup>
   21fee:	movl   $0x0,0x28(%r15)
   21ff6:	mov    $0x1,%eax
   21ffb:	mov    -0x10(%rbp),%r15
   21fff:	leaveq 
   22000:	retq   
   22001:	mov    -0x8(%rbp),%r15
   22005:	mov    (%r15),%rax
   22008:	movl   $0x23,0x28(%rax)
   2200f:	mov    (%r15),%rax
   22012:	mov    (%rax),%rax
   22015:	mov    %r15,%rdi
   22018:	callq  *%rax
   2201a:	mov    %r15,%rdi
   2201d:	mov    $0x1,%eax
   22022:	mov    %rax,%r15
   22025:	callq  22600 <start_input_pass>
   2202a:	mov    %r15,%rax
   2202d:	mov    -0x10(%rbp),%r15
   22031:	leaveq 
   22032:	retq   
   22033:	mov    -0x8(%rbp),%rdi
   22037:	mov    0x248(%rdi),%rax
   2203e:	movslq 0x1c(%rax),%rax
   22042:	test   %eax,%eax
   22044:	jne    22062 <consume_markers+0x112>
   22046:	mov    $0x2,%eax
   2204b:	mov    -0x10(%rbp),%r15
   2204f:	leaveq 
   22050:	retq   
   22051:	mov    %eax,0xb4(%rcx)
   22057:	mov    $0x2,%eax
   2205c:	mov    -0x10(%rbp),%r15
   22060:	leaveq 
   22061:	retq   
   22062:	mov    (%rdi),%rax
   22065:	movl   $0x3b,0x28(%rax)
   2206c:	mov    (%rdi),%rax
   2206f:	mov    (%rax),%rax
   22072:	callq  *%rax
   22074:	mov    $0x2,%eax
   22079:	mov    -0x10(%rbp),%r15
   2207d:	leaveq 
   2207e:	retq   
   2207f:	nop

0000000000022080 <initial_setup>:
   22080:	push   %rbp
   22081:	mov    %rsp,%rbp
   22084:	sub    $0x20,%rsp
   22088:	mov    %r15,-0x18(%rbp)
   2208c:	mov    %r13,-0x8(%rbp)
   22090:	mov    %r14,-0x10(%rbp)
   22094:	mov    0x34(%rdi),%eax
   22097:	cmp    $0xffdc,%eax
   2209c:	ja     220ad <initial_setup+0x2d>
   2209e:	mov    0x30(%rdi),%eax
   220a1:	cmp    $0xffdc,%eax
   220a6:	ja     220ad <initial_setup+0x2d>
   220a8:	mov    %rdi,%r13
   220ab:	jmp    220cc <initial_setup+0x4c>
   220ad:	mov    (%rdi),%rax
   220b0:	movl   $0x29,0x28(%rax)
   220b7:	mov    (%rdi),%rax
   220ba:	movl   $0xffdc,0x2c(%rax)
   220c1:	mov    (%rdi),%rax
   220c4:	mov    (%rax),%rax
   220c7:	mov    %rdi,%r13
   220ca:	callq  *%rax
   220cc:	movslq 0x128(%r13),%rax
   220d3:	cmp    $0x8,%eax
   220d6:	je     220fd <initial_setup+0x7d>
   220d8:	mov    0x0(%r13),%rax
   220dc:	movl   $0xf,0x28(%rax)
   220e3:	movslq 0x128(%r13),%rcx
   220ea:	mov    0x0(%r13),%rax
   220ee:	mov    %ecx,0x2c(%rax)
   220f1:	mov    0x0(%r13),%rax
   220f5:	mov    (%rax),%rax
   220f8:	mov    %r13,%rdi
   220fb:	callq  *%rax
   220fd:	movslq 0x38(%r13),%rax
   22101:	cmp    $0xa,%eax
   22104:	jle    22133 <initial_setup+0xb3>
   22106:	mov    0x0(%r13),%rax
   2210a:	movl   $0x1a,0x28(%rax)
   22111:	movslq 0x38(%r13),%rcx
   22115:	mov    0x0(%r13),%rax
   22119:	mov    %ecx,0x2c(%rax)
   2211c:	mov    0x0(%r13),%rax
   22120:	movl   $0xa,0x30(%rax)
   22127:	mov    0x0(%r13),%rax
   2212b:	mov    (%rax),%rax
   2212e:	mov    %r13,%rdi
   22131:	callq  *%rax
   22133:	mov    0x130(%r13),%r15
   2213a:	movl   $0x1,0x198(%r13)
   22145:	movl   $0x1,0x19c(%r13)
   22150:	xor    %r14d,%r14d
   22153:	jmp    221c0 <initial_setup+0x140>
   22155:	movslq 0x8(%r15),%rax
   22159:	test   %eax,%eax
   2215b:	jle    2216f <initial_setup+0xef>
   2215d:	cmp    $0x4,%eax
   22160:	jg     2216f <initial_setup+0xef>
   22162:	movslq 0xc(%r15),%rax
   22166:	test   %eax,%eax
   22168:	jle    2216f <initial_setup+0xef>
   2216a:	cmp    $0x4,%eax
   2216d:	jle    22186 <initial_setup+0x106>
   2216f:	mov    0x0(%r13),%rax
   22173:	movl   $0x12,0x28(%rax)
   2217a:	mov    0x0(%r13),%rax
   2217e:	mov    (%rax),%rax
   22181:	mov    %r13,%rdi
   22184:	callq  *%rax
   22186:	movslq 0x198(%r13),%rcx
   2218d:	movslq 0x8(%r15),%rax
   22191:	cmp    %ecx,%eax
   22193:	jge    22198 <initial_setup+0x118>
   22195:	mov    %rcx,%rax
   22198:	mov    %eax,0x198(%r13)
   2219f:	movslq 0x19c(%r13),%rcx
   221a6:	movslq 0xc(%r15),%rax
   221aa:	cmp    %ecx,%eax
   221ac:	jge    221b1 <initial_setup+0x131>
   221ae:	mov    %rcx,%rax
   221b1:	mov    %eax,0x19c(%r13)
   221b8:	add    $0x60,%r15
   221bc:	add    $0x1,%r14d
   221c0:	movslq 0x38(%r13),%rax
   221c4:	cmp    %r14d,%eax
   221c7:	jg     22155 <initial_setup+0xd5>
   221c9:	mov    0x130(%r13),%r15
   221d0:	movl   $0x8,0x1a0(%r13)
   221db:	xor    %r14d,%r14d
   221de:	jmpq   222a3 <initial_setup+0x223>
   221e3:	movl   $0x8,0x24(%r15)
   221eb:	movslq 0x8(%r15),%rdi
   221ef:	mov    0x30(%r13),%eax
   221f3:	imul   %rax,%rdi
   221f7:	movslq 0x198(%r13),%rax
   221fe:	shl    $0x3,%eax
   22201:	movslq %eax,%rsi
   22204:	callq  4150 <jdiv_round_up@plt>
   22209:	mov    %eax,0x1c(%r15)
   2220d:	movslq 0xc(%r15),%rdi
   22211:	mov    0x34(%r13),%eax
   22215:	imul   %rax,%rdi
   22219:	movslq 0x19c(%r13),%rax
   22220:	shl    $0x3,%eax
   22223:	movslq %eax,%rsi
   22226:	callq  4150 <jdiv_round_up@plt>
   2222b:	mov    %eax,0x20(%r15)
   2222f:	mov    0x220(%r13),%rax
   22236:	movslq %r14d,%rdx
   22239:	movl   $0x0,0x1c(%rax,%rdx,4)
   22241:	mov    0x1c(%r15),%eax
   22245:	add    $0xffffffff,%eax
   22248:	mov    0x220(%r13),%rcx
   2224f:	mov    %eax,0x44(%rcx,%rdx,4)
   22253:	movslq 0x8(%r15),%rdi
   22257:	mov    0x30(%r13),%eax
   2225b:	imul   %rax,%rdi
   2225f:	movslq 0x198(%r13),%rsi
   22266:	callq  4150 <jdiv_round_up@plt>
   2226b:	mov    %eax,0x28(%r15)
   2226f:	movslq 0xc(%r15),%rdi
   22273:	mov    0x34(%r13),%eax
   22277:	imul   %rax,%rdi
   2227b:	movslq 0x19c(%r13),%rsi
   22282:	callq  4150 <jdiv_round_up@plt>
   22287:	mov    %eax,0x2c(%r15)
   2228b:	movl   $0x1,0x30(%r15)
   22293:	movq   $0x0,0x50(%r15)
   2229b:	add    $0x1,%r14d
   2229f:	add    $0x60,%r15
   222a3:	movslq 0x38(%r13),%rax
   222a7:	cmp    %r14d,%eax
   222aa:	jg     221e3 <initial_setup+0x163>
   222b0:	mov    0x34(%r13),%edi
   222b4:	movslq 0x19c(%r13),%rax
   222bb:	shl    $0x3,%eax
   222be:	movslq %eax,%rsi
   222c1:	callq  4150 <jdiv_round_up@plt>
   222c6:	mov    %eax,0x1a4(%r13)
   222cd:	movslq 0x38(%r13),%rax
   222d1:	cmp    0x1b0(%r13),%eax
   222d8:	jg     22301 <initial_setup+0x281>
   222da:	movslq 0x138(%r13),%rax
   222e1:	test   %eax,%eax
   222e3:	jne    22301 <initial_setup+0x281>
   222e5:	mov    0x240(%r13),%rax
   222ec:	movl   $0x0,0x20(%rax)
   222f3:	mov    -0x10(%rbp),%r14
   222f7:	mov    -0x8(%rbp),%r13
   222fb:	mov    -0x18(%rbp),%r15
   222ff:	leaveq 
   22300:	retq   
   22301:	mov    0x240(%r13),%rax
   22308:	movl   $0x1,0x20(%rax)
   2230f:	mov    -0x10(%rbp),%r14
   22313:	mov    -0x8(%rbp),%r13
   22317:	mov    -0x18(%rbp),%r15
   2231b:	leaveq 
   2231c:	retq   
   2231d:	nopl   (%rax)

0000000000022320 <per_scan_setup>:
   22320:	push   %rbp
   22321:	mov    %rsp,%rbp
   22324:	sub    $0x20,%rsp
   22328:	movslq 0x1b0(%rdi),%rax
   2232f:	cmp    $0x1,%eax
   22332:	je     2234b <per_scan_setup+0x2b>
   22334:	test   %eax,%eax
   22336:	jle    223b2 <per_scan_setup+0x92>
   22338:	cmp    $0x4,%eax
   2233b:	jg     223b2 <per_scan_setup+0x92>
   2233d:	mov    %r15,%rcx
   22340:	mov    %r14,%r15
   22343:	mov    %rdi,%r14
   22346:	jmpq   223ef <per_scan_setup+0xcf>
   2234b:	mov    0x1b8(%rdi),%rcx
   22352:	mov    0x1c(%rcx),%eax
   22355:	mov    %eax,0x1d8(%rdi)
   2235b:	mov    0x20(%rcx),%eax
   2235e:	mov    %eax,0x1dc(%rdi)
   22364:	movl   $0x1,0x34(%rcx)
   2236b:	movl   $0x1,0x38(%rcx)
   22372:	movl   $0x1,0x3c(%rcx)
   22379:	movslq 0x24(%rcx),%rax
   2237d:	mov    %eax,0x40(%rcx)
   22380:	movl   $0x1,0x44(%rcx)
   22387:	mov    0x20(%rcx),%eax
   2238a:	mov    0xc(%rcx),%esi
   2238d:	xor    %edx,%edx
   2238f:	div    %esi
   22391:	test   %edx,%edx
   22393:	jne    22399 <per_scan_setup+0x79>
   22395:	movslq 0xc(%rcx),%rdx
   22399:	mov    %edx,0x48(%rcx)
   2239c:	movl   $0x1,0x1e0(%rdi)
   223a6:	movl   $0x0,0x1e4(%rdi)
   223b0:	leaveq 
   223b1:	retq   
   223b2:	mov    (%rdi),%rax
   223b5:	movl   $0x1a,0x28(%rax)
   223bc:	movslq 0x1b0(%rdi),%rcx
   223c3:	mov    (%rdi),%rax
   223c6:	mov    %ecx,0x2c(%rax)
   223c9:	mov    (%rdi),%rax
   223cc:	movl   $0x4,0x30(%rax)
   223d3:	mov    (%rdi),%rax
   223d6:	mov    (%rax),%rax
   223d9:	mov    %rdi,%rcx
   223dc:	mov    %r15,-0x18(%rbp)
   223e0:	mov    %r14,%r15
   223e3:	mov    %rdi,%r14
   223e6:	mov    %rcx,%rdi
   223e9:	callq  *%rax
   223eb:	mov    -0x18(%rbp),%rcx
   223ef:	mov    0x30(%r14),%edi
   223f3:	movslq 0x198(%r14),%rax
   223fa:	shl    $0x3,%eax
   223fd:	movslq %eax,%rsi
   22400:	mov    %rcx,-0x18(%rbp)
   22404:	callq  4150 <jdiv_round_up@plt>
   22409:	mov    %eax,0x1d8(%r14)
   22410:	mov    0x34(%r14),%edi
   22414:	movslq 0x19c(%r14),%rax
   2241b:	shl    $0x3,%eax
   2241e:	movslq %eax,%rsi
   22421:	callq  4150 <jdiv_round_up@plt>
   22426:	mov    %eax,0x1dc(%r14)
   2242d:	movl   $0x0,0x1e0(%r14)
   22438:	xor    %eax,%eax
   2243a:	mov    %r13,-0x8(%rbp)
   2243e:	mov    %r15,-0x10(%rbp)
   22442:	mov    %rax,%r15
   22445:	jmp    2246d <per_scan_setup+0x14d>
   22447:	movslq 0x1e0(%r14),%rcx
   2244e:	lea    0x1(%rcx),%eax
   22451:	mov    %eax,0x1e0(%r14)
   22458:	mov    %r15d,0x1e4(%r14,%rcx,4)
   22460:	add    $0xffffffff,%r13d
   22464:	test   %r13d,%r13d
   22467:	jg     22447 <per_scan_setup+0x127>
   22469:	add    $0x1,%r15d
   2246d:	movslq 0x1b0(%r14),%rax
   22474:	cmp    %r15d,%eax
   22477:	jg     22487 <per_scan_setup+0x167>
   22479:	mov    -0x10(%rbp),%r14
   2247d:	mov    -0x8(%rbp),%r13
   22481:	mov    -0x18(%rbp),%r15
   22485:	leaveq 
   22486:	retq   
   22487:	movslq %r15d,%rax
   2248a:	mov    0x1b8(%r14,%rax,8),%rcx
   22492:	movslq 0x8(%rcx),%rsi
   22496:	mov    %esi,0x34(%rcx)
   22499:	movslq 0xc(%rcx),%rax
   2249d:	mov    %eax,0x38(%rcx)
   224a0:	imul   %esi,%eax
   224a3:	mov    %eax,0x3c(%rcx)
   224a6:	mov    %rsi,%rax
   224a9:	imul   0x24(%rcx),%eax
   224ad:	mov    %eax,0x40(%rcx)
   224b0:	mov    0x1c(%rcx),%eax
   224b3:	xor    %edx,%edx
   224b5:	div    %esi
   224b7:	test   %edx,%edx
   224b9:	jne    224bf <per_scan_setup+0x19f>
   224bb:	movslq 0x34(%rcx),%rdx
   224bf:	mov    %edx,0x44(%rcx)
   224c2:	mov    0x20(%rcx),%eax
   224c5:	mov    0x38(%rcx),%esi
   224c8:	xor    %edx,%edx
   224ca:	div    %esi
   224cc:	test   %edx,%edx
   224ce:	jne    224d4 <per_scan_setup+0x1b4>
   224d0:	movslq 0x38(%rcx),%rdx
   224d4:	mov    %edx,0x48(%rcx)
   224d7:	movslq 0x3c(%rcx),%r13
   224db:	mov    %r13,%rax
   224de:	add    0x1e0(%r14),%eax
   224e5:	cmp    $0xa,%eax
   224e8:	jle    22464 <per_scan_setup+0x144>
   224ee:	mov    (%r14),%rax
   224f1:	movl   $0xd,0x28(%rax)
   224f8:	mov    (%r14),%rax
   224fb:	mov    (%rax),%rax
   224fe:	mov    %r14,%rdi
   22501:	callq  *%rax
   22503:	jmpq   22464 <per_scan_setup+0x144>
   22508:	nopl   0x0(%rax,%rax,1)

0000000000022510 <latch_quant_tables>:
   22510:	push   %rbp
   22511:	mov    %rsp,%rbp
   22514:	sub    $0x30,%rsp
   22518:	mov    %rbx,-0x8(%rbp)
   2251c:	mov    %r12,-0x10(%rbp)
   22520:	mov    %r13,-0x18(%rbp)
   22524:	mov    %r14,-0x20(%rbp)
   22528:	mov    %r15,-0x28(%rbp)
   2252c:	mov    %rdi,%r13
   2252f:	mov    $0x1,%r12d
   22535:	mov    $0x84,%r14d
   2253b:	xor    %ebx,%ebx
   2253d:	jmpq   225d2 <latch_quant_tables+0xc2>
   22542:	movslq %ebx,%rax
   22545:	mov    0x1b8(%r13,%rax,8),%r15
   2254d:	mov    0x50(%r15),%rax
   22551:	test   %rax,%rax
   22554:	jne    225cf <latch_quant_tables+0xbf>
   22556:	movslq 0x10(%r15),%rax
   2255a:	test   %eax,%eax
   2255c:	js     22570 <latch_quant_tables+0x60>
   2255e:	cmp    $0x3,%eax
   22561:	jg     22570 <latch_quant_tables+0x60>
   22563:	mov    0xc8(%r13,%rax,8),%rcx
   2256b:	test   %rcx,%rcx
   2256e:	jne    2259a <latch_quant_tables+0x8a>
   22570:	mov    0x0(%r13),%rcx
   22574:	movl   $0x34,0x28(%rcx)
   2257b:	mov    0x0(%r13),%rcx
   2257f:	mov    %eax,0x2c(%rcx)
   22582:	mov    0x0(%r13),%rcx
   22586:	mov    (%rcx),%rcx
   22589:	mov    %rax,%r14
   2258c:	mov    %r13,%rdi
   2258f:	callq  *%rcx
   22591:	mov    %r14,%rax
   22594:	mov    $0x84,%r14d
   2259a:	mov    0x8(%r13),%rcx
   2259e:	mov    (%rcx),%rcx
   225a1:	mov    %r12,%rsi
   225a4:	mov    %rax,%r12
   225a7:	mov    %r13,%rdi
   225aa:	mov    %r14,%rdx
   225ad:	callq  *%rcx
   225af:	mov    0xc8(%r13,%r12,8),%rsi
   225b7:	mov    %rax,%r12
   225ba:	mov    %r12,%rdi
   225bd:	mov    %r14,%rdx
   225c0:	callq  42c0 <memcpy@plt>
   225c5:	mov    %r12,0x50(%r15)
   225c9:	mov    $0x1,%r12d
   225cf:	add    $0x1,%ebx
   225d2:	movslq 0x1b0(%r13),%rax
   225d9:	cmp    %ebx,%eax
   225db:	jg     22542 <latch_quant_tables+0x32>
   225e1:	mov    -0x28(%rbp),%r15
   225e5:	mov    -0x20(%rbp),%r14
   225e9:	mov    -0x18(%rbp),%r13
   225ed:	mov    -0x10(%rbp),%r12
   225f1:	mov    -0x8(%rbp),%rbx
   225f5:	leaveq 
   225f6:	retq   
   225f7:	nopw   0x0(%rax,%rax,1)

0000000000022600 <start_input_pass>:
   22600:	push   %rbp
   22601:	mov    %rsp,%rbp
   22604:	sub    $0x10,%rsp
   22608:	mov    %r15,-0x8(%rbp)
   2260c:	mov    %rdi,%r15
   2260f:	callq  22320 <per_scan_setup>
   22614:	mov    %r15,%rdi
   22617:	callq  22510 <latch_quant_tables>
   2261c:	mov    0x250(%r15),%rax
   22623:	mov    (%rax),%rax
   22626:	mov    %r15,%rdi
   22629:	callq  *%rax
   2262b:	mov    0x230(%r15),%rax
   22632:	mov    (%rax),%rax
   22635:	mov    %r15,%rdi
   22638:	callq  *%rax
   2263a:	mov    0x230(%r15),%rax
   22641:	mov    0x8(%rax),%rcx
   22645:	mov    0x240(%r15),%rax
   2264c:	mov    %rcx,(%rax)
   2264f:	mov    -0x8(%rbp),%r15
   22653:	leaveq 
   22654:	retq   
   22655:	data16 nopw %cs:0x0(%rax,%rax,1)

0000000000022660 <finish_input_pass>:
   22660:	push   %rbp
   22661:	mov    %rsp,%rbp
   22664:	lea    -0x71b(%rip),%rax        # 21f50 <consume_markers>
   2266b:	mov    0x240(%rdi),%rcx
   22672:	mov    %rax,(%rcx)
   22675:	leaveq 
   22676:	retq   
   22677:	nopw   0x0(%rax,%rax,1)

0000000000022680 <reset_input_controller>:
   22680:	push   %rbp
   22681:	mov    %rsp,%rbp
   22684:	sub    $0x10,%rsp
   22688:	mov    %r15,-0x8(%rbp)
   2268c:	lea    -0x743(%rip),%rcx        # 21f50 <consume_markers>
   22693:	mov    0x240(%rdi),%rax
   2269a:	mov    %rcx,(%rax)
   2269d:	movl   $0x0,0x20(%rax)
   226a4:	movl   $0x0,0x24(%rax)
   226ab:	movl   $0x1,0x28(%rax)
   226b2:	mov    (%rdi),%rax
   226b5:	mov    0x20(%rax),%rax
   226b9:	mov    %rdi,%r15
   226bc:	callq  *%rax
   226be:	mov    0x248(%r15),%rax
   226c5:	mov    (%rax),%rax
   226c8:	mov    %r15,%rdi
   226cb:	callq  *%rax
   226cd:	movq   $0x0,0xc0(%r15)
   226d8:	mov    -0x8(%rbp),%r15
   226dc:	leaveq 
   226dd:	retq   
   226de:	xchg   %ax,%ax

00000000000226e0 <jinit_d_main_controller>:
   226e0:	push   %rbp
   226e1:	mov    %rsp,%rbp
   226e4:	sub    $0x30,%rsp
   226e8:	mov    %r13,-0x18(%rbp)
   226ec:	mov    %r14,-0x20(%rbp)
   226f0:	mov    %r15,-0x28(%rbp)
   226f4:	mov    %rbx,-0x8(%rbp)
   226f8:	mov    %r12,-0x10(%rbp)
   226fc:	mov    $0x1,%r13d
   22702:	mov    0x8(%rdi),%rax
   22706:	mov    (%rax),%rax
   22709:	mov    %rsi,%r12
   2270c:	mov    $0x88,%edx
   22711:	mov    %rdi,%rbx
   22714:	mov    %r13,%rsi
   22717:	callq  *%rax
   22719:	mov    %rax,0x228(%rbx)
   22720:	lea    0x8a9(%rip),%rcx        # 22fd0 <start_pass_main>
   22727:	mov    %rcx,(%rax)
   2272a:	test   %r12d,%r12d
   2272d:	jne    22737 <jinit_d_main_controller+0x57>
   2272f:	mov    %r13,%rsi
   22732:	mov    %rax,%r12
   22735:	jmp    22752 <jinit_d_main_controller+0x72>
   22737:	mov    (%rbx),%rcx
   2273a:	movl   $0x4,0x28(%rcx)
   22741:	mov    (%rbx),%rcx
   22744:	mov    (%rcx),%rcx
   22747:	mov    %rax,%r12
   2274a:	mov    %rbx,%rdi
   2274d:	callq  *%rcx
   2274f:	mov    %r13,%rsi
   22752:	mov    0x260(%rbx),%rax
   22759:	movslq 0x10(%rax),%rax
   2275d:	test   %eax,%eax
   2275f:	jne    2276a <jinit_d_main_controller+0x8a>
   22761:	movslq 0x1a0(%rbx),%r13
   22768:	jmp    227aa <jinit_d_main_controller+0xca>
   2276a:	movslq 0x1a0(%rbx),%rax
   22771:	cmp    $0x1,%eax
   22774:	jg     22791 <jinit_d_main_controller+0xb1>
   22776:	mov    (%rbx),%rax
   22779:	movl   $0x2f,0x28(%rax)
   22780:	mov    (%rbx),%rax
   22783:	mov    (%rax),%rax
   22786:	mov    %rsi,%r13
   22789:	mov    %rbx,%rdi
   2278c:	callq  *%rax
   2278e:	mov    %r13,%rsi
   22791:	mov    %rsi,%r14
   22794:	mov    %rbx,%rdi
   22797:	callq  22cc0 <alloc_funny_pointers>
   2279c:	movslq 0x1a0(%rbx),%r13
   227a3:	add    $0x2,%r13d
   227a7:	mov    %r14,%rsi
   227aa:	mov    0x130(%rbx),%r15
   227b1:	xor    %r14d,%r14d
   227b4:	jmp    227fa <jinit_d_main_controller+0x11a>
   227b6:	movslq 0x24(%r15),%rax
   227ba:	imul   0xc(%r15),%eax
   227bf:	cltd   
   227c0:	movslq 0x1a0(%rbx),%rcx
   227c7:	idiv   %ecx
   227c9:	mov    %r13,%rcx
   227cc:	imul   %eax,%ecx
   227cf:	mov    0x24(%r15),%edx
   227d3:	imul   0x1c(%r15),%edx
   227d8:	mov    0x8(%rbx),%rax
   227dc:	mov    0x10(%rax),%rax
   227e0:	mov    %rbx,%rdi
   227e3:	callq  *%rax
   227e5:	movslq %r14d,%rcx
   227e8:	mov    %rax,0x10(%r12,%rcx,8)
   227ed:	add    $0x1,%r14d
   227f1:	add    $0x60,%r15
   227f5:	mov    $0x1,%esi
   227fa:	movslq 0x38(%rbx),%rax
   227fe:	cmp    %r14d,%eax
   22801:	jg     227b6 <jinit_d_main_controller+0xd6>
   22803:	mov    -0x10(%rbp),%r12
   22807:	mov    -0x8(%rbp),%rbx
   2280b:	mov    -0x28(%rbp),%r15
   2280f:	mov    -0x20(%rbp),%r14
   22813:	mov    -0x18(%rbp),%r13
   22817:	leaveq 
   22818:	retq   
   22819:	nopl   0x0(%rax)

0000000000022820 <set_wraparound_pointers>:
   22820:	push   %rbp
   22821:	mov    %rsp,%rbp
   22824:	sub    $0x30,%rsp
   22828:	mov    %rbx,-0x8(%rbp)
   2282c:	mov    %r12,-0x10(%rbp)
   22830:	mov    %r13,-0x18(%rbp)
   22834:	mov    %r14,-0x20(%rbp)
   22838:	mov    %r15,-0x28(%rbp)
   2283c:	mov    0x228(%rdi),%rsi
   22843:	mov    0x130(%rdi),%r8
   2284a:	movslq 0x1a0(%rdi),%rax
   22851:	lea    0x1(%rax),%r9d
   22855:	lea    0x2(%rax),%ebx
   22858:	mov    %rbx,-0x30(%rbp)
   2285c:	xor    %ecx,%ecx
   2285e:	mov    %rcx,%r10
   22861:	jmp    228b5 <set_wraparound_pointers+0x95>
   22863:	lea    (%rcx,%r15,1),%edx
   22867:	movslq %edx,%r14
   2286a:	mov    0x0(%r13,%r14,8),%rbx
   2286f:	mov    %rcx,%rdx
   22872:	sub    %eax,%edx
   22874:	movslq %edx,%rdx
   22877:	mov    %rbx,0x0(%r13,%rdx,8)
   2287c:	mov    (%r11,%r14,8),%rbx
   22880:	mov    %rbx,(%r11,%rdx,8)
   22884:	movslq %ecx,%r14
   22887:	mov    0x0(%r13,%r14,8),%rdx
   2288c:	lea    (%rcx,%r12,1),%ebx
   22890:	movslq %ebx,%rbx
   22893:	mov    %rdx,0x0(%r13,%rbx,8)
   22898:	mov    (%r11,%r14,8),%rdx
   2289c:	mov    %rdx,(%r11,%rbx,8)
   228a0:	add    $0x1,%ecx
   228a3:	cmp    %eax,%ecx
   228a5:	jl     22863 <set_wraparound_pointers+0x43>
   228a7:	add    $0x1,%r10d
   228ab:	add    $0x60,%r8
   228af:	xor    %ecx,%ecx
   228b1:	mov    -0x30(%rbp),%rbx
   228b5:	movslq 0x38(%rdi),%rax
   228b9:	cmp    %r10d,%eax
   228bc:	jg     228d4 <set_wraparound_pointers+0xb4>
   228be:	mov    -0x28(%rbp),%r15
   228c2:	mov    -0x20(%rbp),%r14
   228c6:	mov    -0x18(%rbp),%r13
   228ca:	mov    -0x10(%rbp),%r12
   228ce:	mov    -0x8(%rbp),%rbx
   228d2:	leaveq 
   228d3:	retq   
   228d4:	movslq %r10d,%r11
   228d7:	movslq 0x24(%r8),%rax
   228db:	imul   0xc(%r8),%eax
   228e0:	cltd   
   228e1:	movslq 0x1a0(%rdi),%r12
   228e8:	mov    0x68(%rsi),%r13
   228ec:	mov    0x0(%r13,%r11,8),%r13
   228f1:	mov    0x70(%rsi),%r14
   228f5:	mov    (%r14,%r11,8),%r11
   228f9:	idiv   %r12d
   228fc:	mov    %rax,%r15
   228ff:	imul   %r9d,%r15d
   22903:	mov    %rax,%r12
   22906:	imul   %ebx,%r12d
   2290a:	jmp    228a3 <set_wraparound_pointers+0x83>
   2290c:	nopl   0x0(%rax)

0000000000022910 <process_data_simple_main>:
   22910:	push   %rbp
   22911:	mov    %rsp,%rbp
   22914:	sub    $0x30,%rsp
   22918:	mov    %r15,-0x8(%rbp)
   2291c:	mov    0x228(%rdi),%r15
   22923:	movslq 0x60(%r15),%rax
   22927:	test   %eax,%eax
   22929:	je     22971 <process_data_simple_main+0x61>
   2292b:	mov    %rsi,%r8
   2292e:	mov    %rdx,%r9
   22931:	mov    0x238(%rdi),%rax
   22938:	mov    0x8(%rax),%rax
   2293c:	lea    0x10(%r15),%rsi
   22940:	lea    0x64(%r15),%rdx
   22944:	mov    %rdx,-0x20(%rbp)
   22948:	mov    0x1a0(%rdi),%r10d
   2294f:	mov    %ecx,(%rsp)
   22952:	mov    %r10,%rcx
   22955:	mov    %r14,-0x28(%rbp)
   22959:	mov    %r10,%r14
   2295c:	callq  *%rax
   2295e:	mov    0x64(%r15),%eax
   22962:	cmp    %r14d,%eax
   22965:	jae    229a5 <process_data_simple_main+0x95>
   22967:	mov    -0x28(%rbp),%r14
   2296b:	mov    -0x8(%rbp),%r15
   2296f:	leaveq 
   22970:	retq   
   22971:	mov    0x230(%rdi),%rax
   22978:	mov    0x18(%rax),%rax
   2297c:	lea    0x10(%r15),%r8
   22980:	mov    %rdi,%r9
   22983:	mov    %rdi,-0x28(%rbp)
   22987:	mov    %rcx,-0x20(%rbp)
   2298b:	mov    %rsi,-0x10(%rbp)
   2298f:	mov    %rdx,-0x18(%rbp)
   22993:	mov    %r8,%rsi
   22996:	mov    %r9,%rdi
   22999:	callq  *%rax
   2299b:	test   %eax,%eax
   2299d:	jne    229c1 <process_data_simple_main+0xb1>
   2299f:	mov    -0x8(%rbp),%r15
   229a3:	leaveq 
   229a4:	retq   
   229a5:	movl   $0x0,0x60(%r15)
   229ad:	mov    -0x20(%rbp),%rax
   229b1:	movl   $0x0,(%rax)
   229b7:	mov    -0x28(%rbp),%r14
   229bb:	mov    -0x8(%rbp),%r15
   229bf:	leaveq 
   229c0:	retq   
   229c1:	movl   $0x1,0x60(%r15)
   229c9:	mov    -0x18(%rbp),%r9
   229cd:	mov    -0x10(%rbp),%r8
   229d1:	mov    -0x20(%rbp),%rcx
   229d5:	mov    -0x28(%rbp),%rdi
   229d9:	jmpq   22931 <process_data_simple_main+0x21>
   229de:	xchg   %ax,%ax

00000000000229e0 <process_data_context_main>:
   229e0:	push   %rbp
   229e1:	mov    %rsp,%rbp
   229e4:	sub    $0x50,%rsp
   229e8:	mov    %r15,-0x48(%rbp)
   229ec:	mov    0x228(%rdi),%r9
   229f3:	movslq 0x60(%r9),%rax
   229f7:	test   %eax,%eax
   229f9:	je     22a29 <process_data_context_main+0x49>
   229fb:	mov    %r15,%rax
   229fe:	mov    %r14,%r15
   22a01:	mov    %r9,%r14
   22a04:	movslq 0x7c(%r14),%r8
   22a08:	test   %r8d,%r8d
   22a0b:	jle    22a6f <process_data_context_main+0x8f>
   22a0d:	cmp    $0x1,%r8d
   22a11:	je     22b12 <process_data_context_main+0x132>
   22a17:	cmp    $0x2,%r8d
   22a1b:	je     22b79 <process_data_context_main+0x199>
   22a21:	mov    %r15,%r14
   22a24:	mov    %rax,%r15
   22a27:	leaveq 
   22a28:	retq   
   22a29:	movslq 0x78(%r9),%rax
   22a2d:	mov    0x68(%r9,%rax,8),%r10
   22a32:	mov    0x230(%rdi),%rax
   22a39:	mov    0x18(%rax),%rax
   22a3d:	mov    %rdi,%r8
   22a40:	mov    %rdi,-0x40(%rbp)
   22a44:	mov    %rcx,-0x38(%rbp)
   22a48:	mov    %rsi,-0x28(%rbp)
   22a4c:	mov    %rdx,-0x30(%rbp)
   22a50:	mov    %r10,%rsi
   22a53:	mov    %r8,%rdi
   22a56:	mov    %r14,%r15
   22a59:	mov    %r9,%r14
   22a5c:	callq  *%rax
   22a5e:	test   %eax,%eax
   22a60:	jne    22be3 <process_data_context_main+0x203>
   22a66:	mov    %r15,%r14
   22a69:	mov    -0x48(%rbp),%r15
   22a6d:	leaveq 
   22a6e:	retq   
   22a6f:	test   %r8d,%r8d
   22a72:	je     22aa0 <process_data_context_main+0xc0>
   22a74:	mov    %r15,%r14
   22a77:	mov    %rax,%r15
   22a7a:	leaveq 
   22a7b:	retq   
   22a7c:	movl   $0x0,0x7c(%r14)
   22a84:	mov    -0x40(%rbp),%rdx
   22a88:	mov    -0x38(%rbp),%rcx
   22a8c:	cmp    (%rdx),%ecx
   22a8e:	jbe    22c15 <process_data_context_main+0x235>
   22a94:	mov    -0x20(%rbp),%r15
   22a98:	mov    -0x28(%rbp),%rsi
   22a9c:	mov    -0x30(%rbp),%rdi
   22aa0:	movl   $0x0,0x64(%r14)
   22aa8:	mov    0x1a0(%rdi),%eax
   22aae:	add    $0xffffffff,%eax
   22ab1:	mov    %eax,0x80(%r14)
   22ab8:	mov    0x1a4(%rdi),%eax
   22abe:	cmp    0x84(%r14),%eax
   22ac5:	jne    22b0a <process_data_context_main+0x12a>
   22ac7:	mov    %rdi,%rax
   22aca:	mov    %r15,-0x20(%rbp)
   22ace:	mov    %rbx,-0x8(%rbp)
   22ad2:	mov    %r12,-0x10(%rbp)
   22ad6:	mov    %r13,-0x18(%rbp)
   22ada:	mov    %rcx,%rbx
   22add:	mov    %rdi,%r12
   22ae0:	mov    %rax,%rdi
   22ae3:	mov    %rdx,%r13
   22ae6:	mov    %rsi,%r15
   22ae9:	callq  22f00 <set_bottom_pointers>
   22aee:	mov    %rbx,%rcx
   22af1:	mov    %r13,%rdx
   22af4:	mov    %r15,%rsi
   22af7:	mov    %r12,%rdi
   22afa:	mov    -0x18(%rbp),%r13
   22afe:	mov    -0x10(%rbp),%r12
   22b02:	mov    -0x8(%rbp),%rbx
   22b06:	mov    -0x20(%rbp),%r15
   22b0a:	movl   $0x1,0x7c(%r14)
   22b12:	movslq 0x78(%r14),%rax
   22b16:	mov    0x68(%r14,%rax,8),%r8
   22b1b:	mov    0x238(%rdi),%rax
   22b22:	mov    0x8(%rax),%rax
   22b26:	lea    0x64(%r14),%r10
   22b2a:	mov    0x80(%r14),%r9d
   22b31:	mov    %ecx,(%rsp)
   22b34:	mov    %rdi,%r11
   22b37:	mov    %rdi,-0x8(%rbp)
   22b3b:	mov    %r10,%rcx
   22b3e:	mov    %r15,-0x18(%rbp)
   22b42:	mov    %r11,%rdi
   22b45:	mov    %r10,%r15
   22b48:	mov    %r9,%r11
   22b4b:	mov    %rdx,%r9
   22b4e:	mov    %rcx,%rdx
   22b51:	mov    %r11,%rcx
   22b54:	mov    %r8,%r11
   22b57:	mov    %rsi,%r8
   22b5a:	mov    %r11,%rsi
   22b5d:	callq  *%rax
   22b5f:	mov    0x80(%r14),%eax
   22b66:	cmp    (%r15),%eax
   22b69:	jbe    22c1f <process_data_context_main+0x23f>
   22b6f:	mov    -0x18(%rbp),%r14
   22b73:	mov    -0x48(%rbp),%r15
   22b77:	leaveq 
   22b78:	retq   
   22b79:	movslq 0x78(%r14),%rax
   22b7d:	mov    0x68(%r14,%rax,8),%r8
   22b82:	mov    0x238(%rdi),%rax
   22b89:	mov    0x8(%rax),%rax
   22b8d:	lea    0x64(%r14),%r9
   22b91:	mov    0x80(%r14),%r10d
   22b98:	mov    %ecx,(%rsp)
   22b9b:	mov    %rdi,-0x30(%rbp)
   22b9f:	mov    %rcx,-0x38(%rbp)
   22ba3:	mov    %r9,%rcx
   22ba6:	mov    %rsi,-0x28(%rbp)
   22baa:	mov    %rdx,-0x40(%rbp)
   22bae:	mov    %r15,-0x20(%rbp)
   22bb2:	mov    %r9,%r15
   22bb5:	mov    %rdx,%r9
   22bb8:	mov    %rcx,%rdx
   22bbb:	mov    %r10,%rcx
   22bbe:	mov    %r8,%r10
   22bc1:	mov    %rsi,%r8
   22bc4:	mov    %r10,%rsi
   22bc7:	callq  *%rax
   22bc9:	mov    0x80(%r14),%eax
   22bd0:	cmp    (%r15),%eax
   22bd3:	jbe    22a7c <process_data_context_main+0x9c>
   22bd9:	mov    -0x20(%rbp),%r14
   22bdd:	mov    -0x48(%rbp),%r15
   22be1:	leaveq 
   22be2:	retq   
   22be3:	movl   $0x1,0x60(%r14)
   22beb:	mov    0x84(%r14),%eax
   22bf2:	add    $0x1,%eax
   22bf5:	mov    %eax,0x84(%r14)
   22bfc:	mov    -0x30(%rbp),%rdx
   22c00:	mov    -0x28(%rbp),%rsi
   22c04:	mov    -0x38(%rbp),%rcx
   22c08:	mov    -0x40(%rbp),%rdi
   22c0c:	mov    -0x48(%rbp),%rax
   22c10:	jmpq   22a04 <process_data_context_main+0x24>
   22c15:	mov    -0x20(%rbp),%r14
   22c19:	mov    -0x48(%rbp),%r15
   22c1d:	leaveq 
   22c1e:	retq   
   22c1f:	mov    0x84(%r14),%eax
   22c26:	cmp    $0x1,%eax
   22c29:	je     22c31 <process_data_context_main+0x251>
   22c2b:	mov    -0x8(%rbp),%rax
   22c2f:	jmp    22c4b <process_data_context_main+0x26b>
   22c31:	mov    -0x8(%rbp),%rax
   22c35:	mov    %rax,%rdi
   22c38:	mov    %r13,-0x10(%rbp)
   22c3c:	mov    %rax,%r13
   22c3f:	callq  22820 <set_wraparound_pointers>
   22c44:	mov    %r13,%rax
   22c47:	mov    -0x10(%rbp),%r13
   22c4b:	movslq 0x78(%r14),%rcx
   22c4f:	xor    $0x1,%ecx
   22c52:	mov    %ecx,0x78(%r14)
   22c56:	movl   $0x0,0x60(%r14)
   22c5e:	mov    0x1a0(%rax),%ecx
   22c64:	add    $0x1,%ecx
   22c67:	mov    %ecx,(%r15)
   22c6a:	mov    0x1a0(%rax),%eax
   22c70:	add    $0x2,%eax
   22c73:	mov    %eax,0x80(%r14)
   22c7a:	movl   $0x2,0x7c(%r14)
   22c82:	mov    -0x18(%rbp),%r14
   22c86:	mov    -0x48(%rbp),%r15
   22c8a:	leaveq 
   22c8b:	retq   
   22c8c:	nopl   0x0(%rax)

0000000000022c90 <process_data_crank_post>:
   22c90:	push   %rbp
   22c91:	mov    %rsp,%rbp
   22c94:	sub    $0x10,%rsp
   22c98:	mov    0x238(%rdi),%rax
   22c9f:	mov    0x8(%rax),%rax
   22ca3:	mov    %ecx,(%rsp)
   22ca6:	mov    %rsi,%r8
   22ca9:	mov    %rdx,%r9
   22cac:	xor    %esi,%esi
   22cae:	mov    %rsi,%rdx
   22cb1:	mov    %rsi,%rcx
   22cb4:	callq  *%rax
   22cb6:	leaveq 
   22cb7:	retq   
   22cb8:	nopl   0x0(%rax,%rax,1)

0000000000022cc0 <alloc_funny_pointers>:
   22cc0:	push   %rbp
   22cc1:	mov    %rsp,%rbp
   22cc4:	sub    $0x40,%rsp
   22cc8:	mov    %r12,-0x10(%rbp)
   22ccc:	mov    %r13,-0x18(%rbp)
   22cd0:	mov    %r14,-0x20(%rbp)
   22cd4:	mov    %r15,-0x28(%rbp)
   22cd8:	mov    %rdi,-0x38(%rbp)
   22cdc:	mov    %rbx,-0x8(%rbp)
   22ce0:	mov    0x8(%rdi),%rax
   22ce4:	mov    (%rax),%rax
   22ce7:	mov    $0x1,%r14d
   22ced:	movslq 0x38(%rdi),%rcx
   22cf1:	add    %ecx,%ecx
   22cf3:	movslq %ecx,%rdx
   22cf6:	shl    $0x3,%rdx
   22cfa:	mov    0x228(%rdi),%r12
   22d01:	movslq 0x1a0(%rdi),%rbx
   22d08:	mov    %rdi,%r15
   22d0b:	mov    %r14,%rsi
   22d0e:	callq  *%rax
   22d10:	mov    %rax,0x68(%r12)
   22d15:	movslq 0x38(%r15),%rcx
   22d19:	lea    (%rax,%rcx,8),%rax
   22d1d:	mov    %rax,0x70(%r12)
   22d22:	mov    0x130(%r15),%rax
   22d29:	add    $0x4,%ebx
   22d2c:	mov    %rbx,-0x30(%rbp)
   22d30:	mov    %r14,%rsi
   22d33:	mov    %rax,%r14
   22d36:	mov    %r15,%rdi
   22d39:	xor    %r13d,%r13d
   22d3c:	jmp    22da2 <alloc_funny_pointers+0xe2>
   22d3e:	movslq 0x24(%r14),%rax
   22d42:	imul   0xc(%r14),%eax
   22d47:	cltd   
   22d48:	movslq 0x1a0(%rdi),%rcx
   22d4f:	idiv   %ecx
   22d51:	imul   %eax,%ebx
   22d54:	lea    (%rbx,%rbx,1),%ecx
   22d57:	movslq %ecx,%rdx
   22d5a:	shl    $0x3,%rdx
   22d5e:	mov    0x8(%rdi),%rcx
   22d62:	mov    (%rcx),%rcx
   22d65:	mov    %rax,%r15
   22d68:	callq  *%rcx
   22d6a:	movslq %r15d,%rcx
   22d6d:	lea    (%rax,%rcx,8),%rdx
   22d71:	mov    0x68(%r12),%rax
   22d76:	movslq %r13d,%rcx
   22d79:	mov    %rdx,(%rax,%rcx,8)
   22d7d:	movslq %ebx,%rax
   22d80:	lea    (%rdx,%rax,8),%rdx
   22d84:	mov    0x70(%r12),%rax
   22d89:	mov    %rdx,(%rax,%rcx,8)
   22d8d:	add    $0x1,%r13d
   22d91:	add    $0x60,%r14
   22d95:	mov    $0x1,%esi
   22d9a:	mov    -0x30(%rbp),%rbx
   22d9e:	mov    -0x38(%rbp),%rdi
   22da2:	movslq 0x38(%rdi),%rax
   22da6:	cmp    %r13d,%eax
   22da9:	jg     22d3e <alloc_funny_pointers+0x7e>
   22dab:	mov    -0x8(%rbp),%rbx
   22daf:	mov    -0x28(%rbp),%r15
   22db3:	mov    -0x20(%rbp),%r14
   22db7:	mov    -0x18(%rbp),%r13
   22dbb:	mov    -0x10(%rbp),%r12
   22dbf:	leaveq 
   22dc0:	retq   
   22dc1:	data16 nopw %cs:0x0(%rax,%rax,1)
   22dcc:	nopl   0x0(%rax)

0000000000022dd0 <make_funny_pointers>:
   22dd0:	push   %rbp
   22dd1:	mov    %rsp,%rbp
   22dd4:	sub    $0x50,%rsp
   22dd8:	mov    %rbx,-0x8(%rbp)
   22ddc:	mov    %r12,-0x10(%rbp)
   22de0:	mov    %r13,-0x18(%rbp)
   22de4:	mov    %r14,-0x20(%rbp)
   22de8:	mov    %r15,-0x28(%rbp)
   22dec:	mov    0x228(%rdi),%r9
   22df3:	mov    0x130(%rdi),%r10
   22dfa:	movslq 0x1a0(%rdi),%rsi
   22e01:	mov    %rsi,-0x48(%rbp)
   22e05:	lea    -0x2(%rsi),%ebx
   22e08:	mov    %rbx,-0x40(%rbp)
   22e0c:	xor    %ecx,%ecx
   22e0e:	lea    0x2(%rsi),%r8d
   22e12:	mov    %r8,-0x38(%rbp)
   22e16:	mov    %rcx,%r11
   22e19:	jmp    22e47 <make_funny_pointers+0x77>
   22e1b:	mov    %rax,%rcx
   22e1e:	sub    %edx,%ecx
   22e20:	movslq %ecx,%rcx
   22e23:	mov    (%r15),%rsi
   22e26:	mov    %rsi,(%r15,%rcx,8)
   22e2a:	add    $0x1,%eax
   22e2d:	cmp    %edx,%eax
   22e2f:	jl     22e1b <make_funny_pointers+0x4b>
   22e31:	add    $0x1,%r11d
   22e35:	add    $0x60,%r10
   22e39:	mov    -0x48(%rbp),%rsi
   22e3d:	mov    -0x40(%rbp),%rbx
   22e41:	xor    %ecx,%ecx
   22e43:	mov    -0x38(%rbp),%r8
   22e47:	movslq 0x38(%rdi),%rax
   22e4b:	cmp    %r11d,%eax
   22e4e:	jg     22e66 <make_funny_pointers+0x96>
   22e50:	mov    -0x28(%rbp),%r15
   22e54:	mov    -0x20(%rbp),%r14
   22e58:	mov    -0x18(%rbp),%r13
   22e5c:	mov    -0x10(%rbp),%r12
   22e60:	mov    -0x8(%rbp),%rbx
   22e64:	leaveq 
   22e65:	retq   
   22e66:	movslq %r11d,%r12
   22e69:	movslq 0x24(%r10),%rax
   22e6d:	imul   0xc(%r10),%eax
   22e72:	cltd   
   22e73:	movslq 0x1a0(%rdi),%r13
   22e7a:	mov    0x68(%r9),%r14
   22e7e:	mov    (%r14,%r12,8),%r15
   22e82:	mov    0x70(%r9),%r14
   22e86:	mov    (%r14,%r12,8),%r14
   22e8a:	mov    0x10(%r9,%r12,8),%r12
   22e8f:	idiv   %r13d
   22e92:	mov    %rax,-0x30(%rbp)
   22e96:	mov    %rax,%rdx
   22e99:	imul   %r8d,%edx
   22e9d:	jmp    22eb1 <make_funny_pointers+0xe1>
   22e9f:	movslq %ecx,%r13
   22ea2:	mov    (%r12,%r13,8),%r8
   22ea6:	mov    %r8,(%r14,%r13,8)
   22eaa:	mov    %r8,(%r15,%r13,8)
   22eae:	add    $0x1,%ecx
   22eb1:	cmp    %ecx,%edx
   22eb3:	jg     22e9f <make_funny_pointers+0xcf>
   22eb5:	mov    %rax,%r13
   22eb8:	imul   %ebx,%r13d
   22ebc:	imul   %eax,%esi
   22ebf:	lea    (%rax,%rax,1),%ecx
   22ec2:	xor    %eax,%eax
   22ec4:	jmp    22ee6 <make_funny_pointers+0x116>
   22ec6:	lea    (%rax,%r13,1),%edx
   22eca:	movslq %edx,%rbx
   22ecd:	lea    (%rax,%rsi,1),%edx
   22ed0:	movslq %edx,%r8
   22ed3:	mov    (%r12,%r8,8),%rdx
   22ed7:	mov    %rdx,(%r14,%rbx,8)
   22edb:	mov    (%r12,%rbx,8),%rdx
   22edf:	mov    %rdx,(%r14,%r8,8)
   22ee3:	add    $0x1,%eax
   22ee6:	cmp    %ecx,%eax
   22ee8:	jl     22ec6 <make_funny_pointers+0xf6>
   22eea:	mov    -0x30(%rbp),%rdx
   22eee:	xor    %eax,%eax
   22ef0:	jmpq   22e2d <make_funny_pointers+0x5d>
   22ef5:	data16 nopw %cs:0x0(%rax,%rax,1)

0000000000022f00 <set_bottom_pointers>:
   22f00:	push   %rbp
   22f01:	mov    %rsp,%rbp
   22f04:	sub    $0x20,%rsp
   22f08:	mov    %r13,-0x8(%rbp)
   22f0c:	mov    %r14,-0x10(%rbp)
   22f10:	mov    %r15,-0x18(%rbp)
   22f14:	mov    0x228(%rdi),%rsi
   22f1b:	mov    0x130(%rdi),%r8
   22f22:	xor    %ecx,%ecx
   22f24:	mov    %rcx,%r9
   22f27:	jmp    22f48 <set_bottom_pointers+0x48>
   22f29:	mov    (%r14,%rdx,8),%r13
   22f2d:	lea    (%r10,%rax,1),%r11d
   22f31:	movslq %r11d,%r11
   22f34:	mov    %r13,(%r14,%r11,8)
   22f38:	add    $0x1,%eax
   22f3b:	cmp    %r15d,%eax
   22f3e:	jl     22f29 <set_bottom_pointers+0x29>
   22f40:	add    $0x1,%r9d
   22f44:	add    $0x60,%r8
   22f48:	movslq 0x38(%rdi),%rax
   22f4c:	cmp    %r9d,%eax
   22f4f:	jg     22f5f <set_bottom_pointers+0x5f>
   22f51:	mov    -0x18(%rbp),%r15
   22f55:	mov    -0x10(%rbp),%r14
   22f59:	mov    -0x8(%rbp),%r13
   22f5d:	leaveq 
   22f5e:	retq   
   22f5f:	movslq 0x1a0(%rdi),%r13
   22f66:	movslq 0x24(%r8),%r11
   22f6a:	imul   0xc(%r8),%r11d
   22f6f:	mov    0x2c(%r8),%eax
   22f73:	xor    %edx,%edx
   22f75:	div    %r11d
   22f78:	test   %edx,%edx
   22f7a:	je     22f81 <set_bottom_pointers+0x81>
   22f7c:	mov    %rdx,%r10
   22f7f:	jmp    22f84 <set_bottom_pointers+0x84>
   22f81:	mov    %r11,%r10
   22f84:	mov    %r11,%rax
   22f87:	cltd   
   22f88:	idiv   %r13d
   22f8b:	lea    -0x1(%r10),%r11d
   22f8f:	test   %r9d,%r9d
   22f92:	je     22f99 <set_bottom_pointers+0x99>
   22f94:	mov    %rax,%r13
   22f97:	jmp    22faf <set_bottom_pointers+0xaf>
   22f99:	mov    %rax,%r13
   22f9c:	mov    %r11,%rax
   22f9f:	cltd   
   22fa0:	mov    %rax,%r11
   22fa3:	idiv   %r13d
   22fa6:	add    $0x1,%eax
   22fa9:	mov    %eax,0x80(%rsi)
   22faf:	movslq 0x78(%rsi),%rax
   22fb3:	mov    0x68(%rsi,%rax,8),%rdx
   22fb8:	movslq %r9d,%rax
   22fbb:	mov    (%rdx,%rax,8),%r14
   22fbf:	movslq %r11d,%rdx
   22fc2:	lea    0x0(%r13,%r13,1),%r15d
   22fc7:	mov    %rcx,%rax
   22fca:	jmpq   22f3b <set_bottom_pointers+0x3b>
   22fcf:	nop

0000000000022fd0 <start_pass_main>:
   22fd0:	push   %rbp
   22fd1:	mov    %rsp,%rbp
   22fd4:	sub    $0x10,%rsp
   22fd8:	mov    0x228(%rdi),%rax
   22fdf:	test   %esi,%esi
   22fe1:	je     22ffc <start_pass_main+0x2c>
   22fe3:	cmp    $0x2,%esi
   22fe6:	je     23018 <start_pass_main+0x48>
   22fe8:	mov    (%rdi),%rax
   22feb:	movl   $0x4,0x28(%rax)
   22ff2:	mov    (%rdi),%rax
   22ff5:	mov    (%rax),%rax
   22ff8:	callq  *%rax
   22ffa:	leaveq 
   22ffb:	retq   
   22ffc:	mov    0x260(%rdi),%rcx
   23003:	movslq 0x10(%rcx),%rcx
   23007:	test   %ecx,%ecx
   23009:	jne    23025 <start_pass_main+0x55>
   2300b:	lea    -0x702(%rip),%rcx        # 22910 <process_data_simple_main>
   23012:	mov    %rcx,0x8(%rax)
   23016:	jmp    2305b <start_pass_main+0x8b>
   23018:	lea    -0x38f(%rip),%rcx        # 22c90 <process_data_crank_post>
   2301f:	mov    %rcx,0x8(%rax)
   23023:	leaveq 
   23024:	retq   
   23025:	lea    -0x64c(%rip),%rcx        # 229e0 <process_data_context_main>
   2302c:	mov    %rcx,0x8(%rax)
   23030:	mov    %r15,-0x8(%rbp)
   23034:	mov    %rax,%r15
   23037:	callq  22dd0 <make_funny_pointers>
   2303c:	mov    %r15,%rax
   2303f:	movl   $0x0,0x78(%rax)
   23046:	movl   $0x0,0x7c(%rax)
   2304d:	movl   $0x0,0x84(%rax)
   23057:	mov    -0x8(%rbp),%r15
   2305b:	movl   $0x0,0x60(%rax)
   23062:	movl   $0x0,0x64(%rax)
   23069:	leaveq 
   2306a:	retq   
   2306b:	nopl   0x0(%rax,%rax,1)

0000000000023070 <jpeg_save_markers>:
   23070:	push   %rbp
   23071:	mov    %rsp,%rbp
   23074:	mov    0x248(%rdi),%r8
   2307b:	mov    0x8(%rdi),%rax
   2307f:	mov    0x60(%rax),%rax
   23083:	add    $0xffffffffffffffe0,%rax
   23087:	mov    %edx,%ecx
   23089:	cmp    %rax,%rcx
   2308c:	jle    23091 <jpeg_save_markers+0x21>
   2308e:	mov    %rax,%rdx
   23091:	test   %edx,%edx
   23093:	jne    230d0 <jpeg_save_markers+0x60>
   23095:	lea    0x20f4(%rip),%rax        # 25190 <get_interesting_appn>
   2309c:	xor    %edx,%edx
   2309e:	cmp    $0xe0,%esi
   230a4:	jne    230f3 <jpeg_save_markers+0x83>
   230a6:	cmp    $0xfe,%esi
   230ac:	je     23104 <jpeg_save_markers+0x94>
   230ae:	cmp    $0xdf,%esi
   230b4:	jg     23111 <jpeg_save_markers+0xa1>
   230b6:	mov    (%rdi),%rax
   230b9:	movl   $0x44,0x28(%rax)
   230c0:	mov    (%rdi),%rax
   230c3:	mov    %esi,0x2c(%rax)
   230c6:	mov    (%rdi),%rax
   230c9:	mov    (%rax),%rax
   230cc:	callq  *%rax
   230ce:	leaveq 
   230cf:	retq   
   230d0:	lea    0x2339(%rip),%rax        # 25410 <save_marker>
   230d7:	cmp    $0xe0,%esi
   230dd:	je     23131 <jpeg_save_markers+0xc1>
   230df:	cmp    $0xee,%esi
   230e5:	jne    230a6 <jpeg_save_markers+0x36>
   230e7:	cmp    $0xb,%edx
   230ea:	ja     230a6 <jpeg_save_markers+0x36>
   230ec:	mov    $0xc,%edx
   230f1:	jmp    230a6 <jpeg_save_markers+0x36>
   230f3:	cmp    $0xee,%esi
   230f9:	je     230a6 <jpeg_save_markers+0x36>
   230fb:	lea    0x273e(%rip),%rax        # 25840 <skip_variable>
   23102:	jmp    230a6 <jpeg_save_markers+0x36>
   23104:	mov    %rax,0x28(%r8)
   23108:	mov    %edx,0xb0(%r8)
   2310f:	leaveq 
   23110:	retq   
   23111:	cmp    $0xef,%esi
   23117:	jg     230b6 <jpeg_save_markers+0x46>
   23119:	lea    -0xe0(%rsi),%ecx
   2311f:	movslq %ecx,%rcx
   23122:	mov    %rax,0x30(%r8,%rcx,8)
   23127:	mov    %edx,0xb4(%r8,%rcx,4)
   2312f:	leaveq 
   23130:	retq   
   23131:	cmp    $0xd,%edx
   23134:	ja     230df <jpeg_save_markers+0x6f>
   23136:	mov    $0xe,%edx
   2313b:	jmpq   230a6 <jpeg_save_markers+0x36>

0000000000023140 <jpeg_set_marker_processor>:
   23140:	push   %rbp
   23141:	mov    %rsp,%rbp
   23144:	mov    0x248(%rdi),%rcx
   2314b:	cmp    $0xfe,%esi
   23151:	je     23175 <jpeg_set_marker_processor+0x35>
   23153:	cmp    $0xdf,%esi
   23159:	jg     2317b <jpeg_set_marker_processor+0x3b>
   2315b:	mov    (%rdi),%rax
   2315e:	movl   $0x44,0x28(%rax)
   23165:	mov    (%rdi),%rax
   23168:	mov    %esi,0x2c(%rax)
   2316b:	mov    (%rdi),%rax
   2316e:	mov    (%rax),%rax
   23171:	callq  *%rax
   23173:	leaveq 
   23174:	retq   
   23175:	mov    %rdx,0x28(%rcx)
   23179:	leaveq 
   2317a:	retq   
   2317b:	cmp    $0xef,%esi
   23181:	jg     2315b <jpeg_set_marker_processor+0x1b>
   23183:	lea    -0xe0(%rsi),%eax
   23189:	movslq %eax,%rax
   2318c:	mov    %rdx,0x30(%rcx,%rax,8)
   23191:	leaveq 
   23192:	retq   
   23193:	data16 nopw %cs:0x0(%rax,%rax,1)
   2319e:	xchg   %ax,%ax

00000000000231a0 <jpeg_resync_to_restart>:
   231a0:	push   %rbp
   231a1:	mov    %rsp,%rbp
   231a4:	sub    $0x40,%rsp
   231a8:	mov    %r13,-0x18(%rbp)
   231ac:	mov    %r14,-0x20(%rbp)
   231b0:	mov    %r15,-0x28(%rbp)
   231b4:	mov    %rbx,-0x8(%rbp)
   231b8:	mov    %r12,-0x10(%rbp)
   231bc:	mov    (%rdi),%rax
   231bf:	movslq 0x21c(%rdi),%r15
   231c6:	movl   $0x79,0x28(%rax)
   231cd:	mov    (%rdi),%rax
   231d0:	mov    %r15d,0x2c(%rax)
   231d4:	mov    (%rdi),%rax
   231d7:	mov    %esi,0x30(%rax)
   231da:	mov    (%rdi),%rax
   231dd:	mov    0x8(%rax),%rax
   231e1:	mov    %rsi,%r14
   231e4:	mov    $0xffffffffffffffff,%rsi
   231eb:	mov    %rdi,%r12
   231ee:	callq  *%rax
   231f0:	mov    $0x4,%esi
   231f5:	mov    $0x1,%eax
   231fa:	mov    $0x2,%ebx
   231ff:	mov    $0x3,%ecx
   23204:	lea    0x1(%r14),%edx
   23208:	and    $0x7,%edx
   2320b:	lea    0xd0(%rdx),%r13d
   23212:	lea    0x2(%r14),%edx
   23216:	and    $0x7,%edx
   23219:	lea    0xd0(%rdx),%r8d
   23220:	lea    -0x1(%r14),%edx
   23224:	and    $0x7,%edx
   23227:	lea    0xd0(%rdx),%edi
   2322d:	mov    %rdi,-0x38(%rbp)
   23231:	lea    -0x2(%r14),%edx
   23235:	and    $0x7,%edx
   23238:	add    $0xd0,%edx
   2323e:	mov    %rdx,-0x30(%rbp)
   23242:	mov    %r8,%r14
   23245:	jmp    23263 <jpeg_resync_to_restart+0xc3>
   23247:	mov    $0x1,%eax
   2324c:	mov    $0x4,%esi
   23251:	mov    $0x3,%ecx
   23256:	mov    $0x2,%ebx
   2325b:	mov    -0x30(%rbp),%rdx
   2325f:	mov    -0x38(%rbp),%rdi
   23263:	cmp    $0xbf,%r15d
   2326a:	jg     232c4 <jpeg_resync_to_restart+0x124>
   2326c:	mov    (%r12),%rax
   23270:	movl   $0x61,0x28(%rax)
   23277:	mov    (%r12),%rax
   2327b:	mov    %r15d,0x2c(%rax)
   2327f:	mov    (%r12),%rax
   23283:	mov    %ebx,0x30(%rax)
   23286:	mov    (%r12),%rax
   2328a:	mov    0x8(%rax),%rax
   2328e:	mov    %r12,%rdi
   23291:	callq  *%rax
   23293:	cmp    $0x1,%ebx
   23296:	jle    232d6 <jpeg_resync_to_restart+0x136>
   23298:	cmp    $0x2,%ebx
   2329b:	je     23306 <jpeg_resync_to_restart+0x166>
   2329d:	cmp    $0x3,%ebx
   232a0:	je     2333b <jpeg_resync_to_restart+0x19b>
   232a6:	mov    $0x1,%eax
   232ab:	mov    $0x4,%esi
   232b0:	mov    $0x3,%ecx
   232b5:	mov    $0x2,%ebx
   232ba:	mov    -0x30(%rbp),%rdx
   232be:	mov    -0x38(%rbp),%rdi
   232c2:	jmp    23263 <jpeg_resync_to_restart+0xc3>
   232c4:	cmp    $0xcf,%r15d
   232cb:	jg     23356 <jpeg_resync_to_restart+0x1b6>
   232d1:	mov    %rcx,%rbx
   232d4:	jmp    2326c <jpeg_resync_to_restart+0xcc>
   232d6:	cmp    $0x1,%ebx
   232d9:	jne    23247 <jpeg_resync_to_restart+0xa7>
   232df:	movl   $0x0,0x21c(%r12)
   232eb:	mov    -0x10(%rbp),%r12
   232ef:	mov    -0x8(%rbp),%rbx
   232f3:	mov    $0x1,%eax
   232f8:	mov    -0x28(%rbp),%r15
   232fc:	mov    -0x20(%rbp),%r14
   23300:	mov    -0x18(%rbp),%r13
   23304:	leaveq 
   23305:	retq   
   23306:	mov    %r12,%rdi
   23309:	callq  25970 <next_marker>
   2330e:	test   %eax,%eax
   23310:	je     23367 <jpeg_resync_to_restart+0x1c7>
   23312:	movslq 0x21c(%r12),%r15
   2331a:	mov    $0x1,%eax
   2331f:	mov    $0x4,%esi
   23324:	mov    $0x3,%ecx
   23329:	mov    $0x2,%ebx
   2332e:	mov    -0x30(%rbp),%rdx
   23332:	mov    -0x38(%rbp),%rdi
   23336:	jmpq   23263 <jpeg_resync_to_restart+0xc3>
   2333b:	mov    -0x10(%rbp),%r12
   2333f:	mov    -0x8(%rbp),%rbx
   23343:	mov    $0x1,%eax
   23348:	mov    -0x28(%rbp),%r15
   2334c:	mov    -0x20(%rbp),%r14
   23350:	mov    -0x18(%rbp),%r13
   23354:	leaveq 
   23355:	retq   
   23356:	cmp    $0xd7,%r15d
   2335d:	jle    2337f <jpeg_resync_to_restart+0x1df>
   2335f:	mov    %rcx,%rbx
   23362:	jmpq   2326c <jpeg_resync_to_restart+0xcc>
   23367:	xor    %eax,%eax
   23369:	mov    -0x10(%rbp),%r12
   2336d:	mov    -0x8(%rbp),%rbx
   23371:	mov    -0x28(%rbp),%r15
   23375:	mov    -0x20(%rbp),%r14
   23379:	mov    -0x18(%rbp),%r13
   2337d:	leaveq 
   2337e:	retq   
   2337f:	cmp    %r13d,%r15d
   23382:	jne    2338c <jpeg_resync_to_restart+0x1ec>
   23384:	mov    %rcx,%rbx
   23387:	jmpq   2326c <jpeg_resync_to_restart+0xcc>
   2338c:	cmp    %r14d,%r15d
   2338f:	jne    23399 <jpeg_resync_to_restart+0x1f9>
   23391:	mov    %rcx,%rbx
   23394:	jmpq   2326c <jpeg_resync_to_restart+0xcc>
   23399:	cmp    %edi,%r15d
   2339c:	je     2326c <jpeg_resync_to_restart+0xcc>
   233a2:	cmp    %edx,%r15d
   233a5:	je     2326c <jpeg_resync_to_restart+0xcc>
   233ab:	mov    %rax,%rbx
   233ae:	jmpq   2326c <jpeg_resync_to_restart+0xcc>
   233b3:	data16 nopw %cs:0x0(%rax,%rax,1)
   233be:	xchg   %ax,%ax

00000000000233c0 <jinit_marker_reader>:
   233c0:	push   %rbp
   233c1:	mov    %rsp,%rbp
   233c4:	sub    $0x10,%rsp
   233c8:	mov    %r14,-0x8(%rbp)
   233cc:	mov    %r15,-0x10(%rbp)
   233d0:	mov    0x8(%rdi),%rax
   233d4:	mov    (%rax),%rax
   233d7:	xor    %r14d,%r14d
   233da:	mov    $0x108,%edx
   233df:	mov    %rdi,%r15
   233e2:	mov    %r14,%rsi
   233e5:	callq  *%rax
   233e7:	mov    %rax,0x248(%r15)
   233ee:	lea    0x2cab(%rip),%rcx        # 260a0 <reset_marker_reader>
   233f5:	mov    %rcx,(%rax)
   233f8:	lea    0x2871(%rip),%rcx        # 25c70 <read_markers>
   233ff:	mov    %rcx,0x8(%rax)
   23403:	lea    0x2bb6(%rip),%rcx        # 25fc0 <read_restart_marker>
   2340a:	mov    %rcx,0x10(%rax)
   2340e:	lea    0x242b(%rip),%rdx        # 25840 <skip_variable>
   23415:	mov    %rdx,0x28(%rax)
   23419:	movl   $0x0,0xb0(%rax)
   23423:	jmp    2343c <jinit_marker_reader+0x7c>
   23425:	movslq %r14d,%rcx
   23428:	mov    %rdx,0x30(%rax,%rcx,8)
   2342d:	movl   $0x0,0xb4(%rax,%rcx,4)
   23438:	add    $0x1,%r14d
   2343c:	cmp    $0xf,%r14d
   23440:	jle    23425 <jinit_marker_reader+0x65>
   23442:	lea    0x1d47(%rip),%rcx        # 25190 <get_interesting_appn>
   23449:	mov    %rcx,0x30(%rax)
   2344d:	mov    %rcx,0xa0(%rax)
   23454:	mov    %r15,%rdi
   23457:	callq  260a0 <reset_marker_reader>
   2345c:	mov    -0x10(%rbp),%r15
   23460:	mov    -0x8(%rbp),%r14
   23464:	leaveq 
   23465:	retq   
   23466:	nopw   %cs:0x0(%rax,%rax,1)

0000000000023470 <get_soi>:
   23470:	push   %rbp
   23471:	mov    %rsp,%rbp
   23474:	sub    $0x10,%rsp
   23478:	mov    %r15,-0x10(%rbp)
   2347c:	mov    %r14,-0x8(%rbp)
   23480:	mov    (%rdi),%rax
   23483:	movl   $0x66,0x28(%rax)
   2348a:	mov    $0x1,%esi
   2348f:	mov    (%rdi),%rax
   23492:	mov    0x8(%rax),%rax
   23496:	mov    %rdi,%r15
   23499:	callq  *%rax
   2349b:	xor    %r14d,%r14d
   2349e:	mov    0x248(%r15),%rax
   234a5:	movslq 0x18(%rax),%rax
   234a9:	test   %eax,%eax
   234ab:	je     234e6 <get_soi+0x76>
   234ad:	mov    (%r15),%rax
   234b0:	movl   $0x3d,0x28(%rax)
   234b7:	mov    (%r15),%rax
   234ba:	mov    (%rax),%rax
   234bd:	mov    %r15,%rdi
   234c0:	callq  *%rax
   234c2:	jmp    234e6 <get_soi+0x76>
   234c4:	movslq %r14d,%rax
   234c7:	movb   $0x0,0x140(%r15,%rax,1)
   234d0:	movb   $0x1,0x150(%r15,%rax,1)
   234d9:	movb   $0x5,0x160(%r15,%rax,1)
   234e2:	add    $0x1,%r14d
   234e6:	cmp    $0xf,%r14d
   234ea:	jle    234c4 <get_soi+0x54>
   234ec:	movl   $0x0,0x170(%r15)
   234f7:	movl   $0x0,0x3c(%r15)
   234ff:	movl   $0x0,0x188(%r15)
   2350a:	movl   $0x0,0x174(%r15)
   23515:	movb   $0x1,0x178(%r15)
   2351d:	movb   $0x1,0x179(%r15)
   23525:	movb   $0x0,0x17a(%r15)
   2352d:	movw   $0x1,0x17c(%r15)
   23537:	movw   $0x1,0x17e(%r15)
   23541:	movl   $0x0,0x180(%r15)
   2354c:	movb   $0x0,0x184(%r15)
   23554:	mov    0x248(%r15),%rax
   2355b:	movl   $0x1,0x18(%rax)
   23562:	mov    -0x8(%rbp),%r14
   23566:	mov    $0x1,%eax
   2356b:	mov    -0x10(%rbp),%r15
   2356f:	leaveq 
   23570:	retq   
   23571:	data16 nopw %cs:0x0(%rax,%rax,1)
   2357c:	nopl   0x0(%rax)

0000000000023580 <get_sof>:
   23580:	push   %rbp
   23581:	mov    %rsp,%rbp
   23584:	sub    $0x30,%rsp
   23588:	mov    %r15,-0x18(%rbp)
   2358c:	mov    %rdi,-0x30(%rbp)
   23590:	mov    0x28(%rdi),%r15
   23594:	mov    (%r15),%rcx
   23597:	mov    0x8(%r15),%r8
   2359b:	mov    %esi,0x138(%rdi)
   235a1:	mov    %edx,0x13c(%rdi)
   235a7:	test   %r8,%r8
   235aa:	je     23773 <get_sof+0x1f3>
   235b0:	movzbl (%rcx),%eax
   235b3:	mov    %rax,-0x28(%rbp)
   235b7:	lea    -0x1(%r8),%rsi
   235bb:	test   %rsi,%rsi
   235be:	je     23787 <get_sof+0x207>
   235c4:	lea    0x1(%rcx),%rdx
   235c8:	movzbl (%rdx),%ecx
   235cb:	mov    %rcx,-0x20(%rbp)
   235cf:	add    $0xffffffffffffffff,%rsi
   235d3:	test   %rsi,%rsi
   235d6:	je     2379b <get_sof+0x21b>
   235dc:	add    $0x1,%rdx
   235e0:	movzbl (%rdx),%r8d
   235e4:	mov    %r8d,0x128(%rdi)
   235eb:	lea    -0x1(%rsi),%r8
   235ef:	test   %r8,%r8
   235f2:	je     237af <get_sof+0x22f>
   235f8:	lea    0x1(%rdx),%rsi
   235fc:	movzbl (%rsi),%edx
   235ff:	shl    $0x8,%edx
   23602:	mov    %edx,0x34(%rdi)
   23605:	add    $0xffffffffffffffff,%r8
   23609:	test   %r8,%r8
   2360c:	je     237c3 <get_sof+0x243>
   23612:	add    $0x1,%rsi
   23616:	movzbl (%rsi),%edx
   23619:	add    0x34(%rdi),%edx
   2361c:	mov    %edx,0x34(%rdi)
   2361f:	add    $0xffffffffffffffff,%r8
   23623:	test   %r8,%r8
   23626:	je     237d7 <get_sof+0x257>
   2362c:	add    $0x1,%rsi
   23630:	movzbl (%rsi),%edx
   23633:	shl    $0x8,%edx
   23636:	mov    %edx,0x30(%rdi)
   23639:	add    $0xffffffffffffffff,%r8
   2363d:	test   %r8,%r8
   23640:	je     237eb <get_sof+0x26b>
   23646:	add    $0x1,%rsi
   2364a:	movzbl (%rsi),%edx
   2364d:	add    0x30(%rdi),%edx
   23650:	mov    %edx,0x30(%rdi)
   23653:	add    $0xffffffffffffffff,%r8
   23657:	test   %r8,%r8
   2365a:	je     237ff <get_sof+0x27f>
   23660:	lea    0x1(%rsi),%r9
   23664:	movzbl (%r9),%edx
   23668:	mov    %edx,0x38(%rdi)
   2366b:	movslq 0x21c(%rdi),%rdx
   23672:	mov    (%rdi),%rsi
   23675:	mov    %edx,0x2c(%rsi)
   23678:	movslq 0x30(%rdi),%rdx
   2367c:	mov    %edx,0x30(%rsi)
   2367f:	movslq 0x34(%rdi),%rdx
   23683:	mov    %edx,0x34(%rsi)
   23686:	movslq 0x38(%rdi),%rdx
   2368a:	mov    %edx,0x38(%rsi)
   2368d:	mov    (%rdi),%rdx
   23690:	movl   $0x64,0x28(%rdx)
   23697:	mov    $0x1,%esi
   2369c:	mov    (%rdi),%rdx
   2369f:	mov    0x8(%rdx),%rdx
   236a3:	mov    %rdi,%r10
   236a6:	mov    %r14,-0x28(%rbp)
   236aa:	mov    %r15,-0x30(%rbp)
   236ae:	mov    %rbx,-0x8(%rbp)
   236b2:	mov    %r12,-0x10(%rbp)
   236b6:	mov    %r13,-0x20(%rbp)
   236ba:	mov    %rax,%rbx
   236bd:	mov    %rdi,%r12
   236c0:	mov    %r10,%rdi
   236c3:	mov    %r8,%r13
   236c6:	mov    %rcx,%r14
   236c9:	mov    %r9,%r15
   236cc:	callq  *%rdx
   236ce:	mov    0x248(%r12),%rax
   236d6:	movslq 0x1c(%rax),%rax
   236da:	test   %eax,%eax
   236dc:	je     236f5 <get_sof+0x175>
   236de:	mov    (%r12),%rax
   236e2:	movl   $0x3a,0x28(%rax)
   236e9:	mov    (%r12),%rax
   236ed:	mov    (%rax),%rax
   236f0:	mov    %r12,%rdi
   236f3:	callq  *%rax
   236f5:	mov    0x34(%r12),%eax
   236fa:	test   %eax,%eax
   236fc:	je     23710 <get_sof+0x190>
   236fe:	mov    0x30(%r12),%eax
   23703:	test   %eax,%eax
   23705:	je     23710 <get_sof+0x190>
   23707:	movslq 0x38(%r12),%rax
   2370c:	test   %eax,%eax
   2370e:	jg     23727 <get_sof+0x1a7>
   23710:	mov    (%r12),%rax
   23714:	movl   $0x20,0x28(%rax)
   2371b:	mov    (%r12),%rax
   2371f:	mov    (%rax),%rax
   23722:	mov    %r12,%rdi
   23725:	callq  *%rax
   23727:	shl    $0x8,%ebx
   2372a:	mov    %ebx,%eax
   2372c:	lea    -0x8(%r14,%rax,1),%rax
   23731:	movslq 0x38(%r12),%rcx
   23736:	lea    (%rcx,%rcx,2),%ecx
   23739:	movslq %ecx,%rcx
   2373c:	cmp    %rax,%rcx
   2373f:	je     23758 <get_sof+0x1d8>
   23741:	mov    (%r12),%rax
   23745:	movl   $0xb,0x28(%rax)
   2374c:	mov    (%r12),%rax
   23750:	mov    (%rax),%rax
   23753:	mov    %r12,%rdi
   23756:	callq  *%rax
   23758:	mov    0x130(%r12),%rax
   23760:	test   %rax,%rax
   23763:	je     23813 <get_sof+0x293>
   23769:	mov    $0x1,%ebx
   2376e:	jmpq   2383d <get_sof+0x2bd>
   23773:	callq  *0x18(%r15)
   23777:	test   %eax,%eax
   23779:	jne    23859 <get_sof+0x2d9>
   2377f:	xor    %eax,%eax
   23781:	mov    -0x18(%rbp),%r15
   23785:	leaveq 
   23786:	retq   
   23787:	callq  *0x18(%r15)
   2378b:	test   %eax,%eax
   2378d:	jne    23869 <get_sof+0x2e9>
   23793:	xor    %eax,%eax
   23795:	mov    -0x18(%rbp),%r15
   23799:	leaveq 
   2379a:	retq   
   2379b:	callq  *0x18(%r15)
   2379f:	test   %eax,%eax
   237a1:	jne    2387d <get_sof+0x2fd>
   237a7:	xor    %eax,%eax
   237a9:	mov    -0x18(%rbp),%r15
   237ad:	leaveq 
   237ae:	retq   
   237af:	callq  *0x18(%r15)
   237b3:	test   %eax,%eax
   237b5:	jne    23895 <get_sof+0x315>
   237bb:	xor    %eax,%eax
   237bd:	mov    -0x18(%rbp),%r15
   237c1:	leaveq 
   237c2:	retq   
   237c3:	callq  *0x18(%r15)
   237c7:	test   %eax,%eax
   237c9:	jne    238ad <get_sof+0x32d>
   237cf:	xor    %eax,%eax
   237d1:	mov    -0x18(%rbp),%r15
   237d5:	leaveq 
   237d6:	retq   
   237d7:	callq  *0x18(%r15)
   237db:	test   %eax,%eax
   237dd:	jne    238c5 <get_sof+0x345>
   237e3:	xor    %eax,%eax
   237e5:	mov    -0x18(%rbp),%r15
   237e9:	leaveq 
   237ea:	retq   
   237eb:	callq  *0x18(%r15)
   237ef:	test   %eax,%eax
   237f1:	jne    238dd <get_sof+0x35d>
   237f7:	xor    %eax,%eax
   237f9:	mov    -0x18(%rbp),%r15
   237fd:	leaveq 
   237fe:	retq   
   237ff:	callq  *0x18(%r15)
   23803:	test   %eax,%eax
   23805:	jne    238f5 <get_sof+0x375>
   2380b:	xor    %eax,%eax
   2380d:	mov    -0x18(%rbp),%r15
   23811:	leaveq 
   23812:	retq   
   23813:	mov    0x8(%r12),%rax
   23818:	mov    (%rax),%rax
   2381b:	movslq 0x38(%r12),%rcx
   23820:	lea    (%rcx,%rcx,2),%rdx
   23824:	shl    $0x5,%rdx
   23828:	mov    %r12,%rdi
   2382b:	mov    $0x1,%ebx
   23830:	mov    %rbx,%rsi
   23833:	callq  *%rax
   23835:	mov    %rax,0x130(%r12)
   2383d:	mov    0x130(%r12),%r14
   23845:	lea    0x1(%r15),%rcx
   23849:	lea    -0x1(%r13),%rax
   2384d:	mov    -0x30(%rbp),%r15
   23851:	xor    %r13d,%r13d
   23854:	jmpq   239b6 <get_sof+0x436>
   23859:	mov    (%r15),%rcx
   2385c:	mov    0x8(%r15),%r8
   23860:	mov    -0x30(%rbp),%rdi
   23864:	jmpq   235b0 <get_sof+0x30>
   23869:	mov    (%r15),%rdx
   2386c:	mov    0x8(%r15),%rsi
   23870:	mov    -0x28(%rbp),%rax
   23874:	mov    -0x30(%rbp),%rdi
   23878:	jmpq   235c8 <get_sof+0x48>
   2387d:	mov    (%r15),%rdx
   23880:	mov    0x8(%r15),%rsi
   23884:	mov    -0x20(%rbp),%rcx
   23888:	mov    -0x28(%rbp),%rax
   2388c:	mov    -0x30(%rbp),%rdi
   23890:	jmpq   235e0 <get_sof+0x60>
   23895:	mov    (%r15),%rsi
   23898:	mov    0x8(%r15),%r8
   2389c:	mov    -0x20(%rbp),%rcx
   238a0:	mov    -0x28(%rbp),%rax
   238a4:	mov    -0x30(%rbp),%rdi
   238a8:	jmpq   235fc <get_sof+0x7c>
   238ad:	mov    (%r15),%rsi
   238b0:	mov    0x8(%r15),%r8
   238b4:	mov    -0x20(%rbp),%rcx
   238b8:	mov    -0x28(%rbp),%rax
   238bc:	mov    -0x30(%rbp),%rdi
   238c0:	jmpq   23616 <get_sof+0x96>
   238c5:	mov    (%r15),%rsi
   238c8:	mov    0x8(%r15),%r8
   238cc:	mov    -0x20(%rbp),%rcx
   238d0:	mov    -0x28(%rbp),%rax
   238d4:	mov    -0x30(%rbp),%rdi
   238d8:	jmpq   23630 <get_sof+0xb0>
   238dd:	mov    (%r15),%rsi
   238e0:	mov    0x8(%r15),%r8
   238e4:	mov    -0x20(%rbp),%rcx
   238e8:	mov    -0x28(%rbp),%rax
   238ec:	mov    -0x30(%rbp),%rdi
   238f0:	jmpq   2364a <get_sof+0xca>
   238f5:	mov    (%r15),%r9
   238f8:	mov    0x8(%r15),%r8
   238fc:	mov    -0x20(%rbp),%rcx
   23900:	mov    -0x28(%rbp),%rax
   23904:	mov    -0x30(%rbp),%rdi
   23908:	jmpq   23664 <get_sof+0xe4>
   2390d:	mov    %r13d,0x4(%r14)
   23911:	test   %rax,%rax
   23914:	je     239f0 <get_sof+0x470>
   2391a:	movzbl (%rcx),%edx
   2391d:	mov    %edx,(%r14)
   23920:	lea    -0x1(%rax),%rdx
   23924:	test   %rdx,%rdx
   23927:	je     23a07 <get_sof+0x487>
   2392d:	add    $0x1,%rcx
   23931:	movzbl (%rcx),%eax
   23934:	mov    %rax,%rsi
   23937:	shr    $0x4,%esi
   2393a:	mov    %esi,0x8(%r14)
   2393e:	and    $0xf,%eax
   23941:	mov    %eax,0xc(%r14)
   23945:	add    $0xffffffffffffffff,%rdx
   23949:	test   %rdx,%rdx
   2394c:	je     23a1e <get_sof+0x49e>
   23952:	lea    0x1(%rcx),%rax
   23956:	mov    %rdx,%r15
   23959:	movzbl (%rax),%ecx
   2395c:	mov    %ecx,0x10(%r14)
   23960:	movslq (%r14),%rcx
   23963:	mov    (%r12),%rdx
   23967:	mov    %ecx,0x2c(%rdx)
   2396a:	movslq 0x8(%r14),%rcx
   2396e:	mov    %ecx,0x30(%rdx)
   23971:	movslq 0xc(%r14),%rcx
   23975:	mov    %ecx,0x34(%rdx)
   23978:	movslq 0x10(%r14),%rcx
   2397c:	mov    %ecx,0x38(%rdx)
   2397f:	mov    (%r12),%rcx
   23983:	movl   $0x65,0x28(%rcx)
   2398a:	mov    (%r12),%rcx
   2398e:	mov    0x8(%rcx),%rcx
   23992:	mov    %rbx,%rsi
   23995:	mov    %rax,%rbx
   23998:	mov    %r12,%rdi
   2399b:	callq  *%rcx
   2399d:	add    $0x1,%r13d
   239a1:	add    $0x60,%r14
   239a5:	lea    0x1(%rbx),%rcx
   239a9:	lea    -0x1(%r15),%rax
   239ad:	mov    $0x1,%ebx
   239b2:	mov    -0x30(%rbp),%r15
   239b6:	cmp    0x38(%r12),%r13d
   239bb:	jl     2390d <get_sof+0x38d>
   239c1:	mov    0x248(%r12),%rdx
   239c9:	movl   $0x1,0x1c(%rdx)
   239d0:	mov    %rcx,(%r15)
   239d3:	mov    %rax,0x8(%r15)
   239d7:	mov    %rbx,%rax
   239da:	mov    -0x20(%rbp),%r13
   239de:	mov    -0x10(%rbp),%r12
   239e2:	mov    -0x8(%rbp),%rbx
   239e6:	mov    -0x28(%rbp),%r14
   239ea:	mov    -0x18(%rbp),%r15
   239ee:	leaveq 
   239ef:	retq   
   239f0:	mov    %r12,%rdi
   239f3:	callq  *0x18(%r15)
   239f7:	test   %eax,%eax
   239f9:	je     23a35 <get_sof+0x4b5>
   239fb:	mov    (%r15),%rcx
   239fe:	mov    0x8(%r15),%rax
   23a02:	jmpq   2391a <get_sof+0x39a>
   23a07:	mov    %r12,%rdi
   23a0a:	callq  *0x18(%r15)
   23a0e:	test   %eax,%eax
   23a10:	je     23a4d <get_sof+0x4cd>
   23a12:	mov    (%r15),%rcx
   23a15:	mov    0x8(%r15),%rdx
   23a19:	jmpq   23931 <get_sof+0x3b1>
   23a1e:	mov    %r12,%rdi
   23a21:	callq  *0x18(%r15)
   23a25:	test   %eax,%eax
   23a27:	je     23a65 <get_sof+0x4e5>
   23a29:	mov    (%r15),%rax
   23a2c:	mov    0x8(%r15),%r15
   23a30:	jmpq   23959 <get_sof+0x3d9>
   23a35:	mov    -0x20(%rbp),%r13
   23a39:	mov    -0x10(%rbp),%r12
   23a3d:	mov    -0x8(%rbp),%rbx
   23a41:	mov    -0x28(%rbp),%r14
   23a45:	xor    %eax,%eax
   23a47:	mov    -0x18(%rbp),%r15
   23a4b:	leaveq 
   23a4c:	retq   
   23a4d:	mov    -0x20(%rbp),%r13
   23a51:	mov    -0x10(%rbp),%r12
   23a55:	mov    -0x8(%rbp),%rbx
   23a59:	mov    -0x28(%rbp),%r14
   23a5d:	xor    %eax,%eax
   23a5f:	mov    -0x18(%rbp),%r15
   23a63:	leaveq 
   23a64:	retq   
   23a65:	mov    -0x20(%rbp),%r13
   23a69:	mov    -0x10(%rbp),%r12
   23a6d:	mov    -0x8(%rbp),%rbx
   23a71:	mov    -0x28(%rbp),%r14
   23a75:	xor    %eax,%eax
   23a77:	mov    -0x18(%rbp),%r15
   23a7b:	leaveq 
   23a7c:	retq   
   23a7d:	nopl   (%rax)

0000000000023a80 <get_sos>:
   23a80:	push   %rbp
   23a81:	mov    %rsp,%rbp
   23a84:	sub    $0x50,%rsp
   23a88:	mov    %r15,-0x28(%rbp)
   23a8c:	mov    %rdi,-0x50(%rbp)
   23a90:	mov    0x28(%rdi),%rax
   23a94:	mov    0x8(%rax),%rdx
   23a98:	mov    (%rax),%rsi
   23a9b:	mov    0x248(%rdi),%rcx
   23aa2:	movslq 0x1c(%rcx),%rcx
   23aa6:	test   %ecx,%ecx
   23aa8:	je     23ab8 <get_sos+0x38>
   23aaa:	mov    %r13,%rcx
   23aad:	mov    %r12,%r13
   23ab0:	mov    %rbx,%r12
   23ab3:	mov    %rdi,%rbx
   23ab6:	jmp    23b00 <get_sos+0x80>
   23ab8:	mov    (%rdi),%rcx
   23abb:	movl   $0x3e,0x28(%rcx)
   23ac2:	mov    (%rdi),%rcx
   23ac5:	mov    (%rcx),%rcx
   23ac8:	mov    %rdi,%r8
   23acb:	mov    %r12,-0x10(%rbp)
   23acf:	mov    %r13,-0x18(%rbp)
   23ad3:	mov    %r14,-0x20(%rbp)
   23ad7:	mov    %rbx,%r12
   23ada:	mov    %rdi,%rbx
   23add:	mov    %r8,%rdi
   23ae0:	mov    %rax,%r13
   23ae3:	mov    %rsi,%r14
   23ae6:	mov    %rdx,%r15
   23ae9:	callq  *%rcx
   23aeb:	mov    %r13,%rax
   23aee:	mov    %r15,%rdx
   23af1:	mov    %r14,%rsi
   23af4:	mov    -0x20(%rbp),%r14
   23af8:	mov    -0x18(%rbp),%rcx
   23afc:	mov    -0x10(%rbp),%r13
   23b00:	xor    %r15d,%r15d
   23b03:	test   %rdx,%rdx
   23b06:	je     23bd5 <get_sos+0x155>
   23b0c:	movzbl (%rsi),%r8d
   23b10:	lea    -0x1(%rdx),%rdi
   23b14:	test   %rdi,%rdi
   23b17:	je     23bfe <get_sos+0x17e>
   23b1d:	add    $0x1,%rsi
   23b21:	movzbl (%rsi),%edx
   23b24:	add    $0xffffffffffffffff,%rdi
   23b28:	test   %rdi,%rdi
   23b2b:	je     23c2b <get_sos+0x1ab>
   23b31:	add    $0x1,%rsi
   23b35:	mov    %rdi,-0x30(%rbp)
   23b39:	mov    %rsi,-0x38(%rbp)
   23b3d:	mov    (%rbx),%rdi
   23b40:	movzbl (%rsi),%r10d
   23b44:	mov    %r10,-0x50(%rbp)
   23b48:	movl   $0x67,0x28(%rdi)
   23b4f:	mov    (%rbx),%rsi
   23b52:	mov    %r10d,0x2c(%rsi)
   23b56:	mov    $0x1,%esi
   23b5b:	mov    (%rbx),%rdi
   23b5e:	mov    0x8(%rdi),%r9
   23b62:	mov    %r14,-0x20(%rbp)
   23b66:	mov    %rbx,%rdi
   23b69:	mov    %r13,-0x10(%rbp)
   23b6d:	mov    %rcx,-0x18(%rbp)
   23b71:	mov    %rax,-0x40(%rbp)
   23b75:	mov    %r12,-0x8(%rbp)
   23b79:	mov    %r8,%r12
   23b7c:	mov    %rdx,%r13
   23b7f:	mov    %r10,%r14
   23b82:	callq  *%r9
   23b85:	shl    $0x8,%r12d
   23b89:	mov    %r12d,%eax
   23b8c:	lea    0x0(%r13,%rax,1),%rcx
   23b91:	lea    0x6(%r14,%r14,1),%eax
   23b96:	movslq %eax,%rax
   23b99:	cmp    %rcx,%rax
   23b9c:	jne    23ba9 <get_sos+0x129>
   23b9e:	test   %r14b,%r14b
   23ba1:	je     23ba9 <get_sos+0x129>
   23ba3:	cmp    $0x4,%r14b
   23ba7:	jbe    23bbe <get_sos+0x13e>
   23ba9:	mov    (%rbx),%rax
   23bac:	movl   $0xb,0x28(%rax)
   23bb3:	mov    (%rbx),%rax
   23bb6:	mov    (%rax),%rax
   23bb9:	mov    %rbx,%rdi
   23bbc:	callq  *%rax
   23bbe:	mov    %r14d,0x1b0(%rbx)
   23bc5:	mov    -0x38(%rbp),%rsi
   23bc9:	mov    -0x30(%rbp),%rdx
   23bcd:	mov    %r15,%rax
   23bd0:	jmpq   23c6a <get_sos+0x1ea>
   23bd5:	mov    %rbx,%rdi
   23bd8:	mov    %rcx,%rbx
   23bdb:	mov    %rax,%r15
   23bde:	callq  *0x18(%r15)
   23be2:	test   %eax,%eax
   23be4:	jne    23c83 <get_sos+0x203>
   23bea:	mov    %r12,%rcx
   23bed:	mov    %r13,%r12
   23bf0:	mov    %rbx,%r13
   23bf3:	mov    %rcx,%rbx
   23bf6:	xor    %eax,%eax
   23bf8:	mov    -0x28(%rbp),%r15
   23bfc:	leaveq 
   23bfd:	retq   
   23bfe:	mov    %r8,-0x48(%rbp)
   23c02:	mov    %rbx,%rdi
   23c05:	mov    %rcx,%rbx
   23c08:	mov    %rax,%r15
   23c0b:	callq  *0x18(%r15)
   23c0f:	test   %eax,%eax
   23c11:	jne    23c9c <get_sos+0x21c>
   23c17:	mov    %r12,%rcx
   23c1a:	mov    %r13,%r12
   23c1d:	mov    %rbx,%r13
   23c20:	mov    %rcx,%rbx
   23c23:	xor    %eax,%eax
   23c25:	mov    -0x28(%rbp),%r15
   23c29:	leaveq 
   23c2a:	retq   
   23c2b:	mov    %r8,-0x48(%rbp)
   23c2f:	mov    %rdx,-0x40(%rbp)
   23c33:	mov    %rbx,%rdi
   23c36:	mov    %rcx,%rbx
   23c39:	mov    %rax,%r15
   23c3c:	callq  *0x18(%r15)
   23c40:	test   %eax,%eax
   23c42:	jne    23cb9 <get_sos+0x239>
   23c44:	mov    %r12,%rcx
   23c47:	mov    %r13,%r12
   23c4a:	mov    %rbx,%r13
   23c4d:	mov    %rcx,%rbx
   23c50:	xor    %eax,%eax
   23c52:	mov    -0x28(%rbp),%r15
   23c56:	leaveq 
   23c57:	retq   
   23c58:	movslq %eax,%rcx
   23c5b:	movq   $0x0,0x1b8(%rbx,%rcx,8)
   23c67:	add    $0x1,%eax
   23c6a:	cmp    $0x3,%eax
   23c6d:	jle    23c58 <get_sos+0x1d8>
   23c6f:	lea    -0x1(%rdx),%rax
   23c73:	lea    0x1(%rsi),%rcx
   23c77:	mov    -0x40(%rbp),%r12
   23c7b:	mov    %r15,%r13
   23c7e:	jmpq   23d2e <get_sos+0x2ae>
   23c83:	mov    %r15,%rax
   23c86:	mov    %rbx,%rcx
   23c89:	mov    (%rax),%rsi
   23c8c:	mov    0x8(%rax),%rdx
   23c90:	xor    %r15d,%r15d
   23c93:	mov    -0x50(%rbp),%rbx
   23c97:	jmpq   23b0c <get_sos+0x8c>
   23c9c:	mov    %r15,%rax
   23c9f:	mov    %rbx,%rcx
   23ca2:	mov    (%rax),%rsi
   23ca5:	mov    0x8(%rax),%rdi
   23ca9:	mov    -0x48(%rbp),%r8
   23cad:	xor    %r15d,%r15d
   23cb0:	mov    -0x50(%rbp),%rbx
   23cb4:	jmpq   23b21 <get_sos+0xa1>
   23cb9:	mov    %r15,%rax
   23cbc:	mov    %rbx,%rcx
   23cbf:	mov    (%rax),%rsi
   23cc2:	mov    0x8(%rax),%rdi
   23cc6:	mov    -0x40(%rbp),%rdx
   23cca:	mov    -0x48(%rbp),%r8
   23cce:	xor    %r15d,%r15d
   23cd1:	mov    -0x50(%rbp),%rbx
   23cd5:	jmpq   23b35 <get_sos+0xb5>
   23cda:	movslq %r15d,%rax
   23cdd:	mov    0x1b8(%rbx,%rax,8),%rax
   23ce5:	cmp    %r12,%rax
   23ce8:	jne    23d06 <get_sos+0x286>
   23cea:	mov    (%rbx),%rax
   23ced:	movl   $0x5,0x28(%rax)
   23cf4:	mov    (%rbx),%rax
   23cf7:	mov    %r14d,0x2c(%rax)
   23cfb:	mov    (%rbx),%rax
   23cfe:	mov    (%rax),%rax
   23d01:	mov    %rbx,%rdi
   23d04:	callq  *%rax
   23d06:	add    $0x1,%r15d
   23d0a:	cmp    %r13d,%r15d
   23d0d:	jl     23cda <get_sos+0x25a>
   23d0f:	mov    -0x30(%rbp),%rax
   23d13:	add    $0xffffffffffffffff,%rax
   23d17:	mov    -0x38(%rbp),%rcx
   23d1b:	add    $0x1,%rcx
   23d1f:	add    $0x1,%r13d
   23d23:	mov    -0x50(%rbp),%r14
   23d27:	mov    -0x40(%rbp),%r12
   23d2b:	xor    %r15d,%r15d
   23d2e:	cmp    %r14d,%r13d
   23d31:	jl     23d5d <get_sos+0x2dd>
   23d33:	test   %rax,%rax
   23d36:	jne    23db3 <get_sos+0x333>
   23d38:	mov    %rbx,%rdi
   23d3b:	callq  *0x18(%r12)
   23d40:	test   %eax,%eax
   23d42:	jne    23daa <get_sos+0x32a>
   23d44:	mov    %r15,%rax
   23d47:	mov    -0x8(%rbp),%rbx
   23d4b:	mov    -0x28(%rbp),%r15
   23d4f:	mov    -0x20(%rbp),%r14
   23d53:	mov    -0x18(%rbp),%r13
   23d57:	mov    -0x10(%rbp),%r12
   23d5b:	leaveq 
   23d5c:	retq   
   23d5d:	test   %rax,%rax
   23d60:	jne    23d7b <get_sos+0x2fb>
   23d62:	mov    %rbx,%rdi
   23d65:	callq  *0x18(%r12)
   23d6a:	test   %eax,%eax
   23d6c:	je     23e95 <get_sos+0x415>
   23d72:	mov    (%r12),%rcx
   23d76:	mov    0x8(%r12),%rax
   23d7b:	movzbl (%rcx),%r14d
   23d7f:	add    $0xffffffffffffffff,%rax
   23d83:	test   %rax,%rax
   23d86:	je     23eae <get_sos+0x42e>
   23d8c:	add    $0x1,%rcx
   23d90:	mov    %rax,-0x30(%rbp)
   23d94:	mov    %rcx,-0x38(%rbp)
   23d98:	movzbl (%rcx),%ecx
   23d9b:	mov    0x130(%rbx),%r12
   23da2:	mov    %r15,%rax
   23da5:	jmpq   23eee <get_sos+0x46e>
   23daa:	mov    (%r12),%rcx
   23dae:	mov    0x8(%r12),%rax
   23db3:	movzbl (%rcx),%edx
   23db6:	mov    %edx,0x20c(%rbx)
   23dbc:	lea    -0x1(%rax),%rdx
   23dc0:	test   %rdx,%rdx
   23dc3:	je     23f6d <get_sos+0x4ed>
   23dc9:	lea    0x1(%rcx),%rax
   23dcd:	movzbl (%rax),%ecx
   23dd0:	mov    %ecx,0x210(%rbx)
   23dd6:	lea    -0x1(%rdx),%rcx
   23dda:	test   %rcx,%rcx
   23ddd:	je     23f92 <get_sos+0x512>
   23de3:	lea    0x1(%rax),%r14
   23de7:	mov    %rcx,%r15
   23dea:	movzbl (%r14),%eax
   23dee:	mov    %rax,%rcx
   23df1:	shr    $0x4,%ecx
   23df4:	mov    %ecx,0x214(%rbx)
   23dfa:	and    $0xf,%eax
   23dfd:	mov    %eax,0x218(%rbx)
   23e03:	movslq 0x20c(%rbx),%rax
   23e0a:	mov    (%rbx),%rcx
   23e0d:	mov    %eax,0x2c(%rcx)
   23e10:	movslq 0x210(%rbx),%rax
   23e17:	mov    %eax,0x30(%rcx)
   23e1a:	movslq 0x214(%rbx),%rax
   23e21:	mov    %eax,0x34(%rcx)
   23e24:	movslq 0x218(%rbx),%rax
   23e2b:	mov    %eax,0x38(%rcx)
   23e2e:	mov    (%rbx),%rax
   23e31:	movl   $0x69,0x28(%rax)
   23e38:	mov    (%rbx),%rax
   23e3b:	mov    0x8(%rax),%rax
   23e3f:	mov    %rbx,%rdi
   23e42:	mov    $0x1,%r13d
   23e48:	mov    %r13,%rsi
   23e4b:	callq  *%rax
   23e4d:	mov    0x248(%rbx),%rax
   23e54:	movl   $0x0,0x20(%rax)
   23e5b:	movslq 0xac(%rbx),%rax
   23e62:	add    $0x1,%eax
   23e65:	mov    %eax,0xac(%rbx)
   23e6b:	lea    0x1(%r14),%rax
   23e6f:	mov    %rax,(%r12)
   23e73:	lea    -0x1(%r15),%rax
   23e77:	mov    %rax,0x8(%r12)
   23e7c:	mov    %r13,%rax
   23e7f:	mov    -0x8(%rbp),%rbx
   23e83:	mov    -0x28(%rbp),%r15
   23e87:	mov    -0x20(%rbp),%r14
   23e8b:	mov    -0x18(%rbp),%r13
   23e8f:	mov    -0x10(%rbp),%r12
   23e93:	leaveq 
   23e94:	retq   
   23e95:	mov    %r15,%rax
   23e98:	mov    -0x8(%rbp),%rbx
   23e9c:	mov    -0x28(%rbp),%r15
   23ea0:	mov    -0x20(%rbp),%r14
   23ea4:	mov    -0x18(%rbp),%r13
   23ea8:	mov    -0x10(%rbp),%r12
   23eac:	leaveq 
   23ead:	retq   
   23eae:	mov    %rbx,%rdi
   23eb1:	callq  *0x18(%r12)
   23eb6:	test   %eax,%eax
   23eb8:	je     23fb7 <get_sos+0x537>
   23ebe:	mov    (%r12),%rcx
   23ec2:	mov    0x8(%r12),%rax
   23ec7:	jmpq   23d90 <get_sos+0x310>
   23ecc:	cmp    $0x3,%eax
   23ecf:	jg     23ef3 <get_sos+0x473>
   23ed1:	cmp    (%r12),%r14d
   23ed5:	jne    23ee7 <get_sos+0x467>
   23ed7:	movslq %eax,%rdx
   23eda:	mov    0x1b8(%rbx,%rdx,8),%rdx
   23ee2:	test   %rdx,%rdx
   23ee5:	je     23f18 <get_sos+0x498>
   23ee7:	add    $0x60,%r12
   23eeb:	add    $0x1,%eax
   23eee:	cmp    0x38(%rbx),%eax
   23ef1:	jl     23ecc <get_sos+0x44c>
   23ef3:	mov    (%rbx),%rax
   23ef6:	movl   $0x5,0x28(%rax)
   23efd:	mov    (%rbx),%rax
   23f00:	mov    %r14d,0x2c(%rax)
   23f04:	mov    (%rbx),%rax
   23f07:	mov    (%rax),%rax
   23f0a:	mov    %rcx,%r15
   23f0d:	mov    %rbx,%rdi
   23f10:	callq  *%rax
   23f12:	mov    %r15,%rcx
   23f15:	xor    %r15d,%r15d
   23f18:	movslq %r13d,%rax
   23f1b:	mov    %r12,0x1b8(%rbx,%rax,8)
   23f23:	mov    %rcx,%rax
   23f26:	shr    $0x4,%eax
   23f29:	mov    %eax,0x14(%r12)
   23f2e:	and    $0xf,%ecx
   23f31:	mov    %ecx,0x18(%r12)
   23f36:	mov    (%rbx),%rcx
   23f39:	mov    %r14d,0x2c(%rcx)
   23f3d:	movslq 0x14(%r12),%rax
   23f42:	mov    %eax,0x30(%rcx)
   23f45:	movslq 0x18(%r12),%rax
   23f4a:	mov    %eax,0x34(%rcx)
   23f4d:	mov    (%rbx),%rax
   23f50:	movl   $0x68,0x28(%rax)
   23f57:	mov    (%rbx),%rax
   23f5a:	mov    0x8(%rax),%rax
   23f5e:	mov    %rbx,%rdi
   23f61:	mov    $0x1,%esi
   23f66:	callq  *%rax
   23f68:	jmpq   23d0a <get_sos+0x28a>
   23f6d:	mov    %rbx,%rdi
   23f70:	callq  *0x18(%r12)
   23f75:	test   %eax,%eax
   23f77:	jne    23fd0 <get_sos+0x550>
   23f79:	mov    %r15,%rax
   23f7c:	mov    -0x8(%rbp),%rbx
   23f80:	mov    -0x28(%rbp),%r15
   23f84:	mov    -0x20(%rbp),%r14
   23f88:	mov    -0x18(%rbp),%r13
   23f8c:	mov    -0x10(%rbp),%r12
   23f90:	leaveq 
   23f91:	retq   
   23f92:	mov    %rbx,%rdi
   23f95:	callq  *0x18(%r12)
   23f9a:	test   %eax,%eax
   23f9c:	jne    23fde <get_sos+0x55e>
   23f9e:	mov    %r15,%rax
   23fa1:	mov    -0x8(%rbp),%rbx
   23fa5:	mov    -0x28(%rbp),%r15
   23fa9:	mov    -0x20(%rbp),%r14
   23fad:	mov    -0x18(%rbp),%r13
   23fb1:	mov    -0x10(%rbp),%r12
   23fb5:	leaveq 
   23fb6:	retq   
   23fb7:	mov    %r15,%rax
   23fba:	mov    -0x8(%rbp),%rbx
   23fbe:	mov    -0x28(%rbp),%r15
   23fc2:	mov    -0x20(%rbp),%r14
   23fc6:	mov    -0x18(%rbp),%r13
   23fca:	mov    -0x10(%rbp),%r12
   23fce:	leaveq 
   23fcf:	retq   
   23fd0:	mov    (%r12),%rax
   23fd4:	mov    0x8(%r12),%rdx
   23fd9:	jmpq   23dcd <get_sos+0x34d>
   23fde:	mov    (%r12),%r14
   23fe2:	mov    0x8(%r12),%r15
   23fe7:	jmpq   23dea <get_sos+0x36a>
   23fec:	nopl   0x0(%rax)

0000000000023ff0 <get_dac>:
   23ff0:	push   %rbp
   23ff1:	mov    %rsp,%rbp
   23ff4:	sub    $0x40,%rsp
   23ff8:	mov    %r15,-0x20(%rbp)
   23ffc:	mov    0x28(%rdi),%rdx
   24000:	mov    %rdx,-0x30(%rbp)
   24004:	mov    (%rdx),%rcx
   24007:	mov    0x8(%rdx),%rax
   2400b:	test   %rax,%rax
   2400e:	je     24065 <get_dac+0x75>
   24010:	mov    %r13,%r15
   24013:	mov    %rbx,%r13
   24016:	mov    %rdi,%rbx
   24019:	mov    %r14,%rdi
   2401c:	mov    %rdx,%r14
   2401f:	mov    %rdi,%rdx
   24022:	movzbl (%rcx),%esi
   24025:	add    $0xffffffffffffffff,%rax
   24029:	test   %rax,%rax
   2402c:	je     24098 <get_dac+0xa8>
   2402e:	lea    0x1(%rcx),%rdi
   24032:	mov    %r15,%r8
   24035:	mov    %r12,%r9
   24038:	mov    $0x1,%r12d
   2403e:	lea    0x1(%rdi),%rcx
   24042:	add    $0xffffffffffffffff,%rax
   24046:	movzbl (%rdi),%edi
   24049:	shl    $0x8,%esi
   2404c:	mov    %esi,%esi
   2404e:	lea    -0x2(%rdi,%rsi,1),%r15
   24053:	mov    %r13,-0x8(%rbp)
   24057:	mov    %r9,-0x10(%rbp)
   2405b:	mov    %r8,-0x18(%rbp)
   2405f:	mov    %rdx,-0x28(%rbp)
   24063:	jmp    240e0 <get_dac+0xf0>
   24065:	mov    %rdi,%rax
   24068:	mov    %rdi,-0x38(%rbp)
   2406c:	mov    %rax,%rdi
   2406f:	mov    %r13,%r15
   24072:	mov    %rbx,%r13
   24075:	mov    %r14,%rbx
   24078:	mov    %rdx,%r14
   2407b:	callq  *0x18(%r14)
   2407f:	test   %eax,%eax
   24081:	jne    2412b <get_dac+0x13b>
   24087:	mov    %rbx,%r14
   2408a:	mov    %r13,%rbx
   2408d:	mov    %r15,%r13
   24090:	xor    %eax,%eax
   24092:	mov    -0x20(%rbp),%r15
   24096:	leaveq 
   24097:	retq   
   24098:	mov    %rbx,%rdi
   2409b:	mov    %rbx,-0x28(%rbp)
   2409f:	mov    %rsi,-0x38(%rbp)
   240a3:	mov    %rdx,%rbx
   240a6:	callq  *0x18(%r14)
   240aa:	test   %eax,%eax
   240ac:	jne    2413e <get_dac+0x14e>
   240b2:	mov    %rbx,%r14
   240b5:	mov    %r13,%rbx
   240b8:	mov    %r15,%r13
   240bb:	xor    %eax,%eax
   240bd:	mov    -0x20(%rbp),%r15
   240c1:	leaveq 
   240c2:	retq   
   240c3:	lea    -0x10(%r13),%edx
   240c7:	movslq %edx,%rdx
   240ca:	mov    -0x38(%rbp),%rsi
   240ce:	mov    %sil,0x160(%rbx,%rdx,1)
   240d6:	mov    $0x1,%r12d
   240dc:	mov    -0x30(%rbp),%r14
   240e0:	test   %r15,%r15
   240e3:	jg     2415b <get_dac+0x16b>
   240e5:	test   %r15,%r15
   240e8:	jns    2410b <get_dac+0x11b>
   240ea:	mov    (%rbx),%rdx
   240ed:	movl   $0xb,0x28(%rdx)
   240f4:	mov    (%rbx),%rdx
   240f7:	mov    (%rdx),%rdx
   240fa:	mov    %rbx,%rdi
   240fd:	mov    %rax,%rbx
   24100:	mov    %rcx,%r13
   24103:	callq  *%rdx
   24105:	mov    %rbx,%rax
   24108:	mov    %r13,%rcx
   2410b:	mov    %rcx,(%r14)
   2410e:	mov    %rax,0x8(%r14)
   24112:	mov    %r12,%rax
   24115:	mov    -0x28(%rbp),%r14
   24119:	mov    -0x18(%rbp),%r13
   2411d:	mov    -0x10(%rbp),%r12
   24121:	mov    -0x8(%rbp),%rbx
   24125:	mov    -0x20(%rbp),%r15
   24129:	leaveq 
   2412a:	retq   
   2412b:	mov    (%r14),%rcx
   2412e:	mov    0x8(%r14),%rax
   24132:	mov    %rbx,%rdx
   24135:	mov    -0x38(%rbp),%rbx
   24139:	jmpq   24022 <get_dac+0x32>
   2413e:	mov    (%r14),%rdi
   24141:	mov    0x8(%r14),%rax
   24145:	mov    %rbx,%rdx
   24148:	mov    %r15,%r8
   2414b:	mov    %r12,%r9
   2414e:	mov    -0x38(%rbp),%rsi
   24152:	mov    -0x28(%rbp),%rbx
   24156:	jmpq   24038 <get_dac+0x48>
   2415b:	test   %rax,%rax
   2415e:	je     24218 <get_dac+0x228>
   24164:	movzbl (%rcx),%r13d
   24168:	lea    -0x1(%rax),%rdx
   2416c:	test   %rdx,%rdx
   2416f:	je     2422f <get_dac+0x23f>
   24175:	lea    0x1(%rcx),%r14
   24179:	mov    (%rbx),%rax
   2417c:	movzbl (%r14),%ecx
   24180:	mov    %rcx,-0x38(%rbp)
   24184:	movl   $0x4f,0x28(%rax)
   2418b:	mov    (%rbx),%rax
   2418e:	mov    %r13d,0x2c(%rax)
   24192:	mov    (%rbx),%rax
   24195:	mov    %ecx,0x30(%rax)
   24198:	mov    (%rbx),%rax
   2419b:	mov    0x8(%rax),%rax
   2419f:	mov    %r12,%rsi
   241a2:	mov    %rdx,%r12
   241a5:	mov    %rbx,%rdi
   241a8:	callq  *%rax
   241aa:	cmp    $0x1f,%r13b
   241ae:	jbe    241cc <get_dac+0x1dc>
   241b0:	mov    (%rbx),%rax
   241b3:	movl   $0x1c,0x28(%rax)
   241ba:	mov    (%rbx),%rax
   241bd:	mov    %r13d,0x2c(%rax)
   241c1:	mov    (%rbx),%rax
   241c4:	mov    (%rax),%rax
   241c7:	mov    %rbx,%rdi
   241ca:	callq  *%rax
   241cc:	lea    0x1(%r14),%rcx
   241d0:	lea    -0x1(%r12),%rax
   241d5:	add    $0xfffffffffffffffe,%r15
   241d9:	cmp    $0xf,%r13b
   241dd:	ja     240c3 <get_dac+0xd3>
   241e3:	mov    -0x38(%rbp),%rdi
   241e7:	mov    %rdi,%rsi
   241ea:	and    $0xf,%sil
   241ee:	mov    %sil,0x140(%r13,%rbx,1)
   241f6:	mov    %rdi,%rdx
   241f9:	shr    $0x4,%edx
   241fc:	mov    %dl,0x150(%rbx,%r13,1)
   24204:	cmp    %sil,%dl
   24207:	jb     24249 <get_dac+0x259>
   24209:	mov    $0x1,%r12d
   2420f:	mov    -0x30(%rbp),%r14
   24213:	jmpq   240e0 <get_dac+0xf0>
   24218:	mov    %rbx,%rdi
   2421b:	callq  *0x18(%r14)
   2421f:	test   %eax,%eax
   24221:	je     2427f <get_dac+0x28f>
   24223:	mov    (%r14),%rcx
   24226:	mov    0x8(%r14),%rax
   2422a:	jmpq   24164 <get_dac+0x174>
   2422f:	mov    %rbx,%rdi
   24232:	callq  *0x18(%r14)
   24236:	test   %eax,%eax
   24238:	je     24297 <get_dac+0x2a7>
   2423a:	mov    (%r14),%rax
   2423d:	mov    0x8(%r14),%rdx
   24241:	mov    %rax,%r14
   24244:	jmpq   24179 <get_dac+0x189>
   24249:	mov    (%rbx),%rdx
   2424c:	movl   $0x1d,0x28(%rdx)
   24253:	mov    (%rbx),%rdx
   24256:	mov    %edi,0x2c(%rdx)
   24259:	mov    (%rbx),%rdx
   2425c:	mov    (%rdx),%rdx
   2425f:	mov    %rax,%r13
   24262:	mov    %rcx,%r14
   24265:	mov    %rbx,%rdi
   24268:	callq  *%rdx
   2426a:	mov    %r13,%rax
   2426d:	mov    %r14,%rcx
   24270:	mov    $0x1,%r12d
   24276:	mov    -0x30(%rbp),%r14
   2427a:	jmpq   240e0 <get_dac+0xf0>
   2427f:	mov    -0x28(%rbp),%r14
   24283:	mov    -0x18(%rbp),%r13
   24287:	mov    -0x10(%rbp),%r12
   2428b:	mov    -0x8(%rbp),%rbx
   2428f:	xor    %eax,%eax
   24291:	mov    -0x20(%rbp),%r15
   24295:	leaveq 
   24296:	retq   
   24297:	mov    -0x28(%rbp),%r14
   2429b:	mov    -0x18(%rbp),%r13
   2429f:	mov    -0x10(%rbp),%r12
   242a3:	mov    -0x8(%rbp),%rbx
   242a7:	xor    %eax,%eax
   242a9:	mov    -0x20(%rbp),%r15
   242ad:	leaveq 
   242ae:	retq   
   242af:	nop

00000000000242b0 <get_dht>:
   242b0:	push   %rbp
   242b1:	mov    %rsp,%rbp
   242b4:	sub    $0x160,%rsp
   242bb:	mov    %r15,-0x28(%rbp)
   242bf:	mov    0x28(%rdi),%r15
   242c3:	mov    %r15,-0x40(%rbp)
   242c7:	mov    (%r15),%rsi
   242ca:	xor    %eax,%eax
   242cc:	mov    0x8(%r15),%r8
   242d0:	test   %r8,%r8
   242d3:	je     24327 <get_dht+0x77>
   242d5:	mov    %r14,%rcx
   242d8:	mov    %rax,%r14
   242db:	mov    %rbx,%rdx
   242de:	mov    %rdi,%rbx
   242e1:	movzbl (%rsi),%eax
   242e4:	lea    -0x1(%r8),%rdi
   242e8:	test   %rdi,%rdi
   242eb:	je     24345 <get_dht+0x95>
   242ed:	lea    0x1(%rsi),%r8
   242f1:	mov    %r13,%r9
   242f4:	mov    %r12,%r10
   242f7:	mov    $0x1,%esi
   242fc:	lea    0x1(%r8),%r13
   24300:	lea    -0x1(%rdi),%r12
   24304:	movzbl (%r8),%edi
   24308:	shl    $0x8,%eax
   2430b:	mov    %eax,%eax
   2430d:	lea    -0x2(%rdi,%rax,1),%rax
   24312:	mov    %rdx,-0x8(%rbp)
   24316:	mov    %r10,-0x10(%rbp)
   2431a:	mov    %r9,-0x18(%rbp)
   2431e:	mov    %rcx,-0x20(%rbp)
   24322:	jmpq   243f0 <get_dht+0x140>
   24327:	mov    %rdi,%rax
   2432a:	mov    %rdi,-0x48(%rbp)
   2432e:	mov    %rax,%rdi
   24331:	callq  *0x18(%r15)
   24335:	test   %eax,%eax
   24337:	jne    2443a <get_dht+0x18a>
   2433d:	xor    %eax,%eax
   2433f:	mov    -0x28(%rbp),%r15
   24343:	leaveq 
   24344:	retq   
   24345:	mov    %rbx,%rdi
   24348:	mov    %rbx,-0x48(%rbp)
   2434c:	mov    %rax,-0x30(%rbp)
   24350:	mov    %rdx,%rbx
   24353:	mov    %rcx,%r14
   24356:	callq  *0x18(%r15)
   2435a:	test   %eax,%eax
   2435c:	jne    24453 <get_dht+0x1a3>
   24362:	xor    %eax,%eax
   24364:	mov    -0x28(%rbp),%r15
   24368:	leaveq 
   24369:	retq   
   2436a:	add    $0xfffffff0,%r15d
   2436e:	test   %r15d,%r15d
   24371:	jns    24476 <get_dht+0x1c6>
   24377:	mov    (%rbx),%rax
   2437a:	movl   $0x1e,0x28(%rax)
   24381:	mov    (%rbx),%rax
   24384:	mov    %r15d,0x2c(%rax)
   24388:	mov    (%rbx),%rax
   2438b:	mov    (%rax),%rax
   2438e:	mov    %rbx,%rdi
   24391:	callq  *%rax
   24393:	movslq %r15d,%rax
   24396:	lea    0x108(%rbx,%rax,8),%r15
   2439e:	mov    (%r15),%rax
   243a1:	test   %rax,%rax
   243a4:	jne    243b1 <get_dht+0x101>
   243a6:	mov    %rbx,%rdi
   243a9:	callq  44a0 <jpeg_alloc_huff_table@plt>
   243ae:	mov    %rax,(%r15)
   243b1:	mov    (%r15),%rdi
   243b4:	lea    -0x159(%rbp),%rsi
   243bb:	mov    $0x11,%edx
   243c0:	callq  42c0 <memcpy@plt>
   243c5:	mov    (%r15),%rdi
   243c8:	add    $0x11,%rdi
   243cc:	lea    -0x148(%rbp),%rsi
   243d3:	mov    $0x100,%edx
   243d8:	callq  42c0 <memcpy@plt>
   243dd:	mov    -0x38(%rbp),%rax
   243e1:	sub    %r14,%rax
   243e4:	mov    -0x40(%rbp),%r15
   243e8:	mov    $0x1,%esi
   243ed:	xor    %r14d,%r14d
   243f0:	cmp    $0x10,%rax
   243f4:	jg     24485 <get_dht+0x1d5>
   243fa:	test   %rax,%rax
   243fd:	je     2441a <get_dht+0x16a>
   243ff:	mov    (%rbx),%rax
   24402:	movl   $0xb,0x28(%rax)
   24409:	mov    (%rbx),%rax
   2440c:	mov    (%rax),%rax
   2440f:	mov    %rbx,%rdi
   24412:	mov    %rsi,%rbx
   24415:	callq  *%rax
   24417:	mov    %rbx,%rsi
   2441a:	mov    %r13,(%r15)
   2441d:	mov    %r12,0x8(%r15)
   24421:	mov    %rsi,%rax
   24424:	mov    -0x20(%rbp),%r14
   24428:	mov    -0x18(%rbp),%r13
   2442c:	mov    -0x10(%rbp),%r12
   24430:	mov    -0x8(%rbp),%rbx
   24434:	mov    -0x28(%rbp),%r15
   24438:	leaveq 
   24439:	retq   
   2443a:	mov    (%r15),%rsi
   2443d:	mov    0x8(%r15),%r8
   24441:	mov    %r14,%rcx
   24444:	mov    %rbx,%rdx
   24447:	xor    %r14d,%r14d
   2444a:	mov    -0x48(%rbp),%rbx
   2444e:	jmpq   242e1 <get_dht+0x31>
   24453:	mov    (%r15),%r8
   24456:	mov    0x8(%r15),%rdi
   2445a:	mov    %r14,%rcx
   2445d:	mov    %rbx,%rdx
   24460:	mov    %r13,%r9
   24463:	mov    %r12,%r10
   24466:	mov    -0x30(%rbp),%rax
   2446a:	xor    %r14d,%r14d
   2446d:	mov    -0x48(%rbp),%rbx
   24471:	jmpq   242f7 <get_dht+0x47>
   24476:	cmp    $0x3,%r15d
   2447a:	jg     24377 <get_dht+0xc7>
   24480:	jmpq   24393 <get_dht+0xe3>
   24485:	test   %r12,%r12
   24488:	jne    244ae <get_dht+0x1fe>
   2448a:	mov    %rax,%r12
   2448d:	mov    %rsi,%r13
   24490:	mov    %rbx,%rdi
   24493:	callq  *0x18(%r15)
   24497:	test   %eax,%eax
   24499:	je     244f0 <get_dht+0x240>
   2449b:	mov    (%r15),%rax
   2449e:	mov    0x8(%r15),%rcx
   244a2:	mov    %r13,%rsi
   244a5:	mov    %rax,%r13
   244a8:	mov    %r12,%rax
   244ab:	mov    %rcx,%r12
   244ae:	mov    (%rbx),%rcx
   244b1:	movzbl 0x0(%r13),%edx
   244b6:	mov    %rdx,-0x30(%rbp)
   244ba:	movl   $0x50,0x28(%rcx)
   244c1:	mov    (%rbx),%rcx
   244c4:	mov    %edx,0x2c(%rcx)
   244c7:	mov    (%rbx),%rcx
   244ca:	mov    0x8(%rcx),%rcx
   244ce:	mov    %rbx,%rdi
   244d1:	mov    %rax,-0x38(%rbp)
   244d5:	callq  *%rcx
   244d7:	movb   $0x0,-0x159(%rbp)
   244de:	add    $0xffffffffffffffff,%r12
   244e2:	add    $0x1,%r13
   244e6:	mov    $0x1,%ecx
   244eb:	mov    %r14,%rax
   244ee:	jmp    24530 <get_dht+0x280>
   244f0:	mov    %r14,%rax
   244f3:	mov    -0x20(%rbp),%r14
   244f7:	mov    -0x18(%rbp),%r13
   244fb:	mov    -0x10(%rbp),%r12
   244ff:	mov    -0x8(%rbp),%rbx
   24503:	mov    -0x28(%rbp),%r15
   24507:	leaveq 
   24508:	retq   
   24509:	test   %r12,%r12
   2450c:	je     24636 <get_dht+0x386>
   24512:	movzbl 0x0(%r13),%esi
   24517:	movslq %ecx,%rdx
   2451a:	mov    %sil,-0x159(%rbp,%rdx,1)
   24522:	add    $0xffffffffffffffff,%r12
   24526:	add    $0x1,%ecx
   24529:	add    %esi,%r14d
   2452c:	add    $0x1,%r13
   24530:	cmp    $0x10,%ecx
   24533:	jle    24509 <get_dht+0x259>
   24535:	movzbl -0x158(%rbp),%eax
   2453c:	mov    (%rbx),%rcx
   2453f:	mov    %eax,0x2c(%rcx)
   24542:	movzbl -0x157(%rbp),%eax
   24549:	mov    %eax,0x30(%rcx)
   2454c:	movzbl -0x156(%rbp),%eax
   24553:	mov    %eax,0x34(%rcx)
   24556:	movzbl -0x155(%rbp),%eax
   2455d:	mov    %eax,0x38(%rcx)
   24560:	movzbl -0x154(%rbp),%eax
   24567:	mov    %eax,0x3c(%rcx)
   2456a:	movzbl -0x153(%rbp),%eax
   24571:	mov    %eax,0x40(%rcx)
   24574:	movzbl -0x152(%rbp),%eax
   2457b:	mov    %eax,0x44(%rcx)
   2457e:	movzbl -0x151(%rbp),%eax
   24585:	mov    %eax,0x48(%rcx)
   24588:	mov    (%rbx),%rax
   2458b:	movl   $0x56,0x28(%rax)
   24592:	mov    (%rbx),%rax
   24595:	mov    0x8(%rax),%rax
   24599:	mov    %rbx,%rdi
   2459c:	mov    $0x2,%esi
   245a1:	callq  *%rax
   245a3:	movzbl -0x150(%rbp),%eax
   245aa:	mov    (%rbx),%rcx
   245ad:	mov    %eax,0x2c(%rcx)
   245b0:	movzbl -0x14f(%rbp),%eax
   245b7:	mov    %eax,0x30(%rcx)
   245ba:	movzbl -0x14e(%rbp),%eax
   245c1:	mov    %eax,0x34(%rcx)
   245c4:	movzbl -0x14d(%rbp),%eax
   245cb:	mov    %eax,0x38(%rcx)
   245ce:	movzbl -0x14c(%rbp),%eax
   245d5:	mov    %eax,0x3c(%rcx)
   245d8:	movzbl -0x14b(%rbp),%eax
   245df:	mov    %eax,0x40(%rcx)
   245e2:	movzbl -0x14a(%rbp),%eax
   245e9:	mov    %eax,0x44(%rcx)
   245ec:	movzbl -0x149(%rbp),%eax
   245f3:	mov    %eax,0x48(%rcx)
   245f6:	mov    (%rbx),%rax
   245f9:	movl   $0x56,0x28(%rax)
   24600:	mov    (%rbx),%rax
   24603:	mov    0x8(%rax),%rax
   24607:	mov    %rbx,%rdi
   2460a:	mov    $0x2,%esi
   2460f:	callq  *%rax
   24611:	movslq %r14d,%rcx
   24614:	mov    %rcx,-0x48(%rbp)
   24618:	mov    -0x38(%rbp),%rax
   2461c:	add    $0xffffffffffffffef,%rax
   24620:	mov    %rax,-0x38(%rbp)
   24624:	cmp    $0x100,%r14d
   2462b:	jg     24666 <get_dht+0x3b6>
   2462d:	cmp    %rcx,%rax
   24630:	jl     24666 <get_dht+0x3b6>
   24632:	xor    %eax,%eax
   24634:	jmp    246a2 <get_dht+0x3f2>
   24636:	mov    %rax,%r12
   24639:	mov    %rcx,%r13
   2463c:	mov    %rbx,%rdi
   2463f:	callq  *0x18(%r15)
   24643:	test   %eax,%eax
   24645:	je     24706 <get_dht+0x456>
   2464b:	mov    (%r15),%rax
   2464e:	mov    0x8(%r15),%rcx
   24652:	mov    %r12,%rdx
   24655:	mov    %rcx,%r12
   24658:	mov    %r13,%rcx
   2465b:	mov    %rax,%r13
   2465e:	mov    %rdx,%rax
   24661:	jmpq   24512 <get_dht+0x262>
   24666:	mov    (%rbx),%rax
   24669:	movl   $0x8,0x28(%rax)
   24670:	mov    (%rbx),%rax
   24673:	mov    (%rax),%rax
   24676:	mov    %rbx,%rdi
   24679:	callq  *%rax
   2467b:	xor    %eax,%eax
   2467d:	jmp    246a2 <get_dht+0x3f2>
   2467f:	test   %r12,%r12
   24682:	je     2471f <get_dht+0x46f>
   24688:	movzbl 0x0(%r13),%edx
   2468d:	movslq %eax,%rcx
   24690:	mov    %dl,-0x148(%rbp,%rcx,1)
   24697:	add    $0xffffffffffffffff,%r12
   2469b:	add    $0x1,%eax
   2469e:	add    $0x1,%r13
   246a2:	cmp    %r14d,%eax
   246a5:	jl     2467f <get_dht+0x3cf>
   246a7:	mov    $0x100,%eax
   246ac:	sub    %r14d,%eax
   246af:	movslq %eax,%rdx
   246b2:	mov    -0x48(%rbp),%r14
   246b6:	lea    -0x148(%rbp,%r14,1),%rdi
   246be:	xor    %esi,%esi
   246c0:	callq  41e0 <memset@plt>
   246c5:	mov    -0x30(%rbp),%r15
   246c9:	mov    %r15,%rax
   246cc:	and    $0x10,%eax
   246cf:	test   %eax,%eax
   246d1:	jg     2436a <get_dht+0xba>
   246d7:	cmp    $0x3,%r15b
   246db:	jbe    246f9 <get_dht+0x449>
   246dd:	mov    (%rbx),%rax
   246e0:	movl   $0x1e,0x28(%rax)
   246e7:	mov    (%rbx),%rax
   246ea:	mov    %r15d,0x2c(%rax)
   246ee:	mov    (%rbx),%rax
   246f1:	mov    (%rax),%rax
   246f4:	mov    %rbx,%rdi
   246f7:	callq  *%rax
   246f9:	lea    0xe8(%rbx,%r15,8),%r15
   24701:	jmpq   2439e <get_dht+0xee>
   24706:	mov    %r12,%rax
   24709:	mov    -0x20(%rbp),%r14
   2470d:	mov    -0x18(%rbp),%r13
   24711:	mov    -0x10(%rbp),%r12
   24715:	mov    -0x8(%rbp),%rbx
   24719:	mov    -0x28(%rbp),%r15
   2471d:	leaveq 
   2471e:	retq   
   2471f:	mov    %rax,%r13
   24722:	mov    %rbx,%rdi
   24725:	callq  *0x18(%r15)
   24729:	test   %eax,%eax
   2472b:	je     24742 <get_dht+0x492>
   2472d:	mov    (%r15),%rax
   24730:	mov    0x8(%r15),%r12
   24734:	mov    %r13,%rcx
   24737:	mov    %rax,%r13
   2473a:	mov    %rcx,%rax
   2473d:	jmpq   24688 <get_dht+0x3d8>
   24742:	mov    -0x20(%rbp),%r14
   24746:	mov    -0x18(%rbp),%r13
   2474a:	mov    -0x10(%rbp),%r12
   2474e:	mov    -0x8(%rbp),%rbx
   24752:	xor    %eax,%eax
   24754:	mov    -0x28(%rbp),%r15
   24758:	leaveq 
   24759:	retq   
   2475a:	nopw   0x0(%rax,%rax,1)

0000000000024760 <get_dqt>:
   24760:	push   %rbp
   24761:	mov    %rsp,%rbp
   24764:	sub    $0x60,%rsp
   24768:	mov    %r15,-0x28(%rbp)
   2476c:	mov    %rdi,-0x58(%rbp)
   24770:	mov    0x28(%rdi),%r15
   24774:	mov    %r15,-0x38(%rbp)
   24778:	mov    (%r15),%rcx
   2477b:	xor    %eax,%eax
   2477d:	mov    0x8(%r15),%r8
   24781:	test   %r8,%r8
   24784:	je     247e0 <get_dqt+0x80>
   24786:	mov    %r14,%rdx
   24789:	mov    %r12,%r14
   2478c:	mov    %rdi,%r12
   2478f:	mov    %r13,%rsi
   24792:	mov    %rax,%r13
   24795:	movzbl (%rcx),%eax
   24798:	lea    -0x1(%r8),%rdi
   2479c:	test   %rdi,%rdi
   2479f:	je     24806 <get_dqt+0xa6>
   247a1:	lea    0x1(%rcx),%r9
   247a5:	mov    %rbx,%r10
   247a8:	mov    0x49829(%rip),%rcx        # 6dfd8 <jpeg_natural_order@@LIBJPEG_6.2+0x129f4>
   247af:	mov    %rcx,-0x30(%rbp)
   247b3:	mov    $0x1,%ebx
   247b8:	lea    0x1(%r9),%r8
   247bc:	lea    -0x1(%rdi),%rcx
   247c0:	movzbl (%r9),%edi
   247c4:	shl    $0x8,%eax
   247c7:	mov    %eax,%eax
   247c9:	lea    -0x2(%rdi,%rax,1),%rax
   247ce:	mov    %r10,-0x8(%rbp)
   247d2:	mov    %r14,-0x10(%rbp)
   247d6:	mov    %rsi,-0x18(%rbp)
   247da:	mov    %rdx,-0x20(%rbp)
   247de:	jmp    24842 <get_dqt+0xe2>
   247e0:	mov    %r14,%rax
   247e3:	mov    %r12,%r14
   247e6:	mov    %rax,%r12
   247e9:	callq  *0x18(%r15)
   247ed:	test   %eax,%eax
   247ef:	jne    24897 <get_dqt+0x137>
   247f5:	mov    %r14,%rcx
   247f8:	mov    %r12,%r14
   247fb:	mov    %rcx,%r12
   247fe:	xor    %eax,%eax
   24800:	mov    -0x28(%rbp),%r15
   24804:	leaveq 
   24805:	retq   
   24806:	mov    %rax,-0x60(%rbp)
   2480a:	mov    %r12,%rdi
   2480d:	mov    %rdx,%r12
   24810:	mov    %rsi,%r13
   24813:	callq  *0x18(%r15)
   24817:	test   %eax,%eax
   24819:	jne    248b0 <get_dqt+0x150>
   2481f:	mov    %r14,%rcx
   24822:	mov    %r12,%r14
   24825:	mov    %rcx,%r12
   24828:	xor    %eax,%eax
   2482a:	mov    -0x28(%rbp),%r15
   2482e:	leaveq 
   2482f:	retq   
   24830:	mov    -0x60(%rbp),%rax
   24834:	add    $0xffffffffffffff7f,%rax
   2483a:	mov    $0x1,%ebx
   2483f:	xor    %r13d,%r13d
   24842:	mov    %rax,-0x60(%rbp)
   24846:	test   %rax,%rax
   24849:	jg     248d0 <get_dqt+0x170>
   2484f:	test   %rax,%rax
   24852:	jns    24877 <get_dqt+0x117>
   24854:	mov    (%r12),%rax
   24858:	movl   $0xb,0x28(%rax)
   2485f:	mov    (%r12),%rax
   24863:	mov    (%rax),%rax
   24866:	mov    %r12,%rdi
   24869:	mov    %rcx,%r12
   2486c:	mov    %r8,%r13
   2486f:	callq  *%rax
   24871:	mov    %r12,%rcx
   24874:	mov    %r13,%r8
   24877:	mov    %r8,(%r15)
   2487a:	mov    %rcx,0x8(%r15)
   2487e:	mov    %rbx,%rax
   24881:	mov    -0x20(%rbp),%r14
   24885:	mov    -0x18(%rbp),%r13
   24889:	mov    -0x10(%rbp),%r12
   2488d:	mov    -0x8(%rbp),%rbx
   24891:	mov    -0x28(%rbp),%r15
   24895:	leaveq 
   24896:	retq   
   24897:	mov    (%r15),%rcx
   2489a:	mov    0x8(%r15),%r8
   2489e:	mov    %r12,%rdx
   248a1:	mov    %r13,%rsi
   248a4:	xor    %r13d,%r13d
   248a7:	mov    -0x58(%rbp),%r12
   248ab:	jmpq   24795 <get_dqt+0x35>
   248b0:	mov    (%r15),%r9
   248b3:	mov    0x8(%r15),%rdi
   248b7:	mov    %r12,%rdx
   248ba:	mov    %r13,%rsi
   248bd:	mov    %rbx,%r10
   248c0:	mov    -0x60(%rbp),%rax
   248c4:	xor    %r13d,%r13d
   248c7:	mov    -0x58(%rbp),%r12
   248cb:	jmpq   247a8 <get_dqt+0x48>
   248d0:	test   %rcx,%rcx
   248d3:	je     24983 <get_dqt+0x223>
   248d9:	mov    (%r12),%rax
   248dd:	movzbl (%r8),%r13d
   248e1:	movl   $0x51,0x28(%rax)
   248e8:	mov    %r13,%rdx
   248eb:	and    $0xf,%edx
   248ee:	mov    (%r12),%rax
   248f2:	mov    %edx,0x2c(%rax)
   248f5:	mov    %r13,%rsi
   248f8:	shr    $0x4,%esi
   248fb:	mov    (%r12),%rax
   248ff:	mov    %esi,0x30(%rax)
   24902:	mov    (%r12),%rax
   24906:	mov    0x8(%rax),%rax
   2490a:	mov    %rbx,%rsi
   2490d:	mov    %rdx,%rbx
   24910:	mov    %rcx,%r14
   24913:	mov    %r8,%r15
   24916:	mov    %r12,%rdi
   24919:	callq  *%rax
   2491b:	cmp    $0x3,%ebx
   2491e:	jle    2493e <get_dqt+0x1de>
   24920:	mov    (%r12),%rax
   24924:	movl   $0x1f,0x28(%rax)
   2492b:	mov    (%r12),%rax
   2492f:	mov    %ebx,0x2c(%rax)
   24932:	mov    (%r12),%rax
   24936:	mov    (%rax),%rax
   24939:	mov    %r12,%rdi
   2493c:	callq  *%rax
   2493e:	movslq %ebx,%rbx
   24941:	mov    0xc8(%r12,%rbx,8),%rax
   24949:	test   %rax,%rax
   2494c:	jne    2495e <get_dqt+0x1fe>
   2494e:	mov    %r12,%rdi
   24951:	callq  4270 <jpeg_alloc_quant_table@plt>
   24956:	mov    %rax,0xc8(%r12,%rbx,8)
   2495e:	mov    0xc8(%r12,%rbx,8),%rbx
   24966:	and    $0xfffffff0,%r13d
   2496a:	mov    %r13,-0x40(%rbp)
   2496e:	lea    -0x1(%r14),%rcx
   24972:	lea    0x1(%r15),%r8
   24976:	mov    -0x30(%rbp),%rax
   2497a:	mov    -0x38(%rbp),%r15
   2497e:	xor    %r14d,%r14d
   24981:	jmp    249e7 <get_dqt+0x287>
   24983:	mov    %r12,%rdi
   24986:	callq  *0x18(%r15)
   2498a:	test   %eax,%eax
   2498c:	je     24a14 <get_dqt+0x2b4>
   24992:	mov    (%r15),%r8
   24995:	mov    0x8(%r15),%rcx
   24999:	jmpq   248d9 <get_dqt+0x179>
   2499e:	test   %r13d,%r13d
   249a1:	jg     24a2d <get_dqt+0x2cd>
   249a7:	test   %rcx,%rcx
   249aa:	jne    249c8 <get_dqt+0x268>
   249ac:	mov    %r12,%rdi
   249af:	mov    %rax,%r12
   249b2:	callq  *0x18(%r15)
   249b6:	test   %eax,%eax
   249b8:	je     24a7c <get_dqt+0x31c>
   249be:	mov    (%r15),%r8
   249c1:	mov    0x8(%r15),%rcx
   249c5:	mov    %r12,%rax
   249c8:	movzbl (%r8),%edx
   249cc:	add    $0xffffffffffffffff,%rcx
   249d0:	add    $0x1,%r8
   249d4:	movslq %r14d,%rsi
   249d7:	movslq (%rax,%rsi,4),%rsi
   249db:	mov    %dx,(%rbx,%rsi,2)
   249df:	add    $0x1,%r14d
   249e3:	mov    -0x58(%rbp),%r12
   249e7:	cmp    $0x3f,%r14d
   249eb:	jle    2499e <get_dqt+0x23e>
   249ed:	mov    (%r12),%rax
   249f1:	movslq 0x7c(%rax),%rax
   249f5:	cmp    $0x1,%eax
   249f8:	jle    24b39 <get_dqt+0x3d9>
   249fe:	mov    %rcx,-0x50(%rbp)
   24a02:	mov    %r8,-0x48(%rbp)
   24a06:	mov    $0x2,%r13d
   24a0c:	xor    %r14d,%r14d
   24a0f:	jmpq   24b23 <get_dqt+0x3c3>
   24a14:	mov    %r13,%rax
   24a17:	mov    -0x20(%rbp),%r14
   24a1b:	mov    -0x18(%rbp),%r13
   24a1f:	mov    -0x10(%rbp),%r12
   24a23:	mov    -0x8(%rbp),%rbx
   24a27:	mov    -0x28(%rbp),%r15
   24a2b:	leaveq 
   24a2c:	retq   
   24a2d:	test   %rcx,%rcx
   24a30:	jne    24a52 <get_dqt+0x2f2>
   24a32:	mov    %rax,%r13
   24a35:	mov    %r12,%rdi
   24a38:	callq  *0x18(%r15)
   24a3c:	test   %eax,%eax
   24a3e:	je     24b57 <get_dqt+0x3f7>
   24a44:	mov    (%r15),%r8
   24a47:	mov    0x8(%r15),%rcx
   24a4b:	mov    %r13,%rax
   24a4e:	mov    -0x40(%rbp),%r13
   24a52:	movzbl (%r8),%edx
   24a56:	add    $0xffffffffffffffff,%rcx
   24a5a:	test   %rcx,%rcx
   24a5d:	je     24b6f <get_dqt+0x40f>
   24a63:	lea    0x1(%r8),%rsi
   24a67:	movzbl (%rsi),%edi
   24a6a:	shl    $0x8,%edx
   24a6d:	add    %edi,%edx
   24a6f:	add    $0xffffffffffffffff,%rcx
   24a73:	lea    0x1(%rsi),%r8
   24a77:	jmpq   249d4 <get_dqt+0x274>
   24a7c:	mov    -0x20(%rbp),%r14
   24a80:	mov    -0x18(%rbp),%r13
   24a84:	mov    -0x10(%rbp),%r12
   24a88:	mov    -0x8(%rbp),%rbx
   24a8c:	xor    %eax,%eax
   24a8e:	mov    -0x28(%rbp),%r15
   24a92:	leaveq 
   24a93:	retq   
   24a94:	movslq %r14d,%rax
   24a97:	movzwl (%rbx,%rax,2),%eax
   24a9b:	mov    (%r12),%rcx
   24a9f:	mov    %eax,0x2c(%rcx)
   24aa2:	lea    0x1(%r14),%eax
   24aa6:	movslq %eax,%rax
   24aa9:	movzwl (%rbx,%rax,2),%eax
   24aad:	mov    %eax,0x30(%rcx)
   24ab0:	lea    0x2(%r14),%eax
   24ab4:	movslq %eax,%rax
   24ab7:	movzwl (%rbx,%rax,2),%eax
   24abb:	mov    %eax,0x34(%rcx)
   24abe:	lea    0x3(%r14),%eax
   24ac2:	movslq %eax,%rax
   24ac5:	movzwl (%rbx,%rax,2),%eax
   24ac9:	mov    %eax,0x38(%rcx)
   24acc:	lea    0x4(%r14),%eax
   24ad0:	movslq %eax,%rax
   24ad3:	movzwl (%rbx,%rax,2),%eax
   24ad7:	mov    %eax,0x3c(%rcx)
   24ada:	lea    0x5(%r14),%eax
   24ade:	movslq %eax,%rax
   24ae1:	movzwl (%rbx,%rax,2),%eax
   24ae5:	mov    %eax,0x40(%rcx)
   24ae8:	lea    0x6(%r14),%eax
   24aec:	movslq %eax,%rax
   24aef:	movzwl (%rbx,%rax,2),%eax
   24af3:	mov    %eax,0x44(%rcx)
   24af6:	lea    0x7(%r14),%eax
   24afa:	movslq %eax,%rax
   24afd:	movzwl (%rbx,%rax,2),%eax
   24b01:	mov    %eax,0x48(%rcx)
   24b04:	mov    (%r12),%rax
   24b08:	movl   $0x5d,0x28(%rax)
   24b0f:	mov    (%r12),%rax
   24b13:	mov    0x8(%rax),%rax
   24b17:	mov    %r12,%rdi
   24b1a:	mov    %r13,%rsi
   24b1d:	callq  *%rax
   24b1f:	add    $0x8,%r14d
   24b23:	cmp    $0x38,%r14d
   24b27:	jle    24a94 <get_dqt+0x334>
   24b2d:	mov    -0x48(%rbp),%r8
   24b31:	mov    -0x50(%rbp),%rcx
   24b35:	mov    -0x40(%rbp),%r13
   24b39:	test   %r13d,%r13d
   24b3c:	jg     24830 <get_dqt+0xd0>
   24b42:	mov    -0x60(%rbp),%rax
   24b46:	add    $0xffffffffffffffbf,%rax
   24b4a:	mov    $0x1,%ebx
   24b4f:	xor    %r13d,%r13d
   24b52:	jmpq   24842 <get_dqt+0xe2>
   24b57:	mov    -0x20(%rbp),%r14
   24b5b:	mov    -0x18(%rbp),%r13
   24b5f:	mov    -0x10(%rbp),%r12
   24b63:	mov    -0x8(%rbp),%rbx
   24b67:	xor    %eax,%eax
   24b69:	mov    -0x28(%rbp),%r15
   24b6d:	leaveq 
   24b6e:	retq   
   24b6f:	mov    %r12,%rdi
   24b72:	mov    %rdx,%r12
   24b75:	mov    %rax,%r13
   24b78:	callq  *0x18(%r15)
   24b7c:	test   %eax,%eax
   24b7e:	je     24b96 <get_dqt+0x436>
   24b80:	mov    (%r15),%rsi
   24b83:	mov    0x8(%r15),%rcx
   24b87:	mov    %r13,%rax
   24b8a:	mov    %r12,%rdx
   24b8d:	mov    -0x40(%rbp),%r13
   24b91:	jmpq   24a67 <get_dqt+0x307>
   24b96:	mov    -0x20(%rbp),%r14
   24b9a:	mov    -0x18(%rbp),%r13
   24b9e:	mov    -0x10(%rbp),%r12
   24ba2:	mov    -0x8(%rbp),%rbx
   24ba6:	xor    %eax,%eax
   24ba8:	mov    -0x28(%rbp),%r15
   24bac:	leaveq 
   24bad:	retq   
   24bae:	xchg   %ax,%ax

0000000000024bb0 <get_dri>:
   24bb0:	push   %rbp
   24bb1:	mov    %rsp,%rbp
   24bb4:	sub    $0x30,%rsp
   24bb8:	mov    %r15,-0x20(%rbp)
   24bbc:	mov    %rdi,-0x30(%rbp)
   24bc0:	mov    0x28(%rdi),%r15
   24bc4:	mov    (%r15),%rcx
   24bc7:	mov    0x8(%r15),%rax
   24bcb:	test   %rax,%rax
   24bce:	je     24cde <get_dri+0x12e>
   24bd4:	movzbl (%rcx),%edx
   24bd7:	add    $0xffffffffffffffff,%rax
   24bdb:	test   %rax,%rax
   24bde:	je     24cee <get_dri+0x13e>
   24be4:	add    $0x1,%rcx
   24be8:	movzbl (%rcx),%esi
   24beb:	shl    $0x8,%edx
   24bee:	mov    %edx,%edx
   24bf0:	add    %rsi,%rdx
   24bf3:	cmp    $0x4,%rdx
   24bf7:	je     24c3b <get_dri+0x8b>
   24bf9:	mov    (%rdi),%rdx
   24bfc:	movl   $0xb,0x28(%rdx)
   24c03:	mov    (%rdi),%rdx
   24c06:	mov    (%rdx),%rdx
   24c09:	mov    %rdi,%rsi
   24c0c:	mov    %r12,-0x10(%rbp)
   24c10:	mov    %r13,-0x18(%rbp)
   24c14:	mov    %r14,-0x28(%rbp)
   24c18:	mov    %rax,%r12
   24c1b:	mov    %rcx,%r13
   24c1e:	mov    %rdi,%r14
   24c21:	mov    %rsi,%rdi
   24c24:	callq  *%rdx
   24c26:	mov    %r12,%rax
   24c29:	mov    %r13,%rcx
   24c2c:	mov    %r14,%rdi
   24c2f:	mov    -0x28(%rbp),%r14
   24c33:	mov    -0x18(%rbp),%r13
   24c37:	mov    -0x10(%rbp),%r12
   24c3b:	lea    -0x1(%rax),%rdx
   24c3f:	test   %rdx,%rdx
   24c42:	je     24d02 <get_dri+0x152>
   24c48:	add    $0x1,%rcx
   24c4c:	movzbl (%rcx),%eax
   24c4f:	add    $0xffffffffffffffff,%rdx
   24c53:	test   %rdx,%rdx
   24c56:	je     24d12 <get_dri+0x162>
   24c5c:	add    $0x1,%rcx
   24c60:	mov    (%rdi),%rsi
   24c63:	movzbl (%rcx),%r8d
   24c67:	movl   $0x52,0x28(%rsi)
   24c6e:	shl    $0x8,%eax
   24c71:	lea    (%r8,%rax,1),%r9d
   24c75:	mov    (%rdi),%rax
   24c78:	mov    %r9d,0x2c(%rax)
   24c7c:	mov    (%rdi),%rax
   24c7f:	mov    0x8(%rax),%rax
   24c83:	mov    $0x1,%esi
   24c88:	mov    %rdi,%r8
   24c8b:	mov    %r12,-0x10(%rbp)
   24c8f:	mov    %r13,-0x18(%rbp)
   24c93:	mov    %r14,-0x30(%rbp)
   24c97:	mov    %rbx,-0x8(%rbp)
   24c9b:	mov    %r9,%rbx
   24c9e:	mov    %rdi,%r12
   24ca1:	mov    %r8,%rdi
   24ca4:	mov    %rdx,%r13
   24ca7:	mov    %rcx,%r14
   24caa:	callq  *%rax
   24cac:	mov    %ebx,0x170(%r12)
   24cb4:	lea    0x1(%r14),%rax
   24cb8:	mov    %rax,(%r15)
   24cbb:	lea    -0x1(%r13),%rax
   24cbf:	mov    %rax,0x8(%r15)
   24cc3:	mov    $0x1,%eax
   24cc8:	mov    -0x8(%rbp),%rbx
   24ccc:	mov    -0x30(%rbp),%r14
   24cd0:	mov    -0x18(%rbp),%r13
   24cd4:	mov    -0x10(%rbp),%r12
   24cd8:	mov    -0x20(%rbp),%r15
   24cdc:	leaveq 
   24cdd:	retq   
   24cde:	callq  *0x18(%r15)
   24ce2:	test   %eax,%eax
   24ce4:	jne    24d26 <get_dri+0x176>
   24ce6:	xor    %eax,%eax
   24ce8:	mov    -0x20(%rbp),%r15
   24cec:	leaveq 
   24ced:	retq   
   24cee:	mov    %rdx,-0x28(%rbp)
   24cf2:	callq  *0x18(%r15)
   24cf6:	test   %eax,%eax
   24cf8:	jne    24d36 <get_dri+0x186>
   24cfa:	xor    %eax,%eax
   24cfc:	mov    -0x20(%rbp),%r15
   24d00:	leaveq 
   24d01:	retq   
   24d02:	callq  *0x18(%r15)
   24d06:	test   %eax,%eax
   24d08:	jne    24d4a <get_dri+0x19a>
   24d0a:	xor    %eax,%eax
   24d0c:	mov    -0x20(%rbp),%r15
   24d10:	leaveq 
   24d11:	retq   
   24d12:	mov    %rax,-0x8(%rbp)
   24d16:	callq  *0x18(%r15)
   24d1a:	test   %eax,%eax
   24d1c:	jne    24d5a <get_dri+0x1aa>
   24d1e:	xor    %eax,%eax
   24d20:	mov    -0x20(%rbp),%r15
   24d24:	leaveq 
   24d25:	retq   
   24d26:	mov    (%r15),%rcx
   24d29:	mov    0x8(%r15),%rax
   24d2d:	mov    -0x30(%rbp),%rdi
   24d31:	jmpq   24bd4 <get_dri+0x24>
   24d36:	mov    (%r15),%rcx
   24d39:	mov    0x8(%r15),%rax
   24d3d:	mov    -0x28(%rbp),%rdx
   24d41:	mov    -0x30(%rbp),%rdi
   24d45:	jmpq   24be8 <get_dri+0x38>
   24d4a:	mov    (%r15),%rcx
   24d4d:	mov    0x8(%r15),%rdx
   24d51:	mov    -0x30(%rbp),%rdi
   24d55:	jmpq   24c4c <get_dri+0x9c>
   24d5a:	mov    (%r15),%rcx
   24d5d:	mov    0x8(%r15),%rdx
   24d61:	mov    -0x8(%rbp),%rax
   24d65:	mov    -0x30(%rbp),%rdi
   24d69:	jmpq   24c60 <get_dri+0xb0>
   24d6e:	xchg   %ax,%ax

0000000000024d70 <examine_app0>:
   24d70:	push   %rbp
   24d71:	mov    %rsp,%rbp
   24d74:	sub    $0x20,%rsp
   24d78:	mov    %edx,%eax
   24d7a:	add    %rcx,%rax
   24d7d:	mov    $0x1,%r8d
   24d83:	cmp    $0xd,%edx
   24d86:	ja     24daf <examine_app0+0x3f>
   24d88:	cmp    $0x5,%edx
   24d8b:	ja     24e45 <examine_app0+0xd5>
   24d91:	mov    (%rdi),%rcx
   24d94:	movl   $0x4d,0x28(%rcx)
   24d9b:	mov    (%rdi),%rcx
   24d9e:	mov    %eax,0x2c(%rcx)
   24da1:	mov    (%rdi),%rax
   24da4:	mov    0x8(%rax),%rax
   24da8:	mov    %r8,%rsi
   24dab:	callq  *%rax
   24dad:	leaveq 
   24dae:	retq   
   24daf:	movzbl (%rsi),%ecx
   24db2:	cmp    $0x4a,%cl
   24db5:	jne    24d88 <examine_app0+0x18>
   24db7:	movzbl 0x1(%rsi),%ecx
   24dbb:	cmp    $0x46,%cl
   24dbe:	jne    24d88 <examine_app0+0x18>
   24dc0:	movzbl 0x2(%rsi),%ecx
   24dc4:	cmp    $0x49,%cl
   24dc7:	jne    24d88 <examine_app0+0x18>
   24dc9:	movzbl 0x3(%rsi),%ecx
   24dcd:	cmp    $0x46,%cl
   24dd0:	jne    24d88 <examine_app0+0x18>
   24dd2:	movzbl 0x4(%rsi),%ecx
   24dd6:	test   %cl,%cl
   24dd8:	jne    24d88 <examine_app0+0x18>
   24dda:	movl   $0x1,0x174(%rdi)
   24de4:	movzbl 0x5(%rsi),%edx
   24de8:	mov    %dl,0x178(%rdi)
   24dee:	movzbl 0x6(%rsi),%ecx
   24df2:	mov    %cl,0x179(%rdi)
   24df8:	movzbl 0x7(%rsi),%ecx
   24dfc:	mov    %cl,0x17a(%rdi)
   24e02:	movzbl 0x9(%rsi),%r9d
   24e07:	movzbl 0x8(%rsi),%ecx
   24e0b:	shl    $0x8,%ecx
   24e0e:	add    %r9d,%ecx
   24e11:	mov    %cx,0x17c(%rdi)
   24e18:	movzbl 0xb(%rsi),%r9d
   24e1d:	movzbl 0xa(%rsi),%ecx
   24e21:	shl    $0x8,%ecx
   24e24:	add    %r9d,%ecx
   24e27:	mov    %cx,0x17e(%rdi)
   24e2e:	cmp    $0x1,%dl
   24e31:	jne    24ec1 <examine_app0+0x151>
   24e37:	mov    %r8,%rcx
   24e3a:	mov    %rsi,%r8
   24e3d:	mov    %rcx,%rsi
   24e40:	jmpq   24f2d <examine_app0+0x1bd>
   24e45:	movzbl (%rsi),%ecx
   24e48:	cmp    $0x4a,%cl
   24e4b:	jne    24d91 <examine_app0+0x21>
   24e51:	movzbl 0x1(%rsi),%ecx
   24e55:	cmp    $0x46,%cl
   24e58:	jne    24d91 <examine_app0+0x21>
   24e5e:	movzbl 0x2(%rsi),%ecx
   24e62:	cmp    $0x58,%cl
   24e65:	jne    24d91 <examine_app0+0x21>
   24e6b:	movzbl 0x3(%rsi),%ecx
   24e6f:	cmp    $0x58,%cl
   24e72:	jne    24d91 <examine_app0+0x21>
   24e78:	movzbl 0x4(%rsi),%ecx
   24e7c:	test   %cl,%cl
   24e7e:	jne    24d91 <examine_app0+0x21>
   24e84:	movzbl 0x5(%rsi),%ecx
   24e88:	cmp    $0x10,%cl
   24e8b:	jbe    24ffa <examine_app0+0x28a>
   24e91:	cmp    $0x11,%cl
   24e94:	je     25027 <examine_app0+0x2b7>
   24e9a:	cmp    $0x13,%cl
   24e9d:	jne    24fff <examine_app0+0x28f>
   24ea3:	mov    (%rdi),%rcx
   24ea6:	movl   $0x6e,0x28(%rcx)
   24ead:	mov    (%rdi),%rcx
   24eb0:	mov    %eax,0x2c(%rcx)
   24eb3:	mov    (%rdi),%rax
   24eb6:	mov    0x8(%rax),%rax
   24eba:	mov    %r8,%rsi
   24ebd:	callq  *%rax
   24ebf:	leaveq 
   24ec0:	retq   
   24ec1:	mov    (%rdi),%rcx
   24ec4:	movl   $0x77,0x28(%rcx)
   24ecb:	movzbl 0x178(%rdi),%ecx
   24ed2:	mov    (%rdi),%rdx
   24ed5:	mov    %ecx,0x2c(%rdx)
   24ed8:	movzbl 0x179(%rdi),%edx
   24edf:	mov    (%rdi),%rcx
   24ee2:	mov    %edx,0x30(%rcx)
   24ee5:	mov    (%rdi),%rcx
   24ee8:	mov    0x8(%rcx),%rcx
   24eec:	mov    $0xffffffffffffffff,%r8
   24ef3:	mov    %rdi,%rdx
   24ef6:	mov    %r13,-0x8(%rbp)
   24efa:	mov    %r14,-0x10(%rbp)
   24efe:	mov    %r15,-0x18(%rbp)
   24f02:	mov    %rsi,%r13
   24f05:	mov    %r8,%rsi
   24f08:	mov    %rax,%r14
   24f0b:	mov    %rdi,%r15
   24f0e:	mov    %rdx,%rdi
   24f11:	callq  *%rcx
   24f13:	mov    %r14,%rax
   24f16:	mov    %r15,%rdi
   24f19:	mov    %r13,%r8
   24f1c:	mov    $0x1,%esi
   24f21:	mov    -0x18(%rbp),%r15
   24f25:	mov    -0x10(%rbp),%r14
   24f29:	mov    -0x8(%rbp),%r13
   24f2d:	movzbl 0x178(%rdi),%ecx
   24f34:	mov    (%rdi),%rdx
   24f37:	mov    %ecx,0x2c(%rdx)
   24f3a:	movzbl 0x179(%rdi),%ecx
   24f41:	mov    %ecx,0x30(%rdx)
   24f44:	movzwl 0x17c(%rdi),%ecx
   24f4b:	mov    %ecx,0x34(%rdx)
   24f4e:	movzwl 0x17e(%rdi),%ecx
   24f55:	mov    %ecx,0x38(%rdx)
   24f58:	movzbl 0x17a(%rdi),%ecx
   24f5f:	mov    %ecx,0x3c(%rdx)
   24f62:	mov    (%rdi),%rcx
   24f65:	movl   $0x57,0x28(%rcx)
   24f6c:	mov    (%rdi),%rcx
   24f6f:	mov    0x8(%rcx),%rcx
   24f73:	mov    %rdi,%rdx
   24f76:	mov    %r13,-0x8(%rbp)
   24f7a:	mov    %r14,-0x10(%rbp)
   24f7e:	mov    %r15,-0x18(%rbp)
   24f82:	mov    %r8,%r13
   24f85:	mov    %rax,%r14
   24f88:	mov    %rdi,%r15
   24f8b:	mov    %rdx,%rdi
   24f8e:	callq  *%rcx
   24f90:	movzbl 0xd(%r13),%eax
   24f95:	movzbl 0xc(%r13),%ecx
   24f9a:	or     %cl,%al
   24f9c:	test   %al,%al
   24f9e:	je     24fd1 <examine_app0+0x261>
   24fa0:	mov    (%r15),%rax
   24fa3:	movl   $0x5a,0x28(%rax)
   24faa:	movzbl 0xc(%r13),%ecx
   24faf:	mov    (%r15),%rax
   24fb2:	mov    %ecx,0x2c(%rax)
   24fb5:	movzbl 0xd(%r13),%ecx
   24fba:	mov    (%r15),%rax
   24fbd:	mov    %ecx,0x30(%rax)
   24fc0:	mov    (%r15),%rax
   24fc3:	mov    0x8(%rax),%rax
   24fc7:	mov    %r15,%rdi
   24fca:	mov    $0x1,%esi
   24fcf:	callq  *%rax
   24fd1:	movzbl 0xd(%r13),%eax
   24fd6:	movzbl 0xc(%r13),%ecx
   24fdb:	imul   %rcx,%rax
   24fdf:	lea    (%rax,%rax,2),%rax
   24fe3:	lea    -0xe(%r14),%rcx
   24fe7:	cmp    %rax,%rcx
   24fea:	jne    25045 <examine_app0+0x2d5>
   24fec:	mov    -0x18(%rbp),%r15
   24ff0:	mov    -0x10(%rbp),%r14
   24ff4:	mov    -0x8(%rbp),%r13
   24ff8:	leaveq 
   24ff9:	retq   
   24ffa:	cmp    $0x10,%cl
   24ffd:	je     25074 <examine_app0+0x304>
   24fff:	mov    (%rdi),%rcx
   25002:	movl   $0x59,0x28(%rcx)
   25009:	movzbl 0x5(%rsi),%edx
   2500d:	mov    (%rdi),%rcx
   25010:	mov    %edx,0x2c(%rcx)
   25013:	mov    (%rdi),%rcx
   25016:	mov    %eax,0x30(%rcx)
   25019:	mov    (%rdi),%rax
   2501c:	mov    0x8(%rax),%rax
   25020:	mov    %r8,%rsi
   25023:	callq  *%rax
   25025:	leaveq 
   25026:	retq   
   25027:	mov    (%rdi),%rcx
   2502a:	movl   $0x6d,0x28(%rcx)
   25031:	mov    (%rdi),%rcx
   25034:	mov    %eax,0x2c(%rcx)
   25037:	mov    (%rdi),%rax
   2503a:	mov    0x8(%rax),%rax
   2503e:	mov    %r8,%rsi
   25041:	callq  *%rax
   25043:	leaveq 
   25044:	retq   
   25045:	mov    (%r15),%rax
   25048:	movl   $0x58,0x28(%rax)
   2504f:	mov    (%r15),%rax
   25052:	mov    %ecx,0x2c(%rax)
   25055:	mov    (%r15),%rax
   25058:	mov    0x8(%rax),%rax
   2505c:	mov    %r15,%rdi
   2505f:	mov    $0x1,%esi
   25064:	callq  *%rax
   25066:	mov    -0x18(%rbp),%r15
   2506a:	mov    -0x10(%rbp),%r14
   2506e:	mov    -0x8(%rbp),%r13
   25072:	leaveq 
   25073:	retq   
   25074:	mov    (%rdi),%rcx
   25077:	movl   $0x6c,0x28(%rcx)
   2507e:	mov    (%rdi),%rcx
   25081:	mov    %eax,0x2c(%rcx)
   25084:	mov    (%rdi),%rax
   25087:	mov    0x8(%rax),%rax
   2508b:	mov    %r8,%rsi
   2508e:	callq  *%rax
   25090:	leaveq 
   25091:	retq   
   25092:	data16 nopw %cs:0x0(%rax,%rax,1)
   2509d:	nopl   (%rax)

00000000000250a0 <examine_app14>:
   250a0:	push   %rbp
   250a1:	mov    %rsp,%rbp
   250a4:	sub    $0x10,%rsp
   250a8:	mov    $0x1,%r10d
   250ae:	cmp    $0xb,%edx
   250b1:	ja     250d3 <examine_app14+0x33>
   250b3:	mov    (%rdi),%rax
   250b6:	movl   $0x4e,0x28(%rax)
   250bd:	add    %edx,%ecx
   250bf:	mov    (%rdi),%rax
   250c2:	mov    %ecx,0x2c(%rax)
   250c5:	mov    (%rdi),%rax
   250c8:	mov    0x8(%rax),%rax
   250cc:	mov    %r10,%rsi
   250cf:	callq  *%rax
   250d1:	leaveq 
   250d2:	retq   
   250d3:	movzbl (%rsi),%eax
   250d6:	cmp    $0x41,%al
   250d8:	jne    250b3 <examine_app14+0x13>
   250da:	movzbl 0x1(%rsi),%eax
   250de:	cmp    $0x64,%al
   250e0:	jne    250b3 <examine_app14+0x13>
   250e2:	movzbl 0x2(%rsi),%eax
   250e6:	cmp    $0x6f,%al
   250e8:	jne    250b3 <examine_app14+0x13>
   250ea:	movzbl 0x3(%rsi),%eax
   250ee:	cmp    $0x62,%al
   250f0:	jne    250b3 <examine_app14+0x13>
   250f2:	movzbl 0x4(%rsi),%eax
   250f6:	cmp    $0x65,%al
   250f8:	jne    250b3 <examine_app14+0x13>
   250fa:	movzbl 0x6(%rsi),%ecx
   250fe:	movzbl 0x5(%rsi),%eax
   25102:	shl    $0x8,%eax
   25105:	lea    (%rcx,%rax,1),%r9d
   25109:	mov    (%rdi),%r8
   2510c:	movzbl 0x8(%rsi),%ecx
   25110:	movzbl 0x7(%rsi),%eax
   25114:	shl    $0x8,%eax
   25117:	lea    (%rcx,%rax,1),%edx
   2511a:	movzbl 0xa(%rsi),%ecx
   2511e:	movzbl 0x9(%rsi),%eax
   25122:	shl    $0x8,%eax
   25125:	add    %ecx,%eax
   25127:	movzbl 0xb(%rsi),%ecx
   2512b:	mov    %r9d,0x2c(%r8)
   2512f:	mov    %edx,0x30(%r8)
   25133:	mov    %eax,0x34(%r8)
   25137:	mov    %ecx,0x38(%r8)
   2513b:	mov    (%rdi),%rax
   2513e:	movl   $0x4c,0x28(%rax)
   25145:	mov    (%rdi),%rax
   25148:	mov    0x8(%rax),%rax
   2514c:	mov    %rdi,%rdx
   2514f:	mov    %r14,-0x8(%rbp)
   25153:	mov    %r15,-0x10(%rbp)
   25157:	mov    %r10,%rsi
   2515a:	mov    %rcx,%r14
   2515d:	mov    %rdi,%r15
   25160:	mov    %rdx,%rdi
   25163:	callq  *%rax
   25165:	movl   $0x1,0x180(%r15)
   25170:	mov    %r14b,0x184(%r15)
   25177:	mov    -0x10(%rbp),%r15
   2517b:	mov    -0x8(%rbp),%r14
   2517f:	leaveq 
   25180:	retq   
   25181:	data16 nopw %cs:0x0(%rax,%rax,1)
   2518c:	nopl   0x0(%rax)

0000000000025190 <get_interesting_appn>:
   25190:	push   %rbp
   25191:	mov    %rsp,%rbp
   25194:	sub    $0x40,%rsp
   25198:	mov    %r15,-0x20(%rbp)
   2519c:	mov    0x28(%rdi),%r15
   251a0:	mov    (%r15),%rax
   251a3:	xor    %ecx,%ecx
   251a5:	mov    0x8(%r15),%r8
   251a9:	test   %r8,%r8
   251ac:	je     25210 <get_interesting_appn+0x80>
   251ae:	mov    %rbx,%rsi
   251b1:	mov    %rdi,%rbx
   251b4:	mov    %r14,%rdi
   251b7:	mov    %r12,%r14
   251ba:	mov    %rcx,%r12
   251bd:	mov    %rdi,%rcx
   251c0:	movzbl (%rax),%edx
   251c3:	add    $0xffffffffffffffff,%r8
   251c7:	test   %r8,%r8
   251ca:	je     25240 <get_interesting_appn+0xb0>
   251cc:	lea    0x1(%rax),%rdi
   251d0:	mov    %r13,%r9
   251d3:	lea    0x1(%rdi),%rax
   251d7:	add    $0xffffffffffffffff,%r8
   251db:	movzbl (%rdi),%edi
   251de:	shl    $0x8,%edx
   251e1:	mov    %edx,%edx
   251e3:	lea    -0x2(%rdi,%rdx,1),%r13
   251e8:	mov    %r13,-0x30(%rbp)
   251ec:	cmp    $0xd,%r13
   251f0:	jle    2526e <get_interesting_appn+0xde>
   251f2:	mov    $0xe,%r13d
   251f8:	mov    %rsi,-0x8(%rbp)
   251fc:	mov    %r14,-0x10(%rbp)
   25200:	mov    %r9,-0x18(%rbp)
   25204:	mov    %rcx,-0x28(%rbp)
   25208:	mov    %r12,%r14
   2520b:	jmpq   252ae <get_interesting_appn+0x11e>
   25210:	mov    %rdi,%rax
   25213:	mov    %rdi,-0x30(%rbp)
   25217:	mov    %rax,%rdi
   2521a:	mov    %r14,%rax
   2521d:	mov    %r12,%r14
   25220:	mov    %rax,%r12
   25223:	callq  *0x18(%r15)
   25227:	test   %eax,%eax
   25229:	jne    2530a <get_interesting_appn+0x17a>
   2522f:	mov    %r14,%rcx
   25232:	mov    %r12,%r14
   25235:	mov    %rcx,%r12
   25238:	xor    %eax,%eax
   2523a:	mov    -0x20(%rbp),%r15
   2523e:	leaveq 
   2523f:	retq   
   25240:	mov    %rbx,%rdi
   25243:	mov    %rbx,-0x28(%rbp)
   25247:	mov    %rdx,-0x30(%rbp)
   2524b:	mov    %rsi,%rbx
   2524e:	mov    %rcx,%r12
   25251:	callq  *0x18(%r15)
   25255:	test   %eax,%eax
   25257:	jne    25323 <get_interesting_appn+0x193>
   2525d:	mov    %r14,%rcx
   25260:	mov    %r12,%r14
   25263:	mov    %rcx,%r12
   25266:	xor    %eax,%eax
   25268:	mov    -0x20(%rbp),%r15
   2526c:	leaveq 
   2526d:	retq   
   2526e:	test   %r13,%r13
   25271:	jg     25343 <get_interesting_appn+0x1b3>
   25277:	mov    %rsi,-0x8(%rbp)
   2527b:	mov    %r14,-0x10(%rbp)
   2527f:	mov    %r9,-0x18(%rbp)
   25283:	mov    %rcx,-0x28(%rbp)
   25287:	mov    %r12,%r13
   2528a:	mov    %r13,%r14
   2528d:	jmp    252ae <get_interesting_appn+0x11e>
   2528f:	test   %r8,%r8
   25292:	je     2535b <get_interesting_appn+0x1cb>
   25298:	movzbl (%rax),%edx
   2529b:	mov    %r14d,%ecx
   2529e:	mov    %dl,-0x3e(%rbp,%rcx,1)
   252a2:	add    $0x1,%rax
   252a6:	add    $0xffffffffffffffff,%r8
   252aa:	add    $0x1,%r14d
   252ae:	cmp    %r13d,%r14d
   252b1:	jb     2528f <get_interesting_appn+0xff>
   252b3:	mov    %r13d,%ecx
   252b6:	mov    -0x30(%rbp),%r12
   252ba:	sub    %rcx,%r12
   252bd:	lea    -0x3e(%rbp),%rsi
   252c1:	movslq 0x21c(%rbx),%rcx
   252c8:	cmp    $0xe0,%ecx
   252ce:	je     25372 <get_interesting_appn+0x1e2>
   252d4:	cmp    $0xee,%ecx
   252da:	je     253ad <get_interesting_appn+0x21d>
   252e0:	mov    (%rbx),%rcx
   252e3:	movl   $0x44,0x28(%rcx)
   252ea:	movslq 0x21c(%rbx),%rdx
   252f1:	mov    (%rbx),%rcx
   252f4:	mov    %edx,0x2c(%rcx)
   252f7:	mov    (%rbx),%rcx
   252fa:	mov    (%rcx),%rcx
   252fd:	mov    %r8,%r13
   25300:	mov    %rax,%r14
   25303:	mov    %rbx,%rdi
   25306:	callq  *%rcx
   25308:	jmp    25386 <get_interesting_appn+0x1f6>
   2530a:	mov    (%r15),%rax
   2530d:	mov    0x8(%r15),%r8
   25311:	mov    %r12,%rcx
   25314:	mov    %rbx,%rsi
   25317:	xor    %r12d,%r12d
   2531a:	mov    -0x30(%rbp),%rbx
   2531e:	jmpq   251c0 <get_interesting_appn+0x30>
   25323:	mov    (%r15),%rdi
   25326:	mov    0x8(%r15),%r8
   2532a:	mov    %r12,%rcx
   2532d:	mov    %rbx,%rsi
   25330:	mov    %r13,%r9
   25333:	mov    -0x30(%rbp),%rdx
   25337:	xor    %r12d,%r12d
   2533a:	mov    -0x28(%rbp),%rbx
   2533e:	jmpq   251d3 <get_interesting_appn+0x43>
   25343:	mov    %rsi,-0x8(%rbp)
   25347:	mov    %r14,-0x10(%rbp)
   2534b:	mov    %r9,-0x18(%rbp)
   2534f:	mov    %rcx,-0x28(%rbp)
   25353:	mov    %r12,%r14
   25356:	jmpq   252ae <get_interesting_appn+0x11e>
   2535b:	mov    %rbx,%rdi
   2535e:	callq  *0x18(%r15)
   25362:	test   %eax,%eax
   25364:	je     253c3 <get_interesting_appn+0x233>
   25366:	mov    (%r15),%rax
   25369:	mov    0x8(%r15),%r8
   2536d:	jmpq   25298 <get_interesting_appn+0x108>
   25372:	mov    %r13,%rdx
   25375:	mov    %r8,%r13
   25378:	mov    %rax,%r14
   2537b:	mov    %rbx,%rdi
   2537e:	mov    %r12,%rcx
   25381:	callq  24d70 <examine_app0>
   25386:	mov    %r14,(%r15)
   25389:	mov    %r13,0x8(%r15)
   2538d:	mov    $0x1,%eax
   25392:	test   %r12,%r12
   25395:	jg     253dc <get_interesting_appn+0x24c>
   25397:	mov    -0x28(%rbp),%r14
   2539b:	mov    -0x18(%rbp),%r13
   2539f:	mov    -0x10(%rbp),%r12
   253a3:	mov    -0x8(%rbp),%rbx
   253a7:	mov    -0x20(%rbp),%r15
   253ab:	leaveq 
   253ac:	retq   
   253ad:	mov    %r13,%rdx
   253b0:	mov    %r8,%r13
   253b3:	mov    %rax,%r14
   253b6:	mov    %rbx,%rdi
   253b9:	mov    %r12,%rcx
   253bc:	callq  250a0 <examine_app14>
   253c1:	jmp    25386 <get_interesting_appn+0x1f6>
   253c3:	mov    %r12,%rax
   253c6:	mov    -0x28(%rbp),%r14
   253ca:	mov    -0x18(%rbp),%r13
   253ce:	mov    -0x10(%rbp),%r12
   253d2:	mov    -0x8(%rbp),%rbx
   253d6:	mov    -0x20(%rbp),%r15
   253da:	leaveq 
   253db:	retq   
   253dc:	mov    0x28(%rbx),%rcx
   253e0:	mov    0x20(%rcx),%rcx
   253e4:	mov    %r12,%rsi
   253e7:	mov    %rbx,%rdi
   253ea:	mov    %rax,%r15
   253ed:	callq  *%rcx
   253ef:	mov    %r15,%rax
   253f2:	mov    -0x28(%rbp),%r14
   253f6:	mov    -0x18(%rbp),%r13
   253fa:	mov    -0x10(%rbp),%r12
   253fe:	mov    -0x8(%rbp),%rbx
   25402:	mov    -0x20(%rbp),%r15
   25406:	leaveq 
   25407:	retq   
   25408:	nopl   0x0(%rax,%rax,1)

0000000000025410 <save_marker>:
   25410:	push   %rbp
   25411:	mov    %rsp,%rbp
   25414:	sub    $0x60,%rsp
   25418:	mov    %r15,-0x28(%rbp)
   2541c:	mov    %rdi,-0x58(%rbp)
   25420:	mov    0x28(%rdi),%r10
   25424:	mov    (%r10),%rax
   25427:	mov    0x8(%r10),%r8
   2542b:	xor    %r15d,%r15d
   2542e:	mov    %r15,-0x40(%rbp)
   25432:	mov    $0x1,%esi
   25437:	mov    0x248(%rdi),%r9
   2543e:	mov    0xf8(%r9),%rcx
   25445:	mov    %rcx,-0x38(%rbp)
   25449:	test   %rcx,%rcx
   2544c:	je     25480 <save_marker+0x70>
   2544e:	mov    0x10(%rcx),%edx
   25451:	mov    0x100(%r9),%esi
   25458:	mov    %rsi,%r15
   2545b:	add    0x18(%rcx),%r15
   2545f:	mov    %r14,-0x20(%rbp)
   25463:	mov    %r13,-0x18(%rbp)
   25467:	mov    %rbx,-0x8(%rbp)
   2546b:	mov    %r12,-0x10(%rbp)
   2546f:	mov    %rsi,%rbx
   25472:	mov    %r10,%r12
   25475:	mov    %r9,%r13
   25478:	mov    %rdx,%r14
   2547b:	jmpq   25520 <save_marker+0x110>
   25480:	test   %r8,%r8
   25483:	je     2553f <save_marker+0x12f>
   25489:	mov    %r14,%rcx
   2548c:	mov    %rbx,%r14
   2548f:	mov    %r13,%rbx
   25492:	mov    %r9,%r13
   25495:	mov    %r12,%r9
   25498:	mov    %r10,%r12
   2549b:	movzbl (%rax),%edx
   2549e:	add    $0xffffffffffffffff,%r8
   254a2:	test   %r8,%r8
   254a5:	je     25579 <save_marker+0x169>
   254ab:	lea    0x1(%rax),%r10
   254af:	mov    %r14,%r11
   254b2:	lea    0x1(%r10),%rax
   254b6:	add    $0xffffffffffffffff,%r8
   254ba:	movzbl (%r10),%r10d
   254be:	shl    $0x8,%edx
   254c1:	mov    %edx,%edx
   254c3:	lea    -0x2(%r10,%rdx,1),%r10
   254c8:	mov    %r10,-0x30(%rbp)
   254cc:	test   %r10,%r10
   254cf:	jns    255ab <save_marker+0x19b>
   254d5:	mov    %rcx,-0x20(%rbp)
   254d9:	mov    %rbx,-0x18(%rbp)
   254dd:	mov    %r11,-0x8(%rbp)
   254e1:	mov    %r9,-0x10(%rbp)
   254e5:	mov    %r15,%rbx
   254e8:	mov    %rbx,%r14
   254eb:	pushq  -0x30(%rbp)
   254ee:	pushq  -0x40(%rbp)
   254f1:	popq   -0x38(%rbp)
   254f4:	popq   -0x40(%rbp)
   254f7:	jmp    25520 <save_marker+0x110>
   254f9:	test   %r8,%r8
   254fc:	je     255d4 <save_marker+0x1c4>
   25502:	movzbl (%rax),%ecx
   25505:	mov    %cl,(%r15)
   25508:	add    $0x1,%ebx
   2550b:	add    $0x1,%rax
   2550f:	add    $0xffffffffffffffff,%r8
   25513:	add    $0x1,%r15
   25517:	cmp    %r14d,%ebx
   2551a:	jb     254f9 <save_marker+0xe9>
   2551c:	mov    -0x58(%rbp),%rdi
   25520:	cmp    %r14d,%ebx
   25523:	jb     255e0 <save_marker+0x1d0>
   25529:	mov    -0x38(%rbp),%rsi
   2552d:	test   %rsi,%rsi
   25530:	jne    25614 <save_marker+0x204>
   25536:	mov    -0x40(%rbp),%rbx
   2553a:	jmpq   25643 <save_marker+0x233>
   2553f:	mov    %r9,-0x50(%rbp)
   25543:	mov    %r12,%r15
   25546:	mov    %r10,%r12
   25549:	mov    %r13,%r10
   2554c:	mov    %r14,%r13
   2554f:	mov    %rbx,%r14
   25552:	mov    %r10,%rbx
   25555:	callq  *0x18(%r12)
   2555a:	test   %eax,%eax
   2555c:	jne    256aa <save_marker+0x29a>
   25562:	mov    %r15,%r12
   25565:	mov    %r14,%r15
   25568:	mov    %r13,%r14
   2556b:	mov    %rbx,%r13
   2556e:	mov    %r15,%rbx
   25571:	xor    %eax,%eax
   25573:	mov    -0x28(%rbp),%r15
   25577:	leaveq 
   25578:	retq   
   25579:	mov    %r13,-0x48(%rbp)
   2557d:	mov    %rdx,-0x50(%rbp)
   25581:	mov    %rcx,%r13
   25584:	mov    %r9,%r15
   25587:	callq  *0x18(%r12)
   2558c:	test   %eax,%eax
   2558e:	jne    256ce <save_marker+0x2be>
   25594:	mov    %r15,%r12
   25597:	mov    %r14,%r15
   2559a:	mov    %r13,%r14
   2559d:	mov    %rbx,%r13
   255a0:	mov    %r15,%rbx
   255a3:	xor    %eax,%eax
   255a5:	mov    -0x28(%rbp),%r15
   255a9:	leaveq 
   255aa:	retq   
   255ab:	movslq 0x21c(%rdi),%rdx
   255b2:	cmp    $0xfe,%edx
   255b8:	je     256f9 <save_marker+0x2e9>
   255be:	add    $0xffffff20,%edx
   255c4:	movslq %edx,%rdx
   255c7:	mov    0xb4(%r13,%rdx,4),%r14d
   255cf:	jmpq   25700 <save_marker+0x2f0>
   255d4:	xor    %r8d,%r8d
   255d7:	mov    -0x58(%rbp),%rdi
   255db:	jmpq   25520 <save_marker+0x110>
   255e0:	mov    %rax,(%r12)
   255e4:	mov    %r8,0x8(%r12)
   255e9:	mov    %ebx,0x100(%r13)
   255f0:	test   %r8,%r8
   255f3:	jne    25517 <save_marker+0x107>
   255f9:	callq  *0x18(%r12)
   255fe:	test   %eax,%eax
   25600:	je     25795 <save_marker+0x385>
   25606:	mov    (%r12),%rax
   2560a:	mov    0x8(%r12),%r8
   2560f:	jmpq   25517 <save_marker+0x107>
   25614:	mov    0x190(%rdi),%rcx
   2561b:	test   %rcx,%rcx
   2561e:	jne    2562c <save_marker+0x21c>
   25620:	mov    %rsi,0x190(%rdi)
   25627:	jmp    25637 <save_marker+0x227>
   25629:	mov    %rdx,%rcx
   2562c:	mov    (%rcx),%rdx
   2562f:	test   %rdx,%rdx
   25632:	jne    25629 <save_marker+0x219>
   25634:	mov    %rsi,(%rcx)
   25637:	mov    0x18(%rsi),%r15
   2563b:	mov    0xc(%rsi),%ecx
   2563e:	sub    %r14d,%ecx
   25641:	mov    %ecx,%ebx
   25643:	movq   $0x0,0xf8(%r13)
   2564e:	movslq 0x21c(%rdi),%rcx
   25655:	cmp    $0xe0,%ecx
   2565b:	je     257ad <save_marker+0x39d>
   25661:	cmp    $0xee,%ecx
   25667:	je     257ed <save_marker+0x3dd>
   2566d:	mov    (%rdi),%rcx
   25670:	movl   $0x5b,0x28(%rcx)
   25677:	movslq 0x21c(%rdi),%rdx
   2567e:	mov    (%rdi),%rcx
   25681:	mov    %edx,0x2c(%rcx)
   25684:	lea    (%rbx,%r14,1),%edx
   25688:	mov    (%rdi),%rcx
   2568b:	mov    %edx,0x30(%rcx)
   2568e:	mov    (%rdi),%rcx
   25691:	mov    0x8(%rcx),%rcx
   25695:	mov    %rax,%r14
   25698:	mov    %r8,%r15
   2569b:	mov    %rdi,%r13
   2569e:	mov    $0x1,%esi
   256a3:	callq  *%rcx
   256a5:	jmpq   257c4 <save_marker+0x3b4>
   256aa:	mov    (%r12),%rax
   256ae:	mov    0x8(%r12),%r8
   256b3:	mov    %r13,%rcx
   256b6:	mov    %r15,%r9
   256b9:	xor    %r15d,%r15d
   256bc:	mov    -0x50(%rbp),%r13
   256c0:	mov    -0x58(%rbp),%rdi
   256c4:	mov    $0x1,%esi
   256c9:	jmpq   2549b <save_marker+0x8b>
   256ce:	mov    (%r12),%r10
   256d2:	mov    0x8(%r12),%r8
   256d7:	mov    %r13,%rcx
   256da:	mov    %r15,%r9
   256dd:	mov    %r14,%r11
   256e0:	mov    -0x50(%rbp),%rdx
   256e4:	xor    %r15d,%r15d
   256e7:	mov    -0x48(%rbp),%r13
   256eb:	mov    -0x58(%rbp),%rdi
   256ef:	mov    $0x1,%esi
   256f4:	jmpq   254b2 <save_marker+0xa2>
   256f9:	mov    0xb0(%r13),%r14d
   25700:	cmp    %r10d,%r14d
   25703:	jbe    25708 <save_marker+0x2f8>
   25705:	mov    %r10,%r14
   25708:	mov    0x8(%rdi),%rdx
   2570c:	mov    0x8(%rdx),%r15
   25710:	mov    %rcx,-0x20(%rbp)
   25714:	mov    %r14d,%ecx
   25717:	lea    0x20(%rcx),%rdx
   2571b:	mov    %rbx,-0x18(%rbp)
   2571f:	mov    %rdi,%rcx
   25722:	mov    %r8,-0x48(%rbp)
   25726:	mov    %r12,-0x40(%rbp)
   2572a:	mov    %r11,-0x8(%rbp)
   2572e:	mov    %r9,-0x10(%rbp)
   25732:	mov    %rdi,%rbx
   25735:	mov    %rcx,%rdi
   25738:	mov    %rax,%r12
   2573b:	mov    %r15,%rax
   2573e:	mov    %r10,%r15
   25741:	callq  *%rax
   25743:	mov    %rax,-0x38(%rbp)
   25747:	movq   $0x0,(%rax)
   2574e:	movzbl 0x21c(%rbx),%ecx
   25755:	mov    %cl,0x8(%rax)
   25758:	mov    %r15d,0xc(%rax)
   2575c:	mov    %r14d,0x10(%rax)
   25760:	lea    0x20(%rax),%r15
   25764:	mov    %r15,0x18(%rax)
   25768:	mov    %rax,0xf8(%r13)
   2576f:	movl   $0x0,0x100(%r13)
   2577a:	mov    %r12,%rax
   2577d:	mov    %rbx,%rdi
   25780:	mov    -0x40(%rbp),%r12
   25784:	mov    -0x48(%rbp),%r8
   25788:	xor    %ebx,%ebx
   2578a:	pushq  -0x30(%rbp)
   2578d:	popq   -0x40(%rbp)
   25790:	jmpq   25520 <save_marker+0x110>
   25795:	mov    -0x10(%rbp),%r12
   25799:	mov    -0x8(%rbp),%rbx
   2579d:	mov    -0x18(%rbp),%r13
   257a1:	mov    -0x20(%rbp),%r14
   257a5:	xor    %eax,%eax
   257a7:	mov    -0x28(%rbp),%r15
   257ab:	leaveq 
   257ac:	retq   
   257ad:	mov    %r14,%rdx
   257b0:	mov    %rax,%r14
   257b3:	mov    %r15,%rsi
   257b6:	mov    %r8,%r15
   257b9:	mov    %rdi,%r13
   257bc:	mov    %rbx,%rcx
   257bf:	callq  24d70 <examine_app0>
   257c4:	mov    %r14,(%r12)
   257c8:	mov    %r15,0x8(%r12)
   257cd:	test   %rbx,%rbx
   257d0:	jg     25806 <save_marker+0x3f6>
   257d2:	mov    -0x10(%rbp),%r12
   257d6:	mov    -0x8(%rbp),%rbx
   257da:	mov    -0x18(%rbp),%r13
   257de:	mov    -0x20(%rbp),%r14
   257e2:	mov    -0x28(%rbp),%r15
   257e6:	mov    $0x1,%eax
   257eb:	leaveq 
   257ec:	retq   
   257ed:	mov    %r14,%rdx
   257f0:	mov    %rax,%r14
   257f3:	mov    %r15,%rsi
   257f6:	mov    %r8,%r15
   257f9:	mov    %rdi,%r13
   257fc:	mov    %rbx,%rcx
   257ff:	callq  250a0 <examine_app14>
   25804:	jmp    257c4 <save_marker+0x3b4>
   25806:	mov    0x28(%r13),%rax
   2580a:	mov    0x20(%rax),%rax
   2580e:	mov    %rbx,%rsi
   25811:	mov    %r13,%rdi
   25814:	callq  *%rax
   25816:	mov    -0x10(%rbp),%r12
   2581a:	mov    -0x8(%rbp),%rbx
   2581e:	mov    -0x18(%rbp),%r13
   25822:	mov    -0x20(%rbp),%r14
   25826:	mov    -0x28(%rbp),%r15
   2582a:	mov    $0x1,%eax
   2582f:	leaveq 
   25830:	retq   
   25831:	data16 nopw %cs:0x0(%rax,%rax,1)
   2583c:	nopl   0x0(%rax)

0000000000025840 <skip_variable>:
   25840:	push   %rbp
   25841:	mov    %rsp,%rbp
   25844:	sub    $0x30,%rsp
   25848:	mov    %r15,-0x18(%rbp)
   2584c:	mov    %rdi,-0x28(%rbp)
   25850:	mov    0x28(%rdi),%r15
   25854:	mov    (%r15),%rcx
   25857:	mov    0x8(%r15),%rdx
   2585b:	test   %rdx,%rdx
   2585e:	je     258f3 <skip_variable+0xb3>
   25864:	movzbl (%rcx),%eax
   25867:	add    $0xffffffffffffffff,%rdx
   2586b:	test   %rdx,%rdx
   2586e:	je     25903 <skip_variable+0xc3>
   25874:	add    $0x1,%rcx
   25878:	mov    (%rdi),%rsi
   2587b:	movzbl (%rcx),%r9d
   2587f:	movl   $0x5b,0x28(%rsi)
   25886:	movslq 0x21c(%rdi),%r8
   2588d:	mov    (%rdi),%rsi
   25890:	mov    %r8d,0x2c(%rsi)
   25894:	shl    $0x8,%eax
   25897:	mov    %eax,%eax
   25899:	lea    -0x2(%r9,%rax,1),%r8
   2589e:	mov    (%rdi),%rax
   258a1:	mov    %r8d,0x30(%rax)
   258a5:	mov    (%rdi),%rax
   258a8:	mov    0x8(%rax),%rax
   258ac:	mov    $0x1,%esi
   258b1:	mov    %r12,-0x8(%rbp)
   258b5:	mov    %r13,-0x10(%rbp)
   258b9:	mov    %r14,-0x20(%rbp)
   258bd:	mov    %r8,%r12
   258c0:	mov    %rcx,%r13
   258c3:	mov    %rdx,%r14
   258c6:	callq  *%rax
   258c8:	lea    0x1(%r13),%rax
   258cc:	mov    %rax,(%r15)
   258cf:	lea    -0x1(%r14),%rax
   258d3:	mov    %rax,0x8(%r15)
   258d7:	test   %r12,%r12
   258da:	jg     25917 <skip_variable+0xd7>
   258dc:	mov    $0x1,%eax
   258e1:	mov    -0x20(%rbp),%r14
   258e5:	mov    -0x10(%rbp),%r13
   258e9:	mov    -0x8(%rbp),%r12
   258ed:	mov    -0x18(%rbp),%r15
   258f1:	leaveq 
   258f2:	retq   
   258f3:	callq  *0x18(%r15)
   258f7:	test   %eax,%eax
   258f9:	jne    2593f <skip_variable+0xff>
   258fb:	xor    %eax,%eax
   258fd:	mov    -0x18(%rbp),%r15
   25901:	leaveq 
   25902:	retq   
   25903:	mov    %rax,-0x20(%rbp)
   25907:	callq  *0x18(%r15)
   2590b:	test   %eax,%eax
   2590d:	jne    2594f <skip_variable+0x10f>
   2590f:	xor    %eax,%eax
   25911:	mov    -0x18(%rbp),%r15
   25915:	leaveq 
   25916:	retq   
   25917:	mov    -0x28(%rbp),%rdi
   2591b:	mov    0x28(%rdi),%rax
   2591f:	mov    0x20(%rax),%rax
   25923:	mov    %r12,%rsi
   25926:	callq  *%rax
   25928:	mov    $0x1,%eax
   2592d:	mov    -0x20(%rbp),%r14
   25931:	mov    -0x10(%rbp),%r13
   25935:	mov    -0x8(%rbp),%r12
   25939:	mov    -0x18(%rbp),%r15
   2593d:	leaveq 
   2593e:	retq   
   2593f:	mov    (%r15),%rcx
   25942:	mov    0x8(%r15),%rdx
   25946:	mov    -0x28(%rbp),%rdi
   2594a:	jmpq   25864 <skip_variable+0x24>
   2594f:	mov    (%r15),%rcx
   25952:	mov    0x8(%r15),%rdx
   25956:	mov    -0x20(%rbp),%rax
   2595a:	mov    -0x28(%rbp),%rdi
   2595e:	jmpq   25878 <skip_variable+0x38>
   25963:	data16 nopw %cs:0x0(%rax,%rax,1)
   2596e:	xchg   %ax,%ax

0000000000025970 <next_marker>:
   25970:	push   %rbp
   25971:	mov    %rsp,%rbp
   25974:	sub    $0x30,%rsp
   25978:	mov    %r13,-0x18(%rbp)
   2597c:	mov    %r14,-0x20(%rbp)
   25980:	mov    %r15,-0x28(%rbp)
   25984:	mov    0x28(%rdi),%r15
   25988:	mov    (%r15),%rcx
   2598b:	mov    0x8(%r15),%rax
   2598f:	mov    %rdi,%r14
   25992:	xor    %r13d,%r13d
   25995:	jmp    259cd <next_marker+0x5d>
   25997:	test   %rax,%rax
   2599a:	je     259df <next_marker+0x6f>
   2599c:	mov    %rcx,%rdx
   2599f:	lea    0x1(%rdx),%rcx
   259a3:	add    $0xffffffffffffffff,%rax
   259a7:	movzbl (%rdx),%r8d
   259ab:	cmp    $0xff,%r8b
   259af:	je     25997 <next_marker+0x27>
   259b1:	test   %r8b,%r8b
   259b4:	jne    259f3 <next_marker+0x83>
   259b6:	mov    0x248(%r14),%rsi
   259bd:	mov    0x24(%rsi),%edx
   259c0:	add    $0x2,%edx
   259c3:	mov    %edx,0x24(%rsi)
   259c6:	mov    %rcx,(%r15)
   259c9:	mov    %rax,0x8(%r15)
   259cd:	test   %rax,%rax
   259d0:	je     25a09 <next_marker+0x99>
   259d2:	movzbl (%rcx),%edx
   259d5:	add    $0x1,%rcx
   259d9:	add    $0xffffffffffffffff,%rax
   259dd:	jmp    25a4c <next_marker+0xdc>
   259df:	mov    %r14,%rdi
   259e2:	callq  *0x18(%r15)
   259e6:	test   %eax,%eax
   259e8:	je     25a59 <next_marker+0xe9>
   259ea:	mov    (%r15),%rdx
   259ed:	mov    0x8(%r15),%rax
   259f1:	jmp    2599f <next_marker+0x2f>
   259f3:	mov    0x248(%r14),%rdx
   259fa:	mov    0x24(%rdx),%edx
   259fd:	test   %edx,%edx
   259ff:	jne    25a6a <next_marker+0xfa>
   25a01:	mov    %r8,%r13
   25a04:	jmpq   25acc <next_marker+0x15c>
   25a09:	mov    %r14,%rdi
   25a0c:	callq  *0x18(%r15)
   25a10:	test   %eax,%eax
   25a12:	je     25aed <next_marker+0x17d>
   25a18:	mov    (%r15),%rcx
   25a1b:	mov    0x8(%r15),%rax
   25a1f:	jmp    259d2 <next_marker+0x62>
   25a21:	mov    0x248(%r14),%rsi
   25a28:	mov    0x24(%rsi),%edx
   25a2b:	add    $0x1,%edx
   25a2e:	mov    %edx,0x24(%rsi)
   25a31:	mov    %rcx,(%r15)
   25a34:	mov    %rax,0x8(%r15)
   25a38:	test   %rax,%rax
   25a3b:	je     25afe <next_marker+0x18e>
   25a41:	movzbl (%rcx),%edx
   25a44:	add    $0x1,%rcx
   25a48:	add    $0xffffffffffffffff,%rax
   25a4c:	cmp    $0xfe,%edx
   25a52:	jle    25a21 <next_marker+0xb1>
   25a54:	jmpq   25997 <next_marker+0x27>
   25a59:	mov    %r13,%rax
   25a5c:	mov    -0x28(%rbp),%r15
   25a60:	mov    -0x20(%rbp),%r14
   25a64:	mov    -0x18(%rbp),%r13
   25a68:	leaveq 
   25a69:	retq   
   25a6a:	mov    (%r14),%rdx
   25a6d:	movl   $0x74,0x28(%rdx)
   25a74:	mov    0x248(%r14),%rdx
   25a7b:	movslq 0x24(%rdx),%rsi
   25a7f:	mov    (%r14),%rdx
   25a82:	mov    %esi,0x2c(%rdx)
   25a85:	mov    (%r14),%rdx
   25a88:	mov    %r8d,0x30(%rdx)
   25a8c:	mov    (%r14),%rdx
   25a8f:	mov    0x8(%rdx),%rdx
   25a93:	mov    $0xffffffffffffffff,%rsi
   25a9a:	mov    %r14,%rdi
   25a9d:	mov    %rbx,-0x8(%rbp)
   25aa1:	mov    %r12,-0x10(%rbp)
   25aa5:	mov    %rax,%rbx
   25aa8:	mov    %rcx,%r12
   25aab:	mov    %r8,%r13
   25aae:	callq  *%rdx
   25ab0:	mov    0x248(%r14),%rax
   25ab7:	movl   $0x0,0x24(%rax)
   25abe:	mov    %rbx,%rax
   25ac1:	mov    %r12,%rcx
   25ac4:	mov    -0x10(%rbp),%r12
   25ac8:	mov    -0x8(%rbp),%rbx
   25acc:	mov    %r13d,0x21c(%r14)
   25ad3:	mov    %rcx,(%r15)
   25ad6:	mov    %rax,0x8(%r15)
   25ada:	mov    $0x1,%eax
   25adf:	mov    -0x28(%rbp),%r15
   25ae3:	mov    -0x20(%rbp),%r14
   25ae7:	mov    -0x18(%rbp),%r13
   25aeb:	leaveq 
   25aec:	retq   
   25aed:	mov    %r13,%rax
   25af0:	mov    -0x28(%rbp),%r15
   25af4:	mov    -0x20(%rbp),%r14
   25af8:	mov    -0x18(%rbp),%r13
   25afc:	leaveq 
   25afd:	retq   
   25afe:	mov    %r14,%rdi
   25b01:	callq  *0x18(%r15)
   25b05:	test   %eax,%eax
   25b07:	jne    25b1a <next_marker+0x1aa>
   25b09:	mov    %r13,%rax
   25b0c:	mov    -0x28(%rbp),%r15
   25b10:	mov    -0x20(%rbp),%r14
   25b14:	mov    -0x18(%rbp),%r13
   25b18:	leaveq 
   25b19:	retq   
   25b1a:	mov    (%r15),%rcx
   25b1d:	mov    0x8(%r15),%rax
   25b21:	jmpq   25a41 <next_marker+0xd1>
   25b26:	nopw   %cs:0x0(%rax,%rax,1)

0000000000025b30 <first_marker>:
   25b30:	push   %rbp
   25b31:	mov    %rsp,%rbp
   25b34:	sub    $0x30,%rsp
   25b38:	mov    %r15,-0x20(%rbp)
   25b3c:	mov    0x28(%rdi),%rcx
   25b40:	mov    (%rcx),%rdx
   25b43:	mov    0x8(%rcx),%rax
   25b47:	test   %rax,%rax
   25b4a:	je     25bfd <first_marker+0xcd>
   25b50:	mov    %r15,%rsi
   25b53:	mov    %rcx,%r15
   25b56:	mov    %rsi,%rcx
   25b59:	movzbl (%rdx),%r8d
   25b5d:	add    $0xffffffffffffffff,%rax
   25b61:	test   %rax,%rax
   25b64:	je     25c1a <first_marker+0xea>
   25b6a:	add    $0x1,%rdx
   25b6e:	movzbl (%rdx),%esi
   25b71:	cmp    $0xfe,%r8b
   25b75:	jbe    25b7d <first_marker+0x4d>
   25b77:	cmp    $0xd8,%sil
   25b7b:	je     25bde <first_marker+0xae>
   25b7d:	mov    (%rdi),%rcx
   25b80:	movl   $0x35,0x28(%rcx)
   25b87:	mov    (%rdi),%rcx
   25b8a:	mov    %r8d,0x2c(%rcx)
   25b8e:	mov    (%rdi),%rcx
   25b91:	mov    %esi,0x30(%rcx)
   25b94:	mov    (%rdi),%rcx
   25b97:	mov    (%rcx),%rcx
   25b9a:	mov    %rdi,%r8
   25b9d:	mov    %rbx,-0x8(%rbp)
   25ba1:	mov    %r12,-0x10(%rbp)
   25ba5:	mov    %r13,-0x18(%rbp)
   25ba9:	mov    %r14,-0x28(%rbp)
   25bad:	mov    %rdi,%rbx
   25bb0:	mov    %r8,%rdi
   25bb3:	mov    %rax,%r12
   25bb6:	mov    %rdx,%r13
   25bb9:	mov    %rsi,%r14
   25bbc:	callq  *%rcx
   25bbe:	mov    %r12,%rax
   25bc1:	mov    %r13,%rdx
   25bc4:	mov    %r14,%rsi
   25bc7:	mov    %rbx,%rdi
   25bca:	mov    -0x28(%rbp),%r14
   25bce:	mov    -0x18(%rbp),%r13
   25bd2:	mov    -0x10(%rbp),%r12
   25bd6:	mov    -0x8(%rbp),%rbx
   25bda:	mov    -0x20(%rbp),%rcx
   25bde:	mov    %esi,0x21c(%rdi)
   25be4:	add    $0x1,%rdx
   25be8:	mov    %rdx,(%r15)
   25beb:	add    $0xffffffffffffffff,%rax
   25bef:	mov    %rax,0x8(%r15)
   25bf3:	mov    %rcx,%r15
   25bf6:	mov    $0x1,%eax
   25bfb:	leaveq 
   25bfc:	retq   
   25bfd:	mov    %rdi,%rax
   25c00:	mov    %rdi,-0x28(%rbp)
   25c04:	mov    %rax,%rdi
   25c07:	mov    %rcx,%r15
   25c0a:	callq  *0x18(%r15)
   25c0e:	test   %eax,%eax
   25c10:	jne    25c38 <first_marker+0x108>
   25c12:	xor    %eax,%eax
   25c14:	mov    -0x20(%rbp),%r15
   25c18:	leaveq 
   25c19:	retq   
   25c1a:	mov    %rdi,%rax
   25c1d:	mov    %rdi,-0x18(%rbp)
   25c21:	mov    %r8,-0x28(%rbp)
   25c25:	mov    %rax,%rdi
   25c28:	callq  *0x18(%r15)
   25c2c:	test   %eax,%eax
   25c2e:	jne    25c4c <first_marker+0x11c>
   25c30:	xor    %eax,%eax
   25c32:	mov    -0x20(%rbp),%r15
   25c36:	leaveq 
   25c37:	retq   
   25c38:	mov    (%r15),%rdx
   25c3b:	mov    0x8(%r15),%rax
   25c3f:	mov    -0x28(%rbp),%rdi
   25c43:	mov    -0x20(%rbp),%rcx
   25c47:	jmpq   25b59 <first_marker+0x29>
   25c4c:	mov    (%r15),%rdx
   25c4f:	mov    0x8(%r15),%rax
   25c53:	mov    -0x28(%rbp),%r8
   25c57:	mov    -0x18(%rbp),%rdi
   25c5b:	mov    -0x20(%rbp),%rcx
   25c5f:	jmpq   25b6e <first_marker+0x3e>
   25c64:	data16 nopw %cs:0x0(%rax,%rax,1)
   25c6f:	nop

0000000000025c70 <read_markers>:
   25c70:	push   %rbp
   25c71:	mov    %rsp,%rbp
   25c74:	sub    $0x20,%rsp
   25c78:	mov    %r13,-0x8(%rbp)
   25c7c:	mov    %r14,-0x10(%rbp)
   25c80:	mov    %r15,-0x18(%rbp)
   25c84:	mov    %rdi,%r15
   25c87:	xor    %r13d,%r13d
   25c8a:	mov    $0x1,%r14d
   25c90:	jmp    25cbf <read_markers+0x4f>
   25c92:	mov    (%r15),%rax
   25c95:	movl   $0x44,0x28(%rax)
   25c9c:	movslq 0x21c(%r15),%rcx
   25ca3:	mov    (%r15),%rax
   25ca6:	mov    %ecx,0x2c(%rax)
   25ca9:	mov    (%r15),%rax
   25cac:	mov    (%rax),%rax
   25caf:	mov    %r15,%rdi
   25cb2:	callq  *%rax
   25cb4:	movl   $0x0,0x21c(%r15)
   25cbf:	movslq 0x21c(%r15),%rax
   25cc6:	test   %eax,%eax
   25cc8:	jne    25d02 <read_markers+0x92>
   25cca:	mov    0x248(%r15),%rax
   25cd1:	movslq 0x18(%rax),%rax
   25cd5:	test   %eax,%eax
   25cd7:	jne    25cf6 <read_markers+0x86>
   25cd9:	mov    %r15,%rdi
   25cdc:	callq  25b30 <first_marker>
   25ce1:	test   %eax,%eax
   25ce3:	jne    25d02 <read_markers+0x92>
   25ce5:	mov    %r13,%rax
   25ce8:	mov    -0x18(%rbp),%r15
   25cec:	mov    -0x10(%rbp),%r14
   25cf0:	mov    -0x8(%rbp),%r13
   25cf4:	leaveq 
   25cf5:	retq   
   25cf6:	mov    %r15,%rdi
   25cf9:	callq  25970 <next_marker>
   25cfe:	test   %eax,%eax
   25d00:	je     25d5e <read_markers+0xee>
   25d02:	movslq 0x21c(%r15),%rdx
   25d09:	lea    -0x1(%rdx),%eax
   25d0c:	cmp    $0xfd,%eax
   25d11:	ja     25c92 <read_markers+0x22>
   25d17:	lea    0x33ea2(%rip),%rcx        # 59bc0 <val_ac_chrominance.16+0xa2>
   25d1e:	movslq (%rcx,%rax,4),%rax
   25d22:	add    %rcx,%rax
   25d25:	jmpq   *%rax
   25d27:	mov    (%r15),%rax
   25d2a:	movl   $0x55,0x28(%rax)
   25d31:	mov    (%r15),%rax
   25d34:	mov    0x8(%rax),%rax
   25d38:	mov    %r14,%rsi
   25d3b:	mov    %r15,%rdi
   25d3e:	callq  *%rax
   25d40:	movl   $0x0,0x21c(%r15)
   25d4b:	mov    $0x2,%eax
   25d50:	mov    -0x18(%rbp),%r15
   25d54:	mov    -0x10(%rbp),%r14
   25d58:	mov    -0x8(%rbp),%r13
   25d5c:	leaveq 
   25d5d:	retq   
   25d5e:	mov    %r13,%rax
   25d61:	mov    -0x18(%rbp),%r15
   25d65:	mov    -0x10(%rbp),%r14
   25d69:	mov    -0x8(%rbp),%r13
   25d6d:	leaveq 
   25d6e:	retq   
   25d6f:	mov    %r15,%rdi
   25d72:	callq  23a80 <get_sos>
   25d77:	test   %eax,%eax
   25d79:	jne    25fa0 <read_markers+0x330>
   25d7f:	mov    %r13,%rax
   25d82:	mov    -0x18(%rbp),%r15
   25d86:	mov    -0x10(%rbp),%r14
   25d8a:	mov    -0x8(%rbp),%r13
   25d8e:	leaveq 
   25d8f:	retq   
   25d90:	mov    %r15,%rdi
   25d93:	callq  25840 <skip_variable>
   25d98:	test   %eax,%eax
   25d9a:	jne    25cb4 <read_markers+0x44>
   25da0:	mov    %r13,%rax
   25da3:	mov    -0x18(%rbp),%r15
   25da7:	mov    -0x10(%rbp),%r14
   25dab:	mov    -0x8(%rbp),%r13
   25daf:	leaveq 
   25db0:	retq   
   25db1:	mov    %r15,%rdi
   25db4:	callq  23470 <get_soi>
   25db9:	test   %eax,%eax
   25dbb:	jne    25cb4 <read_markers+0x44>
   25dc1:	mov    %r13,%rax
   25dc4:	mov    -0x18(%rbp),%r15
   25dc8:	mov    -0x10(%rbp),%r14
   25dcc:	mov    -0x8(%rbp),%r13
   25dd0:	leaveq 
   25dd1:	retq   
   25dd2:	mov    %r13,%rdx
   25dd5:	mov    %r15,%rdi
   25dd8:	mov    %r13,%rsi
   25ddb:	callq  23580 <get_sof>
   25de0:	test   %eax,%eax
   25de2:	jne    25cb4 <read_markers+0x44>
   25de8:	mov    %r13,%rax
   25deb:	mov    -0x18(%rbp),%r15
   25def:	mov    -0x10(%rbp),%r14
   25df3:	mov    -0x8(%rbp),%r13
   25df7:	leaveq 
   25df8:	retq   
   25df9:	mov    %r15,%rdi
   25dfc:	mov    %r14,%rsi
   25dff:	mov    %r13,%rdx
   25e02:	callq  23580 <get_sof>
   25e07:	test   %eax,%eax
   25e09:	jne    25cb4 <read_markers+0x44>
   25e0f:	mov    %r13,%rax
   25e12:	mov    -0x18(%rbp),%r15
   25e16:	mov    -0x10(%rbp),%r14
   25e1a:	mov    -0x8(%rbp),%r13
   25e1e:	leaveq 
   25e1f:	retq   
   25e20:	mov    %r15,%rdi
   25e23:	mov    %r13,%rsi
   25e26:	mov    %r14,%rdx
   25e29:	callq  23580 <get_sof>
   25e2e:	test   %eax,%eax
   25e30:	jne    25cb4 <read_markers+0x44>
   25e36:	mov    %r13,%rax
   25e39:	mov    -0x18(%rbp),%r15
   25e3d:	mov    -0x10(%rbp),%r14
   25e41:	mov    -0x8(%rbp),%r13
   25e45:	leaveq 
   25e46:	retq   
   25e47:	mov    %r14,%rdx
   25e4a:	mov    %r15,%rdi
   25e4d:	mov    %r14,%rsi
   25e50:	callq  23580 <get_sof>
   25e55:	test   %eax,%eax
   25e57:	jne    25cb4 <read_markers+0x44>
   25e5d:	mov    %r13,%rax
   25e60:	mov    -0x18(%rbp),%r15
   25e64:	mov    -0x10(%rbp),%r14
   25e68:	mov    -0x8(%rbp),%r13
   25e6c:	leaveq 
   25e6d:	retq   
   25e6e:	mov    (%r15),%rax
   25e71:	movl   $0x3c,0x28(%rax)
   25e78:	movslq 0x21c(%r15),%rcx
   25e7f:	mov    (%r15),%rax
   25e82:	mov    %ecx,0x2c(%rax)
   25e85:	mov    (%r15),%rax
   25e88:	mov    (%rax),%rax
   25e8b:	mov    %r15,%rdi
   25e8e:	callq  *%rax
   25e90:	jmpq   25cb4 <read_markers+0x44>
   25e95:	mov    %r15,%rdi
   25e98:	callq  23ff0 <get_dac>
   25e9d:	test   %eax,%eax
   25e9f:	jne    25cb4 <read_markers+0x44>
   25ea5:	mov    %r13,%rax
   25ea8:	mov    -0x18(%rbp),%r15
   25eac:	mov    -0x10(%rbp),%r14
   25eb0:	mov    -0x8(%rbp),%r13
   25eb4:	leaveq 
   25eb5:	retq   
   25eb6:	mov    %r15,%rdi
   25eb9:	callq  242b0 <get_dht>
   25ebe:	test   %eax,%eax
   25ec0:	jne    25cb4 <read_markers+0x44>
   25ec6:	mov    %r13,%rax
   25ec9:	mov    -0x18(%rbp),%r15
   25ecd:	mov    -0x10(%rbp),%r14
   25ed1:	mov    -0x8(%rbp),%r13
   25ed5:	leaveq 
   25ed6:	retq   
   25ed7:	mov    %r15,%rdi
   25eda:	callq  24760 <get_dqt>
   25edf:	test   %eax,%eax
   25ee1:	jne    25cb4 <read_markers+0x44>
   25ee7:	mov    %r13,%rax
   25eea:	mov    -0x18(%rbp),%r15
   25eee:	mov    -0x10(%rbp),%r14
   25ef2:	mov    -0x8(%rbp),%r13
   25ef6:	leaveq 
   25ef7:	retq   
   25ef8:	mov    %r15,%rdi
   25efb:	callq  24bb0 <get_dri>
   25f00:	test   %eax,%eax
   25f02:	jne    25cb4 <read_markers+0x44>
   25f08:	mov    %r13,%rax
   25f0b:	mov    -0x18(%rbp),%r15
   25f0f:	mov    -0x10(%rbp),%r14
   25f13:	mov    -0x8(%rbp),%r13
   25f17:	leaveq 
   25f18:	retq   
   25f19:	mov    0x248(%r15),%rcx
   25f20:	lea    -0xe0(%rdx),%eax
   25f26:	movslq %eax,%rax
   25f29:	mov    0x30(%rcx,%rax,8),%rax
   25f2e:	mov    %r15,%rdi
   25f31:	callq  *%rax
   25f33:	test   %eax,%eax
   25f35:	jne    25cb4 <read_markers+0x44>
   25f3b:	mov    %r13,%rax
   25f3e:	mov    -0x18(%rbp),%r15
   25f42:	mov    -0x10(%rbp),%r14
   25f46:	mov    -0x8(%rbp),%r13
   25f4a:	leaveq 
   25f4b:	retq   
   25f4c:	mov    0x248(%r15),%rax
   25f53:	mov    0x28(%rax),%rax
   25f57:	mov    %r15,%rdi
   25f5a:	callq  *%rax
   25f5c:	test   %eax,%eax
   25f5e:	jne    25cb4 <read_markers+0x44>
   25f64:	mov    %r13,%rax
   25f67:	mov    -0x18(%rbp),%r15
   25f6b:	mov    -0x10(%rbp),%r14
   25f6f:	mov    -0x8(%rbp),%r13
   25f73:	leaveq 
   25f74:	retq   
   25f75:	mov    (%r15),%rax
   25f78:	movl   $0x5c,0x28(%rax)
   25f7f:	movslq 0x21c(%r15),%rcx
   25f86:	mov    (%r15),%rax
   25f89:	mov    %ecx,0x2c(%rax)
   25f8c:	mov    (%r15),%rax
   25f8f:	mov    0x8(%rax),%rax
   25f93:	mov    %r15,%rdi
   25f96:	mov    %r14,%rsi
   25f99:	callq  *%rax
   25f9b:	jmpq   25cb4 <read_markers+0x44>
   25fa0:	movl   $0x0,0x21c(%r15)
   25fab:	mov    %r14,%rax
   25fae:	mov    -0x18(%rbp),%r15
   25fb2:	mov    -0x10(%rbp),%r14
   25fb6:	mov    -0x8(%rbp),%r13
   25fba:	leaveq 
   25fbb:	retq   
   25fbc:	nopl   0x0(%rax)

0000000000025fc0 <read_restart_marker>:
   25fc0:	push   %rbp
   25fc1:	mov    %rsp,%rbp
   25fc4:	sub    $0x10,%rsp
   25fc8:	movslq 0x21c(%rdi),%rax
   25fcf:	test   %eax,%eax
   25fd1:	je     2600e <read_restart_marker+0x4e>
   25fd3:	mov    0x248(%rdi),%rax
   25fda:	movslq 0x20(%rax),%rsi
   25fde:	lea    0xd0(%rsi),%eax
   25fe4:	cmp    0x21c(%rdi),%eax
   25fea:	je     26027 <read_restart_marker+0x67>
   25fec:	mov    0x28(%rdi),%rax
   25ff0:	mov    0x28(%rax),%rax
   25ff4:	mov    %rdi,%rcx
   25ff7:	mov    %rdi,-0x8(%rbp)
   25ffb:	mov    %rcx,%rdi
   25ffe:	callq  *%rax
   26000:	test   %eax,%eax
   26002:	je     26089 <read_restart_marker+0xc9>
   26008:	mov    -0x8(%rbp),%rax
   2600c:	jmp    2606e <read_restart_marker+0xae>
   2600e:	mov    %rdi,%rax
   26011:	mov    %rdi,-0x8(%rbp)
   26015:	mov    %rax,%rdi
   26018:	callq  25970 <next_marker>
   2601d:	test   %eax,%eax
   2601f:	je     2608d <read_restart_marker+0xcd>
   26021:	mov    -0x8(%rbp),%rdi
   26025:	jmp    25fd3 <read_restart_marker+0x13>
   26027:	mov    (%rdi),%rax
   2602a:	movl   $0x62,0x28(%rax)
   26031:	mov    0x248(%rdi),%rax
   26038:	movslq 0x20(%rax),%rcx
   2603c:	mov    (%rdi),%rax
   2603f:	mov    %ecx,0x2c(%rax)
   26042:	mov    (%rdi),%rax
   26045:	mov    0x8(%rax),%rax
   26049:	mov    $0x3,%esi
   2604e:	mov    %rdi,%rcx
   26051:	mov    %r15,-0x8(%rbp)
   26055:	mov    %rdi,%r15
   26058:	mov    %rcx,%rdi
   2605b:	callq  *%rax
   2605d:	mov    %r15,%rax
   26060:	movl   $0x0,0x21c(%rax)
   2606a:	mov    -0x8(%rbp),%r15
   2606e:	mov    0x248(%rax),%rcx
   26075:	movslq 0x20(%rcx),%rax
   26079:	add    $0x1,%eax
   2607c:	and    $0x7,%eax
   2607f:	mov    %eax,0x20(%rcx)
   26082:	mov    $0x1,%eax
   26087:	leaveq 
   26088:	retq   
   26089:	xor    %eax,%eax
   2608b:	leaveq 
   2608c:	retq   
   2608d:	xor    %eax,%eax
   2608f:	leaveq 
   26090:	retq   
   26091:	data16 nopw %cs:0x0(%rax,%rax,1)
   2609c:	nopl   0x0(%rax)

00000000000260a0 <reset_marker_reader>:
   260a0:	push   %rbp
   260a1:	mov    %rsp,%rbp
   260a4:	movq   $0x0,0x130(%rdi)
   260af:	movl   $0x0,0xac(%rdi)
   260b9:	movl   $0x0,0x21c(%rdi)
   260c3:	mov    0x248(%rdi),%rax
   260ca:	movl   $0x0,0x18(%rax)
   260d1:	movl   $0x0,0x1c(%rax)
   260d8:	movl   $0x0,0x24(%rax)
   260df:	movq   $0x0,0xf8(%rax)
   260ea:	leaveq 
   260eb:	retq   
   260ec:	nopl   0x0(%rax)

00000000000260f0 <jpeg_new_colormap>:
   260f0:	push   %rbp
   260f1:	mov    %rsp,%rbp
   260f4:	sub    $0x10,%rsp
   260f8:	mov    0x220(%rdi),%rax
   260ff:	movslq 0x24(%rdi),%rcx
   26103:	cmp    $0xcf,%ecx
   26109:	je     26149 <jpeg_new_colormap+0x59>
   2610b:	mov    (%rdi),%rcx
   2610e:	movl   $0x14,0x28(%rcx)
   26115:	movslq 0x24(%rdi),%rdx
   26119:	mov    (%rdi),%rcx
   2611c:	mov    %edx,0x2c(%rcx)
   2611f:	mov    (%rdi),%rcx
   26122:	mov    (%rcx),%rcx
   26125:	mov    %rdi,%rdx
   26128:	mov    %r14,-0x8(%rbp)
   2612c:	mov    %r15,-0x10(%rbp)
   26130:	mov    %rdi,%r14
   26133:	mov    %rdx,%rdi
   26136:	mov    %rax,%r15
   26139:	callq  *%rcx
   2613b:	mov    %r15,%rax
   2613e:	mov    %r14,%rdi
   26141:	mov    -0x10(%rbp),%r15
   26145:	mov    -0x8(%rbp),%r14
   26149:	movslq 0x6c(%rdi),%rcx
   2614d:	test   %ecx,%ecx
   2614f:	jne    26165 <jpeg_new_colormap+0x75>
   26151:	mov    (%rdi),%rax
   26154:	movl   $0x2e,0x28(%rax)
   2615b:	mov    (%rdi),%rax
   2615e:	mov    (%rax),%rax
   26161:	callq  *%rax
   26163:	leaveq 
   26164:	retq   
   26165:	movslq 0x80(%rdi),%rcx
   2616c:	test   %ecx,%ecx
   2616e:	je     26151 <jpeg_new_colormap+0x61>
   26170:	mov    0xa0(%rdi),%rcx
   26177:	test   %rcx,%rcx
   2617a:	je     26151 <jpeg_new_colormap+0x61>
   2617c:	mov    0x80(%rax),%rcx
   26183:	mov    %rcx,0x270(%rdi)
   2618a:	mov    %r15,-0x10(%rbp)
   2618e:	mov    %rax,%r15
   26191:	callq  *0x18(%rcx)
   26194:	movl   $0x0,0x10(%r15)
   2619c:	mov    -0x10(%rbp),%r15
   261a0:	leaveq 
   261a1:	retq   
   261a2:	data16 nopw %cs:0x0(%rax,%rax,1)
   261ad:	nopl   (%rax)

00000000000261b0 <jpeg_calc_output_dimensions>:
   261b0:	push   %rbp
   261b1:	mov    %rsp,%rbp
   261b4:	sub    $0x20,%rsp
   261b8:	mov    %r15,-0x18(%rbp)
   261bc:	movslq 0x24(%rdi),%rax
   261c0:	cmp    $0xca,%eax
   261c5:	jne    261d2 <jpeg_calc_output_dimensions+0x22>
   261c7:	mov    %r14,%r15
   261ca:	mov    %r13,%r14
   261cd:	mov    %rdi,%r13
   261d0:	jmp    261f7 <jpeg_calc_output_dimensions+0x47>
   261d2:	mov    (%rdi),%rax
   261d5:	movl   $0x14,0x28(%rax)
   261dc:	movslq 0x24(%rdi),%rcx
   261e0:	mov    (%rdi),%rax
   261e3:	mov    %ecx,0x2c(%rax)
   261e6:	mov    (%rdi),%rax
   261e9:	mov    (%rax),%rax
   261ec:	mov    %r14,%r15
   261ef:	mov    %r13,%r14
   261f2:	mov    %rdi,%r13
   261f5:	callq  *%rax
   261f7:	mov    %r13,%rdi
   261fa:	callq  26590 <jpeg_core_output_dimensions>
   261ff:	mov    0x130(%r13),%rsi
   26206:	mov    %r15,%rcx
   26209:	xor    %r15d,%r15d
   2620c:	mov    %r15,%rdi
   2620f:	jmp    2621c <jpeg_calc_output_dimensions+0x6c>
   26211:	mov    %r8d,0x24(%rsi)
   26215:	add    $0x60,%rsi
   26219:	add    $0x1,%edi
   2621c:	movslq 0x38(%r13),%rax
   26220:	cmp    %edi,%eax
   26222:	jg     26238 <jpeg_calc_output_dimensions+0x88>
   26224:	mov    0x130(%r13),%rax
   2622b:	mov    %r14,-0x8(%rbp)
   2622f:	mov    %rcx,-0x10(%rbp)
   26233:	mov    %rax,%r14
   26236:	jmp    262a0 <jpeg_calc_output_dimensions+0xf0>
   26238:	movslq 0x1a0(%r13),%r8
   2623f:	jmpq   26321 <jpeg_calc_output_dimensions+0x171>
   26244:	movslq 0x24(%r14),%rax
   26248:	imul   0x8(%r14),%eax
   2624d:	movslq %eax,%rdi
   26250:	mov    0x30(%r13),%eax
   26254:	imul   %rax,%rdi
   26258:	movslq 0x198(%r13),%rax
   2625f:	shl    $0x3,%eax
   26262:	movslq %eax,%rsi
   26265:	callq  4150 <jdiv_round_up@plt>
   2626a:	mov    %eax,0x28(%r14)
   2626e:	movslq 0x24(%r14),%rax
   26272:	imul   0xc(%r14),%eax
   26277:	movslq %eax,%rdi
   2627a:	mov    0x34(%r13),%eax
   2627e:	imul   %rax,%rdi
   26282:	movslq 0x19c(%r13),%rax
   26289:	shl    $0x3,%eax
   2628c:	movslq %eax,%rsi
   2628f:	callq  4150 <jdiv_round_up@plt>
   26294:	mov    %eax,0x2c(%r14)
   26298:	add    $0x60,%r14
   2629c:	add    $0x1,%r15d
   262a0:	movslq 0x38(%r13),%rdx
   262a4:	cmp    %r15d,%edx
   262a7:	jg     26244 <jpeg_calc_output_dimensions+0x94>
   262a9:	mov    0x40(%r13),%esi
   262ad:	lea    -0x1(%rsi),%eax
   262b0:	cmp    $0xf,%eax
   262b3:	ja     2632c <jpeg_calc_output_dimensions+0x17c>
   262b5:	lea    0x33cfc(%rip),%rcx        # 59fb8 <val_ac_chrominance.16+0x49a>
   262bc:	movslq (%rcx,%rax,4),%rax
   262c0:	add    %rcx,%rax
   262c3:	jmpq   *%rax
   262c5:	movl   $0x4,0x90(%r13)
   262d0:	jmp    26333 <jpeg_calc_output_dimensions+0x183>
   262d2:	movslq 0x1a0(%r13),%rax
   262d9:	imul   0x198(%r13),%eax
   262e1:	mov    %r8,%rdx
   262e4:	imul   0x8(%rsi),%edx
   262e8:	lea    (%rdx,%rdx,1),%r9d
   262ec:	cltd   
   262ed:	idiv   %r9d
   262f0:	test   %edx,%edx
   262f2:	jne    26211 <jpeg_calc_output_dimensions+0x61>
   262f8:	movslq 0x1a0(%r13),%rax
   262ff:	imul   0x19c(%r13),%eax
   26307:	mov    %r8,%rdx
   2630a:	imul   0xc(%rsi),%edx
   2630e:	lea    (%rdx,%rdx,1),%r9d
   26312:	cltd   
   26313:	idiv   %r9d
   26316:	test   %edx,%edx
   26318:	jne    26211 <jpeg_calc_output_dimensions+0x61>
   2631e:	add    %r8d,%r8d
   26321:	cmp    $0x7,%r8d
   26325:	jle    262d2 <jpeg_calc_output_dimensions+0x122>
   26327:	jmpq   26211 <jpeg_calc_output_dimensions+0x61>
   2632c:	mov    %edx,0x90(%r13)
   26333:	movslq 0x6c(%r13),%rax
   26337:	test   %eax,%eax
   26339:	je     2639a <jpeg_calc_output_dimensions+0x1ea>
   2633b:	mov    $0x1,%eax
   26340:	mov    %eax,0x94(%r13)
   26347:	mov    %r13,%rdi
   2634a:	callq  26400 <use_merged_upsample>
   2634f:	test   %eax,%eax
   26351:	jne    263a3 <jpeg_calc_output_dimensions+0x1f3>
   26353:	movl   $0x1,0x98(%r13)
   2635e:	mov    -0x10(%rbp),%r14
   26362:	mov    -0x8(%rbp),%r13
   26366:	mov    -0x18(%rbp),%r15
   2636a:	leaveq 
   2636b:	retq   
   2636c:	movl   $0x1,0x90(%r13)
   26377:	jmp    26333 <jpeg_calc_output_dimensions+0x183>
   26379:	lea    0x33c78(%rip),%rax        # 59ff8 <rgb_pixelsize>
   26380:	movslq (%rax,%rsi,4),%rax
   26384:	mov    %eax,0x90(%r13)
   2638b:	jmp    26333 <jpeg_calc_output_dimensions+0x183>
   2638d:	movl   $0x3,0x90(%r13)
   26398:	jmp    26333 <jpeg_calc_output_dimensions+0x183>
   2639a:	movslq 0x90(%r13),%rax
   263a1:	jmp    26340 <jpeg_calc_output_dimensions+0x190>
   263a3:	movslq 0x19c(%r13),%rax
   263aa:	mov    %eax,0x98(%r13)
   263b1:	mov    -0x10(%rbp),%r14
   263b5:	mov    -0x8(%rbp),%r13
   263b9:	mov    -0x18(%rbp),%r15
   263bd:	leaveq 
   263be:	retq   
   263bf:	nop

00000000000263c0 <jinit_master_decompress>:
   263c0:	push   %rbp
   263c1:	mov    %rsp,%rbp
   263c4:	lea    0xb25(%rip),%rax        # 26ef0 <prepare_for_output_pass>
   263cb:	mov    0x220(%rdi),%rcx
   263d2:	mov    %rax,(%rcx)
   263d5:	lea    0xd34(%rip),%rax        # 27110 <finish_output_pass>
   263dc:	mov    %rax,0x8(%rcx)
   263e0:	movl   $0x0,0x10(%rcx)
   263e7:	movl   $0x0,0x6c(%rcx)
   263ee:	callq  26b90 <master_selection>
   263f3:	leaveq 
   263f4:	retq   
   263f5:	data16 nopw %cs:0x0(%rax,%rax,1)

0000000000026400 <use_merged_upsample>:
   26400:	push   %rbp
   26401:	mov    %rsp,%rbp
   26404:	sub    $0x10,%rsp
   26408:	xor    %eax,%eax
   2640a:	movslq 0x64(%rdi),%rcx
   2640e:	test   %ecx,%ecx
   26410:	je     26414 <use_merged_upsample+0x14>
   26412:	leaveq 
   26413:	retq   
   26414:	movslq 0x188(%rdi),%rcx
   2641b:	test   %ecx,%ecx
   2641d:	je     26421 <use_merged_upsample+0x21>
   2641f:	leaveq 
   26420:	retq   
   26421:	mov    0x3c(%rdi),%ecx
   26424:	cmp    $0x3,%ecx
   26427:	je     2642b <use_merged_upsample+0x2b>
   26429:	leaveq 
   2642a:	retq   
   2642b:	movslq 0x38(%rdi),%rcx
   2642f:	cmp    $0x3,%ecx
   26432:	je     26436 <use_merged_upsample+0x36>
   26434:	leaveq 
   26435:	retq   
   26436:	mov    0x40(%rdi),%ecx
   26439:	cmp    $0x2,%ecx
   2643c:	jne    2645d <use_merged_upsample+0x5d>
   2643e:	cmp    $0x10,%ecx
   26441:	je     26496 <use_merged_upsample+0x96>
   26443:	mov    0x40(%rdi),%ecx
   26446:	cmp    $0x10,%ecx
   26449:	jne    264a4 <use_merged_upsample+0xa4>
   2644b:	mov    0x130(%rdi),%rdx
   26452:	movslq 0x8(%rdx),%rcx
   26456:	cmp    $0x2,%ecx
   26459:	je     264b9 <use_merged_upsample+0xb9>
   2645b:	leaveq 
   2645c:	retq   
   2645d:	cmp    $0x10,%ecx
   26460:	je     2643e <use_merged_upsample+0x3e>
   26462:	cmp    $0x6,%ecx
   26465:	je     2643e <use_merged_upsample+0x3e>
   26467:	cmp    $0x7,%ecx
   2646a:	je     2643e <use_merged_upsample+0x3e>
   2646c:	cmp    $0x8,%ecx
   2646f:	je     2643e <use_merged_upsample+0x3e>
   26471:	cmp    $0x9,%ecx
   26474:	je     2643e <use_merged_upsample+0x3e>
   26476:	cmp    $0xa,%ecx
   26479:	je     2643e <use_merged_upsample+0x3e>
   2647b:	cmp    $0xb,%ecx
   2647e:	je     2643e <use_merged_upsample+0x3e>
   26480:	cmp    $0xc,%ecx
   26483:	je     2643e <use_merged_upsample+0x3e>
   26485:	cmp    $0xd,%ecx
   26488:	je     2643e <use_merged_upsample+0x3e>
   2648a:	cmp    $0xe,%ecx
   2648d:	je     2643e <use_merged_upsample+0x3e>
   2648f:	cmp    $0xf,%ecx
   26492:	je     2643e <use_merged_upsample+0x3e>
   26494:	leaveq 
   26495:	retq   
   26496:	movslq 0x90(%rdi),%rcx
   2649d:	cmp    $0x3,%ecx
   264a0:	je     26443 <use_merged_upsample+0x43>
   264a2:	leaveq 
   264a3:	retq   
   264a4:	lea    0x33b4d(%rip),%rdx        # 59ff8 <rgb_pixelsize>
   264ab:	movslq (%rdx,%rcx,4),%rcx
   264af:	cmp    0x90(%rdi),%ecx
   264b5:	je     2644b <use_merged_upsample+0x4b>
   264b7:	leaveq 
   264b8:	retq   
   264b9:	movslq 0x68(%rdx),%rcx
   264bd:	cmp    $0x1,%ecx
   264c0:	je     264c4 <use_merged_upsample+0xc4>
   264c2:	leaveq 
   264c3:	retq   
   264c4:	movslq 0xc8(%rdx),%rcx
   264cb:	cmp    $0x1,%ecx
   264ce:	je     264d2 <use_merged_upsample+0xd2>
   264d0:	leaveq 
   264d1:	retq   
   264d2:	movslq 0xc(%rdx),%rcx
   264d6:	cmp    $0x2,%ecx
   264d9:	jle    264dd <use_merged_upsample+0xdd>
   264db:	leaveq 
   264dc:	retq   
   264dd:	movslq 0x6c(%rdx),%rcx
   264e1:	cmp    $0x1,%ecx
   264e4:	je     264e8 <use_merged_upsample+0xe8>
   264e6:	leaveq 
   264e7:	retq   
   264e8:	movslq 0xcc(%rdx),%rcx
   264ef:	cmp    $0x1,%ecx
   264f2:	je     264f6 <use_merged_upsample+0xf6>
   264f4:	leaveq 
   264f5:	retq   
   264f6:	movslq 0x1a0(%rdi),%rcx
   264fd:	cmp    0x24(%rdx),%ecx
   26500:	je     26504 <use_merged_upsample+0x104>
   26502:	leaveq 
   26503:	retq   
   26504:	cmp    0x84(%rdx),%ecx
   2650a:	je     2650e <use_merged_upsample+0x10e>
   2650c:	leaveq 
   2650d:	retq   
   2650e:	cmp    0xe4(%rdx),%ecx
   26514:	je     26518 <use_merged_upsample+0x118>
   26516:	leaveq 
   26517:	retq   
   26518:	mov    %rdi,-0x8(%rbp)
   2651c:	callq  3d9e0 <jsimd_can_h2v2_merged_upsample>
   26521:	test   %eax,%eax
   26523:	je     2652c <use_merged_upsample+0x12c>
   26525:	mov    $0x1,%eax
   2652a:	leaveq 
   2652b:	retq   
   2652c:	callq  3da20 <jsimd_can_h2v1_merged_upsample>
   26531:	test   %eax,%eax
   26533:	je     2653c <use_merged_upsample+0x13c>
   26535:	mov    $0x1,%eax
   2653a:	leaveq 
   2653b:	retq   
   2653c:	callq  3d5f0 <jsimd_can_ycc_rgb>
   26541:	test   %eax,%eax
   26543:	jne    2654c <use_merged_upsample+0x14c>
   26545:	mov    $0x1,%eax
   2654a:	leaveq 
   2654b:	retq   
   2654c:	mov    -0x8(%rbp),%rcx
   26550:	mov    0x3c(%rcx),%eax
   26553:	cmp    $0x3,%eax
   26556:	je     2655f <use_merged_upsample+0x15f>
   26558:	mov    $0x1,%eax
   2655d:	leaveq 
   2655e:	retq   
   2655f:	mov    0x40(%rcx),%eax
   26562:	cmp    $0x2,%eax
   26565:	jne    2656b <use_merged_upsample+0x16b>
   26567:	xor    %eax,%eax
   26569:	leaveq 
   2656a:	retq   
   2656b:	cmp    $0x5,%eax
   2656e:	ja     26577 <use_merged_upsample+0x177>
   26570:	mov    $0x1,%eax
   26575:	leaveq 
   26576:	retq   
   26577:	cmp    $0xf,%eax
   2657a:	ja     26580 <use_merged_upsample+0x180>
   2657c:	xor    %eax,%eax
   2657e:	leaveq 
   2657f:	retq   
   26580:	mov    $0x1,%eax
   26585:	leaveq 
   26586:	retq   
   26587:	nopw   0x0(%rax,%rax,1)

0000000000026590 <jpeg_core_output_dimensions>:
   26590:	push   %rbp
   26591:	mov    %rsp,%rbp
   26594:	sub    $0x10,%rsp
   26598:	mov    %r14,-0x8(%rbp)
   2659c:	mov    %r15,-0x10(%rbp)
   265a0:	mov    $0x8,%r15d
   265a6:	mov    0x48(%rdi),%r9d
   265aa:	mov    0x44(%rdi),%eax
   265ad:	shl    $0x3,%eax
   265b0:	cmp    %eax,%r9d
   265b3:	jae    2669f <jpeg_core_output_dimensions+0x10f>
   265b9:	lea    (%r9,%r9,1),%r8d
   265bd:	cmp    %r8d,%eax
   265c0:	jbe    266e7 <jpeg_core_output_dimensions+0x157>
   265c6:	lea    (%r9,%r8,1),%ecx
   265ca:	cmp    %ecx,%eax
   265cc:	jbe    26721 <jpeg_core_output_dimensions+0x191>
   265d2:	mov    %r9,%rdx
   265d5:	shl    $0x2,%edx
   265d8:	cmp    %edx,%eax
   265da:	jbe    2675f <jpeg_core_output_dimensions+0x1cf>
   265e0:	lea    (%r9,%rdx,1),%esi
   265e4:	cmp    %esi,%eax
   265e6:	jbe    2679d <jpeg_core_output_dimensions+0x20d>
   265ec:	lea    (%rcx,%rcx,1),%edx
   265ef:	cmp    %edx,%eax
   265f1:	jbe    267db <jpeg_core_output_dimensions+0x24b>
   265f7:	add    %r9d,%edx
   265fa:	cmp    %edx,%eax
   265fc:	jbe    26820 <jpeg_core_output_dimensions+0x290>
   26602:	mov    %r9,%rdx
   26605:	shl    $0x3,%edx
   26608:	cmp    %edx,%eax
   2660a:	jbe    26866 <jpeg_core_output_dimensions+0x2d6>
   26610:	add    %r9d,%edx
   26613:	cmp    %edx,%eax
   26615:	jbe    2689e <jpeg_core_output_dimensions+0x30e>
   2661b:	lea    (%rsi,%rsi,1),%edx
   2661e:	cmp    %edx,%eax
   26620:	jbe    268dc <jpeg_core_output_dimensions+0x34c>
   26626:	add    %r9d,%edx
   26629:	cmp    %edx,%eax
   2662b:	jbe    26921 <jpeg_core_output_dimensions+0x391>
   26631:	shl    $0x2,%ecx
   26634:	cmp    %ecx,%eax
   26636:	jbe    26967 <jpeg_core_output_dimensions+0x3d7>
   2663c:	lea    (%r9,%rcx,1),%edx
   26640:	cmp    %edx,%eax
   26642:	jbe    269ad <jpeg_core_output_dimensions+0x41d>
   26648:	add    %r8d,%ecx
   2664b:	cmp    %ecx,%eax
   2664d:	jbe    269f3 <jpeg_core_output_dimensions+0x463>
   26653:	mov    %r9,%rcx
   26656:	shl    $0x4,%ecx
   26659:	sub    %r9d,%ecx
   2665c:	cmp    %ecx,%eax
   2665e:	jbe    26a41 <jpeg_core_output_dimensions+0x4b1>
   26664:	mov    0x30(%rdi),%eax
   26667:	shl    $0x4,%rax
   2666b:	mov    %rdi,%r14
   2666e:	mov    %rax,%rdi
   26671:	mov    %r15,%rsi
   26674:	callq  4150 <jdiv_round_up@plt>
   26679:	mov    %eax,0x88(%r14)
   26680:	mov    0x34(%r14),%edi
   26684:	shl    $0x4,%rdi
   26688:	mov    %r15,%rsi
   2668b:	callq  4150 <jdiv_round_up@plt>
   26690:	mov    %eax,0x8c(%r14)
   26697:	mov    $0x10,%r15d
   2669d:	jmp    266ce <jpeg_core_output_dimensions+0x13e>
   2669f:	mov    %rdi,%r14
   266a2:	mov    0x30(%r14),%edi
   266a6:	mov    %r15,%rsi
   266a9:	callq  4150 <jdiv_round_up@plt>
   266ae:	mov    %eax,0x88(%r14)
   266b5:	mov    %r15,%rsi
   266b8:	mov    0x34(%r14),%edi
   266bc:	callq  4150 <jdiv_round_up@plt>
   266c1:	mov    %eax,0x8c(%r14)
   266c8:	mov    $0x1,%r15d
   266ce:	mov    %r15d,0x1a0(%r14)
   266d5:	mov    0x130(%r14),%rax
   266dc:	add    $0x24,%rax
   266e0:	xor    %ecx,%ecx
   266e2:	jmpq   26aa4 <jpeg_core_output_dimensions+0x514>
   266e7:	mov    0x30(%rdi),%eax
   266ea:	add    %rax,%rax
   266ed:	mov    %rdi,%r14
   266f0:	mov    %rax,%rdi
   266f3:	mov    %r15,%rsi
   266f6:	callq  4150 <jdiv_round_up@plt>
   266fb:	mov    %eax,0x88(%r14)
   26702:	mov    0x34(%r14),%eax
   26706:	lea    (%rax,%rax,1),%rdi
   2670a:	mov    %r15,%rsi
   2670d:	callq  4150 <jdiv_round_up@plt>
   26712:	mov    %eax,0x8c(%r14)
   26719:	mov    $0x2,%r15d
   2671f:	jmp    266ce <jpeg_core_output_dimensions+0x13e>
   26721:	mov    0x30(%rdi),%eax
   26724:	lea    (%rax,%rax,2),%rax
   26728:	mov    %rdi,%r14
   2672b:	mov    %rax,%rdi
   2672e:	mov    %r15,%rsi
   26731:	callq  4150 <jdiv_round_up@plt>
   26736:	mov    %eax,0x88(%r14)
   2673d:	mov    0x34(%r14),%eax
   26741:	lea    (%rax,%rax,2),%rdi
   26745:	mov    %r15,%rsi
   26748:	callq  4150 <jdiv_round_up@plt>
   2674d:	mov    %eax,0x8c(%r14)
   26754:	mov    $0x3,%r15d
   2675a:	jmpq   266ce <jpeg_core_output_dimensions+0x13e>
   2675f:	mov    0x30(%rdi),%eax
   26762:	shl    $0x2,%rax
   26766:	mov    %rdi,%r14
   26769:	mov    %rax,%rdi
   2676c:	mov    %r15,%rsi
   2676f:	callq  4150 <jdiv_round_up@plt>
   26774:	mov    %eax,0x88(%r14)
   2677b:	mov    0x34(%r14),%edi
   2677f:	shl    $0x2,%rdi
   26783:	mov    %r15,%rsi
   26786:	callq  4150 <jdiv_round_up@plt>
   2678b:	mov    %eax,0x8c(%r14)
   26792:	mov    $0x4,%r15d
   26798:	jmpq   266ce <jpeg_core_output_dimensions+0x13e>
   2679d:	mov    0x30(%rdi),%eax
   267a0:	lea    (%rax,%rax,4),%rax
   267a4:	mov    %rdi,%r14
   267a7:	mov    %rax,%rdi
   267aa:	mov    %r15,%rsi
   267ad:	callq  4150 <jdiv_round_up@plt>
   267b2:	mov    %eax,0x88(%r14)
   267b9:	mov    0x34(%r14),%eax
   267bd:	lea    (%rax,%rax,4),%rdi
   267c1:	mov    %r15,%rsi
   267c4:	callq  4150 <jdiv_round_up@plt>
   267c9:	mov    %eax,0x8c(%r14)
   267d0:	mov    $0x5,%r15d
   267d6:	jmpq   266ce <jpeg_core_output_dimensions+0x13e>
   267db:	mov    0x30(%rdi),%eax
   267de:	lea    (%rax,%rax,2),%rax
   267e2:	add    %rax,%rax
   267e5:	mov    %rdi,%r14
   267e8:	mov    %rax,%rdi
   267eb:	mov    %r15,%rsi
   267ee:	callq  4150 <jdiv_round_up@plt>
   267f3:	mov    %eax,0x88(%r14)
   267fa:	mov    0x34(%r14),%eax
   267fe:	lea    (%rax,%rax,2),%rax
   26802:	lea    (%rax,%rax,1),%rdi
   26806:	mov    %r15,%rsi
   26809:	callq  4150 <jdiv_round_up@plt>
   2680e:	mov    %eax,0x8c(%r14)
   26815:	mov    $0x6,%r15d
   2681b:	jmpq   266ce <jpeg_core_output_dimensions+0x13e>
   26820:	mov    0x30(%rdi),%ecx
   26823:	lea    (%rcx,%rcx,2),%rax
   26827:	lea    (%rcx,%rax,2),%rax
   2682b:	mov    %rdi,%r14
   2682e:	mov    %rax,%rdi
   26831:	mov    %r15,%rsi
   26834:	callq  4150 <jdiv_round_up@plt>
   26839:	mov    %eax,0x88(%r14)
   26840:	mov    0x34(%r14),%ecx
   26844:	lea    (%rcx,%rcx,2),%rax
   26848:	lea    (%rcx,%rax,2),%rdi
   2684c:	mov    %r15,%rsi
   2684f:	callq  4150 <jdiv_round_up@plt>
   26854:	mov    %eax,0x8c(%r14)
   2685b:	mov    $0x7,%r15d
   26861:	jmpq   266ce <jpeg_core_output_dimensions+0x13e>
   26866:	mov    0x30(%rdi),%eax
   26869:	shl    $0x3,%rax
   2686d:	mov    %rdi,%r14
   26870:	mov    %rax,%rdi
   26873:	mov    %r15,%rsi
   26876:	callq  4150 <jdiv_round_up@plt>
   2687b:	mov    %eax,0x88(%r14)
   26882:	mov    0x34(%r14),%edi
   26886:	shl    $0x3,%rdi
   2688a:	mov    %r15,%rsi
   2688d:	callq  4150 <jdiv_round_up@plt>
   26892:	mov    %eax,0x8c(%r14)
   26899:	jmpq   266ce <jpeg_core_output_dimensions+0x13e>
   2689e:	mov    0x30(%rdi),%eax
   268a1:	lea    (%rax,%rax,8),%rax
   268a5:	mov    %rdi,%r14
   268a8:	mov    %rax,%rdi
   268ab:	mov    %r15,%rsi
   268ae:	callq  4150 <jdiv_round_up@plt>
   268b3:	mov    %eax,0x88(%r14)
   268ba:	mov    0x34(%r14),%eax
   268be:	lea    (%rax,%rax,8),%rdi
   268c2:	mov    %r15,%rsi
   268c5:	callq  4150 <jdiv_round_up@plt>
   268ca:	mov    %eax,0x8c(%r14)
   268d1:	mov    $0x9,%r15d
   268d7:	jmpq   266ce <jpeg_core_output_dimensions+0x13e>
   268dc:	mov    0x30(%rdi),%eax
   268df:	lea    (%rax,%rax,4),%rax
   268e3:	add    %rax,%rax
   268e6:	mov    %rdi,%r14
   268e9:	mov    %rax,%rdi
   268ec:	mov    %r15,%rsi
   268ef:	callq  4150 <jdiv_round_up@plt>
   268f4:	mov    %eax,0x88(%r14)
   268fb:	mov    0x34(%r14),%eax
   268ff:	lea    (%rax,%rax,4),%rax
   26903:	lea    (%rax,%rax,1),%rdi
   26907:	mov    %r15,%rsi
   2690a:	callq  4150 <jdiv_round_up@plt>
   2690f:	mov    %eax,0x8c(%r14)
   26916:	mov    $0xa,%r15d
   2691c:	jmpq   266ce <jpeg_core_output_dimensions+0x13e>
   26921:	mov    0x30(%rdi),%ecx
   26924:	lea    (%rcx,%rcx,4),%rax
   26928:	lea    (%rcx,%rax,2),%rax
   2692c:	mov    %rdi,%r14
   2692f:	mov    %rax,%rdi
   26932:	mov    %r15,%rsi
   26935:	callq  4150 <jdiv_round_up@plt>
   2693a:	mov    %eax,0x88(%r14)
   26941:	mov    0x34(%r14),%ecx
   26945:	lea    (%rcx,%rcx,4),%rax
   26949:	lea    (%rcx,%rax,2),%rdi
   2694d:	mov    %r15,%rsi
   26950:	callq  4150 <jdiv_round_up@plt>
   26955:	mov    %eax,0x8c(%r14)
   2695c:	mov    $0xb,%r15d
   26962:	jmpq   266ce <jpeg_core_output_dimensions+0x13e>
   26967:	mov    0x30(%rdi),%eax
   2696a:	lea    (%rax,%rax,2),%rax
   2696e:	shl    $0x2,%rax
   26972:	mov    %rdi,%r14
   26975:	mov    %rax,%rdi
   26978:	mov    %r15,%rsi
   2697b:	callq  4150 <jdiv_round_up@plt>
   26980:	mov    %eax,0x88(%r14)
   26987:	mov    0x34(%r14),%eax
   2698b:	lea    (%rax,%rax,2),%rdi
   2698f:	shl    $0x2,%rdi
   26993:	mov    %r15,%rsi
   26996:	callq  4150 <jdiv_round_up@plt>
   2699b:	mov    %eax,0x8c(%r14)
   269a2:	mov    $0xc,%r15d
   269a8:	jmpq   266ce <jpeg_core_output_dimensions+0x13e>
   269ad:	mov    0x30(%rdi),%ecx
   269b0:	lea    (%rcx,%rcx,2),%rax
   269b4:	lea    (%rcx,%rax,4),%rax
   269b8:	mov    %rdi,%r14
   269bb:	mov    %rax,%rdi
   269be:	mov    %r15,%rsi
   269c1:	callq  4150 <jdiv_round_up@plt>
   269c6:	mov    %eax,0x88(%r14)
   269cd:	mov    0x34(%r14),%ecx
   269d1:	lea    (%rcx,%rcx,2),%rax
   269d5:	lea    (%rcx,%rax,4),%rdi
   269d9:	mov    %r15,%rsi
   269dc:	callq  4150 <jdiv_round_up@plt>
   269e1:	mov    %eax,0x8c(%r14)
   269e8:	mov    $0xd,%r15d
   269ee:	jmpq   266ce <jpeg_core_output_dimensions+0x13e>
   269f3:	mov    0x30(%rdi),%ecx
   269f6:	lea    (%rcx,%rcx,2),%rax
   269fa:	shl    $0x2,%rax
   269fe:	lea    (%rax,%rcx,2),%rax
   26a02:	mov    %rdi,%r14
   26a05:	mov    %rax,%rdi
   26a08:	mov    %r15,%rsi
   26a0b:	callq  4150 <jdiv_round_up@plt>
   26a10:	mov    %eax,0x88(%r14)
   26a17:	mov    0x34(%r14),%ecx
   26a1b:	lea    (%rcx,%rcx,2),%rax
   26a1f:	shl    $0x2,%rax
   26a23:	lea    (%rax,%rcx,2),%rdi
   26a27:	mov    %r15,%rsi
   26a2a:	callq  4150 <jdiv_round_up@plt>
   26a2f:	mov    %eax,0x8c(%r14)
   26a36:	mov    $0xe,%r15d
   26a3c:	jmpq   266ce <jpeg_core_output_dimensions+0x13e>
   26a41:	mov    0x30(%rdi),%ecx
   26a44:	mov    %rcx,%rax
   26a47:	shl    $0x4,%rax
   26a4b:	sub    %rcx,%rax
   26a4e:	mov    %rdi,%r14
   26a51:	mov    %rax,%rdi
   26a54:	mov    %r15,%rsi
   26a57:	callq  4150 <jdiv_round_up@plt>
   26a5c:	mov    %eax,0x88(%r14)
   26a63:	mov    0x34(%r14),%eax
   26a67:	mov    %rax,%rdi
   26a6a:	shl    $0x4,%rdi
   26a6e:	sub    %rax,%rdi
   26a71:	mov    %r15,%rsi
   26a74:	callq  4150 <jdiv_round_up@plt>
   26a79:	mov    %eax,0x8c(%r14)
   26a80:	mov    $0xf,%r15d
   26a86:	jmpq   266ce <jpeg_core_output_dimensions+0x13e>
   26a8b:	movslq 0x1a0(%r14),%rdx
   26a92:	mov    %edx,(%rax)
   26a94:	movslq 0x1a0(%r14),%rdx
   26a9b:	mov    %edx,(%rax)
   26a9d:	add    $0x1,%ecx
   26aa0:	add    $0x60,%rax
   26aa4:	movslq 0x38(%r14),%rdx
   26aa8:	cmp    %ecx,%edx
   26aaa:	jg     26a8b <jpeg_core_output_dimensions+0x4fb>
   26aac:	mov    -0x10(%rbp),%r15
   26ab0:	mov    -0x8(%rbp),%r14
   26ab4:	leaveq 
   26ab5:	retq   
   26ab6:	nopw   %cs:0x0(%rax,%rax,1)

0000000000026ac0 <prepare_range_limit_table>:
   26ac0:	push   %rbp
   26ac1:	mov    %rsp,%rbp
   26ac4:	sub    $0x20,%rsp
   26ac8:	mov    %r15,-0x20(%rbp)
   26acc:	mov    %r12,-0x8(%rbp)
   26ad0:	mov    %r13,-0x10(%rbp)
   26ad4:	mov    %r14,-0x18(%rbp)
   26ad8:	mov    0x8(%rdi),%rax
   26adc:	mov    (%rax),%rax
   26adf:	mov    $0x1,%esi
   26ae4:	mov    $0x580,%edx
   26ae9:	mov    %rdi,%r12
   26aec:	callq  *%rax
   26aee:	mov    %rax,%r15
   26af1:	lea    0x100(%r15),%r13
   26af8:	mov    %r13,0x1a8(%r12)
   26b00:	xor    %r14d,%r14d
   26b03:	mov    $0x100,%edx
   26b08:	mov    %r15,%rdi
   26b0b:	mov    %r14,%rsi
   26b0e:	callq  41e0 <memset@plt>
   26b13:	mov    %r14,%rcx
   26b16:	jmp    26b23 <prepare_range_limit_table+0x63>
   26b18:	movslq %ecx,%rax
   26b1b:	mov    %cl,0x0(%r13,%rax,1)
   26b20:	add    $0x1,%ecx
   26b23:	cmp    $0xff,%ecx
   26b29:	jle    26b18 <prepare_range_limit_table+0x58>
   26b2b:	mov    $0x80,%r13d
   26b31:	mov    %r13,%rcx
   26b34:	jmp    26b45 <prepare_range_limit_table+0x85>
   26b36:	movslq %ecx,%rax
   26b39:	movb   $0xff,0x180(%r15,%rax,1)
   26b42:	add    $0x1,%ecx
   26b45:	cmp    $0x1ff,%ecx
   26b4b:	jle    26b36 <prepare_range_limit_table+0x76>
   26b4d:	mov    %r14,%rsi
   26b50:	lea    0x380(%r15),%rdi
   26b57:	mov    $0x180,%edx
   26b5c:	callq  41e0 <memset@plt>
   26b61:	lea    0x500(%r15),%rdi
   26b68:	mov    0x1a8(%r12),%rsi
   26b70:	mov    %r13,%rdx
   26b73:	callq  42c0 <memcpy@plt>
   26b78:	mov    -0x18(%rbp),%r14
   26b7c:	mov    -0x10(%rbp),%r13
   26b80:	mov    -0x8(%rbp),%r12
   26b84:	mov    -0x20(%rbp),%r15
   26b88:	leaveq 
   26b89:	retq   
   26b8a:	nopw   0x0(%rax,%rax,1)

0000000000026b90 <master_selection>:
   26b90:	push   %rbp
   26b91:	mov    %rsp,%rbp
   26b94:	sub    $0x20,%rsp
   26b98:	mov    %r14,-0x10(%rbp)
   26b9c:	mov    %r15,-0x18(%rbp)
   26ba0:	mov    0x220(%rdi),%r15
   26ba7:	mov    %r15,-0x8(%rbp)
   26bab:	mov    %rdi,%r14
   26bae:	callq  42d0 <jpeg_calc_output_dimensions@plt>
   26bb3:	mov    %r14,%rdi
   26bb6:	callq  26ac0 <prepare_range_limit_table>
   26bbb:	movslq 0x90(%r14),%rax
   26bc2:	mov    0x88(%r14),%ecx
   26bc9:	imul   %rcx,%rax
   26bcd:	mov    %eax,%ecx
   26bcf:	cmp    %rax,%rcx
   26bd2:	je     26be9 <master_selection+0x59>
   26bd4:	mov    (%r14),%rax
   26bd7:	movl   $0x46,0x28(%rax)
   26bde:	mov    (%r14),%rax
   26be1:	mov    (%rax),%rax
   26be4:	mov    %r14,%rdi
   26be7:	callq  *%rax
   26be9:	movl   $0x0,0x70(%r15)
   26bf1:	mov    %r14,%rdi
   26bf4:	callq  26400 <use_merged_upsample>
   26bf9:	mov    %eax,0x74(%r15)
   26bfd:	movq   $0x0,0x78(%r15)
   26c05:	movq   $0x0,0x80(%r15)
   26c10:	movslq 0x6c(%r14),%rax
   26c14:	test   %eax,%eax
   26c16:	jne    26c64 <master_selection+0xd4>
   26c18:	movl   $0x0,0x7c(%r14)
   26c20:	movl   $0x0,0x80(%r14)
   26c2b:	movl   $0x0,0x84(%r14)
   26c36:	movslq 0x6c(%r14),%rax
   26c3a:	test   %eax,%eax
   26c3c:	jne    26c6e <master_selection+0xde>
   26c3e:	movslq 0x5c(%r14),%rax
   26c42:	test   %eax,%eax
   26c44:	jne    26cd4 <master_selection+0x144>
   26c4a:	movslq 0x74(%r15),%rax
   26c4e:	test   %eax,%eax
   26c50:	jne    26cbd <master_selection+0x12d>
   26c52:	mov    %r14,%rdi
   26c55:	callq  4360 <jinit_color_deconverter@plt>
   26c5a:	mov    %r14,%rdi
   26c5d:	callq  43e0 <jinit_upsampler@plt>
   26c62:	jmp    26cc5 <master_selection+0x135>
   26c64:	movslq 0x58(%r14),%rax
   26c68:	test   %eax,%eax
   26c6a:	jne    26c36 <master_selection+0xa6>
   26c6c:	jmp    26c18 <master_selection+0x88>
   26c6e:	movslq 0x5c(%r14),%rax
   26c72:	test   %eax,%eax
   26c74:	je     26c8b <master_selection+0xfb>
   26c76:	mov    (%r14),%rax
   26c79:	movl   $0x2f,0x28(%rax)
   26c80:	mov    (%r14),%rax
   26c83:	mov    (%rax),%rax
   26c86:	mov    %r14,%rdi
   26c89:	callq  *%rax
   26c8b:	movslq 0x90(%r14),%rax
   26c92:	cmp    $0x3,%eax
   26c95:	jne    26d07 <master_selection+0x177>
   26c97:	mov    0xa0(%r14),%rax
   26c9e:	test   %rax,%rax
   26ca1:	jne    26d80 <master_selection+0x1f0>
   26ca7:	movslq 0x74(%r14),%rax
   26cab:	test   %eax,%eax
   26cad:	jne    26d8d <master_selection+0x1fd>
   26cb3:	movl   $0x1,0x7c(%r14)
   26cbb:	jmp    26d30 <master_selection+0x1a0>
   26cbd:	mov    %r14,%rdi
   26cc0:	callq  4290 <jinit_merged_upsampler@plt>
   26cc5:	movslq 0x84(%r14),%rsi
   26ccc:	mov    %r14,%rdi
   26ccf:	callq  4220 <jinit_d_post_controller@plt>
   26cd4:	mov    %r14,%rdi
   26cd7:	callq  4300 <jinit_inverse_dct@plt>
   26cdc:	movslq 0x13c(%r14),%rax
   26ce3:	test   %eax,%eax
   26ce5:	jne    26d9a <master_selection+0x20a>
   26ceb:	movslq 0x138(%r14),%rax
   26cf2:	test   %eax,%eax
   26cf4:	jne    26e26 <master_selection+0x296>
   26cfa:	mov    %r14,%rdi
   26cfd:	callq  40b0 <jinit_huff_decoder@plt>
   26d02:	jmpq   26da2 <master_selection+0x212>
   26d07:	movl   $0x1,0x7c(%r14)
   26d0f:	movl   $0x0,0x80(%r14)
   26d1a:	movl   $0x0,0x84(%r14)
   26d25:	movq   $0x0,0xa0(%r14)
   26d30:	movslq 0x7c(%r14),%rax
   26d34:	test   %eax,%eax
   26d36:	je     26d4b <master_selection+0x1bb>
   26d38:	mov    %r14,%rdi
   26d3b:	callq  4230 <jinit_1pass_quantizer@plt>
   26d40:	mov    0x270(%r14),%rax
   26d47:	mov    %rax,0x78(%r15)
   26d4b:	movslq 0x84(%r14),%rax
   26d52:	test   %eax,%eax
   26d54:	jne    26d65 <master_selection+0x1d5>
   26d56:	movslq 0x80(%r14),%rax
   26d5d:	test   %eax,%eax
   26d5f:	je     26c3e <master_selection+0xae>
   26d65:	mov    %r14,%rdi
   26d68:	callq  4100 <jinit_2pass_quantizer@plt>
   26d6d:	mov    0x270(%r14),%rax
   26d74:	mov    %rax,0x80(%r15)
   26d7b:	jmpq   26c3e <master_selection+0xae>
   26d80:	movl   $0x1,0x80(%r14)
   26d8b:	jmp    26d30 <master_selection+0x1a0>
   26d8d:	movl   $0x1,0x84(%r14)
   26d98:	jmp    26d30 <master_selection+0x1a0>
   26d9a:	mov    %r14,%rdi
   26d9d:	callq  4090 <jinit_arith_decoder@plt>
   26da2:	xor    %r15d,%r15d
   26da5:	mov    $0x1,%esi
   26daa:	mov    0x240(%r14),%rax
   26db1:	movslq 0x20(%rax),%rax
   26db5:	test   %eax,%eax
   26db7:	je     26e33 <master_selection+0x2a3>
   26db9:	mov    %r14,%rdi
   26dbc:	callq  4050 <jinit_d_coef_controller@plt>
   26dc1:	movslq 0x5c(%r14),%rax
   26dc5:	test   %eax,%eax
   26dc7:	jne    26dd4 <master_selection+0x244>
   26dc9:	mov    %r15,%rsi
   26dcc:	mov    %r14,%rdi
   26dcf:	callq  4250 <jinit_d_main_controller@plt>
   26dd4:	mov    0x8(%r14),%rax
   26dd8:	mov    0x30(%rax),%rax
   26ddc:	mov    %r14,%rdi
   26ddf:	callq  *%rax
   26de1:	mov    0x240(%r14),%rax
   26de8:	mov    0x10(%rax),%rax
   26dec:	mov    %r14,%rdi
   26def:	callq  *%rax
   26df1:	mov    0x220(%r14),%rax
   26df8:	movl   $0x0,0x14(%rax)
   26dff:	mov    0x1d8(%r14),%eax
   26e06:	add    $0xffffffff,%eax
   26e09:	mov    0x220(%r14),%rcx
   26e10:	mov    %eax,0x18(%rcx)
   26e13:	mov    0x10(%r14),%rax
   26e17:	test   %rax,%rax
   26e1a:	jne    26e47 <master_selection+0x2b7>
   26e1c:	mov    -0x18(%rbp),%r15
   26e20:	mov    -0x10(%rbp),%r14
   26e24:	leaveq 
   26e25:	retq   
   26e26:	mov    %r14,%rdi
   26e29:	callq  41d0 <jinit_phuff_decoder@plt>
   26e2e:	jmpq   26da2 <master_selection+0x212>
   26e33:	movslq 0x58(%r14),%rax
   26e37:	test   %eax,%eax
   26e39:	jne    26db9 <master_selection+0x229>
   26e3f:	mov    %r15,%rsi
   26e42:	jmpq   26db9 <master_selection+0x229>
   26e47:	movslq 0x58(%r14),%rax
   26e4b:	test   %eax,%eax
   26e4d:	je     26e59 <master_selection+0x2c9>
   26e4f:	mov    -0x18(%rbp),%r15
   26e53:	mov    -0x10(%rbp),%r14
   26e57:	leaveq 
   26e58:	retq   
   26e59:	mov    0x240(%r14),%rax
   26e60:	movslq 0x20(%rax),%rax
   26e64:	test   %eax,%eax
   26e66:	jne    26e72 <master_selection+0x2e2>
   26e68:	mov    -0x18(%rbp),%r15
   26e6c:	mov    -0x10(%rbp),%r14
   26e70:	leaveq 
   26e71:	retq   
   26e72:	movslq 0x138(%r14),%rax
   26e79:	test   %eax,%eax
   26e7b:	jne    26e83 <master_selection+0x2f3>
   26e7d:	movslq 0x38(%r14),%rax
   26e81:	jmp    26e8b <master_selection+0x2fb>
   26e83:	movslq 0x38(%r14),%rax
   26e87:	lea    0x2(%rax,%rax,2),%eax
   26e8b:	mov    0x10(%r14),%rcx
   26e8f:	movq   $0x0,0x8(%rcx)
   26e97:	movslq %eax,%rax
   26e9a:	mov    0x1a4(%r14),%ecx
   26ea1:	imul   %rcx,%rax
   26ea5:	mov    0x10(%r14),%rcx
   26ea9:	mov    %rax,0x10(%rcx)
   26ead:	mov    0x10(%r14),%rax
   26eb1:	movl   $0x0,0x18(%rax)
   26eb8:	mov    0x10(%r14),%rcx
   26ebc:	movslq 0x84(%r14),%rax
   26ec3:	test   %eax,%eax
   26ec5:	jne    26ece <master_selection+0x33e>
   26ec7:	mov    $0x2,%eax
   26ecc:	jmp    26ed3 <master_selection+0x343>
   26ece:	mov    $0x3,%eax
   26ed3:	mov    %eax,0x1c(%rcx)
   26ed6:	mov    -0x8(%rbp),%rcx
   26eda:	movslq 0x70(%rcx),%rax
   26ede:	add    $0x1,%eax
   26ee1:	mov    %eax,0x70(%rcx)
   26ee4:	mov    -0x18(%rbp),%r15
   26ee8:	mov    -0x10(%rbp),%r14
   26eec:	leaveq 
   26eed:	retq   
   26eee:	xchg   %ax,%ax

0000000000026ef0 <prepare_for_output_pass>:
   26ef0:	push   %rbp
   26ef1:	mov    %rsp,%rbp
   26ef4:	sub    $0x10,%rsp
   26ef8:	mov    %r14,-0x8(%rbp)
   26efc:	mov    %r15,-0x10(%rbp)
   26f00:	xor    %esi,%esi
   26f02:	mov    0x220(%rdi),%r15
   26f09:	movslq 0x10(%r15),%rax
   26f0d:	test   %eax,%eax
   26f0f:	jne    26fa6 <prepare_for_output_pass+0xb6>
   26f15:	movslq 0x6c(%rdi),%rax
   26f19:	test   %eax,%eax
   26f1b:	jne    26ff8 <prepare_for_output_pass+0x108>
   26f21:	mov    %rdi,%r14
   26f24:	mov    0x258(%r14),%rax
   26f2b:	mov    (%rax),%rax
   26f2e:	mov    %r14,%rdi
   26f31:	callq  *%rax
   26f33:	mov    0x230(%r14),%rax
   26f3a:	mov    0x10(%rax),%rax
   26f3e:	mov    %r14,%rdi
   26f41:	callq  *%rax
   26f43:	movslq 0x5c(%r14),%rax
   26f47:	test   %eax,%eax
   26f49:	jne    26fe5 <prepare_for_output_pass+0xf5>
   26f4f:	movslq 0x74(%r15),%rax
   26f53:	test   %eax,%eax
   26f55:	jne    26f66 <prepare_for_output_pass+0x76>
   26f57:	mov    0x268(%r14),%rax
   26f5e:	mov    (%rax),%rax
   26f61:	mov    %r14,%rdi
   26f64:	callq  *%rax
   26f66:	mov    0x260(%r14),%rax
   26f6d:	mov    (%rax),%rax
   26f70:	mov    %r14,%rdi
   26f73:	callq  *%rax
   26f75:	movslq 0x6c(%r14),%rax
   26f79:	test   %eax,%eax
   26f7b:	je     26f90 <prepare_for_output_pass+0xa0>
   26f7d:	mov    0x270(%r14),%rax
   26f84:	mov    (%rax),%rax
   26f87:	movslq 0x10(%r15),%rsi
   26f8b:	mov    %r14,%rdi
   26f8e:	callq  *%rax
   26f90:	mov    0x238(%r14),%rax
   26f97:	mov    (%rax),%rax
   26f9a:	movslq 0x10(%r15),%rcx
   26f9e:	test   %ecx,%ecx
   26fa0:	jne    2700c <prepare_for_output_pass+0x11c>
   26fa2:	xor    %esi,%esi
   26fa4:	jmp    27011 <prepare_for_output_pass+0x121>
   26fa6:	movl   $0x0,0x10(%r15)
   26fae:	mov    0x270(%rdi),%rax
   26fb5:	mov    (%rax),%rax
   26fb8:	mov    %rdi,%r14
   26fbb:	callq  *%rax
   26fbd:	mov    0x238(%r14),%rax
   26fc4:	mov    (%rax),%rax
   26fc7:	mov    %r14,%rdi
   26fca:	mov    $0x2,%esi
   26fcf:	callq  *%rax
   26fd1:	mov    0x228(%r14),%rax
   26fd8:	mov    (%rax),%rax
   26fdb:	mov    %r14,%rdi
   26fde:	mov    $0x2,%esi
   26fe3:	callq  *%rax
   26fe5:	mov    0x10(%r14),%rax
   26fe9:	test   %rax,%rax
   26fec:	jne    27029 <prepare_for_output_pass+0x139>
   26fee:	mov    -0x10(%rbp),%r15
   26ff2:	mov    -0x8(%rbp),%r14
   26ff6:	leaveq 
   26ff7:	retq   
   26ff8:	mov    0xa0(%rdi),%rax
   26fff:	test   %rax,%rax
   27002:	je     2704a <prepare_for_output_pass+0x15a>
   27004:	mov    %rdi,%r14
   27007:	jmpq   26f24 <prepare_for_output_pass+0x34>
   2700c:	mov    $0x3,%esi
   27011:	mov    %r14,%rdi
   27014:	callq  *%rax
   27016:	mov    0x228(%r14),%rax
   2701d:	mov    (%rax),%rax
   27020:	mov    %r14,%rdi
   27023:	xor    %esi,%esi
   27025:	callq  *%rax
   27027:	jmp    26fe5 <prepare_for_output_pass+0xf5>
   27029:	movslq 0x70(%r15),%rcx
   2702d:	mov    %ecx,0x18(%rax)
   27030:	movslq 0x70(%r15),%rsi
   27034:	mov    0x10(%r14),%rdx
   27038:	mov    $0x1,%ecx
   2703d:	movslq 0x10(%r15),%rax
   27041:	test   %eax,%eax
   27043:	jne    27074 <prepare_for_output_pass+0x184>
   27045:	mov    %rcx,%rax
   27048:	jmp    27079 <prepare_for_output_pass+0x189>
   2704a:	movslq 0x74(%rdi),%rax
   2704e:	test   %eax,%eax
   27050:	jne    27090 <prepare_for_output_pass+0x1a0>
   27052:	movslq 0x7c(%rdi),%rax
   27056:	test   %eax,%eax
   27058:	jne    270b9 <prepare_for_output_pass+0x1c9>
   2705a:	mov    (%rdi),%rax
   2705d:	movl   $0x2e,0x28(%rax)
   27064:	mov    (%rdi),%rax
   27067:	mov    (%rax),%rax
   2706a:	mov    %rdi,%r14
   2706d:	callq  *%rax
   2706f:	jmpq   26f24 <prepare_for_output_pass+0x34>
   27074:	mov    $0x2,%eax
   27079:	add    %esi,%eax
   2707b:	mov    %eax,0x1c(%rdx)
   2707e:	movslq 0x58(%r14),%rax
   27082:	test   %eax,%eax
   27084:	jne    270cc <prepare_for_output_pass+0x1dc>
   27086:	mov    -0x10(%rbp),%r15
   2708a:	mov    -0x8(%rbp),%r14
   2708e:	leaveq 
   2708f:	retq   
   27090:	movslq 0x84(%rdi),%rax
   27097:	test   %eax,%eax
   27099:	je     27052 <prepare_for_output_pass+0x162>
   2709b:	mov    0x80(%r15),%rax
   270a2:	mov    %rax,0x270(%rdi)
   270a9:	movl   $0x1,0x10(%r15)
   270b1:	mov    %rdi,%r14
   270b4:	jmpq   26f24 <prepare_for_output_pass+0x34>
   270b9:	mov    0x78(%r15),%rax
   270bd:	mov    %rax,0x270(%rdi)
   270c4:	mov    %rdi,%r14
   270c7:	jmpq   26f24 <prepare_for_output_pass+0x34>
   270cc:	mov    0x240(%r14),%rax
   270d3:	movslq 0x24(%rax),%rax
   270d7:	test   %eax,%eax
   270d9:	je     270e5 <prepare_for_output_pass+0x1f5>
   270db:	mov    -0x10(%rbp),%r15
   270df:	mov    -0x8(%rbp),%r14
   270e3:	leaveq 
   270e4:	retq   
   270e5:	movslq 0x84(%r14),%rax
   270ec:	test   %eax,%eax
   270ee:	je     270f5 <prepare_for_output_pass+0x205>
   270f0:	mov    $0x2,%ecx
   270f5:	mov    0x10(%r14),%rax
   270f9:	add    0x1c(%rax),%ecx
   270fc:	mov    %ecx,0x1c(%rax)
   270ff:	mov    -0x10(%rbp),%r15
   27103:	mov    -0x8(%rbp),%r14
   27107:	leaveq 
   27108:	retq   
   27109:	nopl   0x0(%rax)

0000000000027110 <finish_output_pass>:
   27110:	push   %rbp
   27111:	mov    %rsp,%rbp
   27114:	sub    $0x10,%rsp
   27118:	mov    0x220(%rdi),%rax
   2711f:	movslq 0x6c(%rdi),%rcx
   27123:	test   %ecx,%ecx
   27125:	je     27142 <finish_output_pass+0x32>
   27127:	mov    0x270(%rdi),%rcx
   2712e:	mov    0x10(%rcx),%rcx
   27132:	mov    %r15,-0x8(%rbp)
   27136:	mov    %rax,%r15
   27139:	callq  *%rcx
   2713b:	mov    %r15,%rax
   2713e:	mov    -0x8(%rbp),%r15
   27142:	movslq 0x70(%rax),%rcx
   27146:	add    $0x1,%ecx
   27149:	mov    %ecx,0x70(%rax)
   2714c:	leaveq 
   2714d:	retq   
   2714e:	xchg   %ax,%ax

0000000000027150 <jinit_merged_upsampler>:
   27150:	push   %rbp
   27151:	mov    %rsp,%rbp
   27154:	sub    $0x10,%rsp
   27158:	mov    %r15,-0x10(%rbp)
   2715c:	mov    %r14,-0x8(%rbp)
   27160:	mov    0x8(%rdi),%rax
   27164:	mov    (%rax),%rax
   27167:	mov    $0x1,%esi
   2716c:	mov    $0x58,%edx
   27171:	mov    %rdi,%r14
   27174:	callq  *%rax
   27176:	mov    %rax,0x260(%r14)
   2717d:	lea    0x1ebc(%rip),%rcx        # 29040 <start_pass_merged_upsample>
   27184:	mov    %rcx,(%rax)
   27187:	movl   $0x0,0x10(%rax)
   2718e:	mov    0x90(%r14),%ecx
   27195:	imul   0x88(%r14),%ecx
   2719d:	mov    %ecx,0x4c(%rax)
   271a0:	movslq 0x19c(%r14),%rcx
   271a7:	cmp    $0x2,%ecx
   271aa:	je     271d0 <jinit_merged_upsampler+0x80>
   271ac:	lea    0x1fdd(%rip),%rcx        # 29190 <merged_1v_upsample>
   271b3:	mov    %rcx,0x8(%rax)
   271b7:	mov    %rax,%r15
   271ba:	callq  3da20 <jsimd_can_h2v1_merged_upsample>
   271bf:	test   %eax,%eax
   271c1:	jne    271f4 <jinit_merged_upsampler+0xa4>
   271c3:	lea    0x2016(%rip),%rax        # 291e0 <h2v1_merged_upsample>
   271ca:	mov    %rax,0x18(%r15)
   271ce:	jmp    271ff <jinit_merged_upsampler+0xaf>
   271d0:	lea    0x1e89(%rip),%rcx        # 29060 <merged_2v_upsample>
   271d7:	mov    %rcx,0x8(%rax)
   271db:	mov    %rax,%r15
   271de:	callq  3d9e0 <jsimd_can_h2v2_merged_upsample>
   271e3:	test   %eax,%eax
   271e5:	jne    27212 <jinit_merged_upsampler+0xc2>
   271e7:	lea    0x2042(%rip),%rax        # 29230 <h2v2_merged_upsample>
   271ee:	mov    %rax,0x18(%r15)
   271f2:	jmp    2721d <jinit_merged_upsampler+0xcd>
   271f4:	lea    0x168d5(%rip),%rax        # 3dad0 <jsimd_h2v1_merged_upsample>
   271fb:	mov    %rax,0x18(%r15)
   271ff:	mov    0x40(%r14),%eax
   27203:	cmp    $0x10,%eax
   27206:	je     27252 <jinit_merged_upsampler+0x102>
   27208:	movq   $0x0,0x40(%r15)
   27210:	jmp    27240 <jinit_merged_upsampler+0xf0>
   27212:	lea    0x16847(%rip),%rax        # 3da60 <jsimd_h2v2_merged_upsample>
   27219:	mov    %rax,0x18(%r15)
   2721d:	mov    0x40(%r14),%eax
   27221:	cmp    $0x10,%eax
   27224:	je     27267 <jinit_merged_upsampler+0x117>
   27226:	mov    0x8(%r14),%rax
   2722a:	mov    0x8(%rax),%rax
   2722e:	mov    0x4c(%r15),%edx
   27232:	mov    %r14,%rdi
   27235:	mov    $0x1,%esi
   2723a:	callq  *%rax
   2723c:	mov    %rax,0x40(%r15)
   27240:	mov    %r14,%rdi
   27243:	callq  28f20 <build_ycc_rgb_table>
   27248:	mov    -0x8(%rbp),%r14
   2724c:	mov    -0x10(%rbp),%r15
   27250:	leaveq 
   27251:	retq   
   27252:	mov    0x70(%r14),%eax
   27256:	test   %eax,%eax
   27258:	jne    2727c <jinit_merged_upsampler+0x12c>
   2725a:	lea    0x380f(%rip),%rax        # 2aa70 <h2v1_merged_upsample_565>
   27261:	mov    %rax,0x18(%r15)
   27265:	jmp    27208 <jinit_merged_upsampler+0xb8>
   27267:	mov    0x70(%r14),%eax
   2726b:	test   %eax,%eax
   2726d:	jne    2728c <jinit_merged_upsampler+0x13c>
   2726f:	lea    0x38fa(%rip),%rax        # 2ab70 <h2v2_merged_upsample_565>
   27276:	mov    %rax,0x18(%r15)
   2727a:	jmp    27226 <jinit_merged_upsampler+0xd6>
   2727c:	lea    0x386d(%rip),%rax        # 2aaf0 <h2v1_merged_upsample_565D>
   27283:	mov    %rax,0x18(%r15)
   27287:	jmpq   27208 <jinit_merged_upsampler+0xb8>
   2728c:	lea    0x395d(%rip),%rax        # 2abf0 <h2v2_merged_upsample_565D>
   27293:	mov    %rax,0x18(%r15)
   27297:	jmp    27226 <jinit_merged_upsampler+0xd6>
   27299:	nopl   0x0(%rax)

00000000000272a0 <h2v1_merged_upsample_internal>:
   272a0:	push   %rbp
   272a1:	mov    %rsp,%rbp
   272a4:	sub    $0x40,%rsp
   272a8:	mov    %r15,-0x28(%rbp)
   272ac:	mov    %r14,-0x20(%rbp)
   272b0:	mov    %rdi,-0x30(%rbp)
   272b4:	mov    %rbx,-0x8(%rbp)
   272b8:	mov    %r12,-0x10(%rbp)
   272bc:	mov    %r13,-0x18(%rbp)
   272c0:	mov    0x1a8(%rdi),%r13
   272c7:	mov    0x260(%rdi),%rbx
   272ce:	mov    0x28(%rbx),%r12
   272d2:	mov    0x30(%rbx),%rax
   272d6:	mov    %rax,-0x40(%rbp)
   272da:	mov    0x38(%rbx),%r8
   272de:	mov    %r8,-0x38(%rbp)
   272e2:	mov    0x20(%rbx),%r11
   272e6:	mov    (%rsi),%rbx
   272e9:	mov    %edx,%r9d
   272ec:	mov    (%rbx,%r9,8),%rdx
   272f0:	mov    0x8(%rsi),%rbx
   272f4:	mov    (%rbx,%r9,8),%rbx
   272f8:	mov    0x10(%rsi),%rsi
   272fc:	mov    (%rsi,%r9,8),%r9
   27300:	mov    (%rcx),%rsi
   27303:	mov    0x88(%rdi),%ecx
   27309:	shr    %ecx
   2730b:	jmpq   273ae <h2v1_merged_upsample_internal+0x10e>
   27310:	movzbl (%r9),%r10d
   27314:	movslq (%r11,%r10,4),%r15
   27318:	movzbl (%rdx),%edi
   2731b:	lea    (%rdi,%r15,1),%r14d
   2731f:	movslq %r14d,%r14
   27322:	movzbl 0x0(%r13,%r14,1),%r14d
   27328:	mov    (%rax,%r10,8),%rax
   2732c:	movzbl (%rbx),%r10d
   27330:	add    (%r8,%r10,8),%rax
   27334:	sar    $0x10,%rax
   27338:	lea    (%rdi,%rax,1),%r8d
   2733c:	movslq %r8d,%r8
   2733f:	movslq (%r12,%r10,4),%r10
   27343:	mov    %r14b,(%rsi)
   27346:	movzbl 0x0(%r13,%r8,1),%r8d
   2734c:	mov    %r8b,0x1(%rsi)
   27350:	add    %r10d,%edi
   27353:	movslq %edi,%rdi
   27356:	movzbl (%rdi,%r13,1),%edi
   2735b:	mov    %dil,0x2(%rsi)
   2735f:	movzbl 0x1(%rdx),%r8d
   27364:	lea    (%r8,%r15,1),%edi
   27368:	movslq %edi,%rdi
   2736b:	movzbl 0x0(%r13,%rdi,1),%edi
   27371:	mov    %dil,0x3(%rsi)
   27375:	add    %r8d,%eax
   27378:	movslq %eax,%rax
   2737b:	movzbl 0x0(%r13,%rax,1),%eax
   27381:	mov    %al,0x4(%rsi)
   27384:	lea    (%r8,%r10,1),%eax
   27388:	movslq %eax,%rax
   2738b:	movzbl (%rax,%r13,1),%eax
   27390:	mov    %al,0x5(%rsi)
   27393:	add    $0x2,%rdx
   27397:	add    $0x1,%rbx
   2739b:	add    $0x1,%r9
   2739f:	add    $0x6,%rsi
   273a3:	add    $0xffffffff,%ecx
   273a6:	mov    -0x38(%rbp),%r8
   273aa:	mov    -0x40(%rbp),%rax
   273ae:	test   %ecx,%ecx
   273b0:	jne    27310 <h2v1_merged_upsample_internal+0x70>
   273b6:	mov    -0x30(%rbp),%rcx
   273ba:	mov    0x88(%rcx),%ecx
   273c0:	and    $0x1,%ecx
   273c3:	test   %ecx,%ecx
   273c5:	jne    273dd <h2v1_merged_upsample_internal+0x13d>
   273c7:	mov    -0x18(%rbp),%r13
   273cb:	mov    -0x10(%rbp),%r12
   273cf:	mov    -0x8(%rbp),%rbx
   273d3:	mov    -0x20(%rbp),%r14
   273d7:	mov    -0x28(%rbp),%r15
   273db:	leaveq 
   273dc:	retq   
   273dd:	movzbl (%rdx),%ecx
   273e0:	movzbl (%r9),%edi
   273e4:	mov    %rcx,%rdx
   273e7:	add    (%r11,%rdi,4),%edx
   273eb:	movslq %edx,%rdx
   273ee:	movzbl 0x0(%r13,%rdx,1),%edx
   273f4:	mov    (%rax,%rdi,8),%rax
   273f8:	movzbl (%rbx),%edi
   273fb:	add    (%r8,%rdi,8),%rax
   273ff:	sar    $0x10,%rax
   27403:	add    %ecx,%eax
   27405:	movslq %eax,%rax
   27408:	add    (%r12,%rdi,4),%ecx
   2740c:	mov    %dl,(%rsi)
   2740e:	movzbl 0x0(%r13,%rax,1),%eax
   27414:	mov    %al,0x1(%rsi)
   27417:	movslq %ecx,%rax
   2741a:	movzbl 0x0(%r13,%rax,1),%eax
   27420:	mov    %al,0x2(%rsi)
   27423:	mov    -0x18(%rbp),%r13
   27427:	mov    -0x10(%rbp),%r12
   2742b:	mov    -0x8(%rbp),%rbx
   2742f:	mov    -0x20(%rbp),%r14
   27433:	mov    -0x28(%rbp),%r15
   27437:	leaveq 
   27438:	retq   
   27439:	nopl   0x0(%rax)

0000000000027440 <h2v2_merged_upsample_internal>:
   27440:	push   %rbp
   27441:	mov    %rsp,%rbp
   27444:	sub    $0x50,%rsp
   27448:	mov    %r15,-0x28(%rbp)
   2744c:	mov    %r14,-0x20(%rbp)
   27450:	mov    %r13,-0x18(%rbp)
   27454:	mov    %r12,-0x10(%rbp)
   27458:	mov    %rdi,-0x30(%rbp)
   2745c:	mov    %rbx,-0x8(%rbp)
   27460:	mov    0x1a8(%rdi),%r15
   27467:	mov    0x260(%rdi),%rbx
   2746e:	mov    0x28(%rbx),%r14
   27472:	mov    0x30(%rbx),%rax
   27476:	mov    %rax,-0x40(%rbp)
   2747a:	mov    0x38(%rbx),%r9
   2747e:	mov    %r9,-0x38(%rbp)
   27482:	mov    0x20(%rbx),%r10
   27486:	mov    %r10,-0x48(%rbp)
   2748a:	mov    (%rsi),%r11
   2748d:	lea    (%rdx,%rdx,1),%r8d
   27491:	lea    0x1(%r8),%ebx
   27495:	mov    %ebx,%ebx
   27497:	mov    (%r11,%rbx,8),%rbx
   2749b:	mov    %r8d,%r8d
   2749e:	mov    (%r11,%r8,8),%r8
   274a2:	mov    0x8(%rsi),%r11
   274a6:	mov    %edx,%r12d
   274a9:	mov    (%r11,%r12,8),%r11
   274ad:	mov    0x10(%rsi),%rdx
   274b1:	mov    (%rdx,%r12,8),%r12
   274b5:	mov    (%rcx),%rdx
   274b8:	mov    0x8(%rcx),%rsi
   274bc:	mov    0x88(%rdi),%ecx
   274c2:	shr    %ecx
   274c4:	jmpq   275d3 <h2v2_merged_upsample_internal+0x193>
   274c9:	movzbl (%r12),%r13d
   274ce:	movslq (%r10,%r13,4),%r10
   274d2:	movzbl (%r8),%edi
   274d6:	mov    %rcx,-0x50(%rbp)
   274da:	lea    (%rdi,%r10,1),%ecx
   274de:	movslq %ecx,%rcx
   274e1:	movzbl (%r15,%rcx,1),%ecx
   274e6:	mov    (%rax,%r13,8),%rax
   274ea:	movzbl (%r11),%r13d
   274ee:	add    (%r9,%r13,8),%rax
   274f2:	sar    $0x10,%rax
   274f6:	lea    (%rdi,%rax,1),%r9d
   274fa:	movslq %r9d,%r9
   274fd:	movslq (%r14,%r13,4),%r13
   27501:	mov    %cl,(%rdx)
   27503:	movzbl (%r15,%r9,1),%ecx
   27508:	mov    %cl,0x1(%rdx)
   2750b:	lea    (%rdi,%r13,1),%ecx
   2750f:	movslq %ecx,%rcx
   27512:	movzbl (%rcx,%r15,1),%ecx
   27517:	mov    %cl,0x2(%rdx)
   2751a:	movzbl 0x1(%r8),%edi
   2751f:	lea    (%rdi,%r10,1),%ecx
   27523:	movslq %ecx,%rcx
   27526:	movzbl (%r15,%rcx,1),%ecx
   2752b:	mov    %cl,0x3(%rdx)
   2752e:	lea    (%rdi,%rax,1),%ecx
   27531:	movslq %ecx,%rcx
   27534:	movzbl (%r15,%rcx,1),%ecx
   27539:	mov    %cl,0x4(%rdx)
   2753c:	lea    (%rdi,%r13,1),%ecx
   27540:	movslq %ecx,%rcx
   27543:	movzbl (%rcx,%r15,1),%ecx
   27548:	mov    %cl,0x5(%rdx)
   2754b:	movzbl (%rbx),%edi
   2754e:	lea    (%rdi,%r10,1),%ecx
   27552:	movslq %ecx,%rcx
   27555:	movzbl (%r15,%rcx,1),%ecx
   2755a:	mov    %cl,(%rsi)
   2755c:	lea    (%rdi,%rax,1),%ecx
   2755f:	movslq %ecx,%rcx
   27562:	movzbl (%r15,%rcx,1),%ecx
   27567:	mov    %cl,0x1(%rsi)
   2756a:	lea    (%rdi,%r13,1),%ecx
   2756e:	movslq %ecx,%rcx
   27571:	movzbl (%rcx,%r15,1),%ecx
   27576:	mov    %cl,0x2(%rsi)
   27579:	movzbl 0x1(%rbx),%edi
   2757d:	lea    (%rdi,%r10,1),%ecx
   27581:	movslq %ecx,%rcx
   27584:	movzbl (%r15,%rcx,1),%ecx
   27589:	mov    %cl,0x3(%rsi)
   2758c:	add    %edi,%eax
   2758e:	movslq %eax,%rax
   27591:	movzbl (%r15,%rax,1),%eax
   27596:	mov    %al,0x4(%rsi)
   27599:	lea    (%rdi,%r13,1),%eax
   2759d:	movslq %eax,%rax
   275a0:	movzbl (%rax,%r15,1),%eax
   275a5:	mov    %al,0x5(%rsi)
   275a8:	add    $0x2,%rbx
   275ac:	add    $0x2,%r8
   275b0:	add    $0x1,%r11
   275b4:	add    $0x1,%r12
   275b8:	add    $0x6,%rdx
   275bc:	add    $0x6,%rsi
   275c0:	mov    -0x50(%rbp),%rax
   275c4:	lea    -0x1(%rax),%ecx
   275c7:	mov    -0x38(%rbp),%r9
   275cb:	mov    -0x40(%rbp),%rax
   275cf:	mov    -0x48(%rbp),%r10
   275d3:	test   %ecx,%ecx
   275d5:	jne    274c9 <h2v2_merged_upsample_internal+0x89>
   275db:	mov    -0x30(%rbp),%rcx
   275df:	mov    0x88(%rcx),%ecx
   275e5:	and    $0x1,%ecx
   275e8:	test   %ecx,%ecx
   275ea:	jne    27602 <h2v2_merged_upsample_internal+0x1c2>
   275ec:	mov    -0x8(%rbp),%rbx
   275f0:	mov    -0x10(%rbp),%r12
   275f4:	mov    -0x18(%rbp),%r13
   275f8:	mov    -0x20(%rbp),%r14
   275fc:	mov    -0x28(%rbp),%r15
   27600:	leaveq 
   27601:	retq   
   27602:	movzbl (%r12),%r12d
   27607:	movslq (%r10,%r12,4),%rdi
   2760b:	movzbl (%r8),%r13d
   2760f:	lea    0x0(%r13,%rdi,1),%ecx
   27614:	movslq %ecx,%rcx
   27617:	movzbl (%r15,%rcx,1),%ecx
   2761c:	mov    (%rax,%r12,8),%rax
   27620:	movzbl (%r11),%r10d
   27624:	add    (%r9,%r10,8),%rax
   27628:	sar    $0x10,%rax
   2762c:	lea    0x0(%r13,%rax,1),%r8d
   27631:	movslq %r8d,%r8
   27634:	movslq (%r14,%r10,4),%r9
   27638:	mov    %cl,(%rdx)
   2763a:	movzbl (%r15,%r8,1),%ecx
   2763f:	mov    %cl,0x1(%rdx)
   27642:	lea    0x0(%r13,%r9,1),%ecx
   27647:	movslq %ecx,%rcx
   2764a:	movzbl (%r15,%rcx,1),%ecx
   2764f:	mov    %cl,0x2(%rdx)
   27652:	movzbl (%rbx),%edx
   27655:	lea    (%rdx,%rdi,1),%ecx
   27658:	movslq %ecx,%rcx
   2765b:	movzbl (%r15,%rcx,1),%ecx
   27660:	mov    %cl,(%rsi)
   27662:	add    %edx,%eax
   27664:	movslq %eax,%rax
   27667:	movzbl (%r15,%rax,1),%eax
   2766c:	mov    %al,0x1(%rsi)
   2766f:	lea    (%rdx,%r9,1),%eax
   27673:	movslq %eax,%rax
   27676:	movzbl (%r15,%rax,1),%eax
   2767b:	mov    %al,0x2(%rsi)
   2767e:	mov    -0x8(%rbp),%rbx
   27682:	mov    -0x10(%rbp),%r12
   27686:	mov    -0x18(%rbp),%r13
   2768a:	mov    -0x20(%rbp),%r14
   2768e:	mov    -0x28(%rbp),%r15
   27692:	leaveq 
   27693:	retq   
   27694:	data16 nopw %cs:0x0(%rax,%rax,1)
   2769f:	nop

00000000000276a0 <extrgb_h2v1_merged_upsample_internal>:
   276a0:	push   %rbp
   276a1:	mov    %rsp,%rbp
   276a4:	sub    $0x40,%rsp
   276a8:	mov    %r15,-0x28(%rbp)
   276ac:	mov    %r14,-0x20(%rbp)
   276b0:	mov    %rdi,-0x30(%rbp)
   276b4:	mov    %rbx,-0x8(%rbp)
   276b8:	mov    %r12,-0x10(%rbp)
   276bc:	mov    %r13,-0x18(%rbp)
   276c0:	mov    0x1a8(%rdi),%r13
   276c7:	mov    0x260(%rdi),%rbx
   276ce:	mov    0x28(%rbx),%r12
   276d2:	mov    0x30(%rbx),%rax
   276d6:	mov    %rax,-0x40(%rbp)
   276da:	mov    0x38(%rbx),%r9
   276de:	mov    %r9,-0x38(%rbp)
   276e2:	mov    0x20(%rbx),%r11
   276e6:	mov    (%rsi),%rbx
   276e9:	mov    %edx,%r10d
   276ec:	mov    (%rbx,%r10,8),%rbx
   276f0:	mov    0x8(%rsi),%rdx
   276f4:	mov    (%rdx,%r10,8),%r8
   276f8:	mov    0x10(%rsi),%rdx
   276fc:	mov    (%rdx,%r10,8),%rsi
   27700:	mov    (%rcx),%rdx
   27703:	mov    0x88(%rdi),%ecx
   27709:	shr    %ecx
   2770b:	jmpq   277ae <extrgb_h2v1_merged_upsample_internal+0x10e>
   27710:	movzbl (%rsi),%r10d
   27714:	movslq (%r11,%r10,4),%r15
   27718:	movzbl (%rbx),%edi
   2771b:	lea    (%rdi,%r15,1),%r14d
   2771f:	movslq %r14d,%r14
   27722:	movzbl 0x0(%r13,%r14,1),%r14d
   27728:	mov    (%rax,%r10,8),%rax
   2772c:	movzbl (%r8),%r10d
   27730:	add    (%r9,%r10,8),%rax
   27734:	sar    $0x10,%rax
   27738:	lea    (%rdi,%rax,1),%r9d
   2773c:	movslq %r9d,%r9
   2773f:	movslq (%r12,%r10,4),%r10
   27743:	mov    %r14b,(%rdx)
   27746:	movzbl 0x0(%r13,%r9,1),%r9d
   2774c:	mov    %r9b,0x1(%rdx)
   27750:	add    %r10d,%edi
   27753:	movslq %edi,%rdi
   27756:	movzbl (%rdi,%r13,1),%edi
   2775b:	mov    %dil,0x2(%rdx)
   2775f:	movzbl 0x1(%rbx),%r9d
   27764:	lea    (%r9,%r15,1),%edi
   27768:	movslq %edi,%rdi
   2776b:	movzbl 0x0(%r13,%rdi,1),%edi
   27771:	mov    %dil,0x3(%rdx)
   27775:	add    %r9d,%eax
   27778:	movslq %eax,%rax
   2777b:	movzbl 0x0(%r13,%rax,1),%eax
   27781:	mov    %al,0x4(%rdx)
   27784:	lea    (%r9,%r10,1),%eax
   27788:	movslq %eax,%rax
   2778b:	movzbl (%rax,%r13,1),%eax
   27790:	mov    %al,0x5(%rdx)
   27793:	add    $0x2,%rbx
   27797:	add    $0x1,%r8
   2779b:	add    $0x1,%rsi
   2779f:	add    $0x6,%rdx
   277a3:	add    $0xffffffff,%ecx
   277a6:	mov    -0x38(%rbp),%r9
   277aa:	mov    -0x40(%rbp),%rax
   277ae:	test   %ecx,%ecx
   277b0:	jne    27710 <extrgb_h2v1_merged_upsample_internal+0x70>
   277b6:	mov    -0x30(%rbp),%rcx
   277ba:	mov    0x88(%rcx),%ecx
   277c0:	and    $0x1,%ecx
   277c3:	test   %ecx,%ecx
   277c5:	jne    277dd <extrgb_h2v1_merged_upsample_internal+0x13d>
   277c7:	mov    -0x18(%rbp),%r13
   277cb:	mov    -0x10(%rbp),%r12
   277cf:	mov    -0x8(%rbp),%rbx
   277d3:	mov    -0x20(%rbp),%r14
   277d7:	mov    -0x28(%rbp),%r15
   277db:	leaveq 
   277dc:	retq   
   277dd:	movzbl (%rbx),%ecx
   277e0:	movzbl (%rsi),%edi
   277e3:	mov    %rcx,%rsi
   277e6:	add    (%r11,%rdi,4),%esi
   277ea:	movslq %esi,%rsi
   277ed:	movzbl 0x0(%r13,%rsi,1),%esi
   277f3:	mov    (%rax,%rdi,8),%rax
   277f7:	movzbl (%r8),%edi
   277fb:	add    (%r9,%rdi,8),%rax
   277ff:	sar    $0x10,%rax
   27803:	add    %ecx,%eax
   27805:	movslq %eax,%rax
   27808:	add    (%r12,%rdi,4),%ecx
   2780c:	mov    %sil,(%rdx)
   2780f:	movzbl 0x0(%r13,%rax,1),%eax
   27815:	mov    %al,0x1(%rdx)
   27818:	movslq %ecx,%rax
   2781b:	movzbl 0x0(%r13,%rax,1),%eax
   27821:	mov    %al,0x2(%rdx)
   27824:	mov    -0x18(%rbp),%r13
   27828:	mov    -0x10(%rbp),%r12
   2782c:	mov    -0x8(%rbp),%rbx
   27830:	mov    -0x20(%rbp),%r14
   27834:	mov    -0x28(%rbp),%r15
   27838:	leaveq 
   27839:	retq   
   2783a:	nopw   0x0(%rax,%rax,1)

0000000000027840 <extrgb_h2v2_merged_upsample_internal>:
   27840:	push   %rbp
   27841:	mov    %rsp,%rbp
   27844:	sub    $0x50,%rsp
   27848:	mov    %r15,-0x28(%rbp)
   2784c:	mov    %r14,-0x20(%rbp)
   27850:	mov    %r13,-0x18(%rbp)
   27854:	mov    %r12,-0x10(%rbp)
   27858:	mov    %rdi,-0x30(%rbp)
   2785c:	mov    %rbx,-0x8(%rbp)
   27860:	mov    0x1a8(%rdi),%r15
   27867:	mov    0x260(%rdi),%rbx
   2786e:	mov    0x28(%rbx),%r14
   27872:	mov    0x30(%rbx),%rax
   27876:	mov    %rax,-0x40(%rbp)
   2787a:	mov    0x38(%rbx),%r9
   2787e:	mov    %r9,-0x38(%rbp)
   27882:	mov    0x20(%rbx),%r10
   27886:	mov    %r10,-0x48(%rbp)
   2788a:	mov    (%rsi),%r11
   2788d:	lea    (%rdx,%rdx,1),%r8d
   27891:	lea    0x1(%r8),%ebx
   27895:	mov    %ebx,%ebx
   27897:	mov    (%r11,%rbx,8),%rbx
   2789b:	mov    %r8d,%r8d
   2789e:	mov    (%r11,%r8,8),%r8
   278a2:	mov    0x8(%rsi),%r11
   278a6:	mov    %edx,%r12d
   278a9:	mov    (%r11,%r12,8),%r11
   278ad:	mov    0x10(%rsi),%rdx
   278b1:	mov    (%rdx,%r12,8),%r12
   278b5:	mov    (%rcx),%rdx
   278b8:	mov    0x8(%rcx),%rsi
   278bc:	mov    0x88(%rdi),%ecx
   278c2:	shr    %ecx
   278c4:	jmpq   279d3 <extrgb_h2v2_merged_upsample_internal+0x193>
   278c9:	movzbl (%r12),%r13d
   278ce:	movslq (%r10,%r13,4),%r10
   278d2:	movzbl (%r8),%edi
   278d6:	mov    %rcx,-0x50(%rbp)
   278da:	lea    (%rdi,%r10,1),%ecx
   278de:	movslq %ecx,%rcx
   278e1:	movzbl (%r15,%rcx,1),%ecx
   278e6:	mov    (%rax,%r13,8),%rax
   278ea:	movzbl (%r11),%r13d
   278ee:	add    (%r9,%r13,8),%rax
   278f2:	sar    $0x10,%rax
   278f6:	lea    (%rdi,%rax,1),%r9d
   278fa:	movslq %r9d,%r9
   278fd:	movslq (%r14,%r13,4),%r13
   27901:	mov    %cl,(%rdx)
   27903:	movzbl (%r15,%r9,1),%ecx
   27908:	mov    %cl,0x1(%rdx)
   2790b:	lea    (%rdi,%r13,1),%ecx
   2790f:	movslq %ecx,%rcx
   27912:	movzbl (%rcx,%r15,1),%ecx
   27917:	mov    %cl,0x2(%rdx)
   2791a:	movzbl 0x1(%r8),%edi
   2791f:	lea    (%rdi,%r10,1),%ecx
   27923:	movslq %ecx,%rcx
   27926:	movzbl (%r15,%rcx,1),%ecx
   2792b:	mov    %cl,0x3(%rdx)
   2792e:	lea    (%rdi,%rax,1),%ecx
   27931:	movslq %ecx,%rcx
   27934:	movzbl (%r15,%rcx,1),%ecx
   27939:	mov    %cl,0x4(%rdx)
   2793c:	lea    (%rdi,%r13,1),%ecx
   27940:	movslq %ecx,%rcx
   27943:	movzbl (%rcx,%r15,1),%ecx
   27948:	mov    %cl,0x5(%rdx)
   2794b:	movzbl (%rbx),%edi
   2794e:	lea    (%rdi,%r10,1),%ecx
   27952:	movslq %ecx,%rcx
   27955:	movzbl (%r15,%rcx,1),%ecx
   2795a:	mov    %cl,(%rsi)
   2795c:	lea    (%rdi,%rax,1),%ecx
   2795f:	movslq %ecx,%rcx
   27962:	movzbl (%r15,%rcx,1),%ecx
   27967:	mov    %cl,0x1(%rsi)
   2796a:	lea    (%rdi,%r13,1),%ecx
   2796e:	movslq %ecx,%rcx
   27971:	movzbl (%rcx,%r15,1),%ecx
   27976:	mov    %cl,0x2(%rsi)
   27979:	movzbl 0x1(%rbx),%edi
   2797d:	lea    (%rdi,%r10,1),%ecx
   27981:	movslq %ecx,%rcx
   27984:	movzbl (%r15,%rcx,1),%ecx
   27989:	mov    %cl,0x3(%rsi)
   2798c:	add    %edi,%eax
   2798e:	movslq %eax,%rax
   27991:	movzbl (%r15,%rax,1),%eax
   27996:	mov    %al,0x4(%rsi)
   27999:	lea    (%rdi,%r13,1),%eax
   2799d:	movslq %eax,%rax
   279a0:	movzbl (%rax,%r15,1),%eax
   279a5:	mov    %al,0x5(%rsi)
   279a8:	add    $0x2,%rbx
   279ac:	add    $0x2,%r8
   279b0:	add    $0x1,%r11
   279b4:	add    $0x1,%r12
   279b8:	add    $0x6,%rdx
   279bc:	add    $0x6,%rsi
   279c0:	mov    -0x50(%rbp),%rax
   279c4:	lea    -0x1(%rax),%ecx
   279c7:	mov    -0x38(%rbp),%r9
   279cb:	mov    -0x40(%rbp),%rax
   279cf:	mov    -0x48(%rbp),%r10
   279d3:	test   %ecx,%ecx
   279d5:	jne    278c9 <extrgb_h2v2_merged_upsample_internal+0x89>
   279db:	mov    -0x30(%rbp),%rcx
   279df:	mov    0x88(%rcx),%ecx
   279e5:	and    $0x1,%ecx
   279e8:	test   %ecx,%ecx
   279ea:	jne    27a02 <extrgb_h2v2_merged_upsample_internal+0x1c2>
   279ec:	mov    -0x8(%rbp),%rbx
   279f0:	mov    -0x10(%rbp),%r12
   279f4:	mov    -0x18(%rbp),%r13
   279f8:	mov    -0x20(%rbp),%r14
   279fc:	mov    -0x28(%rbp),%r15
   27a00:	leaveq 
   27a01:	retq   
   27a02:	movzbl (%r12),%r12d
   27a07:	movslq (%r10,%r12,4),%rdi
   27a0b:	movzbl (%r8),%r13d
   27a0f:	lea    0x0(%r13,%rdi,1),%ecx
   27a14:	movslq %ecx,%rcx
   27a17:	movzbl (%r15,%rcx,1),%ecx
   27a1c:	mov    (%rax,%r12,8),%rax
   27a20:	movzbl (%r11),%r10d
   27a24:	add    (%r9,%r10,8),%rax
   27a28:	sar    $0x10,%rax
   27a2c:	lea    0x0(%r13,%rax,1),%r8d
   27a31:	movslq %r8d,%r8
   27a34:	movslq (%r14,%r10,4),%r9
   27a38:	mov    %cl,(%rdx)
   27a3a:	movzbl (%r15,%r8,1),%ecx
   27a3f:	mov    %cl,0x1(%rdx)
   27a42:	lea    0x0(%r13,%r9,1),%ecx
   27a47:	movslq %ecx,%rcx
   27a4a:	movzbl (%r15,%rcx,1),%ecx
   27a4f:	mov    %cl,0x2(%rdx)
   27a52:	movzbl (%rbx),%edx
   27a55:	lea    (%rdx,%rdi,1),%ecx
   27a58:	movslq %ecx,%rcx
   27a5b:	movzbl (%r15,%rcx,1),%ecx
   27a60:	mov    %cl,(%rsi)
   27a62:	add    %edx,%eax
   27a64:	movslq %eax,%rax
   27a67:	movzbl (%r15,%rax,1),%eax
   27a6c:	mov    %al,0x1(%rsi)
   27a6f:	lea    (%rdx,%r9,1),%eax
   27a73:	movslq %eax,%rax
   27a76:	movzbl (%r15,%rax,1),%eax
   27a7b:	mov    %al,0x2(%rsi)
   27a7e:	mov    -0x8(%rbp),%rbx
   27a82:	mov    -0x10(%rbp),%r12
   27a86:	mov    -0x18(%rbp),%r13
   27a8a:	mov    -0x20(%rbp),%r14
   27a8e:	mov    -0x28(%rbp),%r15
   27a92:	leaveq 
   27a93:	retq   
   27a94:	data16 nopw %cs:0x0(%rax,%rax,1)
   27a9f:	nop

0000000000027aa0 <extrgbx_h2v1_merged_upsample_internal>:
   27aa0:	push   %rbp
   27aa1:	mov    %rsp,%rbp
   27aa4:	sub    $0x40,%rsp
   27aa8:	mov    %r15,-0x28(%rbp)
   27aac:	mov    %r14,-0x20(%rbp)
   27ab0:	mov    %rdi,-0x30(%rbp)
   27ab4:	mov    %rbx,-0x8(%rbp)
   27ab8:	mov    %r12,-0x10(%rbp)
   27abc:	mov    %r13,-0x18(%rbp)
   27ac0:	mov    0x1a8(%rdi),%r13
   27ac7:	mov    0x260(%rdi),%rbx
   27ace:	mov    0x28(%rbx),%r12
   27ad2:	mov    0x30(%rbx),%rax
   27ad6:	mov    %rax,-0x40(%rbp)
   27ada:	mov    0x38(%rbx),%r8
   27ade:	mov    %r8,-0x38(%rbp)
   27ae2:	mov    0x20(%rbx),%r11
   27ae6:	mov    (%rsi),%rbx
   27ae9:	mov    %edx,%r9d
   27aec:	mov    (%rbx,%r9,8),%rdx
   27af0:	mov    0x8(%rsi),%rbx
   27af4:	mov    (%rbx,%r9,8),%rbx
   27af8:	mov    0x10(%rsi),%rsi
   27afc:	mov    (%rsi,%r9,8),%r9
   27b00:	mov    (%rcx),%rsi
   27b03:	mov    0x88(%rdi),%ecx
   27b09:	shr    %ecx
   27b0b:	jmpq   27bb6 <extrgbx_h2v1_merged_upsample_internal+0x116>
   27b10:	movzbl (%r9),%r10d
   27b14:	movslq (%r11,%r10,4),%r15
   27b18:	movzbl (%rdx),%edi
   27b1b:	lea    (%rdi,%r15,1),%r14d
   27b1f:	movslq %r14d,%r14
   27b22:	movzbl 0x0(%r13,%r14,1),%r14d
   27b28:	mov    (%rax,%r10,8),%rax
   27b2c:	movzbl (%rbx),%r10d
   27b30:	add    (%r8,%r10,8),%rax
   27b34:	sar    $0x10,%rax
   27b38:	lea    (%rdi,%rax,1),%r8d
   27b3c:	movslq %r8d,%r8
   27b3f:	movslq (%r12,%r10,4),%r10
   27b43:	mov    %r14b,(%rsi)
   27b46:	movzbl 0x0(%r13,%r8,1),%r8d
   27b4c:	mov    %r8b,0x1(%rsi)
   27b50:	add    %r10d,%edi
   27b53:	movslq %edi,%rdi
   27b56:	movzbl (%rdi,%r13,1),%edi
   27b5b:	mov    %dil,0x2(%rsi)
   27b5f:	movb   $0xff,0x3(%rsi)
   27b63:	movzbl 0x1(%rdx),%r8d
   27b68:	lea    (%r8,%r15,1),%edi
   27b6c:	movslq %edi,%rdi
   27b6f:	movzbl 0x0(%r13,%rdi,1),%edi
   27b75:	mov    %dil,0x4(%rsi)
   27b79:	add    %r8d,%eax
   27b7c:	movslq %eax,%rax
   27b7f:	movzbl 0x0(%r13,%rax,1),%eax
   27b85:	mov    %al,0x5(%rsi)
   27b88:	lea    (%r8,%r10,1),%eax
   27b8c:	movslq %eax,%rax
   27b8f:	movzbl (%rax,%r13,1),%eax
   27b94:	mov    %al,0x6(%rsi)
   27b97:	movb   $0xff,0x7(%rsi)
   27b9b:	add    $0x2,%rdx
   27b9f:	add    $0x1,%rbx
   27ba3:	add    $0x1,%r9
   27ba7:	add    $0x8,%rsi
   27bab:	add    $0xffffffff,%ecx
   27bae:	mov    -0x38(%rbp),%r8
   27bb2:	mov    -0x40(%rbp),%rax
   27bb6:	test   %ecx,%ecx
   27bb8:	jne    27b10 <extrgbx_h2v1_merged_upsample_internal+0x70>
   27bbe:	mov    -0x30(%rbp),%rcx
   27bc2:	mov    0x88(%rcx),%ecx
   27bc8:	and    $0x1,%ecx
   27bcb:	test   %ecx,%ecx
   27bcd:	jne    27be5 <extrgbx_h2v1_merged_upsample_internal+0x145>
   27bcf:	mov    -0x18(%rbp),%r13
   27bd3:	mov    -0x10(%rbp),%r12
   27bd7:	mov    -0x8(%rbp),%rbx
   27bdb:	mov    -0x20(%rbp),%r14
   27bdf:	mov    -0x28(%rbp),%r15
   27be3:	leaveq 
   27be4:	retq   
   27be5:	movzbl (%rdx),%ecx
   27be8:	movzbl (%r9),%edi
   27bec:	mov    %rcx,%rdx
   27bef:	add    (%r11,%rdi,4),%edx
   27bf3:	movslq %edx,%rdx
   27bf6:	movzbl 0x0(%r13,%rdx,1),%edx
   27bfc:	mov    (%rax,%rdi,8),%rax
   27c00:	movzbl (%rbx),%edi
   27c03:	add    (%r8,%rdi,8),%rax
   27c07:	sar    $0x10,%rax
   27c0b:	add    %ecx,%eax
   27c0d:	movslq %eax,%rax
   27c10:	add    (%r12,%rdi,4),%ecx
   27c14:	mov    %dl,(%rsi)
   27c16:	movzbl 0x0(%r13,%rax,1),%eax
   27c1c:	mov    %al,0x1(%rsi)
   27c1f:	movslq %ecx,%rax
   27c22:	movzbl 0x0(%r13,%rax,1),%eax
   27c28:	mov    %al,0x2(%rsi)
   27c2b:	movb   $0xff,0x3(%rsi)
   27c2f:	mov    -0x18(%rbp),%r13
   27c33:	mov    -0x10(%rbp),%r12
   27c37:	mov    -0x8(%rbp),%rbx
   27c3b:	mov    -0x20(%rbp),%r14
   27c3f:	mov    -0x28(%rbp),%r15
   27c43:	leaveq 
   27c44:	retq   
   27c45:	data16 nopw %cs:0x0(%rax,%rax,1)

0000000000027c50 <extrgbx_h2v2_merged_upsample_internal>:
   27c50:	push   %rbp
   27c51:	mov    %rsp,%rbp
   27c54:	sub    $0x50,%rsp
   27c58:	mov    %r15,-0x28(%rbp)
   27c5c:	mov    %r14,-0x20(%rbp)
   27c60:	mov    %r13,-0x18(%rbp)
   27c64:	mov    %r12,-0x10(%rbp)
   27c68:	mov    %rdi,-0x30(%rbp)
   27c6c:	mov    %rbx,-0x8(%rbp)
   27c70:	mov    0x1a8(%rdi),%r15
   27c77:	mov    0x260(%rdi),%rbx
   27c7e:	mov    0x28(%rbx),%r14
   27c82:	mov    0x30(%rbx),%rax
   27c86:	mov    %rax,-0x40(%rbp)
   27c8a:	mov    0x38(%rbx),%r9
   27c8e:	mov    %r9,-0x38(%rbp)
   27c92:	mov    0x20(%rbx),%r10
   27c96:	mov    %r10,-0x48(%rbp)
   27c9a:	mov    (%rsi),%r11
   27c9d:	lea    (%rdx,%rdx,1),%r8d
   27ca1:	lea    0x1(%r8),%ebx
   27ca5:	mov    %ebx,%ebx
   27ca7:	mov    (%r11,%rbx,8),%rbx
   27cab:	mov    %r8d,%r8d
   27cae:	mov    (%r11,%r8,8),%r8
   27cb2:	mov    0x8(%rsi),%r11
   27cb6:	mov    %edx,%r12d
   27cb9:	mov    (%r11,%r12,8),%r11
   27cbd:	mov    0x10(%rsi),%rdx
   27cc1:	mov    (%rdx,%r12,8),%r12
   27cc5:	mov    (%rcx),%rdx
   27cc8:	mov    0x8(%rcx),%rsi
   27ccc:	mov    0x88(%rdi),%ecx
   27cd2:	shr    %ecx
   27cd4:	jmpq   27df3 <extrgbx_h2v2_merged_upsample_internal+0x1a3>
   27cd9:	movzbl (%r12),%r13d
   27cde:	movslq (%r10,%r13,4),%r10
   27ce2:	movzbl (%r8),%edi
   27ce6:	mov    %rcx,-0x50(%rbp)
   27cea:	lea    (%rdi,%r10,1),%ecx
   27cee:	movslq %ecx,%rcx
   27cf1:	movzbl (%r15,%rcx,1),%ecx
   27cf6:	mov    (%rax,%r13,8),%rax
   27cfa:	movzbl (%r11),%r13d
   27cfe:	add    (%r9,%r13,8),%rax
   27d02:	sar    $0x10,%rax
   27d06:	lea    (%rdi,%rax,1),%r9d
   27d0a:	movslq %r9d,%r9
   27d0d:	movslq (%r14,%r13,4),%r13
   27d11:	mov    %cl,(%rdx)
   27d13:	movzbl (%r15,%r9,1),%ecx
   27d18:	mov    %cl,0x1(%rdx)
   27d1b:	lea    (%rdi,%r13,1),%ecx
   27d1f:	movslq %ecx,%rcx
   27d22:	movzbl (%rcx,%r15,1),%ecx
   27d27:	mov    %cl,0x2(%rdx)
   27d2a:	movb   $0xff,0x3(%rdx)
   27d2e:	movzbl 0x1(%r8),%edi
   27d33:	lea    (%rdi,%r10,1),%ecx
   27d37:	movslq %ecx,%rcx
   27d3a:	movzbl (%r15,%rcx,1),%ecx
   27d3f:	mov    %cl,0x4(%rdx)
   27d42:	lea    (%rdi,%rax,1),%ecx
   27d45:	movslq %ecx,%rcx
   27d48:	movzbl (%r15,%rcx,1),%ecx
   27d4d:	mov    %cl,0x5(%rdx)
   27d50:	lea    (%rdi,%r13,1),%ecx
   27d54:	movslq %ecx,%rcx
   27d57:	movzbl (%rcx,%r15,1),%ecx
   27d5c:	mov    %cl,0x6(%rdx)
   27d5f:	movb   $0xff,0x7(%rdx)
   27d63:	movzbl (%rbx),%edi
   27d66:	lea    (%rdi,%r10,1),%ecx
   27d6a:	movslq %ecx,%rcx
   27d6d:	movzbl (%r15,%rcx,1),%ecx
   27d72:	mov    %cl,(%rsi)
   27d74:	lea    (%rdi,%rax,1),%ecx
   27d77:	movslq %ecx,%rcx
   27d7a:	movzbl (%r15,%rcx,1),%ecx
   27d7f:	mov    %cl,0x1(%rsi)
   27d82:	lea    (%rdi,%r13,1),%ecx
   27d86:	movslq %ecx,%rcx
   27d89:	movzbl (%rcx,%r15,1),%ecx
   27d8e:	mov    %cl,0x2(%rsi)
   27d91:	movb   $0xff,0x3(%rsi)
   27d95:	movzbl 0x1(%rbx),%edi
   27d99:	lea    (%rdi,%r10,1),%ecx
   27d9d:	movslq %ecx,%rcx
   27da0:	movzbl (%r15,%rcx,1),%ecx
   27da5:	mov    %cl,0x4(%rsi)
   27da8:	add    %edi,%eax
   27daa:	movslq %eax,%rax
   27dad:	movzbl (%r15,%rax,1),%eax
   27db2:	mov    %al,0x5(%rsi)
   27db5:	lea    (%rdi,%r13,1),%eax
   27db9:	movslq %eax,%rax
   27dbc:	movzbl (%rax,%r15,1),%eax
   27dc1:	mov    %al,0x6(%rsi)
   27dc4:	movb   $0xff,0x7(%rsi)
   27dc8:	add    $0x2,%rbx
   27dcc:	add    $0x2,%r8
   27dd0:	add    $0x1,%r11
   27dd4:	add    $0x1,%r12
   27dd8:	add    $0x8,%rdx
   27ddc:	add    $0x8,%rsi
   27de0:	mov    -0x50(%rbp),%rax
   27de4:	lea    -0x1(%rax),%ecx
   27de7:	mov    -0x38(%rbp),%r9
   27deb:	mov    -0x40(%rbp),%rax
   27def:	mov    -0x48(%rbp),%r10
   27df3:	test   %ecx,%ecx
   27df5:	jne    27cd9 <extrgbx_h2v2_merged_upsample_internal+0x89>
   27dfb:	mov    -0x30(%rbp),%rcx
   27dff:	mov    0x88(%rcx),%ecx
   27e05:	and    $0x1,%ecx
   27e08:	test   %ecx,%ecx
   27e0a:	jne    27e22 <extrgbx_h2v2_merged_upsample_internal+0x1d2>
   27e0c:	mov    -0x8(%rbp),%rbx
   27e10:	mov    -0x10(%rbp),%r12
   27e14:	mov    -0x18(%rbp),%r13
   27e18:	mov    -0x20(%rbp),%r14
   27e1c:	mov    -0x28(%rbp),%r15
   27e20:	leaveq 
   27e21:	retq   
   27e22:	movzbl (%r12),%r12d
   27e27:	movslq (%r10,%r12,4),%rdi
   27e2b:	movzbl (%r8),%r13d
   27e2f:	lea    0x0(%r13,%rdi,1),%ecx
   27e34:	movslq %ecx,%rcx
   27e37:	movzbl (%r15,%rcx,1),%ecx
   27e3c:	mov    (%rax,%r12,8),%rax
   27e40:	movzbl (%r11),%r10d
   27e44:	add    (%r9,%r10,8),%rax
   27e48:	sar    $0x10,%rax
   27e4c:	lea    0x0(%r13,%rax,1),%r8d
   27e51:	movslq %r8d,%r8
   27e54:	movslq (%r14,%r10,4),%r9
   27e58:	mov    %cl,(%rdx)
   27e5a:	movzbl (%r15,%r8,1),%ecx
   27e5f:	mov    %cl,0x1(%rdx)
   27e62:	lea    0x0(%r13,%r9,1),%ecx
   27e67:	movslq %ecx,%rcx
   27e6a:	movzbl (%r15,%rcx,1),%ecx
   27e6f:	mov    %cl,0x2(%rdx)
   27e72:	movb   $0xff,0x3(%rdx)
   27e76:	movzbl (%rbx),%edx
   27e79:	lea    (%rdx,%rdi,1),%ecx
   27e7c:	movslq %ecx,%rcx
   27e7f:	movzbl (%r15,%rcx,1),%ecx
   27e84:	mov    %cl,(%rsi)
   27e86:	add    %edx,%eax
   27e88:	movslq %eax,%rax
   27e8b:	movzbl (%r15,%rax,1),%eax
   27e90:	mov    %al,0x1(%rsi)
   27e93:	lea    (%rdx,%r9,1),%eax
   27e97:	movslq %eax,%rax
   27e9a:	movzbl (%r15,%rax,1),%eax
   27e9f:	mov    %al,0x2(%rsi)
   27ea2:	movb   $0xff,0x3(%rsi)
   27ea6:	mov    -0x8(%rbp),%rbx
   27eaa:	mov    -0x10(%rbp),%r12
   27eae:	mov    -0x18(%rbp),%r13
   27eb2:	mov    -0x20(%rbp),%r14
   27eb6:	mov    -0x28(%rbp),%r15
   27eba:	leaveq 
   27ebb:	retq   
   27ebc:	nopl   0x0(%rax)

0000000000027ec0 <extbgr_h2v1_merged_upsample_internal>:
   27ec0:	push   %rbp
   27ec1:	mov    %rsp,%rbp
   27ec4:	sub    $0x40,%rsp
   27ec8:	mov    %r15,-0x28(%rbp)
   27ecc:	mov    %r14,-0x20(%rbp)
   27ed0:	mov    %rdi,-0x30(%rbp)
   27ed4:	mov    %rbx,-0x8(%rbp)
   27ed8:	mov    %r12,-0x10(%rbp)
   27edc:	mov    %r13,-0x18(%rbp)
   27ee0:	mov    0x1a8(%rdi),%r13
   27ee7:	mov    0x260(%rdi),%rbx
   27eee:	mov    0x28(%rbx),%r12
   27ef2:	mov    0x30(%rbx),%rax
   27ef6:	mov    %rax,-0x40(%rbp)
   27efa:	mov    0x38(%rbx),%r8
   27efe:	mov    %r8,-0x38(%rbp)
   27f02:	mov    0x20(%rbx),%r11
   27f06:	mov    (%rsi),%rbx
   27f09:	mov    %edx,%r9d
   27f0c:	mov    (%rbx,%r9,8),%rdx
   27f10:	mov    0x8(%rsi),%rbx
   27f14:	mov    (%rbx,%r9,8),%rbx
   27f18:	mov    0x10(%rsi),%rsi
   27f1c:	mov    (%rsi,%r9,8),%r9
   27f20:	mov    (%rcx),%rsi
   27f23:	mov    0x88(%rdi),%ecx
   27f29:	shr    %ecx
   27f2b:	jmpq   27fce <extbgr_h2v1_merged_upsample_internal+0x10e>
   27f30:	movzbl (%r9),%r10d
   27f34:	movslq (%r11,%r10,4),%r15
   27f38:	movzbl (%rdx),%edi
   27f3b:	lea    (%rdi,%r15,1),%r14d
   27f3f:	movslq %r14d,%r14
   27f42:	movzbl 0x0(%r13,%r14,1),%r14d
   27f48:	mov    (%rax,%r10,8),%rax
   27f4c:	movzbl (%rbx),%r10d
   27f50:	add    (%r8,%r10,8),%rax
   27f54:	sar    $0x10,%rax
   27f58:	lea    (%rdi,%rax,1),%r8d
   27f5c:	movslq %r8d,%r8
   27f5f:	movslq (%r12,%r10,4),%r10
   27f63:	mov    %r14b,0x2(%rsi)
   27f67:	movzbl 0x0(%r13,%r8,1),%r8d
   27f6d:	mov    %r8b,0x1(%rsi)
   27f71:	add    %r10d,%edi
   27f74:	movslq %edi,%rdi
   27f77:	movzbl (%rdi,%r13,1),%edi
   27f7c:	mov    %dil,(%rsi)
   27f7f:	movzbl 0x1(%rdx),%r8d
   27f84:	lea    (%r8,%r15,1),%edi
   27f88:	movslq %edi,%rdi
   27f8b:	movzbl 0x0(%r13,%rdi,1),%edi
   27f91:	mov    %dil,0x5(%rsi)
   27f95:	add    %r8d,%eax
   27f98:	movslq %eax,%rax
   27f9b:	movzbl 0x0(%r13,%rax,1),%eax
   27fa1:	mov    %al,0x4(%rsi)
   27fa4:	lea    (%r8,%r10,1),%eax
   27fa8:	movslq %eax,%rax
   27fab:	movzbl (%rax,%r13,1),%eax
   27fb0:	mov    %al,0x3(%rsi)
   27fb3:	add    $0x2,%rdx
   27fb7:	add    $0x1,%rbx
   27fbb:	add    $0x1,%r9
   27fbf:	add    $0x6,%rsi
   27fc3:	add    $0xffffffff,%ecx
   27fc6:	mov    -0x38(%rbp),%r8
   27fca:	mov    -0x40(%rbp),%rax
   27fce:	test   %ecx,%ecx
   27fd0:	jne    27f30 <extbgr_h2v1_merged_upsample_internal+0x70>
   27fd6:	mov    -0x30(%rbp),%rcx
   27fda:	mov    0x88(%rcx),%ecx
   27fe0:	and    $0x1,%ecx
   27fe3:	test   %ecx,%ecx
   27fe5:	jne    27ffd <extbgr_h2v1_merged_upsample_internal+0x13d>
   27fe7:	mov    -0x18(%rbp),%r13
   27feb:	mov    -0x10(%rbp),%r12
   27fef:	mov    -0x8(%rbp),%rbx
   27ff3:	mov    -0x20(%rbp),%r14
   27ff7:	mov    -0x28(%rbp),%r15
   27ffb:	leaveq 
   27ffc:	retq   
   27ffd:	movzbl (%rdx),%ecx
   28000:	movzbl (%r9),%edi
   28004:	mov    %rcx,%rdx
   28007:	add    (%r11,%rdi,4),%edx
   2800b:	movslq %edx,%rdx
   2800e:	movzbl 0x0(%r13,%rdx,1),%edx
   28014:	mov    (%rax,%rdi,8),%rax
   28018:	movzbl (%rbx),%edi
   2801b:	add    (%r8,%rdi,8),%rax
   2801f:	sar    $0x10,%rax
   28023:	add    %ecx,%eax
   28025:	movslq %eax,%rax
   28028:	add    (%r12,%rdi,4),%ecx
   2802c:	mov    %dl,0x2(%rsi)
   2802f:	movzbl 0x0(%r13,%rax,1),%eax
   28035:	mov    %al,0x1(%rsi)
   28038:	movslq %ecx,%rax
   2803b:	movzbl 0x0(%r13,%rax,1),%eax
   28041:	mov    %al,(%rsi)
   28043:	mov    -0x18(%rbp),%r13
   28047:	mov    -0x10(%rbp),%r12
   2804b:	mov    -0x8(%rbp),%rbx
   2804f:	mov    -0x20(%rbp),%r14
   28053:	mov    -0x28(%rbp),%r15
   28057:	leaveq 
   28058:	retq   
   28059:	nopl   0x0(%rax)

0000000000028060 <extbgr_h2v2_merged_upsample_internal>:
   28060:	push   %rbp
   28061:	mov    %rsp,%rbp
   28064:	sub    $0x50,%rsp
   28068:	mov    %r15,-0x28(%rbp)
   2806c:	mov    %r14,-0x20(%rbp)
   28070:	mov    %r13,-0x18(%rbp)
   28074:	mov    %r12,-0x10(%rbp)
   28078:	mov    %rdi,-0x30(%rbp)
   2807c:	mov    %rbx,-0x8(%rbp)
   28080:	mov    0x1a8(%rdi),%r15
   28087:	mov    0x260(%rdi),%rbx
   2808e:	mov    0x28(%rbx),%r14
   28092:	mov    0x30(%rbx),%rax
   28096:	mov    %rax,-0x40(%rbp)
   2809a:	mov    0x38(%rbx),%r9
   2809e:	mov    %r9,-0x38(%rbp)
   280a2:	mov    0x20(%rbx),%r10
   280a6:	mov    %r10,-0x48(%rbp)
   280aa:	mov    (%rsi),%r11
   280ad:	lea    (%rdx,%rdx,1),%r8d
   280b1:	lea    0x1(%r8),%ebx
   280b5:	mov    %ebx,%ebx
   280b7:	mov    (%r11,%rbx,8),%rbx
   280bb:	mov    %r8d,%r8d
   280be:	mov    (%r11,%r8,8),%r8
   280c2:	mov    0x8(%rsi),%r11
   280c6:	mov    %edx,%r12d
   280c9:	mov    (%r11,%r12,8),%r11
   280cd:	mov    0x10(%rsi),%rdx
   280d1:	mov    (%rdx,%r12,8),%r12
   280d5:	mov    (%rcx),%rdx
   280d8:	mov    0x8(%rcx),%rsi
   280dc:	mov    0x88(%rdi),%ecx
   280e2:	shr    %ecx
   280e4:	jmpq   281f3 <extbgr_h2v2_merged_upsample_internal+0x193>
   280e9:	movzbl (%r12),%r13d
   280ee:	movslq (%r10,%r13,4),%r10
   280f2:	movzbl (%r8),%edi
   280f6:	mov    %rcx,-0x50(%rbp)
   280fa:	lea    (%rdi,%r10,1),%ecx
   280fe:	movslq %ecx,%rcx
   28101:	movzbl (%r15,%rcx,1),%ecx
   28106:	mov    (%rax,%r13,8),%rax
   2810a:	movzbl (%r11),%r13d
   2810e:	add    (%r9,%r13,8),%rax
   28112:	sar    $0x10,%rax
   28116:	lea    (%rdi,%rax,1),%r9d
   2811a:	movslq %r9d,%r9
   2811d:	movslq (%r14,%r13,4),%r13
   28121:	mov    %cl,0x2(%rdx)
   28124:	movzbl (%r15,%r9,1),%ecx
   28129:	mov    %cl,0x1(%rdx)
   2812c:	lea    (%rdi,%r13,1),%ecx
   28130:	movslq %ecx,%rcx
   28133:	movzbl (%rcx,%r15,1),%ecx
   28138:	mov    %cl,(%rdx)
   2813a:	movzbl 0x1(%r8),%edi
   2813f:	lea    (%rdi,%r10,1),%ecx
   28143:	movslq %ecx,%rcx
   28146:	movzbl (%r15,%rcx,1),%ecx
   2814b:	mov    %cl,0x5(%rdx)
   2814e:	lea    (%rdi,%rax,1),%ecx
   28151:	movslq %ecx,%rcx
   28154:	movzbl (%r15,%rcx,1),%ecx
   28159:	mov    %cl,0x4(%rdx)
   2815c:	lea    (%rdi,%r13,1),%ecx
   28160:	movslq %ecx,%rcx
   28163:	movzbl (%rcx,%r15,1),%ecx
   28168:	mov    %cl,0x3(%rdx)
   2816b:	movzbl (%rbx),%edi
   2816e:	lea    (%rdi,%r10,1),%ecx
   28172:	movslq %ecx,%rcx
   28175:	movzbl (%r15,%rcx,1),%ecx
   2817a:	mov    %cl,0x2(%rsi)
   2817d:	lea    (%rdi,%rax,1),%ecx
   28180:	movslq %ecx,%rcx
   28183:	movzbl (%r15,%rcx,1),%ecx
   28188:	mov    %cl,0x1(%rsi)
   2818b:	lea    (%rdi,%r13,1),%ecx
   2818f:	movslq %ecx,%rcx
   28192:	movzbl (%rcx,%r15,1),%ecx
   28197:	mov    %cl,(%rsi)
   28199:	movzbl 0x1(%rbx),%edi
   2819d:	lea    (%rdi,%r10,1),%ecx
   281a1:	movslq %ecx,%rcx
   281a4:	movzbl (%r15,%rcx,1),%ecx
   281a9:	mov    %cl,0x5(%rsi)
   281ac:	add    %edi,%eax
   281ae:	movslq %eax,%rax
   281b1:	movzbl (%r15,%rax,1),%eax
   281b6:	mov    %al,0x4(%rsi)
   281b9:	lea    (%rdi,%r13,1),%eax
   281bd:	movslq %eax,%rax
   281c0:	movzbl (%rax,%r15,1),%eax
   281c5:	mov    %al,0x3(%rsi)
   281c8:	add    $0x2,%rbx
   281cc:	add    $0x2,%r8
   281d0:	add    $0x1,%r11
   281d4:	add    $0x1,%r12
   281d8:	add    $0x6,%rdx
   281dc:	add    $0x6,%rsi
   281e0:	mov    -0x50(%rbp),%rax
   281e4:	lea    -0x1(%rax),%ecx
   281e7:	mov    -0x38(%rbp),%r9
   281eb:	mov    -0x40(%rbp),%rax
   281ef:	mov    -0x48(%rbp),%r10
   281f3:	test   %ecx,%ecx
   281f5:	jne    280e9 <extbgr_h2v2_merged_upsample_internal+0x89>
   281fb:	mov    -0x30(%rbp),%rcx
   281ff:	mov    0x88(%rcx),%ecx
   28205:	and    $0x1,%ecx
   28208:	test   %ecx,%ecx
   2820a:	jne    28222 <extbgr_h2v2_merged_upsample_internal+0x1c2>
   2820c:	mov    -0x8(%rbp),%rbx
   28210:	mov    -0x10(%rbp),%r12
   28214:	mov    -0x18(%rbp),%r13
   28218:	mov    -0x20(%rbp),%r14
   2821c:	mov    -0x28(%rbp),%r15
   28220:	leaveq 
   28221:	retq   
   28222:	movzbl (%r12),%r12d
   28227:	movslq (%r10,%r12,4),%rdi
   2822b:	movzbl (%r8),%r13d
   2822f:	lea    0x0(%r13,%rdi,1),%ecx
   28234:	movslq %ecx,%rcx
   28237:	movzbl (%r15,%rcx,1),%ecx
   2823c:	mov    (%rax,%r12,8),%rax
   28240:	movzbl (%r11),%r10d
   28244:	add    (%r9,%r10,8),%rax
   28248:	sar    $0x10,%rax
   2824c:	lea    0x0(%r13,%rax,1),%r8d
   28251:	movslq %r8d,%r8
   28254:	movslq (%r14,%r10,4),%r9
   28258:	mov    %cl,0x2(%rdx)
   2825b:	movzbl (%r15,%r8,1),%ecx
   28260:	mov    %cl,0x1(%rdx)
   28263:	lea    0x0(%r13,%r9,1),%ecx
   28268:	movslq %ecx,%rcx
   2826b:	movzbl (%r15,%rcx,1),%ecx
   28270:	mov    %cl,(%rdx)
   28272:	movzbl (%rbx),%edx
   28275:	lea    (%rdx,%rdi,1),%ecx
   28278:	movslq %ecx,%rcx
   2827b:	movzbl (%r15,%rcx,1),%ecx
   28280:	mov    %cl,0x2(%rsi)
   28283:	add    %edx,%eax
   28285:	movslq %eax,%rax
   28288:	movzbl (%r15,%rax,1),%eax
   2828d:	mov    %al,0x1(%rsi)
   28290:	lea    (%rdx,%r9,1),%eax
   28294:	movslq %eax,%rax
   28297:	movzbl (%r15,%rax,1),%eax
   2829c:	mov    %al,(%rsi)
   2829e:	mov    -0x8(%rbp),%rbx
   282a2:	mov    -0x10(%rbp),%r12
   282a6:	mov    -0x18(%rbp),%r13
   282aa:	mov    -0x20(%rbp),%r14
   282ae:	mov    -0x28(%rbp),%r15
   282b2:	leaveq 
   282b3:	retq   
   282b4:	data16 nopw %cs:0x0(%rax,%rax,1)
   282bf:	nop

00000000000282c0 <extbgrx_h2v1_merged_upsample_internal>:
   282c0:	push   %rbp
   282c1:	mov    %rsp,%rbp
   282c4:	sub    $0x40,%rsp
   282c8:	mov    %r15,-0x28(%rbp)
   282cc:	mov    %r14,-0x20(%rbp)
   282d0:	mov    %rdi,-0x30(%rbp)
   282d4:	mov    %rbx,-0x8(%rbp)
   282d8:	mov    %r12,-0x10(%rbp)
   282dc:	mov    %r13,-0x18(%rbp)
   282e0:	mov    0x1a8(%rdi),%r13
   282e7:	mov    0x260(%rdi),%rbx
   282ee:	mov    0x28(%rbx),%r12
   282f2:	mov    0x30(%rbx),%rax
   282f6:	mov    %rax,-0x40(%rbp)
   282fa:	mov    0x38(%rbx),%r8
   282fe:	mov    %r8,-0x38(%rbp)
   28302:	mov    0x20(%rbx),%r11
   28306:	mov    (%rsi),%rbx
   28309:	mov    %edx,%r9d
   2830c:	mov    (%rbx,%r9,8),%rdx
   28310:	mov    0x8(%rsi),%rbx
   28314:	mov    (%rbx,%r9,8),%rbx
   28318:	mov    0x10(%rsi),%rsi
   2831c:	mov    (%rsi,%r9,8),%r9
   28320:	mov    (%rcx),%rsi
   28323:	mov    0x88(%rdi),%ecx
   28329:	shr    %ecx
   2832b:	jmpq   283d6 <extbgrx_h2v1_merged_upsample_internal+0x116>
   28330:	movzbl (%r9),%r10d
   28334:	movslq (%r11,%r10,4),%r15
   28338:	movzbl (%rdx),%edi
   2833b:	lea    (%rdi,%r15,1),%r14d
   2833f:	movslq %r14d,%r14
   28342:	movzbl 0x0(%r13,%r14,1),%r14d
   28348:	mov    (%rax,%r10,8),%rax
   2834c:	movzbl (%rbx),%r10d
   28350:	add    (%r8,%r10,8),%rax
   28354:	sar    $0x10,%rax
   28358:	lea    (%rdi,%rax,1),%r8d
   2835c:	movslq %r8d,%r8
   2835f:	movslq (%r12,%r10,4),%r10
   28363:	mov    %r14b,0x2(%rsi)
   28367:	movzbl 0x0(%r13,%r8,1),%r8d
   2836d:	mov    %r8b,0x1(%rsi)
   28371:	add    %r10d,%edi
   28374:	movslq %edi,%rdi
   28377:	movzbl (%rdi,%r13,1),%edi
   2837c:	mov    %dil,(%rsi)
   2837f:	movb   $0xff,0x3(%rsi)
   28383:	movzbl 0x1(%rdx),%r8d
   28388:	lea    (%r8,%r15,1),%edi
   2838c:	movslq %edi,%rdi
   2838f:	movzbl 0x0(%r13,%rdi,1),%edi
   28395:	mov    %dil,0x6(%rsi)
   28399:	add    %r8d,%eax
   2839c:	movslq %eax,%rax
   2839f:	movzbl 0x0(%r13,%rax,1),%eax
   283a5:	mov    %al,0x5(%rsi)
   283a8:	lea    (%r8,%r10,1),%eax
   283ac:	movslq %eax,%rax
   283af:	movzbl (%rax,%r13,1),%eax
   283b4:	mov    %al,0x4(%rsi)
   283b7:	movb   $0xff,0x7(%rsi)
   283bb:	add    $0x2,%rdx
   283bf:	add    $0x1,%rbx
   283c3:	add    $0x1,%r9
   283c7:	add    $0x8,%rsi
   283cb:	add    $0xffffffff,%ecx
   283ce:	mov    -0x38(%rbp),%r8
   283d2:	mov    -0x40(%rbp),%rax
   283d6:	test   %ecx,%ecx
   283d8:	jne    28330 <extbgrx_h2v1_merged_upsample_internal+0x70>
   283de:	mov    -0x30(%rbp),%rcx
   283e2:	mov    0x88(%rcx),%ecx
   283e8:	and    $0x1,%ecx
   283eb:	test   %ecx,%ecx
   283ed:	jne    28405 <extbgrx_h2v1_merged_upsample_internal+0x145>
   283ef:	mov    -0x18(%rbp),%r13
   283f3:	mov    -0x10(%rbp),%r12
   283f7:	mov    -0x8(%rbp),%rbx
   283fb:	mov    -0x20(%rbp),%r14
   283ff:	mov    -0x28(%rbp),%r15
   28403:	leaveq 
   28404:	retq   
   28405:	movzbl (%rdx),%ecx
   28408:	movzbl (%r9),%edi
   2840c:	mov    %rcx,%rdx
   2840f:	add    (%r11,%rdi,4),%edx
   28413:	movslq %edx,%rdx
   28416:	movzbl 0x0(%r13,%rdx,1),%edx
   2841c:	mov    (%rax,%rdi,8),%rax
   28420:	movzbl (%rbx),%edi
   28423:	add    (%r8,%rdi,8),%rax
   28427:	sar    $0x10,%rax
   2842b:	add    %ecx,%eax
   2842d:	movslq %eax,%rax
   28430:	add    (%r12,%rdi,4),%ecx
   28434:	mov    %dl,0x2(%rsi)
   28437:	movzbl 0x0(%r13,%rax,1),%eax
   2843d:	mov    %al,0x1(%rsi)
   28440:	movslq %ecx,%rax
   28443:	movzbl 0x0(%r13,%rax,1),%eax
   28449:	mov    %al,(%rsi)
   2844b:	movb   $0xff,0x3(%rsi)
   2844f:	mov    -0x18(%rbp),%r13
   28453:	mov    -0x10(%rbp),%r12
   28457:	mov    -0x8(%rbp),%rbx
   2845b:	mov    -0x20(%rbp),%r14
   2845f:	mov    -0x28(%rbp),%r15
   28463:	leaveq 
   28464:	retq   
   28465:	data16 nopw %cs:0x0(%rax,%rax,1)

0000000000028470 <extbgrx_h2v2_merged_upsample_internal>:
   28470:	push   %rbp
   28471:	mov    %rsp,%rbp
   28474:	sub    $0x50,%rsp
   28478:	mov    %r15,-0x28(%rbp)
   2847c:	mov    %r14,-0x20(%rbp)
   28480:	mov    %r13,-0x18(%rbp)
   28484:	mov    %r12,-0x10(%rbp)
   28488:	mov    %rdi,-0x30(%rbp)
   2848c:	mov    %rbx,-0x8(%rbp)
   28490:	mov    0x1a8(%rdi),%r15
   28497:	mov    0x260(%rdi),%rbx
   2849e:	mov    0x28(%rbx),%r14
   284a2:	mov    0x30(%rbx),%rax
   284a6:	mov    %rax,-0x40(%rbp)
   284aa:	mov    0x38(%rbx),%r9
   284ae:	mov    %r9,-0x38(%rbp)
   284b2:	mov    0x20(%rbx),%r10
   284b6:	mov    %r10,-0x48(%rbp)
   284ba:	mov    (%rsi),%r11
   284bd:	lea    (%rdx,%rdx,1),%r8d
   284c1:	lea    0x1(%r8),%ebx
   284c5:	mov    %ebx,%ebx
   284c7:	mov    (%r11,%rbx,8),%rbx
   284cb:	mov    %r8d,%r8d
   284ce:	mov    (%r11,%r8,8),%r8
   284d2:	mov    0x8(%rsi),%r11
   284d6:	mov    %edx,%r12d
   284d9:	mov    (%r11,%r12,8),%r11
   284dd:	mov    0x10(%rsi),%rdx
   284e1:	mov    (%rdx,%r12,8),%r12
   284e5:	mov    (%rcx),%rdx
   284e8:	mov    0x8(%rcx),%rsi
   284ec:	mov    0x88(%rdi),%ecx
   284f2:	shr    %ecx
   284f4:	jmpq   28613 <extbgrx_h2v2_merged_upsample_internal+0x1a3>
   284f9:	movzbl (%r12),%r13d
   284fe:	movslq (%r10,%r13,4),%r10
   28502:	movzbl (%r8),%edi
   28506:	mov    %rcx,-0x50(%rbp)
   2850a:	lea    (%rdi,%r10,1),%ecx
   2850e:	movslq %ecx,%rcx
   28511:	movzbl (%r15,%rcx,1),%ecx
   28516:	mov    (%rax,%r13,8),%rax
   2851a:	movzbl (%r11),%r13d
   2851e:	add    (%r9,%r13,8),%rax
   28522:	sar    $0x10,%rax
   28526:	lea    (%rdi,%rax,1),%r9d
   2852a:	movslq %r9d,%r9
   2852d:	movslq (%r14,%r13,4),%r13
   28531:	mov    %cl,0x2(%rdx)
   28534:	movzbl (%r15,%r9,1),%ecx
   28539:	mov    %cl,0x1(%rdx)
   2853c:	lea    (%rdi,%r13,1),%ecx
   28540:	movslq %ecx,%rcx
   28543:	movzbl (%rcx,%r15,1),%ecx
   28548:	mov    %cl,(%rdx)
   2854a:	movb   $0xff,0x3(%rdx)
   2854e:	movzbl 0x1(%r8),%edi
   28553:	lea    (%rdi,%r10,1),%ecx
   28557:	movslq %ecx,%rcx
   2855a:	movzbl (%r15,%rcx,1),%ecx
   2855f:	mov    %cl,0x6(%rdx)
   28562:	lea    (%rdi,%rax,1),%ecx
   28565:	movslq %ecx,%rcx
   28568:	movzbl (%r15,%rcx,1),%ecx
   2856d:	mov    %cl,0x5(%rdx)
   28570:	lea    (%rdi,%r13,1),%ecx
   28574:	movslq %ecx,%rcx
   28577:	movzbl (%rcx,%r15,1),%ecx
   2857c:	mov    %cl,0x4(%rdx)
   2857f:	movb   $0xff,0x7(%rdx)
   28583:	movzbl (%rbx),%edi
   28586:	lea    (%rdi,%r10,1),%ecx
   2858a:	movslq %ecx,%rcx
   2858d:	movzbl (%r15,%rcx,1),%ecx
   28592:	mov    %cl,0x2(%rsi)
   28595:	lea    (%rdi,%rax,1),%ecx
   28598:	movslq %ecx,%rcx
   2859b:	movzbl (%r15,%rcx,1),%ecx
   285a0:	mov    %cl,0x1(%rsi)
   285a3:	lea    (%rdi,%r13,1),%ecx
   285a7:	movslq %ecx,%rcx
   285aa:	movzbl (%rcx,%r15,1),%ecx
   285af:	mov    %cl,(%rsi)
   285b1:	movb   $0xff,0x3(%rsi)
   285b5:	movzbl 0x1(%rbx),%edi
   285b9:	lea    (%rdi,%r10,1),%ecx
   285bd:	movslq %ecx,%rcx
   285c0:	movzbl (%r15,%rcx,1),%ecx
   285c5:	mov    %cl,0x6(%rsi)
   285c8:	add    %edi,%eax
   285ca:	movslq %eax,%rax
   285cd:	movzbl (%r15,%rax,1),%eax
   285d2:	mov    %al,0x5(%rsi)
   285d5:	lea    (%rdi,%r13,1),%eax
   285d9:	movslq %eax,%rax
   285dc:	movzbl (%rax,%r15,1),%eax
   285e1:	mov    %al,0x4(%rsi)
   285e4:	movb   $0xff,0x7(%rsi)
   285e8:	add    $0x2,%rbx
   285ec:	add    $0x2,%r8
   285f0:	add    $0x1,%r11
   285f4:	add    $0x1,%r12
   285f8:	add    $0x8,%rdx
   285fc:	add    $0x8,%rsi
   28600:	mov    -0x50(%rbp),%rax
   28604:	lea    -0x1(%rax),%ecx
   28607:	mov    -0x38(%rbp),%r9
   2860b:	mov    -0x40(%rbp),%rax
   2860f:	mov    -0x48(%rbp),%r10
   28613:	test   %ecx,%ecx
   28615:	jne    284f9 <extbgrx_h2v2_merged_upsample_internal+0x89>
   2861b:	mov    -0x30(%rbp),%rcx
   2861f:	mov    0x88(%rcx),%ecx
   28625:	and    $0x1,%ecx
   28628:	test   %ecx,%ecx
   2862a:	jne    28642 <extbgrx_h2v2_merged_upsample_internal+0x1d2>
   2862c:	mov    -0x8(%rbp),%rbx
   28630:	mov    -0x10(%rbp),%r12
   28634:	mov    -0x18(%rbp),%r13
   28638:	mov    -0x20(%rbp),%r14
   2863c:	mov    -0x28(%rbp),%r15
   28640:	leaveq 
   28641:	retq   
   28642:	movzbl (%r12),%r12d
   28647:	movslq (%r10,%r12,4),%rdi
   2864b:	movzbl (%r8),%r13d
   2864f:	lea    0x0(%r13,%rdi,1),%ecx
   28654:	movslq %ecx,%rcx
   28657:	movzbl (%r15,%rcx,1),%ecx
   2865c:	mov    (%rax,%r12,8),%rax
   28660:	movzbl (%r11),%r10d
   28664:	add    (%r9,%r10,8),%rax
   28668:	sar    $0x10,%rax
   2866c:	lea    0x0(%r13,%rax,1),%r8d
   28671:	movslq %r8d,%r8
   28674:	movslq (%r14,%r10,4),%r9
   28678:	mov    %cl,0x2(%rdx)
   2867b:	movzbl (%r15,%r8,1),%ecx
   28680:	mov    %cl,0x1(%rdx)
   28683:	lea    0x0(%r13,%r9,1),%ecx
   28688:	movslq %ecx,%rcx
   2868b:	movzbl (%r15,%rcx,1),%ecx
   28690:	mov    %cl,(%rdx)
   28692:	movb   $0xff,0x3(%rdx)
   28696:	movzbl (%rbx),%edx
   28699:	lea    (%rdx,%rdi,1),%ecx
   2869c:	movslq %ecx,%rcx
   2869f:	movzbl (%r15,%rcx,1),%ecx
   286a4:	mov    %cl,0x2(%rsi)
   286a7:	add    %edx,%eax
   286a9:	movslq %eax,%rax
   286ac:	movzbl (%r15,%rax,1),%eax
   286b1:	mov    %al,0x1(%rsi)
   286b4:	lea    (%rdx,%r9,1),%eax
   286b8:	movslq %eax,%rax
   286bb:	movzbl (%r15,%rax,1),%eax
   286c0:	mov    %al,(%rsi)
   286c2:	movb   $0xff,0x3(%rsi)
   286c6:	mov    -0x8(%rbp),%rbx
   286ca:	mov    -0x10(%rbp),%r12
   286ce:	mov    -0x18(%rbp),%r13
   286d2:	mov    -0x20(%rbp),%r14
   286d6:	mov    -0x28(%rbp),%r15
   286da:	leaveq 
   286db:	retq   
   286dc:	nopl   0x0(%rax)

00000000000286e0 <extxbgr_h2v1_merged_upsample_internal>:
   286e0:	push   %rbp
   286e1:	mov    %rsp,%rbp
   286e4:	sub    $0x40,%rsp
   286e8:	mov    %r15,-0x28(%rbp)
   286ec:	mov    %r14,-0x20(%rbp)
   286f0:	mov    %rdi,-0x30(%rbp)
   286f4:	mov    %rbx,-0x8(%rbp)
   286f8:	mov    %r12,-0x10(%rbp)
   286fc:	mov    %r13,-0x18(%rbp)
   28700:	mov    0x1a8(%rdi),%r13
   28707:	mov    0x260(%rdi),%rbx
   2870e:	mov    0x28(%rbx),%r12
   28712:	mov    0x30(%rbx),%rax
   28716:	mov    %rax,-0x40(%rbp)
   2871a:	mov    0x38(%rbx),%r8
   2871e:	mov    %r8,-0x38(%rbp)
   28722:	mov    0x20(%rbx),%r11
   28726:	mov    (%rsi),%rbx
   28729:	mov    %edx,%r9d
   2872c:	mov    (%rbx,%r9,8),%rdx
   28730:	mov    0x8(%rsi),%rbx
   28734:	mov    (%rbx,%r9,8),%rbx
   28738:	mov    0x10(%rsi),%rsi
   2873c:	mov    (%rsi,%r9,8),%r9
   28740:	mov    (%rcx),%rsi
   28743:	mov    0x88(%rdi),%ecx
   28749:	shr    %ecx
   2874b:	jmpq   287f6 <extxbgr_h2v1_merged_upsample_internal+0x116>
   28750:	movzbl (%r9),%r10d
   28754:	movslq (%r11,%r10,4),%r15
   28758:	movzbl (%rdx),%edi
   2875b:	lea    (%rdi,%r15,1),%r14d
   2875f:	movslq %r14d,%r14
   28762:	movzbl 0x0(%r13,%r14,1),%r14d
   28768:	mov    (%rax,%r10,8),%rax
   2876c:	movzbl (%rbx),%r10d
   28770:	add    (%r8,%r10,8),%rax
   28774:	sar    $0x10,%rax
   28778:	lea    (%rdi,%rax,1),%r8d
   2877c:	movslq %r8d,%r8
   2877f:	movslq (%r12,%r10,4),%r10
   28783:	mov    %r14b,0x3(%rsi)
   28787:	movzbl 0x0(%r13,%r8,1),%r8d
   2878d:	mov    %r8b,0x2(%rsi)
   28791:	add    %r10d,%edi
   28794:	movslq %edi,%rdi
   28797:	movzbl (%rdi,%r13,1),%edi
   2879c:	mov    %dil,0x1(%rsi)
   287a0:	movb   $0xff,(%rsi)
   287a3:	movzbl 0x1(%rdx),%r8d
   287a8:	lea    (%r8,%r15,1),%edi
   287ac:	movslq %edi,%rdi
   287af:	movzbl 0x0(%r13,%rdi,1),%edi
   287b5:	mov    %dil,0x7(%rsi)
   287b9:	add    %r8d,%eax
   287bc:	movslq %eax,%rax
   287bf:	movzbl 0x0(%r13,%rax,1),%eax
   287c5:	mov    %al,0x6(%rsi)
   287c8:	lea    (%r8,%r10,1),%eax
   287cc:	movslq %eax,%rax
   287cf:	movzbl (%rax,%r13,1),%eax
   287d4:	mov    %al,0x5(%rsi)
   287d7:	movb   $0xff,0x4(%rsi)
   287db:	add    $0x2,%rdx
   287df:	add    $0x1,%rbx
   287e3:	add    $0x1,%r9
   287e7:	add    $0x8,%rsi
   287eb:	add    $0xffffffff,%ecx
   287ee:	mov    -0x38(%rbp),%r8
   287f2:	mov    -0x40(%rbp),%rax
   287f6:	test   %ecx,%ecx
   287f8:	jne    28750 <extxbgr_h2v1_merged_upsample_internal+0x70>
   287fe:	mov    -0x30(%rbp),%rcx
   28802:	mov    0x88(%rcx),%ecx
   28808:	and    $0x1,%ecx
   2880b:	test   %ecx,%ecx
   2880d:	jne    28825 <extxbgr_h2v1_merged_upsample_internal+0x145>
   2880f:	mov    -0x18(%rbp),%r13
   28813:	mov    -0x10(%rbp),%r12
   28817:	mov    -0x8(%rbp),%rbx
   2881b:	mov    -0x20(%rbp),%r14
   2881f:	mov    -0x28(%rbp),%r15
   28823:	leaveq 
   28824:	retq   
   28825:	movzbl (%rdx),%ecx
   28828:	movzbl (%r9),%edi
   2882c:	mov    %rcx,%rdx
   2882f:	add    (%r11,%rdi,4),%edx
   28833:	movslq %edx,%rdx
   28836:	movzbl 0x0(%r13,%rdx,1),%edx
   2883c:	mov    (%rax,%rdi,8),%rax
   28840:	movzbl (%rbx),%edi
   28843:	add    (%r8,%rdi,8),%rax
   28847:	sar    $0x10,%rax
   2884b:	add    %ecx,%eax
   2884d:	movslq %eax,%rax
   28850:	add    (%r12,%rdi,4),%ecx
   28854:	mov    %dl,0x3(%rsi)
   28857:	movzbl 0x0(%r13,%rax,1),%eax
   2885d:	mov    %al,0x2(%rsi)
   28860:	movslq %ecx,%rax
   28863:	movzbl 0x0(%r13,%rax,1),%eax
   28869:	mov    %al,0x1(%rsi)
   2886c:	movb   $0xff,(%rsi)
   2886f:	mov    -0x18(%rbp),%r13
   28873:	mov    -0x10(%rbp),%r12
   28877:	mov    -0x8(%rbp),%rbx
   2887b:	mov    -0x20(%rbp),%r14
   2887f:	mov    -0x28(%rbp),%r15
   28883:	leaveq 
   28884:	retq   
   28885:	data16 nopw %cs:0x0(%rax,%rax,1)

0000000000028890 <extxbgr_h2v2_merged_upsample_internal>:
   28890:	push   %rbp
   28891:	mov    %rsp,%rbp
   28894:	sub    $0x50,%rsp
   28898:	mov    %r15,-0x28(%rbp)
   2889c:	mov    %r14,-0x20(%rbp)
   288a0:	mov    %r13,-0x18(%rbp)
   288a4:	mov    %r12,-0x10(%rbp)
   288a8:	mov    %rdi,-0x30(%rbp)
   288ac:	mov    %rbx,-0x8(%rbp)
   288b0:	mov    0x1a8(%rdi),%r15
   288b7:	mov    0x260(%rdi),%rbx
   288be:	mov    0x28(%rbx),%r14
   288c2:	mov    0x30(%rbx),%rax
   288c6:	mov    %rax,-0x40(%rbp)
   288ca:	mov    0x38(%rbx),%r9
   288ce:	mov    %r9,-0x38(%rbp)
   288d2:	mov    0x20(%rbx),%r10
   288d6:	mov    %r10,-0x48(%rbp)
   288da:	mov    (%rsi),%r11
   288dd:	lea    (%rdx,%rdx,1),%r8d
   288e1:	lea    0x1(%r8),%ebx
   288e5:	mov    %ebx,%ebx
   288e7:	mov    (%r11,%rbx,8),%rbx
   288eb:	mov    %r8d,%r8d
   288ee:	mov    (%r11,%r8,8),%r8
   288f2:	mov    0x8(%rsi),%r11
   288f6:	mov    %edx,%r12d
   288f9:	mov    (%r11,%r12,8),%r11
   288fd:	mov    0x10(%rsi),%rdx
   28901:	mov    (%rdx,%r12,8),%r12
   28905:	mov    (%rcx),%rdx
   28908:	mov    0x8(%rcx),%rsi
   2890c:	mov    0x88(%rdi),%ecx
   28912:	shr    %ecx
   28914:	jmpq   28a33 <extxbgr_h2v2_merged_upsample_internal+0x1a3>
   28919:	movzbl (%r12),%r13d
   2891e:	movslq (%r10,%r13,4),%r10
   28922:	movzbl (%r8),%edi
   28926:	mov    %rcx,-0x50(%rbp)
   2892a:	lea    (%rdi,%r10,1),%ecx
   2892e:	movslq %ecx,%rcx
   28931:	movzbl (%r15,%rcx,1),%ecx
   28936:	mov    (%rax,%r13,8),%rax
   2893a:	movzbl (%r11),%r13d
   2893e:	add    (%r9,%r13,8),%rax
   28942:	sar    $0x10,%rax
   28946:	lea    (%rdi,%rax,1),%r9d
   2894a:	movslq %r9d,%r9
   2894d:	movslq (%r14,%r13,4),%r13
   28951:	mov    %cl,0x3(%rdx)
   28954:	movzbl (%r15,%r9,1),%ecx
   28959:	mov    %cl,0x2(%rdx)
   2895c:	lea    (%rdi,%r13,1),%ecx
   28960:	movslq %ecx,%rcx
   28963:	movzbl (%rcx,%r15,1),%ecx
   28968:	mov    %cl,0x1(%rdx)
   2896b:	movb   $0xff,(%rdx)
   2896e:	movzbl 0x1(%r8),%edi
   28973:	lea    (%rdi,%r10,1),%ecx
   28977:	movslq %ecx,%rcx
   2897a:	movzbl (%r15,%rcx,1),%ecx
   2897f:	mov    %cl,0x7(%rdx)
   28982:	lea    (%rdi,%rax,1),%ecx
   28985:	movslq %ecx,%rcx
   28988:	movzbl (%r15,%rcx,1),%ecx
   2898d:	mov    %cl,0x6(%rdx)
   28990:	lea    (%rdi,%r13,1),%ecx
   28994:	movslq %ecx,%rcx
   28997:	movzbl (%rcx,%r15,1),%ecx
   2899c:	mov    %cl,0x5(%rdx)
   2899f:	movb   $0xff,0x4(%rdx)
   289a3:	movzbl (%rbx),%edi
   289a6:	lea    (%rdi,%r10,1),%ecx
   289aa:	movslq %ecx,%rcx
   289ad:	movzbl (%r15,%rcx,1),%ecx
   289b2:	mov    %cl,0x3(%rsi)
   289b5:	lea    (%rdi,%rax,1),%ecx
   289b8:	movslq %ecx,%rcx
   289bb:	movzbl (%r15,%rcx,1),%ecx
   289c0:	mov    %cl,0x2(%rsi)
   289c3:	lea    (%rdi,%r13,1),%ecx
   289c7:	movslq %ecx,%rcx
   289ca:	movzbl (%rcx,%r15,1),%ecx
   289cf:	mov    %cl,0x1(%rsi)
   289d2:	movb   $0xff,(%rsi)
   289d5:	movzbl 0x1(%rbx),%edi
   289d9:	lea    (%rdi,%r10,1),%ecx
   289dd:	movslq %ecx,%rcx
   289e0:	movzbl (%r15,%rcx,1),%ecx
   289e5:	mov    %cl,0x7(%rsi)
   289e8:	add    %edi,%eax
   289ea:	movslq %eax,%rax
   289ed:	movzbl (%r15,%rax,1),%eax
   289f2:	mov    %al,0x6(%rsi)
   289f5:	lea    (%rdi,%r13,1),%eax
   289f9:	movslq %eax,%rax
   289fc:	movzbl (%rax,%r15,1),%eax
   28a01:	mov    %al,0x5(%rsi)
   28a04:	movb   $0xff,0x4(%rsi)
   28a08:	add    $0x2,%rbx
   28a0c:	add    $0x2,%r8
   28a10:	add    $0x1,%r11
   28a14:	add    $0x1,%r12
   28a18:	add    $0x8,%rdx
   28a1c:	add    $0x8,%rsi
   28a20:	mov    -0x50(%rbp),%rax
   28a24:	lea    -0x1(%rax),%ecx
   28a27:	mov    -0x38(%rbp),%r9
   28a2b:	mov    -0x40(%rbp),%rax
   28a2f:	mov    -0x48(%rbp),%r10
   28a33:	test   %ecx,%ecx
   28a35:	jne    28919 <extxbgr_h2v2_merged_upsample_internal+0x89>
   28a3b:	mov    -0x30(%rbp),%rcx
   28a3f:	mov    0x88(%rcx),%ecx
   28a45:	and    $0x1,%ecx
   28a48:	test   %ecx,%ecx
   28a4a:	jne    28a62 <extxbgr_h2v2_merged_upsample_internal+0x1d2>
   28a4c:	mov    -0x8(%rbp),%rbx
   28a50:	mov    -0x10(%rbp),%r12
   28a54:	mov    -0x18(%rbp),%r13
   28a58:	mov    -0x20(%rbp),%r14
   28a5c:	mov    -0x28(%rbp),%r15
   28a60:	leaveq 
   28a61:	retq   
   28a62:	movzbl (%r12),%r12d
   28a67:	movslq (%r10,%r12,4),%rdi
   28a6b:	movzbl (%r8),%r13d
   28a6f:	lea    0x0(%r13,%rdi,1),%ecx
   28a74:	movslq %ecx,%rcx
   28a77:	movzbl (%r15,%rcx,1),%ecx
   28a7c:	mov    (%rax,%r12,8),%rax
   28a80:	movzbl (%r11),%r10d
   28a84:	add    (%r9,%r10,8),%rax
   28a88:	sar    $0x10,%rax
   28a8c:	lea    0x0(%r13,%rax,1),%r8d
   28a91:	movslq %r8d,%r8
   28a94:	movslq (%r14,%r10,4),%r9
   28a98:	mov    %cl,0x3(%rdx)
   28a9b:	movzbl (%r15,%r8,1),%ecx
   28aa0:	mov    %cl,0x2(%rdx)
   28aa3:	lea    0x0(%r13,%r9,1),%ecx
   28aa8:	movslq %ecx,%rcx
   28aab:	movzbl (%r15,%rcx,1),%ecx
   28ab0:	mov    %cl,0x1(%rdx)
   28ab3:	movb   $0xff,(%rdx)
   28ab6:	movzbl (%rbx),%edx
   28ab9:	lea    (%rdx,%rdi,1),%ecx
   28abc:	movslq %ecx,%rcx
   28abf:	movzbl (%r15,%rcx,1),%ecx
   28ac4:	mov    %cl,0x3(%rsi)
   28ac7:	add    %edx,%eax
   28ac9:	movslq %eax,%rax
   28acc:	movzbl (%r15,%rax,1),%eax
   28ad1:	mov    %al,0x2(%rsi)
   28ad4:	lea    (%rdx,%r9,1),%eax
   28ad8:	movslq %eax,%rax
   28adb:	movzbl (%r15,%rax,1),%eax
   28ae0:	mov    %al,0x1(%rsi)
   28ae3:	movb   $0xff,(%rsi)
   28ae6:	mov    -0x8(%rbp),%rbx
   28aea:	mov    -0x10(%rbp),%r12
   28aee:	mov    -0x18(%rbp),%r13
   28af2:	mov    -0x20(%rbp),%r14
   28af6:	mov    -0x28(%rbp),%r15
   28afa:	leaveq 
   28afb:	retq   
   28afc:	nopl   0x0(%rax)

0000000000028b00 <extxrgb_h2v1_merged_upsample_internal>:
   28b00:	push   %rbp
   28b01:	mov    %rsp,%rbp
   28b04:	sub    $0x40,%rsp
   28b08:	mov    %r15,-0x28(%rbp)
   28b0c:	mov    %r14,-0x20(%rbp)
   28b10:	mov    %rdi,-0x30(%rbp)
   28b14:	mov    %rbx,-0x8(%rbp)
   28b18:	mov    %r12,-0x10(%rbp)
   28b1c:	mov    %r13,-0x18(%rbp)
   28b20:	mov    0x1a8(%rdi),%r13
   28b27:	mov    0x260(%rdi),%rbx
   28b2e:	mov    0x28(%rbx),%r12
   28b32:	mov    0x30(%rbx),%rax
   28b36:	mov    %rax,-0x40(%rbp)
   28b3a:	mov    0x38(%rbx),%r8
   28b3e:	mov    %r8,-0x38(%rbp)
   28b42:	mov    0x20(%rbx),%r11
   28b46:	mov    (%rsi),%rbx
   28b49:	mov    %edx,%r9d
   28b4c:	mov    (%rbx,%r9,8),%rdx
   28b50:	mov    0x8(%rsi),%rbx
   28b54:	mov    (%rbx,%r9,8),%rbx
   28b58:	mov    0x10(%rsi),%rsi
   28b5c:	mov    (%rsi,%r9,8),%r9
   28b60:	mov    (%rcx),%rsi
   28b63:	mov    0x88(%rdi),%ecx
   28b69:	shr    %ecx
   28b6b:	jmpq   28c16 <extxrgb_h2v1_merged_upsample_internal+0x116>
   28b70:	movzbl (%r9),%r10d
   28b74:	movslq (%r11,%r10,4),%r15
   28b78:	movzbl (%rdx),%edi
   28b7b:	lea    (%rdi,%r15,1),%r14d
   28b7f:	movslq %r14d,%r14
   28b82:	movzbl 0x0(%r13,%r14,1),%r14d
   28b88:	mov    (%rax,%r10,8),%rax
   28b8c:	movzbl (%rbx),%r10d
   28b90:	add    (%r8,%r10,8),%rax
   28b94:	sar    $0x10,%rax
   28b98:	lea    (%rdi,%rax,1),%r8d
   28b9c:	movslq %r8d,%r8
   28b9f:	movslq (%r12,%r10,4),%r10
   28ba3:	mov    %r14b,0x1(%rsi)
   28ba7:	movzbl 0x0(%r13,%r8,1),%r8d
   28bad:	mov    %r8b,0x2(%rsi)
   28bb1:	add    %r10d,%edi
   28bb4:	movslq %edi,%rdi
   28bb7:	movzbl (%rdi,%r13,1),%edi
   28bbc:	mov    %dil,0x3(%rsi)
   28bc0:	movb   $0xff,(%rsi)
   28bc3:	movzbl 0x1(%rdx),%r8d
   28bc8:	lea    (%r8,%r15,1),%edi
   28bcc:	movslq %edi,%rdi
   28bcf:	movzbl 0x0(%r13,%rdi,1),%edi
   28bd5:	mov    %dil,0x5(%rsi)
   28bd9:	add    %r8d,%eax
   28bdc:	movslq %eax,%rax
   28bdf:	movzbl 0x0(%r13,%rax,1),%eax
   28be5:	mov    %al,0x6(%rsi)
   28be8:	lea    (%r8,%r10,1),%eax
   28bec:	movslq %eax,%rax
   28bef:	movzbl (%rax,%r13,1),%eax
   28bf4:	mov    %al,0x7(%rsi)
   28bf7:	movb   $0xff,0x4(%rsi)
   28bfb:	add    $0x2,%rdx
   28bff:	add    $0x1,%rbx
   28c03:	add    $0x1,%r9
   28c07:	add    $0x8,%rsi
   28c0b:	add    $0xffffffff,%ecx
   28c0e:	mov    -0x38(%rbp),%r8
   28c12:	mov    -0x40(%rbp),%rax
   28c16:	test   %ecx,%ecx
   28c18:	jne    28b70 <extxrgb_h2v1_merged_upsample_internal+0x70>
   28c1e:	mov    -0x30(%rbp),%rcx
   28c22:	mov    0x88(%rcx),%ecx
   28c28:	and    $0x1,%ecx
   28c2b:	test   %ecx,%ecx
   28c2d:	jne    28c45 <extxrgb_h2v1_merged_upsample_internal+0x145>
   28c2f:	mov    -0x18(%rbp),%r13
   28c33:	mov    -0x10(%rbp),%r12
   28c37:	mov    -0x8(%rbp),%rbx
   28c3b:	mov    -0x20(%rbp),%r14
   28c3f:	mov    -0x28(%rbp),%r15
   28c43:	leaveq 
   28c44:	retq   
   28c45:	movzbl (%rdx),%ecx
   28c48:	movzbl (%r9),%edi
   28c4c:	mov    %rcx,%rdx
   28c4f:	add    (%r11,%rdi,4),%edx
   28c53:	movslq %edx,%rdx
   28c56:	movzbl 0x0(%r13,%rdx,1),%edx
   28c5c:	mov    (%rax,%rdi,8),%rax
   28c60:	movzbl (%rbx),%edi
   28c63:	add    (%r8,%rdi,8),%rax
   28c67:	sar    $0x10,%rax
   28c6b:	add    %ecx,%eax
   28c6d:	movslq %eax,%rax
   28c70:	add    (%r12,%rdi,4),%ecx
   28c74:	mov    %dl,0x1(%rsi)
   28c77:	movzbl 0x0(%r13,%rax,1),%eax
   28c7d:	mov    %al,0x2(%rsi)
   28c80:	movslq %ecx,%rax
   28c83:	movzbl 0x0(%r13,%rax,1),%eax
   28c89:	mov    %al,0x3(%rsi)
   28c8c:	movb   $0xff,(%rsi)
   28c8f:	mov    -0x18(%rbp),%r13
   28c93:	mov    -0x10(%rbp),%r12
   28c97:	mov    -0x8(%rbp),%rbx
   28c9b:	mov    -0x20(%rbp),%r14
   28c9f:	mov    -0x28(%rbp),%r15
   28ca3:	leaveq 
   28ca4:	retq   
   28ca5:	data16 nopw %cs:0x0(%rax,%rax,1)

0000000000028cb0 <extxrgb_h2v2_merged_upsample_internal>:
   28cb0:	push   %rbp
   28cb1:	mov    %rsp,%rbp
   28cb4:	sub    $0x50,%rsp
   28cb8:	mov    %r15,-0x28(%rbp)
   28cbc:	mov    %r14,-0x20(%rbp)
   28cc0:	mov    %r13,-0x18(%rbp)
   28cc4:	mov    %r12,-0x10(%rbp)
   28cc8:	mov    %rdi,-0x30(%rbp)
   28ccc:	mov    %rbx,-0x8(%rbp)
   28cd0:	mov    0x1a8(%rdi),%r15
   28cd7:	mov    0x260(%rdi),%rbx
   28cde:	mov    0x28(%rbx),%r14
   28ce2:	mov    0x30(%rbx),%rax
   28ce6:	mov    %rax,-0x40(%rbp)
   28cea:	mov    0x38(%rbx),%r9
   28cee:	mov    %r9,-0x38(%rbp)
   28cf2:	mov    0x20(%rbx),%r10
   28cf6:	mov    %r10,-0x48(%rbp)
   28cfa:	mov    (%rsi),%r11
   28cfd:	lea    (%rdx,%rdx,1),%r8d
   28d01:	lea    0x1(%r8),%ebx
   28d05:	mov    %ebx,%ebx
   28d07:	mov    (%r11,%rbx,8),%rbx
   28d0b:	mov    %r8d,%r8d
   28d0e:	mov    (%r11,%r8,8),%r8
   28d12:	mov    0x8(%rsi),%r11
   28d16:	mov    %edx,%r12d
   28d19:	mov    (%r11,%r12,8),%r11
   28d1d:	mov    0x10(%rsi),%rdx
   28d21:	mov    (%rdx,%r12,8),%r12
   28d25:	mov    (%rcx),%rdx
   28d28:	mov    0x8(%rcx),%rsi
   28d2c:	mov    0x88(%rdi),%ecx
   28d32:	shr    %ecx
   28d34:	jmpq   28e53 <extxrgb_h2v2_merged_upsample_internal+0x1a3>
   28d39:	movzbl (%r12),%r13d
   28d3e:	movslq (%r10,%r13,4),%r10
   28d42:	movzbl (%r8),%edi
   28d46:	mov    %rcx,-0x50(%rbp)
   28d4a:	lea    (%rdi,%r10,1),%ecx
   28d4e:	movslq %ecx,%rcx
   28d51:	movzbl (%r15,%rcx,1),%ecx
   28d56:	mov    (%rax,%r13,8),%rax
   28d5a:	movzbl (%r11),%r13d
   28d5e:	add    (%r9,%r13,8),%rax
   28d62:	sar    $0x10,%rax
   28d66:	lea    (%rdi,%rax,1),%r9d
   28d6a:	movslq %r9d,%r9
   28d6d:	movslq (%r14,%r13,4),%r13
   28d71:	mov    %cl,0x1(%rdx)
   28d74:	movzbl (%r15,%r9,1),%ecx
   28d79:	mov    %cl,0x2(%rdx)
   28d7c:	lea    (%rdi,%r13,1),%ecx
   28d80:	movslq %ecx,%rcx
   28d83:	movzbl (%rcx,%r15,1),%ecx
   28d88:	mov    %cl,0x3(%rdx)
   28d8b:	movb   $0xff,(%rdx)
   28d8e:	movzbl 0x1(%r8),%edi
   28d93:	lea    (%rdi,%r10,1),%ecx
   28d97:	movslq %ecx,%rcx
   28d9a:	movzbl (%r15,%rcx,1),%ecx
   28d9f:	mov    %cl,0x5(%rdx)
   28da2:	lea    (%rdi,%rax,1),%ecx
   28da5:	movslq %ecx,%rcx
   28da8:	movzbl (%r15,%rcx,1),%ecx
   28dad:	mov    %cl,0x6(%rdx)
   28db0:	lea    (%rdi,%r13,1),%ecx
   28db4:	movslq %ecx,%rcx
   28db7:	movzbl (%rcx,%r15,1),%ecx
   28dbc:	mov    %cl,0x7(%rdx)
   28dbf:	movb   $0xff,0x4(%rdx)
   28dc3:	movzbl (%rbx),%edi
   28dc6:	lea    (%rdi,%r10,1),%ecx
   28dca:	movslq %ecx,%rcx
   28dcd:	movzbl (%r15,%rcx,1),%ecx
   28dd2:	mov    %cl,0x1(%rsi)
   28dd5:	lea    (%rdi,%rax,1),%ecx
   28dd8:	movslq %ecx,%rcx
   28ddb:	movzbl (%r15,%rcx,1),%ecx
   28de0:	mov    %cl,0x2(%rsi)
   28de3:	lea    (%rdi,%r13,1),%ecx
   28de7:	movslq %ecx,%rcx
   28dea:	movzbl (%rcx,%r15,1),%ecx
   28def:	mov    %cl,0x3(%rsi)
   28df2:	movb   $0xff,(%rsi)
   28df5:	movzbl 0x1(%rbx),%edi
   28df9:	lea    (%rdi,%r10,1),%ecx
   28dfd:	movslq %ecx,%rcx
   28e00:	movzbl (%r15,%rcx,1),%ecx
   28e05:	mov    %cl,0x5(%rsi)
   28e08:	add    %edi,%eax
   28e0a:	movslq %eax,%rax
   28e0d:	movzbl (%r15,%rax,1),%eax
   28e12:	mov    %al,0x6(%rsi)
   28e15:	lea    (%rdi,%r13,1),%eax
   28e19:	movslq %eax,%rax
   28e1c:	movzbl (%rax,%r15,1),%eax
   28e21:	mov    %al,0x7(%rsi)
   28e24:	movb   $0xff,0x4(%rsi)
   28e28:	add    $0x2,%rbx
   28e2c:	add    $0x2,%r8
   28e30:	add    $0x1,%r11
   28e34:	add    $0x1,%r12
   28e38:	add    $0x8,%rdx
   28e3c:	add    $0x8,%rsi
   28e40:	mov    -0x50(%rbp),%rax
   28e44:	lea    -0x1(%rax),%ecx
   28e47:	mov    -0x38(%rbp),%r9
   28e4b:	mov    -0x40(%rbp),%rax
   28e4f:	mov    -0x48(%rbp),%r10
   28e53:	test   %ecx,%ecx
   28e55:	jne    28d39 <extxrgb_h2v2_merged_upsample_internal+0x89>
   28e5b:	mov    -0x30(%rbp),%rcx
   28e5f:	mov    0x88(%rcx),%ecx
   28e65:	and    $0x1,%ecx
   28e68:	test   %ecx,%ecx
   28e6a:	jne    28e82 <extxrgb_h2v2_merged_upsample_internal+0x1d2>
   28e6c:	mov    -0x8(%rbp),%rbx
   28e70:	mov    -0x10(%rbp),%r12
   28e74:	mov    -0x18(%rbp),%r13
   28e78:	mov    -0x20(%rbp),%r14
   28e7c:	mov    -0x28(%rbp),%r15
   28e80:	leaveq 
   28e81:	retq   
   28e82:	movzbl (%r12),%r12d
   28e87:	movslq (%r10,%r12,4),%rdi
   28e8b:	movzbl (%r8),%r13d
   28e8f:	lea    0x0(%r13,%rdi,1),%ecx
   28e94:	movslq %ecx,%rcx
   28e97:	movzbl (%r15,%rcx,1),%ecx
   28e9c:	mov    (%rax,%r12,8),%rax
   28ea0:	movzbl (%r11),%r10d
   28ea4:	add    (%r9,%r10,8),%rax
   28ea8:	sar    $0x10,%rax
   28eac:	lea    0x0(%r13,%rax,1),%r8d
   28eb1:	movslq %r8d,%r8
   28eb4:	movslq (%r14,%r10,4),%r9
   28eb8:	mov    %cl,0x1(%rdx)
   28ebb:	movzbl (%r15,%r8,1),%ecx
   28ec0:	mov    %cl,0x2(%rdx)
   28ec3:	lea    0x0(%r13,%r9,1),%ecx
   28ec8:	movslq %ecx,%rcx
   28ecb:	movzbl (%r15,%rcx,1),%ecx
   28ed0:	mov    %cl,0x3(%rdx)
   28ed3:	movb   $0xff,(%rdx)
   28ed6:	movzbl (%rbx),%edx
   28ed9:	lea    (%rdx,%rdi,1),%ecx
   28edc:	movslq %ecx,%rcx
   28edf:	movzbl (%r15,%rcx,1),%ecx
   28ee4:	mov    %cl,0x1(%rsi)
   28ee7:	add    %edx,%eax
   28ee9:	movslq %eax,%rax
   28eec:	movzbl (%r15,%rax,1),%eax
   28ef1:	mov    %al,0x2(%rsi)
   28ef4:	lea    (%rdx,%r9,1),%eax
   28ef8:	movslq %eax,%rax
   28efb:	movzbl (%r15,%rax,1),%eax
   28f00:	mov    %al,0x3(%rsi)
   28f03:	movb   $0xff,(%rsi)
   28f06:	mov    -0x8(%rbp),%rbx
   28f0a:	mov    -0x10(%rbp),%r12
   28f0e:	mov    -0x18(%rbp),%r13
   28f12:	mov    -0x20(%rbp),%r14
   28f16:	mov    -0x28(%rbp),%r15
   28f1a:	leaveq 
   28f1b:	retq   
   28f1c:	nopl   0x0(%rax)

0000000000028f20 <build_ycc_rgb_table>:
   28f20:	push   %rbp
   28f21:	mov    %rsp,%rbp
   28f24:	sub    $0x20,%rsp
   28f28:	mov    %r12,-0x8(%rbp)
   28f2c:	mov    %r13,-0x10(%rbp)
   28f30:	mov    %r14,-0x18(%rbp)
   28f34:	mov    %r15,-0x20(%rbp)
   28f38:	mov    0x8(%rdi),%rax
   28f3c:	mov    (%rax),%rax
   28f3f:	mov    $0x1,%r13d
   28f45:	mov    $0x400,%r15d
   28f4b:	mov    0x260(%rdi),%r14
   28f52:	mov    %rdi,%r12
   28f55:	mov    %r13,%rsi
   28f58:	mov    %r15,%rdx
   28f5b:	callq  *%rax
   28f5d:	mov    %rax,0x20(%r14)
   28f61:	mov    0x8(%r12),%rax
   28f66:	mov    (%rax),%rax
   28f69:	mov    %r15,%rdx
   28f6c:	mov    %r12,%rdi
   28f6f:	mov    %r13,%rsi
   28f72:	callq  *%rax
   28f74:	mov    %rax,0x28(%r14)
   28f78:	mov    0x8(%r12),%rax
   28f7d:	mov    (%rax),%rax
   28f80:	mov    $0x800,%r15d
   28f86:	mov    %r12,%rdi
   28f89:	mov    %r13,%rsi
   28f8c:	mov    %r15,%rdx
   28f8f:	callq  *%rax
   28f91:	mov    %rax,0x30(%r14)
   28f95:	mov    0x8(%r12),%rax
   28f9a:	mov    (%rax),%rax
   28f9d:	mov    %r15,%rdx
   28fa0:	mov    %r13,%rsi
   28fa3:	mov    %r12,%rdi
   28fa6:	callq  *%rax
   28fa8:	mov    %rax,0x38(%r14)
   28fac:	xor    %eax,%eax
   28fae:	mov    $0xffffffffffffff80,%rcx
   28fb5:	jmp    29024 <build_ycc_rgb_table+0x104>
   28fb7:	mov    %rcx,%rdx
   28fba:	imul   $0x166e9,%rdx,%rdx
   28fc1:	add    $0x8000,%rdx
   28fc8:	sar    $0x10,%rdx
   28fcc:	mov    0x20(%r14),%rsi
   28fd0:	movslq %eax,%rdi
   28fd3:	mov    %edx,(%rsi,%rdi,4)
   28fd6:	mov    %rcx,%rdx
   28fd9:	imul   $0x1c5a2,%rdx,%rdx
   28fe0:	add    $0x8000,%rdx
   28fe7:	sar    $0x10,%rdx
   28feb:	mov    0x28(%r14),%rsi
   28fef:	mov    %edx,(%rsi,%rdi,4)
   28ff2:	mov    %rcx,%rsi
   28ff5:	imul   $0xffffffffffff492e,%rsi,%rsi
   28ffc:	mov    0x30(%r14),%rdx
   29000:	mov    %rsi,(%rdx,%rdi,8)
   29004:	mov    %rcx,%rdx
   29007:	imul   $0xffffffffffffa7e6,%rdx,%rdx
   2900e:	lea    0x8000(%rdx),%rsi
   29015:	mov    0x38(%r14),%rdx
   29019:	mov    %rsi,(%rdx,%rdi,8)
   2901d:	add    $0x1,%eax
   29020:	add    $0x1,%rcx
   29024:	cmp    $0xff,%eax
   29029:	jle    28fb7 <build_ycc_rgb_table+0x97>
   2902b:	mov    -0x20(%rbp),%r15
   2902f:	mov    -0x18(%rbp),%r14
   29033:	mov    -0x10(%rbp),%r13
   29037:	mov    -0x8(%rbp),%r12
   2903b:	leaveq 
   2903c:	retq   
   2903d:	nopl   (%rax)

0000000000029040 <start_pass_merged_upsample>:
   29040:	push   %rbp
   29041:	mov    %rsp,%rbp
   29044:	mov    0x260(%rdi),%rax
   2904b:	movl   $0x0,0x48(%rax)
   29052:	mov    0x8c(%rdi),%ecx
   29058:	mov    %ecx,0x50(%rax)
   2905b:	leaveq 
   2905c:	retq   
   2905d:	nopl   (%rax)

0000000000029060 <merged_2v_upsample>:
   29060:	push   %rbp
   29061:	mov    %rsp,%rbp
   29064:	sub    $0x30,%rsp
   29068:	mov    %r13,-0x10(%rbp)
   2906c:	mov    %r14,-0x18(%rbp)
   29070:	mov    %r15,-0x20(%rbp)
   29074:	mov    0x260(%rdi),%r15
   2907b:	movslq 0x48(%r15),%rax
   2907f:	test   %eax,%eax
   29081:	jne    290ca <merged_2v_upsample+0x6a>
   29083:	mov    0x50(%r15),%r13d
   29087:	cmp    $0x1,%r13d
   2908b:	jbe    29093 <merged_2v_upsample+0x33>
   2908d:	mov    $0x2,%r13d
   29093:	mov    (%r9),%ecx
   29096:	mov    0x10(%rbp),%eax
   29099:	sub    %ecx,%eax
   2909b:	cmp    %eax,%r13d
   2909e:	jbe    290a3 <merged_2v_upsample+0x43>
   290a0:	mov    %rax,%r13
   290a3:	mov    (%r8,%rcx,8),%rax
   290a7:	mov    %rax,-0x30(%rbp)
   290ab:	cmp    $0x1,%r13d
   290af:	ja     2913e <merged_2v_upsample+0xde>
   290b5:	mov    0x40(%r15),%rax
   290b9:	mov    %rax,-0x28(%rbp)
   290bd:	movl   $0x1,0x48(%r15)
   290c5:	jmpq   2914e <merged_2v_upsample+0xee>
   290ca:	mov    0x4c(%r15),%eax
   290ce:	mov    0x40(%rdi),%ecx
   290d1:	cmp    $0x10,%ecx
   290d4:	jne    290de <merged_2v_upsample+0x7e>
   290d6:	mov    0x88(%rdi),%eax
   290dc:	add    %eax,%eax
   290de:	mov    (%r9),%ecx
   290e1:	lea    (%r8,%rcx,8),%r10
   290e5:	mov    %r9,%r13
   290e8:	mov    %rax,%r9
   290eb:	mov    %rdx,%r14
   290ee:	mov    %r10,%rdx
   290f1:	mov    $0x1,%r8d
   290f7:	lea    0x40(%r15),%rdi
   290fb:	xor    %esi,%esi
   290fd:	mov    %rsi,%rcx
   29100:	callq  43f0 <jcopy_sample_rows@plt>
   29105:	movl   $0x0,0x48(%r15)
   2910d:	mov    %r13,%rcx
   29110:	mov    $0x1,%r13d
   29116:	mov    %r13,%rax
   29119:	add    (%rcx),%eax
   2911b:	mov    %eax,(%rcx)
   2911d:	mov    0x50(%r15),%eax
   29121:	sub    %r13d,%eax
   29124:	mov    %eax,0x50(%r15)
   29128:	movslq 0x48(%r15),%rax
   2912c:	test   %eax,%eax
   2912e:	je     29171 <merged_2v_upsample+0x111>
   29130:	mov    -0x20(%rbp),%r15
   29134:	mov    -0x18(%rbp),%r14
   29138:	mov    -0x10(%rbp),%r13
   2913c:	leaveq 
   2913d:	retq   
   2913e:	mov    (%r9),%eax
   29141:	add    $0x1,%eax
   29144:	mov    %eax,%eax
   29146:	mov    (%r8,%rax,8),%rax
   2914a:	mov    %rax,-0x28(%rbp)
   2914e:	mov    0x18(%r15),%rax
   29152:	mov    (%rdx),%r8d
   29155:	lea    -0x30(%rbp),%rcx
   29159:	mov    %r12,-0x8(%rbp)
   2915d:	mov    %r9,%r12
   29160:	mov    %rdx,%r14
   29163:	mov    %r8,%rdx
   29166:	callq  *%rax
   29168:	mov    %r12,%rcx
   2916b:	mov    -0x8(%rbp),%r12
   2916f:	jmp    29116 <merged_2v_upsample+0xb6>
   29171:	mov    (%r14),%eax
   29174:	add    $0x1,%eax
   29177:	mov    %eax,(%r14)
   2917a:	mov    -0x20(%rbp),%r15
   2917e:	mov    -0x18(%rbp),%r14
   29182:	mov    -0x10(%rbp),%r13
   29186:	leaveq 
   29187:	retq   
   29188:	nopl   0x0(%rax,%rax,1)

0000000000029190 <merged_1v_upsample>:
   29190:	push   %rbp
   29191:	mov    %rsp,%rbp
   29194:	sub    $0x10,%rsp
   29198:	mov    %r14,-0x8(%rbp)
   2919c:	mov    %r15,-0x10(%rbp)
   291a0:	mov    (%r9),%eax
   291a3:	lea    (%r8,%rax,8),%rcx
   291a7:	mov    0x260(%rdi),%rax
   291ae:	mov    0x18(%rax),%rax
   291b2:	mov    %r9,%r14
   291b5:	mov    %rdx,%r15
   291b8:	mov    (%r15),%edx
   291bb:	callq  *%rax
   291bd:	mov    (%r14),%eax
   291c0:	add    $0x1,%eax
   291c3:	mov    %eax,(%r14)
   291c6:	mov    (%r15),%eax
   291c9:	add    $0x1,%eax
   291cc:	mov    %eax,(%r15)
   291cf:	mov    -0x10(%rbp),%r15
   291d3:	mov    -0x8(%rbp),%r14
   291d7:	leaveq 
   291d8:	retq   
   291d9:	nopl   0x0(%rax)

00000000000291e0 <h2v1_merged_upsample>:
   291e0:	push   %rbp
   291e1:	mov    %rsp,%rbp
   291e4:	mov    0x40(%rdi),%eax
   291e7:	add    $0xfffffffa,%eax
   291ea:	cmp    $0x9,%eax
   291ed:	ja     29206 <h2v1_merged_upsample+0x26>
   291ef:	lea    0x30e4a(%rip),%r8        # 5a040 <rgb_pixelsize+0x48>
   291f6:	movslq (%r8,%rax,4),%rax
   291fa:	add    %r8,%rax
   291fd:	jmpq   *%rax
   291ff:	callq  28b00 <extxrgb_h2v1_merged_upsample_internal>
   29204:	leaveq 
   29205:	retq   
   29206:	callq  272a0 <h2v1_merged_upsample_internal>
   2920b:	leaveq 
   2920c:	retq   
   2920d:	callq  276a0 <extrgb_h2v1_merged_upsample_internal>
   29212:	leaveq 
   29213:	retq   
   29214:	callq  27aa0 <extrgbx_h2v1_merged_upsample_internal>
   29219:	leaveq 
   2921a:	retq   
   2921b:	callq  27ec0 <extbgr_h2v1_merged_upsample_internal>
   29220:	leaveq 
   29221:	retq   
   29222:	callq  282c0 <extbgrx_h2v1_merged_upsample_internal>
   29227:	leaveq 
   29228:	retq   
   29229:	callq  286e0 <extxbgr_h2v1_merged_upsample_internal>
   2922e:	leaveq 
   2922f:	retq   

0000000000029230 <h2v2_merged_upsample>:
   29230:	push   %rbp
   29231:	mov    %rsp,%rbp
   29234:	mov    0x40(%rdi),%eax
   29237:	add    $0xfffffffa,%eax
   2923a:	cmp    $0x9,%eax
   2923d:	ja     29256 <h2v2_merged_upsample+0x26>
   2923f:	lea    0x30e22(%rip),%r8        # 5a068 <rgb_pixelsize+0x70>
   29246:	movslq (%r8,%rax,4),%rax
   2924a:	add    %r8,%rax
   2924d:	jmpq   *%rax
   2924f:	callq  28cb0 <extxrgb_h2v2_merged_upsample_internal>
   29254:	leaveq 
   29255:	retq   
   29256:	callq  27440 <h2v2_merged_upsample_internal>
   2925b:	leaveq 
   2925c:	retq   
   2925d:	callq  27840 <extrgb_h2v2_merged_upsample_internal>
   29262:	leaveq 
   29263:	retq   
   29264:	callq  27c50 <extrgbx_h2v2_merged_upsample_internal>
   29269:	leaveq 
   2926a:	retq   
   2926b:	callq  28060 <extbgr_h2v2_merged_upsample_internal>
   29270:	leaveq 
   29271:	retq   
   29272:	callq  28470 <extbgrx_h2v2_merged_upsample_internal>
   29277:	leaveq 
   29278:	retq   
   29279:	callq  28890 <extxbgr_h2v2_merged_upsample_internal>
   2927e:	leaveq 
   2927f:	retq   

0000000000029280 <h2v1_merged_upsample_565_le>:
   29280:	push   %rbp
   29281:	mov    %rsp,%rbp
   29284:	sub    $0x40,%rsp
   29288:	mov    %r15,-0x28(%rbp)
   2928c:	mov    %r14,-0x20(%rbp)
   29290:	mov    %rdi,-0x30(%rbp)
   29294:	mov    %rbx,-0x8(%rbp)
   29298:	mov    %r12,-0x10(%rbp)
   2929c:	mov    %r13,-0x18(%rbp)
   292a0:	mov    0x1a8(%rdi),%r13
   292a7:	mov    0x260(%rdi),%rbx
   292ae:	mov    0x20(%rbx),%rax
   292b2:	mov    %rax,-0x38(%rbp)
   292b6:	mov    0x30(%rbx),%r12
   292ba:	mov    0x38(%rbx),%r10
   292be:	mov    %r10,-0x40(%rbp)
   292c2:	mov    0x28(%rbx),%r11
   292c6:	mov    (%rsi),%rbx
   292c9:	mov    %edx,%edx
   292cb:	mov    (%rbx,%rdx,8),%rbx
   292cf:	mov    0x8(%rsi),%r8
   292d3:	mov    (%r8,%rdx,8),%r8
   292d7:	mov    0x10(%rsi),%rsi
   292db:	mov    (%rsi,%rdx,8),%r9
   292df:	mov    (%rcx),%rsi
   292e2:	mov    0x88(%rdi),%edx
   292e8:	shr    %edx
   292ea:	jmpq   293bb <h2v1_merged_upsample_565_le+0x13b>
   292ef:	movzbl (%r9),%r15d
   292f3:	mov    (%r12,%r15,8),%rcx
   292f7:	movzbl (%r8),%r14d
   292fb:	add    (%r10,%r14,8),%rcx
   292ff:	sar    $0x10,%rcx
   29303:	movzbl (%rbx),%r10d
   29307:	lea    (%r10,%rcx,1),%edi
   2930b:	movslq %edi,%rdi
   2930e:	movzbl (%rdi,%r13,1),%edi
   29313:	and    $0xfc,%edi
   29319:	movslq (%rax,%r15,4),%r15
   2931d:	lea    (%r10,%r15,1),%eax
   29321:	movslq %eax,%rax
   29324:	movzbl 0x0(%r13,%rax,1),%eax
   2932a:	and    $0xf8,%eax
   2932f:	shl    $0x8,%eax
   29332:	lea    (%rax,%rdi,8),%edi
   29335:	movslq (%r11,%r14,4),%r14
   29339:	lea    (%r10,%r14,1),%eax
   2933d:	movslq %eax,%rax
   29340:	movzbl 0x0(%r13,%rax,1),%eax
   29346:	shr    $0x3,%eax
   29349:	lea    (%rdi,%rax,1),%r10d
   2934d:	movzbl 0x1(%rbx),%edi
   29351:	lea    (%rcx,%rdi,1),%eax
   29354:	movslq %eax,%rax
   29357:	movzbl 0x0(%r13,%rax,1),%ecx
   2935d:	and    $0xfc,%ecx
   29363:	lea    (%r15,%rdi,1),%eax
   29367:	movslq %eax,%rax
   2936a:	movzbl 0x0(%r13,%rax,1),%eax
   29370:	and    $0xf8,%eax
   29375:	shl    $0x8,%eax
   29378:	lea    (%rax,%rcx,8),%ecx
   2937b:	lea    (%r14,%rdi,1),%eax
   2937f:	movslq %eax,%rax
   29382:	movzbl 0x0(%r13,%rax,1),%eax
   29388:	shr    $0x3,%eax
   2938b:	add    %ecx,%eax
   2938d:	shl    $0x10,%eax
   29390:	add    %r10d,%eax
   29393:	mov    %ax,(%rsi)
   29396:	mov    %eax,%eax
   29398:	shr    $0x10,%rax
   2939c:	mov    %ax,0x2(%rsi)
   293a0:	add    $0x2,%rbx
   293a4:	add    $0x1,%r9
   293a8:	add    $0x1,%r8
   293ac:	add    $0x4,%rsi
   293b0:	add    $0xffffffff,%edx
   293b3:	mov    -0x38(%rbp),%rax
   293b7:	mov    -0x40(%rbp),%r10
   293bb:	test   %edx,%edx
   293bd:	jne    292ef <h2v1_merged_upsample_565_le+0x6f>
   293c3:	mov    -0x30(%rbp),%rcx
   293c7:	mov    0x88(%rcx),%ecx
   293cd:	and    $0x1,%ecx
   293d0:	test   %ecx,%ecx
   293d2:	jne    293ea <h2v1_merged_upsample_565_le+0x16a>
   293d4:	mov    -0x18(%rbp),%r13
   293d8:	mov    -0x10(%rbp),%r12
   293dc:	mov    -0x8(%rbp),%rbx
   293e0:	mov    -0x20(%rbp),%r14
   293e4:	mov    -0x28(%rbp),%r15
   293e8:	leaveq 
   293e9:	retq   
   293ea:	movzbl (%rbx),%edx
   293ed:	movzbl (%r9),%ecx
   293f1:	mov    (%rax,%rcx,4),%eax
   293f4:	add    %edx,%eax
   293f6:	movslq %eax,%rax
   293f9:	movzbl 0x0(%r13,%rax,1),%eax
   293ff:	and    $0xf8,%ax
   29403:	shl    $0x8,%eax
   29406:	mov    (%r12,%rcx,8),%rcx
   2940a:	movzbl (%r8),%edi
   2940e:	add    (%r10,%rdi,8),%rcx
   29412:	sar    $0x10,%rcx
   29416:	add    %edx,%ecx
   29418:	movslq %ecx,%rcx
   2941b:	movzbl 0x0(%r13,%rcx,1),%ecx
   29421:	and    $0xfc,%cx
   29426:	lea    (%rax,%rcx,8),%ecx
   29429:	add    (%r11,%rdi,4),%edx
   2942d:	movslq %edx,%rax
   29430:	movzbl 0x0(%r13,%rax,1),%eax
   29436:	shr    $0x3,%eax
   29439:	add    %ecx,%eax
   2943b:	mov    %ax,(%rsi)
   2943e:	mov    -0x18(%rbp),%r13
   29442:	mov    -0x10(%rbp),%r12
   29446:	mov    -0x8(%rbp),%rbx
   2944a:	mov    -0x20(%rbp),%r14
   2944e:	mov    -0x28(%rbp),%r15
   29452:	leaveq 
   29453:	retq   
   29454:	data16 nopw %cs:0x0(%rax,%rax,1)
   2945f:	nop

0000000000029460 <h2v1_merged_upsample_565D_le>:
   29460:	push   %rbp
   29461:	mov    %rsp,%rbp
   29464:	sub    $0x60,%rsp
   29468:	mov    %r15,-0x28(%rbp)
   2946c:	mov    %r14,-0x20(%rbp)
   29470:	mov    %r13,-0x18(%rbp)
   29474:	mov    %r12,-0x10(%rbp)
   29478:	mov    %rdi,-0x30(%rbp)
   2947c:	mov    %rbx,-0x8(%rbp)
   29480:	mov    0x1a8(%rdi),%r14
   29487:	mov    0x260(%rdi),%rax
   2948e:	mov    0x20(%rax),%r9
   29492:	mov    %r9,-0x38(%rbp)
   29496:	mov    0x30(%rax),%rbx
   2949a:	mov    %rbx,-0x40(%rbp)
   2949e:	mov    0x38(%rax),%r8
   294a2:	mov    %r8,-0x50(%rbp)
   294a6:	mov    0x28(%rax),%r13
   294aa:	lea    0x30bdf(%rip),%r10        # 5a090 <dither_matrix>
   294b1:	mov    0xa8(%rdi),%eax
   294b7:	and    $0x3,%eax
   294ba:	mov    %eax,%eax
   294bc:	mov    (%r10,%rax,8),%rax
   294c0:	mov    (%rsi),%r10
   294c3:	mov    %edx,%edx
   294c5:	mov    (%r10,%rdx,8),%r12
   294c9:	mov    0x8(%rsi),%r10
   294cd:	mov    (%r10,%rdx,8),%r10
   294d1:	mov    0x10(%rsi),%rsi
   294d5:	mov    (%rsi,%rdx,8),%rdx
   294d9:	mov    (%rcx),%r11
   294dc:	mov    0x88(%rdi),%esi
   294e2:	shr    %esi
   294e4:	jmpq   2961b <h2v1_merged_upsample_565D_le+0x1bb>
   294e9:	movzbl %al,%edi
   294ec:	lea    (%r14,%rdi,1),%rcx
   294f0:	movzbl (%rdx),%r15d
   294f4:	movslq (%r9,%r15,4),%r9
   294f8:	mov    %rsi,-0x58(%rbp)
   294fc:	movzbl (%r12),%esi
   29501:	mov    %rdx,-0x48(%rbp)
   29505:	lea    (%rsi,%r9,1),%edx
   29509:	movslq %edx,%rdx
   2950c:	movzbl (%rcx,%rdx,1),%ecx
   29510:	and    $0xf8,%ecx
   29516:	shl    $0x8,%ecx
   29519:	mov    (%rbx,%r15,8),%rdx
   2951d:	movzbl (%r10),%r15d
   29521:	add    (%r8,%r15,8),%rdx
   29525:	sar    $0x10,%rdx
   29529:	lea    (%rsi,%rdx,1),%ebx
   2952c:	movslq %ebx,%r8
   2952f:	mov    %rax,%rbx
   29532:	and    $0xfe,%rbx
   29539:	shr    %rbx
   2953c:	add    %r14,%rbx
   2953f:	movzbl (%rbx,%r8,1),%ebx
   29544:	and    $0xfc,%ebx
   2954a:	lea    (%rcx,%rbx,8),%r8d
   2954e:	movslq 0x0(%r13,%r15,4),%rbx
   29553:	lea    (%rsi,%rbx,1),%ecx
   29556:	movslq %ecx,%rcx
   29559:	add    %r14,%rcx
   2955c:	movzbl (%rcx,%rdi,1),%ecx
   29560:	shr    $0x3,%ecx
   29563:	lea    (%r8,%rcx,1),%r15d
   29567:	mov    $0xffffff00,%ecx
   2956c:	and    %rcx,%rax
   2956f:	shr    $0x8,%rax
   29573:	shl    $0x18,%rdi
   29577:	lea    (%rdi,%rax,1),%rsi
   2957b:	movzbl %sil,%edi
   2957f:	lea    (%r14,%rdi,1),%rcx
   29583:	movzbl 0x1(%r12),%r8d
   29589:	lea    (%r9,%r8,1),%eax
   2958d:	movslq %eax,%rax
   29590:	movzbl (%rcx,%rax,1),%eax
   29594:	and    $0xf8,%eax
   29599:	shl    $0x8,%eax
   2959c:	lea    (%rdx,%r8,1),%ecx
   295a0:	movslq %ecx,%rdx
   295a3:	mov    %rsi,%rcx
   295a6:	and    $0xfe,%rcx
   295ad:	shr    %rcx
   295b0:	add    %r14,%rcx
   295b3:	movzbl (%rcx,%rdx,1),%ecx
   295b7:	and    $0xfc,%ecx
   295bd:	lea    (%rax,%rcx,8),%ecx
   295c0:	lea    (%rbx,%r8,1),%eax
   295c4:	movslq %eax,%rax
   295c7:	add    %r14,%rax
   295ca:	movzbl (%rax,%rdi,1),%eax
   295ce:	shr    $0x3,%eax
   295d1:	add    %ecx,%eax
   295d3:	shl    $0x10,%eax
   295d6:	add    %r15d,%eax
   295d9:	mov    %ax,(%r11)
   295dd:	mov    %eax,%eax
   295df:	shr    $0x10,%rax
   295e3:	mov    %ax,0x2(%r11)
   295e8:	shr    $0x8,%rsi
   295ec:	shl    $0x18,%rdi
   295f0:	lea    (%rsi,%rdi,1),%rax
   295f4:	add    $0x2,%r12
   295f8:	mov    -0x48(%rbp),%rcx
   295fc:	lea    0x1(%rcx),%rdx
   29600:	add    $0x1,%r10
   29604:	add    $0x4,%r11
   29608:	mov    -0x58(%rbp),%rcx
   2960c:	lea    -0x1(%rcx),%esi
   2960f:	mov    -0x40(%rbp),%rbx
   29613:	mov    -0x50(%rbp),%r8
   29617:	mov    -0x38(%rbp),%r9
   2961b:	test   %esi,%esi
   2961d:	jne    294e9 <h2v1_merged_upsample_565D_le+0x89>
   29623:	mov    -0x30(%rbp),%rcx
   29627:	mov    0x88(%rcx),%ecx
   2962d:	and    $0x1,%ecx
   29630:	test   %ecx,%ecx
   29632:	jne    2964a <h2v1_merged_upsample_565D_le+0x1ea>
   29634:	mov    -0x8(%rbp),%rbx
   29638:	mov    -0x10(%rbp),%r12
   2963c:	mov    -0x18(%rbp),%r13
   29640:	mov    -0x20(%rbp),%r14
   29644:	mov    -0x28(%rbp),%r15
   29648:	leaveq 
   29649:	retq   
   2964a:	movzbl (%r12),%esi
   2964f:	movzbl (%rdx),%edx
   29652:	mov    %rsi,%rcx
   29655:	add    (%r9,%rdx,4),%ecx
   29659:	movslq %ecx,%rcx
   2965c:	movzbl %al,%r9d
   29660:	add    %r9,%rcx
   29663:	movzbl (%r14,%rcx,1),%ecx
   29668:	and    $0xf8,%cx
   2966d:	shl    $0x8,%ecx
   29670:	mov    (%rbx,%rdx,8),%rdx
   29674:	movzbl (%r10),%edi
   29678:	add    (%r8,%rdi,8),%rdx
   2967c:	sar    $0x10,%rdx
   29680:	add    %esi,%edx
   29682:	movslq %edx,%rdx
   29685:	and    $0xfe,%rax
   2968b:	shr    %rax
   2968e:	add    %rdx,%rax
   29691:	movzbl (%r14,%rax,1),%eax
   29696:	and    $0xfc,%ax
   2969a:	lea    (%rcx,%rax,8),%ecx
   2969d:	add    0x0(%r13,%rdi,4),%esi
   296a2:	movslq %esi,%rax
   296a5:	add    %r9,%rax
   296a8:	movzbl (%r14,%rax,1),%eax
   296ad:	shr    $0x3,%eax
   296b0:	add    %ecx,%eax
   296b2:	mov    %ax,(%r11)
   296b6:	mov    -0x8(%rbp),%rbx
   296ba:	mov    -0x10(%rbp),%r12
   296be:	mov    -0x18(%rbp),%r13
   296c2:	mov    -0x20(%rbp),%r14
   296c6:	mov    -0x28(%rbp),%r15
   296ca:	leaveq 
   296cb:	retq   
   296cc:	nopl   0x0(%rax)

00000000000296d0 <h2v2_merged_upsample_565_le>:
   296d0:	push   %rbp
   296d1:	mov    %rsp,%rbp
   296d4:	sub    $0x60,%rsp
   296d8:	mov    %r15,-0x28(%rbp)
   296dc:	mov    %r14,-0x20(%rbp)
   296e0:	mov    %r13,-0x18(%rbp)
   296e4:	mov    %r12,-0x10(%rbp)
   296e8:	mov    %rdi,-0x30(%rbp)
   296ec:	mov    %rbx,-0x8(%rbp)
   296f0:	mov    0x1a8(%rdi),%r15
   296f7:	mov    0x260(%rdi),%rbx
   296fe:	mov    0x20(%rbx),%rax
   29702:	mov    %rax,-0x38(%rbp)
   29706:	mov    0x30(%rbx),%r12
   2970a:	mov    %r12,-0x40(%rbp)
   2970e:	mov    0x38(%rbx),%r11
   29712:	mov    %r11,-0x48(%rbp)
   29716:	mov    0x28(%rbx),%r8
   2971a:	mov    %r8,-0x50(%rbp)
   2971e:	mov    (%rsi),%r10
   29721:	lea    (%rdx,%rdx,1),%r9d
   29725:	lea    0x1(%r9),%ebx
   29729:	mov    %ebx,%ebx
   2972b:	mov    (%r10,%rbx,8),%r13
   2972f:	mov    %r9d,%ebx
   29732:	mov    (%r10,%rbx,8),%r14
   29736:	mov    0x8(%rsi),%rbx
   2973a:	mov    %edx,%r9d
   2973d:	mov    (%rbx,%r9,8),%rbx
   29741:	mov    0x10(%rsi),%rdx
   29745:	mov    (%rdx,%r9,8),%rsi
   29749:	mov    (%rcx),%r9
   2974c:	mov    0x8(%rcx),%r10
   29750:	mov    0x88(%rdi),%edx
   29756:	shr    %edx
   29758:	jmpq   298d2 <h2v2_merged_upsample_565_le+0x202>
   2975d:	movzbl (%rsi),%edi
   29760:	mov    (%r12,%rdi,8),%rcx
   29764:	movzbl (%rbx),%r12d
   29768:	add    (%r11,%r12,8),%rcx
   2976c:	sar    $0x10,%rcx
   29770:	movzbl (%r14),%r11d
   29774:	mov    %rdx,-0x58(%rbp)
   29778:	lea    (%r11,%rcx,1),%edx
   2977c:	movslq %edx,%rdx
   2977f:	movzbl (%rdx,%r15,1),%edx
   29784:	and    $0xfc,%edx
   2978a:	movslq (%rax,%rdi,4),%rdi
   2978e:	lea    (%r11,%rdi,1),%eax
   29792:	movslq %eax,%rax
   29795:	movzbl (%r15,%rax,1),%eax
   2979a:	and    $0xf8,%eax
   2979f:	shl    $0x8,%eax
   297a2:	lea    (%rax,%rdx,8),%edx
   297a5:	movslq (%r8,%r12,4),%r12
   297a9:	lea    (%r11,%r12,1),%eax
   297ad:	movslq %eax,%rax
   297b0:	movzbl (%r15,%rax,1),%eax
   297b5:	shr    $0x3,%eax
   297b8:	lea    (%rdx,%rax,1),%r11d
   297bc:	movzbl 0x1(%r14),%r8d
   297c1:	lea    (%rcx,%r8,1),%eax
   297c5:	movslq %eax,%rax
   297c8:	movzbl (%r15,%rax,1),%edx
   297cd:	and    $0xfc,%edx
   297d3:	lea    (%rdi,%r8,1),%eax
   297d7:	movslq %eax,%rax
   297da:	movzbl (%r15,%rax,1),%eax
   297df:	and    $0xf8,%eax
   297e4:	shl    $0x8,%eax
   297e7:	lea    (%rax,%rdx,8),%edx
   297ea:	lea    (%r12,%r8,1),%eax
   297ee:	movslq %eax,%rax
   297f1:	movzbl (%r15,%rax,1),%eax
   297f6:	shr    $0x3,%eax
   297f9:	add    %edx,%eax
   297fb:	shl    $0x10,%eax
   297fe:	add    %r11d,%eax
   29801:	mov    %ax,(%r9)
   29805:	mov    %eax,%eax
   29807:	shr    $0x10,%rax
   2980b:	mov    %ax,0x2(%r9)
   29810:	movzbl 0x0(%r13),%r8d
   29815:	lea    (%r8,%rcx,1),%eax
   29819:	movslq %eax,%rax
   2981c:	movzbl (%rax,%r15,1),%edx
   29821:	and    $0xfc,%edx
   29827:	lea    (%r8,%rdi,1),%eax
   2982b:	movslq %eax,%rax
   2982e:	movzbl (%r15,%rax,1),%eax
   29833:	and    $0xf8,%eax
   29838:	shl    $0x8,%eax
   2983b:	lea    (%rax,%rdx,8),%edx
   2983e:	lea    (%r8,%r12,1),%eax
   29842:	movslq %eax,%rax
   29845:	movzbl (%r15,%rax,1),%eax
   2984a:	shr    $0x3,%eax
   2984d:	lea    (%rdx,%rax,1),%r8d
   29851:	movzbl 0x1(%r13),%edx
   29856:	lea    (%rcx,%rdx,1),%eax
   29859:	movslq %eax,%rax
   2985c:	movzbl (%r15,%rax,1),%ecx
   29861:	and    $0xfc,%ecx
   29867:	lea    (%rdi,%rdx,1),%eax
   2986a:	movslq %eax,%rax
   2986d:	movzbl (%r15,%rax,1),%eax
   29872:	and    $0xf8,%eax
   29877:	shl    $0x8,%eax
   2987a:	lea    (%rax,%rcx,8),%ecx
   2987d:	lea    (%r12,%rdx,1),%eax
   29881:	movslq %eax,%rax
   29884:	movzbl (%r15,%rax,1),%eax
   29889:	shr    $0x3,%eax
   2988c:	add    %ecx,%eax
   2988e:	shl    $0x10,%eax
   29891:	add    %r8d,%eax
   29894:	mov    %ax,(%r10)
   29898:	mov    %eax,%eax
   2989a:	shr    $0x10,%rax
   2989e:	mov    %ax,0x2(%r10)
   298a3:	add    $0x2,%r13
   298a7:	add    $0x2,%r14
   298ab:	add    $0x1,%rsi
   298af:	add    $0x1,%rbx
   298b3:	add    $0x4,%r9
   298b7:	add    $0x4,%r10
   298bb:	mov    -0x58(%rbp),%rax
   298bf:	lea    -0x1(%rax),%edx
   298c2:	mov    -0x50(%rbp),%r8
   298c6:	mov    -0x38(%rbp),%rax
   298ca:	mov    -0x48(%rbp),%r11
   298ce:	mov    -0x40(%rbp),%r12
   298d2:	test   %edx,%edx
   298d4:	jne    2975d <h2v2_merged_upsample_565_le+0x8d>
   298da:	mov    -0x30(%rbp),%rcx
   298de:	mov    0x88(%rcx),%ecx
   298e4:	and    $0x1,%ecx
   298e7:	test   %ecx,%ecx
   298e9:	jne    29901 <h2v2_merged_upsample_565_le+0x231>
   298eb:	mov    -0x8(%rbp),%rbx
   298ef:	mov    -0x10(%rbp),%r12
   298f3:	mov    -0x18(%rbp),%r13
   298f7:	mov    -0x20(%rbp),%r14
   298fb:	mov    -0x28(%rbp),%r15
   298ff:	leaveq 
   29900:	retq   
   29901:	movzbl (%rsi),%edi
   29904:	mov    (%r12,%rdi,8),%rcx
   29908:	movzbl (%rbx),%esi
   2990b:	add    (%r11,%rsi,8),%rcx
   2990f:	sar    $0x10,%rcx
   29913:	movzbl (%r14),%ebx
   29917:	lea    (%rbx,%rcx,1),%edx
   2991a:	movslq %edx,%rdx
   2991d:	movzbl (%r15,%rdx,1),%edx
   29922:	and    $0xfc,%dx
   29927:	movslq (%rax,%rdi,4),%rdi
   2992b:	lea    (%rbx,%rdi,1),%eax
   2992e:	movslq %eax,%rax
   29931:	movzbl (%r15,%rax,1),%eax
   29936:	and    $0xf8,%ax
   2993a:	shl    $0x8,%eax
   2993d:	lea    (%rax,%rdx,8),%edx
   29940:	movslq (%r8,%rsi,4),%rsi
   29944:	lea    (%rbx,%rsi,1),%eax
   29947:	movslq %eax,%rax
   2994a:	movzbl (%r15,%rax,1),%eax
   2994f:	shr    $0x3,%eax
   29952:	add    %edx,%eax
   29954:	mov    %ax,(%r9)
   29958:	movzbl 0x0(%r13),%edx
   2995d:	lea    (%rdx,%rcx,1),%eax
   29960:	movslq %eax,%rax
   29963:	movzbl (%r15,%rax,1),%ecx
   29968:	and    $0xfc,%cx
   2996d:	lea    (%rdx,%rdi,1),%eax
   29970:	movslq %eax,%rax
   29973:	movzbl (%r15,%rax,1),%eax
   29978:	and    $0xf8,%ax
   2997c:	shl    $0x8,%eax
   2997f:	lea    (%rax,%rcx,8),%ecx
   29982:	lea    (%rdx,%rsi,1),%eax
   29985:	movslq %eax,%rax
   29988:	movzbl (%r15,%rax,1),%eax
   2998d:	shr    $0x3,%eax
   29990:	add    %ecx,%eax
   29992:	mov    %ax,(%r10)
   29996:	mov    -0x8(%rbp),%rbx
   2999a:	mov    -0x10(%rbp),%r12
   2999e:	mov    -0x18(%rbp),%r13
   299a2:	mov    -0x20(%rbp),%r14
   299a6:	mov    -0x28(%rbp),%r15
   299aa:	leaveq 
   299ab:	retq   
   299ac:	nopl   0x0(%rax)

00000000000299b0 <h2v2_merged_upsample_565D_le>:
   299b0:	push   %rbp
   299b1:	mov    %rsp,%rbp
   299b4:	sub    $0x80,%rsp
   299bb:	mov    %r15,-0x28(%rbp)
   299bf:	mov    %r14,-0x20(%rbp)
   299c3:	mov    %r13,-0x18(%rbp)
   299c7:	mov    %r12,-0x10(%rbp)
   299cb:	mov    %rbx,-0x8(%rbp)
   299cf:	mov    %rdi,-0x30(%rbp)
   299d3:	mov    0x1a8(%rdi),%r15
   299da:	mov    0x260(%rdi),%rax
   299e1:	mov    0x20(%rax),%r13
   299e5:	mov    %r13,-0x50(%rbp)
   299e9:	mov    0x30(%rax),%r12
   299ed:	mov    %r12,-0x58(%rbp)
   299f1:	mov    0x38(%rax),%r9
   299f5:	mov    %r9,-0x68(%rbp)
   299f9:	mov    0x28(%rax),%rax
   299fd:	mov    %rax,-0x70(%rbp)
   29a01:	lea    0x30688(%rip),%r8        # 5a090 <dither_matrix>
   29a08:	mov    0xa8(%rdi),%ebx
   29a0e:	lea    0x1(%rbx),%eax
   29a11:	and    $0x3,%eax
   29a14:	mov    %eax,%eax
   29a16:	mov    (%r8,%rax,8),%rax
   29a1a:	mov    (%rsi),%r11
   29a1d:	lea    (%rdx,%rdx,1),%r10d
   29a21:	lea    0x1(%r10),%r8d
   29a25:	mov    %r8d,%r8d
   29a28:	mov    (%r11,%r8,8),%r8
   29a2c:	and    $0x3,%ebx
   29a2f:	mov    %ebx,%ebx
   29a31:	lea    0x30658(%rip),%r14        # 5a090 <dither_matrix>
   29a38:	mov    (%r14,%rbx,8),%rbx
   29a3c:	mov    %r10d,%r10d
   29a3f:	mov    (%r11,%r10,8),%r10
   29a43:	mov    0x8(%rsi),%r11
   29a47:	mov    %edx,%r14d
   29a4a:	mov    (%r11,%r14,8),%r11
   29a4e:	mov    0x10(%rsi),%rdx
   29a52:	mov    (%rdx,%r14,8),%rdx
   29a56:	mov    (%rcx),%rsi
   29a59:	mov    0x8(%rcx),%rcx
   29a5d:	mov    %rcx,-0x38(%rbp)
   29a61:	mov    0x88(%rdi),%ecx
   29a67:	shr    %ecx
   29a69:	mov    -0x70(%rbp),%rdi
   29a6d:	jmpq   29cbf <h2v2_merged_upsample_565D_le+0x30f>
   29a72:	mov    %rcx,-0x80(%rbp)
   29a76:	movzbl %bl,%r14d
   29a7a:	lea    (%r15,%r14,1),%rcx
   29a7e:	mov    %rdx,-0x60(%rbp)
   29a82:	movzbl (%rdx),%edx
   29a85:	movslq 0x0(%r13,%rdx,4),%r13
   29a8a:	mov    %r8,-0x40(%rbp)
   29a8e:	movzbl (%r10),%r8d
   29a92:	mov    %rsi,-0x48(%rbp)
   29a96:	lea    (%r8,%r13,1),%esi
   29a9a:	movslq %esi,%rsi
   29a9d:	movzbl (%rcx,%rsi,1),%ecx
   29aa1:	and    $0xf8,%ecx
   29aa7:	shl    $0x8,%ecx
   29aaa:	mov    (%r12,%rdx,8),%rdx
   29aae:	movzbl (%r11),%r12d
   29ab2:	add    (%r9,%r12,8),%rdx
   29ab6:	sar    $0x10,%rdx
   29aba:	lea    (%r8,%rdx,1),%esi
   29abe:	movslq %esi,%r9
   29ac1:	mov    %rbx,%rsi
   29ac4:	and    $0xfe,%rsi
   29acb:	shr    %rsi
   29ace:	add    %r15,%rsi
   29ad1:	movzbl (%rsi,%r9,1),%esi
   29ad6:	and    $0xfc,%esi
   29adc:	lea    (%rcx,%rsi,8),%esi
   29adf:	movslq (%rdi,%r12,4),%r12
   29ae3:	lea    (%r8,%r12,1),%ecx
   29ae7:	movslq %ecx,%rcx
   29aea:	add    %r15,%rcx
   29aed:	movzbl (%rcx,%r14,1),%ecx
   29af2:	shr    $0x3,%ecx
   29af5:	lea    (%rsi,%rcx,1),%edi
   29af8:	movzbl %al,%r8d
   29afc:	lea    (%r15,%r8,1),%rsi
   29b00:	movzbl 0x1(%r10),%r9d
   29b05:	lea    0x0(%r13,%r9,1),%ecx
   29b0a:	movslq %ecx,%rcx
   29b0d:	movzbl (%rsi,%rcx,1),%ecx
   29b11:	and    $0xf8,%ecx
   29b17:	shl    $0x8,%ecx
   29b1a:	lea    (%rdx,%r9,1),%esi
   29b1e:	movslq %esi,%rsi
   29b21:	mov    %r11,-0x78(%rbp)
   29b25:	mov    %rax,%r11
   29b28:	and    $0xfe,%r11
   29b2f:	shr    %r11
   29b32:	add    %r15,%r11
   29b35:	movzbl (%r11,%rsi,1),%esi
   29b3a:	and    $0xfc,%esi
   29b40:	lea    (%rcx,%rsi,8),%esi
   29b43:	lea    (%r12,%r9,1),%ecx
   29b47:	movslq %ecx,%rcx
   29b4a:	add    %r15,%rcx
   29b4d:	movzbl (%rcx,%r8,1),%ecx
   29b52:	shr    $0x3,%ecx
   29b55:	add    %esi,%ecx
   29b57:	shl    $0x10,%ecx
   29b5a:	add    %edi,%ecx
   29b5c:	mov    -0x48(%rbp),%rsi
   29b60:	mov    %cx,(%rsi)
   29b63:	mov    %ecx,%ecx
   29b65:	shr    $0x10,%rcx
   29b69:	mov    %cx,0x2(%rsi)
   29b6d:	mov    $0xffffff00,%ecx
   29b72:	and    %rcx,%rbx
   29b75:	shr    $0x8,%rbx
   29b79:	shl    $0x18,%r14
   29b7d:	lea    (%r14,%rbx,1),%rsi
   29b81:	movzbl %sil,%edi
   29b85:	lea    (%r15,%rdi,1),%rcx
   29b89:	mov    -0x40(%rbp),%r9
   29b8d:	movzbl (%r9),%r11d
   29b91:	lea    (%r11,%r13,1),%ebx
   29b95:	movslq %ebx,%rbx
   29b98:	movzbl (%rcx,%rbx,1),%ecx
   29b9c:	and    $0xf8,%ecx
   29ba2:	shl    $0x8,%ecx
   29ba5:	lea    (%r11,%rdx,1),%ebx
   29ba9:	movslq %ebx,%r14
   29bac:	mov    %rsi,%rbx
   29baf:	and    $0xfe,%rbx
   29bb6:	shr    %rbx
   29bb9:	add    %r15,%rbx
   29bbc:	movzbl (%rbx,%r14,1),%ebx
   29bc1:	and    $0xfc,%ebx
   29bc7:	lea    (%rcx,%rbx,8),%ebx
   29bca:	lea    (%r11,%r12,1),%ecx
   29bce:	movslq %ecx,%rcx
   29bd1:	add    %r15,%rcx
   29bd4:	movzbl (%rcx,%rdi,1),%ecx
   29bd8:	shr    $0x3,%ecx
   29bdb:	lea    (%rbx,%rcx,1),%r11d
   29bdf:	mov    $0xffffff00,%ecx
   29be4:	and    %rcx,%rax
   29be7:	shr    $0x8,%rax
   29beb:	shl    $0x18,%r8
   29bef:	lea    (%r8,%rax,1),%rbx
   29bf3:	movzbl %bl,%r8d
   29bf7:	lea    (%r15,%r8,1),%rcx
   29bfb:	movzbl 0x1(%r9),%r14d
   29c00:	lea    0x0(%r13,%r14,1),%eax
   29c05:	movslq %eax,%rax
   29c08:	movzbl (%rcx,%rax,1),%eax
   29c0c:	and    $0xf8,%eax
   29c11:	shl    $0x8,%eax
   29c14:	lea    (%rdx,%r14,1),%ecx
   29c18:	movslq %ecx,%rdx
   29c1b:	mov    %rbx,%rcx
   29c1e:	and    $0xfe,%rcx
   29c25:	shr    %rcx
   29c28:	add    %r15,%rcx
   29c2b:	movzbl (%rcx,%rdx,1),%ecx
   29c2f:	and    $0xfc,%ecx
   29c35:	lea    (%rax,%rcx,8),%ecx
   29c38:	lea    (%r12,%r14,1),%eax
   29c3c:	movslq %eax,%rax
   29c3f:	add    %r15,%rax
   29c42:	movzbl (%rax,%r8,1),%eax
   29c47:	shr    $0x3,%eax
   29c4a:	add    %ecx,%eax
   29c4c:	shl    $0x10,%eax
   29c4f:	add    %r11d,%eax
   29c52:	mov    -0x38(%rbp),%r12
   29c56:	mov    %ax,(%r12)
   29c5b:	mov    %eax,%eax
   29c5d:	shr    $0x10,%rax
   29c61:	mov    %ax,0x2(%r12)
   29c67:	shr    $0x8,%rbx
   29c6b:	shl    $0x18,%r8
   29c6f:	lea    (%rbx,%r8,1),%rax
   29c73:	lea    0x2(%r9),%r8
   29c77:	shr    $0x8,%rsi
   29c7b:	shl    $0x18,%rdi
   29c7f:	lea    (%rsi,%rdi,1),%rbx
   29c83:	add    $0x2,%r10
   29c87:	mov    -0x60(%rbp),%rcx
   29c8b:	lea    0x1(%rcx),%rdx
   29c8f:	mov    -0x78(%rbp),%rcx
   29c93:	lea    0x1(%rcx),%r11
   29c97:	mov    -0x48(%rbp),%rcx
   29c9b:	lea    0x4(%rcx),%rsi
   29c9f:	lea    0x4(%r12),%rcx
   29ca4:	mov    %rcx,-0x38(%rbp)
   29ca8:	mov    -0x80(%rbp),%rcx
   29cac:	add    $0xffffffff,%ecx
   29caf:	mov    -0x58(%rbp),%r12
   29cb3:	mov    -0x68(%rbp),%r9
   29cb7:	mov    -0x50(%rbp),%r13
   29cbb:	mov    -0x70(%rbp),%rdi
   29cbf:	test   %ecx,%ecx
   29cc1:	jne    29a72 <h2v2_merged_upsample_565D_le+0xc2>
   29cc7:	mov    -0x30(%rbp),%rcx
   29ccb:	mov    0x88(%rcx),%ecx
   29cd1:	and    $0x1,%ecx
   29cd4:	test   %ecx,%ecx
   29cd6:	jne    29cee <h2v2_merged_upsample_565D_le+0x33e>
   29cd8:	mov    -0x8(%rbp),%rbx
   29cdc:	mov    -0x10(%rbp),%r12
   29ce0:	mov    -0x18(%rbp),%r13
   29ce4:	mov    -0x20(%rbp),%r14
   29ce8:	mov    -0x28(%rbp),%r15
   29cec:	leaveq 
   29ced:	retq   
   29cee:	movzbl (%rdx),%r14d
   29cf2:	mov    (%r12,%r14,8),%rdx
   29cf6:	movzbl (%r11),%r11d
   29cfa:	add    (%r9,%r11,8),%rdx
   29cfe:	sar    $0x10,%rdx
   29d02:	movzbl (%r10),%r12d
   29d06:	lea    (%r12,%rdx,1),%ecx
   29d0a:	movslq %ecx,%r9
   29d0d:	mov    %rbx,%rcx
   29d10:	and    $0xfe,%rcx
   29d17:	shr    %rcx
   29d1a:	add    %r9,%rcx
   29d1d:	movzbl (%r15,%rcx,1),%r9d
   29d22:	and    $0xfc,%r9w
   29d28:	movslq 0x0(%r13,%r14,4),%r10
   29d2d:	lea    (%r12,%r10,1),%ecx
   29d31:	movslq %ecx,%rcx
   29d34:	movzbl %bl,%r13d
   29d38:	add    %r13,%rcx
   29d3b:	movzbl (%r15,%rcx,1),%ecx
   29d40:	and    $0xf8,%cx
   29d45:	shl    $0x8,%ecx
   29d48:	lea    (%rcx,%r9,8),%ebx
   29d4c:	movslq (%rdi,%r11,4),%rdi
   29d50:	lea    (%r12,%rdi,1),%ecx
   29d54:	movslq %ecx,%rcx
   29d57:	add    %r13,%rcx
   29d5a:	movzbl (%r15,%rcx,1),%ecx
   29d5f:	shr    $0x3,%ecx
   29d62:	add    %ebx,%ecx
   29d64:	mov    %cx,(%rsi)
   29d67:	movzbl (%r8),%esi
   29d6b:	lea    (%rsi,%rdx,1),%ecx
   29d6e:	movslq %ecx,%rdx
   29d71:	mov    %rax,%rcx
   29d74:	and    $0xfe,%rcx
   29d7b:	shr    %rcx
   29d7e:	add    %rdx,%rcx
   29d81:	movzbl (%r15,%rcx,1),%ecx
   29d86:	and    $0xfc,%cx
   29d8b:	lea    (%rsi,%r10,1),%edx
   29d8f:	movslq %edx,%rdx
   29d92:	movzbl %al,%ebx
   29d95:	lea    (%rbx,%rdx,1),%rax
   29d99:	movzbl (%r15,%rax,1),%eax
   29d9e:	and    $0xf8,%ax
   29da2:	shl    $0x8,%eax
   29da5:	lea    (%rax,%rcx,8),%ecx
   29da8:	lea    (%rsi,%rdi,1),%eax
   29dab:	movslq %eax,%rax
   29dae:	add    %rbx,%rax
   29db1:	movzbl (%r15,%rax,1),%eax
   29db6:	shr    $0x3,%eax
   29db9:	add    %ecx,%eax
   29dbb:	mov    -0x38(%rbp),%rcx
   29dbf:	mov    %ax,(%rcx)
   29dc2:	mov    -0x8(%rbp),%rbx
   29dc6:	mov    -0x10(%rbp),%r12
   29dca:	mov    -0x18(%rbp),%r13
   29dce:	mov    -0x20(%rbp),%r14
   29dd2:	mov    -0x28(%rbp),%r15
   29dd6:	leaveq 
   29dd7:	retq   
   29dd8:	nopl   0x0(%rax,%rax,1)

0000000000029de0 <h2v1_merged_upsample_565_be>:
   29de0:	push   %rbp
   29de1:	mov    %rsp,%rbp
   29de4:	sub    $0x50,%rsp
   29de8:	mov    %r15,-0x28(%rbp)
   29dec:	mov    %r14,-0x20(%rbp)
   29df0:	mov    %rdi,-0x30(%rbp)
   29df4:	mov    %rbx,-0x8(%rbp)
   29df8:	mov    %r12,-0x10(%rbp)
   29dfc:	mov    %r13,-0x18(%rbp)
   29e00:	mov    0x1a8(%rdi),%r13
   29e07:	mov    0x260(%rdi),%r8
   29e0e:	mov    0x30(%r8),%rax
   29e12:	mov    %rax,-0x40(%rbp)
   29e16:	mov    0x38(%r8),%rbx
   29e1a:	mov    %rbx,-0x48(%rbp)
   29e1e:	mov    0x20(%r8),%r11
   29e22:	mov    %r11,-0x38(%rbp)
   29e26:	mov    0x28(%r8),%r12
   29e2a:	mov    (%rsi),%r8
   29e2d:	mov    %edx,%r10d
   29e30:	mov    (%r8,%r10,8),%r8
   29e34:	mov    0x8(%rsi),%rdx
   29e38:	mov    (%rdx,%r10,8),%r9
   29e3c:	mov    0x10(%rsi),%rdx
   29e40:	mov    (%rdx,%r10,8),%r10
   29e44:	mov    (%rcx),%rsi
   29e47:	mov    0x88(%rdi),%edx
   29e4d:	shr    %edx
   29e4f:	jmpq   29f3b <h2v1_merged_upsample_565_be+0x15b>
   29e54:	movzbl (%r10),%edi
   29e58:	mov    (%rax,%rdi,8),%rax
   29e5c:	movzbl (%r9),%r14d
   29e60:	add    (%rbx,%r14,8),%rax
   29e64:	sar    $0x10,%rax
   29e68:	movzbl 0x1(%r8),%ebx
   29e6d:	lea    (%rbx,%rax,1),%ecx
   29e70:	movslq %ecx,%rcx
   29e73:	movzbl (%rcx,%r13,1),%ecx
   29e78:	mov    %rcx,%r15
   29e7b:	shr    $0x5,%r15d
   29e7f:	movslq (%r11,%rdi,4),%r11
   29e83:	lea    (%rbx,%r11,1),%edi
   29e87:	movslq %edi,%rdi
   29e8a:	movzbl 0x0(%r13,%rdi,1),%edi
   29e90:	and    $0xf8,%edi
   29e96:	add    %r15d,%edi
   29e99:	and    $0x1c,%ecx
   29e9c:	shl    $0xb,%ecx
   29e9f:	add    %ecx,%edi
   29ea1:	movslq (%r12,%r14,4),%r15
   29ea5:	lea    (%rbx,%r15,1),%ecx
   29ea9:	movslq %ecx,%rcx
   29eac:	movzbl 0x0(%r13,%rcx,1),%ecx
   29eb2:	and    $0xf8,%ecx
   29eb8:	shl    $0x5,%ecx
   29ebb:	add    %edi,%ecx
   29ebd:	mov    %ecx,%edi
   29ebf:	movzbl (%r8),%r14d
   29ec3:	add    %r14d,%eax
   29ec6:	movslq %eax,%rax
   29ec9:	movzbl 0x0(%r13,%rax,1),%eax
   29ecf:	mov    %rax,%rbx
   29ed2:	shr    $0x5,%ebx
   29ed5:	lea    (%r14,%r11,1),%ecx
   29ed9:	movslq %ecx,%rcx
   29edc:	movzbl 0x0(%r13,%rcx,1),%ecx
   29ee2:	and    $0xf8,%ecx
   29ee8:	add    %ebx,%ecx
   29eea:	and    $0x1c,%eax
   29eed:	shl    $0xb,%eax
   29ef0:	add    %eax,%ecx
   29ef2:	lea    (%r14,%r15,1),%eax
   29ef6:	movslq %eax,%rax
   29ef9:	movzbl (%rax,%r13,1),%eax
   29efe:	and    $0xf8,%eax
   29f03:	shl    $0x5,%eax
   29f06:	add    %ecx,%eax
   29f08:	mov    %eax,%eax
   29f0a:	shl    $0x10,%rax
   29f0e:	add    %rdi,%rax
   29f11:	mov    %ax,0x2(%rsi)
   29f15:	shr    $0x10,%rax
   29f19:	mov    %ax,(%rsi)
   29f1c:	add    $0x2,%r8
   29f20:	add    $0x1,%r10
   29f24:	add    $0x1,%r9
   29f28:	add    $0x4,%rsi
   29f2c:	add    $0xffffffff,%edx
   29f2f:	mov    -0x38(%rbp),%r11
   29f33:	mov    -0x40(%rbp),%rax
   29f37:	mov    -0x48(%rbp),%rbx
   29f3b:	test   %edx,%edx
   29f3d:	jne    29e54 <h2v1_merged_upsample_565_be+0x74>
   29f43:	mov    -0x30(%rbp),%rcx
   29f47:	mov    0x88(%rcx),%ecx
   29f4d:	and    $0x1,%ecx
   29f50:	test   %ecx,%ecx
   29f52:	jne    29f6a <h2v1_merged_upsample_565_be+0x18a>
   29f54:	mov    -0x18(%rbp),%r13
   29f58:	mov    -0x10(%rbp),%r12
   29f5c:	mov    -0x8(%rbp),%rbx
   29f60:	mov    -0x20(%rbp),%r14
   29f64:	mov    -0x28(%rbp),%r15
   29f68:	leaveq 
   29f69:	retq   
   29f6a:	movzbl (%r10),%ecx
   29f6e:	mov    (%rax,%rcx,8),%rax
   29f72:	movzbl (%r9),%r9d
   29f76:	add    (%rbx,%r9,8),%rax
   29f7a:	sar    $0x10,%rax
   29f7e:	movzbl (%r8),%edx
   29f82:	add    %edx,%eax
   29f84:	movslq %eax,%rax
   29f87:	movzbl 0x0(%r13,%rax,1),%eax
   29f8d:	mov    %rax,%rdi
   29f90:	shr    $0x5,%edi
   29f93:	mov    (%r11,%rcx,4),%ecx
   29f97:	add    %edx,%ecx
   29f99:	movslq %ecx,%rcx
   29f9c:	movzbl 0x0(%r13,%rcx,1),%ecx
   29fa2:	and    $0xf8,%ecx
   29fa8:	add    %edi,%ecx
   29faa:	and    $0x1c,%eax
   29fad:	shl    $0xb,%eax
   29fb0:	add    %eax,%ecx
   29fb2:	add    (%r12,%r9,4),%edx
   29fb6:	movslq %edx,%rax
   29fb9:	movzbl 0x0(%r13,%rax,1),%eax
   29fbf:	and    $0xf8,%ax
   29fc3:	shl    $0x5,%eax
   29fc6:	add    %ecx,%eax
   29fc8:	mov    %ax,(%rsi)
   29fcb:	mov    -0x18(%rbp),%r13
   29fcf:	mov    -0x10(%rbp),%r12
   29fd3:	mov    -0x8(%rbp),%rbx
   29fd7:	mov    -0x20(%rbp),%r14
   29fdb:	mov    -0x28(%rbp),%r15
   29fdf:	leaveq 
   29fe0:	retq   
   29fe1:	data16 nopw %cs:0x0(%rax,%rax,1)
   29fec:	nopl   0x0(%rax)

0000000000029ff0 <h2v1_merged_upsample_565D_be>:
   29ff0:	push   %rbp
   29ff1:	mov    %rsp,%rbp
   29ff4:	sub    $0x70,%rsp
   29ff8:	mov    %r15,-0x28(%rbp)
   29ffc:	mov    %r14,-0x20(%rbp)
   2a000:	mov    %r13,-0x18(%rbp)
   2a004:	mov    %r12,-0x10(%rbp)
   2a008:	mov    %rdi,-0x30(%rbp)
   2a00c:	mov    %rbx,-0x8(%rbp)
   2a010:	mov    0x1a8(%rdi),%r15
   2a017:	mov    0x260(%rdi),%rax
   2a01e:	mov    0x30(%rax),%r13
   2a022:	mov    %r13,-0x48(%rbp)
   2a026:	mov    0x38(%rax),%r12
   2a02a:	mov    %r12,-0x58(%rbp)
   2a02e:	mov    0x20(%rax),%r8
   2a032:	mov    %r8,-0x40(%rbp)
   2a036:	mov    0x28(%rax),%r14
   2a03a:	mov    (%rsi),%rax
   2a03d:	mov    %edx,%r9d
   2a040:	mov    (%rax,%r9,8),%rbx
   2a044:	lea    0x30045(%rip),%rdx        # 5a090 <dither_matrix>
   2a04b:	mov    0xa8(%rdi),%eax
   2a051:	and    $0x3,%eax
   2a054:	mov    %eax,%eax
   2a056:	mov    (%rdx,%rax,8),%rax
   2a05a:	mov    0x8(%rsi),%rdx
   2a05e:	mov    (%rdx,%r9,8),%r10
   2a062:	mov    0x10(%rsi),%rdx
   2a066:	mov    (%rdx,%r9,8),%r9
   2a06a:	mov    (%rcx),%r11
   2a06d:	mov    0x88(%rdi),%edx
   2a073:	shr    %edx
   2a075:	mov    $0xffffff00,%esi
   2a07a:	jmpq   2a1dd <h2v1_merged_upsample_565D_be+0x1ed>
   2a07f:	movzbl (%r9),%edi
   2a083:	mov    0x0(%r13,%rdi,8),%rcx
   2a088:	movzbl (%r10),%r13d
   2a08c:	add    (%r12,%r13,8),%rcx
   2a090:	sar    $0x10,%rcx
   2a094:	movzbl 0x1(%rbx),%r12d
   2a099:	mov    %rdx,-0x70(%rbp)
   2a09d:	lea    (%r12,%rcx,1),%edx
   2a0a1:	movslq %edx,%rdx
   2a0a4:	and    %rax,%rsi
   2a0a7:	shr    $0x8,%rsi
   2a0ab:	mov    %r10,-0x60(%rbp)
   2a0af:	movzbl %al,%r10d
   2a0b3:	mov    %r9,-0x50(%rbp)
   2a0b7:	mov    %r10,%r9
   2a0ba:	shl    $0x18,%r9
   2a0be:	add    %r9,%rsi
   2a0c1:	mov    %rsi,-0x68(%rbp)
   2a0c5:	mov    %rsi,%r9
   2a0c8:	and    $0xfe,%r9
   2a0cf:	shr    %r9
   2a0d2:	add    %r15,%r9
   2a0d5:	movzbl (%r9,%rdx,1),%edx
   2a0da:	mov    %rdx,%r9
   2a0dd:	shr    $0x5,%r9d
   2a0e1:	movzbl %sil,%esi
   2a0e5:	mov    %r11,-0x38(%rbp)
   2a0e9:	lea    (%r15,%rsi,1),%r11
   2a0ed:	movslq (%r8,%rdi,4),%r8
   2a0f1:	lea    (%r12,%r8,1),%edi
   2a0f5:	movslq %edi,%rdi
   2a0f8:	movzbl (%r11,%rdi,1),%edi
   2a0fd:	and    $0xf8,%edi
   2a103:	add    %r9d,%edi
   2a106:	and    $0x1c,%edx
   2a109:	shl    $0xb,%edx
   2a10c:	add    %edx,%edi
   2a10e:	movslq (%r14,%r13,4),%r13
   2a112:	lea    (%r12,%r13,1),%edx
   2a116:	movslq %edx,%rdx
   2a119:	add    %r15,%rdx
   2a11c:	movzbl (%rdx,%rsi,1),%edx
   2a120:	and    $0xf8,%edx
   2a126:	shl    $0x5,%edx
   2a129:	add    %edi,%edx
   2a12b:	mov    %edx,%r9d
   2a12e:	movzbl (%rbx),%r11d
   2a132:	add    %r11d,%ecx
   2a135:	movslq %ecx,%rcx
   2a138:	and    $0xfe,%rax
   2a13e:	shr    %rax
   2a141:	add    %r15,%rax
   2a144:	movzbl (%rax,%rcx,1),%eax
   2a148:	mov    %rax,%rdi
   2a14b:	shr    $0x5,%edi
   2a14e:	lea    (%r15,%r10,1),%rcx
   2a152:	lea    (%r11,%r8,1),%edx
   2a156:	movslq %edx,%rdx
   2a159:	movzbl (%rcx,%rdx,1),%ecx
   2a15d:	and    $0xf8,%ecx
   2a163:	add    %edi,%ecx
   2a165:	and    $0x1c,%eax
   2a168:	shl    $0xb,%eax
   2a16b:	add    %eax,%ecx
   2a16d:	lea    (%r11,%r13,1),%eax
   2a171:	movslq %eax,%rax
   2a174:	add    %r15,%rax
   2a177:	movzbl (%rax,%r10,1),%eax
   2a17c:	and    $0xf8,%eax
   2a181:	shl    $0x5,%eax
   2a184:	add    %ecx,%eax
   2a186:	mov    %eax,%eax
   2a188:	shl    $0x10,%rax
   2a18c:	add    %r9,%rax
   2a18f:	mov    -0x38(%rbp),%rcx
   2a193:	mov    %ax,0x2(%rcx)
   2a197:	shr    $0x10,%rax
   2a19b:	mov    %ax,(%rcx)
   2a19e:	add    $0x2,%rbx
   2a1a2:	mov    -0x50(%rbp),%rax
   2a1a6:	lea    0x1(%rax),%r9
   2a1aa:	mov    -0x60(%rbp),%rax
   2a1ae:	lea    0x1(%rax),%r10
   2a1b2:	mov    -0x68(%rbp),%rax
   2a1b6:	shr    $0x8,%rax
   2a1ba:	shl    $0x18,%rsi
   2a1be:	add    %rsi,%rax
   2a1c1:	lea    0x4(%rcx),%r11
   2a1c5:	mov    -0x70(%rbp),%rcx
   2a1c9:	lea    -0x1(%rcx),%edx
   2a1cc:	mov    -0x40(%rbp),%r8
   2a1d0:	mov    $0xffffff00,%esi
   2a1d5:	mov    -0x58(%rbp),%r12
   2a1d9:	mov    -0x48(%rbp),%r13
   2a1dd:	test   %edx,%edx
   2a1df:	jne    2a07f <h2v1_merged_upsample_565D_be+0x8f>
   2a1e5:	mov    -0x30(%rbp),%rcx
   2a1e9:	mov    0x88(%rcx),%ecx
   2a1ef:	and    $0x1,%ecx
   2a1f2:	test   %ecx,%ecx
   2a1f4:	jne    2a20c <h2v1_merged_upsample_565D_be+0x21c>
   2a1f6:	mov    -0x8(%rbp),%rbx
   2a1fa:	mov    -0x10(%rbp),%r12
   2a1fe:	mov    -0x18(%rbp),%r13
   2a202:	mov    -0x20(%rbp),%r14
   2a206:	mov    -0x28(%rbp),%r15
   2a20a:	leaveq 
   2a20b:	retq   
   2a20c:	movzbl (%r9),%edi
   2a210:	mov    0x0(%r13,%rdi,8),%rcx
   2a215:	movzbl (%r10),%r9d
   2a219:	add    (%r12,%r9,8),%rcx
   2a21d:	sar    $0x10,%rcx
   2a221:	movzbl (%rbx),%edx
   2a224:	add    %edx,%ecx
   2a226:	movslq %ecx,%rsi
   2a229:	mov    %rax,%rcx
   2a22c:	and    $0xfe,%rcx
   2a233:	shr    %rcx
   2a236:	add    %rsi,%rcx
   2a239:	movzbl (%r15,%rcx,1),%ecx
   2a23e:	mov    %rcx,%rbx
   2a241:	shr    $0x5,%ebx
   2a244:	mov    %rdx,%rsi
   2a247:	add    (%r8,%rdi,4),%esi
   2a24b:	movslq %esi,%rsi
   2a24e:	movzbl %al,%edi
   2a251:	lea    (%rdi,%rsi,1),%rax
   2a255:	movzbl (%r15,%rax,1),%eax
   2a25a:	and    $0xf8,%eax
   2a25f:	add    %ebx,%eax
   2a261:	and    $0x1c,%ecx
   2a264:	shl    $0xb,%ecx
   2a267:	add    %eax,%ecx
   2a269:	add    (%r14,%r9,4),%edx
   2a26d:	movslq %edx,%rax
   2a270:	add    %rdi,%rax
   2a273:	movzbl (%r15,%rax,1),%eax
   2a278:	and    $0xf8,%ax
   2a27c:	shl    $0x5,%eax
   2a27f:	add    %ecx,%eax
   2a281:	mov    %ax,(%r11)
   2a285:	mov    -0x8(%rbp),%rbx
   2a289:	mov    -0x10(%rbp),%r12
   2a28d:	mov    -0x18(%rbp),%r13
   2a291:	mov    -0x20(%rbp),%r14
   2a295:	mov    -0x28(%rbp),%r15
   2a299:	leaveq 
   2a29a:	retq   
   2a29b:	nopl   0x0(%rax,%rax,1)

000000000002a2a0 <h2v2_merged_upsample_565_be>:
   2a2a0:	push   %rbp
   2a2a1:	mov    %rsp,%rbp
   2a2a4:	sub    $0x60,%rsp
   2a2a8:	mov    %r15,-0x28(%rbp)
   2a2ac:	mov    %r14,-0x20(%rbp)
   2a2b0:	mov    %r13,-0x18(%rbp)
   2a2b4:	mov    %r12,-0x10(%rbp)
   2a2b8:	mov    %rdi,-0x30(%rbp)
   2a2bc:	mov    %rbx,-0x8(%rbp)
   2a2c0:	mov    0x1a8(%rdi),%r15
   2a2c7:	mov    0x260(%rdi),%rbx
   2a2ce:	mov    0x30(%rbx),%rax
   2a2d2:	mov    %rax,-0x40(%rbp)
   2a2d6:	mov    0x38(%rbx),%r10
   2a2da:	mov    %r10,-0x48(%rbp)
   2a2de:	mov    0x20(%rbx),%r9
   2a2e2:	mov    %r9,-0x38(%rbp)
   2a2e6:	mov    0x28(%rbx),%r8
   2a2ea:	mov    %r8,-0x50(%rbp)
   2a2ee:	mov    (%rsi),%r13
   2a2f1:	lea    (%rdx,%rdx,1),%r11d
   2a2f5:	lea    0x1(%r11),%ebx
   2a2f9:	mov    %ebx,%ebx
   2a2fb:	mov    0x0(%r13,%rbx,8),%r12
   2a300:	mov    %r11d,%ebx
   2a303:	mov    0x0(%r13,%rbx,8),%r13
   2a308:	mov    0x8(%rsi),%rbx
   2a30c:	mov    %edx,%r11d
   2a30f:	mov    (%rbx,%r11,8),%rbx
   2a313:	mov    0x10(%rsi),%rdx
   2a317:	mov    (%rdx,%r11,8),%rdx
   2a31b:	mov    (%rcx),%rsi
   2a31e:	mov    0x8(%rcx),%r11
   2a322:	mov    0x88(%rdi),%ecx
   2a328:	shr    %ecx
   2a32a:	jmpq   2a4dd <h2v2_merged_upsample_565_be+0x23d>
   2a32f:	movzbl (%rdx),%edi
   2a332:	mov    (%rax,%rdi,8),%rax
   2a336:	movzbl (%rbx),%r14d
   2a33a:	add    (%r10,%r14,8),%rax
   2a33e:	sar    $0x10,%rax
   2a342:	movzbl 0x1(%r13),%r10d
   2a347:	mov    %rcx,-0x60(%rbp)
   2a34b:	lea    (%r10,%rax,1),%ecx
   2a34f:	movslq %ecx,%rcx
   2a352:	movzbl (%rcx,%r15,1),%ecx
   2a357:	mov    %rbx,-0x58(%rbp)
   2a35b:	mov    %rcx,%rbx
   2a35e:	shr    $0x5,%ebx
   2a361:	movslq (%r9,%rdi,4),%r9
   2a365:	lea    (%r10,%r9,1),%edi
   2a369:	movslq %edi,%rdi
   2a36c:	movzbl (%r15,%rdi,1),%edi
   2a371:	and    $0xf8,%edi
   2a377:	add    %ebx,%edi
   2a379:	and    $0x1c,%ecx
   2a37c:	shl    $0xb,%ecx
   2a37f:	add    %ecx,%edi
   2a381:	movslq (%r8,%r14,4),%r14
   2a385:	lea    (%r10,%r14,1),%ecx
   2a389:	movslq %ecx,%rcx
   2a38c:	movzbl (%r15,%rcx,1),%ecx
   2a391:	and    $0xf8,%ecx
   2a397:	shl    $0x5,%ecx
   2a39a:	add    %edi,%ecx
   2a39c:	mov    %ecx,%r10d
   2a39f:	movzbl 0x0(%r13),%ebx
   2a3a4:	lea    (%rbx,%rax,1),%ecx
   2a3a7:	movslq %ecx,%rcx
   2a3aa:	movzbl (%r15,%rcx,1),%ecx
   2a3af:	mov    %rcx,%r8
   2a3b2:	shr    $0x5,%r8d
   2a3b6:	lea    (%rbx,%r9,1),%edi
   2a3ba:	movslq %edi,%rdi
   2a3bd:	movzbl (%r15,%rdi,1),%edi
   2a3c2:	and    $0xf8,%edi
   2a3c8:	add    %r8d,%edi
   2a3cb:	and    $0x1c,%ecx
   2a3ce:	shl    $0xb,%ecx
   2a3d1:	add    %ecx,%edi
   2a3d3:	lea    (%rbx,%r14,1),%ecx
   2a3d7:	movslq %ecx,%rcx
   2a3da:	movzbl (%rcx,%r15,1),%ecx
   2a3df:	and    $0xf8,%ecx
   2a3e5:	shl    $0x5,%ecx
   2a3e8:	add    %edi,%ecx
   2a3ea:	mov    %ecx,%ecx
   2a3ec:	shl    $0x10,%rcx
   2a3f0:	add    %r10,%rcx
   2a3f3:	mov    %cx,0x2(%rsi)
   2a3f7:	shr    $0x10,%rcx
   2a3fb:	mov    %cx,(%rsi)
   2a3fe:	movzbl 0x1(%r12),%ebx
   2a404:	lea    (%rbx,%rax,1),%ecx
   2a407:	movslq %ecx,%rcx
   2a40a:	movzbl (%rcx,%r15,1),%ecx
   2a40f:	mov    %rcx,%r8
   2a412:	shr    $0x5,%r8d
   2a416:	lea    (%rbx,%r9,1),%edi
   2a41a:	movslq %edi,%rdi
   2a41d:	movzbl (%r15,%rdi,1),%edi
   2a422:	and    $0xf8,%edi
   2a428:	add    %r8d,%edi
   2a42b:	and    $0x1c,%ecx
   2a42e:	shl    $0xb,%ecx
   2a431:	add    %ecx,%edi
   2a433:	lea    (%rbx,%r14,1),%ecx
   2a437:	movslq %ecx,%rcx
   2a43a:	movzbl (%r15,%rcx,1),%ecx
   2a43f:	and    $0xf8,%ecx
   2a445:	shl    $0x5,%ecx
   2a448:	add    %edi,%ecx
   2a44a:	mov    %ecx,%ebx
   2a44c:	movzbl (%r12),%r8d
   2a451:	add    %r8d,%eax
   2a454:	movslq %eax,%rax
   2a457:	movzbl (%r15,%rax,1),%eax
   2a45c:	mov    %rax,%rdi
   2a45f:	shr    $0x5,%edi
   2a462:	lea    (%r8,%r9,1),%ecx
   2a466:	movslq %ecx,%rcx
   2a469:	movzbl (%r15,%rcx,1),%ecx
   2a46e:	and    $0xf8,%ecx
   2a474:	add    %edi,%ecx
   2a476:	and    $0x1c,%eax
   2a479:	shl    $0xb,%eax
   2a47c:	add    %eax,%ecx
   2a47e:	lea    (%r8,%r14,1),%eax
   2a482:	movslq %eax,%rax
   2a485:	movzbl (%rax,%r15,1),%eax
   2a48a:	and    $0xf8,%eax
   2a48f:	shl    $0x5,%eax
   2a492:	add    %ecx,%eax
   2a494:	mov    %eax,%eax
   2a496:	shl    $0x10,%rax
   2a49a:	add    %rbx,%rax
   2a49d:	mov    %ax,0x2(%r11)
   2a4a2:	shr    $0x10,%rax
   2a4a6:	mov    %ax,(%r11)
   2a4aa:	add    $0x2,%r12
   2a4ae:	add    $0x2,%r13
   2a4b2:	add    $0x1,%rdx
   2a4b6:	mov    -0x58(%rbp),%rax
   2a4ba:	lea    0x1(%rax),%rbx
   2a4be:	add    $0x4,%rsi
   2a4c2:	add    $0x4,%r11
   2a4c6:	mov    -0x60(%rbp),%rax
   2a4ca:	lea    -0x1(%rax),%ecx
   2a4cd:	mov    -0x50(%rbp),%r8
   2a4d1:	mov    -0x38(%rbp),%r9
   2a4d5:	mov    -0x48(%rbp),%r10
   2a4d9:	mov    -0x40(%rbp),%rax
   2a4dd:	test   %ecx,%ecx
   2a4df:	jne    2a32f <h2v2_merged_upsample_565_be+0x8f>
   2a4e5:	mov    -0x30(%rbp),%rcx
   2a4e9:	mov    0x88(%rcx),%ecx
   2a4ef:	and    $0x1,%ecx
   2a4f2:	test   %ecx,%ecx
   2a4f4:	jne    2a50c <h2v2_merged_upsample_565_be+0x26c>
   2a4f6:	mov    -0x8(%rbp),%rbx
   2a4fa:	mov    -0x10(%rbp),%r12
   2a4fe:	mov    -0x18(%rbp),%r13
   2a502:	mov    -0x20(%rbp),%r14
   2a506:	mov    -0x28(%rbp),%r15
   2a50a:	leaveq 
   2a50b:	retq   
   2a50c:	movzbl (%rdx),%edx
   2a50f:	mov    (%rax,%rdx,8),%rcx
   2a513:	movzbl (%rbx),%r14d
   2a517:	add    (%r10,%r14,8),%rcx
   2a51b:	sar    $0x10,%rcx
   2a51f:	movzbl 0x0(%r13),%r10d
   2a524:	lea    (%r10,%rcx,1),%eax
   2a528:	movslq %eax,%rax
   2a52b:	movzbl (%r15,%rax,1),%eax
   2a530:	mov    %rax,%rdi
   2a533:	shr    $0x5,%edi
   2a536:	movslq (%r9,%rdx,4),%rbx
   2a53a:	lea    (%r10,%rbx,1),%edx
   2a53e:	movslq %edx,%rdx
   2a541:	movzbl (%r15,%rdx,1),%edx
   2a546:	and    $0xf8,%edx
   2a54c:	add    %edi,%edx
   2a54e:	and    $0x1c,%eax
   2a551:	shl    $0xb,%eax
   2a554:	add    %eax,%edx
   2a556:	movslq (%r8,%r14,4),%rdi
   2a55a:	lea    (%r10,%rdi,1),%eax
   2a55e:	movslq %eax,%rax
   2a561:	movzbl (%r15,%rax,1),%eax
   2a566:	and    $0xf8,%ax
   2a56a:	shl    $0x5,%eax
   2a56d:	add    %edx,%eax
   2a56f:	mov    %ax,(%rsi)
   2a572:	movzbl (%r12),%esi
   2a577:	lea    (%rsi,%rcx,1),%eax
   2a57a:	movslq %eax,%rax
   2a57d:	movzbl (%r15,%rax,1),%eax
   2a582:	mov    %rax,%rdx
   2a585:	shr    $0x5,%edx
   2a588:	lea    (%rsi,%rbx,1),%ecx
   2a58b:	movslq %ecx,%rcx
   2a58e:	movzbl (%r15,%rcx,1),%ecx
   2a593:	and    $0xf8,%ecx
   2a599:	add    %edx,%ecx
   2a59b:	and    $0x1c,%eax
   2a59e:	shl    $0xb,%eax
   2a5a1:	add    %eax,%ecx
   2a5a3:	lea    (%rsi,%rdi,1),%eax
   2a5a6:	movslq %eax,%rax
   2a5a9:	movzbl (%r15,%rax,1),%eax
   2a5ae:	and    $0xf8,%ax
   2a5b2:	shl    $0x5,%eax
   2a5b5:	add    %ecx,%eax
   2a5b7:	mov    %ax,(%r11)
   2a5bb:	mov    -0x8(%rbp),%rbx
   2a5bf:	mov    -0x10(%rbp),%r12
   2a5c3:	mov    -0x18(%rbp),%r13
   2a5c7:	mov    -0x20(%rbp),%r14
   2a5cb:	mov    -0x28(%rbp),%r15
   2a5cf:	leaveq 
   2a5d0:	retq   
   2a5d1:	data16 nopw %cs:0x0(%rax,%rax,1)
   2a5dc:	nopl   0x0(%rax)

000000000002a5e0 <h2v2_merged_upsample_565D_be>:
   2a5e0:	push   %rbp
   2a5e1:	mov    %rsp,%rbp
   2a5e4:	sub    $0x90,%rsp
   2a5eb:	mov    %r15,-0x28(%rbp)
   2a5ef:	mov    %r14,-0x20(%rbp)
   2a5f3:	mov    %r13,-0x18(%rbp)
   2a5f7:	mov    %r12,-0x10(%rbp)
   2a5fb:	mov    %rbx,-0x8(%rbp)
   2a5ff:	mov    %rdi,-0x30(%rbp)
   2a603:	mov    0x1a8(%rdi),%r15
   2a60a:	mov    0x260(%rdi),%rax
   2a611:	mov    0x30(%rax),%r14
   2a615:	mov    %r14,-0x50(%rbp)
   2a619:	mov    0x38(%rax),%r12
   2a61d:	mov    %r12,-0x60(%rbp)
   2a621:	mov    0x20(%rax),%r11
   2a625:	mov    %r11,-0x48(%rbp)
   2a629:	mov    0x28(%rax),%rax
   2a62d:	mov    %rax,-0x70(%rbp)
   2a631:	mov    (%rsi),%r8
   2a634:	lea    (%rdx,%rdx,1),%ebx
   2a637:	lea    0x1(%rbx),%eax
   2a63a:	mov    %eax,%eax
   2a63c:	mov    (%r8,%rax,8),%r9
   2a640:	mov    %ebx,%eax
   2a642:	mov    (%r8,%rax,8),%r13
   2a646:	lea    0x2fa43(%rip),%r8        # 5a090 <dither_matrix>
   2a64d:	mov    0xa8(%rdi),%ebx
   2a653:	mov    %rbx,%rax
   2a656:	and    $0x3,%eax
   2a659:	mov    %eax,%eax
   2a65b:	mov    (%r8,%rax,8),%rax
   2a65f:	add    $0x1,%ebx
   2a662:	and    $0x3,%ebx
   2a665:	mov    %ebx,%ebx
   2a667:	mov    (%r8,%rbx,8),%r10
   2a66b:	mov    0x8(%rsi),%r8
   2a66f:	mov    %edx,%ebx
   2a671:	mov    (%r8,%rbx,8),%r8
   2a675:	mov    0x10(%rsi),%rdx
   2a679:	mov    (%rdx,%rbx,8),%rbx
   2a67d:	mov    (%rcx),%rsi
   2a680:	mov    0x8(%rcx),%rcx
   2a684:	mov    %rcx,-0x38(%rbp)
   2a688:	mov    0x88(%rdi),%ecx
   2a68e:	shr    %ecx
   2a690:	mov    %r14,%rdx
   2a693:	mov    -0x70(%rbp),%rdi
   2a697:	jmpq   2a92a <h2v2_merged_upsample_565D_be+0x34a>
   2a69c:	mov    %rcx,-0x88(%rbp)
   2a6a3:	movzbl (%rbx),%r14d
   2a6a7:	mov    (%rdx,%r14,8),%rdx
   2a6ab:	mov    %r8,-0x78(%rbp)
   2a6af:	movzbl (%r8),%r8d
   2a6b3:	add    (%r12,%r8,8),%rdx
   2a6b7:	sar    $0x10,%rdx
   2a6bb:	movzbl 0x1(%r13),%r12d
   2a6c0:	mov    %rbx,-0x58(%rbp)
   2a6c4:	lea    (%r12,%rdx,1),%ecx
   2a6c8:	movslq %ecx,%rbx
   2a6cb:	mov    %r10,%rcx
   2a6ce:	and    $0xfe,%rcx
   2a6d5:	shr    %rcx
   2a6d8:	add    %r15,%rcx
   2a6db:	movzbl (%rcx,%rbx,1),%ecx
   2a6df:	mov    %rcx,%rbx
   2a6e2:	shr    $0x5,%ebx
   2a6e5:	mov    %r10,-0x80(%rbp)
   2a6e9:	movzbl %r10b,%r10d
   2a6ed:	mov    %r9,-0x40(%rbp)
   2a6f1:	lea    (%r15,%r10,1),%r9
   2a6f5:	movslq (%r11,%r14,4),%r14
   2a6f9:	lea    (%r12,%r14,1),%r11d
   2a6fd:	movslq %r11d,%r11
   2a700:	movzbl (%r9,%r11,1),%r9d
   2a705:	and    $0xf8,%r9d
   2a70c:	add    %r9d,%ebx
   2a70f:	and    $0x1c,%ecx
   2a712:	shl    $0xb,%ecx
   2a715:	add    %ecx,%ebx
   2a717:	movslq (%rdi,%r8,4),%r8
   2a71b:	lea    (%r12,%r8,1),%ecx
   2a71f:	movslq %ecx,%rcx
   2a722:	add    %r15,%rcx
   2a725:	movzbl (%rcx,%r10,1),%ecx
   2a72a:	and    $0xf8,%ecx
   2a730:	shl    $0x5,%ecx
   2a733:	add    %ebx,%ecx
   2a735:	mov    %ecx,%r9d
   2a738:	movzbl 0x0(%r13),%r11d
   2a73d:	lea    (%r11,%rdx,1),%ecx
   2a741:	movslq %ecx,%rdi
   2a744:	mov    %rax,%rcx
   2a747:	and    $0xfe,%rcx
   2a74e:	shr    %rcx
   2a751:	add    %r15,%rcx
   2a754:	movzbl (%rcx,%rdi,1),%ecx
   2a758:	mov    %rcx,%r12
   2a75b:	shr    $0x5,%r12d
   2a75f:	movzbl %al,%edi
   2a762:	lea    (%r15,%rdi,1),%rbx
   2a766:	mov    %r13,-0x68(%rbp)
   2a76a:	lea    (%r11,%r14,1),%r13d
   2a76e:	movslq %r13d,%r13
   2a771:	movzbl (%rbx,%r13,1),%ebx
   2a776:	and    $0xf8,%ebx
   2a77c:	add    %r12d,%ebx
   2a77f:	and    $0x1c,%ecx
   2a782:	shl    $0xb,%ecx
   2a785:	add    %ecx,%ebx
   2a787:	lea    (%r11,%r8,1),%ecx
   2a78b:	movslq %ecx,%rcx
   2a78e:	add    %r15,%rcx
   2a791:	movzbl (%rcx,%rdi,1),%ecx
   2a795:	and    $0xf8,%ecx
   2a79b:	shl    $0x5,%ecx
   2a79e:	add    %ebx,%ecx
   2a7a0:	mov    %ecx,%ecx
   2a7a2:	shl    $0x10,%rcx
   2a7a6:	add    %r9,%rcx
   2a7a9:	mov    %cx,0x2(%rsi)
   2a7ad:	shr    $0x10,%rcx
   2a7b1:	mov    %cx,(%rsi)
   2a7b4:	mov    -0x40(%rbp),%r9
   2a7b8:	movzbl 0x1(%r9),%r13d
   2a7bd:	lea    0x0(%r13,%rdx,1),%ecx
   2a7c2:	movslq %ecx,%r11
   2a7c5:	mov    -0x80(%rbp),%rcx
   2a7c9:	mov    $0xffffff00,%ebx
   2a7ce:	and    %rbx,%rcx
   2a7d1:	shr    $0x8,%rcx
   2a7d5:	shl    $0x18,%r10
   2a7d9:	lea    (%r10,%rcx,1),%rbx
   2a7dd:	mov    %rbx,-0x80(%rbp)
   2a7e1:	mov    %rbx,%rcx
   2a7e4:	and    $0xfe,%rcx
   2a7eb:	shr    %rcx
   2a7ee:	add    %r15,%rcx
   2a7f1:	movzbl (%rcx,%r11,1),%ecx
   2a7f6:	mov    %rcx,%r12
   2a7f9:	shr    $0x5,%r12d
   2a7fd:	movzbl %bl,%r10d
   2a801:	lea    (%r15,%r10,1),%r11
   2a805:	lea    0x0(%r13,%r14,1),%ebx
   2a80a:	movslq %ebx,%rbx
   2a80d:	movzbl (%r11,%rbx,1),%ebx
   2a812:	and    $0xf8,%ebx
   2a818:	add    %r12d,%ebx
   2a81b:	and    $0x1c,%ecx
   2a81e:	shl    $0xb,%ecx
   2a821:	add    %ecx,%ebx
   2a823:	lea    0x0(%r13,%r8,1),%ecx
   2a828:	movslq %ecx,%rcx
   2a82b:	add    %r15,%rcx
   2a82e:	movzbl (%rcx,%r10,1),%ecx
   2a833:	and    $0xf8,%ecx
   2a839:	shl    $0x5,%ecx
   2a83c:	add    %ebx,%ecx
   2a83e:	mov    %ecx,%r11d
   2a841:	movzbl (%r9),%ebx
   2a845:	lea    (%rbx,%rdx,1),%ecx
   2a848:	movslq %ecx,%rdx
   2a84b:	mov    $0xffffff00,%ecx
   2a850:	and    %rcx,%rax
   2a853:	shr    $0x8,%rax
   2a857:	shl    $0x18,%rdi
   2a85b:	lea    (%rdi,%rax,1),%rcx
   2a85f:	mov    %rcx,%rax
   2a862:	and    $0xfe,%rax
   2a868:	shr    %rax
   2a86b:	add    %r15,%rax
   2a86e:	movzbl (%rax,%rdx,1),%eax
   2a872:	mov    %rax,%r13
   2a875:	shr    $0x5,%r13d
   2a879:	movzbl %cl,%edx
   2a87c:	lea    (%r15,%rdx,1),%r12
   2a880:	lea    (%rbx,%r14,1),%edi
   2a884:	movslq %edi,%rdi
   2a887:	movzbl (%r12,%rdi,1),%edi
   2a88c:	and    $0xf8,%edi
   2a892:	add    %r13d,%edi
   2a895:	and    $0x1c,%eax
   2a898:	shl    $0xb,%eax
   2a89b:	add    %eax,%edi
   2a89d:	lea    (%rbx,%r8,1),%eax
   2a8a1:	movslq %eax,%rax
   2a8a4:	add    %r15,%rax
   2a8a7:	movzbl (%rax,%rdx,1),%eax
   2a8ab:	and    $0xf8,%eax
   2a8b0:	shl    $0x5,%eax
   2a8b3:	add    %edi,%eax
   2a8b5:	mov    %eax,%eax
   2a8b7:	shl    $0x10,%rax
   2a8bb:	add    %r11,%rax
   2a8be:	mov    -0x38(%rbp),%rdi
   2a8c2:	mov    %ax,0x2(%rdi)
   2a8c6:	shr    $0x10,%rax
   2a8ca:	mov    %ax,(%rdi)
   2a8cd:	add    $0x2,%r9
   2a8d1:	mov    -0x68(%rbp),%rax
   2a8d5:	lea    0x2(%rax),%r13
   2a8d9:	mov    -0x58(%rbp),%rax
   2a8dd:	lea    0x1(%rax),%rbx
   2a8e1:	mov    -0x78(%rbp),%rax
   2a8e5:	lea    0x1(%rax),%r8
   2a8e9:	shr    $0x8,%rcx
   2a8ed:	shl    $0x18,%rdx
   2a8f1:	lea    (%rcx,%rdx,1),%rax
   2a8f5:	add    $0x4,%rsi
   2a8f9:	mov    -0x80(%rbp),%rcx
   2a8fd:	shr    $0x8,%rcx
   2a901:	shl    $0x18,%r10
   2a905:	add    %rcx,%r10
   2a908:	lea    0x4(%rdi),%rcx
   2a90c:	mov    %rcx,-0x38(%rbp)
   2a910:	mov    -0x88(%rbp),%rcx
   2a917:	add    $0xffffffff,%ecx
   2a91a:	mov    -0x48(%rbp),%r11
   2a91e:	mov    -0x60(%rbp),%r12
   2a922:	mov    -0x50(%rbp),%rdx
   2a926:	mov    -0x70(%rbp),%rdi
   2a92a:	test   %ecx,%ecx
   2a92c:	jne    2a69c <h2v2_merged_upsample_565D_be+0xbc>
   2a932:	mov    -0x30(%rbp),%rcx
   2a936:	mov    0x88(%rcx),%ecx
   2a93c:	and    $0x1,%ecx
   2a93f:	test   %ecx,%ecx
   2a941:	jne    2a959 <h2v2_merged_upsample_565D_be+0x379>
   2a943:	mov    -0x8(%rbp),%rbx
   2a947:	mov    -0x10(%rbp),%r12
   2a94b:	mov    -0x18(%rbp),%r13
   2a94f:	mov    -0x20(%rbp),%r14
   2a953:	mov    -0x28(%rbp),%r15
   2a957:	leaveq 
   2a958:	retq   
   2a959:	movzbl (%rbx),%ebx
   2a95c:	mov    (%rdx,%rbx,8),%rcx
   2a960:	movzbl (%r8),%r14d
   2a964:	add    (%r12,%r14,8),%rcx
   2a968:	sar    $0x10,%rcx
   2a96c:	movzbl 0x0(%r13),%r13d
   2a971:	lea    0x0(%r13,%rcx,1),%edx
   2a976:	movslq %edx,%r8
   2a979:	mov    %rax,%rdx
   2a97c:	and    $0xfe,%rdx
   2a983:	shr    %rdx
   2a986:	add    %r8,%rdx
   2a989:	movzbl (%r15,%rdx,1),%edx
   2a98e:	mov    %rdx,%r12
   2a991:	shr    $0x5,%r12d
   2a995:	movslq (%r11,%rbx,4),%r8
   2a999:	lea    0x0(%r13,%r8,1),%ebx
   2a99e:	movslq %ebx,%rbx
   2a9a1:	movzbl %al,%r11d
   2a9a5:	lea    (%r11,%rbx,1),%rax
   2a9a9:	movzbl (%r15,%rax,1),%eax
   2a9ae:	and    $0xf8,%eax
   2a9b3:	add    %r12d,%eax
   2a9b6:	and    $0x1c,%edx
   2a9b9:	shl    $0xb,%edx
   2a9bc:	add    %eax,%edx
   2a9be:	movslq (%rdi,%r14,4),%rbx
   2a9c2:	lea    0x0(%r13,%rbx,1),%eax
   2a9c7:	movslq %eax,%rax
   2a9ca:	add    %r11,%rax
   2a9cd:	movzbl (%r15,%rax,1),%eax
   2a9d2:	and    $0xf8,%ax
   2a9d6:	shl    $0x5,%eax
   2a9d9:	add    %edx,%eax
   2a9db:	mov    %ax,(%rsi)
   2a9de:	movzbl (%r9),%edi
   2a9e2:	lea    (%rdi,%rcx,1),%eax
   2a9e5:	movslq %eax,%rcx
   2a9e8:	mov    %r10,%rax
   2a9eb:	and    $0xfe,%rax
   2a9f1:	shr    %rax
   2a9f4:	add    %rcx,%rax
   2a9f7:	movzbl (%r15,%rax,1),%eax
   2a9fc:	mov    %rax,%rsi
   2a9ff:	shr    $0x5,%esi
   2aa02:	lea    (%rdi,%r8,1),%ecx
   2aa06:	movslq %ecx,%rcx
   2aa09:	movzbl %r10b,%edx
   2aa0d:	add    %rdx,%rcx
   2aa10:	movzbl (%r15,%rcx,1),%ecx
   2aa15:	and    $0xf8,%ecx
   2aa1b:	add    %esi,%ecx
   2aa1d:	and    $0x1c,%eax
   2aa20:	shl    $0xb,%eax
   2aa23:	add    %eax,%ecx
   2aa25:	lea    (%rdi,%rbx,1),%eax
   2aa28:	movslq %eax,%rax
   2aa2b:	add    %rdx,%rax
   2aa2e:	movzbl (%r15,%rax,1),%eax
   2aa33:	and    $0xf8,%ax
   2aa37:	shl    $0x5,%eax
   2aa3a:	add    %ecx,%eax
   2aa3c:	mov    -0x38(%rbp),%rcx
   2aa40:	mov    %ax,(%rcx)
   2aa43:	mov    -0x8(%rbp),%rbx
   2aa47:	mov    -0x10(%rbp),%r12
   2aa4b:	mov    -0x18(%rbp),%r13
   2aa4f:	mov    -0x20(%rbp),%r14
   2aa53:	mov    -0x28(%rbp),%r15
   2aa57:	leaveq 
   2aa58:	retq   
   2aa59:	nopl   0x0(%rax)

000000000002aa60 <is_big_endian>:
   2aa60:	push   %rbp
   2aa61:	mov    %rsp,%rbp
   2aa64:	xor    %eax,%eax
   2aa66:	leaveq 
   2aa67:	retq   
   2aa68:	nopl   0x0(%rax,%rax,1)

000000000002aa70 <h2v1_merged_upsample_565>:
   2aa70:	push   %rbp
   2aa71:	mov    %rsp,%rbp
   2aa74:	sub    $0x20,%rsp
   2aa78:	mov    %r12,-0x8(%rbp)
   2aa7c:	mov    %r13,-0x10(%rbp)
   2aa80:	mov    %r14,-0x18(%rbp)
   2aa84:	mov    %r15,-0x20(%rbp)
   2aa88:	mov    %rsi,%r12
   2aa8b:	mov    %rcx,%r13
   2aa8e:	mov    %rdx,%r14
   2aa91:	mov    %rdi,%r15
   2aa94:	callq  2aa60 <is_big_endian>
   2aa99:	test   %eax,%eax
   2aa9b:	jne    2aac0 <h2v1_merged_upsample_565+0x50>
   2aa9d:	mov    %r13,%rcx
   2aaa0:	mov    %r14,%rdx
   2aaa3:	mov    %r12,%rsi
   2aaa6:	mov    %r15,%rdi
   2aaa9:	callq  29280 <h2v1_merged_upsample_565_le>
   2aaae:	mov    -0x20(%rbp),%r15
   2aab2:	mov    -0x18(%rbp),%r14
   2aab6:	mov    -0x10(%rbp),%r13
   2aaba:	mov    -0x8(%rbp),%r12
   2aabe:	leaveq 
   2aabf:	retq   
   2aac0:	mov    %r13,%rcx
   2aac3:	mov    %r14,%rdx
   2aac6:	mov    %r12,%rsi
   2aac9:	mov    %r15,%rdi
   2aacc:	callq  29de0 <h2v1_merged_upsample_565_be>
   2aad1:	mov    -0x20(%rbp),%r15
   2aad5:	mov    -0x18(%rbp),%r14
   2aad9:	mov    -0x10(%rbp),%r13
   2aadd:	mov    -0x8(%rbp),%r12
   2aae1:	leaveq 
   2aae2:	retq   
   2aae3:	data16 nopw %cs:0x0(%rax,%rax,1)
   2aaee:	xchg   %ax,%ax

000000000002aaf0 <h2v1_merged_upsample_565D>:
   2aaf0:	push   %rbp
   2aaf1:	mov    %rsp,%rbp
   2aaf4:	sub    $0x20,%rsp
   2aaf8:	mov    %r12,-0x8(%rbp)
   2aafc:	mov    %r13,-0x10(%rbp)
   2ab00:	mov    %r14,-0x18(%rbp)
   2ab04:	mov    %r15,-0x20(%rbp)
   2ab08:	mov    %rsi,%r12
   2ab0b:	mov    %rdx,%r13
   2ab0e:	mov    %rdi,%r14
   2ab11:	mov    %rcx,%r15
   2ab14:	callq  2aa60 <is_big_endian>
   2ab19:	test   %eax,%eax
   2ab1b:	jne    2ab40 <h2v1_merged_upsample_565D+0x50>
   2ab1d:	mov    %r15,%rcx
   2ab20:	mov    %r13,%rdx
   2ab23:	mov    %r12,%rsi
   2ab26:	mov    %r14,%rdi
   2ab29:	callq  29460 <h2v1_merged_upsample_565D_le>
   2ab2e:	mov    -0x20(%rbp),%r15
   2ab32:	mov    -0x18(%rbp),%r14
   2ab36:	mov    -0x10(%rbp),%r13
   2ab3a:	mov    -0x8(%rbp),%r12
   2ab3e:	leaveq 
   2ab3f:	retq   
   2ab40:	mov    %r15,%rcx
   2ab43:	mov    %r13,%rdx
   2ab46:	mov    %r12,%rsi
   2ab49:	mov    %r14,%rdi
   2ab4c:	callq  29ff0 <h2v1_merged_upsample_565D_be>
   2ab51:	mov    -0x20(%rbp),%r15
   2ab55:	mov    -0x18(%rbp),%r14
   2ab59:	mov    -0x10(%rbp),%r13
   2ab5d:	mov    -0x8(%rbp),%r12
   2ab61:	leaveq 
   2ab62:	retq   
   2ab63:	data16 nopw %cs:0x0(%rax,%rax,1)
   2ab6e:	xchg   %ax,%ax

000000000002ab70 <h2v2_merged_upsample_565>:
   2ab70:	push   %rbp
   2ab71:	mov    %rsp,%rbp
   2ab74:	sub    $0x20,%rsp
   2ab78:	mov    %r12,-0x8(%rbp)
   2ab7c:	mov    %r13,-0x10(%rbp)
   2ab80:	mov    %r14,-0x18(%rbp)
   2ab84:	mov    %r15,-0x20(%rbp)
   2ab88:	mov    %rsi,%r12
   2ab8b:	mov    %rcx,%r13
   2ab8e:	mov    %rdx,%r14
   2ab91:	mov    %rdi,%r15
   2ab94:	callq  2aa60 <is_big_endian>
   2ab99:	test   %eax,%eax
   2ab9b:	jne    2abc0 <h2v2_merged_upsample_565+0x50>
   2ab9d:	mov    %r13,%rcx
   2aba0:	mov    %r14,%rdx
   2aba3:	mov    %r12,%rsi
   2aba6:	mov    %r15,%rdi
   2aba9:	callq  296d0 <h2v2_merged_upsample_565_le>
   2abae:	mov    -0x20(%rbp),%r15
   2abb2:	mov    -0x18(%rbp),%r14
   2abb6:	mov    -0x10(%rbp),%r13
   2abba:	mov    -0x8(%rbp),%r12
   2abbe:	leaveq 
   2abbf:	retq   
   2abc0:	mov    %r13,%rcx
   2abc3:	mov    %r14,%rdx
   2abc6:	mov    %r12,%rsi
   2abc9:	mov    %r15,%rdi
   2abcc:	callq  2a2a0 <h2v2_merged_upsample_565_be>
   2abd1:	mov    -0x20(%rbp),%r15
   2abd5:	mov    -0x18(%rbp),%r14
   2abd9:	mov    -0x10(%rbp),%r13
   2abdd:	mov    -0x8(%rbp),%r12
   2abe1:	leaveq 
   2abe2:	retq   
   2abe3:	data16 nopw %cs:0x0(%rax,%rax,1)
   2abee:	xchg   %ax,%ax

000000000002abf0 <h2v2_merged_upsample_565D>:
   2abf0:	push   %rbp
   2abf1:	mov    %rsp,%rbp
   2abf4:	sub    $0x20,%rsp
   2abf8:	mov    %r12,-0x8(%rbp)
   2abfc:	mov    %r13,-0x10(%rbp)
   2ac00:	mov    %r14,-0x18(%rbp)
   2ac04:	mov    %r15,-0x20(%rbp)
   2ac08:	mov    %rsi,%r12
   2ac0b:	mov    %rdx,%r13
   2ac0e:	mov    %rdi,%r14
   2ac11:	mov    %rcx,%r15
   2ac14:	callq  2aa60 <is_big_endian>
   2ac19:	test   %eax,%eax
   2ac1b:	jne    2ac40 <h2v2_merged_upsample_565D+0x50>
   2ac1d:	mov    %r15,%rcx
   2ac20:	mov    %r13,%rdx
   2ac23:	mov    %r12,%rsi
   2ac26:	mov    %r14,%rdi
   2ac29:	callq  299b0 <h2v2_merged_upsample_565D_le>
   2ac2e:	mov    -0x20(%rbp),%r15
   2ac32:	mov    -0x18(%rbp),%r14
   2ac36:	mov    -0x10(%rbp),%r13
   2ac3a:	mov    -0x8(%rbp),%r12
   2ac3e:	leaveq 
   2ac3f:	retq   
   2ac40:	mov    %r15,%rcx
   2ac43:	mov    %r13,%rdx
   2ac46:	mov    %r12,%rsi
   2ac49:	mov    %r14,%rdi
   2ac4c:	callq  2a5e0 <h2v2_merged_upsample_565D_be>
   2ac51:	mov    -0x20(%rbp),%r15
   2ac55:	mov    -0x18(%rbp),%r14
   2ac59:	mov    -0x10(%rbp),%r13
   2ac5d:	mov    -0x8(%rbp),%r12
   2ac61:	leaveq 
   2ac62:	retq   
   2ac63:	nopw   %cs:0x0(%rax,%rax,1)
   2ac6d:	nopl   (%rax)

000000000002ac70 <jinit_phuff_decoder>:
   2ac70:	push   %rbp
   2ac71:	mov    %rsp,%rbp
   2ac74:	sub    $0x10,%rsp
   2ac78:	mov    %r14,-0x8(%rbp)
   2ac7c:	mov    %r15,-0x10(%rbp)
   2ac80:	mov    $0x1,%r14d
   2ac86:	mov    0x8(%rdi),%rax
   2ac8a:	mov    (%rax),%rax
   2ac8d:	mov    $0x68,%edx
   2ac92:	mov    %rdi,%r15
   2ac95:	mov    %r14,%rsi
   2ac98:	callq  *%rax
   2ac9a:	mov    %rax,0x250(%r15)
   2aca1:	lea    0x1058(%rip),%rcx        # 2bd00 <start_pass_phuff_decoder>
   2aca8:	mov    %rcx,(%rax)
   2acab:	xor    %esi,%esi
   2acad:	mov    %rsi,%rcx
   2acb0:	jmp    2acc1 <jinit_phuff_decoder+0x51>
   2acb2:	movslq %ecx,%rdx
   2acb5:	movq   $0x0,0x40(%rax,%rdx,8)
   2acbe:	add    $0x1,%ecx
   2acc1:	cmp    $0x3,%ecx
   2acc4:	jle    2acb2 <jinit_phuff_decoder+0x42>
   2acc6:	mov    0x8(%r15),%rax
   2acca:	mov    (%rax),%rax
   2accd:	movslq 0x38(%r15),%rcx
   2acd1:	shl    $0x6,%ecx
   2acd4:	movslq %ecx,%rdx
   2acd7:	shl    $0x2,%rdx
   2acdb:	mov    %r14,%rcx
   2acde:	mov    %rsi,%r14
   2ace1:	mov    %rcx,%rsi
   2ace4:	mov    %r15,%rdi
   2ace7:	callq  *%rax
   2ace9:	mov    %rax,0xc0(%r15)
   2acf0:	mov    %r14,%rdx
   2acf3:	jmp    2ad0a <jinit_phuff_decoder+0x9a>
   2acf5:	movl   $0xffffffff,(%rax)
   2acfb:	add    $0x4,%rax
   2acff:	add    $0x1,%ecx
   2ad02:	cmp    $0x3f,%ecx
   2ad05:	jle    2acf5 <jinit_phuff_decoder+0x85>
   2ad07:	add    $0x1,%edx
   2ad0a:	movslq 0x38(%r15),%rcx
   2ad0e:	cmp    %edx,%ecx
   2ad10:	jg     2ad1c <jinit_phuff_decoder+0xac>
   2ad12:	mov    -0x10(%rbp),%r15
   2ad16:	mov    -0x8(%rbp),%r14
   2ad1a:	leaveq 
   2ad1b:	retq   
   2ad1c:	mov    %r14,%rcx
   2ad1f:	jmp    2ad02 <jinit_phuff_decoder+0x92>
   2ad21:	data16 nopw %cs:0x0(%rax,%rax,1)
   2ad2c:	nopl   0x0(%rax)

000000000002ad30 <decode_mcu_DC_first>:
   2ad30:	push   %rbp
   2ad31:	mov    %rsp,%rbp
   2ad34:	sub    $0x80,%rsp
   2ad3b:	mov    %rdi,-0x38(%rbp)
   2ad3f:	mov    %rsi,-0x30(%rbp)
   2ad43:	mov    0x250(%rdi),%r9
   2ad4a:	mov    %r9,-0x40(%rbp)
   2ad4e:	mov    0x218(%rdi),%ecx
   2ad54:	xor    %r11d,%r11d
   2ad57:	mov    0x170(%rdi),%eax
   2ad5d:	test   %eax,%eax
   2ad5f:	jne    2ad90 <decode_mcu_DC_first+0x60>
   2ad61:	mov    %rbx,%r8
   2ad64:	mov    %rcx,%rbx
   2ad67:	mov    %r12,%rcx
   2ad6a:	mov    %rdi,%r12
   2ad6d:	mov    %rsi,%r10
   2ad70:	mov    $0x1,%eax
   2ad75:	movslq 0x10(%r9),%rdx
   2ad79:	test   %edx,%edx
   2ad7b:	je     2ada9 <decode_mcu_DC_first+0x79>
   2ad7d:	mov    %r8,%rbx
   2ad80:	mov    %rcx,%r12
   2ad83:	mov    0x3c(%r9),%ecx
   2ad87:	add    $0xffffffff,%ecx
   2ad8a:	mov    %ecx,0x3c(%r9)
   2ad8e:	leaveq 
   2ad8f:	retq   
   2ad90:	mov    0x3c(%r9),%eax
   2ad94:	test   %eax,%eax
   2ad96:	je     2ae05 <decode_mcu_DC_first+0xd5>
   2ad98:	mov    %rbx,%r8
   2ad9b:	mov    %rcx,%rbx
   2ad9e:	mov    %r12,%rcx
   2ada1:	mov    %rdi,%r12
   2ada4:	mov    %rsi,%r10
   2ada7:	jmp    2ad70 <decode_mcu_DC_first+0x40>
   2ada9:	mov    %r12,-0x60(%rbp)
   2adad:	mov    0x28(%r12),%rdx
   2adb2:	mov    (%rdx),%rdx
   2adb5:	mov    %rdx,-0x80(%rbp)
   2adb9:	mov    0x28(%r12),%rdx
   2adbe:	mov    0x8(%rdx),%rdx
   2adc2:	mov    %rdx,-0x78(%rbp)
   2adc6:	mov    0x18(%r9),%rsi
   2adca:	movslq 0x20(%r9),%rdx
   2adce:	mov    0x28(%r9),%rdi
   2add2:	mov    %rdi,-0x54(%rbp)
   2add6:	mov    0x30(%r9),%rdi
   2adda:	mov    %rdi,-0x4c(%rbp)
   2adde:	mov    0x38(%r9),%edi
   2ade2:	mov    %edi,-0x44(%rbp)
   2ade5:	lea    -0x80(%rbp),%rdi
   2ade9:	mov    %r15,-0x28(%rbp)
   2aded:	mov    %r8,-0x8(%rbp)
   2adf1:	mov    %rcx,-0x10(%rbp)
   2adf5:	mov    %r13,-0x18(%rbp)
   2adf9:	mov    %r14,-0x20(%rbp)
   2adfd:	mov    %r11,%r13
   2ae00:	jmpq   2aeea <decode_mcu_DC_first+0x1ba>
   2ae05:	mov    %rcx,-0x28(%rbp)
   2ae09:	callq  2c060 <process_restart>
   2ae0e:	test   %eax,%eax
   2ae10:	je     2af49 <decode_mcu_DC_first+0x219>
   2ae16:	mov    %r12,%rcx
   2ae19:	mov    %rbx,%r8
   2ae1c:	xor    %r11d,%r11d
   2ae1f:	mov    -0x30(%rbp),%r10
   2ae23:	mov    -0x28(%rbp),%rbx
   2ae27:	mov    -0x38(%rbp),%r12
   2ae2b:	mov    -0x40(%rbp),%r9
   2ae2f:	jmpq   2ad70 <decode_mcu_DC_first+0x40>
   2ae34:	movslq %r13d,%rax
   2ae37:	mov    (%r10,%rax,8),%r14
   2ae3b:	movslq 0x1e4(%r12,%rax,4),%r15
   2ae43:	mov    0x1b8(%r12,%r15,8),%rax
   2ae4b:	movslq 0x14(%rax),%rax
   2ae4f:	mov    0x40(%r9,%rax,8),%rax
   2ae54:	cmp    $0x7,%edx
   2ae57:	jg     2af63 <decode_mcu_DC_first+0x233>
   2ae5d:	mov    %r11,%rcx
   2ae60:	mov    %rax,%r12
   2ae63:	callq  4410 <jpeg_fill_bit_buffer@plt>
   2ae68:	test   %eax,%eax
   2ae6a:	je     2af97 <decode_mcu_DC_first+0x267>
   2ae70:	mov    -0x70(%rbp),%rsi
   2ae74:	movslq -0x68(%rbp),%rdx
   2ae78:	cmp    $0x7,%edx
   2ae7b:	jg     2af4d <decode_mcu_DC_first+0x21d>
   2ae81:	mov    %r12,%rax
   2ae84:	lea    -0x80(%rbp),%rdi
   2ae88:	mov    $0x1,%r8d
   2ae8e:	mov    -0x38(%rbp),%r12
   2ae92:	mov    %rax,%rcx
   2ae95:	callq  41c0 <jpeg_huff_decode@plt>
   2ae9a:	test   %eax,%eax
   2ae9c:	js     2afaf <decode_mcu_DC_first+0x27f>
   2aea2:	mov    %rax,%rcx
   2aea5:	mov    -0x70(%rbp),%rsi
   2aea9:	movslq -0x68(%rbp),%rdx
   2aead:	lea    -0x80(%rbp),%rdi
   2aeb1:	xor    %r11d,%r11d
   2aeb4:	mov    -0x30(%rbp),%r10
   2aeb8:	mov    -0x40(%rbp),%r9
   2aebc:	test   %ecx,%ecx
   2aebe:	jne    2afc7 <decode_mcu_DC_first+0x297>
   2aec4:	mov    %r11,%rax
   2aec7:	add    -0x50(%rbp,%r15,4),%eax
   2aecc:	mov    %eax,-0x50(%rbp,%r15,4)
   2aed1:	movslq %eax,%rax
   2aed4:	mov    %rbx,%rcx
   2aed7:	shl    %cl,%rax
   2aeda:	mov    %rcx,%rbx
   2aedd:	mov    %ax,(%r14)
   2aee1:	add    $0x1,%r13d
   2aee5:	mov    $0x1,%eax
   2aeea:	cmp    0x1e0(%r12),%r13d
   2aef2:	jl     2ae34 <decode_mcu_DC_first+0x104>
   2aef8:	mov    -0x80(%rbp),%rdi
   2aefc:	mov    0x28(%r12),%rcx
   2af01:	mov    %rdi,(%rcx)
   2af04:	mov    -0x78(%rbp),%rdi
   2af08:	mov    0x28(%r12),%rcx
   2af0d:	mov    %rdi,0x8(%rcx)
   2af11:	mov    %rsi,0x18(%r9)
   2af15:	mov    %edx,0x20(%r9)
   2af19:	mov    -0x54(%rbp),%rcx
   2af1d:	mov    %rcx,0x28(%r9)
   2af21:	mov    -0x4c(%rbp),%rcx
   2af25:	mov    %rcx,0x30(%r9)
   2af29:	mov    -0x44(%rbp),%ecx
   2af2c:	mov    %ecx,0x38(%r9)
   2af30:	mov    -0x20(%rbp),%r14
   2af34:	mov    -0x18(%rbp),%r13
   2af38:	mov    -0x10(%rbp),%r12
   2af3c:	mov    -0x8(%rbp),%rbx
   2af40:	mov    -0x28(%rbp),%r15
   2af44:	jmpq   2ad83 <decode_mcu_DC_first+0x53>
   2af49:	xor    %eax,%eax
   2af4b:	leaveq 
   2af4c:	retq   
   2af4d:	mov    %r12,%rax
   2af50:	lea    -0x80(%rbp),%rdi
   2af54:	xor    %r11d,%r11d
   2af57:	mov    -0x30(%rbp),%r10
   2af5b:	mov    -0x38(%rbp),%r12
   2af5f:	mov    -0x40(%rbp),%r9
   2af63:	lea    0x38(%rdx),%ecx
   2af66:	mov    %rsi,%r8
   2af69:	shr    %cl,%r8
   2af6c:	movzbl %r8b,%ecx
   2af70:	movslq %ecx,%rcx
   2af73:	movslq 0x128(%rax,%rcx,4),%rcx
   2af7b:	mov    %rcx,%r8
   2af7e:	sar    $0x8,%r8d
   2af82:	cmp    $0x8,%r8d
   2af86:	jg     2ae92 <decode_mcu_DC_first+0x162>
   2af8c:	sub    %r8d,%edx
   2af8f:	movzbl %cl,%ecx
   2af92:	jmpq   2aebc <decode_mcu_DC_first+0x18c>
   2af97:	mov    -0x20(%rbp),%r14
   2af9b:	mov    -0x18(%rbp),%r13
   2af9f:	mov    -0x10(%rbp),%r12
   2afa3:	mov    -0x8(%rbp),%rbx
   2afa7:	mov    -0x28(%rbp),%r15
   2afab:	xor    %eax,%eax
   2afad:	leaveq 
   2afae:	retq   
   2afaf:	mov    -0x20(%rbp),%r14
   2afb3:	mov    -0x18(%rbp),%r13
   2afb7:	mov    -0x10(%rbp),%r12
   2afbb:	mov    -0x8(%rbp),%rbx
   2afbf:	mov    -0x28(%rbp),%r15
   2afc3:	xor    %eax,%eax
   2afc5:	leaveq 
   2afc6:	retq   
   2afc7:	cmp    %ecx,%edx
   2afc9:	jge    2aff2 <decode_mcu_DC_first+0x2c2>
   2afcb:	mov    %rcx,%r12
   2afce:	callq  4410 <jpeg_fill_bit_buffer@plt>
   2afd3:	test   %eax,%eax
   2afd5:	je     2b027 <decode_mcu_DC_first+0x2f7>
   2afd7:	mov    %r12,%rcx
   2afda:	mov    -0x70(%rbp),%rsi
   2afde:	movslq -0x68(%rbp),%rdx
   2afe2:	lea    -0x80(%rbp),%rdi
   2afe6:	mov    -0x30(%rbp),%r10
   2afea:	mov    -0x38(%rbp),%r12
   2afee:	mov    -0x40(%rbp),%r9
   2aff2:	mov    $0x1,%r8d
   2aff8:	mov    %r8,%rax
   2affb:	shl    %cl,%eax
   2affd:	add    $0xffffffff,%eax
   2b000:	sub    %ecx,%edx
   2b002:	mov    %rcx,%r11
   2b005:	mov    %rdx,%rcx
   2b008:	mov    %rsi,%rdx
   2b00b:	shr    %cl,%rdx
   2b00e:	and    %edx,%eax
   2b010:	mov    %rcx,%rdx
   2b013:	lea    0x1f(%r11),%ecx
   2b017:	shl    %cl,%r8d
   2b01a:	cmp    %r8d,%eax
   2b01d:	jl     2b03f <decode_mcu_DC_first+0x30f>
   2b01f:	xor    %r11d,%r11d
   2b022:	jmpq   2aec7 <decode_mcu_DC_first+0x197>
   2b027:	mov    -0x20(%rbp),%r14
   2b02b:	mov    -0x18(%rbp),%r13
   2b02f:	mov    -0x10(%rbp),%r12
   2b033:	mov    -0x8(%rbp),%rbx
   2b037:	mov    -0x28(%rbp),%r15
   2b03b:	xor    %eax,%eax
   2b03d:	leaveq 
   2b03e:	retq   
   2b03f:	mov    %r11,%rcx
   2b042:	mov    $0xffffffffffffffff,%r8
   2b049:	shl    %cl,%r8d
   2b04c:	lea    0x1(%rax,%r8,1),%eax
   2b051:	xor    %r11d,%r11d
   2b054:	jmpq   2aec7 <decode_mcu_DC_first+0x197>
   2b059:	nopl   0x0(%rax)

000000000002b060 <decode_mcu_AC_first>:
   2b060:	push   %rbp
   2b061:	mov    %rsp,%rbp
   2b064:	sub    $0x80,%rsp
   2b06b:	mov    0x250(%rdi),%r8
   2b072:	movslq 0x210(%rdi),%rdx
   2b079:	mov    0x218(%rdi),%r9d
   2b080:	xor    %ecx,%ecx
   2b082:	mov    0x170(%rdi),%eax
   2b088:	test   %eax,%eax
   2b08a:	jne    2b0cd <decode_mcu_AC_first+0x6d>
   2b08c:	mov    %rsi,%r10
   2b08f:	mov    %rdi,%r11
   2b092:	mov    %r12,%rdi
   2b095:	mov    %rdx,%r12
   2b098:	mov    %r15,%rdx
   2b09b:	mov    %r14,%r15
   2b09e:	mov    %r9,%rsi
   2b0a1:	mov    %rbx,%r9
   2b0a4:	mov    %rsi,%rbx
   2b0a7:	mov    $0x1,%eax
   2b0ac:	movslq 0x10(%r8),%rsi
   2b0b0:	test   %esi,%esi
   2b0b2:	je     2b0f6 <decode_mcu_AC_first+0x96>
   2b0b4:	mov    %r9,%rbx
   2b0b7:	mov    %rdi,%r12
   2b0ba:	mov    0x3c(%r8),%ecx
   2b0be:	add    $0xffffffff,%ecx
   2b0c1:	mov    %ecx,0x3c(%r8)
   2b0c5:	mov    %r15,%r14
   2b0c8:	mov    %rdx,%r15
   2b0cb:	leaveq 
   2b0cc:	retq   
   2b0cd:	mov    0x3c(%r8),%eax
   2b0d1:	test   %eax,%eax
   2b0d3:	je     2b16a <decode_mcu_AC_first+0x10a>
   2b0d9:	mov    %rsi,%r10
   2b0dc:	mov    %rdi,%r11
   2b0df:	mov    %r12,%rdi
   2b0e2:	mov    %rdx,%r12
   2b0e5:	mov    %r15,%rdx
   2b0e8:	mov    %r14,%r15
   2b0eb:	mov    %r9,%rsi
   2b0ee:	mov    %rbx,%r9
   2b0f1:	mov    %rsi,%rbx
   2b0f4:	jmp    2b0a7 <decode_mcu_AC_first+0x47>
   2b0f6:	mov    0x28(%r8),%esi
   2b0fa:	test   %esi,%esi
   2b0fc:	jne    2b1be <decode_mcu_AC_first+0x15e>
   2b102:	mov    %r11,-0x58(%rbp)
   2b106:	mov    0x28(%r11),%rsi
   2b10a:	mov    (%rsi),%rsi
   2b10d:	mov    %rsi,-0x78(%rbp)
   2b111:	mov    0x28(%r11),%rsi
   2b115:	mov    0x8(%rsi),%rsi
   2b119:	mov    %rsi,-0x70(%rbp)
   2b11d:	mov    0x60(%r8),%r14
   2b121:	mov    0x18(%r8),%rsi
   2b125:	mov    %rdx,-0x38(%rbp)
   2b129:	movslq 0x20(%r8),%rdx
   2b12d:	mov    (%r10),%r10
   2b130:	mov    %r15,-0x30(%rbp)
   2b134:	mov    %r10,-0x50(%rbp)
   2b138:	movslq 0x20c(%r11),%r15
   2b13f:	mov    %r13,-0x28(%rbp)
   2b143:	mov    0x42e8e(%rip),%r13        # 6dfd8 <jpeg_natural_order@@LIBJPEG_6.2+0x129f4>
   2b14a:	mov    %rdi,-0x20(%rbp)
   2b14e:	lea    -0x78(%rbp),%rdi
   2b152:	mov    %r9,-0x18(%rbp)
   2b156:	mov    $0xffffffffffffffff,%r9
   2b15d:	mov    %r8,-0x8(%rbp)
   2b161:	mov    %r11,-0x10(%rbp)
   2b165:	jmpq   2b278 <decode_mcu_AC_first+0x218>
   2b16a:	mov    %rdi,%rax
   2b16d:	mov    %r8,-0x50(%rbp)
   2b171:	mov    %rdi,-0x48(%rbp)
   2b175:	mov    %rsi,-0x40(%rbp)
   2b179:	mov    %r9,-0x38(%rbp)
   2b17d:	mov    %rdx,-0x30(%rbp)
   2b181:	mov    %rax,%rdi
   2b184:	mov    %r15,%rax
   2b187:	mov    %r14,%r15
   2b18a:	mov    %rax,%r14
   2b18d:	callq  2c060 <process_restart>
   2b192:	test   %eax,%eax
   2b194:	je     2b2db <decode_mcu_AC_first+0x27b>
   2b19a:	mov    %r14,%rdx
   2b19d:	mov    %r12,%rdi
   2b1a0:	mov    %rbx,%r9
   2b1a3:	xor    %ecx,%ecx
   2b1a5:	mov    -0x30(%rbp),%r12
   2b1a9:	mov    -0x38(%rbp),%rbx
   2b1ad:	mov    -0x40(%rbp),%r10
   2b1b1:	mov    -0x48(%rbp),%r11
   2b1b5:	mov    -0x50(%rbp),%r8
   2b1b9:	jmpq   2b0a7 <decode_mcu_AC_first+0x47>
   2b1be:	lea    -0x1(%rsi),%ecx
   2b1c1:	mov    %r9,%rbx
   2b1c4:	mov    %rdi,%r12
   2b1c7:	mov    %ecx,0x28(%r8)
   2b1cb:	jmpq   2b0ba <decode_mcu_AC_first+0x5a>
   2b1d0:	cmp    %ecx,%edx
   2b1d2:	jge    2b21b <decode_mcu_AC_first+0x1bb>
   2b1d4:	mov    %rcx,%rax
   2b1d7:	mov    %r12,-0x40(%rbp)
   2b1db:	mov    %r14,-0x48(%rbp)
   2b1df:	mov    %r8,%r12
   2b1e2:	mov    %rcx,%r14
   2b1e5:	mov    %rax,%rcx
   2b1e8:	callq  4410 <jpeg_fill_bit_buffer@plt>
   2b1ed:	test   %eax,%eax
   2b1ef:	je     2b2e8 <decode_mcu_AC_first+0x288>
   2b1f5:	mov    %r14,%rcx
   2b1f8:	mov    %r12,%r8
   2b1fb:	mov    -0x68(%rbp),%rsi
   2b1ff:	movslq -0x60(%rbp),%rdx
   2b203:	mov    -0x48(%rbp),%r14
   2b207:	mov    $0xffffffffffffffff,%r9
   2b20e:	mov    -0x50(%rbp),%r10
   2b212:	mov    $0x1,%eax
   2b217:	mov    -0x40(%rbp),%r12
   2b21b:	mov    %rax,%rdi
   2b21e:	shl    %cl,%edi
   2b220:	add    $0xffffffff,%edi
   2b223:	sub    %ecx,%edx
   2b225:	mov    %rcx,%r11
   2b228:	mov    %rdx,%rcx
   2b22b:	mov    %rsi,%rdx
   2b22e:	shr    %cl,%rdx
   2b231:	and    %edx,%edi
   2b233:	mov    %rcx,%rdx
   2b236:	lea    0x1f(%r11),%ecx
   2b23a:	shl    %cl,%eax
   2b23c:	cmp    %edi,%eax
   2b23e:	jle    2b24c <decode_mcu_AC_first+0x1ec>
   2b240:	mov    %r11,%rcx
   2b243:	mov    %r9,%rax
   2b246:	shl    %cl,%eax
   2b248:	lea    0x1(%rdi,%rax,1),%edi
   2b24c:	movslq %edi,%rax
   2b24f:	mov    %rbx,%rcx
   2b252:	shl    %cl,%rax
   2b255:	mov    %rcx,%rbx
   2b258:	lea    (%r8,%r15,1),%ecx
   2b25c:	movslq %ecx,%rdi
   2b25f:	movslq 0x0(%r13,%rdi,4),%rdi
   2b264:	mov    %ax,(%r10,%rdi,2)
   2b269:	lea    -0x78(%rbp),%rdi
   2b26d:	mov    $0x1,%eax
   2b272:	lea    0x1(%rcx),%r15d
   2b276:	xor    %ecx,%ecx
   2b278:	cmp    %r12d,%r15d
   2b27b:	jg     2b314 <decode_mcu_AC_first+0x2b4>
   2b281:	cmp    $0x7,%edx
   2b284:	jle    2b354 <decode_mcu_AC_first+0x2f4>
   2b28a:	lea    0x38(%rdx),%ecx
   2b28d:	mov    %rsi,%r8
   2b290:	shr    %cl,%r8
   2b293:	movzbl %r8b,%ecx
   2b297:	movslq %ecx,%rcx
   2b29a:	movslq 0x128(%r14,%rcx,4),%rcx
   2b2a2:	mov    %rcx,%r8
   2b2a5:	sar    $0x8,%r8d
   2b2a9:	cmp    $0x8,%r8d
   2b2ad:	jle    2b381 <decode_mcu_AC_first+0x321>
   2b2b3:	mov    %r14,%rcx
   2b2b6:	callq  41c0 <jpeg_huff_decode@plt>
   2b2bb:	test   %eax,%eax
   2b2bd:	jns    2b38a <decode_mcu_AC_first+0x32a>
   2b2c3:	mov    -0x18(%rbp),%rbx
   2b2c7:	mov    -0x20(%rbp),%r12
   2b2cb:	mov    -0x28(%rbp),%r13
   2b2cf:	mov    -0x30(%rbp),%r14
   2b2d3:	mov    -0x38(%rbp),%r15
   2b2d7:	xor    %eax,%eax
   2b2d9:	leaveq 
   2b2da:	retq   
   2b2db:	mov    %r15,%rcx
   2b2de:	mov    %r14,%r15
   2b2e1:	mov    %rcx,%r14
   2b2e4:	xor    %eax,%eax
   2b2e6:	leaveq 
   2b2e7:	retq   
   2b2e8:	mov    -0x18(%rbp),%rbx
   2b2ec:	mov    -0x20(%rbp),%r12
   2b2f0:	mov    -0x28(%rbp),%r13
   2b2f4:	mov    -0x30(%rbp),%r14
   2b2f8:	mov    -0x38(%rbp),%r15
   2b2fc:	xor    %eax,%eax
   2b2fe:	leaveq 
   2b2ff:	retq   
   2b300:	mov    %r8,%rcx
   2b303:	mov    %rax,%rbx
   2b306:	shl    %cl,%ebx
   2b308:	test   %r11d,%r11d
   2b30b:	jne    2b3d8 <decode_mcu_AC_first+0x378>
   2b311:	lea    -0x1(%rbx),%ecx
   2b314:	mov    -0x78(%rbp),%rbx
   2b318:	mov    -0x10(%rbp),%r8
   2b31c:	mov    0x28(%r8),%rdi
   2b320:	mov    %rbx,(%rdi)
   2b323:	mov    -0x70(%rbp),%rbx
   2b327:	mov    0x28(%r8),%rdi
   2b32b:	mov    %rbx,0x8(%rdi)
   2b32f:	mov    -0x8(%rbp),%r8
   2b333:	mov    %rsi,0x18(%r8)
   2b337:	mov    %edx,0x20(%r8)
   2b33b:	mov    -0x18(%rbp),%rbx
   2b33f:	mov    -0x20(%rbp),%r12
   2b343:	mov    -0x28(%rbp),%r13
   2b347:	mov    -0x30(%rbp),%r15
   2b34b:	mov    -0x38(%rbp),%rdx
   2b34f:	jmpq   2b1c7 <decode_mcu_AC_first+0x167>
   2b354:	callq  4410 <jpeg_fill_bit_buffer@plt>
   2b359:	test   %eax,%eax
   2b35b:	je     2b3f6 <decode_mcu_AC_first+0x396>
   2b361:	mov    -0x68(%rbp),%rsi
   2b365:	movslq -0x60(%rbp),%rdx
   2b369:	cmp    $0x7,%edx
   2b36c:	jg     2b40e <decode_mcu_AC_first+0x3ae>
   2b372:	lea    -0x78(%rbp),%rdi
   2b376:	mov    $0x1,%r8d
   2b37c:	jmpq   2b2b3 <decode_mcu_AC_first+0x253>
   2b381:	sub    %r8d,%edx
   2b384:	movzbl %cl,%r11d
   2b388:	jmp    2b3a9 <decode_mcu_AC_first+0x349>
   2b38a:	mov    %rax,%r11
   2b38d:	mov    -0x68(%rbp),%rsi
   2b391:	movslq -0x60(%rbp),%rdx
   2b395:	mov    $0xffffffffffffffff,%r9
   2b39c:	lea    -0x78(%rbp),%rdi
   2b3a0:	mov    -0x50(%rbp),%r10
   2b3a4:	mov    $0x1,%eax
   2b3a9:	mov    %r11,%r8
   2b3ac:	sar    $0x4,%r8d
   2b3b0:	mov    %r11,%rcx
   2b3b3:	and    $0xf,%ecx
   2b3b6:	test   %ecx,%ecx
   2b3b8:	jg     2b1d0 <decode_mcu_AC_first+0x170>
   2b3be:	and    $0xfffffff0,%r11d
   2b3c2:	cmp    $0xf0,%r11d
   2b3c9:	jne    2b300 <decode_mcu_AC_first+0x2a0>
   2b3cf:	lea    0xf(%r15),%ecx
   2b3d3:	jmpq   2b272 <decode_mcu_AC_first+0x212>
   2b3d8:	cmp    %ecx,%edx
   2b3da:	jl     2b427 <decode_mcu_AC_first+0x3c7>
   2b3dc:	sub    %ecx,%edx
   2b3de:	mov    %rdx,%rcx
   2b3e1:	mov    %rsi,%rdi
   2b3e4:	shr    %cl,%rdi
   2b3e7:	mov    %rcx,%rdx
   2b3ea:	lea    -0x1(%rbx),%ecx
   2b3ed:	and    %edi,%ecx
   2b3ef:	add    %ecx,%ebx
   2b3f1:	jmpq   2b311 <decode_mcu_AC_first+0x2b1>
   2b3f6:	mov    -0x18(%rbp),%rbx
   2b3fa:	mov    -0x20(%rbp),%r12
   2b3fe:	mov    -0x28(%rbp),%r13
   2b402:	mov    -0x30(%rbp),%r14
   2b406:	mov    -0x38(%rbp),%r15
   2b40a:	xor    %eax,%eax
   2b40c:	leaveq 
   2b40d:	retq   
   2b40e:	mov    $0xffffffffffffffff,%r9
   2b415:	lea    -0x78(%rbp),%rdi
   2b419:	mov    -0x50(%rbp),%r10
   2b41d:	mov    $0x1,%eax
   2b422:	jmpq   2b28a <decode_mcu_AC_first+0x22a>
   2b427:	mov    %rax,%r12
   2b42a:	mov    %rcx,%r13
   2b42d:	callq  4410 <jpeg_fill_bit_buffer@plt>
   2b432:	test   %eax,%eax
   2b434:	jne    2b44e <decode_mcu_AC_first+0x3ee>
   2b436:	mov    -0x18(%rbp),%rbx
   2b43a:	mov    -0x20(%rbp),%r12
   2b43e:	mov    -0x28(%rbp),%r13
   2b442:	mov    -0x30(%rbp),%r14
   2b446:	mov    -0x38(%rbp),%r15
   2b44a:	xor    %eax,%eax
   2b44c:	leaveq 
   2b44d:	retq   
   2b44e:	mov    %r12,%rax
   2b451:	mov    %r13,%rcx
   2b454:	mov    -0x68(%rbp),%rsi
   2b458:	movslq -0x60(%rbp),%rdx
   2b45c:	jmpq   2b3dc <decode_mcu_AC_first+0x37c>
   2b461:	data16 nopw %cs:0x0(%rax,%rax,1)
   2b46c:	nopl   0x0(%rax)

000000000002b470 <decode_mcu_DC_refine>:
   2b470:	push   %rbp
   2b471:	mov    %rsp,%rbp
   2b474:	sub    $0x60,%rsp
   2b478:	mov    0x250(%rdi),%rax
   2b47f:	mov    %rax,-0x20(%rbp)
   2b483:	mov    0x218(%rdi),%ecx
   2b489:	xor    %r8d,%r8d
   2b48c:	mov    0x170(%rdi),%edx
   2b492:	test   %edx,%edx
   2b494:	jne    2b4f9 <decode_mcu_DC_refine+0x89>
   2b496:	mov    %r14,%rdx
   2b499:	mov    %rbx,%r9
   2b49c:	mov    %r8,%rbx
   2b49f:	mov    %r15,%r8
   2b4a2:	mov    %r13,%r15
   2b4a5:	mov    %rdi,%r13
   2b4a8:	mov    %r12,%r10
   2b4ab:	mov    %rsi,%r12
   2b4ae:	mov    %r13,-0x38(%rbp)
   2b4b2:	mov    0x28(%r13),%rsi
   2b4b6:	mov    (%rsi),%rsi
   2b4b9:	mov    %rsi,-0x58(%rbp)
   2b4bd:	mov    0x28(%r13),%rsi
   2b4c1:	mov    0x8(%rsi),%rsi
   2b4c5:	mov    %rsi,-0x50(%rbp)
   2b4c9:	mov    0x18(%rax),%rsi
   2b4cd:	movslq 0x20(%rax),%r11
   2b4d1:	mov    $0x1,%eax
   2b4d6:	mov    %rax,%r14
   2b4d9:	shl    %cl,%r14d
   2b4dc:	lea    -0x58(%rbp),%rdi
   2b4e0:	mov    %r9,-0x8(%rbp)
   2b4e4:	mov    %r10,-0x10(%rbp)
   2b4e8:	mov    %r15,-0x18(%rbp)
   2b4ec:	mov    %rdx,-0x28(%rbp)
   2b4f0:	mov    %r8,-0x30(%rbp)
   2b4f4:	mov    %r11,%rcx
   2b4f7:	jmp    2b54c <decode_mcu_DC_refine+0xdc>
   2b4f9:	mov    0x3c(%rax),%edx
   2b4fc:	test   %edx,%edx
   2b4fe:	je     2b596 <decode_mcu_DC_refine+0x126>
   2b504:	mov    %r14,%rdx
   2b507:	mov    %rbx,%r9
   2b50a:	mov    %r8,%rbx
   2b50d:	mov    %r15,%r8
   2b510:	mov    %r13,%r15
   2b513:	mov    %rdi,%r13
   2b516:	mov    %r12,%r10
   2b519:	mov    %rsi,%r12
   2b51c:	jmp    2b4ae <decode_mcu_DC_refine+0x3e>
   2b51e:	movslq %ebx,%rdx
   2b521:	mov    (%r12,%rdx,8),%r15
   2b525:	test   %ecx,%ecx
   2b527:	jle    2b5dd <decode_mcu_DC_refine+0x16d>
   2b52d:	add    $0xffffffff,%ecx
   2b530:	mov    %rsi,%rdx
   2b533:	shr    %cl,%rdx
   2b536:	and    $0x1,%edx
   2b539:	test   %edx,%edx
   2b53b:	jle    2b549 <decode_mcu_DC_refine+0xd9>
   2b53d:	movswq (%r15),%rdx
   2b541:	or     %r14w,%dx
   2b545:	mov    %dx,(%r15)
   2b549:	add    $0x1,%ebx
   2b54c:	cmp    0x1e0(%r13),%ebx
   2b553:	jl     2b51e <decode_mcu_DC_refine+0xae>
   2b555:	mov    -0x58(%rbp),%rdi
   2b559:	mov    0x28(%r13),%rdx
   2b55d:	mov    %rdi,(%rdx)
   2b560:	mov    -0x50(%rbp),%rdi
   2b564:	mov    0x28(%r13),%rdx
   2b568:	mov    %rdi,0x8(%rdx)
   2b56c:	mov    -0x20(%rbp),%rdx
   2b570:	mov    %rsi,0x18(%rdx)
   2b574:	mov    %ecx,0x20(%rdx)
   2b577:	mov    0x3c(%rdx),%ecx
   2b57a:	add    $0xffffffff,%ecx
   2b57d:	mov    %ecx,0x3c(%rdx)
   2b580:	mov    -0x30(%rbp),%r15
   2b584:	mov    -0x28(%rbp),%r14
   2b588:	mov    -0x18(%rbp),%r13
   2b58c:	mov    -0x10(%rbp),%r12
   2b590:	mov    -0x8(%rbp),%rbx
   2b594:	leaveq 
   2b595:	retq   
   2b596:	mov    %rdi,%rax
   2b599:	mov    %rdi,-0x28(%rbp)
   2b59d:	mov    %rcx,-0x18(%rbp)
   2b5a1:	mov    %rsi,-0x30(%rbp)
   2b5a5:	mov    %rax,%rdi
   2b5a8:	mov    %r15,%rax
   2b5ab:	mov    %r13,%r15
   2b5ae:	mov    %rax,%r13
   2b5b1:	callq  2c060 <process_restart>
   2b5b6:	test   %eax,%eax
   2b5b8:	je     2b602 <decode_mcu_DC_refine+0x192>
   2b5ba:	mov    %r14,%rdx
   2b5bd:	mov    %r13,%r8
   2b5c0:	mov    %rbx,%r9
   2b5c3:	mov    %r12,%r10
   2b5c6:	xor    %ebx,%ebx
   2b5c8:	mov    -0x30(%rbp),%r12
   2b5cc:	mov    -0x18(%rbp),%rcx
   2b5d0:	mov    -0x20(%rbp),%rax
   2b5d4:	mov    -0x28(%rbp),%r13
   2b5d8:	jmpq   2b4ae <decode_mcu_DC_refine+0x3e>
   2b5dd:	mov    %rcx,%rdx
   2b5e0:	mov    %rax,%rcx
   2b5e3:	callq  4410 <jpeg_fill_bit_buffer@plt>
   2b5e8:	test   %eax,%eax
   2b5ea:	je     2b60f <decode_mcu_DC_refine+0x19f>
   2b5ec:	mov    -0x48(%rbp),%rsi
   2b5f0:	movslq -0x40(%rbp),%rcx
   2b5f4:	mov    $0x1,%eax
   2b5f9:	lea    -0x58(%rbp),%rdi
   2b5fd:	jmpq   2b52d <decode_mcu_DC_refine+0xbd>
   2b602:	mov    %r15,%rcx
   2b605:	mov    %r13,%r15
   2b608:	mov    %rcx,%r13
   2b60b:	xor    %eax,%eax
   2b60d:	leaveq 
   2b60e:	retq   
   2b60f:	mov    -0x30(%rbp),%r15
   2b613:	mov    -0x28(%rbp),%r14
   2b617:	mov    -0x18(%rbp),%r13
   2b61b:	mov    -0x10(%rbp),%r12
   2b61f:	mov    -0x8(%rbp),%rbx
   2b623:	xor    %eax,%eax
   2b625:	leaveq 
   2b626:	retq   
   2b627:	nopw   0x0(%rax,%rax,1)

000000000002b630 <decode_mcu_AC_refine>:
   2b630:	push   %rbp
   2b631:	mov    %rsp,%rbp
   2b634:	sub    $0x1b0,%rsp
   2b63b:	mov    %rdi,-0x78(%rbp)
   2b63f:	mov    0x250(%rdi),%rdx
   2b646:	movslq 0x210(%rdi),%r9
   2b64d:	mov    %r9,-0x70(%rbp)
   2b651:	mov    0x218(%rdi),%ecx
   2b657:	xor    %eax,%eax
   2b659:	mov    %rax,-0x40(%rbp)
   2b65d:	mov    0x170(%rdi),%eax
   2b663:	test   %eax,%eax
   2b665:	jne    2b69a <decode_mcu_AC_refine+0x6a>
   2b667:	mov    %r12,%r8
   2b66a:	mov    %r14,%r10
   2b66d:	mov    %rdi,%r14
   2b670:	mov    %r13,%rdi
   2b673:	mov    %rbx,%r13
   2b676:	mov    $0x1,%eax
   2b67b:	movslq 0x10(%rdx),%rbx
   2b67f:	test   %ebx,%ebx
   2b681:	je     2b6b6 <decode_mcu_AC_refine+0x86>
   2b683:	mov    %r10,%r14
   2b686:	mov    0x3c(%rdx),%ecx
   2b689:	add    $0xffffffff,%ecx
   2b68c:	mov    %ecx,0x3c(%rdx)
   2b68f:	mov    %r13,%rbx
   2b692:	mov    %rdi,%r13
   2b695:	mov    %r8,%r12
   2b698:	leaveq 
   2b699:	retq   
   2b69a:	mov    0x3c(%rdx),%eax
   2b69d:	test   %eax,%eax
   2b69f:	je     2b78d <decode_mcu_AC_refine+0x15d>
   2b6a5:	mov    %r12,%r8
   2b6a8:	mov    %r14,%r10
   2b6ab:	mov    %rdi,%r14
   2b6ae:	mov    %r13,%rdi
   2b6b1:	mov    %rbx,%r13
   2b6b4:	jmp    2b676 <decode_mcu_AC_refine+0x46>
   2b6b6:	mov    %r14,-0x188(%rbp)
   2b6bd:	mov    0x28(%r14),%rax
   2b6c1:	mov    (%rax),%rax
   2b6c4:	mov    %rax,-0x1a8(%rbp)
   2b6cb:	mov    0x28(%r14),%rax
   2b6cf:	mov    0x8(%rax),%rax
   2b6d3:	mov    %rax,-0x1a0(%rbp)
   2b6da:	mov    0x60(%rdx),%r11
   2b6de:	mov    %r11,-0x38(%rbp)
   2b6e2:	mov    (%rsi),%r12
   2b6e5:	mov    0x18(%rdx),%rsi
   2b6e9:	movslq 0x20(%rdx),%rax
   2b6ed:	movslq 0x20c(%r14),%rbx
   2b6f4:	mov    %r15,-0x30(%rbp)
   2b6f8:	mov    0x428d9(%rip),%r15        # 6dfd8 <jpeg_natural_order@@LIBJPEG_6.2+0x129f4>
   2b6ff:	mov    %r15,-0x60(%rbp)
   2b703:	mov    %r10,-0x28(%rbp)
   2b707:	mov    $0x1,%r10d
   2b70d:	shl    %cl,%r10d
   2b710:	mov    %r10,-0x80(%rbp)
   2b714:	xchg   %rax,%rdx
   2b716:	mov    $0xffffffffffffffff,%r10
   2b71d:	shl    %cl,%r10d
   2b720:	mov    %r10,-0x50(%rbp)
   2b724:	mov    0x28(%rax),%ecx
   2b727:	test   %ecx,%ecx
   2b729:	je     2b7cd <decode_mcu_AC_refine+0x19d>
   2b72f:	mov    %rdi,-0x20(%rbp)
   2b733:	mov    %rcx,%r10
   2b736:	mov    %rdx,%rcx
   2b739:	mov    %rax,%rdx
   2b73c:	lea    -0x1a8(%rbp),%rdi
   2b743:	mov    $0x1,%eax
   2b748:	xor    %r11d,%r11d
   2b74b:	test   %r10d,%r10d
   2b74e:	jne    2b7f8 <decode_mcu_AC_refine+0x1c8>
   2b754:	mov    -0x1a8(%rbp),%rbx
   2b75b:	mov    0x28(%r14),%rdi
   2b75f:	mov    %rbx,(%rdi)
   2b762:	mov    -0x1a0(%rbp),%rbx
   2b769:	mov    0x28(%r14),%rdi
   2b76d:	mov    %rbx,0x8(%rdi)
   2b771:	mov    %rsi,0x18(%rdx)
   2b775:	mov    %ecx,0x20(%rdx)
   2b778:	mov    %r11d,0x28(%rdx)
   2b77c:	mov    -0x20(%rbp),%rdi
   2b780:	mov    -0x28(%rbp),%r14
   2b784:	mov    -0x30(%rbp),%r15
   2b788:	jmpq   2b686 <decode_mcu_AC_refine+0x56>
   2b78d:	mov    %rdx,-0x80(%rbp)
   2b791:	mov    %rsi,-0x60(%rbp)
   2b795:	mov    %rcx,-0x68(%rbp)
   2b799:	mov    %r13,%rax
   2b79c:	mov    %rbx,%r13
   2b79f:	mov    %rax,%rbx
   2b7a2:	callq  2c060 <process_restart>
   2b7a7:	test   %eax,%eax
   2b7a9:	je     2b815 <decode_mcu_AC_refine+0x1e5>
   2b7ab:	mov    %rbx,%rdi
   2b7ae:	mov    %r12,%r8
   2b7b1:	mov    %r14,%r10
   2b7b4:	mov    -0x70(%rbp),%r9
   2b7b8:	mov    -0x68(%rbp),%rcx
   2b7bc:	mov    -0x60(%rbp),%rsi
   2b7c0:	mov    -0x78(%rbp),%r14
   2b7c4:	mov    -0x80(%rbp),%rdx
   2b7c8:	jmpq   2b676 <decode_mcu_AC_refine+0x46>
   2b7cd:	mov    %rax,-0x8(%rbp)
   2b7d1:	mov    %r13,-0x10(%rbp)
   2b7d5:	mov    %r8,-0x18(%rbp)
   2b7d9:	mov    %rdi,-0x20(%rbp)
   2b7dd:	mov    %rdx,%rcx
   2b7e0:	mov    %r11,%r8
   2b7e3:	lea    -0x1a8(%rbp),%rdi
   2b7ea:	mov    -0x80(%rbp),%r13
   2b7ee:	mov    $0x1,%eax
   2b7f3:	xor    %r11d,%r11d
   2b7f6:	jmp    2b853 <decode_mcu_AC_refine+0x223>
   2b7f8:	mov    %rdx,-0x70(%rbp)
   2b7fc:	mov    %r13,-0x10(%rbp)
   2b800:	mov    %r8,-0x18(%rbp)
   2b804:	mov    %r10,-0x48(%rbp)
   2b808:	mov    -0x50(%rbp),%rdx
   2b80c:	mov    -0x80(%rbp),%r13
   2b810:	jmpq   2b982 <decode_mcu_AC_refine+0x352>
   2b815:	mov    %r13,%rcx
   2b818:	mov    %rbx,%r13
   2b81b:	mov    %rcx,%rbx
   2b81e:	xor    %eax,%eax
   2b820:	leaveq 
   2b821:	retq   
   2b822:	movslq %ebx,%rdx
   2b825:	movslq (%r15,%rdx,4),%r8
   2b829:	mov    %r11w,(%r12,%r8,2)
   2b82e:	mov    -0x40(%rbp),%r11
   2b832:	movslq %r11d,%rdx
   2b835:	mov    %r8d,-0x180(%rbp,%rdx,4)
   2b83d:	lea    0x1(%r11),%edx
   2b841:	mov    %rdx,-0x40(%rbp)
   2b845:	add    $0x1,%ebx
   2b848:	mov    -0x38(%rbp),%r8
   2b84c:	xor    %r11d,%r11d
   2b84f:	mov    -0x78(%rbp),%r14
   2b853:	cmp    %r9d,%ebx
   2b856:	jg     2b9a8 <decode_mcu_AC_refine+0x378>
   2b85c:	cmp    $0x7,%ecx
   2b85f:	jle    2b9bc <decode_mcu_AC_refine+0x38c>
   2b865:	mov    %rcx,%rdx
   2b868:	lea    0x38(%rdx),%ecx
   2b86b:	mov    %rsi,%rax
   2b86e:	shr    %cl,%rax
   2b871:	movzbl %al,%eax
   2b874:	movslq %eax,%rax
   2b877:	movslq 0x128(%r8,%rax,4),%rax
   2b87f:	mov    %rax,%rcx
   2b882:	sar    $0x8,%ecx
   2b885:	cmp    $0x8,%ecx
   2b888:	jle    2ba01 <decode_mcu_AC_refine+0x3d1>
   2b88e:	mov    %rcx,%rax
   2b891:	mov    %rdx,%rcx
   2b894:	mov    %rcx,%rdx
   2b897:	mov    %r8,%rcx
   2b89a:	mov    %rax,%r8
   2b89d:	callq  41c0 <jpeg_huff_decode@plt>
   2b8a2:	test   %eax,%eax
   2b8a4:	js     2ba10 <decode_mcu_AC_refine+0x3e0>
   2b8aa:	mov    %r14,%r8
   2b8ad:	mov    -0x198(%rbp),%rsi
   2b8b4:	movslq -0x190(%rbp),%rcx
   2b8bb:	mov    -0x50(%rbp),%r10
   2b8bf:	lea    -0x1a8(%rbp),%rdi
   2b8c6:	xor    %r11d,%r11d
   2b8c9:	mov    -0x70(%rbp),%r9
   2b8cd:	mov    %rax,%r14
   2b8d0:	sar    $0x4,%r14d
   2b8d4:	mov    %rax,%rdx
   2b8d7:	and    $0xf,%edx
   2b8da:	test   %edx,%edx
   2b8dc:	jg     2ba19 <decode_mcu_AC_refine+0x3e9>
   2b8e2:	and    $0xfffffff0,%eax
   2b8e5:	cmp    $0xf0,%eax
   2b8ea:	jne    2ba95 <decode_mcu_AC_refine+0x465>
   2b8f0:	mov    $0x1,%eax
   2b8f5:	jmpq   2bae1 <decode_mcu_AC_refine+0x4b1>
   2b8fa:	movslq %ebx,%r8
   2b8fd:	movslq (%r15,%r8,4),%r14
   2b901:	movswq (%r12,%r14,2),%r8
   2b906:	test   %r8w,%r8w
   2b90a:	je     2b97f <decode_mcu_AC_refine+0x34f>
   2b90c:	test   %ecx,%ecx
   2b90e:	jg     2b94b <decode_mcu_AC_refine+0x31b>
   2b910:	mov    %rcx,%rdx
   2b913:	mov    %rax,%rcx
   2b916:	mov    %r9,%r15
   2b919:	callq  4410 <jpeg_fill_bit_buffer@plt>
   2b91e:	test   %eax,%eax
   2b920:	je     2bb24 <decode_mcu_AC_refine+0x4f4>
   2b926:	mov    %r15,%r9
   2b929:	mov    -0x198(%rbp),%rsi
   2b930:	movslq -0x190(%rbp),%rcx
   2b937:	mov    -0x60(%rbp),%r15
   2b93b:	mov    -0x50(%rbp),%rdx
   2b93f:	lea    -0x1a8(%rbp),%rdi
   2b946:	mov    $0x1,%eax
   2b94b:	add    $0xffffffff,%ecx
   2b94e:	mov    %rsi,%r8
   2b951:	shr    %cl,%r8
   2b954:	and    $0x1,%r8d
   2b958:	test   %r8d,%r8d
   2b95b:	jle    2b97f <decode_mcu_AC_refine+0x34f>
   2b95d:	movswq (%r12,%r14,2),%r8
   2b962:	mov    %r13,%r10
   2b965:	and    %r8d,%r10d
   2b968:	test   %r10d,%r10d
   2b96b:	jne    2b97f <decode_mcu_AC_refine+0x34f>
   2b96d:	test   %r8w,%r8w
   2b971:	jns    2bb2a <decode_mcu_AC_refine+0x4fa>
   2b977:	add    %edx,%r8d
   2b97a:	mov    %r8w,(%r12,%r14,2)
   2b97f:	add    $0x1,%ebx
   2b982:	cmp    %ebx,%r9d
   2b985:	jge    2b8fa <decode_mcu_AC_refine+0x2ca>
   2b98b:	mov    -0x48(%rbp),%rdx
   2b98f:	lea    -0x1(%rdx),%r11d
   2b993:	mov    -0x18(%rbp),%r8
   2b997:	mov    -0x10(%rbp),%r13
   2b99b:	mov    -0x78(%rbp),%r14
   2b99f:	mov    -0x70(%rbp),%rdx
   2b9a3:	jmpq   2b754 <decode_mcu_AC_refine+0x124>
   2b9a8:	mov    -0x18(%rbp),%r8
   2b9ac:	mov    -0x10(%rbp),%r13
   2b9b0:	mov    -0x8(%rbp),%rdx
   2b9b4:	mov    %r11,%r10
   2b9b7:	jmpq   2b74b <decode_mcu_AC_refine+0x11b>
   2b9bc:	mov    %rcx,%rdx
   2b9bf:	mov    %r11,%rcx
   2b9c2:	mov    %r8,%r13
   2b9c5:	callq  4410 <jpeg_fill_bit_buffer@plt>
   2b9ca:	test   %eax,%eax
   2b9cc:	je     2bb37 <decode_mcu_AC_refine+0x507>
   2b9d2:	mov    -0x198(%rbp),%rsi
   2b9d9:	movslq -0x190(%rbp),%rcx
   2b9e0:	cmp    $0x7,%ecx
   2b9e3:	jg     2bb3d <decode_mcu_AC_refine+0x50d>
   2b9e9:	mov    %r13,%r8
   2b9ec:	lea    -0x1a8(%rbp),%rdi
   2b9f3:	mov    -0x80(%rbp),%r13
   2b9f7:	mov    $0x1,%eax
   2b9fc:	jmpq   2b894 <decode_mcu_AC_refine+0x264>
   2ba01:	neg    %ecx
   2ba03:	add    %edx,%ecx
   2ba05:	movzbl %al,%eax
   2ba08:	mov    %r14,%r8
   2ba0b:	jmpq   2b8cd <decode_mcu_AC_refine+0x29d>
   2ba10:	mov    -0x40(%rbp),%rax
   2ba14:	jmpq   2bb70 <decode_mcu_AC_refine+0x540>
   2ba19:	cmp    $0x1,%edx
   2ba1c:	je     2ba6f <decode_mcu_AC_refine+0x43f>
   2ba1e:	mov    (%r8),%rax
   2ba21:	movl   $0x76,0x28(%rax)
   2ba28:	mov    (%r8),%rax
   2ba2b:	mov    0x8(%rax),%rdx
   2ba2f:	mov    %r8,%rdi
   2ba32:	mov    $0xffffffffffffffff,%rax
   2ba39:	mov    %rbx,-0x68(%rbp)
   2ba3d:	mov    %r12,-0x58(%rbp)
   2ba41:	mov    %rcx,%rbx
   2ba44:	mov    %rsi,%r12
   2ba47:	mov    %rax,%rsi
   2ba4a:	mov    %r10,%r15
   2ba4d:	callq  *%rdx
   2ba4f:	mov    %rbx,%rcx
   2ba52:	mov    %r12,%rsi
   2ba55:	mov    %r15,%r10
   2ba58:	mov    -0x58(%rbp),%r12
   2ba5c:	mov    -0x60(%rbp),%r15
   2ba60:	mov    -0x68(%rbp),%rbx
   2ba64:	lea    -0x1a8(%rbp),%rdi
   2ba6b:	mov    -0x70(%rbp),%r9
   2ba6f:	test   %ecx,%ecx
   2ba71:	jle    2bb8c <decode_mcu_AC_refine+0x55c>
   2ba77:	add    $0xffffffff,%ecx
   2ba7a:	mov    %rsi,%rax
   2ba7d:	shr    %cl,%rax
   2ba80:	and    $0x1,%eax
   2ba83:	test   %eax,%eax
   2ba85:	jg     2bbd0 <decode_mcu_AC_refine+0x5a0>
   2ba8b:	mov    $0x1,%eax
   2ba90:	mov    %r10,%r11
   2ba93:	jmp    2bae1 <decode_mcu_AC_refine+0x4b1>
   2ba95:	mov    %rcx,%rdx
   2ba98:	mov    %r14,%rcx
   2ba9b:	mov    %r8,%r14
   2ba9e:	mov    $0x1,%r10d
   2baa4:	shl    %cl,%r10d
   2baa7:	test   %eax,%eax
   2baa9:	jne    2bbdd <decode_mcu_AC_refine+0x5ad>
   2baaf:	mov    %rdx,%rcx
   2bab2:	mov    -0x18(%rbp),%r8
   2bab6:	mov    -0x10(%rbp),%r13
   2baba:	mov    $0x1,%eax
   2babf:	mov    -0x8(%rbp),%rdx
   2bac3:	jmpq   2b74b <decode_mcu_AC_refine+0x11b>
   2bac8:	add    $0xffffffff,%r14d
   2bacc:	test   %r14d,%r14d
   2bacf:	js     2bc13 <decode_mcu_AC_refine+0x5e3>
   2bad5:	add    $0x1,%ebx
   2bad8:	cmp    %r9d,%ebx
   2badb:	jg     2bc13 <decode_mcu_AC_refine+0x5e3>
   2bae1:	movslq %ebx,%rdx
   2bae4:	movslq (%r15,%rdx,4),%r8
   2bae8:	movswq (%r12,%r8,2),%rdx
   2baed:	test   %dx,%dx
   2baf0:	je     2bac8 <decode_mcu_AC_refine+0x498>
   2baf2:	test   %ecx,%ecx
   2baf4:	jle    2bc25 <decode_mcu_AC_refine+0x5f5>
   2bafa:	add    $0xffffffff,%ecx
   2bafd:	mov    %rsi,%rdx
   2bb00:	shr    %cl,%rdx
   2bb03:	and    $0x1,%edx
   2bb06:	test   %edx,%edx
   2bb08:	jle    2bad5 <decode_mcu_AC_refine+0x4a5>
   2bb0a:	movswq (%r12,%r8,2),%rax
   2bb0f:	mov    %rax,%rdx
   2bb12:	and    %r13d,%edx
   2bb15:	test   %edx,%edx
   2bb17:	je     2bc44 <decode_mcu_AC_refine+0x614>
   2bb1d:	mov    $0x1,%eax
   2bb22:	jmp    2bad5 <decode_mcu_AC_refine+0x4a5>
   2bb24:	mov    -0x40(%rbp),%rax
   2bb28:	jmp    2bb70 <decode_mcu_AC_refine+0x540>
   2bb2a:	add    %r13d,%r8d
   2bb2d:	mov    %r8w,(%r12,%r14,2)
   2bb32:	jmpq   2b97f <decode_mcu_AC_refine+0x34f>
   2bb37:	mov    -0x40(%rbp),%rax
   2bb3b:	jmp    2bb70 <decode_mcu_AC_refine+0x540>
   2bb3d:	mov    %r13,%r8
   2bb40:	mov    -0x50(%rbp),%r10
   2bb44:	lea    -0x1a8(%rbp),%rdi
   2bb4b:	mov    -0x80(%rbp),%r13
   2bb4f:	xor    %r11d,%r11d
   2bb52:	mov    -0x70(%rbp),%r9
   2bb56:	jmpq   2b865 <decode_mcu_AC_refine+0x235>
   2bb5b:	add    $0xffffffff,%eax
   2bb5e:	movslq %eax,%rcx
   2bb61:	movslq -0x180(%rbp,%rcx,4),%rcx
   2bb69:	movw   $0x0,(%r12,%rcx,2)
   2bb70:	test   %eax,%eax
   2bb72:	jg     2bb5b <decode_mcu_AC_refine+0x52b>
   2bb74:	mov    -0x20(%rbp),%r13
   2bb78:	mov    -0x18(%rbp),%r12
   2bb7c:	mov    -0x10(%rbp),%rbx
   2bb80:	mov    -0x28(%rbp),%r14
   2bb84:	mov    -0x30(%rbp),%r15
   2bb88:	xor    %eax,%eax
   2bb8a:	leaveq 
   2bb8b:	retq   
   2bb8c:	mov    $0x1,%eax
   2bb91:	mov    %r12,-0x58(%rbp)
   2bb95:	mov    %rcx,%rdx
   2bb98:	mov    %rax,%rcx
   2bb9b:	mov    %r10,%r12
   2bb9e:	callq  4410 <jpeg_fill_bit_buffer@plt>
   2bba3:	test   %eax,%eax
   2bba5:	je     2bc5b <decode_mcu_AC_refine+0x62b>
   2bbab:	mov    %r12,%r10
   2bbae:	mov    -0x198(%rbp),%rsi
   2bbb5:	movslq -0x190(%rbp),%rcx
   2bbbc:	mov    -0x58(%rbp),%r12
   2bbc0:	lea    -0x1a8(%rbp),%rdi
   2bbc7:	mov    -0x70(%rbp),%r9
   2bbcb:	jmpq   2ba77 <decode_mcu_AC_refine+0x447>
   2bbd0:	mov    $0x1,%eax
   2bbd5:	mov    %r13,%r11
   2bbd8:	jmpq   2bae1 <decode_mcu_AC_refine+0x4b1>
   2bbdd:	cmp    %ecx,%edx
   2bbdf:	jl     2bc68 <decode_mcu_AC_refine+0x638>
   2bbe5:	mov    %rcx,%r13
   2bbe8:	mov    %rdx,%rcx
   2bbeb:	sub    %r13d,%ecx
   2bbee:	mov    %rsi,%rdx
   2bbf1:	shr    %cl,%rdx
   2bbf4:	lea    -0x1(%r10),%eax
   2bbf8:	and    %edx,%eax
   2bbfa:	add    %eax,%r10d
   2bbfd:	mov    -0x18(%rbp),%r8
   2bc01:	mov    -0x10(%rbp),%r13
   2bc05:	mov    $0x1,%eax
   2bc0a:	mov    -0x8(%rbp),%rdx
   2bc0e:	jmpq   2b74b <decode_mcu_AC_refine+0x11b>
   2bc13:	test   %r11d,%r11d
   2bc16:	jne    2b822 <decode_mcu_AC_refine+0x1f2>
   2bc1c:	mov    -0x40(%rbp),%rdx
   2bc20:	jmpq   2b841 <decode_mcu_AC_refine+0x211>
   2bc25:	mov    %r11,-0x48(%rbp)
   2bc29:	mov    %rcx,%rdx
   2bc2c:	mov    %rax,%rcx
   2bc2f:	mov    %r8,%r15
   2bc32:	callq  4410 <jpeg_fill_bit_buffer@plt>
   2bc37:	test   %eax,%eax
   2bc39:	jne    2bc83 <decode_mcu_AC_refine+0x653>
   2bc3b:	mov    -0x40(%rbp),%rax
   2bc3f:	jmpq   2bb70 <decode_mcu_AC_refine+0x540>
   2bc44:	test   %ax,%ax
   2bc47:	jns    2bcb5 <decode_mcu_AC_refine+0x685>
   2bc49:	add    %r10d,%eax
   2bc4c:	mov    %ax,(%r12,%r8,2)
   2bc51:	mov    $0x1,%eax
   2bc56:	jmpq   2bad5 <decode_mcu_AC_refine+0x4a5>
   2bc5b:	mov    -0x58(%rbp),%r12
   2bc5f:	mov    -0x40(%rbp),%rax
   2bc63:	jmpq   2bb70 <decode_mcu_AC_refine+0x540>
   2bc68:	mov    %r9,%r14
   2bc6b:	mov    %r10,%r15
   2bc6e:	mov    %rcx,%r13
   2bc71:	callq  4410 <jpeg_fill_bit_buffer@plt>
   2bc76:	test   %eax,%eax
   2bc78:	jne    2bcc7 <decode_mcu_AC_refine+0x697>
   2bc7a:	mov    -0x40(%rbp),%rax
   2bc7e:	jmpq   2bb70 <decode_mcu_AC_refine+0x540>
   2bc83:	mov    %r15,%r8
   2bc86:	mov    -0x198(%rbp),%rsi
   2bc8d:	movslq -0x190(%rbp),%rcx
   2bc94:	mov    -0x48(%rbp),%r11
   2bc98:	mov    -0x60(%rbp),%r15
   2bc9c:	mov    -0x50(%rbp),%r10
   2bca0:	lea    -0x1a8(%rbp),%rdi
   2bca7:	mov    $0x1,%eax
   2bcac:	mov    -0x70(%rbp),%r9
   2bcb0:	jmpq   2bafa <decode_mcu_AC_refine+0x4ca>
   2bcb5:	add    %r13d,%eax
   2bcb8:	mov    %ax,(%r12,%r8,2)
   2bcbd:	mov    $0x1,%eax
   2bcc2:	jmpq   2bad5 <decode_mcu_AC_refine+0x4a5>
   2bcc7:	mov    %r14,%r9
   2bcca:	mov    %r15,%r10
   2bccd:	mov    -0x198(%rbp),%rsi
   2bcd4:	movslq -0x190(%rbp),%rcx
   2bcdb:	mov    -0x60(%rbp),%r15
   2bcdf:	lea    -0x1a8(%rbp),%rdi
   2bce6:	xor    %r11d,%r11d
   2bce9:	mov    -0x78(%rbp),%r14
   2bced:	jmpq   2bbeb <decode_mcu_AC_refine+0x5bb>
   2bcf2:	data16 nopw %cs:0x0(%rax,%rax,1)
   2bcfd:	nopl   (%rax)

000000000002bd00 <start_pass_phuff_decoder>:
   2bd00:	push   %rbp
   2bd01:	mov    %rsp,%rbp
   2bd04:	sub    $0x40,%rsp
   2bd08:	mov    %rbx,-0x8(%rbp)
   2bd0c:	mov    %r12,-0x10(%rbp)
   2bd10:	mov    %r13,-0x18(%rbp)
   2bd14:	mov    %r14,-0x20(%rbp)
   2bd18:	mov    %r15,-0x28(%rbp)
   2bd1c:	mov    0x250(%rdi),%rax
   2bd23:	mov    %rax,-0x30(%rbp)
   2bd27:	mov    $0x1,%esi
   2bd2c:	xor    %eax,%eax
   2bd2e:	movslq 0x20c(%rdi),%rdx
   2bd35:	test   %edx,%edx
   2bd37:	je     2bd3e <start_pass_phuff_decoder+0x3e>
   2bd39:	mov    %rax,%r14
   2bd3c:	jmp    2bd41 <start_pass_phuff_decoder+0x41>
   2bd3e:	mov    %rsi,%r14
   2bd41:	mov    %r14,-0x38(%rbp)
   2bd45:	test   %r14d,%r14d
   2bd48:	jg     2bd69 <start_pass_phuff_decoder+0x69>
   2bd4a:	movslq 0x210(%rdi),%rcx
   2bd51:	cmp    %ecx,%edx
   2bd53:	jle    2bd79 <start_pass_phuff_decoder+0x79>
   2bd55:	mov    %rsi,%rcx
   2bd58:	movslq 0x1b0(%rdi),%rdx
   2bd5f:	cmp    $0x1,%edx
   2bd62:	je     2bd86 <start_pass_phuff_decoder+0x86>
   2bd64:	mov    %rsi,%rcx
   2bd67:	jmp    2bd86 <start_pass_phuff_decoder+0x86>
   2bd69:	movslq 0x210(%rdi),%rcx
   2bd70:	test   %ecx,%ecx
   2bd72:	jne    2bd83 <start_pass_phuff_decoder+0x83>
   2bd74:	mov    %rax,%rcx
   2bd77:	jmp    2bd86 <start_pass_phuff_decoder+0x86>
   2bd79:	cmp    $0x3f,%ecx
   2bd7c:	jg     2bdb6 <start_pass_phuff_decoder+0xb6>
   2bd7e:	mov    %rax,%rcx
   2bd81:	jmp    2bd58 <start_pass_phuff_decoder+0x58>
   2bd83:	mov    %rsi,%rcx
   2bd86:	movslq 0x214(%rdi),%rdx
   2bd8d:	test   %edx,%edx
   2bd8f:	jne    2bdbb <start_pass_phuff_decoder+0xbb>
   2bd91:	movslq 0x218(%rdi),%rdx
   2bd98:	cmp    $0xd,%edx
   2bd9b:	jle    2bda0 <start_pass_phuff_decoder+0xa0>
   2bd9d:	mov    %rsi,%rcx
   2bda0:	mov    $0xffffffffffffffff,%rsi
   2bda7:	test   %ecx,%ecx
   2bda9:	jg     2bdcb <start_pass_phuff_decoder+0xcb>
   2bdab:	mov    %rdi,%rbx
   2bdae:	mov    %rax,%rcx
   2bdb1:	jmpq   2be91 <start_pass_phuff_decoder+0x191>
   2bdb6:	mov    %rsi,%rcx
   2bdb9:	jmp    2bd58 <start_pass_phuff_decoder+0x58>
   2bdbb:	add    $0xffffffff,%edx
   2bdbe:	cmp    0x218(%rdi),%edx
   2bdc4:	je     2bd91 <start_pass_phuff_decoder+0x91>
   2bdc6:	mov    %rsi,%rcx
   2bdc9:	jmp    2bd91 <start_pass_phuff_decoder+0x91>
   2bdcb:	mov    (%rdi),%rcx
   2bdce:	movl   $0x10,0x28(%rcx)
   2bdd5:	movslq 0x20c(%rdi),%rdx
   2bddc:	mov    (%rdi),%rcx
   2bddf:	mov    %edx,0x2c(%rcx)
   2bde2:	movslq 0x210(%rdi),%rdx
   2bde9:	mov    (%rdi),%rcx
   2bdec:	mov    %edx,0x30(%rcx)
   2bdef:	movslq 0x214(%rdi),%rdx
   2bdf6:	mov    (%rdi),%rcx
   2bdf9:	mov    %edx,0x34(%rcx)
   2bdfc:	movslq 0x218(%rdi),%rdx
   2be03:	mov    (%rdi),%rcx
   2be06:	mov    %edx,0x38(%rcx)
   2be09:	mov    (%rdi),%rcx
   2be0c:	mov    (%rcx),%rcx
   2be0f:	mov    %rsi,%r12
   2be12:	mov    %rax,%r13
   2be15:	mov    %rdi,%rbx
   2be18:	callq  *%rcx
   2be1a:	mov    %r13,%rcx
   2be1d:	mov    %r12,%rsi
   2be20:	mov    %rcx,%rax
   2be23:	jmp    2be91 <start_pass_phuff_decoder+0x191>
   2be25:	movslq %r14d,%r15
   2be28:	movslq (%r12,%r15,4),%rcx
   2be2c:	test   %ecx,%ecx
   2be2e:	jns    2be33 <start_pass_phuff_decoder+0x133>
   2be30:	mov    %rax,%rcx
   2be33:	movslq 0x214(%rbx),%rdx
   2be3a:	cmp    %ecx,%edx
   2be3c:	je     2be6b <start_pass_phuff_decoder+0x16b>
   2be3e:	mov    (%rbx),%rax
   2be41:	movl   $0x73,0x28(%rax)
   2be48:	mov    (%rbx),%rax
   2be4b:	mov    %r13d,0x2c(%rax)
   2be4f:	mov    (%rbx),%rax
   2be52:	mov    %r14d,0x30(%rax)
   2be56:	mov    (%rbx),%rax
   2be59:	mov    0x8(%rax),%rax
   2be5d:	mov    %rbx,%rdi
   2be60:	callq  *%rax
   2be62:	mov    $0xffffffffffffffff,%rsi
   2be69:	xor    %eax,%eax
   2be6b:	movslq 0x218(%rbx),%rcx
   2be72:	mov    %ecx,(%r12,%r15,4)
   2be76:	add    $0x1,%r14d
   2be7a:	movslq 0x210(%rbx),%rcx
   2be81:	cmp    %r14d,%ecx
   2be84:	jge    2be25 <start_pass_phuff_decoder+0x125>
   2be86:	mov    -0x40(%rbp),%rcx
   2be8a:	add    $0x1,%ecx
   2be8d:	mov    -0x38(%rbp),%r14
   2be91:	mov    %rcx,-0x40(%rbp)
   2be95:	movslq 0x1b0(%rbx),%rdx
   2be9c:	cmp    %ecx,%edx
   2be9e:	jg     2bed5 <start_pass_phuff_decoder+0x1d5>
   2bea0:	movslq 0x214(%rbx),%rcx
   2bea7:	test   %ecx,%ecx
   2bea9:	je     2bf3e <start_pass_phuff_decoder+0x23e>
   2beaf:	test   %r14d,%r14d
   2beb2:	jg     2bf61 <start_pass_phuff_decoder+0x261>
   2beb8:	lea    -0x88f(%rip),%rcx        # 2b630 <decode_mcu_AC_refine>
   2bebf:	mov    -0x30(%rbp),%r12
   2bec3:	mov    %rcx,0x8(%r12)
   2bec8:	mov    $0x1,%esi
   2becd:	mov    %rax,%r13
   2bed0:	jmpq   2bfc8 <start_pass_phuff_decoder+0x2c8>
   2bed5:	movslq %ecx,%rcx
   2bed8:	mov    0x1b8(%rbx,%rcx,8),%rcx
   2bee0:	movslq 0x4(%rcx),%r13
   2bee4:	mov    %r13,%r12
   2bee7:	shl    $0x8,%r12
   2beeb:	add    0xc0(%rbx),%r12
   2bef2:	test   %r14d,%r14d
   2bef5:	jg     2bf32 <start_pass_phuff_decoder+0x232>
   2bef7:	movslq (%r12),%rcx
   2befb:	test   %ecx,%ecx
   2befd:	jns    2bf32 <start_pass_phuff_decoder+0x232>
   2beff:	mov    (%rbx),%rcx
   2bf02:	movl   $0x73,0x28(%rcx)
   2bf09:	mov    (%rbx),%rcx
   2bf0c:	mov    %r13d,0x2c(%rcx)
   2bf10:	mov    (%rbx),%rcx
   2bf13:	movl   $0x0,0x30(%rcx)
   2bf1a:	mov    (%rbx),%rcx
   2bf1d:	mov    0x8(%rcx),%rcx
   2bf21:	mov    %rax,%r15
   2bf24:	mov    %rbx,%rdi
   2bf27:	mov    %rsi,%r14
   2bf2a:	callq  *%rcx
   2bf2c:	mov    %r15,%rax
   2bf2f:	mov    %r14,%rsi
   2bf32:	movslq 0x20c(%rbx),%r14
   2bf39:	jmpq   2be7a <start_pass_phuff_decoder+0x17a>
   2bf3e:	test   %r14d,%r14d
   2bf41:	jg     2c019 <start_pass_phuff_decoder+0x319>
   2bf47:	lea    -0xeee(%rip),%rcx        # 2b060 <decode_mcu_AC_first>
   2bf4e:	mov    -0x30(%rbp),%r12
   2bf52:	mov    %rcx,0x8(%r12)
   2bf57:	mov    $0x1,%esi
   2bf5c:	mov    %rax,%r13
   2bf5f:	jmp    2bfc8 <start_pass_phuff_decoder+0x2c8>
   2bf61:	lea    -0xaf8(%rip),%rcx        # 2b470 <decode_mcu_DC_refine>
   2bf68:	mov    -0x30(%rbp),%r12
   2bf6c:	mov    %rcx,0x8(%r12)
   2bf71:	mov    $0x1,%esi
   2bf76:	mov    %rax,%r13
   2bf79:	jmp    2bfc8 <start_pass_phuff_decoder+0x2c8>
   2bf7b:	test   %r14d,%r14d
   2bf7e:	movslq %r13d,%r15
   2bf81:	mov    0x1b8(%rbx,%r15,8),%rdx
   2bf89:	jg     2c033 <start_pass_phuff_decoder+0x333>
   2bf8f:	movslq 0x18(%rdx),%r14
   2bf93:	mov    %rax,%rsi
   2bf96:	lea    0x40(%r12,%r14,8),%rcx
   2bf9b:	mov    %rbx,%rdi
   2bf9e:	mov    %r14,%rdx
   2bfa1:	callq  44c0 <jpeg_make_d_derived_tbl@plt>
   2bfa6:	mov    0x40(%r12,%r14,8),%rax
   2bfab:	mov    %rax,0x60(%r12)
   2bfb0:	xor    %eax,%eax
   2bfb2:	mov    -0x38(%rbp),%r14
   2bfb6:	mov    $0x1,%esi
   2bfbb:	movl   $0x0,0x2c(%r12,%r15,4)
   2bfc4:	add    $0x1,%r13d
   2bfc8:	movslq 0x1b0(%rbx),%rcx
   2bfcf:	cmp    %r13d,%ecx
   2bfd2:	jg     2bf7b <start_pass_phuff_decoder+0x27b>
   2bfd4:	movl   $0x0,0x20(%r12)
   2bfdd:	movq   $0x0,0x18(%r12)
   2bfe6:	movl   $0x0,0x10(%r12)
   2bfef:	movl   $0x0,0x28(%r12)
   2bff8:	mov    0x170(%rbx),%eax
   2bffe:	mov    %eax,0x3c(%r12)
   2c003:	mov    -0x28(%rbp),%r15
   2c007:	mov    -0x20(%rbp),%r14
   2c00b:	mov    -0x18(%rbp),%r13
   2c00f:	mov    -0x10(%rbp),%r12
   2c013:	mov    -0x8(%rbp),%rbx
   2c017:	leaveq 
   2c018:	retq   
   2c019:	lea    -0x12f0(%rip),%rcx        # 2ad30 <decode_mcu_DC_first>
   2c020:	mov    -0x30(%rbp),%r12
   2c024:	mov    %rcx,0x8(%r12)
   2c029:	mov    $0x1,%esi
   2c02e:	mov    %rax,%r13
   2c031:	jmp    2bfc8 <start_pass_phuff_decoder+0x2c8>
   2c033:	movslq 0x214(%rbx),%rcx
   2c03a:	test   %ecx,%ecx
   2c03c:	jne    2bfbb <start_pass_phuff_decoder+0x2bb>
   2c042:	movslq 0x14(%rdx),%rdx
   2c046:	lea    0x40(%r12,%rdx,8),%rcx
   2c04b:	mov    %rbx,%rdi
   2c04e:	callq  44c0 <jpeg_make_d_derived_tbl@plt>
   2c053:	xor    %eax,%eax
   2c055:	mov    $0x1,%esi
   2c05a:	jmpq   2bfbb <start_pass_phuff_decoder+0x2bb>
   2c05f:	nop

000000000002c060 <process_restart>:
   2c060:	push   %rbp
   2c061:	mov    %rsp,%rbp
   2c064:	sub    $0x10,%rsp
   2c068:	mov    %rdi,-0x8(%rbp)
   2c06c:	mov    0x250(%rdi),%rdx
   2c073:	mov    %rdx,-0x10(%rbp)
   2c077:	movslq 0x20(%rdx),%rcx
   2c07b:	mov    %rcx,%rax
   2c07e:	sar    $0x2,%eax
   2c081:	shr    $0x1d,%eax
   2c084:	add    %ecx,%eax
   2c086:	sar    $0x3,%eax
   2c089:	mov    0x248(%rdi),%rcx
   2c090:	add    0x24(%rcx),%eax
   2c093:	mov    %eax,0x24(%rcx)
   2c096:	movl   $0x0,0x20(%rdx)
   2c09d:	mov    0x248(%rdi),%rax
   2c0a4:	mov    0x10(%rax),%rax
   2c0a8:	callq  *%rax
   2c0aa:	test   %eax,%eax
   2c0ac:	jne    2c0b2 <process_restart+0x52>
   2c0ae:	xor    %eax,%eax
   2c0b0:	leaveq 
   2c0b1:	retq   
   2c0b2:	xor    %eax,%eax
   2c0b4:	mov    -0x10(%rbp),%rdx
   2c0b8:	mov    -0x8(%rbp),%rsi
   2c0bc:	jmp    2c0cc <process_restart+0x6c>
   2c0be:	movslq %eax,%rcx
   2c0c1:	movl   $0x0,0x2c(%rdx,%rcx,4)
   2c0c9:	add    $0x1,%eax
   2c0cc:	movslq 0x1b0(%rsi),%rcx
   2c0d3:	cmp    %eax,%ecx
   2c0d5:	jg     2c0be <process_restart+0x5e>
   2c0d7:	movl   $0x0,0x28(%rdx)
   2c0de:	mov    0x170(%rsi),%eax
   2c0e4:	mov    %eax,0x3c(%rdx)
   2c0e7:	mov    $0x1,%eax
   2c0ec:	movslq 0x21c(%rsi),%rcx
   2c0f3:	test   %ecx,%ecx
   2c0f5:	je     2c0f9 <process_restart+0x99>
   2c0f7:	leaveq 
   2c0f8:	retq   
   2c0f9:	movl   $0x0,0x10(%rdx)
   2c100:	leaveq 
   2c101:	retq   
   2c102:	nopw   %cs:0x0(%rax,%rax,1)
   2c10c:	nopl   0x0(%rax)

000000000002c110 <jinit_d_post_controller>:
   2c110:	push   %rbp
   2c111:	mov    %rsp,%rbp
   2c114:	sub    $0x20,%rsp
   2c118:	mov    %r15,-0x20(%rbp)
   2c11c:	mov    %rsi,-0x18(%rbp)
   2c120:	mov    0x8(%rdi),%rax
   2c124:	mov    (%rax),%rax
   2c127:	mov    $0x1,%esi
   2c12c:	mov    $0x30,%edx
   2c131:	mov    %rdi,%r15
   2c134:	callq  *%rax
   2c136:	mov    %rax,0x238(%r15)
   2c13d:	lea    0x38c(%rip),%rcx        # 2c4d0 <start_pass_dpost>
   2c144:	mov    %rcx,(%rax)
   2c147:	movq   $0x0,0x10(%rax)
   2c14f:	movq   $0x0,0x18(%rax)
   2c157:	movslq 0x6c(%r15),%rcx
   2c15b:	test   %ecx,%ecx
   2c15d:	jne    2c165 <jinit_d_post_controller+0x55>
   2c15f:	mov    -0x20(%rbp),%r15
   2c163:	leaveq 
   2c164:	retq   
   2c165:	mov    0x19c(%r15),%esi
   2c16c:	mov    %esi,0x20(%rax)
   2c16f:	mov    -0x18(%rbp),%rcx
   2c173:	test   %ecx,%ecx
   2c175:	jne    2c1a9 <jinit_d_post_controller+0x99>
   2c177:	mov    0x90(%r15),%edx
   2c17e:	imul   0x88(%r15),%edx
   2c186:	mov    0x8(%r15),%rcx
   2c18a:	mov    0x10(%rcx),%r8
   2c18e:	mov    %rsi,%rcx
   2c191:	mov    %r15,%rdi
   2c194:	mov    %rax,%r15
   2c197:	mov    $0x1,%esi
   2c19c:	callq  *%r8
   2c19f:	mov    %rax,0x18(%r15)
   2c1a3:	mov    -0x20(%rbp),%r15
   2c1a7:	leaveq 
   2c1a8:	retq   
   2c1a9:	mov    0x8c(%r15),%edi
   2c1b0:	mov    0x90(%r15),%ecx
   2c1b7:	imul   0x88(%r15),%ecx
   2c1bf:	mov    0x8(%r15),%rdx
   2c1c3:	mov    0x20(%rdx),%rdx
   2c1c7:	mov    %r12,-0x8(%rbp)
   2c1cb:	mov    %r13,-0x10(%rbp)
   2c1cf:	mov    %r14,-0x18(%rbp)
   2c1d3:	mov    %rax,%r12
   2c1d6:	mov    %rdx,%r13
   2c1d9:	mov    %rcx,%r14
   2c1dc:	callq  42b0 <jround_up@plt>
   2c1e1:	mov    %r14,%rcx
   2c1e4:	mov    %r15,%rdi
   2c1e7:	mov    %rax,%r8
   2c1ea:	xor    %edx,%edx
   2c1ec:	mov    0x20(%r12),%r9d
   2c1f1:	mov    $0x1,%esi
   2c1f6:	callq  *%r13
   2c1f9:	mov    %rax,0x10(%r12)
   2c1fe:	mov    -0x18(%rbp),%r14
   2c202:	mov    -0x10(%rbp),%r13
   2c206:	mov    -0x8(%rbp),%r12
   2c20a:	mov    -0x20(%rbp),%r15
   2c20e:	leaveq 
   2c20f:	retq   

000000000002c210 <post_process_1pass>:
   2c210:	push   %rbp
   2c211:	mov    %rsp,%rbp
   2c214:	sub    $0x30,%rsp
   2c218:	mov    %r15,-0x20(%rbp)
   2c21c:	mov    %r14,-0x18(%rbp)
   2c220:	mov    %r12,-0x8(%rbp)
   2c224:	mov    %r13,-0x10(%rbp)
   2c228:	mov    0x10(%rbp),%eax
   2c22b:	mov    (%r9),%r10d
   2c22e:	sub    %r10d,%eax
   2c231:	mov    0x238(%rdi),%r13
   2c238:	mov    0x20(%r13),%r10d
   2c23c:	cmp    %eax,%r10d
   2c23f:	jae    2c244 <post_process_1pass+0x34>
   2c241:	mov    %r10,%rax
   2c244:	movl   $0x0,-0x24(%rbp)
   2c24b:	mov    0x260(%rdi),%r10
   2c252:	mov    0x8(%r10),%r10
   2c256:	mov    0x18(%r13),%r11
   2c25a:	mov    %eax,(%rsp)
   2c25d:	mov    %r9,%r12
   2c260:	mov    %r8,%r14
   2c263:	mov    %r11,%r8
   2c266:	mov    %rdi,%r15
   2c269:	lea    -0x24(%rbp),%r9
   2c26d:	callq  *%r10
   2c270:	mov    (%r12),%eax
   2c274:	lea    (%r14,%rax,8),%rdx
   2c278:	mov    0x270(%r15),%rax
   2c27f:	mov    0x8(%rax),%rax
   2c283:	mov    0x18(%r13),%rsi
   2c287:	mov    %r15,%rdi
   2c28a:	movslq -0x24(%rbp),%rcx
   2c28e:	callq  *%rax
   2c290:	mov    (%r12),%eax
   2c294:	add    -0x24(%rbp),%eax
   2c297:	mov    %eax,(%r12)
   2c29b:	mov    -0x10(%rbp),%r13
   2c29f:	mov    -0x8(%rbp),%r12
   2c2a3:	mov    -0x18(%rbp),%r14
   2c2a7:	mov    -0x20(%rbp),%r15
   2c2ab:	leaveq 
   2c2ac:	retq   
   2c2ad:	nopl   (%rax)

000000000002c2b0 <post_process_prepass>:
   2c2b0:	push   %rbp
   2c2b1:	mov    %rsp,%rbp
   2c2b4:	sub    $0x40,%rsp
   2c2b8:	mov    %r9,-0x30(%rbp)
   2c2bc:	mov    %r15,-0x28(%rbp)
   2c2c0:	mov    %r14,-0x20(%rbp)
   2c2c4:	mov    %r13,-0x18(%rbp)
   2c2c8:	mov    0x238(%rdi),%r13
   2c2cf:	lea    0x28(%r13),%r9
   2c2d3:	mov    (%r9),%eax
   2c2d6:	test   %eax,%eax
   2c2d8:	je     2c2df <post_process_prepass+0x2f>
   2c2da:	mov    %rdi,%r14
   2c2dd:	jmp    2c33b <post_process_prepass+0x8b>
   2c2df:	mov    0x8(%rdi),%rax
   2c2e3:	mov    0x38(%rax),%rax
   2c2e7:	mov    0x10(%r13),%r10
   2c2eb:	mov    0x24(%r13),%r14d
   2c2ef:	mov    0x20(%r13),%r15d
   2c2f3:	mov    %rdi,%r11
   2c2f6:	mov    %r9,-0x38(%rbp)
   2c2fa:	mov    %rbx,-0x8(%rbp)
   2c2fe:	mov    %r12,-0x10(%rbp)
   2c302:	mov    %rdx,%rbx
   2c305:	mov    %r14,%rdx
   2c308:	mov    %rdi,%r14
   2c30b:	mov    %r11,%rdi
   2c30e:	mov    %rcx,%r12
   2c311:	mov    %r15,%rcx
   2c314:	mov    %rsi,%r15
   2c317:	mov    %r10,%rsi
   2c31a:	mov    $0x1,%r8d
   2c320:	callq  *%rax
   2c322:	mov    %rax,0x18(%r13)
   2c326:	mov    %r12,%rcx
   2c329:	mov    %rbx,%rdx
   2c32c:	mov    %r15,%rsi
   2c32f:	mov    -0x10(%rbp),%r12
   2c333:	mov    -0x8(%rbp),%rbx
   2c337:	mov    -0x38(%rbp),%r9
   2c33b:	mov    0x20(%r13),%edi
   2c33f:	mov    0x260(%r14),%rax
   2c346:	mov    0x8(%rax),%rax
   2c34a:	mov    0x18(%r13),%r8
   2c34e:	mov    0x28(%r13),%r15d
   2c352:	mov    %edi,(%rsp)
   2c355:	mov    %r14,%rdi
   2c358:	callq  *%rax
   2c35a:	mov    0x28(%r13),%eax
   2c35e:	cmp    %r15d,%eax
   2c361:	jbe    2c394 <post_process_prepass+0xe4>
   2c363:	sub    %r15d,%eax
   2c366:	shl    $0x3,%r15
   2c36a:	add    0x18(%r13),%r15
   2c36e:	mov    0x270(%r14),%rcx
   2c375:	mov    0x8(%rcx),%r8
   2c379:	mov    %r15,%rsi
   2c37c:	mov    %r14,%rdi
   2c37f:	mov    %rax,%r14
   2c382:	xor    %edx,%edx
   2c384:	mov    %r14,%rcx
   2c387:	callq  *%r8
   2c38a:	mov    -0x30(%rbp),%rax
   2c38e:	add    (%rax),%r14d
   2c391:	mov    %r14d,(%rax)
   2c394:	mov    0x20(%r13),%eax
   2c398:	cmp    0x28(%r13),%eax
   2c39c:	jbe    2c3ac <post_process_prepass+0xfc>
   2c39e:	mov    -0x18(%rbp),%r13
   2c3a2:	mov    -0x20(%rbp),%r14
   2c3a6:	mov    -0x28(%rbp),%r15
   2c3aa:	leaveq 
   2c3ab:	retq   
   2c3ac:	add    0x24(%r13),%eax
   2c3b0:	mov    %eax,0x24(%r13)
   2c3b4:	movl   $0x0,0x28(%r13)
   2c3bc:	mov    -0x18(%rbp),%r13
   2c3c0:	mov    -0x20(%rbp),%r14
   2c3c4:	mov    -0x28(%rbp),%r15
   2c3c8:	leaveq 
   2c3c9:	retq   
   2c3ca:	nopw   0x0(%rax,%rax,1)

000000000002c3d0 <post_process_2pass>:
   2c3d0:	push   %rbp
   2c3d1:	mov    %rsp,%rbp
   2c3d4:	sub    $0x20,%rsp
   2c3d8:	mov    %r15,-0x20(%rbp)
   2c3dc:	mov    %r13,-0x10(%rbp)
   2c3e0:	mov    %r14,-0x18(%rbp)
   2c3e4:	mov    0x238(%rdi),%r14
   2c3eb:	mov    0x28(%r14),%eax
   2c3ef:	test   %eax,%eax
   2c3f1:	je     2c3f8 <post_process_2pass+0x28>
   2c3f3:	mov    %r9,%r15
   2c3f6:	jmp    2c432 <post_process_2pass+0x62>
   2c3f8:	mov    0x8(%rdi),%rax
   2c3fc:	mov    0x38(%rax),%rax
   2c400:	mov    0x10(%r14),%rsi
   2c404:	mov    0x24(%r14),%edx
   2c408:	mov    0x20(%r14),%ecx
   2c40c:	mov    %rdi,%r11
   2c40f:	mov    %r12,-0x8(%rbp)
   2c413:	mov    %r8,%r12
   2c416:	mov    %rdi,%r13
   2c419:	mov    %r11,%rdi
   2c41c:	mov    %r9,%r15
   2c41f:	xor    %r8d,%r8d
   2c422:	callq  *%rax
   2c424:	mov    %rax,0x18(%r14)
   2c428:	mov    %r13,%rdi
   2c42b:	mov    %r12,%r8
   2c42e:	mov    -0x8(%rbp),%r12
   2c432:	mov    (%r15),%edx
   2c435:	mov    0x10(%rbp),%eax
   2c438:	sub    %edx,%eax
   2c43a:	mov    0x28(%r14),%esi
   2c43e:	mov    0x20(%r14),%r13d
   2c442:	sub    %esi,%r13d
   2c445:	cmp    %r13d,%eax
   2c448:	jae    2c44d <post_process_2pass+0x7d>
   2c44a:	mov    %rax,%r13
   2c44d:	mov    0x8c(%rdi),%eax
   2c453:	mov    0x24(%r14),%ecx
   2c457:	sub    %ecx,%eax
   2c459:	cmp    %eax,%r13d
   2c45c:	jbe    2c461 <post_process_2pass+0x91>
   2c45e:	mov    %rax,%r13
   2c461:	shl    $0x3,%rsi
   2c465:	add    0x18(%r14),%rsi
   2c469:	lea    (%r8,%rdx,8),%rdx
   2c46d:	mov    0x270(%rdi),%rax
   2c474:	mov    0x8(%rax),%rax
   2c478:	mov    %r13,%rcx
   2c47b:	callq  *%rax
   2c47d:	mov    %r13,%rax
   2c480:	add    (%r15),%eax
   2c483:	mov    %eax,(%r15)
   2c486:	add    0x28(%r14),%r13d
   2c48a:	mov    %r13d,0x28(%r14)
   2c48e:	mov    0x20(%r14),%eax
   2c492:	cmp    %r13d,%eax
   2c495:	jbe    2c4a5 <post_process_2pass+0xd5>
   2c497:	mov    -0x18(%rbp),%r14
   2c49b:	mov    -0x10(%rbp),%r13
   2c49f:	mov    -0x20(%rbp),%r15
   2c4a3:	leaveq 
   2c4a4:	retq   
   2c4a5:	add    0x24(%r14),%eax
   2c4a9:	mov    %eax,0x24(%r14)
   2c4ad:	movl   $0x0,0x28(%r14)
   2c4b5:	mov    -0x18(%rbp),%r14
   2c4b9:	mov    -0x10(%rbp),%r13
   2c4bd:	mov    -0x20(%rbp),%r15
   2c4c1:	leaveq 
   2c4c2:	retq   
   2c4c3:	data16 nopw %cs:0x0(%rax,%rax,1)
   2c4ce:	xchg   %ax,%ax

000000000002c4d0 <start_pass_dpost>:
   2c4d0:	push   %rbp
   2c4d1:	mov    %rsp,%rbp
   2c4d4:	sub    $0x10,%rsp
   2c4d8:	mov    0x238(%rdi),%rax
   2c4df:	cmp    $0x1,%esi
   2c4e2:	jbe    2c524 <start_pass_dpost+0x54>
   2c4e4:	cmp    $0x2,%esi
   2c4e7:	je     2c558 <start_pass_dpost+0x88>
   2c4e9:	cmp    $0x3,%esi
   2c4ec:	jne    2c528 <start_pass_dpost+0x58>
   2c4ee:	mov    0x10(%rax),%rcx
   2c4f2:	test   %rcx,%rcx
   2c4f5:	jne    2c517 <start_pass_dpost+0x47>
   2c4f7:	mov    (%rdi),%rcx
   2c4fa:	movl   $0x4,0x28(%rcx)
   2c501:	mov    (%rdi),%rcx
   2c504:	mov    (%rcx),%rcx
   2c507:	mov    %r15,-0x8(%rbp)
   2c50b:	mov    %rax,%r15
   2c50e:	callq  *%rcx
   2c510:	mov    %r15,%rax
   2c513:	mov    -0x8(%rbp),%r15
   2c517:	lea    -0x26e(%rip),%rcx        # 2c2b0 <post_process_prepass>
   2c51e:	mov    %rcx,0x8(%rax)
   2c522:	jmp    2c548 <start_pass_dpost+0x78>
   2c524:	test   %esi,%esi
   2c526:	je     2c58e <start_pass_dpost+0xbe>
   2c528:	mov    (%rdi),%rcx
   2c52b:	movl   $0x4,0x28(%rcx)
   2c532:	mov    (%rdi),%rcx
   2c535:	mov    (%rcx),%rcx
   2c538:	mov    %r15,-0x8(%rbp)
   2c53c:	mov    %rax,%r15
   2c53f:	callq  *%rcx
   2c541:	mov    %r15,%rax
   2c544:	mov    -0x8(%rbp),%r15
   2c548:	movl   $0x0,0x28(%rax)
   2c54f:	movl   $0x0,0x24(%rax)
   2c556:	leaveq 
   2c557:	retq   
   2c558:	mov    0x10(%rax),%rcx
   2c55c:	test   %rcx,%rcx
   2c55f:	jne    2c581 <start_pass_dpost+0xb1>
   2c561:	mov    (%rdi),%rcx
   2c564:	movl   $0x4,0x28(%rcx)
   2c56b:	mov    (%rdi),%rcx
   2c56e:	mov    (%rcx),%rcx
   2c571:	mov    %r15,-0x8(%rbp)
   2c575:	mov    %rax,%r15
   2c578:	callq  *%rcx
   2c57a:	mov    %r15,%rax
   2c57d:	mov    -0x8(%rbp),%r15
   2c581:	lea    -0x1b8(%rip),%rcx        # 2c3d0 <post_process_2pass>
   2c588:	mov    %rcx,0x8(%rax)
   2c58c:	jmp    2c548 <start_pass_dpost+0x78>
   2c58e:	movslq 0x6c(%rdi),%rcx
   2c592:	test   %ecx,%ecx
   2c594:	jne    2c5a7 <start_pass_dpost+0xd7>
   2c596:	mov    0x260(%rdi),%rcx
   2c59d:	mov    0x8(%rcx),%rcx
   2c5a1:	mov    %rcx,0x8(%rax)
   2c5a5:	jmp    2c548 <start_pass_dpost+0x78>
   2c5a7:	lea    -0x39e(%rip),%rcx        # 2c210 <post_process_1pass>
   2c5ae:	mov    %rcx,0x8(%rax)
   2c5b2:	mov    0x18(%rax),%rcx
   2c5b6:	test   %rcx,%rcx
   2c5b9:	jne    2c548 <start_pass_dpost+0x78>
   2c5bb:	mov    0x8(%rdi),%rcx
   2c5bf:	mov    0x38(%rcx),%r9
   2c5c3:	mov    0x10(%rax),%rsi
   2c5c7:	xor    %edx,%edx
   2c5c9:	mov    0x20(%rax),%ecx
   2c5cc:	mov    $0x1,%r8d
   2c5d2:	mov    %r15,-0x8(%rbp)
   2c5d6:	mov    %rax,%r15
   2c5d9:	callq  *%r9
   2c5dc:	mov    %rax,0x18(%r15)
   2c5e0:	mov    %r15,%rax
   2c5e3:	mov    -0x8(%rbp),%r15
   2c5e7:	jmpq   2c548 <start_pass_dpost+0x78>
   2c5ec:	nopl   0x0(%rax)

000000000002c5f0 <jinit_upsampler>:
   2c5f0:	push   %rbp
   2c5f1:	mov    %rsp,%rbp
   2c5f4:	sub    $0x70,%rsp
   2c5f8:	mov    %r14,-0x20(%rbp)
   2c5fc:	mov    %r15,-0x28(%rbp)
   2c600:	mov    %r13,-0x18(%rbp)
   2c604:	mov    %r12,-0x10(%rbp)
   2c608:	mov    %rbx,-0x8(%rbp)
   2c60c:	mov    $0x1,%ecx
   2c611:	mov    %rcx,-0x30(%rbp)
   2c615:	mov    0x220(%rdi),%rax
   2c61c:	movslq 0x6c(%rax),%rax
   2c620:	test   %eax,%eax
   2c622:	jne    2c6de <jinit_upsampler+0xee>
   2c628:	mov    0x8(%rdi),%rax
   2c62c:	mov    (%rax),%rax
   2c62f:	mov    %rcx,%r12
   2c632:	mov    $0x100,%edx
   2c637:	mov    %rdi,%rbx
   2c63a:	mov    %r12,%rsi
   2c63d:	callq  *%rax
   2c63f:	mov    %rax,0x260(%rbx)
   2c646:	lea    0x403(%rip),%rcx        # 2ca50 <start_pass_upsample>
   2c64d:	mov    %rcx,(%rax)
   2c650:	lea    0x429(%rip),%rcx        # 2ca80 <sep_upsample>
   2c657:	mov    %rcx,0x8(%rax)
   2c65b:	mov    %r12,%rcx
   2c65e:	mov    %rax,%r12
   2c661:	movl   $0x0,0x10(%r12)
   2c66a:	movslq 0x188(%rbx),%rax
   2c671:	test   %eax,%eax
   2c673:	je     2c690 <jinit_upsampler+0xa0>
   2c675:	mov    (%rbx),%rax
   2c678:	movl   $0x19,0x28(%rax)
   2c67f:	mov    (%rbx),%rax
   2c682:	mov    (%rax),%rax
   2c685:	mov    %rcx,%r13
   2c688:	mov    %rbx,%rdi
   2c68b:	callq  *%rax
   2c68d:	mov    %r13,%rcx
   2c690:	xor    %r13d,%r13d
   2c693:	mov    %r13,-0x38(%rbp)
   2c697:	movslq 0x64(%rbx),%rax
   2c69b:	test   %eax,%eax
   2c69d:	jne    2c6ea <jinit_upsampler+0xfa>
   2c69f:	mov    %r13,%rcx
   2c6a2:	mov    %rcx,-0x70(%rbp)
   2c6a6:	mov    0x130(%rbx),%r14
   2c6ad:	lea    0x112ec(%rip),%rax        # 3d9a0 <jsimd_h2v2_fancy_upsample>
   2c6b4:	mov    %rax,-0x58(%rbp)
   2c6b8:	lea    0x11301(%rip),%rax        # 3d9c0 <jsimd_h2v1_fancy_upsample>
   2c6bf:	mov    %rax,-0x48(%rbp)
   2c6c3:	lea    0x11236(%rip),%rsi        # 3d900 <jsimd_h2v1_upsample>
   2c6ca:	mov    %rsi,-0x50(%rbp)
   2c6ce:	lea    0x1120b(%rip),%rax        # 3d8e0 <jsimd_h2v2_upsample>
   2c6d5:	mov    %rax,-0x60(%rbp)
   2c6d9:	jmpq   2c765 <jinit_upsampler+0x175>
   2c6de:	mov    %rdi,%rbx
   2c6e1:	mov    0x260(%rbx),%r12
   2c6e8:	jmp    2c66a <jinit_upsampler+0x7a>
   2c6ea:	movslq 0x1a0(%rbx),%rax
   2c6f1:	cmp    $0x1,%eax
   2c6f4:	jg     2c6a2 <jinit_upsampler+0xb2>
   2c6f6:	mov    %r13,%rcx
   2c6f9:	jmp    2c6a2 <jinit_upsampler+0xb2>
   2c6fb:	movslq 0x8(%r14),%r11
   2c6ff:	movslq 0x24(%r14),%rdi
   2c703:	movslq 0x1a0(%rbx),%r8
   2c70a:	movslq 0x24(%r14),%rax
   2c70e:	imul   0xc(%r14),%eax
   2c713:	cltd   
   2c714:	movslq 0x1a0(%rbx),%r15
   2c71b:	movslq 0x198(%rbx),%r10
   2c722:	movslq 0x19c(%rbx),%r9
   2c729:	idiv   %r15d
   2c72c:	movslq %r13d,%r15
   2c72f:	mov    %eax,0xc0(%r12,%r15,4)
   2c737:	movslq 0x30(%r14),%rdx
   2c73b:	test   %edx,%edx
   2c73d:	jne    2c784 <jinit_upsampler+0x194>
   2c73f:	lea    0x4ba(%rip),%rax        # 2cc00 <noop_upsample>
   2c746:	mov    %rax,0x68(%r12,%r15,8)
   2c74b:	pushq  -0x38(%rbp)
   2c74e:	popq   -0x40(%rbp)
   2c751:	mov    -0x40(%rbp),%rax
   2c755:	test   %eax,%eax
   2c757:	jg     2c7f9 <jinit_upsampler+0x209>
   2c75d:	add    $0x1,%r13d
   2c761:	add    $0x60,%r14
   2c765:	movslq 0x38(%rbx),%rax
   2c769:	cmp    %r13d,%eax
   2c76c:	jg     2c6fb <jinit_upsampler+0x10b>
   2c76e:	mov    -0x8(%rbp),%rbx
   2c772:	mov    -0x10(%rbp),%r12
   2c776:	mov    -0x18(%rbp),%r13
   2c77a:	mov    -0x28(%rbp),%r15
   2c77e:	mov    -0x20(%rbp),%r14
   2c782:	leaveq 
   2c783:	retq   
   2c784:	imul   %r11d,%edi
   2c788:	mov    %rdi,%rdx
   2c78b:	mov    %rax,%rdi
   2c78e:	mov    %rdx,%rax
   2c791:	cltd   
   2c792:	idiv   %r8d
   2c795:	cmp    %r10d,%eax
   2c798:	je     2c857 <jinit_upsampler+0x267>
   2c79e:	lea    (%rax,%rax,1),%edx
   2c7a1:	cmp    %edx,%r10d
   2c7a4:	je     2c877 <jinit_upsampler+0x287>
   2c7aa:	cmp    %r10d,%eax
   2c7ad:	je     2c8be <jinit_upsampler+0x2ce>
   2c7b3:	cmp    %edx,%r10d
   2c7b6:	je     2c8f3 <jinit_upsampler+0x303>
   2c7bc:	mov    %rax,%r8
   2c7bf:	mov    %r10,%rax
   2c7c2:	cltd   
   2c7c3:	mov    %rax,%r10
   2c7c6:	idiv   %r8d
   2c7c9:	test   %edx,%edx
   2c7cb:	je     2c933 <jinit_upsampler+0x343>
   2c7d1:	mov    (%rbx),%rax
   2c7d4:	movl   $0x26,0x28(%rax)
   2c7db:	mov    (%rbx),%rax
   2c7de:	mov    (%rax),%rax
   2c7e1:	mov    %rbx,%rdi
   2c7e4:	callq  *%rax
   2c7e6:	mov    -0x50(%rbp),%rsi
   2c7ea:	mov    -0x70(%rbp),%rcx
   2c7ee:	pushq  -0x30(%rbp)
   2c7f1:	popq   -0x40(%rbp)
   2c7f4:	jmpq   2c751 <jinit_upsampler+0x161>
   2c7f9:	mov    0x220(%rbx),%rax
   2c800:	movslq 0x6c(%rax),%rax
   2c804:	test   %eax,%eax
   2c806:	jne    2c75d <jinit_upsampler+0x16d>
   2c80c:	mov    0x88(%rbx),%edi
   2c812:	movslq 0x198(%rbx),%rsi
   2c819:	mov    0x8(%rbx),%rax
   2c81d:	mov    0x10(%rax),%rax
   2c821:	mov    %r14,-0x68(%rbp)
   2c825:	mov    %rax,%r14
   2c828:	callq  42b0 <jround_up@plt>
   2c82d:	mov    %rax,%rdx
   2c830:	mov    0x19c(%rbx),%ecx
   2c836:	mov    %rbx,%rdi
   2c839:	mov    $0x1,%esi
   2c83e:	callq  *%r14
   2c841:	mov    %rax,0x18(%r12,%r15,8)
   2c846:	mov    -0x68(%rbp),%r14
   2c84a:	mov    -0x50(%rbp),%rsi
   2c84e:	mov    -0x70(%rbp),%rcx
   2c852:	jmpq   2c75d <jinit_upsampler+0x16d>
   2c857:	cmp    %r9d,%edi
   2c85a:	jne    2c79e <jinit_upsampler+0x1ae>
   2c860:	lea    0x389(%rip),%rax        # 2cbf0 <fullsize_upsample>
   2c867:	mov    %rax,0x68(%r12,%r15,8)
   2c86c:	pushq  -0x38(%rbp)
   2c86f:	popq   -0x40(%rbp)
   2c872:	jmpq   2c751 <jinit_upsampler+0x161>
   2c877:	cmp    %r9d,%edi
   2c87a:	jne    2c7aa <jinit_upsampler+0x1ba>
   2c880:	test   %ecx,%ecx
   2c882:	jg     2c978 <jinit_upsampler+0x388>
   2c888:	mov    %r14,-0x68(%rbp)
   2c88c:	mov    %rsi,%r14
   2c88f:	callq  3d8b0 <jsimd_can_h2v1_upsample>
   2c894:	test   %eax,%eax
   2c896:	jne    2c9ad <jinit_upsampler+0x3bd>
   2c89c:	lea    0x45d(%rip),%rax        # 2cd00 <h2v1_upsample>
   2c8a3:	mov    %rax,0x68(%r12,%r15,8)
   2c8a8:	mov    %r14,%rsi
   2c8ab:	mov    -0x68(%rbp),%r14
   2c8af:	mov    -0x70(%rbp),%rcx
   2c8b3:	pushq  -0x30(%rbp)
   2c8b6:	popq   -0x40(%rbp)
   2c8b9:	jmpq   2c751 <jinit_upsampler+0x161>
   2c8be:	lea    (%rdi,%rdi,1),%r8d
   2c8c2:	cmp    %r8d,%r9d
   2c8c5:	jne    2c7b3 <jinit_upsampler+0x1c3>
   2c8cb:	test   %ecx,%ecx
   2c8cd:	jle    2c7b3 <jinit_upsampler+0x1c3>
   2c8d3:	lea    0x5e6(%rip),%rax        # 2cec0 <h1v2_fancy_upsample>
   2c8da:	mov    %rax,0x68(%r12,%r15,8)
   2c8df:	movl   $0x1,0x10(%r12)
   2c8e8:	pushq  -0x30(%rbp)
   2c8eb:	popq   -0x40(%rbp)
   2c8ee:	jmpq   2c751 <jinit_upsampler+0x161>
   2c8f3:	lea    (%rdi,%rdi,1),%edx
   2c8f6:	cmp    %edx,%r9d
   2c8f9:	jne    2c7bc <jinit_upsampler+0x1cc>
   2c8ff:	test   %ecx,%ecx
   2c901:	jg     2c9c8 <jinit_upsampler+0x3d8>
   2c907:	callq  3d880 <jsimd_can_h2v2_upsample>
   2c90c:	test   %eax,%eax
   2c90e:	jne    2c9ec <jinit_upsampler+0x3fc>
   2c914:	lea    0x435(%rip),%rax        # 2cd50 <h2v2_upsample>
   2c91b:	mov    %rax,0x68(%r12,%r15,8)
   2c920:	mov    -0x50(%rbp),%rsi
   2c924:	mov    -0x70(%rbp),%rcx
   2c928:	pushq  -0x30(%rbp)
   2c92b:	popq   -0x40(%rbp)
   2c92e:	jmpq   2c751 <jinit_upsampler+0x161>
   2c933:	mov    %r9,%rax
   2c936:	cltd   
   2c937:	mov    %rax,%r9
   2c93a:	idiv   %edi
   2c93c:	test   %edx,%edx
   2c93e:	jne    2c7d1 <jinit_upsampler+0x1e1>
   2c944:	lea    0x2c5(%rip),%rax        # 2cc10 <int_upsample>
   2c94b:	mov    %rax,0x68(%r12,%r15,8)
   2c950:	mov    %r10,%rax
   2c953:	cltd   
   2c954:	idiv   %r8d
   2c957:	mov    %al,0xe8(%r12,%r15,1)
   2c95f:	mov    %r9,%rax
   2c962:	cltd   
   2c963:	idiv   %edi
   2c965:	mov    %al,0xf2(%r12,%r15,1)
   2c96d:	pushq  -0x30(%rbp)
   2c970:	popq   -0x40(%rbp)
   2c973:	jmpq   2c751 <jinit_upsampler+0x161>
   2c978:	mov    0x28(%r14),%eax
   2c97c:	cmp    $0x2,%eax
   2c97f:	jbe    2c888 <jinit_upsampler+0x298>
   2c985:	callq  3d960 <jsimd_can_h2v1_fancy_upsample>
   2c98a:	test   %eax,%eax
   2c98c:	jne    2ca08 <jinit_upsampler+0x418>
   2c98e:	lea    0x46b(%rip),%rax        # 2ce00 <h2v1_fancy_upsample>
   2c995:	mov    %rax,0x68(%r12,%r15,8)
   2c99a:	mov    -0x50(%rbp),%rsi
   2c99e:	mov    -0x70(%rbp),%rcx
   2c9a2:	pushq  -0x30(%rbp)
   2c9a5:	popq   -0x40(%rbp)
   2c9a8:	jmpq   2c751 <jinit_upsampler+0x161>
   2c9ad:	mov    %r14,0x68(%r12,%r15,8)
   2c9b2:	mov    %r14,%rsi
   2c9b5:	mov    -0x68(%rbp),%r14
   2c9b9:	mov    -0x70(%rbp),%rcx
   2c9bd:	pushq  -0x30(%rbp)
   2c9c0:	popq   -0x40(%rbp)
   2c9c3:	jmpq   2c751 <jinit_upsampler+0x161>
   2c9c8:	mov    0x28(%r14),%eax
   2c9cc:	cmp    $0x2,%eax
   2c9cf:	jbe    2c907 <jinit_upsampler+0x317>
   2c9d5:	callq  3d920 <jsimd_can_h2v2_fancy_upsample>
   2c9da:	test   %eax,%eax
   2c9dc:	jne    2ca24 <jinit_upsampler+0x434>
   2c9de:	lea    0x5ab(%rip),%rax        # 2cf90 <h2v2_fancy_upsample>
   2c9e5:	mov    %rax,0x68(%r12,%r15,8)
   2c9ea:	jmp    2ca2d <jinit_upsampler+0x43d>
   2c9ec:	mov    -0x60(%rbp),%rax
   2c9f0:	mov    %rax,0x68(%r12,%r15,8)
   2c9f5:	mov    -0x50(%rbp),%rsi
   2c9f9:	mov    -0x70(%rbp),%rcx
   2c9fd:	pushq  -0x30(%rbp)
   2ca00:	popq   -0x40(%rbp)
   2ca03:	jmpq   2c751 <jinit_upsampler+0x161>
   2ca08:	mov    -0x48(%rbp),%rax
   2ca0c:	mov    %rax,0x68(%r12,%r15,8)
   2ca11:	mov    -0x50(%rbp),%rsi
   2ca15:	mov    -0x70(%rbp),%rcx
   2ca19:	pushq  -0x30(%rbp)
   2ca1c:	popq   -0x40(%rbp)
   2ca1f:	jmpq   2c751 <jinit_upsampler+0x161>
   2ca24:	mov    -0x58(%rbp),%rax
   2ca28:	mov    %rax,0x68(%r12,%r15,8)
   2ca2d:	movl   $0x1,0x10(%r12)
   2ca36:	mov    -0x50(%rbp),%rsi
   2ca3a:	mov    -0x70(%rbp),%rcx
   2ca3e:	pushq  -0x30(%rbp)
   2ca41:	popq   -0x40(%rbp)
   2ca44:	jmpq   2c751 <jinit_upsampler+0x161>
   2ca49:	nopl   0x0(%rax)

000000000002ca50 <start_pass_upsample>:
   2ca50:	push   %rbp
   2ca51:	mov    %rsp,%rbp
   2ca54:	movslq 0x19c(%rdi),%rax
   2ca5b:	mov    0x260(%rdi),%rcx
   2ca62:	mov    %eax,0xb8(%rcx)
   2ca68:	mov    0x8c(%rdi),%eax
   2ca6e:	mov    %eax,0xbc(%rcx)
   2ca74:	leaveq 
   2ca75:	retq   
   2ca76:	nopw   %cs:0x0(%rax,%rax,1)

000000000002ca80 <sep_upsample>:
   2ca80:	push   %rbp
   2ca81:	mov    %rsp,%rbp
   2ca84:	sub    $0x40,%rsp
   2ca88:	mov    %rsi,-0x40(%rbp)
   2ca8c:	mov    %r15,-0x28(%rbp)
   2ca90:	mov    %r14,-0x20(%rbp)
   2ca94:	mov    %rbx,-0x8(%rbp)
   2ca98:	mov    %r12,-0x10(%rbp)
   2ca9c:	mov    %r13,-0x18(%rbp)
   2caa0:	mov    0x260(%rdi),%r13
   2caa7:	movslq 0x19c(%rdi),%rax
   2caae:	cmp    0xb8(%r13),%eax
   2cab5:	jle    2cb5c <sep_upsample+0xdc>
   2cabb:	mov    %rdx,%rbx
   2cabe:	mov    %rdi,%r12
   2cac1:	mov    %r9,%r15
   2cac4:	movslq 0xb8(%r13),%rdx
   2cacb:	movslq 0x19c(%r12),%r14
   2cad3:	sub    %edx,%r14d
   2cad6:	mov    0xbc(%r13),%eax
   2cadd:	cmp    %r14d,%eax
   2cae0:	jae    2cae5 <sep_upsample+0x65>
   2cae2:	mov    %rax,%r14
   2cae5:	mov    (%r15),%ecx
   2cae8:	mov    0x10(%rbp),%eax
   2caeb:	sub    %ecx,%eax
   2caed:	cmp    %eax,%r14d
   2caf0:	jbe    2caf5 <sep_upsample+0x75>
   2caf2:	mov    %rax,%r14
   2caf5:	lea    (%r8,%rcx,8),%rcx
   2caf9:	mov    0x268(%r12),%rax
   2cb01:	mov    0x8(%rax),%rax
   2cb05:	lea    0x18(%r13),%rsi
   2cb09:	mov    %r12,%rdi
   2cb0c:	mov    %r14,%r8
   2cb0f:	callq  *%rax
   2cb11:	mov    %r14,%rax
   2cb14:	add    (%r15),%eax
   2cb17:	mov    %eax,(%r15)
   2cb1a:	mov    0xbc(%r13),%eax
   2cb21:	sub    %r14d,%eax
   2cb24:	mov    %eax,0xbc(%r13)
   2cb2b:	add    0xb8(%r13),%r14d
   2cb32:	mov    %r14d,0xb8(%r13)
   2cb39:	movslq 0x19c(%r12),%rax
   2cb41:	cmp    %r14d,%eax
   2cb44:	jle    2cb76 <sep_upsample+0xf6>
   2cb46:	mov    -0x18(%rbp),%r13
   2cb4a:	mov    -0x10(%rbp),%r12
   2cb4e:	mov    -0x8(%rbp),%rbx
   2cb52:	mov    -0x20(%rbp),%r14
   2cb56:	mov    -0x28(%rbp),%r15
   2cb5a:	leaveq 
   2cb5b:	retq   
   2cb5c:	mov    0x130(%rdi),%r15
   2cb63:	xor    %r14d,%r14d
   2cb66:	mov    %r9,-0x38(%rbp)
   2cb6a:	mov    %r8,-0x30(%rbp)
   2cb6e:	mov    %rdx,%rbx
   2cb71:	mov    %rdi,%r12
   2cb74:	jmp    2cbc9 <sep_upsample+0x149>
   2cb76:	mov    (%rbx),%eax
   2cb78:	add    $0x1,%eax
   2cb7b:	mov    %eax,(%rbx)
   2cb7d:	mov    -0x18(%rbp),%r13
   2cb81:	mov    -0x10(%rbp),%r12
   2cb85:	mov    -0x8(%rbp),%rbx
   2cb89:	mov    -0x20(%rbp),%r14
   2cb8d:	mov    -0x28(%rbp),%r15
   2cb91:	leaveq 
   2cb92:	retq   
   2cb93:	movslq %r14d,%rcx
   2cb96:	mov    0xc0(%r13,%rcx,4),%eax
   2cb9e:	imul   (%rbx),%eax
   2cba1:	mov    %eax,%edx
   2cba3:	shl    $0x3,%rdx
   2cba7:	add    (%rsi,%rcx,8),%rdx
   2cbab:	mov    0x68(%r13,%rcx,8),%rax
   2cbb0:	lea    0x18(%r13,%rcx,8),%rcx
   2cbb5:	mov    %r12,%rdi
   2cbb8:	mov    %r15,%rsi
   2cbbb:	callq  *%rax
   2cbbd:	add    $0x1,%r14d
   2cbc1:	add    $0x60,%r15
   2cbc5:	mov    -0x40(%rbp),%rsi
   2cbc9:	movslq 0x38(%r12),%rax
   2cbce:	cmp    %r14d,%eax
   2cbd1:	jg     2cb93 <sep_upsample+0x113>
   2cbd3:	movl   $0x0,0xb8(%r13)
   2cbde:	mov    -0x30(%rbp),%r8
   2cbe2:	mov    -0x38(%rbp),%r15
   2cbe6:	jmpq   2cac4 <sep_upsample+0x44>
   2cbeb:	nopl   0x0(%rax,%rax,1)

000000000002cbf0 <fullsize_upsample>:
   2cbf0:	push   %rbp
   2cbf1:	mov    %rsp,%rbp
   2cbf4:	mov    %rdx,(%rcx)
   2cbf7:	leaveq 
   2cbf8:	retq   
   2cbf9:	nopl   0x0(%rax)

000000000002cc00 <noop_upsample>:
   2cc00:	push   %rbp
   2cc01:	mov    %rsp,%rbp
   2cc04:	movq   $0x0,(%rcx)
   2cc0b:	leaveq 
   2cc0c:	retq   
   2cc0d:	nopl   (%rax)

000000000002cc10 <int_upsample>:
   2cc10:	push   %rbp
   2cc11:	mov    %rsp,%rbp
   2cc14:	sub    $0x40,%rsp
   2cc18:	mov    %rbx,-0x8(%rbp)
   2cc1c:	mov    %r12,-0x10(%rbp)
   2cc20:	mov    %r13,-0x18(%rbp)
   2cc24:	mov    %r14,-0x20(%rbp)
   2cc28:	mov    %r15,-0x28(%rbp)
   2cc2c:	mov    (%rcx),%rcx
   2cc2f:	mov    %rcx,-0x40(%rbp)
   2cc33:	movslq 0x4(%rsi),%rax
   2cc37:	add    0x260(%rdi),%rax
   2cc3e:	movzbl 0xe8(%rax),%r9d
   2cc46:	mov    %r9,-0x30(%rbp)
   2cc4a:	movzbl 0xf2(%rax),%r12d
   2cc52:	lea    -0x1(%r12),%r8d
   2cc57:	mov    %r8,-0x38(%rbp)
   2cc5b:	mov    %rdx,%rbx
   2cc5e:	mov    %rdi,%r14
   2cc61:	mov    %rcx,%rdi
   2cc64:	xor    %r13d,%r13d
   2cc67:	mov    %r13,%r15
   2cc6a:	jmp    2ccb2 <int_upsample+0xa2>
   2cc6c:	mov    %r10b,(%rax)
   2cc6f:	add    $0x1,%rax
   2cc73:	add    $0xffffffff,%ecx
   2cc76:	test   %ecx,%ecx
   2cc78:	jg     2cc6c <int_upsample+0x5c>
   2cc7a:	add    $0x1,%rsi
   2cc7e:	cmp    %rdx,%rax
   2cc81:	jb     2ccd4 <int_upsample+0xc4>
   2cc83:	cmp    $0x1,%r12b
   2cc87:	jbe    2ccab <int_upsample+0x9b>
   2cc89:	lea    0x1(%r15),%ecx
   2cc8d:	mov    0x88(%r14),%r9d
   2cc94:	mov    %rdi,%rdx
   2cc97:	mov    %r15,%rsi
   2cc9a:	callq  43f0 <jcopy_sample_rows@plt>
   2cc9f:	mov    -0x38(%rbp),%r8
   2cca3:	mov    -0x30(%rbp),%r9
   2cca7:	mov    -0x40(%rbp),%rdi
   2ccab:	add    %r12d,%r15d
   2ccae:	add    $0x1,%r13d
   2ccb2:	movslq 0x19c(%r14),%rax
   2ccb9:	cmp    %r15d,%eax
   2ccbc:	jg     2ccdd <int_upsample+0xcd>
   2ccbe:	mov    -0x28(%rbp),%r15
   2ccc2:	mov    -0x20(%rbp),%r14
   2ccc6:	mov    -0x18(%rbp),%r13
   2ccca:	mov    -0x10(%rbp),%r12
   2ccce:	mov    -0x8(%rbp),%rbx
   2ccd2:	leaveq 
   2ccd3:	retq   
   2ccd4:	movzbl (%rsi),%r10d
   2ccd8:	mov    %r9,%rcx
   2ccdb:	jmp    2cc76 <int_upsample+0x66>
   2ccdd:	movslq %r13d,%rax
   2cce0:	mov    (%rbx,%rax,8),%rsi
   2cce4:	movslq %r15d,%rax
   2cce7:	mov    (%rdi,%rax,8),%rax
   2cceb:	mov    0x88(%r14),%ecx
   2ccf2:	lea    (%rax,%rcx,1),%rdx
   2ccf6:	jmp    2cc7e <int_upsample+0x6e>
   2ccf8:	nopl   0x0(%rax,%rax,1)

000000000002cd00 <h2v1_upsample>:
   2cd00:	push   %rbp
   2cd01:	mov    %rsp,%rbp
   2cd04:	mov    (%rcx),%r8
   2cd07:	xor    %esi,%esi
   2cd09:	jmp    2cd26 <h2v1_upsample+0x26>
   2cd0b:	movzbl (%rax),%r10d
   2cd0f:	mov    %r10b,(%rcx)
   2cd12:	mov    %r10b,0x1(%rcx)
   2cd16:	add    $0x1,%rax
   2cd1a:	add    $0x2,%rcx
   2cd1e:	cmp    %r9,%rcx
   2cd21:	jb     2cd0b <h2v1_upsample+0xb>
   2cd23:	add    $0x1,%esi
   2cd26:	movslq 0x19c(%rdi),%rax
   2cd2d:	cmp    %esi,%eax
   2cd2f:	jg     2cd33 <h2v1_upsample+0x33>
   2cd31:	leaveq 
   2cd32:	retq   
   2cd33:	movslq %esi,%rcx
   2cd36:	mov    (%rdx,%rcx,8),%rax
   2cd3a:	mov    (%r8,%rcx,8),%rcx
   2cd3e:	mov    0x88(%rdi),%r9d
   2cd45:	add    %rcx,%r9
   2cd48:	jmp    2cd1e <h2v1_upsample+0x1e>
   2cd4a:	nopw   0x0(%rax,%rax,1)

000000000002cd50 <h2v2_upsample>:
   2cd50:	push   %rbp
   2cd51:	mov    %rsp,%rbp
   2cd54:	sub    $0x30,%rsp
   2cd58:	mov    %rbx,-0x8(%rbp)
   2cd5c:	mov    %r12,-0x10(%rbp)
   2cd60:	mov    %r13,-0x18(%rbp)
   2cd64:	mov    %r14,-0x20(%rbp)
   2cd68:	mov    %r15,-0x28(%rbp)
   2cd6c:	mov    (%rcx),%r13
   2cd6f:	mov    %rdi,%r12
   2cd72:	mov    %rdx,%r14
   2cd75:	mov    $0x1,%r8d
   2cd7b:	xor    %ebx,%ebx
   2cd7d:	mov    %rbx,%r15
   2cd80:	jmp    2cdbe <h2v2_upsample+0x6e>
   2cd82:	movzbl (%rax),%edx
   2cd85:	mov    %dl,(%rcx)
   2cd87:	mov    %dl,0x1(%rcx)
   2cd8a:	add    $0x1,%rax
   2cd8e:	add    $0x2,%rcx
   2cd92:	cmp    %rsi,%rcx
   2cd95:	jb     2cd82 <h2v2_upsample+0x32>
   2cd97:	lea    0x1(%r15),%ecx
   2cd9b:	mov    0x88(%r12),%r9d
   2cda3:	mov    %r13,%rdx
   2cda6:	mov    %r13,%rdi
   2cda9:	mov    %r15,%rsi
   2cdac:	callq  43f0 <jcopy_sample_rows@plt>
   2cdb1:	add    $0x2,%r15d
   2cdb5:	add    $0x1,%ebx
   2cdb8:	mov    $0x1,%r8d
   2cdbe:	movslq 0x19c(%r12),%rax
   2cdc6:	cmp    %r15d,%eax
   2cdc9:	jg     2cde1 <h2v2_upsample+0x91>
   2cdcb:	mov    -0x28(%rbp),%r15
   2cdcf:	mov    -0x20(%rbp),%r14
   2cdd3:	mov    -0x18(%rbp),%r13
   2cdd7:	mov    -0x10(%rbp),%r12
   2cddb:	mov    -0x8(%rbp),%rbx
   2cddf:	leaveq 
   2cde0:	retq   
   2cde1:	movslq %ebx,%rax
   2cde4:	mov    (%r14,%rax,8),%rax
   2cde8:	movslq %r15d,%rcx
   2cdeb:	mov    0x0(%r13,%rcx,8),%rcx
   2cdf0:	mov    0x88(%r12),%edx
   2cdf8:	lea    (%rcx,%rdx,1),%rsi
   2cdfc:	jmp    2cd92 <h2v2_upsample+0x42>
   2cdfe:	xchg   %ax,%ax

000000000002ce00 <h2v1_fancy_upsample>:
   2ce00:	push   %rbp
   2ce01:	mov    %rsp,%rbp
   2ce04:	sub    $0x10,%rsp
   2ce08:	mov    %r15,-0x8(%rbp)
   2ce0c:	mov    (%rcx),%r15
   2ce0f:	xor    %r10d,%r10d
   2ce12:	jmp    2ce6b <h2v1_fancy_upsample+0x6b>
   2ce14:	movzbl -0x1(%rcx),%r9d
   2ce19:	movzbl (%rcx),%r11d
   2ce1d:	lea    (%r11,%r11,2),%r11d
   2ce21:	lea    0x1(%r9,%r11,1),%r9d
   2ce26:	shr    $0x2,%r9d
   2ce2a:	mov    %r9b,(%r8)
   2ce2d:	add    $0x1,%rcx
   2ce31:	movzbl (%rcx),%r9d
   2ce35:	lea    0x2(%r9,%r11,1),%r9d
   2ce3a:	shr    $0x2,%r9d
   2ce3e:	mov    %r9b,0x1(%r8)
   2ce42:	add    $0x2,%r8
   2ce46:	add    $0xffffffff,%eax
   2ce49:	test   %eax,%eax
   2ce4b:	jne    2ce14 <h2v1_fancy_upsample+0x14>
   2ce4d:	movzbl -0x1(%rcx),%r9d
   2ce52:	movzbl (%rcx),%ecx
   2ce55:	lea    (%rcx,%rcx,2),%eax
   2ce58:	lea    0x1(%r9,%rax,1),%eax
   2ce5d:	shr    $0x2,%eax
   2ce60:	mov    %al,(%r8)
   2ce63:	mov    %cl,0x1(%r8)
   2ce67:	add    $0x1,%r10d
   2ce6b:	movslq 0x19c(%rdi),%rax
   2ce72:	cmp    %r10d,%eax
   2ce75:	jg     2ce7d <h2v1_fancy_upsample+0x7d>
   2ce77:	mov    -0x8(%rbp),%r15
   2ce7b:	leaveq 
   2ce7c:	retq   
   2ce7d:	movslq %r10d,%rcx
   2ce80:	mov    (%rdx,%rcx,8),%rax
   2ce84:	movzbl (%rax),%r11d
   2ce88:	mov    (%r15,%rcx,8),%r9
   2ce8c:	mov    %r11b,(%r9)
   2ce8f:	lea    0x1(%rax),%rcx
   2ce93:	movzbl (%rcx),%r8d
   2ce97:	lea    (%r11,%r11,2),%eax
   2ce9b:	lea    0x2(%r8,%rax,1),%eax
   2cea0:	shr    $0x2,%eax
   2cea3:	mov    %al,0x1(%r9)
   2cea7:	mov    0x28(%rsi),%eax
   2ceaa:	add    $0xfffffffe,%eax
   2cead:	lea    0x2(%r9),%r8
   2ceb1:	jmp    2ce49 <h2v1_fancy_upsample+0x49>
   2ceb3:	data16 nopw %cs:0x0(%rax,%rax,1)
   2cebe:	xchg   %ax,%ax

000000000002cec0 <h1v2_fancy_upsample>:
   2cec0:	push   %rbp
   2cec1:	mov    %rsp,%rbp
   2cec4:	sub    $0x40,%rsp
   2cec8:	mov    %rbx,-0x8(%rbp)
   2cecc:	mov    %r12,-0x10(%rbp)
   2ced0:	mov    %r13,-0x18(%rbp)
   2ced4:	mov    %r14,-0x20(%rbp)
   2ced8:	mov    %r15,-0x28(%rbp)
   2cedc:	mov    %rdi,-0x30(%rbp)
   2cee0:	mov    (%rcx),%r12
   2cee3:	xor    %r10d,%r10d
   2cee6:	mov    %r10,%rax
   2cee9:	mov    %rax,%r9
   2ceec:	jmp    2cf32 <h1v2_fancy_upsample+0x72>
   2ceee:	movzbl (%rax),%r11d
   2cef2:	movzbl (%rcx),%ebx
   2cef5:	lea    (%rbx,%rbx,2),%ebx
   2cef8:	lea    0x1(%r11,%rbx,1),%ebx
   2cefd:	shr    $0x2,%ebx
   2cf00:	mov    %bl,(%rdi)
   2cf02:	add    $0x1,%rax
   2cf06:	add    $0x1,%rcx
   2cf0a:	add    $0x1,%rdi
   2cf0e:	add    $0x1,%r8d
   2cf12:	mov    0x28(%rsi),%ebx
   2cf15:	cmp    %r8d,%ebx
   2cf18:	ja     2ceee <h1v2_fancy_upsample+0x2e>
   2cf1a:	add    $0x1,%r9d
   2cf1e:	mov    -0x40(%rbp),%rax
   2cf22:	lea    0x1(%rax),%ebx
   2cf25:	cmp    $0x1,%ebx
   2cf28:	jle    2cf54 <h1v2_fancy_upsample+0x94>
   2cf2a:	mov    -0x38(%rbp),%rax
   2cf2e:	mov    -0x30(%rbp),%rdi
   2cf32:	movslq 0x19c(%rdi),%rcx
   2cf39:	cmp    %r9d,%ecx
   2cf3c:	jg     2cf62 <h1v2_fancy_upsample+0xa2>
   2cf3e:	mov    -0x28(%rbp),%r15
   2cf42:	mov    -0x20(%rbp),%r14
   2cf46:	mov    -0x18(%rbp),%r13
   2cf4a:	mov    -0x10(%rbp),%r12
   2cf4e:	mov    -0x8(%rbp),%rbx
   2cf52:	leaveq 
   2cf53:	retq   
   2cf54:	mov    (%rdx,%r13,8),%rcx
   2cf58:	test   %ebx,%ebx
   2cf5a:	je     2cf7a <h1v2_fancy_upsample+0xba>
   2cf5c:	mov    (%rdx,%r14,8),%rax
   2cf60:	jmp    2cf7e <h1v2_fancy_upsample+0xbe>
   2cf62:	lea    -0x1(%rax),%ecx
   2cf65:	movslq %ecx,%r15
   2cf68:	movslq %eax,%r13
   2cf6b:	add    $0x1,%eax
   2cf6e:	mov    %rax,-0x38(%rbp)
   2cf72:	movslq %eax,%r14
   2cf75:	mov    %r10,%rbx
   2cf78:	jmp    2cf25 <h1v2_fancy_upsample+0x65>
   2cf7a:	mov    (%rdx,%r15,8),%rax
   2cf7e:	movslq %r9d,%rdi
   2cf81:	mov    (%r12,%rdi,8),%rdi
   2cf85:	mov    %rbx,-0x40(%rbp)
   2cf89:	mov    %r10,%r8
   2cf8c:	jmp    2cf12 <h1v2_fancy_upsample+0x52>
   2cf8e:	xchg   %ax,%ax

000000000002cf90 <h2v2_fancy_upsample>:
   2cf90:	push   %rbp
   2cf91:	mov    %rsp,%rbp
   2cf94:	sub    $0x50,%rsp
   2cf98:	mov    %rbx,-0x8(%rbp)
   2cf9c:	mov    %r12,-0x10(%rbp)
   2cfa0:	mov    %r13,-0x18(%rbp)
   2cfa4:	mov    %r14,-0x20(%rbp)
   2cfa8:	mov    %r15,-0x28(%rbp)
   2cfac:	mov    %rdi,-0x40(%rbp)
   2cfb0:	mov    (%rcx),%rax
   2cfb3:	mov    %rax,-0x30(%rbp)
   2cfb7:	xor    %r8d,%r8d
   2cfba:	mov    %r8,%rcx
   2cfbd:	mov    %rcx,%r9
   2cfc0:	jmp    2d03e <h2v2_fancy_upsample+0xae>
   2cfc2:	movzbl (%rbx),%r10d
   2cfc6:	movzbl (%rdi),%r9d
   2cfca:	mov    %r8b,(%rcx)
   2cfcd:	lea    (%r9,%r9,2),%r8d
   2cfd1:	lea    (%r10,%r8,1),%r9d
   2cfd5:	lea    0x7(%r9,%r13,1),%r8d
   2cfda:	shr    $0x4,%r8d
   2cfde:	mov    %r8b,0x1(%rcx)
   2cfe2:	add    $0x2,%rcx
   2cfe6:	add    $0x1,%rdi
   2cfea:	add    $0x1,%rbx
   2cfee:	add    $0xffffffff,%eax
   2cff1:	mov    %r11,%r10
   2cff4:	mov    %r9,%r11
   2cff7:	lea    (%r11,%r11,2),%r13d
   2cffb:	lea    0x8(%r10,%r13,1),%r8d
   2d000:	shr    $0x4,%r8d
   2d004:	test   %eax,%eax
   2d006:	jne    2cfc2 <h2v2_fancy_upsample+0x32>
   2d008:	mov    %r8b,(%rcx)
   2d00b:	lea    0x7(,%r11,4),%eax
   2d013:	shr    $0x4,%eax
   2d016:	mov    %al,0x1(%rcx)
   2d019:	mov    -0x48(%rbp),%rax
   2d01d:	lea    0x1(%rax),%r9d
   2d021:	mov    -0x50(%rbp),%rax
   2d025:	lea    0x1(%rax),%r8d
   2d029:	mov    -0x30(%rbp),%rax
   2d02d:	cmp    $0x1,%r8d
   2d031:	jle    2d060 <h2v2_fancy_upsample+0xd0>
   2d033:	xor    %r8d,%r8d
   2d036:	mov    -0x38(%rbp),%rcx
   2d03a:	mov    -0x40(%rbp),%rdi
   2d03e:	movslq 0x19c(%rdi),%rdi
   2d045:	cmp    %r9d,%edi
   2d048:	jg     2d06f <h2v2_fancy_upsample+0xdf>
   2d04a:	mov    -0x28(%rbp),%r15
   2d04e:	mov    -0x20(%rbp),%r14
   2d052:	mov    -0x18(%rbp),%r13
   2d056:	mov    -0x10(%rbp),%r12
   2d05a:	mov    -0x8(%rbp),%rbx
   2d05e:	leaveq 
   2d05f:	retq   
   2d060:	mov    (%rdx,%r15,8),%r13
   2d064:	test   %r8d,%r8d
   2d067:	je     2d084 <h2v2_fancy_upsample+0xf4>
   2d069:	mov    (%rdx,%r14,8),%rbx
   2d06d:	jmp    2d088 <h2v2_fancy_upsample+0xf8>
   2d06f:	lea    -0x1(%rcx),%edi
   2d072:	movslq %edi,%r12
   2d075:	movslq %ecx,%r15
   2d078:	add    $0x1,%ecx
   2d07b:	mov    %rcx,-0x38(%rbp)
   2d07f:	movslq %ecx,%r14
   2d082:	jmp    2d02d <h2v2_fancy_upsample+0x9d>
   2d084:	mov    (%rdx,%r12,8),%rbx
   2d088:	movzbl (%rbx),%edi
   2d08b:	movzbl 0x0(%r13),%ecx
   2d090:	lea    (%rcx,%rcx,2),%ecx
   2d093:	lea    (%rdi,%rcx,1),%r10d
   2d097:	lea    0x8(,%r10,4),%ecx
   2d09f:	shr    $0x4,%ecx
   2d0a2:	movslq %r9d,%rdi
   2d0a5:	mov    (%rax,%rdi,8),%rdi
   2d0a9:	movzbl 0x1(%rbx),%eax
   2d0ad:	movzbl 0x1(%r13),%r11d
   2d0b2:	mov    %cl,(%rdi)
   2d0b4:	lea    (%r11,%r11,2),%ecx
   2d0b8:	lea    (%rax,%rcx,1),%r11d
   2d0bc:	lea    (%r10,%r10,2),%eax
   2d0c0:	lea    0x7(%r11,%rax,1),%eax
   2d0c5:	shr    $0x4,%eax
   2d0c8:	mov    %al,0x1(%rdi)
   2d0cb:	mov    0x28(%rsi),%eax
   2d0ce:	add    $0xfffffffe,%eax
   2d0d1:	lea    0x2(%rdi),%rcx
   2d0d5:	lea    0x2(%r13),%rdi
   2d0d9:	add    $0x2,%rbx
   2d0dd:	mov    %r9,-0x48(%rbp)
   2d0e1:	mov    %r8,-0x50(%rbp)
   2d0e5:	jmpq   2cff7 <h2v2_fancy_upsample+0x67>
   2d0ea:	nopw   0x0(%rax,%rax,1)

000000000002d0f0 <jpeg_read_coefficients>:
   2d0f0:	push   %rbp
   2d0f1:	mov    %rsp,%rbp
   2d0f4:	sub    $0x10,%rsp
   2d0f8:	mov    %r15,-0x10(%rbp)
   2d0fc:	movslq 0x24(%rdi),%rax
   2d100:	cmp    $0xca,%eax
   2d105:	je     2d112 <jpeg_read_coefficients+0x22>
   2d107:	mov    %r15,%rax
   2d10a:	mov    %r14,%rcx
   2d10d:	mov    %rdi,%r14
   2d110:	jmp    2d12c <jpeg_read_coefficients+0x3c>
   2d112:	mov    %r14,%r15
   2d115:	mov    %rdi,%r14
   2d118:	callq  2d220 <transdecode_master_selection>
   2d11d:	movl   $0xd1,0x24(%r14)
   2d125:	mov    %r15,%rcx
   2d128:	mov    -0x10(%rbp),%rax
   2d12c:	xor    %r15d,%r15d
   2d12f:	movslq 0x24(%r14),%rdx
   2d133:	cmp    $0xd1,%edx
   2d139:	je     2d177 <jpeg_read_coefficients+0x87>
   2d13b:	mov    %rax,%r15
   2d13e:	movslq 0x24(%r14),%rax
   2d142:	cmp    $0xd2,%eax
   2d147:	jne    2d17d <jpeg_read_coefficients+0x8d>
   2d149:	movslq 0x58(%r14),%rax
   2d14d:	test   %eax,%eax
   2d14f:	jne    2d186 <jpeg_read_coefficients+0x96>
   2d151:	mov    (%r14),%rax
   2d154:	movl   $0x14,0x28(%rax)
   2d15b:	movslq 0x24(%r14),%rdx
   2d15f:	mov    (%r14),%rax
   2d162:	mov    %edx,0x2c(%rax)
   2d165:	mov    (%r14),%rax
   2d168:	mov    (%rax),%rax
   2d16b:	mov    %r14,%rdi
   2d16e:	mov    %rcx,%r14
   2d171:	callq  *%rax
   2d173:	xor    %eax,%eax
   2d175:	leaveq 
   2d176:	retq   
   2d177:	mov    %rcx,-0x8(%rbp)
   2d17b:	jmp    2d1a4 <jpeg_read_coefficients+0xb4>
   2d17d:	cmp    $0xcf,%eax
   2d182:	je     2d149 <jpeg_read_coefficients+0x59>
   2d184:	jmp    2d151 <jpeg_read_coefficients+0x61>
   2d186:	mov    0x230(%r14),%rax
   2d18d:	mov    0x20(%rax),%rax
   2d191:	mov    %rcx,%r14
   2d194:	leaveq 
   2d195:	retq   
   2d196:	cmp    $0x2,%eax
   2d199:	je     2d1d2 <jpeg_read_coefficients+0xe2>
   2d19b:	mov    0x10(%r14),%rcx
   2d19f:	test   %rcx,%rcx
   2d1a2:	jne    2d1e7 <jpeg_read_coefficients+0xf7>
   2d1a4:	mov    0x10(%r14),%rax
   2d1a8:	test   %rax,%rax
   2d1ab:	je     2d1b2 <jpeg_read_coefficients+0xc2>
   2d1ad:	mov    %r14,%rdi
   2d1b0:	callq  *(%rax)
   2d1b2:	mov    0x240(%r14),%rax
   2d1b9:	mov    (%rax),%rax
   2d1bc:	mov    %r14,%rdi
   2d1bf:	callq  *%rax
   2d1c1:	test   %eax,%eax
   2d1c3:	jne    2d196 <jpeg_read_coefficients+0xa6>
   2d1c5:	mov    %r15,%rax
   2d1c8:	mov    -0x8(%rbp),%r14
   2d1cc:	mov    -0x10(%rbp),%r15
   2d1d0:	leaveq 
   2d1d1:	retq   
   2d1d2:	movl   $0xd2,0x24(%r14)
   2d1da:	mov    -0x8(%rbp),%rcx
   2d1de:	mov    -0x10(%rbp),%r15
   2d1e2:	jmpq   2d13e <jpeg_read_coefficients+0x4e>
   2d1e7:	cmp    $0x3,%eax
   2d1ea:	jne    2d215 <jpeg_read_coefficients+0x125>
   2d1ec:	mov    0x8(%rcx),%rax
   2d1f0:	add    $0x1,%rax
   2d1f4:	mov    %rax,0x8(%rcx)
   2d1f8:	mov    0x10(%r14),%rdx
   2d1fc:	mov    0x10(%rdx),%rcx
   2d200:	cmp    %rcx,%rax
   2d203:	jl     2d1a4 <jpeg_read_coefficients+0xb4>
   2d205:	mov    0x1a4(%r14),%eax
   2d20c:	add    %rcx,%rax
   2d20f:	mov    %rax,0x10(%rdx)
   2d213:	jmp    2d1a4 <jpeg_read_coefficients+0xb4>
   2d215:	cmp    $0x1,%eax
   2d218:	je     2d1ec <jpeg_read_coefficients+0xfc>
   2d21a:	jmp    2d1a4 <jpeg_read_coefficients+0xb4>
   2d21c:	nopl   0x0(%rax)

000000000002d220 <transdecode_master_selection>:
   2d220:	push   %rbp
   2d221:	mov    %rsp,%rbp
   2d224:	sub    $0x10,%rsp
   2d228:	mov    %r15,-0x8(%rbp)
   2d22c:	movl   $0x1,0x58(%rdi)
   2d233:	movslq 0x13c(%rdi),%rax
   2d23a:	test   %eax,%eax
   2d23c:	jne    2d253 <transdecode_master_selection+0x33>
   2d23e:	movslq 0x138(%rdi),%rax
   2d245:	test   %eax,%eax
   2d247:	jne    2d294 <transdecode_master_selection+0x74>
   2d249:	mov    %rdi,%r15
   2d24c:	callq  40b0 <jinit_huff_decoder@plt>
   2d251:	jmp    2d25b <transdecode_master_selection+0x3b>
   2d253:	mov    %rdi,%r15
   2d256:	callq  4090 <jinit_arith_decoder@plt>
   2d25b:	mov    $0x1,%esi
   2d260:	mov    %r15,%rdi
   2d263:	callq  4050 <jinit_d_coef_controller@plt>
   2d268:	mov    0x8(%r15),%rax
   2d26c:	mov    0x30(%rax),%rax
   2d270:	mov    %r15,%rdi
   2d273:	callq  *%rax
   2d275:	mov    0x240(%r15),%rax
   2d27c:	mov    0x10(%rax),%rax
   2d280:	mov    %r15,%rdi
   2d283:	callq  *%rax
   2d285:	mov    0x10(%r15),%rax
   2d289:	test   %rax,%rax
   2d28c:	jne    2d29e <transdecode_master_selection+0x7e>
   2d28e:	mov    -0x8(%rbp),%r15
   2d292:	leaveq 
   2d293:	retq   
   2d294:	mov    %rdi,%r15
   2d297:	callq  41d0 <jinit_phuff_decoder@plt>
   2d29c:	jmp    2d25b <transdecode_master_selection+0x3b>
   2d29e:	movslq 0x138(%r15),%rax
   2d2a5:	test   %eax,%eax
   2d2a7:	jne    2d2bf <transdecode_master_selection+0x9f>
   2d2a9:	mov    0x240(%r15),%rax
   2d2b0:	movslq 0x20(%rax),%rax
   2d2b4:	test   %eax,%eax
   2d2b6:	jne    2d305 <transdecode_master_selection+0xe5>
   2d2b8:	mov    $0x1,%eax
   2d2bd:	jmp    2d2c7 <transdecode_master_selection+0xa7>
   2d2bf:	movslq 0x38(%r15),%rax
   2d2c3:	lea    0x2(%rax,%rax,2),%eax
   2d2c7:	mov    0x10(%r15),%rcx
   2d2cb:	movq   $0x0,0x8(%rcx)
   2d2d3:	movslq %eax,%rax
   2d2d6:	mov    0x1a4(%r15),%ecx
   2d2dd:	imul   %rcx,%rax
   2d2e1:	mov    0x10(%r15),%rcx
   2d2e5:	mov    %rax,0x10(%rcx)
   2d2e9:	mov    0x10(%r15),%rax
   2d2ed:	movl   $0x0,0x18(%rax)
   2d2f4:	mov    0x10(%r15),%rax
   2d2f8:	movl   $0x1,0x1c(%rax)
   2d2ff:	mov    -0x8(%rbp),%r15
   2d303:	leaveq 
   2d304:	retq   
   2d305:	movslq 0x38(%r15),%rax
   2d309:	jmp    2d2c7 <transdecode_master_selection+0xa7>
   2d30b:	nopl   0x0(%rax,%rax,1)

000000000002d310 <jpeg_std_error>:
   2d310:	push   %rbp
   2d311:	mov    %rsp,%rbp
   2d314:	lea    0x85(%rip),%rax        # 2d3a0 <error_exit>
   2d31b:	mov    %rax,(%rdi)
   2d31e:	lea    0xeb(%rip),%rax        # 2d410 <emit_message>
   2d325:	mov    %rax,0x8(%rdi)
   2d329:	lea    0xa0(%rip),%rax        # 2d3d0 <output_message>
   2d330:	mov    %rax,0x10(%rdi)
   2d334:	lea    0x135(%rip),%rax        # 2d470 <format_message>
   2d33b:	mov    %rax,0x18(%rdi)
   2d33f:	lea    0x24a(%rip),%rax        # 2d590 <reset_error_mgr>
   2d346:	mov    %rax,0x20(%rdi)
   2d34a:	movl   $0x0,0x7c(%rdi)
   2d351:	movq   $0x0,0x80(%rdi)
   2d35c:	movl   $0x0,0x28(%rdi)
   2d363:	mov    0x40bde(%rip),%rax        # 6df48 <jpeg_std_message_table@@LIBJPEG_6.2+0x628>
   2d36a:	mov    %rax,0x88(%rdi)
   2d371:	mov    %rdi,%rax
   2d374:	movl   $0x7e,0x90(%rax)
   2d37e:	movq   $0x0,0x98(%rax)
   2d389:	movl   $0x0,0xa0(%rax)
   2d393:	movl   $0x0,0xa4(%rax)
   2d39d:	leaveq 
   2d39e:	retq   
   2d39f:	nop

000000000002d3a0 <error_exit>:
   2d3a0:	push   %rbp
   2d3a1:	mov    %rsp,%rbp
   2d3a4:	mov    (%rdi),%rax
   2d3a7:	mov    0x10(%rax),%rax
   2d3ab:	mov    %rdi,%rbx
   2d3ae:	callq  *%rax
   2d3b0:	mov    %rbx,%rdi
   2d3b3:	callq  4030 <jpeg_destroy@plt>
   2d3b8:	mov    $0x1,%edi
   2d3bd:	callq  4440 <exit@plt>
   2d3c2:	data16 nopw %cs:0x0(%rax,%rax,1)
   2d3cd:	nopl   (%rax)

000000000002d3d0 <output_message>:
   2d3d0:	push   %rbp
   2d3d1:	mov    %rsp,%rbp
   2d3d4:	sub    $0xd0,%rsp
   2d3db:	mov    (%rdi),%rax
   2d3de:	mov    0x18(%rax),%rax
   2d3e2:	lea    -0xc8(%rbp),%rsi
   2d3e9:	callq  *%rax
   2d3eb:	xor    %eax,%eax
   2d3ed:	mov    0x40c04(%rip),%rcx        # 6dff8 <stderr@GLIBC_2.2.5>
   2d3f4:	mov    (%rcx),%rdi
   2d3f7:	lea    0x2defe(%rip),%rsi        # 5b2fc <dither_matrix+0x126c>
   2d3fe:	lea    -0xc8(%rbp),%rdx
   2d405:	callq  42a0 <fprintf@plt>
   2d40a:	leaveq 
   2d40b:	retq   
   2d40c:	nopl   0x0(%rax)

000000000002d410 <emit_message>:
   2d410:	push   %rbp
   2d411:	mov    %rsp,%rbp
   2d414:	sub    $0x10,%rsp
   2d418:	mov    (%rdi),%rax
   2d41b:	test   %esi,%esi
   2d41d:	js     2d426 <emit_message+0x16>
   2d41f:	cmp    0x7c(%rax),%esi
   2d422:	jle    2d461 <emit_message+0x51>
   2d424:	leaveq 
   2d425:	retq   
   2d426:	mov    0x80(%rax),%rcx
   2d42d:	test   %rcx,%rcx
   2d430:	je     2d43b <emit_message+0x2b>
   2d432:	movslq 0x7c(%rax),%rcx
   2d436:	cmp    $0x2,%ecx
   2d439:	jle    2d44d <emit_message+0x3d>
   2d43b:	mov    %r15,-0x8(%rbp)
   2d43f:	mov    %rax,%r15
   2d442:	callq  *0x10(%r15)
   2d446:	mov    %r15,%rax
   2d449:	mov    -0x8(%rbp),%r15
   2d44d:	mov    0x80(%rax),%rcx
   2d454:	add    $0x1,%rcx
   2d458:	mov    %rcx,0x80(%rax)
   2d45f:	leaveq 
   2d460:	retq   
   2d461:	callq  *0x10(%rax)
   2d464:	leaveq 
   2d465:	retq   
   2d466:	nopw   %cs:0x0(%rax,%rax,1)

000000000002d470 <format_message>:
   2d470:	push   %rbp
   2d471:	mov    %rsp,%rbp
   2d474:	sub    $0x10,%rsp
   2d478:	xor    %ecx,%ecx
   2d47a:	mov    (%rdi),%r9
   2d47d:	movslq 0x28(%r9),%rdi
   2d481:	test   %edi,%edi
   2d483:	jle    2d49b <format_message+0x2b>
   2d485:	cmp    0x90(%r9),%edi
   2d48c:	jg     2d49b <format_message+0x2b>
   2d48e:	mov    0x88(%r9),%rax
   2d495:	mov    (%rax,%rdi,8),%rax
   2d499:	jmp    2d4ae <format_message+0x3e>
   2d49b:	mov    0x98(%r9),%rdx
   2d4a2:	test   %rdx,%rdx
   2d4a5:	jne    2d52b <format_message+0xbb>
   2d4ab:	mov    %rcx,%rax
   2d4ae:	test   %rax,%rax
   2d4b1:	je     2d53e <format_message+0xce>
   2d4b7:	mov    %rax,%r11
   2d4ba:	movsbq (%rax),%rdx
   2d4be:	test   %dl,%dl
   2d4c0:	je     2d4d8 <format_message+0x68>
   2d4c2:	add    $0x1,%rax
   2d4c6:	cmp    $0x25,%dl
   2d4c9:	jne    2d4ba <format_message+0x4a>
   2d4cb:	movsbq (%rax),%rax
   2d4cf:	cmp    $0x73,%al
   2d4d1:	jne    2d4d8 <format_message+0x68>
   2d4d3:	mov    $0x1,%ecx
   2d4d8:	test   %ecx,%ecx
   2d4da:	jg     2d554 <format_message+0xe4>
   2d4dc:	sub    $0x20,%rsp
   2d4e0:	movslq 0x3c(%r9),%rdi
   2d4e4:	movslq 0x40(%r9),%rax
   2d4e8:	movslq 0x44(%r9),%r10
   2d4ec:	movslq 0x48(%r9),%r8
   2d4f0:	movslq 0x2c(%r9),%rdx
   2d4f4:	movslq 0x30(%r9),%rcx
   2d4f8:	mov    %r15,-0x8(%rbp)
   2d4fc:	movslq 0x34(%r9),%r15
   2d500:	movslq 0x38(%r9),%r9
   2d504:	mov    %edi,(%rsp)
   2d507:	mov    %eax,0x8(%rsp)
   2d50b:	mov    %r10d,0x10(%rsp)
   2d510:	mov    %r8d,0x18(%rsp)
   2d515:	mov    %rsi,%rdi
   2d518:	mov    %r11,%rsi
   2d51b:	mov    %r15,%r8
   2d51e:	xor    %eax,%eax
   2d520:	callq  4430 <sprintf@plt>
   2d525:	mov    -0x8(%rbp),%r15
   2d529:	leaveq 
   2d52a:	retq   
   2d52b:	movslq 0xa0(%r9),%rax
   2d532:	cmp    %eax,%edi
   2d534:	jge    2d567 <format_message+0xf7>
   2d536:	mov    %rcx,%rax
   2d539:	jmpq   2d4ae <format_message+0x3e>
   2d53e:	mov    %edi,0x2c(%r9)
   2d542:	mov    0x88(%r9),%rax
   2d549:	mov    (%rax),%rax
   2d54c:	mov    %rax,%r11
   2d54f:	jmpq   2d4ba <format_message+0x4a>
   2d554:	xor    %eax,%eax
   2d556:	lea    0x2c(%r9),%rdx
   2d55a:	mov    %rsi,%rdi
   2d55d:	mov    %r11,%rsi
   2d560:	callq  4430 <sprintf@plt>
   2d565:	leaveq 
   2d566:	retq   
   2d567:	cmp    0xa4(%r9),%edi
   2d56e:	jle    2d578 <format_message+0x108>
   2d570:	mov    %rcx,%rax
   2d573:	jmpq   2d4ae <format_message+0x3e>
   2d578:	neg    %eax
   2d57a:	add    %edi,%eax
   2d57c:	movslq %eax,%rax
   2d57f:	mov    (%rdx,%rax,8),%rax
   2d583:	jmpq   2d4ae <format_message+0x3e>
   2d588:	nopl   0x0(%rax,%rax,1)

000000000002d590 <reset_error_mgr>:
   2d590:	push   %rbp
   2d591:	mov    %rsp,%rbp
   2d594:	mov    (%rdi),%rax
   2d597:	movq   $0x0,0x80(%rax)
   2d5a2:	mov    (%rdi),%rax
   2d5a5:	movl   $0x0,0x28(%rax)
   2d5ac:	leaveq 
   2d5ad:	retq   
   2d5ae:	xchg   %ax,%ax

000000000002d5b0 <jpeg_fdct_float>:
   2d5b0:	push   %rbp
   2d5b1:	mov    %rsp,%rbp
   2d5b4:	movss  0x2dd43(%rip),%xmm8        # 5b300 <dither_matrix+0x1270>
   2d5bd:	mov    $0x7,%eax
   2d5c2:	mov    %rax,%rcx
   2d5c5:	mov    %rdi,%rdx
   2d5c8:	jmpq   2d710 <jpeg_fdct_float+0x160>
   2d5cd:	movss  0x14(%rdx),%xmm14
   2d5d3:	movss  0x8(%rdx),%xmm5
   2d5d8:	movapd %xmm14,%xmm11
   2d5dd:	addss  %xmm5,%xmm11
   2d5e2:	movss  0x18(%rdx),%xmm7
   2d5e7:	movss  0x4(%rdx),%xmm0
   2d5ec:	movapd %xmm7,%xmm2
   2d5f0:	addss  %xmm0,%xmm2
   2d5f4:	movapd %xmm11,%xmm15
   2d5f9:	addss  %xmm2,%xmm15
   2d5fe:	movss  0x10(%rdx),%xmm12
   2d604:	movss  0xc(%rdx),%xmm3
   2d609:	movapd %xmm12,%xmm9
   2d60e:	addss  %xmm3,%xmm9
   2d613:	movss  0x1c(%rdx),%xmm10
   2d619:	movss  (%rdx),%xmm1
   2d61d:	movapd %xmm10,%xmm4
   2d622:	addss  %xmm1,%xmm4
   2d626:	movapd %xmm9,%xmm6
   2d62b:	addss  %xmm4,%xmm6
   2d62f:	movapd %xmm15,%xmm13
   2d634:	addss  %xmm6,%xmm13
   2d639:	movss  %xmm13,(%rdx)
   2d63e:	subss  %xmm15,%xmm6
   2d643:	movss  %xmm6,0x10(%rdx)
   2d648:	subss  %xmm11,%xmm2
   2d64d:	subss  %xmm9,%xmm4
   2d652:	addss  %xmm4,%xmm2
   2d656:	mulss  %xmm8,%xmm2
   2d65b:	movapd %xmm2,%xmm6
   2d65f:	addss  %xmm4,%xmm6
   2d663:	movss  %xmm6,0x8(%rdx)
   2d668:	subss  %xmm2,%xmm4
   2d66c:	movss  %xmm4,0x18(%rdx)
   2d671:	subss  %xmm12,%xmm3
   2d676:	subss  %xmm14,%xmm5
   2d67b:	addss  %xmm5,%xmm3
   2d67f:	subss  %xmm7,%xmm0
   2d683:	subss  %xmm10,%xmm1
   2d688:	movapd %xmm0,%xmm2
   2d68c:	addss  %xmm1,%xmm2
   2d690:	movapd %xmm3,%xmm4
   2d694:	subss  %xmm2,%xmm4
   2d698:	movss  0x2dc64(%rip),%xmm6        # 5b304 <dither_matrix+0x1274>
   2d6a0:	mulss  %xmm6,%xmm4
   2d6a4:	movss  0x2dc5c(%rip),%xmm6        # 5b308 <dither_matrix+0x1278>
   2d6ac:	mulss  %xmm6,%xmm3
   2d6b0:	movapd %xmm4,%xmm6
   2d6b4:	addss  %xmm3,%xmm6
   2d6b8:	addss  %xmm5,%xmm0
   2d6bc:	mulss  %xmm8,%xmm0
   2d6c1:	movapd %xmm1,%xmm3
   2d6c5:	subss  %xmm0,%xmm3
   2d6c9:	movapd %xmm6,%xmm5
   2d6cd:	addss  %xmm3,%xmm5
   2d6d1:	movss  %xmm5,0x14(%rdx)
   2d6d6:	subss  %xmm6,%xmm3
   2d6da:	movss  %xmm3,0xc(%rdx)
   2d6df:	movss  0x2dc25(%rip),%xmm3        # 5b30c <dither_matrix+0x127c>
   2d6e7:	mulss  %xmm3,%xmm2
   2d6eb:	addss  %xmm4,%xmm2
   2d6ef:	addss  %xmm0,%xmm1
   2d6f3:	movapd %xmm2,%xmm0
   2d6f7:	addss  %xmm1,%xmm0
   2d6fb:	movss  %xmm0,0x4(%rdx)
   2d700:	subss  %xmm2,%xmm1
   2d704:	movss  %xmm1,0x1c(%rdx)
   2d709:	add    $0x20,%rdx
   2d70d:	add    $0xffffffff,%ecx
   2d710:	test   %ecx,%ecx
   2d712:	jns    2d5cd <jpeg_fdct_float+0x1d>
   2d718:	jmpq   2d879 <jpeg_fdct_float+0x2c9>
   2d71d:	movss  0xa0(%rdi),%xmm15
   2d726:	movss  0x40(%rdi),%xmm6
   2d72b:	movapd %xmm15,%xmm14
   2d730:	addss  %xmm6,%xmm14
   2d735:	movss  0xc0(%rdi),%xmm13
   2d73e:	movss  0x20(%rdi),%xmm3
   2d743:	movapd %xmm13,%xmm0
   2d748:	addss  %xmm3,%xmm0
   2d74c:	movapd %xmm14,%xmm12
   2d751:	addss  %xmm0,%xmm12
   2d756:	movss  0x80(%rdi),%xmm11
   2d75f:	movss  0x60(%rdi),%xmm1
   2d764:	movapd %xmm11,%xmm10
   2d769:	addss  %xmm1,%xmm10
   2d76e:	movss  0xe0(%rdi),%xmm9
   2d777:	movss  (%rdi),%xmm2
   2d77b:	movapd %xmm9,%xmm4
   2d780:	addss  %xmm2,%xmm4
   2d784:	movapd %xmm10,%xmm5
   2d789:	addss  %xmm4,%xmm5
   2d78d:	movapd %xmm12,%xmm7
   2d792:	addss  %xmm5,%xmm7
   2d796:	movss  %xmm7,(%rdi)
   2d79a:	subss  %xmm12,%xmm5
   2d79f:	movss  %xmm5,0x80(%rdi)
   2d7a7:	subss  %xmm14,%xmm0
   2d7ac:	subss  %xmm10,%xmm4
   2d7b1:	addss  %xmm4,%xmm0
   2d7b5:	mulss  %xmm8,%xmm0
   2d7ba:	movapd %xmm0,%xmm5
   2d7be:	addss  %xmm4,%xmm5
   2d7c2:	movss  %xmm5,0x40(%rdi)
   2d7c7:	subss  %xmm0,%xmm4
   2d7cb:	movss  %xmm4,0xc0(%rdi)
   2d7d3:	subss  %xmm11,%xmm1
   2d7d8:	subss  %xmm15,%xmm6
   2d7dd:	addss  %xmm6,%xmm1
   2d7e1:	subss  %xmm13,%xmm3
   2d7e6:	subss  %xmm9,%xmm2
   2d7eb:	movapd %xmm3,%xmm0
   2d7ef:	addss  %xmm2,%xmm0
   2d7f3:	movapd %xmm1,%xmm4
   2d7f7:	subss  %xmm0,%xmm4
   2d7fb:	movss  0x2db01(%rip),%xmm5        # 5b304 <dither_matrix+0x1274>
   2d803:	mulss  %xmm5,%xmm4
   2d807:	movss  0x2daf9(%rip),%xmm5        # 5b308 <dither_matrix+0x1278>
   2d80f:	mulss  %xmm5,%xmm1
   2d813:	movapd %xmm4,%xmm7
   2d817:	addss  %xmm1,%xmm7
   2d81b:	addss  %xmm6,%xmm3
   2d81f:	mulss  %xmm8,%xmm3
   2d824:	movapd %xmm2,%xmm1
   2d828:	subss  %xmm3,%xmm1
   2d82c:	movapd %xmm7,%xmm5
   2d830:	addss  %xmm1,%xmm5
   2d834:	movss  %xmm5,0xa0(%rdi)
   2d83c:	subss  %xmm7,%xmm1
   2d840:	movss  %xmm1,0x60(%rdi)
   2d845:	movss  0x2dabf(%rip),%xmm1        # 5b30c <dither_matrix+0x127c>
   2d84d:	mulss  %xmm1,%xmm0
   2d851:	addss  %xmm4,%xmm0
   2d855:	addss  %xmm3,%xmm2
   2d859:	movapd %xmm0,%xmm1
   2d85d:	addss  %xmm2,%xmm1
   2d861:	movss  %xmm1,0x20(%rdi)
   2d866:	subss  %xmm0,%xmm2
   2d86a:	movss  %xmm2,0xe0(%rdi)
   2d872:	add    $0xffffffff,%eax
   2d875:	add    $0x4,%rdi
   2d879:	test   %eax,%eax
   2d87b:	jns    2d71d <jpeg_fdct_float+0x16d>
   2d881:	leaveq 
   2d882:	retq   
   2d883:	nopw   %cs:0x0(%rax,%rax,1)
   2d88d:	nopl   (%rax)

000000000002d890 <jpeg_fdct_ifast>:
   2d890:	push   %rbp
   2d891:	mov    %rsp,%rbp
   2d894:	sub    $0x50,%rsp
   2d898:	mov    %rbx,-0x20(%rbp)
   2d89c:	mov    %r12,-0x28(%rbp)
   2d8a0:	mov    %r13,-0x30(%rbp)
   2d8a4:	mov    %r14,-0x38(%rbp)
   2d8a8:	mov    %r15,-0x40(%rbp)
   2d8ac:	mov    %rdi,-0x18(%rbp)
   2d8b0:	mov    $0x7,%eax
   2d8b5:	jmpq   2da27 <jpeg_fdct_ifast+0x197>
   2d8ba:	movswq 0xa(%rdi),%r11
   2d8bf:	movswq 0x4(%rdi),%rsi
   2d8c4:	lea    (%r11,%rsi,1),%r10d
   2d8c8:	movswq 0xc(%rdi),%r9
   2d8cd:	movswq 0x2(%rdi),%rbx
   2d8d2:	lea    (%r9,%rbx,1),%ecx
   2d8d6:	lea    (%r10,%rcx,1),%r14d
   2d8da:	movswq 0x8(%rdi),%r15
   2d8df:	movswq 0x6(%rdi),%rdx
   2d8e4:	lea    (%r15,%rdx,1),%r13d
   2d8e8:	movswq 0xe(%rdi),%r12
   2d8ed:	mov    %r12,-0x10(%rbp)
   2d8f1:	movswq (%rdi),%r8
   2d8f5:	mov    %rax,-0x48(%rbp)
   2d8f9:	mov    %r8,-0x8(%rbp)
   2d8fd:	add    %r12d,%r8d
   2d900:	lea    0x0(%r13,%r8,1),%eax
   2d905:	lea    (%r14,%rax,1),%r12d
   2d909:	mov    %r12w,(%rdi)
   2d90d:	sub    %r14w,%ax
   2d911:	mov    %ax,0x8(%rdi)
   2d915:	mov    %r8,%r14
   2d918:	sub    %r13w,%r14w
   2d91c:	movswq %r14w,%r12
   2d920:	sub    %r10w,%cx
   2d924:	movswq %cx,%rax
   2d928:	add    %r12d,%eax
   2d92b:	movslq %eax,%rcx
   2d92e:	lea    (%rcx,%rcx,4),%rax
   2d932:	lea    (%rcx,%rax,2),%rax
   2d936:	shl    $0x4,%rax
   2d93a:	lea    (%rax,%rcx,4),%rax
   2d93e:	add    %rcx,%rax
   2d941:	sar    $0x8,%rax
   2d945:	lea    (%rax,%r14,1),%ecx
   2d949:	mov    %cx,0x4(%rdi)
   2d94d:	add    %r13d,%eax
   2d950:	sub    %ax,%r8w
   2d954:	mov    %r8w,0xc(%rdi)
   2d959:	sub    %r15w,%dx
   2d95d:	sub    %r11w,%si
   2d961:	lea    (%rdx,%rsi,1),%eax
   2d964:	movswq %ax,%rcx
   2d968:	sub    %r9w,%bx
   2d96c:	mov    -0x10(%rbp),%r9
   2d970:	mov    -0x8(%rbp),%rdx
   2d974:	mov    %rdx,%r10
   2d977:	sub    %r9w,%r10w
   2d97b:	lea    (%rbx,%r10,1),%eax
   2d97f:	movswq %ax,%r11
   2d983:	mov    %rcx,%rax
   2d986:	sub    %r11d,%eax
   2d989:	movslq %eax,%r8
   2d98c:	lea    (%r8,%r8,2),%rax
   2d990:	shl    $0x5,%rax
   2d994:	lea    (%rax,%r8,2),%rax
   2d998:	sar    $0x8,%rax
   2d99c:	mov    %rcx,%r8
   2d99f:	shl    $0x7,%r8
   2d9a3:	lea    (%r8,%rcx,8),%r8
   2d9a7:	lea    (%r8,%rcx,2),%r8
   2d9ab:	add    %r8,%rcx
   2d9ae:	sar    $0x8,%rcx
   2d9b2:	lea    (%rax,%rcx,1),%r8d
   2d9b6:	lea    (%rbx,%rsi,1),%ecx
   2d9b9:	movswq %cx,%rsi
   2d9bd:	lea    (%rsi,%rsi,4),%rcx
   2d9c1:	lea    (%rsi,%rcx,2),%rcx
   2d9c5:	shl    $0x4,%rcx
   2d9c9:	lea    (%rcx,%rsi,4),%rcx
   2d9cd:	add    %rsi,%rcx
   2d9d0:	sar    $0x8,%rcx
   2d9d4:	lea    (%r9,%rcx,1),%ebx
   2d9d8:	mov    %rdx,%rsi
   2d9db:	sub    %bx,%si
   2d9de:	add    %r8d,%esi
   2d9e1:	mov    %si,0xa(%rdi)
   2d9e5:	lea    (%rbx,%r8,1),%esi
   2d9e9:	sub    %si,%dx
   2d9ec:	mov    %dx,0x6(%rdi)
   2d9f0:	lea    (%r11,%r11,4),%rdx
   2d9f4:	shl    $0x6,%rdx
   2d9f8:	lea    (%rdx,%r11,8),%rdx
   2d9fc:	lea    (%rdx,%r11,4),%rdx
   2da00:	lea    (%rdx,%r11,2),%rdx
   2da04:	sar    $0x8,%rdx
   2da08:	add    %eax,%edx
   2da0a:	lea    (%r10,%rcx,1),%eax
   2da0e:	lea    (%rdx,%rax,1),%ecx
   2da11:	mov    %cx,0x2(%rdi)
   2da15:	sub    %dx,%ax
   2da18:	mov    %ax,0xe(%rdi)
   2da1c:	add    $0x10,%rdi
   2da20:	mov    -0x48(%rbp),%rax
   2da24:	add    $0xffffffff,%eax
   2da27:	test   %eax,%eax
   2da29:	jns    2d8ba <jpeg_fdct_ifast+0x2a>
   2da2f:	mov    -0x18(%rbp),%rcx
   2da33:	mov    $0x7,%eax
   2da38:	jmpq   2dbab <jpeg_fdct_ifast+0x31b>
   2da3d:	movswq 0x50(%rcx),%r15
   2da42:	movswq 0x20(%rcx),%rbx
   2da47:	lea    (%r15,%rbx,1),%r14d
   2da4b:	movswq 0x60(%rcx),%r13
   2da50:	movswq 0x10(%rcx),%rsi
   2da55:	lea    0x0(%r13,%rsi,1),%edx
   2da5a:	lea    (%r14,%rdx,1),%r12d
   2da5e:	movswq 0x40(%rcx),%r11
   2da63:	movswq 0x30(%rcx),%rdi
   2da68:	lea    (%r11,%rdi,1),%r10d
   2da6c:	movswq 0x70(%rcx),%r9
   2da71:	mov    %r9,-0x18(%rbp)
   2da75:	movswq (%rcx),%r8
   2da79:	mov    %rax,-0x48(%rbp)
   2da7d:	mov    %r8,-0x10(%rbp)
   2da81:	lea    (%r9,%r8,1),%eax
   2da85:	lea    (%r10,%rax,1),%r8d
   2da89:	lea    (%r12,%r8,1),%r9d
   2da8d:	mov    %r9w,(%rcx)
   2da91:	sub    %r12w,%r8w
   2da95:	mov    %r8w,0x40(%rcx)
   2da9a:	mov    %rax,%r9
   2da9d:	sub    %r10w,%r9w
   2daa1:	movswq %r9w,%r8
   2daa5:	sub    %r14w,%dx
   2daa9:	movswq %dx,%rdx
   2daad:	add    %r8d,%edx
   2dab0:	movslq %edx,%r8
   2dab3:	lea    (%r8,%r8,4),%rdx
   2dab7:	lea    (%r8,%rdx,2),%rdx
   2dabb:	shl    $0x4,%rdx
   2dabf:	lea    (%rdx,%r8,4),%rdx
   2dac3:	add    %r8,%rdx
   2dac6:	sar    $0x8,%rdx
   2daca:	lea    (%rdx,%r9,1),%r8d
   2dace:	mov    %r8w,0x20(%rcx)
   2dad3:	add    %r10d,%edx
   2dad6:	sub    %dx,%ax
   2dad9:	mov    %ax,0x60(%rcx)
   2dadd:	sub    %r11w,%di
   2dae1:	sub    %r15w,%bx
   2dae5:	lea    (%rdi,%rbx,1),%eax
   2dae8:	movswq %ax,%r8
   2daec:	sub    %r13w,%si
   2daf0:	mov    -0x18(%rbp),%r11
   2daf4:	mov    -0x10(%rbp),%rdi
   2daf8:	mov    %rdi,%r10
   2dafb:	sub    %r11w,%r10w
   2daff:	lea    (%rsi,%r10,1),%eax
   2db03:	movswq %ax,%r9
   2db07:	mov    %r8,%rax
   2db0a:	sub    %r9d,%eax
   2db0d:	movslq %eax,%rdx
   2db10:	lea    (%rdx,%rdx,2),%rax
   2db14:	shl    $0x5,%rax
   2db18:	lea    (%rax,%rdx,2),%rax
   2db1c:	sar    $0x8,%rax
   2db20:	mov    %r8,%rdx
   2db23:	shl    $0x7,%rdx
   2db27:	lea    (%rdx,%r8,8),%rdx
   2db2b:	lea    (%rdx,%r8,2),%rdx
   2db2f:	add    %r8,%rdx
   2db32:	sar    $0x8,%rdx
   2db36:	lea    (%rax,%rdx,1),%r8d
   2db3a:	lea    (%rsi,%rbx,1),%edx
   2db3d:	movswq %dx,%rsi
   2db41:	lea    (%rsi,%rsi,4),%rdx
   2db45:	lea    (%rsi,%rdx,2),%rdx
   2db49:	shl    $0x4,%rdx
   2db4d:	lea    (%rdx,%rsi,4),%rdx
   2db51:	add    %rsi,%rdx
   2db54:	sar    $0x8,%rdx
   2db58:	lea    (%r11,%rdx,1),%ebx
   2db5c:	mov    %rdi,%rsi
   2db5f:	sub    %bx,%si
   2db62:	add    %r8d,%esi
   2db65:	mov    %si,0x50(%rcx)
   2db69:	lea    (%rbx,%r8,1),%esi
   2db6d:	sub    %si,%di
   2db70:	mov    %di,0x30(%rcx)
   2db74:	lea    (%r9,%r9,4),%rsi
   2db78:	shl    $0x6,%rsi
   2db7c:	lea    (%rsi,%r9,8),%rsi
   2db80:	lea    (%rsi,%r9,4),%rsi
   2db84:	lea    (%rsi,%r9,2),%rsi
   2db88:	sar    $0x8,%rsi
   2db8c:	add    %eax,%esi
   2db8e:	lea    (%r10,%rdx,1),%eax
   2db92:	lea    (%rsi,%rax,1),%edx
   2db95:	mov    %dx,0x10(%rcx)
   2db99:	sub    %si,%ax
   2db9c:	mov    %ax,0x70(%rcx)
   2dba0:	mov    -0x48(%rbp),%rax
   2dba4:	add    $0xffffffff,%eax
   2dba7:	add    $0x2,%rcx
   2dbab:	test   %eax,%eax
   2dbad:	jns    2da3d <jpeg_fdct_ifast+0x1ad>
   2dbb3:	mov    -0x40(%rbp),%r15
   2dbb7:	mov    -0x38(%rbp),%r14
   2dbbb:	mov    -0x30(%rbp),%r13
   2dbbf:	mov    -0x28(%rbp),%r12
   2dbc3:	mov    -0x20(%rbp),%rbx
   2dbc7:	leaveq 
   2dbc8:	retq   
   2dbc9:	nopl   0x0(%rax)

000000000002dbd0 <jpeg_fdct_islow>:
   2dbd0:	push   %rbp
   2dbd1:	mov    %rsp,%rbp
   2dbd4:	sub    $0x50,%rsp
   2dbd8:	mov    %rbx,-0x20(%rbp)
   2dbdc:	mov    %r12,-0x28(%rbp)
   2dbe0:	mov    %r13,-0x30(%rbp)
   2dbe4:	mov    %r14,-0x38(%rbp)
   2dbe8:	mov    %r15,-0x40(%rbp)
   2dbec:	mov    %rdi,-0x18(%rbp)
   2dbf0:	mov    $0x7,%eax
   2dbf5:	jmpq   2de31 <jpeg_fdct_islow+0x261>
   2dbfa:	movswq 0xa(%rdi),%r10
   2dbff:	movswq 0x4(%rdi),%rdx
   2dc04:	lea    (%r10,%rdx,1),%ecx
   2dc08:	movslq %ecx,%r11
   2dc0b:	movswq 0xc(%rdi),%rsi
   2dc10:	mov    %rsi,-0x10(%rbp)
   2dc14:	movswq 0x2(%rdi),%rcx
   2dc19:	mov    %rcx,-0x8(%rbp)
   2dc1d:	add    %esi,%ecx
   2dc1f:	movslq %ecx,%rcx
   2dc22:	lea    (%r11,%rcx,1),%r12
   2dc26:	movswq 0x8(%rdi),%r13
   2dc2b:	movswq 0x6(%rdi),%rsi
   2dc30:	lea    0x0(%r13,%rsi,1),%ebx
   2dc35:	movslq %ebx,%r14
   2dc38:	movswq 0xe(%rdi),%r15
   2dc3d:	movswq (%rdi),%rbx
   2dc41:	mov    %rax,-0x48(%rbp)
   2dc45:	lea    (%r15,%rbx,1),%eax
   2dc49:	movslq %eax,%r8
   2dc4c:	lea    (%r14,%r8,1),%rax
   2dc50:	lea    (%r12,%rax,1),%r9
   2dc54:	shl    $0x2,%r9d
   2dc58:	mov    %r9w,(%rdi)
   2dc5c:	sub    %r12,%rax
   2dc5f:	shl    $0x2,%eax
   2dc62:	mov    %ax,0x8(%rdi)
   2dc66:	sub    %r11,%rcx
   2dc69:	sub    %r14,%r8
   2dc6c:	lea    (%rcx,%r8,1),%r9
   2dc70:	mov    %r9,%rax
   2dc73:	shl    $0x4,%rax
   2dc77:	mov    %r9,%r11
   2dc7a:	shl    $0x8,%r11
   2dc7e:	add    %r11,%rax
   2dc81:	lea    (%rax,%r9,4),%rax
   2dc85:	add    %r9,%rax
   2dc88:	shl    $0x4,%rax
   2dc8c:	add    %rax,%r9
   2dc8f:	lea    (%r8,%r8,2),%rax
   2dc93:	shl    $0x4,%rax
   2dc97:	add    %r8,%rax
   2dc9a:	shl    $0x7,%rax
   2dc9e:	add    %r8,%r8
   2dca1:	sub    %r8,%rax
   2dca4:	lea    0x400(%r9,%rax,1),%rax
   2dcac:	sar    $0xb,%rax
   2dcb0:	mov    %ax,0x4(%rdi)
   2dcb4:	imul   $0xffffffffffffc4df,%rcx,%rcx
   2dcbb:	lea    0x400(%rcx,%r9,1),%rax
   2dcc3:	sar    $0xb,%rax
   2dcc7:	mov    %ax,0xc(%rdi)
   2dccb:	sub    %r15d,%ebx
   2dcce:	movslq %ebx,%r11
   2dcd1:	sub    %r10d,%edx
   2dcd4:	movslq %edx,%rdx
   2dcd7:	lea    (%r11,%rdx,1),%r8
   2dcdb:	sub    %r13d,%esi
   2dcde:	movslq %esi,%rsi
   2dce1:	mov    -0x10(%rbp),%rcx
   2dce5:	mov    -0x8(%rbp),%rax
   2dce9:	sub    %ecx,%eax
   2dceb:	movslq %eax,%r10
   2dcee:	lea    (%rsi,%r10,1),%rax
   2dcf2:	lea    (%r8,%rax,1),%rbx
   2dcf6:	lea    (%rbx,%rbx,8),%rcx
   2dcfa:	shl    $0x5,%rcx
   2dcfe:	lea    (%rcx,%rbx,8),%rcx
   2dd02:	lea    (%rcx,%rbx,4),%rcx
   2dd06:	add    %rbx,%rcx
   2dd09:	shl    $0x5,%rcx
   2dd0d:	lea    (%rbx,%rcx,1),%r9
   2dd11:	lea    (%rax,%rax,4),%rcx
   2dd15:	mov    %rcx,%rbx
   2dd18:	shl    $0x6,%rbx
   2dd1c:	sub    %rbx,%rcx
   2dd1f:	shl    $0xe,%rax
   2dd23:	add    %rcx,%rax
   2dd26:	mov    %r9,%rbx
   2dd29:	sub    %rax,%rbx
   2dd2c:	lea    (%rsi,%r11,1),%rcx
   2dd30:	imul   $0xffffffffffffe333,%rcx,%rcx
   2dd37:	lea    (%rsi,%rsi,8),%rax
   2dd3b:	lea    (%rsi,%rax,2),%rax
   2dd3f:	shl    $0x7,%rax
   2dd43:	lea    (%rax,%rsi,8),%rax
   2dd47:	lea    (%rax,%rsi,4),%rax
   2dd4b:	lea    (%rax,%rsi,2),%rax
   2dd4f:	add    %rcx,%rax
   2dd52:	lea    0x400(%rax,%rbx,1),%rax
   2dd5a:	sar    $0xb,%rax
   2dd5e:	mov    %ax,0xe(%rdi)
   2dd62:	mov    %r8,%rsi
   2dd65:	shl    $0x2,%rsi
   2dd69:	lea    (%r8,%rsi,1),%rax
   2dd6d:	mov    %rax,%r8
   2dd70:	shl    $0x7,%r8
   2dd74:	shl    $0x9,%rax
   2dd78:	add    %r8,%rax
   2dd7b:	sub    %rax,%rsi
   2dd7e:	add    %r9,%rsi
   2dd81:	lea    (%rdx,%r10,1),%r8
   2dd85:	lea    (%r8,%r8,4),%rax
   2dd89:	lea    (%r8,%rax,8),%rax
   2dd8d:	shl    $0x9,%rax
   2dd91:	lea    (%rax,%r8,2),%rax
   2dd95:	add    %rax,%r8
   2dd98:	mov    %rdx,%r9
   2dd9b:	shl    $0x2,%r9
   2dd9f:	lea    (%rdx,%rdx,8),%rax
   2dda3:	lea    (%r9,%rax,8),%rax
   2dda7:	add    %rdx,%rax
   2ddaa:	lea    (%r8,%rax,1),%r9
   2ddae:	mov    %rdx,%rax
   2ddb1:	shl    $0x9,%rax
   2ddb5:	shl    $0xe,%rdx
   2ddb9:	add    %rdx,%rax
   2ddbc:	sub    %r9,%rax
   2ddbf:	lea    0x400(%rsi,%rax,1),%rax
   2ddc7:	sar    $0xb,%rax
   2ddcb:	mov    %ax,0xa(%rdi)
   2ddcf:	lea    (%r10,%r10,2),%rax
   2ddd3:	shl    $0x4,%rax
   2ddd7:	add    %r10,%rax
   2ddda:	shl    $0x5,%rax
   2ddde:	lea    (%rax,%r10,4),%rax
   2dde2:	add    %r10,%rax
   2dde5:	shl    $0x4,%rax
   2dde9:	lea    (%rax,%r10,4),%rax
   2dded:	sub    %r8,%rax
   2ddf0:	lea    0x400(%rbx,%rax,1),%rax
   2ddf8:	sar    $0xb,%rax
   2ddfc:	mov    %ax,0x6(%rdi)
   2de00:	lea    (%r11,%r11,2),%rax
   2de04:	shl    $0xc,%rax
   2de08:	lea    (%rax,%r11,8),%rax
   2de0c:	lea    (%rax,%r11,2),%rax
   2de10:	add    %r11,%rax
   2de13:	add    %rcx,%rax
   2de16:	lea    0x400(%rax,%rsi,1),%rax
   2de1e:	sar    $0xb,%rax
   2de22:	mov    %ax,0x2(%rdi)
   2de26:	add    $0x10,%rdi
   2de2a:	mov    -0x48(%rbp),%rax
   2de2e:	add    $0xffffffff,%eax
   2de31:	test   %eax,%eax
   2de33:	jns    2dbfa <jpeg_fdct_islow+0x2a>
   2de39:	mov    -0x18(%rbp),%rdx
   2de3d:	mov    $0x7,%ecx
   2de42:	jmpq   2e086 <jpeg_fdct_islow+0x4b6>
   2de47:	movswq 0x50(%rdx),%r15
   2de4c:	movswq 0x20(%rdx),%r9
   2de51:	lea    (%r15,%r9,1),%eax
   2de55:	movslq %eax,%r14
   2de58:	movswq 0x60(%rdx),%rsi
   2de5d:	mov    %rsi,-0x18(%rbp)
   2de61:	movswq 0x10(%rdx),%rax
   2de66:	mov    %rax,-0x10(%rbp)
   2de6a:	add    %esi,%eax
   2de6c:	movslq %eax,%rax
   2de6f:	lea    (%r14,%rax,1),%r13
   2de73:	movswq 0x40(%rdx),%r12
   2de78:	movswq 0x30(%rdx),%rdi
   2de7d:	lea    (%r12,%rdi,1),%esi
   2de81:	movslq %esi,%r10
   2de84:	movswq 0x70(%rdx),%r11
   2de89:	movswq (%rdx),%rsi
   2de8d:	mov    %rcx,-0x48(%rbp)
   2de91:	lea    (%r11,%rsi,1),%ecx
   2de95:	movslq %ecx,%rbx
   2de98:	lea    (%r10,%rbx,1),%rcx
   2de9c:	lea    0x2(%r13,%rcx,1),%r8
   2dea1:	sar    $0x2,%r8
   2dea5:	mov    %r8w,(%rdx)
   2dea9:	sub    %r13,%rcx
   2deac:	add    $0x2,%rcx
   2deb0:	sar    $0x2,%rcx
   2deb4:	mov    %cx,0x40(%rdx)
   2deb8:	sub    %r14,%rax
   2debb:	sub    %r10,%rbx
   2debe:	lea    (%rax,%rbx,1),%r10
   2dec2:	mov    %r10,%r8
   2dec5:	shl    $0x4,%r8
   2dec9:	mov    %r10,%rcx
   2decc:	shl    $0x8,%rcx
   2ded0:	add    %r8,%rcx
   2ded3:	lea    (%rcx,%r10,4),%rcx
   2ded7:	add    %r10,%rcx
   2deda:	shl    $0x4,%rcx
   2dede:	lea    (%r10,%rcx,1),%r8
   2dee2:	lea    (%rbx,%rbx,2),%rcx
   2dee6:	shl    $0x4,%rcx
   2deea:	add    %rbx,%rcx
   2deed:	shl    $0x7,%rcx
   2def1:	add    %rbx,%rbx
   2def4:	sub    %rbx,%rcx
   2def7:	lea    0x4000(%r8,%rcx,1),%rcx
   2deff:	sar    $0xf,%rcx
   2df03:	mov    %cx,0x20(%rdx)
   2df07:	imul   $0xffffffffffffc4df,%rax,%rax
   2df0e:	lea    0x4000(%rax,%r8,1),%rax
   2df16:	sar    $0xf,%rax
   2df1a:	mov    %ax,0x60(%rdx)
   2df1e:	sub    %r11d,%esi
   2df21:	movslq %esi,%r11
   2df24:	sub    %r15d,%r9d
   2df27:	movslq %r9d,%rsi
   2df2a:	lea    (%r11,%rsi,1),%r10
   2df2e:	sub    %r12d,%edi
   2df31:	movslq %edi,%r12
   2df34:	mov    -0x18(%rbp),%rcx
   2df38:	mov    -0x10(%rbp),%rax
   2df3c:	sub    %ecx,%eax
   2df3e:	movslq %eax,%r9
   2df41:	lea    (%r12,%r9,1),%rax
   2df45:	lea    (%r10,%rax,1),%rdi
   2df49:	lea    (%rdi,%rdi,8),%rcx
   2df4d:	shl    $0x5,%rcx
   2df51:	lea    (%rcx,%rdi,8),%rcx
   2df55:	lea    (%rcx,%rdi,4),%rcx
   2df59:	add    %rdi,%rcx
   2df5c:	shl    $0x5,%rcx
   2df60:	lea    (%rdi,%rcx,1),%r8
   2df64:	lea    (%rax,%rax,4),%rcx
   2df68:	mov    %rcx,%rdi
   2df6b:	shl    $0x6,%rdi
   2df6f:	sub    %rdi,%rcx
   2df72:	shl    $0xe,%rax
   2df76:	add    %rcx,%rax
   2df79:	mov    %r8,%rbx
   2df7c:	sub    %rax,%rbx
   2df7f:	lea    (%r12,%r11,1),%rcx
   2df83:	imul   $0xffffffffffffe333,%rcx,%rcx
   2df8a:	lea    (%r12,%r12,8),%rax
   2df8e:	lea    (%r12,%rax,2),%rax
   2df92:	shl    $0x7,%rax
   2df96:	lea    (%rax,%r12,8),%rax
   2df9a:	lea    (%rax,%r12,4),%rax
   2df9e:	lea    (%rax,%r12,2),%rax
   2dfa2:	add    %rcx,%rax
   2dfa5:	lea    0x4000(%rax,%rbx,1),%rax
   2dfad:	sar    $0xf,%rax
   2dfb1:	mov    %ax,0x70(%rdx)
   2dfb5:	mov    %r10,%rax
   2dfb8:	shl    $0x2,%rax
   2dfbc:	lea    (%r10,%rax,1),%rdi
   2dfc0:	mov    %rdi,%r10
   2dfc3:	shl    $0x7,%r10
   2dfc7:	shl    $0x9,%rdi
   2dfcb:	add    %r10,%rdi
   2dfce:	sub    %rdi,%rax
   2dfd1:	lea    (%r8,%rax,1),%r10
   2dfd5:	lea    (%rsi,%r9,1),%rdi
   2dfd9:	lea    (%rdi,%rdi,4),%rax
   2dfdd:	lea    (%rdi,%rax,8),%rax
   2dfe1:	shl    $0x9,%rax
   2dfe5:	lea    (%rax,%rdi,2),%rax
   2dfe9:	lea    (%rdi,%rax,1),%r8
   2dfed:	mov    %rsi,%rdi
   2dff0:	shl    $0x2,%rdi
   2dff4:	lea    (%rsi,%rsi,8),%rax
   2dff8:	lea    (%rdi,%rax,8),%rax
   2dffc:	add    %rsi,%rax
   2dfff:	lea    (%r8,%rax,1),%rdi
   2e003:	mov    %rsi,%rax
   2e006:	shl    $0x9,%rax
   2e00a:	shl    $0xe,%rsi
   2e00e:	add    %rsi,%rax
   2e011:	sub    %rdi,%rax
   2e014:	lea    0x4000(%r10,%rax,1),%rax
   2e01c:	sar    $0xf,%rax
   2e020:	mov    %ax,0x50(%rdx)
   2e024:	lea    (%r9,%r9,2),%rax
   2e028:	shl    $0x4,%rax
   2e02c:	add    %r9,%rax
   2e02f:	shl    $0x5,%rax
   2e033:	lea    (%rax,%r9,4),%rax
   2e037:	add    %r9,%rax
   2e03a:	shl    $0x4,%rax
   2e03e:	lea    (%rax,%r9,4),%rax
   2e042:	sub    %r8,%rax
   2e045:	lea    0x4000(%rbx,%rax,1),%rax
   2e04d:	sar    $0xf,%rax
   2e051:	mov    %ax,0x30(%rdx)
   2e055:	lea    (%r11,%r11,2),%rax
   2e059:	shl    $0xc,%rax
   2e05d:	lea    (%rax,%r11,8),%rax
   2e061:	lea    (%rax,%r11,2),%rax
   2e065:	add    %r11,%rax
   2e068:	add    %rcx,%rax
   2e06b:	lea    0x4000(%rax,%r10,1),%rax
   2e073:	sar    $0xf,%rax
   2e077:	mov    %ax,0x10(%rdx)
   2e07b:	mov    -0x48(%rbp),%rax
   2e07f:	lea    -0x1(%rax),%ecx
   2e082:	add    $0x2,%rdx
   2e086:	test   %ecx,%ecx
   2e088:	jns    2de47 <jpeg_fdct_islow+0x277>
   2e08e:	mov    -0x40(%rbp),%r15
   2e092:	mov    -0x38(%rbp),%r14
   2e096:	mov    -0x30(%rbp),%r13
   2e09a:	mov    -0x28(%rbp),%r12
   2e09e:	mov    -0x20(%rbp),%rbx
   2e0a2:	leaveq 
   2e0a3:	retq   
   2e0a4:	nopw   %cs:0x0(%rax,%rax,1)
   2e0ae:	xchg   %ax,%ax

000000000002e0b0 <jpeg_idct_float>:
   2e0b0:	push   %rbp
   2e0b1:	mov    %rsp,%rbp
   2e0b4:	sub    $0x100,%rsp
   2e0bb:	mov    0x1a8(%rdi),%r10
   2e0c2:	mov    0x58(%rsi),%rax
   2e0c6:	movss  0x2d245(%rip),%xmm11        # 5b314 <dither_matrix+0x1284>
   2e0cf:	movss  0x2d24d(%rip),%xmm0        # 5b324 <dither_matrix+0x1294>
   2e0d7:	lea    -0x100(%rbp),%r9
   2e0de:	mov    $0x8,%edi
   2e0e3:	mov    %r9,%rsi
   2e0e6:	jmpq   2e2f0 <jpeg_idct_float+0x240>
   2e0eb:	movapd %xmm0,%xmm9
   2e0f0:	mulss  0xe0(%rax),%xmm9
   2e0f9:	movswq 0x70(%rdx),%r11
   2e0fe:	cvtsi2ss %r11d,%xmm1
   2e103:	mulss  %xmm1,%xmm9
   2e108:	movapd %xmm0,%xmm3
   2e10c:	mulss  0x20(%rax),%xmm3
   2e111:	movswq 0x10(%rdx),%r11
   2e116:	cvtsi2ss %r11d,%xmm1
   2e11b:	mulss  %xmm1,%xmm3
   2e11f:	movapd %xmm9,%xmm4
   2e124:	addss  %xmm3,%xmm4
   2e128:	movapd %xmm0,%xmm2
   2e12c:	mulss  0xa0(%rax),%xmm2
   2e134:	movswq 0x50(%rdx),%r11
   2e139:	cvtsi2ss %r11d,%xmm1
   2e13e:	mulss  %xmm1,%xmm2
   2e142:	movapd %xmm0,%xmm10
   2e147:	mulss  0x60(%rax),%xmm10
   2e14d:	movswq 0x30(%rdx),%r11
   2e152:	cvtsi2ss %r11d,%xmm1
   2e157:	mulss  %xmm1,%xmm10
   2e15c:	movapd %xmm2,%xmm14
   2e161:	addss  %xmm10,%xmm14
   2e166:	movapd %xmm4,%xmm15
   2e16b:	addss  %xmm14,%xmm15
   2e170:	movapd %xmm0,%xmm8
   2e175:	mulss  0xc0(%rax),%xmm8
   2e17e:	movswq 0x60(%rdx),%r11
   2e183:	cvtsi2ss %r11d,%xmm1
   2e188:	mulss  %xmm1,%xmm8
   2e18d:	movapd %xmm0,%xmm1
   2e191:	mulss  0x40(%rax),%xmm1
   2e196:	movswq 0x20(%rdx),%r11
   2e19b:	cvtsi2ss %r11d,%xmm5
   2e1a0:	mulss  %xmm5,%xmm1
   2e1a4:	movapd %xmm8,%xmm12
   2e1a9:	addss  %xmm1,%xmm12
   2e1ae:	movapd %xmm0,%xmm7
   2e1b2:	mulss  0x80(%rax),%xmm7
   2e1ba:	movswq 0x40(%rdx),%r11
   2e1bf:	cvtsi2ss %r11d,%xmm5
   2e1c4:	mulss  %xmm5,%xmm7
   2e1c8:	mulss  (%rax),%xmm0
   2e1cc:	movswq (%rdx),%r11
   2e1d0:	cvtsi2ss %r11d,%xmm5
   2e1d5:	mulss  %xmm5,%xmm0
   2e1d9:	movapd %xmm7,%xmm6
   2e1dd:	addss  %xmm0,%xmm6
   2e1e1:	movapd %xmm12,%xmm5
   2e1e6:	addss  %xmm6,%xmm5
   2e1ea:	movapd %xmm15,%xmm13
   2e1ef:	addss  %xmm5,%xmm13
   2e1f4:	movss  %xmm13,(%rsi)
   2e1f9:	subss  %xmm15,%xmm5
   2e1fe:	movss  %xmm5,0xe0(%rsi)
   2e206:	subss  %xmm10,%xmm2
   2e20b:	subss  %xmm9,%xmm3
   2e210:	movapd %xmm2,%xmm5
   2e214:	addss  %xmm3,%xmm5
   2e218:	mulss  %xmm11,%xmm5
   2e21d:	movss  0x2d0fa(%rip),%xmm9        # 5b320 <dither_matrix+0x1290>
   2e226:	mulss  %xmm9,%xmm2
   2e22b:	xorpd  0x2d0fd(%rip),%xmm2        # 5b330 <dither_matrix+0x12a0>
   2e233:	addss  %xmm5,%xmm2
   2e237:	subss  %xmm15,%xmm2
   2e23c:	subss  %xmm8,%xmm1
   2e241:	movss  0x2d0d2(%rip),%xmm8        # 5b31c <dither_matrix+0x128c>
   2e24a:	mulss  %xmm8,%xmm1
   2e24f:	subss  %xmm12,%xmm1
   2e254:	subss  %xmm7,%xmm0
   2e258:	movapd %xmm1,%xmm7
   2e25c:	addss  %xmm0,%xmm7
   2e260:	movapd %xmm2,%xmm9
   2e265:	addss  %xmm7,%xmm9
   2e26a:	movss  %xmm9,0x20(%rsi)
   2e270:	subss  %xmm2,%xmm7
   2e274:	movss  %xmm7,0xc0(%rsi)
   2e27c:	subss  %xmm14,%xmm4
   2e281:	mulss  %xmm8,%xmm4
   2e286:	subss  %xmm2,%xmm4
   2e28a:	subss  %xmm1,%xmm0
   2e28e:	movapd %xmm4,%xmm1
   2e292:	addss  %xmm0,%xmm1
   2e296:	movss  %xmm1,0x40(%rsi)
   2e29b:	subss  %xmm4,%xmm0
   2e29f:	movss  %xmm0,0xa0(%rsi)
   2e2a7:	movss  0x2d069(%rip),%xmm0        # 5b318 <dither_matrix+0x1288>
   2e2af:	mulss  %xmm0,%xmm3
   2e2b3:	subss  %xmm3,%xmm5
   2e2b7:	subss  %xmm4,%xmm5
   2e2bb:	subss  %xmm12,%xmm6
   2e2c0:	movapd %xmm5,%xmm0
   2e2c4:	addss  %xmm6,%xmm0
   2e2c8:	movss  %xmm0,0x60(%rsi)
   2e2cd:	subss  %xmm5,%xmm6
   2e2d1:	movss  %xmm6,0x80(%rsi)
   2e2d9:	add    $0x2,%rdx
   2e2dd:	add    $0x4,%rax
   2e2e1:	add    $0x4,%rsi
   2e2e5:	movss  0x2d037(%rip),%xmm0        # 5b324 <dither_matrix+0x1294>
   2e2ed:	add    $0xffffffff,%edi
   2e2f0:	test   %edi,%edi
   2e2f2:	jg     2e306 <jpeg_idct_float+0x256>
   2e2f4:	movss  0x2d014(%rip),%xmm0        # 5b310 <dither_matrix+0x1280>
   2e2fc:	mov    %r8d,%edi
   2e2ff:	xor    %eax,%eax
   2e301:	jmpq   2e5b0 <jpeg_idct_float+0x500>
   2e306:	movswq 0x10(%rdx),%r11
   2e30b:	test   %r11w,%r11w
   2e30f:	jne    2e0eb <jpeg_idct_float+0x3b>
   2e315:	movswq 0x20(%rdx),%r11
   2e31a:	test   %r11w,%r11w
   2e31e:	jne    2e0eb <jpeg_idct_float+0x3b>
   2e324:	movswq 0x30(%rdx),%r11
   2e329:	test   %r11w,%r11w
   2e32d:	jne    2e0eb <jpeg_idct_float+0x3b>
   2e333:	movswq 0x40(%rdx),%r11
   2e338:	test   %r11w,%r11w
   2e33c:	jne    2e0eb <jpeg_idct_float+0x3b>
   2e342:	movswq 0x50(%rdx),%r11
   2e347:	test   %r11w,%r11w
   2e34b:	jne    2e0eb <jpeg_idct_float+0x3b>
   2e351:	movswq 0x60(%rdx),%r11
   2e356:	test   %r11w,%r11w
   2e35a:	jne    2e0eb <jpeg_idct_float+0x3b>
   2e360:	movswq 0x70(%rdx),%r11
   2e365:	test   %r11w,%r11w
   2e369:	jne    2e0eb <jpeg_idct_float+0x3b>
   2e36f:	movapd %xmm0,%xmm1
   2e373:	mulss  (%rax),%xmm1
   2e377:	movswq (%rdx),%r11
   2e37b:	cvtsi2ss %r11d,%xmm2
   2e380:	mulss  %xmm2,%xmm1
   2e384:	movss  %xmm1,(%rsi)
   2e388:	movss  %xmm1,0x20(%rsi)
   2e38d:	movss  %xmm1,0x40(%rsi)
   2e392:	movss  %xmm1,0x60(%rsi)
   2e397:	movss  %xmm1,0x80(%rsi)
   2e39f:	movss  %xmm1,0xa0(%rsi)
   2e3a7:	movss  %xmm1,0xc0(%rsi)
   2e3af:	movss  %xmm1,0xe0(%rsi)
   2e3b7:	add    $0x2,%rdx
   2e3bb:	add    $0x4,%rax
   2e3bf:	add    $0x4,%rsi
   2e3c3:	jmpq   2e2ed <jpeg_idct_float+0x23d>
   2e3c8:	movss  0x4(%r9),%xmm4
   2e3ce:	movss  0x1c(%r9),%xmm9
   2e3d4:	movapd %xmm9,%xmm2
   2e3d9:	addss  %xmm4,%xmm2
   2e3dd:	movss  0x14(%r9),%xmm6
   2e3e3:	movss  0xc(%r9),%xmm10
   2e3e9:	movapd %xmm10,%xmm8
   2e3ee:	addss  %xmm6,%xmm8
   2e3f3:	movapd %xmm2,%xmm7
   2e3f7:	addss  %xmm8,%xmm7
   2e3fc:	addss  (%r9),%xmm0
   2e401:	movss  0x10(%r9),%xmm14
   2e407:	movapd %xmm14,%xmm5
   2e40c:	addss  %xmm0,%xmm5
   2e410:	movss  0x18(%r9),%xmm13
   2e416:	movss  0x8(%r9),%xmm3
   2e41c:	movapd %xmm13,%xmm12
   2e421:	addss  %xmm3,%xmm12
   2e426:	movapd %xmm12,%xmm1
   2e42b:	addss  %xmm5,%xmm1
   2e42f:	movapd %xmm7,%xmm15
   2e434:	addss  %xmm1,%xmm15
   2e439:	cvttss2si %xmm15,%edx
   2e43e:	and    $0x3ff,%edx
   2e444:	movslq %edx,%rdx
   2e447:	movzbl (%r10,%rdx,1),%r8d
   2e44c:	movslq %eax,%rdx
   2e44f:	mov    (%rcx,%rdx,8),%rsi
   2e453:	mov    %r8b,(%rdi,%rsi,1)
   2e457:	subss  %xmm7,%xmm1
   2e45b:	cvttss2si %xmm1,%edx
   2e45f:	and    $0x3ff,%edx
   2e465:	movslq %edx,%rdx
   2e468:	movzbl (%r10,%rdx,1),%edx
   2e46d:	mov    %dl,0x7(%rdi,%rsi,1)
   2e471:	subss  %xmm10,%xmm6
   2e476:	subss  %xmm9,%xmm4
   2e47b:	movapd %xmm6,%xmm1
   2e47f:	addss  %xmm4,%xmm1
   2e483:	mulss  %xmm11,%xmm1
   2e488:	movss  0x2ce8f(%rip),%xmm9        # 5b320 <dither_matrix+0x1290>
   2e491:	mulss  %xmm9,%xmm6
   2e496:	xorpd  0x2ce92(%rip),%xmm6        # 5b330 <dither_matrix+0x12a0>
   2e49e:	addss  %xmm1,%xmm6
   2e4a2:	subss  %xmm7,%xmm6
   2e4a6:	subss  %xmm13,%xmm3
   2e4ab:	movss  0x2ce68(%rip),%xmm9        # 5b31c <dither_matrix+0x128c>
   2e4b4:	mulss  %xmm9,%xmm3
   2e4b9:	subss  %xmm12,%xmm3
   2e4be:	subss  %xmm14,%xmm0
   2e4c3:	movapd %xmm3,%xmm7
   2e4c7:	addss  %xmm0,%xmm7
   2e4cb:	movapd %xmm6,%xmm10
   2e4d0:	addss  %xmm7,%xmm10
   2e4d5:	cvttss2si %xmm10,%edx
   2e4da:	and    $0x3ff,%edx
   2e4e0:	movslq %edx,%rdx
   2e4e3:	movzbl (%r10,%rdx,1),%edx
   2e4e8:	mov    %dl,0x1(%rdi,%rsi,1)
   2e4ec:	subss  %xmm6,%xmm7
   2e4f0:	cvttss2si %xmm7,%edx
   2e4f4:	and    $0x3ff,%edx
   2e4fa:	movslq %edx,%rdx
   2e4fd:	movzbl (%r10,%rdx,1),%edx
   2e502:	mov    %dl,0x6(%rdi,%rsi,1)
   2e506:	subss  %xmm8,%xmm2
   2e50b:	mulss  %xmm9,%xmm2
   2e510:	subss  %xmm6,%xmm2
   2e514:	subss  %xmm3,%xmm0
   2e518:	movapd %xmm2,%xmm3
   2e51c:	addss  %xmm0,%xmm3
   2e520:	cvttss2si %xmm3,%edx
   2e524:	and    $0x3ff,%edx
   2e52a:	movslq %edx,%rdx
   2e52d:	movzbl (%r10,%rdx,1),%edx
   2e532:	mov    %dl,0x2(%rdi,%rsi,1)
   2e536:	subss  %xmm2,%xmm0
   2e53a:	cvttss2si %xmm0,%edx
   2e53e:	and    $0x3ff,%edx
   2e544:	movslq %edx,%rdx
   2e547:	movzbl (%r10,%rdx,1),%edx
   2e54c:	mov    %dl,0x5(%rdi,%rsi,1)
   2e550:	movss  0x2cdc0(%rip),%xmm0        # 5b318 <dither_matrix+0x1288>
   2e558:	mulss  %xmm0,%xmm4
   2e55c:	subss  %xmm4,%xmm1
   2e560:	subss  %xmm2,%xmm1
   2e564:	subss  %xmm12,%xmm5
   2e569:	movapd %xmm1,%xmm0
   2e56d:	addss  %xmm5,%xmm0
   2e571:	cvttss2si %xmm0,%edx
   2e575:	and    $0x3ff,%edx
   2e57b:	movslq %edx,%rdx
   2e57e:	movzbl (%r10,%rdx,1),%edx
   2e583:	mov    %dl,0x3(%rdi,%rsi,1)
   2e587:	subss  %xmm1,%xmm5
   2e58b:	cvttss2si %xmm5,%edx
   2e58f:	and    $0x3ff,%edx
   2e595:	movslq %edx,%rdx
   2e598:	movzbl (%rdx,%r10,1),%edx
   2e59d:	mov    %dl,0x4(%rdi,%rsi,1)
   2e5a1:	add    $0x1,%eax
   2e5a4:	add    $0x20,%r9
   2e5a8:	movss  0x2cd60(%rip),%xmm0        # 5b310 <dither_matrix+0x1280>
   2e5b0:	cmp    $0x7,%eax
   2e5b3:	jle    2e3c8 <jpeg_idct_float+0x318>
   2e5b9:	leaveq 
   2e5ba:	retq   
   2e5bb:	nopl   0x0(%rax,%rax,1)

000000000002e5c0 <jpeg_idct_ifast>:
   2e5c0:	push   %rbp
   2e5c1:	mov    %rsp,%rbp
   2e5c4:	sub    $0x170,%rsp
   2e5cb:	mov    %r8,-0x30(%rbp)
   2e5cf:	mov    %rcx,-0x40(%rbp)
   2e5d3:	mov    %rbx,-0x8(%rbp)
   2e5d7:	mov    %r12,-0x10(%rbp)
   2e5db:	mov    %r13,-0x18(%rbp)
   2e5df:	mov    %r14,-0x20(%rbp)
   2e5e3:	mov    %r15,-0x28(%rbp)
   2e5e7:	mov    0x1a8(%rdi),%rax
   2e5ee:	mov    %rax,-0x38(%rbp)
   2e5f2:	mov    0x58(%rsi),%rax
   2e5f6:	lea    -0x170(%rbp),%rcx
   2e5fd:	mov    $0x8,%esi
   2e602:	jmpq   2e814 <jpeg_idct_ifast+0x254>
   2e607:	movswq 0x70(%rax),%r8
   2e60c:	movswq 0x70(%rdx),%rdi
   2e611:	imul   %di,%r8w
   2e616:	movswq 0x10(%rax),%rbx
   2e61b:	movswq 0x10(%rdx),%rdi
   2e620:	imul   %di,%bx
   2e624:	lea    (%r8,%rbx,1),%r11d
   2e628:	mov    %r11,-0x50(%rbp)
   2e62c:	movswq 0x30(%rax),%r9
   2e631:	movswq 0x30(%rdx),%rdi
   2e636:	imul   %di,%r9w
   2e63b:	movswq 0x50(%rax),%rdi
   2e640:	movswq 0x50(%rdx),%r10
   2e645:	imul   %r10w,%di
   2e64a:	lea    (%r9,%rdi,1),%r10d
   2e64e:	mov    %r10,-0x58(%rbp)
   2e652:	add    %r11d,%r10d
   2e655:	movswq %r10w,%r14
   2e659:	movswq 0x20(%rax),%r12
   2e65e:	movswq 0x20(%rdx),%r11
   2e663:	imul   %r11w,%r12w
   2e668:	movswq 0x60(%rax),%r11
   2e66d:	mov    %rsi,-0x70(%rbp)
   2e671:	movswq 0x60(%rdx),%rsi
   2e676:	imul   %si,%r11w
   2e67b:	lea    (%r12,%r11,1),%r15d
   2e67f:	movswq (%rax),%rsi
   2e683:	movswq (%rdx),%r13
   2e687:	imul   %r13w,%si
   2e68c:	movswq 0x40(%rax),%r13
   2e691:	mov    %rax,-0x60(%rbp)
   2e695:	movswq 0x40(%rdx),%rax
   2e69a:	imul   %ax,%r13w
   2e69f:	lea    (%rsi,%r13,1),%eax
   2e6a3:	mov    %rdx,-0x68(%rbp)
   2e6a7:	mov    %rax,-0x48(%rbp)
   2e6ab:	add    %r15d,%eax
   2e6ae:	movswq %ax,%rax
   2e6b2:	lea    (%r14,%rax,1),%edx
   2e6b6:	mov    %edx,(%rcx)
   2e6b8:	sub    %r14d,%eax
   2e6bb:	mov    %eax,0xe0(%rcx)
   2e6c1:	sub    %r9w,%di
   2e6c5:	movswq %di,%r9
   2e6c9:	sub    %r8w,%bx
   2e6cd:	movswq %bx,%r14
   2e6d1:	lea    (%r14,%r9,1),%eax
   2e6d5:	movslq %eax,%rdi
   2e6d8:	mov    %rdi,%rdx
   2e6db:	shl    $0x2,%rdx
   2e6df:	lea    (%rdi,%rdi,2),%rax
   2e6e3:	lea    (%rdx,%rax,8),%rax
   2e6e7:	add    %rdi,%rax
   2e6ea:	shl    $0x4,%rax
   2e6ee:	lea    (%rax,%rdi,8),%rax
   2e6f2:	add    %rax,%rdi
   2e6f5:	sar    $0x8,%rdi
   2e6f9:	lea    (%r9,%r9,4),%rax
   2e6fd:	lea    (%r9,%rax,4),%rdx
   2e701:	shl    $0x5,%rdx
   2e705:	lea    (%r9,%r9,2),%rax
   2e709:	sub    %rdx,%rax
   2e70c:	sar    $0x8,%rax
   2e710:	lea    (%rax,%rdi,1),%r9d
   2e714:	mov    %r9,%rax
   2e717:	sub    %r10w,%ax
   2e71b:	movswq %ax,%r8
   2e71f:	movswq %r12w,%rax
   2e723:	movswq %r11w,%rdx
   2e727:	sub    %edx,%eax
   2e729:	movslq %eax,%rdx
   2e72c:	lea    (%rdx,%rdx,4),%rax
   2e730:	lea    (%rdx,%rax,2),%rax
   2e734:	shl    $0x5,%rax
   2e738:	lea    (%rax,%rdx,8),%rax
   2e73c:	lea    (%rax,%rdx,2),%rax
   2e740:	sar    $0x8,%rax
   2e744:	mov    %rax,%rdx
   2e747:	sub    %r15w,%dx
   2e74b:	sub    %r13w,%si
   2e74f:	add    %esi,%edx
   2e751:	movswq %dx,%rdx
   2e755:	lea    (%r8,%rdx,1),%ebx
   2e759:	mov    %ebx,0x20(%rcx)
   2e75c:	sub    %r8d,%edx
   2e75f:	mov    %edx,0xc0(%rcx)
   2e765:	sub    %r9w,%r10w
   2e769:	mov    -0x50(%rbp),%rdx
   2e76d:	movswq %dx,%rdx
   2e771:	mov    -0x58(%rbp),%rbx
   2e775:	movswq %bx,%rbx
   2e779:	sub    %ebx,%edx
   2e77b:	movslq %edx,%rbx
   2e77e:	lea    (%rbx,%rbx,4),%rdx
   2e782:	lea    (%rbx,%rdx,2),%rdx
   2e786:	shl    $0x5,%rdx
   2e78a:	lea    (%rdx,%rbx,8),%rdx
   2e78e:	lea    (%rdx,%rbx,2),%rdx
   2e792:	sar    $0x8,%rdx
   2e796:	lea    (%r10,%rdx,1),%r8d
   2e79a:	movswq %r8w,%rbx
   2e79e:	neg    %ax
   2e7a1:	add    %r15w,%ax
   2e7a5:	add    %esi,%eax
   2e7a7:	movswq %ax,%rax
   2e7ab:	lea    (%rbx,%rax,1),%edx
   2e7ae:	mov    %edx,0x40(%rcx)
   2e7b1:	sub    %ebx,%eax
   2e7b3:	mov    %eax,0xa0(%rcx)
   2e7b9:	mov    %r14,%rdx
   2e7bc:	shl    $0x4,%rdx
   2e7c0:	mov    %r14,%rax
   2e7c3:	shl    $0x8,%rax
   2e7c7:	add    %rdx,%rax
   2e7ca:	lea    (%rax,%r14,4),%rax
   2e7ce:	add    %r14,%rax
   2e7d1:	sar    $0x8,%rax
   2e7d5:	sub    %di,%ax
   2e7d8:	add    %r8d,%eax
   2e7db:	movswq %ax,%rsi
   2e7df:	mov    -0x48(%rbp),%rax
   2e7e3:	sub    %r15w,%ax
   2e7e7:	movswq %ax,%rax
   2e7eb:	lea    (%rsi,%rax,1),%edx
   2e7ee:	mov    %edx,0x80(%rcx)
   2e7f4:	sub    %esi,%eax
   2e7f6:	mov    %eax,0x60(%rcx)
   2e7f9:	mov    -0x68(%rbp),%rax
   2e7fd:	lea    0x2(%rax),%rdx
   2e801:	mov    -0x60(%rbp),%rax
   2e805:	add    $0x2,%rax
   2e809:	add    $0x4,%rcx
   2e80d:	mov    -0x70(%rbp),%rsi
   2e811:	add    $0xffffffff,%esi
   2e814:	test   %esi,%esi
   2e816:	jg     2e835 <jpeg_idct_ifast+0x275>
   2e818:	mov    -0x30(%rbp),%rax
   2e81c:	mov    %eax,%r13d
   2e81f:	xor    %ecx,%ecx
   2e821:	mov    -0x38(%rbp),%r14
   2e825:	lea    -0x170(%rbp),%rdx
   2e82c:	mov    -0x40(%rbp),%rax
   2e830:	jmpq   2eb36 <jpeg_idct_ifast+0x576>
   2e835:	movswq 0x10(%rdx),%rdi
   2e83a:	test   %di,%di
   2e83d:	jne    2e607 <jpeg_idct_ifast+0x47>
   2e843:	movswq 0x20(%rdx),%rdi
   2e848:	test   %di,%di
   2e84b:	jne    2e607 <jpeg_idct_ifast+0x47>
   2e851:	movswq 0x30(%rdx),%rdi
   2e856:	test   %di,%di
   2e859:	jne    2e607 <jpeg_idct_ifast+0x47>
   2e85f:	movswq 0x40(%rdx),%rdi
   2e864:	test   %di,%di
   2e867:	jne    2e607 <jpeg_idct_ifast+0x47>
   2e86d:	movswq 0x50(%rdx),%rdi
   2e872:	test   %di,%di
   2e875:	jne    2e607 <jpeg_idct_ifast+0x47>
   2e87b:	movswq 0x60(%rdx),%rdi
   2e880:	test   %di,%di
   2e883:	jne    2e607 <jpeg_idct_ifast+0x47>
   2e889:	movswq 0x70(%rdx),%rdi
   2e88e:	test   %di,%di
   2e891:	jne    2e607 <jpeg_idct_ifast+0x47>
   2e897:	movswq (%rax),%rdi
   2e89b:	movswq (%rdx),%rbx
   2e89f:	imul   %ebx,%edi
   2e8a2:	mov    %edi,(%rcx)
   2e8a4:	mov    %edi,0x20(%rcx)
   2e8a7:	mov    %edi,0x40(%rcx)
   2e8aa:	mov    %edi,0x60(%rcx)
   2e8ad:	mov    %edi,0x80(%rcx)
   2e8b3:	mov    %edi,0xa0(%rcx)
   2e8b9:	mov    %edi,0xc0(%rcx)
   2e8bf:	mov    %edi,0xe0(%rcx)
   2e8c5:	add    $0x2,%rdx
   2e8c9:	add    $0x2,%rax
   2e8cd:	add    $0x4,%rcx
   2e8d1:	jmpq   2e811 <jpeg_idct_ifast+0x251>
   2e8d6:	movswq 0x10(%rdx),%rsi
   2e8db:	mov    %rsi,-0x60(%rbp)
   2e8df:	movswq (%rdx),%rax
   2e8e3:	mov    %rax,-0x58(%rbp)
   2e8e7:	add    %esi,%eax
   2e8e9:	mov    %rax,-0x38(%rbp)
   2e8ed:	movswq 0x18(%rdx),%r11
   2e8f2:	movswq 0x8(%rdx),%rsi
   2e8f7:	lea    (%r11,%rsi,1),%r10d
   2e8fb:	add    %r10d,%eax
   2e8fe:	movswq %ax,%rax
   2e902:	movswq 0x1c(%rdx),%r9
   2e907:	movswq 0x4(%rdx),%rdi
   2e90c:	mov    %rcx,-0x70(%rbp)
   2e910:	lea    (%r9,%rdi,1),%ebx
   2e914:	mov    %rbx,-0x48(%rbp)
   2e918:	movswq 0xc(%rdx),%r8
   2e91d:	mov    %rdx,-0x68(%rbp)
   2e921:	movswq 0x14(%rdx),%rdx
   2e926:	lea    (%r8,%rdx,1),%ecx
   2e92a:	mov    %rcx,-0x50(%rbp)
   2e92e:	add    %ecx,%ebx
   2e930:	movswq %bx,%r15
   2e934:	lea    (%r15,%rax,1),%ecx
   2e938:	and    $0x7fe0,%ecx
   2e93e:	shr    $0x5,%ecx
   2e941:	movslq %ecx,%rcx
   2e944:	movzbl 0x80(%r14,%rcx,1),%ecx
   2e94d:	mov    %cl,0x0(%r13,%r12,1)
   2e952:	sub    %r15d,%eax
   2e955:	and    $0x7fe0,%eax
   2e95a:	shr    $0x5,%eax
   2e95d:	movslq %eax,%rax
   2e960:	movzbl 0x80(%r14,%rax,1),%eax
   2e969:	mov    %al,0x7(%r13,%r12,1)
   2e96e:	sub    %r8w,%dx
   2e972:	movswq %dx,%r8
   2e976:	sub    %r9w,%di
   2e97a:	movswq %di,%r9
   2e97e:	lea    (%r9,%r8,1),%eax
   2e982:	movslq %eax,%rdx
   2e985:	mov    %rdx,%rcx
   2e988:	shl    $0x2,%rcx
   2e98c:	lea    (%rdx,%rdx,2),%rax
   2e990:	lea    (%rcx,%rax,8),%rax
   2e994:	add    %rdx,%rax
   2e997:	shl    $0x4,%rax
   2e99b:	lea    (%rax,%rdx,8),%rax
   2e99f:	add    %rax,%rdx
   2e9a2:	sar    $0x8,%rdx
   2e9a6:	lea    (%r8,%r8,4),%rax
   2e9aa:	lea    (%r8,%rax,4),%rcx
   2e9ae:	shl    $0x5,%rcx
   2e9b2:	lea    (%r8,%r8,2),%rax
   2e9b6:	sub    %rcx,%rax
   2e9b9:	sar    $0x8,%rax
   2e9bd:	lea    (%rax,%rdx,1),%r8d
   2e9c1:	mov    %r8,%rax
   2e9c4:	sub    %bx,%ax
   2e9c7:	movswq %ax,%r15
   2e9cb:	sub    %r11d,%esi
   2e9ce:	movslq %esi,%rcx
   2e9d1:	lea    (%rcx,%rcx,4),%rax
   2e9d5:	lea    (%rcx,%rax,2),%rax
   2e9d9:	shl    $0x5,%rax
   2e9dd:	lea    (%rax,%rcx,8),%rax
   2e9e1:	lea    (%rax,%rcx,2),%rsi
   2e9e5:	sar    $0x8,%rsi
   2e9e9:	mov    %rsi,%rcx
   2e9ec:	sub    %r10w,%cx
   2e9f0:	mov    -0x60(%rbp),%rax
   2e9f4:	mov    -0x58(%rbp),%rdi
   2e9f8:	sub    %ax,%di
   2e9fb:	lea    (%rdi,%rcx,1),%eax
   2e9fe:	movswq %ax,%rax
   2ea02:	lea    (%r15,%rax,1),%ecx
   2ea06:	and    $0x7fe0,%ecx
   2ea0c:	shr    $0x5,%ecx
   2ea0f:	movslq %ecx,%rcx
   2ea12:	movzbl 0x80(%r14,%rcx,1),%ecx
   2ea1b:	mov    %cl,0x1(%r13,%r12,1)
   2ea20:	sub    %r15d,%eax
   2ea23:	and    $0x7fe0,%eax
   2ea28:	shr    $0x5,%eax
   2ea2b:	movslq %eax,%rax
   2ea2e:	movzbl 0x80(%r14,%rax,1),%eax
   2ea37:	mov    %al,0x6(%r13,%r12,1)
   2ea3c:	sub    %r8w,%bx
   2ea40:	mov    -0x48(%rbp),%rax
   2ea44:	movswq %ax,%rax
   2ea48:	mov    -0x50(%rbp),%rcx
   2ea4c:	movswq %cx,%rcx
   2ea50:	sub    %ecx,%eax
   2ea52:	movslq %eax,%rcx
   2ea55:	lea    (%rcx,%rcx,4),%rax
   2ea59:	lea    (%rcx,%rax,2),%rax
   2ea5d:	shl    $0x5,%rax
   2ea61:	lea    (%rax,%rcx,8),%rax
   2ea65:	lea    (%rax,%rcx,2),%rax
   2ea69:	sar    $0x8,%rax
   2ea6d:	lea    (%rbx,%rax,1),%r8d
   2ea71:	movswq %r8w,%rbx
   2ea75:	mov    %r10,%rax
   2ea78:	sub    %si,%ax
   2ea7b:	add    %edi,%eax
   2ea7d:	movswq %ax,%rax
   2ea81:	lea    (%rbx,%rax,1),%ecx
   2ea84:	and    $0x7fe0,%ecx
   2ea8a:	shr    $0x5,%ecx
   2ea8d:	movslq %ecx,%rcx
   2ea90:	movzbl 0x80(%r14,%rcx,1),%ecx
   2ea99:	mov    %cl,0x2(%r13,%r12,1)
   2ea9e:	sub    %ebx,%eax
   2eaa0:	and    $0x7fe0,%eax
   2eaa5:	shr    $0x5,%eax
   2eaa8:	movslq %eax,%rax
   2eaab:	movzbl 0x80(%r14,%rax,1),%eax
   2eab4:	mov    %al,0x5(%r13,%r12,1)
   2eab9:	mov    %r9,%rax
   2eabc:	shl    $0x4,%rax
   2eac0:	mov    %r9,%rcx
   2eac3:	shl    $0x8,%rcx
   2eac7:	add    %rcx,%rax
   2eaca:	lea    (%rax,%r9,4),%rax
   2eace:	add    %r9,%rax
   2ead1:	sar    $0x8,%rax
   2ead5:	sub    %dx,%ax
   2ead8:	add    %r8d,%eax
   2eadb:	movswq %ax,%rdx
   2eadf:	mov    -0x38(%rbp),%rax
   2eae3:	sub    %r10w,%ax
   2eae7:	movswq %ax,%rax
   2eaeb:	lea    (%rdx,%rax,1),%ecx
   2eaee:	and    $0x7fe0,%ecx
   2eaf4:	shr    $0x5,%ecx
   2eaf7:	movslq %ecx,%rcx
   2eafa:	movzbl 0x80(%r14,%rcx,1),%ecx
   2eb03:	mov    %cl,0x4(%r13,%r12,1)
   2eb08:	sub    %edx,%eax
   2eb0a:	and    $0x7fe0,%eax
   2eb0f:	shr    $0x5,%eax
   2eb12:	movslq %eax,%rax
   2eb15:	movzbl 0x80(%rax,%r14,1),%eax
   2eb1e:	mov    %al,0x3(%r13,%r12,1)
   2eb23:	mov    -0x68(%rbp),%rax
   2eb27:	lea    0x20(%rax),%rdx
   2eb2b:	mov    -0x70(%rbp),%rcx
   2eb2f:	mov    -0x40(%rbp),%rax
   2eb33:	add    $0x1,%ecx
   2eb36:	cmp    $0x7,%ecx
   2eb39:	jle    2eb51 <jpeg_idct_ifast+0x591>
   2eb3b:	mov    -0x28(%rbp),%r15
   2eb3f:	mov    -0x20(%rbp),%r14
   2eb43:	mov    -0x18(%rbp),%r13
   2eb47:	mov    -0x10(%rbp),%r12
   2eb4b:	mov    -0x8(%rbp),%rbx
   2eb4f:	leaveq 
   2eb50:	retq   
   2eb51:	movslq %ecx,%rsi
   2eb54:	mov    (%rax,%rsi,8),%r12
   2eb58:	movslq 0x4(%rdx),%rsi
   2eb5c:	test   %esi,%esi
   2eb5e:	jne    2e8d6 <jpeg_idct_ifast+0x316>
   2eb64:	movslq 0x8(%rdx),%rsi
   2eb68:	test   %esi,%esi
   2eb6a:	jne    2e8d6 <jpeg_idct_ifast+0x316>
   2eb70:	movslq 0xc(%rdx),%rsi
   2eb74:	test   %esi,%esi
   2eb76:	jne    2e8d6 <jpeg_idct_ifast+0x316>
   2eb7c:	movslq 0x10(%rdx),%rsi
   2eb80:	test   %esi,%esi
   2eb82:	jne    2e8d6 <jpeg_idct_ifast+0x316>
   2eb88:	movslq 0x14(%rdx),%rsi
   2eb8c:	test   %esi,%esi
   2eb8e:	jne    2e8d6 <jpeg_idct_ifast+0x316>
   2eb94:	movslq 0x18(%rdx),%rsi
   2eb98:	test   %esi,%esi
   2eb9a:	jne    2e8d6 <jpeg_idct_ifast+0x316>
   2eba0:	movslq 0x1c(%rdx),%rsi
   2eba4:	test   %esi,%esi
   2eba6:	jne    2e8d6 <jpeg_idct_ifast+0x316>
   2ebac:	movslq (%rdx),%rsi
   2ebaf:	and    $0x7fe0,%esi
   2ebb5:	shr    $0x5,%esi
   2ebb8:	movslq %esi,%rsi
   2ebbb:	movzbl 0x80(%r14,%rsi,1),%esi
   2ebc4:	mov    %sil,0x0(%r13,%r12,1)
   2ebc9:	mov    %sil,0x1(%r13,%r12,1)
   2ebce:	mov    %sil,0x2(%r13,%r12,1)
   2ebd3:	mov    %sil,0x3(%r13,%r12,1)
   2ebd8:	mov    %sil,0x4(%r13,%r12,1)
   2ebdd:	mov    %sil,0x5(%r13,%r12,1)
   2ebe2:	mov    %sil,0x6(%r13,%r12,1)
   2ebe7:	mov    %sil,0x7(%r13,%r12,1)
   2ebec:	add    $0x20,%rdx
   2ebf0:	jmpq   2eb33 <jpeg_idct_ifast+0x573>
   2ebf5:	nopw   %cs:0x0(%rax,%rax,1)
   2ebff:	nop

000000000002ec00 <jpeg_idct_islow>:
   2ec00:	push   %rbp
   2ec01:	mov    %rsp,%rbp
   2ec04:	sub    $0x170,%rsp
   2ec0b:	mov    %r8,-0x30(%rbp)
   2ec0f:	mov    %rcx,-0x40(%rbp)
   2ec13:	mov    %rbx,-0x8(%rbp)
   2ec17:	mov    %r12,-0x10(%rbp)
   2ec1b:	mov    %r13,-0x18(%rbp)
   2ec1f:	mov    %r14,-0x20(%rbp)
   2ec23:	mov    %r15,-0x28(%rbp)
   2ec27:	mov    0x1a8(%rdi),%rax
   2ec2e:	mov    %rax,-0x38(%rbp)
   2ec32:	mov    0x58(%rsi),%rax
   2ec36:	lea    -0x170(%rbp),%rcx
   2ec3d:	mov    $0x8,%esi
   2ec42:	jmpq   2ef1c <jpeg_idct_islow+0x31c>
   2ec47:	movswq 0x70(%rax),%rdi
   2ec4c:	movswq 0x70(%rdx),%rbx
   2ec51:	imul   %ebx,%edi
   2ec54:	movslq %edi,%r13
   2ec57:	mov    %r13,-0x58(%rbp)
   2ec5b:	movswq 0x30(%rax),%rdi
   2ec60:	movswq 0x30(%rdx),%rbx
   2ec65:	imul   %ebx,%edi
   2ec68:	movslq %edi,%r11
   2ec6b:	lea    (%r11,%r13,1),%r8
   2ec6f:	movswq 0x10(%rax),%rdi
   2ec74:	movswq 0x10(%rdx),%rbx
   2ec79:	imul   %ebx,%edi
   2ec7c:	movslq %edi,%r12
   2ec7f:	movswq 0x50(%rax),%rdi
   2ec84:	movswq 0x50(%rdx),%rbx
   2ec89:	imul   %ebx,%edi
   2ec8c:	movslq %edi,%r15
   2ec8f:	lea    (%r12,%r15,1),%r10
   2ec93:	lea    (%r8,%r10,1),%rbx
   2ec97:	lea    (%rbx,%rbx,8),%rdi
   2ec9b:	shl    $0x5,%rdi
   2ec9f:	lea    (%rdi,%rbx,8),%rdi
   2eca3:	lea    (%rdi,%rbx,4),%rdi
   2eca7:	add    %rbx,%rdi
   2ecaa:	shl    $0x5,%rdi
   2ecae:	lea    (%rbx,%rdi,1),%r9
   2ecb2:	mov    %r10,%rbx
   2ecb5:	shl    $0x2,%rbx
   2ecb9:	lea    (%r10,%rbx,1),%rdi
   2ecbd:	mov    %rdi,%r10
   2ecc0:	shl    $0x7,%r10
   2ecc4:	shl    $0x9,%rdi
   2ecc8:	add    %r10,%rdi
   2eccb:	sub    %rdi,%rbx
   2ecce:	add    %r9,%rbx
   2ecd1:	lea    0x0(%r13,%r12,1),%rdi
   2ecd6:	imul   $0xffffffffffffe333,%rdi,%rdi
   2ecdd:	mov    %rdi,-0x50(%rbp)
   2ece1:	lea    (%rdi,%rbx,1),%r10
   2ece5:	lea    (%r12,%r12,2),%rdi
   2ece9:	shl    $0xc,%rdi
   2eced:	lea    (%rdi,%r12,8),%rdi
   2ecf1:	lea    (%rdi,%r12,2),%rdi
   2ecf5:	add    %r12,%rdi
   2ecf8:	lea    (%r10,%rdi,1),%r12
   2ecfc:	movswq 0x20(%rax),%rdi
   2ed01:	movswq 0x20(%rdx),%r10
   2ed06:	imul   %r10d,%edi
   2ed0a:	movslq %edi,%r14
   2ed0d:	movswq 0x60(%rax),%rdi
   2ed12:	mov    %rsi,-0x70(%rbp)
   2ed16:	movswq 0x60(%rdx),%rsi
   2ed1b:	imul   %esi,%edi
   2ed1e:	movslq %edi,%rdi
   2ed21:	lea    (%r14,%rdi,1),%r13
   2ed25:	mov    %r13,%r10
   2ed28:	shl    $0x4,%r10
   2ed2c:	mov    %r13,%rsi
   2ed2f:	shl    $0x8,%rsi
   2ed33:	add    %r10,%rsi
   2ed36:	lea    (%rsi,%r13,4),%rsi
   2ed3a:	add    %r13,%rsi
   2ed3d:	shl    $0x4,%rsi
   2ed41:	lea    0x0(%r13,%rsi,1),%r10
   2ed46:	lea    (%r14,%r14,2),%rsi
   2ed4a:	shl    $0x4,%rsi
   2ed4e:	add    %r14,%rsi
   2ed51:	shl    $0x7,%rsi
   2ed55:	lea    (%r14,%r14,1),%r13
   2ed59:	sub    %r13,%rsi
   2ed5c:	lea    (%r10,%rsi,1),%r14
   2ed60:	movswq 0x40(%rax),%rsi
   2ed65:	movswq 0x40(%rdx),%r13
   2ed6a:	imul   %r13d,%esi
   2ed6e:	movslq %esi,%r13
   2ed71:	movswq (%rax),%rsi
   2ed75:	mov    %rax,-0x60(%rbp)
   2ed79:	movswq (%rdx),%rax
   2ed7d:	imul   %eax,%esi
   2ed80:	movslq %esi,%rax
   2ed83:	lea    0x0(%r13,%rax,1),%rsi
   2ed88:	shl    $0xd,%rsi
   2ed8c:	mov    %rdx,-0x68(%rbp)
   2ed90:	mov    %rsi,-0x48(%rbp)
   2ed94:	lea    (%r14,%rsi,1),%rdx
   2ed98:	lea    0x400(%r12,%rdx,1),%rsi
   2eda0:	sar    $0xb,%rsi
   2eda4:	mov    %esi,(%rcx)
   2eda6:	sub    %r12,%rdx
   2eda9:	add    $0x400,%rdx
   2edb0:	sar    $0xb,%rdx
   2edb4:	mov    %edx,0xe0(%rcx)
   2edba:	lea    (%r8,%r8,4),%rdx
   2edbe:	mov    %rdx,%rsi
   2edc1:	shl    $0x6,%rsi
   2edc5:	sub    %rsi,%rdx
   2edc8:	shl    $0xe,%r8
   2edcc:	lea    (%r8,%rdx,1),%r12
   2edd0:	lea    (%r11,%r15,1),%rsi
   2edd4:	lea    (%rsi,%rsi,4),%rdx
   2edd8:	lea    (%rsi,%rdx,8),%rdx
   2eddc:	shl    $0x9,%rdx
   2ede0:	lea    (%rdx,%rsi,2),%rdx
   2ede4:	lea    (%rsi,%rdx,1),%r8
   2ede8:	lea    (%r12,%r8,1),%rdx
   2edec:	mov    %r9,%rsi
   2edef:	sub    %rdx,%rsi
   2edf2:	lea    (%r11,%r11,2),%rdx
   2edf6:	shl    $0x4,%rdx
   2edfa:	add    %r11,%rdx
   2edfd:	shl    $0x5,%rdx
   2ee01:	lea    (%rdx,%r11,4),%rdx
   2ee05:	add    %r11,%rdx
   2ee08:	shl    $0x4,%rdx
   2ee0c:	lea    (%rdx,%r11,4),%rdx
   2ee10:	lea    (%rdx,%rsi,1),%r11
   2ee14:	imul   $0xffffffffffffc4df,%rdi,%rdi
   2ee1b:	add    %rdi,%r10
   2ee1e:	sub    %r13,%rax
   2ee21:	shl    $0xd,%rax
   2ee25:	lea    (%r10,%rax,1),%rdx
   2ee29:	lea    0x400(%r11,%rdx,1),%rsi
   2ee31:	sar    $0xb,%rsi
   2ee35:	mov    %esi,0x20(%rcx)
   2ee38:	sub    %r11,%rdx
   2ee3b:	add    $0x400,%rdx
   2ee42:	sar    $0xb,%rdx
   2ee46:	mov    %edx,0xc0(%rcx)
   2ee4c:	sub    %r8,%rbx
   2ee4f:	mov    %r15,%rsi
   2ee52:	shl    $0x9,%rsi
   2ee56:	mov    %r15,%rdx
   2ee59:	shl    $0xe,%rdx
   2ee5d:	add    %rsi,%rdx
   2ee60:	mov    %r15,%rdi
   2ee63:	shl    $0x2,%rdi
   2ee67:	lea    (%r15,%r15,8),%rsi
   2ee6b:	lea    (%rdi,%rsi,8),%rsi
   2ee6f:	add    %r15,%rsi
   2ee72:	sub    %rsi,%rdx
   2ee75:	lea    (%rdx,%rbx,1),%rsi
   2ee79:	mov    %rax,%rdx
   2ee7c:	sub    %r10,%rdx
   2ee7f:	lea    0x400(%rsi,%rdx,1),%rdx
   2ee87:	sar    $0xb,%rdx
   2ee8b:	mov    %edx,0x40(%rcx)
   2ee8e:	lea    (%rsi,%r10,1),%rdx
   2ee92:	sub    %rdx,%rax
   2ee95:	add    $0x400,%rax
   2ee9b:	sar    $0xb,%rax
   2ee9f:	mov    %eax,0xa0(%rcx)
   2eea5:	sub    %r12,%r9
   2eea8:	mov    -0x50(%rbp),%rax
   2eeac:	lea    (%rax,%r9,1),%rdx
   2eeb0:	mov    -0x58(%rbp),%rsi
   2eeb4:	lea    (%rsi,%rsi,8),%rax
   2eeb8:	lea    (%rsi,%rax,2),%rax
   2eebc:	shl    $0x7,%rax
   2eec0:	lea    (%rax,%rsi,8),%rax
   2eec4:	lea    (%rax,%rsi,4),%rax
   2eec8:	lea    (%rax,%rsi,2),%rax
   2eecc:	lea    (%rdx,%rax,1),%rsi
   2eed0:	mov    -0x48(%rbp),%rdx
   2eed4:	mov    %rdx,%rax
   2eed7:	sub    %r14,%rax
   2eeda:	lea    0x400(%rsi,%rax,1),%rax
   2eee2:	sar    $0xb,%rax
   2eee6:	mov    %eax,0x60(%rcx)
   2eee9:	lea    (%rsi,%r14,1),%rax
   2eeed:	sub    %rax,%rdx
   2eef0:	lea    0x400(%rdx),%rax
   2eef7:	sar    $0xb,%rax
   2eefb:	mov    %eax,0x80(%rcx)
   2ef01:	mov    -0x68(%rbp),%rax
   2ef05:	lea    0x2(%rax),%rdx
   2ef09:	mov    -0x60(%rbp),%rax
   2ef0d:	add    $0x2,%rax
   2ef11:	add    $0x4,%rcx
   2ef15:	mov    -0x70(%rbp),%rsi
   2ef19:	add    $0xffffffff,%esi
   2ef1c:	test   %esi,%esi
   2ef1e:	jg     2ef3d <jpeg_idct_islow+0x33d>
   2ef20:	mov    -0x30(%rbp),%rax
   2ef24:	mov    %eax,%r14d
   2ef27:	xor    %eax,%eax
   2ef29:	mov    -0x38(%rbp),%r15
   2ef2d:	lea    -0x170(%rbp),%rcx
   2ef34:	mov    -0x40(%rbp),%rdx
   2ef38:	jmpq   2f2e4 <jpeg_idct_islow+0x6e4>
   2ef3d:	movswq 0x10(%rdx),%rdi
   2ef42:	test   %di,%di
   2ef45:	jne    2ec47 <jpeg_idct_islow+0x47>
   2ef4b:	movswq 0x20(%rdx),%rdi
   2ef50:	test   %di,%di
   2ef53:	jne    2ec47 <jpeg_idct_islow+0x47>
   2ef59:	movswq 0x30(%rdx),%rdi
   2ef5e:	test   %di,%di
   2ef61:	jne    2ec47 <jpeg_idct_islow+0x47>
   2ef67:	movswq 0x40(%rdx),%rdi
   2ef6c:	test   %di,%di
   2ef6f:	jne    2ec47 <jpeg_idct_islow+0x47>
   2ef75:	movswq 0x50(%rdx),%rdi
   2ef7a:	test   %di,%di
   2ef7d:	jne    2ec47 <jpeg_idct_islow+0x47>
   2ef83:	movswq 0x60(%rdx),%rdi
   2ef88:	test   %di,%di
   2ef8b:	jne    2ec47 <jpeg_idct_islow+0x47>
   2ef91:	movswq 0x70(%rdx),%rdi
   2ef96:	test   %di,%di
   2ef99:	jne    2ec47 <jpeg_idct_islow+0x47>
   2ef9f:	movswq (%rax),%rdi
   2efa3:	movswq (%rdx),%rbx
   2efa7:	imul   %ebx,%edi
   2efaa:	shl    $0x2,%edi
   2efad:	mov    %edi,(%rcx)
   2efaf:	mov    %edi,0x20(%rcx)
   2efb2:	mov    %edi,0x40(%rcx)
   2efb5:	mov    %edi,0x60(%rcx)
   2efb8:	mov    %edi,0x80(%rcx)
   2efbe:	mov    %edi,0xa0(%rcx)
   2efc4:	mov    %edi,0xc0(%rcx)
   2efca:	mov    %edi,0xe0(%rcx)
   2efd0:	add    $0x2,%rdx
   2efd4:	add    $0x2,%rax
   2efd8:	add    $0x4,%rcx
   2efdc:	jmpq   2ef19 <jpeg_idct_islow+0x319>
   2efe1:	movslq 0x1c(%rcx),%r12
   2efe5:	mov    %r12,-0x48(%rbp)
   2efe9:	movslq 0xc(%rcx),%r10
   2efed:	lea    (%r10,%r12,1),%rdi
   2eff1:	movslq 0x4(%rcx),%r11
   2eff5:	movslq 0x14(%rcx),%r9
   2eff9:	lea    (%r11,%r9,1),%r8
   2effd:	lea    (%rdi,%r8,1),%rsi
   2f001:	lea    (%rsi,%rsi,8),%rdx
   2f005:	shl    $0x5,%rdx
   2f009:	lea    (%rdx,%rsi,8),%rdx
   2f00d:	lea    (%rdx,%rsi,4),%rdx
   2f011:	add    %rsi,%rdx
   2f014:	shl    $0x5,%rdx
   2f018:	lea    (%rsi,%rdx,1),%rbx
   2f01c:	mov    %r8,%rdx
   2f01f:	shl    $0x2,%rdx
   2f023:	lea    (%r8,%rdx,1),%rsi
   2f027:	mov    %rsi,%r8
   2f02a:	shl    $0x7,%r8
   2f02e:	shl    $0x9,%rsi
   2f032:	add    %r8,%rsi
   2f035:	sub    %rsi,%rdx
   2f038:	lea    (%rbx,%rdx,1),%rsi
   2f03c:	mov    %rsi,-0x60(%rbp)
   2f040:	lea    (%r12,%r11,1),%rdx
   2f044:	imul   $0xffffffffffffe333,%rdx,%rdx
   2f04b:	mov    %rdx,-0x38(%rbp)
   2f04f:	add    %rsi,%rdx
   2f052:	mov    %rax,-0x70(%rbp)
   2f056:	lea    (%r11,%r11,2),%rax
   2f05a:	shl    $0xc,%rax
   2f05e:	lea    (%rax,%r11,8),%rax
   2f062:	lea    (%rax,%r11,2),%rax
   2f066:	add    %r11,%rax
   2f069:	lea    (%rdx,%rax,1),%r11
   2f06d:	movslq 0x8(%rcx),%r8
   2f071:	movslq 0x18(%rcx),%rsi
   2f075:	lea    (%r8,%rsi,1),%r12
   2f079:	mov    %r12,%rdx
   2f07c:	shl    $0x4,%rdx
   2f080:	mov    %r12,%rax
   2f083:	shl    $0x8,%rax
   2f087:	add    %rdx,%rax
   2f08a:	lea    (%rax,%r12,4),%rax
   2f08e:	add    %r12,%rax
   2f091:	shl    $0x4,%rax
   2f095:	add    %rax,%r12
   2f098:	lea    (%r8,%r8,2),%rax
   2f09c:	shl    $0x4,%rax
   2f0a0:	add    %r8,%rax
   2f0a3:	shl    $0x7,%rax
   2f0a7:	lea    (%r8,%r8,1),%rdx
   2f0ab:	sub    %rdx,%rax
   2f0ae:	lea    (%r12,%rax,1),%rdx
   2f0b2:	mov    %rdx,-0x58(%rbp)
   2f0b6:	movslq 0x10(%rcx),%r8
   2f0ba:	movslq (%rcx),%rax
   2f0bd:	mov    %rcx,-0x68(%rbp)
   2f0c1:	lea    (%r8,%rax,1),%rcx
   2f0c5:	shl    $0xd,%rcx
   2f0c9:	mov    %rcx,-0x50(%rbp)
   2f0cd:	add    %rcx,%rdx
   2f0d0:	lea    0x20000(%r11,%rdx,1),%rcx
   2f0d8:	sar    $0x12,%rcx
   2f0dc:	and    $0x3ff,%ecx
   2f0e2:	movslq %ecx,%rcx
   2f0e5:	movzbl 0x80(%r15,%rcx,1),%ecx
   2f0ee:	mov    %cl,(%r14,%r13,1)
   2f0f2:	sub    %r11,%rdx
   2f0f5:	lea    0x20000(%rdx),%rcx
   2f0fc:	sar    $0x12,%rcx
   2f100:	and    $0x3ff,%ecx
   2f106:	movslq %ecx,%rcx
   2f109:	movzbl 0x80(%r15,%rcx,1),%ecx
   2f112:	mov    %cl,0x7(%r14,%r13,1)
   2f117:	lea    (%rdi,%rdi,4),%rcx
   2f11b:	mov    %rcx,%rdx
   2f11e:	shl    $0x6,%rdx
   2f122:	sub    %rdx,%rcx
   2f125:	shl    $0xe,%rdi
   2f129:	lea    (%rdi,%rcx,1),%r11
   2f12d:	lea    (%r10,%r9,1),%rdx
   2f131:	lea    (%rdx,%rdx,4),%rcx
   2f135:	lea    (%rdx,%rcx,8),%rcx
   2f139:	shl    $0x9,%rcx
   2f13d:	lea    (%rcx,%rdx,2),%rcx
   2f141:	lea    (%rdx,%rcx,1),%rdi
   2f145:	lea    (%r11,%rdi,1),%rcx
   2f149:	mov    %rbx,%rdx
   2f14c:	sub    %rcx,%rdx
   2f14f:	lea    (%r10,%r10,2),%rcx
   2f153:	shl    $0x4,%rcx
   2f157:	add    %r10,%rcx
   2f15a:	shl    $0x5,%rcx
   2f15e:	lea    (%rcx,%r10,4),%rcx
   2f162:	add    %r10,%rcx
   2f165:	shl    $0x4,%rcx
   2f169:	lea    (%rcx,%r10,4),%rcx
   2f16d:	lea    (%rcx,%rdx,1),%r10
   2f171:	imul   $0xffffffffffffc4df,%rsi,%rsi
   2f178:	add    %rsi,%r12
   2f17b:	sub    %r8,%rax
   2f17e:	shl    $0xd,%rax
   2f182:	lea    (%r12,%rax,1),%rdx
   2f186:	lea    0x20000(%r10,%rdx,1),%rcx
   2f18e:	sar    $0x12,%rcx
   2f192:	and    $0x3ff,%ecx
   2f198:	movslq %ecx,%rcx
   2f19b:	movzbl 0x80(%r15,%rcx,1),%ecx
   2f1a4:	mov    %cl,0x1(%r14,%r13,1)
   2f1a9:	sub    %r10,%rdx
   2f1ac:	lea    0x20000(%rdx),%rcx
   2f1b3:	sar    $0x12,%rcx
   2f1b7:	and    $0x3ff,%ecx
   2f1bd:	movslq %ecx,%rcx
   2f1c0:	movzbl 0x80(%r15,%rcx,1),%ecx
   2f1c9:	mov    %cl,0x6(%r14,%r13,1)
   2f1ce:	mov    -0x60(%rbp),%rdx
   2f1d2:	sub    %rdi,%rdx
   2f1d5:	mov    %r9,%rsi
   2f1d8:	shl    $0x9,%rsi
   2f1dc:	mov    %r9,%rcx
   2f1df:	shl    $0xe,%rcx
   2f1e3:	add    %rsi,%rcx
   2f1e6:	mov    %r9,%rsi
   2f1e9:	shl    $0x2,%rsi
   2f1ed:	lea    (%r9,%r9,8),%rdi
   2f1f1:	lea    (%rsi,%rdi,8),%rsi
   2f1f5:	add    %r9,%rsi
   2f1f8:	sub    %rsi,%rcx
   2f1fb:	add    %rcx,%rdx
   2f1fe:	mov    %rax,%rcx
   2f201:	sub    %r12,%rcx
   2f204:	lea    0x20000(%rdx,%rcx,1),%rcx
   2f20c:	sar    $0x12,%rcx
   2f210:	and    $0x3ff,%ecx
   2f216:	movslq %ecx,%rcx
   2f219:	movzbl 0x80(%r15,%rcx,1),%ecx
   2f222:	mov    %cl,0x2(%r14,%r13,1)
   2f227:	lea    (%rdx,%r12,1),%rcx
   2f22b:	sub    %rcx,%rax
   2f22e:	add    $0x20000,%rax
   2f234:	sar    $0x12,%rax
   2f238:	and    $0x3ff,%eax
   2f23d:	movslq %eax,%rax
   2f240:	movzbl 0x80(%r15,%rax,1),%eax
   2f249:	mov    %al,0x5(%r14,%r13,1)
   2f24e:	sub    %r11,%rbx
   2f251:	mov    -0x38(%rbp),%rax
   2f255:	lea    (%rax,%rbx,1),%rdx
   2f259:	mov    -0x48(%rbp),%rcx
   2f25d:	lea    (%rcx,%rcx,8),%rax
   2f261:	lea    (%rcx,%rax,2),%rax
   2f265:	shl    $0x7,%rax
   2f269:	lea    (%rax,%rcx,8),%rax
   2f26d:	lea    (%rax,%rcx,4),%rax
   2f271:	lea    (%rax,%rcx,2),%rax
   2f275:	lea    (%rdx,%rax,1),%rsi
   2f279:	mov    -0x50(%rbp),%rcx
   2f27d:	mov    -0x58(%rbp),%rdx
   2f281:	mov    %rcx,%rax
   2f284:	sub    %rdx,%rax
   2f287:	lea    0x20000(%rsi,%rax,1),%rax
   2f28f:	sar    $0x12,%rax
   2f293:	and    $0x3ff,%eax
   2f298:	movslq %eax,%rax
   2f29b:	movzbl 0x80(%r15,%rax,1),%eax
   2f2a4:	mov    %al,0x3(%r14,%r13,1)
   2f2a9:	lea    (%rsi,%rdx,1),%rax
   2f2ad:	sub    %rax,%rcx
   2f2b0:	lea    0x20000(%rcx),%rax
   2f2b7:	sar    $0x12,%rax
   2f2bb:	and    $0x3ff,%eax
   2f2c0:	movslq %eax,%rax
   2f2c3:	movzbl 0x80(%rax,%r15,1),%eax
   2f2cc:	mov    %al,0x4(%r14,%r13,1)
   2f2d1:	mov    -0x68(%rbp),%rax
   2f2d5:	lea    0x20(%rax),%rcx
   2f2d9:	mov    -0x70(%rbp),%rax
   2f2dd:	mov    -0x40(%rbp),%rdx
   2f2e1:	add    $0x1,%eax
   2f2e4:	cmp    $0x7,%eax
   2f2e7:	jle    2f2ff <jpeg_idct_islow+0x6ff>
   2f2e9:	mov    -0x28(%rbp),%r15
   2f2ed:	mov    -0x20(%rbp),%r14
   2f2f1:	mov    -0x18(%rbp),%r13
   2f2f5:	mov    -0x10(%rbp),%r12
   2f2f9:	mov    -0x8(%rbp),%rbx
   2f2fd:	leaveq 
   2f2fe:	retq   
   2f2ff:	movslq %eax,%rsi
   2f302:	mov    (%rdx,%rsi,8),%r13
   2f306:	movslq 0x4(%rcx),%rsi
   2f30a:	test   %esi,%esi
   2f30c:	jne    2efe1 <jpeg_idct_islow+0x3e1>
   2f312:	movslq 0x8(%rcx),%rsi
   2f316:	test   %esi,%esi
   2f318:	jne    2efe1 <jpeg_idct_islow+0x3e1>
   2f31e:	movslq 0xc(%rcx),%rsi
   2f322:	test   %esi,%esi
   2f324:	jne    2efe1 <jpeg_idct_islow+0x3e1>
   2f32a:	movslq 0x10(%rcx),%rsi
   2f32e:	test   %esi,%esi
   2f330:	jne    2efe1 <jpeg_idct_islow+0x3e1>
   2f336:	movslq 0x14(%rcx),%rsi
   2f33a:	test   %esi,%esi
   2f33c:	jne    2efe1 <jpeg_idct_islow+0x3e1>
   2f342:	movslq 0x18(%rcx),%rsi
   2f346:	test   %esi,%esi
   2f348:	jne    2efe1 <jpeg_idct_islow+0x3e1>
   2f34e:	movslq 0x1c(%rcx),%rsi
   2f352:	test   %esi,%esi
   2f354:	jne    2efe1 <jpeg_idct_islow+0x3e1>
   2f35a:	movslq (%rcx),%rsi
   2f35d:	add    $0x10,%rsi
   2f361:	sar    $0x5,%rsi
   2f365:	and    $0x3ff,%esi
   2f36b:	movslq %esi,%rsi
   2f36e:	movzbl 0x80(%r15,%rsi,1),%esi
   2f377:	mov    %sil,(%r14,%r13,1)
   2f37b:	mov    %sil,0x1(%r14,%r13,1)
   2f380:	mov    %sil,0x2(%r14,%r13,1)
   2f385:	mov    %sil,0x3(%r14,%r13,1)
   2f38a:	mov    %sil,0x4(%r14,%r13,1)
   2f38f:	mov    %sil,0x5(%r14,%r13,1)
   2f394:	mov    %sil,0x6(%r14,%r13,1)
   2f399:	mov    %sil,0x7(%r14,%r13,1)
   2f39e:	add    $0x20,%rcx
   2f3a2:	jmpq   2f2e1 <jpeg_idct_islow+0x6e1>
   2f3a7:	nopw   0x0(%rax,%rax,1)

000000000002f3b0 <jpeg_idct_7x7>:
   2f3b0:	push   %rbp
   2f3b1:	mov    %rsp,%rbp
   2f3b4:	sub    $0x140,%rsp
   2f3bb:	mov    %r8,-0x30(%rbp)
   2f3bf:	mov    %rcx,-0x38(%rbp)
   2f3c3:	mov    %rbx,-0x48(%rbp)
   2f3c7:	mov    %r12,-0x50(%rbp)
   2f3cb:	mov    %r13,-0x58(%rbp)
   2f3cf:	mov    %r14,-0x60(%rbp)
   2f3d3:	mov    %r15,-0x68(%rbp)
   2f3d7:	mov    0x1a8(%rdi),%rax
   2f3de:	mov    %rax,-0x40(%rbp)
   2f3e2:	mov    0x58(%rsi),%rbx
   2f3e6:	xor    %r8d,%r8d
   2f3e9:	lea    -0x134(%rbp),%r9
   2f3f0:	jmpq   2f67f <jpeg_idct_7x7+0x2cf>
   2f3f5:	movswq 0x10(%rbx),%rax
   2f3fa:	movswq 0x10(%rdx),%rcx
   2f3ff:	imul   %ecx,%eax
   2f402:	movslq %eax,%r11
   2f405:	movswq 0x30(%rbx),%rax
   2f40a:	movswq 0x30(%rdx),%rcx
   2f40f:	imul   %ecx,%eax
   2f412:	movslq %eax,%r14
   2f415:	mov    %r11,%rcx
   2f418:	sub    %r14,%rcx
   2f41b:	lea    (%rcx,%rcx,2),%rax
   2f41f:	lea    (%rcx,%rax,4),%r15
   2f423:	lea    (%rcx,%rcx,4),%rax
   2f427:	lea    (%rcx,%rax,2),%rdi
   2f42b:	shl    $0x7,%rdi
   2f42f:	mov    %r15,%r10
   2f432:	sub    %rdi,%r10
   2f435:	lea    (%r11,%r14,1),%rsi
   2f439:	mov    %rsi,%rcx
   2f43c:	shl    $0x4,%rcx
   2f440:	mov    %rsi,%rax
   2f443:	shl    $0x9,%rax
   2f447:	add    %rcx,%rax
   2f44a:	add    %rsi,%rax
   2f44d:	shl    $0xd,%rsi
   2f451:	sub    %rax,%rsi
   2f454:	lea    (%rsi,%r10,1),%r12
   2f458:	movswq 0x50(%rbx),%rax
   2f45d:	movswq 0x50(%rdx),%rcx
   2f462:	imul   %ecx,%eax
   2f465:	movslq %eax,%rcx
   2f468:	add    %rcx,%r11
   2f46b:	lea    (%r11,%r11,4),%rax
   2f46f:	shl    $0x5,%rax
   2f473:	lea    (%r11,%r11,2),%r10
   2f477:	sub    %r10,%rax
   2f47a:	shl    $0x5,%rax
   2f47e:	lea    (%rax,%r11,2),%rax
   2f482:	add    %r11,%rax
   2f485:	mov    %rax,-0x18(%rbp)
   2f489:	add    %rax,%r12
   2f48c:	movswq 0x40(%rbx),%rax
   2f491:	movswq 0x40(%rdx),%r10
   2f496:	imul   %r10d,%eax
   2f49a:	movslq %eax,%r10
   2f49d:	movswq 0x60(%rbx),%rax
   2f4a2:	movswq 0x60(%rdx),%r11
   2f4a7:	imul   %r11d,%eax
   2f4ab:	movslq %eax,%r11
   2f4ae:	mov    %r10,%r13
   2f4b1:	sub    %r11,%r13
   2f4b4:	mov    %r8,-0x70(%rbp)
   2f4b8:	lea    0x0(%r13,%r13,2),%rax
   2f4bd:	lea    0x0(%r13,%rax,2),%rax
   2f4c2:	shl    $0x4,%rax
   2f4c6:	add    %r13,%rax
   2f4c9:	shl    $0x6,%rax
   2f4cd:	lea    0x0(%r13,%r13,8),%r8
   2f4d2:	sub    %r8,%rax
   2f4d5:	movswq 0x20(%rbx),%r8
   2f4da:	movswq 0x20(%rdx),%r13
   2f4df:	imul   %r13d,%r8d
   2f4e3:	movslq %r8d,%r8
   2f4e6:	mov    %r8,-0x10(%rbp)
   2f4ea:	lea    (%r11,%r8,1),%r13
   2f4ee:	lea    0x0(%r13,%r13,4),%r8
   2f4f3:	shl    $0x5,%r8
   2f4f7:	lea    (%r8,%r13,2),%r8
   2f4fb:	add    %r13,%r8
   2f4fe:	shl    $0x6,%r8
   2f502:	lea    (%r8,%r13,4),%r8
   2f506:	lea    (%r8,%r13,2),%r8
   2f50a:	mov    %rbx,-0x28(%rbp)
   2f50e:	movswq (%rbx),%rbx
   2f512:	mov    %rdx,-0x20(%rbp)
   2f516:	movswq (%rdx),%rdx
   2f51a:	imul   %edx,%ebx
   2f51d:	movslq %ebx,%rbx
   2f520:	shl    $0xd,%rbx
   2f524:	add    %rbx,%r8
   2f527:	lea    (%r11,%r11,2),%rdx
   2f52b:	lea    (%r11,%r11,4),%r11
   2f52f:	shl    $0x7,%r11
   2f533:	sub    %r11,%rdx
   2f536:	lea    0x400(%r8,%rdx,1),%rdx
   2f53e:	add    %rax,%rdx
   2f541:	lea    (%r12,%rdx,1),%r11
   2f545:	sar    $0xb,%r11
   2f549:	mov    %r11d,(%r9)
   2f54c:	sub    %r12,%rdx
   2f54f:	sar    $0xb,%rdx
   2f553:	mov    %edx,0xa8(%r9)
   2f55a:	sub    %r15,%rdi
   2f55d:	lea    (%rsi,%rdi,1),%rdx
   2f561:	lea    (%rcx,%r14,1),%rdi
   2f565:	imul   $0xffffffffffffd3e1,%rdi,%rdi
   2f56c:	lea    (%rdi,%rdx,1),%r15
   2f570:	mov    -0x10(%rbp),%rsi
   2f574:	mov    %rsi,%r11
   2f577:	sub    %r10,%r11
   2f57a:	lea    (%r11,%r11,4),%rdx
   2f57e:	shl    $0x5,%rdx
   2f582:	add    %r11,%rdx
   2f585:	shl    $0x4,%rdx
   2f589:	lea    (%rdx,%r11,2),%r11
   2f58d:	add    %r11,%rax
   2f590:	lea    (%rax,%rbx,1),%r12
   2f594:	lea    (%r10,%r10,4),%rax
   2f598:	shl    $0x4,%rax
   2f59c:	add    %r10,%rax
   2f59f:	shl    $0x4,%rax
   2f5a3:	lea    (%rax,%r10,4),%rax
   2f5a7:	lea    (%r10,%rax,1),%r14
   2f5ab:	mov    %r10,%rdx
   2f5ae:	shl    $0xe,%rdx
   2f5b2:	mov    %r14,%rax
   2f5b5:	sub    %rdx,%rax
   2f5b8:	lea    0x400(%r12,%rax,1),%rax
   2f5c0:	add    %r15,%rax
   2f5c3:	sar    $0xb,%rax
   2f5c7:	mov    %eax,0x1c(%r9)
   2f5cb:	lea    0x400(%r12),%rax
   2f5d3:	sub    %r14,%rdx
   2f5d6:	add    %r15,%rdx
   2f5d9:	sub    %rdx,%rax
   2f5dc:	sar    $0xb,%rax
   2f5e0:	mov    %eax,0x8c(%r9)
   2f5e7:	lea    0x400(%r8),%rax
   2f5ee:	imul   $0x4f0f,%rsi,%rsi
   2f5f5:	sub    %rsi,%rax
   2f5f8:	add    %r11,%rax
   2f5fb:	mov    %rcx,%rdx
   2f5fe:	shl    $0x5,%rdx
   2f602:	mov    %rcx,%rsi
   2f605:	shl    $0xa,%rsi
   2f609:	add    %rsi,%rdx
   2f60c:	lea    (%rdx,%rcx,2),%rdx
   2f610:	shl    $0xe,%rcx
   2f614:	sub    %rdx,%rcx
   2f617:	mov    -0x18(%rbp),%rdx
   2f61b:	add    %rdx,%rcx
   2f61e:	lea    (%rcx,%rdi,1),%rdx
   2f622:	lea    (%rdx,%rax,1),%rcx
   2f626:	sar    $0xb,%rcx
   2f62a:	mov    %ecx,0x38(%r9)
   2f62e:	sub    %rdx,%rax
   2f631:	sar    $0xb,%rax
   2f635:	mov    %eax,0x70(%r9)
   2f639:	sub    %r13,%r10
   2f63c:	lea    (%r10,%r10,8),%rax
   2f640:	shl    $0x8,%rax
   2f644:	lea    (%rax,%r10,8),%rax
   2f648:	lea    (%rax,%r10,4),%rax
   2f64c:	add    %r10,%rax
   2f64f:	lea    (%rax,%rax,4),%rax
   2f653:	lea    0x400(%rax,%rbx,1),%rax
   2f65b:	sar    $0xb,%rax
   2f65f:	mov    %eax,0x54(%r9)
   2f663:	mov    -0x28(%rbp),%rax
   2f667:	lea    0x2(%rax),%rbx
   2f66b:	mov    -0x20(%rbp),%rax
   2f66f:	lea    0x2(%rax),%rdx
   2f673:	add    $0x4,%r9
   2f677:	mov    -0x70(%rbp),%rax
   2f67b:	lea    0x1(%rax),%r8d
   2f67f:	cmp    $0x6,%r8d
   2f683:	jle    2f3f5 <jpeg_idct_7x7+0x45>
   2f689:	mov    -0x30(%rbp),%rax
   2f68d:	mov    %eax,%r10d
   2f690:	mov    -0x40(%rbp),%r15
   2f694:	lea    -0x134(%rbp),%r8
   2f69b:	xor    %ebx,%ebx
   2f69d:	mov    -0x38(%rbp),%r9
   2f6a1:	jmpq   2f973 <jpeg_idct_7x7+0x5c3>
   2f6a6:	movslq 0x10(%r8),%rcx
   2f6aa:	mov    %rcx,-0x30(%rbp)
   2f6ae:	movslq 0x18(%r8),%rdi
   2f6b2:	sub    %rdi,%rcx
   2f6b5:	lea    (%rcx,%rcx,2),%rax
   2f6b9:	lea    (%rcx,%rax,2),%rax
   2f6bd:	shl    $0x4,%rax
   2f6c1:	add    %rcx,%rax
   2f6c4:	shl    $0x6,%rax
   2f6c8:	lea    (%rcx,%rcx,8),%rcx
   2f6cc:	sub    %rcx,%rax
   2f6cf:	mov    %rax,-0x28(%rbp)
   2f6d3:	movslq 0x8(%r8),%rcx
   2f6d7:	mov    %rcx,-0x20(%rbp)
   2f6db:	lea    (%rdi,%rcx,1),%rdx
   2f6df:	mov    %rdx,-0x8(%rbp)
   2f6e3:	lea    (%rdx,%rdx,4),%rcx
   2f6e7:	shl    $0x5,%rcx
   2f6eb:	lea    (%rcx,%rdx,2),%rcx
   2f6ef:	add    %rdx,%rcx
   2f6f2:	shl    $0x6,%rcx
   2f6f6:	lea    (%rcx,%rdx,4),%rcx
   2f6fa:	lea    (%rcx,%rdx,2),%rdx
   2f6fe:	mov    %rdx,-0x18(%rbp)
   2f702:	movslq (%r8),%rcx
   2f705:	shl    $0xd,%rcx
   2f709:	mov    %rcx,-0x70(%rbp)
   2f70d:	lea    (%rcx,%rdx,1),%rsi
   2f711:	lea    (%rdi,%rdi,2),%rdx
   2f715:	lea    (%rdi,%rdi,4),%rcx
   2f719:	shl    $0x7,%rcx
   2f71d:	sub    %rcx,%rdx
   2f720:	lea    0x20000(%rsi,%rdx,1),%rcx
   2f728:	add    %rax,%rcx
   2f72b:	movslq 0x4(%r8),%r14
   2f72f:	movslq 0xc(%r8),%r13
   2f733:	mov    %r14,%rdx
   2f736:	sub    %r13,%rdx
   2f739:	lea    (%rdx,%rdx,4),%rax
   2f73d:	lea    (%rdx,%rax,2),%rdi
   2f741:	shl    $0x7,%rdi
   2f745:	lea    (%rdx,%rdx,2),%rax
   2f749:	lea    (%rdx,%rax,4),%r12
   2f74d:	mov    %r12,%rax
   2f750:	sub    %rdi,%rax
   2f753:	lea    (%r14,%r13,1),%rsi
   2f757:	mov    %rsi,%r11
   2f75a:	shl    $0x4,%r11
   2f75e:	mov    %rsi,%rdx
   2f761:	shl    $0x9,%rdx
   2f765:	add    %r11,%rdx
   2f768:	add    %rsi,%rdx
   2f76b:	shl    $0xd,%rsi
   2f76f:	sub    %rdx,%rsi
   2f772:	lea    (%rsi,%rax,1),%r11
   2f776:	movslq 0x14(%r8),%rdx
   2f77a:	add    %rdx,%r14
   2f77d:	lea    (%r14,%r14,4),%rax
   2f781:	shl    $0x5,%rax
   2f785:	mov    %r8,-0x40(%rbp)
   2f789:	lea    (%r14,%r14,2),%r8
   2f78d:	sub    %r8,%rax
   2f790:	shl    $0x5,%rax
   2f794:	lea    (%rax,%r14,2),%rax
   2f798:	add    %rax,%r14
   2f79b:	add    %r14,%r11
   2f79e:	lea    (%r11,%rcx,1),%rax
   2f7a2:	sar    $0x12,%rax
   2f7a6:	and    $0x3ff,%eax
   2f7ab:	movslq %eax,%rax
   2f7ae:	movzbl 0x80(%r15,%rax,1),%eax
   2f7b7:	movslq %ebx,%r8
   2f7ba:	mov    (%r9,%r8,8),%r8
   2f7be:	mov    %al,(%r10,%r8,1)
   2f7c2:	sub    %r11,%rcx
   2f7c5:	sar    $0x12,%rcx
   2f7c9:	and    $0x3ff,%ecx
   2f7cf:	movslq %ecx,%rax
   2f7d2:	movzbl 0x80(%r15,%rax,1),%eax
   2f7db:	mov    %al,0x6(%r10,%r8,1)
   2f7e0:	sub    %r12,%rdi
   2f7e3:	lea    (%rsi,%rdi,1),%rcx
   2f7e7:	lea    (%rdx,%r13,1),%rax
   2f7eb:	imul   $0xffffffffffffd3e1,%rax,%rax
   2f7f2:	mov    %rax,-0x10(%rbp)
   2f7f6:	lea    (%rax,%rcx,1),%r9
   2f7fa:	mov    -0x30(%rbp),%rcx
   2f7fe:	mov    -0x20(%rbp),%rsi
   2f802:	mov    %rsi,%rdi
   2f805:	sub    %rcx,%rdi
   2f808:	lea    (%rdi,%rdi,4),%rax
   2f80c:	shl    $0x5,%rax
   2f810:	add    %rdi,%rax
   2f813:	shl    $0x4,%rax
   2f817:	lea    (%rax,%rdi,2),%r12
   2f81b:	mov    -0x28(%rbp),%rax
   2f81f:	lea    (%r12,%rax,1),%r11
   2f823:	mov    -0x70(%rbp),%r13
   2f827:	lea    (%r11,%r13,1),%rdi
   2f82b:	mov    %rbx,-0x70(%rbp)
   2f82f:	lea    (%rcx,%rcx,4),%rax
   2f833:	shl    $0x4,%rax
   2f837:	add    %rcx,%rax
   2f83a:	shl    $0x4,%rax
   2f83e:	lea    (%rax,%rcx,4),%rax
   2f842:	lea    (%rcx,%rax,1),%rbx
   2f846:	shl    $0xe,%rcx
   2f84a:	mov    %rbx,%rax
   2f84d:	sub    %rcx,%rax
   2f850:	lea    0x20000(%rdi,%rax,1),%rax
   2f858:	add    %r9,%rax
   2f85b:	sar    $0x12,%rax
   2f85f:	and    $0x3ff,%eax
   2f864:	movslq %eax,%rax
   2f867:	movzbl 0x80(%r15,%rax,1),%eax
   2f870:	mov    %al,0x1(%r10,%r8,1)
   2f875:	lea    0x20000(%r11,%r13,1),%rax
   2f87d:	sub    %rbx,%rcx
   2f880:	add    %r9,%rcx
   2f883:	sub    %rcx,%rax
   2f886:	sar    $0x12,%rax
   2f88a:	and    $0x3ff,%eax
   2f88f:	movslq %eax,%rax
   2f892:	movzbl 0x80(%r15,%rax,1),%eax
   2f89b:	mov    %al,0x5(%r10,%r8,1)
   2f8a0:	mov    -0x18(%rbp),%rax
   2f8a4:	lea    0x20000(%r13,%rax,1),%rax
   2f8ac:	imul   $0x4f0f,%rsi,%rsi
   2f8b3:	sub    %rsi,%rax
   2f8b6:	add    %r12,%rax
   2f8b9:	mov    %rdx,%rsi
   2f8bc:	shl    $0x5,%rsi
   2f8c0:	mov    %rdx,%rcx
   2f8c3:	shl    $0xa,%rcx
   2f8c7:	add    %rsi,%rcx
   2f8ca:	lea    (%rcx,%rdx,2),%rcx
   2f8ce:	shl    $0xe,%rdx
   2f8d2:	sub    %rcx,%rdx
   2f8d5:	lea    (%r14,%rdx,1),%rcx
   2f8d9:	mov    -0x10(%rbp),%rdx
   2f8dd:	add    %rcx,%rdx
   2f8e0:	lea    (%rdx,%rax,1),%rcx
   2f8e4:	sar    $0x12,%rcx
   2f8e8:	and    $0x3ff,%ecx
   2f8ee:	movslq %ecx,%rcx
   2f8f1:	movzbl 0x80(%r15,%rcx,1),%ecx
   2f8fa:	mov    %cl,0x2(%r10,%r8,1)
   2f8ff:	sub    %rdx,%rax
   2f902:	sar    $0x12,%rax
   2f906:	and    $0x3ff,%eax
   2f90b:	movslq %eax,%rax
   2f90e:	movzbl 0x80(%r15,%rax,1),%eax
   2f917:	mov    %al,0x4(%r10,%r8,1)
   2f91c:	mov    -0x30(%rbp),%rcx
   2f920:	mov    -0x8(%rbp),%rax
   2f924:	sub    %rax,%rcx
   2f927:	lea    (%rcx,%rcx,8),%rax
   2f92b:	shl    $0x8,%rax
   2f92f:	lea    (%rax,%rcx,8),%rax
   2f933:	lea    (%rax,%rcx,4),%rax
   2f937:	add    %rcx,%rax
   2f93a:	lea    (%rax,%rax,4),%rax
   2f93e:	lea    0x20000(%rax,%r13,1),%rax
   2f946:	sar    $0x12,%rax
   2f94a:	and    $0x3ff,%eax
   2f94f:	movslq %eax,%rax
   2f952:	movzbl 0x80(%rax,%r15,1),%eax
   2f95b:	mov    %al,0x3(%r10,%r8,1)
   2f960:	mov    -0x70(%rbp),%rax
   2f964:	lea    0x1(%rax),%ebx
   2f967:	mov    -0x40(%rbp),%rax
   2f96b:	lea    0x1c(%rax),%r8
   2f96f:	mov    -0x38(%rbp),%r9
   2f973:	cmp    $0x6,%ebx
   2f976:	jle    2f6a6 <jpeg_idct_7x7+0x2f6>
   2f97c:	mov    -0x68(%rbp),%r15
   2f980:	mov    -0x60(%rbp),%r14
   2f984:	mov    -0x58(%rbp),%r13
   2f988:	mov    -0x50(%rbp),%r12
   2f98c:	mov    -0x48(%rbp),%rbx
   2f990:	leaveq 
   2f991:	retq   
   2f992:	data16 nopw %cs:0x0(%rax,%rax,1)
   2f99d:	nopl   (%rax)

000000000002f9a0 <jpeg_idct_6x6>:
   2f9a0:	push   %rbp
   2f9a1:	mov    %rsp,%rbp
   2f9a4:	sub    $0xe0,%rsp
   2f9ab:	mov    %r8,-0x10(%rbp)
   2f9af:	mov    %rbx,-0x28(%rbp)
   2f9b3:	mov    %r12,-0x30(%rbp)
   2f9b7:	mov    %r13,-0x38(%rbp)
   2f9bb:	mov    %r14,-0x40(%rbp)
   2f9bf:	mov    %r15,-0x48(%rbp)
   2f9c3:	mov    %rcx,-0x18(%rbp)
   2f9c7:	mov    0x1a8(%rdi),%rax
   2f9ce:	mov    %rax,-0x20(%rbp)
   2f9d2:	mov    0x58(%rsi),%r8
   2f9d6:	mov    %rdx,%rax
   2f9d9:	xor    %r9d,%r9d
   2f9dc:	lea    -0xe0(%rbp),%rbx
   2f9e3:	jmpq   2fb56 <jpeg_idct_6x6+0x1b6>
   2f9e8:	movswq 0x50(%r8),%rcx
   2f9ed:	movswq 0x50(%rax),%rdx
   2f9f2:	imul   %edx,%ecx
   2f9f5:	movslq %ecx,%rsi
   2f9f8:	movswq 0x10(%r8),%rcx
   2f9fd:	movswq 0x10(%rax),%rdx
   2fa02:	imul   %edx,%ecx
   2fa05:	movslq %ecx,%rcx
   2fa08:	lea    (%rsi,%rcx,1),%rdi
   2fa0c:	lea    (%rdi,%rdi,8),%rdx
   2fa10:	shl    $0x3,%rdx
   2fa14:	lea    (%rdx,%rdi,2),%rdx
   2fa18:	lea    (%rdi,%rdi,2),%rdi
   2fa1c:	shl    $0xa,%rdi
   2fa20:	sub    %rdx,%rdi
   2fa23:	movswq 0x30(%r8),%rdx
   2fa28:	movswq 0x30(%rax),%r10
   2fa2d:	imul   %r10d,%edx
   2fa31:	movslq %edx,%r15
   2fa34:	lea    (%r15,%rcx,1),%rdx
   2fa38:	shl    $0xd,%rdx
   2fa3c:	lea    (%rdi,%rdx,1),%r14
   2fa40:	movswq 0x40(%r8),%rdx
   2fa45:	movswq 0x40(%rax),%r10
   2fa4a:	imul   %r10d,%edx
   2fa4e:	movslq %edx,%r13
   2fa51:	lea    0x0(%r13,%r13,4),%rdx
   2fa56:	lea    0x0(%r13,%rdx,2),%rdx
   2fa5b:	shl    $0x4,%rdx
   2fa5f:	lea    (%rdx,%r13,4),%rdx
   2fa63:	add    %r13,%rdx
   2fa66:	mov    %rdx,%r10
   2fa69:	shl    $0x5,%r10
   2fa6d:	lea    0x0(%r13,%r10,1),%r11
   2fa72:	movswq (%r8),%r10
   2fa76:	movswq (%rax),%r12
   2fa7a:	imul   %r12d,%r10d
   2fa7e:	movslq %r10d,%r10
   2fa81:	shl    $0xd,%r10
   2fa85:	lea    (%r11,%r10,1),%r12
   2fa89:	movswq 0x20(%r8),%r11
   2fa8e:	mov    %r9,-0x50(%rbp)
   2fa92:	movswq 0x20(%rax),%r9
   2fa97:	imul   %r9d,%r11d
   2fa9b:	movslq %r11d,%r11
   2fa9e:	lea    (%r11,%r11,2),%r9
   2faa2:	lea    (%r11,%r9,4),%r9
   2faa6:	mov    %rax,-0x8(%rbp)
   2faaa:	lea    (%r11,%r11,4),%rax
   2faae:	shl    $0x7,%rax
   2fab2:	sub    %r9,%rax
   2fab5:	shl    $0x4,%rax
   2fab9:	add    %rax,%r11
   2fabc:	lea    (%r12,%r11,1),%r9
   2fac0:	lea    0x400(%r14,%r9,1),%rax
   2fac8:	sar    $0xb,%rax
   2facc:	mov    %eax,(%rbx)
   2face:	lea    0x400(%r9),%rax
   2fad5:	sub    %r14,%rax
   2fad8:	sar    $0xb,%rax
   2fadc:	mov    %eax,0x78(%rbx)
   2fadf:	shl    $0x6,%rdx
   2fae3:	lea    (%rdx,%r13,2),%rdx
   2fae7:	lea    0x400(%r10),%rax
   2faee:	sub    %rdx,%rax
   2faf1:	sar    $0xb,%rax
   2faf5:	lea    (%r15,%rsi,1),%rdx
   2faf9:	sub    %rdx,%rcx
   2fafc:	shl    $0x2,%rcx
   2fb00:	lea    (%rax,%rcx,1),%rdx
   2fb04:	mov    %edx,0x18(%rbx)
   2fb07:	sub    %rcx,%rax
   2fb0a:	mov    %eax,0x60(%rbx)
   2fb0d:	sub    %r15,%rsi
   2fb10:	shl    $0xd,%rsi
   2fb14:	lea    (%rdi,%rsi,1),%rdx
   2fb18:	lea    0x400(%r12),%rax
   2fb20:	mov    %rax,%rcx
   2fb23:	sub    %r11,%rcx
   2fb26:	add    %rdx,%rcx
   2fb29:	sar    $0xb,%rcx
   2fb2d:	mov    %ecx,0x30(%rbx)
   2fb30:	lea    (%rdx,%r11,1),%rcx
   2fb34:	sub    %rcx,%rax
   2fb37:	sar    $0xb,%rax
   2fb3b:	mov    %eax,0x48(%rbx)
   2fb3e:	add    $0x2,%r8
   2fb42:	mov    -0x8(%rbp),%rax
   2fb46:	add    $0x2,%rax
   2fb4a:	add    $0x4,%rbx
   2fb4e:	mov    -0x50(%rbp),%rcx
   2fb52:	lea    0x1(%rcx),%r9d
   2fb56:	cmp    $0x5,%r9d
   2fb5a:	jle    2f9e8 <jpeg_idct_6x6+0x48>
   2fb60:	mov    -0x10(%rbp),%rax
   2fb64:	mov    %eax,%r9d
   2fb67:	mov    -0x18(%rbp),%r14
   2fb6b:	mov    -0x20(%rbp),%r15
   2fb6f:	lea    -0xe0(%rbp),%rdx
   2fb76:	xor    %edi,%edi
   2fb78:	jmpq   2fd2d <jpeg_idct_6x6+0x38d>
   2fb7d:	movslq 0x14(%rdx),%rsi
   2fb81:	movslq 0x4(%rdx),%rcx
   2fb85:	lea    (%rsi,%rcx,1),%r8
   2fb89:	lea    (%r8,%r8,8),%rax
   2fb8d:	shl    $0x3,%rax
   2fb91:	lea    (%rax,%r8,2),%rbx
   2fb95:	lea    (%r8,%r8,2),%rax
   2fb99:	shl    $0xa,%rax
   2fb9d:	sub    %rbx,%rax
   2fba0:	mov    %rax,-0x10(%rbp)
   2fba4:	movslq 0xc(%rdx),%r12
   2fba8:	lea    (%r12,%rcx,1),%rbx
   2fbac:	shl    $0xd,%rbx
   2fbb0:	lea    (%rax,%rbx,1),%r10
   2fbb4:	movslq 0x8(%rdx),%r8
   2fbb8:	lea    (%r8,%r8,2),%rax
   2fbbc:	lea    (%r8,%rax,4),%rbx
   2fbc0:	lea    (%r8,%r8,4),%rax
   2fbc4:	shl    $0x7,%rax
   2fbc8:	sub    %rbx,%rax
   2fbcb:	shl    $0x4,%rax
   2fbcf:	lea    (%r8,%rax,1),%r11
   2fbd3:	movslq 0x10(%rdx),%r13
   2fbd7:	lea    0x0(%r13,%r13,4),%rax
   2fbdc:	lea    0x0(%r13,%rax,2),%rax
   2fbe1:	shl    $0x4,%rax
   2fbe5:	lea    (%rax,%r13,4),%rax
   2fbe9:	lea    0x0(%r13,%rax,1),%r8
   2fbee:	mov    %r8,%rax
   2fbf1:	shl    $0x5,%rax
   2fbf5:	add    %r13,%rax
   2fbf8:	mov    %rdx,-0x20(%rbp)
   2fbfc:	mov    %rax,-0x18(%rbp)
   2fc00:	movslq (%rdx),%rbx
   2fc03:	shl    $0xd,%rbx
   2fc07:	lea    (%rax,%rbx,1),%rdx
   2fc0b:	lea    (%rdx,%r11,1),%rax
   2fc0f:	lea    0x20000(%r10,%rax,1),%rax
   2fc17:	sar    $0x12,%rax
   2fc1b:	and    $0x3ff,%eax
   2fc20:	movslq %eax,%rax
   2fc23:	movzbl 0x80(%r15,%rax,1),%eax
   2fc2c:	mov    %rdi,-0x50(%rbp)
   2fc30:	movslq %edi,%rdi
   2fc33:	mov    (%r14,%rdi,8),%rdi
   2fc37:	mov    %al,(%r9,%rdi,1)
   2fc3b:	lea    0x20000(%rdx,%r11,1),%rax
   2fc43:	sub    %r10,%rax
   2fc46:	sar    $0x12,%rax
   2fc4a:	and    $0x3ff,%eax
   2fc4f:	movslq %eax,%rax
   2fc52:	movzbl 0x80(%r15,%rax,1),%eax
   2fc5b:	mov    %al,0x5(%r9,%rdi,1)
   2fc60:	lea    (%r12,%rsi,1),%rax
   2fc64:	sub    %rax,%rcx
   2fc67:	shl    $0xd,%rcx
   2fc6b:	shl    $0x6,%r8
   2fc6f:	lea    (%r8,%r13,2),%r8
   2fc73:	lea    0x20000(%rbx),%rax
   2fc7a:	mov    %rax,%rdx
   2fc7d:	sub    %r8,%rdx
   2fc80:	add    %rcx,%rdx
   2fc83:	sar    $0x12,%rdx
   2fc87:	and    $0x3ff,%edx
   2fc8d:	movslq %edx,%rdx
   2fc90:	movzbl 0x80(%r15,%rdx,1),%edx
   2fc99:	mov    %dl,0x1(%r9,%rdi,1)
   2fc9e:	add    %r8,%rcx
   2fca1:	sub    %rcx,%rax
   2fca4:	sar    $0x12,%rax
   2fca8:	and    $0x3ff,%eax
   2fcad:	movslq %eax,%rax
   2fcb0:	movzbl 0x80(%r15,%rax,1),%eax
   2fcb9:	mov    %al,0x4(%r9,%rdi,1)
   2fcbe:	sub    %r12,%rsi
   2fcc1:	shl    $0xd,%rsi
   2fcc5:	mov    -0x10(%rbp),%rax
   2fcc9:	lea    (%rax,%rsi,1),%rdx
   2fccd:	mov    -0x18(%rbp),%rax
   2fcd1:	lea    0x20000(%rax,%rbx,1),%rax
   2fcd9:	mov    %rax,%rcx
   2fcdc:	sub    %r11,%rcx
   2fcdf:	add    %rdx,%rcx
   2fce2:	sar    $0x12,%rcx
   2fce6:	and    $0x3ff,%ecx
   2fcec:	movslq %ecx,%rcx
   2fcef:	movzbl 0x80(%r15,%rcx,1),%ecx
   2fcf8:	mov    %cl,0x2(%r9,%rdi,1)
   2fcfd:	lea    (%rdx,%r11,1),%rcx
   2fd01:	sub    %rcx,%rax
   2fd04:	sar    $0x12,%rax
   2fd08:	and    $0x3ff,%eax
   2fd0d:	movslq %eax,%rax
   2fd10:	movzbl 0x80(%rax,%r15,1),%eax
   2fd19:	mov    %al,0x3(%r9,%rdi,1)
   2fd1e:	mov    -0x50(%rbp),%rax
   2fd22:	lea    0x1(%rax),%edi
   2fd25:	mov    -0x20(%rbp),%rax
   2fd29:	lea    0x18(%rax),%rdx
   2fd2d:	cmp    $0x5,%edi
   2fd30:	jle    2fb7d <jpeg_idct_6x6+0x1dd>
   2fd36:	mov    -0x48(%rbp),%r15
   2fd3a:	mov    -0x40(%rbp),%r14
   2fd3e:	mov    -0x38(%rbp),%r13
   2fd42:	mov    -0x30(%rbp),%r12
   2fd46:	mov    -0x28(%rbp),%rbx
   2fd4a:	leaveq 
   2fd4b:	retq   
   2fd4c:	nopl   0x0(%rax)

000000000002fd50 <jpeg_idct_5x5>:
   2fd50:	push   %rbp
   2fd51:	mov    %rsp,%rbp
   2fd54:	sub    $0xa0,%rsp
   2fd5b:	mov    %r8,-0x18(%rbp)
   2fd5f:	mov    %r12,-0x20(%rbp)
   2fd63:	mov    %r13,-0x28(%rbp)
   2fd67:	mov    %r14,-0x30(%rbp)
   2fd6b:	mov    %r15,-0x38(%rbp)
   2fd6f:	mov    %rcx,-0x8(%rbp)
   2fd73:	mov    0x1a8(%rdi),%rax
   2fd7a:	mov    %rax,-0x10(%rbp)
   2fd7e:	mov    0x58(%rsi),%rdi
   2fd82:	xor    %esi,%esi
   2fd84:	lea    -0x9c(%rbp),%rcx
   2fd8b:	jmpq   2fef8 <jpeg_idct_5x5+0x1a8>
   2fd90:	movswq 0x20(%rdi),%rax
   2fd95:	movswq 0x20(%rdx),%r8
   2fd9a:	imul   %r8d,%eax
   2fd9e:	movslq %eax,%r11
   2fda1:	movswq 0x40(%rdi),%rax
   2fda6:	movswq 0x40(%rdx),%r8
   2fdab:	imul   %r8d,%eax
   2fdaf:	movslq %eax,%r10
   2fdb2:	mov    %r11,%r8
   2fdb5:	sub    %r10,%r8
   2fdb8:	lea    (%r8,%r8,4),%rax
   2fdbc:	lea    (%r8,%rax,2),%rax
   2fdc0:	shl    $0x4,%rax
   2fdc4:	lea    (%rax,%r8,4),%rax
   2fdc8:	lea    (%r8,%rax,1),%r9
   2fdcc:	mov    %r9,%r12
   2fdcf:	shl    $0x4,%r12
   2fdd3:	movswq (%rdi),%rax
   2fdd7:	movswq (%rdx),%r8
   2fddb:	imul   %r8d,%eax
   2fddf:	movslq %eax,%r8
   2fde2:	shl    $0xd,%r8
   2fde6:	lea    (%r8,%r12,1),%r14
   2fdea:	add    %r11,%r10
   2fded:	lea    (%r10,%r10,2),%rax
   2fdf1:	shl    $0x5,%rax
   2fdf5:	lea    (%rax,%r10,4),%rax
   2fdf9:	add    %r10,%rax
   2fdfc:	shl    $0x6,%rax
   2fe00:	lea    (%rax,%r10,8),%rax
   2fe04:	lea    (%rax,%r10,4),%r10
   2fe08:	lea    (%r14,%r10,1),%r12
   2fe0c:	movswq 0x30(%rdi),%rax
   2fe11:	movswq 0x30(%rdx),%r11
   2fe16:	imul   %r11d,%eax
   2fe1a:	movslq %eax,%r15
   2fe1d:	movswq 0x10(%rdi),%rax
   2fe22:	movswq 0x10(%rdx),%r11
   2fe27:	imul   %r11d,%eax
   2fe2b:	movslq %eax,%r11
   2fe2e:	lea    (%r15,%r11,1),%r13
   2fe32:	lea    0x0(%r13,%r13,4),%rax
   2fe37:	shl    $0x4,%rax
   2fe3b:	lea    (%rax,%r13,4),%rax
   2fe3f:	add    %r13,%rax
   2fe42:	shl    $0x4,%rax
   2fe46:	lea    (%rax,%r13,2),%rax
   2fe4a:	lea    (%rax,%rax,4),%r13
   2fe4e:	mov    %r11,%rax
   2fe51:	shl    $0x8,%rax
   2fe55:	lea    (%rax,%r11,8),%rax
   2fe59:	sub    %r11,%rax
   2fe5c:	shl    $0x4,%rax
   2fe60:	add    %r11,%rax
   2fe63:	lea    0x0(%r13,%rax,1),%r11
   2fe68:	lea    0x400(%r11,%r12,1),%rax
   2fe70:	sar    $0xb,%rax
   2fe74:	mov    %eax,(%rcx)
   2fe76:	lea    0x400(%r12),%rax
   2fe7e:	sub    %r11,%rax
   2fe81:	sar    $0xb,%rax
   2fe85:	mov    %eax,0x50(%rcx)
   2fe88:	lea    0x400(%r14),%rax
   2fe8f:	sub    %r10,%rax
   2fe92:	mov    %r15,%r11
   2fe95:	shl    $0x5,%r11
   2fe99:	mov    %r15,%r10
   2fe9c:	shl    $0x9,%r10
   2fea0:	add    %r11,%r10
   2fea3:	lea    (%r10,%r15,8),%r10
   2fea7:	lea    (%r10,%r15,4),%r10
   2feab:	add    %r15,%r10
   2feae:	shl    $0x5,%r10
   2feb2:	lea    (%r10,%r15,4),%r10
   2feb6:	mov    %r13,%r11
   2feb9:	sub    %r10,%r11
   2febc:	add    %rax,%r11
   2febf:	sar    $0xb,%r11
   2fec3:	mov    %r11d,0x14(%rcx)
   2fec7:	sub    %r13,%r10
   2feca:	add    %r10,%rax
   2fecd:	sar    $0xb,%rax
   2fed1:	mov    %eax,0x3c(%rcx)
   2fed4:	shl    $0x6,%r9
   2fed8:	lea    0x400(%r8),%rax
   2fedf:	sub    %r9,%rax
   2fee2:	sar    $0xb,%rax
   2fee6:	mov    %eax,0x28(%rcx)
   2fee9:	add    $0x2,%rdi
   2feed:	add    $0x2,%rdx
   2fef1:	add    $0x4,%rcx
   2fef5:	add    $0x1,%esi
   2fef8:	cmp    $0x4,%esi
   2fefb:	jle    2fd90 <jpeg_idct_5x5+0x40>
   2ff01:	mov    -0x18(%rbp),%rax
   2ff05:	mov    %eax,%r15d
   2ff08:	mov    %rbx,-0x18(%rbp)
   2ff0c:	mov    -0x8(%rbp),%r14
   2ff10:	mov    -0x10(%rbp),%r13
   2ff14:	lea    -0x9c(%rbp),%rax
   2ff1b:	xor    %ecx,%ecx
   2ff1d:	jmpq   300ac <jpeg_idct_5x5+0x35c>
   2ff22:	movslq 0x8(%rax),%rsi
   2ff26:	movslq 0x10(%rax),%rbx
   2ff2a:	lea    (%rbx,%rsi,1),%rdi
   2ff2e:	lea    (%rdi,%rdi,2),%rdx
   2ff32:	shl    $0x5,%rdx
   2ff36:	lea    (%rdx,%rdi,4),%rdx
   2ff3a:	add    %rdi,%rdx
   2ff3d:	shl    $0x6,%rdx
   2ff41:	lea    (%rdx,%rdi,8),%rdx
   2ff45:	lea    (%rdx,%rdi,4),%r9
   2ff49:	sub    %rbx,%rsi
   2ff4c:	lea    (%rsi,%rsi,4),%rdx
   2ff50:	lea    (%rsi,%rdx,2),%rdx
   2ff54:	shl    $0x4,%rdx
   2ff58:	lea    (%rdx,%rsi,4),%rdx
   2ff5c:	add    %rdx,%rsi
   2ff5f:	mov    %rsi,%r10
   2ff62:	shl    $0x4,%r10
   2ff66:	movslq (%rax),%rdi
   2ff69:	shl    $0xd,%rdi
   2ff6d:	lea    (%rdi,%r10,1),%rbx
   2ff71:	lea    (%rbx,%r9,1),%r8
   2ff75:	movslq 0xc(%rax),%r12
   2ff79:	movslq 0x4(%rax),%rdx
   2ff7d:	lea    (%r12,%rdx,1),%r11
   2ff81:	mov    %rax,-0x10(%rbp)
   2ff85:	lea    (%r11,%r11,4),%rax
   2ff89:	shl    $0x4,%rax
   2ff8d:	lea    (%rax,%r11,4),%rax
   2ff91:	add    %r11,%rax
   2ff94:	shl    $0x4,%rax
   2ff98:	lea    (%rax,%r11,2),%rax
   2ff9c:	lea    (%rax,%rax,4),%r11
   2ffa0:	mov    %rdx,%rax
   2ffa3:	shl    $0x8,%rax
   2ffa7:	lea    (%rax,%rdx,8),%rax
   2ffab:	sub    %rdx,%rax
   2ffae:	shl    $0x4,%rax
   2ffb2:	add    %rdx,%rax
   2ffb5:	lea    (%r11,%rax,1),%rdx
   2ffb9:	lea    0x20000(%rdx,%r8,1),%rax
   2ffc1:	sar    $0x12,%rax
   2ffc5:	and    $0x3ff,%eax
   2ffca:	movslq %eax,%rax
   2ffcd:	movzbl 0x80(%r13,%rax,1),%eax
   2ffd6:	movslq %ecx,%r8
   2ffd9:	mov    (%r14,%r8,8),%r8
   2ffdd:	mov    %al,(%r15,%r8,1)
   2ffe1:	lea    0x20000(%rbx,%r9,1),%rax
   2ffe9:	sub    %rdx,%rax
   2ffec:	sar    $0x12,%rax
   2fff0:	and    $0x3ff,%eax
   2fff5:	movslq %eax,%rax
   2fff8:	movzbl 0x80(%r13,%rax,1),%eax
   30001:	mov    %al,0x4(%r15,%r8,1)
   30006:	lea    0x20000(%rdi,%r10,1),%rdx
   3000e:	sub    %r9,%rdx
   30011:	mov    %r12,%rbx
   30014:	shl    $0x5,%rbx
   30018:	mov    %r12,%rax
   3001b:	shl    $0x9,%rax
   3001f:	add    %rbx,%rax
   30022:	lea    (%rax,%r12,8),%rax
   30026:	lea    (%rax,%r12,4),%rax
   3002a:	add    %r12,%rax
   3002d:	shl    $0x5,%rax
   30031:	lea    (%rax,%r12,4),%rbx
   30035:	mov    %r11,%rax
   30038:	sub    %rbx,%rax
   3003b:	add    %rdx,%rax
   3003e:	sar    $0x12,%rax
   30042:	and    $0x3ff,%eax
   30047:	movslq %eax,%rax
   3004a:	movzbl 0x80(%r13,%rax,1),%eax
   30053:	mov    %al,0x1(%r15,%r8,1)
   30058:	sub    %r11,%rbx
   3005b:	lea    (%rbx,%rdx,1),%rax
   3005f:	sar    $0x12,%rax
   30063:	and    $0x3ff,%eax
   30068:	movslq %eax,%rax
   3006b:	movzbl 0x80(%r13,%rax,1),%eax
   30074:	mov    %al,0x3(%r15,%r8,1)
   30079:	shl    $0x6,%rsi
   3007d:	lea    0x20000(%rdi),%rax
   30084:	sub    %rsi,%rax
   30087:	sar    $0x12,%rax
   3008b:	and    $0x3ff,%eax
   30090:	movslq %eax,%rax
   30093:	movzbl 0x80(%rax,%r13,1),%eax
   3009c:	mov    %al,0x2(%r15,%r8,1)
   300a1:	add    $0x1,%ecx
   300a4:	mov    -0x10(%rbp),%rax
   300a8:	add    $0x14,%rax
   300ac:	cmp    $0x4,%ecx
   300af:	jle    2ff22 <jpeg_idct_5x5+0x1d2>
   300b5:	mov    -0x38(%rbp),%r15
   300b9:	mov    -0x30(%rbp),%r14
   300bd:	mov    -0x28(%rbp),%r13
   300c1:	mov    -0x20(%rbp),%r12
   300c5:	mov    -0x18(%rbp),%rbx
   300c9:	leaveq 
   300ca:	retq   
   300cb:	nopl   0x0(%rax,%rax,1)

00000000000300d0 <jpeg_idct_3x3>:
   300d0:	push   %rbp
   300d1:	mov    %rsp,%rbp
   300d4:	sub    $0x50,%rsp
   300d8:	mov    %r8,-0x18(%rbp)
   300dc:	mov    %r14,-0x20(%rbp)
   300e0:	mov    %r15,-0x28(%rbp)
   300e4:	mov    %rcx,-0x8(%rbp)
   300e8:	mov    0x1a8(%rdi),%rax
   300ef:	mov    %rax,-0x10(%rbp)
   300f3:	mov    0x58(%rsi),%rdi
   300f7:	xor    %esi,%esi
   300f9:	lea    -0x4c(%rbp),%rcx
   300fd:	jmpq   301bc <jpeg_idct_3x3+0xec>
   30102:	movswq 0x20(%rdi),%rax
   30107:	movswq 0x20(%rdx),%r8
   3010c:	imul   %r8d,%eax
   30110:	movslq %eax,%r11
   30113:	lea    (%r11,%r11,4),%rax
   30117:	lea    (%r11,%rax,2),%rax
   3011b:	shl    $0x4,%rax
   3011f:	lea    (%rax,%r11,4),%rax
   30123:	lea    (%r11,%rax,1),%r9
   30127:	mov    %r9,%rax
   3012a:	shl    $0x5,%rax
   3012e:	lea    (%r11,%rax,1),%r10
   30132:	movswq (%rdi),%rax
   30136:	movswq (%rdx),%r8
   3013a:	imul   %r8d,%eax
   3013e:	movslq %eax,%r8
   30141:	shl    $0xd,%r8
   30145:	lea    (%r8,%r10,1),%r15
   30149:	movswq 0x10(%rdi),%rax
   3014e:	movswq 0x10(%rdx),%r10
   30153:	imul   %r10d,%eax
   30157:	movslq %eax,%r14
   3015a:	lea    (%r14,%r14,2),%rax
   3015e:	lea    (%r14,%rax,4),%r10
   30162:	lea    (%r14,%r14,4),%rax
   30166:	shl    $0x7,%rax
   3016a:	sub    %r10,%rax
   3016d:	shl    $0x4,%rax
   30171:	lea    (%r14,%rax,1),%r10
   30175:	lea    0x400(%r15,%r10,1),%rax
   3017d:	sar    $0xb,%rax
   30181:	mov    %eax,(%rcx)
   30183:	lea    0x400(%r15),%rax
   3018a:	sub    %r10,%rax
   3018d:	sar    $0xb,%rax
   30191:	mov    %eax,0x18(%rcx)
   30194:	shl    $0x6,%r9
   30198:	lea    (%r9,%r11,2),%r9
   3019c:	lea    0x400(%r8),%rax
   301a3:	sub    %r9,%rax
   301a6:	sar    $0xb,%rax
   301aa:	mov    %eax,0xc(%rcx)
   301ad:	add    $0x2,%rdi
   301b1:	add    $0x2,%rdx
   301b5:	add    $0x4,%rcx
   301b9:	add    $0x1,%esi
   301bc:	cmp    $0x2,%esi
   301bf:	jle    30102 <jpeg_idct_3x3+0x32>
   301c5:	mov    -0x18(%rbp),%rax
   301c9:	mov    %eax,%r15d
   301cc:	mov    %r13,-0x18(%rbp)
   301d0:	mov    -0x8(%rbp),%r11
   301d4:	mov    -0x10(%rbp),%r13
   301d8:	lea    -0x4c(%rbp),%rdx
   301dc:	xor    %ecx,%ecx
   301de:	jmpq   302b0 <jpeg_idct_3x3+0x1e0>
   301e3:	movslq 0x4(%rdx),%rdi
   301e7:	lea    (%rdi,%rdi,2),%rax
   301eb:	lea    (%rdi,%rax,4),%rsi
   301ef:	lea    (%rdi,%rdi,4),%rax
   301f3:	shl    $0x7,%rax
   301f7:	sub    %rsi,%rax
   301fa:	shl    $0x4,%rax
   301fe:	lea    (%rdi,%rax,1),%r8
   30202:	movslq 0x8(%rdx),%r10
   30206:	lea    (%r10,%r10,4),%rax
   3020a:	lea    (%r10,%rax,2),%rax
   3020e:	shl    $0x4,%rax
   30212:	lea    (%rax,%r10,4),%rax
   30216:	lea    (%r10,%rax,1),%rsi
   3021a:	mov    %rsi,%rax
   3021d:	shl    $0x5,%rax
   30221:	lea    (%r10,%rax,1),%r9
   30225:	movslq (%rdx),%rdi
   30228:	shl    $0xd,%rdi
   3022c:	lea    (%rdi,%r9,1),%rax
   30230:	lea    0x20000(%rax,%r8,1),%rax
   30238:	sar    $0x12,%rax
   3023c:	and    $0x3ff,%eax
   30241:	movslq %eax,%rax
   30244:	movzbl 0x80(%r13,%rax,1),%eax
   3024d:	movslq %ecx,%r14
   30250:	mov    (%r11,%r14,8),%r14
   30254:	mov    %al,(%r15,%r14,1)
   30258:	lea    0x20000(%rdi,%r9,1),%rax
   30260:	sub    %r8,%rax
   30263:	sar    $0x12,%rax
   30267:	and    $0x3ff,%eax
   3026c:	movslq %eax,%rax
   3026f:	movzbl 0x80(%r13,%rax,1),%eax
   30278:	mov    %al,0x2(%r15,%r14,1)
   3027d:	shl    $0x6,%rsi
   30281:	lea    (%rsi,%r10,2),%rsi
   30285:	lea    0x20000(%rdi),%rax
   3028c:	sub    %rsi,%rax
   3028f:	sar    $0x12,%rax
   30293:	and    $0x3ff,%eax
   30298:	movslq %eax,%rax
   3029b:	movzbl 0x80(%rax,%r13,1),%eax
   302a4:	mov    %al,0x1(%r15,%r14,1)
   302a9:	add    $0x1,%ecx
   302ac:	add    $0xc,%rdx
   302b0:	cmp    $0x2,%ecx
   302b3:	jle    301e3 <jpeg_idct_3x3+0x113>
   302b9:	mov    -0x28(%rbp),%r15
   302bd:	mov    -0x20(%rbp),%r14
   302c1:	mov    -0x18(%rbp),%r13
   302c5:	leaveq 
   302c6:	retq   
   302c7:	nopw   0x0(%rax,%rax,1)

00000000000302d0 <jpeg_idct_9x9>:
   302d0:	push   %rbp
   302d1:	mov    %rsp,%rbp
   302d4:	sub    $0x1c0,%rsp
   302db:	mov    %r8,-0x58(%rbp)
   302df:	mov    %rcx,-0x60(%rbp)
   302e3:	mov    %rbx,-0x70(%rbp)
   302e7:	mov    %r12,-0x78(%rbp)
   302eb:	mov    %r13,-0x80(%rbp)
   302ef:	mov    %r14,-0x88(%rbp)
   302f6:	mov    %r15,-0x90(%rbp)
   302fd:	mov    0x1a8(%rdi),%rax
   30304:	mov    %rax,-0x68(%rbp)
   30308:	mov    0x58(%rsi),%rcx
   3030c:	xor    %esi,%esi
   3030e:	lea    -0x1b8(%rbp),%rdi
   30315:	jmpq   305fd <jpeg_idct_9x9+0x32d>
   3031a:	movswq 0x10(%rcx),%rax
   3031f:	movswq 0x10(%rdx),%rbx
   30324:	imul   %ebx,%eax
   30327:	movslq %eax,%r8
   3032a:	mov    %r8,-0x10(%rbp)
   3032e:	movswq 0x70(%rcx),%rax
   30333:	movswq 0x70(%rdx),%rbx
   30338:	imul   %ebx,%eax
   3033b:	movslq %eax,%r13
   3033e:	lea    0x0(%r13,%r8,1),%rax
   30343:	mov    %rax,%rbx
   30346:	shl    $0x7,%rbx
   3034a:	lea    (%rbx,%rax,4),%rbx
   3034e:	lea    (%rbx,%rax,2),%rbx
   30352:	shl    $0xc,%rax
   30356:	sub    %rbx,%rax
   30359:	mov    %rax,-0x40(%rbp)
   3035d:	movswq 0x50(%rcx),%rbx
   30362:	movswq 0x50(%rdx),%r9
   30367:	imul   %r9d,%ebx
   3036b:	movslq %ebx,%rbx
   3036e:	add    %rbx,%r8
   30371:	imul   $0x1d17,%r8,%r8
   30378:	mov    %r8,-0x28(%rbp)
   3037c:	lea    (%r8,%rax,1),%r10
   30380:	movswq 0x30(%rcx),%rax
   30385:	movswq 0x30(%rdx),%r8
   3038a:	imul   %r8d,%eax
   3038e:	movslq %eax,%r8
   30391:	imul   $0xffffffffffffd8cf,%r8,%r8
   30398:	mov    %r10,%r11
   3039b:	sub    %r8,%r11
   3039e:	movswq 0x40(%rcx),%rax
   303a3:	movswq 0x40(%rdx),%r9
   303a8:	imul   %r9d,%eax
   303ac:	movslq %eax,%r15
   303af:	movswq 0x20(%rcx),%rax
   303b4:	mov    %rsi,-0x98(%rbp)
   303bb:	movswq 0x20(%rdx),%rsi
   303c0:	imul   %esi,%eax
   303c3:	movslq %eax,%r12
   303c6:	lea    (%r15,%r12,1),%rsi
   303ca:	mov    %rsi,-0x18(%rbp)
   303ce:	lea    (%rsi,%rsi,4),%rax
   303d2:	shl    $0x4,%rax
   303d6:	lea    (%rax,%rsi,4),%rax
   303da:	add    %rsi,%rax
   303dd:	shl    $0x7,%rax
   303e1:	lea    (%rax,%rsi,8),%r9
   303e5:	mov    %r9,-0x20(%rbp)
   303e9:	sub    %rsi,%r9
   303ec:	movswq 0x60(%rcx),%rax
   303f1:	movswq 0x60(%rdx),%rsi
   303f6:	imul   %esi,%eax
   303f9:	movslq %eax,%r14
   303fc:	lea    (%r14,%r14,4),%rax
   30400:	lea    (%r14,%rax,2),%rax
   30404:	shl    $0x4,%rax
   30408:	lea    (%rax,%r14,4),%rax
   3040c:	lea    (%r14,%rax,1),%rsi
   30410:	mov    %rsi,%rax
   30413:	shl    $0x5,%rax
   30417:	add    %r14,%rax
   3041a:	mov    %rcx,-0x50(%rbp)
   3041e:	movswq (%rcx),%rcx
   30422:	mov    %rdx,-0x48(%rbp)
   30426:	movswq (%rdx),%rdx
   3042a:	imul   %edx,%ecx
   3042d:	movslq %ecx,%rcx
   30430:	shl    $0xd,%rcx
   30434:	add    %rcx,%rax
   30437:	mov    %rax,-0x30(%rbp)
   3043b:	add    %r9,%rax
   3043e:	lea    (%r15,%r15,8),%r9
   30442:	shl    $0x2,%r9
   30446:	mov    %r15,%rdx
   30449:	shl    $0xb,%rdx
   3044d:	mov    %rdx,-0x38(%rbp)
   30451:	neg    %rdx
   30454:	add    %r9,%rdx
   30457:	lea    0x400(%rax,%rdx,1),%rdx
   3045f:	lea    (%r11,%rdx,1),%rax
   30463:	sar    $0xb,%rax
   30467:	mov    %eax,(%rdi)
   30469:	mov    %r8,%rax
   3046c:	sub    %r10,%rax
   3046f:	add    %rdx,%rax
   30472:	sar    $0xb,%rax
   30476:	mov    %eax,0x100(%rdi)
   3047c:	neg    %r15
   3047f:	add    %r12,%r15
   30482:	lea    (%r15,%r15,4),%rax
   30486:	lea    (%r15,%rax,2),%rax
   3048a:	shl    $0x4,%rax
   3048e:	lea    (%rax,%r15,4),%rax
   30492:	add    %r15,%rax
   30495:	shl    $0x5,%rax
   30499:	lea    (%r15,%rax,1),%r10
   3049d:	shl    $0x6,%rsi
   304a1:	lea    (%rsi,%r14,2),%rax
   304a5:	lea    0x400(%rcx),%rdx
   304ac:	neg    %rax
   304af:	add    %rdx,%rax
   304b2:	lea    (%rax,%r10,1),%rcx
   304b6:	lea    0x0(%r13,%rbx,1),%rax
   304bb:	mov    -0x10(%rbp),%rsi
   304bf:	sub    %rax,%rsi
   304c2:	lea    (%rsi,%rsi,2),%rax
   304c6:	lea    (%rsi,%rax,4),%r10
   304ca:	lea    (%rsi,%rsi,4),%rax
   304ce:	shl    $0x7,%rax
   304d2:	sub    %r10,%rax
   304d5:	shl    $0x4,%rax
   304d9:	add    %rax,%rsi
   304dc:	lea    (%rcx,%rsi,1),%rax
   304e0:	sar    $0xb,%rax
   304e4:	mov    %eax,0x20(%rdi)
   304e7:	sub    %rsi,%rcx
   304ea:	sar    $0xb,%rcx
   304ee:	mov    %ecx,0xe0(%rdi)
   304f4:	sub    %r13,%rbx
   304f7:	lea    (%rbx,%rbx,4),%rax
   304fb:	lea    (%rbx,%rax,2),%rax
   304ff:	shl    $0x6,%rax
   30503:	lea    (%rax,%rbx,8),%rax
   30507:	add    %rbx,%rax
   3050a:	shl    $0x4,%rax
   3050e:	lea    (%rbx,%rax,1),%r11
   30512:	mov    %r8,%rcx
   30515:	sub    %r11,%rcx
   30518:	mov    -0x28(%rbp),%rax
   3051c:	lea    (%rcx,%rax,1),%rbx
   30520:	mov    -0x18(%rbp),%rax
   30524:	mov    -0x20(%rbp),%rcx
   30528:	sub    %rcx,%rax
   3052b:	mov    -0x30(%rbp),%rsi
   3052f:	lea    0x400(%rsi,%rax,1),%rcx
   30537:	mov    %r12,%r10
   3053a:	shl    $0x4,%r10
   3053e:	mov    %r12,%rax
   30541:	shl    $0x8,%rax
   30545:	add    %r10,%rax
   30548:	lea    (%rax,%r12,4),%rax
   3054c:	add    %r12,%rax
   3054f:	shl    $0x5,%rax
   30553:	lea    (%rax,%r12,8),%rax
   30557:	lea    (%rax,%r12,2),%rax
   3055b:	lea    (%r12,%rax,1),%r10
   3055f:	lea    (%r10,%rcx,1),%rax
   30563:	lea    (%rbx,%rax,1),%rcx
   30567:	sar    $0xb,%rcx
   3056b:	mov    %ecx,0x40(%rdi)
   3056e:	sub    %rbx,%rax
   30571:	sar    $0xb,%rax
   30575:	mov    %eax,0xc0(%rdi)
   3057b:	lea    (%r8,%r11,1),%rcx
   3057f:	mov    -0x40(%rbp),%rax
   30583:	lea    (%rcx,%rax,1),%rbx
   30587:	lea    0x400(%rsi),%rax
   3058e:	sub    %r10,%rax
   30591:	mov    -0x38(%rbp),%rcx
   30595:	sub    %r9,%rcx
   30598:	add    %rcx,%rax
   3059b:	lea    (%rbx,%rax,1),%rcx
   3059f:	sar    $0xb,%rcx
   305a3:	mov    %ecx,0x60(%rdi)
   305a6:	sub    %rbx,%rax
   305a9:	sar    $0xb,%rax
   305ad:	mov    %eax,0xa0(%rdi)
   305b3:	lea    (%r15,%r14,1),%rcx
   305b7:	lea    (%rcx,%rcx,4),%rax
   305bb:	lea    (%rcx,%rax,2),%rax
   305bf:	shl    $0x4,%rax
   305c3:	lea    (%rax,%rcx,4),%rax
   305c7:	add    %rcx,%rax
   305ca:	shl    $0x6,%rax
   305ce:	lea    (%rax,%rcx,2),%rax
   305d2:	sub    %rax,%rdx
   305d5:	sar    $0xb,%rdx
   305d9:	mov    %edx,0x80(%rdi)
   305df:	mov    -0x50(%rbp),%rax
   305e3:	lea    0x2(%rax),%rcx
   305e7:	mov    -0x48(%rbp),%rax
   305eb:	lea    0x2(%rax),%rdx
   305ef:	add    $0x4,%rdi
   305f3:	mov    -0x98(%rbp),%rax
   305fa:	lea    0x1(%rax),%esi
   305fd:	cmp    $0x7,%esi
   30600:	jle    3031a <jpeg_idct_9x9+0x4a>
   30606:	mov    -0x58(%rbp),%rax
   3060a:	mov    %eax,%r10d
   3060d:	mov    -0x68(%rbp),%r15
   30611:	lea    -0x1b8(%rbp),%rsi
   30618:	xor    %edx,%edx
   3061a:	mov    -0x60(%rbp),%rcx
   3061e:	jmpq   30954 <jpeg_idct_9x9+0x684>
   30623:	movslq 0x8(%rsi),%r14
   30627:	movslq 0x10(%rsi),%r13
   3062b:	lea    0x0(%r13,%r14,1),%rdi
   30630:	mov    %rdi,-0x40(%rbp)
   30634:	lea    (%rdi,%rdi,4),%rax
   30638:	shl    $0x4,%rax
   3063c:	lea    (%rax,%rdi,4),%rax
   30640:	add    %rdi,%rax
   30643:	shl    $0x7,%rax
   30647:	lea    (%rax,%rdi,8),%rbx
   3064b:	mov    %rbx,-0x48(%rbp)
   3064f:	sub    %rdi,%rbx
   30652:	movslq 0x18(%rsi),%r12
   30656:	lea    (%r12,%r12,4),%rax
   3065a:	lea    (%r12,%rax,2),%rax
   3065e:	shl    $0x4,%rax
   30662:	lea    (%rax,%r12,4),%rax
   30666:	lea    (%r12,%rax,1),%rdi
   3066a:	mov    %rdi,%rax
   3066d:	shl    $0x5,%rax
   30671:	add    %r12,%rax
   30674:	mov    %rax,-0x18(%rbp)
   30678:	movslq (%rsi),%r8
   3067b:	shl    $0xd,%r8
   3067f:	add    %r8,%rax
   30682:	mov    %rax,-0x38(%rbp)
   30686:	add    %rax,%rbx
   30689:	mov    %r13,%r9
   3068c:	shl    $0xb,%r9
   30690:	mov    %r9,-0x20(%rbp)
   30694:	lea    0x0(%r13,%r13,8),%rax
   30699:	shl    $0x2,%rax
   3069d:	mov    %rax,-0x28(%rbp)
   306a1:	sub    %r9,%rax
   306a4:	lea    0x20000(%rbx,%rax,1),%r11
   306ac:	movslq 0x1c(%rsi),%rax
   306b0:	mov    %rax,-0x58(%rbp)
   306b4:	movslq 0x4(%rsi),%r9
   306b8:	mov    %r9,-0x50(%rbp)
   306bc:	add    %r9,%rax
   306bf:	mov    %rax,%rbx
   306c2:	shl    $0x7,%rbx
   306c6:	lea    (%rbx,%rax,4),%rbx
   306ca:	lea    (%rbx,%rax,2),%rbx
   306ce:	shl    $0xc,%rax
   306d2:	sub    %rbx,%rax
   306d5:	mov    %rax,-0x10(%rbp)
   306d9:	movslq 0x14(%rsi),%rbx
   306dd:	add    %rbx,%r9
   306e0:	imul   $0x1d17,%r9,%r9
   306e7:	mov    %r9,-0x30(%rbp)
   306eb:	add    %rax,%r9
   306ee:	mov    %rsi,-0x68(%rbp)
   306f2:	movslq 0xc(%rsi),%rsi
   306f6:	imul   $0xffffffffffffd8cf,%rsi,%rsi
   306fd:	mov    %r9,%rax
   30700:	sub    %rsi,%rax
   30703:	add    %r11,%rax
   30706:	sar    $0x12,%rax
   3070a:	and    $0x3ff,%eax
   3070f:	movslq %eax,%rax
   30712:	movzbl 0x80(%r15,%rax,1),%eax
   3071b:	mov    %rdx,-0x98(%rbp)
   30722:	movslq %edx,%rdx
   30725:	mov    (%rcx,%rdx,8),%rdx
   30729:	mov    %al,(%r10,%rdx,1)
   3072d:	mov    %rsi,%rax
   30730:	sub    %r9,%rax
   30733:	add    %r11,%rax
   30736:	sar    $0x12,%rax
   3073a:	and    $0x3ff,%eax
   3073f:	movslq %eax,%rax
   30742:	movzbl 0x80(%r15,%rax,1),%eax
   3074b:	mov    %al,0x8(%r10,%rdx,1)
   30750:	mov    %r14,%r11
   30753:	sub    %r13,%r11
   30756:	lea    (%r11,%r11,4),%rax
   3075a:	lea    (%r11,%rax,2),%rax
   3075e:	shl    $0x4,%rax
   30762:	lea    (%rax,%r11,4),%rax
   30766:	add    %r11,%rax
   30769:	shl    $0x5,%rax
   3076d:	lea    (%r11,%rax,1),%rcx
   30771:	shl    $0x6,%rdi
   30775:	lea    (%rdi,%r12,2),%rdi
   30779:	lea    0x20000(%r8),%rax
   30780:	mov    %rax,-0x8(%rbp)
   30784:	sub    %rdi,%rax
   30787:	add    %rax,%rcx
   3078a:	mov    -0x58(%rbp),%r13
   3078e:	lea    0x0(%r13,%rbx,1),%rax
   30793:	mov    -0x50(%rbp),%rdi
   30797:	sub    %rax,%rdi
   3079a:	lea    (%rdi,%rdi,2),%rax
   3079e:	lea    (%rdi,%rax,4),%r9
   307a2:	lea    (%rdi,%rdi,4),%rax
   307a6:	shl    $0x7,%rax
   307aa:	sub    %r9,%rax
   307ad:	shl    $0x4,%rax
   307b1:	add    %rax,%rdi
   307b4:	lea    (%rcx,%rdi,1),%rax
   307b8:	sar    $0x12,%rax
   307bc:	and    $0x3ff,%eax
   307c1:	movslq %eax,%rax
   307c4:	movzbl 0x80(%r15,%rax,1),%eax
   307cd:	mov    %al,0x1(%r10,%rdx,1)
   307d2:	sub    %rdi,%rcx
   307d5:	sar    $0x12,%rcx
   307d9:	and    $0x3ff,%ecx
   307df:	movslq %ecx,%rax
   307e2:	movzbl 0x80(%r15,%rax,1),%eax
   307eb:	mov    %al,0x7(%r10,%rdx,1)
   307f0:	mov    -0x40(%rbp),%rax
   307f4:	mov    -0x48(%rbp),%rcx
   307f8:	sub    %rcx,%rax
   307fb:	mov    -0x38(%rbp),%rcx
   307ff:	lea    0x20000(%rcx,%rax,1),%rcx
   30807:	mov    %r14,%rdi
   3080a:	shl    $0x4,%rdi
   3080e:	mov    %r14,%rax
   30811:	shl    $0x8,%rax
   30815:	add    %rdi,%rax
   30818:	lea    (%rax,%r14,4),%rax
   3081c:	add    %r14,%rax
   3081f:	shl    $0x5,%rax
   30823:	lea    (%rax,%r14,8),%rax
   30827:	lea    (%rax,%r14,2),%rax
   3082b:	lea    (%r14,%rax,1),%r9
   3082f:	lea    (%r9,%rcx,1),%rax
   30833:	sub    %r13,%rbx
   30836:	lea    (%rbx,%rbx,4),%rcx
   3083a:	lea    (%rbx,%rcx,2),%rcx
   3083e:	shl    $0x6,%rcx
   30842:	lea    (%rcx,%rbx,8),%rcx
   30846:	add    %rbx,%rcx
   30849:	shl    $0x4,%rcx
   3084d:	add    %rcx,%rbx
   30850:	mov    %rsi,%rcx
   30853:	sub    %rbx,%rcx
   30856:	mov    -0x30(%rbp),%rdi
   3085a:	add    %rcx,%rdi
   3085d:	lea    (%rdi,%rax,1),%rcx
   30861:	sar    $0x12,%rcx
   30865:	and    $0x3ff,%ecx
   3086b:	movslq %ecx,%rcx
   3086e:	movzbl 0x80(%r15,%rcx,1),%ecx
   30877:	mov    %cl,0x2(%r10,%rdx,1)
   3087c:	sub    %rdi,%rax
   3087f:	sar    $0x12,%rax
   30883:	and    $0x3ff,%eax
   30888:	movslq %eax,%rax
   3088b:	movzbl 0x80(%r15,%rax,1),%eax
   30894:	mov    %al,0x6(%r10,%rdx,1)
   30899:	lea    (%rsi,%rbx,1),%rax
   3089d:	mov    -0x10(%rbp),%rcx
   308a1:	lea    (%rax,%rcx,1),%rsi
   308a5:	mov    -0x18(%rbp),%rax
   308a9:	lea    0x20000(%r8,%rax,1),%rcx
   308b1:	sub    %r9,%rcx
   308b4:	mov    -0x20(%rbp),%rax
   308b8:	mov    -0x28(%rbp),%rdi
   308bc:	sub    %rdi,%rax
   308bf:	add    %rcx,%rax
   308c2:	lea    (%rsi,%rax,1),%rcx
   308c6:	sar    $0x12,%rcx
   308ca:	and    $0x3ff,%ecx
   308d0:	movslq %ecx,%rcx
   308d3:	movzbl 0x80(%r15,%rcx,1),%ecx
   308dc:	mov    %cl,0x3(%r10,%rdx,1)
   308e1:	sub    %rsi,%rax
   308e4:	sar    $0x12,%rax
   308e8:	and    $0x3ff,%eax
   308ed:	movslq %eax,%rax
   308f0:	movzbl 0x80(%r15,%rax,1),%eax
   308f9:	mov    %al,0x5(%r10,%rdx,1)
   308fe:	lea    (%r11,%r12,1),%rcx
   30902:	lea    (%rcx,%rcx,4),%rax
   30906:	lea    (%rcx,%rax,2),%rax
   3090a:	shl    $0x4,%rax
   3090e:	lea    (%rax,%rcx,4),%rax
   30912:	add    %rcx,%rax
   30915:	shl    $0x6,%rax
   30919:	lea    (%rax,%rcx,2),%rcx
   3091d:	mov    -0x8(%rbp),%rax
   30921:	sub    %rcx,%rax
   30924:	sar    $0x12,%rax
   30928:	and    $0x3ff,%eax
   3092d:	movslq %eax,%rax
   30930:	movzbl 0x80(%rax,%r15,1),%eax
   30939:	mov    %al,0x4(%r10,%rdx,1)
   3093e:	mov    -0x98(%rbp),%rax
   30945:	lea    0x1(%rax),%edx
   30948:	mov    -0x68(%rbp),%rax
   3094c:	lea    0x20(%rax),%rsi
   30950:	mov    -0x60(%rbp),%rcx
   30954:	cmp    $0x8,%edx
   30957:	jle    30623 <jpeg_idct_9x9+0x353>
   3095d:	mov    -0x90(%rbp),%r15
   30964:	mov    -0x88(%rbp),%r14
   3096b:	mov    -0x80(%rbp),%r13
   3096f:	mov    -0x78(%rbp),%r12
   30973:	mov    -0x70(%rbp),%rbx
   30977:	leaveq 
   30978:	retq   
   30979:	nopl   0x0(%rax)

0000000000030980 <jpeg_idct_10x10>:
   30980:	push   %rbp
   30981:	mov    %rsp,%rbp
   30984:	sub    $0x210,%rsp
   3098b:	mov    %r8,-0x88(%rbp)
   30992:	mov    %rcx,-0x90(%rbp)
   30999:	mov    %rbx,-0xa0(%rbp)
   309a0:	mov    %r12,-0xa8(%rbp)
   309a7:	mov    %r13,-0xb0(%rbp)
   309ae:	mov    %r14,-0xb8(%rbp)
   309b5:	mov    %r15,-0xc0(%rbp)
   309bc:	mov    0x1a8(%rdi),%rax
   309c3:	mov    %rax,-0x98(%rbp)
   309ca:	mov    0x58(%rsi),%rdi
   309ce:	mov    %rdx,%r9
   309d1:	xor    %ecx,%ecx
   309d3:	lea    -0x208(%rbp),%rsi
   309da:	jmpq   30d50 <jpeg_idct_10x10+0x3d0>
   309df:	movswq 0x30(%rdi),%rax
   309e4:	movswq 0x30(%r9),%rdx
   309e9:	imul   %edx,%eax
   309ec:	movslq %eax,%r12
   309ef:	mov    %r12,-0x10(%rbp)
   309f3:	movswq 0x70(%rdi),%rax
   309f8:	movswq 0x70(%r9),%rdx
   309fd:	imul   %edx,%eax
   30a00:	movslq %eax,%r8
   30a03:	mov    %r8,-0x8(%rbp)
   30a07:	mov    %r12,%rbx
   30a0a:	sub    %r8,%rbx
   30a0d:	lea    (%rbx,%rbx,2),%r14
   30a11:	mov    %r14,%rax
   30a14:	shl    $0x3,%rax
   30a18:	lea    (%rax,%rbx,4),%rax
   30a1c:	lea    (%rbx,%rax,1),%r10
   30a20:	lea    (%rbx,%rbx,4),%rax
   30a24:	shl    $0x9,%rax
   30a28:	sub    %r10,%rax
   30a2b:	movswq 0x50(%rdi),%rdx
   30a30:	movswq 0x50(%r9),%r11
   30a35:	imul   %r11d,%edx
   30a39:	movslq %edx,%r11
   30a3c:	mov    %r11,-0x18(%rbp)
   30a40:	shl    $0xd,%r11
   30a44:	lea    (%rax,%r11,1),%rdx
   30a48:	mov    %rdx,-0x48(%rbp)
   30a4c:	add    %r8,%r12
   30a4f:	lea    (%r12,%r12,2),%rax
   30a53:	lea    (%r12,%rax,8),%rax
   30a57:	shl    $0x4,%rax
   30a5b:	add    %r12,%rax
   30a5e:	mov    %rcx,-0xc8(%rbp)
   30a65:	mov    %rax,-0x50(%rbp)
   30a69:	mov    %r12,%rcx
   30a6c:	shl    $0xd,%rcx
   30a70:	mov    %rcx,-0x58(%rbp)
   30a74:	sub    %rax,%rcx
   30a77:	movswq 0x10(%rdi),%rax
   30a7c:	movswq 0x10(%r9),%r8
   30a81:	imul   %r8d,%eax
   30a85:	movslq %eax,%r15
   30a88:	mov    %r15,%rax
   30a8b:	imul   $0x2cb3,%rax,%rax
   30a92:	add    %rcx,%rax
   30a95:	add    %rax,%rdx
   30a98:	movswq 0x20(%rdi),%rax
   30a9d:	movswq 0x20(%r9),%rcx
   30aa2:	imul   %ecx,%eax
   30aa5:	movslq %eax,%rcx
   30aa8:	movswq 0x60(%rdi),%rax
   30aad:	movswq 0x60(%r9),%r8
   30ab2:	imul   %r8d,%eax
   30ab6:	movslq %eax,%rax
   30ab9:	mov    %rax,-0x20(%rbp)
   30abd:	lea    (%rcx,%rax,1),%r8
   30ac1:	lea    (%r8,%r8,4),%rax
   30ac5:	shl    $0x4,%rax
   30ac9:	lea    (%rax,%r8,4),%rax
   30acd:	add    %r8,%rax
   30ad0:	shl    $0x4,%rax
   30ad4:	lea    (%rax,%r8,2),%rax
   30ad8:	lea    (%rax,%rax,4),%r8
   30adc:	mov    %r8,-0x28(%rbp)
   30ae0:	mov    %rcx,%rax
   30ae3:	shl    $0x8,%rax
   30ae7:	lea    (%rax,%rcx,8),%rax
   30aeb:	sub    %rcx,%rax
   30aee:	shl    $0x4,%rax
   30af2:	add    %rcx,%rax
   30af5:	add    %rax,%r8
   30af8:	mov    %r8,-0x60(%rbp)
   30afc:	movswq 0x40(%rdi),%rax
   30b01:	movswq 0x40(%r9),%rcx
   30b06:	imul   %ecx,%eax
   30b09:	movslq %eax,%r13
   30b0c:	lea    0x0(%r13,%r13,8),%rax
   30b11:	shl    $0x5,%rax
   30b15:	mov    %r13,%rcx
   30b18:	shl    $0x2,%rcx
   30b1c:	mov    %rcx,-0x38(%rbp)
   30b20:	add    %rcx,%rax
   30b23:	add    %r13,%rax
   30b26:	shl    $0x5,%rax
   30b2a:	lea    0x0(%r13,%r13,2),%rcx
   30b2f:	sub    %rcx,%rax
   30b32:	mov    %rdi,-0x70(%rbp)
   30b36:	movswq (%rdi),%rdi
   30b3a:	mov    %r9,-0x68(%rbp)
   30b3e:	movswq (%r9),%r9
   30b42:	imul   %r9d,%edi
   30b46:	movslq %edi,%rdi
   30b49:	shl    $0xd,%rdi
   30b4d:	add    %rdi,%rax
   30b50:	mov    %rax,-0x40(%rbp)
   30b54:	add    %rax,%r8
   30b57:	lea    0x400(%rdx,%r8,1),%rax
   30b5f:	sar    $0xb,%rax
   30b63:	mov    %eax,(%rsi)
   30b65:	lea    0x400(%r8),%rax
   30b6c:	sub    %rdx,%rax
   30b6f:	sar    $0xb,%rax
   30b73:	mov    %eax,0x120(%rsi)
   30b79:	lea    (%rbx,%r14,4),%rdx
   30b7d:	shl    $0x9,%rdx
   30b81:	lea    (%r10,%r11,1),%rax
   30b85:	mov    %rdx,%rbx
   30b88:	sub    %rax,%rbx
   30b8b:	lea    (%r12,%r12,8),%rax
   30b8f:	shl    $0x5,%rax
   30b93:	lea    (%rax,%r12,8),%rax
   30b97:	lea    (%rax,%r12,4),%rax
   30b9b:	add    %r12,%rax
   30b9e:	shl    $0x4,%rax
   30ba2:	sub    %rax,%r12
   30ba5:	lea    (%r15,%r15,4),%rax
   30ba9:	shl    $0x7,%rax
   30bad:	lea    (%rax,%r15,4),%rax
   30bb1:	add    %r15,%rax
   30bb4:	shl    $0x4,%rax
   30bb8:	lea    (%rax,%r15,2),%rax
   30bbc:	add    %r15,%rax
   30bbf:	add    %r12,%rax
   30bc2:	lea    (%rax,%rbx,1),%r14
   30bc6:	mov    -0x20(%rbp),%rbx
   30bca:	mov    %rbx,%r8
   30bcd:	shl    $0x5,%r8
   30bd1:	mov    %rbx,%rax
   30bd4:	shl    $0x9,%rax
   30bd8:	add    %r8,%rax
   30bdb:	lea    (%rax,%rbx,8),%rax
   30bdf:	lea    (%rax,%rbx,4),%rax
   30be3:	add    %rbx,%rax
   30be6:	shl    $0x5,%rax
   30bea:	lea    (%rax,%rbx,4),%rbx
   30bee:	mov    -0x28(%rbp),%r9
   30bf2:	mov    %r9,%r8
   30bf5:	sub    %rbx,%r8
   30bf8:	lea    0x0(%r13,%rcx,2),%rax
   30bfd:	shl    $0x9,%rax
   30c01:	mov    -0x38(%rbp),%rcx
   30c05:	neg    %rax
   30c08:	add    %rcx,%rax
   30c0b:	lea    0x400(%rdi,%rax,1),%rax
   30c13:	mov    %rax,-0x30(%rbp)
   30c17:	add    %r8,%rax
   30c1a:	lea    (%r14,%rax,1),%r8
   30c1e:	sar    $0xb,%r8
   30c22:	mov    %r8d,0x20(%rsi)
   30c26:	sub    %r14,%rax
   30c29:	sar    $0xb,%rax
   30c2d:	mov    %eax,0x100(%rsi)
   30c33:	lea    0x0(%r13,%rcx,1),%rax
   30c38:	lea    0x0(%r13,%rax,2),%rax
   30c3d:	shl    $0x4,%rax
   30c41:	add    %rcx,%rax
   30c44:	add    %r13,%rax
   30c47:	shl    $0x6,%rax
   30c4b:	lea    (%rax,%r13,2),%rcx
   30c4f:	lea    0x400(%rdi),%rax
   30c56:	sub    %rcx,%rax
   30c59:	sar    $0xb,%rax
   30c5d:	mov    -0x10(%rbp),%rdi
   30c61:	mov    -0x8(%rbp),%rcx
   30c65:	sub    %rdi,%rcx
   30c68:	add    %r15,%rcx
   30c6b:	mov    -0x18(%rbp),%rdi
   30c6f:	sub    %rdi,%rcx
   30c72:	shl    $0x2,%rcx
   30c76:	lea    (%rax,%rcx,1),%rdi
   30c7a:	mov    %edi,0x40(%rsi)
   30c7d:	sub    %rcx,%rax
   30c80:	mov    %eax,0xe0(%rsi)
   30c86:	sub    %rdx,%r10
   30c89:	lea    (%r11,%r10,1),%rax
   30c8d:	mov    %r15,%rdx
   30c90:	shl    $0x4,%rdx
   30c94:	mov    %r15,%rcx
   30c97:	shl    $0xa,%rcx
   30c9b:	add    %rdx,%rcx
   30c9e:	lea    (%rcx,%r15,8),%rcx
   30ca2:	lea    (%rcx,%r15,4),%rcx
   30ca6:	lea    (%rcx,%rcx,4),%rcx
   30caa:	add    %r12,%rcx
   30cad:	lea    (%rax,%rcx,1),%rdx
   30cb1:	sub    %r9,%rbx
   30cb4:	mov    -0x30(%rbp),%rax
   30cb8:	add    %rbx,%rax
   30cbb:	lea    (%rdx,%rax,1),%rcx
   30cbf:	sar    $0xb,%rcx
   30cc3:	mov    %ecx,0x60(%rsi)
   30cc6:	sub    %rdx,%rax
   30cc9:	sar    $0xb,%rax
   30ccd:	mov    %eax,0xc0(%rsi)
   30cd3:	mov    -0x58(%rbp),%rax
   30cd7:	mov    -0x50(%rbp),%rcx
   30cdb:	sub    %rax,%rcx
   30cde:	lea    (%r15,%r15,2),%rax
   30ce2:	lea    (%r15,%rax,2),%rax
   30ce6:	shl    $0x4,%rax
   30cea:	add    %r15,%rax
   30ced:	shl    $0x4,%rax
   30cf1:	lea    (%rax,%r15,4),%rax
   30cf5:	add    %rcx,%rax
   30cf8:	mov    -0x48(%rbp),%rcx
   30cfc:	lea    (%rcx,%rax,1),%rdi
   30d00:	mov    -0x40(%rbp),%rax
   30d04:	add    $0x400,%rax
   30d0a:	mov    -0x60(%rbp),%rdx
   30d0e:	mov    %rax,%rcx
   30d11:	sub    %rdx,%rcx
   30d14:	add    %rdi,%rcx
   30d17:	sar    $0xb,%rcx
   30d1b:	mov    %ecx,0x80(%rsi)
   30d21:	lea    (%rdi,%rdx,1),%rcx
   30d25:	sub    %rcx,%rax
   30d28:	sar    $0xb,%rax
   30d2c:	mov    %eax,0xa0(%rsi)
   30d32:	mov    -0x70(%rbp),%rax
   30d36:	lea    0x2(%rax),%rdi
   30d3a:	mov    -0x68(%rbp),%rax
   30d3e:	lea    0x2(%rax),%r9
   30d42:	add    $0x4,%rsi
   30d46:	mov    -0xc8(%rbp),%rax
   30d4d:	lea    0x1(%rax),%ecx
   30d50:	cmp    $0x7,%ecx
   30d53:	jle    309df <jpeg_idct_10x10+0x5f>
   30d59:	mov    -0x88(%rbp),%rax
   30d60:	mov    %eax,%r10d
   30d63:	mov    -0x98(%rbp),%r15
   30d6a:	lea    -0x208(%rbp),%rdx
   30d71:	xor    %ecx,%ecx
   30d73:	mov    -0x90(%rbp),%rsi
   30d7a:	jmpq   31178 <jpeg_idct_10x10+0x7f8>
   30d7f:	movslq 0xc(%rdx),%r11
   30d83:	mov    %r11,-0x50(%rbp)
   30d87:	movslq 0x1c(%rdx),%rdi
   30d8b:	mov    %rdi,-0x48(%rbp)
   30d8f:	mov    %r11,%r13
   30d92:	sub    %rdi,%r13
   30d95:	lea    0x0(%r13,%r13,2),%r12
   30d9a:	mov    %r12,%rax
   30d9d:	shl    $0x3,%rax
   30da1:	lea    (%rax,%r13,4),%rax
   30da5:	lea    0x0(%r13,%rax,1),%rbx
   30daa:	lea    0x0(%r13,%r13,4),%rax
   30daf:	shl    $0x9,%rax
   30db3:	sub    %rbx,%rax
   30db6:	movslq 0x14(%rdx),%r8
   30dba:	mov    %r8,-0x58(%rbp)
   30dbe:	shl    $0xd,%r8
   30dc2:	lea    (%rax,%r8,1),%r9
   30dc6:	mov    %r9,-0x20(%rbp)
   30dca:	lea    (%rdi,%r11,1),%rax
   30dce:	mov    %rax,-0x60(%rbp)
   30dd2:	lea    (%rax,%rax,2),%rdi
   30dd6:	lea    (%rax,%rdi,8),%rdi
   30dda:	shl    $0x4,%rdi
   30dde:	add    %rax,%rdi
   30de1:	mov    %rdi,-0x28(%rbp)
   30de5:	shl    $0xd,%rax
   30de9:	mov    %rax,-0x30(%rbp)
   30ded:	sub    %rdi,%rax
   30df0:	movslq 0x4(%rdx),%rdi
   30df4:	mov    %rdi,-0x68(%rbp)
   30df8:	imul   $0x2cb3,%rdi,%rdi
   30dff:	add    %rdi,%rax
   30e02:	lea    (%r9,%rax,1),%rdi
   30e06:	movslq 0x8(%rdx),%r11
   30e0a:	movslq 0x18(%rdx),%rax
   30e0e:	mov    %rax,-0x78(%rbp)
   30e12:	lea    (%r11,%rax,1),%r9
   30e16:	lea    (%r9,%r9,4),%rax
   30e1a:	shl    $0x4,%rax
   30e1e:	lea    (%rax,%r9,4),%rax
   30e22:	add    %r9,%rax
   30e25:	shl    $0x4,%rax
   30e29:	lea    (%rax,%r9,2),%rax
   30e2d:	lea    (%rax,%rax,4),%r9
   30e31:	mov    %r9,-0x70(%rbp)
   30e35:	mov    %r11,%rax
   30e38:	shl    $0x8,%rax
   30e3c:	lea    (%rax,%r11,8),%rax
   30e40:	sub    %r11,%rax
   30e43:	shl    $0x4,%rax
   30e47:	add    %r11,%rax
   30e4a:	add    %rax,%r9
   30e4d:	mov    %r9,-0x40(%rbp)
   30e51:	movslq 0x10(%rdx),%r14
   30e55:	lea    (%r14,%r14,8),%rax
   30e59:	shl    $0x5,%rax
   30e5d:	mov    %r14,%r11
   30e60:	shl    $0x2,%r11
   30e64:	mov    %r11,-0x88(%rbp)
   30e6b:	add    %r11,%rax
   30e6e:	add    %r14,%rax
   30e71:	shl    $0x5,%rax
   30e75:	lea    (%r14,%r14,2),%r11
   30e79:	sub    %r11,%rax
   30e7c:	mov    %rdx,-0x98(%rbp)
   30e83:	mov    %rax,-0x38(%rbp)
   30e87:	movslq (%rdx),%rdx
   30e8a:	shl    $0xd,%rdx
   30e8e:	mov    %rdx,-0x80(%rbp)
   30e92:	add    %rax,%rdx
   30e95:	lea    (%r9,%rdx,1),%rax
   30e99:	lea    0x20000(%rdi,%rax,1),%rax
   30ea1:	sar    $0x12,%rax
   30ea5:	and    $0x3ff,%eax
   30eaa:	movslq %eax,%rax
   30ead:	movzbl 0x80(%r15,%rax,1),%eax
   30eb6:	mov    %rcx,-0xc8(%rbp)
   30ebd:	movslq %ecx,%rcx
   30ec0:	mov    (%rsi,%rcx,8),%rsi
   30ec4:	mov    %al,(%r10,%rsi,1)
   30ec8:	lea    0x20000(%r9,%rdx,1),%rax
   30ed0:	sub    %rdi,%rax
   30ed3:	sar    $0x12,%rax
   30ed7:	and    $0x3ff,%eax
   30edc:	movslq %eax,%rax
   30edf:	movzbl 0x80(%r15,%rax,1),%eax
   30ee8:	mov    %al,0x9(%r10,%rsi,1)
   30eed:	lea    0x0(%r13,%r12,4),%rdi
   30ef2:	shl    $0x9,%rdi
   30ef6:	lea    (%rbx,%r8,1),%rax
   30efa:	mov    %rdi,%rcx
   30efd:	sub    %rax,%rcx
   30f00:	mov    -0x60(%rbp),%r9
   30f04:	lea    (%r9,%r9,8),%rax
   30f08:	shl    $0x5,%rax
   30f0c:	lea    (%rax,%r9,8),%rax
   30f10:	lea    (%rax,%r9,4),%rax
   30f14:	add    %r9,%rax
   30f17:	shl    $0x4,%rax
   30f1b:	sub    %rax,%r9
   30f1e:	mov    -0x68(%rbp),%r13
   30f22:	lea    0x0(%r13,%r13,4),%rax
   30f27:	shl    $0x7,%rax
   30f2b:	lea    (%rax,%r13,4),%rax
   30f2f:	add    %r13,%rax
   30f32:	shl    $0x4,%rax
   30f36:	lea    (%rax,%r13,2),%rax
   30f3a:	add    %r13,%rax
   30f3d:	add    %r9,%rax
   30f40:	lea    (%rax,%rcx,1),%rdx
   30f44:	mov    -0x78(%rbp),%r12
   30f48:	mov    %r12,%rcx
   30f4b:	shl    $0x5,%rcx
   30f4f:	mov    %r12,%rax
   30f52:	shl    $0x9,%rax
   30f56:	add    %rcx,%rax
   30f59:	lea    (%rax,%r12,8),%rax
   30f5d:	lea    (%rax,%r12,4),%rax
   30f61:	add    %r12,%rax
   30f64:	shl    $0x5,%rax
   30f68:	lea    (%rax,%r12,4),%rcx
   30f6c:	mov    %rcx,-0x78(%rbp)
   30f70:	mov    -0x70(%rbp),%rax
   30f74:	sub    %rcx,%rax
   30f77:	lea    (%r14,%r11,2),%rcx
   30f7b:	shl    $0x9,%rcx
   30f7f:	mov    -0x88(%rbp),%r11
   30f86:	neg    %rcx
   30f89:	add    %r11,%rcx
   30f8c:	mov    -0x80(%rbp),%r12
   30f90:	lea    0x20000(%r12,%rcx,1),%rcx
   30f98:	mov    %rcx,-0x80(%rbp)
   30f9c:	add    %rcx,%rax
   30f9f:	lea    (%rdx,%rax,1),%rcx
   30fa3:	sar    $0x12,%rcx
   30fa7:	and    $0x3ff,%ecx
   30fad:	movslq %ecx,%rcx
   30fb0:	movzbl 0x80(%r15,%rcx,1),%ecx
   30fb9:	mov    %cl,0x1(%r10,%rsi,1)
   30fbe:	sub    %rdx,%rax
   30fc1:	sar    $0x12,%rax
   30fc5:	and    $0x3ff,%eax
   30fca:	movslq %eax,%rax
   30fcd:	movzbl 0x80(%r15,%rax,1),%eax
   30fd6:	mov    %al,0x8(%r10,%rsi,1)
   30fdb:	lea    (%r14,%r11,1),%rax
   30fdf:	lea    (%r14,%rax,2),%rax
   30fe3:	shl    $0x4,%rax
   30fe7:	add    %r11,%rax
   30fea:	add    %r14,%rax
   30fed:	shl    $0x6,%rax
   30ff1:	lea    (%rax,%r14,2),%rax
   30ff5:	lea    0x20000(%r12),%rdx
   30ffd:	sub    %rax,%rdx
   31000:	mov    -0x50(%rbp),%rcx
   31004:	mov    -0x48(%rbp),%rax
   31008:	sub    %rcx,%rax
   3100b:	lea    0x0(%r13,%rax,1),%r11
   31010:	mov    -0x58(%rbp),%rax
   31014:	mov    %r11,%rcx
   31017:	sub    %rax,%rcx
   3101a:	shl    $0xd,%rcx
   3101e:	add    %rdx,%rcx
   31021:	sar    $0x12,%rcx
   31025:	and    $0x3ff,%ecx
   3102b:	movslq %ecx,%rcx
   3102e:	movzbl 0x80(%r15,%rcx,1),%ecx
   31037:	mov    %cl,0x2(%r10,%rsi,1)
   3103c:	sub    %r11,%rax
   3103f:	shl    $0xd,%rax
   31043:	add    %rdx,%rax
   31046:	sar    $0x12,%rax
   3104a:	and    $0x3ff,%eax
   3104f:	movslq %eax,%rax
   31052:	movzbl 0x80(%r15,%rax,1),%eax
   3105b:	mov    %al,0x7(%r10,%rsi,1)
   31060:	sub    %rdi,%rbx
   31063:	lea    (%r8,%rbx,1),%rdx
   31067:	mov    %r13,%rcx
   3106a:	shl    $0x4,%rcx
   3106e:	mov    %r13,%rax
   31071:	shl    $0xa,%rax
   31075:	add    %rcx,%rax
   31078:	lea    (%rax,%r13,8),%rax
   3107c:	lea    (%rax,%r13,4),%rax
   31080:	lea    (%rax,%rax,4),%rax
   31084:	add    %r9,%rax
   31087:	add    %rax,%rdx
   3108a:	mov    -0x78(%rbp),%rax
   3108e:	mov    -0x70(%rbp),%rcx
   31092:	sub    %rcx,%rax
   31095:	mov    -0x80(%rbp),%rcx
   31099:	add    %rcx,%rax
   3109c:	lea    (%rdx,%rax,1),%rcx
   310a0:	sar    $0x12,%rcx
   310a4:	and    $0x3ff,%ecx
   310aa:	movslq %ecx,%rcx
   310ad:	movzbl 0x80(%r15,%rcx,1),%ecx
   310b6:	mov    %cl,0x3(%r10,%rsi,1)
   310bb:	sub    %rdx,%rax
   310be:	sar    $0x12,%rax
   310c2:	and    $0x3ff,%eax
   310c7:	movslq %eax,%rax
   310ca:	movzbl 0x80(%r15,%rax,1),%eax
   310d3:	mov    %al,0x6(%r10,%rsi,1)
   310d8:	mov    -0x28(%rbp),%rax
   310dc:	mov    -0x30(%rbp),%rcx
   310e0:	sub    %rcx,%rax
   310e3:	lea    0x0(%r13,%r13,2),%rcx
   310e8:	lea    0x0(%r13,%rcx,2),%rcx
   310ed:	shl    $0x4,%rcx
   310f1:	add    %r13,%rcx
   310f4:	shl    $0x4,%rcx
   310f8:	lea    (%rcx,%r13,4),%rcx
   310fc:	add    %rcx,%rax
   310ff:	mov    -0x20(%rbp),%rcx
   31103:	lea    (%rcx,%rax,1),%rdx
   31107:	mov    -0x38(%rbp),%rax
   3110b:	lea    0x20000(%rax,%r12,1),%rax
   31113:	mov    -0x40(%rbp),%rdi
   31117:	mov    %rax,%rcx
   3111a:	sub    %rdi,%rcx
   3111d:	add    %rdx,%rcx
   31120:	sar    $0x12,%rcx
   31124:	and    $0x3ff,%ecx
   3112a:	movslq %ecx,%rcx
   3112d:	movzbl 0x80(%r15,%rcx,1),%ecx
   31136:	mov    %cl,0x4(%r10,%rsi,1)
   3113b:	lea    (%rdx,%rdi,1),%rcx
   3113f:	sub    %rcx,%rax
   31142:	sar    $0x12,%rax
   31146:	and    $0x3ff,%eax
   3114b:	movslq %eax,%rax
   3114e:	movzbl 0x80(%rax,%r15,1),%eax
   31157:	mov    %al,0x5(%r10,%rsi,1)
   3115c:	mov    -0xc8(%rbp),%rax
   31163:	lea    0x1(%rax),%ecx
   31166:	mov    -0x98(%rbp),%rax
   3116d:	lea    0x20(%rax),%rdx
   31171:	mov    -0x90(%rbp),%rsi
   31178:	cmp    $0x9,%ecx
   3117b:	jle    30d7f <jpeg_idct_10x10+0x3ff>
   31181:	mov    -0xc0(%rbp),%r15
   31188:	mov    -0xb8(%rbp),%r14
   3118f:	mov    -0xb0(%rbp),%r13
   31196:	mov    -0xa8(%rbp),%r12
   3119d:	mov    -0xa0(%rbp),%rbx
   311a4:	leaveq 
   311a5:	retq   
   311a6:	nopw   %cs:0x0(%rax,%rax,1)

00000000000311b0 <jpeg_idct_11x11>:
   311b0:	push   %rbp
   311b1:	mov    %rsp,%rbp
   311b4:	sub    $0x210,%rsp
   311bb:	mov    %r8,-0x68(%rbp)
   311bf:	mov    %rcx,-0x70(%rbp)
   311c3:	mov    %rbx,-0x80(%rbp)
   311c7:	mov    %r12,-0x88(%rbp)
   311ce:	mov    %r13,-0x90(%rbp)
   311d5:	mov    %r14,-0x98(%rbp)
   311dc:	mov    %r15,-0xa0(%rbp)
   311e3:	mov    0x1a8(%rdi),%rax
   311ea:	mov    %rax,-0x78(%rbp)
   311ee:	mov    0x58(%rsi),%rcx
   311f2:	xor    %edi,%edi
   311f4:	lea    -0x208(%rbp),%rsi
   311fb:	jmpq   316bf <jpeg_idct_11x11+0x50f>
   31200:	movswq 0x30(%rcx),%rax
   31205:	movswq 0x30(%rdx),%rbx
   3120a:	imul   %ebx,%eax
   3120d:	movslq %eax,%r14
   31210:	mov    %r14,-0x30(%rbp)
   31214:	movswq 0x10(%rcx),%rax
   31219:	movswq 0x10(%rdx),%rbx
   3121e:	imul   %ebx,%eax
   31221:	movslq %eax,%r11
   31224:	lea    (%r14,%r11,1),%r10
   31228:	movswq 0x50(%rcx),%rax
   3122d:	movswq 0x50(%rdx),%rbx
   31232:	imul   %ebx,%eax
   31235:	movslq %eax,%r9
   31238:	lea    (%r9,%r10,1),%r8
   3123c:	movswq 0x70(%rcx),%rax
   31241:	movswq 0x70(%rdx),%rbx
   31246:	imul   %ebx,%eax
   31249:	movslq %eax,%rbx
   3124c:	mov    %rbx,-0x38(%rbp)
   31250:	lea    (%rbx,%r8,1),%rax
   31254:	mov    %rax,%r8
   31257:	shl    $0x6,%r8
   3125b:	shl    $0xa,%rax
   3125f:	add    %r8,%rax
   31262:	lea    (%rax,%rax,2),%r15
   31266:	lea    (%rbx,%r11,1),%rax
   3126a:	lea    (%rax,%rax,4),%rax
   3126e:	mov    %rax,%rbx
   31271:	shl    $0x5,%rbx
   31275:	lea    (%rbx,%rax,8),%rax
   31279:	lea    (%rax,%rax,2),%rax
   3127d:	lea    (%rax,%rax,4),%rax
   31281:	lea    (%r15,%rax,1),%r8
   31285:	mov    %r8,-0x18(%rbp)
   31289:	lea    (%r9,%r11,1),%rbx
   3128d:	lea    (%rbx,%rbx,4),%rax
   31291:	lea    (%rbx,%rax,4),%rax
   31295:	shl    $0x4,%rax
   31299:	lea    (%rax,%rbx,8),%rax
   3129d:	sub    %rbx,%rax
   312a0:	shl    $0x4,%rax
   312a4:	lea    (%rax,%rbx,4),%rbx
   312a8:	mov    %rbx,-0x8(%rbp)
   312ac:	lea    (%r10,%r10,2),%rax
   312b0:	lea    (%r10,%rax,2),%rax
   312b4:	shl    $0x5,%rax
   312b8:	lea    (%rax,%r10,2),%rax
   312bc:	add    %r10,%rax
   312bf:	shl    $0x5,%rax
   312c3:	lea    (%rax,%r10,8),%rax
   312c7:	lea    (%rax,%r10,2),%rax
   312cb:	mov    %rax,-0x10(%rbp)
   312cf:	add    %rbx,%rax
   312d2:	lea    (%r8,%rax,1),%r12
   312d6:	mov    %r11,%rax
   312d9:	shl    $0x6,%rax
   312dd:	mov    %rdi,-0xa8(%rbp)
   312e4:	lea    (%r11,%r11,4),%rdi
   312e8:	sub    %rdi,%rax
   312eb:	shl    $0x7,%rax
   312ef:	lea    (%rax,%r11,8),%rax
   312f3:	lea    (%rax,%r11,2),%r8
   312f7:	mov    %r12,%r13
   312fa:	sub    %r8,%r13
   312fd:	movswq 0x60(%rcx),%rax
   31302:	movswq 0x60(%rdx),%rdi
   31307:	imul   %edi,%eax
   3130a:	movslq %eax,%r11
   3130d:	movswq 0x20(%rcx),%rax
   31312:	movswq 0x20(%rdx),%rdi
   31317:	imul   %edi,%eax
   3131a:	movslq %eax,%rax
   3131d:	mov    %rax,-0x28(%rbp)
   31321:	lea    (%r11,%rax,1),%rdi
   31325:	mov    %rdi,-0x20(%rbp)
   31329:	movswq 0x40(%rcx),%rax
   3132e:	movswq 0x40(%rdx),%rbx
   31333:	imul   %ebx,%eax
   31336:	movslq %eax,%rbx
   31339:	sub    %rbx,%rdi
   3133c:	mov    %rdi,-0x48(%rbp)
   31340:	lea    (%rdi,%rdi,4),%r10
   31344:	lea    (%rdi,%r10,2),%rax
   31348:	shl    $0x5,%rax
   3134c:	sub    %r10,%rax
   3134f:	shl    $0x5,%rax
   31353:	lea    (%rax,%rdi,8),%rax
   31357:	lea    (%rax,%rdi,4),%rdi
   3135b:	movswq (%rcx),%rax
   3135f:	mov    %rdx,-0x50(%rbp)
   31363:	movswq (%rdx),%rdx
   31367:	imul   %edx,%eax
   3136a:	movslq %eax,%rax
   3136d:	shl    $0xd,%rax
   31371:	mov    %rax,-0x40(%rbp)
   31375:	lea    (%rax,%rdi,1),%r10
   31379:	mov    %r11,%rdx
   3137c:	shl    $0xa,%rdx
   31380:	mov    %rcx,-0x60(%rbp)
   31384:	mov    %r11,%rax
   31387:	shl    $0xe,%rax
   3138b:	add    %rdx,%rax
   3138e:	lea    (%r11,%r11,4),%rcx
   31392:	lea    (%rcx,%rcx,4),%rcx
   31396:	lea    (%rcx,%rcx,2),%rcx
   3139a:	sub    %rcx,%rax
   3139d:	lea    (%r10,%rax,1),%rdx
   313a1:	mov    %rbx,%rcx
   313a4:	sub    %r11,%rcx
   313a7:	lea    (%rcx,%rcx,4),%rax
   313ab:	shl    $0x5,%rax
   313af:	lea    (%rax,%rcx,2),%rax
   313b3:	add    %rcx,%rax
   313b6:	shl    $0x7,%rax
   313ba:	add    %rcx,%rcx
   313bd:	sub    %rcx,%rax
   313c0:	add    %rax,%rdx
   313c3:	lea    0x400(%rdx,%r13,1),%rcx
   313cb:	sar    $0xb,%rcx
   313cf:	mov    %ecx,(%rsi)
   313d1:	sub    %r12,%r8
   313d4:	lea    0x400(%rdx,%r8,1),%rcx
   313dc:	sar    $0xb,%rcx
   313e0:	mov    %ecx,0x140(%rsi)
   313e6:	lea    (%r9,%r14,1),%rdx
   313ea:	lea    (%rdx,%rdx,8),%r8
   313ee:	mov    %r8,%rcx
   313f1:	shl    $0x4,%rcx
   313f5:	lea    (%rcx,%rdx,4),%rcx
   313f9:	add    %rdx,%rcx
   313fc:	shl    $0x6,%rcx
   31400:	mov    %r8,%rdx
   31403:	sub    %rcx,%rdx
   31406:	lea    (%r15,%rdx,1),%r12
   3140a:	mov    %r14,%rdx
   3140d:	shl    $0x5,%rdx
   31411:	mov    %r14,%rdi
   31414:	shl    $0xa,%rdi
   31418:	add    %rdi,%rdx
   3141b:	lea    (%rdx,%r14,4),%rdx
   3141f:	add    %r14,%rdx
   31422:	shl    $0x4,%rdx
   31426:	lea    (%rdx,%r14,8),%rdx
   3142a:	lea    (%r12,%rdx,1),%rdi
   3142e:	mov    -0x10(%rbp),%rdx
   31432:	add    %rdx,%rdi
   31435:	mov    -0x38(%rbp),%r13
   31439:	lea    0x0(%r13,%r14,1),%rdx
   3143e:	imul   $0xffffffffffffc675,%rdx,%rdx
   31445:	mov    %rdx,-0x10(%rbp)
   31449:	lea    (%rdx,%rdi,1),%r12
   3144d:	mov    -0x28(%rbp),%rdi
   31451:	mov    %rbx,%r14
   31454:	sub    %rdi,%r14
   31457:	lea    (%r14,%r14,2),%rdx
   3145b:	shl    $0x4,%rdx
   3145f:	lea    (%rdx,%r14,8),%rdx
   31463:	sub    %rbx,%rdi
   31466:	add    %rdi,%rdx
   31469:	shl    $0x6,%rdx
   3146d:	lea    (%rdx,%r14,8),%rdx
   31471:	add    %rdx,%r14
   31474:	add    %r14,%rax
   31477:	lea    0x400(%r10,%rax,1),%rax
   3147f:	lea    (%rbx,%rbx,2),%rdx
   31483:	lea    (%rbx,%rdx,2),%rdx
   31487:	shl    $0x5,%rdx
   3148b:	lea    (%rdx,%rbx,8),%rdx
   3148f:	add    %rbx,%rdx
   31492:	shl    $0x6,%rdx
   31496:	lea    (%rdx,%rbx,8),%rdx
   3149a:	lea    (%rdx,%rbx,4),%rdi
   3149e:	mov    %rax,%rdx
   314a1:	sub    %rdi,%rdx
   314a4:	add    %r12,%rdx
   314a7:	sar    $0xb,%rdx
   314ab:	mov    %edx,0x20(%rsi)
   314ae:	lea    (%r12,%rdi,1),%rdx
   314b2:	sub    %rdx,%rax
   314b5:	sar    $0xb,%rax
   314b9:	mov    %eax,0x120(%rsi)
   314bf:	sub    %r8,%rcx
   314c2:	lea    (%r9,%r9,8),%rax
   314c6:	lea    (%r9,%rax,2),%rax
   314ca:	shl    $0x4,%rax
   314ce:	add    %r9,%rax
   314d1:	shl    $0x5,%rax
   314d5:	lea    (%rax,%r9,4),%rax
   314d9:	lea    (%rax,%r9,2),%rax
   314dd:	add    %rcx,%rax
   314e0:	neg    %rax
   314e3:	add    %r15,%rax
   314e6:	mov    -0x8(%rbp),%rcx
   314ea:	lea    (%rax,%rcx,1),%rdx
   314ee:	mov    -0x20(%rbp),%rax
   314f2:	lea    (%rax,%rax,8),%rcx
   314f6:	lea    (%rax,%rcx,4),%rcx
   314fa:	shl    $0x8,%rcx
   314fe:	lea    (%rax,%rax,4),%rax
   31502:	sub    %rcx,%rax
   31505:	lea    (%r10,%rax,1),%rdi
   31509:	lea    (%r11,%r11,2),%r8
   3150d:	mov    %r8,%rax
   31510:	shl    $0x5,%rax
   31514:	lea    (%rax,%r11,4),%rax
   31518:	add    %r11,%rax
   3151b:	shl    $0x6,%rax
   3151f:	mov    %r8,%rcx
   31522:	sub    %rax,%rcx
   31525:	lea    0x400(%rdi,%rcx,1),%rcx
   3152d:	add    %rdx,%rcx
   31530:	sar    $0xb,%rcx
   31534:	mov    %ecx,0x40(%rsi)
   31537:	lea    0x400(%rdi),%rcx
   3153e:	sub    %r8,%rax
   31541:	add    %rdx,%rax
   31544:	sub    %rax,%rcx
   31547:	sar    $0xb,%rcx
   3154b:	mov    %ecx,0x100(%rsi)
   31551:	mov    %r13,%rax
   31554:	shl    $0x8,%rax
   31558:	lea    (%rax,%r13,8),%rax
   3155c:	lea    (%rax,%r13,4),%rax
   31560:	add    %r13,%rax
   31563:	shl    $0x6,%rax
   31567:	lea    (%rax,%r13,8),%rax
   3156b:	sub    %r13,%rax
   3156e:	mov    -0x10(%rbp),%rcx
   31572:	add    %rax,%rcx
   31575:	mov    -0x18(%rbp),%rax
   31579:	lea    (%rcx,%rax,1),%r8
   3157d:	mov    -0x28(%rbp),%rdx
   31581:	mov    %rdx,%rax
   31584:	shl    $0x4,%rax
   31588:	add    %rdx,%rax
   3158b:	lea    (%rdx,%rdx,2),%rcx
   3158f:	shl    $0x5,%rcx
   31593:	add    %rdx,%rcx
   31596:	shl    $0x7,%rcx
   3159a:	sub    %rcx,%rax
   3159d:	lea    0x400(%r10,%rax,1),%rax
   315a5:	add    %r14,%rax
   315a8:	lea    (%r8,%rax,1),%rcx
   315ac:	sar    $0xb,%rcx
   315b0:	mov    %ecx,0x60(%rsi)
   315b3:	sub    %r8,%rax
   315b6:	sar    $0xb,%rax
   315ba:	mov    %eax,0xe0(%rsi)
   315c0:	lea    0x0(%r13,%r13,4),%rax
   315c5:	shl    $0x2,%rax
   315c9:	lea    (%rax,%r13,2),%rcx
   315cd:	lea    0x0(%r13,%r13,2),%rax
   315d2:	mov    %rax,%r8
   315d5:	shl    $0x9,%r8
   315d9:	shl    $0xc,%rax
   315dd:	add    %r8,%rax
   315e0:	sub    %rax,%rcx
   315e3:	mov    %r9,%rax
   315e6:	shl    $0xd,%rax
   315ea:	lea    (%rax,%r9,8),%rax
   315ee:	lea    (%rax,%r9,2),%rax
   315f2:	lea    (%r9,%rax,1),%r8
   315f6:	mov    -0x30(%rbp),%rax
   315fa:	imul   $0xffffffffffffd10d,%rax,%rax
   31601:	add    %r8,%rax
   31604:	add    %rcx,%rax
   31607:	lea    (%r15,%rax,1),%r8
   3160b:	lea    (%rbx,%rbx,8),%rax
   3160f:	shl    $0x4,%rax
   31613:	lea    (%rax,%rbx,8),%rax
   31617:	lea    (%rax,%rax,2),%rax
   3161b:	neg    %rax
   3161e:	add    %rbx,%rax
   31621:	shl    $0xe,%rbx
   31625:	add    %rbx,%rax
   31628:	lea    (%rdx,%rdx,4),%rcx
   3162c:	shl    $0x4,%rcx
   31630:	lea    (%rcx,%rdx,8),%rcx
   31634:	add    %rdx,%rcx
   31637:	shl    $0x7,%rcx
   3163b:	lea    (%rcx,%rdx,2),%rcx
   3163f:	add    %rdx,%rcx
   31642:	sub    %rcx,%rax
   31645:	lea    (%rdi,%rax,1),%rcx
   31649:	lea    0x400(%r8,%rcx,1),%rax
   31651:	sar    $0xb,%rax
   31655:	mov    %eax,0x80(%rsi)
   3165b:	lea    0x400(%rcx),%rax
   31662:	sub    %r8,%rax
   31665:	sar    $0xb,%rax
   31669:	mov    %eax,0xc0(%rsi)
   3166f:	mov    -0x48(%rbp),%rcx
   31673:	lea    (%rcx,%rcx,8),%rax
   31677:	shl    $0x8,%rax
   3167b:	lea    (%rax,%rcx,8),%rax
   3167f:	lea    (%rax,%rcx,4),%rax
   31683:	add    %rcx,%rax
   31686:	lea    (%rax,%rax,4),%rcx
   3168a:	mov    -0x40(%rbp),%rax
   3168e:	add    $0x400,%rax
   31694:	sub    %rcx,%rax
   31697:	sar    $0xb,%rax
   3169b:	mov    %eax,0xa0(%rsi)
   316a1:	mov    -0x60(%rbp),%rax
   316a5:	lea    0x2(%rax),%rcx
   316a9:	mov    -0x50(%rbp),%rax
   316ad:	lea    0x2(%rax),%rdx
   316b1:	add    $0x4,%rsi
   316b5:	mov    -0xa8(%rbp),%rax
   316bc:	lea    0x1(%rax),%edi
   316bf:	cmp    $0x7,%edi
   316c2:	jle    31200 <jpeg_idct_11x11+0x50>
   316c8:	mov    -0x68(%rbp),%rax
   316cc:	mov    %eax,%r9d
   316cf:	mov    -0x78(%rbp),%r15
   316d3:	lea    -0x208(%rbp),%rcx
   316da:	xor    %esi,%esi
   316dc:	mov    -0x70(%rbp),%rdi
   316e0:	jmpq   31c27 <jpeg_idct_11x11+0xa77>
   316e5:	movslq 0xc(%rcx),%rax
   316e9:	mov    %rax,-0x50(%rbp)
   316ed:	movslq 0x4(%rcx),%r10
   316f1:	lea    (%rax,%r10,1),%r8
   316f5:	movslq 0x14(%rcx),%r13
   316f9:	lea    0x0(%r13,%r8,1),%rax
   316fe:	movslq 0x1c(%rcx),%r11
   31702:	mov    %r11,-0x48(%rbp)
   31706:	add    %r11,%rax
   31709:	mov    %rax,%rdx
   3170c:	shl    $0x6,%rdx
   31710:	shl    $0xa,%rax
   31714:	add    %rdx,%rax
   31717:	lea    (%rax,%rax,2),%rbx
   3171b:	mov    %rbx,-0xa8(%rbp)
   31722:	lea    (%r11,%r10,1),%rax
   31726:	lea    (%rax,%rax,4),%rdx
   3172a:	mov    %rdx,%rax
   3172d:	shl    $0x5,%rax
   31731:	lea    (%rax,%rdx,8),%rax
   31735:	lea    (%rax,%rax,2),%rax
   31739:	lea    (%rax,%rax,4),%rax
   3173d:	add    %rax,%rbx
   31740:	mov    %rbx,-0x28(%rbp)
   31744:	lea    0x0(%r13,%r10,1),%rdx
   31749:	lea    (%rdx,%rdx,4),%rax
   3174d:	lea    (%rdx,%rax,4),%rax
   31751:	shl    $0x4,%rax
   31755:	lea    (%rax,%rdx,8),%rax
   31759:	sub    %rdx,%rax
   3175c:	shl    $0x4,%rax
   31760:	lea    (%rax,%rdx,4),%rdx
   31764:	mov    %rdx,-0x30(%rbp)
   31768:	lea    (%r8,%r8,2),%rax
   3176c:	lea    (%r8,%rax,2),%rax
   31770:	shl    $0x5,%rax
   31774:	lea    (%rax,%r8,2),%rax
   31778:	add    %r8,%rax
   3177b:	shl    $0x5,%rax
   3177f:	lea    (%rax,%r8,8),%rax
   31783:	lea    (%rax,%r8,2),%rax
   31787:	mov    %rax,-0x58(%rbp)
   3178b:	add    %rdx,%rax
   3178e:	lea    (%rbx,%rax,1),%r12
   31792:	mov    %r10,%rax
   31795:	shl    $0x6,%rax
   31799:	lea    (%r10,%r10,4),%rdx
   3179d:	sub    %rdx,%rax
   317a0:	shl    $0x7,%rax
   317a4:	lea    (%rax,%r10,8),%rax
   317a8:	lea    (%rax,%r10,2),%r8
   317ac:	mov    %r12,%r10
   317af:	sub    %r8,%r10
   317b2:	movslq 0x18(%rcx),%r11
   317b6:	mov    %r11,-0x40(%rbp)
   317ba:	movslq 0x10(%rcx),%r14
   317be:	mov    %r14,-0x68(%rbp)
   317c2:	mov    %r14,%rbx
   317c5:	sub    %r11,%rbx
   317c8:	lea    (%rbx,%rbx,4),%rax
   317cc:	shl    $0x5,%rax
   317d0:	lea    (%rax,%rbx,2),%rax
   317d4:	lea    (%rbx,%rax,1),%rdx
   317d8:	shl    $0x7,%rdx
   317dc:	lea    (%rbx,%rbx,1),%rax
   317e0:	sub    %rax,%rdx
   317e3:	movslq 0x8(%rcx),%rax
   317e7:	mov    %rax,-0x60(%rbp)
   317eb:	lea    (%r11,%rax,1),%rbx
   317ef:	mov    %rbx,-0x38(%rbp)
   317f3:	sub    %r14,%rbx
   317f6:	mov    %rbx,-0x20(%rbp)
   317fa:	lea    (%rbx,%rbx,4),%r14
   317fe:	lea    (%rbx,%r14,2),%rax
   31802:	shl    $0x5,%rax
   31806:	sub    %r14,%rax
   31809:	shl    $0x5,%rax
   3180d:	lea    (%rax,%rbx,8),%rax
   31811:	lea    (%rax,%rbx,4),%rbx
   31815:	movslq (%rcx),%rax
   31818:	shl    $0xd,%rax
   3181c:	mov    %rax,-0x18(%rbp)
   31820:	lea    (%rax,%rbx,1),%r14
   31824:	mov    %rcx,-0x78(%rbp)
   31828:	mov    %r11,%rcx
   3182b:	shl    $0xa,%rcx
   3182f:	mov    %r11,%rax
   31832:	shl    $0xe,%rax
   31836:	add    %rcx,%rax
   31839:	lea    (%r11,%r11,4),%rcx
   3183d:	lea    (%rcx,%rcx,4),%rcx
   31841:	lea    (%rcx,%rcx,2),%rcx
   31845:	sub    %rcx,%rax
   31848:	add    %r14,%rax
   3184b:	lea    (%rax,%rdx,1),%r11
   3184f:	lea    0x20000(%r10,%r11,1),%rax
   31857:	sar    $0x12,%rax
   3185b:	and    $0x3ff,%eax
   31860:	movslq %eax,%rax
   31863:	movzbl 0x80(%r15,%rax,1),%ecx
   3186c:	movslq %esi,%rax
   3186f:	mov    (%rdi,%rax,8),%rbx
   31873:	mov    %cl,(%r9,%rbx,1)
   31877:	sub    %r12,%r8
   3187a:	lea    0x20000(%r8,%r11,1),%rax
   31882:	sar    $0x12,%rax
   31886:	and    $0x3ff,%eax
   3188b:	movslq %eax,%rax
   3188e:	movzbl 0x80(%r15,%rax,1),%eax
   31897:	mov    %al,0xa(%r9,%rbx,1)
   3189c:	mov    -0x50(%rbp),%r8
   318a0:	lea    0x0(%r13,%r8,1),%rcx
   318a5:	lea    (%rcx,%rcx,8),%r10
   318a9:	mov    %r10,%rax
   318ac:	shl    $0x4,%rax
   318b0:	lea    (%rax,%rcx,4),%rax
   318b4:	add    %rax,%rcx
   318b7:	shl    $0x6,%rcx
   318bb:	mov    %r10,%rax
   318be:	sub    %rcx,%rax
   318c1:	mov    -0xa8(%rbp),%r12
   318c8:	lea    (%r12,%rax,1),%rdi
   318cc:	mov    %rsi,-0xa8(%rbp)
   318d3:	mov    %r8,%rsi
   318d6:	shl    $0x5,%rsi
   318da:	mov    %r8,%rax
   318dd:	shl    $0xa,%rax
   318e1:	add    %rsi,%rax
   318e4:	lea    (%rax,%r8,4),%rax
   318e8:	add    %r8,%rax
   318eb:	shl    $0x4,%rax
   318ef:	lea    (%rax,%r8,8),%rax
   318f3:	add    %rdi,%rax
   318f6:	mov    -0x58(%rbp),%rsi
   318fa:	add    %rax,%rsi
   318fd:	mov    -0x48(%rbp),%rax
   31901:	add    %r8,%rax
   31904:	imul   $0xffffffffffffc675,%rax,%rax
   3190b:	mov    %rax,-0x58(%rbp)
   3190f:	lea    (%rax,%rsi,1),%r8
   31913:	mov    -0x68(%rbp),%rsi
   31917:	mov    -0x60(%rbp),%rdi
   3191b:	mov    %rsi,%r11
   3191e:	sub    %rdi,%r11
   31921:	lea    (%r11,%r11,2),%rax
   31925:	shl    $0x4,%rax
   31929:	lea    (%rax,%r11,8),%rax
   3192d:	sub    %rsi,%rdi
   31930:	add    %rdi,%rax
   31933:	shl    $0x6,%rax
   31937:	lea    (%rax,%r11,8),%rax
   3193b:	add    %rax,%r11
   3193e:	lea    (%r11,%rdx,1),%rax
   31942:	lea    0x20000(%rax,%r14,1),%rax
   3194a:	lea    (%rsi,%rsi,2),%rdx
   3194e:	lea    (%rsi,%rdx,2),%rdx
   31952:	shl    $0x5,%rdx
   31956:	lea    (%rdx,%rsi,8),%rdx
   3195a:	add    %rsi,%rdx
   3195d:	shl    $0x6,%rdx
   31961:	lea    (%rdx,%rsi,8),%rdx
   31965:	lea    (%rdx,%rsi,4),%rdi
   31969:	mov    %rax,%rdx
   3196c:	sub    %rdi,%rdx
   3196f:	add    %r8,%rdx
   31972:	sar    $0x12,%rdx
   31976:	and    $0x3ff,%edx
   3197c:	movslq %edx,%rdx
   3197f:	movzbl 0x80(%r15,%rdx,1),%edx
   31988:	mov    %dl,0x1(%r9,%rbx,1)
   3198d:	lea    (%r8,%rdi,1),%rdx
   31991:	sub    %rdx,%rax
   31994:	sar    $0x12,%rax
   31998:	and    $0x3ff,%eax
   3199d:	movslq %eax,%rax
   319a0:	movzbl 0x80(%r15,%rax,1),%eax
   319a9:	mov    %al,0x9(%r9,%rbx,1)
   319ae:	sub    %r10,%rcx
   319b1:	lea    0x0(%r13,%r13,8),%rax
   319b6:	lea    0x0(%r13,%rax,2),%rax
   319bb:	shl    $0x4,%rax
   319bf:	add    %r13,%rax
   319c2:	shl    $0x5,%rax
   319c6:	lea    (%rax,%r13,4),%rax
   319ca:	lea    (%rax,%r13,2),%rax
   319ce:	add    %rcx,%rax
   319d1:	neg    %rax
   319d4:	add    %r12,%rax
   319d7:	mov    -0x30(%rbp),%rcx
   319db:	lea    (%rax,%rcx,1),%rdi
   319df:	mov    -0x38(%rbp),%rdx
   319e3:	lea    (%rdx,%rdx,8),%rax
   319e7:	lea    (%rdx,%rax,4),%rcx
   319eb:	shl    $0x8,%rcx
   319ef:	lea    (%rdx,%rdx,4),%rax
   319f3:	sub    %rcx,%rax
   319f6:	lea    (%r14,%rax,1),%r8
   319fa:	mov    -0x40(%rbp),%rcx
   319fe:	lea    (%rcx,%rcx,2),%rdx
   31a02:	mov    %rdx,%rax
   31a05:	shl    $0x5,%rax
   31a09:	lea    (%rax,%rcx,4),%rax
   31a0d:	add    %rax,%rcx
   31a10:	shl    $0x6,%rcx
   31a14:	mov    %rdx,%rax
   31a17:	sub    %rcx,%rax
   31a1a:	lea    0x20000(%r8,%rax,1),%rax
   31a22:	add    %rdi,%rax
   31a25:	sar    $0x12,%rax
   31a29:	and    $0x3ff,%eax
   31a2e:	movslq %eax,%rax
   31a31:	movzbl 0x80(%r15,%rax,1),%eax
   31a3a:	mov    %al,0x2(%r9,%rbx,1)
   31a3f:	lea    0x20000(%r8),%rax
   31a46:	sub    %rdx,%rcx
   31a49:	add    %rdi,%rcx
   31a4c:	sub    %rcx,%rax
   31a4f:	sar    $0x12,%rax
   31a53:	and    $0x3ff,%eax
   31a58:	movslq %eax,%rax
   31a5b:	movzbl 0x80(%r15,%rax,1),%eax
   31a64:	mov    %al,0x8(%r9,%rbx,1)
   31a69:	mov    -0x60(%rbp),%rdi
   31a6d:	mov    %rdi,%rax
   31a70:	shl    $0x4,%rax
   31a74:	add    %rdi,%rax
   31a77:	lea    (%rdi,%rdi,2),%rcx
   31a7b:	shl    $0x5,%rcx
   31a7f:	add    %rdi,%rcx
   31a82:	shl    $0x7,%rcx
   31a86:	sub    %rcx,%rax
   31a89:	lea    0x20000(%r14,%rax,1),%rax
   31a91:	add    %r11,%rax
   31a94:	mov    -0x48(%rbp),%r10
   31a98:	mov    %r10,%rcx
   31a9b:	shl    $0x8,%rcx
   31a9f:	lea    (%rcx,%r10,8),%rcx
   31aa3:	lea    (%rcx,%r10,4),%rcx
   31aa7:	add    %r10,%rcx
   31aaa:	shl    $0x6,%rcx
   31aae:	lea    (%rcx,%r10,8),%rcx
   31ab2:	sub    %r10,%rcx
   31ab5:	mov    -0x58(%rbp),%rdx
   31ab9:	add    %rdx,%rcx
   31abc:	mov    -0x28(%rbp),%rdx
   31ac0:	add    %rcx,%rdx
   31ac3:	lea    (%rdx,%rax,1),%rcx
   31ac7:	sar    $0x12,%rcx
   31acb:	and    $0x3ff,%ecx
   31ad1:	movslq %ecx,%rcx
   31ad4:	movzbl 0x80(%r15,%rcx,1),%ecx
   31add:	mov    %cl,0x3(%r9,%rbx,1)
   31ae2:	sub    %rdx,%rax
   31ae5:	sar    $0x12,%rax
   31ae9:	and    $0x3ff,%eax
   31aee:	movslq %eax,%rax
   31af1:	movzbl 0x80(%r15,%rax,1),%eax
   31afa:	mov    %al,0x7(%r9,%rbx,1)
   31aff:	lea    (%r10,%r10,4),%rax
   31b03:	shl    $0x2,%rax
   31b07:	lea    (%rax,%r10,2),%rcx
   31b0b:	lea    (%r10,%r10,2),%rax
   31b0f:	mov    %rax,%rdx
   31b12:	shl    $0x9,%rdx
   31b16:	shl    $0xc,%rax
   31b1a:	add    %rdx,%rax
   31b1d:	sub    %rax,%rcx
   31b20:	mov    %r13,%rax
   31b23:	shl    $0xd,%rax
   31b27:	lea    (%rax,%r13,8),%rax
   31b2b:	lea    (%rax,%r13,2),%rax
   31b2f:	lea    0x0(%r13,%rax,1),%rdx
   31b34:	mov    -0x50(%rbp),%rax
   31b38:	imul   $0xffffffffffffd10d,%rax,%rax
   31b3f:	add    %rdx,%rax
   31b42:	add    %rcx,%rax
   31b45:	lea    (%r12,%rax,1),%rdx
   31b49:	lea    (%rsi,%rsi,8),%rax
   31b4d:	shl    $0x4,%rax
   31b51:	lea    (%rax,%rsi,8),%rax
   31b55:	lea    (%rax,%rax,2),%rax
   31b59:	neg    %rax
   31b5c:	add    %rsi,%rax
   31b5f:	shl    $0xe,%rsi
   31b63:	lea    (%rsi,%rax,1),%rcx
   31b67:	lea    (%rdi,%rdi,4),%rax
   31b6b:	shl    $0x4,%rax
   31b6f:	lea    (%rax,%rdi,8),%rax
   31b73:	add    %rdi,%rax
   31b76:	shl    $0x7,%rax
   31b7a:	lea    (%rax,%rdi,2),%rax
   31b7e:	add    %rdi,%rax
   31b81:	sub    %rax,%rcx
   31b84:	lea    (%rcx,%r8,1),%rax
   31b88:	lea    0x20000(%rdx,%rax,1),%rax
   31b90:	sar    $0x12,%rax
   31b94:	and    $0x3ff,%eax
   31b99:	movslq %eax,%rax
   31b9c:	movzbl 0x80(%r15,%rax,1),%eax
   31ba5:	mov    %al,0x4(%r9,%rbx,1)
   31baa:	lea    0x20000(%rcx,%r8,1),%rax
   31bb2:	sub    %rdx,%rax
   31bb5:	sar    $0x12,%rax
   31bb9:	and    $0x3ff,%eax
   31bbe:	movslq %eax,%rax
   31bc1:	movzbl 0x80(%r15,%rax,1),%eax
   31bca:	mov    %al,0x6(%r9,%rbx,1)
   31bcf:	mov    -0x20(%rbp),%rcx
   31bd3:	lea    (%rcx,%rcx,8),%rax
   31bd7:	shl    $0x8,%rax
   31bdb:	lea    (%rax,%rcx,8),%rax
   31bdf:	lea    (%rax,%rcx,4),%rax
   31be3:	add    %rcx,%rax
   31be6:	lea    (%rax,%rax,4),%rcx
   31bea:	mov    -0x18(%rbp),%rax
   31bee:	add    $0x20000,%rax
   31bf4:	sub    %rcx,%rax
   31bf7:	sar    $0x12,%rax
   31bfb:	and    $0x3ff,%eax
   31c00:	movslq %eax,%rax
   31c03:	movzbl 0x80(%rax,%r15,1),%eax
   31c0c:	mov    %al,0x5(%r9,%rbx,1)
   31c11:	mov    -0xa8(%rbp),%rax
   31c18:	lea    0x1(%rax),%esi
   31c1b:	mov    -0x78(%rbp),%rax
   31c1f:	lea    0x20(%rax),%rcx
   31c23:	mov    -0x70(%rbp),%rdi
   31c27:	cmp    $0xa,%esi
   31c2a:	jle    316e5 <jpeg_idct_11x11+0x535>
   31c30:	mov    -0xa0(%rbp),%r15
   31c37:	mov    -0x98(%rbp),%r14
   31c3e:	mov    -0x90(%rbp),%r13
   31c45:	mov    -0x88(%rbp),%r12
   31c4c:	mov    -0x80(%rbp),%rbx
   31c50:	leaveq 
   31c51:	retq   
   31c52:	data16 nopw %cs:0x0(%rax,%rax,1)
   31c5d:	nopl   (%rax)

0000000000031c60 <jpeg_idct_12x12>:
   31c60:	push   %rbp
   31c61:	mov    %rsp,%rbp
   31c64:	sub    $0x230,%rsp
   31c6b:	mov    %r8,-0x70(%rbp)
   31c6f:	mov    %rcx,-0x78(%rbp)
   31c73:	mov    %rbx,-0x88(%rbp)
   31c7a:	mov    %r12,-0x90(%rbp)
   31c81:	mov    %r13,-0x98(%rbp)
   31c88:	mov    %r14,-0xa0(%rbp)
   31c8f:	mov    %r15,-0xa8(%rbp)
   31c96:	mov    0x1a8(%rdi),%rax
   31c9d:	mov    %rax,-0x80(%rbp)
   31ca1:	mov    0x58(%rsi),%rcx
   31ca5:	xor    %ebx,%ebx
   31ca7:	lea    -0x230(%rbp),%rdi
   31cae:	jmpq   320a9 <jpeg_idct_12x12+0x449>
   31cb3:	movswq 0x10(%rcx),%rax
   31cb8:	movswq 0x10(%rdx),%rsi
   31cbd:	imul   %esi,%eax
   31cc0:	movslq %eax,%r8
   31cc3:	mov    %r8,-0x50(%rbp)
   31cc7:	movswq 0x50(%rcx),%rax
   31ccc:	movswq 0x50(%rdx),%rsi
   31cd1:	imul   %esi,%eax
   31cd4:	movslq %eax,%r12
   31cd7:	lea    (%r8,%r12,1),%r10
   31cdb:	movswq 0x70(%rcx),%rax
   31ce0:	movswq 0x70(%rdx),%rsi
   31ce5:	imul   %esi,%eax
   31ce8:	movslq %eax,%rsi
   31ceb:	lea    (%rsi,%r10,1),%r9
   31cef:	lea    (%r9,%r9,2),%rax
   31cf3:	shl    $0x4,%rax
   31cf7:	add    %r9,%rax
   31cfa:	mov    %rax,%r11
   31cfd:	shl    $0x4,%r11
   31d01:	shl    $0x5,%rax
   31d05:	add    %r11,%rax
   31d08:	sub    %r9,%rax
   31d0b:	lea    (%rax,%rax,2),%r11
   31d0f:	mov    %r11,-0x48(%rbp)
   31d13:	mov    %r10,%rax
   31d16:	shl    $0x6,%rax
   31d1a:	lea    (%rax,%r10,2),%rax
   31d1e:	add    %r10,%rax
   31d21:	shl    $0x5,%rax
   31d25:	lea    (%r10,%r10,4),%r9
   31d29:	sub    %r9,%rax
   31d2c:	add    %rax,%r11
   31d2f:	mov    %r11,-0x8(%rbp)
   31d33:	movswq 0x30(%rcx),%rax
   31d38:	movswq 0x30(%rdx),%r9
   31d3d:	imul   %r9d,%eax
   31d41:	movslq %eax,%r9
   31d44:	lea    (%r9,%r9,4),%rax
   31d48:	lea    (%r9,%rax,4),%rax
   31d4c:	shl    $0x9,%rax
   31d50:	mov    %rax,-0x28(%rbp)
   31d54:	lea    (%r9,%r9,2),%r10
   31d58:	shl    $0x4,%r10
   31d5c:	add    %r9,%r10
   31d5f:	mov    %r10,-0x20(%rbp)
   31d63:	sub    %r10,%rax
   31d66:	lea    (%r11,%rax,1),%r10
   31d6a:	lea    (%r8,%r8,8),%r11
   31d6e:	mov    %rbx,-0xb0(%rbp)
   31d75:	mov    %r11,%rax
   31d78:	shl    $0x8,%rax
   31d7c:	sub    %r11,%rax
   31d7f:	add    %rax,%r10
   31d82:	movswq 0x20(%rcx),%rax
   31d87:	movswq 0x20(%rdx),%rbx
   31d8c:	imul   %ebx,%eax
   31d8f:	movslq %eax,%r15
   31d92:	lea    (%r15,%r15,4),%rax
   31d96:	lea    (%r15,%rax,2),%rax
   31d9a:	shl    $0xa,%rax
   31d9e:	mov    %rax,-0x18(%rbp)
   31da2:	lea    (%r15,%r15,1),%rbx
   31da6:	lea    (%r15,%r15,8),%r11
   31daa:	lea    (%rbx,%r11,8),%rbx
   31dae:	mov    %rbx,-0x10(%rbp)
   31db2:	sub    %rbx,%rax
   31db5:	movswq 0x60(%rcx),%rbx
   31dba:	movswq 0x60(%rdx),%r11
   31dbf:	imul   %r11d,%ebx
   31dc3:	movslq %ebx,%rbx
   31dc6:	mov    %rbx,%r11
   31dc9:	shl    $0xd,%r11
   31dcd:	lea    (%rax,%r11,1),%r14
   31dd1:	mov    %r14,-0x40(%rbp)
   31dd5:	movswq 0x40(%rcx),%rax
   31dda:	movswq 0x40(%rdx),%r11
   31ddf:	imul   %r11d,%eax
   31de3:	movslq %eax,%r11
   31de6:	lea    (%r11,%r11,2),%rax
   31dea:	lea    (%r11,%rax,4),%r13
   31dee:	lea    (%r11,%r11,4),%rax
   31df2:	shl    $0x7,%rax
   31df6:	sub    %r13,%rax
   31df9:	shl    $0x4,%rax
   31dfd:	lea    (%r11,%rax,1),%r13
   31e01:	movswq (%rcx),%rax
   31e05:	movswq (%rdx),%r11
   31e09:	imul   %r11d,%eax
   31e0d:	movslq %eax,%rax
   31e10:	mov    %rax,-0x30(%rbp)
   31e14:	mov    %rax,%r11
   31e17:	shl    $0xd,%r11
   31e1b:	mov    %rdx,-0x60(%rbp)
   31e1f:	lea    0x0(%r13,%r11,1),%rdx
   31e24:	mov    %rcx,-0x68(%rbp)
   31e28:	mov    %rdx,-0x38(%rbp)
   31e2c:	add    %r14,%rdx
   31e2f:	lea    0x400(%r10,%rdx,1),%rcx
   31e37:	sar    $0xb,%rcx
   31e3b:	mov    %ecx,(%rdi)
   31e3d:	lea    0x400(%rdx),%rcx
   31e44:	sub    %r10,%rcx
   31e47:	sar    $0xb,%rcx
   31e4b:	mov    %ecx,0x160(%rdi)
   31e51:	mov    %r9,%r14
   31e54:	sub    %r12,%r14
   31e57:	sub    %rsi,%r8
   31e5a:	lea    (%r14,%r8,1),%r10
   31e5e:	mov    %r10,%rdx
   31e61:	shl    $0x4,%rdx
   31e65:	mov    %r10,%rcx
   31e68:	shl    $0x8,%rcx
   31e6c:	add    %rdx,%rcx
   31e6f:	lea    (%rcx,%r10,4),%rcx
   31e73:	add    %r10,%rcx
   31e76:	shl    $0x4,%rcx
   31e7a:	add    %rcx,%r10
   31e7d:	lea    (%r8,%r8,2),%rcx
   31e81:	shl    $0x4,%rcx
   31e85:	add    %r8,%rcx
   31e88:	shl    $0x7,%rcx
   31e8c:	lea    (%r8,%r8,1),%rdx
   31e90:	sub    %rdx,%rcx
   31e93:	lea    (%r10,%rcx,1),%rdx
   31e97:	mov    %r15,%rcx
   31e9a:	sub    %rbx,%rcx
   31e9d:	add    %rcx,%rax
   31ea0:	shl    $0xd,%rax
   31ea4:	lea    0x400(%rdx,%rax,1),%rcx
   31eac:	sar    $0xb,%rcx
   31eb0:	mov    %ecx,0x20(%rdi)
   31eb3:	add    $0x400,%rax
   31eb9:	sub    %rdx,%rax
   31ebc:	sar    $0xb,%rax
   31ec0:	mov    %eax,0x140(%rdi)
   31ec6:	mov    %r9,%rax
   31ec9:	shl    $0x4,%rax
   31ecd:	mov    %r9,%rcx
   31ed0:	shl    $0x8,%rcx
   31ed4:	add    %rcx,%rax
   31ed7:	lea    (%rax,%r9,4),%rax
   31edb:	add    %r9,%rax
   31ede:	shl    $0x4,%rax
   31ee2:	lea    (%r9,%rax,1),%rdx
   31ee6:	mov    %rdx,-0x58(%rbp)
   31eea:	lea    (%r12,%r12,4),%rax
   31eee:	lea    (%r12,%rax,2),%rcx
   31ef2:	lea    (%r12,%r12,2),%rax
   31ef6:	shl    $0x8,%rax
   31efa:	sub    %rcx,%rax
   31efd:	shl    $0x4,%rax
   31f01:	add    %rdx,%rax
   31f04:	lea    (%rsi,%r12,1),%rcx
   31f08:	imul   $0xffffffffffffde8b,%rcx,%rcx
   31f0f:	mov    %rcx,%rdx
   31f12:	sub    %rax,%rdx
   31f15:	mov    -0x8(%rbp),%rax
   31f19:	lea    (%rax,%rdx,1),%r9
   31f1d:	lea    (%rbx,%r15,1),%rdx
   31f21:	shl    $0xd,%rdx
   31f25:	mov    -0x10(%rbp),%r8
   31f29:	lea    (%r8,%rdx,1),%rax
   31f2d:	mov    -0x18(%rbp),%r12
   31f31:	neg    %rax
   31f34:	add    %r12,%rax
   31f37:	add    $0x400,%r11
   31f3e:	sub    %r13,%r11
   31f41:	add    %r11,%rax
   31f44:	lea    (%r9,%rax,1),%r13
   31f48:	sar    $0xb,%r13
   31f4c:	mov    %r13d,0x40(%rdi)
   31f50:	sub    %r9,%rax
   31f53:	sar    $0xb,%rax
   31f57:	mov    %eax,0x120(%rdi)
   31f5d:	mov    -0x28(%rbp),%r9
   31f61:	mov    -0x20(%rbp),%rax
   31f65:	sub    %r9,%rax
   31f68:	mov    -0x48(%rbp),%r9
   31f6c:	lea    (%r9,%rax,1),%r13
   31f70:	lea    (%rsi,%rsi,2),%rax
   31f74:	shl    $0x6,%rax
   31f78:	lea    (%rax,%rsi,8),%rax
   31f7c:	lea    (%rax,%rsi,2),%rax
   31f80:	add    %rsi,%rax
   31f83:	shl    $0x6,%rax
   31f87:	lea    (%rax,%rsi,4),%rax
   31f8b:	lea    (%rax,%rsi,2),%rax
   31f8f:	add    %r13,%rax
   31f92:	lea    (%rax,%rcx,1),%r13
   31f96:	sub    %r12,%r8
   31f99:	lea    (%rdx,%r8,1),%rax
   31f9d:	add    %r11,%rax
   31fa0:	lea    0x0(%r13,%rax,1),%rcx
   31fa5:	sar    $0xb,%rcx
   31fa9:	mov    %ecx,0x60(%rdi)
   31fac:	sub    %r13,%rax
   31faf:	sar    $0xb,%rax
   31fb3:	mov    %eax,0x100(%rdi)
   31fb9:	mov    %r14,%rcx
   31fbc:	shl    $0x2,%rcx
   31fc0:	lea    (%r14,%r14,2),%rax
   31fc4:	lea    (%rcx,%rax,8),%rax
   31fc8:	add    %r14,%rax
   31fcb:	shl    $0x4,%rax
   31fcf:	lea    (%rax,%r14,8),%rax
   31fd3:	add    %r14,%rax
   31fd6:	shl    $0x5,%rax
   31fda:	add    %r14,%rax
   31fdd:	mov    %r10,%rdx
   31fe0:	sub    %rax,%rdx
   31fe3:	sub    %r15,%rbx
   31fe6:	mov    -0x30(%rbp),%rcx
   31fea:	add    %rbx,%rcx
   31fed:	shl    $0xd,%rcx
   31ff1:	lea    0x400(%rdx,%rcx,1),%rdx
   31ff9:	sar    $0xb,%rdx
   31ffd:	mov    %edx,0x80(%rdi)
   32003:	sub    %r10,%rax
   32006:	lea    0x400(%rax,%rcx,1),%rax
   3200e:	sar    $0xb,%rax
   32012:	mov    %eax,0xe0(%rdi)
   32018:	mov    -0x50(%rbp),%rcx
   3201c:	mov    %rcx,%rax
   3201f:	shl    $0x6,%rax
   32023:	lea    (%rax,%rcx,4),%rax
   32027:	add    %rcx,%rax
   3202a:	shl    $0x4,%rax
   3202e:	lea    (%rax,%rcx,4),%rax
   32032:	lea    (%rax,%rax,4),%rcx
   32036:	mov    %rsi,%rax
   32039:	shl    $0x7,%rax
   3203d:	lea    (%rax,%rsi,8),%rax
   32041:	lea    (%rax,%rsi,4),%rax
   32045:	shl    $0xe,%rsi
   32049:	sub    %rax,%rsi
   3204c:	add    %rsi,%rcx
   3204f:	mov    -0x58(%rbp),%rax
   32053:	add    %rcx,%rax
   32056:	sub    %rax,%r9
   32059:	mov    -0x38(%rbp),%rax
   3205d:	add    $0x400,%rax
   32063:	mov    -0x40(%rbp),%rdx
   32067:	mov    %rax,%rcx
   3206a:	sub    %rdx,%rcx
   3206d:	add    %r9,%rcx
   32070:	sar    $0xb,%rcx
   32074:	mov    %ecx,0xa0(%rdi)
   3207a:	lea    (%rdx,%r9,1),%rcx
   3207e:	sub    %rcx,%rax
   32081:	sar    $0xb,%rax
   32085:	mov    %eax,0xc0(%rdi)
   3208b:	mov    -0x68(%rbp),%rax
   3208f:	lea    0x2(%rax),%rcx
   32093:	mov    -0x60(%rbp),%rax
   32097:	lea    0x2(%rax),%rdx
   3209b:	add    $0x4,%rdi
   3209f:	mov    -0xb0(%rbp),%rax
   320a6:	lea    0x1(%rax),%ebx
   320a9:	cmp    $0x7,%ebx
   320ac:	jle    31cb3 <jpeg_idct_12x12+0x53>
   320b2:	mov    -0x70(%rbp),%rax
   320b6:	mov    %eax,%r10d
   320b9:	mov    -0x80(%rbp),%r15
   320bd:	lea    -0x230(%rbp),%rdx
   320c4:	xor    %ecx,%ecx
   320c6:	mov    -0x78(%rbp),%rdi
   320ca:	jmpq   32558 <jpeg_idct_12x12+0x8f8>
   320cf:	movslq 0x4(%rdx),%r8
   320d3:	mov    %r8,-0x18(%rbp)
   320d7:	movslq 0x14(%rdx),%r14
   320db:	lea    (%r8,%r14,1),%r11
   320df:	movslq 0x1c(%rdx),%rsi
   320e3:	lea    (%rsi,%r11,1),%r9
   320e7:	lea    (%r9,%r9,2),%rax
   320eb:	shl    $0x4,%rax
   320ef:	add    %r9,%rax
   320f2:	mov    %rax,%rbx
   320f5:	shl    $0x4,%rbx
   320f9:	shl    $0x5,%rax
   320fd:	add    %rbx,%rax
   32100:	sub    %r9,%rax
   32103:	lea    (%rax,%rax,2),%r9
   32107:	mov    %r9,-0x30(%rbp)
   3210b:	mov    %r11,%rax
   3210e:	shl    $0x6,%rax
   32112:	lea    (%rax,%r11,2),%rax
   32116:	add    %r11,%rax
   32119:	shl    $0x5,%rax
   3211d:	lea    (%r11,%r11,4),%rbx
   32121:	sub    %rbx,%rax
   32124:	lea    (%r9,%rax,1),%rbx
   32128:	mov    %rbx,-0x48(%rbp)
   3212c:	movslq 0xc(%rdx),%r12
   32130:	lea    (%r12,%r12,2),%rax
   32134:	shl    $0x4,%rax
   32138:	lea    (%r12,%rax,1),%r9
   3213c:	mov    %r9,-0x38(%rbp)
   32140:	lea    (%r12,%r12,4),%rax
   32144:	lea    (%r12,%rax,4),%rax
   32148:	shl    $0x9,%rax
   3214c:	mov    %rax,-0x40(%rbp)
   32150:	sub    %r9,%rax
   32153:	lea    (%rbx,%rax,1),%r9
   32157:	lea    (%r8,%r8,8),%rbx
   3215b:	mov    %rbx,%rax
   3215e:	shl    $0x8,%rax
   32162:	sub    %rbx,%rax
   32165:	lea    (%r9,%rax,1),%r11
   32169:	movslq 0x8(%rdx),%rbx
   3216d:	mov    %rbx,-0x68(%rbp)
   32171:	lea    (%rbx,%rbx,4),%rax
   32175:	lea    (%rbx,%rax,2),%rax
   32179:	shl    $0xa,%rax
   3217d:	mov    %rax,-0x58(%rbp)
   32181:	lea    (%rbx,%rbx,1),%r9
   32185:	lea    (%rbx,%rbx,8),%rbx
   32189:	lea    (%r9,%rbx,8),%rbx
   3218d:	mov    %rbx,-0x60(%rbp)
   32191:	sub    %rbx,%rax
   32194:	movslq 0x18(%rdx),%rbx
   32198:	mov    %rbx,-0x70(%rbp)
   3219c:	shl    $0xd,%rbx
   321a0:	lea    (%rax,%rbx,1),%r13
   321a4:	mov    %r13,-0x10(%rbp)
   321a8:	movslq 0x10(%rdx),%r9
   321ac:	lea    (%r9,%r9,2),%rax
   321b0:	lea    (%r9,%rax,4),%rbx
   321b4:	lea    (%r9,%r9,4),%rax
   321b8:	shl    $0x7,%rax
   321bc:	sub    %rbx,%rax
   321bf:	shl    $0x4,%rax
   321c3:	add    %r9,%rax
   321c6:	mov    %rax,-0x50(%rbp)
   321ca:	movslq (%rdx),%rbx
   321cd:	mov    %rbx,-0x28(%rbp)
   321d1:	mov    %rbx,%r9
   321d4:	shl    $0xd,%r9
   321d8:	mov    %rdx,-0x80(%rbp)
   321dc:	mov    %r9,-0x8(%rbp)
   321e0:	lea    (%rax,%r9,1),%rdx
   321e4:	lea    0x0(%r13,%rdx,1),%rax
   321e9:	lea    0x20000(%r11,%rax,1),%rax
   321f1:	sar    $0x12,%rax
   321f5:	and    $0x3ff,%eax
   321fa:	movslq %eax,%rax
   321fd:	movzbl 0x80(%r15,%rax,1),%eax
   32206:	mov    %rcx,-0xb0(%rbp)
   3220d:	movslq %ecx,%rcx
   32210:	mov    (%rdi,%rcx,8),%rdi
   32214:	mov    %al,(%r10,%rdi,1)
   32218:	lea    0x20000(%r13,%rdx,1),%rax
   32220:	sub    %r11,%rax
   32223:	sar    $0x12,%rax
   32227:	and    $0x3ff,%eax
   3222c:	movslq %eax,%rax
   3222f:	movzbl 0x80(%r15,%rax,1),%eax
   32238:	mov    %al,0xb(%r10,%rdi,1)
   3223d:	mov    %r12,%r13
   32240:	sub    %r14,%r13
   32243:	sub    %rsi,%r8
   32246:	lea    0x0(%r13,%r8,1),%rdx
   3224b:	mov    %rdx,%rcx
   3224e:	shl    $0x4,%rcx
   32252:	mov    %rdx,%rax
   32255:	shl    $0x8,%rax
   32259:	add    %rcx,%rax
   3225c:	lea    (%rax,%rdx,4),%rax
   32260:	add    %rdx,%rax
   32263:	shl    $0x4,%rax
   32267:	lea    (%rdx,%rax,1),%r11
   3226b:	lea    (%r8,%r8,2),%rax
   3226f:	shl    $0x4,%rax
   32273:	add    %r8,%rax
   32276:	shl    $0x7,%rax
   3227a:	lea    (%r8,%r8,1),%rcx
   3227e:	sub    %rcx,%rax
   32281:	lea    (%r11,%rax,1),%rcx
   32285:	mov    -0x68(%rbp),%rdx
   32289:	mov    -0x70(%rbp),%r8
   3228d:	mov    %rdx,%rax
   32290:	sub    %r8,%rax
   32293:	add    %rax,%rbx
   32296:	shl    $0xd,%rbx
   3229a:	lea    0x20000(%rcx,%rbx,1),%rax
   322a2:	sar    $0x12,%rax
   322a6:	and    $0x3ff,%eax
   322ab:	movslq %eax,%rax
   322ae:	movzbl 0x80(%r15,%rax,1),%eax
   322b7:	mov    %al,0x1(%r10,%rdi,1)
   322bc:	lea    0x20000(%rbx),%rax
   322c3:	sub    %rcx,%rax
   322c6:	sar    $0x12,%rax
   322ca:	and    $0x3ff,%eax
   322cf:	movslq %eax,%rax
   322d2:	movzbl 0x80(%r15,%rax,1),%eax
   322db:	mov    %al,0xa(%r10,%rdi,1)
   322e0:	mov    %r12,%rcx
   322e3:	shl    $0x4,%rcx
   322e7:	mov    %r12,%rax
   322ea:	shl    $0x8,%rax
   322ee:	add    %rcx,%rax
   322f1:	lea    (%rax,%r12,4),%rax
   322f5:	add    %r12,%rax
   322f8:	shl    $0x4,%rax
   322fc:	lea    (%r12,%rax,1),%rbx
   32300:	mov    %rbx,-0x20(%rbp)
   32304:	lea    (%r14,%r14,4),%rax
   32308:	lea    (%r14,%rax,2),%rcx
   3230c:	lea    (%r14,%r14,2),%rax
   32310:	shl    $0x8,%rax
   32314:	sub    %rcx,%rax
   32317:	shl    $0x4,%rax
   3231b:	add    %rbx,%rax
   3231e:	lea    (%rsi,%r14,1),%rcx
   32322:	imul   $0xffffffffffffde8b,%rcx,%rcx
   32329:	neg    %rax
   3232c:	add    %rcx,%rax
   3232f:	mov    -0x48(%rbp),%rbx
   32333:	lea    (%rbx,%rax,1),%r12
   32337:	lea    (%r8,%rdx,1),%rbx
   3233b:	shl    $0xd,%rbx
   3233f:	mov    -0x60(%rbp),%r8
   32343:	lea    (%r8,%rbx,1),%rax
   32347:	mov    -0x58(%rbp),%r14
   3234b:	neg    %rax
   3234e:	add    %r14,%rax
   32351:	add    $0x20000,%r9
   32358:	mov    -0x50(%rbp),%rdx
   3235c:	sub    %rdx,%r9
   3235f:	add    %r9,%rax
   32362:	lea    (%r12,%rax,1),%rdx
   32366:	sar    $0x12,%rdx
   3236a:	and    $0x3ff,%edx
   32370:	movslq %edx,%rdx
   32373:	movzbl 0x80(%r15,%rdx,1),%edx
   3237c:	mov    %dl,0x2(%r10,%rdi,1)
   32381:	sub    %r12,%rax
   32384:	sar    $0x12,%rax
   32388:	and    $0x3ff,%eax
   3238d:	movslq %eax,%rax
   32390:	movzbl 0x80(%r15,%rax,1),%eax
   32399:	mov    %al,0x9(%r10,%rdi,1)
   3239e:	mov    -0x38(%rbp),%rax
   323a2:	mov    -0x40(%rbp),%rdx
   323a6:	sub    %rdx,%rax
   323a9:	mov    -0x30(%rbp),%rdx
   323ad:	lea    (%rdx,%rax,1),%r12
   323b1:	lea    (%rsi,%rsi,2),%rax
   323b5:	shl    $0x6,%rax
   323b9:	lea    (%rax,%rsi,8),%rax
   323bd:	lea    (%rax,%rsi,2),%rax
   323c1:	add    %rsi,%rax
   323c4:	shl    $0x6,%rax
   323c8:	lea    (%rax,%rsi,4),%rax
   323cc:	lea    (%rax,%rsi,2),%rax
   323d0:	add    %r12,%rax
   323d3:	lea    (%rax,%rcx,1),%r12
   323d7:	sub    %r14,%r8
   323da:	lea    (%rbx,%r8,1),%rax
   323de:	add    %r9,%rax
   323e1:	lea    (%r12,%rax,1),%rcx
   323e5:	sar    $0x12,%rcx
   323e9:	and    $0x3ff,%ecx
   323ef:	movslq %ecx,%rcx
   323f2:	movzbl 0x80(%r15,%rcx,1),%ecx
   323fb:	mov    %cl,0x3(%r10,%rdi,1)
   32400:	sub    %r12,%rax
   32403:	sar    $0x12,%rax
   32407:	and    $0x3ff,%eax
   3240c:	movslq %eax,%rax
   3240f:	movzbl 0x80(%r15,%rax,1),%eax
   32418:	mov    %al,0x8(%r10,%rdi,1)
   3241d:	mov    %r13,%rcx
   32420:	shl    $0x2,%rcx
   32424:	lea    0x0(%r13,%r13,2),%rax
   32429:	lea    (%rcx,%rax,8),%rax
   3242d:	add    %r13,%rax
   32430:	shl    $0x4,%rax
   32434:	lea    (%rax,%r13,8),%rax
   32438:	add    %r13,%rax
   3243b:	shl    $0x5,%rax
   3243f:	lea    0x0(%r13,%rax,1),%rcx
   32444:	mov    %r11,%r8
   32447:	sub    %rcx,%r8
   3244a:	mov    -0x68(%rbp),%rbx
   3244e:	mov    -0x70(%rbp),%rax
   32452:	sub    %rbx,%rax
   32455:	mov    -0x28(%rbp),%rbx
   32459:	add    %rax,%rbx
   3245c:	shl    $0xd,%rbx
   32460:	lea    0x20000(%r8,%rbx,1),%rax
   32468:	sar    $0x12,%rax
   3246c:	and    $0x3ff,%eax
   32471:	movslq %eax,%rax
   32474:	movzbl 0x80(%r15,%rax,1),%eax
   3247d:	mov    %al,0x4(%r10,%rdi,1)
   32482:	sub    %r11,%rcx
   32485:	lea    0x20000(%rcx,%rbx,1),%rax
   3248d:	sar    $0x12,%rax
   32491:	and    $0x3ff,%eax
   32496:	movslq %eax,%rax
   32499:	movzbl 0x80(%r15,%rax,1),%eax
   324a2:	mov    %al,0x7(%r10,%rdi,1)
   324a7:	mov    -0x18(%rbp),%rcx
   324ab:	mov    %rcx,%rax
   324ae:	shl    $0x6,%rax
   324b2:	lea    (%rax,%rcx,4),%rax
   324b6:	add    %rcx,%rax
   324b9:	shl    $0x4,%rax
   324bd:	lea    (%rax,%rcx,4),%rax
   324c1:	lea    (%rax,%rax,4),%rcx
   324c5:	mov    %rsi,%rax
   324c8:	shl    $0x7,%rax
   324cc:	lea    (%rax,%rsi,8),%rax
   324d0:	lea    (%rax,%rsi,4),%rax
   324d4:	shl    $0xe,%rsi
   324d8:	sub    %rax,%rsi
   324db:	lea    (%rcx,%rsi,1),%rax
   324df:	mov    -0x20(%rbp),%rcx
   324e3:	add    %rcx,%rax
   324e6:	sub    %rax,%rdx
   324e9:	mov    -0x8(%rbp),%rcx
   324ed:	mov    -0x50(%rbp),%rax
   324f1:	lea    0x20000(%rax,%rcx,1),%rax
   324f9:	mov    -0x10(%rbp),%rsi
   324fd:	mov    %rax,%rcx
   32500:	sub    %rsi,%rcx
   32503:	add    %rdx,%rcx
   32506:	sar    $0x12,%rcx
   3250a:	and    $0x3ff,%ecx
   32510:	movslq %ecx,%rcx
   32513:	movzbl 0x80(%r15,%rcx,1),%ecx
   3251c:	mov    %cl,0x5(%r10,%rdi,1)
   32521:	lea    (%rsi,%rdx,1),%rcx
   32525:	sub    %rcx,%rax
   32528:	sar    $0x12,%rax
   3252c:	and    $0x3ff,%eax
   32531:	movslq %eax,%rax
   32534:	movzbl 0x80(%rax,%r15,1),%eax
   3253d:	mov    %al,0x6(%r10,%rdi,1)
   32542:	mov    -0xb0(%rbp),%rax
   32549:	lea    0x1(%rax),%ecx
   3254c:	mov    -0x80(%rbp),%rax
   32550:	lea    0x20(%rax),%rdx
   32554:	mov    -0x78(%rbp),%rdi
   32558:	cmp    $0xb,%ecx
   3255b:	jle    320cf <jpeg_idct_12x12+0x46f>
   32561:	mov    -0xa8(%rbp),%r15
   32568:	mov    -0xa0(%rbp),%r14
   3256f:	mov    -0x98(%rbp),%r13
   32576:	mov    -0x90(%rbp),%r12
   3257d:	mov    -0x88(%rbp),%rbx
   32584:	leaveq 
   32585:	retq   
   32586:	nopw   %cs:0x0(%rax,%rax,1)

0000000000032590 <jpeg_idct_13x13>:
   32590:	push   %rbp
   32591:	mov    %rsp,%rbp
   32594:	sub    $0x290,%rsp
   3259b:	mov    %r8,-0xa8(%rbp)
   325a2:	mov    %rcx,-0xb0(%rbp)
   325a9:	mov    %rbx,-0xc0(%rbp)
   325b0:	mov    %r12,-0xc8(%rbp)
   325b7:	mov    %r13,-0xd0(%rbp)
   325be:	mov    %r14,-0xd8(%rbp)
   325c5:	mov    %r15,-0xe0(%rbp)
   325cc:	mov    0x1a8(%rdi),%rax
   325d3:	mov    %rax,-0xb8(%rbp)
   325da:	mov    0x58(%rsi),%rsi
   325de:	mov    %rdx,%r9
   325e1:	xor    %edi,%edi
   325e3:	lea    -0x288(%rbp),%rbx
   325ea:	jmpq   32b5c <jpeg_idct_13x13+0x5cc>
   325ef:	movswq 0x40(%rsi),%rax
   325f4:	movswq 0x40(%r9),%rcx
   325f9:	imul   %ecx,%eax
   325fc:	movslq %eax,%rcx
   325ff:	mov    %rcx,-0x70(%rbp)
   32603:	movswq 0x60(%rsi),%rax
   32608:	movswq 0x60(%r9),%rdx
   3260d:	imul   %edx,%eax
   32610:	movslq %eax,%r11
   32613:	mov    %r11,-0x78(%rbp)
   32617:	lea    (%r11,%rcx,1),%r10
   3261b:	mov    %r10,-0x38(%rbp)
   3261f:	lea    (%r10,%r10,8),%r8
   32623:	lea    (%r10,%r8,4),%rax
   32627:	shl    $0x8,%rax
   3262b:	mov    %rax,-0x18(%rbp)
   3262f:	lea    (%r10,%r10,2),%rdx
   32633:	mov    %rdx,-0x30(%rbp)
   32637:	lea    (%r10,%rdx,2),%rdx
   3263b:	mov    %rdx,-0x28(%rbp)
   3263f:	sub    %rdx,%rax
   32642:	movswq 0x20(%rsi),%rdx
   32647:	movswq 0x20(%r9),%r10
   3264c:	imul   %r10d,%edx
   32650:	movslq %edx,%rdx
   32653:	mov    %rdx,-0x80(%rbp)
   32657:	lea    (%rdx,%rdx,4),%r10
   3265b:	mov    %rdi,-0xe8(%rbp)
   32662:	mov    %r10,-0x58(%rbp)
   32666:	lea    (%rdx,%r10,2),%rdi
   3266a:	shl    $0xa,%rdi
   3266e:	mov    %rdx,%r10
   32671:	shl    $0x4,%r10
   32675:	mov    %r10,-0x8(%rbp)
   32679:	sub    %r10,%rdx
   3267c:	add    %rdi,%rdx
   3267f:	lea    (%rax,%rdx,1),%rdi
   32683:	sub    %r11,%rcx
   32686:	lea    (%rcx,%rcx,2),%rdx
   3268a:	mov    %rdx,%rax
   3268d:	shl    $0x4,%rax
   32691:	add    %rcx,%rax
   32694:	shl    $0x4,%rax
   32698:	lea    (%rax,%rcx,8),%rax
   3269c:	lea    (%rcx,%rax,1),%r10
   326a0:	movswq (%rsi),%rax
   326a4:	movswq (%r9),%r11
   326a8:	imul   %r11d,%eax
   326ac:	movslq %eax,%r11
   326af:	shl    $0xd,%r11
   326b3:	mov    %r11,-0x88(%rbp)
   326ba:	lea    (%r11,%r10,1),%rax
   326be:	mov    %rax,-0x10(%rbp)
   326c2:	lea    (%rax,%rdi,1),%r13
   326c6:	movswq 0x50(%rsi),%rax
   326cb:	movswq 0x50(%r9),%rdi
   326d0:	imul   %edi,%eax
   326d3:	movslq %eax,%r15
   326d6:	movswq 0x10(%rsi),%rax
   326db:	movswq 0x10(%r9),%rdi
   326e0:	imul   %edi,%eax
   326e3:	movslq %eax,%r10
   326e6:	mov    %r10,-0x40(%rbp)
   326ea:	lea    (%r15,%r10,1),%rdi
   326ee:	lea    (%rdi,%rdi,8),%rax
   326f2:	shl    $0x4,%rax
   326f6:	lea    (%rax,%rdi,4),%rax
   326fa:	add    %rdi,%rax
   326fd:	shl    $0x6,%rax
   32701:	add    %rdi,%rdi
   32704:	sub    %rdi,%rax
   32707:	mov    %rax,-0x20(%rbp)
   3270b:	movswq 0x30(%rsi),%rdi
   32710:	movswq 0x30(%r9),%r12
   32715:	imul   %r12d,%edi
   32719:	movslq %edi,%r14
   3271c:	mov    %r14,-0x60(%rbp)
   32720:	lea    (%r14,%r10,1),%r12
   32724:	lea    (%r12,%r12,4),%rdi
   32728:	lea    (%r12,%rdi,4),%rdi
   3272c:	shl    $0x5,%rdi
   32730:	lea    (%rdi,%r12,4),%rdi
   32734:	add    %r12,%rdi
   32737:	shl    $0x4,%rdi
   3273b:	lea    (%rax,%rdi,1),%r12
   3273f:	mov    %rsi,-0xa0(%rbp)
   32746:	movswq 0x70(%rsi),%rax
   3274b:	mov    %r9,-0x90(%rbp)
   32752:	movswq 0x70(%r9),%rsi
   32757:	imul   %esi,%eax
   3275a:	movslq %eax,%r9
   3275d:	lea    (%r9,%r10,1),%rsi
   32761:	mov    %rsi,-0x68(%rbp)
   32765:	mov    %rsi,%rax
   32768:	shl    $0x4,%rax
   3276c:	sub    %rsi,%rax
   3276f:	shl    $0x9,%rax
   32773:	lea    (%rax,%rsi,2),%rsi
   32777:	add    %rsi,%r12
   3277a:	mov    %r10,%rax
   3277d:	shl    $0x9,%rax
   32781:	lea    (%rax,%r10,4),%rax
   32785:	add    %r10,%rax
   32788:	shl    $0x5,%rax
   3278c:	lea    (%rax,%r10,4),%rax
   32790:	add    %r10,%rax
   32793:	mov    %r12,%r10
   32796:	sub    %rax,%r10
   32799:	lea    0x400(%r13,%r10,1),%r10
   327a1:	sar    $0xb,%r10
   327a5:	mov    %r10d,(%rbx)
   327a8:	sub    %r12,%rax
   327ab:	lea    0x400(%r13,%rax,1),%rax
   327b3:	sar    $0xb,%rax
   327b7:	mov    %eax,0x180(%rbx)
   327bd:	lea    (%r15,%r14,1),%r10
   327c1:	imul   $0xfffffffffffff52b,%r10,%r10
   327c8:	lea    (%r14,%r14,2),%rax
   327cc:	shl    $0x5,%rax
   327d0:	lea    (%rax,%r14,8),%rax
   327d4:	lea    (%rax,%r14,2),%rax
   327d8:	add    %r14,%rax
   327db:	shl    $0x6,%rax
   327df:	lea    (%rax,%r14,8),%rax
   327e3:	lea    (%rax,%r14,2),%rax
   327e7:	add    %r14,%rax
   327ea:	add    %r10,%rax
   327ed:	lea    (%rax,%rdi,1),%r13
   327f1:	lea    (%r9,%r14,1),%rdi
   327f5:	lea    (%rdi,%rdi,8),%rax
   327f9:	shl    $0x4,%rax
   327fd:	lea    (%rax,%rdi,4),%rax
   32801:	add    %rdi,%rax
   32804:	shl    $0x6,%rax
   32808:	lea    (%rdi,%rdi,1),%r12
   3280c:	sub    %rax,%r12
   3280f:	lea    0x0(%r13,%r12,1),%r14
   32814:	shl    $0x5,%rdx
   32818:	lea    (%rdx,%rcx,8),%rax
   3281c:	lea    (%rax,%rcx,2),%rax
   32820:	lea    (%rcx,%rax,1),%rdx
   32824:	mov    %rcx,%rax
   32827:	shl    $0xc,%rax
   3282b:	sub    %rdx,%rax
   3282e:	lea    (%r11,%rax,1),%rdx
   32832:	mov    %rdx,-0x48(%rbp)
   32836:	mov    %r8,%rax
   32839:	shl    $0x5,%rax
   3283d:	shl    $0x8,%r8
   32841:	add    %rax,%r8
   32844:	mov    %r8,-0x50(%rbp)
   32848:	mov    -0x80(%rbp),%r13
   3284c:	mov    %r13,%rdi
   3284f:	shl    $0x8,%rdi
   32853:	mov    -0x8(%rbp),%rax
   32857:	add    %rdi,%rax
   3285a:	sub    %r13,%rax
   3285d:	shl    $0x5,%rax
   32861:	sub    %r8,%rax
   32864:	add    %rax,%rdx
   32867:	lea    0x400(%r14,%rdx,1),%rax
   3286f:	sar    $0xb,%rax
   32873:	mov    %eax,0x20(%rbx)
   32876:	lea    0x400(%rdx),%rax
   3287d:	sub    %r14,%rax
   32880:	sar    $0xb,%rax
   32884:	mov    %eax,0x160(%rbx)
   3288a:	mov    -0x18(%rbp),%rdx
   3288e:	mov    -0x28(%rbp),%rax
   32892:	mov    %rax,%rdi
   32895:	sub    %rdx,%rdi
   32898:	mov    %r13,%rdx
   3289b:	shl    $0xc,%rdx
   3289f:	lea    (%rdx,%r13,8),%rdx
   328a3:	lea    (%rdx,%r13,4),%rdx
   328a7:	add    %rdx,%rdi
   328aa:	mov    -0x10(%rbp),%rdx
   328ae:	lea    (%rdx,%rdi,1),%r14
   328b2:	lea    (%r15,%r15,4),%rdx
   328b6:	shl    $0x5,%rdx
   328ba:	add    %r15,%rdx
   328bd:	mov    %rdx,%rdi
   328c0:	shl    $0x4,%rdi
   328c4:	shl    $0x6,%rdx
   328c8:	add    %rdi,%rdx
   328cb:	neg    %rdx
   328ce:	add    %r15,%rdx
   328d1:	lea    (%r10,%rdx,1),%rdi
   328d5:	mov    -0x20(%rbp),%rdx
   328d9:	add    %rdx,%rdi
   328dc:	lea    (%r9,%r15,1),%r8
   328e0:	lea    (%r8,%r8,4),%rdx
   328e4:	lea    (%r8,%rdx,4),%rdx
   328e8:	shl    $0x8,%rdx
   328ec:	lea    (%rdx,%r8,8),%r8
   328f0:	mov    %rdi,%rdx
   328f3:	sub    %r8,%rdx
   328f6:	lea    0x400(%r14,%rdx,1),%rdx
   328fe:	sar    $0xb,%rdx
   32902:	mov    %edx,0x40(%rbx)
   32905:	mov    %r8,%rdx
   32908:	sub    %rdi,%rdx
   3290b:	lea    0x400(%r14,%rdx,1),%rdx
   32913:	sar    $0xb,%rdx
   32917:	mov    %edx,0x140(%rbx)
   3291d:	mov    -0x30(%rbp),%rdx
   32921:	shl    $0x2,%rdx
   32925:	mov    -0x38(%rbp),%rdi
   32929:	lea    (%rdx,%rdi,2),%r14
   3292d:	shl    $0x9,%rax
   32931:	mov    -0x58(%rbp),%rdi
   32935:	mov    %rdi,%rdx
   32938:	shl    $0x4,%rdx
   3293c:	lea    (%rdx,%r13,8),%rdx
   32940:	sub    %r13,%rdx
   32943:	shl    $0x4,%rdx
   32947:	lea    (%rdx,%r13,4),%rdx
   3294b:	add    %rax,%rdx
   3294e:	mov    %r14,%r10
   32951:	sub    %rdx,%r10
   32954:	mov    %rcx,%rdx
   32957:	shl    $0x9,%rdx
   3295b:	lea    (%rdx,%rcx,2),%rdx
   3295f:	shl    $0xd,%rcx
   32963:	sub    %rcx,%rdx
   32966:	lea    0x400(%r11,%rdx,1),%r11
   3296e:	lea    (%r11,%r10,1),%rdx
   32972:	mov    %r9,%rcx
   32975:	shl    $0x5,%rcx
   32979:	lea    (%rcx,%r9,2),%rcx
   3297d:	add    %r9,%rcx
   32980:	shl    $0x5,%rcx
   32984:	lea    (%rcx,%r9,8),%rcx
   32988:	add    %r9,%rcx
   3298b:	shl    $0x4,%rcx
   3298f:	lea    (%rcx,%r9,4),%rcx
   32993:	add    %r12,%rcx
   32996:	add    %rcx,%rsi
   32999:	mov    %rsi,%rcx
   3299c:	sub    %r8,%rcx
   3299f:	add    %rdx,%rcx
   329a2:	sar    $0xb,%rcx
   329a6:	mov    %ecx,0x60(%rbx)
   329a9:	sub    %rsi,%r8
   329ac:	lea    (%rdx,%r8,1),%rcx
   329b0:	sar    $0xb,%rcx
   329b4:	mov    %ecx,0x120(%rbx)
   329ba:	mov    -0x60(%rbp),%rdx
   329be:	mov    %r15,%rsi
   329c1:	sub    %rdx,%rsi
   329c4:	mov    %rsi,%rcx
   329c7:	shl    $0x4,%rcx
   329cb:	mov    %rdx,%r8
   329ce:	sub    %r15,%r8
   329d1:	add    %r8,%rcx
   329d4:	shl    $0x9,%rcx
   329d8:	lea    (%rcx,%rsi,2),%r8
   329dc:	mov    -0x68(%rbp),%rsi
   329e0:	lea    (%rsi,%rsi,4),%rcx
   329e4:	shl    $0x5,%rcx
   329e8:	lea    (%rcx,%rsi,8),%rcx
   329ec:	lea    (%rcx,%rsi,4),%rcx
   329f0:	add    %rsi,%rcx
   329f3:	shl    $0x4,%rcx
   329f7:	lea    (%rcx,%rsi,4),%rcx
   329fb:	lea    (%rsi,%rcx,1),%r12
   329ff:	mov    -0x40(%rbp),%rsi
   32a03:	lea    (%rsi,%rsi,4),%rcx
   32a07:	shl    $0x5,%rcx
   32a0b:	lea    (%rcx,%rsi,2),%rcx
   32a0f:	add    %rsi,%rcx
   32a12:	shl    $0x4,%rcx
   32a16:	lea    (%rcx,%rsi,2),%rcx
   32a1a:	add    %rsi,%rcx
   32a1d:	lea    (%r12,%rcx,1),%rsi
   32a21:	mov    %rdx,%r10
   32a24:	shl    $0x4,%r10
   32a28:	mov    %rdx,%rcx
   32a2b:	shl    $0x8,%rcx
   32a2f:	add    %r10,%rcx
   32a32:	lea    (%rcx,%rdx,4),%rcx
   32a36:	lea    (%rcx,%rdx,2),%rcx
   32a3a:	shl    $0xc,%rdx
   32a3e:	sub    %rdx,%rcx
   32a41:	add    %rsi,%rcx
   32a44:	lea    (%r8,%rcx,1),%rdx
   32a48:	sub    %r14,%rax
   32a4b:	mov    %r13,%rcx
   32a4e:	imul   $0xffffffffffffe64b,%rcx,%rcx
   32a55:	add    %rcx,%rax
   32a58:	add    %r11,%rax
   32a5b:	lea    (%rdx,%rax,1),%rcx
   32a5f:	sar    $0xb,%rcx
   32a63:	mov    %ecx,0x80(%rbx)
   32a69:	sub    %rdx,%rax
   32a6c:	sar    $0xb,%rax
   32a70:	mov    %eax,0x100(%rbx)
   32a76:	mov    %r15,%rcx
   32a79:	shl    $0x4,%rcx
   32a7d:	mov    %r15,%rax
   32a80:	shl    $0xa,%rax
   32a84:	add    %rcx,%rax
   32a87:	lea    (%rax,%r15,8),%rax
   32a8b:	lea    (%rax,%r15,2),%rax
   32a8f:	lea    (%rax,%rax,2),%rax
   32a93:	lea    (%r8,%rax,1),%rcx
   32a97:	lea    (%r9,%r9,2),%rax
   32a9b:	lea    (%r9,%rax,2),%rax
   32a9f:	shl    $0x5,%rax
   32aa3:	sub    %r9,%rax
   32aa6:	shl    $0x6,%rax
   32aaa:	add    %r9,%rax
   32aad:	sub    %rax,%rcx
   32ab0:	lea    (%rcx,%r12,1),%rdx
   32ab4:	shl    $0x7,%rdi
   32ab8:	lea    0x0(%r13,%rdi,1),%rax
   32abd:	shl    $0x4,%rax
   32ac1:	lea    (%rax,%r13,2),%rcx
   32ac5:	mov    -0x50(%rbp),%rax
   32ac9:	sub    %rcx,%rax
   32acc:	mov    -0x48(%rbp),%rcx
   32ad0:	add    %rax,%rcx
   32ad3:	lea    0x400(%rdx,%rcx,1),%rax
   32adb:	sar    $0xb,%rax
   32adf:	mov    %eax,0xa0(%rbx)
   32ae5:	lea    0x400(%rcx),%rax
   32aec:	sub    %rdx,%rax
   32aef:	sar    $0xb,%rax
   32af3:	mov    %eax,0xe0(%rbx)
   32af9:	mov    -0x78(%rbp),%rax
   32afd:	lea    (%rax,%r13,1),%rcx
   32b01:	mov    -0x70(%rbp),%rax
   32b05:	sub    %rcx,%rax
   32b08:	lea    (%rax,%rax,8),%rcx
   32b0c:	shl    $0x8,%rcx
   32b10:	lea    (%rcx,%rax,8),%rcx
   32b14:	lea    (%rcx,%rax,4),%rcx
   32b18:	add    %rcx,%rax
   32b1b:	lea    (%rax,%rax,4),%rcx
   32b1f:	mov    -0x88(%rbp),%rax
   32b26:	lea    0x400(%rcx,%rax,1),%rax
   32b2e:	sar    $0xb,%rax
   32b32:	mov    %eax,0xc0(%rbx)
   32b38:	mov    -0xa0(%rbp),%rax
   32b3f:	lea    0x2(%rax),%rsi
   32b43:	mov    -0x90(%rbp),%rax
   32b4a:	lea    0x2(%rax),%r9
   32b4e:	add    $0x4,%rbx
   32b52:	mov    -0xe8(%rbp),%rax
   32b59:	lea    0x1(%rax),%edi
   32b5c:	cmp    $0x7,%edi
   32b5f:	jle    325ef <jpeg_idct_13x13+0x5f>
   32b65:	mov    -0xa8(%rbp),%rax
   32b6c:	mov    %eax,%r9d
   32b6f:	mov    -0xb8(%rbp),%r15
   32b76:	lea    -0x288(%rbp),%rsi
   32b7d:	xor    %ecx,%ecx
   32b7f:	mov    -0xb0(%rbp),%rdx
   32b86:	jmpq   331b5 <jpeg_idct_13x13+0xc25>
   32b8b:	movslq 0x10(%rsi),%r8
   32b8f:	mov    %r8,-0x10(%rbp)
   32b93:	movslq 0x18(%rsi),%r11
   32b97:	mov    %r11,-0x18(%rbp)
   32b9b:	lea    (%r11,%r8,1),%rbx
   32b9f:	mov    %rbx,-0x48(%rbp)
   32ba3:	lea    (%rbx,%rbx,2),%rax
   32ba7:	mov    %rax,-0x40(%rbp)
   32bab:	lea    (%rbx,%rax,2),%rdi
   32baf:	mov    %rdi,-0x70(%rbp)
   32bb3:	lea    (%rbx,%rbx,8),%rax
   32bb7:	mov    %rax,-0x98(%rbp)
   32bbe:	lea    (%rbx,%rax,4),%rax
   32bc2:	shl    $0x8,%rax
   32bc6:	mov    %rax,-0x78(%rbp)
   32bca:	sub    %rdi,%rax
   32bcd:	movslq 0x8(%rsi),%rbx
   32bd1:	mov    %rbx,-0x90(%rbp)
   32bd8:	lea    (%rbx,%rbx,4),%rdi
   32bdc:	mov    %rdi,-0x50(%rbp)
   32be0:	lea    (%rbx,%rdi,2),%rdi
   32be4:	shl    $0xa,%rdi
   32be8:	mov    %rbx,%r10
   32beb:	shl    $0x4,%r10
   32bef:	mov    %r10,-0x88(%rbp)
   32bf6:	sub    %r10,%rbx
   32bf9:	add    %rbx,%rdi
   32bfc:	lea    (%rax,%rdi,1),%rbx
   32c00:	sub    %r11,%r8
   32c03:	mov    %r8,-0xa8(%rbp)
   32c0a:	lea    (%r8,%r8,2),%rdi
   32c0e:	mov    %rdi,%rax
   32c11:	shl    $0x4,%rax
   32c15:	add    %r8,%rax
   32c18:	shl    $0x4,%rax
   32c1c:	lea    (%rax,%r8,8),%rax
   32c20:	add    %rax,%r8
   32c23:	movslq (%rsi),%rax
   32c26:	shl    $0xd,%rax
   32c2a:	mov    %rax,-0xa0(%rbp)
   32c31:	add    %r8,%rax
   32c34:	mov    %rax,-0x68(%rbp)
   32c38:	lea    (%rbx,%rax,1),%r10
   32c3c:	movslq 0x14(%rsi),%r14
   32c40:	movslq 0x4(%rsi),%r8
   32c44:	mov    %r8,-0x30(%rbp)
   32c48:	lea    (%r14,%r8,1),%rbx
   32c4c:	lea    (%rbx,%rbx,8),%rax
   32c50:	shl    $0x4,%rax
   32c54:	lea    (%rax,%rbx,4),%rax
   32c58:	add    %rbx,%rax
   32c5b:	shl    $0x6,%rax
   32c5f:	add    %rbx,%rbx
   32c62:	sub    %rbx,%rax
   32c65:	mov    %rax,-0x80(%rbp)
   32c69:	movslq 0xc(%rsi),%r13
   32c6d:	mov    %r13,-0x38(%rbp)
   32c71:	lea    0x0(%r13,%r8,1),%r11
   32c76:	lea    (%r11,%r11,4),%rbx
   32c7a:	lea    (%r11,%rbx,4),%rbx
   32c7e:	shl    $0x5,%rbx
   32c82:	lea    (%rbx,%r11,4),%rbx
   32c86:	add    %r11,%rbx
   32c89:	shl    $0x4,%rbx
   32c8d:	lea    (%rax,%rbx,1),%r11
   32c91:	mov    %rsi,-0xb8(%rbp)
   32c98:	movslq 0x1c(%rsi),%r12
   32c9c:	lea    (%r12,%r8,1),%rsi
   32ca0:	mov    %rsi,-0x28(%rbp)
   32ca4:	mov    %rsi,%rax
   32ca7:	shl    $0x4,%rax
   32cab:	sub    %rsi,%rax
   32cae:	shl    $0x9,%rax
   32cb2:	lea    (%rax,%rsi,2),%rax
   32cb6:	mov    %rax,-0x60(%rbp)
   32cba:	add    %rax,%r11
   32cbd:	mov    %r8,%rax
   32cc0:	shl    $0x9,%rax
   32cc4:	lea    (%rax,%r8,4),%rax
   32cc8:	add    %r8,%rax
   32ccb:	shl    $0x5,%rax
   32ccf:	lea    (%rax,%r8,4),%rax
   32cd3:	lea    (%r8,%rax,1),%rsi
   32cd7:	mov    %r11,%rax
   32cda:	sub    %rsi,%rax
   32cdd:	lea    0x20000(%rax,%r10,1),%rax
   32ce5:	sar    $0x12,%rax
   32ce9:	and    $0x3ff,%eax
   32cee:	movslq %eax,%rax
   32cf1:	movzbl 0x80(%r15,%rax,1),%eax
   32cfa:	mov    %rcx,-0xe8(%rbp)
   32d01:	movslq %ecx,%rcx
   32d04:	mov    (%rdx,%rcx,8),%r8
   32d08:	mov    %al,(%r9,%r8,1)
   32d0c:	sub    %r11,%rsi
   32d0f:	lea    0x20000(%rsi,%r10,1),%rax
   32d17:	sar    $0x12,%rax
   32d1b:	and    $0x3ff,%eax
   32d20:	movslq %eax,%rax
   32d23:	movzbl 0x80(%r15,%rax,1),%eax
   32d2c:	mov    %al,0xc(%r9,%r8,1)
   32d31:	lea    (%r14,%r13,1),%rdx
   32d35:	imul   $0xfffffffffffff52b,%rdx,%rdx
   32d3c:	lea    0x0(%r13,%r13,2),%rax
   32d41:	shl    $0x5,%rax
   32d45:	lea    (%rax,%r13,8),%rax
   32d49:	lea    (%rax,%r13,2),%rax
   32d4d:	add    %r13,%rax
   32d50:	shl    $0x6,%rax
   32d54:	lea    (%rax,%r13,8),%rax
   32d58:	lea    (%rax,%r13,2),%rax
   32d5c:	add    %r13,%rax
   32d5f:	add    %rdx,%rax
   32d62:	lea    (%rax,%rbx,1),%rsi
   32d66:	lea    (%r12,%r13,1),%rbx
   32d6a:	lea    (%rbx,%rbx,8),%rax
   32d6e:	shl    $0x4,%rax
   32d72:	lea    (%rax,%rbx,4),%rax
   32d76:	lea    (%rbx,%rax,1),%rcx
   32d7a:	shl    $0x6,%rcx
   32d7e:	lea    (%rbx,%rbx,1),%rax
   32d82:	sub    %rcx,%rax
   32d85:	mov    %rax,-0x58(%rbp)
   32d89:	add    %rax,%rsi
   32d8c:	shl    $0x5,%rdi
   32d90:	mov    -0xa8(%rbp),%rbx
   32d97:	lea    (%rdi,%rbx,8),%rax
   32d9b:	lea    (%rax,%rbx,2),%rax
   32d9f:	lea    (%rbx,%rax,1),%rcx
   32da3:	mov    %rbx,%rax
   32da6:	shl    $0xc,%rax
   32daa:	sub    %rcx,%rax
   32dad:	mov    -0xa0(%rbp),%r10
   32db4:	lea    (%r10,%rax,1),%rdi
   32db8:	mov    %rdi,-0x20(%rbp)
   32dbc:	mov    -0x98(%rbp),%rax
   32dc3:	mov    %rax,%rcx
   32dc6:	shl    $0x5,%rcx
   32dca:	shl    $0x8,%rax
   32dce:	add    %rax,%rcx
   32dd1:	mov    %rcx,-0x98(%rbp)
   32dd8:	mov    -0x90(%rbp),%r13
   32ddf:	mov    %r13,%rax
   32de2:	shl    $0x8,%rax
   32de6:	mov    -0x88(%rbp),%r11
   32ded:	add    %r11,%rax
   32df0:	sub    %r13,%rax
   32df3:	shl    $0x5,%rax
   32df7:	sub    %rcx,%rax
   32dfa:	lea    (%rax,%rdi,1),%rcx
   32dfe:	lea    0x20000(%rsi,%rcx,1),%rcx
   32e06:	sar    $0x12,%rcx
   32e0a:	and    $0x3ff,%ecx
   32e10:	movslq %ecx,%rcx
   32e13:	movzbl 0x80(%r15,%rcx,1),%ecx
   32e1c:	mov    %cl,0x1(%r9,%r8,1)
   32e21:	lea    0x20000(%rax,%rdi,1),%rax
   32e29:	sub    %rsi,%rax
   32e2c:	sar    $0x12,%rax
   32e30:	and    $0x3ff,%eax
   32e35:	movslq %eax,%rax
   32e38:	movzbl 0x80(%r15,%rax,1),%eax
   32e41:	mov    %al,0xb(%r9,%r8,1)
   32e46:	mov    -0x70(%rbp),%rcx
   32e4a:	mov    -0x78(%rbp),%rax
   32e4e:	neg    %rax
   32e51:	add    %rcx,%rax
   32e54:	mov    %r13,%rsi
   32e57:	shl    $0xc,%rsi
   32e5b:	lea    (%rsi,%r13,8),%rsi
   32e5f:	lea    (%rsi,%r13,4),%rsi
   32e63:	add    %rsi,%rax
   32e66:	mov    -0x68(%rbp),%rsi
   32e6a:	lea    (%rsi,%rax,1),%rdi
   32e6e:	lea    (%r14,%r14,4),%rax
   32e72:	shl    $0x5,%rax
   32e76:	add    %r14,%rax
   32e79:	mov    %rax,%rsi
   32e7c:	shl    $0x4,%rsi
   32e80:	shl    $0x6,%rax
   32e84:	add    %rsi,%rax
   32e87:	neg    %rax
   32e8a:	add    %r14,%rax
   32e8d:	add    %rdx,%rax
   32e90:	mov    -0x80(%rbp),%rdx
   32e94:	lea    (%rdx,%rax,1),%rsi
   32e98:	lea    (%r12,%r14,1),%rdx
   32e9c:	lea    (%rdx,%rdx,4),%rax
   32ea0:	lea    (%rdx,%rax,4),%rax
   32ea4:	shl    $0x8,%rax
   32ea8:	lea    (%rax,%rdx,8),%rdx
   32eac:	mov    %rsi,%rax
   32eaf:	sub    %rdx,%rax
   32eb2:	lea    0x20000(%rdi,%rax,1),%rax
   32eba:	sar    $0x12,%rax
   32ebe:	and    $0x3ff,%eax
   32ec3:	movslq %eax,%rax
   32ec6:	movzbl 0x80(%r15,%rax,1),%eax
   32ecf:	mov    %al,0x2(%r9,%r8,1)
   32ed4:	mov    %rdx,%rax
   32ed7:	sub    %rsi,%rax
   32eda:	lea    0x20000(%rdi,%rax,1),%rax
   32ee2:	sar    $0x12,%rax
   32ee6:	and    $0x3ff,%eax
   32eeb:	movslq %eax,%rax
   32eee:	movzbl 0x80(%r15,%rax,1),%eax
   32ef7:	mov    %al,0xa(%r9,%r8,1)
   32efc:	mov    -0x40(%rbp),%rax
   32f00:	shl    $0x2,%rax
   32f04:	mov    -0x48(%rbp),%rsi
   32f08:	lea    (%rax,%rsi,2),%r11
   32f0c:	shl    $0x9,%rcx
   32f10:	mov    -0x50(%rbp),%rsi
   32f14:	mov    %rsi,%rax
   32f17:	shl    $0x4,%rax
   32f1b:	lea    (%rax,%r13,8),%rax
   32f1f:	sub    %r13,%rax
   32f22:	shl    $0x4,%rax
   32f26:	lea    (%rax,%r13,4),%rax
   32f2a:	add    %rcx,%rax
   32f2d:	mov    %r11,%rdi
   32f30:	sub    %rax,%rdi
   32f33:	mov    %rbx,%rax
   32f36:	shl    $0x9,%rax
   32f3a:	lea    (%rax,%rbx,2),%rax
   32f3e:	shl    $0xd,%rbx
   32f42:	sub    %rbx,%rax
   32f45:	lea    0x20000(%r10,%rax,1),%r10
   32f4d:	lea    (%r10,%rdi,1),%rbx
   32f51:	mov    %r12,%rax
   32f54:	shl    $0x5,%rax
   32f58:	lea    (%rax,%r12,2),%rax
   32f5c:	add    %r12,%rax
   32f5f:	shl    $0x5,%rax
   32f63:	lea    (%rax,%r12,8),%rax
   32f67:	add    %r12,%rax
   32f6a:	shl    $0x4,%rax
   32f6e:	lea    (%rax,%r12,4),%rax
   32f72:	mov    -0x58(%rbp),%rdi
   32f76:	add    %rdi,%rax
   32f79:	mov    -0x60(%rbp),%rdi
   32f7d:	add    %rax,%rdi
   32f80:	mov    %rdi,%rax
   32f83:	sub    %rdx,%rax
   32f86:	add    %rbx,%rax
   32f89:	sar    $0x12,%rax
   32f8d:	and    $0x3ff,%eax
   32f92:	movslq %eax,%rax
   32f95:	movzbl 0x80(%r15,%rax,1),%eax
   32f9e:	mov    %al,0x3(%r9,%r8,1)
   32fa3:	sub    %rdi,%rdx
   32fa6:	lea    (%rbx,%rdx,1),%rax
   32faa:	sar    $0x12,%rax
   32fae:	and    $0x3ff,%eax
   32fb3:	movslq %eax,%rax
   32fb6:	movzbl 0x80(%r15,%rax,1),%eax
   32fbf:	mov    %al,0x9(%r9,%r8,1)
   32fc4:	sub    %r11,%rcx
   32fc7:	mov    %r13,%rax
   32fca:	imul   $0xffffffffffffe64b,%rax,%rax
   32fd1:	add    %rcx,%rax
   32fd4:	add    %r10,%rax
   32fd7:	mov    -0x38(%rbp),%rcx
   32fdb:	mov    %r14,%rbx
   32fde:	sub    %rcx,%rbx
   32fe1:	mov    %rbx,%rdi
   32fe4:	shl    $0x4,%rdi
   32fe8:	mov    %rcx,%rdx
   32feb:	sub    %r14,%rdx
   32fee:	add    %rdi,%rdx
   32ff1:	shl    $0x9,%rdx
   32ff5:	lea    (%rdx,%rbx,2),%r11
   32ff9:	mov    -0x28(%rbp),%rdi
   32ffd:	lea    (%rdi,%rdi,4),%rdx
   33001:	shl    $0x5,%rdx
   33005:	lea    (%rdx,%rdi,8),%rdx
   33009:	lea    (%rdx,%rdi,4),%rdx
   3300d:	add    %rdi,%rdx
   33010:	shl    $0x4,%rdx
   33014:	lea    (%rdx,%rdi,4),%rdx
   33018:	lea    (%rdi,%rdx,1),%r10
   3301c:	mov    -0x30(%rbp),%rdi
   33020:	lea    (%rdi,%rdi,4),%rdx
   33024:	shl    $0x5,%rdx
   33028:	lea    (%rdx,%rdi,2),%rdx
   3302c:	add    %rdi,%rdx
   3302f:	shl    $0x4,%rdx
   33033:	lea    (%rdx,%rdi,2),%rdx
   33037:	add    %rdi,%rdx
   3303a:	lea    (%r10,%rdx,1),%rbx
   3303e:	mov    %rcx,%rdi
   33041:	shl    $0x4,%rdi
   33045:	mov    %rcx,%rdx
   33048:	shl    $0x8,%rdx
   3304c:	add    %rdi,%rdx
   3304f:	lea    (%rdx,%rcx,4),%rdx
   33053:	lea    (%rdx,%rcx,2),%rdx
   33057:	shl    $0xc,%rcx
   3305b:	sub    %rcx,%rdx
   3305e:	lea    (%rbx,%rdx,1),%rcx
   33062:	lea    (%r11,%rcx,1),%rdx
   33066:	lea    (%rdx,%rax,1),%rcx
   3306a:	sar    $0x12,%rcx
   3306e:	and    $0x3ff,%ecx
   33074:	movslq %ecx,%rcx
   33077:	movzbl 0x80(%r15,%rcx,1),%ecx
   33080:	mov    %cl,0x4(%r9,%r8,1)
   33085:	sub    %rdx,%rax
   33088:	sar    $0x12,%rax
   3308c:	and    $0x3ff,%eax
   33091:	movslq %eax,%rax
   33094:	movzbl 0x80(%r15,%rax,1),%eax
   3309d:	mov    %al,0x8(%r9,%r8,1)
   330a2:	mov    %r14,%rcx
   330a5:	shl    $0x4,%rcx
   330a9:	mov    %r14,%rax
   330ac:	shl    $0xa,%rax
   330b0:	add    %rcx,%rax
   330b3:	lea    (%rax,%r14,8),%rax
   330b7:	lea    (%rax,%r14,2),%rax
   330bb:	lea    (%rax,%rax,2),%rax
   330bf:	lea    (%r11,%rax,1),%rcx
   330c3:	lea    (%r12,%r12,2),%rax
   330c7:	lea    (%r12,%rax,2),%rax
   330cb:	shl    $0x5,%rax
   330cf:	sub    %r12,%rax
   330d2:	shl    $0x6,%rax
   330d6:	add    %r12,%rax
   330d9:	sub    %rax,%rcx
   330dc:	lea    (%rcx,%r10,1),%rdx
   330e0:	shl    $0x7,%rsi
   330e4:	lea    0x0(%r13,%rsi,1),%rax
   330e9:	shl    $0x4,%rax
   330ed:	lea    (%rax,%r13,2),%rax
   330f1:	mov    -0x98(%rbp),%rcx
   330f8:	sub    %rax,%rcx
   330fb:	mov    -0x20(%rbp),%rsi
   330ff:	lea    (%rsi,%rcx,1),%rax
   33103:	lea    0x20000(%rdx,%rax,1),%rax
   3310b:	sar    $0x12,%rax
   3310f:	and    $0x3ff,%eax
   33114:	movslq %eax,%rax
   33117:	movzbl 0x80(%r15,%rax,1),%eax
   33120:	mov    %al,0x5(%r9,%r8,1)
   33125:	lea    0x20000(%rsi,%rcx,1),%rax
   3312d:	sub    %rdx,%rax
   33130:	sar    $0x12,%rax
   33134:	and    $0x3ff,%eax
   33139:	movslq %eax,%rax
   3313c:	movzbl 0x80(%r15,%rax,1),%eax
   33145:	mov    %al,0x7(%r9,%r8,1)
   3314a:	mov    -0x18(%rbp),%rax
   3314e:	lea    (%rax,%r13,1),%rcx
   33152:	mov    -0x10(%rbp),%rax
   33156:	sub    %rcx,%rax
   33159:	lea    (%rax,%rax,8),%rcx
   3315d:	shl    $0x8,%rcx
   33161:	lea    (%rcx,%rax,8),%rcx
   33165:	lea    (%rcx,%rax,4),%rcx
   33169:	add    %rcx,%rax
   3316c:	lea    (%rax,%rax,4),%rax
   33170:	mov    -0xa0(%rbp),%rcx
   33177:	lea    0x20000(%rax,%rcx,1),%rax
   3317f:	sar    $0x12,%rax
   33183:	and    $0x3ff,%eax
   33188:	movslq %eax,%rax
   3318b:	movzbl 0x80(%rax,%r15,1),%eax
   33194:	mov    %al,0x6(%r9,%r8,1)
   33199:	mov    -0xe8(%rbp),%rax
   331a0:	lea    0x1(%rax),%ecx
   331a3:	mov    -0xb8(%rbp),%rax
   331aa:	lea    0x20(%rax),%rsi
   331ae:	mov    -0xb0(%rbp),%rdx
   331b5:	cmp    $0xc,%ecx
   331b8:	jle    32b8b <jpeg_idct_13x13+0x5fb>
   331be:	mov    -0xe0(%rbp),%r15
   331c5:	mov    -0xd8(%rbp),%r14
   331cc:	mov    -0xd0(%rbp),%r13
   331d3:	mov    -0xc8(%rbp),%r12
   331da:	mov    -0xc0(%rbp),%rbx
   331e1:	leaveq 
   331e2:	retq   
   331e3:	data16 nopw %cs:0x0(%rax,%rax,1)
   331ee:	xchg   %ax,%ax

00000000000331f0 <jpeg_idct_14x14>:
   331f0:	push   %rbp
   331f1:	mov    %rsp,%rbp
   331f4:	sub    $0x2a0,%rsp
   331fb:	mov    %r8,-0xa0(%rbp)
   33202:	mov    %rcx,-0xa8(%rbp)
   33209:	mov    %rbx,-0xb8(%rbp)
   33210:	mov    %r12,-0xc0(%rbp)
   33217:	mov    %r13,-0xc8(%rbp)
   3321e:	mov    %r14,-0xd0(%rbp)
   33225:	mov    %r15,-0xd8(%rbp)
   3322c:	mov    0x1a8(%rdi),%rax
   33233:	mov    %rax,-0xb0(%rbp)
   3323a:	mov    0x58(%rsi),%rsi
   3323e:	xor    %eax,%eax
   33240:	lea    -0x2a0(%rbp),%rdi
   33247:	jmpq   336e3 <jpeg_idct_14x14+0x4f3>
   3324c:	movswq 0x10(%rsi),%rcx
   33251:	movswq 0x10(%rdx),%rbx
   33256:	imul   %ebx,%ecx
   33259:	movslq %ecx,%r10
   3325c:	mov    %r10,-0x60(%rbp)
   33260:	movswq 0x30(%rsi),%rcx
   33265:	movswq 0x30(%rdx),%rbx
   3326a:	imul   %ebx,%ecx
   3326d:	movslq %ecx,%r15
   33270:	lea    (%r15,%r10,1),%rcx
   33274:	lea    (%rcx,%rcx,8),%r8
   33278:	lea    (%rcx,%r8,2),%rcx
   3327c:	mov    %rcx,%rbx
   3327f:	shl    $0x6,%rbx
   33283:	shl    $0x9,%rcx
   33287:	add    %rcx,%rbx
   3328a:	sub    %r8,%rbx
   3328d:	movswq 0x50(%rsi),%rcx
   33292:	movswq 0x50(%rdx),%r8
   33297:	imul   %r8d,%ecx
   3329b:	movslq %ecx,%r13
   3329e:	lea    (%r10,%r13,1),%r8
   332a2:	mov    %r8,-0x58(%rbp)
   332a6:	mov    %r8,%rcx
   332a9:	shl    $0x6,%rcx
   332ad:	mov    %r8,%r9
   332b0:	shl    $0xa,%r9
   332b4:	add    %r9,%rcx
   332b7:	lea    (%rcx,%r8,2),%rcx
   332bb:	lea    (%rcx,%rcx,8),%rcx
   332bf:	mov    %rcx,-0x8(%rbp)
   332c3:	lea    (%rcx,%rbx,1),%r9
   332c7:	movswq 0x70(%rsi),%rcx
   332cc:	movswq 0x70(%rdx),%r8
   332d1:	imul   %r8d,%ecx
   332d5:	movslq %ecx,%r8
   332d8:	mov    %r8,-0x18(%rbp)
   332dc:	shl    $0xd,%r8
   332e0:	lea    (%r9,%r8,1),%r12
   332e4:	lea    (%r10,%r10,8),%rcx
   332e8:	shl    $0x6,%rcx
   332ec:	add    %r10,%rcx
   332ef:	shl    $0x4,%rcx
   332f3:	mov    %rax,-0xe0(%rbp)
   332fa:	mov    %r12,%r14
   332fd:	sub    %rcx,%r14
   33300:	movswq 0x20(%rsi),%rax
   33305:	movswq 0x20(%rdx),%r9
   3330a:	imul   %r9d,%eax
   3330e:	movslq %eax,%r11
   33311:	mov    %r11,-0x28(%rbp)
   33315:	movswq 0x60(%rsi),%rax
   3331a:	movswq 0x60(%rdx),%r9
   3331f:	imul   %r9d,%eax
   33323:	movslq %eax,%rax
   33326:	mov    %rax,-0x48(%rbp)
   3332a:	lea    (%r11,%rax,1),%r10
   3332e:	lea    (%r10,%r10,8),%rax
   33332:	shl    $0x5,%rax
   33336:	lea    (%r10,%r10,4),%r9
   3333a:	sub    %r9,%rax
   3333d:	shl    $0x5,%rax
   33341:	lea    (%rax,%r10,2),%r9
   33345:	mov    %r11,%rax
   33348:	shl    $0x5,%rax
   3334c:	lea    (%rax,%r11,2),%rax
   33350:	add    %r11,%rax
   33353:	shl    $0x6,%rax
   33357:	lea    (%r11,%r11,2),%r10
   3335b:	mov    %r10,-0x20(%rbp)
   3335f:	sub    %r10,%rax
   33362:	lea    (%r9,%rax,1),%r10
   33366:	mov    %r10,-0x68(%rbp)
   3336a:	movswq 0x40(%rsi),%rax
   3336f:	movswq 0x40(%rdx),%r11
   33374:	imul   %r11d,%eax
   33378:	movslq %eax,%r11
   3337b:	lea    (%r11,%r11,4),%rax
   3337f:	mov    %rax,-0x10(%rbp)
   33383:	shl    $0x5,%rax
   33387:	mov    %rax,-0x38(%rbp)
   3338b:	lea    (%rax,%r11,2),%rax
   3338f:	add    %r11,%rax
   33392:	shl    $0x6,%rax
   33396:	lea    (%rax,%r11,4),%rax
   3339a:	lea    (%rax,%r11,2),%rax
   3339e:	mov    %rsi,-0x78(%rbp)
   333a2:	movswq (%rsi),%rsi
   333a6:	mov    %rdx,-0x70(%rbp)
   333aa:	movswq (%rdx),%rdx
   333ae:	imul   %edx,%esi
   333b1:	movslq %esi,%rsi
   333b4:	shl    $0xd,%rsi
   333b8:	add    %rsi,%rax
   333bb:	mov    %rax,-0x50(%rbp)
   333bf:	lea    (%r10,%rax,1),%rdx
   333c3:	lea    0x400(%rdx,%r14,1),%rax
   333cb:	sar    $0xb,%rax
   333cf:	mov    %eax,(%rdi)
   333d1:	sub    %r12,%rcx
   333d4:	lea    0x400(%rdx,%rcx,1),%rax
   333dc:	sar    $0xb,%rax
   333e0:	mov    %eax,0x1a0(%rdi)
   333e6:	lea    (%r15,%r13,1),%rcx
   333ea:	lea    (%rcx,%rcx,4),%rax
   333ee:	shl    $0x4,%rax
   333f2:	add    %rcx,%rax
   333f5:	shl    $0x4,%rax
   333f9:	add    %rcx,%rax
   333fc:	neg    %rax
   333ff:	lea    (%r15,%r15,2),%rcx
   33403:	shl    $0x7,%rcx
   33407:	lea    (%rcx,%r15,2),%rcx
   3340b:	lea    (%rcx,%rcx,8),%rcx
   3340f:	add    %r8,%rcx
   33412:	neg    %rcx
   33415:	add    %rax,%rcx
   33418:	lea    (%rcx,%rbx,1),%rdx
   3341c:	mov    -0x48(%rbp),%r10
   33420:	lea    (%r10,%r10,2),%rcx
   33424:	shl    $0x4,%rcx
   33428:	lea    (%rcx,%r10,8),%rcx
   3342c:	sub    %r10,%rcx
   3342f:	shl    $0x8,%rcx
   33433:	lea    (%rcx,%r10,4),%rcx
   33437:	mov    %rcx,-0x40(%rbp)
   3343b:	mov    %r9,%rbx
   3343e:	sub    %rcx,%rbx
   33441:	mov    -0x38(%rbp),%rcx
   33445:	add    %r11,%rcx
   33448:	shl    $0x4,%rcx
   3344c:	lea    (%rcx,%r11,2),%rcx
   33450:	add    %rsi,%rcx
   33453:	mov    %rcx,-0x30(%rbp)
   33457:	add    %rcx,%rbx
   3345a:	lea    0x400(%rdx,%rbx,1),%rcx
   33462:	sar    $0xb,%rcx
   33466:	mov    %ecx,0x20(%rdi)
   33469:	lea    0x400(%rbx),%rcx
   33470:	sub    %rdx,%rcx
   33473:	sar    $0xb,%rcx
   33477:	mov    %ecx,0x180(%rdi)
   3347d:	lea    0x0(%r13,%r13,8),%rdx
   33482:	lea    0x0(%r13,%rdx,2),%rcx
   33487:	shl    $0xa,%rcx
   3348b:	sub    %rdx,%rcx
   3348e:	add    %r8,%rcx
   33491:	sub    %rcx,%rax
   33494:	mov    -0x8(%rbp),%rcx
   33498:	lea    (%rax,%rcx,1),%r12
   3349c:	mov    -0x28(%rbp),%rcx
   334a0:	lea    (%rcx,%rcx,4),%rax
   334a4:	shl    $0x5,%rax
   334a8:	mov    -0x20(%rbp),%rdx
   334ac:	sub    %rdx,%rax
   334af:	shl    $0x5,%rax
   334b3:	lea    (%rax,%rcx,2),%rax
   334b7:	lea    (%rcx,%rax,1),%r14
   334bb:	lea    (%r10,%r10,4),%rax
   334bf:	lea    (%r10,%rax,2),%rax
   334c3:	shl    $0x5,%rax
   334c7:	lea    (%r10,%rax,1),%rdx
   334cb:	shl    $0x5,%rdx
   334cf:	mov    %r10,%rax
   334d2:	sub    %rdx,%rax
   334d5:	lea    (%r14,%rax,1),%rcx
   334d9:	lea    (%r11,%r11,2),%rax
   334dd:	lea    (%r11,%rax,2),%rax
   334e1:	shl    $0x4,%rax
   334e5:	lea    (%r11,%rax,1),%rbx
   334e9:	shl    $0x6,%rbx
   334ed:	lea    (%r11,%r11,8),%rax
   334f1:	sub    %rbx,%rax
   334f4:	lea    0x400(%rsi,%rax,1),%rbx
   334fc:	lea    (%rbx,%rcx,1),%rax
   33500:	lea    (%r12,%rax,1),%rcx
   33504:	sar    $0xb,%rcx
   33508:	mov    %ecx,0x40(%rdi)
   3350b:	sub    %r12,%rax
   3350e:	sar    $0xb,%rax
   33512:	mov    %eax,0x160(%rdi)
   33518:	mov    -0x10(%rbp),%rax
   3351c:	lea    (%r11,%rax,2),%rax
   33520:	shl    $0x4,%rax
   33524:	lea    (%rax,%r11,4),%rax
   33528:	add    %r11,%rax
   3352b:	shl    $0x6,%rax
   3352f:	lea    (%rax,%r11,2),%rcx
   33533:	lea    0x400(%rsi),%rax
   3353a:	sub    %rcx,%rax
   3353d:	sar    $0xb,%rax
   33541:	mov    -0x60(%rbp),%rcx
   33545:	sub    %r15,%rcx
   33548:	mov    -0x18(%rbp),%rsi
   3354c:	add    %rcx,%rsi
   3354f:	sub    %r13,%rsi
   33552:	shl    $0x2,%rsi
   33556:	lea    (%rax,%rsi,1),%r11
   3355a:	mov    %r11d,0x60(%rdi)
   3355e:	sub    %rsi,%rax
   33561:	mov    %eax,0x140(%rdi)
   33567:	mov    %r13,%r11
   3356a:	sub    %r15,%r11
   3356d:	lea    (%r11,%r11,4),%rax
   33571:	mov    %rax,%rsi
   33574:	shl    $0x4,%rsi
   33578:	shl    $0x7,%rax
   3357c:	add    %rax,%rsi
   3357f:	mov    %r15,%rax
   33582:	sub    %r13,%rax
   33585:	add    %rsi,%rax
   33588:	shl    $0x4,%rax
   3358c:	lea    (%rax,%r11,8),%r12
   33590:	lea    (%r8,%r12,1),%rax
   33594:	mov    %r13,%r11
   33597:	shl    $0x5,%r11
   3359b:	mov    %r13,%rsi
   3359e:	shl    $0x9,%rsi
   335a2:	add    %r11,%rsi
   335a5:	lea    (%rsi,%r13,8),%rsi
   335a9:	lea    (%rsi,%r13,2),%rsi
   335ad:	lea    (%rsi,%rsi,4),%rsi
   335b1:	lea    (%rsi,%rsi,4),%rsi
   335b5:	sub    %rsi,%rax
   335b8:	mov    -0x58(%rbp),%r11
   335bc:	lea    (%r11,%r11,2),%rsi
   335c0:	shl    $0x7,%rsi
   335c4:	add    %r11,%rsi
   335c7:	shl    $0x4,%rsi
   335cb:	lea    (%rsi,%r11,4),%r11
   335cf:	lea    (%rax,%r11,1),%rsi
   335d3:	lea    (%r10,%r14,1),%rax
   335d7:	sub    %rax,%rdx
   335da:	lea    (%rbx,%rdx,1),%rax
   335de:	lea    (%rsi,%rax,1),%rdx
   335e2:	sar    $0xb,%rdx
   335e6:	mov    %edx,0x80(%rdi)
   335ec:	sub    %rsi,%rax
   335ef:	sar    $0xb,%rax
   335f3:	mov    %eax,0x120(%rdi)
   335f9:	lea    (%r15,%r15,4),%rax
   335fd:	lea    (%r15,%rax,4),%rax
   33601:	shl    $0x4,%rax
   33605:	lea    (%rax,%r15,8),%rax
   33609:	add    %r15,%rax
   3360c:	shl    $0x4,%rax
   33610:	lea    (%rax,%r15,8),%rax
   33614:	add    %r15,%rax
   33617:	add    %r12,%rax
   3361a:	mov    %rcx,%rdx
   3361d:	shl    $0x8,%rdx
   33621:	lea    (%rdx,%rcx,8),%rdx
   33625:	lea    (%rdx,%rcx,4),%rdx
   33629:	lea    (%rdx,%rcx,2),%rdx
   3362d:	add    %r8,%rdx
   33630:	shl    $0xc,%rcx
   33634:	sub    %rdx,%rcx
   33637:	lea    (%rax,%rcx,1),%rsi
   3363b:	mov    -0x40(%rbp),%rax
   3363f:	sub    %r9,%rax
   33642:	mov    -0x30(%rbp),%rdx
   33646:	add    %rax,%rdx
   33649:	lea    0x400(%rsi,%rdx,1),%rax
   33651:	sar    $0xb,%rax
   33655:	mov    %eax,0xa0(%rdi)
   3365b:	lea    0x400(%rdx),%rax
   33662:	sub    %rsi,%rax
   33665:	sar    $0xb,%rax
   33669:	mov    %eax,0x100(%rdi)
   3366f:	mov    -0x60(%rbp),%rdx
   33673:	lea    (%rdx,%rdx,4),%rax
   33677:	lea    (%rdx,%rax,2),%rax
   3367b:	mov    %rdx,%rsi
   3367e:	shl    $0x9,%rsi
   33682:	shl    $0xd,%rdx
   33686:	add    %rsi,%rdx
   33689:	sub    %rdx,%rax
   3368c:	add    %r11,%rax
   3368f:	lea    (%rax,%rcx,1),%rsi
   33693:	mov    -0x50(%rbp),%rax
   33697:	add    $0x400,%rax
   3369d:	mov    -0x68(%rbp),%rdx
   336a1:	mov    %rax,%rcx
   336a4:	sub    %rdx,%rcx
   336a7:	add    %rsi,%rcx
   336aa:	sar    $0xb,%rcx
   336ae:	mov    %ecx,0xc0(%rdi)
   336b4:	lea    (%rsi,%rdx,1),%rcx
   336b8:	sub    %rcx,%rax
   336bb:	sar    $0xb,%rax
   336bf:	mov    %eax,0xe0(%rdi)
   336c5:	mov    -0x78(%rbp),%rax
   336c9:	lea    0x2(%rax),%rsi
   336cd:	mov    -0x70(%rbp),%rax
   336d1:	lea    0x2(%rax),%rdx
   336d5:	add    $0x4,%rdi
   336d9:	mov    -0xe0(%rbp),%rax
   336e0:	add    $0x1,%eax
   336e3:	cmp    $0x7,%eax
   336e6:	jle    3324c <jpeg_idct_14x14+0x5c>
   336ec:	mov    -0xa0(%rbp),%rax
   336f3:	mov    %eax,%r9d
   336f6:	mov    -0xb0(%rbp),%r15
   336fd:	lea    -0x2a0(%rbp),%rsi
   33704:	xor    %edx,%edx
   33706:	mov    -0xa8(%rbp),%rdi
   3370d:	jmpq   33ca7 <jpeg_idct_14x14+0xab7>
   33712:	movslq 0x4(%rsi),%r10
   33716:	mov    %r10,-0x68(%rbp)
   3371a:	movslq 0xc(%rsi),%r13
   3371e:	mov    %r13,-0x48(%rbp)
   33722:	lea    0x0(%r13,%r10,1),%rax
   33727:	lea    (%rax,%rax,8),%rbx
   3372b:	lea    (%rax,%rbx,2),%rax
   3372f:	mov    %rax,%rcx
   33732:	shl    $0x6,%rcx
   33736:	shl    $0x9,%rax
   3373a:	add    %rcx,%rax
   3373d:	sub    %rbx,%rax
   33740:	mov    %rax,-0x90(%rbp)
   33747:	movslq 0x14(%rsi),%r14
   3374b:	lea    (%r10,%r14,1),%r8
   3374f:	mov    %r8,-0x50(%rbp)
   33753:	mov    %r8,%rbx
   33756:	shl    $0x6,%rbx
   3375a:	mov    %r8,%rcx
   3375d:	shl    $0xa,%rcx
   33761:	add    %rbx,%rcx
   33764:	lea    (%rcx,%r8,2),%rcx
   33768:	lea    (%rcx,%rcx,8),%rcx
   3376c:	mov    %rcx,-0x70(%rbp)
   33770:	add    %rax,%rcx
   33773:	movslq 0x1c(%rsi),%rax
   33777:	mov    %rax,-0x60(%rbp)
   3377b:	shl    $0xd,%rax
   3377f:	mov    %rax,-0x88(%rbp)
   33786:	lea    (%rcx,%rax,1),%r11
   3378a:	lea    (%r10,%r10,8),%rax
   3378e:	shl    $0x6,%rax
   33792:	lea    (%r10,%rax,1),%rcx
   33796:	shl    $0x4,%rcx
   3379a:	mov    %r11,%r8
   3379d:	sub    %rcx,%r8
   337a0:	movslq 0x8(%rsi),%r12
   337a4:	mov    %r12,-0x80(%rbp)
   337a8:	movslq 0x18(%rsi),%rax
   337ac:	mov    %rax,-0x98(%rbp)
   337b3:	lea    (%r12,%rax,1),%r10
   337b7:	lea    (%r10,%r10,8),%rax
   337bb:	shl    $0x5,%rax
   337bf:	lea    (%r10,%r10,4),%rbx
   337c3:	sub    %rbx,%rax
   337c6:	shl    $0x5,%rax
   337ca:	lea    (%rax,%r10,2),%rbx
   337ce:	mov    %rbx,-0x40(%rbp)
   337d2:	mov    %r12,%rax
   337d5:	shl    $0x5,%rax
   337d9:	lea    (%rax,%r12,2),%rax
   337dd:	add    %r12,%rax
   337e0:	shl    $0x6,%rax
   337e4:	lea    (%r12,%r12,2),%r10
   337e8:	mov    %r10,-0x78(%rbp)
   337ec:	sub    %r10,%rax
   337ef:	lea    (%rbx,%rax,1),%r10
   337f3:	mov    %r10,-0x38(%rbp)
   337f7:	movslq 0x10(%rsi),%r12
   337fb:	lea    (%r12,%r12,4),%rax
   337ff:	mov    %rax,-0x58(%rbp)
   33803:	shl    $0x5,%rax
   33807:	mov    %rax,-0xa0(%rbp)
   3380e:	lea    (%rax,%r12,2),%rax
   33812:	add    %r12,%rax
   33815:	shl    $0x6,%rax
   33819:	lea    (%rax,%r12,4),%rax
   3381d:	lea    (%rax,%r12,2),%rax
   33821:	mov    %rsi,-0xb0(%rbp)
   33828:	mov    %rax,-0x28(%rbp)
   3382c:	movslq (%rsi),%rsi
   3382f:	shl    $0xd,%rsi
   33833:	mov    %rsi,-0x30(%rbp)
   33837:	add    %rsi,%rax
   3383a:	add    %rax,%r10
   3383d:	lea    0x20000(%r8,%r10,1),%rax
   33845:	sar    $0x12,%rax
   33849:	and    $0x3ff,%eax
   3384e:	movslq %eax,%rax
   33851:	movzbl 0x80(%r15,%rax,1),%eax
   3385a:	mov    %rdx,-0xe0(%rbp)
   33861:	movslq %edx,%rdx
   33864:	mov    (%rdi,%rdx,8),%r8
   33868:	mov    %al,(%r9,%r8,1)
   3386c:	sub    %r11,%rcx
   3386f:	lea    0x20000(%rcx,%r10,1),%rax
   33877:	sar    $0x12,%rax
   3387b:	and    $0x3ff,%eax
   33880:	movslq %eax,%rax
   33883:	movzbl 0x80(%r15,%rax,1),%eax
   3388c:	mov    %al,0xd(%r9,%r8,1)
   33891:	lea    0x0(%r13,%r14,1),%rdx
   33896:	lea    (%rdx,%rdx,4),%rax
   3389a:	shl    $0x4,%rax
   3389e:	add    %rdx,%rax
   338a1:	shl    $0x4,%rax
   338a5:	lea    (%rdx,%rax,1),%rcx
   338a9:	neg    %rcx
   338ac:	lea    0x0(%r13,%r13,2),%rax
   338b1:	shl    $0x7,%rax
   338b5:	lea    (%rax,%r13,2),%rax
   338b9:	lea    (%rax,%rax,8),%rax
   338bd:	mov    -0x88(%rbp),%r13
   338c4:	add    %r13,%rax
   338c7:	neg    %rax
   338ca:	add    %rcx,%rax
   338cd:	mov    -0x90(%rbp),%rdi
   338d4:	add    %rax,%rdi
   338d7:	mov    -0x98(%rbp),%r11
   338de:	lea    (%r11,%r11,2),%rax
   338e2:	shl    $0x4,%rax
   338e6:	lea    (%rax,%r11,8),%rax
   338ea:	sub    %r11,%rax
   338ed:	shl    $0x8,%rax
   338f1:	lea    (%rax,%r11,4),%rax
   338f5:	mov    %rax,-0x88(%rbp)
   338fc:	sub    %rax,%rbx
   338ff:	mov    -0xa0(%rbp),%rax
   33906:	add    %r12,%rax
   33909:	shl    $0x4,%rax
   3390d:	lea    (%rax,%r12,2),%rax
   33911:	lea    (%rsi,%rax,1),%r10
   33915:	mov    %r10,-0x90(%rbp)
   3391c:	lea    (%rbx,%r10,1),%rax
   33920:	lea    0x20000(%rdi,%rax,1),%rax
   33928:	sar    $0x12,%rax
   3392c:	and    $0x3ff,%eax
   33931:	movslq %eax,%rax
   33934:	movzbl 0x80(%r15,%rax,1),%eax
   3393d:	mov    %al,0x1(%r9,%r8,1)
   33942:	lea    0x20000(%rbx,%r10,1),%rax
   3394a:	sub    %rdi,%rax
   3394d:	sar    $0x12,%rax
   33951:	and    $0x3ff,%eax
   33956:	movslq %eax,%rax
   33959:	movzbl 0x80(%r15,%rax,1),%eax
   33962:	mov    %al,0xc(%r9,%r8,1)
   33967:	lea    (%r14,%r14,8),%rdi
   3396b:	lea    (%r14,%rdi,2),%rax
   3396f:	shl    $0xa,%rax
   33973:	sub    %rdi,%rax
   33976:	add    %r13,%rax
   33979:	sub    %rax,%rcx
   3397c:	mov    -0x70(%rbp),%rax
   33980:	lea    (%rcx,%rax,1),%rdi
   33984:	mov    -0x80(%rbp),%rcx
   33988:	lea    (%rcx,%rcx,4),%rax
   3398c:	shl    $0x5,%rax
   33990:	mov    -0x78(%rbp),%rbx
   33994:	sub    %rbx,%rax
   33997:	shl    $0x5,%rax
   3399b:	lea    (%rax,%rcx,2),%rax
   3399f:	lea    (%rcx,%rax,1),%r10
   339a3:	lea    (%r11,%r11,4),%rax
   339a7:	lea    (%r11,%rax,2),%rax
   339ab:	shl    $0x5,%rax
   339af:	add    %r11,%rax
   339b2:	shl    $0x5,%rax
   339b6:	mov    %rax,-0x98(%rbp)
   339bd:	neg    %rax
   339c0:	add    %r11,%rax
   339c3:	lea    (%r10,%rax,1),%rcx
   339c7:	lea    (%r12,%r12,2),%rax
   339cb:	lea    (%r12,%rax,2),%rax
   339cf:	shl    $0x4,%rax
   339d3:	add    %r12,%rax
   339d6:	shl    $0x6,%rax
   339da:	lea    (%r12,%r12,8),%rbx
   339de:	sub    %rax,%rbx
   339e1:	lea    0x20000(%rsi,%rbx,1),%rbx
   339e9:	lea    (%rbx,%rcx,1),%rax
   339ed:	lea    (%rdi,%rax,1),%rcx
   339f1:	sar    $0x12,%rcx
   339f5:	and    $0x3ff,%ecx
   339fb:	movslq %ecx,%rcx
   339fe:	movzbl 0x80(%r15,%rcx,1),%ecx
   33a07:	mov    %cl,0x2(%r9,%r8,1)
   33a0c:	sub    %rdi,%rax
   33a0f:	sar    $0x12,%rax
   33a13:	and    $0x3ff,%eax
   33a18:	movslq %eax,%rax
   33a1b:	movzbl 0x80(%r15,%rax,1),%eax
   33a24:	mov    %al,0xb(%r9,%r8,1)
   33a29:	mov    -0x68(%rbp),%rdi
   33a2d:	mov    %rdi,%rax
   33a30:	sub    %rdx,%rax
   33a33:	mov    -0x60(%rbp),%rcx
   33a37:	lea    (%rcx,%rax,1),%rdx
   33a3b:	shl    $0xd,%rdx
   33a3f:	mov    -0x58(%rbp),%rax
   33a43:	lea    (%r12,%rax,2),%rax
   33a47:	shl    $0x4,%rax
   33a4b:	lea    (%rax,%r12,4),%rax
   33a4f:	add    %r12,%rax
   33a52:	shl    $0x6,%rax
   33a56:	lea    (%rax,%r12,2),%r12
   33a5a:	lea    0x20000(%rsi),%rax
   33a61:	mov    %rax,%rcx
   33a64:	sub    %r12,%rcx
   33a67:	add    %rdx,%rcx
   33a6a:	sar    $0x12,%rcx
   33a6e:	and    $0x3ff,%ecx
   33a74:	movslq %ecx,%rcx
   33a77:	movzbl 0x80(%r15,%rcx,1),%ecx
   33a80:	mov    %cl,0x3(%r9,%r8,1)
   33a85:	lea    (%rdx,%r12,1),%rcx
   33a89:	sub    %rcx,%rax
   33a8c:	sar    $0x12,%rax
   33a90:	and    $0x3ff,%eax
   33a95:	movslq %eax,%rax
   33a98:	movzbl 0x80(%r15,%rax,1),%eax
   33aa1:	mov    %al,0xa(%r9,%r8,1)
   33aa6:	mov    -0x50(%rbp),%rcx
   33aaa:	lea    (%rcx,%rcx,2),%rax
   33aae:	shl    $0x7,%rax
   33ab2:	add    %rcx,%rax
   33ab5:	shl    $0x4,%rax
   33ab9:	lea    (%rax,%rcx,4),%r12
   33abd:	mov    -0x48(%rbp),%rsi
   33ac1:	mov    %r14,%rdx
   33ac4:	sub    %rsi,%rdx
   33ac7:	lea    (%rdx,%rdx,4),%rax
   33acb:	mov    %rax,%rcx
   33ace:	shl    $0x4,%rcx
   33ad2:	shl    $0x7,%rax
   33ad6:	add    %rax,%rcx
   33ad9:	mov    %rsi,%rax
   33adc:	sub    %r14,%rax
   33adf:	add    %rcx,%rax
   33ae2:	shl    $0x4,%rax
   33ae6:	lea    (%rax,%rdx,8),%rax
   33aea:	mov    %rax,-0x80(%rbp)
   33aee:	add    %r13,%rax
   33af1:	mov    %r14,%rdx
   33af4:	shl    $0x5,%rdx
   33af8:	mov    %r14,%rcx
   33afb:	shl    $0x9,%rcx
   33aff:	add    %rdx,%rcx
   33b02:	lea    (%rcx,%r14,8),%rcx
   33b06:	lea    (%rcx,%r14,2),%rcx
   33b0a:	lea    (%rcx,%rcx,4),%rcx
   33b0e:	lea    (%rcx,%rcx,4),%rcx
   33b12:	sub    %rcx,%rax
   33b15:	lea    (%rax,%r12,1),%rdx
   33b19:	lea    (%r11,%r10,1),%rcx
   33b1d:	mov    -0x98(%rbp),%rax
   33b24:	sub    %rcx,%rax
   33b27:	add    %rbx,%rax
   33b2a:	lea    (%rdx,%rax,1),%rcx
   33b2e:	sar    $0x12,%rcx
   33b32:	and    $0x3ff,%ecx
   33b38:	movslq %ecx,%rcx
   33b3b:	movzbl 0x80(%r15,%rcx,1),%ecx
   33b44:	mov    %cl,0x4(%r9,%r8,1)
   33b49:	sub    %rdx,%rax
   33b4c:	sar    $0x12,%rax
   33b50:	and    $0x3ff,%eax
   33b55:	movslq %eax,%rax
   33b58:	movzbl 0x80(%r15,%rax,1),%eax
   33b61:	mov    %al,0x9(%r9,%r8,1)
   33b66:	mov    %rdi,%rcx
   33b69:	sub    %rsi,%rcx
   33b6c:	mov    %rcx,%rax
   33b6f:	shl    $0x8,%rax
   33b73:	lea    (%rax,%rcx,8),%rax
   33b77:	lea    (%rax,%rcx,4),%rax
   33b7b:	lea    (%rax,%rcx,2),%rax
   33b7f:	add    %r13,%rax
   33b82:	shl    $0xc,%rcx
   33b86:	sub    %rax,%rcx
   33b89:	lea    (%rsi,%rsi,4),%rax
   33b8d:	lea    (%rsi,%rax,4),%rax
   33b91:	shl    $0x4,%rax
   33b95:	lea    (%rax,%rsi,8),%rax
   33b99:	add    %rsi,%rax
   33b9c:	shl    $0x4,%rax
   33ba0:	lea    (%rax,%rsi,8),%rax
   33ba4:	add    %rsi,%rax
   33ba7:	mov    -0x80(%rbp),%rdx
   33bab:	add    %rdx,%rax
   33bae:	lea    (%rax,%rcx,1),%rsi
   33bb2:	mov    -0x40(%rbp),%rax
   33bb6:	mov    -0x88(%rbp),%rdx
   33bbd:	sub    %rax,%rdx
   33bc0:	mov    -0x90(%rbp),%rbx
   33bc7:	lea    (%rdx,%rbx,1),%rax
   33bcb:	lea    0x20000(%rsi,%rax,1),%rax
   33bd3:	sar    $0x12,%rax
   33bd7:	and    $0x3ff,%eax
   33bdc:	movslq %eax,%rax
   33bdf:	movzbl 0x80(%r15,%rax,1),%eax
   33be8:	mov    %al,0x5(%r9,%r8,1)
   33bed:	lea    0x20000(%rdx,%rbx,1),%rax
   33bf5:	sub    %rsi,%rax
   33bf8:	sar    $0x12,%rax
   33bfc:	and    $0x3ff,%eax
   33c01:	movslq %eax,%rax
   33c04:	movzbl 0x80(%r15,%rax,1),%eax
   33c0d:	mov    %al,0x8(%r9,%r8,1)
   33c12:	lea    (%rdi,%rdi,4),%rax
   33c16:	lea    (%rdi,%rax,2),%rax
   33c1a:	mov    %rdi,%rdx
   33c1d:	shl    $0x9,%rdx
   33c21:	shl    $0xd,%rdi
   33c25:	add    %rdi,%rdx
   33c28:	sub    %rdx,%rax
   33c2b:	add    %r12,%rax
   33c2e:	lea    (%rax,%rcx,1),%rdx
   33c32:	mov    -0x30(%rbp),%rax
   33c36:	mov    -0x28(%rbp),%rcx
   33c3a:	lea    0x20000(%rcx,%rax,1),%rax
   33c42:	mov    -0x38(%rbp),%rsi
   33c46:	mov    %rax,%rcx
   33c49:	sub    %rsi,%rcx
   33c4c:	add    %rdx,%rcx
   33c4f:	sar    $0x12,%rcx
   33c53:	and    $0x3ff,%ecx
   33c59:	movslq %ecx,%rcx
   33c5c:	movzbl 0x80(%r15,%rcx,1),%ecx
   33c65:	mov    %cl,0x6(%r9,%r8,1)
   33c6a:	lea    (%rdx,%rsi,1),%rcx
   33c6e:	sub    %rcx,%rax
   33c71:	sar    $0x12,%rax
   33c75:	and    $0x3ff,%eax
   33c7a:	movslq %eax,%rax
   33c7d:	movzbl 0x80(%rax,%r15,1),%eax
   33c86:	mov    %al,0x7(%r9,%r8,1)
   33c8b:	mov    -0xe0(%rbp),%rax
   33c92:	lea    0x1(%rax),%edx
   33c95:	mov    -0xb0(%rbp),%rax
   33c9c:	lea    0x20(%rax),%rsi
   33ca0:	mov    -0xa8(%rbp),%rdi
   33ca7:	cmp    $0xd,%edx
   33caa:	jle    33712 <jpeg_idct_14x14+0x522>
   33cb0:	mov    -0xd8(%rbp),%r15
   33cb7:	mov    -0xd0(%rbp),%r14
   33cbe:	mov    -0xc8(%rbp),%r13
   33cc5:	mov    -0xc0(%rbp),%r12
   33ccc:	mov    -0xb8(%rbp),%rbx
   33cd3:	leaveq 
   33cd4:	retq   
   33cd5:	data16 nopw %cs:0x0(%rax,%rax,1)

0000000000033ce0 <jpeg_idct_15x15>:
   33ce0:	push   %rbp
   33ce1:	mov    %rsp,%rbp
   33ce4:	sub    $0x300,%rsp
   33ceb:	mov    %r8,-0xd8(%rbp)
   33cf2:	mov    %rcx,-0xe0(%rbp)
   33cf9:	mov    %rbx,-0xf0(%rbp)
   33d00:	mov    %r12,-0xf8(%rbp)
   33d07:	mov    %r13,-0x100(%rbp)
   33d0e:	mov    %r14,-0x108(%rbp)
   33d15:	mov    %r15,-0x110(%rbp)
   33d1c:	mov    0x1a8(%rdi),%rax
   33d23:	mov    %rax,-0xe8(%rbp)
   33d2a:	mov    0x58(%rsi),%rcx
   33d2e:	xor    %esi,%esi
   33d30:	lea    -0x2f8(%rbp),%rdi
   33d37:	jmpq   342c3 <jpeg_idct_15x15+0x5e3>
   33d3c:	movswq 0x40(%rcx),%rax
   33d41:	movswq 0x40(%rdx),%rbx
   33d46:	imul   %ebx,%eax
   33d49:	movslq %eax,%r10
   33d4c:	mov    %r10,-0x68(%rbp)
   33d50:	movswq 0x20(%rcx),%rax
   33d55:	movswq 0x20(%rdx),%rbx
   33d5a:	imul   %ebx,%eax
   33d5d:	movslq %eax,%r8
   33d60:	mov    %r8,-0x70(%rbp)
   33d64:	lea    (%r10,%r8,1),%r9
   33d68:	mov    %r9,-0x58(%rbp)
   33d6c:	lea    (%r9,%r9,4),%rax
   33d70:	shl    $0x5,%rax
   33d74:	lea    (%rax,%r9,8),%rax
   33d78:	lea    (%rax,%r9,2),%rax
   33d7c:	add    %r9,%rax
   33d7f:	shl    $0x6,%rax
   33d83:	lea    (%rax,%r9,8),%rax
   33d87:	lea    (%rax,%r9,4),%rax
   33d8b:	lea    (%rax,%r9,2),%r15
   33d8f:	mov    %r15,-0x8(%rbp)
   33d93:	movswq 0x60(%rcx),%rax
   33d98:	movswq 0x60(%rdx),%rbx
   33d9d:	imul   %ebx,%eax
   33da0:	movslq %eax,%r13
   33da3:	mov    %r13,%r12
   33da6:	shl    $0x2,%r12
   33daa:	lea    0x0(%r13,%r13,8),%rax
   33daf:	shl    $0x5,%rax
   33db3:	add    %r12,%rax
   33db6:	add    %r13,%rax
   33db9:	shl    $0x5,%rax
   33dbd:	lea    0x0(%r13,%r13,2),%r11
   33dc2:	sub    %r11,%rax
   33dc5:	movswq (%rcx),%rbx
   33dc9:	movswq (%rdx),%r14
   33dcd:	imul   %r14d,%ebx
   33dd1:	movslq %ebx,%rbx
   33dd4:	shl    $0xd,%rbx
   33dd8:	add    %rbx,%rax
   33ddb:	mov    %rax,-0x38(%rbp)
   33ddf:	lea    (%rax,%r15,1),%r14
   33de3:	mov    %rsi,-0x118(%rbp)
   33dea:	sub    %r10,%r8
   33ded:	mov    %r8,-0xa0(%rbp)
   33df4:	lea    (%r8,%r8,2),%rax
   33df8:	mov    %rax,-0x60(%rbp)
   33dfc:	shl    $0x7,%rax
   33e00:	lea    (%r8,%r8,4),%rsi
   33e04:	add    %rsi,%rsi
   33e07:	mov    %rsi,-0x98(%rbp)
   33e0e:	sub    %rsi,%rax
   33e11:	mov    %rax,-0x10(%rbp)
   33e15:	lea    (%r14,%rax,1),%rsi
   33e19:	movswq 0x10(%rcx),%rax
   33e1e:	movswq 0x10(%rdx),%r8
   33e23:	imul   %r8d,%eax
   33e27:	movslq %eax,%rax
   33e2a:	mov    %rax,-0x80(%rbp)
   33e2e:	movswq 0x70(%rcx),%r8
   33e33:	movswq 0x70(%rdx),%r10
   33e38:	imul   %r10d,%r8d
   33e3c:	movslq %r8d,%r14
   33e3f:	sub    %r14,%rax
   33e42:	lea    (%rax,%rax,4),%r8
   33e46:	shl    $0x3,%r8
   33e4a:	lea    (%r8,%rax,4),%r8
   33e4e:	add    %rax,%r8
   33e51:	shl    $0x8,%r8
   33e55:	lea    (%r8,%rax,2),%r8
   33e59:	movswq 0x50(%rcx),%rax
   33e5e:	movswq 0x50(%rdx),%r10
   33e63:	imul   %r10d,%eax
   33e67:	movslq %eax,%r15
   33e6a:	lea    (%r15,%r15,2),%rax
   33e6e:	lea    (%r15,%rax,4),%r10
   33e72:	lea    (%r15,%r15,4),%rax
   33e76:	shl    $0x7,%rax
   33e7a:	sub    %r10,%rax
   33e7d:	shl    $0x4,%rax
   33e81:	add    %r15,%rax
   33e84:	mov    %rax,-0x40(%rbp)
   33e88:	lea    (%rax,%r8,1),%r10
   33e8c:	mov    %r10,-0x78(%rbp)
   33e90:	lea    (%r14,%r14,4),%rax
   33e94:	lea    (%r14,%rax,2),%r8
   33e98:	shl    $0x7,%rax
   33e9c:	sub    %r8,%rax
   33e9f:	shl    $0x5,%rax
   33ea3:	lea    (%rax,%r14,2),%rax
   33ea7:	add    %r14,%rax
   33eaa:	add    %r10,%rax
   33ead:	movswq 0x30(%rcx),%r8
   33eb2:	mov    %rdx,-0xb0(%rbp)
   33eb9:	movswq 0x30(%rdx),%rdx
   33ebe:	imul   %edx,%r8d
   33ec2:	movslq %r8d,%r10
   33ec5:	lea    (%r10,%r10,4),%r8
   33ec9:	mov    %rcx,-0xb8(%rbp)
   33ed0:	mov    %r8,%rcx
   33ed3:	shl    $0x3,%rcx
   33ed7:	lea    (%rcx,%r10,2),%rcx
   33edb:	add    %r10,%rcx
   33ede:	shl    $0x8,%rcx
   33ee2:	lea    (%rcx,%r10,8),%rcx
   33ee6:	lea    (%rcx,%r10,2),%rcx
   33eea:	mov    %rcx,-0x48(%rbp)
   33eee:	add    %rax,%rcx
   33ef1:	lea    0x400(%rsi,%rcx,1),%rax
   33ef9:	sar    $0xb,%rax
   33efd:	mov    %eax,(%rdi)
   33eff:	sub    %rcx,%rsi
   33f02:	lea    0x400(%rsi),%rax
   33f09:	sar    $0xb,%rax
   33f0d:	mov    %eax,0x1c0(%rdi)
   33f13:	lea    (%r9,%r9,2),%rax
   33f17:	shl    $0x5,%rax
   33f1b:	lea    (%rax,%r9,4),%rax
   33f1f:	add    %r9,%rax
   33f22:	shl    $0x6,%rax
   33f26:	lea    (%rax,%r9,8),%rax
   33f2a:	lea    (%rax,%r9,4),%rdx
   33f2e:	mov    %rdx,-0x28(%rbp)
   33f32:	lea    0x0(%r13,%r11,2),%rcx
   33f37:	shl    $0x9,%rcx
   33f3b:	mov    %r12,%rax
   33f3e:	sub    %rcx,%rax
   33f41:	lea    0x400(%rbx,%rax,1),%rax
   33f49:	mov    %rax,-0x50(%rbp)
   33f4d:	lea    (%rax,%rdx,1),%rsi
   33f51:	mov    -0xa0(%rbp),%rdx
   33f58:	mov    -0x98(%rbp),%rax
   33f5f:	add    %rdx,%rax
   33f62:	shl    $0x4,%rax
   33f66:	lea    (%rax,%rdx,4),%rax
   33f6a:	lea    (%rdx,%rax,1),%r9
   33f6e:	mov    %r9,-0x90(%rbp)
   33f75:	mov    %r9,%rax
   33f78:	shl    $0x4,%rax
   33f7c:	mov    %rax,-0x30(%rbp)
   33f80:	lea    (%rsi,%rax,1),%rdx
   33f84:	mov    %r10,%rax
   33f87:	sub    %r14,%rax
   33f8a:	mov    %rax,-0x18(%rbp)
   33f8e:	mov    -0x80(%rbp),%rsi
   33f92:	lea    (%rsi,%rax,1),%r11
   33f96:	lea    (%r11,%r11,4),%rax
   33f9a:	shl    $0x4,%rax
   33f9e:	lea    (%rax,%r11,4),%rax
   33fa2:	add    %r11,%rax
   33fa5:	shl    $0x4,%rax
   33fa9:	lea    (%rax,%r11,2),%rax
   33fad:	lea    (%rax,%rax,4),%r11
   33fb1:	mov    %r11,-0x20(%rbp)
   33fb5:	mov    %rsi,%rax
   33fb8:	shl    $0x8,%rax
   33fbc:	lea    (%rax,%rsi,8),%rax
   33fc0:	sub    %rsi,%rax
   33fc3:	shl    $0x4,%rax
   33fc7:	add    %rsi,%rax
   33fca:	add    %rax,%r11
   33fcd:	lea    (%r11,%rdx,1),%rax
   33fd1:	sar    $0xb,%rax
   33fd5:	mov    %eax,0x20(%rdi)
   33fd8:	sub    %r11,%rdx
   33fdb:	sar    $0xb,%rdx
   33fdf:	mov    %edx,0x1a0(%rdi)
   33fe5:	shl    $0x5,%r9
   33fe9:	lea    0x0(%r13,%r12,1),%rax
   33fee:	lea    0x0(%r13,%rax,2),%rax
   33ff3:	shl    $0x4,%rax
   33ff7:	add    %r12,%rax
   33ffa:	add    %r13,%rax
   33ffd:	shl    $0x6,%rax
   34001:	lea    (%rax,%r13,2),%rax
   34005:	mov    %rax,-0xa8(%rbp)
   3400c:	lea    0x400(%rbx),%rdx
   34013:	mov    %rdx,-0x88(%rbp)
   3401a:	neg    %rax
   3401d:	add    %rdx,%rax
   34020:	lea    (%rax,%r9,1),%r11
   34024:	lea    (%r14,%r15,1),%rax
   34028:	mov    %rsi,%r9
   3402b:	sub    %rax,%r9
   3402e:	lea    (%r9,%r9,2),%rax
   34032:	lea    (%r9,%rax,4),%rbx
   34036:	lea    (%r9,%r9,4),%rax
   3403a:	shl    $0x7,%rax
   3403e:	sub    %rbx,%rax
   34041:	shl    $0x4,%rax
   34045:	add    %r9,%rax
   34048:	add    %r11,%rax
   3404b:	sar    $0xb,%rax
   3404f:	mov    %eax,0x40(%rdi)
   34052:	mov    %r14,%rax
   34055:	sub    %rsi,%rax
   34058:	lea    (%r15,%rax,1),%rbx
   3405c:	lea    (%rbx,%rbx,2),%rax
   34060:	lea    (%rbx,%rax,4),%r9
   34064:	lea    (%rbx,%rbx,4),%rax
   34068:	shl    $0x7,%rax
   3406c:	sub    %r9,%rax
   3406f:	shl    $0x4,%rax
   34073:	add    %rbx,%rax
   34076:	add    %r11,%rax
   34079:	sar    $0xb,%rax
   3407d:	mov    %eax,0x180(%rdi)
   34083:	sub    %r12,%rcx
   34086:	mov    -0x8(%rbp),%rax
   3408a:	add    %rcx,%rax
   3408d:	sub    %rax,%rdx
   34090:	mov    -0x10(%rbp),%rax
   34094:	lea    (%rdx,%rax,1),%rcx
   34098:	mov    -0x70(%rbp),%r9
   3409c:	lea    (%r9,%r9,2),%rax
   340a0:	shl    $0x3,%rax
   340a4:	sub    %r9,%rax
   340a7:	shl    $0x5,%rax
   340ab:	add    %r9,%rax
   340ae:	shl    $0x4,%rax
   340b2:	lea    (%rax,%r9,2),%rax
   340b6:	lea    (%r9,%rax,1),%r11
   340ba:	lea    (%rcx,%r11,1),%rbx
   340be:	lea    (%rsi,%r14,1),%rcx
   340c2:	lea    (%rcx,%rcx,8),%rax
   340c6:	shl    $0x4,%rax
   340ca:	lea    (%rax,%rcx,2),%rax
   340ce:	add    %rcx,%rax
   340d1:	shl    $0x5,%rax
   340d5:	lea    (%rax,%rcx,8),%rdx
   340d9:	lea    (%rsi,%rsi,4),%rcx
   340dd:	mov    %rcx,%rax
   340e0:	shl    $0x5,%rax
   340e4:	lea    (%rax,%rcx,8),%rax
   340e8:	neg    %rax
   340eb:	add    %rsi,%rax
   340ee:	mov    %rsi,%rcx
   340f1:	shl    $0xc,%rcx
   340f5:	add    %rcx,%rax
   340f8:	lea    (%rdx,%rax,1),%r12
   340fc:	shl    $0x4,%r8
   34100:	lea    (%r8,%r10,4),%rax
   34104:	add    %r10,%rax
   34107:	shl    $0x4,%rax
   3410b:	lea    (%rax,%r10,2),%rax
   3410f:	lea    (%rax,%rax,4),%r13
   34113:	mov    -0x40(%rbp),%r10
   34117:	lea    0x0(%r13,%r10,1),%rax
   3411c:	mov    %r12,%rcx
   3411f:	sub    %rax,%rcx
   34122:	add    %rbx,%rcx
   34125:	sar    $0xb,%rcx
   34129:	mov    %ecx,0x60(%rdi)
   3412c:	sub    %r12,%rax
   3412f:	add    %rbx,%rax
   34132:	sar    $0xb,%rax
   34136:	mov    %eax,0x160(%rdi)
   3413c:	mov    -0x38(%rbp),%rax
   34140:	lea    0x400(%rax),%rcx
   34147:	mov    -0x28(%rbp),%rax
   3414b:	mov    %rcx,%rbx
   3414e:	sub    %rax,%rbx
   34151:	mov    -0x30(%rbp),%rax
   34155:	lea    (%rbx,%rax,1),%r12
   34159:	mov    -0x18(%rbp),%rbx
   3415d:	mov    %rbx,%rax
   34160:	shl    $0x5,%rax
   34164:	mov    %rbx,%r8
   34167:	shl    $0x9,%r8
   3416b:	add    %r8,%rax
   3416e:	lea    (%rax,%rbx,8),%rax
   34172:	lea    (%rax,%rbx,4),%rax
   34176:	add    %rbx,%rax
   34179:	shl    $0x5,%rax
   3417d:	lea    (%rax,%rbx,4),%rax
   34181:	mov    -0x20(%rbp),%r8
   34185:	mov    %r8,%rbx
   34188:	sub    %rax,%rbx
   3418b:	add    %r12,%rbx
   3418e:	sar    $0xb,%rbx
   34192:	mov    %ebx,0x80(%rdi)
   34198:	sub    %r8,%rax
   3419b:	add    %r12,%rax
   3419e:	sar    $0xb,%rax
   341a2:	mov    %eax,0x140(%rdi)
   341a8:	mov    -0x60(%rbp),%rax
   341ac:	shl    $0x4,%rax
   341b0:	mov    -0xa0(%rbp),%rbx
   341b7:	lea    (%rax,%rbx,2),%rax
   341bb:	add    %rbx,%rax
   341be:	shl    $0x6,%rax
   341c2:	lea    (%rax,%rbx,8),%rbx
   341c6:	mov    -0x68(%rbp),%rax
   341ca:	sub    %r9,%rax
   341cd:	lea    (%rbx,%rax,1),%r15
   341d1:	mov    -0x58(%rbp),%rbx
   341d5:	mov    %rbx,%rax
   341d8:	shl    $0x5,%rax
   341dc:	lea    (%rax,%rbx,2),%rax
   341e0:	add    %rbx,%rax
   341e3:	shl    $0x7,%rax
   341e7:	lea    (%rax,%rbx,2),%rbx
   341eb:	lea    (%r15,%rbx,1),%r12
   341ef:	mov    %rcx,%r8
   341f2:	sub    %r12,%r8
   341f5:	lea    (%r14,%r14,2),%r9
   341f9:	lea    (%r14,%r9,2),%rax
   341fd:	shl    $0x6,%rax
   34201:	sub    %r9,%rax
   34204:	shl    $0x4,%rax
   34208:	add    %r14,%rax
   3420b:	sub    %rax,%rdx
   3420e:	lea    (%rdx,%r10,1),%rax
   34212:	mov    -0x48(%rbp),%rdx
   34216:	sub    %rdx,%rax
   34219:	lea    (%r8,%rax,1),%rdx
   3421d:	sar    $0xb,%rdx
   34221:	mov    %edx,0xa0(%rdi)
   34227:	add    %r12,%rax
   3422a:	sub    %rax,%rcx
   3422d:	sar    $0xb,%rcx
   34231:	mov    %ecx,0x120(%rdi)
   34237:	mov    -0x50(%rbp),%rax
   3423b:	add    %rbx,%rax
   3423e:	lea    (%r11,%r15,1),%rbx
   34242:	mov    %rax,%rdx
   34245:	sub    %rbx,%rdx
   34248:	imul   $0x2399,%rsi,%rsi
   3424f:	add    %r13,%rsi
   34252:	mov    -0x78(%rbp),%rcx
   34256:	sub    %rsi,%rcx
   34259:	add    %rcx,%rdx
   3425c:	sar    $0xb,%rdx
   34260:	mov    %edx,0xc0(%rdi)
   34266:	add    %rbx,%rcx
   34269:	sub    %rcx,%rax
   3426c:	sar    $0xb,%rax
   34270:	mov    %eax,0x100(%rdi)
   34276:	mov    -0x90(%rbp),%rax
   3427d:	shl    $0x6,%rax
   34281:	mov    -0xa8(%rbp),%rcx
   34288:	add    %rax,%rcx
   3428b:	mov    -0x88(%rbp),%rax
   34292:	sub    %rcx,%rax
   34295:	sar    $0xb,%rax
   34299:	mov    %eax,0xe0(%rdi)
   3429f:	mov    -0xb8(%rbp),%rax
   342a6:	lea    0x2(%rax),%rcx
   342aa:	mov    -0xb0(%rbp),%rax
   342b1:	lea    0x2(%rax),%rdx
   342b5:	add    $0x4,%rdi
   342b9:	mov    -0x118(%rbp),%rax
   342c0:	lea    0x1(%rax),%esi
   342c3:	cmp    $0x7,%esi
   342c6:	jle    33d3c <jpeg_idct_15x15+0x5c>
   342cc:	mov    -0xd8(%rbp),%rax
   342d3:	mov    %eax,%r9d
   342d6:	mov    -0xe8(%rbp),%r15
   342dd:	lea    -0x2f8(%rbp),%rdi
   342e4:	xor    %esi,%esi
   342e6:	mov    -0xe0(%rbp),%rdx
   342ed:	jmpq   34968 <jpeg_idct_15x15+0xc88>
   342f2:	movslq 0x8(%rdi),%r8
   342f6:	mov    %r8,-0x98(%rbp)
   342fd:	movslq 0x10(%rdi),%rbx
   34301:	mov    %rbx,-0x58(%rbp)
   34305:	mov    %r8,%r14
   34308:	sub    %rbx,%r14
   3430b:	mov    %r14,-0x50(%rbp)
   3430f:	lea    (%r14,%r14,4),%rax
   34313:	lea    (%rax,%rax,1),%r13
   34317:	lea    (%r14,%r14,2),%rcx
   3431b:	mov    %rcx,-0x48(%rbp)
   3431f:	shl    $0x7,%rcx
   34323:	sub    %r13,%rcx
   34326:	mov    %rcx,-0x90(%rbp)
   3432d:	lea    (%rbx,%r8,1),%r10
   34331:	mov    %r10,-0x60(%rbp)
   34335:	lea    (%r10,%r10,4),%rax
   34339:	shl    $0x5,%rax
   3433d:	lea    (%rax,%r10,8),%rax
   34341:	lea    (%rax,%r10,2),%rax
   34345:	add    %r10,%rax
   34348:	shl    $0x6,%rax
   3434c:	lea    (%rax,%r10,8),%rax
   34350:	lea    (%rax,%r10,4),%rax
   34354:	lea    (%rax,%r10,2),%r8
   34358:	mov    %r8,-0x88(%rbp)
   3435f:	movslq 0x18(%rdi),%r11
   34363:	mov    %r11,-0xd0(%rbp)
   3436a:	mov    %r11,%rbx
   3436d:	shl    $0x2,%rbx
   34371:	mov    %rbx,-0xc8(%rbp)
   34378:	lea    (%r11,%r11,8),%rax
   3437c:	shl    $0x5,%rax
   34380:	add    %rbx,%rax
   34383:	add    %r11,%rax
   34386:	shl    $0x5,%rax
   3438a:	lea    (%r11,%r11,2),%rbx
   3438e:	mov    %rbx,-0xd8(%rbp)
   34395:	sub    %rbx,%rax
   34398:	mov    %rax,-0x70(%rbp)
   3439c:	movslq (%rdi),%rbx
   3439f:	shl    $0xd,%rbx
   343a3:	mov    %rbx,-0xc0(%rbp)
   343aa:	add    %rbx,%rax
   343ad:	add    %r8,%rax
   343b0:	add    %rax,%rcx
   343b3:	movslq 0x4(%rdi),%rax
   343b7:	mov    %rax,-0xb8(%rbp)
   343be:	movslq 0x1c(%rdi),%r11
   343c2:	sub    %r11,%rax
   343c5:	lea    (%rax,%rax,4),%rbx
   343c9:	shl    $0x3,%rbx
   343cd:	lea    (%rbx,%rax,4),%rbx
   343d1:	add    %rax,%rbx
   343d4:	shl    $0x8,%rbx
   343d8:	lea    (%rbx,%rax,2),%rbx
   343dc:	movslq 0x14(%rdi),%r12
   343e0:	lea    (%r12,%r12,2),%rax
   343e4:	lea    (%r12,%rax,4),%r8
   343e8:	lea    (%r12,%r12,4),%rax
   343ec:	shl    $0x7,%rax
   343f0:	sub    %r8,%rax
   343f3:	shl    $0x4,%rax
   343f7:	add    %r12,%rax
   343fa:	mov    %rax,-0xb0(%rbp)
   34401:	lea    (%rax,%rbx,1),%r8
   34405:	mov    %r8,-0x40(%rbp)
   34409:	lea    (%r11,%r11,4),%rax
   3440d:	lea    (%r11,%rax,2),%rbx
   34411:	shl    $0x7,%rax
   34415:	sub    %rbx,%rax
   34418:	shl    $0x5,%rax
   3441c:	lea    (%rax,%r11,2),%rax
   34420:	add    %r11,%rax
   34423:	add    %rax,%r8
   34426:	movslq 0xc(%rdi),%rbx
   3442a:	mov    %rdi,-0xe8(%rbp)
   34431:	mov    %rbx,-0xa8(%rbp)
   34438:	lea    (%rbx,%rbx,4),%rax
   3443c:	mov    %rax,-0xa0(%rbp)
   34443:	shl    $0x3,%rax
   34447:	lea    (%rax,%rbx,2),%rax
   3444b:	add    %rbx,%rax
   3444e:	shl    $0x8,%rax
   34452:	lea    (%rax,%rbx,8),%rax
   34456:	lea    (%rax,%rbx,2),%rax
   3445a:	mov    %rax,-0x68(%rbp)
   3445e:	lea    (%r8,%rax,1),%rdi
   34462:	lea    0x20000(%rcx,%rdi,1),%rax
   3446a:	sar    $0x12,%rax
   3446e:	and    $0x3ff,%eax
   34473:	movslq %eax,%rax
   34476:	movzbl 0x80(%r15,%rax,1),%eax
   3447f:	mov    %rsi,-0x118(%rbp)
   34486:	movslq %esi,%rsi
   34489:	mov    (%rdx,%rsi,8),%r8
   3448d:	mov    %al,(%r9,%r8,1)
   34491:	sub    %rdi,%rcx
   34494:	lea    0x20000(%rcx),%rax
   3449b:	sar    $0x12,%rax
   3449f:	and    $0x3ff,%eax
   344a4:	movslq %eax,%rax
   344a7:	movzbl 0x80(%r15,%rax,1),%eax
   344b0:	mov    %al,0xe(%r9,%r8,1)
   344b5:	lea    (%r14,%r13,1),%rax
   344b9:	shl    $0x4,%rax
   344bd:	lea    (%rax,%r14,4),%rax
   344c1:	lea    (%r14,%rax,1),%rsi
   344c5:	mov    %rsi,-0x28(%rbp)
   344c9:	mov    %rsi,%rcx
   344cc:	shl    $0x4,%rcx
   344d0:	mov    %rcx,-0x80(%rbp)
   344d4:	lea    (%r10,%r10,2),%rax
   344d8:	shl    $0x5,%rax
   344dc:	lea    (%rax,%r10,4),%rax
   344e0:	add    %r10,%rax
   344e3:	shl    $0x6,%rax
   344e7:	lea    (%rax,%r10,8),%rax
   344eb:	lea    (%rax,%r10,4),%rax
   344ef:	mov    %rax,-0x78(%rbp)
   344f3:	mov    -0xd0(%rbp),%r10
   344fa:	mov    -0xd8(%rbp),%rdx
   34501:	lea    (%r10,%rdx,2),%rdx
   34505:	shl    $0x9,%rdx
   34509:	mov    -0xc8(%rbp),%r14
   34510:	mov    %r14,%rdi
   34513:	sub    %rdx,%rdi
   34516:	mov    -0xc0(%rbp),%r13
   3451d:	lea    0x20000(%r13,%rdi,1),%rdi
   34525:	mov    %rdi,-0x38(%rbp)
   34529:	add    %rdi,%rax
   3452c:	add    %rcx,%rax
   3452f:	sub    %r11,%rbx
   34532:	mov    %rbx,-0xd0(%rbp)
   34539:	mov    -0xb8(%rbp),%rdi
   34540:	add    %rdi,%rbx
   34543:	lea    (%rbx,%rbx,4),%rcx
   34547:	shl    $0x4,%rcx
   3454b:	lea    (%rcx,%rbx,4),%rcx
   3454f:	add    %rbx,%rcx
   34552:	shl    $0x4,%rcx
   34556:	lea    (%rcx,%rbx,2),%rcx
   3455a:	lea    (%rcx,%rcx,4),%rbx
   3455e:	mov    %rbx,-0xc8(%rbp)
   34565:	mov    %rdi,%rcx
   34568:	shl    $0x8,%rcx
   3456c:	lea    (%rcx,%rdi,8),%rcx
   34570:	sub    %rdi,%rcx
   34573:	shl    $0x4,%rcx
   34577:	add    %rdi,%rcx
   3457a:	add    %rcx,%rbx
   3457d:	lea    (%rbx,%rax,1),%rcx
   34581:	sar    $0x12,%rcx
   34585:	and    $0x3ff,%ecx
   3458b:	movslq %ecx,%rcx
   3458e:	movzbl 0x80(%r15,%rcx,1),%ecx
   34597:	mov    %cl,0x1(%r9,%r8,1)
   3459c:	sub    %rbx,%rax
   3459f:	sar    $0x12,%rax
   345a3:	and    $0x3ff,%eax
   345a8:	movslq %eax,%rax
   345ab:	movzbl 0x80(%r15,%rax,1),%eax
   345b4:	mov    %al,0xd(%r9,%r8,1)
   345b9:	shl    $0x5,%rsi
   345bd:	lea    (%r10,%r14,1),%rax
   345c1:	lea    (%r10,%rax,2),%rax
   345c5:	shl    $0x4,%rax
   345c9:	add    %r14,%rax
   345cc:	add    %r10,%rax
   345cf:	shl    $0x6,%rax
   345d3:	lea    (%rax,%r10,2),%rax
   345d7:	mov    %rax,-0x30(%rbp)
   345db:	lea    0x20000(%r13),%rcx
   345e2:	mov    %rcx,-0x20(%rbp)
   345e6:	neg    %rax
   345e9:	add    %rcx,%rax
   345ec:	lea    (%rax,%rsi,1),%r10
   345f0:	lea    (%r11,%r12,1),%rax
   345f4:	mov    %rdi,%rbx
   345f7:	sub    %rax,%rbx
   345fa:	lea    (%rbx,%rbx,2),%rax
   345fe:	lea    (%rbx,%rax,4),%rsi
   34602:	lea    (%rbx,%rbx,4),%rax
   34606:	shl    $0x7,%rax
   3460a:	sub    %rsi,%rax
   3460d:	shl    $0x4,%rax
   34611:	add    %rbx,%rax
   34614:	add    %r10,%rax
   34617:	sar    $0x12,%rax
   3461b:	and    $0x3ff,%eax
   34620:	movslq %eax,%rax
   34623:	movzbl 0x80(%r15,%rax,1),%eax
   3462c:	mov    %al,0x2(%r9,%r8,1)
   34631:	mov    %r11,%rax
   34634:	sub    %rdi,%rax
   34637:	lea    (%r12,%rax,1),%rbx
   3463b:	lea    (%rbx,%rbx,2),%rax
   3463f:	lea    (%rbx,%rax,4),%rsi
   34643:	lea    (%rbx,%rbx,4),%rax
   34647:	shl    $0x7,%rax
   3464b:	sub    %rsi,%rax
   3464e:	shl    $0x4,%rax
   34652:	add    %rbx,%rax
   34655:	add    %r10,%rax
   34658:	sar    $0x12,%rax
   3465c:	and    $0x3ff,%eax
   34661:	movslq %eax,%rax
   34664:	movzbl 0x80(%r15,%rax,1),%eax
   3466d:	mov    %al,0xc(%r9,%r8,1)
   34672:	sub    %r14,%rdx
   34675:	mov    -0x88(%rbp),%rax
   3467c:	add    %rdx,%rax
   3467f:	sub    %rax,%rcx
   34682:	mov    -0x90(%rbp),%rax
   34689:	add    %rax,%rcx
   3468c:	mov    -0x98(%rbp),%r10
   34693:	lea    (%r10,%r10,2),%rax
   34697:	shl    $0x3,%rax
   3469b:	sub    %r10,%rax
   3469e:	shl    $0x5,%rax
   346a2:	add    %r10,%rax
   346a5:	shl    $0x4,%rax
   346a9:	lea    (%rax,%r10,2),%rax
   346ad:	lea    (%r10,%rax,1),%r12
   346b1:	lea    (%rcx,%r12,1),%rbx
   346b5:	mov    -0xa0(%rbp),%rax
   346bc:	shl    $0x4,%rax
   346c0:	mov    -0xa8(%rbp),%rcx
   346c7:	lea    (%rax,%rcx,4),%rax
   346cb:	add    %rcx,%rax
   346ce:	shl    $0x4,%rax
   346d2:	lea    (%rax,%rcx,2),%rax
   346d6:	lea    (%rax,%rax,4),%rax
   346da:	mov    %rax,-0xc0(%rbp)
   346e1:	mov    -0xb0(%rbp),%r14
   346e8:	lea    (%rax,%r14,1),%rcx
   346ec:	lea    (%rdi,%r11,1),%rdx
   346f0:	lea    (%rdx,%rdx,8),%rax
   346f4:	shl    $0x4,%rax
   346f8:	lea    (%rax,%rdx,2),%rax
   346fc:	add    %rdx,%rax
   346ff:	shl    $0x5,%rax
   34703:	lea    (%rax,%rdx,8),%rdx
   34707:	lea    (%rdi,%rdi,4),%rsi
   3470b:	mov    %rsi,%rax
   3470e:	shl    $0x5,%rax
   34712:	lea    (%rax,%rsi,8),%rax
   34716:	neg    %rax
   34719:	add    %rdi,%rax
   3471c:	shl    $0xc,%rdi
   34720:	add    %rdi,%rax
   34723:	lea    (%rdx,%rax,1),%rsi
   34727:	mov    %rsi,%rax
   3472a:	sub    %rcx,%rax
   3472d:	add    %rbx,%rax
   34730:	sar    $0x12,%rax
   34734:	and    $0x3ff,%eax
   34739:	movslq %eax,%rax
   3473c:	movzbl 0x80(%r15,%rax,1),%eax
   34745:	mov    %al,0x3(%r9,%r8,1)
   3474a:	sub    %rsi,%rcx
   3474d:	lea    (%rbx,%rcx,1),%rax
   34751:	sar    $0x12,%rax
   34755:	and    $0x3ff,%eax
   3475a:	movslq %eax,%rax
   3475d:	movzbl 0x80(%r15,%rax,1),%eax
   34766:	mov    %al,0xb(%r9,%r8,1)
   3476b:	mov    -0x70(%rbp),%rax
   3476f:	lea    0x20000(%r13,%rax,1),%rcx
   34777:	mov    -0x78(%rbp),%rax
   3477b:	neg    %rax
   3477e:	add    %rcx,%rax
   34781:	mov    -0x80(%rbp),%rsi
   34785:	lea    (%rax,%rsi,1),%rdi
   34789:	mov    -0xd0(%rbp),%rbx
   34790:	mov    %rbx,%rsi
   34793:	shl    $0x5,%rsi
   34797:	mov    %rbx,%rax
   3479a:	shl    $0x9,%rax
   3479e:	add    %rsi,%rax
   347a1:	lea    (%rax,%rbx,8),%rax
   347a5:	lea    (%rax,%rbx,4),%rax
   347a9:	add    %rbx,%rax
   347ac:	shl    $0x5,%rax
   347b0:	lea    (%rax,%rbx,4),%rsi
   347b4:	mov    -0xc8(%rbp),%rbx
   347bb:	mov    %rbx,%rax
   347be:	sub    %rsi,%rax
   347c1:	add    %rdi,%rax
   347c4:	sar    $0x12,%rax
   347c8:	and    $0x3ff,%eax
   347cd:	movslq %eax,%rax
   347d0:	movzbl 0x80(%r15,%rax,1),%eax
   347d9:	mov    %al,0x4(%r9,%r8,1)
   347de:	sub    %rbx,%rsi
   347e1:	lea    (%rsi,%rdi,1),%rax
   347e5:	sar    $0x12,%rax
   347e9:	and    $0x3ff,%eax
   347ee:	movslq %eax,%rax
   347f1:	movzbl 0x80(%r15,%rax,1),%eax
   347fa:	mov    %al,0xa(%r9,%r8,1)
   347ff:	mov    -0x60(%rbp),%rsi
   34803:	mov    %rsi,%rax
   34806:	shl    $0x5,%rax
   3480a:	lea    (%rax,%rsi,2),%rax
   3480e:	add    %rsi,%rax
   34811:	shl    $0x7,%rax
   34815:	lea    (%rax,%rsi,2),%r13
   34819:	mov    -0x48(%rbp),%rax
   3481d:	shl    $0x4,%rax
   34821:	mov    -0x50(%rbp),%rsi
   34825:	lea    (%rax,%rsi,2),%rax
   34829:	add    %rsi,%rax
   3482c:	shl    $0x6,%rax
   34830:	lea    (%rax,%rsi,8),%rsi
   34834:	mov    -0x58(%rbp),%rax
   34838:	sub    %r10,%rax
   3483b:	lea    (%rsi,%rax,1),%r10
   3483f:	lea    (%r10,%r13,1),%rbx
   34843:	mov    %rcx,%rsi
   34846:	sub    %rbx,%rsi
   34849:	lea    (%r11,%r11,2),%rdi
   3484d:	lea    (%r11,%rdi,2),%rax
   34851:	shl    $0x6,%rax
   34855:	sub    %rdi,%rax
   34858:	shl    $0x4,%rax
   3485c:	add    %r11,%rax
   3485f:	sub    %rax,%rdx
   34862:	add    %r14,%rdx
   34865:	mov    -0x68(%rbp),%rax
   34869:	sub    %rax,%rdx
   3486c:	lea    (%rsi,%rdx,1),%rax
   34870:	sar    $0x12,%rax
   34874:	and    $0x3ff,%eax
   34879:	movslq %eax,%rax
   3487c:	movzbl 0x80(%r15,%rax,1),%eax
   34885:	mov    %al,0x5(%r9,%r8,1)
   3488a:	lea    (%rbx,%rdx,1),%rax
   3488e:	sub    %rax,%rcx
   34891:	sar    $0x12,%rcx
   34895:	and    $0x3ff,%ecx
   3489b:	movslq %ecx,%rax
   3489e:	movzbl 0x80(%r15,%rax,1),%eax
   348a7:	mov    %al,0x9(%r9,%r8,1)
   348ac:	mov    -0x38(%rbp),%rax
   348b0:	add    %r13,%rax
   348b3:	lea    (%r12,%r10,1),%rdi
   348b7:	mov    %rax,%rsi
   348ba:	sub    %rdi,%rsi
   348bd:	mov    -0xb8(%rbp),%rcx
   348c4:	imul   $0x2399,%rcx,%rcx
   348cb:	mov    -0xc0(%rbp),%rdx
   348d2:	add    %rdx,%rcx
   348d5:	mov    -0x40(%rbp),%rdx
   348d9:	sub    %rcx,%rdx
   348dc:	lea    (%rsi,%rdx,1),%rcx
   348e0:	sar    $0x12,%rcx
   348e4:	and    $0x3ff,%ecx
   348ea:	movslq %ecx,%rcx
   348ed:	movzbl 0x80(%r15,%rcx,1),%ecx
   348f6:	mov    %cl,0x6(%r9,%r8,1)
   348fb:	lea    (%rdi,%rdx,1),%rcx
   348ff:	sub    %rcx,%rax
   34902:	sar    $0x12,%rax
   34906:	and    $0x3ff,%eax
   3490b:	movslq %eax,%rax
   3490e:	movzbl 0x80(%r15,%rax,1),%eax
   34917:	mov    %al,0x8(%r9,%r8,1)
   3491c:	mov    -0x28(%rbp),%rax
   34920:	shl    $0x6,%rax
   34924:	mov    -0x30(%rbp),%rcx
   34928:	add    %rax,%rcx
   3492b:	mov    -0x20(%rbp),%rax
   3492f:	sub    %rcx,%rax
   34932:	sar    $0x12,%rax
   34936:	and    $0x3ff,%eax
   3493b:	movslq %eax,%rax
   3493e:	movzbl 0x80(%rax,%r15,1),%eax
   34947:	mov    %al,0x7(%r9,%r8,1)
   3494c:	mov    -0x118(%rbp),%rax
   34953:	lea    0x1(%rax),%esi
   34956:	mov    -0xe8(%rbp),%rax
   3495d:	lea    0x20(%rax),%rdi
   34961:	mov    -0xe0(%rbp),%rdx
   34968:	cmp    $0xe,%esi
   3496b:	jle    342f2 <jpeg_idct_15x15+0x612>
   34971:	mov    -0x110(%rbp),%r15
   34978:	mov    -0x108(%rbp),%r14
   3497f:	mov    -0x100(%rbp),%r13
   34986:	mov    -0xf8(%rbp),%r12
   3498d:	mov    -0xf0(%rbp),%rbx
   34994:	leaveq 
   34995:	retq   
   34996:	nopw   %cs:0x0(%rax,%rax,1)

00000000000349a0 <jpeg_idct_16x16>:
   349a0:	push   %rbp
   349a1:	mov    %rsp,%rbp
   349a4:	sub    $0x2f0,%rsp
   349ab:	mov    %r8,-0xb0(%rbp)
   349b2:	mov    %rcx,-0xb8(%rbp)
   349b9:	mov    %rbx,-0xc8(%rbp)
   349c0:	mov    %r12,-0xd0(%rbp)
   349c7:	mov    %r13,-0xd8(%rbp)
   349ce:	mov    %r14,-0xe0(%rbp)
   349d5:	mov    %r15,-0xe8(%rbp)
   349dc:	mov    0x1a8(%rdi),%rax
   349e3:	mov    %rax,-0xc0(%rbp)
   349ea:	mov    0x58(%rsi),%rcx
   349ee:	xor    %esi,%esi
   349f0:	lea    -0x2f0(%rbp),%rdi
   349f7:	jmpq   34f91 <jpeg_idct_16x16+0x5f1>
   349fc:	movswq 0x20(%rcx),%rax
   34a01:	movswq 0x20(%rdx),%rbx
   34a06:	imul   %ebx,%eax
   34a09:	movslq %eax,%r12
   34a0c:	movswq 0x60(%rcx),%rax
   34a11:	movswq 0x60(%rdx),%rbx
   34a16:	imul   %ebx,%eax
   34a19:	movslq %eax,%r8
   34a1c:	mov    %r8,-0x10(%rbp)
   34a20:	mov    %r12,%r10
   34a23:	sub    %r8,%r10
   34a26:	lea    (%r10,%r10,4),%rax
   34a2a:	lea    (%r10,%rax,2),%rax
   34a2e:	shl    $0x5,%rax
   34a32:	lea    (%rax,%r10,2),%rax
   34a36:	add    %r10,%rax
   34a39:	shl    $0x5,%rax
   34a3d:	lea    (%rax,%r10,2),%rax
   34a41:	lea    (%r10,%rax,1),%rbx
   34a45:	mov    %rbx,-0x30(%rbp)
   34a49:	lea    (%r8,%r8,4),%rax
   34a4d:	lea    (%r8,%rax,8),%rax
   34a51:	shl    $0x9,%rax
   34a55:	lea    (%rax,%r8,2),%rax
   34a59:	add    %r8,%rax
   34a5c:	lea    (%rbx,%rax,1),%r8
   34a60:	mov    %r8,-0x60(%rbp)
   34a64:	movswq 0x40(%rcx),%rax
   34a69:	movswq 0x40(%rdx),%rbx
   34a6e:	imul   %ebx,%eax
   34a71:	movslq %eax,%r9
   34a74:	lea    (%r9,%r9,4),%rax
   34a78:	lea    (%r9,%rax,4),%rax
   34a7c:	shl    $0x9,%rax
   34a80:	mov    %rax,-0x20(%rbp)
   34a84:	lea    (%r9,%r9,2),%rbx
   34a88:	shl    $0x4,%rbx
   34a8c:	add    %r9,%rbx
   34a8f:	mov    %rbx,-0x18(%rbp)
   34a93:	sub    %rbx,%rax
   34a96:	movswq (%rcx),%rbx
   34a9a:	mov    %rsi,-0xf0(%rbp)
   34aa1:	movswq (%rdx),%rsi
   34aa5:	imul   %esi,%ebx
   34aa8:	movslq %ebx,%rsi
   34aab:	shl    $0xd,%rsi
   34aaf:	add    %rsi,%rax
   34ab2:	mov    %rax,-0x58(%rbp)
   34ab6:	lea    (%r8,%rax,1),%r14
   34aba:	movswq 0x50(%rcx),%rax
   34abf:	movswq 0x50(%rdx),%rbx
   34ac4:	imul   %ebx,%eax
   34ac7:	movslq %eax,%r15
   34aca:	movswq 0x10(%rcx),%rax
   34acf:	movswq 0x10(%rdx),%rbx
   34ad4:	imul   %ebx,%eax
   34ad7:	movslq %eax,%r8
   34ada:	mov    %r8,-0x80(%rbp)
   34ade:	lea    (%r15,%r8,1),%r11
   34ae2:	mov    %r11,-0x70(%rbp)
   34ae6:	lea    (%r11,%r11,2),%rax
   34aea:	shl    $0x3,%rax
   34aee:	mov    %r11,%rbx
   34af1:	sub    %rax,%rbx
   34af4:	lea    (%r11,%r11,4),%rax
   34af8:	mov    %rax,-0x68(%rbp)
   34afc:	shl    $0xb,%rax
   34b00:	add    %rax,%rbx
   34b03:	mov    %rbx,-0x8(%rbp)
   34b07:	movswq 0x30(%rcx),%rax
   34b0c:	movswq 0x30(%rdx),%r11
   34b11:	imul   %r11d,%eax
   34b15:	movslq %eax,%r13
   34b18:	mov    %r13,-0x78(%rbp)
   34b1c:	lea    (%r8,%r13,1),%r11
   34b20:	lea    (%r11,%r11,4),%rax
   34b24:	shl    $0x5,%rax
   34b28:	lea    (%rax,%r11,8),%rax
   34b2c:	lea    (%rax,%r11,4),%rax
   34b30:	add    %r11,%rax
   34b33:	shl    $0x6,%rax
   34b37:	lea    (%rax,%r11,8),%rax
   34b3b:	lea    (%rax,%r11,4),%rax
   34b3f:	lea    (%rax,%r11,2),%r11
   34b43:	lea    (%rbx,%r11,1),%rax
   34b47:	mov    %rcx,-0xa8(%rbp)
   34b4e:	movswq 0x70(%rcx),%rcx
   34b53:	mov    %rdx,-0x88(%rbp)
   34b5a:	movswq 0x70(%rdx),%rdx
   34b5f:	imul   %edx,%ecx
   34b62:	movslq %ecx,%rbx
   34b65:	lea    (%r8,%rbx,1),%rdx
   34b69:	mov    %rdx,%rcx
   34b6c:	shl    $0x5,%rcx
   34b70:	lea    (%rcx,%rdx,2),%rcx
   34b74:	add    %rdx,%rcx
   34b77:	shl    $0x8,%rcx
   34b7b:	shl    $0x2,%rdx
   34b7f:	sub    %rdx,%rcx
   34b82:	lea    (%rax,%rcx,1),%rdx
   34b86:	lea    (%r8,%r8,8),%rax
   34b8a:	shl    $0x6,%rax
   34b8e:	lea    (%rax,%r8,8),%rax
   34b92:	add    %r8,%rax
   34b95:	shl    $0x5,%rax
   34b99:	lea    (%rax,%r8,8),%rax
   34b9d:	lea    (%rax,%r8,2),%rax
   34ba1:	mov    %rdx,%r8
   34ba4:	sub    %rax,%r8
   34ba7:	lea    0x400(%r14,%r8,1),%r8
   34baf:	sar    $0xb,%r8
   34bb3:	mov    %r8d,(%rdi)
   34bb6:	sub    %rdx,%rax
   34bb9:	lea    0x400(%r14,%rax,1),%rax
   34bc1:	sar    $0xb,%rax
   34bc5:	mov    %eax,0x1e0(%rdi)
   34bcb:	lea    (%r15,%r13,1),%rdx
   34bcf:	lea    (%rdx,%rdx,8),%rax
   34bd3:	shl    $0x3,%rax
   34bd7:	sub    %rdx,%rax
   34bda:	shl    $0x4,%rax
   34bde:	lea    0x0(%r13,%r13,8),%rdx
   34be3:	shl    $0x6,%rdx
   34be7:	lea    (%rdx,%r13,8),%rdx
   34beb:	lea    (%rdx,%r13,4),%rdx
   34bef:	add    %r13,%rdx
   34bf2:	add    %rax,%rdx
   34bf5:	add    %r11,%rdx
   34bf8:	lea    (%rbx,%r13,1),%r8
   34bfc:	mov    %r8,-0x50(%rbp)
   34c00:	imul   $0xffffffffffffeaab,%r8,%r8
   34c07:	lea    (%r8,%rdx,1),%r14
   34c0b:	lea    (%r10,%r10,2),%rdx
   34c0f:	lea    (%r10,%rdx,2),%rdx
   34c13:	shl    $0x6,%rdx
   34c17:	lea    (%rdx,%r10,4),%rdx
   34c1b:	lea    (%rdx,%rdx,4),%r13
   34c1f:	mov    %r12,%rdx
   34c22:	imul   $0x1ccd,%rdx,%rdx
   34c29:	lea    (%rdx,%r13,1),%r10
   34c2d:	mov    %r10,-0x48(%rbp)
   34c31:	mov    %r9,%r11
   34c34:	shl    $0x4,%r11
   34c38:	mov    %r9,%rdx
   34c3b:	shl    $0x8,%rdx
   34c3f:	add    %r11,%rdx
   34c42:	lea    (%rdx,%r9,4),%rdx
   34c46:	add    %r9,%rdx
   34c49:	shl    $0x4,%rdx
   34c4d:	lea    (%r9,%rdx,1),%r11
   34c51:	lea    (%rsi,%r11,1),%rdx
   34c55:	mov    %rdx,-0x40(%rbp)
   34c59:	lea    (%r10,%rdx,1),%r9
   34c5d:	lea    0x400(%r14,%r9,1),%rdx
   34c65:	sar    $0xb,%rdx
   34c69:	mov    %edx,0x20(%rdi)
   34c6c:	lea    0x400(%r9),%rdx
   34c73:	sub    %r14,%rdx
   34c76:	sar    $0xb,%rdx
   34c7a:	mov    %edx,0x1c0(%rdi)
   34c80:	lea    (%r15,%r15,2),%r9
   34c84:	mov    %r9,%rdx
   34c87:	shl    $0xa,%rdx
   34c8b:	lea    (%rdx,%r15,2),%rdx
   34c8f:	lea    (%rdx,%rdx,2),%rdx
   34c93:	sub    %rdx,%rax
   34c96:	mov    -0x8(%rbp),%rdx
   34c9a:	add    %rdx,%rax
   34c9d:	lea    (%r15,%rbx,1),%rdx
   34ca1:	imul   $0xffffffffffffd4b2,%rdx,%rdx
   34ca8:	lea    (%rdx,%rax,1),%r14
   34cac:	mov    %r12,%r10
   34caf:	shl    $0x2,%r10
   34cb3:	lea    (%r12,%r12,8),%rax
   34cb7:	lea    (%r10,%rax,8),%rax
   34cbb:	lea    (%r12,%rax,1),%r10
   34cbf:	shl    $0x6,%r10
   34cc3:	mov    %r10,-0x28(%rbp)
   34cc7:	lea    (%r12,%r12,1),%rax
   34ccb:	mov    %rax,-0x38(%rbp)
   34ccf:	sub    %r10,%rax
   34cd2:	mov    -0x30(%rbp),%r12
   34cd6:	add    %r12,%rax
   34cd9:	lea    0x400(%rsi),%r10
   34ce0:	sub    %r11,%r10
   34ce3:	add    %r10,%rax
   34ce6:	lea    (%r14,%rax,1),%r11
   34cea:	sar    $0xb,%r11
   34cee:	mov    %r11d,0x40(%rdi)
   34cf2:	sub    %r14,%rax
   34cf5:	sar    $0xb,%rax
   34cf9:	mov    %eax,0x1a0(%rdi)
   34cff:	mov    %rbx,%r11
   34d02:	shl    $0x5,%r11
   34d06:	mov    %rbx,%rax
   34d09:	shl    $0x9,%rax
   34d0d:	add    %r11,%rax
   34d10:	add    %rbx,%rax
   34d13:	shl    $0x4,%rax
   34d17:	lea    (%rax,%rbx,8),%rax
   34d1b:	add    %r8,%rax
   34d1e:	add    %rcx,%rax
   34d21:	lea    (%rdx,%rax,1),%r14
   34d25:	mov    -0x10(%rbp),%rax
   34d29:	mov    %rax,%rcx
   34d2c:	shl    $0x8,%rcx
   34d30:	lea    (%rcx,%rax,4),%rcx
   34d34:	add    %rcx,%rax
   34d37:	shl    $0x4,%rax
   34d3b:	mov    %r13,%r11
   34d3e:	sub    %rax,%r11
   34d41:	mov    -0x20(%rbp),%rdx
   34d45:	mov    -0x18(%rbp),%rcx
   34d49:	sub    %rdx,%rcx
   34d4c:	lea    0x400(%rsi,%rcx,1),%r8
   34d54:	lea    (%r11,%r8,1),%rcx
   34d58:	lea    (%r14,%rcx,1),%rdx
   34d5c:	sar    $0xb,%rdx
   34d60:	mov    %edx,0x60(%rdi)
   34d63:	sub    %r14,%rcx
   34d66:	sar    $0xb,%rcx
   34d6a:	mov    %ecx,0x180(%rdi)
   34d70:	mov    -0x80(%rbp),%rcx
   34d74:	mov    %rcx,%rsi
   34d77:	sub    %rbx,%rsi
   34d7a:	lea    (%rsi,%rsi,8),%rdx
   34d7e:	shl    $0x4,%rdx
   34d82:	lea    (%rdx,%rsi,8),%rdx
   34d86:	add    %rsi,%rdx
   34d89:	shl    $0x4,%rdx
   34d8d:	lea    (%rdx,%rsi,2),%rdx
   34d91:	lea    (%rdx,%rdx,2),%r14
   34d95:	mov    -0x50(%rbp),%rsi
   34d99:	lea    (%rsi,%rsi,2),%rdx
   34d9d:	shl    $0x3,%rdx
   34da1:	mov    %rsi,%r11
   34da4:	sub    %rdx,%r11
   34da7:	lea    (%rsi,%rsi,4),%rdx
   34dab:	shl    $0xb,%rdx
   34daf:	add    %rdx,%r11
   34db2:	lea    (%rbx,%rbx,2),%rdx
   34db6:	shl    $0x6,%rdx
   34dba:	lea    (%rdx,%rbx,8),%rdx
   34dbe:	add    %rbx,%rdx
   34dc1:	shl    $0x7,%rdx
   34dc5:	lea    (%rdx,%rbx,4),%rdx
   34dc9:	add    %rbx,%rdx
   34dcc:	sub    %r11,%rdx
   34dcf:	lea    (%r14,%rdx,1),%rsi
   34dd3:	sub    %r15,%rbx
   34dd6:	mov    %rbx,%rdx
   34dd9:	shl    $0x5,%rdx
   34ddd:	lea    (%rdx,%rbx,2),%rdx
   34de1:	add    %rbx,%rdx
   34de4:	shl    $0x5,%rdx
   34de8:	add    %rbx,%rdx
   34deb:	lea    (%rdx,%rdx,2),%rbx
   34def:	add    %rbx,%rsi
   34df2:	sub    %r13,%rax
   34df5:	add    %r8,%rax
   34df8:	lea    (%rsi,%rax,1),%rdx
   34dfc:	sar    $0xb,%rdx
   34e00:	mov    %edx,0x80(%rdi)
   34e06:	sub    %rsi,%rax
   34e09:	sar    $0xb,%rax
   34e0d:	mov    %eax,0x160(%rdi)
   34e13:	mov    -0x78(%rbp),%rsi
   34e17:	mov    %r15,%rdx
   34e1a:	sub    %rsi,%rdx
   34e1d:	lea    (%rdx,%rdx,4),%rax
   34e21:	shl    $0x8,%rax
   34e25:	add    %rdx,%rax
   34e28:	lea    (%rax,%rax,8),%r13
   34e2c:	shl    $0x4,%r9
   34e30:	lea    (%r15,%r9,1),%rax
   34e34:	shl    $0x7,%rax
   34e38:	lea    (%rax,%r15,4),%rax
   34e3c:	lea    (%rax,%r15,2),%rax
   34e40:	mov    %r13,%r9
   34e43:	sub    %rax,%r9
   34e46:	mov    -0x68(%rbp),%rax
   34e4a:	mov    -0x70(%rbp),%rdx
   34e4e:	lea    (%rdx,%rax,4),%rax
   34e52:	shl    $0x4,%rax
   34e56:	lea    (%rax,%rdx,4),%rax
   34e5a:	add    %rdx,%rax
   34e5d:	shl    $0x4,%rax
   34e61:	lea    (%rax,%rdx,4),%rax
   34e65:	lea    (%rdx,%rax,1),%r8
   34e69:	lea    (%r9,%r8,1),%rax
   34e6d:	add    %rax,%rbx
   34e70:	mov    -0x38(%rbp),%rax
   34e74:	lea    (%r12,%rax,1),%rdx
   34e78:	mov    -0x28(%rbp),%rax
   34e7c:	sub    %rdx,%rax
   34e7f:	add    %r10,%rax
   34e82:	lea    (%rbx,%rax,1),%rdx
   34e86:	sar    $0xb,%rdx
   34e8a:	mov    %edx,0xa0(%rdi)
   34e90:	sub    %rbx,%rax
   34e93:	sar    $0xb,%rax
   34e97:	mov    %eax,0x140(%rdi)
   34e9d:	lea    (%rsi,%rsi,4),%rax
   34ea1:	shl    $0x3,%rax
   34ea5:	lea    (%rax,%rsi,4),%rax
   34ea9:	lea    (%rax,%rsi,2),%rax
   34ead:	lea    (%rax,%rax,4),%rdx
   34eb1:	mov    %rsi,%rax
   34eb4:	shl    $0xe,%rax
   34eb8:	sub    %rdx,%rax
   34ebb:	lea    0x0(%r13,%rax,1),%rdx
   34ec0:	neg    %rsi
   34ec3:	add    %rcx,%rsi
   34ec6:	mov    %rsi,%rax
   34ec9:	shl    $0x5,%rax
   34ecd:	lea    (%rax,%rsi,2),%rax
   34ed1:	add    %rsi,%rax
   34ed4:	shl    $0x5,%rax
   34ed8:	add    %rsi,%rax
   34edb:	lea    (%rax,%rax,2),%r9
   34edf:	add    %r9,%rdx
   34ee2:	sub    %r11,%rdx
   34ee5:	mov    -0x40(%rbp),%rax
   34ee9:	add    $0x400,%rax
   34eef:	mov    -0x48(%rbp),%rbx
   34ef3:	mov    %rax,%rsi
   34ef6:	sub    %rbx,%rsi
   34ef9:	add    %rdx,%rsi
   34efc:	sar    $0xb,%rsi
   34f00:	mov    %esi,0xc0(%rdi)
   34f06:	add    %rbx,%rdx
   34f09:	sub    %rdx,%rax
   34f0c:	sar    $0xb,%rax
   34f10:	mov    %eax,0x120(%rdi)
   34f16:	mov    -0x58(%rbp),%rax
   34f1a:	add    $0x400,%rax
   34f20:	mov    -0x60(%rbp),%rdx
   34f24:	sub    %rdx,%rax
   34f27:	lea    (%r14,%r8,1),%rdx
   34f2b:	lea    (%rdx,%r9,1),%rbx
   34f2f:	lea    (%rcx,%rcx,4),%rdx
   34f33:	lea    (%rcx,%rdx,4),%rdx
   34f37:	shl    $0x6,%rdx
   34f3b:	lea    (%rdx,%rcx,2),%rsi
   34f3f:	shl    $0xe,%rcx
   34f43:	mov    %rsi,%rdx
   34f46:	sub    %rcx,%rdx
   34f49:	add    %rbx,%rdx
   34f4c:	add    %rax,%rdx
   34f4f:	sar    $0xb,%rdx
   34f53:	mov    %edx,0xe0(%rdi)
   34f59:	lea    (%rbx,%rsi,1),%rdx
   34f5d:	sub    %rdx,%rcx
   34f60:	add    %rcx,%rax
   34f63:	sar    $0xb,%rax
   34f67:	mov    %eax,0x100(%rdi)
   34f6d:	mov    -0xa8(%rbp),%rax
   34f74:	lea    0x2(%rax),%rcx
   34f78:	mov    -0x88(%rbp),%rax
   34f7f:	lea    0x2(%rax),%rdx
   34f83:	add    $0x4,%rdi
   34f87:	mov    -0xf0(%rbp),%rax
   34f8e:	lea    0x1(%rax),%esi
   34f91:	cmp    $0x7,%esi
   34f94:	jle    349fc <jpeg_idct_16x16+0x5c>
   34f9a:	mov    -0xb0(%rbp),%rax
   34fa1:	mov    %eax,%r10d
   34fa4:	mov    -0xc0(%rbp),%r15
   34fab:	lea    -0x2f0(%rbp),%rsi
   34fb2:	xor    %edx,%edx
   34fb4:	mov    -0xb8(%rbp),%rcx
   34fbb:	jmpq   3566c <jpeg_idct_16x16+0xccc>
   34fc0:	movslq 0x8(%rsi),%rbx
   34fc4:	mov    %rbx,-0xa0(%rbp)
   34fcb:	movslq 0x18(%rsi),%r8
   34fcf:	mov    %r8,-0x78(%rbp)
   34fd3:	sub    %r8,%rbx
   34fd6:	lea    (%rbx,%rbx,4),%rax
   34fda:	lea    (%rbx,%rax,2),%rax
   34fde:	shl    $0x5,%rax
   34fe2:	lea    (%rax,%rbx,2),%rax
   34fe6:	add    %rbx,%rax
   34fe9:	shl    $0x5,%rax
   34fed:	lea    (%rax,%rbx,2),%rax
   34ff1:	lea    (%rbx,%rax,1),%rdi
   34ff5:	mov    %rdi,-0x98(%rbp)
   34ffc:	lea    (%r8,%r8,4),%rax
   35000:	lea    (%r8,%rax,8),%rax
   35004:	shl    $0x9,%rax
   35008:	lea    (%rax,%r8,2),%rax
   3500c:	add    %r8,%rax
   3500f:	lea    (%rdi,%rax,1),%r8
   35013:	mov    %r8,-0x28(%rbp)
   35017:	movslq 0x10(%rsi),%r9
   3501b:	mov    %r9,-0xb0(%rbp)
   35022:	lea    (%r9,%r9,4),%rax
   35026:	lea    (%r9,%rax,4),%rax
   3502a:	shl    $0x9,%rax
   3502e:	mov    %rax,-0x88(%rbp)
   35035:	lea    (%r9,%r9,2),%rdi
   35039:	shl    $0x4,%rdi
   3503d:	add    %r9,%rdi
   35040:	mov    %rdi,-0x80(%rbp)
   35044:	sub    %rdi,%rax
   35047:	mov    %rax,-0x20(%rbp)
   3504b:	movslq (%rsi),%rdi
   3504e:	shl    $0xd,%rdi
   35052:	mov    %rdi,-0xa8(%rbp)
   35059:	add    %rdi,%rax
   3505c:	add    %rax,%r8
   3505f:	movslq 0x4(%rsi),%r9
   35063:	mov    %r9,-0x58(%rbp)
   35067:	movslq 0x14(%rsi),%r14
   3506b:	lea    (%r14,%r9,1),%r11
   3506f:	mov    %r11,-0x50(%rbp)
   35073:	lea    (%r11,%r11,2),%rax
   35077:	shl    $0x3,%rax
   3507b:	mov    %r11,%rdi
   3507e:	sub    %rax,%rdi
   35081:	lea    (%r11,%r11,4),%rax
   35085:	mov    %rax,-0x48(%rbp)
   35089:	shl    $0xb,%rax
   3508d:	lea    (%rax,%rdi,1),%r11
   35091:	mov    %r11,-0x90(%rbp)
   35098:	movslq 0xc(%rsi),%r13
   3509c:	mov    %r13,-0x40(%rbp)
   350a0:	lea    (%r9,%r13,1),%rdi
   350a4:	lea    (%rdi,%rdi,4),%rax
   350a8:	shl    $0x5,%rax
   350ac:	lea    (%rax,%rdi,8),%rax
   350b0:	lea    (%rax,%rdi,4),%rax
   350b4:	add    %rdi,%rax
   350b7:	shl    $0x6,%rax
   350bb:	lea    (%rax,%rdi,8),%rax
   350bf:	lea    (%rax,%rdi,4),%rax
   350c3:	lea    (%rax,%rdi,2),%r12
   350c7:	add    %r12,%r11
   350ca:	mov    %rsi,-0xc0(%rbp)
   350d1:	movslq 0x1c(%rsi),%rdi
   350d5:	lea    (%r9,%rdi,1),%rsi
   350d9:	mov    %rsi,%rax
   350dc:	shl    $0x5,%rax
   350e0:	lea    (%rax,%rsi,2),%rax
   350e4:	add    %rsi,%rax
   350e7:	shl    $0x8,%rax
   350eb:	shl    $0x2,%rsi
   350ef:	sub    %rsi,%rax
   350f2:	mov    %rax,-0x70(%rbp)
   350f6:	add    %rax,%r11
   350f9:	lea    (%r9,%r9,8),%rax
   350fd:	shl    $0x6,%rax
   35101:	lea    (%rax,%r9,8),%rax
   35105:	add    %r9,%rax
   35108:	shl    $0x5,%rax
   3510c:	lea    (%rax,%r9,8),%rax
   35110:	lea    (%rax,%r9,2),%rsi
   35114:	mov    %r11,%rax
   35117:	sub    %rsi,%rax
   3511a:	lea    0x20000(%rax,%r8,1),%rax
   35122:	sar    $0x12,%rax
   35126:	and    $0x3ff,%eax
   3512b:	movslq %eax,%rax
   3512e:	movzbl 0x80(%r15,%rax,1),%eax
   35137:	mov    %rdx,-0xf0(%rbp)
   3513e:	movslq %edx,%rdx
   35141:	mov    (%rcx,%rdx,8),%r9
   35145:	mov    %al,(%r10,%r9,1)
   35149:	sub    %r11,%rsi
   3514c:	lea    0x20000(%rsi,%r8,1),%rax
   35154:	sar    $0x12,%rax
   35158:	and    $0x3ff,%eax
   3515d:	movslq %eax,%rax
   35160:	movzbl 0x80(%r15,%rax,1),%eax
   35169:	mov    %al,0xf(%r10,%r9,1)
   3516e:	lea    (%r14,%r13,1),%rcx
   35172:	lea    (%rcx,%rcx,8),%rax
   35176:	shl    $0x3,%rax
   3517a:	sub    %rcx,%rax
   3517d:	shl    $0x4,%rax
   35181:	lea    0x0(%r13,%r13,8),%rcx
   35186:	shl    $0x6,%rcx
   3518a:	lea    (%rcx,%r13,8),%rcx
   3518e:	lea    (%rcx,%r13,4),%rcx
   35192:	add    %r13,%rcx
   35195:	add    %rax,%rcx
   35198:	lea    (%rcx,%r12,1),%rdx
   3519c:	lea    (%rdi,%r13,1),%rcx
   351a0:	mov    %rcx,-0x60(%rbp)
   351a4:	imul   $0xffffffffffffeaab,%rcx,%rcx
   351ab:	mov    %rcx,-0x68(%rbp)
   351af:	add    %rcx,%rdx
   351b2:	lea    (%rbx,%rbx,2),%rcx
   351b6:	lea    (%rbx,%rcx,2),%rcx
   351ba:	shl    $0x6,%rcx
   351be:	lea    (%rcx,%rbx,4),%rcx
   351c2:	lea    (%rcx,%rcx,4),%r12
   351c6:	mov    -0xa0(%rbp),%r13
   351cd:	mov    %r13,%rcx
   351d0:	imul   $0x1ccd,%rcx,%rcx
   351d7:	lea    (%rcx,%r12,1),%r8
   351db:	mov    %r8,-0x38(%rbp)
   351df:	mov    -0xb0(%rbp),%rbx
   351e6:	mov    %rbx,%rsi
   351e9:	shl    $0x4,%rsi
   351ed:	mov    %rbx,%rcx
   351f0:	shl    $0x8,%rcx
   351f4:	add    %rsi,%rcx
   351f7:	lea    (%rcx,%rbx,4),%rcx
   351fb:	add    %rbx,%rcx
   351fe:	shl    $0x4,%rcx
   35202:	add    %rcx,%rbx
   35205:	mov    %rbx,-0x30(%rbp)
   35209:	mov    -0xa8(%rbp),%r11
   35210:	lea    (%r11,%rbx,1),%rsi
   35214:	lea    (%r8,%rsi,1),%rcx
   35218:	lea    0x20000(%rdx,%rcx,1),%rcx
   35220:	sar    $0x12,%rcx
   35224:	and    $0x3ff,%ecx
   3522a:	movslq %ecx,%rcx
   3522d:	movzbl 0x80(%r15,%rcx,1),%ecx
   35236:	mov    %cl,0x1(%r10,%r9,1)
   3523b:	lea    0x20000(%r8,%rsi,1),%rcx
   35243:	sub    %rdx,%rcx
   35246:	sar    $0x12,%rcx
   3524a:	and    $0x3ff,%ecx
   35250:	movslq %ecx,%rcx
   35253:	movzbl 0x80(%r15,%rcx,1),%ecx
   3525c:	mov    %cl,0xe(%r10,%r9,1)
   35261:	lea    (%r14,%r14,2),%rcx
   35265:	mov    %rcx,%rdx
   35268:	shl    $0xa,%rdx
   3526c:	lea    (%rdx,%r14,2),%rdx
   35270:	lea    (%rdx,%rdx,2),%rdx
   35274:	sub    %rdx,%rax
   35277:	mov    -0x90(%rbp),%rdx
   3527e:	add    %rdx,%rax
   35281:	lea    (%r14,%rdi,1),%rsi
   35285:	imul   $0xffffffffffffd4b2,%rsi,%rsi
   3528c:	lea    (%rsi,%rax,1),%r8
   35290:	mov    %r13,%rdx
   35293:	shl    $0x2,%rdx
   35297:	lea    0x0(%r13,%r13,8),%rax
   3529c:	lea    (%rdx,%rax,8),%rax
   352a0:	add    %r13,%rax
   352a3:	shl    $0x6,%rax
   352a7:	mov    %rax,-0x90(%rbp)
   352ae:	lea    0x0(%r13,%r13,1),%rdx
   352b3:	mov    %rdx,-0xa0(%rbp)
   352ba:	sub    %rax,%rdx
   352bd:	mov    -0x98(%rbp),%r13
   352c4:	add    %r13,%rdx
   352c7:	lea    0x20000(%r11),%rax
   352ce:	sub    %rbx,%rax
   352d1:	mov    %rax,-0x98(%rbp)
   352d8:	add    %rdx,%rax
   352db:	lea    (%r8,%rax,1),%rdx
   352df:	sar    $0x12,%rdx
   352e3:	and    $0x3ff,%edx
   352e9:	movslq %edx,%rdx
   352ec:	movzbl 0x80(%r15,%rdx,1),%edx
   352f5:	mov    %dl,0x2(%r10,%r9,1)
   352fa:	sub    %r8,%rax
   352fd:	sar    $0x12,%rax
   35301:	and    $0x3ff,%eax
   35306:	movslq %eax,%rax
   35309:	movzbl 0x80(%r15,%rax,1),%eax
   35312:	mov    %al,0xd(%r10,%r9,1)
   35317:	mov    -0x88(%rbp),%rdx
   3531e:	mov    -0x80(%rbp),%rax
   35322:	sub    %rdx,%rax
   35325:	lea    0x20000(%r11,%rax,1),%r11
   3532d:	mov    -0x78(%rbp),%rdx
   35331:	mov    %rdx,%rax
   35334:	shl    $0x8,%rax
   35338:	lea    (%rax,%rdx,4),%rax
   3533c:	add    %rax,%rdx
   3533f:	shl    $0x4,%rdx
   35343:	mov    %r12,%rax
   35346:	sub    %rdx,%rax
   35349:	add    %r11,%rax
   3534c:	mov    %rdi,%r8
   3534f:	shl    $0x5,%r8
   35353:	mov    %rdi,%rbx
   35356:	shl    $0x9,%rbx
   3535a:	add    %r8,%rbx
   3535d:	lea    (%rdi,%rbx,1),%r8
   35361:	shl    $0x4,%r8
   35365:	lea    (%r8,%rdi,8),%rbx
   35369:	mov    -0x68(%rbp),%r8
   3536d:	add    %r8,%rbx
   35370:	mov    -0x70(%rbp),%r8
   35374:	add    %r8,%rbx
   35377:	add    %rsi,%rbx
   3537a:	lea    (%rbx,%rax,1),%rsi
   3537e:	sar    $0x12,%rsi
   35382:	and    $0x3ff,%esi
   35388:	movslq %esi,%rsi
   3538b:	movzbl 0x80(%r15,%rsi,1),%esi
   35394:	mov    %sil,0x3(%r10,%r9,1)
   35399:	sub    %rbx,%rax
   3539c:	sar    $0x12,%rax
   353a0:	and    $0x3ff,%eax
   353a5:	movslq %eax,%rax
   353a8:	movzbl 0x80(%r15,%rax,1),%eax
   353b1:	mov    %al,0xc(%r10,%r9,1)
   353b6:	sub    %r12,%rdx
   353b9:	lea    (%rdx,%r11,1),%rax
   353bd:	mov    -0x58(%rbp),%rdx
   353c1:	mov    %rdx,%rbx
   353c4:	sub    %rdi,%rbx
   353c7:	lea    (%rbx,%rbx,8),%rsi
   353cb:	shl    $0x4,%rsi
   353cf:	lea    (%rsi,%rbx,8),%rsi
   353d3:	add    %rbx,%rsi
   353d6:	shl    $0x4,%rsi
   353da:	lea    (%rsi,%rbx,2),%rsi
   353de:	lea    (%rsi,%rsi,2),%r12
   353e2:	mov    -0x60(%rbp),%r8
   353e6:	lea    (%r8,%r8,2),%rsi
   353ea:	shl    $0x3,%rsi
   353ee:	mov    %r8,%rbx
   353f1:	sub    %rsi,%rbx
   353f4:	lea    (%r8,%r8,4),%rsi
   353f8:	shl    $0xb,%rsi
   353fc:	lea    (%rsi,%rbx,1),%r11
   35400:	lea    (%rdi,%rdi,2),%rsi
   35404:	shl    $0x6,%rsi
   35408:	lea    (%rsi,%rdi,8),%rsi
   3540c:	add    %rdi,%rsi
   3540f:	shl    $0x7,%rsi
   35413:	lea    (%rsi,%rdi,4),%rsi
   35417:	add    %rdi,%rsi
   3541a:	sub    %r11,%rsi
   3541d:	lea    (%r12,%rsi,1),%rbx
   35421:	sub    %r14,%rdi
   35424:	mov    %rdi,%rsi
   35427:	shl    $0x5,%rsi
   3542b:	lea    (%rsi,%rdi,2),%rsi
   3542f:	add    %rdi,%rsi
   35432:	shl    $0x5,%rsi
   35436:	add    %rdi,%rsi
   35439:	lea    (%rsi,%rsi,2),%r8
   3543d:	lea    (%rbx,%r8,1),%rdi
   35441:	lea    (%rdi,%rax,1),%rsi
   35445:	sar    $0x12,%rsi
   35449:	and    $0x3ff,%esi
   3544f:	movslq %esi,%rsi
   35452:	movzbl 0x80(%r15,%rsi,1),%esi
   3545b:	mov    %sil,0x4(%r10,%r9,1)
   35460:	sub    %rdi,%rax
   35463:	sar    $0x12,%rax
   35467:	and    $0x3ff,%eax
   3546c:	movslq %eax,%rax
   3546f:	movzbl 0x80(%r15,%rax,1),%eax
   35478:	mov    %al,0xb(%r10,%r9,1)
   3547d:	mov    -0x48(%rbp),%rax
   35481:	mov    -0x50(%rbp),%rsi
   35485:	lea    (%rsi,%rax,4),%rax
   35489:	shl    $0x4,%rax
   3548d:	lea    (%rax,%rsi,4),%rax
   35491:	add    %rsi,%rax
   35494:	shl    $0x4,%rax
   35498:	lea    (%rax,%rsi,4),%rax
   3549c:	lea    (%rsi,%rax,1),%rbx
   354a0:	mov    -0x40(%rbp),%rsi
   354a4:	mov    %r14,%rdi
   354a7:	sub    %rsi,%rdi
   354aa:	lea    (%rdi,%rdi,4),%rax
   354ae:	shl    $0x8,%rax
   354b2:	add    %rdi,%rax
   354b5:	lea    (%rax,%rax,8),%rdi
   354b9:	shl    $0x4,%rcx
   354bd:	lea    (%r14,%rcx,1),%rax
   354c1:	shl    $0x7,%rax
   354c5:	lea    (%rax,%r14,4),%rax
   354c9:	lea    (%rax,%r14,2),%rax
   354cd:	neg    %rax
   354d0:	add    %rdi,%rax
   354d3:	add    %rbx,%rax
   354d6:	add    %rax,%r8
   354d9:	mov    -0xa0(%rbp),%rax
   354e0:	lea    0x0(%r13,%rax,1),%rcx
   354e5:	mov    -0x90(%rbp),%rax
   354ec:	sub    %rcx,%rax
   354ef:	mov    -0x98(%rbp),%rcx
   354f6:	add    %rcx,%rax
   354f9:	lea    (%r8,%rax,1),%rcx
   354fd:	sar    $0x12,%rcx
   35501:	and    $0x3ff,%ecx
   35507:	movslq %ecx,%rcx
   3550a:	movzbl 0x80(%r15,%rcx,1),%ecx
   35513:	mov    %cl,0x5(%r10,%r9,1)
   35518:	sub    %r8,%rax
   3551b:	sar    $0x12,%rax
   3551f:	and    $0x3ff,%eax
   35524:	movslq %eax,%rax
   35527:	movzbl 0x80(%r15,%rax,1),%eax
   35530:	mov    %al,0xa(%r10,%r9,1)
   35535:	mov    %rdx,%rcx
   35538:	sub    %rsi,%rcx
   3553b:	mov    %rcx,%rax
   3553e:	shl    $0x5,%rax
   35542:	lea    (%rax,%rcx,2),%rax
   35546:	add    %rcx,%rax
   35549:	shl    $0x5,%rax
   3554d:	add    %rcx,%rax
   35550:	lea    (%rax,%rax,2),%r8
   35554:	lea    (%rsi,%rsi,4),%rax
   35558:	shl    $0x3,%rax
   3555c:	lea    (%rax,%rsi,4),%rax
   35560:	lea    (%rax,%rsi,2),%rax
   35564:	lea    (%rax,%rax,4),%rax
   35568:	shl    $0xe,%rsi
   3556c:	sub    %rax,%rsi
   3556f:	lea    (%rdi,%rsi,1),%rax
   35573:	lea    (%rax,%r8,1),%rsi
   35577:	sub    %r11,%rsi
   3557a:	mov    -0x30(%rbp),%rax
   3557e:	mov    -0xa8(%rbp),%rdi
   35585:	lea    0x20000(%rdi,%rax,1),%rax
   3558d:	mov    -0x38(%rbp),%r11
   35591:	mov    %rax,%rcx
   35594:	sub    %r11,%rcx
   35597:	add    %rsi,%rcx
   3559a:	sar    $0x12,%rcx
   3559e:	and    $0x3ff,%ecx
   355a4:	movslq %ecx,%rcx
   355a7:	movzbl 0x80(%r15,%rcx,1),%ecx
   355b0:	mov    %cl,0x6(%r10,%r9,1)
   355b5:	lea    (%r11,%rsi,1),%rcx
   355b9:	sub    %rcx,%rax
   355bc:	sar    $0x12,%rax
   355c0:	and    $0x3ff,%eax
   355c5:	movslq %eax,%rax
   355c8:	movzbl 0x80(%r15,%rax,1),%eax
   355d1:	mov    %al,0x9(%r10,%r9,1)
   355d6:	mov    -0x20(%rbp),%rax
   355da:	lea    0x20000(%rax,%rdi,1),%rcx
   355e2:	mov    -0x28(%rbp),%rax
   355e6:	sub    %rax,%rcx
   355e9:	lea    (%r12,%rbx,1),%rax
   355ed:	lea    (%rax,%r8,1),%rdi
   355f1:	lea    (%rdx,%rdx,4),%rax
   355f5:	lea    (%rdx,%rax,4),%rax
   355f9:	shl    $0x6,%rax
   355fd:	lea    (%rax,%rdx,2),%rsi
   35601:	shl    $0xe,%rdx
   35605:	mov    %rsi,%rax
   35608:	sub    %rdx,%rax
   3560b:	add    %rdi,%rax
   3560e:	add    %rcx,%rax
   35611:	sar    $0x12,%rax
   35615:	and    $0x3ff,%eax
   3561a:	movslq %eax,%rax
   3561d:	movzbl 0x80(%r15,%rax,1),%eax
   35626:	mov    %al,0x7(%r10,%r9,1)
   3562b:	lea    (%rdi,%rsi,1),%rax
   3562f:	sub    %rax,%rdx
   35632:	lea    (%rcx,%rdx,1),%rax
   35636:	sar    $0x12,%rax
   3563a:	and    $0x3ff,%eax
   3563f:	movslq %eax,%rax
   35642:	movzbl 0x80(%rax,%r15,1),%eax
   3564b:	mov    %al,0x8(%r10,%r9,1)
   35650:	mov    -0xf0(%rbp),%rax
   35657:	lea    0x1(%rax),%edx
   3565a:	mov    -0xc0(%rbp),%rax
   35661:	lea    0x20(%rax),%rsi
   35665:	mov    -0xb8(%rbp),%rcx
   3566c:	cmp    $0xf,%edx
   3566f:	jle    34fc0 <jpeg_idct_16x16+0x620>
   35675:	mov    -0xe8(%rbp),%r15
   3567c:	mov    -0xe0(%rbp),%r14
   35683:	mov    -0xd8(%rbp),%r13
   3568a:	mov    -0xd0(%rbp),%r12
   35691:	mov    -0xc8(%rbp),%rbx
   35698:	leaveq 
   35699:	retq   
   3569a:	nopw   0x0(%rax,%rax,1)

00000000000356a0 <jpeg_idct_4x4>:
   356a0:	push   %rbp
   356a1:	mov    %rsp,%rbp
   356a4:	sub    $0xc0,%rsp
   356ab:	mov    %r8,-0x28(%rbp)
   356af:	mov    %rcx,-0x38(%rbp)
   356b3:	mov    %r12,-0x8(%rbp)
   356b7:	mov    %r13,-0x10(%rbp)
   356bb:	mov    %r14,-0x18(%rbp)
   356bf:	mov    %r15,-0x20(%rbp)
   356c3:	mov    0x1a8(%rdi),%rax
   356ca:	mov    %rax,-0x30(%rbp)
   356ce:	mov    0x58(%rsi),%rax
   356d2:	lea    -0xb8(%rbp),%rcx
   356d9:	mov    $0x8,%esi
   356de:	jmpq   358b5 <jpeg_idct_4x4+0x215>
   356e3:	movswq 0x70(%rax),%rdi
   356e8:	movswq 0x70(%rdx),%r8
   356ed:	imul   %r8d,%edi
   356f1:	movslq %edi,%r14
   356f4:	mov    %r14,%rdi
   356f7:	shl    $0x8,%rdi
   356fb:	lea    (%rdi,%r14,4),%rdi
   356ff:	lea    (%r14,%rdi,1),%r8
   35703:	shl    $0x4,%r8
   35707:	movswq 0x50(%rax),%rdi
   3570c:	movswq 0x50(%rdx),%r9
   35711:	imul   %r9d,%edi
   35715:	movslq %edi,%r15
   35718:	mov    %r15,%r9
   3571b:	shl    $0x2,%r9
   3571f:	lea    (%r15,%r15,8),%rdi
   35723:	lea    (%r9,%rdi,8),%rdi
   35727:	add    %r15,%rdi
   3572a:	shl    $0x6,%rdi
   3572e:	add    %rdi,%r8
   35731:	lea    (%r15,%r15,1),%rdi
   35735:	sub    %r8,%rdi
   35738:	movswq 0x30(%rax),%r8
   3573d:	movswq 0x30(%rdx),%r9
   35742:	imul   %r9d,%r8d
   35746:	movslq %r8d,%r10
   35749:	mov    %r10,%r8
   3574c:	imul   $0x1ccd,%r8,%r8
   35753:	lea    (%r8,%rdi,1),%r9
   35757:	movswq 0x10(%rax),%rdi
   3575c:	movswq 0x10(%rdx),%r8
   35761:	imul   %r8d,%edi
   35765:	movslq %edi,%r13
   35768:	lea    0x0(%r13,%r13,4),%rdi
   3576d:	lea    0x0(%r13,%rdi,8),%rdi
   35772:	shl    $0x9,%rdi
   35776:	lea    (%rdi,%r13,2),%rdi
   3577a:	add    %r13,%rdi
   3577d:	lea    (%r9,%rdi,1),%r11
   35781:	movswq 0x20(%rax),%rdi
   35786:	movswq 0x20(%rdx),%r8
   3578b:	imul   %r8d,%edi
   3578f:	movslq %edi,%r9
   35792:	mov    %r9,%r8
   35795:	shl    $0x2,%r8
   35799:	lea    (%r9,%r9,2),%rdi
   3579d:	lea    (%r8,%rdi,8),%rdi
   357a1:	add    %r9,%rdi
   357a4:	shl    $0x4,%rdi
   357a8:	lea    (%rdi,%r9,8),%rdi
   357ac:	add    %r9,%rdi
   357af:	shl    $0x5,%rdi
   357b3:	lea    (%r9,%rdi,1),%r12
   357b7:	movswq 0x60(%rax),%rdi
   357bc:	movswq 0x60(%rdx),%r8
   357c1:	imul   %r8d,%edi
   357c5:	movslq %edi,%r9
   357c8:	lea    (%r9,%r9,2),%rdi
   357cc:	shl    $0x4,%rdi
   357d0:	lea    (%r9,%rdi,1),%r8
   357d4:	shl    $0x7,%r8
   357d8:	lea    (%r9,%r9,1),%rdi
   357dc:	sub    %r8,%rdi
   357df:	add    %rdi,%r12
   357e2:	movswq (%rax),%rdi
   357e6:	movswq (%rdx),%r8
   357ea:	imul   %r8d,%edi
   357ee:	movslq %edi,%r8
   357f1:	shl    $0xe,%r8
   357f5:	lea    (%r12,%r8,1),%rdi
   357f9:	lea    0x800(%r11,%rdi,1),%r9
   35801:	sar    $0xc,%r9
   35805:	mov    %r9d,(%rcx)
   35808:	sub    %r11,%rdi
   3580b:	add    $0x800,%rdi
   35812:	sar    $0xc,%rdi
   35816:	mov    %edi,0x60(%rcx)
   35819:	lea    (%r14,%r14,2),%rdi
   3581d:	shl    $0x3,%rdi
   35821:	lea    (%rdi,%r14,2),%rdi
   35825:	add    %r14,%rdi
   35828:	shl    $0x6,%rdi
   3582c:	lea    (%rdi,%r14,2),%r11
   35830:	lea    (%r15,%r15,2),%rdi
   35834:	mov    %rdi,%r9
   35837:	shl    $0x7,%r9
   3583b:	lea    (%r9,%r15,8),%r9
   3583f:	lea    (%r9,%r15,2),%r9
   35843:	add    %r15,%r9
   35846:	add    %r11,%r9
   35849:	shl    $0xc,%rdi
   3584d:	sub    %r9,%rdi
   35850:	imul   $0xffffffffffffba79,%r10,%r10
   35857:	add    %rdi,%r10
   3585a:	mov    %r13,%r9
   3585d:	shl    $0x9,%r9
   35861:	mov    %r13,%rdi
   35864:	shl    $0xd,%rdi
   35868:	add    %r9,%rdi
   3586b:	lea    0x0(%r13,%r13,2),%r9
   35870:	lea    0x0(%r13,%r9,2),%r9
   35875:	sub    %r9,%rdi
   35878:	lea    (%r10,%rdi,1),%r9
   3587c:	mov    %r8,%rdi
   3587f:	sub    %r12,%rdi
   35882:	lea    0x800(%r9,%rdi,1),%rdi
   3588a:	sar    $0xc,%rdi
   3588e:	mov    %edi,0x20(%rcx)
   35891:	lea    (%r9,%r12,1),%rdi
   35895:	sub    %rdi,%r8
   35898:	lea    0x800(%r8),%rdi
   3589f:	sar    $0xc,%rdi
   358a3:	mov    %edi,0x40(%rcx)
   358a6:	add    $0x2,%rdx
   358aa:	add    $0x2,%rax
   358ae:	add    $0x4,%rcx
   358b2:	add    $0xffffffff,%esi
   358b5:	test   %esi,%esi
   358b7:	jg     358da <jpeg_idct_4x4+0x23a>
   358b9:	mov    -0x28(%rbp),%rax
   358bd:	mov    %eax,%r9d
   358c0:	xor    %esi,%esi
   358c2:	mov    %rbx,-0x28(%rbp)
   358c6:	mov    -0x30(%rbp),%r11
   358ca:	lea    -0xb8(%rbp),%rax
   358d1:	mov    -0x38(%rbp),%rcx
   358d5:	jmpq   35b15 <jpeg_idct_4x4+0x475>
   358da:	cmp    $0x4,%esi
   358dd:	je     358a6 <jpeg_idct_4x4+0x206>
   358df:	movswq 0x10(%rdx),%rdi
   358e4:	test   %di,%di
   358e7:	jne    356e3 <jpeg_idct_4x4+0x43>
   358ed:	movswq 0x20(%rdx),%rdi
   358f2:	test   %di,%di
   358f5:	jne    356e3 <jpeg_idct_4x4+0x43>
   358fb:	movswq 0x30(%rdx),%rdi
   35900:	test   %di,%di
   35903:	jne    356e3 <jpeg_idct_4x4+0x43>
   35909:	movswq 0x50(%rdx),%rdi
   3590e:	test   %di,%di
   35911:	jne    356e3 <jpeg_idct_4x4+0x43>
   35917:	movswq 0x60(%rdx),%rdi
   3591c:	test   %di,%di
   3591f:	jne    356e3 <jpeg_idct_4x4+0x43>
   35925:	movswq 0x70(%rdx),%rdi
   3592a:	test   %di,%di
   3592d:	jne    356e3 <jpeg_idct_4x4+0x43>
   35933:	movswq (%rax),%rdi
   35937:	movswq (%rdx),%r8
   3593b:	imul   %r8d,%edi
   3593f:	shl    $0x2,%edi
   35942:	mov    %edi,(%rcx)
   35944:	mov    %edi,0x20(%rcx)
   35947:	mov    %edi,0x40(%rcx)
   3594a:	mov    %edi,0x60(%rcx)
   3594d:	jmpq   358a6 <jpeg_idct_4x4+0x206>
   35952:	movslq 0x8(%rax),%rdx
   35956:	mov    %rdx,%rcx
   35959:	shl    $0x2,%rcx
   3595d:	lea    (%rdx,%rdx,2),%rdi
   35961:	lea    (%rcx,%rdi,8),%rcx
   35965:	add    %rdx,%rcx
   35968:	shl    $0x4,%rcx
   3596c:	lea    (%rcx,%rdx,8),%rcx
   35970:	add    %rdx,%rcx
   35973:	shl    $0x5,%rcx
   35977:	lea    (%rdx,%rcx,1),%rbx
   3597b:	movslq 0x18(%rax),%rdi
   3597f:	lea    (%rdi,%rdi,2),%rcx
   35983:	shl    $0x4,%rcx
   35987:	lea    (%rdi,%rcx,1),%rdx
   3598b:	shl    $0x7,%rdx
   3598f:	lea    (%rdi,%rdi,1),%rcx
   35993:	sub    %rdx,%rcx
   35996:	lea    (%rbx,%rcx,1),%r12
   3599a:	movslq (%rax),%rdx
   3599d:	shl    $0xe,%rdx
   359a1:	lea    (%r12,%rdx,1),%rbx
   359a5:	movslq 0x1c(%rax),%r14
   359a9:	mov    %r14,%rcx
   359ac:	shl    $0x8,%rcx
   359b0:	lea    (%rcx,%r14,4),%rcx
   359b4:	lea    (%r14,%rcx,1),%rdi
   359b8:	shl    $0x4,%rdi
   359bc:	movslq 0x14(%rax),%r15
   359c0:	mov    %r15,%r10
   359c3:	shl    $0x2,%r10
   359c7:	lea    (%r15,%r15,8),%rcx
   359cb:	lea    (%r10,%rcx,8),%rcx
   359cf:	add    %r15,%rcx
   359d2:	shl    $0x6,%rcx
   359d6:	add    %rcx,%rdi
   359d9:	lea    (%r15,%r15,1),%rcx
   359dd:	sub    %rdi,%rcx
   359e0:	movslq 0xc(%rax),%rdi
   359e4:	mov    %rdi,%r10
   359e7:	imul   $0x1ccd,%r10,%r10
   359ee:	add    %rcx,%r10
   359f1:	movslq 0x4(%rax),%r13
   359f5:	lea    0x0(%r13,%r13,4),%rcx
   359fa:	lea    0x0(%r13,%rcx,8),%rcx
   359ff:	shl    $0x9,%rcx
   35a03:	lea    (%rcx,%r13,2),%rcx
   35a07:	add    %r13,%rcx
   35a0a:	add    %rcx,%r10
   35a0d:	lea    0x40000(%r10,%rbx,1),%rcx
   35a15:	sar    $0x13,%rcx
   35a19:	and    $0x3ff,%ecx
   35a1f:	movslq %ecx,%rcx
   35a22:	movzbl 0x80(%r11,%rcx,1),%ecx
   35a2b:	mov    %cl,(%r9,%r8,1)
   35a2f:	sub    %r10,%rbx
   35a32:	lea    0x40000(%rbx),%rcx
   35a39:	sar    $0x13,%rcx
   35a3d:	and    $0x3ff,%ecx
   35a43:	movslq %ecx,%rcx
   35a46:	movzbl 0x80(%r11,%rcx,1),%ecx
   35a4f:	mov    %cl,0x3(%r9,%r8,1)
   35a54:	lea    (%r14,%r14,2),%rcx
   35a58:	shl    $0x3,%rcx
   35a5c:	lea    (%rcx,%r14,2),%rcx
   35a60:	add    %r14,%rcx
   35a63:	shl    $0x6,%rcx
   35a67:	lea    (%rcx,%r14,2),%r10
   35a6b:	lea    (%r15,%r15,2),%rcx
   35a6f:	mov    %rcx,%rbx
   35a72:	shl    $0x7,%rbx
   35a76:	lea    (%rbx,%r15,8),%rbx
   35a7a:	lea    (%rbx,%r15,2),%rbx
   35a7e:	add    %r15,%rbx
   35a81:	add    %r10,%rbx
   35a84:	shl    $0xc,%rcx
   35a88:	sub    %rbx,%rcx
   35a8b:	imul   $0xffffffffffffba79,%rdi,%rdi
   35a92:	lea    (%rdi,%rcx,1),%rbx
   35a96:	mov    %r13,%rcx
   35a99:	shl    $0x9,%rcx
   35a9d:	mov    %r13,%rdi
   35aa0:	shl    $0xd,%rdi
   35aa4:	add    %rdi,%rcx
   35aa7:	lea    0x0(%r13,%r13,2),%rdi
   35aac:	lea    0x0(%r13,%rdi,2),%rdi
   35ab1:	sub    %rdi,%rcx
   35ab4:	lea    (%rbx,%rcx,1),%rdi
   35ab8:	mov    %rdx,%rcx
   35abb:	sub    %r12,%rcx
   35abe:	lea    0x40000(%rdi,%rcx,1),%rcx
   35ac6:	sar    $0x13,%rcx
   35aca:	and    $0x3ff,%ecx
   35ad0:	movslq %ecx,%rcx
   35ad3:	movzbl 0x80(%r11,%rcx,1),%ecx
   35adc:	mov    %cl,0x1(%r9,%r8,1)
   35ae1:	lea    (%rdi,%r12,1),%rcx
   35ae5:	sub    %rcx,%rdx
   35ae8:	lea    0x40000(%rdx),%rcx
   35aef:	sar    $0x13,%rcx
   35af3:	and    $0x3ff,%ecx
   35af9:	movslq %ecx,%rcx
   35afc:	movzbl 0x80(%rcx,%r11,1),%ecx
   35b05:	mov    %cl,0x2(%r9,%r8,1)
   35b0a:	add    $0x20,%rax
   35b0e:	mov    -0x38(%rbp),%rcx
   35b12:	add    $0x1,%esi
   35b15:	cmp    $0x3,%esi
   35b18:	jle    35b30 <jpeg_idct_4x4+0x490>
   35b1a:	mov    -0x20(%rbp),%r15
   35b1e:	mov    -0x18(%rbp),%r14
   35b22:	mov    -0x10(%rbp),%r13
   35b26:	mov    -0x8(%rbp),%r12
   35b2a:	mov    -0x28(%rbp),%rbx
   35b2e:	leaveq 
   35b2f:	retq   
   35b30:	movslq %esi,%rdx
   35b33:	mov    (%rcx,%rdx,8),%r8
   35b37:	movslq 0x4(%rax),%rdx
   35b3b:	test   %edx,%edx
   35b3d:	jne    35952 <jpeg_idct_4x4+0x2b2>
   35b43:	movslq 0x8(%rax),%rdx
   35b47:	test   %edx,%edx
   35b49:	jne    35952 <jpeg_idct_4x4+0x2b2>
   35b4f:	movslq 0xc(%rax),%rdx
   35b53:	test   %edx,%edx
   35b55:	jne    35952 <jpeg_idct_4x4+0x2b2>
   35b5b:	movslq 0x14(%rax),%rdx
   35b5f:	test   %edx,%edx
   35b61:	jne    35952 <jpeg_idct_4x4+0x2b2>
   35b67:	movslq 0x18(%rax),%rdx
   35b6b:	test   %edx,%edx
   35b6d:	jne    35952 <jpeg_idct_4x4+0x2b2>
   35b73:	movslq 0x1c(%rax),%rdx
   35b77:	test   %edx,%edx
   35b79:	jne    35952 <jpeg_idct_4x4+0x2b2>
   35b7f:	movslq (%rax),%rdx
   35b82:	add    $0x10,%rdx
   35b86:	sar    $0x5,%rdx
   35b8a:	and    $0x3ff,%edx
   35b90:	movslq %edx,%rdx
   35b93:	movzbl 0x80(%r11,%rdx,1),%edx
   35b9c:	mov    %dl,(%r9,%r8,1)
   35ba0:	mov    %dl,0x1(%r9,%r8,1)
   35ba5:	mov    %dl,0x2(%r9,%r8,1)
   35baa:	mov    %dl,0x3(%r9,%r8,1)
   35baf:	add    $0x20,%rax
   35bb3:	jmpq   35b12 <jpeg_idct_4x4+0x472>
   35bb8:	nopl   0x0(%rax,%rax,1)

0000000000035bc0 <jpeg_idct_2x2>:
   35bc0:	push   %rbp
   35bc1:	mov    %rsp,%rbp
   35bc4:	sub    $0x50,%rsp
   35bc8:	mov    %r8,-0x8(%rbp)
   35bcc:	mov    0x1a8(%rdi),%rax
   35bd3:	mov    %rax,-0x10(%rbp)
   35bd7:	mov    0x58(%rsi),%rsi
   35bdb:	lea    -0x50(%rbp),%rdi
   35bdf:	mov    $0x8,%eax
   35be4:	jmpq   35cc0 <jpeg_idct_2x2+0x100>
   35be9:	movswq 0x50(%rsi),%r8
   35bee:	movswq 0x50(%rdx),%r9
   35bf3:	imul   %r9d,%r8d
   35bf7:	movslq %r8d,%r9
   35bfa:	lea    (%r9,%r9,2),%r8
   35bfe:	shl    $0x5,%r8
   35c02:	lea    (%r8,%r9,8),%r8
   35c06:	lea    (%r8,%r9,4),%r8
   35c0a:	add    %r9,%r8
   35c0d:	shl    $0x6,%r8
   35c11:	lea    (%r9,%r9,8),%r9
   35c15:	sub    %r9,%r8
   35c18:	movswq 0x70(%rsi),%r9
   35c1d:	movswq 0x70(%rdx),%r10
   35c22:	imul   %r10d,%r9d
   35c26:	movslq %r9d,%r9
   35c29:	imul   $0xffffffffffffe8ee,%r9,%r9
   35c30:	add    %r8,%r9
   35c33:	movswq 0x30(%rsi),%r8
   35c38:	movswq 0x30(%rdx),%r10
   35c3d:	imul   %r10d,%r8d
   35c41:	movslq %r8d,%r8
   35c44:	imul   $0xffffffffffffd746,%r8,%r8
   35c4b:	lea    (%r8,%r9,1),%r11
   35c4f:	movswq 0x10(%rsi),%r8
   35c54:	movswq 0x10(%rdx),%r9
   35c59:	imul   %r9d,%r8d
   35c5d:	movslq %r8d,%r10
   35c60:	mov    %r10,%r9
   35c63:	shl    $0x2,%r9
   35c67:	lea    (%r10,%r10,2),%r8
   35c6b:	lea    (%r9,%r8,8),%r8
   35c6f:	add    %r10,%r8
   35c72:	shl    $0xa,%r8
   35c76:	sub    %r9,%r8
   35c79:	lea    (%r11,%r8,1),%r10
   35c7d:	movswq (%rsi),%r8
   35c81:	movswq (%rdx),%r9
   35c85:	imul   %r9d,%r8d
   35c89:	movslq %r8d,%r8
   35c8c:	shl    $0xf,%r8
   35c90:	lea    0x1000(%r10,%r8,1),%r9
   35c98:	sar    $0xd,%r9
   35c9c:	mov    %r9d,(%rdi)
   35c9f:	sub    %r10,%r8
   35ca2:	add    $0x1000,%r8
   35ca9:	sar    $0xd,%r8
   35cad:	mov    %r8d,0x20(%rdi)
   35cb1:	add    $0x2,%rdx
   35cb5:	add    $0x2,%rsi
   35cb9:	add    $0x4,%rdi
   35cbd:	add    $0xffffffff,%eax
   35cc0:	test   %eax,%eax
   35cc2:	jg     35cde <jpeg_idct_2x2+0x11e>
   35cc4:	mov    -0x8(%rbp),%rax
   35cc8:	mov    %eax,%r11d
   35ccb:	xor    %edi,%edi
   35ccd:	mov    %r15,-0x8(%rbp)
   35cd1:	mov    -0x10(%rbp),%r8
   35cd5:	lea    -0x50(%rbp),%rax
   35cd9:	jmpq   35dfa <jpeg_idct_2x2+0x23a>
   35cde:	cmp    $0x6,%eax
   35ce1:	je     35cb1 <jpeg_idct_2x2+0xf1>
   35ce3:	cmp    $0x4,%eax
   35ce6:	je     35cb1 <jpeg_idct_2x2+0xf1>
   35ce8:	cmp    $0x2,%eax
   35ceb:	je     35cb1 <jpeg_idct_2x2+0xf1>
   35ced:	movswq 0x10(%rdx),%r8
   35cf2:	test   %r8w,%r8w
   35cf6:	jne    35be9 <jpeg_idct_2x2+0x29>
   35cfc:	movswq 0x30(%rdx),%r8
   35d01:	test   %r8w,%r8w
   35d05:	jne    35be9 <jpeg_idct_2x2+0x29>
   35d0b:	movswq 0x50(%rdx),%r8
   35d10:	test   %r8w,%r8w
   35d14:	jne    35be9 <jpeg_idct_2x2+0x29>
   35d1a:	movswq 0x70(%rdx),%r8
   35d1f:	test   %r8w,%r8w
   35d23:	jne    35be9 <jpeg_idct_2x2+0x29>
   35d29:	movswq (%rsi),%r8
   35d2d:	movswq (%rdx),%r9
   35d31:	imul   %r9d,%r8d
   35d35:	shl    $0x2,%r8d
   35d39:	mov    %r8d,(%rdi)
   35d3c:	mov    %r8d,0x20(%rdi)
   35d40:	jmpq   35cb1 <jpeg_idct_2x2+0xf1>
   35d45:	movslq 0x14(%rax),%rsi
   35d49:	lea    (%rsi,%rsi,2),%rdx
   35d4d:	shl    $0x5,%rdx
   35d51:	lea    (%rdx,%rsi,8),%rdx
   35d55:	lea    (%rdx,%rsi,4),%rdx
   35d59:	add    %rsi,%rdx
   35d5c:	shl    $0x6,%rdx
   35d60:	lea    (%rsi,%rsi,8),%rsi
   35d64:	sub    %rsi,%rdx
   35d67:	movslq 0x1c(%rax),%rsi
   35d6b:	imul   $0xffffffffffffe8ee,%rsi,%rsi
   35d72:	add    %rdx,%rsi
   35d75:	movslq 0xc(%rax),%rdx
   35d79:	imul   $0xffffffffffffd746,%rdx,%rdx
   35d80:	lea    (%rdx,%rsi,1),%r15
   35d84:	movslq 0x4(%rax),%rdx
   35d88:	mov    %rdx,%rsi
   35d8b:	shl    $0x2,%rsi
   35d8f:	lea    (%rdx,%rdx,2),%r9
   35d93:	lea    (%rsi,%r9,8),%r9
   35d97:	add    %r9,%rdx
   35d9a:	shl    $0xa,%rdx
   35d9e:	sub    %rsi,%rdx
   35da1:	lea    (%r15,%rdx,1),%r9
   35da5:	movslq (%rax),%rdx
   35da8:	shl    $0xf,%rdx
   35dac:	lea    0x80000(%r9,%rdx,1),%rsi
   35db4:	sar    $0x14,%rsi
   35db8:	and    $0x3ff,%esi
   35dbe:	movslq %esi,%rsi
   35dc1:	movzbl 0x80(%r8,%rsi,1),%esi
   35dca:	mov    %sil,(%r11,%r10,1)
   35dce:	sub    %r9,%rdx
   35dd1:	add    $0x80000,%rdx
   35dd8:	sar    $0x14,%rdx
   35ddc:	and    $0x3ff,%edx
   35de2:	movslq %edx,%rdx
   35de5:	movzbl 0x80(%rdx,%r8,1),%edx
   35dee:	mov    %dl,0x1(%r11,%r10,1)
   35df3:	add    $0x20,%rax
   35df7:	add    $0x1,%edi
   35dfa:	cmp    $0x1,%edi
   35dfd:	jle    35e05 <jpeg_idct_2x2+0x245>
   35dff:	mov    -0x8(%rbp),%r15
   35e03:	leaveq 
   35e04:	retq   
   35e05:	movslq %edi,%rdx
   35e08:	mov    (%rcx,%rdx,8),%r10
   35e0c:	movslq 0x4(%rax),%rdx
   35e10:	test   %edx,%edx
   35e12:	jne    35d45 <jpeg_idct_2x2+0x185>
   35e18:	movslq 0xc(%rax),%rdx
   35e1c:	test   %edx,%edx
   35e1e:	jne    35d45 <jpeg_idct_2x2+0x185>
   35e24:	movslq 0x14(%rax),%rdx
   35e28:	test   %edx,%edx
   35e2a:	jne    35d45 <jpeg_idct_2x2+0x185>
   35e30:	movslq 0x1c(%rax),%rdx
   35e34:	test   %edx,%edx
   35e36:	jne    35d45 <jpeg_idct_2x2+0x185>
   35e3c:	movslq (%rax),%rdx
   35e3f:	add    $0x10,%rdx
   35e43:	sar    $0x5,%rdx
   35e47:	and    $0x3ff,%edx
   35e4d:	movslq %edx,%rdx
   35e50:	movzbl 0x80(%r8,%rdx,1),%edx
   35e59:	mov    %dl,(%r11,%r10,1)
   35e5d:	mov    %dl,0x1(%r11,%r10,1)
   35e62:	add    $0x20,%rax
   35e66:	jmp    35df7 <jpeg_idct_2x2+0x237>
   35e68:	nopl   0x0(%rax,%rax,1)

0000000000035e70 <jpeg_idct_1x1>:
   35e70:	push   %rbp
   35e71:	mov    %rsp,%rbp
   35e74:	mov    0x58(%rsi),%rax
   35e78:	movswq (%rax),%rax
   35e7c:	movswq (%rdx),%rdx
   35e80:	imul   %edx,%eax
   35e83:	movslq %eax,%rax
   35e86:	add    $0x4,%rax
   35e8a:	sar    $0x3,%rax
   35e8e:	and    $0x3ff,%eax
   35e93:	movslq %eax,%rax
   35e96:	mov    0x1a8(%rdi),%rdx
   35e9d:	movzbl 0x80(%rax,%rdx,1),%edx
   35ea5:	mov    %r8d,%esi
   35ea8:	mov    (%rcx),%rax
   35eab:	mov    %dl,(%rsi,%rax,1)
   35eae:	leaveq 
   35eaf:	retq   

0000000000035eb0 <jinit_1pass_quantizer>:
   35eb0:	push   %rbp
   35eb1:	mov    %rsp,%rbp
   35eb4:	sub    $0x10,%rsp
   35eb8:	mov    %r15,-0x8(%rbp)
   35ebc:	mov    0x8(%rdi),%rax
   35ec0:	mov    (%rax),%rax
   35ec3:	mov    $0x1,%esi
   35ec8:	mov    $0x98,%edx
   35ecd:	mov    %rdi,%r15
   35ed0:	callq  *%rax
   35ed2:	mov    %rax,0x270(%r15)
   35ed9:	lea    0xdb0(%rip),%rcx        # 36c90 <start_pass_1_quant>
   35ee0:	mov    %rcx,(%rax)
   35ee3:	lea    0xf46(%rip),%rcx        # 36e30 <finish_pass_1_quant>
   35eea:	mov    %rcx,0x10(%rax)
   35eee:	lea    0xf4b(%rip),%rcx        # 36e40 <new_color_map_1_quant>
   35ef5:	mov    %rcx,0x18(%rax)
   35ef9:	movq   $0x0,0x70(%rax)
   35f01:	movq   $0x0,0x50(%rax)
   35f09:	movslq 0x90(%r15),%rax
   35f10:	cmp    $0x4,%eax
   35f13:	jle    35f34 <jinit_1pass_quantizer+0x84>
   35f15:	mov    (%r15),%rax
   35f18:	movl   $0x37,0x28(%rax)
   35f1f:	mov    (%r15),%rax
   35f22:	movl   $0x4,0x2c(%rax)
   35f29:	mov    (%r15),%rax
   35f2c:	mov    (%rax),%rax
   35f2f:	mov    %r15,%rdi
   35f32:	callq  *%rax
   35f34:	movslq 0x78(%r15),%rax
   35f38:	cmp    $0x100,%eax
   35f3d:	jle    35f5e <jinit_1pass_quantizer+0xae>
   35f3f:	mov    (%r15),%rax
   35f42:	movl   $0x39,0x28(%rax)
   35f49:	mov    (%r15),%rax
   35f4c:	movl   $0x100,0x2c(%rax)
   35f53:	mov    (%r15),%rax
   35f56:	mov    (%rax),%rax
   35f59:	mov    %r15,%rdi
   35f5c:	callq  *%rax
   35f5e:	mov    %r15,%rdi
   35f61:	callq  36180 <create_colormap>
   35f66:	mov    %r15,%rdi
   35f69:	callq  36310 <create_colorindex>
   35f6e:	mov    0x70(%r15),%eax
   35f72:	cmp    $0x2,%eax
   35f75:	je     35f7d <jinit_1pass_quantizer+0xcd>
   35f77:	mov    -0x8(%rbp),%r15
   35f7b:	leaveq 
   35f7c:	retq   
   35f7d:	mov    %r15,%rdi
   35f80:	callq  36c10 <alloc_fs_workspace>
   35f85:	mov    -0x8(%rbp),%r15
   35f89:	leaveq 
   35f8a:	retq   
   35f8b:	nopl   0x0(%rax,%rax,1)

0000000000035f90 <select_ncolors>:
   35f90:	push   %rbp
   35f91:	mov    %rsp,%rbp
   35f94:	sub    $0x50,%rsp
   35f98:	mov    %rdi,-0x38(%rbp)
   35f9c:	movq   $0x1,-0x44(%rbp)
   35fa4:	movslq 0x90(%rdi),%r8
   35fab:	movslq 0x78(%rdi),%r11
   35faf:	lea    0x253ce(%rip),%rax        # 5b384 <rgb_green>
   35fb6:	mov    0x40(%rdi),%ecx
   35fb9:	movslq (%rax,%rcx,4),%rax
   35fbd:	mov    %eax,-0x44(%rbp)
   35fc0:	lea    0x25379(%rip),%rax        # 5b340 <rgb_red>
   35fc7:	movslq (%rax,%rcx,4),%rax
   35fcb:	mov    %eax,-0x40(%rbp)
   35fce:	lea    0x253f3(%rip),%rax        # 5b3c8 <rgb_blue>
   35fd5:	movslq (%rax,%rcx,4),%rax
   35fd9:	mov    %eax,-0x3c(%rbp)
   35fdc:	mov    $0x1,%edx
   35fe1:	mov    %rdx,%r9
   35fe4:	jmp    35fe9 <select_ncolors+0x59>
   35fe6:	mov    %rdi,%r9
   35fe9:	lea    0x1(%r9),%edi
   35fed:	movslq %edi,%r10
   35ff0:	mov    %rdx,%rcx
   35ff3:	mov    %r10,%rax
   35ff6:	jmp    35fff <select_ncolors+0x6f>
   35ff8:	imul   %r10,%rax
   35ffc:	add    $0x1,%ecx
   35fff:	cmp    %ecx,%r8d
   36002:	jg     35ff8 <select_ncolors+0x68>
   36004:	cmp    %rax,%r11
   36007:	jge    35fe6 <select_ncolors+0x56>
   36009:	xor    %ecx,%ecx
   3600b:	cmp    $0x1,%r9d
   3600f:	jle    36034 <select_ncolors+0xa4>
   36011:	mov    %r11,-0x30(%rbp)
   36015:	mov    %rbx,-0x8(%rbp)
   36019:	mov    %r12,-0x10(%rbp)
   3601d:	mov    %r13,-0x18(%rbp)
   36021:	mov    %r14,-0x20(%rbp)
   36025:	mov    %r15,-0x28(%rbp)
   36029:	mov    %rdx,%rbx
   3602c:	mov    %rcx,%rdx
   3602f:	mov    %rbx,%rax
   36032:	jmp    3609b <select_ncolors+0x10b>
   36034:	mov    -0x38(%rbp),%rdi
   36038:	mov    (%rdi),%r10
   3603b:	movl   $0x38,0x28(%r10)
   36043:	mov    (%rdi),%r10
   36046:	mov    %eax,0x2c(%r10)
   3604a:	mov    (%rdi),%rax
   3604d:	mov    (%rax),%rax
   36050:	mov    %r11,-0x30(%rbp)
   36054:	mov    %rbx,-0x8(%rbp)
   36058:	mov    %r12,-0x10(%rbp)
   3605c:	mov    %r13,-0x18(%rbp)
   36060:	mov    %r14,-0x20(%rbp)
   36064:	mov    %r15,-0x28(%rbp)
   36068:	mov    %rdx,%rbx
   3606b:	mov    %r8,%r12
   3606e:	mov    %rsi,%r13
   36071:	mov    %rcx,%r14
   36074:	mov    %r9,%r15
   36077:	callq  *%rax
   36079:	mov    %r14,%rdx
   3607c:	mov    %r13,%rsi
   3607f:	mov    %r12,%r8
   36082:	mov    %r15,%r9
   36085:	mov    %rdx,%rcx
   36088:	mov    %rbx,%rax
   3608b:	jmp    3609b <select_ncolors+0x10b>
   3608d:	imul   %r9d,%eax
   36091:	movslq %edx,%rdi
   36094:	mov    %r9d,(%rsi,%rdi,4)
   36098:	add    $0x1,%edx
   3609b:	cmp    %r8d,%edx
   3609e:	jl     3608d <select_ncolors+0xfd>
   360a0:	mov    -0x30(%rbp),%r9
   360a4:	mov    -0x38(%rbp),%rdi
   360a8:	mov    %rcx,%r10
   360ab:	mov    %r10,%r11
   360ae:	jmp    360b6 <select_ncolors+0x126>
   360b0:	mov    %rcx,%r10
   360b3:	mov    %r10,%r11
   360b6:	cmp    %r8d,%r11d
   360b9:	jge    360f7 <select_ncolors+0x167>
   360bb:	mov    0x40(%rdi),%edx
   360be:	cmp    $0x2,%edx
   360c1:	je     360c8 <select_ncolors+0x138>
   360c3:	mov    %r11,%rdx
   360c6:	jmp    360d0 <select_ncolors+0x140>
   360c8:	movslq %r11d,%rdx
   360cb:	movslq -0x44(%rbp,%rdx,4),%rdx
   360d0:	movslq %edx,%r12
   360d3:	movslq (%rsi,%r12,4),%r13
   360d7:	cltd   
   360d8:	mov    %rax,%r14
   360db:	idiv   %r13d
   360de:	movslq %eax,%r13
   360e1:	movslq (%rsi,%r12,4),%rdx
   360e5:	add    $0x1,%edx
   360e8:	movslq %edx,%rax
   360eb:	imul   %r13,%rax
   360ef:	cmp    %rax,%r9
   360f2:	jge    36112 <select_ncolors+0x182>
   360f4:	mov    %r14,%rax
   360f7:	test   %r10d,%r10d
   360fa:	jg     360b0 <select_ncolors+0x120>
   360fc:	mov    -0x28(%rbp),%r15
   36100:	mov    -0x20(%rbp),%r14
   36104:	mov    -0x18(%rbp),%r13
   36108:	mov    -0x10(%rbp),%r12
   3610c:	mov    -0x8(%rbp),%rbx
   36110:	leaveq 
   36111:	retq   
   36112:	mov    %edx,(%rsi,%r12,4)
   36116:	add    $0x1,%r11d
   3611a:	mov    %rbx,%r10
   3611d:	jmp    360b6 <select_ncolors+0x126>
   3611f:	nop

0000000000036120 <output_value>:
   36120:	push   %rbp
   36121:	mov    %rsp,%rbp
   36124:	mov    %rcx,%rax
   36127:	shr    $0x1f,%eax
   3612a:	add    %ecx,%eax
   3612c:	sar    %eax
   3612e:	movslq %eax,%rsi
   36131:	movslq %edx,%rdx
   36134:	mov    %rdx,%rax
   36137:	shl    $0x8,%rax
   3613b:	sub    %rdx,%rax
   3613e:	add    %rsi,%rax
   36141:	cqto   
   36143:	movslq %ecx,%rcx
   36146:	idiv   %rcx
   36149:	leaveq 
   3614a:	retq   
   3614b:	nopl   0x0(%rax,%rax,1)

0000000000036150 <largest_input_value>:
   36150:	push   %rbp
   36151:	mov    %rsp,%rbp
   36154:	lea    0x1(%rdx,%rdx,1),%eax
   36158:	movslq %eax,%rdx
   3615b:	mov    %rdx,%rax
   3615e:	shl    $0x8,%rax
   36162:	sub    %rdx,%rax
   36165:	movslq %ecx,%rdx
   36168:	add    %rdx,%rax
   3616b:	cqto   
   3616d:	add    %ecx,%ecx
   3616f:	movslq %ecx,%rcx
   36172:	idiv   %rcx
   36175:	leaveq 
   36176:	retq   
   36177:	nopw   0x0(%rax,%rax,1)

0000000000036180 <create_colormap>:
   36180:	push   %rbp
   36181:	mov    %rsp,%rbp
   36184:	sub    $0x60,%rsp
   36188:	mov    %r13,-0x20(%rbp)
   3618c:	mov    %r14,-0x28(%rbp)
   36190:	mov    %r15,-0x30(%rbp)
   36194:	mov    %rbx,-0x10(%rbp)
   36198:	mov    %r12,-0x18(%rbp)
   3619c:	mov    %rdi,-0x50(%rbp)
   361a0:	mov    0x270(%rdi),%r12
   361a7:	mov    %r12,-0x8(%rbp)
   361ab:	lea    0x3c(%r12),%r15
   361b0:	mov    %r15,-0x48(%rbp)
   361b4:	mov    %rdi,%rbx
   361b7:	mov    %r15,%rsi
   361ba:	callq  35f90 <select_ncolors>
   361bf:	mov    $0x1,%r13d
   361c5:	movslq 0x90(%rbx),%rcx
   361cc:	cmp    $0x3,%ecx
   361cf:	je     361f5 <create_colormap+0x75>
   361d1:	mov    (%rbx),%rcx
   361d4:	movl   $0x5f,0x28(%rcx)
   361db:	mov    (%rbx),%rcx
   361de:	mov    %eax,0x2c(%rcx)
   361e1:	mov    (%rbx),%rcx
   361e4:	mov    0x8(%rcx),%rcx
   361e8:	mov    %rax,%r12
   361eb:	mov    %rbx,%rdi
   361ee:	mov    %r13,%rsi
   361f1:	callq  *%rcx
   361f3:	jmp    3622d <create_colormap+0xad>
   361f5:	mov    (%rbx),%rdx
   361f8:	mov    %eax,0x2c(%rdx)
   361fb:	movslq (%r15),%rcx
   361fe:	mov    %ecx,0x30(%rdx)
   36201:	movslq 0x40(%r12),%rcx
   36206:	mov    %ecx,0x34(%rdx)
   36209:	movslq 0x44(%r12),%rcx
   3620e:	mov    %ecx,0x38(%rdx)
   36211:	mov    (%rbx),%rcx
   36214:	movl   $0x5e,0x28(%rcx)
   3621b:	mov    (%rbx),%rcx
   3621e:	mov    0x8(%rcx),%rcx
   36222:	mov    %rax,%r12
   36225:	mov    %rbx,%rdi
   36228:	mov    %r13,%rsi
   3622b:	callq  *%rcx
   3622d:	mov    0x8(%rbx),%rax
   36231:	mov    0x10(%rax),%rax
   36235:	mov    %r13,%rsi
   36238:	mov    0x90(%rbx),%ecx
   3623e:	mov    %rbx,%rdi
   36241:	mov    %r12,%rdx
   36244:	callq  *%rax
   36246:	mov    %rbx,%rdi
   36249:	mov    %rax,%r13
   3624c:	xor    %r8d,%r8d
   3624f:	mov    %r8,%rsi
   36252:	mov    %r12,%rbx
   36255:	jmp    36291 <create_colormap+0x111>
   36257:	mov    0x0(%r13,%r14,8),%r10
   3625c:	movslq %ecx,%r9
   3625f:	mov    %al,(%r10,%r9,1)
   36263:	add    $0x1,%ecx
   36266:	add    $0x1,%edx
   36269:	cmp    %ebx,%edx
   3626b:	jl     36257 <create_colormap+0xd7>
   3626d:	add    %r11d,%edi
   36270:	cmp    %r12d,%edi
   36273:	jl     362c6 <create_colormap+0x146>
   36275:	add    $0x1,%r15d
   36279:	mov    -0x50(%rbp),%rdi
   3627d:	mov    -0x40(%rbp),%r9
   36281:	mov    -0x58(%rbp),%rcx
   36285:	cmp    %r9d,%r15d
   36288:	jl     362ce <create_colormap+0x14e>
   3628a:	add    $0x1,%esi
   3628d:	mov    -0x48(%rbp),%r15
   36291:	mov    %rbx,-0x60(%rbp)
   36295:	mov    %rsi,-0x38(%rbp)
   36299:	movslq 0x90(%rdi),%rax
   362a0:	cmp    %esi,%eax
   362a2:	jg     362ea <create_colormap+0x16a>
   362a4:	mov    -0x8(%rbp),%rax
   362a8:	mov    %r13,0x20(%rax)
   362ac:	mov    %r12d,0x28(%rax)
   362b0:	mov    -0x18(%rbp),%r12
   362b4:	mov    -0x10(%rbp),%rbx
   362b8:	mov    -0x30(%rbp),%r15
   362bc:	mov    -0x28(%rbp),%r14
   362c0:	mov    -0x20(%rbp),%r13
   362c4:	leaveq 
   362c5:	retq   
   362c6:	mov    %rdi,%rcx
   362c9:	mov    %r8,%rdx
   362cc:	jmp    36269 <create_colormap+0xe9>
   362ce:	mov    %r15,%rdx
   362d1:	callq  36120 <output_value>
   362d6:	mov    %rbx,%rdi
   362d9:	imul   %r15d,%edi
   362dd:	mov    -0x38(%rbp),%rsi
   362e1:	mov    -0x60(%rbp),%r11
   362e5:	xor    %r8d,%r8d
   362e8:	jmp    36270 <create_colormap+0xf0>
   362ea:	movslq %esi,%r14
   362ed:	movslq (%r15,%r14,4),%r9
   362f1:	mov    %rbx,%rax
   362f4:	mov    %r9,-0x40(%rbp)
   362f8:	cltd   
   362f9:	idiv   %r9d
   362fc:	lea    -0x1(%r9),%ecx
   36300:	mov    %rcx,-0x58(%rbp)
   36304:	mov    %rax,%rbx
   36307:	mov    %r8,%r15
   3630a:	jmpq   36285 <create_colormap+0x105>
   3630f:	nop

0000000000036310 <create_colorindex>:
   36310:	push   %rbp
   36311:	mov    %rsp,%rbp
   36314:	sub    $0x50,%rsp
   36318:	mov    %r12,-0x10(%rbp)
   3631c:	mov    %r13,-0x18(%rbp)
   36320:	mov    %r14,-0x20(%rbp)
   36324:	mov    %r15,-0x28(%rbp)
   36328:	mov    %rbx,-0x8(%rbp)
   3632c:	mov    0x270(%rdi),%r15
   36333:	mov    %r15,-0x48(%rbp)
   36337:	xor    %r12d,%r12d
   3633a:	mov    0x70(%rdi),%eax
   3633d:	cmp    $0x1,%eax
   36340:	je     36354 <create_colorindex+0x44>
   36342:	movl   $0x0,0x38(%r15)
   3634a:	mov    $0x100,%edx
   3634f:	mov    %r12,%r13
   36352:	jmp    36367 <create_colorindex+0x57>
   36354:	movl   $0x1,0x38(%r15)
   3635c:	mov    $0x2fe,%edx
   36361:	mov    $0x1fe,%r13d
   36367:	mov    %r13,-0x40(%rbp)
   3636b:	mov    0x8(%rdi),%rax
   3636f:	mov    0x10(%rax),%rax
   36373:	mov    $0x1,%esi
   36378:	mov    0x90(%rdi),%ecx
   3637e:	mov    %rdi,%rbx
   36381:	callq  *%rax
   36383:	movslq 0x28(%r15),%r8
   36387:	mov    %rax,0x30(%r15)
   3638b:	mov    %r12,%rdx
   3638e:	jmp    363df <create_colorindex+0xcf>
   36390:	add    $0x1,%r14d
   36394:	mov    %rbx,%rdi
   36397:	mov    %r12,%rsi
   3639a:	mov    %r14,%rdx
   3639d:	mov    %r13,%rcx
   363a0:	callq  36150 <largest_input_value>
   363a5:	cmp    %r15d,%eax
   363a8:	jl     36390 <create_colorindex+0x80>
   363aa:	mov    -0x30(%rbp),%r8
   363ae:	mov    %r14,%rdx
   363b1:	imul   %r8d,%edx
   363b5:	movslq %r15d,%rcx
   363b8:	mov    -0x38(%rbp),%rsi
   363bc:	mov    %dl,(%rsi,%rcx,1)
   363bf:	add    $0x1,%r15d
   363c3:	cmp    $0xff,%r15d
   363ca:	jle    363a5 <create_colorindex+0x95>
   363cc:	mov    -0x40(%rbp),%r13
   363d0:	test   %r13d,%r13d
   363d3:	jg     36401 <create_colorindex+0xf1>
   363d5:	add    $0x1,%r12d
   363d9:	mov    -0x48(%rbp),%r15
   363dd:	xor    %edx,%edx
   363df:	movslq 0x90(%rbx),%rax
   363e6:	cmp    %r12d,%eax
   363e9:	jg     3640f <create_colorindex+0xff>
   363eb:	mov    -0x8(%rbp),%rbx
   363ef:	mov    -0x28(%rbp),%r15
   363f3:	mov    -0x20(%rbp),%r14
   363f7:	mov    -0x18(%rbp),%r13
   363fb:	mov    -0x10(%rbp),%r12
   363ff:	leaveq 
   36400:	retq   
   36401:	mov    -0x38(%rbp),%rsi
   36405:	mov    $0x1,%eax
   3640a:	jmpq   36495 <create_colorindex+0x185>
   3640f:	test   %r13d,%r13d
   36412:	movslq %r12d,%rsi
   36415:	movslq 0x3c(%r15,%rsi,4),%r14
   3641a:	jle    3642e <create_colorindex+0x11e>
   3641c:	mov    0x30(%r15),%rcx
   36420:	mov    (%rcx,%rsi,8),%rax
   36424:	add    $0xff,%rax
   3642a:	mov    %rax,(%rcx,%rsi,8)
   3642e:	mov    0x30(%r15),%rax
   36432:	mov    (%rax,%rsi,8),%rax
   36436:	mov    %rax,-0x38(%rbp)
   3643a:	mov    %r8,%r15
   3643d:	lea    -0x1(%r14),%r13d
   36441:	mov    %rbx,%rdi
   36444:	mov    %r12,%rsi
   36447:	mov    %r13,%rcx
   3644a:	callq  36150 <largest_input_value>
   3644f:	mov    %r15,%rcx
   36452:	mov    %rax,%r15
   36455:	mov    %rcx,%rax
   36458:	cltd   
   36459:	idiv   %r14d
   3645c:	mov    %rax,%r8
   3645f:	mov    %r15,%rax
   36462:	mov    %r8,-0x30(%rbp)
   36466:	xor    %r14d,%r14d
   36469:	mov    %r14,%r15
   3646c:	jmpq   363c3 <create_colorindex+0xb3>
   36471:	movzbl (%rsi),%edx
   36474:	mov    %rax,%rcx
   36477:	neg    %ecx
   36479:	movslq %ecx,%rcx
   3647c:	mov    %dl,(%rsi,%rcx,1)
   3647f:	movzbl 0xff(%rsi),%edx
   36486:	lea    0xff(%rax),%ecx
   3648c:	movslq %ecx,%rcx
   3648f:	mov    %dl,(%rsi,%rcx,1)
   36492:	add    $0x1,%eax
   36495:	cmp    $0xff,%eax
   3649a:	jle    36471 <create_colorindex+0x161>
   3649c:	jmpq   363d5 <create_colorindex+0xc5>
   364a1:	data16 nopw %cs:0x0(%rax,%rax,1)
   364ac:	nopl   0x0(%rax)

00000000000364b0 <make_odither_array>:
   364b0:	push   %rbp
   364b1:	mov    %rsp,%rbp
   364b4:	sub    $0x20,%rsp
   364b8:	mov    %r15,-0x20(%rbp)
   364bc:	mov    %r12,-0x8(%rbp)
   364c0:	mov    %r13,-0x10(%rbp)
   364c4:	mov    %r14,-0x18(%rbp)
   364c8:	mov    0x8(%rdi),%rax
   364cc:	mov    (%rax),%rax
   364cf:	mov    %rsi,%r12
   364d2:	mov    $0x1,%esi
   364d7:	mov    $0x400,%edx
   364dc:	callq  *%rax
   364de:	lea    -0x1(%r12),%ecx
   364e3:	movslq %ecx,%rcx
   364e6:	shl    $0x9,%rcx
   364ea:	mov    %rax,%r12
   364ed:	lea    0x24f18(%rip),%r8        # 5b40c <base_dither_matrix>
   364f4:	xor    %esi,%esi
   364f6:	mov    $0xff,%edi
   364fb:	mov    %rsi,%r9
   364fe:	jmp    3651d <make_odither_array+0x6d>
   36500:	sub    %rdx,%rax
   36503:	cqto   
   36505:	idiv   %rcx
   36508:	neg    %rax
   3650b:	mov    %eax,(%r10,%r14,4)
   3650f:	add    $0x1,%r13d
   36513:	cmp    $0xf,%r13d
   36517:	jle    36538 <make_odither_array+0x88>
   36519:	add    $0x1,%r9d
   3651d:	cmp    $0xf,%r9d
   36521:	jle    36569 <make_odither_array+0xb9>
   36523:	mov    %r12,%rax
   36526:	mov    -0x18(%rbp),%r14
   3652a:	mov    -0x10(%rbp),%r13
   3652e:	mov    -0x8(%rbp),%r12
   36532:	mov    -0x20(%rbp),%r15
   36536:	leaveq 
   36537:	retq   
   36538:	movslq %r13d,%r14
   3653b:	lea    (%r11,%r14,1),%rax
   3653f:	movzbl (%rax,%r8,1),%eax
   36544:	add    %eax,%eax
   36546:	neg    %eax
   36548:	add    %edi,%eax
   3654a:	movslq %eax,%rax
   3654d:	mov    %rax,%rdx
   36550:	shl    $0x8,%rdx
   36554:	mov    %rdx,%r15
   36557:	sub    %rax,%r15
   3655a:	test   %r15,%r15
   3655d:	js     36500 <make_odither_array+0x50>
   3655f:	mov    %r15,%rax
   36562:	cqto   
   36564:	idiv   %rcx
   36567:	jmp    3650b <make_odither_array+0x5b>
   36569:	movslq %r9d,%rax
   3656c:	mov    %rax,%r11
   3656f:	shl    $0x4,%r11
   36573:	shl    $0x6,%rax
   36577:	lea    (%r12,%rax,1),%r10
   3657b:	mov    %rsi,%r13
   3657e:	jmp    36513 <make_odither_array+0x63>

0000000000036580 <create_odither_tables>:
   36580:	push   %rbp
   36581:	mov    %rsp,%rbp
   36584:	sub    $0x30,%rsp
   36588:	mov    %rbx,-0x8(%rbp)
   3658c:	mov    %r12,-0x10(%rbp)
   36590:	mov    %r13,-0x18(%rbp)
   36594:	mov    %r14,-0x20(%rbp)
   36598:	mov    %r15,-0x28(%rbp)
   3659c:	mov    %rdi,%rbx
   3659f:	mov    0x270(%rbx),%r12
   365a6:	xor    %r13d,%r13d
   365a9:	mov    %r13,%r14
   365ac:	jmp    365db <create_odither_tables+0x5b>
   365ae:	movslq %eax,%rcx
   365b1:	movslq 0x3c(%r12,%rcx,4),%rdx
   365b6:	cmp    %esi,%edx
   365b8:	je     365fd <create_odither_tables+0x7d>
   365ba:	add    $0x1,%eax
   365bd:	cmp    %r14d,%eax
   365c0:	jl     365ae <create_odither_tables+0x2e>
   365c2:	mov    %r13,%rax
   365c5:	test   %rax,%rax
   365c8:	jne    365d2 <create_odither_tables+0x52>
   365ca:	mov    %rbx,%rdi
   365cd:	callq  364b0 <make_odither_array>
   365d2:	mov    %rax,0x50(%r12,%r15,8)
   365d7:	add    $0x1,%r14d
   365db:	movslq 0x90(%rbx),%rax
   365e2:	cmp    %r14d,%eax
   365e5:	jg     36604 <create_odither_tables+0x84>
   365e7:	mov    -0x28(%rbp),%r15
   365eb:	mov    -0x20(%rbp),%r14
   365ef:	mov    -0x18(%rbp),%r13
   365f3:	mov    -0x10(%rbp),%r12
   365f7:	mov    -0x8(%rbp),%rbx
   365fb:	leaveq 
   365fc:	retq   
   365fd:	mov    0x50(%r12,%rcx,8),%rax
   36602:	jmp    365c5 <create_odither_tables+0x45>
   36604:	movslq %r14d,%r15
   36607:	movslq 0x3c(%r12,%r15,4),%rsi
   3660c:	mov    %r13,%rax
   3660f:	jmp    365bd <create_odither_tables+0x3d>
   36611:	data16 nopw %cs:0x0(%rax,%rax,1)
   3661c:	nopl   0x0(%rax)

0000000000036620 <color_quantize>:
   36620:	push   %rbp
   36621:	mov    %rsp,%rbp
   36624:	sub    $0x30,%rsp
   36628:	mov    %rbx,-0x8(%rbp)
   3662c:	mov    %r12,-0x10(%rbp)
   36630:	mov    %r13,-0x18(%rbp)
   36634:	mov    %r14,-0x20(%rbp)
   36638:	mov    %r15,-0x28(%rbp)
   3663c:	mov    0x270(%rdi),%rax
   36643:	mov    0x30(%rax),%r11
   36647:	mov    0x88(%rdi),%ebx
   3664d:	mov    %rbx,-0x30(%rbp)
   36651:	movslq 0x90(%rdi),%r15
   36658:	xor    %r14d,%r14d
   3665b:	mov    %r14,%r9
   3665e:	jmp    3669a <color_quantize+0x7a>
   36660:	lea    0x1(%r10),%r13d
   36664:	lea    0x1(%rdi),%r12
   36668:	movslq %r10d,%r10
   3666b:	mov    (%r11,%r10,8),%r10
   3666f:	movzbl (%rdi),%edi
   36672:	movzbl (%rdi,%r10,1),%edi
   36677:	add    %edi,%eax
   36679:	mov    %r12,%rdi
   3667c:	mov    %r13,%r10
   3667f:	cmp    %r15d,%r10d
   36682:	jl     36660 <color_quantize+0x40>
   36684:	mov    %al,(%r8)
   36687:	add    $0x1,%r8
   3668b:	add    $0xffffffff,%ebx
   3668e:	test   %ebx,%ebx
   36690:	jne    366b5 <color_quantize+0x95>
   36692:	add    $0x1,%r9d
   36696:	mov    -0x30(%rbp),%rbx
   3669a:	cmp    %ecx,%r9d
   3669d:	jl     366bd <color_quantize+0x9d>
   3669f:	mov    -0x28(%rbp),%r15
   366a3:	mov    -0x20(%rbp),%r14
   366a7:	mov    -0x18(%rbp),%r13
   366ab:	mov    -0x10(%rbp),%r12
   366af:	mov    -0x8(%rbp),%rbx
   366b3:	leaveq 
   366b4:	retq   
   366b5:	mov    %r14,%rax
   366b8:	mov    %rax,%r10
   366bb:	jmp    3667f <color_quantize+0x5f>
   366bd:	movslq %r9d,%rax
   366c0:	mov    (%rsi,%rax,8),%rdi
   366c4:	mov    (%rdx,%rax,8),%r8
   366c8:	jmp    3668e <color_quantize+0x6e>
   366ca:	nopw   0x0(%rax,%rax,1)

00000000000366d0 <color_quantize3>:
   366d0:	push   %rbp
   366d1:	mov    %rsp,%rbp
   366d4:	sub    $0x20,%rsp
   366d8:	mov    %r12,-0x8(%rbp)
   366dc:	mov    %r13,-0x10(%rbp)
   366e0:	mov    %r14,-0x18(%rbp)
   366e4:	mov    %r15,-0x20(%rbp)
   366e8:	mov    0x270(%rdi),%rax
   366ef:	mov    0x30(%rax),%rax
   366f3:	mov    (%rax),%r15
   366f6:	mov    0x8(%rax),%r12
   366fa:	mov    0x10(%rax),%r14
   366fe:	mov    0x88(%rdi),%r13d
   36705:	xor    %r9d,%r9d
   36708:	jmp    36745 <color_quantize3+0x75>
   3670a:	movzbl 0x1(%rax),%r10d
   3670f:	movzbl (%r10,%r12,1),%r11d
   36714:	movzbl (%rax),%r10d
   36718:	movzbl (%r10,%r15,1),%r10d
   3671d:	add    %r11d,%r10d
   36720:	movzbl 0x2(%rax),%r11d
   36725:	movzbl (%r11,%r14,1),%r11d
   3672a:	add    %r11d,%r10d
   3672d:	mov    %r10b,(%rdi)
   36730:	add    $0x3,%rax
   36734:	add    $0x1,%rdi
   36738:	add    $0xffffffff,%r8d
   3673c:	test   %r8d,%r8d
   3673f:	jne    3670a <color_quantize3+0x3a>
   36741:	add    $0x1,%r9d
   36745:	cmp    %ecx,%r9d
   36748:	jl     3675c <color_quantize3+0x8c>
   3674a:	mov    -0x20(%rbp),%r15
   3674e:	mov    -0x18(%rbp),%r14
   36752:	mov    -0x10(%rbp),%r13
   36756:	mov    -0x8(%rbp),%r12
   3675a:	leaveq 
   3675b:	retq   
   3675c:	movslq %r9d,%rdi
   3675f:	mov    (%rsi,%rdi,8),%rax
   36763:	mov    (%rdx,%rdi,8),%rdi
   36767:	mov    %r13,%r8
   3676a:	jmp    3673c <color_quantize3+0x6c>
   3676c:	nopl   0x0(%rax)

0000000000036770 <quantize_ord_dither>:
   36770:	push   %rbp
   36771:	mov    %rsp,%rbp
   36774:	sub    $0x60,%rsp
   36778:	mov    %rcx,-0x58(%rbp)
   3677c:	mov    %rbx,-0x20(%rbp)
   36780:	mov    %r12,-0x28(%rbp)
   36784:	mov    %r13,-0x30(%rbp)
   36788:	mov    %r14,-0x38(%rbp)
   3678c:	mov    %r15,-0x40(%rbp)
   36790:	mov    %rsi,-0x10(%rbp)
   36794:	mov    0x270(%rdi),%r13
   3679b:	movslq 0x90(%rdi),%r12
   367a2:	mov    0x88(%rdi),%edi
   367a8:	mov    %rsi,%rbx
   367ab:	mov    %rdi,%rsi
   367ae:	mov    %rdx,%r14
   367b1:	mov    %rsi,-0x48(%rbp)
   367b5:	xor    %eax,%eax
   367b7:	jmp    3681b <quantize_ord_dither+0xab>
   367b9:	lea    0x1(%r10),%r8d
   367bd:	and    $0xf,%r8d
   367c1:	movzbl (%rax),%edi
   367c4:	movslq %r10d,%rdx
   367c7:	add    (%r9,%rdx,4),%edi
   367cb:	movslq %edi,%rdx
   367ce:	movzbl (%rdx,%r11,1),%edx
   367d3:	movzbl (%rcx),%edi
   367d6:	add    %edi,%edx
   367d8:	mov    %dl,(%rcx)
   367da:	add    $0x1,%rcx
   367de:	add    %r12,%rax
   367e1:	add    $0xffffffff,%ebx
   367e4:	mov    %r8,%r10
   367e7:	test   %ebx,%ebx
   367e9:	jne    367b9 <quantize_ord_dither+0x49>
   367eb:	mov    -0x60(%rbp),%rax
   367ef:	lea    0x1(%rax),%edi
   367f2:	mov    -0x10(%rbp),%rbx
   367f6:	mov    -0x18(%rbp),%r9
   367fa:	xor    %r10d,%r10d
   367fd:	cmp    %r12d,%edi
   36800:	jl     36835 <quantize_ord_dither+0xc5>
   36802:	mov    -0x8(%rbp),%rax
   36806:	add    $0x1,%eax
   36809:	and    $0xf,%eax
   3680c:	mov    %eax,0x4c(%r13)
   36810:	mov    -0x50(%rbp),%rax
   36814:	add    $0x1,%eax
   36817:	mov    -0x58(%rbp),%rcx
   3681b:	cmp    %ecx,%eax
   3681d:	jl     36856 <quantize_ord_dither+0xe6>
   3681f:	mov    -0x40(%rbp),%r15
   36823:	mov    -0x38(%rbp),%r14
   36827:	mov    -0x30(%rbp),%r13
   3682b:	mov    -0x28(%rbp),%r12
   3682f:	mov    -0x20(%rbp),%rbx
   36833:	leaveq 
   36834:	retq   
   36835:	mov    (%r14,%r15,8),%rcx
   36839:	mov    0x30(%r13),%rdx
   3683d:	movslq %edi,%rax
   36840:	mov    (%rdx,%rax,8),%r11
   36844:	add    0x50(%r13,%rax,8),%r9
   36849:	add    (%rbx,%r15,8),%rax
   3684d:	mov    %rdi,-0x60(%rbp)
   36851:	mov    %rsi,%rbx
   36854:	jmp    367e7 <quantize_ord_dither+0x77>
   36856:	movslq %eax,%r15
   36859:	mov    (%r14,%r15,8),%rdi
   3685d:	mov    %rax,-0x50(%rbp)
   36861:	callq  44d0 <jzero_far@plt>
   36866:	movslq 0x4c(%r13),%r9
   3686a:	mov    %r9,-0x8(%rbp)
   3686e:	shl    $0x6,%r9
   36872:	mov    %r9,-0x18(%rbp)
   36876:	xor    %r10d,%r10d
   36879:	mov    -0x48(%rbp),%rsi
   3687d:	mov    %r10,%rdi
   36880:	jmpq   367fd <quantize_ord_dither+0x8d>
   36885:	data16 nopw %cs:0x0(%rax,%rax,1)

0000000000036890 <quantize3_ord_dither>:
   36890:	push   %rbp
   36891:	mov    %rsp,%rbp
   36894:	sub    $0x60,%rsp
   36898:	mov    %rdx,-0x10(%rbp)
   3689c:	mov    %rsi,-0x18(%rbp)
   368a0:	mov    %rbx,-0x28(%rbp)
   368a4:	mov    %r12,-0x30(%rbp)
   368a8:	mov    %r13,-0x38(%rbp)
   368ac:	mov    %r14,-0x40(%rbp)
   368b0:	mov    %r15,-0x48(%rbp)
   368b4:	mov    %rcx,-0x50(%rbp)
   368b8:	mov    0x270(%rdi),%r9
   368bf:	mov    %r9,-0x20(%rbp)
   368c3:	mov    0x30(%r9),%rax
   368c7:	mov    (%rax),%r12
   368ca:	mov    0x8(%rax),%r13
   368ce:	mov    0x10(%rax),%r11
   368d2:	mov    0x88(%rdi),%eax
   368d8:	mov    %rax,-0x58(%rbp)
   368dc:	xor    %ebx,%ebx
   368de:	mov    %rbx,%r10
   368e1:	jmp    3695c <quantize3_ord_dither+0xcc>
   368e3:	lea    0x1(%rbx),%edi
   368e6:	and    $0xf,%edi
   368e9:	movzbl 0x1(%rcx),%esi
   368ed:	movslq %ebx,%r9
   368f0:	add    (%r15,%r9,4),%esi
   368f4:	movslq %esi,%rsi
   368f7:	movzbl (%rsi,%r13,1),%ebx
   368fc:	movzbl (%rcx),%esi
   368ff:	add    (%r14,%r9,4),%esi
   36903:	movslq %esi,%rsi
   36906:	movzbl (%rsi,%r12,1),%esi
   3690b:	add    %esi,%ebx
   3690d:	movzbl 0x2(%rcx),%esi
   36911:	add    (%r8,%r9,4),%esi
   36915:	movslq %esi,%rsi
   36918:	movzbl (%rsi,%r11,1),%esi
   3691d:	add    %ebx,%esi
   3691f:	mov    %sil,(%rdx)
   36922:	add    $0x3,%rcx
   36926:	add    $0x1,%rdx
   3692a:	add    $0xffffffff,%eax
   3692d:	mov    %rdi,%rbx
   36930:	test   %eax,%eax
   36932:	jne    368e3 <quantize3_ord_dither+0x53>
   36934:	mov    -0x8(%rbp),%rax
   36938:	add    $0x1,%eax
   3693b:	and    $0xf,%eax
   3693e:	mov    -0x20(%rbp),%r9
   36942:	mov    %eax,0x4c(%r9)
   36946:	add    $0x1,%r10d
   3694a:	mov    -0x58(%rbp),%rax
   3694e:	xor    %ebx,%ebx
   36950:	mov    -0x50(%rbp),%rcx
   36954:	mov    -0x18(%rbp),%rsi
   36958:	mov    -0x10(%rbp),%rdx
   3695c:	cmp    %ecx,%r10d
   3695f:	jl     36977 <quantize3_ord_dither+0xe7>
   36961:	mov    -0x48(%rbp),%r15
   36965:	mov    -0x40(%rbp),%r14
   36969:	mov    -0x38(%rbp),%r13
   3696d:	mov    -0x30(%rbp),%r12
   36971:	mov    -0x28(%rbp),%rbx
   36975:	leaveq 
   36976:	retq   
   36977:	movslq %r10d,%rdi
   3697a:	mov    (%rsi,%rdi,8),%rcx
   3697e:	mov    (%rdx,%rdi,8),%rdx
   36982:	movslq 0x4c(%r9),%r8
   36986:	mov    %r8,-0x8(%rbp)
   3698a:	shl    $0x6,%r8
   3698e:	mov    %r8,%r15
   36991:	add    0x58(%r9),%r15
   36995:	mov    %r8,%r14
   36998:	add    0x50(%r9),%r14
   3699c:	add    0x60(%r9),%r8
   369a0:	jmp    36930 <quantize3_ord_dither+0xa0>
   369a2:	data16 nopw %cs:0x0(%rax,%rax,1)
   369ad:	nopl   (%rax)

00000000000369b0 <quantize_fs_dither>:
   369b0:	push   %rbp
   369b1:	mov    %rsp,%rbp
   369b4:	sub    $0xb0,%rsp
   369bb:	mov    %r15,-0x28(%rbp)
   369bf:	mov    %r14,-0x20(%rbp)
   369c3:	mov    %r13,-0x18(%rbp)
   369c7:	mov    %r12,-0x10(%rbp)
   369cb:	mov    %rbx,-0x8(%rbp)
   369cf:	mov    %rcx,-0x98(%rbp)
   369d6:	mov    %rsi,-0x70(%rbp)
   369da:	mov    %rdx,-0x80(%rbp)
   369de:	mov    0x270(%rdi),%r13
   369e5:	mov    %r13,-0x68(%rbp)
   369e9:	mov    0x1a8(%rdi),%rax
   369f0:	mov    %rax,-0x50(%rbp)
   369f4:	movslq 0x90(%rdi),%r14
   369fb:	mov    %r14,-0xa8(%rbp)
   36a02:	mov    0x88(%rdi),%ebx
   36a08:	mov    %rbx,-0x30(%rbp)
   36a0c:	lea    -0x1(%rbx),%edi
   36a0f:	mov    %r14,%rax
   36a12:	imul   %edi,%eax
   36a15:	mov    %eax,%eax
   36a17:	mov    %rax,-0x38(%rbp)
   36a1b:	mov    %r14,%rax
   36a1e:	neg    %eax
   36a20:	mov    %rax,-0x40(%rbp)
   36a24:	mov    %edi,%eax
   36a26:	mov    %rax,-0x78(%rbp)
   36a2a:	xor    %eax,%eax
   36a2c:	lea    0x1(%rbx),%edi
   36a2f:	mov    %edi,%edi
   36a31:	add    %rdi,%rdi
   36a34:	mov    %rdi,-0x60(%rbp)
   36a38:	mov    %rsi,%r12
   36a3b:	mov    %rbx,%rsi
   36a3e:	mov    %rdx,%rbx
   36a41:	jmpq   36b2a <quantize_fs_dither+0x17a>
   36a46:	lea    (%rax,%r9,1),%r13
   36a4a:	movswq 0x0(%r13),%rax
   36a4f:	lea    0x8(%rax,%rbx,1),%eax
   36a53:	sar    $0x4,%eax
   36a56:	movzbl (%rcx),%ebx
   36a59:	add    %ebx,%eax
   36a5b:	movslq %eax,%rax
   36a5e:	movzbl (%rax,%r14,1),%ebx
   36a63:	movzbl (%rbx,%rdi,1),%edi
   36a67:	movzbl (%rdx),%eax
   36a6a:	add    %edi,%eax
   36a6c:	mov    %al,(%rdx)
   36a6e:	movzbl (%rdi,%r12,1),%eax
   36a73:	sub    %eax,%ebx
   36a75:	lea    (%rbx,%rbx,2),%edi
   36a78:	lea    (%r8,%rdi,1),%eax
   36a7c:	mov    %ax,(%r9)
   36a80:	lea    (%rbx,%rbx,4),%eax
   36a83:	lea    (%r11,%rax,1),%r8d
   36a87:	add    %r15,%rcx
   36a8a:	lea    (%rbx,%rdi,2),%r9d
   36a8e:	add    %r10,%rdx
   36a91:	add    $0xffffffff,%esi
   36a94:	mov    %rbx,%r11
   36a97:	mov    %r9,%rbx
   36a9a:	mov    %r13,%r9
   36a9d:	mov    -0x58(%rbp),%rdi
   36aa1:	mov    -0x48(%rbp),%rax
   36aa5:	test   %esi,%esi
   36aa7:	jne    36a46 <quantize_fs_dither+0x96>
   36aa9:	mov    %r8w,(%r9)
   36aad:	mov    -0xa0(%rbp),%rax
   36ab4:	lea    0x1(%rax),%ecx
   36ab7:	mov    -0x68(%rbp),%r13
   36abb:	mov    -0xa8(%rbp),%r14
   36ac2:	mov    $0xffffffffffffffff,%r15
   36ac9:	mov    -0x40(%rbp),%r8
   36acd:	mov    -0x88(%rbp),%rdx
   36ad4:	mov    -0x80(%rbp),%rbx
   36ad8:	mov    -0x70(%rbp),%r12
   36adc:	mov    $0x1,%r10d
   36ae2:	mov    -0x78(%rbp),%rdi
   36ae6:	mov    -0x38(%rbp),%rsi
   36aea:	mov    -0x60(%rbp),%r9
   36aee:	mov    $0x2,%r11d
   36af4:	mov    $0xfffffffffffffffe,%rax
   36afb:	cmp    %r14d,%ecx
   36afe:	jl     36b44 <quantize_fs_dither+0x194>
   36b00:	movslq 0x90(%r13),%rax
   36b07:	test   %eax,%eax
   36b09:	je     36b0e <quantize_fs_dither+0x15e>
   36b0b:	xor    %r10d,%r10d
   36b0e:	mov    %r10d,0x90(%r13)
   36b15:	mov    -0x90(%rbp),%rax
   36b1c:	add    $0x1,%eax
   36b1f:	mov    -0x30(%rbp),%rsi
   36b23:	mov    -0x98(%rbp),%rcx
   36b2a:	cmp    %ecx,%eax
   36b2c:	jl     36b72 <quantize_fs_dither+0x1c2>
   36b2e:	mov    -0x8(%rbp),%rbx
   36b32:	mov    -0x10(%rbp),%r12
   36b36:	mov    -0x18(%rbp),%r13
   36b3a:	mov    -0x20(%rbp),%r14
   36b3e:	mov    -0x28(%rbp),%r15
   36b42:	leaveq 
   36b43:	retq   
   36b44:	mov    (%r12,%rdx,8),%r12
   36b48:	mov    (%rbx,%rdx,8),%rdx
   36b4c:	movslq %ecx,%rbx
   36b4f:	mov    %rcx,-0xa0(%rbp)
   36b56:	movslq 0x90(%r13),%rcx
   36b5d:	test   %ecx,%ecx
   36b5f:	jne    36bc0 <quantize_fs_dither+0x210>
   36b61:	mov    0x70(%r13,%rbx,8),%r9
   36b66:	lea    (%r12,%rbx,1),%rcx
   36b6a:	mov    %r11,%rax
   36b6d:	mov    %r14,%r8
   36b70:	jmp    36bd2 <quantize_fs_dither+0x222>
   36b72:	movslq %eax,%r15
   36b75:	mov    %rax,-0x90(%rbp)
   36b7c:	mov    %r15,-0x88(%rbp)
   36b83:	mov    (%rbx,%r15,8),%rdi
   36b87:	callq  44d0 <jzero_far@plt>
   36b8c:	mov    %r15,%rdx
   36b8f:	mov    $0xffffffffffffffff,%r15
   36b96:	mov    -0x40(%rbp),%r8
   36b9a:	mov    $0x1,%r10d
   36ba0:	xor    %ecx,%ecx
   36ba2:	mov    -0x78(%rbp),%rdi
   36ba6:	mov    -0x38(%rbp),%rsi
   36baa:	mov    -0x60(%rbp),%r9
   36bae:	mov    $0x2,%r11d
   36bb4:	mov    $0xfffffffffffffffe,%rax
   36bbb:	jmpq   36afb <quantize_fs_dither+0x14b>
   36bc0:	add    0x70(%r13,%rbx,8),%r9
   36bc5:	lea    (%r12,%rsi,1),%rcx
   36bc9:	add    %rbx,%rcx
   36bcc:	add    %rdi,%rdx
   36bcf:	mov    %r15,%r10
   36bd2:	mov    %rax,-0x48(%rbp)
   36bd6:	mov    0x30(%r13),%rsi
   36bda:	mov    (%rsi,%rbx,8),%rdi
   36bde:	mov    %rdi,-0x58(%rbp)
   36be2:	mov    0x20(%r13),%rsi
   36be6:	mov    (%rsi,%rbx,8),%r12
   36bea:	movslq %r8d,%r15
   36bed:	mov    -0x50(%rbp),%r14
   36bf1:	xor    %r11d,%r11d
   36bf4:	mov    -0x30(%rbp),%rsi
   36bf8:	mov    %r11,%rbx
   36bfb:	mov    %rbx,%r8
   36bfe:	jmpq   36aa5 <quantize_fs_dither+0xf5>
   36c03:	data16 nopw %cs:0x0(%rax,%rax,1)
   36c0e:	xchg   %ax,%ax

0000000000036c10 <alloc_fs_workspace>:
   36c10:	push   %rbp
   36c11:	mov    %rsp,%rbp
   36c14:	sub    $0x30,%rsp
   36c18:	mov    %rbx,-0x8(%rbp)
   36c1c:	mov    %r12,-0x10(%rbp)
   36c20:	mov    %r13,-0x18(%rbp)
   36c24:	mov    %r14,-0x20(%rbp)
   36c28:	mov    %r15,-0x28(%rbp)
   36c2c:	mov    0x270(%rdi),%r15
   36c33:	mov    $0x1,%r13d
   36c39:	mov    0x88(%rdi),%eax
   36c3f:	add    $0x2,%eax
   36c42:	mov    %eax,%eax
   36c44:	lea    (%rax,%rax,1),%r14
   36c48:	mov    %rdi,%r12
   36c4b:	xor    %ebx,%ebx
   36c4d:	jmp    36c6e <alloc_fs_workspace+0x5e>
   36c4f:	mov    0x8(%r12),%rax
   36c54:	mov    0x8(%rax),%rax
   36c58:	mov    %r12,%rdi
   36c5b:	mov    %r13,%rsi
   36c5e:	mov    %r14,%rdx
   36c61:	callq  *%rax
   36c63:	movslq %ebx,%rcx
   36c66:	mov    %rax,0x70(%r15,%rcx,8)
   36c6b:	add    $0x1,%ebx
   36c6e:	movslq 0x90(%r12),%rax
   36c76:	cmp    %ebx,%eax
   36c78:	jg     36c4f <alloc_fs_workspace+0x3f>
   36c7a:	mov    -0x28(%rbp),%r15
   36c7e:	mov    -0x20(%rbp),%r14
   36c82:	mov    -0x18(%rbp),%r13
   36c86:	mov    -0x10(%rbp),%r12
   36c8a:	mov    -0x8(%rbp),%rbx
   36c8e:	leaveq 
   36c8f:	retq   

0000000000036c90 <start_pass_1_quant>:
   36c90:	push   %rbp
   36c91:	mov    %rsp,%rbp
   36c94:	sub    $0x20,%rsp
   36c98:	mov    0x270(%rdi),%rax
   36c9f:	mov    0x20(%rax),%rcx
   36ca3:	mov    %rcx,0xa0(%rdi)
   36caa:	movslq 0x28(%rax),%rcx
   36cae:	mov    %ecx,0x9c(%rdi)
   36cb4:	mov    0x70(%rdi),%ecx
   36cb7:	test   %ecx,%ecx
   36cb9:	je     36cf7 <start_pass_1_quant+0x67>
   36cbb:	cmp    $0x1,%ecx
   36cbe:	je     36d13 <start_pass_1_quant+0x83>
   36cc0:	cmp    $0x2,%ecx
   36cc3:	jne    36cff <start_pass_1_quant+0x6f>
   36cc5:	lea    -0x31c(%rip),%rcx        # 369b0 <quantize_fs_dither>
   36ccc:	mov    %rcx,0x8(%rax)
   36cd0:	movl   $0x0,0x90(%rax)
   36cda:	mov    0x70(%rax),%rcx
   36cde:	test   %rcx,%rcx
   36ce1:	je     36d2c <start_pass_1_quant+0x9c>
   36ce3:	mov    %r15,%rcx
   36ce6:	mov    %r14,%rdx
   36ce9:	mov    %r12,%rsi
   36cec:	mov    %rdi,%r12
   36cef:	mov    %r13,%rdi
   36cf2:	mov    %rax,%r13
   36cf5:	jmp    36d59 <start_pass_1_quant+0xc9>
   36cf7:	test   %ecx,%ecx
   36cf9:	je     36d7f <start_pass_1_quant+0xef>
   36cff:	mov    (%rdi),%rax
   36d02:	movl   $0x30,0x28(%rax)
   36d09:	mov    (%rdi),%rax
   36d0c:	mov    (%rax),%rax
   36d0f:	callq  *%rax
   36d11:	leaveq 
   36d12:	retq   
   36d13:	movslq 0x90(%rdi),%rcx
   36d1a:	cmp    $0x3,%ecx
   36d1d:	je     36d9c <start_pass_1_quant+0x10c>
   36d1f:	lea    -0x5b6(%rip),%rcx        # 36770 <quantize_ord_dither>
   36d26:	mov    %rcx,0x8(%rax)
   36d2a:	jmp    36da7 <start_pass_1_quant+0x117>
   36d2c:	mov    %rdi,%rcx
   36d2f:	mov    %r14,-0x18(%rbp)
   36d33:	mov    %r15,-0x20(%rbp)
   36d37:	mov    %r12,%r14
   36d3a:	mov    %rdi,%r12
   36d3d:	mov    %rcx,%rdi
   36d40:	mov    %r13,%r15
   36d43:	mov    %rax,%r13
   36d46:	callq  36c10 <alloc_fs_workspace>
   36d4b:	mov    %r14,%rsi
   36d4e:	mov    %r15,%rdi
   36d51:	mov    -0x20(%rbp),%rcx
   36d55:	mov    -0x18(%rbp),%rdx
   36d59:	mov    0x88(%r12),%eax
   36d61:	add    $0x2,%eax
   36d64:	mov    %eax,%eax
   36d66:	lea    (%rax,%rax,1),%r14
   36d6a:	xor    %r15d,%r15d
   36d6d:	mov    %rdx,-0x18(%rbp)
   36d71:	mov    %rcx,-0x20(%rbp)
   36d75:	mov    %rsi,-0x8(%rbp)
   36d79:	mov    %rdi,-0x10(%rbp)
   36d7d:	jmp    36df6 <start_pass_1_quant+0x166>
   36d7f:	movslq 0x90(%rdi),%rcx
   36d86:	cmp    $0x3,%ecx
   36d89:	je     36e15 <start_pass_1_quant+0x185>
   36d8f:	lea    -0x776(%rip),%rcx        # 36620 <color_quantize>
   36d96:	mov    %rcx,0x8(%rax)
   36d9a:	leaveq 
   36d9b:	retq   
   36d9c:	lea    -0x513(%rip),%rcx        # 36890 <quantize3_ord_dither>
   36da3:	mov    %rcx,0x8(%rax)
   36da7:	movl   $0x0,0x4c(%rax)
   36dae:	movslq 0x38(%rax),%rcx
   36db2:	test   %ecx,%ecx
   36db4:	jne    36dd7 <start_pass_1_quant+0x147>
   36db6:	mov    %rdi,%rcx
   36db9:	mov    %r15,-0x20(%rbp)
   36dbd:	mov    %rdi,-0x10(%rbp)
   36dc1:	mov    %rcx,%rdi
   36dc4:	mov    %rax,%r15
   36dc7:	callq  36310 <create_colorindex>
   36dcc:	mov    %r15,%rax
   36dcf:	mov    -0x10(%rbp),%rdi
   36dd3:	mov    -0x20(%rbp),%r15
   36dd7:	mov    0x50(%rax),%rax
   36ddb:	test   %rax,%rax
   36dde:	je     36e22 <start_pass_1_quant+0x192>
   36de0:	leaveq 
   36de1:	retq   
   36de2:	movslq %r15d,%rax
   36de5:	mov    0x70(%r13,%rax,8),%rdi
   36dea:	mov    %r14,%rsi
   36ded:	callq  44d0 <jzero_far@plt>
   36df2:	add    $0x1,%r15d
   36df6:	movslq 0x90(%r12),%rax
   36dfe:	cmp    %r15d,%eax
   36e01:	jg     36de2 <start_pass_1_quant+0x152>
   36e03:	mov    -0x10(%rbp),%r13
   36e07:	mov    -0x8(%rbp),%r12
   36e0b:	mov    -0x20(%rbp),%r15
   36e0f:	mov    -0x18(%rbp),%r14
   36e13:	leaveq 
   36e14:	retq   
   36e15:	lea    -0x74c(%rip),%rcx        # 366d0 <color_quantize3>
   36e1c:	mov    %rcx,0x8(%rax)
   36e20:	leaveq 
   36e21:	retq   
   36e22:	callq  36580 <create_odither_tables>
   36e27:	leaveq 
   36e28:	retq   
   36e29:	nopl   0x0(%rax)

0000000000036e30 <finish_pass_1_quant>:
   36e30:	push   %rbp
   36e31:	mov    %rsp,%rbp
   36e34:	leaveq 
   36e35:	retq   
   36e36:	nopw   %cs:0x0(%rax,%rax,1)

0000000000036e40 <new_color_map_1_quant>:
   36e40:	push   %rbp
   36e41:	mov    %rsp,%rbp
   36e44:	mov    (%rdi),%rax
   36e47:	movl   $0x2e,0x28(%rax)
   36e4e:	mov    (%rdi),%rax
   36e51:	mov    (%rax),%rax
   36e54:	callq  *%rax
   36e56:	leaveq 
   36e57:	retq   
   36e58:	nopl   0x0(%rax,%rax,1)

0000000000036e60 <jinit_2pass_quantizer>:
   36e60:	push   %rbp
   36e61:	mov    %rsp,%rbp
   36e64:	sub    $0x30,%rsp
   36e68:	mov    %r14,-0x20(%rbp)
   36e6c:	mov    %r15,-0x28(%rbp)
   36e70:	mov    %r13,-0x18(%rbp)
   36e74:	mov    %rbx,-0x8(%rbp)
   36e78:	mov    %r12,-0x10(%rbp)
   36e7c:	mov    $0x1,%r12d
   36e82:	mov    0x8(%rdi),%rax
   36e86:	mov    (%rax),%rax
   36e89:	mov    $0x58,%edx
   36e8e:	mov    %rdi,%rbx
   36e91:	mov    %r12,%rsi
   36e94:	callq  *%rax
   36e96:	mov    %rax,0x270(%rbx)
   36e9d:	lea    0x1abc(%rip),%rcx        # 38960 <start_pass_2_quant>
   36ea4:	mov    %rcx,(%rax)
   36ea7:	lea    0x1d02(%rip),%rcx        # 38bb0 <new_color_map_2_quant>
   36eae:	mov    %rcx,0x18(%rax)
   36eb2:	movq   $0x0,0x40(%rax)
   36eba:	movq   $0x0,0x50(%rax)
   36ec2:	movslq 0x90(%rbx),%rcx
   36ec9:	cmp    $0x3,%ecx
   36ecc:	jne    36ed3 <jinit_2pass_quantizer+0x73>
   36ece:	mov    %rax,%r13
   36ed1:	jmp    36eeb <jinit_2pass_quantizer+0x8b>
   36ed3:	mov    (%rbx),%rcx
   36ed6:	movl   $0x2f,0x28(%rcx)
   36edd:	mov    (%rbx),%rcx
   36ee0:	mov    (%rcx),%rcx
   36ee3:	mov    %rax,%r13
   36ee6:	mov    %rbx,%rdi
   36ee9:	callq  *%rcx
   36eeb:	mov    0x8(%rbx),%rax
   36eef:	mov    (%rax),%rax
   36ef2:	mov    $0x100,%edx
   36ef7:	mov    %rbx,%rdi
   36efa:	mov    %r12,%rsi
   36efd:	callq  *%rax
   36eff:	mov    %rax,0x30(%r13)
   36f03:	mov    $0x1000,%edx
   36f08:	xor    %r14d,%r14d
   36f0b:	jmp    36f31 <jinit_2pass_quantizer+0xd1>
   36f0d:	mov    0x8(%rbx),%rax
   36f11:	mov    0x8(%rax),%rax
   36f15:	mov    0x30(%r13),%r15
   36f19:	mov    %rbx,%rdi
   36f1c:	mov    %r12,%rsi
   36f1f:	callq  *%rax
   36f21:	movslq %r14d,%rcx
   36f24:	mov    %rax,(%r15,%rcx,8)
   36f28:	add    $0x1,%r14d
   36f2c:	mov    $0x1000,%edx
   36f31:	cmp    $0x1f,%r14d
   36f35:	jle    36f0d <jinit_2pass_quantizer+0xad>
   36f37:	movl   $0x1,0x38(%r13)
   36f3f:	movslq 0x84(%rbx),%rax
   36f46:	test   %eax,%eax
   36f48:	jne    36f54 <jinit_2pass_quantizer+0xf4>
   36f4a:	movq   $0x0,0x20(%r13)
   36f52:	jmp    36fc5 <jinit_2pass_quantizer+0x165>
   36f54:	movslq 0x78(%rbx),%r14
   36f58:	cmp    $0x7,%r14d
   36f5c:	jg     36f7d <jinit_2pass_quantizer+0x11d>
   36f5e:	mov    (%rbx),%rax
   36f61:	movl   $0x38,0x28(%rax)
   36f68:	mov    (%rbx),%rax
   36f6b:	movl   $0x8,0x2c(%rax)
   36f72:	mov    (%rbx),%rax
   36f75:	mov    (%rax),%rax
   36f78:	mov    %rbx,%rdi
   36f7b:	callq  *%rax
   36f7d:	cmp    $0x100,%r14d
   36f84:	jle    36fa5 <jinit_2pass_quantizer+0x145>
   36f86:	mov    (%rbx),%rax
   36f89:	movl   $0x39,0x28(%rax)
   36f90:	mov    (%rbx),%rax
   36f93:	movl   $0x100,0x2c(%rax)
   36f9a:	mov    (%rbx),%rax
   36f9d:	mov    (%rax),%rax
   36fa0:	mov    %rbx,%rdi
   36fa3:	callq  *%rax
   36fa5:	mov    0x8(%rbx),%rax
   36fa9:	mov    0x10(%rax),%rax
   36fad:	mov    $0x3,%ecx
   36fb2:	mov    %rbx,%rdi
   36fb5:	mov    %r12,%rsi
   36fb8:	mov    %r14,%rdx
   36fbb:	callq  *%rax
   36fbd:	mov    %rax,0x20(%r13)
   36fc1:	mov    %r14d,0x28(%r13)
   36fc5:	mov    0x70(%rbx),%eax
   36fc8:	test   %eax,%eax
   36fca:	je     36fd3 <jinit_2pass_quantizer+0x173>
   36fcc:	movl   $0x2,0x70(%rbx)
   36fd3:	mov    0x70(%rbx),%eax
   36fd6:	cmp    $0x2,%eax
   36fd9:	je     36ff1 <jinit_2pass_quantizer+0x191>
   36fdb:	mov    -0x10(%rbp),%r12
   36fdf:	mov    -0x8(%rbp),%rbx
   36fe3:	mov    -0x18(%rbp),%r13
   36fe7:	mov    -0x28(%rbp),%r15
   36feb:	mov    -0x20(%rbp),%r14
   36fef:	leaveq 
   36ff0:	retq   
   36ff1:	mov    0x8(%rbx),%rax
   36ff5:	mov    0x8(%rax),%rax
   36ff9:	mov    0x88(%rbx),%ecx
   36fff:	add    $0x2,%ecx
   37002:	mov    %ecx,%ecx
   37004:	lea    (%rcx,%rcx,2),%rcx
   37008:	lea    (%rcx,%rcx,1),%rdx
   3700c:	mov    %r12,%rsi
   3700f:	mov    %rbx,%rdi
   37012:	callq  *%rax
   37014:	mov    %rax,0x40(%r13)
   37018:	mov    %rbx,%rdi
   3701b:	callq  38850 <init_error_limit>
   37020:	mov    -0x10(%rbp),%r12
   37024:	mov    -0x8(%rbp),%rbx
   37028:	mov    -0x18(%rbp),%r13
   3702c:	mov    -0x28(%rbp),%r15
   37030:	mov    -0x20(%rbp),%r14
   37034:	leaveq 
   37035:	retq   
   37036:	nopw   %cs:0x0(%rax,%rax,1)

0000000000037040 <prescan_quantize>:
   37040:	push   %rbp
   37041:	mov    %rsp,%rbp
   37044:	sub    $0x10,%rsp
   37048:	mov    %r15,-0x8(%rbp)
   3704c:	mov    0x270(%rdi),%rax
   37053:	mov    0x30(%rax),%r15
   37057:	mov    0x88(%rdi),%r10d
   3705e:	xor    %r9d,%r9d
   37061:	jmp    370b1 <prescan_quantize+0x71>
   37063:	movzbl 0x1(%rdx),%eax
   37067:	shr    $0x2,%eax
   3706a:	movslq %eax,%rax
   3706d:	shl    $0x6,%rax
   37071:	movzbl (%rdx),%edi
   37074:	shr    $0x3,%edi
   37077:	movslq %edi,%rdi
   3707a:	add    (%r15,%rdi,8),%rax
   3707e:	movzbl 0x2(%rdx),%edi
   37082:	shr    $0x3,%edi
   37085:	movslq %edi,%rdi
   37088:	lea    (%rax,%rdi,2),%rdi
   3708c:	movzwl (%rdi),%r11d
   37090:	lea    0x1(%r11),%eax
   37094:	mov    %ax,(%rdi)
   37097:	test   %ax,%ax
   3709a:	jne    370a0 <prescan_quantize+0x60>
   3709c:	mov    %r11w,(%rdi)
   370a0:	add    $0x3,%rdx
   370a4:	add    $0xffffffff,%r8d
   370a8:	test   %r8d,%r8d
   370ab:	jne    37063 <prescan_quantize+0x23>
   370ad:	add    $0x1,%r9d
   370b1:	cmp    %ecx,%r9d
   370b4:	jl     370bc <prescan_quantize+0x7c>
   370b6:	mov    -0x8(%rbp),%r15
   370ba:	leaveq 
   370bb:	retq   
   370bc:	movslq %r9d,%rax
   370bf:	mov    (%rsi,%rax,8),%rdx
   370c3:	mov    %r10,%r8
   370c6:	jmp    370a8 <prescan_quantize+0x68>
   370c8:	nopl   0x0(%rax,%rax,1)

00000000000370d0 <find_biggest_color_pop>:
   370d0:	push   %rbp
   370d1:	mov    %rsp,%rbp
   370d4:	xor    %ecx,%ecx
   370d6:	mov    %rcx,%rax
   370d9:	mov    %rax,%rdx
   370dc:	jmp    370fd <find_biggest_color_pop+0x2d>
   370de:	mov    0x20(%rdi),%r8
   370e2:	cmp    %r8,%rcx
   370e5:	jge    370f6 <find_biggest_color_pop+0x26>
   370e7:	mov    0x18(%rdi),%r9
   370eb:	test   %r9,%r9
   370ee:	jle    370f6 <find_biggest_color_pop+0x26>
   370f0:	mov    %r8,%rcx
   370f3:	mov    %rdi,%rax
   370f6:	add    $0x1,%edx
   370f9:	add    $0x28,%rdi
   370fd:	cmp    %esi,%edx
   370ff:	jl     370de <find_biggest_color_pop+0xe>
   37101:	leaveq 
   37102:	retq   
   37103:	data16 nopw %cs:0x0(%rax,%rax,1)
   3710e:	xchg   %ax,%ax

0000000000037110 <find_biggest_volume>:
   37110:	push   %rbp
   37111:	mov    %rsp,%rbp
   37114:	xor    %ecx,%ecx
   37116:	mov    %rcx,%rax
   37119:	mov    %rax,%rdx
   3711c:	jmp    37134 <find_biggest_volume+0x24>
   3711e:	mov    0x18(%rdi),%r8
   37122:	cmp    %rcx,%r8
   37125:	jle    3712d <find_biggest_volume+0x1d>
   37127:	mov    %r8,%rcx
   3712a:	mov    %rdi,%rax
   3712d:	add    $0x1,%edx
   37130:	add    $0x28,%rdi
   37134:	cmp    %esi,%edx
   37136:	jl     3711e <find_biggest_volume+0xe>
   37138:	leaveq 
   37139:	retq   
   3713a:	nopw   0x0(%rax,%rax,1)

0000000000037140 <update_box>:
   37140:	push   %rbp
   37141:	mov    %rsp,%rbp
   37144:	sub    $0x50,%rsp
   37148:	mov    %r15,-0x30(%rbp)
   3714c:	mov    %r14,-0x28(%rbp)
   37150:	mov    %r13,-0x20(%rbp)
   37154:	mov    %r12,-0x18(%rbp)
   37158:	mov    %rsi,-0x8(%rbp)
   3715c:	mov    %rbx,-0x10(%rbp)
   37160:	mov    %rdi,-0x38(%rbp)
   37164:	mov    0x270(%rdi),%rax
   3716b:	mov    0x30(%rax),%r15
   3716f:	movslq 0x8(%rsi),%r11
   37173:	movslq 0xc(%rsi),%r12
   37177:	movslq 0x10(%rsi),%r9
   3717b:	movslq 0x14(%rsi),%r8
   3717f:	movslq 0x4(%rsi),%r10
   37183:	movslq (%rsi),%rbx
   37186:	cmp    %ebx,%r10d
   37189:	jle    371cf <update_box+0x8f>
   3718b:	lea    (%r9,%r9,1),%rdi
   3718f:	mov    %rbx,-0x48(%rbp)
   37193:	jmp    371be <update_box+0x7e>
   37195:	movzwl (%rax),%r13d
   37199:	test   %r13w,%r13w
   3719d:	jne    37283 <update_box+0x143>
   371a3:	add    $0x2,%rax
   371a7:	add    $0x1,%ecx
   371aa:	cmp    %r8d,%ecx
   371ad:	jle    37195 <update_box+0x55>
   371af:	add    $0x1,%edx
   371b2:	cmp    %r12d,%edx
   371b5:	jle    3728e <update_box+0x14e>
   371bb:	add    $0x1,%ebx
   371be:	cmp    %ebx,%r10d
   371c1:	jge    372a7 <update_box+0x167>
   371c7:	mov    -0x48(%rbp),%rbx
   371cb:	mov    -0x38(%rbp),%rdi
   371cf:	cmp    %ebx,%r10d
   371d2:	jg     372b2 <update_box+0x172>
   371d8:	cmp    %r12d,%r11d
   371db:	jl     372bf <update_box+0x17f>
   371e1:	cmp    %r11d,%r12d
   371e4:	jg     372c8 <update_box+0x188>
   371ea:	movslq %r11d,%r13
   371ed:	cmp    %r8d,%r9d
   371f0:	jl     372d1 <update_box+0x191>
   371f6:	cmp    %r8d,%r9d
   371f9:	jl     372e5 <update_box+0x1a5>
   371ff:	mov    0x40(%rdi),%edx
   37202:	lea    0x24347(%rip),%rax        # 5b550 <rgb_green>
   37209:	movslq (%rax,%rdx,4),%rcx
   3720d:	mov    %r12,%rax
   37210:	sub    %r11d,%eax
   37213:	lea    0x243be(%rip),%r13        # 5b5d8 <c_scales>
   3721a:	imul   0x0(%r13,%rcx,4),%eax
   37220:	shl    $0x2,%eax
   37223:	movslq %eax,%rcx
   37226:	imul   %rcx,%rcx
   3722a:	lea    0x242db(%rip),%rax        # 5b50c <rgb_red>
   37231:	movslq (%rax,%rdx,4),%rdi
   37235:	mov    %r10,%rax
   37238:	sub    %ebx,%eax
   3723a:	imul   0x0(%r13,%rdi,4),%eax
   37240:	shl    $0x3,%eax
   37243:	movslq %eax,%rax
   37246:	imul   %rax,%rax
   3724a:	add    %rax,%rcx
   3724d:	lea    0x24340(%rip),%rax        # 5b594 <rgb_blue>
   37254:	movslq (%rax,%rdx,4),%rdx
   37258:	mov    %r8,%rax
   3725b:	sub    %r9d,%eax
   3725e:	imul   0x0(%r13,%rdx,4),%eax
   37264:	shl    $0x3,%eax
   37267:	movslq %eax,%rax
   3726a:	imul   %rax,%rax
   3726e:	add    %rcx,%rax
   37271:	mov    %rax,0x18(%rsi)
   37275:	xor    %eax,%eax
   37277:	movslq %r9d,%rcx
   3727a:	lea    (%rcx,%rcx,1),%r13
   3727e:	jmpq   37319 <update_box+0x1d9>
   37283:	mov    %ebx,(%rsi)
   37285:	mov    -0x38(%rbp),%rdi
   37289:	jmpq   371cf <update_box+0x8f>
   3728e:	mov    %rdi,%rcx
   37291:	add    (%r15,%r14,8),%rcx
   37295:	movslq %edx,%rax
   37298:	shl    $0x6,%rax
   3729c:	add    %rcx,%rax
   3729f:	mov    %r9,%rcx
   372a2:	jmpq   371aa <update_box+0x6a>
   372a7:	movslq %ebx,%r14
   372aa:	mov    %r11,%rdx
   372ad:	jmpq   371b2 <update_box+0x72>
   372b2:	lea    (%r9,%r9,1),%rdi
   372b6:	mov    %r10,-0x48(%rbp)
   372ba:	jmpq   3736a <update_box+0x22a>
   372bf:	mov    %r11,-0x48(%rbp)
   372c3:	jmpq   373aa <update_box+0x26a>
   372c8:	mov    %r12,-0x48(%rbp)
   372cc:	jmpq   373ea <update_box+0x2aa>
   372d1:	mov    %r13,%r14
   372d4:	shl    $0x6,%r14
   372d8:	mov    %r13,-0x40(%rbp)
   372dc:	mov    %r9,-0x48(%rbp)
   372e0:	jmpq   3742a <update_box+0x2ea>
   372e5:	shl    $0x6,%r13
   372e9:	mov    %r8,-0x48(%rbp)
   372ed:	jmpq   3746e <update_box+0x32e>
   372f2:	movzwl (%rcx),%edi
   372f5:	test   %di,%di
   372f8:	je     372fe <update_box+0x1be>
   372fa:	add    $0x1,%rax
   372fe:	add    $0x2,%rcx
   37302:	add    $0x1,%edx
   37305:	cmp    %r8d,%edx
   37308:	jle    372f2 <update_box+0x1b2>
   3730a:	add    $0x1,%esi
   3730d:	cmp    %esi,%r12d
   37310:	jge    37484 <update_box+0x344>
   37316:	add    $0x1,%ebx
   37319:	cmp    %ebx,%r10d
   3731c:	jge    3749d <update_box+0x35d>
   37322:	mov    -0x8(%rbp),%rcx
   37326:	mov    %rax,0x20(%rcx)
   3732a:	mov    -0x10(%rbp),%rbx
   3732e:	mov    -0x18(%rbp),%r12
   37332:	mov    -0x20(%rbp),%r13
   37336:	mov    -0x28(%rbp),%r14
   3733a:	mov    -0x30(%rbp),%r15
   3733e:	leaveq 
   3733f:	retq   
   37340:	movzwl (%rax),%r13d
   37344:	test   %r13w,%r13w
   37348:	jne    374a8 <update_box+0x368>
   3734e:	add    $0x2,%rax
   37352:	add    $0x1,%ecx
   37355:	cmp    %ecx,%r8d
   37358:	jge    37340 <update_box+0x200>
   3735a:	add    $0x1,%edx
   3735d:	cmp    %edx,%r12d
   37360:	jge    374b5 <update_box+0x375>
   37366:	add    $0xffffffff,%r10d
   3736a:	cmp    %r10d,%ebx
   3736d:	jle    374ce <update_box+0x38e>
   37373:	mov    -0x48(%rbp),%r10
   37377:	mov    -0x38(%rbp),%rdi
   3737b:	jmpq   371d8 <update_box+0x98>
   37380:	movzwl (%rax),%r13d
   37384:	test   %r13w,%r13w
   37388:	jne    374d9 <update_box+0x399>
   3738e:	add    $0x2,%rax
   37392:	add    $0x1,%ecx
   37395:	cmp    %ecx,%r8d
   37398:	jge    37380 <update_box+0x240>
   3739a:	add    $0x1,%edx
   3739d:	cmp    %edx,%r10d
   373a0:	jge    374e6 <update_box+0x3a6>
   373a6:	add    $0x1,%r11d
   373aa:	cmp    %r11d,%r12d
   373ad:	jge    374fc <update_box+0x3bc>
   373b3:	mov    -0x48(%rbp),%r11
   373b7:	mov    -0x38(%rbp),%rdi
   373bb:	jmpq   371e1 <update_box+0xa1>
   373c0:	movzwl (%rax),%r13d
   373c4:	test   %r13w,%r13w
   373c8:	jne    3750b <update_box+0x3cb>
   373ce:	add    $0x2,%rax
   373d2:	add    $0x1,%ecx
   373d5:	cmp    %ecx,%r8d
   373d8:	jge    373c0 <update_box+0x280>
   373da:	add    $0x1,%edx
   373dd:	cmp    %edx,%r10d
   373e0:	jge    37518 <update_box+0x3d8>
   373e6:	add    $0xffffffff,%r12d
   373ea:	cmp    %r12d,%r11d
   373ed:	jle    3752e <update_box+0x3ee>
   373f3:	mov    -0x48(%rbp),%r12
   373f7:	mov    -0x38(%rbp),%rdi
   373fb:	jmpq   371ea <update_box+0xaa>
   37400:	movzwl (%rax),%r13d
   37404:	test   %r13w,%r13w
   37408:	jne    3753d <update_box+0x3fd>
   3740e:	add    $0x40,%rax
   37412:	add    $0x1,%ecx
   37415:	cmp    %ecx,%r12d
   37418:	jge    37400 <update_box+0x2c0>
   3741a:	add    $0x1,%edx
   3741d:	cmp    %edx,%r10d
   37420:	jge    3754e <update_box+0x40e>
   37426:	add    $0x1,%r9d
   3742a:	cmp    %r9d,%r8d
   3742d:	jge    37564 <update_box+0x424>
   37433:	mov    -0x48(%rbp),%r9
   37437:	mov    -0x40(%rbp),%r13
   3743b:	mov    -0x38(%rbp),%rdi
   3743f:	jmpq   371f6 <update_box+0xb6>
   37444:	movzwl (%rax),%r14d
   37448:	test   %r14w,%r14w
   3744c:	jne    3756f <update_box+0x42f>
   37452:	add    $0x40,%rax
   37456:	add    $0x1,%ecx
   37459:	cmp    %ecx,%r12d
   3745c:	jge    37444 <update_box+0x304>
   3745e:	add    $0x1,%edx
   37461:	cmp    %edx,%r10d
   37464:	jge    3757c <update_box+0x43c>
   3746a:	add    $0xffffffff,%r8d
   3746e:	cmp    %r8d,%r9d
   37471:	jle    37591 <update_box+0x451>
   37477:	mov    -0x48(%rbp),%r8
   3747b:	mov    -0x38(%rbp),%rdi
   3747f:	jmpq   371ff <update_box+0xbf>
   37484:	mov    %r13,%rdx
   37487:	add    (%r15,%r14,8),%rdx
   3748b:	movslq %esi,%rcx
   3748e:	shl    $0x6,%rcx
   37492:	add    %rdx,%rcx
   37495:	mov    %r9,%rdx
   37498:	jmpq   37305 <update_box+0x1c5>
   3749d:	movslq %ebx,%r14
   374a0:	mov    %r11,%rsi
   374a3:	jmpq   3730d <update_box+0x1cd>
   374a8:	mov    %r10d,0x4(%rsi)
   374ac:	mov    -0x38(%rbp),%rdi
   374b0:	jmpq   371d8 <update_box+0x98>
   374b5:	mov    %rdi,%rcx
   374b8:	add    (%r15,%r14,8),%rcx
   374bc:	movslq %edx,%rax
   374bf:	shl    $0x6,%rax
   374c3:	add    %rcx,%rax
   374c6:	mov    %r9,%rcx
   374c9:	jmpq   37355 <update_box+0x215>
   374ce:	movslq %r10d,%r14
   374d1:	mov    %r11,%rdx
   374d4:	jmpq   3735d <update_box+0x21d>
   374d9:	mov    %r11d,0x8(%rsi)
   374dd:	mov    -0x38(%rbp),%rdi
   374e1:	jmpq   371e1 <update_box+0xa1>
   374e6:	movslq %edx,%rax
   374e9:	mov    (%r15,%rax,8),%rax
   374ed:	add    %rdi,%rax
   374f0:	lea    (%rax,%r9,2),%rax
   374f4:	mov    %r9,%rcx
   374f7:	jmpq   37395 <update_box+0x255>
   374fc:	movslq %r11d,%rdi
   374ff:	shl    $0x6,%rdi
   37503:	mov    %rbx,%rdx
   37506:	jmpq   3739d <update_box+0x25d>
   3750b:	mov    %r12d,0xc(%rsi)
   3750f:	mov    -0x38(%rbp),%rdi
   37513:	jmpq   371ea <update_box+0xaa>
   37518:	movslq %edx,%rax
   3751b:	mov    (%r15,%rax,8),%rax
   3751f:	add    %rdi,%rax
   37522:	lea    (%rax,%r9,2),%rax
   37526:	mov    %r9,%rcx
   37529:	jmpq   373d5 <update_box+0x295>
   3752e:	movslq %r12d,%rdi
   37531:	shl    $0x6,%rdi
   37535:	mov    %rbx,%rdx
   37538:	jmpq   373dd <update_box+0x29d>
   3753d:	mov    %r9d,0x10(%rsi)
   37541:	mov    -0x40(%rbp),%r13
   37545:	mov    -0x38(%rbp),%rdi
   37549:	jmpq   371f6 <update_box+0xb6>
   3754e:	movslq %edx,%rax
   37551:	mov    (%r15,%rax,8),%rax
   37555:	add    %r14,%rax
   37558:	lea    (%rax,%rdi,2),%rax
   3755c:	mov    %r11,%rcx
   3755f:	jmpq   37415 <update_box+0x2d5>
   37564:	movslq %r9d,%rdi
   37567:	mov    %rbx,%rdx
   3756a:	jmpq   3741d <update_box+0x2dd>
   3756f:	mov    %r8d,0x14(%rsi)
   37573:	mov    -0x38(%rbp),%rdi
   37577:	jmpq   371ff <update_box+0xbf>
   3757c:	movslq %edx,%rax
   3757f:	mov    (%r15,%rax,8),%rax
   37583:	add    %rdi,%rax
   37586:	add    %r13,%rax
   37589:	mov    %r11,%rcx
   3758c:	jmpq   37459 <update_box+0x319>
   37591:	movslq %r8d,%rax
   37594:	lea    (%rax,%rax,1),%rdi
   37598:	mov    %rbx,%rdx
   3759b:	jmpq   37461 <update_box+0x321>

00000000000375a0 <median_cut>:
   375a0:	push   %rbp
   375a1:	mov    %rsp,%rbp
   375a4:	sub    $0x70,%rsp
   375a8:	mov    %r15,-0x28(%rbp)
   375ac:	mov    %r14,-0x20(%rbp)
   375b0:	mov    %rsi,-0x58(%rbp)
   375b4:	mov    %rcx,-0x60(%rbp)
   375b8:	mov    %rbx,-0x8(%rbp)
   375bc:	mov    %r12,-0x10(%rbp)
   375c0:	mov    %r13,-0x18(%rbp)
   375c4:	lea    0x23fc9(%rip),%r14        # 5b594 <rgb_blue>
   375cb:	mov    $0x2,%eax
   375d0:	mov    %rax,-0x48(%rbp)
   375d4:	xor    %eax,%eax
   375d6:	mov    %rax,-0x40(%rbp)
   375da:	mov    $0x1,%eax
   375df:	mov    %rax,-0x38(%rbp)
   375e3:	mov    %rdi,%rbx
   375e6:	mov    %rdx,%r12
   375e9:	mov    %rsi,%r13
   375ec:	jmp    37637 <median_cut+0x97>
   375ee:	lea    (%r15,%r14,1),%edx
   375f2:	mov    %rdx,%rcx
   375f5:	shr    $0x1f,%ecx
   375f8:	add    %edx,%ecx
   375fa:	sar    %ecx
   375fc:	mov    %ecx,0x4(%rax)
   375ff:	add    $0x1,%ecx
   37602:	mov    -0x30(%rbp),%r12
   37606:	mov    %ecx,(%r12)
   3760a:	mov    %rax,%rsi
   3760d:	mov    %rbx,%rdi
   37610:	callq  37140 <update_box>
   37615:	mov    %r12,%rsi
   37618:	mov    %rbx,%rdi
   3761b:	callq  37140 <update_box>
   37620:	mov    -0x68(%rbp),%rax
   37624:	lea    0x1(%rax),%r12d
   37628:	mov    -0x60(%rbp),%rcx
   3762c:	mov    -0x58(%rbp),%r13
   37630:	lea    0x23f5d(%rip),%r14        # 5b594 <rgb_blue>
   37637:	cmp    %ecx,%r12d
   3763a:	jl     37655 <median_cut+0xb5>
   3763c:	mov    %r12,%rax
   3763f:	mov    -0x18(%rbp),%r13
   37643:	mov    -0x10(%rbp),%r12
   37647:	mov    -0x8(%rbp),%rbx
   3764b:	mov    -0x20(%rbp),%r14
   3764f:	mov    -0x28(%rbp),%r15
   37653:	leaveq 
   37654:	retq   
   37655:	lea    (%r12,%r12,1),%eax
   37659:	cmp    %eax,%ecx
   3765b:	jge    3766a <median_cut+0xca>
   3765d:	mov    %r13,%rdi
   37660:	mov    %r12,%rsi
   37663:	callq  37110 <find_biggest_volume>
   37668:	jmp    37675 <median_cut+0xd5>
   3766a:	mov    %r13,%rdi
   3766d:	mov    %r12,%rsi
   37670:	callq  370d0 <find_biggest_color_pop>
   37675:	test   %rax,%rax
   37678:	je     3773e <median_cut+0x19e>
   3767e:	movslq %r12d,%rcx
   37681:	lea    (%rcx,%rcx,4),%rcx
   37685:	lea    0x0(%r13,%rcx,8),%rdx
   3768a:	mov    %rdx,-0x30(%rbp)
   3768e:	movslq 0x4(%rax),%rcx
   37692:	mov    %ecx,0x4(%rdx)
   37695:	movslq 0xc(%rax),%rcx
   37699:	mov    %ecx,0xc(%rdx)
   3769c:	movslq 0x14(%rax),%rcx
   376a0:	mov    %ecx,0x14(%rdx)
   376a3:	movslq (%rax),%rcx
   376a6:	mov    %ecx,(%rdx)
   376a8:	movslq 0x8(%rax),%rcx
   376ac:	mov    %ecx,0x8(%rdx)
   376af:	movslq 0x10(%rax),%rcx
   376b3:	mov    %ecx,0x10(%rdx)
   376b6:	mov    0x40(%rbx),%r9d
   376ba:	movslq (%r14,%r9,4),%rcx
   376be:	movslq 0x10(%rax),%r8
   376c2:	movslq 0x14(%rax),%rdi
   376c6:	mov    %rdi,%rdx
   376c9:	sub    %r8d,%edx
   376cc:	lea    0x23f05(%rip),%rsi        # 5b5d8 <c_scales>
   376d3:	imul   (%rsi,%rcx,4),%edx
   376d7:	shl    $0x3,%edx
   376da:	lea    0x23e2b(%rip),%rcx        # 5b50c <rgb_red>
   376e1:	movslq (%rcx,%r9,4),%r13
   376e5:	movslq (%rax),%r15
   376e8:	movslq 0x4(%rax),%r14
   376ec:	mov    %r14,%rsi
   376ef:	sub    %r15d,%esi
   376f2:	lea    0x23edf(%rip),%rcx        # 5b5d8 <c_scales>
   376f9:	imul   (%rcx,%r13,4),%esi
   376fe:	shl    $0x3,%esi
   37701:	lea    0x23e48(%rip),%rcx        # 5b550 <rgb_green>
   37708:	movslq (%rcx,%r9,4),%r11
   3770c:	movslq 0x8(%rax),%r10
   37710:	movslq 0xc(%rax),%r9
   37714:	mov    %r12,-0x68(%rbp)
   37718:	mov    %r9,%rcx
   3771b:	sub    %r10d,%ecx
   3771e:	lea    0x23eb3(%rip),%r12        # 5b5d8 <c_scales>
   37725:	imul   (%r12,%r11,4),%ecx
   3772a:	shl    $0x2,%ecx
   3772d:	test   %r13d,%r13d
   37730:	je     37757 <median_cut+0x1b7>
   37732:	cmp    %edx,%ecx
   37734:	jl     37763 <median_cut+0x1c3>
   37736:	pushq  -0x38(%rbp)
   37739:	popq   -0x50(%rbp)
   3773c:	jmp    3776c <median_cut+0x1cc>
   3773e:	mov    %r12,%rax
   37741:	mov    -0x18(%rbp),%r13
   37745:	mov    -0x10(%rbp),%r12
   37749:	mov    -0x8(%rbp),%rbx
   3774d:	mov    -0x20(%rbp),%r14
   37751:	mov    -0x28(%rbp),%r15
   37755:	leaveq 
   37756:	retq   
   37757:	cmp    %esi,%ecx
   37759:	jl     37778 <median_cut+0x1d8>
   3775b:	pushq  -0x38(%rbp)
   3775e:	popq   -0x50(%rbp)
   37761:	jmp    37781 <median_cut+0x1e1>
   37763:	mov    %rdx,%rcx
   37766:	pushq  -0x48(%rbp)
   37769:	popq   -0x50(%rbp)
   3776c:	cmp    %esi,%ecx
   3776e:	jge    3778b <median_cut+0x1eb>
   37770:	pushq  -0x40(%rbp)
   37773:	popq   -0x50(%rbp)
   37776:	jmp    3778b <median_cut+0x1eb>
   37778:	mov    %rsi,%rcx
   3777b:	pushq  -0x40(%rbp)
   3777e:	popq   -0x50(%rbp)
   37781:	cmp    %edx,%ecx
   37783:	jge    3778b <median_cut+0x1eb>
   37785:	pushq  -0x48(%rbp)
   37788:	popq   -0x50(%rbp)
   3778b:	mov    -0x50(%rbp),%rcx
   3778f:	test   %ecx,%ecx
   37791:	je     377a6 <median_cut+0x206>
   37793:	cmp    $0x1,%ecx
   37796:	je     377b7 <median_cut+0x217>
   37798:	cmp    $0x2,%ecx
   3779b:	je     377d9 <median_cut+0x239>
   3779d:	mov    -0x30(%rbp),%r12
   377a1:	jmpq   3760a <median_cut+0x6a>
   377a6:	test   %ecx,%ecx
   377a8:	je     375ee <median_cut+0x4e>
   377ae:	mov    -0x30(%rbp),%r12
   377b2:	jmpq   3760a <median_cut+0x6a>
   377b7:	lea    (%r10,%r9,1),%edx
   377bb:	mov    %rdx,%rcx
   377be:	shr    $0x1f,%ecx
   377c1:	add    %edx,%ecx
   377c3:	sar    %ecx
   377c5:	mov    %ecx,0xc(%rax)
   377c8:	add    $0x1,%ecx
   377cb:	mov    -0x30(%rbp),%r12
   377cf:	mov    %ecx,0x8(%r12)
   377d4:	jmpq   3760a <median_cut+0x6a>
   377d9:	lea    (%r8,%rdi,1),%edx
   377dd:	mov    %rdx,%rcx
   377e0:	shr    $0x1f,%ecx
   377e3:	add    %edx,%ecx
   377e5:	sar    %ecx
   377e7:	mov    %ecx,0x14(%rax)
   377ea:	add    $0x1,%ecx
   377ed:	mov    -0x30(%rbp),%r12
   377f1:	mov    %ecx,0x10(%r12)
   377f6:	jmpq   3760a <median_cut+0x6a>
   377fb:	nopl   0x0(%rax,%rax,1)

0000000000037800 <compute_color>:
   37800:	push   %rbp
   37801:	mov    %rsp,%rbp
   37804:	sub    $0x70,%rsp
   37808:	mov    %r15,-0x38(%rbp)
   3780c:	mov    %r14,-0x30(%rbp)
   37810:	mov    %rdx,-0x8(%rbp)
   37814:	mov    %rdi,-0x10(%rbp)
   37818:	mov    %rbx,-0x18(%rbp)
   3781c:	mov    %r12,-0x20(%rbp)
   37820:	mov    %r13,-0x28(%rbp)
   37824:	movslq 0x4(%rsi),%r10
   37828:	mov    %r10,-0x50(%rbp)
   3782c:	mov    0x270(%rdi),%rax
   37833:	mov    0x30(%rax),%r14
   37837:	movslq (%rsi),%r11
   3783a:	movslq 0x8(%rsi),%r8
   3783e:	mov    %r8,-0x58(%rbp)
   37842:	movslq 0xc(%rsi),%r9
   37846:	mov    %r9,-0x68(%rbp)
   3784a:	movslq 0x14(%rsi),%r12
   3784e:	xor    %eax,%eax
   37850:	movslq 0x10(%rsi),%rdx
   37854:	mov    %rdx,-0x70(%rbp)
   37858:	lea    (%rdx,%rdx,1),%rbx
   3785c:	mov    %rbx,-0x40(%rbp)
   37860:	mov    %rax,%rcx
   37863:	mov    %rcx,%rsi
   37866:	mov    %rsi,%rdi
   37869:	jmp    378d4 <compute_color+0xd4>
   3786b:	movzwl (%rbx),%r8d
   3786f:	test   %r8w,%r8w
   37873:	je     3789b <compute_color+0x9b>
   37875:	add    %r8,%rcx
   37878:	lea    0x4(,%rdx,8),%r9d
   37880:	movslq %r9d,%r9
   37883:	imul   %r8,%r9
   37887:	add    %r9,%rsi
   3788a:	mov    %r8,%r9
   3788d:	imul   %r11,%r9
   37891:	add    %r9,%rdi
   37894:	imul   %r10,%r8
   37898:	add    %r8,%rax
   3789b:	add    $0x2,%rbx
   3789f:	add    $0x1,%edx
   378a2:	cmp    %r12d,%edx
   378a5:	jle    3786b <compute_color+0x6b>
   378a7:	mov    -0x60(%rbp),%rdx
   378ab:	lea    0x1(%rdx),%r8d
   378af:	mov    -0x70(%rbp),%rdx
   378b3:	mov    -0x68(%rbp),%r9
   378b7:	mov    -0x40(%rbp),%rbx
   378bb:	cmp    %r9d,%r8d
   378be:	jle    37948 <compute_color+0x148>
   378c4:	mov    -0x48(%rbp),%r8
   378c8:	lea    0x1(%r8),%r11d
   378cc:	mov    -0x58(%rbp),%r8
   378d0:	mov    -0x50(%rbp),%r10
   378d4:	cmp    %r10d,%r11d
   378d7:	jle    3796a <compute_color+0x16a>
   378dd:	mov    %rcx,%r8
   378e0:	sar    %r8
   378e3:	add    %r8,%rax
   378e6:	cqto   
   378e8:	mov    -0x8(%rbp),%rbx
   378ec:	movslq %ebx,%rbx
   378ef:	mov    -0x10(%rbp),%r9
   378f3:	mov    0xa0(%r9),%r10
   378fa:	mov    (%r10),%r10
   378fd:	idiv   %rcx
   37900:	mov    %al,(%rbx,%r10,1)
   37904:	lea    (%r8,%rdi,1),%rax
   37908:	cqto   
   3790a:	mov    0xa0(%r9),%rdi
   37911:	mov    0x8(%rdi),%rdi
   37915:	idiv   %rcx
   37918:	mov    %al,(%rbx,%rdi,1)
   3791b:	lea    (%r8,%rsi,1),%rax
   3791f:	cqto   
   37921:	mov    0xa0(%r9),%rsi
   37928:	mov    0x10(%rsi),%rsi
   3792c:	idiv   %rcx
   3792f:	mov    %al,(%rbx,%rsi,1)
   37932:	mov    -0x28(%rbp),%r13
   37936:	mov    -0x20(%rbp),%r12
   3793a:	mov    -0x18(%rbp),%rbx
   3793e:	mov    -0x30(%rbp),%r14
   37942:	mov    -0x38(%rbp),%r15
   37946:	leaveq 
   37947:	retq   
   37948:	lea    0x2(,%r8,4),%r9d
   37950:	movslq %r9d,%r11
   37953:	add    (%r14,%r13,8),%rbx
   37957:	movslq %r8d,%r9
   3795a:	shl    $0x6,%r9
   3795e:	add    %r9,%rbx
   37961:	mov    %r8,-0x60(%rbp)
   37965:	jmpq   378a2 <compute_color+0xa2>
   3796a:	movslq %r11d,%r13
   3796d:	lea    0x4(,%r11,8),%r10d
   37975:	movslq %r10d,%r10
   37978:	mov    %r11,-0x48(%rbp)
   3797c:	jmpq   378bb <compute_color+0xbb>
   37981:	data16 nopw %cs:0x0(%rax,%rax,1)
   3798c:	nopl   0x0(%rax)

0000000000037990 <select_colors>:
   37990:	push   %rbp
   37991:	mov    %rsp,%rbp
   37994:	sub    $0x30,%rsp
   37998:	mov    %r13,-0x18(%rbp)
   3799c:	mov    %r14,-0x20(%rbp)
   379a0:	mov    %r15,-0x28(%rbp)
   379a4:	mov    %r12,-0x10(%rbp)
   379a8:	mov    %rbx,-0x8(%rbp)
   379ac:	mov    0x8(%rdi),%rax
   379b0:	mov    (%rax),%rax
   379b3:	mov    $0x1,%r12d
   379b9:	movslq %esi,%rcx
   379bc:	lea    (%rcx,%rcx,4),%rdx
   379c0:	shl    $0x3,%rdx
   379c4:	mov    %rsi,%r14
   379c7:	mov    %rdi,%rbx
   379ca:	mov    %r12,%rsi
   379cd:	callq  *%rax
   379cf:	mov    %rax,%r13
   379d2:	movl   $0x0,0x0(%r13)
   379da:	movl   $0x1f,0x4(%r13)
   379e2:	movl   $0x0,0x8(%r13)
   379ea:	movl   $0x3f,0xc(%r13)
   379f2:	movl   $0x0,0x10(%r13)
   379fa:	movl   $0x1f,0x14(%r13)
   37a02:	mov    %rbx,%rdi
   37a05:	mov    %r13,%rsi
   37a08:	callq  37140 <update_box>
   37a0d:	mov    %r14,%rcx
   37a10:	mov    %rbx,%rdi
   37a13:	mov    %r13,%rsi
   37a16:	mov    %r12,%rdx
   37a19:	callq  375a0 <median_cut>
   37a1e:	mov    %rax,%r15
   37a21:	xor    %r14d,%r14d
   37a24:	jmp    37a41 <select_colors+0xb1>
   37a26:	movslq %r14d,%rax
   37a29:	lea    (%rax,%rax,4),%rax
   37a2d:	lea    0x0(%r13,%rax,8),%rsi
   37a32:	mov    %rbx,%rdi
   37a35:	mov    %r14,%rdx
   37a38:	callq  37800 <compute_color>
   37a3d:	add    $0x1,%r14d
   37a41:	cmp    %r15d,%r14d
   37a44:	jl     37a26 <select_colors+0x96>
   37a46:	mov    %r15d,0x9c(%rbx)
   37a4d:	mov    (%rbx),%rax
   37a50:	movl   $0x60,0x28(%rax)
   37a57:	mov    (%rbx),%rax
   37a5a:	mov    %r15d,0x2c(%rax)
   37a5e:	mov    (%rbx),%rax
   37a61:	mov    0x8(%rax),%rax
   37a65:	mov    %r12,%rsi
   37a68:	mov    %rbx,%rdi
   37a6b:	callq  *%rax
   37a6d:	mov    -0x8(%rbp),%rbx
   37a71:	mov    -0x10(%rbp),%r12
   37a75:	mov    -0x28(%rbp),%r15
   37a79:	mov    -0x20(%rbp),%r14
   37a7d:	mov    -0x18(%rbp),%r13
   37a81:	leaveq 
   37a82:	retq   
   37a83:	data16 nopw %cs:0x0(%rax,%rax,1)
   37a8e:	xchg   %ax,%ax

0000000000037a90 <find_nearby_colors>:
   37a90:	push   %rbp
   37a91:	mov    %rsp,%rbp
   37a94:	sub    $0x880,%rsp
   37a9b:	mov    %r15,-0x28(%rbp)
   37a9f:	mov    %r14,-0x20(%rbp)
   37aa3:	mov    %r13,-0x18(%rbp)
   37aa7:	mov    %r12,-0x10(%rbp)
   37aab:	mov    %rbx,-0x8(%rbp)
   37aaf:	mov    %r8,-0x30(%rbp)
   37ab3:	mov    %rdx,-0x40(%rbp)
   37ab7:	mov    %rcx,-0x58(%rbp)
   37abb:	movslq 0x9c(%rdi),%r15
   37ac2:	lea    0x18(%rcx,%rcx,1),%eax
   37ac6:	sar    %eax
   37ac8:	mov    %rax,-0x78(%rbp)
   37acc:	lea    0x18(%rsi,%rsi,1),%eax
   37ad0:	sar    %eax
   37ad2:	mov    %rax,-0x70(%rbp)
   37ad6:	lea    0x1c(%rdx,%rdx,1),%r12d
   37adb:	sar    %r12d
   37ade:	mov    %r12,-0x48(%rbp)
   37ae2:	xor    %r8d,%r8d
   37ae5:	lea    0x23a20(%rip),%r11        # 5b50c <rgb_red>
   37aec:	lea    0x18(%rcx),%ebx
   37aef:	mov    %rbx,-0x60(%rbp)
   37af3:	lea    0x18(%rsi),%r9d
   37af7:	mov    %r9,-0x50(%rbp)
   37afb:	lea    0x1c(%rdx),%ebx
   37afe:	mov    %rbx,-0x68(%rbp)
   37b02:	mov    $0x7fffffff,%r10d
   37b08:	mov    %r10,-0x38(%rbp)
   37b0c:	lea    0x23ac5(%rip),%r10        # 5b5d8 <c_scales>
   37b13:	mov    %r8,%r13
   37b16:	jmp    37b85 <find_nearby_colors+0xf5>
   37b18:	mov    0x40(%rdi),%ebx
   37b1b:	lea    0x23a72(%rip),%r12        # 5b594 <rgb_blue>
   37b22:	movslq (%r12,%rbx,4),%rbx
   37b26:	movslq (%r10,%rbx,4),%r12
   37b2a:	mov    %r8,%rbx
   37b2d:	sub    %ecx,%ebx
   37b2f:	imul   %r12d,%ebx
   37b33:	movslq %ebx,%rbx
   37b36:	imul   %rbx,%rbx
   37b3a:	add    %rbx,%rax
   37b3d:	mov    -0x60(%rbp),%rbx
   37b41:	sub    %ebx,%r8d
   37b44:	imul   %r12d,%r8d
   37b48:	movslq %r8d,%rbx
   37b4b:	imul   %rbx,%rbx
   37b4f:	lea    (%r11,%rbx,1),%r8
   37b53:	mov    -0x68(%rbp),%rbx
   37b57:	mov    %rax,-0x878(%rbp,%r14,8)
   37b5f:	mov    -0x38(%rbp),%rax
   37b63:	cmp    %r8,%rax
   37b66:	jle    37b6b <find_nearby_colors+0xdb>
   37b68:	mov    %r8,%rax
   37b6b:	mov    %rax,-0x38(%rbp)
   37b6f:	add    $0x1,%r13d
   37b73:	mov    -0x48(%rbp),%r12
   37b77:	lea    0x2398e(%rip),%r11        # 5b50c <rgb_red>
   37b7e:	mov    -0x70(%rbp),%rax
   37b82:	xor    %r8d,%r8d
   37b85:	cmp    %r13d,%r15d
   37b88:	jg     37b97 <find_nearby_colors+0x107>
   37b8a:	mov    -0x38(%rbp),%rdx
   37b8e:	mov    -0x30(%rbp),%rsi
   37b92:	mov    %r8,%rax
   37b95:	jmp    37bf8 <find_nearby_colors+0x168>
   37b97:	movslq %r13d,%r14
   37b9a:	mov    0xa0(%rdi),%r8
   37ba1:	mov    (%r8),%r8
   37ba4:	movzbl (%r8,%r14,1),%r8d
   37ba9:	cmp    %esi,%r8d
   37bac:	jl     37c13 <find_nearby_colors+0x183>
   37bae:	cmp    %r9d,%r8d
   37bb1:	jg     37c90 <find_nearby_colors+0x200>
   37bb7:	cmp    %eax,%r8d
   37bba:	jle    37cbc <find_nearby_colors+0x22c>
   37bc0:	mov    0x40(%rdi),%eax
   37bc3:	movslq (%r11,%rax,4),%rax
   37bc7:	sub    %esi,%r8d
   37bca:	imul   (%r10,%rax,4),%r8d
   37bcf:	movslq %r8d,%r11
   37bd2:	imul   %r11,%r11
   37bd6:	xor    %eax,%eax
   37bd8:	jmp    37c3c <find_nearby_colors+0x1ac>
   37bda:	movslq %r8d,%rcx
   37bdd:	mov    -0x878(%rbp,%rcx,8),%rcx
   37be5:	cmp    %rdx,%rcx
   37be8:	jg     37bf4 <find_nearby_colors+0x164>
   37bea:	movslq %eax,%rcx
   37bed:	mov    %r8b,(%rsi,%rcx,1)
   37bf1:	add    $0x1,%eax
   37bf4:	add    $0x1,%r8d
   37bf8:	cmp    %r15d,%r8d
   37bfb:	jl     37bda <find_nearby_colors+0x14a>
   37bfd:	mov    -0x8(%rbp),%rbx
   37c01:	mov    -0x10(%rbp),%r12
   37c05:	mov    -0x18(%rbp),%r13
   37c09:	mov    -0x20(%rbp),%r14
   37c0d:	mov    -0x28(%rbp),%r15
   37c11:	leaveq 
   37c12:	retq   
   37c13:	mov    0x40(%rdi),%eax
   37c16:	movslq (%r11,%rax,4),%rax
   37c1a:	movslq (%r10,%rax,4),%r11
   37c1e:	mov    %r8,%rax
   37c21:	sub    %esi,%eax
   37c23:	imul   %r11d,%eax
   37c27:	movslq %eax,%rax
   37c2a:	imul   %rax,%rax
   37c2e:	sub    %r9d,%r8d
   37c31:	imul   %r11d,%r8d
   37c35:	movslq %r8d,%r11
   37c38:	imul   %r11,%r11
   37c3c:	mov    0xa0(%rdi),%r8
   37c43:	mov    0x8(%r8),%r8
   37c47:	movzbl (%r8,%r14,1),%r8d
   37c4c:	cmp    %edx,%r8d
   37c4f:	jl     37cd9 <find_nearby_colors+0x249>
   37c55:	cmp    %ebx,%r8d
   37c58:	jg     37d75 <find_nearby_colors+0x2e5>
   37c5e:	cmp    %r12d,%r8d
   37c61:	jle    37db6 <find_nearby_colors+0x326>
   37c67:	mov    0x40(%rdi),%ebx
   37c6a:	lea    0x238df(%rip),%r12        # 5b550 <rgb_green>
   37c71:	movslq (%r12,%rbx,4),%rbx
   37c75:	sub    %edx,%r8d
   37c78:	imul   (%r10,%rbx,4),%r8d
   37c7d:	movslq %r8d,%rbx
   37c80:	imul   %rbx,%rbx
   37c84:	add    %rbx,%r11
   37c87:	mov    -0x68(%rbp),%rbx
   37c8b:	jmpq   37d15 <find_nearby_colors+0x285>
   37c90:	mov    0x40(%rdi),%eax
   37c93:	movslq (%r11,%rax,4),%rax
   37c97:	movslq (%r10,%rax,4),%r11
   37c9b:	mov    %r8,%rax
   37c9e:	sub    %r9d,%eax
   37ca1:	imul   %r11d,%eax
   37ca5:	movslq %eax,%rax
   37ca8:	imul   %rax,%rax
   37cac:	sub    %esi,%r8d
   37caf:	imul   %r11d,%r8d
   37cb3:	movslq %r8d,%r11
   37cb6:	imul   %r11,%r11
   37cba:	jmp    37c3c <find_nearby_colors+0x1ac>
   37cbc:	mov    0x40(%rdi),%eax
   37cbf:	movslq (%r11,%rax,4),%rax
   37cc3:	sub    %r9d,%r8d
   37cc6:	imul   (%r10,%rax,4),%r8d
   37ccb:	movslq %r8d,%r11
   37cce:	imul   %r11,%r11
   37cd2:	xor    %eax,%eax
   37cd4:	jmpq   37c3c <find_nearby_colors+0x1ac>
   37cd9:	mov    0x40(%rdi),%r9d
   37cdd:	lea    0x2386c(%rip),%r12        # 5b550 <rgb_green>
   37ce4:	movslq (%r12,%r9,4),%r9
   37ce8:	movslq (%r10,%r9,4),%r12
   37cec:	mov    %r8,%r9
   37cef:	sub    %edx,%r9d
   37cf2:	imul   %r12d,%r9d
   37cf6:	movslq %r9d,%r9
   37cf9:	imul   %r9,%r9
   37cfd:	add    %r9,%rax
   37d00:	sub    %ebx,%r8d
   37d03:	imul   %r12d,%r8d
   37d07:	movslq %r8d,%r8
   37d0a:	imul   %r8,%r8
   37d0e:	add    %r8,%r11
   37d11:	mov    -0x50(%rbp),%r9
   37d15:	mov    0xa0(%rdi),%r8
   37d1c:	mov    0x10(%r8),%r8
   37d20:	movzbl (%r8,%r14,1),%r8d
   37d25:	cmp    %ecx,%r8d
   37d28:	jl     37b18 <find_nearby_colors+0x88>
   37d2e:	mov    -0x60(%rbp),%r12
   37d32:	cmp    %r12d,%r8d
   37d35:	jg     37ddf <find_nearby_colors+0x34f>
   37d3b:	mov    -0x78(%rbp),%r10
   37d3f:	cmp    %r10d,%r8d
   37d42:	jle    37e23 <find_nearby_colors+0x393>
   37d48:	mov    0x40(%rdi),%r10d
   37d4c:	lea    0x23841(%rip),%r12        # 5b594 <rgb_blue>
   37d53:	movslq (%r12,%r10,4),%r12
   37d57:	sub    %ecx,%r8d
   37d5a:	lea    0x23877(%rip),%r10        # 5b5d8 <c_scales>
   37d61:	imul   (%r10,%r12,4),%r8d
   37d66:	movslq %r8d,%r8
   37d69:	imul   %r8,%r8
   37d6d:	add    %r11,%r8
   37d70:	jmpq   37b57 <find_nearby_colors+0xc7>
   37d75:	mov    0x40(%rdi),%r9d
   37d79:	lea    0x237d0(%rip),%r12        # 5b550 <rgb_green>
   37d80:	movslq (%r12,%r9,4),%r9
   37d84:	movslq (%r10,%r9,4),%r12
   37d88:	mov    %r8,%r9
   37d8b:	sub    %ebx,%r9d
   37d8e:	imul   %r12d,%r9d
   37d92:	movslq %r9d,%r9
   37d95:	imul   %r9,%r9
   37d99:	add    %r9,%rax
   37d9c:	sub    %edx,%r8d
   37d9f:	imul   %r12d,%r8d
   37da3:	movslq %r8d,%r8
   37da6:	imul   %r8,%r8
   37daa:	add    %r8,%r11
   37dad:	mov    -0x50(%rbp),%r9
   37db1:	jmpq   37d15 <find_nearby_colors+0x285>
   37db6:	mov    0x40(%rdi),%edx
   37db9:	lea    0x23790(%rip),%r12        # 5b550 <rgb_green>
   37dc0:	movslq (%r12,%rdx,4),%rdx
   37dc4:	sub    %ebx,%r8d
   37dc7:	imul   (%r10,%rdx,4),%r8d
   37dcc:	movslq %r8d,%rdx
   37dcf:	imul   %rdx,%rdx
   37dd3:	add    %rdx,%r11
   37dd6:	mov    -0x40(%rbp),%rdx
   37dda:	jmpq   37d15 <find_nearby_colors+0x285>
   37ddf:	mov    0x40(%rdi),%edx
   37de2:	lea    0x237ab(%rip),%rbx        # 5b594 <rgb_blue>
   37de9:	movslq (%rbx,%rdx,4),%rdx
   37ded:	movslq (%r10,%rdx,4),%rbx
   37df1:	mov    %r8,%rdx
   37df4:	sub    %r12d,%edx
   37df7:	imul   %ebx,%edx
   37dfa:	movslq %edx,%rdx
   37dfd:	imul   %rdx,%rdx
   37e01:	add    %rdx,%rax
   37e04:	sub    %ecx,%r8d
   37e07:	imul   %ebx,%r8d
   37e0b:	movslq %r8d,%rdx
   37e0e:	imul   %rdx,%rdx
   37e12:	lea    (%r11,%rdx,1),%r8
   37e16:	mov    -0x40(%rbp),%rdx
   37e1a:	mov    -0x68(%rbp),%rbx
   37e1e:	jmpq   37b57 <find_nearby_colors+0xc7>
   37e23:	mov    0x40(%rdi),%ecx
   37e26:	lea    0x23767(%rip),%r10        # 5b594 <rgb_blue>
   37e2d:	movslq (%r10,%rcx,4),%rcx
   37e31:	sub    %r12d,%r8d
   37e34:	lea    0x2379d(%rip),%r10        # 5b5d8 <c_scales>
   37e3b:	imul   (%r10,%rcx,4),%r8d
   37e40:	movslq %r8d,%rcx
   37e43:	imul   %rcx,%rcx
   37e47:	lea    (%r11,%rcx,1),%r8
   37e4b:	mov    -0x58(%rbp),%rcx
   37e4f:	jmpq   37b57 <find_nearby_colors+0xc7>
   37e54:	data16 nopw %cs:0x0(%rax,%rax,1)
   37e5f:	nop

0000000000037e60 <find_best_colors>:
   37e60:	push   %rbp
   37e61:	mov    %rsp,%rbp
   37e64:	sub    $0x4a0,%rsp
   37e6b:	mov    %r8,-0x98(%rbp)
   37e72:	mov    %r9,-0x80(%rbp)
   37e76:	mov    %rcx,-0x70(%rbp)
   37e7a:	mov    %rdx,-0x60(%rbp)
   37e7e:	mov    %rsi,-0x40(%rbp)
   37e82:	lea    -0x498(%rbp),%r11
   37e89:	mov    $0x7f,%eax
   37e8e:	mov    %r11,%r10
   37e91:	jmp    37ea1 <find_best_colors+0x41>
   37e93:	movq   $0x7fffffff,(%r10)
   37e9a:	add    $0x8,%r10
   37e9e:	add    $0xffffffff,%eax
   37ea1:	test   %eax,%eax
   37ea3:	jns    37e93 <find_best_colors+0x33>
   37ea5:	mov    0x10(%rbp),%r10
   37ea9:	mov    %r10,-0x78(%rbp)
   37ead:	lea    0x236e0(%rip),%rax        # 5b594 <rgb_blue>
   37eb4:	mov    %r15,-0x28(%rbp)
   37eb8:	lea    0x23719(%rip),%r15        # 5b5d8 <c_scales>
   37ebf:	mov    %r14,-0x20(%rbp)
   37ec3:	lea    0x23686(%rip),%r14        # 5b550 <rgb_green>
   37eca:	mov    %r13,-0x18(%rbp)
   37ece:	lea    0x23637(%rip),%r13        # 5b50c <rgb_red>
   37ed5:	mov    %r12,-0x10(%rbp)
   37ed9:	xor    %r12d,%r12d
   37edc:	mov    %rbx,-0x8(%rbp)
   37ee0:	mov    %r8,%rbx
   37ee3:	mov    %r14,%r8
   37ee6:	mov    %r12,%r14
   37ee9:	jmpq   37fd8 <find_best_colors+0x178>
   37eee:	mov    (%r11),%rax
   37ef1:	cmp    %rdx,%rax
   37ef4:	jle    37efc <find_best_colors+0x9c>
   37ef6:	mov    %rdx,(%r11)
   37ef9:	mov    %r14b,(%r10)
   37efc:	add    $0x1,%r10
   37f00:	add    %rbx,%rdx
   37f03:	add    $0x8,%r11
   37f07:	add    $0xffffffff,%ecx
   37f0a:	mov    0x40(%rdi),%eax
   37f0d:	movslq (%r12,%rax,4),%rax
   37f11:	movslq (%r15,%rax,4),%rax
   37f15:	imul   %eax,%eax
   37f18:	shl    $0x7,%eax
   37f1b:	movslq %eax,%rax
   37f1e:	add    %rax,%rbx
   37f21:	test   %ecx,%ecx
   37f23:	jns    37eee <find_best_colors+0x8e>
   37f25:	add    $0xffffffff,%esi
   37f28:	mov    -0x50(%rbp),%rcx
   37f2c:	mov    -0x48(%rbp),%rax
   37f30:	lea    (%rax,%rcx,1),%rdx
   37f34:	mov    0x40(%rdi),%eax
   37f37:	movslq (%r8,%rax,4),%rax
   37f3b:	movslq (%r15,%rax,4),%rax
   37f3f:	imul   %eax,%eax
   37f42:	shl    $0x5,%eax
   37f45:	movslq %eax,%rax
   37f48:	add    %rcx,%rax
   37f4b:	mov    -0x68(%rbp),%rbx
   37f4f:	mov    $0x3,%ecx
   37f54:	test   %esi,%esi
   37f56:	jns    37ff3 <find_best_colors+0x193>
   37f5c:	mov    -0x88(%rbp),%rax
   37f63:	lea    -0x1(%rax),%r9d
   37f67:	mov    -0x38(%rbp),%rsi
   37f6b:	mov    -0x30(%rbp),%rax
   37f6f:	lea    (%rax,%rsi,1),%rdx
   37f73:	mov    0x40(%rdi),%eax
   37f76:	lea    0x2358f(%rip),%r13        # 5b50c <rgb_red>
   37f7d:	movslq 0x0(%r13,%rax,4),%rax
   37f82:	movslq (%r15,%rax,4),%rax
   37f86:	imul   %eax,%eax
   37f89:	shl    $0x7,%eax
   37f8c:	movslq %eax,%rax
   37f8f:	lea    (%rsi,%rax,1),%r8
   37f93:	mov    -0x58(%rbp),%rax
   37f97:	mov    $0x7,%esi
   37f9c:	test   %r9d,%r9d
   37f9f:	jns    38000 <find_best_colors+0x1a0>
   37fa1:	mov    -0x90(%rbp),%rax
   37fa8:	lea    0x1(%rax),%r14d
   37fac:	mov    %r12,%rax
   37faf:	mov    -0x78(%rbp),%r10
   37fb3:	lea    -0x498(%rbp),%r11
   37fba:	mov    -0x40(%rbp),%rsi
   37fbe:	mov    -0x60(%rbp),%rdx
   37fc2:	lea    0x23587(%rip),%r8        # 5b550 <rgb_green>
   37fc9:	mov    -0x70(%rbp),%rcx
   37fcd:	mov    -0x80(%rbp),%r9
   37fd1:	mov    -0x98(%rbp),%rbx
   37fd8:	cmp    %ebx,%r14d
   37fdb:	jl     3801b <find_best_colors+0x1bb>
   37fdd:	mov    -0x8(%rbp),%rbx
   37fe1:	mov    -0x10(%rbp),%r12
   37fe5:	mov    -0x18(%rbp),%r13
   37fe9:	mov    -0x20(%rbp),%r14
   37fed:	mov    -0x28(%rbp),%r15
   37ff1:	leaveq 
   37ff2:	retq   
   37ff3:	mov    %rdx,-0x48(%rbp)
   37ff7:	mov    %rax,-0x50(%rbp)
   37ffb:	jmpq   37f21 <find_best_colors+0xc1>
   38000:	mov    %r9,-0x88(%rbp)
   38007:	mov    %rdx,-0x30(%rbp)
   3800b:	mov    %r8,-0x38(%rbp)
   3800f:	lea    0x2353a(%rip),%r8        # 5b550 <rgb_green>
   38016:	jmpq   37f54 <find_best_colors+0xf4>
   3801b:	mov    0x40(%rdi),%r12d
   3801f:	movslq (%rax,%r12,4),%rax
   38023:	movslq (%r15,%rax,4),%rax
   38027:	mov    %r14,-0x90(%rbp)
   3802e:	movslq %r14d,%rbx
   38031:	movzbl (%r9,%rbx,1),%r14d
   38036:	mov    0xa0(%rdi),%r9
   3803d:	mov    0x10(%r9),%rbx
   38041:	movzbl (%r14,%rbx,1),%ebx
   38046:	sub    %ebx,%ecx
   38048:	imul   %eax,%ecx
   3804b:	movslq %ecx,%rcx
   3804e:	mov    %rax,%rbx
   38051:	shl    $0x4,%ebx
   38054:	movslq %ebx,%rbx
   38057:	imul   %rcx,%rbx
   3805b:	imul   %eax,%eax
   3805e:	shl    $0x6,%eax
   38061:	movslq %eax,%rax
   38064:	add    %rax,%rbx
   38067:	mov    %rbx,-0x68(%rbp)
   3806b:	movslq (%r8,%r12,4),%rax
   3806f:	movslq (%r15,%rax,4),%rax
   38073:	mov    0x8(%r9),%r8
   38077:	movzbl (%r14,%r8,1),%r8d
   3807c:	sub    %r8d,%edx
   3807f:	imul   %eax,%edx
   38082:	movslq %edx,%r8
   38085:	mov    %r8,%rdx
   38088:	imul   %r8,%rdx
   3808c:	movslq 0x0(%r13,%r12,4),%r12
   38091:	movslq (%r15,%r12,4),%r12
   38095:	mov    (%r9),%r9
   38098:	movzbl (%r14,%r9,1),%r9d
   3809d:	sub    %r9d,%esi
   380a0:	imul   %r12d,%esi
   380a4:	movslq %esi,%r9
   380a7:	mov    %r9,%rsi
   380aa:	imul   %r9,%rsi
   380ae:	add    %rsi,%rdx
   380b1:	imul   %rcx,%rcx
   380b5:	add    %rcx,%rdx
   380b8:	mov    %rax,%rcx
   380bb:	shl    $0x3,%ecx
   380be:	movslq %ecx,%rcx
   380c1:	imul   %r8,%rcx
   380c5:	imul   %eax,%eax
   380c8:	shl    $0x4,%eax
   380cb:	movslq %eax,%rax
   380ce:	add    %rcx,%rax
   380d1:	mov    %rax,-0x58(%rbp)
   380d5:	mov    %r12,%rcx
   380d8:	shl    $0x4,%ecx
   380db:	movslq %ecx,%rcx
   380de:	imul   %r9,%rcx
   380e2:	imul   %r12d,%r12d
   380e6:	shl    $0x6,%r12d
   380ea:	movslq %r12d,%rsi
   380ed:	lea    (%rsi,%rcx,1),%r8
   380f1:	mov    $0x7,%esi
   380f6:	lea    0x2340f(%rip),%r13        # 5b50c <rgb_red>
   380fd:	lea    0x23490(%rip),%r12        # 5b594 <rgb_blue>
   38104:	mov    $0x3,%ecx
   38109:	mov    %rcx,%r9
   3810c:	jmpq   37f9c <find_best_colors+0x13c>
   38111:	data16 nopw %cs:0x0(%rax,%rax,1)
   3811c:	nopl   0x0(%rax)

0000000000038120 <fill_inverse_cmap>:
   38120:	push   %rbp
   38121:	mov    %rsp,%rbp
   38124:	sub    $0x1c0,%rsp
   3812b:	mov    %r15,-0x40(%rbp)
   3812f:	mov    %r14,-0x38(%rbp)
   38133:	mov    %r13,-0x30(%rbp)
   38137:	mov    %r12,-0x28(%rbp)
   3813b:	mov    %rbx,-0x20(%rbp)
   3813f:	mov    %rdx,-0x18(%rbp)
   38143:	mov    %rcx,-0x8(%rbp)
   38147:	mov    0x270(%rdi),%rax
   3814e:	mov    0x30(%rax),%rax
   38152:	mov    %rax,-0x10(%rbp)
   38156:	mov    %rsi,%rax
   38159:	and    $0x1ffffffc,%eax
   3815e:	lea    0x4(,%rax,8),%r14d
   38166:	and    $0x3ffffff8,%edx
   3816c:	lea    0x2(,%rdx,4),%ebx
   38173:	and    $0x1ffffffc,%ecx
   38179:	lea    0x4(,%rcx,8),%r13d
   38181:	mov    %rsi,%r12
   38184:	lea    -0x1c0(%rbp),%r8
   3818b:	mov    %rdi,%r15
   3818e:	mov    %r14,%rsi
   38191:	mov    %rbx,%rdx
   38194:	mov    %r13,%rcx
   38197:	callq  37a90 <find_nearby_colors>
   3819c:	mov    %r13,%rcx
   3819f:	mov    %rbx,%rdx
   381a2:	mov    %r14,%rsi
   381a5:	mov    %r15,%rdi
   381a8:	mov    %rax,%r8
   381ab:	sub    $0x10,%rsp
   381af:	lea    -0xc0(%rbp),%rbx
   381b6:	mov    %rbx,(%rsp)
   381ba:	lea    -0x1c0(%rbp),%r9
   381c1:	callq  37e60 <find_best_colors>
   381c6:	and    $0xfffffffc,%r12d
   381ca:	mov    -0x18(%rbp),%r8
   381ce:	and    $0xfffffff8,%r8d
   381d2:	add    $0x10,%rsp
   381d6:	xor    %r10d,%r10d
   381d9:	mov    -0x8(%rbp),%rax
   381dd:	and    $0xfffffffc,%eax
   381e0:	movslq %eax,%rax
   381e3:	lea    (%rax,%rax,1),%r9
   381e7:	mov    -0x10(%rbp),%r14
   381eb:	mov    %r10,%rsi
   381ee:	jmp    3821e <fill_inverse_cmap+0xfe>
   381f0:	movzbl (%rbx),%r11d
   381f4:	add    $0x1,%r11d
   381f8:	mov    %r11w,(%rax)
   381fc:	add    $0x1,%rbx
   38200:	add    $0x2,%rax
   38204:	add    $0x1,%ecx
   38207:	cmp    $0x3,%ecx
   3820a:	jle    381f0 <fill_inverse_cmap+0xd0>
   3820c:	add    $0x1,%edx
   3820f:	add    $0x1,%edi
   38212:	cmp    $0x7,%edx
   38215:	jle    38239 <fill_inverse_cmap+0x119>
   38217:	add    $0x1,%esi
   3821a:	add    $0x1,%r12d
   3821e:	cmp    $0x3,%esi
   38221:	jle    3824f <fill_inverse_cmap+0x12f>
   38223:	mov    -0x20(%rbp),%rbx
   38227:	mov    -0x28(%rbp),%r12
   3822b:	mov    -0x30(%rbp),%r13
   3822f:	mov    -0x38(%rbp),%r14
   38233:	mov    -0x40(%rbp),%r15
   38237:	leaveq 
   38238:	retq   
   38239:	mov    %r9,%rcx
   3823c:	add    (%r14,%r13,8),%rcx
   38240:	movslq %edi,%rax
   38243:	shl    $0x6,%rax
   38247:	add    %rcx,%rax
   3824a:	mov    %r10,%rcx
   3824d:	jmp    38207 <fill_inverse_cmap+0xe7>
   3824f:	movslq %r12d,%r13
   38252:	mov    %r8,%rdi
   38255:	mov    %r10,%rdx
   38258:	jmp    38212 <fill_inverse_cmap+0xf2>
   3825a:	nopw   0x0(%rax,%rax,1)

0000000000038260 <pass2_no_dither>:
   38260:	push   %rbp
   38261:	mov    %rsp,%rbp
   38264:	sub    $0x60,%rsp
   38268:	mov    %rdi,-0x38(%rbp)
   3826c:	mov    %rbx,-0x8(%rbp)
   38270:	mov    %r12,-0x10(%rbp)
   38274:	mov    %r13,-0x18(%rbp)
   38278:	mov    %r14,-0x20(%rbp)
   3827c:	mov    %r15,-0x28(%rbp)
   38280:	mov    %rcx,-0x50(%rbp)
   38284:	mov    %rsi,-0x40(%rbp)
   38288:	mov    %rdx,-0x30(%rbp)
   3828c:	mov    0x270(%rdi),%rax
   38293:	mov    0x30(%rax),%r12
   38297:	mov    0x88(%rdi),%ebx
   3829d:	mov    %rbx,-0x58(%rbp)
   382a1:	xor    %eax,%eax
   382a3:	jmp    38316 <pass2_no_dither+0xb6>
   382a5:	movzbl 0x0(%r13),%esi
   382aa:	shr    $0x3,%esi
   382ad:	movslq %esi,%rcx
   382b0:	movzbl 0x1(%r13),%edx
   382b5:	shr    $0x2,%edx
   382b8:	movslq %edx,%rax
   382bb:	shl    $0x6,%rax
   382bf:	add    (%r12,%rcx,8),%rax
   382c3:	movzbl 0x2(%r13),%ecx
   382c8:	shr    $0x3,%ecx
   382cb:	movslq %ecx,%r8
   382ce:	lea    (%rax,%r8,2),%r15
   382d2:	movzwl (%r15),%eax
   382d6:	test   %ax,%ax
   382d9:	jne    382e4 <pass2_no_dither+0x84>
   382db:	callq  38120 <fill_inverse_cmap>
   382e0:	mov    -0x38(%rbp),%rdi
   382e4:	movzbl (%r15),%eax
   382e8:	add    $0xff,%eax
   382ed:	mov    %al,(%r14)
   382f0:	add    $0x3,%r13
   382f4:	add    $0x1,%r14
   382f8:	add    $0xffffffff,%ebx
   382fb:	test   %ebx,%ebx
   382fd:	jne    382a5 <pass2_no_dither+0x45>
   382ff:	mov    -0x48(%rbp),%rax
   38303:	add    $0x1,%eax
   38306:	mov    -0x58(%rbp),%rbx
   3830a:	mov    -0x30(%rbp),%rdx
   3830e:	mov    -0x40(%rbp),%rsi
   38312:	mov    -0x50(%rbp),%rcx
   38316:	cmp    %ecx,%eax
   38318:	jl     38330 <pass2_no_dither+0xd0>
   3831a:	mov    -0x28(%rbp),%r15
   3831e:	mov    -0x20(%rbp),%r14
   38322:	mov    -0x18(%rbp),%r13
   38326:	mov    -0x10(%rbp),%r12
   3832a:	mov    -0x8(%rbp),%rbx
   3832e:	leaveq 
   3832f:	retq   
   38330:	movslq %eax,%rcx
   38333:	mov    (%rsi,%rcx,8),%r13
   38337:	mov    (%rdx,%rcx,8),%r14
   3833b:	mov    %rax,-0x48(%rbp)
   3833f:	jmp    382fb <pass2_no_dither+0x9b>
   38341:	data16 nopw %cs:0x0(%rax,%rax,1)
   3834c:	nopl   0x0(%rax)

0000000000038350 <pass2_fs_dither>:
   38350:	push   %rbp
   38351:	mov    %rsp,%rbp
   38354:	sub    $0x150,%rsp
   3835b:	mov    %r15,-0x28(%rbp)
   3835f:	mov    %r14,-0x20(%rbp)
   38363:	mov    %r13,-0x18(%rbp)
   38367:	mov    %r12,-0x10(%rbp)
   3836b:	mov    %rbx,-0x8(%rbp)
   3836f:	mov    %rdi,-0x58(%rbp)
   38373:	mov    %rcx,-0x138(%rbp)
   3837a:	mov    %rsi,-0x118(%rbp)
   38381:	mov    %rdx,-0x120(%rbp)
   38388:	mov    0x270(%rdi),%r13
   3838f:	mov    %r13,-0x110(%rbp)
   38396:	mov    0x30(%r13),%rax
   3839a:	mov    %rax,-0x60(%rbp)
   3839e:	mov    0x1a8(%rdi),%rax
   383a5:	mov    %rax,-0x140(%rbp)
   383ac:	mov    0x50(%r13),%rax
   383b0:	mov    %rax,-0xf8(%rbp)
   383b7:	mov    0xa0(%rdi),%rbx
   383be:	mov    (%rbx),%rax
   383c1:	mov    %rax,-0x88(%rbp)
   383c8:	mov    0x8(%rbx),%rax
   383cc:	mov    %rax,-0xa8(%rbp)
   383d3:	mov    0x10(%rbx),%rax
   383d7:	mov    %rax,-0x30(%rbp)
   383db:	mov    0x88(%rdi),%r11d
   383e2:	mov    %r11,-0x148(%rbp)
   383e9:	lea    -0x1(%r11),%eax
   383ed:	lea    -0x1(%r11,%rax,2),%edi
   383f2:	mov    %edi,%edi
   383f4:	mov    %rdi,-0xd0(%rbp)
   383fb:	mov    %eax,%r14d
   383fe:	mov    %r14,-0x38(%rbp)
   38402:	xor    %r8d,%r8d
   38405:	mov    %r8,-0xb8(%rbp)
   3840c:	lea    0x3(%r11,%r11,2),%eax
   38411:	mov    %eax,%eax
   38413:	lea    (%rax,%rax,1),%rbx
   38417:	mov    %rbx,-0x108(%rbp)
   3841e:	mov    $0x6,%r9d
   38424:	mov    $0xfffffffffffffffd,%rax
   3842b:	mov    %rax,-0xe8(%rbp)
   38432:	mov    $0x3,%eax
   38437:	mov    %rax,-0xe0(%rbp)
   3843e:	mov    $0xffffffffffffffff,%rax
   38445:	mov    %rax,-0x48(%rbp)
   38449:	mov    $0x1,%eax
   3844e:	mov    %rax,-0x40(%rbp)
   38452:	mov    %r8,%r15
   38455:	mov    %rcx,%r8
   38458:	mov    $0xa,%r10d
   3845e:	mov    $0x8,%eax
   38463:	mov    %r15,%rcx
   38466:	jmpq   386f5 <pass2_fs_dither+0x3a5>
   3846b:	mov    %r9,-0x130(%rbp)
   38472:	add    %rbx,%r9
   38475:	mov    %r9,-0x128(%rbp)
   3847c:	movswq (%r9),%r9
   38480:	lea    0x8(%r9,%r13,1),%r9d
   38485:	sar    $0x4,%r9d
   38489:	movslq %r9d,%r13
   3848c:	movzbl (%r8),%r9d
   38490:	add    (%r14,%r13,4),%r9d
   38494:	movslq %r9d,%r9
   38497:	movzbl (%r9,%rdx,1),%r13d
   3849c:	mov    %r13,%r9
   3849f:	shr    $0x3,%r9d
   384a3:	mov    %r11,-0x150(%rbp)
   384aa:	movslq %r9d,%r11
   384ad:	mov    %r10,-0x100(%rbp)
   384b4:	movswq (%r10,%rbx,1),%r10
   384b9:	lea    0x8(%r10,%rcx,1),%ecx
   384be:	sar    $0x4,%ecx
   384c1:	movslq %ecx,%r10
   384c4:	movzbl 0x2(%r8),%ecx
   384c9:	add    (%r14,%r10,4),%ecx
   384cd:	movslq %ecx,%rcx
   384d0:	movzbl (%rcx,%rdx,1),%ecx
   384d4:	mov    %rcx,-0xc8(%rbp)
   384db:	shr    $0x3,%ecx
   384de:	movslq %ecx,%r10
   384e1:	add    %r10,%r10
   384e4:	mov    (%r15,%r11,8),%r11
   384e8:	add    %r10,%r11
   384eb:	movswq (%rbx,%rax,1),%r10
   384f0:	lea    0x8(%r10,%rsi,1),%r10d
   384f5:	sar    $0x4,%r10d
   384f9:	movslq %r10d,%rsi
   384fc:	movzbl 0x1(%r8),%r10d
   38501:	add    (%r14,%rsi,4),%r10d
   38505:	movslq %r10d,%rsi
   38508:	movzbl (%rsi,%rdx,1),%r14d
   3850d:	mov    %r14,%rdx
   38510:	shr    $0x2,%edx
   38513:	movslq %edx,%r10
   38516:	shl    $0x6,%r10
   3851a:	lea    (%r11,%r10,1),%r15
   3851e:	movzwl (%r15),%esi
   38522:	test   %si,%si
   38525:	jne    3854b <pass2_fs_dither+0x1fb>
   38527:	mov    %r8,-0xd8(%rbp)
   3852e:	mov    %rax,-0xa0(%rbp)
   38535:	mov    %r9,%rsi
   38538:	callq  38120 <fill_inverse_cmap>
   3853d:	mov    -0xa0(%rbp),%rax
   38544:	mov    -0xd8(%rbp),%r8
   3854b:	movzwl (%r15),%ecx
   3854f:	add    $0xffffffff,%ecx
   38552:	mov    %cl,(%r12)
   38556:	movslq %ecx,%rdx
   38559:	mov    -0x88(%rbp),%rcx
   38560:	movzbl (%rdx,%rcx,1),%ecx
   38564:	sub    %ecx,%r13d
   38567:	mov    %r13,-0x78(%rbp)
   3856b:	lea    0x0(%r13,%r13,2),%r9d
   38570:	mov    -0x70(%rbp),%rcx
   38574:	lea    (%rcx,%r9,1),%edi
   38578:	mov    -0xa8(%rbp),%rcx
   3857f:	movzbl (%rdx,%rcx,1),%ecx
   38583:	sub    %ecx,%r14d
   38586:	mov    %r14,-0xa0(%rbp)
   3858d:	lea    (%r14,%r14,2),%esi
   38591:	mov    -0x90(%rbp),%rcx
   38598:	add    %esi,%ecx
   3859a:	mov    -0x30(%rbp),%r10
   3859e:	movzbl (%rdx,%r10,1),%edx
   385a3:	mov    %di,(%rbx)
   385a6:	mov    %cx,0x2(%rbx)
   385aa:	mov    -0xc8(%rbp),%rcx
   385b1:	sub    %edx,%ecx
   385b3:	mov    %rcx,-0xd8(%rbp)
   385ba:	lea    (%rcx,%rcx,2),%edi
   385bd:	mov    -0xb0(%rbp),%rdx
   385c4:	add    %edi,%edx
   385c6:	mov    %dx,0x4(%rbx)
   385ca:	lea    0x0(%r13,%r13,4),%edx
   385cf:	mov    -0x80(%rbp),%rbx
   385d3:	add    %ebx,%edx
   385d5:	mov    %rdx,-0x70(%rbp)
   385d9:	lea    (%r14,%r14,4),%edx
   385dd:	mov    -0x98(%rbp),%rbx
   385e4:	add    %ebx,%edx
   385e6:	mov    %rdx,-0x90(%rbp)
   385ed:	lea    (%rcx,%rcx,4),%ebx
   385f0:	mov    -0xc0(%rbp),%rdx
   385f7:	add    %ebx,%edx
   385f9:	mov    %rdx,-0xb0(%rbp)
   38600:	lea    0x0(%r13,%r9,2),%r13d
   38605:	lea    (%r14,%rsi,2),%esi
   38609:	lea    (%rcx,%rdi,2),%ecx
   3860c:	mov    -0xf0(%rbp),%rdx
   38613:	add    %rdx,%r8
   38616:	mov    -0x50(%rbp),%rdx
   3861a:	add    %r12,%rdx
   3861d:	mov    %rdx,-0xc8(%rbp)
   38624:	mov    -0x150(%rbp),%rdx
   3862b:	lea    -0x1(%rdx),%r11d
   3862f:	mov    -0xc8(%rbp),%r12
   38636:	mov    -0x140(%rbp),%rdx
   3863d:	mov    -0xf8(%rbp),%r14
   38644:	mov    -0x60(%rbp),%r15
   38648:	mov    -0x100(%rbp),%r10
   3864f:	mov    -0x128(%rbp),%rbx
   38656:	mov    -0x130(%rbp),%r9
   3865d:	mov    -0x58(%rbp),%rdi
   38661:	pushq  -0x78(%rbp)
   38664:	pushq  -0xa0(%rbp)
   3866a:	pushq  -0xd8(%rbp)
   38670:	popq   -0xc0(%rbp)
   38676:	popq   -0x98(%rbp)
   3867c:	popq   -0x80(%rbp)
   3867f:	test   %r11d,%r11d
   38682:	jne    3846b <pass2_fs_dither+0x11b>
   38688:	mov    -0x70(%rbp),%rax
   3868c:	mov    %ax,(%rbx)
   3868f:	mov    -0x90(%rbp),%rax
   38696:	mov    %ax,0x2(%rbx)
   3869a:	mov    -0xb0(%rbp),%rax
   386a1:	mov    %ax,0x4(%rbx)
   386a5:	mov    -0x68(%rbp),%rax
   386a9:	lea    0x1(%rax),%r15d
   386ad:	mov    -0x38(%rbp),%r14
   386b1:	mov    $0x6,%r9d
   386b7:	mov    -0x148(%rbp),%r11
   386be:	mov    -0xd0(%rbp),%rdi
   386c5:	mov    -0x108(%rbp),%rbx
   386cc:	mov    -0x110(%rbp),%r13
   386d3:	xor    %ecx,%ecx
   386d5:	mov    -0x120(%rbp),%rdx
   386dc:	mov    -0x118(%rbp),%rsi
   386e3:	mov    -0x138(%rbp),%r8
   386ea:	mov    $0xa,%r10d
   386f0:	mov    $0x8,%eax
   386f5:	cmp    %r8d,%r15d
   386f8:	jl     38710 <pass2_fs_dither+0x3c0>
   386fa:	mov    -0x8(%rbp),%rbx
   386fe:	mov    -0x10(%rbp),%r12
   38702:	mov    -0x18(%rbp),%r13
   38706:	mov    -0x20(%rbp),%r14
   3870a:	mov    -0x28(%rbp),%r15
   3870e:	leaveq 
   3870f:	retq   
   38710:	movslq %r15d,%r12
   38713:	mov    (%rsi,%r12,8),%r8
   38717:	mov    (%rdx,%r12,8),%r12
   3871b:	movslq 0x48(%r13),%rdx
   3871f:	test   %edx,%edx
   38721:	jne    387ac <pass2_fs_dither+0x45c>
   38727:	mov    0x40(%r13),%rbx
   3872b:	movl   $0x1,0x48(%r13)
   38733:	mov    %r15,-0x68(%rbp)
   38737:	mov    -0x140(%rbp),%rdx
   3873e:	mov    -0xf8(%rbp),%r14
   38745:	mov    -0x60(%rbp),%r15
   38749:	mov    -0x58(%rbp),%rdi
   3874d:	mov    %rcx,%rsi
   38750:	mov    %rsi,%r13
   38753:	pushq  -0x40(%rbp)
   38756:	pushq  -0xb8(%rbp)
   3875c:	pushq  -0xb8(%rbp)
   38762:	pushq  -0xb8(%rbp)
   38768:	pushq  -0xb8(%rbp)
   3876e:	pushq  -0xb8(%rbp)
   38774:	pushq  -0xb8(%rbp)
   3877a:	pushq  -0xe0(%rbp)
   38780:	popq   -0xf0(%rbp)
   38786:	popq   -0xc0(%rbp)
   3878c:	popq   -0xb0(%rbp)
   38792:	popq   -0x98(%rbp)
   38798:	popq   -0x90(%rbp)
   3879e:	popq   -0x80(%rbp)
   387a1:	popq   -0x70(%rbp)
   387a4:	popq   -0x50(%rbp)
   387a7:	jmpq   3867f <pass2_fs_dither+0x32f>
   387ac:	add    0x40(%r13),%rbx
   387b0:	movl   $0x0,0x48(%r13)
   387b8:	add    %rdi,%r8
   387bb:	add    %r14,%r12
   387be:	mov    %r15,-0x68(%rbp)
   387c2:	mov    -0x140(%rbp),%rdx
   387c9:	mov    -0xf8(%rbp),%r14
   387d0:	mov    -0x60(%rbp),%r15
   387d4:	mov    $0xfffffffffffffffe,%r10
   387db:	mov    $0xfffffffffffffffc,%rax
   387e2:	mov    -0x58(%rbp),%rdi
   387e6:	mov    $0xfffffffffffffffa,%r9
   387ed:	mov    %rcx,%rsi
   387f0:	mov    %rsi,%r13
   387f3:	pushq  -0x48(%rbp)
   387f6:	pushq  -0xb8(%rbp)
   387fc:	pushq  -0xb8(%rbp)
   38802:	pushq  -0xb8(%rbp)
   38808:	pushq  -0xb8(%rbp)
   3880e:	pushq  -0xb8(%rbp)
   38814:	pushq  -0xb8(%rbp)
   3881a:	pushq  -0xe8(%rbp)
   38820:	popq   -0xf0(%rbp)
   38826:	popq   -0xc0(%rbp)
   3882c:	popq   -0xb0(%rbp)
   38832:	popq   -0x98(%rbp)
   38838:	popq   -0x90(%rbp)
   3883e:	popq   -0x80(%rbp)
   38841:	popq   -0x70(%rbp)
   38844:	popq   -0x50(%rbp)
   38847:	jmpq   3867f <pass2_fs_dither+0x32f>
   3884c:	nopl   0x0(%rax)

0000000000038850 <init_error_limit>:
   38850:	push   %rbp
   38851:	mov    %rsp,%rbp
   38854:	sub    $0x10,%rsp
   38858:	mov    %r14,-0x8(%rbp)
   3885c:	mov    %r15,-0x10(%rbp)
   38860:	mov    0x8(%rdi),%rax
   38864:	mov    (%rax),%rax
   38867:	mov    $0x1,%r15d
   3886d:	mov    $0x7fc,%edx
   38872:	mov    0x270(%rdi),%r14
   38879:	mov    %r15,%rsi
   3887c:	callq  *%rax
   3887e:	lea    0x3fc(%rax),%rsi
   38885:	mov    %rsi,0x50(%r14)
   38889:	xor    %r8d,%r8d
   3888c:	mov    %r8,%rax
   3888f:	jmp    388a5 <init_error_limit+0x55>
   38891:	movslq %eax,%rcx
   38894:	mov    %eax,(%rsi,%rcx,4)
   38897:	mov    %rax,%rdx
   3889a:	neg    %edx
   3889c:	movslq %edx,%rcx
   3889f:	mov    %edx,(%rsi,%rcx,4)
   388a2:	add    $0x1,%eax
   388a5:	cmp    $0xf,%eax
   388a8:	jle    38891 <init_error_limit+0x41>
   388aa:	mov    %rax,%rcx
   388ad:	jmp    388b4 <init_error_limit+0x64>
   388af:	mov    %r8,%rdx
   388b2:	add    %edx,%ecx
   388b4:	mov    %rcx,%rdi
   388b7:	neg    %edi
   388b9:	cmp    $0x2f,%eax
   388bc:	jg     388f5 <init_error_limit+0xa5>
   388be:	movslq %eax,%rdx
   388c1:	mov    %ecx,(%rsi,%rdx,4)
   388c4:	mov    %rax,%rdx
   388c7:	neg    %edx
   388c9:	movslq %edx,%rdx
   388cc:	mov    %edi,(%rsi,%rdx,4)
   388cf:	add    $0x1,%eax
   388d2:	mov    %rax,%rdx
   388d5:	and    $0x1,%edx
   388d8:	test   %edx,%edx
   388da:	jg     388af <init_error_limit+0x5f>
   388dc:	mov    %r15,%rdx
   388df:	jmp    388b2 <init_error_limit+0x62>
   388e1:	movslq %eax,%rdx
   388e4:	mov    %ecx,(%rsi,%rdx,4)
   388e7:	mov    %rax,%rdx
   388ea:	neg    %edx
   388ec:	movslq %edx,%rdx
   388ef:	mov    %edi,(%rsi,%rdx,4)
   388f2:	add    $0x1,%eax
   388f5:	cmp    $0xff,%eax
   388fa:	jle    388e1 <init_error_limit+0x91>
   388fc:	mov    -0x10(%rbp),%r15
   38900:	mov    -0x8(%rbp),%r14
   38904:	leaveq 
   38905:	retq   
   38906:	nopw   %cs:0x0(%rax,%rax,1)

0000000000038910 <finish_pass1>:
   38910:	push   %rbp
   38911:	mov    %rsp,%rbp
   38914:	sub    $0x10,%rsp
   38918:	mov    %r15,-0x8(%rbp)
   3891c:	mov    0x270(%rdi),%r15
   38923:	mov    0x20(%r15),%rax
   38927:	mov    %rax,0xa0(%rdi)
   3892e:	movslq 0x28(%r15),%rsi
   38932:	callq  37990 <select_colors>
   38937:	movl   $0x1,0x38(%r15)
   3893f:	mov    -0x8(%rbp),%r15
   38943:	leaveq 
   38944:	retq   
   38945:	data16 nopw %cs:0x0(%rax,%rax,1)

0000000000038950 <finish_pass2>:
   38950:	push   %rbp
   38951:	mov    %rsp,%rbp
   38954:	leaveq 
   38955:	retq   
   38956:	nopw   %cs:0x0(%rax,%rax,1)

0000000000038960 <start_pass_2_quant>:
   38960:	push   %rbp
   38961:	mov    %rsp,%rbp
   38964:	sub    $0x30,%rsp
   38968:	mov    %r14,-0x28(%rbp)
   3896c:	mov    %r15,-0x30(%rbp)
   38970:	mov    0x270(%rdi),%rcx
   38977:	mov    0x30(%rcx),%r8
   3897b:	mov    0x70(%rdi),%eax
   3897e:	test   %eax,%eax
   38980:	je     38989 <start_pass_2_quant+0x29>
   38982:	movl   $0x2,0x70(%rdi)
   38989:	test   %esi,%esi
   3898b:	jne    389a2 <start_pass_2_quant+0x42>
   3898d:	mov    0x70(%rdi),%eax
   38990:	cmp    $0x2,%eax
   38993:	je     389ef <start_pass_2_quant+0x8f>
   38995:	lea    -0x73c(%rip),%rax        # 38260 <pass2_no_dither>
   3899c:	mov    %rax,0x8(%rcx)
   389a0:	jmp    389fa <start_pass_2_quant+0x9a>
   389a2:	lea    -0x1969(%rip),%rax        # 37040 <prescan_quantize>
   389a9:	mov    %rax,0x8(%rcx)
   389ad:	lea    -0xa4(%rip),%rax        # 38910 <finish_pass1>
   389b4:	mov    %rax,0x10(%rcx)
   389b8:	mov    %r15,%rax
   389bb:	mov    %r13,%rsi
   389be:	mov    %r8,%r13
   389c1:	mov    %r12,%rdi
   389c4:	mov    %rcx,%r12
   389c7:	mov    %r14,%rcx
   389ca:	movl   $0x1,0x38(%r12)
   389d3:	movslq 0x38(%r12),%rdx
   389d8:	test   %edx,%edx
   389da:	je     38a2a <start_pass_2_quant+0xca>
   389dc:	mov    $0x1000,%r15d
   389e2:	xor    %r14d,%r14d
   389e5:	mov    %rsi,-0x18(%rbp)
   389e9:	mov    %rdi,-0x10(%rbp)
   389ed:	jmp    38a4c <start_pass_2_quant+0xec>
   389ef:	lea    -0x6a6(%rip),%rax        # 38350 <pass2_fs_dither>
   389f6:	mov    %rax,0x8(%rcx)
   389fa:	lea    -0xb1(%rip),%rax        # 38950 <finish_pass2>
   38a01:	mov    %rax,0x10(%rcx)
   38a05:	movslq 0x9c(%rdi),%rdx
   38a0c:	test   %edx,%edx
   38a0e:	jle    38a6d <start_pass_2_quant+0x10d>
   38a10:	mov    %r15,%rax
   38a13:	mov    %r13,%r15
   38a16:	mov    %r8,%r13
   38a19:	mov    %r14,%r8
   38a1c:	mov    %r12,%r14
   38a1f:	mov    %rcx,%r12
   38a22:	mov    %r8,%rcx
   38a25:	jmpq   38ab9 <start_pass_2_quant+0x159>
   38a2a:	mov    %rdi,%r12
   38a2d:	mov    %rsi,%r13
   38a30:	mov    %rcx,%r14
   38a33:	mov    %rax,%r15
   38a36:	leaveq 
   38a37:	retq   
   38a38:	movslq %r14d,%rax
   38a3b:	mov    0x0(%r13,%rax,8),%rdi
   38a40:	mov    %r15,%rsi
   38a43:	callq  44d0 <jzero_far@plt>
   38a48:	add    $0x1,%r14d
   38a4c:	cmp    $0x1f,%r14d
   38a50:	jle    38a38 <start_pass_2_quant+0xd8>
   38a52:	movl   $0x0,0x38(%r12)
   38a5b:	mov    -0x10(%rbp),%r12
   38a5f:	mov    -0x30(%rbp),%r15
   38a63:	mov    -0x28(%rbp),%r14
   38a67:	mov    -0x18(%rbp),%r13
   38a6b:	leaveq 
   38a6c:	retq   
   38a6d:	mov    (%rdi),%rax
   38a70:	movl   $0x38,0x28(%rax)
   38a77:	mov    (%rdi),%rax
   38a7a:	movl   $0x1,0x2c(%rax)
   38a81:	mov    (%rdi),%rax
   38a84:	mov    (%rax),%rax
   38a87:	mov    %rdi,%rsi
   38a8a:	mov    %r13,-0x20(%rbp)
   38a8e:	mov    %r8,-0x18(%rbp)
   38a92:	mov    %rdx,%r13
   38a95:	mov    %r12,%r14
   38a98:	mov    %rcx,%r12
   38a9b:	mov    %rdi,%r15
   38a9e:	mov    %rsi,%rdi
   38aa1:	callq  *%rax
   38aa3:	mov    %r13,%rdx
   38aa6:	mov    %r15,%rdi
   38aa9:	mov    -0x18(%rbp),%r13
   38aad:	mov    -0x30(%rbp),%rax
   38ab1:	mov    -0x28(%rbp),%rcx
   38ab5:	mov    -0x20(%rbp),%r15
   38ab9:	cmp    $0x100,%edx
   38abf:	jle    38af9 <start_pass_2_quant+0x199>
   38ac1:	mov    (%rdi),%rax
   38ac4:	movl   $0x39,0x28(%rax)
   38acb:	mov    (%rdi),%rax
   38ace:	movl   $0x100,0x2c(%rax)
   38ad5:	mov    (%rdi),%rax
   38ad8:	mov    (%rax),%rax
   38adb:	mov    %rdi,%rcx
   38ade:	mov    %r13,-0x10(%rbp)
   38ae2:	mov    %rdi,%r13
   38ae5:	mov    %rcx,%rdi
   38ae8:	callq  *%rax
   38aea:	mov    %r13,%rdi
   38aed:	mov    -0x10(%rbp),%r13
   38af1:	mov    -0x30(%rbp),%rax
   38af5:	mov    -0x28(%rbp),%rcx
   38af9:	mov    0x70(%rdi),%edx
   38afc:	cmp    $0x2,%edx
   38aff:	je     38b0c <start_pass_2_quant+0x1ac>
   38b01:	mov    %r15,%rsi
   38b04:	mov    %r14,%rdi
   38b07:	jmpq   389d3 <start_pass_2_quant+0x73>
   38b0c:	mov    0x88(%rdi),%eax
   38b12:	add    $0x2,%eax
   38b15:	mov    %eax,%eax
   38b17:	lea    (%rax,%rax,2),%rax
   38b1b:	lea    (%rax,%rax,1),%rsi
   38b1f:	mov    0x40(%r12),%rax
   38b24:	test   %rax,%rax
   38b27:	jne    38b66 <start_pass_2_quant+0x206>
   38b29:	mov    0x8(%rdi),%rax
   38b2d:	mov    0x8(%rax),%rax
   38b31:	mov    $0x1,%r8d
   38b37:	mov    %rdi,%rcx
   38b3a:	mov    %rsi,%rdx
   38b3d:	mov    %r15,-0x20(%rbp)
   38b41:	mov    %r13,-0x8(%rbp)
   38b45:	mov    %rdi,%r13
   38b48:	mov    %rcx,%rdi
   38b4b:	mov    %rsi,%r15
   38b4e:	mov    %r8,%rsi
   38b51:	callq  *%rax
   38b53:	mov    %rax,0x40(%r12)
   38b58:	mov    %r15,%rsi
   38b5b:	mov    %r13,%rdi
   38b5e:	mov    -0x8(%rbp),%r13
   38b62:	mov    -0x20(%rbp),%r15
   38b66:	mov    0x40(%r12),%rax
   38b6b:	mov    %r13,-0x8(%rbp)
   38b6f:	mov    %rdi,%r13
   38b72:	mov    %rax,%rdi
   38b75:	callq  44d0 <jzero_far@plt>
   38b7a:	mov    0x50(%r12),%rax
   38b7f:	test   %rax,%rax
   38b82:	jne    38b8c <start_pass_2_quant+0x22c>
   38b84:	mov    %r13,%rdi
   38b87:	callq  38850 <init_error_limit>
   38b8c:	movl   $0x0,0x48(%r12)
   38b95:	mov    %r15,%rsi
   38b98:	mov    %r14,%rdi
   38b9b:	mov    -0x8(%rbp),%r13
   38b9f:	mov    -0x30(%rbp),%rax
   38ba3:	mov    -0x28(%rbp),%rcx
   38ba7:	jmpq   389d3 <start_pass_2_quant+0x73>
   38bac:	nopl   0x0(%rax)

0000000000038bb0 <new_color_map_2_quant>:
   38bb0:	push   %rbp
   38bb1:	mov    %rsp,%rbp
   38bb4:	mov    0x270(%rdi),%rax
   38bbb:	movl   $0x1,0x38(%rax)
   38bc2:	leaveq 
   38bc3:	retq   
   38bc4:	nopw   %cs:0x0(%rax,%rax,1)
   38bce:	xchg   %ax,%ax

0000000000038bd0 <jdiv_round_up>:
   38bd0:	push   %rbp
   38bd1:	mov    %rsp,%rbp
   38bd4:	lea    -0x1(%rsi,%rdi,1),%rax
   38bd9:	cqto   
   38bdb:	idiv   %rsi
   38bde:	leaveq 
   38bdf:	retq   

0000000000038be0 <jround_up>:
   38be0:	push   %rbp
   38be1:	mov    %rsp,%rbp
   38be4:	lea    -0x1(%rsi,%rdi,1),%rax
   38be9:	cqto   
   38beb:	mov    %rax,%rcx
   38bee:	idiv   %rsi
   38bf1:	mov    %rcx,%rax
   38bf4:	sub    %rdx,%rax
   38bf7:	leaveq 
   38bf8:	retq   
   38bf9:	nopl   0x0(%rax)

0000000000038c00 <jcopy_sample_rows>:
   38c00:	push   %rbp
   38c01:	mov    %rsp,%rbp
   38c04:	sub    $0x20,%rsp
   38c08:	mov    %r12,-0x8(%rbp)
   38c0c:	mov    %r13,-0x10(%rbp)
   38c10:	mov    %r14,-0x18(%rbp)
   38c14:	mov    %r15,-0x20(%rbp)
   38c18:	mov    %r9d,%r14d
   38c1b:	movslq %esi,%rax
   38c1e:	lea    (%rdi,%rax,8),%r13
   38c22:	movslq %ecx,%rax
   38c25:	lea    (%rdx,%rax,8),%r15
   38c29:	mov    %r8,%r12
   38c2c:	jmp    38c49 <jcopy_sample_rows+0x49>
   38c2e:	mov    (%r15),%rdi
   38c31:	mov    0x0(%r13),%rsi
   38c35:	mov    %r14,%rdx
   38c38:	callq  42c0 <memcpy@plt>
   38c3d:	add    $0xffffffff,%r12d
   38c41:	add    $0x8,%r13
   38c45:	add    $0x8,%r15
   38c49:	test   %r12d,%r12d
   38c4c:	jg     38c2e <jcopy_sample_rows+0x2e>
   38c4e:	mov    -0x20(%rbp),%r15
   38c52:	mov    -0x18(%rbp),%r14
   38c56:	mov    -0x10(%rbp),%r13
   38c5a:	mov    -0x8(%rbp),%r12
   38c5e:	leaveq 
   38c5f:	retq   

0000000000038c60 <jcopy_block_row>:
   38c60:	push   %rbp
   38c61:	mov    %rsp,%rbp
   38c64:	mov    %edx,%edx
   38c66:	shl    $0x7,%rdx
   38c6a:	mov    %rdi,%rax
   38c6d:	mov    %rsi,%rdi
   38c70:	mov    %rax,%rsi
   38c73:	callq  42c0 <memcpy@plt>
   38c78:	leaveq 
   38c79:	retq   
   38c7a:	nopw   0x0(%rax,%rax,1)

0000000000038c80 <jzero_far>:
   38c80:	push   %rbp
   38c81:	mov    %rsp,%rbp
   38c84:	mov    %rsi,%rdx
   38c87:	xor    %esi,%esi
   38c89:	callq  41e0 <memset@plt>
   38c8e:	leaveq 
   38c8f:	retq   

0000000000038c90 <jinit_memory_mgr>:
   38c90:	push   %rbp
   38c91:	mov    %rsp,%rbp
   38c94:	sub    $0x20,%rsp
   38c98:	mov    %r15,-0x10(%rbp)
   38c9c:	movq   $0x0,0x8(%rdi)
   38ca4:	mov    %rdi,%r15
   38ca7:	callq  4490 <jpeg_mem_init@plt>
   38cac:	mov    %rax,-0x20(%rbp)
   38cb0:	mov    $0xa8,%esi
   38cb5:	mov    %r15,%rdi
   38cb8:	callq  4210 <jpeg_get_small@plt>
   38cbd:	test   %rax,%rax
   38cc0:	jne    38cf7 <jinit_memory_mgr+0x67>
   38cc2:	mov    %r15,%rdi
   38cc5:	mov    %r14,-0x8(%rbp)
   38cc9:	mov    %rax,%r14
   38ccc:	callq  4350 <jpeg_mem_term@plt>
   38cd1:	mov    (%r15),%rax
   38cd4:	movl   $0x36,0x28(%rax)
   38cdb:	mov    (%r15),%rax
   38cde:	movl   $0x0,0x2c(%rax)
   38ce5:	mov    (%r15),%rax
   38ce8:	mov    (%rax),%rax
   38ceb:	mov    %r15,%rdi
   38cee:	callq  *%rax
   38cf0:	mov    %r14,%rax
   38cf3:	mov    -0x8(%rbp),%r14
   38cf7:	lea    0x1a2(%rip),%rcx        # 38ea0 <alloc_small>
   38cfe:	mov    %rcx,(%rax)
   38d01:	lea    0x3b8(%rip),%rcx        # 390c0 <alloc_large>
   38d08:	mov    %rcx,0x8(%rax)
   38d0c:	lea    0x50d(%rip),%rcx        # 39220 <alloc_sarray>
   38d13:	mov    %rcx,0x10(%rax)
   38d17:	lea    0x642(%rip),%rcx        # 39360 <alloc_barray>
   38d1e:	mov    %rcx,0x18(%rax)
   38d22:	lea    0x757(%rip),%rcx        # 39480 <request_virt_sarray>
   38d29:	mov    %rcx,0x20(%rax)
   38d2d:	lea    0x81c(%rip),%rcx        # 39550 <request_virt_barray>
   38d34:	mov    %rcx,0x28(%rax)
   38d38:	lea    0x8e1(%rip),%rcx        # 39620 <realize_virt_arrays>
   38d3f:	mov    %rcx,0x30(%rax)
   38d43:	lea    0xdc6(%rip),%rcx        # 39b10 <access_virt_sarray>
   38d4a:	mov    %rcx,0x38(%rax)
   38d4e:	lea    0xffb(%rip),%rcx        # 39d50 <access_virt_barray>
   38d55:	mov    %rcx,0x40(%rax)
   38d59:	lea    0x1240(%rip),%rcx        # 39fa0 <free_pool>
   38d60:	mov    %rcx,0x48(%rax)
   38d64:	lea    0x13c5(%rip),%rcx        # 3a130 <self_destruct>
   38d6b:	mov    %rcx,0x50(%rax)
   38d6f:	movq   $0x3b9aca00,0x60(%rax)
   38d77:	mov    -0x20(%rbp),%rcx
   38d7b:	mov    %rcx,0x58(%rax)
   38d7f:	mov    $0x1,%ecx
   38d84:	jmp    38d9e <jinit_memory_mgr+0x10e>
   38d86:	movslq %ecx,%rdx
   38d89:	movq   $0x0,0x68(%rax,%rdx,8)
   38d92:	movq   $0x0,0x78(%rax,%rdx,8)
   38d9b:	add    $0xffffffff,%ecx
   38d9e:	test   %ecx,%ecx
   38da0:	jns    38d86 <jinit_memory_mgr+0xf6>
   38da2:	movq   $0x0,0x88(%rax)
   38dad:	movq   $0x0,0x90(%rax)
   38db8:	movq   $0xa8,0x98(%rax)
   38dc3:	mov    %rax,0x8(%r15)
   38dc7:	mov    %rax,%r15
   38dca:	lea    0x22977(%rip),%rdi        # 5b748 <extra_pool_slop+0x10>
   38dd1:	callq  4040 <getenv@plt>
   38dd6:	test   %rax,%rax
   38dd9:	jne    38de1 <jinit_memory_mgr+0x151>
   38ddb:	mov    -0x10(%rbp),%r15
   38ddf:	leaveq 
   38de0:	retq   
   38de1:	mov    %rax,%rdi
   38de4:	movb   $0x78,-0x11(%rbp)
   38de8:	xor    %eax,%eax
   38dea:	lea    0x2295f(%rip),%rsi        # 5b750 <extra_pool_slop+0x18>
   38df1:	lea    -0x20(%rbp),%rdx
   38df5:	lea    -0x11(%rbp),%rcx
   38df9:	callq  4370 <sscanf@plt>
   38dfe:	test   %eax,%eax
   38e00:	jg     38e08 <jinit_memory_mgr+0x178>
   38e02:	mov    -0x10(%rbp),%r15
   38e06:	leaveq 
   38e07:	retq   
   38e08:	movsbq -0x11(%rbp),%rax
   38e0d:	cmp    $0x6d,%al
   38e0f:	je     38e15 <jinit_memory_mgr+0x185>
   38e11:	cmp    $0x4d,%al
   38e13:	jne    38e30 <jinit_memory_mgr+0x1a0>
   38e15:	mov    -0x20(%rbp),%rax
   38e19:	lea    (%rax,%rax,4),%rcx
   38e1d:	mov    %rcx,%rax
   38e20:	shl    $0x5,%rax
   38e24:	lea    (%rax,%rcx,8),%rax
   38e28:	lea    (%rax,%rax,4),%rax
   38e2c:	mov    %rax,-0x20(%rbp)
   38e30:	mov    -0x20(%rbp),%rax
   38e34:	lea    (%rax,%rax,4),%rcx
   38e38:	mov    %rcx,%rax
   38e3b:	shl    $0x5,%rax
   38e3f:	lea    (%rax,%rcx,8),%rax
   38e43:	lea    (%rax,%rax,4),%rax
   38e47:	mov    %rax,0x58(%r15)
   38e4b:	mov    -0x10(%rbp),%r15
   38e4f:	leaveq 
   38e50:	retq   
   38e51:	data16 nopw %cs:0x0(%rax,%rax,1)
   38e5c:	nopl   0x0(%rax)

0000000000038e60 <round_up_pow2>:
   38e60:	push   %rbp
   38e61:	mov    %rsp,%rbp
   38e64:	lea    -0x1(%rsi,%rdi,1),%rcx
   38e69:	mov    %rsi,%rax
   38e6c:	neg    %rax
   38e6f:	and    %rcx,%rax
   38e72:	leaveq 
   38e73:	retq   
   38e74:	data16 nopw %cs:0x0(%rax,%rax,1)
   38e7f:	nop

0000000000038e80 <out_of_memory>:
   38e80:	push   %rbp
   38e81:	mov    %rsp,%rbp
   38e84:	mov    (%rdi),%rax
   38e87:	movl   $0x36,0x28(%rax)
   38e8e:	mov    (%rdi),%rax
   38e91:	mov    %esi,0x2c(%rax)
   38e94:	mov    (%rdi),%rax
   38e97:	mov    (%rax),%rax
   38e9a:	callq  *%rax
   38e9c:	leaveq 
   38e9d:	retq   
   38e9e:	xchg   %ax,%ax

0000000000038ea0 <alloc_small>:
   38ea0:	push   %rbp
   38ea1:	mov    %rsp,%rbp
   38ea4:	sub    $0x40,%rsp
   38ea8:	mov    %r12,-0x20(%rbp)
   38eac:	mov    %r13,-0x28(%rbp)
   38eb0:	mov    %r14,-0x30(%rbp)
   38eb4:	mov    %r15,-0x38(%rbp)
   38eb8:	mov    0x8(%rdi),%r13
   38ebc:	cmp    $0x3b9aca00,%rdx
   38ec3:	ja     38ed3 <alloc_small+0x33>
   38ec5:	mov    %rsi,%r14
   38ec8:	mov    %rbx,%r15
   38ecb:	mov    %rdi,%rbx
   38ece:	mov    %rdx,%rdi
   38ed1:	jmp    38ef0 <alloc_small+0x50>
   38ed3:	mov    %rdx,%r12
   38ed6:	mov    %rsi,%r14
   38ed9:	mov    %rbx,%r15
   38edc:	mov    $0x7,%esi
   38ee1:	mov    %rdi,%rbx
   38ee4:	callq  38e80 <out_of_memory>
   38ee9:	mov    %r12,%rdi
   38eec:	mov    -0x20(%rbp),%r12
   38ef0:	mov    $0x10,%esi
   38ef5:	callq  38e60 <round_up_pow2>
   38efa:	lea    0x27(%rax),%rcx
   38efe:	cmp    $0x3b9aca00,%rcx
   38f05:	ja     38f0f <alloc_small+0x6f>
   38f07:	mov    %r13,%rcx
   38f0a:	mov    %rax,%r13
   38f0d:	jmp    38f29 <alloc_small+0x89>
   38f0f:	mov    %r13,%r12
   38f12:	mov    %rax,%r13
   38f15:	mov    $0x1,%esi
   38f1a:	mov    %rbx,%rdi
   38f1d:	callq  38e80 <out_of_memory>
   38f22:	mov    %r12,%rcx
   38f25:	mov    -0x20(%rbp),%r12
   38f29:	test   %r14d,%r14d
   38f2c:	js     38f34 <alloc_small+0x94>
   38f2e:	cmp    $0x1,%r14d
   38f32:	jle    38f5e <alloc_small+0xbe>
   38f34:	mov    (%rbx),%rax
   38f37:	movl   $0xe,0x28(%rax)
   38f3e:	mov    (%rbx),%rax
   38f41:	mov    %r14d,0x2c(%rax)
   38f45:	mov    (%rbx),%rax
   38f48:	mov    (%rax),%rax
   38f4b:	mov    %rbx,%rdi
   38f4e:	mov    %rbx,-0x40(%rbp)
   38f52:	mov    %rcx,%rbx
   38f55:	callq  *%rax
   38f57:	mov    %rbx,%rcx
   38f5a:	mov    -0x40(%rbp),%rbx
   38f5e:	movslq %r14d,%rdi
   38f61:	mov    0x68(%rcx,%rdi,8),%rax
   38f66:	xor    %edx,%edx
   38f68:	jmp    38f79 <alloc_small+0xd9>
   38f6a:	mov    0x10(%rax),%rsi
   38f6e:	cmp    %r13,%rsi
   38f71:	jae    38f7e <alloc_small+0xde>
   38f73:	mov    %rax,%rdx
   38f76:	mov    (%rdx),%rax
   38f79:	test   %rax,%rax
   38f7c:	jne    38f6a <alloc_small+0xca>
   38f7e:	test   %rax,%rax
   38f81:	jne    3900b <alloc_small+0x16b>
   38f87:	test   %rdx,%rdx
   38f8a:	je     39059 <alloc_small+0x1b9>
   38f90:	lea    0x227a1(%rip),%rax        # 5b738 <extra_pool_slop>
   38f97:	mov    (%rax,%rdi,8),%r12
   38f9b:	jmpq   39064 <alloc_small+0x1c4>
   38fa0:	shr    %r12
   38fa3:	cmp    $0x31,%r12
   38fa7:	ja     38fb4 <alloc_small+0x114>
   38fa9:	mov    %rbx,%rdi
   38fac:	mov    %r14,%rsi
   38faf:	callq  38e80 <out_of_memory>
   38fb4:	lea    0x27(%r13,%r12,1),%r15
   38fb9:	mov    %rbx,%rdi
   38fbc:	mov    %r15,%rsi
   38fbf:	callq  4210 <jpeg_get_small@plt>
   38fc4:	test   %rax,%rax
   38fc7:	je     38fa0 <alloc_small+0x100>
   38fc9:	mov    -0x10(%rbp),%rdx
   38fcd:	add    0x98(%rdx),%r15
   38fd4:	mov    -0x40(%rbp),%rsi
   38fd8:	test   %rsi,%rsi
   38fdb:	mov    %r15,0x98(%rdx)
   38fe2:	movq   $0x0,(%rax)
   38fe9:	movq   $0x0,0x8(%rax)
   38ff1:	lea    0x0(%r13,%r12,1),%rcx
   38ff6:	mov    %rcx,0x10(%rax)
   38ffa:	je     3908c <alloc_small+0x1ec>
   39000:	mov    %rax,(%rsi)
   39003:	mov    -0x18(%rbp),%r15
   39007:	mov    -0x20(%rbp),%r12
   3900b:	lea    0x18(%rax),%rcx
   3900f:	mov    %rcx,%rdx
   39012:	and    $0xf,%rdx
   39016:	test   %rdx,%rdx
   39019:	je     3902c <alloc_small+0x18c>
   3901b:	and    $0xf,%rcx
   3901f:	mov    $0x10,%edx
   39024:	sub    %rcx,%rdx
   39027:	lea    0x18(%rax,%rdx,1),%rcx
   3902c:	mov    0x8(%rax),%rsi
   39030:	lea    0x0(%r13,%rsi,1),%rdx
   39035:	mov    %rdx,0x8(%rax)
   39039:	mov    0x10(%rax),%rdx
   3903d:	sub    %r13,%rdx
   39040:	mov    %rdx,0x10(%rax)
   39044:	lea    (%rsi,%rcx,1),%rax
   39048:	mov    %r15,%rbx
   3904b:	mov    -0x38(%rbp),%r15
   3904f:	mov    -0x30(%rbp),%r14
   39053:	mov    -0x28(%rbp),%r13
   39057:	leaveq 
   39058:	retq   
   39059:	lea    0x226c8(%rip),%rax        # 5b728 <first_pool_slop>
   39060:	mov    (%rax,%rdi,8),%r12
   39064:	mov    $0x2,%r14d
   3906a:	mov    $0x3b9ac9d9,%eax
   3906f:	sub    %r13,%rax
   39072:	cmp    %rax,%r12
   39075:	ja     390a2 <alloc_small+0x202>
   39077:	mov    %rcx,-0x10(%rbp)
   3907b:	mov    %rdx,-0x40(%rbp)
   3907f:	mov    %rdi,-0x8(%rbp)
   39083:	mov    %r15,-0x18(%rbp)
   39087:	jmpq   38fb4 <alloc_small+0x114>
   3908c:	mov    -0x8(%rbp),%rcx
   39090:	mov    %rax,0x68(%rdx,%rcx,8)
   39095:	mov    -0x18(%rbp),%r15
   39099:	mov    -0x20(%rbp),%r12
   3909d:	jmpq   3900b <alloc_small+0x16b>
   390a2:	mov    %rcx,-0x10(%rbp)
   390a6:	mov    %rdx,-0x40(%rbp)
   390aa:	mov    %rdi,-0x8(%rbp)
   390ae:	mov    %r15,-0x18(%rbp)
   390b2:	mov    %rax,%r12
   390b5:	jmpq   38fb4 <alloc_small+0x114>
   390ba:	nopw   0x0(%rax,%rax,1)

00000000000390c0 <alloc_large>:
   390c0:	push   %rbp
   390c1:	mov    %rsp,%rbp
   390c4:	sub    $0x30,%rsp
   390c8:	mov    %r12,-0x10(%rbp)
   390cc:	mov    %r13,-0x18(%rbp)
   390d0:	mov    %r14,-0x20(%rbp)
   390d4:	mov    %r15,-0x28(%rbp)
   390d8:	mov    %rbx,-0x8(%rbp)
   390dc:	mov    0x8(%rdi),%r12
   390e0:	cmp    $0x3b9aca00,%rdx
   390e7:	ja     390f7 <alloc_large+0x37>
   390e9:	mov    %rbx,%r13
   390ec:	mov    %rsi,%rbx
   390ef:	mov    %rdi,%r14
   390f2:	mov    %rdx,%rdi
   390f5:	jmp    39110 <alloc_large+0x50>
   390f7:	mov    %rbx,%r13
   390fa:	mov    %rsi,%rbx
   390fd:	mov    %rdx,%r15
   39100:	mov    $0x8,%esi
   39105:	mov    %rdi,%r14
   39108:	callq  38e80 <out_of_memory>
   3910d:	mov    %r15,%rdi
   39110:	mov    $0x10,%esi
   39115:	callq  38e60 <round_up_pow2>
   3911a:	lea    0x27(%rax),%rsi
   3911e:	cmp    $0x3b9aca00,%rsi
   39125:	ja     3912c <alloc_large+0x6c>
   39127:	mov    %rax,%r15
   3912a:	jmp    39146 <alloc_large+0x86>
   3912c:	mov    %rsi,%r13
   3912f:	mov    %rax,%r15
   39132:	mov    $0x3,%esi
   39137:	mov    %r14,%rdi
   3913a:	callq  38e80 <out_of_memory>
   3913f:	mov    %r13,%rsi
   39142:	mov    -0x8(%rbp),%r13
   39146:	test   %ebx,%ebx
   39148:	js     3914f <alloc_large+0x8f>
   3914a:	cmp    $0x1,%ebx
   3914d:	jle    39174 <alloc_large+0xb4>
   3914f:	mov    (%r14),%rax
   39152:	movl   $0xe,0x28(%rax)
   39159:	mov    (%r14),%rax
   3915c:	mov    %ebx,0x2c(%rax)
   3915f:	mov    (%r14),%rax
   39162:	mov    (%rax),%rax
   39165:	mov    %rsi,%r13
   39168:	mov    %r14,%rdi
   3916b:	callq  *%rax
   3916d:	mov    %r13,%rsi
   39170:	mov    -0x8(%rbp),%r13
   39174:	mov    %r14,%rdi
   39177:	callq  40a0 <jpeg_get_large@plt>
   3917c:	test   %rax,%rax
   3917f:	jne    39194 <alloc_large+0xd4>
   39181:	mov    %r14,%rdi
   39184:	mov    %rax,%r14
   39187:	mov    $0x4,%esi
   3918c:	callq  38e80 <out_of_memory>
   39191:	mov    %r14,%rax
   39194:	mov    0x98(%r12),%rcx
   3919c:	lea    0x27(%r15,%rcx,1),%rcx
   391a1:	mov    %rcx,0x98(%r12)
   391a9:	movslq %ebx,%rdx
   391ac:	mov    0x78(%r12,%rdx,8),%rcx
   391b1:	mov    %rcx,(%rax)
   391b4:	mov    %r15,0x8(%rax)
   391b8:	movq   $0x0,0x10(%rax)
   391c0:	mov    %rax,0x78(%r12,%rdx,8)
   391c5:	lea    0x18(%rax),%rcx
   391c9:	mov    %rcx,%rdx
   391cc:	and    $0xf,%rdx
   391d0:	test   %rdx,%rdx
   391d3:	jne    391ed <alloc_large+0x12d>
   391d5:	mov    %rcx,%rax
   391d8:	mov    %r13,%rbx
   391db:	mov    -0x28(%rbp),%r15
   391df:	mov    -0x20(%rbp),%r14
   391e3:	mov    -0x18(%rbp),%r13
   391e7:	mov    -0x10(%rbp),%r12
   391eb:	leaveq 
   391ec:	retq   
   391ed:	and    $0xf,%rcx
   391f1:	mov    $0x10,%edx
   391f6:	sub    %rcx,%rdx
   391f9:	lea    0x18(%rax,%rdx,1),%rax
   391fe:	mov    %r13,%rbx
   39201:	mov    -0x28(%rbp),%r15
   39205:	mov    -0x20(%rbp),%r14
   39209:	mov    -0x18(%rbp),%r13
   3920d:	mov    -0x10(%rbp),%r12
   39211:	leaveq 
   39212:	retq   
   39213:	data16 nopw %cs:0x0(%rax,%rax,1)
   3921e:	xchg   %ax,%ax

0000000000039220 <alloc_sarray>:
   39220:	push   %rbp
   39221:	mov    %rsp,%rbp
   39224:	sub    $0x50,%rsp
   39228:	mov    %rbx,-0x28(%rbp)
   3922c:	mov    %r12,-0x30(%rbp)
   39230:	mov    %r13,-0x38(%rbp)
   39234:	mov    %r14,-0x40(%rbp)
   39238:	mov    %r15,-0x48(%rbp)
   3923c:	mov    %rsi,-0x10(%rbp)
   39240:	mov    %rdi,-0x8(%rbp)
   39244:	mov    0x8(%rdi),%r15
   39248:	cmp    $0x3b9aca00,%edx
   3924e:	ja     3925b <alloc_sarray+0x3b>
   39250:	mov    %rsi,%rbx
   39253:	mov    %rcx,%r13
   39256:	mov    %rdi,%r14
   39259:	jmp    39274 <alloc_sarray+0x54>
   3925b:	mov    %rsi,%rbx
   3925e:	mov    %rdx,%r12
   39261:	mov    %rcx,%r13
   39264:	mov    $0x9,%esi
   39269:	mov    %rdi,%r14
   3926c:	callq  38e80 <out_of_memory>
   39271:	mov    %r12,%rdx
   39274:	mov    %edx,%edi
   39276:	mov    $0x20,%esi
   3927b:	callq  38e60 <round_up_pow2>
   39280:	mov    %rax,%rcx
   39283:	mov    %ecx,%r8d
   39286:	mov    %r8,-0x18(%rbp)
   3928a:	mov    $0x3b9ac9e8,%eax
   3928f:	xor    %edx,%edx
   39291:	div    %r8
   39294:	test   %rax,%rax
   39297:	jle    3929e <alloc_sarray+0x7e>
   39299:	mov    %rax,%r12
   3929c:	jmp    392c2 <alloc_sarray+0xa2>
   3929e:	mov    (%r14),%rdx
   392a1:	movl   $0x46,0x28(%rdx)
   392a8:	mov    (%r14),%rdx
   392ab:	mov    (%rdx),%rdx
   392ae:	mov    %r14,%rdi
   392b1:	mov    %rcx,-0x20(%rbp)
   392b5:	mov    %rax,%r12
   392b8:	callq  *%rdx
   392ba:	mov    -0x18(%rbp),%r8
   392be:	mov    -0x20(%rbp),%rcx
   392c2:	mov    %r13d,%eax
   392c5:	cmp    %rax,%r12
   392c8:	jl     392cd <alloc_sarray+0xad>
   392ca:	mov    %r13,%r12
   392cd:	mov    %r12d,0xa0(%r15)
   392d4:	mov    %r13d,%edx
   392d7:	shl    $0x3,%rdx
   392db:	mov    %rbx,%rsi
   392de:	mov    %rcx,%rbx
   392e1:	mov    %r8,%r15
   392e4:	mov    %r14,%rdi
   392e7:	callq  38ea0 <alloc_small>
   392ec:	mov    %ebx,%ecx
   392ee:	mov    %r15,%rdx
   392f1:	mov    %rcx,%r15
   392f4:	mov    %r14,%rdi
   392f7:	mov    %rax,%r14
   392fa:	xor    %ebx,%ebx
   392fc:	mov    -0x10(%rbp),%rsi
   39300:	jmp    39321 <alloc_sarray+0x101>
   39302:	mov    %ebx,%ecx
   39304:	mov    %rax,(%r14,%rcx,8)
   39308:	add    %r15,%rax
   3930b:	add    $0x1,%ebx
   3930e:	add    $0xffffffff,%edx
   39311:	test   %edx,%edx
   39313:	jne    39302 <alloc_sarray+0xe2>
   39315:	mov    -0x8(%rbp),%rdi
   39319:	mov    -0x10(%rbp),%rsi
   3931d:	mov    -0x18(%rbp),%rdx
   39321:	cmp    %r13d,%ebx
   39324:	jb     3933f <alloc_sarray+0x11f>
   39326:	mov    %r14,%rax
   39329:	mov    -0x48(%rbp),%r15
   3932d:	mov    -0x40(%rbp),%r14
   39331:	mov    -0x38(%rbp),%r13
   39335:	mov    -0x30(%rbp),%r12
   39339:	mov    -0x28(%rbp),%rbx
   3933d:	leaveq 
   3933e:	retq   
   3933f:	mov    %r13,%rax
   39342:	sub    %ebx,%eax
   39344:	cmp    %r12d,%eax
   39347:	ja     3934c <alloc_sarray+0x12c>
   39349:	mov    %rax,%r12
   3934c:	mov    %r12d,%eax
   3934f:	imul   %rax,%rdx
   39353:	callq  390c0 <alloc_large>
   39358:	mov    %r12,%rdx
   3935b:	jmp    39311 <alloc_sarray+0xf1>
   3935d:	nopl   (%rax)

0000000000039360 <alloc_barray>:
   39360:	push   %rbp
   39361:	mov    %rsp,%rbp
   39364:	sub    $0x50,%rsp
   39368:	mov    %r15,-0x48(%rbp)
   3936c:	mov    %rbx,-0x28(%rbp)
   39370:	mov    %r12,-0x30(%rbp)
   39374:	mov    %r13,-0x38(%rbp)
   39378:	mov    %r14,-0x40(%rbp)
   3937c:	mov    %rdx,%rbx
   3937f:	mov    %rcx,%r13
   39382:	mov    %rdi,%r14
   39385:	mov    %rsi,-0x10(%rbp)
   39389:	mov    %r14,-0x8(%rbp)
   3938d:	mov    0x8(%r14),%r8
   39391:	mov    $0x3b9ac9e8,%eax
   39396:	mov    %ebx,%r15d
   39399:	mov    %r15,-0x18(%rbp)
   3939d:	mov    %r15,%r9
   393a0:	shl    $0x7,%r9
   393a4:	xor    %edx,%edx
   393a6:	div    %r9
   393a9:	test   %rax,%rax
   393ac:	jle    393b3 <alloc_barray+0x53>
   393ae:	mov    %rax,%r12
   393b1:	jmp    393e3 <alloc_barray+0x83>
   393b3:	mov    (%r14),%rcx
   393b6:	movl   $0x46,0x28(%rcx)
   393bd:	mov    (%r14),%rcx
   393c0:	mov    (%rcx),%rcx
   393c3:	mov    %r14,%rdi
   393c6:	mov    %rbx,-0x20(%rbp)
   393ca:	mov    %rsi,%rbx
   393cd:	mov    %rax,%r12
   393d0:	mov    %r8,%r15
   393d3:	callq  *%rcx
   393d5:	mov    %rbx,%rsi
   393d8:	mov    %r15,%r8
   393db:	mov    -0x18(%rbp),%r15
   393df:	mov    -0x20(%rbp),%rbx
   393e3:	mov    %r13d,%eax
   393e6:	cmp    %rax,%r12
   393e9:	jl     393ee <alloc_barray+0x8e>
   393eb:	mov    %r13,%r12
   393ee:	mov    %r12d,0xa0(%r8)
   393f5:	mov    %r13d,%edx
   393f8:	shl    $0x3,%rdx
   393fc:	mov    %r14,%rdi
   393ff:	callq  38ea0 <alloc_small>
   39404:	mov    %ebx,%ecx
   39406:	shl    $0x7,%rcx
   3940a:	mov    %r15,%rdx
   3940d:	mov    %rax,%r15
   39410:	mov    %r14,%rdi
   39413:	mov    %rcx,%r14
   39416:	mov    -0x10(%rbp),%rsi
   3941a:	xor    %ebx,%ebx
   3941c:	jmp    3943d <alloc_barray+0xdd>
   3941e:	mov    %ebx,%ecx
   39420:	mov    %rax,(%r15,%rcx,8)
   39424:	add    %r14,%rax
   39427:	add    $0x1,%ebx
   3942a:	add    $0xffffffff,%edx
   3942d:	test   %edx,%edx
   3942f:	jne    3941e <alloc_barray+0xbe>
   39431:	mov    -0x8(%rbp),%rdi
   39435:	mov    -0x10(%rbp),%rsi
   39439:	mov    -0x18(%rbp),%rdx
   3943d:	cmp    %r13d,%ebx
   39440:	jb     3945b <alloc_barray+0xfb>
   39442:	mov    %r15,%rax
   39445:	mov    -0x40(%rbp),%r14
   39449:	mov    -0x38(%rbp),%r13
   3944d:	mov    -0x30(%rbp),%r12
   39451:	mov    -0x28(%rbp),%rbx
   39455:	mov    -0x48(%rbp),%r15
   39459:	leaveq 
   3945a:	retq   
   3945b:	mov    %r13,%rax
   3945e:	sub    %ebx,%eax
   39460:	cmp    %r12d,%eax
   39463:	ja     39468 <alloc_barray+0x108>
   39465:	mov    %rax,%r12
   39468:	mov    %r12d,%eax
   3946b:	imul   %rax,%rdx
   3946f:	shl    $0x7,%rdx
   39473:	callq  390c0 <alloc_large>
   39478:	mov    %r12,%rdx
   3947b:	jmp    3942d <alloc_barray+0xcd>
   3947d:	nopl   (%rax)

0000000000039480 <request_virt_sarray>:
   39480:	push   %rbp
   39481:	mov    %rsp,%rbp
   39484:	sub    $0x40,%rsp
   39488:	mov    %rbx,-0x18(%rbp)
   3948c:	mov    %r12,-0x20(%rbp)
   39490:	mov    %r13,-0x28(%rbp)
   39494:	mov    %r14,-0x30(%rbp)
   39498:	mov    %r15,-0x38(%rbp)
   3949c:	mov    0x8(%rdi),%r14
   394a0:	cmp    $0x1,%esi
   394a3:	jne    394b0 <request_virt_sarray+0x30>
   394a5:	mov    %r8,%rbx
   394a8:	mov    %rcx,%r12
   394ab:	mov    %r9,%r13
   394ae:	jmp    394f3 <request_virt_sarray+0x73>
   394b0:	mov    (%rdi),%rax
   394b3:	movl   $0xe,0x28(%rax)
   394ba:	mov    (%rdi),%rax
   394bd:	mov    %esi,0x2c(%rax)
   394c0:	mov    (%rdi),%rax
   394c3:	mov    (%rax),%rax
   394c6:	mov    %rdi,%rbx
   394c9:	mov    %rdx,-0x10(%rbp)
   394cd:	mov    %r14,-0x8(%rbp)
   394d1:	mov    %rcx,%r12
   394d4:	mov    %r9,%r13
   394d7:	mov    %rdi,%r14
   394da:	mov    %rbx,%rdi
   394dd:	mov    %r8,%rbx
   394e0:	mov    %rsi,%r15
   394e3:	callq  *%rax
   394e5:	mov    %r15,%rsi
   394e8:	mov    %r14,%rdi
   394eb:	mov    -0x8(%rbp),%r14
   394ef:	mov    -0x10(%rbp),%rdx
   394f3:	mov    %rdx,%r15
   394f6:	mov    $0x98,%edx
   394fb:	callq  38ea0 <alloc_small>
   39500:	movq   $0x0,(%rax)
   39507:	mov    %ebx,0x8(%rax)
   3950a:	mov    %r12d,0xc(%rax)
   3950e:	mov    %r13d,0x10(%rax)
   39512:	mov    %r15d,0x24(%rax)
   39516:	movl   $0x0,0x2c(%rax)
   3951d:	mov    0x88(%r14),%rcx
   39524:	mov    %rcx,0x30(%rax)
   39528:	mov    %rax,0x88(%r14)
   3952f:	mov    -0x38(%rbp),%r15
   39533:	mov    -0x30(%rbp),%r14
   39537:	mov    -0x28(%rbp),%r13
   3953b:	mov    -0x20(%rbp),%r12
   3953f:	mov    -0x18(%rbp),%rbx
   39543:	leaveq 
   39544:	retq   
   39545:	data16 nopw %cs:0x0(%rax,%rax,1)

0000000000039550 <request_virt_barray>:
   39550:	push   %rbp
   39551:	mov    %rsp,%rbp
   39554:	sub    $0x40,%rsp
   39558:	mov    %rbx,-0x18(%rbp)
   3955c:	mov    %r12,-0x20(%rbp)
   39560:	mov    %r13,-0x28(%rbp)
   39564:	mov    %r14,-0x30(%rbp)
   39568:	mov    %r15,-0x38(%rbp)
   3956c:	mov    0x8(%rdi),%r14
   39570:	cmp    $0x1,%esi
   39573:	jne    39580 <request_virt_barray+0x30>
   39575:	mov    %r8,%rbx
   39578:	mov    %rcx,%r12
   3957b:	mov    %r9,%r13
   3957e:	jmp    395c3 <request_virt_barray+0x73>
   39580:	mov    (%rdi),%rax
   39583:	movl   $0xe,0x28(%rax)
   3958a:	mov    (%rdi),%rax
   3958d:	mov    %esi,0x2c(%rax)
   39590:	mov    (%rdi),%rax
   39593:	mov    (%rax),%rax
   39596:	mov    %rdi,%rbx
   39599:	mov    %rdx,-0x10(%rbp)
   3959d:	mov    %r14,-0x8(%rbp)
   395a1:	mov    %rcx,%r12
   395a4:	mov    %r9,%r13
   395a7:	mov    %rdi,%r14
   395aa:	mov    %rbx,%rdi
   395ad:	mov    %r8,%rbx
   395b0:	mov    %rsi,%r15
   395b3:	callq  *%rax
   395b5:	mov    %r15,%rsi
   395b8:	mov    %r14,%rdi
   395bb:	mov    -0x8(%rbp),%r14
   395bf:	mov    -0x10(%rbp),%rdx
   395c3:	mov    %rdx,%r15
   395c6:	mov    $0x98,%edx
   395cb:	callq  38ea0 <alloc_small>
   395d0:	movq   $0x0,(%rax)
   395d7:	mov    %ebx,0x8(%rax)
   395da:	mov    %r12d,0xc(%rax)
   395de:	mov    %r13d,0x10(%rax)
   395e2:	mov    %r15d,0x24(%rax)
   395e6:	movl   $0x0,0x2c(%rax)
   395ed:	mov    0x90(%r14),%rcx
   395f4:	mov    %rcx,0x30(%rax)
   395f8:	mov    %rax,0x90(%r14)
   395ff:	mov    -0x38(%rbp),%r15
   39603:	mov    -0x30(%rbp),%r14
   39607:	mov    -0x28(%rbp),%r13
   3960b:	mov    -0x20(%rbp),%r12
   3960f:	mov    -0x18(%rbp),%rbx
   39613:	leaveq 
   39614:	retq   
   39615:	data16 nopw %cs:0x0(%rax,%rax,1)

0000000000039620 <realize_virt_arrays>:
   39620:	push   %rbp
   39621:	mov    %rsp,%rbp
   39624:	sub    $0x40,%rsp
   39628:	mov    %rdi,-0x40(%rbp)
   3962c:	mov    %rbx,-0x8(%rbp)
   39630:	mov    %r12,-0x10(%rbp)
   39634:	mov    %r13,-0x18(%rbp)
   39638:	mov    %r14,-0x20(%rbp)
   3963c:	mov    %r15,-0x28(%rbp)
   39640:	mov    0x8(%rdi),%rax
   39644:	mov    %rax,-0x30(%rbp)
   39648:	mov    0x88(%rax),%rax
   3964f:	mov    %rdi,%rbx
   39652:	mov    $0xa,%esi
   39657:	xor    %r12d,%r12d
   3965a:	mov    %r12,%r13
   3965d:	jmp    39689 <realize_virt_arrays+0x69>
   3965f:	mov    %rax,-0x38(%rbp)
   39663:	mov    %rbx,%rdi
   39666:	mov    %rdx,%rbx
   39669:	callq  38e80 <out_of_memory>
   3966e:	mov    $0xa,%esi
   39673:	mov    -0x38(%rbp),%rax
   39677:	imul   %rbx,%r14
   3967b:	add    %r14,%r13
   3967e:	add    %r15,%r12
   39681:	mov    0x30(%rax),%rax
   39685:	mov    -0x40(%rbp),%rbx
   39689:	test   %rax,%rax
   3968c:	jne    396a3 <realize_virt_arrays+0x83>
   3968e:	mov    -0x30(%rbp),%rax
   39692:	mov    0x90(%rax),%rax
   39699:	mov    $0xb,%esi
   3969e:	jmpq   39725 <realize_virt_arrays+0x105>
   396a3:	mov    (%rax),%rcx
   396a6:	test   %rcx,%rcx
   396a9:	jne    39681 <realize_virt_arrays+0x61>
   396ab:	mov    0x10(%rax),%edx
   396ae:	mov    0xc(%rax),%r14d
   396b2:	mov    0x8(%rax),%ecx
   396b5:	mov    %r14,%r15
   396b8:	imul   %rcx,%r15
   396bc:	mov    %r12,%rcx
   396bf:	not    %rcx
   396c2:	cmp    %rcx,%r15
   396c5:	ja     3965f <realize_virt_arrays+0x3f>
   396c7:	mov    %rdx,%rbx
   396ca:	jmp    39677 <realize_virt_arrays+0x57>
   396cc:	mov    (%rax),%rcx
   396cf:	test   %rcx,%rcx
   396d2:	jne    39721 <realize_virt_arrays+0x101>
   396d4:	mov    0x10(%rax),%ecx
   396d7:	mov    0xc(%rax),%r14d
   396db:	mov    0x8(%rax),%edx
   396de:	mov    %r14,%r15
   396e1:	imul   %rdx,%r15
   396e5:	shl    $0x7,%r15
   396e9:	mov    %r12,%rdx
   396ec:	not    %rdx
   396ef:	cmp    %r15,%rdx
   396f2:	jae    39713 <realize_virt_arrays+0xf3>
   396f4:	mov    %rax,-0x38(%rbp)
   396f8:	mov    %rbx,%rdi
   396fb:	mov    %rcx,%rbx
   396fe:	callq  38e80 <out_of_memory>
   39703:	mov    %rbx,%rcx
   39706:	mov    $0xb,%esi
   3970b:	mov    -0x38(%rbp),%rax
   3970f:	mov    -0x40(%rbp),%rbx
   39713:	imul   %rcx,%r14
   39717:	shl    $0x7,%r14
   3971b:	add    %r14,%r13
   3971e:	add    %r15,%r12
   39721:	mov    0x30(%rax),%rax
   39725:	test   %rax,%rax
   39728:	jne    396cc <realize_virt_arrays+0xac>
   3972a:	test   %r13,%r13
   3972d:	jne    39745 <realize_virt_arrays+0x125>
   3972f:	mov    -0x28(%rbp),%r15
   39733:	mov    -0x20(%rbp),%r14
   39737:	mov    -0x18(%rbp),%r13
   3973b:	mov    -0x10(%rbp),%r12
   3973f:	mov    -0x8(%rbp),%rbx
   39743:	leaveq 
   39744:	retq   
   39745:	mov    $0x1,%r15d
   3974b:	mov    -0x30(%rbp),%r14
   3974f:	mov    0x98(%r14),%rcx
   39756:	mov    %rbx,%rdi
   39759:	mov    %r13,%rsi
   3975c:	mov    %r12,%rdx
   3975f:	callq  4280 <jpeg_mem_available@plt>
   39764:	cmp    %rax,%r12
   39767:	ja     39778 <realize_virt_arrays+0x158>
   39769:	mov    $0x3b9aca00,%r12d
   3976f:	mov    0x88(%r14),%r13
   39776:	jmp    397cd <realize_virt_arrays+0x1ad>
   39778:	xor    %edx,%edx
   3977a:	div    %r13
   3977d:	test   %rax,%rax
   39780:	je     397de <realize_virt_arrays+0x1be>
   39782:	mov    %rax,%r12
   39785:	jmp    3976f <realize_virt_arrays+0x14f>
   39787:	mov    0x8(%r13),%eax
   3978b:	mov    %eax,0x14(%r13)
   3978f:	mov    0xc(%r13),%edx
   39793:	mov    0x14(%r13),%ecx
   39797:	mov    %rbx,%rdi
   3979a:	mov    %r15,%rsi
   3979d:	callq  39220 <alloc_sarray>
   397a2:	mov    %rax,0x0(%r13)
   397a6:	mov    0xa0(%r14),%eax
   397ad:	mov    %eax,0x18(%r13)
   397b1:	movl   $0x0,0x1c(%r13)
   397b9:	movl   $0x0,0x20(%r13)
   397c1:	movl   $0x0,0x28(%r13)
   397c9:	mov    0x30(%r13),%r13
   397cd:	test   %r13,%r13
   397d0:	jne    397e3 <realize_virt_arrays+0x1c3>
   397d2:	mov    0x90(%r14),%r13
   397d9:	jmpq   3987d <realize_virt_arrays+0x25d>
   397de:	mov    %r15,%r12
   397e1:	jmp    3976f <realize_virt_arrays+0x14f>
   397e3:	mov    0x0(%r13),%rax
   397e7:	test   %rax,%rax
   397ea:	jne    397c9 <realize_virt_arrays+0x1a9>
   397ec:	mov    0x8(%r13),%eax
   397f0:	add    $0xffffffffffffffff,%rax
   397f4:	mov    0x10(%r13),%ecx
   397f8:	cqto   
   397fa:	idiv   %rcx
   397fd:	add    $0x1,%rax
   39801:	cmp    %r12,%rax
   39804:	jbe    39787 <realize_virt_arrays+0x167>
   39806:	mov    %r12,%rax
   39809:	imul   0x10(%r13),%eax
   3980e:	mov    %eax,0x14(%r13)
   39812:	mov    0xc(%r13),%edx
   39816:	mov    0x8(%r13),%eax
   3981a:	imul   %rax,%rdx
   3981e:	lea    0x38(%r13),%rsi
   39822:	mov    %rbx,%rdi
   39825:	callq  43a0 <jpeg_open_backing_store@plt>
   3982a:	movl   $0x1,0x2c(%r13)
   39832:	jmpq   3978f <realize_virt_arrays+0x16f>
   39837:	mov    0x8(%r13),%eax
   3983b:	mov    %eax,0x14(%r13)
   3983f:	mov    0xc(%r13),%edx
   39843:	mov    0x14(%r13),%ecx
   39847:	mov    %rbx,%rdi
   3984a:	mov    %r15,%rsi
   3984d:	callq  39360 <alloc_barray>
   39852:	mov    %rax,0x0(%r13)
   39856:	mov    0xa0(%r14),%eax
   3985d:	mov    %eax,0x18(%r13)
   39861:	movl   $0x0,0x1c(%r13)
   39869:	movl   $0x0,0x20(%r13)
   39871:	movl   $0x0,0x28(%r13)
   39879:	mov    0x30(%r13),%r13
   3987d:	test   %r13,%r13
   39880:	jne    39898 <realize_virt_arrays+0x278>
   39882:	mov    -0x28(%rbp),%r15
   39886:	mov    -0x20(%rbp),%r14
   3988a:	mov    -0x18(%rbp),%r13
   3988e:	mov    -0x10(%rbp),%r12
   39892:	mov    -0x8(%rbp),%rbx
   39896:	leaveq 
   39897:	retq   
   39898:	mov    0x0(%r13),%rax
   3989c:	test   %rax,%rax
   3989f:	jne    39879 <realize_virt_arrays+0x259>
   398a1:	mov    0x8(%r13),%eax
   398a5:	add    $0xffffffffffffffff,%rax
   398a9:	mov    0x10(%r13),%ecx
   398ad:	cqto   
   398af:	idiv   %rcx
   398b2:	add    $0x1,%rax
   398b6:	cmp    %rax,%r12
   398b9:	jae    39837 <realize_virt_arrays+0x217>
   398bf:	mov    %r12,%rax
   398c2:	imul   0x10(%r13),%eax
   398c7:	mov    %eax,0x14(%r13)
   398cb:	mov    0xc(%r13),%edx
   398cf:	mov    0x8(%r13),%eax
   398d3:	imul   %rax,%rdx
   398d7:	shl    $0x7,%rdx
   398db:	lea    0x38(%r13),%rsi
   398df:	mov    %rbx,%rdi
   398e2:	callq  43a0 <jpeg_open_backing_store@plt>
   398e7:	movl   $0x1,0x2c(%r13)
   398ef:	jmpq   3983f <realize_virt_arrays+0x21f>
   398f4:	data16 nopw %cs:0x0(%rax,%rax,1)
   398ff:	nop

0000000000039900 <do_sarray_io>:
   39900:	push   %rbp
   39901:	mov    %rsp,%rbp
   39904:	sub    $0x40,%rsp
   39908:	mov    %rdx,-0x30(%rbp)
   3990c:	mov    %rdi,-0x38(%rbp)
   39910:	mov    %rbx,-0x8(%rbp)
   39914:	mov    %r12,-0x10(%rbp)
   39918:	mov    %r13,-0x18(%rbp)
   3991c:	mov    %r14,-0x20(%rbp)
   39920:	mov    %r15,-0x28(%rbp)
   39924:	mov    0xc(%rsi),%r15d
   39928:	mov    0x1c(%rsi),%eax
   3992b:	mov    %r15,%r13
   3992e:	imul   %rax,%r13
   39932:	mov    %rsi,%r14
   39935:	lea    0x38(%r14),%rsi
   39939:	mov    %rsi,-0x40(%rbp)
   3993d:	xor    %r12d,%r12d
   39940:	jmp    3996b <do_sarray_io+0x6b>
   39942:	mov    (%r14),%rax
   39945:	mov    (%rax,%r12,8),%rdx
   39949:	mov    0x40(%r14),%rax
   3994d:	mov    %r13,%rcx
   39950:	mov    %rbx,%r8
   39953:	callq  *%rax
   39955:	mov    0x18(%r14),%eax
   39959:	add    %rax,%r12
   3995c:	add    %rbx,%r13
   3995f:	mov    -0x38(%rbp),%rdi
   39963:	mov    -0x40(%rbp),%rsi
   39967:	mov    -0x30(%rbp),%rdx
   3996b:	mov    0x14(%r14),%eax
   3996f:	cmp    %r12,%rax
   39972:	jg     3998a <do_sarray_io+0x8a>
   39974:	mov    -0x28(%rbp),%r15
   39978:	mov    -0x20(%rbp),%r14
   3997c:	mov    -0x18(%rbp),%r13
   39980:	mov    -0x10(%rbp),%r12
   39984:	mov    -0x8(%rbp),%rbx
   39988:	leaveq 
   39989:	retq   
   3998a:	sub    %r12,%rax
   3998d:	mov    0x18(%r14),%ecx
   39991:	cmp    %rcx,%rax
   39994:	jg     39999 <do_sarray_io+0x99>
   39996:	mov    %rax,%rcx
   39999:	mov    0x1c(%r14),%eax
   3999d:	lea    (%rax,%r12,1),%r8
   399a1:	mov    0x20(%r14),%eax
   399a5:	sub    %r8,%rax
   399a8:	cmp    %rcx,%rax
   399ab:	jg     399b0 <do_sarray_io+0xb0>
   399ad:	mov    %rax,%rcx
   399b0:	mov    0x8(%r14),%ebx
   399b4:	sub    %r8,%rbx
   399b7:	cmp    %rcx,%rbx
   399ba:	jle    399bf <do_sarray_io+0xbf>
   399bc:	mov    %rcx,%rbx
   399bf:	test   %rbx,%rbx
   399c2:	jle    399e7 <do_sarray_io+0xe7>
   399c4:	imul   %r15,%rbx
   399c8:	test   %edx,%edx
   399ca:	jne    39942 <do_sarray_io+0x42>
   399d0:	mov    (%r14),%rax
   399d3:	mov    (%rax,%r12,8),%rdx
   399d7:	mov    (%rsi),%rax
   399da:	mov    %r13,%rcx
   399dd:	mov    %rbx,%r8
   399e0:	callq  *%rax
   399e2:	jmpq   39955 <do_sarray_io+0x55>
   399e7:	mov    -0x28(%rbp),%r15
   399eb:	mov    -0x20(%rbp),%r14
   399ef:	mov    -0x18(%rbp),%r13
   399f3:	mov    -0x10(%rbp),%r12
   399f7:	mov    -0x8(%rbp),%rbx
   399fb:	leaveq 
   399fc:	retq   
   399fd:	nopl   (%rax)

0000000000039a00 <do_barray_io>:
   39a00:	push   %rbp
   39a01:	mov    %rsp,%rbp
   39a04:	sub    $0x40,%rsp
   39a08:	mov    %rdx,-0x30(%rbp)
   39a0c:	mov    %rdi,-0x38(%rbp)
   39a10:	mov    %rbx,-0x8(%rbp)
   39a14:	mov    %r12,-0x10(%rbp)
   39a18:	mov    %r13,-0x18(%rbp)
   39a1c:	mov    %r14,-0x20(%rbp)
   39a20:	mov    %r15,-0x28(%rbp)
   39a24:	mov    0xc(%rsi),%r12d
   39a28:	mov    %r12,%r15
   39a2b:	shl    $0x7,%r15
   39a2f:	mov    0x1c(%rsi),%eax
   39a32:	imul   %rax,%r12
   39a36:	shl    $0x7,%r12
   39a3a:	mov    %rsi,%r14
   39a3d:	lea    0x38(%r14),%rsi
   39a41:	mov    %rsi,-0x40(%rbp)
   39a45:	xor    %r13d,%r13d
   39a48:	jmp    39a73 <do_barray_io+0x73>
   39a4a:	mov    (%r14),%rax
   39a4d:	mov    (%rax,%r13,8),%rdx
   39a51:	mov    0x40(%r14),%rax
   39a55:	mov    %r12,%rcx
   39a58:	mov    %rbx,%r8
   39a5b:	callq  *%rax
   39a5d:	mov    0x18(%r14),%eax
   39a61:	add    %rax,%r13
   39a64:	add    %rbx,%r12
   39a67:	mov    -0x38(%rbp),%rdi
   39a6b:	mov    -0x40(%rbp),%rsi
   39a6f:	mov    -0x30(%rbp),%rdx
   39a73:	mov    0x14(%r14),%eax
   39a77:	cmp    %r13,%rax
   39a7a:	jg     39a92 <do_barray_io+0x92>
   39a7c:	mov    -0x28(%rbp),%r15
   39a80:	mov    -0x20(%rbp),%r14
   39a84:	mov    -0x18(%rbp),%r13
   39a88:	mov    -0x10(%rbp),%r12
   39a8c:	mov    -0x8(%rbp),%rbx
   39a90:	leaveq 
   39a91:	retq   
   39a92:	sub    %r13,%rax
   39a95:	mov    0x18(%r14),%ecx
   39a99:	cmp    %rcx,%rax
   39a9c:	jg     39aa1 <do_barray_io+0xa1>
   39a9e:	mov    %rax,%rcx
   39aa1:	mov    0x1c(%r14),%eax
   39aa5:	lea    (%rax,%r13,1),%r8
   39aa9:	mov    0x20(%r14),%eax
   39aad:	sub    %r8,%rax
   39ab0:	cmp    %rcx,%rax
   39ab3:	jg     39ab8 <do_barray_io+0xb8>
   39ab5:	mov    %rax,%rcx
   39ab8:	mov    0x8(%r14),%ebx
   39abc:	sub    %r8,%rbx
   39abf:	cmp    %rcx,%rbx
   39ac2:	jle    39ac7 <do_barray_io+0xc7>
   39ac4:	mov    %rcx,%rbx
   39ac7:	test   %rbx,%rbx
   39aca:	jle    39aef <do_barray_io+0xef>
   39acc:	imul   %r15,%rbx
   39ad0:	test   %edx,%edx
   39ad2:	jne    39a4a <do_barray_io+0x4a>
   39ad8:	mov    (%r14),%rax
   39adb:	mov    (%rax,%r13,8),%rdx
   39adf:	mov    (%rsi),%rax
   39ae2:	mov    %r12,%rcx
   39ae5:	mov    %rbx,%r8
   39ae8:	callq  *%rax
   39aea:	jmpq   39a5d <do_barray_io+0x5d>
   39aef:	mov    -0x28(%rbp),%r15
   39af3:	mov    -0x20(%rbp),%r14
   39af7:	mov    -0x18(%rbp),%r13
   39afb:	mov    -0x10(%rbp),%r12
   39aff:	mov    -0x8(%rbp),%rbx
   39b03:	leaveq 
   39b04:	retq   
   39b05:	data16 nopw %cs:0x0(%rax,%rax,1)

0000000000039b10 <access_virt_sarray>:
   39b10:	push   %rbp
   39b11:	mov    %rsp,%rbp
   39b14:	sub    $0x30,%rsp
   39b18:	mov    %rbx,-0x8(%rbp)
   39b1c:	mov    %r12,-0x10(%rbp)
   39b20:	mov    %r13,-0x18(%rbp)
   39b24:	mov    %r14,-0x20(%rbp)
   39b28:	mov    %r15,-0x28(%rbp)
   39b2c:	lea    (%rcx,%rdx,1),%r9d
   39b30:	mov    0x8(%rsi),%eax
   39b33:	cmp    %r9d,%eax
   39b36:	jb     39b65 <access_virt_sarray+0x55>
   39b38:	cmp    0x10(%rsi),%ecx
   39b3b:	ja     39b65 <access_virt_sarray+0x55>
   39b3d:	mov    (%rsi),%rax
   39b40:	test   %rax,%rax
   39b43:	je     39b65 <access_virt_sarray+0x55>
   39b45:	mov    %r15,%rax
   39b48:	mov    %rdi,%r15
   39b4b:	mov    %r13,%rcx
   39b4e:	mov    %r9,%r13
   39b51:	mov    %r12,%r9
   39b54:	mov    %rsi,%r12
   39b57:	mov    %rbx,%r10
   39b5a:	mov    %rdx,%rbx
   39b5d:	mov    %r14,%r11
   39b60:	mov    %r8,%r14
   39b63:	jmp    39b9a <access_virt_sarray+0x8a>
   39b65:	mov    (%rdi),%rax
   39b68:	movl   $0x16,0x28(%rax)
   39b6f:	mov    (%rdi),%rax
   39b72:	mov    (%rax),%rax
   39b75:	mov    %rdx,%rbx
   39b78:	mov    %rsi,%r12
   39b7b:	mov    %r9,%r13
   39b7e:	mov    %r8,%r14
   39b81:	mov    %rdi,%r15
   39b84:	callq  *%rax
   39b86:	mov    -0x28(%rbp),%rax
   39b8a:	mov    -0x20(%rbp),%r11
   39b8e:	mov    -0x18(%rbp),%rcx
   39b92:	mov    -0x10(%rbp),%r9
   39b96:	mov    -0x8(%rbp),%r10
   39b9a:	mov    0x1c(%r12),%edx
   39b9f:	cmp    %edx,%ebx
   39ba1:	jb     39bad <access_virt_sarray+0x9d>
   39ba3:	add    0x14(%r12),%edx
   39ba8:	cmp    %edx,%r13d
   39bab:	jbe    39c1d <access_virt_sarray+0x10d>
   39bad:	movslq 0x2c(%r12),%rax
   39bb2:	test   %eax,%eax
   39bb4:	jne    39bcb <access_virt_sarray+0xbb>
   39bb6:	mov    (%r15),%rax
   39bb9:	movl   $0x45,0x28(%rax)
   39bc0:	mov    (%r15),%rax
   39bc3:	mov    (%rax),%rax
   39bc6:	mov    %r15,%rdi
   39bc9:	callq  *%rax
   39bcb:	movslq 0x28(%r12),%rax
   39bd0:	test   %eax,%eax
   39bd2:	je     39bed <access_virt_sarray+0xdd>
   39bd4:	mov    $0x1,%edx
   39bd9:	mov    %r15,%rdi
   39bdc:	mov    %r12,%rsi
   39bdf:	callq  39900 <do_sarray_io>
   39be4:	movl   $0x0,0x28(%r12)
   39bed:	xor    %edx,%edx
   39bef:	cmp    0x1c(%r12),%ebx
   39bf4:	jbe    39c5a <access_virt_sarray+0x14a>
   39bf6:	mov    %rbx,%rax
   39bf9:	mov    %eax,0x1c(%r12)
   39bfe:	mov    %r15,%rdi
   39c01:	mov    %r12,%rsi
   39c04:	callq  39900 <do_sarray_io>
   39c09:	mov    -0x28(%rbp),%rax
   39c0d:	mov    -0x20(%rbp),%r11
   39c11:	mov    -0x18(%rbp),%rcx
   39c15:	mov    -0x10(%rbp),%r9
   39c19:	mov    -0x8(%rbp),%r10
   39c1d:	mov    0x20(%r12),%edx
   39c22:	cmp    %edx,%r13d
   39c25:	ja     39c6f <access_virt_sarray+0x15f>
   39c27:	test   %r14d,%r14d
   39c2a:	je     39c35 <access_virt_sarray+0x125>
   39c2c:	movl   $0x1,0x28(%r12)
   39c35:	mov    0x1c(%r12),%edx
   39c3a:	sub    %edx,%ebx
   39c3c:	mov    %ebx,%edx
   39c3e:	shl    $0x3,%rdx
   39c42:	add    (%r12),%rdx
   39c46:	mov    %r10,%rbx
   39c49:	mov    %r9,%r12
   39c4c:	mov    %rcx,%r13
   39c4f:	mov    %r11,%r14
   39c52:	mov    %rax,%r15
   39c55:	mov    %rdx,%rax
   39c58:	leaveq 
   39c59:	retq   
   39c5a:	mov    %r13d,%eax
   39c5d:	mov    0x14(%r12),%ecx
   39c62:	sub    %rcx,%rax
   39c65:	test   %rax,%rax
   39c68:	jns    39bf9 <access_virt_sarray+0xe9>
   39c6a:	mov    %rdx,%rax
   39c6d:	jmp    39bf9 <access_virt_sarray+0xe9>
   39c6f:	cmp    %edx,%ebx
   39c71:	ja     39cbd <access_virt_sarray+0x1ad>
   39c73:	test   %r14d,%r14d
   39c76:	je     39c7d <access_virt_sarray+0x16d>
   39c78:	mov    %r13d,0x20(%r12)
   39c7d:	movslq 0x24(%r12),%rsi
   39c82:	test   %esi,%esi
   39c84:	jne    39cc7 <access_virt_sarray+0x1b7>
   39c86:	test   %r14d,%r14d
   39c89:	jne    39c27 <access_virt_sarray+0x117>
   39c8b:	mov    (%r15),%rax
   39c8e:	movl   $0x16,0x28(%rax)
   39c95:	mov    (%r15),%rax
   39c98:	mov    (%rax),%rax
   39c9b:	mov    %r15,%rdi
   39c9e:	mov    %r10,%r15
   39ca1:	mov    %r9,%r13
   39ca4:	callq  *%rax
   39ca6:	mov    %r13,%r9
   39ca9:	mov    %r15,%r10
   39cac:	mov    -0x28(%rbp),%rax
   39cb0:	mov    -0x20(%rbp),%r11
   39cb4:	mov    -0x18(%rbp),%rcx
   39cb8:	jmpq   39c27 <access_virt_sarray+0x117>
   39cbd:	test   %r14d,%r14d
   39cc0:	jne    39ce3 <access_virt_sarray+0x1d3>
   39cc2:	mov    %rbx,%rdx
   39cc5:	jmp    39c73 <access_virt_sarray+0x163>
   39cc7:	mov    0xc(%r12),%ecx
   39ccc:	mov    0x1c(%r12),%eax
   39cd1:	sub    %eax,%r13d
   39cd4:	mov    %rdx,%r15
   39cd7:	sub    %eax,%r15d
   39cda:	mov    %r14,-0x30(%rbp)
   39cde:	mov    %rcx,%r14
   39ce1:	jmp    39d2b <access_virt_sarray+0x21b>
   39ce3:	mov    (%r15),%rax
   39ce6:	movl   $0x16,0x28(%rax)
   39ced:	mov    (%r15),%rax
   39cf0:	mov    (%rax),%rax
   39cf3:	mov    %r15,%rdi
   39cf6:	callq  *%rax
   39cf8:	mov    -0x28(%rbp),%rax
   39cfc:	mov    -0x20(%rbp),%r11
   39d00:	mov    -0x18(%rbp),%rcx
   39d04:	mov    -0x10(%rbp),%r9
   39d08:	mov    -0x8(%rbp),%r10
   39d0c:	mov    %rbx,%rdx
   39d0f:	jmpq   39c73 <access_virt_sarray+0x163>
   39d14:	mov    (%r12),%rcx
   39d18:	mov    %r15d,%eax
   39d1b:	mov    (%rcx,%rax,8),%rdi
   39d1f:	mov    %r14,%rsi
   39d22:	callq  44d0 <jzero_far@plt>
   39d27:	add    $0x1,%r15d
   39d2b:	cmp    %r13d,%r15d
   39d2e:	jb     39d14 <access_virt_sarray+0x204>
   39d30:	mov    -0x30(%rbp),%r14
   39d34:	mov    -0x28(%rbp),%rax
   39d38:	mov    -0x20(%rbp),%r11
   39d3c:	mov    -0x18(%rbp),%rcx
   39d40:	mov    -0x10(%rbp),%r9
   39d44:	mov    -0x8(%rbp),%r10
   39d48:	jmpq   39c27 <access_virt_sarray+0x117>
   39d4d:	nopl   (%rax)

0000000000039d50 <access_virt_barray>:
   39d50:	push   %rbp
   39d51:	mov    %rsp,%rbp
   39d54:	sub    $0x30,%rsp
   39d58:	mov    %rbx,-0x8(%rbp)
   39d5c:	mov    %r12,-0x10(%rbp)
   39d60:	mov    %r13,-0x18(%rbp)
   39d64:	mov    %r14,-0x20(%rbp)
   39d68:	mov    %r15,-0x28(%rbp)
   39d6c:	lea    (%rcx,%rdx,1),%r9d
   39d70:	mov    0x8(%rsi),%eax
   39d73:	cmp    %r9d,%eax
   39d76:	jb     39da5 <access_virt_barray+0x55>
   39d78:	cmp    0x10(%rsi),%ecx
   39d7b:	ja     39da5 <access_virt_barray+0x55>
   39d7d:	mov    (%rsi),%rax
   39d80:	test   %rax,%rax
   39d83:	je     39da5 <access_virt_barray+0x55>
   39d85:	mov    %r15,%rax
   39d88:	mov    %rdi,%r15
   39d8b:	mov    %r13,%rcx
   39d8e:	mov    %r9,%r13
   39d91:	mov    %r12,%r9
   39d94:	mov    %rsi,%r12
   39d97:	mov    %rbx,%r10
   39d9a:	mov    %rdx,%rbx
   39d9d:	mov    %r14,%r11
   39da0:	mov    %r8,%r14
   39da3:	jmp    39dda <access_virt_barray+0x8a>
   39da5:	mov    (%rdi),%rax
   39da8:	movl   $0x16,0x28(%rax)
   39daf:	mov    (%rdi),%rax
   39db2:	mov    (%rax),%rax
   39db5:	mov    %rdx,%rbx
   39db8:	mov    %rsi,%r12
   39dbb:	mov    %r9,%r13
   39dbe:	mov    %r8,%r14
   39dc1:	mov    %rdi,%r15
   39dc4:	callq  *%rax
   39dc6:	mov    -0x28(%rbp),%rax
   39dca:	mov    -0x20(%rbp),%r11
   39dce:	mov    -0x18(%rbp),%rcx
   39dd2:	mov    -0x10(%rbp),%r9
   39dd6:	mov    -0x8(%rbp),%r10
   39dda:	mov    0x1c(%r12),%edx
   39ddf:	cmp    %edx,%ebx
   39de1:	jb     39ded <access_virt_barray+0x9d>
   39de3:	add    0x14(%r12),%edx
   39de8:	cmp    %edx,%r13d
   39deb:	jbe    39e5d <access_virt_barray+0x10d>
   39ded:	movslq 0x2c(%r12),%rax
   39df2:	test   %eax,%eax
   39df4:	jne    39e0b <access_virt_barray+0xbb>
   39df6:	mov    (%r15),%rax
   39df9:	movl   $0x45,0x28(%rax)
   39e00:	mov    (%r15),%rax
   39e03:	mov    (%rax),%rax
   39e06:	mov    %r15,%rdi
   39e09:	callq  *%rax
   39e0b:	movslq 0x28(%r12),%rax
   39e10:	test   %eax,%eax
   39e12:	je     39e2d <access_virt_barray+0xdd>
   39e14:	mov    $0x1,%edx
   39e19:	mov    %r15,%rdi
   39e1c:	mov    %r12,%rsi
   39e1f:	callq  39a00 <do_barray_io>
   39e24:	movl   $0x0,0x28(%r12)
   39e2d:	xor    %edx,%edx
   39e2f:	cmp    0x1c(%r12),%ebx
   39e34:	jbe    39e9a <access_virt_barray+0x14a>
   39e36:	mov    %rbx,%rax
   39e39:	mov    %eax,0x1c(%r12)
   39e3e:	mov    %r15,%rdi
   39e41:	mov    %r12,%rsi
   39e44:	callq  39a00 <do_barray_io>
   39e49:	mov    -0x28(%rbp),%rax
   39e4d:	mov    -0x20(%rbp),%r11
   39e51:	mov    -0x18(%rbp),%rcx
   39e55:	mov    -0x10(%rbp),%r9
   39e59:	mov    -0x8(%rbp),%r10
   39e5d:	mov    0x20(%r12),%edx
   39e62:	cmp    %edx,%r13d
   39e65:	ja     39eaf <access_virt_barray+0x15f>
   39e67:	test   %r14d,%r14d
   39e6a:	je     39e75 <access_virt_barray+0x125>
   39e6c:	movl   $0x1,0x28(%r12)
   39e75:	mov    0x1c(%r12),%edx
   39e7a:	sub    %edx,%ebx
   39e7c:	mov    %ebx,%edx
   39e7e:	shl    $0x3,%rdx
   39e82:	add    (%r12),%rdx
   39e86:	mov    %r10,%rbx
   39e89:	mov    %r9,%r12
   39e8c:	mov    %rcx,%r13
   39e8f:	mov    %r11,%r14
   39e92:	mov    %rax,%r15
   39e95:	mov    %rdx,%rax
   39e98:	leaveq 
   39e99:	retq   
   39e9a:	mov    %r13d,%eax
   39e9d:	mov    0x14(%r12),%ecx
   39ea2:	sub    %rcx,%rax
   39ea5:	test   %rax,%rax
   39ea8:	jns    39e39 <access_virt_barray+0xe9>
   39eaa:	mov    %rdx,%rax
   39ead:	jmp    39e39 <access_virt_barray+0xe9>
   39eaf:	cmp    %edx,%ebx
   39eb1:	ja     39efd <access_virt_barray+0x1ad>
   39eb3:	test   %r14d,%r14d
   39eb6:	je     39ebd <access_virt_barray+0x16d>
   39eb8:	mov    %r13d,0x20(%r12)
   39ebd:	movslq 0x24(%r12),%rsi
   39ec2:	test   %esi,%esi
   39ec4:	jne    39f07 <access_virt_barray+0x1b7>
   39ec6:	test   %r14d,%r14d
   39ec9:	jne    39e67 <access_virt_barray+0x117>
   39ecb:	mov    (%r15),%rax
   39ece:	movl   $0x16,0x28(%rax)
   39ed5:	mov    (%r15),%rax
   39ed8:	mov    (%rax),%rax
   39edb:	mov    %r15,%rdi
   39ede:	mov    %r9,%r15
   39ee1:	mov    %r10,%r13
   39ee4:	callq  *%rax
   39ee6:	mov    %r15,%r9
   39ee9:	mov    %r13,%r10
   39eec:	mov    -0x28(%rbp),%rax
   39ef0:	mov    -0x20(%rbp),%r11
   39ef4:	mov    -0x18(%rbp),%rcx
   39ef8:	jmpq   39e67 <access_virt_barray+0x117>
   39efd:	test   %r14d,%r14d
   39f00:	jne    39f27 <access_virt_barray+0x1d7>
   39f02:	mov    %rbx,%rdx
   39f05:	jmp    39eb3 <access_virt_barray+0x163>
   39f07:	mov    0xc(%r12),%eax
   39f0c:	shl    $0x7,%rax
   39f10:	mov    0x1c(%r12),%ecx
   39f15:	sub    %ecx,%r13d
   39f18:	mov    %rdx,%r15
   39f1b:	sub    %ecx,%r15d
   39f1e:	mov    %r14,-0x30(%rbp)
   39f22:	mov    %rax,%r14
   39f25:	jmp    39f6f <access_virt_barray+0x21f>
   39f27:	mov    (%r15),%rax
   39f2a:	movl   $0x16,0x28(%rax)
   39f31:	mov    (%r15),%rax
   39f34:	mov    (%rax),%rax
   39f37:	mov    %r15,%rdi
   39f3a:	callq  *%rax
   39f3c:	mov    -0x28(%rbp),%rax
   39f40:	mov    -0x20(%rbp),%r11
   39f44:	mov    -0x18(%rbp),%rcx
   39f48:	mov    -0x10(%rbp),%r9
   39f4c:	mov    -0x8(%rbp),%r10
   39f50:	mov    %rbx,%rdx
   39f53:	jmpq   39eb3 <access_virt_barray+0x163>
   39f58:	mov    (%r12),%rcx
   39f5c:	mov    %r15d,%eax
   39f5f:	mov    (%rcx,%rax,8),%rdi
   39f63:	mov    %r14,%rsi
   39f66:	callq  44d0 <jzero_far@plt>
   39f6b:	add    $0x1,%r15d
   39f6f:	cmp    %r13d,%r15d
   39f72:	jb     39f58 <access_virt_barray+0x208>
   39f74:	mov    -0x30(%rbp),%r14
   39f78:	mov    -0x28(%rbp),%rax
   39f7c:	mov    -0x20(%rbp),%r11
   39f80:	mov    -0x18(%rbp),%rcx
   39f84:	mov    -0x10(%rbp),%r9
   39f88:	mov    -0x8(%rbp),%r10
   39f8c:	jmpq   39e67 <access_virt_barray+0x117>
   39f91:	data16 nopw %cs:0x0(%rax,%rax,1)
   39f9c:	nopl   0x0(%rax)

0000000000039fa0 <free_pool>:
   39fa0:	push   %rbp
   39fa1:	mov    %rsp,%rbp
   39fa4:	sub    $0x30,%rsp
   39fa8:	mov    %r13,-0x8(%rbp)
   39fac:	mov    %r14,-0x10(%rbp)
   39fb0:	mov    %r15,-0x18(%rbp)
   39fb4:	mov    0x8(%rdi),%r13
   39fb8:	mov    %r13,-0x28(%rbp)
   39fbc:	test   %esi,%esi
   39fbe:	js     39fd0 <free_pool+0x30>
   39fc0:	cmp    $0x1,%esi
   39fc3:	jg     39fd0 <free_pool+0x30>
   39fc5:	mov    %r12,%r14
   39fc8:	mov    %rdi,%r12
   39fcb:	mov    %rsi,%r15
   39fce:	jmp    39ff1 <free_pool+0x51>
   39fd0:	mov    (%rdi),%rax
   39fd3:	movl   $0xe,0x28(%rax)
   39fda:	mov    (%rdi),%rax
   39fdd:	mov    %esi,0x2c(%rax)
   39fe0:	mov    (%rdi),%rax
   39fe3:	mov    (%rax),%rax
   39fe6:	mov    %r12,%r14
   39fe9:	mov    %rsi,%r15
   39fec:	mov    %rdi,%r12
   39fef:	callq  *%rax
   39ff1:	cmp    $0x1,%r15d
   39ff5:	je     3a012 <free_pool+0x72>
   39ff7:	movslq %r15d,%rax
   39ffa:	mov    %rax,-0x28(%rbp)
   39ffe:	mov    0x78(%r13,%rax,8),%rsi
   3a003:	movq   $0x0,0x78(%r13,%rax,8)
   3a00c:	mov    %r14,-0x20(%rbp)
   3a010:	jmp    3a04e <free_pool+0xae>
   3a012:	mov    0x88(%r13),%r13
   3a019:	mov    %r15,-0x20(%rbp)
   3a01d:	jmp    3a088 <free_pool+0xe8>
   3a01f:	mov    (%rsi),%r15
   3a022:	mov    0x10(%rsi),%rcx
   3a026:	mov    0x8(%rsi),%rax
   3a02a:	lea    0x18(%rcx,%rax,1),%r14
   3a02f:	mov    %r12,%rdi
   3a032:	mov    %r14,%rdx
   3a035:	callq  4180 <jpeg_free_large@plt>
   3a03a:	mov    0x98(%r13),%rax
   3a041:	sub    %r14,%rax
   3a044:	mov    %rax,0x98(%r13)
   3a04b:	mov    %r15,%rsi
   3a04e:	test   %rsi,%rsi
   3a051:	jne    3a01f <free_pool+0x7f>
   3a053:	mov    -0x28(%rbp),%rax
   3a057:	mov    0x68(%r13,%rax,8),%rsi
   3a05c:	movq   $0x0,0x68(%r13,%rax,8)
   3a065:	jmp    3a0d4 <free_pool+0x134>
   3a067:	movslq 0x2c(%r13),%rax
   3a06b:	test   %eax,%eax
   3a06d:	je     3a084 <free_pool+0xe4>
   3a06f:	movl   $0x0,0x2c(%r13)
   3a077:	mov    0x48(%r13),%rax
   3a07b:	lea    0x38(%r13),%rsi
   3a07f:	mov    %r12,%rdi
   3a082:	callq  *%rax
   3a084:	mov    0x30(%r13),%r13
   3a088:	test   %r13,%r13
   3a08b:	jne    3a067 <free_pool+0xc7>
   3a08d:	mov    -0x28(%rbp),%rax
   3a091:	mov    0x90(%rax),%r13
   3a098:	movq   $0x0,0x88(%rax)
   3a0a3:	jmp    3a10c <free_pool+0x16c>
   3a0a5:	mov    (%rsi),%r15
   3a0a8:	mov    0x10(%rsi),%rcx
   3a0ac:	mov    0x8(%rsi),%rax
   3a0b0:	lea    0x18(%rcx,%rax,1),%r14
   3a0b5:	mov    %r12,%rdi
   3a0b8:	mov    %r14,%rdx
   3a0bb:	callq  4340 <jpeg_free_small@plt>
   3a0c0:	mov    0x98(%r13),%rax
   3a0c7:	sub    %r14,%rax
   3a0ca:	mov    %rax,0x98(%r13)
   3a0d1:	mov    %r15,%rsi
   3a0d4:	test   %rsi,%rsi
   3a0d7:	jne    3a0a5 <free_pool+0x105>
   3a0d9:	mov    -0x20(%rbp),%r12
   3a0dd:	mov    -0x18(%rbp),%r15
   3a0e1:	mov    -0x10(%rbp),%r14
   3a0e5:	mov    -0x8(%rbp),%r13
   3a0e9:	leaveq 
   3a0ea:	retq   
   3a0eb:	movslq 0x2c(%r13),%rax
   3a0ef:	test   %eax,%eax
   3a0f1:	je     3a108 <free_pool+0x168>
   3a0f3:	movl   $0x0,0x2c(%r13)
   3a0fb:	mov    0x48(%r13),%rax
   3a0ff:	lea    0x38(%r13),%rsi
   3a103:	mov    %r12,%rdi
   3a106:	callq  *%rax
   3a108:	mov    0x30(%r13),%r13
   3a10c:	test   %r13,%r13
   3a10f:	jne    3a0eb <free_pool+0x14b>
   3a111:	mov    -0x28(%rbp),%r13
   3a115:	movq   $0x0,0x90(%r13)
   3a120:	mov    -0x20(%rbp),%r15
   3a124:	jmpq   39ff7 <free_pool+0x57>
   3a129:	nopl   0x0(%rax)

000000000003a130 <self_destruct>:
   3a130:	push   %rbp
   3a131:	mov    %rsp,%rbp
   3a134:	sub    $0x10,%rsp
   3a138:	mov    %r14,-0x8(%rbp)
   3a13c:	mov    %r15,-0x10(%rbp)
   3a140:	mov    %rdi,%r14
   3a143:	mov    $0x1,%r15d
   3a149:	jmp    3a15a <self_destruct+0x2a>
   3a14b:	mov    %r14,%rdi
   3a14e:	mov    %r15,%rsi
   3a151:	callq  39fa0 <free_pool>
   3a156:	add    $0xffffffff,%r15d
   3a15a:	test   %r15d,%r15d
   3a15d:	jns    3a14b <self_destruct+0x1b>
   3a15f:	mov    0x8(%r14),%rsi
   3a163:	mov    $0xa8,%edx
   3a168:	mov    %r14,%rdi
   3a16b:	callq  4340 <jpeg_free_small@plt>
   3a170:	mov    %r14,%rdi
   3a173:	movq   $0x0,0x8(%rdi)
   3a17b:	callq  4350 <jpeg_mem_term@plt>
   3a180:	mov    -0x10(%rbp),%r15
   3a184:	mov    -0x8(%rbp),%r14
   3a188:	leaveq 
   3a189:	retq   
   3a18a:	nopw   0x0(%rax,%rax,1)

000000000003a190 <jpeg_get_small>:
   3a190:	push   %rbp
   3a191:	mov    %rsp,%rbp
   3a194:	mov    %rsi,%rdi
   3a197:	callq  4320 <malloc@plt>
   3a19c:	leaveq 
   3a19d:	retq   
   3a19e:	xchg   %ax,%ax

000000000003a1a0 <jpeg_free_small>:
   3a1a0:	push   %rbp
   3a1a1:	mov    %rsp,%rbp
   3a1a4:	mov    %rsi,%rdi
   3a1a7:	callq  4060 <free@plt>
   3a1ac:	leaveq 
   3a1ad:	retq   
   3a1ae:	xchg   %ax,%ax

000000000003a1b0 <jpeg_get_large>:
   3a1b0:	push   %rbp
   3a1b1:	mov    %rsp,%rbp
   3a1b4:	mov    %rsi,%rdi
   3a1b7:	callq  4320 <malloc@plt>
   3a1bc:	leaveq 
   3a1bd:	retq   
   3a1be:	xchg   %ax,%ax

000000000003a1c0 <jpeg_free_large>:
   3a1c0:	push   %rbp
   3a1c1:	mov    %rsp,%rbp
   3a1c4:	mov    %rsi,%rdi
   3a1c7:	callq  4060 <free@plt>
   3a1cc:	leaveq 
   3a1cd:	retq   
   3a1ce:	xchg   %ax,%ax

000000000003a1d0 <jpeg_mem_available>:
   3a1d0:	push   %rbp
   3a1d1:	mov    %rsp,%rbp
   3a1d4:	mov    0x8(%rdi),%rax
   3a1d8:	mov    0x58(%rax),%rax
   3a1dc:	test   %rax,%rax
   3a1df:	jne    3a1e6 <jpeg_mem_available+0x16>
   3a1e1:	mov    %rdx,%rax
   3a1e4:	leaveq 
   3a1e5:	retq   
   3a1e6:	cmp    %rax,%rcx
   3a1e9:	jb     3a1ef <jpeg_mem_available+0x1f>
   3a1eb:	xor    %eax,%eax
   3a1ed:	leaveq 
   3a1ee:	retq   
   3a1ef:	sub    %rcx,%rax
   3a1f2:	leaveq 
   3a1f3:	retq   
   3a1f4:	data16 nopw %cs:0x0(%rax,%rax,1)
   3a1ff:	nop

000000000003a200 <jpeg_open_backing_store>:
   3a200:	push   %rbp
   3a201:	mov    %rsp,%rbp
   3a204:	mov    (%rdi),%rax
   3a207:	movl   $0x31,0x28(%rax)
   3a20e:	mov    (%rdi),%rax
   3a211:	mov    (%rax),%rax
   3a214:	callq  *%rax
   3a216:	leaveq 
   3a217:	retq   
   3a218:	nopl   0x0(%rax,%rax,1)

000000000003a220 <jpeg_mem_init>:
   3a220:	push   %rbp
   3a221:	mov    %rsp,%rbp
   3a224:	xor    %eax,%eax
   3a226:	leaveq 
   3a227:	retq   
   3a228:	nopl   0x0(%rax,%rax,1)

000000000003a230 <jpeg_mem_term>:
   3a230:	push   %rbp
   3a231:	mov    %rsp,%rbp
   3a234:	leaveq 
   3a235:	retq   
   3a236:	nopw   %cs:0x0(%rax,%rax,1)

000000000003a240 <jinit_arith_encoder>:
   3a240:	push   %rbp
   3a241:	mov    %rsp,%rbp
   3a244:	sub    $0x10,%rsp
   3a248:	mov    %r15,-0x8(%rbp)
   3a24c:	mov    0x8(%rdi),%rax
   3a250:	mov    (%rax),%rax
   3a253:	mov    $0x1,%esi
   3a258:	mov    $0x170,%edx
   3a25d:	mov    %rdi,%r15
   3a260:	callq  *%rax
   3a262:	mov    %rax,0x1f0(%r15)
   3a269:	lea    0x17b0(%rip),%rcx        # 3ba20 <start_pass>
   3a270:	mov    %rcx,(%rax)
   3a273:	lea    0x96(%rip),%rcx        # 3a310 <finish_pass>
   3a27a:	mov    %rcx,0x10(%rax)
   3a27e:	xor    %ecx,%ecx
   3a280:	jmp    3a29d <jinit_arith_encoder+0x5d>
   3a282:	movslq %ecx,%rdx
   3a285:	movq   $0x0,0x68(%rax,%rdx,8)
   3a28e:	movq   $0x0,0xe8(%rax,%rdx,8)
   3a29a:	add    $0x1,%ecx
   3a29d:	cmp    $0xf,%ecx
   3a2a0:	jle    3a282 <jinit_arith_encoder+0x42>
   3a2a2:	movb   $0x71,0x168(%rax)
   3a2a9:	mov    -0x8(%rbp),%r15
   3a2ad:	leaveq 
   3a2ae:	retq   
   3a2af:	nop

000000000003a2b0 <emit_byte>:
   3a2b0:	push   %rbp
   3a2b1:	mov    %rsp,%rbp
   3a2b4:	sub    $0x10,%rsp
   3a2b8:	mov    0x28(%rsi),%rcx
   3a2bc:	mov    (%rcx),%rax
   3a2bf:	lea    0x1(%rax),%rdx
   3a2c3:	mov    %rdx,(%rcx)
   3a2c6:	mov    %dil,(%rax)
   3a2c9:	mov    0x8(%rcx),%rax
   3a2cd:	add    $0xffffffffffffffff,%rax
   3a2d1:	mov    %rax,0x8(%rcx)
   3a2d5:	test   %rax,%rax
   3a2d8:	je     3a2dc <emit_byte+0x2c>
   3a2da:	leaveq 
   3a2db:	retq   
   3a2dc:	mov    %rsi,%rdi
   3a2df:	mov    %r15,-0x8(%rbp)
   3a2e3:	mov    %rsi,%r15
   3a2e6:	callq  *0x18(%rcx)
   3a2e9:	test   %eax,%eax
   3a2eb:	je     3a2f3 <emit_byte+0x43>
   3a2ed:	mov    -0x8(%rbp),%r15
   3a2f1:	leaveq 
   3a2f2:	retq   
   3a2f3:	mov    (%r15),%rax
   3a2f6:	movl   $0x18,0x28(%rax)
   3a2fd:	mov    (%r15),%rax
   3a300:	mov    (%rax),%rax
   3a303:	mov    %r15,%rdi
   3a306:	callq  *%rax
   3a308:	mov    -0x8(%rbp),%r15
   3a30c:	leaveq 
   3a30d:	retq   
   3a30e:	xchg   %ax,%ax

000000000003a310 <finish_pass>:
   3a310:	push   %rbp
   3a311:	mov    %rsp,%rbp
   3a314:	sub    $0x20,%rsp
   3a318:	mov    %r15,-0x18(%rbp)
   3a31c:	mov    %r14,-0x10(%rbp)
   3a320:	mov    0x1f0(%rdi),%rsi
   3a327:	mov    0x18(%rsi),%rcx
   3a32b:	mov    0x20(%rsi),%rax
   3a32f:	lea    -0x1(%rcx,%rax,1),%rdx
   3a334:	mov    $0xffff0000,%eax
   3a339:	and    %rax,%rdx
   3a33c:	cmp    %rcx,%rdx
   3a33f:	jge    3a348 <finish_pass+0x38>
   3a341:	add    $0x8000,%rdx
   3a348:	mov    %r13,%rax
   3a34b:	mov    %r12,%r13
   3a34e:	mov    %rdi,%r12
   3a351:	mov    %r14,%r8
   3a354:	mov    %rsi,%r14
   3a357:	mov    %r15,%rsi
   3a35a:	mov    0x38(%r14),%ecx
   3a35e:	shl    %cl,%rdx
   3a361:	mov    %rdx,0x18(%r14)
   3a365:	xor    %r15d,%r15d
   3a368:	mov    $0xf8000000,%ecx
   3a36d:	and    %rcx,%rdx
   3a370:	test   %rdx,%rdx
   3a373:	jg     3a3e6 <finish_pass+0xd6>
   3a375:	movslq 0x3c(%r14),%rcx
   3a379:	test   %ecx,%ecx
   3a37b:	je     3a480 <finish_pass+0x170>
   3a381:	test   %ecx,%ecx
   3a383:	jle    3a48c <finish_pass+0x17c>
   3a389:	mov    0x30(%r14),%rcx
   3a38d:	test   %rcx,%rcx
   3a390:	je     3a3ba <finish_pass+0xaa>
   3a392:	mov    %rax,-0x20(%rbp)
   3a396:	mov    %r15,%rdi
   3a399:	mov    %r12,%rsi
   3a39c:	callq  3a2b0 <emit_byte>
   3a3a1:	mov    0x30(%r14),%rax
   3a3a5:	add    $0xffffffffffffffff,%rax
   3a3a9:	mov    %rax,0x30(%r14)
   3a3ad:	test   %rax,%rax
   3a3b0:	jne    3a396 <finish_pass+0x86>
   3a3b2:	mov    -0x20(%rbp),%rax
   3a3b6:	mov    -0x10(%rbp),%r8
   3a3ba:	movslq 0x3c(%r14),%rdi
   3a3be:	mov    %r12,%rsi
   3a3c1:	mov    %r12,-0x20(%rbp)
   3a3c5:	mov    %rax,%r12
   3a3c8:	mov    %r8,%r15
   3a3cb:	callq  3a2b0 <emit_byte>
   3a3d0:	mov    %r12,%rax
   3a3d3:	mov    %r15,%r8
   3a3d6:	xor    %r15d,%r15d
   3a3d9:	mov    -0x20(%rbp),%r12
   3a3dd:	mov    -0x18(%rbp),%rsi
   3a3e1:	jmpq   3a48c <finish_pass+0x17c>
   3a3e6:	movslq 0x3c(%r14),%rcx
   3a3ea:	test   %ecx,%ecx
   3a3ec:	js     3a44a <finish_pass+0x13a>
   3a3ee:	mov    0x30(%r14),%rcx
   3a3f2:	test   %rcx,%rcx
   3a3f5:	je     3a41b <finish_pass+0x10b>
   3a3f7:	mov    %rax,-0x20(%rbp)
   3a3fb:	mov    %r15,%rdi
   3a3fe:	mov    %r12,%rsi
   3a401:	callq  3a2b0 <emit_byte>
   3a406:	mov    0x30(%r14),%rax
   3a40a:	add    $0xffffffffffffffff,%rax
   3a40e:	mov    %rax,0x30(%r14)
   3a412:	test   %rax,%rax
   3a415:	jne    3a3fb <finish_pass+0xeb>
   3a417:	mov    -0x20(%rbp),%rax
   3a41b:	movslq 0x3c(%r14),%rdi
   3a41f:	add    $0x1,%edi
   3a422:	mov    %rax,%r15
   3a425:	mov    %r12,%rsi
   3a428:	callq  3a2b0 <emit_byte>
   3a42d:	movslq 0x3c(%r14),%rax
   3a431:	cmp    $0xfe,%eax
   3a436:	je     3a4ee <finish_pass+0x1de>
   3a43c:	mov    %r15,%rax
   3a43f:	mov    -0x10(%rbp),%r8
   3a443:	xor    %r15d,%r15d
   3a446:	mov    -0x18(%rbp),%rsi
   3a44a:	mov    0x30(%r14),%rcx
   3a44e:	add    0x28(%r14),%rcx
   3a452:	mov    %rcx,0x30(%r14)
   3a456:	movq   $0x0,0x28(%r14)
   3a45e:	mov    0x18(%r14),%rcx
   3a462:	and    $0x7fff800,%rcx
   3a469:	test   %rcx,%rcx
   3a46c:	jg     3a50b <finish_pass+0x1fb>
   3a472:	mov    %r13,%r12
   3a475:	mov    %rax,%r13
   3a478:	mov    %r8,%r14
   3a47b:	mov    %rsi,%r15
   3a47e:	leaveq 
   3a47f:	retq   
   3a480:	mov    0x30(%r14),%rcx
   3a484:	add    $0x1,%rcx
   3a488:	mov    %rcx,0x30(%r14)
   3a48c:	mov    0x28(%r14),%rcx
   3a490:	test   %rcx,%rcx
   3a493:	je     3a45e <finish_pass+0x14e>
   3a495:	mov    $0xff,%edx
   3a49a:	mov    0x30(%r14),%rcx
   3a49e:	test   %rcx,%rcx
   3a4a1:	jne    3a58d <finish_pass+0x27d>
   3a4a7:	mov    %r13,-0x8(%rbp)
   3a4ab:	mov    %rax,-0x20(%rbp)
   3a4af:	mov    %rdx,%r13
   3a4b2:	mov    %r13,%rdi
   3a4b5:	mov    %r12,%rsi
   3a4b8:	callq  3a2b0 <emit_byte>
   3a4bd:	mov    %r15,%rdi
   3a4c0:	mov    %r12,%rsi
   3a4c3:	callq  3a2b0 <emit_byte>
   3a4c8:	mov    0x28(%r14),%rax
   3a4cc:	add    $0xffffffffffffffff,%rax
   3a4d0:	mov    %rax,0x28(%r14)
   3a4d4:	test   %rax,%rax
   3a4d7:	jne    3a4b2 <finish_pass+0x1a2>
   3a4d9:	mov    -0x20(%rbp),%rax
   3a4dd:	mov    -0x8(%rbp),%r13
   3a4e1:	mov    -0x10(%rbp),%r8
   3a4e5:	mov    -0x18(%rbp),%rsi
   3a4e9:	jmpq   3a45e <finish_pass+0x14e>
   3a4ee:	xor    %edi,%edi
   3a4f0:	mov    %r12,%rsi
   3a4f3:	callq  3a2b0 <emit_byte>
   3a4f8:	mov    %r15,%rax
   3a4fb:	mov    -0x10(%rbp),%r8
   3a4ff:	xor    %r15d,%r15d
   3a502:	mov    -0x18(%rbp),%rsi
   3a506:	jmpq   3a44a <finish_pass+0x13a>
   3a50b:	mov    0x30(%r14),%rcx
   3a50f:	test   %rcx,%rcx
   3a512:	je     3a538 <finish_pass+0x228>
   3a514:	mov    %rax,-0x8(%rbp)
   3a518:	mov    %r15,%rdi
   3a51b:	mov    %r12,%rsi
   3a51e:	callq  3a2b0 <emit_byte>
   3a523:	mov    0x30(%r14),%rax
   3a527:	add    $0xffffffffffffffff,%rax
   3a52b:	mov    %rax,0x30(%r14)
   3a52f:	test   %rax,%rax
   3a532:	jne    3a518 <finish_pass+0x208>
   3a534:	mov    -0x8(%rbp),%rax
   3a538:	mov    0x18(%r14),%rcx
   3a53c:	shr    $0x13,%rcx
   3a540:	movzbl %cl,%edi
   3a543:	mov    %rax,%r15
   3a546:	mov    %r12,%rsi
   3a549:	callq  3a2b0 <emit_byte>
   3a54e:	mov    0x18(%r14),%rax
   3a552:	and    $0x7f80000,%rax
   3a558:	cmp    $0x7f80000,%rax
   3a55e:	jne    3a56a <finish_pass+0x25a>
   3a560:	xor    %edi,%edi
   3a562:	mov    %r12,%rsi
   3a565:	callq  3a2b0 <emit_byte>
   3a56a:	mov    0x18(%r14),%rax
   3a56e:	mov    %rax,%rcx
   3a571:	and    $0x7f800,%rcx
   3a578:	test   %rcx,%rcx
   3a57b:	jg     3a5bc <finish_pass+0x2ac>
   3a57d:	mov    %r13,%r12
   3a580:	mov    %r15,%r13
   3a583:	mov    -0x10(%rbp),%r14
   3a587:	mov    -0x18(%rbp),%r15
   3a58b:	leaveq 
   3a58c:	retq   
   3a58d:	mov    %rax,-0x20(%rbp)
   3a591:	mov    %r15,%rdi
   3a594:	mov    %r12,%rsi
   3a597:	callq  3a2b0 <emit_byte>
   3a59c:	mov    0x30(%r14),%rax
   3a5a0:	add    $0xffffffffffffffff,%rax
   3a5a4:	mov    %rax,0x30(%r14)
   3a5a8:	test   %rax,%rax
   3a5ab:	jne    3a591 <finish_pass+0x281>
   3a5ad:	mov    %r13,-0x8(%rbp)
   3a5b1:	mov    $0xff,%r13d
   3a5b7:	jmpq   3a4b2 <finish_pass+0x1a2>
   3a5bc:	shr    $0xb,%rax
   3a5c0:	movzbl %al,%edi
   3a5c3:	mov    %r12,%rsi
   3a5c6:	callq  3a2b0 <emit_byte>
   3a5cb:	mov    0x18(%r14),%rax
   3a5cf:	and    $0x7f800,%rax
   3a5d5:	cmp    $0x7f800,%rax
   3a5db:	je     3a5ed <finish_pass+0x2dd>
   3a5dd:	mov    %r13,%r12
   3a5e0:	mov    %r15,%r13
   3a5e3:	mov    -0x10(%rbp),%r14
   3a5e7:	mov    -0x18(%rbp),%r15
   3a5eb:	leaveq 
   3a5ec:	retq   
   3a5ed:	mov    %r12,%rsi
   3a5f0:	xor    %edi,%edi
   3a5f2:	callq  3a2b0 <emit_byte>
   3a5f7:	mov    %r13,%r12
   3a5fa:	mov    %r15,%r13
   3a5fd:	mov    -0x10(%rbp),%r14
   3a601:	mov    -0x18(%rbp),%r15
   3a605:	leaveq 
   3a606:	retq   
   3a607:	nopw   0x0(%rax,%rax,1)

000000000003a610 <arith_encode>:
   3a610:	push   %rbp
   3a611:	mov    %rsp,%rbp
   3a614:	sub    $0x30,%rsp
   3a618:	mov    0x339a9(%rip),%r8        # 6dfc8 <jpeg_aritab@@LIBJPEG_6.2+0x12870>
   3a61f:	movzbl (%rsi),%ecx
   3a622:	mov    %rcx,%rax
   3a625:	and    $0x7f,%eax
   3a628:	movslq %eax,%rax
   3a62b:	mov    (%r8,%rax,8),%r8
   3a62f:	mov    %r8,%r10
   3a632:	sar    $0x10,%r10
   3a636:	mov    0x1f0(%rdi),%r11
   3a63d:	mov    0x20(%r11),%rax
   3a641:	sub    %r10,%rax
   3a644:	mov    %rax,0x20(%r11)
   3a648:	mov    %rcx,%r9
   3a64b:	shr    $0x7,%r9d
   3a64f:	cmp    %edx,%r9d
   3a652:	jne    3a662 <arith_encode+0x52>
   3a654:	cmp    $0x7fff,%rax
   3a65a:	jle    3a72f <arith_encode+0x11f>
   3a660:	leaveq 
   3a661:	retq   
   3a662:	cmp    %r10,%rax
   3a665:	jl     3a673 <arith_encode+0x63>
   3a667:	add    0x18(%r11),%rax
   3a66b:	mov    %rax,0x18(%r11)
   3a66f:	mov    %r10,0x20(%r11)
   3a673:	and    $0x80,%cl
   3a676:	lea    (%rcx,%r8,1),%eax
   3a67a:	mov    %al,(%rsi)
   3a67c:	mov    %rbx,-0x8(%rbp)
   3a680:	mov    %r12,-0x10(%rbp)
   3a684:	mov    %r13,-0x18(%rbp)
   3a688:	mov    %r14,-0x20(%rbp)
   3a68c:	mov    %r15,-0x28(%rbp)
   3a690:	mov    %rdi,%r12
   3a693:	mov    %r11,%r13
   3a696:	movabs $0x7ffffffffffc0000,%rax
   3a6a0:	mov    $0xff,%r14d
   3a6a6:	xor    %ebx,%ebx
   3a6a8:	mov    0x20(%r13),%rcx
   3a6ac:	add    %rcx,%rcx
   3a6af:	mov    %rcx,0x20(%r13)
   3a6b3:	mov    0x18(%r13),%rdx
   3a6b7:	lea    (%rdx,%rdx,1),%r15
   3a6bb:	mov    %r15,0x18(%r13)
   3a6bf:	movslq 0x38(%r13),%rcx
   3a6c3:	add    $0xffffffff,%ecx
   3a6c6:	mov    %ecx,0x38(%r13)
   3a6ca:	test   %ecx,%ecx
   3a6cc:	jne    3a815 <arith_encode+0x205>
   3a6d2:	sar    $0x13,%r15
   3a6d6:	cmp    $0xff,%r15
   3a6dd:	jg     3a77e <arith_encode+0x16e>
   3a6e3:	and    %rax,%rdx
   3a6e6:	cmp    $0x3fc0000,%rdx
   3a6ed:	je     3a83c <arith_encode+0x22c>
   3a6f3:	movslq 0x3c(%r13),%rcx
   3a6f7:	test   %ecx,%ecx
   3a6f9:	je     3a84a <arith_encode+0x23a>
   3a6ff:	test   %ecx,%ecx
   3a701:	jle    3a856 <arith_encode+0x246>
   3a707:	mov    0x30(%r13),%rax
   3a70b:	test   %rax,%rax
   3a70e:	jne    3a8a6 <arith_encode+0x296>
   3a714:	movslq 0x3c(%r13),%rdi
   3a718:	mov    %r12,%rsi
   3a71b:	callq  3a2b0 <emit_byte>
   3a720:	movabs $0x7ffffffffffc0000,%rax
   3a72a:	jmpq   3a856 <arith_encode+0x246>
   3a72f:	cmp    %r10,%rax
   3a732:	jge    3a740 <arith_encode+0x130>
   3a734:	add    0x18(%r11),%rax
   3a738:	mov    %rax,0x18(%r11)
   3a73c:	mov    %r10,0x20(%r11)
   3a740:	and    $0x80,%cl
   3a743:	shr    $0x8,%r8
   3a747:	lea    (%rcx,%r8,1),%eax
   3a74b:	mov    %al,(%rsi)
   3a74d:	mov    %rbx,-0x8(%rbp)
   3a751:	mov    %r12,-0x10(%rbp)
   3a755:	mov    %r13,-0x18(%rbp)
   3a759:	mov    %r14,-0x20(%rbp)
   3a75d:	mov    %r15,-0x28(%rbp)
   3a761:	mov    %rdi,%r12
   3a764:	mov    %r11,%r13
   3a767:	movabs $0x7ffffffffffc0000,%rax
   3a771:	mov    $0xff,%r14d
   3a777:	xor    %ebx,%ebx
   3a779:	jmpq   3a6a8 <arith_encode+0x98>
   3a77e:	movslq 0x3c(%r13),%rcx
   3a782:	test   %ecx,%ecx
   3a784:	js     3a7df <arith_encode+0x1cf>
   3a786:	mov    0x30(%r13),%rcx
   3a78a:	test   %rcx,%rcx
   3a78d:	je     3a7b5 <arith_encode+0x1a5>
   3a78f:	mov    %rbx,%rdi
   3a792:	mov    %r12,%rsi
   3a795:	callq  3a2b0 <emit_byte>
   3a79a:	mov    0x30(%r13),%rax
   3a79e:	add    $0xffffffffffffffff,%rax
   3a7a2:	mov    %rax,0x30(%r13)
   3a7a6:	test   %rax,%rax
   3a7a9:	jne    3a78f <arith_encode+0x17f>
   3a7ab:	movabs $0x7ffffffffffc0000,%rax
   3a7b5:	movslq 0x3c(%r13),%rdi
   3a7b9:	add    $0x1,%edi
   3a7bc:	mov    %rax,%r14
   3a7bf:	mov    %r12,%rsi
   3a7c2:	callq  3a2b0 <emit_byte>
   3a7c7:	movslq 0x3c(%r13),%rax
   3a7cb:	cmp    $0xfe,%eax
   3a7d0:	je     3a8c7 <arith_encode+0x2b7>
   3a7d6:	mov    %r14,%rax
   3a7d9:	mov    $0xff,%r14d
   3a7df:	mov    0x30(%r13),%rcx
   3a7e3:	add    0x28(%r13),%rcx
   3a7e7:	mov    %rcx,0x30(%r13)
   3a7eb:	movq   $0x0,0x28(%r13)
   3a7f3:	movzbl %r15b,%ecx
   3a7f7:	mov    %ecx,0x3c(%r13)
   3a7fb:	mov    0x18(%r13),%rcx
   3a7ff:	and    $0x7ffff,%rcx
   3a806:	mov    %rcx,0x18(%r13)
   3a80a:	movslq 0x38(%r13),%rcx
   3a80e:	add    $0x8,%ecx
   3a811:	mov    %ecx,0x38(%r13)
   3a815:	mov    0x20(%r13),%rcx
   3a819:	cmp    $0x7fff,%rcx
   3a820:	jle    3a6a8 <arith_encode+0x98>
   3a826:	mov    -0x28(%rbp),%r15
   3a82a:	mov    -0x20(%rbp),%r14
   3a82e:	mov    -0x18(%rbp),%r13
   3a832:	mov    -0x10(%rbp),%r12
   3a836:	mov    -0x8(%rbp),%rbx
   3a83a:	leaveq 
   3a83b:	retq   
   3a83c:	mov    0x28(%r13),%rcx
   3a840:	add    $0x1,%rcx
   3a844:	mov    %rcx,0x28(%r13)
   3a848:	jmp    3a7fb <arith_encode+0x1eb>
   3a84a:	mov    0x30(%r13),%rcx
   3a84e:	add    $0x1,%rcx
   3a852:	mov    %rcx,0x30(%r13)
   3a856:	mov    0x28(%r13),%rcx
   3a85a:	test   %rcx,%rcx
   3a85d:	je     3a899 <arith_encode+0x289>
   3a85f:	mov    0x30(%r13),%rax
   3a863:	test   %rax,%rax
   3a866:	jne    3a8e0 <arith_encode+0x2d0>
   3a868:	mov    %r14,%rdi
   3a86b:	mov    %r12,%rsi
   3a86e:	callq  3a2b0 <emit_byte>
   3a873:	mov    %rbx,%rdi
   3a876:	mov    %r12,%rsi
   3a879:	callq  3a2b0 <emit_byte>
   3a87e:	mov    0x28(%r13),%rax
   3a882:	add    $0xffffffffffffffff,%rax
   3a886:	mov    %rax,0x28(%r13)
   3a88a:	test   %rax,%rax
   3a88d:	jne    3a868 <arith_encode+0x258>
   3a88f:	movabs $0x7ffffffffffc0000,%rax
   3a899:	movzbl %r15b,%ecx
   3a89d:	mov    %ecx,0x3c(%r13)
   3a8a1:	jmpq   3a7fb <arith_encode+0x1eb>
   3a8a6:	mov    %rbx,%rdi
   3a8a9:	mov    %r12,%rsi
   3a8ac:	callq  3a2b0 <emit_byte>
   3a8b1:	mov    0x30(%r13),%rax
   3a8b5:	add    $0xffffffffffffffff,%rax
   3a8b9:	mov    %rax,0x30(%r13)
   3a8bd:	test   %rax,%rax
   3a8c0:	jne    3a8a6 <arith_encode+0x296>
   3a8c2:	jmpq   3a714 <arith_encode+0x104>
   3a8c7:	mov    %rbx,%rdi
   3a8ca:	mov    %r12,%rsi
   3a8cd:	callq  3a2b0 <emit_byte>
   3a8d2:	mov    %r14,%rax
   3a8d5:	mov    $0xff,%r14d
   3a8db:	jmpq   3a7df <arith_encode+0x1cf>
   3a8e0:	mov    %rbx,%rdi
   3a8e3:	mov    %r12,%rsi
   3a8e6:	callq  3a2b0 <emit_byte>
   3a8eb:	mov    0x30(%r13),%rax
   3a8ef:	add    $0xffffffffffffffff,%rax
   3a8f3:	mov    %rax,0x30(%r13)
   3a8f7:	test   %rax,%rax
   3a8fa:	jne    3a8e0 <arith_encode+0x2d0>
   3a8fc:	jmpq   3a868 <arith_encode+0x258>
   3a901:	data16 nopw %cs:0x0(%rax,%rax,1)
   3a90c:	nopl   0x0(%rax)

000000000003a910 <emit_restart>:
   3a910:	push   %rbp
   3a911:	mov    %rsp,%rbp
   3a914:	sub    $0x30,%rsp
   3a918:	mov    %r13,-0x18(%rbp)
   3a91c:	mov    %r14,-0x20(%rbp)
   3a920:	mov    %r15,-0x28(%rbp)
   3a924:	mov    %rbx,-0x8(%rbp)
   3a928:	mov    %r12,-0x10(%rbp)
   3a92c:	mov    %rsi,%rbx
   3a92f:	mov    0x1f0(%rdi),%r14
   3a936:	mov    %rdi,%r13
   3a939:	callq  3a310 <finish_pass>
   3a93e:	mov    $0xff,%edi
   3a943:	mov    %r13,%rsi
   3a946:	callq  3a2b0 <emit_byte>
   3a94b:	lea    0xd0(%rbx),%edi
   3a951:	mov    %r13,%rsi
   3a954:	callq  3a2b0 <emit_byte>
   3a959:	xor    %ebx,%ebx
   3a95b:	mov    $0x40,%r12d
   3a961:	mov    $0x100,%edx
   3a966:	mov    %rbx,%r15
   3a969:	jmpq   3aa0c <emit_restart+0xfc>
   3a96e:	movslq %r15d,%rsi
   3a971:	mov    0x148(%r13,%rsi,8),%rax
   3a979:	movslq 0x134(%r13),%rcx
   3a980:	test   %ecx,%ecx
   3a982:	je     3a99a <emit_restart+0x8a>
   3a984:	movslq 0x19c(%r13),%rcx
   3a98b:	test   %ecx,%ecx
   3a98d:	jne    3a9d9 <emit_restart+0xc9>
   3a98f:	movslq 0x1a4(%r13),%rcx
   3a996:	test   %ecx,%ecx
   3a998:	jne    3a9d9 <emit_restart+0xc9>
   3a99a:	movslq 0x14(%rax),%rcx
   3a99e:	mov    0x68(%r14,%rcx,8),%rdi
   3a9a3:	mov    %r12,%rdx
   3a9a6:	mov    %rax,%r12
   3a9a9:	mov    %rbx,%rax
   3a9ac:	mov    %rsi,%rbx
   3a9af:	mov    %rax,%rsi
   3a9b2:	callq  41e0 <memset@plt>
   3a9b7:	movl   $0x0,0x40(%r14,%rbx,4)
   3a9c0:	movl   $0x0,0x50(%r14,%rbx,4)
   3a9c9:	mov    %r12,%rax
   3a9cc:	mov    $0x40,%r12d
   3a9d2:	mov    $0x100,%edx
   3a9d7:	xor    %ebx,%ebx
   3a9d9:	movslq 0x134(%r13),%rcx
   3a9e0:	test   %ecx,%ecx
   3a9e2:	je     3a9ef <emit_restart+0xdf>
   3a9e4:	movslq 0x1a0(%r13),%rcx
   3a9eb:	test   %ecx,%ecx
   3a9ed:	je     3aa08 <emit_restart+0xf8>
   3a9ef:	movslq 0x18(%rax),%rax
   3a9f3:	mov    0xe8(%r14,%rax,8),%rdi
   3a9fb:	mov    %rbx,%rsi
   3a9fe:	callq  41e0 <memset@plt>
   3aa03:	mov    $0x100,%edx
   3aa08:	add    $0x1,%r15d
   3aa0c:	movslq 0x144(%r13),%rax
   3aa13:	cmp    %r15d,%eax
   3aa16:	jg     3a96e <emit_restart+0x5e>
   3aa1c:	movq   $0x0,0x18(%r14)
   3aa24:	movq   $0x10000,0x20(%r14)
   3aa2c:	movq   $0x0,0x28(%r14)
   3aa34:	movq   $0x0,0x30(%r14)
   3aa3c:	movl   $0xb,0x38(%r14)
   3aa44:	movl   $0xffffffff,0x3c(%r14)
   3aa4c:	mov    -0x10(%rbp),%r12
   3aa50:	mov    -0x8(%rbp),%rbx
   3aa54:	mov    -0x28(%rbp),%r15
   3aa58:	mov    -0x20(%rbp),%r14
   3aa5c:	mov    -0x18(%rbp),%r13
   3aa60:	leaveq 
   3aa61:	retq   
   3aa62:	data16 nopw %cs:0x0(%rax,%rax,1)
   3aa6d:	nopl   (%rax)

000000000003aa70 <encode_mcu_DC_first>:
   3aa70:	push   %rbp
   3aa71:	mov    %rsp,%rbp
   3aa74:	sub    $0x70,%rsp
   3aa78:	mov    %rbx,-0x8(%rbp)
   3aa7c:	mov    %r12,-0x10(%rbp)
   3aa80:	mov    %r13,-0x18(%rbp)
   3aa84:	mov    %r14,-0x20(%rbp)
   3aa88:	mov    %r15,-0x28(%rbp)
   3aa8c:	mov    %rsi,-0x60(%rbp)
   3aa90:	mov    0x1f0(%rdi),%r15
   3aa97:	mov    %r15,-0x58(%rbp)
   3aa9b:	mov    $0x1,%r13d
   3aaa1:	xor    %edx,%edx
   3aaa3:	mov    $0x4,%eax
   3aaa8:	mov    %rax,-0x40(%rbp)
   3aaac:	mov    $0x8,%eax
   3aab1:	mov    %rax,-0x38(%rbp)
   3aab5:	mov    0x118(%rdi),%eax
   3aabb:	test   %eax,%eax
   3aabd:	jne    3aaca <encode_mcu_DC_first+0x5a>
   3aabf:	mov    %rdi,%rbx
   3aac2:	mov    %rsi,%r12
   3aac5:	mov    %rdx,%r14
   3aac8:	jmp    3ab14 <encode_mcu_DC_first+0xa4>
   3aaca:	mov    0x60(%r15),%eax
   3aace:	test   %eax,%eax
   3aad0:	je     3ab39 <encode_mcu_DC_first+0xc9>
   3aad2:	mov    %rdi,%rbx
   3aad5:	mov    %rsi,%r12
   3aad8:	jmpq   3ab66 <encode_mcu_DC_first+0xf6>
   3aadd:	sar    %r12d
   3aae0:	mov    %r12,%rax
   3aae3:	and    %r15d,%eax
   3aae6:	test   %eax,%eax
   3aae8:	je     3aaed <encode_mcu_DC_first+0x7d>
   3aaea:	mov    %r13,%rdx
   3aaed:	mov    %rbx,%rdi
   3aaf0:	mov    %r14,%rsi
   3aaf3:	callq  3a610 <arith_encode>
   3aaf8:	xor    %edx,%edx
   3aafa:	mov    %r12,%rax
   3aafd:	and    $0xfffffffe,%eax
   3ab00:	test   %eax,%eax
   3ab02:	jne    3aadd <encode_mcu_DC_first+0x6d>
   3ab04:	mov    -0x58(%rbp),%r15
   3ab08:	mov    -0x68(%rbp),%r14
   3ab0c:	mov    -0x60(%rbp),%r12
   3ab10:	add    $0x1,%r14d
   3ab14:	movslq 0x170(%rbx),%rax
   3ab1b:	cmp    %r14d,%eax
   3ab1e:	jg     3ab76 <encode_mcu_DC_first+0x106>
   3ab20:	mov    %r13,%rax
   3ab23:	mov    -0x28(%rbp),%r15
   3ab27:	mov    -0x20(%rbp),%r14
   3ab2b:	mov    -0x18(%rbp),%r13
   3ab2f:	mov    -0x10(%rbp),%r12
   3ab33:	mov    -0x8(%rbp),%rbx
   3ab37:	leaveq 
   3ab38:	retq   
   3ab39:	mov    %rsi,%r12
   3ab3c:	mov    %rdx,%r14
   3ab3f:	movslq 0x64(%r15),%rsi
   3ab43:	mov    %rdi,%rbx
   3ab46:	callq  3a910 <emit_restart>
   3ab4b:	mov    0x118(%rbx),%eax
   3ab51:	mov    %eax,0x60(%r15)
   3ab55:	movslq 0x64(%r15),%rax
   3ab59:	add    $0x1,%eax
   3ab5c:	and    $0x7,%eax
   3ab5f:	mov    %eax,0x64(%r15)
   3ab63:	mov    %r14,%rdx
   3ab66:	mov    0x60(%r15),%eax
   3ab6a:	add    $0xffffffff,%eax
   3ab6d:	mov    %eax,0x60(%r15)
   3ab71:	mov    %rdx,%r14
   3ab74:	jmp    3ab14 <encode_mcu_DC_first+0xa4>
   3ab76:	movslq %r14d,%rcx
   3ab79:	movslq 0x174(%rbx,%rcx,4),%r8
   3ab81:	mov    0x148(%rbx,%r8,8),%rax
   3ab89:	movslq 0x14(%rax),%r9
   3ab8d:	movslq 0x50(%r15,%r8,4),%rsi
   3ab92:	add    0x68(%r15,%r9,8),%rsi
   3ab97:	mov    (%r12,%rcx,8),%rax
   3ab9b:	movswq (%rax),%rax
   3ab9f:	mov    0x1a8(%rbx),%ecx
   3aba5:	sar    %cl,%eax
   3aba7:	movslq 0x40(%r15,%r8,4),%r10
   3abac:	cmp    %eax,%r10d
   3abaf:	je     3ac08 <encode_mcu_DC_first+0x198>
   3abb1:	mov    %eax,0x40(%r15,%r8,4)
   3abb6:	mov    %rbx,%rdi
   3abb9:	mov    %rsi,%rcx
   3abbc:	mov    %r14,-0x68(%rbp)
   3abc0:	mov    %r8,-0x48(%rbp)
   3abc4:	mov    %r9,-0x30(%rbp)
   3abc8:	mov    %r13,%rdx
   3abcb:	mov    %rax,%r13
   3abce:	mov    %r10,%r12
   3abd1:	mov    %rsi,%r14
   3abd4:	mov    %rcx,%rsi
   3abd7:	callq  3a610 <arith_encode>
   3abdc:	mov    %r13,%rax
   3abdf:	sub    %r12d,%eax
   3abe2:	test   %eax,%eax
   3abe4:	jg     3ac29 <encode_mcu_DC_first+0x1b9>
   3abe6:	lea    0x1(%r14),%rsi
   3abea:	mov    %rbx,%rdi
   3abed:	mov    $0x1,%edx
   3abf2:	callq  3a610 <arith_encode>
   3abf7:	sub    %r13d,%r12d
   3abfa:	add    $0x3,%r14
   3abfe:	xor    %edx,%edx
   3ac00:	pushq  -0x38(%rbp)
   3ac03:	popq   -0x50(%rbp)
   3ac06:	jmp    3ac4b <encode_mcu_DC_first+0x1db>
   3ac08:	mov    %r8,%r13
   3ac0b:	mov    %rbx,%rdi
   3ac0e:	callq  3a610 <arith_encode>
   3ac13:	movl   $0x0,0x50(%r15,%r13,4)
   3ac1c:	xor    %edx,%edx
   3ac1e:	mov    $0x1,%r13d
   3ac24:	jmpq   3ab10 <encode_mcu_DC_first+0xa0>
   3ac29:	mov    %rax,%r12
   3ac2c:	lea    0x1(%r14),%rsi
   3ac30:	mov    %rbx,%rdi
   3ac33:	xor    %r13d,%r13d
   3ac36:	mov    %r13,%rdx
   3ac39:	callq  3a610 <arith_encode>
   3ac3e:	add    $0x2,%r14
   3ac42:	mov    %r13,%rdx
   3ac45:	pushq  -0x40(%rbp)
   3ac48:	popq   -0x50(%rbp)
   3ac4b:	mov    -0x50(%rbp),%rcx
   3ac4f:	mov    -0x48(%rbp),%rax
   3ac53:	mov    %ecx,0x50(%r15,%rax,4)
   3ac58:	lea    -0x1(%r12),%r13d
   3ac5d:	mov    %r13,-0x50(%rbp)
   3ac61:	test   %r13d,%r13d
   3ac64:	jne    3ac6e <encode_mcu_DC_first+0x1fe>
   3ac66:	mov    %rax,%r13
   3ac69:	mov    %rdx,%r12
   3ac6c:	jmp    3acc0 <encode_mcu_DC_first+0x250>
   3ac6e:	mov    %r14,%rsi
   3ac71:	mov    %rbx,%rdi
   3ac74:	mov    $0x1,%r12d
   3ac7a:	mov    %r12,%rdx
   3ac7d:	callq  3a610 <arith_encode>
   3ac82:	mov    -0x30(%rbp),%rax
   3ac86:	mov    0x68(%r15,%rax,8),%r14
   3ac8b:	add    $0x14,%r14
   3ac8f:	mov    %r12,%r15
   3ac92:	jmp    3acac <encode_mcu_DC_first+0x23c>
   3ac94:	mov    %rbx,%rdi
   3ac97:	mov    %r14,%rsi
   3ac9a:	mov    %r15,%rdx
   3ac9d:	callq  3a610 <arith_encode>
   3aca2:	sar    %r13d
   3aca5:	add    $0x1,%r14
   3aca9:	add    %r12d,%r12d
   3acac:	mov    %r13,%rax
   3acaf:	and    $0xfffffffe,%eax
   3acb2:	test   %eax,%eax
   3acb4:	jne    3ac94 <encode_mcu_DC_first+0x224>
   3acb6:	mov    -0x58(%rbp),%r15
   3acba:	xor    %edx,%edx
   3acbc:	mov    -0x48(%rbp),%r13
   3acc0:	mov    %rbx,%rdi
   3acc3:	mov    %r14,%rsi
   3acc6:	callq  3a610 <arith_encode>
   3accb:	mov    %r13,%rsi
   3acce:	mov    -0x30(%rbp),%rax
   3acd2:	movzbl 0xc0(%rbx,%rax,1),%ecx
   3acda:	mov    $0x1,%r13d
   3ace0:	mov    %r13,%rdx
   3ace3:	shl    %cl,%rdx
   3ace6:	sar    %rdx
   3ace9:	cmp    %edx,%r12d
   3acec:	jl     3ad13 <encode_mcu_DC_first+0x2a3>
   3acee:	movzbl 0xd0(%rax,%rbx,1),%ecx
   3acf6:	mov    %r13,%rax
   3acf9:	shl    %cl,%rax
   3acfc:	sar    %rax
   3acff:	cmp    %eax,%r12d
   3ad02:	jle    3ad1c <encode_mcu_DC_first+0x2ac>
   3ad04:	movslq 0x50(%r15,%rsi,4),%rax
   3ad09:	add    $0x8,%eax
   3ad0c:	mov    %eax,0x50(%r15,%rsi,4)
   3ad11:	jmp    3ad1c <encode_mcu_DC_first+0x2ac>
   3ad13:	movl   $0x0,0x50(%r15,%rsi,4)
   3ad1c:	add    $0xe,%r14
   3ad20:	mov    -0x50(%rbp),%r15
   3ad24:	xor    %edx,%edx
   3ad26:	jmpq   3aafa <encode_mcu_DC_first+0x8a>
   3ad2b:	nopl   0x0(%rax,%rax,1)

000000000003ad30 <encode_mcu_AC_first>:
   3ad30:	push   %rbp
   3ad31:	mov    %rsp,%rbp
   3ad34:	sub    $0x80,%rsp
   3ad3b:	mov    %r13,-0x18(%rbp)
   3ad3f:	mov    %r14,-0x20(%rbp)
   3ad43:	mov    %r15,-0x28(%rbp)
   3ad47:	mov    0x1f0(%rdi),%rax
   3ad4e:	mov    %rax,-0x58(%rbp)
   3ad52:	mov    0x118(%rdi),%ecx
   3ad58:	test   %ecx,%ecx
   3ad5a:	jne    3ad67 <encode_mcu_AC_first+0x37>
   3ad5c:	mov    %r12,%r8
   3ad5f:	mov    %rbx,%r12
   3ad62:	mov    %rdi,%rbx
   3ad65:	jmp    3adbb <encode_mcu_AC_first+0x8b>
   3ad67:	mov    0x60(%rax),%ecx
   3ad6a:	test   %ecx,%ecx
   3ad6c:	je     3ad79 <encode_mcu_AC_first+0x49>
   3ad6e:	mov    %r12,%r8
   3ad71:	mov    %rbx,%r12
   3ad74:	mov    %rdi,%rbx
   3ad77:	jmp    3adb2 <encode_mcu_AC_first+0x82>
   3ad79:	mov    %r12,%r13
   3ad7c:	mov    %rbx,%r12
   3ad7f:	mov    %rax,%r14
   3ad82:	mov    %rsi,%r15
   3ad85:	movslq 0x64(%r14),%rsi
   3ad89:	mov    %rdi,%rbx
   3ad8c:	callq  3a910 <emit_restart>
   3ad91:	mov    0x118(%rbx),%eax
   3ad97:	mov    %eax,0x60(%r14)
   3ad9b:	movslq 0x64(%r14),%rax
   3ad9f:	add    $0x1,%eax
   3ada2:	and    $0x7,%eax
   3ada5:	mov    %eax,0x64(%r14)
   3ada9:	mov    %r14,%rax
   3adac:	mov    %r15,%rsi
   3adaf:	mov    %r13,%r8
   3adb2:	mov    0x60(%rax),%ecx
   3adb5:	add    $0xffffffff,%ecx
   3adb8:	mov    %ecx,0x60(%rax)
   3adbb:	mov    0x148(%rbx),%rcx
   3adc2:	movslq 0x18(%rcx),%rdi
   3adc6:	mov    %rdi,-0x60(%rbp)
   3adca:	mov    (%rsi),%r14
   3adcd:	mov    %r14,-0x30(%rbp)
   3add1:	movslq 0x1a0(%rbx),%rsi
   3add8:	mov    0x331f9(%rip),%r13        # 6dfd8 <jpeg_natural_order@@LIBJPEG_6.2+0x129f4>
   3addf:	mov    %r13,-0x38(%rbp)
   3ade3:	jmp    3ae08 <encode_mcu_AC_first+0xd8>
   3ade5:	movslq %esi,%rcx
   3ade8:	movslq 0x0(%r13,%rcx,4),%rcx
   3aded:	movswq (%r14,%rcx,2),%rdx
   3adf2:	test   %dx,%dx
   3adf5:	jns    3ae12 <encode_mcu_AC_first+0xe2>
   3adf7:	neg    %edx
   3adf9:	mov    0x1a8(%rbx),%ecx
   3adff:	sar    %cl,%edx
   3ae01:	test   %edx,%edx
   3ae03:	jne    3ae1e <encode_mcu_AC_first+0xee>
   3ae05:	add    $0xffffffff,%esi
   3ae08:	mov    %rsi,-0x78(%rbp)
   3ae0c:	test   %esi,%esi
   3ae0e:	jg     3ade5 <encode_mcu_AC_first+0xb5>
   3ae10:	jmp    3ae1e <encode_mcu_AC_first+0xee>
   3ae12:	mov    0x1a8(%rbx),%ecx
   3ae18:	sar    %cl,%edx
   3ae1a:	test   %edx,%edx
   3ae1c:	je     3ae05 <encode_mcu_AC_first+0xd5>
   3ae1e:	movslq 0x19c(%rbx),%r15
   3ae25:	xor    %edx,%edx
   3ae27:	lea    0x168(%rax),%rcx
   3ae2e:	mov    %rcx,-0x40(%rbp)
   3ae32:	mov    $0xbd,%ecx
   3ae37:	mov    %rcx,-0x50(%rbp)
   3ae3b:	mov    $0xd9,%ecx
   3ae40:	mov    %rcx,-0x48(%rbp)
   3ae44:	mov    %r12,-0x8(%rbp)
   3ae48:	mov    %r8,-0x10(%rbp)
   3ae4c:	jmp    3ae8d <encode_mcu_AC_first+0x15d>
   3ae4e:	sar    %r12d
   3ae51:	mov    %r12,%rax
   3ae54:	and    %r14d,%eax
   3ae57:	test   %eax,%eax
   3ae59:	je     3ae5e <encode_mcu_AC_first+0x12e>
   3ae5b:	mov    %r13,%rdx
   3ae5e:	mov    %rbx,%rdi
   3ae61:	mov    %r15,%rsi
   3ae64:	callq  3a610 <arith_encode>
   3ae69:	xor    %edx,%edx
   3ae6b:	mov    %r12,%rax
   3ae6e:	and    $0xfffffffe,%eax
   3ae71:	test   %eax,%eax
   3ae73:	jne    3ae4e <encode_mcu_AC_first+0x11e>
   3ae75:	mov    -0x30(%rbp),%r14
   3ae79:	mov    -0x38(%rbp),%r13
   3ae7d:	mov    -0x70(%rbp),%r15
   3ae81:	mov    -0x60(%rbp),%rdi
   3ae85:	mov    -0x58(%rbp),%rax
   3ae89:	mov    -0x78(%rbp),%rsi
   3ae8d:	cmp    %esi,%r15d
   3ae90:	jle    3aeb6 <encode_mcu_AC_first+0x186>
   3ae92:	cmp    0x1a0(%rbx),%r15d
   3ae99:	jle    3aed5 <encode_mcu_AC_first+0x1a5>
   3ae9b:	mov    -0x10(%rbp),%r12
   3ae9f:	mov    -0x8(%rbp),%rbx
   3aea3:	mov    $0x1,%eax
   3aea8:	mov    -0x28(%rbp),%r15
   3aeac:	mov    -0x20(%rbp),%r14
   3aeb0:	mov    -0x18(%rbp),%r13
   3aeb4:	leaveq 
   3aeb5:	retq   
   3aeb6:	lea    -0x3(%r15,%r15,2),%ecx
   3aebb:	movslq %ecx,%r12
   3aebe:	add    0xe8(%rax,%rdi,8),%r12
   3aec6:	mov    %rbx,%rdi
   3aec9:	mov    %r12,%rsi
   3aecc:	callq  3a610 <arith_encode>
   3aed1:	xor    %edx,%edx
   3aed3:	jmp    3af31 <encode_mcu_AC_first+0x201>
   3aed5:	lea    -0x3(%r15,%r15,2),%ecx
   3aeda:	movslq %ecx,%rsi
   3aedd:	add    0xe8(%rax,%rdi,8),%rsi
   3aee5:	mov    %rbx,%rdi
   3aee8:	mov    $0x1,%r12d
   3aeee:	mov    %r12,%rdx
   3aef1:	callq  3a610 <arith_encode>
   3aef6:	mov    %r12,%rax
   3aef9:	mov    -0x10(%rbp),%r12
   3aefd:	mov    -0x8(%rbp),%rbx
   3af01:	mov    -0x28(%rbp),%r15
   3af05:	mov    -0x20(%rbp),%r14
   3af09:	mov    -0x18(%rbp),%r13
   3af0d:	leaveq 
   3af0e:	retq   
   3af0f:	mov    0x1a8(%rbx),%ecx
   3af15:	sar    %cl,%eax
   3af17:	test   %eax,%eax
   3af19:	jne    3af89 <encode_mcu_AC_first+0x259>
   3af1b:	mov    %r8,%r15
   3af1e:	lea    0x1(%r12),%rsi
   3af23:	mov    %rbx,%rdi
   3af26:	callq  3a610 <arith_encode>
   3af2b:	add    $0x3,%r12
   3af2f:	xor    %edx,%edx
   3af31:	lea    0x1(%r15),%r8d
   3af35:	movslq %r15d,%rax
   3af38:	movslq 0x0(%r13,%rax,4),%rax
   3af3d:	movswq (%r14,%rax,2),%rax
   3af42:	test   %ax,%ax
   3af45:	jns    3af0f <encode_mcu_AC_first+0x1df>
   3af47:	neg    %eax
   3af49:	mov    0x1a8(%rbx),%ecx
   3af4f:	sar    %cl,%eax
   3af51:	test   %eax,%eax
   3af53:	je     3afe9 <encode_mcu_AC_first+0x2b9>
   3af59:	lea    0x1(%r12),%rsi
   3af5e:	mov    %rbx,%rdi
   3af61:	mov    $0x1,%r13d
   3af67:	mov    %r13,%rdx
   3af6a:	mov    %r8,-0x70(%rbp)
   3af6e:	mov    %rax,%r14
   3af71:	callq  3a610 <arith_encode>
   3af76:	mov    %rbx,%rdi
   3af79:	mov    -0x40(%rbp),%rsi
   3af7d:	mov    %r13,%rdx
   3af80:	callq  3a610 <arith_encode>
   3af85:	xor    %edx,%edx
   3af87:	jmp    3afc0 <encode_mcu_AC_first+0x290>
   3af89:	lea    0x1(%r12),%rsi
   3af8e:	mov    %rbx,%rdi
   3af91:	mov    $0x1,%ecx
   3af96:	mov    %r8,-0x70(%rbp)
   3af9a:	mov    %rdx,%r13
   3af9d:	mov    %rcx,%rdx
   3afa0:	mov    %rax,%r14
   3afa3:	callq  3a610 <arith_encode>
   3afa8:	mov    %rbx,%rdi
   3afab:	mov    -0x40(%rbp),%rsi
   3afaf:	mov    %r13,%rdx
   3afb2:	callq  3a610 <arith_encode>
   3afb7:	mov    %r13,%rdx
   3afba:	mov    $0x1,%r13d
   3afc0:	add    $0x2,%r12
   3afc4:	add    $0xffffffff,%r14d
   3afc8:	test   %r14d,%r14d
   3afcb:	jne    3aff1 <encode_mcu_AC_first+0x2c1>
   3afcd:	mov    %r12,%r15
   3afd0:	mov    %rdx,%r12
   3afd3:	mov    %rbx,%rdi
   3afd6:	mov    %r15,%rsi
   3afd9:	callq  3a610 <arith_encode>
   3afde:	add    $0xe,%r15
   3afe2:	xor    %edx,%edx
   3afe4:	jmpq   3ae6b <encode_mcu_AC_first+0x13b>
   3afe9:	mov    %r8,%r15
   3afec:	jmpq   3af1e <encode_mcu_AC_first+0x1ee>
   3aff1:	mov    %rbx,%rdi
   3aff4:	mov    %r12,%rsi
   3aff7:	mov    %r13,%rdx
   3affa:	callq  3a610 <arith_encode>
   3afff:	mov    %r14,%rax
   3b002:	and    $0xfffffffe,%eax
   3b005:	test   %eax,%eax
   3b007:	jne    3b013 <encode_mcu_AC_first+0x2e3>
   3b009:	mov    %r12,%r15
   3b00c:	xor    %edx,%edx
   3b00e:	mov    %r13,%r12
   3b011:	jmp    3afd3 <encode_mcu_AC_first+0x2a3>
   3b013:	mov    %r12,%rsi
   3b016:	mov    %rbx,%rdi
   3b019:	mov    %r13,%rdx
   3b01c:	callq  3a610 <arith_encode>
   3b021:	mov    -0x60(%rbp),%rdx
   3b025:	mov    -0x58(%rbp),%rax
   3b029:	mov    0xe8(%rax,%rdx,8),%rcx
   3b031:	movzbl 0xe0(%rbx,%rdx,1),%eax
   3b039:	cmp    %eax,%r15d
   3b03c:	jle    3b046 <encode_mcu_AC_first+0x316>
   3b03e:	pushq  -0x48(%rbp)
   3b041:	popq   -0x68(%rbp)
   3b044:	jmp    3b04c <encode_mcu_AC_first+0x31c>
   3b046:	pushq  -0x50(%rbp)
   3b049:	popq   -0x68(%rbp)
   3b04c:	mov    %r14,%rdx
   3b04f:	sar    %edx
   3b051:	mov    -0x68(%rbp),%rax
   3b055:	lea    (%rax,%rcx,1),%r15
   3b059:	mov    %r14,-0x68(%rbp)
   3b05d:	mov    %rdx,%r14
   3b060:	mov    $0x2,%r12d
   3b066:	jmp    3b080 <encode_mcu_AC_first+0x350>
   3b068:	mov    %rbx,%rdi
   3b06b:	mov    %r15,%rsi
   3b06e:	mov    %r13,%rdx
   3b071:	callq  3a610 <arith_encode>
   3b076:	sar    %r14d
   3b079:	add    $0x1,%r15
   3b07d:	add    %r12d,%r12d
   3b080:	mov    %r14,%rax
   3b083:	and    $0xfffffffe,%eax
   3b086:	test   %eax,%eax
   3b088:	jne    3b068 <encode_mcu_AC_first+0x338>
   3b08a:	mov    -0x68(%rbp),%r14
   3b08e:	xor    %edx,%edx
   3b090:	jmpq   3afd3 <encode_mcu_AC_first+0x2a3>
   3b095:	data16 nopw %cs:0x0(%rax,%rax,1)

000000000003b0a0 <encode_mcu_DC_refine>:
   3b0a0:	push   %rbp
   3b0a1:	mov    %rsp,%rbp
   3b0a4:	sub    $0x30,%rsp
   3b0a8:	mov    %r13,-0x18(%rbp)
   3b0ac:	mov    %r14,-0x20(%rbp)
   3b0b0:	mov    %r15,-0x28(%rbp)
   3b0b4:	mov    %rbx,-0x8(%rbp)
   3b0b8:	mov    %r12,-0x10(%rbp)
   3b0bc:	mov    0x1f0(%rdi),%r13
   3b0c3:	mov    0x118(%rdi),%eax
   3b0c9:	test   %eax,%eax
   3b0cb:	jne    3b0d5 <encode_mcu_DC_refine+0x35>
   3b0cd:	mov    %rdi,%rbx
   3b0d0:	mov    %rsi,%r12
   3b0d3:	jmp    3b117 <encode_mcu_DC_refine+0x77>
   3b0d5:	mov    0x60(%r13),%eax
   3b0d9:	test   %eax,%eax
   3b0db:	je     3b0e5 <encode_mcu_DC_refine+0x45>
   3b0dd:	mov    %rdi,%rbx
   3b0e0:	mov    %rsi,%r12
   3b0e3:	jmp    3b10c <encode_mcu_DC_refine+0x6c>
   3b0e5:	mov    %rsi,%r12
   3b0e8:	movslq 0x64(%r13),%rsi
   3b0ec:	mov    %rdi,%rbx
   3b0ef:	callq  3a910 <emit_restart>
   3b0f4:	mov    0x118(%rbx),%eax
   3b0fa:	mov    %eax,0x60(%r13)
   3b0fe:	movslq 0x64(%r13),%rax
   3b102:	add    $0x1,%eax
   3b105:	and    $0x7,%eax
   3b108:	mov    %eax,0x64(%r13)
   3b10c:	mov    0x60(%r13),%eax
   3b110:	add    $0xffffffff,%eax
   3b113:	mov    %eax,0x60(%r13)
   3b117:	mov    0x1a8(%rbx),%ecx
   3b11d:	add    $0x168,%r13
   3b124:	xor    %r14d,%r14d
   3b127:	jmp    3b14e <encode_mcu_DC_refine+0xae>
   3b129:	movslq %r14d,%rax
   3b12c:	mov    (%r12,%rax,8),%rax
   3b130:	movswq (%rax),%rdx
   3b134:	sar    %cl,%edx
   3b136:	and    $0x1,%edx
   3b139:	mov    %rcx,%r15
   3b13c:	mov    %rbx,%rdi
   3b13f:	mov    %r13,%rsi
   3b142:	callq  3a610 <arith_encode>
   3b147:	add    $0x1,%r14d
   3b14b:	mov    %r15,%rcx
   3b14e:	movslq 0x170(%rbx),%rax
   3b155:	cmp    %r14d,%eax
   3b158:	jg     3b129 <encode_mcu_DC_refine+0x89>
   3b15a:	mov    $0x1,%eax
   3b15f:	mov    -0x10(%rbp),%r12
   3b163:	mov    -0x8(%rbp),%rbx
   3b167:	mov    -0x28(%rbp),%r15
   3b16b:	mov    -0x20(%rbp),%r14
   3b16f:	mov    -0x18(%rbp),%r13
   3b173:	leaveq 
   3b174:	retq   
   3b175:	data16 nopw %cs:0x0(%rax,%rax,1)

000000000003b180 <encode_mcu_AC_refine>:
   3b180:	push   %rbp
   3b181:	mov    %rsp,%rbp
   3b184:	sub    $0x50,%rsp
   3b188:	mov    %r13,-0x18(%rbp)
   3b18c:	mov    %r14,-0x20(%rbp)
   3b190:	mov    %r15,-0x28(%rbp)
   3b194:	mov    0x1f0(%rdi),%rax
   3b19b:	mov    %rax,-0x30(%rbp)
   3b19f:	mov    0x118(%rdi),%ecx
   3b1a5:	test   %ecx,%ecx
   3b1a7:	jne    3b1b1 <encode_mcu_AC_refine+0x31>
   3b1a9:	mov    %rbx,%r8
   3b1ac:	mov    %rdi,%rbx
   3b1af:	jmp    3b1ff <encode_mcu_AC_refine+0x7f>
   3b1b1:	mov    0x60(%rax),%ecx
   3b1b4:	test   %ecx,%ecx
   3b1b6:	je     3b1c0 <encode_mcu_AC_refine+0x40>
   3b1b8:	mov    %rbx,%r8
   3b1bb:	mov    %rdi,%rbx
   3b1be:	jmp    3b1f6 <encode_mcu_AC_refine+0x76>
   3b1c0:	mov    %rbx,%r13
   3b1c3:	mov    %rax,%r14
   3b1c6:	mov    %rsi,%r15
   3b1c9:	movslq 0x64(%r14),%rsi
   3b1cd:	mov    %rdi,%rbx
   3b1d0:	callq  3a910 <emit_restart>
   3b1d5:	mov    0x118(%rbx),%eax
   3b1db:	mov    %eax,0x60(%r14)
   3b1df:	movslq 0x64(%r14),%rax
   3b1e3:	add    $0x1,%eax
   3b1e6:	and    $0x7,%eax
   3b1e9:	mov    %eax,0x64(%r14)
   3b1ed:	mov    %r14,%rax
   3b1f0:	mov    %r15,%rsi
   3b1f3:	mov    %r13,%r8
   3b1f6:	mov    0x60(%rax),%ecx
   3b1f9:	add    $0xffffffff,%ecx
   3b1fc:	mov    %ecx,0x60(%rax)
   3b1ff:	mov    0x148(%rbx),%rcx
   3b206:	movslq 0x18(%rcx),%rdi
   3b20a:	mov    %rdi,-0x38(%rbp)
   3b20e:	mov    (%rsi),%r13
   3b211:	movslq 0x1a0(%rbx),%rsi
   3b218:	mov    0x32db9(%rip),%r14        # 6dfd8 <jpeg_natural_order@@LIBJPEG_6.2+0x129f4>
   3b21f:	jmp    3b244 <encode_mcu_AC_refine+0xc4>
   3b221:	movslq %esi,%rcx
   3b224:	movslq (%r14,%rcx,4),%rcx
   3b228:	movswq 0x0(%r13,%rcx,2),%rdx
   3b22e:	test   %dx,%dx
   3b231:	jns    3b251 <encode_mcu_AC_refine+0xd1>
   3b233:	neg    %edx
   3b235:	mov    0x1a8(%rbx),%ecx
   3b23b:	sar    %cl,%edx
   3b23d:	test   %edx,%edx
   3b23f:	jne    3b262 <encode_mcu_AC_refine+0xe2>
   3b241:	add    $0xffffffff,%esi
   3b244:	mov    %rsi,-0x50(%rbp)
   3b248:	test   %esi,%esi
   3b24a:	jg     3b221 <encode_mcu_AC_refine+0xa1>
   3b24c:	mov    %rsi,%r9
   3b24f:	jmp    3b28b <encode_mcu_AC_refine+0x10b>
   3b251:	mov    0x1a8(%rbx),%ecx
   3b257:	sar    %cl,%edx
   3b259:	test   %edx,%edx
   3b25b:	je     3b241 <encode_mcu_AC_refine+0xc1>
   3b25d:	mov    %rsi,%r9
   3b260:	jmp    3b28b <encode_mcu_AC_refine+0x10b>
   3b262:	mov    %rsi,%r9
   3b265:	jmp    3b28b <encode_mcu_AC_refine+0x10b>
   3b267:	movslq %r9d,%rcx
   3b26a:	movslq (%r14,%rcx,4),%rcx
   3b26e:	movswq 0x0(%r13,%rcx,2),%rdx
   3b274:	test   %dx,%dx
   3b277:	jns    3b296 <encode_mcu_AC_refine+0x116>
   3b279:	neg    %edx
   3b27b:	mov    0x1a4(%rbx),%ecx
   3b281:	sar    %cl,%edx
   3b283:	test   %edx,%edx
   3b285:	jne    3b2a2 <encode_mcu_AC_refine+0x122>
   3b287:	add    $0xffffffff,%r9d
   3b28b:	mov    %r9,-0x48(%rbp)
   3b28f:	test   %r9d,%r9d
   3b292:	jg     3b267 <encode_mcu_AC_refine+0xe7>
   3b294:	jmp    3b2a2 <encode_mcu_AC_refine+0x122>
   3b296:	mov    0x1a4(%rbx),%ecx
   3b29c:	sar    %cl,%edx
   3b29e:	test   %edx,%edx
   3b2a0:	je     3b287 <encode_mcu_AC_refine+0x107>
   3b2a2:	movslq 0x19c(%rbx),%r15
   3b2a9:	lea    0x168(%rax),%rcx
   3b2b0:	mov    %rcx,-0x40(%rbp)
   3b2b4:	xor    %edx,%edx
   3b2b6:	mov    %r8,-0x8(%rbp)
   3b2ba:	mov    %r12,-0x10(%rbp)
   3b2be:	jmp    3b2ec <encode_mcu_AC_refine+0x16c>
   3b2c0:	lea    0x2(%r12),%rsi
   3b2c5:	and    $0x1,%eax
   3b2c8:	mov    %rdx,%r12
   3b2cb:	mov    %rax,%rdx
   3b2ce:	mov    %r8,%r15
   3b2d1:	mov    %rbx,%rdi
   3b2d4:	callq  3a610 <arith_encode>
   3b2d9:	mov    %r12,%rdx
   3b2dc:	mov    -0x48(%rbp),%r9
   3b2e0:	mov    -0x38(%rbp),%rdi
   3b2e4:	mov    -0x30(%rbp),%rax
   3b2e8:	mov    -0x50(%rbp),%rsi
   3b2ec:	cmp    %esi,%r15d
   3b2ef:	jle    3b315 <encode_mcu_AC_refine+0x195>
   3b2f1:	cmp    0x1a0(%rbx),%r15d
   3b2f8:	jle    3b339 <encode_mcu_AC_refine+0x1b9>
   3b2fa:	mov    -0x10(%rbp),%r12
   3b2fe:	mov    -0x8(%rbp),%rbx
   3b302:	mov    $0x1,%eax
   3b307:	mov    -0x28(%rbp),%r15
   3b30b:	mov    -0x20(%rbp),%r14
   3b30f:	mov    -0x18(%rbp),%r13
   3b313:	leaveq 
   3b314:	retq   
   3b315:	lea    -0x3(%r15,%r15,2),%ecx
   3b31a:	movslq %ecx,%r12
   3b31d:	add    0xe8(%rax,%rdi,8),%r12
   3b325:	cmp    %r9d,%r15d
   3b328:	jle    3b399 <encode_mcu_AC_refine+0x219>
   3b32a:	mov    %rbx,%rdi
   3b32d:	mov    %r12,%rsi
   3b330:	callq  3a610 <arith_encode>
   3b335:	xor    %edx,%edx
   3b337:	jmp    3b399 <encode_mcu_AC_refine+0x219>
   3b339:	lea    -0x3(%r15,%r15,2),%ecx
   3b33e:	movslq %ecx,%rsi
   3b341:	add    0xe8(%rax,%rdi,8),%rsi
   3b349:	mov    %rbx,%rdi
   3b34c:	mov    $0x1,%r12d
   3b352:	mov    %r12,%rdx
   3b355:	callq  3a610 <arith_encode>
   3b35a:	mov    %r12,%rax
   3b35d:	mov    -0x10(%rbp),%r12
   3b361:	mov    -0x8(%rbp),%rbx
   3b365:	mov    -0x28(%rbp),%r15
   3b369:	mov    -0x20(%rbp),%r14
   3b36d:	mov    -0x18(%rbp),%r13
   3b371:	leaveq 
   3b372:	retq   
   3b373:	mov    0x1a8(%rbx),%ecx
   3b379:	sar    %cl,%eax
   3b37b:	test   %eax,%eax
   3b37d:	jne    3b40e <encode_mcu_AC_refine+0x28e>
   3b383:	mov    %r8,%r15
   3b386:	lea    0x1(%r12),%rsi
   3b38b:	mov    %rbx,%rdi
   3b38e:	callq  3a610 <arith_encode>
   3b393:	add    $0x3,%r12
   3b397:	xor    %edx,%edx
   3b399:	lea    0x1(%r15),%r8d
   3b39d:	movslq %r15d,%rax
   3b3a0:	movslq (%r14,%rax,4),%rax
   3b3a4:	movswq 0x0(%r13,%rax,2),%rax
   3b3aa:	test   %ax,%ax
   3b3ad:	jns    3b373 <encode_mcu_AC_refine+0x1f3>
   3b3af:	neg    %eax
   3b3b1:	mov    0x1a8(%rbx),%ecx
   3b3b7:	sar    %cl,%eax
   3b3b9:	test   %eax,%eax
   3b3bb:	je     3b45b <encode_mcu_AC_refine+0x2db>
   3b3c1:	mov    %rax,%rcx
   3b3c4:	and    $0xfffffffe,%ecx
   3b3c7:	test   %ecx,%ecx
   3b3c9:	jne    3b463 <encode_mcu_AC_refine+0x2e3>
   3b3cf:	lea    0x1(%r12),%rsi
   3b3d4:	mov    %r8,%r15
   3b3d7:	mov    %rbx,%rdi
   3b3da:	mov    $0x1,%r12d
   3b3e0:	mov    %r12,%rdx
   3b3e3:	callq  3a610 <arith_encode>
   3b3e8:	mov    %r12,%rdx
   3b3eb:	mov    %rbx,%rdi
   3b3ee:	mov    -0x40(%rbp),%rsi
   3b3f2:	callq  3a610 <arith_encode>
   3b3f7:	mov    -0x48(%rbp),%r9
   3b3fb:	mov    -0x38(%rbp),%rdi
   3b3ff:	mov    -0x30(%rbp),%rax
   3b403:	mov    -0x50(%rbp),%rsi
   3b407:	xor    %edx,%edx
   3b409:	jmpq   3b2ec <encode_mcu_AC_refine+0x16c>
   3b40e:	mov    %rax,%rcx
   3b411:	and    $0xfffffffe,%ecx
   3b414:	test   %ecx,%ecx
   3b416:	jne    3b2c0 <encode_mcu_AC_refine+0x140>
   3b41c:	lea    0x1(%r12),%rsi
   3b421:	mov    %rdx,%r12
   3b424:	mov    %r8,%r15
   3b427:	mov    %rbx,%rdi
   3b42a:	mov    $0x1,%edx
   3b42f:	callq  3a610 <arith_encode>
   3b434:	mov    %rbx,%rdi
   3b437:	mov    -0x40(%rbp),%rsi
   3b43b:	mov    %r12,%rdx
   3b43e:	callq  3a610 <arith_encode>
   3b443:	mov    %r12,%rdx
   3b446:	mov    -0x48(%rbp),%r9
   3b44a:	mov    -0x38(%rbp),%rdi
   3b44e:	mov    -0x30(%rbp),%rax
   3b452:	mov    -0x50(%rbp),%rsi
   3b456:	jmpq   3b2ec <encode_mcu_AC_refine+0x16c>
   3b45b:	mov    %r8,%r15
   3b45e:	jmpq   3b386 <encode_mcu_AC_refine+0x206>
   3b463:	lea    0x2(%r12),%rsi
   3b468:	and    $0x1,%eax
   3b46b:	mov    %rdx,%r12
   3b46e:	mov    %rax,%rdx
   3b471:	mov    %r8,%r15
   3b474:	mov    %rbx,%rdi
   3b477:	callq  3a610 <arith_encode>
   3b47c:	mov    %r12,%rdx
   3b47f:	mov    -0x48(%rbp),%r9
   3b483:	mov    -0x38(%rbp),%rdi
   3b487:	mov    -0x30(%rbp),%rax
   3b48b:	mov    -0x50(%rbp),%rsi
   3b48f:	jmpq   3b2ec <encode_mcu_AC_refine+0x16c>
   3b494:	data16 nopw %cs:0x0(%rax,%rax,1)
   3b49f:	nop

000000000003b4a0 <encode_mcu>:
   3b4a0:	push   %rbp
   3b4a1:	mov    %rsp,%rbp
   3b4a4:	sub    $0xb0,%rsp
   3b4ab:	mov    %r15,-0x28(%rbp)
   3b4af:	mov    %r14,-0x20(%rbp)
   3b4b3:	mov    %rbx,-0x8(%rbp)
   3b4b7:	mov    %r12,-0x10(%rbp)
   3b4bb:	mov    %r13,-0x18(%rbp)
   3b4bf:	mov    %rsi,-0xa0(%rbp)
   3b4c6:	mov    %rdi,-0x98(%rbp)
   3b4cd:	mov    0x32b04(%rip),%r13        # 6dfd8 <jpeg_natural_order@@LIBJPEG_6.2+0x129f4>
   3b4d4:	mov    %r13,-0x38(%rbp)
   3b4d8:	mov    $0x1,%r12d
   3b4de:	xor    %edx,%edx
   3b4e0:	mov    0x1f0(%rdi),%r8
   3b4e7:	mov    %r8,-0x90(%rbp)
   3b4ee:	lea    0x168(%r8),%rax
   3b4f5:	mov    %rax,-0x50(%rbp)
   3b4f9:	mov    $0x4,%eax
   3b4fe:	mov    %rax,-0x70(%rbp)
   3b502:	mov    $0x8,%eax
   3b507:	mov    %rax,-0x68(%rbp)
   3b50b:	mov    $0xbd,%eax
   3b510:	mov    %rax,-0x48(%rbp)
   3b514:	mov    $0xd9,%eax
   3b519:	mov    %rax,-0x40(%rbp)
   3b51d:	mov    0x118(%rdi),%eax
   3b523:	test   %eax,%eax
   3b525:	jne    3b52f <encode_mcu+0x8f>
   3b527:	mov    %rdi,%rbx
   3b52a:	mov    %rdx,%rax
   3b52d:	jmp    3b57d <encode_mcu+0xdd>
   3b52f:	mov    0x60(%r8),%eax
   3b533:	test   %eax,%eax
   3b535:	je     3b5a1 <encode_mcu+0x101>
   3b537:	mov    %rdi,%rbx
   3b53a:	jmpq   3b5dd <encode_mcu+0x13d>
   3b53f:	lea    -0x3(%r15,%r15,2),%eax
   3b544:	movslq %eax,%rsi
   3b547:	add    0xe8(%r8,%rcx,8),%rsi
   3b54f:	mov    %rdx,%r14
   3b552:	mov    %r8,%r15
   3b555:	mov    %rbx,%rdi
   3b558:	mov    $0x1,%r12d
   3b55e:	mov    %r12,%rdx
   3b561:	callq  3a610 <arith_encode>
   3b566:	mov    %r14,%rdx
   3b569:	mov    %r15,%r8
   3b56c:	mov    -0xa8(%rbp),%rax
   3b573:	add    $0x1,%eax
   3b576:	mov    -0xa0(%rbp),%rsi
   3b57d:	movslq 0x170(%rbx),%rcx
   3b584:	cmp    %eax,%ecx
   3b586:	jg     3b5ed <encode_mcu+0x14d>
   3b588:	mov    %r12,%rax
   3b58b:	mov    -0x18(%rbp),%r13
   3b58f:	mov    -0x10(%rbp),%r12
   3b593:	mov    -0x8(%rbp),%rbx
   3b597:	mov    -0x20(%rbp),%r14
   3b59b:	mov    -0x28(%rbp),%r15
   3b59f:	leaveq 
   3b5a0:	retq   
   3b5a1:	mov    %rdx,%r12
   3b5a4:	mov    %r8,%r14
   3b5a7:	mov    %rsi,%r15
   3b5aa:	movslq 0x64(%r14),%rsi
   3b5ae:	mov    %rdi,%rbx
   3b5b1:	callq  3a910 <emit_restart>
   3b5b6:	mov    0x118(%rbx),%eax
   3b5bc:	mov    %eax,0x60(%r14)
   3b5c0:	movslq 0x64(%r14),%rax
   3b5c4:	add    $0x1,%eax
   3b5c7:	and    $0x7,%eax
   3b5ca:	mov    %eax,0x64(%r14)
   3b5ce:	mov    %r12,%rdx
   3b5d1:	mov    %r15,%rsi
   3b5d4:	mov    %r14,%r8
   3b5d7:	mov    $0x1,%r12d
   3b5dd:	mov    0x60(%r8),%eax
   3b5e1:	add    $0xffffffff,%eax
   3b5e4:	mov    %eax,0x60(%r8)
   3b5e8:	mov    %rdx,%rax
   3b5eb:	jmp    3b57d <encode_mcu+0xdd>
   3b5ed:	movslq %eax,%rdi
   3b5f0:	movslq 0x174(%rbx,%rdi,4),%r10
   3b5f8:	mov    0x148(%rbx,%r10,8),%rcx
   3b600:	movslq 0x14(%rcx),%r9
   3b604:	mov    %rax,-0xa8(%rbp)
   3b60b:	movslq 0x50(%r8,%r10,4),%r15
   3b610:	add    0x68(%r8,%r9,8),%r15
   3b615:	mov    (%rsi,%rdi,8),%r14
   3b619:	mov    %r14,-0x30(%rbp)
   3b61d:	movswq (%r14),%r11
   3b621:	movslq 0x40(%r8,%r10,4),%rax
   3b626:	cmp    %r11d,%eax
   3b629:	je     3b67f <encode_mcu+0x1df>
   3b62b:	mov    %r11d,0x40(%r8,%r10,4)
   3b630:	mov    %rbx,%rdi
   3b633:	mov    %r15,%rsi
   3b636:	mov    %r10,-0x80(%rbp)
   3b63a:	mov    %r9,-0x60(%rbp)
   3b63e:	mov    %rcx,-0x58(%rbp)
   3b642:	mov    %r12,%rdx
   3b645:	mov    %r8,%r12
   3b648:	mov    %r11,%r13
   3b64b:	mov    %rax,%r14
   3b64e:	callq  3a610 <arith_encode>
   3b653:	mov    %r13,%rax
   3b656:	sub    %r14d,%eax
   3b659:	test   %eax,%eax
   3b65b:	jg     3b6c1 <encode_mcu+0x221>
   3b65d:	lea    0x1(%r15),%rsi
   3b661:	mov    %rbx,%rdi
   3b664:	mov    $0x1,%edx
   3b669:	callq  3a610 <arith_encode>
   3b66e:	sub    %r13d,%r14d
   3b671:	lea    0x3(%r15),%r13
   3b675:	xor    %edx,%edx
   3b677:	pushq  -0x68(%rbp)
   3b67a:	popq   -0x78(%rbp)
   3b67d:	jmp    3b6e6 <encode_mcu+0x246>
   3b67f:	mov    %r15,%rsi
   3b682:	mov    %r8,%r15
   3b685:	mov    %rbx,%rdi
   3b688:	mov    %r10,%rbx
   3b68b:	mov    %rcx,%r12
   3b68e:	callq  3a610 <arith_encode>
   3b693:	movl   $0x0,0x50(%r15,%rbx,4)
   3b69c:	mov    %r15,%r8
   3b69f:	mov    -0x98(%rbp),%rbx
   3b6a6:	xor    %edx,%edx
   3b6a8:	mov    $0x1,%r15d
   3b6ae:	movslq 0x18(%r12),%rcx
   3b6b3:	mov    %rcx,-0x80(%rbp)
   3b6b7:	mov    $0x3f,%eax
   3b6bc:	jmpq   3b775 <encode_mcu+0x2d5>
   3b6c1:	mov    %r15,%r13
   3b6c4:	mov    %rax,%r14
   3b6c7:	lea    0x1(%r13),%rsi
   3b6cb:	mov    %rbx,%rdi
   3b6ce:	xor    %r15d,%r15d
   3b6d1:	mov    %r15,%rdx
   3b6d4:	callq  3a610 <arith_encode>
   3b6d9:	add    $0x2,%r13
   3b6dd:	mov    %r15,%rdx
   3b6e0:	pushq  -0x70(%rbp)
   3b6e3:	popq   -0x78(%rbp)
   3b6e6:	mov    -0x78(%rbp),%rax
   3b6ea:	mov    -0x80(%rbp),%r15
   3b6ee:	mov    %eax,0x50(%r12,%r15,4)
   3b6f3:	add    $0xffffffff,%r14d
   3b6f7:	mov    %r14,-0x88(%rbp)
   3b6fe:	test   %r14d,%r14d
   3b701:	jne    3b782 <encode_mcu+0x2e2>
   3b703:	mov    %r12,%r14
   3b706:	mov    %rdx,%r12
   3b709:	mov    %rbx,%rdi
   3b70c:	mov    %r13,%rsi
   3b70f:	callq  3a610 <arith_encode>
   3b714:	mov    %r15,%rsi
   3b717:	mov    -0x60(%rbp),%rax
   3b71b:	movzbl 0xc0(%rbx,%rax,1),%ecx
   3b723:	mov    $0x1,%r15d
   3b729:	mov    %r15,%rdx
   3b72c:	shl    %cl,%rdx
   3b72f:	sar    %rdx
   3b732:	cmp    %edx,%r12d
   3b735:	jl     3b7ab <encode_mcu+0x30b>
   3b737:	movzbl 0xd0(%rax,%rbx,1),%ecx
   3b73f:	mov    %r15,%rax
   3b742:	shl    %cl,%rax
   3b745:	sar    %rax
   3b748:	cmp    %eax,%r12d
   3b74b:	jle    3b7b4 <encode_mcu+0x314>
   3b74d:	movslq 0x50(%r14,%rsi,4),%rax
   3b752:	add    $0x8,%eax
   3b755:	mov    %eax,0x50(%r14,%rsi,4)
   3b75a:	jmp    3b7b4 <encode_mcu+0x314>
   3b75c:	movslq %eax,%rsi
   3b75f:	movslq 0x0(%r13,%rsi,4),%rsi
   3b764:	movswq (%r14,%rsi,2),%rsi
   3b769:	test   %si,%si
   3b76c:	jne    3b80b <encode_mcu+0x36b>
   3b772:	add    $0xffffffff,%eax
   3b775:	mov    %rax,-0x58(%rbp)
   3b779:	test   %eax,%eax
   3b77b:	jg     3b75c <encode_mcu+0x2bc>
   3b77d:	jmpq   3b80b <encode_mcu+0x36b>
   3b782:	mov    %r13,%rsi
   3b785:	mov    %rbx,%rdi
   3b788:	mov    $0x1,%r15d
   3b78e:	mov    %r15,%rdx
   3b791:	callq  3a610 <arith_encode>
   3b796:	mov    -0x60(%rbp),%rax
   3b79a:	mov    0x68(%r12,%rax,8),%r13
   3b79f:	add    $0x14,%r13
   3b7a3:	mov    %r15,%r12
   3b7a6:	jmpq   3b841 <encode_mcu+0x3a1>
   3b7ab:	movl   $0x0,0x50(%r14,%rsi,4)
   3b7b4:	add    $0xe,%r13
   3b7b8:	mov    -0x88(%rbp),%r14
   3b7bf:	xor    %edx,%edx
   3b7c1:	jmpq   3b87a <encode_mcu+0x3da>
   3b7c6:	sar    %r12d
   3b7c9:	mov    %r12,%rax
   3b7cc:	and    %r14d,%eax
   3b7cf:	test   %eax,%eax
   3b7d1:	je     3b7d6 <encode_mcu+0x336>
   3b7d3:	mov    %r13,%rdx
   3b7d6:	mov    %rbx,%rdi
   3b7d9:	mov    %r15,%rsi
   3b7dc:	callq  3a610 <arith_encode>
   3b7e1:	xor    %edx,%edx
   3b7e3:	mov    %r12,%rax
   3b7e6:	and    $0xfffffffe,%eax
   3b7e9:	test   %eax,%eax
   3b7eb:	jne    3b7c6 <encode_mcu+0x326>
   3b7ed:	mov    -0x88(%rbp),%r15
   3b7f4:	mov    -0x80(%rbp),%rcx
   3b7f8:	mov    -0x90(%rbp),%r8
   3b7ff:	mov    -0x58(%rbp),%rax
   3b803:	mov    -0x38(%rbp),%r13
   3b807:	mov    -0x30(%rbp),%r14
   3b80b:	cmp    %eax,%r15d
   3b80e:	jle    3b89c <encode_mcu+0x3fc>
   3b814:	cmp    $0x3f,%r15d
   3b818:	jle    3b53f <encode_mcu+0x9f>
   3b81e:	mov    $0x1,%r12d
   3b824:	jmpq   3b56c <encode_mcu+0xcc>
   3b829:	mov    %rbx,%rdi
   3b82c:	mov    %r13,%rsi
   3b82f:	mov    %r15,%rdx
   3b832:	callq  3a610 <arith_encode>
   3b837:	sar    %r14d
   3b83a:	add    $0x1,%r13
   3b83e:	add    %r12d,%r12d
   3b841:	mov    %r14,%rax
   3b844:	and    $0xfffffffe,%eax
   3b847:	test   %eax,%eax
   3b849:	jne    3b829 <encode_mcu+0x389>
   3b84b:	mov    -0x90(%rbp),%r14
   3b852:	xor    %edx,%edx
   3b854:	mov    -0x80(%rbp),%r15
   3b858:	jmpq   3b709 <encode_mcu+0x269>
   3b85d:	sar    %r12d
   3b860:	mov    %r12,%rax
   3b863:	and    %r14d,%eax
   3b866:	test   %eax,%eax
   3b868:	je     3b86d <encode_mcu+0x3cd>
   3b86a:	mov    %r15,%rdx
   3b86d:	mov    %rbx,%rdi
   3b870:	mov    %r13,%rsi
   3b873:	callq  3a610 <arith_encode>
   3b878:	xor    %edx,%edx
   3b87a:	mov    %r12,%rax
   3b87d:	and    $0xfffffffe,%eax
   3b880:	test   %eax,%eax
   3b882:	jne    3b85d <encode_mcu+0x3bd>
   3b884:	mov    -0x90(%rbp),%r8
   3b88b:	mov    -0x58(%rbp),%r12
   3b88f:	mov    -0x38(%rbp),%r13
   3b893:	mov    -0x30(%rbp),%r14
   3b897:	jmpq   3b6ae <encode_mcu+0x20e>
   3b89c:	lea    -0x3(%r15,%r15,2),%eax
   3b8a1:	movslq %eax,%r12
   3b8a4:	add    0xe8(%r8,%rcx,8),%r12
   3b8ac:	mov    %rbx,%rdi
   3b8af:	mov    %r12,%rsi
   3b8b2:	callq  3a610 <arith_encode>
   3b8b7:	mov    %r15,%rcx
   3b8ba:	xor    %edx,%edx
   3b8bc:	jmp    3b8cf <encode_mcu+0x42f>
   3b8be:	mov    %rbx,%rdi
   3b8c1:	callq  3a610 <arith_encode>
   3b8c6:	add    $0x3,%r12
   3b8ca:	mov    %r15,%rcx
   3b8cd:	xor    %edx,%edx
   3b8cf:	lea    0x1(%r12),%rsi
   3b8d4:	lea    0x1(%rcx),%r15d
   3b8d8:	movslq %ecx,%rax
   3b8db:	movslq 0x0(%r13,%rax,4),%rax
   3b8e0:	movswq (%r14,%rax,2),%rax
   3b8e5:	test   %ax,%ax
   3b8e8:	je     3b8be <encode_mcu+0x41e>
   3b8ea:	mov    %rbx,%rdi
   3b8ed:	mov    $0x1,%r13d
   3b8f3:	mov    %r13,%rdx
   3b8f6:	mov    %r15,-0x88(%rbp)
   3b8fd:	mov    %rcx,%r14
   3b900:	mov    %rax,%r15
   3b903:	callq  3a610 <arith_encode>
   3b908:	test   %r15w,%r15w
   3b90c:	jg     3b92a <encode_mcu+0x48a>
   3b90e:	mov    %rbx,%rdi
   3b911:	mov    -0x50(%rbp),%rsi
   3b915:	mov    %r13,%rdx
   3b918:	callq  3a610 <arith_encode>
   3b91d:	neg    %r15d
   3b920:	mov    %r14,%rax
   3b923:	mov    %r15,%rcx
   3b926:	xor    %edx,%edx
   3b928:	jmp    3b94b <encode_mcu+0x4ab>
   3b92a:	mov    %rbx,%rdi
   3b92d:	mov    -0x50(%rbp),%rsi
   3b931:	xor    %r13d,%r13d
   3b934:	mov    %r13,%rdx
   3b937:	callq  3a610 <arith_encode>
   3b93c:	mov    %r14,%rax
   3b93f:	mov    %r15,%rcx
   3b942:	mov    %r13,%rdx
   3b945:	mov    $0x1,%r13d
   3b94b:	lea    0x2(%r12),%r15
   3b950:	lea    -0x1(%rcx),%r14d
   3b954:	test   %r14d,%r14d
   3b957:	jne    3b972 <encode_mcu+0x4d2>
   3b959:	mov    %rdx,%r12
   3b95c:	mov    %rbx,%rdi
   3b95f:	mov    %r15,%rsi
   3b962:	callq  3a610 <arith_encode>
   3b967:	add    $0xe,%r15
   3b96b:	xor    %edx,%edx
   3b96d:	jmpq   3b7e3 <encode_mcu+0x343>
   3b972:	mov    %rax,%r12
   3b975:	mov    %rbx,%rdi
   3b978:	mov    %r15,%rsi
   3b97b:	mov    %r13,%rdx
   3b97e:	callq  3a610 <arith_encode>
   3b983:	mov    %r14,%rax
   3b986:	and    $0xfffffffe,%eax
   3b989:	test   %eax,%eax
   3b98b:	jne    3b994 <encode_mcu+0x4f4>
   3b98d:	xor    %edx,%edx
   3b98f:	mov    %r13,%r12
   3b992:	jmp    3b95c <encode_mcu+0x4bc>
   3b994:	mov    %r15,%rsi
   3b997:	mov    %rbx,%rdi
   3b99a:	mov    %r13,%rdx
   3b99d:	callq  3a610 <arith_encode>
   3b9a2:	mov    -0x80(%rbp),%rdx
   3b9a6:	mov    -0x90(%rbp),%rax
   3b9ad:	mov    0xe8(%rax,%rdx,8),%rcx
   3b9b5:	movzbl 0xe0(%rbx,%rdx,1),%eax
   3b9bd:	cmp    %eax,%r12d
   3b9c0:	jle    3b9ca <encode_mcu+0x52a>
   3b9c2:	pushq  -0x40(%rbp)
   3b9c5:	popq   -0x60(%rbp)
   3b9c8:	jmp    3b9d0 <encode_mcu+0x530>
   3b9ca:	pushq  -0x48(%rbp)
   3b9cd:	popq   -0x60(%rbp)
   3b9d0:	mov    %r14,%rdx
   3b9d3:	sar    %edx
   3b9d5:	mov    -0x60(%rbp),%rax
   3b9d9:	lea    (%rax,%rcx,1),%r15
   3b9dd:	mov    %r14,-0x78(%rbp)
   3b9e1:	mov    %rdx,%r14
   3b9e4:	mov    $0x2,%r12d
   3b9ea:	jmp    3ba04 <encode_mcu+0x564>
   3b9ec:	mov    %rbx,%rdi
   3b9ef:	mov    %r15,%rsi
   3b9f2:	mov    %r13,%rdx
   3b9f5:	callq  3a610 <arith_encode>
   3b9fa:	sar    %r14d
   3b9fd:	add    $0x1,%r15
   3ba01:	add    %r12d,%r12d
   3ba04:	mov    %r14,%rax
   3ba07:	and    $0xfffffffe,%eax
   3ba0a:	test   %eax,%eax
   3ba0c:	jne    3b9ec <encode_mcu+0x54c>
   3ba0e:	mov    -0x78(%rbp),%r14
   3ba12:	xor    %edx,%edx
   3ba14:	jmpq   3b95c <encode_mcu+0x4bc>
   3ba19:	nopl   0x0(%rax)

000000000003ba20 <start_pass>:
   3ba20:	push   %rbp
   3ba21:	mov    %rsp,%rbp
   3ba24:	sub    $0x40,%rsp
   3ba28:	mov    %r14,-0x20(%rbp)
   3ba2c:	mov    %r15,-0x28(%rbp)
   3ba30:	mov    %rbx,-0x8(%rbp)
   3ba34:	mov    %r12,-0x10(%rbp)
   3ba38:	mov    %r13,-0x18(%rbp)
   3ba3c:	mov    0x1f0(%rdi),%r14
   3ba43:	mov    %r14,-0x38(%rbp)
   3ba47:	test   %esi,%esi
   3ba49:	jne    3ba50 <start_pass+0x30>
   3ba4b:	mov    %rdi,%rbx
   3ba4e:	jmp    3ba65 <start_pass+0x45>
   3ba50:	mov    (%rdi),%rax
   3ba53:	movl   $0x30,0x28(%rax)
   3ba5a:	mov    (%rdi),%rax
   3ba5d:	mov    (%rax),%rax
   3ba60:	mov    %rdi,%rbx
   3ba63:	callq  *%rax
   3ba65:	mov    $0x1,%esi
   3ba6a:	mov    $0x40,%edx
   3ba6f:	xor    %r12d,%r12d
   3ba72:	mov    $0x100,%eax
   3ba77:	movslq 0x134(%rbx),%rcx
   3ba7e:	test   %ecx,%ecx
   3ba80:	jne    3ba95 <start_pass+0x75>
   3ba82:	lea    -0x5e9(%rip),%rcx        # 3b4a0 <encode_mcu>
   3ba89:	mov    %rcx,0x8(%r14)
   3ba8d:	mov    %r12,%r13
   3ba90:	jmpq   3bc62 <start_pass+0x242>
   3ba95:	movslq 0x1a4(%rbx),%rcx
   3ba9c:	test   %ecx,%ecx
   3ba9e:	je     3bcca <start_pass+0x2aa>
   3baa4:	movslq 0x19c(%rbx),%rcx
   3baab:	test   %ecx,%ecx
   3baad:	je     3bce8 <start_pass+0x2c8>
   3bab3:	lea    -0x93a(%rip),%rcx        # 3b180 <encode_mcu_AC_refine>
   3baba:	mov    %rcx,0x8(%r14)
   3babe:	mov    %r12,%r13
   3bac1:	jmpq   3bc62 <start_pass+0x242>
   3bac6:	movslq %r13d,%rcx
   3bac9:	mov    0x148(%rbx,%rcx,8),%r15
   3bad1:	movslq 0x134(%rbx),%rdi
   3bad8:	test   %edi,%edi
   3bada:	je     3bafa <start_pass+0xda>
   3badc:	movslq 0x19c(%rbx),%rdi
   3bae3:	test   %edi,%edi
   3bae5:	jne    3bbaf <start_pass+0x18f>
   3baeb:	movslq 0x1a4(%rbx),%rdi
   3baf2:	test   %edi,%edi
   3baf4:	jne    3bbaf <start_pass+0x18f>
   3bafa:	movslq 0x14(%r15),%rax
   3bafe:	test   %eax,%eax
   3bb00:	js     3bb07 <start_pass+0xe7>
   3bb02:	cmp    $0xf,%eax
   3bb05:	jle    3bb43 <start_pass+0x123>
   3bb07:	mov    (%rbx),%rdx
   3bb0a:	movl   $0x7d,0x28(%rdx)
   3bb11:	mov    (%rbx),%rdx
   3bb14:	mov    %eax,0x2c(%rdx)
   3bb17:	mov    (%rbx),%rdx
   3bb1a:	mov    (%rdx),%rdx
   3bb1d:	mov    %rbx,%rdi
   3bb20:	mov    %r13,-0x30(%rbp)
   3bb24:	mov    %rax,%r12
   3bb27:	mov    %rcx,%r13
   3bb2a:	callq  *%rdx
   3bb2c:	mov    %r12,%rax
   3bb2f:	mov    %r13,%rcx
   3bb32:	mov    $0x40,%edx
   3bb37:	mov    $0x1,%esi
   3bb3c:	xor    %r12d,%r12d
   3bb3f:	mov    -0x30(%rbp),%r13
   3bb43:	mov    0x68(%r14,%rax,8),%rdi
   3bb48:	test   %rdi,%rdi
   3bb4b:	jne    3bb7b <start_pass+0x15b>
   3bb4d:	mov    0x8(%rbx),%rdi
   3bb51:	mov    (%rdi),%r8
   3bb54:	mov    %rbx,%rdi
   3bb57:	mov    %r13,-0x30(%rbp)
   3bb5b:	mov    %rax,%r12
   3bb5e:	mov    %rcx,%r13
   3bb61:	callq  *%r8
   3bb64:	mov    %rax,0x68(%r14,%r12,8)
   3bb69:	mov    %r12,%rax
   3bb6c:	mov    %r13,%rcx
   3bb6f:	mov    $0x40,%edx
   3bb74:	xor    %r12d,%r12d
   3bb77:	mov    -0x30(%rbp),%r13
   3bb7b:	mov    0x68(%r14,%rax,8),%rdi
   3bb80:	mov    %r12,%rsi
   3bb83:	mov    %rcx,%r12
   3bb86:	callq  41e0 <memset@plt>
   3bb8b:	movl   $0x0,0x40(%r14,%r12,4)
   3bb94:	movl   $0x0,0x50(%r14,%r12,4)
   3bb9d:	mov    $0x100,%eax
   3bba2:	mov    $0x40,%edx
   3bba7:	mov    $0x1,%esi
   3bbac:	xor    %r12d,%r12d
   3bbaf:	movslq 0x134(%rbx),%rcx
   3bbb6:	test   %ecx,%ecx
   3bbb8:	je     3bbc9 <start_pass+0x1a9>
   3bbba:	movslq 0x1a0(%rbx),%rcx
   3bbc1:	test   %ecx,%ecx
   3bbc3:	je     3bc5a <start_pass+0x23a>
   3bbc9:	movslq 0x18(%r15),%r15
   3bbcd:	test   %r15d,%r15d
   3bbd0:	js     3bbd8 <start_pass+0x1b8>
   3bbd2:	cmp    $0xf,%r15d
   3bbd6:	jle    3bc03 <start_pass+0x1e3>
   3bbd8:	mov    (%rbx),%rax
   3bbdb:	movl   $0x7d,0x28(%rax)
   3bbe2:	mov    (%rbx),%rax
   3bbe5:	mov    %r15d,0x2c(%rax)
   3bbe9:	mov    (%rbx),%rax
   3bbec:	mov    (%rax),%rax
   3bbef:	mov    %rbx,%rdi
   3bbf2:	callq  *%rax
   3bbf4:	mov    $0x100,%eax
   3bbf9:	mov    $0x40,%edx
   3bbfe:	mov    $0x1,%esi
   3bc03:	mov    0xe8(%r14,%r15,8),%rcx
   3bc0b:	test   %rcx,%rcx
   3bc0e:	jne    3bc36 <start_pass+0x216>
   3bc10:	mov    0x8(%rbx),%rcx
   3bc14:	mov    (%rcx),%rcx
   3bc17:	mov    %rax,%rdx
   3bc1a:	mov    %rbx,%rdi
   3bc1d:	callq  *%rcx
   3bc1f:	mov    %rax,0xe8(%r14,%r15,8)
   3bc27:	mov    $0x100,%eax
   3bc2c:	mov    $0x40,%edx
   3bc31:	mov    $0x1,%esi
   3bc36:	mov    0xe8(%r14,%r15,8),%rdi
   3bc3e:	mov    %rdx,%r14
   3bc41:	mov    %rax,%rdx
   3bc44:	mov    %rsi,%r15
   3bc47:	mov    %r12,%rsi
   3bc4a:	callq  41e0 <memset@plt>
   3bc4f:	mov    %r14,%rdx
   3bc52:	mov    %r15,%rsi
   3bc55:	mov    $0x100,%eax
   3bc5a:	add    $0x1,%r13d
   3bc5e:	mov    -0x38(%rbp),%r14
   3bc62:	movslq 0x144(%rbx),%rcx
   3bc69:	cmp    %r13d,%ecx
   3bc6c:	jg     3bac6 <start_pass+0xa6>
   3bc72:	movq   $0x0,0x18(%r14)
   3bc7a:	movq   $0x10000,0x20(%r14)
   3bc82:	movq   $0x0,0x28(%r14)
   3bc8a:	movq   $0x0,0x30(%r14)
   3bc92:	movl   $0xb,0x38(%r14)
   3bc9a:	movl   $0xffffffff,0x3c(%r14)
   3bca2:	mov    0x118(%rbx),%eax
   3bca8:	mov    %eax,0x60(%r14)
   3bcac:	movl   $0x0,0x64(%r14)
   3bcb4:	mov    -0x18(%rbp),%r13
   3bcb8:	mov    -0x10(%rbp),%r12
   3bcbc:	mov    -0x8(%rbp),%rbx
   3bcc0:	mov    -0x28(%rbp),%r15
   3bcc4:	mov    -0x20(%rbp),%r14
   3bcc8:	leaveq 
   3bcc9:	retq   
   3bcca:	movslq 0x19c(%rbx),%rcx
   3bcd1:	test   %ecx,%ecx
   3bcd3:	je     3bcfb <start_pass+0x2db>
   3bcd5:	lea    -0xfac(%rip),%rcx        # 3ad30 <encode_mcu_AC_first>
   3bcdc:	mov    %rcx,0x8(%r14)
   3bce0:	mov    %r12,%r13
   3bce3:	jmpq   3bc62 <start_pass+0x242>
   3bce8:	lea    -0xc4f(%rip),%rcx        # 3b0a0 <encode_mcu_DC_refine>
   3bcef:	mov    %rcx,0x8(%r14)
   3bcf3:	mov    %r12,%r13
   3bcf6:	jmpq   3bc62 <start_pass+0x242>
   3bcfb:	lea    -0x1292(%rip),%rcx        # 3aa70 <encode_mcu_DC_first>
   3bd02:	mov    %rcx,0x8(%r14)
   3bd06:	mov    %r12,%r13
   3bd09:	jmpq   3bc62 <start_pass+0x242>
   3bd0e:	xchg   %ax,%ax

000000000003bd10 <jinit_arith_decoder>:
   3bd10:	push   %rbp
   3bd11:	mov    %rsp,%rbp
   3bd14:	sub    $0x10,%rsp
   3bd18:	mov    %r15,-0x10(%rbp)
   3bd1c:	mov    0x8(%rdi),%rax
   3bd20:	mov    (%rax),%rax
   3bd23:	mov    %r14,%r15
   3bd26:	mov    $0x1,%esi
   3bd2b:	mov    $0x158,%edx
   3bd30:	mov    %rdi,%r14
   3bd33:	callq  *%rax
   3bd35:	mov    %rax,0x250(%r14)
   3bd3c:	lea    0x12bd(%rip),%rcx        # 3d000 <start_pass>
   3bd43:	mov    %rcx,(%rax)
   3bd46:	xor    %r8d,%r8d
   3bd49:	mov    %r8,%rcx
   3bd4c:	jmp    3bd69 <jinit_arith_decoder+0x59>
   3bd4e:	movslq %ecx,%rdx
   3bd51:	movq   $0x0,0x50(%rax,%rdx,8)
   3bd5a:	movq   $0x0,0xd0(%rax,%rdx,8)
   3bd66:	add    $0x1,%ecx
   3bd69:	cmp    $0xf,%ecx
   3bd6c:	jle    3bd4e <jinit_arith_decoder+0x3e>
   3bd6e:	movb   $0x71,0x150(%rax)
   3bd75:	movslq 0x138(%r14),%rax
   3bd7c:	test   %eax,%eax
   3bd7e:	jne    3bd89 <jinit_arith_decoder+0x79>
   3bd80:	mov    %r15,%r14
   3bd83:	mov    -0x10(%rbp),%r15
   3bd87:	leaveq 
   3bd88:	retq   
   3bd89:	mov    0x8(%r14),%rax
   3bd8d:	mov    (%rax),%rcx
   3bd90:	movslq 0x38(%r14),%rax
   3bd94:	shl    $0x6,%eax
   3bd97:	movslq %eax,%rdx
   3bd9a:	shl    $0x2,%rdx
   3bd9e:	mov    %r14,%rdi
   3bda1:	mov    %r15,-0x8(%rbp)
   3bda5:	mov    %r8,%r15
   3bda8:	mov    $0x1,%esi
   3bdad:	callq  *%rcx
   3bdaf:	mov    %rax,0xc0(%r14)
   3bdb6:	mov    %r15,%rdx
   3bdb9:	jmp    3bdd0 <jinit_arith_decoder+0xc0>
   3bdbb:	movl   $0xffffffff,(%rax)
   3bdc1:	add    $0x4,%rax
   3bdc5:	add    $0x1,%ecx
   3bdc8:	cmp    $0x3f,%ecx
   3bdcb:	jle    3bdbb <jinit_arith_decoder+0xab>
   3bdcd:	add    $0x1,%edx
   3bdd0:	movslq 0x38(%r14),%rcx
   3bdd4:	cmp    %edx,%ecx
   3bdd6:	jg     3bde2 <jinit_arith_decoder+0xd2>
   3bdd8:	mov    -0x8(%rbp),%r14
   3bddc:	mov    -0x10(%rbp),%r15
   3bde0:	leaveq 
   3bde1:	retq   
   3bde2:	mov    %r15,%rcx
   3bde5:	jmp    3bdc8 <jinit_arith_decoder+0xb8>
   3bde7:	nopw   0x0(%rax,%rax,1)

000000000003bdf0 <get_byte>:
   3bdf0:	push   %rbp
   3bdf1:	mov    %rsp,%rbp
   3bdf4:	sub    $0x10,%rsp
   3bdf8:	mov    0x28(%rdi),%rax
   3bdfc:	mov    0x8(%rax),%rcx
   3be00:	test   %rcx,%rcx
   3be03:	je     3be20 <get_byte+0x30>
   3be05:	mov    0x8(%rax),%rcx
   3be09:	add    $0xffffffffffffffff,%rcx
   3be0d:	mov    %rcx,0x8(%rax)
   3be11:	mov    (%rax),%rdx
   3be14:	lea    0x1(%rdx),%rcx
   3be18:	mov    %rcx,(%rax)
   3be1b:	movzbl (%rdx),%eax
   3be1e:	leaveq 
   3be1f:	retq   
   3be20:	mov    %rdi,%rcx
   3be23:	mov    %r14,-0x8(%rbp)
   3be27:	mov    %r15,-0x10(%rbp)
   3be2b:	mov    %rdi,%r14
   3be2e:	mov    %rcx,%rdi
   3be31:	mov    %rax,%r15
   3be34:	callq  *0x18(%r15)
   3be38:	test   %eax,%eax
   3be3a:	je     3be49 <get_byte+0x59>
   3be3c:	mov    %r15,%rax
   3be3f:	mov    -0x10(%rbp),%r15
   3be43:	mov    -0x8(%rbp),%r14
   3be47:	jmp    3be05 <get_byte+0x15>
   3be49:	mov    (%r14),%rax
   3be4c:	movl   $0x18,0x28(%rax)
   3be53:	mov    (%r14),%rax
   3be56:	mov    (%rax),%rax
   3be59:	mov    %r14,%rdi
   3be5c:	callq  *%rax
   3be5e:	mov    %r15,%rax
   3be61:	mov    -0x10(%rbp),%r15
   3be65:	mov    -0x8(%rbp),%r14
   3be69:	jmp    3be05 <get_byte+0x15>
   3be6b:	nopl   0x0(%rax,%rax,1)

000000000003be70 <arith_decode>:
   3be70:	push   %rbp
   3be71:	mov    %rsp,%rbp
   3be74:	sub    $0x30,%rsp
   3be78:	mov    %rsi,-0x28(%rbp)
   3be7c:	mov    %r12,-0x8(%rbp)
   3be80:	mov    %r13,-0x10(%rbp)
   3be84:	mov    %r14,-0x18(%rbp)
   3be88:	mov    %r15,-0x20(%rbp)
   3be8c:	mov    %rdi,%r13
   3be8f:	mov    0x250(%r13),%r12
   3be96:	xor    %r14d,%r14d
   3be99:	mov    $0xff,%r15d
   3be9f:	jmp    3bf0b <arith_decode+0x9b>
   3bea1:	movslq 0x28(%r12),%rax
   3bea6:	add    $0xffffffff,%eax
   3bea9:	mov    %eax,0x28(%r12)
   3beae:	test   %eax,%eax
   3beb0:	jns    3befe <arith_decode+0x8e>
   3beb2:	movslq 0x21c(%r13),%rax
   3beb9:	test   %eax,%eax
   3bebb:	je     3bf80 <arith_decode+0x110>
   3bec1:	mov    %r14,%rax
   3bec4:	movslq %eax,%rax
   3bec7:	mov    0x18(%r12),%rcx
   3becc:	shl    $0x8,%rcx
   3bed0:	or     %rcx,%rax
   3bed3:	mov    %rax,0x18(%r12)
   3bed8:	movslq 0x28(%r12),%rax
   3bedd:	lea    0x8(%rax),%ecx
   3bee0:	mov    %ecx,0x28(%r12)
   3bee5:	test   %ecx,%ecx
   3bee7:	jns    3befe <arith_decode+0x8e>
   3bee9:	add    $0x9,%eax
   3beec:	mov    %eax,0x28(%r12)
   3bef1:	test   %eax,%eax
   3bef3:	jne    3befe <arith_decode+0x8e>
   3bef5:	movq   $0x8000,0x20(%r12)
   3befe:	mov    0x20(%r12),%rax
   3bf03:	add    %rax,%rax
   3bf06:	mov    %rax,0x20(%r12)
   3bf0b:	mov    0x20(%r12),%rdx
   3bf10:	cmp    $0x7fff,%rdx
   3bf17:	jle    3bea1 <arith_decode+0x31>
   3bf19:	mov    0x320a8(%rip),%rsi        # 6dfc8 <jpeg_aritab@@LIBJPEG_6.2+0x12870>
   3bf20:	mov    -0x28(%rbp),%r8
   3bf24:	movzbl (%r8),%eax
   3bf28:	mov    %rax,%rcx
   3bf2b:	and    $0x7f,%ecx
   3bf2e:	movslq %ecx,%rcx
   3bf31:	mov    (%rsi,%rcx,8),%rsi
   3bf35:	mov    %rsi,%rdi
   3bf38:	sar    $0x10,%rdi
   3bf3c:	sub    %rdi,%rdx
   3bf3f:	mov    %rdx,0x20(%r12)
   3bf44:	mov    %rsi,%r9
   3bf47:	shr    $0x8,%r9
   3bf4b:	mov    0x28(%r12),%ecx
   3bf50:	mov    %rdx,%r10
   3bf53:	shl    %cl,%r10
   3bf56:	mov    0x18(%r12),%rcx
   3bf5b:	cmp    %r10,%rcx
   3bf5e:	jge    3bfae <arith_decode+0x13e>
   3bf60:	cmp    $0x7fff,%rdx
   3bf67:	jg     3bfe6 <arith_decode+0x176>
   3bf69:	cmp    %rdi,%rdx
   3bf6c:	jl     3bffb <arith_decode+0x18b>
   3bf72:	mov    %rax,%rcx
   3bf75:	and    $0x80,%cl
   3bf78:	add    %r9d,%ecx
   3bf7b:	mov    %cl,(%r8)
   3bf7e:	jmp    3bfe6 <arith_decode+0x176>
   3bf80:	mov    %r13,%rdi
   3bf83:	callq  3bdf0 <get_byte>
   3bf88:	cmp    $0xff,%eax
   3bf8d:	jne    3bec4 <arith_decode+0x54>
   3bf93:	mov    %r13,%rdi
   3bf96:	callq  3bdf0 <get_byte>
   3bf9b:	cmp    $0xff,%eax
   3bfa0:	je     3bf93 <arith_decode+0x123>
   3bfa2:	test   %eax,%eax
   3bfa4:	jne    3c010 <arith_decode+0x1a0>
   3bfa6:	mov    %r15,%rax
   3bfa9:	jmpq   3bec4 <arith_decode+0x54>
   3bfae:	sub    %r10,%rcx
   3bfb1:	mov    %rcx,0x18(%r12)
   3bfb6:	cmp    %rdi,%rdx
   3bfb9:	jl     3bfd5 <arith_decode+0x165>
   3bfbb:	mov    %rdi,0x20(%r12)
   3bfc0:	mov    %rax,%rcx
   3bfc3:	xor    $0x80,%ecx
   3bfc9:	and    $0x80,%al
   3bfcb:	add    %esi,%eax
   3bfcd:	mov    %al,(%r8)
   3bfd0:	mov    %rcx,%rax
   3bfd3:	jmp    3bfe6 <arith_decode+0x176>
   3bfd5:	mov    %rdi,0x20(%r12)
   3bfda:	mov    %rax,%rcx
   3bfdd:	and    $0x80,%cl
   3bfe0:	add    %r9d,%ecx
   3bfe3:	mov    %cl,(%r8)
   3bfe6:	shr    $0x7,%eax
   3bfe9:	mov    -0x20(%rbp),%r15
   3bfed:	mov    -0x18(%rbp),%r14
   3bff1:	mov    -0x10(%rbp),%r13
   3bff5:	mov    -0x8(%rbp),%r12
   3bff9:	leaveq 
   3bffa:	retq   
   3bffb:	mov    %rax,%rcx
   3bffe:	xor    $0x80,%ecx
   3c004:	and    $0x80,%al
   3c006:	add    %esi,%eax
   3c008:	mov    %al,(%r8)
   3c00b:	mov    %rcx,%rax
   3c00e:	jmp    3bfe6 <arith_decode+0x176>
   3c010:	mov    %eax,0x21c(%r13)
   3c017:	mov    %r14,%rax
   3c01a:	jmpq   3bec4 <arith_decode+0x54>
   3c01f:	nop

000000000003c020 <process_restart>:
   3c020:	push   %rbp
   3c021:	mov    %rsp,%rbp
   3c024:	sub    $0x30,%rsp
   3c028:	mov    %rbx,-0x8(%rbp)
   3c02c:	mov    %r12,-0x10(%rbp)
   3c030:	mov    %r13,-0x18(%rbp)
   3c034:	mov    %r14,-0x20(%rbp)
   3c038:	mov    %r15,-0x28(%rbp)
   3c03c:	mov    0x250(%rdi),%r14
   3c043:	xor    %ebx,%ebx
   3c045:	mov    $0x100,%r15d
   3c04b:	mov    $0x40,%r12d
   3c051:	mov    0x248(%rdi),%rax
   3c058:	mov    0x10(%rax),%rax
   3c05c:	mov    %rdi,%r13
   3c05f:	callq  *%rax
   3c061:	test   %eax,%eax
   3c063:	je     3c070 <process_restart+0x50>
   3c065:	mov    %r15,%rdx
   3c068:	mov    %rbx,%r15
   3c06b:	jmpq   3c130 <process_restart+0x110>
   3c070:	mov    0x0(%r13),%rax
   3c074:	movl   $0x18,0x28(%rax)
   3c07b:	mov    0x0(%r13),%rax
   3c07f:	mov    (%rax),%rax
   3c082:	mov    %r13,%rdi
   3c085:	callq  *%rax
   3c087:	mov    %r15,%rdx
   3c08a:	mov    %rbx,%r15
   3c08d:	jmpq   3c130 <process_restart+0x110>
   3c092:	movslq %r15d,%rsi
   3c095:	mov    0x1b8(%r13,%rsi,8),%rax
   3c09d:	movslq 0x138(%r13),%rcx
   3c0a4:	test   %ecx,%ecx
   3c0a6:	je     3c0be <process_restart+0x9e>
   3c0a8:	movslq 0x20c(%r13),%rcx
   3c0af:	test   %ecx,%ecx
   3c0b1:	jne    3c0fd <process_restart+0xdd>
   3c0b3:	movslq 0x214(%r13),%rcx
   3c0ba:	test   %ecx,%ecx
   3c0bc:	jne    3c0fd <process_restart+0xdd>
   3c0be:	movslq 0x14(%rax),%rcx
   3c0c2:	mov    0x50(%r14,%rcx,8),%rdi
   3c0c7:	mov    %r12,%rdx
   3c0ca:	mov    %rax,%r12
   3c0cd:	mov    %rbx,%rax
   3c0d0:	mov    %rsi,%rbx
   3c0d3:	mov    %rax,%rsi
   3c0d6:	callq  41e0 <memset@plt>
   3c0db:	movl   $0x0,0x2c(%r14,%rbx,4)
   3c0e4:	movl   $0x0,0x3c(%r14,%rbx,4)
   3c0ed:	mov    %r12,%rax
   3c0f0:	mov    $0x40,%r12d
   3c0f6:	mov    $0x100,%edx
   3c0fb:	xor    %ebx,%ebx
   3c0fd:	movslq 0x138(%r13),%rcx
   3c104:	test   %ecx,%ecx
   3c106:	je     3c113 <process_restart+0xf3>
   3c108:	movslq 0x20c(%r13),%rcx
   3c10f:	test   %ecx,%ecx
   3c111:	je     3c12c <process_restart+0x10c>
   3c113:	movslq 0x18(%rax),%rax
   3c117:	mov    0xd0(%r14,%rax,8),%rdi
   3c11f:	mov    %rbx,%rsi
   3c122:	callq  41e0 <memset@plt>
   3c127:	mov    $0x100,%edx
   3c12c:	add    $0x1,%r15d
   3c130:	movslq 0x1b0(%r13),%rax
   3c137:	cmp    %r15d,%eax
   3c13a:	jg     3c092 <process_restart+0x72>
   3c140:	movq   $0x0,0x18(%r14)
   3c148:	movq   $0x0,0x20(%r14)
   3c150:	movl   $0xfffffff0,0x28(%r14)
   3c158:	mov    0x170(%r13),%eax
   3c15f:	mov    %eax,0x4c(%r14)
   3c163:	mov    -0x28(%rbp),%r15
   3c167:	mov    -0x20(%rbp),%r14
   3c16b:	mov    -0x18(%rbp),%r13
   3c16f:	mov    -0x10(%rbp),%r12
   3c173:	mov    -0x8(%rbp),%rbx
   3c177:	leaveq 
   3c178:	retq   
   3c179:	nopl   0x0(%rax)

000000000003c180 <decode_mcu_DC_first>:
   3c180:	push   %rbp
   3c181:	mov    %rsp,%rbp
   3c184:	sub    $0x60,%rsp
   3c188:	mov    %rsi,-0x50(%rbp)
   3c18c:	mov    0x250(%rdi),%rcx
   3c193:	mov    0x170(%rdi),%eax
   3c199:	test   %eax,%eax
   3c19b:	jne    3c1ae <decode_mcu_DC_first+0x2e>
   3c19d:	mov    %r12,%rdx
   3c1a0:	mov    %rdi,%r12
   3c1a3:	mov    %r15,%r8
   3c1a6:	mov    %rbx,%r15
   3c1a9:	mov    %rcx,%rbx
   3c1ac:	jmp    3c1f7 <decode_mcu_DC_first+0x77>
   3c1ae:	mov    0x4c(%rcx),%eax
   3c1b1:	test   %eax,%eax
   3c1b3:	je     3c1c6 <decode_mcu_DC_first+0x46>
   3c1b5:	mov    %r12,%rdx
   3c1b8:	mov    %rdi,%r12
   3c1bb:	mov    %r15,%r8
   3c1be:	mov    %rbx,%r15
   3c1c1:	mov    %rcx,%rbx
   3c1c4:	jmp    3c1ee <decode_mcu_DC_first+0x6e>
   3c1c6:	mov    %rdi,%rax
   3c1c9:	mov    %r15,-0x40(%rbp)
   3c1cd:	mov    %rdi,-0x58(%rbp)
   3c1d1:	mov    %rax,%rdi
   3c1d4:	mov    %rbx,%r15
   3c1d7:	mov    %rcx,%rbx
   3c1da:	callq  3c020 <process_restart>
   3c1df:	mov    %r12,%rdx
   3c1e2:	mov    -0x50(%rbp),%rsi
   3c1e6:	mov    -0x58(%rbp),%r12
   3c1ea:	mov    -0x40(%rbp),%r8
   3c1ee:	mov    0x4c(%rbx),%eax
   3c1f1:	add    $0xffffffff,%eax
   3c1f4:	mov    %eax,0x4c(%rbx)
   3c1f7:	mov    $0x1,%eax
   3c1fc:	movslq 0x28(%rbx),%rcx
   3c200:	cmp    $0xffffffff,%ecx
   3c203:	jne    3c210 <decode_mcu_DC_first+0x90>
   3c205:	mov    %r15,%rbx
   3c208:	mov    %r8,%r15
   3c20b:	mov    %rdx,%r12
   3c20e:	leaveq 
   3c20f:	retq   
   3c210:	xor    %ecx,%ecx
   3c212:	mov    %r8,-0x28(%rbp)
   3c216:	mov    %r15,-0x8(%rbp)
   3c21a:	mov    %rdx,-0x10(%rbp)
   3c21e:	mov    %r13,-0x18(%rbp)
   3c222:	mov    %r14,-0x20(%rbp)
   3c226:	jmp    3c256 <decode_mcu_DC_first+0xd6>
   3c228:	movl   $0x0,0x3c(%rbx,%r15,4)
   3c231:	movslq 0x2c(%rbx,%r15,4),%rax
   3c236:	mov    0x218(%r12),%ecx
   3c23e:	shl    %cl,%rax
   3c241:	mov    %ax,0x0(%r13)
   3c246:	mov    -0x58(%rbp),%rax
   3c24a:	lea    0x1(%rax),%ecx
   3c24d:	mov    $0x1,%eax
   3c252:	mov    -0x50(%rbp),%rsi
   3c256:	cmp    0x1e0(%r12),%ecx
   3c25e:	jl     3c276 <decode_mcu_DC_first+0xf6>
   3c260:	mov    -0x20(%rbp),%r14
   3c264:	mov    -0x18(%rbp),%r13
   3c268:	mov    -0x10(%rbp),%r12
   3c26c:	mov    -0x8(%rbp),%rbx
   3c270:	mov    -0x28(%rbp),%r15
   3c274:	leaveq 
   3c275:	retq   
   3c276:	movslq %ecx,%rax
   3c279:	mov    (%rsi,%rax,8),%r13
   3c27d:	movslq 0x1e4(%r12,%rax,4),%r15
   3c285:	mov    0x1b8(%r12,%r15,8),%rax
   3c28d:	movslq 0x14(%rax),%rax
   3c291:	mov    %rax,-0x48(%rbp)
   3c295:	movslq 0x3c(%rbx,%r15,4),%r14
   3c29a:	add    0x50(%rbx,%rax,8),%r14
   3c29f:	mov    %r12,%rdi
   3c2a2:	mov    %r14,%rsi
   3c2a5:	mov    %rcx,-0x58(%rbp)
   3c2a9:	callq  3be70 <arith_decode>
   3c2ae:	test   %eax,%eax
   3c2b0:	je     3c228 <decode_mcu_DC_first+0xa8>
   3c2b6:	lea    0x1(%r14),%rsi
   3c2ba:	mov    %r12,%rdi
   3c2bd:	callq  3be70 <arith_decode>
   3c2c2:	mov    %rax,-0x38(%rbp)
   3c2c6:	movslq %eax,%rcx
   3c2c9:	lea    0x2(%rcx,%r14,1),%r14
   3c2ce:	mov    %r12,%rdi
   3c2d1:	mov    %r14,%rsi
   3c2d4:	mov    %r13,-0x30(%rbp)
   3c2d8:	mov    %rax,%r13
   3c2db:	callq  3be70 <arith_decode>
   3c2e0:	test   %eax,%eax
   3c2e2:	jne    3c32f <decode_mcu_DC_first+0x1af>
   3c2e4:	mov    %r13,%rax
   3c2e7:	xor    %r13d,%r13d
   3c2ea:	mov    -0x48(%rbp),%rdi
   3c2ee:	movzbl 0x140(%rdi,%r12,1),%ecx
   3c2f7:	mov    $0x1,%edx
   3c2fc:	mov    %rdx,%rsi
   3c2ff:	shl    %cl,%rsi
   3c302:	sar    %rsi
   3c305:	cmp    %esi,%r13d
   3c308:	jl     3c345 <decode_mcu_DC_first+0x1c5>
   3c30a:	movzbl 0x150(%rdi,%r12,1),%ecx
   3c313:	shl    %cl,%rdx
   3c316:	sar    %rdx
   3c319:	cmp    %edx,%r13d
   3c31c:	jg     3c35e <decode_mcu_DC_first+0x1de>
   3c31e:	lea    0x4(,%rax,4),%eax
   3c325:	mov    %eax,0x3c(%rbx,%r15,4)
   3c32a:	mov    %r15,%rax
   3c32d:	jmp    3c351 <decode_mcu_DC_first+0x1d1>
   3c32f:	mov    -0x48(%rbp),%rcx
   3c333:	mov    0x50(%rbx,%rcx,8),%r14
   3c338:	add    $0x14,%r14
   3c33c:	mov    %r15,-0x40(%rbp)
   3c340:	mov    %rax,%r13
   3c343:	jmp    3c385 <decode_mcu_DC_first+0x205>
   3c345:	movl   $0x0,0x3c(%rbx,%r15,4)
   3c34e:	mov    %r15,%rax
   3c351:	lea    0xe(%r14),%r15
   3c355:	mov    %rax,-0x48(%rbp)
   3c359:	mov    %r13,%r14
   3c35c:	jmp    3c3b6 <decode_mcu_DC_first+0x236>
   3c35e:	lea    0xc(,%rax,4),%eax
   3c365:	mov    %eax,0x3c(%rbx,%r15,4)
   3c36a:	mov    %r15,%rax
   3c36d:	jmp    3c351 <decode_mcu_DC_first+0x1d1>
   3c36f:	mov    %r13,%rax
   3c372:	and    $0x7fffffff,%eax
   3c377:	cmp    $0x4000,%eax
   3c37c:	je     3c3ce <decode_mcu_DC_first+0x24e>
   3c37e:	add    $0x1,%r14
   3c382:	add    %r13d,%r13d
   3c385:	mov    %r12,%rdi
   3c388:	mov    %r14,%rsi
   3c38b:	callq  3be70 <arith_decode>
   3c390:	test   %eax,%eax
   3c392:	jne    3c36f <decode_mcu_DC_first+0x1ef>
   3c394:	mov    -0x40(%rbp),%r15
   3c398:	mov    -0x38(%rbp),%rax
   3c39c:	jmpq   3c2ea <decode_mcu_DC_first+0x16a>
   3c3a1:	sar    %r14d
   3c3a4:	mov    %r12,%rdi
   3c3a7:	mov    %r15,%rsi
   3c3aa:	callq  3be70 <arith_decode>
   3c3af:	test   %eax,%eax
   3c3b1:	je     3c3b6 <decode_mcu_DC_first+0x236>
   3c3b3:	or     %r14d,%r13d
   3c3b6:	mov    %r14,%rax
   3c3b9:	and    $0xfffffffe,%eax
   3c3bc:	test   %eax,%eax
   3c3be:	jne    3c3a1 <decode_mcu_DC_first+0x221>
   3c3c0:	mov    -0x38(%rbp),%rax
   3c3c4:	test   %eax,%eax
   3c3c6:	jne    3c40f <decode_mcu_DC_first+0x28f>
   3c3c8:	add    $0x1,%r13d
   3c3cc:	jmp    3c412 <decode_mcu_DC_first+0x292>
   3c3ce:	mov    (%r12),%rax
   3c3d2:	movl   $0x7e,0x28(%rax)
   3c3d9:	mov    (%r12),%rax
   3c3dd:	mov    0x8(%rax),%rax
   3c3e1:	mov    %r12,%rdi
   3c3e4:	mov    $0xffffffffffffffff,%rsi
   3c3eb:	callq  *%rax
   3c3ed:	movl   $0xffffffff,0x28(%rbx)
   3c3f4:	mov    -0x20(%rbp),%r14
   3c3f8:	mov    -0x18(%rbp),%r13
   3c3fc:	mov    -0x10(%rbp),%r12
   3c400:	mov    -0x8(%rbp),%rbx
   3c404:	mov    $0x1,%eax
   3c409:	mov    -0x28(%rbp),%r15
   3c40d:	leaveq 
   3c40e:	retq   
   3c40f:	not    %r13d
   3c412:	mov    -0x48(%rbp),%r15
   3c416:	add    0x2c(%rbx,%r15,4),%r13d
   3c41b:	mov    %r13d,0x2c(%rbx,%r15,4)
   3c420:	mov    -0x30(%rbp),%r13
   3c424:	jmpq   3c231 <decode_mcu_DC_first+0xb1>
   3c429:	nopl   0x0(%rax)

000000000003c430 <decode_mcu_AC_first>:
   3c430:	push   %rbp
   3c431:	mov    %rsp,%rbp
   3c434:	sub    $0x70,%rsp
   3c438:	mov    0x250(%rdi),%rcx
   3c43f:	mov    0x170(%rdi),%eax
   3c445:	test   %eax,%eax
   3c447:	jne    3c463 <decode_mcu_AC_first+0x33>
   3c449:	mov    %rbx,%rdx
   3c44c:	mov    %rdi,%rbx
   3c44f:	mov    %r15,%r8
   3c452:	mov    %r13,%r15
   3c455:	mov    %r14,%r9
   3c458:	mov    %r12,%rdi
   3c45b:	mov    %rcx,%r12
   3c45e:	mov    %rdi,%rcx
   3c461:	jmp    3c4c9 <decode_mcu_AC_first+0x99>
   3c463:	mov    0x4c(%rcx),%eax
   3c466:	test   %eax,%eax
   3c468:	je     3c484 <decode_mcu_AC_first+0x54>
   3c46a:	mov    %rbx,%rdx
   3c46d:	mov    %rdi,%rbx
   3c470:	mov    %r15,%r8
   3c473:	mov    %r13,%r15
   3c476:	mov    %r14,%r9
   3c479:	mov    %r12,%rdi
   3c47c:	mov    %rcx,%r12
   3c47f:	mov    %rdi,%rcx
   3c482:	jmp    3c4bc <decode_mcu_AC_first+0x8c>
   3c484:	mov    %rdi,%rax
   3c487:	mov    %r14,-0x58(%rbp)
   3c48b:	mov    %r15,-0x68(%rbp)
   3c48f:	mov    %rsi,-0x70(%rbp)
   3c493:	mov    %rbx,%r14
   3c496:	mov    %rdi,%rbx
   3c499:	mov    %rax,%rdi
   3c49c:	mov    %r13,%r15
   3c49f:	mov    %r12,%r13
   3c4a2:	mov    %rcx,%r12
   3c4a5:	callq  3c020 <process_restart>
   3c4aa:	mov    %r13,%rcx
   3c4ad:	mov    %r14,%rdx
   3c4b0:	mov    -0x70(%rbp),%rsi
   3c4b4:	mov    -0x68(%rbp),%r8
   3c4b8:	mov    -0x58(%rbp),%r9
   3c4bc:	mov    0x4c(%r12),%eax
   3c4c1:	add    $0xffffffff,%eax
   3c4c4:	mov    %eax,0x4c(%r12)
   3c4c9:	mov    $0x1,%eax
   3c4ce:	movslq 0x28(%r12),%rdi
   3c4d3:	cmp    $0xffffffff,%edi
   3c4d6:	jne    3c4e9 <decode_mcu_AC_first+0xb9>
   3c4d8:	mov    %rdx,%rbx
   3c4db:	mov    %rcx,%r12
   3c4de:	mov    %r15,%r13
   3c4e1:	mov    %r8,%r15
   3c4e4:	mov    %r9,%r14
   3c4e7:	leaveq 
   3c4e8:	retq   
   3c4e9:	mov    0x1b8(%rbx),%rax
   3c4f0:	movslq 0x18(%rax),%rax
   3c4f4:	mov    %rax,-0x68(%rbp)
   3c4f8:	mov    (%rsi),%rsi
   3c4fb:	mov    %rsi,-0x38(%rbp)
   3c4ff:	movslq 0x20c(%rbx),%r14
   3c506:	mov    0x31acb(%rip),%rsi        # 6dfd8 <jpeg_natural_order@@LIBJPEG_6.2+0x129f4>
   3c50d:	mov    %rsi,-0x40(%rbp)
   3c511:	lea    0x150(%r12),%r13
   3c519:	mov    %r13,-0x70(%rbp)
   3c51d:	mov    $0xbd,%esi
   3c522:	mov    %rsi,-0x58(%rbp)
   3c526:	mov    $0xd9,%esi
   3c52b:	mov    %rsi,-0x50(%rbp)
   3c52f:	mov    %r9,-0x20(%rbp)
   3c533:	mov    %r8,-0x28(%rbp)
   3c537:	mov    %rdx,-0x8(%rbp)
   3c53b:	mov    %rcx,-0x10(%rbp)
   3c53f:	mov    %r15,-0x18(%rbp)
   3c543:	jmp    3c575 <decode_mcu_AC_first+0x145>
   3c545:	not    %r14d
   3c548:	mov    0x218(%rbx),%ecx
   3c54e:	shl    %cl,%r14d
   3c551:	mov    -0x48(%rbp),%rdx
   3c555:	movslq %edx,%rax
   3c558:	mov    -0x40(%rbp),%rcx
   3c55c:	movslq (%rcx,%rax,4),%rax
   3c560:	mov    -0x38(%rbp),%rcx
   3c564:	mov    %r14w,(%rcx,%rax,2)
   3c569:	lea    0x1(%rdx),%r14d
   3c56d:	mov    -0x70(%rbp),%r13
   3c571:	mov    -0x68(%rbp),%rax
   3c575:	cmp    0x210(%rbx),%r14d
   3c57c:	jle    3c599 <decode_mcu_AC_first+0x169>
   3c57e:	mov    -0x18(%rbp),%r13
   3c582:	mov    -0x10(%rbp),%r12
   3c586:	mov    -0x8(%rbp),%rbx
   3c58a:	mov    $0x1,%eax
   3c58f:	mov    -0x28(%rbp),%r15
   3c593:	mov    -0x20(%rbp),%r14
   3c597:	leaveq 
   3c598:	retq   
   3c599:	lea    -0x3(%r14,%r14,2),%ecx
   3c59e:	movslq %ecx,%r15
   3c5a1:	add    0xd0(%r12,%rax,8),%r15
   3c5a9:	mov    %rbx,%rdi
   3c5ac:	mov    %r15,%rsi
   3c5af:	callq  3be70 <arith_decode>
   3c5b4:	test   %eax,%eax
   3c5b6:	je     3c5e7 <decode_mcu_AC_first+0x1b7>
   3c5b8:	mov    -0x18(%rbp),%r13
   3c5bc:	mov    -0x10(%rbp),%r12
   3c5c0:	mov    -0x8(%rbp),%rbx
   3c5c4:	mov    $0x1,%eax
   3c5c9:	mov    -0x28(%rbp),%r15
   3c5cd:	mov    -0x20(%rbp),%r14
   3c5d1:	leaveq 
   3c5d2:	retq   
   3c5d3:	movslq 0x210(%rbx),%rax
   3c5da:	add    $0x1,%r14d
   3c5de:	cmp    %r14d,%eax
   3c5e1:	jl     3c62c <decode_mcu_AC_first+0x1fc>
   3c5e3:	add    $0x3,%r15
   3c5e7:	lea    0x1(%r15),%rsi
   3c5eb:	mov    %rbx,%rdi
   3c5ee:	callq  3be70 <arith_decode>
   3c5f3:	test   %eax,%eax
   3c5f5:	je     3c5d3 <decode_mcu_AC_first+0x1a3>
   3c5f7:	mov    %r13,%rsi
   3c5fa:	mov    %rbx,%rdi
   3c5fd:	callq  3be70 <arith_decode>
   3c602:	mov    %rax,-0x30(%rbp)
   3c606:	add    $0x2,%r15
   3c60a:	mov    %rbx,%rdi
   3c60d:	mov    %r15,%rsi
   3c610:	callq  3be70 <arith_decode>
   3c615:	test   %eax,%eax
   3c617:	jne    3c66d <decode_mcu_AC_first+0x23d>
   3c619:	xor    %r13d,%r13d
   3c61c:	add    $0xe,%r15
   3c620:	mov    %r14,-0x48(%rbp)
   3c624:	mov    %r13,%r14
   3c627:	jmpq   3c6b5 <decode_mcu_AC_first+0x285>
   3c62c:	mov    (%rbx),%rax
   3c62f:	movl   $0x7e,0x28(%rax)
   3c636:	mov    (%rbx),%rax
   3c639:	mov    0x8(%rax),%rax
   3c63d:	mov    %rbx,%rdi
   3c640:	mov    $0xffffffffffffffff,%rsi
   3c647:	callq  *%rax
   3c649:	movl   $0xffffffff,0x28(%r12)
   3c652:	mov    -0x18(%rbp),%r13
   3c656:	mov    -0x10(%rbp),%r12
   3c65a:	mov    -0x8(%rbp),%rbx
   3c65e:	mov    $0x1,%eax
   3c663:	mov    -0x28(%rbp),%r15
   3c667:	mov    -0x20(%rbp),%r14
   3c66b:	leaveq 
   3c66c:	retq   
   3c66d:	mov    %rax,%r13
   3c670:	mov    %rbx,%rdi
   3c673:	mov    %r15,%rsi
   3c676:	callq  3be70 <arith_decode>
   3c67b:	test   %eax,%eax
   3c67d:	je     3c61c <decode_mcu_AC_first+0x1ec>
   3c67f:	mov    -0x68(%rbp),%rax
   3c683:	mov    0xd0(%r12,%rax,8),%rcx
   3c68b:	movzbl 0x160(%rbx,%rax,1),%eax
   3c693:	cmp    %r14d,%eax
   3c696:	jge    3c6d4 <decode_mcu_AC_first+0x2a4>
   3c698:	pushq  -0x50(%rbp)
   3c69b:	popq   -0x60(%rbp)
   3c69e:	jmp    3c6da <decode_mcu_AC_first+0x2aa>
   3c6a0:	sar    %r13d
   3c6a3:	mov    %rbx,%rdi
   3c6a6:	mov    %r15,%rsi
   3c6a9:	callq  3be70 <arith_decode>
   3c6ae:	test   %eax,%eax
   3c6b0:	je     3c6b5 <decode_mcu_AC_first+0x285>
   3c6b2:	or     %r13d,%r14d
   3c6b5:	mov    %r13,%rax
   3c6b8:	and    $0xfffffffe,%eax
   3c6bb:	test   %eax,%eax
   3c6bd:	jne    3c6a0 <decode_mcu_AC_first+0x270>
   3c6bf:	mov    -0x30(%rbp),%rax
   3c6c3:	test   %eax,%eax
   3c6c5:	jne    3c545 <decode_mcu_AC_first+0x115>
   3c6cb:	add    $0x1,%r14d
   3c6cf:	jmpq   3c548 <decode_mcu_AC_first+0x118>
   3c6d4:	pushq  -0x58(%rbp)
   3c6d7:	popq   -0x60(%rbp)
   3c6da:	mov    -0x60(%rbp),%rax
   3c6de:	lea    (%rax,%rcx,1),%r15
   3c6e2:	add    %r13d,%r13d
   3c6e5:	mov    %r14,-0x60(%rbp)
   3c6e9:	jmp    3c701 <decode_mcu_AC_first+0x2d1>
   3c6eb:	mov    %r13,%rax
   3c6ee:	and    $0x7fffffff,%eax
   3c6f3:	cmp    $0x4000,%eax
   3c6f8:	je     3c719 <decode_mcu_AC_first+0x2e9>
   3c6fa:	add    $0x1,%r15
   3c6fe:	add    %r13d,%r13d
   3c701:	mov    %rbx,%rdi
   3c704:	mov    %r15,%rsi
   3c707:	callq  3be70 <arith_decode>
   3c70c:	test   %eax,%eax
   3c70e:	jne    3c6eb <decode_mcu_AC_first+0x2bb>
   3c710:	mov    -0x60(%rbp),%r14
   3c714:	jmpq   3c61c <decode_mcu_AC_first+0x1ec>
   3c719:	mov    (%rbx),%rax
   3c71c:	movl   $0x7e,0x28(%rax)
   3c723:	mov    (%rbx),%rax
   3c726:	mov    0x8(%rax),%rax
   3c72a:	mov    %rbx,%rdi
   3c72d:	mov    $0xffffffffffffffff,%rsi
   3c734:	callq  *%rax
   3c736:	movl   $0xffffffff,0x28(%r12)
   3c73f:	mov    -0x18(%rbp),%r13
   3c743:	mov    -0x10(%rbp),%r12
   3c747:	mov    -0x8(%rbp),%rbx
   3c74b:	mov    $0x1,%eax
   3c750:	mov    -0x28(%rbp),%r15
   3c754:	mov    -0x20(%rbp),%r14
   3c758:	leaveq 
   3c759:	retq   
   3c75a:	nopw   0x0(%rax,%rax,1)

000000000003c760 <decode_mcu_DC_refine>:
   3c760:	push   %rbp
   3c761:	mov    %rsp,%rbp
   3c764:	sub    $0x30,%rsp
   3c768:	mov    %r13,-0x18(%rbp)
   3c76c:	mov    %r14,-0x20(%rbp)
   3c770:	mov    %r15,-0x28(%rbp)
   3c774:	mov    %rbx,-0x8(%rbp)
   3c778:	mov    %r12,-0x10(%rbp)
   3c77c:	mov    0x250(%rdi),%r14
   3c783:	mov    0x170(%rdi),%eax
   3c789:	test   %eax,%eax
   3c78b:	jne    3c795 <decode_mcu_DC_refine+0x35>
   3c78d:	mov    %rdi,%rbx
   3c790:	mov    %rsi,%r12
   3c793:	jmp    3c7bb <decode_mcu_DC_refine+0x5b>
   3c795:	mov    0x4c(%r14),%eax
   3c799:	test   %eax,%eax
   3c79b:	je     3c7a5 <decode_mcu_DC_refine+0x45>
   3c79d:	mov    %rdi,%rbx
   3c7a0:	mov    %rsi,%r12
   3c7a3:	jmp    3c7b0 <decode_mcu_DC_refine+0x50>
   3c7a5:	mov    %rsi,%r12
   3c7a8:	mov    %rdi,%rbx
   3c7ab:	callq  3c020 <process_restart>
   3c7b0:	mov    0x4c(%r14),%eax
   3c7b4:	add    $0xffffffff,%eax
   3c7b7:	mov    %eax,0x4c(%r14)
   3c7bb:	mov    $0x1,%r13d
   3c7c1:	mov    0x218(%rbx),%ecx
   3c7c7:	shl    %cl,%r13d
   3c7ca:	lea    0x150(%r14),%r15
   3c7d1:	xor    %r14d,%r14d
   3c7d4:	jmp    3c7fb <decode_mcu_DC_refine+0x9b>
   3c7d6:	mov    %rbx,%rdi
   3c7d9:	mov    %r15,%rsi
   3c7dc:	callq  3be70 <arith_decode>
   3c7e1:	test   %eax,%eax
   3c7e3:	je     3c7f7 <decode_mcu_DC_refine+0x97>
   3c7e5:	movslq %r14d,%rax
   3c7e8:	mov    (%r12,%rax,8),%rcx
   3c7ec:	movswq (%rcx),%rax
   3c7f0:	or     %r13w,%ax
   3c7f4:	mov    %ax,(%rcx)
   3c7f7:	add    $0x1,%r14d
   3c7fb:	movslq 0x1e0(%rbx),%rax
   3c802:	cmp    %r14d,%eax
   3c805:	jg     3c7d6 <decode_mcu_DC_refine+0x76>
   3c807:	mov    -0x10(%rbp),%r12
   3c80b:	mov    -0x8(%rbp),%rbx
   3c80f:	mov    $0x1,%eax
   3c814:	mov    -0x28(%rbp),%r15
   3c818:	mov    -0x20(%rbp),%r14
   3c81c:	mov    -0x18(%rbp),%r13
   3c820:	leaveq 
   3c821:	retq   
   3c822:	data16 nopw %cs:0x0(%rax,%rax,1)
   3c82d:	nopl   (%rax)

000000000003c830 <decode_mcu_AC_refine>:
   3c830:	push   %rbp
   3c831:	mov    %rsp,%rbp
   3c834:	sub    $0x60,%rsp
   3c838:	mov    0x250(%rdi),%r8
   3c83f:	mov    %r8,-0x38(%rbp)
   3c843:	mov    0x170(%rdi),%eax
   3c849:	test   %eax,%eax
   3c84b:	jne    3c861 <decode_mcu_AC_refine+0x31>
   3c84d:	mov    %rbx,%r9
   3c850:	mov    %rdi,%rbx
   3c853:	mov    %r15,%rdi
   3c856:	mov    %r12,%r15
   3c859:	mov    %r13,%r10
   3c85c:	mov    %r14,%r11
   3c85f:	jmp    3c8bd <decode_mcu_AC_refine+0x8d>
   3c861:	mov    0x4c(%r8),%eax
   3c865:	test   %eax,%eax
   3c867:	je     3c87d <decode_mcu_AC_refine+0x4d>
   3c869:	mov    %rbx,%r9
   3c86c:	mov    %rdi,%rbx
   3c86f:	mov    %r15,%rdi
   3c872:	mov    %r12,%r15
   3c875:	mov    %r13,%r10
   3c878:	mov    %r14,%r11
   3c87b:	jmp    3c8b2 <decode_mcu_AC_refine+0x82>
   3c87d:	mov    %rdi,%rax
   3c880:	mov    %r15,-0x50(%rbp)
   3c884:	mov    %rsi,-0x58(%rbp)
   3c888:	mov    %rdi,-0x60(%rbp)
   3c88c:	mov    %rax,%rdi
   3c88f:	mov    %r12,%r15
   3c892:	mov    %r8,%r12
   3c895:	callq  3c020 <process_restart>
   3c89a:	mov    %r12,%r8
   3c89d:	mov    %rbx,%r9
   3c8a0:	mov    %r13,%r10
   3c8a3:	mov    %r14,%r11
   3c8a6:	mov    -0x60(%rbp),%rbx
   3c8aa:	mov    -0x58(%rbp),%rsi
   3c8ae:	mov    -0x50(%rbp),%rdi
   3c8b2:	mov    0x4c(%r8),%eax
   3c8b6:	add    $0xffffffff,%eax
   3c8b9:	mov    %eax,0x4c(%r8)
   3c8bd:	mov    $0x1,%eax
   3c8c2:	movslq 0x28(%r8),%rcx
   3c8c6:	cmp    $0xffffffff,%ecx
   3c8c9:	jne    3c8dc <decode_mcu_AC_refine+0xac>
   3c8cb:	mov    %r9,%rbx
   3c8ce:	mov    %r15,%r12
   3c8d1:	mov    %rdi,%r15
   3c8d4:	mov    %r10,%r13
   3c8d7:	mov    %r11,%r14
   3c8da:	leaveq 
   3c8db:	retq   
   3c8dc:	mov    (%rsi),%r13
   3c8df:	mov    0x1b8(%rbx),%rcx
   3c8e6:	movslq 0x18(%rcx),%rsi
   3c8ea:	mov    %rsi,-0x40(%rbp)
   3c8ee:	mov    0x218(%rbx),%ecx
   3c8f4:	movslq 0x210(%rbx),%rdx
   3c8fb:	mov    0x316d6(%rip),%r12        # 6dfd8 <jpeg_natural_order@@LIBJPEG_6.2+0x129f4>
   3c902:	jmp    3c91a <decode_mcu_AC_refine+0xea>
   3c904:	movslq %edx,%r14
   3c907:	movslq (%r12,%r14,4),%r14
   3c90b:	movswq 0x0(%r13,%r14,2),%r14
   3c911:	test   %r14w,%r14w
   3c915:	jne    3c91e <decode_mcu_AC_refine+0xee>
   3c917:	add    $0xffffffff,%edx
   3c91a:	test   %edx,%edx
   3c91c:	jg     3c904 <decode_mcu_AC_refine+0xd4>
   3c91e:	movslq 0x20c(%rbx),%r14
   3c925:	mov    %rdi,-0x28(%rbp)
   3c929:	mov    $0xffffffffffffffff,%rdi
   3c930:	shl    %cl,%edi
   3c932:	mov    %rdi,-0x48(%rbp)
   3c936:	shl    %cl,%eax
   3c938:	mov    %rax,-0x50(%rbp)
   3c93c:	lea    0x150(%r8),%rax
   3c943:	mov    %rax,-0x60(%rbp)
   3c947:	mov    %r9,-0x8(%rbp)
   3c94b:	mov    %r15,-0x10(%rbp)
   3c94f:	mov    %r10,-0x18(%rbp)
   3c953:	mov    %r11,-0x20(%rbp)
   3c957:	jmp    3c987 <decode_mcu_AC_refine+0x157>
   3c959:	mov    %rbx,%rdi
   3c95c:	mov    -0x60(%rbp),%rsi
   3c960:	callq  3be70 <arith_decode>
   3c965:	test   %eax,%eax
   3c967:	jne    3c9ab <decode_mcu_AC_refine+0x17b>
   3c969:	mov    -0x58(%rbp),%rcx
   3c96d:	mov    -0x50(%rbp),%rax
   3c971:	mov    %ax,0x0(%r13,%rcx,2)
   3c977:	add    $0x1,%r14d
   3c97b:	mov    -0x30(%rbp),%rdx
   3c97f:	mov    -0x40(%rbp),%rsi
   3c983:	mov    -0x38(%rbp),%r8
   3c987:	cmp    0x210(%rbx),%r14d
   3c98e:	jle    3c9bb <decode_mcu_AC_refine+0x18b>
   3c990:	mov    -0x20(%rbp),%r14
   3c994:	mov    -0x18(%rbp),%r13
   3c998:	mov    -0x10(%rbp),%r12
   3c99c:	mov    -0x8(%rbp),%rbx
   3c9a0:	mov    $0x1,%eax
   3c9a5:	mov    -0x28(%rbp),%r15
   3c9a9:	leaveq 
   3c9aa:	retq   
   3c9ab:	mov    -0x58(%rbp),%rcx
   3c9af:	mov    -0x48(%rbp),%rax
   3c9b3:	mov    %ax,0x0(%r13,%rcx,2)
   3c9b9:	jmp    3c977 <decode_mcu_AC_refine+0x147>
   3c9bb:	lea    -0x3(%r14,%r14,2),%eax
   3c9c0:	movslq %eax,%r15
   3c9c3:	add    0xd0(%r8,%rsi,8),%r15
   3c9cb:	cmp    %r14d,%edx
   3c9ce:	jl     3c9d6 <decode_mcu_AC_refine+0x1a6>
   3c9d0:	mov    %rdx,-0x30(%rbp)
   3c9d4:	jmp    3ca30 <decode_mcu_AC_refine+0x200>
   3c9d6:	mov    %rbx,%rdi
   3c9d9:	mov    %r15,%rsi
   3c9dc:	mov    %rdx,-0x30(%rbp)
   3c9e0:	callq  3be70 <arith_decode>
   3c9e5:	test   %eax,%eax
   3c9e7:	je     3ca30 <decode_mcu_AC_refine+0x200>
   3c9e9:	mov    -0x20(%rbp),%r14
   3c9ed:	mov    -0x18(%rbp),%r13
   3c9f1:	mov    -0x10(%rbp),%r12
   3c9f5:	mov    -0x8(%rbp),%rbx
   3c9f9:	mov    $0x1,%eax
   3c9fe:	mov    -0x28(%rbp),%r15
   3ca02:	leaveq 
   3ca03:	retq   
   3ca04:	lea    0x1(%r15),%rsi
   3ca08:	mov    %rbx,%rdi
   3ca0b:	mov    %rax,-0x58(%rbp)
   3ca0f:	callq  3be70 <arith_decode>
   3ca14:	test   %eax,%eax
   3ca16:	jne    3c959 <decode_mcu_AC_refine+0x129>
   3ca1c:	movslq 0x210(%rbx),%rax
   3ca23:	add    $0x1,%r14d
   3ca27:	cmp    %r14d,%eax
   3ca2a:	jl     3ca75 <decode_mcu_AC_refine+0x245>
   3ca2c:	add    $0x3,%r15
   3ca30:	movslq %r14d,%rax
   3ca33:	movslq (%r12,%rax,4),%rax
   3ca37:	movswq 0x0(%r13,%rax,2),%rcx
   3ca3d:	test   %cx,%cx
   3ca40:	je     3ca04 <decode_mcu_AC_refine+0x1d4>
   3ca42:	lea    0x2(%r15),%rsi
   3ca46:	mov    %rax,%r15
   3ca49:	mov    %rbx,%rdi
   3ca4c:	callq  3be70 <arith_decode>
   3ca51:	test   %eax,%eax
   3ca53:	je     3c977 <decode_mcu_AC_refine+0x147>
   3ca59:	movswq 0x0(%r13,%r15,2),%rcx
   3ca5f:	test   %cx,%cx
   3ca62:	js     3cab8 <decode_mcu_AC_refine+0x288>
   3ca64:	mov    -0x50(%rbp),%rax
   3ca68:	add    %ecx,%eax
   3ca6a:	mov    %ax,0x0(%r13,%r15,2)
   3ca70:	jmpq   3c977 <decode_mcu_AC_refine+0x147>
   3ca75:	mov    (%rbx),%rax
   3ca78:	movl   $0x7e,0x28(%rax)
   3ca7f:	mov    (%rbx),%rax
   3ca82:	mov    0x8(%rax),%rax
   3ca86:	mov    %rbx,%rdi
   3ca89:	mov    $0xffffffffffffffff,%rsi
   3ca90:	callq  *%rax
   3ca92:	mov    -0x38(%rbp),%rax
   3ca96:	movl   $0xffffffff,0x28(%rax)
   3ca9d:	mov    -0x20(%rbp),%r14
   3caa1:	mov    -0x18(%rbp),%r13
   3caa5:	mov    -0x10(%rbp),%r12
   3caa9:	mov    -0x8(%rbp),%rbx
   3caad:	mov    $0x1,%eax
   3cab2:	mov    -0x28(%rbp),%r15
   3cab6:	leaveq 
   3cab7:	retq   
   3cab8:	mov    -0x48(%rbp),%rax
   3cabc:	add    %ecx,%eax
   3cabe:	mov    %ax,0x0(%r13,%r15,2)
   3cac4:	jmpq   3c977 <decode_mcu_AC_refine+0x147>
   3cac9:	nopl   0x0(%rax)

000000000003cad0 <decode_mcu>:
   3cad0:	push   %rbp
   3cad1:	mov    %rsp,%rbp
   3cad4:	sub    $0x90,%rsp
   3cadb:	mov    %rsi,-0x80(%rbp)
   3cadf:	mov    0x250(%rdi),%rax
   3cae6:	mov    0x170(%rdi),%ecx
   3caec:	test   %ecx,%ecx
   3caee:	jne    3cb07 <decode_mcu+0x37>
   3caf0:	mov    %r14,%rcx
   3caf3:	mov    %rbx,%r14
   3caf6:	mov    %rax,%rbx
   3caf9:	mov    %r15,%rdx
   3cafc:	mov    %r12,%r15
   3caff:	mov    %rdi,%r12
   3cb02:	mov    %r13,%r8
   3cb05:	jmp    3cb68 <decode_mcu+0x98>
   3cb07:	mov    0x4c(%rax),%ecx
   3cb0a:	test   %ecx,%ecx
   3cb0c:	je     3cb22 <decode_mcu+0x52>
   3cb0e:	mov    %r14,%rcx
   3cb11:	mov    %rbx,%r14
   3cb14:	mov    %rax,%rbx
   3cb17:	mov    %r15,%rdx
   3cb1a:	mov    %r12,%r15
   3cb1d:	mov    %rdi,%r12
   3cb20:	jmp    3cb5c <decode_mcu+0x8c>
   3cb22:	mov    %rdi,%rcx
   3cb25:	mov    %r15,-0x88(%rbp)
   3cb2c:	mov    %rdi,-0x90(%rbp)
   3cb33:	mov    %rcx,%rdi
   3cb36:	mov    %r12,%r15
   3cb39:	mov    %r14,%r12
   3cb3c:	mov    %rbx,%r14
   3cb3f:	mov    %rax,%rbx
   3cb42:	callq  3c020 <process_restart>
   3cb47:	mov    %r12,%rcx
   3cb4a:	mov    -0x80(%rbp),%rsi
   3cb4e:	mov    -0x90(%rbp),%r12
   3cb55:	mov    -0x88(%rbp),%rdx
   3cb5c:	mov    0x4c(%rbx),%eax
   3cb5f:	add    $0xffffffff,%eax
   3cb62:	mov    %eax,0x4c(%rbx)
   3cb65:	mov    %r13,%r8
   3cb68:	mov    $0x1,%eax
   3cb6d:	movslq 0x28(%rbx),%rdi
   3cb71:	cmp    $0xffffffff,%edi
   3cb74:	jne    3cb87 <decode_mcu+0xb7>
   3cb76:	mov    %r14,%rbx
   3cb79:	mov    %rcx,%r14
   3cb7c:	mov    %r15,%r12
   3cb7f:	mov    %rdx,%r15
   3cb82:	mov    %r8,%r13
   3cb85:	leaveq 
   3cb86:	retq   
   3cb87:	mov    0x3144a(%rip),%rdi        # 6dfd8 <jpeg_natural_order@@LIBJPEG_6.2+0x129f4>
   3cb8e:	mov    %rdi,-0x38(%rbp)
   3cb92:	lea    0x150(%rbx),%rdi
   3cb99:	mov    %rdi,-0x90(%rbp)
   3cba0:	xor    %r13d,%r13d
   3cba3:	mov    $0xbd,%edi
   3cba8:	mov    %rdi,-0x48(%rbp)
   3cbac:	mov    $0xd9,%edi
   3cbb1:	mov    %rdx,-0x28(%rbp)
   3cbb5:	mov    %r14,-0x8(%rbp)
   3cbb9:	mov    %r15,-0x10(%rbp)
   3cbbd:	mov    %r8,-0x18(%rbp)
   3cbc1:	mov    %rcx,-0x20(%rbp)
   3cbc5:	mov    %rdi,-0x40(%rbp)
   3cbc9:	mov    %r13,%rcx
   3cbcc:	jmp    3cc25 <decode_mcu+0x155>
   3cbce:	mov    -0x58(%rbp),%rax
   3cbd2:	movslq %eax,%rcx
   3cbd5:	mov    -0x38(%rbp),%rdx
   3cbd9:	movslq (%rdx,%rcx,4),%rcx
   3cbdd:	mov    %r14w,(%rsi,%rcx,2)
   3cbe2:	lea    0x1(%rax),%r13d
   3cbe6:	mov    -0x70(%rbp),%rax
   3cbea:	cmp    $0x3f,%r13d
   3cbee:	jg     3cc0f <decode_mcu+0x13f>
   3cbf0:	lea    -0x3(%r13,%r13,2),%ecx
   3cbf5:	movslq %ecx,%r14
   3cbf8:	add    0xd0(%rbx,%rax,8),%r14
   3cc00:	mov    %r12,%rdi
   3cc03:	mov    %r14,%rsi
   3cc06:	callq  3be70 <arith_decode>
   3cc0b:	test   %eax,%eax
   3cc0d:	je     3cc57 <decode_mcu+0x187>
   3cc0f:	mov    -0x88(%rbp),%rax
   3cc16:	lea    0x1(%rax),%ecx
   3cc19:	xor    %r13d,%r13d
   3cc1c:	mov    $0x1,%eax
   3cc21:	mov    -0x80(%rbp),%rsi
   3cc25:	cmp    0x1e0(%r12),%ecx
   3cc2d:	jl     3cca4 <decode_mcu+0x1d4>
   3cc2f:	mov    -0x20(%rbp),%r14
   3cc33:	mov    -0x18(%rbp),%r13
   3cc37:	mov    -0x10(%rbp),%r12
   3cc3b:	mov    -0x8(%rbp),%rbx
   3cc3f:	mov    -0x28(%rbp),%r15
   3cc43:	leaveq 
   3cc44:	retq   
   3cc45:	add    $0x1,%r13d
   3cc49:	cmp    $0x3f,%r13d
   3cc4d:	jg     3cd78 <decode_mcu+0x2a8>
   3cc53:	add    $0x3,%r14
   3cc57:	lea    0x1(%r14),%rsi
   3cc5b:	mov    %r12,%rdi
   3cc5e:	callq  3be70 <arith_decode>
   3cc63:	test   %eax,%eax
   3cc65:	je     3cc45 <decode_mcu+0x175>
   3cc67:	mov    %r12,%rdi
   3cc6a:	mov    -0x90(%rbp),%rsi
   3cc71:	callq  3be70 <arith_decode>
   3cc76:	mov    %rax,-0x30(%rbp)
   3cc7a:	lea    0x2(%r14),%r15
   3cc7e:	mov    %r12,%rdi
   3cc81:	mov    %r15,%rsi
   3cc84:	callq  3be70 <arith_decode>
   3cc89:	test   %eax,%eax
   3cc8b:	jne    3cdb9 <decode_mcu+0x2e9>
   3cc91:	xor    %r14d,%r14d
   3cc94:	add    $0xe,%r15
   3cc98:	mov    %r13,-0x58(%rbp)
   3cc9c:	mov    %r14,%r13
   3cc9f:	jmpq   3ce0d <decode_mcu+0x33d>
   3cca4:	test   %rsi,%rsi
   3cca7:	movslq %ecx,%rax
   3ccaa:	je     3ccb0 <decode_mcu+0x1e0>
   3ccac:	mov    (%rsi,%rax,8),%r13
   3ccb0:	mov    %r13,-0x60(%rbp)
   3ccb4:	movslq 0x1e4(%r12,%rax,4),%r15
   3ccbc:	mov    0x1b8(%r12,%r15,8),%rax
   3ccc4:	mov    %rax,-0x58(%rbp)
   3ccc8:	movslq 0x14(%rax),%rax
   3cccc:	mov    %rax,-0x78(%rbp)
   3ccd0:	movslq 0x3c(%rbx,%r15,4),%r14
   3ccd5:	add    0x50(%rbx,%rax,8),%r14
   3ccda:	mov    %r12,%rdi
   3ccdd:	mov    %r14,%rsi
   3cce0:	mov    %rcx,-0x88(%rbp)
   3cce7:	callq  3be70 <arith_decode>
   3ccec:	test   %eax,%eax
   3ccee:	je     3ce2c <decode_mcu+0x35c>
   3ccf4:	lea    0x1(%r14),%rsi
   3ccf8:	mov    %r12,%rdi
   3ccfb:	callq  3be70 <arith_decode>
   3cd00:	mov    %rax,-0x68(%rbp)
   3cd04:	movslq %eax,%rcx
   3cd07:	lea    0x2(%rcx,%r14,1),%r14
   3cd0c:	mov    %rax,%r13
   3cd0f:	mov    %r12,%rdi
   3cd12:	mov    %r14,%rsi
   3cd15:	callq  3be70 <arith_decode>
   3cd1a:	test   %eax,%eax
   3cd1c:	jne    3ce5c <decode_mcu+0x38c>
   3cd22:	mov    %r13,%rax
   3cd25:	xor    %r13d,%r13d
   3cd28:	mov    -0x78(%rbp),%rdi
   3cd2c:	movzbl 0x140(%rdi,%r12,1),%ecx
   3cd35:	mov    $0x1,%edx
   3cd3a:	mov    %rdx,%rsi
   3cd3d:	shl    %cl,%rsi
   3cd40:	sar    %rsi
   3cd43:	cmp    %esi,%r13d
   3cd46:	jl     3ce72 <decode_mcu+0x3a2>
   3cd4c:	movzbl 0x150(%rdi,%r12,1),%ecx
   3cd55:	shl    %cl,%rdx
   3cd58:	sar    %rdx
   3cd5b:	cmp    %edx,%r13d
   3cd5e:	jg     3ce8e <decode_mcu+0x3be>
   3cd64:	lea    0x4(,%rax,4),%eax
   3cd6b:	mov    %eax,0x3c(%rbx,%r15,4)
   3cd70:	mov    %r15,%rax
   3cd73:	jmpq   3ce7e <decode_mcu+0x3ae>
   3cd78:	mov    (%r12),%rax
   3cd7c:	movl   $0x7e,0x28(%rax)
   3cd83:	mov    (%r12),%rax
   3cd87:	mov    0x8(%rax),%rax
   3cd8b:	mov    %r12,%rdi
   3cd8e:	mov    $0xffffffffffffffff,%rsi
   3cd95:	callq  *%rax
   3cd97:	movl   $0xffffffff,0x28(%rbx)
   3cd9e:	mov    -0x20(%rbp),%r14
   3cda2:	mov    -0x18(%rbp),%r13
   3cda6:	mov    -0x10(%rbp),%r12
   3cdaa:	mov    -0x8(%rbp),%rbx
   3cdae:	mov    $0x1,%eax
   3cdb3:	mov    -0x28(%rbp),%r15
   3cdb7:	leaveq 
   3cdb8:	retq   
   3cdb9:	mov    %rax,%r14
   3cdbc:	mov    %r12,%rdi
   3cdbf:	mov    %r15,%rsi
   3cdc2:	callq  3be70 <arith_decode>
   3cdc7:	test   %eax,%eax
   3cdc9:	je     3cc94 <decode_mcu+0x1c4>
   3cdcf:	mov    -0x70(%rbp),%rax
   3cdd3:	mov    0xd0(%rbx,%rax,8),%rcx
   3cddb:	movzbl 0x160(%r12,%rax,1),%eax
   3cde4:	cmp    %eax,%r13d
   3cde7:	jle    3ce9f <decode_mcu+0x3cf>
   3cded:	pushq  -0x40(%rbp)
   3cdf0:	popq   -0x50(%rbp)
   3cdf3:	jmpq   3cea5 <decode_mcu+0x3d5>
   3cdf8:	sar    %r13d
   3cdfb:	mov    %r12,%rdi
   3cdfe:	mov    %r15,%rsi
   3ce01:	callq  3be70 <arith_decode>
   3ce06:	test   %eax,%eax
   3ce08:	je     3ce0d <decode_mcu+0x33d>
   3ce0a:	or     %r13d,%r14d
   3ce0d:	mov    %r13,%rax
   3ce10:	and    $0xfffffffe,%eax
   3ce13:	test   %eax,%eax
   3ce15:	jne    3cdf8 <decode_mcu+0x328>
   3ce17:	mov    -0x30(%rbp),%rax
   3ce1b:	test   %eax,%eax
   3ce1d:	jne    3ceb9 <decode_mcu+0x3e9>
   3ce23:	add    $0x1,%r14d
   3ce27:	jmpq   3cebc <decode_mcu+0x3ec>
   3ce2c:	movl   $0x0,0x3c(%rbx,%r15,4)
   3ce35:	test   %r13,%r13
   3ce38:	je     3ce45 <decode_mcu+0x375>
   3ce3a:	movswq 0x2c(%rbx,%r15,4),%rax
   3ce40:	mov    %ax,0x0(%r13)
   3ce45:	mov    -0x58(%rbp),%rax
   3ce49:	movslq 0x18(%rax),%rax
   3ce4d:	mov    %rax,-0x70(%rbp)
   3ce51:	mov    $0x1,%r13d
   3ce57:	jmpq   3cbea <decode_mcu+0x11a>
   3ce5c:	mov    -0x78(%rbp),%rcx
   3ce60:	mov    0x50(%rbx,%rcx,8),%r14
   3ce65:	add    $0x14,%r14
   3ce69:	mov    %r15,-0x70(%rbp)
   3ce6d:	mov    %rax,%r13
   3ce70:	jmp    3cee8 <decode_mcu+0x418>
   3ce72:	movl   $0x0,0x3c(%rbx,%r15,4)
   3ce7b:	mov    %r15,%rax
   3ce7e:	lea    0xe(%r14),%r15
   3ce82:	mov    %rax,-0x78(%rbp)
   3ce86:	mov    %r13,%r14
   3ce89:	jmpq   3cf19 <decode_mcu+0x449>
   3ce8e:	lea    0xc(,%rax,4),%eax
   3ce95:	mov    %eax,0x3c(%rbx,%r15,4)
   3ce9a:	mov    %r15,%rax
   3ce9d:	jmp    3ce7e <decode_mcu+0x3ae>
   3ce9f:	pushq  -0x48(%rbp)
   3cea2:	popq   -0x50(%rbp)
   3cea5:	mov    -0x50(%rbp),%rax
   3cea9:	lea    (%rax,%rcx,1),%r15
   3cead:	add    %r14d,%r14d
   3ceb0:	mov    %r13,-0x68(%rbp)
   3ceb4:	jmpq   3cf47 <decode_mcu+0x477>
   3ceb9:	not    %r14d
   3cebc:	mov    -0x60(%rbp),%rsi
   3cec0:	test   %rsi,%rsi
   3cec3:	jne    3cbce <decode_mcu+0xfe>
   3cec9:	mov    -0x58(%rbp),%rax
   3cecd:	jmpq   3cbe2 <decode_mcu+0x112>
   3ced2:	mov    %r13,%rax
   3ced5:	and    $0x7fffffff,%eax
   3ceda:	cmp    $0x4000,%eax
   3cedf:	je     3cf5f <decode_mcu+0x48f>
   3cee1:	add    $0x1,%r14
   3cee5:	add    %r13d,%r13d
   3cee8:	mov    %r12,%rdi
   3ceeb:	mov    %r14,%rsi
   3ceee:	callq  3be70 <arith_decode>
   3cef3:	test   %eax,%eax
   3cef5:	jne    3ced2 <decode_mcu+0x402>
   3cef7:	mov    -0x70(%rbp),%r15
   3cefb:	mov    -0x68(%rbp),%rax
   3ceff:	jmpq   3cd28 <decode_mcu+0x258>
   3cf04:	sar    %r14d
   3cf07:	mov    %r12,%rdi
   3cf0a:	mov    %r15,%rsi
   3cf0d:	callq  3be70 <arith_decode>
   3cf12:	test   %eax,%eax
   3cf14:	je     3cf19 <decode_mcu+0x449>
   3cf16:	or     %r14d,%r13d
   3cf19:	mov    %r14,%rax
   3cf1c:	and    $0xfffffffe,%eax
   3cf1f:	test   %eax,%eax
   3cf21:	jne    3cf04 <decode_mcu+0x434>
   3cf23:	mov    -0x68(%rbp),%rax
   3cf27:	test   %eax,%eax
   3cf29:	jne    3cfa0 <decode_mcu+0x4d0>
   3cf2b:	add    $0x1,%r13d
   3cf2f:	jmp    3cfa3 <decode_mcu+0x4d3>
   3cf31:	mov    %r14,%rax
   3cf34:	and    $0x7fffffff,%eax
   3cf39:	cmp    $0x4000,%eax
   3cf3e:	je     3cfba <decode_mcu+0x4ea>
   3cf40:	add    $0x1,%r15
   3cf44:	add    %r14d,%r14d
   3cf47:	mov    %r12,%rdi
   3cf4a:	mov    %r15,%rsi
   3cf4d:	callq  3be70 <arith_decode>
   3cf52:	test   %eax,%eax
   3cf54:	jne    3cf31 <decode_mcu+0x461>
   3cf56:	mov    -0x68(%rbp),%r13
   3cf5a:	jmpq   3cc94 <decode_mcu+0x1c4>
   3cf5f:	mov    (%r12),%rax
   3cf63:	movl   $0x7e,0x28(%rax)
   3cf6a:	mov    (%r12),%rax
   3cf6e:	mov    0x8(%rax),%rax
   3cf72:	mov    %r12,%rdi
   3cf75:	mov    $0xffffffffffffffff,%rsi
   3cf7c:	callq  *%rax
   3cf7e:	movl   $0xffffffff,0x28(%rbx)
   3cf85:	mov    -0x20(%rbp),%r14
   3cf89:	mov    -0x18(%rbp),%r13
   3cf8d:	mov    -0x10(%rbp),%r12
   3cf91:	mov    -0x8(%rbp),%rbx
   3cf95:	mov    $0x1,%eax
   3cf9a:	mov    -0x28(%rbp),%r15
   3cf9e:	leaveq 
   3cf9f:	retq   
   3cfa0:	not    %r13d
   3cfa3:	mov    -0x78(%rbp),%r15
   3cfa7:	add    0x2c(%rbx,%r15,4),%r13d
   3cfac:	mov    %r13d,0x2c(%rbx,%r15,4)
   3cfb1:	mov    -0x60(%rbp),%r13
   3cfb5:	jmpq   3ce35 <decode_mcu+0x365>
   3cfba:	mov    (%r12),%rax
   3cfbe:	movl   $0x7e,0x28(%rax)
   3cfc5:	mov    (%r12),%rax
   3cfc9:	mov    0x8(%rax),%rax
   3cfcd:	mov    %r12,%rdi
   3cfd0:	mov    $0xffffffffffffffff,%rsi
   3cfd7:	callq  *%rax
   3cfd9:	movl   $0xffffffff,0x28(%rbx)
   3cfe0:	mov    -0x20(%rbp),%r14
   3cfe4:	mov    -0x18(%rbp),%r13
   3cfe8:	mov    -0x10(%rbp),%r12
   3cfec:	mov    -0x8(%rbp),%rbx
   3cff0:	mov    $0x1,%eax
   3cff5:	mov    -0x28(%rbp),%r15
   3cff9:	leaveq 
   3cffa:	retq   
   3cffb:	nopl   0x0(%rax,%rax,1)

000000000003d000 <start_pass>:
   3d000:	push   %rbp
   3d001:	mov    %rsp,%rbp
   3d004:	sub    $0x40,%rsp
   3d008:	mov    %rbx,-0x8(%rbp)
   3d00c:	mov    %r12,-0x10(%rbp)
   3d010:	mov    %r13,-0x18(%rbp)
   3d014:	mov    %r14,-0x20(%rbp)
   3d018:	mov    %r15,-0x28(%rbp)
   3d01c:	mov    0x250(%rdi),%r14
   3d023:	mov    %r14,-0x40(%rbp)
   3d027:	mov    $0xffffffffffffffff,%rax
   3d02e:	mov    $0x1,%r13d
   3d034:	mov    $0x100,%ecx
   3d039:	xor    %esi,%esi
   3d03b:	mov    $0x40,%edx
   3d040:	movslq 0x138(%rdi),%rbx
   3d047:	test   %ebx,%ebx
   3d049:	jne    3d090 <start_pass+0x90>
   3d04b:	movslq 0x20c(%rdi),%rbx
   3d052:	test   %ebx,%ebx
   3d054:	jne    3d10b <start_pass+0x10b>
   3d05a:	movslq 0x214(%rdi),%rbx
   3d061:	test   %ebx,%ebx
   3d063:	jne    3d10b <start_pass+0x10b>
   3d069:	movslq 0x218(%rdi),%rbx
   3d070:	test   %ebx,%ebx
   3d072:	jne    3d10b <start_pass+0x10b>
   3d078:	movslq 0x210(%rdi),%rbx
   3d07f:	cmp    $0x3f,%ebx
   3d082:	jle    3d148 <start_pass+0x148>
   3d088:	mov    %rdi,%rbx
   3d08b:	jmpq   3d135 <start_pass+0x135>
   3d090:	movslq 0x20c(%rdi),%rdx
   3d097:	test   %edx,%edx
   3d099:	je     3d152 <start_pass+0x152>
   3d09f:	movslq 0x210(%rdi),%rcx
   3d0a6:	cmp    %ecx,%edx
   3d0a8:	jle    3d18b <start_pass+0x18b>
   3d0ae:	mov    (%rdi),%rcx
   3d0b1:	movl   $0x10,0x28(%rcx)
   3d0b8:	movslq 0x20c(%rdi),%rdx
   3d0bf:	mov    (%rdi),%rcx
   3d0c2:	mov    %edx,0x2c(%rcx)
   3d0c5:	movslq 0x210(%rdi),%rdx
   3d0cc:	mov    (%rdi),%rcx
   3d0cf:	mov    %edx,0x30(%rcx)
   3d0d2:	movslq 0x214(%rdi),%rdx
   3d0d9:	mov    (%rdi),%rcx
   3d0dc:	mov    %edx,0x34(%rcx)
   3d0df:	movslq 0x218(%rdi),%rdx
   3d0e6:	mov    (%rdi),%rcx
   3d0e9:	mov    %edx,0x38(%rcx)
   3d0ec:	mov    (%rdi),%rcx
   3d0ef:	mov    (%rcx),%rcx
   3d0f2:	mov    %rax,%r12
   3d0f5:	mov    %rsi,%r13
   3d0f8:	mov    %rdi,%rbx
   3d0fb:	callq  *%rcx
   3d0fd:	mov    %r12,%rax
   3d100:	mov    %r13,%rsi
   3d103:	mov    %rsi,%rcx
   3d106:	jmpq   3d211 <start_pass+0x211>
   3d10b:	mov    (%rdi),%rcx
   3d10e:	movl   $0x7a,0x28(%rcx)
   3d115:	mov    (%rdi),%rcx
   3d118:	mov    0x8(%rcx),%rcx
   3d11c:	mov    %rdx,%r12
   3d11f:	mov    %rsi,%r15
   3d122:	mov    %rax,%rsi
   3d125:	mov    %rdi,%rbx
   3d128:	callq  *%rcx
   3d12a:	mov    %r12,%rdx
   3d12d:	mov    %r15,%rsi
   3d130:	mov    $0x100,%ecx
   3d135:	lea    -0x66c(%rip),%rax        # 3cad0 <decode_mcu>
   3d13c:	mov    %rax,0x8(%r14)
   3d140:	mov    %rsi,%r12
   3d143:	jmpq   3d387 <start_pass+0x387>
   3d148:	cmp    $0x3e,%ebx
   3d14b:	jle    3d10b <start_pass+0x10b>
   3d14d:	mov    %rdi,%rbx
   3d150:	jmp    3d135 <start_pass+0x135>
   3d152:	movslq 0x210(%rdi),%rcx
   3d159:	test   %ecx,%ecx
   3d15b:	jne    3d0ae <start_pass+0xae>
   3d161:	movslq 0x214(%rdi),%rcx
   3d168:	test   %ecx,%ecx
   3d16a:	jne    3d3cf <start_pass+0x3cf>
   3d170:	movslq 0x218(%rdi),%rcx
   3d177:	cmp    $0xd,%ecx
   3d17a:	jg     3d0ae <start_pass+0xae>
   3d180:	mov    %rdi,%rbx
   3d183:	mov    %rsi,%rcx
   3d186:	jmpq   3d211 <start_pass+0x211>
   3d18b:	cmp    $0x3f,%ecx
   3d18e:	jg     3d0ae <start_pass+0xae>
   3d194:	movslq 0x1b0(%rdi),%rcx
   3d19b:	cmp    $0x1,%ecx
   3d19e:	jne    3d0ae <start_pass+0xae>
   3d1a4:	jmp    3d161 <start_pass+0x161>
   3d1a6:	movslq %r14d,%r15
   3d1a9:	movslq (%r12,%r15,4),%rcx
   3d1ad:	test   %ecx,%ecx
   3d1af:	jns    3d1b4 <start_pass+0x1b4>
   3d1b1:	mov    %rsi,%rcx
   3d1b4:	movslq 0x214(%rbx),%rdx
   3d1bb:	cmp    %ecx,%edx
   3d1bd:	je     3d1ef <start_pass+0x1ef>
   3d1bf:	mov    (%rbx),%rcx
   3d1c2:	movl   $0x73,0x28(%rcx)
   3d1c9:	mov    (%rbx),%rcx
   3d1cc:	mov    %r13d,0x2c(%rcx)
   3d1d0:	mov    (%rbx),%rcx
   3d1d3:	mov    %r14d,0x30(%rcx)
   3d1d7:	mov    (%rbx),%rcx
   3d1da:	mov    0x8(%rcx),%rcx
   3d1de:	mov    %rax,%rsi
   3d1e1:	mov    %rbx,%rdi
   3d1e4:	callq  *%rcx
   3d1e6:	mov    $0xffffffffffffffff,%rax
   3d1ed:	xor    %esi,%esi
   3d1ef:	movslq 0x218(%rbx),%rcx
   3d1f6:	mov    %ecx,(%r12,%r15,4)
   3d1fa:	add    $0x1,%r14d
   3d1fe:	movslq 0x210(%rbx),%rcx
   3d205:	cmp    %r14d,%ecx
   3d208:	jge    3d1a6 <start_pass+0x1a6>
   3d20a:	mov    -0x38(%rbp),%rcx
   3d20e:	add    $0x1,%ecx
   3d211:	mov    %rcx,-0x38(%rbp)
   3d215:	movslq 0x1b0(%rbx),%rdx
   3d21c:	cmp    %ecx,%edx
   3d21e:	jg     3d3e6 <start_pass+0x3e6>
   3d224:	movslq 0x214(%rbx),%rax
   3d22b:	test   %eax,%eax
   3d22d:	je     3d458 <start_pass+0x458>
   3d233:	movslq 0x20c(%rbx),%rax
   3d23a:	test   %eax,%eax
   3d23c:	je     3d48e <start_pass+0x48e>
   3d242:	lea    -0xa19(%rip),%rax        # 3c830 <decode_mcu_AC_refine>
   3d249:	mov    -0x40(%rbp),%r14
   3d24d:	mov    %rax,0x8(%r14)
   3d251:	mov    $0x1,%r13d
   3d257:	mov    $0x40,%edx
   3d25c:	mov    $0x100,%ecx
   3d261:	mov    %rsi,%r12
   3d264:	jmpq   3d387 <start_pass+0x387>
   3d269:	mov    0x8(%rbx),%rcx
   3d26d:	mov    (%rcx),%rcx
   3d270:	mov    %rbx,%rdi
   3d273:	mov    %r12,-0x30(%rbp)
   3d277:	mov    %r13,%rsi
   3d27a:	mov    %r8,%r13
   3d27d:	mov    %rax,%r12
   3d280:	callq  *%rcx
   3d282:	mov    %rax,0x50(%r14,%r12,8)
   3d287:	mov    %r12,%rax
   3d28a:	mov    -0x30(%rbp),%r12
   3d28e:	xor    %esi,%esi
   3d290:	mov    $0x40,%edx
   3d295:	mov    0x50(%r14,%rax,8),%rdi
   3d29a:	callq  41e0 <memset@plt>
   3d29f:	movl   $0x0,0x2c(%r14,%r13,4)
   3d2a8:	movl   $0x0,0x3c(%r14,%r13,4)
   3d2b1:	mov    $0x1,%r13d
   3d2b7:	xor    %esi,%esi
   3d2b9:	mov    $0x40,%edx
   3d2be:	mov    $0x100,%ecx
   3d2c3:	movslq 0x138(%rbx),%rax
   3d2ca:	test   %eax,%eax
   3d2cc:	je     3d2dd <start_pass+0x2dd>
   3d2ce:	movslq 0x20c(%rbx),%rax
   3d2d5:	test   %eax,%eax
   3d2d7:	je     3d37f <start_pass+0x37f>
   3d2dd:	movslq 0x18(%r15),%r15
   3d2e1:	test   %r15d,%r15d
   3d2e4:	js     3d2ec <start_pass+0x2ec>
   3d2e6:	cmp    $0xf,%r15d
   3d2ea:	jle    3d31e <start_pass+0x31e>
   3d2ec:	mov    (%rbx),%rax
   3d2ef:	movl   $0x7d,0x28(%rax)
   3d2f6:	mov    (%rbx),%rax
   3d2f9:	mov    %r15d,0x2c(%rax)
   3d2fd:	mov    (%rbx),%rax
   3d300:	mov    (%rax),%rax
   3d303:	mov    %rsi,%r13
   3d306:	mov    %rbx,%rdi
   3d309:	callq  *%rax
   3d30b:	mov    %r13,%rsi
   3d30e:	mov    $0x1,%r13d
   3d314:	mov    $0x40,%edx
   3d319:	mov    $0x100,%ecx
   3d31e:	mov    0xd0(%r14,%r15,8),%rax
   3d326:	test   %rax,%rax
   3d329:	jne    3d35e <start_pass+0x35e>
   3d32b:	mov    0x8(%rbx),%rax
   3d32f:	mov    (%rax),%rax
   3d332:	mov    %rcx,%rdx
   3d335:	mov    %r13,%rcx
   3d338:	mov    %rsi,%r13
   3d33b:	mov    %rcx,%rsi
   3d33e:	mov    %rbx,%rdi
   3d341:	callq  *%rax
   3d343:	mov    %rax,0xd0(%r14,%r15,8)
   3d34b:	mov    %r13,%rsi
   3d34e:	mov    $0x1,%r13d
   3d354:	mov    $0x40,%edx
   3d359:	mov    $0x100,%ecx
   3d35e:	mov    0xd0(%r14,%r15,8),%rdi
   3d366:	mov    %rdx,%r14
   3d369:	mov    %rcx,%rdx
   3d36c:	mov    %rsi,%r15
   3d36f:	callq  41e0 <memset@plt>
   3d374:	mov    %r14,%rdx
   3d377:	mov    %r15,%rsi
   3d37a:	mov    $0x100,%ecx
   3d37f:	add    $0x1,%r12d
   3d383:	mov    -0x40(%rbp),%r14
   3d387:	movslq 0x1b0(%rbx),%rax
   3d38e:	cmp    %r12d,%eax
   3d391:	jg     3d4b5 <start_pass+0x4b5>
   3d397:	movq   $0x0,0x18(%r14)
   3d39f:	movq   $0x0,0x20(%r14)
   3d3a7:	movl   $0xfffffff0,0x28(%r14)
   3d3af:	mov    0x170(%rbx),%eax
   3d3b5:	mov    %eax,0x4c(%r14)
   3d3b9:	mov    -0x28(%rbp),%r15
   3d3bd:	mov    -0x20(%rbp),%r14
   3d3c1:	mov    -0x18(%rbp),%r13
   3d3c5:	mov    -0x10(%rbp),%r12
   3d3c9:	mov    -0x8(%rbp),%rbx
   3d3cd:	leaveq 
   3d3ce:	retq   
   3d3cf:	movslq 0x218(%rdi),%rdx
   3d3d6:	add    $0xffffffff,%ecx
   3d3d9:	cmp    %ecx,%edx
   3d3db:	jne    3d0ae <start_pass+0xae>
   3d3e1:	jmpq   3d170 <start_pass+0x170>
   3d3e6:	movslq %ecx,%rcx
   3d3e9:	mov    0x1b8(%rbx,%rcx,8),%rcx
   3d3f1:	movslq 0x4(%rcx),%r13
   3d3f5:	mov    %r13,%r12
   3d3f8:	shl    $0x8,%r12
   3d3fc:	add    0xc0(%rbx),%r12
   3d403:	movslq 0x20c(%rbx),%rcx
   3d40a:	test   %ecx,%ecx
   3d40c:	je     3d44c <start_pass+0x44c>
   3d40e:	movslq (%r12),%rcx
   3d412:	test   %ecx,%ecx
   3d414:	jns    3d44c <start_pass+0x44c>
   3d416:	mov    (%rbx),%rcx
   3d419:	movl   $0x73,0x28(%rcx)
   3d420:	mov    (%rbx),%rcx
   3d423:	mov    %r13d,0x2c(%rcx)
   3d427:	mov    (%rbx),%rcx
   3d42a:	movl   $0x0,0x30(%rcx)
   3d431:	mov    (%rbx),%rcx
   3d434:	mov    0x8(%rcx),%rcx
   3d438:	mov    %rsi,%r14
   3d43b:	mov    %rax,%r15
   3d43e:	mov    %rbx,%rdi
   3d441:	mov    %r15,%rsi
   3d444:	callq  *%rcx
   3d446:	mov    %r15,%rax
   3d449:	mov    %r14,%rsi
   3d44c:	movslq 0x20c(%rbx),%r14
   3d453:	jmpq   3d1fe <start_pass+0x1fe>
   3d458:	movslq 0x20c(%rbx),%rax
   3d45f:	test   %eax,%eax
   3d461:	je     3d548 <start_pass+0x548>
   3d467:	lea    -0x103e(%rip),%rax        # 3c430 <decode_mcu_AC_first>
   3d46e:	mov    -0x40(%rbp),%r14
   3d472:	mov    %rax,0x8(%r14)
   3d476:	mov    $0x1,%r13d
   3d47c:	mov    $0x40,%edx
   3d481:	mov    $0x100,%ecx
   3d486:	mov    %rsi,%r12
   3d489:	jmpq   3d387 <start_pass+0x387>
   3d48e:	lea    -0xd35(%rip),%rax        # 3c760 <decode_mcu_DC_refine>
   3d495:	mov    -0x40(%rbp),%r14
   3d499:	mov    %rax,0x8(%r14)
   3d49d:	mov    $0x1,%r13d
   3d4a3:	mov    $0x40,%edx
   3d4a8:	mov    $0x100,%ecx
   3d4ad:	mov    %rsi,%r12
   3d4b0:	jmpq   3d387 <start_pass+0x387>
   3d4b5:	movslq %r12d,%r8
   3d4b8:	mov    0x1b8(%rbx,%r8,8),%r15
   3d4c0:	movslq 0x138(%rbx),%rax
   3d4c7:	test   %eax,%eax
   3d4c9:	je     3d4e9 <start_pass+0x4e9>
   3d4cb:	movslq 0x20c(%rbx),%rax
   3d4d2:	test   %eax,%eax
   3d4d4:	jne    3d2c3 <start_pass+0x2c3>
   3d4da:	movslq 0x214(%rbx),%rax
   3d4e1:	test   %eax,%eax
   3d4e3:	jne    3d2c3 <start_pass+0x2c3>
   3d4e9:	movslq 0x14(%r15),%rax
   3d4ed:	test   %eax,%eax
   3d4ef:	js     3d4f6 <start_pass+0x4f6>
   3d4f1:	cmp    $0xf,%eax
   3d4f4:	jle    3d532 <start_pass+0x532>
   3d4f6:	mov    (%rbx),%rcx
   3d4f9:	movl   $0x7d,0x28(%rcx)
   3d500:	mov    (%rbx),%rcx
   3d503:	mov    %eax,0x2c(%rcx)
   3d506:	mov    (%rbx),%rcx
   3d509:	mov    (%rcx),%rcx
   3d50c:	mov    %rbx,%rdi
   3d50f:	mov    %r12,-0x38(%rbp)
   3d513:	mov    %r8,%r12
   3d516:	mov    %rax,%r13
   3d519:	callq  *%rcx
   3d51b:	mov    %r13,%rax
   3d51e:	mov    %r12,%r8
   3d521:	mov    $0x1,%r13d
   3d527:	mov    -0x38(%rbp),%r12
   3d52b:	xor    %esi,%esi
   3d52d:	mov    $0x40,%edx
   3d532:	mov    0x50(%r14,%rax,8),%rcx
   3d537:	test   %rcx,%rcx
   3d53a:	je     3d269 <start_pass+0x269>
   3d540:	mov    %r8,%r13
   3d543:	jmpq   3d295 <start_pass+0x295>
   3d548:	lea    -0x13cf(%rip),%rax        # 3c180 <decode_mcu_DC_first>
   3d54f:	mov    -0x40(%rbp),%r14
   3d553:	mov    %rax,0x8(%r14)
   3d557:	mov    $0x1,%r13d
   3d55d:	mov    $0x40,%edx
   3d562:	mov    $0x100,%ecx
   3d567:	mov    %rsi,%r12
   3d56a:	jmpq   3d387 <start_pass+0x387>
   3d56f:	nop

000000000003d570 <jsimd_can_rgb_ycc>:
   3d570:	push   %rbp
   3d571:	mov    %rsp,%rbp
   3d574:	callq  3df60 <init_simd>
   3d579:	xor    %eax,%eax
   3d57b:	mov    0x30cf7(%rip),%ecx        # 6e278 <simd_support>
   3d581:	and    $0x8,%ecx
   3d584:	test   %ecx,%ecx
   3d586:	jne    3d58a <jsimd_can_rgb_ycc+0x1a>
   3d588:	leaveq 
   3d589:	retq   
   3d58a:	lea    0x1e68f(%rip),%rcx        # 5bc20 <PW_F0299_F0337>
   3d591:	and    $0xf,%rcx
   3d595:	test   %rcx,%rcx
   3d598:	jne    3d5a1 <jsimd_can_rgb_ycc+0x31>
   3d59a:	mov    $0x1,%eax
   3d59f:	leaveq 
   3d5a0:	retq   
   3d5a1:	leaveq 
   3d5a2:	retq   
   3d5a3:	data16 nopw %cs:0x0(%rax,%rax,1)
   3d5ae:	xchg   %ax,%ax

000000000003d5b0 <jsimd_can_rgb_gray>:
   3d5b0:	push   %rbp
   3d5b1:	mov    %rsp,%rbp
   3d5b4:	callq  3df60 <init_simd>
   3d5b9:	xor    %eax,%eax
   3d5bb:	mov    0x30cb7(%rip),%ecx        # 6e278 <simd_support>
   3d5c1:	and    $0x8,%ecx
   3d5c4:	test   %ecx,%ecx
   3d5c6:	jne    3d5ca <jsimd_can_rgb_gray+0x1a>
   3d5c8:	leaveq 
   3d5c9:	retq   
   3d5ca:	lea    0x1e6af(%rip),%rcx        # 5bc80 <PW_F0299_F0337>
   3d5d1:	and    $0xf,%rcx
   3d5d5:	test   %rcx,%rcx
   3d5d8:	jne    3d5e1 <jsimd_can_rgb_gray+0x31>
   3d5da:	mov    $0x1,%eax
   3d5df:	leaveq 
   3d5e0:	retq   
   3d5e1:	leaveq 
   3d5e2:	retq   
   3d5e3:	data16 nopw %cs:0x0(%rax,%rax,1)
   3d5ee:	xchg   %ax,%ax

000000000003d5f0 <jsimd_can_ycc_rgb>:
   3d5f0:	push   %rbp
   3d5f1:	mov    %rsp,%rbp
   3d5f4:	callq  3df60 <init_simd>
   3d5f9:	xor    %eax,%eax
   3d5fb:	mov    0x30c77(%rip),%ecx        # 6e278 <simd_support>
   3d601:	and    $0x8,%ecx
   3d604:	test   %ecx,%ecx
   3d606:	jne    3d60a <jsimd_can_ycc_rgb+0x1a>
   3d608:	leaveq 
   3d609:	retq   
   3d60a:	lea    0x2e69f(%rip),%rcx        # 6bcb0 <PW_F0402>
   3d611:	and    $0xf,%rcx
   3d615:	test   %rcx,%rcx
   3d618:	jne    3d621 <jsimd_can_ycc_rgb+0x31>
   3d61a:	mov    $0x1,%eax
   3d61f:	leaveq 
   3d620:	retq   
   3d621:	leaveq 
   3d622:	retq   
   3d623:	data16 nopw %cs:0x0(%rax,%rax,1)
   3d62e:	xchg   %ax,%ax

000000000003d630 <jsimd_can_ycc_rgb565>:
   3d630:	push   %rbp
   3d631:	mov    %rsp,%rbp
   3d634:	xor    %eax,%eax
   3d636:	leaveq 
   3d637:	retq   
   3d638:	nopl   0x0(%rax,%rax,1)

000000000003d640 <jsimd_rgb_ycc_convert>:
   3d640:	push   %rbp
   3d641:	mov    %rsp,%rbp
   3d644:	lea    0xcc5(%rip),%rax        # 3e310 <jsimd_rgb_ycc_convert_sse2>
   3d64b:	mov    0x3c(%rdi),%r9d
   3d64f:	add    $0xfffffffa,%r9d
   3d653:	cmp    $0x9,%r9d
   3d657:	ja     3d671 <jsimd_rgb_ycc_convert+0x31>
   3d659:	lea    0x1e488(%rip),%r10        # 5bae8 <jpeg_aritab+0x390>
   3d660:	movslq (%r10,%r9,4),%r9
   3d664:	add    %r10,%r9
   3d667:	jmpq   *%r9
   3d66a:	lea    0x276f(%rip),%rax        # 3fde0 <jsimd_extxrgb_ycc_convert_sse2>
   3d671:	mov    0x30(%rdi),%edi
   3d674:	callq  *%rax
   3d676:	leaveq 
   3d677:	retq   
   3d678:	lea    0x1121(%rip),%rax        # 3e7a0 <jsimd_extrgb_ycc_convert_sse2>
   3d67f:	jmp    3d671 <jsimd_rgb_ycc_convert+0x31>
   3d681:	lea    0x15a8(%rip),%rax        # 3ec30 <jsimd_extrgbx_ycc_convert_sse2>
   3d688:	jmp    3d671 <jsimd_rgb_ycc_convert+0x31>
   3d68a:	lea    0x19ff(%rip),%rax        # 3f090 <jsimd_extbgr_ycc_convert_sse2>
   3d691:	jmp    3d671 <jsimd_rgb_ycc_convert+0x31>
   3d693:	lea    0x1e86(%rip),%rax        # 3f520 <jsimd_extbgrx_ycc_convert_sse2>
   3d69a:	jmp    3d671 <jsimd_rgb_ycc_convert+0x31>
   3d69c:	lea    0x22dd(%rip),%rax        # 3f980 <jsimd_extxbgr_ycc_convert_sse2>
   3d6a3:	jmp    3d671 <jsimd_rgb_ycc_convert+0x31>
   3d6a5:	data16 nopw %cs:0x0(%rax,%rax,1)

000000000003d6b0 <jsimd_rgb_gray_convert>:
   3d6b0:	push   %rbp
   3d6b1:	mov    %rsp,%rbp
   3d6b4:	lea    0x2b85(%rip),%rax        # 40240 <jsimd_rgb_gray_convert_sse2>
   3d6bb:	mov    0x3c(%rdi),%r9d
   3d6bf:	add    $0xfffffffa,%r9d
   3d6c3:	cmp    $0x9,%r9d
   3d6c7:	ja     3d6e1 <jsimd_rgb_gray_convert+0x31>
   3d6c9:	lea    0x1e440(%rip),%r10        # 5bb10 <jpeg_aritab+0x3b8>
   3d6d0:	movslq (%r10,%r9,4),%r9
   3d6d4:	add    %r10,%r9
   3d6d7:	jmpq   *%r9
   3d6da:	lea    0x3b4f(%rip),%rax        # 41230 <jsimd_extxrgb_gray_convert_sse2>
   3d6e1:	mov    0x30(%rdi),%edi
   3d6e4:	callq  *%rax
   3d6e6:	leaveq 
   3d6e7:	retq   
   3d6e8:	lea    0x2e11(%rip),%rax        # 40500 <jsimd_extrgb_gray_convert_sse2>
   3d6ef:	jmp    3d6e1 <jsimd_rgb_gray_convert+0x31>
   3d6f1:	lea    0x30c8(%rip),%rax        # 407c0 <jsimd_extrgbx_gray_convert_sse2>
   3d6f8:	jmp    3d6e1 <jsimd_rgb_gray_convert+0x31>
   3d6fa:	lea    0x334f(%rip),%rax        # 40a50 <jsimd_extbgr_gray_convert_sse2>
   3d701:	jmp    3d6e1 <jsimd_rgb_gray_convert+0x31>
   3d703:	lea    0x3606(%rip),%rax        # 40d10 <jsimd_extbgrx_gray_convert_sse2>
   3d70a:	jmp    3d6e1 <jsimd_rgb_gray_convert+0x31>
   3d70c:	lea    0x388d(%rip),%rax        # 40fa0 <jsimd_extxbgr_gray_convert_sse2>
   3d713:	jmp    3d6e1 <jsimd_rgb_gray_convert+0x31>
   3d715:	data16 nopw %cs:0x0(%rax,%rax,1)

000000000003d720 <jsimd_ycc_rgb_convert>:
   3d720:	push   %rbp
   3d721:	mov    %rsp,%rbp
   3d724:	lea    0x48f5(%rip),%rax        # 42020 <jsimd_ycc_rgb_convert_sse2>
   3d72b:	mov    0x40(%rdi),%r9d
   3d72f:	add    $0xfffffffa,%r9d
   3d733:	cmp    $0x9,%r9d
   3d737:	ja     3d751 <jsimd_ycc_rgb_convert+0x31>
   3d739:	lea    0x1e3f8(%rip),%r10        # 5bb38 <jpeg_aritab+0x3e0>
   3d740:	movslq (%r10,%r9,4),%r9
   3d744:	add    %r10,%r9
   3d747:	jmpq   *%r9
   3d74a:	lea    0x5d9f(%rip),%rax        # 434f0 <jsimd_ycc_extxrgb_convert_sse2>
   3d751:	mov    0x88(%rdi),%edi
   3d757:	callq  *%rax
   3d759:	leaveq 
   3d75a:	retq   
   3d75b:	lea    0x4c5e(%rip),%rax        # 423c0 <jsimd_ycc_extrgb_convert_sse2>
   3d762:	jmp    3d751 <jsimd_ycc_rgb_convert+0x31>
   3d764:	lea    0x4ff5(%rip),%rax        # 42760 <jsimd_ycc_extrgbx_convert_sse2>
   3d76b:	jmp    3d751 <jsimd_ycc_rgb_convert+0x31>
   3d76d:	lea    0x533c(%rip),%rax        # 42ab0 <jsimd_ycc_extbgr_convert_sse2>
   3d774:	jmp    3d751 <jsimd_ycc_rgb_convert+0x31>
   3d776:	lea    0x56d3(%rip),%rax        # 42e50 <jsimd_ycc_extbgrx_convert_sse2>
   3d77d:	jmp    3d751 <jsimd_ycc_rgb_convert+0x31>
   3d77f:	lea    0x5a1a(%rip),%rax        # 431a0 <jsimd_ycc_extxbgr_convert_sse2>
   3d786:	jmp    3d751 <jsimd_ycc_rgb_convert+0x31>
   3d788:	nopl   0x0(%rax,%rax,1)

000000000003d790 <jsimd_ycc_rgb565_convert>:
   3d790:	push   %rbp
   3d791:	mov    %rsp,%rbp
   3d794:	leaveq 
   3d795:	retq   
   3d796:	nopw   %cs:0x0(%rax,%rax,1)

000000000003d7a0 <jsimd_can_h2v2_downsample>:
   3d7a0:	push   %rbp
   3d7a1:	mov    %rsp,%rbp
   3d7a4:	callq  3df60 <init_simd>
   3d7a9:	mov    0x30ac9(%rip),%eax        # 6e278 <simd_support>
   3d7af:	and    $0x8,%eax
   3d7b2:	test   %eax,%eax
   3d7b4:	je     3d7bd <jsimd_can_h2v2_downsample+0x1d>
   3d7b6:	mov    $0x1,%eax
   3d7bb:	leaveq 
   3d7bc:	retq   
   3d7bd:	xor    %eax,%eax
   3d7bf:	leaveq 
   3d7c0:	retq   
   3d7c1:	data16 nopw %cs:0x0(%rax,%rax,1)
   3d7cc:	nopl   0x0(%rax)

000000000003d7d0 <jsimd_can_h2v1_downsample>:
   3d7d0:	push   %rbp
   3d7d1:	mov    %rsp,%rbp
   3d7d4:	callq  3df60 <init_simd>
   3d7d9:	mov    0x30a99(%rip),%eax        # 6e278 <simd_support>
   3d7df:	and    $0x8,%eax
   3d7e2:	test   %eax,%eax
   3d7e4:	je     3d7ed <jsimd_can_h2v1_downsample+0x1d>
   3d7e6:	mov    $0x1,%eax
   3d7eb:	leaveq 
   3d7ec:	retq   
   3d7ed:	xor    %eax,%eax
   3d7ef:	leaveq 
   3d7f0:	retq   
   3d7f1:	data16 nopw %cs:0x0(%rax,%rax,1)
   3d7fc:	nopl   0x0(%rax)

000000000003d800 <jsimd_h2v2_downsample>:
   3d800:	push   %rbp
   3d801:	mov    %rsp,%rbp
   3d804:	mov    0x30(%rdi),%r9d
   3d808:	movslq 0x13c(%rdi),%rdi
   3d80f:	mov    0xc(%rsi),%r8d
   3d813:	mov    0x1c(%rsi),%eax
   3d816:	mov    %rdi,%rsi
   3d819:	mov    %r9,%rdi
   3d81c:	mov    %rcx,%r9
   3d81f:	mov    %rax,%rcx
   3d822:	mov    %r8,%rax
   3d825:	mov    %rdx,%r8
   3d828:	mov    %rax,%rdx
   3d82b:	callq  41ea0 <jsimd_h2v2_downsample_sse2>
   3d830:	leaveq 
   3d831:	retq   
   3d832:	data16 nopw %cs:0x0(%rax,%rax,1)
   3d83d:	nopl   (%rax)

000000000003d840 <jsimd_h2v1_downsample>:
   3d840:	push   %rbp
   3d841:	mov    %rsp,%rbp
   3d844:	mov    0x30(%rdi),%r9d
   3d848:	movslq 0x13c(%rdi),%rdi
   3d84f:	mov    0xc(%rsi),%r8d
   3d853:	mov    0x1c(%rsi),%eax
   3d856:	mov    %rdi,%rsi
   3d859:	mov    %r9,%rdi
   3d85c:	mov    %rcx,%r9
   3d85f:	mov    %rax,%rcx
   3d862:	mov    %r8,%rax
   3d865:	mov    %rdx,%r8
   3d868:	mov    %rax,%rdx
   3d86b:	callq  41d70 <jsimd_h2v1_downsample_sse2>
   3d870:	leaveq 
   3d871:	retq   
   3d872:	data16 nopw %cs:0x0(%rax,%rax,1)
   3d87d:	nopl   (%rax)

000000000003d880 <jsimd_can_h2v2_upsample>:
   3d880:	push   %rbp
   3d881:	mov    %rsp,%rbp
   3d884:	callq  3df60 <init_simd>
   3d889:	mov    0x309e9(%rip),%eax        # 6e278 <simd_support>
   3d88f:	and    $0x8,%eax
   3d892:	test   %eax,%eax
   3d894:	je     3d89d <jsimd_can_h2v2_upsample+0x1d>
   3d896:	mov    $0x1,%eax
   3d89b:	leaveq 
   3d89c:	retq   
   3d89d:	xor    %eax,%eax
   3d89f:	leaveq 
   3d8a0:	retq   
   3d8a1:	data16 nopw %cs:0x0(%rax,%rax,1)
   3d8ac:	nopl   0x0(%rax)

000000000003d8b0 <jsimd_can_h2v1_upsample>:
   3d8b0:	push   %rbp
   3d8b1:	mov    %rsp,%rbp
   3d8b4:	callq  3df60 <init_simd>
   3d8b9:	mov    0x309b9(%rip),%eax        # 6e278 <simd_support>
   3d8bf:	and    $0x8,%eax
   3d8c2:	test   %eax,%eax
   3d8c4:	je     3d8cd <jsimd_can_h2v1_upsample+0x1d>
   3d8c6:	mov    $0x1,%eax
   3d8cb:	leaveq 
   3d8cc:	retq   
   3d8cd:	xor    %eax,%eax
   3d8cf:	leaveq 
   3d8d0:	retq   
   3d8d1:	data16 nopw %cs:0x0(%rax,%rax,1)
   3d8dc:	nopl   0x0(%rax)

000000000003d8e0 <jsimd_h2v2_upsample>:
   3d8e0:	push   %rbp
   3d8e1:	mov    %rsp,%rbp
   3d8e4:	movslq 0x19c(%rdi),%rax
   3d8eb:	mov    0x88(%rdi),%esi
   3d8f1:	mov    %rax,%rdi
   3d8f4:	callq  45a50 <jsimd_h2v2_upsample_sse2>
   3d8f9:	leaveq 
   3d8fa:	retq   
   3d8fb:	nopl   0x0(%rax,%rax,1)

000000000003d900 <jsimd_h2v1_upsample>:
   3d900:	push   %rbp
   3d901:	mov    %rsp,%rbp
   3d904:	movslq 0x19c(%rdi),%rax
   3d90b:	mov    0x88(%rdi),%esi
   3d911:	mov    %rax,%rdi
   3d914:	callq  45990 <jsimd_h2v1_upsample_sse2>
   3d919:	leaveq 
   3d91a:	retq   
   3d91b:	nopl   0x0(%rax,%rax,1)

000000000003d920 <jsimd_can_h2v2_fancy_upsample>:
   3d920:	push   %rbp
   3d921:	mov    %rsp,%rbp
   3d924:	callq  3df60 <init_simd>
   3d929:	xor    %eax,%eax
   3d92b:	mov    0x30947(%rip),%ecx        # 6e278 <simd_support>
   3d931:	and    $0x8,%ecx
   3d934:	test   %ecx,%ecx
   3d936:	jne    3d93a <jsimd_can_h2v2_fancy_upsample+0x1a>
   3d938:	leaveq 
   3d939:	retq   
   3d93a:	lea    0x2e40f(%rip),%rcx        # 6bd50 <PW_ONE>
   3d941:	and    $0xf,%rcx
   3d945:	test   %rcx,%rcx
   3d948:	jne    3d951 <jsimd_can_h2v2_fancy_upsample+0x31>
   3d94a:	mov    $0x1,%eax
   3d94f:	leaveq 
   3d950:	retq   
   3d951:	leaveq 
   3d952:	retq   
   3d953:	data16 nopw %cs:0x0(%rax,%rax,1)
   3d95e:	xchg   %ax,%ax

000000000003d960 <jsimd_can_h2v1_fancy_upsample>:
   3d960:	push   %rbp
   3d961:	mov    %rsp,%rbp
   3d964:	callq  3df60 <init_simd>
   3d969:	xor    %eax,%eax
   3d96b:	mov    0x30907(%rip),%ecx        # 6e278 <simd_support>
   3d971:	and    $0x8,%ecx
   3d974:	test   %ecx,%ecx
   3d976:	jne    3d97a <jsimd_can_h2v1_fancy_upsample+0x1a>
   3d978:	leaveq 
   3d979:	retq   
   3d97a:	lea    0x2e3cf(%rip),%rcx        # 6bd50 <PW_ONE>
   3d981:	and    $0xf,%rcx
   3d985:	test   %rcx,%rcx
   3d988:	jne    3d991 <jsimd_can_h2v1_fancy_upsample+0x31>
   3d98a:	mov    $0x1,%eax
   3d98f:	leaveq 
   3d990:	retq   
   3d991:	leaveq 
   3d992:	retq   
   3d993:	data16 nopw %cs:0x0(%rax,%rax,1)
   3d99e:	xchg   %ax,%ax

000000000003d9a0 <jsimd_h2v2_fancy_upsample>:
   3d9a0:	push   %rbp
   3d9a1:	mov    %rsp,%rbp
   3d9a4:	movslq 0x19c(%rdi),%rdi
   3d9ab:	mov    0x28(%rsi),%esi
   3d9ae:	callq  455e0 <jsimd_h2v2_fancy_upsample_sse2>
   3d9b3:	leaveq 
   3d9b4:	retq   
   3d9b5:	data16 nopw %cs:0x0(%rax,%rax,1)

000000000003d9c0 <jsimd_h2v1_fancy_upsample>:
   3d9c0:	push   %rbp
   3d9c1:	mov    %rsp,%rbp
   3d9c4:	movslq 0x19c(%rdi),%rdi
   3d9cb:	mov    0x28(%rsi),%esi
   3d9ce:	callq  45450 <jsimd_h2v1_fancy_upsample_sse2>
   3d9d3:	leaveq 
   3d9d4:	retq   
   3d9d5:	data16 nopw %cs:0x0(%rax,%rax,1)

000000000003d9e0 <jsimd_can_h2v2_merged_upsample>:
   3d9e0:	push   %rbp
   3d9e1:	mov    %rsp,%rbp
   3d9e4:	callq  3df60 <init_simd>
   3d9e9:	xor    %eax,%eax
   3d9eb:	mov    0x30887(%rip),%ecx        # 6e278 <simd_support>
   3d9f1:	and    $0x8,%ecx
   3d9f4:	test   %ecx,%ecx
   3d9f6:	jne    3d9fa <jsimd_can_h2v2_merged_upsample+0x1a>
   3d9f8:	leaveq 
   3d9f9:	retq   
   3d9fa:	lea    0x2e2ff(%rip),%rcx        # 6bd00 <PW_F0402>
   3da01:	and    $0xf,%rcx
   3da05:	test   %rcx,%rcx
   3da08:	jne    3da11 <jsimd_can_h2v2_merged_upsample+0x31>
   3da0a:	mov    $0x1,%eax
   3da0f:	leaveq 
   3da10:	retq   
   3da11:	leaveq 
   3da12:	retq   
   3da13:	data16 nopw %cs:0x0(%rax,%rax,1)
   3da1e:	xchg   %ax,%ax

000000000003da20 <jsimd_can_h2v1_merged_upsample>:
   3da20:	push   %rbp
   3da21:	mov    %rsp,%rbp
   3da24:	callq  3df60 <init_simd>
   3da29:	xor    %eax,%eax
   3da2b:	mov    0x30847(%rip),%ecx        # 6e278 <simd_support>
   3da31:	and    $0x8,%ecx
   3da34:	test   %ecx,%ecx
   3da36:	jne    3da3a <jsimd_can_h2v1_merged_upsample+0x1a>
   3da38:	leaveq 
   3da39:	retq   
   3da3a:	lea    0x2e2bf(%rip),%rcx        # 6bd00 <PW_F0402>
   3da41:	and    $0xf,%rcx
   3da45:	test   %rcx,%rcx
   3da48:	jne    3da51 <jsimd_can_h2v1_merged_upsample+0x31>
   3da4a:	mov    $0x1,%eax
   3da4f:	leaveq 
   3da50:	retq   
   3da51:	leaveq 
   3da52:	retq   
   3da53:	data16 nopw %cs:0x0(%rax,%rax,1)
   3da5e:	xchg   %ax,%ax

000000000003da60 <jsimd_h2v2_merged_upsample>:
   3da60:	push   %rbp
   3da61:	mov    %rsp,%rbp
   3da64:	lea    0x6165(%rip),%rax        # 43bd0 <jsimd_h2v2_merged_upsample_sse2>
   3da6b:	mov    0x40(%rdi),%r8d
   3da6f:	add    $0xfffffffa,%r8d
   3da73:	cmp    $0x9,%r8d
   3da77:	ja     3da91 <jsimd_h2v2_merged_upsample+0x31>
   3da79:	lea    0x1e0e0(%rip),%r9        # 5bb60 <jpeg_aritab+0x408>
   3da80:	movslq (%r9,%r8,4),%r8
   3da84:	add    %r9,%r8
   3da87:	jmpq   *%r8
   3da8a:	lea    0x791f(%rip),%rax        # 453b0 <jsimd_h2v2_extxrgb_merged_upsample_sse2>
   3da91:	mov    0x88(%rdi),%edi
   3da97:	callq  *%rax
   3da99:	leaveq 
   3da9a:	retq   
   3da9b:	lea    0x655e(%rip),%rax        # 44000 <jsimd_h2v2_extrgb_merged_upsample_sse2>
   3daa2:	jmp    3da91 <jsimd_h2v2_merged_upsample+0x31>
   3daa4:	lea    0x6935(%rip),%rax        # 443e0 <jsimd_h2v2_extrgbx_merged_upsample_sse2>
   3daab:	jmp    3da91 <jsimd_h2v2_merged_upsample+0x31>
   3daad:	lea    0x6d5c(%rip),%rax        # 44810 <jsimd_h2v2_extbgr_merged_upsample_sse2>
   3dab4:	jmp    3da91 <jsimd_h2v2_merged_upsample+0x31>
   3dab6:	lea    0x7133(%rip),%rax        # 44bf0 <jsimd_h2v2_extbgrx_merged_upsample_sse2>
   3dabd:	jmp    3da91 <jsimd_h2v2_merged_upsample+0x31>
   3dabf:	lea    0x750a(%rip),%rax        # 44fd0 <jsimd_h2v2_extxbgr_merged_upsample_sse2>
   3dac6:	jmp    3da91 <jsimd_h2v2_merged_upsample+0x31>
   3dac8:	nopl   0x0(%rax,%rax,1)

000000000003dad0 <jsimd_h2v1_merged_upsample>:
   3dad0:	push   %rbp
   3dad1:	mov    %rsp,%rbp
   3dad4:	lea    0x5d65(%rip),%rax        # 43840 <jsimd_h2v1_merged_upsample_sse2>
   3dadb:	mov    0x40(%rdi),%r8d
   3dadf:	add    $0xfffffffa,%r8d
   3dae3:	cmp    $0x9,%r8d
   3dae7:	ja     3db01 <jsimd_h2v1_merged_upsample+0x31>
   3dae9:	lea    0x1e098(%rip),%r9        # 5bb88 <jpeg_aritab+0x430>
   3daf0:	movslq (%r9,%r8,4),%r8
   3daf4:	add    %r9,%r8
   3daf7:	jmpq   *%r8
   3dafa:	lea    0x756f(%rip),%rax        # 45070 <jsimd_h2v1_extxrgb_merged_upsample_sse2>
   3db01:	mov    0x88(%rdi),%edi
   3db07:	callq  *%rax
   3db09:	leaveq 
   3db0a:	retq   
   3db0b:	lea    0x615e(%rip),%rax        # 43c70 <jsimd_h2v1_extrgb_merged_upsample_sse2>
   3db12:	jmp    3db01 <jsimd_h2v1_merged_upsample+0x31>
   3db14:	lea    0x6585(%rip),%rax        # 440a0 <jsimd_h2v1_extrgbx_merged_upsample_sse2>
   3db1b:	jmp    3db01 <jsimd_h2v1_merged_upsample+0x31>
   3db1d:	lea    0x695c(%rip),%rax        # 44480 <jsimd_h2v1_extbgr_merged_upsample_sse2>
   3db24:	jmp    3db01 <jsimd_h2v1_merged_upsample+0x31>
   3db26:	lea    0x6d83(%rip),%rax        # 448b0 <jsimd_h2v1_extbgrx_merged_upsample_sse2>
   3db2d:	jmp    3db01 <jsimd_h2v1_merged_upsample+0x31>
   3db2f:	lea    0x715a(%rip),%rax        # 44c90 <jsimd_h2v1_extxbgr_merged_upsample_sse2>
   3db36:	jmp    3db01 <jsimd_h2v1_merged_upsample+0x31>
   3db38:	nopl   0x0(%rax,%rax,1)

000000000003db40 <jsimd_can_huff_encode_one_block>:
   3db40:	push   %rbp
   3db41:	mov    %rsp,%rbp
   3db44:	callq  3df60 <init_simd>
   3db49:	xor    %eax,%eax
   3db4b:	mov    0x30727(%rip),%ecx        # 6e278 <simd_support>
   3db51:	and    $0x8,%ecx
   3db54:	test   %ecx,%ecx
   3db56:	jne    3db5a <jsimd_can_huff_encode_one_block+0x1a>
   3db58:	leaveq 
   3db59:	retq   
   3db5a:	mov    0x3071c(%rip),%ecx        # 6e27c <simd_huffman>
   3db60:	test   %ecx,%ecx
   3db62:	jne    3db66 <jsimd_can_huff_encode_one_block+0x26>
   3db64:	leaveq 
   3db65:	retq   
   3db66:	lea    0x1e143(%rip),%rcx        # 5bcb0 <jconst_huff_encode_one_block>
   3db6d:	and    $0xf,%rcx
   3db71:	test   %rcx,%rcx
   3db74:	jne    3db7d <jsimd_can_huff_encode_one_block+0x3d>
   3db76:	mov    $0x1,%eax
   3db7b:	leaveq 
   3db7c:	retq   
   3db7d:	leaveq 
   3db7e:	retq   
   3db7f:	nop

000000000003db80 <jsimd_huff_encode_one_block>:
   3db80:	push   %rbp
   3db81:	mov    %rsp,%rbp
   3db84:	callq  414c0 <jsimd_huff_encode_one_block_sse2>
   3db89:	leaveq 
   3db8a:	retq   
   3db8b:	nopl   0x0(%rax,%rax,1)

000000000003db90 <jsimd_can_convsamp>:
   3db90:	push   %rbp
   3db91:	mov    %rsp,%rbp
   3db94:	callq  3df60 <init_simd>
   3db99:	mov    0x306d9(%rip),%eax        # 6e278 <simd_support>
   3db9f:	and    $0x8,%eax
   3dba2:	test   %eax,%eax
   3dba4:	je     3dbad <jsimd_can_convsamp+0x1d>
   3dba6:	mov    $0x1,%eax
   3dbab:	leaveq 
   3dbac:	retq   
   3dbad:	xor    %eax,%eax
   3dbaf:	leaveq 
   3dbb0:	retq   
   3dbb1:	data16 nopw %cs:0x0(%rax,%rax,1)
   3dbbc:	nopl   0x0(%rax)

000000000003dbc0 <jsimd_can_convsamp_float>:
   3dbc0:	push   %rbp
   3dbc1:	mov    %rsp,%rbp
   3dbc4:	callq  3df60 <init_simd>
   3dbc9:	mov    0x306a9(%rip),%eax        # 6e278 <simd_support>
   3dbcf:	and    $0x8,%eax
   3dbd2:	test   %eax,%eax
   3dbd4:	je     3dbdd <jsimd_can_convsamp_float+0x1d>
   3dbd6:	mov    $0x1,%eax
   3dbdb:	leaveq 
   3dbdc:	retq   
   3dbdd:	xor    %eax,%eax
   3dbdf:	leaveq 
   3dbe0:	retq   
   3dbe1:	data16 nopw %cs:0x0(%rax,%rax,1)
   3dbec:	nopl   0x0(%rax)

000000000003dbf0 <jsimd_convsamp>:
   3dbf0:	push   %rbp
   3dbf1:	mov    %rsp,%rbp
   3dbf4:	callq  480e0 <jsimd_convsamp_sse2>
   3dbf9:	leaveq 
   3dbfa:	retq   
   3dbfb:	nopl   0x0(%rax,%rax,1)

000000000003dc00 <jsimd_convsamp_float>:
   3dc00:	push   %rbp
   3dc01:	mov    %rsp,%rbp
   3dc04:	callq  47f80 <jsimd_convsamp_float_sse2>
   3dc09:	leaveq 
   3dc0a:	retq   
   3dc0b:	nopl   0x0(%rax,%rax,1)

000000000003dc10 <jsimd_can_fdct_islow>:
   3dc10:	push   %rbp
   3dc11:	mov    %rsp,%rbp
   3dc14:	callq  3df60 <init_simd>
   3dc19:	xor    %eax,%eax
   3dc1b:	mov    0x30657(%rip),%ecx        # 6e278 <simd_support>
   3dc21:	and    $0x8,%ecx
   3dc24:	test   %ecx,%ecx
   3dc26:	jne    3dc2a <jsimd_can_fdct_islow+0x1a>
   3dc28:	leaveq 
   3dc29:	retq   
   3dc2a:	lea    0x2e1af(%rip),%rcx        # 6bde0 <PW_F130_F054>
   3dc31:	and    $0xf,%rcx
   3dc35:	test   %rcx,%rcx
   3dc38:	jne    3dc41 <jsimd_can_fdct_islow+0x31>
   3dc3a:	mov    $0x1,%eax
   3dc3f:	leaveq 
   3dc40:	retq   
   3dc41:	leaveq 
   3dc42:	retq   
   3dc43:	data16 nopw %cs:0x0(%rax,%rax,1)
   3dc4e:	xchg   %ax,%ax

000000000003dc50 <jsimd_can_fdct_ifast>:
   3dc50:	push   %rbp
   3dc51:	mov    %rsp,%rbp
   3dc54:	callq  3df60 <init_simd>
   3dc59:	xor    %eax,%eax
   3dc5b:	mov    0x30617(%rip),%ecx        # 6e278 <simd_support>
   3dc61:	and    $0x8,%ecx
   3dc64:	test   %ecx,%ecx
   3dc66:	jne    3dc6a <jsimd_can_fdct_ifast+0x1a>
   3dc68:	leaveq 
   3dc69:	retq   
   3dc6a:	lea    0x2e12f(%rip),%rcx        # 6bda0 <PW_F0707>
   3dc71:	and    $0xf,%rcx
   3dc75:	test   %rcx,%rcx
   3dc78:	jne    3dc81 <jsimd_can_fdct_ifast+0x31>
   3dc7a:	mov    $0x1,%eax
   3dc7f:	leaveq 
   3dc80:	retq   
   3dc81:	leaveq 
   3dc82:	retq   
   3dc83:	data16 nopw %cs:0x0(%rax,%rax,1)
   3dc8e:	xchg   %ax,%ax

000000000003dc90 <jsimd_can_fdct_float>:
   3dc90:	push   %rbp
   3dc91:	mov    %rsp,%rbp
   3dc94:	callq  3df60 <init_simd>
   3dc99:	xor    %eax,%eax
   3dc9b:	mov    0x305d7(%rip),%ecx        # 6e278 <simd_support>
   3dca1:	and    $0x4,%ecx
   3dca4:	test   %ecx,%ecx
   3dca6:	jne    3dcaa <jsimd_can_fdct_float+0x1a>
   3dca8:	leaveq 
   3dca9:	retq   
   3dcaa:	lea    0x1df2f(%rip),%rcx        # 5bbe0 <PD_0_382>
   3dcb1:	and    $0xf,%rcx
   3dcb5:	test   %rcx,%rcx
   3dcb8:	jne    3dcc1 <jsimd_can_fdct_float+0x31>
   3dcba:	mov    $0x1,%eax
   3dcbf:	leaveq 
   3dcc0:	retq   
   3dcc1:	leaveq 
   3dcc2:	retq   
   3dcc3:	data16 nopw %cs:0x0(%rax,%rax,1)
   3dcce:	xchg   %ax,%ax

000000000003dcd0 <jsimd_fdct_islow>:
   3dcd0:	push   %rbp
   3dcd1:	mov    %rsp,%rbp
   3dcd4:	callq  45f40 <jsimd_fdct_islow_sse2>
   3dcd9:	leaveq 
   3dcda:	retq   
   3dcdb:	nopl   0x0(%rax,%rax,1)

000000000003dce0 <jsimd_fdct_ifast>:
   3dce0:	push   %rbp
   3dce1:	mov    %rsp,%rbp
   3dce4:	callq  45b30 <jsimd_fdct_ifast_sse2>
   3dce9:	leaveq 
   3dcea:	retq   
   3dceb:	nopl   0x0(%rax,%rax,1)

000000000003dcf0 <jsimd_fdct_float>:
   3dcf0:	push   %rbp
   3dcf1:	mov    %rsp,%rbp
   3dcf4:	callq  3dfe0 <jsimd_fdct_float_sse>
   3dcf9:	leaveq 
   3dcfa:	retq   
   3dcfb:	nopl   0x0(%rax,%rax,1)

000000000003dd00 <jsimd_can_quantize>:
   3dd00:	push   %rbp
   3dd01:	mov    %rsp,%rbp
   3dd04:	callq  3df60 <init_simd>
   3dd09:	mov    0x30569(%rip),%eax        # 6e278 <simd_support>
   3dd0f:	and    $0x8,%eax
   3dd12:	test   %eax,%eax
   3dd14:	je     3dd1d <jsimd_can_quantize+0x1d>
   3dd16:	mov    $0x1,%eax
   3dd1b:	leaveq 
   3dd1c:	retq   
   3dd1d:	xor    %eax,%eax
   3dd1f:	leaveq 
   3dd20:	retq   
   3dd21:	data16 nopw %cs:0x0(%rax,%rax,1)
   3dd2c:	nopl   0x0(%rax)

000000000003dd30 <jsimd_can_quantize_float>:
   3dd30:	push   %rbp
   3dd31:	mov    %rsp,%rbp
   3dd34:	callq  3df60 <init_simd>
   3dd39:	mov    0x30539(%rip),%eax        # 6e278 <simd_support>
   3dd3f:	and    $0x8,%eax
   3dd42:	test   %eax,%eax
   3dd44:	je     3dd4d <jsimd_can_quantize_float+0x1d>
   3dd46:	mov    $0x1,%eax
   3dd4b:	leaveq 
   3dd4c:	retq   
   3dd4d:	xor    %eax,%eax
   3dd4f:	leaveq 
   3dd50:	retq   
   3dd51:	data16 nopw %cs:0x0(%rax,%rax,1)
   3dd5c:	nopl   0x0(%rax)

000000000003dd60 <jsimd_quantize>:
   3dd60:	push   %rbp
   3dd61:	mov    %rsp,%rbp
   3dd64:	callq  481a0 <jsimd_quantize_sse2>
   3dd69:	leaveq 
   3dd6a:	retq   
   3dd6b:	nopl   0x0(%rax,%rax,1)

000000000003dd70 <jsimd_quantize_float>:
   3dd70:	push   %rbp
   3dd71:	mov    %rsp,%rbp
   3dd74:	callq  48040 <jsimd_quantize_float_sse2>
   3dd79:	leaveq 
   3dd7a:	retq   
   3dd7b:	nopl   0x0(%rax,%rax,1)

000000000003dd80 <jsimd_can_idct_2x2>:
   3dd80:	push   %rbp
   3dd81:	mov    %rsp,%rbp
   3dd84:	callq  3df60 <init_simd>
   3dd89:	xor    %eax,%eax
   3dd8b:	mov    0x304e7(%rip),%ecx        # 6e278 <simd_support>
   3dd91:	and    $0x8,%ecx
   3dd94:	test   %ecx,%ecx
   3dd96:	jne    3dd9a <jsimd_can_idct_2x2+0x1a>
   3dd98:	leaveq 
   3dd99:	retq   
   3dd9a:	lea    0x2e24f(%rip),%rcx        # 6bff0 <PW_F184_MF076>
   3dda1:	and    $0xf,%rcx
   3dda5:	test   %rcx,%rcx
   3dda8:	jne    3ddb1 <jsimd_can_idct_2x2+0x31>
   3ddaa:	mov    $0x1,%eax
   3ddaf:	leaveq 
   3ddb0:	retq   
   3ddb1:	leaveq 
   3ddb2:	retq   
   3ddb3:	data16 nopw %cs:0x0(%rax,%rax,1)
   3ddbe:	xchg   %ax,%ax

000000000003ddc0 <jsimd_can_idct_4x4>:
   3ddc0:	push   %rbp
   3ddc1:	mov    %rsp,%rbp
   3ddc4:	callq  3df60 <init_simd>
   3ddc9:	xor    %eax,%eax
   3ddcb:	mov    0x304a7(%rip),%ecx        # 6e278 <simd_support>
   3ddd1:	and    $0x8,%ecx
   3ddd4:	test   %ecx,%ecx
   3ddd6:	jne    3ddda <jsimd_can_idct_4x4+0x1a>
   3ddd8:	leaveq 
   3ddd9:	retq   
   3ddda:	lea    0x2e20f(%rip),%rcx        # 6bff0 <PW_F184_MF076>
   3dde1:	and    $0xf,%rcx
   3dde5:	test   %rcx,%rcx
   3dde8:	jne    3ddf1 <jsimd_can_idct_4x4+0x31>
   3ddea:	mov    $0x1,%eax
   3ddef:	leaveq 
   3ddf0:	retq   
   3ddf1:	leaveq 
   3ddf2:	retq   
   3ddf3:	data16 nopw %cs:0x0(%rax,%rax,1)
   3ddfe:	xchg   %ax,%ax

000000000003de00 <jsimd_idct_2x2>:
   3de00:	push   %rbp
   3de01:	mov    %rsp,%rbp
   3de04:	mov    0x58(%rsi),%rdi
   3de08:	mov    %rdx,%rsi
   3de0b:	mov    %rcx,%rdx
   3de0e:	mov    %r8,%rcx
   3de11:	callq  47dc0 <jsimd_idct_2x2_sse2>
   3de16:	leaveq 
   3de17:	retq   
   3de18:	nopl   0x0(%rax,%rax,1)

000000000003de20 <jsimd_idct_4x4>:
   3de20:	push   %rbp
   3de21:	mov    %rsp,%rbp
   3de24:	mov    0x58(%rsi),%rdi
   3de28:	mov    %rdx,%rsi
   3de2b:	mov    %rcx,%rdx
   3de2e:	mov    %r8,%rcx
   3de31:	callq  479f0 <jsimd_idct_4x4_sse2>
   3de36:	leaveq 
   3de37:	retq   
   3de38:	nopl   0x0(%rax,%rax,1)

000000000003de40 <jsimd_can_idct_islow>:
   3de40:	push   %rbp
   3de41:	mov    %rsp,%rbp
   3de44:	callq  3df60 <init_simd>
   3de49:	xor    %eax,%eax
   3de4b:	mov    0x30427(%rip),%ecx        # 6e278 <simd_support>
   3de51:	and    $0x8,%ecx
   3de54:	test   %ecx,%ecx
   3de56:	jne    3de5a <jsimd_can_idct_islow+0x1a>
   3de58:	leaveq 
   3de59:	retq   
   3de5a:	lea    0x2e0df(%rip),%rcx        # 6bf40 <PW_F130_F054>
   3de61:	and    $0xf,%rcx
   3de65:	test   %rcx,%rcx
   3de68:	jne    3de71 <jsimd_can_idct_islow+0x31>
   3de6a:	mov    $0x1,%eax
   3de6f:	leaveq 
   3de70:	retq   
   3de71:	leaveq 
   3de72:	retq   
   3de73:	data16 nopw %cs:0x0(%rax,%rax,1)
   3de7e:	xchg   %ax,%ax

000000000003de80 <jsimd_can_idct_ifast>:
   3de80:	push   %rbp
   3de81:	mov    %rsp,%rbp
   3de84:	callq  3df60 <init_simd>
   3de89:	xor    %eax,%eax
   3de8b:	mov    0x303e7(%rip),%ecx        # 6e278 <simd_support>
   3de91:	and    $0x8,%ecx
   3de94:	test   %ecx,%ecx
   3de96:	jne    3de9a <jsimd_can_idct_ifast+0x1a>
   3de98:	leaveq 
   3de99:	retq   
   3de9a:	lea    0x2e04f(%rip),%rcx        # 6bef0 <PW_F1414>
   3dea1:	and    $0xf,%rcx
   3dea5:	test   %rcx,%rcx
   3dea8:	jne    3deb1 <jsimd_can_idct_ifast+0x31>
   3deaa:	mov    $0x1,%eax
   3deaf:	leaveq 
   3deb0:	retq   
   3deb1:	leaveq 
   3deb2:	retq   
   3deb3:	data16 nopw %cs:0x0(%rax,%rax,1)
   3debe:	xchg   %ax,%ax

000000000003dec0 <jsimd_can_idct_float>:
   3dec0:	push   %rbp
   3dec1:	mov    %rsp,%rbp
   3dec4:	callq  3df60 <init_simd>
   3dec9:	xor    %eax,%eax
   3decb:	mov    0x303a7(%rip),%ecx        # 6e278 <simd_support>
   3ded1:	and    $0x8,%ecx
   3ded4:	test   %ecx,%ecx
   3ded6:	jne    3deda <jsimd_can_idct_float+0x1a>
   3ded8:	leaveq 
   3ded9:	retq   
   3deda:	lea    0x2dfaf(%rip),%rcx        # 6be90 <PD_1_414>
   3dee1:	and    $0xf,%rcx
   3dee5:	test   %rcx,%rcx
   3dee8:	jne    3def1 <jsimd_can_idct_float+0x31>
   3deea:	mov    $0x1,%eax
   3deef:	leaveq 
   3def0:	retq   
   3def1:	leaveq 
   3def2:	retq   
   3def3:	data16 nopw %cs:0x0(%rax,%rax,1)
   3defe:	xchg   %ax,%ax

000000000003df00 <jsimd_idct_islow>:
   3df00:	push   %rbp
   3df01:	mov    %rsp,%rbp
   3df04:	mov    0x58(%rsi),%rdi
   3df08:	mov    %rdx,%rsi
   3df0b:	mov    %rcx,%rdx
   3df0e:	mov    %r8,%rcx
   3df11:	callq  47000 <jsimd_idct_islow_sse2>
   3df16:	leaveq 
   3df17:	retq   
   3df18:	nopl   0x0(%rax,%rax,1)

000000000003df20 <jsimd_idct_ifast>:
   3df20:	push   %rbp
   3df21:	mov    %rsp,%rbp
   3df24:	mov    0x58(%rsi),%rdi
   3df28:	mov    %rdx,%rsi
   3df2b:	mov    %rcx,%rdx
   3df2e:	mov    %r8,%rcx
   3df31:	callq  46af0 <jsimd_idct_ifast_sse2>
   3df36:	leaveq 
   3df37:	retq   
   3df38:	nopl   0x0(%rax,%rax,1)

000000000003df40 <jsimd_idct_float>:
   3df40:	push   %rbp
   3df41:	mov    %rsp,%rbp
   3df44:	mov    0x58(%rsi),%rdi
   3df48:	mov    %rdx,%rsi
   3df4b:	mov    %rcx,%rdx
   3df4e:	mov    %r8,%rcx
   3df51:	callq  46610 <jsimd_idct_float_sse2>
   3df56:	leaveq 
   3df57:	retq   
   3df58:	nopl   0x0(%rax,%rax,1)

000000000003df60 <init_simd>:
   3df60:	push   %rbp
   3df61:	mov    %rsp,%rbp
   3df64:	mov    0x3030e(%rip),%eax        # 6e278 <simd_support>
   3df6a:	cmp    $0xfffffffe,%eax
   3df6d:	ja     3df71 <init_simd+0x11>
   3df6f:	leaveq 
   3df70:	retq   
   3df71:	movl   $0xc,0x302fd(%rip)        # 6e278 <simd_support>
   3df7b:	lea    0x1dc2e(%rip),%rdi        # 5bbb0 <jpeg_aritab+0x458>
   3df82:	callq  4040 <getenv@plt>
   3df87:	test   %rax,%rax
   3df8a:	jne    3df9f <init_simd+0x3f>
   3df8c:	lea    0x1dc2f(%rip),%rdi        # 5bbc2 <jpeg_aritab+0x46a>
   3df93:	callq  4040 <getenv@plt>
   3df98:	test   %rax,%rax
   3df9b:	jne    3dfbe <init_simd+0x5e>
   3df9d:	leaveq 
   3df9e:	retq   
   3df9f:	mov    %rax,%rdi
   3dfa2:	lea    0x1dc17(%rip),%rsi        # 5bbc0 <jpeg_aritab+0x468>
   3dfa9:	callq  4260 <strcmp@plt>
   3dfae:	test   %eax,%eax
   3dfb0:	jne    3df8c <init_simd+0x2c>
   3dfb2:	movl   $0x0,0x302bc(%rip)        # 6e278 <simd_support>
   3dfbc:	jmp    3df8c <init_simd+0x2c>
   3dfbe:	mov    %rax,%rdi
   3dfc1:	lea    0x1dbf8(%rip),%rsi        # 5bbc0 <jpeg_aritab+0x468>
   3dfc8:	callq  4260 <strcmp@plt>
   3dfcd:	test   %eax,%eax
   3dfcf:	je     3dfd3 <init_simd+0x73>
   3dfd1:	leaveq 
   3dfd2:	retq   
   3dfd3:	movl   $0x0,0x3029f(%rip)        # 6e27c <simd_huffman>
   3dfdd:	leaveq 
   3dfde:	retq   
   3dfdf:	nop

000000000003dfe0 <jsimd_fdct_float_sse>:
   3dfe0:	push   %rbp
   3dfe1:	mov    %rsp,%rax
   3dfe4:	sub    $0x4,%rsp
   3dfe8:	and    $0xfffffffffffffff0,%rsp
   3dfec:	mov    %rax,(%rsp)
   3dff0:	mov    %rsp,%rbp
   3dff3:	lea    -0x20(%rbp),%rsp
   3dff7:	push   %r10
   3dff9:	push   %r11
   3dffb:	push   %r12
   3dffd:	push   %r13
   3dfff:	push   %r14
   3e001:	push   %r15
   3e003:	mov    %rdi,%r10
   3e006:	mov    %rsi,%r11
   3e009:	mov    %rdx,%r12
   3e00c:	mov    %rcx,%r13
   3e00f:	mov    %r8,%r14
   3e012:	mov    %r9,%r15
   3e015:	mov    %r10,%rdx
   3e018:	mov    $0x2,%ecx

000000000003e01d <jsimd_fdct_float_sse.rowloop>:
   3e01d:	movaps 0x40(%rdx),%xmm0
   3e021:	movaps 0x60(%rdx),%xmm1
   3e025:	movaps 0x50(%rdx),%xmm2
   3e029:	movaps 0x70(%rdx),%xmm3
   3e02d:	movaps %xmm0,%xmm4
   3e030:	unpcklps %xmm1,%xmm0
   3e033:	unpckhps %xmm1,%xmm4
   3e036:	movaps %xmm2,%xmm5
   3e039:	unpcklps %xmm3,%xmm2
   3e03c:	unpckhps %xmm3,%xmm5
   3e03f:	movaps (%rdx),%xmm6
   3e042:	movaps 0x20(%rdx),%xmm7
   3e046:	movaps 0x10(%rdx),%xmm1
   3e04a:	movaps 0x30(%rdx),%xmm3
   3e04e:	movaps %xmm4,-0x20(%rbp)
   3e052:	movaps %xmm2,-0x10(%rbp)
   3e056:	movaps %xmm6,%xmm4
   3e059:	unpcklps %xmm7,%xmm6
   3e05c:	unpckhps %xmm7,%xmm4
   3e05f:	movaps %xmm1,%xmm2
   3e062:	unpcklps %xmm3,%xmm1
   3e065:	unpckhps %xmm3,%xmm2
   3e068:	movaps %xmm6,%xmm7
   3e06b:	shufps $0x44,%xmm0,%xmm6
   3e06f:	shufps $0xee,%xmm0,%xmm7
   3e073:	movaps %xmm2,%xmm3
   3e076:	shufps $0x44,%xmm5,%xmm2
   3e07a:	shufps $0xee,%xmm5,%xmm3
   3e07e:	movaps %xmm7,%xmm0
   3e081:	movaps %xmm6,%xmm5
   3e084:	subps  %xmm2,%xmm7
   3e087:	subps  %xmm3,%xmm6
   3e08a:	addps  %xmm2,%xmm0
   3e08d:	addps  %xmm3,%xmm5
   3e090:	movaps -0x20(%rbp),%xmm2
   3e094:	movaps -0x10(%rbp),%xmm3
   3e098:	movaps %xmm7,-0x20(%rbp)
   3e09c:	movaps %xmm6,-0x10(%rbp)
   3e0a0:	movaps %xmm4,%xmm7
   3e0a3:	shufps $0x44,%xmm2,%xmm4
   3e0a7:	shufps $0xee,%xmm2,%xmm7
   3e0ab:	movaps %xmm1,%xmm6
   3e0ae:	shufps $0x44,%xmm3,%xmm1
   3e0b2:	shufps $0xee,%xmm3,%xmm6
   3e0b6:	movaps %xmm7,%xmm2
   3e0b9:	movaps %xmm4,%xmm3
   3e0bc:	addps  %xmm1,%xmm7
   3e0bf:	addps  %xmm6,%xmm4
   3e0c2:	subps  %xmm1,%xmm2
   3e0c5:	subps  %xmm6,%xmm3
   3e0c8:	movaps %xmm5,%xmm1
   3e0cb:	movaps %xmm0,%xmm6
   3e0ce:	subps  %xmm7,%xmm5
   3e0d1:	subps  %xmm4,%xmm0
   3e0d4:	addps  %xmm7,%xmm1
   3e0d7:	addps  %xmm4,%xmm6
   3e0da:	addps  %xmm5,%xmm0
   3e0dd:	mulps  0x1db0c(%rip),%xmm0        # 5bbf0 <PD_0_707>
   3e0e4:	movaps %xmm1,%xmm7
   3e0e7:	movaps %xmm5,%xmm4
   3e0ea:	subps  %xmm6,%xmm1
   3e0ed:	subps  %xmm0,%xmm5
   3e0f0:	addps  %xmm6,%xmm7
   3e0f3:	addps  %xmm0,%xmm4
   3e0f6:	movaps %xmm1,0x10(%rdx)
   3e0fa:	movaps %xmm5,0x50(%rdx)
   3e0fe:	movaps %xmm7,(%rdx)
   3e101:	movaps %xmm4,0x40(%rdx)
   3e105:	movaps -0x20(%rbp),%xmm6
   3e109:	movaps -0x10(%rbp),%xmm0
   3e10d:	addps  %xmm3,%xmm2
   3e110:	addps  %xmm6,%xmm3
   3e113:	addps  %xmm0,%xmm6
   3e116:	mulps  0x1dad3(%rip),%xmm3        # 5bbf0 <PD_0_707>
   3e11d:	movaps %xmm2,%xmm1
   3e120:	subps  %xmm6,%xmm2
   3e123:	mulps  0x1dab6(%rip),%xmm2        # 5bbe0 <PD_0_382>
   3e12a:	mulps  0x1dacf(%rip),%xmm1        # 5bc00 <PD_0_541>
   3e131:	mulps  0x1dad8(%rip),%xmm6        # 5bc10 <PD_1_306>
   3e138:	addps  %xmm2,%xmm1
   3e13b:	addps  %xmm2,%xmm6
   3e13e:	movaps %xmm0,%xmm5
   3e141:	subps  %xmm3,%xmm0
   3e144:	addps  %xmm3,%xmm5
   3e147:	movaps %xmm0,%xmm7
   3e14a:	movaps %xmm5,%xmm4
   3e14d:	subps  %xmm1,%xmm0
   3e150:	subps  %xmm6,%xmm5
   3e153:	addps  %xmm1,%xmm7
   3e156:	addps  %xmm6,%xmm4
   3e159:	movaps %xmm0,0x60(%rdx)
   3e15d:	movaps %xmm5,0x70(%rdx)
   3e161:	movaps %xmm7,0x30(%rdx)
   3e165:	movaps %xmm4,0x20(%rdx)
   3e169:	add    $0x80,%rdx
   3e170:	dec    %rcx
   3e173:	jne    3e01d <jsimd_fdct_float_sse.rowloop>
   3e179:	mov    %r10,%rdx
   3e17c:	mov    $0x2,%ecx

000000000003e181 <jsimd_fdct_float_sse.columnloop>:
   3e181:	movaps 0x40(%rdx),%xmm0
   3e185:	movaps 0x60(%rdx),%xmm1
   3e189:	movaps 0xc0(%rdx),%xmm2
   3e190:	movaps 0xe0(%rdx),%xmm3
   3e197:	movaps %xmm0,%xmm4
   3e19a:	unpcklps %xmm1,%xmm0
   3e19d:	unpckhps %xmm1,%xmm4
   3e1a0:	movaps %xmm2,%xmm5
   3e1a3:	unpcklps %xmm3,%xmm2
   3e1a6:	unpckhps %xmm3,%xmm5
   3e1a9:	movaps (%rdx),%xmm6
   3e1ac:	movaps 0x20(%rdx),%xmm7
   3e1b0:	movaps 0x80(%rdx),%xmm1
   3e1b7:	movaps 0xa0(%rdx),%xmm3
   3e1be:	movaps %xmm4,-0x20(%rbp)
   3e1c2:	movaps %xmm2,-0x10(%rbp)
   3e1c6:	movaps %xmm6,%xmm4
   3e1c9:	unpcklps %xmm7,%xmm6
   3e1cc:	unpckhps %xmm7,%xmm4
   3e1cf:	movaps %xmm1,%xmm2
   3e1d2:	unpcklps %xmm3,%xmm1
   3e1d5:	unpckhps %xmm3,%xmm2
   3e1d8:	movaps %xmm6,%xmm7
   3e1db:	shufps $0x44,%xmm0,%xmm6
   3e1df:	shufps $0xee,%xmm0,%xmm7
   3e1e3:	movaps %xmm2,%xmm3
   3e1e6:	shufps $0x44,%xmm5,%xmm2
   3e1ea:	shufps $0xee,%xmm5,%xmm3
   3e1ee:	movaps %xmm7,%xmm0
   3e1f1:	movaps %xmm6,%xmm5
   3e1f4:	subps  %xmm2,%xmm7
   3e1f7:	subps  %xmm3,%xmm6
   3e1fa:	addps  %xmm2,%xmm0
   3e1fd:	addps  %xmm3,%xmm5
   3e200:	movaps -0x20(%rbp),%xmm2
   3e204:	movaps -0x10(%rbp),%xmm3
   3e208:	movaps %xmm7,-0x20(%rbp)
   3e20c:	movaps %xmm6,-0x10(%rbp)
   3e210:	movaps %xmm4,%xmm7
   3e213:	shufps $0x44,%xmm2,%xmm4
   3e217:	shufps $0xee,%xmm2,%xmm7
   3e21b:	movaps %xmm1,%xmm6
   3e21e:	shufps $0x44,%xmm3,%xmm1
   3e222:	shufps $0xee,%xmm3,%xmm6
   3e226:	movaps %xmm7,%xmm2
   3e229:	movaps %xmm4,%xmm3
   3e22c:	addps  %xmm1,%xmm7
   3e22f:	addps  %xmm6,%xmm4
   3e232:	subps  %xmm1,%xmm2
   3e235:	subps  %xmm6,%xmm3
   3e238:	movaps %xmm5,%xmm1
   3e23b:	movaps %xmm0,%xmm6
   3e23e:	subps  %xmm7,%xmm5
   3e241:	subps  %xmm4,%xmm0
   3e244:	addps  %xmm7,%xmm1
   3e247:	addps  %xmm4,%xmm6
   3e24a:	addps  %xmm5,%xmm0
   3e24d:	mulps  0x1d99c(%rip),%xmm0        # 5bbf0 <PD_0_707>
   3e254:	movaps %xmm1,%xmm7
   3e257:	movaps %xmm5,%xmm4
   3e25a:	subps  %xmm6,%xmm1
   3e25d:	subps  %xmm0,%xmm5
   3e260:	addps  %xmm6,%xmm7
   3e263:	addps  %xmm0,%xmm4
   3e266:	movaps %xmm1,0x80(%rdx)
   3e26d:	movaps %xmm5,0xc0(%rdx)
   3e274:	movaps %xmm7,(%rdx)
   3e277:	movaps %xmm4,0x40(%rdx)
   3e27b:	movaps -0x20(%rbp),%xmm6
   3e27f:	movaps -0x10(%rbp),%xmm0
   3e283:	addps  %xmm3,%xmm2
   3e286:	addps  %xmm6,%xmm3
   3e289:	addps  %xmm0,%xmm6
   3e28c:	mulps  0x1d95d(%rip),%xmm3        # 5bbf0 <PD_0_707>
   3e293:	movaps %xmm2,%xmm1
   3e296:	subps  %xmm6,%xmm2
   3e299:	mulps  0x1d940(%rip),%xmm2        # 5bbe0 <PD_0_382>
   3e2a0:	mulps  0x1d959(%rip),%xmm1        # 5bc00 <PD_0_541>
   3e2a7:	mulps  0x1d962(%rip),%xmm6        # 5bc10 <PD_1_306>
   3e2ae:	addps  %xmm2,%xmm1
   3e2b1:	addps  %xmm2,%xmm6
   3e2b4:	movaps %xmm0,%xmm5
   3e2b7:	subps  %xmm3,%xmm0
   3e2ba:	addps  %xmm3,%xmm5
   3e2bd:	movaps %xmm0,%xmm7
   3e2c0:	movaps %xmm5,%xmm4
   3e2c3:	subps  %xmm1,%xmm0
   3e2c6:	subps  %xmm6,%xmm5
   3e2c9:	addps  %xmm1,%xmm7
   3e2cc:	addps  %xmm6,%xmm4
   3e2cf:	movaps %xmm0,0x60(%rdx)
   3e2d3:	movaps %xmm5,0xe0(%rdx)
   3e2da:	movaps %xmm7,0xa0(%rdx)
   3e2e1:	movaps %xmm4,0x20(%rdx)
   3e2e5:	add    $0x10,%rdx
   3e2e9:	dec    %rcx
   3e2ec:	jne    3e181 <jsimd_fdct_float_sse.columnloop>
   3e2f2:	pop    %r15
   3e2f4:	pop    %r14
   3e2f6:	pop    %r13
   3e2f8:	pop    %r12
   3e2fa:	pop    %r11
   3e2fc:	pop    %r10
   3e2fe:	mov    %rbp,%rsp
   3e301:	pop    %rsp
   3e302:	pop    %rbp
   3e303:	retq   
   3e304:	nop
   3e305:	nop
   3e306:	nop
   3e307:	nop
   3e308:	nop
   3e309:	nop
   3e30a:	nop
   3e30b:	nop
   3e30c:	nop
   3e30d:	nop
   3e30e:	nop
   3e30f:	nop

000000000003e310 <jsimd_rgb_ycc_convert_sse2>:
   3e310:	push   %rbp
   3e311:	mov    %rsp,%rax
   3e314:	sub    $0x4,%rsp
   3e318:	and    $0xfffffffffffffff0,%rsp
   3e31c:	mov    %rax,(%rsp)
   3e320:	mov    %rsp,%rbp
   3e323:	lea    -0x80(%rbp),%rsp
   3e327:	push   %r10
   3e329:	push   %r11
   3e32b:	push   %r12
   3e32d:	push   %r13
   3e32f:	push   %r14
   3e331:	push   %r15
   3e333:	mov    %rdi,%r10
   3e336:	mov    %rsi,%r11
   3e339:	mov    %rdx,%r12
   3e33c:	mov    %rcx,%r13
   3e33f:	mov    %r8,%r14
   3e342:	mov    %r9,%r15
   3e345:	push   %rbx
   3e346:	mov    %r10d,%ecx
   3e349:	test   %rcx,%rcx
   3e34c:	je     3e785 <jsimd_rgb_ycc_convert_sse2.return>
   3e352:	push   %rcx
   3e353:	mov    %r12,%rsi
   3e356:	mov    %r13d,%ecx
   3e359:	mov    (%rsi),%rdi
   3e35c:	mov    0x8(%rsi),%rbx
   3e360:	mov    0x10(%rsi),%rdx
   3e364:	lea    (%rdi,%rcx,8),%rdi
   3e368:	lea    (%rbx,%rcx,8),%rbx
   3e36c:	lea    (%rdx,%rcx,8),%rdx
   3e370:	pop    %rcx
   3e371:	mov    %r11,%rsi
   3e374:	mov    %r14d,%eax
   3e377:	test   %rax,%rax
   3e37a:	jle    3e785 <jsimd_rgb_ycc_convert_sse2.return>

000000000003e380 <jsimd_rgb_ycc_convert_sse2.rowloop>:
   3e380:	push   %rdx
   3e381:	push   %rbx
   3e382:	push   %rdi
   3e383:	push   %rsi
   3e384:	push   %rcx
   3e385:	mov    (%rsi),%rsi
   3e388:	mov    (%rdi),%rdi
   3e38b:	mov    (%rbx),%rbx
   3e38e:	mov    (%rdx),%rdx
   3e391:	cmp    $0x10,%rcx
   3e395:	jae    3e425 <jsimd_rgb_ycc_convert_sse2.columnloop>

000000000003e39b <jsimd_rgb_ycc_convert_sse2.column_ld1>:
   3e39b:	push   %rax
   3e39c:	push   %rdx
   3e39d:	lea    (%rcx,%rcx,2),%rcx
   3e3a1:	test   $0x1,%cl
   3e3a4:	je     3e3af <jsimd_rgb_ycc_convert_sse2.column_ld2>
   3e3a6:	sub    $0x1,%rcx
   3e3aa:	movzbq (%rsi,%rcx,1),%rax

000000000003e3af <jsimd_rgb_ycc_convert_sse2.column_ld2>:
   3e3af:	test   $0x2,%cl
   3e3b2:	je     3e3c4 <jsimd_rgb_ycc_convert_sse2.column_ld4>
   3e3b4:	sub    $0x2,%rcx
   3e3b8:	movzwq (%rsi,%rcx,1),%rdx
   3e3bd:	shl    $0x10,%rax
   3e3c1:	or     %rdx,%rax

000000000003e3c4 <jsimd_rgb_ycc_convert_sse2.column_ld4>:
   3e3c4:	movd   %eax,%xmm0
   3e3c8:	pop    %rdx
   3e3c9:	pop    %rax
   3e3ca:	test   $0x4,%cl
   3e3cd:	je     3e3e1 <jsimd_rgb_ycc_convert_sse2.column_ld8>
   3e3cf:	sub    $0x4,%rcx
   3e3d3:	movd   (%rsi,%rcx,1),%xmm5
   3e3d8:	pslldq $0x4,%xmm0
   3e3dd:	por    %xmm5,%xmm0

000000000003e3e1 <jsimd_rgb_ycc_convert_sse2.column_ld8>:
   3e3e1:	test   $0x8,%cl
   3e3e4:	je     3e3f8 <jsimd_rgb_ycc_convert_sse2.column_ld16>
   3e3e6:	sub    $0x8,%rcx
   3e3ea:	movq   (%rsi,%rcx,1),%xmm1
   3e3ef:	pslldq $0x8,%xmm0
   3e3f4:	por    %xmm1,%xmm0

000000000003e3f8 <jsimd_rgb_ycc_convert_sse2.column_ld16>:
   3e3f8:	test   $0x10,%cl
   3e3fb:	je     3e40c <jsimd_rgb_ycc_convert_sse2.column_ld32>
   3e3fd:	movdqa %xmm0,%xmm5
   3e401:	movdqu (%rsi),%xmm0
   3e405:	mov    $0x10,%ecx
   3e40a:	jmp    3e433 <jsimd_rgb_ycc_convert_sse2.rgb_ycc_cnv>

000000000003e40c <jsimd_rgb_ycc_convert_sse2.column_ld32>:
   3e40c:	test   $0x20,%cl
   3e40f:	mov    $0x10,%ecx
   3e414:	je     3e433 <jsimd_rgb_ycc_convert_sse2.rgb_ycc_cnv>
   3e416:	movdqa %xmm0,%xmm1
   3e41a:	movdqu (%rsi),%xmm0
   3e41e:	movdqu 0x10(%rsi),%xmm5
   3e423:	jmp    3e433 <jsimd_rgb_ycc_convert_sse2.rgb_ycc_cnv>

000000000003e425 <jsimd_rgb_ycc_convert_sse2.columnloop>:
   3e425:	movdqu (%rsi),%xmm0
   3e429:	movdqu 0x10(%rsi),%xmm5
   3e42e:	movdqu 0x20(%rsi),%xmm1

000000000003e433 <jsimd_rgb_ycc_convert_sse2.rgb_ycc_cnv>:
   3e433:	movdqa %xmm0,%xmm6
   3e437:	pslldq $0x8,%xmm0
   3e43c:	psrldq $0x8,%xmm6
   3e441:	punpckhbw %xmm5,%xmm0
   3e445:	pslldq $0x8,%xmm5
   3e44a:	punpcklbw %xmm1,%xmm6
   3e44e:	punpckhbw %xmm1,%xmm5
   3e452:	movdqa %xmm0,%xmm3
   3e456:	pslldq $0x8,%xmm0
   3e45b:	psrldq $0x8,%xmm3
   3e460:	punpckhbw %xmm6,%xmm0
   3e464:	pslldq $0x8,%xmm6
   3e469:	punpcklbw %xmm5,%xmm3
   3e46d:	punpckhbw %xmm5,%xmm6
   3e471:	movdqa %xmm0,%xmm4
   3e475:	pslldq $0x8,%xmm0
   3e47a:	psrldq $0x8,%xmm4
   3e47f:	punpckhbw %xmm3,%xmm0
   3e483:	pslldq $0x8,%xmm3
   3e488:	punpcklbw %xmm6,%xmm4
   3e48c:	punpckhbw %xmm6,%xmm3
   3e490:	pxor   %xmm7,%xmm7
   3e494:	movdqa %xmm0,%xmm2
   3e498:	punpcklbw %xmm7,%xmm0
   3e49c:	punpckhbw %xmm7,%xmm2
   3e4a0:	movdqa %xmm4,%xmm1
   3e4a4:	punpcklbw %xmm7,%xmm4
   3e4a8:	punpckhbw %xmm7,%xmm1
   3e4ac:	movdqa %xmm3,%xmm5
   3e4b0:	punpcklbw %xmm7,%xmm3
   3e4b4:	punpckhbw %xmm7,%xmm5
   3e4b8:	movdqa %xmm0,-0x80(%rbp)
   3e4bd:	movdqa %xmm1,-0x70(%rbp)
   3e4c2:	movdqa %xmm4,-0x60(%rbp)
   3e4c7:	movdqa %xmm5,-0x50(%rbp)
   3e4cc:	movdqa %xmm1,%xmm6
   3e4d0:	punpcklwd %xmm3,%xmm1
   3e4d4:	punpckhwd %xmm3,%xmm6
   3e4d8:	movdqa %xmm1,%xmm7
   3e4dc:	movdqa %xmm6,%xmm4
   3e4e0:	pmaddwd 0x1d738(%rip),%xmm1        # 5bc20 <PW_F0299_F0337>
   3e4e8:	pmaddwd 0x1d730(%rip),%xmm6        # 5bc20 <PW_F0299_F0337>
   3e4f0:	pmaddwd 0x1d748(%rip),%xmm7        # 5bc40 <PW_MF016_MF033>
   3e4f8:	pmaddwd 0x1d740(%rip),%xmm4        # 5bc40 <PW_MF016_MF033>
   3e500:	movdqa %xmm1,-0x40(%rbp)
   3e505:	movdqa %xmm6,-0x30(%rbp)
   3e50a:	pxor   %xmm1,%xmm1
   3e50e:	pxor   %xmm6,%xmm6
   3e512:	punpcklwd %xmm5,%xmm1
   3e516:	punpckhwd %xmm5,%xmm6
   3e51a:	psrld  $0x1,%xmm1
   3e51f:	psrld  $0x1,%xmm6
   3e524:	movdqa 0x1d734(%rip),%xmm5        # 5bc60 <PD_ONEHALFM1_CJ>
   3e52c:	paddd  %xmm1,%xmm7
   3e530:	paddd  %xmm6,%xmm4
   3e534:	paddd  %xmm5,%xmm7
   3e538:	paddd  %xmm5,%xmm4
   3e53c:	psrld  $0x10,%xmm7
   3e541:	psrld  $0x10,%xmm4
   3e546:	packssdw %xmm4,%xmm7
   3e54a:	movdqa -0x60(%rbp),%xmm1
   3e54f:	movdqa %xmm0,%xmm6
   3e553:	punpcklwd %xmm2,%xmm0
   3e557:	punpckhwd %xmm2,%xmm6
   3e55b:	movdqa %xmm0,%xmm5
   3e55f:	movdqa %xmm6,%xmm4
   3e563:	pmaddwd 0x1d6b5(%rip),%xmm0        # 5bc20 <PW_F0299_F0337>
   3e56b:	pmaddwd 0x1d6ad(%rip),%xmm6        # 5bc20 <PW_F0299_F0337>
   3e573:	pmaddwd 0x1d6c5(%rip),%xmm5        # 5bc40 <PW_MF016_MF033>
   3e57b:	pmaddwd 0x1d6bd(%rip),%xmm4        # 5bc40 <PW_MF016_MF033>
   3e583:	movdqa %xmm0,-0x20(%rbp)
   3e588:	movdqa %xmm6,-0x10(%rbp)
   3e58d:	pxor   %xmm0,%xmm0
   3e591:	pxor   %xmm6,%xmm6
   3e595:	punpcklwd %xmm1,%xmm0
   3e599:	punpckhwd %xmm1,%xmm6
   3e59d:	psrld  $0x1,%xmm0
   3e5a2:	psrld  $0x1,%xmm6
   3e5a7:	movdqa 0x1d6b1(%rip),%xmm1        # 5bc60 <PD_ONEHALFM1_CJ>
   3e5af:	paddd  %xmm0,%xmm5
   3e5b3:	paddd  %xmm6,%xmm4
   3e5b7:	paddd  %xmm1,%xmm5
   3e5bb:	paddd  %xmm1,%xmm4
   3e5bf:	psrld  $0x10,%xmm5
   3e5c4:	psrld  $0x10,%xmm4
   3e5c9:	packssdw %xmm4,%xmm5
   3e5cd:	psllw  $0x8,%xmm7
   3e5d2:	por    %xmm7,%xmm5
   3e5d6:	movdqa %xmm5,(%rbx)
   3e5da:	movdqa -0x50(%rbp),%xmm0
   3e5df:	movdqa -0x60(%rbp),%xmm6
   3e5e4:	movdqa -0x70(%rbp),%xmm1
   3e5e9:	movdqa %xmm0,%xmm4
   3e5ed:	punpcklwd %xmm3,%xmm0
   3e5f1:	punpckhwd %xmm3,%xmm4
   3e5f5:	movdqa %xmm0,%xmm7
   3e5f9:	movdqa %xmm4,%xmm5
   3e5fd:	pmaddwd 0x1d62b(%rip),%xmm0        # 5bc30 <PW_F0114_F0250>
   3e605:	pmaddwd 0x1d623(%rip),%xmm4        # 5bc30 <PW_F0114_F0250>
   3e60d:	pmaddwd 0x1d63b(%rip),%xmm7        # 5bc50 <PW_MF008_MF041>
   3e615:	pmaddwd 0x1d633(%rip),%xmm5        # 5bc50 <PW_MF008_MF041>
   3e61d:	movdqa 0x1d64b(%rip),%xmm3        # 5bc70 <PD_ONEHALF>
   3e625:	paddd  -0x40(%rbp),%xmm0
   3e62a:	paddd  -0x30(%rbp),%xmm4
   3e62f:	paddd  %xmm3,%xmm0
   3e633:	paddd  %xmm3,%xmm4
   3e637:	psrld  $0x10,%xmm0
   3e63c:	psrld  $0x10,%xmm4
   3e641:	packssdw %xmm4,%xmm0
   3e645:	pxor   %xmm3,%xmm3
   3e649:	pxor   %xmm4,%xmm4
   3e64d:	punpcklwd %xmm1,%xmm3
   3e651:	punpckhwd %xmm1,%xmm4
   3e655:	psrld  $0x1,%xmm3
   3e65a:	psrld  $0x1,%xmm4
   3e65f:	movdqa 0x1d5f9(%rip),%xmm1        # 5bc60 <PD_ONEHALFM1_CJ>
   3e667:	paddd  %xmm3,%xmm7
   3e66b:	paddd  %xmm4,%xmm5
   3e66f:	paddd  %xmm1,%xmm7
   3e673:	paddd  %xmm1,%xmm5
   3e677:	psrld  $0x10,%xmm7
   3e67c:	psrld  $0x10,%xmm5
   3e681:	packssdw %xmm5,%xmm7
   3e685:	movdqa -0x80(%rbp),%xmm3
   3e68a:	movdqa %xmm6,%xmm4
   3e68e:	punpcklwd %xmm2,%xmm6
   3e692:	punpckhwd %xmm2,%xmm4
   3e696:	movdqa %xmm6,%xmm1
   3e69a:	movdqa %xmm4,%xmm5
   3e69e:	pmaddwd 0x1d58a(%rip),%xmm6        # 5bc30 <PW_F0114_F0250>
   3e6a6:	pmaddwd 0x1d582(%rip),%xmm4        # 5bc30 <PW_F0114_F0250>
   3e6ae:	pmaddwd 0x1d59a(%rip),%xmm1        # 5bc50 <PW_MF008_MF041>
   3e6b6:	pmaddwd 0x1d592(%rip),%xmm5        # 5bc50 <PW_MF008_MF041>
   3e6be:	movdqa 0x1d5aa(%rip),%xmm2        # 5bc70 <PD_ONEHALF>
   3e6c6:	paddd  -0x20(%rbp),%xmm6
   3e6cb:	paddd  -0x10(%rbp),%xmm4
   3e6d0:	paddd  %xmm2,%xmm6
   3e6d4:	paddd  %xmm2,%xmm4
   3e6d8:	psrld  $0x10,%xmm6
   3e6dd:	psrld  $0x10,%xmm4
   3e6e2:	packssdw %xmm4,%xmm6
   3e6e6:	psllw  $0x8,%xmm0
   3e6eb:	por    %xmm0,%xmm6
   3e6ef:	movdqa %xmm6,(%rdi)
   3e6f3:	pxor   %xmm2,%xmm2
   3e6f7:	pxor   %xmm4,%xmm4
   3e6fb:	punpcklwd %xmm3,%xmm2
   3e6ff:	punpckhwd %xmm3,%xmm4
   3e703:	psrld  $0x1,%xmm2
   3e708:	psrld  $0x1,%xmm4
   3e70d:	movdqa 0x1d54b(%rip),%xmm0        # 5bc60 <PD_ONEHALFM1_CJ>
   3e715:	paddd  %xmm2,%xmm1
   3e719:	paddd  %xmm4,%xmm5
   3e71d:	paddd  %xmm0,%xmm1
   3e721:	paddd  %xmm0,%xmm5
   3e725:	psrld  $0x10,%xmm1
   3e72a:	psrld  $0x10,%xmm5
   3e72f:	packssdw %xmm5,%xmm1
   3e733:	psllw  $0x8,%xmm7
   3e738:	por    %xmm7,%xmm1
   3e73c:	movdqa %xmm1,(%rdx)
   3e740:	sub    $0x10,%rcx
   3e744:	add    $0x30,%rsi
   3e748:	add    $0x10,%rdi
   3e74c:	add    $0x10,%rbx
   3e750:	add    $0x10,%rdx
   3e754:	cmp    $0x10,%rcx
   3e758:	jae    3e425 <jsimd_rgb_ycc_convert_sse2.columnloop>
   3e75e:	test   %rcx,%rcx
   3e761:	jne    3e39b <jsimd_rgb_ycc_convert_sse2.column_ld1>
   3e767:	pop    %rcx
   3e768:	pop    %rsi
   3e769:	pop    %rdi
   3e76a:	pop    %rbx
   3e76b:	pop    %rdx
   3e76c:	add    $0x8,%rsi
   3e770:	add    $0x8,%rdi
   3e774:	add    $0x8,%rbx
   3e778:	add    $0x8,%rdx
   3e77c:	dec    %rax
   3e77f:	jg     3e380 <jsimd_rgb_ycc_convert_sse2.rowloop>

000000000003e785 <jsimd_rgb_ycc_convert_sse2.return>:
   3e785:	pop    %rbx
   3e786:	pop    %r15
   3e788:	pop    %r14
   3e78a:	pop    %r13
   3e78c:	pop    %r12
   3e78e:	pop    %r11
   3e790:	pop    %r10
   3e792:	mov    %rbp,%rsp
   3e795:	pop    %rsp
   3e796:	pop    %rbp
   3e797:	retq   
   3e798:	nop
   3e799:	nop
   3e79a:	nop
   3e79b:	nop
   3e79c:	nop
   3e79d:	nop
   3e79e:	nop
   3e79f:	nop

000000000003e7a0 <jsimd_extrgb_ycc_convert_sse2>:
   3e7a0:	push   %rbp
   3e7a1:	mov    %rsp,%rax
   3e7a4:	sub    $0x4,%rsp
   3e7a8:	and    $0xfffffffffffffff0,%rsp
   3e7ac:	mov    %rax,(%rsp)
   3e7b0:	mov    %rsp,%rbp
   3e7b3:	lea    -0x80(%rbp),%rsp
   3e7b7:	push   %r10
   3e7b9:	push   %r11
   3e7bb:	push   %r12
   3e7bd:	push   %r13
   3e7bf:	push   %r14
   3e7c1:	push   %r15
   3e7c3:	mov    %rdi,%r10
   3e7c6:	mov    %rsi,%r11
   3e7c9:	mov    %rdx,%r12
   3e7cc:	mov    %rcx,%r13
   3e7cf:	mov    %r8,%r14
   3e7d2:	mov    %r9,%r15
   3e7d5:	push   %rbx
   3e7d6:	mov    %r10d,%ecx
   3e7d9:	test   %rcx,%rcx
   3e7dc:	je     3ec15 <jsimd_extrgb_ycc_convert_sse2.return>
   3e7e2:	push   %rcx
   3e7e3:	mov    %r12,%rsi
   3e7e6:	mov    %r13d,%ecx
   3e7e9:	mov    (%rsi),%rdi
   3e7ec:	mov    0x8(%rsi),%rbx
   3e7f0:	mov    0x10(%rsi),%rdx
   3e7f4:	lea    (%rdi,%rcx,8),%rdi
   3e7f8:	lea    (%rbx,%rcx,8),%rbx
   3e7fc:	lea    (%rdx,%rcx,8),%rdx
   3e800:	pop    %rcx
   3e801:	mov    %r11,%rsi
   3e804:	mov    %r14d,%eax
   3e807:	test   %rax,%rax
   3e80a:	jle    3ec15 <jsimd_extrgb_ycc_convert_sse2.return>

000000000003e810 <jsimd_extrgb_ycc_convert_sse2.rowloop>:
   3e810:	push   %rdx
   3e811:	push   %rbx
   3e812:	push   %rdi
   3e813:	push   %rsi
   3e814:	push   %rcx
   3e815:	mov    (%rsi),%rsi
   3e818:	mov    (%rdi),%rdi
   3e81b:	mov    (%rbx),%rbx
   3e81e:	mov    (%rdx),%rdx
   3e821:	cmp    $0x10,%rcx
   3e825:	jae    3e8b5 <jsimd_extrgb_ycc_convert_sse2.columnloop>

000000000003e82b <jsimd_extrgb_ycc_convert_sse2.column_ld1>:
   3e82b:	push   %rax
   3e82c:	push   %rdx
   3e82d:	lea    (%rcx,%rcx,2),%rcx
   3e831:	test   $0x1,%cl
   3e834:	je     3e83f <jsimd_extrgb_ycc_convert_sse2.column_ld2>
   3e836:	sub    $0x1,%rcx
   3e83a:	movzbq (%rsi,%rcx,1),%rax

000000000003e83f <jsimd_extrgb_ycc_convert_sse2.column_ld2>:
   3e83f:	test   $0x2,%cl
   3e842:	je     3e854 <jsimd_extrgb_ycc_convert_sse2.column_ld4>
   3e844:	sub    $0x2,%rcx
   3e848:	movzwq (%rsi,%rcx,1),%rdx
   3e84d:	shl    $0x10,%rax
   3e851:	or     %rdx,%rax

000000000003e854 <jsimd_extrgb_ycc_convert_sse2.column_ld4>:
   3e854:	movd   %eax,%xmm0
   3e858:	pop    %rdx
   3e859:	pop    %rax
   3e85a:	test   $0x4,%cl
   3e85d:	je     3e871 <jsimd_extrgb_ycc_convert_sse2.column_ld8>
   3e85f:	sub    $0x4,%rcx
   3e863:	movd   (%rsi,%rcx,1),%xmm5
   3e868:	pslldq $0x4,%xmm0
   3e86d:	por    %xmm5,%xmm0

000000000003e871 <jsimd_extrgb_ycc_convert_sse2.column_ld8>:
   3e871:	test   $0x8,%cl
   3e874:	je     3e888 <jsimd_extrgb_ycc_convert_sse2.column_ld16>
   3e876:	sub    $0x8,%rcx
   3e87a:	movq   (%rsi,%rcx,1),%xmm1
   3e87f:	pslldq $0x8,%xmm0
   3e884:	por    %xmm1,%xmm0

000000000003e888 <jsimd_extrgb_ycc_convert_sse2.column_ld16>:
   3e888:	test   $0x10,%cl
   3e88b:	je     3e89c <jsimd_extrgb_ycc_convert_sse2.column_ld32>
   3e88d:	movdqa %xmm0,%xmm5
   3e891:	movdqu (%rsi),%xmm0
   3e895:	mov    $0x10,%ecx
   3e89a:	jmp    3e8c3 <jsimd_extrgb_ycc_convert_sse2.rgb_ycc_cnv>

000000000003e89c <jsimd_extrgb_ycc_convert_sse2.column_ld32>:
   3e89c:	test   $0x20,%cl
   3e89f:	mov    $0x10,%ecx
   3e8a4:	je     3e8c3 <jsimd_extrgb_ycc_convert_sse2.rgb_ycc_cnv>
   3e8a6:	movdqa %xmm0,%xmm1
   3e8aa:	movdqu (%rsi),%xmm0
   3e8ae:	movdqu 0x10(%rsi),%xmm5
   3e8b3:	jmp    3e8c3 <jsimd_extrgb_ycc_convert_sse2.rgb_ycc_cnv>

000000000003e8b5 <jsimd_extrgb_ycc_convert_sse2.columnloop>:
   3e8b5:	movdqu (%rsi),%xmm0
   3e8b9:	movdqu 0x10(%rsi),%xmm5
   3e8be:	movdqu 0x20(%rsi),%xmm1

000000000003e8c3 <jsimd_extrgb_ycc_convert_sse2.rgb_ycc_cnv>:
   3e8c3:	movdqa %xmm0,%xmm6
   3e8c7:	pslldq $0x8,%xmm0
   3e8cc:	psrldq $0x8,%xmm6
   3e8d1:	punpckhbw %xmm5,%xmm0
   3e8d5:	pslldq $0x8,%xmm5
   3e8da:	punpcklbw %xmm1,%xmm6
   3e8de:	punpckhbw %xmm1,%xmm5
   3e8e2:	movdqa %xmm0,%xmm3
   3e8e6:	pslldq $0x8,%xmm0
   3e8eb:	psrldq $0x8,%xmm3
   3e8f0:	punpckhbw %xmm6,%xmm0
   3e8f4:	pslldq $0x8,%xmm6
   3e8f9:	punpcklbw %xmm5,%xmm3
   3e8fd:	punpckhbw %xmm5,%xmm6
   3e901:	movdqa %xmm0,%xmm4
   3e905:	pslldq $0x8,%xmm0
   3e90a:	psrldq $0x8,%xmm4
   3e90f:	punpckhbw %xmm3,%xmm0
   3e913:	pslldq $0x8,%xmm3
   3e918:	punpcklbw %xmm6,%xmm4
   3e91c:	punpckhbw %xmm6,%xmm3
   3e920:	pxor   %xmm7,%xmm7
   3e924:	movdqa %xmm0,%xmm2
   3e928:	punpcklbw %xmm7,%xmm0
   3e92c:	punpckhbw %xmm7,%xmm2
   3e930:	movdqa %xmm4,%xmm1
   3e934:	punpcklbw %xmm7,%xmm4
   3e938:	punpckhbw %xmm7,%xmm1
   3e93c:	movdqa %xmm3,%xmm5
   3e940:	punpcklbw %xmm7,%xmm3
   3e944:	punpckhbw %xmm7,%xmm5
   3e948:	movdqa %xmm0,-0x80(%rbp)
   3e94d:	movdqa %xmm1,-0x70(%rbp)
   3e952:	movdqa %xmm4,-0x60(%rbp)
   3e957:	movdqa %xmm5,-0x50(%rbp)
   3e95c:	movdqa %xmm1,%xmm6
   3e960:	punpcklwd %xmm3,%xmm1
   3e964:	punpckhwd %xmm3,%xmm6
   3e968:	movdqa %xmm1,%xmm7
   3e96c:	movdqa %xmm6,%xmm4
   3e970:	pmaddwd 0x1d2a8(%rip),%xmm1        # 5bc20 <PW_F0299_F0337>
   3e978:	pmaddwd 0x1d2a0(%rip),%xmm6        # 5bc20 <PW_F0299_F0337>
   3e980:	pmaddwd 0x1d2b8(%rip),%xmm7        # 5bc40 <PW_MF016_MF033>
   3e988:	pmaddwd 0x1d2b0(%rip),%xmm4        # 5bc40 <PW_MF016_MF033>
   3e990:	movdqa %xmm1,-0x40(%rbp)
   3e995:	movdqa %xmm6,-0x30(%rbp)
   3e99a:	pxor   %xmm1,%xmm1
   3e99e:	pxor   %xmm6,%xmm6
   3e9a2:	punpcklwd %xmm5,%xmm1
   3e9a6:	punpckhwd %xmm5,%xmm6
   3e9aa:	psrld  $0x1,%xmm1
   3e9af:	psrld  $0x1,%xmm6
   3e9b4:	movdqa 0x1d2a4(%rip),%xmm5        # 5bc60 <PD_ONEHALFM1_CJ>
   3e9bc:	paddd  %xmm1,%xmm7
   3e9c0:	paddd  %xmm6,%xmm4
   3e9c4:	paddd  %xmm5,%xmm7
   3e9c8:	paddd  %xmm5,%xmm4
   3e9cc:	psrld  $0x10,%xmm7
   3e9d1:	psrld  $0x10,%xmm4
   3e9d6:	packssdw %xmm4,%xmm7
   3e9da:	movdqa -0x60(%rbp),%xmm1
   3e9df:	movdqa %xmm0,%xmm6
   3e9e3:	punpcklwd %xmm2,%xmm0
   3e9e7:	punpckhwd %xmm2,%xmm6
   3e9eb:	movdqa %xmm0,%xmm5
   3e9ef:	movdqa %xmm6,%xmm4
   3e9f3:	pmaddwd 0x1d225(%rip),%xmm0        # 5bc20 <PW_F0299_F0337>
   3e9fb:	pmaddwd 0x1d21d(%rip),%xmm6        # 5bc20 <PW_F0299_F0337>
   3ea03:	pmaddwd 0x1d235(%rip),%xmm5        # 5bc40 <PW_MF016_MF033>
   3ea0b:	pmaddwd 0x1d22d(%rip),%xmm4        # 5bc40 <PW_MF016_MF033>
   3ea13:	movdqa %xmm0,-0x20(%rbp)
   3ea18:	movdqa %xmm6,-0x10(%rbp)
   3ea1d:	pxor   %xmm0,%xmm0
   3ea21:	pxor   %xmm6,%xmm6
   3ea25:	punpcklwd %xmm1,%xmm0
   3ea29:	punpckhwd %xmm1,%xmm6
   3ea2d:	psrld  $0x1,%xmm0
   3ea32:	psrld  $0x1,%xmm6
   3ea37:	movdqa 0x1d221(%rip),%xmm1        # 5bc60 <PD_ONEHALFM1_CJ>
   3ea3f:	paddd  %xmm0,%xmm5
   3ea43:	paddd  %xmm6,%xmm4
   3ea47:	paddd  %xmm1,%xmm5
   3ea4b:	paddd  %xmm1,%xmm4
   3ea4f:	psrld  $0x10,%xmm5
   3ea54:	psrld  $0x10,%xmm4
   3ea59:	packssdw %xmm4,%xmm5
   3ea5d:	psllw  $0x8,%xmm7
   3ea62:	por    %xmm7,%xmm5
   3ea66:	movdqa %xmm5,(%rbx)
   3ea6a:	movdqa -0x50(%rbp),%xmm0
   3ea6f:	movdqa -0x60(%rbp),%xmm6
   3ea74:	movdqa -0x70(%rbp),%xmm1
   3ea79:	movdqa %xmm0,%xmm4
   3ea7d:	punpcklwd %xmm3,%xmm0
   3ea81:	punpckhwd %xmm3,%xmm4
   3ea85:	movdqa %xmm0,%xmm7
   3ea89:	movdqa %xmm4,%xmm5
   3ea8d:	pmaddwd 0x1d19b(%rip),%xmm0        # 5bc30 <PW_F0114_F0250>
   3ea95:	pmaddwd 0x1d193(%rip),%xmm4        # 5bc30 <PW_F0114_F0250>
   3ea9d:	pmaddwd 0x1d1ab(%rip),%xmm7        # 5bc50 <PW_MF008_MF041>
   3eaa5:	pmaddwd 0x1d1a3(%rip),%xmm5        # 5bc50 <PW_MF008_MF041>
   3eaad:	movdqa 0x1d1bb(%rip),%xmm3        # 5bc70 <PD_ONEHALF>
   3eab5:	paddd  -0x40(%rbp),%xmm0
   3eaba:	paddd  -0x30(%rbp),%xmm4
   3eabf:	paddd  %xmm3,%xmm0
   3eac3:	paddd  %xmm3,%xmm4
   3eac7:	psrld  $0x10,%xmm0
   3eacc:	psrld  $0x10,%xmm4
   3ead1:	packssdw %xmm4,%xmm0
   3ead5:	pxor   %xmm3,%xmm3
   3ead9:	pxor   %xmm4,%xmm4
   3eadd:	punpcklwd %xmm1,%xmm3
   3eae1:	punpckhwd %xmm1,%xmm4
   3eae5:	psrld  $0x1,%xmm3
   3eaea:	psrld  $0x1,%xmm4
   3eaef:	movdqa 0x1d169(%rip),%xmm1        # 5bc60 <PD_ONEHALFM1_CJ>
   3eaf7:	paddd  %xmm3,%xmm7
   3eafb:	paddd  %xmm4,%xmm5
   3eaff:	paddd  %xmm1,%xmm7
   3eb03:	paddd  %xmm1,%xmm5
   3eb07:	psrld  $0x10,%xmm7
   3eb0c:	psrld  $0x10,%xmm5
   3eb11:	packssdw %xmm5,%xmm7
   3eb15:	movdqa -0x80(%rbp),%xmm3
   3eb1a:	movdqa %xmm6,%xmm4
   3eb1e:	punpcklwd %xmm2,%xmm6
   3eb22:	punpckhwd %xmm2,%xmm4
   3eb26:	movdqa %xmm6,%xmm1
   3eb2a:	movdqa %xmm4,%xmm5
   3eb2e:	pmaddwd 0x1d0fa(%rip),%xmm6        # 5bc30 <PW_F0114_F0250>
   3eb36:	pmaddwd 0x1d0f2(%rip),%xmm4        # 5bc30 <PW_F0114_F0250>
   3eb3e:	pmaddwd 0x1d10a(%rip),%xmm1        # 5bc50 <PW_MF008_MF041>
   3eb46:	pmaddwd 0x1d102(%rip),%xmm5        # 5bc50 <PW_MF008_MF041>
   3eb4e:	movdqa 0x1d11a(%rip),%xmm2        # 5bc70 <PD_ONEHALF>
   3eb56:	paddd  -0x20(%rbp),%xmm6
   3eb5b:	paddd  -0x10(%rbp),%xmm4
   3eb60:	paddd  %xmm2,%xmm6
   3eb64:	paddd  %xmm2,%xmm4
   3eb68:	psrld  $0x10,%xmm6
   3eb6d:	psrld  $0x10,%xmm4
   3eb72:	packssdw %xmm4,%xmm6
   3eb76:	psllw  $0x8,%xmm0
   3eb7b:	por    %xmm0,%xmm6
   3eb7f:	movdqa %xmm6,(%rdi)
   3eb83:	pxor   %xmm2,%xmm2
   3eb87:	pxor   %xmm4,%xmm4
   3eb8b:	punpcklwd %xmm3,%xmm2
   3eb8f:	punpckhwd %xmm3,%xmm4
   3eb93:	psrld  $0x1,%xmm2
   3eb98:	psrld  $0x1,%xmm4
   3eb9d:	movdqa 0x1d0bb(%rip),%xmm0        # 5bc60 <PD_ONEHALFM1_CJ>
   3eba5:	paddd  %xmm2,%xmm1
   3eba9:	paddd  %xmm4,%xmm5
   3ebad:	paddd  %xmm0,%xmm1
   3ebb1:	paddd  %xmm0,%xmm5
   3ebb5:	psrld  $0x10,%xmm1
   3ebba:	psrld  $0x10,%xmm5
   3ebbf:	packssdw %xmm5,%xmm1
   3ebc3:	psllw  $0x8,%xmm7
   3ebc8:	por    %xmm7,%xmm1
   3ebcc:	movdqa %xmm1,(%rdx)
   3ebd0:	sub    $0x10,%rcx
   3ebd4:	add    $0x30,%rsi
   3ebd8:	add    $0x10,%rdi
   3ebdc:	add    $0x10,%rbx
   3ebe0:	add    $0x10,%rdx
   3ebe4:	cmp    $0x10,%rcx
   3ebe8:	jae    3e8b5 <jsimd_extrgb_ycc_convert_sse2.columnloop>
   3ebee:	test   %rcx,%rcx
   3ebf1:	jne    3e82b <jsimd_extrgb_ycc_convert_sse2.column_ld1>
   3ebf7:	pop    %rcx
   3ebf8:	pop    %rsi
   3ebf9:	pop    %rdi
   3ebfa:	pop    %rbx
   3ebfb:	pop    %rdx
   3ebfc:	add    $0x8,%rsi
   3ec00:	add    $0x8,%rdi
   3ec04:	add    $0x8,%rbx
   3ec08:	add    $0x8,%rdx
   3ec0c:	dec    %rax
   3ec0f:	jg     3e810 <jsimd_extrgb_ycc_convert_sse2.rowloop>

000000000003ec15 <jsimd_extrgb_ycc_convert_sse2.return>:
   3ec15:	pop    %rbx
   3ec16:	pop    %r15
   3ec18:	pop    %r14
   3ec1a:	pop    %r13
   3ec1c:	pop    %r12
   3ec1e:	pop    %r11
   3ec20:	pop    %r10
   3ec22:	mov    %rbp,%rsp
   3ec25:	pop    %rsp
   3ec26:	pop    %rbp
   3ec27:	retq   
   3ec28:	nop
   3ec29:	nop
   3ec2a:	nop
   3ec2b:	nop
   3ec2c:	nop
   3ec2d:	nop
   3ec2e:	nop
   3ec2f:	nop

000000000003ec30 <jsimd_extrgbx_ycc_convert_sse2>:
   3ec30:	push   %rbp
   3ec31:	mov    %rsp,%rax
   3ec34:	sub    $0x4,%rsp
   3ec38:	and    $0xfffffffffffffff0,%rsp
   3ec3c:	mov    %rax,(%rsp)
   3ec40:	mov    %rsp,%rbp
   3ec43:	lea    -0x80(%rbp),%rsp
   3ec47:	push   %r10
   3ec49:	push   %r11
   3ec4b:	push   %r12
   3ec4d:	push   %r13
   3ec4f:	push   %r14
   3ec51:	push   %r15
   3ec53:	mov    %rdi,%r10
   3ec56:	mov    %rsi,%r11
   3ec59:	mov    %rdx,%r12
   3ec5c:	mov    %rcx,%r13
   3ec5f:	mov    %r8,%r14
   3ec62:	mov    %r9,%r15
   3ec65:	push   %rbx
   3ec66:	mov    %r10d,%ecx
   3ec69:	test   %rcx,%rcx
   3ec6c:	je     3f071 <jsimd_extrgbx_ycc_convert_sse2.return>
   3ec72:	push   %rcx
   3ec73:	mov    %r12,%rsi
   3ec76:	mov    %r13d,%ecx
   3ec79:	mov    (%rsi),%rdi
   3ec7c:	mov    0x8(%rsi),%rbx
   3ec80:	mov    0x10(%rsi),%rdx
   3ec84:	lea    (%rdi,%rcx,8),%rdi
   3ec88:	lea    (%rbx,%rcx,8),%rbx
   3ec8c:	lea    (%rdx,%rcx,8),%rdx
   3ec90:	pop    %rcx
   3ec91:	mov    %r11,%rsi
   3ec94:	mov    %r14d,%eax
   3ec97:	test   %rax,%rax
   3ec9a:	jle    3f071 <jsimd_extrgbx_ycc_convert_sse2.return>

000000000003eca0 <jsimd_extrgbx_ycc_convert_sse2.rowloop>:
   3eca0:	push   %rdx
   3eca1:	push   %rbx
   3eca2:	push   %rdi
   3eca3:	push   %rsi
   3eca4:	push   %rcx
   3eca5:	mov    (%rsi),%rsi
   3eca8:	mov    (%rdi),%rdi
   3ecab:	mov    (%rbx),%rbx
   3ecae:	mov    (%rdx),%rdx
   3ecb1:	cmp    $0x10,%rcx
   3ecb5:	jae    3ed0f <jsimd_extrgbx_ycc_convert_sse2.columnloop>

000000000003ecbb <jsimd_extrgbx_ycc_convert_sse2.column_ld1>:
   3ecbb:	test   $0x1,%cl
   3ecbe:	je     3ecc9 <jsimd_extrgbx_ycc_convert_sse2.column_ld2>
   3ecc0:	sub    $0x1,%rcx
   3ecc4:	movd   (%rsi,%rcx,4),%xmm0

000000000003ecc9 <jsimd_extrgbx_ycc_convert_sse2.column_ld2>:
   3ecc9:	test   $0x2,%cl
   3eccc:	je     3ece0 <jsimd_extrgbx_ycc_convert_sse2.column_ld4>
   3ecce:	sub    $0x2,%rcx
   3ecd2:	movq   (%rsi,%rcx,4),%xmm4
   3ecd7:	pslldq $0x8,%xmm0
   3ecdc:	por    %xmm4,%xmm0

000000000003ece0 <jsimd_extrgbx_ycc_convert_sse2.column_ld4>:
   3ece0:	test   $0x4,%cl
   3ece3:	je     3ecf2 <jsimd_extrgbx_ycc_convert_sse2.column_ld8>
   3ece5:	sub    $0x4,%rcx
   3ece9:	movdqa %xmm0,%xmm4
   3eced:	movdqu (%rsi,%rcx,4),%xmm0

000000000003ecf2 <jsimd_extrgbx_ycc_convert_sse2.column_ld8>:
   3ecf2:	test   $0x8,%cl
   3ecf5:	mov    $0x10,%ecx
   3ecfa:	je     3ed22 <jsimd_extrgbx_ycc_convert_sse2.rgb_ycc_cnv>
   3ecfc:	movdqa %xmm0,%xmm5
   3ed00:	movdqa %xmm4,%xmm7
   3ed04:	movdqu (%rsi),%xmm0
   3ed08:	movdqu 0x10(%rsi),%xmm4
   3ed0d:	jmp    3ed22 <jsimd_extrgbx_ycc_convert_sse2.rgb_ycc_cnv>

000000000003ed0f <jsimd_extrgbx_ycc_convert_sse2.columnloop>:
   3ed0f:	movdqu (%rsi),%xmm0
   3ed13:	movdqu 0x10(%rsi),%xmm4
   3ed18:	movdqu 0x20(%rsi),%xmm5
   3ed1d:	movdqu 0x30(%rsi),%xmm7

000000000003ed22 <jsimd_extrgbx_ycc_convert_sse2.rgb_ycc_cnv>:
   3ed22:	movdqa %xmm0,%xmm3
   3ed26:	punpcklbw %xmm4,%xmm0
   3ed2a:	punpckhbw %xmm4,%xmm3
   3ed2e:	movdqa %xmm5,%xmm2
   3ed32:	punpcklbw %xmm7,%xmm5
   3ed36:	punpckhbw %xmm7,%xmm2
   3ed3a:	movdqa %xmm0,%xmm1
   3ed3e:	punpcklwd %xmm5,%xmm0
   3ed42:	punpckhwd %xmm5,%xmm1
   3ed46:	movdqa %xmm3,%xmm6
   3ed4a:	punpcklwd %xmm2,%xmm3
   3ed4e:	punpckhwd %xmm2,%xmm6
   3ed52:	movdqa %xmm0,%xmm4
   3ed56:	punpcklbw %xmm3,%xmm0
   3ed5a:	punpckhbw %xmm3,%xmm4
   3ed5e:	movdqa %xmm1,%xmm7
   3ed62:	punpcklbw %xmm6,%xmm1
   3ed66:	punpckhbw %xmm6,%xmm7
   3ed6a:	pxor   %xmm5,%xmm5
   3ed6e:	movdqa %xmm0,%xmm2
   3ed72:	punpcklbw %xmm5,%xmm0
   3ed76:	punpckhbw %xmm5,%xmm2
   3ed7a:	movdqa %xmm1,%xmm3
   3ed7e:	punpcklbw %xmm5,%xmm1
   3ed82:	punpckhbw %xmm5,%xmm3
   3ed86:	movdqa %xmm4,%xmm6
   3ed8a:	punpcklbw %xmm5,%xmm4
   3ed8e:	punpckhbw %xmm5,%xmm6
   3ed92:	punpcklbw %xmm7,%xmm5
   3ed96:	punpckhbw %xmm7,%xmm7
   3ed9a:	psrlw  $0x8,%xmm5
   3ed9f:	psrlw  $0x8,%xmm7
   3eda4:	movdqa %xmm0,-0x80(%rbp)
   3eda9:	movdqa %xmm1,-0x70(%rbp)
   3edae:	movdqa %xmm4,-0x60(%rbp)
   3edb3:	movdqa %xmm5,-0x50(%rbp)
   3edb8:	movdqa %xmm1,%xmm6
   3edbc:	punpcklwd %xmm3,%xmm1
   3edc0:	punpckhwd %xmm3,%xmm6
   3edc4:	movdqa %xmm1,%xmm7
   3edc8:	movdqa %xmm6,%xmm4
   3edcc:	pmaddwd 0x1ce4c(%rip),%xmm1        # 5bc20 <PW_F0299_F0337>
   3edd4:	pmaddwd 0x1ce44(%rip),%xmm6        # 5bc20 <PW_F0299_F0337>
   3eddc:	pmaddwd 0x1ce5c(%rip),%xmm7        # 5bc40 <PW_MF016_MF033>
   3ede4:	pmaddwd 0x1ce54(%rip),%xmm4        # 5bc40 <PW_MF016_MF033>
   3edec:	movdqa %xmm1,-0x40(%rbp)
   3edf1:	movdqa %xmm6,-0x30(%rbp)
   3edf6:	pxor   %xmm1,%xmm1
   3edfa:	pxor   %xmm6,%xmm6
   3edfe:	punpcklwd %xmm5,%xmm1
   3ee02:	punpckhwd %xmm5,%xmm6
   3ee06:	psrld  $0x1,%xmm1
   3ee0b:	psrld  $0x1,%xmm6
   3ee10:	movdqa 0x1ce48(%rip),%xmm5        # 5bc60 <PD_ONEHALFM1_CJ>
   3ee18:	paddd  %xmm1,%xmm7
   3ee1c:	paddd  %xmm6,%xmm4
   3ee20:	paddd  %xmm5,%xmm7
   3ee24:	paddd  %xmm5,%xmm4
   3ee28:	psrld  $0x10,%xmm7
   3ee2d:	psrld  $0x10,%xmm4
   3ee32:	packssdw %xmm4,%xmm7
   3ee36:	movdqa -0x60(%rbp),%xmm1
   3ee3b:	movdqa %xmm0,%xmm6
   3ee3f:	punpcklwd %xmm2,%xmm0
   3ee43:	punpckhwd %xmm2,%xmm6
   3ee47:	movdqa %xmm0,%xmm5
   3ee4b:	movdqa %xmm6,%xmm4
   3ee4f:	pmaddwd 0x1cdc9(%rip),%xmm0        # 5bc20 <PW_F0299_F0337>
   3ee57:	pmaddwd 0x1cdc1(%rip),%xmm6        # 5bc20 <PW_F0299_F0337>
   3ee5f:	pmaddwd 0x1cdd9(%rip),%xmm5        # 5bc40 <PW_MF016_MF033>
   3ee67:	pmaddwd 0x1cdd1(%rip),%xmm4        # 5bc40 <PW_MF016_MF033>
   3ee6f:	movdqa %xmm0,-0x20(%rbp)
   3ee74:	movdqa %xmm6,-0x10(%rbp)
   3ee79:	pxor   %xmm0,%xmm0
   3ee7d:	pxor   %xmm6,%xmm6
   3ee81:	punpcklwd %xmm1,%xmm0
   3ee85:	punpckhwd %xmm1,%xmm6
   3ee89:	psrld  $0x1,%xmm0
   3ee8e:	psrld  $0x1,%xmm6
   3ee93:	movdqa 0x1cdc5(%rip),%xmm1        # 5bc60 <PD_ONEHALFM1_CJ>
   3ee9b:	paddd  %xmm0,%xmm5
   3ee9f:	paddd  %xmm6,%xmm4
   3eea3:	paddd  %xmm1,%xmm5
   3eea7:	paddd  %xmm1,%xmm4
   3eeab:	psrld  $0x10,%xmm5
   3eeb0:	psrld  $0x10,%xmm4
   3eeb5:	packssdw %xmm4,%xmm5
   3eeb9:	psllw  $0x8,%xmm7
   3eebe:	por    %xmm7,%xmm5
   3eec2:	movdqa %xmm5,(%rbx)
   3eec6:	movdqa -0x50(%rbp),%xmm0
   3eecb:	movdqa -0x60(%rbp),%xmm6
   3eed0:	movdqa -0x70(%rbp),%xmm1
   3eed5:	movdqa %xmm0,%xmm4
   3eed9:	punpcklwd %xmm3,%xmm0
   3eedd:	punpckhwd %xmm3,%xmm4
   3eee1:	movdqa %xmm0,%xmm7
   3eee5:	movdqa %xmm4,%xmm5
   3eee9:	pmaddwd 0x1cd3f(%rip),%xmm0        # 5bc30 <PW_F0114_F0250>
   3eef1:	pmaddwd 0x1cd37(%rip),%xmm4        # 5bc30 <PW_F0114_F0250>
   3eef9:	pmaddwd 0x1cd4f(%rip),%xmm7        # 5bc50 <PW_MF008_MF041>
   3ef01:	pmaddwd 0x1cd47(%rip),%xmm5        # 5bc50 <PW_MF008_MF041>
   3ef09:	movdqa 0x1cd5f(%rip),%xmm3        # 5bc70 <PD_ONEHALF>
   3ef11:	paddd  -0x40(%rbp),%xmm0
   3ef16:	paddd  -0x30(%rbp),%xmm4
   3ef1b:	paddd  %xmm3,%xmm0
   3ef1f:	paddd  %xmm3,%xmm4
   3ef23:	psrld  $0x10,%xmm0
   3ef28:	psrld  $0x10,%xmm4
   3ef2d:	packssdw %xmm4,%xmm0
   3ef31:	pxor   %xmm3,%xmm3
   3ef35:	pxor   %xmm4,%xmm4
   3ef39:	punpcklwd %xmm1,%xmm3
   3ef3d:	punpckhwd %xmm1,%xmm4
   3ef41:	psrld  $0x1,%xmm3
   3ef46:	psrld  $0x1,%xmm4
   3ef4b:	movdqa 0x1cd0d(%rip),%xmm1        # 5bc60 <PD_ONEHALFM1_CJ>
   3ef53:	paddd  %xmm3,%xmm7
   3ef57:	paddd  %xmm4,%xmm5
   3ef5b:	paddd  %xmm1,%xmm7
   3ef5f:	paddd  %xmm1,%xmm5
   3ef63:	psrld  $0x10,%xmm7
   3ef68:	psrld  $0x10,%xmm5
   3ef6d:	packssdw %xmm5,%xmm7
   3ef71:	movdqa -0x80(%rbp),%xmm3
   3ef76:	movdqa %xmm6,%xmm4
   3ef7a:	punpcklwd %xmm2,%xmm6
   3ef7e:	punpckhwd %xmm2,%xmm4
   3ef82:	movdqa %xmm6,%xmm1
   3ef86:	movdqa %xmm4,%xmm5
   3ef8a:	pmaddwd 0x1cc9e(%rip),%xmm6        # 5bc30 <PW_F0114_F0250>
   3ef92:	pmaddwd 0x1cc96(%rip),%xmm4        # 5bc30 <PW_F0114_F0250>
   3ef9a:	pmaddwd 0x1ccae(%rip),%xmm1        # 5bc50 <PW_MF008_MF041>
   3efa2:	pmaddwd 0x1cca6(%rip),%xmm5        # 5bc50 <PW_MF008_MF041>
   3efaa:	movdqa 0x1ccbe(%rip),%xmm2        # 5bc70 <PD_ONEHALF>
   3efb2:	paddd  -0x20(%rbp),%xmm6
   3efb7:	paddd  -0x10(%rbp),%xmm4
   3efbc:	paddd  %xmm2,%xmm6
   3efc0:	paddd  %xmm2,%xmm4
   3efc4:	psrld  $0x10,%xmm6
   3efc9:	psrld  $0x10,%xmm4
   3efce:	packssdw %xmm4,%xmm6
   3efd2:	psllw  $0x8,%xmm0
   3efd7:	por    %xmm0,%xmm6
   3efdb:	movdqa %xmm6,(%rdi)
   3efdf:	pxor   %xmm2,%xmm2
   3efe3:	pxor   %xmm4,%xmm4
   3efe7:	punpcklwd %xmm3,%xmm2
   3efeb:	punpckhwd %xmm3,%xmm4
   3efef:	psrld  $0x1,%xmm2
   3eff4:	psrld  $0x1,%xmm4
   3eff9:	movdqa 0x1cc5f(%rip),%xmm0        # 5bc60 <PD_ONEHALFM1_CJ>
   3f001:	paddd  %xmm2,%xmm1
   3f005:	paddd  %xmm4,%xmm5
   3f009:	paddd  %xmm0,%xmm1
   3f00d:	paddd  %xmm0,%xmm5
   3f011:	psrld  $0x10,%xmm1
   3f016:	psrld  $0x10,%xmm5
   3f01b:	packssdw %xmm5,%xmm1
   3f01f:	psllw  $0x8,%xmm7
   3f024:	por    %xmm7,%xmm1
   3f028:	movdqa %xmm1,(%rdx)
   3f02c:	sub    $0x10,%rcx
   3f030:	add    $0x40,%rsi
   3f034:	add    $0x10,%rdi
   3f038:	add    $0x10,%rbx
   3f03c:	add    $0x10,%rdx
   3f040:	cmp    $0x10,%rcx
   3f044:	jae    3ed0f <jsimd_extrgbx_ycc_convert_sse2.columnloop>
   3f04a:	test   %rcx,%rcx
   3f04d:	jne    3ecbb <jsimd_extrgbx_ycc_convert_sse2.column_ld1>
   3f053:	pop    %rcx
   3f054:	pop    %rsi
   3f055:	pop    %rdi
   3f056:	pop    %rbx
   3f057:	pop    %rdx
   3f058:	add    $0x8,%rsi
   3f05c:	add    $0x8,%rdi
   3f060:	add    $0x8,%rbx
   3f064:	add    $0x8,%rdx
   3f068:	dec    %rax
   3f06b:	jg     3eca0 <jsimd_extrgbx_ycc_convert_sse2.rowloop>

000000000003f071 <jsimd_extrgbx_ycc_convert_sse2.return>:
   3f071:	pop    %rbx
   3f072:	pop    %r15
   3f074:	pop    %r14
   3f076:	pop    %r13
   3f078:	pop    %r12
   3f07a:	pop    %r11
   3f07c:	pop    %r10
   3f07e:	mov    %rbp,%rsp
   3f081:	pop    %rsp
   3f082:	pop    %rbp
   3f083:	retq   
   3f084:	nop
   3f085:	nop
   3f086:	nop
   3f087:	nop
   3f088:	nop
   3f089:	nop
   3f08a:	nop
   3f08b:	nop
   3f08c:	nop
   3f08d:	nop
   3f08e:	nop
   3f08f:	nop

000000000003f090 <jsimd_extbgr_ycc_convert_sse2>:
   3f090:	push   %rbp
   3f091:	mov    %rsp,%rax
   3f094:	sub    $0x4,%rsp
   3f098:	and    $0xfffffffffffffff0,%rsp
   3f09c:	mov    %rax,(%rsp)
   3f0a0:	mov    %rsp,%rbp
   3f0a3:	lea    -0x80(%rbp),%rsp
   3f0a7:	push   %r10
   3f0a9:	push   %r11
   3f0ab:	push   %r12
   3f0ad:	push   %r13
   3f0af:	push   %r14
   3f0b1:	push   %r15
   3f0b3:	mov    %rdi,%r10
   3f0b6:	mov    %rsi,%r11
   3f0b9:	mov    %rdx,%r12
   3f0bc:	mov    %rcx,%r13
   3f0bf:	mov    %r8,%r14
   3f0c2:	mov    %r9,%r15
   3f0c5:	push   %rbx
   3f0c6:	mov    %r10d,%ecx
   3f0c9:	test   %rcx,%rcx
   3f0cc:	je     3f505 <jsimd_extbgr_ycc_convert_sse2.return>
   3f0d2:	push   %rcx
   3f0d3:	mov    %r12,%rsi
   3f0d6:	mov    %r13d,%ecx
   3f0d9:	mov    (%rsi),%rdi
   3f0dc:	mov    0x8(%rsi),%rbx
   3f0e0:	mov    0x10(%rsi),%rdx
   3f0e4:	lea    (%rdi,%rcx,8),%rdi
   3f0e8:	lea    (%rbx,%rcx,8),%rbx
   3f0ec:	lea    (%rdx,%rcx,8),%rdx
   3f0f0:	pop    %rcx
   3f0f1:	mov    %r11,%rsi
   3f0f4:	mov    %r14d,%eax
   3f0f7:	test   %rax,%rax
   3f0fa:	jle    3f505 <jsimd_extbgr_ycc_convert_sse2.return>

000000000003f100 <jsimd_extbgr_ycc_convert_sse2.rowloop>:
   3f100:	push   %rdx
   3f101:	push   %rbx
   3f102:	push   %rdi
   3f103:	push   %rsi
   3f104:	push   %rcx
   3f105:	mov    (%rsi),%rsi
   3f108:	mov    (%rdi),%rdi
   3f10b:	mov    (%rbx),%rbx
   3f10e:	mov    (%rdx),%rdx
   3f111:	cmp    $0x10,%rcx
   3f115:	jae    3f1a5 <jsimd_extbgr_ycc_convert_sse2.columnloop>

000000000003f11b <jsimd_extbgr_ycc_convert_sse2.column_ld1>:
   3f11b:	push   %rax
   3f11c:	push   %rdx
   3f11d:	lea    (%rcx,%rcx,2),%rcx
   3f121:	test   $0x1,%cl
   3f124:	je     3f12f <jsimd_extbgr_ycc_convert_sse2.column_ld2>
   3f126:	sub    $0x1,%rcx
   3f12a:	movzbq (%rsi,%rcx,1),%rax

000000000003f12f <jsimd_extbgr_ycc_convert_sse2.column_ld2>:
   3f12f:	test   $0x2,%cl
   3f132:	je     3f144 <jsimd_extbgr_ycc_convert_sse2.column_ld4>
   3f134:	sub    $0x2,%rcx
   3f138:	movzwq (%rsi,%rcx,1),%rdx
   3f13d:	shl    $0x10,%rax
   3f141:	or     %rdx,%rax

000000000003f144 <jsimd_extbgr_ycc_convert_sse2.column_ld4>:
   3f144:	movd   %eax,%xmm4
   3f148:	pop    %rdx
   3f149:	pop    %rax
   3f14a:	test   $0x4,%cl
   3f14d:	je     3f161 <jsimd_extbgr_ycc_convert_sse2.column_ld8>
   3f14f:	sub    $0x4,%rcx
   3f153:	movd   (%rsi,%rcx,1),%xmm1
   3f158:	pslldq $0x4,%xmm4
   3f15d:	por    %xmm1,%xmm4

000000000003f161 <jsimd_extbgr_ycc_convert_sse2.column_ld8>:
   3f161:	test   $0x8,%cl
   3f164:	je     3f178 <jsimd_extbgr_ycc_convert_sse2.column_ld16>
   3f166:	sub    $0x8,%rcx
   3f16a:	movq   (%rsi,%rcx,1),%xmm5
   3f16f:	pslldq $0x8,%xmm4
   3f174:	por    %xmm5,%xmm4

000000000003f178 <jsimd_extbgr_ycc_convert_sse2.column_ld16>:
   3f178:	test   $0x10,%cl
   3f17b:	je     3f18c <jsimd_extbgr_ycc_convert_sse2.column_ld32>
   3f17d:	movdqa %xmm4,%xmm1
   3f181:	movdqu (%rsi),%xmm4
   3f185:	mov    $0x10,%ecx
   3f18a:	jmp    3f1b3 <jsimd_extbgr_ycc_convert_sse2.rgb_ycc_cnv>

000000000003f18c <jsimd_extbgr_ycc_convert_sse2.column_ld32>:
   3f18c:	test   $0x20,%cl
   3f18f:	mov    $0x10,%ecx
   3f194:	je     3f1b3 <jsimd_extbgr_ycc_convert_sse2.rgb_ycc_cnv>
   3f196:	movdqa %xmm4,%xmm5
   3f19a:	movdqu (%rsi),%xmm4
   3f19e:	movdqu 0x10(%rsi),%xmm1
   3f1a3:	jmp    3f1b3 <jsimd_extbgr_ycc_convert_sse2.rgb_ycc_cnv>

000000000003f1a5 <jsimd_extbgr_ycc_convert_sse2.columnloop>:
   3f1a5:	movdqu (%rsi),%xmm4
   3f1a9:	movdqu 0x10(%rsi),%xmm1
   3f1ae:	movdqu 0x20(%rsi),%xmm5

000000000003f1b3 <jsimd_extbgr_ycc_convert_sse2.rgb_ycc_cnv>:
   3f1b3:	movdqa %xmm4,%xmm6
   3f1b7:	pslldq $0x8,%xmm4
   3f1bc:	psrldq $0x8,%xmm6
   3f1c1:	punpckhbw %xmm1,%xmm4
   3f1c5:	pslldq $0x8,%xmm1
   3f1ca:	punpcklbw %xmm5,%xmm6
   3f1ce:	punpckhbw %xmm5,%xmm1
   3f1d2:	movdqa %xmm4,%xmm3
   3f1d6:	pslldq $0x8,%xmm4
   3f1db:	psrldq $0x8,%xmm3
   3f1e0:	punpckhbw %xmm6,%xmm4
   3f1e4:	pslldq $0x8,%xmm6
   3f1e9:	punpcklbw %xmm1,%xmm3
   3f1ed:	punpckhbw %xmm1,%xmm6
   3f1f1:	movdqa %xmm4,%xmm0
   3f1f5:	pslldq $0x8,%xmm4
   3f1fa:	psrldq $0x8,%xmm0
   3f1ff:	punpckhbw %xmm3,%xmm4
   3f203:	pslldq $0x8,%xmm3
   3f208:	punpcklbw %xmm6,%xmm0
   3f20c:	punpckhbw %xmm6,%xmm3
   3f210:	pxor   %xmm7,%xmm7
   3f214:	movdqa %xmm4,%xmm2
   3f218:	punpcklbw %xmm7,%xmm4
   3f21c:	punpckhbw %xmm7,%xmm2
   3f220:	movdqa %xmm0,%xmm5
   3f224:	punpcklbw %xmm7,%xmm0
   3f228:	punpckhbw %xmm7,%xmm5
   3f22c:	movdqa %xmm3,%xmm1
   3f230:	punpcklbw %xmm7,%xmm3
   3f234:	punpckhbw %xmm7,%xmm1
   3f238:	movdqa %xmm0,-0x80(%rbp)
   3f23d:	movdqa %xmm1,-0x70(%rbp)
   3f242:	movdqa %xmm4,-0x60(%rbp)
   3f247:	movdqa %xmm5,-0x50(%rbp)
   3f24c:	movdqa %xmm1,%xmm6
   3f250:	punpcklwd %xmm3,%xmm1
   3f254:	punpckhwd %xmm3,%xmm6
   3f258:	movdqa %xmm1,%xmm7
   3f25c:	movdqa %xmm6,%xmm4
   3f260:	pmaddwd 0x1c9b8(%rip),%xmm1        # 5bc20 <PW_F0299_F0337>
   3f268:	pmaddwd 0x1c9b0(%rip),%xmm6        # 5bc20 <PW_F0299_F0337>
   3f270:	pmaddwd 0x1c9c8(%rip),%xmm7        # 5bc40 <PW_MF016_MF033>
   3f278:	pmaddwd 0x1c9c0(%rip),%xmm4        # 5bc40 <PW_MF016_MF033>
   3f280:	movdqa %xmm1,-0x40(%rbp)
   3f285:	movdqa %xmm6,-0x30(%rbp)
   3f28a:	pxor   %xmm1,%xmm1
   3f28e:	pxor   %xmm6,%xmm6
   3f292:	punpcklwd %xmm5,%xmm1
   3f296:	punpckhwd %xmm5,%xmm6
   3f29a:	psrld  $0x1,%xmm1
   3f29f:	psrld  $0x1,%xmm6
   3f2a4:	movdqa 0x1c9b4(%rip),%xmm5        # 5bc60 <PD_ONEHALFM1_CJ>
   3f2ac:	paddd  %xmm1,%xmm7
   3f2b0:	paddd  %xmm6,%xmm4
   3f2b4:	paddd  %xmm5,%xmm7
   3f2b8:	paddd  %xmm5,%xmm4
   3f2bc:	psrld  $0x10,%xmm7
   3f2c1:	psrld  $0x10,%xmm4
   3f2c6:	packssdw %xmm4,%xmm7
   3f2ca:	movdqa -0x60(%rbp),%xmm1
   3f2cf:	movdqa %xmm0,%xmm6
   3f2d3:	punpcklwd %xmm2,%xmm0
   3f2d7:	punpckhwd %xmm2,%xmm6
   3f2db:	movdqa %xmm0,%xmm5
   3f2df:	movdqa %xmm6,%xmm4
   3f2e3:	pmaddwd 0x1c935(%rip),%xmm0        # 5bc20 <PW_F0299_F0337>
   3f2eb:	pmaddwd 0x1c92d(%rip),%xmm6        # 5bc20 <PW_F0299_F0337>
   3f2f3:	pmaddwd 0x1c945(%rip),%xmm5        # 5bc40 <PW_MF016_MF033>
   3f2fb:	pmaddwd 0x1c93d(%rip),%xmm4        # 5bc40 <PW_MF016_MF033>
   3f303:	movdqa %xmm0,-0x20(%rbp)
   3f308:	movdqa %xmm6,-0x10(%rbp)
   3f30d:	pxor   %xmm0,%xmm0
   3f311:	pxor   %xmm6,%xmm6
   3f315:	punpcklwd %xmm1,%xmm0
   3f319:	punpckhwd %xmm1,%xmm6
   3f31d:	psrld  $0x1,%xmm0
   3f322:	psrld  $0x1,%xmm6
   3f327:	movdqa 0x1c931(%rip),%xmm1        # 5bc60 <PD_ONEHALFM1_CJ>
   3f32f:	paddd  %xmm0,%xmm5
   3f333:	paddd  %xmm6,%xmm4
   3f337:	paddd  %xmm1,%xmm5
   3f33b:	paddd  %xmm1,%xmm4
   3f33f:	psrld  $0x10,%xmm5
   3f344:	psrld  $0x10,%xmm4
   3f349:	packssdw %xmm4,%xmm5
   3f34d:	psllw  $0x8,%xmm7
   3f352:	por    %xmm7,%xmm5
   3f356:	movdqa %xmm5,(%rbx)
   3f35a:	movdqa -0x50(%rbp),%xmm0
   3f35f:	movdqa -0x60(%rbp),%xmm6
   3f364:	movdqa -0x70(%rbp),%xmm1
   3f369:	movdqa %xmm0,%xmm4
   3f36d:	punpcklwd %xmm3,%xmm0
   3f371:	punpckhwd %xmm3,%xmm4
   3f375:	movdqa %xmm0,%xmm7
   3f379:	movdqa %xmm4,%xmm5
   3f37d:	pmaddwd 0x1c8ab(%rip),%xmm0        # 5bc30 <PW_F0114_F0250>
   3f385:	pmaddwd 0x1c8a3(%rip),%xmm4        # 5bc30 <PW_F0114_F0250>
   3f38d:	pmaddwd 0x1c8bb(%rip),%xmm7        # 5bc50 <PW_MF008_MF041>
   3f395:	pmaddwd 0x1c8b3(%rip),%xmm5        # 5bc50 <PW_MF008_MF041>
   3f39d:	movdqa 0x1c8cb(%rip),%xmm3        # 5bc70 <PD_ONEHALF>
   3f3a5:	paddd  -0x40(%rbp),%xmm0
   3f3aa:	paddd  -0x30(%rbp),%xmm4
   3f3af:	paddd  %xmm3,%xmm0
   3f3b3:	paddd  %xmm3,%xmm4
   3f3b7:	psrld  $0x10,%xmm0
   3f3bc:	psrld  $0x10,%xmm4
   3f3c1:	packssdw %xmm4,%xmm0
   3f3c5:	pxor   %xmm3,%xmm3
   3f3c9:	pxor   %xmm4,%xmm4
   3f3cd:	punpcklwd %xmm1,%xmm3
   3f3d1:	punpckhwd %xmm1,%xmm4
   3f3d5:	psrld  $0x1,%xmm3
   3f3da:	psrld  $0x1,%xmm4
   3f3df:	movdqa 0x1c879(%rip),%xmm1        # 5bc60 <PD_ONEHALFM1_CJ>
   3f3e7:	paddd  %xmm3,%xmm7
   3f3eb:	paddd  %xmm4,%xmm5
   3f3ef:	paddd  %xmm1,%xmm7
   3f3f3:	paddd  %xmm1,%xmm5
   3f3f7:	psrld  $0x10,%xmm7
   3f3fc:	psrld  $0x10,%xmm5
   3f401:	packssdw %xmm5,%xmm7
   3f405:	movdqa -0x80(%rbp),%xmm3
   3f40a:	movdqa %xmm6,%xmm4
   3f40e:	punpcklwd %xmm2,%xmm6
   3f412:	punpckhwd %xmm2,%xmm4
   3f416:	movdqa %xmm6,%xmm1
   3f41a:	movdqa %xmm4,%xmm5
   3f41e:	pmaddwd 0x1c80a(%rip),%xmm6        # 5bc30 <PW_F0114_F0250>
   3f426:	pmaddwd 0x1c802(%rip),%xmm4        # 5bc30 <PW_F0114_F0250>
   3f42e:	pmaddwd 0x1c81a(%rip),%xmm1        # 5bc50 <PW_MF008_MF041>
   3f436:	pmaddwd 0x1c812(%rip),%xmm5        # 5bc50 <PW_MF008_MF041>
   3f43e:	movdqa 0x1c82a(%rip),%xmm2        # 5bc70 <PD_ONEHALF>
   3f446:	paddd  -0x20(%rbp),%xmm6
   3f44b:	paddd  -0x10(%rbp),%xmm4
   3f450:	paddd  %xmm2,%xmm6
   3f454:	paddd  %xmm2,%xmm4
   3f458:	psrld  $0x10,%xmm6
   3f45d:	psrld  $0x10,%xmm4
   3f462:	packssdw %xmm4,%xmm6
   3f466:	psllw  $0x8,%xmm0
   3f46b:	por    %xmm0,%xmm6
   3f46f:	movdqa %xmm6,(%rdi)
   3f473:	pxor   %xmm2,%xmm2
   3f477:	pxor   %xmm4,%xmm4
   3f47b:	punpcklwd %xmm3,%xmm2
   3f47f:	punpckhwd %xmm3,%xmm4
   3f483:	psrld  $0x1,%xmm2
   3f488:	psrld  $0x1,%xmm4
   3f48d:	movdqa 0x1c7cb(%rip),%xmm0        # 5bc60 <PD_ONEHALFM1_CJ>
   3f495:	paddd  %xmm2,%xmm1
   3f499:	paddd  %xmm4,%xmm5
   3f49d:	paddd  %xmm0,%xmm1
   3f4a1:	paddd  %xmm0,%xmm5
   3f4a5:	psrld  $0x10,%xmm1
   3f4aa:	psrld  $0x10,%xmm5
   3f4af:	packssdw %xmm5,%xmm1
   3f4b3:	psllw  $0x8,%xmm7
   3f4b8:	por    %xmm7,%xmm1
   3f4bc:	movdqa %xmm1,(%rdx)
   3f4c0:	sub    $0x10,%rcx
   3f4c4:	add    $0x30,%rsi
   3f4c8:	add    $0x10,%rdi
   3f4cc:	add    $0x10,%rbx
   3f4d0:	add    $0x10,%rdx
   3f4d4:	cmp    $0x10,%rcx
   3f4d8:	jae    3f1a5 <jsimd_extbgr_ycc_convert_sse2.columnloop>
   3f4de:	test   %rcx,%rcx
   3f4e1:	jne    3f11b <jsimd_extbgr_ycc_convert_sse2.column_ld1>
   3f4e7:	pop    %rcx
   3f4e8:	pop    %rsi
   3f4e9:	pop    %rdi
   3f4ea:	pop    %rbx
   3f4eb:	pop    %rdx
   3f4ec:	add    $0x8,%rsi
   3f4f0:	add    $0x8,%rdi
   3f4f4:	add    $0x8,%rbx
   3f4f8:	add    $0x8,%rdx
   3f4fc:	dec    %rax
   3f4ff:	jg     3f100 <jsimd_extbgr_ycc_convert_sse2.rowloop>

000000000003f505 <jsimd_extbgr_ycc_convert_sse2.return>:
   3f505:	pop    %rbx
   3f506:	pop    %r15
   3f508:	pop    %r14
   3f50a:	pop    %r13
   3f50c:	pop    %r12
   3f50e:	pop    %r11
   3f510:	pop    %r10
   3f512:	mov    %rbp,%rsp
   3f515:	pop    %rsp
   3f516:	pop    %rbp
   3f517:	retq   
   3f518:	nop
   3f519:	nop
   3f51a:	nop
   3f51b:	nop
   3f51c:	nop
   3f51d:	nop
   3f51e:	nop
   3f51f:	nop

000000000003f520 <jsimd_extbgrx_ycc_convert_sse2>:
   3f520:	push   %rbp
   3f521:	mov    %rsp,%rax
   3f524:	sub    $0x4,%rsp
   3f528:	and    $0xfffffffffffffff0,%rsp
   3f52c:	mov    %rax,(%rsp)
   3f530:	mov    %rsp,%rbp
   3f533:	lea    -0x80(%rbp),%rsp
   3f537:	push   %r10
   3f539:	push   %r11
   3f53b:	push   %r12
   3f53d:	push   %r13
   3f53f:	push   %r14
   3f541:	push   %r15
   3f543:	mov    %rdi,%r10
   3f546:	mov    %rsi,%r11
   3f549:	mov    %rdx,%r12
   3f54c:	mov    %rcx,%r13
   3f54f:	mov    %r8,%r14
   3f552:	mov    %r9,%r15
   3f555:	push   %rbx
   3f556:	mov    %r10d,%ecx
   3f559:	test   %rcx,%rcx
   3f55c:	je     3f961 <jsimd_extbgrx_ycc_convert_sse2.return>
   3f562:	push   %rcx
   3f563:	mov    %r12,%rsi
   3f566:	mov    %r13d,%ecx
   3f569:	mov    (%rsi),%rdi
   3f56c:	mov    0x8(%rsi),%rbx
   3f570:	mov    0x10(%rsi),%rdx
   3f574:	lea    (%rdi,%rcx,8),%rdi
   3f578:	lea    (%rbx,%rcx,8),%rbx
   3f57c:	lea    (%rdx,%rcx,8),%rdx
   3f580:	pop    %rcx
   3f581:	mov    %r11,%rsi
   3f584:	mov    %r14d,%eax
   3f587:	test   %rax,%rax
   3f58a:	jle    3f961 <jsimd_extbgrx_ycc_convert_sse2.return>

000000000003f590 <jsimd_extbgrx_ycc_convert_sse2.rowloop>:
   3f590:	push   %rdx
   3f591:	push   %rbx
   3f592:	push   %rdi
   3f593:	push   %rsi
   3f594:	push   %rcx
   3f595:	mov    (%rsi),%rsi
   3f598:	mov    (%rdi),%rdi
   3f59b:	mov    (%rbx),%rbx
   3f59e:	mov    (%rdx),%rdx
   3f5a1:	cmp    $0x10,%rcx
   3f5a5:	jae    3f5ff <jsimd_extbgrx_ycc_convert_sse2.columnloop>

000000000003f5ab <jsimd_extbgrx_ycc_convert_sse2.column_ld1>:
   3f5ab:	test   $0x1,%cl
   3f5ae:	je     3f5b9 <jsimd_extbgrx_ycc_convert_sse2.column_ld2>
   3f5b0:	sub    $0x1,%rcx
   3f5b4:	movd   (%rsi,%rcx,4),%xmm4

000000000003f5b9 <jsimd_extbgrx_ycc_convert_sse2.column_ld2>:
   3f5b9:	test   $0x2,%cl
   3f5bc:	je     3f5d0 <jsimd_extbgrx_ycc_convert_sse2.column_ld4>
   3f5be:	sub    $0x2,%rcx
   3f5c2:	movq   (%rsi,%rcx,4),%xmm0
   3f5c7:	pslldq $0x8,%xmm4
   3f5cc:	por    %xmm0,%xmm4

000000000003f5d0 <jsimd_extbgrx_ycc_convert_sse2.column_ld4>:
   3f5d0:	test   $0x4,%cl
   3f5d3:	je     3f5e2 <jsimd_extbgrx_ycc_convert_sse2.column_ld8>
   3f5d5:	sub    $0x4,%rcx
   3f5d9:	movdqa %xmm4,%xmm0
   3f5dd:	movdqu (%rsi,%rcx,4),%xmm4

000000000003f5e2 <jsimd_extbgrx_ycc_convert_sse2.column_ld8>:
   3f5e2:	test   $0x8,%cl
   3f5e5:	mov    $0x10,%ecx
   3f5ea:	je     3f612 <jsimd_extbgrx_ycc_convert_sse2.rgb_ycc_cnv>
   3f5ec:	movdqa %xmm4,%xmm1
   3f5f0:	movdqa %xmm0,%xmm7
   3f5f4:	movdqu (%rsi),%xmm4
   3f5f8:	movdqu 0x10(%rsi),%xmm0
   3f5fd:	jmp    3f612 <jsimd_extbgrx_ycc_convert_sse2.rgb_ycc_cnv>

000000000003f5ff <jsimd_extbgrx_ycc_convert_sse2.columnloop>:
   3f5ff:	movdqu (%rsi),%xmm4
   3f603:	movdqu 0x10(%rsi),%xmm0
   3f608:	movdqu 0x20(%rsi),%xmm1
   3f60d:	movdqu 0x30(%rsi),%xmm7

000000000003f612 <jsimd_extbgrx_ycc_convert_sse2.rgb_ycc_cnv>:
   3f612:	movdqa %xmm4,%xmm3
   3f616:	punpcklbw %xmm0,%xmm4
   3f61a:	punpckhbw %xmm0,%xmm3
   3f61e:	movdqa %xmm1,%xmm2
   3f622:	punpcklbw %xmm7,%xmm1
   3f626:	punpckhbw %xmm7,%xmm2
   3f62a:	movdqa %xmm4,%xmm5
   3f62e:	punpcklwd %xmm1,%xmm4
   3f632:	punpckhwd %xmm1,%xmm5
   3f636:	movdqa %xmm3,%xmm6
   3f63a:	punpcklwd %xmm2,%xmm3
   3f63e:	punpckhwd %xmm2,%xmm6
   3f642:	movdqa %xmm4,%xmm0
   3f646:	punpcklbw %xmm3,%xmm4
   3f64a:	punpckhbw %xmm3,%xmm0
   3f64e:	movdqa %xmm5,%xmm7
   3f652:	punpcklbw %xmm6,%xmm5
   3f656:	punpckhbw %xmm6,%xmm7
   3f65a:	pxor   %xmm1,%xmm1
   3f65e:	movdqa %xmm4,%xmm2
   3f662:	punpcklbw %xmm1,%xmm4
   3f666:	punpckhbw %xmm1,%xmm2
   3f66a:	movdqa %xmm5,%xmm3
   3f66e:	punpcklbw %xmm1,%xmm5
   3f672:	punpckhbw %xmm1,%xmm3
   3f676:	movdqa %xmm0,%xmm6
   3f67a:	punpcklbw %xmm1,%xmm0
   3f67e:	punpckhbw %xmm1,%xmm6
   3f682:	punpcklbw %xmm7,%xmm1
   3f686:	punpckhbw %xmm7,%xmm7
   3f68a:	psrlw  $0x8,%xmm1
   3f68f:	psrlw  $0x8,%xmm7
   3f694:	movdqa %xmm0,-0x80(%rbp)
   3f699:	movdqa %xmm1,-0x70(%rbp)
   3f69e:	movdqa %xmm4,-0x60(%rbp)
   3f6a3:	movdqa %xmm5,-0x50(%rbp)
   3f6a8:	movdqa %xmm1,%xmm6
   3f6ac:	punpcklwd %xmm3,%xmm1
   3f6b0:	punpckhwd %xmm3,%xmm6
   3f6b4:	movdqa %xmm1,%xmm7
   3f6b8:	movdqa %xmm6,%xmm4
   3f6bc:	pmaddwd 0x1c55c(%rip),%xmm1        # 5bc20 <PW_F0299_F0337>
   3f6c4:	pmaddwd 0x1c554(%rip),%xmm6        # 5bc20 <PW_F0299_F0337>
   3f6cc:	pmaddwd 0x1c56c(%rip),%xmm7        # 5bc40 <PW_MF016_MF033>
   3f6d4:	pmaddwd 0x1c564(%rip),%xmm4        # 5bc40 <PW_MF016_MF033>
   3f6dc:	movdqa %xmm1,-0x40(%rbp)
   3f6e1:	movdqa %xmm6,-0x30(%rbp)
   3f6e6:	pxor   %xmm1,%xmm1
   3f6ea:	pxor   %xmm6,%xmm6
   3f6ee:	punpcklwd %xmm5,%xmm1
   3f6f2:	punpckhwd %xmm5,%xmm6
   3f6f6:	psrld  $0x1,%xmm1
   3f6fb:	psrld  $0x1,%xmm6
   3f700:	movdqa 0x1c558(%rip),%xmm5        # 5bc60 <PD_ONEHALFM1_CJ>
   3f708:	paddd  %xmm1,%xmm7
   3f70c:	paddd  %xmm6,%xmm4
   3f710:	paddd  %xmm5,%xmm7
   3f714:	paddd  %xmm5,%xmm4
   3f718:	psrld  $0x10,%xmm7
   3f71d:	psrld  $0x10,%xmm4
   3f722:	packssdw %xmm4,%xmm7
   3f726:	movdqa -0x60(%rbp),%xmm1
   3f72b:	movdqa %xmm0,%xmm6
   3f72f:	punpcklwd %xmm2,%xmm0
   3f733:	punpckhwd %xmm2,%xmm6
   3f737:	movdqa %xmm0,%xmm5
   3f73b:	movdqa %xmm6,%xmm4
   3f73f:	pmaddwd 0x1c4d9(%rip),%xmm0        # 5bc20 <PW_F0299_F0337>
   3f747:	pmaddwd 0x1c4d1(%rip),%xmm6        # 5bc20 <PW_F0299_F0337>
   3f74f:	pmaddwd 0x1c4e9(%rip),%xmm5        # 5bc40 <PW_MF016_MF033>
   3f757:	pmaddwd 0x1c4e1(%rip),%xmm4        # 5bc40 <PW_MF016_MF033>
   3f75f:	movdqa %xmm0,-0x20(%rbp)
   3f764:	movdqa %xmm6,-0x10(%rbp)
   3f769:	pxor   %xmm0,%xmm0
   3f76d:	pxor   %xmm6,%xmm6
   3f771:	punpcklwd %xmm1,%xmm0
   3f775:	punpckhwd %xmm1,%xmm6
   3f779:	psrld  $0x1,%xmm0
   3f77e:	psrld  $0x1,%xmm6
   3f783:	movdqa 0x1c4d5(%rip),%xmm1        # 5bc60 <PD_ONEHALFM1_CJ>
   3f78b:	paddd  %xmm0,%xmm5
   3f78f:	paddd  %xmm6,%xmm4
   3f793:	paddd  %xmm1,%xmm5
   3f797:	paddd  %xmm1,%xmm4
   3f79b:	psrld  $0x10,%xmm5
   3f7a0:	psrld  $0x10,%xmm4
   3f7a5:	packssdw %xmm4,%xmm5
   3f7a9:	psllw  $0x8,%xmm7
   3f7ae:	por    %xmm7,%xmm5
   3f7b2:	movdqa %xmm5,(%rbx)
   3f7b6:	movdqa -0x50(%rbp),%xmm0
   3f7bb:	movdqa -0x60(%rbp),%xmm6
   3f7c0:	movdqa -0x70(%rbp),%xmm1
   3f7c5:	movdqa %xmm0,%xmm4
   3f7c9:	punpcklwd %xmm3,%xmm0
   3f7cd:	punpckhwd %xmm3,%xmm4
   3f7d1:	movdqa %xmm0,%xmm7
   3f7d5:	movdqa %xmm4,%xmm5
   3f7d9:	pmaddwd 0x1c44f(%rip),%xmm0        # 5bc30 <PW_F0114_F0250>
   3f7e1:	pmaddwd 0x1c447(%rip),%xmm4        # 5bc30 <PW_F0114_F0250>
   3f7e9:	pmaddwd 0x1c45f(%rip),%xmm7        # 5bc50 <PW_MF008_MF041>
   3f7f1:	pmaddwd 0x1c457(%rip),%xmm5        # 5bc50 <PW_MF008_MF041>
   3f7f9:	movdqa 0x1c46f(%rip),%xmm3        # 5bc70 <PD_ONEHALF>
   3f801:	paddd  -0x40(%rbp),%xmm0
   3f806:	paddd  -0x30(%rbp),%xmm4
   3f80b:	paddd  %xmm3,%xmm0
   3f80f:	paddd  %xmm3,%xmm4
   3f813:	psrld  $0x10,%xmm0
   3f818:	psrld  $0x10,%xmm4
   3f81d:	packssdw %xmm4,%xmm0
   3f821:	pxor   %xmm3,%xmm3
   3f825:	pxor   %xmm4,%xmm4
   3f829:	punpcklwd %xmm1,%xmm3
   3f82d:	punpckhwd %xmm1,%xmm4
   3f831:	psrld  $0x1,%xmm3
   3f836:	psrld  $0x1,%xmm4
   3f83b:	movdqa 0x1c41d(%rip),%xmm1        # 5bc60 <PD_ONEHALFM1_CJ>
   3f843:	paddd  %xmm3,%xmm7
   3f847:	paddd  %xmm4,%xmm5
   3f84b:	paddd  %xmm1,%xmm7
   3f84f:	paddd  %xmm1,%xmm5
   3f853:	psrld  $0x10,%xmm7
   3f858:	psrld  $0x10,%xmm5
   3f85d:	packssdw %xmm5,%xmm7
   3f861:	movdqa -0x80(%rbp),%xmm3
   3f866:	movdqa %xmm6,%xmm4
   3f86a:	punpcklwd %xmm2,%xmm6
   3f86e:	punpckhwd %xmm2,%xmm4
   3f872:	movdqa %xmm6,%xmm1
   3f876:	movdqa %xmm4,%xmm5
   3f87a:	pmaddwd 0x1c3ae(%rip),%xmm6        # 5bc30 <PW_F0114_F0250>
   3f882:	pmaddwd 0x1c3a6(%rip),%xmm4        # 5bc30 <PW_F0114_F0250>
   3f88a:	pmaddwd 0x1c3be(%rip),%xmm1        # 5bc50 <PW_MF008_MF041>
   3f892:	pmaddwd 0x1c3b6(%rip),%xmm5        # 5bc50 <PW_MF008_MF041>
   3f89a:	movdqa 0x1c3ce(%rip),%xmm2        # 5bc70 <PD_ONEHALF>
   3f8a2:	paddd  -0x20(%rbp),%xmm6
   3f8a7:	paddd  -0x10(%rbp),%xmm4
   3f8ac:	paddd  %xmm2,%xmm6
   3f8b0:	paddd  %xmm2,%xmm4
   3f8b4:	psrld  $0x10,%xmm6
   3f8b9:	psrld  $0x10,%xmm4
   3f8be:	packssdw %xmm4,%xmm6
   3f8c2:	psllw  $0x8,%xmm0
   3f8c7:	por    %xmm0,%xmm6
   3f8cb:	movdqa %xmm6,(%rdi)
   3f8cf:	pxor   %xmm2,%xmm2
   3f8d3:	pxor   %xmm4,%xmm4
   3f8d7:	punpcklwd %xmm3,%xmm2
   3f8db:	punpckhwd %xmm3,%xmm4
   3f8df:	psrld  $0x1,%xmm2
   3f8e4:	psrld  $0x1,%xmm4
   3f8e9:	movdqa 0x1c36f(%rip),%xmm0        # 5bc60 <PD_ONEHALFM1_CJ>
   3f8f1:	paddd  %xmm2,%xmm1
   3f8f5:	paddd  %xmm4,%xmm5
   3f8f9:	paddd  %xmm0,%xmm1
   3f8fd:	paddd  %xmm0,%xmm5
   3f901:	psrld  $0x10,%xmm1
   3f906:	psrld  $0x10,%xmm5
   3f90b:	packssdw %xmm5,%xmm1
   3f90f:	psllw  $0x8,%xmm7
   3f914:	por    %xmm7,%xmm1
   3f918:	movdqa %xmm1,(%rdx)
   3f91c:	sub    $0x10,%rcx
   3f920:	add    $0x40,%rsi
   3f924:	add    $0x10,%rdi
   3f928:	add    $0x10,%rbx
   3f92c:	add    $0x10,%rdx
   3f930:	cmp    $0x10,%rcx
   3f934:	jae    3f5ff <jsimd_extbgrx_ycc_convert_sse2.columnloop>
   3f93a:	test   %rcx,%rcx
   3f93d:	jne    3f5ab <jsimd_extbgrx_ycc_convert_sse2.column_ld1>
   3f943:	pop    %rcx
   3f944:	pop    %rsi
   3f945:	pop    %rdi
   3f946:	pop    %rbx
   3f947:	pop    %rdx
   3f948:	add    $0x8,%rsi
   3f94c:	add    $0x8,%rdi
   3f950:	add    $0x8,%rbx
   3f954:	add    $0x8,%rdx
   3f958:	dec    %rax
   3f95b:	jg     3f590 <jsimd_extbgrx_ycc_convert_sse2.rowloop>

000000000003f961 <jsimd_extbgrx_ycc_convert_sse2.return>:
   3f961:	pop    %rbx
   3f962:	pop    %r15
   3f964:	pop    %r14
   3f966:	pop    %r13
   3f968:	pop    %r12
   3f96a:	pop    %r11
   3f96c:	pop    %r10
   3f96e:	mov    %rbp,%rsp
   3f971:	pop    %rsp
   3f972:	pop    %rbp
   3f973:	retq   
   3f974:	nop
   3f975:	nop
   3f976:	nop
   3f977:	nop
   3f978:	nop
   3f979:	nop
   3f97a:	nop
   3f97b:	nop
   3f97c:	nop
   3f97d:	nop
   3f97e:	nop
   3f97f:	nop

000000000003f980 <jsimd_extxbgr_ycc_convert_sse2>:
   3f980:	push   %rbp
   3f981:	mov    %rsp,%rax
   3f984:	sub    $0x4,%rsp
   3f988:	and    $0xfffffffffffffff0,%rsp
   3f98c:	mov    %rax,(%rsp)
   3f990:	mov    %rsp,%rbp
   3f993:	lea    -0x80(%rbp),%rsp
   3f997:	push   %r10
   3f999:	push   %r11
   3f99b:	push   %r12
   3f99d:	push   %r13
   3f99f:	push   %r14
   3f9a1:	push   %r15
   3f9a3:	mov    %rdi,%r10
   3f9a6:	mov    %rsi,%r11
   3f9a9:	mov    %rdx,%r12
   3f9ac:	mov    %rcx,%r13
   3f9af:	mov    %r8,%r14
   3f9b2:	mov    %r9,%r15
   3f9b5:	push   %rbx
   3f9b6:	mov    %r10d,%ecx
   3f9b9:	test   %rcx,%rcx
   3f9bc:	je     3fdc1 <jsimd_extxbgr_ycc_convert_sse2.return>
   3f9c2:	push   %rcx
   3f9c3:	mov    %r12,%rsi
   3f9c6:	mov    %r13d,%ecx
   3f9c9:	mov    (%rsi),%rdi
   3f9cc:	mov    0x8(%rsi),%rbx
   3f9d0:	mov    0x10(%rsi),%rdx
   3f9d4:	lea    (%rdi,%rcx,8),%rdi
   3f9d8:	lea    (%rbx,%rcx,8),%rbx
   3f9dc:	lea    (%rdx,%rcx,8),%rdx
   3f9e0:	pop    %rcx
   3f9e1:	mov    %r11,%rsi
   3f9e4:	mov    %r14d,%eax
   3f9e7:	test   %rax,%rax
   3f9ea:	jle    3fdc1 <jsimd_extxbgr_ycc_convert_sse2.return>

000000000003f9f0 <jsimd_extxbgr_ycc_convert_sse2.rowloop>:
   3f9f0:	push   %rdx
   3f9f1:	push   %rbx
   3f9f2:	push   %rdi
   3f9f3:	push   %rsi
   3f9f4:	push   %rcx
   3f9f5:	mov    (%rsi),%rsi
   3f9f8:	mov    (%rdi),%rdi
   3f9fb:	mov    (%rbx),%rbx
   3f9fe:	mov    (%rdx),%rdx
   3fa01:	cmp    $0x10,%rcx
   3fa05:	jae    3fa5f <jsimd_extxbgr_ycc_convert_sse2.columnloop>

000000000003fa0b <jsimd_extxbgr_ycc_convert_sse2.column_ld1>:
   3fa0b:	test   $0x1,%cl
   3fa0e:	je     3fa19 <jsimd_extxbgr_ycc_convert_sse2.column_ld2>
   3fa10:	sub    $0x1,%rcx
   3fa14:	movd   (%rsi,%rcx,4),%xmm6

000000000003fa19 <jsimd_extxbgr_ycc_convert_sse2.column_ld2>:
   3fa19:	test   $0x2,%cl
   3fa1c:	je     3fa30 <jsimd_extxbgr_ycc_convert_sse2.column_ld4>
   3fa1e:	sub    $0x2,%rcx
   3fa22:	movq   (%rsi,%rcx,4),%xmm2
   3fa27:	pslldq $0x8,%xmm6
   3fa2c:	por    %xmm2,%xmm6

000000000003fa30 <jsimd_extxbgr_ycc_convert_sse2.column_ld4>:
   3fa30:	test   $0x4,%cl
   3fa33:	je     3fa42 <jsimd_extxbgr_ycc_convert_sse2.column_ld8>
   3fa35:	sub    $0x4,%rcx
   3fa39:	movdqa %xmm6,%xmm2
   3fa3d:	movdqu (%rsi,%rcx,4),%xmm6

000000000003fa42 <jsimd_extxbgr_ycc_convert_sse2.column_ld8>:
   3fa42:	test   $0x8,%cl
   3fa45:	mov    $0x10,%ecx
   3fa4a:	je     3fa72 <jsimd_extxbgr_ycc_convert_sse2.rgb_ycc_cnv>
   3fa4c:	movdqa %xmm6,%xmm3
   3fa50:	movdqa %xmm2,%xmm1
   3fa54:	movdqu (%rsi),%xmm6
   3fa58:	movdqu 0x10(%rsi),%xmm2
   3fa5d:	jmp    3fa72 <jsimd_extxbgr_ycc_convert_sse2.rgb_ycc_cnv>

000000000003fa5f <jsimd_extxbgr_ycc_convert_sse2.columnloop>:
   3fa5f:	movdqu (%rsi),%xmm6
   3fa63:	movdqu 0x10(%rsi),%xmm2
   3fa68:	movdqu 0x20(%rsi),%xmm3
   3fa6d:	movdqu 0x30(%rsi),%xmm1

000000000003fa72 <jsimd_extxbgr_ycc_convert_sse2.rgb_ycc_cnv>:
   3fa72:	movdqa %xmm6,%xmm5
   3fa76:	punpcklbw %xmm2,%xmm6
   3fa7a:	punpckhbw %xmm2,%xmm5
   3fa7e:	movdqa %xmm3,%xmm4
   3fa82:	punpcklbw %xmm1,%xmm3
   3fa86:	punpckhbw %xmm1,%xmm4
   3fa8a:	movdqa %xmm6,%xmm7
   3fa8e:	punpcklwd %xmm3,%xmm6
   3fa92:	punpckhwd %xmm3,%xmm7
   3fa96:	movdqa %xmm5,%xmm0
   3fa9a:	punpcklwd %xmm4,%xmm5
   3fa9e:	punpckhwd %xmm4,%xmm0
   3faa2:	movdqa %xmm6,%xmm2
   3faa6:	punpcklbw %xmm5,%xmm6
   3faaa:	punpckhbw %xmm5,%xmm2
   3faae:	movdqa %xmm7,%xmm1
   3fab2:	punpcklbw %xmm0,%xmm7
   3fab6:	punpckhbw %xmm0,%xmm1
   3faba:	pxor   %xmm3,%xmm3
   3fabe:	movdqa %xmm6,%xmm4
   3fac2:	punpcklbw %xmm3,%xmm6
   3fac6:	punpckhbw %xmm3,%xmm4
   3faca:	movdqa %xmm7,%xmm5
   3face:	punpcklbw %xmm3,%xmm7
   3fad2:	punpckhbw %xmm3,%xmm5
   3fad6:	movdqa %xmm2,%xmm0
   3fada:	punpcklbw %xmm3,%xmm2
   3fade:	punpckhbw %xmm3,%xmm0
   3fae2:	punpcklbw %xmm1,%xmm3
   3fae6:	punpckhbw %xmm1,%xmm1
   3faea:	psrlw  $0x8,%xmm3
   3faef:	psrlw  $0x8,%xmm1
   3faf4:	movdqa %xmm0,-0x80(%rbp)
   3faf9:	movdqa %xmm1,-0x70(%rbp)
   3fafe:	movdqa %xmm4,-0x60(%rbp)
   3fb03:	movdqa %xmm5,-0x50(%rbp)
   3fb08:	movdqa %xmm1,%xmm6
   3fb0c:	punpcklwd %xmm3,%xmm1
   3fb10:	punpckhwd %xmm3,%xmm6
   3fb14:	movdqa %xmm1,%xmm7
   3fb18:	movdqa %xmm6,%xmm4
   3fb1c:	pmaddwd 0x1c0fc(%rip),%xmm1        # 5bc20 <PW_F0299_F0337>
   3fb24:	pmaddwd 0x1c0f4(%rip),%xmm6        # 5bc20 <PW_F0299_F0337>
   3fb2c:	pmaddwd 0x1c10c(%rip),%xmm7        # 5bc40 <PW_MF016_MF033>
   3fb34:	pmaddwd 0x1c104(%rip),%xmm4        # 5bc40 <PW_MF016_MF033>
   3fb3c:	movdqa %xmm1,-0x40(%rbp)
   3fb41:	movdqa %xmm6,-0x30(%rbp)
   3fb46:	pxor   %xmm1,%xmm1
   3fb4a:	pxor   %xmm6,%xmm6
   3fb4e:	punpcklwd %xmm5,%xmm1
   3fb52:	punpckhwd %xmm5,%xmm6
   3fb56:	psrld  $0x1,%xmm1
   3fb5b:	psrld  $0x1,%xmm6
   3fb60:	movdqa 0x1c0f8(%rip),%xmm5        # 5bc60 <PD_ONEHALFM1_CJ>
   3fb68:	paddd  %xmm1,%xmm7
   3fb6c:	paddd  %xmm6,%xmm4
   3fb70:	paddd  %xmm5,%xmm7
   3fb74:	paddd  %xmm5,%xmm4
   3fb78:	psrld  $0x10,%xmm7
   3fb7d:	psrld  $0x10,%xmm4
   3fb82:	packssdw %xmm4,%xmm7
   3fb86:	movdqa -0x60(%rbp),%xmm1
   3fb8b:	movdqa %xmm0,%xmm6
   3fb8f:	punpcklwd %xmm2,%xmm0
   3fb93:	punpckhwd %xmm2,%xmm6
   3fb97:	movdqa %xmm0,%xmm5
   3fb9b:	movdqa %xmm6,%xmm4
   3fb9f:	pmaddwd 0x1c079(%rip),%xmm0        # 5bc20 <PW_F0299_F0337>
   3fba7:	pmaddwd 0x1c071(%rip),%xmm6        # 5bc20 <PW_F0299_F0337>
   3fbaf:	pmaddwd 0x1c089(%rip),%xmm5        # 5bc40 <PW_MF016_MF033>
   3fbb7:	pmaddwd 0x1c081(%rip),%xmm4        # 5bc40 <PW_MF016_MF033>
   3fbbf:	movdqa %xmm0,-0x20(%rbp)
   3fbc4:	movdqa %xmm6,-0x10(%rbp)
   3fbc9:	pxor   %xmm0,%xmm0
   3fbcd:	pxor   %xmm6,%xmm6
   3fbd1:	punpcklwd %xmm1,%xmm0
   3fbd5:	punpckhwd %xmm1,%xmm6
   3fbd9:	psrld  $0x1,%xmm0
   3fbde:	psrld  $0x1,%xmm6
   3fbe3:	movdqa 0x1c075(%rip),%xmm1        # 5bc60 <PD_ONEHALFM1_CJ>
   3fbeb:	paddd  %xmm0,%xmm5
   3fbef:	paddd  %xmm6,%xmm4
   3fbf3:	paddd  %xmm1,%xmm5
   3fbf7:	paddd  %xmm1,%xmm4
   3fbfb:	psrld  $0x10,%xmm5
   3fc00:	psrld  $0x10,%xmm4
   3fc05:	packssdw %xmm4,%xmm5
   3fc09:	psllw  $0x8,%xmm7
   3fc0e:	por    %xmm7,%xmm5
   3fc12:	movdqa %xmm5,(%rbx)
   3fc16:	movdqa -0x50(%rbp),%xmm0
   3fc1b:	movdqa -0x60(%rbp),%xmm6
   3fc20:	movdqa -0x70(%rbp),%xmm1
   3fc25:	movdqa %xmm0,%xmm4
   3fc29:	punpcklwd %xmm3,%xmm0
   3fc2d:	punpckhwd %xmm3,%xmm4
   3fc31:	movdqa %xmm0,%xmm7
   3fc35:	movdqa %xmm4,%xmm5
   3fc39:	pmaddwd 0x1bfef(%rip),%xmm0        # 5bc30 <PW_F0114_F0250>
   3fc41:	pmaddwd 0x1bfe7(%rip),%xmm4        # 5bc30 <PW_F0114_F0250>
   3fc49:	pmaddwd 0x1bfff(%rip),%xmm7        # 5bc50 <PW_MF008_MF041>
   3fc51:	pmaddwd 0x1bff7(%rip),%xmm5        # 5bc50 <PW_MF008_MF041>
   3fc59:	movdqa 0x1c00f(%rip),%xmm3        # 5bc70 <PD_ONEHALF>
   3fc61:	paddd  -0x40(%rbp),%xmm0
   3fc66:	paddd  -0x30(%rbp),%xmm4
   3fc6b:	paddd  %xmm3,%xmm0
   3fc6f:	paddd  %xmm3,%xmm4
   3fc73:	psrld  $0x10,%xmm0
   3fc78:	psrld  $0x10,%xmm4
   3fc7d:	packssdw %xmm4,%xmm0
   3fc81:	pxor   %xmm3,%xmm3
   3fc85:	pxor   %xmm4,%xmm4
   3fc89:	punpcklwd %xmm1,%xmm3
   3fc8d:	punpckhwd %xmm1,%xmm4
   3fc91:	psrld  $0x1,%xmm3
   3fc96:	psrld  $0x1,%xmm4
   3fc9b:	movdqa 0x1bfbd(%rip),%xmm1        # 5bc60 <PD_ONEHALFM1_CJ>
   3fca3:	paddd  %xmm3,%xmm7
   3fca7:	paddd  %xmm4,%xmm5
   3fcab:	paddd  %xmm1,%xmm7
   3fcaf:	paddd  %xmm1,%xmm5
   3fcb3:	psrld  $0x10,%xmm7
   3fcb8:	psrld  $0x10,%xmm5
   3fcbd:	packssdw %xmm5,%xmm7
   3fcc1:	movdqa -0x80(%rbp),%xmm3
   3fcc6:	movdqa %xmm6,%xmm4
   3fcca:	punpcklwd %xmm2,%xmm6
   3fcce:	punpckhwd %xmm2,%xmm4
   3fcd2:	movdqa %xmm6,%xmm1
   3fcd6:	movdqa %xmm4,%xmm5
   3fcda:	pmaddwd 0x1bf4e(%rip),%xmm6        # 5bc30 <PW_F0114_F0250>
   3fce2:	pmaddwd 0x1bf46(%rip),%xmm4        # 5bc30 <PW_F0114_F0250>
   3fcea:	pmaddwd 0x1bf5e(%rip),%xmm1        # 5bc50 <PW_MF008_MF041>
   3fcf2:	pmaddwd 0x1bf56(%rip),%xmm5        # 5bc50 <PW_MF008_MF041>
   3fcfa:	movdqa 0x1bf6e(%rip),%xmm2        # 5bc70 <PD_ONEHALF>
   3fd02:	paddd  -0x20(%rbp),%xmm6
   3fd07:	paddd  -0x10(%rbp),%xmm4
   3fd0c:	paddd  %xmm2,%xmm6
   3fd10:	paddd  %xmm2,%xmm4
   3fd14:	psrld  $0x10,%xmm6
   3fd19:	psrld  $0x10,%xmm4
   3fd1e:	packssdw %xmm4,%xmm6
   3fd22:	psllw  $0x8,%xmm0
   3fd27:	por    %xmm0,%xmm6
   3fd2b:	movdqa %xmm6,(%rdi)
   3fd2f:	pxor   %xmm2,%xmm2
   3fd33:	pxor   %xmm4,%xmm4
   3fd37:	punpcklwd %xmm3,%xmm2
   3fd3b:	punpckhwd %xmm3,%xmm4
   3fd3f:	psrld  $0x1,%xmm2
   3fd44:	psrld  $0x1,%xmm4
   3fd49:	movdqa 0x1bf0f(%rip),%xmm0        # 5bc60 <PD_ONEHALFM1_CJ>
   3fd51:	paddd  %xmm2,%xmm1
   3fd55:	paddd  %xmm4,%xmm5
   3fd59:	paddd  %xmm0,%xmm1
   3fd5d:	paddd  %xmm0,%xmm5
   3fd61:	psrld  $0x10,%xmm1
   3fd66:	psrld  $0x10,%xmm5
   3fd6b:	packssdw %xmm5,%xmm1
   3fd6f:	psllw  $0x8,%xmm7
   3fd74:	por    %xmm7,%xmm1
   3fd78:	movdqa %xmm1,(%rdx)
   3fd7c:	sub    $0x10,%rcx
   3fd80:	add    $0x40,%rsi
   3fd84:	add    $0x10,%rdi
   3fd88:	add    $0x10,%rbx
   3fd8c:	add    $0x10,%rdx
   3fd90:	cmp    $0x10,%rcx
   3fd94:	jae    3fa5f <jsimd_extxbgr_ycc_convert_sse2.columnloop>
   3fd9a:	test   %rcx,%rcx
   3fd9d:	jne    3fa0b <jsimd_extxbgr_ycc_convert_sse2.column_ld1>
   3fda3:	pop    %rcx
   3fda4:	pop    %rsi
   3fda5:	pop    %rdi
   3fda6:	pop    %rbx
   3fda7:	pop    %rdx
   3fda8:	add    $0x8,%rsi
   3fdac:	add    $0x8,%rdi
   3fdb0:	add    $0x8,%rbx
   3fdb4:	add    $0x8,%rdx
   3fdb8:	dec    %rax
   3fdbb:	jg     3f9f0 <jsimd_extxbgr_ycc_convert_sse2.rowloop>

000000000003fdc1 <jsimd_extxbgr_ycc_convert_sse2.return>:
   3fdc1:	pop    %rbx
   3fdc2:	pop    %r15
   3fdc4:	pop    %r14
   3fdc6:	pop    %r13
   3fdc8:	pop    %r12
   3fdca:	pop    %r11
   3fdcc:	pop    %r10
   3fdce:	mov    %rbp,%rsp
   3fdd1:	pop    %rsp
   3fdd2:	pop    %rbp
   3fdd3:	retq   
   3fdd4:	nop
   3fdd5:	nop
   3fdd6:	nop
   3fdd7:	nop
   3fdd8:	nop
   3fdd9:	nop
   3fdda:	nop
   3fddb:	nop
   3fddc:	nop
   3fddd:	nop
   3fdde:	nop
   3fddf:	nop

000000000003fde0 <jsimd_extxrgb_ycc_convert_sse2>:
   3fde0:	push   %rbp
   3fde1:	mov    %rsp,%rax
   3fde4:	sub    $0x4,%rsp
   3fde8:	and    $0xfffffffffffffff0,%rsp
   3fdec:	mov    %rax,(%rsp)
   3fdf0:	mov    %rsp,%rbp
   3fdf3:	lea    -0x80(%rbp),%rsp
   3fdf7:	push   %r10
   3fdf9:	push   %r11
   3fdfb:	push   %r12
   3fdfd:	push   %r13
   3fdff:	push   %r14
   3fe01:	push   %r15
   3fe03:	mov    %rdi,%r10
   3fe06:	mov    %rsi,%r11
   3fe09:	mov    %rdx,%r12
   3fe0c:	mov    %rcx,%r13
   3fe0f:	mov    %r8,%r14
   3fe12:	mov    %r9,%r15
   3fe15:	push   %rbx
   3fe16:	mov    %r10d,%ecx
   3fe19:	test   %rcx,%rcx
   3fe1c:	je     40221 <jsimd_extxrgb_ycc_convert_sse2.return>
   3fe22:	push   %rcx
   3fe23:	mov    %r12,%rsi
   3fe26:	mov    %r13d,%ecx
   3fe29:	mov    (%rsi),%rdi
   3fe2c:	mov    0x8(%rsi),%rbx
   3fe30:	mov    0x10(%rsi),%rdx
   3fe34:	lea    (%rdi,%rcx,8),%rdi
   3fe38:	lea    (%rbx,%rcx,8),%rbx
   3fe3c:	lea    (%rdx,%rcx,8),%rdx
   3fe40:	pop    %rcx
   3fe41:	mov    %r11,%rsi
   3fe44:	mov    %r14d,%eax
   3fe47:	test   %rax,%rax
   3fe4a:	jle    40221 <jsimd_extxrgb_ycc_convert_sse2.return>

000000000003fe50 <jsimd_extxrgb_ycc_convert_sse2.rowloop>:
   3fe50:	push   %rdx
   3fe51:	push   %rbx
   3fe52:	push   %rdi
   3fe53:	push   %rsi
   3fe54:	push   %rcx
   3fe55:	mov    (%rsi),%rsi
   3fe58:	mov    (%rdi),%rdi
   3fe5b:	mov    (%rbx),%rbx
   3fe5e:	mov    (%rdx),%rdx
   3fe61:	cmp    $0x10,%rcx
   3fe65:	jae    3febf <jsimd_extxrgb_ycc_convert_sse2.columnloop>

000000000003fe6b <jsimd_extxrgb_ycc_convert_sse2.column_ld1>:
   3fe6b:	test   $0x1,%cl
   3fe6e:	je     3fe79 <jsimd_extxrgb_ycc_convert_sse2.column_ld2>
   3fe70:	sub    $0x1,%rcx
   3fe74:	movd   (%rsi,%rcx,4),%xmm6

000000000003fe79 <jsimd_extxrgb_ycc_convert_sse2.column_ld2>:
   3fe79:	test   $0x2,%cl
   3fe7c:	je     3fe90 <jsimd_extxrgb_ycc_convert_sse2.column_ld4>
   3fe7e:	sub    $0x2,%rcx
   3fe82:	movq   (%rsi,%rcx,4),%xmm2
   3fe87:	pslldq $0x8,%xmm6
   3fe8c:	por    %xmm2,%xmm6

000000000003fe90 <jsimd_extxrgb_ycc_convert_sse2.column_ld4>:
   3fe90:	test   $0x4,%cl
   3fe93:	je     3fea2 <jsimd_extxrgb_ycc_convert_sse2.column_ld8>
   3fe95:	sub    $0x4,%rcx
   3fe99:	movdqa %xmm6,%xmm2
   3fe9d:	movdqu (%rsi,%rcx,4),%xmm6

000000000003fea2 <jsimd_extxrgb_ycc_convert_sse2.column_ld8>:
   3fea2:	test   $0x8,%cl
   3fea5:	mov    $0x10,%ecx
   3feaa:	je     3fed2 <jsimd_extxrgb_ycc_convert_sse2.rgb_ycc_cnv>
   3feac:	movdqa %xmm6,%xmm3
   3feb0:	movdqa %xmm2,%xmm5
   3feb4:	movdqu (%rsi),%xmm6
   3feb8:	movdqu 0x10(%rsi),%xmm2
   3febd:	jmp    3fed2 <jsimd_extxrgb_ycc_convert_sse2.rgb_ycc_cnv>

000000000003febf <jsimd_extxrgb_ycc_convert_sse2.columnloop>:
   3febf:	movdqu (%rsi),%xmm6
   3fec3:	movdqu 0x10(%rsi),%xmm2
   3fec8:	movdqu 0x20(%rsi),%xmm3
   3fecd:	movdqu 0x30(%rsi),%xmm5

000000000003fed2 <jsimd_extxrgb_ycc_convert_sse2.rgb_ycc_cnv>:
   3fed2:	movdqa %xmm6,%xmm1
   3fed6:	punpcklbw %xmm2,%xmm6
   3feda:	punpckhbw %xmm2,%xmm1
   3fede:	movdqa %xmm3,%xmm0
   3fee2:	punpcklbw %xmm5,%xmm3
   3fee6:	punpckhbw %xmm5,%xmm0
   3feea:	movdqa %xmm6,%xmm7
   3feee:	punpcklwd %xmm3,%xmm6
   3fef2:	punpckhwd %xmm3,%xmm7
   3fef6:	movdqa %xmm1,%xmm4
   3fefa:	punpcklwd %xmm0,%xmm1
   3fefe:	punpckhwd %xmm0,%xmm4
   3ff02:	movdqa %xmm6,%xmm2
   3ff06:	punpcklbw %xmm1,%xmm6
   3ff0a:	punpckhbw %xmm1,%xmm2
   3ff0e:	movdqa %xmm7,%xmm5
   3ff12:	punpcklbw %xmm4,%xmm7
   3ff16:	punpckhbw %xmm4,%xmm5
   3ff1a:	pxor   %xmm3,%xmm3
   3ff1e:	movdqa %xmm6,%xmm0
   3ff22:	punpcklbw %xmm3,%xmm6
   3ff26:	punpckhbw %xmm3,%xmm0
   3ff2a:	movdqa %xmm7,%xmm1
   3ff2e:	punpcklbw %xmm3,%xmm7
   3ff32:	punpckhbw %xmm3,%xmm1
   3ff36:	movdqa %xmm2,%xmm4
   3ff3a:	punpcklbw %xmm3,%xmm2
   3ff3e:	punpckhbw %xmm3,%xmm4
   3ff42:	punpcklbw %xmm5,%xmm3
   3ff46:	punpckhbw %xmm5,%xmm5
   3ff4a:	psrlw  $0x8,%xmm3
   3ff4f:	psrlw  $0x8,%xmm5
   3ff54:	movdqa %xmm0,-0x80(%rbp)
   3ff59:	movdqa %xmm1,-0x70(%rbp)
   3ff5e:	movdqa %xmm4,-0x60(%rbp)
   3ff63:	movdqa %xmm5,-0x50(%rbp)
   3ff68:	movdqa %xmm1,%xmm6
   3ff6c:	punpcklwd %xmm3,%xmm1
   3ff70:	punpckhwd %xmm3,%xmm6
   3ff74:	movdqa %xmm1,%xmm7
   3ff78:	movdqa %xmm6,%xmm4
   3ff7c:	pmaddwd 0x1bc9c(%rip),%xmm1        # 5bc20 <PW_F0299_F0337>
   3ff84:	pmaddwd 0x1bc94(%rip),%xmm6        # 5bc20 <PW_F0299_F0337>
   3ff8c:	pmaddwd 0x1bcac(%rip),%xmm7        # 5bc40 <PW_MF016_MF033>
   3ff94:	pmaddwd 0x1bca4(%rip),%xmm4        # 5bc40 <PW_MF016_MF033>
   3ff9c:	movdqa %xmm1,-0x40(%rbp)
   3ffa1:	movdqa %xmm6,-0x30(%rbp)
   3ffa6:	pxor   %xmm1,%xmm1
   3ffaa:	pxor   %xmm6,%xmm6
   3ffae:	punpcklwd %xmm5,%xmm1
   3ffb2:	punpckhwd %xmm5,%xmm6
   3ffb6:	psrld  $0x1,%xmm1
   3ffbb:	psrld  $0x1,%xmm6
   3ffc0:	movdqa 0x1bc98(%rip),%xmm5        # 5bc60 <PD_ONEHALFM1_CJ>
   3ffc8:	paddd  %xmm1,%xmm7
   3ffcc:	paddd  %xmm6,%xmm4
   3ffd0:	paddd  %xmm5,%xmm7
   3ffd4:	paddd  %xmm5,%xmm4
   3ffd8:	psrld  $0x10,%xmm7
   3ffdd:	psrld  $0x10,%xmm4
   3ffe2:	packssdw %xmm4,%xmm7
   3ffe6:	movdqa -0x60(%rbp),%xmm1
   3ffeb:	movdqa %xmm0,%xmm6
   3ffef:	punpcklwd %xmm2,%xmm0
   3fff3:	punpckhwd %xmm2,%xmm6
   3fff7:	movdqa %xmm0,%xmm5
   3fffb:	movdqa %xmm6,%xmm4
   3ffff:	pmaddwd 0x1bc19(%rip),%xmm0        # 5bc20 <PW_F0299_F0337>
   40007:	pmaddwd 0x1bc11(%rip),%xmm6        # 5bc20 <PW_F0299_F0337>
   4000f:	pmaddwd 0x1bc29(%rip),%xmm5        # 5bc40 <PW_MF016_MF033>
   40017:	pmaddwd 0x1bc21(%rip),%xmm4        # 5bc40 <PW_MF016_MF033>
   4001f:	movdqa %xmm0,-0x20(%rbp)
   40024:	movdqa %xmm6,-0x10(%rbp)
   40029:	pxor   %xmm0,%xmm0
   4002d:	pxor   %xmm6,%xmm6
   40031:	punpcklwd %xmm1,%xmm0
   40035:	punpckhwd %xmm1,%xmm6
   40039:	psrld  $0x1,%xmm0
   4003e:	psrld  $0x1,%xmm6
   40043:	movdqa 0x1bc15(%rip),%xmm1        # 5bc60 <PD_ONEHALFM1_CJ>
   4004b:	paddd  %xmm0,%xmm5
   4004f:	paddd  %xmm6,%xmm4
   40053:	paddd  %xmm1,%xmm5
   40057:	paddd  %xmm1,%xmm4
   4005b:	psrld  $0x10,%xmm5
   40060:	psrld  $0x10,%xmm4
   40065:	packssdw %xmm4,%xmm5
   40069:	psllw  $0x8,%xmm7
   4006e:	por    %xmm7,%xmm5
   40072:	movdqa %xmm5,(%rbx)
   40076:	movdqa -0x50(%rbp),%xmm0
   4007b:	movdqa -0x60(%rbp),%xmm6
   40080:	movdqa -0x70(%rbp),%xmm1
   40085:	movdqa %xmm0,%xmm4
   40089:	punpcklwd %xmm3,%xmm0
   4008d:	punpckhwd %xmm3,%xmm4
   40091:	movdqa %xmm0,%xmm7
   40095:	movdqa %xmm4,%xmm5
   40099:	pmaddwd 0x1bb8f(%rip),%xmm0        # 5bc30 <PW_F0114_F0250>
   400a1:	pmaddwd 0x1bb87(%rip),%xmm4        # 5bc30 <PW_F0114_F0250>
   400a9:	pmaddwd 0x1bb9f(%rip),%xmm7        # 5bc50 <PW_MF008_MF041>
   400b1:	pmaddwd 0x1bb97(%rip),%xmm5        # 5bc50 <PW_MF008_MF041>
   400b9:	movdqa 0x1bbaf(%rip),%xmm3        # 5bc70 <PD_ONEHALF>
   400c1:	paddd  -0x40(%rbp),%xmm0
   400c6:	paddd  -0x30(%rbp),%xmm4
   400cb:	paddd  %xmm3,%xmm0
   400cf:	paddd  %xmm3,%xmm4
   400d3:	psrld  $0x10,%xmm0
   400d8:	psrld  $0x10,%xmm4
   400dd:	packssdw %xmm4,%xmm0
   400e1:	pxor   %xmm3,%xmm3
   400e5:	pxor   %xmm4,%xmm4
   400e9:	punpcklwd %xmm1,%xmm3
   400ed:	punpckhwd %xmm1,%xmm4
   400f1:	psrld  $0x1,%xmm3
   400f6:	psrld  $0x1,%xmm4
   400fb:	movdqa 0x1bb5d(%rip),%xmm1        # 5bc60 <PD_ONEHALFM1_CJ>
   40103:	paddd  %xmm3,%xmm7
   40107:	paddd  %xmm4,%xmm5
   4010b:	paddd  %xmm1,%xmm7
   4010f:	paddd  %xmm1,%xmm5
   40113:	psrld  $0x10,%xmm7
   40118:	psrld  $0x10,%xmm5
   4011d:	packssdw %xmm5,%xmm7
   40121:	movdqa -0x80(%rbp),%xmm3
   40126:	movdqa %xmm6,%xmm4
   4012a:	punpcklwd %xmm2,%xmm6
   4012e:	punpckhwd %xmm2,%xmm4
   40132:	movdqa %xmm6,%xmm1
   40136:	movdqa %xmm4,%xmm5
   4013a:	pmaddwd 0x1baee(%rip),%xmm6        # 5bc30 <PW_F0114_F0250>
   40142:	pmaddwd 0x1bae6(%rip),%xmm4        # 5bc30 <PW_F0114_F0250>
   4014a:	pmaddwd 0x1bafe(%rip),%xmm1        # 5bc50 <PW_MF008_MF041>
   40152:	pmaddwd 0x1baf6(%rip),%xmm5        # 5bc50 <PW_MF008_MF041>
   4015a:	movdqa 0x1bb0e(%rip),%xmm2        # 5bc70 <PD_ONEHALF>
   40162:	paddd  -0x20(%rbp),%xmm6
   40167:	paddd  -0x10(%rbp),%xmm4
   4016c:	paddd  %xmm2,%xmm6
   40170:	paddd  %xmm2,%xmm4
   40174:	psrld  $0x10,%xmm6
   40179:	psrld  $0x10,%xmm4
   4017e:	packssdw %xmm4,%xmm6
   40182:	psllw  $0x8,%xmm0
   40187:	por    %xmm0,%xmm6
   4018b:	movdqa %xmm6,(%rdi)
   4018f:	pxor   %xmm2,%xmm2
   40193:	pxor   %xmm4,%xmm4
   40197:	punpcklwd %xmm3,%xmm2
   4019b:	punpckhwd %xmm3,%xmm4
   4019f:	psrld  $0x1,%xmm2
   401a4:	psrld  $0x1,%xmm4
   401a9:	movdqa 0x1baaf(%rip),%xmm0        # 5bc60 <PD_ONEHALFM1_CJ>
   401b1:	paddd  %xmm2,%xmm1
   401b5:	paddd  %xmm4,%xmm5
   401b9:	paddd  %xmm0,%xmm1
   401bd:	paddd  %xmm0,%xmm5
   401c1:	psrld  $0x10,%xmm1
   401c6:	psrld  $0x10,%xmm5
   401cb:	packssdw %xmm5,%xmm1
   401cf:	psllw  $0x8,%xmm7
   401d4:	por    %xmm7,%xmm1
   401d8:	movdqa %xmm1,(%rdx)
   401dc:	sub    $0x10,%rcx
   401e0:	add    $0x40,%rsi
   401e4:	add    $0x10,%rdi
   401e8:	add    $0x10,%rbx
   401ec:	add    $0x10,%rdx
   401f0:	cmp    $0x10,%rcx
   401f4:	jae    3febf <jsimd_extxrgb_ycc_convert_sse2.columnloop>
   401fa:	test   %rcx,%rcx
   401fd:	jne    3fe6b <jsimd_extxrgb_ycc_convert_sse2.column_ld1>
   40203:	pop    %rcx
   40204:	pop    %rsi
   40205:	pop    %rdi
   40206:	pop    %rbx
   40207:	pop    %rdx
   40208:	add    $0x8,%rsi
   4020c:	add    $0x8,%rdi
   40210:	add    $0x8,%rbx
   40214:	add    $0x8,%rdx
   40218:	dec    %rax
   4021b:	jg     3fe50 <jsimd_extxrgb_ycc_convert_sse2.rowloop>

0000000000040221 <jsimd_extxrgb_ycc_convert_sse2.return>:
   40221:	pop    %rbx
   40222:	pop    %r15
   40224:	pop    %r14
   40226:	pop    %r13
   40228:	pop    %r12
   4022a:	pop    %r11
   4022c:	pop    %r10
   4022e:	mov    %rbp,%rsp
   40231:	pop    %rsp
   40232:	pop    %rbp
   40233:	retq   
   40234:	nop
   40235:	nop
   40236:	nop
   40237:	nop
   40238:	nop
   40239:	nop
   4023a:	nop
   4023b:	nop
   4023c:	nop
   4023d:	nop
   4023e:	nop
   4023f:	nop

0000000000040240 <jsimd_rgb_gray_convert_sse2>:
   40240:	push   %rbp
   40241:	mov    %rsp,%rax
   40244:	sub    $0x4,%rsp
   40248:	and    $0xfffffffffffffff0,%rsp
   4024c:	mov    %rax,(%rsp)
   40250:	mov    %rsp,%rbp
   40253:	lea    -0x20(%rbp),%rsp
   40257:	push   %r10
   40259:	push   %r11
   4025b:	push   %r12
   4025d:	push   %r13
   4025f:	push   %r14
   40261:	push   %r15
   40263:	mov    %rdi,%r10
   40266:	mov    %rsi,%r11
   40269:	mov    %rdx,%r12
   4026c:	mov    %rcx,%r13
   4026f:	mov    %r8,%r14
   40272:	mov    %r9,%r15
   40275:	push   %rbx
   40276:	mov    %r10d,%ecx
   40279:	test   %rcx,%rcx
   4027c:	je     404e4 <jsimd_rgb_gray_convert_sse2.return>
   40282:	push   %rcx
   40283:	mov    %r12,%rsi
   40286:	mov    %r13d,%ecx
   40289:	mov    (%rsi),%rdi
   4028c:	lea    (%rdi,%rcx,8),%rdi
   40290:	pop    %rcx
   40291:	mov    %r11,%rsi
   40294:	mov    %r14d,%eax
   40297:	test   %rax,%rax
   4029a:	jle    404e4 <jsimd_rgb_gray_convert_sse2.return>

00000000000402a0 <jsimd_rgb_gray_convert_sse2.rowloop>:
   402a0:	push   %rdi
   402a1:	push   %rsi
   402a2:	push   %rcx
   402a3:	mov    (%rsi),%rsi
   402a6:	mov    (%rdi),%rdi
   402a9:	cmp    $0x10,%rcx
   402ad:	jae    4033d <jsimd_rgb_gray_convert_sse2.columnloop>

00000000000402b3 <jsimd_rgb_gray_convert_sse2.column_ld1>:
   402b3:	push   %rax
   402b4:	push   %rdx
   402b5:	lea    (%rcx,%rcx,2),%rcx
   402b9:	test   $0x1,%cl
   402bc:	je     402c7 <jsimd_rgb_gray_convert_sse2.column_ld2>
   402be:	sub    $0x1,%rcx
   402c2:	movzbq (%rsi,%rcx,1),%rax

00000000000402c7 <jsimd_rgb_gray_convert_sse2.column_ld2>:
   402c7:	test   $0x2,%cl
   402ca:	je     402dc <jsimd_rgb_gray_convert_sse2.column_ld4>
   402cc:	sub    $0x2,%rcx
   402d0:	movzwq (%rsi,%rcx,1),%rdx
   402d5:	shl    $0x10,%rax
   402d9:	or     %rdx,%rax

00000000000402dc <jsimd_rgb_gray_convert_sse2.column_ld4>:
   402dc:	movd   %eax,%xmm0
   402e0:	pop    %rdx
   402e1:	pop    %rax
   402e2:	test   $0x4,%cl
   402e5:	je     402f9 <jsimd_rgb_gray_convert_sse2.column_ld8>
   402e7:	sub    $0x4,%rcx
   402eb:	movd   (%rsi,%rcx,1),%xmm5
   402f0:	pslldq $0x4,%xmm0
   402f5:	por    %xmm5,%xmm0

00000000000402f9 <jsimd_rgb_gray_convert_sse2.column_ld8>:
   402f9:	test   $0x8,%cl
   402fc:	je     40310 <jsimd_rgb_gray_convert_sse2.column_ld16>
   402fe:	sub    $0x8,%rcx
   40302:	movq   (%rsi,%rcx,1),%xmm1
   40307:	pslldq $0x8,%xmm0
   4030c:	por    %xmm1,%xmm0

0000000000040310 <jsimd_rgb_gray_convert_sse2.column_ld16>:
   40310:	test   $0x10,%cl
   40313:	je     40324 <jsimd_rgb_gray_convert_sse2.column_ld32>
   40315:	movdqa %xmm0,%xmm5
   40319:	movdqu (%rsi),%xmm0
   4031d:	mov    $0x10,%ecx
   40322:	jmp    4034b <jsimd_rgb_gray_convert_sse2.rgb_gray_cnv>

0000000000040324 <jsimd_rgb_gray_convert_sse2.column_ld32>:
   40324:	test   $0x20,%cl
   40327:	mov    $0x10,%ecx
   4032c:	je     4034b <jsimd_rgb_gray_convert_sse2.rgb_gray_cnv>
   4032e:	movdqa %xmm0,%xmm1
   40332:	movdqu (%rsi),%xmm0
   40336:	movdqu 0x10(%rsi),%xmm5
   4033b:	jmp    4034b <jsimd_rgb_gray_convert_sse2.rgb_gray_cnv>

000000000004033d <jsimd_rgb_gray_convert_sse2.columnloop>:
   4033d:	movdqu (%rsi),%xmm0
   40341:	movdqu 0x10(%rsi),%xmm5
   40346:	movdqu 0x20(%rsi),%xmm1

000000000004034b <jsimd_rgb_gray_convert_sse2.rgb_gray_cnv>:
   4034b:	movdqa %xmm0,%xmm6
   4034f:	pslldq $0x8,%xmm0
   40354:	psrldq $0x8,%xmm6
   40359:	punpckhbw %xmm5,%xmm0
   4035d:	pslldq $0x8,%xmm5
   40362:	punpcklbw %xmm1,%xmm6
   40366:	punpckhbw %xmm1,%xmm5
   4036a:	movdqa %xmm0,%xmm3
   4036e:	pslldq $0x8,%xmm0
   40373:	psrldq $0x8,%xmm3
   40378:	punpckhbw %xmm6,%xmm0
   4037c:	pslldq $0x8,%xmm6
   40381:	punpcklbw %xmm5,%xmm3
   40385:	punpckhbw %xmm5,%xmm6
   40389:	movdqa %xmm0,%xmm4
   4038d:	pslldq $0x8,%xmm0
   40392:	psrldq $0x8,%xmm4
   40397:	punpckhbw %xmm3,%xmm0
   4039b:	pslldq $0x8,%xmm3
   403a0:	punpcklbw %xmm6,%xmm4
   403a4:	punpckhbw %xmm6,%xmm3
   403a8:	pxor   %xmm7,%xmm7
   403ac:	movdqa %xmm0,%xmm2
   403b0:	punpcklbw %xmm7,%xmm0
   403b4:	punpckhbw %xmm7,%xmm2
   403b8:	movdqa %xmm4,%xmm1
   403bc:	punpcklbw %xmm7,%xmm4
   403c0:	punpckhbw %xmm7,%xmm1
   403c4:	movdqa %xmm3,%xmm5
   403c8:	punpcklbw %xmm7,%xmm3
   403cc:	punpckhbw %xmm7,%xmm5
   403d0:	movdqa %xmm1,%xmm6
   403d4:	punpcklwd %xmm3,%xmm1
   403d8:	punpckhwd %xmm3,%xmm6
   403dc:	pmaddwd 0x1b89c(%rip),%xmm1        # 5bc80 <PW_F0299_F0337>
   403e4:	pmaddwd 0x1b894(%rip),%xmm6        # 5bc80 <PW_F0299_F0337>
   403ec:	movdqa %xmm6,%xmm7
   403f0:	movdqa %xmm0,%xmm6
   403f4:	punpcklwd %xmm2,%xmm0
   403f8:	punpckhwd %xmm2,%xmm6
   403fc:	pmaddwd 0x1b87c(%rip),%xmm0        # 5bc80 <PW_F0299_F0337>
   40404:	pmaddwd 0x1b874(%rip),%xmm6        # 5bc80 <PW_F0299_F0337>
   4040c:	movdqa %xmm0,-0x20(%rbp)
   40411:	movdqa %xmm6,-0x10(%rbp)
   40416:	movdqa %xmm5,%xmm0
   4041a:	movdqa %xmm4,%xmm6
   4041e:	movdqa %xmm0,%xmm4
   40422:	punpcklwd %xmm3,%xmm0
   40426:	punpckhwd %xmm3,%xmm4
   4042a:	pmaddwd 0x1b85e(%rip),%xmm0        # 5bc90 <PW_F0114_F0250>
   40432:	pmaddwd 0x1b856(%rip),%xmm4        # 5bc90 <PW_F0114_F0250>
   4043a:	movdqa 0x1b85e(%rip),%xmm3        # 5bca0 <PD_ONEHALF>
   40442:	paddd  %xmm1,%xmm0
   40446:	paddd  %xmm7,%xmm4
   4044a:	paddd  %xmm3,%xmm0
   4044e:	paddd  %xmm3,%xmm4
   40452:	psrld  $0x10,%xmm0
   40457:	psrld  $0x10,%xmm4
   4045c:	packssdw %xmm4,%xmm0
   40460:	movdqa %xmm6,%xmm4
   40464:	punpcklwd %xmm2,%xmm6
   40468:	punpckhwd %xmm2,%xmm4
   4046c:	pmaddwd 0x1b81c(%rip),%xmm6        # 5bc90 <PW_F0114_F0250>
   40474:	pmaddwd 0x1b814(%rip),%xmm4        # 5bc90 <PW_F0114_F0250>
   4047c:	movdqa 0x1b81c(%rip),%xmm2        # 5bca0 <PD_ONEHALF>
   40484:	paddd  -0x20(%rbp),%xmm6
   40489:	paddd  -0x10(%rbp),%xmm4
   4048e:	paddd  %xmm2,%xmm6
   40492:	paddd  %xmm2,%xmm4
   40496:	psrld  $0x10,%xmm6
   4049b:	psrld  $0x10,%xmm4
   404a0:	packssdw %xmm4,%xmm6
   404a4:	psllw  $0x8,%xmm0
   404a9:	por    %xmm0,%xmm6
   404ad:	movdqa %xmm6,(%rdi)
   404b1:	sub    $0x10,%rcx
   404b5:	add    $0x30,%rsi
   404b9:	add    $0x10,%rdi
   404bd:	cmp    $0x10,%rcx
   404c1:	jae    4033d <jsimd_rgb_gray_convert_sse2.columnloop>
   404c7:	test   %rcx,%rcx
   404ca:	jne    402b3 <jsimd_rgb_gray_convert_sse2.column_ld1>
   404d0:	pop    %rcx
   404d1:	pop    %rsi
   404d2:	pop    %rdi
   404d3:	add    $0x8,%rsi
   404d7:	add    $0x8,%rdi
   404db:	dec    %rax
   404de:	jg     402a0 <jsimd_rgb_gray_convert_sse2.rowloop>

00000000000404e4 <jsimd_rgb_gray_convert_sse2.return>:
   404e4:	pop    %rbx
   404e5:	pop    %r15
   404e7:	pop    %r14
   404e9:	pop    %r13
   404eb:	pop    %r12
   404ed:	pop    %r11
   404ef:	pop    %r10
   404f1:	mov    %rbp,%rsp
   404f4:	pop    %rsp
   404f5:	pop    %rbp
   404f6:	retq   
   404f7:	nop
   404f8:	nop
   404f9:	nop
   404fa:	nop
   404fb:	nop
   404fc:	nop
   404fd:	nop
   404fe:	nop
   404ff:	nop

0000000000040500 <jsimd_extrgb_gray_convert_sse2>:
   40500:	push   %rbp
   40501:	mov    %rsp,%rax
   40504:	sub    $0x4,%rsp
   40508:	and    $0xfffffffffffffff0,%rsp
   4050c:	mov    %rax,(%rsp)
   40510:	mov    %rsp,%rbp
   40513:	lea    -0x20(%rbp),%rsp
   40517:	push   %r10
   40519:	push   %r11
   4051b:	push   %r12
   4051d:	push   %r13
   4051f:	push   %r14
   40521:	push   %r15
   40523:	mov    %rdi,%r10
   40526:	mov    %rsi,%r11
   40529:	mov    %rdx,%r12
   4052c:	mov    %rcx,%r13
   4052f:	mov    %r8,%r14
   40532:	mov    %r9,%r15
   40535:	push   %rbx
   40536:	mov    %r10d,%ecx
   40539:	test   %rcx,%rcx
   4053c:	je     407a4 <jsimd_extrgb_gray_convert_sse2.return>
   40542:	push   %rcx
   40543:	mov    %r12,%rsi
   40546:	mov    %r13d,%ecx
   40549:	mov    (%rsi),%rdi
   4054c:	lea    (%rdi,%rcx,8),%rdi
   40550:	pop    %rcx
   40551:	mov    %r11,%rsi
   40554:	mov    %r14d,%eax
   40557:	test   %rax,%rax
   4055a:	jle    407a4 <jsimd_extrgb_gray_convert_sse2.return>

0000000000040560 <jsimd_extrgb_gray_convert_sse2.rowloop>:
   40560:	push   %rdi
   40561:	push   %rsi
   40562:	push   %rcx
   40563:	mov    (%rsi),%rsi
   40566:	mov    (%rdi),%rdi
   40569:	cmp    $0x10,%rcx
   4056d:	jae    405fd <jsimd_extrgb_gray_convert_sse2.columnloop>

0000000000040573 <jsimd_extrgb_gray_convert_sse2.column_ld1>:
   40573:	push   %rax
   40574:	push   %rdx
   40575:	lea    (%rcx,%rcx,2),%rcx
   40579:	test   $0x1,%cl
   4057c:	je     40587 <jsimd_extrgb_gray_convert_sse2.column_ld2>
   4057e:	sub    $0x1,%rcx
   40582:	movzbq (%rsi,%rcx,1),%rax

0000000000040587 <jsimd_extrgb_gray_convert_sse2.column_ld2>:
   40587:	test   $0x2,%cl
   4058a:	je     4059c <jsimd_extrgb_gray_convert_sse2.column_ld4>
   4058c:	sub    $0x2,%rcx
   40590:	movzwq (%rsi,%rcx,1),%rdx
   40595:	shl    $0x10,%rax
   40599:	or     %rdx,%rax

000000000004059c <jsimd_extrgb_gray_convert_sse2.column_ld4>:
   4059c:	movd   %eax,%xmm0
   405a0:	pop    %rdx
   405a1:	pop    %rax
   405a2:	test   $0x4,%cl
   405a5:	je     405b9 <jsimd_extrgb_gray_convert_sse2.column_ld8>
   405a7:	sub    $0x4,%rcx
   405ab:	movd   (%rsi,%rcx,1),%xmm5
   405b0:	pslldq $0x4,%xmm0
   405b5:	por    %xmm5,%xmm0

00000000000405b9 <jsimd_extrgb_gray_convert_sse2.column_ld8>:
   405b9:	test   $0x8,%cl
   405bc:	je     405d0 <jsimd_extrgb_gray_convert_sse2.column_ld16>
   405be:	sub    $0x8,%rcx
   405c2:	movq   (%rsi,%rcx,1),%xmm1
   405c7:	pslldq $0x8,%xmm0
   405cc:	por    %xmm1,%xmm0

00000000000405d0 <jsimd_extrgb_gray_convert_sse2.column_ld16>:
   405d0:	test   $0x10,%cl
   405d3:	je     405e4 <jsimd_extrgb_gray_convert_sse2.column_ld32>
   405d5:	movdqa %xmm0,%xmm5
   405d9:	movdqu (%rsi),%xmm0
   405dd:	mov    $0x10,%ecx
   405e2:	jmp    4060b <jsimd_extrgb_gray_convert_sse2.rgb_gray_cnv>

00000000000405e4 <jsimd_extrgb_gray_convert_sse2.column_ld32>:
   405e4:	test   $0x20,%cl
   405e7:	mov    $0x10,%ecx
   405ec:	je     4060b <jsimd_extrgb_gray_convert_sse2.rgb_gray_cnv>
   405ee:	movdqa %xmm0,%xmm1
   405f2:	movdqu (%rsi),%xmm0
   405f6:	movdqu 0x10(%rsi),%xmm5
   405fb:	jmp    4060b <jsimd_extrgb_gray_convert_sse2.rgb_gray_cnv>

00000000000405fd <jsimd_extrgb_gray_convert_sse2.columnloop>:
   405fd:	movdqu (%rsi),%xmm0
   40601:	movdqu 0x10(%rsi),%xmm5
   40606:	movdqu 0x20(%rsi),%xmm1

000000000004060b <jsimd_extrgb_gray_convert_sse2.rgb_gray_cnv>:
   4060b:	movdqa %xmm0,%xmm6
   4060f:	pslldq $0x8,%xmm0
   40614:	psrldq $0x8,%xmm6
   40619:	punpckhbw %xmm5,%xmm0
   4061d:	pslldq $0x8,%xmm5
   40622:	punpcklbw %xmm1,%xmm6
   40626:	punpckhbw %xmm1,%xmm5
   4062a:	movdqa %xmm0,%xmm3
   4062e:	pslldq $0x8,%xmm0
   40633:	psrldq $0x8,%xmm3
   40638:	punpckhbw %xmm6,%xmm0
   4063c:	pslldq $0x8,%xmm6
   40641:	punpcklbw %xmm5,%xmm3
   40645:	punpckhbw %xmm5,%xmm6
   40649:	movdqa %xmm0,%xmm4
   4064d:	pslldq $0x8,%xmm0
   40652:	psrldq $0x8,%xmm4
   40657:	punpckhbw %xmm3,%xmm0
   4065b:	pslldq $0x8,%xmm3
   40660:	punpcklbw %xmm6,%xmm4
   40664:	punpckhbw %xmm6,%xmm3
   40668:	pxor   %xmm7,%xmm7
   4066c:	movdqa %xmm0,%xmm2
   40670:	punpcklbw %xmm7,%xmm0
   40674:	punpckhbw %xmm7,%xmm2
   40678:	movdqa %xmm4,%xmm1
   4067c:	punpcklbw %xmm7,%xmm4
   40680:	punpckhbw %xmm7,%xmm1
   40684:	movdqa %xmm3,%xmm5
   40688:	punpcklbw %xmm7,%xmm3
   4068c:	punpckhbw %xmm7,%xmm5
   40690:	movdqa %xmm1,%xmm6
   40694:	punpcklwd %xmm3,%xmm1
   40698:	punpckhwd %xmm3,%xmm6
   4069c:	pmaddwd 0x1b5dc(%rip),%xmm1        # 5bc80 <PW_F0299_F0337>
   406a4:	pmaddwd 0x1b5d4(%rip),%xmm6        # 5bc80 <PW_F0299_F0337>
   406ac:	movdqa %xmm6,%xmm7
   406b0:	movdqa %xmm0,%xmm6
   406b4:	punpcklwd %xmm2,%xmm0
   406b8:	punpckhwd %xmm2,%xmm6
   406bc:	pmaddwd 0x1b5bc(%rip),%xmm0        # 5bc80 <PW_F0299_F0337>
   406c4:	pmaddwd 0x1b5b4(%rip),%xmm6        # 5bc80 <PW_F0299_F0337>
   406cc:	movdqa %xmm0,-0x20(%rbp)
   406d1:	movdqa %xmm6,-0x10(%rbp)
   406d6:	movdqa %xmm5,%xmm0
   406da:	movdqa %xmm4,%xmm6
   406de:	movdqa %xmm0,%xmm4
   406e2:	punpcklwd %xmm3,%xmm0
   406e6:	punpckhwd %xmm3,%xmm4
   406ea:	pmaddwd 0x1b59e(%rip),%xmm0        # 5bc90 <PW_F0114_F0250>
   406f2:	pmaddwd 0x1b596(%rip),%xmm4        # 5bc90 <PW_F0114_F0250>
   406fa:	movdqa 0x1b59e(%rip),%xmm3        # 5bca0 <PD_ONEHALF>
   40702:	paddd  %xmm1,%xmm0
   40706:	paddd  %xmm7,%xmm4
   4070a:	paddd  %xmm3,%xmm0
   4070e:	paddd  %xmm3,%xmm4
   40712:	psrld  $0x10,%xmm0
   40717:	psrld  $0x10,%xmm4
   4071c:	packssdw %xmm4,%xmm0
   40720:	movdqa %xmm6,%xmm4
   40724:	punpcklwd %xmm2,%xmm6
   40728:	punpckhwd %xmm2,%xmm4
   4072c:	pmaddwd 0x1b55c(%rip),%xmm6        # 5bc90 <PW_F0114_F0250>
   40734:	pmaddwd 0x1b554(%rip),%xmm4        # 5bc90 <PW_F0114_F0250>
   4073c:	movdqa 0x1b55c(%rip),%xmm2        # 5bca0 <PD_ONEHALF>
   40744:	paddd  -0x20(%rbp),%xmm6
   40749:	paddd  -0x10(%rbp),%xmm4
   4074e:	paddd  %xmm2,%xmm6
   40752:	paddd  %xmm2,%xmm4
   40756:	psrld  $0x10,%xmm6
   4075b:	psrld  $0x10,%xmm4
   40760:	packssdw %xmm4,%xmm6
   40764:	psllw  $0x8,%xmm0
   40769:	por    %xmm0,%xmm6
   4076d:	movdqa %xmm6,(%rdi)
   40771:	sub    $0x10,%rcx
   40775:	add    $0x30,%rsi
   40779:	add    $0x10,%rdi
   4077d:	cmp    $0x10,%rcx
   40781:	jae    405fd <jsimd_extrgb_gray_convert_sse2.columnloop>
   40787:	test   %rcx,%rcx
   4078a:	jne    40573 <jsimd_extrgb_gray_convert_sse2.column_ld1>
   40790:	pop    %rcx
   40791:	pop    %rsi
   40792:	pop    %rdi
   40793:	add    $0x8,%rsi
   40797:	add    $0x8,%rdi
   4079b:	dec    %rax
   4079e:	jg     40560 <jsimd_extrgb_gray_convert_sse2.rowloop>

00000000000407a4 <jsimd_extrgb_gray_convert_sse2.return>:
   407a4:	pop    %rbx
   407a5:	pop    %r15
   407a7:	pop    %r14
   407a9:	pop    %r13
   407ab:	pop    %r12
   407ad:	pop    %r11
   407af:	pop    %r10
   407b1:	mov    %rbp,%rsp
   407b4:	pop    %rsp
   407b5:	pop    %rbp
   407b6:	retq   
   407b7:	nop
   407b8:	nop
   407b9:	nop
   407ba:	nop
   407bb:	nop
   407bc:	nop
   407bd:	nop
   407be:	nop
   407bf:	nop

00000000000407c0 <jsimd_extrgbx_gray_convert_sse2>:
   407c0:	push   %rbp
   407c1:	mov    %rsp,%rax
   407c4:	sub    $0x4,%rsp
   407c8:	and    $0xfffffffffffffff0,%rsp
   407cc:	mov    %rax,(%rsp)
   407d0:	mov    %rsp,%rbp
   407d3:	lea    -0x20(%rbp),%rsp
   407d7:	push   %r10
   407d9:	push   %r11
   407db:	push   %r12
   407dd:	push   %r13
   407df:	push   %r14
   407e1:	push   %r15
   407e3:	mov    %rdi,%r10
   407e6:	mov    %rsi,%r11
   407e9:	mov    %rdx,%r12
   407ec:	mov    %rcx,%r13
   407ef:	mov    %r8,%r14
   407f2:	mov    %r9,%r15
   407f5:	push   %rbx
   407f6:	mov    %r10d,%ecx
   407f9:	test   %rcx,%rcx
   407fc:	je     40a30 <jsimd_extrgbx_gray_convert_sse2.return>
   40802:	push   %rcx
   40803:	mov    %r12,%rsi
   40806:	mov    %r13d,%ecx
   40809:	mov    (%rsi),%rdi
   4080c:	lea    (%rdi,%rcx,8),%rdi
   40810:	pop    %rcx
   40811:	mov    %r11,%rsi
   40814:	mov    %r14d,%eax
   40817:	test   %rax,%rax
   4081a:	jle    40a30 <jsimd_extrgbx_gray_convert_sse2.return>

0000000000040820 <jsimd_extrgbx_gray_convert_sse2.rowloop>:
   40820:	push   %rdi
   40821:	push   %rsi
   40822:	push   %rcx
   40823:	mov    (%rsi),%rsi
   40826:	mov    (%rdi),%rdi
   40829:	cmp    $0x10,%rcx
   4082d:	jae    40887 <jsimd_extrgbx_gray_convert_sse2.columnloop>

0000000000040833 <jsimd_extrgbx_gray_convert_sse2.column_ld1>:
   40833:	test   $0x1,%cl
   40836:	je     40841 <jsimd_extrgbx_gray_convert_sse2.column_ld2>
   40838:	sub    $0x1,%rcx
   4083c:	movd   (%rsi,%rcx,4),%xmm0

0000000000040841 <jsimd_extrgbx_gray_convert_sse2.column_ld2>:
   40841:	test   $0x2,%cl
   40844:	je     40858 <jsimd_extrgbx_gray_convert_sse2.column_ld4>
   40846:	sub    $0x2,%rcx
   4084a:	movq   (%rsi,%rcx,4),%xmm4
   4084f:	pslldq $0x8,%xmm0
   40854:	por    %xmm4,%xmm0

0000000000040858 <jsimd_extrgbx_gray_convert_sse2.column_ld4>:
   40858:	test   $0x4,%cl
   4085b:	je     4086a <jsimd_extrgbx_gray_convert_sse2.column_ld8>
   4085d:	sub    $0x4,%rcx
   40861:	movdqa %xmm0,%xmm4
   40865:	movdqu (%rsi,%rcx,4),%xmm0

000000000004086a <jsimd_extrgbx_gray_convert_sse2.column_ld8>:
   4086a:	test   $0x8,%cl
   4086d:	mov    $0x10,%ecx
   40872:	je     4089a <jsimd_extrgbx_gray_convert_sse2.rgb_gray_cnv>
   40874:	movdqa %xmm0,%xmm5
   40878:	movdqa %xmm4,%xmm7
   4087c:	movdqu (%rsi),%xmm0
   40880:	movdqu 0x10(%rsi),%xmm4
   40885:	jmp    4089a <jsimd_extrgbx_gray_convert_sse2.rgb_gray_cnv>

0000000000040887 <jsimd_extrgbx_gray_convert_sse2.columnloop>:
   40887:	movdqu (%rsi),%xmm0
   4088b:	movdqu 0x10(%rsi),%xmm4
   40890:	movdqu 0x20(%rsi),%xmm5
   40895:	movdqu 0x30(%rsi),%xmm7

000000000004089a <jsimd_extrgbx_gray_convert_sse2.rgb_gray_cnv>:
   4089a:	movdqa %xmm0,%xmm3
   4089e:	punpcklbw %xmm4,%xmm0
   408a2:	punpckhbw %xmm4,%xmm3
   408a6:	movdqa %xmm5,%xmm2
   408aa:	punpcklbw %xmm7,%xmm5
   408ae:	punpckhbw %xmm7,%xmm2
   408b2:	movdqa %xmm0,%xmm1
   408b6:	punpcklwd %xmm5,%xmm0
   408ba:	punpckhwd %xmm5,%xmm1
   408be:	movdqa %xmm3,%xmm6
   408c2:	punpcklwd %xmm2,%xmm3
   408c6:	punpckhwd %xmm2,%xmm6
   408ca:	movdqa %xmm0,%xmm4
   408ce:	punpcklbw %xmm3,%xmm0
   408d2:	punpckhbw %xmm3,%xmm4
   408d6:	movdqa %xmm1,%xmm7
   408da:	punpcklbw %xmm6,%xmm1
   408de:	punpckhbw %xmm6,%xmm7
   408e2:	pxor   %xmm5,%xmm5
   408e6:	movdqa %xmm0,%xmm2
   408ea:	punpcklbw %xmm5,%xmm0
   408ee:	punpckhbw %xmm5,%xmm2
   408f2:	movdqa %xmm1,%xmm3
   408f6:	punpcklbw %xmm5,%xmm1
   408fa:	punpckhbw %xmm5,%xmm3
   408fe:	movdqa %xmm4,%xmm6
   40902:	punpcklbw %xmm5,%xmm4
   40906:	punpckhbw %xmm5,%xmm6
   4090a:	punpcklbw %xmm7,%xmm5
   4090e:	punpckhbw %xmm7,%xmm7
   40912:	psrlw  $0x8,%xmm5
   40917:	psrlw  $0x8,%xmm7
   4091c:	movdqa %xmm1,%xmm6
   40920:	punpcklwd %xmm3,%xmm1
   40924:	punpckhwd %xmm3,%xmm6
   40928:	pmaddwd 0x1b350(%rip),%xmm1        # 5bc80 <PW_F0299_F0337>
   40930:	pmaddwd 0x1b348(%rip),%xmm6        # 5bc80 <PW_F0299_F0337>
   40938:	movdqa %xmm6,%xmm7
   4093c:	movdqa %xmm0,%xmm6
   40940:	punpcklwd %xmm2,%xmm0
   40944:	punpckhwd %xmm2,%xmm6
   40948:	pmaddwd 0x1b330(%rip),%xmm0        # 5bc80 <PW_F0299_F0337>
   40950:	pmaddwd 0x1b328(%rip),%xmm6        # 5bc80 <PW_F0299_F0337>
   40958:	movdqa %xmm0,-0x20(%rbp)
   4095d:	movdqa %xmm6,-0x10(%rbp)
   40962:	movdqa %xmm5,%xmm0
   40966:	movdqa %xmm4,%xmm6
   4096a:	movdqa %xmm0,%xmm4
   4096e:	punpcklwd %xmm3,%xmm0
   40972:	punpckhwd %xmm3,%xmm4
   40976:	pmaddwd 0x1b312(%rip),%xmm0        # 5bc90 <PW_F0114_F0250>
   4097e:	pmaddwd 0x1b30a(%rip),%xmm4        # 5bc90 <PW_F0114_F0250>
   40986:	movdqa 0x1b312(%rip),%xmm3        # 5bca0 <PD_ONEHALF>
   4098e:	paddd  %xmm1,%xmm0
   40992:	paddd  %xmm7,%xmm4
   40996:	paddd  %xmm3,%xmm0
   4099a:	paddd  %xmm3,%xmm4
   4099e:	psrld  $0x10,%xmm0
   409a3:	psrld  $0x10,%xmm4
   409a8:	packssdw %xmm4,%xmm0
   409ac:	movdqa %xmm6,%xmm4
   409b0:	punpcklwd %xmm2,%xmm6
   409b4:	punpckhwd %xmm2,%xmm4
   409b8:	pmaddwd 0x1b2d0(%rip),%xmm6        # 5bc90 <PW_F0114_F0250>
   409c0:	pmaddwd 0x1b2c8(%rip),%xmm4        # 5bc90 <PW_F0114_F0250>
   409c8:	movdqa 0x1b2d0(%rip),%xmm2        # 5bca0 <PD_ONEHALF>
   409d0:	paddd  -0x20(%rbp),%xmm6
   409d5:	paddd  -0x10(%rbp),%xmm4
   409da:	paddd  %xmm2,%xmm6
   409de:	paddd  %xmm2,%xmm4
   409e2:	psrld  $0x10,%xmm6
   409e7:	psrld  $0x10,%xmm4
   409ec:	packssdw %xmm4,%xmm6
   409f0:	psllw  $0x8,%xmm0
   409f5:	por    %xmm0,%xmm6
   409f9:	movdqa %xmm6,(%rdi)
   409fd:	sub    $0x10,%rcx
   40a01:	add    $0x40,%rsi
   40a05:	add    $0x10,%rdi
   40a09:	cmp    $0x10,%rcx
   40a0d:	jae    40887 <jsimd_extrgbx_gray_convert_sse2.columnloop>
   40a13:	test   %rcx,%rcx
   40a16:	jne    40833 <jsimd_extrgbx_gray_convert_sse2.column_ld1>
   40a1c:	pop    %rcx
   40a1d:	pop    %rsi
   40a1e:	pop    %rdi
   40a1f:	add    $0x8,%rsi
   40a23:	add    $0x8,%rdi
   40a27:	dec    %rax
   40a2a:	jg     40820 <jsimd_extrgbx_gray_convert_sse2.rowloop>

0000000000040a30 <jsimd_extrgbx_gray_convert_sse2.return>:
   40a30:	pop    %rbx
   40a31:	pop    %r15
   40a33:	pop    %r14
   40a35:	pop    %r13
   40a37:	pop    %r12
   40a39:	pop    %r11
   40a3b:	pop    %r10
   40a3d:	mov    %rbp,%rsp
   40a40:	pop    %rsp
   40a41:	pop    %rbp
   40a42:	retq   
   40a43:	nop
   40a44:	nop
   40a45:	nop
   40a46:	nop
   40a47:	nop
   40a48:	nop
   40a49:	nop
   40a4a:	nop
   40a4b:	nop
   40a4c:	nop
   40a4d:	nop
   40a4e:	nop
   40a4f:	nop

0000000000040a50 <jsimd_extbgr_gray_convert_sse2>:
   40a50:	push   %rbp
   40a51:	mov    %rsp,%rax
   40a54:	sub    $0x4,%rsp
   40a58:	and    $0xfffffffffffffff0,%rsp
   40a5c:	mov    %rax,(%rsp)
   40a60:	mov    %rsp,%rbp
   40a63:	lea    -0x20(%rbp),%rsp
   40a67:	push   %r10
   40a69:	push   %r11
   40a6b:	push   %r12
   40a6d:	push   %r13
   40a6f:	push   %r14
   40a71:	push   %r15
   40a73:	mov    %rdi,%r10
   40a76:	mov    %rsi,%r11
   40a79:	mov    %rdx,%r12
   40a7c:	mov    %rcx,%r13
   40a7f:	mov    %r8,%r14
   40a82:	mov    %r9,%r15
   40a85:	push   %rbx
   40a86:	mov    %r10d,%ecx
   40a89:	test   %rcx,%rcx
   40a8c:	je     40cf4 <jsimd_extbgr_gray_convert_sse2.return>
   40a92:	push   %rcx
   40a93:	mov    %r12,%rsi
   40a96:	mov    %r13d,%ecx
   40a99:	mov    (%rsi),%rdi
   40a9c:	lea    (%rdi,%rcx,8),%rdi
   40aa0:	pop    %rcx
   40aa1:	mov    %r11,%rsi
   40aa4:	mov    %r14d,%eax
   40aa7:	test   %rax,%rax
   40aaa:	jle    40cf4 <jsimd_extbgr_gray_convert_sse2.return>

0000000000040ab0 <jsimd_extbgr_gray_convert_sse2.rowloop>:
   40ab0:	push   %rdi
   40ab1:	push   %rsi
   40ab2:	push   %rcx
   40ab3:	mov    (%rsi),%rsi
   40ab6:	mov    (%rdi),%rdi
   40ab9:	cmp    $0x10,%rcx
   40abd:	jae    40b4d <jsimd_extbgr_gray_convert_sse2.columnloop>

0000000000040ac3 <jsimd_extbgr_gray_convert_sse2.column_ld1>:
   40ac3:	push   %rax
   40ac4:	push   %rdx
   40ac5:	lea    (%rcx,%rcx,2),%rcx
   40ac9:	test   $0x1,%cl
   40acc:	je     40ad7 <jsimd_extbgr_gray_convert_sse2.column_ld2>
   40ace:	sub    $0x1,%rcx
   40ad2:	movzbq (%rsi,%rcx,1),%rax

0000000000040ad7 <jsimd_extbgr_gray_convert_sse2.column_ld2>:
   40ad7:	test   $0x2,%cl
   40ada:	je     40aec <jsimd_extbgr_gray_convert_sse2.column_ld4>
   40adc:	sub    $0x2,%rcx
   40ae0:	movzwq (%rsi,%rcx,1),%rdx
   40ae5:	shl    $0x10,%rax
   40ae9:	or     %rdx,%rax

0000000000040aec <jsimd_extbgr_gray_convert_sse2.column_ld4>:
   40aec:	movd   %eax,%xmm4
   40af0:	pop    %rdx
   40af1:	pop    %rax
   40af2:	test   $0x4,%cl
   40af5:	je     40b09 <jsimd_extbgr_gray_convert_sse2.column_ld8>
   40af7:	sub    $0x4,%rcx
   40afb:	movd   (%rsi,%rcx,1),%xmm1
   40b00:	pslldq $0x4,%xmm4
   40b05:	por    %xmm1,%xmm4

0000000000040b09 <jsimd_extbgr_gray_convert_sse2.column_ld8>:
   40b09:	test   $0x8,%cl
   40b0c:	je     40b20 <jsimd_extbgr_gray_convert_sse2.column_ld16>
   40b0e:	sub    $0x8,%rcx
   40b12:	movq   (%rsi,%rcx,1),%xmm5
   40b17:	pslldq $0x8,%xmm4
   40b1c:	por    %xmm5,%xmm4

0000000000040b20 <jsimd_extbgr_gray_convert_sse2.column_ld16>:
   40b20:	test   $0x10,%cl
   40b23:	je     40b34 <jsimd_extbgr_gray_convert_sse2.column_ld32>
   40b25:	movdqa %xmm4,%xmm1
   40b29:	movdqu (%rsi),%xmm4
   40b2d:	mov    $0x10,%ecx
   40b32:	jmp    40b5b <jsimd_extbgr_gray_convert_sse2.rgb_gray_cnv>

0000000000040b34 <jsimd_extbgr_gray_convert_sse2.column_ld32>:
   40b34:	test   $0x20,%cl
   40b37:	mov    $0x10,%ecx
   40b3c:	je     40b5b <jsimd_extbgr_gray_convert_sse2.rgb_gray_cnv>
   40b3e:	movdqa %xmm4,%xmm5
   40b42:	movdqu (%rsi),%xmm4
   40b46:	movdqu 0x10(%rsi),%xmm1
   40b4b:	jmp    40b5b <jsimd_extbgr_gray_convert_sse2.rgb_gray_cnv>

0000000000040b4d <jsimd_extbgr_gray_convert_sse2.columnloop>:
   40b4d:	movdqu (%rsi),%xmm4
   40b51:	movdqu 0x10(%rsi),%xmm1
   40b56:	movdqu 0x20(%rsi),%xmm5

0000000000040b5b <jsimd_extbgr_gray_convert_sse2.rgb_gray_cnv>:
   40b5b:	movdqa %xmm4,%xmm6
   40b5f:	pslldq $0x8,%xmm4
   40b64:	psrldq $0x8,%xmm6
   40b69:	punpckhbw %xmm1,%xmm4
   40b6d:	pslldq $0x8,%xmm1
   40b72:	punpcklbw %xmm5,%xmm6
   40b76:	punpckhbw %xmm5,%xmm1
   40b7a:	movdqa %xmm4,%xmm3
   40b7e:	pslldq $0x8,%xmm4
   40b83:	psrldq $0x8,%xmm3
   40b88:	punpckhbw %xmm6,%xmm4
   40b8c:	pslldq $0x8,%xmm6
   40b91:	punpcklbw %xmm1,%xmm3
   40b95:	punpckhbw %xmm1,%xmm6
   40b99:	movdqa %xmm4,%xmm0
   40b9d:	pslldq $0x8,%xmm4
   40ba2:	psrldq $0x8,%xmm0
   40ba7:	punpckhbw %xmm3,%xmm4
   40bab:	pslldq $0x8,%xmm3
   40bb0:	punpcklbw %xmm6,%xmm0
   40bb4:	punpckhbw %xmm6,%xmm3
   40bb8:	pxor   %xmm7,%xmm7
   40bbc:	movdqa %xmm4,%xmm2
   40bc0:	punpcklbw %xmm7,%xmm4
   40bc4:	punpckhbw %xmm7,%xmm2
   40bc8:	movdqa %xmm0,%xmm5
   40bcc:	punpcklbw %xmm7,%xmm0
   40bd0:	punpckhbw %xmm7,%xmm5
   40bd4:	movdqa %xmm3,%xmm1
   40bd8:	punpcklbw %xmm7,%xmm3
   40bdc:	punpckhbw %xmm7,%xmm1
   40be0:	movdqa %xmm1,%xmm6
   40be4:	punpcklwd %xmm3,%xmm1
   40be8:	punpckhwd %xmm3,%xmm6
   40bec:	pmaddwd 0x1b08c(%rip),%xmm1        # 5bc80 <PW_F0299_F0337>
   40bf4:	pmaddwd 0x1b084(%rip),%xmm6        # 5bc80 <PW_F0299_F0337>
   40bfc:	movdqa %xmm6,%xmm7
   40c00:	movdqa %xmm0,%xmm6
   40c04:	punpcklwd %xmm2,%xmm0
   40c08:	punpckhwd %xmm2,%xmm6
   40c0c:	pmaddwd 0x1b06c(%rip),%xmm0        # 5bc80 <PW_F0299_F0337>
   40c14:	pmaddwd 0x1b064(%rip),%xmm6        # 5bc80 <PW_F0299_F0337>
   40c1c:	movdqa %xmm0,-0x20(%rbp)
   40c21:	movdqa %xmm6,-0x10(%rbp)
   40c26:	movdqa %xmm5,%xmm0
   40c2a:	movdqa %xmm4,%xmm6
   40c2e:	movdqa %xmm0,%xmm4
   40c32:	punpcklwd %xmm3,%xmm0
   40c36:	punpckhwd %xmm3,%xmm4
   40c3a:	pmaddwd 0x1b04e(%rip),%xmm0        # 5bc90 <PW_F0114_F0250>
   40c42:	pmaddwd 0x1b046(%rip),%xmm4        # 5bc90 <PW_F0114_F0250>
   40c4a:	movdqa 0x1b04e(%rip),%xmm3        # 5bca0 <PD_ONEHALF>
   40c52:	paddd  %xmm1,%xmm0
   40c56:	paddd  %xmm7,%xmm4
   40c5a:	paddd  %xmm3,%xmm0
   40c5e:	paddd  %xmm3,%xmm4
   40c62:	psrld  $0x10,%xmm0
   40c67:	psrld  $0x10,%xmm4
   40c6c:	packssdw %xmm4,%xmm0
   40c70:	movdqa %xmm6,%xmm4
   40c74:	punpcklwd %xmm2,%xmm6
   40c78:	punpckhwd %xmm2,%xmm4
   40c7c:	pmaddwd 0x1b00c(%rip),%xmm6        # 5bc90 <PW_F0114_F0250>
   40c84:	pmaddwd 0x1b004(%rip),%xmm4        # 5bc90 <PW_F0114_F0250>
   40c8c:	movdqa 0x1b00c(%rip),%xmm2        # 5bca0 <PD_ONEHALF>
   40c94:	paddd  -0x20(%rbp),%xmm6
   40c99:	paddd  -0x10(%rbp),%xmm4
   40c9e:	paddd  %xmm2,%xmm6
   40ca2:	paddd  %xmm2,%xmm4
   40ca6:	psrld  $0x10,%xmm6
   40cab:	psrld  $0x10,%xmm4
   40cb0:	packssdw %xmm4,%xmm6
   40cb4:	psllw  $0x8,%xmm0
   40cb9:	por    %xmm0,%xmm6
   40cbd:	movdqa %xmm6,(%rdi)
   40cc1:	sub    $0x10,%rcx
   40cc5:	add    $0x30,%rsi
   40cc9:	add    $0x10,%rdi
   40ccd:	cmp    $0x10,%rcx
   40cd1:	jae    40b4d <jsimd_extbgr_gray_convert_sse2.columnloop>
   40cd7:	test   %rcx,%rcx
   40cda:	jne    40ac3 <jsimd_extbgr_gray_convert_sse2.column_ld1>
   40ce0:	pop    %rcx
   40ce1:	pop    %rsi
   40ce2:	pop    %rdi
   40ce3:	add    $0x8,%rsi
   40ce7:	add    $0x8,%rdi
   40ceb:	dec    %rax
   40cee:	jg     40ab0 <jsimd_extbgr_gray_convert_sse2.rowloop>

0000000000040cf4 <jsimd_extbgr_gray_convert_sse2.return>:
   40cf4:	pop    %rbx
   40cf5:	pop    %r15
   40cf7:	pop    %r14
   40cf9:	pop    %r13
   40cfb:	pop    %r12
   40cfd:	pop    %r11
   40cff:	pop    %r10
   40d01:	mov    %rbp,%rsp
   40d04:	pop    %rsp
   40d05:	pop    %rbp
   40d06:	retq   
   40d07:	nop
   40d08:	nop
   40d09:	nop
   40d0a:	nop
   40d0b:	nop
   40d0c:	nop
   40d0d:	nop
   40d0e:	nop
   40d0f:	nop

0000000000040d10 <jsimd_extbgrx_gray_convert_sse2>:
   40d10:	push   %rbp
   40d11:	mov    %rsp,%rax
   40d14:	sub    $0x4,%rsp
   40d18:	and    $0xfffffffffffffff0,%rsp
   40d1c:	mov    %rax,(%rsp)
   40d20:	mov    %rsp,%rbp
   40d23:	lea    -0x20(%rbp),%rsp
   40d27:	push   %r10
   40d29:	push   %r11
   40d2b:	push   %r12
   40d2d:	push   %r13
   40d2f:	push   %r14
   40d31:	push   %r15
   40d33:	mov    %rdi,%r10
   40d36:	mov    %rsi,%r11
   40d39:	mov    %rdx,%r12
   40d3c:	mov    %rcx,%r13
   40d3f:	mov    %r8,%r14
   40d42:	mov    %r9,%r15
   40d45:	push   %rbx
   40d46:	mov    %r10d,%ecx
   40d49:	test   %rcx,%rcx
   40d4c:	je     40f80 <jsimd_extbgrx_gray_convert_sse2.return>
   40d52:	push   %rcx
   40d53:	mov    %r12,%rsi
   40d56:	mov    %r13d,%ecx
   40d59:	mov    (%rsi),%rdi
   40d5c:	lea    (%rdi,%rcx,8),%rdi
   40d60:	pop    %rcx
   40d61:	mov    %r11,%rsi
   40d64:	mov    %r14d,%eax
   40d67:	test   %rax,%rax
   40d6a:	jle    40f80 <jsimd_extbgrx_gray_convert_sse2.return>

0000000000040d70 <jsimd_extbgrx_gray_convert_sse2.rowloop>:
   40d70:	push   %rdi
   40d71:	push   %rsi
   40d72:	push   %rcx
   40d73:	mov    (%rsi),%rsi
   40d76:	mov    (%rdi),%rdi
   40d79:	cmp    $0x10,%rcx
   40d7d:	jae    40dd7 <jsimd_extbgrx_gray_convert_sse2.columnloop>

0000000000040d83 <jsimd_extbgrx_gray_convert_sse2.column_ld1>:
   40d83:	test   $0x1,%cl
   40d86:	je     40d91 <jsimd_extbgrx_gray_convert_sse2.column_ld2>
   40d88:	sub    $0x1,%rcx
   40d8c:	movd   (%rsi,%rcx,4),%xmm4

0000000000040d91 <jsimd_extbgrx_gray_convert_sse2.column_ld2>:
   40d91:	test   $0x2,%cl
   40d94:	je     40da8 <jsimd_extbgrx_gray_convert_sse2.column_ld4>
   40d96:	sub    $0x2,%rcx
   40d9a:	movq   (%rsi,%rcx,4),%xmm0
   40d9f:	pslldq $0x8,%xmm4
   40da4:	por    %xmm0,%xmm4

0000000000040da8 <jsimd_extbgrx_gray_convert_sse2.column_ld4>:
   40da8:	test   $0x4,%cl
   40dab:	je     40dba <jsimd_extbgrx_gray_convert_sse2.column_ld8>
   40dad:	sub    $0x4,%rcx
   40db1:	movdqa %xmm4,%xmm0
   40db5:	movdqu (%rsi,%rcx,4),%xmm4

0000000000040dba <jsimd_extbgrx_gray_convert_sse2.column_ld8>:
   40dba:	test   $0x8,%cl
   40dbd:	mov    $0x10,%ecx
   40dc2:	je     40dea <jsimd_extbgrx_gray_convert_sse2.rgb_gray_cnv>
   40dc4:	movdqa %xmm4,%xmm1
   40dc8:	movdqa %xmm0,%xmm7
   40dcc:	movdqu (%rsi),%xmm4
   40dd0:	movdqu 0x10(%rsi),%xmm0
   40dd5:	jmp    40dea <jsimd_extbgrx_gray_convert_sse2.rgb_gray_cnv>

0000000000040dd7 <jsimd_extbgrx_gray_convert_sse2.columnloop>:
   40dd7:	movdqu (%rsi),%xmm4
   40ddb:	movdqu 0x10(%rsi),%xmm0
   40de0:	movdqu 0x20(%rsi),%xmm1
   40de5:	movdqu 0x30(%rsi),%xmm7

0000000000040dea <jsimd_extbgrx_gray_convert_sse2.rgb_gray_cnv>:
   40dea:	movdqa %xmm4,%xmm3
   40dee:	punpcklbw %xmm0,%xmm4
   40df2:	punpckhbw %xmm0,%xmm3
   40df6:	movdqa %xmm1,%xmm2
   40dfa:	punpcklbw %xmm7,%xmm1
   40dfe:	punpckhbw %xmm7,%xmm2
   40e02:	movdqa %xmm4,%xmm5
   40e06:	punpcklwd %xmm1,%xmm4
   40e0a:	punpckhwd %xmm1,%xmm5
   40e0e:	movdqa %xmm3,%xmm6
   40e12:	punpcklwd %xmm2,%xmm3
   40e16:	punpckhwd %xmm2,%xmm6
   40e1a:	movdqa %xmm4,%xmm0
   40e1e:	punpcklbw %xmm3,%xmm4
   40e22:	punpckhbw %xmm3,%xmm0
   40e26:	movdqa %xmm5,%xmm7
   40e2a:	punpcklbw %xmm6,%xmm5
   40e2e:	punpckhbw %xmm6,%xmm7
   40e32:	pxor   %xmm1,%xmm1
   40e36:	movdqa %xmm4,%xmm2
   40e3a:	punpcklbw %xmm1,%xmm4
   40e3e:	punpckhbw %xmm1,%xmm2
   40e42:	movdqa %xmm5,%xmm3
   40e46:	punpcklbw %xmm1,%xmm5
   40e4a:	punpckhbw %xmm1,%xmm3
   40e4e:	movdqa %xmm0,%xmm6
   40e52:	punpcklbw %xmm1,%xmm0
   40e56:	punpckhbw %xmm1,%xmm6
   40e5a:	punpcklbw %xmm7,%xmm1
   40e5e:	punpckhbw %xmm7,%xmm7
   40e62:	psrlw  $0x8,%xmm1
   40e67:	psrlw  $0x8,%xmm7
   40e6c:	movdqa %xmm1,%xmm6
   40e70:	punpcklwd %xmm3,%xmm1
   40e74:	punpckhwd %xmm3,%xmm6
   40e78:	pmaddwd 0x1ae00(%rip),%xmm1        # 5bc80 <PW_F0299_F0337>
   40e80:	pmaddwd 0x1adf8(%rip),%xmm6        # 5bc80 <PW_F0299_F0337>
   40e88:	movdqa %xmm6,%xmm7
   40e8c:	movdqa %xmm0,%xmm6
   40e90:	punpcklwd %xmm2,%xmm0
   40e94:	punpckhwd %xmm2,%xmm6
   40e98:	pmaddwd 0x1ade0(%rip),%xmm0        # 5bc80 <PW_F0299_F0337>
   40ea0:	pmaddwd 0x1add8(%rip),%xmm6        # 5bc80 <PW_F0299_F0337>
   40ea8:	movdqa %xmm0,-0x20(%rbp)
   40ead:	movdqa %xmm6,-0x10(%rbp)
   40eb2:	movdqa %xmm5,%xmm0
   40eb6:	movdqa %xmm4,%xmm6
   40eba:	movdqa %xmm0,%xmm4
   40ebe:	punpcklwd %xmm3,%xmm0
   40ec2:	punpckhwd %xmm3,%xmm4
   40ec6:	pmaddwd 0x1adc2(%rip),%xmm0        # 5bc90 <PW_F0114_F0250>
   40ece:	pmaddwd 0x1adba(%rip),%xmm4        # 5bc90 <PW_F0114_F0250>
   40ed6:	movdqa 0x1adc2(%rip),%xmm3        # 5bca0 <PD_ONEHALF>
   40ede:	paddd  %xmm1,%xmm0
   40ee2:	paddd  %xmm7,%xmm4
   40ee6:	paddd  %xmm3,%xmm0
   40eea:	paddd  %xmm3,%xmm4
   40eee:	psrld  $0x10,%xmm0
   40ef3:	psrld  $0x10,%xmm4
   40ef8:	packssdw %xmm4,%xmm0
   40efc:	movdqa %xmm6,%xmm4
   40f00:	punpcklwd %xmm2,%xmm6
   40f04:	punpckhwd %xmm2,%xmm4
   40f08:	pmaddwd 0x1ad80(%rip),%xmm6        # 5bc90 <PW_F0114_F0250>
   40f10:	pmaddwd 0x1ad78(%rip),%xmm4        # 5bc90 <PW_F0114_F0250>
   40f18:	movdqa 0x1ad80(%rip),%xmm2        # 5bca0 <PD_ONEHALF>
   40f20:	paddd  -0x20(%rbp),%xmm6
   40f25:	paddd  -0x10(%rbp),%xmm4
   40f2a:	paddd  %xmm2,%xmm6
   40f2e:	paddd  %xmm2,%xmm4
   40f32:	psrld  $0x10,%xmm6
   40f37:	psrld  $0x10,%xmm4
   40f3c:	packssdw %xmm4,%xmm6
   40f40:	psllw  $0x8,%xmm0
   40f45:	por    %xmm0,%xmm6
   40f49:	movdqa %xmm6,(%rdi)
   40f4d:	sub    $0x10,%rcx
   40f51:	add    $0x40,%rsi
   40f55:	add    $0x10,%rdi
   40f59:	cmp    $0x10,%rcx
   40f5d:	jae    40dd7 <jsimd_extbgrx_gray_convert_sse2.columnloop>
   40f63:	test   %rcx,%rcx
   40f66:	jne    40d83 <jsimd_extbgrx_gray_convert_sse2.column_ld1>
   40f6c:	pop    %rcx
   40f6d:	pop    %rsi
   40f6e:	pop    %rdi
   40f6f:	add    $0x8,%rsi
   40f73:	add    $0x8,%rdi
   40f77:	dec    %rax
   40f7a:	jg     40d70 <jsimd_extbgrx_gray_convert_sse2.rowloop>

0000000000040f80 <jsimd_extbgrx_gray_convert_sse2.return>:
   40f80:	pop    %rbx
   40f81:	pop    %r15
   40f83:	pop    %r14
   40f85:	pop    %r13
   40f87:	pop    %r12
   40f89:	pop    %r11
   40f8b:	pop    %r10
   40f8d:	mov    %rbp,%rsp
   40f90:	pop    %rsp
   40f91:	pop    %rbp
   40f92:	retq   
   40f93:	nop
   40f94:	nop
   40f95:	nop
   40f96:	nop
   40f97:	nop
   40f98:	nop
   40f99:	nop
   40f9a:	nop
   40f9b:	nop
   40f9c:	nop
   40f9d:	nop
   40f9e:	nop
   40f9f:	nop

0000000000040fa0 <jsimd_extxbgr_gray_convert_sse2>:
   40fa0:	push   %rbp
   40fa1:	mov    %rsp,%rax
   40fa4:	sub    $0x4,%rsp
   40fa8:	and    $0xfffffffffffffff0,%rsp
   40fac:	mov    %rax,(%rsp)
   40fb0:	mov    %rsp,%rbp
   40fb3:	lea    -0x20(%rbp),%rsp
   40fb7:	push   %r10
   40fb9:	push   %r11
   40fbb:	push   %r12
   40fbd:	push   %r13
   40fbf:	push   %r14
   40fc1:	push   %r15
   40fc3:	mov    %rdi,%r10
   40fc6:	mov    %rsi,%r11
   40fc9:	mov    %rdx,%r12
   40fcc:	mov    %rcx,%r13
   40fcf:	mov    %r8,%r14
   40fd2:	mov    %r9,%r15
   40fd5:	push   %rbx
   40fd6:	mov    %r10d,%ecx
   40fd9:	test   %rcx,%rcx
   40fdc:	je     41210 <jsimd_extxbgr_gray_convert_sse2.return>
   40fe2:	push   %rcx
   40fe3:	mov    %r12,%rsi
   40fe6:	mov    %r13d,%ecx
   40fe9:	mov    (%rsi),%rdi
   40fec:	lea    (%rdi,%rcx,8),%rdi
   40ff0:	pop    %rcx
   40ff1:	mov    %r11,%rsi
   40ff4:	mov    %r14d,%eax
   40ff7:	test   %rax,%rax
   40ffa:	jle    41210 <jsimd_extxbgr_gray_convert_sse2.return>

0000000000041000 <jsimd_extxbgr_gray_convert_sse2.rowloop>:
   41000:	push   %rdi
   41001:	push   %rsi
   41002:	push   %rcx
   41003:	mov    (%rsi),%rsi
   41006:	mov    (%rdi),%rdi
   41009:	cmp    $0x10,%rcx
   4100d:	jae    41067 <jsimd_extxbgr_gray_convert_sse2.columnloop>

0000000000041013 <jsimd_extxbgr_gray_convert_sse2.column_ld1>:
   41013:	test   $0x1,%cl
   41016:	je     41021 <jsimd_extxbgr_gray_convert_sse2.column_ld2>
   41018:	sub    $0x1,%rcx
   4101c:	movd   (%rsi,%rcx,4),%xmm6

0000000000041021 <jsimd_extxbgr_gray_convert_sse2.column_ld2>:
   41021:	test   $0x2,%cl
   41024:	je     41038 <jsimd_extxbgr_gray_convert_sse2.column_ld4>
   41026:	sub    $0x2,%rcx
   4102a:	movq   (%rsi,%rcx,4),%xmm2
   4102f:	pslldq $0x8,%xmm6
   41034:	por    %xmm2,%xmm6

0000000000041038 <jsimd_extxbgr_gray_convert_sse2.column_ld4>:
   41038:	test   $0x4,%cl
   4103b:	je     4104a <jsimd_extxbgr_gray_convert_sse2.column_ld8>
   4103d:	sub    $0x4,%rcx
   41041:	movdqa %xmm6,%xmm2
   41045:	movdqu (%rsi,%rcx,4),%xmm6

000000000004104a <jsimd_extxbgr_gray_convert_sse2.column_ld8>:
   4104a:	test   $0x8,%cl
   4104d:	mov    $0x10,%ecx
   41052:	je     4107a <jsimd_extxbgr_gray_convert_sse2.rgb_gray_cnv>
   41054:	movdqa %xmm6,%xmm3
   41058:	movdqa %xmm2,%xmm1
   4105c:	movdqu (%rsi),%xmm6
   41060:	movdqu 0x10(%rsi),%xmm2
   41065:	jmp    4107a <jsimd_extxbgr_gray_convert_sse2.rgb_gray_cnv>

0000000000041067 <jsimd_extxbgr_gray_convert_sse2.columnloop>:
   41067:	movdqu (%rsi),%xmm6
   4106b:	movdqu 0x10(%rsi),%xmm2
   41070:	movdqu 0x20(%rsi),%xmm3
   41075:	movdqu 0x30(%rsi),%xmm1

000000000004107a <jsimd_extxbgr_gray_convert_sse2.rgb_gray_cnv>:
   4107a:	movdqa %xmm6,%xmm5
   4107e:	punpcklbw %xmm2,%xmm6
   41082:	punpckhbw %xmm2,%xmm5
   41086:	movdqa %xmm3,%xmm4
   4108a:	punpcklbw %xmm1,%xmm3
   4108e:	punpckhbw %xmm1,%xmm4
   41092:	movdqa %xmm6,%xmm7
   41096:	punpcklwd %xmm3,%xmm6
   4109a:	punpckhwd %xmm3,%xmm7
   4109e:	movdqa %xmm5,%xmm0
   410a2:	punpcklwd %xmm4,%xmm5
   410a6:	punpckhwd %xmm4,%xmm0
   410aa:	movdqa %xmm6,%xmm2
   410ae:	punpcklbw %xmm5,%xmm6
   410b2:	punpckhbw %xmm5,%xmm2
   410b6:	movdqa %xmm7,%xmm1
   410ba:	punpcklbw %xmm0,%xmm7
   410be:	punpckhbw %xmm0,%xmm1
   410c2:	pxor   %xmm3,%xmm3
   410c6:	movdqa %xmm6,%xmm4
   410ca:	punpcklbw %xmm3,%xmm6
   410ce:	punpckhbw %xmm3,%xmm4
   410d2:	movdqa %xmm7,%xmm5
   410d6:	punpcklbw %xmm3,%xmm7
   410da:	punpckhbw %xmm3,%xmm5
   410de:	movdqa %xmm2,%xmm0
   410e2:	punpcklbw %xmm3,%xmm2
   410e6:	punpckhbw %xmm3,%xmm0
   410ea:	punpcklbw %xmm1,%xmm3
   410ee:	punpckhbw %xmm1,%xmm1
   410f2:	psrlw  $0x8,%xmm3
   410f7:	psrlw  $0x8,%xmm1
   410fc:	movdqa %xmm1,%xmm6
   41100:	punpcklwd %xmm3,%xmm1
   41104:	punpckhwd %xmm3,%xmm6
   41108:	pmaddwd 0x1ab70(%rip),%xmm1        # 5bc80 <PW_F0299_F0337>
   41110:	pmaddwd 0x1ab68(%rip),%xmm6        # 5bc80 <PW_F0299_F0337>
   41118:	movdqa %xmm6,%xmm7
   4111c:	movdqa %xmm0,%xmm6
   41120:	punpcklwd %xmm2,%xmm0
   41124:	punpckhwd %xmm2,%xmm6
   41128:	pmaddwd 0x1ab50(%rip),%xmm0        # 5bc80 <PW_F0299_F0337>
   41130:	pmaddwd 0x1ab48(%rip),%xmm6        # 5bc80 <PW_F0299_F0337>
   41138:	movdqa %xmm0,-0x20(%rbp)
   4113d:	movdqa %xmm6,-0x10(%rbp)
   41142:	movdqa %xmm5,%xmm0
   41146:	movdqa %xmm4,%xmm6
   4114a:	movdqa %xmm0,%xmm4
   4114e:	punpcklwd %xmm3,%xmm0
   41152:	punpckhwd %xmm3,%xmm4
   41156:	pmaddwd 0x1ab32(%rip),%xmm0        # 5bc90 <PW_F0114_F0250>
   4115e:	pmaddwd 0x1ab2a(%rip),%xmm4        # 5bc90 <PW_F0114_F0250>
   41166:	movdqa 0x1ab32(%rip),%xmm3        # 5bca0 <PD_ONEHALF>
   4116e:	paddd  %xmm1,%xmm0
   41172:	paddd  %xmm7,%xmm4
   41176:	paddd  %xmm3,%xmm0
   4117a:	paddd  %xmm3,%xmm4
   4117e:	psrld  $0x10,%xmm0
   41183:	psrld  $0x10,%xmm4
   41188:	packssdw %xmm4,%xmm0
   4118c:	movdqa %xmm6,%xmm4
   41190:	punpcklwd %xmm2,%xmm6
   41194:	punpckhwd %xmm2,%xmm4
   41198:	pmaddwd 0x1aaf0(%rip),%xmm6        # 5bc90 <PW_F0114_F0250>
   411a0:	pmaddwd 0x1aae8(%rip),%xmm4        # 5bc90 <PW_F0114_F0250>
   411a8:	movdqa 0x1aaf0(%rip),%xmm2        # 5bca0 <PD_ONEHALF>
   411b0:	paddd  -0x20(%rbp),%xmm6
   411b5:	paddd  -0x10(%rbp),%xmm4
   411ba:	paddd  %xmm2,%xmm6
   411be:	paddd  %xmm2,%xmm4
   411c2:	psrld  $0x10,%xmm6
   411c7:	psrld  $0x10,%xmm4
   411cc:	packssdw %xmm4,%xmm6
   411d0:	psllw  $0x8,%xmm0
   411d5:	por    %xmm0,%xmm6
   411d9:	movdqa %xmm6,(%rdi)
   411dd:	sub    $0x10,%rcx
   411e1:	add    $0x40,%rsi
   411e5:	add    $0x10,%rdi
   411e9:	cmp    $0x10,%rcx
   411ed:	jae    41067 <jsimd_extxbgr_gray_convert_sse2.columnloop>
   411f3:	test   %rcx,%rcx
   411f6:	jne    41013 <jsimd_extxbgr_gray_convert_sse2.column_ld1>
   411fc:	pop    %rcx
   411fd:	pop    %rsi
   411fe:	pop    %rdi
   411ff:	add    $0x8,%rsi
   41203:	add    $0x8,%rdi
   41207:	dec    %rax
   4120a:	jg     41000 <jsimd_extxbgr_gray_convert_sse2.rowloop>

0000000000041210 <jsimd_extxbgr_gray_convert_sse2.return>:
   41210:	pop    %rbx
   41211:	pop    %r15
   41213:	pop    %r14
   41215:	pop    %r13
   41217:	pop    %r12
   41219:	pop    %r11
   4121b:	pop    %r10
   4121d:	mov    %rbp,%rsp
   41220:	pop    %rsp
   41221:	pop    %rbp
   41222:	retq   
   41223:	nop
   41224:	nop
   41225:	nop
   41226:	nop
   41227:	nop
   41228:	nop
   41229:	nop
   4122a:	nop
   4122b:	nop
   4122c:	nop
   4122d:	nop
   4122e:	nop
   4122f:	nop

0000000000041230 <jsimd_extxrgb_gray_convert_sse2>:
   41230:	push   %rbp
   41231:	mov    %rsp,%rax
   41234:	sub    $0x4,%rsp
   41238:	and    $0xfffffffffffffff0,%rsp
   4123c:	mov    %rax,(%rsp)
   41240:	mov    %rsp,%rbp
   41243:	lea    -0x20(%rbp),%rsp
   41247:	push   %r10
   41249:	push   %r11
   4124b:	push   %r12
   4124d:	push   %r13
   4124f:	push   %r14
   41251:	push   %r15
   41253:	mov    %rdi,%r10
   41256:	mov    %rsi,%r11
   41259:	mov    %rdx,%r12
   4125c:	mov    %rcx,%r13
   4125f:	mov    %r8,%r14
   41262:	mov    %r9,%r15
   41265:	push   %rbx
   41266:	mov    %r10d,%ecx
   41269:	test   %rcx,%rcx
   4126c:	je     414a0 <jsimd_extxrgb_gray_convert_sse2.return>
   41272:	push   %rcx
   41273:	mov    %r12,%rsi
   41276:	mov    %r13d,%ecx
   41279:	mov    (%rsi),%rdi
   4127c:	lea    (%rdi,%rcx,8),%rdi
   41280:	pop    %rcx
   41281:	mov    %r11,%rsi
   41284:	mov    %r14d,%eax
   41287:	test   %rax,%rax
   4128a:	jle    414a0 <jsimd_extxrgb_gray_convert_sse2.return>

0000000000041290 <jsimd_extxrgb_gray_convert_sse2.rowloop>:
   41290:	push   %rdi
   41291:	push   %rsi
   41292:	push   %rcx
   41293:	mov    (%rsi),%rsi
   41296:	mov    (%rdi),%rdi
   41299:	cmp    $0x10,%rcx
   4129d:	jae    412f7 <jsimd_extxrgb_gray_convert_sse2.columnloop>

00000000000412a3 <jsimd_extxrgb_gray_convert_sse2.column_ld1>:
   412a3:	test   $0x1,%cl
   412a6:	je     412b1 <jsimd_extxrgb_gray_convert_sse2.column_ld2>
   412a8:	sub    $0x1,%rcx
   412ac:	movd   (%rsi,%rcx,4),%xmm6

00000000000412b1 <jsimd_extxrgb_gray_convert_sse2.column_ld2>:
   412b1:	test   $0x2,%cl
   412b4:	je     412c8 <jsimd_extxrgb_gray_convert_sse2.column_ld4>
   412b6:	sub    $0x2,%rcx
   412ba:	movq   (%rsi,%rcx,4),%xmm2
   412bf:	pslldq $0x8,%xmm6
   412c4:	por    %xmm2,%xmm6

00000000000412c8 <jsimd_extxrgb_gray_convert_sse2.column_ld4>:
   412c8:	test   $0x4,%cl
   412cb:	je     412da <jsimd_extxrgb_gray_convert_sse2.column_ld8>
   412cd:	sub    $0x4,%rcx
   412d1:	movdqa %xmm6,%xmm2
   412d5:	movdqu (%rsi,%rcx,4),%xmm6

00000000000412da <jsimd_extxrgb_gray_convert_sse2.column_ld8>:
   412da:	test   $0x8,%cl
   412dd:	mov    $0x10,%ecx
   412e2:	je     4130a <jsimd_extxrgb_gray_convert_sse2.rgb_gray_cnv>
   412e4:	movdqa %xmm6,%xmm3
   412e8:	movdqa %xmm2,%xmm5
   412ec:	movdqu (%rsi),%xmm6
   412f0:	movdqu 0x10(%rsi),%xmm2
   412f5:	jmp    4130a <jsimd_extxrgb_gray_convert_sse2.rgb_gray_cnv>

00000000000412f7 <jsimd_extxrgb_gray_convert_sse2.columnloop>:
   412f7:	movdqu (%rsi),%xmm6
   412fb:	movdqu 0x10(%rsi),%xmm2
   41300:	movdqu 0x20(%rsi),%xmm3
   41305:	movdqu 0x30(%rsi),%xmm5

000000000004130a <jsimd_extxrgb_gray_convert_sse2.rgb_gray_cnv>:
   4130a:	movdqa %xmm6,%xmm1
   4130e:	punpcklbw %xmm2,%xmm6
   41312:	punpckhbw %xmm2,%xmm1
   41316:	movdqa %xmm3,%xmm0
   4131a:	punpcklbw %xmm5,%xmm3
   4131e:	punpckhbw %xmm5,%xmm0
   41322:	movdqa %xmm6,%xmm7
   41326:	punpcklwd %xmm3,%xmm6
   4132a:	punpckhwd %xmm3,%xmm7
   4132e:	movdqa %xmm1,%xmm4
   41332:	punpcklwd %xmm0,%xmm1
   41336:	punpckhwd %xmm0,%xmm4
   4133a:	movdqa %xmm6,%xmm2
   4133e:	punpcklbw %xmm1,%xmm6
   41342:	punpckhbw %xmm1,%xmm2
   41346:	movdqa %xmm7,%xmm5
   4134a:	punpcklbw %xmm4,%xmm7
   4134e:	punpckhbw %xmm4,%xmm5
   41352:	pxor   %xmm3,%xmm3
   41356:	movdqa %xmm6,%xmm0
   4135a:	punpcklbw %xmm3,%xmm6
   4135e:	punpckhbw %xmm3,%xmm0
   41362:	movdqa %xmm7,%xmm1
   41366:	punpcklbw %xmm3,%xmm7
   4136a:	punpckhbw %xmm3,%xmm1
   4136e:	movdqa %xmm2,%xmm4
   41372:	punpcklbw %xmm3,%xmm2
   41376:	punpckhbw %xmm3,%xmm4
   4137a:	punpcklbw %xmm5,%xmm3
   4137e:	punpckhbw %xmm5,%xmm5
   41382:	psrlw  $0x8,%xmm3
   41387:	psrlw  $0x8,%xmm5
   4138c:	movdqa %xmm1,%xmm6
   41390:	punpcklwd %xmm3,%xmm1
   41394:	punpckhwd %xmm3,%xmm6
   41398:	pmaddwd 0x1a8e0(%rip),%xmm1        # 5bc80 <PW_F0299_F0337>
   413a0:	pmaddwd 0x1a8d8(%rip),%xmm6        # 5bc80 <PW_F0299_F0337>
   413a8:	movdqa %xmm6,%xmm7
   413ac:	movdqa %xmm0,%xmm6
   413b0:	punpcklwd %xmm2,%xmm0
   413b4:	punpckhwd %xmm2,%xmm6
   413b8:	pmaddwd 0x1a8c0(%rip),%xmm0        # 5bc80 <PW_F0299_F0337>
   413c0:	pmaddwd 0x1a8b8(%rip),%xmm6        # 5bc80 <PW_F0299_F0337>
   413c8:	movdqa %xmm0,-0x20(%rbp)
   413cd:	movdqa %xmm6,-0x10(%rbp)
   413d2:	movdqa %xmm5,%xmm0
   413d6:	movdqa %xmm4,%xmm6
   413da:	movdqa %xmm0,%xmm4
   413de:	punpcklwd %xmm3,%xmm0
   413e2:	punpckhwd %xmm3,%xmm4
   413e6:	pmaddwd 0x1a8a2(%rip),%xmm0        # 5bc90 <PW_F0114_F0250>
   413ee:	pmaddwd 0x1a89a(%rip),%xmm4        # 5bc90 <PW_F0114_F0250>
   413f6:	movdqa 0x1a8a2(%rip),%xmm3        # 5bca0 <PD_ONEHALF>
   413fe:	paddd  %xmm1,%xmm0
   41402:	paddd  %xmm7,%xmm4
   41406:	paddd  %xmm3,%xmm0
   4140a:	paddd  %xmm3,%xmm4
   4140e:	psrld  $0x10,%xmm0
   41413:	psrld  $0x10,%xmm4
   41418:	packssdw %xmm4,%xmm0
   4141c:	movdqa %xmm6,%xmm4
   41420:	punpcklwd %xmm2,%xmm6
   41424:	punpckhwd %xmm2,%xmm4
   41428:	pmaddwd 0x1a860(%rip),%xmm6        # 5bc90 <PW_F0114_F0250>
   41430:	pmaddwd 0x1a858(%rip),%xmm4        # 5bc90 <PW_F0114_F0250>
   41438:	movdqa 0x1a860(%rip),%xmm2        # 5bca0 <PD_ONEHALF>
   41440:	paddd  -0x20(%rbp),%xmm6
   41445:	paddd  -0x10(%rbp),%xmm4
   4144a:	paddd  %xmm2,%xmm6
   4144e:	paddd  %xmm2,%xmm4
   41452:	psrld  $0x10,%xmm6
   41457:	psrld  $0x10,%xmm4
   4145c:	packssdw %xmm4,%xmm6
   41460:	psllw  $0x8,%xmm0
   41465:	por    %xmm0,%xmm6
   41469:	movdqa %xmm6,(%rdi)
   4146d:	sub    $0x10,%rcx
   41471:	add    $0x40,%rsi
   41475:	add    $0x10,%rdi
   41479:	cmp    $0x10,%rcx
   4147d:	jae    412f7 <jsimd_extxrgb_gray_convert_sse2.columnloop>
   41483:	test   %rcx,%rcx
   41486:	jne    412a3 <jsimd_extxrgb_gray_convert_sse2.column_ld1>
   4148c:	pop    %rcx
   4148d:	pop    %rsi
   4148e:	pop    %rdi
   4148f:	add    $0x8,%rsi
   41493:	add    $0x8,%rdi
   41497:	dec    %rax
   4149a:	jg     41290 <jsimd_extxrgb_gray_convert_sse2.rowloop>

00000000000414a0 <jsimd_extxrgb_gray_convert_sse2.return>:
   414a0:	pop    %rbx
   414a1:	pop    %r15
   414a3:	pop    %r14
   414a5:	pop    %r13
   414a7:	pop    %r12
   414a9:	pop    %r11
   414ab:	pop    %r10
   414ad:	mov    %rbp,%rsp
   414b0:	pop    %rsp
   414b1:	pop    %rbp
   414b2:	retq   
   414b3:	nop
   414b4:	nop
   414b5:	nop
   414b6:	nop
   414b7:	nop
   414b8:	nop
   414b9:	nop
   414ba:	nop
   414bb:	nop
   414bc:	nop
   414bd:	nop
   414be:	nop
   414bf:	nop

00000000000414c0 <jsimd_huff_encode_one_block_sse2>:
   414c0:	push   %rbp
   414c1:	mov    %rsp,%rax
   414c4:	sub    $0x4,%rsp
   414c8:	and    $0xfffffffffffffff0,%rsp
   414cc:	mov    %rax,(%rsp)
   414d0:	mov    %rsp,%rbp
   414d3:	lea    -0x100(%rbp),%rsp
   414da:	push   %r10
   414dc:	push   %r11
   414de:	push   %r12
   414e0:	push   %r13
   414e2:	push   %r14
   414e4:	push   %r15
   414e6:	mov    %rdi,%r10
   414e9:	mov    %rsi,%r11
   414ec:	mov    %rdx,%r12
   414ef:	mov    %rcx,%r13
   414f2:	mov    %r8,%r14
   414f5:	mov    %r9,%r15
   414f8:	push   %rbx
   414f9:	mov    %r11,%rax
   414fc:	mov    0x10(%r10),%r8
   41500:	mov    0x18(%r10),%r9d
   41504:	push   %r10
   41506:	movswl (%r12),%edi
   4150b:	sub    %r13d,%edi
   4150e:	mov    %edi,%ebx
   41510:	mov    %edi,%esi
   41512:	sar    $0x1f,%esi
   41515:	xor    %esi,%edi
   41517:	sub    %esi,%edi
   41519:	add    %esi,%ebx
   4151b:	lea    0x1a78e(%rip),%r11        # 5bcb0 <jconst_huff_encode_one_block>
   41522:	movzbq (%r11,%rdi,1),%rdi
   41527:	mov    (%r14,%rdi,4),%r11d
   4152b:	movzbl 0x400(%r14,%rdi,1),%esi
   41534:	cmp    $0x30,%r9d
   41538:	jl     415f8 <..@16..CHECKBUF47_END>
   4153e:	sub    $0x8,%r9d
   41542:	mov    %r8,%rdx
   41545:	mov    %r9d,%ecx
   41548:	shr    %cl,%rdx
   4154b:	mov    %dl,(%rax)
   4154d:	add    $0x1,%rax
   41551:	cmp    $0xff,%dl
   41554:	jne    4155d <..@17..EMIT_BYTE_END>
   41556:	movb   $0x0,(%rax)
   41559:	add    $0x1,%rax

000000000004155d <..@17..EMIT_BYTE_END>:
   4155d:	sub    $0x8,%r9d
   41561:	mov    %r8,%rdx
   41564:	mov    %r9d,%ecx
   41567:	shr    %cl,%rdx
   4156a:	mov    %dl,(%rax)
   4156c:	add    $0x1,%rax
   41570:	cmp    $0xff,%dl
   41573:	jne    4157c <..@18..EMIT_BYTE_END>
   41575:	movb   $0x0,(%rax)
   41578:	add    $0x1,%rax

000000000004157c <..@18..EMIT_BYTE_END>:
   4157c:	sub    $0x8,%r9d
   41580:	mov    %r8,%rdx
   41583:	mov    %r9d,%ecx
   41586:	shr    %cl,%rdx
   41589:	mov    %dl,(%rax)
   4158b:	add    $0x1,%rax
   4158f:	cmp    $0xff,%dl
   41592:	jne    4159b <..@19..EMIT_BYTE_END>
   41594:	movb   $0x0,(%rax)
   41597:	add    $0x1,%rax

000000000004159b <..@19..EMIT_BYTE_END>:
   4159b:	sub    $0x8,%r9d
   4159f:	mov    %r8,%rdx
   415a2:	mov    %r9d,%ecx
   415a5:	shr    %cl,%rdx
   415a8:	mov    %dl,(%rax)
   415aa:	add    $0x1,%rax
   415ae:	cmp    $0xff,%dl
   415b1:	jne    415ba <..@20..EMIT_BYTE_END>
   415b3:	movb   $0x0,(%rax)
   415b6:	add    $0x1,%rax

00000000000415ba <..@20..EMIT_BYTE_END>:
   415ba:	sub    $0x8,%r9d
   415be:	mov    %r8,%rdx
   415c1:	mov    %r9d,%ecx
   415c4:	shr    %cl,%rdx
   415c7:	mov    %dl,(%rax)
   415c9:	add    $0x1,%rax
   415cd:	cmp    $0xff,%dl
   415d0:	jne    415d9 <..@21..EMIT_BYTE_END>
   415d2:	movb   $0x0,(%rax)
   415d5:	add    $0x1,%rax

00000000000415d9 <..@21..EMIT_BYTE_END>:
   415d9:	sub    $0x8,%r9d
   415dd:	mov    %r8,%rdx
   415e0:	mov    %r9d,%ecx
   415e3:	shr    %cl,%rdx
   415e6:	mov    %dl,(%rax)
   415e8:	add    $0x1,%rax
   415ec:	cmp    $0xff,%dl
   415ef:	jne    415f8 <..@16..CHECKBUF47_END>
   415f1:	movb   $0x0,(%rax)
   415f4:	add    $0x1,%rax

00000000000415f8 <..@16..CHECKBUF47_END>:
   415f8:	mov    %esi,%ecx
   415fa:	add    %ecx,%r9d
   415fd:	shl    %cl,%r8
   41600:	or     %r11,%r8
   41603:	mov    $0x1,%esi
   41608:	mov    %edi,%ecx
   4160a:	shl    %cl,%esi
   4160c:	dec    %esi
   4160e:	and    %esi,%ebx
   41610:	cmp    $0x30,%r9d
   41614:	jl     416d4 <..@25..CHECKBUF47_END>
   4161a:	sub    $0x8,%r9d
   4161e:	mov    %r8,%rdx
   41621:	mov    %r9d,%ecx
   41624:	shr    %cl,%rdx
   41627:	mov    %dl,(%rax)
   41629:	add    $0x1,%rax
   4162d:	cmp    $0xff,%dl
   41630:	jne    41639 <..@26..EMIT_BYTE_END>
   41632:	movb   $0x0,(%rax)
   41635:	add    $0x1,%rax

0000000000041639 <..@26..EMIT_BYTE_END>:
   41639:	sub    $0x8,%r9d
   4163d:	mov    %r8,%rdx
   41640:	mov    %r9d,%ecx
   41643:	shr    %cl,%rdx
   41646:	mov    %dl,(%rax)
   41648:	add    $0x1,%rax
   4164c:	cmp    $0xff,%dl
   4164f:	jne    41658 <..@27..EMIT_BYTE_END>
   41651:	movb   $0x0,(%rax)
   41654:	add    $0x1,%rax

0000000000041658 <..@27..EMIT_BYTE_END>:
   41658:	sub    $0x8,%r9d
   4165c:	mov    %r8,%rdx
   4165f:	mov    %r9d,%ecx
   41662:	shr    %cl,%rdx
   41665:	mov    %dl,(%rax)
   41667:	add    $0x1,%rax
   4166b:	cmp    $0xff,%dl
   4166e:	jne    41677 <..@28..EMIT_BYTE_END>
   41670:	movb   $0x0,(%rax)
   41673:	add    $0x1,%rax

0000000000041677 <..@28..EMIT_BYTE_END>:
   41677:	sub    $0x8,%r9d
   4167b:	mov    %r8,%rdx
   4167e:	mov    %r9d,%ecx
   41681:	shr    %cl,%rdx
   41684:	mov    %dl,(%rax)
   41686:	add    $0x1,%rax
   4168a:	cmp    $0xff,%dl
   4168d:	jne    41696 <..@29..EMIT_BYTE_END>
   4168f:	movb   $0x0,(%rax)
   41692:	add    $0x1,%rax

0000000000041696 <..@29..EMIT_BYTE_END>:
   41696:	sub    $0x8,%r9d
   4169a:	mov    %r8,%rdx
   4169d:	mov    %r9d,%ecx
   416a0:	shr    %cl,%rdx
   416a3:	mov    %dl,(%rax)
   416a5:	add    $0x1,%rax
   416a9:	cmp    $0xff,%dl
   416ac:	jne    416b5 <..@30..EMIT_BYTE_END>
   416ae:	movb   $0x0,(%rax)
   416b1:	add    $0x1,%rax

00000000000416b5 <..@30..EMIT_BYTE_END>:
   416b5:	sub    $0x8,%r9d
   416b9:	mov    %r8,%rdx
   416bc:	mov    %r9d,%ecx
   416bf:	shr    %cl,%rdx
   416c2:	mov    %dl,(%rax)
   416c4:	add    $0x1,%rax
   416c8:	cmp    $0xff,%dl
   416cb:	jne    416d4 <..@25..CHECKBUF47_END>
   416cd:	movb   $0x0,(%rax)
   416d0:	add    $0x1,%rax

00000000000416d4 <..@25..CHECKBUF47_END>:
   416d4:	mov    %edi,%ecx
   416d6:	add    %ecx,%r9d
   416d9:	shl    %cl,%r8
   416dc:	or     %rbx,%r8
   416df:	xor    %ebx,%ebx
   416e1:	pxor   %xmm8,%xmm8
   416e6:	pxor   %xmm9,%xmm9
   416eb:	pxor   %xmm10,%xmm10
   416f0:	pxor   %xmm11,%xmm11
   416f5:	pinsrw $0x0,0x2(%r12),%xmm0
   416fd:	pinsrw $0x0,0x30(%r12),%xmm1
   41705:	pinsrw $0x0,0x26(%r12),%xmm2
   4170d:	pinsrw $0x0,0x28(%r12),%xmm3
   41715:	pinsrw $0x1,0x10(%r12),%xmm0
   4171d:	pinsrw $0x1,0x40(%r12),%xmm1
   41725:	pinsrw $0x1,0x34(%r12),%xmm2
   4172d:	pinsrw $0x1,0x1a(%r12),%xmm3
   41735:	pinsrw $0x2,0x20(%r12),%xmm0
   4173d:	pinsrw $0x2,0x32(%r12),%xmm1
   41745:	pinsrw $0x2,0x42(%r12),%xmm2
   4174d:	pinsrw $0x2,0xc(%r12),%xmm3
   41755:	pinsrw $0x3,0x12(%r12),%xmm0
   4175d:	pinsrw $0x3,0x24(%r12),%xmm1
   41765:	pinsrw $0x3,0x50(%r12),%xmm2
   4176d:	pinsrw $0x3,0xe(%r12),%xmm3
   41775:	pinsrw $0x4,0x4(%r12),%xmm0
   4177d:	pinsrw $0x4,0x16(%r12),%xmm1
   41785:	pinsrw $0x4,0x60(%r12),%xmm2
   4178d:	pinsrw $0x4,0x1c(%r12),%xmm3
   41795:	pinsrw $0x5,0x6(%r12),%xmm0
   4179d:	pinsrw $0x5,0x8(%r12),%xmm1
   417a5:	pinsrw $0x5,0x52(%r12),%xmm2
   417ad:	pinsrw $0x5,0x2a(%r12),%xmm3
   417b5:	pinsrw $0x6,0x14(%r12),%xmm0
   417bd:	pinsrw $0x6,0xa(%r12),%xmm1
   417c5:	pinsrw $0x6,0x44(%r12),%xmm2
   417cd:	pinsrw $0x6,0x38(%r12),%xmm3
   417d5:	pinsrw $0x7,0x22(%r12),%xmm0
   417dd:	pinsrw $0x7,0x18(%r12),%xmm1
   417e5:	pinsrw $0x7,0x36(%r12),%xmm2
   417ed:	pinsrw $0x7,0x46(%r12),%xmm3
   417f5:	pcmpgtw %xmm0,%xmm8
   417fa:	pcmpgtw %xmm1,%xmm9
   417ff:	pcmpgtw %xmm2,%xmm10
   41804:	pcmpgtw %xmm3,%xmm11
   41809:	paddw  %xmm8,%xmm0
   4180e:	paddw  %xmm9,%xmm1
   41813:	paddw  %xmm10,%xmm2
   41818:	paddw  %xmm11,%xmm3
   4181d:	pxor   %xmm8,%xmm0
   41822:	pxor   %xmm9,%xmm1
   41827:	pxor   %xmm10,%xmm2
   4182c:	pxor   %xmm11,%xmm3
   41831:	pxor   %xmm0,%xmm8
   41836:	pxor   %xmm1,%xmm9
   4183b:	pxor   %xmm2,%xmm10
   41840:	pxor   %xmm3,%xmm11
   41845:	movdqa %xmm0,-0x80(%rbp)
   4184a:	movdqa %xmm1,-0x70(%rbp)
   4184f:	movdqa %xmm2,-0x60(%rbp)
   41854:	movdqa %xmm3,-0x50(%rbp)
   41859:	movdqa %xmm8,-0x100(%rbp)
   41862:	movdqa %xmm9,-0xf0(%rbp)
   4186b:	movdqa %xmm10,-0xe0(%rbp)
   41874:	movdqa %xmm11,-0xd0(%rbp)
   4187d:	pxor   %xmm8,%xmm8
   41882:	pxor   %xmm9,%xmm9
   41887:	pxor   %xmm10,%xmm10
   4188c:	pxor   %xmm11,%xmm11
   41891:	pinsrw $0x0,0x54(%r12),%xmm4
   41899:	pinsrw $0x0,0x2c(%r12),%xmm5
   418a1:	pinsrw $0x0,0x76(%r12),%xmm6
   418a9:	pinsrw $0x0,0x78(%r12),%xmm7
   418b1:	pinsrw $0x1,0x62(%r12),%xmm4
   418b9:	pinsrw $0x1,0x1e(%r12),%xmm5
   418c1:	pinsrw $0x1,0x68(%r12),%xmm6
   418c9:	pinsrw $0x1,0x7a(%r12),%xmm7
   418d1:	pinsrw $0x2,0x70(%r12),%xmm4
   418d9:	pinsrw $0x2,0x2e(%r12),%xmm5
   418e1:	pinsrw $0x2,0x5a(%r12),%xmm6
   418e9:	pinsrw $0x2,0x6c(%r12),%xmm7
   418f1:	pinsrw $0x3,0x72(%r12),%xmm4
   418f9:	pinsrw $0x3,0x3c(%r12),%xmm5
   41901:	pinsrw $0x3,0x4c(%r12),%xmm6
   41909:	pinsrw $0x3,0x5e(%r12),%xmm7
   41911:	pinsrw $0x4,0x64(%r12),%xmm4
   41919:	pinsrw $0x4,0x4a(%r12),%xmm5
   41921:	pinsrw $0x4,0x3e(%r12),%xmm6
   41929:	pinsrw $0x4,0x6e(%r12),%xmm7
   41931:	pinsrw $0x5,0x56(%r12),%xmm4
   41939:	pinsrw $0x5,0x58(%r12),%xmm5
   41941:	pinsrw $0x5,0x4e(%r12),%xmm6
   41949:	pinsrw $0x5,0x7c(%r12),%xmm7
   41951:	pinsrw $0x6,0x48(%r12),%xmm4
   41959:	pinsrw $0x6,0x66(%r12),%xmm5
   41961:	pinsrw $0x6,0x5c(%r12),%xmm6
   41969:	pinsrw $0x6,0x7e(%r12),%xmm7
   41971:	pinsrw $0x7,0x3a(%r12),%xmm4
   41979:	pinsrw $0x7,0x74(%r12),%xmm5
   41981:	pinsrw $0x7,0x6a(%r12),%xmm6
   41989:	pinsrw $0x7,%ebx,%xmm7
   4198e:	pcmpgtw %xmm4,%xmm8
   41993:	pcmpgtw %xmm5,%xmm9
   41998:	pcmpgtw %xmm6,%xmm10
   4199d:	pcmpgtw %xmm7,%xmm11
   419a2:	paddw  %xmm8,%xmm4
   419a7:	paddw  %xmm9,%xmm5
   419ac:	paddw  %xmm10,%xmm6
   419b1:	paddw  %xmm11,%xmm7
   419b6:	pxor   %xmm8,%xmm4
   419bb:	pxor   %xmm9,%xmm5
   419c0:	pxor   %xmm10,%xmm6
   419c5:	pxor   %xmm11,%xmm7
   419ca:	pxor   %xmm4,%xmm8
   419cf:	pxor   %xmm5,%xmm9
   419d4:	pxor   %xmm6,%xmm10
   419d9:	pxor   %xmm7,%xmm11
   419de:	movdqa %xmm4,-0x40(%rbp)
   419e3:	movdqa %xmm5,-0x30(%rbp)
   419e8:	movdqa %xmm6,-0x20(%rbp)
   419ed:	movdqa %xmm7,-0x10(%rbp)
   419f2:	movdqa %xmm8,-0xc0(%rbp)
   419fb:	movdqa %xmm9,-0xb0(%rbp)
   41a04:	movdqa %xmm10,-0xa0(%rbp)
   41a0d:	movdqa %xmm11,-0x90(%rbp)
   41a16:	pxor   %xmm8,%xmm8
   41a1b:	pcmpeqw %xmm8,%xmm0
   41a20:	pcmpeqw %xmm8,%xmm1
   41a25:	pcmpeqw %xmm8,%xmm2
   41a2a:	pcmpeqw %xmm8,%xmm3
   41a2f:	pcmpeqw %xmm8,%xmm4
   41a34:	pcmpeqw %xmm8,%xmm5
   41a39:	pcmpeqw %xmm8,%xmm6
   41a3e:	pcmpeqw %xmm8,%xmm7
   41a43:	packsswb %xmm1,%xmm0
   41a47:	packsswb %xmm3,%xmm2
   41a4b:	packsswb %xmm5,%xmm4
   41a4f:	packsswb %xmm7,%xmm6
   41a53:	pmovmskb %xmm0,%r11d
   41a58:	pmovmskb %xmm2,%r12d
   41a5d:	pmovmskb %xmm4,%r13d
   41a62:	pmovmskb %xmm6,%r14d
   41a67:	shl    $0x10,%r12
   41a6b:	shl    $0x10,%r14
   41a6f:	or     %r12,%r11
   41a72:	or     %r14,%r13
   41a75:	shl    $0x20,%r13
   41a79:	or     %r13,%r11
   41a7c:	not    %r11
   41a7f:	mov    0x3c0(%r15),%r13d
   41a86:	movzbl 0x4f0(%r15),%r14d
   41a8e:	lea    -0x80(%rbp),%rsi

0000000000041a92 <jsimd_huff_encode_one_block_sse2.BLOOP>:
   41a92:	bsf    %r11,%r12
   41a96:	je     41c62 <jsimd_huff_encode_one_block_sse2.ELOOP>
   41a9c:	mov    %r12,%rcx
   41a9f:	lea    (%rsi,%r12,2),%rsi
   41aa3:	shr    %cl,%r11
   41aa6:	movzwq (%rsi),%rdi
   41aaa:	lea    0x1a1ff(%rip),%rbx        # 5bcb0 <jconst_huff_encode_one_block>
   41ab1:	movzbq (%rbx,%rdi,1),%rdi

0000000000041ab6 <jsimd_huff_encode_one_block_sse2.BRLOOP>:
   41ab6:	cmp    $0x10,%r12
   41aba:	jl     41b99 <jsimd_huff_encode_one_block_sse2.ERLOOP>
   41ac0:	cmp    $0x30,%r9d
   41ac4:	jl     41b84 <..@36..CHECKBUF47_END>
   41aca:	sub    $0x8,%r9d
   41ace:	mov    %r8,%rdx
   41ad1:	mov    %r9d,%ecx
   41ad4:	shr    %cl,%rdx
   41ad7:	mov    %dl,(%rax)
   41ad9:	add    $0x1,%rax
   41add:	cmp    $0xff,%dl
   41ae0:	jne    41ae9 <..@37..EMIT_BYTE_END>
   41ae2:	movb   $0x0,(%rax)
   41ae5:	add    $0x1,%rax

0000000000041ae9 <..@37..EMIT_BYTE_END>:
   41ae9:	sub    $0x8,%r9d
   41aed:	mov    %r8,%rdx
   41af0:	mov    %r9d,%ecx
   41af3:	shr    %cl,%rdx
   41af6:	mov    %dl,(%rax)
   41af8:	add    $0x1,%rax
   41afc:	cmp    $0xff,%dl
   41aff:	jne    41b08 <..@38..EMIT_BYTE_END>
   41b01:	movb   $0x0,(%rax)
   41b04:	add    $0x1,%rax

0000000000041b08 <..@38..EMIT_BYTE_END>:
   41b08:	sub    $0x8,%r9d
   41b0c:	mov    %r8,%rdx
   41b0f:	mov    %r9d,%ecx
   41b12:	shr    %cl,%rdx
   41b15:	mov    %dl,(%rax)
   41b17:	add    $0x1,%rax
   41b1b:	cmp    $0xff,%dl
   41b1e:	jne    41b27 <..@39..EMIT_BYTE_END>
   41b20:	movb   $0x0,(%rax)
   41b23:	add    $0x1,%rax

0000000000041b27 <..@39..EMIT_BYTE_END>:
   41b27:	sub    $0x8,%r9d
   41b2b:	mov    %r8,%rdx
   41b2e:	mov    %r9d,%ecx
   41b31:	shr    %cl,%rdx
   41b34:	mov    %dl,(%rax)
   41b36:	add    $0x1,%rax
   41b3a:	cmp    $0xff,%dl
   41b3d:	jne    41b46 <..@40..EMIT_BYTE_END>
   41b3f:	movb   $0x0,(%rax)
   41b42:	add    $0x1,%rax

0000000000041b46 <..@40..EMIT_BYTE_END>:
   41b46:	sub    $0x8,%r9d
   41b4a:	mov    %r8,%rdx
   41b4d:	mov    %r9d,%ecx
   41b50:	shr    %cl,%rdx
   41b53:	mov    %dl,(%rax)
   41b55:	add    $0x1,%rax
   41b59:	cmp    $0xff,%dl
   41b5c:	jne    41b65 <..@41..EMIT_BYTE_END>
   41b5e:	movb   $0x0,(%rax)
   41b61:	add    $0x1,%rax

0000000000041b65 <..@41..EMIT_BYTE_END>:
   41b65:	sub    $0x8,%r9d
   41b69:	mov    %r8,%rdx
   41b6c:	mov    %r9d,%ecx
   41b6f:	shr    %cl,%rdx
   41b72:	mov    %dl,(%rax)
   41b74:	add    $0x1,%rax
   41b78:	cmp    $0xff,%dl
   41b7b:	jne    41b84 <..@36..CHECKBUF47_END>
   41b7d:	movb   $0x0,(%rax)
   41b80:	add    $0x1,%rax

0000000000041b84 <..@36..CHECKBUF47_END>:
   41b84:	mov    %r14d,%ecx
   41b87:	add    %ecx,%r9d
   41b8a:	shl    %cl,%r8
   41b8d:	or     %r13,%r8
   41b90:	sub    $0x10,%r12
   41b94:	jmpq   41ab6 <jsimd_huff_encode_one_block_sse2.BRLOOP>

0000000000041b99 <jsimd_huff_encode_one_block_sse2.ERLOOP>:
   41b99:	cmp    $0x20,%r9d
   41b9d:	jl     41c1b <..@44..CHECKBUF31_END>
   41b9f:	sub    $0x8,%r9d
   41ba3:	mov    %r8,%rdx
   41ba6:	mov    %r9d,%ecx
   41ba9:	shr    %cl,%rdx
   41bac:	mov    %dl,(%rax)
   41bae:	add    $0x1,%rax
   41bb2:	cmp    $0xff,%dl
   41bb5:	jne    41bbe <..@45..EMIT_BYTE_END>
   41bb7:	movb   $0x0,(%rax)
   41bba:	add    $0x1,%rax

0000000000041bbe <..@45..EMIT_BYTE_END>:
   41bbe:	sub    $0x8,%r9d
   41bc2:	mov    %r8,%rdx
   41bc5:	mov    %r9d,%ecx
   41bc8:	shr    %cl,%rdx
   41bcb:	mov    %dl,(%rax)
   41bcd:	add    $0x1,%rax
   41bd1:	cmp    $0xff,%dl
   41bd4:	jne    41bdd <..@46..EMIT_BYTE_END>
   41bd6:	movb   $0x0,(%rax)
   41bd9:	add    $0x1,%rax

0000000000041bdd <..@46..EMIT_BYTE_END>:
   41bdd:	sub    $0x8,%r9d
   41be1:	mov    %r8,%rdx
   41be4:	mov    %r9d,%ecx
   41be7:	shr    %cl,%rdx
   41bea:	mov    %dl,(%rax)
   41bec:	add    $0x1,%rax
   41bf0:	cmp    $0xff,%dl
   41bf3:	jne    41bfc <..@47..EMIT_BYTE_END>
   41bf5:	movb   $0x0,(%rax)
   41bf8:	add    $0x1,%rax

0000000000041bfc <..@47..EMIT_BYTE_END>:
   41bfc:	sub    $0x8,%r9d
   41c00:	mov    %r8,%rdx
   41c03:	mov    %r9d,%ecx
   41c06:	shr    %cl,%rdx
   41c09:	mov    %dl,(%rax)
   41c0b:	add    $0x1,%rax
   41c0f:	cmp    $0xff,%dl
   41c12:	jne    41c1b <..@44..CHECKBUF31_END>
   41c14:	movb   $0x0,(%rax)
   41c17:	add    $0x1,%rax

0000000000041c1b <..@44..CHECKBUF31_END>:
   41c1b:	shl    $0x4,%r12
   41c1f:	add    %rdi,%r12
   41c22:	mov    (%r15,%r12,4),%ebx
   41c26:	movzbl 0x400(%r15,%r12,1),%ecx
   41c2f:	add    %ecx,%r9d
   41c32:	shl    %cl,%r8
   41c35:	or     %rbx,%r8
   41c38:	movswl -0x80(%rsi),%ebx
   41c3c:	mov    %rdi,%rcx
   41c3f:	mov    $0x1,%edx
   41c44:	shl    %cl,%rdx
   41c47:	dec    %rdx
   41c4a:	and    %rdx,%rbx
   41c4d:	add    %ecx,%r9d
   41c50:	shl    %cl,%r8
   41c53:	or     %rbx,%r8
   41c56:	shr    %r11
   41c59:	add    $0x2,%rsi
   41c5d:	jmpq   41a92 <jsimd_huff_encode_one_block_sse2.BLOOP>

0000000000041c62 <jsimd_huff_encode_one_block_sse2.ELOOP>:
   41c62:	lea    -0x2(%rbp),%rdi
   41c66:	cmp    %rsi,%rdi
   41c69:	je     41d4a <jsimd_huff_encode_one_block_sse2.EFN>
   41c6f:	mov    (%r15),%ebx
   41c72:	movzbl 0x400(%r15),%r12d
   41c7a:	cmp    $0x30,%r9d
   41c7e:	jl     41d3e <..@52..CHECKBUF47_END>
   41c84:	sub    $0x8,%r9d
   41c88:	mov    %r8,%rdx
   41c8b:	mov    %r9d,%ecx
   41c8e:	shr    %cl,%rdx
   41c91:	mov    %dl,(%rax)
   41c93:	add    $0x1,%rax
   41c97:	cmp    $0xff,%dl
   41c9a:	jne    41ca3 <..@53..EMIT_BYTE_END>
   41c9c:	movb   $0x0,(%rax)
   41c9f:	add    $0x1,%rax

0000000000041ca3 <..@53..EMIT_BYTE_END>:
   41ca3:	sub    $0x8,%r9d
   41ca7:	mov    %r8,%rdx
   41caa:	mov    %r9d,%ecx
   41cad:	shr    %cl,%rdx
   41cb0:	mov    %dl,(%rax)
   41cb2:	add    $0x1,%rax
   41cb6:	cmp    $0xff,%dl
   41cb9:	jne    41cc2 <..@54..EMIT_BYTE_END>
   41cbb:	movb   $0x0,(%rax)
   41cbe:	add    $0x1,%rax

0000000000041cc2 <..@54..EMIT_BYTE_END>:
   41cc2:	sub    $0x8,%r9d
   41cc6:	mov    %r8,%rdx
   41cc9:	mov    %r9d,%ecx
   41ccc:	shr    %cl,%rdx
   41ccf:	mov    %dl,(%rax)
   41cd1:	add    $0x1,%rax
   41cd5:	cmp    $0xff,%dl
   41cd8:	jne    41ce1 <..@55..EMIT_BYTE_END>
   41cda:	movb   $0x0,(%rax)
   41cdd:	add    $0x1,%rax

0000000000041ce1 <..@55..EMIT_BYTE_END>:
   41ce1:	sub    $0x8,%r9d
   41ce5:	mov    %r8,%rdx
   41ce8:	mov    %r9d,%ecx
   41ceb:	shr    %cl,%rdx
   41cee:	mov    %dl,(%rax)
   41cf0:	add    $0x1,%rax
   41cf4:	cmp    $0xff,%dl
   41cf7:	jne    41d00 <..@56..EMIT_BYTE_END>
   41cf9:	movb   $0x0,(%rax)
   41cfc:	add    $0x1,%rax

0000000000041d00 <..@56..EMIT_BYTE_END>:
   41d00:	sub    $0x8,%r9d
   41d04:	mov    %r8,%rdx
   41d07:	mov    %r9d,%ecx
   41d0a:	shr    %cl,%rdx
   41d0d:	mov    %dl,(%rax)
   41d0f:	add    $0x1,%rax
   41d13:	cmp    $0xff,%dl
   41d16:	jne    41d1f <..@57..EMIT_BYTE_END>
   41d18:	movb   $0x0,(%rax)
   41d1b:	add    $0x1,%rax

0000000000041d1f <..@57..EMIT_BYTE_END>:
   41d1f:	sub    $0x8,%r9d
   41d23:	mov    %r8,%rdx
   41d26:	mov    %r9d,%ecx
   41d29:	shr    %cl,%rdx
   41d2c:	mov    %dl,(%rax)
   41d2e:	add    $0x1,%rax
   41d32:	cmp    $0xff,%dl
   41d35:	jne    41d3e <..@52..CHECKBUF47_END>
   41d37:	movb   $0x0,(%rax)
   41d3a:	add    $0x1,%rax

0000000000041d3e <..@52..CHECKBUF47_END>:
   41d3e:	mov    %r12d,%ecx
   41d41:	add    %ecx,%r9d
   41d44:	shl    %cl,%r8
   41d47:	or     %rbx,%r8

0000000000041d4a <jsimd_huff_encode_one_block_sse2.EFN>:
   41d4a:	pop    %r10
   41d4c:	mov    %r8,0x10(%r10)
   41d50:	mov    %r9d,0x18(%r10)
   41d54:	pop    %rbx
   41d55:	pop    %r15
   41d57:	pop    %r14
   41d59:	pop    %r13
   41d5b:	pop    %r12
   41d5d:	pop    %r11
   41d5f:	pop    %r10
   41d61:	mov    %rbp,%rsp
   41d64:	pop    %rsp
   41d65:	pop    %rbp
   41d66:	retq   
   41d67:	nop
   41d68:	nop
   41d69:	nop
   41d6a:	nop
   41d6b:	nop
   41d6c:	nop
   41d6d:	nop
   41d6e:	nop
   41d6f:	nop

0000000000041d70 <jsimd_h2v1_downsample_sse2>:
   41d70:	push   %rbp
   41d71:	mov    %rsp,%rax
   41d74:	mov    %rsp,%rbp
   41d77:	push   %r10
   41d79:	push   %r11
   41d7b:	push   %r12
   41d7d:	push   %r13
   41d7f:	push   %r14
   41d81:	push   %r15
   41d83:	mov    %rdi,%r10
   41d86:	mov    %rsi,%r11
   41d89:	mov    %rdx,%r12
   41d8c:	mov    %rcx,%r13
   41d8f:	mov    %r8,%r14
   41d92:	mov    %r9,%r15
   41d95:	mov    %r13d,%ecx
   41d98:	shl    $0x3,%rcx
   41d9c:	je     41e89 <jsimd_h2v1_downsample_sse2.return>
   41da2:	mov    %r10d,%edx
   41da5:	push   %rcx
   41da6:	shl    %rcx
   41da9:	sub    %rdx,%rcx
   41dac:	jle    41dd2 <jsimd_h2v1_downsample_sse2.expand_end>
   41dae:	mov    %r11,%rax
   41db1:	test   %rax,%rax
   41db4:	jle    41dd2 <jsimd_h2v1_downsample_sse2.expand_end>
   41db6:	cld    
   41db7:	mov    %r14,%rsi

0000000000041dba <jsimd_h2v1_downsample_sse2.expandloop>:
   41dba:	push   %rax
   41dbb:	push   %rcx
   41dbc:	mov    (%rsi),%rdi
   41dbf:	add    %rdx,%rdi
   41dc2:	mov    -0x1(%rdi),%al
   41dc5:	rep stos %al,%es:(%rdi)
   41dc7:	pop    %rcx
   41dc8:	pop    %rax
   41dc9:	add    $0x8,%rsi
   41dcd:	dec    %rax
   41dd0:	jg     41dba <jsimd_h2v1_downsample_sse2.expandloop>

0000000000041dd2 <jsimd_h2v1_downsample_sse2.expand_end>:
   41dd2:	pop    %rcx
   41dd3:	mov    %r12d,%eax
   41dd6:	test   %eax,%eax
   41dd8:	jle    41e89 <jsimd_h2v1_downsample_sse2.return>
   41dde:	mov    $0x10000,%edx
   41de3:	movd   %edx,%xmm7
   41de7:	pcmpeqw %xmm6,%xmm6
   41deb:	pshufd $0x0,%xmm7,%xmm7
   41df0:	psrlw  $0x8,%xmm6
   41df5:	mov    %r14,%rsi
   41df8:	mov    %r15,%rdi

0000000000041dfb <jsimd_h2v1_downsample_sse2.rowloop>:
   41dfb:	push   %rcx
   41dfc:	push   %rdi
   41dfd:	push   %rsi
   41dfe:	mov    (%rsi),%rsi
   41e01:	mov    (%rdi),%rdi
   41e04:	cmp    $0x10,%rcx
   41e08:	jae    41e19 <jsimd_h2v1_downsample_sse2.columnloop>

0000000000041e0a <jsimd_h2v1_downsample_sse2.columnloop_r8>:
   41e0a:	movdqa (%rsi),%xmm0
   41e0e:	pxor   %xmm1,%xmm1
   41e12:	mov    $0x10,%ecx
   41e17:	jmp    41e22 <jsimd_h2v1_downsample_sse2.downsample>

0000000000041e19 <jsimd_h2v1_downsample_sse2.columnloop>:
   41e19:	movdqa (%rsi),%xmm0
   41e1d:	movdqa 0x10(%rsi),%xmm1

0000000000041e22 <jsimd_h2v1_downsample_sse2.downsample>:
   41e22:	movdqa %xmm0,%xmm2
   41e26:	movdqa %xmm1,%xmm3
   41e2a:	pand   %xmm6,%xmm0
   41e2e:	psrlw  $0x8,%xmm2
   41e33:	pand   %xmm6,%xmm1
   41e37:	psrlw  $0x8,%xmm3
   41e3c:	paddw  %xmm2,%xmm0
   41e40:	paddw  %xmm3,%xmm1
   41e44:	paddw  %xmm7,%xmm0
   41e48:	paddw  %xmm7,%xmm1
   41e4c:	psrlw  $0x1,%xmm0
   41e51:	psrlw  $0x1,%xmm1
   41e56:	packuswb %xmm1,%xmm0
   41e5a:	movdqa %xmm0,(%rdi)
   41e5e:	sub    $0x10,%rcx
   41e62:	add    $0x20,%rsi
   41e66:	add    $0x10,%rdi
   41e6a:	cmp    $0x10,%rcx
   41e6e:	jae    41e19 <jsimd_h2v1_downsample_sse2.columnloop>
   41e70:	test   %rcx,%rcx
   41e73:	jne    41e0a <jsimd_h2v1_downsample_sse2.columnloop_r8>
   41e75:	pop    %rsi
   41e76:	pop    %rdi
   41e77:	pop    %rcx
   41e78:	add    $0x8,%rsi
   41e7c:	add    $0x8,%rdi
   41e80:	dec    %rax
   41e83:	jg     41dfb <jsimd_h2v1_downsample_sse2.rowloop>

0000000000041e89 <jsimd_h2v1_downsample_sse2.return>:
   41e89:	pop    %r15
   41e8b:	pop    %r14
   41e8d:	pop    %r13
   41e8f:	pop    %r12
   41e91:	pop    %r11
   41e93:	pop    %r10
   41e95:	pop    %rbp
   41e96:	retq   
   41e97:	nop
   41e98:	nop
   41e99:	nop
   41e9a:	nop
   41e9b:	nop
   41e9c:	nop
   41e9d:	nop
   41e9e:	nop
   41e9f:	nop

0000000000041ea0 <jsimd_h2v2_downsample_sse2>:
   41ea0:	push   %rbp
   41ea1:	mov    %rsp,%rax
   41ea4:	mov    %rsp,%rbp
   41ea7:	push   %r10
   41ea9:	push   %r11
   41eab:	push   %r12
   41ead:	push   %r13
   41eaf:	push   %r14
   41eb1:	push   %r15
   41eb3:	mov    %rdi,%r10
   41eb6:	mov    %rsi,%r11
   41eb9:	mov    %rdx,%r12
   41ebc:	mov    %rcx,%r13
   41ebf:	mov    %r8,%r14
   41ec2:	mov    %r9,%r15
   41ec5:	mov    %r13d,%ecx
   41ec8:	shl    $0x3,%rcx
   41ecc:	je     42005 <jsimd_h2v2_downsample_sse2.return>
   41ed2:	mov    %r10d,%edx
   41ed5:	push   %rcx
   41ed6:	shl    %rcx
   41ed9:	sub    %rdx,%rcx
   41edc:	jle    41f02 <jsimd_h2v2_downsample_sse2.expand_end>
   41ede:	mov    %r11,%rax
   41ee1:	test   %rax,%rax
   41ee4:	jle    41f02 <jsimd_h2v2_downsample_sse2.expand_end>
   41ee6:	cld    
   41ee7:	mov    %r14,%rsi

0000000000041eea <jsimd_h2v2_downsample_sse2.expandloop>:
   41eea:	push   %rax
   41eeb:	push   %rcx
   41eec:	mov    (%rsi),%rdi
   41eef:	add    %rdx,%rdi
   41ef2:	mov    -0x1(%rdi),%al
   41ef5:	rep stos %al,%es:(%rdi)
   41ef7:	pop    %rcx
   41ef8:	pop    %rax
   41ef9:	add    $0x8,%rsi
   41efd:	dec    %rax
   41f00:	jg     41eea <jsimd_h2v2_downsample_sse2.expandloop>

0000000000041f02 <jsimd_h2v2_downsample_sse2.expand_end>:
   41f02:	pop    %rcx
   41f03:	mov    %r12d,%eax
   41f06:	test   %rax,%rax
   41f09:	jle    42005 <jsimd_h2v2_downsample_sse2.return>
   41f0f:	mov    $0x20001,%edx
   41f14:	movd   %edx,%xmm7
   41f18:	pcmpeqw %xmm6,%xmm6
   41f1c:	pshufd $0x0,%xmm7,%xmm7
   41f21:	psrlw  $0x8,%xmm6
   41f26:	mov    %r14,%rsi
   41f29:	mov    %r15,%rdi

0000000000041f2c <jsimd_h2v2_downsample_sse2.rowloop>:
   41f2c:	push   %rcx
   41f2d:	push   %rdi
   41f2e:	push   %rsi
   41f2f:	mov    (%rsi),%rdx
   41f32:	mov    0x8(%rsi),%rsi
   41f36:	mov    (%rdi),%rdi
   41f39:	cmp    $0x10,%rcx
   41f3d:	jae    41f56 <jsimd_h2v2_downsample_sse2.columnloop>

0000000000041f3f <jsimd_h2v2_downsample_sse2.columnloop_r8>:
   41f3f:	movdqa (%rdx),%xmm0
   41f43:	movdqa (%rsi),%xmm1
   41f47:	pxor   %xmm2,%xmm2
   41f4b:	pxor   %xmm3,%xmm3
   41f4f:	mov    $0x10,%ecx
   41f54:	jmp    41f68 <jsimd_h2v2_downsample_sse2.downsample>

0000000000041f56 <jsimd_h2v2_downsample_sse2.columnloop>:
   41f56:	movdqa (%rdx),%xmm0
   41f5a:	movdqa (%rsi),%xmm1
   41f5e:	movdqa 0x10(%rdx),%xmm2
   41f63:	movdqa 0x10(%rsi),%xmm3

0000000000041f68 <jsimd_h2v2_downsample_sse2.downsample>:
   41f68:	movdqa %xmm0,%xmm4
   41f6c:	movdqa %xmm1,%xmm5
   41f70:	pand   %xmm6,%xmm0
   41f74:	psrlw  $0x8,%xmm4
   41f79:	pand   %xmm6,%xmm1
   41f7d:	psrlw  $0x8,%xmm5
   41f82:	paddw  %xmm4,%xmm0
   41f86:	paddw  %xmm5,%xmm1
   41f8a:	movdqa %xmm2,%xmm4
   41f8e:	movdqa %xmm3,%xmm5
   41f92:	pand   %xmm6,%xmm2
   41f96:	psrlw  $0x8,%xmm4
   41f9b:	pand   %xmm6,%xmm3
   41f9f:	psrlw  $0x8,%xmm5
   41fa4:	paddw  %xmm4,%xmm2
   41fa8:	paddw  %xmm5,%xmm3
   41fac:	paddw  %xmm1,%xmm0
   41fb0:	paddw  %xmm3,%xmm2
   41fb4:	paddw  %xmm7,%xmm0
   41fb8:	paddw  %xmm7,%xmm2
   41fbc:	psrlw  $0x2,%xmm0
   41fc1:	psrlw  $0x2,%xmm2
   41fc6:	packuswb %xmm2,%xmm0
   41fca:	movdqa %xmm0,(%rdi)
   41fce:	sub    $0x10,%rcx
   41fd2:	add    $0x20,%rdx
   41fd6:	add    $0x20,%rsi
   41fda:	add    $0x10,%rdi
   41fde:	cmp    $0x10,%rcx
   41fe2:	jae    41f56 <jsimd_h2v2_downsample_sse2.columnloop>
   41fe8:	test   %rcx,%rcx
   41feb:	jne    41f3f <jsimd_h2v2_downsample_sse2.columnloop_r8>
   41ff1:	pop    %rsi
   41ff2:	pop    %rdi
   41ff3:	pop    %rcx
   41ff4:	add    $0x10,%rsi
   41ff8:	add    $0x8,%rdi
   41ffc:	dec    %rax
   41fff:	jg     41f2c <jsimd_h2v2_downsample_sse2.rowloop>

0000000000042005 <jsimd_h2v2_downsample_sse2.return>:
   42005:	pop    %r15
   42007:	pop    %r14
   42009:	pop    %r13
   4200b:	pop    %r12
   4200d:	pop    %r11
   4200f:	pop    %r10
   42011:	pop    %rbp
   42012:	retq   
   42013:	nop
   42014:	nop
   42015:	nop
   42016:	nop
   42017:	nop
   42018:	nop
   42019:	nop
   4201a:	nop
   4201b:	nop
   4201c:	nop
   4201d:	nop
   4201e:	nop
   4201f:	nop

0000000000042020 <jsimd_ycc_rgb_convert_sse2>:
   42020:	push   %rbp
   42021:	mov    %rsp,%rax
   42024:	sub    $0x4,%rsp
   42028:	and    $0xfffffffffffffff0,%rsp
   4202c:	mov    %rax,(%rsp)
   42030:	mov    %rsp,%rbp
   42033:	lea    -0x20(%rbp),%rsp
   42037:	push   %r10
   42039:	push   %r11
   4203b:	push   %r12
   4203d:	push   %r13
   4203f:	push   %r14
   42041:	push   %r15
   42043:	mov    %rdi,%r10
   42046:	mov    %rsi,%r11
   42049:	mov    %rdx,%r12
   4204c:	mov    %rcx,%r13
   4204f:	mov    %r8,%r14
   42052:	mov    %r9,%r15
   42055:	push   %rbx
   42056:	mov    %r10d,%ecx
   42059:	test   %rcx,%rcx
   4205c:	je     423ac <jsimd_ycc_rgb_convert_sse2.return>
   42062:	push   %rcx
   42063:	mov    %r11,%rdi
   42066:	mov    %r12d,%ecx
   42069:	mov    (%rdi),%rsi
   4206c:	mov    0x8(%rdi),%rbx
   42070:	mov    0x10(%rdi),%rdx
   42074:	lea    (%rsi,%rcx,8),%rsi
   42078:	lea    (%rbx,%rcx,8),%rbx
   4207c:	lea    (%rdx,%rcx,8),%rdx
   42080:	pop    %rcx
   42081:	mov    %r13,%rdi
   42084:	mov    %r14d,%eax
   42087:	test   %rax,%rax
   4208a:	jle    423ac <jsimd_ycc_rgb_convert_sse2.return>

0000000000042090 <jsimd_ycc_rgb_convert_sse2.rowloop>:
   42090:	push   %rax
   42091:	push   %rdi
   42092:	push   %rdx
   42093:	push   %rbx
   42094:	push   %rsi
   42095:	push   %rcx
   42096:	mov    (%rsi),%rsi
   42099:	mov    (%rbx),%rbx
   4209c:	mov    (%rdx),%rdx
   4209f:	mov    (%rdi),%rdi

00000000000420a2 <jsimd_ycc_rgb_convert_sse2.columnloop>:
   420a2:	movdqa (%rbx),%xmm5
   420a6:	movdqa (%rdx),%xmm1
   420aa:	pcmpeqw %xmm4,%xmm4
   420ae:	pcmpeqw %xmm7,%xmm7
   420b2:	psrlw  $0x8,%xmm4
   420b7:	psllw  $0x7,%xmm7
   420bc:	movdqa %xmm4,%xmm0
   420c0:	pand   %xmm5,%xmm4
   420c4:	psrlw  $0x8,%xmm5
   420c9:	pand   %xmm1,%xmm0
   420cd:	psrlw  $0x8,%xmm1
   420d2:	paddw  %xmm7,%xmm4
   420d6:	paddw  %xmm7,%xmm5
   420da:	paddw  %xmm7,%xmm0
   420de:	paddw  %xmm7,%xmm1
   420e2:	movdqa %xmm4,%xmm2
   420e6:	movdqa %xmm5,%xmm3
   420ea:	paddw  %xmm4,%xmm4
   420ee:	paddw  %xmm5,%xmm5
   420f2:	movdqa %xmm0,%xmm6
   420f6:	movdqa %xmm1,%xmm7
   420fa:	paddw  %xmm0,%xmm0
   420fe:	paddw  %xmm1,%xmm1
   42102:	pmulhw 0x29bb6(%rip),%xmm4        # 6bcc0 <PW_MF0228>
   4210a:	pmulhw 0x29bae(%rip),%xmm5        # 6bcc0 <PW_MF0228>
   42112:	pmulhw 0x29b96(%rip),%xmm0        # 6bcb0 <PW_F0402>
   4211a:	pmulhw 0x29b8e(%rip),%xmm1        # 6bcb0 <PW_F0402>
   42122:	paddw  0x29bb6(%rip),%xmm4        # 6bce0 <PW_ONE>
   4212a:	paddw  0x29bae(%rip),%xmm5        # 6bce0 <PW_ONE>
   42132:	psraw  $0x1,%xmm4
   42137:	psraw  $0x1,%xmm5
   4213c:	paddw  0x29b9c(%rip),%xmm0        # 6bce0 <PW_ONE>
   42144:	paddw  0x29b94(%rip),%xmm1        # 6bce0 <PW_ONE>
   4214c:	psraw  $0x1,%xmm0
   42151:	psraw  $0x1,%xmm1
   42156:	paddw  %xmm2,%xmm4
   4215a:	paddw  %xmm3,%xmm5
   4215e:	paddw  %xmm2,%xmm4
   42162:	paddw  %xmm3,%xmm5
   42166:	paddw  %xmm6,%xmm0
   4216a:	paddw  %xmm7,%xmm1
   4216e:	movdqa %xmm4,-0x20(%rbp)
   42173:	movdqa %xmm5,-0x10(%rbp)
   42178:	movdqa %xmm2,%xmm4
   4217c:	movdqa %xmm3,%xmm5
   42180:	punpcklwd %xmm6,%xmm2
   42184:	punpckhwd %xmm6,%xmm4
   42188:	pmaddwd 0x29b40(%rip),%xmm2        # 6bcd0 <PW_MF0344_F0285>
   42190:	pmaddwd 0x29b38(%rip),%xmm4        # 6bcd0 <PW_MF0344_F0285>
   42198:	punpcklwd %xmm7,%xmm3
   4219c:	punpckhwd %xmm7,%xmm5
   421a0:	pmaddwd 0x29b28(%rip),%xmm3        # 6bcd0 <PW_MF0344_F0285>
   421a8:	pmaddwd 0x29b20(%rip),%xmm5        # 6bcd0 <PW_MF0344_F0285>
   421b0:	paddd  0x29b38(%rip),%xmm2        # 6bcf0 <PD_ONEHALF>
   421b8:	paddd  0x29b30(%rip),%xmm4        # 6bcf0 <PD_ONEHALF>
   421c0:	psrad  $0x10,%xmm2
   421c5:	psrad  $0x10,%xmm4
   421ca:	paddd  0x29b1e(%rip),%xmm3        # 6bcf0 <PD_ONEHALF>
   421d2:	paddd  0x29b16(%rip),%xmm5        # 6bcf0 <PD_ONEHALF>
   421da:	psrad  $0x10,%xmm3
   421df:	psrad  $0x10,%xmm5
   421e4:	packssdw %xmm4,%xmm2
   421e8:	packssdw %xmm5,%xmm3
   421ec:	psubw  %xmm6,%xmm2
   421f0:	psubw  %xmm7,%xmm3
   421f4:	movdqa (%rsi),%xmm5
   421f8:	pcmpeqw %xmm4,%xmm4
   421fc:	psrlw  $0x8,%xmm4
   42201:	pand   %xmm5,%xmm4
   42205:	psrlw  $0x8,%xmm5
   4220a:	paddw  %xmm4,%xmm0
   4220e:	paddw  %xmm5,%xmm1
   42212:	packuswb %xmm0,%xmm0
   42216:	packuswb %xmm1,%xmm1
   4221a:	paddw  %xmm4,%xmm2
   4221e:	paddw  %xmm5,%xmm3
   42222:	packuswb %xmm2,%xmm2
   42226:	packuswb %xmm3,%xmm3
   4222a:	paddw  -0x20(%rbp),%xmm4
   4222f:	paddw  -0x10(%rbp),%xmm5
   42234:	packuswb %xmm4,%xmm4
   42238:	packuswb %xmm5,%xmm5
   4223c:	punpcklbw %xmm2,%xmm0
   42240:	punpcklbw %xmm1,%xmm4
   42244:	punpcklbw %xmm5,%xmm3
   42248:	movdqa %xmm0,%xmm6
   4224c:	movdqa %xmm0,%xmm7
   42250:	punpcklwd %xmm4,%xmm0
   42254:	punpckhwd %xmm4,%xmm6
   42258:	psrldq $0x2,%xmm7
   4225d:	psrldq $0x2,%xmm4
   42262:	movdqa %xmm3,%xmm2
   42266:	movdqa %xmm3,%xmm1
   4226a:	punpcklwd %xmm7,%xmm3
   4226e:	punpckhwd %xmm7,%xmm2
   42272:	psrldq $0x2,%xmm1
   42277:	movdqa %xmm4,%xmm5
   4227b:	punpcklwd %xmm1,%xmm4
   4227f:	punpckhwd %xmm1,%xmm5
   42283:	pshufd $0x4e,%xmm0,%xmm7
   42288:	movdqa %xmm4,%xmm1
   4228c:	punpckldq %xmm3,%xmm0
   42290:	punpckldq %xmm7,%xmm4
   42294:	punpckhdq %xmm1,%xmm3
   42298:	pshufd $0x4e,%xmm6,%xmm7
   4229d:	movdqa %xmm5,%xmm1
   422a1:	punpckldq %xmm2,%xmm6
   422a5:	punpckldq %xmm7,%xmm5
   422a9:	punpckhdq %xmm1,%xmm2
   422ad:	punpcklqdq %xmm4,%xmm0
   422b1:	punpcklqdq %xmm6,%xmm3
   422b5:	punpcklqdq %xmm2,%xmm5
   422b9:	cmp    $0x10,%rcx
   422bd:	jb     42305 <jsimd_ycc_rgb_convert_sse2.column_st32>
   422bf:	test   $0xf,%rdi
   422c6:	jne    422d8 <jsimd_ycc_rgb_convert_sse2.out1>
   422c8:	movntdq %xmm0,(%rdi)
   422cc:	movntdq %xmm3,0x10(%rdi)
   422d1:	movntdq %xmm5,0x20(%rdi)
   422d6:	jmp    422e6 <jsimd_ycc_rgb_convert_sse2.out0>

00000000000422d8 <jsimd_ycc_rgb_convert_sse2.out1>:
   422d8:	movdqu %xmm0,(%rdi)
   422dc:	movdqu %xmm3,0x10(%rdi)
   422e1:	movdqu %xmm5,0x20(%rdi)

00000000000422e6 <jsimd_ycc_rgb_convert_sse2.out0>:
   422e6:	add    $0x30,%rdi
   422ea:	sub    $0x10,%rcx
   422ee:	je     4238a <jsimd_ycc_rgb_convert_sse2.nextrow>
   422f4:	add    $0x10,%rsi
   422f8:	add    $0x10,%rbx
   422fc:	add    $0x10,%rdx
   42300:	jmpq   420a2 <jsimd_ycc_rgb_convert_sse2.columnloop>

0000000000042305 <jsimd_ycc_rgb_convert_sse2.column_st32>:
   42305:	lea    (%rcx,%rcx,2),%rcx
   42309:	cmp    $0x20,%rcx
   4230d:	jb     42326 <jsimd_ycc_rgb_convert_sse2.column_st16>
   4230f:	movdqu %xmm0,(%rdi)
   42313:	movdqu %xmm3,0x10(%rdi)
   42318:	add    $0x20,%rdi
   4231c:	movdqa %xmm5,%xmm0
   42320:	sub    $0x20,%rcx
   42324:	jmp    4233c <jsimd_ycc_rgb_convert_sse2.column_st15>

0000000000042326 <jsimd_ycc_rgb_convert_sse2.column_st16>:
   42326:	cmp    $0x10,%rcx
   4232a:	jb     4233c <jsimd_ycc_rgb_convert_sse2.column_st15>
   4232c:	movdqu %xmm0,(%rdi)
   42330:	add    $0x10,%rdi
   42334:	movdqa %xmm3,%xmm0
   42338:	sub    $0x10,%rcx

000000000004233c <jsimd_ycc_rgb_convert_sse2.column_st15>:
   4233c:	cmp    $0x8,%rcx
   42340:	jb     42353 <jsimd_ycc_rgb_convert_sse2.column_st7>
   42342:	movq   %xmm0,(%rdi)
   42346:	add    $0x8,%rdi
   4234a:	sub    $0x8,%rcx
   4234e:	psrldq $0x8,%xmm0

0000000000042353 <jsimd_ycc_rgb_convert_sse2.column_st7>:
   42353:	cmp    $0x4,%rcx
   42357:	jb     4236a <jsimd_ycc_rgb_convert_sse2.column_st3>
   42359:	movd   %xmm0,(%rdi)
   4235d:	add    $0x4,%rdi
   42361:	sub    $0x4,%rcx
   42365:	psrldq $0x4,%xmm0

000000000004236a <jsimd_ycc_rgb_convert_sse2.column_st3>:
   4236a:	movd   %xmm0,%eax
   4236e:	cmp    $0x2,%rcx
   42372:	jb     42383 <jsimd_ycc_rgb_convert_sse2.column_st1>
   42374:	mov    %ax,(%rdi)
   42377:	add    $0x2,%rdi
   4237b:	sub    $0x2,%rcx
   4237f:	shr    $0x10,%rax

0000000000042383 <jsimd_ycc_rgb_convert_sse2.column_st1>:
   42383:	test   %rcx,%rcx
   42386:	je     4238a <jsimd_ycc_rgb_convert_sse2.nextrow>
   42388:	mov    %al,(%rdi)

000000000004238a <jsimd_ycc_rgb_convert_sse2.nextrow>:
   4238a:	pop    %rcx
   4238b:	pop    %rsi
   4238c:	pop    %rbx
   4238d:	pop    %rdx
   4238e:	pop    %rdi
   4238f:	pop    %rax
   42390:	add    $0x8,%rsi
   42394:	add    $0x8,%rbx
   42398:	add    $0x8,%rdx
   4239c:	add    $0x8,%rdi
   423a0:	dec    %rax
   423a3:	jg     42090 <jsimd_ycc_rgb_convert_sse2.rowloop>
   423a9:	sfence 

00000000000423ac <jsimd_ycc_rgb_convert_sse2.return>:
   423ac:	pop    %rbx
   423ad:	pop    %r15
   423af:	pop    %r14
   423b1:	pop    %r13
   423b3:	pop    %r12
   423b5:	pop    %r11
   423b7:	pop    %r10
   423b9:	mov    %rbp,%rsp
   423bc:	pop    %rsp
   423bd:	pop    %rbp
   423be:	retq   
   423bf:	nop

00000000000423c0 <jsimd_ycc_extrgb_convert_sse2>:
   423c0:	push   %rbp
   423c1:	mov    %rsp,%rax
   423c4:	sub    $0x4,%rsp
   423c8:	and    $0xfffffffffffffff0,%rsp
   423cc:	mov    %rax,(%rsp)
   423d0:	mov    %rsp,%rbp
   423d3:	lea    -0x20(%rbp),%rsp
   423d7:	push   %r10
   423d9:	push   %r11
   423db:	push   %r12
   423dd:	push   %r13
   423df:	push   %r14
   423e1:	push   %r15
   423e3:	mov    %rdi,%r10
   423e6:	mov    %rsi,%r11
   423e9:	mov    %rdx,%r12
   423ec:	mov    %rcx,%r13
   423ef:	mov    %r8,%r14
   423f2:	mov    %r9,%r15
   423f5:	push   %rbx
   423f6:	mov    %r10d,%ecx
   423f9:	test   %rcx,%rcx
   423fc:	je     4274c <jsimd_ycc_extrgb_convert_sse2.return>
   42402:	push   %rcx
   42403:	mov    %r11,%rdi
   42406:	mov    %r12d,%ecx
   42409:	mov    (%rdi),%rsi
   4240c:	mov    0x8(%rdi),%rbx
   42410:	mov    0x10(%rdi),%rdx
   42414:	lea    (%rsi,%rcx,8),%rsi
   42418:	lea    (%rbx,%rcx,8),%rbx
   4241c:	lea    (%rdx,%rcx,8),%rdx
   42420:	pop    %rcx
   42421:	mov    %r13,%rdi
   42424:	mov    %r14d,%eax
   42427:	test   %rax,%rax
   4242a:	jle    4274c <jsimd_ycc_extrgb_convert_sse2.return>

0000000000042430 <jsimd_ycc_extrgb_convert_sse2.rowloop>:
   42430:	push   %rax
   42431:	push   %rdi
   42432:	push   %rdx
   42433:	push   %rbx
   42434:	push   %rsi
   42435:	push   %rcx
   42436:	mov    (%rsi),%rsi
   42439:	mov    (%rbx),%rbx
   4243c:	mov    (%rdx),%rdx
   4243f:	mov    (%rdi),%rdi

0000000000042442 <jsimd_ycc_extrgb_convert_sse2.columnloop>:
   42442:	movdqa (%rbx),%xmm5
   42446:	movdqa (%rdx),%xmm1
   4244a:	pcmpeqw %xmm4,%xmm4
   4244e:	pcmpeqw %xmm7,%xmm7
   42452:	psrlw  $0x8,%xmm4
   42457:	psllw  $0x7,%xmm7
   4245c:	movdqa %xmm4,%xmm0
   42460:	pand   %xmm5,%xmm4
   42464:	psrlw  $0x8,%xmm5
   42469:	pand   %xmm1,%xmm0
   4246d:	psrlw  $0x8,%xmm1
   42472:	paddw  %xmm7,%xmm4
   42476:	paddw  %xmm7,%xmm5
   4247a:	paddw  %xmm7,%xmm0
   4247e:	paddw  %xmm7,%xmm1
   42482:	movdqa %xmm4,%xmm2
   42486:	movdqa %xmm5,%xmm3
   4248a:	paddw  %xmm4,%xmm4
   4248e:	paddw  %xmm5,%xmm5
   42492:	movdqa %xmm0,%xmm6
   42496:	movdqa %xmm1,%xmm7
   4249a:	paddw  %xmm0,%xmm0
   4249e:	paddw  %xmm1,%xmm1
   424a2:	pmulhw 0x29816(%rip),%xmm4        # 6bcc0 <PW_MF0228>
   424aa:	pmulhw 0x2980e(%rip),%xmm5        # 6bcc0 <PW_MF0228>
   424b2:	pmulhw 0x297f6(%rip),%xmm0        # 6bcb0 <PW_F0402>
   424ba:	pmulhw 0x297ee(%rip),%xmm1        # 6bcb0 <PW_F0402>
   424c2:	paddw  0x29816(%rip),%xmm4        # 6bce0 <PW_ONE>
   424ca:	paddw  0x2980e(%rip),%xmm5        # 6bce0 <PW_ONE>
   424d2:	psraw  $0x1,%xmm4
   424d7:	psraw  $0x1,%xmm5
   424dc:	paddw  0x297fc(%rip),%xmm0        # 6bce0 <PW_ONE>
   424e4:	paddw  0x297f4(%rip),%xmm1        # 6bce0 <PW_ONE>
   424ec:	psraw  $0x1,%xmm0
   424f1:	psraw  $0x1,%xmm1
   424f6:	paddw  %xmm2,%xmm4
   424fa:	paddw  %xmm3,%xmm5
   424fe:	paddw  %xmm2,%xmm4
   42502:	paddw  %xmm3,%xmm5
   42506:	paddw  %xmm6,%xmm0
   4250a:	paddw  %xmm7,%xmm1
   4250e:	movdqa %xmm4,-0x20(%rbp)
   42513:	movdqa %xmm5,-0x10(%rbp)
   42518:	movdqa %xmm2,%xmm4
   4251c:	movdqa %xmm3,%xmm5
   42520:	punpcklwd %xmm6,%xmm2
   42524:	punpckhwd %xmm6,%xmm4
   42528:	pmaddwd 0x297a0(%rip),%xmm2        # 6bcd0 <PW_MF0344_F0285>
   42530:	pmaddwd 0x29798(%rip),%xmm4        # 6bcd0 <PW_MF0344_F0285>
   42538:	punpcklwd %xmm7,%xmm3
   4253c:	punpckhwd %xmm7,%xmm5
   42540:	pmaddwd 0x29788(%rip),%xmm3        # 6bcd0 <PW_MF0344_F0285>
   42548:	pmaddwd 0x29780(%rip),%xmm5        # 6bcd0 <PW_MF0344_F0285>
   42550:	paddd  0x29798(%rip),%xmm2        # 6bcf0 <PD_ONEHALF>
   42558:	paddd  0x29790(%rip),%xmm4        # 6bcf0 <PD_ONEHALF>
   42560:	psrad  $0x10,%xmm2
   42565:	psrad  $0x10,%xmm4
   4256a:	paddd  0x2977e(%rip),%xmm3        # 6bcf0 <PD_ONEHALF>
   42572:	paddd  0x29776(%rip),%xmm5        # 6bcf0 <PD_ONEHALF>
   4257a:	psrad  $0x10,%xmm3
   4257f:	psrad  $0x10,%xmm5
   42584:	packssdw %xmm4,%xmm2
   42588:	packssdw %xmm5,%xmm3
   4258c:	psubw  %xmm6,%xmm2
   42590:	psubw  %xmm7,%xmm3
   42594:	movdqa (%rsi),%xmm5
   42598:	pcmpeqw %xmm4,%xmm4
   4259c:	psrlw  $0x8,%xmm4
   425a1:	pand   %xmm5,%xmm4
   425a5:	psrlw  $0x8,%xmm5
   425aa:	paddw  %xmm4,%xmm0
   425ae:	paddw  %xmm5,%xmm1
   425b2:	packuswb %xmm0,%xmm0
   425b6:	packuswb %xmm1,%xmm1
   425ba:	paddw  %xmm4,%xmm2
   425be:	paddw  %xmm5,%xmm3
   425c2:	packuswb %xmm2,%xmm2
   425c6:	packuswb %xmm3,%xmm3
   425ca:	paddw  -0x20(%rbp),%xmm4
   425cf:	paddw  -0x10(%rbp),%xmm5
   425d4:	packuswb %xmm4,%xmm4
   425d8:	packuswb %xmm5,%xmm5
   425dc:	punpcklbw %xmm2,%xmm0
   425e0:	punpcklbw %xmm1,%xmm4
   425e4:	punpcklbw %xmm5,%xmm3
   425e8:	movdqa %xmm0,%xmm6
   425ec:	movdqa %xmm0,%xmm7
   425f0:	punpcklwd %xmm4,%xmm0
   425f4:	punpckhwd %xmm4,%xmm6
   425f8:	psrldq $0x2,%xmm7
   425fd:	psrldq $0x2,%xmm4
   42602:	movdqa %xmm3,%xmm2
   42606:	movdqa %xmm3,%xmm1
   4260a:	punpcklwd %xmm7,%xmm3
   4260e:	punpckhwd %xmm7,%xmm2
   42612:	psrldq $0x2,%xmm1
   42617:	movdqa %xmm4,%xmm5
   4261b:	punpcklwd %xmm1,%xmm4
   4261f:	punpckhwd %xmm1,%xmm5
   42623:	pshufd $0x4e,%xmm0,%xmm7
   42628:	movdqa %xmm4,%xmm1
   4262c:	punpckldq %xmm3,%xmm0
   42630:	punpckldq %xmm7,%xmm4
   42634:	punpckhdq %xmm1,%xmm3
   42638:	pshufd $0x4e,%xmm6,%xmm7
   4263d:	movdqa %xmm5,%xmm1
   42641:	punpckldq %xmm2,%xmm6
   42645:	punpckldq %xmm7,%xmm5
   42649:	punpckhdq %xmm1,%xmm2
   4264d:	punpcklqdq %xmm4,%xmm0
   42651:	punpcklqdq %xmm6,%xmm3
   42655:	punpcklqdq %xmm2,%xmm5
   42659:	cmp    $0x10,%rcx
   4265d:	jb     426a5 <jsimd_ycc_extrgb_convert_sse2.column_st32>
   4265f:	test   $0xf,%rdi
   42666:	jne    42678 <jsimd_ycc_extrgb_convert_sse2.out1>
   42668:	movntdq %xmm0,(%rdi)
   4266c:	movntdq %xmm3,0x10(%rdi)
   42671:	movntdq %xmm5,0x20(%rdi)
   42676:	jmp    42686 <jsimd_ycc_extrgb_convert_sse2.out0>

0000000000042678 <jsimd_ycc_extrgb_convert_sse2.out1>:
   42678:	movdqu %xmm0,(%rdi)
   4267c:	movdqu %xmm3,0x10(%rdi)
   42681:	movdqu %xmm5,0x20(%rdi)

0000000000042686 <jsimd_ycc_extrgb_convert_sse2.out0>:
   42686:	add    $0x30,%rdi
   4268a:	sub    $0x10,%rcx
   4268e:	je     4272a <jsimd_ycc_extrgb_convert_sse2.nextrow>
   42694:	add    $0x10,%rsi
   42698:	add    $0x10,%rbx
   4269c:	add    $0x10,%rdx
   426a0:	jmpq   42442 <jsimd_ycc_extrgb_convert_sse2.columnloop>

00000000000426a5 <jsimd_ycc_extrgb_convert_sse2.column_st32>:
   426a5:	lea    (%rcx,%rcx,2),%rcx
   426a9:	cmp    $0x20,%rcx
   426ad:	jb     426c6 <jsimd_ycc_extrgb_convert_sse2.column_st16>
   426af:	movdqu %xmm0,(%rdi)
   426b3:	movdqu %xmm3,0x10(%rdi)
   426b8:	add    $0x20,%rdi
   426bc:	movdqa %xmm5,%xmm0
   426c0:	sub    $0x20,%rcx
   426c4:	jmp    426dc <jsimd_ycc_extrgb_convert_sse2.column_st15>

00000000000426c6 <jsimd_ycc_extrgb_convert_sse2.column_st16>:
   426c6:	cmp    $0x10,%rcx
   426ca:	jb     426dc <jsimd_ycc_extrgb_convert_sse2.column_st15>
   426cc:	movdqu %xmm0,(%rdi)
   426d0:	add    $0x10,%rdi
   426d4:	movdqa %xmm3,%xmm0
   426d8:	sub    $0x10,%rcx

00000000000426dc <jsimd_ycc_extrgb_convert_sse2.column_st15>:
   426dc:	cmp    $0x8,%rcx
   426e0:	jb     426f3 <jsimd_ycc_extrgb_convert_sse2.column_st7>
   426e2:	movq   %xmm0,(%rdi)
   426e6:	add    $0x8,%rdi
   426ea:	sub    $0x8,%rcx
   426ee:	psrldq $0x8,%xmm0

00000000000426f3 <jsimd_ycc_extrgb_convert_sse2.column_st7>:
   426f3:	cmp    $0x4,%rcx
   426f7:	jb     4270a <jsimd_ycc_extrgb_convert_sse2.column_st3>
   426f9:	movd   %xmm0,(%rdi)
   426fd:	add    $0x4,%rdi
   42701:	sub    $0x4,%rcx
   42705:	psrldq $0x4,%xmm0

000000000004270a <jsimd_ycc_extrgb_convert_sse2.column_st3>:
   4270a:	movd   %xmm0,%eax
   4270e:	cmp    $0x2,%rcx
   42712:	jb     42723 <jsimd_ycc_extrgb_convert_sse2.column_st1>
   42714:	mov    %ax,(%rdi)
   42717:	add    $0x2,%rdi
   4271b:	sub    $0x2,%rcx
   4271f:	shr    $0x10,%rax

0000000000042723 <jsimd_ycc_extrgb_convert_sse2.column_st1>:
   42723:	test   %rcx,%rcx
   42726:	je     4272a <jsimd_ycc_extrgb_convert_sse2.nextrow>
   42728:	mov    %al,(%rdi)

000000000004272a <jsimd_ycc_extrgb_convert_sse2.nextrow>:
   4272a:	pop    %rcx
   4272b:	pop    %rsi
   4272c:	pop    %rbx
   4272d:	pop    %rdx
   4272e:	pop    %rdi
   4272f:	pop    %rax
   42730:	add    $0x8,%rsi
   42734:	add    $0x8,%rbx
   42738:	add    $0x8,%rdx
   4273c:	add    $0x8,%rdi
   42740:	dec    %rax
   42743:	jg     42430 <jsimd_ycc_extrgb_convert_sse2.rowloop>
   42749:	sfence 

000000000004274c <jsimd_ycc_extrgb_convert_sse2.return>:
   4274c:	pop    %rbx
   4274d:	pop    %r15
   4274f:	pop    %r14
   42751:	pop    %r13
   42753:	pop    %r12
   42755:	pop    %r11
   42757:	pop    %r10
   42759:	mov    %rbp,%rsp
   4275c:	pop    %rsp
   4275d:	pop    %rbp
   4275e:	retq   
   4275f:	nop

0000000000042760 <jsimd_ycc_extrgbx_convert_sse2>:
   42760:	push   %rbp
   42761:	mov    %rsp,%rax
   42764:	sub    $0x4,%rsp
   42768:	and    $0xfffffffffffffff0,%rsp
   4276c:	mov    %rax,(%rsp)
   42770:	mov    %rsp,%rbp
   42773:	lea    -0x20(%rbp),%rsp
   42777:	push   %r10
   42779:	push   %r11
   4277b:	push   %r12
   4277d:	push   %r13
   4277f:	push   %r14
   42781:	push   %r15
   42783:	mov    %rdi,%r10
   42786:	mov    %rsi,%r11
   42789:	mov    %rdx,%r12
   4278c:	mov    %rcx,%r13
   4278f:	mov    %r8,%r14
   42792:	mov    %r9,%r15
   42795:	push   %rbx
   42796:	mov    %r10d,%ecx
   42799:	test   %rcx,%rcx
   4279c:	je     42a91 <jsimd_ycc_extrgbx_convert_sse2.return>
   427a2:	push   %rcx
   427a3:	mov    %r11,%rdi
   427a6:	mov    %r12d,%ecx
   427a9:	mov    (%rdi),%rsi
   427ac:	mov    0x8(%rdi),%rbx
   427b0:	mov    0x10(%rdi),%rdx
   427b4:	lea    (%rsi,%rcx,8),%rsi
   427b8:	lea    (%rbx,%rcx,8),%rbx
   427bc:	lea    (%rdx,%rcx,8),%rdx
   427c0:	pop    %rcx
   427c1:	mov    %r13,%rdi
   427c4:	mov    %r14d,%eax
   427c7:	test   %rax,%rax
   427ca:	jle    42a91 <jsimd_ycc_extrgbx_convert_sse2.return>

00000000000427d0 <jsimd_ycc_extrgbx_convert_sse2.rowloop>:
   427d0:	push   %rax
   427d1:	push   %rdi
   427d2:	push   %rdx
   427d3:	push   %rbx
   427d4:	push   %rsi
   427d5:	push   %rcx
   427d6:	mov    (%rsi),%rsi
   427d9:	mov    (%rbx),%rbx
   427dc:	mov    (%rdx),%rdx
   427df:	mov    (%rdi),%rdi

00000000000427e2 <jsimd_ycc_extrgbx_convert_sse2.columnloop>:
   427e2:	movdqa (%rbx),%xmm5
   427e6:	movdqa (%rdx),%xmm1
   427ea:	pcmpeqw %xmm4,%xmm4
   427ee:	pcmpeqw %xmm7,%xmm7
   427f2:	psrlw  $0x8,%xmm4
   427f7:	psllw  $0x7,%xmm7
   427fc:	movdqa %xmm4,%xmm0
   42800:	pand   %xmm5,%xmm4
   42804:	psrlw  $0x8,%xmm5
   42809:	pand   %xmm1,%xmm0
   4280d:	psrlw  $0x8,%xmm1
   42812:	paddw  %xmm7,%xmm4
   42816:	paddw  %xmm7,%xmm5
   4281a:	paddw  %xmm7,%xmm0
   4281e:	paddw  %xmm7,%xmm1
   42822:	movdqa %xmm4,%xmm2
   42826:	movdqa %xmm5,%xmm3
   4282a:	paddw  %xmm4,%xmm4
   4282e:	paddw  %xmm5,%xmm5
   42832:	movdqa %xmm0,%xmm6
   42836:	movdqa %xmm1,%xmm7
   4283a:	paddw  %xmm0,%xmm0
   4283e:	paddw  %xmm1,%xmm1
   42842:	pmulhw 0x29476(%rip),%xmm4        # 6bcc0 <PW_MF0228>
   4284a:	pmulhw 0x2946e(%rip),%xmm5        # 6bcc0 <PW_MF0228>
   42852:	pmulhw 0x29456(%rip),%xmm0        # 6bcb0 <PW_F0402>
   4285a:	pmulhw 0x2944e(%rip),%xmm1        # 6bcb0 <PW_F0402>
   42862:	paddw  0x29476(%rip),%xmm4        # 6bce0 <PW_ONE>
   4286a:	paddw  0x2946e(%rip),%xmm5        # 6bce0 <PW_ONE>
   42872:	psraw  $0x1,%xmm4
   42877:	psraw  $0x1,%xmm5
   4287c:	paddw  0x2945c(%rip),%xmm0        # 6bce0 <PW_ONE>
   42884:	paddw  0x29454(%rip),%xmm1        # 6bce0 <PW_ONE>
   4288c:	psraw  $0x1,%xmm0
   42891:	psraw  $0x1,%xmm1
   42896:	paddw  %xmm2,%xmm4
   4289a:	paddw  %xmm3,%xmm5
   4289e:	paddw  %xmm2,%xmm4
   428a2:	paddw  %xmm3,%xmm5
   428a6:	paddw  %xmm6,%xmm0
   428aa:	paddw  %xmm7,%xmm1
   428ae:	movdqa %xmm4,-0x20(%rbp)
   428b3:	movdqa %xmm5,-0x10(%rbp)
   428b8:	movdqa %xmm2,%xmm4
   428bc:	movdqa %xmm3,%xmm5
   428c0:	punpcklwd %xmm6,%xmm2
   428c4:	punpckhwd %xmm6,%xmm4
   428c8:	pmaddwd 0x29400(%rip),%xmm2        # 6bcd0 <PW_MF0344_F0285>
   428d0:	pmaddwd 0x293f8(%rip),%xmm4        # 6bcd0 <PW_MF0344_F0285>
   428d8:	punpcklwd %xmm7,%xmm3
   428dc:	punpckhwd %xmm7,%xmm5
   428e0:	pmaddwd 0x293e8(%rip),%xmm3        # 6bcd0 <PW_MF0344_F0285>
   428e8:	pmaddwd 0x293e0(%rip),%xmm5        # 6bcd0 <PW_MF0344_F0285>
   428f0:	paddd  0x293f8(%rip),%xmm2        # 6bcf0 <PD_ONEHALF>
   428f8:	paddd  0x293f0(%rip),%xmm4        # 6bcf0 <PD_ONEHALF>
   42900:	psrad  $0x10,%xmm2
   42905:	psrad  $0x10,%xmm4
   4290a:	paddd  0x293de(%rip),%xmm3        # 6bcf0 <PD_ONEHALF>
   42912:	paddd  0x293d6(%rip),%xmm5        # 6bcf0 <PD_ONEHALF>
   4291a:	psrad  $0x10,%xmm3
   4291f:	psrad  $0x10,%xmm5
   42924:	packssdw %xmm4,%xmm2
   42928:	packssdw %xmm5,%xmm3
   4292c:	psubw  %xmm6,%xmm2
   42930:	psubw  %xmm7,%xmm3
   42934:	movdqa (%rsi),%xmm5
   42938:	pcmpeqw %xmm4,%xmm4
   4293c:	psrlw  $0x8,%xmm4
   42941:	pand   %xmm5,%xmm4
   42945:	psrlw  $0x8,%xmm5
   4294a:	paddw  %xmm4,%xmm0
   4294e:	paddw  %xmm5,%xmm1
   42952:	packuswb %xmm0,%xmm0
   42956:	packuswb %xmm1,%xmm1
   4295a:	paddw  %xmm4,%xmm2
   4295e:	paddw  %xmm5,%xmm3
   42962:	packuswb %xmm2,%xmm2
   42966:	packuswb %xmm3,%xmm3
   4296a:	paddw  -0x20(%rbp),%xmm4
   4296f:	paddw  -0x10(%rbp),%xmm5
   42974:	packuswb %xmm4,%xmm4
   42978:	packuswb %xmm5,%xmm5
   4297c:	pcmpeqb %xmm6,%xmm6
   42980:	pcmpeqb %xmm7,%xmm7
   42984:	punpcklbw %xmm2,%xmm0
   42988:	punpcklbw %xmm6,%xmm4
   4298c:	punpcklbw %xmm3,%xmm1
   42990:	punpcklbw %xmm7,%xmm5
   42994:	movdqa %xmm0,%xmm2
   42998:	punpcklwd %xmm4,%xmm0
   4299c:	punpckhwd %xmm4,%xmm2
   429a0:	movdqa %xmm1,%xmm6
   429a4:	punpcklwd %xmm5,%xmm1
   429a8:	punpckhwd %xmm5,%xmm6
   429ac:	movdqa %xmm0,%xmm3
   429b0:	punpckldq %xmm1,%xmm0
   429b4:	punpckhdq %xmm1,%xmm3
   429b8:	movdqa %xmm2,%xmm7
   429bc:	punpckldq %xmm6,%xmm2
   429c0:	punpckhdq %xmm6,%xmm7
   429c4:	cmp    $0x10,%rcx
   429c8:	jb     42a1a <jsimd_ycc_extrgbx_convert_sse2.column_st32>
   429ca:	test   $0xf,%rdi
   429d1:	jne    429e8 <jsimd_ycc_extrgbx_convert_sse2.out1>
   429d3:	movntdq %xmm0,(%rdi)
   429d7:	movntdq %xmm3,0x10(%rdi)
   429dc:	movntdq %xmm2,0x20(%rdi)
   429e1:	movntdq %xmm7,0x30(%rdi)
   429e6:	jmp    429fb <jsimd_ycc_extrgbx_convert_sse2.out0>

00000000000429e8 <jsimd_ycc_extrgbx_convert_sse2.out1>:
   429e8:	movdqu %xmm0,(%rdi)
   429ec:	movdqu %xmm3,0x10(%rdi)
   429f1:	movdqu %xmm2,0x20(%rdi)
   429f6:	movdqu %xmm7,0x30(%rdi)

00000000000429fb <jsimd_ycc_extrgbx_convert_sse2.out0>:
   429fb:	add    $0x40,%rdi
   429ff:	sub    $0x10,%rcx
   42a03:	je     42a6f <jsimd_ycc_extrgbx_convert_sse2.nextrow>
   42a09:	add    $0x10,%rsi
   42a0d:	add    $0x10,%rbx
   42a11:	add    $0x10,%rdx
   42a15:	jmpq   427e2 <jsimd_ycc_extrgbx_convert_sse2.columnloop>

0000000000042a1a <jsimd_ycc_extrgbx_convert_sse2.column_st32>:
   42a1a:	cmp    $0x8,%rcx
   42a1e:	jb     42a39 <jsimd_ycc_extrgbx_convert_sse2.column_st16>
   42a20:	movdqu %xmm0,(%rdi)
   42a24:	movdqu %xmm3,0x10(%rdi)
   42a29:	add    $0x20,%rdi
   42a2d:	movdqa %xmm2,%xmm0
   42a31:	movdqa %xmm7,%xmm3
   42a35:	sub    $0x8,%rcx

0000000000042a39 <jsimd_ycc_extrgbx_convert_sse2.column_st16>:
   42a39:	cmp    $0x4,%rcx
   42a3d:	jb     42a4f <jsimd_ycc_extrgbx_convert_sse2.column_st15>
   42a3f:	movdqu %xmm0,(%rdi)
   42a43:	add    $0x10,%rdi
   42a47:	movdqa %xmm3,%xmm0
   42a4b:	sub    $0x4,%rcx

0000000000042a4f <jsimd_ycc_extrgbx_convert_sse2.column_st15>:
   42a4f:	cmp    $0x2,%rcx
   42a53:	jb     42a66 <jsimd_ycc_extrgbx_convert_sse2.column_st7>
   42a55:	movq   %xmm0,(%rdi)
   42a59:	add    $0x8,%rdi
   42a5d:	sub    $0x2,%rcx
   42a61:	psrldq $0x8,%xmm0

0000000000042a66 <jsimd_ycc_extrgbx_convert_sse2.column_st7>:
   42a66:	test   %rcx,%rcx
   42a69:	je     42a6f <jsimd_ycc_extrgbx_convert_sse2.nextrow>
   42a6b:	movd   %xmm0,(%rdi)

0000000000042a6f <jsimd_ycc_extrgbx_convert_sse2.nextrow>:
   42a6f:	pop    %rcx
   42a70:	pop    %rsi
   42a71:	pop    %rbx
   42a72:	pop    %rdx
   42a73:	pop    %rdi
   42a74:	pop    %rax
   42a75:	add    $0x8,%rsi
   42a79:	add    $0x8,%rbx
   42a7d:	add    $0x8,%rdx
   42a81:	add    $0x8,%rdi
   42a85:	dec    %rax
   42a88:	jg     427d0 <jsimd_ycc_extrgbx_convert_sse2.rowloop>
   42a8e:	sfence 

0000000000042a91 <jsimd_ycc_extrgbx_convert_sse2.return>:
   42a91:	pop    %rbx
   42a92:	pop    %r15
   42a94:	pop    %r14
   42a96:	pop    %r13
   42a98:	pop    %r12
   42a9a:	pop    %r11
   42a9c:	pop    %r10
   42a9e:	mov    %rbp,%rsp
   42aa1:	pop    %rsp
   42aa2:	pop    %rbp
   42aa3:	retq   
   42aa4:	nop
   42aa5:	nop
   42aa6:	nop
   42aa7:	nop
   42aa8:	nop
   42aa9:	nop
   42aaa:	nop
   42aab:	nop
   42aac:	nop
   42aad:	nop
   42aae:	nop
   42aaf:	nop

0000000000042ab0 <jsimd_ycc_extbgr_convert_sse2>:
   42ab0:	push   %rbp
   42ab1:	mov    %rsp,%rax
   42ab4:	sub    $0x4,%rsp
   42ab8:	and    $0xfffffffffffffff0,%rsp
   42abc:	mov    %rax,(%rsp)
   42ac0:	mov    %rsp,%rbp
   42ac3:	lea    -0x20(%rbp),%rsp
   42ac7:	push   %r10
   42ac9:	push   %r11
   42acb:	push   %r12
   42acd:	push   %r13
   42acf:	push   %r14
   42ad1:	push   %r15
   42ad3:	mov    %rdi,%r10
   42ad6:	mov    %rsi,%r11
   42ad9:	mov    %rdx,%r12
   42adc:	mov    %rcx,%r13
   42adf:	mov    %r8,%r14
   42ae2:	mov    %r9,%r15
   42ae5:	push   %rbx
   42ae6:	mov    %r10d,%ecx
   42ae9:	test   %rcx,%rcx
   42aec:	je     42e3c <jsimd_ycc_extbgr_convert_sse2.return>
   42af2:	push   %rcx
   42af3:	mov    %r11,%rdi
   42af6:	mov    %r12d,%ecx
   42af9:	mov    (%rdi),%rsi
   42afc:	mov    0x8(%rdi),%rbx
   42b00:	mov    0x10(%rdi),%rdx
   42b04:	lea    (%rsi,%rcx,8),%rsi
   42b08:	lea    (%rbx,%rcx,8),%rbx
   42b0c:	lea    (%rdx,%rcx,8),%rdx
   42b10:	pop    %rcx
   42b11:	mov    %r13,%rdi
   42b14:	mov    %r14d,%eax
   42b17:	test   %rax,%rax
   42b1a:	jle    42e3c <jsimd_ycc_extbgr_convert_sse2.return>

0000000000042b20 <jsimd_ycc_extbgr_convert_sse2.rowloop>:
   42b20:	push   %rax
   42b21:	push   %rdi
   42b22:	push   %rdx
   42b23:	push   %rbx
   42b24:	push   %rsi
   42b25:	push   %rcx
   42b26:	mov    (%rsi),%rsi
   42b29:	mov    (%rbx),%rbx
   42b2c:	mov    (%rdx),%rdx
   42b2f:	mov    (%rdi),%rdi

0000000000042b32 <jsimd_ycc_extbgr_convert_sse2.columnloop>:
   42b32:	movdqa (%rbx),%xmm5
   42b36:	movdqa (%rdx),%xmm1
   42b3a:	pcmpeqw %xmm4,%xmm4
   42b3e:	pcmpeqw %xmm7,%xmm7
   42b42:	psrlw  $0x8,%xmm4
   42b47:	psllw  $0x7,%xmm7
   42b4c:	movdqa %xmm4,%xmm0
   42b50:	pand   %xmm5,%xmm4
   42b54:	psrlw  $0x8,%xmm5
   42b59:	pand   %xmm1,%xmm0
   42b5d:	psrlw  $0x8,%xmm1
   42b62:	paddw  %xmm7,%xmm4
   42b66:	paddw  %xmm7,%xmm5
   42b6a:	paddw  %xmm7,%xmm0
   42b6e:	paddw  %xmm7,%xmm1
   42b72:	movdqa %xmm4,%xmm2
   42b76:	movdqa %xmm5,%xmm3
   42b7a:	paddw  %xmm4,%xmm4
   42b7e:	paddw  %xmm5,%xmm5
   42b82:	movdqa %xmm0,%xmm6
   42b86:	movdqa %xmm1,%xmm7
   42b8a:	paddw  %xmm0,%xmm0
   42b8e:	paddw  %xmm1,%xmm1
   42b92:	pmulhw 0x29126(%rip),%xmm4        # 6bcc0 <PW_MF0228>
   42b9a:	pmulhw 0x2911e(%rip),%xmm5        # 6bcc0 <PW_MF0228>
   42ba2:	pmulhw 0x29106(%rip),%xmm0        # 6bcb0 <PW_F0402>
   42baa:	pmulhw 0x290fe(%rip),%xmm1        # 6bcb0 <PW_F0402>
   42bb2:	paddw  0x29126(%rip),%xmm4        # 6bce0 <PW_ONE>
   42bba:	paddw  0x2911e(%rip),%xmm5        # 6bce0 <PW_ONE>
   42bc2:	psraw  $0x1,%xmm4
   42bc7:	psraw  $0x1,%xmm5
   42bcc:	paddw  0x2910c(%rip),%xmm0        # 6bce0 <PW_ONE>
   42bd4:	paddw  0x29104(%rip),%xmm1        # 6bce0 <PW_ONE>
   42bdc:	psraw  $0x1,%xmm0
   42be1:	psraw  $0x1,%xmm1
   42be6:	paddw  %xmm2,%xmm4
   42bea:	paddw  %xmm3,%xmm5
   42bee:	paddw  %xmm2,%xmm4
   42bf2:	paddw  %xmm3,%xmm5
   42bf6:	paddw  %xmm6,%xmm0
   42bfa:	paddw  %xmm7,%xmm1
   42bfe:	movdqa %xmm4,-0x20(%rbp)
   42c03:	movdqa %xmm5,-0x10(%rbp)
   42c08:	movdqa %xmm2,%xmm4
   42c0c:	movdqa %xmm3,%xmm5
   42c10:	punpcklwd %xmm6,%xmm2
   42c14:	punpckhwd %xmm6,%xmm4
   42c18:	pmaddwd 0x290b0(%rip),%xmm2        # 6bcd0 <PW_MF0344_F0285>
   42c20:	pmaddwd 0x290a8(%rip),%xmm4        # 6bcd0 <PW_MF0344_F0285>
   42c28:	punpcklwd %xmm7,%xmm3
   42c2c:	punpckhwd %xmm7,%xmm5
   42c30:	pmaddwd 0x29098(%rip),%xmm3        # 6bcd0 <PW_MF0344_F0285>
   42c38:	pmaddwd 0x29090(%rip),%xmm5        # 6bcd0 <PW_MF0344_F0285>
   42c40:	paddd  0x290a8(%rip),%xmm2        # 6bcf0 <PD_ONEHALF>
   42c48:	paddd  0x290a0(%rip),%xmm4        # 6bcf0 <PD_ONEHALF>
   42c50:	psrad  $0x10,%xmm2
   42c55:	psrad  $0x10,%xmm4
   42c5a:	paddd  0x2908e(%rip),%xmm3        # 6bcf0 <PD_ONEHALF>
   42c62:	paddd  0x29086(%rip),%xmm5        # 6bcf0 <PD_ONEHALF>
   42c6a:	psrad  $0x10,%xmm3
   42c6f:	psrad  $0x10,%xmm5
   42c74:	packssdw %xmm4,%xmm2
   42c78:	packssdw %xmm5,%xmm3
   42c7c:	psubw  %xmm6,%xmm2
   42c80:	psubw  %xmm7,%xmm3
   42c84:	movdqa (%rsi),%xmm5
   42c88:	pcmpeqw %xmm4,%xmm4
   42c8c:	psrlw  $0x8,%xmm4
   42c91:	pand   %xmm5,%xmm4
   42c95:	psrlw  $0x8,%xmm5
   42c9a:	paddw  %xmm4,%xmm0
   42c9e:	paddw  %xmm5,%xmm1
   42ca2:	packuswb %xmm0,%xmm0
   42ca6:	packuswb %xmm1,%xmm1
   42caa:	paddw  %xmm4,%xmm2
   42cae:	paddw  %xmm5,%xmm3
   42cb2:	packuswb %xmm2,%xmm2
   42cb6:	packuswb %xmm3,%xmm3
   42cba:	paddw  -0x20(%rbp),%xmm4
   42cbf:	paddw  -0x10(%rbp),%xmm5
   42cc4:	packuswb %xmm4,%xmm4
   42cc8:	packuswb %xmm5,%xmm5
   42ccc:	punpcklbw %xmm2,%xmm4
   42cd0:	punpcklbw %xmm5,%xmm0
   42cd4:	punpcklbw %xmm1,%xmm3
   42cd8:	movdqa %xmm4,%xmm6
   42cdc:	movdqa %xmm4,%xmm7
   42ce0:	punpcklwd %xmm0,%xmm4
   42ce4:	punpckhwd %xmm0,%xmm6
   42ce8:	psrldq $0x2,%xmm7
   42ced:	psrldq $0x2,%xmm0
   42cf2:	movdqa %xmm3,%xmm2
   42cf6:	movdqa %xmm3,%xmm5
   42cfa:	punpcklwd %xmm7,%xmm3
   42cfe:	punpckhwd %xmm7,%xmm2
   42d02:	psrldq $0x2,%xmm5
   42d07:	movdqa %xmm0,%xmm1
   42d0b:	punpcklwd %xmm5,%xmm0
   42d0f:	punpckhwd %xmm5,%xmm1
   42d13:	pshufd $0x4e,%xmm4,%xmm7
   42d18:	movdqa %xmm0,%xmm5
   42d1c:	punpckldq %xmm3,%xmm4
   42d20:	punpckldq %xmm7,%xmm0
   42d24:	punpckhdq %xmm5,%xmm3
   42d28:	pshufd $0x4e,%xmm6,%xmm7
   42d2d:	movdqa %xmm1,%xmm5
   42d31:	punpckldq %xmm2,%xmm6
   42d35:	punpckldq %xmm7,%xmm1
   42d39:	punpckhdq %xmm5,%xmm2
   42d3d:	punpcklqdq %xmm0,%xmm4
   42d41:	punpcklqdq %xmm6,%xmm3
   42d45:	punpcklqdq %xmm2,%xmm1
   42d49:	cmp    $0x10,%rcx
   42d4d:	jb     42d95 <jsimd_ycc_extbgr_convert_sse2.column_st32>
   42d4f:	test   $0xf,%rdi
   42d56:	jne    42d68 <jsimd_ycc_extbgr_convert_sse2.out1>
   42d58:	movntdq %xmm4,(%rdi)
   42d5c:	movntdq %xmm3,0x10(%rdi)
   42d61:	movntdq %xmm1,0x20(%rdi)
   42d66:	jmp    42d76 <jsimd_ycc_extbgr_convert_sse2.out0>

0000000000042d68 <jsimd_ycc_extbgr_convert_sse2.out1>:
   42d68:	movdqu %xmm4,(%rdi)
   42d6c:	movdqu %xmm3,0x10(%rdi)
   42d71:	movdqu %xmm1,0x20(%rdi)

0000000000042d76 <jsimd_ycc_extbgr_convert_sse2.out0>:
   42d76:	add    $0x30,%rdi
   42d7a:	sub    $0x10,%rcx
   42d7e:	je     42e1a <jsimd_ycc_extbgr_convert_sse2.nextrow>
   42d84:	add    $0x10,%rsi
   42d88:	add    $0x10,%rbx
   42d8c:	add    $0x10,%rdx
   42d90:	jmpq   42b32 <jsimd_ycc_extbgr_convert_sse2.columnloop>

0000000000042d95 <jsimd_ycc_extbgr_convert_sse2.column_st32>:
   42d95:	lea    (%rcx,%rcx,2),%rcx
   42d99:	cmp    $0x20,%rcx
   42d9d:	jb     42db6 <jsimd_ycc_extbgr_convert_sse2.column_st16>
   42d9f:	movdqu %xmm4,(%rdi)
   42da3:	movdqu %xmm3,0x10(%rdi)
   42da8:	add    $0x20,%rdi
   42dac:	movdqa %xmm1,%xmm4
   42db0:	sub    $0x20,%rcx
   42db4:	jmp    42dcc <jsimd_ycc_extbgr_convert_sse2.column_st15>

0000000000042db6 <jsimd_ycc_extbgr_convert_sse2.column_st16>:
   42db6:	cmp    $0x10,%rcx
   42dba:	jb     42dcc <jsimd_ycc_extbgr_convert_sse2.column_st15>
   42dbc:	movdqu %xmm4,(%rdi)
   42dc0:	add    $0x10,%rdi
   42dc4:	movdqa %xmm3,%xmm4
   42dc8:	sub    $0x10,%rcx

0000000000042dcc <jsimd_ycc_extbgr_convert_sse2.column_st15>:
   42dcc:	cmp    $0x8,%rcx
   42dd0:	jb     42de3 <jsimd_ycc_extbgr_convert_sse2.column_st7>
   42dd2:	movq   %xmm4,(%rdi)
   42dd6:	add    $0x8,%rdi
   42dda:	sub    $0x8,%rcx
   42dde:	psrldq $0x8,%xmm4

0000000000042de3 <jsimd_ycc_extbgr_convert_sse2.column_st7>:
   42de3:	cmp    $0x4,%rcx
   42de7:	jb     42dfa <jsimd_ycc_extbgr_convert_sse2.column_st3>
   42de9:	movd   %xmm4,(%rdi)
   42ded:	add    $0x4,%rdi
   42df1:	sub    $0x4,%rcx
   42df5:	psrldq $0x4,%xmm4

0000000000042dfa <jsimd_ycc_extbgr_convert_sse2.column_st3>:
   42dfa:	movd   %xmm4,%eax
   42dfe:	cmp    $0x2,%rcx
   42e02:	jb     42e13 <jsimd_ycc_extbgr_convert_sse2.column_st1>
   42e04:	mov    %ax,(%rdi)
   42e07:	add    $0x2,%rdi
   42e0b:	sub    $0x2,%rcx
   42e0f:	shr    $0x10,%rax

0000000000042e13 <jsimd_ycc_extbgr_convert_sse2.column_st1>:
   42e13:	test   %rcx,%rcx
   42e16:	je     42e1a <jsimd_ycc_extbgr_convert_sse2.nextrow>
   42e18:	mov    %al,(%rdi)

0000000000042e1a <jsimd_ycc_extbgr_convert_sse2.nextrow>:
   42e1a:	pop    %rcx
   42e1b:	pop    %rsi
   42e1c:	pop    %rbx
   42e1d:	pop    %rdx
   42e1e:	pop    %rdi
   42e1f:	pop    %rax
   42e20:	add    $0x8,%rsi
   42e24:	add    $0x8,%rbx
   42e28:	add    $0x8,%rdx
   42e2c:	add    $0x8,%rdi
   42e30:	dec    %rax
   42e33:	jg     42b20 <jsimd_ycc_extbgr_convert_sse2.rowloop>
   42e39:	sfence 

0000000000042e3c <jsimd_ycc_extbgr_convert_sse2.return>:
   42e3c:	pop    %rbx
   42e3d:	pop    %r15
   42e3f:	pop    %r14
   42e41:	pop    %r13
   42e43:	pop    %r12
   42e45:	pop    %r11
   42e47:	pop    %r10
   42e49:	mov    %rbp,%rsp
   42e4c:	pop    %rsp
   42e4d:	pop    %rbp
   42e4e:	retq   
   42e4f:	nop

0000000000042e50 <jsimd_ycc_extbgrx_convert_sse2>:
   42e50:	push   %rbp
   42e51:	mov    %rsp,%rax
   42e54:	sub    $0x4,%rsp
   42e58:	and    $0xfffffffffffffff0,%rsp
   42e5c:	mov    %rax,(%rsp)
   42e60:	mov    %rsp,%rbp
   42e63:	lea    -0x20(%rbp),%rsp
   42e67:	push   %r10
   42e69:	push   %r11
   42e6b:	push   %r12
   42e6d:	push   %r13
   42e6f:	push   %r14
   42e71:	push   %r15
   42e73:	mov    %rdi,%r10
   42e76:	mov    %rsi,%r11
   42e79:	mov    %rdx,%r12
   42e7c:	mov    %rcx,%r13
   42e7f:	mov    %r8,%r14
   42e82:	mov    %r9,%r15
   42e85:	push   %rbx
   42e86:	mov    %r10d,%ecx
   42e89:	test   %rcx,%rcx
   42e8c:	je     43181 <jsimd_ycc_extbgrx_convert_sse2.return>
   42e92:	push   %rcx
   42e93:	mov    %r11,%rdi
   42e96:	mov    %r12d,%ecx
   42e99:	mov    (%rdi),%rsi
   42e9c:	mov    0x8(%rdi),%rbx
   42ea0:	mov    0x10(%rdi),%rdx
   42ea4:	lea    (%rsi,%rcx,8),%rsi
   42ea8:	lea    (%rbx,%rcx,8),%rbx
   42eac:	lea    (%rdx,%rcx,8),%rdx
   42eb0:	pop    %rcx
   42eb1:	mov    %r13,%rdi
   42eb4:	mov    %r14d,%eax
   42eb7:	test   %rax,%rax
   42eba:	jle    43181 <jsimd_ycc_extbgrx_convert_sse2.return>

0000000000042ec0 <jsimd_ycc_extbgrx_convert_sse2.rowloop>:
   42ec0:	push   %rax
   42ec1:	push   %rdi
   42ec2:	push   %rdx
   42ec3:	push   %rbx
   42ec4:	push   %rsi
   42ec5:	push   %rcx
   42ec6:	mov    (%rsi),%rsi
   42ec9:	mov    (%rbx),%rbx
   42ecc:	mov    (%rdx),%rdx
   42ecf:	mov    (%rdi),%rdi

0000000000042ed2 <jsimd_ycc_extbgrx_convert_sse2.columnloop>:
   42ed2:	movdqa (%rbx),%xmm5
   42ed6:	movdqa (%rdx),%xmm1
   42eda:	pcmpeqw %xmm4,%xmm4
   42ede:	pcmpeqw %xmm7,%xmm7
   42ee2:	psrlw  $0x8,%xmm4
   42ee7:	psllw  $0x7,%xmm7
   42eec:	movdqa %xmm4,%xmm0
   42ef0:	pand   %xmm5,%xmm4
   42ef4:	psrlw  $0x8,%xmm5
   42ef9:	pand   %xmm1,%xmm0
   42efd:	psrlw  $0x8,%xmm1
   42f02:	paddw  %xmm7,%xmm4
   42f06:	paddw  %xmm7,%xmm5
   42f0a:	paddw  %xmm7,%xmm0
   42f0e:	paddw  %xmm7,%xmm1
   42f12:	movdqa %xmm4,%xmm2
   42f16:	movdqa %xmm5,%xmm3
   42f1a:	paddw  %xmm4,%xmm4
   42f1e:	paddw  %xmm5,%xmm5
   42f22:	movdqa %xmm0,%xmm6
   42f26:	movdqa %xmm1,%xmm7
   42f2a:	paddw  %xmm0,%xmm0
   42f2e:	paddw  %xmm1,%xmm1
   42f32:	pmulhw 0x28d86(%rip),%xmm4        # 6bcc0 <PW_MF0228>
   42f3a:	pmulhw 0x28d7e(%rip),%xmm5        # 6bcc0 <PW_MF0228>
   42f42:	pmulhw 0x28d66(%rip),%xmm0        # 6bcb0 <PW_F0402>
   42f4a:	pmulhw 0x28d5e(%rip),%xmm1        # 6bcb0 <PW_F0402>
   42f52:	paddw  0x28d86(%rip),%xmm4        # 6bce0 <PW_ONE>
   42f5a:	paddw  0x28d7e(%rip),%xmm5        # 6bce0 <PW_ONE>
   42f62:	psraw  $0x1,%xmm4
   42f67:	psraw  $0x1,%xmm5
   42f6c:	paddw  0x28d6c(%rip),%xmm0        # 6bce0 <PW_ONE>
   42f74:	paddw  0x28d64(%rip),%xmm1        # 6bce0 <PW_ONE>
   42f7c:	psraw  $0x1,%xmm0
   42f81:	psraw  $0x1,%xmm1
   42f86:	paddw  %xmm2,%xmm4
   42f8a:	paddw  %xmm3,%xmm5
   42f8e:	paddw  %xmm2,%xmm4
   42f92:	paddw  %xmm3,%xmm5
   42f96:	paddw  %xmm6,%xmm0
   42f9a:	paddw  %xmm7,%xmm1
   42f9e:	movdqa %xmm4,-0x20(%rbp)
   42fa3:	movdqa %xmm5,-0x10(%rbp)
   42fa8:	movdqa %xmm2,%xmm4
   42fac:	movdqa %xmm3,%xmm5
   42fb0:	punpcklwd %xmm6,%xmm2
   42fb4:	punpckhwd %xmm6,%xmm4
   42fb8:	pmaddwd 0x28d10(%rip),%xmm2        # 6bcd0 <PW_MF0344_F0285>
   42fc0:	pmaddwd 0x28d08(%rip),%xmm4        # 6bcd0 <PW_MF0344_F0285>
   42fc8:	punpcklwd %xmm7,%xmm3
   42fcc:	punpckhwd %xmm7,%xmm5
   42fd0:	pmaddwd 0x28cf8(%rip),%xmm3        # 6bcd0 <PW_MF0344_F0285>
   42fd8:	pmaddwd 0x28cf0(%rip),%xmm5        # 6bcd0 <PW_MF0344_F0285>
   42fe0:	paddd  0x28d08(%rip),%xmm2        # 6bcf0 <PD_ONEHALF>
   42fe8:	paddd  0x28d00(%rip),%xmm4        # 6bcf0 <PD_ONEHALF>
   42ff0:	psrad  $0x10,%xmm2
   42ff5:	psrad  $0x10,%xmm4
   42ffa:	paddd  0x28cee(%rip),%xmm3        # 6bcf0 <PD_ONEHALF>
   43002:	paddd  0x28ce6(%rip),%xmm5        # 6bcf0 <PD_ONEHALF>
   4300a:	psrad  $0x10,%xmm3
   4300f:	psrad  $0x10,%xmm5
   43014:	packssdw %xmm4,%xmm2
   43018:	packssdw %xmm5,%xmm3
   4301c:	psubw  %xmm6,%xmm2
   43020:	psubw  %xmm7,%xmm3
   43024:	movdqa (%rsi),%xmm5
   43028:	pcmpeqw %xmm4,%xmm4
   4302c:	psrlw  $0x8,%xmm4
   43031:	pand   %xmm5,%xmm4
   43035:	psrlw  $0x8,%xmm5
   4303a:	paddw  %xmm4,%xmm0
   4303e:	paddw  %xmm5,%xmm1
   43042:	packuswb %xmm0,%xmm0
   43046:	packuswb %xmm1,%xmm1
   4304a:	paddw  %xmm4,%xmm2
   4304e:	paddw  %xmm5,%xmm3
   43052:	packuswb %xmm2,%xmm2
   43056:	packuswb %xmm3,%xmm3
   4305a:	paddw  -0x20(%rbp),%xmm4
   4305f:	paddw  -0x10(%rbp),%xmm5
   43064:	packuswb %xmm4,%xmm4
   43068:	packuswb %xmm5,%xmm5
   4306c:	pcmpeqb %xmm6,%xmm6
   43070:	pcmpeqb %xmm7,%xmm7
   43074:	punpcklbw %xmm2,%xmm4
   43078:	punpcklbw %xmm6,%xmm0
   4307c:	punpcklbw %xmm3,%xmm5
   43080:	punpcklbw %xmm7,%xmm1
   43084:	movdqa %xmm4,%xmm2
   43088:	punpcklwd %xmm0,%xmm4
   4308c:	punpckhwd %xmm0,%xmm2
   43090:	movdqa %xmm5,%xmm6
   43094:	punpcklwd %xmm1,%xmm5
   43098:	punpckhwd %xmm1,%xmm6
   4309c:	movdqa %xmm4,%xmm3
   430a0:	punpckldq %xmm5,%xmm4
   430a4:	punpckhdq %xmm5,%xmm3
   430a8:	movdqa %xmm2,%xmm7
   430ac:	punpckldq %xmm6,%xmm2
   430b0:	punpckhdq %xmm6,%xmm7
   430b4:	cmp    $0x10,%rcx
   430b8:	jb     4310a <jsimd_ycc_extbgrx_convert_sse2.column_st32>
   430ba:	test   $0xf,%rdi
   430c1:	jne    430d8 <jsimd_ycc_extbgrx_convert_sse2.out1>
   430c3:	movntdq %xmm4,(%rdi)
   430c7:	movntdq %xmm3,0x10(%rdi)
   430cc:	movntdq %xmm2,0x20(%rdi)
   430d1:	movntdq %xmm7,0x30(%rdi)
   430d6:	jmp    430eb <jsimd_ycc_extbgrx_convert_sse2.out0>

00000000000430d8 <jsimd_ycc_extbgrx_convert_sse2.out1>:
   430d8:	movdqu %xmm4,(%rdi)
   430dc:	movdqu %xmm3,0x10(%rdi)
   430e1:	movdqu %xmm2,0x20(%rdi)
   430e6:	movdqu %xmm7,0x30(%rdi)

00000000000430eb <jsimd_ycc_extbgrx_convert_sse2.out0>:
   430eb:	add    $0x40,%rdi
   430ef:	sub    $0x10,%rcx
   430f3:	je     4315f <jsimd_ycc_extbgrx_convert_sse2.nextrow>
   430f9:	add    $0x10,%rsi
   430fd:	add    $0x10,%rbx
   43101:	add    $0x10,%rdx
   43105:	jmpq   42ed2 <jsimd_ycc_extbgrx_convert_sse2.columnloop>

000000000004310a <jsimd_ycc_extbgrx_convert_sse2.column_st32>:
   4310a:	cmp    $0x8,%rcx
   4310e:	jb     43129 <jsimd_ycc_extbgrx_convert_sse2.column_st16>
   43110:	movdqu %xmm4,(%rdi)
   43114:	movdqu %xmm3,0x10(%rdi)
   43119:	add    $0x20,%rdi
   4311d:	movdqa %xmm2,%xmm4
   43121:	movdqa %xmm7,%xmm3
   43125:	sub    $0x8,%rcx

0000000000043129 <jsimd_ycc_extbgrx_convert_sse2.column_st16>:
   43129:	cmp    $0x4,%rcx
   4312d:	jb     4313f <jsimd_ycc_extbgrx_convert_sse2.column_st15>
   4312f:	movdqu %xmm4,(%rdi)
   43133:	add    $0x10,%rdi
   43137:	movdqa %xmm3,%xmm4
   4313b:	sub    $0x4,%rcx

000000000004313f <jsimd_ycc_extbgrx_convert_sse2.column_st15>:
   4313f:	cmp    $0x2,%rcx
   43143:	jb     43156 <jsimd_ycc_extbgrx_convert_sse2.column_st7>
   43145:	movq   %xmm4,(%rdi)
   43149:	add    $0x8,%rdi
   4314d:	sub    $0x2,%rcx
   43151:	psrldq $0x8,%xmm4

0000000000043156 <jsimd_ycc_extbgrx_convert_sse2.column_st7>:
   43156:	test   %rcx,%rcx
   43159:	je     4315f <jsimd_ycc_extbgrx_convert_sse2.nextrow>
   4315b:	movd   %xmm4,(%rdi)

000000000004315f <jsimd_ycc_extbgrx_convert_sse2.nextrow>:
   4315f:	pop    %rcx
   43160:	pop    %rsi
   43161:	pop    %rbx
   43162:	pop    %rdx
   43163:	pop    %rdi
   43164:	pop    %rax
   43165:	add    $0x8,%rsi
   43169:	add    $0x8,%rbx
   4316d:	add    $0x8,%rdx
   43171:	add    $0x8,%rdi
   43175:	dec    %rax
   43178:	jg     42ec0 <jsimd_ycc_extbgrx_convert_sse2.rowloop>
   4317e:	sfence 

0000000000043181 <jsimd_ycc_extbgrx_convert_sse2.return>:
   43181:	pop    %rbx
   43182:	pop    %r15
   43184:	pop    %r14
   43186:	pop    %r13
   43188:	pop    %r12
   4318a:	pop    %r11
   4318c:	pop    %r10
   4318e:	mov    %rbp,%rsp
   43191:	pop    %rsp
   43192:	pop    %rbp
   43193:	retq   
   43194:	nop
   43195:	nop
   43196:	nop
   43197:	nop
   43198:	nop
   43199:	nop
   4319a:	nop
   4319b:	nop
   4319c:	nop
   4319d:	nop
   4319e:	nop
   4319f:	nop

00000000000431a0 <jsimd_ycc_extxbgr_convert_sse2>:
   431a0:	push   %rbp
   431a1:	mov    %rsp,%rax
   431a4:	sub    $0x4,%rsp
   431a8:	and    $0xfffffffffffffff0,%rsp
   431ac:	mov    %rax,(%rsp)
   431b0:	mov    %rsp,%rbp
   431b3:	lea    -0x20(%rbp),%rsp
   431b7:	push   %r10
   431b9:	push   %r11
   431bb:	push   %r12
   431bd:	push   %r13
   431bf:	push   %r14
   431c1:	push   %r15
   431c3:	mov    %rdi,%r10
   431c6:	mov    %rsi,%r11
   431c9:	mov    %rdx,%r12
   431cc:	mov    %rcx,%r13
   431cf:	mov    %r8,%r14
   431d2:	mov    %r9,%r15
   431d5:	push   %rbx
   431d6:	mov    %r10d,%ecx
   431d9:	test   %rcx,%rcx
   431dc:	je     434d1 <jsimd_ycc_extxbgr_convert_sse2.return>
   431e2:	push   %rcx
   431e3:	mov    %r11,%rdi
   431e6:	mov    %r12d,%ecx
   431e9:	mov    (%rdi),%rsi
   431ec:	mov    0x8(%rdi),%rbx
   431f0:	mov    0x10(%rdi),%rdx
   431f4:	lea    (%rsi,%rcx,8),%rsi
   431f8:	lea    (%rbx,%rcx,8),%rbx
   431fc:	lea    (%rdx,%rcx,8),%rdx
   43200:	pop    %rcx
   43201:	mov    %r13,%rdi
   43204:	mov    %r14d,%eax
   43207:	test   %rax,%rax
   4320a:	jle    434d1 <jsimd_ycc_extxbgr_convert_sse2.return>

0000000000043210 <jsimd_ycc_extxbgr_convert_sse2.rowloop>:
   43210:	push   %rax
   43211:	push   %rdi
   43212:	push   %rdx
   43213:	push   %rbx
   43214:	push   %rsi
   43215:	push   %rcx
   43216:	mov    (%rsi),%rsi
   43219:	mov    (%rbx),%rbx
   4321c:	mov    (%rdx),%rdx
   4321f:	mov    (%rdi),%rdi

0000000000043222 <jsimd_ycc_extxbgr_convert_sse2.columnloop>:
   43222:	movdqa (%rbx),%xmm5
   43226:	movdqa (%rdx),%xmm1
   4322a:	pcmpeqw %xmm4,%xmm4
   4322e:	pcmpeqw %xmm7,%xmm7
   43232:	psrlw  $0x8,%xmm4
   43237:	psllw  $0x7,%xmm7
   4323c:	movdqa %xmm4,%xmm0
   43240:	pand   %xmm5,%xmm4
   43244:	psrlw  $0x8,%xmm5
   43249:	pand   %xmm1,%xmm0
   4324d:	psrlw  $0x8,%xmm1
   43252:	paddw  %xmm7,%xmm4
   43256:	paddw  %xmm7,%xmm5
   4325a:	paddw  %xmm7,%xmm0
   4325e:	paddw  %xmm7,%xmm1
   43262:	movdqa %xmm4,%xmm2
   43266:	movdqa %xmm5,%xmm3
   4326a:	paddw  %xmm4,%xmm4
   4326e:	paddw  %xmm5,%xmm5
   43272:	movdqa %xmm0,%xmm6
   43276:	movdqa %xmm1,%xmm7
   4327a:	paddw  %xmm0,%xmm0
   4327e:	paddw  %xmm1,%xmm1
   43282:	pmulhw 0x28a36(%rip),%xmm4        # 6bcc0 <PW_MF0228>
   4328a:	pmulhw 0x28a2e(%rip),%xmm5        # 6bcc0 <PW_MF0228>
   43292:	pmulhw 0x28a16(%rip),%xmm0        # 6bcb0 <PW_F0402>
   4329a:	pmulhw 0x28a0e(%rip),%xmm1        # 6bcb0 <PW_F0402>
   432a2:	paddw  0x28a36(%rip),%xmm4        # 6bce0 <PW_ONE>
   432aa:	paddw  0x28a2e(%rip),%xmm5        # 6bce0 <PW_ONE>
   432b2:	psraw  $0x1,%xmm4
   432b7:	psraw  $0x1,%xmm5
   432bc:	paddw  0x28a1c(%rip),%xmm0        # 6bce0 <PW_ONE>
   432c4:	paddw  0x28a14(%rip),%xmm1        # 6bce0 <PW_ONE>
   432cc:	psraw  $0x1,%xmm0
   432d1:	psraw  $0x1,%xmm1
   432d6:	paddw  %xmm2,%xmm4
   432da:	paddw  %xmm3,%xmm5
   432de:	paddw  %xmm2,%xmm4
   432e2:	paddw  %xmm3,%xmm5
   432e6:	paddw  %xmm6,%xmm0
   432ea:	paddw  %xmm7,%xmm1
   432ee:	movdqa %xmm4,-0x20(%rbp)
   432f3:	movdqa %xmm5,-0x10(%rbp)
   432f8:	movdqa %xmm2,%xmm4
   432fc:	movdqa %xmm3,%xmm5
   43300:	punpcklwd %xmm6,%xmm2
   43304:	punpckhwd %xmm6,%xmm4
   43308:	pmaddwd 0x289c0(%rip),%xmm2        # 6bcd0 <PW_MF0344_F0285>
   43310:	pmaddwd 0x289b8(%rip),%xmm4        # 6bcd0 <PW_MF0344_F0285>
   43318:	punpcklwd %xmm7,%xmm3
   4331c:	punpckhwd %xmm7,%xmm5
   43320:	pmaddwd 0x289a8(%rip),%xmm3        # 6bcd0 <PW_MF0344_F0285>
   43328:	pmaddwd 0x289a0(%rip),%xmm5        # 6bcd0 <PW_MF0344_F0285>
   43330:	paddd  0x289b8(%rip),%xmm2        # 6bcf0 <PD_ONEHALF>
   43338:	paddd  0x289b0(%rip),%xmm4        # 6bcf0 <PD_ONEHALF>
   43340:	psrad  $0x10,%xmm2
   43345:	psrad  $0x10,%xmm4
   4334a:	paddd  0x2899e(%rip),%xmm3        # 6bcf0 <PD_ONEHALF>
   43352:	paddd  0x28996(%rip),%xmm5        # 6bcf0 <PD_ONEHALF>
   4335a:	psrad  $0x10,%xmm3
   4335f:	psrad  $0x10,%xmm5
   43364:	packssdw %xmm4,%xmm2
   43368:	packssdw %xmm5,%xmm3
   4336c:	psubw  %xmm6,%xmm2
   43370:	psubw  %xmm7,%xmm3
   43374:	movdqa (%rsi),%xmm5
   43378:	pcmpeqw %xmm4,%xmm4
   4337c:	psrlw  $0x8,%xmm4
   43381:	pand   %xmm5,%xmm4
   43385:	psrlw  $0x8,%xmm5
   4338a:	paddw  %xmm4,%xmm0
   4338e:	paddw  %xmm5,%xmm1
   43392:	packuswb %xmm0,%xmm0
   43396:	packuswb %xmm1,%xmm1
   4339a:	paddw  %xmm4,%xmm2
   4339e:	paddw  %xmm5,%xmm3
   433a2:	packuswb %xmm2,%xmm2
   433a6:	packuswb %xmm3,%xmm3
   433aa:	paddw  -0x20(%rbp),%xmm4
   433af:	paddw  -0x10(%rbp),%xmm5
   433b4:	packuswb %xmm4,%xmm4
   433b8:	packuswb %xmm5,%xmm5
   433bc:	pcmpeqb %xmm6,%xmm6
   433c0:	pcmpeqb %xmm7,%xmm7
   433c4:	punpcklbw %xmm4,%xmm6
   433c8:	punpcklbw %xmm0,%xmm2
   433cc:	punpcklbw %xmm5,%xmm7
   433d0:	punpcklbw %xmm1,%xmm3
   433d4:	movdqa %xmm6,%xmm4
   433d8:	punpcklwd %xmm2,%xmm6
   433dc:	punpckhwd %xmm2,%xmm4
   433e0:	movdqa %xmm7,%xmm0
   433e4:	punpcklwd %xmm3,%xmm7
   433e8:	punpckhwd %xmm3,%xmm0
   433ec:	movdqa %xmm6,%xmm5
   433f0:	punpckldq %xmm7,%xmm6
   433f4:	punpckhdq %xmm7,%xmm5
   433f8:	movdqa %xmm4,%xmm1
   433fc:	punpckldq %xmm0,%xmm4
   43400:	punpckhdq %xmm0,%xmm1
   43404:	cmp    $0x10,%rcx
   43408:	jb     4345a <jsimd_ycc_extxbgr_convert_sse2.column_st32>
   4340a:	test   $0xf,%rdi
   43411:	jne    43428 <jsimd_ycc_extxbgr_convert_sse2.out1>
   43413:	movntdq %xmm6,(%rdi)
   43417:	movntdq %xmm5,0x10(%rdi)
   4341c:	movntdq %xmm4,0x20(%rdi)
   43421:	movntdq %xmm1,0x30(%rdi)
   43426:	jmp    4343b <jsimd_ycc_extxbgr_convert_sse2.out0>

0000000000043428 <jsimd_ycc_extxbgr_convert_sse2.out1>:
   43428:	movdqu %xmm6,(%rdi)
   4342c:	movdqu %xmm5,0x10(%rdi)
   43431:	movdqu %xmm4,0x20(%rdi)
   43436:	movdqu %xmm1,0x30(%rdi)

000000000004343b <jsimd_ycc_extxbgr_convert_sse2.out0>:
   4343b:	add    $0x40,%rdi
   4343f:	sub    $0x10,%rcx
   43443:	je     434af <jsimd_ycc_extxbgr_convert_sse2.nextrow>
   43449:	add    $0x10,%rsi
   4344d:	add    $0x10,%rbx
   43451:	add    $0x10,%rdx
   43455:	jmpq   43222 <jsimd_ycc_extxbgr_convert_sse2.columnloop>

000000000004345a <jsimd_ycc_extxbgr_convert_sse2.column_st32>:
   4345a:	cmp    $0x8,%rcx
   4345e:	jb     43479 <jsimd_ycc_extxbgr_convert_sse2.column_st16>
   43460:	movdqu %xmm6,(%rdi)
   43464:	movdqu %xmm5,0x10(%rdi)
   43469:	add    $0x20,%rdi
   4346d:	movdqa %xmm4,%xmm6
   43471:	movdqa %xmm1,%xmm5
   43475:	sub    $0x8,%rcx

0000000000043479 <jsimd_ycc_extxbgr_convert_sse2.column_st16>:
   43479:	cmp    $0x4,%rcx
   4347d:	jb     4348f <jsimd_ycc_extxbgr_convert_sse2.column_st15>
   4347f:	movdqu %xmm6,(%rdi)
   43483:	add    $0x10,%rdi
   43487:	movdqa %xmm5,%xmm6
   4348b:	sub    $0x4,%rcx

000000000004348f <jsimd_ycc_extxbgr_convert_sse2.column_st15>:
   4348f:	cmp    $0x2,%rcx
   43493:	jb     434a6 <jsimd_ycc_extxbgr_convert_sse2.column_st7>
   43495:	movq   %xmm6,(%rdi)
   43499:	add    $0x8,%rdi
   4349d:	sub    $0x2,%rcx
   434a1:	psrldq $0x8,%xmm6

00000000000434a6 <jsimd_ycc_extxbgr_convert_sse2.column_st7>:
   434a6:	test   %rcx,%rcx
   434a9:	je     434af <jsimd_ycc_extxbgr_convert_sse2.nextrow>
   434ab:	movd   %xmm6,(%rdi)

00000000000434af <jsimd_ycc_extxbgr_convert_sse2.nextrow>:
   434af:	pop    %rcx
   434b0:	pop    %rsi
   434b1:	pop    %rbx
   434b2:	pop    %rdx
   434b3:	pop    %rdi
   434b4:	pop    %rax
   434b5:	add    $0x8,%rsi
   434b9:	add    $0x8,%rbx
   434bd:	add    $0x8,%rdx
   434c1:	add    $0x8,%rdi
   434c5:	dec    %rax
   434c8:	jg     43210 <jsimd_ycc_extxbgr_convert_sse2.rowloop>
   434ce:	sfence 

00000000000434d1 <jsimd_ycc_extxbgr_convert_sse2.return>:
   434d1:	pop    %rbx
   434d2:	pop    %r15
   434d4:	pop    %r14
   434d6:	pop    %r13
   434d8:	pop    %r12
   434da:	pop    %r11
   434dc:	pop    %r10
   434de:	mov    %rbp,%rsp
   434e1:	pop    %rsp
   434e2:	pop    %rbp
   434e3:	retq   
   434e4:	nop
   434e5:	nop
   434e6:	nop
   434e7:	nop
   434e8:	nop
   434e9:	nop
   434ea:	nop
   434eb:	nop
   434ec:	nop
   434ed:	nop
   434ee:	nop
   434ef:	nop

00000000000434f0 <jsimd_ycc_extxrgb_convert_sse2>:
   434f0:	push   %rbp
   434f1:	mov    %rsp,%rax
   434f4:	sub    $0x4,%rsp
   434f8:	and    $0xfffffffffffffff0,%rsp
   434fc:	mov    %rax,(%rsp)
   43500:	mov    %rsp,%rbp
   43503:	lea    -0x20(%rbp),%rsp
   43507:	push   %r10
   43509:	push   %r11
   4350b:	push   %r12
   4350d:	push   %r13
   4350f:	push   %r14
   43511:	push   %r15
   43513:	mov    %rdi,%r10
   43516:	mov    %rsi,%r11
   43519:	mov    %rdx,%r12
   4351c:	mov    %rcx,%r13
   4351f:	mov    %r8,%r14
   43522:	mov    %r9,%r15
   43525:	push   %rbx
   43526:	mov    %r10d,%ecx
   43529:	test   %rcx,%rcx
   4352c:	je     43821 <jsimd_ycc_extxrgb_convert_sse2.return>
   43532:	push   %rcx
   43533:	mov    %r11,%rdi
   43536:	mov    %r12d,%ecx
   43539:	mov    (%rdi),%rsi
   4353c:	mov    0x8(%rdi),%rbx
   43540:	mov    0x10(%rdi),%rdx
   43544:	lea    (%rsi,%rcx,8),%rsi
   43548:	lea    (%rbx,%rcx,8),%rbx
   4354c:	lea    (%rdx,%rcx,8),%rdx
   43550:	pop    %rcx
   43551:	mov    %r13,%rdi
   43554:	mov    %r14d,%eax
   43557:	test   %rax,%rax
   4355a:	jle    43821 <jsimd_ycc_extxrgb_convert_sse2.return>

0000000000043560 <jsimd_ycc_extxrgb_convert_sse2.rowloop>:
   43560:	push   %rax
   43561:	push   %rdi
   43562:	push   %rdx
   43563:	push   %rbx
   43564:	push   %rsi
   43565:	push   %rcx
   43566:	mov    (%rsi),%rsi
   43569:	mov    (%rbx),%rbx
   4356c:	mov    (%rdx),%rdx
   4356f:	mov    (%rdi),%rdi

0000000000043572 <jsimd_ycc_extxrgb_convert_sse2.columnloop>:
   43572:	movdqa (%rbx),%xmm5
   43576:	movdqa (%rdx),%xmm1
   4357a:	pcmpeqw %xmm4,%xmm4
   4357e:	pcmpeqw %xmm7,%xmm7
   43582:	psrlw  $0x8,%xmm4
   43587:	psllw  $0x7,%xmm7
   4358c:	movdqa %xmm4,%xmm0
   43590:	pand   %xmm5,%xmm4
   43594:	psrlw  $0x8,%xmm5
   43599:	pand   %xmm1,%xmm0
   4359d:	psrlw  $0x8,%xmm1
   435a2:	paddw  %xmm7,%xmm4
   435a6:	paddw  %xmm7,%xmm5
   435aa:	paddw  %xmm7,%xmm0
   435ae:	paddw  %xmm7,%xmm1
   435b2:	movdqa %xmm4,%xmm2
   435b6:	movdqa %xmm5,%xmm3
   435ba:	paddw  %xmm4,%xmm4
   435be:	paddw  %xmm5,%xmm5
   435c2:	movdqa %xmm0,%xmm6
   435c6:	movdqa %xmm1,%xmm7
   435ca:	paddw  %xmm0,%xmm0
   435ce:	paddw  %xmm1,%xmm1
   435d2:	pmulhw 0x286e6(%rip),%xmm4        # 6bcc0 <PW_MF0228>
   435da:	pmulhw 0x286de(%rip),%xmm5        # 6bcc0 <PW_MF0228>
   435e2:	pmulhw 0x286c6(%rip),%xmm0        # 6bcb0 <PW_F0402>
   435ea:	pmulhw 0x286be(%rip),%xmm1        # 6bcb0 <PW_F0402>
   435f2:	paddw  0x286e6(%rip),%xmm4        # 6bce0 <PW_ONE>
   435fa:	paddw  0x286de(%rip),%xmm5        # 6bce0 <PW_ONE>
   43602:	psraw  $0x1,%xmm4
   43607:	psraw  $0x1,%xmm5
   4360c:	paddw  0x286cc(%rip),%xmm0        # 6bce0 <PW_ONE>
   43614:	paddw  0x286c4(%rip),%xmm1        # 6bce0 <PW_ONE>
   4361c:	psraw  $0x1,%xmm0
   43621:	psraw  $0x1,%xmm1
   43626:	paddw  %xmm2,%xmm4
   4362a:	paddw  %xmm3,%xmm5
   4362e:	paddw  %xmm2,%xmm4
   43632:	paddw  %xmm3,%xmm5
   43636:	paddw  %xmm6,%xmm0
   4363a:	paddw  %xmm7,%xmm1
   4363e:	movdqa %xmm4,-0x20(%rbp)
   43643:	movdqa %xmm5,-0x10(%rbp)
   43648:	movdqa %xmm2,%xmm4
   4364c:	movdqa %xmm3,%xmm5
   43650:	punpcklwd %xmm6,%xmm2
   43654:	punpckhwd %xmm6,%xmm4
   43658:	pmaddwd 0x28670(%rip),%xmm2        # 6bcd0 <PW_MF0344_F0285>
   43660:	pmaddwd 0x28668(%rip),%xmm4        # 6bcd0 <PW_MF0344_F0285>
   43668:	punpcklwd %xmm7,%xmm3
   4366c:	punpckhwd %xmm7,%xmm5
   43670:	pmaddwd 0x28658(%rip),%xmm3        # 6bcd0 <PW_MF0344_F0285>
   43678:	pmaddwd 0x28650(%rip),%xmm5        # 6bcd0 <PW_MF0344_F0285>
   43680:	paddd  0x28668(%rip),%xmm2        # 6bcf0 <PD_ONEHALF>
   43688:	paddd  0x28660(%rip),%xmm4        # 6bcf0 <PD_ONEHALF>
   43690:	psrad  $0x10,%xmm2
   43695:	psrad  $0x10,%xmm4
   4369a:	paddd  0x2864e(%rip),%xmm3        # 6bcf0 <PD_ONEHALF>
   436a2:	paddd  0x28646(%rip),%xmm5        # 6bcf0 <PD_ONEHALF>
   436aa:	psrad  $0x10,%xmm3
   436af:	psrad  $0x10,%xmm5
   436b4:	packssdw %xmm4,%xmm2
   436b8:	packssdw %xmm5,%xmm3
   436bc:	psubw  %xmm6,%xmm2
   436c0:	psubw  %xmm7,%xmm3
   436c4:	movdqa (%rsi),%xmm5
   436c8:	pcmpeqw %xmm4,%xmm4
   436cc:	psrlw  $0x8,%xmm4
   436d1:	pand   %xmm5,%xmm4
   436d5:	psrlw  $0x8,%xmm5
   436da:	paddw  %xmm4,%xmm0
   436de:	paddw  %xmm5,%xmm1
   436e2:	packuswb %xmm0,%xmm0
   436e6:	packuswb %xmm1,%xmm1
   436ea:	paddw  %xmm4,%xmm2
   436ee:	paddw  %xmm5,%xmm3
   436f2:	packuswb %xmm2,%xmm2
   436f6:	packuswb %xmm3,%xmm3
   436fa:	paddw  -0x20(%rbp),%xmm4
   436ff:	paddw  -0x10(%rbp),%xmm5
   43704:	packuswb %xmm4,%xmm4
   43708:	packuswb %xmm5,%xmm5
   4370c:	pcmpeqb %xmm6,%xmm6
   43710:	pcmpeqb %xmm7,%xmm7
   43714:	punpcklbw %xmm0,%xmm6
   43718:	punpcklbw %xmm4,%xmm2
   4371c:	punpcklbw %xmm1,%xmm7
   43720:	punpcklbw %xmm5,%xmm3
   43724:	movdqa %xmm6,%xmm0
   43728:	punpcklwd %xmm2,%xmm6
   4372c:	punpckhwd %xmm2,%xmm0
   43730:	movdqa %xmm7,%xmm4
   43734:	punpcklwd %xmm3,%xmm7
   43738:	punpckhwd %xmm3,%xmm4
   4373c:	movdqa %xmm6,%xmm1
   43740:	punpckldq %xmm7,%xmm6
   43744:	punpckhdq %xmm7,%xmm1
   43748:	movdqa %xmm0,%xmm5
   4374c:	punpckldq %xmm4,%xmm0
   43750:	punpckhdq %xmm4,%xmm5
   43754:	cmp    $0x10,%rcx
   43758:	jb     437aa <jsimd_ycc_extxrgb_convert_sse2.column_st32>
   4375a:	test   $0xf,%rdi
   43761:	jne    43778 <jsimd_ycc_extxrgb_convert_sse2.out1>
   43763:	movntdq %xmm6,(%rdi)
   43767:	movntdq %xmm1,0x10(%rdi)
   4376c:	movntdq %xmm0,0x20(%rdi)
   43771:	movntdq %xmm5,0x30(%rdi)
   43776:	jmp    4378b <jsimd_ycc_extxrgb_convert_sse2.out0>

0000000000043778 <jsimd_ycc_extxrgb_convert_sse2.out1>:
   43778:	movdqu %xmm6,(%rdi)
   4377c:	movdqu %xmm1,0x10(%rdi)
   43781:	movdqu %xmm0,0x20(%rdi)
   43786:	movdqu %xmm5,0x30(%rdi)

000000000004378b <jsimd_ycc_extxrgb_convert_sse2.out0>:
   4378b:	add    $0x40,%rdi
   4378f:	sub    $0x10,%rcx
   43793:	je     437ff <jsimd_ycc_extxrgb_convert_sse2.nextrow>
   43799:	add    $0x10,%rsi
   4379d:	add    $0x10,%rbx
   437a1:	add    $0x10,%rdx
   437a5:	jmpq   43572 <jsimd_ycc_extxrgb_convert_sse2.columnloop>

00000000000437aa <jsimd_ycc_extxrgb_convert_sse2.column_st32>:
   437aa:	cmp    $0x8,%rcx
   437ae:	jb     437c9 <jsimd_ycc_extxrgb_convert_sse2.column_st16>
   437b0:	movdqu %xmm6,(%rdi)
   437b4:	movdqu %xmm1,0x10(%rdi)
   437b9:	add    $0x20,%rdi
   437bd:	movdqa %xmm0,%xmm6
   437c1:	movdqa %xmm5,%xmm1
   437c5:	sub    $0x8,%rcx

00000000000437c9 <jsimd_ycc_extxrgb_convert_sse2.column_st16>:
   437c9:	cmp    $0x4,%rcx
   437cd:	jb     437df <jsimd_ycc_extxrgb_convert_sse2.column_st15>
   437cf:	movdqu %xmm6,(%rdi)
   437d3:	add    $0x10,%rdi
   437d7:	movdqa %xmm1,%xmm6
   437db:	sub    $0x4,%rcx

00000000000437df <jsimd_ycc_extxrgb_convert_sse2.column_st15>:
   437df:	cmp    $0x2,%rcx
   437e3:	jb     437f6 <jsimd_ycc_extxrgb_convert_sse2.column_st7>
   437e5:	movq   %xmm6,(%rdi)
   437e9:	add    $0x8,%rdi
   437ed:	sub    $0x2,%rcx
   437f1:	psrldq $0x8,%xmm6

00000000000437f6 <jsimd_ycc_extxrgb_convert_sse2.column_st7>:
   437f6:	test   %rcx,%rcx
   437f9:	je     437ff <jsimd_ycc_extxrgb_convert_sse2.nextrow>
   437fb:	movd   %xmm6,(%rdi)

00000000000437ff <jsimd_ycc_extxrgb_convert_sse2.nextrow>:
   437ff:	pop    %rcx
   43800:	pop    %rsi
   43801:	pop    %rbx
   43802:	pop    %rdx
   43803:	pop    %rdi
   43804:	pop    %rax
   43805:	add    $0x8,%rsi
   43809:	add    $0x8,%rbx
   4380d:	add    $0x8,%rdx
   43811:	add    $0x8,%rdi
   43815:	dec    %rax
   43818:	jg     43560 <jsimd_ycc_extxrgb_convert_sse2.rowloop>
   4381e:	sfence 

0000000000043821 <jsimd_ycc_extxrgb_convert_sse2.return>:
   43821:	pop    %rbx
   43822:	pop    %r15
   43824:	pop    %r14
   43826:	pop    %r13
   43828:	pop    %r12
   4382a:	pop    %r11
   4382c:	pop    %r10
   4382e:	mov    %rbp,%rsp
   43831:	pop    %rsp
   43832:	pop    %rbp
   43833:	retq   
   43834:	nop
   43835:	nop
   43836:	nop
   43837:	nop
   43838:	nop
   43839:	nop
   4383a:	nop
   4383b:	nop
   4383c:	nop
   4383d:	nop
   4383e:	nop
   4383f:	nop

0000000000043840 <jsimd_h2v1_merged_upsample_sse2>:
   43840:	push   %rbp
   43841:	mov    %rsp,%rax
   43844:	sub    $0x4,%rsp
   43848:	and    $0xfffffffffffffff0,%rsp
   4384c:	mov    %rax,(%rsp)
   43850:	mov    %rsp,%rbp
   43853:	lea    -0x30(%rbp),%rsp
   43857:	push   %r10
   43859:	push   %r11
   4385b:	push   %r12
   4385d:	push   %r13
   4385f:	push   %r14
   43861:	push   %r15
   43863:	mov    %rdi,%r10
   43866:	mov    %rsi,%r11
   43869:	mov    %rdx,%r12
   4386c:	mov    %rcx,%r13
   4386f:	mov    %r8,%r14
   43872:	mov    %r9,%r15
   43875:	push   %rbx
   43876:	mov    %r10d,%ecx
   43879:	test   %rcx,%rcx
   4387c:	je     43bb9 <jsimd_h2v1_merged_upsample_sse2.return>
   43882:	push   %rcx
   43883:	mov    %r11,%rdi
   43886:	mov    %r12d,%ecx
   43889:	mov    (%rdi),%rsi
   4388c:	mov    0x8(%rdi),%rbx
   43890:	mov    0x10(%rdi),%rdx
   43894:	mov    %r13,%rdi
   43897:	mov    (%rsi,%rcx,8),%rsi
   4389b:	mov    (%rbx,%rcx,8),%rbx
   4389f:	mov    (%rdx,%rcx,8),%rdx
   438a3:	mov    (%rdi),%rdi
   438a6:	pop    %rcx

00000000000438a7 <jsimd_h2v1_merged_upsample_sse2.columnloop>:
   438a7:	movdqa (%rbx),%xmm6
   438ab:	movdqa (%rdx),%xmm7
   438af:	pxor   %xmm1,%xmm1
   438b3:	pcmpeqw %xmm3,%xmm3
   438b7:	psllw  $0x7,%xmm3
   438bc:	movdqa %xmm6,%xmm4
   438c0:	punpckhbw %xmm1,%xmm6
   438c4:	punpcklbw %xmm1,%xmm4
   438c8:	movdqa %xmm7,%xmm0
   438cc:	punpckhbw %xmm1,%xmm7
   438d0:	punpcklbw %xmm1,%xmm0
   438d4:	paddw  %xmm3,%xmm6
   438d8:	paddw  %xmm3,%xmm4
   438dc:	paddw  %xmm3,%xmm7
   438e0:	paddw  %xmm3,%xmm0
   438e4:	movdqa %xmm6,%xmm5
   438e8:	movdqa %xmm4,%xmm2
   438ec:	paddw  %xmm6,%xmm6
   438f0:	paddw  %xmm4,%xmm4
   438f4:	movdqa %xmm7,%xmm1
   438f8:	movdqa %xmm0,%xmm3
   438fc:	paddw  %xmm7,%xmm7
   43900:	paddw  %xmm0,%xmm0
   43904:	pmulhw 0x28404(%rip),%xmm6        # 6bd10 <PW_MF0228>
   4390c:	pmulhw 0x283fc(%rip),%xmm4        # 6bd10 <PW_MF0228>
   43914:	pmulhw 0x283e4(%rip),%xmm7        # 6bd00 <PW_F0402>
   4391c:	pmulhw 0x283dc(%rip),%xmm0        # 6bd00 <PW_F0402>
   43924:	paddw  0x28404(%rip),%xmm6        # 6bd30 <PW_ONE>
   4392c:	paddw  0x283fc(%rip),%xmm4        # 6bd30 <PW_ONE>
   43934:	psraw  $0x1,%xmm6
   43939:	psraw  $0x1,%xmm4
   4393e:	paddw  0x283ea(%rip),%xmm7        # 6bd30 <PW_ONE>
   43946:	paddw  0x283e2(%rip),%xmm0        # 6bd30 <PW_ONE>
   4394e:	psraw  $0x1,%xmm7
   43953:	psraw  $0x1,%xmm0
   43958:	paddw  %xmm5,%xmm6
   4395c:	paddw  %xmm2,%xmm4
   43960:	paddw  %xmm5,%xmm6
   43964:	paddw  %xmm2,%xmm4
   43968:	paddw  %xmm1,%xmm7
   4396c:	paddw  %xmm3,%xmm0
   43970:	movdqa %xmm6,-0x30(%rbp)
   43975:	movdqa %xmm7,-0x20(%rbp)
   4397a:	movdqa %xmm5,%xmm6
   4397e:	movdqa %xmm2,%xmm7
   43982:	punpcklwd %xmm1,%xmm5
   43986:	punpckhwd %xmm1,%xmm6
   4398a:	pmaddwd 0x2838e(%rip),%xmm5        # 6bd20 <PW_MF0344_F0285>
   43992:	pmaddwd 0x28386(%rip),%xmm6        # 6bd20 <PW_MF0344_F0285>
   4399a:	punpcklwd %xmm3,%xmm2
   4399e:	punpckhwd %xmm3,%xmm7
   439a2:	pmaddwd 0x28376(%rip),%xmm2        # 6bd20 <PW_MF0344_F0285>
   439aa:	pmaddwd 0x2836e(%rip),%xmm7        # 6bd20 <PW_MF0344_F0285>
   439b2:	paddd  0x28386(%rip),%xmm5        # 6bd40 <PD_ONEHALF>
   439ba:	paddd  0x2837e(%rip),%xmm6        # 6bd40 <PD_ONEHALF>
   439c2:	psrad  $0x10,%xmm5
   439c7:	psrad  $0x10,%xmm6
   439cc:	paddd  0x2836c(%rip),%xmm2        # 6bd40 <PD_ONEHALF>
   439d4:	paddd  0x28364(%rip),%xmm7        # 6bd40 <PD_ONEHALF>
   439dc:	psrad  $0x10,%xmm2
   439e1:	psrad  $0x10,%xmm7
   439e6:	packssdw %xmm6,%xmm5
   439ea:	packssdw %xmm7,%xmm2
   439ee:	psubw  %xmm1,%xmm5
   439f2:	psubw  %xmm3,%xmm2
   439f6:	movdqa %xmm5,-0x10(%rbp)
   439fb:	mov    $0x2,%al
   439fd:	jmp    43a0e <jsimd_h2v1_merged_upsample_sse2.Yloop_1st>

00000000000439ff <jsimd_h2v1_merged_upsample_sse2.Yloop_2nd>:
   439ff:	movdqa -0x20(%rbp),%xmm0
   43a04:	movdqa -0x10(%rbp),%xmm2
   43a09:	movdqa -0x30(%rbp),%xmm4

0000000000043a0e <jsimd_h2v1_merged_upsample_sse2.Yloop_1st>:
   43a0e:	movdqa (%rsi),%xmm7
   43a12:	pcmpeqw %xmm6,%xmm6
   43a16:	psrlw  $0x8,%xmm6
   43a1b:	pand   %xmm7,%xmm6
   43a1f:	psrlw  $0x8,%xmm7
   43a24:	movdqa %xmm0,%xmm1
   43a28:	movdqa %xmm2,%xmm3
   43a2c:	movdqa %xmm4,%xmm5
   43a30:	paddw  %xmm6,%xmm0
   43a34:	paddw  %xmm7,%xmm1
   43a38:	packuswb %xmm0,%xmm0
   43a3c:	packuswb %xmm1,%xmm1
   43a40:	paddw  %xmm6,%xmm2
   43a44:	paddw  %xmm7,%xmm3
   43a48:	packuswb %xmm2,%xmm2
   43a4c:	packuswb %xmm3,%xmm3
   43a50:	paddw  %xmm6,%xmm4
   43a54:	paddw  %xmm7,%xmm5
   43a58:	packuswb %xmm4,%xmm4
   43a5c:	packuswb %xmm5,%xmm5
   43a60:	punpcklbw %xmm2,%xmm0
   43a64:	punpcklbw %xmm1,%xmm4
   43a68:	punpcklbw %xmm5,%xmm3
   43a6c:	movdqa %xmm0,%xmm6
   43a70:	movdqa %xmm0,%xmm7
   43a74:	punpcklwd %xmm4,%xmm0
   43a78:	punpckhwd %xmm4,%xmm6
   43a7c:	psrldq $0x2,%xmm7
   43a81:	psrldq $0x2,%xmm4
   43a86:	movdqa %xmm3,%xmm2
   43a8a:	movdqa %xmm3,%xmm1
   43a8e:	punpcklwd %xmm7,%xmm3
   43a92:	punpckhwd %xmm7,%xmm2
   43a96:	psrldq $0x2,%xmm1
   43a9b:	movdqa %xmm4,%xmm5
   43a9f:	punpcklwd %xmm1,%xmm4
   43aa3:	punpckhwd %xmm1,%xmm5
   43aa7:	pshufd $0x4e,%xmm0,%xmm7
   43aac:	movdqa %xmm4,%xmm1
   43ab0:	punpckldq %xmm3,%xmm0
   43ab4:	punpckldq %xmm7,%xmm4
   43ab8:	punpckhdq %xmm1,%xmm3
   43abc:	pshufd $0x4e,%xmm6,%xmm7
   43ac1:	movdqa %xmm5,%xmm1
   43ac5:	punpckldq %xmm2,%xmm6
   43ac9:	punpckldq %xmm7,%xmm5
   43acd:	punpckhdq %xmm1,%xmm2
   43ad1:	punpcklqdq %xmm4,%xmm0
   43ad5:	punpcklqdq %xmm6,%xmm3
   43ad9:	punpcklqdq %xmm2,%xmm5
   43add:	cmp    $0x10,%rcx
   43ae1:	jb     43b31 <jsimd_h2v1_merged_upsample_sse2.column_st32>
   43ae3:	test   $0xf,%rdi
   43aea:	jne    43afc <jsimd_h2v1_merged_upsample_sse2.out1>
   43aec:	movntdq %xmm0,(%rdi)
   43af0:	movntdq %xmm3,0x10(%rdi)
   43af5:	movntdq %xmm5,0x20(%rdi)
   43afa:	jmp    43b0a <jsimd_h2v1_merged_upsample_sse2.out0>

0000000000043afc <jsimd_h2v1_merged_upsample_sse2.out1>:
   43afc:	movdqu %xmm0,(%rdi)
   43b00:	movdqu %xmm3,0x10(%rdi)
   43b05:	movdqu %xmm5,0x20(%rdi)

0000000000043b0a <jsimd_h2v1_merged_upsample_sse2.out0>:
   43b0a:	add    $0x30,%rdi
   43b0e:	sub    $0x10,%rcx
   43b12:	je     43bb6 <jsimd_h2v1_merged_upsample_sse2.endcolumn>
   43b18:	add    $0x10,%rsi
   43b1c:	dec    %al
   43b1e:	jne    439ff <jsimd_h2v1_merged_upsample_sse2.Yloop_2nd>
   43b24:	add    $0x10,%rbx
   43b28:	add    $0x10,%rdx
   43b2c:	jmpq   438a7 <jsimd_h2v1_merged_upsample_sse2.columnloop>

0000000000043b31 <jsimd_h2v1_merged_upsample_sse2.column_st32>:
   43b31:	lea    (%rcx,%rcx,2),%rcx
   43b35:	cmp    $0x20,%rcx
   43b39:	jb     43b52 <jsimd_h2v1_merged_upsample_sse2.column_st16>
   43b3b:	movdqu %xmm0,(%rdi)
   43b3f:	movdqu %xmm3,0x10(%rdi)
   43b44:	add    $0x20,%rdi
   43b48:	movdqa %xmm5,%xmm0
   43b4c:	sub    $0x20,%rcx
   43b50:	jmp    43b68 <jsimd_h2v1_merged_upsample_sse2.column_st15>

0000000000043b52 <jsimd_h2v1_merged_upsample_sse2.column_st16>:
   43b52:	cmp    $0x10,%rcx
   43b56:	jb     43b68 <jsimd_h2v1_merged_upsample_sse2.column_st15>
   43b58:	movdqu %xmm0,(%rdi)
   43b5c:	add    $0x10,%rdi
   43b60:	movdqa %xmm3,%xmm0
   43b64:	sub    $0x10,%rcx

0000000000043b68 <jsimd_h2v1_merged_upsample_sse2.column_st15>:
   43b68:	cmp    $0x8,%rcx
   43b6c:	jb     43b7f <jsimd_h2v1_merged_upsample_sse2.column_st7>
   43b6e:	movq   %xmm0,(%rdi)
   43b72:	add    $0x8,%rdi
   43b76:	sub    $0x8,%rcx
   43b7a:	psrldq $0x8,%xmm0

0000000000043b7f <jsimd_h2v1_merged_upsample_sse2.column_st7>:
   43b7f:	cmp    $0x4,%rcx
   43b83:	jb     43b96 <jsimd_h2v1_merged_upsample_sse2.column_st3>
   43b85:	movd   %xmm0,(%rdi)
   43b89:	add    $0x4,%rdi
   43b8d:	sub    $0x4,%rcx
   43b91:	psrldq $0x4,%xmm0

0000000000043b96 <jsimd_h2v1_merged_upsample_sse2.column_st3>:
   43b96:	movd   %xmm0,%eax
   43b9a:	cmp    $0x2,%rcx
   43b9e:	jb     43baf <jsimd_h2v1_merged_upsample_sse2.column_st1>
   43ba0:	mov    %ax,(%rdi)
   43ba3:	add    $0x2,%rdi
   43ba7:	sub    $0x2,%rcx
   43bab:	shr    $0x10,%rax

0000000000043baf <jsimd_h2v1_merged_upsample_sse2.column_st1>:
   43baf:	test   %rcx,%rcx
   43bb2:	je     43bb6 <jsimd_h2v1_merged_upsample_sse2.endcolumn>
   43bb4:	mov    %al,(%rdi)

0000000000043bb6 <jsimd_h2v1_merged_upsample_sse2.endcolumn>:
   43bb6:	sfence 

0000000000043bb9 <jsimd_h2v1_merged_upsample_sse2.return>:
   43bb9:	pop    %rbx
   43bba:	pop    %r15
   43bbc:	pop    %r14
   43bbe:	pop    %r13
   43bc0:	pop    %r12
   43bc2:	pop    %r11
   43bc4:	pop    %r10
   43bc6:	mov    %rbp,%rsp
   43bc9:	pop    %rsp
   43bca:	pop    %rbp
   43bcb:	retq   
   43bcc:	nop
   43bcd:	nop
   43bce:	nop
   43bcf:	nop

0000000000043bd0 <jsimd_h2v2_merged_upsample_sse2>:
   43bd0:	push   %rbp
   43bd1:	mov    %rsp,%rax
   43bd4:	mov    %rsp,%rbp
   43bd7:	push   %r10
   43bd9:	push   %r11
   43bdb:	push   %r12
   43bdd:	push   %r13
   43bdf:	push   %r14
   43be1:	push   %r15
   43be3:	mov    %rdi,%r10
   43be6:	mov    %rsi,%r11
   43be9:	mov    %rdx,%r12
   43bec:	mov    %rcx,%r13
   43bef:	mov    %r8,%r14
   43bf2:	mov    %r9,%r15
   43bf5:	push   %rbx
   43bf6:	mov    %r10d,%eax
   43bf9:	mov    %r11,%rdi
   43bfc:	mov    %r12d,%ecx
   43bff:	mov    (%rdi),%rsi
   43c02:	mov    0x8(%rdi),%rbx
   43c06:	mov    0x10(%rdi),%rdx
   43c0a:	mov    %r13,%rdi
   43c0d:	lea    (%rsi,%rcx,8),%rsi
   43c11:	push   %rdx
   43c12:	push   %rbx
   43c13:	push   %rsi
   43c14:	mov    %rsp,%rbx
   43c17:	push   %rdi
   43c18:	push   %rcx
   43c19:	push   %rax
   43c1a:	mov    %rcx,%rdx
   43c1d:	mov    %rdi,%rcx
   43c20:	mov    %rax,%rdi
   43c23:	mov    %rbx,%rsi
   43c26:	callq  43840 <jsimd_h2v1_merged_upsample_sse2>
   43c2b:	pop    %rax
   43c2c:	pop    %rcx
   43c2d:	pop    %rdi
   43c2e:	pop    %rsi
   43c2f:	pop    %rbx
   43c30:	pop    %rdx
   43c31:	add    $0x8,%rdi
   43c35:	add    $0x8,%rsi
   43c39:	push   %rdx
   43c3a:	push   %rbx
   43c3b:	push   %rsi
   43c3c:	mov    %rsp,%rbx
   43c3f:	push   %rdi
   43c40:	push   %rcx
   43c41:	push   %rax
   43c42:	mov    %rcx,%rdx
   43c45:	mov    %rdi,%rcx
   43c48:	mov    %rax,%rdi
   43c4b:	mov    %rbx,%rsi
   43c4e:	callq  43840 <jsimd_h2v1_merged_upsample_sse2>
   43c53:	pop    %rax
   43c54:	pop    %rcx
   43c55:	pop    %rdi
   43c56:	pop    %rsi
   43c57:	pop    %rbx
   43c58:	pop    %rdx
   43c59:	pop    %rbx
   43c5a:	pop    %r15
   43c5c:	pop    %r14
   43c5e:	pop    %r13
   43c60:	pop    %r12
   43c62:	pop    %r11
   43c64:	pop    %r10
   43c66:	pop    %rbp
   43c67:	retq   
   43c68:	nop
   43c69:	nop
   43c6a:	nop
   43c6b:	nop
   43c6c:	nop
   43c6d:	nop
   43c6e:	nop
   43c6f:	nop

0000000000043c70 <jsimd_h2v1_extrgb_merged_upsample_sse2>:
   43c70:	push   %rbp
   43c71:	mov    %rsp,%rax
   43c74:	sub    $0x4,%rsp
   43c78:	and    $0xfffffffffffffff0,%rsp
   43c7c:	mov    %rax,(%rsp)
   43c80:	mov    %rsp,%rbp
   43c83:	lea    -0x30(%rbp),%rsp
   43c87:	push   %r10
   43c89:	push   %r11
   43c8b:	push   %r12
   43c8d:	push   %r13
   43c8f:	push   %r14
   43c91:	push   %r15
   43c93:	mov    %rdi,%r10
   43c96:	mov    %rsi,%r11
   43c99:	mov    %rdx,%r12
   43c9c:	mov    %rcx,%r13
   43c9f:	mov    %r8,%r14
   43ca2:	mov    %r9,%r15
   43ca5:	push   %rbx
   43ca6:	mov    %r10d,%ecx
   43ca9:	test   %rcx,%rcx
   43cac:	je     43fe9 <jsimd_h2v1_extrgb_merged_upsample_sse2.return>
   43cb2:	push   %rcx
   43cb3:	mov    %r11,%rdi
   43cb6:	mov    %r12d,%ecx
   43cb9:	mov    (%rdi),%rsi
   43cbc:	mov    0x8(%rdi),%rbx
   43cc0:	mov    0x10(%rdi),%rdx
   43cc4:	mov    %r13,%rdi
   43cc7:	mov    (%rsi,%rcx,8),%rsi
   43ccb:	mov    (%rbx,%rcx,8),%rbx
   43ccf:	mov    (%rdx,%rcx,8),%rdx
   43cd3:	mov    (%rdi),%rdi
   43cd6:	pop    %rcx

0000000000043cd7 <jsimd_h2v1_extrgb_merged_upsample_sse2.columnloop>:
   43cd7:	movdqa (%rbx),%xmm6
   43cdb:	movdqa (%rdx),%xmm7
   43cdf:	pxor   %xmm1,%xmm1
   43ce3:	pcmpeqw %xmm3,%xmm3
   43ce7:	psllw  $0x7,%xmm3
   43cec:	movdqa %xmm6,%xmm4
   43cf0:	punpckhbw %xmm1,%xmm6
   43cf4:	punpcklbw %xmm1,%xmm4
   43cf8:	movdqa %xmm7,%xmm0
   43cfc:	punpckhbw %xmm1,%xmm7
   43d00:	punpcklbw %xmm1,%xmm0
   43d04:	paddw  %xmm3,%xmm6
   43d08:	paddw  %xmm3,%xmm4
   43d0c:	paddw  %xmm3,%xmm7
   43d10:	paddw  %xmm3,%xmm0
   43d14:	movdqa %xmm6,%xmm5
   43d18:	movdqa %xmm4,%xmm2
   43d1c:	paddw  %xmm6,%xmm6
   43d20:	paddw  %xmm4,%xmm4
   43d24:	movdqa %xmm7,%xmm1
   43d28:	movdqa %xmm0,%xmm3
   43d2c:	paddw  %xmm7,%xmm7
   43d30:	paddw  %xmm0,%xmm0
   43d34:	pmulhw 0x27fd4(%rip),%xmm6        # 6bd10 <PW_MF0228>
   43d3c:	pmulhw 0x27fcc(%rip),%xmm4        # 6bd10 <PW_MF0228>
   43d44:	pmulhw 0x27fb4(%rip),%xmm7        # 6bd00 <PW_F0402>
   43d4c:	pmulhw 0x27fac(%rip),%xmm0        # 6bd00 <PW_F0402>
   43d54:	paddw  0x27fd4(%rip),%xmm6        # 6bd30 <PW_ONE>
   43d5c:	paddw  0x27fcc(%rip),%xmm4        # 6bd30 <PW_ONE>
   43d64:	psraw  $0x1,%xmm6
   43d69:	psraw  $0x1,%xmm4
   43d6e:	paddw  0x27fba(%rip),%xmm7        # 6bd30 <PW_ONE>
   43d76:	paddw  0x27fb2(%rip),%xmm0        # 6bd30 <PW_ONE>
   43d7e:	psraw  $0x1,%xmm7
   43d83:	psraw  $0x1,%xmm0
   43d88:	paddw  %xmm5,%xmm6
   43d8c:	paddw  %xmm2,%xmm4
   43d90:	paddw  %xmm5,%xmm6
   43d94:	paddw  %xmm2,%xmm4
   43d98:	paddw  %xmm1,%xmm7
   43d9c:	paddw  %xmm3,%xmm0
   43da0:	movdqa %xmm6,-0x30(%rbp)
   43da5:	movdqa %xmm7,-0x20(%rbp)
   43daa:	movdqa %xmm5,%xmm6
   43dae:	movdqa %xmm2,%xmm7
   43db2:	punpcklwd %xmm1,%xmm5
   43db6:	punpckhwd %xmm1,%xmm6
   43dba:	pmaddwd 0x27f5e(%rip),%xmm5        # 6bd20 <PW_MF0344_F0285>
   43dc2:	pmaddwd 0x27f56(%rip),%xmm6        # 6bd20 <PW_MF0344_F0285>
   43dca:	punpcklwd %xmm3,%xmm2
   43dce:	punpckhwd %xmm3,%xmm7
   43dd2:	pmaddwd 0x27f46(%rip),%xmm2        # 6bd20 <PW_MF0344_F0285>
   43dda:	pmaddwd 0x27f3e(%rip),%xmm7        # 6bd20 <PW_MF0344_F0285>
   43de2:	paddd  0x27f56(%rip),%xmm5        # 6bd40 <PD_ONEHALF>
   43dea:	paddd  0x27f4e(%rip),%xmm6        # 6bd40 <PD_ONEHALF>
   43df2:	psrad  $0x10,%xmm5
   43df7:	psrad  $0x10,%xmm6
   43dfc:	paddd  0x27f3c(%rip),%xmm2        # 6bd40 <PD_ONEHALF>
   43e04:	paddd  0x27f34(%rip),%xmm7        # 6bd40 <PD_ONEHALF>
   43e0c:	psrad  $0x10,%xmm2
   43e11:	psrad  $0x10,%xmm7
   43e16:	packssdw %xmm6,%xmm5
   43e1a:	packssdw %xmm7,%xmm2
   43e1e:	psubw  %xmm1,%xmm5
   43e22:	psubw  %xmm3,%xmm2
   43e26:	movdqa %xmm5,-0x10(%rbp)
   43e2b:	mov    $0x2,%al
   43e2d:	jmp    43e3e <jsimd_h2v1_extrgb_merged_upsample_sse2.Yloop_1st>

0000000000043e2f <jsimd_h2v1_extrgb_merged_upsample_sse2.Yloop_2nd>:
   43e2f:	movdqa -0x20(%rbp),%xmm0
   43e34:	movdqa -0x10(%rbp),%xmm2
   43e39:	movdqa -0x30(%rbp),%xmm4

0000000000043e3e <jsimd_h2v1_extrgb_merged_upsample_sse2.Yloop_1st>:
   43e3e:	movdqa (%rsi),%xmm7
   43e42:	pcmpeqw %xmm6,%xmm6
   43e46:	psrlw  $0x8,%xmm6
   43e4b:	pand   %xmm7,%xmm6
   43e4f:	psrlw  $0x8,%xmm7
   43e54:	movdqa %xmm0,%xmm1
   43e58:	movdqa %xmm2,%xmm3
   43e5c:	movdqa %xmm4,%xmm5
   43e60:	paddw  %xmm6,%xmm0
   43e64:	paddw  %xmm7,%xmm1
   43e68:	packuswb %xmm0,%xmm0
   43e6c:	packuswb %xmm1,%xmm1
   43e70:	paddw  %xmm6,%xmm2
   43e74:	paddw  %xmm7,%xmm3
   43e78:	packuswb %xmm2,%xmm2
   43e7c:	packuswb %xmm3,%xmm3
   43e80:	paddw  %xmm6,%xmm4
   43e84:	paddw  %xmm7,%xmm5
   43e88:	packuswb %xmm4,%xmm4
   43e8c:	packuswb %xmm5,%xmm5
   43e90:	punpcklbw %xmm2,%xmm0
   43e94:	punpcklbw %xmm1,%xmm4
   43e98:	punpcklbw %xmm5,%xmm3
   43e9c:	movdqa %xmm0,%xmm6
   43ea0:	movdqa %xmm0,%xmm7
   43ea4:	punpcklwd %xmm4,%xmm0
   43ea8:	punpckhwd %xmm4,%xmm6
   43eac:	psrldq $0x2,%xmm7
   43eb1:	psrldq $0x2,%xmm4
   43eb6:	movdqa %xmm3,%xmm2
   43eba:	movdqa %xmm3,%xmm1
   43ebe:	punpcklwd %xmm7,%xmm3
   43ec2:	punpckhwd %xmm7,%xmm2
   43ec6:	psrldq $0x2,%xmm1
   43ecb:	movdqa %xmm4,%xmm5
   43ecf:	punpcklwd %xmm1,%xmm4
   43ed3:	punpckhwd %xmm1,%xmm5
   43ed7:	pshufd $0x4e,%xmm0,%xmm7
   43edc:	movdqa %xmm4,%xmm1
   43ee0:	punpckldq %xmm3,%xmm0
   43ee4:	punpckldq %xmm7,%xmm4
   43ee8:	punpckhdq %xmm1,%xmm3
   43eec:	pshufd $0x4e,%xmm6,%xmm7
   43ef1:	movdqa %xmm5,%xmm1
   43ef5:	punpckldq %xmm2,%xmm6
   43ef9:	punpckldq %xmm7,%xmm5
   43efd:	punpckhdq %xmm1,%xmm2
   43f01:	punpcklqdq %xmm4,%xmm0
   43f05:	punpcklqdq %xmm6,%xmm3
   43f09:	punpcklqdq %xmm2,%xmm5
   43f0d:	cmp    $0x10,%rcx
   43f11:	jb     43f61 <jsimd_h2v1_extrgb_merged_upsample_sse2.column_st32>
   43f13:	test   $0xf,%rdi
   43f1a:	jne    43f2c <jsimd_h2v1_extrgb_merged_upsample_sse2.out1>
   43f1c:	movntdq %xmm0,(%rdi)
   43f20:	movntdq %xmm3,0x10(%rdi)
   43f25:	movntdq %xmm5,0x20(%rdi)
   43f2a:	jmp    43f3a <jsimd_h2v1_extrgb_merged_upsample_sse2.out0>

0000000000043f2c <jsimd_h2v1_extrgb_merged_upsample_sse2.out1>:
   43f2c:	movdqu %xmm0,(%rdi)
   43f30:	movdqu %xmm3,0x10(%rdi)
   43f35:	movdqu %xmm5,0x20(%rdi)

0000000000043f3a <jsimd_h2v1_extrgb_merged_upsample_sse2.out0>:
   43f3a:	add    $0x30,%rdi
   43f3e:	sub    $0x10,%rcx
   43f42:	je     43fe6 <jsimd_h2v1_extrgb_merged_upsample_sse2.endcolumn>
   43f48:	add    $0x10,%rsi
   43f4c:	dec    %al
   43f4e:	jne    43e2f <jsimd_h2v1_extrgb_merged_upsample_sse2.Yloop_2nd>
   43f54:	add    $0x10,%rbx
   43f58:	add    $0x10,%rdx
   43f5c:	jmpq   43cd7 <jsimd_h2v1_extrgb_merged_upsample_sse2.columnloop>

0000000000043f61 <jsimd_h2v1_extrgb_merged_upsample_sse2.column_st32>:
   43f61:	lea    (%rcx,%rcx,2),%rcx
   43f65:	cmp    $0x20,%rcx
   43f69:	jb     43f82 <jsimd_h2v1_extrgb_merged_upsample_sse2.column_st16>
   43f6b:	movdqu %xmm0,(%rdi)
   43f6f:	movdqu %xmm3,0x10(%rdi)
   43f74:	add    $0x20,%rdi
   43f78:	movdqa %xmm5,%xmm0
   43f7c:	sub    $0x20,%rcx
   43f80:	jmp    43f98 <jsimd_h2v1_extrgb_merged_upsample_sse2.column_st15>

0000000000043f82 <jsimd_h2v1_extrgb_merged_upsample_sse2.column_st16>:
   43f82:	cmp    $0x10,%rcx
   43f86:	jb     43f98 <jsimd_h2v1_extrgb_merged_upsample_sse2.column_st15>
   43f88:	movdqu %xmm0,(%rdi)
   43f8c:	add    $0x10,%rdi
   43f90:	movdqa %xmm3,%xmm0
   43f94:	sub    $0x10,%rcx

0000000000043f98 <jsimd_h2v1_extrgb_merged_upsample_sse2.column_st15>:
   43f98:	cmp    $0x8,%rcx
   43f9c:	jb     43faf <jsimd_h2v1_extrgb_merged_upsample_sse2.column_st7>
   43f9e:	movq   %xmm0,(%rdi)
   43fa2:	add    $0x8,%rdi
   43fa6:	sub    $0x8,%rcx
   43faa:	psrldq $0x8,%xmm0

0000000000043faf <jsimd_h2v1_extrgb_merged_upsample_sse2.column_st7>:
   43faf:	cmp    $0x4,%rcx
   43fb3:	jb     43fc6 <jsimd_h2v1_extrgb_merged_upsample_sse2.column_st3>
   43fb5:	movd   %xmm0,(%rdi)
   43fb9:	add    $0x4,%rdi
   43fbd:	sub    $0x4,%rcx
   43fc1:	psrldq $0x4,%xmm0

0000000000043fc6 <jsimd_h2v1_extrgb_merged_upsample_sse2.column_st3>:
   43fc6:	movd   %xmm0,%eax
   43fca:	cmp    $0x2,%rcx
   43fce:	jb     43fdf <jsimd_h2v1_extrgb_merged_upsample_sse2.column_st1>
   43fd0:	mov    %ax,(%rdi)
   43fd3:	add    $0x2,%rdi
   43fd7:	sub    $0x2,%rcx
   43fdb:	shr    $0x10,%rax

0000000000043fdf <jsimd_h2v1_extrgb_merged_upsample_sse2.column_st1>:
   43fdf:	test   %rcx,%rcx
   43fe2:	je     43fe6 <jsimd_h2v1_extrgb_merged_upsample_sse2.endcolumn>
   43fe4:	mov    %al,(%rdi)

0000000000043fe6 <jsimd_h2v1_extrgb_merged_upsample_sse2.endcolumn>:
   43fe6:	sfence 

0000000000043fe9 <jsimd_h2v1_extrgb_merged_upsample_sse2.return>:
   43fe9:	pop    %rbx
   43fea:	pop    %r15
   43fec:	pop    %r14
   43fee:	pop    %r13
   43ff0:	pop    %r12
   43ff2:	pop    %r11
   43ff4:	pop    %r10
   43ff6:	mov    %rbp,%rsp
   43ff9:	pop    %rsp
   43ffa:	pop    %rbp
   43ffb:	retq   
   43ffc:	nop
   43ffd:	nop
   43ffe:	nop
   43fff:	nop

0000000000044000 <jsimd_h2v2_extrgb_merged_upsample_sse2>:
   44000:	push   %rbp
   44001:	mov    %rsp,%rax
   44004:	mov    %rsp,%rbp
   44007:	push   %r10
   44009:	push   %r11
   4400b:	push   %r12
   4400d:	push   %r13
   4400f:	push   %r14
   44011:	push   %r15
   44013:	mov    %rdi,%r10
   44016:	mov    %rsi,%r11
   44019:	mov    %rdx,%r12
   4401c:	mov    %rcx,%r13
   4401f:	mov    %r8,%r14
   44022:	mov    %r9,%r15
   44025:	push   %rbx
   44026:	mov    %r10d,%eax
   44029:	mov    %r11,%rdi
   4402c:	mov    %r12d,%ecx
   4402f:	mov    (%rdi),%rsi
   44032:	mov    0x8(%rdi),%rbx
   44036:	mov    0x10(%rdi),%rdx
   4403a:	mov    %r13,%rdi
   4403d:	lea    (%rsi,%rcx,8),%rsi
   44041:	push   %rdx
   44042:	push   %rbx
   44043:	push   %rsi
   44044:	mov    %rsp,%rbx
   44047:	push   %rdi
   44048:	push   %rcx
   44049:	push   %rax
   4404a:	mov    %rcx,%rdx
   4404d:	mov    %rdi,%rcx
   44050:	mov    %rax,%rdi
   44053:	mov    %rbx,%rsi
   44056:	callq  43c70 <jsimd_h2v1_extrgb_merged_upsample_sse2>
   4405b:	pop    %rax
   4405c:	pop    %rcx
   4405d:	pop    %rdi
   4405e:	pop    %rsi
   4405f:	pop    %rbx
   44060:	pop    %rdx
   44061:	add    $0x8,%rdi
   44065:	add    $0x8,%rsi
   44069:	push   %rdx
   4406a:	push   %rbx
   4406b:	push   %rsi
   4406c:	mov    %rsp,%rbx
   4406f:	push   %rdi
   44070:	push   %rcx
   44071:	push   %rax
   44072:	mov    %rcx,%rdx
   44075:	mov    %rdi,%rcx
   44078:	mov    %rax,%rdi
   4407b:	mov    %rbx,%rsi
   4407e:	callq  43c70 <jsimd_h2v1_extrgb_merged_upsample_sse2>
   44083:	pop    %rax
   44084:	pop    %rcx
   44085:	pop    %rdi
   44086:	pop    %rsi
   44087:	pop    %rbx
   44088:	pop    %rdx
   44089:	pop    %rbx
   4408a:	pop    %r15
   4408c:	pop    %r14
   4408e:	pop    %r13
   44090:	pop    %r12
   44092:	pop    %r11
   44094:	pop    %r10
   44096:	pop    %rbp
   44097:	retq   
   44098:	nop
   44099:	nop
   4409a:	nop
   4409b:	nop
   4409c:	nop
   4409d:	nop
   4409e:	nop
   4409f:	nop

00000000000440a0 <jsimd_h2v1_extrgbx_merged_upsample_sse2>:
   440a0:	push   %rbp
   440a1:	mov    %rsp,%rax
   440a4:	sub    $0x4,%rsp
   440a8:	and    $0xfffffffffffffff0,%rsp
   440ac:	mov    %rax,(%rsp)
   440b0:	mov    %rsp,%rbp
   440b3:	lea    -0x30(%rbp),%rsp
   440b7:	push   %r10
   440b9:	push   %r11
   440bb:	push   %r12
   440bd:	push   %r13
   440bf:	push   %r14
   440c1:	push   %r15
   440c3:	mov    %rdi,%r10
   440c6:	mov    %rsi,%r11
   440c9:	mov    %rdx,%r12
   440cc:	mov    %rcx,%r13
   440cf:	mov    %r8,%r14
   440d2:	mov    %r9,%r15
   440d5:	push   %rbx
   440d6:	mov    %r10d,%ecx
   440d9:	test   %rcx,%rcx
   440dc:	je     443be <jsimd_h2v1_extrgbx_merged_upsample_sse2.return>
   440e2:	push   %rcx
   440e3:	mov    %r11,%rdi
   440e6:	mov    %r12d,%ecx
   440e9:	mov    (%rdi),%rsi
   440ec:	mov    0x8(%rdi),%rbx
   440f0:	mov    0x10(%rdi),%rdx
   440f4:	mov    %r13,%rdi
   440f7:	mov    (%rsi,%rcx,8),%rsi
   440fb:	mov    (%rbx,%rcx,8),%rbx
   440ff:	mov    (%rdx,%rcx,8),%rdx
   44103:	mov    (%rdi),%rdi
   44106:	pop    %rcx

0000000000044107 <jsimd_h2v1_extrgbx_merged_upsample_sse2.columnloop>:
   44107:	movdqa (%rbx),%xmm6
   4410b:	movdqa (%rdx),%xmm7
   4410f:	pxor   %xmm1,%xmm1
   44113:	pcmpeqw %xmm3,%xmm3
   44117:	psllw  $0x7,%xmm3
   4411c:	movdqa %xmm6,%xmm4
   44120:	punpckhbw %xmm1,%xmm6
   44124:	punpcklbw %xmm1,%xmm4
   44128:	movdqa %xmm7,%xmm0
   4412c:	punpckhbw %xmm1,%xmm7
   44130:	punpcklbw %xmm1,%xmm0
   44134:	paddw  %xmm3,%xmm6
   44138:	paddw  %xmm3,%xmm4
   4413c:	paddw  %xmm3,%xmm7
   44140:	paddw  %xmm3,%xmm0
   44144:	movdqa %xmm6,%xmm5
   44148:	movdqa %xmm4,%xmm2
   4414c:	paddw  %xmm6,%xmm6
   44150:	paddw  %xmm4,%xmm4
   44154:	movdqa %xmm7,%xmm1
   44158:	movdqa %xmm0,%xmm3
   4415c:	paddw  %xmm7,%xmm7
   44160:	paddw  %xmm0,%xmm0
   44164:	pmulhw 0x27ba4(%rip),%xmm6        # 6bd10 <PW_MF0228>
   4416c:	pmulhw 0x27b9c(%rip),%xmm4        # 6bd10 <PW_MF0228>
   44174:	pmulhw 0x27b84(%rip),%xmm7        # 6bd00 <PW_F0402>
   4417c:	pmulhw 0x27b7c(%rip),%xmm0        # 6bd00 <PW_F0402>
   44184:	paddw  0x27ba4(%rip),%xmm6        # 6bd30 <PW_ONE>
   4418c:	paddw  0x27b9c(%rip),%xmm4        # 6bd30 <PW_ONE>
   44194:	psraw  $0x1,%xmm6
   44199:	psraw  $0x1,%xmm4
   4419e:	paddw  0x27b8a(%rip),%xmm7        # 6bd30 <PW_ONE>
   441a6:	paddw  0x27b82(%rip),%xmm0        # 6bd30 <PW_ONE>
   441ae:	psraw  $0x1,%xmm7
   441b3:	psraw  $0x1,%xmm0
   441b8:	paddw  %xmm5,%xmm6
   441bc:	paddw  %xmm2,%xmm4
   441c0:	paddw  %xmm5,%xmm6
   441c4:	paddw  %xmm2,%xmm4
   441c8:	paddw  %xmm1,%xmm7
   441cc:	paddw  %xmm3,%xmm0
   441d0:	movdqa %xmm6,-0x30(%rbp)
   441d5:	movdqa %xmm7,-0x20(%rbp)
   441da:	movdqa %xmm5,%xmm6
   441de:	movdqa %xmm2,%xmm7
   441e2:	punpcklwd %xmm1,%xmm5
   441e6:	punpckhwd %xmm1,%xmm6
   441ea:	pmaddwd 0x27b2e(%rip),%xmm5        # 6bd20 <PW_MF0344_F0285>
   441f2:	pmaddwd 0x27b26(%rip),%xmm6        # 6bd20 <PW_MF0344_F0285>
   441fa:	punpcklwd %xmm3,%xmm2
   441fe:	punpckhwd %xmm3,%xmm7
   44202:	pmaddwd 0x27b16(%rip),%xmm2        # 6bd20 <PW_MF0344_F0285>
   4420a:	pmaddwd 0x27b0e(%rip),%xmm7        # 6bd20 <PW_MF0344_F0285>
   44212:	paddd  0x27b26(%rip),%xmm5        # 6bd40 <PD_ONEHALF>
   4421a:	paddd  0x27b1e(%rip),%xmm6        # 6bd40 <PD_ONEHALF>
   44222:	psrad  $0x10,%xmm5
   44227:	psrad  $0x10,%xmm6
   4422c:	paddd  0x27b0c(%rip),%xmm2        # 6bd40 <PD_ONEHALF>
   44234:	paddd  0x27b04(%rip),%xmm7        # 6bd40 <PD_ONEHALF>
   4423c:	psrad  $0x10,%xmm2
   44241:	psrad  $0x10,%xmm7
   44246:	packssdw %xmm6,%xmm5
   4424a:	packssdw %xmm7,%xmm2
   4424e:	psubw  %xmm1,%xmm5
   44252:	psubw  %xmm3,%xmm2
   44256:	movdqa %xmm5,-0x10(%rbp)
   4425b:	mov    $0x2,%al
   4425d:	jmp    4426e <jsimd_h2v1_extrgbx_merged_upsample_sse2.Yloop_1st>

000000000004425f <jsimd_h2v1_extrgbx_merged_upsample_sse2.Yloop_2nd>:
   4425f:	movdqa -0x20(%rbp),%xmm0
   44264:	movdqa -0x10(%rbp),%xmm2
   44269:	movdqa -0x30(%rbp),%xmm4

000000000004426e <jsimd_h2v1_extrgbx_merged_upsample_sse2.Yloop_1st>:
   4426e:	movdqa (%rsi),%xmm7
   44272:	pcmpeqw %xmm6,%xmm6
   44276:	psrlw  $0x8,%xmm6
   4427b:	pand   %xmm7,%xmm6
   4427f:	psrlw  $0x8,%xmm7
   44284:	movdqa %xmm0,%xmm1
   44288:	movdqa %xmm2,%xmm3
   4428c:	movdqa %xmm4,%xmm5
   44290:	paddw  %xmm6,%xmm0
   44294:	paddw  %xmm7,%xmm1
   44298:	packuswb %xmm0,%xmm0
   4429c:	packuswb %xmm1,%xmm1
   442a0:	paddw  %xmm6,%xmm2
   442a4:	paddw  %xmm7,%xmm3
   442a8:	packuswb %xmm2,%xmm2
   442ac:	packuswb %xmm3,%xmm3
   442b0:	paddw  %xmm6,%xmm4
   442b4:	paddw  %xmm7,%xmm5
   442b8:	packuswb %xmm4,%xmm4
   442bc:	packuswb %xmm5,%xmm5
   442c0:	pcmpeqb %xmm6,%xmm6
   442c4:	pcmpeqb %xmm7,%xmm7
   442c8:	punpcklbw %xmm2,%xmm0
   442cc:	punpcklbw %xmm6,%xmm4
   442d0:	punpcklbw %xmm3,%xmm1
   442d4:	punpcklbw %xmm7,%xmm5
   442d8:	movdqa %xmm0,%xmm2
   442dc:	punpcklwd %xmm4,%xmm0
   442e0:	punpckhwd %xmm4,%xmm2
   442e4:	movdqa %xmm1,%xmm6
   442e8:	punpcklwd %xmm5,%xmm1
   442ec:	punpckhwd %xmm5,%xmm6
   442f0:	movdqa %xmm0,%xmm3
   442f4:	punpckldq %xmm1,%xmm0
   442f8:	punpckhdq %xmm1,%xmm3
   442fc:	movdqa %xmm2,%xmm7
   44300:	punpckldq %xmm6,%xmm2
   44304:	punpckhdq %xmm6,%xmm7
   44308:	cmp    $0x10,%rcx
   4430c:	jb     44366 <jsimd_h2v1_extrgbx_merged_upsample_sse2.column_st32>
   4430e:	test   $0xf,%rdi
   44315:	jne    4432c <jsimd_h2v1_extrgbx_merged_upsample_sse2.out1>
   44317:	movntdq %xmm0,(%rdi)
   4431b:	movntdq %xmm3,0x10(%rdi)
   44320:	movntdq %xmm2,0x20(%rdi)
   44325:	movntdq %xmm7,0x30(%rdi)
   4432a:	jmp    4433f <jsimd_h2v1_extrgbx_merged_upsample_sse2.out0>

000000000004432c <jsimd_h2v1_extrgbx_merged_upsample_sse2.out1>:
   4432c:	movdqu %xmm0,(%rdi)
   44330:	movdqu %xmm3,0x10(%rdi)
   44335:	movdqu %xmm2,0x20(%rdi)
   4433a:	movdqu %xmm7,0x30(%rdi)

000000000004433f <jsimd_h2v1_extrgbx_merged_upsample_sse2.out0>:
   4433f:	add    $0x40,%rdi
   44343:	sub    $0x10,%rcx
   44347:	je     443bb <jsimd_h2v1_extrgbx_merged_upsample_sse2.endcolumn>
   4434d:	add    $0x10,%rsi
   44351:	dec    %al
   44353:	jne    4425f <jsimd_h2v1_extrgbx_merged_upsample_sse2.Yloop_2nd>
   44359:	add    $0x10,%rbx
   4435d:	add    $0x10,%rdx
   44361:	jmpq   44107 <jsimd_h2v1_extrgbx_merged_upsample_sse2.columnloop>

0000000000044366 <jsimd_h2v1_extrgbx_merged_upsample_sse2.column_st32>:
   44366:	cmp    $0x8,%rcx
   4436a:	jb     44385 <jsimd_h2v1_extrgbx_merged_upsample_sse2.column_st16>
   4436c:	movdqu %xmm0,(%rdi)
   44370:	movdqu %xmm3,0x10(%rdi)
   44375:	add    $0x20,%rdi
   44379:	movdqa %xmm2,%xmm0
   4437d:	movdqa %xmm7,%xmm3
   44381:	sub    $0x8,%rcx

0000000000044385 <jsimd_h2v1_extrgbx_merged_upsample_sse2.column_st16>:
   44385:	cmp    $0x4,%rcx
   44389:	jb     4439b <jsimd_h2v1_extrgbx_merged_upsample_sse2.column_st15>
   4438b:	movdqu %xmm0,(%rdi)
   4438f:	add    $0x10,%rdi
   44393:	movdqa %xmm3,%xmm0
   44397:	sub    $0x4,%rcx

000000000004439b <jsimd_h2v1_extrgbx_merged_upsample_sse2.column_st15>:
   4439b:	cmp    $0x2,%rcx
   4439f:	jb     443b2 <jsimd_h2v1_extrgbx_merged_upsample_sse2.column_st7>
   443a1:	movq   %xmm0,(%rdi)
   443a5:	add    $0x8,%rdi
   443a9:	sub    $0x2,%rcx
   443ad:	psrldq $0x8,%xmm0

00000000000443b2 <jsimd_h2v1_extrgbx_merged_upsample_sse2.column_st7>:
   443b2:	test   %rcx,%rcx
   443b5:	je     443bb <jsimd_h2v1_extrgbx_merged_upsample_sse2.endcolumn>
   443b7:	movd   %xmm0,(%rdi)

00000000000443bb <jsimd_h2v1_extrgbx_merged_upsample_sse2.endcolumn>:
   443bb:	sfence 

00000000000443be <jsimd_h2v1_extrgbx_merged_upsample_sse2.return>:
   443be:	pop    %rbx
   443bf:	pop    %r15
   443c1:	pop    %r14
   443c3:	pop    %r13
   443c5:	pop    %r12
   443c7:	pop    %r11
   443c9:	pop    %r10
   443cb:	mov    %rbp,%rsp
   443ce:	pop    %rsp
   443cf:	pop    %rbp
   443d0:	retq   
   443d1:	nop
   443d2:	nop
   443d3:	nop
   443d4:	nop
   443d5:	nop
   443d6:	nop
   443d7:	nop
   443d8:	nop
   443d9:	nop
   443da:	nop
   443db:	nop
   443dc:	nop
   443dd:	nop
   443de:	nop
   443df:	nop

00000000000443e0 <jsimd_h2v2_extrgbx_merged_upsample_sse2>:
   443e0:	push   %rbp
   443e1:	mov    %rsp,%rax
   443e4:	mov    %rsp,%rbp
   443e7:	push   %r10
   443e9:	push   %r11
   443eb:	push   %r12
   443ed:	push   %r13
   443ef:	push   %r14
   443f1:	push   %r15
   443f3:	mov    %rdi,%r10
   443f6:	mov    %rsi,%r11
   443f9:	mov    %rdx,%r12
   443fc:	mov    %rcx,%r13
   443ff:	mov    %r8,%r14
   44402:	mov    %r9,%r15
   44405:	push   %rbx
   44406:	mov    %r10d,%eax
   44409:	mov    %r11,%rdi
   4440c:	mov    %r12d,%ecx
   4440f:	mov    (%rdi),%rsi
   44412:	mov    0x8(%rdi),%rbx
   44416:	mov    0x10(%rdi),%rdx
   4441a:	mov    %r13,%rdi
   4441d:	lea    (%rsi,%rcx,8),%rsi
   44421:	push   %rdx
   44422:	push   %rbx
   44423:	push   %rsi
   44424:	mov    %rsp,%rbx
   44427:	push   %rdi
   44428:	push   %rcx
   44429:	push   %rax
   4442a:	mov    %rcx,%rdx
   4442d:	mov    %rdi,%rcx
   44430:	mov    %rax,%rdi
   44433:	mov    %rbx,%rsi
   44436:	callq  440a0 <jsimd_h2v1_extrgbx_merged_upsample_sse2>
   4443b:	pop    %rax
   4443c:	pop    %rcx
   4443d:	pop    %rdi
   4443e:	pop    %rsi
   4443f:	pop    %rbx
   44440:	pop    %rdx
   44441:	add    $0x8,%rdi
   44445:	add    $0x8,%rsi
   44449:	push   %rdx
   4444a:	push   %rbx
   4444b:	push   %rsi
   4444c:	mov    %rsp,%rbx
   4444f:	push   %rdi
   44450:	push   %rcx
   44451:	push   %rax
   44452:	mov    %rcx,%rdx
   44455:	mov    %rdi,%rcx
   44458:	mov    %rax,%rdi
   4445b:	mov    %rbx,%rsi
   4445e:	callq  440a0 <jsimd_h2v1_extrgbx_merged_upsample_sse2>
   44463:	pop    %rax
   44464:	pop    %rcx
   44465:	pop    %rdi
   44466:	pop    %rsi
   44467:	pop    %rbx
   44468:	pop    %rdx
   44469:	pop    %rbx
   4446a:	pop    %r15
   4446c:	pop    %r14
   4446e:	pop    %r13
   44470:	pop    %r12
   44472:	pop    %r11
   44474:	pop    %r10
   44476:	pop    %rbp
   44477:	retq   
   44478:	nop
   44479:	nop
   4447a:	nop
   4447b:	nop
   4447c:	nop
   4447d:	nop
   4447e:	nop
   4447f:	nop

0000000000044480 <jsimd_h2v1_extbgr_merged_upsample_sse2>:
   44480:	push   %rbp
   44481:	mov    %rsp,%rax
   44484:	sub    $0x4,%rsp
   44488:	and    $0xfffffffffffffff0,%rsp
   4448c:	mov    %rax,(%rsp)
   44490:	mov    %rsp,%rbp
   44493:	lea    -0x30(%rbp),%rsp
   44497:	push   %r10
   44499:	push   %r11
   4449b:	push   %r12
   4449d:	push   %r13
   4449f:	push   %r14
   444a1:	push   %r15
   444a3:	mov    %rdi,%r10
   444a6:	mov    %rsi,%r11
   444a9:	mov    %rdx,%r12
   444ac:	mov    %rcx,%r13
   444af:	mov    %r8,%r14
   444b2:	mov    %r9,%r15
   444b5:	push   %rbx
   444b6:	mov    %r10d,%ecx
   444b9:	test   %rcx,%rcx
   444bc:	je     447f9 <jsimd_h2v1_extbgr_merged_upsample_sse2.return>
   444c2:	push   %rcx
   444c3:	mov    %r11,%rdi
   444c6:	mov    %r12d,%ecx
   444c9:	mov    (%rdi),%rsi
   444cc:	mov    0x8(%rdi),%rbx
   444d0:	mov    0x10(%rdi),%rdx
   444d4:	mov    %r13,%rdi
   444d7:	mov    (%rsi,%rcx,8),%rsi
   444db:	mov    (%rbx,%rcx,8),%rbx
   444df:	mov    (%rdx,%rcx,8),%rdx
   444e3:	mov    (%rdi),%rdi
   444e6:	pop    %rcx

00000000000444e7 <jsimd_h2v1_extbgr_merged_upsample_sse2.columnloop>:
   444e7:	movdqa (%rbx),%xmm6
   444eb:	movdqa (%rdx),%xmm7
   444ef:	pxor   %xmm1,%xmm1
   444f3:	pcmpeqw %xmm3,%xmm3
   444f7:	psllw  $0x7,%xmm3
   444fc:	movdqa %xmm6,%xmm4
   44500:	punpckhbw %xmm1,%xmm6
   44504:	punpcklbw %xmm1,%xmm4
   44508:	movdqa %xmm7,%xmm0
   4450c:	punpckhbw %xmm1,%xmm7
   44510:	punpcklbw %xmm1,%xmm0
   44514:	paddw  %xmm3,%xmm6
   44518:	paddw  %xmm3,%xmm4
   4451c:	paddw  %xmm3,%xmm7
   44520:	paddw  %xmm3,%xmm0
   44524:	movdqa %xmm6,%xmm5
   44528:	movdqa %xmm4,%xmm2
   4452c:	paddw  %xmm6,%xmm6
   44530:	paddw  %xmm4,%xmm4
   44534:	movdqa %xmm7,%xmm1
   44538:	movdqa %xmm0,%xmm3
   4453c:	paddw  %xmm7,%xmm7
   44540:	paddw  %xmm0,%xmm0
   44544:	pmulhw 0x277c4(%rip),%xmm6        # 6bd10 <PW_MF0228>
   4454c:	pmulhw 0x277bc(%rip),%xmm4        # 6bd10 <PW_MF0228>
   44554:	pmulhw 0x277a4(%rip),%xmm7        # 6bd00 <PW_F0402>
   4455c:	pmulhw 0x2779c(%rip),%xmm0        # 6bd00 <PW_F0402>
   44564:	paddw  0x277c4(%rip),%xmm6        # 6bd30 <PW_ONE>
   4456c:	paddw  0x277bc(%rip),%xmm4        # 6bd30 <PW_ONE>
   44574:	psraw  $0x1,%xmm6
   44579:	psraw  $0x1,%xmm4
   4457e:	paddw  0x277aa(%rip),%xmm7        # 6bd30 <PW_ONE>
   44586:	paddw  0x277a2(%rip),%xmm0        # 6bd30 <PW_ONE>
   4458e:	psraw  $0x1,%xmm7
   44593:	psraw  $0x1,%xmm0
   44598:	paddw  %xmm5,%xmm6
   4459c:	paddw  %xmm2,%xmm4
   445a0:	paddw  %xmm5,%xmm6
   445a4:	paddw  %xmm2,%xmm4
   445a8:	paddw  %xmm1,%xmm7
   445ac:	paddw  %xmm3,%xmm0
   445b0:	movdqa %xmm6,-0x30(%rbp)
   445b5:	movdqa %xmm7,-0x20(%rbp)
   445ba:	movdqa %xmm5,%xmm6
   445be:	movdqa %xmm2,%xmm7
   445c2:	punpcklwd %xmm1,%xmm5
   445c6:	punpckhwd %xmm1,%xmm6
   445ca:	pmaddwd 0x2774e(%rip),%xmm5        # 6bd20 <PW_MF0344_F0285>
   445d2:	pmaddwd 0x27746(%rip),%xmm6        # 6bd20 <PW_MF0344_F0285>
   445da:	punpcklwd %xmm3,%xmm2
   445de:	punpckhwd %xmm3,%xmm7
   445e2:	pmaddwd 0x27736(%rip),%xmm2        # 6bd20 <PW_MF0344_F0285>
   445ea:	pmaddwd 0x2772e(%rip),%xmm7        # 6bd20 <PW_MF0344_F0285>
   445f2:	paddd  0x27746(%rip),%xmm5        # 6bd40 <PD_ONEHALF>
   445fa:	paddd  0x2773e(%rip),%xmm6        # 6bd40 <PD_ONEHALF>
   44602:	psrad  $0x10,%xmm5
   44607:	psrad  $0x10,%xmm6
   4460c:	paddd  0x2772c(%rip),%xmm2        # 6bd40 <PD_ONEHALF>
   44614:	paddd  0x27724(%rip),%xmm7        # 6bd40 <PD_ONEHALF>
   4461c:	psrad  $0x10,%xmm2
   44621:	psrad  $0x10,%xmm7
   44626:	packssdw %xmm6,%xmm5
   4462a:	packssdw %xmm7,%xmm2
   4462e:	psubw  %xmm1,%xmm5
   44632:	psubw  %xmm3,%xmm2
   44636:	movdqa %xmm5,-0x10(%rbp)
   4463b:	mov    $0x2,%al
   4463d:	jmp    4464e <jsimd_h2v1_extbgr_merged_upsample_sse2.Yloop_1st>

000000000004463f <jsimd_h2v1_extbgr_merged_upsample_sse2.Yloop_2nd>:
   4463f:	movdqa -0x20(%rbp),%xmm0
   44644:	movdqa -0x10(%rbp),%xmm2
   44649:	movdqa -0x30(%rbp),%xmm4

000000000004464e <jsimd_h2v1_extbgr_merged_upsample_sse2.Yloop_1st>:
   4464e:	movdqa (%rsi),%xmm7
   44652:	pcmpeqw %xmm6,%xmm6
   44656:	psrlw  $0x8,%xmm6
   4465b:	pand   %xmm7,%xmm6
   4465f:	psrlw  $0x8,%xmm7
   44664:	movdqa %xmm0,%xmm1
   44668:	movdqa %xmm2,%xmm3
   4466c:	movdqa %xmm4,%xmm5
   44670:	paddw  %xmm6,%xmm0
   44674:	paddw  %xmm7,%xmm1
   44678:	packuswb %xmm0,%xmm0
   4467c:	packuswb %xmm1,%xmm1
   44680:	paddw  %xmm6,%xmm2
   44684:	paddw  %xmm7,%xmm3
   44688:	packuswb %xmm2,%xmm2
   4468c:	packuswb %xmm3,%xmm3
   44690:	paddw  %xmm6,%xmm4
   44694:	paddw  %xmm7,%xmm5
   44698:	packuswb %xmm4,%xmm4
   4469c:	packuswb %xmm5,%xmm5
   446a0:	punpcklbw %xmm2,%xmm4
   446a4:	punpcklbw %xmm5,%xmm0
   446a8:	punpcklbw %xmm1,%xmm3
   446ac:	movdqa %xmm4,%xmm6
   446b0:	movdqa %xmm4,%xmm7
   446b4:	punpcklwd %xmm0,%xmm4
   446b8:	punpckhwd %xmm0,%xmm6
   446bc:	psrldq $0x2,%xmm7
   446c1:	psrldq $0x2,%xmm0
   446c6:	movdqa %xmm3,%xmm2
   446ca:	movdqa %xmm3,%xmm5
   446ce:	punpcklwd %xmm7,%xmm3
   446d2:	punpckhwd %xmm7,%xmm2
   446d6:	psrldq $0x2,%xmm5
   446db:	movdqa %xmm0,%xmm1
   446df:	punpcklwd %xmm5,%xmm0
   446e3:	punpckhwd %xmm5,%xmm1
   446e7:	pshufd $0x4e,%xmm4,%xmm7
   446ec:	movdqa %xmm0,%xmm5
   446f0:	punpckldq %xmm3,%xmm4
   446f4:	punpckldq %xmm7,%xmm0
   446f8:	punpckhdq %xmm5,%xmm3
   446fc:	pshufd $0x4e,%xmm6,%xmm7
   44701:	movdqa %xmm1,%xmm5
   44705:	punpckldq %xmm2,%xmm6
   44709:	punpckldq %xmm7,%xmm1
   4470d:	punpckhdq %xmm5,%xmm2
   44711:	punpcklqdq %xmm0,%xmm4
   44715:	punpcklqdq %xmm6,%xmm3
   44719:	punpcklqdq %xmm2,%xmm1
   4471d:	cmp    $0x10,%rcx
   44721:	jb     44771 <jsimd_h2v1_extbgr_merged_upsample_sse2.column_st32>
   44723:	test   $0xf,%rdi
   4472a:	jne    4473c <jsimd_h2v1_extbgr_merged_upsample_sse2.out1>
   4472c:	movntdq %xmm4,(%rdi)
   44730:	movntdq %xmm3,0x10(%rdi)
   44735:	movntdq %xmm1,0x20(%rdi)
   4473a:	jmp    4474a <jsimd_h2v1_extbgr_merged_upsample_sse2.out0>

000000000004473c <jsimd_h2v1_extbgr_merged_upsample_sse2.out1>:
   4473c:	movdqu %xmm4,(%rdi)
   44740:	movdqu %xmm3,0x10(%rdi)
   44745:	movdqu %xmm1,0x20(%rdi)

000000000004474a <jsimd_h2v1_extbgr_merged_upsample_sse2.out0>:
   4474a:	add    $0x30,%rdi
   4474e:	sub    $0x10,%rcx
   44752:	je     447f6 <jsimd_h2v1_extbgr_merged_upsample_sse2.endcolumn>
   44758:	add    $0x10,%rsi
   4475c:	dec    %al
   4475e:	jne    4463f <jsimd_h2v1_extbgr_merged_upsample_sse2.Yloop_2nd>
   44764:	add    $0x10,%rbx
   44768:	add    $0x10,%rdx
   4476c:	jmpq   444e7 <jsimd_h2v1_extbgr_merged_upsample_sse2.columnloop>

0000000000044771 <jsimd_h2v1_extbgr_merged_upsample_sse2.column_st32>:
   44771:	lea    (%rcx,%rcx,2),%rcx
   44775:	cmp    $0x20,%rcx
   44779:	jb     44792 <jsimd_h2v1_extbgr_merged_upsample_sse2.column_st16>
   4477b:	movdqu %xmm4,(%rdi)
   4477f:	movdqu %xmm3,0x10(%rdi)
   44784:	add    $0x20,%rdi
   44788:	movdqa %xmm1,%xmm4
   4478c:	sub    $0x20,%rcx
   44790:	jmp    447a8 <jsimd_h2v1_extbgr_merged_upsample_sse2.column_st15>

0000000000044792 <jsimd_h2v1_extbgr_merged_upsample_sse2.column_st16>:
   44792:	cmp    $0x10,%rcx
   44796:	jb     447a8 <jsimd_h2v1_extbgr_merged_upsample_sse2.column_st15>
   44798:	movdqu %xmm4,(%rdi)
   4479c:	add    $0x10,%rdi
   447a0:	movdqa %xmm3,%xmm4
   447a4:	sub    $0x10,%rcx

00000000000447a8 <jsimd_h2v1_extbgr_merged_upsample_sse2.column_st15>:
   447a8:	cmp    $0x8,%rcx
   447ac:	jb     447bf <jsimd_h2v1_extbgr_merged_upsample_sse2.column_st7>
   447ae:	movq   %xmm4,(%rdi)
   447b2:	add    $0x8,%rdi
   447b6:	sub    $0x8,%rcx
   447ba:	psrldq $0x8,%xmm4

00000000000447bf <jsimd_h2v1_extbgr_merged_upsample_sse2.column_st7>:
   447bf:	cmp    $0x4,%rcx
   447c3:	jb     447d6 <jsimd_h2v1_extbgr_merged_upsample_sse2.column_st3>
   447c5:	movd   %xmm4,(%rdi)
   447c9:	add    $0x4,%rdi
   447cd:	sub    $0x4,%rcx
   447d1:	psrldq $0x4,%xmm4

00000000000447d6 <jsimd_h2v1_extbgr_merged_upsample_sse2.column_st3>:
   447d6:	movd   %xmm4,%eax
   447da:	cmp    $0x2,%rcx
   447de:	jb     447ef <jsimd_h2v1_extbgr_merged_upsample_sse2.column_st1>
   447e0:	mov    %ax,(%rdi)
   447e3:	add    $0x2,%rdi
   447e7:	sub    $0x2,%rcx
   447eb:	shr    $0x10,%rax

00000000000447ef <jsimd_h2v1_extbgr_merged_upsample_sse2.column_st1>:
   447ef:	test   %rcx,%rcx
   447f2:	je     447f6 <jsimd_h2v1_extbgr_merged_upsample_sse2.endcolumn>
   447f4:	mov    %al,(%rdi)

00000000000447f6 <jsimd_h2v1_extbgr_merged_upsample_sse2.endcolumn>:
   447f6:	sfence 

00000000000447f9 <jsimd_h2v1_extbgr_merged_upsample_sse2.return>:
   447f9:	pop    %rbx
   447fa:	pop    %r15
   447fc:	pop    %r14
   447fe:	pop    %r13
   44800:	pop    %r12
   44802:	pop    %r11
   44804:	pop    %r10
   44806:	mov    %rbp,%rsp
   44809:	pop    %rsp
   4480a:	pop    %rbp
   4480b:	retq   
   4480c:	nop
   4480d:	nop
   4480e:	nop
   4480f:	nop

0000000000044810 <jsimd_h2v2_extbgr_merged_upsample_sse2>:
   44810:	push   %rbp
   44811:	mov    %rsp,%rax
   44814:	mov    %rsp,%rbp
   44817:	push   %r10
   44819:	push   %r11
   4481b:	push   %r12
   4481d:	push   %r13
   4481f:	push   %r14
   44821:	push   %r15
   44823:	mov    %rdi,%r10
   44826:	mov    %rsi,%r11
   44829:	mov    %rdx,%r12
   4482c:	mov    %rcx,%r13
   4482f:	mov    %r8,%r14
   44832:	mov    %r9,%r15
   44835:	push   %rbx
   44836:	mov    %r10d,%eax
   44839:	mov    %r11,%rdi
   4483c:	mov    %r12d,%ecx
   4483f:	mov    (%rdi),%rsi
   44842:	mov    0x8(%rdi),%rbx
   44846:	mov    0x10(%rdi),%rdx
   4484a:	mov    %r13,%rdi
   4484d:	lea    (%rsi,%rcx,8),%rsi
   44851:	push   %rdx
   44852:	push   %rbx
   44853:	push   %rsi
   44854:	mov    %rsp,%rbx
   44857:	push   %rdi
   44858:	push   %rcx
   44859:	push   %rax
   4485a:	mov    %rcx,%rdx
   4485d:	mov    %rdi,%rcx
   44860:	mov    %rax,%rdi
   44863:	mov    %rbx,%rsi
   44866:	callq  44480 <jsimd_h2v1_extbgr_merged_upsample_sse2>
   4486b:	pop    %rax
   4486c:	pop    %rcx
   4486d:	pop    %rdi
   4486e:	pop    %rsi
   4486f:	pop    %rbx
   44870:	pop    %rdx
   44871:	add    $0x8,%rdi
   44875:	add    $0x8,%rsi
   44879:	push   %rdx
   4487a:	push   %rbx
   4487b:	push   %rsi
   4487c:	mov    %rsp,%rbx
   4487f:	push   %rdi
   44880:	push   %rcx
   44881:	push   %rax
   44882:	mov    %rcx,%rdx
   44885:	mov    %rdi,%rcx
   44888:	mov    %rax,%rdi
   4488b:	mov    %rbx,%rsi
   4488e:	callq  44480 <jsimd_h2v1_extbgr_merged_upsample_sse2>
   44893:	pop    %rax
   44894:	pop    %rcx
   44895:	pop    %rdi
   44896:	pop    %rsi
   44897:	pop    %rbx
   44898:	pop    %rdx
   44899:	pop    %rbx
   4489a:	pop    %r15
   4489c:	pop    %r14
   4489e:	pop    %r13
   448a0:	pop    %r12
   448a2:	pop    %r11
   448a4:	pop    %r10
   448a6:	pop    %rbp
   448a7:	retq   
   448a8:	nop
   448a9:	nop
   448aa:	nop
   448ab:	nop
   448ac:	nop
   448ad:	nop
   448ae:	nop
   448af:	nop

00000000000448b0 <jsimd_h2v1_extbgrx_merged_upsample_sse2>:
   448b0:	push   %rbp
   448b1:	mov    %rsp,%rax
   448b4:	sub    $0x4,%rsp
   448b8:	and    $0xfffffffffffffff0,%rsp
   448bc:	mov    %rax,(%rsp)
   448c0:	mov    %rsp,%rbp
   448c3:	lea    -0x30(%rbp),%rsp
   448c7:	push   %r10
   448c9:	push   %r11
   448cb:	push   %r12
   448cd:	push   %r13
   448cf:	push   %r14
   448d1:	push   %r15
   448d3:	mov    %rdi,%r10
   448d6:	mov    %rsi,%r11
   448d9:	mov    %rdx,%r12
   448dc:	mov    %rcx,%r13
   448df:	mov    %r8,%r14
   448e2:	mov    %r9,%r15
   448e5:	push   %rbx
   448e6:	mov    %r10d,%ecx
   448e9:	test   %rcx,%rcx
   448ec:	je     44bce <jsimd_h2v1_extbgrx_merged_upsample_sse2.return>
   448f2:	push   %rcx
   448f3:	mov    %r11,%rdi
   448f6:	mov    %r12d,%ecx
   448f9:	mov    (%rdi),%rsi
   448fc:	mov    0x8(%rdi),%rbx
   44900:	mov    0x10(%rdi),%rdx
   44904:	mov    %r13,%rdi
   44907:	mov    (%rsi,%rcx,8),%rsi
   4490b:	mov    (%rbx,%rcx,8),%rbx
   4490f:	mov    (%rdx,%rcx,8),%rdx
   44913:	mov    (%rdi),%rdi
   44916:	pop    %rcx

0000000000044917 <jsimd_h2v1_extbgrx_merged_upsample_sse2.columnloop>:
   44917:	movdqa (%rbx),%xmm6
   4491b:	movdqa (%rdx),%xmm7
   4491f:	pxor   %xmm1,%xmm1
   44923:	pcmpeqw %xmm3,%xmm3
   44927:	psllw  $0x7,%xmm3
   4492c:	movdqa %xmm6,%xmm4
   44930:	punpckhbw %xmm1,%xmm6
   44934:	punpcklbw %xmm1,%xmm4
   44938:	movdqa %xmm7,%xmm0
   4493c:	punpckhbw %xmm1,%xmm7
   44940:	punpcklbw %xmm1,%xmm0
   44944:	paddw  %xmm3,%xmm6
   44948:	paddw  %xmm3,%xmm4
   4494c:	paddw  %xmm3,%xmm7
   44950:	paddw  %xmm3,%xmm0
   44954:	movdqa %xmm6,%xmm5
   44958:	movdqa %xmm4,%xmm2
   4495c:	paddw  %xmm6,%xmm6
   44960:	paddw  %xmm4,%xmm4
   44964:	movdqa %xmm7,%xmm1
   44968:	movdqa %xmm0,%xmm3
   4496c:	paddw  %xmm7,%xmm7
   44970:	paddw  %xmm0,%xmm0
   44974:	pmulhw 0x27394(%rip),%xmm6        # 6bd10 <PW_MF0228>
   4497c:	pmulhw 0x2738c(%rip),%xmm4        # 6bd10 <PW_MF0228>
   44984:	pmulhw 0x27374(%rip),%xmm7        # 6bd00 <PW_F0402>
   4498c:	pmulhw 0x2736c(%rip),%xmm0        # 6bd00 <PW_F0402>
   44994:	paddw  0x27394(%rip),%xmm6        # 6bd30 <PW_ONE>
   4499c:	paddw  0x2738c(%rip),%xmm4        # 6bd30 <PW_ONE>
   449a4:	psraw  $0x1,%xmm6
   449a9:	psraw  $0x1,%xmm4
   449ae:	paddw  0x2737a(%rip),%xmm7        # 6bd30 <PW_ONE>
   449b6:	paddw  0x27372(%rip),%xmm0        # 6bd30 <PW_ONE>
   449be:	psraw  $0x1,%xmm7
   449c3:	psraw  $0x1,%xmm0
   449c8:	paddw  %xmm5,%xmm6
   449cc:	paddw  %xmm2,%xmm4
   449d0:	paddw  %xmm5,%xmm6
   449d4:	paddw  %xmm2,%xmm4
   449d8:	paddw  %xmm1,%xmm7
   449dc:	paddw  %xmm3,%xmm0
   449e0:	movdqa %xmm6,-0x30(%rbp)
   449e5:	movdqa %xmm7,-0x20(%rbp)
   449ea:	movdqa %xmm5,%xmm6
   449ee:	movdqa %xmm2,%xmm7
   449f2:	punpcklwd %xmm1,%xmm5
   449f6:	punpckhwd %xmm1,%xmm6
   449fa:	pmaddwd 0x2731e(%rip),%xmm5        # 6bd20 <PW_MF0344_F0285>
   44a02:	pmaddwd 0x27316(%rip),%xmm6        # 6bd20 <PW_MF0344_F0285>
   44a0a:	punpcklwd %xmm3,%xmm2
   44a0e:	punpckhwd %xmm3,%xmm7
   44a12:	pmaddwd 0x27306(%rip),%xmm2        # 6bd20 <PW_MF0344_F0285>
   44a1a:	pmaddwd 0x272fe(%rip),%xmm7        # 6bd20 <PW_MF0344_F0285>
   44a22:	paddd  0x27316(%rip),%xmm5        # 6bd40 <PD_ONEHALF>
   44a2a:	paddd  0x2730e(%rip),%xmm6        # 6bd40 <PD_ONEHALF>
   44a32:	psrad  $0x10,%xmm5
   44a37:	psrad  $0x10,%xmm6
   44a3c:	paddd  0x272fc(%rip),%xmm2        # 6bd40 <PD_ONEHALF>
   44a44:	paddd  0x272f4(%rip),%xmm7        # 6bd40 <PD_ONEHALF>
   44a4c:	psrad  $0x10,%xmm2
   44a51:	psrad  $0x10,%xmm7
   44a56:	packssdw %xmm6,%xmm5
   44a5a:	packssdw %xmm7,%xmm2
   44a5e:	psubw  %xmm1,%xmm5
   44a62:	psubw  %xmm3,%xmm2
   44a66:	movdqa %xmm5,-0x10(%rbp)
   44a6b:	mov    $0x2,%al
   44a6d:	jmp    44a7e <jsimd_h2v1_extbgrx_merged_upsample_sse2.Yloop_1st>

0000000000044a6f <jsimd_h2v1_extbgrx_merged_upsample_sse2.Yloop_2nd>:
   44a6f:	movdqa -0x20(%rbp),%xmm0
   44a74:	movdqa -0x10(%rbp),%xmm2
   44a79:	movdqa -0x30(%rbp),%xmm4

0000000000044a7e <jsimd_h2v1_extbgrx_merged_upsample_sse2.Yloop_1st>:
   44a7e:	movdqa (%rsi),%xmm7
   44a82:	pcmpeqw %xmm6,%xmm6
   44a86:	psrlw  $0x8,%xmm6
   44a8b:	pand   %xmm7,%xmm6
   44a8f:	psrlw  $0x8,%xmm7
   44a94:	movdqa %xmm0,%xmm1
   44a98:	movdqa %xmm2,%xmm3
   44a9c:	movdqa %xmm4,%xmm5
   44aa0:	paddw  %xmm6,%xmm0
   44aa4:	paddw  %xmm7,%xmm1
   44aa8:	packuswb %xmm0,%xmm0
   44aac:	packuswb %xmm1,%xmm1
   44ab0:	paddw  %xmm6,%xmm2
   44ab4:	paddw  %xmm7,%xmm3
   44ab8:	packuswb %xmm2,%xmm2
   44abc:	packuswb %xmm3,%xmm3
   44ac0:	paddw  %xmm6,%xmm4
   44ac4:	paddw  %xmm7,%xmm5
   44ac8:	packuswb %xmm4,%xmm4
   44acc:	packuswb %xmm5,%xmm5
   44ad0:	pcmpeqb %xmm6,%xmm6
   44ad4:	pcmpeqb %xmm7,%xmm7
   44ad8:	punpcklbw %xmm2,%xmm4
   44adc:	punpcklbw %xmm6,%xmm0
   44ae0:	punpcklbw %xmm3,%xmm5
   44ae4:	punpcklbw %xmm7,%xmm1
   44ae8:	movdqa %xmm4,%xmm2
   44aec:	punpcklwd %xmm0,%xmm4
   44af0:	punpckhwd %xmm0,%xmm2
   44af4:	movdqa %xmm5,%xmm6
   44af8:	punpcklwd %xmm1,%xmm5
   44afc:	punpckhwd %xmm1,%xmm6
   44b00:	movdqa %xmm4,%xmm3
   44b04:	punpckldq %xmm5,%xmm4
   44b08:	punpckhdq %xmm5,%xmm3
   44b0c:	movdqa %xmm2,%xmm7
   44b10:	punpckldq %xmm6,%xmm2
   44b14:	punpckhdq %xmm6,%xmm7
   44b18:	cmp    $0x10,%rcx
   44b1c:	jb     44b76 <jsimd_h2v1_extbgrx_merged_upsample_sse2.column_st32>
   44b1e:	test   $0xf,%rdi
   44b25:	jne    44b3c <jsimd_h2v1_extbgrx_merged_upsample_sse2.out1>
   44b27:	movntdq %xmm4,(%rdi)
   44b2b:	movntdq %xmm3,0x10(%rdi)
   44b30:	movntdq %xmm2,0x20(%rdi)
   44b35:	movntdq %xmm7,0x30(%rdi)
   44b3a:	jmp    44b4f <jsimd_h2v1_extbgrx_merged_upsample_sse2.out0>

0000000000044b3c <jsimd_h2v1_extbgrx_merged_upsample_sse2.out1>:
   44b3c:	movdqu %xmm4,(%rdi)
   44b40:	movdqu %xmm3,0x10(%rdi)
   44b45:	movdqu %xmm2,0x20(%rdi)
   44b4a:	movdqu %xmm7,0x30(%rdi)

0000000000044b4f <jsimd_h2v1_extbgrx_merged_upsample_sse2.out0>:
   44b4f:	add    $0x40,%rdi
   44b53:	sub    $0x10,%rcx
   44b57:	je     44bcb <jsimd_h2v1_extbgrx_merged_upsample_sse2.endcolumn>
   44b5d:	add    $0x10,%rsi
   44b61:	dec    %al
   44b63:	jne    44a6f <jsimd_h2v1_extbgrx_merged_upsample_sse2.Yloop_2nd>
   44b69:	add    $0x10,%rbx
   44b6d:	add    $0x10,%rdx
   44b71:	jmpq   44917 <jsimd_h2v1_extbgrx_merged_upsample_sse2.columnloop>

0000000000044b76 <jsimd_h2v1_extbgrx_merged_upsample_sse2.column_st32>:
   44b76:	cmp    $0x8,%rcx
   44b7a:	jb     44b95 <jsimd_h2v1_extbgrx_merged_upsample_sse2.column_st16>
   44b7c:	movdqu %xmm4,(%rdi)
   44b80:	movdqu %xmm3,0x10(%rdi)
   44b85:	add    $0x20,%rdi
   44b89:	movdqa %xmm2,%xmm4
   44b8d:	movdqa %xmm7,%xmm3
   44b91:	sub    $0x8,%rcx

0000000000044b95 <jsimd_h2v1_extbgrx_merged_upsample_sse2.column_st16>:
   44b95:	cmp    $0x4,%rcx
   44b99:	jb     44bab <jsimd_h2v1_extbgrx_merged_upsample_sse2.column_st15>
   44b9b:	movdqu %xmm4,(%rdi)
   44b9f:	add    $0x10,%rdi
   44ba3:	movdqa %xmm3,%xmm4
   44ba7:	sub    $0x4,%rcx

0000000000044bab <jsimd_h2v1_extbgrx_merged_upsample_sse2.column_st15>:
   44bab:	cmp    $0x2,%rcx
   44baf:	jb     44bc2 <jsimd_h2v1_extbgrx_merged_upsample_sse2.column_st7>
   44bb1:	movq   %xmm4,(%rdi)
   44bb5:	add    $0x8,%rdi
   44bb9:	sub    $0x2,%rcx
   44bbd:	psrldq $0x8,%xmm4

0000000000044bc2 <jsimd_h2v1_extbgrx_merged_upsample_sse2.column_st7>:
   44bc2:	test   %rcx,%rcx
   44bc5:	je     44bcb <jsimd_h2v1_extbgrx_merged_upsample_sse2.endcolumn>
   44bc7:	movd   %xmm4,(%rdi)

0000000000044bcb <jsimd_h2v1_extbgrx_merged_upsample_sse2.endcolumn>:
   44bcb:	sfence 

0000000000044bce <jsimd_h2v1_extbgrx_merged_upsample_sse2.return>:
   44bce:	pop    %rbx
   44bcf:	pop    %r15
   44bd1:	pop    %r14
   44bd3:	pop    %r13
   44bd5:	pop    %r12
   44bd7:	pop    %r11
   44bd9:	pop    %r10
   44bdb:	mov    %rbp,%rsp
   44bde:	pop    %rsp
   44bdf:	pop    %rbp
   44be0:	retq   
   44be1:	nop
   44be2:	nop
   44be3:	nop
   44be4:	nop
   44be5:	nop
   44be6:	nop
   44be7:	nop
   44be8:	nop
   44be9:	nop
   44bea:	nop
   44beb:	nop
   44bec:	nop
   44bed:	nop
   44bee:	nop
   44bef:	nop

0000000000044bf0 <jsimd_h2v2_extbgrx_merged_upsample_sse2>:
   44bf0:	push   %rbp
   44bf1:	mov    %rsp,%rax
   44bf4:	mov    %rsp,%rbp
   44bf7:	push   %r10
   44bf9:	push   %r11
   44bfb:	push   %r12
   44bfd:	push   %r13
   44bff:	push   %r14
   44c01:	push   %r15
   44c03:	mov    %rdi,%r10
   44c06:	mov    %rsi,%r11
   44c09:	mov    %rdx,%r12
   44c0c:	mov    %rcx,%r13
   44c0f:	mov    %r8,%r14
   44c12:	mov    %r9,%r15
   44c15:	push   %rbx
   44c16:	mov    %r10d,%eax
   44c19:	mov    %r11,%rdi
   44c1c:	mov    %r12d,%ecx
   44c1f:	mov    (%rdi),%rsi
   44c22:	mov    0x8(%rdi),%rbx
   44c26:	mov    0x10(%rdi),%rdx
   44c2a:	mov    %r13,%rdi
   44c2d:	lea    (%rsi,%rcx,8),%rsi
   44c31:	push   %rdx
   44c32:	push   %rbx
   44c33:	push   %rsi
   44c34:	mov    %rsp,%rbx
   44c37:	push   %rdi
   44c38:	push   %rcx
   44c39:	push   %rax
   44c3a:	mov    %rcx,%rdx
   44c3d:	mov    %rdi,%rcx
   44c40:	mov    %rax,%rdi
   44c43:	mov    %rbx,%rsi
   44c46:	callq  448b0 <jsimd_h2v1_extbgrx_merged_upsample_sse2>
   44c4b:	pop    %rax
   44c4c:	pop    %rcx
   44c4d:	pop    %rdi
   44c4e:	pop    %rsi
   44c4f:	pop    %rbx
   44c50:	pop    %rdx
   44c51:	add    $0x8,%rdi
   44c55:	add    $0x8,%rsi
   44c59:	push   %rdx
   44c5a:	push   %rbx
   44c5b:	push   %rsi
   44c5c:	mov    %rsp,%rbx
   44c5f:	push   %rdi
   44c60:	push   %rcx
   44c61:	push   %rax
   44c62:	mov    %rcx,%rdx
   44c65:	mov    %rdi,%rcx
   44c68:	mov    %rax,%rdi
   44c6b:	mov    %rbx,%rsi
   44c6e:	callq  448b0 <jsimd_h2v1_extbgrx_merged_upsample_sse2>
   44c73:	pop    %rax
   44c74:	pop    %rcx
   44c75:	pop    %rdi
   44c76:	pop    %rsi
   44c77:	pop    %rbx
   44c78:	pop    %rdx
   44c79:	pop    %rbx
   44c7a:	pop    %r15
   44c7c:	pop    %r14
   44c7e:	pop    %r13
   44c80:	pop    %r12
   44c82:	pop    %r11
   44c84:	pop    %r10
   44c86:	pop    %rbp
   44c87:	retq   
   44c88:	nop
   44c89:	nop
   44c8a:	nop
   44c8b:	nop
   44c8c:	nop
   44c8d:	nop
   44c8e:	nop
   44c8f:	nop

0000000000044c90 <jsimd_h2v1_extxbgr_merged_upsample_sse2>:
   44c90:	push   %rbp
   44c91:	mov    %rsp,%rax
   44c94:	sub    $0x4,%rsp
   44c98:	and    $0xfffffffffffffff0,%rsp
   44c9c:	mov    %rax,(%rsp)
   44ca0:	mov    %rsp,%rbp
   44ca3:	lea    -0x30(%rbp),%rsp
   44ca7:	push   %r10
   44ca9:	push   %r11
   44cab:	push   %r12
   44cad:	push   %r13
   44caf:	push   %r14
   44cb1:	push   %r15
   44cb3:	mov    %rdi,%r10
   44cb6:	mov    %rsi,%r11
   44cb9:	mov    %rdx,%r12
   44cbc:	mov    %rcx,%r13
   44cbf:	mov    %r8,%r14
   44cc2:	mov    %r9,%r15
   44cc5:	push   %rbx
   44cc6:	mov    %r10d,%ecx
   44cc9:	test   %rcx,%rcx
   44ccc:	je     44fae <jsimd_h2v1_extxbgr_merged_upsample_sse2.return>
   44cd2:	push   %rcx
   44cd3:	mov    %r11,%rdi
   44cd6:	mov    %r12d,%ecx
   44cd9:	mov    (%rdi),%rsi
   44cdc:	mov    0x8(%rdi),%rbx
   44ce0:	mov    0x10(%rdi),%rdx
   44ce4:	mov    %r13,%rdi
   44ce7:	mov    (%rsi,%rcx,8),%rsi
   44ceb:	mov    (%rbx,%rcx,8),%rbx
   44cef:	mov    (%rdx,%rcx,8),%rdx
   44cf3:	mov    (%rdi),%rdi
   44cf6:	pop    %rcx

0000000000044cf7 <jsimd_h2v1_extxbgr_merged_upsample_sse2.columnloop>:
   44cf7:	movdqa (%rbx),%xmm6
   44cfb:	movdqa (%rdx),%xmm7
   44cff:	pxor   %xmm1,%xmm1
   44d03:	pcmpeqw %xmm3,%xmm3
   44d07:	psllw  $0x7,%xmm3
   44d0c:	movdqa %xmm6,%xmm4
   44d10:	punpckhbw %xmm1,%xmm6
   44d14:	punpcklbw %xmm1,%xmm4
   44d18:	movdqa %xmm7,%xmm0
   44d1c:	punpckhbw %xmm1,%xmm7
   44d20:	punpcklbw %xmm1,%xmm0
   44d24:	paddw  %xmm3,%xmm6
   44d28:	paddw  %xmm3,%xmm4
   44d2c:	paddw  %xmm3,%xmm7
   44d30:	paddw  %xmm3,%xmm0
   44d34:	movdqa %xmm6,%xmm5
   44d38:	movdqa %xmm4,%xmm2
   44d3c:	paddw  %xmm6,%xmm6
   44d40:	paddw  %xmm4,%xmm4
   44d44:	movdqa %xmm7,%xmm1
   44d48:	movdqa %xmm0,%xmm3
   44d4c:	paddw  %xmm7,%xmm7
   44d50:	paddw  %xmm0,%xmm0
   44d54:	pmulhw 0x26fb4(%rip),%xmm6        # 6bd10 <PW_MF0228>
   44d5c:	pmulhw 0x26fac(%rip),%xmm4        # 6bd10 <PW_MF0228>
   44d64:	pmulhw 0x26f94(%rip),%xmm7        # 6bd00 <PW_F0402>
   44d6c:	pmulhw 0x26f8c(%rip),%xmm0        # 6bd00 <PW_F0402>
   44d74:	paddw  0x26fb4(%rip),%xmm6        # 6bd30 <PW_ONE>
   44d7c:	paddw  0x26fac(%rip),%xmm4        # 6bd30 <PW_ONE>
   44d84:	psraw  $0x1,%xmm6
   44d89:	psraw  $0x1,%xmm4
   44d8e:	paddw  0x26f9a(%rip),%xmm7        # 6bd30 <PW_ONE>
   44d96:	paddw  0x26f92(%rip),%xmm0        # 6bd30 <PW_ONE>
   44d9e:	psraw  $0x1,%xmm7
   44da3:	psraw  $0x1,%xmm0
   44da8:	paddw  %xmm5,%xmm6
   44dac:	paddw  %xmm2,%xmm4
   44db0:	paddw  %xmm5,%xmm6
   44db4:	paddw  %xmm2,%xmm4
   44db8:	paddw  %xmm1,%xmm7
   44dbc:	paddw  %xmm3,%xmm0
   44dc0:	movdqa %xmm6,-0x30(%rbp)
   44dc5:	movdqa %xmm7,-0x20(%rbp)
   44dca:	movdqa %xmm5,%xmm6
   44dce:	movdqa %xmm2,%xmm7
   44dd2:	punpcklwd %xmm1,%xmm5
   44dd6:	punpckhwd %xmm1,%xmm6
   44dda:	pmaddwd 0x26f3e(%rip),%xmm5        # 6bd20 <PW_MF0344_F0285>
   44de2:	pmaddwd 0x26f36(%rip),%xmm6        # 6bd20 <PW_MF0344_F0285>
   44dea:	punpcklwd %xmm3,%xmm2
   44dee:	punpckhwd %xmm3,%xmm7
   44df2:	pmaddwd 0x26f26(%rip),%xmm2        # 6bd20 <PW_MF0344_F0285>
   44dfa:	pmaddwd 0x26f1e(%rip),%xmm7        # 6bd20 <PW_MF0344_F0285>
   44e02:	paddd  0x26f36(%rip),%xmm5        # 6bd40 <PD_ONEHALF>
   44e0a:	paddd  0x26f2e(%rip),%xmm6        # 6bd40 <PD_ONEHALF>
   44e12:	psrad  $0x10,%xmm5
   44e17:	psrad  $0x10,%xmm6
   44e1c:	paddd  0x26f1c(%rip),%xmm2        # 6bd40 <PD_ONEHALF>
   44e24:	paddd  0x26f14(%rip),%xmm7        # 6bd40 <PD_ONEHALF>
   44e2c:	psrad  $0x10,%xmm2
   44e31:	psrad  $0x10,%xmm7
   44e36:	packssdw %xmm6,%xmm5
   44e3a:	packssdw %xmm7,%xmm2
   44e3e:	psubw  %xmm1,%xmm5
   44e42:	psubw  %xmm3,%xmm2
   44e46:	movdqa %xmm5,-0x10(%rbp)
   44e4b:	mov    $0x2,%al
   44e4d:	jmp    44e5e <jsimd_h2v1_extxbgr_merged_upsample_sse2.Yloop_1st>

0000000000044e4f <jsimd_h2v1_extxbgr_merged_upsample_sse2.Yloop_2nd>:
   44e4f:	movdqa -0x20(%rbp),%xmm0
   44e54:	movdqa -0x10(%rbp),%xmm2
   44e59:	movdqa -0x30(%rbp),%xmm4

0000000000044e5e <jsimd_h2v1_extxbgr_merged_upsample_sse2.Yloop_1st>:
   44e5e:	movdqa (%rsi),%xmm7
   44e62:	pcmpeqw %xmm6,%xmm6
   44e66:	psrlw  $0x8,%xmm6
   44e6b:	pand   %xmm7,%xmm6
   44e6f:	psrlw  $0x8,%xmm7
   44e74:	movdqa %xmm0,%xmm1
   44e78:	movdqa %xmm2,%xmm3
   44e7c:	movdqa %xmm4,%xmm5
   44e80:	paddw  %xmm6,%xmm0
   44e84:	paddw  %xmm7,%xmm1
   44e88:	packuswb %xmm0,%xmm0
   44e8c:	packuswb %xmm1,%xmm1
   44e90:	paddw  %xmm6,%xmm2
   44e94:	paddw  %xmm7,%xmm3
   44e98:	packuswb %xmm2,%xmm2
   44e9c:	packuswb %xmm3,%xmm3
   44ea0:	paddw  %xmm6,%xmm4
   44ea4:	paddw  %xmm7,%xmm5
   44ea8:	packuswb %xmm4,%xmm4
   44eac:	packuswb %xmm5,%xmm5
   44eb0:	pcmpeqb %xmm6,%xmm6
   44eb4:	pcmpeqb %xmm7,%xmm7
   44eb8:	punpcklbw %xmm4,%xmm6
   44ebc:	punpcklbw %xmm0,%xmm2
   44ec0:	punpcklbw %xmm5,%xmm7
   44ec4:	punpcklbw %xmm1,%xmm3
   44ec8:	movdqa %xmm6,%xmm4
   44ecc:	punpcklwd %xmm2,%xmm6
   44ed0:	punpckhwd %xmm2,%xmm4
   44ed4:	movdqa %xmm7,%xmm0
   44ed8:	punpcklwd %xmm3,%xmm7
   44edc:	punpckhwd %xmm3,%xmm0
   44ee0:	movdqa %xmm6,%xmm5
   44ee4:	punpckldq %xmm7,%xmm6
   44ee8:	punpckhdq %xmm7,%xmm5
   44eec:	movdqa %xmm4,%xmm1
   44ef0:	punpckldq %xmm0,%xmm4
   44ef4:	punpckhdq %xmm0,%xmm1
   44ef8:	cmp    $0x10,%rcx
   44efc:	jb     44f56 <jsimd_h2v1_extxbgr_merged_upsample_sse2.column_st32>
   44efe:	test   $0xf,%rdi
   44f05:	jne    44f1c <jsimd_h2v1_extxbgr_merged_upsample_sse2.out1>
   44f07:	movntdq %xmm6,(%rdi)
   44f0b:	movntdq %xmm5,0x10(%rdi)
   44f10:	movntdq %xmm4,0x20(%rdi)
   44f15:	movntdq %xmm1,0x30(%rdi)
   44f1a:	jmp    44f2f <jsimd_h2v1_extxbgr_merged_upsample_sse2.out0>

0000000000044f1c <jsimd_h2v1_extxbgr_merged_upsample_sse2.out1>:
   44f1c:	movdqu %xmm6,(%rdi)
   44f20:	movdqu %xmm5,0x10(%rdi)
   44f25:	movdqu %xmm4,0x20(%rdi)
   44f2a:	movdqu %xmm1,0x30(%rdi)

0000000000044f2f <jsimd_h2v1_extxbgr_merged_upsample_sse2.out0>:
   44f2f:	add    $0x40,%rdi
   44f33:	sub    $0x10,%rcx
   44f37:	je     44fab <jsimd_h2v1_extxbgr_merged_upsample_sse2.endcolumn>
   44f3d:	add    $0x10,%rsi
   44f41:	dec    %al
   44f43:	jne    44e4f <jsimd_h2v1_extxbgr_merged_upsample_sse2.Yloop_2nd>
   44f49:	add    $0x10,%rbx
   44f4d:	add    $0x10,%rdx
   44f51:	jmpq   44cf7 <jsimd_h2v1_extxbgr_merged_upsample_sse2.columnloop>

0000000000044f56 <jsimd_h2v1_extxbgr_merged_upsample_sse2.column_st32>:
   44f56:	cmp    $0x8,%rcx
   44f5a:	jb     44f75 <jsimd_h2v1_extxbgr_merged_upsample_sse2.column_st16>
   44f5c:	movdqu %xmm6,(%rdi)
   44f60:	movdqu %xmm5,0x10(%rdi)
   44f65:	add    $0x20,%rdi
   44f69:	movdqa %xmm4,%xmm6
   44f6d:	movdqa %xmm1,%xmm5
   44f71:	sub    $0x8,%rcx

0000000000044f75 <jsimd_h2v1_extxbgr_merged_upsample_sse2.column_st16>:
   44f75:	cmp    $0x4,%rcx
   44f79:	jb     44f8b <jsimd_h2v1_extxbgr_merged_upsample_sse2.column_st15>
   44f7b:	movdqu %xmm6,(%rdi)
   44f7f:	add    $0x10,%rdi
   44f83:	movdqa %xmm5,%xmm6
   44f87:	sub    $0x4,%rcx

0000000000044f8b <jsimd_h2v1_extxbgr_merged_upsample_sse2.column_st15>:
   44f8b:	cmp    $0x2,%rcx
   44f8f:	jb     44fa2 <jsimd_h2v1_extxbgr_merged_upsample_sse2.column_st7>
   44f91:	movq   %xmm6,(%rdi)
   44f95:	add    $0x8,%rdi
   44f99:	sub    $0x2,%rcx
   44f9d:	psrldq $0x8,%xmm6

0000000000044fa2 <jsimd_h2v1_extxbgr_merged_upsample_sse2.column_st7>:
   44fa2:	test   %rcx,%rcx
   44fa5:	je     44fab <jsimd_h2v1_extxbgr_merged_upsample_sse2.endcolumn>
   44fa7:	movd   %xmm6,(%rdi)

0000000000044fab <jsimd_h2v1_extxbgr_merged_upsample_sse2.endcolumn>:
   44fab:	sfence 

0000000000044fae <jsimd_h2v1_extxbgr_merged_upsample_sse2.return>:
   44fae:	pop    %rbx
   44faf:	pop    %r15
   44fb1:	pop    %r14
   44fb3:	pop    %r13
   44fb5:	pop    %r12
   44fb7:	pop    %r11
   44fb9:	pop    %r10
   44fbb:	mov    %rbp,%rsp
   44fbe:	pop    %rsp
   44fbf:	pop    %rbp
   44fc0:	retq   
   44fc1:	nop
   44fc2:	nop
   44fc3:	nop
   44fc4:	nop
   44fc5:	nop
   44fc6:	nop
   44fc7:	nop
   44fc8:	nop
   44fc9:	nop
   44fca:	nop
   44fcb:	nop
   44fcc:	nop
   44fcd:	nop
   44fce:	nop
   44fcf:	nop

0000000000044fd0 <jsimd_h2v2_extxbgr_merged_upsample_sse2>:
   44fd0:	push   %rbp
   44fd1:	mov    %rsp,%rax
   44fd4:	mov    %rsp,%rbp
   44fd7:	push   %r10
   44fd9:	push   %r11
   44fdb:	push   %r12
   44fdd:	push   %r13
   44fdf:	push   %r14
   44fe1:	push   %r15
   44fe3:	mov    %rdi,%r10
   44fe6:	mov    %rsi,%r11
   44fe9:	mov    %rdx,%r12
   44fec:	mov    %rcx,%r13
   44fef:	mov    %r8,%r14
   44ff2:	mov    %r9,%r15
   44ff5:	push   %rbx
   44ff6:	mov    %r10d,%eax
   44ff9:	mov    %r11,%rdi
   44ffc:	mov    %r12d,%ecx
   44fff:	mov    (%rdi),%rsi
   45002:	mov    0x8(%rdi),%rbx
   45006:	mov    0x10(%rdi),%rdx
   4500a:	mov    %r13,%rdi
   4500d:	lea    (%rsi,%rcx,8),%rsi
   45011:	push   %rdx
   45012:	push   %rbx
   45013:	push   %rsi
   45014:	mov    %rsp,%rbx
   45017:	push   %rdi
   45018:	push   %rcx
   45019:	push   %rax
   4501a:	mov    %rcx,%rdx
   4501d:	mov    %rdi,%rcx
   45020:	mov    %rax,%rdi
   45023:	mov    %rbx,%rsi
   45026:	callq  44c90 <jsimd_h2v1_extxbgr_merged_upsample_sse2>
   4502b:	pop    %rax
   4502c:	pop    %rcx
   4502d:	pop    %rdi
   4502e:	pop    %rsi
   4502f:	pop    %rbx
   45030:	pop    %rdx
   45031:	add    $0x8,%rdi
   45035:	add    $0x8,%rsi
   45039:	push   %rdx
   4503a:	push   %rbx
   4503b:	push   %rsi
   4503c:	mov    %rsp,%rbx
   4503f:	push   %rdi
   45040:	push   %rcx
   45041:	push   %rax
   45042:	mov    %rcx,%rdx
   45045:	mov    %rdi,%rcx
   45048:	mov    %rax,%rdi
   4504b:	mov    %rbx,%rsi
   4504e:	callq  44c90 <jsimd_h2v1_extxbgr_merged_upsample_sse2>
   45053:	pop    %rax
   45054:	pop    %rcx
   45055:	pop    %rdi
   45056:	pop    %rsi
   45057:	pop    %rbx
   45058:	pop    %rdx
   45059:	pop    %rbx
   4505a:	pop    %r15
   4505c:	pop    %r14
   4505e:	pop    %r13
   45060:	pop    %r12
   45062:	pop    %r11
   45064:	pop    %r10
   45066:	pop    %rbp
   45067:	retq   
   45068:	nop
   45069:	nop
   4506a:	nop
   4506b:	nop
   4506c:	nop
   4506d:	nop
   4506e:	nop
   4506f:	nop

0000000000045070 <jsimd_h2v1_extxrgb_merged_upsample_sse2>:
   45070:	push   %rbp
   45071:	mov    %rsp,%rax
   45074:	sub    $0x4,%rsp
   45078:	and    $0xfffffffffffffff0,%rsp
   4507c:	mov    %rax,(%rsp)
   45080:	mov    %rsp,%rbp
   45083:	lea    -0x30(%rbp),%rsp
   45087:	push   %r10
   45089:	push   %r11
   4508b:	push   %r12
   4508d:	push   %r13
   4508f:	push   %r14
   45091:	push   %r15
   45093:	mov    %rdi,%r10
   45096:	mov    %rsi,%r11
   45099:	mov    %rdx,%r12
   4509c:	mov    %rcx,%r13
   4509f:	mov    %r8,%r14
   450a2:	mov    %r9,%r15
   450a5:	push   %rbx
   450a6:	mov    %r10d,%ecx
   450a9:	test   %rcx,%rcx
   450ac:	je     4538e <jsimd_h2v1_extxrgb_merged_upsample_sse2.return>
   450b2:	push   %rcx
   450b3:	mov    %r11,%rdi
   450b6:	mov    %r12d,%ecx
   450b9:	mov    (%rdi),%rsi
   450bc:	mov    0x8(%rdi),%rbx
   450c0:	mov    0x10(%rdi),%rdx
   450c4:	mov    %r13,%rdi
   450c7:	mov    (%rsi,%rcx,8),%rsi
   450cb:	mov    (%rbx,%rcx,8),%rbx
   450cf:	mov    (%rdx,%rcx,8),%rdx
   450d3:	mov    (%rdi),%rdi
   450d6:	pop    %rcx

00000000000450d7 <jsimd_h2v1_extxrgb_merged_upsample_sse2.columnloop>:
   450d7:	movdqa (%rbx),%xmm6
   450db:	movdqa (%rdx),%xmm7
   450df:	pxor   %xmm1,%xmm1
   450e3:	pcmpeqw %xmm3,%xmm3
   450e7:	psllw  $0x7,%xmm3
   450ec:	movdqa %xmm6,%xmm4
   450f0:	punpckhbw %xmm1,%xmm6
   450f4:	punpcklbw %xmm1,%xmm4
   450f8:	movdqa %xmm7,%xmm0
   450fc:	punpckhbw %xmm1,%xmm7
   45100:	punpcklbw %xmm1,%xmm0
   45104:	paddw  %xmm3,%xmm6
   45108:	paddw  %xmm3,%xmm4
   4510c:	paddw  %xmm3,%xmm7
   45110:	paddw  %xmm3,%xmm0
   45114:	movdqa %xmm6,%xmm5
   45118:	movdqa %xmm4,%xmm2
   4511c:	paddw  %xmm6,%xmm6
   45120:	paddw  %xmm4,%xmm4
   45124:	movdqa %xmm7,%xmm1
   45128:	movdqa %xmm0,%xmm3
   4512c:	paddw  %xmm7,%xmm7
   45130:	paddw  %xmm0,%xmm0
   45134:	pmulhw 0x26bd4(%rip),%xmm6        # 6bd10 <PW_MF0228>
   4513c:	pmulhw 0x26bcc(%rip),%xmm4        # 6bd10 <PW_MF0228>
   45144:	pmulhw 0x26bb4(%rip),%xmm7        # 6bd00 <PW_F0402>
   4514c:	pmulhw 0x26bac(%rip),%xmm0        # 6bd00 <PW_F0402>
   45154:	paddw  0x26bd4(%rip),%xmm6        # 6bd30 <PW_ONE>
   4515c:	paddw  0x26bcc(%rip),%xmm4        # 6bd30 <PW_ONE>
   45164:	psraw  $0x1,%xmm6
   45169:	psraw  $0x1,%xmm4
   4516e:	paddw  0x26bba(%rip),%xmm7        # 6bd30 <PW_ONE>
   45176:	paddw  0x26bb2(%rip),%xmm0        # 6bd30 <PW_ONE>
   4517e:	psraw  $0x1,%xmm7
   45183:	psraw  $0x1,%xmm0
   45188:	paddw  %xmm5,%xmm6
   4518c:	paddw  %xmm2,%xmm4
   45190:	paddw  %xmm5,%xmm6
   45194:	paddw  %xmm2,%xmm4
   45198:	paddw  %xmm1,%xmm7
   4519c:	paddw  %xmm3,%xmm0
   451a0:	movdqa %xmm6,-0x30(%rbp)
   451a5:	movdqa %xmm7,-0x20(%rbp)
   451aa:	movdqa %xmm5,%xmm6
   451ae:	movdqa %xmm2,%xmm7
   451b2:	punpcklwd %xmm1,%xmm5
   451b6:	punpckhwd %xmm1,%xmm6
   451ba:	pmaddwd 0x26b5e(%rip),%xmm5        # 6bd20 <PW_MF0344_F0285>
   451c2:	pmaddwd 0x26b56(%rip),%xmm6        # 6bd20 <PW_MF0344_F0285>
   451ca:	punpcklwd %xmm3,%xmm2
   451ce:	punpckhwd %xmm3,%xmm7
   451d2:	pmaddwd 0x26b46(%rip),%xmm2        # 6bd20 <PW_MF0344_F0285>
   451da:	pmaddwd 0x26b3e(%rip),%xmm7        # 6bd20 <PW_MF0344_F0285>
   451e2:	paddd  0x26b56(%rip),%xmm5        # 6bd40 <PD_ONEHALF>
   451ea:	paddd  0x26b4e(%rip),%xmm6        # 6bd40 <PD_ONEHALF>
   451f2:	psrad  $0x10,%xmm5
   451f7:	psrad  $0x10,%xmm6
   451fc:	paddd  0x26b3c(%rip),%xmm2        # 6bd40 <PD_ONEHALF>
   45204:	paddd  0x26b34(%rip),%xmm7        # 6bd40 <PD_ONEHALF>
   4520c:	psrad  $0x10,%xmm2
   45211:	psrad  $0x10,%xmm7
   45216:	packssdw %xmm6,%xmm5
   4521a:	packssdw %xmm7,%xmm2
   4521e:	psubw  %xmm1,%xmm5
   45222:	psubw  %xmm3,%xmm2
   45226:	movdqa %xmm5,-0x10(%rbp)
   4522b:	mov    $0x2,%al
   4522d:	jmp    4523e <jsimd_h2v1_extxrgb_merged_upsample_sse2.Yloop_1st>

000000000004522f <jsimd_h2v1_extxrgb_merged_upsample_sse2.Yloop_2nd>:
   4522f:	movdqa -0x20(%rbp),%xmm0
   45234:	movdqa -0x10(%rbp),%xmm2
   45239:	movdqa -0x30(%rbp),%xmm4

000000000004523e <jsimd_h2v1_extxrgb_merged_upsample_sse2.Yloop_1st>:
   4523e:	movdqa (%rsi),%xmm7
   45242:	pcmpeqw %xmm6,%xmm6
   45246:	psrlw  $0x8,%xmm6
   4524b:	pand   %xmm7,%xmm6
   4524f:	psrlw  $0x8,%xmm7
   45254:	movdqa %xmm0,%xmm1
   45258:	movdqa %xmm2,%xmm3
   4525c:	movdqa %xmm4,%xmm5
   45260:	paddw  %xmm6,%xmm0
   45264:	paddw  %xmm7,%xmm1
   45268:	packuswb %xmm0,%xmm0
   4526c:	packuswb %xmm1,%xmm1
   45270:	paddw  %xmm6,%xmm2
   45274:	paddw  %xmm7,%xmm3
   45278:	packuswb %xmm2,%xmm2
   4527c:	packuswb %xmm3,%xmm3
   45280:	paddw  %xmm6,%xmm4
   45284:	paddw  %xmm7,%xmm5
   45288:	packuswb %xmm4,%xmm4
   4528c:	packuswb %xmm5,%xmm5
   45290:	pcmpeqb %xmm6,%xmm6
   45294:	pcmpeqb %xmm7,%xmm7
   45298:	punpcklbw %xmm0,%xmm6
   4529c:	punpcklbw %xmm4,%xmm2
   452a0:	punpcklbw %xmm1,%xmm7
   452a4:	punpcklbw %xmm5,%xmm3
   452a8:	movdqa %xmm6,%xmm0
   452ac:	punpcklwd %xmm2,%xmm6
   452b0:	punpckhwd %xmm2,%xmm0
   452b4:	movdqa %xmm7,%xmm4
   452b8:	punpcklwd %xmm3,%xmm7
   452bc:	punpckhwd %xmm3,%xmm4
   452c0:	movdqa %xmm6,%xmm1
   452c4:	punpckldq %xmm7,%xmm6
   452c8:	punpckhdq %xmm7,%xmm1
   452cc:	movdqa %xmm0,%xmm5
   452d0:	punpckldq %xmm4,%xmm0
   452d4:	punpckhdq %xmm4,%xmm5
   452d8:	cmp    $0x10,%rcx
   452dc:	jb     45336 <jsimd_h2v1_extxrgb_merged_upsample_sse2.column_st32>
   452de:	test   $0xf,%rdi
   452e5:	jne    452fc <jsimd_h2v1_extxrgb_merged_upsample_sse2.out1>
   452e7:	movntdq %xmm6,(%rdi)
   452eb:	movntdq %xmm1,0x10(%rdi)
   452f0:	movntdq %xmm0,0x20(%rdi)
   452f5:	movntdq %xmm5,0x30(%rdi)
   452fa:	jmp    4530f <jsimd_h2v1_extxrgb_merged_upsample_sse2.out0>

00000000000452fc <jsimd_h2v1_extxrgb_merged_upsample_sse2.out1>:
   452fc:	movdqu %xmm6,(%rdi)
   45300:	movdqu %xmm1,0x10(%rdi)
   45305:	movdqu %xmm0,0x20(%rdi)
   4530a:	movdqu %xmm5,0x30(%rdi)

000000000004530f <jsimd_h2v1_extxrgb_merged_upsample_sse2.out0>:
   4530f:	add    $0x40,%rdi
   45313:	sub    $0x10,%rcx
   45317:	je     4538b <jsimd_h2v1_extxrgb_merged_upsample_sse2.endcolumn>
   4531d:	add    $0x10,%rsi
   45321:	dec    %al
   45323:	jne    4522f <jsimd_h2v1_extxrgb_merged_upsample_sse2.Yloop_2nd>
   45329:	add    $0x10,%rbx
   4532d:	add    $0x10,%rdx
   45331:	jmpq   450d7 <jsimd_h2v1_extxrgb_merged_upsample_sse2.columnloop>

0000000000045336 <jsimd_h2v1_extxrgb_merged_upsample_sse2.column_st32>:
   45336:	cmp    $0x8,%rcx
   4533a:	jb     45355 <jsimd_h2v1_extxrgb_merged_upsample_sse2.column_st16>
   4533c:	movdqu %xmm6,(%rdi)
   45340:	movdqu %xmm1,0x10(%rdi)
   45345:	add    $0x20,%rdi
   45349:	movdqa %xmm0,%xmm6
   4534d:	movdqa %xmm5,%xmm1
   45351:	sub    $0x8,%rcx

0000000000045355 <jsimd_h2v1_extxrgb_merged_upsample_sse2.column_st16>:
   45355:	cmp    $0x4,%rcx
   45359:	jb     4536b <jsimd_h2v1_extxrgb_merged_upsample_sse2.column_st15>
   4535b:	movdqu %xmm6,(%rdi)
   4535f:	add    $0x10,%rdi
   45363:	movdqa %xmm1,%xmm6
   45367:	sub    $0x4,%rcx

000000000004536b <jsimd_h2v1_extxrgb_merged_upsample_sse2.column_st15>:
   4536b:	cmp    $0x2,%rcx
   4536f:	jb     45382 <jsimd_h2v1_extxrgb_merged_upsample_sse2.column_st7>
   45371:	movq   %xmm6,(%rdi)
   45375:	add    $0x8,%rdi
   45379:	sub    $0x2,%rcx
   4537d:	psrldq $0x8,%xmm6

0000000000045382 <jsimd_h2v1_extxrgb_merged_upsample_sse2.column_st7>:
   45382:	test   %rcx,%rcx
   45385:	je     4538b <jsimd_h2v1_extxrgb_merged_upsample_sse2.endcolumn>
   45387:	movd   %xmm6,(%rdi)

000000000004538b <jsimd_h2v1_extxrgb_merged_upsample_sse2.endcolumn>:
   4538b:	sfence 

000000000004538e <jsimd_h2v1_extxrgb_merged_upsample_sse2.return>:
   4538e:	pop    %rbx
   4538f:	pop    %r15
   45391:	pop    %r14
   45393:	pop    %r13
   45395:	pop    %r12
   45397:	pop    %r11
   45399:	pop    %r10
   4539b:	mov    %rbp,%rsp
   4539e:	pop    %rsp
   4539f:	pop    %rbp
   453a0:	retq   
   453a1:	nop
   453a2:	nop
   453a3:	nop
   453a4:	nop
   453a5:	nop
   453a6:	nop
   453a7:	nop
   453a8:	nop
   453a9:	nop
   453aa:	nop
   453ab:	nop
   453ac:	nop
   453ad:	nop
   453ae:	nop
   453af:	nop

00000000000453b0 <jsimd_h2v2_extxrgb_merged_upsample_sse2>:
   453b0:	push   %rbp
   453b1:	mov    %rsp,%rax
   453b4:	mov    %rsp,%rbp
   453b7:	push   %r10
   453b9:	push   %r11
   453bb:	push   %r12
   453bd:	push   %r13
   453bf:	push   %r14
   453c1:	push   %r15
   453c3:	mov    %rdi,%r10
   453c6:	mov    %rsi,%r11
   453c9:	mov    %rdx,%r12
   453cc:	mov    %rcx,%r13
   453cf:	mov    %r8,%r14
   453d2:	mov    %r9,%r15
   453d5:	push   %rbx
   453d6:	mov    %r10d,%eax
   453d9:	mov    %r11,%rdi
   453dc:	mov    %r12d,%ecx
   453df:	mov    (%rdi),%rsi
   453e2:	mov    0x8(%rdi),%rbx
   453e6:	mov    0x10(%rdi),%rdx
   453ea:	mov    %r13,%rdi
   453ed:	lea    (%rsi,%rcx,8),%rsi
   453f1:	push   %rdx
   453f2:	push   %rbx
   453f3:	push   %rsi
   453f4:	mov    %rsp,%rbx
   453f7:	push   %rdi
   453f8:	push   %rcx
   453f9:	push   %rax
   453fa:	mov    %rcx,%rdx
   453fd:	mov    %rdi,%rcx
   45400:	mov    %rax,%rdi
   45403:	mov    %rbx,%rsi
   45406:	callq  45070 <jsimd_h2v1_extxrgb_merged_upsample_sse2>
   4540b:	pop    %rax
   4540c:	pop    %rcx
   4540d:	pop    %rdi
   4540e:	pop    %rsi
   4540f:	pop    %rbx
   45410:	pop    %rdx
   45411:	add    $0x8,%rdi
   45415:	add    $0x8,%rsi
   45419:	push   %rdx
   4541a:	push   %rbx
   4541b:	push   %rsi
   4541c:	mov    %rsp,%rbx
   4541f:	push   %rdi
   45420:	push   %rcx
   45421:	push   %rax
   45422:	mov    %rcx,%rdx
   45425:	mov    %rdi,%rcx
   45428:	mov    %rax,%rdi
   4542b:	mov    %rbx,%rsi
   4542e:	callq  45070 <jsimd_h2v1_extxrgb_merged_upsample_sse2>
   45433:	pop    %rax
   45434:	pop    %rcx
   45435:	pop    %rdi
   45436:	pop    %rsi
   45437:	pop    %rbx
   45438:	pop    %rdx
   45439:	pop    %rbx
   4543a:	pop    %r15
   4543c:	pop    %r14
   4543e:	pop    %r13
   45440:	pop    %r12
   45442:	pop    %r11
   45444:	pop    %r10
   45446:	pop    %rbp
   45447:	retq   
   45448:	nop
   45449:	nop
   4544a:	nop
   4544b:	nop
   4544c:	nop
   4544d:	nop
   4544e:	nop
   4544f:	nop

0000000000045450 <jsimd_h2v1_fancy_upsample_sse2>:
   45450:	push   %rbp
   45451:	mov    %rsp,%rax
   45454:	mov    %rsp,%rbp
   45457:	push   %r10
   45459:	push   %r11
   4545b:	push   %r12
   4545d:	push   %r13
   4545f:	push   %r14
   45461:	push   %r15
   45463:	mov    %rdi,%r10
   45466:	mov    %rsi,%r11
   45469:	mov    %rdx,%r12
   4546c:	mov    %rcx,%r13
   4546f:	mov    %r8,%r14
   45472:	mov    %r9,%r15
   45475:	mov    %r11d,%eax
   45478:	test   %rax,%rax
   4547b:	je     455d2 <jsimd_h2v1_fancy_upsample_sse2.return>
   45481:	mov    %r10,%rcx
   45484:	test   %rcx,%rcx
   45487:	je     455d2 <jsimd_h2v1_fancy_upsample_sse2.return>
   4548d:	mov    %r12,%rsi
   45490:	mov    %r13,%rdi
   45493:	mov    (%rdi),%rdi

0000000000045496 <jsimd_h2v1_fancy_upsample_sse2.rowloop>:
   45496:	push   %rax
   45497:	push   %rdi
   45498:	push   %rsi
   45499:	mov    (%rsi),%rsi
   4549c:	mov    (%rdi),%rdi
   4549f:	test   $0xf,%rax
   454a5:	je     454ae <jsimd_h2v1_fancy_upsample_sse2.skip>
   454a7:	mov    -0x1(%rsi,%rax,1),%dl
   454ab:	mov    %dl,(%rsi,%rax,1)

00000000000454ae <jsimd_h2v1_fancy_upsample_sse2.skip>:
   454ae:	pxor   %xmm0,%xmm0
   454b2:	pcmpeqb %xmm7,%xmm7
   454b6:	psrldq $0xf,%xmm7
   454bb:	pand   (%rsi),%xmm7
   454bf:	add    $0xf,%rax
   454c3:	and    $0xfffffffffffffff0,%rax
   454c7:	cmp    $0x10,%rax
   454cb:	ja     454dc <jsimd_h2v1_fancy_upsample_sse2.columnloop>

00000000000454cd <jsimd_h2v1_fancy_upsample_sse2.columnloop_last>:
   454cd:	pcmpeqb %xmm6,%xmm6
   454d1:	pslldq $0xf,%xmm6
   454d6:	pand   (%rsi),%xmm6
   454da:	jmp    454e6 <jsimd_h2v1_fancy_upsample_sse2.upsample>

00000000000454dc <jsimd_h2v1_fancy_upsample_sse2.columnloop>:
   454dc:	movdqa 0x10(%rsi),%xmm6
   454e1:	pslldq $0xf,%xmm6

00000000000454e6 <jsimd_h2v1_fancy_upsample_sse2.upsample>:
   454e6:	movdqa (%rsi),%xmm1
   454ea:	movdqa %xmm1,%xmm2
   454ee:	movdqa %xmm1,%xmm3
   454f2:	pslldq $0x1,%xmm2
   454f7:	psrldq $0x1,%xmm3
   454fc:	por    %xmm7,%xmm2
   45500:	por    %xmm6,%xmm3
   45504:	movdqa %xmm1,%xmm7
   45508:	psrldq $0xf,%xmm7
   4550d:	movdqa %xmm1,%xmm4
   45511:	punpcklbw %xmm0,%xmm1
   45515:	punpckhbw %xmm0,%xmm4
   45519:	movdqa %xmm2,%xmm5
   4551d:	punpcklbw %xmm0,%xmm2
   45521:	punpckhbw %xmm0,%xmm5
   45525:	movdqa %xmm3,%xmm6
   45529:	punpcklbw %xmm0,%xmm3
   4552d:	punpckhbw %xmm0,%xmm6
   45531:	pmullw 0x26837(%rip),%xmm1        # 6bd70 <PW_THREE>
   45539:	pmullw 0x2682f(%rip),%xmm4        # 6bd70 <PW_THREE>
   45541:	paddw  0x26807(%rip),%xmm2        # 6bd50 <PW_ONE>
   45549:	paddw  0x267ff(%rip),%xmm5        # 6bd50 <PW_ONE>
   45551:	paddw  0x26807(%rip),%xmm3        # 6bd60 <PW_TWO>
   45559:	paddw  0x267ff(%rip),%xmm6        # 6bd60 <PW_TWO>
   45561:	paddw  %xmm1,%xmm2
   45565:	paddw  %xmm4,%xmm5
   45569:	psrlw  $0x2,%xmm2
   4556e:	psrlw  $0x2,%xmm5
   45573:	paddw  %xmm1,%xmm3
   45577:	paddw  %xmm4,%xmm6
   4557b:	psrlw  $0x2,%xmm3
   45580:	psrlw  $0x2,%xmm6
   45585:	psllw  $0x8,%xmm3
   4558a:	psllw  $0x8,%xmm6
   4558f:	por    %xmm3,%xmm2
   45593:	por    %xmm6,%xmm5
   45597:	movdqa %xmm2,(%rdi)
   4559b:	movdqa %xmm5,0x10(%rdi)
   455a0:	sub    $0x10,%rax
   455a4:	add    $0x10,%rsi
   455a8:	add    $0x20,%rdi
   455ac:	cmp    $0x10,%rax
   455b0:	ja     454dc <jsimd_h2v1_fancy_upsample_sse2.columnloop>
   455b6:	test   %eax,%eax
   455b8:	jne    454cd <jsimd_h2v1_fancy_upsample_sse2.columnloop_last>
   455be:	pop    %rsi
   455bf:	pop    %rdi
   455c0:	pop    %rax
   455c1:	add    $0x8,%rsi
   455c5:	add    $0x8,%rdi
   455c9:	dec    %rcx
   455cc:	jg     45496 <jsimd_h2v1_fancy_upsample_sse2.rowloop>

00000000000455d2 <jsimd_h2v1_fancy_upsample_sse2.return>:
   455d2:	pop    %r15
   455d4:	pop    %r14
   455d6:	pop    %r13
   455d8:	pop    %r12
   455da:	pop    %r11
   455dc:	pop    %r10
   455de:	pop    %rbp
   455df:	retq   

00000000000455e0 <jsimd_h2v2_fancy_upsample_sse2>:
   455e0:	push   %rbp
   455e1:	mov    %rsp,%rax
   455e4:	sub    $0x4,%rsp
   455e8:	and    $0xfffffffffffffff0,%rsp
   455ec:	mov    %rax,(%rsp)
   455f0:	mov    %rsp,%rbp
   455f3:	lea    -0x40(%rbp),%rsp
   455f7:	push   %r10
   455f9:	push   %r11
   455fb:	push   %r12
   455fd:	push   %r13
   455ff:	push   %r14
   45601:	push   %r15
   45603:	mov    %rdi,%r10
   45606:	mov    %rsi,%r11
   45609:	mov    %rdx,%r12
   4560c:	mov    %rcx,%r13
   4560f:	mov    %r8,%r14
   45612:	mov    %r9,%r15
   45615:	push   %rbx
   45616:	mov    %r11d,%eax
   45619:	test   %rax,%rax
   4561c:	je     4597d <jsimd_h2v2_fancy_upsample_sse2.return>
   45622:	mov    %r10,%rcx
   45625:	test   %rcx,%rcx
   45628:	je     4597d <jsimd_h2v2_fancy_upsample_sse2.return>
   4562e:	mov    %r12,%rsi
   45631:	mov    %r13,%rdi
   45634:	mov    (%rdi),%rdi

0000000000045637 <jsimd_h2v2_fancy_upsample_sse2.rowloop>:
   45637:	push   %rax
   45638:	push   %rcx
   45639:	push   %rdi
   4563a:	push   %rsi
   4563b:	mov    -0x8(%rsi),%rcx
   4563f:	mov    (%rsi),%rbx
   45642:	mov    0x8(%rsi),%rsi
   45646:	mov    (%rdi),%rdx
   45649:	mov    0x8(%rdi),%rdi
   4564d:	test   $0xf,%rax
   45653:	je     4566c <jsimd_h2v2_fancy_upsample_sse2.skip>
   45655:	push   %rdx
   45656:	mov    -0x1(%rcx,%rax,1),%dl
   4565a:	mov    %dl,(%rcx,%rax,1)
   4565d:	mov    -0x1(%rbx,%rax,1),%dl
   45661:	mov    %dl,(%rbx,%rax,1)
   45664:	mov    -0x1(%rsi,%rax,1),%dl
   45668:	mov    %dl,(%rsi,%rax,1)
   4566b:	pop    %rdx

000000000004566c <jsimd_h2v2_fancy_upsample_sse2.skip>:
   4566c:	movdqa (%rbx),%xmm0
   45670:	movdqa (%rcx),%xmm1
   45674:	movdqa (%rsi),%xmm2
   45678:	pxor   %xmm3,%xmm3
   4567c:	movdqa %xmm0,%xmm4
   45680:	punpcklbw %xmm3,%xmm0
   45684:	punpckhbw %xmm3,%xmm4
   45688:	movdqa %xmm1,%xmm5
   4568c:	punpcklbw %xmm3,%xmm1
   45690:	punpckhbw %xmm3,%xmm5
   45694:	movdqa %xmm2,%xmm6
   45698:	punpcklbw %xmm3,%xmm2
   4569c:	punpckhbw %xmm3,%xmm6
   456a0:	pmullw 0x266c8(%rip),%xmm0        # 6bd70 <PW_THREE>
   456a8:	pmullw 0x266c0(%rip),%xmm4        # 6bd70 <PW_THREE>
   456b0:	pcmpeqb %xmm7,%xmm7
   456b4:	psrldq $0xe,%xmm7
   456b9:	paddw  %xmm0,%xmm1
   456bd:	paddw  %xmm4,%xmm5
   456c1:	paddw  %xmm0,%xmm2
   456c5:	paddw  %xmm4,%xmm6
   456c9:	movdqa %xmm1,(%rdx)
   456cd:	movdqa %xmm5,0x10(%rdx)
   456d2:	movdqa %xmm2,(%rdi)
   456d6:	movdqa %xmm6,0x10(%rdi)
   456db:	pand   %xmm7,%xmm1
   456df:	pand   %xmm7,%xmm2
   456e3:	movdqa %xmm1,-0x40(%rbp)
   456e8:	movdqa %xmm2,-0x30(%rbp)
   456ed:	add    $0xf,%rax
   456f1:	and    $0xfffffffffffffff0,%rax
   456f5:	cmp    $0x10,%rax
   456f9:	ja     45721 <jsimd_h2v2_fancy_upsample_sse2.columnloop>

00000000000456fb <jsimd_h2v2_fancy_upsample_sse2.columnloop_last>:
   456fb:	pcmpeqb %xmm1,%xmm1
   456ff:	pslldq $0xe,%xmm1
   45704:	movdqa %xmm1,%xmm2
   45708:	pand   0x10(%rdx),%xmm1
   4570d:	pand   0x10(%rdi),%xmm2
   45712:	movdqa %xmm1,-0x20(%rbp)
   45717:	movdqa %xmm2,-0x10(%rbp)
   4571c:	jmpq   457a0 <jsimd_h2v2_fancy_upsample_sse2.upsample>

0000000000045721 <jsimd_h2v2_fancy_upsample_sse2.columnloop>:
   45721:	movdqa 0x10(%rbx),%xmm0
   45726:	movdqa 0x10(%rcx),%xmm1
   4572b:	movdqa 0x10(%rsi),%xmm2
   45730:	pxor   %xmm3,%xmm3
   45734:	movdqa %xmm0,%xmm4
   45738:	punpcklbw %xmm3,%xmm0
   4573c:	punpckhbw %xmm3,%xmm4
   45740:	movdqa %xmm1,%xmm5
   45744:	punpcklbw %xmm3,%xmm1
   45748:	punpckhbw %xmm3,%xmm5
   4574c:	movdqa %xmm2,%xmm6
   45750:	punpcklbw %xmm3,%xmm2
   45754:	punpckhbw %xmm3,%xmm6
   45758:	pmullw 0x26610(%rip),%xmm0        # 6bd70 <PW_THREE>
   45760:	pmullw 0x26608(%rip),%xmm4        # 6bd70 <PW_THREE>
   45768:	paddw  %xmm0,%xmm1
   4576c:	paddw  %xmm4,%xmm5
   45770:	paddw  %xmm0,%xmm2
   45774:	paddw  %xmm4,%xmm6
   45778:	movdqa %xmm1,0x20(%rdx)
   4577d:	movdqa %xmm5,0x30(%rdx)
   45782:	movdqa %xmm2,0x20(%rdi)
   45787:	movdqa %xmm6,0x30(%rdi)
   4578c:	pslldq $0xe,%xmm1
   45791:	pslldq $0xe,%xmm2
   45796:	movdqa %xmm1,-0x20(%rbp)
   4579b:	movdqa %xmm2,-0x10(%rbp)

00000000000457a0 <jsimd_h2v2_fancy_upsample_sse2.upsample>:
   457a0:	movdqa (%rdx),%xmm7
   457a4:	movdqa 0x10(%rdx),%xmm3
   457a9:	movdqa %xmm7,%xmm0
   457ad:	movdqa %xmm3,%xmm4
   457b1:	psrldq $0x2,%xmm0
   457b6:	pslldq $0xe,%xmm4
   457bb:	movdqa %xmm7,%xmm5
   457bf:	movdqa %xmm3,%xmm6
   457c3:	psrldq $0xe,%xmm5
   457c8:	pslldq $0x2,%xmm6
   457cd:	por    %xmm4,%xmm0
   457d1:	por    %xmm6,%xmm5
   457d5:	movdqa %xmm7,%xmm1
   457d9:	movdqa %xmm3,%xmm2
   457dd:	pslldq $0x2,%xmm1
   457e2:	psrldq $0x2,%xmm2
   457e7:	movdqa %xmm3,%xmm4
   457eb:	psrldq $0xe,%xmm4
   457f0:	por    -0x40(%rbp),%xmm1
   457f5:	por    -0x20(%rbp),%xmm2
   457fa:	movdqa %xmm4,-0x40(%rbp)
   457ff:	pmullw 0x26569(%rip),%xmm7        # 6bd70 <PW_THREE>
   45807:	pmullw 0x26561(%rip),%xmm3        # 6bd70 <PW_THREE>
   4580f:	paddw  0x26579(%rip),%xmm1        # 6bd90 <PW_EIGHT>
   45817:	paddw  0x26571(%rip),%xmm5        # 6bd90 <PW_EIGHT>
   4581f:	paddw  0x26559(%rip),%xmm0        # 6bd80 <PW_SEVEN>
   45827:	paddw  0x26551(%rip),%xmm2        # 6bd80 <PW_SEVEN>
   4582f:	paddw  %xmm7,%xmm1
   45833:	paddw  %xmm3,%xmm5
   45837:	psrlw  $0x4,%xmm1
   4583c:	psrlw  $0x4,%xmm5
   45841:	paddw  %xmm7,%xmm0
   45845:	paddw  %xmm3,%xmm2
   45849:	psrlw  $0x4,%xmm0
   4584e:	psrlw  $0x4,%xmm2
   45853:	psllw  $0x8,%xmm0
   45858:	psllw  $0x8,%xmm2
   4585d:	por    %xmm0,%xmm1
   45861:	por    %xmm2,%xmm5
   45865:	movdqa %xmm1,(%rdx)
   45869:	movdqa %xmm5,0x10(%rdx)
   4586e:	movdqa (%rdi),%xmm6
   45872:	movdqa 0x10(%rdi),%xmm4
   45877:	movdqa %xmm6,%xmm7
   4587b:	movdqa %xmm4,%xmm3
   4587f:	psrldq $0x2,%xmm7
   45884:	pslldq $0xe,%xmm3
   45889:	movdqa %xmm6,%xmm0
   4588d:	movdqa %xmm4,%xmm2
   45891:	psrldq $0xe,%xmm0
   45896:	pslldq $0x2,%xmm2
   4589b:	por    %xmm3,%xmm7
   4589f:	por    %xmm2,%xmm0
   458a3:	movdqa %xmm6,%xmm1
   458a7:	movdqa %xmm4,%xmm5
   458ab:	pslldq $0x2,%xmm1
   458b0:	psrldq $0x2,%xmm5
   458b5:	movdqa %xmm4,%xmm3
   458b9:	psrldq $0xe,%xmm3
   458be:	por    -0x30(%rbp),%xmm1
   458c3:	por    -0x10(%rbp),%xmm5
   458c8:	movdqa %xmm3,-0x30(%rbp)
   458cd:	pmullw 0x2649b(%rip),%xmm6        # 6bd70 <PW_THREE>
   458d5:	pmullw 0x26493(%rip),%xmm4        # 6bd70 <PW_THREE>
   458dd:	paddw  0x264ab(%rip),%xmm1        # 6bd90 <PW_EIGHT>
   458e5:	paddw  0x264a3(%rip),%xmm0        # 6bd90 <PW_EIGHT>
   458ed:	paddw  0x2648b(%rip),%xmm7        # 6bd80 <PW_SEVEN>
   458f5:	paddw  0x26483(%rip),%xmm5        # 6bd80 <PW_SEVEN>
   458fd:	paddw  %xmm6,%xmm1
   45901:	paddw  %xmm4,%xmm0
   45905:	psrlw  $0x4,%xmm1
   4590a:	psrlw  $0x4,%xmm0
   4590f:	paddw  %xmm6,%xmm7
   45913:	paddw  %xmm4,%xmm5
   45917:	psrlw  $0x4,%xmm7
   4591c:	psrlw  $0x4,%xmm5
   45921:	psllw  $0x8,%xmm7
   45926:	psllw  $0x8,%xmm5
   4592b:	por    %xmm7,%xmm1
   4592f:	por    %xmm5,%xmm0
   45933:	movdqa %xmm1,(%rdi)
   45937:	movdqa %xmm0,0x10(%rdi)
   4593c:	sub    $0x10,%rax
   45940:	add    $0x10,%rcx
   45944:	add    $0x10,%rbx
   45948:	add    $0x10,%rsi
   4594c:	add    $0x20,%rdx
   45950:	add    $0x20,%rdi
   45954:	cmp    $0x10,%rax
   45958:	ja     45721 <jsimd_h2v2_fancy_upsample_sse2.columnloop>
   4595e:	test   %rax,%rax
   45961:	jne    456fb <jsimd_h2v2_fancy_upsample_sse2.columnloop_last>
   45967:	pop    %rsi
   45968:	pop    %rdi
   45969:	pop    %rcx
   4596a:	pop    %rax
   4596b:	add    $0x8,%rsi
   4596f:	add    $0x10,%rdi
   45973:	sub    $0x2,%rcx
   45977:	jg     45637 <jsimd_h2v2_fancy_upsample_sse2.rowloop>

000000000004597d <jsimd_h2v2_fancy_upsample_sse2.return>:
   4597d:	pop    %rbx
   4597e:	pop    %r15
   45980:	pop    %r14
   45982:	pop    %r13
   45984:	pop    %r12
   45986:	pop    %r11
   45988:	pop    %r10
   4598a:	mov    %rbp,%rsp
   4598d:	pop    %rsp
   4598e:	pop    %rbp
   4598f:	retq   

0000000000045990 <jsimd_h2v1_upsample_sse2>:
   45990:	push   %rbp
   45991:	mov    %rsp,%rax
   45994:	mov    %rsp,%rbp
   45997:	push   %r10
   45999:	push   %r11
   4599b:	push   %r12
   4599d:	push   %r13
   4599f:	push   %r14
   459a1:	push   %r15
   459a3:	mov    %rdi,%r10
   459a6:	mov    %rsi,%r11
   459a9:	mov    %rdx,%r12
   459ac:	mov    %rcx,%r13
   459af:	mov    %r8,%r14
   459b2:	mov    %r9,%r15
   459b5:	mov    %r11d,%edx
   459b8:	add    $0x1f,%rdx
   459bc:	and    $0xffffffffffffffe0,%rdx
   459c0:	je     45a3b <jsimd_h2v1_upsample_sse2.return>
   459c6:	mov    %r10,%rcx
   459c9:	test   %rcx,%rcx
   459cc:	je     45a3b <jsimd_h2v1_upsample_sse2.return>
   459ce:	mov    %r12,%rsi
   459d1:	mov    %r13,%rdi
   459d4:	mov    (%rdi),%rdi

00000000000459d7 <jsimd_h2v1_upsample_sse2.rowloop>:
   459d7:	push   %rdi
   459d8:	push   %rsi
   459d9:	mov    (%rsi),%rsi
   459dc:	mov    (%rdi),%rdi
   459df:	mov    %rdx,%rax

00000000000459e2 <jsimd_h2v1_upsample_sse2.columnloop>:
   459e2:	movdqa (%rsi),%xmm0
   459e6:	movdqa %xmm0,%xmm1
   459ea:	punpcklbw %xmm0,%xmm0
   459ee:	punpckhbw %xmm1,%xmm1
   459f2:	movdqa %xmm0,(%rdi)
   459f6:	movdqa %xmm1,0x10(%rdi)
   459fb:	sub    $0x20,%rax
   459ff:	je     45a2c <jsimd_h2v1_upsample_sse2.nextrow>
   45a01:	movdqa 0x10(%rsi),%xmm2
   45a06:	movdqa %xmm2,%xmm3
   45a0a:	punpcklbw %xmm2,%xmm2
   45a0e:	punpckhbw %xmm3,%xmm3
   45a12:	movdqa %xmm2,0x20(%rdi)
   45a17:	movdqa %xmm3,0x30(%rdi)
   45a1c:	sub    $0x20,%rax
   45a20:	je     45a2c <jsimd_h2v1_upsample_sse2.nextrow>
   45a22:	add    $0x20,%rsi
   45a26:	add    $0x40,%rdi
   45a2a:	jmp    459e2 <jsimd_h2v1_upsample_sse2.columnloop>

0000000000045a2c <jsimd_h2v1_upsample_sse2.nextrow>:
   45a2c:	pop    %rsi
   45a2d:	pop    %rdi
   45a2e:	add    $0x8,%rsi
   45a32:	add    $0x8,%rdi
   45a36:	dec    %rcx
   45a39:	jg     459d7 <jsimd_h2v1_upsample_sse2.rowloop>

0000000000045a3b <jsimd_h2v1_upsample_sse2.return>:
   45a3b:	pop    %r15
   45a3d:	pop    %r14
   45a3f:	pop    %r13
   45a41:	pop    %r12
   45a43:	pop    %r11
   45a45:	pop    %r10
   45a47:	pop    %rbp
   45a48:	retq   
   45a49:	nop
   45a4a:	nop
   45a4b:	nop
   45a4c:	nop
   45a4d:	nop
   45a4e:	nop
   45a4f:	nop

0000000000045a50 <jsimd_h2v2_upsample_sse2>:
   45a50:	push   %rbp
   45a51:	mov    %rsp,%rax
   45a54:	mov    %rsp,%rbp
   45a57:	push   %r10
   45a59:	push   %r11
   45a5b:	push   %r12
   45a5d:	push   %r13
   45a5f:	push   %r14
   45a61:	push   %r15
   45a63:	mov    %rdi,%r10
   45a66:	mov    %rsi,%r11
   45a69:	mov    %rdx,%r12
   45a6c:	mov    %rcx,%r13
   45a6f:	mov    %r8,%r14
   45a72:	mov    %r9,%r15
   45a75:	push   %rbx
   45a76:	mov    %r11d,%edx
   45a79:	add    $0x1f,%rdx
   45a7d:	and    $0xffffffffffffffe0,%rdx
   45a81:	je     45b20 <jsimd_h2v2_upsample_sse2.return>
   45a87:	mov    %r10,%rcx
   45a8a:	test   %rcx,%rcx
   45a8d:	je     45b20 <jsimd_h2v2_upsample_sse2.return>
   45a93:	mov    %r12,%rsi
   45a96:	mov    %r13,%rdi
   45a99:	mov    (%rdi),%rdi

0000000000045a9c <jsimd_h2v2_upsample_sse2.rowloop>:
   45a9c:	push   %rdi
   45a9d:	push   %rsi
   45a9e:	mov    (%rsi),%rsi
   45aa1:	mov    (%rdi),%rbx
   45aa4:	mov    0x8(%rdi),%rdi
   45aa8:	mov    %rdx,%rax

0000000000045aab <jsimd_h2v2_upsample_sse2.columnloop>:
   45aab:	movdqa (%rsi),%xmm0
   45aaf:	movdqa %xmm0,%xmm1
   45ab3:	punpcklbw %xmm0,%xmm0
   45ab7:	punpckhbw %xmm1,%xmm1
   45abb:	movdqa %xmm0,(%rbx)
   45abf:	movdqa %xmm1,0x10(%rbx)
   45ac4:	movdqa %xmm0,(%rdi)
   45ac8:	movdqa %xmm1,0x10(%rdi)
   45acd:	sub    $0x20,%rax
   45ad1:	je     45b0c <jsimd_h2v2_upsample_sse2.nextrow>
   45ad3:	movdqa 0x10(%rsi),%xmm2
   45ad8:	movdqa %xmm2,%xmm3
   45adc:	punpcklbw %xmm2,%xmm2
   45ae0:	punpckhbw %xmm3,%xmm3
   45ae4:	movdqa %xmm2,0x20(%rbx)
   45ae9:	movdqa %xmm3,0x30(%rbx)
   45aee:	movdqa %xmm2,0x20(%rdi)
   45af3:	movdqa %xmm3,0x30(%rdi)
   45af8:	sub    $0x20,%rax
   45afc:	je     45b0c <jsimd_h2v2_upsample_sse2.nextrow>
   45afe:	add    $0x20,%rsi
   45b02:	add    $0x40,%rbx
   45b06:	add    $0x40,%rdi
   45b0a:	jmp    45aab <jsimd_h2v2_upsample_sse2.columnloop>

0000000000045b0c <jsimd_h2v2_upsample_sse2.nextrow>:
   45b0c:	pop    %rsi
   45b0d:	pop    %rdi
   45b0e:	add    $0x8,%rsi
   45b12:	add    $0x10,%rdi
   45b16:	sub    $0x2,%rcx
   45b1a:	jg     45a9c <jsimd_h2v2_upsample_sse2.rowloop>

0000000000045b20 <jsimd_h2v2_upsample_sse2.return>:
   45b20:	pop    %rbx
   45b21:	pop    %r15
   45b23:	pop    %r14
   45b25:	pop    %r13
   45b27:	pop    %r12
   45b29:	pop    %r11
   45b2b:	pop    %r10
   45b2d:	pop    %rbp
   45b2e:	retq   
   45b2f:	nop

0000000000045b30 <jsimd_fdct_ifast_sse2>:
   45b30:	push   %rbp
   45b31:	mov    %rsp,%rax
   45b34:	sub    $0x4,%rsp
   45b38:	and    $0xfffffffffffffff0,%rsp
   45b3c:	mov    %rax,(%rsp)
   45b40:	mov    %rsp,%rbp
   45b43:	lea    -0x20(%rbp),%rsp
   45b47:	push   %r10
   45b49:	push   %r11
   45b4b:	push   %r12
   45b4d:	push   %r13
   45b4f:	push   %r14
   45b51:	push   %r15
   45b53:	mov    %rdi,%r10
   45b56:	mov    %rsi,%r11
   45b59:	mov    %rdx,%r12
   45b5c:	mov    %rcx,%r13
   45b5f:	mov    %r8,%r14
   45b62:	mov    %r9,%r15
   45b65:	mov    %r10,%rdx
   45b68:	movdqa (%rdx),%xmm0
   45b6c:	movdqa 0x10(%rdx),%xmm1
   45b71:	movdqa 0x20(%rdx),%xmm2
   45b76:	movdqa 0x30(%rdx),%xmm3
   45b7b:	movdqa %xmm0,%xmm4
   45b7f:	punpcklwd %xmm1,%xmm0
   45b83:	punpckhwd %xmm1,%xmm4
   45b87:	movdqa %xmm2,%xmm5
   45b8b:	punpcklwd %xmm3,%xmm2
   45b8f:	punpckhwd %xmm3,%xmm5
   45b93:	movdqa 0x40(%rdx),%xmm6
   45b98:	movdqa 0x50(%rdx),%xmm7
   45b9d:	movdqa 0x60(%rdx),%xmm1
   45ba2:	movdqa 0x70(%rdx),%xmm3
   45ba7:	movdqa %xmm2,-0x20(%rbp)
   45bac:	movdqa %xmm5,-0x10(%rbp)
   45bb1:	movdqa %xmm6,%xmm2
   45bb5:	punpcklwd %xmm7,%xmm6
   45bb9:	punpckhwd %xmm7,%xmm2
   45bbd:	movdqa %xmm1,%xmm5
   45bc1:	punpcklwd %xmm3,%xmm1
   45bc5:	punpckhwd %xmm3,%xmm5
   45bc9:	movdqa %xmm6,%xmm7
   45bcd:	punpckldq %xmm1,%xmm6
   45bd1:	punpckhdq %xmm1,%xmm7
   45bd5:	movdqa %xmm2,%xmm3
   45bd9:	punpckldq %xmm5,%xmm2
   45bdd:	punpckhdq %xmm5,%xmm3
   45be1:	movdqa -0x20(%rbp),%xmm1
   45be6:	movdqa -0x10(%rbp),%xmm5
   45beb:	movdqa %xmm7,-0x20(%rbp)
   45bf0:	movdqa %xmm2,-0x10(%rbp)
   45bf5:	movdqa %xmm0,%xmm7
   45bf9:	punpckldq %xmm1,%xmm0
   45bfd:	punpckhdq %xmm1,%xmm7
   45c01:	movdqa %xmm4,%xmm2
   45c05:	punpckldq %xmm5,%xmm4
   45c09:	punpckhdq %xmm5,%xmm2
   45c0d:	movdqa %xmm0,%xmm1
   45c11:	punpcklqdq %xmm6,%xmm0
   45c15:	punpckhqdq %xmm6,%xmm1
   45c19:	movdqa %xmm2,%xmm5
   45c1d:	punpcklqdq %xmm3,%xmm2
   45c21:	punpckhqdq %xmm3,%xmm5
   45c25:	movdqa %xmm1,%xmm6
   45c29:	movdqa %xmm0,%xmm3
   45c2d:	psubw  %xmm2,%xmm1
   45c31:	psubw  %xmm5,%xmm0
   45c35:	paddw  %xmm2,%xmm6
   45c39:	paddw  %xmm5,%xmm3
   45c3d:	movdqa -0x20(%rbp),%xmm2
   45c42:	movdqa -0x10(%rbp),%xmm5
   45c47:	movdqa %xmm1,-0x20(%rbp)
   45c4c:	movdqa %xmm0,-0x10(%rbp)
   45c51:	movdqa %xmm7,%xmm1
   45c55:	punpcklqdq %xmm2,%xmm7
   45c59:	punpckhqdq %xmm2,%xmm1
   45c5d:	movdqa %xmm4,%xmm0
   45c61:	punpcklqdq %xmm5,%xmm4
   45c65:	punpckhqdq %xmm5,%xmm0
   45c69:	movdqa %xmm1,%xmm2
   45c6d:	movdqa %xmm7,%xmm5
   45c71:	paddw  %xmm4,%xmm1
   45c75:	paddw  %xmm0,%xmm7
   45c79:	psubw  %xmm4,%xmm2
   45c7d:	psubw  %xmm0,%xmm5
   45c81:	movdqa %xmm3,%xmm4
   45c85:	movdqa %xmm6,%xmm0
   45c89:	psubw  %xmm1,%xmm3
   45c8d:	psubw  %xmm7,%xmm6
   45c91:	paddw  %xmm1,%xmm4
   45c95:	paddw  %xmm7,%xmm0
   45c99:	paddw  %xmm3,%xmm6
   45c9d:	psllw  $0x2,%xmm6
   45ca2:	pmulhw 0x260f6(%rip),%xmm6        # 6bda0 <PW_F0707>
   45caa:	movdqa %xmm4,%xmm1
   45cae:	movdqa %xmm3,%xmm7
   45cb2:	psubw  %xmm0,%xmm4
   45cb6:	psubw  %xmm6,%xmm3
   45cba:	paddw  %xmm0,%xmm1
   45cbe:	paddw  %xmm6,%xmm7
   45cc2:	movdqa -0x20(%rbp),%xmm0
   45cc7:	movdqa -0x10(%rbp),%xmm6
   45ccc:	movdqa %xmm4,-0x20(%rbp)
   45cd1:	movdqa %xmm3,-0x10(%rbp)
   45cd6:	paddw  %xmm5,%xmm2
   45cda:	paddw  %xmm0,%xmm5
   45cde:	paddw  %xmm6,%xmm0
   45ce2:	psllw  $0x2,%xmm2
   45ce7:	psllw  $0x2,%xmm0
   45cec:	psllw  $0x2,%xmm5
   45cf1:	pmulhw 0x260a7(%rip),%xmm5        # 6bda0 <PW_F0707>
   45cf9:	movdqa %xmm2,%xmm4
   45cfd:	psubw  %xmm0,%xmm2
   45d01:	pmulhw 0x260a7(%rip),%xmm2        # 6bdb0 <PW_F0382>
   45d09:	pmulhw 0x260af(%rip),%xmm4        # 6bdc0 <PW_F0541>
   45d11:	pmulhw 0x260b7(%rip),%xmm0        # 6bdd0 <PW_F1306>
   45d19:	paddw  %xmm2,%xmm4
   45d1d:	paddw  %xmm2,%xmm0
   45d21:	movdqa %xmm6,%xmm3
   45d25:	psubw  %xmm5,%xmm6
   45d29:	paddw  %xmm5,%xmm3
   45d2d:	movdqa %xmm6,%xmm2
   45d31:	movdqa %xmm3,%xmm5
   45d35:	psubw  %xmm4,%xmm6
   45d39:	psubw  %xmm0,%xmm3
   45d3d:	paddw  %xmm4,%xmm2
   45d41:	paddw  %xmm0,%xmm5
   45d45:	movdqa %xmm1,%xmm4
   45d49:	punpcklwd %xmm5,%xmm1
   45d4d:	punpckhwd %xmm5,%xmm4
   45d51:	movdqa %xmm7,%xmm0
   45d55:	punpcklwd %xmm6,%xmm7
   45d59:	punpckhwd %xmm6,%xmm0
   45d5d:	movdqa -0x20(%rbp),%xmm5
   45d62:	movdqa -0x10(%rbp),%xmm6
   45d67:	movdqa %xmm7,-0x20(%rbp)
   45d6c:	movdqa %xmm0,-0x10(%rbp)
   45d71:	movdqa %xmm5,%xmm7
   45d75:	punpcklwd %xmm2,%xmm5
   45d79:	punpckhwd %xmm2,%xmm7
   45d7d:	movdqa %xmm6,%xmm0
   45d81:	punpcklwd %xmm3,%xmm6
   45d85:	punpckhwd %xmm3,%xmm0
   45d89:	movdqa %xmm5,%xmm2
   45d8d:	punpckldq %xmm6,%xmm5
   45d91:	punpckhdq %xmm6,%xmm2
   45d95:	movdqa %xmm7,%xmm3
   45d99:	punpckldq %xmm0,%xmm7
   45d9d:	punpckhdq %xmm0,%xmm3
   45da1:	movdqa -0x20(%rbp),%xmm6
   45da6:	movdqa -0x10(%rbp),%xmm0
   45dab:	movdqa %xmm2,-0x20(%rbp)
   45db0:	movdqa %xmm7,-0x10(%rbp)
   45db5:	movdqa %xmm1,%xmm2
   45db9:	punpckldq %xmm6,%xmm1
   45dbd:	punpckhdq %xmm6,%xmm2
   45dc1:	movdqa %xmm4,%xmm7
   45dc5:	punpckldq %xmm0,%xmm4
   45dc9:	punpckhdq %xmm0,%xmm7
   45dcd:	movdqa %xmm1,%xmm6
   45dd1:	punpcklqdq %xmm5,%xmm1
   45dd5:	punpckhqdq %xmm5,%xmm6
   45dd9:	movdqa %xmm7,%xmm0
   45ddd:	punpcklqdq %xmm3,%xmm7
   45de1:	punpckhqdq %xmm3,%xmm0
   45de5:	movdqa %xmm6,%xmm5
   45de9:	movdqa %xmm1,%xmm3
   45ded:	psubw  %xmm7,%xmm6
   45df1:	psubw  %xmm0,%xmm1
   45df5:	paddw  %xmm7,%xmm5
   45df9:	paddw  %xmm0,%xmm3
   45dfd:	movdqa -0x20(%rbp),%xmm7
   45e02:	movdqa -0x10(%rbp),%xmm0
   45e07:	movdqa %xmm6,-0x20(%rbp)
   45e0c:	movdqa %xmm1,-0x10(%rbp)
   45e11:	movdqa %xmm2,%xmm6
   45e15:	punpcklqdq %xmm7,%xmm2
   45e19:	punpckhqdq %xmm7,%xmm6
   45e1d:	movdqa %xmm4,%xmm1
   45e21:	punpcklqdq %xmm0,%xmm4
   45e25:	punpckhqdq %xmm0,%xmm1
   45e29:	movdqa %xmm6,%xmm7
   45e2d:	movdqa %xmm2,%xmm0
   45e31:	paddw  %xmm4,%xmm6
   45e35:	paddw  %xmm1,%xmm2
   45e39:	psubw  %xmm4,%xmm7
   45e3d:	psubw  %xmm1,%xmm0
   45e41:	movdqa %xmm3,%xmm4
   45e45:	movdqa %xmm5,%xmm1
   45e49:	psubw  %xmm6,%xmm3
   45e4d:	psubw  %xmm2,%xmm5
   45e51:	paddw  %xmm6,%xmm4
   45e55:	paddw  %xmm2,%xmm1
   45e59:	paddw  %xmm3,%xmm5
   45e5d:	psllw  $0x2,%xmm5
   45e62:	pmulhw 0x25f36(%rip),%xmm5        # 6bda0 <PW_F0707>
   45e6a:	movdqa %xmm4,%xmm6
   45e6e:	movdqa %xmm3,%xmm2
   45e72:	psubw  %xmm1,%xmm4
   45e76:	psubw  %xmm5,%xmm3
   45e7a:	paddw  %xmm1,%xmm6
   45e7e:	paddw  %xmm5,%xmm2
   45e82:	movdqa %xmm4,0x40(%rdx)
   45e87:	movdqa %xmm3,0x60(%rdx)
   45e8c:	movdqa %xmm6,(%rdx)
   45e90:	movdqa %xmm2,0x20(%rdx)
   45e95:	movdqa -0x20(%rbp),%xmm1
   45e9a:	movdqa -0x10(%rbp),%xmm5
   45e9f:	paddw  %xmm0,%xmm7
   45ea3:	paddw  %xmm1,%xmm0
   45ea7:	paddw  %xmm5,%xmm1
   45eab:	psllw  $0x2,%xmm7
   45eb0:	psllw  $0x2,%xmm1
   45eb5:	psllw  $0x2,%xmm0
   45eba:	pmulhw 0x25ede(%rip),%xmm0        # 6bda0 <PW_F0707>
   45ec2:	movdqa %xmm7,%xmm4
   45ec6:	psubw  %xmm1,%xmm7
   45eca:	pmulhw 0x25ede(%rip),%xmm7        # 6bdb0 <PW_F0382>
   45ed2:	pmulhw 0x25ee6(%rip),%xmm4        # 6bdc0 <PW_F0541>
   45eda:	pmulhw 0x25eee(%rip),%xmm1        # 6bdd0 <PW_F1306>
   45ee2:	paddw  %xmm7,%xmm4
   45ee6:	paddw  %xmm7,%xmm1
   45eea:	movdqa %xmm5,%xmm3
   45eee:	psubw  %xmm0,%xmm5
   45ef2:	paddw  %xmm0,%xmm3
   45ef6:	movdqa %xmm5,%xmm6
   45efa:	movdqa %xmm3,%xmm2
   45efe:	psubw  %xmm4,%xmm5
   45f02:	psubw  %xmm1,%xmm3
   45f06:	paddw  %xmm4,%xmm6
   45f0a:	paddw  %xmm1,%xmm2
   45f0e:	movdqa %xmm5,0x30(%rdx)
   45f13:	movdqa %xmm3,0x70(%rdx)
   45f18:	movdqa %xmm6,0x50(%rdx)
   45f1d:	movdqa %xmm2,0x10(%rdx)
   45f22:	pop    %r15
   45f24:	pop    %r14
   45f26:	pop    %r13
   45f28:	pop    %r12
   45f2a:	pop    %r11
   45f2c:	pop    %r10
   45f2e:	mov    %rbp,%rsp
   45f31:	pop    %rsp
   45f32:	pop    %rbp
   45f33:	retq   
   45f34:	nop
   45f35:	nop
   45f36:	nop
   45f37:	nop
   45f38:	nop
   45f39:	nop
   45f3a:	nop
   45f3b:	nop
   45f3c:	nop
   45f3d:	nop
   45f3e:	nop
   45f3f:	nop

0000000000045f40 <jsimd_fdct_islow_sse2>:
   45f40:	push   %rbp
   45f41:	mov    %rsp,%rax
   45f44:	sub    $0x4,%rsp
   45f48:	and    $0xfffffffffffffff0,%rsp
   45f4c:	mov    %rax,(%rsp)
   45f50:	mov    %rsp,%rbp
   45f53:	lea    -0x60(%rbp),%rsp
   45f57:	push   %r10
   45f59:	push   %r11
   45f5b:	push   %r12
   45f5d:	push   %r13
   45f5f:	push   %r14
   45f61:	push   %r15
   45f63:	mov    %rdi,%r10
   45f66:	mov    %rsi,%r11
   45f69:	mov    %rdx,%r12
   45f6c:	mov    %rcx,%r13
   45f6f:	mov    %r8,%r14
   45f72:	mov    %r9,%r15
   45f75:	mov    %r10,%rdx
   45f78:	movdqa (%rdx),%xmm0
   45f7c:	movdqa 0x10(%rdx),%xmm1
   45f81:	movdqa 0x20(%rdx),%xmm2
   45f86:	movdqa 0x30(%rdx),%xmm3
   45f8b:	movdqa %xmm0,%xmm4
   45f8f:	punpcklwd %xmm1,%xmm0
   45f93:	punpckhwd %xmm1,%xmm4
   45f97:	movdqa %xmm2,%xmm5
   45f9b:	punpcklwd %xmm3,%xmm2
   45f9f:	punpckhwd %xmm3,%xmm5
   45fa3:	movdqa 0x40(%rdx),%xmm6
   45fa8:	movdqa 0x50(%rdx),%xmm7
   45fad:	movdqa 0x60(%rdx),%xmm1
   45fb2:	movdqa 0x70(%rdx),%xmm3
   45fb7:	movdqa %xmm2,-0x60(%rbp)
   45fbc:	movdqa %xmm5,-0x50(%rbp)
   45fc1:	movdqa %xmm6,%xmm2
   45fc5:	punpcklwd %xmm7,%xmm6
   45fc9:	punpckhwd %xmm7,%xmm2
   45fcd:	movdqa %xmm1,%xmm5
   45fd1:	punpcklwd %xmm3,%xmm1
   45fd5:	punpckhwd %xmm3,%xmm5
   45fd9:	movdqa %xmm6,%xmm7
   45fdd:	punpckldq %xmm1,%xmm6
   45fe1:	punpckhdq %xmm1,%xmm7
   45fe5:	movdqa %xmm2,%xmm3
   45fe9:	punpckldq %xmm5,%xmm2
   45fed:	punpckhdq %xmm5,%xmm3
   45ff1:	movdqa -0x60(%rbp),%xmm1
   45ff6:	movdqa -0x50(%rbp),%xmm5
   45ffb:	movdqa %xmm7,-0x40(%rbp)
   46000:	movdqa %xmm2,-0x30(%rbp)
   46005:	movdqa %xmm0,%xmm7
   46009:	punpckldq %xmm1,%xmm0
   4600d:	punpckhdq %xmm1,%xmm7
   46011:	movdqa %xmm4,%xmm2
   46015:	punpckldq %xmm5,%xmm4
   46019:	punpckhdq %xmm5,%xmm2
   4601d:	movdqa %xmm0,%xmm1
   46021:	punpcklqdq %xmm6,%xmm0
   46025:	punpckhqdq %xmm6,%xmm1
   46029:	movdqa %xmm2,%xmm5
   4602d:	punpcklqdq %xmm3,%xmm2
   46031:	punpckhqdq %xmm3,%xmm5
   46035:	movdqa %xmm1,%xmm6
   46039:	movdqa %xmm0,%xmm3
   4603d:	psubw  %xmm2,%xmm1
   46041:	psubw  %xmm5,%xmm0
   46045:	paddw  %xmm2,%xmm6
   46049:	paddw  %xmm5,%xmm3
   4604d:	movdqa -0x40(%rbp),%xmm2
   46052:	movdqa -0x30(%rbp),%xmm5
   46057:	movdqa %xmm1,-0x60(%rbp)
   4605c:	movdqa %xmm0,-0x50(%rbp)
   46061:	movdqa %xmm7,%xmm1
   46065:	punpcklqdq %xmm2,%xmm7
   46069:	punpckhqdq %xmm2,%xmm1
   4606d:	movdqa %xmm4,%xmm0
   46071:	punpcklqdq %xmm5,%xmm4
   46075:	punpckhqdq %xmm5,%xmm0
   46079:	movdqa %xmm1,%xmm2
   4607d:	movdqa %xmm7,%xmm5
   46081:	paddw  %xmm4,%xmm1
   46085:	paddw  %xmm0,%xmm7
   46089:	psubw  %xmm4,%xmm2
   4608d:	psubw  %xmm0,%xmm5
   46091:	movdqa %xmm3,%xmm4
   46095:	movdqa %xmm6,%xmm0
   46099:	paddw  %xmm1,%xmm3
   4609d:	paddw  %xmm7,%xmm6
   460a1:	psubw  %xmm1,%xmm4
   460a5:	psubw  %xmm7,%xmm0
   460a9:	movdqa %xmm3,%xmm1
   460ad:	paddw  %xmm6,%xmm3
   460b1:	psubw  %xmm6,%xmm1
   460b5:	psllw  $0x2,%xmm3
   460ba:	psllw  $0x2,%xmm1
   460bf:	movdqa %xmm3,-0x40(%rbp)
   460c4:	movdqa %xmm1,-0x30(%rbp)
   460c9:	movdqa %xmm4,%xmm7
   460cd:	movdqa %xmm4,%xmm6
   460d1:	punpcklwd %xmm0,%xmm7
   460d5:	punpckhwd %xmm0,%xmm6
   460d9:	movdqa %xmm7,%xmm4
   460dd:	movdqa %xmm6,%xmm0
   460e1:	pmaddwd 0x25cf7(%rip),%xmm7        # 6bde0 <PW_F130_F054>
   460e9:	pmaddwd 0x25cef(%rip),%xmm6        # 6bde0 <PW_F130_F054>
   460f1:	pmaddwd 0x25cf7(%rip),%xmm4        # 6bdf0 <PW_F054_MF130>
   460f9:	pmaddwd 0x25cef(%rip),%xmm0        # 6bdf0 <PW_F054_MF130>
   46101:	paddd  0x25d57(%rip),%xmm7        # 6be60 <PD_DESCALE_P1>
   46109:	paddd  0x25d4f(%rip),%xmm6        # 6be60 <PD_DESCALE_P1>
   46111:	psrad  $0xb,%xmm7
   46116:	psrad  $0xb,%xmm6
   4611b:	paddd  0x25d3d(%rip),%xmm4        # 6be60 <PD_DESCALE_P1>
   46123:	paddd  0x25d35(%rip),%xmm0        # 6be60 <PD_DESCALE_P1>
   4612b:	psrad  $0xb,%xmm4
   46130:	psrad  $0xb,%xmm0
   46135:	packssdw %xmm6,%xmm7
   46139:	packssdw %xmm0,%xmm4
   4613d:	movdqa %xmm7,-0x20(%rbp)
   46142:	movdqa %xmm4,-0x10(%rbp)
   46147:	movdqa -0x60(%rbp),%xmm3
   4614c:	movdqa -0x50(%rbp),%xmm1
   46151:	movdqa %xmm2,%xmm6
   46155:	movdqa %xmm5,%xmm0
   46159:	paddw  %xmm3,%xmm6
   4615d:	paddw  %xmm1,%xmm0
   46161:	movdqa %xmm6,%xmm7
   46165:	movdqa %xmm6,%xmm4
   46169:	punpcklwd %xmm0,%xmm7
   4616d:	punpckhwd %xmm0,%xmm4
   46171:	movdqa %xmm7,%xmm6
   46175:	movdqa %xmm4,%xmm0
   46179:	pmaddwd 0x25c7f(%rip),%xmm7        # 6be00 <PW_MF078_F117>
   46181:	pmaddwd 0x25c77(%rip),%xmm4        # 6be00 <PW_MF078_F117>
   46189:	pmaddwd 0x25c7f(%rip),%xmm6        # 6be10 <PW_F117_F078>
   46191:	pmaddwd 0x25c77(%rip),%xmm0        # 6be10 <PW_F117_F078>
   46199:	movdqa %xmm7,-0x60(%rbp)
   4619e:	movdqa %xmm4,-0x50(%rbp)
   461a3:	movdqa %xmm2,%xmm7
   461a7:	movdqa %xmm2,%xmm4
   461ab:	punpcklwd %xmm1,%xmm7
   461af:	punpckhwd %xmm1,%xmm4
   461b3:	movdqa %xmm7,%xmm2
   461b7:	movdqa %xmm4,%xmm1
   461bb:	pmaddwd 0x25c5d(%rip),%xmm7        # 6be20 <PW_MF060_MF089>
   461c3:	pmaddwd 0x25c55(%rip),%xmm4        # 6be20 <PW_MF060_MF089>
   461cb:	pmaddwd 0x25c5d(%rip),%xmm2        # 6be30 <PW_MF089_F060>
   461d3:	pmaddwd 0x25c55(%rip),%xmm1        # 6be30 <PW_MF089_F060>
   461db:	paddd  -0x60(%rbp),%xmm7
   461e0:	paddd  -0x50(%rbp),%xmm4
   461e5:	paddd  %xmm6,%xmm2
   461e9:	paddd  %xmm0,%xmm1
   461ed:	paddd  0x25c6b(%rip),%xmm7        # 6be60 <PD_DESCALE_P1>
   461f5:	paddd  0x25c63(%rip),%xmm4        # 6be60 <PD_DESCALE_P1>
   461fd:	psrad  $0xb,%xmm7
   46202:	psrad  $0xb,%xmm4
   46207:	paddd  0x25c51(%rip),%xmm2        # 6be60 <PD_DESCALE_P1>
   4620f:	paddd  0x25c49(%rip),%xmm1        # 6be60 <PD_DESCALE_P1>
   46217:	psrad  $0xb,%xmm2
   4621c:	psrad  $0xb,%xmm1
   46221:	packssdw %xmm4,%xmm7
   46225:	packssdw %xmm1,%xmm2
   46229:	movdqa %xmm5,%xmm4
   4622d:	movdqa %xmm5,%xmm1
   46231:	punpcklwd %xmm3,%xmm4
   46235:	punpckhwd %xmm3,%xmm1
   46239:	movdqa %xmm4,%xmm5
   4623d:	movdqa %xmm1,%xmm3
   46241:	pmaddwd 0x25bf7(%rip),%xmm4        # 6be40 <PW_MF050_MF256>
   46249:	pmaddwd 0x25bef(%rip),%xmm1        # 6be40 <PW_MF050_MF256>
   46251:	pmaddwd 0x25bf7(%rip),%xmm5        # 6be50 <PW_MF256_F050>
   46259:	pmaddwd 0x25bef(%rip),%xmm3        # 6be50 <PW_MF256_F050>
   46261:	paddd  %xmm6,%xmm4
   46265:	paddd  %xmm0,%xmm1
   46269:	paddd  -0x60(%rbp),%xmm5
   4626e:	paddd  -0x50(%rbp),%xmm3
   46273:	paddd  0x25be5(%rip),%xmm4        # 6be60 <PD_DESCALE_P1>
   4627b:	paddd  0x25bdd(%rip),%xmm1        # 6be60 <PD_DESCALE_P1>
   46283:	psrad  $0xb,%xmm4
   46288:	psrad  $0xb,%xmm1
   4628d:	paddd  0x25bcb(%rip),%xmm5        # 6be60 <PD_DESCALE_P1>
   46295:	paddd  0x25bc3(%rip),%xmm3        # 6be60 <PD_DESCALE_P1>
   4629d:	psrad  $0xb,%xmm5
   462a2:	psrad  $0xb,%xmm3
   462a7:	packssdw %xmm1,%xmm4
   462ab:	packssdw %xmm3,%xmm5
   462af:	movdqa -0x40(%rbp),%xmm6
   462b4:	movdqa -0x20(%rbp),%xmm0
   462b9:	movdqa %xmm6,%xmm1
   462bd:	punpcklwd %xmm2,%xmm6
   462c1:	punpckhwd %xmm2,%xmm1
   462c5:	movdqa %xmm0,%xmm3
   462c9:	punpcklwd %xmm5,%xmm0
   462cd:	punpckhwd %xmm5,%xmm3
   462d1:	movdqa -0x30(%rbp),%xmm2
   462d6:	movdqa -0x10(%rbp),%xmm5
   462db:	movdqa %xmm0,-0x60(%rbp)
   462e0:	movdqa %xmm3,-0x50(%rbp)
   462e5:	movdqa %xmm2,%xmm0
   462e9:	punpcklwd %xmm4,%xmm2
   462ed:	punpckhwd %xmm4,%xmm0
   462f1:	movdqa %xmm5,%xmm3
   462f5:	punpcklwd %xmm7,%xmm5
   462f9:	punpckhwd %xmm7,%xmm3
   462fd:	movdqa %xmm2,%xmm4
   46301:	punpckldq %xmm5,%xmm2
   46305:	punpckhdq %xmm5,%xmm4
   46309:	movdqa %xmm0,%xmm7
   4630d:	punpckldq %xmm3,%xmm0
   46311:	punpckhdq %xmm3,%xmm7
   46315:	movdqa -0x60(%rbp),%xmm5
   4631a:	movdqa -0x50(%rbp),%xmm3
   4631f:	movdqa %xmm4,-0x40(%rbp)
   46324:	movdqa %xmm0,-0x30(%rbp)
   46329:	movdqa %xmm6,%xmm4
   4632d:	punpckldq %xmm5,%xmm6
   46331:	punpckhdq %xmm5,%xmm4
   46335:	movdqa %xmm1,%xmm0
   46339:	punpckldq %xmm3,%xmm1
   4633d:	punpckhdq %xmm3,%xmm0
   46341:	movdqa %xmm6,%xmm5
   46345:	punpcklqdq %xmm2,%xmm6
   46349:	punpckhqdq %xmm2,%xmm5
   4634d:	movdqa %xmm0,%xmm3
   46351:	punpcklqdq %xmm7,%xmm0
   46355:	punpckhqdq %xmm7,%xmm3
   46359:	movdqa %xmm5,%xmm2
   4635d:	movdqa %xmm6,%xmm7
   46361:	psubw  %xmm0,%xmm5
   46365:	psubw  %xmm3,%xmm6
   46369:	paddw  %xmm0,%xmm2
   4636d:	paddw  %xmm3,%xmm7
   46371:	movdqa -0x40(%rbp),%xmm0
   46376:	movdqa -0x30(%rbp),%xmm3
   4637b:	movdqa %xmm5,-0x60(%rbp)
   46380:	movdqa %xmm6,-0x50(%rbp)
   46385:	movdqa %xmm4,%xmm5
   46389:	punpcklqdq %xmm0,%xmm4
   4638d:	punpckhqdq %xmm0,%xmm5
   46391:	movdqa %xmm1,%xmm6
   46395:	punpcklqdq %xmm3,%xmm1
   46399:	punpckhqdq %xmm3,%xmm6
   4639d:	movdqa %xmm5,%xmm0
   463a1:	movdqa %xmm4,%xmm3
   463a5:	paddw  %xmm1,%xmm5
   463a9:	paddw  %xmm6,%xmm4
   463ad:	psubw  %xmm1,%xmm0
   463b1:	psubw  %xmm6,%xmm3
   463b5:	movdqa %xmm7,%xmm1
   463b9:	movdqa %xmm2,%xmm6
   463bd:	paddw  %xmm5,%xmm7
   463c1:	paddw  %xmm4,%xmm2
   463c5:	psubw  %xmm5,%xmm1
   463c9:	psubw  %xmm4,%xmm6
   463cd:	movdqa %xmm7,%xmm5
   463d1:	paddw  %xmm2,%xmm7
   463d5:	psubw  %xmm2,%xmm5
   463d9:	paddw  0x25a9f(%rip),%xmm7        # 6be80 <PW_DESCALE_P2X>
   463e1:	paddw  0x25a97(%rip),%xmm5        # 6be80 <PW_DESCALE_P2X>
   463e9:	psraw  $0x2,%xmm7
   463ee:	psraw  $0x2,%xmm5
   463f3:	movdqa %xmm7,(%rdx)
   463f7:	movdqa %xmm5,0x40(%rdx)
   463fc:	movdqa %xmm1,%xmm4
   46400:	movdqa %xmm1,%xmm2
   46404:	punpcklwd %xmm6,%xmm4
   46408:	punpckhwd %xmm6,%xmm2
   4640c:	movdqa %xmm4,%xmm1
   46410:	movdqa %xmm2,%xmm6
   46414:	pmaddwd 0x259c4(%rip),%xmm4        # 6bde0 <PW_F130_F054>
   4641c:	pmaddwd 0x259bc(%rip),%xmm2        # 6bde0 <PW_F130_F054>
   46424:	pmaddwd 0x259c4(%rip),%xmm1        # 6bdf0 <PW_F054_MF130>
   4642c:	pmaddwd 0x259bc(%rip),%xmm6        # 6bdf0 <PW_F054_MF130>
   46434:	paddd  0x25a34(%rip),%xmm4        # 6be70 <PD_DESCALE_P2>
   4643c:	paddd  0x25a2c(%rip),%xmm2        # 6be70 <PD_DESCALE_P2>
   46444:	psrad  $0xf,%xmm4
   46449:	psrad  $0xf,%xmm2
   4644e:	paddd  0x25a1a(%rip),%xmm1        # 6be70 <PD_DESCALE_P2>
   46456:	paddd  0x25a12(%rip),%xmm6        # 6be70 <PD_DESCALE_P2>
   4645e:	psrad  $0xf,%xmm1
   46463:	psrad  $0xf,%xmm6
   46468:	packssdw %xmm2,%xmm4
   4646c:	packssdw %xmm6,%xmm1
   46470:	movdqa %xmm4,0x20(%rdx)
   46475:	movdqa %xmm1,0x60(%rdx)
   4647a:	movdqa -0x60(%rbp),%xmm7
   4647f:	movdqa -0x50(%rbp),%xmm5
   46484:	movdqa %xmm0,%xmm2
   46488:	movdqa %xmm3,%xmm6
   4648c:	paddw  %xmm7,%xmm2
   46490:	paddw  %xmm5,%xmm6
   46494:	movdqa %xmm2,%xmm4
   46498:	movdqa %xmm2,%xmm1
   4649c:	punpcklwd %xmm6,%xmm4
   464a0:	punpckhwd %xmm6,%xmm1
   464a4:	movdqa %xmm4,%xmm2
   464a8:	movdqa %xmm1,%xmm6
   464ac:	pmaddwd 0x2594c(%rip),%xmm4        # 6be00 <PW_MF078_F117>
   464b4:	pmaddwd 0x25944(%rip),%xmm1        # 6be00 <PW_MF078_F117>
   464bc:	pmaddwd 0x2594c(%rip),%xmm2        # 6be10 <PW_F117_F078>
   464c4:	pmaddwd 0x25944(%rip),%xmm6        # 6be10 <PW_F117_F078>
   464cc:	movdqa %xmm4,-0x60(%rbp)
   464d1:	movdqa %xmm1,-0x50(%rbp)
   464d6:	movdqa %xmm0,%xmm4
   464da:	movdqa %xmm0,%xmm1
   464de:	punpcklwd %xmm5,%xmm4
   464e2:	punpckhwd %xmm5,%xmm1
   464e6:	movdqa %xmm4,%xmm0
   464ea:	movdqa %xmm1,%xmm5
   464ee:	pmaddwd 0x2592a(%rip),%xmm4        # 6be20 <PW_MF060_MF089>
   464f6:	pmaddwd 0x25922(%rip),%xmm1        # 6be20 <PW_MF060_MF089>
   464fe:	pmaddwd 0x2592a(%rip),%xmm0        # 6be30 <PW_MF089_F060>
   46506:	pmaddwd 0x25922(%rip),%xmm5        # 6be30 <PW_MF089_F060>
   4650e:	paddd  -0x60(%rbp),%xmm4
   46513:	paddd  -0x50(%rbp),%xmm1
   46518:	paddd  %xmm2,%xmm0
   4651c:	paddd  %xmm6,%xmm5
   46520:	paddd  0x25948(%rip),%xmm4        # 6be70 <PD_DESCALE_P2>
   46528:	paddd  0x25940(%rip),%xmm1        # 6be70 <PD_DESCALE_P2>
   46530:	psrad  $0xf,%xmm4
   46535:	psrad  $0xf,%xmm1
   4653a:	paddd  0x2592e(%rip),%xmm0        # 6be70 <PD_DESCALE_P2>
   46542:	paddd  0x25926(%rip),%xmm5        # 6be70 <PD_DESCALE_P2>
   4654a:	psrad  $0xf,%xmm0
   4654f:	psrad  $0xf,%xmm5
   46554:	packssdw %xmm1,%xmm4
   46558:	packssdw %xmm5,%xmm0
   4655c:	movdqa %xmm4,0x70(%rdx)
   46561:	movdqa %xmm0,0x10(%rdx)
   46566:	movdqa %xmm3,%xmm1
   4656a:	movdqa %xmm3,%xmm5
   4656e:	punpcklwd %xmm7,%xmm1
   46572:	punpckhwd %xmm7,%xmm5
   46576:	movdqa %xmm1,%xmm3
   4657a:	movdqa %xmm5,%xmm7
   4657e:	pmaddwd 0x258ba(%rip),%xmm1        # 6be40 <PW_MF050_MF256>
   46586:	pmaddwd 0x258b2(%rip),%xmm5        # 6be40 <PW_MF050_MF256>
   4658e:	pmaddwd 0x258ba(%rip),%xmm3        # 6be50 <PW_MF256_F050>
   46596:	pmaddwd 0x258b2(%rip),%xmm7        # 6be50 <PW_MF256_F050>
   4659e:	paddd  %xmm2,%xmm1
   465a2:	paddd  %xmm6,%xmm5
   465a6:	paddd  -0x60(%rbp),%xmm3
   465ab:	paddd  -0x50(%rbp),%xmm7
   465b0:	paddd  0x258b8(%rip),%xmm1        # 6be70 <PD_DESCALE_P2>
   465b8:	paddd  0x258b0(%rip),%xmm5        # 6be70 <PD_DESCALE_P2>
   465c0:	psrad  $0xf,%xmm1
   465c5:	psrad  $0xf,%xmm5
   465ca:	paddd  0x2589e(%rip),%xmm3        # 6be70 <PD_DESCALE_P2>
   465d2:	paddd  0x25896(%rip),%xmm7        # 6be70 <PD_DESCALE_P2>
   465da:	psrad  $0xf,%xmm3
   465df:	psrad  $0xf,%xmm7
   465e4:	packssdw %xmm5,%xmm1
   465e8:	packssdw %xmm7,%xmm3
   465ec:	movdqa %xmm1,0x50(%rdx)
   465f1:	movdqa %xmm3,0x30(%rdx)
   465f6:	pop    %r15
   465f8:	pop    %r14
   465fa:	pop    %r13
   465fc:	pop    %r12
   465fe:	pop    %r11
   46600:	pop    %r10
   46602:	mov    %rbp,%rsp
   46605:	pop    %rsp
   46606:	pop    %rbp
   46607:	retq   
   46608:	nop
   46609:	nop
   4660a:	nop
   4660b:	nop
   4660c:	nop
   4660d:	nop
   4660e:	nop
   4660f:	nop

0000000000046610 <jsimd_idct_float_sse2>:
   46610:	push   %rbp
   46611:	mov    %rsp,%rax
   46614:	sub    $0x4,%rsp
   46618:	and    $0xfffffffffffffff0,%rsp
   4661c:	mov    %rax,(%rsp)
   46620:	mov    %rsp,%rbp
   46623:	lea    -0x120(%rbp),%rsp
   4662a:	push   %r10
   4662c:	push   %r11
   4662e:	push   %r12
   46630:	push   %r13
   46632:	push   %r14
   46634:	push   %r15
   46636:	mov    %rdi,%r10
   46639:	mov    %rsi,%r11
   4663c:	mov    %rdx,%r12
   4663f:	mov    %rcx,%r13
   46642:	mov    %r8,%r14
   46645:	mov    %r9,%r15
   46648:	push   %rbx
   46649:	mov    %r10,%rdx
   4664c:	mov    %r11,%rsi
   4664f:	lea    -0x120(%rbp),%rdi
   46656:	mov    $0x2,%ecx

000000000004665b <jsimd_idct_float_sse2.columnloop>:
   4665b:	mov    0x10(%rsi),%eax
   4665e:	or     0x20(%rsi),%eax
   46661:	jne    466ff <jsimd_idct_float_sse2.columnDCT>
   46667:	movq   0x10(%rsi),%xmm1
   4666c:	movq   0x20(%rsi),%xmm2
   46671:	movq   0x30(%rsi),%xmm3
   46676:	movq   0x40(%rsi),%xmm4
   4667b:	movq   0x50(%rsi),%xmm5
   46680:	movq   0x60(%rsi),%xmm6
   46685:	movq   0x70(%rsi),%xmm7
   4668a:	por    %xmm2,%xmm1
   4668e:	por    %xmm4,%xmm3
   46692:	por    %xmm6,%xmm5
   46696:	por    %xmm3,%xmm1
   4669a:	por    %xmm7,%xmm5
   4669e:	por    %xmm5,%xmm1
   466a2:	packsswb %xmm1,%xmm1
   466a6:	movd   %xmm1,%eax
   466aa:	test   %rax,%rax
   466ad:	jne    466ff <jsimd_idct_float_sse2.columnDCT>
   466af:	movq   (%rsi),%xmm0
   466b3:	punpcklwd %xmm0,%xmm0
   466b7:	psrad  $0x10,%xmm0
   466bc:	cvtdq2ps %xmm0,%xmm0
   466bf:	mulps  (%rdx),%xmm0
   466c2:	movaps %xmm0,%xmm1
   466c5:	movaps %xmm0,%xmm2
   466c8:	movaps %xmm0,%xmm3
   466cb:	shufps $0x0,%xmm0,%xmm0
   466cf:	shufps $0x55,%xmm1,%xmm1
   466d3:	shufps $0xaa,%xmm2,%xmm2
   466d7:	shufps $0xff,%xmm3,%xmm3
   466db:	movaps %xmm0,(%rdi)
   466de:	movaps %xmm0,0x10(%rdi)
   466e2:	movaps %xmm1,0x20(%rdi)
   466e6:	movaps %xmm1,0x30(%rdi)
   466ea:	movaps %xmm2,0x40(%rdi)
   466ee:	movaps %xmm2,0x50(%rdi)
   466f2:	movaps %xmm3,0x60(%rdi)
   466f6:	movaps %xmm3,0x70(%rdi)
   466fa:	jmpq   468de <jsimd_idct_float_sse2.nextcolumn>

00000000000466ff <jsimd_idct_float_sse2.columnDCT>:
   466ff:	movq   (%rsi),%xmm0
   46703:	movq   0x20(%rsi),%xmm1
   46708:	movq   0x40(%rsi),%xmm2
   4670d:	movq   0x60(%rsi),%xmm3
   46712:	punpcklwd %xmm0,%xmm0
   46716:	punpcklwd %xmm1,%xmm1
   4671a:	psrad  $0x10,%xmm0
   4671f:	psrad  $0x10,%xmm1
   46724:	cvtdq2ps %xmm0,%xmm0
   46727:	cvtdq2ps %xmm1,%xmm1
   4672a:	punpcklwd %xmm2,%xmm2
   4672e:	punpcklwd %xmm3,%xmm3
   46732:	psrad  $0x10,%xmm2
   46737:	psrad  $0x10,%xmm3
   4673c:	cvtdq2ps %xmm2,%xmm2
   4673f:	cvtdq2ps %xmm3,%xmm3
   46742:	mulps  (%rdx),%xmm0
   46745:	mulps  0x40(%rdx),%xmm1
   46749:	mulps  0x80(%rdx),%xmm2
   46750:	mulps  0xc0(%rdx),%xmm3
   46757:	movaps %xmm0,%xmm4
   4675a:	movaps %xmm1,%xmm5
   4675d:	subps  %xmm2,%xmm0
   46760:	subps  %xmm3,%xmm1
   46763:	addps  %xmm2,%xmm4
   46766:	addps  %xmm3,%xmm5
   46769:	mulps  0x25720(%rip),%xmm1        # 6be90 <PD_1_414>
   46770:	subps  %xmm5,%xmm1
   46773:	movaps %xmm4,%xmm6
   46776:	movaps %xmm0,%xmm7
   46779:	subps  %xmm5,%xmm4
   4677c:	subps  %xmm1,%xmm0
   4677f:	addps  %xmm5,%xmm6
   46782:	addps  %xmm1,%xmm7
   46785:	movaps %xmm4,-0x10(%rbp)
   46789:	movaps %xmm0,-0x20(%rbp)
   4678d:	movq   0x10(%rsi),%xmm2
   46792:	movq   0x30(%rsi),%xmm3
   46797:	movq   0x50(%rsi),%xmm5
   4679c:	movq   0x70(%rsi),%xmm1
   467a1:	punpcklwd %xmm2,%xmm2
   467a5:	punpcklwd %xmm3,%xmm3
   467a9:	psrad  $0x10,%xmm2
   467ae:	psrad  $0x10,%xmm3
   467b3:	cvtdq2ps %xmm2,%xmm2
   467b6:	cvtdq2ps %xmm3,%xmm3
   467b9:	punpcklwd %xmm5,%xmm5
   467bd:	punpcklwd %xmm1,%xmm1
   467c1:	psrad  $0x10,%xmm5
   467c6:	psrad  $0x10,%xmm1
   467cb:	cvtdq2ps %xmm5,%xmm5
   467ce:	cvtdq2ps %xmm1,%xmm1
   467d1:	mulps  0x20(%rdx),%xmm2
   467d5:	mulps  0x60(%rdx),%xmm3
   467d9:	mulps  0xa0(%rdx),%xmm5
   467e0:	mulps  0xe0(%rdx),%xmm1
   467e7:	movaps %xmm2,%xmm4
   467ea:	movaps %xmm5,%xmm0
   467ed:	addps  %xmm1,%xmm2
   467f0:	addps  %xmm3,%xmm5
   467f3:	subps  %xmm1,%xmm4
   467f6:	subps  %xmm3,%xmm0
   467f9:	movaps %xmm2,%xmm1
   467fc:	subps  %xmm5,%xmm2
   467ff:	addps  %xmm5,%xmm1
   46802:	mulps  0x25687(%rip),%xmm2        # 6be90 <PD_1_414>
   46809:	movaps %xmm0,%xmm3
   4680c:	addps  %xmm4,%xmm0
   4680f:	mulps  0x2568a(%rip),%xmm0        # 6bea0 <PD_1_847>
   46816:	mulps  0x256a3(%rip),%xmm3        # 6bec0 <PD_M2_613>
   4681d:	mulps  0x2568c(%rip),%xmm4        # 6beb0 <PD_1_082>
   46824:	addps  %xmm0,%xmm3
   46827:	subps  %xmm0,%xmm4
   4682a:	subps  %xmm1,%xmm3
   4682d:	movaps %xmm6,%xmm5
   46830:	movaps %xmm7,%xmm0
   46833:	addps  %xmm1,%xmm6
   46836:	addps  %xmm3,%xmm7
   46839:	subps  %xmm1,%xmm5
   4683c:	subps  %xmm3,%xmm0
   4683f:	subps  %xmm3,%xmm2
   46842:	movaps %xmm6,%xmm1
   46845:	unpcklps %xmm7,%xmm6
   46848:	unpckhps %xmm7,%xmm1
   4684b:	movaps %xmm0,%xmm3
   4684e:	unpcklps %xmm5,%xmm0
   46851:	unpckhps %xmm5,%xmm3
   46854:	movaps -0x20(%rbp),%xmm7
   46858:	movaps -0x10(%rbp),%xmm5
   4685c:	movaps %xmm0,-0x20(%rbp)
   46860:	movaps %xmm3,-0x10(%rbp)
   46864:	addps  %xmm2,%xmm4
   46867:	movaps %xmm7,%xmm0
   4686a:	movaps %xmm5,%xmm3
   4686d:	addps  %xmm2,%xmm7
   46870:	addps  %xmm4,%xmm5
   46873:	subps  %xmm2,%xmm0
   46876:	subps  %xmm4,%xmm3
   46879:	movaps %xmm7,%xmm2
   4687c:	unpcklps %xmm3,%xmm7
   4687f:	unpckhps %xmm3,%xmm2
   46882:	movaps %xmm5,%xmm4
   46885:	unpcklps %xmm0,%xmm5
   46888:	unpckhps %xmm0,%xmm4
   4688b:	movaps %xmm6,%xmm3
   4688e:	shufps $0x44,%xmm7,%xmm6
   46892:	shufps $0xee,%xmm7,%xmm3
   46896:	movaps %xmm1,%xmm0
   46899:	shufps $0x44,%xmm2,%xmm1
   4689d:	shufps $0xee,%xmm2,%xmm0
   468a1:	movaps -0x20(%rbp),%xmm7
   468a5:	movaps -0x10(%rbp),%xmm2
   468a9:	movaps %xmm6,(%rdi)
   468ac:	movaps %xmm3,0x20(%rdi)
   468b0:	movaps %xmm1,0x40(%rdi)
   468b4:	movaps %xmm0,0x60(%rdi)
   468b8:	movaps %xmm5,%xmm6
   468bb:	shufps $0x44,%xmm7,%xmm5
   468bf:	shufps $0xee,%xmm7,%xmm6
   468c3:	movaps %xmm4,%xmm3
   468c6:	shufps $0x44,%xmm2,%xmm4
   468ca:	shufps $0xee,%xmm2,%xmm3
   468ce:	movaps %xmm5,0x10(%rdi)
   468d2:	movaps %xmm6,0x30(%rdi)
   468d6:	movaps %xmm4,0x50(%rdi)
   468da:	movaps %xmm3,0x70(%rdi)

00000000000468de <jsimd_idct_float_sse2.nextcolumn>:
   468de:	add    $0x8,%rsi
   468e2:	add    $0x10,%rdx
   468e6:	add    $0x80,%rdi
   468ed:	dec    %rcx
   468f0:	jne    4665b <jsimd_idct_float_sse2.columnloop>
   468f6:	prefetchnta 0x70(%rsi)
   468fa:	prefetchnta 0x90(%rsi)
   46901:	prefetchnta 0xb0(%rsi)
   46908:	prefetchnta 0xd0(%rsi)
   4690f:	mov    0x0(%rbp),%rax
   46913:	lea    -0x120(%rbp),%rsi
   4691a:	mov    %r12,%rdi
   4691d:	mov    %r13d,%eax
   46920:	mov    $0x2,%ecx

0000000000046925 <jsimd_idct_float_sse2.rowloop>:
   46925:	movaps (%rsi),%xmm0
   46928:	movaps 0x40(%rsi),%xmm1
   4692c:	movaps 0x80(%rsi),%xmm2
   46933:	movaps 0xc0(%rsi),%xmm3
   4693a:	movaps %xmm0,%xmm4
   4693d:	movaps %xmm1,%xmm5
   46940:	subps  %xmm2,%xmm0
   46943:	subps  %xmm3,%xmm1
   46946:	addps  %xmm2,%xmm4
   46949:	addps  %xmm3,%xmm5
   4694c:	mulps  0x2553d(%rip),%xmm1        # 6be90 <PD_1_414>
   46953:	subps  %xmm5,%xmm1
   46956:	movaps %xmm4,%xmm6
   46959:	movaps %xmm0,%xmm7
   4695c:	subps  %xmm5,%xmm4
   4695f:	subps  %xmm1,%xmm0
   46962:	addps  %xmm5,%xmm6
   46965:	addps  %xmm1,%xmm7
   46968:	movaps %xmm4,-0x10(%rbp)
   4696c:	movaps %xmm0,-0x20(%rbp)
   46970:	movaps 0x20(%rsi),%xmm2
   46974:	movaps 0x60(%rsi),%xmm3
   46978:	movaps 0xa0(%rsi),%xmm5
   4697f:	movaps 0xe0(%rsi),%xmm1
   46986:	movaps %xmm2,%xmm4
   46989:	movaps %xmm5,%xmm0
   4698c:	addps  %xmm1,%xmm2
   4698f:	addps  %xmm3,%xmm5
   46992:	subps  %xmm1,%xmm4
   46995:	subps  %xmm3,%xmm0
   46998:	movaps %xmm2,%xmm1
   4699b:	subps  %xmm5,%xmm2
   4699e:	addps  %xmm5,%xmm1
   469a1:	mulps  0x254e8(%rip),%xmm2        # 6be90 <PD_1_414>
   469a8:	movaps %xmm0,%xmm3
   469ab:	addps  %xmm4,%xmm0
   469ae:	mulps  0x254eb(%rip),%xmm0        # 6bea0 <PD_1_847>
   469b5:	mulps  0x25504(%rip),%xmm3        # 6bec0 <PD_M2_613>
   469bc:	mulps  0x254ed(%rip),%xmm4        # 6beb0 <PD_1_082>
   469c3:	addps  %xmm0,%xmm3
   469c6:	subps  %xmm0,%xmm4
   469c9:	subps  %xmm1,%xmm3
   469cc:	movaps %xmm6,%xmm5
   469cf:	movaps %xmm7,%xmm0
   469d2:	addps  %xmm1,%xmm6
   469d5:	addps  %xmm3,%xmm7
   469d8:	subps  %xmm1,%xmm5
   469db:	subps  %xmm3,%xmm0
   469de:	subps  %xmm3,%xmm2
   469e1:	movaps 0x254e8(%rip),%xmm1        # 6bed0 <PD_RNDINT_MAGIC>
   469e8:	pcmpeqd %xmm3,%xmm3
   469ec:	psrld  $0x10,%xmm3
   469f1:	addps  %xmm1,%xmm6
   469f4:	addps  %xmm1,%xmm7
   469f7:	addps  %xmm1,%xmm0
   469fa:	addps  %xmm1,%xmm5
   469fd:	pand   %xmm3,%xmm6
   46a01:	pslld  $0x10,%xmm7
   46a06:	pand   %xmm3,%xmm0
   46a0a:	pslld  $0x10,%xmm5
   46a0f:	por    %xmm7,%xmm6
   46a13:	por    %xmm5,%xmm0
   46a17:	movaps -0x20(%rbp),%xmm1
   46a1b:	movaps -0x10(%rbp),%xmm3
   46a1f:	addps  %xmm2,%xmm4
   46a22:	movaps %xmm1,%xmm7
   46a25:	movaps %xmm3,%xmm5
   46a28:	addps  %xmm2,%xmm1
   46a2b:	addps  %xmm4,%xmm3
   46a2e:	subps  %xmm2,%xmm7
   46a31:	subps  %xmm4,%xmm5
   46a34:	movaps 0x25495(%rip),%xmm2        # 6bed0 <PD_RNDINT_MAGIC>
   46a3b:	pcmpeqd %xmm4,%xmm4
   46a3f:	psrld  $0x10,%xmm4
   46a44:	addps  %xmm2,%xmm3
   46a47:	addps  %xmm2,%xmm7
   46a4a:	addps  %xmm2,%xmm1
   46a4d:	addps  %xmm2,%xmm5
   46a50:	pand   %xmm4,%xmm3
   46a54:	pslld  $0x10,%xmm7
   46a59:	pand   %xmm4,%xmm1
   46a5d:	pslld  $0x10,%xmm5
   46a62:	por    %xmm7,%xmm3
   46a66:	por    %xmm5,%xmm1
   46a6a:	movdqa 0x2546e(%rip),%xmm2        # 6bee0 <PB_CENTERJSAMP>
   46a72:	packsswb %xmm3,%xmm6
   46a76:	packsswb %xmm0,%xmm1
   46a7a:	paddb  %xmm2,%xmm6
   46a7e:	paddb  %xmm2,%xmm1
   46a82:	movdqa %xmm6,%xmm4
   46a86:	punpcklwd %xmm1,%xmm6
   46a8a:	punpckhwd %xmm1,%xmm4
   46a8e:	movdqa %xmm6,%xmm7
   46a92:	punpckldq %xmm4,%xmm6
   46a96:	punpckhdq %xmm4,%xmm7
   46a9a:	pshufd $0x4e,%xmm6,%xmm5
   46a9f:	pshufd $0x4e,%xmm7,%xmm3
   46aa4:	mov    (%rdi),%rdx
   46aa7:	mov    0x10(%rdi),%rbx
   46aab:	movq   %xmm6,(%rdx,%rax,1)
   46ab0:	movq   %xmm7,(%rbx,%rax,1)
   46ab5:	mov    0x8(%rdi),%rdx
   46ab9:	mov    0x18(%rdi),%rbx
   46abd:	movq   %xmm5,(%rdx,%rax,1)
   46ac2:	movq   %xmm3,(%rbx,%rax,1)
   46ac7:	add    $0x10,%rsi
   46acb:	add    $0x20,%rdi
   46acf:	dec    %rcx
   46ad2:	jne    46925 <jsimd_idct_float_sse2.rowloop>
   46ad8:	pop    %rbx
   46ad9:	pop    %r15
   46adb:	pop    %r14
   46add:	pop    %r13
   46adf:	pop    %r12
   46ae1:	pop    %r11
   46ae3:	pop    %r10
   46ae5:	mov    %rbp,%rsp
   46ae8:	pop    %rsp
   46ae9:	pop    %rbp
   46aea:	retq   
   46aeb:	nop
   46aec:	nop
   46aed:	nop
   46aee:	nop
   46aef:	nop

0000000000046af0 <jsimd_idct_ifast_sse2>:
   46af0:	push   %rbp
   46af1:	mov    %rsp,%rax
   46af4:	sub    $0x4,%rsp
   46af8:	and    $0xfffffffffffffff0,%rsp
   46afc:	mov    %rax,(%rsp)
   46b00:	mov    %rsp,%rbp
   46b03:	lea    -0x20(%rbp),%rsp
   46b07:	push   %r10
   46b09:	push   %r11
   46b0b:	push   %r12
   46b0d:	push   %r13
   46b0f:	push   %r14
   46b11:	push   %r15
   46b13:	mov    %rdi,%r10
   46b16:	mov    %rsi,%r11
   46b19:	mov    %rdx,%r12
   46b1c:	mov    %rcx,%r13
   46b1f:	mov    %r8,%r14
   46b22:	mov    %r9,%r15
   46b25:	mov    %r10,%rdx
   46b28:	mov    %r11,%rsi
   46b2b:	mov    0x10(%rsi),%eax
   46b2e:	or     0x20(%rsi),%eax
   46b31:	jne    46bba <jsimd_idct_ifast_sse2.columnDCT>
   46b37:	movdqa 0x10(%rsi),%xmm0
   46b3c:	movdqa 0x20(%rsi),%xmm1
   46b41:	por    0x30(%rsi),%xmm0
   46b46:	por    0x40(%rsi),%xmm1
   46b4b:	por    0x50(%rsi),%xmm0
   46b50:	por    0x60(%rsi),%xmm1
   46b55:	por    0x70(%rsi),%xmm0
   46b5a:	por    %xmm0,%xmm1
   46b5e:	packsswb %xmm1,%xmm1
   46b62:	packsswb %xmm1,%xmm1
   46b66:	movd   %xmm1,%eax
   46b6a:	test   %rax,%rax
   46b6d:	jne    46bba <jsimd_idct_ifast_sse2.columnDCT>
   46b6f:	movdqa (%rsi),%xmm0
   46b73:	pmullw (%rdx),%xmm0
   46b77:	movdqa %xmm0,%xmm7
   46b7b:	punpcklwd %xmm0,%xmm0
   46b7f:	punpckhwd %xmm7,%xmm7
   46b83:	pshufd $0x0,%xmm0,%xmm6
   46b88:	pshufd $0x55,%xmm0,%xmm2
   46b8d:	pshufd $0xaa,%xmm0,%xmm5
   46b92:	pshufd $0xff,%xmm0,%xmm0
   46b97:	pshufd $0x0,%xmm7,%xmm1
   46b9c:	pshufd $0x55,%xmm7,%xmm4
   46ba1:	pshufd $0xaa,%xmm7,%xmm3
   46ba6:	pshufd $0xff,%xmm7,%xmm7
   46bab:	movdqa %xmm2,-0x20(%rbp)
   46bb0:	movdqa %xmm0,-0x10(%rbp)
   46bb5:	jmpq   46dc6 <jsimd_idct_ifast_sse2.column_end>

0000000000046bba <jsimd_idct_ifast_sse2.columnDCT>:
   46bba:	movdqa (%rsi),%xmm0
   46bbe:	movdqa 0x20(%rsi),%xmm1
   46bc3:	pmullw (%rdx),%xmm0
   46bc7:	pmullw 0x20(%rdx),%xmm1
   46bcc:	movdqa 0x40(%rsi),%xmm2
   46bd1:	movdqa 0x60(%rsi),%xmm3
   46bd6:	pmullw 0x40(%rdx),%xmm2
   46bdb:	pmullw 0x60(%rdx),%xmm3
   46be0:	movdqa %xmm0,%xmm4
   46be4:	movdqa %xmm1,%xmm5
   46be8:	psubw  %xmm2,%xmm0
   46bec:	psubw  %xmm3,%xmm1
   46bf0:	paddw  %xmm2,%xmm4
   46bf4:	paddw  %xmm3,%xmm5
   46bf8:	psllw  $0x2,%xmm1
   46bfd:	pmulhw 0x252eb(%rip),%xmm1        # 6bef0 <PW_F1414>
   46c05:	psubw  %xmm5,%xmm1
   46c09:	movdqa %xmm4,%xmm6
   46c0d:	movdqa %xmm0,%xmm7
   46c11:	psubw  %xmm5,%xmm4
   46c15:	psubw  %xmm1,%xmm0
   46c19:	paddw  %xmm5,%xmm6
   46c1d:	paddw  %xmm1,%xmm7
   46c21:	movdqa %xmm4,-0x10(%rbp)
   46c26:	movdqa %xmm0,-0x20(%rbp)
   46c2b:	movdqa 0x10(%rsi),%xmm2
   46c30:	movdqa 0x30(%rsi),%xmm3
   46c35:	pmullw 0x10(%rdx),%xmm2
   46c3a:	pmullw 0x30(%rdx),%xmm3
   46c3f:	movdqa 0x50(%rsi),%xmm5
   46c44:	movdqa 0x70(%rsi),%xmm1
   46c49:	pmullw 0x50(%rdx),%xmm5
   46c4e:	pmullw 0x70(%rdx),%xmm1
   46c53:	movdqa %xmm2,%xmm4
   46c57:	movdqa %xmm5,%xmm0
   46c5b:	psubw  %xmm1,%xmm2
   46c5f:	psubw  %xmm3,%xmm5
   46c63:	paddw  %xmm1,%xmm4
   46c67:	paddw  %xmm3,%xmm0
   46c6b:	movdqa %xmm5,%xmm1
   46c6f:	psllw  $0x2,%xmm2
   46c74:	psllw  $0x2,%xmm5
   46c79:	movdqa %xmm4,%xmm3
   46c7d:	psubw  %xmm0,%xmm4
   46c81:	paddw  %xmm0,%xmm3
   46c85:	psllw  $0x2,%xmm4
   46c8a:	pmulhw 0x2525e(%rip),%xmm4        # 6bef0 <PW_F1414>
   46c92:	movdqa %xmm5,%xmm0
   46c96:	paddw  %xmm2,%xmm5
   46c9a:	pmulhw 0x2525e(%rip),%xmm5        # 6bf00 <PW_F1847>
   46ca2:	pmulhw 0x25266(%rip),%xmm0        # 6bf10 <PW_MF1613>
   46caa:	pmulhw 0x2526e(%rip),%xmm2        # 6bf20 <PW_F1082>
   46cb2:	psubw  %xmm1,%xmm0
   46cb6:	psubw  %xmm5,%xmm2
   46cba:	paddw  %xmm5,%xmm0
   46cbe:	psubw  %xmm3,%xmm0
   46cc2:	movdqa %xmm6,%xmm1
   46cc6:	movdqa %xmm7,%xmm5
   46cca:	paddw  %xmm3,%xmm6
   46cce:	paddw  %xmm0,%xmm7
   46cd2:	psubw  %xmm3,%xmm1
   46cd6:	psubw  %xmm0,%xmm5
   46cda:	psubw  %xmm0,%xmm4
   46cde:	movdqa %xmm6,%xmm3
   46ce2:	punpcklwd %xmm7,%xmm6
   46ce6:	punpckhwd %xmm7,%xmm3
   46cea:	movdqa %xmm5,%xmm0
   46cee:	punpcklwd %xmm1,%xmm5
   46cf2:	punpckhwd %xmm1,%xmm0
   46cf6:	movdqa -0x20(%rbp),%xmm7
   46cfb:	movdqa -0x10(%rbp),%xmm1
   46d00:	movdqa %xmm5,-0x20(%rbp)
   46d05:	movdqa %xmm0,-0x10(%rbp)
   46d0a:	paddw  %xmm4,%xmm2
   46d0e:	movdqa %xmm7,%xmm5
   46d12:	movdqa %xmm1,%xmm0
   46d16:	paddw  %xmm4,%xmm7
   46d1a:	paddw  %xmm2,%xmm1
   46d1e:	psubw  %xmm4,%xmm5
   46d22:	psubw  %xmm2,%xmm0
   46d26:	movdqa %xmm7,%xmm4
   46d2a:	punpcklwd %xmm0,%xmm7
   46d2e:	punpckhwd %xmm0,%xmm4
   46d32:	movdqa %xmm1,%xmm2
   46d36:	punpcklwd %xmm5,%xmm1
   46d3a:	punpckhwd %xmm5,%xmm2
   46d3e:	movdqa %xmm3,%xmm0
   46d42:	punpckldq %xmm4,%xmm3
   46d46:	punpckhdq %xmm4,%xmm0
   46d4a:	movdqa %xmm6,%xmm5
   46d4e:	punpckldq %xmm7,%xmm6
   46d52:	punpckhdq %xmm7,%xmm5
   46d56:	movdqa -0x20(%rbp),%xmm4
   46d5b:	movdqa -0x10(%rbp),%xmm7
   46d60:	movdqa %xmm3,-0x20(%rbp)
   46d65:	movdqa %xmm0,-0x10(%rbp)
   46d6a:	movdqa %xmm1,%xmm3
   46d6e:	punpckldq %xmm4,%xmm1
   46d72:	punpckhdq %xmm4,%xmm3
   46d76:	movdqa %xmm2,%xmm0
   46d7a:	punpckldq %xmm7,%xmm2
   46d7e:	punpckhdq %xmm7,%xmm0
   46d82:	movdqa %xmm6,%xmm4
   46d86:	punpcklqdq %xmm1,%xmm6
   46d8a:	punpckhqdq %xmm1,%xmm4
   46d8e:	movdqa %xmm5,%xmm7
   46d92:	punpcklqdq %xmm3,%xmm5
   46d96:	punpckhqdq %xmm3,%xmm7
   46d9a:	movdqa -0x20(%rbp),%xmm1
   46d9f:	movdqa -0x10(%rbp),%xmm3
   46da4:	movdqa %xmm4,-0x20(%rbp)
   46da9:	movdqa %xmm7,-0x10(%rbp)
   46dae:	movdqa %xmm1,%xmm4
   46db2:	punpcklqdq %xmm2,%xmm1
   46db6:	punpckhqdq %xmm2,%xmm4
   46dba:	movdqa %xmm3,%xmm7
   46dbe:	punpcklqdq %xmm0,%xmm3
   46dc2:	punpckhqdq %xmm0,%xmm7

0000000000046dc6 <jsimd_idct_ifast_sse2.column_end>:
   46dc6:	prefetchnta 0x80(%rsi)
   46dcd:	prefetchnta 0xa0(%rsi)
   46dd4:	prefetchnta 0xc0(%rsi)
   46ddb:	prefetchnta 0xe0(%rsi)
   46de2:	mov    0x0(%rbp),%rax
   46de6:	mov    %r12,%rdi
   46de9:	mov    %r13d,%eax
   46dec:	movdqa %xmm6,%xmm2
   46df0:	movdqa %xmm5,%xmm0
   46df4:	psubw  %xmm1,%xmm6
   46df8:	psubw  %xmm3,%xmm5
   46dfc:	paddw  %xmm1,%xmm2
   46e00:	paddw  %xmm3,%xmm0
   46e04:	psllw  $0x2,%xmm5
   46e09:	pmulhw 0x250df(%rip),%xmm5        # 6bef0 <PW_F1414>
   46e11:	psubw  %xmm0,%xmm5
   46e15:	movdqa %xmm2,%xmm1
   46e19:	movdqa %xmm6,%xmm3
   46e1d:	psubw  %xmm0,%xmm2
   46e21:	psubw  %xmm5,%xmm6
   46e25:	paddw  %xmm0,%xmm1
   46e29:	paddw  %xmm5,%xmm3
   46e2d:	movdqa -0x20(%rbp),%xmm0
   46e32:	movdqa -0x10(%rbp),%xmm5
   46e37:	movdqa %xmm2,-0x20(%rbp)
   46e3c:	movdqa %xmm6,-0x10(%rbp)
   46e41:	movdqa %xmm0,%xmm2
   46e45:	movdqa %xmm4,%xmm6
   46e49:	psubw  %xmm7,%xmm0
   46e4d:	psubw  %xmm5,%xmm4
   46e51:	paddw  %xmm7,%xmm2
   46e55:	paddw  %xmm5,%xmm6
   46e59:	movdqa %xmm4,%xmm7
   46e5d:	psllw  $0x2,%xmm0
   46e62:	psllw  $0x2,%xmm4
   46e67:	movdqa %xmm2,%xmm5
   46e6b:	psubw  %xmm6,%xmm2
   46e6f:	paddw  %xmm6,%xmm5
   46e73:	psllw  $0x2,%xmm2
   46e78:	pmulhw 0x25070(%rip),%xmm2        # 6bef0 <PW_F1414>
   46e80:	movdqa %xmm4,%xmm6
   46e84:	paddw  %xmm0,%xmm4
   46e88:	pmulhw 0x25070(%rip),%xmm4        # 6bf00 <PW_F1847>
   46e90:	pmulhw 0x25078(%rip),%xmm6        # 6bf10 <PW_MF1613>
   46e98:	pmulhw 0x25080(%rip),%xmm0        # 6bf20 <PW_F1082>
   46ea0:	psubw  %xmm7,%xmm6
   46ea4:	psubw  %xmm4,%xmm0
   46ea8:	paddw  %xmm4,%xmm6
   46eac:	psubw  %xmm5,%xmm6
   46eb0:	movdqa %xmm1,%xmm7
   46eb4:	movdqa %xmm3,%xmm4
   46eb8:	paddw  %xmm5,%xmm1
   46ebc:	paddw  %xmm6,%xmm3
   46ec0:	psraw  $0x5,%xmm1
   46ec5:	psraw  $0x5,%xmm3
   46eca:	psubw  %xmm5,%xmm7
   46ece:	psubw  %xmm6,%xmm4
   46ed2:	psraw  $0x5,%xmm7
   46ed7:	psraw  $0x5,%xmm4
   46edc:	psubw  %xmm6,%xmm2
   46ee0:	packsswb %xmm4,%xmm1
   46ee4:	packsswb %xmm7,%xmm3
   46ee8:	movdqa -0x10(%rbp),%xmm5
   46eed:	movdqa -0x20(%rbp),%xmm6
   46ef2:	paddw  %xmm2,%xmm0
   46ef6:	movdqa %xmm5,%xmm4
   46efa:	movdqa %xmm6,%xmm7
   46efe:	paddw  %xmm2,%xmm5
   46f02:	paddw  %xmm0,%xmm6
   46f06:	psraw  $0x5,%xmm5
   46f0b:	psraw  $0x5,%xmm6
   46f10:	psubw  %xmm2,%xmm4
   46f14:	psubw  %xmm0,%xmm7
   46f18:	psraw  $0x5,%xmm4
   46f1d:	psraw  $0x5,%xmm7
   46f22:	movdqa 0x25006(%rip),%xmm2        # 6bf30 <PB_CENTERJSAMP>
   46f2a:	packsswb %xmm6,%xmm5
   46f2e:	packsswb %xmm4,%xmm7
   46f32:	paddb  %xmm2,%xmm1
   46f36:	paddb  %xmm2,%xmm3
   46f3a:	paddb  %xmm2,%xmm5
   46f3e:	paddb  %xmm2,%xmm7
   46f42:	movdqa %xmm1,%xmm0
   46f46:	punpcklbw %xmm3,%xmm1
   46f4a:	punpckhbw %xmm3,%xmm0
   46f4e:	movdqa %xmm5,%xmm6
   46f52:	punpcklbw %xmm7,%xmm5
   46f56:	punpckhbw %xmm7,%xmm6
   46f5a:	movdqa %xmm1,%xmm4
   46f5e:	punpcklwd %xmm5,%xmm1
   46f62:	punpckhwd %xmm5,%xmm4
   46f66:	movdqa %xmm6,%xmm2
   46f6a:	punpcklwd %xmm0,%xmm6
   46f6e:	punpckhwd %xmm0,%xmm2
   46f72:	movdqa %xmm1,%xmm3
   46f76:	punpckldq %xmm6,%xmm1
   46f7a:	punpckhdq %xmm6,%xmm3
   46f7e:	movdqa %xmm4,%xmm7
   46f82:	punpckldq %xmm2,%xmm4
   46f86:	punpckhdq %xmm2,%xmm7
   46f8a:	pshufd $0x4e,%xmm1,%xmm5
   46f8f:	pshufd $0x4e,%xmm3,%xmm0
   46f94:	pshufd $0x4e,%xmm4,%xmm6
   46f99:	pshufd $0x4e,%xmm7,%xmm2
   46f9e:	mov    (%rdi),%rdx
   46fa1:	mov    0x10(%rdi),%rsi
   46fa5:	movq   %xmm1,(%rdx,%rax,1)
   46faa:	movq   %xmm3,(%rsi,%rax,1)
   46faf:	mov    0x20(%rdi),%rdx
   46fb3:	mov    0x30(%rdi),%rsi
   46fb7:	movq   %xmm4,(%rdx,%rax,1)
   46fbc:	movq   %xmm7,(%rsi,%rax,1)
   46fc1:	mov    0x8(%rdi),%rdx
   46fc5:	mov    0x18(%rdi),%rsi
   46fc9:	movq   %xmm5,(%rdx,%rax,1)
   46fce:	movq   %xmm0,(%rsi,%rax,1)
   46fd3:	mov    0x28(%rdi),%rdx
   46fd7:	mov    0x38(%rdi),%rsi
   46fdb:	movq   %xmm6,(%rdx,%rax,1)
   46fe0:	movq   %xmm2,(%rsi,%rax,1)
   46fe5:	pop    %r15
   46fe7:	pop    %r14
   46fe9:	pop    %r13
   46feb:	pop    %r12
   46fed:	pop    %r11
   46fef:	pop    %r10
   46ff1:	mov    %rbp,%rsp
   46ff4:	pop    %rsp
   46ff5:	pop    %rbp
   46ff6:	retq   
   46ff7:	retq   
   46ff8:	nop
   46ff9:	nop
   46ffa:	nop
   46ffb:	nop
   46ffc:	nop
   46ffd:	nop
   46ffe:	nop
   46fff:	nop

0000000000047000 <jsimd_idct_islow_sse2>:
   47000:	push   %rbp
   47001:	mov    %rsp,%rax
   47004:	sub    $0x4,%rsp
   47008:	and    $0xfffffffffffffff0,%rsp
   4700c:	mov    %rax,(%rsp)
   47010:	mov    %rsp,%rbp
   47013:	lea    -0xc0(%rbp),%rsp
   4701a:	push   %r10
   4701c:	push   %r11
   4701e:	push   %r12
   47020:	push   %r13
   47022:	push   %r14
   47024:	push   %r15
   47026:	mov    %rdi,%r10
   47029:	mov    %rsi,%r11
   4702c:	mov    %rdx,%r12
   4702f:	mov    %rcx,%r13
   47032:	mov    %r8,%r14
   47035:	mov    %r9,%r15
   47038:	mov    %r10,%rdx
   4703b:	mov    %r11,%rsi
   4703e:	mov    0x10(%rsi),%eax
   47041:	or     0x20(%rsi),%eax
   47044:	jne    470dc <jsimd_idct_islow_sse2.columnDCT>
   4704a:	movdqa 0x10(%rsi),%xmm0
   4704f:	movdqa 0x20(%rsi),%xmm1
   47054:	por    0x30(%rsi),%xmm0
   47059:	por    0x40(%rsi),%xmm1
   4705e:	por    0x50(%rsi),%xmm0
   47063:	por    0x60(%rsi),%xmm1
   47068:	por    0x70(%rsi),%xmm0
   4706d:	por    %xmm0,%xmm1
   47071:	packsswb %xmm1,%xmm1
   47075:	packsswb %xmm1,%xmm1
   47079:	movd   %xmm1,%eax
   4707d:	test   %rax,%rax
   47080:	jne    470dc <jsimd_idct_islow_sse2.columnDCT>
   47082:	movdqa (%rsi),%xmm5
   47086:	pmullw (%rdx),%xmm5
   4708a:	psllw  $0x2,%xmm5
   4708f:	movdqa %xmm5,%xmm4
   47093:	punpcklwd %xmm5,%xmm5
   47097:	punpckhwd %xmm4,%xmm4
   4709b:	pshufd $0x0,%xmm5,%xmm7
   470a0:	pshufd $0x55,%xmm5,%xmm6
   470a5:	pshufd $0xaa,%xmm5,%xmm1
   470aa:	pshufd $0xff,%xmm5,%xmm5
   470af:	pshufd $0x0,%xmm4,%xmm0
   470b4:	pshufd $0x55,%xmm4,%xmm3
   470b9:	pshufd $0xaa,%xmm4,%xmm2
   470be:	pshufd $0xff,%xmm4,%xmm4
   470c3:	movdqa %xmm6,-0x40(%rbp)
   470c8:	movdqa %xmm5,-0x30(%rbp)
   470cd:	movdqa %xmm3,-0x20(%rbp)
   470d2:	movdqa %xmm4,-0x10(%rbp)
   470d7:	jmpq   47564 <jsimd_idct_islow_sse2.column_end>

00000000000470dc <jsimd_idct_islow_sse2.columnDCT>:
   470dc:	movdqa (%rsi),%xmm0
   470e0:	movdqa 0x20(%rsi),%xmm1
   470e5:	pmullw (%rdx),%xmm0
   470e9:	pmullw 0x20(%rdx),%xmm1
   470ee:	movdqa 0x40(%rsi),%xmm2
   470f3:	movdqa 0x60(%rsi),%xmm3
   470f8:	pmullw 0x40(%rdx),%xmm2
   470fd:	pmullw 0x60(%rdx),%xmm3
   47102:	movdqa %xmm1,%xmm4
   47106:	movdqa %xmm1,%xmm5
   4710a:	punpcklwd %xmm3,%xmm4
   4710e:	punpckhwd %xmm3,%xmm5
   47112:	movdqa %xmm4,%xmm1
   47116:	movdqa %xmm5,%xmm3
   4711a:	pmaddwd 0x24e1e(%rip),%xmm4        # 6bf40 <PW_F130_F054>
   47122:	pmaddwd 0x24e16(%rip),%xmm5        # 6bf40 <PW_F130_F054>
   4712a:	pmaddwd 0x24e1e(%rip),%xmm1        # 6bf50 <PW_F054_MF130>
   47132:	pmaddwd 0x24e16(%rip),%xmm3        # 6bf50 <PW_F054_MF130>
   4713a:	movdqa %xmm0,%xmm6
   4713e:	paddw  %xmm2,%xmm0
   47142:	psubw  %xmm2,%xmm6
   47146:	pxor   %xmm7,%xmm7
   4714a:	pxor   %xmm2,%xmm2
   4714e:	punpcklwd %xmm0,%xmm7
   47152:	punpckhwd %xmm0,%xmm2
   47156:	psrad  $0x3,%xmm7
   4715b:	psrad  $0x3,%xmm2
   47160:	movdqa %xmm7,%xmm0
   47164:	paddd  %xmm4,%xmm7
   47168:	psubd  %xmm4,%xmm0
   4716c:	movdqa %xmm2,%xmm4
   47170:	paddd  %xmm5,%xmm2
   47174:	psubd  %xmm5,%xmm4
   47178:	movdqa %xmm7,-0xc0(%rbp)
   47180:	movdqa %xmm2,-0xb0(%rbp)
   47188:	movdqa %xmm0,-0xa0(%rbp)
   47190:	movdqa %xmm4,-0x90(%rbp)
   47198:	pxor   %xmm5,%xmm5
   4719c:	pxor   %xmm7,%xmm7
   471a0:	punpcklwd %xmm6,%xmm5
   471a4:	punpckhwd %xmm6,%xmm7
   471a8:	psrad  $0x3,%xmm5
   471ad:	psrad  $0x3,%xmm7
   471b2:	movdqa %xmm5,%xmm2
   471b6:	paddd  %xmm1,%xmm5
   471ba:	psubd  %xmm1,%xmm2
   471be:	movdqa %xmm7,%xmm0
   471c2:	paddd  %xmm3,%xmm7
   471c6:	psubd  %xmm3,%xmm0
   471ca:	movdqa %xmm5,-0x80(%rbp)
   471cf:	movdqa %xmm7,-0x70(%rbp)
   471d4:	movdqa %xmm2,-0x60(%rbp)
   471d9:	movdqa %xmm0,-0x50(%rbp)
   471de:	movdqa 0x10(%rsi),%xmm4
   471e3:	movdqa 0x30(%rsi),%xmm6
   471e8:	pmullw 0x10(%rdx),%xmm4
   471ed:	pmullw 0x30(%rdx),%xmm6
   471f2:	movdqa 0x50(%rsi),%xmm1
   471f7:	movdqa 0x70(%rsi),%xmm3
   471fc:	pmullw 0x50(%rdx),%xmm1
   47201:	pmullw 0x70(%rdx),%xmm3
   47206:	movdqa %xmm6,%xmm5
   4720a:	movdqa %xmm4,%xmm7
   4720e:	paddw  %xmm3,%xmm5
   47212:	paddw  %xmm1,%xmm7
   47216:	movdqa %xmm5,%xmm2
   4721a:	movdqa %xmm5,%xmm0
   4721e:	punpcklwd %xmm7,%xmm2
   47222:	punpckhwd %xmm7,%xmm0
   47226:	movdqa %xmm2,%xmm5
   4722a:	movdqa %xmm0,%xmm7
   4722e:	pmaddwd 0x24d2a(%rip),%xmm2        # 6bf60 <PW_MF078_F117>
   47236:	pmaddwd 0x24d22(%rip),%xmm0        # 6bf60 <PW_MF078_F117>
   4723e:	pmaddwd 0x24d2a(%rip),%xmm5        # 6bf70 <PW_F117_F078>
   47246:	pmaddwd 0x24d22(%rip),%xmm7        # 6bf70 <PW_F117_F078>
   4724e:	movdqa %xmm2,-0x20(%rbp)
   47253:	movdqa %xmm0,-0x10(%rbp)
   47258:	movdqa %xmm3,%xmm2
   4725c:	movdqa %xmm3,%xmm0
   47260:	punpcklwd %xmm4,%xmm2
   47264:	punpckhwd %xmm4,%xmm0
   47268:	movdqa %xmm2,%xmm3
   4726c:	movdqa %xmm0,%xmm4
   47270:	pmaddwd 0x24d08(%rip),%xmm2        # 6bf80 <PW_MF060_MF089>
   47278:	pmaddwd 0x24d00(%rip),%xmm0        # 6bf80 <PW_MF060_MF089>
   47280:	pmaddwd 0x24d08(%rip),%xmm3        # 6bf90 <PW_MF089_F060>
   47288:	pmaddwd 0x24d00(%rip),%xmm4        # 6bf90 <PW_MF089_F060>
   47290:	paddd  -0x20(%rbp),%xmm2
   47295:	paddd  -0x10(%rbp),%xmm0
   4729a:	paddd  %xmm5,%xmm3
   4729e:	paddd  %xmm7,%xmm4
   472a2:	movdqa %xmm2,-0x40(%rbp)
   472a7:	movdqa %xmm0,-0x30(%rbp)
   472ac:	movdqa %xmm1,%xmm2
   472b0:	movdqa %xmm1,%xmm0
   472b4:	punpcklwd %xmm6,%xmm2
   472b8:	punpckhwd %xmm6,%xmm0
   472bc:	movdqa %xmm2,%xmm1
   472c0:	movdqa %xmm0,%xmm6
   472c4:	pmaddwd 0x24cd4(%rip),%xmm2        # 6bfa0 <PW_MF050_MF256>
   472cc:	pmaddwd 0x24ccc(%rip),%xmm0        # 6bfa0 <PW_MF050_MF256>
   472d4:	pmaddwd 0x24cd4(%rip),%xmm1        # 6bfb0 <PW_MF256_F050>
   472dc:	pmaddwd 0x24ccc(%rip),%xmm6        # 6bfb0 <PW_MF256_F050>
   472e4:	paddd  %xmm5,%xmm2
   472e8:	paddd  %xmm7,%xmm0
   472ec:	paddd  -0x20(%rbp),%xmm1
   472f1:	paddd  -0x10(%rbp),%xmm6
   472f6:	movdqa %xmm2,-0x20(%rbp)
   472fb:	movdqa %xmm0,-0x10(%rbp)
   47300:	movdqa -0xc0(%rbp),%xmm5
   47308:	movdqa -0xb0(%rbp),%xmm7
   47310:	movdqa %xmm5,%xmm2
   47314:	movdqa %xmm7,%xmm0
   47318:	paddd  %xmm3,%xmm5
   4731c:	paddd  %xmm4,%xmm7
   47320:	psubd  %xmm3,%xmm2
   47324:	psubd  %xmm4,%xmm0
   47328:	movdqa 0x24c90(%rip),%xmm3        # 6bfc0 <PD_DESCALE_P1>
   47330:	paddd  %xmm3,%xmm5
   47334:	paddd  %xmm3,%xmm7
   47338:	psrad  $0xb,%xmm5
   4733d:	psrad  $0xb,%xmm7
   47342:	paddd  %xmm3,%xmm2
   47346:	paddd  %xmm3,%xmm0
   4734a:	psrad  $0xb,%xmm2
   4734f:	psrad  $0xb,%xmm0
   47354:	packssdw %xmm7,%xmm5
   47358:	packssdw %xmm0,%xmm2
   4735c:	movdqa -0x80(%rbp),%xmm4
   47361:	movdqa -0x70(%rbp),%xmm3
   47366:	movdqa %xmm4,%xmm7
   4736a:	movdqa %xmm3,%xmm0
   4736e:	paddd  %xmm1,%xmm4
   47372:	paddd  %xmm6,%xmm3
   47376:	psubd  %xmm1,%xmm7
   4737a:	psubd  %xmm6,%xmm0
   4737e:	movdqa 0x24c3a(%rip),%xmm1        # 6bfc0 <PD_DESCALE_P1>
   47386:	paddd  %xmm1,%xmm4
   4738a:	paddd  %xmm1,%xmm3
   4738e:	psrad  $0xb,%xmm4
   47393:	psrad  $0xb,%xmm3
   47398:	paddd  %xmm1,%xmm7
   4739c:	paddd  %xmm1,%xmm0
   473a0:	psrad  $0xb,%xmm7
   473a5:	psrad  $0xb,%xmm0
   473aa:	packssdw %xmm3,%xmm4
   473ae:	packssdw %xmm0,%xmm7
   473b2:	movdqa %xmm5,%xmm6
   473b6:	punpcklwd %xmm4,%xmm5
   473ba:	punpckhwd %xmm4,%xmm6
   473be:	movdqa %xmm7,%xmm1
   473c2:	punpcklwd %xmm2,%xmm7
   473c6:	punpckhwd %xmm2,%xmm1
   473ca:	movdqa -0x60(%rbp),%xmm3
   473cf:	movdqa -0x50(%rbp),%xmm0
   473d4:	movdqa -0x20(%rbp),%xmm4
   473d9:	movdqa -0x10(%rbp),%xmm2
   473de:	movdqa %xmm5,-0xc0(%rbp)
   473e6:	movdqa %xmm6,-0xb0(%rbp)
   473ee:	movdqa %xmm7,-0x80(%rbp)
   473f3:	movdqa %xmm1,-0x70(%rbp)
   473f8:	movdqa %xmm3,%xmm5
   473fc:	movdqa %xmm0,%xmm6
   47400:	paddd  %xmm4,%xmm3
   47404:	paddd  %xmm2,%xmm0
   47408:	psubd  %xmm4,%xmm5
   4740c:	psubd  %xmm2,%xmm6
   47410:	movdqa 0x24ba8(%rip),%xmm7        # 6bfc0 <PD_DESCALE_P1>
   47418:	paddd  %xmm7,%xmm3
   4741c:	paddd  %xmm7,%xmm0
   47420:	psrad  $0xb,%xmm3
   47425:	psrad  $0xb,%xmm0
   4742a:	paddd  %xmm7,%xmm5
   4742e:	paddd  %xmm7,%xmm6
   47432:	psrad  $0xb,%xmm5
   47437:	psrad  $0xb,%xmm6
   4743c:	packssdw %xmm0,%xmm3
   47440:	packssdw %xmm6,%xmm5
   47444:	movdqa -0xa0(%rbp),%xmm1
   4744c:	movdqa -0x90(%rbp),%xmm4
   47454:	movdqa -0x40(%rbp),%xmm2
   47459:	movdqa -0x30(%rbp),%xmm7
   4745e:	movdqa %xmm1,%xmm0
   47462:	movdqa %xmm4,%xmm6
   47466:	paddd  %xmm2,%xmm1
   4746a:	paddd  %xmm7,%xmm4
   4746e:	psubd  %xmm2,%xmm0
   47472:	psubd  %xmm7,%xmm6
   47476:	movdqa 0x24b42(%rip),%xmm2        # 6bfc0 <PD_DESCALE_P1>
   4747e:	paddd  %xmm2,%xmm1
   47482:	paddd  %xmm2,%xmm4
   47486:	psrad  $0xb,%xmm1
   4748b:	psrad  $0xb,%xmm4
   47490:	paddd  %xmm2,%xmm0
   47494:	paddd  %xmm2,%xmm6
   47498:	psrad  $0xb,%xmm0
   4749d:	psrad  $0xb,%xmm6
   474a2:	packssdw %xmm4,%xmm1
   474a6:	packssdw %xmm6,%xmm0
   474aa:	movdqa -0xc0(%rbp),%xmm7
   474b2:	movdqa -0xb0(%rbp),%xmm2
   474ba:	movdqa %xmm3,%xmm4
   474be:	punpcklwd %xmm1,%xmm3
   474c2:	punpckhwd %xmm1,%xmm4
   474c6:	movdqa %xmm0,%xmm6
   474ca:	punpcklwd %xmm5,%xmm0
   474ce:	punpckhwd %xmm5,%xmm6
   474d2:	movdqa %xmm7,%xmm1
   474d6:	punpckldq %xmm3,%xmm7
   474da:	punpckhdq %xmm3,%xmm1
   474de:	movdqa %xmm2,%xmm5
   474e2:	punpckldq %xmm4,%xmm2
   474e6:	punpckhdq %xmm4,%xmm5
   474ea:	movdqa -0x80(%rbp),%xmm3
   474ef:	movdqa -0x70(%rbp),%xmm4
   474f4:	movdqa %xmm2,-0x60(%rbp)
   474f9:	movdqa %xmm5,-0x50(%rbp)
   474fe:	movdqa %xmm0,%xmm2
   47502:	punpckldq %xmm3,%xmm0
   47506:	punpckhdq %xmm3,%xmm2
   4750a:	movdqa %xmm6,%xmm5
   4750e:	punpckldq %xmm4,%xmm6
   47512:	punpckhdq %xmm4,%xmm5
   47516:	movdqa %xmm7,%xmm3
   4751a:	punpcklqdq %xmm0,%xmm7
   4751e:	punpckhqdq %xmm0,%xmm3
   47522:	movdqa %xmm1,%xmm4
   47526:	punpcklqdq %xmm2,%xmm1
   4752a:	punpckhqdq %xmm2,%xmm4
   4752e:	movdqa -0x60(%rbp),%xmm0
   47533:	movdqa -0x50(%rbp),%xmm2
   47538:	movdqa %xmm3,-0x40(%rbp)
   4753d:	movdqa %xmm4,-0x30(%rbp)
   47542:	movdqa %xmm0,%xmm3
   47546:	punpcklqdq %xmm6,%xmm0
   4754a:	punpckhqdq %xmm6,%xmm3
   4754e:	movdqa %xmm2,%xmm4
   47552:	punpcklqdq %xmm5,%xmm2
   47556:	punpckhqdq %xmm5,%xmm4
   4755a:	movdqa %xmm3,-0x20(%rbp)
   4755f:	movdqa %xmm4,-0x10(%rbp)

0000000000047564 <jsimd_idct_islow_sse2.column_end>:
   47564:	prefetchnta 0x80(%rsi)
   4756b:	prefetchnta 0xa0(%rsi)
   47572:	prefetchnta 0xc0(%rsi)
   47579:	prefetchnta 0xe0(%rsi)
   47580:	mov    0x0(%rbp),%rax
   47584:	mov    %r12,%rdi
   47587:	mov    %r13d,%eax
   4758a:	movdqa %xmm1,%xmm6
   4758e:	movdqa %xmm1,%xmm5
   47592:	punpcklwd %xmm2,%xmm6
   47596:	punpckhwd %xmm2,%xmm5
   4759a:	movdqa %xmm6,%xmm1
   4759e:	movdqa %xmm5,%xmm2
   475a2:	pmaddwd 0x24996(%rip),%xmm6        # 6bf40 <PW_F130_F054>
   475aa:	pmaddwd 0x2498e(%rip),%xmm5        # 6bf40 <PW_F130_F054>
   475b2:	pmaddwd 0x24996(%rip),%xmm1        # 6bf50 <PW_F054_MF130>
   475ba:	pmaddwd 0x2498e(%rip),%xmm2        # 6bf50 <PW_F054_MF130>
   475c2:	movdqa %xmm7,%xmm3
   475c6:	paddw  %xmm0,%xmm7
   475ca:	psubw  %xmm0,%xmm3
   475ce:	pxor   %xmm4,%xmm4
   475d2:	pxor   %xmm0,%xmm0
   475d6:	punpcklwd %xmm7,%xmm4
   475da:	punpckhwd %xmm7,%xmm0
   475de:	psrad  $0x3,%xmm4
   475e3:	psrad  $0x3,%xmm0
   475e8:	movdqa %xmm4,%xmm7
   475ec:	paddd  %xmm6,%xmm4
   475f0:	psubd  %xmm6,%xmm7
   475f4:	movdqa %xmm0,%xmm6
   475f8:	paddd  %xmm5,%xmm0
   475fc:	psubd  %xmm5,%xmm6
   47600:	movdqa %xmm4,-0xc0(%rbp)
   47608:	movdqa %xmm0,-0xb0(%rbp)
   47610:	movdqa %xmm7,-0xa0(%rbp)
   47618:	movdqa %xmm6,-0x90(%rbp)
   47620:	pxor   %xmm5,%xmm5
   47624:	pxor   %xmm4,%xmm4
   47628:	punpcklwd %xmm3,%xmm5
   4762c:	punpckhwd %xmm3,%xmm4
   47630:	psrad  $0x3,%xmm5
   47635:	psrad  $0x3,%xmm4
   4763a:	movdqa %xmm5,%xmm0
   4763e:	paddd  %xmm1,%xmm5
   47642:	psubd  %xmm1,%xmm0
   47646:	movdqa %xmm4,%xmm7
   4764a:	paddd  %xmm2,%xmm4
   4764e:	psubd  %xmm2,%xmm7
   47652:	movdqa %xmm5,-0x80(%rbp)
   47657:	movdqa %xmm4,-0x70(%rbp)
   4765c:	movdqa %xmm0,-0x60(%rbp)
   47661:	movdqa %xmm7,-0x50(%rbp)
   47666:	movdqa -0x30(%rbp),%xmm6
   4766b:	movdqa -0x40(%rbp),%xmm3
   47670:	movdqa -0x10(%rbp),%xmm1
   47675:	movdqa -0x20(%rbp),%xmm2
   4767a:	movdqa %xmm6,%xmm5
   4767e:	movdqa %xmm3,%xmm4
   47682:	paddw  %xmm1,%xmm5
   47686:	paddw  %xmm2,%xmm4
   4768a:	movdqa %xmm5,%xmm0
   4768e:	movdqa %xmm5,%xmm7
   47692:	punpcklwd %xmm4,%xmm0
   47696:	punpckhwd %xmm4,%xmm7
   4769a:	movdqa %xmm0,%xmm5
   4769e:	movdqa %xmm7,%xmm4
   476a2:	pmaddwd 0x248b6(%rip),%xmm0        # 6bf60 <PW_MF078_F117>
   476aa:	pmaddwd 0x248ae(%rip),%xmm7        # 6bf60 <PW_MF078_F117>
   476b2:	pmaddwd 0x248b6(%rip),%xmm5        # 6bf70 <PW_F117_F078>
   476ba:	pmaddwd 0x248ae(%rip),%xmm4        # 6bf70 <PW_F117_F078>
   476c2:	movdqa %xmm0,-0x20(%rbp)
   476c7:	movdqa %xmm7,-0x10(%rbp)
   476cc:	movdqa %xmm1,%xmm0
   476d0:	movdqa %xmm1,%xmm7
   476d4:	punpcklwd %xmm3,%xmm0
   476d8:	punpckhwd %xmm3,%xmm7
   476dc:	movdqa %xmm0,%xmm1
   476e0:	movdqa %xmm7,%xmm3
   476e4:	pmaddwd 0x24894(%rip),%xmm0        # 6bf80 <PW_MF060_MF089>
   476ec:	pmaddwd 0x2488c(%rip),%xmm7        # 6bf80 <PW_MF060_MF089>
   476f4:	pmaddwd 0x24894(%rip),%xmm1        # 6bf90 <PW_MF089_F060>
   476fc:	pmaddwd 0x2488c(%rip),%xmm3        # 6bf90 <PW_MF089_F060>
   47704:	paddd  -0x20(%rbp),%xmm0
   47709:	paddd  -0x10(%rbp),%xmm7
   4770e:	paddd  %xmm5,%xmm1
   47712:	paddd  %xmm4,%xmm3
   47716:	movdqa %xmm0,-0x40(%rbp)
   4771b:	movdqa %xmm7,-0x30(%rbp)
   47720:	movdqa %xmm2,%xmm0
   47724:	movdqa %xmm2,%xmm7
   47728:	punpcklwd %xmm6,%xmm0
   4772c:	punpckhwd %xmm6,%xmm7
   47730:	movdqa %xmm0,%xmm2
   47734:	movdqa %xmm7,%xmm6
   47738:	pmaddwd 0x24860(%rip),%xmm0        # 6bfa0 <PW_MF050_MF256>
   47740:	pmaddwd 0x24858(%rip),%xmm7        # 6bfa0 <PW_MF050_MF256>
   47748:	pmaddwd 0x24860(%rip),%xmm2        # 6bfb0 <PW_MF256_F050>
   47750:	pmaddwd 0x24858(%rip),%xmm6        # 6bfb0 <PW_MF256_F050>
   47758:	paddd  %xmm5,%xmm0
   4775c:	paddd  %xmm4,%xmm7
   47760:	paddd  -0x20(%rbp),%xmm2
   47765:	paddd  -0x10(%rbp),%xmm6
   4776a:	movdqa %xmm0,-0x20(%rbp)
   4776f:	movdqa %xmm7,-0x10(%rbp)
   47774:	movdqa -0xc0(%rbp),%xmm5
   4777c:	movdqa -0xb0(%rbp),%xmm4
   47784:	movdqa %xmm5,%xmm0
   47788:	movdqa %xmm4,%xmm7
   4778c:	paddd  %xmm1,%xmm5
   47790:	paddd  %xmm3,%xmm4
   47794:	psubd  %xmm1,%xmm0
   47798:	psubd  %xmm3,%xmm7
   4779c:	movdqa 0x2482c(%rip),%xmm1        # 6bfd0 <PD_DESCALE_P2>
   477a4:	paddd  %xmm1,%xmm5
   477a8:	paddd  %xmm1,%xmm4
   477ac:	psrad  $0x12,%xmm5
   477b1:	psrad  $0x12,%xmm4
   477b6:	paddd  %xmm1,%xmm0
   477ba:	paddd  %xmm1,%xmm7
   477be:	psrad  $0x12,%xmm0
   477c3:	psrad  $0x12,%xmm7
   477c8:	packssdw %xmm4,%xmm5
   477cc:	packssdw %xmm7,%xmm0
   477d0:	movdqa -0x80(%rbp),%xmm3
   477d5:	movdqa -0x70(%rbp),%xmm1
   477da:	movdqa %xmm3,%xmm4
   477de:	movdqa %xmm1,%xmm7
   477e2:	paddd  %xmm2,%xmm3
   477e6:	paddd  %xmm6,%xmm1
   477ea:	psubd  %xmm2,%xmm4
   477ee:	psubd  %xmm6,%xmm7
   477f2:	movdqa 0x247d6(%rip),%xmm2        # 6bfd0 <PD_DESCALE_P2>
   477fa:	paddd  %xmm2,%xmm3
   477fe:	paddd  %xmm2,%xmm1
   47802:	psrad  $0x12,%xmm3
   47807:	psrad  $0x12,%xmm1
   4780c:	paddd  %xmm2,%xmm4
   47810:	paddd  %xmm2,%xmm7
   47814:	psrad  $0x12,%xmm4
   47819:	psrad  $0x12,%xmm7
   4781e:	packssdw %xmm1,%xmm3
   47822:	packssdw %xmm7,%xmm4
   47826:	packsswb %xmm4,%xmm5
   4782a:	packsswb %xmm0,%xmm3
   4782e:	movdqa -0x60(%rbp),%xmm6
   47833:	movdqa -0x50(%rbp),%xmm2
   47838:	movdqa -0x20(%rbp),%xmm1
   4783d:	movdqa -0x10(%rbp),%xmm7
   47842:	movdqa %xmm5,-0xc0(%rbp)
   4784a:	movdqa %xmm3,-0xb0(%rbp)
   47852:	movdqa %xmm6,%xmm4
   47856:	movdqa %xmm2,%xmm0
   4785a:	paddd  %xmm1,%xmm6
   4785e:	paddd  %xmm7,%xmm2
   47862:	psubd  %xmm1,%xmm4
   47866:	psubd  %xmm7,%xmm0
   4786a:	movdqa 0x2475e(%rip),%xmm5        # 6bfd0 <PD_DESCALE_P2>
   47872:	paddd  %xmm5,%xmm6
   47876:	paddd  %xmm5,%xmm2
   4787a:	psrad  $0x12,%xmm6
   4787f:	psrad  $0x12,%xmm2
   47884:	paddd  %xmm5,%xmm4
   47888:	paddd  %xmm5,%xmm0
   4788c:	psrad  $0x12,%xmm4
   47891:	psrad  $0x12,%xmm0
   47896:	packssdw %xmm2,%xmm6
   4789a:	packssdw %xmm0,%xmm4
   4789e:	movdqa -0xa0(%rbp),%xmm3
   478a6:	movdqa -0x90(%rbp),%xmm1
   478ae:	movdqa -0x40(%rbp),%xmm7
   478b3:	movdqa -0x30(%rbp),%xmm5
   478b8:	movdqa %xmm3,%xmm2
   478bc:	movdqa %xmm1,%xmm0
   478c0:	paddd  %xmm7,%xmm3
   478c4:	paddd  %xmm5,%xmm1
   478c8:	psubd  %xmm7,%xmm2
   478cc:	psubd  %xmm5,%xmm0
   478d0:	movdqa 0x246f8(%rip),%xmm7        # 6bfd0 <PD_DESCALE_P2>
   478d8:	paddd  %xmm7,%xmm3
   478dc:	paddd  %xmm7,%xmm1
   478e0:	psrad  $0x12,%xmm3
   478e5:	psrad  $0x12,%xmm1
   478ea:	paddd  %xmm7,%xmm2
   478ee:	paddd  %xmm7,%xmm0
   478f2:	psrad  $0x12,%xmm2
   478f7:	psrad  $0x12,%xmm0
   478fc:	movdqa 0x246dc(%rip),%xmm5        # 6bfe0 <PB_CENTERJSAMP>
   47904:	packssdw %xmm1,%xmm3
   47908:	packssdw %xmm0,%xmm2
   4790c:	movdqa -0xc0(%rbp),%xmm7
   47914:	movdqa -0xb0(%rbp),%xmm1
   4791c:	packsswb %xmm2,%xmm6
   47920:	packsswb %xmm4,%xmm3
   47924:	paddb  %xmm5,%xmm7
   47928:	paddb  %xmm5,%xmm1
   4792c:	paddb  %xmm5,%xmm6
   47930:	paddb  %xmm5,%xmm3
   47934:	movdqa %xmm7,%xmm0
   47938:	punpcklbw %xmm1,%xmm7
   4793c:	punpckhbw %xmm1,%xmm0
   47940:	movdqa %xmm6,%xmm2
   47944:	punpcklbw %xmm3,%xmm6
   47948:	punpckhbw %xmm3,%xmm2
   4794c:	movdqa %xmm7,%xmm4
   47950:	punpcklwd %xmm6,%xmm7
   47954:	punpckhwd %xmm6,%xmm4
   47958:	movdqa %xmm2,%xmm5
   4795c:	punpcklwd %xmm0,%xmm2
   47960:	punpckhwd %xmm0,%xmm5
   47964:	movdqa %xmm7,%xmm1
   47968:	punpckldq %xmm2,%xmm7
   4796c:	punpckhdq %xmm2,%xmm1
   47970:	movdqa %xmm4,%xmm3
   47974:	punpckldq %xmm5,%xmm4
   47978:	punpckhdq %xmm5,%xmm3
   4797c:	pshufd $0x4e,%xmm7,%xmm6
   47981:	pshufd $0x4e,%xmm1,%xmm0
   47986:	pshufd $0x4e,%xmm4,%xmm2
   4798b:	pshufd $0x4e,%xmm3,%xmm5
   47990:	mov    (%rdi),%rdx
   47993:	mov    0x10(%rdi),%rsi
   47997:	movq   %xmm7,(%rdx,%rax,1)
   4799c:	movq   %xmm1,(%rsi,%rax,1)
   479a1:	mov    0x20(%rdi),%rdx
   479a5:	mov    0x30(%rdi),%rsi
   479a9:	movq   %xmm4,(%rdx,%rax,1)
   479ae:	movq   %xmm3,(%rsi,%rax,1)
   479b3:	mov    0x8(%rdi),%rdx
   479b7:	mov    0x18(%rdi),%rsi
   479bb:	movq   %xmm6,(%rdx,%rax,1)
   479c0:	movq   %xmm0,(%rsi,%rax,1)
   479c5:	mov    0x28(%rdi),%rdx
   479c9:	mov    0x38(%rdi),%rsi
   479cd:	movq   %xmm2,(%rdx,%rax,1)
   479d2:	movq   %xmm5,(%rsi,%rax,1)
   479d7:	pop    %r15
   479d9:	pop    %r14
   479db:	pop    %r13
   479dd:	pop    %r12
   479df:	pop    %r11
   479e1:	pop    %r10
   479e3:	mov    %rbp,%rsp
   479e6:	pop    %rsp
   479e7:	pop    %rbp
   479e8:	retq   
   479e9:	nop
   479ea:	nop
   479eb:	nop
   479ec:	nop
   479ed:	nop
   479ee:	nop
   479ef:	nop

00000000000479f0 <jsimd_idct_4x4_sse2>:
   479f0:	push   %rbp
   479f1:	mov    %rsp,%rax
   479f4:	sub    $0x4,%rsp
   479f8:	and    $0xfffffffffffffff0,%rsp
   479fc:	mov    %rax,(%rsp)
   47a00:	mov    %rsp,%rbp
   47a03:	lea    -0x20(%rbp),%rsp
   47a07:	push   %r10
   47a09:	push   %r11
   47a0b:	push   %r12
   47a0d:	push   %r13
   47a0f:	push   %r14
   47a11:	push   %r15
   47a13:	mov    %rdi,%r10
   47a16:	mov    %rsi,%r11
   47a19:	mov    %rdx,%r12
   47a1c:	mov    %rcx,%r13
   47a1f:	mov    %r8,%r14
   47a22:	mov    %r9,%r15
   47a25:	mov    %r10,%rdx
   47a28:	mov    %r11,%rsi
   47a2b:	mov    0x10(%rsi),%eax
   47a2e:	or     0x20(%rsi),%eax
   47a31:	jne    47a98 <jsimd_idct_4x4_sse2.columnDCT>
   47a33:	movdqa 0x10(%rsi),%xmm0
   47a38:	movdqa 0x20(%rsi),%xmm1
   47a3d:	por    0x30(%rsi),%xmm0
   47a42:	por    0x50(%rsi),%xmm1
   47a47:	por    0x60(%rsi),%xmm0
   47a4c:	por    0x70(%rsi),%xmm1
   47a51:	por    %xmm1,%xmm0
   47a55:	packsswb %xmm0,%xmm0
   47a59:	packsswb %xmm0,%xmm0
   47a5d:	movd   %xmm0,%eax
   47a61:	test   %rax,%rax
   47a64:	jne    47a98 <jsimd_idct_4x4_sse2.columnDCT>
   47a66:	movdqa (%rsi),%xmm0
   47a6a:	pmullw (%rdx),%xmm0
   47a6e:	psllw  $0x2,%xmm0
   47a73:	movdqa %xmm0,%xmm3
   47a77:	punpcklwd %xmm0,%xmm0
   47a7b:	punpckhwd %xmm3,%xmm3
   47a7f:	pshufd $0x50,%xmm0,%xmm1
   47a84:	pshufd $0xfa,%xmm0,%xmm0
   47a89:	pshufd $0x50,%xmm3,%xmm6
   47a8e:	pshufd $0xfa,%xmm3,%xmm3
   47a93:	jmpq   47c86 <jsimd_idct_4x4_sse2.column_end>

0000000000047a98 <jsimd_idct_4x4_sse2.columnDCT>:
   47a98:	movdqa 0x10(%rsi),%xmm0
   47a9d:	movdqa 0x30(%rsi),%xmm1
   47aa2:	pmullw 0x10(%rdx),%xmm0
   47aa7:	pmullw 0x30(%rdx),%xmm1
   47aac:	movdqa 0x50(%rsi),%xmm2
   47ab1:	movdqa 0x70(%rsi),%xmm3
   47ab6:	pmullw 0x50(%rdx),%xmm2
   47abb:	pmullw 0x70(%rdx),%xmm3
   47ac0:	movdqa %xmm0,%xmm4
   47ac4:	movdqa %xmm0,%xmm5
   47ac8:	punpcklwd %xmm1,%xmm4
   47acc:	punpckhwd %xmm1,%xmm5
   47ad0:	movdqa %xmm4,%xmm0
   47ad4:	movdqa %xmm5,%xmm1
   47ad8:	pmaddwd 0x24520(%rip),%xmm4        # 6c000 <PW_F256_F089>
   47ae0:	pmaddwd 0x24518(%rip),%xmm5        # 6c000 <PW_F256_F089>
   47ae8:	pmaddwd 0x24520(%rip),%xmm0        # 6c010 <PW_F106_MF217>
   47af0:	pmaddwd 0x24518(%rip),%xmm1        # 6c010 <PW_F106_MF217>
   47af8:	movdqa %xmm2,%xmm6
   47afc:	movdqa %xmm2,%xmm7
   47b00:	punpcklwd %xmm3,%xmm6
   47b04:	punpckhwd %xmm3,%xmm7
   47b08:	movdqa %xmm6,%xmm2
   47b0c:	movdqa %xmm7,%xmm3
   47b10:	pmaddwd 0x24508(%rip),%xmm6        # 6c020 <PW_MF060_MF050>
   47b18:	pmaddwd 0x24500(%rip),%xmm7        # 6c020 <PW_MF060_MF050>
   47b20:	pmaddwd 0x24508(%rip),%xmm2        # 6c030 <PW_F145_MF021>
   47b28:	pmaddwd 0x24500(%rip),%xmm3        # 6c030 <PW_F145_MF021>
   47b30:	paddd  %xmm4,%xmm6
   47b34:	paddd  %xmm5,%xmm7
   47b38:	paddd  %xmm0,%xmm2
   47b3c:	paddd  %xmm1,%xmm3
   47b40:	movdqa %xmm2,-0x20(%rbp)
   47b45:	movdqa %xmm3,-0x10(%rbp)
   47b4a:	movdqa (%rsi),%xmm4
   47b4e:	movdqa 0x20(%rsi),%xmm5
   47b53:	movdqa 0x60(%rsi),%xmm0
   47b58:	pmullw (%rdx),%xmm4
   47b5c:	pmullw 0x20(%rdx),%xmm5
   47b61:	pmullw 0x60(%rdx),%xmm0
   47b66:	pxor   %xmm1,%xmm1
   47b6a:	pxor   %xmm2,%xmm2
   47b6e:	punpcklwd %xmm4,%xmm1
   47b72:	punpckhwd %xmm4,%xmm2
   47b76:	psrad  $0x2,%xmm1
   47b7b:	psrad  $0x2,%xmm2
   47b80:	movdqa %xmm5,%xmm3
   47b84:	punpcklwd %xmm0,%xmm5
   47b88:	punpckhwd %xmm0,%xmm3
   47b8c:	pmaddwd 0x2445c(%rip),%xmm5        # 6bff0 <PW_F184_MF076>
   47b94:	pmaddwd 0x24454(%rip),%xmm3        # 6bff0 <PW_F184_MF076>
   47b9c:	movdqa %xmm1,%xmm4
   47ba0:	movdqa %xmm2,%xmm0
   47ba4:	paddd  %xmm5,%xmm1
   47ba8:	paddd  %xmm3,%xmm2
   47bac:	psubd  %xmm5,%xmm4
   47bb0:	psubd  %xmm3,%xmm0
   47bb4:	movdqa %xmm1,%xmm5
   47bb8:	movdqa %xmm2,%xmm3
   47bbc:	paddd  %xmm6,%xmm1
   47bc0:	paddd  %xmm7,%xmm2
   47bc4:	psubd  %xmm6,%xmm5
   47bc8:	psubd  %xmm7,%xmm3
   47bcc:	movdqa 0x2448c(%rip),%xmm6        # 6c060 <PD_DESCALE_P1_4>
   47bd4:	paddd  %xmm6,%xmm1
   47bd8:	paddd  %xmm6,%xmm2
   47bdc:	psrad  $0xc,%xmm1
   47be1:	psrad  $0xc,%xmm2
   47be6:	paddd  %xmm6,%xmm5
   47bea:	paddd  %xmm6,%xmm3
   47bee:	psrad  $0xc,%xmm5
   47bf3:	psrad  $0xc,%xmm3
   47bf8:	packssdw %xmm2,%xmm1
   47bfc:	packssdw %xmm3,%xmm5
   47c00:	movdqa -0x20(%rbp),%xmm7
   47c05:	movdqa -0x10(%rbp),%xmm6
   47c0a:	movdqa %xmm4,%xmm2
   47c0e:	movdqa %xmm0,%xmm3
   47c12:	paddd  %xmm7,%xmm4
   47c16:	paddd  %xmm6,%xmm0
   47c1a:	psubd  %xmm7,%xmm2
   47c1e:	psubd  %xmm6,%xmm3
   47c22:	movdqa 0x24436(%rip),%xmm7        # 6c060 <PD_DESCALE_P1_4>
   47c2a:	paddd  %xmm7,%xmm4
   47c2e:	paddd  %xmm7,%xmm0
   47c32:	psrad  $0xc,%xmm4
   47c37:	psrad  $0xc,%xmm0
   47c3c:	paddd  %xmm7,%xmm2
   47c40:	paddd  %xmm7,%xmm3
   47c44:	psrad  $0xc,%xmm2
   47c49:	psrad  $0xc,%xmm3
   47c4e:	packssdw %xmm0,%xmm4
   47c52:	packssdw %xmm3,%xmm2
   47c56:	movdqa %xmm1,%xmm6
   47c5a:	punpcklwd %xmm4,%xmm1
   47c5e:	punpckhwd %xmm4,%xmm6
   47c62:	movdqa %xmm2,%xmm7
   47c66:	punpcklwd %xmm5,%xmm2
   47c6a:	punpckhwd %xmm5,%xmm7
   47c6e:	movdqa %xmm1,%xmm0
   47c72:	punpckldq %xmm2,%xmm1
   47c76:	punpckhdq %xmm2,%xmm0
   47c7a:	movdqa %xmm6,%xmm3
   47c7e:	punpckldq %xmm7,%xmm6
   47c82:	punpckhdq %xmm7,%xmm3

0000000000047c86 <jsimd_idct_4x4_sse2.column_end>:
   47c86:	prefetchnta 0x80(%rsi)
   47c8d:	prefetchnta 0xa0(%rsi)
   47c94:	prefetchnta 0xc0(%rsi)
   47c9b:	prefetchnta 0xe0(%rsi)
   47ca2:	mov    0x0(%rbp),%rax
   47ca6:	mov    %r12,%rdi
   47ca9:	mov    %r13d,%eax
   47cac:	pxor   %xmm4,%xmm4
   47cb0:	punpcklwd %xmm1,%xmm4
   47cb4:	psrad  $0x2,%xmm4
   47cb9:	punpckhwd %xmm0,%xmm1
   47cbd:	punpckhwd %xmm3,%xmm6
   47cc1:	movdqa %xmm1,%xmm5
   47cc5:	movdqa %xmm6,%xmm2
   47cc9:	pmaddwd 0x2432f(%rip),%xmm1        # 6c000 <PW_F256_F089>
   47cd1:	pmaddwd 0x24347(%rip),%xmm6        # 6c020 <PW_MF060_MF050>
   47cd9:	pmaddwd 0x2432f(%rip),%xmm5        # 6c010 <PW_F106_MF217>
   47ce1:	pmaddwd 0x24347(%rip),%xmm2        # 6c030 <PW_F145_MF021>
   47ce9:	paddd  %xmm1,%xmm6
   47ced:	paddd  %xmm5,%xmm2
   47cf1:	punpcklwd %xmm3,%xmm0
   47cf5:	pmaddwd 0x242f3(%rip),%xmm0        # 6bff0 <PW_F184_MF076>
   47cfd:	movdqa %xmm4,%xmm7
   47d01:	paddd  %xmm0,%xmm4
   47d05:	psubd  %xmm0,%xmm7
   47d09:	movdqa 0x2435f(%rip),%xmm1        # 6c070 <PD_DESCALE_P2_4>
   47d11:	movdqa %xmm4,%xmm5
   47d15:	movdqa %xmm7,%xmm3
   47d19:	paddd  %xmm6,%xmm4
   47d1d:	paddd  %xmm2,%xmm7
   47d21:	psubd  %xmm6,%xmm5
   47d25:	psubd  %xmm2,%xmm3
   47d29:	paddd  %xmm1,%xmm4
   47d2d:	paddd  %xmm1,%xmm7
   47d31:	psrad  $0x13,%xmm4
   47d36:	psrad  $0x13,%xmm7
   47d3b:	paddd  %xmm1,%xmm5
   47d3f:	paddd  %xmm1,%xmm3
   47d43:	psrad  $0x13,%xmm5
   47d48:	psrad  $0x13,%xmm3
   47d4d:	packssdw %xmm3,%xmm4
   47d51:	packssdw %xmm5,%xmm7
   47d55:	movdqa %xmm4,%xmm0
   47d59:	punpcklwd %xmm7,%xmm4
   47d5d:	punpckhwd %xmm7,%xmm0
   47d61:	movdqa %xmm4,%xmm6
   47d65:	punpckldq %xmm0,%xmm4
   47d69:	punpckhdq %xmm0,%xmm6
   47d6d:	packsswb %xmm6,%xmm4
   47d71:	paddb  0x24327(%rip),%xmm4        # 6c0a0 <PB_CENTERJSAMP>
   47d79:	pshufd $0x39,%xmm4,%xmm2
   47d7e:	pshufd $0x4e,%xmm4,%xmm1
   47d83:	pshufd $0x93,%xmm4,%xmm3
   47d88:	mov    (%rdi),%rdx
   47d8b:	mov    0x8(%rdi),%rsi
   47d8f:	movd   %xmm4,(%rdx,%rax,1)
   47d94:	movd   %xmm2,(%rsi,%rax,1)
   47d99:	mov    0x10(%rdi),%rdx
   47d9d:	mov    0x18(%rdi),%rsi
   47da1:	movd   %xmm1,(%rdx,%rax,1)
   47da6:	movd   %xmm3,(%rsi,%rax,1)
   47dab:	pop    %r15
   47dad:	pop    %r14
   47daf:	pop    %r13
   47db1:	pop    %r12
   47db3:	pop    %r11
   47db5:	pop    %r10
   47db7:	mov    %rbp,%rsp
   47dba:	pop    %rsp
   47dbb:	pop    %rbp
   47dbc:	retq   
   47dbd:	nop
   47dbe:	nop
   47dbf:	nop

0000000000047dc0 <jsimd_idct_2x2_sse2>:
   47dc0:	push   %rbp
   47dc1:	mov    %rsp,%rax
   47dc4:	mov    %rsp,%rbp
   47dc7:	push   %r10
   47dc9:	push   %r11
   47dcb:	push   %r12
   47dcd:	push   %r13
   47dcf:	push   %r14
   47dd1:	push   %r15
   47dd3:	mov    %rdi,%r10
   47dd6:	mov    %rsi,%r11
   47dd9:	mov    %rdx,%r12
   47ddc:	mov    %rcx,%r13
   47ddf:	mov    %r8,%r14
   47de2:	mov    %r9,%r15
   47de5:	push   %rbx
   47de6:	mov    %r10,%rdx
   47de9:	mov    %r11,%rsi
   47dec:	movdqa 0x10(%rsi),%xmm0
   47df1:	movdqa 0x30(%rsi),%xmm1
   47df6:	pmullw 0x10(%rdx),%xmm0
   47dfb:	pmullw 0x30(%rdx),%xmm1
   47e00:	movdqa 0x50(%rsi),%xmm2
   47e05:	movdqa 0x70(%rsi),%xmm3
   47e0a:	pmullw 0x50(%rdx),%xmm2
   47e0f:	pmullw 0x70(%rdx),%xmm3
   47e14:	pcmpeqd %xmm7,%xmm7
   47e18:	pslld  $0x10,%xmm7
   47e1d:	movdqa %xmm0,%xmm4
   47e21:	movdqa %xmm2,%xmm5
   47e25:	punpcklwd %xmm1,%xmm4
   47e29:	punpcklwd %xmm3,%xmm5
   47e2d:	pmaddwd 0x2420b(%rip),%xmm4        # 6c040 <PW_F362_MF127>
   47e35:	pmaddwd 0x24213(%rip),%xmm5        # 6c050 <PW_F085_MF072>
   47e3d:	psrld  $0x10,%xmm0
   47e42:	pand   %xmm7,%xmm1
   47e46:	psrld  $0x10,%xmm2
   47e4b:	pand   %xmm7,%xmm3
   47e4f:	por    %xmm1,%xmm0
   47e53:	por    %xmm3,%xmm2
   47e57:	pmaddwd 0x241e1(%rip),%xmm0        # 6c040 <PW_F362_MF127>
   47e5f:	pmaddwd 0x241e9(%rip),%xmm2        # 6c050 <PW_F085_MF072>
   47e67:	paddd  %xmm5,%xmm4
   47e6b:	paddd  %xmm2,%xmm0
   47e6f:	movdqa (%rsi),%xmm6
   47e73:	pmullw (%rdx),%xmm6
   47e77:	movdqa %xmm6,%xmm1
   47e7b:	pslld  $0x10,%xmm6
   47e80:	pand   %xmm7,%xmm1
   47e84:	psrad  $0x1,%xmm6
   47e89:	psrad  $0x1,%xmm1
   47e8e:	movdqa %xmm6,%xmm3
   47e92:	movdqa %xmm1,%xmm5
   47e96:	paddd  %xmm4,%xmm6
   47e9a:	paddd  %xmm0,%xmm1
   47e9e:	psubd  %xmm4,%xmm3
   47ea2:	psubd  %xmm0,%xmm5
   47ea6:	movdqa 0x241d2(%rip),%xmm2        # 6c080 <PD_DESCALE_P1_2>
   47eae:	punpckldq %xmm3,%xmm6
   47eb2:	movdqa %xmm1,%xmm7
   47eb6:	punpcklqdq %xmm5,%xmm1
   47eba:	punpckhqdq %xmm5,%xmm7
   47ebe:	paddd  %xmm2,%xmm6
   47ec2:	psrad  $0xd,%xmm6
   47ec7:	paddd  %xmm2,%xmm1
   47ecb:	paddd  %xmm2,%xmm7
   47ecf:	psrad  $0xd,%xmm1
   47ed4:	psrad  $0xd,%xmm7
   47ed9:	prefetchnta 0x80(%rsi)
   47ee0:	prefetchnta 0xa0(%rsi)
   47ee7:	prefetchnta 0xc0(%rsi)
   47eee:	prefetchnta 0xe0(%rsi)
   47ef5:	mov    %r12,%rdi
   47ef8:	mov    %r13d,%eax
   47efb:	packssdw %xmm1,%xmm1
   47eff:	packssdw %xmm7,%xmm7
   47f03:	pmaddwd 0x24135(%rip),%xmm1        # 6c040 <PW_F362_MF127>
   47f0b:	pmaddwd 0x2413d(%rip),%xmm7        # 6c050 <PW_F085_MF072>
   47f13:	paddd  %xmm7,%xmm1
   47f17:	pslld  $0xf,%xmm6
   47f1c:	movdqa %xmm6,%xmm4
   47f20:	paddd  %xmm1,%xmm6
   47f24:	psubd  %xmm1,%xmm4
   47f28:	punpckldq %xmm4,%xmm6
   47f2c:	paddd  0x2415c(%rip),%xmm6        # 6c090 <PD_DESCALE_P2_2>
   47f34:	psrad  $0x14,%xmm6
   47f39:	packssdw %xmm6,%xmm6
   47f3d:	packsswb %xmm6,%xmm6
   47f41:	paddb  0x24157(%rip),%xmm6        # 6c0a0 <PB_CENTERJSAMP>
   47f49:	pextrw $0x0,%xmm6,%ebx
   47f4e:	pextrw $0x1,%xmm6,%ecx
   47f53:	mov    (%rdi),%rdx
   47f56:	mov    0x8(%rdi),%rsi
   47f5a:	mov    %bx,(%rdx,%rax,1)
   47f5e:	mov    %cx,(%rsi,%rax,1)
   47f62:	pop    %rbx
   47f63:	pop    %r15
   47f65:	pop    %r14
   47f67:	pop    %r13
   47f69:	pop    %r12
   47f6b:	pop    %r11
   47f6d:	pop    %r10
   47f6f:	pop    %rbp
   47f70:	retq   
   47f71:	nop
   47f72:	nop
   47f73:	nop
   47f74:	nop
   47f75:	nop
   47f76:	nop
   47f77:	nop
   47f78:	nop
   47f79:	nop
   47f7a:	nop
   47f7b:	nop
   47f7c:	nop
   47f7d:	nop
   47f7e:	nop
   47f7f:	nop

0000000000047f80 <jsimd_convsamp_float_sse2>:
   47f80:	push   %rbp
   47f81:	mov    %rsp,%rax
   47f84:	mov    %rsp,%rbp
   47f87:	push   %r10
   47f89:	push   %r11
   47f8b:	push   %r12
   47f8d:	push   %r13
   47f8f:	push   %r14
   47f91:	push   %r15
   47f93:	mov    %rdi,%r10
   47f96:	mov    %rsi,%r11
   47f99:	mov    %rdx,%r12
   47f9c:	mov    %rcx,%r13
   47f9f:	mov    %r8,%r14
   47fa2:	mov    %r9,%r15
   47fa5:	push   %rbx
   47fa6:	pcmpeqw %xmm7,%xmm7
   47faa:	psllw  $0x7,%xmm7
   47faf:	packsswb %xmm7,%xmm7
   47fb3:	mov    %r10,%rsi
   47fb6:	mov    %r11d,%eax
   47fb9:	mov    %r12,%rdi
   47fbc:	mov    $0x4,%ecx

0000000000047fc1 <jsimd_convsamp_float_sse2.convloop>:
   47fc1:	mov    (%rsi),%rbx
   47fc4:	mov    0x8(%rsi),%rdx
   47fc8:	movq   (%rbx,%rax,1),%xmm0
   47fcd:	movq   (%rdx,%rax,1),%xmm1
   47fd2:	psubb  %xmm7,%xmm0
   47fd6:	psubb  %xmm7,%xmm1
   47fda:	punpcklbw %xmm0,%xmm0
   47fde:	punpcklbw %xmm1,%xmm1
   47fe2:	punpcklwd %xmm0,%xmm2
   47fe6:	punpckhwd %xmm0,%xmm0
   47fea:	punpcklwd %xmm1,%xmm3
   47fee:	punpckhwd %xmm1,%xmm1
   47ff2:	psrad  $0x18,%xmm2
   47ff7:	psrad  $0x18,%xmm0
   47ffc:	cvtdq2ps %xmm2,%xmm2
   47fff:	cvtdq2ps %xmm0,%xmm0
   48002:	psrad  $0x18,%xmm3
   48007:	psrad  $0x18,%xmm1
   4800c:	cvtdq2ps %xmm3,%xmm3
   4800f:	cvtdq2ps %xmm1,%xmm1
   48012:	movaps %xmm2,(%rdi)
   48015:	movaps %xmm0,0x10(%rdi)
   48019:	movaps %xmm3,0x20(%rdi)
   4801d:	movaps %xmm1,0x30(%rdi)
   48021:	add    $0x10,%rsi
   48025:	add    $0x40,%rdi
   48029:	dec    %rcx
   4802c:	jne    47fc1 <jsimd_convsamp_float_sse2.convloop>
   4802e:	pop    %rbx
   4802f:	pop    %r15
   48031:	pop    %r14
   48033:	pop    %r13
   48035:	pop    %r12
   48037:	pop    %r11
   48039:	pop    %r10
   4803b:	pop    %rbp
   4803c:	retq   
   4803d:	nop
   4803e:	nop
   4803f:	nop

0000000000048040 <jsimd_quantize_float_sse2>:
   48040:	push   %rbp
   48041:	mov    %rsp,%rax
   48044:	mov    %rsp,%rbp
   48047:	push   %r10
   48049:	push   %r11
   4804b:	push   %r12
   4804d:	push   %r13
   4804f:	push   %r14
   48051:	push   %r15
   48053:	mov    %rdi,%r10
   48056:	mov    %rsi,%r11
   48059:	mov    %rdx,%r12
   4805c:	mov    %rcx,%r13
   4805f:	mov    %r8,%r14
   48062:	mov    %r9,%r15
   48065:	mov    %r12,%rsi
   48068:	mov    %r11,%rdx
   4806b:	mov    %r10,%rdi
   4806e:	mov    $0x4,%eax

0000000000048073 <jsimd_quantize_float_sse2.quantloop>:
   48073:	movaps (%rsi),%xmm0
   48076:	movaps 0x10(%rsi),%xmm1
   4807a:	mulps  (%rdx),%xmm0
   4807d:	mulps  0x10(%rdx),%xmm1
   48081:	movaps 0x20(%rsi),%xmm2
   48085:	movaps 0x30(%rsi),%xmm3
   48089:	mulps  0x20(%rdx),%xmm2
   4808d:	mulps  0x30(%rdx),%xmm3
   48091:	cvtps2dq %xmm0,%xmm0
   48095:	cvtps2dq %xmm1,%xmm1
   48099:	cvtps2dq %xmm2,%xmm2
   4809d:	cvtps2dq %xmm3,%xmm3
   480a1:	packssdw %xmm1,%xmm0
   480a5:	packssdw %xmm3,%xmm2
   480a9:	movdqa %xmm0,(%rdi)
   480ad:	movdqa %xmm2,0x10(%rdi)
   480b2:	add    $0x40,%rsi
   480b6:	add    $0x40,%rdx
   480ba:	add    $0x20,%rdi
   480be:	dec    %rax
   480c1:	jne    48073 <jsimd_quantize_float_sse2.quantloop>
   480c3:	pop    %r15
   480c5:	pop    %r14
   480c7:	pop    %r13
   480c9:	pop    %r12
   480cb:	pop    %r11
   480cd:	pop    %r10
   480cf:	pop    %rbp
   480d0:	retq   
   480d1:	nop
   480d2:	nop
   480d3:	nop
   480d4:	nop
   480d5:	nop
   480d6:	nop
   480d7:	nop
   480d8:	nop
   480d9:	nop
   480da:	nop
   480db:	nop
   480dc:	nop
   480dd:	nop
   480de:	nop
   480df:	nop

00000000000480e0 <jsimd_convsamp_sse2>:
   480e0:	push   %rbp
   480e1:	mov    %rsp,%rax
   480e4:	mov    %rsp,%rbp
   480e7:	push   %r10
   480e9:	push   %r11
   480eb:	push   %r12
   480ed:	push   %r13
   480ef:	push   %r14
   480f1:	push   %r15
   480f3:	mov    %rdi,%r10
   480f6:	mov    %rsi,%r11
   480f9:	mov    %rdx,%r12
   480fc:	mov    %rcx,%r13
   480ff:	mov    %r8,%r14
   48102:	mov    %r9,%r15
   48105:	push   %rbx
   48106:	pxor   %xmm6,%xmm6
   4810a:	pcmpeqw %xmm7,%xmm7
   4810e:	psllw  $0x7,%xmm7
   48113:	mov    %r10,%rsi
   48116:	mov    %r11d,%eax
   48119:	mov    %r12,%rdi
   4811c:	mov    $0x2,%ecx

0000000000048121 <jsimd_convsamp_sse2.convloop>:
   48121:	mov    (%rsi),%rbx
   48124:	mov    0x8(%rsi),%rdx
   48128:	movq   (%rbx,%rax,1),%xmm0
   4812d:	movq   (%rdx,%rax,1),%xmm1
   48132:	mov    0x10(%rsi),%rbx
   48136:	mov    0x18(%rsi),%rdx
   4813a:	movq   (%rbx,%rax,1),%xmm2
   4813f:	movq   (%rdx,%rax,1),%xmm3
   48144:	punpcklbw %xmm6,%xmm0
   48148:	punpcklbw %xmm6,%xmm1
   4814c:	paddw  %xmm7,%xmm0
   48150:	paddw  %xmm7,%xmm1
   48154:	punpcklbw %xmm6,%xmm2
   48158:	punpcklbw %xmm6,%xmm3
   4815c:	paddw  %xmm7,%xmm2
   48160:	paddw  %xmm7,%xmm3
   48164:	movdqa %xmm0,(%rdi)
   48168:	movdqa %xmm1,0x10(%rdi)
   4816d:	movdqa %xmm2,0x20(%rdi)
   48172:	movdqa %xmm3,0x30(%rdi)
   48177:	add    $0x20,%rsi
   4817b:	add    $0x40,%rdi
   4817f:	dec    %rcx
   48182:	jne    48121 <jsimd_convsamp_sse2.convloop>
   48184:	pop    %rbx
   48185:	pop    %r15
   48187:	pop    %r14
   48189:	pop    %r13
   4818b:	pop    %r12
   4818d:	pop    %r11
   4818f:	pop    %r10
   48191:	pop    %rbp
   48192:	retq   
   48193:	nop
   48194:	nop
   48195:	nop
   48196:	nop
   48197:	nop
   48198:	nop
   48199:	nop
   4819a:	nop
   4819b:	nop
   4819c:	nop
   4819d:	nop
   4819e:	nop
   4819f:	nop

00000000000481a0 <jsimd_quantize_sse2>:
   481a0:	push   %rbp
   481a1:	mov    %rsp,%rax
   481a4:	mov    %rsp,%rbp
   481a7:	push   %r10
   481a9:	push   %r11
   481ab:	push   %r12
   481ad:	push   %r13
   481af:	push   %r14
   481b1:	push   %r15
   481b3:	mov    %rdi,%r10
   481b6:	mov    %rsi,%r11
   481b9:	mov    %rdx,%r12
   481bc:	mov    %rcx,%r13
   481bf:	mov    %r8,%r14
   481c2:	mov    %r9,%r15
   481c5:	mov    %r12,%rsi
   481c8:	mov    %r11,%rdx
   481cb:	mov    %r10,%rdi
   481ce:	mov    $0x2,%eax

00000000000481d3 <jsimd_quantize_sse2.quantloop>:
   481d3:	movdqa (%rsi),%xmm4
   481d7:	movdqa 0x10(%rsi),%xmm5
   481dc:	movdqa 0x20(%rsi),%xmm6
   481e1:	movdqa 0x30(%rsi),%xmm7
   481e6:	movdqa %xmm4,%xmm0
   481ea:	movdqa %xmm5,%xmm1
   481ee:	movdqa %xmm6,%xmm2
   481f2:	movdqa %xmm7,%xmm3
   481f6:	psraw  $0xf,%xmm4
   481fb:	psraw  $0xf,%xmm5
   48200:	psraw  $0xf,%xmm6
   48205:	psraw  $0xf,%xmm7
   4820a:	pxor   %xmm4,%xmm0
   4820e:	pxor   %xmm5,%xmm1
   48212:	pxor   %xmm6,%xmm2
   48216:	pxor   %xmm7,%xmm3
   4821a:	psubw  %xmm4,%xmm0
   4821e:	psubw  %xmm5,%xmm1
   48222:	psubw  %xmm6,%xmm2
   48226:	psubw  %xmm7,%xmm3
   4822a:	paddw  0x80(%rdx),%xmm0
   48232:	paddw  0x90(%rdx),%xmm1
   4823a:	paddw  0xa0(%rdx),%xmm2
   48242:	paddw  0xb0(%rdx),%xmm3
   4824a:	pmulhuw (%rdx),%xmm0
   4824e:	pmulhuw 0x10(%rdx),%xmm1
   48253:	pmulhuw 0x20(%rdx),%xmm2
   48258:	pmulhuw 0x30(%rdx),%xmm3
   4825d:	pmulhuw 0x100(%rdx),%xmm0
   48265:	pmulhuw 0x110(%rdx),%xmm1
   4826d:	pmulhuw 0x120(%rdx),%xmm2
   48275:	pmulhuw 0x130(%rdx),%xmm3
   4827d:	pxor   %xmm4,%xmm0
   48281:	pxor   %xmm5,%xmm1
   48285:	pxor   %xmm6,%xmm2
   48289:	pxor   %xmm7,%xmm3
   4828d:	psubw  %xmm4,%xmm0
   48291:	psubw  %xmm5,%xmm1
   48295:	psubw  %xmm6,%xmm2
   48299:	psubw  %xmm7,%xmm3
   4829d:	movdqa %xmm0,(%rdi)
   482a1:	movdqa %xmm1,0x10(%rdi)
   482a6:	movdqa %xmm2,0x20(%rdi)
   482ab:	movdqa %xmm3,0x30(%rdi)
   482b0:	add    $0x40,%rsi
   482b4:	add    $0x40,%rdx
   482b8:	add    $0x40,%rdi
   482bc:	dec    %rax
   482bf:	jne    481d3 <jsimd_quantize_sse2.quantloop>
   482c5:	pop    %r15
   482c7:	pop    %r14
   482c9:	pop    %r13
   482cb:	pop    %r12
   482cd:	pop    %r11
   482cf:	pop    %r10
   482d1:	pop    %rbp
   482d2:	retq   
   482d3:	nop
   482d4:	nop
   482d5:	nop
   482d6:	nop
   482d7:	nop
   482d8:	nop
   482d9:	nop
   482da:	nop
   482db:	nop
   482dc:	nop
   482dd:	nop
   482de:	nop
   482df:	nop

Disassembly of section .fini:

00000000000482e0 <_fini>:
   482e0:	endbr64 
   482e4:	sub    $0x8,%rsp
   482e8:	add    $0x8,%rsp
   482ec:	retq   
