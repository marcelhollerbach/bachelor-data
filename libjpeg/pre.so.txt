
re.so:     file format elf64-x86-64


ly of section .init:

0004000 <_init>:
	endbr64 
	sub    $0x8,%rsp
	mov    0x69f41(%rip),%rax        # 6df50 <__gmon_start__>
	test   %rax,%rax
	je     4016 <_init+0x16>
	callq  *%rax
	add    $0x8,%rsp
	retq   

ly of section .plt:

0004020 <.plt>:
	pushq  0x69fe2(%rip)        # 6e008 <_GLOBAL_OFFSET_TABLE_+0x8>
	jmpq   *0x69fe4(%rip)        # 6e010 <_GLOBAL_OFFSET_TABLE_+0x10>
	nopl   0x0(%rax)

0004030 <jpeg_destroy@plt>:
	jmpq   *0x69fe2(%rip)        # 6e018 <jpeg_destroy@@LIBJPEG_6.2+0x59738>
	pushq  $0x0
	jmpq   4020 <.plt>

0004040 <getenv@plt>:
	jmpq   *0x69fda(%rip)        # 6e020 <getenv@GLIBC_2.2.5>
	pushq  $0x1
	jmpq   4020 <.plt>

0004050 <jinit_d_coef_controller@plt>:
	jmpq   *0x69fd2(%rip)        # 6e028 <jinit_d_coef_controller@@LIBJPEG_6.2+0x539d8>
	pushq  $0x2
	jmpq   4020 <.plt>

0004060 <free@plt>:
	jmpq   *0x69fca(%rip)        # 6e030 <free@GLIBC_2.2.5>
	pushq  $0x3
	jmpq   4020 <.plt>

0004070 <jpeg_default_colorspace@plt>:
	jmpq   *0x69fc2(%rip)        # 6e038 <jpeg_default_colorspace@@LIBJPEG_6.2+0x590e8>
	pushq  $0x4
	jmpq   4020 <.plt>

0004080 <jinit_huff_encoder@plt>:
	jmpq   *0x69fba(%rip)        # 6e040 <jinit_huff_encoder@@LIBJPEG_6.2+0x66000>
	pushq  $0x5
	jmpq   4020 <.plt>

0004090 <jinit_arith_decoder@plt>:
	jmpq   *0x69fb2(%rip)        # 6e048 <jinit_arith_decoder@@LIBJPEG_6.2+0x32338>
	pushq  $0x6
	jmpq   4020 <.plt>

00040a0 <jpeg_get_large@plt>:
	jmpq   *0x69faa(%rip)        # 6e050 <jpeg_get_large@@LIBJPEG_6.2+0x33ea0>
	pushq  $0x7
	jmpq   4020 <.plt>

00040b0 <jinit_huff_decoder@plt>:
	jmpq   *0x69fa2(%rip)        # 6e058 <jinit_huff_decoder@@LIBJPEG_6.2+0x4e298>
	pushq  $0x8
	jmpq   4020 <.plt>

00040c0 <ferror@plt>:
	jmpq   *0x69f9a(%rip)        # 6e060 <ferror@GLIBC_2.2.5>
	pushq  $0x9
	jmpq   4020 <.plt>

00040d0 <jpeg_make_c_derived_tbl@plt>:
	jmpq   *0x69f92(%rip)        # 6e068 <jpeg_make_c_derived_tbl@@LIBJPEG_6.2+0x65fa8>
	pushq  $0xa
	jmpq   4020 <.plt>

00040e0 <fread@plt>:
	jmpq   *0x69f8a(%rip)        # 6e070 <fread@GLIBC_2.2.5>
	pushq  $0xb
	jmpq   4020 <.plt>

00040f0 <jpeg_gen_optimal_table@plt>:
	jmpq   *0x69f82(%rip)        # 6e078 <jpeg_gen_optimal_table@@LIBJPEG_6.2+0x65d48>
	pushq  $0xc
	jmpq   4020 <.plt>

0004100 <jinit_2pass_quantizer@plt>:
	jmpq   *0x69f7a(%rip)        # 6e080 <jinit_2pass_quantizer@@LIBJPEG_6.2+0x37220>
	pushq  $0xd
	jmpq   4020 <.plt>

0004110 <jpeg_set_defaults@plt>:
	jmpq   *0x69f72(%rip)        # 6e088 <jpeg_set_defaults@@LIBJPEG_6.2+0x59768>
	pushq  $0xe
	jmpq   4020 <.plt>

0004120 <jinit_marker_writer@plt>:
	jmpq   *0x69f6a(%rip)        # 6e090 <jinit_marker_writer@@LIBJPEG_6.2+0x5b670>
	pushq  $0xf
	jmpq   4020 <.plt>

0004130 <jpeg_abort@plt>:
	jmpq   *0x69f62(%rip)        # 6e098 <jpeg_abort@@LIBJPEG_6.2+0x59838>
	pushq  $0x10
	jmpq   4020 <.plt>

0004140 <jinit_c_main_controller@plt>:
	jmpq   *0x69f5a(%rip)        # 6e0a0 <jinit_c_main_controller@@LIBJPEG_6.2+0x5b950>
	pushq  $0x11
	jmpq   4020 <.plt>

0004150 <jdiv_round_up@plt>:
	jmpq   *0x69f52(%rip)        # 6e0a8 <jdiv_round_up@@LIBJPEG_6.2+0x354d8>
	pushq  $0x12
	jmpq   4020 <.plt>

0004160 <jpeg_consume_input@plt>:
	jmpq   *0x69f4a(%rip)        # 6e0b0 <jpeg_consume_input@@LIBJPEG_6.2+0x557f0>
	pushq  $0x13
	jmpq   4020 <.plt>

0004170 <jpeg_set_colorspace@plt>:
	jmpq   *0x69f42(%rip)        # 6e0b8 <jpeg_set_colorspace@@LIBJPEG_6.2+0x59628>
	pushq  $0x14
	jmpq   4020 <.plt>

0004180 <jpeg_free_large@plt>:
	jmpq   *0x69f3a(%rip)        # 6e0c0 <jpeg_free_large@@LIBJPEG_6.2+0x33f00>
	pushq  $0x15
	jmpq   4020 <.plt>

0004190 <jinit_arith_encoder@plt>:
	jmpq   *0x69f32(%rip)        # 6e0c8 <jinit_arith_encoder@@LIBJPEG_6.2+0x33e88>
	pushq  $0x16
	jmpq   4020 <.plt>

00041a0 <jinit_forward_dct@plt>:
	jmpq   *0x69f2a(%rip)        # 6e0d0 <jinit_forward_dct@@LIBJPEG_6.2+0x66ba0>
	pushq  $0x17
	jmpq   4020 <.plt>

00041b0 <jinit_color_converter@plt>:
	jmpq   *0x69f22(%rip)        # 6e0d8 <jinit_color_converter@@LIBJPEG_6.2+0x68878>
	pushq  $0x18
	jmpq   4020 <.plt>

00041c0 <jpeg_huff_decode@plt>:
	jmpq   *0x69f1a(%rip)        # 6e0e0 <jpeg_huff_decode@@LIBJPEG_6.2+0x4dd60>
	pushq  $0x19
	jmpq   4020 <.plt>

00041d0 <jinit_phuff_decoder@plt>:
	jmpq   *0x69f12(%rip)        # 6e0e8 <jinit_phuff_decoder@@LIBJPEG_6.2+0x43478>
	pushq  $0x1a
	jmpq   4020 <.plt>

00041e0 <memset@plt>:
	jmpq   *0x69f0a(%rip)        # 6e0f0 <memset@GLIBC_2.2.5>
	pushq  $0x1b
	jmpq   4020 <.plt>

00041f0 <jinit_master_decompress@plt>:
	jmpq   *0x69f02(%rip)        # 6e0f8 <jinit_master_decompress@@LIBJPEG_6.2+0x47d38>
	pushq  $0x1c
	jmpq   4020 <.plt>

0004200 <jinit_compress_master@plt>:
	jmpq   *0x69efa(%rip)        # 6e100 <jinit_compress_master@@LIBJPEG_6.2+0x5ba90>
	pushq  $0x1d
	jmpq   4020 <.plt>

0004210 <jpeg_get_small@plt>:
	jmpq   *0x69ef2(%rip)        # 6e108 <jpeg_get_small@@LIBJPEG_6.2+0x33f78>
	pushq  $0x1e
	jmpq   4020 <.plt>

0004220 <jinit_d_post_controller@plt>:
	jmpq   *0x69eea(%rip)        # 6e110 <jinit_d_post_controller@@LIBJPEG_6.2+0x42000>
	pushq  $0x1f
	jmpq   4020 <.plt>

0004230 <jinit_1pass_quantizer@plt>:
	jmpq   *0x69ee2(%rip)        # 6e118 <jinit_1pass_quantizer@@LIBJPEG_6.2+0x38268>
	pushq  $0x20
	jmpq   4020 <.plt>

0004240 <jinit_memory_mgr@plt>:
	jmpq   *0x69eda(%rip)        # 6e120 <jinit_memory_mgr@@LIBJPEG_6.2+0x35490>
	pushq  $0x21
	jmpq   4020 <.plt>

0004250 <jinit_d_main_controller@plt>:
	jmpq   *0x69ed2(%rip)        # 6e128 <jinit_d_main_controller@@LIBJPEG_6.2+0x4ba48>
	pushq  $0x22
	jmpq   4020 <.plt>

0004260 <strcmp@plt>:
	jmpq   *0x69eca(%rip)        # 6e130 <strcmp@GLIBC_2.2.5>
	pushq  $0x23
	jmpq   4020 <.plt>

0004270 <jpeg_alloc_quant_table@plt>:
	jmpq   *0x69ec2(%rip)        # 6e138 <jpeg_alloc_quant_table@@LIBJPEG_6.2+0x59918>
	pushq  $0x24
	jmpq   4020 <.plt>

0004280 <jpeg_mem_available@plt>:
	jmpq   *0x69eba(%rip)        # 6e140 <jpeg_mem_available@@LIBJPEG_6.2+0x33f70>
	pushq  $0x25
	jmpq   4020 <.plt>

0004290 <jinit_merged_upsampler@plt>:
	jmpq   *0x69eb2(%rip)        # 6e148 <jinit_merged_upsampler@@LIBJPEG_6.2+0x46ff8>
	pushq  $0x26
	jmpq   4020 <.plt>

00042a0 <fprintf@plt>:
	jmpq   *0x69eaa(%rip)        # 6e150 <fprintf@GLIBC_2.2.5>
	pushq  $0x27
	jmpq   4020 <.plt>

00042b0 <jround_up@plt>:
	jmpq   *0x69ea2(%rip)        # 6e158 <jround_up@@LIBJPEG_6.2+0x35578>
	pushq  $0x28
	jmpq   4020 <.plt>

00042c0 <memcpy@plt>:
	jmpq   *0x69e9a(%rip)        # 6e160 <memcpy@GLIBC_2.14>
	pushq  $0x29
	jmpq   4020 <.plt>

00042d0 <jpeg_calc_output_dimensions@plt>:
	jmpq   *0x69e92(%rip)        # 6e168 <jpeg_calc_output_dimensions@@LIBJPEG_6.2+0x47fb8>
	pushq  $0x2a
	jmpq   4020 <.plt>

00042e0 <jinit_c_prep_controller@plt>:
	jmpq   *0x69e8a(%rip)        # 6e170 <jinit_c_prep_controller@@LIBJPEG_6.2+0x57990>
	pushq  $0x2b
	jmpq   4020 <.plt>

00042f0 <jpeg_add_quant_table@plt>:
	jmpq   *0x69e82(%rip)        # 6e178 <jpeg_add_quant_table@@LIBJPEG_6.2+0x59118>
	pushq  $0x2c
	jmpq   4020 <.plt>

0004300 <jinit_inverse_dct@plt>:
	jmpq   *0x69e7a(%rip)        # 6e180 <jinit_inverse_dct@@LIBJPEG_6.2+0x4ed10>
	pushq  $0x2d
	jmpq   4020 <.plt>

0004310 <jpeg_set_quality@plt>:
	jmpq   *0x69e72(%rip)        # 6e188 <jpeg_set_quality@@LIBJPEG_6.2+0x591c8>
	pushq  $0x2e
	jmpq   4020 <.plt>

0004320 <malloc@plt>:
	jmpq   *0x69e6a(%rip)        # 6e190 <malloc@GLIBC_2.2.5>
	pushq  $0x2f
	jmpq   4020 <.plt>

0004330 <fflush@plt>:
	jmpq   *0x69e62(%rip)        # 6e198 <fflush@GLIBC_2.2.5>
	pushq  $0x30
	jmpq   4020 <.plt>

0004340 <jpeg_free_small@plt>:
	jmpq   *0x69e5a(%rip)        # 6e1a0 <jpeg_free_small@@LIBJPEG_6.2+0x34000>
	pushq  $0x31
	jmpq   4020 <.plt>

0004350 <jpeg_mem_term@plt>:
	jmpq   *0x69e52(%rip)        # 6e1a8 <jpeg_mem_term@@LIBJPEG_6.2+0x33f78>
	pushq  $0x32
	jmpq   4020 <.plt>

0004360 <jinit_color_deconverter@plt>:
	jmpq   *0x69e4a(%rip)        # 6e1b0 <jinit_color_deconverter@@LIBJPEG_6.2+0x525c0>
	pushq  $0x33
	jmpq   4020 <.plt>

0004370 <sscanf@plt>:
	jmpq   *0x69e42(%rip)        # 6e1b8 <sscanf@GLIBC_2.2.5>
	pushq  $0x34
	jmpq   4020 <.plt>

0004380 <jinit_c_coef_controller@plt>:
	jmpq   *0x69e3a(%rip)        # 6e1c0 <jinit_c_coef_controller@@LIBJPEG_6.2+0x69380>
	pushq  $0x35
	jmpq   4020 <.plt>

0004390 <jpeg_suppress_tables@plt>:
	jmpq   *0x69e32(%rip)        # 6e1c8 <jpeg_suppress_tables@@LIBJPEG_6.2+0x69ab8>
	pushq  $0x36
	jmpq   4020 <.plt>

00043a0 <jpeg_open_backing_store@plt>:
	jmpq   *0x69e2a(%rip)        # 6e1d0 <jpeg_open_backing_store@@LIBJPEG_6.2+0x33fd0>
	pushq  $0x37
	jmpq   4020 <.plt>

00043b0 <jpeg_quality_scaling@plt>:
	jmpq   *0x69e22(%rip)        # 6e1d8 <jpeg_quality_scaling@@LIBJPEG_6.2+0x59028>
	pushq  $0x38
	jmpq   4020 <.plt>

00043c0 <jinit_c_master_control@plt>:
	jmpq   *0x69e1a(%rip)        # 6e1e0 <jinit_c_master_control@@LIBJPEG_6.2+0x5a980>
	pushq  $0x39
	jmpq   4020 <.plt>

00043d0 <jinit_input_controller@plt>:
	jmpq   *0x69e12(%rip)        # 6e1e8 <jinit_input_controller@@LIBJPEG_6.2+0x4c308>
	pushq  $0x3a
	jmpq   4020 <.plt>

00043e0 <jinit_upsampler@plt>:
	jmpq   *0x69e0a(%rip)        # 6e1f0 <jinit_upsampler@@LIBJPEG_6.2+0x41c00>
	pushq  $0x3b
	jmpq   4020 <.plt>

00043f0 <jcopy_sample_rows@plt>:
	jmpq   *0x69e02(%rip)        # 6e1f8 <jcopy_sample_rows@@LIBJPEG_6.2+0x355f8>
	pushq  $0x3c
	jmpq   4020 <.plt>

0004400 <jpeg_set_linear_quality@plt>:
	jmpq   *0x69dfa(%rip)        # 6e200 <jpeg_set_linear_quality@@LIBJPEG_6.2+0x59200>
	pushq  $0x3d
	jmpq   4020 <.plt>

0004410 <jpeg_fill_bit_buffer@plt>:
	jmpq   *0x69df2(%rip)        # 6e208 <jpeg_fill_bit_buffer@@LIBJPEG_6.2+0x4e0a8>
	pushq  $0x3e
	jmpq   4020 <.plt>

0004420 <jpeg_read_scanlines@plt>:
	jmpq   *0x69dea(%rip)        # 6e210 <jpeg_read_scanlines@@LIBJPEG_6.2+0x55480>
	pushq  $0x3f
	jmpq   4020 <.plt>

0004430 <sprintf@plt>:
	jmpq   *0x69de2(%rip)        # 6e218 <sprintf@GLIBC_2.2.5>
	pushq  $0x40
	jmpq   4020 <.plt>

0004440 <exit@plt>:
	jmpq   *0x69dda(%rip)        # 6e220 <exit@GLIBC_2.2.5>
	pushq  $0x41
	jmpq   4020 <.plt>

0004450 <fwrite@plt>:
	jmpq   *0x69dd2(%rip)        # 6e228 <fwrite@GLIBC_2.2.5>
	pushq  $0x42
	jmpq   4020 <.plt>

0004460 <jinit_phuff_encoder@plt>:
	jmpq   *0x69dca(%rip)        # 6e230 <jinit_phuff_encoder@@LIBJPEG_6.2+0x58b10>
	pushq  $0x43
	jmpq   4020 <.plt>

0004470 <jcopy_block_row@plt>:
	jmpq   *0x69dc2(%rip)        # 6e238 <jcopy_block_row@@LIBJPEG_6.2+0x355d8>
	pushq  $0x44
	jmpq   4020 <.plt>

0004480 <jinit_downsampler@plt>:
	jmpq   *0x69dba(%rip)        # 6e240 <jinit_downsampler@@LIBJPEG_6.2+0x57220>
	pushq  $0x45
	jmpq   4020 <.plt>

0004490 <jpeg_mem_init@plt>:
	jmpq   *0x69db2(%rip)        # 6e248 <jpeg_mem_init@@LIBJPEG_6.2+0x34028>
	pushq  $0x46
	jmpq   4020 <.plt>

00044a0 <jpeg_alloc_huff_table@plt>:
	jmpq   *0x69daa(%rip)        # 6e250 <jpeg_alloc_huff_table@@LIBJPEG_6.2+0x59a10>
	pushq  $0x47
	jmpq   4020 <.plt>

00044b0 <jinit_marker_reader@plt>:
	jmpq   *0x69da2(%rip)        # 6e258 <jinit_marker_reader@@LIBJPEG_6.2+0x4ae98>
	pushq  $0x48
	jmpq   4020 <.plt>

00044c0 <jpeg_make_d_derived_tbl@plt>:
	jmpq   *0x69d9a(%rip)        # 6e260 <jpeg_make_d_derived_tbl@@LIBJPEG_6.2+0x4e430>
	pushq  $0x49
	jmpq   4020 <.plt>

00044d0 <jzero_far@plt>:
	jmpq   *0x69d92(%rip)        # 6e268 <jzero_far@@LIBJPEG_6.2+0x355e8>
	pushq  $0x4a
	jmpq   4020 <.plt>

ly of section .text:

00044e0 <deregister_tm_clones>:
	lea    0x69d99(%rip),%rdi        # 6e280 <__TMC_END__>
	lea    0x69d92(%rip),%rax        # 6e280 <__TMC_END__>
	cmp    %rdi,%rax
	je     4508 <deregister_tm_clones+0x28>
	mov    0x69a16(%rip),%rax        # 6df10 <_ITM_deregisterTMCloneTable>
	test   %rax,%rax
	je     4508 <deregister_tm_clones+0x28>
	jmpq   *%rax
	nopl   0x0(%rax)
	retq   
	nopl   0x0(%rax)

0004510 <register_tm_clones>:
	lea    0x69d69(%rip),%rdi        # 6e280 <__TMC_END__>
	lea    0x69d62(%rip),%rsi        # 6e280 <__TMC_END__>
	sub    %rdi,%rsi
	sar    $0x3,%rsi
	mov    %rsi,%rax
	shr    $0x3f,%rax
	add    %rax,%rsi
	sar    %rsi
	je     4548 <register_tm_clones+0x38>
	mov    0x69a95(%rip),%rax        # 6dfd0 <_ITM_registerTMCloneTable>
	test   %rax,%rax
	je     4548 <register_tm_clones+0x38>
	jmpq   *%rax
	nopw   0x0(%rax,%rax,1)
	retq   
	nopl   0x0(%rax)

0004550 <__do_global_dtors_aux>:
	endbr64 
	cmpb   $0x0,0x69d25(%rip)        # 6e280 <__TMC_END__>
	jne    4590 <F_2_172+0x9>
	push   %rbp
	cmpq   $0x0,0x69a8a(%rip)        # 6dff0 <__cxa_finalize@GLIBC_2.2.5>
	mov    %rsp,%rbp
	je     4578 <__do_global_dtors_aux+0x28>
	mov    0x69cfe(%rip),%rdi        # 6e270 <__dso_handle>
	callq  *0x69a78(%rip)        # 6dff0 <__cxa_finalize@GLIBC_2.2.5>
	callq  44e0 <deregister_tm_clones>
	movb   $0x1,0x69cfc(%rip)        # 6e280 <__TMC_END__>
	pop    %rbp
	retq   
	nopw   %cs:0x0(%rax,%rax,1)
	retq   
	data16 nopw %cs:0x0(%rax,%rax,1)
	nopl   0x0(%rax)

00045a0 <frame_dummy>:
	endbr64 
	jmpq   4510 <register_tm_clones>
	nopl   0x0(%rax)

00045b0 <jpeg_CreateCompress>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %r14,-0x18(%rbp)
	mov    %r15,-0x20(%rbp)
	mov    %r12,-0x8(%rbp)
	mov    %r13,-0x10(%rbp)
	movq   $0x0,0x8(%rdi)
	cmp    $0x3e,%esi
	jne    45da <jpeg_CreateCompress+0x2a>
	mov    %rdi,%r13
	jmp    4605 <jpeg_CreateCompress+0x55>
	mov    (%rdi),%rax
	movl   $0xc,0x28(%rax)
	mov    (%rdi),%rax
	movl   $0x3e,0x2c(%rax)
	mov    (%rdi),%rax
	mov    %esi,0x30(%rax)
	mov    (%rdi),%rax
	mov    (%rax),%rax
	mov    %rdx,%r12
	mov    %rdi,%r13
	callq  *%rax
	mov    %r12,%rdx
	cmp    $0x208,%rdx
	je     4637 <jpeg_CreateCompress+0x87>
	mov    0x0(%r13),%rax
	movl   $0x15,0x28(%rax)
	mov    0x0(%r13),%rax
	movl   $0x208,0x2c(%rax)
	mov    0x0(%r13),%rax
	mov    %edx,0x30(%rax)
	mov    0x0(%r13),%rax
	mov    (%rax),%rax
	mov    %r13,%rdi
	callq  *%rax
	xor    %r12d,%r12d
	mov    $0x208,%edx
	mov    0x0(%r13),%r14
	mov    0x18(%r13),%r15
	mov    %r13,%rdi
	mov    %r12,%rsi
	callq  41e0 <memset@plt>
	mov    %r14,0x0(%r13)
	mov    %r15,0x18(%r13)
	movl   $0x0,0x20(%r13)
	mov    %r13,%rdi
	callq  4240 <jinit_memory_mgr@plt>
	movq   $0x0,0x10(%r13)
	movq   $0x0,0x28(%r13)
	movq   $0x0,0x58(%r13)
	mov    %r12,%rax
	jmp    4696 <jpeg_CreateCompress+0xe6>
	movslq %eax,%rcx
	movq   $0x0,0x60(%r13,%rcx,8)
	add    $0x1,%eax
	cmp    $0x3,%eax
	jle    4687 <jpeg_CreateCompress+0xd7>
	jmp    46bc <jpeg_CreateCompress+0x10c>
	movslq %r12d,%rax
	movq   $0x0,0x80(%r13,%rax,8)
	movq   $0x0,0xa0(%r13,%rax,8)
	add    $0x1,%r12d
	cmp    $0x3,%r12d
	jle    469d <jpeg_CreateCompress+0xed>
	movq   $0x0,0x1f8(%r13)
	movsd  0x4492b(%rip),%xmm0        # 49000 <_fini+0xd20>
	movsd  %xmm0,0x40(%r13)
	movl   $0x64,0x24(%r13)
	mov    -0x10(%rbp),%r13
	mov    -0x8(%rbp),%r12
	mov    -0x20(%rbp),%r15
	mov    -0x18(%rbp),%r14
	leaveq 
	retq   
	data16 nopw %cs:0x0(%rax,%rax,1)

0004700 <jpeg_destroy_compress>:
	push   %rbp
	mov    %rsp,%rbp
	callq  4030 <jpeg_destroy@plt>
	leaveq 
	retq   
	nopl   0x0(%rax,%rax,1)

0004710 <jpeg_suppress_tables>:
	push   %rbp
	mov    %rsp,%rbp
	xor    %eax,%eax
	mov    %rax,%rcx
	jmp    4731 <jpeg_suppress_tables+0x21>
	movslq %ecx,%rdx
	mov    0x60(%rdi,%rdx,8),%rdx
	test   %rdx,%rdx
	je     472e <jpeg_suppress_tables+0x1e>
	mov    %esi,0x80(%rdx)
	add    $0x1,%ecx
	cmp    $0x3,%ecx
	jle    471b <jpeg_suppress_tables+0xb>
	jmp    4764 <jpeg_suppress_tables+0x54>
	movslq %eax,%rdx
	mov    0x80(%rdi,%rdx,8),%rcx
	test   %rcx,%rcx
	je     474e <jpeg_suppress_tables+0x3e>
	mov    %esi,0x114(%rcx)
	mov    0xa0(%rdi,%rdx,8),%rcx
	test   %rcx,%rcx
	je     4761 <jpeg_suppress_tables+0x51>
	mov    %esi,0x114(%rcx)
	add    $0x1,%eax
	cmp    $0x3,%eax
	jle    4738 <jpeg_suppress_tables+0x28>
	leaveq 
	retq   
	nopl   0x0(%rax,%rax,1)

0004770 <jpeg_finish_compress>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %r14,-0x10(%rbp)
	mov    %r15,-0x18(%rbp)
	mov    %r13,-0x8(%rbp)
	xor    %r14d,%r14d
	movslq 0x24(%rdi),%rax
	cmp    $0x65,%eax
	je     47a2 <jpeg_finish_compress+0x32>
	cmp    $0x66,%eax
	je     47a2 <jpeg_finish_compress+0x32>
	cmp    $0x67,%eax
	jne    47b9 <jpeg_finish_compress+0x49>
	mov    %rdi,%r13
	jmpq   4853 <jpeg_finish_compress+0xe3>
	mov    0x34(%rdi),%eax
	cmp    0x130(%rdi),%eax
	ja     4895 <jpeg_finish_compress+0x125>
	mov    %rdi,%r13
	jmpq   48aa <jpeg_finish_compress+0x13a>
	mov    (%rdi),%rax
	movl   $0x14,0x28(%rax)
	movslq 0x24(%rdi),%rcx
	mov    (%rdi),%rax
	mov    %ecx,0x2c(%rax)
	mov    (%rdi),%rax
	mov    (%rax),%rax
	mov    %rdi,%r13
	callq  *%rax
	jmp    4853 <jpeg_finish_compress+0xe3>
	mov    0x10(%r13),%rax
	test   %rax,%rax
	je     4805 <jpeg_finish_compress+0x95>
	mov    %r15d,%ecx
	mov    %rcx,0x8(%rax)
	mov    0x140(%r13),%ecx
	mov    0x10(%r13),%rax
	mov    %rcx,0x10(%rax)
	mov    0x10(%r13),%rax
	mov    (%rax),%rax
	mov    %r13,%rdi
	callq  *%rax
	mov    0x1c8(%r13),%rax
	mov    0x8(%rax),%rax
	mov    %r13,%rdi
	mov    %r14,%rsi
	callq  *%rax
	test   %eax,%eax
	jne    4833 <jpeg_finish_compress+0xc3>
	mov    0x0(%r13),%rax
	movl   $0x18,0x28(%rax)
	mov    0x0(%r13),%rax
	mov    (%rax),%rax
	mov    %r13,%rdi
	callq  *%rax
	add    $0x1,%r15d
	mov    0x140(%r13),%eax
	cmp    %r15d,%eax
	ja     47da <jpeg_finish_compress+0x6a>
	mov    0x1b0(%r13),%rax
	mov    0x10(%rax),%rax
	mov    %r13,%rdi
	callq  *%rax
	mov    0x1b0(%r13),%rax
	movslq 0x1c(%rax),%rcx
	test   %ecx,%ecx
	je     48bc <jpeg_finish_compress+0x14c>
	mov    0x1d0(%r13),%rax
	mov    0x18(%rax),%rax
	mov    %r13,%rdi
	callq  *%rax
	mov    0x28(%r13),%rax
	mov    0x20(%rax),%rax
	mov    %r13,%rdi
	callq  *%rax
	mov    %r13,%rdi
	callq  4130 <jpeg_abort@plt>
	mov    -0x8(%rbp),%r13
	mov    -0x18(%rbp),%r15
	mov    -0x10(%rbp),%r14
	leaveq 
	retq   
	mov    (%rdi),%rax
	movl   $0x43,0x28(%rax)
	mov    (%rdi),%rax
	mov    (%rax),%rax
	mov    %rdi,%r13
	callq  *%rax
	mov    0x1b0(%r13),%rax
	mov    0x10(%rax),%rax
	mov    %r13,%rdi
	callq  *%rax
	jmp    4853 <jpeg_finish_compress+0xe3>
	mov    %r13,%rdi
	callq  *(%rax)
	mov    %r14,%r15
	jmpq   4837 <jpeg_finish_compress+0xc7>
	nopl   0x0(%rax)

00048d0 <jpeg_write_marker>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %r12,-0x8(%rbp)
	mov    %r13,-0x10(%rbp)
	mov    %r14,-0x18(%rbp)
	mov    %r15,-0x20(%rbp)
	mov    0x130(%rdi),%eax
	test   %eax,%eax
	jne    4906 <jpeg_write_marker+0x36>
	movslq 0x24(%rdi),%rax
	cmp    $0x65,%eax
	jne    4952 <F_0_285+0x24>
	mov    %rcx,%r12
	mov    %rdi,%r13
	mov    %rdx,%r14
	jmp    4932 <F_0_285+0x4>
	mov    (%rdi),%rax
	movl   $0x14,0x28(%rax)
	movslq 0x24(%rdi),%r8
	mov    (%rdi),%rax
	mov    %r8d,0x2c(%rax)
	mov    (%rdi),%rax
	mov    (%rax),%rax
	mov    %rcx,%r12
	mov    %rdx,%r14
	mov    %rsi,%r15
	mov    %rdi,%r13
	callq  *%rax
	mov    %r15,%rsi
	mov    0x1d0(%r13),%rax
	mov    0x28(%rax),%rax
	mov    %r13,%rdi
	mov    %r12,%rdx
	callq  *%rax
	mov    0x1d0(%r13),%rax
	mov    0x30(%rax),%r15
	jmp    4974 <F_0_285+0x46>
	cmp    $0x66,%eax
	jne    498b <F_0_285+0x5d>
	mov    %rcx,%r12
	mov    %rdi,%r13
	mov    %rdx,%r14
	jmp    4932 <F_0_285+0x4>
	movzbl (%r14),%esi
	mov    %r13,%rdi
	callq  *%r15
	add    $0xffffffff,%r12d
	add    $0x1,%r14
	test   %r12d,%r12d
	jne    4962 <F_0_285+0x34>
	mov    -0x20(%rbp),%r15
	mov    -0x18(%rbp),%r14
	mov    -0x10(%rbp),%r13
	mov    -0x8(%rbp),%r12
	leaveq 
	retq   
	cmp    $0x67,%eax
	jne    4906 <jpeg_write_marker+0x36>
	mov    %rcx,%r12
	mov    %rdi,%r13
	mov    %rdx,%r14
	jmp    4932 <F_0_285+0x4>
	nop

00049a0 <jpeg_write_m_header>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    0x130(%rdi),%eax
	test   %eax,%eax
	jne    49c5 <jpeg_write_m_header+0x25>
	movslq 0x24(%rdi),%rax
	cmp    $0x65,%eax
	je     4a11 <jpeg_write_m_header+0x71>
	cmp    $0x66,%eax
	je     4a11 <jpeg_write_m_header+0x71>
	cmp    $0x67,%eax
	je     4a11 <jpeg_write_m_header+0x71>
	mov    (%rdi),%rax
	movl   $0x14,0x28(%rax)
	movslq 0x24(%rdi),%rcx
	mov    (%rdi),%rax
	mov    %ecx,0x2c(%rax)
	mov    (%rdi),%rax
	mov    (%rax),%rax
	mov    %rdi,%rcx
	mov    %r13,-0x8(%rbp)
	mov    %r14,-0x10(%rbp)
	mov    %r15,-0x18(%rbp)
	mov    %rdx,%r13
	mov    %rsi,%r14
	mov    %rdi,%r15
	mov    %rcx,%rdi
	callq  *%rax
	mov    %r13,%rdx
	mov    %r14,%rsi
	mov    %r15,%rdi
	mov    -0x18(%rbp),%r15
	mov    -0x10(%rbp),%r14
	mov    -0x8(%rbp),%r13
	mov    0x1d0(%rdi),%rax
	mov    0x28(%rax),%rax
	callq  *%rax
	leaveq 
	retq   

0004a20 <jpeg_write_m_byte>:
	push   %rbp
	mov    %rsp,%rbp
	mov    0x1d0(%rdi),%rax
	mov    0x30(%rax),%rax
	callq  *%rax
	leaveq 
	retq   
	data16 nopw %cs:0x0(%rax,%rax,1)
	xchg   %ax,%ax

0004a40 <jpeg_write_tables>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %r15,-0x8(%rbp)
	movslq 0x24(%rdi),%rax
	cmp    $0x64,%eax
	jne    4a5a <jpeg_write_tables+0x1a>
	mov    %rdi,%r15
	jmp    4a79 <jpeg_write_tables+0x39>
	mov    (%rdi),%rax
	movl   $0x14,0x28(%rax)
	movslq 0x24(%rdi),%rcx
	mov    (%rdi),%rax
	mov    %ecx,0x2c(%rax)
	mov    (%rdi),%rax
	mov    (%rax),%rax
	mov    %rdi,%r15
	callq  *%rax
	mov    (%r15),%rax
	mov    0x20(%rax),%rax
	mov    %r15,%rdi
	callq  *%rax
	mov    0x28(%r15),%rax
	mov    0x10(%rax),%rax
	mov    %r15,%rdi
	callq  *%rax
	mov    %r15,%rdi
	callq  4120 <jinit_marker_writer@plt>
	mov    0x1d0(%r15),%rax
	mov    0x20(%rax),%rax
	mov    %r15,%rdi
	callq  *%rax
	mov    0x28(%r15),%rax
	mov    0x20(%rax),%rax
	mov    %r15,%rdi
	callq  *%rax
	mov    -0x8(%rbp),%r15
	leaveq 
	retq   
	nopl   (%rax)

0004ac0 <jpeg_abort_compress>:
	push   %rbp
	mov    %rsp,%rbp
	callq  4130 <jpeg_abort@plt>
	leaveq 
	retq   
	nopl   0x0(%rax,%rax,1)

0004ad0 <jpeg_start_compress>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %r15,-0x10(%rbp)
	movslq 0x24(%rdi),%rax
	cmp    $0x64,%eax
	jne    4aea <jpeg_start_compress+0x1a>
	mov    %rdi,%r15
	jmp    4b1d <jpeg_start_compress+0x4d>
	mov    (%rdi),%rax
	movl   $0x14,0x28(%rax)
	movslq 0x24(%rdi),%rcx
	mov    (%rdi),%rax
	mov    %ecx,0x2c(%rax)
	mov    (%rdi),%rax
	mov    (%rax),%rax
	mov    %rdi,%rcx
	mov    %r14,-0x8(%rbp)
	mov    %rsi,%r14
	mov    %rdi,%r15
	mov    %rcx,%rdi
	callq  *%rax
	mov    %r14,%rsi
	mov    -0x8(%rbp),%r14
	test   %esi,%esi
	je     4b2b <jpeg_start_compress+0x5b>
	xor    %esi,%esi
	mov    %r15,%rdi
	callq  4390 <jpeg_suppress_tables@plt>
	mov    (%r15),%rax
	mov    0x20(%rax),%rax
	mov    %r15,%rdi
	callq  *%rax
	mov    0x28(%r15),%rax
	mov    0x10(%rax),%rax
	mov    %r15,%rdi
	callq  *%rax
	mov    %r15,%rdi
	callq  4200 <jinit_compress_master@plt>
	mov    0x1b0(%r15),%rax
	mov    (%rax),%rax
	mov    %r15,%rdi
	callq  *%rax
	movl   $0x0,0x130(%r15)
	movslq 0x100(%r15),%rax
	test   %eax,%eax
	jne    4b78 <jpeg_start_compress+0xa8>
	mov    $0x65,%eax
	jmp    4b7d <jpeg_start_compress+0xad>
	mov    $0x66,%eax
	mov    %eax,0x24(%r15)
	mov    -0x10(%rbp),%r15
	leaveq 
	retq   
	nopw   0x0(%rax,%rax,1)

0004b90 <jpeg_write_scanlines>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %r13,-0x8(%rbp)
	mov    %r14,-0x10(%rbp)
	mov    %r15,-0x18(%rbp)
	movslq 0x24(%rdi),%rax
	cmp    $0x65,%eax
	jne    4bbe <jpeg_write_scanlines+0x2e>
	mov    %r14,%r8
	mov    %rdi,%r14
	mov    %r13,%r9
	mov    %rdx,%r13
	mov    %rsi,%r15
	jmp    4beb <jpeg_write_scanlines+0x5b>
	mov    (%rdi),%rax
	movl   $0x14,0x28(%rax)
	movslq 0x24(%rdi),%rcx
	mov    (%rdi),%rax
	mov    %ecx,0x2c(%rax)
	mov    (%rdi),%rax
	mov    (%rax),%rax
	mov    %rdx,%r13
	mov    %rsi,%r15
	mov    %rdi,%r14
	callq  *%rax
	mov    -0x10(%rbp),%r8
	mov    -0x8(%rbp),%r9
	mov    0x34(%r14),%eax
	cmp    0x130(%r14),%eax
	ja     4c1d <jpeg_write_scanlines+0x8d>
	mov    (%r14),%rax
	movl   $0x7b,0x28(%rax)
	mov    (%r14),%rax
	mov    0x8(%rax),%rax
	mov    $0xffffffffffffffff,%rsi
	mov    %r14,%rdi
	callq  *%rax
	mov    -0x10(%rbp),%r8
	mov    -0x8(%rbp),%r9
	mov    0x10(%r14),%rax
	test   %rax,%rax
	je     4c51 <jpeg_write_scanlines+0xc1>
	mov    0x130(%r14),%ecx
	mov    %rcx,0x8(%rax)
	mov    0x34(%r14),%ecx
	mov    0x10(%r14),%rax
	mov    %rcx,0x10(%rax)
	mov    0x10(%r14),%rax
	mov    (%rax),%rax
	mov    %r14,%rdi
	callq  *%rax
	mov    -0x10(%rbp),%r8
	mov    -0x8(%rbp),%r9
	mov    0x1b0(%r14),%rax
	movslq 0x18(%rax),%rcx
	test   %ecx,%ecx
	je     4c6e <jpeg_write_scanlines+0xde>
	mov    %r14,%rdi
	callq  *0x8(%rax)
	mov    -0x10(%rbp),%r8
	mov    -0x8(%rbp),%r9
	mov    0x34(%r14),%eax
	mov    0x130(%r14),%ecx
	sub    %ecx,%eax
	cmp    %r13d,%eax
	jae    4c83 <jpeg_write_scanlines+0xf3>
	mov    %rax,%r13
	movl   $0x0,-0x1c(%rbp)
	mov    0x1b8(%r14),%rax
	mov    0x8(%rax),%rax
	mov    %r13,%rcx
	mov    %r9,%r13
	mov    %r15,%rsi
	mov    %r8,%r15
	lea    -0x1c(%rbp),%rdx
	mov    %r14,%rdi
	callq  *%rax
	mov    -0x1c(%rbp),%eax
	mov    %rax,%rcx
	add    0x130(%r14),%ecx
	mov    %ecx,0x130(%r14)
	mov    %r15,%r14
	mov    -0x18(%rbp),%r15
	leaveq 
	retq   
	nopw   0x0(%rax,%rax,1)

0004cd0 <jpeg_write_raw_data>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %r15,-0x10(%rbp)
	movslq 0x24(%rdi),%rax
	cmp    $0x66,%eax
	jne    4ced <jpeg_write_raw_data+0x1d>
	mov    %r15,%rax
	mov    %rdi,%r15
	jmp    4d26 <jpeg_write_raw_data+0x56>
	mov    (%rdi),%rax
	movl   $0x14,0x28(%rax)
	movslq 0x24(%rdi),%rcx
	mov    (%rdi),%rax
	mov    %ecx,0x2c(%rax)
	mov    (%rdi),%rax
	mov    (%rax),%rax
	mov    %rdi,%rcx
	mov    %rdx,-0x20(%rbp)
	mov    %rsi,-0x18(%rbp)
	mov    %rdi,%r15
	mov    %rcx,%rdi
	callq  *%rax
	mov    -0x18(%rbp),%rsi
	mov    -0x20(%rbp),%rdx
	mov    -0x10(%rbp),%rax
	mov    0x34(%r15),%edi
	mov    0x130(%r15),%ecx
	cmp    %ecx,%edi
	jbe    4dfc <jpeg_write_raw_data+0x12c>
	mov    0x10(%r15),%rax
	test   %rax,%rax
	je     4d7a <jpeg_write_raw_data+0xaa>
	mov    %rcx,0x8(%rax)
	mov    0x34(%r15),%ecx
	mov    0x10(%r15),%rax
	mov    %rcx,0x10(%rax)
	mov    0x10(%r15),%rax
	mov    (%rax),%rax
	mov    %r15,%rdi
	mov    %r13,-0x18(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %rdx,%r13
	mov    %rsi,%r14
	callq  *%rax
	mov    %r13,%rdx
	mov    %r14,%rsi
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    0x1b0(%r15),%rax
	movslq 0x18(%rax),%rcx
	test   %ecx,%ecx
	je     4dab <jpeg_write_raw_data+0xdb>
	mov    %r15,%rdi
	mov    %r13,-0x8(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %rdx,%r13
	mov    %rsi,%r14
	callq  *0x8(%rax)
	mov    %r13,%rdx
	mov    %r14,%rsi
	mov    -0x20(%rbp),%r14
	mov    -0x8(%rbp),%r13
	mov    0x13c(%r15),%eax
	shl    $0x3,%eax
	mov    %rax,-0x8(%rbp)
	cmp    %eax,%edx
	jae    4de0 <jpeg_write_raw_data+0x110>
	mov    (%r15),%rax
	movl   $0x17,0x28(%rax)
	mov    (%r15),%rax
	mov    (%rax),%rax
	mov    %r15,%rdi
	mov    %r14,-0x20(%rbp)
	mov    %rsi,%r14
	callq  *%rax
	mov    %r14,%rsi
	mov    -0x20(%rbp),%r14
	mov    0x1c8(%r15),%rax
	mov    0x8(%rax),%rax
	mov    %r15,%rdi
	callq  *%rax
	test   %eax,%eax
	jne    4e20 <jpeg_write_raw_data+0x150>
	xor    %eax,%eax
	mov    -0x10(%rbp),%r15
	leaveq 
	retq   
	mov    (%r15),%rcx
	movl   $0x7b,0x28(%rcx)
	mov    (%r15),%rcx
	mov    0x8(%rcx),%rcx
	mov    %r15,%rdi
	mov    %rax,%r15
	mov    $0xffffffffffffffff,%rsi
	callq  *%rcx
	xor    %eax,%eax
	leaveq 
	retq   
	mov    -0x8(%rbp),%rax
	mov    %rax,%rcx
	add    0x130(%r15),%ecx
	mov    %ecx,0x130(%r15)
	mov    -0x10(%rbp),%r15
	leaveq 
	retq   
	nopl   0x0(%rax,%rax,1)

0004e40 <jinit_c_coef_controller>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %r13,-0x20(%rbp)
	mov    %r14,-0x28(%rbp)
	mov    %r15,-0x30(%rbp)
	mov    0x8(%rdi),%rax
	mov    (%rax),%rax
	mov    %rsi,%r14
	mov    %rbx,%r15
	mov    $0x1,%r13d
	mov    $0xc0,%edx
	mov    %rdi,%rbx
	mov    %r13,%rsi
	callq  *%rax
	mov    %rax,-0x18(%rbp)
	mov    %rax,0x1c8(%rbx)
	lea    0x8ca(%rip),%rcx        # 5750 <start_pass_coef>
	mov    %rcx,(%rax)
	xor    %esi,%esi
	test   %r14d,%r14d
	jne    4eb3 <jinit_c_coef_controller+0x73>
	mov    0x8(%rbx),%rcx
	mov    0x8(%rcx),%rcx
	mov    %rbx,%rdi
	mov    %r15,%rbx
	mov    %rax,%r14
	mov    %r13,%r15
	mov    %rsi,%r13
	mov    %r15,%rsi
	mov    $0x500,%edx
	callq  *%rcx
	jmp    4edd <jinit_c_coef_controller+0x9d>
	mov    0x58(%rbx),%r14
	mov    %r15,-0x8(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    %rsi,%r13
	jmpq   4f49 <jinit_c_coef_controller+0x109>
	movslq %r13d,%rdx
	mov    %rdx,%rcx
	shl    $0x7,%rcx
	add    %rax,%rcx
	mov    %rcx,0x20(%r14,%rdx,8)
	add    $0x1,%r13d
	cmp    $0x9,%r13d
	jle    4ec7 <jinit_c_coef_controller+0x87>
	movq   $0x0,0x70(%r14)
	mov    -0x30(%rbp),%r15
	mov    -0x28(%rbp),%r14
	mov    -0x20(%rbp),%r13
	leaveq 
	retq   
	mov    0x1c(%r14),%edi
	movslq 0x8(%r14),%rsi
	mov    0x8(%rbx),%rax
	mov    0x28(%rax),%r12
	callq  42b0 <jround_up@plt>
	mov    %rax,%r15
	mov    0x20(%r14),%edi
	movslq 0xc(%r14),%rsi
	callq  42b0 <jround_up@plt>
	mov    %r15,%rcx
	mov    %rax,%r8
	mov    0xc(%r14),%r9d
	mov    %rbx,%rdi
	mov    $0x1,%esi
	xor    %edx,%edx
	callq  *%r12
	movslq %r13d,%rcx
	mov    -0x18(%rbp),%rdx
	mov    %rax,0x70(%rdx,%rcx,8)
	add    $0x1,%r13d
	add    $0x60,%r14
	movslq 0x4c(%rbx),%rax
	cmp    %r13d,%eax
	jg     4ef9 <jinit_c_coef_controller+0xb9>
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	mov    -0x30(%rbp),%r15
	mov    -0x28(%rbp),%r14
	mov    -0x20(%rbp),%r13
	leaveq 
	retq   
	nopl   0x0(%rax,%rax,1)

0004f70 <compress_data>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x90,%rsp
	mov    %rsi,-0x50(%rbp)
	mov    %rdi,-0x78(%rbp)
	mov    %rbx,-0x8(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %r15,-0x28(%rbp)
	mov    0x1c8(%rdi),%r8
	mov    %r8,-0x68(%rbp)
	movslq 0x18(%r8),%rcx
	mov    0x168(%rdi),%r14d
	add    $0xffffffff,%r14d
	mov    %r14,-0x88(%rbp)
	mov    0x140(%rdi),%edx
	add    $0xffffffff,%edx
	mov    %rdx,-0x38(%rbp)
	lea    0x20(%r8),%r12
	mov    %r12,-0x70(%rbp)
	xor    %r10d,%r10d
	jmpq   50cc <compress_data+0x15c>
	sub    $0x10,%rsp
	movslq 0x4(%r14),%rcx
	mov    (%rsi,%rcx,8),%rdx
	mov    (%r12,%r10,8),%rcx
	mov    0x1e8(%rdi),%rsi
	mov    0x8(%rsi),%r10
	mov    %r15d,(%rsp)
	mov    %r14,%rsi
	mov    %r13,%r8
	mov    %rax,-0x30(%rbp)
	callq  *%r10
	add    $0x10,%rsp
	movslq 0x34(%r14),%rax
	cmp    %eax,%r15d
	jl     510a <compress_data+0x19a>
	mov    -0x30(%rbp),%rdx
	mov    -0x90(%rbp),%rcx
	add    0x34(%r14),%ebx
	add    $0x8,%r13d
	lea    0x1(%rdx),%eax
	mov    -0x48(%rbp),%r9
	mov    -0x78(%rbp),%rdi
	mov    -0x50(%rbp),%rsi
	mov    -0x38(%rbp),%rdx
	mov    -0x68(%rbp),%r8
	xor    %r10d,%r10d
	movslq 0x38(%r14),%r11
	cmp    %eax,%r11d
	jg     5137 <compress_data+0x1c7>
	mov    -0x60(%rbp),%rax
	add    $0x1,%eax
	mov    -0x40(%rbp),%r13
	mov    -0x80(%rbp),%r9
	mov    -0x88(%rbp),%r14
	movslq 0x144(%rdi),%r11
	cmp    %eax,%r11d
	jg     5181 <compress_data+0x211>
	mov    0x1f0(%rdi),%rax
	mov    0x8(%rax),%rax
	mov    %r12,%rsi
	mov    %r9,%r12
	mov    %rdx,%r15
	mov    %rdi,%rbx
	callq  *%rax
	test   %eax,%eax
	je     519e <compress_data+0x22e>
	lea    0x1(%r12),%r9d
	mov    %r15,%rdx
	mov    %rbx,%rdi
	mov    -0x70(%rbp),%r12
	mov    -0x50(%rbp),%rsi
	mov    -0x68(%rbp),%r8
	mov    -0x90(%rbp),%rcx
	xor    %r10d,%r10d
	mov    %r9,-0x80(%rbp)
	cmp    %r14d,%r9d
	jbe    51c8 <compress_data+0x258>
	movl   $0x0,0x14(%r8)
	add    $0x1,%ecx
	mov    %rcx,-0x90(%rbp)
	movslq 0x1c(%r8),%rax
	cmp    %ecx,%eax
	jg     51d3 <compress_data+0x263>
	mov    0x10(%r8),%eax
	add    $0x1,%eax
	mov    %eax,0x10(%r8)
	callq  56f0 <start_iMCU_row>
	mov    $0x1,%eax
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	leaveq 
	retq   
	lea    (%r15,%rbx,1),%ecx
	movslq %ecx,%rcx
	mov    (%r12,%rcx,8),%rdi
	sub    %r15d,%eax
	movslq %eax,%rsi
	shl    $0x7,%rsi
	callq  44d0 <jzero_far@plt>
	mov    -0x30(%rbp),%rdx
	mov    -0x90(%rbp),%rcx
	mov    %r15,%rax
	jmpq   5207 <F_2_562+0x4>
	movslq %ebx,%r10
	mov    0x10(%r8),%r8d
	cmp    %edx,%r8d
	jb     4fd5 <compress_data+0x65>
	add    %eax,%ecx
	movslq 0x48(%r14),%rdx
	cmp    %ecx,%edx
	jg     4fd5 <compress_data+0x65>
	mov    (%r12,%r10,8),%rdi
	movslq 0x34(%r14),%rsi
	shl    $0x7,%rsi
	mov    %rax,%r15
	callq  44d0 <jzero_far@plt>
	lea    -0x1(%rbx),%eax
	movslq %eax,%rdi
	mov    -0x58(%rbp),%r8
	mov    -0x90(%rbp),%rcx
	xor    %eax,%eax
	jmpq   522c <F_2_562+0x29>
	cmp    %r14d,%r9d
	movslq %eax,%r11
	mov    0x148(%rdi,%r11,8),%r14
	jb     523f <F_2_562+0x3c>
	movslq 0x44(%r14),%r15
	jmpq   5243 <F_2_562+0x40>
	mov    -0x68(%rbp),%rcx
	mov    -0x90(%rbp),%rax
	mov    %eax,0x18(%rcx)
	mov    %r12d,0x14(%rcx)
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	xor    %eax,%eax
	leaveq 
	retq   
	mov    %r10,%rax
	mov    %rax,%rbx
	jmpq   5062 <compress_data+0xf2>
	mov    0x14(%r8),%r9d
	mov    %rcx,%r13
	shl    $0x3,%r13d
	mov    %r13,-0x40(%rbp)
	jmpq   50b4 <compress_data+0x144>
	lea    (%rbx,%rax,1),%r8d
	lea    -0x1(%r8),%esi
	movslq %esi,%rsi
	mov    (%r12,%rsi,8),%rsi
	movswq (%rsi),%rdi
	movslq %r8d,%rsi
	mov    (%r12,%rsi,8),%rsi
	mov    %di,(%rsi)
	add    $0x1,%eax
	movslq 0x34(%r14),%rsi
	cmp    %eax,%esi
	jg     51e7 <compress_data+0x277>
	jmpq   501d <compress_data+0xad>
	mov    (%r12,%rdi,8),%rdx
	movswq (%rdx),%rsi
	lea    (%rbx,%rax,1),%edx
	movslq %edx,%rdx
	mov    (%r12,%rdx,8),%rdx
	mov    %si,(%rdx)
	add    $0x1,%eax
	movslq 0x34(%r14),%rdx
	cmp    %eax,%edx
	jg     5214 <F_2_562+0x11>
	mov    %r15,%rdx
	mov    %r8,%r15
	jmpq   501d <compress_data+0xad>
	movslq 0x34(%r14),%r15
	mov    %r15,-0x58(%rbp)
	imul   0x40(%r14),%r9d
	mov    %r9,-0x48(%rbp)
	mov    %rax,-0x60(%rbp)
	mov    %r10,%rax
	jmpq   503f <compress_data+0xcf>
	nopl   0x0(%rax)

0005260 <compress_first_pass>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x80,%rsp
	mov    %rdi,-0x58(%rbp)
	mov    %rsi,-0x30(%rbp)
	mov    %rbx,-0x8(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %r15,-0x28(%rbp)
	mov    0x1c8(%rdi),%r13
	mov    %r13,-0x60(%rbp)
	mov    0x58(%rdi),%r14
	mov    0x140(%rdi),%r12d
	add    $0xffffffff,%r12d
	mov    %r12,-0x70(%rbp)
	mov    %rsi,%rbx
	mov    $0x1,%r8d
	xor    %eax,%eax
	jmp    532e <compress_first_pass+0xce>
	sub    $0x10,%rsp
	movslq %r14d,%rax
	mov    (%rcx,%rax,8),%r15
	mov    (%r9,%r10,8),%rdx
	mov    0x1e8(%rdi),%rax
	mov    0x8(%rax),%rax
	mov    %r8d,(%rsp)
	mov    %r14,%r8
	shl    $0x3,%r8d
	mov    %r15,%rcx
	xor    %r9d,%r9d
	callq  *%rax
	add    $0x10,%rsp
	test   %ebx,%ebx
	jg     535c <compress_first_pass+0xfc>
	mov    -0x68(%rbp),%rsi
	add    $0x1,%r14d
	mov    -0x30(%rbp),%r9
	mov    -0x40(%rbp),%rcx
	mov    -0x78(%rbp),%r10
	mov    -0x38(%rbp),%r8
	mov    -0x58(%rbp),%rdi
	cmp    %r14d,%r13d
	jg     52b2 <compress_first_pass+0x52>
	mov    -0x60(%rbp),%rax
	mov    -0x70(%rbp),%r12
	cmp    0x10(%rax),%r12d
	je     538d <compress_first_pass+0x12d>
	mov    %rax,%r13
	mov    -0x80(%rbp),%rax
	add    $0x1,%eax
	lea    0x60(%rsi),%r14
	mov    -0x30(%rbp),%rbx
	mov    $0x1,%r8d
	mov    %r14,-0x68(%rbp)
	movslq 0x4c(%rdi),%rcx
	cmp    %eax,%ecx
	jg     53c0 <compress_first_pass+0x160>
	mov    %rbx,%rsi
	callq  5530 <compress_output>
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	leaveq 
	retq   
	lea    (%r15,%r12,1),%r13
	movslq %ebx,%rsi
	shl    $0x7,%rsi
	mov    %r15,%rax
	mov    %r13,%r15
	mov    %rax,%r13
	mov    %r15,%rdi
	callq  44d0 <jzero_far@plt>
	movswq -0x80(%r13,%r12,1),%rdx
	mov    -0x50(%rbp),%r13
	mov    -0x68(%rbp),%rsi
	xor    %eax,%eax
	jmpq   542a <compress_first_pass+0x1ca>
	mov    -0x48(%rbp),%r15
	lea    -0x1(%r15),%eax
	movslq %eax,%r14
	shl    $0x7,%r14
	lea    (%r8,%rbx,1),%eax
	mov    %eax,%r8d
	shl    $0x7,%r8
	mov    %r8,-0x48(%rbp)
	xor    %edx,%edx
	div    %r15d
	mov    %r15,%rdx
	shl    $0x7,%rdx
	mov    %rdx,-0x50(%rbp)
	jmpq   546a <compress_first_pass+0x20a>
	movslq %eax,%r15
	mov    %r15,-0x78(%rbp)
	mov    0x70(%r13,%r15,8),%rsi
	mov    0xc(%r14),%ecx
	mov    %rcx,%rdx
	imul   0x10(%r13),%edx
	mov    0x8(%rdi),%r9
	mov    0x40(%r9),%r9
	mov    %rax,-0x80(%rbp)
	callq  *%r9
	mov    %rax,-0x40(%rbp)
	mov    0x10(%r13),%ecx
	cmp    %r12d,%ecx
	jb     5484 <compress_first_pass+0x224>
	mov    %rax,%rcx
	mov    %r14,%rsi
	mov    %rbx,%r9
	mov    %r15,%r10
	mov    0x20(%rsi),%eax
	mov    0xc(%rsi),%edi
	xor    %edx,%edx
	div    %edi
	test   %edx,%edx
	je     54c9 <compress_first_pass+0x269>
	mov    %rdx,%r13
	jmp    5494 <compress_first_pass+0x234>
	movslq %eax,%rcx
	shl    $0x7,%rcx
	mov    %dx,(%r15,%rcx,1)
	add    $0x1,%eax
	cmp    %eax,%ebx
	jg     541b <compress_first_pass+0x1bb>
	jmpq   52eb <compress_first_pass+0x8b>
	movslq %ecx,%rdx
	shl    $0x7,%rdx
	mov    %ax,(%r12,%rdx,1)
	add    $0x1,%ecx
	cmp    %ecx,%r15d
	jg     5433 <compress_first_pass+0x1d3>
	add    %r10,%rbx
	add    %r10,%r12
	add    $0x1,%edi
	cmp    %r13d,%edi
	jb     54cf <F_0_331+0x2>
	lea    0x1(%r9),%eax
	mov    %r13,%rcx
	mov    %rax,%r13
	mov    %rcx,%rax
	mov    -0x48(%rbp),%r8
	mov    -0x40(%rbp),%rcx
	movslq 0xc(%rsi),%rdx
	cmp    %r13d,%edx
	jg     54dc <F_0_331+0xf>
	mov    -0x60(%rbp),%r13
	mov    -0x70(%rbp),%r12
	mov    -0x58(%rbp),%rdi
	jmpq   5319 <compress_first_pass+0xb9>
	mov    %rax,%rcx
	mov    %r14,%rsi
	mov    %rbx,%r9
	mov    %r15,%r10
	movslq 0xc(%rsi),%r13
	mov    %r13,-0x50(%rbp)
	mov    0x1c(%rsi),%r8d
	mov    %r8,-0x38(%rbp)
	mov    %r8,%r12
	shl    $0x7,%r12
	movslq 0x8(%rsi),%rbx
	mov    %rbx,-0x48(%rbp)
	xor    %edx,%edx
	mov    %r8,%rax
	div    %ebx
	test   %edx,%edx
	jg     5517 <F_0_331+0x4a>
	mov    %rdx,%rbx
	xor    %r14d,%r14d
	mov    -0x58(%rbp),%rdi
	jmpq   5303 <compress_first_pass+0xa3>
	movslq 0xc(%rsi),%r13
	jmp    5494 <compress_first_pass+0x234>
	movswq (%rbx,%r14,1),%rax
	mov    %r8,%rcx
	jmpq   5442 <compress_first_pass+0x1e2>
	lea    -0x1(%r13),%edx
	movslq %edx,%rdx
	mov    (%rcx,%rdx,8),%rbx
	movslq %r13d,%rdx
	mov    (%rcx,%rdx,8),%r12
	mov    %r12,%rdi
	mov    %r13,-0x78(%rbp)
	mov    %r8,%rsi
	mov    %rax,%r13
	callq  44d0 <jzero_far@plt>
	mov    -0x50(%rbp),%r10
	mov    -0x78(%rbp),%r9
	mov    -0x68(%rbp),%rsi
	xor    %r8d,%r8d
	mov    %r8,%rdi
	jmpq   5450 <compress_first_pass+0x1f0>
	sub    %edx,%ebx
	xor    %r14d,%r14d
	mov    -0x58(%rbp),%rdi
	jmpq   5303 <compress_first_pass+0xa3>
	data16 nopw %cs:0x0(%rax,%rax,1)

0005530 <compress_output>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x50,%rsp
	mov    %rbx,-0x8(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %r15,-0x28(%rbp)
	mov    0x1c8(%rdi),%rbx
	mov    %rbx,-0x30(%rbp)
	mov    %rdi,%r12
	xor    %r13d,%r13d
	mov    %r13,%r14
	jmp    559a <compress_output+0x6a>
	movslq %r14d,%r15
	mov    0x148(%r12,%r15,8),%rcx
	movslq 0x4(%rcx),%rax
	mov    0x70(%rbx,%rax,8),%rsi
	mov    0xc(%rcx),%ecx
	mov    %rcx,%rdx
	imul   0x10(%rbx),%edx
	mov    0x8(%r12),%rax
	mov    0x40(%rax),%rax
	mov    %r12,%rdi
	mov    %r13,%r8
	callq  *%rax
	mov    %rax,-0x50(%rbp,%r15,8)
	add    $0x1,%r14d
	movslq 0x144(%r12),%rax
	cmp    %r14d,%eax
	jg     5562 <compress_output+0x32>
	movslq 0x18(%rbx),%r15
	lea    0x20(%rbx),%r14
	jmpq   5635 <compress_output+0x105>
	movslq %ecx,%rdi
	mov    %rdx,(%r14,%rdi,8)
	add    $0x80,%rdx
	add    $0x1,%ecx
	add    $0x1,%esi
	movslq 0x34(%r10),%rdi
	cmp    %esi,%edi
	jg     55b4 <compress_output+0x84>
	add    $0x1,%ebx
	movslq 0x38(%r10),%rdx
	cmp    %ebx,%edx
	jg     566e <F_0_337+0x28>
	add    $0x1,%r8d
	movslq 0x144(%r12),%rdx
	cmp    %r8d,%edx
	jg     5689 <F_0_337+0x43>
	mov    0x1f0(%r12),%rcx
	mov    0x8(%rcx),%rcx
	mov    %rax,%rbx
	mov    %r12,%rdi
	mov    %r14,%rsi
	callq  *%rcx
	test   %eax,%eax
	je     56ab <F_0_337+0x65>
	lea    0x1(%rbx),%eax
	mov    0x168(%r12),%ecx
	cmp    %eax,%ecx
	ja     56cf <F_0_337+0x89>
	mov    -0x30(%rbp),%rbx
	movl   $0x0,0x14(%rbx)
	add    $0x1,%r15d
	movslq 0x1c(%rbx),%rax
	cmp    %r15d,%eax
	jg     56da <F_0_337+0x94>
	mov    0x10(%rbx),%eax
	add    $0x1,%eax
	mov    %eax,0x10(%rbx)
	mov    %r12,%rdi
	callq  56f0 <start_iMCU_row>
	mov    $0x1,%eax
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	leaveq 
	retq   
	lea    (%r15,%rbx,1),%edx
	movslq %edx,%rdx
	mov    -0x50(%rbp,%r11,8),%rsi
	mov    (%rsi,%rdx,8),%rdx
	add    %r9,%rdx
	mov    %r13,%rsi
	jmpq   55c8 <compress_output+0x98>
	movslq %r8d,%r11
	mov    0x148(%r12,%r11,8),%r10
	mov    %rax,%rdx
	imul   0x34(%r10),%edx
	mov    %edx,%r9d
	shl    $0x7,%r9
	mov    %r13,%rbx
	jmpq   55d3 <compress_output+0xa3>
	mov    -0x30(%rbp),%rax
	mov    %r15d,0x18(%rax)
	mov    %ebx,0x14(%rax)
	mov    %r13,%rax
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	leaveq 
	retq   
	mov    %r13,%rcx
	mov    %rcx,%r8
	jmpq   55e3 <compress_output+0xb3>
	mov    0x14(%rbx),%eax
	jmpq   5616 <compress_output+0xe6>
	data16 nopw %cs:0x0(%rax,%rax,1)
	nopl   (%rax)

00056f0 <start_iMCU_row>:
	push   %rbp
	mov    %rsp,%rbp
	mov    0x1c8(%rdi),%rcx
	movslq 0x144(%rdi),%rax
	cmp    $0x1,%eax
	jg     5725 <start_iMCU_row+0x35>
	mov    0x140(%rdi),%eax
	add    $0xffffffff,%eax
	cmp    0x10(%rcx),%eax
	ja     573c <start_iMCU_row+0x4c>
	mov    0x148(%rdi),%rax
	movslq 0x48(%rax),%rax
	mov    %eax,0x1c(%rcx)
	jmp    572c <start_iMCU_row+0x3c>
	movl   $0x1,0x1c(%rcx)
	movl   $0x0,0x14(%rcx)
	movl   $0x0,0x18(%rcx)
	leaveq 
	retq   
	mov    0x148(%rdi),%rax
	movslq 0xc(%rax),%rax
	mov    %eax,0x1c(%rcx)
	jmp    572c <start_iMCU_row+0x3c>
	nopl   0x0(%rax)

0005750 <start_pass_coef>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %r13,-0x8(%rbp)
	mov    %r14,-0x10(%rbp)
	mov    %r15,-0x18(%rbp)
	mov    %rsi,%r14
	mov    0x1c8(%rdi),%r13
	movl   $0x0,0x10(%r13)
	mov    %rdi,%r15
	callq  56f0 <start_iMCU_row>
	cmp    $0x1,%r14d
	jbe    57c7 <start_pass_coef+0x77>
	cmp    $0x2,%r14d
	je     57ef <start_pass_coef+0x9f>
	cmp    $0x3,%r14d
	jne    57cc <start_pass_coef+0x7c>
	mov    0x70(%r13),%rax
	test   %rax,%rax
	jne    57ae <start_pass_coef+0x5e>
	mov    (%r15),%rax
	movl   $0x4,0x28(%rax)
	mov    (%r15),%rax
	mov    (%rax),%rax
	mov    %r15,%rdi
	callq  *%rax
	lea    -0x555(%rip),%rax        # 5260 <compress_first_pass>
	mov    %rax,0x8(%r13)
	mov    -0x18(%rbp),%r15
	mov    -0x10(%rbp),%r14
	mov    -0x8(%rbp),%r13
	leaveq 
	retq   
	test   %r14d,%r14d
	je     5826 <F_0_344+0xc>
	mov    (%r15),%rax
	movl   $0x4,0x28(%rax)
	mov    (%r15),%rax
	mov    (%rax),%rax
	mov    %r15,%rdi
	callq  *%rax
	mov    -0x18(%rbp),%r15
	mov    -0x10(%rbp),%r14
	mov    -0x8(%rbp),%r13
	leaveq 
	retq   
	mov    0x70(%r13),%rax
	test   %rax,%rax
	jne    580d <start_pass_coef+0xbd>
	mov    (%r15),%rax
	movl   $0x4,0x28(%rax)
	mov    (%r15),%rax
	mov    (%rax),%rax
	mov    %r15,%rdi
	callq  *%rax
	lea    -0x2e4(%rip),%rax        # 5530 <compress_output>
	mov    %rax,0x8(%r13)
	mov    -0x18(%rbp),%r15
	mov    -0x10(%rbp),%r14
	mov    -0x8(%rbp),%r13
	leaveq 
	retq   
	mov    0x70(%r13),%rax
	test   %rax,%rax
	je     5844 <F_0_344+0x2a>
	mov    (%r15),%rax
	movl   $0x4,0x28(%rax)
	mov    (%r15),%rax
	mov    (%rax),%rax
	mov    %r15,%rdi
	callq  *%rax
	lea    -0x8db(%rip),%rax        # 4f70 <compress_data>
	mov    %rax,0x8(%r13)
	mov    -0x18(%rbp),%r15
	mov    -0x10(%rbp),%r14
	mov    -0x8(%rbp),%r13
	leaveq 
	retq   
	nopl   (%rax)

0005860 <jinit_color_converter>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %r15,-0x30(%rbp)
	mov    0x8(%rdi),%rax
	mov    (%rax),%rax
	mov    $0x1,%esi
	mov    $0x18,%edx
	mov    %rdi,%r15
	callq  *%rax
	mov    %rax,0x1d8(%r15)
	lea    0x1c90(%rip),%rcx        # 7520 <null_method>
	mov    %rcx,(%rax)
	lea    0x43902(%rip),%rcx        # 4919c <rgb_pixelsize>
	mov    0x3c(%r15),%edi
	lea    -0x1(%rdi),%edx
	cmp    $0xe,%edx
	ja     58eb <jinit_color_converter+0x8b>
	lea    0x4375b(%rip),%rsi        # 49008 <_fini+0xd28>
	movslq (%rsi,%rdx,4),%rdx
	add    %rsi,%rdx
	jmpq   *%rdx
	movslq 0x38(%r15),%rdx
	cmp    $0x4,%edx
	je     591d <jinit_color_converter+0xbd>
	mov    (%r15),%rcx
	movl   $0x9,0x28(%rcx)
	mov    (%r15),%rcx
	mov    (%rcx),%rcx
	mov    %r15,%rdi
	mov    %r14,-0x28(%rbp)
	mov    %rax,%r14
	callq  *%rcx
	mov    %r14,%rax
	lea    0x438b7(%rip),%rcx        # 4919c <rgb_pixelsize>
	mov    -0x28(%rbp),%r14
	jmp    591d <jinit_color_converter+0xbd>
	movslq 0x38(%r15),%rdx
	test   %edx,%edx
	jg     591d <jinit_color_converter+0xbd>
	mov    (%r15),%rcx
	movl   $0x9,0x28(%rcx)
	mov    (%r15),%rcx
	mov    (%rcx),%rcx
	mov    %r15,%rdi
	mov    %r14,-0x28(%rbp)
	mov    %rax,%r14
	callq  *%rcx
	mov    %r14,%rax
	lea    0x43883(%rip),%rcx        # 4919c <rgb_pixelsize>
	mov    -0x28(%rbp),%r14
	lea    0x1a4c(%rip),%rdx        # 7370 <null_convert>
	mov    0x50(%r15),%r9d
	lea    -0x1(%r9),%edi
	cmp    $0x4,%edi
	jbe    5a1c <jinit_color_converter+0x1bc>
	cmp    0x3c(%r15),%r9d
	je     5a9e <jinit_color_converter+0x23e>
	mov    (%r15),%rcx
	movl   $0x1b,0x28(%rcx)
	mov    (%r15),%rcx
	mov    (%rcx),%rcx
	mov    %r15,%rdi
	mov    %rax,%r15
	callq  *%rcx
	mov    %r15,%rax
	lea    0x1a0f(%rip),%rdx        # 7370 <null_convert>
	mov    %rdx,0x8(%rax)
	mov    -0x30(%rbp),%r15
	leaveq 
	retq   
	movslq 0x38(%r15),%rdx
	cmp    $0x1,%edx
	je     591d <jinit_color_converter+0xbd>
	mov    (%r15),%rcx
	movl   $0x9,0x28(%rcx)
	mov    (%r15),%rcx
	mov    (%rcx),%rcx
	mov    %r15,%rdi
	mov    %r14,-0x18(%rbp)
	mov    %rax,%r14
	callq  *%rcx
	mov    %r14,%rax
	lea    0x43802(%rip),%rcx        # 4919c <rgb_pixelsize>
	mov    -0x18(%rbp),%r14
	jmpq   591d <jinit_color_converter+0xbd>
	movslq (%rcx,%rdi,4),%rdx
	cmp    0x38(%r15),%edx
	je     591d <jinit_color_converter+0xbd>
	mov    (%r15),%rcx
	movl   $0x9,0x28(%rcx)
	mov    (%r15),%rcx
	mov    (%rcx),%rcx
	mov    %r15,%rdi
	mov    %r14,-0x20(%rbp)
	mov    %rax,%r14
	callq  *%rcx
	mov    %r14,%rax
	lea    0x437c5(%rip),%rcx        # 4919c <rgb_pixelsize>
	mov    -0x20(%rbp),%r14
	jmpq   591d <jinit_color_converter+0xbd>
	movslq 0x38(%r15),%rdx
	cmp    $0x3,%edx
	je     591d <jinit_color_converter+0xbd>
	mov    (%r15),%rcx
	movl   $0x9,0x28(%rcx)
	mov    (%r15),%rcx
	mov    (%rcx),%rcx
	mov    %r15,%rdi
	mov    %r14,-0x20(%rbp)
	mov    %rax,%r14
	callq  *%rcx
	mov    %r14,%rax
	lea    0x43789(%rip),%rcx        # 4919c <rgb_pixelsize>
	mov    -0x20(%rbp),%r14
	jmpq   591d <jinit_color_converter+0xbd>
	lea    0x154d(%rip),%rsi        # 6f70 <rgb_ycc_start>
	lea    0x4361a(%rip),%r8        # 49044 <_fini+0xd64>
	movslq (%r8,%rdi,4),%rdi
	add    %r8,%rdi
	jmpq   *%rdi
	movslq 0x4c(%r15),%rcx
	cmp    $0x4,%ecx
	je     5a6d <jinit_color_converter+0x20d>
	mov    (%r15),%rcx
	movl   $0xa,0x28(%rcx)
	mov    (%r15),%rcx
	mov    (%rcx),%rcx
	mov    %r15,%rdi
	mov    %r14,-0x18(%rbp)
	mov    %rax,%r14
	callq  *%rcx
	mov    %r14,%rax
	lea    0x190e(%rip),%rdx        # 7370 <null_convert>
	lea    0x1507(%rip),%rsi        # 6f70 <rgb_ycc_start>
	mov    -0x18(%rbp),%r14
	mov    0x3c(%r15),%ecx
	cmp    $0x4,%ecx
	je     5d21 <jinit_color_converter+0x4c1>
	cmp    $0x5,%ecx
	je     5d35 <jinit_color_converter+0x4d5>
	mov    (%r15),%rax
	movl   $0x1b,0x28(%rax)
	mov    (%r15),%rax
	mov    (%rax),%rax
	mov    %r15,%rdi
	callq  *%rax
	mov    -0x30(%rbp),%r15
	leaveq 
	retq   
	movslq 0x38(%r15),%rcx
	cmp    0x4c(%r15),%ecx
	jne    593f <jinit_color_converter+0xdf>
	jmpq   5961 <jinit_color_converter+0x101>
	movslq 0x4c(%r15),%rcx
	cmp    $0x1,%ecx
	je     5add <jinit_color_converter+0x27d>
	mov    (%r15),%rcx
	movl   $0xa,0x28(%rcx)
	mov    (%r15),%rcx
	mov    (%rcx),%rcx
	mov    %r15,%rdi
	mov    %r14,-0x8(%rbp)
	mov    %rax,%r14
	callq  *%rcx
	mov    %r14,%rax
	mov    -0x8(%rbp),%r14
	lea    0x181c(%rip),%rdx        # 7300 <grayscale_convert>
	mov    0x3c(%r15),%ecx
	cmp    $0x1,%ecx
	je     5d3f <jinit_color_converter+0x4df>
	cmp    $0x2,%ecx
	je     5d49 <jinit_color_converter+0x4e9>
	cmp    $0x6,%ecx
	je     5d49 <jinit_color_converter+0x4e9>
	cmp    $0x7,%ecx
	je     5d49 <jinit_color_converter+0x4e9>
	cmp    $0x8,%ecx
	je     5d49 <jinit_color_converter+0x4e9>
	cmp    $0x9,%ecx
	je     5d49 <jinit_color_converter+0x4e9>
	cmp    $0xa,%ecx
	je     5d49 <jinit_color_converter+0x4e9>
	cmp    $0xb,%ecx
	je     5d49 <jinit_color_converter+0x4e9>
	cmp    $0xc,%ecx
	je     5d49 <jinit_color_converter+0x4e9>
	cmp    $0xd,%ecx
	je     5d49 <jinit_color_converter+0x4e9>
	cmp    $0xe,%ecx
	je     5d49 <jinit_color_converter+0x4e9>
	cmp    $0xf,%ecx
	je     5d49 <jinit_color_converter+0x4e9>
	cmp    $0x3,%ecx
	je     5d74 <jinit_color_converter+0x514>
	mov    (%r15),%rax
	movl   $0x1b,0x28(%rax)
	mov    (%r15),%rax
	mov    (%rax),%rax
	mov    %r15,%rdi
	callq  *%rax
	mov    -0x30(%rbp),%r15
	leaveq 
	retq   
	movslq 0x4c(%r15),%rsi
	cmp    $0x3,%esi
	je     5bb2 <jinit_color_converter+0x352>
	mov    (%r15),%rcx
	movl   $0xa,0x28(%rcx)
	mov    (%r15),%rcx
	mov    (%rcx),%rcx
	mov    %r15,%rdi
	mov    %r14,-0x8(%rbp)
	mov    %rax,%r14
	callq  *%rcx
	mov    %r14,%rax
	lea    0x17c9(%rip),%rdx        # 7370 <null_convert>
	lea    0x435ee(%rip),%rcx        # 4919c <rgb_pixelsize>
	mov    -0x8(%rbp),%r14
	mov    0x3c(%r15),%edi
	lea    0x43513(%rip),%rsi        # 490d0 <rgb_red>
	movslq (%rsi,%rdi,4),%rsi
	test   %esi,%esi
	jne    5d7e <jinit_color_converter+0x51e>
	lea    0x43544(%rip),%rsi        # 49114 <rgb_green>
	movslq (%rsi,%rdi,4),%rsi
	cmp    $0x1,%esi
	jne    5d7e <jinit_color_converter+0x51e>
	lea    0x43574(%rip),%rsi        # 49158 <rgb_blue>
	movslq (%rsi,%rdi,4),%rsi
	cmp    $0x2,%esi
	jne    5d7e <jinit_color_converter+0x51e>
	movslq (%rcx,%rdi,4),%rcx
	cmp    $0x3,%ecx
	jne    5d7e <jinit_color_converter+0x51e>
	mov    %rdx,0x8(%rax)
	mov    -0x30(%rbp),%r15
	leaveq 
	retq   
	movslq 0x4c(%r15),%rcx
	cmp    $0x3,%ecx
	je     5c3b <jinit_color_converter+0x3db>
	mov    (%r15),%rcx
	movl   $0xa,0x28(%rcx)
	mov    (%r15),%rcx
	mov    (%rcx),%rcx
	mov    %r15,%rdi
	mov    %r14,-0x10(%rbp)
	mov    %rax,%r14
	callq  *%rcx
	mov    %r14,%rax
	lea    0x1739(%rip),%rdx        # 7370 <null_convert>
	mov    -0x10(%rbp),%r14
	mov    0x3c(%r15),%ecx
	cmp    $0x2,%ecx
	je     5dec <jinit_color_converter+0x58c>
	cmp    $0x6,%ecx
	je     5dec <jinit_color_converter+0x58c>
	cmp    $0x7,%ecx
	je     5dec <jinit_color_converter+0x58c>
	cmp    $0x8,%ecx
	je     5dec <jinit_color_converter+0x58c>
	cmp    $0x9,%ecx
	je     5dec <jinit_color_converter+0x58c>
	cmp    $0xa,%ecx
	je     5dec <jinit_color_converter+0x58c>
	cmp    $0xb,%ecx
	je     5dec <jinit_color_converter+0x58c>
	cmp    $0xc,%ecx
	je     5dec <jinit_color_converter+0x58c>
	cmp    $0xd,%ecx
	je     5dec <jinit_color_converter+0x58c>
	cmp    $0xe,%ecx
	je     5dec <jinit_color_converter+0x58c>
	cmp    $0xf,%ecx
	je     5dec <jinit_color_converter+0x58c>
	cmp    $0x3,%ecx
	je     5e13 <jinit_color_converter+0x5b3>
	mov    (%r15),%rax
	movl   $0x1b,0x28(%rax)
	mov    (%r15),%rax
	mov    (%rax),%rax
	mov    %r15,%rdi
	callq  *%rax
	mov    -0x30(%rbp),%r15
	leaveq 
	retq   
	movslq 0x4c(%r15),%rcx
	cmp    $0x4,%ecx
	je     5cf9 <jinit_color_converter+0x499>
	mov    (%r15),%rcx
	movl   $0xa,0x28(%rcx)
	mov    (%r15),%rcx
	mov    (%rcx),%rcx
	mov    %r15,%rdi
	mov    %r14,-0x10(%rbp)
	mov    %rax,%r14
	callq  *%rcx
	mov    %r14,%rax
	lea    0x167b(%rip),%rdx        # 7370 <null_convert>
	mov    -0x10(%rbp),%r14
	mov    0x3c(%r15),%ecx
	cmp    $0x4,%ecx
	je     5e1d <jinit_color_converter+0x5bd>
	mov    (%r15),%rax
	movl   $0x1b,0x28(%rax)
	mov    (%r15),%rax
	mov    (%rax),%rax
	mov    %r15,%rdi
	callq  *%rax
	mov    -0x30(%rbp),%r15
	leaveq 
	retq   
	mov    %rsi,(%rax)
	lea    0x1455(%rip),%rcx        # 7180 <cmyk_ycck_convert>
	mov    %rcx,0x8(%rax)
	mov    -0x30(%rbp),%r15
	leaveq 
	retq   
	mov    %rdx,0x8(%rax)
	mov    -0x30(%rbp),%r15
	leaveq 
	retq   
	mov    %rdx,0x8(%rax)
	mov    -0x30(%rbp),%r15
	leaveq 
	retq   
	mov    %rax,%r15
	callq  3d5b0 <jsimd_can_rgb_gray>
	test   %eax,%eax
	jne    5e27 <jinit_color_converter+0x5c7>
	lea    0x1210(%rip),%rax        # 6f70 <rgb_ycc_start>
	mov    %rax,(%r15)
	lea    0x1376(%rip),%rax        # 70e0 <rgb_gray_convert>
	mov    %rax,0x8(%r15)
	mov    -0x30(%rbp),%r15
	leaveq 
	retq   
	mov    %rdx,0x8(%rax)
	mov    -0x30(%rbp),%r15
	leaveq 
	retq   
	mov    0x3c(%r15),%ecx
	cmp    $0x2,%ecx
	je     5e38 <jinit_color_converter+0x5d8>
	cmp    $0x6,%ecx
	je     5e38 <jinit_color_converter+0x5d8>
	cmp    $0x7,%ecx
	je     5e38 <jinit_color_converter+0x5d8>
	cmp    $0x8,%ecx
	je     5e38 <jinit_color_converter+0x5d8>
	cmp    $0x9,%ecx
	je     5e38 <jinit_color_converter+0x5d8>
	cmp    $0xa,%ecx
	je     5e38 <jinit_color_converter+0x5d8>
	cmp    $0xb,%ecx
	je     5e38 <jinit_color_converter+0x5d8>
	cmp    $0xc,%ecx
	je     5e38 <jinit_color_converter+0x5d8>
	cmp    $0xd,%ecx
	je     5e38 <jinit_color_converter+0x5d8>
	cmp    $0xe,%ecx
	je     5e38 <jinit_color_converter+0x5d8>
	cmp    $0xf,%ecx
	je     5e38 <jinit_color_converter+0x5d8>
	mov    (%r15),%rax
	movl   $0x1b,0x28(%rax)
	mov    (%r15),%rax
	mov    (%rax),%rax
	mov    %r15,%rdi
	callq  *%rax
	mov    -0x30(%rbp),%r15
	leaveq 
	retq   
	mov    %rax,%r15
	callq  3d570 <jsimd_can_rgb_ycc>
	test   %eax,%eax
	jne    5e49 <jinit_color_converter+0x5e9>
	lea    0x1171(%rip),%rax        # 6f70 <rgb_ycc_start>
	mov    %rax,(%r15)
	lea    0x1287(%rip),%rax        # 7090 <rgb_ycc_convert>
	mov    %rax,0x8(%r15)
	mov    -0x30(%rbp),%r15
	leaveq 
	retq   
	mov    %rdx,0x8(%rax)
	mov    -0x30(%rbp),%r15
	leaveq 
	retq   
	mov    %rdx,0x8(%rax)
	mov    -0x30(%rbp),%r15
	leaveq 
	retq   
	lea    0x37882(%rip),%rax        # 3d6b0 <jsimd_rgb_gray_convert>
	mov    %rax,0x8(%r15)
	mov    -0x30(%rbp),%r15
	leaveq 
	retq   
	lea    0x12f1(%rip),%rcx        # 7130 <rgb_rgb_convert>
	mov    %rcx,0x8(%rax)
	mov    -0x30(%rbp),%r15
	leaveq 
	retq   
	lea    0x377f0(%rip),%rax        # 3d640 <jsimd_rgb_ycc_convert>
	mov    %rax,0x8(%r15)
	mov    -0x30(%rbp),%r15
	leaveq 
	retq   
	nopw   0x0(%rax,%rax,1)

0005e60 <rgb_ycc_convert_internal>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x40,%rsp
	mov    %rbx,-0x20(%rbp)
	mov    %r12,-0x28(%rbp)
	mov    %r13,-0x30(%rbp)
	mov    %r14,-0x38(%rbp)
	mov    %r15,-0x40(%rbp)
	mov    %rdx,-0x8(%rbp)
	mov    0x1d8(%rdi),%rax
	mov    0x10(%rax),%r11
	mov    0x30(%rdi),%r13d
	xor    %edi,%edi
	jmpq   5f52 <rgb_ycc_convert_internal+0xf2>
	movzbl 0x1(%rbx),%r10d
	lea    0x100(%r10),%eax
	movslq %eax,%rax
	mov    (%r11,%rax,8),%rax
	movzbl (%rbx),%esi
	add    (%r11,%rsi,8),%rax
	movzbl 0x2(%rbx),%edx
	lea    0x200(%rdx),%ecx
	movslq %ecx,%rcx
	add    (%r11,%rcx,8),%rax
	sar    $0x10,%rax
	mov    %edi,%ecx
	mov    %al,(%r9,%rcx,1)
	lea    0x400(%r10),%eax
	movslq %eax,%rax
	mov    (%r11,%rax,8),%rax
	lea    0x300(%rsi),%r14d
	movslq %r14d,%r14
	add    (%r11,%r14,8),%rax
	lea    0x500(%rdx),%r14d
	movslq %r14d,%r14
	add    (%r11,%r14,8),%rax
	sar    $0x10,%rax
	mov    %al,(%r15,%rcx,1)
	lea    0x600(%r10),%eax
	movslq %eax,%rax
	mov    (%r11,%rax,8),%rax
	add    $0x500,%esi
	movslq %esi,%rsi
	add    (%r11,%rsi,8),%rax
	add    $0x700,%edx
	movslq %edx,%rdx
	add    (%r11,%rdx,8),%rax
	sar    $0x10,%rax
	mov    %al,(%r12,%rcx,1)
	add    $0x3,%rbx
	add    $0x1,%edi
	cmp    %r13d,%edi
	jb     5e96 <rgb_ycc_convert_internal+0x36>
	mov    -0x18(%rbp),%rax
	lea    0x8(%rax),%rsi
	mov    -0x10(%rbp),%rax
	lea    0x1(%rax),%ecx
	xor    %edi,%edi
	mov    -0x8(%rbp),%rdx
	add    $0xffffffff,%r8d
	test   %r8d,%r8d
	jns    5f71 <rgb_ycc_convert_internal+0x111>
	mov    -0x40(%rbp),%r15
	mov    -0x38(%rbp),%r14
	mov    -0x30(%rbp),%r13
	mov    -0x28(%rbp),%r12
	mov    -0x20(%rbp),%rbx
	leaveq 
	retq   
	mov    (%rsi),%rbx
	mov    (%rdx),%rax
	mov    %ecx,%r10d
	mov    (%rax,%r10,8),%r9
	mov    0x8(%rdx),%rax
	mov    (%rax,%r10,8),%r15
	mov    0x10(%rdx),%rax
	mov    (%rax,%r10,8),%r12
	mov    %rsi,-0x18(%rbp)
	mov    %rcx,-0x10(%rbp)
	jmp    5f34 <rgb_ycc_convert_internal+0xd4>
	nopl   0x0(%rax,%rax,1)

0005fa0 <rgb_gray_convert_internal>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %r13,-0x8(%rbp)
	mov    %r14,-0x10(%rbp)
	mov    %r15,-0x18(%rbp)
	mov    0x1d8(%rdi),%rax
	mov    0x10(%rax),%r10
	mov    0x30(%rdi),%r11d
	xor    %r14d,%r14d
	jmp    6012 <rgb_gray_convert_internal+0x72>
	movzbl 0x1(%rdi),%eax
	add    $0x100,%eax
	movslq %eax,%rax
	mov    (%r10,%rax,8),%rax
	movzbl (%rdi),%r13d
	add    (%r10,%r13,8),%rax
	movzbl 0x2(%rdi),%r13d
	add    $0x200,%r13d
	movslq %r13d,%r13
	add    (%r10,%r13,8),%rax
	sar    $0x10,%rax
	mov    %r9d,%r13d
	mov    %al,(%r15,%r13,1)
	add    $0x3,%rdi
	add    $0x1,%r9d
	cmp    %r11d,%r9d
	jb     5fc8 <rgb_gray_convert_internal+0x28>
	add    $0x8,%rsi
	add    $0x1,%ecx
	add    $0xffffffff,%r8d
	test   %r8d,%r8d
	jns    6029 <rgb_gray_convert_internal+0x89>
	mov    -0x18(%rbp),%r15
	mov    -0x10(%rbp),%r14
	mov    -0x8(%rbp),%r13
	leaveq 
	retq   
	mov    (%rsi),%rdi
	mov    (%rdx),%r9
	mov    %ecx,%eax
	mov    (%r9,%rax,8),%r15
	mov    %r14,%r9
	jmp    6006 <rgb_gray_convert_internal+0x66>
	nopw   0x0(%rax,%rax,1)

0006040 <rgb_rgb_convert_internal>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %r12,-0x8(%rbp)
	mov    %r13,-0x10(%rbp)
	mov    %r14,-0x18(%rbp)
	mov    %r15,-0x20(%rbp)
	mov    0x30(%rdi),%r10d
	xor    %r11d,%r11d
	jmp    6092 <rgb_rgb_convert_internal+0x52>
	movzbl (%rax),%r14d
	mov    %edi,%r9d
	mov    %r14b,(%r15,%r9,1)
	movzbl 0x1(%rax),%r14d
	mov    %r14b,0x0(%r13,%r9,1)
	movzbl 0x2(%rax),%r14d
	mov    %r14b,(%r12,%r9,1)
	add    $0x3,%rax
	add    $0x1,%edi
	cmp    %r10d,%edi
	jb     6061 <rgb_rgb_convert_internal+0x21>
	add    $0x8,%rsi
	add    $0x1,%ecx
	add    $0xffffffff,%r8d
	test   %r8d,%r8d
	jns    60ad <rgb_rgb_convert_internal+0x6d>
	mov    -0x20(%rbp),%r15
	mov    -0x18(%rbp),%r14
	mov    -0x10(%rbp),%r13
	mov    -0x8(%rbp),%r12
	leaveq 
	retq   
	mov    (%rsi),%rax
	mov    (%rdx),%rdi
	mov    %ecx,%r9d
	mov    (%rdi,%r9,8),%r15
	mov    0x8(%rdx),%rdi
	mov    (%rdi,%r9,8),%r13
	mov    0x10(%rdx),%rdi
	mov    (%rdi,%r9,8),%r12
	mov    %r11,%rdi
	jmp    6086 <rgb_rgb_convert_internal+0x46>
	nop

00060d0 <extrgb_ycc_convert_internal>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x40,%rsp
	mov    %rbx,-0x20(%rbp)
	mov    %r12,-0x28(%rbp)
	mov    %r13,-0x30(%rbp)
	mov    %r14,-0x38(%rbp)
	mov    %r15,-0x40(%rbp)
	mov    %rdx,-0x8(%rbp)
	mov    0x1d8(%rdi),%rax
	mov    0x10(%rax),%r11
	mov    0x30(%rdi),%r13d
	xor    %edi,%edi
	jmpq   61c2 <extrgb_ycc_convert_internal+0xf2>
	movzbl 0x1(%rbx),%r10d
	lea    0x100(%r10),%eax
	movslq %eax,%rax
	mov    (%r11,%rax,8),%rax
	movzbl (%rbx),%esi
	add    (%r11,%rsi,8),%rax
	movzbl 0x2(%rbx),%edx
	lea    0x200(%rdx),%ecx
	movslq %ecx,%rcx
	add    (%r11,%rcx,8),%rax
	sar    $0x10,%rax
	mov    %edi,%ecx
	mov    %al,(%r9,%rcx,1)
	lea    0x400(%r10),%eax
	movslq %eax,%rax
	mov    (%r11,%rax,8),%rax
	lea    0x300(%rsi),%r14d
	movslq %r14d,%r14
	add    (%r11,%r14,8),%rax
	lea    0x500(%rdx),%r14d
	movslq %r14d,%r14
	add    (%r11,%r14,8),%rax
	sar    $0x10,%rax
	mov    %al,(%r15,%rcx,1)
	lea    0x600(%r10),%eax
	movslq %eax,%rax
	mov    (%r11,%rax,8),%rax
	add    $0x500,%esi
	movslq %esi,%rsi
	add    (%r11,%rsi,8),%rax
	add    $0x700,%edx
	movslq %edx,%rdx
	add    (%r11,%rdx,8),%rax
	sar    $0x10,%rax
	mov    %al,(%r12,%rcx,1)
	add    $0x3,%rbx
	add    $0x1,%edi
	cmp    %r13d,%edi
	jb     6106 <extrgb_ycc_convert_internal+0x36>
	mov    -0x18(%rbp),%rax
	lea    0x8(%rax),%rsi
	mov    -0x10(%rbp),%rax
	lea    0x1(%rax),%ecx
	xor    %edi,%edi
	mov    -0x8(%rbp),%rdx
	add    $0xffffffff,%r8d
	test   %r8d,%r8d
	jns    61e1 <extrgb_ycc_convert_internal+0x111>
	mov    -0x40(%rbp),%r15
	mov    -0x38(%rbp),%r14
	mov    -0x30(%rbp),%r13
	mov    -0x28(%rbp),%r12
	mov    -0x20(%rbp),%rbx
	leaveq 
	retq   
	mov    (%rsi),%rbx
	mov    (%rdx),%rax
	mov    %ecx,%r10d
	mov    (%rax,%r10,8),%r9
	mov    0x8(%rdx),%rax
	mov    (%rax,%r10,8),%r15
	mov    0x10(%rdx),%rax
	mov    (%rax,%r10,8),%r12
	mov    %rsi,-0x18(%rbp)
	mov    %rcx,-0x10(%rbp)
	jmp    61a4 <extrgb_ycc_convert_internal+0xd4>
	nopl   0x0(%rax,%rax,1)

0006210 <extrgb_gray_convert_internal>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %r13,-0x8(%rbp)
	mov    %r14,-0x10(%rbp)
	mov    %r15,-0x18(%rbp)
	mov    0x1d8(%rdi),%rax
	mov    0x10(%rax),%r10
	mov    0x30(%rdi),%r11d
	xor    %r14d,%r14d
	jmp    6282 <F_3_072+0x2e>
	movzbl 0x1(%rdi),%eax
	add    $0x100,%eax
	movslq %eax,%rax
	mov    (%r10,%rax,8),%rax
	movzbl (%rdi),%r13d
	add    (%r10,%r13,8),%rax
	movzbl 0x2(%rdi),%r13d
	add    $0x200,%r13d
	movslq %r13d,%r13
	add    (%r10,%r13,8),%rax
	sar    $0x10,%rax
	mov    %r9d,%r13d
	mov    %al,(%r15,%r13,1)
	add    $0x3,%rdi
	add    $0x1,%r9d
	cmp    %r11d,%r9d
	jb     6238 <extrgb_gray_convert_internal+0x28>
	add    $0x8,%rsi
	add    $0x1,%ecx
	add    $0xffffffff,%r8d
	test   %r8d,%r8d
	jns    6299 <F_3_072+0x45>
	mov    -0x18(%rbp),%r15
	mov    -0x10(%rbp),%r14
	mov    -0x8(%rbp),%r13
	leaveq 
	retq   
	mov    (%rsi),%rdi
	mov    (%rdx),%r9
	mov    %ecx,%eax
	mov    (%r9,%rax,8),%r15
	mov    %r14,%r9
	jmp    6276 <F_3_072+0x22>
	nopw   0x0(%rax,%rax,1)

00062b0 <extrgb_rgb_convert_internal>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %r12,-0x8(%rbp)
	mov    %r13,-0x10(%rbp)
	mov    %r14,-0x18(%rbp)
	mov    %r15,-0x20(%rbp)
	mov    0x30(%rdi),%r10d
	xor    %r11d,%r11d
	jmp    6302 <extrgb_rgb_convert_internal+0x52>
	movzbl (%rax),%r14d
	mov    %edi,%r9d
	mov    %r14b,(%r15,%r9,1)
	movzbl 0x1(%rax),%r14d
	mov    %r14b,0x0(%r13,%r9,1)
	movzbl 0x2(%rax),%r14d
	mov    %r14b,(%r12,%r9,1)
	add    $0x3,%rax
	add    $0x1,%edi
	cmp    %r10d,%edi
	jb     62d1 <extrgb_rgb_convert_internal+0x21>
	add    $0x8,%rsi
	add    $0x1,%ecx
	add    $0xffffffff,%r8d
	test   %r8d,%r8d
	jns    631d <extrgb_rgb_convert_internal+0x6d>
	mov    -0x20(%rbp),%r15
	mov    -0x18(%rbp),%r14
	mov    -0x10(%rbp),%r13
	mov    -0x8(%rbp),%r12
	leaveq 
	retq   
	mov    (%rsi),%rax
	mov    (%rdx),%rdi
	mov    %ecx,%r9d
	mov    (%rdi,%r9,8),%r15
	mov    0x8(%rdx),%rdi
	mov    (%rdi,%r9,8),%r13
	mov    0x10(%rdx),%rdi
	mov    (%rdi,%r9,8),%r12
	mov    %r11,%rdi
	jmp    62f6 <extrgb_rgb_convert_internal+0x46>
	nop

0006340 <extrgbx_ycc_convert_internal>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x40,%rsp
	mov    %rbx,-0x20(%rbp)
	mov    %r12,-0x28(%rbp)
	mov    %r13,-0x30(%rbp)
	mov    %r14,-0x38(%rbp)
	mov    %r15,-0x40(%rbp)
	mov    %rdx,-0x8(%rbp)
	mov    0x1d8(%rdi),%rax
	mov    0x10(%rax),%r11
	mov    0x30(%rdi),%r13d
	xor    %edi,%edi
	jmpq   6432 <extrgbx_ycc_convert_internal+0xf2>
	movzbl 0x1(%rbx),%r10d
	lea    0x100(%r10),%eax
	movslq %eax,%rax
	mov    (%r11,%rax,8),%rax
	movzbl (%rbx),%esi
	add    (%r11,%rsi,8),%rax
	movzbl 0x2(%rbx),%edx
	lea    0x200(%rdx),%ecx
	movslq %ecx,%rcx
	add    (%r11,%rcx,8),%rax
	sar    $0x10,%rax
	mov    %edi,%ecx
	mov    %al,(%r9,%rcx,1)
	lea    0x400(%r10),%eax
	movslq %eax,%rax
	mov    (%r11,%rax,8),%rax
	lea    0x300(%rsi),%r14d
	movslq %r14d,%r14
	add    (%r11,%r14,8),%rax
	lea    0x500(%rdx),%r14d
	movslq %r14d,%r14
	add    (%r11,%r14,8),%rax
	sar    $0x10,%rax
	mov    %al,(%r15,%rcx,1)
	lea    0x600(%r10),%eax
	movslq %eax,%rax
	mov    (%r11,%rax,8),%rax
	add    $0x500,%esi
	movslq %esi,%rsi
	add    (%r11,%rsi,8),%rax
	add    $0x700,%edx
	movslq %edx,%rdx
	add    (%r11,%rdx,8),%rax
	sar    $0x10,%rax
	mov    %al,(%r12,%rcx,1)
	add    $0x4,%rbx
	add    $0x1,%edi
	cmp    %r13d,%edi
	jb     6376 <extrgbx_ycc_convert_internal+0x36>
	mov    -0x18(%rbp),%rax
	lea    0x8(%rax),%rsi
	mov    -0x10(%rbp),%rax
	lea    0x1(%rax),%ecx
	xor    %edi,%edi
	mov    -0x8(%rbp),%rdx
	add    $0xffffffff,%r8d
	test   %r8d,%r8d
	jns    6451 <extrgbx_ycc_convert_internal+0x111>
	mov    -0x40(%rbp),%r15
	mov    -0x38(%rbp),%r14
	mov    -0x30(%rbp),%r13
	mov    -0x28(%rbp),%r12
	mov    -0x20(%rbp),%rbx
	leaveq 
	retq   
	mov    (%rsi),%rbx
	mov    (%rdx),%rax
	mov    %ecx,%r10d
	mov    (%rax,%r10,8),%r9
	mov    0x8(%rdx),%rax
	mov    (%rax,%r10,8),%r15
	mov    0x10(%rdx),%rax
	mov    (%rax,%r10,8),%r12
	mov    %rsi,-0x18(%rbp)
	mov    %rcx,-0x10(%rbp)
	jmp    6414 <extrgbx_ycc_convert_internal+0xd4>
	nopl   0x0(%rax,%rax,1)

0006480 <extrgbx_gray_convert_internal>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %r13,-0x8(%rbp)
	mov    %r14,-0x10(%rbp)
	mov    %r15,-0x18(%rbp)
	mov    0x1d8(%rdi),%rax
	mov    0x10(%rax),%r10
	mov    0x30(%rdi),%r11d
	xor    %r14d,%r14d
	jmp    64f2 <extrgbx_gray_convert_internal+0x72>
	movzbl 0x1(%rdi),%eax
	add    $0x100,%eax
	movslq %eax,%rax
	mov    (%r10,%rax,8),%rax
	movzbl (%rdi),%r13d
	add    (%r10,%r13,8),%rax
	movzbl 0x2(%rdi),%r13d
	add    $0x200,%r13d
	movslq %r13d,%r13
	add    (%r10,%r13,8),%rax
	sar    $0x10,%rax
	mov    %r9d,%r13d
	mov    %al,(%r15,%r13,1)
	add    $0x4,%rdi
	add    $0x1,%r9d
	cmp    %r11d,%r9d
	jb     64a8 <extrgbx_gray_convert_internal+0x28>
	add    $0x8,%rsi
	add    $0x1,%ecx
	add    $0xffffffff,%r8d
	test   %r8d,%r8d
	jns    6509 <extrgbx_gray_convert_internal+0x89>
	mov    -0x18(%rbp),%r15
	mov    -0x10(%rbp),%r14
	mov    -0x8(%rbp),%r13
	leaveq 
	retq   
	mov    (%rsi),%rdi
	mov    (%rdx),%r9
	mov    %ecx,%eax
	mov    (%r9,%rax,8),%r15
	mov    %r14,%r9
	jmp    64e6 <extrgbx_gray_convert_internal+0x66>
	nopw   0x0(%rax,%rax,1)

0006520 <extrgbx_rgb_convert_internal>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %r12,-0x8(%rbp)
	mov    %r13,-0x10(%rbp)
	mov    %r14,-0x18(%rbp)
	mov    %r15,-0x20(%rbp)
	mov    0x30(%rdi),%r10d
	xor    %r11d,%r11d
	jmp    6572 <extrgbx_rgb_convert_internal+0x52>
	movzbl (%rax),%r14d
	mov    %edi,%r9d
	mov    %r14b,(%r15,%r9,1)
	movzbl 0x1(%rax),%r14d
	mov    %r14b,0x0(%r13,%r9,1)
	movzbl 0x2(%rax),%r14d
	mov    %r14b,(%r12,%r9,1)
	add    $0x4,%rax
	add    $0x1,%edi
	cmp    %r10d,%edi
	jb     6541 <extrgbx_rgb_convert_internal+0x21>
	add    $0x8,%rsi
	add    $0x1,%ecx
	add    $0xffffffff,%r8d
	test   %r8d,%r8d
	jns    658d <extrgbx_rgb_convert_internal+0x6d>
	mov    -0x20(%rbp),%r15
	mov    -0x18(%rbp),%r14
	mov    -0x10(%rbp),%r13
	mov    -0x8(%rbp),%r12
	leaveq 
	retq   
	mov    (%rsi),%rax
	mov    (%rdx),%rdi
	mov    %ecx,%r9d
	mov    (%rdi,%r9,8),%r15
	mov    0x8(%rdx),%rdi
	mov    (%rdi,%r9,8),%r13
	mov    0x10(%rdx),%rdi
	mov    (%rdi,%r9,8),%r12
	mov    %r11,%rdi
	jmp    6566 <extrgbx_rgb_convert_internal+0x46>
	nop

00065b0 <extbgr_ycc_convert_internal>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x40,%rsp
	mov    %rbx,-0x20(%rbp)
	mov    %r12,-0x28(%rbp)
	mov    %r13,-0x30(%rbp)
	mov    %r14,-0x38(%rbp)
	mov    %r15,-0x40(%rbp)
	mov    %rdx,-0x8(%rbp)
	mov    0x1d8(%rdi),%rax
	mov    0x10(%rax),%r11
	mov    0x30(%rdi),%r13d
	xor    %edi,%edi
	jmpq   66a2 <extbgr_ycc_convert_internal+0xf2>
	movzbl 0x1(%rbx),%r10d
	lea    0x100(%r10),%eax
	movslq %eax,%rax
	mov    (%r11,%rax,8),%rax
	movzbl 0x2(%rbx),%esi
	add    (%r11,%rsi,8),%rax
	movzbl (%rbx),%edx
	lea    0x200(%rdx),%ecx
	movslq %ecx,%rcx
	add    (%r11,%rcx,8),%rax
	sar    $0x10,%rax
	mov    %edi,%ecx
	mov    %al,(%r9,%rcx,1)
	lea    0x400(%r10),%eax
	movslq %eax,%rax
	mov    (%r11,%rax,8),%rax
	lea    0x300(%rsi),%r14d
	movslq %r14d,%r14
	add    (%r11,%r14,8),%rax
	lea    0x500(%rdx),%r14d
	movslq %r14d,%r14
	add    (%r11,%r14,8),%rax
	sar    $0x10,%rax
	mov    %al,(%r15,%rcx,1)
	lea    0x600(%r10),%eax
	movslq %eax,%rax
	mov    (%r11,%rax,8),%rax
	add    $0x500,%esi
	movslq %esi,%rsi
	add    (%r11,%rsi,8),%rax
	add    $0x700,%edx
	movslq %edx,%rdx
	add    (%r11,%rdx,8),%rax
	sar    $0x10,%rax
	mov    %al,(%r12,%rcx,1)
	add    $0x3,%rbx
	add    $0x1,%edi
	cmp    %r13d,%edi
	jb     65e6 <extbgr_ycc_convert_internal+0x36>
	mov    -0x18(%rbp),%rax
	lea    0x8(%rax),%rsi
	mov    -0x10(%rbp),%rax
	lea    0x1(%rax),%ecx
	xor    %edi,%edi
	mov    -0x8(%rbp),%rdx
	add    $0xffffffff,%r8d
	test   %r8d,%r8d
	jns    66c1 <extbgr_ycc_convert_internal+0x111>
	mov    -0x40(%rbp),%r15
	mov    -0x38(%rbp),%r14
	mov    -0x30(%rbp),%r13
	mov    -0x28(%rbp),%r12
	mov    -0x20(%rbp),%rbx
	leaveq 
	retq   
	mov    (%rsi),%rbx
	mov    (%rdx),%rax
	mov    %ecx,%r10d
	mov    (%rax,%r10,8),%r9
	mov    0x8(%rdx),%rax
	mov    (%rax,%r10,8),%r15
	mov    0x10(%rdx),%rax
	mov    (%rax,%r10,8),%r12
	mov    %rsi,-0x18(%rbp)
	mov    %rcx,-0x10(%rbp)
	jmp    6684 <extbgr_ycc_convert_internal+0xd4>
	nopl   0x0(%rax,%rax,1)

00066f0 <extbgr_gray_convert_internal>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %r13,-0x8(%rbp)
	mov    %r14,-0x10(%rbp)
	mov    %r15,-0x18(%rbp)
	mov    0x1d8(%rdi),%rax
	mov    0x10(%rax),%r10
	mov    0x30(%rdi),%r11d
	xor    %r14d,%r14d
	jmp    6762 <extbgr_gray_convert_internal+0x72>
	movzbl 0x1(%rdi),%eax
	add    $0x100,%eax
	movslq %eax,%rax
	mov    (%r10,%rax,8),%rax
	movzbl 0x2(%rdi),%r13d
	add    (%r10,%r13,8),%rax
	movzbl (%rdi),%r13d
	add    $0x200,%r13d
	movslq %r13d,%r13
	add    (%r10,%r13,8),%rax
	sar    $0x10,%rax
	mov    %r9d,%r13d
	mov    %al,(%r15,%r13,1)
	add    $0x3,%rdi
	add    $0x1,%r9d
	cmp    %r11d,%r9d
	jb     6718 <extbgr_gray_convert_internal+0x28>
	add    $0x8,%rsi
	add    $0x1,%ecx
	add    $0xffffffff,%r8d
	test   %r8d,%r8d
	jns    6779 <extbgr_gray_convert_internal+0x89>
	mov    -0x18(%rbp),%r15
	mov    -0x10(%rbp),%r14
	mov    -0x8(%rbp),%r13
	leaveq 
	retq   
	mov    (%rsi),%rdi
	mov    (%rdx),%r9
	mov    %ecx,%eax
	mov    (%r9,%rax,8),%r15
	mov    %r14,%r9
	jmp    6756 <extbgr_gray_convert_internal+0x66>
	nopw   0x0(%rax,%rax,1)

0006790 <extbgr_rgb_convert_internal>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %r12,-0x8(%rbp)
	mov    %r13,-0x10(%rbp)
	mov    %r14,-0x18(%rbp)
	mov    %r15,-0x20(%rbp)
	mov    0x30(%rdi),%r10d
	xor    %r11d,%r11d
	jmp    67e2 <extbgr_rgb_convert_internal+0x52>
	movzbl 0x2(%rax),%r14d
	mov    %edi,%r9d
	mov    %r14b,(%r15,%r9,1)
	movzbl 0x1(%rax),%r14d
	mov    %r14b,0x0(%r13,%r9,1)
	movzbl (%rax),%r14d
	mov    %r14b,(%r12,%r9,1)
	add    $0x3,%rax
	add    $0x1,%edi
	cmp    %r10d,%edi
	jb     67b1 <extbgr_rgb_convert_internal+0x21>
	add    $0x8,%rsi
	add    $0x1,%ecx
	add    $0xffffffff,%r8d
	test   %r8d,%r8d
	jns    67fd <extbgr_rgb_convert_internal+0x6d>
	mov    -0x20(%rbp),%r15
	mov    -0x18(%rbp),%r14
	mov    -0x10(%rbp),%r13
	mov    -0x8(%rbp),%r12
	leaveq 
	retq   
	mov    (%rsi),%rax
	mov    (%rdx),%rdi
	mov    %ecx,%r9d
	mov    (%rdi,%r9,8),%r15
	mov    0x8(%rdx),%rdi
	mov    (%rdi,%r9,8),%r13
	mov    0x10(%rdx),%rdi
	mov    (%rdi,%r9,8),%r12
	mov    %r11,%rdi
	jmp    67d6 <extbgr_rgb_convert_internal+0x46>
	nop

0006820 <extbgrx_ycc_convert_internal>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x40,%rsp
	mov    %rbx,-0x20(%rbp)
	mov    %r12,-0x28(%rbp)
	mov    %r13,-0x30(%rbp)
	mov    %r14,-0x38(%rbp)
	mov    %r15,-0x40(%rbp)
	mov    %rdx,-0x8(%rbp)
	mov    0x1d8(%rdi),%rax
	mov    0x10(%rax),%r11
	mov    0x30(%rdi),%r13d
	xor    %edi,%edi
	jmpq   6912 <extbgrx_ycc_convert_internal+0xf2>
	movzbl 0x1(%rbx),%r10d
	lea    0x100(%r10),%eax
	movslq %eax,%rax
	mov    (%r11,%rax,8),%rax
	movzbl 0x2(%rbx),%esi
	add    (%r11,%rsi,8),%rax
	movzbl (%rbx),%edx
	lea    0x200(%rdx),%ecx
	movslq %ecx,%rcx
	add    (%r11,%rcx,8),%rax
	sar    $0x10,%rax
	mov    %edi,%ecx
	mov    %al,(%r9,%rcx,1)
	lea    0x400(%r10),%eax
	movslq %eax,%rax
	mov    (%r11,%rax,8),%rax
	lea    0x300(%rsi),%r14d
	movslq %r14d,%r14
	add    (%r11,%r14,8),%rax
	lea    0x500(%rdx),%r14d
	movslq %r14d,%r14
	add    (%r11,%r14,8),%rax
	sar    $0x10,%rax
	mov    %al,(%r15,%rcx,1)
	lea    0x600(%r10),%eax
	movslq %eax,%rax
	mov    (%r11,%rax,8),%rax
	add    $0x500,%esi
	movslq %esi,%rsi
	add    (%r11,%rsi,8),%rax
	add    $0x700,%edx
	movslq %edx,%rdx
	add    (%r11,%rdx,8),%rax
	sar    $0x10,%rax
	mov    %al,(%r12,%rcx,1)
	add    $0x4,%rbx
	add    $0x1,%edi
	cmp    %r13d,%edi
	jb     6856 <extbgrx_ycc_convert_internal+0x36>
	mov    -0x18(%rbp),%rax
	lea    0x8(%rax),%rsi
	mov    -0x10(%rbp),%rax
	lea    0x1(%rax),%ecx
	xor    %edi,%edi
	mov    -0x8(%rbp),%rdx
	add    $0xffffffff,%r8d
	test   %r8d,%r8d
	jns    6931 <extbgrx_ycc_convert_internal+0x111>
	mov    -0x40(%rbp),%r15
	mov    -0x38(%rbp),%r14
	mov    -0x30(%rbp),%r13
	mov    -0x28(%rbp),%r12
	mov    -0x20(%rbp),%rbx
	leaveq 
	retq   
	mov    (%rsi),%rbx
	mov    (%rdx),%rax
	mov    %ecx,%r10d
	mov    (%rax,%r10,8),%r9
	mov    0x8(%rdx),%rax
	mov    (%rax,%r10,8),%r15
	mov    0x10(%rdx),%rax
	mov    (%rax,%r10,8),%r12
	mov    %rsi,-0x18(%rbp)
	mov    %rcx,-0x10(%rbp)
	jmp    68f4 <extbgrx_ycc_convert_internal+0xd4>
	nopl   0x0(%rax,%rax,1)

0006960 <extbgrx_gray_convert_internal>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %r13,-0x8(%rbp)
	mov    %r14,-0x10(%rbp)
	mov    %r15,-0x18(%rbp)
	mov    0x1d8(%rdi),%rax
	mov    0x10(%rax),%r10
	mov    0x30(%rdi),%r11d
	xor    %r14d,%r14d
	jmp    69d2 <extbgrx_gray_convert_internal+0x72>
	movzbl 0x1(%rdi),%eax
	add    $0x100,%eax
	movslq %eax,%rax
	mov    (%r10,%rax,8),%rax
	movzbl 0x2(%rdi),%r13d
	add    (%r10,%r13,8),%rax
	movzbl (%rdi),%r13d
	add    $0x200,%r13d
	movslq %r13d,%r13
	add    (%r10,%r13,8),%rax
	sar    $0x10,%rax
	mov    %r9d,%r13d
	mov    %al,(%r15,%r13,1)
	add    $0x4,%rdi
	add    $0x1,%r9d
	cmp    %r11d,%r9d
	jb     6988 <extbgrx_gray_convert_internal+0x28>
	add    $0x8,%rsi
	add    $0x1,%ecx
	add    $0xffffffff,%r8d
	test   %r8d,%r8d
	jns    69e9 <extbgrx_gray_convert_internal+0x89>
	mov    -0x18(%rbp),%r15
	mov    -0x10(%rbp),%r14
	mov    -0x8(%rbp),%r13
	leaveq 
	retq   
	mov    (%rsi),%rdi
	mov    (%rdx),%r9
	mov    %ecx,%eax
	mov    (%r9,%rax,8),%r15
	mov    %r14,%r9
	jmp    69c6 <extbgrx_gray_convert_internal+0x66>
	nopw   0x0(%rax,%rax,1)

0006a00 <extbgrx_rgb_convert_internal>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %r12,-0x8(%rbp)
	mov    %r13,-0x10(%rbp)
	mov    %r14,-0x18(%rbp)
	mov    %r15,-0x20(%rbp)
	mov    0x30(%rdi),%r10d
	xor    %r11d,%r11d
	jmp    6a52 <extbgrx_rgb_convert_internal+0x52>
	movzbl 0x2(%rax),%r14d
	mov    %edi,%r9d
	mov    %r14b,(%r15,%r9,1)
	movzbl 0x1(%rax),%r14d
	mov    %r14b,0x0(%r13,%r9,1)
	movzbl (%rax),%r14d
	mov    %r14b,(%r12,%r9,1)
	add    $0x4,%rax
	add    $0x1,%edi
	cmp    %r10d,%edi
	jb     6a21 <extbgrx_rgb_convert_internal+0x21>
	add    $0x8,%rsi
	add    $0x1,%ecx
	add    $0xffffffff,%r8d
	test   %r8d,%r8d
	jns    6a6d <extbgrx_rgb_convert_internal+0x6d>
	mov    -0x20(%rbp),%r15
	mov    -0x18(%rbp),%r14
	mov    -0x10(%rbp),%r13
	mov    -0x8(%rbp),%r12
	leaveq 
	retq   
	mov    (%rsi),%rax
	mov    (%rdx),%rdi
	mov    %ecx,%r9d
	mov    (%rdi,%r9,8),%r15
	mov    0x8(%rdx),%rdi
	mov    (%rdi,%r9,8),%r13
	mov    0x10(%rdx),%rdi
	mov    (%rdi,%r9,8),%r12
	mov    %r11,%rdi
	jmp    6a46 <extbgrx_rgb_convert_internal+0x46>
	nop

0006a90 <extxbgr_ycc_convert_internal>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x40,%rsp
	mov    %rbx,-0x20(%rbp)
	mov    %r12,-0x28(%rbp)
	mov    %r13,-0x30(%rbp)
	mov    %r14,-0x38(%rbp)
	mov    %r15,-0x40(%rbp)
	mov    %rdx,-0x8(%rbp)
	mov    0x1d8(%rdi),%rax
	mov    0x10(%rax),%r11
	mov    0x30(%rdi),%r13d
	xor    %edi,%edi
	jmpq   6b83 <F_0_418+0x54>
	movzbl 0x2(%rbx),%r10d
	lea    0x100(%r10),%eax
	movslq %eax,%rax
	mov    (%r11,%rax,8),%rax
	movzbl 0x3(%rbx),%esi
	add    (%r11,%rsi,8),%rax
	movzbl 0x1(%rbx),%edx
	lea    0x200(%rdx),%ecx
	movslq %ecx,%rcx
	add    (%r11,%rcx,8),%rax
	sar    $0x10,%rax
	mov    %edi,%ecx
	mov    %al,(%r9,%rcx,1)
	lea    0x400(%r10),%eax
	movslq %eax,%rax
	mov    (%r11,%rax,8),%rax
	lea    0x300(%rsi),%r14d
	movslq %r14d,%r14
	add    (%r11,%r14,8),%rax
	lea    0x500(%rdx),%r14d
	movslq %r14d,%r14
	add    (%r11,%r14,8),%rax
	sar    $0x10,%rax
	mov    %al,(%r15,%rcx,1)
	lea    0x600(%r10),%eax
	movslq %eax,%rax
	mov    (%r11,%rax,8),%rax
	add    $0x500,%esi
	movslq %esi,%rsi
	add    (%r11,%rsi,8),%rax
	add    $0x700,%edx
	movslq %edx,%rdx
	add    (%r11,%rdx,8),%rax
	sar    $0x10,%rax
	mov    %al,(%r12,%rcx,1)
	add    $0x4,%rbx
	add    $0x1,%edi
	cmp    %r13d,%edi
	jb     6ac6 <extxbgr_ycc_convert_internal+0x36>
	mov    -0x18(%rbp),%rax
	lea    0x8(%rax),%rsi
	mov    -0x10(%rbp),%rax
	lea    0x1(%rax),%ecx
	xor    %edi,%edi
	mov    -0x8(%rbp),%rdx
	add    $0xffffffff,%r8d
	test   %r8d,%r8d
	jns    6ba2 <F_0_418+0x73>
	mov    -0x40(%rbp),%r15
	mov    -0x38(%rbp),%r14
	mov    -0x30(%rbp),%r13
	mov    -0x28(%rbp),%r12
	mov    -0x20(%rbp),%rbx
	leaveq 
	retq   
	mov    (%rsi),%rbx
	mov    (%rdx),%rax
	mov    %ecx,%r10d
	mov    (%rax,%r10,8),%r9
	mov    0x8(%rdx),%rax
	mov    (%rax,%r10,8),%r15
	mov    0x10(%rdx),%rax
	mov    (%rax,%r10,8),%r12
	mov    %rsi,-0x18(%rbp)
	mov    %rcx,-0x10(%rbp)
	jmp    6b65 <F_0_418+0x36>
	nopl   0x0(%rax)

0006bd0 <extxbgr_gray_convert_internal>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %r13,-0x8(%rbp)
	mov    %r14,-0x10(%rbp)
	mov    %r15,-0x18(%rbp)
	mov    0x1d8(%rdi),%rax
	mov    0x10(%rax),%r10
	mov    0x30(%rdi),%r11d
	xor    %r14d,%r14d
	jmp    6c43 <extxbgr_gray_convert_internal+0x73>
	movzbl 0x2(%rdi),%eax
	add    $0x100,%eax
	movslq %eax,%rax
	mov    (%r10,%rax,8),%rax
	movzbl 0x3(%rdi),%r13d
	add    (%r10,%r13,8),%rax
	movzbl 0x1(%rdi),%r13d
	add    $0x200,%r13d
	movslq %r13d,%r13
	add    (%r10,%r13,8),%rax
	sar    $0x10,%rax
	mov    %r9d,%r13d
	mov    %al,(%r15,%r13,1)
	add    $0x4,%rdi
	add    $0x1,%r9d
	cmp    %r11d,%r9d
	jb     6bf8 <extxbgr_gray_convert_internal+0x28>
	add    $0x8,%rsi
	add    $0x1,%ecx
	add    $0xffffffff,%r8d
	test   %r8d,%r8d
	jns    6c5a <extxbgr_gray_convert_internal+0x8a>
	mov    -0x18(%rbp),%r15
	mov    -0x10(%rbp),%r14
	mov    -0x8(%rbp),%r13
	leaveq 
	retq   
	mov    (%rsi),%rdi
	mov    (%rdx),%r9
	mov    %ecx,%eax
	mov    (%r9,%rax,8),%r15
	mov    %r14,%r9
	jmp    6c37 <extxbgr_gray_convert_internal+0x67>
	nopl   0x0(%rax,%rax,1)

0006c70 <extxbgr_rgb_convert_internal>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %r12,-0x8(%rbp)
	mov    %r13,-0x10(%rbp)
	mov    %r14,-0x18(%rbp)
	mov    %r15,-0x20(%rbp)
	mov    0x30(%rdi),%r10d
	xor    %r11d,%r11d
	jmp    6cc3 <extxbgr_rgb_convert_internal+0x53>
	movzbl 0x3(%rax),%r14d
	mov    %edi,%r9d
	mov    %r14b,(%r15,%r9,1)
	movzbl 0x2(%rax),%r14d
	mov    %r14b,0x0(%r13,%r9,1)
	movzbl 0x1(%rax),%r14d
	mov    %r14b,(%r12,%r9,1)
	add    $0x4,%rax
	add    $0x1,%edi
	cmp    %r10d,%edi
	jb     6c91 <extxbgr_rgb_convert_internal+0x21>
	add    $0x8,%rsi
	add    $0x1,%ecx
	add    $0xffffffff,%r8d
	test   %r8d,%r8d
	jns    6cde <extxbgr_rgb_convert_internal+0x6e>
	mov    -0x20(%rbp),%r15
	mov    -0x18(%rbp),%r14
	mov    -0x10(%rbp),%r13
	mov    -0x8(%rbp),%r12
	leaveq 
	retq   
	mov    (%rsi),%rax
	mov    (%rdx),%rdi
	mov    %ecx,%r9d
	mov    (%rdi,%r9,8),%r15
	mov    0x8(%rdx),%rdi
	mov    (%rdi,%r9,8),%r13
	mov    0x10(%rdx),%rdi
	mov    (%rdi,%r9,8),%r12
	mov    %r11,%rdi
	jmp    6cb7 <extxbgr_rgb_convert_internal+0x47>

0006d00 <extxrgb_ycc_convert_internal>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x40,%rsp
	mov    %rbx,-0x20(%rbp)
	mov    %r12,-0x28(%rbp)
	mov    %r13,-0x30(%rbp)
	mov    %r14,-0x38(%rbp)
	mov    %r15,-0x40(%rbp)
	mov    %rdx,-0x8(%rbp)
	mov    0x1d8(%rdi),%rax
	mov    0x10(%rax),%r11
	mov    0x30(%rdi),%r13d
	xor    %edi,%edi
	jmpq   6df3 <extxrgb_ycc_convert_internal+0xf3>
	movzbl 0x2(%rbx),%r10d
	lea    0x100(%r10),%eax
	movslq %eax,%rax
	mov    (%r11,%rax,8),%rax
	movzbl 0x1(%rbx),%esi
	add    (%r11,%rsi,8),%rax
	movzbl 0x3(%rbx),%edx
	lea    0x200(%rdx),%ecx
	movslq %ecx,%rcx
	add    (%r11,%rcx,8),%rax
	sar    $0x10,%rax
	mov    %edi,%ecx
	mov    %al,(%r9,%rcx,1)
	lea    0x400(%r10),%eax
	movslq %eax,%rax
	mov    (%r11,%rax,8),%rax
	lea    0x300(%rsi),%r14d
	movslq %r14d,%r14
	add    (%r11,%r14,8),%rax
	lea    0x500(%rdx),%r14d
	movslq %r14d,%r14
	add    (%r11,%r14,8),%rax
	sar    $0x10,%rax
	mov    %al,(%r15,%rcx,1)
	lea    0x600(%r10),%eax
	movslq %eax,%rax
	mov    (%r11,%rax,8),%rax
	add    $0x500,%esi
	movslq %esi,%rsi
	add    (%r11,%rsi,8),%rax
	add    $0x700,%edx
	movslq %edx,%rdx
	add    (%r11,%rdx,8),%rax
	sar    $0x10,%rax
	mov    %al,(%r12,%rcx,1)
	add    $0x4,%rbx
	add    $0x1,%edi
	cmp    %r13d,%edi
	jb     6d36 <extxrgb_ycc_convert_internal+0x36>
	mov    -0x18(%rbp),%rax
	lea    0x8(%rax),%rsi
	mov    -0x10(%rbp),%rax
	lea    0x1(%rax),%ecx
	xor    %edi,%edi
	mov    -0x8(%rbp),%rdx
	add    $0xffffffff,%r8d
	test   %r8d,%r8d
	jns    6e12 <extxrgb_ycc_convert_internal+0x112>
	mov    -0x40(%rbp),%r15
	mov    -0x38(%rbp),%r14
	mov    -0x30(%rbp),%r13
	mov    -0x28(%rbp),%r12
	mov    -0x20(%rbp),%rbx
	leaveq 
	retq   
	mov    (%rsi),%rbx
	mov    (%rdx),%rax
	mov    %ecx,%r10d
	mov    (%rax,%r10,8),%r9
	mov    0x8(%rdx),%rax
	mov    (%rax,%r10,8),%r15
	mov    0x10(%rdx),%rax
	mov    (%rax,%r10,8),%r12
	mov    %rsi,-0x18(%rbp)
	mov    %rcx,-0x10(%rbp)
	jmp    6dd5 <extxrgb_ycc_convert_internal+0xd5>
	nopl   0x0(%rax)

0006e40 <extxrgb_gray_convert_internal>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %r13,-0x8(%rbp)
	mov    %r14,-0x10(%rbp)
	mov    %r15,-0x18(%rbp)
	mov    0x1d8(%rdi),%rax
	mov    0x10(%rax),%r10
	mov    0x30(%rdi),%r11d
	xor    %r14d,%r14d
	jmp    6eb3 <extxrgb_gray_convert_internal+0x73>
	movzbl 0x2(%rdi),%eax
	add    $0x100,%eax
	movslq %eax,%rax
	mov    (%r10,%rax,8),%rax
	movzbl 0x1(%rdi),%r13d
	add    (%r10,%r13,8),%rax
	movzbl 0x3(%rdi),%r13d
	add    $0x200,%r13d
	movslq %r13d,%r13
	add    (%r10,%r13,8),%rax
	sar    $0x10,%rax
	mov    %r9d,%r13d
	mov    %al,(%r15,%r13,1)
	add    $0x4,%rdi
	add    $0x1,%r9d
	cmp    %r11d,%r9d
	jb     6e68 <extxrgb_gray_convert_internal+0x28>
	add    $0x8,%rsi
	add    $0x1,%ecx
	add    $0xffffffff,%r8d
	test   %r8d,%r8d
	jns    6eca <extxrgb_gray_convert_internal+0x8a>
	mov    -0x18(%rbp),%r15
	mov    -0x10(%rbp),%r14
	mov    -0x8(%rbp),%r13
	leaveq 
	retq   
	mov    (%rsi),%rdi
	mov    (%rdx),%r9
	mov    %ecx,%eax
	mov    (%r9,%rax,8),%r15
	mov    %r14,%r9
	jmp    6ea7 <extxrgb_gray_convert_internal+0x67>
	nopl   0x0(%rax,%rax,1)

0006ee0 <extxrgb_rgb_convert_internal>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %r12,-0x8(%rbp)
	mov    %r13,-0x10(%rbp)
	mov    %r14,-0x18(%rbp)
	mov    %r15,-0x20(%rbp)
	mov    0x30(%rdi),%r10d
	xor    %r11d,%r11d
	jmp    6f33 <extxrgb_rgb_convert_internal+0x53>
	movzbl 0x1(%rax),%r14d
	mov    %edi,%r9d
	mov    %r14b,(%r15,%r9,1)
	movzbl 0x2(%rax),%r14d
	mov    %r14b,0x0(%r13,%r9,1)
	movzbl 0x3(%rax),%r14d
	mov    %r14b,(%r12,%r9,1)
	add    $0x4,%rax
	add    $0x1,%edi
	cmp    %r10d,%edi
	jb     6f01 <extxrgb_rgb_convert_internal+0x21>
	add    $0x8,%rsi
	add    $0x1,%ecx
	add    $0xffffffff,%r8d
	test   %r8d,%r8d
	jns    6f4e <extxrgb_rgb_convert_internal+0x6e>
	mov    -0x20(%rbp),%r15
	mov    -0x18(%rbp),%r14
	mov    -0x10(%rbp),%r13
	mov    -0x8(%rbp),%r12
	leaveq 
	retq   
	mov    (%rsi),%rax
	mov    (%rdx),%rdi
	mov    %ecx,%r9d
	mov    (%rdi,%r9,8),%r15
	mov    0x8(%rdx),%rdi
	mov    (%rdi,%r9,8),%r13
	mov    0x10(%rdx),%rdi
	mov    (%rdi,%r9,8),%r12
	mov    %r11,%rdi
	jmp    6f27 <extxrgb_rgb_convert_internal+0x47>

0006f70 <rgb_ycc_start>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %r15,-0x8(%rbp)
	mov    0x8(%rdi),%rax
	mov    (%rax),%rax
	mov    $0x1,%esi
	mov    $0x4000,%edx
	mov    0x1d8(%rdi),%r15
	callq  *%rax
	mov    %rax,0x10(%r15)
	xor    %ecx,%ecx
	jmpq   7077 <rgb_ycc_start+0x107>
	lea    (%rcx,%rcx,8),%rsi
	mov    %rsi,%rdx
	shl    $0x4,%rdx
	lea    (%rdx,%rcx,8),%rdx
	add    %rcx,%rdx
	shl    $0x7,%rdx
	lea    (%rdx,%rcx,8),%rdx
	lea    (%rdx,%rcx,2),%rdx
	add    %rcx,%rdx
	mov    %rdx,(%rax,%rcx,8)
	lea    (%rcx,%rsi,4),%rdx
	shl    $0x4,%rdx
	lea    (%rdx,%rcx,8),%rdx
	add    %rcx,%rdx
	shl    $0x6,%rdx
	lea    (%rdx,%rcx,4),%rdx
	lea    (%rdx,%rcx,2),%rdx
	mov    %rdx,0x800(%rax,%rcx,8)
	mov    %rcx,%rdx
	imul   $0x1d2f,%rdx,%rdx
	add    $0x8000,%rdx
	mov    %rdx,0x1000(%rax,%rcx,8)
	mov    %rcx,%rdx
	imul   $0xffffffffffffd4cd,%rdx,%rdx
	mov    %rdx,0x1800(%rax,%rcx,8)
	mov    %rcx,%rdx
	imul   $0xffffffffffffab33,%rdx,%rdx
	mov    %rdx,0x2000(%rax,%rcx,8)
	mov    %rcx,%rdx
	shl    $0xf,%rdx
	add    $0x807fff,%rdx
	mov    %rdx,0x2800(%rax,%rcx,8)
	mov    %rcx,%rdx
	imul   $0xffffffffffff94d1,%rdx,%rdx
	mov    %rdx,0x3000(%rax,%rcx,8)
	lea    (%rcx,%rcx,4),%rdx
	shl    $0x6,%rdx
	lea    (%rdx,%rcx,8),%rdx
	lea    (%rdx,%rcx,4),%rdx
	add    %rcx,%rdx
	shl    $0x4,%rdx
	add    %rcx,%rdx
	neg    %rdx
	mov    %rdx,0x3800(%rax,%rcx,8)
	add    $0x1,%rcx
	cmp    $0xff,%rcx
	jle    6fa1 <rgb_ycc_start+0x31>
	mov    -0x8(%rbp),%r15
	leaveq 
	retq   
	nopw   0x0(%rax,%rax,1)

0007090 <rgb_ycc_convert>:
	push   %rbp
	mov    %rsp,%rbp
	mov    0x3c(%rdi),%eax
	add    $0xfffffffa,%eax
	cmp    $0x9,%eax
	ja     70b6 <rgb_ycc_convert+0x26>
	lea    0x41fb2(%rip),%r9        # 49058 <_fini+0xd78>
	movslq (%r9,%rax,4),%rax
	add    %r9,%rax
	jmpq   *%rax
	callq  6d00 <extxrgb_ycc_convert_internal>
	leaveq 
	retq   
	callq  5e60 <rgb_ycc_convert_internal>
	leaveq 
	retq   
	callq  60d0 <extrgb_ycc_convert_internal>
	leaveq 
	retq   
	callq  6340 <extrgbx_ycc_convert_internal>
	leaveq 
	retq   
	callq  65b0 <extbgr_ycc_convert_internal>
	leaveq 
	retq   
	callq  6820 <extbgrx_ycc_convert_internal>
	leaveq 
	retq   
	callq  6a90 <extxbgr_ycc_convert_internal>
	leaveq 
	retq   

00070e0 <rgb_gray_convert>:
	push   %rbp
	mov    %rsp,%rbp
	mov    0x3c(%rdi),%eax
	add    $0xfffffffa,%eax
	cmp    $0x9,%eax
	ja     7106 <rgb_gray_convert+0x26>
	lea    0x41f8a(%rip),%r9        # 49080 <_fini+0xda0>
	movslq (%r9,%rax,4),%rax
	add    %r9,%rax
	jmpq   *%rax
	callq  6e40 <extxrgb_gray_convert_internal>
	leaveq 
	retq   
	callq  5fa0 <rgb_gray_convert_internal>
	leaveq 
	retq   
	callq  6210 <extrgb_gray_convert_internal>
	leaveq 
	retq   
	callq  6480 <extrgbx_gray_convert_internal>
	leaveq 
	retq   
	callq  66f0 <extbgr_gray_convert_internal>
	leaveq 
	retq   
	callq  6960 <extbgrx_gray_convert_internal>
	leaveq 
	retq   
	callq  6bd0 <extxbgr_gray_convert_internal>
	leaveq 
	retq   

0007130 <rgb_rgb_convert>:
	push   %rbp
	mov    %rsp,%rbp
	mov    0x3c(%rdi),%eax
	add    $0xfffffffa,%eax
	cmp    $0x9,%eax
	ja     7156 <rgb_rgb_convert+0x26>
	lea    0x41f62(%rip),%r9        # 490a8 <_fini+0xdc8>
	movslq (%r9,%rax,4),%rax
	add    %r9,%rax
	jmpq   *%rax
	callq  6ee0 <extxrgb_rgb_convert_internal>
	leaveq 
	retq   
	callq  6040 <rgb_rgb_convert_internal>
	leaveq 
	retq   
	callq  62b0 <extrgb_rgb_convert_internal>
	leaveq 
	retq   
	callq  6520 <extrgbx_rgb_convert_internal>
	leaveq 
	retq   
	callq  6790 <extbgr_rgb_convert_internal>
	leaveq 
	retq   
	callq  6a00 <extbgrx_rgb_convert_internal>
	leaveq 
	retq   
	callq  6c70 <extxbgr_rgb_convert_internal>
	leaveq 
	retq   

0007180 <cmyk_ycck_convert>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x50,%rsp
	mov    %r15,-0x48(%rbp)
	mov    %r14,-0x40(%rbp)
	mov    %r13,-0x38(%rbp)
	mov    %r12,-0x30(%rbp)
	mov    %rbx,-0x28(%rbp)
	mov    %rdx,-0x10(%rbp)
	mov    0x1d8(%rdi),%rax
	mov    0x10(%rax),%r9
	mov    0x30(%rdi),%r11d
	mov    $0x1ff,%eax
	mov    $0xff,%edi
	xor    %ebx,%ebx
	jmpq   729e <cmyk_ycck_convert+0x11e>
	movzbl 0x3(%r8),%ecx
	mov    %ebx,%r13d
	movzbl 0x1(%r8),%edx
	sub    %edx,%eax
	movslq %eax,%rax
	movzbl (%r8),%r14d
	sub    %r14d,%edi
	movslq %edi,%rsi
	movzbl 0x2(%r8),%edi
	mov    %cl,(%r15,%r13,1)
	mov    (%r9,%rax,8),%rax
	add    (%r9,%rsi,8),%rax
	mov    $0x2ff,%ecx
	sub    %edi,%ecx
	movslq %ecx,%rcx
	add    (%r9,%rcx,8),%rax
	sar    $0x10,%rax
	mov    %al,(%r10,%r13,1)
	mov    $0x4ff,%eax
	sub    %edx,%eax
	movslq %eax,%rax
	mov    (%r9,%rax,8),%rax
	mov    $0x3ff,%ecx
	sub    %r14d,%ecx
	movslq %ecx,%rcx
	add    (%r9,%rcx,8),%rax
	mov    $0x5ff,%ecx
	mov    %rcx,%rsi
	sub    %edi,%esi
	movslq %esi,%rsi
	add    (%r9,%rsi,8),%rax
	sar    $0x10,%rax
	mov    %al,(%r12,%r13,1)
	mov    $0x6ff,%eax
	sub    %edx,%eax
	movslq %eax,%rax
	mov    (%r9,%rax,8),%rax
	sub    %r14d,%ecx
	movslq %ecx,%rcx
	add    (%r9,%rcx,8),%rax
	mov    $0x7ff,%ecx
	sub    %edi,%ecx
	movslq %ecx,%rcx
	add    (%r9,%rcx,8),%rax
	sar    $0x10,%rax
	mov    -0x8(%rbp),%rcx
	mov    %al,(%rcx,%r13,1)
	add    $0x4,%r8
	add    $0x1,%ebx
	mov    $0xff,%edi
	mov    $0x1ff,%eax
	cmp    %r11d,%ebx
	jb     71c0 <cmyk_ycck_convert+0x40>
	mov    -0x20(%rbp),%rcx
	lea    0x8(%rcx),%rsi
	mov    -0x18(%rbp),%rcx
	add    $0x1,%ecx
	xor    %ebx,%ebx
	mov    -0x10(%rbp),%rdx
	mov    -0x50(%rbp),%r8
	add    $0xffffffff,%r8d
	test   %r8d,%r8d
	jns    72bd <cmyk_ycck_convert+0x13d>
	mov    -0x28(%rbp),%rbx
	mov    -0x30(%rbp),%r12
	mov    -0x38(%rbp),%r13
	mov    -0x40(%rbp),%r14
	mov    -0x48(%rbp),%r15
	leaveq 
	retq   
	mov    %r8,-0x50(%rbp)
	mov    (%rsi),%r8
	mov    %rsi,-0x20(%rbp)
	mov    (%rdx),%r10
	mov    %rcx,-0x18(%rbp)
	mov    %ecx,%esi
	mov    (%r10,%rsi,8),%r10
	mov    0x8(%rdx),%rcx
	mov    (%rcx,%rsi,8),%r12
	mov    0x10(%rdx),%rcx
	mov    (%rcx,%rsi,8),%rcx
	mov    %rcx,-0x8(%rbp)
	mov    0x18(%rdx),%rcx
	mov    (%rcx,%rsi,8),%r15
	jmp    727c <cmyk_ycck_convert+0xfc>
	data16 nopw %cs:0x0(%rax,%rax,1)
	xchg   %ax,%ax

0007300 <grayscale_convert>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %r13,-0x8(%rbp)
	mov    %r14,-0x10(%rbp)
	mov    %r15,-0x18(%rbp)
	mov    0x30(%rdi),%r11d
	movslq 0x38(%rdi),%r9
	xor    %r10d,%r10d
	jmp    733f <grayscale_convert+0x3f>
	movzbl (%rax),%r15d
	mov    %edi,%r14d
	mov    %r15b,0x0(%r13,%r14,1)
	add    %r9,%rax
	add    $0x1,%edi
	cmp    %r11d,%edi
	jb     7321 <grayscale_convert+0x21>
	add    $0x8,%rsi
	add    $0x1,%ecx
	add    $0xffffffff,%r8d
	test   %r8d,%r8d
	jns    7356 <grayscale_convert+0x56>
	mov    -0x18(%rbp),%r15
	mov    -0x10(%rbp),%r14
	mov    -0x8(%rbp),%r13
	leaveq 
	retq   
	mov    (%rsi),%rax
	mov    (%rdx),%r13
	mov    %ecx,%edi
	mov    0x0(%r13,%rdi,8),%r13
	mov    %r10,%rdi
	jmp    7333 <grayscale_convert+0x33>
	nopl   0x0(%rax,%rax,1)

0007370 <null_convert>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %r12,-0x18(%rbp)
	mov    %r13,-0x20(%rbp)
	mov    %r14,-0x28(%rbp)
	mov    %r15,-0x30(%rbp)
	mov    0x30(%rdi),%r14d
	xor    %eax,%eax
	movslq 0x4c(%rdi),%r9
	cmp    $0x3,%r9d
	je     73d9 <null_convert+0x69>
	cmp    $0x4,%r9d
	je     73f4 <null_convert+0x84>
	mov    %rbx,-0x10(%rbp)
	jmpq   742d <F_3_624+0x31>
	movzbl (%rdi),%r10d
	mov    %r9d,%r12d
	mov    %r10b,0x0(%r13,%r12,1)
	movzbl 0x1(%rdi),%r10d
	mov    %r10b,(%r11,%r12,1)
	movzbl 0x2(%rdi),%r10d
	mov    %r10b,(%r15,%r12,1)
	add    $0x3,%rdi
	add    $0x1,%r9d
	cmp    %r14d,%r9d
	jb     73a7 <null_convert+0x37>
	add    $0x8,%rsi
	add    $0x1,%ecx
	add    $0xffffffff,%r8d
	test   %r8d,%r8d
	jns    7450 <F_3_624+0x54>
	mov    -0x30(%rbp),%r15
	mov    -0x28(%rbp),%r14
	mov    -0x20(%rbp),%r13
	mov    -0x18(%rbp),%r12
	leaveq 
	retq   
	mov    %rbx,-0x10(%rbp)
	jmpq   74af <F_3_624+0xb3>
	movzbl (%rcx,%r13,1),%r12d
	mov    %eax,%r10d
	mov    %r12b,(%r11,%r10,1)
	add    %r9,%rcx
	add    $0x1,%eax
	cmp    %eax,%r14d
	ja     73fd <F_3_624+0x1>
	add    $0x1,%edi
	xor    %eax,%eax
	cmp    %edi,%r9d
	jg     74ce <F_3_624+0xd2>
	add    $0x8,%rsi
	mov    -0x8(%rbp),%rcx
	add    $0x1,%ecx
	add    $0xffffffff,%r8d
	test   %r8d,%r8d
	jns    74e1 <F_3_624+0xe5>
	mov    -0x30(%rbp),%r15
	mov    -0x28(%rbp),%r14
	mov    -0x20(%rbp),%r13
	mov    -0x18(%rbp),%r12
	mov    -0x10(%rbp),%rbx
	leaveq 
	retq   
	mov    (%rsi),%rdi
	mov    (%rdx),%r9
	mov    %ecx,%r10d
	mov    (%r9,%r10,8),%r13
	mov    0x8(%rdx),%r9
	mov    (%r9,%r10,8),%r11
	mov    0x10(%rdx),%r9
	mov    (%r9,%r10,8),%r15
	mov    %rax,%r9
	jmpq   73cd <null_convert+0x5d>
	movzbl (%rdi),%r9d
	mov    %ebx,%r15d
	mov    %r9b,(%r12,%r15,1)
	movzbl 0x1(%rdi),%r9d
	mov    %r9b,0x0(%r13,%r15,1)
	movzbl 0x2(%rdi),%r9d
	mov    %r9b,(%r10,%r15,1)
	movzbl 0x3(%rdi),%r9d
	mov    %r9b,(%r11,%r15,1)
	add    $0x4,%rdi
	add    $0x1,%ebx
	cmp    %ebx,%r14d
	ja     7475 <F_3_624+0x79>
	add    $0x8,%rsi
	add    $0x1,%ecx
	add    $0xffffffff,%r8d
	test   %r8d,%r8d
	jns    74ef <F_3_624+0xf3>
	mov    -0x30(%rbp),%r15
	mov    -0x28(%rbp),%r14
	mov    -0x20(%rbp),%r13
	mov    -0x18(%rbp),%r12
	mov    -0x10(%rbp),%rbx
	leaveq 
	retq   
	mov    (%rsi),%rcx
	movslq %edi,%r13
	mov    (%rdx,%r13,8),%r10
	mov    (%r10,%rbx,8),%r11
	jmpq   740f <F_3_624+0x13>
	mov    %ecx,%ebx
	mov    %rcx,-0x8(%rbp)
	mov    %rax,%rdi
	jmpq   7419 <F_3_624+0x1d>
	mov    (%rsi),%rdi
	mov    (%rdx),%r9
	mov    %ecx,%ebx
	mov    (%r9,%rbx,8),%r12
	mov    0x8(%rdx),%r9
	mov    (%r9,%rbx,8),%r13
	mov    0x10(%rdx),%r9
	mov    (%r9,%rbx,8),%r10
	mov    0x18(%rdx),%r9
	mov    (%r9,%rbx,8),%r11
	mov    %rax,%rbx
	jmp    74a3 <F_3_624+0xa7>
	nopl   0x0(%rax,%rax,1)

0007520 <null_method>:
	push   %rbp
	mov    %rsp,%rbp
	leaveq 
	retq   
	nopw   %cs:0x0(%rax,%rax,1)

0007530 <jinit_forward_dct>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %r14,-0x10(%rbp)
	mov    %r15,-0x18(%rbp)
	mov    %r13,-0x8(%rbp)
	mov    $0x1,%r13d
	mov    0x8(%rdi),%rax
	mov    (%rax),%rax
	mov    $0x90,%edx
	mov    %rdi,%r15
	mov    %r13,%rsi
	callq  *%rax
	mov    %rax,0x1e8(%r15)
	lea    0x3f4(%rip),%rcx        # 7960 <start_pass_fdctmgr>
	mov    %rcx,(%rax)
	lea    0x84a(%rip),%rdx        # 7dc0 <forward_DCT>
	mov    0x114(%r15),%ecx
	test   %ecx,%ecx
	je     75b3 <jinit_forward_dct+0x83>
	cmp    $0x1,%ecx
	je     7605 <jinit_forward_dct+0xd5>
	cmp    $0x2,%ecx
	jne    75b7 <jinit_forward_dct+0x87>
	lea    0x9ee(%rip),%rcx        # 7f80 <forward_DCT_float>
	mov    %rcx,0x8(%rax)
	mov    %rax,%r14
	callq  3dc90 <jsimd_can_fdct_float>
	test   %eax,%eax
	jne    7626 <jinit_forward_dct+0xf6>
	mov    0x66a0b(%rip),%rax        # 6dfb8 <jpeg_fdct_float@@LIBJPEG_6.2+0x40a08>
	mov    %rax,0x50(%r14)
	jmp    75cf <jinit_forward_dct+0x9f>
	test   %ecx,%ecx
	je     7633 <jinit_forward_dct+0x103>
	mov    (%r15),%rcx
	movl   $0x30,0x28(%rcx)
	mov    (%r15),%rcx
	mov    (%rcx),%rcx
	mov    %rax,%r14
	mov    %r15,%rdi
	callq  *%rcx
	mov    0x114(%r15),%eax
	test   %eax,%eax
	je     7657 <jinit_forward_dct+0x127>
	cmp    $0x1,%eax
	je     769c <jinit_forward_dct+0x16c>
	cmp    $0x2,%eax
	jne    765b <jinit_forward_dct+0x12b>
	callq  3dbc0 <jsimd_can_convsamp_float>
	test   %eax,%eax
	jne    76b9 <jinit_forward_dct+0x189>
	lea    0x884(%rip),%rax        # 7e80 <convsamp_float>
	mov    %rax,0x58(%r14)
	jmpq   76c4 <jinit_forward_dct+0x194>
	mov    %rdx,0x8(%rax)
	mov    %rax,%r14
	callq  3dc50 <jsimd_can_fdct_ifast>
	test   %eax,%eax
	jne    76e1 <jinit_forward_dct+0x1b1>
	mov    0x66960(%rip),%rax        # 6df80 <jpeg_fdct_ifast@@LIBJPEG_6.2+0x406f0>
	mov    %rax,0x10(%r14)
	jmp    75cf <jinit_forward_dct+0x9f>
	lea    0x366c3(%rip),%rax        # 3dcf0 <jsimd_fdct_float>
	mov    %rax,0x50(%r14)
	jmp    75cf <jinit_forward_dct+0x9f>
	mov    %rdx,0x8(%rax)
	mov    %rax,%r14
	callq  3dc10 <jsimd_can_fdct_islow>
	test   %eax,%eax
	jne    76f1 <jinit_forward_dct+0x1c1>
	mov    0x6690a(%rip),%rax        # 6df58 <jpeg_fdct_islow@@LIBJPEG_6.2+0x40388>
	mov    %rax,0x10(%r14)
	jmpq   75cf <jinit_forward_dct+0x9f>
	test   %eax,%eax
	je     769c <jinit_forward_dct+0x16c>
	mov    (%r15),%rax
	movl   $0x30,0x28(%rax)
	mov    (%r15),%rax
	mov    (%rax),%rax
	mov    %r15,%rdi
	callq  *%rax
	mov    %r13,%rsi
	xor    %r13d,%r13d
	mov    0x114(%r15),%eax
	cmp    $0x2,%eax
	je     7701 <jinit_forward_dct+0x1d1>
	mov    0x8(%r15),%rax
	mov    (%rax),%rax
	mov    %r15,%rdi
	mov    $0x80,%edx
	callq  *%rax
	mov    %rax,0x48(%r14)
	jmpq   7734 <jinit_forward_dct+0x204>
	callq  3db90 <jsimd_can_convsamp>
	test   %eax,%eax
	jne    7748 <jinit_forward_dct+0x218>
	lea    0x680(%rip),%rax        # 7d30 <convsamp>
	mov    %rax,0x18(%r14)
	jmpq   7753 <jinit_forward_dct+0x223>
	lea    0x36540(%rip),%rax        # 3dc00 <jsimd_convsamp_float>
	mov    %rax,0x58(%r14)
	callq  3dd30 <jsimd_can_quantize_float>
	test   %eax,%eax
	jne    776f <jinit_forward_dct+0x23f>
	lea    0x868(%rip),%rax        # 7f40 <quantize_float>
	mov    %rax,0x60(%r14)
	mov    %r13,%rsi
	jmp    7673 <jinit_forward_dct+0x143>
	lea    0x365f8(%rip),%rax        # 3dce0 <jsimd_fdct_ifast>
	mov    %rax,0x10(%r14)
	jmpq   75cf <jinit_forward_dct+0x9f>
	lea    0x365d8(%rip),%rax        # 3dcd0 <jsimd_fdct_islow>
	mov    %rax,0x10(%r14)
	jmpq   75cf <jinit_forward_dct+0x9f>
	mov    0x8(%r15),%rax
	mov    (%rax),%rax
	mov    %r15,%rdi
	mov    $0x100,%edx
	callq  *%rax
	mov    %rax,0x88(%r14)
	jmp    7734 <jinit_forward_dct+0x204>
	movslq %r13d,%rax
	movq   $0x0,0x28(%r14,%rax,8)
	movq   $0x0,0x68(%r14,%rax,8)
	add    $0x1,%r13d
	cmp    $0x3,%r13d
	jle    771b <jinit_forward_dct+0x1eb>
	mov    -0x8(%rbp),%r13
	mov    -0x18(%rbp),%r15
	mov    -0x10(%rbp),%r14
	leaveq 
	retq   
	lea    0x364a1(%rip),%rax        # 3dbf0 <jsimd_convsamp>
	mov    %rax,0x18(%r14)
	callq  3dd00 <jsimd_can_quantize>
	test   %eax,%eax
	jne    7782 <jinit_forward_dct+0x252>
	lea    0x3d(%rip),%rax        # 77a0 <quantize>
	mov    %rax,0x20(%r14)
	mov    %r13,%rsi
	jmpq   7673 <jinit_forward_dct+0x143>
	lea    0x365fa(%rip),%rax        # 3dd70 <jsimd_quantize_float>
	mov    %rax,0x60(%r14)
	mov    %r13,%rsi
	jmpq   7673 <jinit_forward_dct+0x143>
	lea    0x365d7(%rip),%rax        # 3dd60 <jsimd_quantize>
	mov    %rax,0x20(%r14)
	mov    %r13,%rsi
	jmpq   7673 <jinit_forward_dct+0x143>
	data16 nopw %cs:0x0(%rax,%rax,1)

00077a0 <quantize>:
	push   %rbp
	mov    %rsp,%rbp
	xor    %r8d,%r8d
	jmp    77c6 <quantize+0x26>
	neg    %eax
	movswq %ax,%rax
	add    %ecx,%eax
	imul   %r10d,%eax
	lea    0x10(%r11),%ecx
	shr    %cl,%eax
	neg    %eax
	mov    %ax,(%rdi,%r9,2)
	add    $0x1,%r8d
	cmp    $0x3f,%r8d
	jle    77ce <quantize+0x2e>
	leaveq 
	retq   
	movslq %r8d,%r9
	movzwl (%rsi,%r9,2),%r10d
	lea    0x40(%r8),%eax
	movslq %eax,%rax
	movzwl (%rsi,%rax,2),%ecx
	lea    0xc0(%r8),%eax
	movslq %eax,%rax
	movswq (%rsi,%rax,2),%r11
	movswq (%rdx,%r9,2),%rax
	test   %ax,%ax
	js     77a9 <quantize+0x9>
	add    %ecx,%eax
	imul   %r10d,%eax
	lea    0x10(%r11),%ecx
	shr    %cl,%eax
	jmp    77bd <quantize+0x1d>
	nopl   0x0(%rax,%rax,1)

0007810 <flss>:
	push   %rbp
	mov    %rsp,%rbp
	test   %di,%di
	jne    781d <flss+0xd>
	xor    %eax,%eax
	leaveq 
	retq   
	movzwl %di,%eax
	and    $0xff00,%eax
	test   %eax,%eax
	jle    7835 <flss+0x25>
	mov    $0xc,%ecx
	mov    $0x10,%eax
	jmp    7842 <flss+0x32>
	shl    $0x8,%edi
	mov    $0x4,%ecx
	mov    $0x8,%eax
	movzwl %di,%edx
	and    $0xf000,%edx
	test   %edx,%edx
	jg     7855 <flss+0x45>
	shl    $0x4,%edi
	mov    %rcx,%rax
	movzwl %di,%ecx
	and    $0xc000,%ecx
	test   %ecx,%ecx
	jg     7868 <flss+0x58>
	shl    $0x2,%edi
	add    $0xfffffffe,%eax
	movzwl %di,%ecx
	and    $0x8000,%ecx
	test   %ecx,%ecx
	jle    7877 <flss+0x67>
	leaveq 
	retq   
	add    $0xffffffff,%eax
	leaveq 
	retq   
	nopl   0x0(%rax)

0007880 <compute_reciprocal>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	xor    %eax,%eax
	cmp    $0x1,%di
	je     78dc <compute_reciprocal+0x5c>
	movzwl %di,%ecx
	mov    %rcx,%rax
	shr    %eax
	mov    %r13,-0x8(%rbp)
	mov    %r14,-0x10(%rbp)
	mov    %r15,-0x18(%rbp)
	mov    %rax,%r13
	mov    %rsi,%r14
	mov    %rcx,%r15
	callq  7810 <flss>
	add    $0xffffffff,%eax
	movslq %eax,%rax
	lea    0x10(%rax),%rcx
	mov    $0x1,%esi
	mov    %rsi,%rax
	shl    %cl,%eax
	xor    %edx,%edx
	div    %r15d
	test   %edx,%edx
	je     78fe <compute_reciprocal+0x7e>
	shr    %r15d
	cmp    %r15d,%edx
	jbe    7944 <compute_reciprocal+0xc4>
	add    $0x1,%eax
	jmp    7903 <compute_reciprocal+0x83>
	movw   $0x1,(%rsi)
	movw   $0x0,0x80(%rsi)
	movw   $0x1,0x100(%rsi)
	movw   $0xfff0,0x180(%rsi)
	leaveq 
	retq   
	shr    %eax
	add    $0xffffffff,%ecx
	mov    %ax,(%r14)
	mov    %r13w,0x80(%r14)
	mov    %rcx,%rdx
	mov    %rdx,%rcx
	neg    %ecx
	mov    %rsi,%rax
	shl    %cl,%eax
	mov    %ax,0x100(%r14)
	lea    -0x10(%rdx),%eax
	mov    %ax,0x180(%r14)
	cmp    $0x10,%edx
	jg     794a <compute_reciprocal+0xca>
	xor    %eax,%eax
	mov    -0x18(%rbp),%r15
	mov    -0x10(%rbp),%r14
	mov    -0x8(%rbp),%r13
	leaveq 
	retq   
	add    $0x1,%r13d
	jmp    7903 <compute_reciprocal+0x83>
	mov    %rsi,%rax
	mov    -0x18(%rbp),%r15
	mov    -0x10(%rbp),%r14
	mov    -0x8(%rbp),%r13
	leaveq 
	retq   
	nopl   0x0(%rax,%rax,1)

0007960 <start_pass_fdctmgr>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x60,%rsp
	mov    %r15,-0x28(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %rdi,-0x58(%rbp)
	mov    %rbx,-0x8(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    0x1e8(%rdi),%rbx
	movsd  0x41911(%rip),%xmm1        # 492a0 <aanscalefactor.7+0x40>
	movsd  0x41911(%rip),%xmm2        # 492a8 <aanscalefactor.7+0x48>
	mov    0x58(%rdi),%r15
	add    $0x10,%r15
	lea    0x363ba(%rip),%r12        # 3dd60 <jsimd_quantize>
	mov    %r12,-0x60(%rbp)
	mov    %rdi,%r14
	mov    $0x1,%esi
	mov    $0x200,%edx
	lea    0x41822(%rip),%rax        # 491e0 <aanscales.6>
	mov    $0x100,%r10d
	lea    0x41895(%rip),%r9        # 49260 <aanscalefactor.7>
	xor    %r13d,%r13d
	mov    %r13,%r8
	jmp    7a27 <start_pass_fdctmgr+0xc7>
	mov    (%rdi),%rax
	movl   $0x30,0x28(%rax)
	mov    (%rdi),%rax
	mov    (%rax),%rax
	mov    %r8,%r13
	mov    %rdi,%r14
	callq  *%rax
	mov    %r13,%r8
	lea    0x4186b(%rip),%r9        # 49260 <aanscalefactor.7>
	lea    0x417e4(%rip),%rax        # 491e0 <aanscales.6>
	xor    %r13d,%r13d
	movsd  0x41899(%rip),%xmm1        # 492a0 <aanscalefactor.7+0x40>
	movsd  0x41899(%rip),%xmm2        # 492a8 <aanscalefactor.7+0x48>
	add    $0x1,%r8d
	add    $0x60,%r15
	mov    $0x100,%r10d
	mov    $0x200,%edx
	mov    $0x1,%esi
	movslq 0x4c(%r14),%rcx
	cmp    %r8d,%ecx
	jg     7a46 <start_pass_fdctmgr+0xe6>
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	mov    -0x20(%rbp),%r14
	mov    -0x28(%rbp),%r15
	leaveq 
	retq   
	movslq (%r15),%rcx
	test   %ecx,%ecx
	js     7a61 <start_pass_fdctmgr+0x101>
	cmp    $0x3,%ecx
	jg     7a61 <start_pass_fdctmgr+0x101>
	mov    0x60(%r14,%rcx,8),%rdi
	test   %rdi,%rdi
	je     7a61 <start_pass_fdctmgr+0x101>
	mov    %r14,%rdi
	jmp    7ac0 <start_pass_fdctmgr+0x160>
	mov    (%r14),%rax
	movl   $0x34,0x28(%rax)
	mov    (%r14),%rax
	mov    %ecx,0x2c(%rax)
	mov    (%r14),%rax
	mov    (%rax),%rax
	mov    %rcx,%r12
	mov    %r8,%r13
	mov    %r14,%rdi
	callq  *%rax
	mov    %r12,%rcx
	mov    %r14,%rdi
	mov    %r13,%r8
	lea    0x417ce(%rip),%r9        # 49260 <aanscalefactor.7>
	mov    $0x100,%r10d
	lea    0x41741(%rip),%rax        # 491e0 <aanscales.6>
	mov    $0x200,%edx
	mov    $0x1,%esi
	xor    %r13d,%r13d
	mov    -0x60(%rbp),%r12
	movsd  0x417e8(%rip),%xmm1        # 492a0 <aanscalefactor.7+0x40>
	movsd  0x417e8(%rip),%xmm2        # 492a8 <aanscalefactor.7+0x48>
	mov    0x60(%rdi,%rcx,8),%r14
	mov    0x114(%rdi),%r11d
	test   %r11d,%r11d
	je     7b39 <start_pass_fdctmgr+0x1d9>
	cmp    $0x1,%r11d
	je     7b54 <start_pass_fdctmgr+0x1f4>
	cmp    $0x2,%r11d
	jne    79d3 <start_pass_fdctmgr+0x73>
	mov    0x68(%rbx,%rcx,8),%rax
	test   %rax,%rax
	jne    7b2c <start_pass_fdctmgr+0x1cc>
	mov    0x8(%rdi),%rax
	mov    (%rax),%rax
	mov    %r8,-0x40(%rbp)
	mov    %r15,-0x50(%rbp)
	mov    %r10,%rdx
	mov    %r9,%r12
	mov    %rcx,%r15
	callq  *%rax
	mov    %rax,0x68(%rbx,%r15,8)
	mov    %r15,%rcx
	mov    %r12,%r9
	mov    -0x58(%rbp),%rdi
	mov    -0x50(%rbp),%r15
	mov    -0x40(%rbp),%r8
	movsd  0x4177c(%rip),%xmm1        # 492a0 <aanscalefactor.7+0x40>
	movsd  0x4177c(%rip),%xmm2        # 492a8 <aanscalefactor.7+0x48>
	mov    0x68(%rbx,%rcx,8),%r12
	mov    %r13,%rax
	mov    %rax,%rdx
	jmp    7bad <start_pass_fdctmgr+0x24d>
	test   %r11d,%r11d
	jne    79d3 <start_pass_fdctmgr+0x73>
	mov    0x28(%rbx,%rcx,8),%rax
	test   %rax,%rax
	je     7bc9 <start_pass_fdctmgr+0x269>
	mov    %r15,%rax
	jmpq   7bed <start_pass_fdctmgr+0x28d>
	mov    0x28(%rbx,%rcx,8),%r9
	test   %r9,%r9
	je     7bfc <start_pass_fdctmgr+0x29c>
	mov    %r15,%rdx
	jmpq   7c27 <start_pass_fdctmgr+0x2c7>
	movslq %eax,%r11
	movzwl (%r14,%r11,2),%esi
	movzwl %si,%esi
	cvtsi2sd %rsi,%xmm0
	mulsd  (%r9,%r10,8),%xmm0
	movslq %ecx,%rsi
	mulsd  (%r9,%rsi,8),%xmm0
	mulsd  %xmm2,%xmm0
	movapd %xmm1,%xmm3
	divsd  %xmm0,%xmm3
	cvtsd2ss %xmm3,%xmm0
	movss  %xmm0,(%r12,%r11,4)
	add    $0x1,%eax
	add    $0x1,%ecx
	cmp    $0x7,%ecx
	jle    7b6a <start_pass_fdctmgr+0x20a>
	add    $0x1,%edx
	cmp    $0x7,%edx
	jle    7c39 <start_pass_fdctmgr+0x2d9>
	mov    %rdi,%r14
	lea    0x41620(%rip),%rax        # 491e0 <aanscales.6>
	mov    -0x60(%rbp),%r12
	jmpq   7a0f <start_pass_fdctmgr+0xaf>
	mov    0x8(%rdi),%rax
	mov    (%rax),%rax
	mov    %r8,-0x30(%rbp)
	mov    %r15,-0x48(%rbp)
	mov    %rcx,%r15
	callq  *%rax
	mov    %rax,0x28(%rbx,%r15,8)
	mov    %r15,%rcx
	mov    -0x48(%rbp),%rax
	mov    -0x30(%rbp),%r8
	mov    0x28(%rbx,%rcx,8),%r15
	mov    %r8,-0x30(%rbp)
	mov    %rax,-0x40(%rbp)
	jmp    7c74 <start_pass_fdctmgr+0x314>
	mov    0x8(%rdi),%rax
	mov    (%rax),%rax
	mov    %r8,-0x38(%rbp)
	mov    %r15,-0x50(%rbp)
	mov    %rcx,%r15
	callq  *%rax
	mov    %rax,0x28(%rbx,%r15,8)
	mov    %r15,%rcx
	mov    -0x50(%rbp),%rdx
	mov    -0x38(%rbp),%r8
	lea    0x415b9(%rip),%rax        # 491e0 <aanscales.6>
	mov    0x28(%rbx,%rcx,8),%r15
	mov    %r8,-0x38(%rbp)
	mov    %rdx,-0x48(%rbp)
	jmpq   7cf4 <start_pass_fdctmgr+0x394>
	movslq %edx,%r10
	mov    %r13,%rcx
	jmpq   7ba5 <start_pass_fdctmgr+0x245>
	movslq %r13d,%rax
	movzwl (%r14,%rax,2),%edi
	shl    $0x3,%edi
	lea    (%r15,%rax,2),%rsi
	callq  7880 <compute_reciprocal>
	test   %eax,%eax
	jne    7c70 <start_pass_fdctmgr+0x310>
	mov    0x20(%rbx),%rax
	cmp    %r12,%rax
	jne    7c70 <start_pass_fdctmgr+0x310>
	lea    -0x4cc(%rip),%rax        # 77a0 <quantize>
	mov    %rax,0x20(%rbx)
	add    $0x1,%r13d
	cmp    $0x3f,%r13d
	jle    7c44 <start_pass_fdctmgr+0x2e4>
	mov    -0x58(%rbp),%r14
	mov    -0x40(%rbp),%r15
	mov    -0x30(%rbp),%r8
	lea    0x415d3(%rip),%r9        # 49260 <aanscalefactor.7>
	lea    0x4154c(%rip),%rax        # 491e0 <aanscales.6>
	xor    %r13d,%r13d
	movsd  0x41601(%rip),%xmm1        # 492a0 <aanscalefactor.7+0x40>
	movsd  0x41601(%rip),%xmm2        # 492a8 <aanscalefactor.7+0x48>
	jmpq   7a0f <start_pass_fdctmgr+0xaf>
	movslq %r13d,%rdx
	movswq (%rax,%rdx,2),%rax
	movzwl (%r14,%rdx,2),%ecx
	imul   %rcx,%rax
	lea    0x400(%rax),%rdi
	sar    $0xb,%rdi
	lea    (%r15,%rdx,2),%rsi
	callq  7880 <compute_reciprocal>
	test   %eax,%eax
	jne    7ce9 <start_pass_fdctmgr+0x389>
	mov    0x20(%rbx),%rax
	cmp    %r12,%rax
	jne    7ce9 <start_pass_fdctmgr+0x389>
	lea    -0x545(%rip),%rax        # 77a0 <quantize>
	mov    %rax,0x20(%rbx)
	add    $0x1,%r13d
	lea    0x414ec(%rip),%rax        # 491e0 <aanscales.6>
	cmp    $0x3f,%r13d
	jle    7cac <start_pass_fdctmgr+0x34c>
	mov    -0x58(%rbp),%r14
	mov    -0x48(%rbp),%r15
	mov    -0x38(%rbp),%r8
	lea    0x41553(%rip),%r9        # 49260 <aanscalefactor.7>
	xor    %r13d,%r13d
	movsd  0x41588(%rip),%xmm1        # 492a0 <aanscalefactor.7+0x40>
	movsd  0x41588(%rip),%xmm2        # 492a8 <aanscalefactor.7+0x48>
	jmpq   7a0f <start_pass_fdctmgr+0xaf>
	data16 nopw %cs:0x0(%rax,%rax,1)

0007d30 <convsamp>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %esi,%r8d
	xor    %eax,%eax
	jmp    7daf <convsamp+0x7f>
	movslq %eax,%rcx
	mov    (%rdi,%rcx,8),%rsi
	movzbl (%r8,%rsi,1),%ecx
	add    $0xffffff80,%ecx
	mov    %cx,(%rdx)
	movzbl 0x1(%r8,%rsi,1),%ecx
	add    $0xffffff80,%ecx
	mov    %cx,0x2(%rdx)
	movzbl 0x2(%r8,%rsi,1),%ecx
	add    $0xffffff80,%ecx
	mov    %cx,0x4(%rdx)
	movzbl 0x3(%r8,%rsi,1),%ecx
	add    $0xffffff80,%ecx
	mov    %cx,0x6(%rdx)
	movzbl 0x4(%r8,%rsi,1),%ecx
	add    $0xffffff80,%ecx
	mov    %cx,0x8(%rdx)
	movzbl 0x5(%r8,%rsi,1),%ecx
	add    $0xffffff80,%ecx
	mov    %cx,0xa(%rdx)
	movzbl 0x6(%r8,%rsi,1),%ecx
	add    $0xffffff80,%ecx
	mov    %cx,0xc(%rdx)
	movzbl 0x7(%r8,%rsi,1),%ecx
	add    $0xffffff80,%ecx
	mov    %cx,0xe(%rdx)
	add    $0x1,%eax
	add    $0x10,%rdx
	cmp    $0x7,%eax
	jle    7d3b <convsamp+0xb>
	leaveq 
	retq   
	nopw   %cs:0x0(%rax,%rax,1)

0007dc0 <forward_DCT>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x50,%rsp
	mov    %r15,-0x48(%rbp)
	mov    %rbx,-0x28(%rbp)
	mov    %r12,-0x30(%rbp)
	mov    %r13,-0x38(%rbp)
	mov    %r14,-0x40(%rbp)
	mov    0x1e8(%rdi),%rdi
	movslq 0x10(%rsi),%rax
	mov    0x28(%rdi,%rax,8),%r15
	mov    0x10(%rdi),%r12
	mov    0x18(%rdi),%rax
	mov    %rax,-0x10(%rbp)
	mov    0x20(%rdi),%rsi
	mov    %rsi,-0x8(%rbp)
	mov    0x48(%rdi),%r13
	mov    0x10(%rbp),%esi
	mov    %rsi,-0x50(%rbp)
	mov    %r8d,%edi
	lea    (%rdx,%rdi,8),%rdi
	mov    %rdi,-0x18(%rbp)
	mov    %rcx,%r14
	xor    %ebx,%ebx
	jmp    7e5c <forward_DCT+0x9c>
	mov    %r9,%rsi
	mov    %r13,%rdx
	mov    %r9,-0x20(%rbp)
	callq  *%rax
	mov    %r13,%rdi
	callq  *%r12
	mov    %ebx,%eax
	shl    $0x7,%rax
	lea    (%r14,%rax,1),%rdi
	mov    %r15,%rsi
	mov    %r13,%rdx
	mov    -0x8(%rbp),%rax
	callq  *%rax
	add    $0x1,%ebx
	mov    -0x20(%rbp),%rax
	lea    0x8(%rax),%r9d
	mov    -0x10(%rbp),%rax
	mov    -0x18(%rbp),%rdi
	mov    -0x50(%rbp),%rsi
	cmp    %esi,%ebx
	jb     7e1d <forward_DCT+0x5d>
	mov    -0x40(%rbp),%r14
	mov    -0x38(%rbp),%r13
	mov    -0x30(%rbp),%r12
	mov    -0x28(%rbp),%rbx
	mov    -0x48(%rbp),%r15
	leaveq 
	retq   
	nopw   %cs:0x0(%rax,%rax,1)

0007e80 <convsamp_float>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %esi,%r8d
	xor    %eax,%eax
	jmpq   7f2a <convsamp_float+0xaa>
	movslq %eax,%rcx
	mov    (%rdi,%rcx,8),%rsi
	movzbl (%r8,%rsi,1),%ecx
	add    $0xffffff80,%ecx
	cvtsi2ss %ecx,%xmm0
	movss  %xmm0,(%rdx)
	movzbl 0x1(%r8,%rsi,1),%ecx
	add    $0xffffff80,%ecx
	cvtsi2ss %ecx,%xmm0
	movss  %xmm0,0x4(%rdx)
	movzbl 0x2(%r8,%rsi,1),%ecx
	add    $0xffffff80,%ecx
	cvtsi2ss %ecx,%xmm0
	movss  %xmm0,0x8(%rdx)
	movzbl 0x3(%r8,%rsi,1),%ecx
	add    $0xffffff80,%ecx
	cvtsi2ss %ecx,%xmm0
	movss  %xmm0,0xc(%rdx)
	movzbl 0x4(%r8,%rsi,1),%ecx
	add    $0xffffff80,%ecx
	cvtsi2ss %ecx,%xmm0
	movss  %xmm0,0x10(%rdx)
	movzbl 0x5(%r8,%rsi,1),%ecx
	add    $0xffffff80,%ecx
	cvtsi2ss %ecx,%xmm0
	movss  %xmm0,0x14(%rdx)
	movzbl 0x6(%r8,%rsi,1),%ecx
	add    $0xffffff80,%ecx
	cvtsi2ss %ecx,%xmm0
	movss  %xmm0,0x18(%rdx)
	movzbl 0x7(%r8,%rsi,1),%ecx
	add    $0xffffff80,%ecx
	cvtsi2ss %ecx,%xmm0
	movss  %xmm0,0x1c(%rdx)
	add    $0x1,%eax
	add    $0x20,%rdx
	cmp    $0x7,%eax
	jle    7e8e <convsamp_float+0xe>
	leaveq 
	retq   
	data16 nopw %cs:0x0(%rax,%rax,1)

0007f40 <quantize_float>:
	push   %rbp
	mov    %rsp,%rbp
	movss  0x41364(%rip),%xmm1        # 492b0 <aanscalefactor.7+0x50>
	xor    %eax,%eax
	jmp    7f75 <quantize_float+0x35>
	movslq %eax,%r8
	movss  (%rsi,%r8,4),%xmm0
	mulss  (%rdx,%r8,4),%xmm0
	addss  %xmm1,%xmm0
	cvttss2si %xmm0,%ecx
	add    $0xffffc000,%ecx
	mov    %cx,(%rdi,%r8,2)
	add    $0x1,%eax
	cmp    $0x3f,%eax
	jle    7f50 <quantize_float+0x10>
	leaveq 
	retq   
	nopl   0x0(%rax)

0007f80 <forward_DCT_float>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x50,%rsp
	mov    %r15,-0x48(%rbp)
	mov    %rbx,-0x28(%rbp)
	mov    %r12,-0x30(%rbp)
	mov    %r13,-0x38(%rbp)
	mov    %r14,-0x40(%rbp)
	mov    0x1e8(%rdi),%rdi
	movslq 0x10(%rsi),%rax
	mov    0x68(%rdi,%rax,8),%r15
	mov    0x50(%rdi),%r12
	mov    0x58(%rdi),%rax
	mov    %rax,-0x10(%rbp)
	mov    0x60(%rdi),%rsi
	mov    %rsi,-0x8(%rbp)
	mov    0x88(%rdi),%r13
	mov    0x10(%rbp),%esi
	mov    %rsi,-0x50(%rbp)
	mov    %r8d,%edi
	lea    (%rdx,%rdi,8),%rdi
	mov    %rdi,-0x18(%rbp)
	mov    %rcx,%r14
	xor    %ebx,%ebx
	jmp    801f <forward_DCT_float+0x9f>
	mov    %r9,%rsi
	mov    %r13,%rdx
	mov    %r9,-0x20(%rbp)
	callq  *%rax
	mov    %r13,%rdi
	callq  *%r12
	mov    %ebx,%eax
	shl    $0x7,%rax
	lea    (%r14,%rax,1),%rdi
	mov    %r15,%rsi
	mov    %r13,%rdx
	mov    -0x8(%rbp),%rax
	callq  *%rax
	add    $0x1,%ebx
	mov    -0x20(%rbp),%rax
	lea    0x8(%rax),%r9d
	mov    -0x10(%rbp),%rax
	mov    -0x18(%rbp),%rdi
	mov    -0x50(%rbp),%rsi
	cmp    %esi,%ebx
	jb     7fe0 <forward_DCT_float+0x60>
	mov    -0x40(%rbp),%r14
	mov    -0x38(%rbp),%r13
	mov    -0x30(%rbp),%r12
	mov    -0x28(%rbp),%rbx
	mov    -0x48(%rbp),%r15
	leaveq 
	retq   
	nopl   0x0(%rax)

0008040 <jinit_huff_encoder>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %r15,-0x8(%rbp)
	mov    0x8(%rdi),%rax
	mov    (%rax),%rax
	mov    $0x1,%esi
	mov    $0xc8,%edx
	mov    %rdi,%r15
	callq  *%rax
	mov    %rax,0x1f0(%r15)
	lea    0xb70(%rip),%rcx        # 8be0 <start_pass_huff>
	mov    %rcx,(%rax)
	xor    %ecx,%ecx
	jmp    80a7 <jinit_huff_encoder+0x67>
	movslq %ecx,%rdx
	movq   $0x0,0x60(%rax,%rdx,8)
	movq   $0x0,0x40(%rax,%rdx,8)
	movq   $0x0,0xa0(%rax,%rdx,8)
	movq   $0x0,0x80(%rax,%rdx,8)
	add    $0x1,%ecx
	cmp    $0x3,%ecx
	jle    8077 <jinit_huff_encoder+0x37>
	mov    -0x8(%rbp),%r15
	leaveq 
	retq   
	data16 nopw %cs:0x0(%rax,%rax,1)
	nopl   (%rax)

00080c0 <jpeg_make_c_derived_tbl>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x560,%rsp
	mov    %r12,-0x10(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %r15,-0x28(%rbp)
	mov    %rbx,-0x8(%rbp)
	mov    %rsi,-0x38(%rbp)
	mov    %rdi,-0x50(%rbp)
	test   %edx,%edx
	js     80fe <jpeg_make_c_derived_tbl+0x3e>
	cmp    $0x3,%edx
	jg     80fe <jpeg_make_c_derived_tbl+0x3e>
	mov    %rcx,%rbx
	mov    %rdx,%r12
	mov    %rdi,%r13
	mov    %rsi,%r14
	jmp    8122 <jpeg_make_c_derived_tbl+0x62>
	mov    (%rdi),%rax
	movl   $0x32,0x28(%rax)
	mov    (%rdi),%rax
	mov    %edx,0x2c(%rax)
	mov    (%rdi),%rax
	mov    (%rax),%rax
	mov    %rcx,%rbx
	mov    %rdx,%r12
	mov    %rsi,%r14
	mov    %rdi,%r13
	callq  *%rax
	test   %r14d,%r14d
	jne    8134 <jpeg_make_c_derived_tbl+0x74>
	movslq %r12d,%rax
	mov    0xa0(%r13,%rax,8),%r14
	jmp    813f <jpeg_make_c_derived_tbl+0x7f>
	movslq %r12d,%rax
	mov    0x80(%r13,%rax,8),%r14
	test   %r14,%r14
	jne    8163 <jpeg_make_c_derived_tbl+0xa3>
	mov    0x0(%r13),%rax
	movl   $0x32,0x28(%rax)
	mov    0x0(%r13),%rax
	mov    %r12d,0x2c(%rax)
	mov    0x0(%r13),%rax
	mov    (%rax),%rax
	mov    %r13,%rdi
	callq  *%rax
	mov    $0x1,%r15d
	mov    (%rbx),%rax
	test   %rax,%rax
	jne    8188 <jpeg_make_c_derived_tbl+0xc8>
	mov    0x8(%r13),%rax
	mov    (%rax),%rax
	mov    $0x500,%edx
	mov    %r13,%rdi
	mov    %r15,%rsi
	callq  *%rax
	mov    %rax,(%rbx)
	mov    (%rbx),%rax
	mov    %rax,-0x48(%rbp)
	xor    %ebx,%ebx
	jmp    81ae <jpeg_make_c_derived_tbl+0xee>
	movslq %ebx,%rax
	mov    %r15b,-0x555(%rbp,%rax,1)
	add    $0x1,%ebx
	add    $0xffffffff,%r12d
	test   %r12d,%r12d
	jne    8193 <jpeg_make_c_derived_tbl+0xd3>
	add    $0x1,%r15d
	cmp    $0x10,%r15d
	jle    81db <jpeg_make_c_derived_tbl+0x11b>
	movslq %ebx,%rax
	movb   $0x0,-0x555(%rbp,%rax,1)
	movsbq -0x555(%rbp),%rcx
	mov    %r14,-0x40(%rbp)
	mov    %rbx,-0x30(%rbp)
	xor    %ebx,%ebx
	mov    $0x1,%eax
	mov    %rbx,%r12
	jmp    8259 <jpeg_make_c_derived_tbl+0x199>
	movslq %r15d,%rax
	movzbl (%r14,%rax,1),%r12d
	lea    (%rbx,%r12,1),%eax
	cmp    $0x100,%eax
	jle    81a5 <jpeg_make_c_derived_tbl+0xe5>
	mov    0x0(%r13),%rax
	movl   $0x8,0x28(%rax)
	mov    0x0(%r13),%rax
	mov    (%rax),%rax
	mov    %r13,%rdi
	callq  *%rax
	jmp    81a5 <jpeg_make_c_derived_tbl+0xe5>
	mov    %ebx,-0x454(%rbp,%rsi,4)
	add    $0x1,%ebx
	add    $0x1,%r12d
	movslq %r12d,%rsi
	movsbq -0x555(%rbp,%rsi,1),%rdx
	cmp    %edx,%ecx
	je     8207 <jpeg_make_c_derived_tbl+0x147>
	mov    %rax,%rsi
	shl    %cl,%rsi
	mov    %ebx,%edx
	cmp    %rdx,%rsi
	jg     8254 <jpeg_make_c_derived_tbl+0x194>
	mov    0x0(%r13),%rax
	movl   $0x8,0x28(%rax)
	mov    0x0(%r13),%rax
	mov    (%rax),%rax
	mov    %rcx,%r14
	mov    %r13,%rdi
	callq  *%rax
	mov    %r14,%rcx
	mov    $0x1,%eax
	add    $0x1,%ecx
	add    %ebx,%ebx
	movslq %r12d,%rdx
	movsbq -0x555(%rbp,%rdx,1),%rdx
	test   %dl,%dl
	jne    8215 <jpeg_make_c_derived_tbl+0x155>
	mov    -0x48(%rbp),%r12
	lea    0x400(%r12),%rbx
	mov    $0x100,%edx
	mov    %rbx,%rdi
	xor    %r14d,%r14d
	mov    %r14,%rsi
	callq  41e0 <memset@plt>
	mov    -0x38(%rbp),%rax
	test   %eax,%eax
	jne    829f <jpeg_make_c_derived_tbl+0x1df>
	mov    $0xff,%edx
	mov    -0x30(%rbp),%rax
	mov    -0x40(%rbp),%rcx
	jmp    8313 <jpeg_make_c_derived_tbl+0x253>
	mov    $0xf,%edx
	mov    -0x30(%rbp),%rax
	mov    -0x40(%rbp),%rcx
	jmp    8313 <jpeg_make_c_derived_tbl+0x253>
	movslq %r14d,%rsi
	movzbl 0x11(%rcx,%rsi,1),%r15d
	cmp    %edx,%r15d
	jg     82c6 <jpeg_make_c_derived_tbl+0x206>
	movsbq (%rbx,%r15,1),%rdi
	test   %dil,%dil
	je     82f7 <jpeg_make_c_derived_tbl+0x237>
	mov    0x0(%r13),%rax
	movl   $0x8,0x28(%rax)
	mov    0x0(%r13),%rax
	mov    (%rax),%rax
	mov    %rdx,-0x48(%rbp)
	mov    %r13,%rdi
	mov    %rsi,%r13
	callq  *%rax
	mov    %r13,%rsi
	mov    -0x50(%rbp),%r13
	mov    -0x48(%rbp),%rdx
	mov    -0x30(%rbp),%rax
	mov    -0x40(%rbp),%rcx
	mov    -0x454(%rbp,%rsi,4),%edi
	mov    %edi,(%r12,%r15,4)
	movsbq -0x555(%rbp,%rsi,1),%rsi
	mov    %sil,(%rbx,%r15,1)
	add    $0x1,%r14d
	cmp    %eax,%r14d
	jl     82ae <jpeg_make_c_derived_tbl+0x1ee>
	mov    -0x8(%rbp),%rbx
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	leaveq 
	retq   
	xchg   %ax,%ax

0008330 <jpeg_gen_optimal_table>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x860,%rsp
	mov    %rbx,-0x8(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %r15,-0x28(%rbp)
	mov    %rsi,%rbx
	mov    %rdi,%r13
	mov    %rdx,%r15
	lea    -0x851(%rbp),%r12
	xor    %r14d,%r14d
	mov    $0x21,%edx
	mov    %r12,%rdi
	mov    %r14,%rsi
	callq  41e0 <memset@plt>
	lea    -0x830(%rbp),%rdi
	mov    $0x404,%edx
	mov    %r14,%rsi
	callq  41e0 <memset@plt>
	mov    %r14,%rax
	jmp    839c <jpeg_gen_optimal_table+0x6c>
	movslq %eax,%rcx
	movl   $0xffffffff,-0x42c(%rbp,%rcx,4)
	add    $0x1,%eax
	cmp    $0x100,%eax
	jle    838b <jpeg_gen_optimal_table+0x5b>
	movq   $0x1,0x800(%r15)
	mov    $0xffffffffffffffff,%rdi
	mov    $0x3b9aca00,%edx
	mov    %rdx,%rax
	mov    %rdi,%r8
	mov    %r14,%rcx
	jmp    83df <jpeg_gen_optimal_table+0xaf>
	movslq %ecx,%rsi
	mov    (%r15,%rsi,8),%rsi
	test   %rsi,%rsi
	je     83dc <jpeg_gen_optimal_table+0xac>
	cmp    %rax,%rsi
	jg     83dc <jpeg_gen_optimal_table+0xac>
	mov    %rsi,%rax
	mov    %rcx,%r8
	add    $0x1,%ecx
	cmp    $0x100,%ecx
	jle    83c5 <jpeg_gen_optimal_table+0x95>
	mov    %rdx,%rcx
	mov    %rdi,%rax
	mov    %r14,%r9
	jmp    8412 <jpeg_gen_optimal_table+0xe2>
	movslq %r9d,%rsi
	mov    (%r15,%rsi,8),%rsi
	test   %rsi,%rsi
	je     840e <jpeg_gen_optimal_table+0xde>
	cmp    %rcx,%rsi
	jg     840e <jpeg_gen_optimal_table+0xde>
	cmp    %r8d,%r9d
	je     840e <jpeg_gen_optimal_table+0xde>
	mov    %rsi,%rcx
	mov    %r9,%rax
	add    $0x1,%r9d
	cmp    $0x100,%r9d
	jle    83f2 <jpeg_gen_optimal_table+0xc2>
	test   %eax,%eax
	js     8497 <jpeg_gen_optimal_table+0x167>
	movslq %r8d,%r9
	mov    (%r15,%r9,8),%rcx
	movslq %eax,%rsi
	add    (%r15,%rsi,8),%rcx
	mov    %rcx,(%r15,%r9,8)
	movq   $0x0,(%r15,%rsi,8)
	movslq -0x830(%rbp,%r9,4),%rcx
	add    $0x1,%ecx
	mov    %ecx,-0x830(%rbp,%r9,4)
	jmp    84bd <jpeg_gen_optimal_table+0x18d>
	movslq %r14d,%r15
	movslq -0x830(%rbp,%r15,4),%rax
	test   %eax,%eax
	je     8493 <jpeg_gen_optimal_table+0x163>
	cmp    $0x20,%eax
	jle    8479 <jpeg_gen_optimal_table+0x149>
	mov    0x0(%r13),%rax
	movl   $0x27,0x28(%rax)
	mov    0x0(%r13),%rax
	mov    (%rax),%rax
	mov    %r13,%rdi
	callq  *%rax
	movslq -0x830(%rbp,%r15,4),%rcx
	movzbl -0x851(%rbp,%rcx,1),%eax
	add    $0x1,%eax
	mov    %al,-0x851(%rbp,%rcx,1)
	add    $0x1,%r14d
	cmp    $0x100,%r14d
	jle    844e <jpeg_gen_optimal_table+0x11e>
	mov    $0x20,%eax
	jmpq   8565 <jpeg_gen_optimal_table+0x235>
	movslq -0x830(%rbp,%r8,4),%rcx
	add    $0x1,%ecx
	mov    %ecx,-0x830(%rbp,%r8,4)
	movslq %r8d,%rcx
	movslq -0x42c(%rbp,%rcx,4),%r8
	test   %r8d,%r8d
	jns    84aa <jpeg_gen_optimal_table+0x17a>
	mov    %eax,-0x42c(%rbp,%rcx,4)
	movslq -0x830(%rbp,%rsi,4),%rcx
	add    $0x1,%ecx
	mov    %ecx,-0x830(%rbp,%rsi,4)
	jmpq   858a <jpeg_gen_optimal_table+0x25a>
	add    $0xffffffff,%eax
	movslq %eax,%r8
	movzbl -0x851(%rbp,%r8,1),%edx
	test   %dl,%dl
	je     84eb <jpeg_gen_optimal_table+0x1bb>
	movzbl -0x851(%rbp,%r9,1),%edx
	add    $0xfe,%edx
	mov    %dl,-0x851(%rbp,%r9,1)
	movzbl -0x851(%rbp,%rsi,1),%edx
	add    $0x1,%edx
	mov    %dl,-0x851(%rbp,%rsi,1)
	add    $0x1,%eax
	movslq %eax,%rdx
	movzbl -0x851(%rbp,%rdx,1),%eax
	add    $0x2,%eax
	mov    %al,-0x851(%rbp,%rdx,1)
	movzbl -0x851(%rbp,%r8,1),%eax
	add    $0xff,%eax
	mov    %al,-0x851(%rbp,%r8,1)
	movzbl -0x851(%rbp,%r9,1),%eax
	test   %al,%al
	jne    85a7 <jpeg_gen_optimal_table+0x277>
	mov    %rdi,%rax
	cmp    $0x10,%eax
	jle    85b2 <jpeg_gen_optimal_table+0x282>
	movslq %eax,%r9
	lea    -0x1(%rax),%edi
	movslq %edi,%rsi
	lea    -0x2(%rax),%ecx
	jmp    8555 <jpeg_gen_optimal_table+0x225>
	movslq -0x830(%rbp,%rax,4),%rcx
	add    $0x1,%ecx
	mov    %ecx,-0x830(%rbp,%rax,4)
	movslq %eax,%rax
	movslq -0x42c(%rbp,%rax,4),%rax
	test   %eax,%eax
	jns    8578 <jpeg_gen_optimal_table+0x248>
	mov    %rdx,%rax
	mov    %rdi,%r8
	mov    %r14,%rcx
	jmpq   83df <jpeg_gen_optimal_table+0xaf>
	mov    %rcx,%rax
	jmpq   84ee <jpeg_gen_optimal_table+0x1be>
	add    $0xffffffff,%eax
	movslq %eax,%rdx
	movzbl -0x851(%rbp,%rdx,1),%ecx
	test   %cl,%cl
	je     85af <jpeg_gen_optimal_table+0x27f>
	lea    0xff(%rcx),%eax
	mov    %al,-0x851(%rbp,%rdx,1)
	mov    %r12,%rsi
	mov    $0x11,%edx
	mov    %rbx,%rdi
	callq  42c0 <memcpy@plt>
	mov    $0x1,%edx
	xor    %edi,%edi
	mov    %rdi,%rax
	jmp    8611 <jpeg_gen_optimal_table+0x2e1>
	movslq %ecx,%rsi
	movslq -0x830(%rbp,%rsi,4),%rsi
	cmp    %edx,%esi
	jne    8603 <jpeg_gen_optimal_table+0x2d3>
	movslq %eax,%rsi
	mov    %cl,0x11(%rbx,%rsi,1)
	add    $0x1,%eax
	add    $0x1,%ecx
	cmp    $0xff,%ecx
	jle    85ea <jpeg_gen_optimal_table+0x2ba>
	add    $0x1,%edx
	cmp    $0x20,%edx
	jle    8636 <jpeg_gen_optimal_table+0x306>
	movl   $0x0,0x114(%rbx)
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	leaveq 
	retq   
	mov    %rdi,%rcx
	jmp    8606 <jpeg_gen_optimal_table+0x2d6>
	nopl   0x0(%rax,%rax,1)

0008640 <encode_mcu_huff>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x70,%rsp
	mov    0x28(%rdi),%rax
	mov    (%rax),%rax
	mov    0x1f0(%rdi),%r8
	mov    %r8,-0x28(%rbp)
	mov    %rax,-0x68(%rbp)
	mov    0x28(%rdi),%rax
	mov    0x8(%rax),%rax
	mov    %rax,-0x60(%rbp)
	mov    0x18(%r8),%rax
	mov    %rax,-0x58(%rbp)
	mov    0x20(%r8),%rax
	mov    %rax,-0x50(%rbp)
	mov    0x28(%r8),%rax
	mov    %rax,-0x48(%rbp)
	mov    0x30(%r8),%rax
	mov    %rdi,-0x38(%rbp)
	mov    %rax,-0x40(%rbp)
	lea    -0x68(%rbp),%rax
	xor    %ecx,%ecx
	mov    0x118(%rdi),%edx
	test   %edx,%edx
	jne    86d7 <encode_mcu_huff+0x97>
	mov    %r12,%rdx
	mov    %rcx,%r12
	mov    %r13,%rcx
	mov    %rsi,%r13
	mov    %rbx,%rsi
	mov    %rdi,%rbx
	mov    %rax,%rdi
	mov    %rsi,%rax
	movslq 0xc0(%r8),%rsi
	test   %esi,%esi
	jne    86fd <encode_mcu_huff+0xbd>
	mov    %rax,-0x8(%rbp)
	mov    %rdx,-0x10(%rbp)
	mov    %rcx,-0x18(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %r15,-0x30(%rbp)
	jmp    8730 <encode_mcu_huff+0xf0>
	mov    0x38(%r8),%edx
	test   %edx,%edx
	je     878d <encode_mcu_huff+0x14d>
	mov    %r12,%rdx
	mov    %rcx,%r12
	mov    %r13,%rcx
	mov    %rsi,%r13
	mov    %rbx,%rsi
	mov    %rdi,%rbx
	mov    %rax,%rdi
	mov    %rsi,%rax
	jmp    86b6 <encode_mcu_huff+0x76>
	mov    %rax,-0x8(%rbp)
	mov    %rdx,-0x10(%rbp)
	mov    %rcx,-0x18(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %r15,-0x30(%rbp)
	jmpq   87e7 <encode_mcu_huff+0x1a7>
	mov    0x0(%r13,%r14,8),%rax
	movswq (%rax),%rax
	mov    %eax,-0x4c(%rbp,%r15,4)
	add    $0x1,%r12d
	lea    -0x68(%rbp),%rdi
	mov    -0x28(%rbp),%r8
	cmp    0x170(%rbx),%r12d
	jge    8840 <encode_mcu_huff+0x200>
	movslq %r12d,%r14
	mov    0x0(%r13,%r14,8),%rsi
	movslq 0x174(%rbx,%r14,4),%r15
	movslq -0x4c(%rbp,%r15,4),%rdx
	mov    0x148(%rbx,%r15,8),%r9
	movslq 0x14(%r9),%rax
	mov    0x40(%r8,%rax,8),%rcx
	movslq 0x18(%r9),%rax
	mov    0x60(%r8,%rax,8),%r8
	callq  9120 <encode_one_block>
	test   %eax,%eax
	jne    8716 <encode_mcu_huff+0xd6>
	mov    -0x30(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	xor    %eax,%eax
	leaveq 
	retq   
	movslq 0x3c(%r8),%rcx
	mov    %rdi,-0x30(%rbp)
	mov    %rsi,-0x20(%rbp)
	mov    %rcx,%rsi
	mov    %rax,%rdi
	callq  12410 <emit_restart>
	test   %eax,%eax
	je     889c <encode_mcu_huff+0x25c>
	mov    %rbx,%rax
	mov    %r13,%rcx
	mov    %r12,%rdx
	lea    -0x68(%rbp),%rdi
	xor    %r12d,%r12d
	mov    -0x20(%rbp),%r13
	mov    -0x30(%rbp),%rbx
	mov    -0x28(%rbp),%r8
	jmpq   86b6 <encode_mcu_huff+0x76>
	mov    0x0(%r13,%r14,8),%rax
	movswq (%rax),%rax
	mov    %eax,-0x4c(%rbp,%r15,4)
	add    $0x1,%r12d
	lea    -0x68(%rbp),%rdi
	mov    -0x28(%rbp),%r8
	cmp    0x170(%rbx),%r12d
	jge    8840 <encode_mcu_huff+0x200>
	movslq %r12d,%r14
	mov    0x0(%r13,%r14,8),%rsi
	movslq 0x174(%rbx,%r14,4),%r15
	movslq -0x4c(%rbp,%r15,4),%rdx
	mov    0x148(%rbx,%r15,8),%r9
	movslq 0x14(%r9),%rax
	mov    0x40(%r8,%rax,8),%rcx
	movslq 0x18(%r9),%rax
	mov    0x60(%r8,%rax,8),%r8
	callq  9000 <encode_one_block_simd>
	test   %eax,%eax
	jne    87cd <encode_mcu_huff+0x18d>
	mov    -0x30(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	xor    %eax,%eax
	leaveq 
	retq   
	mov    -0x68(%rbp),%rcx
	mov    0x28(%rbx),%rax
	mov    %rcx,(%rax)
	mov    -0x60(%rbp),%rcx
	mov    0x28(%rbx),%rax
	mov    %rcx,0x8(%rax)
	mov    -0x58(%rbp),%rax
	mov    %rax,0x18(%r8)
	mov    -0x50(%rbp),%rax
	mov    %rax,0x20(%r8)
	mov    -0x48(%rbp),%rax
	mov    %rax,0x28(%r8)
	mov    -0x40(%rbp),%rax
	mov    %rax,0x30(%r8)
	mov    $0x1,%eax
	mov    0x118(%rbx),%edx
	test   %edx,%edx
	jne    88a0 <encode_mcu_huff+0x260>
	mov    -0x30(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	leaveq 
	retq   
	xor    %eax,%eax
	leaveq 
	retq   
	mov    0x38(%r8),%ecx
	test   %ecx,%ecx
	jne    88ba <encode_mcu_huff+0x27a>
	mov    %edx,0x38(%r8)
	movslq 0x3c(%r8),%rcx
	add    $0x1,%ecx
	and    $0x7,%ecx
	mov    %ecx,0x3c(%r8)
	mov    0x38(%r8),%ecx
	add    $0xffffffff,%ecx
	mov    %ecx,0x38(%r8)
	mov    -0x30(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	leaveq 
	retq   
	nopl   0x0(%rax,%rax,1)

00088e0 <finish_pass_huff>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x50,%rsp
	mov    %r14,-0x8(%rbp)
	mov    %r15,-0x10(%rbp)
	mov    0x28(%rdi),%rax
	mov    (%rax),%rax
	mov    0x1f0(%rdi),%r15
	mov    %rax,-0x48(%rbp)
	mov    0x28(%rdi),%rax
	mov    0x8(%rax),%rax
	mov    %rax,-0x40(%rbp)
	mov    0x18(%r15),%rax
	mov    %rax,-0x38(%rbp)
	mov    0x20(%r15),%rax
	mov    %rax,-0x30(%rbp)
	mov    0x28(%r15),%rax
	mov    %rax,-0x28(%rbp)
	mov    0x30(%r15),%rax
	mov    %rdi,-0x18(%rbp)
	mov    %rax,-0x20(%rbp)
	mov    %rdi,%r14
	lea    -0x48(%rbp),%rdi
	callq  8e90 <flush_bits>
	test   %eax,%eax
	jne    8957 <finish_pass_huff+0x77>
	mov    (%r14),%rax
	movl   $0x18,0x28(%rax)
	mov    (%r14),%rax
	mov    (%rax),%rax
	mov    %r14,%rdi
	callq  *%rax
	mov    -0x48(%rbp),%rcx
	mov    0x28(%r14),%rax
	mov    %rcx,(%rax)
	mov    -0x40(%rbp),%rcx
	mov    0x28(%r14),%rax
	mov    %rcx,0x8(%rax)
	mov    -0x38(%rbp),%rax
	mov    %rax,0x18(%r15)
	mov    -0x30(%rbp),%rax
	mov    %rax,0x20(%r15)
	mov    -0x28(%rbp),%rax
	mov    %rax,0x28(%r15)
	mov    -0x20(%rbp),%rax
	mov    %rax,0x30(%r15)
	mov    -0x10(%rbp),%r15
	mov    -0x8(%rbp),%r14
	leaveq 
	retq   
	nopl   0x0(%rax,%rax,1)

00089a0 <encode_mcu_gather>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %rdi,-0x30(%rbp)
	mov    0x1f0(%rdi),%rdx
	xor    %ecx,%ecx
	mov    0x118(%rdi),%eax
	test   %eax,%eax
	jne    89de <encode_mcu_gather+0x3e>
	mov    %rbx,-0x8(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %r15,-0x28(%rbp)
	mov    %rcx,%rbx
	mov    %rdx,%r12
	mov    %rsi,%r13
	jmp    8a40 <encode_mcu_gather+0xa0>
	mov    0x38(%rdx),%eax
	test   %eax,%eax
	jne    8a8a <encode_mcu_gather+0xea>
	mov    %rcx,%rax
	jmpq   8a75 <encode_mcu_gather+0xd5>
	movslq %ebx,%r15
	mov    0x0(%r13,%r15,8),%rsi
	movslq 0x174(%rdi,%r15,4),%r14
	movslq 0x24(%r12,%r14,4),%rdx
	mov    0x148(%rdi,%r14,8),%r8
	movslq 0x14(%r8),%rax
	mov    0x80(%r12,%rax,8),%rcx
	movslq 0x18(%r8),%rax
	mov    0xa0(%r12,%rax,8),%r8
	callq  124e0 <htest_one_block>
	mov    0x0(%r13,%r15,8),%rax
	movswq (%rax),%rax
	mov    %eax,0x24(%r12,%r14,4)
	add    $0x1,%ebx
	mov    -0x30(%rbp),%rdi
	movslq 0x170(%rdi),%rax
	cmp    %ebx,%eax
	jg     89f1 <encode_mcu_gather+0x51>
	mov    $0x1,%eax
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	leaveq 
	retq   
	movslq %eax,%r8
	movl   $0x0,0x24(%rdx,%r8,4)
	add    $0x1,%eax
	movslq 0x144(%rdi),%r8
	cmp    %eax,%r8d
	jg     8a66 <encode_mcu_gather+0xc6>
	mov    0x118(%rdi),%eax
	mov    %eax,0x38(%rdx)
	mov    0x38(%rdx),%eax
	add    $0xffffffff,%eax
	mov    %eax,0x38(%rdx)
	mov    %rbx,-0x8(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %r15,-0x28(%rbp)
	mov    %rcx,%rbx
	mov    %rdx,%r12
	mov    %rsi,%r13
	jmp    8a40 <encode_mcu_gather+0xa0>
	data16 nopw %cs:0x0(%rax,%rax,1)
	nopl   (%rax)

0008ac0 <finish_pass_gather>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x50,%rsp
	mov    %r12,-0x10(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %r15,-0x28(%rbp)
	mov    %rbx,-0x8(%rbp)
	mov    %rdi,%r12
	mov    0x1f0(%r12),%r13
	lea    -0x48(%rbp),%rdi
	xor    %ebx,%ebx
	mov    $0x10,%r14d
	mov    %rbx,%rsi
	mov    %r14,%rdx
	callq  41e0 <memset@plt>
	mov    %r14,%rdx
	lea    -0x38(%rbp),%rdi
	mov    %rbx,%rsi
	callq  41e0 <memset@plt>
	jmpq   8bb6 <finish_pass_gather+0xf6>
	movslq %ebx,%rax
	mov    0x148(%r12,%rax,8),%rax
	movslq 0x18(%rax),%r14
	movslq 0x14(%rax),%r15
	movslq -0x48(%rbp,%r15,4),%rax
	test   %eax,%eax
	jne    8b6c <finish_pass_gather+0xac>
	mov    0x80(%r12,%r15,8),%rax
	test   %rax,%rax
	jne    8b4b <finish_pass_gather+0x8b>
	mov    %r12,%rdi
	callq  44a0 <jpeg_alloc_huff_table@plt>
	mov    %rax,0x80(%r12,%r15,8)
	mov    0x80(%r12,%r15,8),%rsi
	mov    0x80(%r13,%r15,8),%rdx
	mov    %r12,%rdi
	callq  40f0 <jpeg_gen_optimal_table@plt>
	movl   $0x1,-0x48(%rbp,%r15,4)
	movslq -0x38(%rbp,%r14,4),%rax
	test   %eax,%eax
	jne    8bb3 <finish_pass_gather+0xf3>
	mov    0xa0(%r12,%r14,8),%rax
	test   %rax,%rax
	jne    8b92 <finish_pass_gather+0xd2>
	mov    %r12,%rdi
	callq  44a0 <jpeg_alloc_huff_table@plt>
	mov    %rax,0xa0(%r12,%r14,8)
	mov    0xa0(%r12,%r14,8),%rsi
	mov    0xa0(%r13,%r14,8),%rdx
	mov    %r12,%rdi
	callq  40f0 <jpeg_gen_optimal_table@plt>
	movl   $0x1,-0x38(%rbp,%r14,4)
	add    $0x1,%ebx
	movslq 0x144(%r12),%rax
	cmp    %ebx,%eax
	jg     8b12 <finish_pass_gather+0x52>
	mov    -0x8(%rbp),%rbx
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	leaveq 
	retq   
	nopl   0x0(%rax)

0008be0 <start_pass_huff>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x40,%rsp
	mov    %r13,-0x18(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %r15,-0x28(%rbp)
	mov    %rsi,-0x40(%rbp)
	mov    %rbx,-0x8(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    0x1f0(%rdi),%r12
	test   %esi,%esi
	jne    8c25 <start_pass_huff+0x45>
	lea    -0x5d2(%rip),%rax        # 8640 <encode_mcu_huff>
	mov    %rax,0x8(%r12)
	lea    -0x33e(%rip),%rax        # 88e0 <finish_pass_huff>
	mov    %rax,0x10(%r12)
	jmp    8c3d <start_pass_huff+0x5d>
	lea    -0x28c(%rip),%rax        # 89a0 <encode_mcu_gather>
	mov    %rax,0x8(%r12)
	lea    -0x178(%rip),%rax        # 8ac0 <finish_pass_gather>
	mov    %rax,0x10(%r12)
	mov    %rdi,%rbx
	mov    %rsi,%r14
	callq  3db40 <jsimd_can_huff_encode_one_block>
	mov    %eax,0xc0(%r12)
	mov    $0x1,%esi
	mov    $0x808,%edx
	xor    %r15d,%r15d
	mov    %r15,%r13
	jmpq   8da0 <start_pass_huff+0x1c0>
	test   %r8d,%r8d
	js     8c70 <start_pass_huff+0x90>
	cmp    $0x3,%r8d
	jle    8cad <start_pass_huff+0xcd>
	mov    (%rbx),%rcx
	movl   $0x32,0x28(%rcx)
	mov    (%rbx),%rcx
	mov    %r8d,0x2c(%rcx)
	mov    (%rbx),%rcx
	mov    (%rcx),%rcx
	mov    %rbx,%rdi
	mov    %r13,-0x38(%rbp)
	mov    %r8,%r13
	mov    %rax,%r15
	callq  *%rcx
	mov    %r15,%rax
	mov    %r13,%r8
	mov    -0x38(%rbp),%r13
	mov    $0x808,%edx
	mov    $0x1,%esi
	xor    %r15d,%r15d
	test   %eax,%eax
	js     8cb6 <start_pass_huff+0xd6>
	cmp    $0x3,%eax
	jle    8cf2 <start_pass_huff+0x112>
	mov    (%rbx),%rcx
	movl   $0x32,0x28(%rcx)
	mov    (%rbx),%rcx
	mov    %eax,0x2c(%rcx)
	mov    (%rbx),%rcx
	mov    (%rcx),%rcx
	mov    %rbx,%rdi
	mov    %r13,-0x38(%rbp)
	mov    %rax,%r13
	mov    %r8,%r15
	callq  *%rcx
	mov    %r13,%rax
	mov    %r15,%r8
	mov    -0x38(%rbp),%r13
	mov    $0x808,%edx
	mov    $0x1,%esi
	xor    %r15d,%r15d
	mov    0x80(%r12,%r8,8),%rcx
	test   %rcx,%rcx
	jne    8d2f <start_pass_huff+0x14f>
	mov    0x8(%rbx),%rcx
	mov    (%rcx),%rcx
	mov    %rbx,%rdi
	mov    %r13,-0x30(%rbp)
	mov    %rax,%r13
	mov    %r8,%r15
	callq  *%rcx
	mov    %rax,0x80(%r12,%r15,8)
	mov    %r13,%rax
	mov    %r15,%r8
	mov    -0x30(%rbp),%r13
	mov    $0x808,%edx
	xor    %r15d,%r15d
	mov    0x80(%r12,%r8,8),%rdi
	mov    %r15,%rsi
	mov    %rax,%r15
	callq  41e0 <memset@plt>
	mov    0xa0(%r12,%r15,8),%rax
	test   %rax,%rax
	jne    8d6d <start_pass_huff+0x18d>
	mov    0x8(%rbx),%rax
	mov    (%rax),%rax
	mov    %rbx,%rdi
	mov    $0x1,%esi
	mov    $0x808,%edx
	callq  *%rax
	mov    %rax,0xa0(%r12,%r15,8)
	mov    0xa0(%r12,%r15,8),%rdi
	xor    %r15d,%r15d
	mov    %r15,%rsi
	mov    $0x808,%edx
	callq  41e0 <memset@plt>
	movl   $0x0,0x24(%r12,%r14,4)
	add    $0x1,%r13d
	mov    $0x808,%edx
	mov    $0x1,%esi
	mov    -0x40(%rbp),%r14
	movslq 0x144(%rbx),%rax
	cmp    %r13d,%eax
	jg     8de8 <start_pass_huff+0x208>
	movq   $0x0,0x18(%r12)
	movl   $0x0,0x20(%r12)
	mov    0x118(%rbx),%eax
	mov    %eax,0x38(%r12)
	movl   $0x0,0x3c(%r12)
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	leaveq 
	retq   
	test   %r14d,%r14d
	movslq %r13d,%r14
	mov    0x148(%rbx,%r14,8),%rax
	movslq 0x14(%rax),%r8
	movslq 0x18(%rax),%rax
	jne    8c65 <start_pass_huff+0x85>
	mov    %r8,%rdx
	mov    %rax,%r15
	lea    0x40(%r12,%rdx,8),%rcx
	mov    %rbx,%rdi
	callq  40d0 <jpeg_make_c_derived_tbl@plt>
	mov    %r15,%rdx
	lea    0x60(%r12,%rdx,8),%rcx
	mov    %rbx,%rdi
	xor    %r15d,%r15d
	mov    %r15,%rsi
	callq  40d0 <jpeg_make_c_derived_tbl@plt>
	jmpq   8d85 <start_pass_huff+0x1a5>
	data16 nopw %cs:0x0(%rax,%rax,1)
	nopl   (%rax)

0008e40 <dump_buffer>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %r14,-0x8(%rbp)
	mov    %r15,-0x10(%rbp)
	mov    %rdi,%r15
	mov    0x30(%r15),%rdi
	mov    0x28(%rdi),%r14
	mov    0x18(%r14),%rax
	callq  *%rax
	test   %eax,%eax
	jne    8e71 <dump_buffer+0x31>
	xor    %eax,%eax
	mov    -0x10(%rbp),%r15
	mov    -0x8(%rbp),%r14
	leaveq 
	retq   
	mov    (%r14),%rax
	mov    %rax,(%r15)
	mov    0x8(%r14),%rax
	mov    %rax,0x8(%r15)
	mov    $0x1,%eax
	mov    -0x10(%rbp),%r15
	mov    -0x8(%rbp),%r14
	leaveq 
	retq   
	xchg   %ax,%ax

0008e90 <flush_bits>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x130,%rsp
	mov    0x10(%rdi),%rcx
	movslq 0x18(%rdi),%r8
	xor    %esi,%esi
	mov    $0x1,%eax
	mov    0x8(%rdi),%rdx
	cmp    $0xff,%rdx
	jbe    8ebf <flush_bits+0x2f>
	mov    (%rdi),%rdx
	mov    %rsi,%r9
	jmp    8ec9 <flush_bits+0x39>
	lea    -0x128(%rbp),%rdx
	mov    %rax,%r9
	shl    $0x7,%rcx
	lea    0x7f(%rcx),%r10
	lea    0x7(%r8),%ecx
	mov    %r13,%r8
	mov    %rdx,%r13
	mov    %rbx,%rdx
	mov    %rsi,%rbx
	mov    %r12,%rsi
	mov    %rdi,%r12
	jmp    8ef1 <flush_bits+0x61>
	movb   $0x0,(%r11)
	add    $0x2,%r13
	cmp    $0x7,%ecx
	jg     8f33 <flush_bits+0xa3>
	movq   $0x0,0x10(%r12)
	movl   $0x0,0x18(%r12)
	test   %r9d,%r9d
	jg     8f4f <flush_bits+0xbf>
	mov    (%r12),%rcx
	mov    %r13,%rdi
	sub    %rcx,%rdi
	mov    0x8(%r12),%rcx
	sub    %rdi,%rcx
	mov    %rcx,0x8(%r12)
	mov    %r13,(%r12)
	mov    %rdx,%rbx
	mov    %rsi,%r12
	mov    %r8,%r13
	leaveq 
	retq   
	add    $0xfffffff8,%ecx
	mov    %r10,%rdi
	shr    %cl,%rdi
	mov    %dil,0x0(%r13)
	lea    0x1(%r13),%r11
	cmp    $0xff,%dil
	je     8ee9 <flush_bits+0x59>
	mov    %r11,%r13
	jmp    8ef1 <flush_bits+0x61>
	lea    -0x128(%rbp),%rax
	sub    %rax,%r13
	mov    %rdx,-0x8(%rbp)
	mov    %rsi,-0x10(%rbp)
	mov    %r8,-0x18(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %r15,-0x28(%rbp)
	mov    %rax,%r14
	jmp    8fb4 <flush_bits+0x124>
	mov    0x8(%r12),%r15
	cmp    %r13,%r15
	jbe    8f7f <flush_bits+0xef>
	mov    %r13,%r15
	mov    (%r12),%rdi
	mov    %r14,%rsi
	mov    %r15,%rdx
	callq  42c0 <memcpy@plt>
	mov    %r15,%rax
	add    (%r12),%rax
	mov    %rax,(%r12)
	mov    0x8(%r12),%rcx
	mov    %rcx,%rax
	sub    %r15,%rax
	mov    %rax,0x8(%r12)
	cmp    %r15,%rcx
	je     8fd4 <flush_bits+0x144>
	sub    %r15,%r13
	add    %r15,%r14
	test   %r13,%r13
	jne    8f72 <flush_bits+0xe2>
	mov    $0x1,%eax
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	leaveq 
	retq   
	mov    %r12,%rdi
	callq  8e40 <dump_buffer>
	test   %eax,%eax
	jne    8fae <flush_bits+0x11e>
	mov    %rbx,%rax
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	leaveq 
	retq   
	nopl   0x0(%rax)

0009000 <encode_one_block_simd>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x120,%rsp
	mov    %r14,-0x18(%rbp)
	mov    %r15,-0x20(%rbp)
	xor    %r9d,%r9d
	mov    $0x1,%r14d
	mov    0x8(%rdi),%rax
	cmp    $0xff,%rax
	jbe    9030 <encode_one_block_simd+0x30>
	mov    (%rdi),%rax
	mov    %r9,%r14
	jmp    9037 <encode_one_block_simd+0x37>
	lea    -0x120(%rbp),%rax
	mov    %r8,%r9
	mov    %rcx,%r8
	mov    %rdx,%rcx
	mov    %rsi,%rdx
	mov    %rax,%rsi
	mov    %r12,%r15
	mov    %rdi,%r12
	callq  3db80 <jsimd_huff_encode_one_block>
	test   %r14d,%r14d
	jg     9083 <encode_one_block_simd+0x83>
	mov    (%r12),%rcx
	mov    %rax,%rdx
	sub    %rcx,%rdx
	mov    0x8(%r12),%rcx
	sub    %rdx,%rcx
	mov    %rcx,0x8(%r12)
	mov    %rax,(%r12)
	mov    %r15,%r12
	mov    $0x1,%eax
	mov    -0x20(%rbp),%r15
	mov    -0x18(%rbp),%r14
	leaveq 
	retq   
	lea    -0x120(%rbp),%rcx
	mov    %rax,%r14
	sub    %rcx,%r14
	mov    %r15,-0x8(%rbp)
	mov    %r13,-0x10(%rbp)
	mov    %rcx,%r15
	jmp    90df <encode_one_block_simd+0xdf>
	mov    0x8(%r12),%r13
	cmp    %r14,%r13
	jbe    90aa <encode_one_block_simd+0xaa>
	mov    %r14,%r13
	mov    (%r12),%rdi
	mov    %r15,%rsi
	mov    %r13,%rdx
	callq  42c0 <memcpy@plt>
	mov    %r13,%rax
	add    (%r12),%rax
	mov    %rax,(%r12)
	mov    0x8(%r12),%rcx
	mov    %rcx,%rax
	sub    %r13,%rax
	mov    %rax,0x8(%r12)
	cmp    %r13,%rcx
	je     90fb <encode_one_block_simd+0xfb>
	sub    %r13,%r14
	add    %r13,%r15
	test   %r14,%r14
	jne    909d <encode_one_block_simd+0x9d>
	mov    -0x10(%rbp),%r13
	mov    -0x8(%rbp),%r12
	mov    $0x1,%eax
	mov    -0x20(%rbp),%r15
	mov    -0x18(%rbp),%r14
	leaveq 
	retq   
	mov    %r12,%rdi
	callq  8e40 <dump_buffer>
	test   %eax,%eax
	jne    90d9 <encode_one_block_simd+0xd9>
	mov    -0x10(%rbp),%r13
	mov    -0x8(%rbp),%r12
	mov    -0x20(%rbp),%r15
	mov    -0x18(%rbp),%r14
	xor    %eax,%eax
	leaveq 
	retq   
	nopl   0x0(%rax,%rax,1)

0009120 <encode_one_block>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x230,%rsp
	mov    %r15,-0x30(%rbp)
	mov    %r14,-0x28(%rbp)
	mov    %r13,-0x20(%rbp)
	mov    %rbx,-0x10(%rbp)
	mov    %rdi,-0x8(%rbp)
	mov    %r8,-0x120(%rbp)
	mov    %r12,-0x18(%rbp)
	movslq 0x3c0(%r8),%r9
	mov    %r9,-0x128(%rbp)
	movsbq 0x4f0(%r8),%rbx
	mov    0x10(%rdi),%r15
	movslq 0x18(%rdi),%r14
	xor    %eax,%eax
	mov    $0x1,%r12d
	mov    0x8(%rdi),%r10
	cmp    $0xff,%r10
	jbe    9182 <encode_one_block+0x62>
	mov    (%rdi),%r13
	jmp    918c <encode_one_block+0x6c>
	lea    -0x228(%rbp),%r13
	mov    %r12,%rax
	mov    %rax,-0x38(%rbp)
	movswq (%rsi),%rdi
	sub    %edx,%edi
	mov    %rdi,%r11
	sar    $0x1f,%r11d
	mov    %r11,%rax
	xor    %edi,%eax
	sub    %r11d,%eax
	movslq %eax,%rdx
	lea    0x40105(%rip),%rax        # 492b4 <jpeg_nbits_table>
	movzbl (%rdx,%rax,1),%edx
	movslq (%rcx,%rdx,4),%r10
	movsbq 0x400(%rcx,%rdx,1),%rcx
	cmp    $0x2f,%r14d
	jg     9318 <encode_one_block+0x1f8>
	xchg   %rcx,%r14
	xchg   %rcx,%r14
	shl    %cl,%r15
	or     %r15,%r10
	add    %ecx,%r14d
	cmp    $0x2f,%r14d
	jg     9341 <encode_one_block+0x221>
	mov    %rdx,%rcx
	mov    %r12,%rdx
	shl    %cl,%rdx
	add    $0xffffffff,%edx
	add    %r11d,%edi
	and    %edi,%edx
	movslq %edx,%rdi
	shl    %cl,%r10
	or     %r10,%rdi
	lea    (%r14,%rcx,1),%edx
	movswq 0x2(%rsi),%r14
	test   %r14w,%r14w
	jne    9365 <encode_one_block+0x245>
	mov    $0x10,%r11d
	mov    $0x2,%r10d
	movswq 0x10(%rsi),%r14
	test   %r14w,%r14w
	je     9294 <encode_one_block+0x174>
	mov    %r14,%r15
	sar    $0x1f,%r15d
	mov    %r15,%rcx
	xor    %r14d,%ecx
	sub    %r15d,%ecx
	movslq %ecx,%rcx
	movzbl (%rcx,%rax,1),%ecx
	lea    (%r11,%rcx,1),%r10d
	movslq %r10d,%r10
	movslq (%r8,%r10,4),%r11
	movsbq 0x400(%r8,%r10,1),%r10
	cmp    $0x1f,%edx
	jg     93d6 <encode_one_block+0x2b6>
	xchg   %rdi,%r15
	shl    %cl,%r12
	add    $0xffffffff,%r12d
	add    %r14d,%edi
	and    %edi,%r12d
	movslq %r12d,%rdi
	mov    %rcx,%r12
	mov    %r10,%rcx
	shl    %cl,%r15
	mov    %rcx,%r10
	or     %r15,%r11
	mov    %r12,%rcx
	shl    %cl,%r11
	or     %r11,%rdi
	add    %r10d,%edx
	add    %ecx,%edx
	mov    $0x1,%r12d
	xor    %r10d,%r10d
	movswq 0x20(%rsi),%r14
	test   %r14w,%r14w
	je     93fc <encode_one_block+0x2dc>
	mov    %r14,%r15
	sar    $0x1f,%r15d
	mov    %r15,%rcx
	xor    %r14d,%ecx
	sub    %r15d,%ecx
	movslq %ecx,%rcx
	movzbl (%rcx,%rax,1),%ecx
	shl    $0x4,%r10d
	add    %ecx,%r10d
	movslq %r10d,%r10
	movslq (%r8,%r10,4),%r11
	movsbq 0x400(%r8,%r10,1),%r10
	cmp    $0x1f,%edx
	jg     9484 <encode_one_block+0x364>
	xchg   %rdi,%r15
	shl    %cl,%r12
	add    $0xffffffff,%r12d
	add    %r14d,%edi
	and    %edi,%r12d
	movslq %r12d,%rdi
	mov    %rcx,%r12
	mov    %r10,%rcx
	shl    %cl,%r15
	mov    %rcx,%r10
	or     %r15,%r11
	mov    %r12,%rcx
	shl    %cl,%r11
	or     %r11,%rdi
	add    %r10d,%edx
	add    %ecx,%edx
	mov    $0x1,%r12d
	xor    %r10d,%r10d
	jmpq   9400 <encode_one_block+0x2e0>
	mov    %r14,%rax
	mov    %rcx,%r14
	lea    0x38(%rax),%ecx
	mov    %r15,%r9
	shr    %cl,%r9
	mov    %r9b,0x0(%r13)
	lea    0x1(%r13),%rcx
	cmp    $0xff,%r9b
	je     94aa <encode_one_block+0x38a>
	mov    %rcx,%r9
	jmpq   94b1 <encode_one_block+0x391>
	lea    0x38(%r14),%ecx
	mov    %r10,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%rcx
	cmp    $0xff,%r15b
	je     94d3 <encode_one_block+0x3b3>
	mov    %rcx,%r13
	jmpq   94da <encode_one_block+0x3ba>
	mov    %r14,%r11
	sar    $0x1f,%r11d
	mov    %r11,%rcx
	xor    %r14d,%ecx
	sub    %r11d,%ecx
	movslq %ecx,%rcx
	movzbl (%rcx,%rax,1),%ecx
	movslq (%r8,%rcx,4),%r10
	movsbq 0x400(%r8,%rcx,1),%rax
	cmp    $0x1f,%edx
	jg     94fe <encode_one_block+0x3de>
	mov    %rdi,%r15
	mov    %r12,%rdi
	shl    %cl,%rdi
	add    $0xffffffff,%edi
	add    %r14d,%r11d
	and    %r11d,%edi
	movslq %edi,%rdi
	mov    %rcx,%r11
	mov    %rax,%rcx
	shl    %cl,%r15
	mov    %rcx,%rax
	or     %r15,%r10
	mov    %r11,%rcx
	shl    %cl,%r10
	or     %r10,%rdi
	add    %edx,%eax
	lea    (%rax,%rcx,1),%edx
	lea    0x3fee9(%rip),%rax        # 492b4 <jpeg_nbits_table>
	xor    %r11d,%r11d
	mov    %r12,%r10
	jmpq   921c <encode_one_block+0xfc>
	mov    %rcx,%rax
	lea    0x38(%rdx),%ecx
	mov    %rdi,%r9
	shr    %cl,%r9
	mov    %r9b,0x0(%r13)
	lea    0x1(%r13),%rcx
	cmp    $0xff,%r9b
	je     9524 <encode_one_block+0x404>
	mov    %rcx,%r9
	jmpq   952b <encode_one_block+0x40b>
	add    $0x1,%r10d
	movswq 0x12(%rsi),%r15
	test   %r15w,%r15w
	je     954d <encode_one_block+0x42d>
	mov    %r15,%r14
	sar    $0x1f,%r14d
	mov    %r14,%rcx
	xor    %r15d,%ecx
	sub    %r14d,%ecx
	movslq %ecx,%rcx
	movzbl (%rcx,%rax,1),%ecx
	shl    $0x4,%r10d
	add    %ecx,%r10d
	movslq %r10d,%r10
	movslq (%r8,%r10,4),%r11
	movsbq 0x400(%r8,%r10,1),%r10
	cmp    $0x1f,%edx
	jg     95d5 <encode_one_block+0x4b5>
	xchg   %rdi,%r15
	shl    %cl,%r12
	add    $0xffffffff,%r12d
	add    %r14d,%edi
	and    %edi,%r12d
	movslq %r12d,%rdi
	mov    %rcx,%r12
	mov    %r10,%rcx
	shl    %cl,%r15
	mov    %rcx,%r10
	or     %r15,%r11
	mov    %r12,%rcx
	shl    %cl,%r11
	or     %r11,%rdi
	add    %r10d,%edx
	add    %ecx,%edx
	mov    $0x1,%r12d
	xor    %r10d,%r10d
	jmpq   9551 <encode_one_block+0x431>
	mov    %rcx,%rax
	lea    0x38(%rdx),%ecx
	mov    %rdi,%r9
	shr    %cl,%r9
	mov    %r9b,0x0(%r13)
	lea    0x1(%r13),%rcx
	cmp    $0xff,%r9b
	je     95fb <encode_one_block+0x4db>
	mov    %rcx,%r9
	jmpq   9602 <encode_one_block+0x4e2>
	movb   $0x0,(%rcx)
	lea    0x2(%r13),%r9
	lea    0x30(%rax),%ecx
	mov    %r15,%r13
	shr    %cl,%r13
	mov    %r13b,(%r9)
	lea    0x1(%r9),%rcx
	cmp    $0xff,%r13b
	je     9624 <encode_one_block+0x504>
	mov    %rcx,%r9
	jmpq   962b <encode_one_block+0x50b>
	movb   $0x0,(%rcx)
	add    $0x2,%r13
	lea    0x30(%r14),%ecx
	mov    %r10,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%rcx
	cmp    $0xff,%r15b
	je     964d <F_0_587+0x7>
	mov    %rcx,%r13
	jmpq   9654 <F_0_587+0xe>
	mov    %rcx,%r15
	lea    0x38(%rdx),%ecx
	mov    %rdi,%r9
	shr    %cl,%r9
	mov    %r9b,0x0(%r13)
	lea    0x1(%r13),%rcx
	cmp    $0xff,%r9b
	je     9678 <F_0_587+0x32>
	mov    %rcx,%r9
	jmpq   967f <F_0_587+0x39>
	movb   $0x0,(%rcx)
	lea    0x2(%r13),%r9
	lea    0x30(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %r13b,(%r9)
	lea    0x1(%r9),%rcx
	cmp    $0xff,%r13b
	je     96a1 <F_0_587+0x5b>
	mov    %rcx,%r9
	jmpq   96a8 <F_0_587+0x62>
	add    $0x1,%r10d
	movswq 0x4(%rsi),%r14
	test   %r14w,%r14w
	je     96ca <F_0_587+0x84>
	mov    %r14,%r15
	sar    $0x1f,%r15d
	mov    %r15,%rcx
	xor    %r14d,%ecx
	sub    %r15d,%ecx
	movslq %ecx,%rcx
	movzbl (%rcx,%rax,1),%ecx
	shl    $0x4,%r10d
	add    %ecx,%r10d
	movslq %r10d,%r10
	movslq (%r8,%r10,4),%r11
	movsbq 0x400(%r8,%r10,1),%r10
	cmp    $0x1f,%edx
	jg     9707 <F_0_587+0xc1>
	xchg   %rdi,%r15
	shl    %cl,%r12
	add    $0xffffffff,%r12d
	add    %r14d,%edi
	and    %edi,%r12d
	movslq %r12d,%rdi
	mov    %rcx,%r12
	mov    %r10,%rcx
	shl    %cl,%r15
	mov    %rcx,%r10
	or     %r15,%r11
	mov    %r12,%rcx
	shl    %cl,%r11
	or     %r11,%rdi
	add    %r10d,%edx
	add    %ecx,%edx
	mov    $0x1,%r12d
	xor    %r11d,%r11d
	jmpq   96ce <F_0_587+0x88>
	mov    %rcx,%rax
	lea    0x38(%rdx),%ecx
	mov    %rdi,%r12
	shr    %cl,%r12
	mov    %r12b,0x0(%r13)
	lea    0x1(%r13),%rcx
	cmp    $0xff,%r12b
	je     972d <F_0_587+0xe7>
	mov    %rcx,%r12
	jmpq   9734 <F_0_587+0xee>
	movb   $0x0,(%rcx)
	lea    0x2(%r13),%r9
	lea    0x30(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %r13b,(%r9)
	lea    0x1(%r9),%rcx
	cmp    $0xff,%r13b
	je     9758 <F_0_587+0x112>
	mov    %rcx,%r9
	jmpq   975f <F_0_587+0x119>
	movb   $0x0,(%rcx)
	add    $0x2,%r9
	lea    0x28(%rax),%ecx
	mov    %r15,%r13
	shr    %cl,%r13
	mov    %r13b,(%r9)
	lea    0x1(%r9),%rcx
	cmp    $0xff,%r13b
	je     9781 <F_0_587+0x13b>
	mov    %rcx,%r9
	jmpq   9788 <F_0_587+0x142>
	movb   $0x0,(%rcx)
	add    $0x2,%r13
	lea    0x28(%r14),%ecx
	mov    %r10,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%rcx
	cmp    $0xff,%r15b
	je     97aa <F_0_587+0x164>
	mov    %rcx,%r13
	jmpq   97b1 <F_0_587+0x16b>
	movb   $0x0,(%rcx)
	lea    0x2(%r13),%r9
	lea    0x30(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %r13b,(%r9)
	lea    0x1(%r9),%rcx
	cmp    $0xff,%r13b
	je     97d5 <F_0_587+0x18f>
	mov    %rcx,%r9
	jmpq   97dc <F_0_587+0x196>
	movb   $0x0,(%rcx)
	add    $0x2,%r9
	lea    0x28(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %r13b,(%r9)
	lea    0x1(%r9),%rcx
	cmp    $0xff,%r13b
	je     97fe <F_0_587+0x1b8>
	mov    %rcx,%r9
	jmpq   9805 <F_0_587+0x1bf>
	lea    0x1(%r10),%r11d
	movswq 0x6(%rsi),%r10
	test   %r10w,%r10w
	je     983f <F_0_587+0x1f9>
	mov    %r10,%r14
	sar    $0x1f,%r14d
	mov    %r14,-0x118(%rbp)
	mov    %r14,%rcx
	xor    %r10d,%ecx
	sub    %r14d,%ecx
	movslq %ecx,%rcx
	movzbl (%rcx,%rax,1),%ecx
	mov    %rcx,-0x128(%rbp)
	jmpq   9954 <F_0_587+0x30e>
	mov    %rcx,%rax
	lea    0x38(%rdx),%ecx
	mov    %rdi,%r8
	shr    %cl,%r8
	mov    %r8b,0x0(%r13)
	lea    0x1(%r13),%rcx
	cmp    $0xff,%r8b
	je     99ce <F_0_587+0x388>
	mov    %rcx,%r8
	jmpq   99d5 <F_0_587+0x38f>
	movb   $0x0,(%rcx)
	lea    0x2(%r13),%r12
	lea    0x30(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %r13b,(%r12)
	lea    0x1(%r12),%rcx
	cmp    $0xff,%r13b
	je     99f7 <F_0_587+0x3b1>
	mov    %rcx,%r12
	jmpq   99fe <F_0_587+0x3b8>
	movb   $0x0,(%rcx)
	add    $0x2,%r9
	lea    0x28(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %r13b,(%r9)
	lea    0x1(%r9),%rcx
	cmp    $0xff,%r13b
	je     9a22 <F_0_587+0x3dc>
	mov    %rcx,%r9
	jmpq   9a29 <F_0_587+0x3e3>
	movb   $0x0,(%rcx)
	add    $0x2,%r9
	lea    0x20(%rax),%ecx
	mov    %r15,%r13
	shr    %cl,%r13
	mov    %r13b,(%r9)
	lea    0x1(%r9),%rcx
	cmp    $0xff,%r13b
	je     9a63 <F_0_587+0x41d>
	mov    %rcx,%r9
	jmpq   9a6a <F_0_587+0x424>
	movb   $0x0,(%rcx)
	add    $0x2,%r13
	lea    0x20(%r14),%ecx
	mov    %r10,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%rcx
	cmp    $0xff,%r15b
	je     9a8c <F_0_587+0x446>
	mov    %rcx,%r13
	jmpq   9a93 <F_0_587+0x44d>
	movb   $0x0,(%rcx)
	add    $0x2,%r9
	lea    0x28(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %r13b,(%r9)
	lea    0x1(%r9),%rcx
	cmp    $0xff,%r13b
	je     9ab7 <F_0_587+0x471>
	mov    %rcx,%r9
	jmpq   9abe <F_0_587+0x478>
	movb   $0x0,(%rcx)
	add    $0x2,%r9
	lea    -0x20(%rdx),%ecx
	mov    %rax,%r13
	mov    %rdi,%rax
	shr    %cl,%rax
	mov    %rcx,%rdx
	mov    %al,(%r9)
	lea    0x1(%r9),%rcx
	cmp    $0xff,%al
	je     9af0 <F_0_587+0x4aa>
	mov    %r13,%rax
	mov    %rcx,%r13
	mov    %rax,%rcx
	mov    -0x128(%rbp),%r9
	lea    0x3fa7a(%rip),%rax        # 492b4 <jpeg_nbits_table>
	jmpq   925b <encode_one_block+0x13b>
	add    $0x1,%r11d
	movswq 0x14(%rsi),%r10
	test   %r10w,%r10w
	je     9b13 <F_0_587+0x4cd>
	mov    %r10,%r14
	sar    $0x1f,%r14d
	mov    %r14,-0x118(%rbp)
	mov    %r14,%rcx
	xor    %r10d,%ecx
	sub    %r14d,%ecx
	movslq %ecx,%rcx
	movzbl (%rcx,%rax,1),%ecx
	mov    %rcx,-0x128(%rbp)
	jmpq   9c28 <F_0_587+0x5e2>
	cmp    $0x2f,%edx
	jle    9942 <F_0_587+0x2fc>
	lea    0x38(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    98a4 <F_0_587+0x25e>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    0x30(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    98c3 <F_0_587+0x27d>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	lea    0x28(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    98e2 <F_0_587+0x29c>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    0x20(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    9901 <F_0_587+0x2bb>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	lea    0x18(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    9920 <F_0_587+0x2da>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    -0x30(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %rcx,%rdx
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    9942 <F_0_587+0x2fc>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	mov    %rbx,%rcx
	shl    %cl,%rdi
	mov    %rcx,%rbx
	or     %r9,%rdi
	add    %ebx,%edx
	add    $0xfffffff0,%r11d
	cmp    $0xf,%r11d
	jg     987c <F_0_587+0x236>
	shl    $0x4,%r11d
	mov    -0x128(%rbp),%rcx
	add    %ecx,%r11d
	movslq %r11d,%r11
	movslq (%r8,%r11,4),%r14
	movsbq 0x400(%r8,%r11,1),%r11
	cmp    $0x1f,%edx
	jg     9ca2 <F_0_587+0x65c>
	mov    %rdi,%r15
	shl    %cl,%r12
	lea    -0x1(%r12),%edi
	mov    -0x118(%rbp),%r12
	add    %r12d,%r10d
	and    %r10d,%edi
	movslq %edi,%rdi
	mov    %r11,%r10
	mov    %rcx,%r11
	mov    %r10,%rcx
	shl    %cl,%r15
	mov    %rcx,%r10
	or     %r15,%r14
	mov    %r11,%rcx
	shl    %cl,%r14
	or     %r14,%rdi
	add    %r10d,%edx
	add    %ecx,%edx
	mov    $0x1,%r12d
	xor    %r11d,%r11d
	jmpq   9843 <F_0_587+0x1fd>
	movb   $0x0,(%rcx)
	lea    0x2(%r13),%r8
	lea    0x30(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     9cc8 <F_0_587+0x682>
	mov    %rcx,%r8
	jmpq   9ccf <F_0_587+0x689>
	movb   $0x0,(%rcx)
	add    $0x2,%r12
	lea    0x28(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %r13b,(%r12)
	lea    0x1(%r12),%rcx
	cmp    $0xff,%r13b
	je     9cf1 <F_0_587+0x6ab>
	mov    %rcx,%r12
	jmpq   9cf8 <F_0_587+0x6b2>
	movb   $0x0,(%rcx)
	add    $0x2,%r9
	lea    -0x20(%rdx),%ecx
	mov    %rax,%r13
	mov    %rdi,%rax
	shr    %cl,%rax
	mov    %rcx,%rdx
	mov    %al,(%r9)
	lea    0x1(%r9),%rcx
	cmp    $0xff,%al
	je     9d33 <F_0_587+0x6ed>
	mov    %r13,%rax
	mov    %rcx,%r13
	mov    %rax,%rcx
	mov    -0x128(%rbp),%r9
	lea    0x3f856(%rip),%rax        # 492b4 <jpeg_nbits_table>
	jmpq   92da <encode_one_block+0x1ba>
	movb   $0x0,(%rcx)
	add    $0x2,%r9
	lea    0x18(%rax),%ecx
	mov    %r15,%r13
	shr    %cl,%r13
	mov    %r13b,(%r9)
	lea    0x1(%r9),%rcx
	cmp    $0xff,%r13b
	je     9d56 <F_0_587+0x710>
	mov    %rcx,%r9
	jmpq   9d5d <F_0_587+0x717>
	movb   $0x0,(%rcx)
	add    $0x2,%r13
	lea    0x18(%r14),%ecx
	mov    %r10,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%rcx
	cmp    $0xff,%r15b
	je     9d88 <F_0_587+0x742>
	mov    %rcx,%r15
	jmpq   9d8f <F_0_587+0x749>
	movb   $0x0,(%rcx)
	add    $0x2,%r9
	lea    -0x20(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %rcx,%rdx
	mov    %r13b,(%r9)
	lea    0x1(%r9),%rcx
	cmp    $0xff,%r13b
	je     9db2 <F_0_587+0x76c>
	mov    %rcx,%r13
	mov    %r15,%rcx
	mov    %rdi,%r15
	mov    -0x128(%rbp),%r9
	jmpq   9395 <encode_one_block+0x275>
	movb   $0x0,(%rcx)
	lea    0x2(%r9),%rcx
	mov    %r13,%rax
	mov    %rcx,%r13
	mov    %rax,%rcx
	mov    -0x128(%rbp),%r9
	lea    0x3f7a6(%rip),%rax        # 492b4 <jpeg_nbits_table>
	jmpq   925b <encode_one_block+0x13b>
	add    $0x1,%r11d
	movswq 0x22(%rsi),%r10
	test   %r10w,%r10w
	je     9dcb <F_0_587+0x785>
	mov    %r10,%r14
	sar    $0x1f,%r14d
	mov    %r14,-0x110(%rbp)
	mov    %r14,%rcx
	xor    %r10d,%ecx
	sub    %r14d,%ecx
	movslq %ecx,%rcx
	movzbl (%rcx,%rax,1),%ecx
	mov    %rcx,-0x128(%rbp)
	jmpq   9ee0 <F_0_587+0x89a>
	cmp    $0x2f,%edx
	jle    9c16 <F_0_587+0x5d0>
	lea    0x38(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    9b78 <F_0_587+0x532>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    0x30(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    9b97 <F_0_587+0x551>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	lea    0x28(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    9bb6 <F_0_587+0x570>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    0x20(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    9bd5 <F_0_587+0x58f>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	lea    0x18(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    9bf4 <F_0_587+0x5ae>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    -0x30(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %rcx,%rdx
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    9c16 <F_0_587+0x5d0>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	mov    %rbx,%rcx
	shl    %cl,%rdi
	mov    %rcx,%rbx
	or     %r9,%rdi
	add    %ebx,%edx
	add    $0xfffffff0,%r11d
	cmp    $0xf,%r11d
	jg     9b50 <F_0_587+0x50a>
	shl    $0x4,%r11d
	mov    -0x128(%rbp),%rcx
	add    %ecx,%r11d
	movslq %r11d,%r11
	movslq (%r8,%r11,4),%r14
	movsbq 0x400(%r8,%r11,1),%r11
	cmp    $0x1f,%edx
	jg     9f5a <F_0_587+0x914>
	mov    %rdi,%r15
	shl    %cl,%r12
	lea    -0x1(%r12),%edi
	mov    -0x118(%rbp),%r12
	add    %r12d,%r10d
	and    %r10d,%edi
	movslq %edi,%rdi
	mov    %r11,%r10
	mov    %rcx,%r11
	mov    %r10,%rcx
	shl    %cl,%r15
	mov    %rcx,%r10
	or     %r15,%r14
	mov    %r11,%rcx
	shl    %cl,%r14
	or     %r14,%rdi
	add    %r10d,%edx
	add    %ecx,%edx
	mov    $0x1,%r12d
	xor    %r11d,%r11d
	jmpq   9b17 <F_0_587+0x4d1>
	mov    %rcx,%r15
	lea    0x38(%rdx),%ecx
	mov    %rdi,%r8
	shr    %cl,%r8
	mov    %r8b,0x0(%r13)
	lea    0x1(%r13),%rcx
	cmp    $0xff,%r8b
	je     9f80 <F_0_587+0x93a>
	mov    %rcx,%r8
	jmpq   9f87 <F_0_587+0x941>
	movb   $0x0,(%rcx)
	add    $0x2,%r8
	lea    0x28(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     9fa9 <F_0_587+0x963>
	mov    %rcx,%r8
	jmpq   9fb0 <F_0_587+0x96a>
	movb   $0x0,(%rcx)
	add    $0x2,%r12
	lea    -0x20(%rdx),%ecx
	mov    %rax,%r13
	mov    %rdi,%rax
	shr    %cl,%rax
	mov    %rcx,%rdx
	mov    %al,(%r12)
	lea    0x1(%r12),%rcx
	cmp    $0xff,%al
	je     9fea <F_0_587+0x9a4>
	mov    %r13,%rax
	mov    %rcx,%r13
	mov    %rax,%rcx
	mov    $0x1,%r12d
	lea    0x3f586(%rip),%rax        # 492b4 <jpeg_nbits_table>
	jmpq   9446 <encode_one_block+0x326>
	movb   $0x0,(%rcx)
	lea    0x2(%r9),%rcx
	mov    %r13,%rax
	mov    %rcx,%r13
	mov    %rax,%rcx
	mov    -0x128(%rbp),%r9
	lea    0x3f563(%rip),%rax        # 492b4 <jpeg_nbits_table>
	jmpq   92da <encode_one_block+0x1ba>
	movb   $0x0,(%rcx)
	add    $0x2,%r9
	lea    -0x30(%rax),%ecx
	mov    %r15,%rax
	shr    %cl,%rax
	mov    %al,(%r9)
	lea    0x1(%r9),%r13
	cmp    $0xff,%al
	je     a00d <F_0_587+0x9c7>
	mov    -0x128(%rbp),%r9
	lea    0x3f531(%rip),%rax        # 492b4 <jpeg_nbits_table>
	jmpq   91cd <encode_one_block+0xad>
	movb   $0x0,(%rcx)
	lea    0x2(%r13),%r15
	lea    -0x30(%r14),%ecx
	mov    %r10,%r14
	shr    %cl,%r14
	mov    %r14b,(%r15)
	lea    0x1(%r15),%r13
	cmp    $0xff,%r14b
	je     a029 <F_0_587+0x9e3>
	mov    %rcx,%r14
	jmpq   91e3 <encode_one_block+0xc3>
	movb   $0x0,(%rcx)
	lea    0x2(%r9),%r13
	mov    %r15,%rcx
	mov    %rdi,%r15
	mov    -0x128(%rbp),%r9
	jmpq   9395 <encode_one_block+0x275>
	add    $0x1,%r11d
	movswq 0x30(%rsi),%r10
	test   %r10w,%r10w
	je     a03a <F_0_587+0x9f4>
	mov    %r10,%r14
	sar    $0x1f,%r14d
	mov    %r14,-0x110(%rbp)
	mov    %r14,%rcx
	xor    %r10d,%ecx
	sub    %r14d,%ecx
	movslq %ecx,%rcx
	movzbl (%rcx,%rax,1),%ecx
	mov    %rcx,-0x128(%rbp)
	jmpq   a14f <F_0_587+0xb09>
	cmp    $0x2f,%edx
	jle    9ece <F_0_587+0x888>
	lea    0x38(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    9e30 <F_0_587+0x7ea>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    0x30(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    9e4f <F_0_587+0x809>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	lea    0x28(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    9e6e <F_0_587+0x828>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    0x20(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    9e8d <F_0_587+0x847>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	lea    0x18(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    9eac <F_0_587+0x866>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    -0x30(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %rcx,%rdx
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    9ece <F_0_587+0x888>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	mov    %rbx,%rcx
	shl    %cl,%rdi
	mov    %rcx,%rbx
	or     %r9,%rdi
	add    %ebx,%edx
	add    $0xfffffff0,%r11d
	cmp    $0xf,%r11d
	jg     9e08 <F_0_587+0x7c2>
	shl    $0x4,%r11d
	mov    -0x128(%rbp),%rcx
	add    %ecx,%r11d
	movslq %r11d,%r11
	movslq (%r8,%r11,4),%r14
	movsbq 0x400(%r8,%r11,1),%r11
	cmp    $0x1f,%edx
	jg     a1c9 <F_0_587+0xb83>
	mov    %rdi,%r15
	shl    %cl,%r12
	lea    -0x1(%r12),%edi
	mov    -0x110(%rbp),%r12
	add    %r12d,%r10d
	and    %r10d,%edi
	movslq %edi,%rdi
	mov    %r11,%r10
	mov    %rcx,%r11
	mov    %r10,%rcx
	shl    %cl,%r15
	mov    %rcx,%r10
	or     %r15,%r14
	mov    %r11,%rcx
	shl    %cl,%r14
	or     %r14,%rdi
	add    %r10d,%edx
	add    %ecx,%edx
	mov    $0x1,%r12d
	xor    %r11d,%r11d
	jmpq   9dcf <F_0_587+0x789>
	mov    %rcx,%r15
	lea    0x38(%rdx),%ecx
	mov    %rdi,%r8
	shr    %cl,%r8
	mov    %r8b,0x0(%r13)
	lea    0x1(%r13),%rcx
	cmp    $0xff,%r8b
	je     a1ef <F_0_587+0xba9>
	mov    %rcx,%r8
	jmpq   a1f6 <F_0_587+0xbb0>
	movb   $0x0,(%rcx)
	lea    0x2(%r13),%r8
	lea    0x30(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     a218 <F_0_587+0xbd2>
	mov    %rcx,%r8
	jmpq   a21f <F_0_587+0xbd9>
	movb   $0x0,(%rcx)
	add    $0x2,%r8
	lea    -0x20(%rdx),%ecx
	mov    %rax,%r13
	mov    %rdi,%rax
	shr    %cl,%rax
	mov    %rcx,%rdx
	mov    %al,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%al
	je     a241 <F_0_587+0xbfb>
	mov    %r13,%rax
	mov    %rcx,%r13
	mov    %rax,%rcx
	mov    -0x120(%rbp),%r8
	lea    0x3f2cf(%rip),%rax        # 492b4 <jpeg_nbits_table>
	jmpq   9597 <encode_one_block+0x477>
	movb   $0x0,(%rcx)
	lea    0x2(%r12),%rcx
	mov    %r13,%rax
	mov    %rcx,%r13
	mov    %rax,%rcx
	mov    $0x1,%r12d
	lea    0x3f2ac(%rip),%rax        # 492b4 <jpeg_nbits_table>
	jmpq   9446 <encode_one_block+0x326>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r9),%r13
	mov    -0x128(%rbp),%r9
	lea    0x3f290(%rip),%rax        # 492b4 <jpeg_nbits_table>
	jmpq   91cd <encode_one_block+0xad>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r15),%r13
	mov    %rcx,%r14
	jmpq   91e3 <encode_one_block+0xc3>
	add    $0x1,%r11d
	movswq 0x40(%rsi),%r10
	test   %r10w,%r10w
	je     a264 <F_0_587+0xc1e>
	mov    %r10,%r14
	sar    $0x1f,%r14d
	mov    %r14,-0x108(%rbp)
	mov    %r14,%rcx
	xor    %r10d,%ecx
	sub    %r14d,%ecx
	movslq %ecx,%rcx
	movzbl (%rcx,%rax,1),%ecx
	mov    %rcx,-0x128(%rbp)
	jmpq   a379 <F_0_587+0xd33>
	cmp    $0x2f,%edx
	jle    a13d <F_0_587+0xaf7>
	lea    0x38(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    a09f <F_0_587+0xa59>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    0x30(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    a0be <F_0_587+0xa78>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	lea    0x28(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    a0dd <F_0_587+0xa97>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    0x20(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    a0fc <F_0_587+0xab6>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	lea    0x18(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    a11b <F_0_587+0xad5>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    -0x30(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %rcx,%rdx
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    a13d <F_0_587+0xaf7>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	mov    %rbx,%rcx
	shl    %cl,%rdi
	mov    %rcx,%rbx
	or     %r9,%rdi
	add    %ebx,%edx
	add    $0xfffffff0,%r11d
	cmp    $0xf,%r11d
	jg     a077 <F_0_587+0xa31>
	shl    $0x4,%r11d
	mov    -0x128(%rbp),%rcx
	add    %ecx,%r11d
	movslq %r11d,%r11
	movslq (%r8,%r11,4),%r14
	movsbq 0x400(%r8,%r11,1),%r11
	cmp    $0x1f,%edx
	jg     a3f3 <F_0_587+0xdad>
	mov    %rdi,%r15
	shl    %cl,%r12
	lea    -0x1(%r12),%edi
	mov    -0x110(%rbp),%r12
	add    %r12d,%r10d
	and    %r10d,%edi
	movslq %edi,%rdi
	mov    %r11,%r10
	mov    %rcx,%r11
	mov    %r10,%rcx
	shl    %cl,%r15
	mov    %rcx,%r10
	or     %r15,%r14
	mov    %r11,%rcx
	shl    %cl,%r14
	or     %r14,%rdi
	add    %r10d,%edx
	add    %ecx,%edx
	mov    $0x1,%r12d
	xor    %r11d,%r11d
	jmpq   a03e <F_0_587+0x9f8>
	mov    %rcx,%r15
	lea    0x38(%rdx),%ecx
	mov    %rdi,%r8
	shr    %cl,%r8
	mov    %r8b,0x0(%r13)
	lea    0x1(%r13),%rcx
	cmp    $0xff,%r8b
	je     a419 <F_0_587+0xdd3>
	mov    %rcx,%r8
	jmpq   a420 <F_0_587+0xdda>
	movb   $0x0,(%rcx)
	lea    0x2(%r13),%r8
	lea    0x30(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     a442 <F_0_587+0xdfc>
	mov    %rcx,%r8
	jmpq   a449 <F_0_587+0xe03>
	movb   $0x0,(%rcx)
	add    $0x2,%r8
	lea    0x28(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     a46b <F_0_587+0xe25>
	mov    %rcx,%r8
	jmpq   a472 <F_0_587+0xe2c>
	movb   $0x0,(%rcx)
	lea    0x2(%r8),%rcx
	mov    %r13,%rax
	mov    %rcx,%r13
	mov    %rax,%rcx
	mov    -0x120(%rbp),%r8
	lea    0x3f055(%rip),%rax        # 492b4 <jpeg_nbits_table>
	jmpq   9597 <encode_one_block+0x477>
	add    $0x1,%r11d
	movswq 0x32(%rsi),%r10
	test   %r10w,%r10w
	je     a4a4 <F_0_587+0xe5e>
	mov    %r10,%r14
	sar    $0x1f,%r14d
	mov    %r14,-0x108(%rbp)
	mov    %r14,%rcx
	xor    %r10d,%ecx
	sub    %r14d,%ecx
	movslq %ecx,%rcx
	movzbl (%rcx,%rax,1),%ecx
	mov    %rcx,-0x128(%rbp)
	jmpq   a5b9 <F_0_587+0xf73>
	cmp    $0x2f,%edx
	jle    a367 <F_0_587+0xd21>
	lea    0x38(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    a2c9 <F_0_587+0xc83>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    0x30(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    a2e8 <F_0_587+0xca2>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	lea    0x28(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    a307 <F_0_587+0xcc1>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    0x20(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    a326 <F_0_587+0xce0>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	lea    0x18(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    a345 <F_0_587+0xcff>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    -0x30(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %rcx,%rdx
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    a367 <F_0_587+0xd21>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	mov    %rbx,%rcx
	shl    %cl,%rdi
	mov    %rcx,%rbx
	or     %r9,%rdi
	add    %ebx,%edx
	add    $0xfffffff0,%r11d
	cmp    $0xf,%r11d
	jg     a2a1 <F_0_587+0xc5b>
	shl    $0x4,%r11d
	mov    -0x128(%rbp),%rcx
	add    %ecx,%r11d
	movslq %r11d,%r11
	movslq (%r8,%r11,4),%r14
	movsbq 0x400(%r8,%r11,1),%r11
	cmp    $0x1f,%edx
	jg     a633 <F_0_587+0xfed>
	mov    %rdi,%r15
	shl    %cl,%r12
	lea    -0x1(%r12),%edi
	mov    -0x108(%rbp),%r12
	add    %r12d,%r10d
	and    %r10d,%edi
	movslq %edi,%rdi
	mov    %r11,%r10
	mov    %rcx,%r11
	mov    %r10,%rcx
	shl    %cl,%r15
	mov    %rcx,%r10
	or     %r15,%r14
	mov    %r11,%rcx
	shl    %cl,%r14
	or     %r14,%rdi
	add    %r10d,%edx
	add    %ecx,%edx
	mov    $0x1,%r12d
	xor    %r11d,%r11d
	jmpq   a268 <F_0_587+0xc22>
	mov    %rcx,%r15
	lea    0x38(%rdx),%ecx
	mov    %rdi,%r8
	shr    %cl,%r8
	mov    %r8b,0x0(%r13)
	lea    0x1(%r13),%rcx
	cmp    $0xff,%r8b
	je     a659 <F_0_587+0x1013>
	mov    %rcx,%r8
	jmpq   a660 <F_0_587+0x101a>
	movb   $0x0,(%rcx)
	lea    0x2(%r13),%r8
	lea    0x30(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     a682 <F_0_587+0x103c>
	mov    %rcx,%r8
	jmpq   a689 <F_0_587+0x1043>
	movb   $0x0,(%rcx)
	add    $0x2,%r8
	lea    0x28(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     a6ab <F_0_587+0x1065>
	mov    %rcx,%r8
	jmpq   a6b2 <F_0_587+0x106c>
	movb   $0x0,(%rcx)
	add    $0x2,%r8
	lea    -0x20(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %rcx,%rdx
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     a6e4 <F_0_587+0x109e>
	mov    %rcx,%r13
	mov    %r15,%rcx
	mov    %rdi,%r15
	mov    -0x120(%rbp),%r8
	jmpq   9988 <F_0_587+0x342>
	add    $0x1,%r11d
	movswq 0x24(%rsi),%r10
	test   %r10w,%r10w
	je     a6fd <F_0_587+0x10b7>
	mov    %r10,%r14
	sar    $0x1f,%r14d
	mov    %r14,-0x100(%rbp)
	mov    %r14,%rcx
	xor    %r10d,%ecx
	sub    %r14d,%ecx
	movslq %ecx,%rcx
	movzbl (%rcx,%rax,1),%ecx
	mov    %rcx,-0x128(%rbp)
	jmpq   a812 <F_0_587+0x11cc>
	cmp    $0x2f,%edx
	jle    a5a7 <F_0_587+0xf61>
	lea    0x38(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    a509 <F_0_587+0xec3>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    0x30(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    a528 <F_0_587+0xee2>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	lea    0x28(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    a547 <F_0_587+0xf01>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    0x20(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    a566 <F_0_587+0xf20>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	lea    0x18(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    a585 <F_0_587+0xf3f>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    -0x30(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %rcx,%rdx
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    a5a7 <F_0_587+0xf61>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	mov    %rbx,%rcx
	shl    %cl,%rdi
	mov    %rcx,%rbx
	or     %r9,%rdi
	add    %ebx,%edx
	add    $0xfffffff0,%r11d
	cmp    $0xf,%r11d
	jg     a4e1 <F_0_587+0xe9b>
	shl    $0x4,%r11d
	mov    -0x128(%rbp),%rcx
	add    %ecx,%r11d
	movslq %r11d,%r11
	movslq (%r8,%r11,4),%r14
	movsbq 0x400(%r8,%r11,1),%r11
	cmp    $0x1f,%edx
	jg     a889 <F_0_587+0x1243>
	mov    %rdi,%r15
	shl    %cl,%r12
	lea    -0x1(%r12),%edi
	mov    -0x108(%rbp),%r12
	add    %r12d,%r10d
	and    %r10d,%edi
	movslq %edi,%rdi
	mov    %r11,%r10
	mov    %rcx,%r11
	mov    %r10,%rcx
	shl    %cl,%r15
	mov    %rcx,%r10
	or     %r15,%r14
	mov    %r11,%rcx
	shl    %cl,%r14
	or     %r14,%rdi
	add    %r10d,%edx
	add    %ecx,%edx
	mov    $0x1,%r12d
	xor    %r11d,%r11d
	jmpq   a4a8 <F_0_587+0xe62>
	mov    %rcx,%r15
	lea    0x38(%rdx),%ecx
	mov    %rdi,%r8
	shr    %cl,%r8
	mov    %r8b,0x0(%r13)
	lea    0x1(%r13),%rcx
	cmp    $0xff,%r8b
	je     a8af <F_0_587+0x1269>
	mov    %rcx,%r8
	jmpq   a8b6 <F_0_587+0x1270>
	movb   $0x0,(%rcx)
	lea    0x2(%r13),%r8
	lea    0x30(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     a8d8 <F_0_587+0x1292>
	mov    %rcx,%r8
	jmpq   a8df <F_0_587+0x1299>
	movb   $0x0,(%rcx)
	add    $0x2,%r8
	lea    0x28(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     a901 <F_0_587+0x12bb>
	mov    %rcx,%r8
	jmpq   a908 <F_0_587+0x12c2>
	movb   $0x0,(%rcx)
	add    $0x2,%r8
	lea    -0x20(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %rcx,%rdx
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     a93a <F_0_587+0x12f4>
	mov    %rcx,%r13
	mov    %r15,%rcx
	mov    %rdi,%r15
	mov    -0x120(%rbp),%r8
	jmpq   9c5c <F_0_587+0x616>
	movb   $0x0,(%rcx)
	lea    0x2(%r8),%r13
	mov    %r15,%rcx
	mov    %rdi,%r15
	mov    -0x120(%rbp),%r8
	jmpq   9988 <F_0_587+0x342>
	add    $0x1,%r11d
	movswq 0x16(%rsi),%r10
	test   %r10w,%r10w
	je     a953 <F_0_587+0x130d>
	mov    %r10,%r14
	sar    $0x1f,%r14d
	mov    %r14,-0x100(%rbp)
	mov    %r14,%rcx
	xor    %r10d,%ecx
	sub    %r14d,%ecx
	movslq %ecx,%rcx
	movzbl (%rcx,%rax,1),%ecx
	mov    %rcx,-0x128(%rbp)
	jmpq   aa68 <F_0_587+0x1422>
	cmp    $0x2f,%edx
	jle    a800 <F_0_587+0x11ba>
	lea    0x38(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    a762 <F_0_587+0x111c>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    0x30(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    a781 <F_0_587+0x113b>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	lea    0x28(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    a7a0 <F_0_587+0x115a>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    0x20(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    a7bf <F_0_587+0x1179>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	lea    0x18(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    a7de <F_0_587+0x1198>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    -0x30(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %rcx,%rdx
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    a800 <F_0_587+0x11ba>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	mov    %rbx,%rcx
	shl    %cl,%rdi
	mov    %rcx,%rbx
	or     %r9,%rdi
	add    %ebx,%edx
	add    $0xfffffff0,%r11d
	cmp    $0xf,%r11d
	jg     a73a <F_0_587+0x10f4>
	shl    $0x4,%r11d
	mov    -0x128(%rbp),%rcx
	add    %ecx,%r11d
	movslq %r11d,%r14
	movslq (%r8,%r14,4),%r11
	movsbq 0x400(%r8,%r14,1),%r14
	cmp    $0x1f,%edx
	jg     aadf <F_0_587+0x1499>
	mov    %rdi,%r15
	shl    %cl,%r12
	lea    -0x1(%r12),%edi
	mov    -0x100(%rbp),%r12
	add    %r12d,%r10d
	and    %r10d,%edi
	movslq %edi,%rdi
	mov    %rcx,%r12
	mov    %r14,%rcx
	shl    %cl,%r15
	mov    %rcx,%r10
	or     %r15,%r11
	mov    %r12,%rcx
	shl    %cl,%r11
	or     %r11,%rdi
	add    %r10d,%edx
	add    %ecx,%edx
	mov    $0x1,%r12d
	xor    %r11d,%r11d
	jmpq   a701 <F_0_587+0x10bb>
	mov    %rcx,%r15
	lea    0x38(%rdx),%ecx
	mov    %rdi,%r8
	shr    %cl,%r8
	mov    %r8b,0x0(%r13)
	lea    0x1(%r13),%rcx
	cmp    $0xff,%r8b
	je     ab05 <F_0_587+0x14bf>
	mov    %rcx,%r8
	jmpq   ab0c <F_0_587+0x14c6>
	movb   $0x0,(%rcx)
	lea    0x2(%r13),%r8
	lea    0x30(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     ab2e <F_0_587+0x14e8>
	mov    %rcx,%r8
	jmpq   ab35 <F_0_587+0x14ef>
	movb   $0x0,(%rcx)
	add    $0x2,%r8
	lea    0x28(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     ab57 <F_0_587+0x1511>
	mov    %rcx,%r8
	jmpq   ab5e <F_0_587+0x1518>
	movb   $0x0,(%rcx)
	add    $0x2,%r8
	lea    -0x20(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %rcx,%rdx
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     ab90 <F_0_587+0x154a>
	mov    %rcx,%r13
	mov    %r15,%rcx
	mov    %rdi,%r15
	mov    -0x120(%rbp),%r8
	jmpq   9f14 <F_0_587+0x8ce>
	movb   $0x0,(%rcx)
	lea    0x2(%r8),%r13
	mov    %r15,%rcx
	mov    %rdi,%r15
	mov    -0x120(%rbp),%r8
	jmpq   9c5c <F_0_587+0x616>
	add    $0x1,%r11d
	movswq 0x8(%rsi),%r10
	test   %r10w,%r10w
	je     aba9 <F_0_587+0x1563>
	mov    %r10,%r14
	sar    $0x1f,%r14d
	mov    %r14,-0xf8(%rbp)
	mov    %r14,%rcx
	xor    %r10d,%ecx
	sub    %r14d,%ecx
	movslq %ecx,%rcx
	movzbl (%rcx,%rax,1),%ecx
	mov    %rcx,-0x128(%rbp)
	jmpq   acbe <F_0_587+0x1678>
	cmp    $0x2f,%edx
	jle    aa56 <F_0_587+0x1410>
	lea    0x38(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    a9b8 <F_0_587+0x1372>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    0x30(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    a9d7 <F_0_587+0x1391>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	lea    0x28(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    a9f6 <F_0_587+0x13b0>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    0x20(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    aa15 <F_0_587+0x13cf>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	lea    0x18(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    aa34 <F_0_587+0x13ee>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    -0x30(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %rcx,%rdx
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    aa56 <F_0_587+0x1410>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	mov    %rbx,%rcx
	shl    %cl,%rdi
	mov    %rcx,%rbx
	or     %r9,%rdi
	add    %ebx,%edx
	add    $0xfffffff0,%r11d
	cmp    $0xf,%r11d
	jg     a990 <F_0_587+0x134a>
	shl    $0x4,%r11d
	mov    -0x128(%rbp),%rcx
	add    %ecx,%r11d
	movslq %r11d,%r14
	movslq (%r8,%r14,4),%r11
	movsbq 0x400(%r8,%r14,1),%r14
	cmp    $0x1f,%edx
	jg     ad35 <F_0_587+0x16ef>
	mov    %rdi,%r15
	shl    %cl,%r12
	lea    -0x1(%r12),%edi
	mov    -0x100(%rbp),%r12
	add    %r12d,%r10d
	and    %r10d,%edi
	movslq %edi,%rdi
	mov    %rcx,%r12
	mov    %r14,%rcx
	shl    %cl,%r15
	mov    %rcx,%r10
	or     %r15,%r11
	mov    %r12,%rcx
	shl    %cl,%r11
	or     %r11,%rdi
	add    %r10d,%edx
	add    %ecx,%edx
	mov    $0x1,%r12d
	xor    %r11d,%r11d
	jmpq   a957 <F_0_587+0x1311>
	mov    %rcx,%r15
	lea    0x38(%rdx),%ecx
	mov    %rdi,%r8
	shr    %cl,%r8
	mov    %r8b,0x0(%r13)
	lea    0x1(%r13),%rcx
	cmp    $0xff,%r8b
	je     ad5b <F_0_587+0x1715>
	mov    %rcx,%r8
	jmpq   ad62 <F_0_587+0x171c>
	movb   $0x0,(%rcx)
	lea    0x2(%r13),%r8
	lea    0x30(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     ad84 <F_0_587+0x173e>
	mov    %rcx,%r8
	jmpq   ad8b <F_0_587+0x1745>
	movb   $0x0,(%rcx)
	add    $0x2,%r8
	lea    0x28(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     adad <F_0_587+0x1767>
	mov    %rcx,%r8
	jmpq   adb4 <F_0_587+0x176e>
	movb   $0x0,(%rcx)
	add    $0x2,%r8
	lea    -0x20(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %rcx,%rdx
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     ade6 <F_0_587+0x17a0>
	mov    %rcx,%r13
	mov    %r15,%rcx
	mov    %rdi,%r15
	mov    -0x120(%rbp),%r8
	jmpq   a183 <F_0_587+0xb3d>
	movb   $0x0,(%rcx)
	lea    0x2(%r8),%r13
	mov    %r15,%rcx
	mov    %rdi,%r15
	mov    -0x120(%rbp),%r8
	jmpq   9f14 <F_0_587+0x8ce>
	add    $0x1,%r11d
	movswq 0xa(%rsi),%r10
	test   %r10w,%r10w
	je     adff <F_0_587+0x17b9>
	mov    %r10,%r14
	sar    $0x1f,%r14d
	mov    %r14,-0xf8(%rbp)
	mov    %r14,%rcx
	xor    %r10d,%ecx
	sub    %r14d,%ecx
	movslq %ecx,%rcx
	movzbl (%rcx,%rax,1),%ecx
	mov    %rcx,-0x128(%rbp)
	jmpq   af14 <F_0_587+0x18ce>
	cmp    $0x2f,%edx
	jle    acac <F_0_587+0x1666>
	lea    0x38(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    ac0e <F_0_587+0x15c8>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    0x30(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    ac2d <F_0_587+0x15e7>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	lea    0x28(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    ac4c <F_0_587+0x1606>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    0x20(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    ac6b <F_0_587+0x1625>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	lea    0x18(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    ac8a <F_0_587+0x1644>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    -0x30(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %rcx,%rdx
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    acac <F_0_587+0x1666>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	mov    %rbx,%rcx
	shl    %cl,%rdi
	mov    %rcx,%rbx
	or     %r9,%rdi
	add    %ebx,%edx
	add    $0xfffffff0,%r11d
	cmp    $0xf,%r11d
	jg     abe6 <F_0_587+0x15a0>
	shl    $0x4,%r11d
	mov    -0x128(%rbp),%rcx
	add    %ecx,%r11d
	movslq %r11d,%r14
	movslq (%r8,%r14,4),%r11
	movsbq 0x400(%r8,%r14,1),%r14
	cmp    $0x1f,%edx
	jg     af8b <F_0_587+0x1945>
	mov    %rdi,%r15
	shl    %cl,%r12
	lea    -0x1(%r12),%edi
	mov    -0xf8(%rbp),%r12
	add    %r12d,%r10d
	and    %r10d,%edi
	movslq %edi,%rdi
	mov    %rcx,%r12
	mov    %r14,%rcx
	shl    %cl,%r15
	mov    %rcx,%r10
	or     %r15,%r11
	mov    %r12,%rcx
	shl    %cl,%r11
	or     %r11,%rdi
	add    %r10d,%edx
	add    %ecx,%edx
	mov    $0x1,%r12d
	xor    %r11d,%r11d
	jmpq   abad <F_0_587+0x1567>
	mov    %rcx,%r15
	lea    0x38(%rdx),%ecx
	mov    %rdi,%r8
	shr    %cl,%r8
	mov    %r8b,0x0(%r13)
	lea    0x1(%r13),%rcx
	cmp    $0xff,%r8b
	je     afb1 <F_0_587+0x196b>
	mov    %rcx,%r8
	jmpq   afb8 <F_0_587+0x1972>
	movb   $0x0,(%rcx)
	lea    0x2(%r13),%r8
	lea    0x30(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     afda <F_0_587+0x1994>
	mov    %rcx,%r8
	jmpq   afe1 <F_0_587+0x199b>
	movb   $0x0,(%rcx)
	add    $0x2,%r8
	lea    0x28(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     b003 <F_0_587+0x19bd>
	mov    %rcx,%r8
	jmpq   b00a <F_0_587+0x19c4>
	movb   $0x0,(%rcx)
	add    $0x2,%r8
	lea    -0x20(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %rcx,%rdx
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     b03c <F_0_587+0x19f6>
	mov    %rcx,%r13
	mov    %r15,%rcx
	mov    %rdi,%r15
	mov    -0x120(%rbp),%r8
	jmpq   a3ad <F_0_587+0xd67>
	movb   $0x0,(%rcx)
	lea    0x2(%r8),%r13
	mov    %r15,%rcx
	mov    %rdi,%r15
	mov    -0x120(%rbp),%r8
	jmpq   a183 <F_0_587+0xb3d>
	add    $0x1,%r11d
	movswq 0x18(%rsi),%r10
	test   %r10w,%r10w
	je     b055 <F_0_587+0x1a0f>
	mov    %r10,%r14
	sar    $0x1f,%r14d
	mov    %r14,-0xf0(%rbp)
	mov    %r14,%rcx
	xor    %r10d,%ecx
	sub    %r14d,%ecx
	movslq %ecx,%rcx
	movzbl (%rcx,%rax,1),%ecx
	mov    %rcx,-0x128(%rbp)
	jmpq   b16a <F_0_587+0x1b24>
	cmp    $0x2f,%edx
	jle    af02 <F_0_587+0x18bc>
	lea    0x38(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    ae64 <F_0_587+0x181e>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    0x30(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    ae83 <F_0_587+0x183d>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	lea    0x28(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    aea2 <F_0_587+0x185c>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    0x20(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    aec1 <F_0_587+0x187b>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	lea    0x18(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    aee0 <F_0_587+0x189a>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    -0x30(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %rcx,%rdx
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    af02 <F_0_587+0x18bc>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	mov    %rbx,%rcx
	shl    %cl,%rdi
	mov    %rcx,%rbx
	or     %r9,%rdi
	add    %ebx,%edx
	add    $0xfffffff0,%r11d
	cmp    $0xf,%r11d
	jg     ae3c <F_0_587+0x17f6>
	shl    $0x4,%r11d
	mov    -0x128(%rbp),%rcx
	add    %ecx,%r11d
	movslq %r11d,%r14
	movslq (%r8,%r14,4),%r11
	movsbq 0x400(%r8,%r14,1),%r14
	cmp    $0x1f,%edx
	jg     b1e1 <F_0_587+0x1b9b>
	mov    %rdi,%r15
	shl    %cl,%r12
	lea    -0x1(%r12),%edi
	mov    -0xf8(%rbp),%r12
	add    %r12d,%r10d
	and    %r10d,%edi
	movslq %edi,%rdi
	mov    %rcx,%r12
	mov    %r14,%rcx
	shl    %cl,%r15
	mov    %rcx,%r10
	or     %r15,%r11
	mov    %r12,%rcx
	shl    %cl,%r11
	or     %r11,%rdi
	add    %r10d,%edx
	add    %ecx,%edx
	mov    $0x1,%r12d
	xor    %r11d,%r11d
	jmpq   ae03 <F_0_587+0x17bd>
	mov    %rcx,%r15
	lea    0x38(%rdx),%ecx
	mov    %rdi,%r8
	shr    %cl,%r8
	mov    %r8b,0x0(%r13)
	lea    0x1(%r13),%rcx
	cmp    $0xff,%r8b
	je     b207 <F_0_587+0x1bc1>
	mov    %rcx,%r8
	jmpq   b20e <F_0_587+0x1bc8>
	movb   $0x0,(%rcx)
	lea    0x2(%r13),%r8
	lea    0x30(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     b230 <F_0_587+0x1bea>
	mov    %rcx,%r8
	jmpq   b237 <F_0_587+0x1bf1>
	movb   $0x0,(%rcx)
	add    $0x2,%r8
	lea    0x28(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     b259 <F_0_587+0x1c13>
	mov    %rcx,%r8
	jmpq   b260 <F_0_587+0x1c1a>
	movb   $0x0,(%rcx)
	add    $0x2,%r8
	lea    -0x20(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %rcx,%rdx
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     b292 <F_0_587+0x1c4c>
	mov    %rcx,%r13
	mov    %r15,%rcx
	mov    %rdi,%r15
	mov    -0x120(%rbp),%r8
	jmpq   a5ed <F_0_587+0xfa7>
	movb   $0x0,(%rcx)
	lea    0x2(%r8),%r13
	mov    %r15,%rcx
	mov    %rdi,%r15
	mov    -0x120(%rbp),%r8
	jmpq   a3ad <F_0_587+0xd67>
	add    $0x1,%r11d
	movswq 0x26(%rsi),%r10
	test   %r10w,%r10w
	je     b2ab <F_0_587+0x1c65>
	mov    %r10,%r14
	sar    $0x1f,%r14d
	mov    %r14,-0xf0(%rbp)
	mov    %r14,%rcx
	xor    %r10d,%ecx
	sub    %r14d,%ecx
	movslq %ecx,%rcx
	movzbl (%rcx,%rax,1),%ecx
	mov    %rcx,-0x128(%rbp)
	jmpq   b3c0 <F_0_587+0x1d7a>
	cmp    $0x2f,%edx
	jle    b158 <F_0_587+0x1b12>
	lea    0x38(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    b0ba <F_0_587+0x1a74>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    0x30(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    b0d9 <F_0_587+0x1a93>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	lea    0x28(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    b0f8 <F_0_587+0x1ab2>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    0x20(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    b117 <F_0_587+0x1ad1>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	lea    0x18(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    b136 <F_0_587+0x1af0>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    -0x30(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %rcx,%rdx
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    b158 <F_0_587+0x1b12>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	mov    %rbx,%rcx
	shl    %cl,%rdi
	mov    %rcx,%rbx
	or     %r9,%rdi
	add    %ebx,%edx
	add    $0xfffffff0,%r11d
	cmp    $0xf,%r11d
	jg     b092 <F_0_587+0x1a4c>
	shl    $0x4,%r11d
	mov    -0x128(%rbp),%rcx
	add    %ecx,%r11d
	movslq %r11d,%r14
	movslq (%r8,%r14,4),%r11
	movsbq 0x400(%r8,%r14,1),%r14
	cmp    $0x1f,%edx
	jg     b437 <F_0_587+0x1df1>
	mov    %rdi,%r15
	shl    %cl,%r12
	lea    -0x1(%r12),%edi
	mov    -0xf0(%rbp),%r12
	add    %r12d,%r10d
	and    %r10d,%edi
	movslq %edi,%rdi
	mov    %rcx,%r12
	mov    %r14,%rcx
	shl    %cl,%r15
	mov    %rcx,%r10
	or     %r15,%r11
	mov    %r12,%rcx
	shl    %cl,%r11
	or     %r11,%rdi
	add    %r10d,%edx
	add    %ecx,%edx
	mov    $0x1,%r12d
	xor    %r11d,%r11d
	jmpq   b059 <F_0_587+0x1a13>
	mov    %rcx,%r15
	lea    0x38(%rdx),%ecx
	mov    %rdi,%r8
	shr    %cl,%r8
	mov    %r8b,0x0(%r13)
	lea    0x1(%r13),%rcx
	cmp    $0xff,%r8b
	je     b45d <F_0_587+0x1e17>
	mov    %rcx,%r8
	jmpq   b464 <F_0_587+0x1e1e>
	movb   $0x0,(%rcx)
	lea    0x2(%r13),%r8
	lea    0x30(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     b486 <F_0_587+0x1e40>
	mov    %rcx,%r8
	jmpq   b48d <F_0_587+0x1e47>
	movb   $0x0,(%rcx)
	add    $0x2,%r8
	lea    0x28(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     b4af <F_0_587+0x1e69>
	mov    %rcx,%r8
	jmpq   b4b6 <F_0_587+0x1e70>
	movb   $0x0,(%rcx)
	add    $0x2,%r8
	lea    -0x20(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %rcx,%rdx
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     b4e8 <F_0_587+0x1ea2>
	mov    %rcx,%r13
	mov    %r15,%rcx
	mov    %rdi,%r15
	mov    -0x120(%rbp),%r8
	jmpq   a846 <F_0_587+0x1200>
	movb   $0x0,(%rcx)
	lea    0x2(%r8),%r13
	mov    %r15,%rcx
	mov    %rdi,%r15
	mov    -0x120(%rbp),%r8
	jmpq   a5ed <F_0_587+0xfa7>
	add    $0x1,%r11d
	movswq 0x34(%rsi),%r10
	test   %r10w,%r10w
	je     b501 <F_0_587+0x1ebb>
	mov    %r10,%r14
	sar    $0x1f,%r14d
	mov    %r14,-0xe8(%rbp)
	mov    %r14,%rcx
	xor    %r10d,%ecx
	sub    %r14d,%ecx
	movslq %ecx,%rcx
	movzbl (%rcx,%rax,1),%ecx
	mov    %rcx,-0x128(%rbp)
	jmpq   b616 <F_0_587+0x1fd0>
	cmp    $0x2f,%edx
	jle    b3ae <F_0_587+0x1d68>
	lea    0x38(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    b310 <F_0_587+0x1cca>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    0x30(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    b32f <F_0_587+0x1ce9>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	lea    0x28(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    b34e <F_0_587+0x1d08>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    0x20(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    b36d <F_0_587+0x1d27>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	lea    0x18(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    b38c <F_0_587+0x1d46>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    -0x30(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %rcx,%rdx
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    b3ae <F_0_587+0x1d68>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	mov    %rbx,%rcx
	shl    %cl,%rdi
	mov    %rcx,%rbx
	or     %r9,%rdi
	add    %ebx,%edx
	add    $0xfffffff0,%r11d
	cmp    $0xf,%r11d
	jg     b2e8 <F_0_587+0x1ca2>
	shl    $0x4,%r11d
	mov    -0x128(%rbp),%rcx
	add    %ecx,%r11d
	movslq %r11d,%r14
	movslq (%r8,%r14,4),%r11
	movsbq 0x400(%r8,%r14,1),%r14
	cmp    $0x1f,%edx
	jg     b68d <F_0_587+0x2047>
	mov    %rdi,%r15
	shl    %cl,%r12
	lea    -0x1(%r12),%edi
	mov    -0xf0(%rbp),%r12
	add    %r12d,%r10d
	and    %r10d,%edi
	movslq %edi,%rdi
	mov    %rcx,%r12
	mov    %r14,%rcx
	shl    %cl,%r15
	mov    %rcx,%r10
	or     %r15,%r11
	mov    %r12,%rcx
	shl    %cl,%r11
	or     %r11,%rdi
	add    %r10d,%edx
	add    %ecx,%edx
	mov    $0x1,%r12d
	xor    %r11d,%r11d
	jmpq   b2af <F_0_587+0x1c69>
	mov    %rcx,%r15
	lea    0x38(%rdx),%ecx
	mov    %rdi,%r8
	shr    %cl,%r8
	mov    %r8b,0x0(%r13)
	lea    0x1(%r13),%rcx
	cmp    $0xff,%r8b
	je     b6b3 <F_0_587+0x206d>
	mov    %rcx,%r8
	jmpq   b6ba <F_0_587+0x2074>
	movb   $0x0,(%rcx)
	lea    0x2(%r13),%r8
	lea    0x30(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     b6dc <F_0_714+0xa>
	mov    %rcx,%r8
	jmpq   b6e3 <F_0_714+0x11>
	movb   $0x0,(%rcx)
	add    $0x2,%r8
	lea    0x28(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     b705 <F_0_714+0x33>
	mov    %rcx,%r8
	jmpq   b70c <F_0_714+0x3a>
	movb   $0x0,(%rcx)
	add    $0x2,%r8
	lea    -0x20(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %rcx,%rdx
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     b73e <F_0_714+0x6c>
	mov    %rcx,%r13
	mov    %r15,%rcx
	mov    %rdi,%r15
	mov    -0x120(%rbp),%r8
	jmpq   aa9c <F_0_587+0x1456>
	movb   $0x0,(%rcx)
	lea    0x2(%r8),%r13
	mov    %r15,%rcx
	mov    %rdi,%r15
	mov    -0x120(%rbp),%r8
	jmpq   a846 <F_0_587+0x1200>
	add    $0x1,%r11d
	movswq 0x42(%rsi),%r10
	test   %r10w,%r10w
	je     b757 <F_0_714+0x85>
	mov    %r10,%r14
	sar    $0x1f,%r14d
	mov    %r14,-0xe8(%rbp)
	mov    %r14,%rcx
	xor    %r10d,%ecx
	sub    %r14d,%ecx
	movslq %ecx,%rcx
	movzbl (%rcx,%rax,1),%ecx
	mov    %rcx,-0x128(%rbp)
	jmpq   b86c <F_0_714+0x19a>
	cmp    $0x2f,%edx
	jle    b604 <F_0_587+0x1fbe>
	lea    0x38(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    b566 <F_0_587+0x1f20>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    0x30(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    b585 <F_0_587+0x1f3f>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	lea    0x28(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    b5a4 <F_0_587+0x1f5e>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    0x20(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    b5c3 <F_0_587+0x1f7d>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	lea    0x18(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    b5e2 <F_0_587+0x1f9c>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    -0x30(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %rcx,%rdx
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    b604 <F_0_587+0x1fbe>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	mov    %rbx,%rcx
	shl    %cl,%rdi
	mov    %rcx,%rbx
	or     %r9,%rdi
	add    %ebx,%edx
	add    $0xfffffff0,%r11d
	cmp    $0xf,%r11d
	jg     b53e <F_0_587+0x1ef8>
	shl    $0x4,%r11d
	mov    -0x128(%rbp),%rcx
	add    %ecx,%r11d
	movslq %r11d,%r14
	movslq (%r8,%r14,4),%r11
	movsbq 0x400(%r8,%r14,1),%r14
	cmp    $0x1f,%edx
	jg     b8e3 <F_0_714+0x211>
	mov    %rdi,%r15
	shl    %cl,%r12
	lea    -0x1(%r12),%edi
	mov    -0xe8(%rbp),%r12
	add    %r12d,%r10d
	and    %r10d,%edi
	movslq %edi,%rdi
	mov    %rcx,%r12
	mov    %r14,%rcx
	shl    %cl,%r15
	mov    %rcx,%r10
	or     %r15,%r11
	mov    %r12,%rcx
	shl    %cl,%r11
	or     %r11,%rdi
	add    %r10d,%edx
	add    %ecx,%edx
	mov    $0x1,%r12d
	xor    %r11d,%r11d
	jmpq   b505 <F_0_587+0x1ebf>
	mov    %rcx,%r15
	lea    0x38(%rdx),%ecx
	mov    %rdi,%r8
	shr    %cl,%r8
	mov    %r8b,0x0(%r13)
	lea    0x1(%r13),%rcx
	cmp    $0xff,%r8b
	je     b909 <F_0_714+0x237>
	mov    %rcx,%r8
	jmpq   b910 <F_0_714+0x23e>
	movb   $0x0,(%rcx)
	lea    0x2(%r13),%r8
	lea    0x30(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     b932 <F_0_714+0x260>
	mov    %rcx,%r8
	jmpq   b939 <F_0_714+0x267>
	movb   $0x0,(%rcx)
	add    $0x2,%r8
	lea    0x28(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     b95b <F_0_714+0x289>
	mov    %rcx,%r8
	jmpq   b962 <F_0_714+0x290>
	movb   $0x0,(%rcx)
	add    $0x2,%r8
	lea    -0x20(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %rcx,%rdx
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     b994 <F_0_714+0x2c2>
	mov    %rcx,%r13
	mov    %r15,%rcx
	mov    %rdi,%r15
	mov    -0x120(%rbp),%r8
	jmpq   acf2 <F_0_587+0x16ac>
	movb   $0x0,(%rcx)
	lea    0x2(%r8),%r13
	mov    %r15,%rcx
	mov    %rdi,%r15
	mov    -0x120(%rbp),%r8
	jmpq   aa9c <F_0_587+0x1456>
	add    $0x1,%r11d
	movswq 0x50(%rsi),%r10
	test   %r10w,%r10w
	je     b9ad <F_0_714+0x2db>
	mov    %r10,%r14
	sar    $0x1f,%r14d
	mov    %r14,-0xe0(%rbp)
	mov    %r14,%rcx
	xor    %r10d,%ecx
	sub    %r14d,%ecx
	movslq %ecx,%rcx
	movzbl (%rcx,%rax,1),%ecx
	mov    %rcx,-0x128(%rbp)
	jmpq   bac2 <F_0_714+0x3f0>
	cmp    $0x2f,%edx
	jle    b85a <F_0_714+0x188>
	lea    0x38(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    b7bc <F_0_714+0xea>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    0x30(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    b7db <F_0_714+0x109>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	lea    0x28(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    b7fa <F_0_714+0x128>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    0x20(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    b819 <F_0_714+0x147>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	lea    0x18(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    b838 <F_0_714+0x166>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    -0x30(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %rcx,%rdx
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    b85a <F_0_714+0x188>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	mov    %rbx,%rcx
	shl    %cl,%rdi
	mov    %rcx,%rbx
	or     %r9,%rdi
	add    %ebx,%edx
	add    $0xfffffff0,%r11d
	cmp    $0xf,%r11d
	jg     b794 <F_0_714+0xc2>
	shl    $0x4,%r11d
	mov    -0x128(%rbp),%rcx
	add    %ecx,%r11d
	movslq %r11d,%r14
	movslq (%r8,%r14,4),%r11
	movsbq 0x400(%r8,%r14,1),%r14
	cmp    $0x1f,%edx
	jg     bb39 <F_0_714+0x467>
	mov    %rdi,%r15
	shl    %cl,%r12
	lea    -0x1(%r12),%edi
	mov    -0xe8(%rbp),%r12
	add    %r12d,%r10d
	and    %r10d,%edi
	movslq %edi,%rdi
	mov    %rcx,%r12
	mov    %r14,%rcx
	shl    %cl,%r15
	mov    %rcx,%r10
	or     %r15,%r11
	mov    %r12,%rcx
	shl    %cl,%r11
	or     %r11,%rdi
	add    %r10d,%edx
	add    %ecx,%edx
	mov    $0x1,%r12d
	xor    %r11d,%r11d
	jmpq   b75b <F_0_714+0x89>
	mov    %rcx,%r15
	lea    0x38(%rdx),%ecx
	mov    %rdi,%r8
	shr    %cl,%r8
	mov    %r8b,0x0(%r13)
	lea    0x1(%r13),%rcx
	cmp    $0xff,%r8b
	je     bb5f <F_0_714+0x48d>
	mov    %rcx,%r8
	jmpq   bb66 <F_0_714+0x494>
	movb   $0x0,(%rcx)
	lea    0x2(%r13),%r8
	lea    0x30(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     bb88 <F_0_714+0x4b6>
	mov    %rcx,%r8
	jmpq   bb8f <F_0_714+0x4bd>
	movb   $0x0,(%rcx)
	add    $0x2,%r8
	lea    0x28(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     bbb1 <F_0_714+0x4df>
	mov    %rcx,%r8
	jmpq   bbb8 <F_0_714+0x4e6>
	movb   $0x0,(%rcx)
	add    $0x2,%r8
	lea    -0x20(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %rcx,%rdx
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     bbea <F_0_714+0x518>
	mov    %rcx,%r13
	mov    %r15,%rcx
	mov    %rdi,%r15
	mov    -0x120(%rbp),%r8
	jmpq   af48 <F_0_587+0x1902>
	movb   $0x0,(%rcx)
	lea    0x2(%r8),%r13
	mov    %r15,%rcx
	mov    %rdi,%r15
	mov    -0x120(%rbp),%r8
	jmpq   acf2 <F_0_587+0x16ac>
	add    $0x1,%r11d
	movswq 0x60(%rsi),%r10
	test   %r10w,%r10w
	je     bc03 <F_0_714+0x531>
	mov    %r10,%r14
	sar    $0x1f,%r14d
	mov    %r14,-0xe0(%rbp)
	mov    %r14,%rcx
	xor    %r10d,%ecx
	sub    %r14d,%ecx
	movslq %ecx,%rcx
	movzbl (%rcx,%rax,1),%ecx
	mov    %rcx,-0x128(%rbp)
	jmpq   bd18 <F_0_714+0x646>
	cmp    $0x2f,%edx
	jle    bab0 <F_0_714+0x3de>
	lea    0x38(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    ba12 <F_0_714+0x340>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    0x30(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    ba31 <F_0_714+0x35f>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	lea    0x28(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    ba50 <F_0_714+0x37e>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    0x20(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    ba6f <F_0_714+0x39d>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	lea    0x18(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    ba8e <F_0_714+0x3bc>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    -0x30(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %rcx,%rdx
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    bab0 <F_0_714+0x3de>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	mov    %rbx,%rcx
	shl    %cl,%rdi
	mov    %rcx,%rbx
	or     %r9,%rdi
	add    %ebx,%edx
	add    $0xfffffff0,%r11d
	cmp    $0xf,%r11d
	jg     b9ea <F_0_714+0x318>
	shl    $0x4,%r11d
	mov    -0x128(%rbp),%rcx
	add    %ecx,%r11d
	movslq %r11d,%r14
	movslq (%r8,%r14,4),%r11
	movsbq 0x400(%r8,%r14,1),%r14
	cmp    $0x1f,%edx
	jg     bd8f <F_0_714+0x6bd>
	mov    %rdi,%r15
	shl    %cl,%r12
	lea    -0x1(%r12),%edi
	mov    -0xe0(%rbp),%r12
	add    %r12d,%r10d
	and    %r10d,%edi
	movslq %edi,%rdi
	mov    %rcx,%r12
	mov    %r14,%rcx
	shl    %cl,%r15
	mov    %rcx,%r10
	or     %r15,%r11
	mov    %r12,%rcx
	shl    %cl,%r11
	or     %r11,%rdi
	add    %r10d,%edx
	add    %ecx,%edx
	mov    $0x1,%r12d
	xor    %r11d,%r11d
	jmpq   b9b1 <F_0_714+0x2df>
	mov    %rcx,%r15
	lea    0x38(%rdx),%ecx
	mov    %rdi,%r8
	shr    %cl,%r8
	mov    %r8b,0x0(%r13)
	lea    0x1(%r13),%rcx
	cmp    $0xff,%r8b
	je     bdb5 <F_0_714+0x6e3>
	mov    %rcx,%r8
	jmpq   bdbc <F_0_714+0x6ea>
	movb   $0x0,(%rcx)
	lea    0x2(%r13),%r8
	lea    0x30(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     bdde <F_0_714+0x70c>
	mov    %rcx,%r8
	jmpq   bde5 <F_0_714+0x713>
	movb   $0x0,(%rcx)
	add    $0x2,%r8
	lea    0x28(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     be07 <F_0_714+0x735>
	mov    %rcx,%r8
	jmpq   be0e <F_0_714+0x73c>
	movb   $0x0,(%rcx)
	add    $0x2,%r8
	lea    -0x20(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %rcx,%rdx
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     be40 <F_0_714+0x76e>
	mov    %rcx,%r13
	mov    %r15,%rcx
	mov    %rdi,%r15
	mov    -0x120(%rbp),%r8
	jmpq   b19e <F_0_587+0x1b58>
	movb   $0x0,(%rcx)
	lea    0x2(%r8),%r13
	mov    %r15,%rcx
	mov    %rdi,%r15
	mov    -0x120(%rbp),%r8
	jmpq   af48 <F_0_587+0x1902>
	add    $0x1,%r11d
	movswq 0x52(%rsi),%r10
	test   %r10w,%r10w
	je     be59 <F_0_714+0x787>
	mov    %r10,%r14
	sar    $0x1f,%r14d
	mov    %r14,-0xd8(%rbp)
	mov    %r14,%rcx
	xor    %r10d,%ecx
	sub    %r14d,%ecx
	movslq %ecx,%rcx
	movzbl (%rcx,%rax,1),%ecx
	mov    %rcx,-0x128(%rbp)
	jmpq   bf6e <F_0_714+0x89c>
	cmp    $0x2f,%edx
	jle    bd06 <F_0_714+0x634>
	lea    0x38(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    bc68 <F_0_714+0x596>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    0x30(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    bc87 <F_0_714+0x5b5>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	lea    0x28(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    bca6 <F_0_714+0x5d4>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    0x20(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    bcc5 <F_0_714+0x5f3>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	lea    0x18(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    bce4 <F_0_714+0x612>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    -0x30(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %rcx,%rdx
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    bd06 <F_0_714+0x634>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	mov    %rbx,%rcx
	shl    %cl,%rdi
	mov    %rcx,%rbx
	or     %r9,%rdi
	add    %ebx,%edx
	add    $0xfffffff0,%r11d
	cmp    $0xf,%r11d
	jg     bc40 <F_0_714+0x56e>
	shl    $0x4,%r11d
	mov    -0x128(%rbp),%rcx
	add    %ecx,%r11d
	movslq %r11d,%r14
	movslq (%r8,%r14,4),%r11
	movsbq 0x400(%r8,%r14,1),%r14
	cmp    $0x1f,%edx
	jg     bfe5 <F_0_714+0x913>
	mov    %rdi,%r15
	shl    %cl,%r12
	lea    -0x1(%r12),%edi
	mov    -0xe0(%rbp),%r12
	add    %r12d,%r10d
	and    %r10d,%edi
	movslq %edi,%rdi
	mov    %rcx,%r12
	mov    %r14,%rcx
	shl    %cl,%r15
	mov    %rcx,%r10
	or     %r15,%r11
	mov    %r12,%rcx
	shl    %cl,%r11
	or     %r11,%rdi
	add    %r10d,%edx
	add    %ecx,%edx
	mov    $0x1,%r12d
	xor    %r11d,%r11d
	jmpq   bc07 <F_0_714+0x535>
	mov    %rcx,%r15
	lea    0x38(%rdx),%ecx
	mov    %rdi,%r8
	shr    %cl,%r8
	mov    %r8b,0x0(%r13)
	lea    0x1(%r13),%rcx
	cmp    $0xff,%r8b
	je     c00b <F_0_714+0x939>
	mov    %rcx,%r8
	jmpq   c012 <F_0_714+0x940>
	movb   $0x0,(%rcx)
	lea    0x2(%r13),%r8
	lea    0x30(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     c034 <F_0_714+0x962>
	mov    %rcx,%r8
	jmpq   c03b <F_0_714+0x969>
	movb   $0x0,(%rcx)
	add    $0x2,%r8
	lea    0x28(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     c05d <F_0_714+0x98b>
	mov    %rcx,%r8
	jmpq   c064 <F_0_714+0x992>
	movb   $0x0,(%rcx)
	add    $0x2,%r8
	lea    -0x20(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %rcx,%rdx
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     c096 <F_0_714+0x9c4>
	mov    %rcx,%r13
	mov    %r15,%rcx
	mov    %rdi,%r15
	mov    -0x120(%rbp),%r8
	jmpq   b3f4 <F_0_587+0x1dae>
	movb   $0x0,(%rcx)
	lea    0x2(%r8),%r13
	mov    %r15,%rcx
	mov    %rdi,%r15
	mov    -0x120(%rbp),%r8
	jmpq   b19e <F_0_587+0x1b58>
	add    $0x1,%r11d
	movswq 0x44(%rsi),%r10
	test   %r10w,%r10w
	je     c0af <F_0_714+0x9dd>
	mov    %r10,%r14
	sar    $0x1f,%r14d
	mov    %r14,-0xd8(%rbp)
	mov    %r14,%rcx
	xor    %r10d,%ecx
	sub    %r14d,%ecx
	movslq %ecx,%rcx
	movzbl (%rcx,%rax,1),%ecx
	mov    %rcx,-0x128(%rbp)
	jmpq   c1c4 <F_0_714+0xaf2>
	cmp    $0x2f,%edx
	jle    bf5c <F_0_714+0x88a>
	lea    0x38(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    bebe <F_0_714+0x7ec>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    0x30(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    bedd <F_0_714+0x80b>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	lea    0x28(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    befc <F_0_714+0x82a>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    0x20(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    bf1b <F_0_714+0x849>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	lea    0x18(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    bf3a <F_0_714+0x868>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    -0x30(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %rcx,%rdx
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    bf5c <F_0_714+0x88a>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	mov    %rbx,%rcx
	shl    %cl,%rdi
	mov    %rcx,%rbx
	or     %r9,%rdi
	add    %ebx,%edx
	add    $0xfffffff0,%r11d
	cmp    $0xf,%r11d
	jg     be96 <F_0_714+0x7c4>
	shl    $0x4,%r11d
	mov    -0x128(%rbp),%rcx
	add    %ecx,%r11d
	movslq %r11d,%r14
	movslq (%r8,%r14,4),%r11
	movsbq 0x400(%r8,%r14,1),%r14
	cmp    $0x1f,%edx
	jg     c23b <F_0_714+0xb69>
	mov    %rdi,%r15
	shl    %cl,%r12
	lea    -0x1(%r12),%edi
	mov    -0xd8(%rbp),%r12
	add    %r12d,%r10d
	and    %r10d,%edi
	movslq %edi,%rdi
	mov    %rcx,%r12
	mov    %r14,%rcx
	shl    %cl,%r15
	mov    %rcx,%r10
	or     %r15,%r11
	mov    %r12,%rcx
	shl    %cl,%r11
	or     %r11,%rdi
	add    %r10d,%edx
	add    %ecx,%edx
	mov    $0x1,%r12d
	xor    %r11d,%r11d
	jmpq   be5d <F_0_714+0x78b>
	mov    %rcx,%r15
	lea    0x38(%rdx),%ecx
	mov    %rdi,%r8
	shr    %cl,%r8
	mov    %r8b,0x0(%r13)
	lea    0x1(%r13),%rcx
	cmp    $0xff,%r8b
	je     c261 <F_0_714+0xb8f>
	mov    %rcx,%r8
	jmpq   c268 <F_0_714+0xb96>
	movb   $0x0,(%rcx)
	lea    0x2(%r13),%r8
	lea    0x30(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     c28a <F_0_714+0xbb8>
	mov    %rcx,%r8
	jmpq   c291 <F_0_714+0xbbf>
	movb   $0x0,(%rcx)
	add    $0x2,%r8
	lea    0x28(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     c2b3 <F_0_714+0xbe1>
	mov    %rcx,%r8
	jmpq   c2ba <F_0_714+0xbe8>
	movb   $0x0,(%rcx)
	add    $0x2,%r8
	lea    -0x20(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %rcx,%rdx
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     c2ec <F_0_714+0xc1a>
	mov    %rcx,%r13
	mov    %r15,%rcx
	mov    %rdi,%r15
	mov    -0x120(%rbp),%r8
	jmpq   b64a <F_0_587+0x2004>
	movb   $0x0,(%rcx)
	lea    0x2(%r8),%r13
	mov    %r15,%rcx
	mov    %rdi,%r15
	mov    -0x120(%rbp),%r8
	jmpq   b3f4 <F_0_587+0x1dae>
	add    $0x1,%r11d
	movswq 0x36(%rsi),%r10
	test   %r10w,%r10w
	je     c305 <F_0_714+0xc33>
	mov    %r10,%r14
	sar    $0x1f,%r14d
	mov    %r14,-0xd0(%rbp)
	mov    %r14,%rcx
	xor    %r10d,%ecx
	sub    %r14d,%ecx
	movslq %ecx,%rcx
	movzbl (%rcx,%rax,1),%ecx
	mov    %rcx,-0x128(%rbp)
	jmpq   c41a <F_0_714+0xd48>
	cmp    $0x2f,%edx
	jle    c1b2 <F_0_714+0xae0>
	lea    0x38(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    c114 <F_0_714+0xa42>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    0x30(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    c133 <F_0_714+0xa61>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	lea    0x28(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    c152 <F_0_714+0xa80>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    0x20(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    c171 <F_0_714+0xa9f>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	lea    0x18(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    c190 <F_0_714+0xabe>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    -0x30(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %rcx,%rdx
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    c1b2 <F_0_714+0xae0>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	mov    %rbx,%rcx
	shl    %cl,%rdi
	mov    %rcx,%rbx
	or     %r9,%rdi
	add    %ebx,%edx
	add    $0xfffffff0,%r11d
	cmp    $0xf,%r11d
	jg     c0ec <F_0_714+0xa1a>
	shl    $0x4,%r11d
	mov    -0x128(%rbp),%rcx
	add    %ecx,%r11d
	movslq %r11d,%r14
	movslq (%r8,%r14,4),%r11
	movsbq 0x400(%r8,%r14,1),%r14
	cmp    $0x1f,%edx
	jg     c491 <F_0_714+0xdbf>
	mov    %rdi,%r15
	shl    %cl,%r12
	lea    -0x1(%r12),%edi
	mov    -0xd8(%rbp),%r12
	add    %r12d,%r10d
	and    %r10d,%edi
	movslq %edi,%rdi
	mov    %rcx,%r12
	mov    %r14,%rcx
	shl    %cl,%r15
	mov    %rcx,%r10
	or     %r15,%r11
	mov    %r12,%rcx
	shl    %cl,%r11
	or     %r11,%rdi
	add    %r10d,%edx
	add    %ecx,%edx
	mov    $0x1,%r12d
	xor    %r11d,%r11d
	jmpq   c0b3 <F_0_714+0x9e1>
	mov    %rcx,%r15
	lea    0x38(%rdx),%ecx
	mov    %rdi,%r8
	shr    %cl,%r8
	mov    %r8b,0x0(%r13)
	lea    0x1(%r13),%rcx
	cmp    $0xff,%r8b
	je     c4b7 <F_0_714+0xde5>
	mov    %rcx,%r8
	jmpq   c4be <F_0_714+0xdec>
	movb   $0x0,(%rcx)
	lea    0x2(%r13),%r8
	lea    0x30(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     c4e0 <F_0_714+0xe0e>
	mov    %rcx,%r8
	jmpq   c4e7 <F_0_714+0xe15>
	movb   $0x0,(%rcx)
	add    $0x2,%r8
	lea    0x28(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     c509 <F_0_714+0xe37>
	mov    %rcx,%r8
	jmpq   c510 <F_0_714+0xe3e>
	movb   $0x0,(%rcx)
	add    $0x2,%r8
	lea    -0x20(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %rcx,%rdx
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     c542 <F_0_714+0xe70>
	mov    %rcx,%r13
	mov    %r15,%rcx
	mov    %rdi,%r15
	mov    -0x120(%rbp),%r8
	jmpq   b8a0 <F_0_714+0x1ce>
	movb   $0x0,(%rcx)
	lea    0x2(%r8),%r13
	mov    %r15,%rcx
	mov    %rdi,%r15
	mov    -0x120(%rbp),%r8
	jmpq   b64a <F_0_587+0x2004>
	add    $0x1,%r11d
	movswq 0x28(%rsi),%r10
	test   %r10w,%r10w
	je     c55b <F_0_714+0xe89>
	mov    %r10,%r14
	sar    $0x1f,%r14d
	mov    %r14,-0xd0(%rbp)
	mov    %r14,%rcx
	xor    %r10d,%ecx
	sub    %r14d,%ecx
	movslq %ecx,%rcx
	movzbl (%rcx,%rax,1),%ecx
	mov    %rcx,-0x128(%rbp)
	jmpq   c670 <F_0_714+0xf9e>
	cmp    $0x2f,%edx
	jle    c408 <F_0_714+0xd36>
	lea    0x38(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    c36a <F_0_714+0xc98>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    0x30(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    c389 <F_0_714+0xcb7>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	lea    0x28(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    c3a8 <F_0_714+0xcd6>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    0x20(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    c3c7 <F_0_714+0xcf5>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	lea    0x18(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    c3e6 <F_0_714+0xd14>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    -0x30(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %rcx,%rdx
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    c408 <F_0_714+0xd36>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	mov    %rbx,%rcx
	shl    %cl,%rdi
	mov    %rcx,%rbx
	or     %r9,%rdi
	add    %ebx,%edx
	add    $0xfffffff0,%r11d
	cmp    $0xf,%r11d
	jg     c342 <F_0_714+0xc70>
	shl    $0x4,%r11d
	mov    -0x128(%rbp),%rcx
	add    %ecx,%r11d
	movslq %r11d,%r14
	movslq (%r8,%r14,4),%r11
	movsbq 0x400(%r8,%r14,1),%r14
	cmp    $0x1f,%edx
	jg     c6e7 <F_0_714+0x1015>
	mov    %rdi,%r15
	shl    %cl,%r12
	lea    -0x1(%r12),%edi
	mov    -0xd0(%rbp),%r12
	add    %r12d,%r10d
	and    %r10d,%edi
	movslq %edi,%rdi
	mov    %rcx,%r12
	mov    %r14,%rcx
	shl    %cl,%r15
	mov    %rcx,%r10
	or     %r15,%r11
	mov    %r12,%rcx
	shl    %cl,%r11
	or     %r11,%rdi
	add    %r10d,%edx
	add    %ecx,%edx
	mov    $0x1,%r12d
	xor    %r11d,%r11d
	jmpq   c309 <F_0_714+0xc37>
	mov    %rcx,%r15
	lea    0x38(%rdx),%ecx
	mov    %rdi,%r8
	shr    %cl,%r8
	mov    %r8b,0x0(%r13)
	lea    0x1(%r13),%rcx
	cmp    $0xff,%r8b
	je     c70d <F_0_714+0x103b>
	mov    %rcx,%r8
	jmpq   c714 <F_0_714+0x1042>
	movb   $0x0,(%rcx)
	lea    0x2(%r13),%r8
	lea    0x30(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     c736 <F_0_714+0x1064>
	mov    %rcx,%r8
	jmpq   c73d <F_0_714+0x106b>
	movb   $0x0,(%rcx)
	add    $0x2,%r8
	lea    0x28(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     c75f <F_0_714+0x108d>
	mov    %rcx,%r8
	jmpq   c766 <F_0_714+0x1094>
	movb   $0x0,(%rcx)
	add    $0x2,%r8
	lea    -0x20(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %rcx,%rdx
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     c798 <F_0_714+0x10c6>
	mov    %rcx,%r13
	mov    %r15,%rcx
	mov    %rdi,%r15
	mov    -0x120(%rbp),%r8
	jmpq   baf6 <F_0_714+0x424>
	movb   $0x0,(%rcx)
	lea    0x2(%r8),%r13
	mov    %r15,%rcx
	mov    %rdi,%r15
	mov    -0x120(%rbp),%r8
	jmpq   b8a0 <F_0_714+0x1ce>
	add    $0x1,%r11d
	movswq 0x1a(%rsi),%r10
	test   %r10w,%r10w
	je     c7b1 <F_0_714+0x10df>
	mov    %r10,%r14
	sar    $0x1f,%r14d
	mov    %r14,-0xc8(%rbp)
	mov    %r14,%rcx
	xor    %r10d,%ecx
	sub    %r14d,%ecx
	movslq %ecx,%rcx
	movzbl (%rcx,%rax,1),%ecx
	mov    %rcx,-0x128(%rbp)
	jmpq   c8c6 <F_0_714+0x11f4>
	cmp    $0x2f,%edx
	jle    c65e <F_0_714+0xf8c>
	lea    0x38(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    c5c0 <F_0_714+0xeee>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    0x30(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    c5df <F_0_714+0xf0d>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	lea    0x28(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    c5fe <F_0_714+0xf2c>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    0x20(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    c61d <F_0_714+0xf4b>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	lea    0x18(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    c63c <F_0_714+0xf6a>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    -0x30(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %rcx,%rdx
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    c65e <F_0_714+0xf8c>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	mov    %rbx,%rcx
	shl    %cl,%rdi
	mov    %rcx,%rbx
	or     %r9,%rdi
	add    %ebx,%edx
	add    $0xfffffff0,%r11d
	cmp    $0xf,%r11d
	jg     c598 <F_0_714+0xec6>
	shl    $0x4,%r11d
	mov    -0x128(%rbp),%rcx
	add    %ecx,%r11d
	movslq %r11d,%r14
	movslq (%r8,%r14,4),%r11
	movsbq 0x400(%r8,%r14,1),%r14
	cmp    $0x1f,%edx
	jg     c93d <F_0_714+0x126b>
	mov    %rdi,%r15
	shl    %cl,%r12
	lea    -0x1(%r12),%edi
	mov    -0xd0(%rbp),%r12
	add    %r12d,%r10d
	and    %r10d,%edi
	movslq %edi,%rdi
	mov    %rcx,%r12
	mov    %r14,%rcx
	shl    %cl,%r15
	mov    %rcx,%r10
	or     %r15,%r11
	mov    %r12,%rcx
	shl    %cl,%r11
	or     %r11,%rdi
	add    %r10d,%edx
	add    %ecx,%edx
	mov    $0x1,%r12d
	xor    %r11d,%r11d
	jmpq   c55f <F_0_714+0xe8d>
	mov    %rcx,%r15
	lea    0x38(%rdx),%ecx
	mov    %rdi,%r8
	shr    %cl,%r8
	mov    %r8b,0x0(%r13)
	lea    0x1(%r13),%rcx
	cmp    $0xff,%r8b
	je     c963 <F_0_714+0x1291>
	mov    %rcx,%r8
	jmpq   c96a <F_0_714+0x1298>
	movb   $0x0,(%rcx)
	lea    0x2(%r13),%r8
	lea    0x30(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     c98c <F_0_714+0x12ba>
	mov    %rcx,%r8
	jmpq   c993 <F_0_714+0x12c1>
	movb   $0x0,(%rcx)
	add    $0x2,%r8
	lea    0x28(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     c9b5 <F_0_714+0x12e3>
	mov    %rcx,%r8
	jmpq   c9bc <F_0_714+0x12ea>
	movb   $0x0,(%rcx)
	add    $0x2,%r8
	lea    -0x20(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %rcx,%rdx
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     c9ee <F_0_714+0x131c>
	mov    %rcx,%r13
	mov    %r15,%rcx
	mov    %rdi,%r15
	mov    -0x120(%rbp),%r8
	jmpq   bd4c <F_0_714+0x67a>
	movb   $0x0,(%rcx)
	lea    0x2(%r8),%r13
	mov    %r15,%rcx
	mov    %rdi,%r15
	mov    -0x120(%rbp),%r8
	jmpq   baf6 <F_0_714+0x424>
	add    $0x1,%r11d
	movswq 0xc(%rsi),%r10
	test   %r10w,%r10w
	je     ca07 <F_0_714+0x1335>
	mov    %r10,%r14
	sar    $0x1f,%r14d
	mov    %r14,-0xc8(%rbp)
	mov    %r14,%rcx
	xor    %r10d,%ecx
	sub    %r14d,%ecx
	movslq %ecx,%rcx
	movzbl (%rcx,%rax,1),%ecx
	mov    %rcx,-0x128(%rbp)
	jmpq   cb1c <F_0_714+0x144a>
	cmp    $0x2f,%edx
	jle    c8b4 <F_0_714+0x11e2>
	lea    0x38(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    c816 <F_0_714+0x1144>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    0x30(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    c835 <F_0_714+0x1163>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	lea    0x28(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    c854 <F_0_714+0x1182>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    0x20(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    c873 <F_0_714+0x11a1>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	lea    0x18(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    c892 <F_0_714+0x11c0>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    -0x30(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %rcx,%rdx
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    c8b4 <F_0_714+0x11e2>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	mov    %rbx,%rcx
	shl    %cl,%rdi
	mov    %rcx,%rbx
	or     %r9,%rdi
	add    %ebx,%edx
	add    $0xfffffff0,%r11d
	cmp    $0xf,%r11d
	jg     c7ee <F_0_714+0x111c>
	shl    $0x4,%r11d
	mov    -0x128(%rbp),%rcx
	add    %ecx,%r11d
	movslq %r11d,%r14
	movslq (%r8,%r14,4),%r11
	movsbq 0x400(%r8,%r14,1),%r14
	cmp    $0x1f,%edx
	jg     cb93 <F_0_714+0x14c1>
	mov    %rdi,%r15
	shl    %cl,%r12
	lea    -0x1(%r12),%edi
	mov    -0xc8(%rbp),%r12
	add    %r12d,%r10d
	and    %r10d,%edi
	movslq %edi,%rdi
	mov    %rcx,%r12
	mov    %r14,%rcx
	shl    %cl,%r15
	mov    %rcx,%r10
	or     %r15,%r11
	mov    %r12,%rcx
	shl    %cl,%r11
	or     %r11,%rdi
	add    %r10d,%edx
	add    %ecx,%edx
	mov    $0x1,%r12d
	xor    %r11d,%r11d
	jmpq   c7b5 <F_0_714+0x10e3>
	mov    %rcx,%r15
	lea    0x38(%rdx),%ecx
	mov    %rdi,%r8
	shr    %cl,%r8
	mov    %r8b,0x0(%r13)
	lea    0x1(%r13),%rcx
	cmp    $0xff,%r8b
	je     cbb9 <F_0_714+0x14e7>
	mov    %rcx,%r8
	jmpq   cbc0 <F_0_714+0x14ee>
	movb   $0x0,(%rcx)
	lea    0x2(%r13),%r8
	lea    0x30(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     cbe2 <F_0_714+0x1510>
	mov    %rcx,%r8
	jmpq   cbe9 <F_0_714+0x1517>
	movb   $0x0,(%rcx)
	add    $0x2,%r8
	lea    0x28(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     cc0b <F_0_714+0x1539>
	mov    %rcx,%r8
	jmpq   cc12 <F_0_714+0x1540>
	movb   $0x0,(%rcx)
	add    $0x2,%r8
	lea    -0x20(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %rcx,%rdx
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     cc44 <F_0_714+0x1572>
	mov    %rcx,%r13
	mov    %r15,%rcx
	mov    %rdi,%r15
	mov    -0x120(%rbp),%r8
	jmpq   bfa2 <F_0_714+0x8d0>
	movb   $0x0,(%rcx)
	lea    0x2(%r8),%r13
	mov    %r15,%rcx
	mov    %rdi,%r15
	mov    -0x120(%rbp),%r8
	jmpq   bd4c <F_0_714+0x67a>
	add    $0x1,%r11d
	movswq 0xe(%rsi),%r10
	test   %r10w,%r10w
	je     cc5d <F_0_714+0x158b>
	mov    %r10,%r14
	sar    $0x1f,%r14d
	mov    %r14,-0xc0(%rbp)
	mov    %r14,%rcx
	xor    %r10d,%ecx
	sub    %r14d,%ecx
	movslq %ecx,%rcx
	movzbl (%rcx,%rax,1),%ecx
	mov    %rcx,-0x128(%rbp)
	jmpq   cd72 <F_0_714+0x16a0>
	cmp    $0x2f,%edx
	jle    cb0a <F_0_714+0x1438>
	lea    0x38(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    ca6c <F_0_714+0x139a>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    0x30(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    ca8b <F_0_714+0x13b9>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	lea    0x28(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    caaa <F_0_714+0x13d8>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    0x20(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    cac9 <F_0_714+0x13f7>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	lea    0x18(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    cae8 <F_0_714+0x1416>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    -0x30(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %rcx,%rdx
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    cb0a <F_0_714+0x1438>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	mov    %rbx,%rcx
	shl    %cl,%rdi
	mov    %rcx,%rbx
	or     %r9,%rdi
	add    %ebx,%edx
	add    $0xfffffff0,%r11d
	cmp    $0xf,%r11d
	jg     ca44 <F_0_714+0x1372>
	shl    $0x4,%r11d
	mov    -0x128(%rbp),%rcx
	add    %ecx,%r11d
	movslq %r11d,%r14
	movslq (%r8,%r14,4),%r11
	movsbq 0x400(%r8,%r14,1),%r14
	cmp    $0x1f,%edx
	jg     cde9 <F_0_714+0x1717>
	mov    %rdi,%r15
	shl    %cl,%r12
	lea    -0x1(%r12),%edi
	mov    -0xc8(%rbp),%r12
	add    %r12d,%r10d
	and    %r10d,%edi
	movslq %edi,%rdi
	mov    %rcx,%r12
	mov    %r14,%rcx
	shl    %cl,%r15
	mov    %rcx,%r10
	or     %r15,%r11
	mov    %r12,%rcx
	shl    %cl,%r11
	or     %r11,%rdi
	add    %r10d,%edx
	add    %ecx,%edx
	mov    $0x1,%r12d
	xor    %r11d,%r11d
	jmpq   ca0b <F_0_714+0x1339>
	mov    %rcx,%r15
	lea    0x38(%rdx),%ecx
	mov    %rdi,%r8
	shr    %cl,%r8
	mov    %r8b,0x0(%r13)
	lea    0x1(%r13),%rcx
	cmp    $0xff,%r8b
	je     ce0f <F_0_714+0x173d>
	mov    %rcx,%r8
	jmpq   ce16 <F_0_714+0x1744>
	movb   $0x0,(%rcx)
	lea    0x2(%r13),%r8
	lea    0x30(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     ce38 <F_0_714+0x1766>
	mov    %rcx,%r8
	jmpq   ce3f <F_0_714+0x176d>
	movb   $0x0,(%rcx)
	add    $0x2,%r8
	lea    0x28(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     ce61 <F_0_714+0x178f>
	mov    %rcx,%r8
	jmpq   ce68 <F_0_714+0x1796>
	movb   $0x0,(%rcx)
	add    $0x2,%r8
	lea    -0x20(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %rcx,%rdx
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     ce9a <F_0_714+0x17c8>
	mov    %rcx,%r13
	mov    %r15,%rcx
	mov    %rdi,%r15
	mov    -0x120(%rbp),%r8
	jmpq   c1f8 <F_0_714+0xb26>
	movb   $0x0,(%rcx)
	lea    0x2(%r8),%r13
	mov    %r15,%rcx
	mov    %rdi,%r15
	mov    -0x120(%rbp),%r8
	jmpq   bfa2 <F_0_714+0x8d0>
	add    $0x1,%r11d
	movswq 0x1c(%rsi),%r10
	test   %r10w,%r10w
	je     ceb3 <F_0_714+0x17e1>
	mov    %r10,%r14
	sar    $0x1f,%r14d
	mov    %r14,-0xc0(%rbp)
	mov    %r14,%rcx
	xor    %r10d,%ecx
	sub    %r14d,%ecx
	movslq %ecx,%rcx
	movzbl (%rcx,%rax,1),%ecx
	mov    %rcx,-0x128(%rbp)
	jmpq   cfc8 <F_0_714+0x18f6>
	cmp    $0x2f,%edx
	jle    cd60 <F_0_714+0x168e>
	lea    0x38(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    ccc2 <F_0_714+0x15f0>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    0x30(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    cce1 <F_0_714+0x160f>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	lea    0x28(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    cd00 <F_0_714+0x162e>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    0x20(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    cd1f <F_0_714+0x164d>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	lea    0x18(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    cd3e <F_0_714+0x166c>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    -0x30(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %rcx,%rdx
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    cd60 <F_0_714+0x168e>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	mov    %rbx,%rcx
	shl    %cl,%rdi
	mov    %rcx,%rbx
	or     %r9,%rdi
	add    %ebx,%edx
	add    $0xfffffff0,%r11d
	cmp    $0xf,%r11d
	jg     cc9a <F_0_714+0x15c8>
	shl    $0x4,%r11d
	mov    -0x128(%rbp),%rcx
	add    %ecx,%r11d
	movslq %r11d,%r14
	movslq (%r8,%r14,4),%r11
	movsbq 0x400(%r8,%r14,1),%r14
	cmp    $0x1f,%edx
	jg     d03f <F_0_714+0x196d>
	mov    %rdi,%r15
	shl    %cl,%r12
	lea    -0x1(%r12),%edi
	mov    -0xc0(%rbp),%r12
	add    %r12d,%r10d
	and    %r10d,%edi
	movslq %edi,%rdi
	mov    %rcx,%r12
	mov    %r14,%rcx
	shl    %cl,%r15
	mov    %rcx,%r10
	or     %r15,%r11
	mov    %r12,%rcx
	shl    %cl,%r11
	or     %r11,%rdi
	add    %r10d,%edx
	add    %ecx,%edx
	mov    $0x1,%r12d
	xor    %r11d,%r11d
	jmpq   cc61 <F_0_714+0x158f>
	mov    %rcx,%r15
	lea    0x38(%rdx),%ecx
	mov    %rdi,%r8
	shr    %cl,%r8
	mov    %r8b,0x0(%r13)
	lea    0x1(%r13),%rcx
	cmp    $0xff,%r8b
	je     d065 <F_0_714+0x1993>
	mov    %rcx,%r8
	jmpq   d06c <F_0_714+0x199a>
	movb   $0x0,(%rcx)
	lea    0x2(%r13),%r8
	lea    0x30(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     d08e <F_0_714+0x19bc>
	mov    %rcx,%r8
	jmpq   d095 <F_0_714+0x19c3>
	movb   $0x0,(%rcx)
	add    $0x2,%r8
	lea    0x28(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     d0b7 <F_0_714+0x19e5>
	mov    %rcx,%r8
	jmpq   d0be <F_0_714+0x19ec>
	movb   $0x0,(%rcx)
	add    $0x2,%r8
	lea    -0x20(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %rcx,%rdx
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     d0f0 <F_0_714+0x1a1e>
	mov    %rcx,%r13
	mov    %r15,%rcx
	mov    %rdi,%r15
	mov    -0x120(%rbp),%r8
	jmpq   c44e <F_0_714+0xd7c>
	movb   $0x0,(%rcx)
	lea    0x2(%r8),%r13
	mov    %r15,%rcx
	mov    %rdi,%r15
	mov    -0x120(%rbp),%r8
	jmpq   c1f8 <F_0_714+0xb26>
	add    $0x1,%r11d
	movswq 0x2a(%rsi),%r10
	test   %r10w,%r10w
	je     d109 <F_0_714+0x1a37>
	mov    %r10,%r14
	sar    $0x1f,%r14d
	mov    %r14,-0xb8(%rbp)
	mov    %r14,%rcx
	xor    %r10d,%ecx
	sub    %r14d,%ecx
	movslq %ecx,%rcx
	movzbl (%rcx,%rax,1),%ecx
	mov    %rcx,-0x128(%rbp)
	jmpq   d21e <F_0_714+0x1b4c>
	cmp    $0x2f,%edx
	jle    cfb6 <F_0_714+0x18e4>
	lea    0x38(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    cf18 <F_0_714+0x1846>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    0x30(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    cf37 <F_0_714+0x1865>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	lea    0x28(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    cf56 <F_0_714+0x1884>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    0x20(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    cf75 <F_0_714+0x18a3>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	lea    0x18(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    cf94 <F_0_714+0x18c2>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    -0x30(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %rcx,%rdx
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    cfb6 <F_0_714+0x18e4>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	mov    %rbx,%rcx
	shl    %cl,%rdi
	mov    %rcx,%rbx
	or     %r9,%rdi
	add    %ebx,%edx
	add    $0xfffffff0,%r11d
	cmp    $0xf,%r11d
	jg     cef0 <F_0_714+0x181e>
	shl    $0x4,%r11d
	mov    -0x128(%rbp),%rcx
	add    %ecx,%r11d
	movslq %r11d,%r14
	movslq (%r8,%r14,4),%r11
	movsbq 0x400(%r8,%r14,1),%r14
	cmp    $0x1f,%edx
	jg     d295 <F_0_714+0x1bc3>
	mov    %rdi,%r15
	shl    %cl,%r12
	lea    -0x1(%r12),%edi
	mov    -0xc0(%rbp),%r12
	add    %r12d,%r10d
	and    %r10d,%edi
	movslq %edi,%rdi
	mov    %rcx,%r12
	mov    %r14,%rcx
	shl    %cl,%r15
	mov    %rcx,%r10
	or     %r15,%r11
	mov    %r12,%rcx
	shl    %cl,%r11
	or     %r11,%rdi
	add    %r10d,%edx
	add    %ecx,%edx
	mov    $0x1,%r12d
	xor    %r11d,%r11d
	jmpq   ceb7 <F_0_714+0x17e5>
	mov    %rcx,%r15
	lea    0x38(%rdx),%ecx
	mov    %rdi,%r8
	shr    %cl,%r8
	mov    %r8b,0x0(%r13)
	lea    0x1(%r13),%rcx
	cmp    $0xff,%r8b
	je     d2bb <F_0_714+0x1be9>
	mov    %rcx,%r8
	jmpq   d2c2 <F_0_714+0x1bf0>
	movb   $0x0,(%rcx)
	lea    0x2(%r13),%r8
	lea    0x30(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     d2e4 <F_0_714+0x1c12>
	mov    %rcx,%r8
	jmpq   d2eb <F_0_714+0x1c19>
	movb   $0x0,(%rcx)
	add    $0x2,%r8
	lea    0x28(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     d30d <F_0_714+0x1c3b>
	mov    %rcx,%r8
	jmpq   d314 <F_0_714+0x1c42>
	movb   $0x0,(%rcx)
	add    $0x2,%r8
	lea    -0x20(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %rcx,%rdx
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     d346 <F_0_714+0x1c74>
	mov    %rcx,%r13
	mov    %r15,%rcx
	mov    %rdi,%r15
	mov    -0x120(%rbp),%r8
	jmpq   c6a4 <F_0_714+0xfd2>
	movb   $0x0,(%rcx)
	lea    0x2(%r8),%r13
	mov    %r15,%rcx
	mov    %rdi,%r15
	mov    -0x120(%rbp),%r8
	jmpq   c44e <F_0_714+0xd7c>
	add    $0x1,%r11d
	movswq 0x38(%rsi),%r10
	test   %r10w,%r10w
	je     d35f <F_0_714+0x1c8d>
	mov    %r10,%r14
	sar    $0x1f,%r14d
	mov    %r14,-0xb8(%rbp)
	mov    %r14,%rcx
	xor    %r10d,%ecx
	sub    %r14d,%ecx
	movslq %ecx,%rcx
	movzbl (%rcx,%rax,1),%ecx
	mov    %rcx,-0x128(%rbp)
	jmpq   d474 <F_0_714+0x1da2>
	cmp    $0x2f,%edx
	jle    d20c <F_0_714+0x1b3a>
	lea    0x38(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    d16e <F_0_714+0x1a9c>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    0x30(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    d18d <F_0_714+0x1abb>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	lea    0x28(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    d1ac <F_0_714+0x1ada>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    0x20(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    d1cb <F_0_714+0x1af9>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	lea    0x18(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    d1ea <F_0_714+0x1b18>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    -0x30(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %rcx,%rdx
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    d20c <F_0_714+0x1b3a>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	mov    %rbx,%rcx
	shl    %cl,%rdi
	mov    %rcx,%rbx
	or     %r9,%rdi
	add    %ebx,%edx
	add    $0xfffffff0,%r11d
	cmp    $0xf,%r11d
	jg     d146 <F_0_714+0x1a74>
	shl    $0x4,%r11d
	mov    -0x128(%rbp),%rcx
	add    %ecx,%r11d
	movslq %r11d,%r14
	movslq (%r8,%r14,4),%r11
	movsbq 0x400(%r8,%r14,1),%r14
	cmp    $0x1f,%edx
	jg     d4eb <F_0_714+0x1e19>
	mov    %rdi,%r15
	shl    %cl,%r12
	lea    -0x1(%r12),%edi
	mov    -0xb8(%rbp),%r12
	add    %r12d,%r10d
	and    %r10d,%edi
	movslq %edi,%rdi
	mov    %rcx,%r12
	mov    %r14,%rcx
	shl    %cl,%r15
	mov    %rcx,%r10
	or     %r15,%r11
	mov    %r12,%rcx
	shl    %cl,%r11
	or     %r11,%rdi
	add    %r10d,%edx
	add    %ecx,%edx
	mov    $0x1,%r12d
	xor    %r11d,%r11d
	jmpq   d10d <F_0_714+0x1a3b>
	mov    %rcx,%r15
	lea    0x38(%rdx),%ecx
	mov    %rdi,%r8
	shr    %cl,%r8
	mov    %r8b,0x0(%r13)
	lea    0x1(%r13),%rcx
	cmp    $0xff,%r8b
	je     d511 <F_0_714+0x1e3f>
	mov    %rcx,%r8
	jmpq   d518 <F_0_714+0x1e46>
	movb   $0x0,(%rcx)
	lea    0x2(%r13),%r8
	lea    0x30(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     d53a <F_0_714+0x1e68>
	mov    %rcx,%r8
	jmpq   d541 <F_0_714+0x1e6f>
	movb   $0x0,(%rcx)
	add    $0x2,%r8
	lea    0x28(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     d563 <F_0_714+0x1e91>
	mov    %rcx,%r8
	jmpq   d56a <F_0_714+0x1e98>
	movb   $0x0,(%rcx)
	add    $0x2,%r8
	lea    -0x20(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %rcx,%rdx
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     d59c <F_0_714+0x1eca>
	mov    %rcx,%r13
	mov    %r15,%rcx
	mov    %rdi,%r15
	mov    -0x120(%rbp),%r8
	jmpq   c8fa <F_0_714+0x1228>
	movb   $0x0,(%rcx)
	lea    0x2(%r8),%r13
	mov    %r15,%rcx
	mov    %rdi,%r15
	mov    -0x120(%rbp),%r8
	jmpq   c6a4 <F_0_714+0xfd2>
	add    $0x1,%r11d
	movswq 0x46(%rsi),%r10
	test   %r10w,%r10w
	je     d5b5 <F_0_714+0x1ee3>
	mov    %r10,%r14
	sar    $0x1f,%r14d
	mov    %r14,-0xb0(%rbp)
	mov    %r14,%rcx
	xor    %r10d,%ecx
	sub    %r14d,%ecx
	movslq %ecx,%rcx
	movzbl (%rcx,%rax,1),%ecx
	mov    %rcx,-0x128(%rbp)
	jmpq   d6ca <F_0_714+0x1ff8>
	cmp    $0x2f,%edx
	jle    d462 <F_0_714+0x1d90>
	lea    0x38(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    d3c4 <F_0_714+0x1cf2>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    0x30(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    d3e3 <F_0_714+0x1d11>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	lea    0x28(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    d402 <F_0_714+0x1d30>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    0x20(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    d421 <F_0_714+0x1d4f>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	lea    0x18(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    d440 <F_0_714+0x1d6e>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    -0x30(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %rcx,%rdx
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    d462 <F_0_714+0x1d90>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	mov    %rbx,%rcx
	shl    %cl,%rdi
	mov    %rcx,%rbx
	or     %r9,%rdi
	add    %ebx,%edx
	add    $0xfffffff0,%r11d
	cmp    $0xf,%r11d
	jg     d39c <F_0_714+0x1cca>
	shl    $0x4,%r11d
	mov    -0x128(%rbp),%rcx
	add    %ecx,%r11d
	movslq %r11d,%r14
	movslq (%r8,%r14,4),%r11
	movsbq 0x400(%r8,%r14,1),%r14
	cmp    $0x1f,%edx
	jg     d741 <F_0_714+0x206f>
	mov    %rdi,%r15
	shl    %cl,%r12
	lea    -0x1(%r12),%edi
	mov    -0xb8(%rbp),%r12
	add    %r12d,%r10d
	and    %r10d,%edi
	movslq %edi,%rdi
	mov    %rcx,%r12
	mov    %r14,%rcx
	shl    %cl,%r15
	mov    %rcx,%r10
	or     %r15,%r11
	mov    %r12,%rcx
	shl    %cl,%r11
	or     %r11,%rdi
	add    %r10d,%edx
	add    %ecx,%edx
	mov    $0x1,%r12d
	xor    %r11d,%r11d
	jmpq   d363 <F_0_714+0x1c91>
	mov    %rcx,%r15
	lea    0x38(%rdx),%ecx
	mov    %rdi,%r8
	shr    %cl,%r8
	mov    %r8b,0x0(%r13)
	lea    0x1(%r13),%rcx
	cmp    $0xff,%r8b
	je     d767 <F_0_714+0x2095>
	mov    %rcx,%r8
	jmpq   d76e <F_0_714+0x209c>
	movb   $0x0,(%rcx)
	lea    0x2(%r13),%r8
	lea    0x30(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     d790 <F_0_714+0x20be>
	mov    %rcx,%r8
	jmpq   d797 <F_0_714+0x20c5>
	movb   $0x0,(%rcx)
	add    $0x2,%r8
	lea    0x28(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     d7b9 <F_0_714+0x20e7>
	mov    %rcx,%r8
	jmpq   d7c0 <F_0_714+0x20ee>
	movb   $0x0,(%rcx)
	add    $0x2,%r8
	lea    -0x20(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %rcx,%rdx
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     d7f2 <F_0_714+0x2120>
	mov    %rcx,%r13
	mov    %r15,%rcx
	mov    %rdi,%r15
	mov    -0x120(%rbp),%r8
	jmpq   cb50 <F_0_714+0x147e>
	movb   $0x0,(%rcx)
	lea    0x2(%r8),%r13
	mov    %r15,%rcx
	mov    %rdi,%r15
	mov    -0x120(%rbp),%r8
	jmpq   c8fa <F_0_714+0x1228>
	add    $0x1,%r11d
	movswq 0x54(%rsi),%r10
	test   %r10w,%r10w
	je     d80b <F_0_714+0x2139>
	mov    %r10,%r14
	sar    $0x1f,%r14d
	mov    %r14,-0xb0(%rbp)
	mov    %r14,%rcx
	xor    %r10d,%ecx
	sub    %r14d,%ecx
	movslq %ecx,%rcx
	movzbl (%rcx,%rax,1),%ecx
	mov    %rcx,-0x128(%rbp)
	jmpq   d920 <F_0_714+0x224e>
	cmp    $0x2f,%edx
	jle    d6b8 <F_0_714+0x1fe6>
	lea    0x38(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    d61a <F_0_714+0x1f48>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    0x30(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    d639 <F_0_714+0x1f67>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	lea    0x28(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    d658 <F_0_714+0x1f86>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    0x20(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    d677 <F_0_714+0x1fa5>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	lea    0x18(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    d696 <F_0_714+0x1fc4>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    -0x30(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %rcx,%rdx
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    d6b8 <F_0_714+0x1fe6>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	mov    %rbx,%rcx
	shl    %cl,%rdi
	mov    %rcx,%rbx
	or     %r9,%rdi
	add    %ebx,%edx
	add    $0xfffffff0,%r11d
	cmp    $0xf,%r11d
	jg     d5f2 <F_0_714+0x1f20>
	shl    $0x4,%r11d
	mov    -0x128(%rbp),%rcx
	add    %ecx,%r11d
	movslq %r11d,%r14
	movslq (%r8,%r14,4),%r11
	movsbq 0x400(%r8,%r14,1),%r14
	cmp    $0x1f,%edx
	jg     d997 <F_0_714+0x22c5>
	mov    %rdi,%r15
	shl    %cl,%r12
	lea    -0x1(%r12),%edi
	mov    -0xb0(%rbp),%r12
	add    %r12d,%r10d
	and    %r10d,%edi
	movslq %edi,%rdi
	mov    %rcx,%r12
	mov    %r14,%rcx
	shl    %cl,%r15
	mov    %rcx,%r10
	or     %r15,%r11
	mov    %r12,%rcx
	shl    %cl,%r11
	or     %r11,%rdi
	add    %r10d,%edx
	add    %ecx,%edx
	mov    $0x1,%r12d
	xor    %r11d,%r11d
	jmpq   d5b9 <F_0_714+0x1ee7>
	mov    %rcx,%r15
	lea    0x38(%rdx),%ecx
	mov    %rdi,%r8
	shr    %cl,%r8
	mov    %r8b,0x0(%r13)
	lea    0x1(%r13),%rcx
	cmp    $0xff,%r8b
	je     d9bd <F_0_714+0x22eb>
	mov    %rcx,%r8
	jmpq   d9c4 <F_0_714+0x22f2>
	movb   $0x0,(%rcx)
	lea    0x2(%r13),%r8
	lea    0x30(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     d9e6 <F_0_714+0x2314>
	mov    %rcx,%r8
	jmpq   d9ed <F_0_714+0x231b>
	movb   $0x0,(%rcx)
	add    $0x2,%r8
	lea    0x28(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     da0f <F_0_714+0x233d>
	mov    %rcx,%r8
	jmpq   da16 <F_0_714+0x2344>
	movb   $0x0,(%rcx)
	add    $0x2,%r8
	lea    -0x20(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %rcx,%rdx
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     da48 <F_0_714+0x2376>
	mov    %rcx,%r13
	mov    %r15,%rcx
	mov    %rdi,%r15
	mov    -0x120(%rbp),%r8
	jmpq   cda6 <F_0_714+0x16d4>
	movb   $0x0,(%rcx)
	lea    0x2(%r8),%r13
	mov    %r15,%rcx
	mov    %rdi,%r15
	mov    -0x120(%rbp),%r8
	jmpq   cb50 <F_0_714+0x147e>
	add    $0x1,%r11d
	movswq 0x62(%rsi),%r10
	test   %r10w,%r10w
	je     da61 <F_0_714+0x238f>
	mov    %r10,%r14
	sar    $0x1f,%r14d
	mov    %r14,-0xa8(%rbp)
	mov    %r14,%rcx
	xor    %r10d,%ecx
	sub    %r14d,%ecx
	movslq %ecx,%rcx
	movzbl (%rcx,%rax,1),%ecx
	mov    %rcx,-0x128(%rbp)
	jmpq   db76 <F_0_714+0x24a4>
	cmp    $0x2f,%edx
	jle    d90e <F_0_714+0x223c>
	lea    0x38(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    d870 <F_0_714+0x219e>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    0x30(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    d88f <F_0_714+0x21bd>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	lea    0x28(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    d8ae <F_0_714+0x21dc>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    0x20(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    d8cd <F_0_714+0x21fb>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	lea    0x18(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    d8ec <F_0_714+0x221a>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    -0x30(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %rcx,%rdx
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    d90e <F_0_714+0x223c>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	mov    %rbx,%rcx
	shl    %cl,%rdi
	mov    %rcx,%rbx
	or     %r9,%rdi
	add    %ebx,%edx
	add    $0xfffffff0,%r11d
	cmp    $0xf,%r11d
	jg     d848 <F_0_714+0x2176>
	shl    $0x4,%r11d
	mov    -0x128(%rbp),%rcx
	add    %ecx,%r11d
	movslq %r11d,%r14
	movslq (%r8,%r14,4),%r11
	movsbq 0x400(%r8,%r14,1),%r14
	cmp    $0x1f,%edx
	jg     dbed <F_0_714+0x251b>
	mov    %rdi,%r15
	shl    %cl,%r12
	lea    -0x1(%r12),%edi
	mov    -0xb0(%rbp),%r12
	add    %r12d,%r10d
	and    %r10d,%edi
	movslq %edi,%rdi
	mov    %rcx,%r12
	mov    %r14,%rcx
	shl    %cl,%r15
	mov    %rcx,%r10
	or     %r15,%r11
	mov    %r12,%rcx
	shl    %cl,%r11
	or     %r11,%rdi
	add    %r10d,%edx
	add    %ecx,%edx
	mov    $0x1,%r12d
	xor    %r11d,%r11d
	jmpq   d80f <F_0_714+0x213d>
	mov    %rcx,%r15
	lea    0x38(%rdx),%ecx
	mov    %rdi,%r8
	shr    %cl,%r8
	mov    %r8b,0x0(%r13)
	lea    0x1(%r13),%rcx
	cmp    $0xff,%r8b
	je     dc13 <F_0_714+0x2541>
	mov    %rcx,%r8
	jmpq   dc1a <F_0_714+0x2548>
	movb   $0x0,(%rcx)
	lea    0x2(%r13),%r8
	lea    0x30(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     dc3c <F_0_714+0x256a>
	mov    %rcx,%r8
	jmpq   dc43 <F_0_714+0x2571>
	movb   $0x0,(%rcx)
	add    $0x2,%r8
	lea    0x28(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     dc65 <F_0_714+0x2593>
	mov    %rcx,%r8
	jmpq   dc6c <F_0_714+0x259a>
	movb   $0x0,(%rcx)
	add    $0x2,%r8
	lea    -0x20(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %rcx,%rdx
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     dc9e <F_0_714+0x25cc>
	mov    %rcx,%r13
	mov    %r15,%rcx
	mov    %rdi,%r15
	mov    -0x120(%rbp),%r8
	jmpq   cffc <F_0_714+0x192a>
	movb   $0x0,(%rcx)
	lea    0x2(%r8),%r13
	mov    %r15,%rcx
	mov    %rdi,%r15
	mov    -0x120(%rbp),%r8
	jmpq   cda6 <F_0_714+0x16d4>
	add    $0x1,%r11d
	movswq 0x70(%rsi),%r10
	test   %r10w,%r10w
	je     dcb7 <F_0_714+0x25e5>
	mov    %r10,%r14
	sar    $0x1f,%r14d
	mov    %r14,-0xa8(%rbp)
	mov    %r14,%rcx
	xor    %r10d,%ecx
	sub    %r14d,%ecx
	movslq %ecx,%rcx
	movzbl (%rcx,%rax,1),%ecx
	mov    %rcx,-0x128(%rbp)
	jmpq   ddcc <F_0_714+0x26fa>
	cmp    $0x2f,%edx
	jle    db64 <F_0_714+0x2492>
	lea    0x38(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    dac6 <F_0_714+0x23f4>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    0x30(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    dae5 <F_0_714+0x2413>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	lea    0x28(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    db04 <F_0_714+0x2432>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    0x20(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    db23 <F_0_714+0x2451>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	lea    0x18(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    db42 <F_0_714+0x2470>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    -0x30(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %rcx,%rdx
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    db64 <F_0_714+0x2492>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	mov    %rbx,%rcx
	shl    %cl,%rdi
	mov    %rcx,%rbx
	or     %r9,%rdi
	add    %ebx,%edx
	add    $0xfffffff0,%r11d
	cmp    $0xf,%r11d
	jg     da9e <F_0_714+0x23cc>
	shl    $0x4,%r11d
	mov    -0x128(%rbp),%rcx
	add    %ecx,%r11d
	movslq %r11d,%r14
	movslq (%r8,%r14,4),%r11
	movsbq 0x400(%r8,%r14,1),%r14
	cmp    $0x1f,%edx
	jg     de43 <F_0_714+0x2771>
	mov    %rdi,%r15
	shl    %cl,%r12
	lea    -0x1(%r12),%edi
	mov    -0xa8(%rbp),%r12
	add    %r12d,%r10d
	and    %r10d,%edi
	movslq %edi,%rdi
	mov    %rcx,%r12
	mov    %r14,%rcx
	shl    %cl,%r15
	mov    %rcx,%r10
	or     %r15,%r11
	mov    %r12,%rcx
	shl    %cl,%r11
	or     %r11,%rdi
	add    %r10d,%edx
	add    %ecx,%edx
	mov    $0x1,%r12d
	xor    %r11d,%r11d
	jmpq   da65 <F_0_714+0x2393>
	mov    %rcx,%r15
	lea    0x38(%rdx),%ecx
	mov    %rdi,%r8
	shr    %cl,%r8
	mov    %r8b,0x0(%r13)
	lea    0x1(%r13),%rcx
	cmp    $0xff,%r8b
	je     de69 <F_0_714+0x2797>
	mov    %rcx,%r8
	jmpq   de70 <F_0_714+0x279e>
	movb   $0x0,(%rcx)
	lea    0x2(%r13),%r8
	lea    0x30(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     de92 <F_0_714+0x27c0>
	mov    %rcx,%r8
	jmpq   de99 <F_0_714+0x27c7>
	movb   $0x0,(%rcx)
	add    $0x2,%r8
	lea    0x28(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     debb <F_0_714+0x27e9>
	mov    %rcx,%r8
	jmpq   dec2 <F_0_714+0x27f0>
	movb   $0x0,(%rcx)
	add    $0x2,%r8
	lea    -0x20(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %rcx,%rdx
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     def4 <F_0_714+0x2822>
	mov    %rcx,%r13
	mov    %r15,%rcx
	mov    %rdi,%r15
	mov    -0x120(%rbp),%r8
	jmpq   d252 <F_0_714+0x1b80>
	movb   $0x0,(%rcx)
	lea    0x2(%r8),%r13
	mov    %r15,%rcx
	mov    %rdi,%r15
	mov    -0x120(%rbp),%r8
	jmpq   cffc <F_0_714+0x192a>
	add    $0x1,%r11d
	movswq 0x72(%rsi),%r10
	test   %r10w,%r10w
	je     df0d <F_0_714+0x283b>
	mov    %r10,%r14
	sar    $0x1f,%r14d
	mov    %r14,-0xa0(%rbp)
	mov    %r14,%rcx
	xor    %r10d,%ecx
	sub    %r14d,%ecx
	movslq %ecx,%rcx
	movzbl (%rcx,%rax,1),%ecx
	mov    %rcx,-0x128(%rbp)
	jmpq   e022 <F_0_714+0x2950>
	cmp    $0x2f,%edx
	jle    ddba <F_0_714+0x26e8>
	lea    0x38(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    dd1c <F_0_714+0x264a>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    0x30(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    dd3b <F_0_714+0x2669>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	lea    0x28(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    dd5a <F_0_714+0x2688>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    0x20(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    dd79 <F_0_714+0x26a7>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	lea    0x18(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    dd98 <F_0_714+0x26c6>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    -0x30(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %rcx,%rdx
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    ddba <F_0_714+0x26e8>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	mov    %rbx,%rcx
	shl    %cl,%rdi
	mov    %rcx,%rbx
	or     %r9,%rdi
	add    %ebx,%edx
	add    $0xfffffff0,%r11d
	cmp    $0xf,%r11d
	jg     dcf4 <F_0_714+0x2622>
	shl    $0x4,%r11d
	mov    -0x128(%rbp),%rcx
	add    %ecx,%r11d
	movslq %r11d,%r14
	movslq (%r8,%r14,4),%r11
	movsbq 0x400(%r8,%r14,1),%r14
	cmp    $0x1f,%edx
	jg     e099 <F_0_714+0x29c7>
	mov    %rdi,%r15
	shl    %cl,%r12
	lea    -0x1(%r12),%edi
	mov    -0xa8(%rbp),%r12
	add    %r12d,%r10d
	and    %r10d,%edi
	movslq %edi,%rdi
	mov    %rcx,%r12
	mov    %r14,%rcx
	shl    %cl,%r15
	mov    %rcx,%r10
	or     %r15,%r11
	mov    %r12,%rcx
	shl    %cl,%r11
	or     %r11,%rdi
	add    %r10d,%edx
	add    %ecx,%edx
	mov    $0x1,%r12d
	xor    %r11d,%r11d
	jmpq   dcbb <F_0_714+0x25e9>
	mov    %rcx,%r15
	lea    0x38(%rdx),%ecx
	mov    %rdi,%r8
	shr    %cl,%r8
	mov    %r8b,0x0(%r13)
	lea    0x1(%r13),%rcx
	cmp    $0xff,%r8b
	je     e0bf <F_0_714+0x29ed>
	mov    %rcx,%r8
	jmpq   e0c6 <F_0_714+0x29f4>
	movb   $0x0,(%rcx)
	lea    0x2(%r13),%r8
	lea    0x30(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     e0e8 <F_0_714+0x2a16>
	mov    %rcx,%r8
	jmpq   e0ef <F_0_714+0x2a1d>
	movb   $0x0,(%rcx)
	add    $0x2,%r8
	lea    0x28(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     e111 <F_0_714+0x2a3f>
	mov    %rcx,%r8
	jmpq   e118 <F_0_714+0x2a46>
	movb   $0x0,(%rcx)
	add    $0x2,%r8
	lea    -0x20(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %rcx,%rdx
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     e14a <F_0_714+0x2a78>
	mov    %rcx,%r13
	mov    %r15,%rcx
	mov    %rdi,%r15
	mov    -0x120(%rbp),%r8
	jmpq   d4a8 <F_0_714+0x1dd6>
	movb   $0x0,(%rcx)
	lea    0x2(%r8),%r13
	mov    %r15,%rcx
	mov    %rdi,%r15
	mov    -0x120(%rbp),%r8
	jmpq   d252 <F_0_714+0x1b80>
	add    $0x1,%r11d
	movswq 0x64(%rsi),%r10
	test   %r10w,%r10w
	je     e163 <F_0_714+0x2a91>
	mov    %r10,%r14
	sar    $0x1f,%r14d
	mov    %r14,-0xa0(%rbp)
	mov    %r14,%rcx
	xor    %r10d,%ecx
	sub    %r14d,%ecx
	movslq %ecx,%rcx
	movzbl (%rcx,%rax,1),%ecx
	mov    %rcx,-0x128(%rbp)
	jmpq   e278 <F_0_714+0x2ba6>
	cmp    $0x2f,%edx
	jle    e010 <F_0_714+0x293e>
	lea    0x38(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    df72 <F_0_714+0x28a0>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    0x30(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    df91 <F_0_714+0x28bf>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	lea    0x28(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    dfb0 <F_0_714+0x28de>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    0x20(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    dfcf <F_0_714+0x28fd>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	lea    0x18(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    dfee <F_0_714+0x291c>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    -0x30(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %rcx,%rdx
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    e010 <F_0_714+0x293e>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	mov    %rbx,%rcx
	shl    %cl,%rdi
	mov    %rcx,%rbx
	or     %r9,%rdi
	add    %ebx,%edx
	add    $0xfffffff0,%r11d
	cmp    $0xf,%r11d
	jg     df4a <F_0_714+0x2878>
	shl    $0x4,%r11d
	mov    -0x128(%rbp),%rcx
	add    %ecx,%r11d
	movslq %r11d,%r14
	movslq (%r8,%r14,4),%r11
	movsbq 0x400(%r8,%r14,1),%r14
	cmp    $0x1f,%edx
	jg     e2ef <F_0_714+0x2c1d>
	mov    %rdi,%r15
	shl    %cl,%r12
	lea    -0x1(%r12),%edi
	mov    -0xa0(%rbp),%r12
	add    %r12d,%r10d
	and    %r10d,%edi
	movslq %edi,%rdi
	mov    %rcx,%r12
	mov    %r14,%rcx
	shl    %cl,%r15
	mov    %rcx,%r10
	or     %r15,%r11
	mov    %r12,%rcx
	shl    %cl,%r11
	or     %r11,%rdi
	add    %r10d,%edx
	add    %ecx,%edx
	mov    $0x1,%r12d
	xor    %r11d,%r11d
	jmpq   df11 <F_0_714+0x283f>
	mov    %rcx,%r15
	lea    0x38(%rdx),%ecx
	mov    %rdi,%r8
	shr    %cl,%r8
	mov    %r8b,0x0(%r13)
	lea    0x1(%r13),%rcx
	cmp    $0xff,%r8b
	je     e315 <F_0_714+0x2c43>
	mov    %rcx,%r8
	jmpq   e31c <F_0_714+0x2c4a>
	movb   $0x0,(%rcx)
	lea    0x2(%r13),%r8
	lea    0x30(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     e33e <F_0_714+0x2c6c>
	mov    %rcx,%r8
	jmpq   e345 <F_0_714+0x2c73>
	movb   $0x0,(%rcx)
	add    $0x2,%r8
	lea    0x28(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     e367 <F_0_714+0x2c95>
	mov    %rcx,%r8
	jmpq   e36e <F_0_714+0x2c9c>
	movb   $0x0,(%rcx)
	add    $0x2,%r8
	lea    -0x20(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %rcx,%rdx
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     e3a0 <F_0_714+0x2cce>
	mov    %rcx,%r13
	mov    %r15,%rcx
	mov    %rdi,%r15
	mov    -0x120(%rbp),%r8
	jmpq   d6fe <F_0_714+0x202c>
	movb   $0x0,(%rcx)
	lea    0x2(%r8),%r13
	mov    %r15,%rcx
	mov    %rdi,%r15
	mov    -0x120(%rbp),%r8
	jmpq   d4a8 <F_0_714+0x1dd6>
	add    $0x1,%r11d
	movswq 0x56(%rsi),%r10
	test   %r10w,%r10w
	je     e3b9 <F_0_714+0x2ce7>
	mov    %r10,%r14
	sar    $0x1f,%r14d
	mov    %r14,-0x98(%rbp)
	mov    %r14,%rcx
	xor    %r10d,%ecx
	sub    %r14d,%ecx
	movslq %ecx,%rcx
	movzbl (%rcx,%rax,1),%ecx
	mov    %rcx,-0x128(%rbp)
	jmpq   e4ce <F_0_714+0x2dfc>
	cmp    $0x2f,%edx
	jle    e266 <F_0_714+0x2b94>
	lea    0x38(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    e1c8 <F_0_714+0x2af6>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    0x30(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    e1e7 <F_0_714+0x2b15>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	lea    0x28(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    e206 <F_0_714+0x2b34>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    0x20(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    e225 <F_0_714+0x2b53>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	lea    0x18(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    e244 <F_0_714+0x2b72>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    -0x30(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %rcx,%rdx
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    e266 <F_0_714+0x2b94>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	mov    %rbx,%rcx
	shl    %cl,%rdi
	mov    %rcx,%rbx
	or     %r9,%rdi
	add    %ebx,%edx
	add    $0xfffffff0,%r11d
	cmp    $0xf,%r11d
	jg     e1a0 <F_0_714+0x2ace>
	shl    $0x4,%r11d
	mov    -0x128(%rbp),%rcx
	add    %ecx,%r11d
	movslq %r11d,%r14
	movslq (%r8,%r14,4),%r11
	movsbq 0x400(%r8,%r14,1),%r14
	cmp    $0x1f,%edx
	jg     e545 <F_0_714+0x2e73>
	mov    %rdi,%r15
	shl    %cl,%r12
	lea    -0x1(%r12),%edi
	mov    -0xa0(%rbp),%r12
	add    %r12d,%r10d
	and    %r10d,%edi
	movslq %edi,%rdi
	mov    %rcx,%r12
	mov    %r14,%rcx
	shl    %cl,%r15
	mov    %rcx,%r10
	or     %r15,%r11
	mov    %r12,%rcx
	shl    %cl,%r11
	or     %r11,%rdi
	add    %r10d,%edx
	add    %ecx,%edx
	mov    $0x1,%r12d
	xor    %r11d,%r11d
	jmpq   e167 <F_0_714+0x2a95>
	mov    %rcx,%r15
	lea    0x38(%rdx),%ecx
	mov    %rdi,%r8
	shr    %cl,%r8
	mov    %r8b,0x0(%r13)
	lea    0x1(%r13),%rcx
	cmp    $0xff,%r8b
	je     e56b <F_0_714+0x2e99>
	mov    %rcx,%r8
	jmpq   e572 <F_0_714+0x2ea0>
	movb   $0x0,(%rcx)
	lea    0x2(%r13),%r8
	lea    0x30(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     e594 <F_0_714+0x2ec2>
	mov    %rcx,%r8
	jmpq   e59b <F_0_714+0x2ec9>
	movb   $0x0,(%rcx)
	add    $0x2,%r8
	lea    0x28(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     e5bd <F_0_714+0x2eeb>
	mov    %rcx,%r8
	jmpq   e5c4 <F_0_714+0x2ef2>
	movb   $0x0,(%rcx)
	add    $0x2,%r8
	lea    -0x20(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %rcx,%rdx
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     e5f6 <F_0_714+0x2f24>
	mov    %rcx,%r13
	mov    %r15,%rcx
	mov    %rdi,%r15
	mov    -0x120(%rbp),%r8
	jmpq   d954 <F_0_714+0x2282>
	movb   $0x0,(%rcx)
	lea    0x2(%r8),%r13
	mov    %r15,%rcx
	mov    %rdi,%r15
	mov    -0x120(%rbp),%r8
	jmpq   d6fe <F_0_714+0x202c>
	add    $0x1,%r11d
	movswq 0x48(%rsi),%r10
	test   %r10w,%r10w
	je     e60f <F_0_714+0x2f3d>
	mov    %r10,%r14
	sar    $0x1f,%r14d
	mov    %r14,-0x98(%rbp)
	mov    %r14,%rcx
	xor    %r10d,%ecx
	sub    %r14d,%ecx
	movslq %ecx,%rcx
	movzbl (%rcx,%rax,1),%ecx
	mov    %rcx,-0x128(%rbp)
	jmpq   e724 <F_0_714+0x3052>
	cmp    $0x2f,%edx
	jle    e4bc <F_0_714+0x2dea>
	lea    0x38(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    e41e <F_0_714+0x2d4c>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    0x30(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    e43d <F_0_714+0x2d6b>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	lea    0x28(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    e45c <F_0_714+0x2d8a>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    0x20(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    e47b <F_0_714+0x2da9>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	lea    0x18(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    e49a <F_0_714+0x2dc8>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    -0x30(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %rcx,%rdx
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    e4bc <F_0_714+0x2dea>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	mov    %rbx,%rcx
	shl    %cl,%rdi
	mov    %rcx,%rbx
	or     %r9,%rdi
	add    %ebx,%edx
	add    $0xfffffff0,%r11d
	cmp    $0xf,%r11d
	jg     e3f6 <F_0_714+0x2d24>
	shl    $0x4,%r11d
	mov    -0x128(%rbp),%rcx
	add    %ecx,%r11d
	movslq %r11d,%r14
	movslq (%r8,%r14,4),%r11
	movsbq 0x400(%r8,%r14,1),%r14
	cmp    $0x1f,%edx
	jg     e79e <F_0_714+0x30cc>
	mov    %rdi,%r15
	shl    %cl,%r12
	lea    -0x1(%r12),%edi
	mov    -0x98(%rbp),%r12
	add    %r12d,%r10d
	and    %r10d,%edi
	movslq %edi,%rdi
	mov    %rcx,%r12
	mov    %r14,%rcx
	shl    %cl,%r15
	mov    %rcx,%r10
	or     %r15,%r11
	mov    %r12,%rcx
	shl    %cl,%r11
	or     %r11,%rdi
	add    %r10d,%edx
	add    %ecx,%edx
	mov    $0x1,%r12d
	xor    %r11d,%r11d
	jmpq   e3bd <F_0_714+0x2ceb>
	mov    %rcx,%r15
	lea    0x38(%rdx),%ecx
	mov    %rdi,%r8
	shr    %cl,%r8
	mov    %r8b,0x0(%r13)
	lea    0x1(%r13),%rcx
	cmp    $0xff,%r8b
	je     e7c4 <F_0_714+0x30f2>
	mov    %rcx,%r8
	jmpq   e7cb <F_0_714+0x30f9>
	movb   $0x0,(%rcx)
	lea    0x2(%r13),%r8
	lea    0x30(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     e7ed <F_0_714+0x311b>
	mov    %rcx,%r8
	jmpq   e7f4 <F_0_714+0x3122>
	movb   $0x0,(%rcx)
	add    $0x2,%r8
	lea    0x28(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     e816 <F_0_714+0x3144>
	mov    %rcx,%r8
	jmpq   e81d <F_0_714+0x314b>
	movb   $0x0,(%rcx)
	add    $0x2,%r8
	lea    -0x20(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %rcx,%rdx
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     e84f <F_0_714+0x317d>
	mov    %rcx,%r13
	mov    %r15,%rcx
	mov    %rdi,%r15
	mov    -0x120(%rbp),%r8
	jmpq   dbaa <F_0_714+0x24d8>
	movb   $0x0,(%rcx)
	lea    0x2(%r8),%r13
	mov    %r15,%rcx
	mov    %rdi,%r15
	mov    -0x120(%rbp),%r8
	jmpq   d954 <F_0_714+0x2282>
	add    $0x1,%r11d
	movswq 0x3a(%rsi),%r10
	test   %r10w,%r10w
	je     e868 <F_0_714+0x3196>
	mov    %r10,%r14
	sar    $0x1f,%r14d
	mov    %r14,-0x90(%rbp)
	mov    %r14,%rcx
	xor    %r10d,%ecx
	sub    %r14d,%ecx
	movslq %ecx,%rcx
	movzbl (%rcx,%rax,1),%ecx
	mov    %rcx,-0x128(%rbp)
	jmpq   e97d <F_0_714+0x32ab>
	cmp    $0x2f,%edx
	jle    e712 <F_0_714+0x3040>
	lea    0x38(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    e674 <F_0_714+0x2fa2>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    0x30(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    e693 <F_0_714+0x2fc1>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	lea    0x28(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    e6b2 <F_0_714+0x2fe0>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    0x20(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    e6d1 <F_0_714+0x2fff>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	lea    0x18(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    e6f0 <F_0_714+0x301e>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    -0x30(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %rcx,%rdx
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    e712 <F_0_714+0x3040>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	mov    %rbx,%rcx
	shl    %cl,%rdi
	mov    %rcx,%rbx
	or     %r9,%rdi
	add    %ebx,%edx
	add    $0xfffffff0,%r11d
	cmp    $0xf,%r11d
	jg     e64c <F_0_714+0x2f7a>
	shl    $0x4,%r11d
	mov    -0x128(%rbp),%rcx
	add    %ecx,%r11d
	movslq %r11d,%r11
	movslq (%r8,%r11,4),%r14
	movsbq 0x400(%r8,%r11,1),%r11
	cmp    $0x1f,%edx
	jg     e9f7 <F_0_714+0x3325>
	mov    %rdi,%r15
	shl    %cl,%r12
	lea    -0x1(%r12),%edi
	mov    -0x98(%rbp),%r12
	add    %r12d,%r10d
	and    %r10d,%edi
	movslq %edi,%rdi
	mov    %r11,%r10
	mov    %rcx,%r11
	mov    %r10,%rcx
	shl    %cl,%r15
	mov    %rcx,%r10
	or     %r15,%r14
	mov    %r11,%rcx
	shl    %cl,%r14
	or     %r14,%rdi
	add    %r10d,%edx
	add    %ecx,%edx
	mov    $0x1,%r12d
	xor    %r11d,%r11d
	jmpq   e613 <F_0_714+0x2f41>
	mov    %rcx,%r15
	lea    0x38(%rdx),%ecx
	mov    %rdi,%r8
	shr    %cl,%r8
	mov    %r8b,0x0(%r13)
	lea    0x1(%r13),%rcx
	cmp    $0xff,%r8b
	je     ea1d <F_0_714+0x334b>
	mov    %rcx,%r8
	jmpq   ea24 <F_0_714+0x3352>
	movb   $0x0,(%rcx)
	lea    0x2(%r13),%r8
	lea    0x30(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     ea46 <F_0_714+0x3374>
	mov    %rcx,%r8
	jmpq   ea4d <F_0_714+0x337b>
	movb   $0x0,(%rcx)
	add    $0x2,%r8
	lea    0x28(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     ea6f <F_0_714+0x339d>
	mov    %rcx,%r8
	jmpq   ea76 <F_0_714+0x33a4>
	movb   $0x0,(%rcx)
	add    $0x2,%r8
	lea    -0x20(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %rcx,%rdx
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     eaa8 <F_0_714+0x33d6>
	mov    %rcx,%r13
	mov    %r15,%rcx
	mov    %rdi,%r15
	mov    -0x120(%rbp),%r8
	jmpq   de00 <F_0_714+0x272e>
	movb   $0x0,(%rcx)
	lea    0x2(%r8),%r13
	mov    %r15,%rcx
	mov    %rdi,%r15
	mov    -0x120(%rbp),%r8
	jmpq   dbaa <F_0_714+0x24d8>
	add    $0x1,%r11d
	movswq 0x2c(%rsi),%r10
	test   %r10w,%r10w
	je     eac1 <F_0_714+0x33ef>
	mov    %r10,%r14
	sar    $0x1f,%r14d
	mov    %r14,-0x90(%rbp)
	mov    %r14,%rcx
	xor    %r10d,%ecx
	sub    %r14d,%ecx
	movslq %ecx,%rcx
	movzbl (%rcx,%rax,1),%ecx
	mov    %rcx,-0x128(%rbp)
	jmpq   ebd6 <F_0_714+0x3504>
	cmp    $0x2f,%edx
	jle    e96b <F_0_714+0x3299>
	lea    0x38(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    e8cd <F_0_714+0x31fb>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    0x30(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    e8ec <F_0_714+0x321a>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	lea    0x28(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    e90b <F_0_714+0x3239>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    0x20(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    e92a <F_0_714+0x3258>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	lea    0x18(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    e949 <F_0_714+0x3277>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    -0x30(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %rcx,%rdx
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    e96b <F_0_714+0x3299>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	mov    %rbx,%rcx
	shl    %cl,%rdi
	mov    %rcx,%rbx
	or     %r9,%rdi
	add    %ebx,%edx
	add    $0xfffffff0,%r11d
	cmp    $0xf,%r11d
	jg     e8a5 <F_0_714+0x31d3>
	shl    $0x4,%r11d
	mov    -0x128(%rbp),%rcx
	add    %ecx,%r11d
	movslq %r11d,%r11
	movslq (%r8,%r11,4),%r14
	movsbq 0x400(%r8,%r11,1),%r11
	cmp    $0x1f,%edx
	jg     ec50 <F_0_714+0x357e>
	mov    %rdi,%r15
	shl    %cl,%r12
	lea    -0x1(%r12),%edi
	mov    -0x90(%rbp),%r12
	add    %r12d,%r10d
	and    %r10d,%edi
	movslq %edi,%rdi
	mov    %r11,%r10
	mov    %rcx,%r11
	mov    %r10,%rcx
	shl    %cl,%r15
	mov    %rcx,%r10
	or     %r15,%r14
	mov    %r11,%rcx
	shl    %cl,%r14
	or     %r14,%rdi
	add    %r10d,%edx
	add    %ecx,%edx
	mov    $0x1,%r12d
	xor    %r11d,%r11d
	jmpq   e86c <F_0_714+0x319a>
	mov    %rcx,%r15
	lea    0x38(%rdx),%ecx
	mov    %rdi,%r8
	shr    %cl,%r8
	mov    %r8b,0x0(%r13)
	lea    0x1(%r13),%rcx
	cmp    $0xff,%r8b
	je     ec76 <F_0_714+0x35a4>
	mov    %rcx,%r8
	jmpq   ec7d <F_0_714+0x35ab>
	movb   $0x0,(%rcx)
	lea    0x2(%r13),%r8
	lea    0x30(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     ec9f <F_0_714+0x35cd>
	mov    %rcx,%r8
	jmpq   eca6 <F_0_714+0x35d4>
	movb   $0x0,(%rcx)
	add    $0x2,%r8
	lea    0x28(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     ecc8 <F_0_714+0x35f6>
	mov    %rcx,%r8
	jmpq   eccf <F_0_714+0x35fd>
	movb   $0x0,(%rcx)
	add    $0x2,%r8
	lea    -0x20(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %rcx,%rdx
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     ed01 <F_0_714+0x362f>
	mov    %rcx,%r13
	mov    %r15,%rcx
	mov    %rdi,%r15
	mov    -0x120(%rbp),%r8
	jmpq   e056 <F_0_714+0x2984>
	movb   $0x0,(%rcx)
	lea    0x2(%r8),%r13
	mov    %r15,%rcx
	mov    %rdi,%r15
	mov    -0x120(%rbp),%r8
	jmpq   de00 <F_0_714+0x272e>
	add    $0x1,%r11d
	movswq 0x1e(%rsi),%r10
	test   %r10w,%r10w
	je     ed1a <F_0_714+0x3648>
	mov    %r10,%r14
	sar    $0x1f,%r14d
	mov    %r14,-0x88(%rbp)
	mov    %r14,%rcx
	xor    %r10d,%ecx
	sub    %r14d,%ecx
	movslq %ecx,%rcx
	movzbl (%rcx,%rax,1),%ecx
	mov    %rcx,-0x128(%rbp)
	jmpq   ee2f <F_0_714+0x375d>
	cmp    $0x2f,%edx
	jle    ebc4 <F_0_714+0x34f2>
	lea    0x38(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    eb26 <F_0_714+0x3454>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    0x30(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    eb45 <F_0_714+0x3473>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	lea    0x28(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    eb64 <F_0_714+0x3492>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    0x20(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    eb83 <F_0_714+0x34b1>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	lea    0x18(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    eba2 <F_0_714+0x34d0>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    -0x30(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %rcx,%rdx
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    ebc4 <F_0_714+0x34f2>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	mov    %rbx,%rcx
	shl    %cl,%rdi
	mov    %rcx,%rbx
	or     %r9,%rdi
	add    %ebx,%edx
	add    $0xfffffff0,%r11d
	cmp    $0xf,%r11d
	jg     eafe <F_0_714+0x342c>
	shl    $0x4,%r11d
	mov    -0x128(%rbp),%rcx
	add    %ecx,%r11d
	movslq %r11d,%r11
	movslq (%r8,%r11,4),%r14
	movsbq 0x400(%r8,%r11,1),%r11
	cmp    $0x1f,%edx
	jg     eea6 <F_0_714+0x37d4>
	mov    %rdi,%r15
	shl    %cl,%r12
	lea    -0x1(%r12),%edi
	mov    -0x90(%rbp),%r12
	add    %r12d,%r10d
	and    %r10d,%edi
	movslq %edi,%rdi
	mov    %r11,%r10
	mov    %rcx,%r11
	mov    %r10,%rcx
	shl    %cl,%r15
	mov    %rcx,%r10
	or     %r15,%r14
	mov    %r11,%rcx
	shl    %cl,%r14
	or     %r14,%rdi
	add    %r10d,%edx
	add    %ecx,%edx
	mov    $0x1,%r12d
	xor    %r11d,%r11d
	jmpq   eac5 <F_0_714+0x33f3>
	mov    %rcx,%r15
	lea    0x38(%rdx),%ecx
	mov    %rdi,%r8
	shr    %cl,%r8
	mov    %r8b,0x0(%r13)
	lea    0x1(%r13),%rcx
	cmp    $0xff,%r8b
	je     eecc <F_0_714+0x37fa>
	mov    %rcx,%r8
	jmpq   eed3 <F_0_714+0x3801>
	movb   $0x0,(%rcx)
	lea    0x2(%r13),%r8
	lea    0x30(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     eef5 <F_0_714+0x3823>
	mov    %rcx,%r8
	jmpq   eefc <F_0_714+0x382a>
	movb   $0x0,(%rcx)
	add    $0x2,%r8
	lea    0x28(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     ef1e <F_0_714+0x384c>
	mov    %rcx,%r8
	jmpq   ef25 <F_0_714+0x3853>
	movb   $0x0,(%rcx)
	add    $0x2,%r8
	lea    -0x20(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %rcx,%rdx
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     ef57 <F_0_714+0x3885>
	mov    %rcx,%r13
	mov    %r15,%rcx
	mov    %rdi,%r15
	mov    -0x120(%rbp),%r8
	jmpq   e2ac <F_0_714+0x2bda>
	movb   $0x0,(%rcx)
	lea    0x2(%r8),%r13
	mov    %r15,%rcx
	mov    %rdi,%r15
	mov    -0x120(%rbp),%r8
	jmpq   e056 <F_0_714+0x2984>
	add    $0x1,%r11d
	movswq 0x2e(%rsi),%r10
	test   %r10w,%r10w
	je     ef70 <F_0_714+0x389e>
	mov    %r10,%r14
	sar    $0x1f,%r14d
	mov    %r14,-0x88(%rbp)
	mov    %r14,%rcx
	xor    %r10d,%ecx
	sub    %r14d,%ecx
	movslq %ecx,%rcx
	movzbl (%rcx,%rax,1),%ecx
	mov    %rcx,-0x128(%rbp)
	jmpq   f082 <F_0_714+0x39b0>
	cmp    $0x2f,%edx
	jle    ee1d <F_0_714+0x374b>
	lea    0x38(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    ed7f <F_0_714+0x36ad>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    0x30(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    ed9e <F_0_714+0x36cc>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	lea    0x28(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    edbd <F_0_714+0x36eb>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    0x20(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    eddc <F_0_714+0x370a>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	lea    0x18(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    edfb <F_0_714+0x3729>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    -0x30(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %rcx,%rdx
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    ee1d <F_0_714+0x374b>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	mov    %rbx,%rcx
	shl    %cl,%rdi
	mov    %rcx,%rbx
	or     %r9,%rdi
	add    %ebx,%edx
	add    $0xfffffff0,%r11d
	cmp    $0xf,%r11d
	jg     ed57 <F_0_714+0x3685>
	shl    $0x4,%r11d
	mov    -0x128(%rbp),%rcx
	add    %ecx,%r11d
	movslq %r11d,%r14
	movslq (%r8,%r14,4),%r11
	movsbq 0x400(%r8,%r14,1),%r14
	cmp    $0x1f,%edx
	jg     f0f9 <F_0_714+0x3a27>
	mov    %rdi,%r15
	shl    %cl,%r12
	lea    -0x1(%r12),%edi
	mov    -0x88(%rbp),%r12
	add    %r12d,%r10d
	and    %r10d,%edi
	movslq %edi,%rdi
	mov    %rcx,%r12
	mov    %r14,%rcx
	shl    %cl,%r15
	mov    %rcx,%r10
	or     %r15,%r11
	mov    %r12,%rcx
	shl    %cl,%r11
	or     %r11,%rdi
	add    %r10d,%edx
	add    %ecx,%edx
	mov    $0x1,%r12d
	xor    %r11d,%r11d
	jmpq   ed1e <F_0_714+0x364c>
	mov    %rcx,%r15
	lea    0x38(%rdx),%ecx
	mov    %rdi,%r8
	shr    %cl,%r8
	mov    %r8b,0x0(%r13)
	lea    0x1(%r13),%rcx
	cmp    $0xff,%r8b
	je     f11f <F_0_714+0x3a4d>
	mov    %rcx,%r8
	jmpq   f126 <F_0_714+0x3a54>
	movb   $0x0,(%rcx)
	lea    0x2(%r13),%r8
	lea    0x30(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     f148 <F_0_714+0x3a76>
	mov    %rcx,%r8
	jmpq   f14f <F_0_714+0x3a7d>
	movb   $0x0,(%rcx)
	add    $0x2,%r8
	lea    0x28(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     f171 <F_0_714+0x3a9f>
	mov    %rcx,%r8
	jmpq   f178 <F_0_714+0x3aa6>
	movb   $0x0,(%rcx)
	add    $0x2,%r8
	lea    -0x20(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %rcx,%rdx
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     f1aa <F_0_714+0x3ad8>
	mov    %rcx,%r13
	mov    %r15,%rcx
	mov    %rdi,%r15
	mov    -0x120(%rbp),%r8
	jmpq   e502 <F_0_714+0x2e30>
	movb   $0x0,(%rcx)
	lea    0x2(%r8),%r13
	mov    %r15,%rcx
	mov    %rdi,%r15
	mov    -0x120(%rbp),%r8
	jmpq   e2ac <F_0_714+0x2bda>
	add    $0x1,%r11d
	movswq 0x3c(%rsi),%r10
	test   %r10w,%r10w
	je     f1c3 <F_0_714+0x3af1>
	mov    %r10,%r14
	sar    $0x1f,%r14d
	mov    %r14,-0x80(%rbp)
	mov    %r14,%rcx
	xor    %r10d,%ecx
	sub    %r14d,%ecx
	movslq %ecx,%rcx
	movzbl (%rcx,%rax,1),%ecx
	mov    %rcx,-0x128(%rbp)
	jmpq   f2d5 <F_0_714+0x3c03>
	cmp    $0x2f,%edx
	jle    f070 <F_0_714+0x399e>
	lea    0x38(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    efd2 <F_0_714+0x3900>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    0x30(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    eff1 <F_0_714+0x391f>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	lea    0x28(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    f010 <F_0_714+0x393e>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    0x20(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    f02f <F_0_714+0x395d>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	lea    0x18(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    f04e <F_0_714+0x397c>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    -0x30(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %rcx,%rdx
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    f070 <F_0_714+0x399e>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	mov    %rbx,%rcx
	shl    %cl,%rdi
	mov    %rcx,%rbx
	or     %r9,%rdi
	add    %ebx,%edx
	add    $0xfffffff0,%r11d
	cmp    $0xf,%r11d
	jg     efaa <F_0_714+0x38d8>
	shl    $0x4,%r11d
	mov    -0x128(%rbp),%rcx
	add    %ecx,%r11d
	movslq %r11d,%r14
	movslq (%r8,%r14,4),%r11
	movsbq 0x400(%r8,%r14,1),%r14
	cmp    $0x1f,%edx
	jg     f349 <F_0_714+0x3c77>
	mov    %rdi,%r15
	shl    %cl,%r12
	lea    -0x1(%r12),%edi
	mov    -0x88(%rbp),%r12
	add    %r12d,%r10d
	and    %r10d,%edi
	movslq %edi,%rdi
	mov    %rcx,%r12
	mov    %r14,%rcx
	shl    %cl,%r15
	mov    %rcx,%r10
	or     %r15,%r11
	mov    %r12,%rcx
	shl    %cl,%r11
	or     %r11,%rdi
	add    %r10d,%edx
	add    %ecx,%edx
	mov    $0x1,%r12d
	xor    %r11d,%r11d
	jmpq   ef74 <F_0_714+0x38a2>
	mov    %rcx,%r15
	lea    0x38(%rdx),%ecx
	mov    %rdi,%r8
	shr    %cl,%r8
	mov    %r8b,0x0(%r13)
	lea    0x1(%r13),%rcx
	cmp    $0xff,%r8b
	je     f36f <F_0_714+0x3c9d>
	mov    %rcx,%r8
	jmpq   f376 <F_0_714+0x3ca4>
	movb   $0x0,(%rcx)
	lea    0x2(%r13),%r8
	lea    0x30(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     f398 <F_0_714+0x3cc6>
	mov    %rcx,%r8
	jmpq   f39f <F_0_714+0x3ccd>
	movb   $0x0,(%rcx)
	add    $0x2,%r8
	lea    0x28(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     f3c1 <F_0_714+0x3cef>
	mov    %rcx,%r8
	jmpq   f3c8 <F_0_714+0x3cf6>
	movb   $0x0,(%rcx)
	add    $0x2,%r8
	lea    -0x20(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %rcx,%rdx
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     f3fa <F_0_714+0x3d28>
	mov    %rcx,%r13
	mov    %r15,%rcx
	mov    %rdi,%r15
	mov    -0x120(%rbp),%r8
	jmpq   e758 <F_0_714+0x3086>
	movb   $0x0,(%rcx)
	lea    0x2(%r8),%r13
	mov    %r15,%rcx
	mov    %rdi,%r15
	mov    -0x120(%rbp),%r8
	jmpq   e502 <F_0_714+0x2e30>
	add    $0x1,%r11d
	movswq 0x4a(%rsi),%r10
	test   %r10w,%r10w
	je     f413 <F_0_714+0x3d41>
	mov    %r10,%r14
	sar    $0x1f,%r14d
	mov    %r14,-0x80(%rbp)
	mov    %r14,%rcx
	xor    %r10d,%ecx
	sub    %r14d,%ecx
	movslq %ecx,%rcx
	movzbl (%rcx,%rax,1),%ecx
	mov    %rcx,-0x128(%rbp)
	jmpq   f525 <F_0_714+0x3e53>
	cmp    $0x2f,%edx
	jle    f2c3 <F_0_714+0x3bf1>
	lea    0x38(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    f225 <F_0_714+0x3b53>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    0x30(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    f244 <F_0_714+0x3b72>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	lea    0x28(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    f263 <F_0_714+0x3b91>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    0x20(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    f282 <F_0_714+0x3bb0>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	lea    0x18(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    f2a1 <F_0_714+0x3bcf>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    -0x30(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %rcx,%rdx
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    f2c3 <F_0_714+0x3bf1>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	mov    %rbx,%rcx
	shl    %cl,%rdi
	mov    %rcx,%rbx
	or     %r9,%rdi
	add    %ebx,%edx
	add    $0xfffffff0,%r11d
	cmp    $0xf,%r11d
	jg     f1fd <F_0_714+0x3b2b>
	shl    $0x4,%r11d
	mov    -0x128(%rbp),%rcx
	add    %ecx,%r11d
	movslq %r11d,%r14
	movslq (%r8,%r14,4),%r11
	movsbq 0x400(%r8,%r14,1),%r14
	cmp    $0x1f,%edx
	jg     f599 <F_0_714+0x3ec7>
	mov    %rdi,%r15
	shl    %cl,%r12
	lea    -0x1(%r12),%edi
	mov    -0x80(%rbp),%r12
	add    %r12d,%r10d
	and    %r10d,%edi
	movslq %edi,%rdi
	mov    %rcx,%r12
	mov    %r14,%rcx
	shl    %cl,%r15
	mov    %rcx,%r10
	or     %r15,%r11
	mov    %r12,%rcx
	shl    %cl,%r11
	or     %r11,%rdi
	add    %r10d,%edx
	add    %ecx,%edx
	mov    $0x1,%r12d
	xor    %r11d,%r11d
	jmpq   f1c7 <F_0_714+0x3af5>
	mov    %rcx,%r15
	lea    0x38(%rdx),%ecx
	mov    %rdi,%r8
	shr    %cl,%r8
	mov    %r8b,0x0(%r13)
	lea    0x1(%r13),%rcx
	cmp    $0xff,%r8b
	je     f5bf <F_0_714+0x3eed>
	mov    %rcx,%r8
	jmpq   f5c6 <F_0_714+0x3ef4>
	movb   $0x0,(%rcx)
	lea    0x2(%r13),%r8
	lea    0x30(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     f5e8 <F_0_714+0x3f16>
	mov    %rcx,%r8
	jmpq   f5ef <F_0_714+0x3f1d>
	movb   $0x0,(%rcx)
	add    $0x2,%r8
	lea    0x28(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     f611 <F_0_714+0x3f3f>
	mov    %rcx,%r8
	jmpq   f618 <F_0_714+0x3f46>
	movb   $0x0,(%rcx)
	add    $0x2,%r8
	lea    -0x20(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %rcx,%rdx
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     f64a <F_0_714+0x3f78>
	mov    %rcx,%r13
	mov    %r15,%rcx
	mov    %rdi,%r15
	mov    -0x120(%rbp),%r8
	jmpq   e9b1 <F_0_714+0x32df>
	movb   $0x0,(%rcx)
	lea    0x2(%r8),%r13
	mov    %r15,%rcx
	mov    %rdi,%r15
	mov    -0x120(%rbp),%r8
	jmpq   e758 <F_0_714+0x3086>
	add    $0x1,%r11d
	movswq 0x58(%rsi),%r10
	test   %r10w,%r10w
	je     f663 <F_0_714+0x3f91>
	mov    %r10,%r14
	sar    $0x1f,%r14d
	mov    %r14,-0x78(%rbp)
	mov    %r14,%rcx
	xor    %r10d,%ecx
	sub    %r14d,%ecx
	movslq %ecx,%rcx
	movzbl (%rcx,%rax,1),%ecx
	mov    %rcx,-0x128(%rbp)
	jmpq   f775 <F_0_714+0x40a3>
	cmp    $0x2f,%edx
	jle    f513 <F_0_714+0x3e41>
	lea    0x38(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    f475 <F_0_714+0x3da3>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    0x30(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    f494 <F_0_714+0x3dc2>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	lea    0x28(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    f4b3 <F_0_714+0x3de1>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    0x20(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    f4d2 <F_0_714+0x3e00>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	lea    0x18(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    f4f1 <F_0_714+0x3e1f>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    -0x30(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %rcx,%rdx
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    f513 <F_0_714+0x3e41>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	mov    %rbx,%rcx
	shl    %cl,%rdi
	mov    %rcx,%rbx
	or     %r9,%rdi
	add    %ebx,%edx
	add    $0xfffffff0,%r11d
	cmp    $0xf,%r11d
	jg     f44d <F_0_714+0x3d7b>
	shl    $0x4,%r11d
	mov    -0x128(%rbp),%rcx
	add    %ecx,%r11d
	movslq %r11d,%r14
	movslq (%r8,%r14,4),%r11
	movsbq 0x400(%r8,%r14,1),%r14
	cmp    $0x1f,%edx
	jg     f7e9 <F_0_714+0x4117>
	mov    %rdi,%r15
	shl    %cl,%r12
	lea    -0x1(%r12),%edi
	mov    -0x80(%rbp),%r12
	add    %r12d,%r10d
	and    %r10d,%edi
	movslq %edi,%rdi
	mov    %rcx,%r12
	mov    %r14,%rcx
	shl    %cl,%r15
	mov    %rcx,%r10
	or     %r15,%r11
	mov    %r12,%rcx
	shl    %cl,%r11
	or     %r11,%rdi
	add    %r10d,%edx
	add    %ecx,%edx
	mov    $0x1,%r12d
	xor    %r11d,%r11d
	jmpq   f417 <F_0_714+0x3d45>
	mov    %rcx,%r15
	lea    0x38(%rdx),%ecx
	mov    %rdi,%r8
	shr    %cl,%r8
	mov    %r8b,0x0(%r13)
	lea    0x1(%r13),%rcx
	cmp    $0xff,%r8b
	je     f80f <F_0_714+0x413d>
	mov    %rcx,%r8
	jmpq   f816 <F_0_714+0x4144>
	movb   $0x0,(%rcx)
	lea    0x2(%r13),%r8
	lea    0x30(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     f838 <F_0_714+0x4166>
	mov    %rcx,%r8
	jmpq   f83f <F_0_714+0x416d>
	movb   $0x0,(%rcx)
	add    $0x2,%r8
	lea    0x28(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     f861 <F_0_714+0x418f>
	mov    %rcx,%r8
	jmpq   f868 <F_0_714+0x4196>
	movb   $0x0,(%rcx)
	add    $0x2,%r8
	lea    -0x20(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %rcx,%rdx
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     f89a <F_0_714+0x41c8>
	mov    %rcx,%r13
	mov    %r15,%rcx
	mov    %rdi,%r15
	mov    -0x120(%rbp),%r8
	jmpq   ec0a <F_0_714+0x3538>
	movb   $0x0,(%rcx)
	lea    0x2(%r8),%r13
	mov    %r15,%rcx
	mov    %rdi,%r15
	mov    -0x120(%rbp),%r8
	jmpq   e9b1 <F_0_714+0x32df>
	add    $0x1,%r11d
	movswq 0x66(%rsi),%r10
	test   %r10w,%r10w
	je     f8b3 <F_0_714+0x41e1>
	mov    %r10,%r14
	sar    $0x1f,%r14d
	mov    %r14,-0x78(%rbp)
	mov    %r14,%rcx
	xor    %r10d,%ecx
	sub    %r14d,%ecx
	movslq %ecx,%rcx
	movzbl (%rcx,%rax,1),%ecx
	mov    %rcx,-0x128(%rbp)
	jmpq   f9c5 <F_0_714+0x42f3>
	cmp    $0x2f,%edx
	jle    f763 <F_0_714+0x4091>
	lea    0x38(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    f6c5 <F_0_714+0x3ff3>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    0x30(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    f6e4 <F_0_714+0x4012>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	lea    0x28(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    f703 <F_0_714+0x4031>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    0x20(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    f722 <F_0_714+0x4050>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	lea    0x18(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    f741 <F_0_714+0x406f>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    -0x30(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %rcx,%rdx
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    f763 <F_0_714+0x4091>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	mov    %rbx,%rcx
	shl    %cl,%rdi
	mov    %rcx,%rbx
	or     %r9,%rdi
	add    %ebx,%edx
	add    $0xfffffff0,%r11d
	cmp    $0xf,%r11d
	jg     f69d <F_0_714+0x3fcb>
	shl    $0x4,%r11d
	mov    -0x128(%rbp),%rcx
	add    %ecx,%r11d
	movslq %r11d,%r14
	movslq (%r8,%r14,4),%r11
	movsbq 0x400(%r8,%r14,1),%r14
	cmp    $0x1f,%edx
	jg     fa39 <F_0_714+0x4367>
	mov    %rdi,%r15
	shl    %cl,%r12
	lea    -0x1(%r12),%edi
	mov    -0x78(%rbp),%r12
	add    %r12d,%r10d
	and    %r10d,%edi
	movslq %edi,%rdi
	mov    %rcx,%r12
	mov    %r14,%rcx
	shl    %cl,%r15
	mov    %rcx,%r10
	or     %r15,%r11
	mov    %r12,%rcx
	shl    %cl,%r11
	or     %r11,%rdi
	add    %r10d,%edx
	add    %ecx,%edx
	mov    $0x1,%r12d
	xor    %r11d,%r11d
	jmpq   f667 <F_0_714+0x3f95>
	mov    %rcx,%r15
	lea    0x38(%rdx),%ecx
	mov    %rdi,%r8
	shr    %cl,%r8
	mov    %r8b,0x0(%r13)
	lea    0x1(%r13),%rcx
	cmp    $0xff,%r8b
	je     fa5f <F_0_714+0x438d>
	mov    %rcx,%r8
	jmpq   fa66 <F_0_714+0x4394>
	movb   $0x0,(%rcx)
	lea    0x2(%r13),%r8
	lea    0x30(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     fa88 <F_0_714+0x43b6>
	mov    %rcx,%r8
	jmpq   fa8f <F_0_714+0x43bd>
	movb   $0x0,(%rcx)
	add    $0x2,%r8
	lea    0x28(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     fab1 <F_0_714+0x43df>
	mov    %rcx,%r8
	jmpq   fab8 <F_0_714+0x43e6>
	movb   $0x0,(%rcx)
	add    $0x2,%r8
	lea    -0x20(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %rcx,%rdx
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     faea <F_0_714+0x4418>
	mov    %rcx,%r13
	mov    %r15,%rcx
	mov    %rdi,%r15
	mov    -0x120(%rbp),%r8
	jmpq   ee63 <F_0_714+0x3791>
	movb   $0x0,(%rcx)
	lea    0x2(%r8),%r13
	mov    %r15,%rcx
	mov    %rdi,%r15
	mov    -0x120(%rbp),%r8
	jmpq   ec0a <F_0_714+0x3538>
	add    $0x1,%r11d
	movswq 0x74(%rsi),%r10
	test   %r10w,%r10w
	je     fb03 <F_0_714+0x4431>
	mov    %r10,%r14
	sar    $0x1f,%r14d
	mov    %r14,-0x70(%rbp)
	mov    %r14,%rcx
	xor    %r10d,%ecx
	sub    %r14d,%ecx
	movslq %ecx,%rcx
	movzbl (%rcx,%rax,1),%ecx
	mov    %rcx,-0x128(%rbp)
	jmpq   fc15 <F_0_714+0x4543>
	cmp    $0x2f,%edx
	jle    f9b3 <F_0_714+0x42e1>
	lea    0x38(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    f915 <F_0_714+0x4243>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    0x30(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    f934 <F_0_714+0x4262>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	lea    0x28(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    f953 <F_0_714+0x4281>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    0x20(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    f972 <F_0_714+0x42a0>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	lea    0x18(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    f991 <F_0_714+0x42bf>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    -0x30(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %rcx,%rdx
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    f9b3 <F_0_714+0x42e1>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	mov    %rbx,%rcx
	shl    %cl,%rdi
	mov    %rcx,%rbx
	or     %r9,%rdi
	add    %ebx,%edx
	add    $0xfffffff0,%r11d
	cmp    $0xf,%r11d
	jg     f8ed <F_0_714+0x421b>
	shl    $0x4,%r11d
	mov    -0x128(%rbp),%rcx
	add    %ecx,%r11d
	movslq %r11d,%r14
	movslq (%r8,%r14,4),%r11
	movsbq 0x400(%r8,%r14,1),%r14
	cmp    $0x1f,%edx
	jg     fc89 <F_0_714+0x45b7>
	mov    %rdi,%r15
	shl    %cl,%r12
	lea    -0x1(%r12),%edi
	mov    -0x78(%rbp),%r12
	add    %r12d,%r10d
	and    %r10d,%edi
	movslq %edi,%rdi
	mov    %rcx,%r12
	mov    %r14,%rcx
	shl    %cl,%r15
	mov    %rcx,%r10
	or     %r15,%r11
	mov    %r12,%rcx
	shl    %cl,%r11
	or     %r11,%rdi
	add    %r10d,%edx
	add    %ecx,%edx
	mov    $0x1,%r12d
	xor    %r11d,%r11d
	jmpq   f8b7 <F_0_714+0x41e5>
	mov    %rcx,%r15
	lea    0x38(%rdx),%ecx
	mov    %rdi,%r8
	shr    %cl,%r8
	mov    %r8b,0x0(%r13)
	lea    0x1(%r13),%rcx
	cmp    $0xff,%r8b
	je     fcaf <F_0_714+0x45dd>
	mov    %rcx,%r8
	jmpq   fcb6 <F_0_714+0x45e4>
	movb   $0x0,(%rcx)
	lea    0x2(%r13),%r8
	lea    0x30(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     fcd8 <F_0_714+0x4606>
	mov    %rcx,%r8
	jmpq   fcdf <F_0_714+0x460d>
	movb   $0x0,(%rcx)
	add    $0x2,%r8
	lea    0x28(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     fd01 <F_0_714+0x462f>
	mov    %rcx,%r8
	jmpq   fd08 <F_0_714+0x4636>
	movb   $0x0,(%rcx)
	add    $0x2,%r8
	lea    -0x20(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %rcx,%rdx
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     fd3a <F_0_714+0x4668>
	mov    %rcx,%r13
	mov    %r15,%rcx
	mov    %rdi,%r15
	mov    -0x120(%rbp),%r8
	jmpq   f0b6 <F_0_714+0x39e4>
	movb   $0x0,(%rcx)
	lea    0x2(%r8),%r13
	mov    %r15,%rcx
	mov    %rdi,%r15
	mov    -0x120(%rbp),%r8
	jmpq   ee63 <F_0_714+0x3791>
	add    $0x1,%r11d
	movswq 0x76(%rsi),%r10
	test   %r10w,%r10w
	je     fd53 <F_0_714+0x4681>
	mov    %r10,%r14
	sar    $0x1f,%r14d
	mov    %r14,-0x70(%rbp)
	mov    %r14,%rcx
	xor    %r10d,%ecx
	sub    %r14d,%ecx
	movslq %ecx,%rcx
	movzbl (%rcx,%rax,1),%ecx
	mov    %rcx,-0x128(%rbp)
	jmpq   fe65 <F_0_714+0x4793>
	cmp    $0x2f,%edx
	jle    fc03 <F_0_714+0x4531>
	lea    0x38(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    fb65 <F_0_714+0x4493>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    0x30(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    fb84 <F_0_714+0x44b2>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	lea    0x28(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    fba3 <F_0_714+0x44d1>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    0x20(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    fbc2 <F_0_714+0x44f0>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	lea    0x18(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    fbe1 <F_0_714+0x450f>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    -0x30(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %rcx,%rdx
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    fc03 <F_0_714+0x4531>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	mov    %rbx,%rcx
	shl    %cl,%rdi
	mov    %rcx,%rbx
	or     %r9,%rdi
	add    %ebx,%edx
	add    $0xfffffff0,%r11d
	cmp    $0xf,%r11d
	jg     fb3d <F_0_714+0x446b>
	shl    $0x4,%r11d
	mov    -0x128(%rbp),%rcx
	add    %ecx,%r11d
	movslq %r11d,%r14
	movslq (%r8,%r14,4),%r11
	movsbq 0x400(%r8,%r14,1),%r14
	cmp    $0x1f,%edx
	jg     fed9 <F_0_714+0x4807>
	mov    %rdi,%r15
	shl    %cl,%r12
	lea    -0x1(%r12),%edi
	mov    -0x70(%rbp),%r12
	add    %r12d,%r10d
	and    %r10d,%edi
	movslq %edi,%rdi
	mov    %rcx,%r12
	mov    %r14,%rcx
	shl    %cl,%r15
	mov    %rcx,%r10
	or     %r15,%r11
	mov    %r12,%rcx
	shl    %cl,%r11
	or     %r11,%rdi
	add    %r10d,%edx
	add    %ecx,%edx
	mov    $0x1,%r12d
	xor    %r11d,%r11d
	jmpq   fb07 <F_0_714+0x4435>
	mov    %rcx,%r15
	lea    0x38(%rdx),%ecx
	mov    %rdi,%r8
	shr    %cl,%r8
	mov    %r8b,0x0(%r13)
	lea    0x1(%r13),%rcx
	cmp    $0xff,%r8b
	je     feff <F_0_714+0x482d>
	mov    %rcx,%r8
	jmpq   ff06 <F_0_714+0x4834>
	movb   $0x0,(%rcx)
	lea    0x2(%r13),%r8
	lea    0x30(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     ff28 <F_0_714+0x4856>
	mov    %rcx,%r8
	jmpq   ff2f <F_0_714+0x485d>
	movb   $0x0,(%rcx)
	add    $0x2,%r8
	lea    0x28(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     ff51 <F_0_714+0x487f>
	mov    %rcx,%r8
	jmpq   ff58 <F_0_714+0x4886>
	movb   $0x0,(%rcx)
	add    $0x2,%r8
	lea    -0x20(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %rcx,%rdx
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     ff8a <F_0_714+0x48b8>
	mov    %rcx,%r13
	mov    %r15,%rcx
	mov    %rdi,%r15
	mov    -0x120(%rbp),%r8
	jmpq   f309 <F_0_714+0x3c37>
	movb   $0x0,(%rcx)
	lea    0x2(%r8),%r13
	mov    %r15,%rcx
	mov    %rdi,%r15
	mov    -0x120(%rbp),%r8
	jmpq   f0b6 <F_0_714+0x39e4>
	add    $0x1,%r11d
	movswq 0x68(%rsi),%r10
	test   %r10w,%r10w
	je     ffa3 <F_0_714+0x48d1>
	mov    %r10,%r14
	sar    $0x1f,%r14d
	mov    %r14,-0x68(%rbp)
	mov    %r14,%rcx
	xor    %r10d,%ecx
	sub    %r14d,%ecx
	movslq %ecx,%rcx
	movzbl (%rcx,%rax,1),%ecx
	mov    %rcx,-0x128(%rbp)
	jmpq   100b5 <F_0_714+0x49e3>
	cmp    $0x2f,%edx
	jle    fe53 <F_0_714+0x4781>
	lea    0x38(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    fdb5 <F_0_714+0x46e3>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    0x30(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    fdd4 <F_0_714+0x4702>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	lea    0x28(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    fdf3 <F_0_714+0x4721>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    0x20(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    fe12 <F_0_714+0x4740>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	lea    0x18(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    fe31 <F_0_714+0x475f>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    -0x30(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %rcx,%rdx
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    fe53 <F_0_714+0x4781>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	mov    %rbx,%rcx
	shl    %cl,%rdi
	mov    %rcx,%rbx
	or     %r9,%rdi
	add    %ebx,%edx
	add    $0xfffffff0,%r11d
	cmp    $0xf,%r11d
	jg     fd8d <F_0_714+0x46bb>
	shl    $0x4,%r11d
	mov    -0x128(%rbp),%rcx
	add    %ecx,%r11d
	movslq %r11d,%r14
	movslq (%r8,%r14,4),%r11
	movsbq 0x400(%r8,%r14,1),%r14
	cmp    $0x1f,%edx
	jg     10129 <F_0_714+0x4a57>
	mov    %rdi,%r15
	shl    %cl,%r12
	lea    -0x1(%r12),%edi
	mov    -0x70(%rbp),%r12
	add    %r12d,%r10d
	and    %r10d,%edi
	movslq %edi,%rdi
	mov    %rcx,%r12
	mov    %r14,%rcx
	shl    %cl,%r15
	mov    %rcx,%r10
	or     %r15,%r11
	mov    %r12,%rcx
	shl    %cl,%r11
	or     %r11,%rdi
	add    %r10d,%edx
	add    %ecx,%edx
	mov    $0x1,%r12d
	xor    %r11d,%r11d
	jmpq   fd57 <F_0_714+0x4685>
	mov    %rcx,%r15
	lea    0x38(%rdx),%ecx
	mov    %rdi,%r8
	shr    %cl,%r8
	mov    %r8b,0x0(%r13)
	lea    0x1(%r13),%rcx
	cmp    $0xff,%r8b
	je     1014f <F_0_714+0x4a7d>
	mov    %rcx,%r8
	jmpq   10156 <F_0_714+0x4a84>
	movb   $0x0,(%rcx)
	lea    0x2(%r13),%r8
	lea    0x30(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     10178 <F_0_714+0x4aa6>
	mov    %rcx,%r8
	jmpq   1017f <F_0_714+0x4aad>
	movb   $0x0,(%rcx)
	add    $0x2,%r8
	lea    0x28(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     101a1 <F_0_714+0x4acf>
	mov    %rcx,%r8
	jmpq   101a8 <F_0_714+0x4ad6>
	movb   $0x0,(%rcx)
	add    $0x2,%r8
	lea    -0x20(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %rcx,%rdx
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     101da <F_0_714+0x4b08>
	mov    %rcx,%r13
	mov    %r15,%rcx
	mov    %rdi,%r15
	mov    -0x120(%rbp),%r8
	jmpq   f559 <F_0_714+0x3e87>
	movb   $0x0,(%rcx)
	lea    0x2(%r8),%r13
	mov    %r15,%rcx
	mov    %rdi,%r15
	mov    -0x120(%rbp),%r8
	jmpq   f309 <F_0_714+0x3c37>
	add    $0x1,%r11d
	movswq 0x5a(%rsi),%r10
	test   %r10w,%r10w
	je     101f3 <F_0_714+0x4b21>
	mov    %r10,%r14
	sar    $0x1f,%r14d
	mov    %r14,-0x68(%rbp)
	mov    %r14,%rcx
	xor    %r10d,%ecx
	sub    %r14d,%ecx
	movslq %ecx,%rcx
	movzbl (%rcx,%rax,1),%ecx
	mov    %rcx,-0x128(%rbp)
	jmpq   10305 <F_0_714+0x4c33>
	cmp    $0x2f,%edx
	jle    100a3 <F_0_714+0x49d1>
	lea    0x38(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    10005 <F_0_714+0x4933>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    0x30(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    10024 <F_0_714+0x4952>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	lea    0x28(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    10043 <F_0_714+0x4971>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    0x20(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    10062 <F_0_714+0x4990>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	lea    0x18(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    10081 <F_0_714+0x49af>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    -0x30(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %rcx,%rdx
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    100a3 <F_0_714+0x49d1>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	mov    %rbx,%rcx
	shl    %cl,%rdi
	mov    %rcx,%rbx
	or     %r9,%rdi
	add    %ebx,%edx
	add    $0xfffffff0,%r11d
	cmp    $0xf,%r11d
	jg     ffdd <F_0_714+0x490b>
	shl    $0x4,%r11d
	mov    -0x128(%rbp),%rcx
	add    %ecx,%r11d
	movslq %r11d,%r14
	movslq (%r8,%r14,4),%r11
	movsbq 0x400(%r8,%r14,1),%r14
	cmp    $0x1f,%edx
	jg     10379 <F_0_714+0x4ca7>
	mov    %rdi,%r15
	shl    %cl,%r12
	lea    -0x1(%r12),%edi
	mov    -0x68(%rbp),%r12
	add    %r12d,%r10d
	and    %r10d,%edi
	movslq %edi,%rdi
	mov    %rcx,%r12
	mov    %r14,%rcx
	shl    %cl,%r15
	mov    %rcx,%r10
	or     %r15,%r11
	mov    %r12,%rcx
	shl    %cl,%r11
	or     %r11,%rdi
	add    %r10d,%edx
	add    %ecx,%edx
	mov    $0x1,%r12d
	xor    %r11d,%r11d
	jmpq   ffa7 <F_0_714+0x48d5>
	mov    %rcx,%r15
	lea    0x38(%rdx),%ecx
	mov    %rdi,%r8
	shr    %cl,%r8
	mov    %r8b,0x0(%r13)
	lea    0x1(%r13),%rcx
	cmp    $0xff,%r8b
	je     1039f <F_0_714+0x4ccd>
	mov    %rcx,%r8
	jmpq   103a6 <F_0_714+0x4cd4>
	movb   $0x0,(%rcx)
	lea    0x2(%r13),%r8
	lea    0x30(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     103c8 <F_0_714+0x4cf6>
	mov    %rcx,%r8
	jmpq   103cf <F_0_714+0x4cfd>
	movb   $0x0,(%rcx)
	add    $0x2,%r8
	lea    0x28(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     103f1 <F_0_714+0x4d1f>
	mov    %rcx,%r8
	jmpq   103f8 <F_0_714+0x4d26>
	movb   $0x0,(%rcx)
	add    $0x2,%r8
	lea    -0x20(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %rcx,%rdx
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     1042a <F_0_714+0x4d58>
	mov    %rcx,%r13
	mov    %r15,%rcx
	mov    %rdi,%r15
	mov    -0x120(%rbp),%r8
	jmpq   f7a9 <F_0_714+0x40d7>
	movb   $0x0,(%rcx)
	lea    0x2(%r8),%r13
	mov    %r15,%rcx
	mov    %rdi,%r15
	mov    -0x120(%rbp),%r8
	jmpq   f559 <F_0_714+0x3e87>
	add    $0x1,%r11d
	movswq 0x4c(%rsi),%r10
	test   %r10w,%r10w
	je     10443 <F_0_714+0x4d71>
	mov    %r10,%r14
	sar    $0x1f,%r14d
	mov    %r14,-0x60(%rbp)
	mov    %r14,%rcx
	xor    %r10d,%ecx
	sub    %r14d,%ecx
	movslq %ecx,%rcx
	movzbl (%rcx,%rax,1),%ecx
	mov    %rcx,-0x128(%rbp)
	jmpq   10555 <F_0_714+0x4e83>
	cmp    $0x2f,%edx
	jle    102f3 <F_0_714+0x4c21>
	lea    0x38(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    10255 <F_0_714+0x4b83>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    0x30(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    10274 <F_0_714+0x4ba2>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	lea    0x28(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    10293 <F_0_714+0x4bc1>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    0x20(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    102b2 <F_0_714+0x4be0>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	lea    0x18(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    102d1 <F_0_714+0x4bff>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    -0x30(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %rcx,%rdx
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    102f3 <F_0_714+0x4c21>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	mov    %rbx,%rcx
	shl    %cl,%rdi
	mov    %rcx,%rbx
	or     %r9,%rdi
	add    %ebx,%edx
	add    $0xfffffff0,%r11d
	cmp    $0xf,%r11d
	jg     1022d <F_0_714+0x4b5b>
	shl    $0x4,%r11d
	mov    -0x128(%rbp),%rcx
	add    %ecx,%r11d
	movslq %r11d,%r14
	movslq (%r8,%r14,4),%r11
	movsbq 0x400(%r8,%r14,1),%r14
	cmp    $0x1f,%edx
	jg     105c9 <F_0_714+0x4ef7>
	mov    %rdi,%r15
	shl    %cl,%r12
	lea    -0x1(%r12),%edi
	mov    -0x68(%rbp),%r12
	add    %r12d,%r10d
	and    %r10d,%edi
	movslq %edi,%rdi
	mov    %rcx,%r12
	mov    %r14,%rcx
	shl    %cl,%r15
	mov    %rcx,%r10
	or     %r15,%r11
	mov    %r12,%rcx
	shl    %cl,%r11
	or     %r11,%rdi
	add    %r10d,%edx
	add    %ecx,%edx
	mov    $0x1,%r12d
	xor    %r11d,%r11d
	jmpq   101f7 <F_0_714+0x4b25>
	mov    %rcx,%r15
	lea    0x38(%rdx),%ecx
	mov    %rdi,%r8
	shr    %cl,%r8
	mov    %r8b,0x0(%r13)
	lea    0x1(%r13),%rcx
	cmp    $0xff,%r8b
	je     105ef <F_0_714+0x4f1d>
	mov    %rcx,%r8
	jmpq   105f6 <F_0_714+0x4f24>
	movb   $0x0,(%rcx)
	lea    0x2(%r13),%r8
	lea    0x30(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     10618 <F_0_714+0x4f46>
	mov    %rcx,%r8
	jmpq   1061f <F_0_714+0x4f4d>
	movb   $0x0,(%rcx)
	add    $0x2,%r8
	lea    0x28(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     10641 <F_0_714+0x4f6f>
	mov    %rcx,%r8
	jmpq   10648 <F_0_714+0x4f76>
	movb   $0x0,(%rcx)
	add    $0x2,%r8
	lea    -0x20(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %rcx,%rdx
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     1067a <F_0_714+0x4fa8>
	mov    %rcx,%r13
	mov    %r15,%rcx
	mov    %rdi,%r15
	mov    -0x120(%rbp),%r8
	jmpq   f9f9 <F_0_714+0x4327>
	movb   $0x0,(%rcx)
	lea    0x2(%r8),%r13
	mov    %r15,%rcx
	mov    %rdi,%r15
	mov    -0x120(%rbp),%r8
	jmpq   f7a9 <F_0_714+0x40d7>
	add    $0x1,%r11d
	movswq 0x3e(%rsi),%r10
	test   %r10w,%r10w
	je     10693 <F_0_714+0x4fc1>
	mov    %r10,%r14
	sar    $0x1f,%r14d
	mov    %r14,-0x60(%rbp)
	mov    %r14,%rcx
	xor    %r10d,%ecx
	sub    %r14d,%ecx
	movslq %ecx,%rcx
	movzbl (%rcx,%rax,1),%ecx
	mov    %rcx,-0x128(%rbp)
	jmpq   107a8 <F_0_714+0x50d6>
	cmp    $0x2f,%edx
	jle    10543 <F_0_714+0x4e71>
	lea    0x38(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    104a5 <F_0_714+0x4dd3>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    0x30(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    104c4 <F_0_714+0x4df2>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	lea    0x28(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    104e3 <F_0_714+0x4e11>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    0x20(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    10502 <F_0_714+0x4e30>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	lea    0x18(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    10521 <F_0_714+0x4e4f>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    -0x30(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %rcx,%rdx
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    10543 <F_0_714+0x4e71>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	mov    %rbx,%rcx
	shl    %cl,%rdi
	mov    %rcx,%rbx
	or     %r9,%rdi
	add    %ebx,%edx
	add    $0xfffffff0,%r11d
	cmp    $0xf,%r11d
	jg     1047d <F_0_714+0x4dab>
	shl    $0x4,%r11d
	mov    -0x128(%rbp),%rcx
	add    %ecx,%r11d
	movslq %r11d,%r14
	movslq (%r8,%r14,4),%r11
	movsbq 0x400(%r8,%r14,1),%r14
	cmp    $0x1f,%edx
	jg     1081c <F_0_714+0x514a>
	mov    %rdi,%r15
	shl    %cl,%r12
	lea    -0x1(%r12),%edi
	mov    -0x60(%rbp),%r12
	add    %r12d,%r10d
	and    %r10d,%edi
	movslq %edi,%rdi
	mov    %rcx,%r12
	mov    %r14,%rcx
	shl    %cl,%r15
	mov    %rcx,%r10
	or     %r15,%r11
	mov    %r12,%rcx
	shl    %cl,%r11
	or     %r11,%rdi
	add    %r10d,%edx
	add    %ecx,%edx
	mov    $0x1,%r12d
	xor    %r11d,%r11d
	jmpq   10447 <F_0_714+0x4d75>
	mov    %rcx,%r15
	lea    0x38(%rdx),%ecx
	mov    %rdi,%r8
	shr    %cl,%r8
	mov    %r8b,0x0(%r13)
	lea    0x1(%r13),%rcx
	cmp    $0xff,%r8b
	je     10842 <F_0_714+0x5170>
	mov    %rcx,%r8
	jmpq   10849 <F_0_714+0x5177>
	movb   $0x0,(%rcx)
	lea    0x2(%r13),%r8
	lea    0x30(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     1086b <F_0_714+0x5199>
	mov    %rcx,%r8
	jmpq   10872 <F_0_714+0x51a0>
	movb   $0x0,(%rcx)
	add    $0x2,%r8
	lea    0x28(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     10894 <F_0_714+0x51c2>
	mov    %rcx,%r8
	jmpq   1089b <F_0_714+0x51c9>
	movb   $0x0,(%rcx)
	add    $0x2,%r8
	lea    -0x20(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %rcx,%rdx
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     108cd <F_0_714+0x51fb>
	mov    %rcx,%r13
	mov    %r15,%rcx
	mov    %rdi,%r15
	mov    -0x120(%rbp),%r8
	jmpq   fc49 <F_0_714+0x4577>
	movb   $0x0,(%rcx)
	lea    0x2(%r8),%r13
	mov    %r15,%rcx
	mov    %rdi,%r15
	mov    -0x120(%rbp),%r8
	jmpq   f9f9 <F_0_714+0x4327>
	add    $0x1,%r11d
	movswq 0x4e(%rsi),%r10
	test   %r10w,%r10w
	je     108e6 <F_0_714+0x5214>
	mov    %r10,%r14
	sar    $0x1f,%r14d
	mov    %r14,-0x120(%rbp)
	mov    %r14,%rcx
	xor    %r10d,%ecx
	sub    %r14d,%ecx
	movslq %ecx,%rcx
	movzbl (%rcx,%rax,1),%ecx
	mov    %rcx,-0x128(%rbp)
	jmpq   109fc <F_0_714+0x532a>
	cmp    $0x2f,%edx
	jle    10796 <F_0_714+0x50c4>
	lea    0x38(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    106f8 <F_0_714+0x5026>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    0x30(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    10717 <F_0_714+0x5045>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	lea    0x28(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    10736 <F_0_714+0x5064>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    0x20(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    10755 <F_0_714+0x5083>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	lea    0x18(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    10774 <F_0_714+0x50a2>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    -0x30(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %rcx,%rdx
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    10796 <F_0_714+0x50c4>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	mov    %rbx,%rcx
	shl    %cl,%rdi
	mov    %rcx,%rbx
	or     %r9,%rdi
	add    %ebx,%edx
	add    $0xfffffff0,%r11d
	cmp    $0xf,%r11d
	jg     106d0 <F_0_714+0x4ffe>
	shl    $0x4,%r11d
	mov    -0x128(%rbp),%rcx
	add    %ecx,%r11d
	movslq %r11d,%r14
	movslq (%r8,%r14,4),%r11
	movsbq 0x400(%r8,%r14,1),%r14
	cmp    $0x1f,%edx
	jg     10a73 <F_0_714+0x53a1>
	mov    %rdi,%r15
	shl    %cl,%r12
	lea    -0x1(%r12),%edi
	mov    -0x60(%rbp),%r12
	add    %r12d,%r10d
	and    %r10d,%edi
	movslq %edi,%rdi
	mov    %rcx,%r12
	mov    %r14,%rcx
	shl    %cl,%r15
	mov    %rcx,%r10
	or     %r15,%r11
	mov    %r12,%rcx
	shl    %cl,%r11
	or     %r11,%rdi
	add    %r10d,%edx
	add    %ecx,%edx
	mov    $0x1,%r12d
	xor    %r11d,%r11d
	jmpq   10697 <F_0_714+0x4fc5>
	mov    %rcx,%r15
	lea    0x38(%rdx),%ecx
	mov    %rdi,%r8
	shr    %cl,%r8
	mov    %r8b,0x0(%r13)
	lea    0x1(%r13),%rcx
	cmp    $0xff,%r8b
	je     10a99 <F_0_714+0x53c7>
	mov    %rcx,%r8
	jmpq   10aa0 <F_0_714+0x53ce>
	movb   $0x0,(%rcx)
	lea    0x2(%r13),%r8
	lea    0x30(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     10ac2 <F_0_714+0x53f0>
	mov    %rcx,%r8
	jmpq   10ac9 <F_0_714+0x53f7>
	movb   $0x0,(%rcx)
	add    $0x2,%r8
	lea    0x28(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     10aeb <F_0_714+0x5419>
	mov    %rcx,%r8
	jmpq   10af2 <F_0_714+0x5420>
	movb   $0x0,(%rcx)
	add    $0x2,%r8
	lea    -0x20(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %rcx,%rdx
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     10b24 <F_0_714+0x5452>
	mov    %rcx,%r13
	mov    %r15,%rcx
	mov    %rdi,%r15
	mov    -0x120(%rbp),%r8
	jmpq   fe99 <F_0_714+0x47c7>
	movb   $0x0,(%rcx)
	lea    0x2(%r8),%r13
	mov    %r15,%rcx
	mov    %rdi,%r15
	mov    -0x120(%rbp),%r8
	jmpq   fc49 <F_0_714+0x4577>
	lea    0x1(%r11),%r14d
	movswq 0x5c(%rsi),%r11
	test   %r11w,%r11w
	je     10b3d <F_0_714+0x546b>
	mov    %r11,%r10
	sar    $0x1f,%r10d
	mov    %r10,-0x58(%rbp)
	mov    %r10,%rcx
	xor    %r11d,%ecx
	sub    %r10d,%ecx
	movslq %ecx,%rcx
	movzbl (%rcx,%rax,1),%eax
	mov    %rax,-0x128(%rbp)
	mov    -0x38(%rbp),%r10
	jmpq   10c50 <F_0_714+0x557e>
	cmp    $0x2f,%edx
	jle    109ea <F_0_714+0x5318>
	lea    0x38(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    1094c <F_0_714+0x527a>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    0x30(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    1096b <F_0_714+0x5299>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	lea    0x28(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    1098a <F_0_714+0x52b8>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    0x20(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    109a9 <F_0_714+0x52d7>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	lea    0x18(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    109c8 <F_0_714+0x52f6>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    -0x30(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %rcx,%rdx
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    109ea <F_0_714+0x5318>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	mov    %rbx,%rcx
	shl    %cl,%rdi
	mov    %rcx,%rbx
	or     %r9,%rdi
	add    %ebx,%edx
	add    $0xfffffff0,%r11d
	cmp    $0xf,%r11d
	jg     10924 <F_0_714+0x5252>
	shl    $0x4,%r11d
	mov    -0x128(%rbp),%rcx
	add    %ecx,%r11d
	movslq %r11d,%r14
	movslq (%r8,%r14,4),%r11
	movsbq 0x400(%r8,%r14,1),%r14
	cmp    $0x1f,%edx
	jg     10ccc <F_0_714+0x55fa>
	mov    %rdi,%r15
	shl    %cl,%r12
	lea    -0x1(%r12),%edi
	mov    -0x120(%rbp),%r12
	add    %r12d,%r10d
	and    %r10d,%edi
	movslq %edi,%rdi
	mov    %rcx,%r12
	mov    %r14,%rcx
	shl    %cl,%r15
	mov    %rcx,%r10
	or     %r15,%r11
	mov    %r12,%rcx
	shl    %cl,%r11
	or     %r11,%rdi
	add    %r10d,%edx
	add    %ecx,%edx
	mov    $0x1,%r12d
	xor    %r14d,%r14d
	jmpq   108ea <F_0_714+0x5218>
	mov    %rcx,%r15
	lea    0x38(%rdx),%ecx
	mov    %rdi,%r8
	shr    %cl,%r8
	mov    %r8b,0x0(%r13)
	lea    0x1(%r13),%rcx
	cmp    $0xff,%r8b
	je     10cf0 <F_0_714+0x561e>
	mov    %rcx,%r8
	jmpq   10cf7 <F_0_714+0x5625>
	movb   $0x0,(%rcx)
	lea    0x2(%r13),%r8
	lea    0x30(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     10d19 <F_0_714+0x5647>
	mov    %rcx,%r8
	jmpq   10d20 <F_0_714+0x564e>
	movb   $0x0,(%rcx)
	add    $0x2,%r8
	lea    0x28(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     10d42 <F_0_714+0x5670>
	mov    %rcx,%r8
	jmpq   10d49 <F_0_714+0x5677>
	movb   $0x0,(%rcx)
	add    $0x2,%r8
	lea    -0x20(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %rcx,%rdx
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     10d7b <F_0_714+0x56a9>
	mov    %rcx,%r13
	mov    %r15,%rcx
	mov    %rdi,%r15
	mov    -0x120(%rbp),%r8
	jmpq   100e9 <F_0_714+0x4a17>
	movb   $0x0,(%rcx)
	lea    0x2(%r8),%r13
	mov    %r15,%rcx
	mov    %rdi,%r15
	mov    -0x120(%rbp),%r8
	jmpq   fe99 <F_0_714+0x47c7>
	add    $0x1,%r14d
	mov    -0x38(%rbp),%r10
	movswq 0x6a(%rsi),%r11
	test   %r11w,%r11w
	je     10d94 <F_0_714+0x56c2>
	mov    %r11,%r15
	sar    $0x1f,%r15d
	mov    %r15,-0x58(%rbp)
	mov    %r15,%rcx
	xor    %r11d,%ecx
	sub    %r15d,%ecx
	movslq %ecx,%rcx
	movzbl (%rcx,%rax,1),%eax
	mov    %rax,-0x128(%rbp)
	jmpq   10ea3 <F_0_714+0x57d1>
	cmp    $0x2f,%edx
	jle    10c3e <F_0_714+0x556c>
	lea    0x38(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%rax
	cmp    $0xff,%r15b
	jne    10ba2 <F_0_714+0x54d0>
	movb   $0x0,(%rax)
	lea    0x2(%r13),%rax
	lea    0x30(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,(%rax)
	lea    0x1(%rax),%r13
	cmp    $0xff,%r15b
	jne    10bc1 <F_0_714+0x54ef>
	movb   $0x0,0x0(%r13)
	lea    0x2(%rax),%r13
	lea    0x28(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%rax
	cmp    $0xff,%r15b
	jne    10bdf <F_0_714+0x550d>
	movb   $0x0,(%rax)
	lea    0x2(%r13),%rax
	lea    0x20(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,(%rax)
	lea    0x1(%rax),%r13
	cmp    $0xff,%r15b
	jne    10bfe <F_0_714+0x552c>
	movb   $0x0,0x0(%r13)
	lea    0x2(%rax),%r13
	lea    0x18(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%rax
	cmp    $0xff,%r15b
	jne    10c1c <F_0_714+0x554a>
	movb   $0x0,(%rax)
	lea    0x2(%r13),%rax
	lea    -0x30(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %rcx,%rdx
	mov    %r15b,(%rax)
	lea    0x1(%rax),%r13
	cmp    $0xff,%r15b
	jne    10c3e <F_0_714+0x556c>
	movb   $0x0,0x0(%r13)
	lea    0x2(%rax),%r13
	mov    %rbx,%rcx
	shl    %cl,%rdi
	mov    %rcx,%rbx
	or     %r9,%rdi
	add    %ebx,%edx
	add    $0xfffffff0,%r14d
	cmp    $0xf,%r14d
	jg     10b7b <F_0_714+0x54a9>
	shl    $0x4,%r14d
	mov    -0x128(%rbp),%rcx
	lea    (%rcx,%r14,1),%eax
	movslq %eax,%rax
	movslq (%r8,%rax,4),%r14
	movsbq 0x400(%r8,%rax,1),%rax
	cmp    $0x1f,%edx
	jg     10f1f <F_0_714+0x584d>
	mov    %rdi,%r15
	shl    %cl,%r12
	lea    -0x1(%r12),%edi
	mov    -0x58(%rbp),%r12
	add    %r12d,%r11d
	and    %r11d,%edi
	movslq %edi,%rdi
	mov    %rcx,%r11
	mov    %rax,%rcx
	shl    %cl,%r15
	mov    %rcx,%rax
	or     %r15,%r14
	mov    %r11,%rcx
	shl    %cl,%r14
	or     %r14,%rdi
	add    %edx,%eax
	lea    (%rcx,%rax,1),%edx
	mov    $0x1,%r12d
	lea    0x385f0(%rip),%rax        # 492b4 <jpeg_nbits_table>
	xor    %r14d,%r14d
	jmpq   10b45 <F_0_714+0x5473>
	mov    %rcx,%r15
	lea    0x38(%rdx),%ecx
	mov    %rdi,%rax
	shr    %cl,%rax
	mov    %al,0x0(%r13)
	lea    0x1(%r13),%rcx
	cmp    $0xff,%al
	je     10f45 <F_0_714+0x5873>
	mov    %rcx,%rax
	jmpq   10f4c <F_0_714+0x587a>
	movb   $0x0,(%rcx)
	lea    0x2(%r13),%r8
	lea    0x30(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     10f6e <F_0_714+0x589c>
	mov    %rcx,%r8
	jmpq   10f75 <F_0_714+0x58a3>
	movb   $0x0,(%rcx)
	add    $0x2,%r8
	lea    0x28(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     10f97 <F_0_714+0x58c5>
	mov    %rcx,%r8
	jmpq   10f9e <F_0_714+0x58cc>
	movb   $0x0,(%rcx)
	add    $0x2,%r8
	lea    -0x20(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %rcx,%rdx
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     10fd0 <F_0_714+0x58fe>
	mov    %rcx,%r13
	mov    %r15,%rcx
	mov    %rdi,%r15
	mov    -0x120(%rbp),%r8
	jmpq   10339 <F_0_714+0x4c67>
	movb   $0x0,(%rcx)
	lea    0x2(%r8),%r13
	mov    %r15,%rcx
	mov    %rdi,%r15
	mov    -0x120(%rbp),%r8
	jmpq   100e9 <F_0_714+0x4a17>
	add    $0x1,%r14d
	movswq 0x78(%rsi),%r11
	test   %r11w,%r11w
	je     10fe9 <F_0_714+0x5917>
	mov    %r11,%r15
	sar    $0x1f,%r15d
	mov    %r15,-0x50(%rbp)
	mov    %r15,%rcx
	xor    %r11d,%ecx
	sub    %r15d,%ecx
	movslq %ecx,%rcx
	movzbl (%rcx,%rax,1),%eax
	mov    %rax,-0x128(%rbp)
	jmpq   110f8 <F_0_714+0x5a26>
	cmp    $0x2f,%edx
	jle    10e91 <F_0_714+0x57bf>
	lea    0x38(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%rax
	cmp    $0xff,%r15b
	jne    10df5 <F_0_714+0x5723>
	movb   $0x0,(%rax)
	lea    0x2(%r13),%rax
	lea    0x30(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,(%rax)
	lea    0x1(%rax),%r13
	cmp    $0xff,%r15b
	jne    10e14 <F_0_714+0x5742>
	movb   $0x0,0x0(%r13)
	lea    0x2(%rax),%r13
	lea    0x28(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%rax
	cmp    $0xff,%r15b
	jne    10e32 <F_0_714+0x5760>
	movb   $0x0,(%rax)
	lea    0x2(%r13),%rax
	lea    0x20(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,(%rax)
	lea    0x1(%rax),%r13
	cmp    $0xff,%r15b
	jne    10e51 <F_0_714+0x577f>
	movb   $0x0,0x0(%r13)
	lea    0x2(%rax),%r13
	lea    0x18(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%rax
	cmp    $0xff,%r15b
	jne    10e6f <F_0_714+0x579d>
	movb   $0x0,(%rax)
	lea    0x2(%r13),%rax
	lea    -0x30(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %rcx,%rdx
	mov    %r15b,(%rax)
	lea    0x1(%rax),%r13
	cmp    $0xff,%r15b
	jne    10e91 <F_0_714+0x57bf>
	movb   $0x0,0x0(%r13)
	lea    0x2(%rax),%r13
	mov    %rbx,%rcx
	shl    %cl,%rdi
	mov    %rcx,%rbx
	or     %r9,%rdi
	add    %ebx,%edx
	add    $0xfffffff0,%r14d
	cmp    $0xf,%r14d
	jg     10dce <F_0_714+0x56fc>
	shl    $0x4,%r14d
	mov    -0x128(%rbp),%rcx
	lea    (%rcx,%r14,1),%eax
	movslq %eax,%rax
	movslq (%r8,%rax,4),%r14
	movsbq 0x400(%r8,%rax,1),%rax
	cmp    $0x1f,%edx
	jg     11176 <F_0_714+0x5aa4>
	mov    %rdi,%r15
	shl    %cl,%r12
	lea    -0x1(%r12),%edi
	mov    -0x58(%rbp),%r12
	add    %r12d,%r11d
	and    %r11d,%edi
	movslq %edi,%rdi
	mov    %rcx,%r11
	mov    %rax,%rcx
	shl    %cl,%r15
	mov    %rcx,%rax
	or     %r15,%r14
	mov    %r11,%rcx
	shl    %cl,%r14
	or     %r14,%rdi
	add    %edx,%eax
	lea    (%rcx,%rax,1),%edx
	mov    $0x1,%r12d
	lea    0x3839d(%rip),%rax        # 492b4 <jpeg_nbits_table>
	xor    %r14d,%r14d
	jmpq   10d98 <F_0_714+0x56c6>
	mov    %rcx,%r15
	lea    0x38(%rdx),%ecx
	mov    %rdi,%r10
	shr    %cl,%r10
	mov    %r10b,0x0(%r13)
	lea    0x1(%r13),%rcx
	cmp    $0xff,%r10b
	je     1119c <F_0_714+0x5aca>
	mov    %rcx,%r10
	jmpq   111a3 <F_0_714+0x5ad1>
	movb   $0x0,(%rcx)
	lea    0x2(%r13),%rax
	lea    0x30(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %r13b,(%rax)
	lea    0x1(%rax),%rcx
	cmp    $0xff,%r13b
	je     111c5 <F_0_714+0x5af3>
	mov    %rcx,%rax
	jmpq   111cc <F_0_714+0x5afa>
	movb   $0x0,(%rcx)
	add    $0x2,%r8
	lea    0x28(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     111ee <F_0_714+0x5b1c>
	mov    %rcx,%r8
	jmpq   111f5 <F_0_714+0x5b23>
	movb   $0x0,(%rcx)
	add    $0x2,%r8
	lea    -0x20(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %rcx,%rdx
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     11227 <F_0_714+0x5b55>
	mov    %rcx,%r13
	mov    %r15,%rcx
	mov    %rdi,%r15
	mov    -0x120(%rbp),%r8
	jmpq   10589 <F_0_714+0x4eb7>
	movb   $0x0,(%rcx)
	lea    0x2(%r8),%r13
	mov    %r15,%rcx
	mov    %rdi,%r15
	mov    -0x120(%rbp),%r8
	jmpq   10339 <F_0_714+0x4c67>
	add    $0x1,%r14d
	movswq 0x7a(%rsi),%r11
	test   %r11w,%r11w
	je     11240 <F_0_714+0x5b6e>
	mov    %r11,%r15
	sar    $0x1f,%r15d
	mov    %r15,-0x50(%rbp)
	mov    %r15,%rcx
	xor    %r11d,%ecx
	sub    %r15d,%ecx
	movslq %ecx,%rcx
	movzbl (%rcx,%rax,1),%eax
	mov    %rax,-0x128(%rbp)
	jmpq   1134f <F_0_714+0x5c7d>
	cmp    $0x2f,%edx
	jle    110e6 <F_0_714+0x5a14>
	lea    0x38(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%rax
	cmp    $0xff,%r15b
	jne    1104a <F_0_714+0x5978>
	movb   $0x0,(%rax)
	lea    0x2(%r13),%rax
	lea    0x30(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,(%rax)
	lea    0x1(%rax),%r13
	cmp    $0xff,%r15b
	jne    11069 <F_0_714+0x5997>
	movb   $0x0,0x0(%r13)
	lea    0x2(%rax),%r13
	lea    0x28(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%rax
	cmp    $0xff,%r15b
	jne    11087 <F_0_714+0x59b5>
	movb   $0x0,(%rax)
	lea    0x2(%r13),%rax
	lea    0x20(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,(%rax)
	lea    0x1(%rax),%r13
	cmp    $0xff,%r15b
	jne    110a6 <F_0_714+0x59d4>
	movb   $0x0,0x0(%r13)
	lea    0x2(%rax),%r13
	lea    0x18(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%rax
	cmp    $0xff,%r15b
	jne    110c4 <F_0_714+0x59f2>
	movb   $0x0,(%rax)
	lea    0x2(%r13),%rax
	lea    -0x30(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %rcx,%rdx
	mov    %r15b,(%rax)
	lea    0x1(%rax),%r13
	cmp    $0xff,%r15b
	jne    110e6 <F_0_714+0x5a14>
	movb   $0x0,0x0(%r13)
	lea    0x2(%rax),%r13
	mov    %rbx,%rcx
	shl    %cl,%rdi
	mov    %rcx,%rbx
	or     %r9,%rdi
	add    %ebx,%edx
	add    $0xfffffff0,%r14d
	cmp    $0xf,%r14d
	jg     11023 <F_0_714+0x5951>
	shl    $0x4,%r14d
	mov    -0x128(%rbp),%rcx
	lea    (%rcx,%r14,1),%eax
	movslq %eax,%r14
	movslq (%r8,%r14,4),%rax
	movsbq 0x400(%r8,%r14,1),%r14
	cmp    $0x1f,%edx
	jg     113cd <F_0_714+0x5cfb>
	mov    %rdi,%r15
	shl    %cl,%r12
	lea    -0x1(%r12),%edi
	mov    -0x50(%rbp),%r12
	add    %r12d,%r11d
	and    %r11d,%edi
	movslq %edi,%rdi
	mov    %rcx,%r12
	mov    %r14,%rcx
	shl    %cl,%r15
	mov    %rcx,%r11
	or     %r15,%rax
	mov    %r12,%rcx
	shl    %cl,%rax
	or     %rax,%rdi
	lea    (%rdx,%r11,1),%eax
	lea    (%rcx,%rax,1),%edx
	mov    $0x1,%r12d
	lea    0x38146(%rip),%rax        # 492b4 <jpeg_nbits_table>
	xor    %r14d,%r14d
	jmpq   10fed <F_0_714+0x591b>
	mov    %rcx,%r15
	lea    0x38(%rdx),%ecx
	mov    %rdi,%r10
	shr    %cl,%r10
	mov    %r10b,0x0(%r13)
	lea    0x1(%r13),%rcx
	cmp    $0xff,%r10b
	je     113f3 <F_0_714+0x5d21>
	mov    %rcx,%r10
	jmpq   113fa <F_0_714+0x5d28>
	movb   $0x0,(%rcx)
	lea    0x2(%r13),%r10
	lea    0x30(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %r13b,(%r10)
	lea    0x1(%r10),%rcx
	cmp    $0xff,%r13b
	je     1141c <F_0_714+0x5d4a>
	mov    %rcx,%r10
	jmpq   11423 <F_0_714+0x5d51>
	movb   $0x0,(%rcx)
	add    $0x2,%rax
	lea    0x28(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %r13b,(%rax)
	lea    0x1(%rax),%rcx
	cmp    $0xff,%r13b
	je     11445 <F_0_714+0x5d73>
	mov    %rcx,%rax
	jmpq   1144c <F_0_714+0x5d7a>
	movb   $0x0,(%rcx)
	add    $0x2,%r8
	lea    -0x20(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %rcx,%rdx
	mov    %r13b,(%r8)
	lea    0x1(%r8),%rcx
	cmp    $0xff,%r13b
	je     1147e <F_0_714+0x5dac>
	mov    %rcx,%r13
	mov    %r15,%rcx
	mov    %rdi,%r15
	mov    -0x120(%rbp),%r8
	jmpq   107dc <F_0_714+0x510a>
	movb   $0x0,(%rcx)
	lea    0x2(%r8),%r13
	mov    %r15,%rcx
	mov    %rdi,%r15
	mov    -0x120(%rbp),%r8
	jmpq   10589 <F_0_714+0x4eb7>
	add    $0x1,%r14d
	movswq 0x6c(%rsi),%r11
	test   %r11w,%r11w
	je     11497 <F_0_714+0x5dc5>
	mov    %r11,%r15
	sar    $0x1f,%r15d
	mov    %r15,-0x48(%rbp)
	mov    %r15,%rcx
	xor    %r11d,%ecx
	sub    %r15d,%ecx
	movslq %ecx,%rcx
	movzbl (%rcx,%rax,1),%eax
	mov    %rax,-0x128(%rbp)
	jmpq   115a6 <F_0_714+0x5ed4>
	cmp    $0x2f,%edx
	jle    1133d <F_0_714+0x5c6b>
	lea    0x38(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%rax
	cmp    $0xff,%r15b
	jne    112a1 <F_0_714+0x5bcf>
	movb   $0x0,(%rax)
	lea    0x2(%r13),%rax
	lea    0x30(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,(%rax)
	lea    0x1(%rax),%r13
	cmp    $0xff,%r15b
	jne    112c0 <F_0_714+0x5bee>
	movb   $0x0,0x0(%r13)
	lea    0x2(%rax),%r13
	lea    0x28(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%rax
	cmp    $0xff,%r15b
	jne    112de <F_0_714+0x5c0c>
	movb   $0x0,(%rax)
	lea    0x2(%r13),%rax
	lea    0x20(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,(%rax)
	lea    0x1(%rax),%r13
	cmp    $0xff,%r15b
	jne    112fd <F_0_714+0x5c2b>
	movb   $0x0,0x0(%r13)
	lea    0x2(%rax),%r13
	lea    0x18(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%rax
	cmp    $0xff,%r15b
	jne    1131b <F_0_714+0x5c49>
	movb   $0x0,(%rax)
	lea    0x2(%r13),%rax
	lea    -0x30(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %rcx,%rdx
	mov    %r15b,(%rax)
	lea    0x1(%rax),%r13
	cmp    $0xff,%r15b
	jne    1133d <F_0_714+0x5c6b>
	movb   $0x0,0x0(%r13)
	lea    0x2(%rax),%r13
	mov    %rbx,%rcx
	shl    %cl,%rdi
	mov    %rcx,%rbx
	or     %r9,%rdi
	add    %ebx,%edx
	add    $0xfffffff0,%r14d
	cmp    $0xf,%r14d
	jg     1127a <F_0_714+0x5ba8>
	shl    $0x4,%r14d
	mov    -0x128(%rbp),%rcx
	lea    (%rcx,%r14,1),%eax
	movslq %eax,%r14
	movslq (%r8,%r14,4),%rax
	movsbq 0x400(%r8,%r14,1),%r14
	cmp    $0x1f,%edx
	jg     11624 <F_0_714+0x5f52>
	mov    %rdi,%r15
	shl    %cl,%r12
	lea    -0x1(%r12),%edi
	mov    -0x50(%rbp),%r12
	add    %r12d,%r11d
	and    %r11d,%edi
	movslq %edi,%rdi
	mov    %rcx,%r12
	mov    %r14,%rcx
	shl    %cl,%r15
	mov    %rcx,%r11
	or     %r15,%rax
	mov    %r12,%rcx
	shl    %cl,%rax
	or     %rax,%rdi
	lea    (%rdx,%r11,1),%eax
	lea    (%rcx,%rax,1),%edx
	mov    $0x1,%r12d
	lea    0x37eef(%rip),%rax        # 492b4 <jpeg_nbits_table>
	xor    %r14d,%r14d
	jmpq   11244 <F_0_714+0x5b72>
	mov    %rcx,%r15
	lea    0x38(%rdx),%ecx
	mov    %rdi,%r10
	shr    %cl,%r10
	mov    %r10b,0x0(%r13)
	lea    0x1(%r13),%rcx
	cmp    $0xff,%r10b
	je     1164a <F_0_714+0x5f78>
	mov    %rcx,%r10
	jmpq   11651 <F_0_714+0x5f7f>
	movb   $0x0,(%rcx)
	lea    0x2(%r13),%r10
	lea    0x30(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %r13b,(%r10)
	lea    0x1(%r10),%rcx
	cmp    $0xff,%r13b
	je     11673 <F_0_714+0x5fa1>
	mov    %rcx,%r10
	jmpq   1167a <F_0_714+0x5fa8>
	movb   $0x0,(%rcx)
	add    $0x2,%r10
	lea    0x28(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %r13b,(%r10)
	lea    0x1(%r10),%rcx
	cmp    $0xff,%r13b
	je     1169c <F_0_714+0x5fca>
	mov    %rcx,%r10
	jmpq   116a3 <F_0_714+0x5fd1>
	movb   $0x0,(%rcx)
	add    $0x2,%rax
	lea    -0x20(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %rcx,%rdx
	mov    %r13b,(%rax)
	lea    0x1(%rax),%rcx
	cmp    $0xff,%r13b
	je     116d2 <F_0_714+0x6000>
	mov    %rcx,%r13
	mov    %r15,%rcx
	mov    %rdi,%r15
	lea    0x37e3b(%rip),%rax        # 492b4 <jpeg_nbits_table>
	jmpq   10a30 <F_0_714+0x535e>
	movb   $0x0,(%rcx)
	lea    0x2(%r8),%r13
	mov    %r15,%rcx
	mov    %rdi,%r15
	mov    -0x120(%rbp),%r8
	jmpq   107dc <F_0_714+0x510a>
	add    $0x1,%r14d
	movswq 0x5e(%rsi),%r11
	test   %r11w,%r11w
	je     116eb <F_0_714+0x6019>
	mov    %r11,%r15
	sar    $0x1f,%r15d
	mov    %r15,-0x48(%rbp)
	mov    %r15,%rcx
	xor    %r11d,%ecx
	sub    %r15d,%ecx
	movslq %ecx,%rcx
	movzbl (%rcx,%rax,1),%eax
	mov    %rax,-0x128(%rbp)
	jmpq   117fa <F_0_714+0x6128>
	cmp    $0x2f,%edx
	jle    11594 <F_0_714+0x5ec2>
	lea    0x38(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%rax
	cmp    $0xff,%r15b
	jne    114f8 <F_0_714+0x5e26>
	movb   $0x0,(%rax)
	lea    0x2(%r13),%rax
	lea    0x30(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,(%rax)
	lea    0x1(%rax),%r13
	cmp    $0xff,%r15b
	jne    11517 <F_0_714+0x5e45>
	movb   $0x0,0x0(%r13)
	lea    0x2(%rax),%r13
	lea    0x28(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%rax
	cmp    $0xff,%r15b
	jne    11535 <F_0_714+0x5e63>
	movb   $0x0,(%rax)
	lea    0x2(%r13),%rax
	lea    0x20(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,(%rax)
	lea    0x1(%rax),%r13
	cmp    $0xff,%r15b
	jne    11554 <F_0_714+0x5e82>
	movb   $0x0,0x0(%r13)
	lea    0x2(%rax),%r13
	lea    0x18(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%rax
	cmp    $0xff,%r15b
	jne    11572 <F_0_714+0x5ea0>
	movb   $0x0,(%rax)
	lea    0x2(%r13),%rax
	lea    -0x30(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %rcx,%rdx
	mov    %r15b,(%rax)
	lea    0x1(%rax),%r13
	cmp    $0xff,%r15b
	jne    11594 <F_0_714+0x5ec2>
	movb   $0x0,0x0(%r13)
	lea    0x2(%rax),%r13
	mov    %rbx,%rcx
	shl    %cl,%rdi
	mov    %rcx,%rbx
	or     %r9,%rdi
	add    %ebx,%edx
	add    $0xfffffff0,%r14d
	cmp    $0xf,%r14d
	jg     114d1 <F_0_714+0x5dff>
	shl    $0x4,%r14d
	mov    -0x128(%rbp),%rcx
	lea    (%rcx,%r14,1),%eax
	movslq %eax,%r14
	movslq (%r8,%r14,4),%rax
	movsbq 0x400(%r8,%r14,1),%r14
	cmp    $0x1f,%edx
	jg     11878 <F_0_714+0x61a6>
	mov    %rdi,%r15
	shl    %cl,%r12
	lea    -0x1(%r12),%edi
	mov    -0x48(%rbp),%r12
	add    %r12d,%r11d
	and    %r11d,%edi
	movslq %edi,%rdi
	mov    %rcx,%r12
	mov    %r14,%rcx
	shl    %cl,%r15
	mov    %rcx,%r11
	or     %r15,%rax
	mov    %r12,%rcx
	shl    %cl,%rax
	or     %rax,%rdi
	lea    (%rdx,%r11,1),%eax
	lea    (%rcx,%rax,1),%edx
	mov    $0x1,%r12d
	lea    0x37c98(%rip),%rax        # 492b4 <jpeg_nbits_table>
	xor    %r14d,%r14d
	jmpq   1149b <F_0_714+0x5dc9>
	mov    %rcx,%r15
	lea    0x38(%rdx),%ecx
	mov    %rdi,%r10
	shr    %cl,%r10
	mov    %r10b,0x0(%r13)
	lea    0x1(%r13),%rcx
	cmp    $0xff,%r10b
	je     1189e <F_0_714+0x61cc>
	mov    %rcx,%r10
	jmpq   118a5 <F_0_714+0x61d3>
	movb   $0x0,(%rcx)
	lea    0x2(%r13),%r10
	lea    0x30(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %r13b,(%r10)
	lea    0x1(%r10),%rcx
	cmp    $0xff,%r13b
	je     118c7 <F_0_714+0x61f5>
	mov    %rcx,%r10
	jmpq   118ce <F_0_714+0x61fc>
	movb   $0x0,(%rcx)
	add    $0x2,%r10
	lea    0x28(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %r13b,(%r10)
	lea    0x1(%r10),%rcx
	cmp    $0xff,%r13b
	je     118f0 <F_0_714+0x621e>
	mov    %rcx,%r10
	jmpq   118f7 <F_0_714+0x6225>
	movb   $0x0,(%rcx)
	add    $0x2,%r10
	lea    -0x20(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %rcx,%rdx
	mov    %r13b,(%r10)
	lea    0x1(%r10),%rcx
	cmp    $0xff,%r13b
	je     11926 <F_0_714+0x6254>
	mov    %rcx,%r13
	mov    %r15,%rcx
	mov    %rdi,%r15
	mov    -0x38(%rbp),%r10
	jmpq   10c85 <F_0_714+0x55b3>
	movb   $0x0,(%rcx)
	lea    0x2(%rax),%r13
	mov    %r15,%rcx
	mov    %rdi,%r15
	lea    0x37bce(%rip),%rax        # 492b4 <jpeg_nbits_table>
	jmpq   10a30 <F_0_714+0x535e>
	add    $0x1,%r14d
	movswq 0x6e(%rsi),%r11
	test   %r11w,%r11w
	je     1193c <F_0_714+0x626a>
	mov    %r11,%r15
	sar    $0x1f,%r15d
	mov    %r15,-0x40(%rbp)
	mov    %r15,%rcx
	xor    %r11d,%ecx
	sub    %r15d,%ecx
	movslq %ecx,%rcx
	movzbl (%rcx,%rax,1),%eax
	mov    %rax,-0x128(%rbp)
	jmpq   11a4b <F_0_714+0x6379>
	cmp    $0x2f,%edx
	jle    117e8 <F_0_714+0x6116>
	lea    0x38(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%rax
	cmp    $0xff,%r15b
	jne    1174c <F_0_714+0x607a>
	movb   $0x0,(%rax)
	lea    0x2(%r13),%rax
	lea    0x30(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,(%rax)
	lea    0x1(%rax),%r13
	cmp    $0xff,%r15b
	jne    1176b <F_0_714+0x6099>
	movb   $0x0,0x0(%r13)
	lea    0x2(%rax),%r13
	lea    0x28(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%rax
	cmp    $0xff,%r15b
	jne    11789 <F_0_714+0x60b7>
	movb   $0x0,(%rax)
	lea    0x2(%r13),%rax
	lea    0x20(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,(%rax)
	lea    0x1(%rax),%r13
	cmp    $0xff,%r15b
	jne    117a8 <F_0_714+0x60d6>
	movb   $0x0,0x0(%r13)
	lea    0x2(%rax),%r13
	lea    0x18(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%rax
	cmp    $0xff,%r15b
	jne    117c6 <F_0_714+0x60f4>
	movb   $0x0,(%rax)
	lea    0x2(%r13),%rax
	lea    -0x30(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %rcx,%rdx
	mov    %r15b,(%rax)
	lea    0x1(%rax),%r13
	cmp    $0xff,%r15b
	jne    117e8 <F_0_714+0x6116>
	movb   $0x0,0x0(%r13)
	lea    0x2(%rax),%r13
	mov    %rbx,%rcx
	shl    %cl,%rdi
	mov    %rcx,%rbx
	or     %r9,%rdi
	add    %ebx,%edx
	add    $0xfffffff0,%r14d
	cmp    $0xf,%r14d
	jg     11725 <F_0_714+0x6053>
	shl    $0x4,%r14d
	mov    -0x128(%rbp),%rcx
	lea    (%rcx,%r14,1),%eax
	movslq %eax,%r14
	movslq (%r8,%r14,4),%rax
	movsbq 0x400(%r8,%r14,1),%r14
	cmp    $0x1f,%edx
	jg     11ac9 <F_0_714+0x63f7>
	mov    %rdi,%r15
	shl    %cl,%r12
	lea    -0x1(%r12),%edi
	mov    -0x48(%rbp),%r12
	add    %r12d,%r11d
	and    %r11d,%edi
	movslq %edi,%rdi
	mov    %rcx,%r12
	mov    %r14,%rcx
	shl    %cl,%r15
	mov    %rcx,%r11
	or     %r15,%rax
	mov    %r12,%rcx
	shl    %cl,%rax
	or     %rax,%rdi
	lea    (%rdx,%r11,1),%eax
	lea    (%rcx,%rax,1),%edx
	mov    $0x1,%r12d
	lea    0x37a44(%rip),%rax        # 492b4 <jpeg_nbits_table>
	xor    %r14d,%r14d
	jmpq   116ef <F_0_714+0x601d>
	mov    %rcx,%r15
	lea    0x38(%rdx),%ecx
	mov    %rdi,%r10
	shr    %cl,%r10
	mov    %r10b,0x0(%r13)
	lea    0x1(%r13),%rcx
	cmp    $0xff,%r10b
	je     11aef <F_0_714+0x641d>
	mov    %rcx,%r10
	jmpq   11af6 <F_0_714+0x6424>
	movb   $0x0,(%rcx)
	lea    0x2(%r13),%r10
	lea    0x30(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %r13b,(%r10)
	lea    0x1(%r10),%rcx
	cmp    $0xff,%r13b
	je     11b18 <F_0_714+0x6446>
	mov    %rcx,%r10
	jmpq   11b1f <F_0_714+0x644d>
	movb   $0x0,(%rcx)
	add    $0x2,%r10
	lea    0x28(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %r13b,(%r10)
	lea    0x1(%r10),%rcx
	cmp    $0xff,%r13b
	je     11b41 <F_0_714+0x646f>
	mov    %rcx,%r10
	jmpq   11b48 <F_0_714+0x6476>
	movb   $0x0,(%rcx)
	add    $0x2,%r10
	lea    -0x20(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %rcx,%rdx
	mov    %r13b,(%r10)
	lea    0x1(%r10),%rcx
	cmp    $0xff,%r13b
	je     11b77 <F_0_714+0x64a5>
	mov    %rcx,%r13
	mov    %r15,%rcx
	mov    %rdi,%r15
	mov    -0x38(%rbp),%r10
	jmpq   10ed8 <F_0_714+0x5806>
	movb   $0x0,(%rcx)
	lea    0x2(%r10),%r13
	mov    %r15,%rcx
	mov    %rdi,%r15
	mov    -0x38(%rbp),%r10
	jmpq   10c85 <F_0_714+0x55b3>
	add    $0x1,%r14d
	movswq 0x7c(%rsi),%r11
	test   %r11w,%r11w
	je     11b8d <F_0_714+0x64bb>
	mov    %r11,%r15
	sar    $0x1f,%r15d
	mov    %r15,-0x40(%rbp)
	mov    %r15,%rcx
	xor    %r11d,%ecx
	sub    %r15d,%ecx
	movslq %ecx,%rcx
	movzbl (%rcx,%rax,1),%eax
	mov    %rax,-0x128(%rbp)
	jmpq   11c8f <F_0_714+0x65bd>
	cmp    $0x2f,%edx
	jle    11a39 <F_0_714+0x6367>
	lea    0x38(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%rax
	cmp    $0xff,%r15b
	jne    1199d <F_0_714+0x62cb>
	movb   $0x0,(%rax)
	lea    0x2(%r13),%rax
	lea    0x30(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,(%rax)
	lea    0x1(%rax),%r13
	cmp    $0xff,%r15b
	jne    119bc <F_0_714+0x62ea>
	movb   $0x0,0x0(%r13)
	lea    0x2(%rax),%r13
	lea    0x28(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%rax
	cmp    $0xff,%r15b
	jne    119da <F_0_714+0x6308>
	movb   $0x0,(%rax)
	lea    0x2(%r13),%rax
	lea    0x20(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,(%rax)
	lea    0x1(%rax),%r13
	cmp    $0xff,%r15b
	jne    119f9 <F_0_714+0x6327>
	movb   $0x0,0x0(%r13)
	lea    0x2(%rax),%r13
	lea    0x18(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%rax
	cmp    $0xff,%r15b
	jne    11a17 <F_0_714+0x6345>
	movb   $0x0,(%rax)
	lea    0x2(%r13),%rax
	lea    -0x30(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %rcx,%rdx
	mov    %r15b,(%rax)
	lea    0x1(%rax),%r13
	cmp    $0xff,%r15b
	jne    11a39 <F_0_714+0x6367>
	movb   $0x0,0x0(%r13)
	lea    0x2(%rax),%r13
	mov    %rbx,%rcx
	shl    %cl,%rdi
	mov    %rcx,%rbx
	or     %r9,%rdi
	add    %ebx,%edx
	add    $0xfffffff0,%r14d
	cmp    $0xf,%r14d
	jg     11976 <F_0_714+0x62a4>
	shl    $0x4,%r14d
	mov    -0x128(%rbp),%rcx
	lea    (%rcx,%r14,1),%eax
	movslq %eax,%r14
	movslq (%r8,%r14,4),%rax
	movsbq 0x400(%r8,%r14,1),%r14
	cmp    $0x1f,%edx
	jg     11d0b <F_0_714+0x6639>
	mov    %rdi,%r15
	shl    %cl,%r12
	lea    -0x1(%r12),%edi
	mov    -0x40(%rbp),%r12
	add    %r12d,%r11d
	and    %r11d,%edi
	movslq %edi,%rdi
	mov    %rcx,%r12
	mov    %r14,%rcx
	shl    %cl,%r15
	mov    %rcx,%r11
	or     %r15,%rax
	mov    %r12,%rcx
	shl    %cl,%rax
	or     %rax,%rdi
	lea    (%rdx,%r11,1),%eax
	lea    (%rcx,%rax,1),%edx
	mov    $0x1,%r12d
	lea    0x377f3(%rip),%rax        # 492b4 <jpeg_nbits_table>
	xor    %r14d,%r14d
	jmpq   11940 <F_0_714+0x626e>
	mov    %rcx,%r15
	lea    0x38(%rdx),%ecx
	mov    %rdi,%r12
	shr    %cl,%r12
	mov    %r12b,0x0(%r13)
	lea    0x1(%r13),%rcx
	cmp    $0xff,%r12b
	je     11d31 <F_0_714+0x665f>
	mov    %rcx,%r12
	jmpq   11d38 <F_0_714+0x6666>
	movb   $0x0,(%rcx)
	lea    0x2(%r13),%r10
	lea    0x30(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %r13b,(%r10)
	lea    0x1(%r10),%rcx
	cmp    $0xff,%r13b
	je     11d5c <F_0_714+0x668a>
	mov    %rcx,%r10
	jmpq   11d63 <F_0_714+0x6691>
	movb   $0x0,(%rcx)
	add    $0x2,%r10
	lea    0x28(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %r13b,(%r10)
	lea    0x1(%r10),%rcx
	cmp    $0xff,%r13b
	je     11d85 <F_0_714+0x66b3>
	mov    %rcx,%r10
	jmpq   11d8c <F_0_714+0x66ba>
	movb   $0x0,(%rcx)
	add    $0x2,%r10
	lea    -0x20(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %rcx,%rdx
	mov    %r13b,(%r10)
	lea    0x1(%r10),%rcx
	cmp    $0xff,%r13b
	je     11dbb <F_0_714+0x66e9>
	mov    %rcx,%r13
	mov    %r15,%rcx
	mov    %rdi,%r15
	mov    -0x38(%rbp),%r10
	jmpq   1112d <F_0_714+0x5a5b>
	movb   $0x0,(%rcx)
	lea    0x2(%r10),%r13
	mov    %r15,%rcx
	mov    %rdi,%r15
	mov    -0x38(%rbp),%r10
	jmpq   10ed8 <F_0_714+0x5806>
	add    $0x1,%r14d
	movswq 0x7e(%rsi),%rsi
	test   %si,%si
	je     11dd1 <F_0_714+0x66ff>
	mov    %rsi,%r11
	sar    $0x1f,%r11d
	mov    %r11,%rcx
	xor    %esi,%ecx
	sub    %r11d,%ecx
	movslq %ecx,%rcx
	movzbl (%rcx,%rax,1),%eax
	jmpq   11e80 <F_0_714+0x67ae>
	cmp    $0x2f,%edx
	jle    11c7d <F_0_714+0x65ab>
	lea    0x38(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%rax
	cmp    $0xff,%r15b
	jne    11be1 <F_0_714+0x650f>
	movb   $0x0,(%rax)
	lea    0x2(%r13),%rax
	lea    0x30(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,(%rax)
	lea    0x1(%rax),%r13
	cmp    $0xff,%r15b
	jne    11c00 <F_0_714+0x652e>
	movb   $0x0,0x0(%r13)
	lea    0x2(%rax),%r13
	lea    0x28(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%rax
	cmp    $0xff,%r15b
	jne    11c1e <F_0_714+0x654c>
	movb   $0x0,(%rax)
	lea    0x2(%r13),%rax
	lea    0x20(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,(%rax)
	lea    0x1(%rax),%r13
	cmp    $0xff,%r15b
	jne    11c3d <F_0_714+0x656b>
	movb   $0x0,0x0(%r13)
	lea    0x2(%rax),%r13
	lea    0x18(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%rax
	cmp    $0xff,%r15b
	jne    11c5b <F_0_714+0x6589>
	movb   $0x0,(%rax)
	lea    0x2(%r13),%rax
	lea    -0x30(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %rcx,%rdx
	mov    %r15b,(%rax)
	lea    0x1(%rax),%r13
	cmp    $0xff,%r15b
	jne    11c7d <F_0_714+0x65ab>
	movb   $0x0,0x0(%r13)
	lea    0x2(%rax),%r13
	mov    %rbx,%rcx
	shl    %cl,%rdi
	mov    %rcx,%rbx
	or     %r9,%rdi
	add    %ebx,%edx
	add    $0xfffffff0,%r14d
	cmp    $0xf,%r14d
	jg     11bba <F_0_714+0x64e8>
	shl    $0x4,%r14d
	mov    -0x128(%rbp),%rcx
	lea    (%rcx,%r14,1),%eax
	movslq %eax,%rax
	movslq (%r8,%rax,4),%r14
	movsbq 0x400(%r8,%rax,1),%rax
	cmp    $0x1f,%edx
	jg     11ee6 <F_0_714+0x6814>
	mov    %rdi,%r15
	shl    %cl,%r12
	lea    -0x1(%r12),%edi
	mov    -0x40(%rbp),%r12
	add    %r12d,%r11d
	and    %r11d,%edi
	movslq %edi,%rdi
	mov    %rcx,%r11
	mov    %rax,%rcx
	shl    %cl,%r15
	mov    %rcx,%rax
	or     %r15,%r14
	mov    %r11,%rcx
	shl    %cl,%r14
	or     %r14,%rdi
	add    %edx,%eax
	lea    (%rcx,%rax,1),%edx
	mov    $0x1,%r12d
	lea    0x375b1(%rip),%rax        # 492b4 <jpeg_nbits_table>
	xor    %r14d,%r14d
	jmpq   11b91 <F_0_714+0x64bf>
	mov    %rcx,%r15
	lea    0x38(%rdx),%ecx
	mov    %rdi,%r12
	shr    %cl,%r12
	mov    %r12b,0x0(%r13)
	lea    0x1(%r13),%rcx
	cmp    $0xff,%r12b
	je     11f0c <F_0_714+0x683a>
	mov    %rcx,%r12
	jmpq   11f13 <F_0_714+0x6841>
	movb   $0x0,(%rcx)
	lea    0x2(%r13),%r12
	lea    0x30(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %r13b,(%r12)
	lea    0x1(%r12),%rcx
	cmp    $0xff,%r13b
	je     11f37 <F_0_714+0x6865>
	mov    %rcx,%r12
	jmpq   11f3e <F_0_714+0x686c>
	movb   $0x0,(%rcx)
	add    $0x2,%r10
	lea    0x28(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %r13b,(%r10)
	lea    0x1(%r10),%rcx
	cmp    $0xff,%r13b
	je     11f62 <F_0_714+0x6890>
	mov    %rcx,%r10
	jmpq   11f69 <F_0_714+0x6897>
	movb   $0x0,(%rcx)
	add    $0x2,%r10
	lea    -0x20(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %rcx,%rdx
	mov    %r13b,(%r10)
	lea    0x1(%r10),%rcx
	cmp    $0xff,%r13b
	je     11f98 <F_0_714+0x68c6>
	mov    %rcx,%r13
	mov    %r15,%rcx
	mov    %rdi,%r15
	mov    -0x38(%rbp),%r10
	jmpq   11384 <F_0_714+0x5cb2>
	movb   $0x0,(%rcx)
	lea    0x2(%r10),%r13
	mov    %r15,%rcx
	mov    %rdi,%r15
	mov    -0x38(%rbp),%r10
	jmpq   1112d <F_0_714+0x5a5b>
	lea    0x1(%r14),%eax
	test   %eax,%eax
	jle    11e01 <F_0_714+0x672f>
	movslq (%r8),%rsi
	movsbq 0x400(%r8),%rax
	cmp    $0x2f,%edx
	jg     11fae <F_0_714+0x68dc>
	mov    %rdi,%rcx
	mov    %rsi,%rdi
	mov    %rcx,%rsi
	mov    %rax,%rcx
	shl    %cl,%rsi
	or     %rsi,%rdi
	add    %ecx,%edx
	mov    -0x8(%rbp),%r14
	mov    %rdi,0x10(%r14)
	mov    %edx,0x18(%r14)
	test   %r10d,%r10d
	jg     1206d <F_0_714+0x699b>
	mov    (%r14),%rax
	mov    %r13,%rcx
	sub    %rax,%rcx
	mov    0x8(%r14),%rax
	sub    %rcx,%rax
	mov    %rax,0x8(%r14)
	mov    %r13,(%r14)
	mov    %r12,%rax
	mov    -0x18(%rbp),%r12
	mov    -0x10(%rbp),%rbx
	mov    -0x20(%rbp),%r13
	mov    -0x28(%rbp),%r14
	mov    -0x30(%rbp),%r15
	leaveq 
	retq   
	movb   $0x0,(%rcx)
	add    $0x2,%r13
	lea    -0x30(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %rcx,%rdx
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%rcx
	cmp    $0xff,%r15b
	je     1207c <F_0_714+0x69aa>
	mov    %rcx,%r13
	mov    %rbx,%rcx
	shl    %cl,%rdi
	mov    %rcx,%rbx
	or     %r9,%rdi
	add    %ebx,%edx
	add    $0xfffffff0,%r14d
	cmp    $0xf,%r14d
	jg     12088 <F_0_714+0x69b6>
	shl    $0x4,%r14d
	lea    (%rax,%r14,1),%ecx
	movslq %ecx,%rcx
	movslq (%r8,%rcx,4),%r9
	movsbq 0x400(%r8,%rcx,1),%rbx
	cmp    $0x1f,%edx
	jg     120b4 <F_0_714+0x69e2>
	mov    %rdi,%r14
	mov    %rax,%rcx
	mov    %r12,%rax
	shl    %cl,%rax
	add    $0xffffffff,%eax
	add    %r11d,%esi
	and    %esi,%eax
	movslq %eax,%rdi
	mov    %rcx,%rsi
	mov    %rbx,%rcx
	shl    %cl,%r14
	mov    %rcx,%rax
	or     %r14,%r9
	mov    %rsi,%rcx
	shl    %cl,%r9
	or     %r9,%rdi
	add    %edx,%eax
	lea    (%rax,%rcx,1),%edx
	xor    %eax,%eax
	jmpq   11dd5 <F_0_714+0x6703>
	mov    %rcx,%r15
	lea    0x38(%rdx),%ecx
	mov    %rdi,%r12
	shr    %cl,%r12
	mov    %r12b,0x0(%r13)
	lea    0x1(%r13),%rcx
	cmp    $0xff,%r12b
	je     12136 <F_0_714+0x6a64>
	mov    %rcx,%r12
	jmpq   1213d <F_0_714+0x6a6b>
	movb   $0x0,(%rcx)
	lea    0x2(%r13),%r12
	lea    0x30(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %r13b,(%r12)
	lea    0x1(%r12),%rcx
	cmp    $0xff,%r13b
	je     12161 <F_0_714+0x6a8f>
	mov    %rcx,%r12
	jmpq   12168 <F_0_714+0x6a96>
	movb   $0x0,(%rcx)
	add    $0x2,%r12
	lea    0x28(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %r13b,(%r12)
	lea    0x1(%r12),%rcx
	cmp    $0xff,%r13b
	je     1218c <F_0_714+0x6aba>
	mov    %rcx,%r12
	jmpq   12193 <F_0_714+0x6ac1>
	movb   $0x0,(%rcx)
	add    $0x2,%r10
	lea    -0x20(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %rcx,%rdx
	mov    %r13b,(%r10)
	lea    0x1(%r10),%rcx
	cmp    $0xff,%r13b
	je     121c6 <F_0_714+0x6af4>
	mov    %rcx,%r13
	mov    %r15,%rcx
	mov    %rdi,%r15
	mov    -0x38(%rbp),%r10
	jmpq   115db <F_0_714+0x5f09>
	movb   $0x0,(%rcx)
	lea    0x2(%r10),%r13
	mov    %r15,%rcx
	mov    %rdi,%r15
	mov    -0x38(%rbp),%r10
	jmpq   11384 <F_0_714+0x5cb2>
	lea    0x38(%rdx),%ecx
	mov    %rdi,%r8
	shr    %cl,%r8
	mov    %r8b,0x0(%r13)
	lea    0x1(%r13),%rbx
	cmp    $0xff,%r8b
	jne    11fcc <F_0_714+0x68fa>
	movb   $0x0,(%rbx)
	lea    0x2(%r13),%rbx
	lea    0x30(%rdx),%ecx
	mov    %rdi,%r9
	shr    %cl,%r9
	mov    %r9b,(%rbx)
	lea    0x1(%rbx),%r8
	cmp    $0xff,%r9b
	jne    11fea <F_0_714+0x6918>
	movb   $0x0,(%r8)
	lea    0x2(%rbx),%r8
	lea    0x28(%rdx),%ecx
	mov    %rdi,%r9
	shr    %cl,%r9
	mov    %r9b,(%r8)
	lea    0x1(%r8),%rbx
	cmp    $0xff,%r9b
	jne    12007 <F_0_714+0x6935>
	movb   $0x0,(%rbx)
	lea    0x2(%r8),%rbx
	lea    0x20(%rdx),%ecx
	mov    %rdi,%r9
	shr    %cl,%r9
	mov    %r9b,(%rbx)
	lea    0x1(%rbx),%r8
	cmp    $0xff,%r9b
	jne    12025 <F_0_714+0x6953>
	movb   $0x0,(%r8)
	lea    0x2(%rbx),%r8
	lea    0x18(%rdx),%ecx
	mov    %rdi,%r9
	shr    %cl,%r9
	mov    %r9b,(%r8)
	lea    0x1(%r8),%rbx
	cmp    $0xff,%r9b
	jne    12042 <F_0_714+0x6970>
	movb   $0x0,(%rbx)
	lea    0x2(%r8),%rbx
	lea    -0x30(%rdx),%ecx
	mov    %rdi,%r8
	shr    %cl,%r8
	mov    %rcx,%rdx
	mov    %r8b,(%rbx)
	lea    0x1(%rbx),%r13
	cmp    $0xff,%r8b
	je     121dc <F_0_714+0x6b0a>
	mov    %rdi,%rcx
	mov    %rsi,%rdi
	mov    %rcx,%rsi
	jmpq   11df6 <F_0_714+0x6724>
	lea    -0x228(%rbp),%rbx
	sub    %rbx,%r13
	jmpq   1223f <F_0_714+0x6b6d>
	movb   $0x0,(%rcx)
	add    $0x2,%r13
	jmpq   11e6e <F_0_714+0x679c>
	cmp    $0x2f,%edx
	jle    11e6e <F_0_714+0x679c>
	lea    0x38(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%rcx
	cmp    $0xff,%r15b
	je     1225d <F_0_714+0x6b8b>
	mov    %rcx,%r13
	jmpq   12264 <F_0_714+0x6b92>
	lea    0x38(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    120d3 <F_0_714+0x6a01>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    0x30(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	jne    120f2 <F_0_714+0x6a20>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	lea    0x28(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%r14
	cmp    $0xff,%r15b
	jne    12111 <F_0_714+0x6a3f>
	movb   $0x0,(%r14)
	lea    0x2(%r13),%r14
	lea    -0x20(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %rcx,%rdx
	mov    %r15b,(%r14)
	lea    0x1(%r14),%r13
	cmp    $0xff,%r15b
	je     12287 <F_0_714+0x6bb5>
	mov    %rdi,%r14
	jmpq   11eae <F_0_714+0x67dc>
	movb   $0x0,(%rcx)
	lea    0x2(%r13),%r12
	lea    0x30(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %r13b,(%r12)
	lea    0x1(%r12),%rcx
	cmp    $0xff,%r13b
	je     12298 <F_0_714+0x6bc6>
	mov    %rcx,%r12
	jmpq   1229f <F_0_714+0x6bcd>
	movb   $0x0,(%rcx)
	add    $0x2,%r12
	lea    0x28(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %r13b,(%r12)
	lea    0x1(%r12),%rcx
	cmp    $0xff,%r13b
	je     122c3 <F_0_714+0x6bf1>
	mov    %rcx,%r12
	jmpq   122ca <F_0_714+0x6bf8>
	movb   $0x0,(%rcx)
	add    $0x2,%r12
	lea    -0x20(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %rcx,%rdx
	mov    %r13b,(%r12)
	lea    0x1(%r12),%rcx
	cmp    $0xff,%r13b
	je     122fd <F_0_714+0x6c2b>
	mov    %rcx,%r13
	mov    %r15,%rcx
	mov    %rdi,%r15
	mov    $0x1,%r12d
	jmpq   1182f <F_0_714+0x615d>
	movb   $0x0,(%rcx)
	lea    0x2(%r10),%r13
	mov    %r15,%rcx
	mov    %rdi,%r15
	mov    -0x38(%rbp),%r10
	jmpq   115db <F_0_714+0x5f09>
	movb   $0x0,0x0(%r13)
	lea    0x2(%rbx),%r13
	mov    %rdi,%rcx
	mov    %rsi,%rdi
	mov    %rcx,%rsi
	jmpq   11df6 <F_0_714+0x6724>
	mov    0x8(%r14),%r15
	cmp    %r13,%r15
	jbe    121ff <F_0_714+0x6b2d>
	mov    %r13,%r15
	mov    (%r14),%rdi
	mov    %rbx,%rsi
	mov    %r15,%rdx
	callq  42c0 <memcpy@plt>
	mov    %r15,%rax
	add    (%r14),%rax
	mov    %rax,(%r14)
	mov    0x8(%r14),%rcx
	mov    %rcx,%rax
	sub    %r15,%rax
	mov    %rax,0x8(%r14)
	cmp    %r15,%rcx
	jne    12239 <F_0_714+0x6b67>
	mov    %r14,%rdi
	callq  8e40 <dump_buffer>
	test   %eax,%eax
	je     12316 <F_0_714+0x6c44>
	sub    %r15,%r13
	add    %r15,%rbx
	test   %r13,%r13
	jne    121f3 <F_0_714+0x6b21>
	mov    %r12,%rax
	mov    -0x18(%rbp),%r12
	mov    -0x10(%rbp),%rbx
	mov    -0x20(%rbp),%r13
	mov    -0x28(%rbp),%r14
	mov    -0x30(%rbp),%r15
	leaveq 
	retq   
	movb   $0x0,(%rcx)
	add    $0x2,%r13
	lea    0x30(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%rcx
	cmp    $0xff,%r15b
	je     1232e <F_0_714+0x6c5c>
	mov    %rcx,%r13
	jmpq   12335 <F_0_714+0x6c63>
	movb   $0x0,0x0(%r13)
	lea    0x2(%r14),%r13
	mov    %rdi,%r14
	jmpq   11eae <F_0_714+0x67dc>
	movb   $0x0,(%rcx)
	add    $0x2,%r12
	lea    0x28(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %r13b,(%r12)
	lea    0x1(%r12),%rcx
	cmp    $0xff,%r13b
	je     12351 <F_0_714+0x6c7f>
	mov    %rcx,%r12
	jmpq   12358 <F_0_714+0x6c86>
	movb   $0x0,(%rcx)
	add    $0x2,%r12
	lea    -0x20(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %rcx,%rdx
	mov    %r13b,(%r12)
	lea    0x1(%r12),%rcx
	cmp    $0xff,%r13b
	je     12387 <F_0_714+0x6cb5>
	mov    %rcx,%r13
	mov    %r15,%rcx
	mov    %rdi,%r15
	mov    $0x1,%r12d
	jmpq   11a80 <F_0_714+0x63ae>
	movb   $0x0,(%rcx)
	lea    0x2(%r12),%r13
	mov    %r15,%rcx
	mov    %rdi,%r15
	mov    $0x1,%r12d
	jmpq   1182f <F_0_714+0x615d>
	mov    -0x18(%rbp),%r12
	xor    %eax,%eax
	mov    -0x10(%rbp),%rbx
	mov    -0x20(%rbp),%r13
	mov    -0x28(%rbp),%r14
	mov    -0x30(%rbp),%r15
	leaveq 
	retq   
	movb   $0x0,(%rcx)
	add    $0x2,%r13
	lea    0x28(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%rcx
	cmp    $0xff,%r15b
	je     123a0 <F_0_714+0x6cce>
	mov    %rcx,%r13
	jmp    123a7 <F_0_714+0x6cd5>
	movb   $0x0,(%rcx)
	add    $0x2,%r12
	lea    -0x20(%rdx),%ecx
	mov    %rdi,%r13
	shr    %cl,%r13
	mov    %rcx,%rdx
	mov    %r13b,(%r12)
	lea    0x1(%r12),%rcx
	cmp    $0xff,%r13b
	je     123c3 <F_0_714+0x6cf1>
	mov    %rcx,%r13
	mov    %r15,%rcx
	mov    %rdi,%r15
	mov    $0x1,%r12d
	jmpq   11cc4 <F_0_714+0x65f2>
	movb   $0x0,(%rcx)
	lea    0x2(%r12),%r13
	mov    %r15,%rcx
	mov    %rdi,%r15
	mov    $0x1,%r12d
	jmpq   11a80 <F_0_714+0x63ae>
	movb   $0x0,(%rcx)
	add    $0x2,%r13
	lea    0x20(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%rcx
	cmp    $0xff,%r15b
	je     123dc <F_0_714+0x6d0a>
	mov    %rcx,%r13
	jmp    123e3 <F_0_714+0x6d11>
	movb   $0x0,(%rcx)
	lea    0x2(%r12),%r13
	mov    %r15,%rcx
	mov    %rdi,%r15
	mov    $0x1,%r12d
	jmpq   11cc4 <F_0_714+0x65f2>
	movb   $0x0,(%rcx)
	add    $0x2,%r13
	lea    0x18(%rdx),%ecx
	mov    %rdi,%r15
	shr    %cl,%r15
	mov    %r15b,0x0(%r13)
	lea    0x1(%r13),%rcx
	cmp    $0xff,%r15b
	je     11e46 <F_0_714+0x6774>
	mov    %rcx,%r13
	jmpq   11e4d <F_0_714+0x677b>
	nopw   %cs:0x0(%rax,%rax,1)

0012410 <emit_restart>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %r15,-0x8(%rbp)
	mov    %rsi,-0x10(%rbp)
	mov    %rdi,%r15
	callq  8e90 <flush_bits>
	test   %eax,%eax
	jne    12434 <emit_restart+0x24>
	xor    %eax,%eax
	mov    -0x8(%rbp),%r15
	leaveq 
	retq   
	mov    (%r15),%rcx
	lea    0x1(%rcx),%rax
	mov    %rax,(%r15)
	movb   $0xff,(%rcx)
	mov    0x8(%r15),%rax
	add    $0xffffffffffffffff,%rax
	mov    %rax,0x8(%r15)
	test   %rax,%rax
	je     1247c <emit_restart+0x6c>
	mov    (%r15),%rcx
	lea    0x1(%rcx),%rax
	mov    %rax,(%r15)
	mov    -0x10(%rbp),%rax
	add    $0xd0,%eax
	mov    %al,(%rcx)
	mov    0x8(%r15),%rax
	add    $0xffffffffffffffff,%rax
	mov    %rax,0x8(%r15)
	test   %rax,%rax
	je     12490 <emit_restart+0x80>
	xor    %eax,%eax
	jmp    124af <emit_restart+0x9f>
	mov    %r15,%rdi
	callq  8e40 <dump_buffer>
	test   %eax,%eax
	jne    12452 <emit_restart+0x42>
	xor    %eax,%eax
	mov    -0x8(%rbp),%r15
	leaveq 
	retq   
	mov    %r15,%rdi
	callq  8e40 <dump_buffer>
	test   %eax,%eax
	je     124c9 <emit_restart+0xb9>
	xor    %eax,%eax
	jmp    124af <emit_restart+0x9f>
	movslq %eax,%rcx
	movl   $0x0,0x1c(%r15,%rcx,4)
	add    $0x1,%eax
	mov    0x30(%r15),%rcx
	movslq 0x144(%rcx),%rcx
	cmp    %eax,%ecx
	jg     124a0 <emit_restart+0x90>
	mov    $0x1,%eax
	mov    -0x8(%rbp),%r15
	leaveq 
	retq   
	xor    %eax,%eax
	mov    -0x8(%rbp),%r15
	leaveq 
	retq   
	data16 nopw %cs:0x0(%rax,%rax,1)
	nopl   0x0(%rax)

00124e0 <htest_one_block>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x40,%rsp
	mov    %rbx,-0x8(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %r15,-0x28(%rbp)
	mov    %rdi,-0x38(%rbp)
	mov    %rsi,-0x30(%rbp)
	xor    %r9d,%r9d
	movswq (%rsi),%rbx
	mov    %rbx,%rax
	sub    %edx,%eax
	test   %eax,%eax
	js     12519 <htest_one_block+0x39>
	mov    %r9,%rbx
	jmp    12528 <htest_one_block+0x48>
	mov    %rdx,%rax
	sub    %ebx,%eax
	mov    %r9,%rbx
	jmp    12528 <htest_one_block+0x48>
	sar    %eax
	add    $0x1,%ebx
	test   %eax,%eax
	jne    12523 <htest_one_block+0x43>
	cmp    $0xb,%ebx
	jg     12536 <htest_one_block+0x56>
	mov    %r8,%r13
	jmp    12561 <htest_one_block+0x81>
	mov    (%rdi),%rax
	movl   $0x6,0x28(%rax)
	mov    (%rdi),%rax
	mov    (%rax),%rax
	mov    %r9,%r12
	mov    %r8,%r13
	mov    %rsi,%r14
	mov    %rcx,%r15
	callq  *%rax
	mov    %r15,%rcx
	mov    %r14,%rsi
	mov    %r12,%r9
	mov    -0x38(%rbp),%rdi
	mov    0x5ba70(%rip),%r14        # 6dfd8 <jpeg_natural_order@@LIBJPEG_6.2+0x129f4>
	movslq %ebx,%rax
	lea    (%rcx,%rax,8),%rcx
	mov    (%rcx),%rax
	add    $0x1,%rax
	mov    %rax,(%rcx)
	mov    $0x1,%edx
	mov    %rdx,%r15
	mov    %r9,%rbx
	jmp    1259e <htest_one_block+0xbe>
	movslq %r15d,%rax
	movslq (%r14,%rax,4),%rax
	movswq (%rsi,%rax,2),%rax
	test   %ax,%ax
	jne    125d3 <htest_one_block+0xf3>
	add    $0x1,%ebx
	add    $0x1,%r15d
	cmp    $0x3f,%r15d
	jle    12586 <htest_one_block+0xa6>
	test   %ebx,%ebx
	jg     125e2 <htest_one_block+0x102>
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	leaveq 
	retq   
	mov    0x780(%r13),%rcx
	add    $0x1,%rcx
	mov    %rcx,0x780(%r13)
	add    $0xfffffff0,%ebx
	cmp    $0xf,%ebx
	jg     125be <htest_one_block+0xde>
	test   %ax,%ax
	js     12604 <htest_one_block+0x124>
	mov    %rdx,%r12
	jmp    12611 <htest_one_block+0x131>
	mov    0x0(%r13),%rax
	add    $0x1,%rax
	mov    %rax,0x0(%r13)
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	leaveq 
	retq   
	neg    %eax
	mov    %rdx,%r12
	jmp    12611 <htest_one_block+0x131>
	sar    %eax
	add    $0x1,%r12d
	mov    %rax,%rcx
	and    $0xfffffffe,%ecx
	test   %ecx,%ecx
	jne    1260b <htest_one_block+0x12b>
	cmp    $0xa,%r12d
	jle    12643 <htest_one_block+0x163>
	mov    (%rdi),%rax
	movl   $0x6,0x28(%rax)
	mov    (%rdi),%rax
	mov    (%rax),%rax
	callq  *%rax
	mov    $0x1,%edx
	xor    %r9d,%r9d
	mov    -0x30(%rbp),%rsi
	mov    -0x38(%rbp),%rdi
	shl    $0x4,%ebx
	lea    (%r12,%rbx,1),%eax
	movslq %eax,%rcx
	mov    0x0(%r13,%rcx,8),%rax
	add    $0x1,%rax
	mov    %rax,0x0(%r13,%rcx,8)
	mov    %r9,%rbx
	jmpq   1259a <htest_one_block+0xba>
	nopw   %cs:0x0(%rax,%rax,1)
	nopl   (%rax)

0012670 <jinit_compress_master>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %r15,-0x8(%rbp)
	xor    %esi,%esi
	mov    %rdi,%r15
	callq  43c0 <jinit_c_master_control@plt>
	movslq 0x100(%r15),%rax
	test   %eax,%eax
	jne    126ab <jinit_compress_master+0x3b>
	mov    %r15,%rdi
	callq  41b0 <jinit_color_converter@plt>
	mov    %r15,%rdi
	callq  4480 <jinit_downsampler@plt>
	mov    %r15,%rdi
	xor    %esi,%esi
	callq  42e0 <jinit_c_prep_controller@plt>
	mov    %r15,%rdi
	callq  41a0 <jinit_forward_dct@plt>
	movslq 0x104(%r15),%rax
	test   %eax,%eax
	jne    126d3 <jinit_compress_master+0x63>
	movslq 0x134(%r15),%rax
	test   %eax,%eax
	jne    12728 <jinit_compress_master+0xb8>
	mov    %r15,%rdi
	callq  4080 <jinit_huff_encoder@plt>
	jmp    126db <jinit_compress_master+0x6b>
	mov    %r15,%rdi
	callq  4190 <jinit_arith_encoder@plt>
	mov    $0x1,%esi
	movslq 0xf0(%r15),%rax
	cmp    $0x1,%eax
	jle    12732 <jinit_compress_master+0xc2>
	mov    %r15,%rdi
	callq  4380 <jinit_c_coef_controller@plt>
	mov    %r15,%rdi
	xor    %esi,%esi
	callq  4140 <jinit_c_main_controller@plt>
	mov    %r15,%rdi
	callq  4120 <jinit_marker_writer@plt>
	mov    0x8(%r15),%rax
	mov    0x30(%rax),%rax
	mov    %r15,%rdi
	callq  *%rax
	mov    0x1d0(%r15),%rax
	mov    (%rax),%rax
	mov    %r15,%rdi
	callq  *%rax
	mov    -0x8(%rbp),%r15
	leaveq 
	retq   
	mov    %r15,%rdi
	callq  4460 <jinit_phuff_encoder@plt>
	jmp    126db <jinit_compress_master+0x6b>
	movslq 0x108(%r15),%rax
	test   %eax,%eax
	jne    126ec <jinit_compress_master+0x7c>
	xor    %esi,%esi
	jmp    126ec <jinit_compress_master+0x7c>
	nopw   %cs:0x0(%rax,%rax,1)
	nopl   0x0(%rax,%rax,1)

0012750 <jinit_c_main_controller>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %r15,-0x20(%rbp)
	mov    %rsi,-0x28(%rbp)
	mov    0x8(%rdi),%rax
	mov    (%rax),%rax
	mov    %rbx,%r15
	mov    $0x1,%esi
	mov    $0x70,%edx
	mov    %rdi,%rbx
	callq  *%rax
	mov    %rax,0x1b8(%rbx)
	lea    0x219(%rip),%rcx        # 129a0 <start_pass_main>
	mov    %rcx,(%rax)
	movslq 0x100(%rbx),%rcx
	test   %ecx,%ecx
	je     1279e <jinit_c_main_controller+0x4e>
	mov    %r15,%rbx
	mov    -0x20(%rbp),%r15
	leaveq 
	retq   
	mov    -0x28(%rbp),%rcx
	test   %ecx,%ecx
	jne    127cd <jinit_c_main_controller+0x7d>
	mov    0x58(%rbx),%rdx
	xor    %ecx,%ecx
	mov    %r15,-0x8(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    %r14,-0x28(%rbp)
	mov    %rdx,%r12
	mov    %rax,%r13
	mov    %rcx,%r15
	mov    $0x1,%r14d
	jmp    1281b <jinit_c_main_controller+0xcb>
	mov    (%rbx),%rax
	movl   $0x4,0x28(%rax)
	mov    (%rbx),%rax
	mov    (%rax),%rax
	mov    %rbx,%rdi
	mov    %r15,%rbx
	callq  *%rax
	mov    -0x20(%rbp),%r15
	leaveq 
	retq   
	mov    0x8(%rbx),%rax
	mov    0x10(%rax),%rax
	mov    0x1c(%r12),%edx
	shl    $0x3,%edx
	mov    0xc(%r12),%ecx
	shl    $0x3,%ecx
	mov    %rbx,%rdi
	mov    %r14,%rsi
	callq  *%rax
	movslq %r15d,%rcx
	mov    %rax,0x20(%r13,%rcx,8)
	add    $0x1,%r15d
	add    $0x60,%r12
	movslq 0x4c(%rbx),%rax
	cmp    %r15d,%eax
	jg     127eb <jinit_c_main_controller+0x9b>
	mov    -0x28(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	mov    -0x20(%rbp),%r15
	leaveq 
	retq   
	nopw   0x0(%rax,%rax,1)

0012840 <process_data_simple_main>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x40,%rsp
	mov    %rsi,-0x30(%rbp)
	mov    %rcx,-0x38(%rbp)
	mov    %rbx,-0x8(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %r15,-0x28(%rbp)
	mov    0x1b8(%rdi),%r13
	lea    0x20(%r13),%rax
	mov    %rax,-0x40(%rbp)
	lea    0x14(%r13),%r15
	mov    %rsi,%rbx
	mov    %rax,%rsi
	mov    %rdi,%r12
	mov    %rdx,%r14
	jmpq   1291b <process_data_simple_main+0xdb>
	mov    0x14(%r13),%eax
	cmp    $0x7,%eax
	ja     128ca <process_data_simple_main+0x8a>
	sub    $0x10,%rsp
	mov    0x1c0(%r12),%rax
	mov    0x8(%rax),%rax
	mov    %rbx,%r10
	mov    %rsi,%rbx
	mov    %r10,%rsi
	movl   $0x8,(%rsp)
	mov    %r12,%rdi
	mov    %r14,%rdx
	mov    %rbx,%r8
	mov    %r15,%r9
	callq  *%rax
	add    $0x10,%rsp
	mov    %rbx,%rsi
	mov    -0x30(%rbp),%rbx
	mov    0x14(%r13),%eax
	cmp    $0x8,%eax
	jne    12943 <process_data_simple_main+0x103>
	mov    0x1c8(%r12),%rax
	mov    0x8(%rax),%rax
	mov    %r12,%rdi
	callq  *%rax
	test   %eax,%eax
	je     12959 <process_data_simple_main+0x119>
	movslq 0x18(%r13),%rax
	test   %eax,%eax
	je     12901 <process_data_simple_main+0xc1>
	mov    (%r14),%eax
	add    $0x1,%eax
	mov    %eax,(%r14)
	movl   $0x0,0x18(%r13)
	movl   $0x0,(%r15)
	mov    0x10(%r13),%eax
	add    $0x1,%eax
	mov    %eax,0x10(%r13)
	mov    -0x40(%rbp),%rsi
	mov    -0x38(%rbp),%rcx
	mov    0x140(%r12),%eax
	cmp    0x10(%r13),%eax
	ja     12888 <process_data_simple_main+0x48>
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	leaveq 
	retq   
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	leaveq 
	retq   
	movslq 0x18(%r13),%rax
	test   %eax,%eax
	je     12977 <process_data_simple_main+0x137>
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	leaveq 
	retq   
	mov    (%r14),%eax
	add    $0xffffffff,%eax
	mov    %eax,(%r14)
	movl   $0x1,0x18(%r13)
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	leaveq 
	retq   
	xchg   %ax,%ax

00129a0 <start_pass_main>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    0x1b8(%rdi),%rax
	movslq 0x100(%rdi),%rcx
	test   %ecx,%ecx
	je     129bc <start_pass_main+0x1c>
	leaveq 
	retq   
	test   %esi,%esi
	je     129ee <start_pass_main+0x4e>
	mov    (%rdi),%rcx
	movl   $0x4,0x28(%rcx)
	mov    (%rdi),%rcx
	mov    (%rcx),%rcx
	mov    %r14,-0x8(%rbp)
	mov    %r15,-0x10(%rbp)
	mov    %rax,%r14
	mov    %rsi,%r15
	callq  *%rcx
	mov    %r14,%rax
	mov    %r15,%rsi
	mov    -0x10(%rbp),%r15
	mov    -0x8(%rbp),%r14
	movl   $0x0,0x10(%rax)
	movl   $0x0,0x14(%rax)
	movl   $0x0,0x18(%rax)
	mov    %esi,0x1c(%rax)
	lea    -0x1cd(%rip),%rcx        # 12840 <process_data_simple_main>
	mov    %rcx,0x8(%rax)
	leaveq 
	retq   
	nopw   %cs:0x0(%rax,%rax,1)
	nopl   (%rax)

0012a20 <jinit_marker_writer>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %r15,-0x8(%rbp)
	mov    0x8(%rdi),%rax
	mov    (%rax),%rax
	mov    $0x1,%esi
	mov    $0x40,%edx
	mov    %rdi,%r15
	callq  *%rax
	mov    %rax,0x1d0(%r15)
	lea    0x9f0(%rip),%rcx        # 13440 <write_file_header>
	mov    %rcx,(%rax)
	lea    0xa56(%rip),%rcx        # 134b0 <write_frame_header>
	mov    %rcx,0x8(%rax)
	lea    0xc0b(%rip),%rcx        # 13670 <write_scan_header>
	mov    %rcx,0x10(%rax)
	lea    0xd00(%rip),%rcx        # 13770 <write_file_trailer>
	mov    %rcx,0x18(%rax)
	lea    0xd05(%rip),%rcx        # 13780 <write_tables_only>
	mov    %rcx,0x20(%rax)
	lea    0x93a(%rip),%rcx        # 133c0 <write_marker_header>
	mov    %rcx,0x28(%rax)
	lea    0x99f(%rip),%rcx        # 13430 <write_marker_byte>
	mov    %rcx,0x30(%rax)
	movl   $0x0,0x38(%rax)
	mov    -0x8(%rbp),%r15
	leaveq 
	retq   
	data16 nopw %cs:0x0(%rax,%rax,1)
	nopl   (%rax)

0012ab0 <emit_byte>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    0x28(%rdi),%rcx
	mov    (%rcx),%rax
	lea    0x1(%rax),%rdx
	mov    %rdx,(%rcx)
	mov    %sil,(%rax)
	mov    0x8(%rcx),%rax
	add    $0xffffffffffffffff,%rax
	mov    %rax,0x8(%rcx)
	test   %rax,%rax
	je     12adc <emit_byte+0x2c>
	leaveq 
	retq   
	mov    %rdi,%rax
	mov    %r15,-0x8(%rbp)
	mov    %rdi,%r15
	mov    %rax,%rdi
	callq  *0x18(%rcx)
	test   %eax,%eax
	je     12af6 <emit_byte+0x46>
	mov    -0x8(%rbp),%r15
	leaveq 
	retq   
	mov    (%r15),%rax
	movl   $0x18,0x28(%rax)
	mov    (%r15),%rax
	mov    (%rax),%rax
	mov    %r15,%rdi
	callq  *%rax
	mov    -0x8(%rbp),%r15
	leaveq 
	retq   
	data16 nopw %cs:0x0(%rax,%rax,1)
	nopl   0x0(%rax)

0012b20 <emit_marker>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %r14,-0x8(%rbp)
	mov    %r15,-0x10(%rbp)
	mov    %rsi,%r15
	mov    $0xff,%esi
	mov    %rdi,%r14
	callq  12ab0 <emit_byte>
	mov    %r15,%rsi
	mov    %r14,%rdi
	callq  12ab0 <emit_byte>
	mov    -0x10(%rbp),%r15
	mov    -0x8(%rbp),%r14
	leaveq 
	retq   
	data16 nopw %cs:0x0(%rax,%rax,1)

0012b60 <emit_2bytes>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %r14,-0x8(%rbp)
	mov    %r15,-0x10(%rbp)
	mov    %rsi,%rax
	and    $0xff00,%eax
	shr    $0x8,%eax
	mov    %rsi,%r15
	mov    %rax,%rsi
	mov    %rdi,%r14
	callq  12ab0 <emit_byte>
	movzbl %r15b,%esi
	mov    %r14,%rdi
	callq  12ab0 <emit_byte>
	mov    -0x10(%rbp),%r15
	mov    -0x8(%rbp),%r14
	leaveq 
	retq   
	nop

0012ba0 <emit_dqt>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %r13,-0x20(%rbp)
	mov    %r14,-0x28(%rbp)
	mov    %r15,-0x30(%rbp)
	mov    %rdi,-0x18(%rbp)
	mov    %rsi,-0x10(%rbp)
	xor    %r13d,%r13d
	mov    $0x1,%r14d
	movslq %esi,%rax
	mov    0x60(%rdi,%rax,8),%r15
	mov    %r15,-0x8(%rbp)
	test   %r15,%r15
	je     12be4 <emit_dqt+0x44>
	mov    %r12,%rdx
	mov    %rbx,%r12
	mov    %r13,%rax
	mov    %rax,%rbx
	jmp    12c25 <emit_dqt+0x85>
	mov    (%rdi),%rax
	movl   $0x34,0x28(%rax)
	mov    (%rdi),%rax
	mov    %esi,0x2c(%rax)
	mov    (%rdi),%rax
	mov    (%rax),%rax
	mov    %r12,%rcx
	mov    %rbx,%r12
	mov    %rcx,%rbx
	callq  *%rax
	mov    %rbx,%rdx
	mov    %r13,%rax
	mov    %rax,%rbx
	jmp    12c25 <emit_dqt+0x85>
	movslq %eax,%rcx
	movzwl (%r15,%rcx,2),%ecx
	cmp    $0xff,%cx
	jbe    12c22 <emit_dqt+0x82>
	mov    %r14,%rbx
	add    $0x1,%eax
	cmp    $0x3f,%eax
	jle    12c10 <emit_dqt+0x70>
	movslq 0x80(%r15),%rax
	test   %eax,%eax
	je     12c4c <emit_dqt+0xac>
	mov    %rbx,%rax
	mov    %r12,%rbx
	mov    %rdx,%r12
	mov    -0x30(%rbp),%r15
	mov    -0x28(%rbp),%r14
	mov    -0x20(%rbp),%r13
	leaveq 
	retq   
	mov    $0xdb,%esi
	mov    -0x18(%rbp),%r14
	mov    %r14,%rdi
	mov    %rdx,-0x18(%rbp)
	callq  12b20 <emit_marker>
	test   %ebx,%ebx
	jg     12c6c <emit_dqt+0xcc>
	mov    $0x43,%esi
	jmp    12c71 <emit_dqt+0xd1>
	mov    $0x83,%esi
	mov    %r14,%rdi
	callq  12b60 <emit_2bytes>
	mov    %rbx,%rax
	neg    %eax
	and    $0x10,%eax
	mov    -0x10(%rbp),%rcx
	lea    (%rcx,%rax,1),%esi
	mov    %r14,%rdi
	callq  12ab0 <emit_byte>
	mov    0x5b341(%rip),%rax        # 6dfd8 <jpeg_natural_order@@LIBJPEG_6.2+0x129f4>
	mov    %r12,-0x10(%rbp)
	mov    %rax,%r12
	jmp    12cd7 <emit_dqt+0x137>
	test   %ebx,%ebx
	movslq %r13d,%rax
	movslq (%r12,%rax,4),%rax
	movzwl (%r15,%rax,2),%eax
	jle    12cc8 <emit_dqt+0x128>
	mov    %rax,%r15
	mov    %r15,%rsi
	shr    $0x8,%esi
	mov    %r14,%rdi
	callq  12ab0 <emit_byte>
	mov    %r15,%rax
	mov    -0x8(%rbp),%r15
	movzbl %al,%esi
	mov    %r14,%rdi
	callq  12ab0 <emit_byte>
	add    $0x1,%r13d
	cmp    $0x3f,%r13d
	jle    12ca0 <emit_dqt+0x100>
	movl   $0x1,0x80(%r15)
	mov    %rbx,%rax
	mov    -0x10(%rbp),%rbx
	mov    -0x18(%rbp),%r12
	mov    -0x30(%rbp),%r15
	mov    -0x28(%rbp),%r14
	mov    -0x20(%rbp),%r13
	leaveq 
	retq   
	data16 nopw %cs:0x0(%rax,%rax,1)
	nopl   0x0(%rax)

0012d10 <emit_dht>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %r15,-0x28(%rbp)
	test   %edx,%edx
	jne    12d2d <emit_dht+0x1d>
	movslq %esi,%rax
	mov    0x80(%rdi,%rax,8),%rax
	jmp    12d3b <emit_dht+0x2b>
	movslq %esi,%rax
	mov    0xa0(%rdi,%rax,8),%rax
	add    $0x10,%esi
	test   %rax,%rax
	je     12d57 <emit_dht+0x47>
	mov    %r13,%rdx
	mov    %rbx,%r13
	mov    %rax,%rbx
	mov    %r15,%rax
	mov    %r14,%r15
	mov    %r12,%r14
	mov    %rdi,%r12
	jmp    12d9b <emit_dht+0x8b>
	mov    (%rdi),%rcx
	movl   $0x32,0x28(%rcx)
	mov    (%rdi),%rcx
	mov    %esi,0x2c(%rcx)
	mov    (%rdi),%rcx
	mov    (%rcx),%rcx
	mov    %rdi,%rdx
	mov    %rdi,-0x20(%rbp)
	mov    %rsi,-0x18(%rbp)
	mov    %rdx,%rdi
	mov    %r14,%r15
	mov    %r12,%r14
	mov    %r13,%r12
	mov    %rbx,%r13
	mov    %rax,%rbx
	callq  *%rcx
	mov    %r12,%rdx
	mov    -0x18(%rbp),%rsi
	mov    -0x20(%rbp),%r12
	mov    -0x28(%rbp),%rax
	movslq 0x114(%rbx),%rcx
	test   %ecx,%ecx
	je     12db7 <emit_dht+0xa7>
	mov    %r13,%rbx
	mov    %rdx,%r13
	mov    %r14,%r12
	mov    %r15,%r14
	mov    %rax,%r15
	leaveq 
	retq   
	mov    $0xc4,%eax
	mov    %r12,%rdi
	mov    %rdx,-0x18(%rbp)
	mov    %r15,-0x20(%rbp)
	mov    %rsi,%r15
	mov    %rax,%rsi
	callq  12b20 <emit_marker>
	xor    %eax,%eax
	mov    $0x1,%r8d
	mov    %r8,%rcx
	jmp    12deb <emit_dht+0xdb>
	movslq %ecx,%rdx
	movzbl (%rbx,%rdx,1),%edx
	add    %edx,%eax
	add    $0x1,%ecx
	cmp    $0x10,%ecx
	jle    12ddf <emit_dht+0xcf>
	lea    0x13(%rax),%esi
	mov    %r12,%rdi
	mov    %r13,-0x8(%rbp)
	mov    %r14,-0x10(%rbp)
	mov    %rax,%r13
	mov    %r8,%r14
	callq  12b60 <emit_2bytes>
	mov    %r15,%rsi
	mov    %r12,%rdi
	callq  12ab0 <emit_byte>
	jmp    12e29 <emit_dht+0x119>
	movslq %r14d,%rax
	movzbl (%rbx,%rax,1),%esi
	mov    %r12,%rdi
	callq  12ab0 <emit_byte>
	add    $0x1,%r14d
	cmp    $0x10,%r14d
	jle    12e16 <emit_dht+0x106>
	xor    %r14d,%r14d
	jmp    12e48 <emit_dht+0x138>
	movslq %r14d,%rax
	movzbl 0x11(%rbx,%rax,1),%esi
	mov    %r12,%rdi
	callq  12ab0 <emit_byte>
	add    $0x1,%r14d
	cmp    %r13d,%r14d
	jl     12e34 <emit_dht+0x124>
	movl   $0x1,0x114(%rbx)
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x28(%rbp),%r15
	leaveq 
	retq   
	nopl   (%rax)

0012e70 <emit_dac>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x40,%rsp
	xor    %r8d,%r8d
	mov    %r8,%rax
	jmp    12e90 <emit_dac+0x20>
	movslq %eax,%rcx
	movb   $0x0,-0x28(%rbp,%rcx,1)
	movb   $0x0,-0x38(%rbp,%rcx,1)
	add    $0x1,%eax
	cmp    $0xf,%eax
	jle    12e80 <emit_dac+0x10>
	mov    %r8,%rax
	jmp    12edb <emit_dac+0x6b>
	movslq %eax,%rcx
	mov    0x148(%rdi,%rcx,8),%rdx
	movslq 0x19c(%rdi),%rcx
	test   %ecx,%ecx
	jne    12ec4 <emit_dac+0x54>
	movslq 0x1a4(%rdi),%rcx
	test   %ecx,%ecx
	jne    12ec4 <emit_dac+0x54>
	movslq 0x14(%rdx),%rcx
	movb   $0x1,-0x38(%rbp,%rcx,1)
	movslq 0x1a0(%rdi),%rcx
	test   %ecx,%ecx
	je     12ed8 <emit_dac+0x68>
	movslq 0x18(%rdx),%rcx
	movb   $0x1,-0x28(%rbp,%rcx,1)
	add    $0x1,%eax
	movslq 0x144(%rdi),%rcx
	cmp    %eax,%ecx
	jg     12e9a <emit_dac+0x2a>
	mov    %r8,%rax
	mov    %rax,%rcx
	jmp    12f04 <emit_dac+0x94>
	movslq %ecx,%rdx
	movsbq -0x28(%rbp,%rdx,1),%rsi
	movsbq -0x38(%rbp,%rdx,1),%rdx
	add    %esi,%edx
	add    %edx,%eax
	add    $0x1,%ecx
	cmp    $0xf,%ecx
	jle    12eee <emit_dac+0x7e>
	test   %eax,%eax
	jne    12f0f <emit_dac+0x9f>
	leaveq 
	retq   
	mov    $0xcc,%esi
	mov    %rdi,%rcx
	mov    %r13,-0x8(%rbp)
	mov    %r14,-0x10(%rbp)
	mov    %r15,-0x18(%rbp)
	mov    %r8,%r13
	mov    %rdi,%r14
	mov    %rcx,%rdi
	mov    %rax,%r15
	callq  12b20 <emit_marker>
	lea    0x2(%r15,%r15,1),%esi
	mov    %r14,%rdi
	callq  12b60 <emit_2bytes>
	jmp    12fa6 <emit_dac+0x136>
	movslq %r13d,%r15
	movsbq -0x38(%rbp,%r15,1),%rax
	test   %al,%al
	je     12f7b <emit_dac+0x10b>
	mov    %r14,%rdi
	mov    %r13,%rsi
	callq  12ab0 <emit_byte>
	movzbl 0xc0(%r14,%r15,1),%ecx
	movzbl 0xd0(%r14,%r15,1),%eax
	shl    $0x4,%eax
	lea    (%rcx,%rax,1),%esi
	mov    %r14,%rdi
	callq  12ab0 <emit_byte>
	movsbq -0x28(%rbp,%r15,1),%rax
	test   %al,%al
	je     12fa2 <emit_dac+0x132>
	lea    0x10(%r13),%esi
	mov    %r14,%rdi
	callq  12ab0 <emit_byte>
	movzbl 0xe0(%r14,%r15,1),%esi
	mov    %r14,%rdi
	callq  12ab0 <emit_byte>
	add    $0x1,%r13d
	cmp    $0xf,%r13d
	jle    12f43 <emit_dac+0xd3>
	mov    -0x18(%rbp),%r15
	mov    -0x10(%rbp),%r14
	mov    -0x8(%rbp),%r13
	leaveq 
	retq   
	nopw   0x0(%rax,%rax,1)

0012fc0 <emit_dri>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %r15,-0x8(%rbp)
	mov    $0xdd,%esi
	mov    %rdi,%r15
	callq  12b20 <emit_marker>
	mov    $0x4,%esi
	mov    %r15,%rdi
	callq  12b60 <emit_2bytes>
	mov    %r15,%rdi
	movslq 0x118(%rdi),%rsi
	callq  12b60 <emit_2bytes>
	mov    -0x8(%rbp),%r15
	leaveq 
	retq   
	nopl   0x0(%rax,%rax,1)

0013000 <emit_sof>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %r15,-0x18(%rbp)
	mov    %r13,-0x8(%rbp)
	mov    %r14,-0x10(%rbp)
	mov    %rdi,%r13
	callq  12b20 <emit_marker>
	movslq 0x4c(%r13),%rax
	lea    0x8(%rax,%rax,2),%esi
	mov    %r13,%rdi
	callq  12b60 <emit_2bytes>
	mov    0x34(%r13),%eax
	cmp    $0xffff,%eax
	ja     13042 <emit_sof+0x42>
	mov    0x30(%r13),%eax
	cmp    $0xffff,%eax
	jbe    13064 <emit_sof+0x64>
	mov    0x0(%r13),%rax
	movl   $0x29,0x28(%rax)
	mov    0x0(%r13),%rax
	movl   $0xffff,0x2c(%rax)
	mov    0x0(%r13),%rax
	mov    (%rax),%rax
	mov    %r13,%rdi
	callq  *%rax
	movslq 0x48(%r13),%rsi
	mov    %r13,%rdi
	callq  12ab0 <emit_byte>
	movslq 0x34(%r13),%rsi
	mov    %r13,%rdi
	callq  12b60 <emit_2bytes>
	movslq 0x30(%r13),%rsi
	mov    %r13,%rdi
	callq  12b60 <emit_2bytes>
	movslq 0x4c(%r13),%rsi
	mov    %r13,%rdi
	callq  12ab0 <emit_byte>
	mov    0x58(%r13),%r15
	xor    %r14d,%r14d
	jmp    130cf <emit_sof+0xcf>
	movslq (%r15),%rsi
	mov    %r13,%rdi
	callq  12ab0 <emit_byte>
	movslq 0x8(%r15),%rsi
	shl    $0x4,%esi
	add    0xc(%r15),%esi
	mov    %r13,%rdi
	callq  12ab0 <emit_byte>
	movslq 0x10(%r15),%rsi
	mov    %r13,%rdi
	callq  12ab0 <emit_byte>
	add    $0x1,%r14d
	add    $0x60,%r15
	movslq 0x4c(%r13),%rax
	cmp    %r14d,%eax
	jg     1309d <emit_sof+0x9d>
	mov    -0x10(%rbp),%r14
	mov    -0x8(%rbp),%r13
	mov    -0x18(%rbp),%r15
	leaveq 
	retq   
	nopw   %cs:0x0(%rax,%rax,1)

00130f0 <emit_sos>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %r15,-0x20(%rbp)
	mov    %r12,-0x8(%rbp)
	mov    %r13,-0x10(%rbp)
	mov    %r14,-0x18(%rbp)
	mov    $0xda,%esi
	mov    %rdi,%r12
	callq  12b20 <emit_marker>
	movslq 0x144(%r12),%rax
	lea    0x6(%rax,%rax,1),%esi
	mov    %r12,%rdi
	callq  12b60 <emit_2bytes>
	movslq 0x144(%r12),%rsi
	mov    %r12,%rdi
	callq  12ab0 <emit_byte>
	xor    %r13d,%r13d
	mov    %r13,%r14
	jmp    13157 <emit_sos+0x67>
	movslq 0x18(%r15),%rcx
	shl    $0x4,%eax
	lea    (%rcx,%rax,1),%esi
	mov    %r12,%rdi
	callq  12ab0 <emit_byte>
	add    $0x1,%r14d
	movslq 0x144(%r12),%rax
	cmp    %r14d,%eax
	jg     131b1 <emit_sos+0xc1>
	movslq 0x19c(%r12),%rsi
	mov    %r12,%rdi
	callq  12ab0 <emit_byte>
	movslq 0x1a0(%r12),%rsi
	mov    %r12,%rdi
	callq  12ab0 <emit_byte>
	movslq 0x1a4(%r12),%rsi
	shl    $0x4,%esi
	add    0x1a8(%r12),%esi
	mov    %r12,%rdi
	callq  12ab0 <emit_byte>
	mov    -0x18(%rbp),%r14
	mov    -0x10(%rbp),%r13
	mov    -0x8(%rbp),%r12
	mov    -0x20(%rbp),%r15
	leaveq 
	retq   
	movslq %r14d,%rax
	mov    0x148(%r12,%rax,8),%r15
	movslq (%r15),%rsi
	mov    %r12,%rdi
	callq  12ab0 <emit_byte>
	movslq 0x19c(%r12),%rax
	test   %eax,%eax
	je     131ee <emit_sos+0xfe>
	mov    %r13,%rax
	movslq 0x1a0(%r12),%rcx
	test   %ecx,%ecx
	jne    13141 <emit_sos+0x51>
	mov    %r13,%rcx
	jmpq   13145 <emit_sos+0x55>
	movslq 0x1a4(%r12),%rax
	test   %eax,%eax
	je     131ff <emit_sos+0x10f>
	mov    %r13,%rax
	jmp    131d6 <emit_sos+0xe6>
	movslq 0x14(%r15),%rax
	jmp    131d6 <emit_sos+0xe6>
	data16 nopw %cs:0x0(%rax,%rax,1)

0013210 <emit_jfif_app0>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %r15,-0x10(%rbp)
	mov    %r14,-0x8(%rbp)
	mov    $0xe0,%esi
	mov    %rdi,%r14
	callq  12b20 <emit_marker>
	mov    $0x10,%esi
	mov    %r14,%rdi
	callq  12b60 <emit_2bytes>
	mov    $0x4a,%esi
	mov    %r14,%rdi
	callq  12ab0 <emit_byte>
	mov    $0x46,%r15d
	mov    %r14,%rdi
	mov    %r15,%rsi
	callq  12ab0 <emit_byte>
	mov    $0x49,%esi
	mov    %r14,%rdi
	callq  12ab0 <emit_byte>
	mov    %r15,%rsi
	mov    %r14,%rdi
	callq  12ab0 <emit_byte>
	xor    %r15d,%r15d
	mov    %r14,%rdi
	mov    %r15,%rsi
	callq  12ab0 <emit_byte>
	movzbl 0x124(%r14),%esi
	mov    %r14,%rdi
	callq  12ab0 <emit_byte>
	movzbl 0x125(%r14),%esi
	mov    %r14,%rdi
	callq  12ab0 <emit_byte>
	movzbl 0x126(%r14),%esi
	mov    %r14,%rdi
	callq  12ab0 <emit_byte>
	movzwl 0x128(%r14),%esi
	mov    %r14,%rdi
	callq  12b60 <emit_2bytes>
	movzwl 0x12a(%r14),%esi
	mov    %r14,%rdi
	callq  12b60 <emit_2bytes>
	mov    %r14,%rdi
	mov    %r15,%rsi
	callq  12ab0 <emit_byte>
	mov    %r15,%rsi
	mov    %r14,%rdi
	callq  12ab0 <emit_byte>
	mov    -0x8(%rbp),%r14
	mov    -0x10(%rbp),%r15
	leaveq 
	retq   
	xchg   %ax,%ax

00132f0 <emit_adobe_app14>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %r15,-0x8(%rbp)
	mov    $0xee,%esi
	mov    %rdi,%r15
	callq  12b20 <emit_marker>
	mov    $0xe,%esi
	mov    %r15,%rdi
	callq  12b60 <emit_2bytes>
	mov    $0x41,%esi
	mov    %r15,%rdi
	callq  12ab0 <emit_byte>
	mov    $0x64,%esi
	mov    %r15,%rdi
	callq  12ab0 <emit_byte>
	mov    $0x6f,%esi
	mov    %r15,%rdi
	callq  12ab0 <emit_byte>
	mov    $0x62,%esi
	mov    %r15,%rdi
	callq  12ab0 <emit_byte>
	mov    $0x65,%esi
	mov    %r15,%rdi
	callq  12ab0 <emit_byte>
	mov    %r15,%rdi
	mov    $0x64,%esi
	callq  12b60 <emit_2bytes>
	xor    %esi,%esi
	mov    %r15,%rdi
	callq  12b60 <emit_2bytes>
	mov    %r15,%rdi
	xor    %esi,%esi
	callq  12b60 <emit_2bytes>
	mov    0x50(%r15),%eax
	cmp    $0x3,%eax
	je     13396 <emit_adobe_app14+0xa6>
	cmp    $0x5,%eax
	je     133a9 <emit_adobe_app14+0xb9>
	mov    %r15,%rdi
	xor    %esi,%esi
	callq  12ab0 <emit_byte>
	mov    -0x8(%rbp),%r15
	leaveq 
	retq   
	mov    %r15,%rdi
	mov    $0x1,%esi
	callq  12ab0 <emit_byte>
	mov    -0x8(%rbp),%r15
	leaveq 
	retq   
	mov    %r15,%rdi
	mov    $0x2,%esi
	callq  12ab0 <emit_byte>
	mov    -0x8(%rbp),%r15
	leaveq 
	retq   
	nopl   0x0(%rax)

00133c0 <write_marker_header>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %r14,-0x10(%rbp)
	mov    %r15,-0x18(%rbp)
	cmp    $0xfffd,%edx
	ja     133e0 <write_marker_header+0x20>
	mov    %rdi,%r14
	mov    %rdx,%r15
	jmp    1340c <write_marker_header+0x4c>
	mov    (%rdi),%rax
	movl   $0xb,0x28(%rax)
	mov    (%rdi),%rax
	mov    (%rax),%rax
	mov    %rdi,%rcx
	mov    %r13,-0x8(%rbp)
	mov    %rsi,%r13
	mov    %rdi,%r14
	mov    %rcx,%rdi
	mov    %rdx,%r15
	callq  *%rax
	mov    %r13,%rsi
	mov    -0x8(%rbp),%r13
	mov    %r14,%rdi
	callq  12b20 <emit_marker>
	lea    0x2(%r15),%esi
	mov    %r14,%rdi
	callq  12b60 <emit_2bytes>
	mov    -0x18(%rbp),%r15
	mov    -0x10(%rbp),%r14
	leaveq 
	retq   
	nopw   0x0(%rax,%rax,1)

0013430 <write_marker_byte>:
	push   %rbp
	mov    %rsp,%rbp
	callq  12ab0 <emit_byte>
	leaveq 
	retq   
	nopl   0x0(%rax,%rax,1)

0013440 <write_file_header>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %r14,-0x8(%rbp)
	mov    %r15,-0x10(%rbp)
	mov    $0xd8,%esi
	mov    0x1d0(%rdi),%r15
	mov    %rdi,%r14
	callq  12b20 <emit_marker>
	movl   $0x0,0x38(%r15)
	movslq 0x120(%r14),%rax
	test   %eax,%eax
	je     1347f <write_file_header+0x3f>
	mov    %r14,%rdi
	callq  13210 <emit_jfif_app0>
	movslq 0x12c(%r14),%rax
	test   %eax,%eax
	jne    13494 <write_file_header+0x54>
	mov    -0x10(%rbp),%r15
	mov    -0x8(%rbp),%r14
	leaveq 
	retq   
	mov    %r14,%rdi
	callq  132f0 <emit_adobe_app14>
	mov    -0x10(%rbp),%r15
	mov    -0x8(%rbp),%r14
	leaveq 
	retq   
	nopw   %cs:0x0(%rax,%rax,1)

00134b0 <write_frame_header>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %r12,-0x8(%rbp)
	mov    %r13,-0x10(%rbp)
	mov    %r14,-0x18(%rbp)
	mov    %r15,-0x20(%rbp)
	mov    0x58(%rdi),%rax
	add    $0x10,%rax
	mov    %rdi,%r12
	xor    %r13d,%r13d
	mov    %r13,%r14
	jmp    134f4 <write_frame_header+0x44>
	lea    0x60(%rax),%r15
	movslq (%rax),%rsi
	mov    %r12,%rdi
	callq  12ba0 <emit_dqt>
	add    %eax,%r14d
	add    $0x1,%r13d
	mov    %r15,%rax
	movslq 0x4c(%r12),%rcx
	cmp    %r13d,%ecx
	jg     134db <write_frame_header+0x2b>
	movslq 0x104(%r12),%rax
	test   %eax,%eax
	je     13547 <write_frame_header+0x97>
	xor    %eax,%eax
	movslq 0x104(%r12),%rcx
	test   %ecx,%ecx
	jne    13557 <write_frame_header+0xa7>
	movslq 0x134(%r12),%rcx
	test   %ecx,%ecx
	jne    13582 <write_frame_header+0xd2>
	test   %eax,%eax
	jg     135a1 <write_frame_header+0xf1>
	mov    %r12,%rdi
	mov    $0xc1,%esi
	callq  13000 <emit_sof>
	mov    -0x20(%rbp),%r15
	mov    -0x18(%rbp),%r14
	mov    -0x10(%rbp),%r13
	mov    -0x8(%rbp),%r12
	leaveq 
	retq   
	movslq 0x134(%r12),%rax
	test   %eax,%eax
	je     135c0 <write_frame_header+0x110>
	xor    %eax,%eax
	jmp    1350c <write_frame_header+0x5c>
	movslq 0x134(%r12),%rax
	test   %eax,%eax
	jne    135d1 <write_frame_header+0x121>
	mov    %r12,%rdi
	mov    $0xc9,%esi
	callq  13000 <emit_sof>
	mov    -0x20(%rbp),%r15
	mov    -0x18(%rbp),%r14
	mov    -0x10(%rbp),%r13
	mov    -0x8(%rbp),%r12
	leaveq 
	retq   
	mov    %r12,%rdi
	mov    $0xc2,%esi
	callq  13000 <emit_sof>
	mov    -0x20(%rbp),%r15
	mov    -0x18(%rbp),%r14
	mov    -0x10(%rbp),%r13
	mov    -0x8(%rbp),%r12
	leaveq 
	retq   
	mov    %r12,%rdi
	mov    $0xc0,%esi
	callq  13000 <emit_sof>
	mov    -0x20(%rbp),%r15
	mov    -0x18(%rbp),%r14
	mov    -0x10(%rbp),%r13
	mov    -0x8(%rbp),%r12
	leaveq 
	retq   
	movslq 0x48(%r12),%rax
	cmp    $0x8,%eax
	je     135f0 <write_frame_header+0x140>
	xor    %eax,%eax
	jmpq   1350c <write_frame_header+0x5c>
	mov    %r12,%rdi
	mov    $0xca,%esi
	callq  13000 <emit_sof>
	mov    -0x20(%rbp),%r15
	mov    -0x18(%rbp),%r14
	mov    -0x10(%rbp),%r13
	mov    -0x8(%rbp),%r12
	leaveq 
	retq   
	mov    0x58(%r12),%rcx
	mov    $0x1,%eax
	xor    %r13d,%r13d
	mov    %r13,%rdx
	jmp    13615 <write_frame_header+0x165>
	movslq 0x14(%rcx),%rsi
	cmp    $0x1,%esi
	jle    13633 <write_frame_header+0x183>
	mov    %r13,%rax
	add    $0x60,%rcx
	add    $0x1,%edx
	movslq 0x4c(%r12),%rsi
	cmp    %edx,%esi
	jg     13602 <write_frame_header+0x152>
	test   %r14d,%r14d
	je     1350c <write_frame_header+0x5c>
	test   %eax,%eax
	jg     13641 <write_frame_header+0x191>
	mov    %r13,%rax
	jmpq   1350c <write_frame_header+0x5c>
	movslq 0x18(%rcx),%rsi
	cmp    $0x1,%esi
	jle    1360e <write_frame_header+0x15e>
	mov    %r13,%rax
	jmp    1360e <write_frame_header+0x15e>
	mov    (%r12),%rax
	movl   $0x4b,0x28(%rax)
	mov    (%r12),%rax
	mov    0x8(%rax),%rax
	mov    %r12,%rdi
	mov    %r13,%rsi
	callq  *%rax
	mov    %r13,%rax
	jmpq   1350c <write_frame_header+0x5c>
	data16 nopw %cs:0x0(%rax,%rax,1)
	nop

0013670 <write_scan_header>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %r14,-0x20(%rbp)
	mov    %r15,-0x28(%rbp)
	mov    0x1d0(%rdi),%rcx
	movslq 0x104(%rdi),%rax
	test   %eax,%eax
	jne    136b6 <write_scan_header+0x46>
	xor    %r14d,%r14d
	mov    $0x1,%r15d
	mov    %rcx,-0x30(%rbp)
	mov    %rbx,-0x8(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    %rdi,%rbx
	mov    %r14,%r12
	jmpq   13745 <write_scan_header+0xd5>
	mov    %rbx,%r14
	mov    %rcx,%r15
	mov    %rdi,%rbx
	callq  12e70 <emit_dac>
	mov    0x38(%r15),%eax
	cmp    0x118(%rbx),%eax
	je     136e2 <write_scan_header+0x72>
	mov    %rbx,%rdi
	callq  12fc0 <emit_dri>
	mov    0x118(%rbx),%eax
	mov    %eax,0x38(%r15)
	mov    %rbx,%rdi
	callq  130f0 <emit_sos>
	mov    %r14,%rbx
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	leaveq 
	retq   
	movslq %r12d,%rax
	mov    0x148(%rbx,%rax,8),%r13
	movslq 0x19c(%rbx),%rax
	test   %eax,%eax
	jne    13727 <write_scan_header+0xb7>
	movslq 0x1a4(%rbx),%rax
	test   %eax,%eax
	jne    13727 <write_scan_header+0xb7>
	movslq 0x14(%r13),%rsi
	mov    %rbx,%rdi
	mov    %r14,%rdx
	callq  12d10 <emit_dht>
	movslq 0x1a0(%rbx),%rax
	test   %eax,%eax
	je     13741 <write_scan_header+0xd1>
	movslq 0x18(%r13),%rsi
	mov    %rbx,%rdi
	mov    %r15,%rdx
	callq  12d10 <emit_dht>
	add    $0x1,%r12d
	movslq 0x144(%rbx),%rax
	cmp    %r12d,%eax
	jg     136f7 <write_scan_header+0x87>
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%r14
	mov    -0x30(%rbp),%r15
	jmpq   136c4 <write_scan_header+0x54>
	nopw   %cs:0x0(%rax,%rax,1)

0013770 <write_file_trailer>:
	push   %rbp
	mov    %rsp,%rbp
	mov    $0xd9,%esi
	callq  12b20 <emit_marker>
	leaveq 
	retq   

0013780 <write_tables_only>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %r15,-0x28(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %rbx,%r14
	mov    $0xd8,%esi
	mov    %rdi,%rbx
	callq  12b20 <emit_marker>
	xor    %r15d,%r15d
	jmp    137c1 <write_tables_only+0x41>
	movslq %r15d,%rax
	mov    0x60(%rbx,%rax,8),%rax
	test   %rax,%rax
	je     137bd <write_tables_only+0x3d>
	mov    %rbx,%rdi
	mov    %r15,%rsi
	callq  12ba0 <emit_dqt>
	add    $0x1,%r15d
	cmp    $0x3,%r15d
	jle    137a5 <write_tables_only+0x25>
	movslq 0x104(%rbx),%rax
	test   %eax,%eax
	jne    1383b <write_tables_only+0xbb>
	mov    $0x1,%r15d
	mov    %r14,-0x8(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    %r13,-0x18(%rbp)
	xor    %r12d,%r12d
	mov    %r12,%r13
	jmp    13829 <write_tables_only+0xa9>
	movslq %r13d,%r14
	mov    0x80(%rbx,%r14,8),%rax
	test   %rax,%rax
	je     1380a <write_tables_only+0x8a>
	mov    %rbx,%rdi
	mov    %r13,%rsi
	mov    %r12,%rdx
	callq  12d10 <emit_dht>
	mov    0xa0(%rbx,%r14,8),%rax
	test   %rax,%rax
	je     13825 <write_tables_only+0xa5>
	mov    %rbx,%rdi
	mov    %r13,%rsi
	mov    %r15,%rdx
	callq  12d10 <emit_dht>
	add    $0x1,%r13d
	cmp    $0x3,%r13d
	jle    137ec <write_tables_only+0x6c>
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%r14
	mov    %rbx,%rdi
	mov    $0xd9,%esi
	callq  12b20 <emit_marker>
	mov    %r14,%rbx
	mov    -0x20(%rbp),%r14
	mov    -0x28(%rbp),%r15
	leaveq 
	retq   
	nopw   %cs:0x0(%rax,%rax,1)
	nop

0013860 <jinit_c_master_control>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %r14,-0x10(%rbp)
	mov    %r15,-0x18(%rbp)
	mov    %r13,-0x8(%rbp)
	mov    0x8(%rdi),%rax
	mov    (%rax),%rax
	mov    %rsi,%r14
	mov    $0x1,%esi
	mov    $0x38,%edx
	mov    %rdi,%r13
	callq  *%rax
	mov    %rax,0x1b0(%r13)
	lea    0xc35(%rip),%rcx        # 144d0 <prepare_for_pass>
	mov    %rcx,(%rax)
	lea    0xe9b(%rip),%rcx        # 14740 <pass_startup>
	mov    %rcx,0x8(%rax)
	lea    0xed0(%rip),%rcx        # 14780 <finish_pass_master>
	mov    %rcx,0x10(%rax)
	mov    %rax,%r15
	movl   $0x0,0x1c(%r15)
	mov    %r13,%rdi
	mov    %r14,%rsi
	callq  139a0 <initial_setup>
	mov    0xf8(%r13),%rax
	test   %rax,%rax
	jne    138ee <jinit_c_master_control+0x8e>
	movl   $0x0,0x134(%r13)
	movl   $0x1,0xf0(%r13)
	jmp    138f6 <jinit_c_master_control+0x96>
	mov    %r13,%rdi
	callq  13c20 <validate_script>
	movslq 0x134(%r13),%rax
	test   %eax,%eax
	jne    13936 <jinit_c_master_control+0xd6>
	test   %r14d,%r14d
	jne    1394e <jinit_c_master_control+0xee>
	movl   $0x0,0x20(%r15)
	movl   $0x0,0x2c(%r15)
	movl   $0x0,0x24(%r15)
	movslq 0x108(%r13),%rax
	test   %eax,%eax
	jne    13963 <jinit_c_master_control+0x103>
	movslq 0xf0(%r13),%rax
	mov    %eax,0x28(%r15)
	jmp    13970 <jinit_c_master_control+0x110>
	movslq 0x104(%r13),%rax
	test   %eax,%eax
	jne    13901 <jinit_c_master_control+0xa1>
	movl   $0x1,0x108(%r13)
	jmp    13901 <jinit_c_master_control+0xa1>
	movslq 0x108(%r13),%rax
	test   %eax,%eax
	jne    13989 <jinit_c_master_control+0x129>
	movl   $0x2,0x20(%r15)
	jmp    1390e <jinit_c_master_control+0xae>
	movslq 0xf0(%r13),%rax
	add    %eax,%eax
	mov    %eax,0x28(%r15)
	lea    0x4593d(%rip),%rax        # 592b4 <jpeg_nbits_table+0x10000>
	mov    %rax,0x30(%r15)
	mov    -0x8(%rbp),%r13
	mov    -0x18(%rbp),%r15
	mov    -0x10(%rbp),%r14
	leaveq 
	retq   
	movl   $0x1,0x20(%r15)
	jmpq   1390e <jinit_c_master_control+0xae>
	nopw   %cs:0x0(%rax,%rax,1)

00139a0 <initial_setup>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %r15,-0x18(%rbp)
	mov    %r13,-0x8(%rbp)
	mov    %r14,-0x10(%rbp)
	mov    0x34(%rdi),%eax
	test   %eax,%eax
	je     139d7 <initial_setup+0x37>
	mov    0x30(%rdi),%eax
	test   %eax,%eax
	je     139d7 <initial_setup+0x37>
	movslq 0x4c(%rdi),%rax
	test   %eax,%eax
	jle    139d7 <initial_setup+0x37>
	movslq 0x38(%rdi),%rax
	test   %eax,%eax
	jle    139d7 <initial_setup+0x37>
	mov    %rdi,%r13
	jmp    139ec <initial_setup+0x4c>
	mov    (%rdi),%rax
	movl   $0x20,0x28(%rax)
	mov    (%rdi),%rax
	mov    (%rax),%rax
	mov    %rdi,%r13
	callq  *%rax
	mov    0x34(%r13),%eax
	cmp    $0xffdc,%eax
	ja     13a02 <initial_setup+0x62>
	mov    0x30(%r13),%eax
	cmp    $0xffdc,%eax
	jbe    13a24 <initial_setup+0x84>
	mov    0x0(%r13),%rax
	movl   $0x29,0x28(%rax)
	mov    0x0(%r13),%rax
	movl   $0xffdc,0x2c(%rax)
	mov    0x0(%r13),%rax
	mov    (%rax),%rax
	mov    %r13,%rdi
	callq  *%rax
	movslq 0x38(%r13),%rax
	mov    0x30(%r13),%ecx
	imul   %rcx,%rax
	mov    %eax,%ecx
	cmp    %rax,%rcx
	je     13a4e <initial_setup+0xae>
	mov    0x0(%r13),%rax
	movl   $0x46,0x28(%rax)
	mov    0x0(%r13),%rax
	mov    (%rax),%rax
	mov    %r13,%rdi
	callq  *%rax
	movslq 0x48(%r13),%rax
	cmp    $0x8,%eax
	je     13a79 <initial_setup+0xd9>
	mov    0x0(%r13),%rax
	movl   $0xf,0x28(%rax)
	movslq 0x48(%r13),%rcx
	mov    0x0(%r13),%rax
	mov    %ecx,0x2c(%rax)
	mov    0x0(%r13),%rax
	mov    (%rax),%rax
	mov    %r13,%rdi
	callq  *%rax
	movslq 0x4c(%r13),%rax
	cmp    $0xa,%eax
	jle    13aaf <initial_setup+0x10f>
	mov    0x0(%r13),%rax
	movl   $0x1a,0x28(%rax)
	movslq 0x4c(%r13),%rcx
	mov    0x0(%r13),%rax
	mov    %ecx,0x2c(%rax)
	mov    0x0(%r13),%rax
	movl   $0xa,0x30(%rax)
	mov    0x0(%r13),%rax
	mov    (%rax),%rax
	mov    %r13,%rdi
	callq  *%rax
	mov    0x58(%r13),%r14
	movl   $0x1,0x138(%r13)
	movl   $0x1,0x13c(%r13)
	xor    %r15d,%r15d
	jmp    13b39 <initial_setup+0x199>
	movslq 0x8(%r14),%rax
	test   %eax,%eax
	jle    13ae8 <initial_setup+0x148>
	cmp    $0x4,%eax
	jg     13ae8 <initial_setup+0x148>
	movslq 0xc(%r14),%rax
	test   %eax,%eax
	jle    13ae8 <initial_setup+0x148>
	cmp    $0x4,%eax
	jle    13aff <initial_setup+0x15f>
	mov    0x0(%r13),%rax
	movl   $0x12,0x28(%rax)
	mov    0x0(%r13),%rax
	mov    (%rax),%rax
	mov    %r13,%rdi
	callq  *%rax
	movslq 0x138(%r13),%rcx
	movslq 0x8(%r14),%rax
	cmp    %ecx,%eax
	jge    13b11 <initial_setup+0x171>
	mov    %rcx,%rax
	mov    %eax,0x138(%r13)
	movslq 0x13c(%r13),%rcx
	movslq 0xc(%r14),%rax
	cmp    %ecx,%eax
	jge    13b2a <initial_setup+0x18a>
	mov    %rcx,%rax
	mov    %eax,0x13c(%r13)
	add    $0x60,%r14
	add    $0x1,%r15d
	movslq 0x4c(%r13),%rax
	cmp    %r15d,%eax
	jg     13ace <initial_setup+0x12e>
	mov    0x58(%r13),%r15
	xor    %r14d,%r14d
	jmpq   13be6 <initial_setup+0x246>
	mov    %r14d,0x4(%r15)
	movl   $0x8,0x24(%r15)
	movslq 0x8(%r15),%rdi
	mov    0x30(%r13),%eax
	imul   %rax,%rdi
	movslq 0x138(%r13),%rax
	shl    $0x3,%eax
	movslq %eax,%rsi
	callq  4150 <jdiv_round_up@plt>
	mov    %eax,0x1c(%r15)
	movslq 0xc(%r15),%rdi
	mov    0x34(%r13),%eax
	imul   %rax,%rdi
	movslq 0x13c(%r13),%rax
	shl    $0x3,%eax
	movslq %eax,%rsi
	callq  4150 <jdiv_round_up@plt>
	mov    %eax,0x20(%r15)
	movslq 0x8(%r15),%rdi
	mov    0x30(%r13),%eax
	imul   %rax,%rdi
	movslq 0x138(%r13),%rsi
	callq  4150 <jdiv_round_up@plt>
	mov    %eax,0x28(%r15)
	movslq 0xc(%r15),%rdi
	mov    0x34(%r13),%eax
	imul   %rax,%rdi
	movslq 0x13c(%r13),%rsi
	callq  4150 <jdiv_round_up@plt>
	mov    %eax,0x2c(%r15)
	movl   $0x1,0x30(%r15)
	add    $0x1,%r14d
	add    $0x60,%r15
	movslq 0x4c(%r13),%rax
	cmp    %r14d,%eax
	jg     13b4e <initial_setup+0x1ae>
	mov    0x34(%r13),%edi
	movslq 0x13c(%r13),%rax
	shl    $0x3,%eax
	movslq %eax,%rsi
	callq  4150 <jdiv_round_up@plt>
	mov    %eax,0x140(%r13)
	mov    -0x10(%rbp),%r14
	mov    -0x8(%rbp),%r13
	mov    -0x18(%rbp),%r15
	leaveq 
	retq   
	xchg   %ax,%ax

0013c20 <validate_script>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0xaa0,%rsp
	mov    %r15,-0x28(%rbp)
	mov    %rdi,-0x50(%rbp)
	mov    %rbx,-0x8(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    %r14,-0x20(%rbp)
	movslq 0xf0(%rdi),%rax
	test   %eax,%eax
	jg     13c70 <validate_script+0x50>
	mov    (%rdi),%rax
	movl   $0x13,0x28(%rax)
	mov    (%rdi),%rax
	movl   $0x0,0x2c(%rax)
	mov    (%rdi),%rax
	mov    (%rax),%rax
	mov    %rdi,%rbx
	callq  *%rax
	mov    %rbx,%rdi
	lea    -0xa70(%rbp),%rcx
	xor    %ebx,%ebx
	mov    $0x1,%eax
	mov    0xf8(%rdi),%r14
	movslq 0x14(%r14),%rdx
	test   %edx,%edx
	jne    13ca5 <validate_script+0x85>
	movslq 0x18(%r14),%rdx
	cmp    $0x3f,%edx
	jne    13ca5 <validate_script+0x85>
	movl   $0x0,0x134(%rdi)
	mov    %rbx,%rcx
	jmp    13cc5 <validate_script+0xa5>
	movl   $0x1,0x134(%rdi)
	mov    %rbx,%rsi
	jmp    13ce4 <validate_script+0xc4>
	movslq %ecx,%rdx
	movl   $0x0,-0xa98(%rbp,%rdx,4)
	add    $0x1,%ecx
	movslq 0x4c(%rdi),%rdx
	cmp    %ecx,%edx
	jg     13cb4 <validate_script+0x94>
	jmp    13d44 <validate_script+0x124>
	movl   $0xffffffff,(%rcx)
	add    $0x4,%rcx
	add    $0x1,%edx
	cmp    $0x3f,%edx
	jle    13ccf <validate_script+0xaf>
	add    $0x1,%esi
	movslq 0x4c(%rdi),%rdx
	cmp    %esi,%edx
	jle    13d44 <validate_script+0x124>
	mov    %rbx,%rdx
	jmp    13cdc <validate_script+0xbc>
	movslq %ebx,%rcx
	movslq 0x4(%r14,%rcx,4),%r12
	movslq -0xa98(%rbp,%r12,4),%rcx
	test   %ecx,%ecx
	je     13d27 <validate_script+0x107>
	mov    (%rdi),%rcx
	movl   $0x13,0x28(%rcx)
	mov    (%rdi),%rcx
	mov    %eax,0x2c(%rcx)
	mov    (%rdi),%rax
	mov    (%rax),%rax
	mov    %rdi,%r13
	callq  *%rax
	mov    %r13,%rdi
	mov    -0x48(%rbp),%rax
	movl   $0x1,-0xa98(%rbp,%r12,4)
	add    $0x1,%ebx
	cmp    %r15d,%ebx
	jl     13cf1 <validate_script+0xd1>
	xor    %ebx,%ebx
	add    $0x24,%r14
	add    $0x1,%eax
	mov    %rax,-0x48(%rbp)
	mov    %r14,-0x30(%rbp)
	movslq 0xf0(%rdi),%rcx
	cmp    %eax,%ecx
	jge    13d72 <validate_script+0x152>
	movslq 0x134(%rdi),%rax
	test   %eax,%eax
	je     13de6 <validate_script+0x1c6>
	lea    -0xa70(%rbp),%r12
	jmpq   13e2e <validate_script+0x20e>
	movslq (%r14),%r15
	mov    %r15,-0x38(%rbp)
	test   %r15d,%r15d
	jle    13d88 <validate_script+0x168>
	cmp    $0x4,%r15d
	jle    13eb9 <validate_script+0x299>
	mov    (%rdi),%rcx
	movl   $0x1a,0x28(%rcx)
	mov    (%rdi),%rcx
	mov    %r15d,0x2c(%rcx)
	mov    (%rdi),%rcx
	movl   $0x4,0x30(%rcx)
	mov    (%rdi),%rcx
	mov    (%rcx),%rcx
	mov    %rax,%r12
	mov    %rdi,%r13
	callq  *%rcx
	mov    %r12,%rax
	mov    %r13,%rdi
	jmpq   13eb9 <validate_script+0x299>
	movslq %ebx,%rax
	movslq -0xa98(%rbp,%rax,4),%rax
	test   %eax,%eax
	jne    13de3 <validate_script+0x1c3>
	mov    (%rdi),%rax
	movl   $0x2d,0x28(%rax)
	mov    (%rdi),%rax
	mov    (%rax),%rax
	mov    %rdi,%r12
	callq  *%rax
	mov    %r12,%rdi
	add    $0x1,%ebx
	movslq 0x4c(%rdi),%rax
	cmp    %ebx,%eax
	jg     13dbc <validate_script+0x19c>
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	mov    -0x28(%rbp),%r15
	leaveq 
	retq   
	movslq %ebx,%rax
	shl    $0x8,%rax
	movslq (%r12,%rax,1),%rax
	test   %eax,%eax
	jns    13e2b <validate_script+0x20b>
	mov    (%rdi),%rax
	movl   $0x2d,0x28(%rax)
	mov    (%rdi),%rax
	mov    (%rax),%rax
	mov    %rdi,%r13
	callq  *%rax
	mov    %r13,%rdi
	add    $0x1,%ebx
	movslq 0x4c(%rdi),%rax
	cmp    %ebx,%eax
	jg     13e04 <validate_script+0x1e4>
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	mov    -0x28(%rbp),%r15
	leaveq 
	retq   
	movslq %ebx,%rcx
	movslq 0x4(%r14,%rcx,4),%r12
	test   %r12d,%r12d
	js     13e5f <validate_script+0x23f>
	cmp    0x4c(%rdi),%r12d
	jl     13e81 <validate_script+0x261>
	mov    (%rdi),%rcx
	movl   $0x13,0x28(%rcx)
	mov    (%rdi),%rcx
	mov    %eax,0x2c(%rcx)
	mov    (%rdi),%rax
	mov    (%rax),%rax
	mov    %rdi,%r13
	callq  *%rax
	mov    %r13,%rdi
	mov    -0x48(%rbp),%rax
	test   %ebx,%ebx
	jle    13eb6 <validate_script+0x296>
	lea    -0x1(%rbx),%ecx
	movslq %ecx,%rcx
	cmp    0x4(%r14,%rcx,4),%r12d
	jg     13eb6 <validate_script+0x296>
	mov    (%rdi),%rcx
	movl   $0x13,0x28(%rcx)
	mov    (%rdi),%rcx
	mov    %eax,0x2c(%rcx)
	mov    (%rdi),%rcx
	mov    (%rcx),%rcx
	mov    %rax,%r12
	mov    %rdi,%r13
	callq  *%rcx
	mov    %r12,%rax
	mov    %r13,%rdi
	add    $0x1,%ebx
	cmp    %ebx,%r15d
	jg     13e4c <validate_script+0x22c>
	movslq 0x14(%r14),%rsi
	mov    %rsi,-0x70(%rbp)
	movslq 0x18(%r14),%r12
	movslq 0x1c(%r14),%rcx
	mov    %rcx,-0x60(%rbp)
	movslq 0x20(%r14),%r13
	mov    %r13,-0x58(%rbp)
	movslq 0x134(%rdi),%rdx
	test   %edx,%edx
	jne    13f0f <validate_script+0x2ef>
	test   %esi,%esi
	jne    13f88 <validate_script+0x368>
	cmp    $0x3f,%r12d
	jne    13f88 <validate_script+0x368>
	test   %ecx,%ecx
	jne    13f88 <validate_script+0x368>
	test   %r13d,%r13d
	jne    13f88 <validate_script+0x368>
	xor    %ebx,%ebx
	jmpq   13d36 <validate_script+0x116>
	test   %esi,%esi
	js     13f37 <validate_script+0x317>
	cmp    $0x3f,%esi
	jg     13f37 <validate_script+0x317>
	cmp    %r12d,%esi
	jg     13f37 <validate_script+0x317>
	cmp    $0x3f,%r12d
	jg     13f37 <validate_script+0x317>
	test   %ecx,%ecx
	js     13f37 <validate_script+0x317>
	cmp    $0xa,%ecx
	jg     13f37 <validate_script+0x317>
	test   %r13d,%r13d
	js     13f37 <validate_script+0x317>
	cmp    $0xa,%r13d
	jle    13f6d <validate_script+0x34d>
	mov    (%rdi),%rdx
	movl   $0x11,0x28(%rdx)
	mov    (%rdi),%rdx
	mov    %eax,0x2c(%rdx)
	mov    (%rdi),%rax
	mov    (%rax),%rax
	mov    %rcx,%rbx
	mov    %rsi,%r13
	mov    %rdi,%r14
	callq  *%rax
	mov    %rbx,%rcx
	mov    %r13,%rsi
	mov    %r14,%rdi
	mov    -0x58(%rbp),%r13
	mov    -0x30(%rbp),%r14
	mov    -0x48(%rbp),%rax
	lea    -0x1(%rcx),%edx
	mov    %rdx,-0x68(%rbp)
	test   %esi,%esi
	je     13fb3 <validate_script+0x393>
	cmp    $0x1,%r15d
	jne    13fc6 <validate_script+0x3a6>
	xor    %ebx,%ebx
	mov    %rbx,%r8
	jmpq   14064 <validate_script+0x444>
	mov    (%rdi),%rcx
	movl   $0x11,0x28(%rcx)
	mov    (%rdi),%rcx
	mov    %eax,0x2c(%rcx)
	mov    (%rdi),%rcx
	mov    (%rcx),%rcx
	mov    %rax,%r12
	mov    %rdi,%r13
	callq  *%rcx
	mov    %r12,%rax
	mov    %r13,%rdi
	xor    %ebx,%ebx
	jmpq   13d36 <validate_script+0x116>
	test   %r12d,%r12d
	jne    1408b <validate_script+0x46b>
	xor    %ebx,%ebx
	mov    %rbx,%r8
	jmpq   14064 <validate_script+0x444>
	mov    (%rdi),%rcx
	movl   $0x11,0x28(%rcx)
	mov    (%rdi),%rcx
	mov    %eax,0x2c(%rcx)
	mov    (%rdi),%rax
	mov    (%rax),%rax
	mov    %rsi,%r13
	mov    %rdi,%rbx
	callq  *%rax
	mov    %r13,%rsi
	mov    %rbx,%rdi
	xor    %r8d,%r8d
	mov    -0x68(%rbp),%rdx
	mov    -0x60(%rbp),%rcx
	mov    -0x58(%rbp),%r13
	mov    -0x48(%rbp),%rax
	mov    %r8,%rbx
	jmp    14064 <validate_script+0x444>
	movslq %ebx,%r15
	movslq (%r14,%r15,4),%rsi
	test   %esi,%esi
	js     140c7 <validate_script+0x4a7>
	cmp    %esi,%ecx
	jne    1401a <validate_script+0x3fa>
	cmp    %edx,%r13d
	je     14042 <validate_script+0x422>
	mov    (%rdi),%rcx
	movl   $0x11,0x28(%rcx)
	mov    (%rdi),%rcx
	mov    %eax,0x2c(%rcx)
	mov    (%rdi),%rax
	mov    (%rax),%rax
	callq  *%rax
	mov    -0x50(%rbp),%rdi
	mov    -0x68(%rbp),%rdx
	mov    -0x60(%rbp),%rcx
	mov    -0x48(%rbp),%rax
	mov    %r13d,(%r14,%r15,4)
	add    $0x1,%ebx
	cmp    %ebx,%r12d
	jge    14002 <validate_script+0x3e2>
	mov    -0x40(%rbp),%rsi
	lea    0x1(%rsi),%r8d
	mov    -0x70(%rbp),%rsi
	xor    %ebx,%ebx
	mov    -0x38(%rbp),%r15
	mov    -0x30(%rbp),%r14
	cmp    %r8d,%r15d
	jle    13d3d <validate_script+0x11d>
	movslq %r8d,%r9
	movslq 0x4(%r14,%r9,4),%r9
	shl    $0x8,%r9
	test   %esi,%esi
	lea    -0xa70(%rbp,%r9,1),%r14
	jne    140fc <validate_script+0x4dc>
	mov    %r8,-0x40(%rbp)
	jmp    14049 <validate_script+0x429>
	mov    (%rdi),%rcx
	movl   $0x11,0x28(%rcx)
	mov    (%rdi),%rcx
	mov    %eax,0x2c(%rcx)
	mov    (%rdi),%rax
	mov    (%rax),%rax
	mov    %rsi,%rbx
	mov    %rdi,%r13
	callq  *%rax
	mov    %rbx,%rsi
	mov    %r13,%rdi
	xor    %r8d,%r8d
	mov    -0x68(%rbp),%rdx
	mov    -0x60(%rbp),%rcx
	mov    -0x58(%rbp),%r13
	mov    -0x48(%rbp),%rax
	mov    %r8,%rbx
	jmp    14064 <validate_script+0x444>
	test   %ecx,%ecx
	je     14042 <validate_script+0x422>
	mov    (%rdi),%rcx
	movl   $0x11,0x28(%rcx)
	mov    (%rdi),%rcx
	mov    %eax,0x2c(%rcx)
	mov    (%rdi),%rax
	mov    (%rax),%rax
	callq  *%rax
	mov    -0x50(%rbp),%rdi
	mov    -0x68(%rbp),%rdx
	mov    -0x60(%rbp),%rcx
	mov    -0x48(%rbp),%rax
	jmpq   14042 <validate_script+0x422>
	movslq (%r14),%rbx
	test   %ebx,%ebx
	js     1410f <validate_script+0x4ef>
	mov    %r8,-0x40(%rbp)
	mov    %rsi,%rbx
	jmpq   14049 <validate_script+0x429>
	mov    (%rdi),%rdx
	movl   $0x11,0x28(%rdx)
	mov    (%rdi),%rdx
	mov    %eax,0x2c(%rdx)
	mov    (%rdi),%rax
	mov    (%rax),%rax
	mov    %rdi,%rdx
	mov    %r8,-0x40(%rbp)
	mov    %rsi,%rbx
	mov    %rcx,%r13
	mov    %rdi,%r15
	mov    %rdx,%rdi
	callq  *%rax
	mov    %r13,%rcx
	mov    %r15,%rdi
	mov    -0x68(%rbp),%rdx
	mov    -0x58(%rbp),%r13
	mov    -0x48(%rbp),%rax
	jmpq   14049 <validate_script+0x429>
	data16 nopw %cs:0x0(%rax,%rax,1)
	nopl   0x0(%rax)

0014160 <select_scan_parameters>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	xor    %eax,%eax
	mov    0xf8(%rdi),%rdx
	test   %rdx,%rdx
	jne    141d3 <select_scan_parameters+0x73>
	movslq 0x4c(%rdi),%rcx
	cmp    $0x4,%ecx
	jle    141c7 <select_scan_parameters+0x67>
	mov    (%rdi),%rcx
	movl   $0x1a,0x28(%rcx)
	movslq 0x4c(%rdi),%rdx
	mov    (%rdi),%rcx
	mov    %edx,0x2c(%rcx)
	mov    (%rdi),%rcx
	movl   $0x4,0x30(%rcx)
	mov    (%rdi),%rcx
	mov    (%rcx),%rcx
	mov    %rdi,%rdx
	mov    %r14,-0x8(%rbp)
	mov    %r15,-0x10(%rbp)
	mov    %rax,%r14
	mov    %rdi,%r15
	mov    %rdx,%rdi
	callq  *%rcx
	mov    %r14,%rax
	mov    %r15,%rdi
	mov    -0x10(%rbp),%r15
	mov    -0x8(%rbp),%r14
	movslq 0x4c(%rdi),%rcx
	mov    %ecx,0x144(%rdi)
	jmp    1420b <select_scan_parameters+0xab>
	mov    0x1b0(%rdi),%rcx
	movslq 0x2c(%rcx),%rcx
	lea    (%rcx,%rcx,8),%rcx
	lea    (%rdx,%rcx,4),%rsi
	movslq (%rsi),%rcx
	mov    %ecx,0x144(%rdi)
	jmp    1425c <select_scan_parameters+0xfc>
	movslq %eax,%rdx
	lea    (%rdx,%rdx,2),%rcx
	shl    $0x5,%rcx
	add    0x58(%rdi),%rcx
	mov    %rcx,0x148(%rdi,%rdx,8)
	add    $0x1,%eax
	movslq 0x4c(%rdi),%rcx
	cmp    %eax,%ecx
	jg     141f1 <select_scan_parameters+0x91>
	movl   $0x0,0x19c(%rdi)
	movl   $0x3f,0x1a0(%rdi)
	movl   $0x0,0x1a4(%rdi)
	movl   $0x0,0x1a8(%rdi)
	leaveq 
	retq   
	movslq %eax,%rdx
	movslq 0x4(%rsi,%rdx,4),%rcx
	lea    (%rcx,%rcx,2),%rcx
	shl    $0x5,%rcx
	add    0x58(%rdi),%rcx
	mov    %rcx,0x148(%rdi,%rdx,8)
	add    $0x1,%eax
	movslq (%rsi),%rcx
	cmp    %eax,%ecx
	jg     1423d <select_scan_parameters+0xdd>
	movslq 0x14(%rsi),%rax
	mov    %eax,0x19c(%rdi)
	movslq 0x18(%rsi),%rax
	mov    %eax,0x1a0(%rdi)
	movslq 0x1c(%rsi),%rax
	mov    %eax,0x1a4(%rdi)
	movslq 0x20(%rsi),%rax
	mov    %eax,0x1a8(%rdi)
	leaveq 
	retq   
	nopl   (%rax)

0014290 <per_scan_setup>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	movslq 0x144(%rdi),%rax
	cmp    $0x1,%eax
	je     142c3 <per_scan_setup+0x33>
	test   %eax,%eax
	jle    14346 <per_scan_setup+0xb6>
	cmp    $0x4,%eax
	jg     14346 <per_scan_setup+0xb6>
	mov    %r15,%rcx
	mov    %r14,%r15
	mov    %rdi,%r14
	jmpq   14383 <per_scan_setup+0xf3>
	mov    0x148(%rdi),%rsi
	mov    0x1c(%rsi),%eax
	mov    %eax,0x168(%rdi)
	mov    0x20(%rsi),%eax
	mov    %eax,0x16c(%rdi)
	mov    %r14,%rcx
	mov    %rdi,%r14
	movl   $0x1,0x34(%rsi)
	movl   $0x1,0x38(%rsi)
	movl   $0x1,0x3c(%rsi)
	movl   $0x8,0x40(%rsi)
	movl   $0x1,0x44(%rsi)
	mov    0x20(%rsi),%eax
	mov    0xc(%rsi),%r8d
	xor    %edx,%edx
	div    %r8d
	test   %edx,%edx
	jne    14319 <per_scan_setup+0x89>
	movslq 0xc(%rsi),%rdx
	mov    %edx,0x48(%rsi)
	movl   $0x1,0x170(%r14)
	movl   $0x0,0x174(%r14)
	movslq 0x11c(%r14),%rdx
	test   %edx,%edx
	jg     143db <per_scan_setup+0x14b>
	mov    %rcx,%r14
	leaveq 
	retq   
	mov    (%rdi),%rax
	movl   $0x1a,0x28(%rax)
	movslq 0x144(%rdi),%rax
	mov    (%rdi),%rcx
	mov    %eax,0x2c(%rcx)
	mov    (%rdi),%rax
	movl   $0x4,0x30(%rax)
	mov    (%rdi),%rax
	mov    (%rax),%rax
	mov    %rdi,%rcx
	mov    %r15,-0x18(%rbp)
	mov    %r14,%r15
	mov    %rdi,%r14
	mov    %rcx,%rdi
	callq  *%rax
	mov    -0x18(%rbp),%rcx
	mov    0x30(%r14),%edi
	movslq 0x138(%r14),%rax
	shl    $0x3,%eax
	movslq %eax,%rsi
	mov    %rcx,-0x18(%rbp)
	callq  4150 <jdiv_round_up@plt>
	mov    %eax,0x168(%r14)
	mov    0x34(%r14),%edi
	movslq 0x13c(%r14),%rax
	shl    $0x3,%eax
	movslq %eax,%rsi
	callq  4150 <jdiv_round_up@plt>
	mov    %eax,0x16c(%r14)
	movl   $0x0,0x170(%r14)
	xor    %eax,%eax
	mov    %r13,-0x8(%rbp)
	mov    %r15,-0x10(%rbp)
	mov    %rax,%r15
	jmp    14425 <per_scan_setup+0x195>
	mov    0x168(%r14),%eax
	imul   %rdx,%rax
	cmp    $0xfffe,%rax
	jle    143f3 <per_scan_setup+0x163>
	mov    $0xffff,%eax
	mov    %eax,0x118(%r14)
	mov    %rcx,%r14
	leaveq 
	retq   
	movslq 0x170(%r14),%rcx
	lea    0x1(%rcx),%eax
	mov    %eax,0x170(%r14)
	mov    %r15d,0x174(%r14,%rcx,4)
	add    $0xffffffff,%r13d
	test   %r13d,%r13d
	jg     143ff <per_scan_setup+0x16f>
	add    $0x1,%r15d
	movslq 0x144(%r14),%rax
	cmp    %r15d,%eax
	jg     14442 <per_scan_setup+0x1b2>
	mov    -0x10(%rbp),%rcx
	mov    -0x8(%rbp),%r13
	mov    -0x18(%rbp),%r15
	jmpq   14332 <per_scan_setup+0xa2>
	movslq %r15d,%rax
	mov    0x148(%r14,%rax,8),%rcx
	movslq 0x8(%rcx),%rsi
	mov    %esi,0x34(%rcx)
	movslq 0xc(%rcx),%rax
	mov    %eax,0x38(%rcx)
	imul   %esi,%eax
	mov    %eax,0x3c(%rcx)
	mov    %rsi,%rax
	shl    $0x3,%eax
	mov    %eax,0x40(%rcx)
	mov    0x1c(%rcx),%eax
	xor    %edx,%edx
	div    %esi
	test   %edx,%edx
	jne    14479 <per_scan_setup+0x1e9>
	movslq 0x34(%rcx),%rdx
	mov    %edx,0x44(%rcx)
	mov    0x20(%rcx),%eax
	mov    0x38(%rcx),%esi
	xor    %edx,%edx
	div    %esi
	test   %edx,%edx
	jne    1448e <per_scan_setup+0x1fe>
	movslq 0x38(%rcx),%rdx
	mov    %edx,0x48(%rcx)
	movslq 0x3c(%rcx),%r13
	mov    %r13,%rax
	add    0x170(%r14),%eax
	cmp    $0xa,%eax
	jle    1441c <per_scan_setup+0x18c>
	mov    (%r14),%rax
	movl   $0xd,0x28(%rax)
	mov    (%r14),%rax
	mov    (%rax),%rax
	mov    %r14,%rdi
	callq  *%rax
	jmpq   1441c <per_scan_setup+0x18c>
	data16 nopw %cs:0x0(%rax,%rax,1)
	nopl   (%rax)

00144d0 <prepare_for_pass>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %r14,-0x8(%rbp)
	mov    %r15,-0x10(%rbp)
	xor    %esi,%esi
	mov    %rsi,-0x20(%rbp)
	mov    $0x1,%eax
	mov    %rax,-0x18(%rbp)
	mov    0x1b0(%rdi),%r15
	mov    0x20(%r15),%eax
	test   %eax,%eax
	je     14585 <prepare_for_pass+0xb5>
	cmp    $0x1,%eax
	je     145d6 <prepare_for_pass+0x106>
	cmp    $0x2,%eax
	jne    1458d <prepare_for_pass+0xbd>
	mov    %rdi,%r14
	movslq 0x108(%r14),%rax
	test   %eax,%eax
	jne    14530 <prepare_for_pass+0x60>
	mov    %r14,%rdi
	callq  14160 <select_scan_parameters>
	mov    %r14,%rdi
	callq  14290 <per_scan_setup>
	xor    %esi,%esi
	mov    0x1f0(%r14),%rax
	mov    (%rax),%rax
	mov    %r14,%rdi
	callq  *%rax
	mov    0x1c8(%r14),%rax
	mov    (%rax),%rax
	mov    %r14,%rdi
	mov    $0x2,%esi
	callq  *%rax
	movslq 0x2c(%r15),%rax
	test   %eax,%eax
	jne    1456b <prepare_for_pass+0x9b>
	mov    0x1d0(%r14),%rax
	mov    0x8(%rax),%rax
	mov    %r14,%rdi
	callq  *%rax
	mov    0x1d0(%r14),%rax
	mov    0x10(%rax),%rax
	mov    %r14,%rdi
	callq  *%rax
	movl   $0x0,0x18(%r15)
	jmp    145a2 <prepare_for_pass+0xd2>
	test   %eax,%eax
	je     1462d <prepare_for_pass+0x15d>
	mov    (%rdi),%rax
	movl   $0x30,0x28(%rax)
	mov    (%rdi),%rax
	mov    (%rax),%rax
	mov    %rdi,%r14
	callq  *%rax
	movslq 0x24(%r15),%rcx
	movslq 0x28(%r15),%rax
	add    $0xffffffff,%eax
	cmp    %ecx,%eax
	jne    145b7 <prepare_for_pass+0xe7>
	pushq  -0x18(%rbp)
	popq   -0x20(%rbp)
	mov    -0x20(%rbp),%rax
	mov    %eax,0x1c(%r15)
	mov    0x10(%r14),%rax
	test   %rax,%rax
	jne    146b3 <prepare_for_pass+0x1e3>
	mov    -0x10(%rbp),%r15
	mov    -0x8(%rbp),%r14
	leaveq 
	retq   
	mov    %rdi,%r14
	callq  14160 <select_scan_parameters>
	mov    %r14,%rdi
	callq  14290 <per_scan_setup>
	movslq 0x19c(%r14),%rax
	test   %eax,%eax
	jne    146cb <prepare_for_pass+0x1fb>
	movslq 0x1a4(%r14),%rax
	test   %eax,%eax
	je     146cb <prepare_for_pass+0x1fb>
	movslq 0x104(%r14),%rax
	test   %eax,%eax
	jne    146cb <prepare_for_pass+0x1fb>
	movl   $0x2,0x20(%r15)
	movslq 0x24(%r15),%rax
	add    $0x1,%eax
	mov    %eax,0x24(%r15)
	xor    %esi,%esi
	jmpq   14513 <prepare_for_pass+0x43>
	mov    %rdi,%r14
	callq  14160 <select_scan_parameters>
	mov    %r14,%rdi
	callq  14290 <per_scan_setup>
	movslq 0x100(%r14),%rax
	test   %eax,%eax
	jne    14677 <prepare_for_pass+0x1a7>
	mov    0x1d8(%r14),%rax
	mov    (%rax),%rax
	mov    %r14,%rdi
	callq  *%rax
	mov    0x1e0(%r14),%rax
	mov    (%rax),%rax
	mov    %r14,%rdi
	callq  *%rax
	mov    0x1c0(%r14),%rax
	mov    (%rax),%rax
	mov    %r14,%rdi
	xor    %esi,%esi
	callq  *%rax
	mov    0x1e8(%r14),%rax
	mov    (%rax),%rax
	mov    %r14,%rdi
	callq  *%rax
	mov    0x1f0(%r14),%rax
	mov    (%rax),%rax
	movslq 0x108(%r14),%rsi
	mov    %r14,%rdi
	callq  *%rax
	mov    0x1c8(%r14),%rax
	mov    (%rax),%rax
	movslq 0x28(%r15),%rcx
	cmp    $0x1,%ecx
	jg     14700 <prepare_for_pass+0x230>
	xor    %esi,%esi
	jmp    14705 <prepare_for_pass+0x235>
	mov    %ecx,0x18(%rax)
	movslq 0x28(%r15),%rcx
	mov    0x10(%r14),%rax
	mov    %ecx,0x1c(%rax)
	mov    -0x10(%rbp),%r15
	mov    -0x8(%rbp),%r14
	leaveq 
	retq   
	mov    0x1f0(%r14),%rax
	mov    (%rax),%rax
	mov    %r14,%rdi
	mov    $0x1,%esi
	callq  *%rax
	mov    0x1c8(%r14),%rax
	mov    (%rax),%rax
	mov    %r14,%rdi
	mov    $0x2,%esi
	callq  *%rax
	movl   $0x0,0x18(%r15)
	jmpq   145a2 <prepare_for_pass+0xd2>
	mov    $0x3,%esi
	mov    %r14,%rdi
	callq  *%rax
	mov    0x1b8(%r14),%rax
	mov    (%rax),%rax
	mov    %r14,%rdi
	xor    %esi,%esi
	callq  *%rax
	movslq 0x108(%r14),%rax
	test   %eax,%eax
	jne    14733 <prepare_for_pass+0x263>
	movl   $0x1,0x18(%r15)
	jmpq   145a2 <prepare_for_pass+0xd2>
	movl   $0x0,0x18(%r15)
	jmpq   145a2 <prepare_for_pass+0xd2>

0014740 <pass_startup>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %r15,-0x8(%rbp)
	mov    0x1b0(%rdi),%rax
	movl   $0x0,0x18(%rax)
	mov    0x1d0(%rdi),%rax
	mov    0x8(%rax),%rax
	mov    %rdi,%r15
	callq  *%rax
	mov    0x1d0(%r15),%rax
	mov    0x10(%rax),%rax
	mov    %r15,%rdi
	callq  *%rax
	mov    -0x8(%rbp),%r15
	leaveq 
	retq   

0014780 <finish_pass_master>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %r14,-0x8(%rbp)
	mov    %r15,-0x10(%rbp)
	mov    0x1f0(%rdi),%rax
	mov    0x10(%rax),%rax
	mov    0x1b0(%rdi),%r14
	mov    %rdi,%r15
	callq  *%rax
	mov    0x20(%r14),%eax
	test   %eax,%eax
	je     147d9 <finish_pass_master+0x59>
	cmp    $0x1,%eax
	je     147fd <finish_pass_master+0x7d>
	cmp    $0x2,%eax
	jne    14805 <finish_pass_master+0x85>
	movslq 0x108(%r15),%rax
	test   %eax,%eax
	je     147cc <finish_pass_master+0x4c>
	movl   $0x1,0x20(%r14)
	movslq 0x2c(%r14),%rax
	add    $0x1,%eax
	mov    %eax,0x2c(%r14)
	jmp    14805 <finish_pass_master+0x85>
	test   %eax,%eax
	jne    14805 <finish_pass_master+0x85>
	movl   $0x2,0x20(%r14)
	movslq 0x108(%r15),%rax
	test   %eax,%eax
	jne    14805 <finish_pass_master+0x85>
	movslq 0x2c(%r14),%rax
	add    $0x1,%eax
	mov    %eax,0x2c(%r14)
	jmp    14805 <finish_pass_master+0x85>
	movl   $0x2,0x20(%r14)
	movslq 0x24(%r14),%rax
	add    $0x1,%eax
	mov    %eax,0x24(%r14)
	mov    -0x10(%rbp),%r15
	mov    -0x8(%rbp),%r14
	leaveq 
	retq   
	nopw   0x0(%rax,%rax,1)

0014820 <jpeg_alloc_quant_table>:
	push   %rbp
	mov    %rsp,%rbp
	mov    0x8(%rdi),%rax
	mov    (%rax),%rax
	xor    %esi,%esi
	mov    $0x84,%edx
	callq  *%rax
	movl   $0x0,0x80(%rax)
	leaveq 
	retq   

0014840 <jpeg_alloc_huff_table>:
	push   %rbp
	mov    %rsp,%rbp
	mov    0x8(%rdi),%rax
	mov    (%rax),%rax
	xor    %esi,%esi
	mov    $0x118,%edx
	callq  *%rax
	movl   $0x0,0x114(%rax)
	leaveq 
	retq   

0014860 <jpeg_abort>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    0x8(%rdi),%rax
	test   %rax,%rax
	je     14886 <jpeg_abort+0x26>
	mov    $0x1,%eax
	mov    %r14,-0x8(%rbp)
	mov    %r15,-0x10(%rbp)
	mov    %rdi,%r14
	mov    %rax,%r15
	jmp    1489c <jpeg_abort+0x3c>
	leaveq 
	retq   
	mov    0x8(%r14),%rax
	mov    0x48(%rax),%rax
	mov    %r14,%rdi
	mov    %r15,%rsi
	callq  *%rax
	add    $0xffffffff,%r15d
	test   %r15d,%r15d
	jg     14888 <jpeg_abort+0x28>
	movslq 0x20(%r14),%rax
	test   %eax,%eax
	jne    148bb <jpeg_abort+0x5b>
	movl   $0x64,0x24(%r14)
	mov    -0x10(%rbp),%r15
	mov    -0x8(%rbp),%r14
	leaveq 
	retq   
	movl   $0xc8,0x24(%r14)
	movq   $0x0,0x190(%r14)
	mov    -0x10(%rbp),%r15
	mov    -0x8(%rbp),%r14
	leaveq 
	retq   
	nopl   0x0(%rax,%rax,1)

00148e0 <jpeg_destroy>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    0x8(%rdi),%rax
	test   %rax,%rax
	je     14908 <jpeg_destroy+0x28>
	mov    %rdi,%rcx
	mov    %r15,-0x8(%rbp)
	mov    %rdi,%r15
	mov    %rcx,%rdi
	callq  *0x50(%rax)
	mov    %r15,%rdi
	mov    -0x8(%rbp),%r15
	movq   $0x0,0x8(%rdi)
	movl   $0x0,0x24(%rdi)
	leaveq 
	retq   
	nopl   0x0(%rax)

0014920 <jpeg_set_defaults>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %r15,-0x10(%rbp)
	mov    %r14,-0x8(%rbp)
	movslq 0x24(%rdi),%rax
	cmp    $0x64,%eax
	jne    1493e <jpeg_set_defaults+0x1e>
	mov    %rdi,%r15
	jmp    1495d <jpeg_set_defaults+0x3d>
	mov    (%rdi),%rax
	movl   $0x14,0x28(%rax)
	movslq 0x24(%rdi),%rcx
	mov    (%rdi),%rax
	mov    %ecx,0x2c(%rax)
	mov    (%rdi),%rax
	mov    (%rax),%rax
	mov    %rdi,%r15
	callq  *%rax
	xor    %r14d,%r14d
	mov    0x58(%r15),%rax
	test   %rax,%rax
	jne    14981 <jpeg_set_defaults+0x61>
	mov    0x8(%r15),%rax
	mov    (%rax),%rax
	mov    $0x3c0,%edx
	mov    %r15,%rdi
	mov    %r14,%rsi
	callq  *%rax
	mov    %rax,0x58(%r15)
	movl   $0x8,0x48(%r15)
	mov    $0x4b,%esi
	mov    $0x1,%edx
	mov    %r15,%rdi
	callq  4310 <jpeg_set_quality@plt>
	mov    %r15,%rdi
	callq  155b0 <std_huff_tables>
	jmp    149c7 <jpeg_set_defaults+0xa7>
	movslq %r14d,%rax
	movb   $0x0,0xc0(%r15,%rax,1)
	movb   $0x1,0xd0(%r15,%rax,1)
	movb   $0x5,0xe0(%r15,%rax,1)
	add    $0x1,%r14d
	cmp    $0xf,%r14d
	jle    149a5 <jpeg_set_defaults+0x85>
	movq   $0x0,0xf8(%r15)
	movl   $0x0,0xf0(%r15)
	movl   $0x0,0x100(%r15)
	movl   $0x0,0x104(%r15)
	movl   $0x0,0x108(%r15)
	movslq 0x48(%r15),%rax
	cmp    $0x8,%eax
	jle    14a18 <jpeg_set_defaults+0xf8>
	movl   $0x1,0x108(%r15)
	mov    %r15,%rdi
	movl   $0x0,0x10c(%rdi)
	movl   $0x0,0x110(%rdi)
	movl   $0x0,0x114(%rdi)
	movl   $0x0,0x118(%rdi)
	movl   $0x0,0x11c(%rdi)
	movb   $0x1,0x124(%rdi)
	movb   $0x1,0x125(%rdi)
	movb   $0x0,0x126(%rdi)
	movw   $0x1,0x128(%rdi)
	movw   $0x1,0x12a(%rdi)
	callq  4070 <jpeg_default_colorspace@plt>
	mov    -0x8(%rbp),%r14
	mov    -0x10(%rbp),%r15
	leaveq 
	retq   
	data16 nopw %cs:0x0(%rax,%rax,1)
	xchg   %ax,%ax

0014a90 <jpeg_set_colorspace>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	movslq 0x24(%rdi),%rax
	cmp    $0x64,%eax
	je     14adf <jpeg_set_colorspace+0x4f>
	mov    (%rdi),%rax
	movl   $0x14,0x28(%rax)
	movslq 0x24(%rdi),%rcx
	mov    (%rdi),%rax
	mov    %ecx,0x2c(%rax)
	mov    (%rdi),%rax
	mov    (%rax),%rax
	mov    %rdi,%rcx
	mov    %r14,-0x8(%rbp)
	mov    %r15,-0x10(%rbp)
	mov    %rdi,%r14
	mov    %rcx,%rdi
	mov    %rsi,%r15
	callq  *%rax
	mov    %r15,%rsi
	mov    %r14,%rdi
	mov    -0x10(%rbp),%r15
	mov    -0x8(%rbp),%r14
	mov    %esi,0x50(%rdi)
	movl   $0x0,0x120(%rdi)
	movl   $0x0,0x12c(%rdi)
	cmp    $0x5,%esi
	ja     14b35 <jpeg_set_colorspace+0xa5>
	lea    0x447e2(%rip),%rcx        # 592e4 <jpeg_nbits_table+0x10030>
	movslq (%rcx,%rsi,4),%rax
	add    %rcx,%rax
	jmpq   *%rax
	movslq 0x38(%rdi),%rax
	mov    %eax,0x4c(%rdi)
	xor    %edx,%edx
	test   %eax,%eax
	jle    14ec1 <jpeg_set_colorspace+0x431>
	cmp    $0xa,%eax
	jg     14ec1 <jpeg_set_colorspace+0x431>
	mov    %r14,-0x8(%rbp)
	mov    %r15,-0x10(%rbp)
	mov    %rdx,%r14
	jmpq   14f39 <jpeg_set_colorspace+0x4a9>
	mov    (%rdi),%rax
	movl   $0xa,0x28(%rax)
	mov    (%rdi),%rax
	mov    (%rax),%rax
	callq  *%rax
	leaveq 
	retq   
	movl   $0x1,0x120(%rdi)
	movl   $0x1,0x4c(%rdi)
	mov    0x58(%rdi),%rax
	movl   $0x1,(%rax)
	movl   $0x1,0x8(%rax)
	movl   $0x1,0xc(%rax)
	movl   $0x0,0x10(%rax)
	movl   $0x0,0x14(%rax)
	movl   $0x0,0x18(%rax)
	leaveq 
	retq   
	movl   $0x1,0x12c(%rdi)
	movl   $0x3,0x4c(%rdi)
	mov    0x58(%rdi),%rax
	movl   $0x52,(%rax)
	movl   $0x1,0x8(%rax)
	movl   $0x1,0xc(%rax)
	movl   $0x0,0x10(%rax)
	movl   $0x0,0x14(%rax)
	movl   $0x0,0x18(%rax)
	mov    0x58(%rdi),%rax
	movl   $0x47,0x60(%rax)
	movl   $0x1,0x68(%rax)
	movl   $0x1,0x6c(%rax)
	movl   $0x0,0x70(%rax)
	movl   $0x0,0x74(%rax)
	movl   $0x0,0x78(%rax)
	mov    0x58(%rdi),%rax
	movl   $0x42,0xc0(%rax)
	movl   $0x1,0xc8(%rax)
	movl   $0x1,0xcc(%rax)
	movl   $0x0,0xd0(%rax)
	movl   $0x0,0xd4(%rax)
	movl   $0x0,0xd8(%rax)
	leaveq 
	retq   
	movl   $0x1,0x120(%rdi)
	movl   $0x3,0x4c(%rdi)
	mov    0x58(%rdi),%rax
	movl   $0x1,(%rax)
	movl   $0x2,0x8(%rax)
	movl   $0x2,0xc(%rax)
	movl   $0x0,0x10(%rax)
	movl   $0x0,0x14(%rax)
	movl   $0x0,0x18(%rax)
	mov    0x58(%rdi),%rax
	movl   $0x2,0x60(%rax)
	movl   $0x1,0x68(%rax)
	movl   $0x1,0x6c(%rax)
	movl   $0x1,0x70(%rax)
	movl   $0x1,0x74(%rax)
	movl   $0x1,0x78(%rax)
	mov    0x58(%rdi),%rax
	movl   $0x3,0xc0(%rax)
	movl   $0x1,0xc8(%rax)
	movl   $0x1,0xcc(%rax)
	movl   $0x1,0xd0(%rax)
	movl   $0x1,0xd4(%rax)
	movl   $0x1,0xd8(%rax)
	leaveq 
	retq   
	movl   $0x1,0x12c(%rdi)
	movl   $0x4,0x4c(%rdi)
	mov    0x58(%rdi),%rax
	movl   $0x43,(%rax)
	movl   $0x1,0x8(%rax)
	movl   $0x1,0xc(%rax)
	movl   $0x0,0x10(%rax)
	movl   $0x0,0x14(%rax)
	movl   $0x0,0x18(%rax)
	mov    0x58(%rdi),%rax
	movl   $0x4d,0x60(%rax)
	movl   $0x1,0x68(%rax)
	movl   $0x1,0x6c(%rax)
	movl   $0x0,0x70(%rax)
	movl   $0x0,0x74(%rax)
	movl   $0x0,0x78(%rax)
	mov    0x58(%rdi),%rax
	movl   $0x59,0xc0(%rax)
	movl   $0x1,0xc8(%rax)
	movl   $0x1,0xcc(%rax)
	movl   $0x0,0xd0(%rax)
	movl   $0x0,0xd4(%rax)
	movl   $0x0,0xd8(%rax)
	mov    0x58(%rdi),%rax
	movl   $0x4b,0x120(%rax)
	movl   $0x1,0x128(%rax)
	movl   $0x1,0x12c(%rax)
	movl   $0x0,0x130(%rax)
	movl   $0x0,0x134(%rax)
	movl   $0x0,0x138(%rax)
	leaveq 
	retq   
	movl   $0x1,0x12c(%rdi)
	movl   $0x4,0x4c(%rdi)
	mov    0x58(%rdi),%rax
	movl   $0x1,(%rax)
	movl   $0x2,0x8(%rax)
	movl   $0x2,0xc(%rax)
	movl   $0x0,0x10(%rax)
	movl   $0x0,0x14(%rax)
	movl   $0x0,0x18(%rax)
	mov    0x58(%rdi),%rax
	movl   $0x2,0x60(%rax)
	movl   $0x1,0x68(%rax)
	movl   $0x1,0x6c(%rax)
	movl   $0x1,0x70(%rax)
	movl   $0x1,0x74(%rax)
	movl   $0x1,0x78(%rax)
	mov    0x58(%rdi),%rax
	movl   $0x3,0xc0(%rax)
	movl   $0x1,0xc8(%rax)
	movl   $0x1,0xcc(%rax)
	movl   $0x1,0xd0(%rax)
	movl   $0x1,0xd4(%rax)
	movl   $0x1,0xd8(%rax)
	mov    0x58(%rdi),%rax
	movl   $0x4,0x120(%rax)
	movl   $0x2,0x128(%rax)
	movl   $0x2,0x12c(%rax)
	movl   $0x0,0x130(%rax)
	movl   $0x0,0x134(%rax)
	movl   $0x0,0x138(%rax)
	leaveq 
	retq   
	mov    (%rdi),%rax
	movl   $0x1a,0x28(%rax)
	movslq 0x4c(%rdi),%rcx
	mov    (%rdi),%rax
	mov    %ecx,0x2c(%rax)
	mov    (%rdi),%rax
	movl   $0xa,0x30(%rax)
	mov    (%rdi),%rax
	mov    (%rax),%rax
	mov    %rdi,%rcx
	mov    %r14,-0x8(%rbp)
	mov    %r15,-0x10(%rbp)
	mov    %rdx,%r14
	mov    %rdi,%r15
	mov    %rcx,%rdi
	callq  *%rax
	mov    %r15,%rdi
	jmp    14f39 <jpeg_set_colorspace+0x4a9>
	movslq %r14d,%rax
	lea    (%rax,%rax,2),%rax
	shl    $0x5,%rax
	add    0x58(%rdi),%rax
	mov    %r14d,(%rax)
	movl   $0x1,0x8(%rax)
	movl   $0x1,0xc(%rax)
	movl   $0x0,0x10(%rax)
	movl   $0x0,0x14(%rax)
	movl   $0x0,0x18(%rax)
	add    $0x1,%r14d
	movslq 0x4c(%rdi),%rax
	cmp    %r14d,%eax
	jg     14f00 <jpeg_set_colorspace+0x470>
	mov    -0x10(%rbp),%r15
	mov    -0x8(%rbp),%r14
	leaveq 
	retq   
	nopl   0x0(%rax)

0014f50 <jpeg_default_colorspace>:
	push   %rbp
	mov    %rsp,%rbp
	mov    0x3c(%rdi),%eax
	cmp    $0xf,%eax
	ja     14f7a <jpeg_default_colorspace+0x2a>
	mov    $0x3,%esi
	lea    0x44394(%rip),%rcx        # 592fc <jpeg_nbits_table+0x10048>
	movslq (%rcx,%rax,4),%rax
	add    %rcx,%rax
	jmpq   *%rax
	xor    %esi,%esi
	callq  4170 <jpeg_set_colorspace@plt>
	leaveq 
	retq   
	mov    (%rdi),%rax
	movl   $0x9,0x28(%rax)
	mov    (%rdi),%rax
	mov    (%rax),%rax
	callq  *%rax
	leaveq 
	retq   
	mov    $0x1,%esi
	callq  4170 <jpeg_set_colorspace@plt>
	leaveq 
	retq   
	callq  4170 <jpeg_set_colorspace@plt>
	leaveq 
	retq   
	callq  4170 <jpeg_set_colorspace@plt>
	leaveq 
	retq   
	mov    $0x4,%esi
	callq  4170 <jpeg_set_colorspace@plt>
	leaveq 
	retq   
	mov    $0x5,%esi
	callq  4170 <jpeg_set_colorspace@plt>
	leaveq 
	retq   

0014fc0 <jpeg_set_quality>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %r14,-0x8(%rbp)
	mov    %r15,-0x10(%rbp)
	mov    %rdi,%r14
	mov    %rsi,%rdi
	mov    %rdx,%r15
	callq  43b0 <jpeg_quality_scaling@plt>
	mov    %r15,%rdx
	mov    %rax,%rsi
	mov    %r14,%rdi
	callq  4400 <jpeg_set_linear_quality@plt>
	mov    -0x10(%rbp),%r15
	mov    -0x8(%rbp),%r14
	leaveq 
	retq   
	nopw   %cs:0x0(%rax,%rax,1)

0015000 <jpeg_set_linear_quality>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %r13,-0x8(%rbp)
	mov    %r14,-0x10(%rbp)
	mov    %r15,-0x18(%rbp)
	mov    %rdx,%r13
	mov    %rsi,%r15
	xor    %esi,%esi
	lea    0x44319(%rip),%rdx        # 5933c <std_luminance_quant_tbl>
	mov    %rdi,%r14
	mov    %r15,%rcx
	mov    %r13,%r8
	callq  42f0 <jpeg_add_quant_table@plt>
	mov    %r15,%rcx
	mov    %r14,%rdi
	mov    %r13,%r8
	mov    $0x1,%esi
	lea    0x443f6(%rip),%rdx        # 5943c <std_chrominance_quant_tbl>
	callq  42f0 <jpeg_add_quant_table@plt>
	mov    -0x18(%rbp),%r15
	mov    -0x10(%rbp),%r14
	mov    -0x8(%rbp),%r13
	leaveq 
	retq   
	nopl   0x0(%rax)

0015060 <jpeg_add_quant_table>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %rbx,-0x8(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %r15,-0x28(%rbp)
	movslq 0x24(%rdi),%rax
	cmp    $0x64,%eax
	jne    15096 <jpeg_add_quant_table+0x36>
	mov    %rdi,%rbx
	mov    %rdx,%r12
	mov    %r8,%r13
	mov    %rcx,%r14
	mov    %rsi,%r15
	jmp    150c1 <jpeg_add_quant_table+0x61>
	mov    (%rdi),%rax
	movl   $0x14,0x28(%rax)
	movslq 0x24(%rdi),%rbx
	mov    (%rdi),%rax
	mov    %ebx,0x2c(%rax)
	mov    (%rdi),%rax
	mov    (%rax),%rax
	mov    %rdx,%r12
	mov    %r8,%r13
	mov    %rcx,%r14
	mov    %rsi,%r15
	mov    %rdi,%rbx
	callq  *%rax
	test   %r15d,%r15d
	js     150d1 <jpeg_add_quant_table+0x71>
	cmp    $0x3,%r15d
	jg     150d1 <jpeg_add_quant_table+0x71>
	mov    %r15,%rax
	jmp    150f0 <jpeg_add_quant_table+0x90>
	mov    (%rbx),%rax
	movl   $0x1f,0x28(%rax)
	mov    (%rbx),%rax
	mov    %r15d,0x2c(%rax)
	mov    (%rbx),%rax
	mov    (%rax),%rax
	mov    %rbx,%rdi
	callq  *%rax
	mov    %r15,%rax
	movslq %r14d,%r15
	xor    %ecx,%ecx
	mov    $0xff,%edi
	mov    $0x7fff,%r8d
	mov    $0x1,%r9d
	mov    $0x64,%r10d
	movslq %eax,%r14
	mov    0x60(%rbx,%r14,8),%rax
	test   %rax,%rax
	jne    15184 <jpeg_add_quant_table+0x124>
	mov    %rbx,%rdi
	callq  4270 <jpeg_alloc_quant_table@plt>
	mov    %rax,0x60(%rbx,%r14,8)
	mov    $0xff,%edi
	mov    $0x7fff,%r8d
	mov    $0x1,%r9d
	mov    $0x64,%r10d
	xor    %ecx,%ecx
	jmp    15184 <jpeg_add_quant_table+0x124>
	movslq %ecx,%rsi
	mov    (%r12,%rsi,4),%eax
	imul   %r15,%rax
	add    $0x32,%rax
	cqto   
	idiv   %r10
	test   %rax,%rax
	jg     1515d <jpeg_add_quant_table+0xfd>
	mov    %r9,%rax
	cmp    $0x7fff,%rax
	jle    15168 <jpeg_add_quant_table+0x108>
	mov    %r8,%rax
	test   %r13d,%r13d
	je     15178 <jpeg_add_quant_table+0x118>
	cmp    $0xff,%rax
	jle    15178 <jpeg_add_quant_table+0x118>
	mov    %rdi,%rax
	mov    0x60(%rbx,%r14,8),%rdx
	mov    %ax,(%rdx,%rsi,2)
	add    $0x1,%ecx
	cmp    $0x3f,%ecx
	jle    15141 <jpeg_add_quant_table+0xe1>
	mov    0x60(%rbx,%r14,8),%rax
	movl   $0x0,0x80(%rax)
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	leaveq 
	retq   
	xchg   %ax,%ax

00151b0 <jpeg_quality_scaling>:
	push   %rbp
	mov    %rsp,%rbp
	test   %edi,%edi
	jg     151bd <jpeg_quality_scaling+0xd>
	mov    $0x1,%edi
	cmp    $0x64,%edi
	jle    151c7 <jpeg_quality_scaling+0x17>
	mov    $0x64,%edi
	cmp    $0x31,%edi
	jle    151d8 <jpeg_quality_scaling+0x28>
	mov    $0xc8,%eax
	lea    (%rdi,%rdi,1),%ecx
	sub    %ecx,%eax
	leaveq 
	retq   
	mov    $0x1388,%eax
	cltd   
	idiv   %edi
	leaveq 
	retq   
	data16 nopw %cs:0x0(%rax,%rax,1)
	nopl   (%rax)

00151f0 <jpeg_simple_progression>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %r14,-0x20(%rbp)
	mov    %r15,-0x28(%rbp)
	mov    %r13,-0x18(%rbp)
	movslq 0x4c(%rdi),%r15
	movslq 0x24(%rdi),%rax
	cmp    $0x64,%eax
	je     15237 <jpeg_simple_progression+0x47>
	mov    (%rdi),%rax
	movl   $0x14,0x28(%rax)
	movslq 0x24(%rdi),%rcx
	mov    (%rdi),%rax
	mov    %ecx,0x2c(%rax)
	mov    (%rdi),%rax
	mov    (%rax),%rax
	mov    %rdi,%r14
	callq  *%rax
	mov    %r14,%rdi
	mov    -0x20(%rbp),%r14
	mov    $0xa,%edx
	cmp    $0x3,%r15d
	je     15252 <jpeg_simple_progression+0x62>
	cmp    $0x4,%r15d
	jg     1525f <jpeg_simple_progression+0x6f>
	lea    0x2(,%r15,4),%eax
	jmp    15265 <jpeg_simple_progression+0x75>
	mov    0x50(%rdi),%eax
	cmp    $0x3,%eax
	jne    15242 <jpeg_simple_progression+0x52>
	mov    %rdx,%rax
	jmp    15265 <jpeg_simple_progression+0x75>
	lea    (%r15,%r15,2),%eax
	add    %eax,%eax
	xor    %esi,%esi
	mov    0x1f8(%rdi),%rcx
	test   %rcx,%rcx
	je     1527b <jpeg_simple_progression+0x8b>
	cmp    0x200(%rdi),%eax
	jle    152ba <jpeg_simple_progression+0xca>
	cmp    $0xa,%eax
	jle    15283 <jpeg_simple_progression+0x93>
	mov    %rax,%rdx
	mov    %edx,0x200(%rdi)
	mov    0x8(%rdi),%rcx
	mov    (%rcx),%rcx
	movslq %edx,%rdx
	lea    (%rdx,%rdx,8),%rdx
	shl    $0x2,%rdx
	mov    %rax,%r14
	mov    %rdi,%r13
	callq  *%rcx
	mov    %rax,0x1f8(%r13)
	mov    %r14,%rax
	mov    %r13,%rdi
	xor    %esi,%esi
	mov    -0x18(%rbp),%r13
	mov    -0x20(%rbp),%r14
	cmp    $0x3,%r15d
	mov    0x1f8(%rdi),%r10
	mov    %r10,0xf8(%rdi)
	mov    %eax,0xf0(%rdi)
	mov    $0x1,%ecx
	mov    $0x5,%r11d
	mov    $0x2,%r8d
	mov    $0x3f,%r9d
	je     1538a <jpeg_simple_progression+0x19a>
	mov    %rsi,%rdx
	mov    %r10,%rdi
	mov    %r15,%rsi
	callq  156d0 <fill_dc_scans>
	mov    %rax,%rdi
	mov    %r15,%rsi
	mov    $0x1,%edx
	xor    %r8d,%r8d
	mov    $0x2,%r9d
	mov    $0x5,%ecx
	callq  15690 <fill_scans>
	mov    %rax,%rdi
	mov    %r15,%rsi
	mov    $0x3f,%ecx
	xor    %r8d,%r8d
	mov    $0x2,%r9d
	mov    $0x6,%edx
	callq  15690 <fill_scans>
	mov    %rax,%rdi
	mov    $0x1,%edx
	mov    %rdx,%r9
	mov    %r15,%rsi
	mov    $0x3f,%ecx
	mov    $0x2,%r8d
	callq  15690 <fill_scans>
	mov    %rax,%rdi
	mov    %r15,%rsi
	mov    $0x1,%edx
	xor    %ecx,%ecx
	callq  156d0 <fill_dc_scans>
	mov    %r15,%rsi
	mov    %rax,%rdi
	mov    $0x1,%edx
	mov    %rdx,%r8
	mov    $0x3f,%ecx
	xor    %r9d,%r9d
	callq  15690 <fill_scans>
	mov    -0x28(%rbp),%r15
	leaveq 
	retq   
	mov    0x50(%rdi),%eax
	cmp    $0x3,%eax
	jne    152ef <jpeg_simple_progression+0xff>
	mov    $0x3,%eax
	mov    %rsi,%rdx
	mov    %rcx,%rdi
	mov    %rbx,-0x8(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    %r9,%rbx
	mov    %rsi,%r12
	mov    %rax,%rsi
	mov    %rcx,%r13
	mov    %rdi,%rcx
	mov    %r10,%rdi
	mov    %r8,%r14
	mov    %r11,%r15
	callq  156d0 <fill_dc_scans>
	mov    %r15,%rcx
	mov    %rax,%rdi
	mov    %r12,%r8
	mov    %r12,%rsi
	mov    %r13,%rdx
	mov    %r14,%r9
	callq  15660 <fill_a_scan>
	mov    %rax,%rdi
	mov    %r13,%r9
	mov    %r14,%rsi
	mov    %r13,%rdx
	mov    %rbx,%rcx
	mov    %r12,%r8
	callq  15660 <fill_a_scan>
	mov    %rax,%rdi
	mov    %r13,%rdx
	mov    %r13,%r9
	mov    %r13,%rsi
	mov    %rbx,%rcx
	mov    %r12,%r8
	callq  15660 <fill_a_scan>
	mov    %rax,%rdi
	mov    %r12,%r8
	mov    %r12,%rsi
	mov    %rbx,%rcx
	mov    %r14,%r9
	mov    $0x6,%edx
	callq  15660 <fill_a_scan>
	mov    %rax,%rdi
	mov    %r13,%r9
	mov    %r12,%rsi
	mov    %r13,%rdx
	mov    %rbx,%rcx
	mov    %r14,%r8
	callq  15660 <fill_a_scan>
	mov    %rax,%rdi
	mov    %r13,%rdx
	mov    %r12,%rcx
	mov    $0x3,%esi
	callq  156d0 <fill_dc_scans>
	mov    %r14,%rsi
	mov    %rax,%rdi
	mov    %r13,%r8
	mov    %r13,%rdx
	mov    %rbx,%rcx
	mov    %r12,%r9
	callq  15660 <fill_a_scan>
	mov    %rax,%rdi
	mov    %r13,%rdx
	mov    %r13,%r8
	mov    %r13,%rsi
	mov    %rbx,%rcx
	mov    %r12,%r9
	callq  15660 <fill_a_scan>
	mov    %rbx,%rcx
	mov    %r13,%rdx
	mov    %r12,%rsi
	mov    %rax,%rdi
	mov    %rsi,%r9
	mov    %rdx,%r8
	callq  15660 <fill_a_scan>
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	mov    -0x18(%rbp),%r13
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	leaveq 
	retq   
	nopl   0x0(%rax)

00154b0 <add_huff_table>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    (%rsi),%rax
	test   %rax,%rax
	je     154c2 <add_huff_table+0x12>
	leaveq 
	retq   
	mov    %rdi,%rax
	mov    %r12,-0x8(%rbp)
	mov    %r13,-0x10(%rbp)
	mov    %r14,-0x18(%rbp)
	mov    %r15,-0x20(%rbp)
	mov    %rsi,%r12
	mov    %rcx,%r13
	mov    %rdi,%r14
	mov    %rax,%rdi
	mov    %rdx,%r15
	callq  44a0 <jpeg_alloc_huff_table@plt>
	mov    %rax,%rdi
	mov    %rdi,(%r12)
	mov    $0x11,%edx
	mov    %r15,%rsi
	callq  42c0 <memcpy@plt>
	xor    %edx,%edx
	mov    $0x1,%r8d
	mov    %rdx,%rax
	jmp    15518 <add_huff_table+0x68>
	movslq %r8d,%rcx
	movzbl (%r15,%rcx,1),%ecx
	add    %ecx,%eax
	add    $0x1,%r8d
	cmp    $0x10,%r8d
	jle    1550a <add_huff_table+0x5a>
	test   %eax,%eax
	jle    1552e <add_huff_table+0x7e>
	cmp    $0x100,%eax
	jg     1552e <add_huff_table+0x7e>
	mov    %rdx,%r14
	jmp    1554c <add_huff_table+0x9c>
	mov    (%r14),%rcx
	movl   $0x8,0x28(%rcx)
	mov    (%r14),%rcx
	mov    (%rcx),%rcx
	mov    %r14,%rdi
	mov    %rdx,%r14
	mov    %rax,%r15
	callq  *%rcx
	mov    %r15,%rax
	mov    (%r12),%rdi
	add    $0x11,%rdi
	mov    %r13,%rsi
	mov    %rax,%r13
	movslq %r13d,%r15
	mov    %r15,%rdx
	callq  42c0 <memcpy@plt>
	mov    (%r12),%rax
	lea    0x11(%rax,%r15,1),%rdi
	mov    $0x100,%eax
	sub    %r13d,%eax
	movslq %eax,%rdx
	mov    %r14,%rsi
	callq  41e0 <memset@plt>
	mov    (%r12),%rax
	movl   $0x0,0x114(%rax)
	mov    -0x20(%rbp),%r15
	mov    -0x18(%rbp),%r14
	mov    -0x10(%rbp),%r13
	mov    -0x8(%rbp),%r12
	leaveq 
	retq   
	data16 nopw %cs:0x0(%rax,%rax,1)
	nopl   0x0(%rax)

00155b0 <std_huff_tables>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %r13,-0x8(%rbp)
	mov    %r14,-0x10(%rbp)
	mov    %r15,-0x18(%rbp)
	movslq 0x20(%rdi),%rax
	test   %eax,%eax
	jne    155dc <std_huff_tables+0x2c>
	lea    0x80(%rdi),%r15
	lea    0xa0(%rdi),%r13
	jmp    155ea <std_huff_tables+0x3a>
	lea    0xe8(%rdi),%r15
	lea    0x108(%rdi),%r13
	lea    0x43f4b(%rip),%rdx        # 5953c <bits_dc_luminance.5>
	lea    0x43f55(%rip),%rcx        # 5954d <val_dc_luminance.6>
	mov    %rdi,%r14
	mov    %r15,%rsi
	callq  154b0 <add_huff_table>
	lea    0x43f6c(%rip),%rdx        # 59576 <bits_ac_luminance.9>
	lea    0x43f76(%rip),%rcx        # 59587 <val_ac_luminance.10>
	mov    %r14,%rdi
	mov    %r13,%rsi
	callq  154b0 <add_huff_table>
	lea    0x8(%r15),%rsi
	lea    0x43f32(%rip),%rdx        # 59559 <bits_dc_chrominance.7>
	lea    0x43f3c(%rip),%rcx        # 5956a <val_dc_chrominance.8>
	mov    %r14,%rdi
	callq  154b0 <add_huff_table>
	lea    0x8(%r13),%rsi
	mov    %r14,%rdi
	lea    0x43fe5(%rip),%rdx        # 59629 <bits_ac_chrominance.11>
	lea    0x43fef(%rip),%rcx        # 5963a <val_ac_chrominance.12>
	callq  154b0 <add_huff_table>
	mov    -0x18(%rbp),%r15
	mov    -0x10(%rbp),%r14
	mov    -0x8(%rbp),%r13
	leaveq 
	retq   
	xchg   %ax,%ax

0015660 <fill_a_scan>:
	push   %rbp
	mov    %rsp,%rbp
	movl   $0x1,(%rdi)
	mov    %esi,0x4(%rdi)
	mov    %edx,0x14(%rdi)
	mov    %ecx,0x18(%rdi)
	mov    %r8d,0x1c(%rdi)
	mov    %r9d,0x20(%rdi)
	lea    0x24(%rdi),%rax
	leaveq 
	retq   
	data16 nopw %cs:0x0(%rax,%rax,1)
	nopl   0x0(%rax)

0015690 <fill_scans>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdi,%rax
	xor    %r10d,%r10d
	jmp    156bc <fill_scans+0x2c>
	movl   $0x1,(%rax)
	mov    %r10d,0x4(%rax)
	mov    %edx,0x14(%rax)
	mov    %ecx,0x18(%rax)
	mov    %r8d,0x1c(%rax)
	mov    %r9d,0x20(%rax)
	add    $0x24,%rax
	add    $0x1,%r10d
	cmp    %esi,%r10d
	jl     1569c <fill_scans+0xc>
	leaveq 
	retq   
	data16 nopw %cs:0x0(%rax,%rax,1)
	xchg   %ax,%ax

00156d0 <fill_dc_scans>:
	push   %rbp
	mov    %rsp,%rbp
	xor    %eax,%eax
	cmp    $0x4,%esi
	jle    156ee <fill_dc_scans+0x1e>
	mov    %rdx,%r8
	mov    %rax,%rdx
	mov    %rcx,%r9
	mov    %rdx,%rcx
	callq  15690 <fill_scans>
	leaveq 
	retq   
	mov    %esi,(%rdi)
	jmp    156fd <fill_dc_scans+0x2d>
	movslq %eax,%r8
	mov    %eax,0x4(%rdi,%r8,4)
	add    $0x1,%eax
	cmp    %esi,%eax
	jl     156f2 <fill_dc_scans+0x22>
	movl   $0x0,0x18(%rdi)
	movl   $0x0,0x14(%rdi)
	mov    %edx,0x1c(%rdi)
	mov    %ecx,0x20(%rdi)
	lea    0x24(%rdi),%rax
	leaveq 
	retq   
	nopl   0x0(%rax,%rax,1)

0015720 <jinit_phuff_encoder>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %r15,-0x8(%rbp)
	mov    0x8(%rdi),%rax
	mov    (%rax),%rax
	mov    $0x1,%esi
	mov    $0xb8,%edx
	mov    %rdi,%r15
	callq  *%rax
	mov    %rax,0x1f0(%r15)
	lea    0x9c0(%rip),%rcx        # 16110 <start_pass_phuff>
	mov    %rcx,(%rax)
	xor    %ecx,%ecx
	jmp    15772 <jinit_phuff_encoder+0x52>
	movslq %ecx,%rdx
	movq   $0x0,0x78(%rax,%rdx,8)
	movq   $0x0,0x98(%rax,%rdx,8)
	add    $0x1,%ecx
	cmp    $0x3,%ecx
	jle    15757 <jinit_phuff_encoder+0x37>
	movq   $0x0,0x68(%rax)
	mov    -0x8(%rbp),%r15
	leaveq 
	retq   
	data16 nopw %cs:0x0(%rax,%rax,1)

0015790 <encode_mcu_DC_first>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x40,%rsp
	mov    %rbx,-0x8(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %r15,-0x28(%rbp)
	mov    %rdi,-0x40(%rbp)
	mov    %rsi,-0x38(%rbp)
	mov    0x1a8(%rdi),%ecx
	mov    0x1f0(%rdi),%r13
	mov    0x28(%rdi),%rax
	mov    (%rax),%rax
	mov    %rax,0x20(%r13)
	mov    0x28(%rdi),%rax
	mov    0x8(%rax),%rax
	mov    %rax,0x28(%r13)
	xor    %ebx,%ebx
	mov    0x118(%rdi),%eax
	test   %eax,%eax
	jne    157ec <encode_mcu_DC_first+0x5c>
	mov    %rdi,%r12
	mov    %rbx,%r14
	jmp    1585e <encode_mcu_DC_first+0xce>
	mov    0x70(%r13),%eax
	test   %eax,%eax
	je     158ab <encode_mcu_DC_first+0x11b>
	mov    %rdi,%r12
	mov    %rbx,%r14
	jmp    1585e <encode_mcu_DC_first+0xce>
	sar    %eax
	add    $0x1,%ebx
	test   %eax,%eax
	jne    15800 <encode_mcu_DC_first+0x70>
	cmp    $0xb,%ebx
	jle    1582f <encode_mcu_DC_first+0x9f>
	mov    (%r12),%rax
	movl   $0x6,0x28(%rax)
	mov    (%r12),%rax
	mov    (%rax),%rax
	mov    %r12,%rdi
	mov    %rdx,%r12
	callq  *%rax
	mov    %r12,%rdx
	mov    -0x40(%rbp),%r12
	movslq 0x14(%rdx),%rsi
	mov    %r13,%rdi
	mov    %rbx,%rdx
	callq  16570 <emit_symbol>
	test   %ebx,%ebx
	je     15850 <encode_mcu_DC_first+0xc0>
	mov    %rbx,%rdx
	mov    %r15,%rsi
	mov    %r13,%rdi
	callq  163e0 <emit_bits>
	add    $0x1,%r14d
	xor    %ebx,%ebx
	mov    -0x38(%rbp),%rsi
	mov    -0x30(%rbp),%rcx
	movslq 0x170(%r12),%rax
	cmp    %r14d,%eax
	jg     158cb <encode_mcu_DC_first+0x13b>
	mov    0x20(%r13),%rcx
	mov    0x28(%r12),%rax
	mov    %rcx,(%rax)
	mov    0x28(%r13),%rcx
	mov    0x28(%r12),%rax
	mov    %rcx,0x8(%rax)
	mov    $0x1,%eax
	mov    0x118(%r12),%edx
	test   %edx,%edx
	jne    15909 <encode_mcu_DC_first+0x179>
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	leaveq 
	retq   
	mov    %rdi,%r12
	mov    %rsi,%r14
	mov    %rcx,%r15
	movslq 0x74(%r13),%rsi
	mov    %r13,%rdi
	callq  16700 <emit_restart>
	mov    %r15,%rcx
	mov    %r14,%rsi
	mov    %rbx,%r14
	jmp    1585e <encode_mcu_DC_first+0xce>
	movslq %r14d,%rax
	movslq 0x174(%r12,%rax,4),%rdi
	mov    0x148(%r12,%rdi,8),%rdx
	mov    (%rsi,%rax,8),%rax
	movswq (%rax),%rsi
	sar    %cl,%esi
	mov    %rcx,-0x30(%rbp)
	movslq 0x48(%r13,%rdi,4),%rax
	mov    %esi,0x48(%r13,%rdi,4)
	mov    %rsi,%r15
	sub    %eax,%r15d
	test   %r15d,%r15d
	js     15944 <encode_mcu_DC_first+0x1b4>
	mov    %r15,%rax
	jmpq   15805 <encode_mcu_DC_first+0x75>
	mov    0x70(%r13),%ecx
	test   %ecx,%ecx
	jne    15923 <encode_mcu_DC_first+0x193>
	mov    %edx,0x70(%r13)
	movslq 0x74(%r13),%rcx
	add    $0x1,%ecx
	and    $0x7,%ecx
	mov    %ecx,0x74(%r13)
	mov    0x70(%r13),%ecx
	add    $0xffffffff,%ecx
	mov    %ecx,0x70(%r13)
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	leaveq 
	retq   
	sub    %esi,%eax
	add    $0xffffffff,%r15d
	jmpq   15805 <encode_mcu_DC_first+0x75>
	nop

0015950 <encode_mcu_AC_first>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x60,%rsp
	mov    %rbx,-0x8(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %r15,-0x28(%rbp)
	mov    %rdi,-0x58(%rbp)
	movslq 0x1a0(%rdi),%rax
	mov    %rax,-0x60(%rbp)
	mov    0x1a8(%rdi),%ecx
	mov    0x1f0(%rdi),%rbx
	mov    0x28(%rdi),%rdx
	mov    (%rdx),%rdx
	mov    %rdx,0x20(%rbx)
	mov    0x28(%rdi),%rdx
	mov    0x8(%rdx),%rdx
	mov    %rdx,0x28(%rbx)
	mov    0x118(%rdi),%edx
	test   %edx,%edx
	jne    159cd <encode_mcu_AC_first+0x7d>
	mov    (%rsi),%rsi
	mov    %rsi,-0x48(%rbp)
	movslq 0x19c(%rdi),%r12
	mov    0x5861a(%rip),%rdx        # 6dfd8 <jpeg_natural_order@@LIBJPEG_6.2+0x129f4>
	mov    %rdx,-0x50(%rbp)
	mov    $0xf0,%r14d
	xor    %r13d,%r13d
	jmp    15a02 <encode_mcu_AC_first+0xb2>
	mov    0x70(%rbx),%edx
	test   %edx,%edx
	jne    159a9 <encode_mcu_AC_first+0x59>
	mov    %rcx,%r12
	mov    %rax,%r13
	mov    %rdi,%r14
	mov    %rsi,%r15
	movslq 0x74(%rbx),%rsi
	mov    %rbx,%rdi
	callq  16700 <emit_restart>
	mov    %r13,%rax
	mov    %r12,%rcx
	mov    %r15,%rsi
	mov    %r14,%rdi
	jmp    159a9 <encode_mcu_AC_first+0x59>
	add    $0x1,%r13d
	add    $0x1,%r12d
	cmp    %eax,%r12d
	jle    15a64 <encode_mcu_AC_first+0x114>
	test   %r13d,%r13d
	jle    15a24 <encode_mcu_AC_first+0xd4>
	mov    0x5c(%rbx),%eax
	add    $0x1,%eax
	mov    %eax,0x5c(%rbx)
	cmp    $0x7fff,%eax
	jne    15a24 <encode_mcu_AC_first+0xd4>
	mov    %rbx,%rdi
	callq  16630 <emit_eobrun>
	mov    0x20(%rbx),%rcx
	mov    -0x58(%rbp),%rdx
	mov    0x28(%rdx),%rax
	mov    %rcx,(%rax)
	mov    0x28(%rbx),%rcx
	mov    0x28(%rdx),%rax
	mov    %rcx,0x8(%rax)
	mov    0x118(%rdx),%ecx
	test   %ecx,%ecx
	jne    15a84 <encode_mcu_AC_first+0x134>
	mov    $0x1,%eax
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	leaveq 
	retq   
	movslq %r12d,%rdi
	movslq (%rdx,%rdi,4),%rdi
	movswq (%rsi,%rdi,2),%r8
	test   %r8w,%r8w
	je     159fa <encode_mcu_AC_first+0xaa>
	test   %r8w,%r8w
	js     15abf <encode_mcu_AC_first+0x16f>
	sar    %cl,%r8d
	mov    %r8,%r15
	jmp    15acb <encode_mcu_AC_first+0x17b>
	mov    0x70(%rbx),%eax
	test   %eax,%eax
	jne    15a9b <encode_mcu_AC_first+0x14b>
	mov    %ecx,0x70(%rbx)
	movslq 0x74(%rbx),%rax
	add    $0x1,%eax
	and    $0x7,%eax
	mov    %eax,0x74(%rbx)
	mov    0x70(%rbx),%eax
	add    $0xffffffff,%eax
	mov    %eax,0x70(%rbx)
	mov    $0x1,%eax
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	leaveq 
	retq   
	neg    %r8d
	sar    %cl,%r8d
	mov    %r8,%r15
	not    %r15d
	test   %r8d,%r8d
	je     15ae1 <encode_mcu_AC_first+0x191>
	mov    0x5c(%rbx),%eax
	test   %eax,%eax
	jne    15aea <encode_mcu_AC_first+0x19a>
	mov    %rcx,-0x40(%rbp)
	mov    %r8,-0x30(%rbp)
	jmp    15b1a <encode_mcu_AC_first+0x1ca>
	add    $0x1,%r13d
	jmpq   159fe <encode_mcu_AC_first+0xae>
	mov    %rbx,%rdi
	mov    %r12,-0x38(%rbp)
	mov    %rcx,-0x40(%rbp)
	mov    %r8,%r12
	callq  16630 <emit_eobrun>
	mov    %r12,-0x30(%rbp)
	mov    -0x38(%rbp),%r12
	jmp    15b1a <encode_mcu_AC_first+0x1ca>
	movslq 0x58(%rbx),%rsi
	mov    %rbx,%rdi
	mov    %r14,%rdx
	callq  16570 <emit_symbol>
	add    $0xfffffff0,%r13d
	cmp    $0xf,%r13d
	jg     15b07 <encode_mcu_AC_first+0x1b7>
	mov    -0x30(%rbp),%rax
	mov    -0x40(%rbp),%rcx
	mov    $0x1,%r14d
	jmp    15b36 <encode_mcu_AC_first+0x1e6>
	sar    %eax
	add    $0x1,%r14d
	mov    %rax,%rdx
	and    $0xfffffffe,%edx
	test   %edx,%edx
	jne    15b30 <encode_mcu_AC_first+0x1e0>
	cmp    $0xa,%r14d
	jle    15b64 <encode_mcu_AC_first+0x214>
	mov    -0x58(%rbp),%rdi
	mov    (%rdi),%rax
	movl   $0x6,0x28(%rax)
	mov    (%rdi),%rax
	mov    (%rax),%rax
	mov    %rcx,-0x40(%rbp)
	callq  *%rax
	mov    -0x40(%rbp),%rcx
	shl    $0x4,%r13d
	lea    (%r14,%r13,1),%edx
	mov    %rcx,%r13
	movslq 0x58(%rbx),%rsi
	mov    %rbx,%rdi
	callq  16570 <emit_symbol>
	mov    %r14,%rdx
	mov    %r15,%rsi
	mov    %r13,%r15
	mov    %rbx,%rdi
	callq  163e0 <emit_bits>
	mov    %r15,%rcx
	mov    $0xf0,%r14d
	xor    %r13d,%r13d
	mov    -0x48(%rbp),%rsi
	mov    -0x50(%rbp),%rdx
	mov    -0x60(%rbp),%rax
	jmpq   159fe <encode_mcu_AC_first+0xae>
	nopl   0x0(%rax)

0015bb0 <encode_mcu_DC_refine>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %rbx,-0x8(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %r15,-0x28(%rbp)
	mov    0x1a8(%rdi),%ebx
	mov    0x1f0(%rdi),%r14
	mov    0x28(%rdi),%rax
	mov    (%rax),%rax
	mov    %rax,0x20(%r14)
	mov    0x28(%rdi),%rax
	mov    0x8(%rax),%rax
	mov    %rax,0x28(%r14)
	mov    $0x1,%edx
	xor    %r12d,%r12d
	mov    0x118(%rdi),%eax
	test   %eax,%eax
	jne    15c0a <encode_mcu_DC_refine+0x5a>
	mov    %rdi,%r13
	mov    %rsi,%r15
	jmp    15c3e <encode_mcu_DC_refine+0x8e>
	mov    0x70(%r14),%eax
	test   %eax,%eax
	je     15c85 <encode_mcu_DC_refine+0xd5>
	mov    %rdi,%r13
	mov    %rsi,%r15
	jmp    15c3e <encode_mcu_DC_refine+0x8e>
	movslq %r12d,%rax
	mov    (%r15,%rax,8),%rax
	movswq (%rax),%rsi
	mov    %rbx,%rcx
	sar    %cl,%esi
	mov    %rcx,%rbx
	mov    %r14,%rdi
	callq  163e0 <emit_bits>
	add    $0x1,%r12d
	mov    $0x1,%edx
	movslq 0x170(%r13),%rax
	cmp    %r12d,%eax
	jg     15c1a <encode_mcu_DC_refine+0x6a>
	mov    0x20(%r14),%rcx
	mov    0x28(%r13),%rax
	mov    %rcx,(%rax)
	mov    0x28(%r14),%rcx
	mov    0x28(%r13),%rax
	mov    %rcx,0x8(%rax)
	mov    0x118(%r13),%ecx
	test   %ecx,%ecx
	jne    15c9e <encode_mcu_DC_refine+0xee>
	mov    %rdx,%rax
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	leaveq 
	retq   
	mov    %rdi,%r13
	mov    %rsi,%r15
	movslq 0x74(%r14),%rsi
	mov    %r14,%rdi
	callq  16700 <emit_restart>
	mov    $0x1,%edx
	jmp    15c3e <encode_mcu_DC_refine+0x8e>
	mov    0x70(%r14),%eax
	test   %eax,%eax
	jne    15cb8 <encode_mcu_DC_refine+0x108>
	mov    %ecx,0x70(%r14)
	movslq 0x74(%r14),%rax
	add    $0x1,%eax
	and    $0x7,%eax
	mov    %eax,0x74(%r14)
	mov    0x70(%r14),%eax
	add    $0xffffffff,%eax
	mov    %eax,0x70(%r14)
	mov    %rdx,%rax
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	leaveq 
	retq   
	nopl   0x0(%rax)

0015ce0 <encode_mcu_AC_refine>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x170,%rsp
	mov    %rbx,-0x8(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %r15,-0x28(%rbp)
	mov    %rdi,-0x30(%rbp)
	movslq 0x1a0(%rdi),%rdx
	mov    %rdx,-0x68(%rbp)
	mov    0x1a8(%rdi),%ecx
	mov    0x1f0(%rdi),%rbx
	mov    0x28(%rdi),%rax
	mov    (%rax),%rax
	mov    %rax,0x20(%rbx)
	mov    0x28(%rdi),%rax
	mov    0x8(%rax),%rax
	mov    %rax,0x28(%rbx)
	mov    0x118(%rdi),%eax
	test   %eax,%eax
	jne    15d5d <encode_mcu_AC_refine+0x7d>
	mov    (%rsi),%r8
	mov    %r8,-0x50(%rbp)
	movslq 0x19c(%rdi),%r10
	mov    0x58287(%rip),%r9        # 6dfd8 <jpeg_natural_order@@LIBJPEG_6.2+0x129f4>
	mov    %r9,-0x58(%rbp)
	xor    %eax,%eax
	mov    %rax,-0x48(%rbp)
	jmp    15db3 <encode_mcu_AC_refine+0xd3>
	mov    0x70(%rbx),%eax
	test   %eax,%eax
	jne    15d3c <encode_mcu_AC_refine+0x5c>
	mov    %rcx,%r12
	mov    %rdx,%r13
	mov    %rdi,%r14
	mov    %rsi,%r15
	movslq 0x74(%rbx),%rsi
	mov    %rbx,%rdi
	callq  16700 <emit_restart>
	mov    %r12,%rcx
	mov    %r13,%rdx
	mov    %r15,%rsi
	mov    %r14,%rdi
	jmp    15d3c <encode_mcu_AC_refine+0x5c>
	movslq %r10d,%r11
	movslq (%r9,%r11,4),%rsi
	movswq (%r8,%rsi,2),%rsi
	test   %si,%si
	jns    15d9d <encode_mcu_AC_refine+0xbd>
	neg    %esi
	sar    %cl,%esi
	mov    %esi,-0x170(%rbp,%r11,4)
	cmp    $0x1,%esi
	jne    15daf <encode_mcu_AC_refine+0xcf>
	mov    %r10,%rax
	add    $0x1,%r10d
	mov    %rax,-0x70(%rbp)
	cmp    %edx,%r10d
	jle    15d8a <encode_mcu_AC_refine+0xaa>
	movslq 0x19c(%rdi),%r13
	mov    0x60(%rbx),%r12d
	add    0x68(%rbx),%r12
	mov    $0x1,%ecx
	mov    %rcx,-0x40(%rbp)
	xor    %r15d,%r15d
	mov    %r15,%r14
	jmp    15de4 <encode_mcu_AC_refine+0x104>
	add    $0x1,%r15d
	add    $0x1,%r13d
	cmp    %edx,%r13d
	jle    15e5c <encode_mcu_AC_refine+0x17c>
	test   %r15d,%r15d
	jg     15df3 <encode_mcu_AC_refine+0x113>
	test   %r14d,%r14d
	je     15e1c <encode_mcu_AC_refine+0x13c>
	mov    0x5c(%rbx),%eax
	add    $0x1,%eax
	mov    %eax,0x5c(%rbx)
	add    0x60(%rbx),%r14d
	mov    %r14d,0x60(%rbx)
	cmp    $0x7fff,%eax
	je     15e14 <encode_mcu_AC_refine+0x134>
	cmp    $0x3a9,%r14d
	jbe    15e1c <encode_mcu_AC_refine+0x13c>
	mov    %rbx,%rdi
	callq  16630 <emit_eobrun>
	mov    0x20(%rbx),%rcx
	mov    -0x30(%rbp),%rdx
	mov    0x28(%rdx),%rax
	mov    %rcx,(%rax)
	mov    0x28(%rbx),%rcx
	mov    0x28(%rdx),%rax
	mov    %rcx,0x8(%rax)
	mov    0x118(%rdx),%ecx
	test   %ecx,%ecx
	jne    15e79 <encode_mcu_AC_refine+0x199>
	mov    $0x1,%eax
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	leaveq 
	retq   
	movslq %r13d,%rsi
	movslq -0x170(%rbp,%rsi,4),%rcx
	test   %ecx,%ecx
	je     15ddc <encode_mcu_AC_refine+0xfc>
	mov    %rcx,-0x38(%rbp)
	mov    %rsi,-0x60(%rbp)
	jmp    15eef <encode_mcu_AC_refine+0x20f>
	mov    0x70(%rbx),%eax
	test   %eax,%eax
	jne    15e90 <encode_mcu_AC_refine+0x1b0>
	mov    %ecx,0x70(%rbx)
	movslq 0x74(%rbx),%rax
	add    $0x1,%eax
	and    $0x7,%eax
	mov    %eax,0x74(%rbx)
	mov    0x70(%rbx),%eax
	add    $0xffffffff,%eax
	mov    %eax,0x70(%rbx)
	mov    $0x1,%eax
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	leaveq 
	retq   
	cmp    %eax,%r13d
	jg     15ef5 <encode_mcu_AC_refine+0x215>
	mov    %rbx,%rdi
	callq  16630 <emit_eobrun>
	movslq 0x58(%rbx),%rsi
	mov    %rbx,%rdi
	mov    $0xf0,%edx
	callq  16570 <emit_symbol>
	mov    %r14,%rdx
	mov    %r12,%rsi
	mov    %rbx,%rdi
	callq  165c0 <emit_buffered_bits>
	mov    0x68(%rbx),%r12
	add    $0xfffffff0,%r15d
	xor    %r14d,%r14d
	mov    -0x70(%rbp),%rax
	cmp    $0xf,%r15d
	jg     15eb4 <encode_mcu_AC_refine+0x1d4>
	mov    -0x38(%rbp),%rcx
	cmp    $0x1,%ecx
	jg     15f3c <encode_mcu_AC_refine+0x25c>
	mov    %rbx,%rdi
	callq  16630 <emit_eobrun>
	movslq 0x58(%rbx),%rsi
	shl    $0x4,%r15d
	lea    0x1(%r15),%edx
	mov    %rbx,%rdi
	callq  16570 <emit_symbol>
	mov    -0x60(%rbp),%rcx
	mov    -0x58(%rbp),%rax
	movslq (%rax,%rcx,4),%rax
	mov    -0x50(%rbp),%rcx
	movswq (%rcx,%rax,2),%rax
	test   %ax,%ax
	js     15f53 <encode_mcu_AC_refine+0x273>
	pushq  -0x40(%rbp)
	popq   -0x60(%rbp)
	jmp    15f59 <encode_mcu_AC_refine+0x279>
	and    $0x1,%cl
	mov    %r14d,%edx
	mov    %cl,(%r12,%rdx,1)
	add    $0x1,%r14d
	mov    -0x68(%rbp),%rdx
	jmpq   15de0 <encode_mcu_AC_refine+0x100>
	pushq  -0x48(%rbp)
	popq   -0x60(%rbp)
	mov    %rbx,%rdi
	mov    $0x1,%edx
	mov    -0x60(%rbp),%rsi
	callq  163e0 <emit_bits>
	mov    %r14,%rdx
	mov    %r12,%rsi
	mov    %rbx,%rdi
	callq  165c0 <emit_buffered_bits>
	mov    0x68(%rbx),%r12
	mov    -0x68(%rbp),%rdx
	xor    %r15d,%r15d
	mov    -0x70(%rbp),%rax
	mov    %r15,%r14
	jmpq   15de0 <encode_mcu_AC_refine+0x100>
	nop

0015f90 <finish_pass_phuff>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %r14,-0x8(%rbp)
	mov    %r15,-0x10(%rbp)
	mov    0x1f0(%rdi),%r15
	mov    0x28(%rdi),%rax
	mov    (%rax),%rax
	mov    %rax,0x20(%r15)
	mov    0x28(%rdi),%rax
	mov    0x8(%rax),%rax
	mov    %rax,0x28(%r15)
	mov    %rdi,%r14
	mov    %r15,%rdi
	callq  16630 <emit_eobrun>
	mov    %r15,%rdi
	callq  16530 <flush_bits>
	mov    0x20(%r15),%rcx
	mov    0x28(%r14),%rax
	mov    %rcx,(%rax)
	mov    0x28(%r15),%rcx
	mov    0x28(%r14),%rax
	mov    %rcx,0x8(%rax)
	mov    -0x10(%rbp),%r15
	mov    -0x8(%rbp),%r14
	leaveq 
	retq   
	data16 nopw %cs:0x0(%rax,%rax,1)
	nopl   (%rax)

0016000 <finish_pass_gather_phuff>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x40,%rsp
	mov    %r14,-0x20(%rbp)
	mov    %r15,-0x28(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    %rbx,-0x8(%rbp)
	mov    %rdi,%rbx
	mov    0x1f0(%rbx),%r12
	mov    %r12,%rdi
	callq  16630 <emit_eobrun>
	xor    %r13d,%r13d
	movslq 0x19c(%rbx),%rax
	test   %eax,%eax
	je     16041 <finish_pass_gather_phuff+0x41>
	mov    %r13,%r14
	jmp    16047 <finish_pass_gather_phuff+0x47>
	mov    $0x1,%r14d
	mov    %r14,-0x30(%rbp)
	lea    -0x40(%rbp),%rdi
	mov    $0x10,%edx
	mov    %r13,%rsi
	callq  41e0 <memset@plt>
	jmp    160a3 <finish_pass_gather_phuff+0xa3>
	lea    0x80(%rbx,%r15,8),%rax
	mov    (%rax),%rcx
	test   %rcx,%rcx
	jne    16083 <finish_pass_gather_phuff+0x83>
	mov    %rax,%r14
	mov    %rbx,%rdi
	callq  44a0 <jpeg_alloc_huff_table@plt>
	mov    %rax,(%r14)
	mov    %r14,%rax
	mov    -0x30(%rbp),%r14
	mov    0x98(%r12,%r15,8),%rdx
	mov    (%rax),%rsi
	mov    %rbx,%rdi
	callq  40f0 <jpeg_gen_optimal_table@plt>
	movl   $0x1,-0x40(%rbp,%r15,4)
	add    $0x1,%r13d
	movslq 0x144(%rbx),%rax
	cmp    %r13d,%eax
	jg     160c5 <finish_pass_gather_phuff+0xc5>
	mov    -0x8(%rbp),%rbx
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	leaveq 
	retq   
	test   %r14d,%r14d
	movslq %r13d,%rax
	mov    0x148(%rbx,%rax,8),%rcx
	jg     160fb <finish_pass_gather_phuff+0xfb>
	movslq 0x18(%rcx),%rax
	movslq %eax,%r15
	movslq -0x40(%rbp,%r15,4),%rax
	test   %eax,%eax
	jne    1609f <finish_pass_gather_phuff+0x9f>
	test   %r14d,%r14d
	jg     1605e <finish_pass_gather_phuff+0x5e>
	lea    0xa0(%rbx,%r15,8),%rax
	jmpq   16066 <finish_pass_gather_phuff+0x66>
	movslq 0x1a4(%rbx),%rax
	test   %eax,%eax
	jne    1609f <finish_pass_gather_phuff+0x9f>
	movslq 0x14(%rcx),%rax
	jmp    160d9 <finish_pass_gather_phuff+0xd9>
	nopl   0x0(%rax)

0016110 <start_pass_phuff>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %r15,-0x28(%rbp)
	mov    %rbx,-0x8(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %rsi,-0x30(%rbp)
	mov    0x1f0(%rdi),%r12
	mov    %rdi,0x40(%r12)
	mov    %esi,0x18(%r12)
	mov    $0x1,%eax
	xor    %r14d,%r14d
	movslq 0x19c(%rdi),%rcx
	test   %ecx,%ecx
	je     16159 <start_pass_phuff+0x49>
	mov    %r14,%r13
	jmp    1615c <start_pass_phuff+0x4c>
	mov    %rax,%r13
	movslq 0x1a4(%rdi),%rcx
	test   %ecx,%ecx
	je     1618d <start_pass_phuff+0x7d>
	test   %r13d,%r13d
	jg     161a9 <start_pass_phuff+0x99>
	lea    -0x493(%rip),%rcx        # 15ce0 <encode_mcu_AC_refine>
	mov    %rcx,0x8(%r12)
	mov    0x68(%r12),%rcx
	test   %rcx,%rcx
	je     161c0 <start_pass_phuff+0xb0>
	mov    %rdi,%rbx
	mov    %rsi,%r15
	mov    %r14,%rsi
	jmp    161fb <start_pass_phuff+0xeb>
	test   %r13d,%r13d
	jg     161e6 <start_pass_phuff+0xd6>
	lea    -0x849(%rip),%rcx        # 15950 <encode_mcu_AC_first>
	mov    %rcx,0x8(%r12)
	mov    %rdi,%rbx
	mov    %rsi,%r15
	mov    %r14,%rsi
	jmp    161fb <start_pass_phuff+0xeb>
	lea    -0x600(%rip),%rcx        # 15bb0 <encode_mcu_DC_refine>
	mov    %rcx,0x8(%r12)
	mov    %rdi,%rbx
	mov    %rsi,%r15
	mov    %r14,%rsi
	jmp    161fb <start_pass_phuff+0xeb>
	mov    0x8(%rdi),%rcx
	mov    (%rcx),%rcx
	mov    %rsi,%r15
	mov    %rax,%rsi
	mov    $0x3e8,%edx
	mov    %rdi,%rbx
	callq  *%rcx
	mov    %rax,0x68(%r12)
	mov    %r14,%rsi
	mov    $0x1,%eax
	jmp    161fb <start_pass_phuff+0xeb>
	lea    -0xa5d(%rip),%rcx        # 15790 <encode_mcu_DC_first>
	mov    %rcx,0x8(%r12)
	mov    %rdi,%rbx
	mov    %rsi,%r15
	mov    %r14,%rsi
	mov    $0x808,%edx
	test   %r15d,%r15d
	jne    16219 <start_pass_phuff+0x109>
	lea    -0x27c(%rip),%rcx        # 15f90 <finish_pass_phuff>
	mov    %rcx,0x10(%r12)
	mov    %rsi,%r14
	jmpq   162bd <start_pass_phuff+0x1ad>
	lea    -0x220(%rip),%rcx        # 16000 <finish_pass_gather_phuff>
	mov    %rcx,0x10(%r12)
	mov    %rsi,%r14
	jmpq   162bd <start_pass_phuff+0x1ad>
	test   %r8d,%r8d
	js     16238 <start_pass_phuff+0x128>
	cmp    $0x3,%r8d
	jle    1626a <start_pass_phuff+0x15a>
	mov    (%rbx),%rax
	movl   $0x32,0x28(%rax)
	mov    (%rbx),%rax
	mov    %r8d,0x2c(%rax)
	mov    (%rbx),%rax
	mov    (%rax),%rax
	mov    %rcx,%r15
	mov    %rbx,%rdi
	callq  *%rax
	mov    %r15,%rcx
	mov    -0x30(%rbp),%r15
	mov    $0x808,%edx
	xor    %esi,%esi
	mov    $0x1,%eax
	mov    0x98(%r12,%rcx,8),%rdi
	test   %rdi,%rdi
	jne    162a0 <start_pass_phuff+0x190>
	mov    0x8(%rbx),%rsi
	mov    (%rsi),%r8
	mov    %rax,%rsi
	mov    %rcx,%r15
	mov    %rbx,%rdi
	callq  *%r8
	mov    %rax,0x98(%r12,%r15,8)
	mov    %r15,%rcx
	mov    -0x30(%rbp),%r15
	mov    $0x808,%edx
	xor    %esi,%esi
	mov    0x98(%r12,%rcx,8),%rdi
	callq  41e0 <memset@plt>
	mov    $0x808,%edx
	xor    %esi,%esi
	mov    $0x1,%eax
	add    $0x1,%r14d
	movslq 0x144(%rbx),%rcx
	cmp    %r14d,%ecx
	jg     16317 <start_pass_phuff+0x207>
	movl   $0x0,0x5c(%r12)
	movl   $0x0,0x60(%r12)
	movq   $0x0,0x30(%r12)
	movl   $0x0,0x38(%r12)
	mov    0x118(%rbx),%eax
	mov    %eax,0x70(%r12)
	movl   $0x0,0x74(%r12)
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	mov    -0x28(%rbp),%r15
	leaveq 
	retq   
	test   %r13d,%r13d
	movslq %r14d,%rcx
	mov    0x148(%rbx,%rcx,8),%rdi
	movl   $0x0,0x48(%r12,%rcx,4)
	jg     16369 <start_pass_phuff+0x259>
	movslq 0x18(%rdi),%r8
	mov    %r8d,0x58(%r12)
	test   %r15d,%r15d
	movslq %r8d,%rcx
	jne    1622d <start_pass_phuff+0x11d>
	lea    0x78(%r12,%rcx,8),%rcx
	mov    %r8,%rdx
	mov    %rbx,%rdi
	mov    %r13,%rsi
	callq  40d0 <jpeg_make_c_derived_tbl@plt>
	mov    $0x808,%edx
	xor    %esi,%esi
	mov    $0x1,%eax
	jmpq   162b9 <start_pass_phuff+0x1a9>
	movslq 0x1a4(%rbx),%rcx
	test   %ecx,%ecx
	jne    162b9 <start_pass_phuff+0x1a9>
	movslq 0x14(%rdi),%r8
	jmp    16339 <start_pass_phuff+0x229>
	xchg   %ax,%ax

0016380 <dump_buffer>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %r14,-0x8(%rbp)
	mov    %r15,-0x10(%rbp)
	mov    %rdi,%r15
	mov    0x40(%r15),%rdi
	mov    0x28(%rdi),%r14
	mov    0x18(%r14),%rax
	callq  *%rax
	test   %eax,%eax
	jne    163bf <dump_buffer+0x3f>
	mov    0x40(%r15),%rax
	mov    (%rax),%rax
	movl   $0x18,0x28(%rax)
	mov    0x40(%r15),%rdi
	mov    (%rdi),%rax
	mov    (%rax),%rax
	callq  *%rax
	mov    (%r14),%rax
	mov    %rax,0x20(%r15)
	mov    0x8(%r14),%rax
	mov    %rax,0x28(%r15)
	mov    -0x10(%rbp),%r15
	mov    -0x8(%rbp),%r14
	leaveq 
	retq   
	nopl   0x0(%rax,%rax,1)

00163e0 <emit_bits>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %r15,-0x8(%rbp)
	movslq 0x38(%rdi),%r8
	test   %edx,%edx
	je     16402 <emit_bits+0x22>
	mov    %r14,%rax
	mov    %r12,%r14
	mov    %rdi,%r12
	mov    %rdx,%rcx
	jmp    16447 <emit_bits+0x67>
	mov    0x40(%rdi),%rax
	mov    (%rax),%rax
	movl   $0x28,0x28(%rax)
	mov    0x40(%rdi),%rcx
	mov    (%rcx),%rax
	mov    (%rax),%rax
	mov    %rdx,-0x18(%rbp)
	mov    %rsi,-0x10(%rbp)
	mov    %r8,-0x20(%rbp)
	mov    %r14,%r15
	mov    %r12,%r14
	mov    %rdi,%r12
	mov    %rcx,%rdi
	callq  *%rax
	mov    %r15,%rax
	mov    -0x20(%rbp),%r8
	mov    -0x10(%rbp),%rsi
	mov    -0x18(%rbp),%rcx
	mov    -0x8(%rbp),%r15
	movslq 0x18(%r12),%rdx
	test   %edx,%edx
	je     16458 <emit_bits+0x78>
	mov    %r14,%r12
	mov    %rax,%r14
	leaveq 
	retq   
	mov    %r13,%rdi
	mov    $0x1,%edx
	shl    %cl,%rdx
	lea    -0x1(%rdx),%r15
	mov    %esi,%edx
	and    %rdx,%r15
	lea    (%rcx,%r8,1),%r13d
	mov    $0x18,%ecx
	sub    %r13d,%ecx
	shl    %cl,%r15
	or     0x30(%r12),%r15
	mov    %r14,-0x10(%rbp)
	mov    %rdi,-0x18(%rbp)
	mov    %rax,-0x20(%rbp)
	jmp    16505 <emit_bits+0x125>
	mov    0x20(%r12),%rcx
	lea    0x1(%rcx),%rax
	mov    %rax,0x20(%r12)
	mov    %r15,%r14
	and    $0xff0000,%r14
	shr    $0x10,%r14
	mov    %r14b,(%rcx)
	mov    0x28(%r12),%rax
	add    $0xffffffffffffffff,%rax
	mov    %rax,0x28(%r12)
	test   %rax,%rax
	jne    164c8 <emit_bits+0xe8>
	mov    %r12,%rdi
	callq  16380 <dump_buffer>
	cmp    $0xff,%r14d
	jne    164fd <emit_bits+0x11d>
	mov    0x20(%r12),%rcx
	lea    0x1(%rcx),%rax
	mov    %rax,0x20(%r12)
	movb   $0x0,(%rcx)
	mov    0x28(%r12),%rax
	add    $0xffffffffffffffff,%rax
	mov    %rax,0x28(%r12)
	test   %rax,%rax
	jne    164fd <emit_bits+0x11d>
	mov    %r12,%rdi
	callq  16380 <dump_buffer>
	shl    $0x8,%r15
	add    $0xfffffff8,%r13d
	cmp    $0x7,%r13d
	jg     1648e <emit_bits+0xae>
	mov    %r15,0x30(%r12)
	mov    %r13d,0x38(%r12)
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%r15
	leaveq 
	retq   
	nopw   0x0(%rax,%rax,1)

0016530 <flush_bits>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %r15,-0x8(%rbp)
	mov    $0x7f,%esi
	mov    $0x7,%edx
	mov    %rdi,%r15
	callq  163e0 <emit_bits>
	movq   $0x0,0x30(%r15)
	movl   $0x0,0x38(%r15)
	mov    -0x8(%rbp),%r15
	leaveq 
	retq   
	data16 nopw %cs:0x0(%rax,%rax,1)
	nop

0016570 <emit_symbol>:
	push   %rbp
	mov    %rsp,%rbp
	movslq 0x18(%rdi),%rax
	test   %eax,%eax
	jne    1659a <emit_symbol+0x2a>
	movslq %esi,%rax
	mov    0x78(%rdi,%rax,8),%rcx
	movslq %edx,%rax
	mov    (%rcx,%rax,4),%esi
	movsbq 0x400(%rcx,%rax,1),%rdx
	callq  163e0 <emit_bits>
	leaveq 
	retq   
	movslq %edx,%rax
	shl    $0x3,%rax
	movslq %esi,%rcx
	add    0x98(%rdi,%rcx,8),%rax
	mov    (%rax),%rcx
	add    $0x1,%rcx
	mov    %rcx,(%rax)
	leaveq 
	retq   
	nopl   0x0(%rax,%rax,1)

00165c0 <emit_buffered_bits>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	movslq 0x18(%rdi),%rax
	test   %eax,%eax
	jne    165f3 <emit_buffered_bits+0x33>
	mov    $0x1,%eax
	mov    %r12,-0x8(%rbp)
	mov    %r13,-0x10(%rbp)
	mov    %r14,-0x18(%rbp)
	mov    %r15,-0x20(%rbp)
	mov    %rdx,%r12
	mov    %rsi,%r13
	mov    %rdi,%r14
	mov    %rax,%r15
	jmp    1660d <emit_buffered_bits+0x4d>
	leaveq 
	retq   
	movsbq 0x0(%r13),%rsi
	mov    %r14,%rdi
	mov    %r15,%rdx
	callq  163e0 <emit_bits>
	add    $0xffffffff,%r12d
	add    $0x1,%r13
	test   %r12d,%r12d
	jne    165f5 <emit_buffered_bits+0x35>
	mov    -0x20(%rbp),%r15
	mov    -0x18(%rbp),%r14
	mov    -0x10(%rbp),%r13
	mov    -0x8(%rbp),%r12
	leaveq 
	retq   
	data16 nopw %cs:0x0(%rax,%rax,1)
	nop

0016630 <emit_eobrun>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    0x5c(%rdi),%eax
	test   %eax,%eax
	jne    16641 <emit_eobrun+0x11>
	leaveq 
	retq   
	xor    %edx,%edx
	jmp    1664a <emit_eobrun+0x1a>
	sar    %eax
	add    $0x1,%edx
	mov    %rax,%rcx
	and    $0xfffffffe,%ecx
	test   %ecx,%ecx
	jne    16645 <emit_eobrun+0x15>
	cmp    $0xe,%edx
	jg     16661 <emit_eobrun+0x31>
	mov    %r14,%rax
	mov    %rdi,%r14
	jmp    16697 <emit_eobrun+0x67>
	mov    0x40(%rdi),%rax
	mov    (%rax),%rax
	movl   $0x28,0x28(%rax)
	mov    0x40(%rdi),%rcx
	mov    (%rcx),%rax
	mov    (%rax),%rax
	mov    %r14,-0x8(%rbp)
	mov    %r15,-0x10(%rbp)
	mov    %rdi,%r14
	mov    %rcx,%rdi
	mov    %rdx,%r15
	callq  *%rax
	mov    %r15,%rdx
	mov    -0x10(%rbp),%r15
	mov    -0x8(%rbp),%rax
	movslq 0x58(%r14),%rsi
	mov    %rdx,%rcx
	shl    $0x4,%ecx
	mov    %r14,%rdi
	mov    %rax,-0x8(%rbp)
	mov    %r15,-0x10(%rbp)
	mov    %rdx,%r15
	mov    %rcx,%rdx
	callq  16570 <emit_symbol>
	test   %r15d,%r15d
	je     166cb <emit_eobrun+0x9b>
	mov    %r15,%rdx
	mov    0x5c(%r14),%esi
	mov    %r14,%rdi
	callq  163e0 <emit_bits>
	movl   $0x0,0x5c(%r14)
	mov    0x68(%r14),%rsi
	mov    0x60(%r14),%edx
	mov    %r14,%rdi
	callq  165c0 <emit_buffered_bits>
	movl   $0x0,0x60(%r14)
	mov    -0x10(%rbp),%r15
	mov    -0x8(%rbp),%r14
	leaveq 
	retq   
	data16 nopw %cs:0x0(%rax,%rax,1)

0016700 <emit_restart>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %r15,-0x8(%rbp)
	mov    %rsi,-0x10(%rbp)
	mov    %rdi,%r15
	callq  16630 <emit_eobrun>
	movslq 0x18(%r15),%rax
	test   %eax,%eax
	je     16736 <emit_restart+0x36>
	mov    0x40(%r15),%rax
	movslq 0x19c(%rax),%rax
	test   %eax,%eax
	jne    16798 <emit_restart+0x98>
	xor    %eax,%eax
	jmpq   167bd <emit_restart+0xbd>
	mov    %r15,%rdi
	callq  16530 <flush_bits>
	mov    0x20(%r15),%rcx
	lea    0x1(%rcx),%rax
	mov    %rax,0x20(%r15)
	movb   $0xff,(%rcx)
	mov    0x28(%r15),%rax
	add    $0xffffffffffffffff,%rax
	mov    %rax,0x28(%r15)
	test   %rax,%rax
	jne    16766 <emit_restart+0x66>
	mov    %r15,%rdi
	callq  16380 <dump_buffer>
	mov    0x20(%r15),%rcx
	lea    0x1(%rcx),%rax
	mov    %rax,0x20(%r15)
	mov    -0x10(%rbp),%rax
	add    $0xd0,%eax
	mov    %al,(%rcx)
	mov    0x28(%r15),%rax
	add    $0xffffffffffffffff,%rax
	mov    %rax,0x28(%r15)
	test   %rax,%rax
	jne    16720 <emit_restart+0x20>
	mov    %r15,%rdi
	callq  16380 <dump_buffer>
	jmp    16720 <emit_restart+0x20>
	movl   $0x0,0x5c(%r15)
	movl   $0x0,0x60(%r15)
	mov    -0x8(%rbp),%r15
	leaveq 
	retq   
	movslq %eax,%rcx
	movl   $0x0,0x48(%r15,%rcx,4)
	add    $0x1,%eax
	mov    0x40(%r15),%rcx
	movslq 0x144(%rcx),%rcx
	cmp    %eax,%ecx
	jg     167ae <emit_restart+0xae>
	mov    -0x8(%rbp),%r15
	leaveq 
	retq   
	nopw   %cs:0x0(%rax,%rax,1)
	nopl   0x0(%rax)

00167e0 <jinit_c_prep_controller>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %r15,-0x28(%rbp)
	test   %esi,%esi
	jne    167fe <jinit_c_prep_controller+0x1e>
	mov    %r13,%r15
	mov    %r12,%r13
	mov    %rbx,%r12
	mov    %rdi,%rbx
	jmp    1681c <jinit_c_prep_controller+0x3c>
	mov    (%rdi),%rax
	movl   $0x4,0x28(%rax)
	mov    (%rdi),%rax
	mov    (%rax),%rax
	mov    %r13,%r15
	mov    %r12,%r13
	mov    %rbx,%r12
	mov    %rdi,%rbx
	callq  *%rax
	mov    0x8(%rbx),%rax
	mov    (%rax),%rax
	mov    $0x1,%esi
	mov    $0x70,%edx
	mov    %rbx,%rdi
	callq  *%rax
	mov    %rax,0x1c0(%rbx)
	lea    0xd0(%rip),%rcx        # 16910 <start_pass_prep>
	mov    %rcx,(%rax)
	mov    0x1e0(%rbx),%rcx
	movslq 0x10(%rcx),%rcx
	test   %ecx,%ecx
	jne    16884 <jinit_c_prep_controller+0xa4>
	lea    0x197(%rip),%rcx        # 169f0 <pre_process_data>
	mov    %rcx,0x8(%rax)
	mov    0x58(%rbx),%rdx
	xor    %ecx,%ecx
	mov    %r12,-0x8(%rbp)
	mov    %r13,-0x10(%rbp)
	mov    %r15,-0x18(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %rcx,%r12
	mov    %rdx,%r13
	mov    %rax,%r15
	mov    $0x1,%r14d
	jmp    168ec <jinit_c_prep_controller+0x10c>
	lea    0x385(%rip),%rcx        # 16c10 <pre_process_context>
	mov    %rcx,0x8(%rax)
	mov    %rbx,%rdi
	callq  16ec0 <create_context_buffer>
	mov    %r12,%rbx
	mov    %r13,%r12
	mov    %r15,%r13
	mov    -0x28(%rbp),%r15
	leaveq 
	retq   
	movslq 0x138(%rbx),%rax
	mov    0x1c(%r13),%ecx
	imul   %rcx,%rax
	shl    $0x3,%rax
	cqto   
	movslq 0x8(%r13),%rcx
	mov    0x8(%rbx),%rsi
	mov    0x10(%rsi),%r8
	idiv   %rcx
	mov    %rax,%rdx
	mov    0x13c(%rbx),%ecx
	mov    %rbx,%rdi
	mov    %r14,%rsi
	callq  *%r8
	movslq %r12d,%rcx
	mov    %rax,0x10(%r15,%rcx,8)
	add    $0x1,%r12d
	add    $0x60,%r13
	movslq 0x4c(%rbx),%rax
	cmp    %r12d,%eax
	jg     168a6 <jinit_c_prep_controller+0xc6>
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	mov    -0x28(%rbp),%r15
	leaveq 
	retq   
	nopl   0x0(%rax,%rax,1)

0016910 <start_pass_prep>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    0x1c0(%rdi),%rax
	test   %esi,%esi
	je     16957 <start_pass_prep+0x47>
	mov    (%rdi),%rcx
	movl   $0x4,0x28(%rcx)
	mov    (%rdi),%rcx
	mov    (%rcx),%rcx
	mov    %rdi,%rdx
	mov    %r14,-0x8(%rbp)
	mov    %r15,-0x10(%rbp)
	mov    %rdi,%r14
	mov    %rdx,%rdi
	mov    %rax,%r15
	callq  *%rcx
	mov    %r15,%rax
	mov    %r14,%rdi
	mov    -0x10(%rbp),%r15
	mov    -0x8(%rbp),%r14
	mov    0x34(%rdi),%ecx
	mov    %ecx,0x60(%rax)
	movl   $0x0,0x64(%rax)
	movl   $0x0,0x68(%rax)
	movslq 0x13c(%rdi),%rcx
	add    %ecx,%ecx
	mov    %ecx,0x6c(%rax)
	leaveq 
	retq   
	nopl   0x0(%rax)

0016980 <expand_bottom_edge>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %rbx,-0x8(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %r15,-0x28(%rbp)
	mov    %rdx,%rbx
	mov    %rcx,%r12
	mov    %rdi,%r13
	mov    %rsi,%r15
	lea    -0x1(%rbx),%r14d
	mov    $0x1,%r8d
	jmp    169d1 <expand_bottom_edge+0x51>
	mov    %r13,%rdx
	mov    %r13,%rdi
	mov    %r14,%rsi
	mov    %rbx,%rcx
	mov    %r15,%r9
	callq  43f0 <jcopy_sample_rows@plt>
	add    $0x1,%ebx
	mov    $0x1,%r8d
	cmp    %r12d,%ebx
	jl     169b4 <expand_bottom_edge+0x34>
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	leaveq 
	retq   
	nopl   0x0(%rax)

00169f0 <pre_process_data>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x60,%rsp
	mov    %r15,-0x28(%rbp)
	mov    %rsi,-0x40(%rbp)
	mov    %r8,-0x38(%rbp)
	mov    %rcx,-0x48(%rbp)
	mov    %rbx,-0x8(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    0x10(%rbp),%eax
	mov    %rax,-0x30(%rbp)
	mov    0x1c0(%rdi),%r14
	lea    0x10(%r14),%rbx
	mov    %rbx,-0x58(%rbp)
	mov    %rdi,%r12
	mov    %rdx,%r13
	mov    %r9,%r15
	jmpq   16b01 <pre_process_data+0x111>
	mov    (%r15),%edx
	cmp    %eax,%edx
	jae    16b23 <pre_process_data+0x133>
	movslq 0x64(%r14),%rdx
	movslq 0x13c(%r12),%rax
	sub    %edx,%eax
	sub    %edi,%ecx
	cmp    %eax,%ecx
	jbe    16a5e <pre_process_data+0x6e>
	mov    %rax,%rcx
	lea    (%rsi,%rdi,8),%rsi
	mov    0x1d8(%r12),%rax
	mov    0x8(%rax),%rax
	mov    %rdx,%r9
	mov    %rbx,%rdx
	mov    %rcx,%rbx
	mov    %r9,%rcx
	mov    %r12,%rdi
	mov    %rbx,%r8
	callq  *%rax
	mov    %rbx,%rax
	add    0x0(%r13),%eax
	mov    %eax,0x0(%r13)
	mov    %rbx,%rdx
	add    0x64(%r14),%edx
	mov    %edx,0x64(%r14)
	mov    0x60(%r14),%ecx
	mov    %rcx,%rax
	sub    %ebx,%eax
	mov    %eax,0x60(%r14)
	cmp    %ecx,%ebx
	je     16b39 <pre_process_data+0x149>
	mov    -0x58(%rbp),%rbx
	movslq 0x13c(%r12),%rax
	cmp    0x64(%r14),%eax
	jne    16aed <pre_process_data+0xfd>
	mov    0x1e0(%r12),%rax
	mov    0x8(%rax),%rax
	mov    (%r15),%r8d
	mov    %r12,%rdi
	mov    %rbx,%rsi
	xor    %edx,%edx
	mov    -0x38(%rbp),%rcx
	callq  *%rax
	movl   $0x0,0x64(%r14)
	mov    (%r15),%eax
	add    $0x1,%eax
	mov    %eax,(%r15)
	mov    0x60(%r14),%eax
	test   %eax,%eax
	je     16b4c <pre_process_data+0x15c>
	mov    -0x48(%rbp),%rcx
	mov    -0x30(%rbp),%rax
	mov    -0x40(%rbp),%rsi
	mov    0x0(%r13),%edi
	cmp    %ecx,%edi
	jb     16a3c <pre_process_data+0x4c>
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	mov    -0x28(%rbp),%r15
	leaveq 
	retq   
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	mov    -0x28(%rbp),%r15
	leaveq 
	retq   
	cmp    0x13c(%r12),%edx
	jl     16b5f <pre_process_data+0x16f>
	mov    -0x58(%rbp),%rbx
	jmpq   16ab1 <pre_process_data+0xc1>
	mov    -0x30(%rbp),%rax
	cmp    (%r15),%eax
	ja     16b6c <pre_process_data+0x17c>
	mov    -0x48(%rbp),%rcx
	mov    -0x40(%rbp),%rsi
	jmp    16b01 <pre_process_data+0x111>
	mov    %r15,-0x50(%rbp)
	mov    -0x58(%rbp),%rbx
	xor    %r15d,%r15d
	jmp    16b9a <pre_process_data+0x1aa>
	mov    0x58(%r12),%r13
	mov    -0x38(%rbp),%r14
	xor    %ebx,%ebx
	jmp    16be8 <pre_process_data+0x1f8>
	movslq %r15d,%rax
	mov    (%rbx,%rax,8),%rdi
	mov    0x30(%r12),%esi
	movslq 0x64(%r14),%rdx
	movslq 0x13c(%r12),%rcx
	callq  16980 <expand_bottom_edge>
	add    $0x1,%r15d
	movslq 0x4c(%r12),%rax
	cmp    %r15d,%eax
	jg     16b79 <pre_process_data+0x189>
	movslq 0x13c(%r12),%rax
	mov    %eax,0x64(%r14)
	mov    -0x50(%rbp),%r15
	jmpq   16ab1 <pre_process_data+0xc1>
	movslq %ebx,%rcx
	mov    (%r14,%rcx,8),%rdi
	mov    0xc(%r13),%ecx
	mov    %rcx,%rdx
	imul   (%r15),%edx
	imul   %ecx,%eax
	mov    0x1c(%r13),%esi
	shl    $0x3,%esi
	mov    %rax,%rcx
	callq  16980 <expand_bottom_edge>
	add    $0x1,%ebx
	add    $0x60,%r13
	mov    -0x30(%rbp),%rax
	movslq 0x4c(%r12),%rcx
	cmp    %ebx,%ecx
	jg     16bb9 <pre_process_data+0x1c9>
	mov    %eax,(%r15)
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	mov    -0x28(%rbp),%r15
	leaveq 
	retq   
	nopw   0x0(%rax,%rax,1)

0016c10 <pre_process_context>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x80,%rsp
	mov    %r15,-0x28(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    %rsi,-0x58(%rbp)
	mov    %r8,-0x48(%rbp)
	mov    %rcx,-0x78(%rbp)
	mov    %rdx,-0x40(%rbp)
	mov    %rbx,-0x8(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    %r9,-0x50(%rbp)
	mov    0x10(%rbp),%eax
	mov    %rax,-0x30(%rbp)
	xor    %r13d,%r13d
	mov    0x1c0(%rdi),%r12
	lea    0x10(%r12),%r14
	mov    %r14,-0x60(%rbp)
	movslq 0x13c(%rdi),%rbx
	lea    (%rbx,%rbx,2),%r10d
	mov    %r10,-0x70(%rbp)
	mov    %rdi,%rbx
	mov    %r9,%r15
	jmpq   16d9a <pre_process_context+0x18a>
	movslq 0x64(%r12),%r9
	movslq 0x6c(%r12),%rax
	sub    %r9d,%eax
	sub    %edi,%ecx
	cmp    %ecx,%eax
	jae    16c8d <pre_process_context+0x7d>
	mov    %rax,%rcx
	lea    (%rsi,%rdi,8),%rsi
	mov    0x1d8(%rbx),%rax
	mov    0x8(%rax),%rax
	mov    %rdx,%r13
	mov    %r14,%rdx
	mov    %rcx,%r14
	mov    %r9,%rcx
	mov    %rbx,%rdi
	mov    %r14,%r8
	callq  *%rax
	mov    0x34(%rbx),%eax
	cmp    0x60(%r12),%eax
	je     16db7 <pre_process_context+0x1a7>
	mov    %r13,%rdx
	xor    %r13d,%r13d
	mov    %r14,%rax
	add    (%rdx),%eax
	mov    %eax,(%rdx)
	mov    %r14,%rax
	add    0x64(%r12),%eax
	mov    %eax,0x64(%r12)
	mov    0x60(%r12),%eax
	sub    %r14d,%eax
	mov    %eax,0x60(%r12)
	mov    -0x60(%rbp),%r14
	mov    -0x78(%rbp),%rcx
	mov    -0x30(%rbp),%rax
	mov    -0x48(%rbp),%r8
	mov    -0x58(%rbp),%rsi
	mov    -0x70(%rbp),%r10
	movslq 0x6c(%r12),%rdi
	cmp    0x64(%r12),%edi
	jne    16d9a <pre_process_context+0x18a>
	mov    0x1e0(%rbx),%rcx
	mov    0x8(%rcx),%r9
	mov    %r8,%rcx
	mov    %r14,%rsi
	mov    %r10,%r14
	mov    %rax,%r13
	mov    0x68(%r12),%edx
	mov    (%r15),%r8d
	mov    %rbx,%rdi
	callq  *%r9
	mov    (%r15),%eax
	add    $0x1,%eax
	mov    %eax,(%r15)
	movslq 0x68(%r12),%rax
	add    0x13c(%rbx),%eax
	mov    %eax,0x68(%r12)
	cmp    %r14d,%eax
	jl     16d59 <pre_process_context+0x149>
	movl   $0x0,0x68(%r12)
	movslq 0x64(%r12),%rax
	cmp    %r14d,%eax
	jl     16d6c <pre_process_context+0x15c>
	movl   $0x0,0x64(%r12)
	movslq 0x13c(%rbx),%rax
	add    0x64(%r12),%eax
	mov    %eax,0x6c(%r12)
	mov    %r13,%rax
	mov    %r14,%r10
	mov    -0x40(%rbp),%rdx
	mov    -0x60(%rbp),%r14
	mov    -0x78(%rbp),%rcx
	mov    -0x48(%rbp),%r8
	mov    -0x58(%rbp),%rsi
	xor    %r13d,%r13d
	mov    (%r15),%edi
	cmp    %eax,%edi
	jb     16dc9 <pre_process_context+0x1b9>
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	mov    -0x18(%rbp),%r13
	mov    -0x20(%rbp),%r14
	mov    -0x28(%rbp),%r15
	leaveq 
	retq   
	mov    %r14,-0x38(%rbp)
	xor    %r13d,%r13d
	mov    $0x1,%r8d
	mov    %r13,%rax
	jmp    16e27 <pre_process_context+0x217>
	mov    (%rdx),%edi
	cmp    %ecx,%edi
	jb     16c77 <pre_process_context+0x67>
	mov    0x60(%r12),%edi
	test   %edi,%edi
	jne    16e40 <pre_process_context+0x230>
	movslq 0x6c(%r12),%rdi
	cmp    0x64(%r12),%edi
	jg     16e73 <pre_process_context+0x263>
	jmpq   16cfd <pre_process_context+0xed>
	mov    0x10(%r12,%r14,8),%rdi
	mov    %r15,%rcx
	neg    %ecx
	mov    0x30(%rbx),%r9d
	mov    %rdi,%rdx
	mov    %r13,%rsi
	callq  43f0 <jcopy_sample_rows@plt>
	add    $0x1,%r15d
	mov    $0x1,%r8d
	movslq 0x13c(%rbx),%rax
	cmp    %r15d,%eax
	jge    16df1 <pre_process_context+0x1e1>
	mov    -0x68(%rbp),%rax
	add    $0x1,%eax
	movslq 0x4c(%rbx),%rcx
	cmp    %eax,%ecx
	jg     16ea6 <pre_process_context+0x296>
	mov    -0x50(%rbp),%r15
	mov    -0x38(%rbp),%r14
	mov    -0x40(%rbp),%rdx
	jmpq   16cc4 <pre_process_context+0xb4>
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	mov    -0x18(%rbp),%r13
	mov    -0x20(%rbp),%r14
	mov    -0x28(%rbp),%r15
	leaveq 
	retq   
	movslq %r13d,%rax
	mov    (%r14,%rax,8),%rdi
	mov    0x30(%rbx),%esi
	movslq 0x64(%r12),%rdx
	movslq 0x6c(%r12),%rcx
	callq  16980 <expand_bottom_edge>
	add    $0x1,%r13d
	movslq 0x4c(%rbx),%rax
	cmp    %r13d,%eax
	jg     16e56 <pre_process_context+0x246>
	movslq 0x6c(%r12),%rax
	mov    %eax,0x64(%r12)
	mov    -0x40(%rbp),%rdx
	mov    -0x78(%rbp),%rcx
	mov    -0x30(%rbp),%rax
	mov    -0x48(%rbp),%r8
	mov    -0x58(%rbp),%rsi
	mov    -0x70(%rbp),%r10
	xor    %r13d,%r13d
	jmpq   16cfd <pre_process_context+0xed>
	movslq %eax,%r14
	mov    %rax,-0x68(%rbp)
	mov    %r8,%r15
	jmpq   16e14 <pre_process_context+0x204>
	data16 nopw %cs:0x0(%rax,%rax,1)

0016ec0 <create_context_buffer>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x60,%rsp
	mov    %r13,-0x18(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %r15,-0x28(%rbp)
	mov    %rdi,-0x58(%rbp)
	mov    %rbx,-0x8(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    0x1c0(%rdi),%rax
	mov    %rax,-0x38(%rbp)
	movslq 0x13c(%rdi),%r12
	mov    %r12,%rax
	imul   0x4c(%rdi),%eax
	lea    (%rax,%rax,4),%eax
	movslq %eax,%rdx
	shl    $0x3,%rdx
	mov    0x8(%rdi),%rax
	mov    (%rax),%rax
	mov    $0x1,%r13d
	mov    %rdi,%r15
	mov    %r13,%rsi
	callq  *%rax
	mov    0x58(%r15),%r8
	lea    (%r12,%r12,2),%ecx
	mov    %rcx,-0x50(%rbp)
	movslq %ecx,%rbx
	shl    $0x3,%rbx
	mov    %rbx,-0x40(%rbp)
	lea    (%r12,%r12,4),%edx
	movslq %edx,%rdx
	mov    %rdx,-0x48(%rbp)
	mov    %r13,%rsi
	mov    %rax,%r13
	mov    %r15,%rdi
	xor    %r14d,%r14d
	mov    %r14,%r15
	jmp    16fa8 <create_context_buffer+0xe8>
	lea    (%rcx,%r12,2),%eax
	movslq %eax,%rax
	mov    (%rbx,%rax,8),%rax
	movslq %ecx,%rdx
	mov    %rax,0x0(%r13,%rdx,8)
	mov    (%rbx,%rdx,8),%rdx
	lea    (%rcx,%r12,4),%eax
	movslq %eax,%rax
	mov    %rdx,0x0(%r13,%rax,8)
	add    $0x1,%ecx
	cmp    %r12d,%ecx
	jl     16f4b <create_context_buffer+0x8b>
	movslq %r15d,%rax
	mov    -0x30(%rbp),%rdx
	mov    -0x38(%rbp),%rcx
	mov    %rdx,0x10(%rcx,%rax,8)
	add    $0x1,%r15d
	mov    -0x48(%rbp),%rax
	lea    0x0(%r13,%rax,8),%r13
	lea    0x60(%rsi),%r8
	mov    -0x40(%rbp),%rbx
	mov    -0x50(%rbp),%rcx
	mov    -0x58(%rbp),%rdi
	mov    $0x1,%esi
	movslq 0x4c(%rdi),%rax
	cmp    %r15d,%eax
	jg     16fc7 <create_context_buffer+0x107>
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	leaveq 
	retq   
	movslq 0x138(%rdi),%rax
	mov    0x1c(%r8),%edx
	imul   %rdx,%rax
	shl    $0x3,%rax
	cqto   
	movslq 0x8(%r8),%r9
	mov    %r8,-0x60(%rbp)
	mov    0x8(%rdi),%r8
	mov    0x10(%r8),%r8
	idiv   %r9
	mov    %rax,%rdx
	callq  *%r8
	mov    %rbx,%rdx
	mov    %rax,%rbx
	lea    0x0(%r13,%r12,8),%rdi
	mov    %rdi,-0x30(%rbp)
	mov    %rbx,%rsi
	callq  42c0 <memcpy@plt>
	mov    -0x60(%rbp),%rsi
	mov    %r14,%rcx
	jmpq   16f71 <create_context_buffer+0xb1>
	nopl   0x0(%rax,%rax,1)

0017020 <jinit_downsampler>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x50,%rsp
	mov    %r14,-0x20(%rbp)
	mov    %r15,-0x28(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    %rdi,-0x40(%rbp)
	mov    %rbx,-0x8(%rbp)
	mov    0x8(%rdi),%rax
	mov    (%rax),%rax
	mov    $0x1,%r15d
	mov    $0x68,%edx
	mov    %rdi,%r12
	mov    %r15,%rsi
	callq  *%rax
	mov    %rax,0x1e0(%r12)
	lea    0x347(%rip),%rcx        # 173b0 <start_pass_downsample>
	mov    %rcx,(%rax)
	lea    0x39d(%rip),%rcx        # 17410 <sep_downsample>
	mov    %rcx,0x8(%rax)
	movl   $0x0,0x10(%rax)
	movslq 0x10c(%r12),%rcx
	test   %ecx,%ecx
	jne    1708f <jinit_downsampler+0x6f>
	mov    %rax,%rbx
	jmp    170a9 <jinit_downsampler+0x89>
	mov    (%r12),%rcx
	movl   $0x19,0x28(%rcx)
	mov    (%r12),%rcx
	mov    (%rcx),%rcx
	mov    %rax,%rbx
	mov    %r12,%rdi
	callq  *%rcx
	mov    0x58(%r12),%r13
	lea    0x2678b(%rip),%rcx        # 3d840 <jsimd_h2v1_downsample>
	mov    %rcx,-0x30(%rbp)
	lea    0x26740(%rip),%rdi        # 3d800 <jsimd_h2v2_downsample>
	mov    %rdi,-0x38(%rbp)
	xor    %esi,%esi
	lea    0xa43(%rip),%r8        # 17b10 <fullsize_smooth_downsample>
	lea    0x56c(%rip),%rax        # 17640 <fullsize_downsample>
	lea    0x765(%rip),%rdx        # 17840 <h2v2_smooth_downsample>
	mov    %rsi,%r14
	jmpq   1717c <jinit_downsampler+0x15c>
	movslq %r14d,%r9
	movslq 0x138(%r12),%r10
	cmp    0x8(%r13),%r10d
	je     171b0 <jinit_downsampler+0x190>
	movslq 0x138(%r12),%r10
	movslq 0x8(%r13),%rax
	add    %eax,%eax
	cmp    %eax,%r10d
	je     171d9 <jinit_downsampler+0x1b9>
	movslq 0x138(%r12),%r10
	movslq 0x8(%r13),%rax
	add    %eax,%eax
	cmp    %eax,%r10d
	je     17232 <jinit_downsampler+0x212>
	movslq 0x138(%r12),%rax
	movslq 0x8(%r13),%r10
	cltd   
	idiv   %r10d
	test   %edx,%edx
	je     172a5 <jinit_downsampler+0x285>
	mov    (%r12),%rax
	movl   $0x26,0x28(%rax)
	mov    (%r12),%rax
	mov    (%rax),%rax
	mov    %r12,%rdi
	callq  *%rax
	mov    -0x30(%rbp),%rcx
	lea    0x6e0(%rip),%rdx        # 17840 <h2v2_smooth_downsample>
	lea    0x9a9(%rip),%r8        # 17b10 <fullsize_smooth_downsample>
	mov    -0x38(%rbp),%rdi
	lea    0x4ce(%rip),%rax        # 17640 <fullsize_downsample>
	add    $0x1,%r14d
	add    $0x60,%r13
	xor    %esi,%esi
	movslq 0x4c(%r12),%r9
	cmp    %r14d,%r9d
	jg     170e3 <jinit_downsampler+0xc3>
	movslq 0x110(%r12),%rax
	test   %eax,%eax
	jne    172df <jinit_downsampler+0x2bf>
	mov    -0x8(%rbp),%rbx
	mov    -0x10(%rbp),%r12
	mov    -0x18(%rbp),%r13
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	leaveq 
	retq   
	movslq 0x13c(%r12),%r10
	cmp    0xc(%r13),%r10d
	jne    170f8 <jinit_downsampler+0xd8>
	movslq 0x110(%r12),%rsi
	test   %esi,%esi
	jne    172fe <jinit_downsampler+0x2de>
	mov    %rax,0x18(%rbx,%r9,8)
	jmp    17172 <jinit_downsampler+0x152>
	movslq 0x13c(%r12),%rax
	cmp    0xc(%r13),%eax
	jne    1710f <jinit_downsampler+0xef>
	mov    %r9,%r12
	mov    %rcx,%r15
	callq  3d7d0 <jsimd_can_h2v1_downsample>
	test   %eax,%eax
	jne    1730f <jinit_downsampler+0x2ef>
	lea    0x49b(%rip),%rax        # 176a0 <h2v1_downsample>
	mov    %rax,0x18(%rbx,%r12,8)
	mov    %r15,%rcx
	lea    0x62c(%rip),%rdx        # 17840 <h2v2_smooth_downsample>
	lea    0x8f5(%rip),%r8        # 17b10 <fullsize_smooth_downsample>
	xor    %r15d,%r15d
	mov    -0x38(%rbp),%rdi
	mov    -0x40(%rbp),%r12
	lea    0x413(%rip),%rax        # 17640 <fullsize_downsample>
	jmpq   17172 <jinit_downsampler+0x152>
	movslq 0x13c(%r12),%r10
	movslq 0xc(%r13),%rax
	add    %eax,%eax
	cmp    %eax,%r10d
	jne    17126 <jinit_downsampler+0x106>
	movslq 0x110(%r12),%rax
	test   %eax,%eax
	jne    1733c <jinit_downsampler+0x31c>
	mov    %r13,-0x48(%rbp)
	mov    %r9,%r12
	mov    %rdi,%r13
	callq  3d7a0 <jsimd_can_h2v2_downsample>
	test   %eax,%eax
	jne    17354 <jinit_downsampler+0x334>
	lea    0x4d9(%rip),%rax        # 17750 <h2v2_downsample>
	mov    %rax,0x18(%rbx,%r12,8)
	mov    %r13,%rdi
	mov    -0x30(%rbp),%rcx
	mov    -0x48(%rbp),%r13
	lea    0x5b2(%rip),%rdx        # 17840 <h2v2_smooth_downsample>
	lea    0x87b(%rip),%r8        # 17b10 <fullsize_smooth_downsample>
	mov    -0x40(%rbp),%r12
	lea    0x3a0(%rip),%rax        # 17640 <fullsize_downsample>
	jmpq   17172 <jinit_downsampler+0x152>
	movslq 0x13c(%r12),%rax
	movslq 0xc(%r13),%r10
	cltd   
	idiv   %r10d
	test   %edx,%edx
	jne    1713e <jinit_downsampler+0x11e>
	lea    0x1fc(%rip),%rax        # 174c0 <int_downsample>
	mov    %rax,0x18(%rbx,%r9,8)
	mov    %rsi,%r15
	lea    0x56d(%rip),%rdx        # 17840 <h2v2_smooth_downsample>
	lea    0x366(%rip),%rax        # 17640 <fullsize_downsample>
	jmpq   17172 <jinit_downsampler+0x152>
	test   %r15d,%r15d
	jle    17382 <jinit_downsampler+0x362>
	mov    -0x8(%rbp),%rbx
	mov    -0x10(%rbp),%r12
	mov    -0x18(%rbp),%r13
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	leaveq 
	retq   
	mov    %r8,0x18(%rbx,%r9,8)
	movl   $0x1,0x10(%rbx)
	jmpq   17172 <jinit_downsampler+0x152>
	mov    %r15,0x18(%rbx,%r12,8)
	mov    %r15,%rcx
	lea    0x522(%rip),%rdx        # 17840 <h2v2_smooth_downsample>
	lea    0x7eb(%rip),%r8        # 17b10 <fullsize_smooth_downsample>
	xor    %r15d,%r15d
	mov    -0x38(%rbp),%rdi
	mov    -0x40(%rbp),%r12
	lea    0x309(%rip),%rax        # 17640 <fullsize_downsample>
	jmpq   17172 <jinit_downsampler+0x152>
	mov    %rdx,0x18(%rbx,%r9,8)
	movl   $0x1,0x10(%rbx)
	lea    0x2f1(%rip),%rax        # 17640 <fullsize_downsample>
	jmpq   17172 <jinit_downsampler+0x152>
	mov    %r13,0x18(%rbx,%r12,8)
	mov    %r13,%rdi
	mov    -0x30(%rbp),%rcx
	mov    -0x48(%rbp),%r13
	lea    0x4d5(%rip),%rdx        # 17840 <h2v2_smooth_downsample>
	lea    0x79e(%rip),%r8        # 17b10 <fullsize_smooth_downsample>
	mov    -0x40(%rbp),%r12
	lea    0x2c3(%rip),%rax        # 17640 <fullsize_downsample>
	jmpq   17172 <jinit_downsampler+0x152>
	mov    (%r12),%rax
	movl   $0x63,0x28(%rax)
	mov    (%r12),%rax
	mov    0x8(%rax),%rax
	mov    %r12,%rdi
	callq  *%rax
	mov    -0x8(%rbp),%rbx
	mov    -0x10(%rbp),%r12
	mov    -0x18(%rbp),%r13
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	leaveq 
	retq   

00173b0 <start_pass_downsample>:
	push   %rbp
	mov    %rsp,%rbp
	leaveq 
	retq   
	nopw   %cs:0x0(%rax,%rax,1)

00173c0 <expand_right_edge>:
	push   %rbp
	mov    %rsp,%rbp
	sub    %edx,%ecx
	test   %ecx,%ecx
	jg     173cc <expand_right_edge+0xc>
	leaveq 
	retq   
	mov    %edx,%r9d
	xor    %r8d,%r8d
	jmp    173e6 <expand_right_edge+0x26>
	mov    %r10b,(%rax)
	add    $0x1,%rax
	add    $0xffffffff,%edx
	test   %edx,%edx
	jg     173d4 <expand_right_edge+0x14>
	add    $0x1,%r8d
	cmp    %esi,%r8d
	jl     173ed <expand_right_edge+0x2d>
	leaveq 
	retq   
	movslq %r8d,%rax
	mov    (%rdi,%rax,8),%rax
	add    %r9,%rax
	movzbl -0x1(%rax),%r10d
	mov    %rcx,%rdx
	jmp    173de <expand_right_edge+0x1e>
	data16 nopw %cs:0x0(%rax,%rax,1)
	nopl   0x0(%rax)

0017410 <sep_downsample>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x40,%rsp
	mov    %r8,-0x38(%rbp)
	mov    %rcx,-0x30(%rbp)
	mov    %rbx,-0x8(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %r15,-0x28(%rbp)
	mov    0x1e0(%rdi),%r9
	mov    %r9,-0x40(%rbp)
	mov    0x58(%rdi),%r13
	mov    %edx,%ebx
	shl    $0x3,%rbx
	mov    %rcx,%rax
	mov    %rsi,%r14
	mov    %rdi,%r15
	xor    %r12d,%r12d
	jmp    17492 <sep_downsample+0x82>
	movslq %r12d,%rsi
	mov    %rbx,%rdx
	add    (%r14,%rsi,8),%rdx
	imul   0xc(%r13),%r8d
	mov    %r8d,%ecx
	shl    $0x3,%rcx
	add    (%rax,%rsi,8),%rcx
	mov    0x18(%r9,%rsi,8),%rax
	mov    %r15,%rdi
	mov    %r13,%rsi
	callq  *%rax
	add    $0x1,%r12d
	add    $0x60,%r13
	mov    -0x40(%rbp),%r9
	mov    -0x30(%rbp),%rax
	mov    -0x38(%rbp),%r8
	movslq 0x4c(%r15),%rcx
	cmp    %r12d,%ecx
	jg     17457 <sep_downsample+0x47>
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	leaveq 
	retq   
	data16 nopw %cs:0x0(%rax,%rax,1)
	nopl   0x0(%rax)

00174c0 <int_downsample>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x80,%rsp
	mov    %r15,-0x28(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %rcx,-0x40(%rbp)
	mov    %rdx,-0x78(%rbp)
	mov    %rbx,-0x8(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    %rdi,%r8
	mov    %rdx,%rdi
	mov    %rsi,%r14
	mov    %r14,-0x30(%rbp)
	movslq 0x138(%r8),%rax
	movslq 0x8(%r14),%rcx
	cltd   
	mov    0x1c(%r14),%r13d
	idiv   %ecx
	mov    %r13,%rcx
	imul   %eax,%ecx
	shl    $0x3,%ecx
	movslq 0x13c(%r8),%r15
	movslq 0xc(%r14),%r12
	movslq 0x13c(%r8),%rsi
	mov    0x30(%r8),%edx
	mov    %rax,%rbx
	callq  173c0 <expand_right_edge>
	mov    %r15,%rax
	cltd   
	idiv   %r12d
	mov    %rbx,%rdx
	imul   %eax,%edx
	mov    %rdx,%rcx
	shr    $0x1f,%ecx
	add    %edx,%ecx
	sar    %ecx
	movslq %ecx,%r9
	movslq %edx,%r10
	shl    $0x3,%r13d
	mov    %r13,-0x70(%rbp)
	mov    %rax,%r8
	xor    %r11d,%r11d
	mov    -0x78(%rbp),%r12
	mov    -0x40(%rbp),%rcx
	mov    %r11,%rdx
	mov    %rdx,%rdi
	jmp    175ce <int_downsample+0x10e>
	lea    0x1(%rsi),%r13
	add    $0x1,%edx
	movzbl (%rsi),%eax
	add    %rax,%rcx
	mov    %r13,%rsi
	cmp    %ebx,%edx
	jl     17568 <int_downsample+0xa8>
	add    $0x1,%edi
	mov    -0x78(%rbp),%rax
	lea    0x1(%rax),%edx
	mov    -0x48(%rbp),%rsi
	cmp    %r8d,%edx
	jl     175f0 <int_downsample+0x130>
	lea    (%r9,%rcx,1),%rax
	cqto   
	idiv   %r10
	mov    -0x38(%rbp),%rcx
	mov    %al,(%rcx)
	lea    0x1(%rcx),%rax
	mov    -0x68(%rbp),%rcx
	add    $0x1,%ecx
	mov    -0x50(%rbp),%rdx
	add    %ebx,%edx
	mov    -0x58(%rbp),%rdi
	mov    -0x70(%rbp),%r13
	cmp    %r13d,%ecx
	jb     17603 <int_downsample+0x143>
	mov    -0x60(%rbp),%rax
	lea    0x1(%rax),%edx
	add    %r8d,%edi
	mov    -0x30(%rbp),%r14
	mov    -0x40(%rbp),%rcx
	mov    %rdi,-0x58(%rbp)
	movslq 0xc(%r14),%rax
	cmp    %edx,%eax
	jg     17620 <int_downsample+0x160>
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	mov    -0x20(%rbp),%r14
	mov    -0x28(%rbp),%r15
	leaveq 
	retq   
	movslq %edi,%rax
	add    (%r12,%rax,8),%rsi
	mov    %rdx,-0x78(%rbp)
	mov    %r11,%rdx
	jmpq   17578 <int_downsample+0xb8>
	mov    %edx,%esi
	mov    %rax,-0x38(%rbp)
	mov    %rcx,-0x68(%rbp)
	mov    %rdx,-0x50(%rbp)
	mov    %rsi,-0x48(%rbp)
	mov    %r11,%rcx
	mov    %rcx,%rdx
	jmpq   1758a <int_downsample+0xca>
	movslq %edx,%rax
	mov    (%rcx,%rax,8),%rax
	mov    %rdx,-0x60(%rbp)
	mov    %r11,%rcx
	mov    %rcx,%rdx
	jmp    175b7 <int_downsample+0xf7>
	data16 nopw %cs:0x0(%rax,%rax,1)
	xchg   %ax,%ax

0017640 <fullsize_downsample>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %r13,-0x8(%rbp)
	mov    %r14,-0x10(%rbp)
	mov    %r15,-0x18(%rbp)
	mov    %rsi,%r13
	mov    %rcx,%r14
	mov    %rdi,%r15
	mov    %rdx,%rdi
	xor    %esi,%esi
	movslq 0x13c(%r15),%r8
	mov    0x30(%r15),%r9d
	mov    %rsi,%rcx
	mov    %r14,%rdx
	callq  43f0 <jcopy_sample_rows@plt>
	movslq 0x13c(%r15),%rsi
	mov    0x30(%r15),%edx
	mov    0x1c(%r13),%ecx
	shl    $0x3,%ecx
	mov    %r14,%rdi
	callq  173c0 <expand_right_edge>
	mov    -0x18(%rbp),%r15
	mov    -0x10(%rbp),%r14
	mov    -0x8(%rbp),%r13
	leaveq 
	retq   

00176a0 <h2v1_downsample>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %r12,-0x8(%rbp)
	mov    %r13,-0x10(%rbp)
	mov    %r14,-0x18(%rbp)
	mov    %r15,-0x20(%rbp)
	movslq 0x13c(%rdi),%rax
	mov    0x30(%rdi),%r9d
	mov    %rdx,%r13
	mov    %r9,%rdx
	mov    %rcx,%r14
	mov    %rsi,%r15
	mov    %rax,%rsi
	mov    0x1c(%r15),%r12d
	mov    %r12,%rcx
	shl    $0x4,%ecx
	mov    %r13,%rdi
	callq  173c0 <expand_right_edge>
	shl    $0x3,%r12d
	xor    %esi,%esi
	mov    %rsi,%r10
	jmp    17720 <h2v1_downsample+0x80>
	mov    %r8,%r11
	xor    $0x1,%r11d
	movzbl 0x1(%rax),%edx
	movzbl (%rax),%ecx
	add    %edx,%ecx
	add    %ecx,%r8d
	shr    %r8d
	mov    %r8b,(%rdi)
	add    $0x2,%rax
	add    $0x1,%rdi
	add    $0x1,%r9d
	mov    %r11,%r8
	cmp    %r12d,%r9d
	jb     176ef <h2v1_downsample+0x4f>
	add    $0x1,%r10d
	movslq 0xc(%r15),%rax
	cmp    %r10d,%eax
	jg     1773b <h2v1_downsample+0x9b>
	mov    -0x20(%rbp),%r15
	mov    -0x18(%rbp),%r14
	mov    -0x10(%rbp),%r13
	mov    -0x8(%rbp),%r12
	leaveq 
	retq   
	movslq %r10d,%rax
	mov    (%r14,%rax,8),%rdi
	mov    0x0(%r13,%rax,8),%rax
	mov    %rsi,%r8
	mov    %r8,%r9
	jmp    17717 <h2v1_downsample+0x77>
	nop

0017750 <h2v2_downsample>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %r12,-0x10(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %r15,-0x28(%rbp)
	mov    %rbx,-0x8(%rbp)
	movslq 0x13c(%rdi),%rax
	mov    0x30(%rdi),%r8d
	mov    %rsi,%r13
	mov    %rax,%rsi
	mov    %rcx,%r14
	mov    %rdx,%r15
	mov    %r8,%rdx
	mov    0x1c(%r13),%r12d
	mov    %r12,%rcx
	shl    $0x4,%ecx
	mov    %r15,%rdi
	callq  173c0 <expand_right_edge>
	shl    $0x3,%r12d
	xor    %eax,%eax
	mov    $0x1,%r9d
	mov    %rax,%r10
	mov    %r10,%r11
	jmp    177f7 <h2v2_downsample+0xa7>
	mov    %r9,%rsi
	xor    $0x3,%esi
	movzbl 0x1(%rbx),%edx
	movzbl (%rbx),%ecx
	add    %ecx,%edx
	movzbl (%rdi),%ecx
	add    %ecx,%edx
	movzbl 0x1(%rdi),%ecx
	add    %edx,%ecx
	add    %ecx,%r9d
	shr    $0x2,%r9d
	mov    %r9b,(%r8)
	add    $0x2,%rdi
	add    $0x2,%rbx
	add    $0x1,%r8
	add    $0x1,%eax
	mov    %rsi,%r9
	cmp    %r12d,%eax
	jb     177ac <h2v2_downsample+0x5c>
	add    $0x1,%r10d
	add    $0x2,%r11d
	mov    $0x1,%r9d
	xor    %eax,%eax
	movslq 0xc(%r13),%rcx
	cmp    %r10d,%ecx
	jg     17816 <h2v2_downsample+0xc6>
	mov    -0x8(%rbp),%rbx
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	leaveq 
	retq   
	movslq %r10d,%rcx
	mov    (%r14,%rcx,8),%r8
	movslq %r11d,%rcx
	mov    (%r15,%rcx,8),%rbx
	lea    0x1(%r11),%ecx
	movslq %ecx,%rcx
	mov    (%r15,%rcx,8),%rdi
	jmp    177e2 <h2v2_downsample+0x92>
	data16 nopw %cs:0x0(%rax,%rax,1)
	nopl   0x0(%rax)

0017840 <h2v2_smooth_downsample>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x60,%rsp
	mov    %rbx,-0x8(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %r15,-0x28(%rbp)
	mov    %rsi,-0x38(%rbp)
	mov    %rdx,-0x50(%rbp)
	mov    %rcx,-0x40(%rbp)
	lea    -0x8(%rdx),%rbx
	movslq 0x13c(%rdi),%rax
	add    $0x2,%eax
	mov    %rdx,%r12
	mov    %rsi,%r13
	mov    %rax,%rsi
	mov    %rdi,%r15
	mov    %rbx,%rdi
	mov    %rcx,%rbx
	mov    0x30(%r15),%edx
	mov    0x1c(%r13),%r14d
	mov    %r14,%rcx
	shl    $0x4,%ecx
	callq  173c0 <expand_right_edge>
	movslq 0x110(%r15),%rcx
	mov    %rcx,%rax
	shl    $0x4,%eax
	movslq %eax,%r15
	mov    $0x4000,%eax
	lea    (%rcx,%rcx,4),%ecx
	shl    $0x4,%ecx
	sub    %ecx,%eax
	movslq %eax,%r11
	xor    %eax,%eax
	lea    -0x2(,%r14,8),%ecx
	mov    %rcx,-0x30(%rbp)
	mov    %rax,%rdi
	jmpq   17a15 <h2v2_smooth_downsample+0x1d5>
	lea    0x2(%r9),%r13
	movzbl 0x0(%r13),%r10d
	movzbl -0x1(%r9),%ebx
	add    %r10d,%ebx
	movzbl -0x1(%rdx),%r10d
	add    %r10d,%ebx
	lea    0x2(%rdx),%r14
	movzbl (%r14),%r10d
	add    %r10d,%ebx
	movslq %ebx,%r12
	movzbl 0x1(%r9),%r10d
	movzbl (%r9),%ebx
	add    %r10d,%ebx
	movzbl (%rdx),%r9d
	add    %r9d,%ebx
	movzbl 0x1(%rdx),%edx
	add    %ebx,%edx
	movzbl -0x1(%rsi),%ebx
	lea    (%rbx,%rdx,1),%r9d
	lea    0x2(%rsi),%rbx
	movzbl (%rbx),%edx
	add    %edx,%r9d
	movzbl -0x1(%r8),%edx
	lea    (%rdx,%r9,1),%r10d
	lea    0x2(%r8),%r9
	movzbl (%r9),%edx
	add    %r10d,%edx
	movslq %edx,%rdx
	lea    (%r12,%rdx,2),%rdx
	imul   %r15,%rdx
	movzbl 0x1(%rsi),%r10d
	movzbl (%rsi),%esi
	add    %r10d,%esi
	movzbl (%r8),%r10d
	add    %r10d,%esi
	movzbl 0x1(%r8),%r8d
	add    %r8d,%esi
	movslq %esi,%rsi
	imul   %r11,%rsi
	lea    0x8000(%rdx,%rsi,1),%rdx
	sar    $0x10,%rdx
	mov    %dl,(%rax)
	add    $0x1,%rax
	add    $0xffffffff,%ecx
	mov    %r14,%rdx
	mov    %rbx,%rsi
	mov    %r9,%r8
	mov    %r13,%r9
	test   %ecx,%ecx
	jne    178d1 <h2v2_smooth_downsample+0x91>
	movzbl 0x1(%r9),%ebx
	movzbl -0x1(%r9),%ecx
	add    %ebx,%ecx
	movzbl -0x1(%rdx),%r10d
	add    %r10d,%ecx
	movzbl 0x1(%rdx),%r12d
	add    %r12d,%ecx
	movslq %ecx,%r10
	movzbl (%r9),%ecx
	add    %ebx,%ecx
	movzbl (%rdx),%edx
	add    %edx,%ecx
	add    %r12d,%ecx
	movzbl -0x1(%rsi),%edx
	add    %edx,%ecx
	movzbl 0x1(%rsi),%ebx
	add    %ebx,%ecx
	movzbl -0x1(%r8),%edx
	add    %edx,%ecx
	movzbl 0x1(%r8),%r9d
	add    %r9d,%ecx
	movslq %ecx,%rcx
	lea    (%r10,%rcx,2),%rcx
	imul   %r15,%rcx
	movzbl (%rsi),%edx
	add    %ebx,%edx
	movzbl (%r8),%esi
	add    %esi,%edx
	add    %r9d,%edx
	movslq %edx,%rdx
	imul   %r11,%rdx
	lea    0x8000(%rcx,%rdx,1),%rcx
	sar    $0x10,%rcx
	mov    %cl,(%rax)
	add    $0x1,%edi
	mov    -0x40(%rbp),%rbx
	mov    -0x50(%rbp),%r12
	mov    -0x38(%rbp),%r13
	mov    -0x58(%rbp),%rax
	movslq 0xc(%r13),%rcx
	cmp    %edi,%ecx
	jg     17a33 <h2v2_smooth_downsample+0x1f3>
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	leaveq 
	retq   
	lea    -0x1(%rax),%ecx
	movslq %ecx,%rcx
	mov    (%r12,%rcx,8),%r10
	lea    0x2(%r10),%r9
	movzbl (%r9),%ecx
	movzbl (%r10),%r8d
	add    %r8d,%ecx
	lea    0x2(%rax),%edx
	mov    %rdx,-0x58(%rbp)
	movslq %edx,%rdx
	mov    (%r12,%rdx,8),%r14
	movzbl (%r14),%r13d
	add    %r13d,%ecx
	lea    0x2(%r14),%rdx
	movzbl (%rdx),%esi
	add    %esi,%ecx
	movslq %ecx,%rsi
	movzbl 0x1(%r10),%ecx
	add    %r8d,%ecx
	add    %r13d,%ecx
	movzbl 0x1(%r14),%r8d
	add    %r8d,%ecx
	movslq %eax,%r8
	mov    (%r12,%r8,8),%r13
	movzbl 0x0(%r13),%r10d
	add    %r10d,%ecx
	lea    0x2(%r13),%r8
	mov    %r8,-0x48(%rbp)
	movzbl (%r8),%r8d
	add    %r8d,%ecx
	add    $0x1,%eax
	movslq %eax,%rax
	mov    (%r12,%rax,8),%r14
	movzbl (%r14),%r12d
	lea    (%r12,%rcx,1),%eax
	lea    0x2(%r14),%r8
	movzbl (%r8),%ecx
	add    %ecx,%eax
	movslq %eax,%rax
	lea    (%rsi,%rax,2),%rax
	mov    %r15,%rsi
	imul   %rax,%rsi
	movzbl 0x1(%r13),%eax
	add    %r10d,%eax
	add    %r12d,%eax
	movzbl 0x1(%r14),%ecx
	add    %ecx,%eax
	movslq %eax,%rax
	imul   %r11,%rax
	lea    0x8000(%rsi,%rax,1),%rax
	sar    $0x10,%rax
	movslq %edi,%rcx
	mov    (%rbx,%rcx,8),%rcx
	mov    %al,(%rcx)
	lea    0x1(%rcx),%rax
	mov    -0x48(%rbp),%rsi
	mov    -0x30(%rbp),%rcx
	jmpq   17984 <h2v2_smooth_downsample+0x144>
	nopw   0x0(%rax,%rax,1)

0017b10 <fullsize_smooth_downsample>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x50,%rsp
	mov    %rbx,-0x8(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %r15,-0x28(%rbp)
	mov    %rdx,-0x38(%rbp)
	mov    %rcx,-0x30(%rbp)
	lea    -0x8(%rdx),%r8
	movslq 0x13c(%rdi),%rax
	add    $0x2,%eax
	mov    %rcx,%r12
	mov    %rdx,%r13
	mov    %rsi,%r14
	mov    %rax,%rsi
	mov    %rdi,%r15
	mov    %r8,%rdi
	mov    0x30(%r15),%edx
	mov    0x1c(%r14),%ebx
	mov    %rbx,%rcx
	shl    $0x3,%ecx
	callq  173c0 <expand_right_edge>
	movslq 0x110(%r15),%rax
	mov    %rax,%rcx
	shl    $0x6,%ecx
	movslq %ecx,%r15
	mov    $0x10000,%r11d
	shl    $0x9,%rax
	sub    %rax,%r11
	xor    %ecx,%ecx
	lea    -0x2(,%rbx,8),%eax
	mov    %rax,-0x48(%rbp)
	jmpq   17c28 <fullsize_smooth_downsample+0x118>
	add    $0x1,%rdi
	movzbl (%rdi),%r12d
	add    $0x1,%rbx
	movzbl (%rbx),%esi
	add    %r12d,%esi
	lea    0x1(%r8),%r13
	movzbl 0x0(%r13),%r12d
	add    %r12d,%esi
	movslq %esi,%r12
	movzbl (%r8),%r8d
	sub    %r8,%rdx
	add    %r10,%rdx
	add    %r12,%rdx
	imul   %r15,%rdx
	imul   %r11,%r8
	lea    0x8000(%rdx,%r8,1),%rdx
	sar    $0x10,%rdx
	mov    %dl,(%rcx)
	add    $0x1,%rcx
	add    $0xffffffff,%eax
	mov    %r9,%rdx
	mov    %rsi,%r9
	mov    %r13,%r8
	movslq %edx,%r10
	movslq %r9d,%rdx
	test   %eax,%eax
	jne    17b96 <fullsize_smooth_downsample+0x86>
	movzbl (%r8),%esi
	sub    %rsi,%r10
	lea    (%r10,%rdx,2),%rax
	imul   %r15,%rax
	mov    %r11,%rdx
	imul   %rsi,%rdx
	lea    0x8000(%rax,%rdx,1),%rax
	sar    $0x10,%rax
	mov    %al,(%rcx)
	mov    -0x48(%rbp),%rax
	mov    -0x30(%rbp),%r12
	mov    -0x40(%rbp),%rcx
	mov    -0x38(%rbp),%r13
	movslq 0xc(%r14),%rdx
	cmp    %ecx,%edx
	jg     17c46 <fullsize_smooth_downsample+0x136>
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	leaveq 
	retq   
	lea    0x1(%rcx),%edx
	mov    %rdx,-0x40(%rbp)
	movslq %edx,%rdx
	mov    0x0(%r13,%rdx,8),%r10
	lea    0x1(%r10),%rdi
	movzbl (%rdi),%r8d
	lea    -0x1(%rcx),%edx
	movslq %edx,%rdx
	mov    0x0(%r13,%rdx,8),%rdx
	lea    0x1(%rdx),%rbx
	movzbl (%rbx),%esi
	lea    (%r8,%rsi,1),%r9d
	movslq %ecx,%rsi
	mov    0x0(%r13,%rsi,8),%r13
	lea    0x1(%r13),%r8
	movzbl (%r8),%ecx
	add    %ecx,%r9d
	movslq %r9d,%rcx
	movzbl 0x0(%r13),%r13d
	sub    %r13,%rcx
	movzbl (%r10),%r10d
	movzbl (%rdx),%edx
	add    %r10d,%edx
	add    %r13d,%edx
	movslq %edx,%r10
	lea    (%rcx,%r10,2),%rcx
	mov    %r15,%r10
	imul   %rcx,%r10
	mov    %r11,%rcx
	imul   %r13,%rcx
	lea    0x8000(%r10,%rcx,1),%rcx
	sar    $0x10,%rcx
	mov    (%r12,%rsi,8),%rsi
	mov    %cl,(%rsi)
	lea    0x1(%rsi),%rcx
	jmpq   17bea <fullsize_smooth_downsample+0xda>
	xchg   %ax,%ax

0017cd0 <jpeg_write_coefficients>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %r14,-0x8(%rbp)
	mov    %r15,-0x10(%rbp)
	movslq 0x24(%rdi),%rax
	cmp    $0x64,%eax
	jne    17cf1 <jpeg_write_coefficients+0x21>
	mov    %rdi,%r14
	mov    %rsi,%r15
	jmp    17d13 <jpeg_write_coefficients+0x43>
	mov    (%rdi),%rax
	movl   $0x14,0x28(%rax)
	movslq 0x24(%rdi),%rcx
	mov    (%rdi),%rax
	mov    %ecx,0x2c(%rax)
	mov    (%rdi),%rax
	mov    (%rax),%rax
	mov    %rsi,%r15
	mov    %rdi,%r14
	callq  *%rax
	xor    %esi,%esi
	mov    %r14,%rdi
	callq  4390 <jpeg_suppress_tables@plt>
	mov    (%r14),%rax
	mov    0x20(%rax),%rax
	mov    %r14,%rdi
	callq  *%rax
	mov    0x28(%r14),%rax
	mov    0x10(%rax),%rax
	mov    %r14,%rdi
	callq  *%rax
	mov    %r15,%rsi
	mov    %r14,%rdi
	callq  18040 <transencode_master_selection>
	movl   $0x0,0x130(%r14)
	movl   $0x67,0x24(%r14)
	mov    -0x10(%rbp),%r15
	mov    -0x8(%rbp),%r14
	leaveq 
	retq   
	xchg   %ax,%ax

0017d60 <jpeg_copy_critical_parameters>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x50,%rsp
	mov    %r14,-0x20(%rbp)
	mov    %r15,-0x28(%rbp)
	mov    %rsi,-0x50(%rbp)
	mov    %rbx,-0x8(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    %rdi,-0x48(%rbp)
	movslq 0x24(%rsi),%rax
	cmp    $0x64,%eax
	jne    17d95 <jpeg_copy_critical_parameters+0x35>
	mov    %rsi,%rbx
	mov    %rdi,%r14
	jmp    17dba <jpeg_copy_critical_parameters+0x5a>
	mov    (%rsi),%rax
	movl   $0x14,0x28(%rax)
	movslq 0x24(%rsi),%rcx
	mov    (%rsi),%rax
	mov    %ecx,0x2c(%rax)
	mov    (%rsi),%rax
	mov    (%rax),%rax
	mov    %rsi,%rbx
	mov    %rdi,%r14
	mov    %rbx,%rdi
	callq  *%rax
	mov    0x30(%r14),%eax
	mov    %eax,0x30(%rbx)
	mov    0x34(%r14),%eax
	mov    %eax,0x34(%rbx)
	movslq 0x38(%r14),%rax
	mov    %eax,0x38(%rbx)
	mov    0x3c(%r14),%eax
	mov    %eax,0x3c(%rbx)
	mov    %rbx,%rdi
	callq  4110 <jpeg_set_defaults@plt>
	mov    0x3c(%r14),%esi
	mov    %rbx,%rdi
	callq  4170 <jpeg_set_colorspace@plt>
	movslq 0x128(%r14),%rax
	mov    %eax,0x48(%rbx)
	movslq 0x188(%r14),%rax
	mov    %eax,0x10c(%rbx)
	mov    $0x80,%r13d
	xor    %r12d,%r12d
	jmp    17e5b <jpeg_copy_critical_parameters+0xfb>
	movslq %r12d,%r15
	mov    0xc8(%r14,%r15,8),%rax
	test   %rax,%rax
	je     17e57 <jpeg_copy_critical_parameters+0xf7>
	mov    0x60(%rbx,%r15,8),%rax
	test   %rax,%rax
	jne    17e33 <jpeg_copy_critical_parameters+0xd3>
	mov    %rbx,%rdi
	callq  4270 <jpeg_alloc_quant_table@plt>
	mov    %rax,0x60(%rbx,%r15,8)
	mov    0x60(%rbx,%r15,8),%rdi
	mov    0xc8(%r14,%r15,8),%rsi
	mov    %r13,%rdx
	callq  42c0 <memcpy@plt>
	mov    0x60(%rbx,%r15,8),%rax
	movl   $0x0,0x80(%rax)
	add    $0x1,%r12d
	cmp    $0x3,%r12d
	jle    17e0c <jpeg_copy_critical_parameters+0xac>
	movslq 0x38(%r14),%rax
	mov    %eax,0x4c(%rbx)
	test   %eax,%eax
	jle    17e71 <jpeg_copy_critical_parameters+0x111>
	cmp    $0xa,%eax
	jle    17e9a <jpeg_copy_critical_parameters+0x13a>
	mov    (%rbx),%rax
	movl   $0x1a,0x28(%rax)
	movslq 0x4c(%rbx),%rcx
	mov    (%rbx),%rax
	mov    %ecx,0x2c(%rax)
	mov    (%rbx),%rax
	movl   $0xa,0x30(%rax)
	mov    (%rbx),%rax
	mov    (%rax),%rax
	mov    %rbx,%rdi
	callq  *%rax
	mov    0x130(%r14),%rax
	mov    0x58(%rbx),%rcx
	xor    %r12d,%r12d
	mov    %r12,%rdx
	jmp    17f04 <jpeg_copy_critical_parameters+0x1a4>
	mov    (%rbx),%rsi
	movl   $0x34,0x28(%rsi)
	mov    (%rbx),%rsi
	mov    %r13d,0x2c(%rsi)
	mov    (%rbx),%rsi
	mov    (%rsi),%rsi
	mov    %rbx,%rdi
	mov    %rcx,%rbx
	mov    %rdx,%r12
	mov    %rax,%r15
	callq  *%rsi
	mov    %r15,%rax
	mov    %rbx,%rcx
	mov    %r12,%rdx
	mov    %r14,%rsi
	xor    %r12d,%r12d
	mov    -0x50(%rbp),%rbx
	mov    0xc8(%rsi,%r13,8),%r15
	mov    0x50(%rax),%r14
	test   %r14,%r14
	jne    17f2d <jpeg_copy_critical_parameters+0x1cd>
	mov    %rsi,%r14
	add    $0x1,%edx
	add    $0x60,%rax
	add    $0x60,%rcx
	movslq 0x4c(%rbx),%rsi
	cmp    %edx,%esi
	jg     17f3e <jpeg_copy_critical_parameters+0x1de>
	movslq 0x174(%r14),%rax
	test   %eax,%eax
	jne    17f85 <jpeg_copy_critical_parameters+0x225>
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	leaveq 
	retq   
	mov    %rdx,-0x30(%rbp)
	mov    %rax,-0x40(%rbp)
	mov    %rcx,-0x38(%rbp)
	jmpq   1801a <jpeg_copy_critical_parameters+0x2ba>
	movslq (%rax),%rsi
	mov    %esi,(%rcx)
	movslq 0x8(%rax),%rsi
	mov    %esi,0x8(%rcx)
	movslq 0xc(%rax),%rsi
	mov    %esi,0xc(%rcx)
	movslq 0x10(%rax),%r13
	mov    %r13d,0x10(%rcx)
	test   %r13d,%r13d
	js     17ead <jpeg_copy_critical_parameters+0x14d>
	cmp    $0x3,%r13d
	jg     17ead <jpeg_copy_critical_parameters+0x14d>
	mov    0xc8(%r14,%r13,8),%rsi
	test   %rsi,%rsi
	je     17ead <jpeg_copy_critical_parameters+0x14d>
	mov    %r14,%rsi
	jmpq   17ee5 <jpeg_copy_critical_parameters+0x185>
	movzbl 0x178(%r14),%eax
	cmp    $0x1,%al
	jne    17fa6 <jpeg_copy_critical_parameters+0x246>
	movb   $0x1,0x124(%rbx)
	movzbl 0x179(%r14),%eax
	mov    %al,0x125(%rbx)
	movzbl 0x17a(%r14),%eax
	mov    %al,0x126(%rbx)
	movzwl 0x17c(%r14),%eax
	mov    %ax,0x128(%rbx)
	movzwl 0x17e(%r14),%eax
	mov    %ax,0x12a(%rbx)
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	leaveq 
	retq   
	movslq %r12d,%rax
	movzwl (%r15,%rax,2),%ecx
	movzwl (%r14,%rax,2),%eax
	cmp    %ax,%cx
	je     18016 <jpeg_copy_critical_parameters+0x2b6>
	mov    (%rbx),%rax
	movl   $0x2c,0x28(%rax)
	mov    (%rbx),%rax
	mov    %r13d,0x2c(%rax)
	mov    (%rbx),%rax
	mov    (%rax),%rax
	mov    %rbx,%rdi
	callq  *%rax
	add    $0x1,%r12d
	cmp    $0x3f,%r12d
	jle    17fe8 <jpeg_copy_critical_parameters+0x288>
	mov    -0x48(%rbp),%r14
	mov    -0x38(%rbp),%rcx
	mov    -0x40(%rbp),%rax
	mov    -0x30(%rbp),%rdx
	xor    %r12d,%r12d
	jmpq   17ef9 <jpeg_copy_critical_parameters+0x199>
	nopl   0x0(%rax,%rax,1)

0018040 <transencode_master_selection>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %r14,-0x8(%rbp)
	mov    %r15,-0x10(%rbp)
	mov    %rsi,%r15
	movl   $0x1,0x38(%rdi)
	mov    $0x1,%esi
	mov    %rdi,%r14
	callq  43c0 <jinit_c_master_control@plt>
	movslq 0x104(%r14),%rax
	test   %eax,%eax
	jne    18087 <transencode_master_selection+0x47>
	movslq 0x134(%r14),%rax
	test   %eax,%eax
	jne    180c8 <transencode_master_selection+0x88>
	mov    %r14,%rdi
	callq  4080 <jinit_huff_encoder@plt>
	jmp    1808f <transencode_master_selection+0x4f>
	mov    %r14,%rdi
	callq  4190 <jinit_arith_encoder@plt>
	mov    %r15,%rsi
	mov    %r14,%rdi
	callq  180e0 <transencode_coef_controller>
	mov    %r14,%rdi
	callq  4120 <jinit_marker_writer@plt>
	mov    0x8(%r14),%rax
	mov    0x30(%rax),%rax
	mov    %r14,%rdi
	callq  *%rax
	mov    0x1d0(%r14),%rax
	mov    (%rax),%rax
	mov    %r14,%rdi
	callq  *%rax
	mov    -0x10(%rbp),%r15
	mov    -0x8(%rbp),%r14
	leaveq 
	retq   
	mov    %r14,%rdi
	callq  4460 <jinit_phuff_encoder@plt>
	jmp    1808f <transencode_master_selection+0x4f>
	data16 nopw %cs:0x0(%rax,%rax,1)
	nopl   (%rax)

00180e0 <transencode_coef_controller>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %r13,-0x8(%rbp)
	mov    %r14,-0x10(%rbp)
	mov    %r15,-0x18(%rbp)
	mov    0x8(%rdi),%rax
	mov    (%rax),%rax
	mov    %rsi,%r14
	mov    $0x1,%r13d
	mov    $0x78,%edx
	mov    %rdi,%r15
	mov    %r13,%rsi
	callq  *%rax
	mov    %rax,0x1c8(%r15)
	lea    0xd1(%rip),%rcx        # 181f0 <start_pass_coef>
	mov    %rcx,(%rax)
	lea    0x127(%rip),%rcx        # 18250 <compress_output>
	mov    %rcx,0x8(%rax)
	mov    %r14,0x20(%rax)
	mov    0x8(%r15),%rcx
	mov    0x8(%rcx),%rcx
	mov    %r13,%rsi
	mov    %rax,%r13
	mov    %r15,%rdi
	mov    $0x500,%r14d
	mov    %r14,%rdx
	callq  *%rcx
	mov    %r14,%rsi
	mov    %rax,%r14
	mov    %r14,%rdi
	callq  44d0 <jzero_far@plt>
	xor    %ecx,%ecx
	jmp    18174 <transencode_coef_controller+0x94>
	movslq %ecx,%rdx
	mov    %rdx,%rax
	shl    $0x7,%rax
	add    %r14,%rax
	mov    %rax,0x28(%r13,%rdx,8)
	add    $0x1,%ecx
	cmp    $0x9,%ecx
	jle    1815f <transencode_coef_controller+0x7f>
	mov    -0x18(%rbp),%r15
	mov    -0x10(%rbp),%r14
	mov    -0x8(%rbp),%r13
	leaveq 
	retq   
	nopw   0x0(%rax,%rax,1)

0018190 <start_iMCU_row>:
	push   %rbp
	mov    %rsp,%rbp
	mov    0x1c8(%rdi),%rcx
	movslq 0x144(%rdi),%rax
	cmp    $0x1,%eax
	jg     181c5 <start_iMCU_row+0x35>
	mov    0x140(%rdi),%eax
	add    $0xffffffff,%eax
	cmp    0x10(%rcx),%eax
	ja     181dc <start_iMCU_row+0x4c>
	mov    0x148(%rdi),%rax
	movslq 0x48(%rax),%rax
	mov    %eax,0x1c(%rcx)
	jmp    181cc <start_iMCU_row+0x3c>
	movl   $0x1,0x1c(%rcx)
	movl   $0x0,0x14(%rcx)
	movl   $0x0,0x18(%rcx)
	leaveq 
	retq   
	mov    0x148(%rdi),%rax
	movslq 0xc(%rax),%rax
	mov    %eax,0x1c(%rcx)
	jmp    181cc <start_iMCU_row+0x3c>
	nopl   0x0(%rax)

00181f0 <start_pass_coef>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    0x1c8(%rdi),%rax
	cmp    $0x2,%esi
	je     18238 <start_pass_coef+0x48>
	mov    (%rdi),%rcx
	movl   $0x4,0x28(%rcx)
	mov    (%rdi),%rcx
	mov    (%rcx),%rcx
	mov    %rdi,%rdx
	mov    %r14,-0x8(%rbp)
	mov    %r15,-0x10(%rbp)
	mov    %rdi,%r14
	mov    %rdx,%rdi
	mov    %rax,%r15
	callq  *%rcx
	mov    %r15,%rax
	mov    %r14,%rdi
	mov    -0x10(%rbp),%r15
	mov    -0x8(%rbp),%r14
	movl   $0x0,0x10(%rax)
	callq  18190 <start_iMCU_row>
	leaveq 
	retq   
	nopw   %cs:0x0(%rax,%rax,1)

0018250 <compress_output>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0xd0,%rsp
	mov    %rbx,-0x8(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %r15,-0x28(%rbp)
	mov    0x1c8(%rdi),%rax
	mov    %rax,-0x48(%rbp)
	mov    0x168(%rdi),%ecx
	mov    %rcx,-0x58(%rbp)
	mov    0x140(%rdi),%ecx
	mov    %rcx,-0x60(%rbp)
	mov    %rdi,%r15
	xor    %r14d,%r14d
	mov    %r14,%rbx
	jmp    182dc <compress_output+0x8c>
	movslq %ebx,%r12
	mov    0x148(%r15,%r12,8),%rdi
	movslq 0x4(%rdi),%rcx
	mov    0x20(%rax),%rdx
	mov    (%rdx,%rcx,8),%rsi
	mov    0xc(%rdi),%ecx
	mov    %rcx,%rdx
	imul   0x10(%rax),%edx
	mov    0x8(%r15),%rdi
	mov    0x40(%rdi),%r9
	mov    %rax,%r13
	mov    %r15,%rdi
	mov    %r14,%r8
	callq  *%r9
	mov    %rax,-0xd0(%rbp,%r12,8)
	add    $0x1,%ebx
	mov    %r13,%rax
	movslq 0x144(%r15),%rcx
	cmp    %ebx,%ecx
	jg     18299 <compress_output+0x49>
	movslq 0x18(%rax),%rdi
	mov    -0x58(%rbp),%rcx
	lea    -0x1(%rcx),%r12d
	mov    %r12,-0x30(%rbp)
	mov    -0x60(%rbp),%rcx
	lea    -0x1(%rcx),%ebx
	mov    %rbx,-0x40(%rbp)
	jmpq   183be <compress_output+0x16e>
	movslq %ecx,%rsi
	mov    0x28(%rax,%rsi,8),%rbx
	mov    %rbx,-0xb0(%rbp,%rsi,8)
	lea    -0x1(%rcx),%esi
	movslq %esi,%rsi
	mov    -0xb0(%rbp,%rsi,8),%rsi
	movswq (%rsi),%rsi
	mov    %si,(%rbx)
	add    $0x1,%ecx
	add    $0x1,%edx
	movslq 0x34(%r10),%rsi
	cmp    %edx,%esi
	jg     18307 <compress_output+0xb7>
	add    $0x1,%r8d
	mov    -0x38(%rbp),%rsi
	mov    -0x40(%rbp),%rbx
	movslq 0x38(%r10),%rdx
	cmp    %r8d,%edx
	jg     183fa <compress_output+0x1aa>
	mov    -0x60(%rbp),%rdx
	add    $0x1,%edx
	mov    -0x30(%rbp),%r12
	mov    -0x58(%rbp),%r13
	mov    %rdx,-0x60(%rbp)
	movslq 0x144(%r15),%rsi
	cmp    %edx,%esi
	jg     18415 <compress_output+0x1c5>
	mov    0x1f0(%r15),%rax
	mov    0x8(%rax),%rax
	mov    %r15,%rdi
	lea    -0xb0(%rbp),%rsi
	callq  *%rax
	test   %eax,%eax
	je     18442 <compress_output+0x1f2>
	add    $0x1,%r13d
	mov    -0x50(%rbp),%rdi
	mov    -0x48(%rbp),%rax
	mov    %r13,-0x58(%rbp)
	mov    0x168(%r15),%ecx
	cmp    %r13d,%ecx
	ja     1846a <compress_output+0x21a>
	movl   $0x0,0x14(%rax)
	add    $0x1,%edi
	mov    %rdi,-0x50(%rbp)
	movslq 0x1c(%rax),%rcx
	cmp    %edi,%ecx
	jg     18475 <compress_output+0x225>
	mov    0x10(%rax),%ecx
	add    $0x1,%ecx
	mov    %ecx,0x10(%rax)
	mov    %r15,%rdi
	callq  18190 <start_iMCU_row>
	mov    $0x1,%eax
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	leaveq 
	retq   
	mov    0x10(%rax),%edx
	cmp    %ebx,%edx
	jb     1847e <compress_output+0x22e>
	lea    (%rdi,%r8,1),%edx
	movslq 0x48(%r10),%rbx
	cmp    %edx,%ebx
	jg     1847e <compress_output+0x22e>
	mov    %r14,%rdx
	jmpq   18332 <compress_output+0xe2>
	movslq %edx,%r11
	mov    0x148(%r15,%r11,8),%r10
	movslq 0x34(%r10),%r9
	mov    %r13,%rdx
	imul   %r9d,%edx
	mov    %edx,%esi
	shl    $0x7,%rsi
	mov    %rsi,-0x38(%rbp)
	cmp    %r12d,%r13d
	jae    18496 <compress_output+0x246>
	mov    %r14,%r8
	jmpq   18346 <compress_output+0xf6>
	mov    -0x50(%rbp),%rcx
	mov    -0x48(%rbp),%rax
	mov    %ecx,0x18(%rax)
	mov    %r13d,0x14(%rax)
	mov    %r14,%rax
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	leaveq 
	retq   
	mov    %r14,%rcx
	mov    %rcx,%rdx
	jmpq   18362 <compress_output+0x112>
	mov    0x14(%rax),%r13d
	jmpq   183a0 <compress_output+0x150>
	lea    (%rdi,%r8,1),%edx
	movslq %edx,%rdx
	mov    -0xd0(%rbp,%r11,8),%rbx
	add    (%rbx,%rdx,8),%rsi
	mov    %r14,%rdx
	jmp    184ba <compress_output+0x26a>
	movslq 0x44(%r10),%r9
	mov    %r14,%r8
	jmpq   18346 <compress_output+0xf6>
	movslq %ecx,%rbx
	mov    %rsi,-0xb0(%rbp,%rbx,8)
	add    $0x80,%rsi
	add    $0x1,%ecx
	add    $0x1,%edx
	cmp    %r9d,%edx
	jl     184a2 <compress_output+0x252>
	jmpq   18332 <compress_output+0xe2>
	nopw   %cs:0x0(%rax,%rax,1)
	xchg   %ax,%ax

00184d0 <jpeg_CreateDecompress>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %r14,-0x18(%rbp)
	mov    %r15,-0x20(%rbp)
	mov    %r12,-0x8(%rbp)
	mov    %r13,-0x10(%rbp)
	movq   $0x0,0x8(%rdi)
	cmp    $0x3e,%esi
	jne    184fa <jpeg_CreateDecompress+0x2a>
	mov    %rdi,%r12
	jmp    18525 <jpeg_CreateDecompress+0x55>
	mov    (%rdi),%rax
	movl   $0xc,0x28(%rax)
	mov    (%rdi),%rax
	movl   $0x3e,0x2c(%rax)
	mov    (%rdi),%rax
	mov    %esi,0x30(%rax)
	mov    (%rdi),%rax
	mov    (%rax),%rax
	mov    %rdx,%r13
	mov    %rdi,%r12
	callq  *%rax
	mov    %r13,%rdx
	cmp    $0x278,%rdx
	je     18557 <jpeg_CreateDecompress+0x87>
	mov    (%r12),%rax
	movl   $0x15,0x28(%rax)
	mov    (%r12),%rax
	movl   $0x278,0x2c(%rax)
	mov    (%r12),%rax
	mov    %edx,0x30(%rax)
	mov    (%r12),%rax
	mov    (%rax),%rax
	mov    %r12,%rdi
	callq  *%rax
	xor    %r13d,%r13d
	mov    $0x278,%edx
	mov    (%r12),%r15
	mov    0x18(%r12),%r14
	mov    %r12,%rdi
	mov    %r13,%rsi
	callq  41e0 <memset@plt>
	mov    %r15,(%r12)
	mov    %r14,0x18(%r12)
	movl   $0x1,0x20(%r12)
	mov    %r12,%rdi
	callq  4240 <jinit_memory_mgr@plt>
	movq   $0x0,0x10(%r12)
	movq   $0x0,0x28(%r12)
	mov    %r13,%rax
	jmp    185b6 <jpeg_CreateDecompress+0xe6>
	movslq %eax,%rcx
	movq   $0x0,0xc8(%r12,%rcx,8)
	add    $0x1,%eax
	cmp    $0x3,%eax
	jle    185a4 <jpeg_CreateDecompress+0xd4>
	mov    %r13,%rax
	jmp    185de <jpeg_CreateDecompress+0x10e>
	movslq %eax,%rcx
	movq   $0x0,0xe8(%r12,%rcx,8)
	movq   $0x0,0x108(%r12,%rcx,8)
	add    $0x1,%eax
	cmp    $0x3,%eax
	jle    185c0 <jpeg_CreateDecompress+0xf0>
	movq   $0x0,0x190(%r12)
	mov    %r12,%rdi
	callq  44b0 <jinit_marker_reader@plt>
	mov    %r12,%rdi
	callq  43d0 <jinit_input_controller@plt>
	movl   $0xc8,0x24(%r12)
	mov    0x8(%r12),%rax
	mov    (%rax),%rax
	mov    $0x88,%r14d
	mov    %r12,%rdi
	mov    %r13,%rsi
	mov    %r14,%rdx
	callq  *%rax
	mov    %rax,0x220(%r12)
	mov    %r14,%rdx
	mov    %r13,%rsi
	mov    %rax,%rdi
	callq  41e0 <memset@plt>
	mov    -0x10(%rbp),%r13
	mov    -0x8(%rbp),%r12
	mov    -0x20(%rbp),%r15
	mov    -0x18(%rbp),%r14
	leaveq 
	retq   
	nopl   0x0(%rax)

0018650 <jpeg_destroy_decompress>:
	push   %rbp
	mov    %rsp,%rbp
	callq  4030 <jpeg_destroy@plt>
	leaveq 
	retq   
	nopl   0x0(%rax,%rax,1)

0018660 <jpeg_read_header>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %rsi,-0x10(%rbp)
	mov    %rdi,-0x8(%rbp)
	movslq 0x24(%rdi),%rax
	cmp    $0xc8,%eax
	jne    1868c <jpeg_read_header+0x2c>
	callq  4160 <jpeg_consume_input@plt>
	cmp    $0x1,%eax
	jne    186c5 <jpeg_read_header+0x65>
	mov    $0x1,%eax
	leaveq 
	retq   
	cmp    $0xc9,%eax
	je     1867b <jpeg_read_header+0x1b>
	mov    (%rdi),%rax
	movl   $0x14,0x28(%rax)
	movslq 0x24(%rdi),%rcx
	mov    (%rdi),%rax
	mov    %ecx,0x2c(%rax)
	mov    (%rdi),%rax
	mov    (%rax),%rax
	mov    %rdi,%rcx
	mov    %r15,-0x18(%rbp)
	mov    %rdi,%r15
	mov    %rcx,%rdi
	callq  *%rax
	mov    %r15,%rdi
	mov    -0x18(%rbp),%r15
	jmp    1867b <jpeg_read_header+0x1b>
	cmp    $0x2,%eax
	je     186cc <jpeg_read_header+0x6c>
	leaveq 
	retq   
	mov    -0x10(%rbp),%rax
	test   %eax,%eax
	jne    186da <jpeg_read_header+0x7a>
	mov    -0x8(%rbp),%rdi
	jmp    18701 <jpeg_read_header+0xa1>
	mov    -0x8(%rbp),%rcx
	mov    (%rcx),%rax
	movl   $0x33,0x28(%rax)
	mov    (%rcx),%rax
	mov    (%rax),%rax
	mov    %rcx,%rdi
	mov    %r15,-0x18(%rbp)
	mov    %rcx,%r15
	callq  *%rax
	mov    %r15,%rdi
	mov    -0x18(%rbp),%r15
	callq  4130 <jpeg_abort@plt>
	mov    $0x2,%eax
	leaveq 
	retq   
	nopl   (%rax)

0018710 <jpeg_finish_decompress>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %r15,-0x8(%rbp)
	movslq 0x24(%rdi),%rax
	cmp    $0xcd,%eax
	je     18745 <jpeg_finish_decompress+0x35>
	cmp    $0xce,%eax
	je     18745 <jpeg_finish_decompress+0x35>
	movslq 0x24(%rdi),%rax
	cmp    $0xcf,%eax
	je     18760 <jpeg_finish_decompress+0x50>
	cmp    $0xd2,%eax
	jne    1876d <jpeg_finish_decompress+0x5d>
	mov    %rdi,%r15
	jmp    18797 <jpeg_finish_decompress+0x87>
	movslq 0x58(%rdi),%rax
	test   %eax,%eax
	jne    1872e <jpeg_finish_decompress+0x1e>
	mov    0x8c(%rdi),%eax
	cmp    0xa8(%rdi),%eax
	ja     187c6 <jpeg_finish_decompress+0xb6>
	mov    %rdi,%r15
	jmp    187db <jpeg_finish_decompress+0xcb>
	mov    %rdi,%r15
	movl   $0xd2,0x24(%r15)
	jmp    18797 <jpeg_finish_decompress+0x87>
	mov    (%rdi),%rax
	movl   $0x14,0x28(%rax)
	movslq 0x24(%rdi),%rcx
	mov    (%rdi),%rax
	mov    %ecx,0x2c(%rax)
	mov    (%rdi),%rax
	mov    (%rax),%rax
	mov    %rdi,%r15
	callq  *%rax
	jmp    18797 <jpeg_finish_decompress+0x87>
	mov    %r15,%rdi
	callq  *(%rax)
	test   %eax,%eax
	je     187f5 <jpeg_finish_decompress+0xe5>
	mov    0x240(%r15),%rax
	movslq 0x24(%rax),%rcx
	test   %ecx,%ecx
	je     1878e <jpeg_finish_decompress+0x7e>
	mov    0x28(%r15),%rax
	mov    0x30(%rax),%rax
	mov    %r15,%rdi
	callq  *%rax
	mov    %r15,%rdi
	callq  4130 <jpeg_abort@plt>
	mov    $0x1,%eax
	mov    -0x8(%rbp),%r15
	leaveq 
	retq   
	mov    (%rdi),%rax
	movl   $0x43,0x28(%rax)
	mov    (%rdi),%rax
	mov    (%rax),%rax
	mov    %rdi,%r15
	callq  *%rax
	mov    0x220(%r15),%rax
	mov    0x8(%rax),%rax
	mov    %r15,%rdi
	callq  *%rax
	movl   $0xd2,0x24(%r15)
	jmp    18797 <jpeg_finish_decompress+0x87>
	xor    %eax,%eax
	mov    -0x8(%rbp),%r15
	leaveq 
	retq   
	nopl   (%rax)

0018800 <jpeg_has_multiple_scans>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	movslq 0x24(%rdi),%rax
	cmp    $0xc9,%eax
	jle    1881a <jpeg_has_multiple_scans+0x1a>
	cmp    $0xd2,%eax
	jle    1884a <jpeg_has_multiple_scans+0x4a>
	mov    (%rdi),%rax
	movl   $0x14,0x28(%rax)
	movslq 0x24(%rdi),%rcx
	mov    (%rdi),%rax
	mov    %ecx,0x2c(%rax)
	mov    (%rdi),%rax
	mov    (%rax),%rax
	mov    %rdi,%rcx
	mov    %r15,-0x8(%rbp)
	mov    %rdi,%r15
	mov    %rcx,%rdi
	callq  *%rax
	mov    %r15,%rdi
	mov    -0x8(%rbp),%r15
	mov    0x240(%rdi),%rax
	movslq 0x20(%rax),%rax
	leaveq 
	retq   
	nopw   0x0(%rax,%rax,1)

0018860 <jpeg_input_complete>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	movslq 0x24(%rdi),%rax
	cmp    $0xc7,%eax
	jle    1887a <jpeg_input_complete+0x1a>
	cmp    $0xd2,%eax
	jle    188aa <jpeg_input_complete+0x4a>
	mov    (%rdi),%rax
	movl   $0x14,0x28(%rax)
	movslq 0x24(%rdi),%rcx
	mov    (%rdi),%rax
	mov    %ecx,0x2c(%rax)
	mov    (%rdi),%rax
	mov    (%rax),%rax
	mov    %rdi,%rcx
	mov    %r15,-0x8(%rbp)
	mov    %rdi,%r15
	mov    %rcx,%rdi
	callq  *%rax
	mov    %r15,%rdi
	mov    -0x8(%rbp),%r15
	mov    0x240(%rdi),%rax
	movslq 0x24(%rax),%rax
	leaveq 
	retq   
	nopw   0x0(%rax,%rax,1)

00188c0 <jpeg_consume_input>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    0x24(%rdi),%ecx
	add    $0xffffff38,%ecx
	cmp    $0xa,%ecx
	ja     188ed <jpeg_consume_input+0x2d>
	mov    $0x1,%eax
	lea    0x40dfe(%rip),%rdx        # 596e0 <val_ac_chrominance.12+0xa6>
	movslq (%rdx,%rcx,4),%rcx
	add    %rdx,%rcx
	jmpq   *%rcx
	leaveq 
	retq   
	mov    (%rdi),%rax
	movl   $0x14,0x28(%rax)
	movslq 0x24(%rdi),%rcx
	mov    (%rdi),%rax
	mov    %ecx,0x2c(%rax)
	mov    (%rdi),%rax
	mov    (%rax),%rax
	callq  *%rax
	xor    %eax,%eax
	leaveq 
	retq   
	mov    0x240(%rdi),%rax
	mov    0x8(%rax),%rax
	mov    %rdi,%rcx
	mov    %r15,-0x8(%rbp)
	mov    %rdi,%r15
	mov    %rcx,%rdi
	callq  *%rax
	mov    0x28(%r15),%rax
	mov    0x10(%rax),%rax
	mov    %r15,%rdi
	callq  *%rax
	mov    %r15,%rdi
	movl   $0xc9,0x24(%rdi)
	mov    -0x8(%rbp),%r15
	mov    0x240(%rdi),%rax
	mov    (%rax),%rax
	mov    %rdi,%rcx
	mov    %rdi,-0x8(%rbp)
	mov    %rcx,%rdi
	callq  *%rax
	cmp    $0x1,%eax
	je     1896d <jpeg_consume_input+0xad>
	leaveq 
	retq   
	mov    0x240(%rdi),%rax
	mov    (%rax),%rax
	callq  *%rax
	leaveq 
	retq   
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	mov    %r15,-0x8(%rbp)
	mov    %rax,%r15
	callq  189b0 <default_decompress_parms>
	movl   $0xca,0x24(%r15)
	mov    $0x1,%eax
	mov    -0x8(%rbp),%r15
	leaveq 
	retq   
	data16 nopw %cs:0x0(%rax,%rax,1)
	xchg   %ax,%ax

00189a0 <jpeg_abort_decompress>:
	push   %rbp
	mov    %rsp,%rbp
	callq  4130 <jpeg_abort@plt>
	leaveq 
	retq   
	nopl   0x0(%rax,%rax,1)

00189b0 <default_decompress_parms>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	movslq 0x38(%rdi),%rax
	cmp    $0x2,%eax
	jle    189f5 <default_decompress_parms+0x45>
	mov    $0xffffffffffffffff,%rsi
	cmp    $0x3,%eax
	je     18a8e <default_decompress_parms+0xde>
	cmp    $0x4,%eax
	jne    189fe <default_decompress_parms+0x4e>
	movslq 0x180(%rdi),%rax
	test   %eax,%eax
	jne    18b14 <default_decompress_parms+0x164>
	movl   $0x4,0x3c(%rdi)
	movl   $0x4,0x40(%rdi)
	jmp    18a0c <default_decompress_parms+0x5c>
	cmp    $0x1,%eax
	je     18b6b <default_decompress_parms+0x1bb>
	movl   $0x0,0x3c(%rdi)
	movl   $0x0,0x40(%rdi)
	movl   $0x1,0x44(%rdi)
	movl   $0x1,0x48(%rdi)
	movsd  0x40cee(%rip),%xmm0        # 59710 <val_ac_chrominance.12+0xd6>
	movsd  %xmm0,0x50(%rdi)
	movl   $0x0,0x58(%rdi)
	movl   $0x0,0x5c(%rdi)
	movl   $0x0,0x60(%rdi)
	movl   $0x1,0x64(%rdi)
	movl   $0x1,0x68(%rdi)
	movl   $0x0,0x6c(%rdi)
	movl   $0x2,0x70(%rdi)
	movl   $0x1,0x74(%rdi)
	movl   $0x100,0x78(%rdi)
	movq   $0x0,0xa0(%rdi)
	movl   $0x0,0x7c(%rdi)
	movl   $0x0,0x80(%rdi)
	movl   $0x0,0x84(%rdi)
	leaveq 
	retq   
	movslq 0x174(%rdi),%rax
	test   %eax,%eax
	jne    18b7e <default_decompress_parms+0x1ce>
	movslq 0x180(%rdi),%rax
	test   %eax,%eax
	jne    18b91 <default_decompress_parms+0x1e1>
	mov    0x130(%rdi),%rdx
	movslq 0x60(%rdx),%rcx
	movslq 0xc0(%rdx),%rax
	movslq (%rdx),%rsi
	cmp    $0x1,%esi
	je     18be5 <default_decompress_parms+0x235>
	cmp    $0x52,%esi
	je     18c00 <default_decompress_parms+0x250>
	mov    (%rdi),%rdx
	mov    %esi,0x2c(%rdx)
	mov    %ecx,0x30(%rdx)
	mov    %eax,0x34(%rdx)
	mov    (%rdi),%rax
	movl   $0x6f,0x28(%rax)
	mov    (%rdi),%rax
	mov    0x8(%rax),%rax
	mov    $0x1,%esi
	mov    %rdi,%rcx
	mov    %r15,-0x8(%rbp)
	mov    %rdi,%r15
	mov    %rcx,%rdi
	callq  *%rax
	mov    %r15,%rdi
	movl   $0x3,0x3c(%rdi)
	mov    -0x8(%rbp),%r15
	jmp    18b85 <default_decompress_parms+0x1d5>
	movzbl 0x184(%rdi),%eax
	test   %al,%al
	je     18c1e <default_decompress_parms+0x26e>
	cmp    $0x2,%al
	je     18c2a <default_decompress_parms+0x27a>
	mov    (%rdi),%rax
	movl   $0x72,0x28(%rax)
	movzbl 0x184(%rdi),%ecx
	mov    (%rdi),%rax
	mov    %ecx,0x2c(%rax)
	mov    (%rdi),%rax
	mov    0x8(%rax),%rax
	mov    %rdi,%rcx
	mov    %r15,-0x8(%rbp)
	mov    %rdi,%r15
	mov    %rcx,%rdi
	callq  *%rax
	mov    %r15,%rdi
	movl   $0x5,0x3c(%rdi)
	mov    -0x8(%rbp),%r15
	jmpq   189ec <default_decompress_parms+0x3c>
	movl   $0x1,0x3c(%rdi)
	movl   $0x1,0x40(%rdi)
	jmpq   18a0c <default_decompress_parms+0x5c>
	movl   $0x3,0x3c(%rdi)
	movl   $0x2,0x40(%rdi)
	jmpq   18a0c <default_decompress_parms+0x5c>
	movzbl 0x184(%rdi),%eax
	test   %al,%al
	je     18c36 <default_decompress_parms+0x286>
	cmp    $0x1,%al
	je     18c42 <default_decompress_parms+0x292>
	mov    (%rdi),%rax
	movl   $0x72,0x28(%rax)
	movzbl 0x184(%rdi),%ecx
	mov    (%rdi),%rax
	mov    %ecx,0x2c(%rax)
	mov    (%rdi),%rax
	mov    0x8(%rax),%rax
	mov    %rdi,%rcx
	mov    %r15,-0x8(%rbp)
	mov    %rdi,%r15
	mov    %rcx,%rdi
	callq  *%rax
	mov    %r15,%rdi
	movl   $0x3,0x3c(%rdi)
	mov    -0x8(%rbp),%r15
	jmp    18b85 <default_decompress_parms+0x1d5>
	cmp    $0x2,%ecx
	jne    18aca <default_decompress_parms+0x11a>
	cmp    $0x3,%eax
	jne    18aca <default_decompress_parms+0x11a>
	movl   $0x3,0x3c(%rdi)
	jmp    18b85 <default_decompress_parms+0x1d5>
	cmp    $0x47,%ecx
	jne    18ad3 <default_decompress_parms+0x123>
	cmp    $0x42,%eax
	jne    18ad3 <default_decompress_parms+0x123>
	movl   $0x2,0x3c(%rdi)
	jmpq   18b85 <default_decompress_parms+0x1d5>
	movl   $0x4,0x3c(%rdi)
	jmpq   189ec <default_decompress_parms+0x3c>
	movl   $0x5,0x3c(%rdi)
	jmpq   189ec <default_decompress_parms+0x3c>
	movl   $0x2,0x3c(%rdi)
	jmpq   18b85 <default_decompress_parms+0x1d5>
	movl   $0x3,0x3c(%rdi)
	jmpq   18b85 <default_decompress_parms+0x1d5>
	xchg   %ax,%ax

0018c50 <jpeg_start_decompress>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	movslq 0x24(%rdi),%rax
	cmp    $0xca,%eax
	je     18ca6 <jpeg_start_decompress+0x56>
	mov    %r15,%rax
	mov    %rdi,%r15
	movslq 0x24(%r15),%rcx
	cmp    $0xcb,%ecx
	je     18cce <jpeg_start_decompress+0x7e>
	cmp    $0xcc,%ecx
	je     18cf5 <jpeg_start_decompress+0xa5>
	mov    (%r15),%rcx
	movl   $0x14,0x28(%rcx)
	movslq 0x24(%r15),%rdx
	mov    (%r15),%rcx
	mov    %edx,0x2c(%rcx)
	mov    (%r15),%rcx
	mov    (%rcx),%rcx
	mov    %r15,%rdi
	mov    %rax,-0x8(%rbp)
	callq  *%rcx
	mov    -0x8(%rbp),%rax
	jmp    18cf5 <jpeg_start_decompress+0xa5>
	mov    %rdi,%rax
	mov    %r15,-0x8(%rbp)
	mov    %rdi,%r15
	mov    %rax,%rdi
	callq  41f0 <jinit_master_decompress@plt>
	movslq 0x58(%r15),%rax
	test   %eax,%eax
	jne    18d02 <jpeg_start_decompress+0xb2>
	movl   $0xcb,0x24(%r15)
	mov    -0x8(%rbp),%rax
	jmp    18c69 <jpeg_start_decompress+0x19>
	mov    0x240(%r15),%rcx
	movslq 0x20(%rcx),%rcx
	test   %ecx,%ecx
	je     18ce7 <jpeg_start_decompress+0x97>
	mov    %rax,-0x8(%rbp)
	jmp    18d23 <jpeg_start_decompress+0xd3>
	mov    -0x8(%rbp),%rax
	movslq 0xac(%r15),%rcx
	mov    %ecx,0xb4(%r15)
	mov    %r15,%rdi
	mov    %rax,%r15
	callq  19b00 <output_pass_setup>
	leaveq 
	retq   
	movl   $0xcf,0x24(%r15)
	mov    $0x1,%eax
	mov    -0x8(%rbp),%r15
	leaveq 
	retq   
	cmp    $0x2,%eax
	je     18ce3 <jpeg_start_decompress+0x93>
	mov    0x10(%r15),%rcx
	test   %rcx,%rcx
	jne    18d4c <jpeg_start_decompress+0xfc>
	mov    0x10(%r15),%rax
	test   %rax,%rax
	je     18d31 <jpeg_start_decompress+0xe1>
	mov    %r15,%rdi
	callq  *(%rax)
	mov    0x240(%r15),%rax
	mov    (%rax),%rax
	mov    %r15,%rdi
	callq  *%rax
	test   %eax,%eax
	jne    18d15 <jpeg_start_decompress+0xc5>
	xor    %eax,%eax
	mov    -0x8(%rbp),%r15
	leaveq 
	retq   
	cmp    $0x3,%eax
	jne    18d7a <jpeg_start_decompress+0x12a>
	mov    0x8(%rcx),%rax
	add    $0x1,%rax
	mov    %rax,0x8(%rcx)
	mov    0x10(%r15),%rdx
	mov    0x10(%rdx),%rcx
	cmp    %rcx,%rax
	jl     18d23 <jpeg_start_decompress+0xd3>
	mov    0x1a4(%r15),%eax
	add    %rcx,%rax
	mov    %rax,0x10(%rdx)
	jmp    18d23 <jpeg_start_decompress+0xd3>
	cmp    $0x1,%eax
	je     18d51 <jpeg_start_decompress+0x101>
	jmp    18d23 <jpeg_start_decompress+0xd3>
	data16 nopw %cs:0x0(%rax,%rax,1)
	nopl   0x0(%rax)

0018d90 <jpeg_read_scanlines>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %r15,-0x18(%rbp)
	movslq 0x24(%rdi),%rax
	cmp    $0xcd,%eax
	jne    18db2 <jpeg_read_scanlines+0x22>
	mov    %r15,%rax
	mov    %rdi,%r15
	mov    %rdx,%rcx
	jmp    18deb <jpeg_read_scanlines+0x5b>
	mov    (%rdi),%rax
	movl   $0x14,0x28(%rax)
	movslq 0x24(%rdi),%rcx
	mov    (%rdi),%rax
	mov    %ecx,0x2c(%rax)
	mov    (%rdi),%rax
	mov    (%rax),%rax
	mov    %rdi,%rcx
	mov    %rsi,-0x8(%rbp)
	mov    %rdx,-0x10(%rbp)
	mov    %rdi,%r15
	mov    %rcx,%rdi
	callq  *%rax
	mov    -0x10(%rbp),%rcx
	mov    -0x8(%rbp),%rsi
	mov    -0x18(%rbp),%rax
	mov    0x8c(%r15),%edi
	mov    0xa8(%r15),%edx
	cmp    %edx,%edi
	jbe    18e76 <jpeg_read_scanlines+0xe6>
	mov    0x10(%r15),%rax
	test   %rax,%rax
	je     18e41 <jpeg_read_scanlines+0xb1>
	mov    %rdx,0x8(%rax)
	mov    0x8c(%r15),%edx
	mov    0x10(%r15),%rax
	mov    %rdx,0x10(%rax)
	mov    0x10(%r15),%rax
	mov    (%rax),%rax
	mov    %r15,%rdi
	mov    %r13,-0x8(%rbp)
	mov    %r14,-0x10(%rbp)
	mov    %rsi,%r13
	mov    %rcx,%r14
	callq  *%rax
	mov    %r14,%rcx
	mov    %r13,%rsi
	mov    -0x10(%rbp),%r14
	mov    -0x8(%rbp),%r13
	movl   $0x0,-0x1c(%rbp)
	mov    0x228(%r15),%rax
	mov    0x8(%rax),%rax
	lea    -0x1c(%rbp),%rdx
	mov    %r15,%rdi
	callq  *%rax
	mov    -0x1c(%rbp),%eax
	mov    %rax,%rcx
	add    0xa8(%r15),%ecx
	mov    %ecx,0xa8(%r15)
	mov    -0x18(%rbp),%r15
	leaveq 
	retq   
	mov    (%r15),%rcx
	movl   $0x7b,0x28(%rcx)
	mov    (%r15),%rcx
	mov    0x8(%rcx),%rcx
	mov    %r15,%rdi
	mov    %rax,%r15
	mov    $0xffffffffffffffff,%rsi
	callq  *%rcx
	xor    %eax,%eax
	leaveq 
	retq   
	nopw   0x0(%rax,%rax,1)

0018ea0 <jpeg_skip_scanlines>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x70,%rsp
	mov    %r15,-0x48(%rbp)
	mov    0x260(%rdi),%r8
	mov    0x228(%rdi),%r10
	mov    0x230(%rdi),%rdx
	movslq 0x24(%rdi),%rax
	cmp    $0xcd,%eax
	jne    18edd <jpeg_skip_scanlines+0x3d>
	mov    %r14,%rcx
	mov    %rdi,%r14
	mov    %r15,%r9
	mov    %rbx,%r15
	mov    %rdx,%rbx
	jmp    18f2f <jpeg_skip_scanlines+0x8f>
	mov    (%rdi),%rax
	movl   $0x14,0x28(%rax)
	movslq 0x24(%rdi),%rcx
	mov    (%rdi),%rax
	mov    %ecx,0x2c(%rax)
	mov    (%rdi),%rax
	mov    (%rax),%rax
	mov    %rdi,%rcx
	mov    %r14,-0x50(%rbp)
	mov    %r10,-0x68(%rbp)
	mov    %r8,-0x60(%rbp)
	mov    %rdx,-0x58(%rbp)
	mov    %rdi,%r14
	mov    %rcx,%rdi
	mov    %rbx,%r15
	mov    %rsi,%rbx
	callq  *%rax
	mov    %rbx,%rsi
	mov    -0x58(%rbp),%rbx
	mov    -0x60(%rbp),%r8
	mov    -0x68(%rbp),%r10
	mov    -0x48(%rbp),%r9
	mov    -0x50(%rbp),%rcx
	mov    0xa8(%r14),%edx
	lea    (%rdx,%rsi,1),%eax
	mov    0x8c(%r14),%edi
	cmp    %eax,%edi
	jbe    18f55 <jpeg_skip_scanlines+0xb5>
	xor    %eax,%eax
	test   %esi,%esi
	jne    18f99 <jpeg_skip_scanlines+0xf9>
	mov    %r15,%rbx
	mov    %r9,%r15
	mov    %rcx,%r14
	leaveq 
	retq   
	mov    %edi,0xa8(%r14)
	mov    0x240(%r14),%rax
	mov    0x18(%rax),%rax
	mov    %rcx,%rbx
	mov    %r14,%rdi
	callq  *%rax
	mov    0x240(%r14),%rax
	movl   $0x1,0x24(%rax)
	mov    0x8c(%r14),%eax
	mov    0xa8(%r14),%ecx
	sub    %ecx,%eax
	mov    %rbx,%r14
	mov    %r15,%rbx
	mov    -0x48(%rbp),%r15
	leaveq 
	retq   
	movslq 0x19c(%r14),%r11
	imul   0x1a0(%r14),%r11d
	mov    %rdx,%rax
	xor    %edi,%edi
	mov    %rdi,%rdx
	div    %r11d
	mov    %r11,%rax
	sub    %edx,%eax
	mov    %rdi,%rdx
	div    %r11d
	mov    %rsi,%rdi
	sub    %edx,%edi
	mov    0x260(%r14),%rax
	movslq 0x10(%rax),%rax
	test   %eax,%eax
	jne    19045 <jpeg_skip_scanlines+0x1a5>
	cmp    %edx,%esi
	jb     1911f <jpeg_skip_scanlines+0x27f>
	add    0xa8(%r14),%edx
	mov    %edx,0xa8(%r14)
	movl   $0x0,0x60(%r10)
	movl   $0x0,0x64(%r10)
	movslq 0x19c(%r14),%rax
	mov    %eax,0xb8(%r8)
	mov    0x8c(%r14),%eax
	mov    0xa8(%r14),%edx
	sub    %edx,%eax
	mov    %eax,0xbc(%r8)
	mov    %rdi,%r9
	mov    0x260(%r14),%rax
	movslq 0x10(%rax),%rax
	test   %eax,%eax
	jne    19146 <jpeg_skip_scanlines+0x2a6>
	xor    %edx,%edx
	mov    %r9,%rax
	div    %r11d
	mov    %r9,%rdi
	sub    %edx,%edi
	jmpq   1915c <jpeg_skip_scanlines+0x2bc>
	lea    0x1(%rdx),%eax
	cmp    %eax,%esi
	jb     191a7 <jpeg_skip_scanlines+0x307>
	cmp    $0x1,%edx
	jbe    191ce <jpeg_skip_scanlines+0x32e>
	xor    %eax,%eax
	test   %rax,%rax
	jne    191ec <jpeg_skip_scanlines+0x34c>
	mov    %rdx,%rax
	add    0xa8(%r14),%eax
	mov    %rdi,%r9
	mov    %eax,0xa8(%r14)
	mov    0x84(%r10),%eax
	test   %eax,%eax
	je     1908d <jpeg_skip_scanlines+0x1ed>
	cmp    $0x1,%eax
	jne    190dd <jpeg_skip_scanlines+0x23d>
	cmp    $0x2,%edx
	jbe    190dd <jpeg_skip_scanlines+0x23d>
	mov    %r14,%rdi
	mov    %rcx,-0x40(%rbp)
	mov    %rbx,-0x68(%rbp)
	mov    %rsi,-0x20(%rbp)
	mov    %r15,-0x28(%rbp)
	mov    %r12,-0x30(%rbp)
	mov    %r13,-0x38(%rbp)
	mov    %r10,%rbx
	mov    %r11,%r12
	mov    %r9,%r13
	mov    %r8,%r15
	callq  199b0 <set_wraparound_pointers>
	mov    %r15,%r8
	mov    %r13,%r9
	mov    %rbx,%r10
	mov    %r12,%r11
	mov    -0x38(%rbp),%r13
	mov    -0x30(%rbp),%r12
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%rsi
	mov    -0x68(%rbp),%rbx
	mov    -0x40(%rbp),%rcx
	movl   $0x0,0x60(%r10)
	movl   $0x0,0x64(%r10)
	movl   $0x0,0x7c(%r10)
	movslq 0x19c(%r14),%rax
	mov    %eax,0xb8(%r8)
	mov    0x8c(%r14),%eax
	mov    0xa8(%r14),%edx
	sub    %edx,%eax
	mov    %eax,0xbc(%r8)
	jmpq   19020 <jpeg_skip_scanlines+0x180>
	mov    %rsi,%rax
	mov    %rsi,-0x68(%rbp)
	mov    %rax,%rsi
	mov    %r14,%rdi
	mov    %rcx,%r14
	mov    %r9,%rbx
	callq  19d50 <increment_simple_rowgroup_ctr>
	mov    %r15,%rcx
	mov    %rbx,%r15
	mov    %rcx,%rbx
	mov    -0x68(%rbp),%rax
	leaveq 
	retq   
	lea    -0x1(%r9),%edi
	mov    %rdi,%rax
	mov    %rsi,-0x68(%rbp)
	xor    %edx,%edx
	div    %r11d
	sub    %edx,%edi
	mov    -0x68(%rbp),%rsi
	mov    %rdi,-0x60(%rbp)
	mov    %r9,%rax
	sub    %edi,%eax
	mov    %rsi,-0x20(%rbp)
	mov    0x240(%r14),%rdx
	movslq 0x20(%rdx),%rdx
	test   %edx,%edx
	jne    19211 <jpeg_skip_scanlines+0x371>
	mov    %rcx,-0x40(%rbp)
	mov    %r10,-0x10(%rbp)
	mov    %r8,-0x8(%rbp)
	mov    %r15,-0x28(%rbp)
	mov    %r12,-0x30(%rbp)
	mov    %r13,-0x38(%rbp)
	mov    %r11,-0x50(%rbp)
	mov    %rax,-0x18(%rbp)
	xor    %r12d,%r12d
	mov    %r12,%rax
	jmpq   19278 <jpeg_skip_scanlines+0x3d8>
	mov    %rsi,%rax
	mov    %rsi,-0x68(%rbp)
	mov    %rax,%rsi
	mov    %r14,%rdi
	mov    %rcx,%r14
	mov    %r9,%rbx
	callq  19c60 <read_and_discard_scanlines>
	mov    %r15,%rcx
	mov    %rbx,%r15
	mov    %rcx,%rbx
	mov    -0x68(%rbp),%rax
	leaveq 
	retq   
	mov    $0x1,%eax
	mov    %rbx,-0x68(%rbp)
	movslq 0x60(%r10),%rbx
	test   %ebx,%ebx
	jne    192b5 <jpeg_skip_scanlines+0x415>
	mov    -0x68(%rbp),%rbx
	jmpq   1905b <jpeg_skip_scanlines+0x1bb>
	movslq 0x60(%r10),%rax
	test   %eax,%eax
	je     19064 <jpeg_skip_scanlines+0x1c4>
	lea    (%rdx,%r11,1),%edi
	mov    %rdi,%rax
	add    0xa8(%r14),%eax
	mov    %rsi,%r9
	sub    %edi,%r9d
	jmpq   19071 <jpeg_skip_scanlines+0x1d1>
	mov    0x260(%r14),%rdx
	movslq 0x10(%rdx),%rdx
	test   %edx,%edx
	jne    192ca <jpeg_skip_scanlines+0x42a>
	mov    %rdi,%rdx
	add    0xa8(%r14),%edx
	mov    %edx,0xa8(%r14)
	mov    %rax,%rsi
	mov    %rdi,%rax
	xor    %edx,%edx
	div    %r11d
	add    0xb8(%r14),%eax
	mov    %eax,0xb8(%r14)
	mov    %r14,%rdi
	mov    %rcx,-0x68(%rbp)
	mov    %r8,%rbx
	callq  19d50 <increment_simple_rowgroup_ctr>
	jmpq   1931d <jpeg_skip_scanlines+0x47d>
	mov    %r14,%rdi
	callq  19aa0 <start_iMCU_row>
	mov    -0x58(%rbp),%rax
	mov    -0x50(%rbp),%rcx
	add    %ecx,%eax
	mov    -0x60(%rbp),%rdi
	cmp    %edi,%eax
	jb     19344 <jpeg_skip_scanlines+0x4a4>
	mov    %rdi,%rax
	add    0xa8(%r14),%eax
	mov    %eax,0xa8(%r14)
	mov    0x260(%r14),%rax
	movslq 0x10(%rax),%rax
	test   %eax,%eax
	jne    19350 <jpeg_skip_scanlines+0x4b0>
	mov    %r14,%rdi
	mov    -0x18(%rbp),%rsi
	callq  19d50 <increment_simple_rowgroup_ctr>
	jmpq   19377 <jpeg_skip_scanlines+0x4d7>
	lea    0x1(%r11),%ebx
	cmp    %edi,%ebx
	ja     191a7 <jpeg_skip_scanlines+0x307>
	mov    -0x68(%rbp),%rbx
	jmpq   1905b <jpeg_skip_scanlines+0x1bb>
	mov    %rdi,%rdx
	add    0xa8(%r14),%edx
	mov    %edx,0xa8(%r14)
	mov    %rax,%rsi
	mov    %rdi,%rax
	xor    %ebx,%ebx
	mov    %rbx,%rdx
	div    %r11d
	add    0xb8(%r14),%eax
	mov    %eax,0xb8(%r14)
	mov    %r9,%rax
	mov    %rbx,%rdx
	div    %r11d
	add    0x84(%r10),%eax
	mov    %eax,0x84(%r10)
	mov    %r14,%rdi
	mov    %rcx,-0x68(%rbp)
	mov    %r8,%rbx
	callq  19c60 <read_and_discard_scanlines>
	mov    0x8c(%r14),%eax
	mov    0xa8(%r14),%ecx
	sub    %ecx,%eax
	mov    %eax,0xbc(%rbx)
	mov    %r15,%rbx
	mov    -0x20(%rbp),%rax
	mov    -0x48(%rbp),%r15
	mov    -0x68(%rbp),%r14
	leaveq 
	retq   
	mov    %rax,-0x58(%rbp)
	mov    %r12,%rax
	jmpq   193d5 <jpeg_skip_scanlines+0x535>
	mov    %rdi,%rax
	xor    %edx,%edx
	mov    -0x50(%rbp),%rcx
	div    %ecx
	mov    -0x10(%rbp),%rcx
	add    0x84(%rcx),%eax
	mov    %eax,0x84(%rcx)
	mov    %r14,%rdi
	mov    -0x18(%rbp),%rsi
	callq  19c60 <read_and_discard_scanlines>
	mov    0x8c(%r14),%eax
	mov    0xa8(%r14),%ecx
	sub    %ecx,%eax
	mov    -0x8(%rbp),%rcx
	mov    %eax,0xbc(%rcx)
	mov    -0x38(%rbp),%r13
	mov    -0x30(%rbp),%r12
	mov    -0x28(%rbp),%rbx
	mov    -0x20(%rbp),%rax
	mov    -0x48(%rbp),%r15
	mov    -0x40(%rbp),%r14
	leaveq 
	retq   
	mov    0x250(%r14),%rax
	mov    0x8(%rax),%rax
	mov    %r14,%rdi
	mov    %r12,%rsi
	callq  *%rax
	add    $0x1,%r13d
	mov    0x1d8(%r14),%eax
	cmp    %r13d,%eax
	ja     193ab <jpeg_skip_scanlines+0x50b>
	mov    -0x68(%rbp),%rax
	add    $0x1,%eax
	movslq 0x30(%rbx),%rcx
	cmp    %eax,%ecx
	jg     19421 <jpeg_skip_scanlines+0x581>
	mov    0xb0(%r14),%eax
	add    $0x1,%eax
	mov    %eax,0xb0(%r14)
	mov    0xb8(%r14),%ecx
	add    $0x1,%ecx
	mov    %ecx,0xb8(%r14)
	cmp    0x1a4(%r14),%eax
	jb     19262 <jpeg_skip_scanlines+0x3c2>
	mov    0x240(%r14),%rax
	mov    0x18(%rax),%rax
	mov    %r14,%rdi
	callq  *%rax
	jmpq   1926a <jpeg_skip_scanlines+0x3ca>
	mov    %rax,-0x68(%rbp)
	mov    %r12,%r13
	jmp    193c2 <jpeg_skip_scanlines+0x522>
	nopw   0x0(%rax,%rax,1)

0019430 <jpeg_crop_scanline>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x50,%rsp
	mov    %r13,-0x18(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %r15,-0x28(%rbp)
	mov    %rsi,-0x40(%rbp)
	mov    %rdi,-0x48(%rbp)
	movslq 0x24(%rdi),%rax
	cmp    $0xcd,%eax
	jne    19478 <jpeg_crop_scanline+0x48>
	mov    0xa8(%rdi),%eax
	test   %eax,%eax
	jne    19478 <jpeg_crop_scanline+0x48>
	mov    %r13,%rax
	mov    %r12,%r13
	mov    %rsi,%r12
	mov    %r15,%rcx
	mov    %rdx,%r15
	mov    %r14,%r8
	mov    %rdi,%r14
	jmp    194ac <jpeg_crop_scanline+0x7c>
	mov    (%rdi),%rax
	movl   $0x14,0x28(%rax)
	movslq 0x24(%rdi),%rcx
	mov    (%rdi),%rax
	mov    %ecx,0x2c(%rax)
	mov    (%rdi),%rax
	mov    (%rax),%rax
	mov    %r12,%r13
	mov    %rsi,%r12
	mov    %rdx,%r15
	mov    %rdi,%r14
	callq  *%rax
	mov    -0x28(%rbp),%rcx
	mov    -0x20(%rbp),%r8
	mov    -0x18(%rbp),%rax
	test   %r12,%r12
	jne    19529 <jpeg_crop_scanline+0xf9>
	mov    (%r14),%rax
	movl   $0x7c,0x28(%rax)
	mov    (%r14),%rax
	mov    (%rax),%rax
	mov    %r14,%rdi
	callq  *%rax
	mov    -0x28(%rbp),%rcx
	mov    -0x20(%rbp),%r8
	mov    -0x18(%rbp),%rax
	mov    (%r15),%edx
	test   %edx,%edx
	je     194e8 <jpeg_crop_scanline+0xb8>
	add    (%r12),%edx
	mov    0x88(%r14),%esi
	cmp    %edx,%esi
	jae    1950f <jpeg_crop_scanline+0xdf>
	mov    (%r14),%rcx
	movl   $0x46,0x28(%rcx)
	mov    (%r14),%rcx
	mov    (%rcx),%rcx
	mov    %rax,%r12
	mov    %r14,%rdi
	callq  *%rcx
	mov    %r12,%rax
	mov    -0x40(%rbp),%r12
	mov    -0x28(%rbp),%rcx
	mov    -0x20(%rbp),%r8
	mov    0x88(%r14),%edx
	cmp    (%r15),%edx
	jne    19530 <jpeg_crop_scanline+0x100>
	mov    %r13,%r12
	mov    %rax,%r13
	mov    %r8,%r14
	mov    %rcx,%r15
	leaveq 
	retq   
	test   %r15,%r15
	jne    194d2 <jpeg_crop_scanline+0xa2>
	jmp    194b1 <jpeg_crop_scanline+0x81>
	movslq 0x1b0(%r14),%rax
	cmp    $0x1,%eax
	je     195cb <jpeg_crop_scanline+0x19b>
	movslq 0x198(%r14),%rsi
	imul   0x1a0(%r14),%esi
	mov    (%r12),%edi
	xor    %ecx,%ecx
	mov    %rdi,%rax
	mov    %rcx,%rdx
	div    %esi
	sub    %edx,%edi
	mov    %edi,(%r12)
	add    (%r15),%edx
	mov    %edx,(%r15)
	mov    %edx,0x88(%r14)
	mov    (%r12),%eax
	movslq %esi,%rsi
	mov    %rsi,-0x38(%rbp)
	cqto   
	mov    0x220(%r14),%rdi
	idiv   %rsi
	mov    %eax,0x14(%rdi)
	mov    0x88(%r14),%eax
	add    (%r12),%eax
	mov    %eax,%edi
	mov    0x220(%r14),%rax
	mov    %rbx,-0x8(%rbp)
	mov    %r13,-0x10(%rbp)
	mov    %rax,%rbx
	mov    %rcx,%r15
	callq  4150 <jdiv_round_up@plt>
	add    $0xffffffff,%eax
	mov    %eax,0x18(%rbx)
	mov    0x130(%r14),%r13
	mov    $0x1,%ebx
	mov    %r15,%rcx
	jmpq   1969e <jpeg_crop_scanline+0x26e>
	movslq 0x38(%r14),%rax
	cmp    $0x1,%eax
	jne    19540 <jpeg_crop_scanline+0x110>
	movslq 0x1a0(%r14),%rsi
	jmpq   1954f <jpeg_crop_scanline+0x11f>
	movslq 0x1b0(%r14),%rax
	cmp    $0x1,%eax
	jne    195f5 <jpeg_crop_scanline+0x1c5>
	cmp    $0x1,%edx
	je     195f9 <jpeg_crop_scanline+0x1c9>
	mov    0x8(%r13),%ebx
	movslq 0x28(%r13),%rdx
	mov    0x8(%r13),%eax
	imul   0x88(%r14),%eax
	mov    %eax,%edi
	movslq 0x198(%r14),%rsi
	mov    %rcx,-0x50(%rbp)
	mov    %rdx,%r14
	callq  4150 <jdiv_round_up@plt>
	mov    %eax,0x28(%r13)
	cmp    $0x1,%eax
	ja     19633 <jpeg_crop_scanline+0x203>
	cmp    $0x1,%r14d
	jle    19633 <jpeg_crop_scanline+0x203>
	mov    $0x1,%r15d
	mov    %r15,-0x30(%rbp)
	mov    %rbx,%rax
	imul   (%r12),%eax
	mov    %eax,%eax
	cqto   
	mov    -0x48(%rbp),%r14
	mov    0x220(%r14),%rcx
	mov    -0x38(%rbp),%rsi
	idiv   %rsi
	mov    -0x50(%rbp),%rdx
	movslq %edx,%r15
	mov    %eax,0x1c(%rcx,%r15,4)
	mov    0x88(%r14),%eax
	add    (%r12),%eax
	imul   %eax,%ebx
	mov    %ebx,%edi
	mov    %rdx,%r12
	mov    0x220(%r14),%rbx
	callq  4150 <jdiv_round_up@plt>
	add    $0xffffffff,%eax
	mov    %eax,0x44(%rbx,%r15,4)
	add    $0x60,%r13
	lea    0x1(%r12),%ecx
	mov    -0x30(%rbp),%r15
	mov    $0x1,%ebx
	mov    -0x40(%rbp),%r12
	movslq 0x38(%r14),%rdx
	cmp    %ecx,%edx
	jg     195e4 <jpeg_crop_scanline+0x1b4>
	test   %r15d,%r15d
	jg     196c5 <jpeg_crop_scanline+0x295>
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	leaveq 
	retq   
	mov    0x220(%r14),%rax
	movl   $0x1,0x6c(%rax)
	mov    %r14,%rdi
	callq  43e0 <jinit_upsampler@plt>
	mov    0x220(%r14),%rax
	movl   $0x0,0x6c(%rax)
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	leaveq 
	retq   
	nop

0019700 <jpeg_read_raw_data>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %r14,-0x8(%rbp)
	mov    %r15,-0x10(%rbp)
	movslq 0x24(%rdi),%rax
	cmp    $0xce,%eax
	jne    19726 <jpeg_read_raw_data+0x26>
	mov    %r15,%rcx
	mov    %r14,%r15
	mov    %rdi,%r14
	jmp    19761 <jpeg_read_raw_data+0x61>
	mov    (%rdi),%rax
	movl   $0x14,0x28(%rax)
	movslq 0x24(%rdi),%rcx
	mov    (%rdi),%rax
	mov    %ecx,0x2c(%rax)
	mov    (%rdi),%rax
	mov    (%rax),%rax
	mov    %rdi,%rcx
	mov    %rsi,-0x18(%rbp)
	mov    %rdi,%r14
	mov    %rcx,%rdi
	mov    %rdx,%r15
	callq  *%rax
	mov    %r15,%rdx
	mov    -0x18(%rbp),%rsi
	mov    -0x10(%rbp),%rcx
	mov    -0x8(%rbp),%r15
	mov    0x8c(%r14),%eax
	mov    0xa8(%r14),%edi
	cmp    %edi,%eax
	jbe    1980c <jpeg_read_raw_data+0x10c>
	mov    0x10(%r14),%rax
	test   %rax,%rax
	je     197b7 <jpeg_read_raw_data+0xb7>
	mov    %rdi,0x8(%rax)
	mov    0x8c(%r14),%ecx
	mov    0x10(%r14),%rax
	mov    %rcx,0x10(%rax)
	mov    0x10(%r14),%rax
	mov    (%rax),%rax
	mov    %r14,%rdi
	mov    %r13,-0x18(%rbp)
	mov    %rdx,%r13
	mov    %rsi,%r15
	callq  *%rax
	mov    %r13,%rdx
	mov    %r15,%rsi
	mov    -0x18(%rbp),%r13
	mov    -0x8(%rbp),%r15
	movslq 0x1a0(%r14),%rax
	imul   0x19c(%r14),%eax
	mov    %rax,-0x18(%rbp)
	cmp    %edx,%eax
	jbe    197ed <jpeg_read_raw_data+0xed>
	mov    (%r14),%rax
	movl   $0x17,0x28(%rax)
	mov    (%r14),%rax
	mov    (%rax),%rax
	mov    %rsi,%r15
	mov    %r14,%rdi
	callq  *%rax
	mov    %r15,%rsi
	mov    -0x8(%rbp),%r15
	mov    0x230(%r14),%rax
	mov    0x18(%rax),%rax
	mov    %r14,%rdi
	callq  *%rax
	test   %eax,%eax
	jne    19839 <jpeg_read_raw_data+0x139>
	mov    %r15,%r14
	xor    %eax,%eax
	mov    -0x10(%rbp),%r15
	leaveq 
	retq   
	mov    (%r14),%rax
	movl   $0x7b,0x28(%rax)
	mov    (%r14),%rax
	mov    0x8(%rax),%rax
	mov    %r14,%rdi
	mov    %rcx,%r14
	mov    $0xffffffffffffffff,%rsi
	callq  *%rax
	mov    %r15,%rcx
	mov    %r14,%r15
	mov    %rcx,%r14
	xor    %eax,%eax
	leaveq 
	retq   
	mov    -0x18(%rbp),%rax
	mov    %rax,%rcx
	add    0xa8(%r14),%ecx
	mov    %ecx,0xa8(%r14)
	mov    %r15,%r14
	mov    -0x10(%rbp),%r15
	leaveq 
	retq   
	nopw   0x0(%rax,%rax,1)

0019860 <jpeg_start_output>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	movslq 0x24(%rdi),%rax
	cmp    $0xcf,%eax
	jne    19898 <jpeg_start_output+0x38>
	test   %esi,%esi
	jg     1987c <jpeg_start_output+0x1c>
	mov    $0x1,%esi
	mov    0x240(%rdi),%rax
	movslq 0x24(%rax),%rax
	test   %eax,%eax
	jne    198df <jpeg_start_output+0x7f>
	mov    %esi,0xb4(%rdi)
	callq  19b00 <output_pass_setup>
	leaveq 
	retq   
	cmp    $0xcc,%eax
	je     19873 <jpeg_start_output+0x13>
	mov    (%rdi),%rax
	movl   $0x14,0x28(%rax)
	movslq 0x24(%rdi),%rcx
	mov    (%rdi),%rax
	mov    %ecx,0x2c(%rax)
	mov    (%rdi),%rax
	mov    (%rax),%rax
	mov    %rdi,%rcx
	mov    %r14,-0x8(%rbp)
	mov    %r15,-0x10(%rbp)
	mov    %rsi,%r14
	mov    %rdi,%r15
	mov    %rcx,%rdi
	callq  *%rax
	mov    %r14,%rsi
	mov    %r15,%rdi
	mov    -0x10(%rbp),%r15
	mov    -0x8(%rbp),%r14
	jmp    19873 <jpeg_start_output+0x13>
	movslq 0xac(%rdi),%rax
	cmp    %esi,%eax
	jge    1988b <jpeg_start_output+0x2b>
	mov    %rax,%rsi
	jmp    1988b <jpeg_start_output+0x2b>
	nop

00198f0 <jpeg_finish_output>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %r15,-0x8(%rbp)
	movslq 0x24(%rdi),%rax
	cmp    $0xcd,%eax
	je     1991e <jpeg_finish_output+0x2e>
	cmp    $0xce,%eax
	je     1991e <jpeg_finish_output+0x2e>
	movslq 0x24(%rdi),%rax
	cmp    $0xd0,%eax
	jne    1996e <jpeg_finish_output+0x7e>
	mov    %rdi,%r15
	jmp    1993e <jpeg_finish_output+0x4e>
	movslq 0x58(%rdi),%rax
	test   %eax,%eax
	je     1990e <jpeg_finish_output+0x1e>
	mov    0x220(%rdi),%rax
	mov    0x8(%rax),%rax
	mov    %rdi,%r15
	callq  *%rax
	movl   $0xd0,0x24(%r15)
	movslq 0xb4(%r15),%rax
	cmp    0xac(%r15),%eax
	jl     1998f <jpeg_finish_output+0x9f>
	mov    0x240(%r15),%rax
	movslq 0x24(%rax),%rcx
	test   %ecx,%ecx
	jne    1998f <jpeg_finish_output+0x9f>
	mov    %r15,%rdi
	callq  *(%rax)
	test   %eax,%eax
	jne    1993e <jpeg_finish_output+0x4e>
	xor    %eax,%eax
	mov    -0x8(%rbp),%r15
	leaveq 
	retq   
	mov    (%rdi),%rax
	movl   $0x14,0x28(%rax)
	movslq 0x24(%rdi),%rcx
	mov    (%rdi),%rax
	mov    %ecx,0x2c(%rax)
	mov    (%rdi),%rax
	mov    (%rax),%rax
	mov    %rdi,%r15
	callq  *%rax
	jmp    1993e <jpeg_finish_output+0x4e>
	movl   $0xcf,0x24(%r15)
	mov    $0x1,%eax
	mov    -0x8(%rbp),%r15
	leaveq 
	retq   
	data16 nopw %cs:0x0(%rax,%rax,1)
	nopl   (%rax)

00199b0 <set_wraparound_pointers>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %rbx,-0x8(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %r15,-0x28(%rbp)
	mov    0x228(%rdi),%rsi
	mov    0x130(%rdi),%r8
	movslq 0x1a0(%rdi),%rax
	lea    0x1(%rax),%r9d
	lea    0x2(%rax),%ebx
	mov    %rbx,-0x30(%rbp)
	xor    %ecx,%ecx
	mov    %rcx,%r10
	jmp    19a45 <set_wraparound_pointers+0x95>
	lea    (%rcx,%r15,1),%edx
	movslq %edx,%r14
	mov    0x0(%r13,%r14,8),%rbx
	mov    %rcx,%rdx
	sub    %eax,%edx
	movslq %edx,%rdx
	mov    %rbx,0x0(%r13,%rdx,8)
	mov    (%r11,%r14,8),%rbx
	mov    %rbx,(%r11,%rdx,8)
	movslq %ecx,%r14
	mov    0x0(%r13,%r14,8),%rdx
	lea    (%rcx,%r12,1),%ebx
	movslq %ebx,%rbx
	mov    %rdx,0x0(%r13,%rbx,8)
	mov    (%r11,%r14,8),%rdx
	mov    %rdx,(%r11,%rbx,8)
	add    $0x1,%ecx
	cmp    %eax,%ecx
	jl     199f3 <set_wraparound_pointers+0x43>
	add    $0x1,%r10d
	add    $0x60,%r8
	xor    %ecx,%ecx
	mov    -0x30(%rbp),%rbx
	movslq 0x38(%rdi),%rax
	cmp    %r10d,%eax
	jg     19a64 <set_wraparound_pointers+0xb4>
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	leaveq 
	retq   
	movslq %r10d,%r11
	movslq 0x24(%r8),%rax
	imul   0xc(%r8),%eax
	cltd   
	movslq 0x1a0(%rdi),%r12
	mov    0x68(%rsi),%r13
	mov    0x0(%r13,%r11,8),%r13
	mov    0x70(%rsi),%r14
	mov    (%r14,%r11,8),%r11
	idiv   %r12d
	mov    %rax,%r15
	imul   %r9d,%r15d
	mov    %rax,%r12
	imul   %ebx,%r12d
	jmp    19a33 <set_wraparound_pointers+0x83>
	nopl   0x0(%rax)

0019aa0 <start_iMCU_row>:
	push   %rbp
	mov    %rsp,%rbp
	mov    0x230(%rdi),%rcx
	movslq 0x1b0(%rdi),%rax
	cmp    $0x1,%eax
	jg     19ad8 <start_iMCU_row+0x38>
	mov    0x1a4(%rdi),%eax
	add    $0xffffffff,%eax
	cmp    0xb0(%rdi),%eax
	ja     19aef <start_iMCU_row+0x4f>
	mov    0x1b8(%rdi),%rax
	movslq 0x48(%rax),%rax
	mov    %eax,0x30(%rcx)
	jmp    19adf <start_iMCU_row+0x3f>
	movl   $0x1,0x30(%rcx)
	movl   $0x0,0x28(%rcx)
	movl   $0x0,0x2c(%rcx)
	leaveq 
	retq   
	mov    0x1b8(%rdi),%rax
	movslq 0xc(%rax),%rax
	mov    %eax,0x30(%rcx)
	jmp    19adf <start_iMCU_row+0x3f>
	nop

0019b00 <output_pass_setup>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %r13,-0x10(%rbp)
	mov    %r14,-0x18(%rbp)
	mov    %r15,-0x20(%rbp)
	mov    %r12,-0x8(%rbp)
	xor    %r12d,%r12d
	lea    0xa8(%rdi),%r14
	movslq 0x24(%rdi),%rax
	cmp    $0xcc,%eax
	jne    19b35 <output_pass_setup+0x35>
	mov    %rdi,%r13
	jmpq   19be0 <output_pass_setup+0xe0>
	mov    0x220(%rdi),%rax
	mov    (%rax),%rax
	mov    %rdi,%r13
	callq  *%rax
	movl   $0x0,(%r14)
	movl   $0xcc,0x24(%r13)
	jmpq   19be0 <output_pass_setup+0xe0>
	mov    0x10(%r13),%rax
	test   %rax,%rax
	je     19b80 <output_pass_setup+0x80>
	mov    %rcx,0x8(%rax)
	mov    0x8c(%r13),%ecx
	mov    0x10(%r13),%rax
	mov    %rcx,0x10(%rax)
	mov    0x10(%r13),%rax
	mov    (%rax),%rax
	mov    %r13,%rdi
	callq  *%rax
	mov    0x228(%r13),%rax
	mov    0x8(%rax),%rax
	mov    0xa8(%r13),%r15d
	mov    %r12,%rcx
	mov    %r13,%rdi
	mov    %r12,%rsi
	mov    %r14,%rdx
	callq  *%rax
	mov    0xa8(%r13),%eax
	cmp    %r15d,%eax
	je     19bfe <output_pass_setup+0xfe>
	mov    (%r14),%ecx
	mov    0x8c(%r13),%eax
	cmp    %ecx,%eax
	ja     19b58 <output_pass_setup+0x58>
	mov    0x220(%r13),%rax
	mov    0x8(%rax),%rax
	mov    %r13,%rdi
	callq  *%rax
	mov    0x220(%r13),%rax
	mov    (%rax),%rax
	mov    %r13,%rdi
	callq  *%rax
	movl   $0x0,(%r14)
	mov    0x220(%r13),%rax
	movslq 0x10(%rax),%rax
	test   %eax,%eax
	jne    19bac <output_pass_setup+0xac>
	movslq 0x5c(%r13),%rax
	test   %eax,%eax
	jne    19c13 <output_pass_setup+0x113>
	mov    $0xcd,%eax
	jmp    19c18 <output_pass_setup+0x118>
	mov    %r12,%rax
	mov    -0x8(%rbp),%r12
	mov    -0x20(%rbp),%r15
	mov    -0x18(%rbp),%r14
	mov    -0x10(%rbp),%r13
	leaveq 
	retq   
	mov    $0xce,%eax
	mov    %eax,0x24(%r13)
	mov    $0x1,%eax
	mov    -0x8(%rbp),%r12
	mov    -0x20(%rbp),%r15
	mov    -0x18(%rbp),%r14
	mov    -0x10(%rbp),%r13
	leaveq 
	retq   
	data16 nopw %cs:0x0(%rax,%rax,1)
	xchg   %ax,%ax

0019c40 <noop_convert>:
	push   %rbp
	mov    %rsp,%rbp
	leaveq 
	retq   
	nopw   %cs:0x0(%rax,%rax,1)

0019c50 <noop_quantize>:
	push   %rbp
	mov    %rsp,%rbp
	leaveq 
	retq   
	nopw   %cs:0x0(%rax,%rax,1)

0019c60 <read_and_discard_scanlines>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %rbx,-0x10(%rbp)
	mov    %r12,-0x18(%rbp)
	mov    %r13,-0x20(%rbp)
	mov    %r14,-0x28(%rbp)
	mov    %r15,-0x30(%rbp)
	mov    0x268(%rdi),%rcx
	mov    0x8(%rcx),%rax
	mov    %rax,-0x8(%rbp)
	lea    -0x52(%rip),%rax        # 19c40 <noop_convert>
	mov    %rax,0x8(%rcx)
	xor    %r12d,%r12d
	mov    $0x1,%edx
	mov    0x270(%rdi),%rax
	test   %rax,%rax
	jne    19cb8 <read_and_discard_scanlines+0x58>
	mov    %rdi,%rbx
	mov    %rsi,%r13
	mov    %r12,%r14
	mov    %r14,%r15
	jmp    19ce3 <read_and_discard_scanlines+0x83>
	mov    0x8(%rax),%r14
	test   %r14,%r14
	jne    19d12 <read_and_discard_scanlines+0xb2>
	mov    %rdi,%rbx
	mov    %rsi,%r13
	mov    %r12,%r14
	mov    %r14,%r15
	jmp    19ce3 <read_and_discard_scanlines+0x83>
	mov    %rbx,%rdi
	mov    %r12,%rsi
	callq  4420 <jpeg_read_scanlines@plt>
	add    $0x1,%r15d
	mov    $0x1,%edx
	cmp    %r13d,%r15d
	jb     19ccf <read_and_discard_scanlines+0x6f>
	mov    0x268(%rbx),%rax
	mov    -0x8(%rbp),%rcx
	mov    %rcx,0x8(%rax)
	test   %r14,%r14
	jne    19d28 <read_and_discard_scanlines+0xc8>
	mov    -0x30(%rbp),%r15
	mov    -0x28(%rbp),%r14
	mov    -0x20(%rbp),%r13
	mov    -0x18(%rbp),%r12
	mov    -0x10(%rbp),%rbx
	leaveq 
	retq   
	lea    -0xc9(%rip),%rcx        # 19c50 <noop_quantize>
	mov    %rcx,0x8(%rax)
	mov    %rdi,%rbx
	mov    %rsi,%r13
	mov    %r12,%r15
	jmp    19ce3 <read_and_discard_scanlines+0x83>
	mov    0x270(%rbx),%rax
	mov    %r14,0x8(%rax)
	mov    -0x30(%rbp),%r15
	mov    -0x28(%rbp),%r14
	mov    -0x20(%rbp),%r13
	mov    -0x18(%rbp),%r12
	mov    -0x10(%rbp),%rbx
	leaveq 
	retq   
	nopl   0x0(%rax)

0019d50 <increment_simple_rowgroup_ctr>:
	push   %rbp
	mov    %rsp,%rbp
	mov    0x19c(%rdi),%r9d
	xor    %ecx,%ecx
	mov    0x228(%rdi),%r8
	mov    %rsi,%rax
	mov    %rcx,%rdx
	div    %r9d
	add    0x64(%r8),%eax
	mov    %eax,0x64(%r8)
	mov    %rcx,%rdx
	mov    0x19c(%rdi),%r8d
	mov    %rsi,%rax
	div    %r8d
	sub    %edx,%esi
	add    0xa8(%rdi),%esi
	mov    %esi,0xa8(%rdi)
	mov    %rdx,%rsi
	callq  19c60 <read_and_discard_scanlines>
	leaveq 
	retq   
	nopl   (%rax)

0019da0 <jpeg_stdio_dest>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	lea    0x261(%rip),%rax        # 1a010 <init_destination>
	mov    0x28(%rdi),%rcx
	test   %rcx,%rcx
	je     19dfe <jpeg_stdio_dest+0x5e>
	mov    0x10(%rcx),%rcx
	cmp    %rax,%rcx
	je     19e3f <jpeg_stdio_dest+0x9f>
	mov    (%rdi),%rax
	movl   $0x17,0x28(%rax)
	mov    (%rdi),%rax
	mov    (%rax),%rax
	mov    %rdi,%rcx
	mov    %r14,-0x8(%rbp)
	mov    %r15,-0x10(%rbp)
	mov    %rsi,%r14
	mov    %rdi,%r15
	mov    %rcx,%rdi
	callq  *%rax
	mov    %r14,%rsi
	mov    %r15,%rdi
	lea    0x21c(%rip),%rax        # 1a010 <init_destination>
	mov    -0x10(%rbp),%r15
	mov    -0x8(%rbp),%r14
	jmp    19e3f <jpeg_stdio_dest+0x9f>
	mov    0x8(%rdi),%rax
	mov    (%rax),%rax
	xor    %r8d,%r8d
	mov    $0x38,%edx
	mov    %rdi,%rcx
	mov    %r14,-0x8(%rbp)
	mov    %r15,-0x10(%rbp)
	mov    %rdi,%r14
	mov    %rcx,%rdi
	mov    %rsi,%r15
	mov    %r8,%rsi
	callq  *%rax
	mov    %rax,0x28(%r14)
	mov    %r15,%rsi
	mov    %r14,%rdi
	lea    0x1d9(%rip),%rax        # 1a010 <init_destination>
	mov    -0x10(%rbp),%r15
	mov    -0x8(%rbp),%r14
	mov    0x28(%rdi),%rcx
	mov    %rax,0x10(%rcx)
	lea    0x212(%rip),%rax        # 1a060 <empty_output_buffer>
	mov    %rax,0x18(%rcx)
	lea    0x327(%rip),%rax        # 1a180 <term_destination>
	mov    %rax,0x20(%rcx)
	mov    %rsi,0x28(%rcx)
	leaveq 
	retq   
	data16 nopw %cs:0x0(%rax,%rax,1)
	xchg   %ax,%ax

0019e70 <jpeg_mem_dest>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %r13,-0x10(%rbp)
	mov    %r14,-0x18(%rbp)
	mov    %r15,-0x20(%rbp)
	test   %rsi,%rsi
	je     19ea5 <jpeg_mem_dest+0x35>
	test   %rdx,%rdx
	je     19ea5 <jpeg_mem_dest+0x35>
	mov    %r15,%rax
	mov    %rdi,%r15
	mov    %r14,%rcx
	mov    %r12,%r14
	mov    %rsi,%r12
	mov    %r13,%r8
	mov    %rdx,%r13
	jmp    19ecf <jpeg_mem_dest+0x5f>
	mov    (%rdi),%rax
	movl   $0x17,0x28(%rax)
	mov    (%rdi),%rax
	mov    (%rax),%rax
	mov    %rdx,%r13
	mov    %r12,%r14
	mov    %rsi,%r12
	mov    %rdi,%r15
	callq  *%rax
	mov    -0x20(%rbp),%rax
	mov    -0x18(%rbp),%rcx
	mov    -0x10(%rbp),%r8
	lea    0x17a(%rip),%rdx        # 1a050 <init_mem_destination>
	mov    0x28(%r15),%rsi
	test   %rsi,%rsi
	je     19f12 <jpeg_mem_dest+0xa2>
	mov    0x10(%rsi),%rsi
	cmp    %rdx,%rsi
	je     19f3c <jpeg_mem_dest+0xcc>
	mov    (%r15),%rax
	movl   $0x17,0x28(%rax)
	mov    (%r15),%rax
	mov    (%rax),%rax
	mov    %r15,%rdi
	callq  *%rax
	lea    0x14c(%rip),%rdx        # 1a050 <init_mem_destination>
	mov    -0x20(%rbp),%rax
	mov    -0x18(%rbp),%rcx
	mov    -0x10(%rbp),%r8
	jmp    19f3c <jpeg_mem_dest+0xcc>
	mov    0x8(%r15),%rax
	mov    (%rax),%rax
	xor    %esi,%esi
	mov    $0x50,%edx
	mov    %r15,%rdi
	callq  *%rax
	mov    %rax,0x28(%r15)
	lea    0x120(%rip),%rdx        # 1a050 <init_mem_destination>
	mov    -0x20(%rbp),%rax
	mov    -0x18(%rbp),%rcx
	mov    -0x10(%rbp),%r8
	mov    0x28(%r15),%rsi
	mov    %rdx,0x10(%rsi)
	lea    0x185(%rip),%rdx        # 1a0d0 <empty_mem_output_buffer>
	mov    %rdx,0x18(%rsi)
	lea    0x2ea(%rip),%rdx        # 1a240 <term_mem_destination>
	mov    %rdx,0x20(%rsi)
	mov    %r12,0x28(%rsi)
	mov    %r13,0x30(%rsi)
	movq   $0x0,0x38(%rsi)
	mov    (%r12),%rdx
	test   %rdx,%rdx
	je     19f81 <jpeg_mem_dest+0x111>
	mov    0x0(%r13),%rdx
	test   %rdx,%rdx
	je     19f81 <jpeg_mem_dest+0x111>
	mov    %rsi,%r15
	jmp    19fde <jpeg_mem_dest+0x16e>
	mov    $0x1000,%edi
	mov    %r14,-0x8(%rbp)
	mov    %rsi,%r14
	callq  4320 <malloc@plt>
	mov    %rax,(%r12)
	mov    %rax,0x38(%r14)
	test   %rax,%rax
	je     19fa4 <jpeg_mem_dest+0x134>
	mov    %r14,%r15
	jmp    19fc6 <jpeg_mem_dest+0x156>
	mov    (%r15),%rax
	movl   $0x36,0x28(%rax)
	mov    (%r15),%rax
	movl   $0xa,0x2c(%rax)
	mov    (%r15),%rax
	mov    (%rax),%rax
	mov    %r15,%rdi
	mov    %r14,%r15
	callq  *%rax
	movq   $0x1000,0x0(%r13)
	mov    -0x8(%rbp),%r14
	mov    -0x20(%rbp),%rax
	mov    -0x18(%rbp),%rcx
	mov    -0x10(%rbp),%r8
	mov    (%r12),%rdx
	mov    %rdx,0x40(%r15)
	mov    %rdx,(%r15)
	mov    0x0(%r13),%rdx
	mov    %rdx,0x48(%r15)
	mov    %rdx,0x8(%r15)
	mov    %r14,%r12
	mov    %rcx,%r14
	mov    %r8,%r13
	mov    %rax,%r15
	leaveq 
	retq   
	data16 nopw %cs:0x0(%rax,%rax,1)
	xchg   %ax,%ax

001a010 <init_destination>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %r15,-0x8(%rbp)
	mov    0x8(%rdi),%rax
	mov    (%rax),%rax
	mov    $0x1,%esi
	mov    $0x1000,%edx
	mov    0x28(%rdi),%r15
	callq  *%rax
	mov    %rax,0x30(%r15)
	mov    %rax,(%r15)
	movq   $0x1000,0x8(%r15)
	mov    -0x8(%rbp),%r15
	leaveq 
	retq   
	nopl   0x0(%rax,%rax,1)

001a050 <init_mem_destination>:
	push   %rbp
	mov    %rsp,%rbp
	leaveq 
	retq   
	nopw   %cs:0x0(%rax,%rax,1)

001a060 <empty_output_buffer>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %r14,-0x8(%rbp)
	mov    %r15,-0x10(%rbp)
	mov    %rdi,%r15
	mov    $0x1,%esi
	mov    0x28(%r15),%r14
	mov    0x30(%r14),%rdi
	mov    $0x1000,%edx
	mov    0x28(%r14),%rcx
	callq  4450 <fwrite@plt>
	cmp    $0x1000,%rax
	je     1a0ab <empty_output_buffer+0x4b>
	mov    (%r15),%rax
	movl   $0x25,0x28(%rax)
	mov    (%r15),%rax
	mov    (%rax),%rax
	mov    %r15,%rdi
	callq  *%rax
	mov    0x30(%r14),%rax
	mov    %rax,(%r14)
	movq   $0x1000,0x8(%r14)
	mov    $0x1,%eax
	mov    -0x10(%rbp),%r15
	mov    -0x8(%rbp),%r14
	leaveq 
	retq   
	nopl   0x0(%rax)

001a0d0 <empty_mem_output_buffer>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %r13,-0x8(%rbp)
	mov    %r14,-0x10(%rbp)
	mov    %r15,-0x18(%rbp)
	mov    0x28(%rdi),%r13
	mov    0x48(%r13),%rax
	lea    (%rax,%rax,1),%r14
	mov    %rdi,%r15
	mov    %r14,%rdi
	callq  4320 <malloc@plt>
	test   %rax,%rax
	je     1a105 <empty_mem_output_buffer+0x35>
	mov    %rax,%r15
	jmp    1a127 <empty_mem_output_buffer+0x57>
	mov    (%r15),%rcx
	movl   $0x36,0x28(%rcx)
	mov    (%r15),%rcx
	movl   $0xa,0x2c(%rcx)
	mov    (%r15),%rcx
	mov    (%rcx),%rcx
	mov    %r15,%rdi
	mov    %rax,%r15
	callq  *%rcx
	mov    0x40(%r13),%rsi
	mov    0x48(%r13),%rdx
	mov    %r15,%rdi
	callq  42c0 <memcpy@plt>
	mov    0x38(%r13),%rdi
	test   %rdi,%rdi
	je     1a145 <empty_mem_output_buffer+0x75>
	callq  4060 <free@plt>
	mov    %r15,0x38(%r13)
	mov    0x48(%r13),%rcx
	lea    (%r15,%rcx,1),%rax
	mov    %rax,0x0(%r13)
	mov    %rcx,0x8(%r13)
	mov    %r15,0x40(%r13)
	mov    %r14,0x48(%r13)
	mov    $0x1,%eax
	mov    -0x18(%rbp),%r15
	mov    -0x10(%rbp),%r14
	mov    -0x8(%rbp),%r13
	leaveq 
	retq   
	data16 nopw %cs:0x0(%rax,%rax,1)
	nop

001a180 <term_destination>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %r14,-0x10(%rbp)
	mov    %r15,-0x18(%rbp)
	mov    0x28(%rdi),%r15
	mov    0x8(%r15),%rax
	cmp    $0x1000,%rax
	jne    1a1c3 <term_destination+0x43>
	mov    %rdi,%r14
	mov    0x28(%r15),%rdi
	callq  4330 <fflush@plt>
	mov    0x28(%r15),%rdi
	callq  40c0 <ferror@plt>
	test   %eax,%eax
	jne    1a1f9 <term_destination+0x79>
	mov    -0x18(%rbp),%r15
	mov    -0x10(%rbp),%r14
	leaveq 
	retq   
	mov    $0x1000,%r14d
	sub    %rax,%r14
	mov    0x30(%r15),%rax
	mov    $0x1,%esi
	mov    0x28(%r15),%rcx
	mov    %r14,%rdx
	mov    %r13,-0x8(%rbp)
	mov    %r14,%r13
	mov    %rdi,%r14
	mov    %rax,%rdi
	callq  4450 <fwrite@plt>
	cmp    %r13,%rax
	jne    1a218 <term_destination+0x98>
	mov    -0x8(%rbp),%r13
	jmp    1a1a3 <term_destination+0x23>
	mov    (%r14),%rax
	movl   $0x25,0x28(%rax)
	mov    (%r14),%rax
	mov    (%rax),%rax
	mov    %r14,%rdi
	callq  *%rax
	mov    -0x18(%rbp),%r15
	mov    -0x10(%rbp),%r14
	leaveq 
	retq   
	mov    (%r14),%rax
	movl   $0x25,0x28(%rax)
	mov    (%r14),%rax
	mov    (%rax),%rax
	mov    %r14,%rdi
	callq  *%rax
	mov    -0x8(%rbp),%r13
	jmpq   1a1a3 <term_destination+0x23>
	nopw   %cs:0x0(%rax,%rax,1)

001a240 <term_mem_destination>:
	push   %rbp
	mov    %rsp,%rbp
	mov    0x28(%rdi),%rdx
	mov    0x40(%rdx),%rax
	mov    0x28(%rdx),%rcx
	mov    %rax,(%rcx)
	mov    0x48(%rdx),%rax
	mov    0x8(%rdx),%rcx
	sub    %rcx,%rax
	mov    0x30(%rdx),%rcx
	mov    %rax,(%rcx)
	leaveq 
	retq   
	nopw   0x0(%rax,%rax,1)

001a270 <jpeg_stdio_src>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	lea    0x221(%rip),%rdx        # 1a4a0 <init_source>
	mov    0x28(%rdi),%rax
	test   %rax,%rax
	je     1a2a3 <jpeg_stdio_src+0x33>
	mov    0x10(%rax),%rax
	cmp    %rdx,%rax
	jne    1a34e <jpeg_stdio_src+0xde>
	mov    %r14,%rax
	mov    %rdi,%r14
	mov    %r15,%rcx
	mov    %rsi,%r15
	jmp    1a2ff <jpeg_stdio_src+0x8f>
	mov    0x8(%rdi),%rax
	mov    (%rax),%rcx
	xor    %eax,%eax
	mov    $0x50,%edx
	mov    %rdi,%r8
	mov    %r14,-0x10(%rbp)
	mov    %r15,-0x18(%rbp)
	mov    %rdi,%r14
	mov    %r8,%rdi
	mov    %rsi,%r15
	mov    %rax,%rsi
	callq  *%rcx
	mov    %rax,0x28(%r14)
	mov    0x8(%r14),%rcx
	mov    (%rcx),%rcx
	mov    $0x1000,%edx
	mov    %r14,%rdi
	mov    %r13,-0x8(%rbp)
	mov    %rax,%r13
	xor    %esi,%esi
	callq  *%rcx
	mov    %rax,0x40(%r13)
	mov    -0x8(%rbp),%r13
	lea    0x1a9(%rip),%rdx        # 1a4a0 <init_source>
	mov    -0x18(%rbp),%rcx
	mov    -0x10(%rbp),%rax
	mov    0x28(%r14),%rsi
	mov    %rdx,0x10(%rsi)
	lea    0x1c2(%rip),%rdx        # 1a4d0 <fill_input_buffer>
	mov    %rdx,0x18(%rsi)
	lea    0x2b7(%rip),%rdx        # 1a5d0 <skip_input_data>
	mov    %rdx,0x20(%rsi)
	mov    0x53c0c(%rip),%rdx        # 6df30 <jpeg_resync_to_restart@@LIBJPEG_6.2+0x4ad90>
	mov    %rdx,0x28(%rsi)
	lea    0x311(%rip),%rdx        # 1a640 <term_source>
	mov    %rdx,0x30(%rsi)
	mov    %r15,0x38(%rsi)
	movq   $0x0,0x8(%rsi)
	movq   $0x0,(%rsi)
	mov    %rax,%r14
	mov    %rcx,%r15
	leaveq 
	retq   
	mov    (%rdi),%rax
	movl   $0x17,0x28(%rax)
	mov    (%rdi),%rax
	mov    (%rax),%rax
	mov    %rdi,%rcx
	mov    %r14,-0x10(%rbp)
	mov    %r15,-0x18(%rbp)
	mov    %rdi,%r14
	mov    %rcx,%rdi
	mov    %rsi,%r15
	callq  *%rax
	lea    0x125(%rip),%rdx        # 1a4a0 <init_source>
	mov    -0x18(%rbp),%rcx
	mov    -0x10(%rbp),%rax
	jmpq   1a2ff <jpeg_stdio_src+0x8f>
	nopl   0x0(%rax,%rax,1)

001a390 <jpeg_mem_src>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %r13,-0x8(%rbp)
	mov    %r14,-0x10(%rbp)
	mov    %r15,-0x18(%rbp)
	test   %rsi,%rsi
	je     1a3c2 <jpeg_mem_src+0x32>
	test   %rdx,%rdx
	je     1a3c2 <jpeg_mem_src+0x32>
	mov    %r13,%rax
	mov    %rsi,%r13
	mov    %r15,%rcx
	mov    %rdx,%r15
	mov    %r14,%r8
	mov    %rdi,%r14
	jmp    1a3e9 <jpeg_mem_src+0x59>
	mov    (%rdi),%rax
	movl   $0x2a,0x28(%rax)
	mov    (%rdi),%rax
	mov    (%rax),%rax
	mov    %rsi,%r13
	mov    %rdx,%r15
	mov    %rdi,%r14
	callq  *%rax
	mov    -0x18(%rbp),%rcx
	mov    -0x10(%rbp),%r8
	mov    -0x8(%rbp),%rax
	lea    0xd0(%rip),%rdx        # 1a4c0 <init_mem_source>
	mov    0x28(%r14),%rsi
	test   %rsi,%rsi
	je     1a42c <jpeg_mem_src+0x9c>
	mov    0x10(%rsi),%rsi
	cmp    %rdx,%rsi
	je     1a456 <jpeg_mem_src+0xc6>
	mov    (%r14),%rax
	movl   $0x17,0x28(%rax)
	mov    (%r14),%rax
	mov    (%rax),%rax
	mov    %r14,%rdi
	callq  *%rax
	lea    0xa2(%rip),%rdx        # 1a4c0 <init_mem_source>
	mov    -0x18(%rbp),%rcx
	mov    -0x10(%rbp),%r8
	mov    -0x8(%rbp),%rax
	jmp    1a456 <jpeg_mem_src+0xc6>
	mov    0x8(%r14),%rax
	mov    (%rax),%rax
	xor    %esi,%esi
	mov    $0x38,%edx
	mov    %r14,%rdi
	callq  *%rax
	mov    %rax,0x28(%r14)
	lea    0x76(%rip),%rdx        # 1a4c0 <init_mem_source>
	mov    -0x18(%rbp),%rcx
	mov    -0x10(%rbp),%r8
	mov    -0x8(%rbp),%rax
	mov    0x28(%r14),%rsi
	mov    %rdx,0x10(%rsi)
	lea    0x11b(%rip),%rdx        # 1a580 <fill_mem_input_buffer>
	mov    %rdx,0x18(%rsi)
	lea    0x160(%rip),%rdx        # 1a5d0 <skip_input_data>
	mov    %rdx,0x20(%rsi)
	mov    0x53ab5(%rip),%rdx        # 6df30 <jpeg_resync_to_restart@@LIBJPEG_6.2+0x4ad90>
	mov    %rdx,0x28(%rsi)
	lea    0x1ba(%rip),%rdx        # 1a640 <term_source>
	mov    %rdx,0x30(%rsi)
	mov    %r15,0x8(%rsi)
	mov    %r13,(%rsi)
	mov    %rax,%r13
	mov    %r8,%r14
	mov    %rcx,%r15
	leaveq 
	retq   
	nopl   0x0(%rax)

001a4a0 <init_source>:
	push   %rbp
	mov    %rsp,%rbp
	mov    0x28(%rdi),%rax
	movl   $0x1,0x48(%rax)
	leaveq 
	retq   
	data16 nopw %cs:0x0(%rax,%rax,1)
	nopl   0x0(%rax)

001a4c0 <init_mem_source>:
	push   %rbp
	mov    %rsp,%rbp
	leaveq 
	retq   
	nopw   %cs:0x0(%rax,%rax,1)

001a4d0 <fill_input_buffer>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %r14,-0x8(%rbp)
	mov    %r15,-0x10(%rbp)
	mov    %rdi,%r15
	mov    $0x1,%esi
	mov    0x28(%r15),%r14
	mov    0x40(%r14),%rdi
	mov    $0x1000,%edx
	mov    0x38(%r14),%rcx
	callq  40e0 <fread@plt>
	test   %rax,%rax
	jne    1a551 <fill_input_buffer+0x81>
	movslq 0x48(%r14),%rax
	test   %eax,%eax
	je     1a520 <fill_input_buffer+0x50>
	mov    (%r15),%rax
	movl   $0x2a,0x28(%rax)
	mov    (%r15),%rax
	mov    (%rax),%rax
	mov    %r15,%rdi
	callq  *%rax
	mov    (%r15),%rax
	movl   $0x78,0x28(%rax)
	mov    (%r15),%rax
	mov    0x8(%rax),%rax
	mov    %r15,%rdi
	mov    $0xffffffffffffffff,%rsi
	callq  *%rax
	mov    0x40(%r14),%rax
	movb   $0xff,(%rax)
	mov    0x40(%r14),%rax
	movb   $0xd9,0x1(%rax)
	mov    $0x2,%eax
	mov    0x40(%r14),%rcx
	mov    %rcx,(%r14)
	mov    %rax,0x8(%r14)
	movl   $0x0,0x48(%r14)
	mov    $0x1,%eax
	mov    -0x10(%rbp),%r15
	mov    -0x8(%rbp),%r14
	leaveq 
	retq   
	data16 nopw %cs:0x0(%rax,%rax,1)
	xchg   %ax,%ax

001a580 <fill_mem_input_buffer>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %r15,-0x8(%rbp)
	mov    (%rdi),%rax
	movl   $0x78,0x28(%rax)
	mov    (%rdi),%rax
	mov    0x8(%rax),%rax
	mov    $0xffffffffffffffff,%rsi
	mov    %rdi,%r15
	callq  *%rax
	lea    0x3f168(%rip),%rcx        # 59718 <mybuffer.5>
	mov    0x28(%r15),%rax
	mov    %rcx,(%rax)
	mov    0x28(%r15),%rax
	movq   $0x2,0x8(%rax)
	mov    $0x1,%eax
	mov    -0x8(%rbp),%r15
	leaveq 
	retq   
	xchg   %ax,%ax

001a5d0 <skip_input_data>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    0x28(%rdi),%rax
	test   %rsi,%rsi
	jg     1a5e3 <skip_input_data+0x13>
	leaveq 
	retq   
	mov    %r13,-0x8(%rbp)
	mov    %r14,-0x10(%rbp)
	mov    %r15,-0x18(%rbp)
	mov    %r12,%r13
	mov    %rbx,%r12
	mov    %rsi,%rbx
	mov    %rdi,%r14
	mov    %rax,%r15
	jmp    1a60a <skip_input_data+0x3a>
	sub    %rax,%rbx
	mov    %r14,%rdi
	callq  *0x18(%r15)
	mov    0x8(%r15),%rax
	cmp    %rbx,%rax
	jl     1a600 <skip_input_data+0x30>
	mov    %rbx,%rcx
	add    (%r15),%rcx
	mov    %rcx,(%r15)
	sub    %rbx,%rax
	mov    %rax,0x8(%r15)
	mov    %r12,%rbx
	mov    %r13,%r12
	mov    -0x18(%rbp),%r15
	mov    -0x10(%rbp),%r14
	mov    -0x8(%rbp),%r13
	leaveq 
	retq   
	nopw   0x0(%rax,%rax,1)

001a640 <term_source>:
	push   %rbp
	mov    %rsp,%rbp
	leaveq 
	retq   
	nopw   %cs:0x0(%rax,%rax,1)

001a650 <jinit_d_coef_controller>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x40,%rsp
	mov    %r13,-0x20(%rbp)
	mov    %r14,-0x28(%rbp)
	mov    %r15,-0x30(%rbp)
	mov    $0x1,%r15d
	mov    0x8(%rdi),%rax
	mov    (%rax),%rax
	mov    %rbx,%r13
	mov    %rsi,%r14
	mov    $0xe8,%edx
	mov    %rdi,%rbx
	mov    %r15,%rsi
	callq  *%rax
	mov    %rax,0x230(%rbx)
	lea    0x129e(%rip),%rcx        # 1b930 <start_input_pass>
	mov    %rcx,(%rax)
	lea    0x12b4(%rip),%rcx        # 1b950 <start_output_pass>
	mov    %rcx,0x10(%rax)
	movq   $0x0,0xe0(%rax)
	xor    %esi,%esi
	test   %r14d,%r14d
	jne    1a6d2 <jinit_d_coef_controller+0x82>
	mov    0x8(%rbx),%rcx
	mov    0x8(%rcx),%rcx
	mov    %rax,%r14
	mov    %r15,%rax
	mov    %rsi,%r15
	mov    %rax,%rsi
	mov    $0x500,%edx
	mov    %rbx,%rdi
	callq  *%rcx
	jmp    1a70e <jinit_d_coef_controller+0xbe>
	mov    0x130(%rbx),%rdx
	lea    0x90(%rax),%rcx
	mov    %rcx,-0x38(%rbp)
	mov    %rax,-0x8(%rbp)
	mov    %r13,-0x10(%rbp)
	mov    %r12,-0x18(%rbp)
	mov    %rsi,%r13
	jmpq   1a7ad <jinit_d_coef_controller+0x15d>
	movslq %r15d,%rdx
	mov    %rdx,%rcx
	shl    $0x7,%rcx
	add    %rax,%rcx
	mov    %rcx,0x38(%r14,%rdx,8)
	add    $0x1,%r15d
	cmp    $0x9,%r15d
	jle    1a6f8 <jinit_d_coef_controller+0xa8>
	lea    0x12b5(%rip),%rax        # 1b9d0 <dummy_consume_data>
	mov    %rax,0x8(%r14)
	lea    0x14a(%rip),%rax        # 1a870 <decompress_onepass>
	mov    %rax,0x18(%r14)
	movq   $0x0,0x20(%r14)
	mov    $0x1,%r15d
	jmpq   1a7dc <jinit_d_coef_controller+0x18c>
	movslq 0xc(%rdx),%r12
	movslq 0x138(%rbx),%rax
	test   %eax,%eax
	je     1a750 <jinit_d_coef_controller+0x100>
	lea    (%r12,%r12,2),%r12d
	mov    0x1c(%rdx),%edi
	movslq 0x8(%rdx),%rsi
	mov    0x8(%rbx),%rax
	mov    0x28(%rax),%r14
	mov    %rdx,%r15
	callq  42b0 <jround_up@plt>
	mov    0x20(%r15),%edi
	movslq 0xc(%r15),%rsi
	mov    %r15,-0x40(%rbp)
	mov    %rax,%r15
	callq  42b0 <jround_up@plt>
	mov    %r15,%rcx
	mov    %rax,%r8
	mov    %r12,%r9
	mov    $0x1,%r15d
	mov    %r15,%rdx
	mov    %rbx,%rdi
	mov    %r15,%rsi
	callq  *%r14
	movslq %r13d,%rdx
	mov    -0x38(%rbp),%rcx
	mov    %rax,(%rcx,%rdx,8)
	mov    -0x40(%rbp),%rax
	lea    0x60(%rax),%rdx
	add    $0x1,%r13d
	movslq 0x38(%rbx),%rax
	cmp    %r13d,%eax
	jg     1a73d <jinit_d_coef_controller+0xed>
	lea    0x1223(%rip),%rax        # 1b9e0 <consume_data>
	mov    -0x8(%rbp),%r14
	mov    %rax,0x8(%r14)
	lea    0x394(%rip),%rax        # 1ab60 <decompress_data>
	mov    %rax,0x18(%r14)
	mov    %rcx,0x20(%r14)
	mov    -0x18(%rbp),%r12
	mov    -0x10(%rbp),%r13
	mov    0x8(%rbx),%rax
	mov    (%rax),%rax
	mov    %r15,%rsi
	mov    %rbx,%rdi
	mov    $0x80,%edx
	callq  *%rax
	mov    %rax,0x88(%r14)
	mov    %r13,%rbx
	mov    -0x30(%rbp),%r15
	mov    -0x28(%rbp),%r14
	mov    -0x20(%rbp),%r13
	leaveq 
	retq   
	nopl   0x0(%rax,%rax,1)

001a810 <start_iMCU_row>:
	push   %rbp
	mov    %rsp,%rbp
	mov    0x230(%rdi),%rcx
	movslq 0x1b0(%rdi),%rax
	cmp    $0x1,%eax
	jg     1a848 <start_iMCU_row+0x38>
	mov    0x1a4(%rdi),%eax
	add    $0xffffffff,%eax
	cmp    0xb0(%rdi),%eax
	ja     1a85f <start_iMCU_row+0x4f>
	mov    0x1b8(%rdi),%rax
	movslq 0x48(%rax),%rax
	mov    %eax,0x30(%rcx)
	jmp    1a84f <start_iMCU_row+0x3f>
	movl   $0x1,0x30(%rcx)
	movl   $0x0,0x28(%rcx)
	movl   $0x0,0x2c(%rcx)
	leaveq 
	retq   
	mov    0x1b8(%rdi),%rax
	movslq 0xc(%rax),%rax
	mov    %eax,0x30(%rcx)
	jmp    1a84f <start_iMCU_row+0x3f>
	nop

001a870 <decompress_onepass>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0xa0,%rsp
	mov    %rsi,-0x50(%rbp)
	mov    %rdi,-0x80(%rbp)
	mov    %rbx,-0x8(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %r15,-0x28(%rbp)
	mov    0x230(%rdi),%r15
	mov    %r15,-0x78(%rbp)
	movslq 0x2c(%r15),%rax
	mov    0x1d8(%rdi),%r13d
	add    $0xffffffff,%r13d
	mov    %r13,-0x30(%rbp)
	mov    0x1a4(%rdi),%ecx
	add    $0xffffffff,%ecx
	mov    %rcx,-0x68(%rbp)
	lea    0x38(%r15),%rdx
	mov    %rdx,-0x70(%rbp)
	jmp    1a93b <decompress_onepass+0xcb>
	mov    0x38(%r15),%rax
	movslq 0x1e0(%rdi),%rsi
	shl    $0x7,%rsi
	mov    %rdx,%r12
	mov    %rdi,%r14
	mov    %rax,%rdi
	callq  44d0 <jzero_far@plt>
	mov    0x250(%r14),%rax
	mov    0x8(%rax),%rax
	mov    %r14,%rdi
	mov    %r12,%rsi
	callq  *%rax
	test   %eax,%eax
	je     1a99e <decompress_onepass+0x12e>
	mov    0x220(%r14),%rax
	cmp    0x14(%rax),%ebx
	jae    1a9c5 <decompress_onepass+0x155>
	mov    %r12,%rdx
	mov    %r14,%rdi
	add    $0x1,%ebx
	mov    -0x88(%rbp),%rax
	mov    %rbx,-0x90(%rbp)
	cmp    %r13d,%ebx
	jbe    1a8cc <decompress_onepass+0x5c>
	movl   $0x0,0x28(%r15)
	add    $0x1,%eax
	mov    %rax,-0x88(%rbp)
	movslq 0x30(%r15),%rcx
	cmp    %eax,%ecx
	jg     1a9d7 <decompress_onepass+0x167>
	mov    0xb8(%rdi),%eax
	add    $0x1,%eax
	mov    %eax,0xb8(%rdi)
	mov    0xb0(%rdi),%eax
	add    $0x1,%eax
	mov    %eax,0xb0(%rdi)
	mov    0x1a4(%rdi),%ecx
	cmp    %eax,%ecx
	ja     1a9e0 <decompress_onepass+0x170>
	mov    0x240(%rdi),%rax
	mov    0x18(%rax),%rax
	callq  *%rax
	mov    $0x4,%eax
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	leaveq 
	retq   
	mov    -0x88(%rbp),%rax
	mov    %eax,0x2c(%r15)
	mov    %ebx,0x28(%r15)
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	xor    %eax,%eax
	leaveq 
	retq   
	mov    0x18(%rax),%eax
	cmp    %ebx,%eax
	jae    1aa00 <decompress_onepass+0x190>
	mov    %r12,%rdx
	mov    %r14,%rdi
	jmpq   1a91a <decompress_onepass+0xaa>
	mov    0x28(%r15),%ebx
	jmpq   1a924 <decompress_onepass+0xb4>
	callq  1a810 <start_iMCU_row>
	mov    $0x3,%eax
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	leaveq 
	retq   
	mov    %r12,%rdx
	mov    %r14,%rdi
	xor    %r15d,%r15d
	mov    -0x68(%rbp),%r8
	mov    -0x50(%rbp),%r9
	mov    -0x88(%rbp),%rsi
	mov    %r15,%r10
	mov    %r10,%r12
	jmp    1aa42 <decompress_onepass+0x1d2>
	movslq %r10d,%rax
	mov    0x1b8(%rdi,%rax,8),%r14
	movslq 0x30(%r14),%rax
	test   %eax,%eax
	jne    1aa57 <decompress_onepass+0x1e7>
	add    0x3c(%r14),%r12d
	add    $0x1,%r10d
	mov    -0x90(%rbp),%rbx
	movslq 0x1b0(%rdi),%rax
	cmp    %r10d,%eax
	jg     1aa20 <decompress_onepass+0x1b0>
	mov    -0x78(%rbp),%r15
	jmpq   1a91a <decompress_onepass+0xaa>
	cmp    %r13d,%ebx
	mov    0x258(%rdi),%rax
	movslq 0x4(%r14),%rcx
	mov    0x8(%rax,%rcx,8),%rax
	mov    %rax,-0x40(%rbp)
	jb     1aa76 <decompress_onepass+0x206>
	movslq 0x44(%r14),%r13
	jmp    1aa7a <decompress_onepass+0x20a>
	movslq 0x34(%r14),%r13
	mov    %rsi,%rcx
	imul   0x24(%r14),%ecx
	movslq %ecx,%rcx
	shl    $0x3,%rcx
	movslq 0x4(%r14),%r11
	add    (%r9,%r11,8),%rcx
	mov    0x220(%rdi),%r9
	mov    0x14(%r9),%r9d
	sub    %r9d,%ebx
	imul   0x40(%r14),%ebx
	mov    %r10,-0x98(%rbp)
	mov    %rbx,-0x58(%rbp)
	mov    %r15,%r9
	jmp    1ab0a <decompress_onepass+0x29a>
	lea    (%r15,%r12,1),%esi
	movslq %esi,%rsi
	mov    (%rdx,%rsi,8),%rdx
	mov    %r14,%rsi
	mov    %rbx,%r8
	callq  *%rax
	add    0x24(%r14),%ebx
	add    $0x1,%r15d
	mov    -0x40(%rbp),%rax
	mov    -0x48(%rbp),%rcx
	mov    -0x80(%rbp),%rdi
	mov    -0x70(%rbp),%rdx
	cmp    %r13d,%r15d
	jl     1aab4 <decompress_onepass+0x244>
	mov    -0x58(%rbp),%rbx
	mov    -0x38(%rbp),%r9
	mov    -0x60(%rbp),%rsi
	mov    -0x68(%rbp),%r8
	add    0x34(%r14),%r12d
	movslq 0x24(%r14),%r10
	lea    (%rcx,%r10,8),%rcx
	add    $0x1,%esi
	add    $0x1,%r9d
	xor    %r15d,%r15d
	mov    %rcx,-0x48(%rbp)
	movslq 0x38(%r14),%r10
	cmp    %r9d,%r10d
	jg     1ab32 <decompress_onepass+0x2c2>
	mov    -0x98(%rbp),%r10
	mov    -0x30(%rbp),%r13
	mov    -0x50(%rbp),%r9
	mov    -0x88(%rbp),%rsi
	jmpq   1aa37 <decompress_onepass+0x1c7>
	mov    0xb0(%rdi),%r10d
	cmp    %r8d,%r10d
	jae    1ab48 <decompress_onepass+0x2d8>
	mov    %rsi,-0x60(%rbp)
	mov    %r9,-0x38(%rbp)
	jmp    1aadf <decompress_onepass+0x26f>
	cmp    0x48(%r14),%esi
	jge    1aaf4 <decompress_onepass+0x284>
	mov    %rsi,-0x60(%rbp)
	mov    %r9,-0x38(%rbp)
	jmp    1aadf <decompress_onepass+0x26f>
	nopl   0x0(%rax,%rax,1)

001ab60 <decompress_data>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x80,%rsp
	mov    %r14,-0x20(%rbp)
	mov    %r15,-0x28(%rbp)
	mov    %rsi,-0x58(%rbp)
	mov    0x230(%rdi),%rax
	mov    %rax,-0x68(%rbp)
	mov    0x1a4(%rdi),%eax
	mov    %rax,-0x78(%rbp)
	mov    %rbx,%rcx
	mov    %rdi,%rbx
	mov    %r13,%rdx
	xor    %r14d,%r14d
	jmp    1aba0 <decompress_data+0x40>
	mov    %r15,%rcx
	mov    %r13,%rdx
	movslq 0xb4(%rbx),%rsi
	movslq 0xac(%rbx),%rax
	cmp    %eax,%esi
	jle    1abdb <decompress_data+0x7b>
	mov    0x240(%rbx),%rax
	mov    (%rax),%rax
	mov    %rdx,%r13
	mov    %rcx,%r15
	mov    %rbx,%rdi
	callq  *%rax
	test   %eax,%eax
	jne    1ab9a <decompress_data+0x3a>
	mov    %r14,%rax
	mov    %r15,%rbx
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	leaveq 
	retq   
	cmp    %eax,%esi
	jne    1abed <decompress_data+0x8d>
	mov    0xb8(%rbx),%eax
	cmp    0xb0(%rbx),%eax
	jae    1abb2 <decompress_data+0x52>
	mov    0x130(%rbx),%r15
	mov    -0x78(%rbp),%rax
	lea    -0x1(%rax),%r13d
	mov    %rcx,-0x8(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    %rdx,-0x18(%rbp)
	mov    %r13,-0x60(%rbp)
	mov    -0x58(%rbp),%r12
	mov    -0x68(%rbp),%rax
	mov    %r14,%r8
	jmp    1ac8e <decompress_data+0x12e>
	mov    %rbx,%rdi
	mov    %r15,%rsi
	mov    %r12,%rdx
	mov    %r14,%r8
	callq  *%r9
	add    0x24(%r15),%r14d
	add    $0x80,%r12
	add    $0x1,%r13d
	mov    -0x40(%rbp),%r9
	mov    -0x50(%rbp),%rcx
	mov    -0x38(%rbp),%r10
	mov    0x220(%rbx),%rax
	mov    0x44(%rax,%r10,4),%eax
	cmp    %r13d,%eax
	jae    1ac19 <decompress_data+0xb9>
	mov    -0x78(%rbp),%rax
	lea    0x1(%rax),%esi
	movslq 0x24(%r15),%rax
	lea    (%rcx,%rax,8),%rcx
	mov    -0x48(%rbp),%rax
	mov    -0x30(%rbp),%rdx
	xor    %r14d,%r14d
	mov    %rcx,-0x50(%rbp)
	cmp    %esi,%edx
	jg     1accf <decompress_data+0x16f>
	mov    -0x60(%rbp),%r13
	mov    -0x58(%rbp),%r12
	mov    -0x68(%rbp),%rax
	mov    -0x70(%rbp),%r8
	add    $0x1,%r8d
	add    $0x60,%r15
	movslq 0x38(%rbx),%rcx
	cmp    %r8d,%ecx
	jg     1acf2 <decompress_data+0x192>
	mov    0xb8(%rbx),%eax
	add    $0x1,%eax
	mov    %eax,0xb8(%rbx)
	mov    0x1a4(%rbx),%ecx
	cmp    %eax,%ecx
	jbe    1ad58 <decompress_data+0x1f8>
	mov    $0x3,%eax
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	leaveq 
	retq   
	mov    0x220(%rbx),%rdx
	mov    0x1c(%rdx,%r10,4),%r13d
	mov    %r13,%r12
	shl    $0x7,%r12
	movslq %esi,%rdx
	add    (%rax,%rdx,8),%r12
	mov    %rsi,-0x78(%rbp)
	jmpq   1ac43 <decompress_data+0xe3>
	movslq 0x30(%r15),%rcx
	test   %ecx,%ecx
	je     1ac86 <decompress_data+0x126>
	movslq %r8d,%r9
	mov    %r9,-0x38(%rbp)
	mov    0x90(%rax,%r9,8),%rsi
	mov    0xc(%r15),%ecx
	mov    %rcx,%rdx
	imul   0xb8(%rbx),%edx
	mov    0x8(%rbx),%rax
	mov    0x40(%rax),%rax
	mov    %rbx,%rdi
	mov    %r8,-0x70(%rbp)
	mov    %r14,%r8
	mov    %r9,%r14
	callq  *%rax
	mov    %rax,-0x48(%rbp)
	mov    0xb8(%rbx),%ecx
	cmp    %r13d,%ecx
	jb     1ad73 <decompress_data+0x213>
	mov    %rax,%rsi
	mov    %r14,%r10
	mov    0x20(%r15),%eax
	mov    0xc(%r15),%ecx
	xor    %edx,%edx
	div    %ecx
	test   %edx,%edx
	je     1ad9d <decompress_data+0x23d>
	mov    %rsi,%rax
	jmp    1ad7a <decompress_data+0x21a>
	mov    $0x4,%eax
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	leaveq 
	retq   
	movslq 0xc(%r15),%rdx
	mov    %r14,%r10
	mov    %rdx,-0x30(%rbp)
	mov    0x258(%rbx),%rcx
	mov    0x8(%rcx,%r10,8),%r9
	mov    %r9,-0x40(%rbp)
	mov    (%r12,%r10,8),%rcx
	xor    %r14d,%r14d
	mov    %r14,%rsi
	jmpq   1ac6e <decompress_data+0x10e>
	movslq 0xc(%r15),%rdx
	mov    %rsi,%rax
	jmp    1ad7a <decompress_data+0x21a>
	nopw   %cs:0x0(%rax,%rax,1)

001adb0 <smoothing_ok>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    0x230(%rdi),%rcx
	xor    %eax,%eax
	movslq 0x138(%rdi),%rdx
	test   %edx,%edx
	jne    1adce <smoothing_ok+0x1e>
	leaveq 
	retq   
	mov    0xc0(%rdi),%rdx
	test   %rdx,%rdx
	jne    1addc <smoothing_ok+0x2c>
	leaveq 
	retq   
	mov    $0x1,%r9d
	mov    0xe0(%rcx),%rdx
	test   %rdx,%rdx
	je     1adf3 <smoothing_ok+0x43>
	mov    %rax,%r11
	jmp    1ae51 <smoothing_ok+0xa1>
	mov    0x8(%rdi),%rdx
	mov    (%rdx),%r8
	movslq 0x38(%rdi),%rdx
	lea    (%rdx,%rdx,2),%rdx
	shl    $0x3,%rdx
	mov    %rdi,%r10
	mov    %r9,%rsi
	mov    %r12,-0x8(%rbp)
	mov    %r13,-0x10(%rbp)
	mov    %r14,-0x18(%rbp)
	mov    %r15,-0x20(%rbp)
	mov    %rax,%r12
	mov    %r9,%r13
	mov    %rdi,%r14
	mov    %r10,%rdi
	mov    %rcx,%r15
	callq  *%r8
	mov    %rax,0xe0(%r15)
	mov    %r15,%rcx
	mov    %r14,%rdi
	mov    %r13,%r9
	mov    %r12,%r11
	mov    -0x20(%rbp),%r15
	mov    -0x18(%rbp),%r14
	mov    -0x10(%rbp),%r13
	mov    -0x8(%rbp),%r12
	mov    0xe0(%rcx),%rsi
	mov    0x130(%rdi),%rdx
	add    $0x50,%rdx
	mov    %r14,-0x18(%rbp)
	mov    %r15,-0x20(%rbp)
	mov    %r11,%rax
	mov    %rax,%r10
	cmp    0x38(%rdi),%r10d
	jl     1ae81 <smoothing_ok+0xd1>
	mov    -0x20(%rbp),%r15
	mov    -0x18(%rbp),%r14
	leaveq 
	retq   
	mov    (%rdx),%r8
	test   %r8,%r8
	je     1aee1 <smoothing_ok+0x131>
	movzwl (%r8),%ecx
	test   %cx,%cx
	je     1aeee <smoothing_ok+0x13e>
	movzwl 0x2(%r8),%ecx
	test   %cx,%cx
	je     1aefb <smoothing_ok+0x14b>
	movzwl 0x10(%r8),%ecx
	test   %cx,%cx
	je     1af08 <smoothing_ok+0x158>
	movzwl 0x20(%r8),%ecx
	test   %cx,%cx
	je     1af15 <smoothing_ok+0x165>
	movzwl 0x12(%r8),%ecx
	test   %cx,%cx
	je     1af22 <smoothing_ok+0x172>
	movzwl 0x4(%r8),%ecx
	test   %cx,%cx
	je     1af2f <smoothing_ok+0x17f>
	movslq %r10d,%r8
	shl    $0x8,%r8
	add    0xc0(%rdi),%r8
	movslq (%r8),%rcx
	test   %ecx,%ecx
	js     1af3c <smoothing_ok+0x18c>
	mov    %r9,%rcx
	jmpq   1af63 <smoothing_ok+0x1b3>
	mov    %r11,%rax
	mov    -0x20(%rbp),%r15
	mov    -0x18(%rbp),%r14
	leaveq 
	retq   
	mov    %r11,%rax
	mov    -0x20(%rbp),%r15
	mov    -0x18(%rbp),%r14
	leaveq 
	retq   
	mov    %r11,%rax
	mov    -0x20(%rbp),%r15
	mov    -0x18(%rbp),%r14
	leaveq 
	retq   
	mov    %r11,%rax
	mov    -0x20(%rbp),%r15
	mov    -0x18(%rbp),%r14
	leaveq 
	retq   
	mov    %r11,%rax
	mov    -0x20(%rbp),%r15
	mov    -0x18(%rbp),%r14
	leaveq 
	retq   
	mov    %r11,%rax
	mov    -0x20(%rbp),%r15
	mov    -0x18(%rbp),%r14
	leaveq 
	retq   
	mov    %r11,%rax
	mov    -0x20(%rbp),%r15
	mov    -0x18(%rbp),%r14
	leaveq 
	retq   
	mov    %r11,%rax
	mov    -0x20(%rbp),%r15
	mov    -0x18(%rbp),%r14
	leaveq 
	retq   
	movslq %ecx,%r14
	movslq (%r8,%r14,4),%r15
	mov    %r15d,(%rsi,%r14,4)
	movslq (%r8,%r14,4),%r14
	test   %r14d,%r14d
	je     1af60 <smoothing_ok+0x1b0>
	mov    %r9,%rax
	add    $0x1,%ecx
	cmp    $0x5,%ecx
	jle    1af49 <smoothing_ok+0x199>
	add    $0x60,%rdx
	add    $0x1,%r10d
	add    $0x18,%rsi
	jmpq   1ae71 <smoothing_ok+0xc1>
	nopl   0x0(%rax)

001af80 <decompress_smooth_data>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x180,%rsp
	mov    %r13,-0x18(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %r15,-0x28(%rbp)
	mov    %rsi,-0x160(%rbp)
	mov    %rdi,-0x170(%rbp)
	mov    0x1a4(%rdi),%eax
	mov    %rax,-0x180(%rbp)
	mov    0x230(%rdi),%rax
	mov    %rax,-0x178(%rbp)
	mov    0x88(%rax),%rax
	mov    %rax,-0xd8(%rbp)
	xor    %r13d,%r13d
	mov    %r13,-0x128(%rbp)
	mov    %r12,%rcx
	mov    %rbx,%r12
	mov    %rdi,%r14
	mov    $0x1,%ebx
	mov    %rbx,-0x120(%rbp)
	jmp    1aff2 <decompress_smooth_data+0x72>
	mov    %r15,%rcx
	movslq 0xb4(%r14),%rsi
	movslq 0xac(%r14),%rdx
	cmp    %edx,%esi
	jl     1b057 <decompress_smooth_data+0xd7>
	mov    0x240(%r14),%rax
	movslq 0x24(%rax),%rax
	test   %eax,%eax
	jne    1b057 <decompress_smooth_data+0xd7>
	cmp    %edx,%esi
	je     1b086 <decompress_smooth_data+0x106>
	mov    0x240(%r14),%rax
	mov    (%rax),%rax
	mov    %rcx,%r15
	mov    %r14,%rdi
	callq  *%rax
	test   %eax,%eax
	jne    1afef <decompress_smooth_data+0x6f>
	mov    %r13,%rax
	mov    %r12,%rbx
	mov    %r15,%r12
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	leaveq 
	retq   
	mov    %rbx,%rax
	add    0xb8(%r14),%eax
	cmp    0xb0(%r14),%eax
	jae    1b017 <decompress_smooth_data+0x97>
	mov    0x130(%r14),%r15
	mov    -0x180(%rbp),%rax
	add    $0xffffffff,%eax
	mov    %rax,-0x168(%rbp)
	mov    %r12,-0x8(%rbp)
	mov    %rcx,-0x10(%rbp)
	mov    -0x178(%rbp),%r12
	mov    %r13,%r9
	jmpq   1b237 <decompress_smooth_data+0x2b7>
	movslq 0x20c(%r14),%rax
	test   %eax,%eax
	je     1b044 <decompress_smooth_data+0xc4>
	mov    %r13,%rax
	jmp    1b047 <decompress_smooth_data+0xc7>
	movswq (%r12),%r13
	movswq (%rcx),%rsi
	movswq (%rax),%r11
	mov    %r13,-0x58(%rbp)
	mov    %r11,-0xa8(%rbp)
	mov    %rsi,-0x148(%rbp)
	mov    -0xc0(%rbp),%r10
	movslq 0x4(%r10),%rcx
	test   %ecx,%ecx
	jne    1b286 <decompress_smooth_data+0x306>
	mov    -0x150(%rbp),%rdi
	mov    -0xe0(%rbp),%r8
	mov    -0xd8(%rbp),%r9
	movslq 0x8(%r10),%rcx
	test   %ecx,%ecx
	jne    1b2ae <decompress_smooth_data+0x32e>
	mov    -0xa0(%rbp),%r14
	mov    -0xb8(%rbp),%r15
	movslq 0xc(%r10),%rcx
	test   %ecx,%ecx
	jne    1b2cf <decompress_smooth_data+0x34f>
	mov    -0xf8(%rbp),%r14
	movslq 0x10(%r10),%rcx
	test   %ecx,%ecx
	jne    1b2e9 <decompress_smooth_data+0x369>
	movslq 0x14(%r10),%rcx
	test   %ecx,%ecx
	jne    1b344 <decompress_smooth_data+0x3c4>
	mov    %r9,%rdx
	mov    -0x170(%rbp),%r14
	mov    %r14,%rdi
	mov    -0x180(%rbp),%r15
	mov    %r15,%rsi
	mov    -0x38(%rbp),%rcx
	mov    -0x40(%rbp),%r13
	mov    %r13,%r8
	mov    -0x30(%rbp),%rax
	callq  *%rax
	add    0x24(%r15),%r13d
	mov    %r13,-0x40(%rbp)
	add    $0x1,%ebx
	mov    -0x148(%rbp),%rcx
	mov    -0xa8(%rbp),%rdi
	mov    -0x58(%rbp),%rdx
	mov    -0xe8(%rbp),%r13
	mov    -0xb0(%rbp),%rax
	mov    -0xf0(%rbp),%r15
	mov    -0xf8(%rbp),%r8
	mov    -0x108(%rbp),%r9
	mov    -0xd8(%rbp),%rsi
	pushq  -0xa0(%rbp)
	pushq  -0xb8(%rbp)
	popq   -0x88(%rbp)
	popq   -0x80(%rbp)
	mov    %rdi,-0xb8(%rbp)
	mov    %rdx,-0xa0(%rbp)
	mov    0x220(%r14),%rdx
	mov    0x44(%rdx,%r9,4),%edx
	cmp    %ebx,%edx
	jae    1b394 <decompress_smooth_data+0x414>
	mov    -0x180(%rbp),%r15
	movslq 0x24(%r15),%rcx
	mov    -0x38(%rbp),%rax
	lea    (%rax,%rcx,8),%rax
	mov    %rax,-0x38(%rbp)
	mov    -0x140(%rbp),%r10
	mov    -0x100(%rbp),%rax
	mov    -0x110(%rbp),%r8
	mov    -0x130(%rbp),%rdi
	mov    -0x118(%rbp),%rcx
	mov    -0x138(%rbp),%rdx
	xor    %r13d,%r13d
	mov    $0x1,%ebx
	cmp    %r10d,%edx
	jg     1b3f8 <decompress_smooth_data+0x478>
	mov    -0x158(%rbp),%r9
	mov    -0x178(%rbp),%r12
	mov    -0x168(%rbp),%rax
	add    $0x1,%r9d
	add    $0x60,%r15
	mov    %r15,-0x180(%rbp)
	movslq 0x38(%r14),%rcx
	cmp    %r9d,%ecx
	jg     1b428 <decompress_smooth_data+0x4a8>
	mov    0xb8(%r14),%eax
	add    $0x1,%eax
	mov    %eax,0xb8(%r14)
	mov    0x1a4(%r14),%ecx
	cmp    %eax,%ecx
	jbe    1b45f <decompress_smooth_data+0x4df>
	mov    $0x3,%eax
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	leaveq 
	retq   
	mov    -0xd8(%rbp),%r9
	movswq 0x2(%r9),%rax
	test   %ax,%ax
	je     1b47a <decompress_smooth_data+0x4fa>
	mov    -0x150(%rbp),%rdi
	mov    -0xe0(%rbp),%r8
	jmpq   1b0dd <decompress_smooth_data+0x15d>
	movswq 0x10(%r9),%rax
	test   %ax,%ax
	je     1b4cf <decompress_smooth_data+0x54f>
	mov    -0xa0(%rbp),%r14
	mov    -0xb8(%rbp),%r15
	jmpq   1b0f7 <decompress_smooth_data+0x177>
	movswq 0x20(%r9),%rax
	test   %ax,%ax
	je     1b52d <decompress_smooth_data+0x5ad>
	mov    -0xf8(%rbp),%r14
	jmpq   1b10a <decompress_smooth_data+0x18a>
	movswq 0x12(%r9),%rax
	test   %ax,%ax
	jne    1b116 <decompress_smooth_data+0x196>
	mov    -0x88(%rbp),%rax
	lea    0x0(%r13,%rax,1),%edx
	mov    -0x80(%rbp),%rax
	sub    %edx,%eax
	add    %r11d,%eax
	movslq %eax,%rax
	imul   %rdi,%rax
	lea    (%rax,%rax,4),%rdx
	test   %rdx,%rdx
	jns    1b57c <decompress_smooth_data+0x5fc>
	mov    -0x78(%rbp),%rax
	sub    %rdx,%rax
	cqto   
	mov    -0x70(%rbp),%r11
	idiv   %r11
	test   %ecx,%ecx
	jg     1b5ab <decompress_smooth_data+0x62b>
	neg    %eax
	mov    %ax,0x12(%r9)
	jmpq   1b116 <decompress_smooth_data+0x196>
	movswq 0x4(%r9),%rax
	test   %ax,%ax
	jne    1b122 <decompress_smooth_data+0x1a2>
	lea    (%rsi,%r8,1),%eax
	lea    (%r14,%r14,1),%edx
	sub    %edx,%eax
	movslq %eax,%rax
	imul   %rax,%rdi
	lea    (%rdi,%rdi,8),%rdx
	test   %rdx,%rdx
	jns    1b5c2 <decompress_smooth_data+0x642>
	mov    -0x68(%rbp),%rax
	sub    %rdx,%rax
	cqto   
	mov    -0x60(%rbp),%rsi
	idiv   %rsi
	test   %ecx,%ecx
	jg     1b5f1 <decompress_smooth_data+0x671>
	neg    %eax
	mov    %ax,0x4(%r9)
	jmpq   1b122 <decompress_smooth_data+0x1a2>
	mov    %r13,%rdi
	mov    $0x1,%edx
	mov    %rcx,-0xf8(%rbp)
	mov    %r8,-0xe0(%rbp)
	mov    %rax,%r14
	callq  4470 <jcopy_block_row@plt>
	add    $0x80,%r12
	lea    0x80(%r13),%rcx
	mov    %rcx,-0xe8(%rbp)
	lea    0x80(%r14),%rax
	mov    %rax,-0xb0(%rbp)
	cmp    %r15d,%ebx
	jb     1b096 <decompress_smooth_data+0x116>
	mov    -0xf8(%rbp),%rsi
	mov    -0xa0(%rbp),%r13
	mov    -0xb8(%rbp),%r11
	jmpq   1b0a3 <decompress_smooth_data+0x123>
	mov    0x220(%r14),%rdx
	mov    0x1c(%rdx,%r9,4),%r13d
	shl    $0x7,%r13
	movslq %r10d,%rdx
	add    (%rax,%rdx,8),%r13
	test   %edi,%edi
	jle    1b608 <decompress_smooth_data+0x688>
	test   %r10d,%r10d
	jne    1b608 <decompress_smooth_data+0x688>
	mov    %r13,%r12
	jmpq   1b613 <decompress_smooth_data+0x693>
	movslq 0x30(%r15),%rcx
	test   %ecx,%ecx
	je     1b22f <decompress_smooth_data+0x2af>
	mov    0xb8(%r14),%ecx
	cmp    %eax,%ecx
	jb     1b637 <decompress_smooth_data+0x6b7>
	mov    0x20(%r15),%eax
	mov    0xc(%r15),%ecx
	xor    %edx,%edx
	div    %ecx
	test   %edx,%edx
	je     1b69d <decompress_smooth_data+0x71d>
	mov    %rdx,%rcx
	jmpq   1b641 <decompress_smooth_data+0x6c1>
	mov    $0x4,%eax
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	leaveq 
	retq   
	mov    -0xe0(%rbp),%r8
	mov    %r8,%rax
	sub    %esi,%eax
	movslq %eax,%rax
	mov    -0x150(%rbp),%rdi
	imul   %rdi,%rax
	lea    (%rax,%rax,8),%rdx
	shl    $0x2,%rdx
	test   %rdx,%rdx
	jns    1b6a6 <decompress_smooth_data+0x726>
	mov    -0xd0(%rbp),%rax
	sub    %rdx,%rax
	cqto   
	mov    -0xc8(%rbp),%r14
	idiv   %r14
	test   %ecx,%ecx
	jg     1b6db <decompress_smooth_data+0x75b>
	neg    %eax
	mov    %ax,0x2(%r9)
	jmpq   1b0dd <decompress_smooth_data+0x15d>
	mov    -0xa0(%rbp),%r14
	mov    -0xb8(%rbp),%r15
	mov    %r14,%rax
	sub    %r15d,%eax
	movslq %eax,%rax
	imul   %rdi,%rax
	lea    (%rax,%rax,8),%rdx
	shl    $0x2,%rdx
	test   %rdx,%rdx
	jns    1b6f2 <decompress_smooth_data+0x772>
	mov    -0x50(%rbp),%rax
	sub    %rdx,%rax
	mov    %r12,-0xe0(%rbp)
	cqto   
	mov    -0x48(%rbp),%r12
	idiv   %r12
	test   %ecx,%ecx
	jg     1b728 <decompress_smooth_data+0x7a8>
	neg    %eax
	mov    %ax,0x10(%r9)
	mov    -0xe0(%rbp),%r12
	jmpq   1b0f7 <decompress_smooth_data+0x177>
	lea    (%r15,%r14,1),%eax
	mov    -0xf8(%rbp),%r14
	lea    (%r14,%r14,1),%edx
	sub    %edx,%eax
	movslq %eax,%rax
	imul   %rdi,%rax
	lea    (%rax,%rax,8),%rdx
	test   %rdx,%rdx
	jns    1b73f <decompress_smooth_data+0x7bf>
	mov    -0x98(%rbp),%rax
	sub    %rdx,%rax
	cqto   
	mov    -0x90(%rbp),%r15
	idiv   %r15
	test   %ecx,%ecx
	jg     1b774 <decompress_smooth_data+0x7f4>
	neg    %eax
	mov    %ax,0x20(%r9)
	jmpq   1b10a <decompress_smooth_data+0x18a>
	mov    -0x78(%rbp),%rax
	add    %rdx,%rax
	cqto   
	mov    -0x70(%rbp),%r11
	idiv   %r11
	test   %ecx,%ecx
	jle    1b33a <decompress_smooth_data+0x3ba>
	mov    $0x1,%edx
	shl    %cl,%edx
	cmp    %eax,%edx
	jg     1b33a <decompress_smooth_data+0x3ba>
	lea    -0x1(%rdx),%eax
	jmpq   1b33a <decompress_smooth_data+0x3ba>
	mov    $0x1,%edx
	shl    %cl,%edx
	cmp    %eax,%edx
	jg     1b338 <decompress_smooth_data+0x3b8>
	lea    -0x1(%rdx),%eax
	jmpq   1b338 <decompress_smooth_data+0x3b8>
	mov    -0x68(%rbp),%rax
	add    %rdx,%rax
	cqto   
	mov    -0x60(%rbp),%rsi
	idiv   %rsi
	test   %ecx,%ecx
	jle    1b38a <decompress_smooth_data+0x40a>
	mov    $0x1,%edx
	shl    %cl,%edx
	cmp    %eax,%edx
	jg     1b38a <decompress_smooth_data+0x40a>
	lea    -0x1(%rdx),%eax
	jmpq   1b38a <decompress_smooth_data+0x40a>
	mov    $0x1,%edx
	shl    %cl,%edx
	cmp    %eax,%edx
	jg     1b388 <decompress_smooth_data+0x408>
	lea    -0x1(%rdx),%eax
	jmpq   1b388 <decompress_smooth_data+0x408>
	lea    -0x1(%r10),%edx
	movslq %edx,%rdx
	mov    (%rax,%rdx,8),%r12
	test   %ecx,%ecx
	lea    0x1(%r10),%ecx
	mov    %rcx,-0x140(%rbp)
	jle    1b78b <decompress_smooth_data+0x80b>
	cmp    %r8d,%r10d
	jne    1b78b <decompress_smooth_data+0x80b>
	mov    %r13,%rax
	jmpq   1b792 <decompress_smooth_data+0x812>
	movslq 0xc(%r15),%rdx
	lea    (%rdx,%rdx,1),%ecx
	mov    %r13,%rbx
	mov    %rdx,-0x138(%rbp)
	mov    %rbx,-0x118(%rbp)
	movslq %r9d,%rbx
	mov    %rbx,-0x108(%rbp)
	mov    0xb8(%r14),%eax
	test   %eax,%eax
	jne    1b7d7 <decompress_smooth_data+0x857>
	mov    0x90(%r12,%rbx,8),%rsi
	mov    0x8(%r14),%rax
	mov    0x40(%rax),%rax
	mov    %r13,%rdx
	mov    %rbx,%r13
	mov    %r9,%rbx
	mov    %rdx,%r8
	mov    %r14,%rdi
	callq  *%rax
	mov    %r13,%r9
	pushq  -0x120(%rbp)
	popq   -0x130(%rbp)
	jmpq   1b81b <decompress_smooth_data+0x89b>
	movslq 0xc(%r15),%rdx
	mov    %rdx,%rcx
	jmp    1b641 <decompress_smooth_data+0x6c1>
	mov    -0xd0(%rbp),%rax
	add    %rdx,%rax
	cqto   
	mov    -0xc8(%rbp),%r14
	idiv   %r14
	test   %ecx,%ecx
	jle    1b4c5 <decompress_smooth_data+0x545>
	mov    $0x1,%edx
	shl    %cl,%edx
	cmp    %eax,%edx
	jg     1b4c5 <decompress_smooth_data+0x545>
	lea    -0x1(%rdx),%eax
	jmpq   1b4c5 <decompress_smooth_data+0x545>
	mov    $0x1,%edx
	shl    %cl,%edx
	cmp    %eax,%edx
	jg     1b4c3 <decompress_smooth_data+0x543>
	lea    -0x1(%rdx),%eax
	jmpq   1b4c3 <decompress_smooth_data+0x543>
	mov    -0x50(%rbp),%rax
	add    %rdx,%rax
	mov    %r12,-0xe0(%rbp)
	cqto   
	mov    -0x48(%rbp),%r12
	idiv   %r12
	test   %ecx,%ecx
	jle    1b51c <decompress_smooth_data+0x59c>
	mov    $0x1,%edx
	shl    %cl,%edx
	cmp    %eax,%edx
	jg     1b51c <decompress_smooth_data+0x59c>
	lea    -0x1(%rdx),%eax
	jmpq   1b51c <decompress_smooth_data+0x59c>
	mov    $0x1,%edx
	shl    %cl,%edx
	cmp    %eax,%edx
	jg     1b51a <decompress_smooth_data+0x59a>
	lea    -0x1(%rdx),%eax
	jmpq   1b51a <decompress_smooth_data+0x59a>
	mov    -0x98(%rbp),%rax
	add    %rdx,%rax
	cqto   
	mov    -0x90(%rbp),%r15
	idiv   %r15
	test   %ecx,%ecx
	jle    1b572 <decompress_smooth_data+0x5f2>
	mov    $0x1,%edx
	shl    %cl,%edx
	cmp    %eax,%edx
	jg     1b572 <decompress_smooth_data+0x5f2>
	lea    -0x1(%rdx),%eax
	jmpq   1b572 <decompress_smooth_data+0x5f2>
	mov    $0x1,%edx
	shl    %cl,%edx
	cmp    %eax,%edx
	jg     1b570 <decompress_smooth_data+0x5f0>
	lea    -0x1(%rdx),%eax
	jmpq   1b570 <decompress_smooth_data+0x5f0>
	movslq %ecx,%rcx
	mov    (%rax,%rcx,8),%rax
	movswq (%r12),%rdx
	mov    %rdx,-0x80(%rbp)
	movswq 0x0(%r13),%rcx
	movswq (%rax),%rdi
	mov    %rdi,-0x88(%rbp)
	mov    0x220(%r14),%rbx
	mov    0x1c(%rbx,%r9,4),%ebx
	mov    0x1c(%r15),%r15d
	add    $0xffffffff,%r15d
	mov    %r15,-0xf0(%rbp)
	mov    %rcx,%r8
	pushq  -0x128(%rbp)
	popq   -0x40(%rbp)
	jmpq   1b1a6 <decompress_smooth_data+0x226>
	mov    0x90(%r12,%rbx,8),%rsi
	movslq 0xc(%r15),%rdi
	add    $0xffffffff,%eax
	mov    %rdi,%rdx
	imul   %eax,%edx
	add    %edi,%ecx
	mov    0x8(%r14),%rax
	mov    0x40(%rax),%rax
	mov    %r13,%r8
	mov    %rbx,%r13
	mov    %r9,%rbx
	mov    %r14,%rdi
	callq  *%rax
	movslq 0xc(%r15),%rcx
	lea    (%rax,%rcx,8),%rax
	mov    %r13,%r9
	pushq  -0x128(%rbp)
	popq   -0x130(%rbp)
	mov    %rax,-0x100(%rbp)
	lea    (%rbx,%rbx,2),%ecx
	add    %ecx,%ecx
	movslq %ecx,%rcx
	shl    $0x2,%rcx
	add    0xe0(%r12),%rcx
	mov    %rcx,-0xc0(%rbp)
	mov    0x258(%r14),%rcx
	mov    0x8(%rcx,%r9,8),%rcx
	mov    %rcx,-0x30(%rbp)
	mov    0x50(%r15),%rsi
	movzwl (%rsi),%ecx
	mov    %rcx,-0x150(%rbp)
	mov    -0x160(%rbp),%rcx
	mov    (%rcx,%r9,8),%rcx
	mov    %rcx,-0x38(%rbp)
	movzwl 0x2(%rsi),%ecx
	mov    %rcx,%rdx
	shl    $0x7,%rdx
	mov    %rdx,-0xd0(%rbp)
	shl    $0x8,%rcx
	mov    %rcx,-0xc8(%rbp)
	movzwl 0x4(%rsi),%ecx
	mov    %rcx,%rdx
	shl    $0x7,%rdx
	mov    %rdx,-0x68(%rbp)
	shl    $0x8,%rcx
	mov    %rbx,-0x158(%rbp)
	mov    %rcx,-0x60(%rbp)
	movzwl 0x10(%rsi),%ecx
	mov    %rcx,%rdx
	shl    $0x7,%rdx
	mov    %rdx,-0x50(%rbp)
	shl    $0x8,%rcx
	mov    %rcx,-0x48(%rbp)
	movzwl 0x20(%rsi),%ecx
	mov    %rcx,%rdx
	shl    $0x7,%rdx
	mov    %rdx,-0x98(%rbp)
	shl    $0x8,%rcx
	mov    %rcx,-0x90(%rbp)
	movzwl 0x12(%rsi),%ecx
	mov    %rcx,%rdx
	shl    $0x7,%rdx
	mov    %rdx,-0x78(%rbp)
	shl    $0x8,%rcx
	mov    %rcx,-0x70(%rbp)
	mov    -0x138(%rbp),%rdx
	lea    -0x1(%rdx),%r8d
	mov    %r8,-0x110(%rbp)
	mov    -0x130(%rbp),%rdi
	mov    -0x118(%rbp),%rcx
	xor    %r13d,%r13d
	mov    $0x1,%ebx
	mov    -0xd8(%rbp),%rsi
	mov    %r13,%r10
	jmpq   1b211 <decompress_smooth_data+0x291>
	nopw   0x0(%rax,%rax,1)

001b930 <start_input_pass>:
	push   %rbp
	mov    %rsp,%rbp
	movl   $0x0,0xb0(%rdi)
	callq  1a810 <start_iMCU_row>
	leaveq 
	retq   
	data16 nopw %cs:0x0(%rax,%rax,1)

001b950 <start_output_pass>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    0x230(%rdi),%rax
	mov    0x20(%rax),%rcx
	test   %rcx,%rcx
	jne    1b974 <start_output_pass+0x24>
	movl   $0x0,0xb8(%rdi)
	leaveq 
	retq   
	movslq 0x68(%rdi),%rcx
	test   %ecx,%ecx
	jne    1b989 <start_output_pass+0x39>
	lea    -0xe23(%rip),%rcx        # 1ab60 <decompress_data>
	mov    %rcx,0x18(%rax)
	jmp    1b968 <start_output_pass+0x18>
	mov    %rdi,%rcx
	mov    %r14,-0x8(%rbp)
	mov    %r15,-0x10(%rbp)
	mov    %rax,%r14
	mov    %rdi,%r15
	mov    %rcx,%rdi
	callq  1adb0 <smoothing_ok>
	test   %eax,%eax
	jne    1b9b6 <start_output_pass+0x66>
	mov    %r14,%rax
	mov    %r15,%rdi
	mov    -0x10(%rbp),%r15
	mov    -0x8(%rbp),%r14
	jmp    1b97c <start_output_pass+0x2c>
	lea    -0xa3d(%rip),%rax        # 1af80 <decompress_smooth_data>
	mov    %rax,0x18(%r14)
	mov    %r15,%rdi
	mov    -0x10(%rbp),%r15
	mov    -0x8(%rbp),%r14
	jmp    1b968 <start_output_pass+0x18>
	xchg   %ax,%ax

001b9d0 <dummy_consume_data>:
	push   %rbp
	mov    %rsp,%rbp
	xor    %eax,%eax
	leaveq 
	retq   
	nopl   0x0(%rax,%rax,1)

001b9e0 <consume_data>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x50,%rsp
	mov    %rbx,-0x8(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %r15,-0x28(%rbp)
	mov    0x230(%rdi),%rbx
	mov    %rbx,-0x30(%rbp)
	mov    %rdi,%r12
	xor    %r13d,%r13d
	mov    $0x1,%r14d
	jmp    1ba55 <consume_data+0x75>
	movslq %r13d,%r15
	mov    0x1b8(%r12,%r15,8),%rcx
	movslq 0x4(%rcx),%rax
	mov    0x90(%rbx,%rax,8),%rsi
	mov    0xc(%rcx),%ecx
	mov    %rcx,%rdx
	imul   0xb0(%r12),%edx
	mov    0x8(%r12),%rax
	mov    0x40(%rax),%rax
	mov    %r12,%rdi
	mov    %r14,%r8
	callq  *%rax
	mov    %rax,-0x50(%rbp,%r15,8)
	add    $0x1,%r13d
	movslq 0x1b0(%r12),%rax
	cmp    %r13d,%eax
	jg     1ba15 <consume_data+0x35>
	movslq 0x2c(%rbx),%r14
	lea    0x38(%rbx),%r15
	xor    %r13d,%r13d
	jmpq   1baf3 <consume_data+0x113>
	movslq %ecx,%rdi
	mov    %rdx,(%r15,%rdi,8)
	add    $0x80,%rdx
	add    $0x1,%ecx
	add    $0x1,%esi
	movslq 0x34(%r10),%rdi
	cmp    %esi,%edi
	jg     1ba72 <consume_data+0x92>
	add    $0x1,%ebx
	movslq 0x38(%r10),%rdx
	cmp    %ebx,%edx
	jg     1bb4f <consume_data+0x16f>
	add    $0x1,%r8d
	movslq 0x1b0(%r12),%rdx
	cmp    %r8d,%edx
	jg     1bb6a <consume_data+0x18a>
	mov    0x250(%r12),%rcx
	mov    0x8(%rcx),%rcx
	mov    %rax,%rbx
	mov    %r12,%rdi
	mov    %r15,%rsi
	callq  *%rcx
	test   %eax,%eax
	je     1bb8c <consume_data+0x1ac>
	lea    0x1(%rbx),%eax
	mov    0x1d8(%r12),%ecx
	cmp    %eax,%ecx
	ja     1bbb0 <consume_data+0x1d0>
	mov    -0x30(%rbp),%rbx
	movl   $0x0,0x28(%rbx)
	add    $0x1,%r14d
	movslq 0x30(%rbx),%rax
	cmp    %r14d,%eax
	jg     1bbbb <consume_data+0x1db>
	mov    0xb0(%r12),%eax
	add    $0x1,%eax
	mov    %eax,0xb0(%r12)
	mov    0x1a4(%r12),%ecx
	cmp    %eax,%ecx
	ja     1bbc3 <consume_data+0x1e3>
	mov    0x240(%r12),%rax
	mov    0x18(%rax),%rax
	mov    %r12,%rdi
	callq  *%rax
	mov    $0x4,%eax
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	leaveq 
	retq   
	lea    (%r14,%rbx,1),%edx
	movslq %edx,%rdx
	mov    -0x50(%rbp,%r11,8),%rsi
	mov    (%rsi,%rdx,8),%rdx
	add    %r9,%rdx
	mov    %r13,%rsi
	jmpq   1ba86 <consume_data+0xa6>
	movslq %r8d,%r11
	mov    0x1b8(%r12,%r11,8),%r10
	mov    %rax,%rdx
	imul   0x34(%r10),%edx
	mov    %edx,%r9d
	shl    $0x7,%r9
	mov    %r13,%rbx
	jmpq   1ba91 <consume_data+0xb1>
	mov    -0x30(%rbp),%rax
	mov    %r14d,0x2c(%rax)
	mov    %ebx,0x28(%rax)
	mov    %r13,%rax
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	leaveq 
	retq   
	mov    %r13,%rcx
	mov    %rcx,%r8
	jmpq   1baa1 <consume_data+0xc1>
	mov    0x28(%rbx),%eax
	jmpq   1bad4 <consume_data+0xf4>
	mov    %r12,%rdi
	callq  1a810 <start_iMCU_row>
	mov    $0x3,%eax
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	leaveq 
	retq   
	nopw   %cs:0x0(%rax,%rax,1)

001bbf0 <jinit_color_deconverter>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %r15,-0x20(%rbp)
	mov    0x8(%rdi),%rax
	mov    (%rax),%rax
	mov    $0x1,%esi
	mov    $0x38,%edx
	mov    %rdi,%r15
	callq  *%rax
	mov    %rax,0x268(%r15)
	lea    0x3840(%rip),%rcx        # 1f460 <start_pass_dcolor>
	mov    %rcx,(%rax)
	mov    0x3c(%r15),%ecx
	add    $0xffffffff,%ecx
	cmp    $0x4,%ecx
	ja     1bc3f <jinit_color_deconverter+0x4f>
	lea    0x3daea(%rip),%rdx        # 59720 <mybuffer.5+0x8>
	movslq (%rdx,%rcx,4),%rcx
	add    %rdx,%rcx
	jmpq   *%rcx
	movslq 0x38(%r15),%rcx
	test   %ecx,%ecx
	jg     1bc6a <jinit_color_deconverter+0x7a>
	mov    (%r15),%rcx
	movl   $0xa,0x28(%rcx)
	mov    (%r15),%rcx
	mov    (%rcx),%rcx
	mov    %r15,%rdi
	mov    %r14,-0x18(%rbp)
	mov    %rax,%r14
	callq  *%rcx
	mov    %r14,%rax
	mov    -0x18(%rbp),%r14
	lea    0x158f(%rip),%rsi        # 1d200 <null_convert>
	mov    0x40(%r15),%edi
	lea    -0x1(%rdi),%ecx
	cmp    $0xf,%ecx
	ja     1bd67 <jinit_color_deconverter+0x177>
	lea    0x3daac(%rip),%rdx        # 59734 <mybuffer.5+0x1c>
	movslq (%rdx,%rcx,4),%rcx
	add    %rdx,%rcx
	jmpq   *%rcx
	movl   $0x4,0x90(%r15)
	mov    0x3c(%r15),%ecx
	cmp    $0x5,%ecx
	je     1be64 <jinit_color_deconverter+0x274>
	cmp    $0x4,%ecx
	je     1be79 <jinit_color_deconverter+0x289>
	mov    (%r15),%rax
	movl   $0x1b,0x28(%rax)
	mov    (%r15),%rax
	mov    (%rax),%rax
	mov    %r15,%rdi
	callq  *%rax
	jmpq   1be8e <jinit_color_deconverter+0x29e>
	movslq 0x38(%r15),%rcx
	cmp    $0x1,%ecx
	je     1bc6a <jinit_color_deconverter+0x7a>
	mov    (%r15),%rcx
	movl   $0xa,0x28(%rcx)
	mov    (%r15),%rcx
	mov    (%rcx),%rcx
	mov    %r15,%rdi
	mov    %r14,-0x10(%rbp)
	mov    %rax,%r14
	callq  *%rcx
	mov    %r14,%rax
	mov    -0x10(%rbp),%r14
	jmpq   1bc6a <jinit_color_deconverter+0x7a>
	movslq 0x38(%r15),%rcx
	cmp    $0x3,%ecx
	je     1bc6a <jinit_color_deconverter+0x7a>
	mov    (%r15),%rcx
	movl   $0xa,0x28(%rcx)
	mov    (%r15),%rcx
	mov    (%rcx),%rcx
	mov    %r15,%rdi
	mov    %r14,-0x10(%rbp)
	mov    %rax,%r14
	callq  *%rcx
	mov    %r14,%rax
	mov    -0x10(%rbp),%r14
	jmpq   1bc6a <jinit_color_deconverter+0x7a>
	movslq 0x38(%r15),%rcx
	cmp    $0x4,%ecx
	je     1bc6a <jinit_color_deconverter+0x7a>
	mov    (%r15),%rcx
	movl   $0xa,0x28(%rcx)
	mov    (%r15),%rcx
	mov    (%rcx),%rcx
	mov    %r15,%rdi
	mov    %r14,-0x18(%rbp)
	mov    %rax,%r14
	callq  *%rcx
	mov    %r14,%rax
	mov    -0x18(%rbp),%r14
	jmpq   1bc6a <jinit_color_deconverter+0x7a>
	cmp    0x3c(%r15),%edi
	je     1be7f <jinit_color_deconverter+0x28f>
	mov    (%r15),%rax
	movl   $0x1b,0x28(%rax)
	mov    (%r15),%rax
	mov    (%rax),%rax
	mov    %r15,%rdi
	callq  *%rax
	jmpq   1be8e <jinit_color_deconverter+0x29e>
	movl   $0x1,0x90(%r15)
	mov    0x3c(%r15),%ecx
	cmp    $0x1,%ecx
	je     1beae <jinit_color_deconverter+0x2be>
	cmp    $0x3,%ecx
	je     1beae <jinit_color_deconverter+0x2be>
	cmp    $0x2,%ecx
	je     1bec3 <jinit_color_deconverter+0x2d3>
	mov    (%r15),%rax
	movl   $0x1b,0x28(%rax)
	mov    (%r15),%rax
	mov    (%rax),%rax
	mov    %r15,%rdi
	callq  *%rax
	jmpq   1be8e <jinit_color_deconverter+0x29e>
	lea    0x3dae2(%rip),%rcx        # 598b8 <rgb_pixelsize>
	movslq (%rcx,%rdi,4),%rdx
	mov    %edx,0x90(%r15)
	mov    0x3c(%r15),%ecx
	cmp    $0x3,%ecx
	je     1bed8 <jinit_color_deconverter+0x2e8>
	cmp    $0x1,%ecx
	je     1bf05 <jinit_color_deconverter+0x315>
	cmp    $0x2,%ecx
	je     1bf15 <jinit_color_deconverter+0x325>
	mov    (%r15),%rax
	movl   $0x1b,0x28(%rax)
	mov    (%r15),%rax
	mov    (%rax),%rax
	mov    %r15,%rdi
	callq  *%rax
	jmp    1be8e <jinit_color_deconverter+0x29e>
	movl   $0x3,0x90(%r15)
	mov    0x70(%r15),%ecx
	test   %ecx,%ecx
	je     1bf62 <jinit_color_deconverter+0x372>
	mov    0x3c(%r15),%ecx
	cmp    $0x3,%ecx
	je     1bf9b <jinit_color_deconverter+0x3ab>
	cmp    $0x1,%ecx
	je     1bfb3 <jinit_color_deconverter+0x3c3>
	cmp    $0x2,%ecx
	je     1bfc3 <jinit_color_deconverter+0x3d3>
	mov    (%r15),%rax
	movl   $0x1b,0x28(%rax)
	mov    (%r15),%rax
	mov    (%rax),%rax
	mov    %r15,%rdi
	callq  *%rax
	jmp    1be8e <jinit_color_deconverter+0x29e>
	lea    0x1605(%rip),%rcx        # 1d470 <ycck_cmyk_convert>
	mov    %rcx,0x8(%rax)
	mov    %r15,%rdi
	callq  1cf20 <build_ycc_rgb_table>
	jmp    1be8e <jinit_color_deconverter+0x29e>
	mov    %rsi,0x8(%rax)
	jmp    1be8e <jinit_color_deconverter+0x29e>
	movslq 0x38(%r15),%rcx
	mov    %ecx,0x90(%r15)
	mov    %rsi,0x8(%rax)
	movslq 0x6c(%r15),%rax
	test   %eax,%eax
	jne    1bfd3 <jinit_color_deconverter+0x3e3>
	movslq 0x90(%r15),%rax
	mov    %eax,0x94(%r15)
	mov    -0x20(%rbp),%r15
	leaveq 
	retq   
	lea    0x14eb(%rip),%rcx        # 1d3a0 <grayscale_convert>
	mov    %rcx,0x8(%rax)
	mov    $0x1,%eax
	jmpq   1c001 <jinit_color_deconverter+0x411>
	lea    0x1276(%rip),%rcx        # 1d140 <rgb_gray_convert>
	mov    %rcx,0x8(%rax)
	mov    %r15,%rdi
	callq  1d090 <build_rgb_y_table>
	jmp    1be8e <jinit_color_deconverter+0x29e>
	mov    %r14,-0x8(%rbp)
	mov    %rax,%r14
	callq  3d5f0 <jsimd_can_ycc_rgb>
	test   %eax,%eax
	jne    1c00e <jinit_color_deconverter+0x41e>
	lea    0x114d(%rip),%rax        # 1d040 <ycc_rgb_convert>
	mov    %rax,0x8(%r14)
	mov    %r15,%rdi
	callq  1cf20 <build_ycc_rgb_table>
	mov    -0x8(%rbp),%r14
	jmp    1be8e <jinit_color_deconverter+0x29e>
	lea    0x14c4(%rip),%rcx        # 1d3d0 <gray_rgb_convert>
	mov    %rcx,0x8(%rax)
	jmpq   1be8e <jinit_color_deconverter+0x29e>
	lea    0x3d8d0(%rip),%rcx        # 597ec <rgb_red>
	movslq (%rcx,%rdi,4),%rcx
	test   %ecx,%ecx
	jne    1c022 <jinit_color_deconverter+0x432>
	lea    0x3d901(%rip),%rcx        # 59830 <rgb_green>
	movslq (%rcx,%rdi,4),%rcx
	cmp    $0x1,%ecx
	jne    1c022 <jinit_color_deconverter+0x432>
	lea    0x3d931(%rip),%rcx        # 59874 <rgb_blue>
	movslq (%rcx,%rdi,4),%rcx
	cmp    $0x2,%ecx
	jne    1c022 <jinit_color_deconverter+0x432>
	cmp    $0x3,%edx
	jne    1c022 <jinit_color_deconverter+0x432>
	mov    %rsi,0x8(%rax)
	jmpq   1be8e <jinit_color_deconverter+0x29e>
	mov    0x3c(%r15),%ecx
	cmp    $0x3,%ecx
	je     1c032 <jinit_color_deconverter+0x442>
	cmp    $0x1,%ecx
	je     1c05e <jinit_color_deconverter+0x46e>
	cmp    $0x2,%ecx
	je     1c06e <jinit_color_deconverter+0x47e>
	mov    (%r15),%rax
	movl   $0x1b,0x28(%rax)
	mov    (%r15),%rax
	mov    (%rax),%rax
	mov    %r15,%rdi
	callq  *%rax
	jmpq   1be8e <jinit_color_deconverter+0x29e>
	lea    0x31ee(%rip),%rcx        # 1f190 <ycc_rgb565D_convert>
	mov    %rcx,0x8(%rax)
	mov    %r15,%rdi
	callq  1cf20 <build_ycc_rgb_table>
	jmpq   1be8e <jinit_color_deconverter+0x29e>
	lea    0x3416(%rip),%rcx        # 1f3d0 <gray_rgb565D_convert>
	mov    %rcx,0x8(%rax)
	jmpq   1be8e <jinit_color_deconverter+0x29e>
	lea    0x32e6(%rip),%rcx        # 1f2b0 <rgb_rgb565D_convert>
	mov    %rcx,0x8(%rax)
	jmpq   1be8e <jinit_color_deconverter+0x29e>
	movl   $0x1,0x94(%r15)
	mov    -0x20(%rbp),%r15
	leaveq 
	retq   
	mov    0x130(%r15),%rdx
	movslq %eax,%rcx
	lea    (%rcx,%rcx,2),%rcx
	shl    $0x5,%rcx
	movl   $0x0,0x30(%rdx,%rcx,1)
	add    $0x1,%eax
	movslq 0x38(%r15),%rcx
	cmp    %eax,%ecx
	jg     1bfe4 <jinit_color_deconverter+0x3f4>
	jmpq   1be8e <jinit_color_deconverter+0x29e>
	lea    0x2170b(%rip),%rax        # 3d720 <jsimd_ycc_rgb_convert>
	mov    %rax,0x8(%r14)
	mov    -0x8(%rbp),%r14
	jmpq   1be8e <jinit_color_deconverter+0x29e>
	lea    0x13f7(%rip),%rcx        # 1d420 <rgb_rgb_convert>
	mov    %rcx,0x8(%rax)
	jmpq   1be8e <jinit_color_deconverter+0x29e>
	mov    %r14,-0x8(%rbp)
	mov    %rax,%r14
	callq  3d630 <jsimd_can_ycc_rgb565>
	test   %eax,%eax
	jne    1c07e <jinit_color_deconverter+0x48e>
	lea    0x30b7(%rip),%rax        # 1f100 <ycc_rgb565_convert>
	mov    %rax,0x8(%r14)
	mov    %r15,%rdi
	callq  1cf20 <build_ycc_rgb_table>
	mov    -0x8(%rbp),%r14
	jmpq   1be8e <jinit_color_deconverter+0x29e>
	lea    0x32db(%rip),%rcx        # 1f340 <gray_rgb565_convert>
	mov    %rcx,0x8(%rax)
	jmpq   1be8e <jinit_color_deconverter+0x29e>
	lea    0x31ab(%rip),%rcx        # 1f220 <rgb_rgb565_convert>
	mov    %rcx,0x8(%rax)
	jmpq   1be8e <jinit_color_deconverter+0x29e>
	lea    0x2170b(%rip),%rax        # 3d790 <jsimd_ycc_rgb565_convert>
	mov    %rax,0x8(%r14)
	mov    -0x8(%rbp),%r14
	jmpq   1be8e <jinit_color_deconverter+0x29e>
	data16 nopw %cs:0x0(%rax,%rax,1)
	nopl   (%rax)

001c0a0 <ycc_rgb_convert_internal>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x50,%rsp
	mov    %r15,-0x48(%rbp)
	mov    %r14,-0x40(%rbp)
	mov    %rsi,-0x18(%rbp)
	mov    %rbx,-0x28(%rbp)
	mov    %r12,-0x30(%rbp)
	mov    %r13,-0x38(%rbp)
	mov    0x88(%rdi),%r13d
	mov    0x1a8(%rdi),%r14
	mov    0x268(%rdi),%rdi
	mov    0x10(%rdi),%rax
	mov    %rax,-0x10(%rbp)
	mov    0x18(%rdi),%r11
	mov    0x20(%rdi),%r9
	mov    0x28(%rdi),%r15
	xor    %edi,%edi
	jmp    1c15f <ycc_rgb_convert_internal+0xbf>
	mov    %edi,%r8d
	movzbl (%r12,%r8,1),%ecx
	movzbl (%rbx,%r8,1),%edx
	mov    (%rax,%rdx,4),%eax
	add    %ecx,%eax
	movslq %eax,%rax
	movzbl (%rax,%r14,1),%eax
	movzbl (%r10,%r8,1),%r8d
	mov    %al,(%rsi)
	mov    (%r9,%rdx,8),%rax
	add    (%r15,%r8,8),%rax
	sar    $0x10,%rax
	add    %ecx,%eax
	movslq %eax,%rax
	movzbl (%rax,%r14,1),%eax
	mov    %al,0x1(%rsi)
	add    (%r11,%r8,4),%ecx
	movslq %ecx,%rax
	movzbl (%rax,%r14,1),%eax
	mov    %al,0x2(%rsi)
	add    $0x1,%edi
	add    $0x3,%rsi
	mov    -0x10(%rbp),%rax
	cmp    %r13d,%edi
	jb     1c0ed <ycc_rgb_convert_internal+0x4d>
	mov    -0x20(%rbp),%rcx
	lea    0x1(%rcx),%edx
	mov    -0x8(%rbp),%rcx
	add    $0x8,%rcx
	xor    %edi,%edi
	mov    -0x50(%rbp),%r8
	mov    -0x18(%rbp),%rsi
	add    $0xffffffff,%r8d
	test   %r8d,%r8d
	jns    1c17e <ycc_rgb_convert_internal+0xde>
	mov    -0x38(%rbp),%r13
	mov    -0x30(%rbp),%r12
	mov    -0x28(%rbp),%rbx
	mov    -0x40(%rbp),%r14
	mov    -0x48(%rbp),%r15
	leaveq 
	retq   
	mov    (%rsi),%r10
	mov    %edx,%ebx
	mov    (%r10,%rbx,8),%r12
	mov    0x8(%rsi),%r10
	mov    (%r10,%rbx,8),%r10
	mov    0x10(%rsi),%rsi
	mov    (%rsi,%rbx,8),%rbx
	mov    (%rcx),%rsi
	mov    %rdx,-0x20(%rbp)
	mov    %rcx,-0x8(%rbp)
	mov    %r8,-0x50(%rbp)
	jmp    1c141 <ycc_rgb_convert_internal+0xa1>
	nopl   0x0(%rax,%rax,1)

001c1b0 <gray_rgb_convert_internal>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %r15,-0x8(%rbp)
	mov    0x88(%rdi),%r9d
	xor    %r10d,%r10d
	jmp    1c1ee <gray_rgb_convert_internal+0x3e>
	mov    %edi,%r11d
	movzbl (%r15,%r11,1),%r11d
	mov    %r11b,0x2(%rax)
	mov    %r11b,0x1(%rax)
	mov    %r11b,(%rax)
	add    $0x1,%edi
	add    $0x3,%rax
	cmp    %r9d,%edi
	jb     1c1c8 <gray_rgb_convert_internal+0x18>
	add    $0x1,%edx
	add    $0x8,%rcx
	add    $0xffffffff,%r8d
	test   %r8d,%r8d
	jns    1c1fd <gray_rgb_convert_internal+0x4d>
	mov    -0x8(%rbp),%r15
	leaveq 
	retq   
	mov    (%rsi),%rax
	mov    %edx,%edi
	mov    (%rax,%rdi,8),%r15
	mov    (%rcx),%rax
	mov    %r10,%rdi
	jmp    1c1e2 <gray_rgb_convert_internal+0x32>
	xchg   %ax,%ax

001c210 <rgb_rgb_convert_internal>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %r12,-0x8(%rbp)
	mov    %r13,-0x10(%rbp)
	mov    %r14,-0x18(%rbp)
	mov    %r15,-0x20(%rbp)
	mov    0x88(%rdi),%r9d
	xor    %r10d,%r10d
	jmp    1c264 <rgb_rgb_convert_internal+0x54>
	mov    %edi,%r13d
	movzbl (%r14,%r13,1),%r12d
	mov    %r12b,(%rax)
	movzbl (%r11,%r13,1),%r12d
	mov    %r12b,0x1(%rax)
	movzbl (%r15,%r13,1),%r12d
	mov    %r12b,0x2(%rax)
	add    $0x1,%edi
	add    $0x3,%rax
	cmp    %r9d,%edi
	jb     1c234 <rgb_rgb_convert_internal+0x24>
	add    $0x1,%edx
	add    $0x8,%rcx
	add    $0xffffffff,%r8d
	test   %r8d,%r8d
	jns    1c27f <rgb_rgb_convert_internal+0x6f>
	mov    -0x20(%rbp),%r15
	mov    -0x18(%rbp),%r14
	mov    -0x10(%rbp),%r13
	mov    -0x8(%rbp),%r12
	leaveq 
	retq   
	mov    (%rsi),%rax
	mov    %edx,%edi
	mov    (%rax,%rdi,8),%r14
	mov    0x8(%rsi),%rax
	mov    (%rax,%rdi,8),%r11
	mov    0x10(%rsi),%rax
	mov    (%rax,%rdi,8),%r15
	mov    (%rcx),%rax
	mov    %r10,%rdi
	jmp    1c258 <rgb_rgb_convert_internal+0x48>

001c2a0 <ycc_extrgb_convert_internal>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x50,%rsp
	mov    %r15,-0x48(%rbp)
	mov    %r14,-0x40(%rbp)
	mov    %rsi,-0x18(%rbp)
	mov    %rbx,-0x28(%rbp)
	mov    %r12,-0x30(%rbp)
	mov    %r13,-0x38(%rbp)
	mov    0x88(%rdi),%r13d
	mov    0x1a8(%rdi),%r14
	mov    0x268(%rdi),%rdi
	mov    0x10(%rdi),%rax
	mov    %rax,-0x10(%rbp)
	mov    0x18(%rdi),%r11
	mov    0x20(%rdi),%r9
	mov    0x28(%rdi),%r15
	xor    %edi,%edi
	jmp    1c35f <ycc_extrgb_convert_internal+0xbf>
	mov    %edi,%r8d
	movzbl (%r12,%r8,1),%ecx
	movzbl (%rbx,%r8,1),%edx
	mov    (%rax,%rdx,4),%eax
	add    %ecx,%eax
	movslq %eax,%rax
	movzbl (%rax,%r14,1),%eax
	movzbl (%r10,%r8,1),%r8d
	mov    %al,(%rsi)
	mov    (%r9,%rdx,8),%rax
	add    (%r15,%r8,8),%rax
	sar    $0x10,%rax
	add    %ecx,%eax
	movslq %eax,%rax
	movzbl (%rax,%r14,1),%eax
	mov    %al,0x1(%rsi)
	add    (%r11,%r8,4),%ecx
	movslq %ecx,%rax
	movzbl (%rax,%r14,1),%eax
	mov    %al,0x2(%rsi)
	add    $0x1,%edi
	add    $0x3,%rsi
	mov    -0x10(%rbp),%rax
	cmp    %r13d,%edi
	jb     1c2ed <ycc_extrgb_convert_internal+0x4d>
	mov    -0x20(%rbp),%rcx
	lea    0x1(%rcx),%edx
	mov    -0x8(%rbp),%rcx
	add    $0x8,%rcx
	xor    %edi,%edi
	mov    -0x50(%rbp),%r8
	mov    -0x18(%rbp),%rsi
	add    $0xffffffff,%r8d
	test   %r8d,%r8d
	jns    1c37e <ycc_extrgb_convert_internal+0xde>
	mov    -0x38(%rbp),%r13
	mov    -0x30(%rbp),%r12
	mov    -0x28(%rbp),%rbx
	mov    -0x40(%rbp),%r14
	mov    -0x48(%rbp),%r15
	leaveq 
	retq   
	mov    (%rsi),%r10
	mov    %edx,%ebx
	mov    (%r10,%rbx,8),%r12
	mov    0x8(%rsi),%r10
	mov    (%r10,%rbx,8),%r10
	mov    0x10(%rsi),%rsi
	mov    (%rsi,%rbx,8),%rbx
	mov    (%rcx),%rsi
	mov    %rdx,-0x20(%rbp)
	mov    %rcx,-0x8(%rbp)
	mov    %r8,-0x50(%rbp)
	jmp    1c341 <ycc_extrgb_convert_internal+0xa1>
	nopl   0x0(%rax,%rax,1)

001c3b0 <gray_extrgb_convert_internal>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %r15,-0x8(%rbp)
	mov    0x88(%rdi),%r9d
	xor    %r10d,%r10d
	jmp    1c3ee <gray_extrgb_convert_internal+0x3e>
	mov    %edi,%r11d
	movzbl (%r15,%r11,1),%r11d
	mov    %r11b,0x2(%rax)
	mov    %r11b,0x1(%rax)
	mov    %r11b,(%rax)
	add    $0x1,%edi
	add    $0x3,%rax
	cmp    %r9d,%edi
	jb     1c3c8 <gray_extrgb_convert_internal+0x18>
	add    $0x1,%edx
	add    $0x8,%rcx
	add    $0xffffffff,%r8d
	test   %r8d,%r8d
	jns    1c3fd <gray_extrgb_convert_internal+0x4d>
	mov    -0x8(%rbp),%r15
	leaveq 
	retq   
	mov    (%rsi),%rax
	mov    %edx,%edi
	mov    (%rax,%rdi,8),%r15
	mov    (%rcx),%rax
	mov    %r10,%rdi
	jmp    1c3e2 <gray_extrgb_convert_internal+0x32>
	xchg   %ax,%ax

001c410 <rgb_extrgb_convert_internal>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %r12,-0x8(%rbp)
	mov    %r13,-0x10(%rbp)
	mov    %r14,-0x18(%rbp)
	mov    %r15,-0x20(%rbp)
	mov    0x88(%rdi),%r9d
	xor    %r10d,%r10d
	jmp    1c464 <rgb_extrgb_convert_internal+0x54>
	mov    %edi,%r13d
	movzbl (%r14,%r13,1),%r12d
	mov    %r12b,(%rax)
	movzbl (%r11,%r13,1),%r12d
	mov    %r12b,0x1(%rax)
	movzbl (%r15,%r13,1),%r12d
	mov    %r12b,0x2(%rax)
	add    $0x1,%edi
	add    $0x3,%rax
	cmp    %r9d,%edi
	jb     1c434 <rgb_extrgb_convert_internal+0x24>
	add    $0x1,%edx
	add    $0x8,%rcx
	add    $0xffffffff,%r8d
	test   %r8d,%r8d
	jns    1c47f <rgb_extrgb_convert_internal+0x6f>
	mov    -0x20(%rbp),%r15
	mov    -0x18(%rbp),%r14
	mov    -0x10(%rbp),%r13
	mov    -0x8(%rbp),%r12
	leaveq 
	retq   
	mov    (%rsi),%rax
	mov    %edx,%edi
	mov    (%rax,%rdi,8),%r14
	mov    0x8(%rsi),%rax
	mov    (%rax,%rdi,8),%r11
	mov    0x10(%rsi),%rax
	mov    (%rax,%rdi,8),%r15
	mov    (%rcx),%rax
	mov    %r10,%rdi
	jmp    1c458 <rgb_extrgb_convert_internal+0x48>

001c4a0 <ycc_extrgbx_convert_internal>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x50,%rsp
	mov    %r15,-0x48(%rbp)
	mov    %r14,-0x40(%rbp)
	mov    %rsi,-0x18(%rbp)
	mov    %rbx,-0x28(%rbp)
	mov    %r12,-0x30(%rbp)
	mov    %r13,-0x38(%rbp)
	mov    0x88(%rdi),%r13d
	mov    0x1a8(%rdi),%r14
	mov    0x268(%rdi),%rdi
	mov    0x10(%rdi),%rax
	mov    %rax,-0x10(%rbp)
	mov    0x18(%rdi),%r11
	mov    0x20(%rdi),%r9
	mov    0x28(%rdi),%r15
	xor    %edi,%edi
	jmp    1c563 <ycc_extrgbx_convert_internal+0xc3>
	mov    %edi,%r8d
	movzbl (%r12,%r8,1),%ecx
	movzbl (%rbx,%r8,1),%edx
	mov    (%rax,%rdx,4),%eax
	add    %ecx,%eax
	movslq %eax,%rax
	movzbl (%rax,%r14,1),%eax
	movzbl (%r10,%r8,1),%r8d
	mov    %al,(%rsi)
	mov    (%r9,%rdx,8),%rax
	add    (%r15,%r8,8),%rax
	sar    $0x10,%rax
	add    %ecx,%eax
	movslq %eax,%rax
	movzbl (%rax,%r14,1),%eax
	mov    %al,0x1(%rsi)
	add    (%r11,%r8,4),%ecx
	movslq %ecx,%rax
	movzbl (%rax,%r14,1),%eax
	mov    %al,0x2(%rsi)
	movb   $0xff,0x3(%rsi)
	add    $0x1,%edi
	add    $0x4,%rsi
	mov    -0x10(%rbp),%rax
	cmp    %r13d,%edi
	jb     1c4ed <ycc_extrgbx_convert_internal+0x4d>
	mov    -0x20(%rbp),%rcx
	lea    0x1(%rcx),%edx
	mov    -0x8(%rbp),%rcx
	add    $0x8,%rcx
	xor    %edi,%edi
	mov    -0x50(%rbp),%r8
	mov    -0x18(%rbp),%rsi
	add    $0xffffffff,%r8d
	test   %r8d,%r8d
	jns    1c582 <ycc_extrgbx_convert_internal+0xe2>
	mov    -0x38(%rbp),%r13
	mov    -0x30(%rbp),%r12
	mov    -0x28(%rbp),%rbx
	mov    -0x40(%rbp),%r14
	mov    -0x48(%rbp),%r15
	leaveq 
	retq   
	mov    (%rsi),%r10
	mov    %edx,%ebx
	mov    (%r10,%rbx,8),%r12
	mov    0x8(%rsi),%r10
	mov    (%r10,%rbx,8),%r10
	mov    0x10(%rsi),%rsi
	mov    (%rsi,%rbx,8),%rbx
	mov    (%rcx),%rsi
	mov    %rdx,-0x20(%rbp)
	mov    %rcx,-0x8(%rbp)
	mov    %r8,-0x50(%rbp)
	jmp    1c545 <ycc_extrgbx_convert_internal+0xa5>
	nopl   0x0(%rax)

001c5b0 <gray_extrgbx_convert_internal>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %r15,-0x8(%rbp)
	mov    0x88(%rdi),%r9d
	xor    %r10d,%r10d
	jmp    1c5f2 <gray_extrgbx_convert_internal+0x42>
	mov    %edi,%r11d
	movzbl (%r15,%r11,1),%r11d
	mov    %r11b,0x2(%rax)
	mov    %r11b,0x1(%rax)
	mov    %r11b,(%rax)
	movb   $0xff,0x3(%rax)
	add    $0x1,%edi
	add    $0x4,%rax
	cmp    %r9d,%edi
	jb     1c5c8 <gray_extrgbx_convert_internal+0x18>
	add    $0x1,%edx
	add    $0x8,%rcx
	add    $0xffffffff,%r8d
	test   %r8d,%r8d
	jns    1c601 <gray_extrgbx_convert_internal+0x51>
	mov    -0x8(%rbp),%r15
	leaveq 
	retq   
	mov    (%rsi),%rax
	mov    %edx,%edi
	mov    (%rax,%rdi,8),%r15
	mov    (%rcx),%rax
	mov    %r10,%rdi
	jmp    1c5e6 <gray_extrgbx_convert_internal+0x36>
	data16 nopw %cs:0x0(%rax,%rax,1)
	nopl   (%rax)

001c620 <rgb_extrgbx_convert_internal>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %r12,-0x8(%rbp)
	mov    %r13,-0x10(%rbp)
	mov    %r14,-0x18(%rbp)
	mov    %r15,-0x20(%rbp)
	mov    0x88(%rdi),%r9d
	xor    %r10d,%r10d
	jmp    1c678 <rgb_extrgbx_convert_internal+0x58>
	mov    %edi,%r13d
	movzbl (%r14,%r13,1),%r12d
	mov    %r12b,(%rax)
	movzbl (%r11,%r13,1),%r12d
	mov    %r12b,0x1(%rax)
	movzbl (%r15,%r13,1),%r12d
	mov    %r12b,0x2(%rax)
	movb   $0xff,0x3(%rax)
	add    $0x1,%edi
	add    $0x4,%rax
	cmp    %r9d,%edi
	jb     1c644 <rgb_extrgbx_convert_internal+0x24>
	add    $0x1,%edx
	add    $0x8,%rcx
	add    $0xffffffff,%r8d
	test   %r8d,%r8d
	jns    1c693 <rgb_extrgbx_convert_internal+0x73>
	mov    -0x20(%rbp),%r15
	mov    -0x18(%rbp),%r14
	mov    -0x10(%rbp),%r13
	mov    -0x8(%rbp),%r12
	leaveq 
	retq   
	mov    (%rsi),%rax
	mov    %edx,%edi
	mov    (%rax,%rdi,8),%r14
	mov    0x8(%rsi),%rax
	mov    (%rax,%rdi,8),%r11
	mov    0x10(%rsi),%rax
	mov    (%rax,%rdi,8),%r15
	mov    (%rcx),%rax
	mov    %r10,%rdi
	jmp    1c66c <rgb_extrgbx_convert_internal+0x4c>
	data16 nopw %cs:0x0(%rax,%rax,1)
	nop

001c6c0 <ycc_extbgr_convert_internal>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x50,%rsp
	mov    %r15,-0x48(%rbp)
	mov    %r14,-0x40(%rbp)
	mov    %rsi,-0x18(%rbp)
	mov    %rbx,-0x28(%rbp)
	mov    %r12,-0x30(%rbp)
	mov    %r13,-0x38(%rbp)
	mov    0x88(%rdi),%r13d
	mov    0x1a8(%rdi),%r14
	mov    0x268(%rdi),%rdi
	mov    0x10(%rdi),%rax
	mov    %rax,-0x10(%rbp)
	mov    0x18(%rdi),%r11
	mov    0x20(%rdi),%r9
	mov    0x28(%rdi),%r15
	xor    %edi,%edi
	jmp    1c77f <ycc_extbgr_convert_internal+0xbf>
	mov    %edi,%r8d
	movzbl (%r12,%r8,1),%ecx
	movzbl (%rbx,%r8,1),%edx
	mov    (%rax,%rdx,4),%eax
	add    %ecx,%eax
	movslq %eax,%rax
	movzbl (%rax,%r14,1),%eax
	movzbl (%r10,%r8,1),%r8d
	mov    %al,0x2(%rsi)
	mov    (%r9,%rdx,8),%rax
	add    (%r15,%r8,8),%rax
	sar    $0x10,%rax
	add    %ecx,%eax
	movslq %eax,%rax
	movzbl (%rax,%r14,1),%eax
	mov    %al,0x1(%rsi)
	add    (%r11,%r8,4),%ecx
	movslq %ecx,%rax
	movzbl (%rax,%r14,1),%eax
	mov    %al,(%rsi)
	add    $0x1,%edi
	add    $0x3,%rsi
	mov    -0x10(%rbp),%rax
	cmp    %r13d,%edi
	jb     1c70d <ycc_extbgr_convert_internal+0x4d>
	mov    -0x20(%rbp),%rcx
	lea    0x1(%rcx),%edx
	mov    -0x8(%rbp),%rcx
	add    $0x8,%rcx
	xor    %edi,%edi
	mov    -0x50(%rbp),%r8
	mov    -0x18(%rbp),%rsi
	add    $0xffffffff,%r8d
	test   %r8d,%r8d
	jns    1c79e <ycc_extbgr_convert_internal+0xde>
	mov    -0x38(%rbp),%r13
	mov    -0x30(%rbp),%r12
	mov    -0x28(%rbp),%rbx
	mov    -0x40(%rbp),%r14
	mov    -0x48(%rbp),%r15
	leaveq 
	retq   
	mov    (%rsi),%r10
	mov    %edx,%ebx
	mov    (%r10,%rbx,8),%r12
	mov    0x8(%rsi),%r10
	mov    (%r10,%rbx,8),%r10
	mov    0x10(%rsi),%rsi
	mov    (%rsi,%rbx,8),%rbx
	mov    (%rcx),%rsi
	mov    %rdx,-0x20(%rbp)
	mov    %rcx,-0x8(%rbp)
	mov    %r8,-0x50(%rbp)
	jmp    1c761 <ycc_extbgr_convert_internal+0xa1>
	nopl   0x0(%rax,%rax,1)

001c7d0 <gray_extbgr_convert_internal>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %r15,-0x8(%rbp)
	mov    0x88(%rdi),%r9d
	xor    %r10d,%r10d
	jmp    1c80e <gray_extbgr_convert_internal+0x3e>
	mov    %edi,%r11d
	movzbl (%r15,%r11,1),%r11d
	mov    %r11b,(%rax)
	mov    %r11b,0x1(%rax)
	mov    %r11b,0x2(%rax)
	add    $0x1,%edi
	add    $0x3,%rax
	cmp    %r9d,%edi
	jb     1c7e8 <gray_extbgr_convert_internal+0x18>
	add    $0x1,%edx
	add    $0x8,%rcx
	add    $0xffffffff,%r8d
	test   %r8d,%r8d
	jns    1c81d <gray_extbgr_convert_internal+0x4d>
	mov    -0x8(%rbp),%r15
	leaveq 
	retq   
	mov    (%rsi),%rax
	mov    %edx,%edi
	mov    (%rax,%rdi,8),%r15
	mov    (%rcx),%rax
	mov    %r10,%rdi
	jmp    1c802 <gray_extbgr_convert_internal+0x32>
	xchg   %ax,%ax

001c830 <rgb_extbgr_convert_internal>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %r12,-0x8(%rbp)
	mov    %r13,-0x10(%rbp)
	mov    %r14,-0x18(%rbp)
	mov    %r15,-0x20(%rbp)
	mov    0x88(%rdi),%r9d
	xor    %r10d,%r10d
	jmp    1c884 <rgb_extbgr_convert_internal+0x54>
	mov    %edi,%r13d
	movzbl (%r14,%r13,1),%r12d
	mov    %r12b,0x2(%rax)
	movzbl (%r11,%r13,1),%r12d
	mov    %r12b,0x1(%rax)
	movzbl (%r15,%r13,1),%r12d
	mov    %r12b,(%rax)
	add    $0x1,%edi
	add    $0x3,%rax
	cmp    %r9d,%edi
	jb     1c854 <rgb_extbgr_convert_internal+0x24>
	add    $0x1,%edx
	add    $0x8,%rcx
	add    $0xffffffff,%r8d
	test   %r8d,%r8d
	jns    1c89f <rgb_extbgr_convert_internal+0x6f>
	mov    -0x20(%rbp),%r15
	mov    -0x18(%rbp),%r14
	mov    -0x10(%rbp),%r13
	mov    -0x8(%rbp),%r12
	leaveq 
	retq   
	mov    (%rsi),%rax
	mov    %edx,%edi
	mov    (%rax,%rdi,8),%r14
	mov    0x8(%rsi),%rax
	mov    (%rax,%rdi,8),%r11
	mov    0x10(%rsi),%rax
	mov    (%rax,%rdi,8),%r15
	mov    (%rcx),%rax
	mov    %r10,%rdi
	jmp    1c878 <rgb_extbgr_convert_internal+0x48>

001c8c0 <ycc_extbgrx_convert_internal>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x50,%rsp
	mov    %r15,-0x48(%rbp)
	mov    %r14,-0x40(%rbp)
	mov    %rsi,-0x18(%rbp)
	mov    %rbx,-0x28(%rbp)
	mov    %r12,-0x30(%rbp)
	mov    %r13,-0x38(%rbp)
	mov    0x88(%rdi),%r13d
	mov    0x1a8(%rdi),%r14
	mov    0x268(%rdi),%rdi
	mov    0x10(%rdi),%rax
	mov    %rax,-0x10(%rbp)
	mov    0x18(%rdi),%r11
	mov    0x20(%rdi),%r9
	mov    0x28(%rdi),%r15
	xor    %edi,%edi
	jmp    1c983 <ycc_extbgrx_convert_internal+0xc3>
	mov    %edi,%r8d
	movzbl (%r12,%r8,1),%ecx
	movzbl (%rbx,%r8,1),%edx
	mov    (%rax,%rdx,4),%eax
	add    %ecx,%eax
	movslq %eax,%rax
	movzbl (%rax,%r14,1),%eax
	movzbl (%r10,%r8,1),%r8d
	mov    %al,0x2(%rsi)
	mov    (%r9,%rdx,8),%rax
	add    (%r15,%r8,8),%rax
	sar    $0x10,%rax
	add    %ecx,%eax
	movslq %eax,%rax
	movzbl (%rax,%r14,1),%eax
	mov    %al,0x1(%rsi)
	add    (%r11,%r8,4),%ecx
	movslq %ecx,%rax
	movzbl (%rax,%r14,1),%eax
	mov    %al,(%rsi)
	movb   $0xff,0x3(%rsi)
	add    $0x1,%edi
	add    $0x4,%rsi
	mov    -0x10(%rbp),%rax
	cmp    %r13d,%edi
	jb     1c90d <ycc_extbgrx_convert_internal+0x4d>
	mov    -0x20(%rbp),%rcx
	lea    0x1(%rcx),%edx
	mov    -0x8(%rbp),%rcx
	add    $0x8,%rcx
	xor    %edi,%edi
	mov    -0x50(%rbp),%r8
	mov    -0x18(%rbp),%rsi
	add    $0xffffffff,%r8d
	test   %r8d,%r8d
	jns    1c9a2 <ycc_extbgrx_convert_internal+0xe2>
	mov    -0x38(%rbp),%r13
	mov    -0x30(%rbp),%r12
	mov    -0x28(%rbp),%rbx
	mov    -0x40(%rbp),%r14
	mov    -0x48(%rbp),%r15
	leaveq 
	retq   
	mov    (%rsi),%r10
	mov    %edx,%ebx
	mov    (%r10,%rbx,8),%r12
	mov    0x8(%rsi),%r10
	mov    (%r10,%rbx,8),%r10
	mov    0x10(%rsi),%rsi
	mov    (%rsi,%rbx,8),%rbx
	mov    (%rcx),%rsi
	mov    %rdx,-0x20(%rbp)
	mov    %rcx,-0x8(%rbp)
	mov    %r8,-0x50(%rbp)
	jmp    1c965 <ycc_extbgrx_convert_internal+0xa5>
	nopl   0x0(%rax)

001c9d0 <gray_extbgrx_convert_internal>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %r15,-0x8(%rbp)
	mov    0x88(%rdi),%r9d
	xor    %r10d,%r10d
	jmp    1ca12 <gray_extbgrx_convert_internal+0x42>
	mov    %edi,%r11d
	movzbl (%r15,%r11,1),%r11d
	mov    %r11b,(%rax)
	mov    %r11b,0x1(%rax)
	mov    %r11b,0x2(%rax)
	movb   $0xff,0x3(%rax)
	add    $0x1,%edi
	add    $0x4,%rax
	cmp    %r9d,%edi
	jb     1c9e8 <gray_extbgrx_convert_internal+0x18>
	add    $0x1,%edx
	add    $0x8,%rcx
	add    $0xffffffff,%r8d
	test   %r8d,%r8d
	jns    1ca21 <gray_extbgrx_convert_internal+0x51>
	mov    -0x8(%rbp),%r15
	leaveq 
	retq   
	mov    (%rsi),%rax
	mov    %edx,%edi
	mov    (%rax,%rdi,8),%r15
	mov    (%rcx),%rax
	mov    %r10,%rdi
	jmp    1ca06 <gray_extbgrx_convert_internal+0x36>
	data16 nopw %cs:0x0(%rax,%rax,1)
	nopl   (%rax)

001ca40 <rgb_extbgrx_convert_internal>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %r12,-0x8(%rbp)
	mov    %r13,-0x10(%rbp)
	mov    %r14,-0x18(%rbp)
	mov    %r15,-0x20(%rbp)
	mov    0x88(%rdi),%r9d
	xor    %r10d,%r10d
	jmp    1ca98 <rgb_extbgrx_convert_internal+0x58>
	mov    %edi,%r13d
	movzbl (%r14,%r13,1),%r12d
	mov    %r12b,0x2(%rax)
	movzbl (%r11,%r13,1),%r12d
	mov    %r12b,0x1(%rax)
	movzbl (%r15,%r13,1),%r12d
	mov    %r12b,(%rax)
	movb   $0xff,0x3(%rax)
	add    $0x1,%edi
	add    $0x4,%rax
	cmp    %r9d,%edi
	jb     1ca64 <rgb_extbgrx_convert_internal+0x24>
	add    $0x1,%edx
	add    $0x8,%rcx
	add    $0xffffffff,%r8d
	test   %r8d,%r8d
	jns    1cab3 <rgb_extbgrx_convert_internal+0x73>
	mov    -0x20(%rbp),%r15
	mov    -0x18(%rbp),%r14
	mov    -0x10(%rbp),%r13
	mov    -0x8(%rbp),%r12
	leaveq 
	retq   
	mov    (%rsi),%rax
	mov    %edx,%edi
	mov    (%rax,%rdi,8),%r14
	mov    0x8(%rsi),%rax
	mov    (%rax,%rdi,8),%r11
	mov    0x10(%rsi),%rax
	mov    (%rax,%rdi,8),%r15
	mov    (%rcx),%rax
	mov    %r10,%rdi
	jmp    1ca8c <rgb_extbgrx_convert_internal+0x4c>
	data16 nopw %cs:0x0(%rax,%rax,1)
	nop

001cae0 <ycc_extxbgr_convert_internal>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x50,%rsp
	mov    %r15,-0x48(%rbp)
	mov    %r14,-0x40(%rbp)
	mov    %rsi,-0x18(%rbp)
	mov    %rbx,-0x28(%rbp)
	mov    %r12,-0x30(%rbp)
	mov    %r13,-0x38(%rbp)
	mov    0x88(%rdi),%r13d
	mov    0x1a8(%rdi),%r14
	mov    0x268(%rdi),%rdi
	mov    0x10(%rdi),%rax
	mov    %rax,-0x10(%rbp)
	mov    0x18(%rdi),%r11
	mov    0x20(%rdi),%r9
	mov    0x28(%rdi),%r15
	xor    %edi,%edi
	jmp    1cba3 <ycc_extxbgr_convert_internal+0xc3>
	mov    %edi,%r8d
	movzbl (%r12,%r8,1),%ecx
	movzbl (%rbx,%r8,1),%edx
	mov    (%rax,%rdx,4),%eax
	add    %ecx,%eax
	movslq %eax,%rax
	movzbl (%rax,%r14,1),%eax
	movzbl (%r10,%r8,1),%r8d
	mov    %al,0x3(%rsi)
	mov    (%r9,%rdx,8),%rax
	add    (%r15,%r8,8),%rax
	sar    $0x10,%rax
	add    %ecx,%eax
	movslq %eax,%rax
	movzbl (%rax,%r14,1),%eax
	mov    %al,0x2(%rsi)
	add    (%r11,%r8,4),%ecx
	movslq %ecx,%rax
	movzbl (%rax,%r14,1),%eax
	mov    %al,0x1(%rsi)
	movb   $0xff,(%rsi)
	add    $0x1,%edi
	add    $0x4,%rsi
	mov    -0x10(%rbp),%rax
	cmp    %r13d,%edi
	jb     1cb2d <ycc_extxbgr_convert_internal+0x4d>
	mov    -0x20(%rbp),%rcx
	lea    0x1(%rcx),%edx
	mov    -0x8(%rbp),%rcx
	add    $0x8,%rcx
	xor    %edi,%edi
	mov    -0x50(%rbp),%r8
	mov    -0x18(%rbp),%rsi
	add    $0xffffffff,%r8d
	test   %r8d,%r8d
	jns    1cbc2 <ycc_extxbgr_convert_internal+0xe2>
	mov    -0x38(%rbp),%r13
	mov    -0x30(%rbp),%r12
	mov    -0x28(%rbp),%rbx
	mov    -0x40(%rbp),%r14
	mov    -0x48(%rbp),%r15
	leaveq 
	retq   
	mov    (%rsi),%r10
	mov    %edx,%ebx
	mov    (%r10,%rbx,8),%r12
	mov    0x8(%rsi),%r10
	mov    (%r10,%rbx,8),%r10
	mov    0x10(%rsi),%rsi
	mov    (%rsi,%rbx,8),%rbx
	mov    (%rcx),%rsi
	mov    %rdx,-0x20(%rbp)
	mov    %rcx,-0x8(%rbp)
	mov    %r8,-0x50(%rbp)
	jmp    1cb85 <ycc_extxbgr_convert_internal+0xa5>
	nopl   0x0(%rax)

001cbf0 <gray_extxbgr_convert_internal>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %r15,-0x8(%rbp)
	mov    0x88(%rdi),%r9d
	xor    %r10d,%r10d
	jmp    1cc32 <gray_extxbgr_convert_internal+0x42>
	mov    %edi,%r11d
	movzbl (%r15,%r11,1),%r11d
	mov    %r11b,0x1(%rax)
	mov    %r11b,0x2(%rax)
	mov    %r11b,0x3(%rax)
	movb   $0xff,(%rax)
	add    $0x1,%edi
	add    $0x4,%rax
	cmp    %r9d,%edi
	jb     1cc08 <gray_extxbgr_convert_internal+0x18>
	add    $0x1,%edx
	add    $0x8,%rcx
	add    $0xffffffff,%r8d
	test   %r8d,%r8d
	jns    1cc41 <gray_extxbgr_convert_internal+0x51>
	mov    -0x8(%rbp),%r15
	leaveq 
	retq   
	mov    (%rsi),%rax
	mov    %edx,%edi
	mov    (%rax,%rdi,8),%r15
	mov    (%rcx),%rax
	mov    %r10,%rdi
	jmp    1cc26 <gray_extxbgr_convert_internal+0x36>
	data16 nopw %cs:0x0(%rax,%rax,1)
	nopl   (%rax)

001cc60 <rgb_extxbgr_convert_internal>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %r12,-0x8(%rbp)
	mov    %r13,-0x10(%rbp)
	mov    %r14,-0x18(%rbp)
	mov    %r15,-0x20(%rbp)
	mov    0x88(%rdi),%r9d
	xor    %r10d,%r10d
	jmp    1ccb8 <rgb_extxbgr_convert_internal+0x58>
	mov    %edi,%r13d
	movzbl (%r14,%r13,1),%r12d
	mov    %r12b,0x3(%rax)
	movzbl (%r11,%r13,1),%r12d
	mov    %r12b,0x2(%rax)
	movzbl (%r15,%r13,1),%r12d
	mov    %r12b,0x1(%rax)
	movb   $0xff,(%rax)
	add    $0x1,%edi
	add    $0x4,%rax
	cmp    %r9d,%edi
	jb     1cc84 <rgb_extxbgr_convert_internal+0x24>
	add    $0x1,%edx
	add    $0x8,%rcx
	add    $0xffffffff,%r8d
	test   %r8d,%r8d
	jns    1ccd3 <rgb_extxbgr_convert_internal+0x73>
	mov    -0x20(%rbp),%r15
	mov    -0x18(%rbp),%r14
	mov    -0x10(%rbp),%r13
	mov    -0x8(%rbp),%r12
	leaveq 
	retq   
	mov    (%rsi),%rax
	mov    %edx,%edi
	mov    (%rax,%rdi,8),%r14
	mov    0x8(%rsi),%rax
	mov    (%rax,%rdi,8),%r11
	mov    0x10(%rsi),%rax
	mov    (%rax,%rdi,8),%r15
	mov    (%rcx),%rax
	mov    %r10,%rdi
	jmp    1ccac <rgb_extxbgr_convert_internal+0x4c>
	data16 nopw %cs:0x0(%rax,%rax,1)
	nop

001cd00 <ycc_extxrgb_convert_internal>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x50,%rsp
	mov    %r15,-0x48(%rbp)
	mov    %r14,-0x40(%rbp)
	mov    %rsi,-0x18(%rbp)
	mov    %rbx,-0x28(%rbp)
	mov    %r12,-0x30(%rbp)
	mov    %r13,-0x38(%rbp)
	mov    0x88(%rdi),%r13d
	mov    0x1a8(%rdi),%r14
	mov    0x268(%rdi),%rdi
	mov    0x10(%rdi),%rax
	mov    %rax,-0x10(%rbp)
	mov    0x18(%rdi),%r11
	mov    0x20(%rdi),%r9
	mov    0x28(%rdi),%r15
	xor    %edi,%edi
	jmp    1cdc3 <ycc_extxrgb_convert_internal+0xc3>
	mov    %edi,%r8d
	movzbl (%r12,%r8,1),%ecx
	movzbl (%rbx,%r8,1),%edx
	mov    (%rax,%rdx,4),%eax
	add    %ecx,%eax
	movslq %eax,%rax
	movzbl (%rax,%r14,1),%eax
	movzbl (%r10,%r8,1),%r8d
	mov    %al,0x1(%rsi)
	mov    (%r9,%rdx,8),%rax
	add    (%r15,%r8,8),%rax
	sar    $0x10,%rax
	add    %ecx,%eax
	movslq %eax,%rax
	movzbl (%rax,%r14,1),%eax
	mov    %al,0x2(%rsi)
	add    (%r11,%r8,4),%ecx
	movslq %ecx,%rax
	movzbl (%rax,%r14,1),%eax
	mov    %al,0x3(%rsi)
	movb   $0xff,(%rsi)
	add    $0x1,%edi
	add    $0x4,%rsi
	mov    -0x10(%rbp),%rax
	cmp    %r13d,%edi
	jb     1cd4d <ycc_extxrgb_convert_internal+0x4d>
	mov    -0x20(%rbp),%rcx
	lea    0x1(%rcx),%edx
	mov    -0x8(%rbp),%rcx
	add    $0x8,%rcx
	xor    %edi,%edi
	mov    -0x50(%rbp),%r8
	mov    -0x18(%rbp),%rsi
	add    $0xffffffff,%r8d
	test   %r8d,%r8d
	jns    1cde2 <ycc_extxrgb_convert_internal+0xe2>
	mov    -0x38(%rbp),%r13
	mov    -0x30(%rbp),%r12
	mov    -0x28(%rbp),%rbx
	mov    -0x40(%rbp),%r14
	mov    -0x48(%rbp),%r15
	leaveq 
	retq   
	mov    (%rsi),%r10
	mov    %edx,%ebx
	mov    (%r10,%rbx,8),%r12
	mov    0x8(%rsi),%r10
	mov    (%r10,%rbx,8),%r10
	mov    0x10(%rsi),%rsi
	mov    (%rsi,%rbx,8),%rbx
	mov    (%rcx),%rsi
	mov    %rdx,-0x20(%rbp)
	mov    %rcx,-0x8(%rbp)
	mov    %r8,-0x50(%rbp)
	jmp    1cda5 <ycc_extxrgb_convert_internal+0xa5>
	nopl   0x0(%rax)

001ce10 <gray_extxrgb_convert_internal>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %r15,-0x8(%rbp)
	mov    0x88(%rdi),%r9d
	xor    %r10d,%r10d
	jmp    1ce52 <gray_extxrgb_convert_internal+0x42>
	mov    %edi,%r11d
	movzbl (%r15,%r11,1),%r11d
	mov    %r11b,0x3(%rax)
	mov    %r11b,0x2(%rax)
	mov    %r11b,0x1(%rax)
	movb   $0xff,(%rax)
	add    $0x1,%edi
	add    $0x4,%rax
	cmp    %r9d,%edi
	jb     1ce28 <gray_extxrgb_convert_internal+0x18>
	add    $0x1,%edx
	add    $0x8,%rcx
	add    $0xffffffff,%r8d
	test   %r8d,%r8d
	jns    1ce61 <gray_extxrgb_convert_internal+0x51>
	mov    -0x8(%rbp),%r15
	leaveq 
	retq   
	mov    (%rsi),%rax
	mov    %edx,%edi
	mov    (%rax,%rdi,8),%r15
	mov    (%rcx),%rax
	mov    %r10,%rdi
	jmp    1ce46 <gray_extxrgb_convert_internal+0x36>
	data16 nopw %cs:0x0(%rax,%rax,1)
	nopl   (%rax)

001ce80 <rgb_extxrgb_convert_internal>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %r12,-0x8(%rbp)
	mov    %r13,-0x10(%rbp)
	mov    %r14,-0x18(%rbp)
	mov    %r15,-0x20(%rbp)
	mov    0x88(%rdi),%r9d
	xor    %r10d,%r10d
	jmp    1ced8 <rgb_extxrgb_convert_internal+0x58>
	mov    %edi,%r13d
	movzbl (%r14,%r13,1),%r12d
	mov    %r12b,0x1(%rax)
	movzbl (%r11,%r13,1),%r12d
	mov    %r12b,0x2(%rax)
	movzbl (%r15,%r13,1),%r12d
	mov    %r12b,0x3(%rax)
	movb   $0xff,(%rax)
	add    $0x1,%edi
	add    $0x4,%rax
	cmp    %r9d,%edi
	jb     1cea4 <rgb_extxrgb_convert_internal+0x24>
	add    $0x1,%edx
	add    $0x8,%rcx
	add    $0xffffffff,%r8d
	test   %r8d,%r8d
	jns    1cef3 <rgb_extxrgb_convert_internal+0x73>
	mov    -0x20(%rbp),%r15
	mov    -0x18(%rbp),%r14
	mov    -0x10(%rbp),%r13
	mov    -0x8(%rbp),%r12
	leaveq 
	retq   
	mov    (%rsi),%rax
	mov    %edx,%edi
	mov    (%rax,%rdi,8),%r14
	mov    0x8(%rsi),%rax
	mov    (%rax,%rdi,8),%r11
	mov    0x10(%rsi),%rax
	mov    (%rax,%rdi,8),%r15
	mov    (%rcx),%rax
	mov    %r10,%rdi
	jmp    1cecc <rgb_extxrgb_convert_internal+0x4c>
	data16 nopw %cs:0x0(%rax,%rax,1)
	nop

001cf20 <build_ycc_rgb_table>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %r12,-0x8(%rbp)
	mov    %r13,-0x10(%rbp)
	mov    %r14,-0x18(%rbp)
	mov    %r15,-0x20(%rbp)
	mov    0x8(%rdi),%rax
	mov    (%rax),%rax
	mov    $0x1,%r13d
	mov    $0x400,%r15d
	mov    0x268(%rdi),%r14
	mov    %rdi,%r12
	mov    %r13,%rsi
	mov    %r15,%rdx
	callq  *%rax
	mov    %rax,0x10(%r14)
	mov    0x8(%r12),%rax
	mov    (%rax),%rax
	mov    %r15,%rdx
	mov    %r12,%rdi
	mov    %r13,%rsi
	callq  *%rax
	mov    %rax,0x18(%r14)
	mov    0x8(%r12),%rax
	mov    (%rax),%rax
	mov    $0x800,%r15d
	mov    %r12,%rdi
	mov    %r13,%rsi
	mov    %r15,%rdx
	callq  *%rax
	mov    %rax,0x20(%r14)
	mov    0x8(%r12),%rax
	mov    (%rax),%rax
	mov    %r15,%rdx
	mov    %r13,%rsi
	mov    %r12,%rdi
	callq  *%rax
	mov    %rax,0x28(%r14)
	xor    %eax,%eax
	mov    $0xffffffffffffff80,%rcx
	jmp    1d024 <build_ycc_rgb_table+0x104>
	mov    %rcx,%rdx
	imul   $0x166e9,%rdx,%rdx
	add    $0x8000,%rdx
	sar    $0x10,%rdx
	mov    0x10(%r14),%rsi
	movslq %eax,%rdi
	mov    %edx,(%rsi,%rdi,4)
	mov    %rcx,%rdx
	imul   $0x1c5a2,%rdx,%rdx
	add    $0x8000,%rdx
	sar    $0x10,%rdx
	mov    0x18(%r14),%rsi
	mov    %edx,(%rsi,%rdi,4)
	mov    %rcx,%rsi
	imul   $0xffffffffffff492e,%rsi,%rsi
	mov    0x20(%r14),%rdx
	mov    %rsi,(%rdx,%rdi,8)
	mov    %rcx,%rdx
	imul   $0xffffffffffffa7e6,%rdx,%rdx
	lea    0x8000(%rdx),%rsi
	mov    0x28(%r14),%rdx
	mov    %rsi,(%rdx,%rdi,8)
	add    $0x1,%eax
	add    $0x1,%rcx
	cmp    $0xff,%eax
	jle    1cfb7 <build_ycc_rgb_table+0x97>
	mov    -0x20(%rbp),%r15
	mov    -0x18(%rbp),%r14
	mov    -0x10(%rbp),%r13
	mov    -0x8(%rbp),%r12
	leaveq 
	retq   
	nopl   (%rax)

001d040 <ycc_rgb_convert>:
	push   %rbp
	mov    %rsp,%rbp
	mov    0x40(%rdi),%eax
	add    $0xfffffffa,%eax
	cmp    $0x9,%eax
	ja     1d066 <ycc_rgb_convert+0x26>
	lea    0x3c71e(%rip),%r9        # 59774 <mybuffer.5+0x5c>
	movslq (%r9,%rax,4),%rax
	add    %r9,%rax
	jmpq   *%rax
	callq  1cd00 <ycc_extxrgb_convert_internal>
	leaveq 
	retq   
	callq  1c0a0 <ycc_rgb_convert_internal>
	leaveq 
	retq   
	callq  1c2a0 <ycc_extrgb_convert_internal>
	leaveq 
	retq   
	callq  1c4a0 <ycc_extrgbx_convert_internal>
	leaveq 
	retq   
	callq  1c6c0 <ycc_extbgr_convert_internal>
	leaveq 
	retq   
	callq  1c8c0 <ycc_extbgrx_convert_internal>
	leaveq 
	retq   
	callq  1cae0 <ycc_extxbgr_convert_internal>
	leaveq 
	retq   

001d090 <build_rgb_y_table>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %r15,-0x8(%rbp)
	mov    0x8(%rdi),%rax
	mov    (%rax),%rax
	mov    $0x1,%esi
	mov    $0x1800,%edx
	mov    0x268(%rdi),%r15
	callq  *%rax
	mov    %rax,0x30(%r15)
	xor    %ecx,%ecx
	jmp    1d123 <build_rgb_y_table+0x93>
	lea    (%rcx,%rcx,8),%rsi
	mov    %rsi,%rdx
	shl    $0x4,%rdx
	lea    (%rdx,%rcx,8),%rdx
	add    %rcx,%rdx
	shl    $0x7,%rdx
	lea    (%rdx,%rcx,8),%rdx
	lea    (%rdx,%rcx,2),%rdx
	add    %rcx,%rdx
	mov    %rdx,(%rax,%rcx,8)
	lea    (%rcx,%rsi,4),%rdx
	shl    $0x4,%rdx
	lea    (%rdx,%rcx,8),%rdx
	add    %rcx,%rdx
	shl    $0x6,%rdx
	lea    (%rdx,%rcx,4),%rdx
	lea    (%rdx,%rcx,2),%rdx
	mov    %rdx,0x800(%rax,%rcx,8)
	mov    %rcx,%rdx
	imul   $0x1d2f,%rdx,%rdx
	add    $0x8000,%rdx
	mov    %rdx,0x1000(%rax,%rcx,8)
	add    $0x1,%rcx
	cmp    $0xff,%rcx
	jle    1d0be <build_rgb_y_table+0x2e>
	mov    -0x8(%rbp),%r15
	leaveq 
	retq   
	data16 nopw %cs:0x0(%rax,%rax,1)
	nopl   (%rax)

001d140 <rgb_gray_convert>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %rbx,-0x8(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %r15,-0x28(%rbp)
	mov    0x268(%rdi),%rax
	mov    0x30(%rax),%r10
	mov    0x88(%rdi),%r12d
	xor    %edi,%edi
	jmp    1d1ba <rgb_gray_convert+0x7a>
	mov    %edi,%ebx
	movzbl (%r9,%rbx,1),%eax
	add    $0x100,%eax
	movslq %eax,%rax
	mov    (%r10,%rax,8),%rax
	movzbl (%r14,%rbx,1),%r13d
	add    (%r10,%r13,8),%rax
	movzbl (%r15,%rbx,1),%r13d
	add    $0x200,%r13d
	movslq %r13d,%r13
	add    (%r10,%r13,8),%rax
	sar    $0x10,%rax
	mov    %al,(%r11,%rbx,1)
	add    $0x1,%edi
	cmp    %r12d,%edi
	jb     1d172 <rgb_gray_convert+0x32>
	add    $0x1,%edx
	add    $0x8,%rcx
	xor    %edi,%edi
	add    $0xffffffff,%r8d
	test   %r8d,%r8d
	jns    1d1d9 <rgb_gray_convert+0x99>
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	leaveq 
	retq   
	mov    (%rsi),%rax
	mov    %edx,%ebx
	mov    (%rax,%rbx,8),%r14
	mov    0x8(%rsi),%rax
	mov    (%rax,%rbx,8),%r9
	mov    0x10(%rsi),%rax
	mov    (%rax,%rbx,8),%r15
	mov    (%rcx),%r11
	jmp    1d1ac <rgb_gray_convert+0x6c>
	nopw   0x0(%rax,%rax,1)

001d200 <null_convert>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %r12,-0x10(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %r15,-0x28(%rbp)
	mov    0x88(%rdi),%r15d
	xor    %r14d,%r14d
	movslq 0x38(%rdi),%r9
	cmp    $0x3,%r9d
	je     1d269 <null_convert+0x69>
	cmp    $0x4,%r9d
	je     1d284 <null_convert+0x84>
	mov    %rbx,-0x8(%rbp)
	jmp    1d2b7 <null_convert+0xb7>
	mov    %edi,%r12d
	movzbl (%r10,%r12,1),%r9d
	mov    %r9b,(%rax)
	movzbl (%r11,%r12,1),%r9d
	mov    %r9b,0x1(%rax)
	movzbl 0x0(%r13,%r12,1),%r9d
	mov    %r9b,0x2(%rax)
	add    $0x1,%edi
	add    $0x3,%rax
	cmp    %r15d,%edi
	jb     1d238 <null_convert+0x38>
	add    $0x1,%edx
	add    $0x8,%rcx
	add    $0xffffffff,%r8d
	test   %r8d,%r8d
	jns    1d2da <null_convert+0xda>
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	leaveq 
	retq   
	mov    %rbx,-0x8(%rbp)
	jmpq   1d334 <null_convert+0x134>
	mov    %edi,%r11d
	movzbl (%r12,%r11,1),%r11d
	mov    %r11b,(%rax,%r13,1)
	add    $0x1,%edi
	add    %r9,%rax
	cmp    %edi,%r15d
	ja     1d28d <null_convert+0x8d>
	add    $0x1,%ebx
	cmp    %ebx,%r9d
	jg     1d353 <null_convert+0x153>
	add    $0x1,%edx
	add    $0x8,%rcx
	add    $0xffffffff,%r8d
	test   %r8d,%r8d
	jns    1d369 <null_convert+0x169>
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	leaveq 
	retq   
	mov    (%rsi),%rax
	mov    %edx,%edi
	mov    (%rax,%rdi,8),%r10
	mov    0x8(%rsi),%rax
	mov    (%rax,%rdi,8),%r11
	mov    0x10(%rsi),%rax
	mov    (%rax,%rdi,8),%r13
	mov    (%rcx),%rax
	mov    %r14,%rdi
	jmpq   1d25d <null_convert+0x5d>
	mov    %edi,%r10d
	movzbl (%r12,%r10,1),%ebx
	mov    %bl,(%rax)
	movzbl (%r11,%r10,1),%ebx
	mov    %bl,0x1(%rax)
	movzbl 0x0(%r13,%r10,1),%ebx
	mov    %bl,0x2(%rax)
	movzbl (%r9,%r10,1),%ebx
	mov    %bl,0x3(%rax)
	add    $0x1,%edi
	add    $0x4,%rax
	cmp    %edi,%r15d
	ja     1d2fe <null_convert+0xfe>
	add    $0x1,%edx
	add    $0x8,%rcx
	add    $0xffffffff,%r8d
	test   %r8d,%r8d
	jns    1d374 <null_convert+0x174>
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	leaveq 
	retq   
	movslq %ebx,%r13
	mov    (%rsi,%r13,8),%rax
	mov    (%rax,%r10,8),%r12
	mov    (%rcx),%rax
	mov    %r14,%rdi
	jmpq   1d29f <null_convert+0x9f>
	mov    %edx,%r10d
	mov    %r14,%rbx
	jmpq   1d2a7 <null_convert+0xa7>
	mov    (%rsi),%rdi
	mov    %edx,%eax
	mov    (%rdi,%rax,8),%r12
	mov    0x8(%rsi),%rdi
	mov    (%rdi,%rax,8),%r11
	mov    0x10(%rsi),%rdi
	mov    (%rdi,%rax,8),%r13
	mov    0x18(%rsi),%rdi
	mov    (%rdi,%rax,8),%r9
	mov    (%rcx),%rax
	mov    %r14,%rdi
	jmp    1d328 <null_convert+0x128>
	nopl   (%rax)

001d3a0 <grayscale_convert>:
	push   %rbp
	mov    %rsp,%rbp
	mov    (%rsi),%rsi
	xor    %eax,%eax
	mov    0x88(%rdi),%r9d
	mov    %rsi,%rdi
	mov    %rdx,%rsi
	mov    %rcx,%rdx
	mov    %rax,%rcx
	callq  43f0 <jcopy_sample_rows@plt>
	leaveq 
	retq   
	data16 nopw %cs:0x0(%rax,%rax,1)
	xchg   %ax,%ax

001d3d0 <gray_rgb_convert>:
	push   %rbp
	mov    %rsp,%rbp
	mov    0x40(%rdi),%eax
	add    $0xfffffffa,%eax
	cmp    $0x9,%eax
	ja     1d3f6 <gray_rgb_convert+0x26>
	lea    0x3c3b6(%rip),%r9        # 5979c <mybuffer.5+0x84>
	movslq (%r9,%rax,4),%rax
	add    %r9,%rax
	jmpq   *%rax
	callq  1ce10 <gray_extxrgb_convert_internal>
	leaveq 
	retq   
	callq  1c1b0 <gray_rgb_convert_internal>
	leaveq 
	retq   
	callq  1c3b0 <gray_extrgb_convert_internal>
	leaveq 
	retq   
	callq  1c5b0 <gray_extrgbx_convert_internal>
	leaveq 
	retq   
	callq  1c7d0 <gray_extbgr_convert_internal>
	leaveq 
	retq   
	callq  1c9d0 <gray_extbgrx_convert_internal>
	leaveq 
	retq   
	callq  1cbf0 <gray_extxbgr_convert_internal>
	leaveq 
	retq   

001d420 <rgb_rgb_convert>:
	push   %rbp
	mov    %rsp,%rbp
	mov    0x40(%rdi),%eax
	add    $0xfffffffa,%eax
	cmp    $0x9,%eax
	ja     1d446 <rgb_rgb_convert+0x26>
	lea    0x3c38e(%rip),%r9        # 597c4 <mybuffer.5+0xac>
	movslq (%r9,%rax,4),%rax
	add    %r9,%rax
	jmpq   *%rax
	callq  1ce80 <rgb_extxrgb_convert_internal>
	leaveq 
	retq   
	callq  1c210 <rgb_rgb_convert_internal>
	leaveq 
	retq   
	callq  1c410 <rgb_extrgb_convert_internal>
	leaveq 
	retq   
	callq  1c620 <rgb_extrgbx_convert_internal>
	leaveq 
	retq   
	callq  1c830 <rgb_extbgr_convert_internal>
	leaveq 
	retq   
	callq  1ca40 <rgb_extbgrx_convert_internal>
	leaveq 
	retq   
	callq  1cc60 <rgb_extxbgr_convert_internal>
	leaveq 
	retq   

001d470 <ycck_cmyk_convert>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x60,%rsp
	mov    %r15,-0x58(%rbp)
	mov    %r14,-0x50(%rbp)
	mov    %r13,-0x48(%rbp)
	mov    %rsi,-0x28(%rbp)
	mov    %rbx,-0x38(%rbp)
	mov    %r12,-0x40(%rbp)
	mov    0x88(%rdi),%r12d
	mov    0x1a8(%rdi),%r14
	mov    0x268(%rdi),%rdi
	mov    0x10(%rdi),%rax
	mov    %rax,-0x18(%rbp)
	mov    0x18(%rdi),%r9
	mov    0x20(%rdi),%r15
	mov    0x28(%rdi),%r13
	xor    %edi,%edi
	jmpq   1d557 <ycck_cmyk_convert+0xe7>
	mov    %edi,%r10d
	movzbl (%rbx,%r10,1),%ecx
	movzbl (%rdx,%r10,1),%ebx
	mov    %rcx,%rdx
	add    (%rax,%rbx,4),%edx
	mov    $0xff,%eax
	sub    %edx,%eax
	movslq %eax,%rax
	movzbl (%rax,%r14,1),%eax
	movzbl (%r8,%r10,1),%edx
	mov    %al,(%rsi)
	mov    (%r15,%rbx,8),%rax
	add    0x0(%r13,%rdx,8),%rax
	sar    $0x10,%rax
	lea    (%rax,%rcx,1),%ebx
	mov    $0xff,%eax
	neg    %ebx
	add    %eax,%ebx
	movslq %ebx,%rbx
	movzbl (%rbx,%r14,1),%ebx
	mov    %bl,0x1(%rsi)
	add    (%r9,%rdx,4),%ecx
	sub    %ecx,%eax
	movslq %eax,%rax
	movzbl (%rax,%r14,1),%eax
	mov    %al,0x2(%rsi)
	movzbl (%r11,%r10,1),%eax
	mov    %al,0x3(%rsi)
	add    $0x1,%edi
	add    $0x4,%rsi
	mov    -0x10(%rbp),%rbx
	mov    -0x18(%rbp),%rax
	mov    -0x20(%rbp),%rdx
	cmp    %r12d,%edi
	jb     1d4c0 <ycck_cmyk_convert+0x50>
	mov    -0x30(%rbp),%rcx
	lea    0x1(%rcx),%edx
	mov    -0x8(%rbp),%rcx
	add    $0x8,%rcx
	xor    %edi,%edi
	mov    -0x28(%rbp),%rsi
	mov    -0x60(%rbp),%r8
	add    $0xffffffff,%r8d
	test   %r8d,%r8d
	jns    1d576 <ycck_cmyk_convert+0x106>
	mov    -0x40(%rbp),%r12
	mov    -0x38(%rbp),%rbx
	mov    -0x48(%rbp),%r13
	mov    -0x50(%rbp),%r14
	mov    -0x58(%rbp),%r15
	leaveq 
	retq   
	mov    (%rsi),%rbx
	mov    %edx,%r10d
	mov    (%rbx,%r10,8),%rbx
	mov    %r8,-0x60(%rbp)
	mov    %rbx,-0x10(%rbp)
	mov    0x8(%rsi),%r8
	mov    (%r8,%r10,8),%r8
	mov    %rdx,-0x30(%rbp)
	mov    0x10(%rsi),%rdx
	mov    (%rdx,%r10,8),%rdx
	mov    %rdx,-0x20(%rbp)
	mov    0x18(%rsi),%rsi
	mov    (%rsi,%r10,8),%r11
	mov    (%rcx),%rsi
	mov    %rcx,-0x8(%rbp)
	jmp    1d539 <ycck_cmyk_convert+0xc9>
	data16 nopw %cs:0x0(%rax,%rax,1)
	nopl   0x0(%rax)

001d5c0 <is_big_endian>:
	push   %rbp
	mov    %rsp,%rbp
	xor    %eax,%eax
	leaveq 
	retq   
	nopl   0x0(%rax,%rax,1)

001d5d0 <ycc_rgb565_convert_le>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x60,%rsp
	mov    %r15,-0x28(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %rsi,-0x40(%rbp)
	mov    %rbx,-0x8(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    0x88(%rdi),%ebx
	mov    0x1a8(%rdi),%r15
	mov    0x268(%rdi),%rax
	mov    0x10(%rax),%r14
	mov    0x18(%rax),%r12
	mov    0x20(%rax),%r9
	mov    %r9,-0x38(%rbp)
	mov    0x28(%rax),%r13
	xor    %edi,%edi
	jmpq   1d721 <ycc_rgb565_convert_le+0x151>
	movzbl (%r11),%ecx
	movzbl (%r10),%edx
	mov    %rcx,%rax
	add    (%r14,%rdx,4),%eax
	movslq %eax,%rax
	movzbl (%rax,%r15,1),%eax
	and    $0xf8,%eax
	shl    $0x8,%eax
	mov    (%r9,%rdx,8),%rdx
	mov    %rbx,-0x58(%rbp)
	movzbl (%r8),%ebx
	add    0x0(%r13,%rbx,8),%rdx
	sar    $0x10,%rdx
	add    %ecx,%edx
	movslq %edx,%rdx
	movzbl (%rdx,%r15,1),%edx
	and    $0xfc,%edx
	lea    (%rax,%rdx,8),%edx
	add    (%r12,%rbx,4),%ecx
	movslq %ecx,%rax
	movzbl (%r15,%rax,1),%eax
	shr    $0x3,%eax
	lea    (%rdx,%rax,1),%ebx
	movzbl 0x1(%r11),%edx
	movzbl 0x1(%r10),%ecx
	mov    %rdx,%rax
	add    (%r14,%rcx,4),%eax
	movslq %eax,%rax
	movzbl (%r15,%rax,1),%eax
	and    $0xf8,%eax
	shl    $0x8,%eax
	mov    (%r9,%rcx,8),%rcx
	movzbl 0x1(%r8),%r9d
	add    0x0(%r13,%r9,8),%rcx
	sar    $0x10,%rcx
	add    %edx,%ecx
	movslq %ecx,%rcx
	movzbl (%r15,%rcx,1),%ecx
	and    $0xfc,%ecx
	lea    (%rax,%rcx,8),%ecx
	add    (%r12,%r9,4),%edx
	movslq %edx,%rax
	movzbl (%r15,%rax,1),%eax
	shr    $0x3,%eax
	add    %ecx,%eax
	shl    $0x10,%eax
	add    %ebx,%eax
	mov    %eax,(%rsi)
	add    $0x2,%r11
	add    $0x2,%r10
	add    $0x2,%r8
	add    $0x4,%rsi
	add    $0x1,%edi
	mov    -0x38(%rbp),%r9
	mov    -0x58(%rbp),%rbx
	mov    %rbx,%rax
	shr    %eax
	cmp    %edi,%eax
	ja     1d61f <ycc_rgb565_convert_le+0x4f>
	mov    -0x48(%rbp),%rax
	lea    0x1(%rax),%edx
	mov    -0x30(%rbp),%rax
	lea    0x8(%rax),%rcx
	mov    %rbx,%rax
	and    $0x1,%eax
	test   %eax,%eax
	jne    1d73f <ycc_rgb565_convert_le+0x16f>
	xor    %edi,%edi
	mov    -0x50(%rbp),%r8
	mov    -0x40(%rbp),%rsi
	lea    -0x1(%r8),%eax
	test   %eax,%eax
	jns    1d7a1 <ycc_rgb565_convert_le+0x1d1>
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	mov    -0x20(%rbp),%r14
	mov    -0x28(%rbp),%r15
	leaveq 
	retq   
	movzbl (%r11),%r11d
	movzbl (%r10),%r10d
	mov    %r11,%rax
	add    (%r14,%r10,4),%eax
	movslq %eax,%rax
	movzbl (%r15,%rax,1),%edi
	and    $0xf8,%di
	shl    $0x8,%edi
	mov    (%r9,%r10,8),%rax
	movzbl (%r8),%r8d
	add    0x0(%r13,%r8,8),%rax
	sar    $0x10,%rax
	add    %r11d,%eax
	movslq %eax,%rax
	movzbl (%r15,%rax,1),%eax
	and    $0xfc,%ax
	lea    (%rdi,%rax,8),%edi
	add    (%r12,%r8,4),%r11d
	movslq %r11d,%rax
	movzbl (%r15,%rax,1),%eax
	shr    $0x3,%eax
	add    %edi,%eax
	mov    %ax,(%rsi)
	xor    %edi,%edi
	mov    -0x50(%rbp),%r8
	mov    -0x40(%rbp),%rsi
	jmp    1d721 <ycc_rgb565_convert_le+0x151>
	mov    (%rsi),%r8
	mov    %edx,%r10d
	mov    (%r8,%r10,8),%r11
	mov    0x8(%rsi),%r8
	mov    (%r8,%r10,8),%r8
	mov    0x10(%rsi),%rsi
	mov    (%rsi,%r10,8),%r10
	mov    (%rcx),%rsi
	mov    %rax,-0x50(%rbp)
	mov    %rsi,%rax
	and    $0x3,%rax
	test   %rax,%rax
	jne    1d7db <ycc_rgb565_convert_le+0x20b>
	mov    %rcx,-0x30(%rbp)
	mov    %rdx,-0x48(%rbp)
	jmpq   1d6f1 <ycc_rgb565_convert_le+0x121>
	movzbl (%r11),%edi
	mov    %rcx,-0x30(%rbp)
	movzbl (%r10),%ecx
	mov    %rdx,-0x48(%rbp)
	mov    %rdi,%rax
	add    (%r14,%rcx,4),%eax
	movslq %eax,%rax
	movzbl (%r15,%rax,1),%eax
	and    $0xf8,%ax
	shl    $0x8,%eax
	mov    (%r9,%rcx,8),%rcx
	movzbl (%r8),%edx
	add    0x0(%r13,%rdx,8),%rcx
	sar    $0x10,%rcx
	add    %edi,%ecx
	movslq %ecx,%rcx
	movzbl (%r15,%rcx,1),%ecx
	and    $0xfc,%cx
	lea    (%rax,%rcx,8),%ecx
	add    (%r12,%rdx,4),%edi
	movslq %edi,%rax
	movzbl (%r15,%rax,1),%eax
	shr    $0x3,%eax
	add    %ecx,%eax
	mov    %ax,(%rsi)
	add    $0x1,%r11
	add    $0x1,%r10
	add    $0x1,%r8
	add    $0x2,%rsi
	add    $0xffffffff,%ebx
	xor    %edi,%edi
	jmpq   1d6f1 <ycc_rgb565_convert_le+0x121>
	data16 nopw %cs:0x0(%rax,%rax,1)
	nopl   (%rax)

001d860 <ycc_rgb565D_convert_le>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x80,%rsp
	mov    %r15,-0x28(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    %rsi,-0x58(%rbp)
	mov    %rbx,-0x8(%rbp)
	mov    0x88(%rdi),%ebx
	mov    0x1a8(%rdi),%r15
	mov    0x268(%rdi),%rax
	mov    0x10(%rax),%r12
	mov    %r12,-0x40(%rbp)
	mov    0x18(%rax),%r14
	mov    0x20(%rax),%r9
	mov    %r9,-0x48(%rbp)
	mov    0x28(%rax),%r10
	mov    %r10,-0x50(%rbp)
	lea    0x3c046(%rip),%r11        # 59900 <dither_matrix>
	mov    0xa8(%rdi),%eax
	and    $0x3,%eax
	mov    %eax,%eax
	mov    (%r11,%rax,8),%rax
	mov    %rdx,%r13
	mov    %rcx,%rdx
	xor    %edi,%edi
	jmpq   1da42 <ycc_rgb565D_convert_le+0x1e2>
	movzbl (%r8),%r13d
	movzbl (%rsi),%edx
	mov    %rbx,-0x70(%rbp)
	mov    %r13,%rbx
	add    (%r12,%rdx,4),%ebx
	movslq %ebx,%rbx
	mov    %rdi,-0x78(%rbp)
	movzbl %al,%edi
	mov    %rcx,-0x38(%rbp)
	lea    (%r15,%rdi,1),%rcx
	movzbl (%rcx,%rbx,1),%ecx
	and    $0xf8,%ecx
	shl    $0x8,%ecx
	mov    (%r9,%rdx,8),%rdx
	movzbl (%r11),%ebx
	add    (%r10,%rbx,8),%rdx
	sar    $0x10,%rdx
	add    %r13d,%edx
	movslq %edx,%r10
	mov    %rax,%rdx
	and    $0xfe,%rdx
	shr    %rdx
	add    %r15,%rdx
	movzbl (%rdx,%r10,1),%edx
	and    $0xfc,%edx
	lea    (%rcx,%rdx,8),%edx
	add    (%r14,%rbx,4),%r13d
	movslq %r13d,%rcx
	add    %r15,%rcx
	movzbl (%rcx,%rdi,1),%ecx
	shr    $0x3,%ecx
	lea    (%rdx,%rcx,1),%r13d
	movzbl 0x1(%r8),%ebx
	movzbl 0x1(%rsi),%r10d
	mov    %rbx,%rcx
	add    (%r12,%r10,4),%ecx
	movslq %ecx,%rcx
	mov    $0xffffff00,%edx
	and    %rdx,%rax
	shr    $0x8,%rax
	shl    $0x18,%rdi
	lea    (%rdi,%rax,1),%rdx
	movzbl %dl,%edi
	lea    (%r15,%rdi,1),%rax
	movzbl (%rax,%rcx,1),%eax
	and    $0xf8,%eax
	shl    $0x8,%eax
	mov    (%r9,%r10,8),%rcx
	movzbl 0x1(%r11),%r10d
	mov    -0x50(%rbp),%r9
	add    (%r9,%r10,8),%rcx
	sar    $0x10,%rcx
	add    %ebx,%ecx
	movslq %ecx,%r9
	mov    %rdx,%rcx
	and    $0xfe,%rcx
	shr    %rcx
	add    %r15,%rcx
	movzbl (%rcx,%r9,1),%ecx
	and    $0xfc,%ecx
	lea    (%rax,%rcx,8),%ecx
	add    (%r14,%r10,4),%ebx
	movslq %ebx,%rax
	add    %r15,%rax
	movzbl (%rax,%rdi,1),%eax
	shr    $0x3,%eax
	add    %ecx,%eax
	shl    $0x10,%eax
	add    %r13d,%eax
	mov    -0x38(%rbp),%rcx
	mov    %eax,(%rcx)
	shr    $0x8,%rdx
	shl    $0x18,%rdi
	lea    (%rdx,%rdi,1),%rax
	add    $0x2,%r8
	add    $0x2,%rsi
	add    $0x2,%r11
	add    $0x4,%rcx
	mov    -0x78(%rbp),%rdx
	lea    0x1(%rdx),%edi
	mov    -0x48(%rbp),%r9
	mov    -0x70(%rbp),%rbx
	mov    -0x50(%rbp),%r10
	mov    %rbx,%rdx
	shr    %edx
	cmp    %edi,%edx
	ja     1d8d6 <ycc_rgb565D_convert_le+0x76>
	mov    -0x60(%rbp),%rdx
	lea    0x1(%rdx),%r13d
	mov    -0x30(%rbp),%rdx
	add    $0x8,%rdx
	mov    %rbx,%rdi
	and    $0x1,%edi
	test   %edi,%edi
	jne    1da64 <ycc_rgb565D_convert_le+0x204>
	xor    %edi,%edi
	mov    -0x58(%rbp),%rsi
	mov    -0x68(%rbp),%r8
	lea    -0x1(%r8),%ecx
	test   %ecx,%ecx
	jns    1daee <ycc_rgb565D_convert_le+0x28e>
	mov    -0x8(%rbp),%rbx
	mov    -0x10(%rbp),%r12
	mov    -0x18(%rbp),%r13
	mov    -0x20(%rbp),%r14
	mov    -0x28(%rbp),%r15
	leaveq 
	retq   
	movzbl (%r8),%edi
	movzbl (%rsi),%r8d
	mov    %rdi,%rsi
	add    (%r12,%r8,4),%esi
	movslq %esi,%rsi
	movzbl %al,%r12d
	mov    %rdx,-0x78(%rbp)
	lea    (%r15,%r12,1),%rdx
	movzbl (%rdx,%rsi,1),%esi
	and    $0xf8,%si
	shl    $0x8,%esi
	mov    (%r9,%r8,8),%rdx
	movzbl (%r11),%r11d
	add    (%r10,%r11,8),%rdx
	sar    $0x10,%rdx
	add    %edi,%edx
	movslq %edx,%r8
	mov    %rax,%rdx
	and    $0xfe,%rdx
	shr    %rdx
	add    %r15,%rdx
	movzbl (%rdx,%r8,1),%edx
	and    $0xfc,%dx
	lea    (%rsi,%rdx,8),%esi
	add    (%r14,%r11,4),%edi
	movslq %edi,%rdx
	add    %r15,%rdx
	movzbl (%r12,%rdx,1),%edx
	shr    $0x3,%edx
	add    %esi,%edx
	mov    %dx,(%rcx)
	mov    -0x78(%rbp),%rdx
	mov    -0x40(%rbp),%r12
	xor    %edi,%edi
	mov    -0x58(%rbp),%rsi
	mov    -0x68(%rbp),%r8
	jmpq   1da42 <ycc_rgb565D_convert_le+0x1e2>
	mov    (%rsi),%r8
	mov    %rcx,-0x68(%rbp)
	mov    %r13d,%ecx
	mov    (%r8,%rcx,8),%r8
	mov    %r13,-0x60(%rbp)
	mov    0x8(%rsi),%r11
	mov    (%r11,%rcx,8),%r11
	mov    0x10(%rsi),%rsi
	mov    (%rsi,%rcx,8),%rsi
	mov    (%rdx),%rcx
	mov    %rdx,-0x30(%rbp)
	mov    %rcx,%rdx
	and    $0x3,%rdx
	test   %rdx,%rdx
	je     1da11 <ycc_rgb565D_convert_le+0x1b1>
	movzbl (%r8),%r13d
	movzbl (%rsi),%edx
	mov    %r13,%rdi
	add    (%r12,%rdx,4),%edi
	movslq %edi,%rdi
	movzbl %al,%r12d
	mov    %rbx,-0x78(%rbp)
	lea    (%r15,%r12,1),%rbx
	movzbl (%rbx,%rdi,1),%edi
	and    $0xf8,%di
	shl    $0x8,%edi
	mov    (%r9,%rdx,8),%rdx
	movzbl (%r11),%ebx
	add    (%r10,%rbx,8),%rdx
	sar    $0x10,%rdx
	add    %r13d,%edx
	movslq %edx,%r10
	mov    %rax,%rdx
	and    $0xfe,%rdx
	shr    %rdx
	add    %r15,%rdx
	movzbl (%rdx,%r10,1),%edx
	and    $0xfc,%dx
	lea    (%rdi,%rdx,8),%edi
	add    (%r14,%rbx,4),%r13d
	movslq %r13d,%rdx
	add    %r15,%rdx
	movzbl (%r12,%rdx,1),%edx
	shr    $0x3,%edx
	add    %edi,%edx
	mov    %dx,(%rcx)
	add    $0x1,%r8
	add    $0x1,%rsi
	add    $0x1,%r11
	add    $0x2,%rcx
	mov    -0x78(%rbp),%rdx
	lea    -0x1(%rdx),%ebx
	mov    -0x50(%rbp),%r10
	mov    -0x40(%rbp),%r12
	xor    %edi,%edi
	jmpq   1da11 <ycc_rgb565D_convert_le+0x1b1>

001dbc0 <rgb_rgb565_convert_le>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %rbx,-0x8(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %r15,-0x28(%rbp)
	mov    0x88(%rdi),%r13d
	xor    %r14d,%r14d
	jmpq   1dc8f <rgb_rgb565_convert_le+0xcf>
	movzbl (%rdi),%eax
	and    $0xf8,%eax
	shl    $0x8,%eax
	movzbl (%r10),%r11d
	and    $0xfc,%r11d
	lea    (%rax,%r11,8),%r11d
	movzbl (%rbx),%eax
	shr    $0x3,%eax
	lea    (%r11,%rax,1),%r15d
	movzbl 0x1(%rdi),%eax
	and    $0xf8,%eax
	shl    $0x8,%eax
	movzbl 0x1(%r10),%r11d
	and    $0xfc,%r11d
	lea    (%rax,%r11,8),%r11d
	movzbl 0x1(%rbx),%eax
	shr    $0x3,%eax
	add    %r11d,%eax
	shl    $0x10,%eax
	add    %r15d,%eax
	mov    %eax,(%r9)
	add    $0x2,%rdi
	add    $0x2,%r10
	add    $0x2,%rbx
	add    $0x4,%r9
	add    $0x1,%r12d
	mov    %r13,%rax
	shr    %eax
	cmp    %r12d,%eax
	ja     1dbeb <rgb_rgb565_convert_le+0x2b>
	add    $0x1,%edx
	add    $0x8,%rcx
	mov    %r13,%rax
	and    $0x1,%eax
	test   %eax,%eax
	je     1dc8f <rgb_rgb565_convert_le+0xcf>
	movzbl (%rdi),%eax
	and    $0xf8,%ax
	shl    $0x8,%eax
	movzbl (%r10),%edi
	and    $0xfc,%di
	lea    (%rax,%rdi,8),%edi
	movzbl (%rbx),%eax
	shr    $0x3,%eax
	add    %edi,%eax
	mov    %ax,(%r9)
	add    $0xffffffff,%r8d
	test   %r8d,%r8d
	jns    1dcae <rgb_rgb565_convert_le+0xee>
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	leaveq 
	retq   
	mov    (%rsi),%rax
	mov    %edx,%ebx
	mov    (%rax,%rbx,8),%rdi
	mov    0x8(%rsi),%rax
	mov    (%rax,%rbx,8),%r10
	mov    0x10(%rsi),%rax
	mov    (%rax,%rbx,8),%rbx
	mov    (%rcx),%r9
	mov    %r9,%rax
	and    $0x3,%rax
	test   %rax,%rax
	jne    1dcde <rgb_rgb565_convert_le+0x11e>
	mov    %r14,%r12
	jmpq   1dc52 <rgb_rgb565_convert_le+0x92>
	movzbl (%rdi),%eax
	and    $0xf8,%ax
	shl    $0x8,%eax
	movzbl (%r10),%r11d
	and    $0xfc,%r11w
	lea    (%rax,%r11,8),%r11d
	movzbl (%rbx),%eax
	shr    $0x3,%eax
	add    %r11d,%eax
	mov    %ax,(%r9)
	add    $0x1,%rdi
	add    $0x1,%r10
	add    $0x1,%rbx
	add    $0x2,%r9
	add    $0xffffffff,%r13d
	mov    %r14,%r12
	jmpq   1dc52 <rgb_rgb565_convert_le+0x92>
	nop

001dd20 <rgb_rgb565D_convert_le>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x50,%rsp
	mov    %rsi,-0x40(%rbp)
	mov    %rbx,-0x8(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %r15,-0x28(%rbp)
	mov    0x1a8(%rdi),%r14
	mov    0x88(%rdi),%r12d
	lea    0x3bbab(%rip),%rbx        # 59900 <dither_matrix>
	mov    0xa8(%rdi),%eax
	and    $0x3,%eax
	mov    %eax,%eax
	mov    (%rbx,%rax,8),%rax
	mov    $0xffffff00,%ebx
	xor    %edi,%edi
	jmpq   1de76 <rgb_rgb565D_convert_le+0x156>
	mov    %rax,%rcx
	and    %rbx,%rcx
	shr    $0x8,%rcx
	movzbl %al,%r15d
	mov    %r15,%rdx
	shl    $0x18,%rdx
	lea    (%rdx,%rcx,1),%r11
	movzbl %r11b,%ebx
	lea    (%r14,%rbx,1),%rcx
	movzbl 0x1(%r10),%edx
	movzbl (%rcx,%rdx,1),%ecx
	and    $0xf8,%ecx
	shl    $0x8,%ecx
	mov    %r11,%rdx
	and    $0xfe,%rdx
	shr    %rdx
	add    %r14,%rdx
	movzbl 0x1(%r8),%r13d
	movzbl (%rdx,%r13,1),%edx
	and    $0xfc,%edx
	lea    (%rcx,%rdx,8),%edx
	movzbl 0x1(%rsi),%ecx
	add    %r14,%rcx
	movzbl (%rcx,%rbx,1),%ecx
	shr    $0x3,%ecx
	add    %ecx,%edx
	shl    $0x10,%edx
	lea    (%r14,%r15,1),%r13
	movzbl (%r10),%ecx
	movzbl 0x0(%r13,%rcx,1),%ecx
	and    $0xf8,%ecx
	shl    $0x8,%ecx
	and    $0xfe,%rax
	shr    %rax
	add    %r14,%rax
	movzbl (%r8),%r13d
	movzbl (%rax,%r13,1),%eax
	and    $0xfc,%eax
	lea    (%rcx,%rax,8),%ecx
	movzbl (%rsi),%eax
	add    %r14,%rax
	movzbl (%rax,%r15,1),%eax
	shr    $0x3,%eax
	add    %ecx,%eax
	add    %edx,%eax
	mov    %eax,(%r9)
	shr    $0x8,%r11
	shl    $0x18,%rbx
	lea    (%r11,%rbx,1),%rax
	add    $0x2,%r10
	add    $0x2,%r8
	add    $0x2,%rsi
	add    $0x4,%r9
	add    $0x1,%edi
	mov    $0xffffff00,%ebx
	mov    %r12,%rcx
	shr    %ecx
	cmp    %edi,%ecx
	ja     1dd70 <rgb_rgb565D_convert_le+0x50>
	mov    -0x48(%rbp),%rcx
	lea    0x1(%rcx),%edx
	mov    -0x38(%rbp),%rcx
	add    $0x8,%rcx
	mov    %r12,%rdi
	and    $0x1,%edi
	test   %edi,%edi
	jne    1de95 <rgb_rgb565D_convert_le+0x175>
	xor    %edi,%edi
	mov    -0x30(%rbp),%r8
	mov    -0x40(%rbp),%rsi
	lea    -0x1(%r8),%r11d
	test   %r11d,%r11d
	jns    1def2 <rgb_rgb565D_convert_le+0x1d2>
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	leaveq 
	retq   
	movzbl %al,%r13d
	lea    (%r14,%r13,1),%r11
	movzbl (%r10),%edi
	movzbl (%r11,%rdi,1),%edi
	and    $0xf8,%di
	shl    $0x8,%edi
	mov    %rax,%r10
	and    $0xfe,%r10
	shr    %r10
	add    %r14,%r10
	movzbl (%r8),%r8d
	movzbl (%r10,%r8,1),%r8d
	and    $0xfc,%r8w
	lea    (%rdi,%r8,8),%edi
	movzbl (%rsi),%esi
	add    %r14,%rsi
	movzbl 0x0(%r13,%rsi,1),%esi
	shr    $0x3,%esi
	add    %edi,%esi
	mov    %si,(%r9)
	xor    %edi,%edi
	mov    -0x30(%rbp),%r8
	mov    -0x40(%rbp),%rsi
	jmp    1de76 <rgb_rgb565D_convert_le+0x156>
	mov    (%rsi),%r8
	mov    %edx,%r9d
	mov    (%r8,%r9,8),%r10
	mov    0x8(%rsi),%r8
	mov    (%r8,%r9,8),%r8
	mov    0x10(%rsi),%rsi
	mov    (%rsi,%r9,8),%rsi
	mov    (%rcx),%r9
	mov    %r9,%r13
	and    $0x3,%r13
	test   %r13,%r13
	jne    1df2c <rgb_rgb565D_convert_le+0x20c>
	mov    %r11,-0x30(%rbp)
	mov    %rcx,-0x38(%rbp)
	mov    %rdx,-0x48(%rbp)
	jmpq   1de46 <rgb_rgb565D_convert_le+0x126>
	movzbl %al,%r15d
	lea    (%r14,%r15,1),%r13
	mov    %r11,-0x30(%rbp)
	movzbl (%r10),%r11d
	movzbl 0x0(%r13,%r11,1),%r11d
	and    $0xf8,%r11w
	shl    $0x8,%r11d
	mov    %rax,%r13
	and    $0xfe,%r13
	shr    %r13
	add    %r14,%r13
	mov    %rcx,-0x38(%rbp)
	movzbl (%r8),%ecx
	movzbl 0x0(%r13,%rcx,1),%ecx
	and    $0xfc,%cx
	lea    (%r11,%rcx,8),%r11d
	movzbl (%rsi),%ecx
	add    %r14,%rcx
	movzbl (%r15,%rcx,1),%ecx
	shr    $0x3,%ecx
	add    %r11d,%ecx
	mov    %cx,(%r9)
	add    $0x1,%r10
	add    $0x1,%r8
	add    $0x1,%rsi
	add    $0x2,%r9
	add    $0xffffffff,%r12d
	mov    %rdx,-0x48(%rbp)
	jmpq   1de46 <rgb_rgb565D_convert_le+0x126>
	data16 nopw %cs:0x0(%rax,%rax,1)

001dfb0 <gray_rgb565_convert_le>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %r12,-0x8(%rbp)
	mov    %r13,-0x10(%rbp)
	mov    %r14,-0x18(%rbp)
	mov    %r15,-0x20(%rbp)
	mov    0x88(%rdi),%r12d
	xor    %r13d,%r13d
	jmpq   1e083 <gray_rgb565_convert_le+0xd3>
	movzbl (%rax),%r10d
	mov    %r10,%r9
	and    $0xf8,%r9d
	shl    $0x8,%r9d
	mov    %r10,%r14
	and    $0xfc,%r14d
	lea    (%r9,%r14,8),%r9d
	shr    $0x3,%r10d
	lea    (%r9,%r10,1),%r15d
	movzbl 0x1(%rax),%r9d
	mov    %r9,%r10
	and    $0xf8,%r10d
	shl    $0x8,%r10d
	mov    %r9,%r14
	and    $0xfc,%r14d
	lea    (%r10,%r14,8),%r10d
	shr    $0x3,%r9d
	add    %r10d,%r9d
	shl    $0x10,%r9d
	add    %r15d,%r9d
	mov    %r9d,(%rdi)
	add    $0x2,%rax
	add    $0x4,%rdi
	add    $0x1,%r11d
	mov    %r12,%r9
	shr    %r9d
	cmp    %r11d,%r9d
	ja     1dfd7 <gray_rgb565_convert_le+0x27>
	add    $0x1,%edx
	add    $0x8,%rcx
	mov    %r12,%r9
	and    $0x1,%r9d
	test   %r9d,%r9d
	je     1e083 <gray_rgb565_convert_le+0xd3>
	movzbl (%rax),%eax
	mov    %rax,%r9
	and    $0xf8,%r9d
	shl    $0x8,%r9d
	mov    %rax,%r10
	and    $0xfc,%r10d
	lea    (%r9,%r10,8),%r9d
	shr    $0x3,%eax
	add    %r9d,%eax
	mov    %ax,(%rdi)
	add    $0xffffffff,%r8d
	test   %r8d,%r8d
	jns    1e09e <gray_rgb565_convert_le+0xee>
	mov    -0x20(%rbp),%r15
	mov    -0x18(%rbp),%r14
	mov    -0x10(%rbp),%r13
	mov    -0x8(%rbp),%r12
	leaveq 
	retq   
	mov    (%rsi),%rdi
	mov    %edx,%eax
	mov    (%rdi,%rax,8),%rax
	mov    (%rcx),%rdi
	mov    %rdi,%r9
	and    $0x3,%r9
	test   %r9,%r9
	jne    1e0bb <gray_rgb565_convert_le+0x10b>
	mov    %r13,%r11
	jmp    1e03d <gray_rgb565_convert_le+0x8d>
	movzbl (%rax),%r10d
	mov    %r10,%r9
	and    $0xf8,%r9d
	shl    $0x8,%r9d
	mov    %r10,%r11
	and    $0xfc,%r11d
	lea    (%r9,%r11,8),%r9d
	shr    $0x3,%r10d
	add    %r10d,%r9d
	mov    %r9w,(%rdi)
	add    $0x1,%rax
	add    $0x2,%rdi
	add    $0xffffffff,%r12d
	mov    %r13,%r11
	jmpq   1e03d <gray_rgb565_convert_le+0x8d>
	nopw   0x0(%rax,%rax,1)

001e100 <gray_rgb565D_convert_le>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x40,%rsp
	mov    %rbx,-0x8(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %r15,-0x28(%rbp)
	mov    0x1a8(%rdi),%r13
	mov    0x88(%rdi),%r11d
	lea    0x3b7cf(%rip),%rbx        # 59900 <dither_matrix>
	mov    0xa8(%rdi),%eax
	and    $0x3,%eax
	mov    %eax,%eax
	mov    (%rbx,%rax,8),%rax
	mov    $0xffffff00,%r15d
	xor    %edi,%edi
	jmpq   1e209 <gray_rgb565D_convert_le+0x109>
	movzbl %al,%ecx
	lea    0x0(%r13,%rcx,1),%rdx
	movzbl (%r9),%r10d
	movzbl (%rdx,%r10,1),%edx
	mov    %rdx,%r10
	and    $0xf8,%r10d
	shl    $0x8,%r10d
	mov    %rdx,%r12
	and    $0xfc,%r12d
	lea    (%r10,%r12,8),%r10d
	shr    $0x3,%edx
	lea    (%r10,%rdx,1),%r14d
	and    %r15,%rax
	shr    $0x8,%rax
	shl    $0x18,%rcx
	add    %rcx,%rax
	movzbl %al,%ecx
	lea    0x0(%r13,%rcx,1),%rdx
	movzbl 0x1(%r9),%r10d
	movzbl (%rdx,%r10,1),%edx
	mov    %rdx,%r10
	and    $0xf8,%r10d
	shl    $0x8,%r10d
	mov    %rdx,%r12
	and    $0xfc,%r12d
	lea    (%r10,%r12,8),%r10d
	shr    $0x3,%edx
	add    %r10d,%edx
	shl    $0x10,%edx
	add    %r14d,%edx
	mov    %edx,(%rbx)
	shr    $0x8,%rax
	shl    $0x18,%rcx
	add    %rcx,%rax
	add    $0x2,%r9
	add    $0x4,%rbx
	add    $0x1,%edi
	mov    %r11,%rcx
	shr    %ecx
	cmp    %edi,%ecx
	ja     1e14d <gray_rgb565D_convert_le+0x4d>
	mov    -0x38(%rbp),%rcx
	lea    0x1(%rcx),%edx
	mov    -0x30(%rbp),%rcx
	add    $0x8,%rcx
	mov    %r11,%rdi
	and    $0x1,%edi
	test   %edi,%edi
	jne    1e228 <gray_rgb565D_convert_le+0x128>
	xor    %edi,%edi
	add    $0xffffffff,%r8d
	test   %r8d,%r8d
	jns    1e262 <gray_rgb565D_convert_le+0x162>
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	leaveq 
	retq   
	movzbl %al,%edi
	lea    0x0(%r13,%rdi,1),%r10
	movzbl (%r9),%edi
	movzbl (%r10,%rdi,1),%edi
	mov    %rdi,%r9
	and    $0xf8,%r9d
	shl    $0x8,%r9d
	mov    %rdi,%r10
	and    $0xfc,%r10d
	lea    (%r9,%r10,8),%r9d
	shr    $0x3,%edi
	add    %r9d,%edi
	mov    %di,(%rbx)
	xor    %edi,%edi
	jmp    1e209 <gray_rgb565D_convert_le+0x109>
	mov    (%rsi),%rbx
	mov    %edx,%r9d
	mov    (%rbx,%r9,8),%r9
	mov    (%rcx),%rbx
	mov    %rbx,%r10
	and    $0x3,%r10
	test   %r10,%r10
	jne    1e288 <gray_rgb565D_convert_le+0x188>
	mov    %rdx,-0x38(%rbp)
	mov    %rcx,-0x30(%rbp)
	jmpq   1e1e1 <gray_rgb565D_convert_le+0xe1>
	movzbl %al,%r10d
	lea    0x0(%r13,%r10,1),%r12
	movzbl (%r9),%r10d
	movzbl (%r12,%r10,1),%r12d
	mov    %r12,%r10
	and    $0xf8,%r10d
	shl    $0x8,%r10d
	mov    %r12,%r14
	and    $0xfc,%r14d
	lea    (%r10,%r14,8),%r10d
	shr    $0x3,%r12d
	add    %r12d,%r10d
	mov    %r10w,(%rbx)
	add    $0x1,%r9
	add    $0x2,%rbx
	add    $0xffffffff,%r11d
	mov    %rdx,-0x38(%rbp)
	mov    %rcx,-0x30(%rbp)
	jmpq   1e1e1 <gray_rgb565D_convert_le+0xe1>
	nopw   0x0(%rax,%rax,1)

001e2e0 <ycc_rgb565_convert_be>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x60,%rsp
	mov    %r15,-0x28(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %rsi,-0x40(%rbp)
	mov    %rbx,-0x8(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    0x88(%rdi),%ebx
	mov    0x1a8(%rdi),%r15
	mov    0x268(%rdi),%rax
	mov    0x10(%rax),%r13
	mov    0x18(%rax),%r12
	mov    0x20(%rax),%r14
	mov    0x28(%rax),%r9
	mov    %r9,-0x38(%rbp)
	xor    %edi,%edi
	jmpq   1e44b <ycc_rgb565_convert_be+0x16b>
	movzbl (%r11),%ecx
	mov    (%r14,%rcx,8),%rax
	movzbl (%rsi),%edx
	add    (%r9,%rdx,8),%rax
	sar    $0x10,%rax
	mov    %rbx,-0x58(%rbp)
	movzbl (%r8),%ebx
	add    %ebx,%eax
	movslq %eax,%rax
	movzbl (%rax,%r15,1),%eax
	mov    %rdi,-0x60(%rbp)
	mov    %rax,%rdi
	shr    $0x5,%edi
	mov    0x0(%r13,%rcx,4),%ecx
	add    %ebx,%ecx
	movslq %ecx,%rcx
	movzbl (%rcx,%r15,1),%ecx
	and    $0xf8,%ecx
	add    %edi,%ecx
	and    $0x1c,%eax
	shl    $0xb,%eax
	add    %eax,%ecx
	add    (%r12,%rdx,4),%ebx
	movslq %ebx,%rax
	movzbl (%rax,%r15,1),%eax
	and    $0xf8,%eax
	shl    $0x5,%eax
	add    %eax,%ecx
	shl    $0x10,%ecx
	movzbl 0x1(%r11),%edi
	mov    (%r14,%rdi,8),%rax
	movzbl 0x1(%rsi),%ebx
	add    (%r9,%rbx,8),%rax
	sar    $0x10,%rax
	movzbl 0x1(%r8),%edx
	add    %edx,%eax
	movslq %eax,%rax
	movzbl (%rax,%r15,1),%eax
	mov    %rax,%r9
	shr    $0x5,%r9d
	mov    0x0(%r13,%rdi,4),%edi
	add    %edx,%edi
	movslq %edi,%rdi
	movzbl (%r15,%rdi,1),%edi
	and    $0xf8,%edi
	add    %r9d,%edi
	and    $0x1c,%eax
	shl    $0xb,%eax
	add    %eax,%edi
	add    (%r12,%rbx,4),%edx
	movslq %edx,%rax
	movzbl (%r15,%rax,1),%eax
	and    $0xf8,%eax
	shl    $0x5,%eax
	add    %edi,%eax
	add    %ecx,%eax
	mov    %eax,(%r10)
	add    $0x2,%r11
	add    $0x2,%rsi
	add    $0x2,%r8
	add    $0x4,%r10
	mov    -0x60(%rbp),%rax
	lea    0x1(%rax),%edi
	mov    -0x58(%rbp),%rbx
	mov    -0x38(%rbp),%r9
	mov    %rbx,%rax
	shr    %eax
	cmp    %edi,%eax
	ja     1e32f <ycc_rgb565_convert_be+0x4f>
	mov    -0x48(%rbp),%rax
	lea    0x1(%rax),%edx
	mov    -0x30(%rbp),%rax
	lea    0x8(%rax),%rcx
	mov    %rbx,%rax
	and    $0x1,%eax
	test   %eax,%eax
	jne    1e46d <ycc_rgb565_convert_be+0x18d>
	xor    %edi,%edi
	mov    -0x50(%rbp),%r8
	mov    -0x40(%rbp),%rsi
	lea    -0x1(%r8),%eax
	test   %eax,%eax
	jns    1e4de <ycc_rgb565_convert_be+0x1fe>
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	mov    -0x20(%rbp),%r14
	mov    -0x28(%rbp),%r15
	leaveq 
	retq   
	movzbl (%r11),%edi
	mov    (%r14,%rdi,8),%rax
	movzbl (%rsi),%r11d
	add    (%r9,%r11,8),%rax
	sar    $0x10,%rax
	movzbl (%r8),%esi
	add    %esi,%eax
	movslq %eax,%rax
	movzbl (%r15,%rax,1),%eax
	mov    %rax,%r8
	shr    $0x5,%r8d
	mov    0x0(%r13,%rdi,4),%edi
	add    %esi,%edi
	movslq %edi,%rdi
	movzbl (%r15,%rdi,1),%edi
	and    $0xf8,%edi
	add    %r8d,%edi
	and    $0x1c,%eax
	shl    $0xb,%eax
	add    %eax,%edi
	add    (%r12,%r11,4),%esi
	movslq %esi,%rax
	movzbl (%r15,%rax,1),%eax
	and    $0xf8,%ax
	shl    $0x5,%eax
	add    %edi,%eax
	mov    %ax,(%r10)
	xor    %edi,%edi
	mov    -0x50(%rbp),%r8
	mov    -0x40(%rbp),%rsi
	jmpq   1e44b <ycc_rgb565_convert_be+0x16b>
	mov    0x10(%rsi),%r8
	mov    %edx,%r10d
	mov    (%r8,%r10,8),%r11
	mov    (%rsi),%r8
	mov    (%r8,%r10,8),%r8
	mov    0x8(%rsi),%rsi
	mov    (%rsi,%r10,8),%rsi
	mov    (%rcx),%r10
	mov    %rax,-0x50(%rbp)
	mov    %r10,%rax
	and    $0x3,%rax
	test   %rax,%rax
	jne    1e518 <ycc_rgb565_convert_be+0x238>
	mov    %rcx,-0x30(%rbp)
	mov    %rdx,-0x48(%rbp)
	jmpq   1e41b <ycc_rgb565_convert_be+0x13b>
	movzbl (%r11),%edi
	mov    %rcx,-0x30(%rbp)
	mov    (%r14,%rdi,8),%rax
	mov    %rdx,-0x48(%rbp)
	movzbl (%rsi),%edx
	add    (%r9,%rdx,8),%rax
	sar    $0x10,%rax
	movzbl (%r8),%ecx
	add    %ecx,%eax
	movslq %eax,%rax
	movzbl (%r15,%rax,1),%eax
	mov    %rax,%r9
	shr    $0x5,%r9d
	mov    0x0(%r13,%rdi,4),%edi
	add    %ecx,%edi
	movslq %edi,%rdi
	movzbl (%r15,%rdi,1),%edi
	and    $0xf8,%edi
	add    %r9d,%edi
	and    $0x1c,%eax
	shl    $0xb,%eax
	add    %eax,%edi
	add    (%r12,%rdx,4),%ecx
	movslq %ecx,%rax
	movzbl (%r15,%rax,1),%eax
	and    $0xf8,%ax
	shl    $0x5,%eax
	add    %edi,%eax
	mov    %ax,(%r10)
	add    $0x1,%r11
	add    $0x1,%rsi
	add    $0x1,%r8
	add    $0x2,%r10
	add    $0xffffffff,%ebx
	mov    -0x38(%rbp),%r9
	xor    %edi,%edi
	jmpq   1e41b <ycc_rgb565_convert_be+0x13b>
	nop

001e5a0 <ycc_rgb565D_convert_be>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x80,%rsp
	mov    %r15,-0x28(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    %rsi,-0x58(%rbp)
	mov    %rbx,-0x8(%rbp)
	mov    0x88(%rdi),%ebx
	mov    0x1a8(%rdi),%r15
	mov    0x268(%rdi),%rax
	mov    0x10(%rax),%r10
	mov    %r10,-0x40(%rbp)
	mov    0x18(%rax),%r14
	mov    0x20(%rax),%r11
	mov    %r11,-0x48(%rbp)
	mov    0x28(%rax),%r12
	mov    %r12,-0x50(%rbp)
	lea    0x3b306(%rip),%r9        # 59900 <dither_matrix>
	mov    0xa8(%rdi),%eax
	and    $0x3,%eax
	mov    %eax,%eax
	mov    (%r9,%rax,8),%rdi
	mov    %rcx,%rax
	xor    %r9d,%r9d
	jmpq   1e7a5 <ycc_rgb565D_convert_be+0x205>
	movzbl (%r8),%edx
	mov    (%r11,%rdx,8),%rax
	mov    %rbx,-0x78(%rbp)
	movzbl (%rsi),%ebx
	add    (%r12,%rbx,8),%rax
	sar    $0x10,%rax
	mov    %r9,-0x80(%rbp)
	movzbl 0x0(%r13),%r9d
	add    %r9d,%eax
	movslq %eax,%rax
	mov    %rcx,-0x38(%rbp)
	mov    %rdi,%rcx
	and    $0xfe,%rcx
	shr    %rcx
	add    %r15,%rcx
	movzbl (%rcx,%rax,1),%eax
	mov    %rax,%rcx
	shr    $0x5,%ecx
	mov    (%r10,%rdx,4),%edx
	add    %r9d,%edx
	movslq %edx,%r10
	movzbl %dil,%edx
	mov    %rdi,-0x68(%rbp)
	lea    (%r15,%rdx,1),%rdi
	movzbl (%rdi,%r10,1),%edi
	and    $0xf8,%edi
	add    %edi,%ecx
	and    $0x1c,%eax
	shl    $0xb,%eax
	add    %eax,%ecx
	add    (%r14,%rbx,4),%r9d
	movslq %r9d,%rax
	add    %r15,%rax
	movzbl (%rax,%rdx,1),%eax
	and    $0xf8,%eax
	shl    $0x5,%eax
	add    %eax,%ecx
	shl    $0x10,%ecx
	movzbl 0x1(%r8),%r9d
	mov    (%r11,%r9,8),%rax
	movzbl 0x1(%rsi),%r11d
	add    (%r12,%r11,8),%rax
	sar    $0x10,%rax
	movzbl 0x1(%r13),%edi
	add    %edi,%eax
	movslq %eax,%r10
	mov    -0x68(%rbp),%rax
	mov    $0xffffff00,%ebx
	and    %rbx,%rax
	shr    $0x8,%rax
	shl    $0x18,%rdx
	add    %rax,%rdx
	mov    %rdx,%rax
	and    $0xfe,%rax
	shr    %rax
	add    %r15,%rax
	movzbl (%rax,%r10,1),%eax
	mov    %rax,%r10
	shr    $0x5,%r10d
	mov    -0x40(%rbp),%rbx
	mov    (%rbx,%r9,4),%ebx
	add    %edi,%ebx
	movslq %ebx,%r9
	movzbl %dl,%ebx
	lea    (%r15,%rbx,1),%r12
	movzbl (%r12,%r9,1),%r9d
	and    $0xf8,%r9d
	add    %r10d,%r9d
	and    $0x1c,%eax
	shl    $0xb,%eax
	add    %eax,%r9d
	add    (%r14,%r11,4),%edi
	movslq %edi,%rax
	add    %r15,%rax
	movzbl (%rax,%rbx,1),%eax
	and    $0xf8,%eax
	shl    $0x5,%eax
	add    %r9d,%eax
	add    %eax,%ecx
	mov    -0x38(%rbp),%rax
	mov    %ecx,(%rax)
	shr    $0x8,%rdx
	shl    $0x18,%rbx
	lea    (%rdx,%rbx,1),%rdi
	add    $0x2,%r8
	add    $0x2,%rsi
	add    $0x2,%r13
	lea    0x4(%rax),%rcx
	mov    -0x80(%rbp),%rax
	lea    0x1(%rax),%r9d
	mov    -0x78(%rbp),%rbx
	mov    -0x40(%rbp),%r10
	mov    -0x48(%rbp),%r11
	mov    -0x50(%rbp),%r12
	mov    %rbx,%rax
	shr    %eax
	cmp    %r9d,%eax
	ja     1e614 <ycc_rgb565D_convert_be+0x74>
	mov    -0x60(%rbp),%rax
	lea    0x1(%rax),%edx
	mov    -0x30(%rbp),%rax
	add    $0x8,%rax
	mov    %rbx,%r9
	and    $0x1,%r9d
	test   %r9d,%r9d
	jne    1e7c7 <ycc_rgb565D_convert_be+0x227>
	xor    %r9d,%r9d
	mov    -0x58(%rbp),%rsi
	mov    -0x70(%rbp),%r8
	lea    -0x1(%r8),%ecx
	test   %ecx,%ecx
	jns    1e866 <ycc_rgb565D_convert_be+0x2c6>
	mov    -0x8(%rbp),%rbx
	mov    -0x10(%rbp),%r12
	mov    -0x18(%rbp),%r13
	mov    -0x20(%rbp),%r14
	mov    -0x28(%rbp),%r15
	leaveq 
	retq   
	movzbl (%r8),%r8d
	mov    (%r11,%r8,8),%r9
	movzbl (%rsi),%r11d
	add    (%r12,%r11,8),%r9
	sar    $0x10,%r9
	movzbl 0x0(%r13),%r12d
	lea    (%r9,%r12,1),%esi
	movslq %esi,%r9
	mov    %rdi,%rsi
	and    $0xfe,%rsi
	shr    %rsi
	add    %r15,%rsi
	movzbl (%rsi,%r9,1),%esi
	mov    %rsi,%r13
	shr    $0x5,%r13d
	mov    (%r10,%r8,4),%r8d
	add    %r12d,%r8d
	movslq %r8d,%r8
	movzbl %dil,%r10d
	lea    (%r15,%r10,1),%r9
	movzbl (%r9,%r8,1),%r8d
	and    $0xf8,%r8d
	add    %r13d,%r8d
	and    $0x1c,%esi
	shl    $0xb,%esi
	add    %esi,%r8d
	add    (%r14,%r11,4),%r12d
	movslq %r12d,%rsi
	add    %r15,%rsi
	movzbl (%r10,%rsi,1),%esi
	and    $0xf8,%si
	shl    $0x5,%esi
	add    %r8d,%esi
	mov    %si,(%rcx)
	mov    -0x40(%rbp),%r10
	mov    -0x48(%rbp),%r11
	mov    -0x50(%rbp),%r12
	xor    %r9d,%r9d
	mov    -0x58(%rbp),%rsi
	mov    -0x70(%rbp),%r8
	jmpq   1e7a5 <ycc_rgb565D_convert_be+0x205>
	mov    0x10(%rsi),%r8
	mov    %rcx,-0x70(%rbp)
	mov    %edx,%ecx
	mov    (%r8,%rcx,8),%r8
	mov    %rdx,-0x60(%rbp)
	mov    (%rsi),%rdx
	mov    (%rdx,%rcx,8),%r13
	mov    0x8(%rsi),%rdx
	mov    (%rdx,%rcx,8),%rsi
	mov    (%rax),%rcx
	mov    %rax,-0x30(%rbp)
	mov    %rcx,%rax
	and    $0x3,%rax
	test   %rax,%rax
	je     1e771 <ycc_rgb565D_convert_be+0x1d1>
	movzbl (%r8),%edx
	mov    (%r11,%rdx,8),%rax
	movzbl (%rsi),%r11d
	add    (%r12,%r11,8),%rax
	sar    $0x10,%rax
	movzbl 0x0(%r13),%r9d
	add    %r9d,%eax
	movslq %eax,%r12
	mov    %rdi,%rax
	and    $0xfe,%rax
	shr    %rax
	add    %r15,%rax
	movzbl (%rax,%r12,1),%eax
	mov    %rax,%r12
	shr    $0x5,%r12d
	mov    (%r10,%rdx,4),%edx
	add    %r9d,%edx
	movslq %edx,%rdx
	movzbl %dil,%r10d
	mov    %rdi,-0x80(%rbp)
	lea    (%r15,%r10,1),%rdi
	movzbl (%rdi,%rdx,1),%edx
	and    $0xf8,%edx
	add    %r12d,%edx
	and    $0x1c,%eax
	shl    $0xb,%eax
	add    %eax,%edx
	add    (%r14,%r11,4),%r9d
	movslq %r9d,%rax
	add    %r15,%rax
	movzbl (%r10,%rax,1),%eax
	and    $0xf8,%ax
	shl    $0x5,%eax
	add    %edx,%eax
	mov    %ax,(%rcx)
	add    $0x1,%r8
	add    $0x1,%rsi
	add    $0x1,%r13
	add    $0x2,%rcx
	add    $0xffffffff,%ebx
	mov    -0x80(%rbp),%rdi
	mov    -0x40(%rbp),%r10
	mov    -0x48(%rbp),%r11
	mov    -0x50(%rbp),%r12
	xor    %r9d,%r9d
	jmpq   1e771 <ycc_rgb565D_convert_be+0x1d1>
	nopl   0x0(%rax)

001e950 <rgb_rgb565_convert_be>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %rbx,-0x8(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %r15,-0x28(%rbp)
	mov    0x88(%rdi),%r14d
	xor    %edi,%edi
	jmpq   1ea1a <rgb_rgb565_convert_be+0xca>
	movzbl (%rbx),%eax
	mov    %rax,%r13
	shr    $0x5,%r13d
	movzbl (%r10),%r12d
	and    $0xf8,%r12d
	add    %r13d,%r12d
	and    $0x1c,%eax
	shl    $0xb,%eax
	add    %eax,%r12d
	movzbl (%r11),%eax
	and    $0xf8,%eax
	shl    $0x5,%eax
	add    %eax,%r12d
	shl    $0x10,%r12d
	movzbl 0x1(%rbx),%eax
	mov    %rax,%r15
	shr    $0x5,%r15d
	movzbl 0x1(%r10),%r13d
	and    $0xf8,%r13d
	add    %r15d,%r13d
	and    $0x1c,%eax
	shl    $0xb,%eax
	add    %eax,%r13d
	movzbl 0x1(%r11),%eax
	and    $0xf8,%eax
	shl    $0x5,%eax
	add    %r13d,%eax
	add    %r12d,%eax
	mov    %eax,(%r9)
	add    $0x2,%rbx
	add    $0x2,%r10
	add    $0x2,%r11
	add    $0x4,%r9
	add    $0x1,%edi
	mov    %r14,%rax
	shr    %eax
	cmp    %edi,%eax
	ja     1e97a <rgb_rgb565_convert_be+0x2a>
	add    $0x1,%edx
	add    $0x8,%rcx
	mov    %r14,%rax
	and    $0x1,%eax
	test   %eax,%eax
	jne    1ea39 <rgb_rgb565_convert_be+0xe9>
	xor    %edi,%edi
	add    $0xffffffff,%r8d
	test   %r8d,%r8d
	jns    1ea6b <rgb_rgb565_convert_be+0x11b>
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	leaveq 
	retq   
	movzbl (%rbx),%eax
	mov    %rax,%rbx
	shr    $0x5,%ebx
	movzbl (%r10),%edi
	and    $0xf8,%edi
	add    %ebx,%edi
	and    $0x1c,%eax
	shl    $0xb,%eax
	add    %eax,%edi
	movzbl (%r11),%eax
	and    $0xf8,%ax
	shl    $0x5,%eax
	add    %edi,%eax
	mov    %ax,(%r9)
	xor    %edi,%edi
	jmp    1ea1a <rgb_rgb565_convert_be+0xca>
	mov    0x8(%rsi),%rbx
	mov    %edx,%eax
	mov    (%rbx,%rax,8),%rbx
	mov    (%rsi),%r9
	mov    (%r9,%rax,8),%r10
	mov    0x10(%rsi),%r9
	mov    (%r9,%rax,8),%r11
	mov    (%rcx),%r9
	mov    %r9,%rax
	and    $0x3,%rax
	test   %rax,%rax
	je     1e9fa <rgb_rgb565_convert_be+0xaa>
	movzbl (%rbx),%eax
	mov    %rax,%r13
	shr    $0x5,%r13d
	movzbl (%r10),%r12d
	and    $0xf8,%r12d
	add    %r13d,%r12d
	and    $0x1c,%eax
	shl    $0xb,%eax
	add    %eax,%r12d
	movzbl (%r11),%eax
	and    $0xf8,%ax
	shl    $0x5,%eax
	add    %r12d,%eax
	mov    %ax,(%r9)
	add    $0x1,%rbx
	add    $0x1,%r10
	add    $0x1,%r11
	add    $0x2,%r9
	add    $0xffffffff,%r14d
	jmpq   1e9fa <rgb_rgb565_convert_be+0xaa>
	data16 nopw %cs:0x0(%rax,%rax,1)
	xchg   %ax,%ax

001eaf0 <rgb_rgb565D_convert_be>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x50,%rsp
	mov    %rsi,-0x40(%rbp)
	mov    %rbx,-0x8(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %r15,-0x28(%rbp)
	mov    0x1a8(%rdi),%r14
	mov    0x88(%rdi),%ebx
	lea    0x3addc(%rip),%r9        # 59900 <dither_matrix>
	mov    0xa8(%rdi),%eax
	and    $0x3,%eax
	mov    %eax,%eax
	mov    (%r9,%rax,8),%rax
	mov    $0xffffff00,%r9d
	xor    %edi,%edi
	jmpq   1ec69 <rgb_rgb565D_convert_be+0x179>
	mov    %rax,%rcx
	and    %r9,%rcx
	shr    $0x8,%rcx
	movzbl %al,%r15d
	mov    %r15,%rdx
	shl    $0x18,%rdx
	add    %rcx,%rdx
	mov    %rdx,%rcx
	and    $0xfe,%rcx
	shr    %rcx
	lea    (%r14,%rcx,1),%r9
	movzbl 0x1(%r11),%ecx
	movzbl (%r9,%rcx,1),%ecx
	mov    %rcx,%r12
	shr    $0x5,%r12d
	movzbl %dl,%r9d
	lea    (%r14,%r9,1),%r13
	mov    %rbx,-0x50(%rbp)
	movzbl 0x1(%r8),%ebx
	movzbl 0x0(%r13,%rbx,1),%ebx
	and    $0xf8,%ebx
	add    %r12d,%ebx
	and    $0x1c,%ecx
	shl    $0xb,%ecx
	add    %ecx,%ebx
	movzbl 0x1(%rsi),%ecx
	add    %r14,%rcx
	movzbl (%rcx,%r9,1),%ecx
	and    $0xf8,%ecx
	shl    $0x5,%ecx
	add    %ecx,%ebx
	and    $0xfe,%rax
	shr    %rax
	lea    (%r14,%rax,1),%rcx
	movzbl (%r11),%eax
	movzbl (%rcx,%rax,1),%eax
	mov    %rax,%r12
	shr    $0x5,%r12d
	lea    (%r14,%r15,1),%rcx
	movzbl (%r8),%r13d
	movzbl (%rcx,%r13,1),%ecx
	and    $0xf8,%ecx
	add    %r12d,%ecx
	and    $0x1c,%eax
	shl    $0xb,%eax
	add    %eax,%ecx
	movzbl (%rsi),%eax
	add    %r14,%rax
	movzbl (%rax,%r15,1),%eax
	and    $0xf8,%eax
	shl    $0x5,%eax
	add    %ecx,%eax
	shl    $0x10,%eax
	add    %ebx,%eax
	mov    %eax,(%r10)
	shr    $0x8,%rdx
	shl    $0x18,%r9
	lea    (%rdx,%r9,1),%rax
	add    $0x2,%r11
	add    $0x2,%r8
	add    $0x2,%rsi
	add    $0x4,%r10
	add    $0x1,%edi
	mov    -0x50(%rbp),%rbx
	mov    $0xffffff00,%r9d
	mov    %rbx,%rcx
	shr    %ecx
	cmp    %edi,%ecx
	ja     1eb40 <rgb_rgb565D_convert_be+0x50>
	mov    -0x48(%rbp),%rcx
	lea    0x1(%rcx),%edx
	mov    -0x38(%rbp),%rcx
	add    $0x8,%rcx
	mov    %rbx,%rdi
	and    $0x1,%edi
	test   %edi,%edi
	jne    1ec8c <rgb_rgb565D_convert_be+0x19c>
	xor    %edi,%edi
	mov    -0x30(%rbp),%r8
	mov    -0x40(%rbp),%rsi
	lea    -0x1(%r8),%r15d
	test   %r15d,%r15d
	jns    1ecf9 <rgb_rgb565D_convert_be+0x209>
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	leaveq 
	retq   
	mov    %rax,%rdi
	and    $0xfe,%rdi
	shr    %rdi
	lea    (%r14,%rdi,1),%r12
	movzbl (%r11),%edi
	movzbl (%r12,%rdi,1),%edi
	mov    %rdi,%r13
	shr    $0x5,%r13d
	movzbl %al,%r12d
	lea    (%r14,%r12,1),%r11
	movzbl (%r8),%r8d
	movzbl (%r11,%r8,1),%r8d
	and    $0xf8,%r8d
	add    %r13d,%r8d
	and    $0x1c,%edi
	shl    $0xb,%edi
	add    %r8d,%edi
	movzbl (%rsi),%esi
	add    %r14,%rsi
	movzbl (%r12,%rsi,1),%esi
	and    $0xf8,%si
	shl    $0x5,%esi
	add    %edi,%esi
	mov    %si,(%r10)
	xor    %edi,%edi
	mov    -0x30(%rbp),%r8
	mov    -0x40(%rbp),%rsi
	jmpq   1ec69 <rgb_rgb565D_convert_be+0x179>
	mov    0x8(%rsi),%r8
	mov    %edx,%r10d
	mov    (%r8,%r10,8),%r11
	mov    (%rsi),%r8
	mov    (%r8,%r10,8),%r8
	mov    0x10(%rsi),%rsi
	mov    (%rsi,%r10,8),%rsi
	mov    (%rcx),%r10
	mov    %r10,%r12
	and    $0x3,%r12
	test   %r12,%r12
	jne    1ed33 <rgb_rgb565D_convert_be+0x243>
	mov    %r15,-0x30(%rbp)
	mov    %rcx,-0x38(%rbp)
	mov    %rdx,-0x48(%rbp)
	jmpq   1ec39 <rgb_rgb565D_convert_be+0x149>
	mov    %rax,%r12
	and    $0xfe,%r12
	shr    %r12
	lea    (%r14,%r12,1),%r13
	movzbl (%r11),%r12d
	movzbl 0x0(%r13,%r12,1),%r13d
	mov    %r13,%r12
	shr    $0x5,%r12d
	mov    %r15,-0x30(%rbp)
	movzbl %al,%r15d
	mov    %rcx,-0x38(%rbp)
	lea    (%r14,%r15,1),%rcx
	mov    %rdx,-0x48(%rbp)
	movzbl (%r8),%edx
	movzbl (%rcx,%rdx,1),%ecx
	and    $0xf8,%ecx
	add    %r12d,%ecx
	and    $0x1c,%r13d
	shl    $0xb,%r13d
	lea    (%rcx,%r13,1),%edx
	movzbl (%rsi),%ecx
	add    %r14,%rcx
	movzbl (%r15,%rcx,1),%ecx
	and    $0xf8,%cx
	shl    $0x5,%ecx
	add    %edx,%ecx
	mov    %cx,(%r10)
	add    $0x1,%r11
	add    $0x1,%r8
	add    $0x1,%rsi
	add    $0x2,%r10
	add    $0xffffffff,%ebx
	jmpq   1ec39 <rgb_rgb565D_convert_be+0x149>
	nopw   0x0(%rax,%rax,1)

001edc0 <gray_rgb565_convert_be>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %r12,-0x8(%rbp)
	mov    %r13,-0x10(%rbp)
	mov    %r14,-0x18(%rbp)
	mov    %r15,-0x20(%rbp)
	mov    0x88(%rdi),%r12d
	xor    %r13d,%r13d
	jmpq   1ee8f <gray_rgb565_convert_be+0xcf>
	movzbl 0x1(%rdi),%eax
	mov    %rax,%r14
	shr    $0x5,%r14d
	mov    %rax,%r10
	and    $0xf8,%r10d
	add    %r10d,%r14d
	and    $0x1c,%eax
	shl    $0xb,%eax
	add    %r14d,%eax
	shl    $0x5,%r10d
	lea    (%rax,%r10,1),%r14d
	movzbl (%rdi),%eax
	mov    %rax,%r15
	shr    $0x5,%r15d
	mov    %rax,%r10
	and    $0xf8,%r10d
	add    %r10d,%r15d
	and    $0x1c,%eax
	shl    $0xb,%eax
	add    %r15d,%eax
	shl    $0x5,%r10d
	add    %r10d,%eax
	shl    $0x10,%eax
	add    %r14d,%eax
	mov    %eax,(%r9)
	add    $0x2,%rdi
	add    $0x4,%r9
	add    $0x1,%r11d
	mov    %r12,%rax
	shr    %eax
	cmp    %r11d,%eax
	ja     1ede7 <gray_rgb565_convert_be+0x27>
	add    $0x1,%edx
	add    $0x8,%rcx
	mov    %r12,%rax
	and    $0x1,%eax
	test   %eax,%eax
	je     1ee8f <gray_rgb565_convert_be+0xcf>
	movzbl (%rdi),%eax
	mov    %rax,%r10
	shr    $0x5,%r10d
	mov    %rax,%rdi
	and    $0xf8,%edi
	add    %edi,%r10d
	and    $0x1c,%eax
	shl    $0xb,%eax
	add    %r10d,%eax
	shl    $0x5,%edi
	add    %edi,%eax
	mov    %ax,(%r9)
	add    $0xffffffff,%r8d
	test   %r8d,%r8d
	jns    1eeaa <gray_rgb565_convert_be+0xea>
	mov    -0x20(%rbp),%r15
	mov    -0x18(%rbp),%r14
	mov    -0x10(%rbp),%r13
	mov    -0x8(%rbp),%r12
	leaveq 
	retq   
	mov    (%rsi),%rax
	mov    %edx,%edi
	mov    (%rax,%rdi,8),%rdi
	mov    (%rcx),%r9
	mov    %r9,%rax
	and    $0x3,%rax
	test   %rax,%rax
	jne    1eec7 <gray_rgb565_convert_be+0x107>
	mov    %r13,%r11
	jmp    1ee4c <gray_rgb565_convert_be+0x8c>
	movzbl (%rdi),%eax
	mov    %rax,%r11
	shr    $0x5,%r11d
	mov    %rax,%r10
	and    $0xf8,%r10d
	add    %r10d,%r11d
	and    $0x1c,%eax
	shl    $0xb,%eax
	add    %r11d,%eax
	shl    $0x5,%r10d
	add    %r10d,%eax
	mov    %ax,(%r9)
	add    $0x1,%rdi
	add    $0x2,%r9
	add    $0xffffffff,%r12d
	mov    %r13,%r11
	jmpq   1ee4c <gray_rgb565_convert_be+0x8c>
	nopw   %cs:0x0(%rax,%rax,1)

001ef10 <gray_rgb565D_convert_be>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x40,%rsp
	mov    %rbx,-0x8(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %r15,-0x28(%rbp)
	mov    0x1a8(%rdi),%r13
	mov    0x88(%rdi),%r11d
	lea    0x3a9bf(%rip),%rbx        # 59900 <dither_matrix>
	mov    0xa8(%rdi),%eax
	and    $0x3,%eax
	mov    %eax,%eax
	mov    (%rbx,%rax,8),%rax
	mov    $0xffffff00,%r15d
	xor    %edi,%edi
	jmpq   1f025 <gray_rgb565D_convert_be+0x115>
	mov    %rax,%rcx
	and    %r15,%rcx
	shr    $0x8,%rcx
	movzbl %al,%r12d
	mov    %r12,%rax
	shl    $0x18,%rax
	add    %rax,%rcx
	movzbl %cl,%edx
	lea    0x0(%r13,%rdx,1),%rax
	movzbl 0x1(%rbx),%r10d
	movzbl (%rax,%r10,1),%eax
	mov    %rax,%r14
	shr    $0x5,%r14d
	mov    %rax,%r10
	and    $0xf8,%r10d
	add    %r10d,%r14d
	and    $0x1c,%eax
	shl    $0xb,%eax
	add    %r14d,%eax
	shl    $0x5,%r10d
	lea    (%rax,%r10,1),%r14d
	lea    0x0(%r13,%r12,1),%r10
	movzbl (%rbx),%eax
	movzbl (%r10,%rax,1),%eax
	mov    %rax,%r12
	shr    $0x5,%r12d
	mov    %rax,%r10
	and    $0xf8,%r10d
	add    %r10d,%r12d
	and    $0x1c,%eax
	shl    $0xb,%eax
	add    %r12d,%eax
	shl    $0x5,%r10d
	add    %r10d,%eax
	shl    $0x10,%eax
	add    %r14d,%eax
	mov    %eax,(%r9)
	shr    $0x8,%rcx
	shl    $0x18,%rdx
	lea    (%rcx,%rdx,1),%rax
	add    $0x2,%rbx
	add    $0x4,%r9
	add    $0x1,%edi
	mov    %r11,%rcx
	shr    %ecx
	cmp    %edi,%ecx
	ja     1ef5d <gray_rgb565D_convert_be+0x4d>
	mov    -0x38(%rbp),%rcx
	lea    0x1(%rcx),%edx
	mov    -0x30(%rbp),%rcx
	add    $0x8,%rcx
	mov    %r11,%rdi
	and    $0x1,%edi
	test   %edi,%edi
	jne    1f044 <gray_rgb565D_convert_be+0x134>
	xor    %edi,%edi
	add    $0xffffffff,%r8d
	test   %r8d,%r8d
	jns    1f07d <gray_rgb565D_convert_be+0x16d>
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	leaveq 
	retq   
	movzbl %al,%edi
	lea    0x0(%r13,%rdi,1),%r10
	movzbl (%rbx),%edi
	movzbl (%r10,%rdi,1),%edi
	mov    %rdi,%r10
	shr    $0x5,%r10d
	mov    %rdi,%rbx
	and    $0xf8,%ebx
	add    %ebx,%r10d
	and    $0x1c,%edi
	shl    $0xb,%edi
	add    %r10d,%edi
	shl    $0x5,%ebx
	add    %ebx,%edi
	mov    %di,(%r9)
	xor    %edi,%edi
	jmp    1f025 <gray_rgb565D_convert_be+0x115>
	mov    (%rsi),%r9
	mov    %edx,%ebx
	mov    (%r9,%rbx,8),%rbx
	mov    (%rcx),%r9
	mov    %r9,%r10
	and    $0x3,%r10
	test   %r10,%r10
	jne    1f0a2 <gray_rgb565D_convert_be+0x192>
	mov    %rdx,-0x38(%rbp)
	mov    %rcx,-0x30(%rbp)
	jmpq   1effd <gray_rgb565D_convert_be+0xed>
	movzbl %al,%r10d
	add    %r13,%r10
	movzbl (%rbx),%r12d
	movzbl (%r10,%r12,1),%r10d
	mov    %r10,%r14
	shr    $0x5,%r14d
	mov    %r10,%r12
	and    $0xf8,%r12d
	add    %r12d,%r14d
	and    $0x1c,%r10d
	shl    $0xb,%r10d
	add    %r14d,%r10d
	shl    $0x5,%r12d
	add    %r12d,%r10d
	mov    %r10w,(%r9)
	add    $0x1,%rbx
	add    $0x2,%r9
	add    $0xffffffff,%r11d
	mov    %rdx,-0x38(%rbp)
	mov    %rcx,-0x30(%rbp)
	jmpq   1effd <gray_rgb565D_convert_be+0xed>
	data16 nopw %cs:0x0(%rax,%rax,1)

001f100 <ycc_rgb565_convert>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %rbx,-0x8(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %r15,-0x28(%rbp)
	mov    %rsi,%rbx
	mov    %r8,%r12
	mov    %rcx,%r13
	mov    %rdx,%r14
	mov    %rdi,%r15
	callq  1d5c0 <is_big_endian>
	test   %eax,%eax
	jne    1f15e <ycc_rgb565_convert+0x5e>
	mov    %r13,%rcx
	mov    %r14,%rdx
	mov    %rbx,%rsi
	mov    %r15,%rdi
	mov    %r12,%r8
	callq  1d5d0 <ycc_rgb565_convert_le>
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	leaveq 
	retq   
	mov    %r13,%rcx
	mov    %r14,%rdx
	mov    %rbx,%rsi
	mov    %r15,%rdi
	mov    %r12,%r8
	callq  1e2e0 <ycc_rgb565_convert_be>
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	leaveq 
	retq   
	nopl   0x0(%rax,%rax,1)

001f190 <ycc_rgb565D_convert>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %rbx,-0x8(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %r15,-0x28(%rbp)
	mov    %rsi,%rbx
	mov    %r8,%r12
	mov    %rcx,%r13
	mov    %rdx,%r14
	mov    %rdi,%r15
	callq  1d5c0 <is_big_endian>
	test   %eax,%eax
	jne    1f1ee <ycc_rgb565D_convert+0x5e>
	mov    %r13,%rcx
	mov    %r14,%rdx
	mov    %rbx,%rsi
	mov    %r15,%rdi
	mov    %r12,%r8
	callq  1d860 <ycc_rgb565D_convert_le>
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	leaveq 
	retq   
	mov    %r13,%rcx
	mov    %r14,%rdx
	mov    %rbx,%rsi
	mov    %r15,%rdi
	mov    %r12,%r8
	callq  1e5a0 <ycc_rgb565D_convert_be>
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	leaveq 
	retq   
	nopl   0x0(%rax,%rax,1)

001f220 <rgb_rgb565_convert>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %rbx,-0x8(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %r15,-0x28(%rbp)
	mov    %rsi,%rbx
	mov    %r8,%r12
	mov    %rcx,%r13
	mov    %rdx,%r14
	mov    %rdi,%r15
	callq  1d5c0 <is_big_endian>
	test   %eax,%eax
	jne    1f27e <rgb_rgb565_convert+0x5e>
	mov    %r13,%rcx
	mov    %r14,%rdx
	mov    %rbx,%rsi
	mov    %r15,%rdi
	mov    %r12,%r8
	callq  1dbc0 <rgb_rgb565_convert_le>
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	leaveq 
	retq   
	mov    %r13,%rcx
	mov    %r14,%rdx
	mov    %rbx,%rsi
	mov    %r15,%rdi
	mov    %r12,%r8
	callq  1e950 <rgb_rgb565_convert_be>
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	leaveq 
	retq   
	nopl   0x0(%rax,%rax,1)

001f2b0 <rgb_rgb565D_convert>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %rbx,-0x8(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %r15,-0x28(%rbp)
	mov    %rsi,%rbx
	mov    %r8,%r12
	mov    %rcx,%r13
	mov    %rdx,%r14
	mov    %rdi,%r15
	callq  1d5c0 <is_big_endian>
	test   %eax,%eax
	jne    1f30e <rgb_rgb565D_convert+0x5e>
	mov    %r13,%rcx
	mov    %r14,%rdx
	mov    %rbx,%rsi
	mov    %r15,%rdi
	mov    %r12,%r8
	callq  1dd20 <rgb_rgb565D_convert_le>
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	leaveq 
	retq   
	mov    %r13,%rcx
	mov    %r14,%rdx
	mov    %rbx,%rsi
	mov    %r15,%rdi
	mov    %r12,%r8
	callq  1eaf0 <rgb_rgb565D_convert_be>
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	leaveq 
	retq   
	nopl   0x0(%rax,%rax,1)

001f340 <gray_rgb565_convert>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %rbx,-0x8(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %r15,-0x28(%rbp)
	mov    %rsi,%rbx
	mov    %r8,%r12
	mov    %rcx,%r13
	mov    %rdx,%r14
	mov    %rdi,%r15
	callq  1d5c0 <is_big_endian>
	test   %eax,%eax
	jne    1f39e <gray_rgb565_convert+0x5e>
	mov    %r13,%rcx
	mov    %r14,%rdx
	mov    %rbx,%rsi
	mov    %r15,%rdi
	mov    %r12,%r8
	callq  1dfb0 <gray_rgb565_convert_le>
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	leaveq 
	retq   
	mov    %r13,%rcx
	mov    %r14,%rdx
	mov    %rbx,%rsi
	mov    %r15,%rdi
	mov    %r12,%r8
	callq  1edc0 <gray_rgb565_convert_be>
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	leaveq 
	retq   
	nopl   0x0(%rax,%rax,1)

001f3d0 <gray_rgb565D_convert>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %rbx,-0x8(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %r15,-0x28(%rbp)
	mov    %rsi,%rbx
	mov    %r8,%r12
	mov    %rcx,%r13
	mov    %rdx,%r14
	mov    %rdi,%r15
	callq  1d5c0 <is_big_endian>
	test   %eax,%eax
	jne    1f42e <gray_rgb565D_convert+0x5e>
	mov    %r13,%rcx
	mov    %r14,%rdx
	mov    %rbx,%rsi
	mov    %r15,%rdi
	mov    %r12,%r8
	callq  1e100 <gray_rgb565D_convert_le>
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	leaveq 
	retq   
	mov    %r13,%rcx
	mov    %r14,%rdx
	mov    %rbx,%rsi
	mov    %r15,%rdi
	mov    %r12,%r8
	callq  1ef10 <gray_rgb565D_convert_be>
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	leaveq 
	retq   
	nopl   0x0(%rax,%rax,1)

001f460 <start_pass_dcolor>:
	push   %rbp
	mov    %rsp,%rbp
	leaveq 
	retq   
	nopw   %cs:0x0(%rax,%rax,1)

001f470 <jinit_inverse_dct>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %r14,-0x20(%rbp)
	mov    %r15,-0x28(%rbp)
	mov    %rbx,-0x8(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    0x8(%rdi),%rax
	mov    (%rax),%rax
	mov    $0x1,%r14d
	mov    $0x80,%edx
	mov    %rdi,%r13
	mov    %r14,%rsi
	callq  *%rax
	mov    %rax,0x258(%r13)
	lea    0x8c(%rip),%rcx        # 1f540 <start_pass>
	mov    %rcx,(%rax)
	mov    0x130(%r13),%r12
	add    $0x58,%r12
	mov    %rax,%r15
	mov    $0x100,%ebx
	xor    %esi,%esi
	mov    %rsi,%rax
	jmp    1f51c <jinit_inverse_dct+0xac>
	mov    0x8(%r13),%rcx
	mov    (%rcx),%rcx
	mov    %rbx,%rdx
	mov    %rsi,%rbx
	mov    %r14,%rsi
	mov    %rax,%r14
	mov    %r13,%rdi
	callq  *%rcx
	mov    %rax,(%r12)
	mov    %rbx,%rsi
	mov    %rax,%rdi
	mov    $0x100,%ebx
	mov    %rbx,%rdx
	callq  41e0 <memset@plt>
	movslq %r14d,%rax
	movl   $0xffffffff,0x58(%r15,%rax,4)
	lea    0x1(%r14),%eax
	add    $0x60,%r12
	xor    %esi,%esi
	mov    $0x1,%r14d
	movslq 0x38(%r13),%rcx
	cmp    %eax,%ecx
	jg     1f4d1 <jinit_inverse_dct+0x61>
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	leaveq 
	retq   
	nopw   0x0(%rax,%rax,1)

001f540 <start_pass>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x110,%rsp
	mov    %r15,-0x28(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    %rbx,-0x8(%rbp)
	mov    0x258(%rdi),%rax
	mov    %rax,-0x108(%rbp)
	mov    0x130(%rdi),%rbx
	mov    0x4ea45(%rip),%r15        # 6dfc0 <jpeg_idct_1x1@@LIBJPEG_6.2+0x38150>
	lea    0x1e87e(%rip),%rax        # 3de00 <jsimd_idct_2x2>
	mov    %rax,-0x38(%rbp)
	mov    0x4e98b(%rip),%rax        # 6df18 <jpeg_idct_2x2@@LIBJPEG_6.2+0x38358>
	mov    %rax,-0x40(%rbp)
	mov    0x4e9d8(%rip),%r14        # 6df70 <jpeg_idct_3x3@@LIBJPEG_6.2+0x3dea0>
	lea    0x1e881(%rip),%rax        # 3de20 <jsimd_idct_4x4>
	mov    %rax,-0x48(%rbp)
	mov    0x4e976(%rip),%rax        # 6df20 <jpeg_idct_4x4@@LIBJPEG_6.2+0x38880>
	mov    %rax,-0x50(%rbp)
	mov    0x4e9d3(%rip),%rax        # 6df88 <jpeg_idct_5x5@@LIBJPEG_6.2+0x3e238>
	mov    %rax,-0x58(%rbp)
	mov    0x4e968(%rip),%r8        # 6df28 <jpeg_idct_6x6@@LIBJPEG_6.2+0x3e588>
	mov    %r8,-0x60(%rbp)
	mov    0x4e9d5(%rip),%rdx        # 6dfa0 <jpeg_idct_7x7@@LIBJPEG_6.2+0x3ebf0>
	mov    %rdx,-0x68(%rbp)
	lea    0x1e92a(%rip),%rcx        # 3df00 <jsimd_idct_islow>
	mov    %rcx,-0x70(%rbp)
	mov    0x4e97f(%rip),%rcx        # 6df60 <jpeg_idct_islow@@LIBJPEG_6.2+0x3f360>
	mov    %rcx,-0x78(%rbp)
	lea    0x1e934(%rip),%rcx        # 3df20 <jsimd_idct_ifast>
	mov    %rcx,-0x80(%rbp)
	mov    0x4e9e9(%rip),%rcx        # 6dfe0 <jpeg_idct_ifast@@LIBJPEG_6.2+0x3fa20>
	mov    %rcx,-0x88(%rbp)
	lea    0x1e93b(%rip),%rcx        # 3df40 <jsimd_idct_float>
	mov    %rcx,-0x90(%rbp)
	mov    0x4e985(%rip),%rcx        # 6df98 <jpeg_idct_float@@LIBJPEG_6.2+0x3fee8>
	mov    %rcx,-0x98(%rbp)
	mov    0x4e98f(%rip),%rcx        # 6dfb0 <jpeg_idct_9x9@@LIBJPEG_6.2+0x3dce0>
	mov    %rcx,-0xa0(%rbp)
	mov    0x4e949(%rip),%rsi        # 6df78 <jpeg_idct_10x10@@LIBJPEG_6.2+0x3d5f8>
	mov    %rsi,-0xc0(%rbp)
	mov    0x4e8fb(%rip),%r9        # 6df38 <jpeg_idct_11x11@@LIBJPEG_6.2+0x3cd88>
	mov    %r9,-0xc8(%rbp)
	mov    0x4e91d(%rip),%r11        # 6df68 <jpeg_idct_12x12@@LIBJPEG_6.2+0x3c308>
	mov    %r11,-0xd0(%rbp)
	mov    0x4e98f(%rip),%r10        # 6dfe8 <jpeg_idct_13x13@@LIBJPEG_6.2+0x3ba58>
	mov    %r10,-0xd8(%rbp)
	mov    0x4e941(%rip),%r12        # 6dfa8 <jpeg_idct_14x14@@LIBJPEG_6.2+0x3adb8>
	mov    %r12,-0xe0(%rbp)
	mov    0x4e8cb(%rip),%r12        # 6df40 <jpeg_idct_15x15@@LIBJPEG_6.2+0x3a260>
	mov    %r12,-0xe8(%rbp)
	mov    0x4e90d(%rip),%r12        # 6df90 <jpeg_idct_16x16@@LIBJPEG_6.2+0x395f0>
	mov    %r12,-0xf0(%rbp)
	xor    %r12d,%r12d
	mov    %r12,-0xf8(%rbp)
	mov    $0x1,%r12d
	mov    %r12,-0xb0(%rbp)
	mov    $0x2,%r12d
	mov    %r12,-0xa8(%rbp)
	mov    %rdi,%r13
	xor    %r12d,%r12d
	pushq  -0xf8(%rbp)
	pushq  -0xf8(%rbp)
	popq   -0x100(%rbp)
	popq   -0xb8(%rbp)
	jmpq   1f75e <start_pass+0x21e>
	mov    0x24(%rbx),%edi
	add    $0xffffffff,%edi
	cmp    $0xf,%edi
	jbe    1f781 <start_pass+0x241>
	mov    0x0(%r13),%rax
	movl   $0x7,0x28(%rax)
	movslq 0x24(%rbx),%rcx
	mov    0x0(%r13),%rax
	mov    %ecx,0x2c(%rax)
	mov    0x0(%r13),%rax
	mov    (%rax),%rax
	mov    %r13,%rdi
	callq  *%rax
	mov    -0x58(%rbp),%rax
	mov    -0xc0(%rbp),%rsi
	mov    -0xa0(%rbp),%rcx
	mov    -0x68(%rbp),%rdx
	mov    -0x60(%rbp),%r8
	mov    -0x100(%rbp),%r9
	mov    %r9,-0x100(%rbp)
	movslq %r12d,%r10
	mov    -0x108(%rbp),%r11
	mov    %r9,0x8(%r11,%r10,8)
	movslq 0x30(%rbx),%rdi
	test   %edi,%edi
	jne    1f7b7 <start_pass+0x277>
	add    $0x1,%r12d
	add    $0x60,%rbx
	mov    -0xd8(%rbp),%r10
	mov    -0xd0(%rbp),%r11
	mov    -0xc8(%rbp),%r9
	movslq 0x38(%r13),%rdi
	cmp    %r12d,%edi
	jg     1f6d1 <start_pass+0x191>
	mov    -0x8(%rbp),%rbx
	mov    -0x10(%rbp),%r12
	mov    -0x18(%rbp),%r13
	mov    -0x20(%rbp),%r14
	mov    -0x28(%rbp),%r15
	leaveq 
	retq   
	mov    %rbx,-0x110(%rbp)
	lea    0x3a191(%rip),%rbx        # 59920 <dither_matrix+0x20>
	movslq (%rbx,%rdi,4),%rdi
	add    %rbx,%rdi
	jmpq   *%rdi
	mov    -0x110(%rbp),%rbx
	mov    -0xf0(%rbp),%r9
	pushq  -0xf8(%rbp)
	popq   -0xb8(%rbp)
	jmpq   1f723 <start_pass+0x1e3>
	mov    -0xb8(%rbp),%rdi
	cmp    0x58(%r11,%r10,4),%edi
	je     1f741 <start_pass+0x201>
	mov    0x50(%rbx),%r9
	test   %r9,%r9
	jne    1fa27 <start_pass+0x4e7>
	mov    -0xc0(%rbp),%rsi
	jmpq   1f741 <start_pass+0x201>
	mov    -0x110(%rbp),%rbx
	mov    %r15,%r9
	pushq  -0xf8(%rbp)
	popq   -0xb8(%rbp)
	jmpq   1f723 <start_pass+0x1e3>
	mov    %rax,%rbx
	callq  3dd80 <jsimd_can_idct_2x2>
	test   %eax,%eax
	jne    1fa69 <start_pass+0x529>
	mov    %rbx,%rax
	mov    -0xc0(%rbp),%rsi
	mov    -0xa0(%rbp),%rcx
	mov    -0x68(%rbp),%rdx
	mov    -0x60(%rbp),%r8
	mov    -0x110(%rbp),%rbx
	mov    -0x40(%rbp),%r9
	pushq  -0xf8(%rbp)
	popq   -0xb8(%rbp)
	jmpq   1f723 <start_pass+0x1e3>
	mov    -0x110(%rbp),%rbx
	mov    %r14,%r9
	pushq  -0xf8(%rbp)
	popq   -0xb8(%rbp)
	jmpq   1f723 <start_pass+0x1e3>
	mov    %rax,%rbx
	callq  3ddc0 <jsimd_can_idct_4x4>
	test   %eax,%eax
	jne    1fa9e <start_pass+0x55e>
	mov    %rbx,%rax
	mov    -0xc0(%rbp),%rsi
	mov    -0xa0(%rbp),%rcx
	mov    -0x68(%rbp),%rdx
	mov    -0x60(%rbp),%r8
	mov    -0x110(%rbp),%rbx
	mov    -0x50(%rbp),%r9
	pushq  -0xf8(%rbp)
	popq   -0xb8(%rbp)
	jmpq   1f723 <start_pass+0x1e3>
	mov    -0x110(%rbp),%rbx
	mov    %rax,%r9
	pushq  -0xf8(%rbp)
	popq   -0xb8(%rbp)
	jmpq   1f723 <start_pass+0x1e3>
	mov    -0x110(%rbp),%rbx
	mov    %r8,%r9
	pushq  -0xf8(%rbp)
	popq   -0xb8(%rbp)
	jmpq   1f723 <start_pass+0x1e3>
	mov    -0x110(%rbp),%rbx
	mov    %rdx,%r9
	pushq  -0xf8(%rbp)
	popq   -0xb8(%rbp)
	jmpq   1f723 <start_pass+0x1e3>
	mov    0x60(%r13),%ecx
	test   %ecx,%ecx
	je     1fad3 <start_pass+0x593>
	cmp    $0x1,%ecx
	je     1fb20 <start_pass+0x5e0>
	cmp    $0x2,%ecx
	jne    1fb68 <start_pass+0x628>
	mov    %rax,%rbx
	callq  3dec0 <jsimd_can_idct_float>
	test   %eax,%eax
	jne    1fbae <start_pass+0x66e>
	mov    %rbx,%rax
	mov    -0xc0(%rbp),%rsi
	mov    -0xa0(%rbp),%rcx
	mov    -0x68(%rbp),%rdx
	mov    -0x60(%rbp),%r8
	mov    -0x110(%rbp),%rbx
	mov    -0x98(%rbp),%r9
	pushq  -0xa8(%rbp)
	popq   -0xb8(%rbp)
	jmpq   1f723 <start_pass+0x1e3>
	mov    -0x110(%rbp),%rbx
	mov    %rcx,%r9
	pushq  -0xf8(%rbp)
	popq   -0xb8(%rbp)
	jmpq   1f723 <start_pass+0x1e3>
	mov    -0x110(%rbp),%rbx
	mov    %rsi,%r9
	pushq  -0xf8(%rbp)
	popq   -0xb8(%rbp)
	jmpq   1f723 <start_pass+0x1e3>
	mov    -0x110(%rbp),%rbx
	pushq  -0xf8(%rbp)
	popq   -0xb8(%rbp)
	jmpq   1f723 <start_pass+0x1e3>
	mov    %r11,%r9
	mov    -0x110(%rbp),%rbx
	pushq  -0xf8(%rbp)
	popq   -0xb8(%rbp)
	jmpq   1f723 <start_pass+0x1e3>
	mov    %r10,%r9
	mov    -0x110(%rbp),%rbx
	pushq  -0xf8(%rbp)
	popq   -0xb8(%rbp)
	jmpq   1f723 <start_pass+0x1e3>
	mov    -0xe0(%rbp),%r9
	mov    -0x110(%rbp),%rbx
	pushq  -0xf8(%rbp)
	popq   -0xb8(%rbp)
	jmpq   1f723 <start_pass+0x1e3>
	mov    -0x110(%rbp),%rbx
	mov    -0xe8(%rbp),%r9
	pushq  -0xf8(%rbp)
	popq   -0xb8(%rbp)
	jmpq   1f723 <start_pass+0x1e3>
	mov    -0x110(%rbp),%rbx
	jmpq   1f6e0 <start_pass+0x1a0>
	mov    %edi,0x58(%r11,%r10,4)
	test   %edi,%edi
	je     1fbe6 <start_pass+0x6a6>
	cmp    $0x1,%edi
	je     1fc3a <start_pass+0x6fa>
	cmp    $0x2,%edi
	jne    1fbee <start_pass+0x6ae>
	mov    0x58(%rbx),%rsi
	mov    %r15,-0x30(%rbp)
	mov    %r14,-0x110(%rbp)
	xor    %eax,%eax
	lea    0x39f82(%rip),%r11        # 599e0 <aanscalefactor.6>
	mov    %rax,%rcx
	mov    %rcx,%rdx
	jmpq   1fc8c <start_pass+0x74c>
	mov    %rbx,%rax
	mov    -0xc0(%rbp),%rsi
	mov    -0xa0(%rbp),%rcx
	mov    -0x68(%rbp),%rdx
	mov    -0x60(%rbp),%r8
	mov    -0x110(%rbp),%rbx
	mov    -0x38(%rbp),%r9
	pushq  -0xf8(%rbp)
	popq   -0xb8(%rbp)
	jmpq   1f723 <start_pass+0x1e3>
	mov    %rbx,%rax
	mov    -0xc0(%rbp),%rsi
	mov    -0xa0(%rbp),%rcx
	mov    -0x68(%rbp),%rdx
	mov    -0x60(%rbp),%r8
	mov    -0x110(%rbp),%rbx
	mov    -0x48(%rbp),%r9
	pushq  -0xf8(%rbp)
	popq   -0xb8(%rbp)
	jmpq   1f723 <start_pass+0x1e3>
	test   %ecx,%ecx
	jne    1fb68 <start_pass+0x628>
	mov    %rax,%rbx
	callq  3de40 <jsimd_can_idct_islow>
	test   %eax,%eax
	jne    1fcbf <start_pass+0x77f>
	mov    %rbx,%rax
	mov    -0xc0(%rbp),%rsi
	mov    -0xa0(%rbp),%rcx
	mov    -0x68(%rbp),%rdx
	mov    -0x60(%rbp),%r8
	mov    -0x110(%rbp),%rbx
	mov    -0x78(%rbp),%r9
	pushq  -0xf8(%rbp)
	popq   -0xb8(%rbp)
	jmpq   1f723 <start_pass+0x1e3>
	mov    %rax,%rbx
	callq  3de80 <jsimd_can_idct_ifast>
	test   %eax,%eax
	jne    1fcf4 <start_pass+0x7b4>
	mov    %rbx,%rax
	mov    -0xc0(%rbp),%rsi
	mov    -0xa0(%rbp),%rcx
	mov    -0x68(%rbp),%rdx
	mov    -0x60(%rbp),%r8
	mov    -0x110(%rbp),%rbx
	mov    -0x88(%rbp),%r9
	pushq  -0xb0(%rbp)
	popq   -0xb8(%rbp)
	jmpq   1f723 <start_pass+0x1e3>
	mov    0x0(%r13),%rcx
	movl   $0x30,0x28(%rcx)
	mov    0x0(%r13),%rcx
	mov    (%rcx),%rcx
	mov    %rax,%rbx
	mov    %r13,%rdi
	callq  *%rcx
	mov    %rbx,%rax
	mov    -0xc0(%rbp),%rsi
	mov    -0xa0(%rbp),%rcx
	mov    -0x68(%rbp),%rdx
	mov    -0x60(%rbp),%r8
	mov    -0x110(%rbp),%rbx
	mov    -0x100(%rbp),%r9
	jmpq   1f723 <start_pass+0x1e3>
	mov    %rbx,%rax
	mov    -0xc0(%rbp),%rsi
	mov    -0xa0(%rbp),%rcx
	mov    -0x68(%rbp),%rdx
	mov    -0x60(%rbp),%r8
	mov    -0x110(%rbp),%rbx
	mov    -0x90(%rbp),%r9
	pushq  -0xa8(%rbp)
	popq   -0xb8(%rbp)
	jmpq   1f723 <start_pass+0x1e3>
	test   %edi,%edi
	je     1fd29 <start_pass+0x7e9>
	mov    0x0(%r13),%rax
	movl   $0x30,0x28(%rax)
	mov    0x0(%r13),%rax
	mov    (%rax),%rax
	mov    %r13,%rdi
	mov    %r15,-0x30(%rbp)
	mov    %r14,-0x110(%rbp)
	callq  *%rax
	mov    -0x110(%rbp),%r14
	mov    -0x30(%rbp),%r15
	mov    -0x58(%rbp),%rax
	mov    -0xc0(%rbp),%rsi
	mov    -0xa0(%rbp),%rcx
	mov    -0x68(%rbp),%rdx
	mov    -0x60(%rbp),%r8
	jmpq   1f741 <start_pass+0x201>
	mov    0x58(%rbx),%rdx
	mov    %r14,-0x110(%rbp)
	xor    %eax,%eax
	lea    0x39d12(%rip),%r8        # 59960 <aanscales.5>
	jmpq   1fd54 <start_pass+0x814>
	movslq %ecx,%r8
	movzwl (%r9,%r8,2),%edi
	movzwl %di,%edi
	cvtsi2sd %rdi,%xmm0
	mulsd  (%r11,%r10,8),%xmm0
	movslq %eax,%rdi
	mulsd  (%r11,%rdi,8),%xmm0
	cvtsd2ss %xmm0,%xmm0
	movss  %xmm0,(%rsi,%r8,4)
	add    $0x1,%eax
	add    $0x1,%ecx
	cmp    $0x7,%eax
	jle    1fc53 <start_pass+0x713>
	add    $0x1,%edx
	xor    %eax,%eax
	cmp    $0x7,%edx
	jle    1fd7f <start_pass+0x83f>
	mov    -0x110(%rbp),%r14
	mov    -0x30(%rbp),%r15
	mov    -0x58(%rbp),%rax
	mov    -0xc0(%rbp),%rsi
	mov    -0xa0(%rbp),%rcx
	mov    -0x68(%rbp),%rdx
	mov    -0x60(%rbp),%r8
	jmpq   1f741 <start_pass+0x201>
	mov    %rbx,%rax
	mov    -0xc0(%rbp),%rsi
	mov    -0xa0(%rbp),%rcx
	mov    -0x68(%rbp),%rdx
	mov    -0x60(%rbp),%r8
	mov    -0x110(%rbp),%rbx
	mov    -0x70(%rbp),%r9
	pushq  -0xf8(%rbp)
	popq   -0xb8(%rbp)
	jmpq   1f723 <start_pass+0x1e3>
	mov    %rbx,%rax
	mov    -0xc0(%rbp),%rsi
	mov    -0xa0(%rbp),%rcx
	mov    -0x68(%rbp),%rdx
	mov    -0x60(%rbp),%r8
	mov    -0x110(%rbp),%rbx
	mov    -0x80(%rbp),%r9
	pushq  -0xb0(%rbp)
	popq   -0xb8(%rbp)
	jmpq   1f723 <start_pass+0x1e3>
	mov    0x58(%rbx),%rdx
	xor    %ecx,%ecx
	jmp    1fd96 <start_pass+0x856>
	movslq %eax,%rdi
	movswq (%r8,%rdi,2),%rcx
	movzwl (%r9,%rdi,2),%esi
	imul   %rsi,%rcx
	add    $0x800,%rcx
	sar    $0xc,%rcx
	mov    %cx,(%rdx,%rdi,2)
	add    $0x1,%eax
	cmp    $0x3f,%eax
	jle    1fd31 <start_pass+0x7f1>
	mov    -0x110(%rbp),%r14
	mov    -0x58(%rbp),%rax
	mov    -0xc0(%rbp),%rsi
	mov    -0xa0(%rbp),%rcx
	mov    -0x68(%rbp),%rdx
	mov    -0x60(%rbp),%r8
	jmpq   1f741 <start_pass+0x201>
	movslq %edx,%r10
	jmpq   1fc82 <start_pass+0x742>
	movslq %ecx,%rdi
	movswq (%r9,%rdi,2),%rsi
	mov    %si,(%rdx,%rdi,2)
	add    $0x1,%ecx
	cmp    $0x3f,%ecx
	jle    1fd87 <start_pass+0x847>
	mov    -0xc0(%rbp),%rsi
	mov    -0xa0(%rbp),%rcx
	mov    -0x68(%rbp),%rdx
	mov    -0x60(%rbp),%r8
	jmpq   1f741 <start_pass+0x201>
	nopw   %cs:0x0(%rax,%rax,1)

001fdc0 <jinit_huff_decoder>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %r15,-0x8(%rbp)
	mov    %rdi,%r15
	callq  20610 <std_huff_tables>
	mov    0x8(%r15),%rax
	mov    (%rax),%rax
	mov    $0x1,%esi
	mov    $0x170,%edx
	mov    %r15,%rdi
	callq  *%rax
	mov    %rax,0x250(%r15)
	lea    0x8c8(%rip),%rcx        # 206c0 <start_pass_huff_decoder>
	mov    %rcx,(%rax)
	lea    0x1fae(%rip),%rcx        # 21db0 <decode_mcu>
	mov    %rcx,0x8(%rax)
	xor    %ecx,%ecx
	jmp    1fe22 <jinit_huff_decoder+0x62>
	movslq %ecx,%rdx
	movq   $0x0,0x60(%rax,%rdx,8)
	movq   $0x0,0x40(%rax,%rdx,8)
	add    $0x1,%ecx
	cmp    $0x3,%ecx
	jle    1fe0a <jinit_huff_decoder+0x4a>
	mov    -0x8(%rbp),%r15
	leaveq 
	retq   
	nopl   (%rax)

001fe30 <jpeg_make_d_derived_tbl>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x560,%rsp
	mov    %r12,-0x20(%rbp)
	mov    %r13,-0x28(%rbp)
	mov    %r14,-0x30(%rbp)
	mov    %r15,-0x38(%rbp)
	mov    %rbx,-0x18(%rbp)
	mov    %rsi,-0x40(%rbp)
	test   %edx,%edx
	js     1fe6a <jpeg_make_d_derived_tbl+0x3a>
	cmp    $0x3,%edx
	jg     1fe6a <jpeg_make_d_derived_tbl+0x3a>
	mov    %rcx,%rbx
	mov    %rsi,%r12
	mov    %rdi,%r14
	mov    %rdx,%r15
	jmp    1fe8e <jpeg_make_d_derived_tbl+0x5e>
	mov    (%rdi),%rax
	movl   $0x32,0x28(%rax)
	mov    (%rdi),%rax
	mov    %edx,0x2c(%rax)
	mov    (%rdi),%rax
	mov    (%rax),%rax
	mov    %rcx,%rbx
	mov    %rsi,%r12
	mov    %rdx,%r15
	mov    %rdi,%r14
	callq  *%rax
	test   %r12d,%r12d
	jne    1fea0 <jpeg_make_d_derived_tbl+0x70>
	movslq %r15d,%rax
	mov    0x108(%r14,%rax,8),%r13
	jmp    1feab <jpeg_make_d_derived_tbl+0x7b>
	movslq %r15d,%rax
	mov    0xe8(%r14,%rax,8),%r13
	test   %r13,%r13
	jne    1fecc <jpeg_make_d_derived_tbl+0x9c>
	mov    (%r14),%rax
	movl   $0x32,0x28(%rax)
	mov    (%r14),%rax
	mov    %r15d,0x2c(%rax)
	mov    (%r14),%rax
	mov    (%rax),%rax
	mov    %r14,%rdi
	callq  *%rax
	mov    $0x1,%r15d
	mov    (%rbx),%rax
	test   %rax,%rax
	jne    1fef1 <jpeg_make_d_derived_tbl+0xc1>
	mov    0x8(%r14),%rax
	mov    (%rax),%rax
	mov    $0x528,%edx
	mov    %r14,%rdi
	mov    %r15,%rsi
	callq  *%rax
	mov    %rax,(%rbx)
	mov    (%rbx),%rax
	mov    %rax,-0x50(%rbp)
	mov    %r13,0x120(%rax)
	xor    %r12d,%r12d
	jmp    1ff1e <jpeg_make_d_derived_tbl+0xee>
	movslq %r12d,%rax
	mov    %r15b,-0x555(%rbp,%rax,1)
	add    $0x1,%r12d
	add    $0xffffffff,%ebx
	test   %ebx,%ebx
	jne    1ff04 <jpeg_make_d_derived_tbl+0xd4>
	add    $0x1,%r15d
	cmp    $0x10,%r15d
	jle    1ff42 <jpeg_make_d_derived_tbl+0x112>
	movslq %r12d,%rax
	movb   $0x0,-0x555(%rbp,%rax,1)
	movsbq -0x555(%rbp),%rcx
	mov    %r13,-0x48(%rbp)
	xor    %ebx,%ebx
	mov    %rbx,%r13
	jmp    1ff95 <jpeg_make_d_derived_tbl+0x165>
	movslq %r15d,%rax
	movzbl 0x0(%r13,%rax,1),%ebx
	lea    (%r12,%rbx,1),%eax
	cmp    $0x100,%eax
	jle    1ff16 <jpeg_make_d_derived_tbl+0xe6>
	mov    (%r14),%rax
	movl   $0x8,0x28(%rax)
	mov    (%r14),%rax
	mov    (%rax),%rax
	mov    %r14,%rdi
	callq  *%rax
	jmp    1ff16 <jpeg_make_d_derived_tbl+0xe6>
	mov    (%r14),%rax
	movl   $0x8,0x28(%rax)
	mov    (%r14),%rax
	mov    (%rax),%rax
	mov    %r14,%rdi
	mov    %r12,-0x10(%rbp)
	mov    %rcx,%r12
	callq  *%rax
	mov    %r12,%rcx
	add    $0x1,%ecx
	add    %ebx,%ebx
	mov    -0x10(%rbp),%r12
	movslq %r13d,%rax
	movsbq -0x555(%rbp,%rax,1),%rax
	test   %al,%al
	jne    1ffc4 <jpeg_make_d_derived_tbl+0x194>
	mov    -0x50(%rbp),%r8
	mov    -0x48(%rbp),%rbx
	xor    %eax,%eax
	mov    $0x1,%ecx
	jmp    20018 <jpeg_make_d_derived_tbl+0x1e8>
	mov    %ebx,-0x454(%rbp,%rdx,4)
	add    $0x1,%ebx
	add    $0x1,%r13d
	movslq %r13d,%rdx
	movsbq -0x555(%rbp,%rdx,1),%rax
	cmp    %eax,%ecx
	je     1ffb6 <jpeg_make_d_derived_tbl+0x186>
	mov    $0x1,%eax
	shl    %cl,%rax
	mov    %ebx,%edx
	cmp    %rdx,%rax
	jle    1ff6d <jpeg_make_d_derived_tbl+0x13d>
	mov    %r12,-0x10(%rbp)
	jmp    1ff8c <jpeg_make_d_derived_tbl+0x15c>
	movslq %eax,%rdx
	mov    -0x454(%rbp,%rdx,4),%esi
	sub    %rsi,%rdx
	mov    %rdx,0x90(%r8,%rdi,8)
	movzbl (%rbx,%rdi,1),%edx
	add    %edx,%eax
	lea    -0x1(%rax),%edx
	movslq %edx,%rdx
	mov    -0x454(%rbp,%rdx,4),%edx
	mov    %rdx,(%r8,%rdi,8)
	add    $0x1,%ecx
	cmp    $0x10,%ecx
	jle    20037 <jpeg_make_d_derived_tbl+0x207>
	movq   $0x0,0x118(%r8)
	movq   $0xfffff,0x88(%r8)
	xor    %eax,%eax
	jmp    2005e <jpeg_make_d_derived_tbl+0x22e>
	movslq %ecx,%rdi
	movzbl (%rbx,%rdi,1),%edx
	test   %dl,%dl
	jne    1ffe9 <jpeg_make_d_derived_tbl+0x1b9>
	movq   $0xffffffffffffffff,(%r8,%rdi,8)
	jmp    20015 <jpeg_make_d_derived_tbl+0x1e5>
	movslq %eax,%rcx
	movl   $0x900,0x128(%r8,%rcx,4)
	add    $0x1,%eax
	cmp    $0xff,%eax
	jle    2004c <jpeg_make_d_derived_tbl+0x21c>
	mov    $0x8,%ecx
	mov    %r12,-0x10(%rbp)
	mov    %r14,-0x8(%rbp)
	xor    %esi,%esi
	mov    $0x1,%edx
	mov    %rdx,%rax
	jmp    200c1 <jpeg_make_d_derived_tbl+0x291>
	movzbl 0x11(%rbx,%r11,1),%r12d
	lea    (%r12,%rdi,1),%r13d
	movslq %eax,%r12
	mov    %r13d,0x128(%r8,%r12,4)
	add    $0x1,%eax
	add    $0xffffffff,%ecx
	test   %ecx,%ecx
	jg     2007e <jpeg_make_d_derived_tbl+0x24e>
	add    $0x1,%esi
	add    $0x1,%edx
	mov    -0x50(%rbp),%rcx
	movzbl (%rbx,%r9,1),%eax
	cmp    %edx,%eax
	jge    200db <jpeg_make_d_derived_tbl+0x2ab>
	mov    -0x48(%rbp),%rax
	add    $0x1,%eax
	mov    $0x8,%ecx
	mov    $0x1,%edx
	cmp    $0x8,%eax
	jle    200f1 <jpeg_make_d_derived_tbl+0x2c1>
	mov    -0x40(%rbp),%rax
	test   %eax,%eax
	je     20108 <jpeg_make_d_derived_tbl+0x2d8>
	xor    %r12d,%r12d
	mov    -0x8(%rbp),%r13
	mov    -0x10(%rbp),%r14
	jmp    20145 <jpeg_make_d_derived_tbl+0x315>
	movslq %esi,%r11
	movslq -0x454(%rbp,%r11,4),%rax
	shl    %cl,%eax
	mov    %rcx,-0x50(%rbp)
	mov    %r10,%rcx
	jmp    20099 <jpeg_make_d_derived_tbl+0x269>
	movslq %eax,%r9
	mov    %rax,%rdi
	shl    $0x8,%edi
	sub    %eax,%ecx
	mov    %rdx,%r10
	shl    %cl,%r10d
	mov    %rax,-0x48(%rbp)
	jmp    200a7 <jpeg_make_d_derived_tbl+0x277>
	mov    -0x18(%rbp),%rbx
	mov    -0x38(%rbp),%r15
	mov    -0x30(%rbp),%r14
	mov    -0x28(%rbp),%r13
	mov    -0x20(%rbp),%r12
	leaveq 
	retq   
	movslq %r12d,%rax
	movzbl 0x11(%rbx,%rax,1),%eax
	cmp    $0xf,%al
	jbe    20141 <jpeg_make_d_derived_tbl+0x311>
	mov    0x0(%r13),%rax
	movl   $0x8,0x28(%rax)
	mov    0x0(%r13),%rax
	mov    (%rax),%rax
	mov    %r13,%rdi
	callq  *%rax
	add    $0x1,%r12d
	cmp    %r14d,%r12d
	jl     2011e <jpeg_make_d_derived_tbl+0x2ee>
	mov    -0x18(%rbp),%rbx
	mov    -0x38(%rbp),%r15
	mov    -0x30(%rbp),%r14
	mov    -0x28(%rbp),%r13
	mov    -0x20(%rbp),%r12
	leaveq 
	retq   

0020160 <jpeg_fill_bit_buffer>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    (%rdi),%r8
	mov    0x8(%rdi),%rax
	mov    0x20(%rdi),%r10
	movslq 0x21c(%r10),%r9
	test   %r9d,%r9d
	je     201a7 <jpeg_fill_bit_buffer+0x47>
	mov    %rbx,%r9
	mov    %rsi,%rbx
	mov    %rcx,%rsi
	mov    %r14,%rcx
	mov    %r10,%r14
	mov    %r12,%r10
	mov    %rdi,%r12
	mov    %r13,%r11
	mov    %rdx,%r13
	cmp    %esi,%r13d
	jl     201d9 <jpeg_fill_bit_buffer+0x79>
	mov    %rcx,%r14
	jmpq   20262 <jpeg_fill_bit_buffer+0x102>
	mov    $0xff,%r9d
	mov    %rbx,-0x8(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %r15,-0x28(%rbp)
	mov    %rcx,-0x30(%rbp)
	mov    %rsi,%rbx
	mov    %rdi,%r12
	mov    %rdx,%r13
	mov    %r10,%r14
	mov    %r9,%r15
	jmpq   20296 <jpeg_fill_bit_buffer+0x136>
	mov    0x250(%r14),%rdx
	movslq 0x10(%rdx),%rdx
	test   %edx,%edx
	je     201f0 <jpeg_fill_bit_buffer+0x90>
	mov    %rcx,%r14
	mov    %r13,%rcx
	jmp    20254 <jpeg_fill_bit_buffer+0xf4>
	mov    (%r14),%rdx
	movl   $0x75,0x28(%rdx)
	mov    (%r14),%rdx
	mov    0x8(%rdx),%rdx
	mov    $0xffffffffffffffff,%rsi
	mov    %r14,%rdi
	mov    %rax,-0x8(%rbp)
	mov    %r9,-0x10(%rbp)
	mov    %r10,-0x18(%rbp)
	mov    %r11,-0x20(%rbp)
	mov    %rcx,-0x28(%rbp)
	mov    %r15,-0x30(%rbp)
	mov    %r8,%r15
	callq  *%rdx
	mov    0x250(%r14),%rax
	movl   $0x1,0x10(%rax)
	mov    %r13,%rcx
	mov    %r15,%r8
	mov    -0x30(%rbp),%r15
	mov    -0x28(%rbp),%r14
	mov    -0x20(%rbp),%r11
	mov    -0x18(%rbp),%r10
	mov    -0x10(%rbp),%r9
	mov    -0x8(%rbp),%rax
	mov    $0x39,%r13d
	neg    %ecx
	add    %r13d,%ecx
	shl    %cl,%rbx
	mov    %r8,(%r12)
	mov    %rax,0x8(%r12)
	mov    %rbx,0x10(%r12)
	mov    %r13d,0x18(%r12)
	mov    %r9,%rbx
	mov    %r10,%r12
	mov    %r11,%r13
	mov    $0x1,%eax
	leaveq 
	retq   
	mov    %rdx,%r8
	movslq %ecx,%rcx
	shl    $0x8,%rbx
	add    %rcx,%rbx
	add    $0x8,%r13d
	cmp    $0x38,%r13d
	jle    202b2 <jpeg_fill_bit_buffer+0x152>
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r11
	mov    -0x10(%rbp),%r10
	mov    -0x8(%rbp),%r9
	jmp    20262 <jpeg_fill_bit_buffer+0x102>
	test   %rax,%rax
	je     202ec <jpeg_fill_bit_buffer+0x18c>
	add    $0xffffffffffffffff,%rax
	lea    0x1(%r8),%rdx
	movzbl (%r8),%ecx
	cmp    $0xff,%cl
	jne    20285 <jpeg_fill_bit_buffer+0x125>
	test   %rax,%rax
	je     2030a <jpeg_fill_bit_buffer+0x1aa>
	mov    %rdx,%rcx
	add    $0xffffffffffffffff,%rax
	lea    0x1(%rcx),%rdx
	movzbl (%rcx),%ecx
	cmp    $0xff,%cl
	je     202c8 <jpeg_fill_bit_buffer+0x168>
	test   %cl,%cl
	jne    20328 <jpeg_fill_bit_buffer+0x1c8>
	mov    %rdx,%r8
	mov    %r15,%rcx
	jmp    20288 <jpeg_fill_bit_buffer+0x128>
	mov    0x28(%r14),%rax
	mov    0x18(%rax),%rax
	mov    %r14,%rdi
	callq  *%rax
	test   %eax,%eax
	je     2034f <jpeg_fill_bit_buffer+0x1ef>
	mov    0x28(%r14),%rax
	mov    (%rax),%r8
	mov    0x8(%rax),%rax
	jmp    202b7 <jpeg_fill_bit_buffer+0x157>
	mov    0x28(%r14),%rax
	mov    0x18(%rax),%rax
	mov    %r14,%rdi
	callq  *%rax
	test   %eax,%eax
	je     20367 <jpeg_fill_bit_buffer+0x207>
	mov    0x28(%r14),%rax
	mov    (%rax),%rcx
	mov    0x8(%rax),%rax
	jmp    202d0 <jpeg_fill_bit_buffer+0x170>
	mov    %ecx,0x21c(%r14)
	mov    %rdx,%r8
	mov    -0x30(%rbp),%rsi
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%rcx
	mov    -0x18(%rbp),%r11
	mov    -0x10(%rbp),%r10
	mov    -0x8(%rbp),%r9
	jmpq   2019a <jpeg_fill_bit_buffer+0x3a>
	xor    %eax,%eax
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	leaveq 
	retq   
	xor    %eax,%eax
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	leaveq 
	retq   
	nop

0020380 <jpeg_huff_decode>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %r15,-0x18(%rbp)
	cmp    %edx,%r8d
	jg     203d9 <jpeg_huff_decode+0x59>
	mov    %rbx,%r9
	mov    %r12,%r10
	mov    %rdi,%r12
	mov    %r13,%r11
	mov    %rcx,%r13
	mov    %r8,%rcx
	mov    $0x1,%r15d
	mov    %r15,%rax
	shl    %cl,%eax
	mov    %rcx,%rbx
	add    $0xffffffff,%eax
	mov    %rdx,%rcx
	sub    %ebx,%ecx
	mov    %r14,%rdx
	mov    %rsi,%rdi
	shr    %cl,%rdi
	and    %edi,%eax
	movslq %eax,%r14
	mov    %r9,-0x8(%rbp)
	mov    %r10,-0x10(%rbp)
	mov    %r11,-0x20(%rbp)
	mov    %rdx,-0x28(%rbp)
	jmp    2044a <jpeg_huff_decode+0xca>
	mov    %rdi,%rax
	mov    %r8,%r9
	mov    %r8,-0x28(%rbp)
	mov    %rcx,-0x20(%rbp)
	mov    %r9,%rcx
	mov    %r12,%r15
	mov    %rdi,%r12
	mov    %rax,%rdi
	callq  4410 <jpeg_fill_bit_buffer@plt>
	test   %eax,%eax
	jne    20493 <jpeg_huff_decode+0x113>
	mov    %r15,%r12
	mov    $0xffffffffffffffff,%rax
	mov    -0x18(%rbp),%r15
	leaveq 
	retq   
	test   %ecx,%ecx
	jg     20434 <jpeg_huff_decode+0xb4>
	mov    %rcx,%rdx
	mov    %r12,%rdi
	mov    %r15,%rcx
	callq  4410 <jpeg_fill_bit_buffer@plt>
	test   %eax,%eax
	je     204b3 <jpeg_huff_decode+0x133>
	mov    0x10(%r12),%rsi
	movslq 0x18(%r12),%rcx
	add    $0x1,%ebx
	add    $0xffffffff,%ecx
	mov    %rsi,%rax
	shr    %cl,%rax
	and    $0x1,%eax
	movslq %eax,%rax
	lea    (%rax,%r14,2),%r14
	movslq %ebx,%rdx
	mov    0x0(%r13,%rdx,8),%rax
	cmp    %r14,%rax
	jl     20410 <jpeg_huff_decode+0x90>
	mov    %rsi,0x10(%r12)
	mov    %ecx,0x18(%r12)
	cmp    $0x10,%ebx
	jg     204d0 <jpeg_huff_decode+0x150>
	add    0x90(%r13,%rdx,8),%r14
	movslq %r14d,%rax
	mov    0x120(%r13),%rcx
	movzbl 0x11(%rcx,%rax,1),%eax
	mov    -0x28(%rbp),%r14
	mov    -0x20(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	mov    -0x18(%rbp),%r15
	leaveq 
	retq   
	mov    0x10(%r12),%rsi
	movslq 0x18(%r12),%rdx
	mov    %rbx,%r9
	mov    %r15,%r10
	mov    %r13,%r11
	mov    -0x20(%rbp),%r13
	mov    -0x28(%rbp),%rcx
	jmpq   203a3 <jpeg_huff_decode+0x23>
	mov    -0x28(%rbp),%r14
	mov    -0x20(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	mov    $0xffffffffffffffff,%rax
	mov    -0x18(%rbp),%r15
	leaveq 
	retq   
	mov    0x20(%r12),%rax
	mov    (%rax),%rax
	movl   $0x76,0x28(%rax)
	mov    0x20(%r12),%rdi
	mov    (%rdi),%rax
	mov    0x8(%rax),%rax
	mov    $0xffffffffffffffff,%rsi
	callq  *%rax
	xor    %eax,%eax
	mov    -0x28(%rbp),%r14
	mov    -0x20(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	mov    -0x18(%rbp),%r15
	leaveq 
	retq   
	nopl   0x0(%rax)

0020510 <add_huff_table>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    (%rsi),%rax
	test   %rax,%rax
	je     20522 <add_huff_table+0x12>
	leaveq 
	retq   
	mov    %rdi,%rax
	mov    %r12,-0x8(%rbp)
	mov    %r13,-0x10(%rbp)
	mov    %r14,-0x18(%rbp)
	mov    %r15,-0x20(%rbp)
	mov    %rsi,%r12
	mov    %rcx,%r13
	mov    %rdi,%r14
	mov    %rax,%rdi
	mov    %rdx,%r15
	callq  44a0 <jpeg_alloc_huff_table@plt>
	mov    %rax,%rdi
	mov    %rdi,(%r12)
	mov    $0x11,%edx
	mov    %r15,%rsi
	callq  42c0 <memcpy@plt>
	xor    %edx,%edx
	mov    $0x1,%r8d
	mov    %rdx,%rax
	jmp    20578 <add_huff_table+0x68>
	movslq %r8d,%rcx
	movzbl (%r15,%rcx,1),%ecx
	add    %ecx,%eax
	add    $0x1,%r8d
	cmp    $0x10,%r8d
	jle    2056a <add_huff_table+0x5a>
	test   %eax,%eax
	jle    2058e <add_huff_table+0x7e>
	cmp    $0x100,%eax
	jg     2058e <add_huff_table+0x7e>
	mov    %rdx,%r14
	jmp    205ac <add_huff_table+0x9c>
	mov    (%r14),%rcx
	movl   $0x8,0x28(%rcx)
	mov    (%r14),%rcx
	mov    (%rcx),%rcx
	mov    %r14,%rdi
	mov    %rdx,%r14
	mov    %rax,%r15
	callq  *%rcx
	mov    %r15,%rax
	mov    (%r12),%rdi
	add    $0x11,%rdi
	mov    %r13,%rsi
	mov    %rax,%r13
	movslq %r13d,%r15
	mov    %r15,%rdx
	callq  42c0 <memcpy@plt>
	mov    (%r12),%rax
	lea    0x11(%rax,%r15,1),%rdi
	mov    $0x100,%eax
	sub    %r13d,%eax
	movslq %eax,%rdx
	mov    %r14,%rsi
	callq  41e0 <memset@plt>
	mov    (%r12),%rax
	movl   $0x0,0x114(%rax)
	mov    -0x20(%rbp),%r15
	mov    -0x18(%rbp),%r14
	mov    -0x10(%rbp),%r13
	mov    -0x8(%rbp),%r12
	leaveq 
	retq   
	data16 nopw %cs:0x0(%rax,%rax,1)
	nopl   0x0(%rax)

0020610 <std_huff_tables>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %r13,-0x8(%rbp)
	mov    %r14,-0x10(%rbp)
	mov    %r15,-0x18(%rbp)
	movslq 0x20(%rdi),%rax
	test   %eax,%eax
	jne    2063c <std_huff_tables+0x2c>
	lea    0x80(%rdi),%r15
	lea    0xa0(%rdi),%r13
	jmp    2064a <std_huff_tables+0x3a>
	lea    0xe8(%rdi),%r15
	lea    0x108(%rdi),%r13
	lea    0x393cf(%rip),%rdx        # 59a20 <bits_dc_luminance.9>
	lea    0x393d9(%rip),%rcx        # 59a31 <val_dc_luminance.10>
	mov    %rdi,%r14
	mov    %r15,%rsi
	callq  20510 <add_huff_table>
	lea    0x393f0(%rip),%rdx        # 59a5a <bits_ac_luminance.13>
	lea    0x393fa(%rip),%rcx        # 59a6b <val_ac_luminance.14>
	mov    %r14,%rdi
	mov    %r13,%rsi
	callq  20510 <add_huff_table>
	lea    0x8(%r15),%rsi
	lea    0x393b6(%rip),%rdx        # 59a3d <bits_dc_chrominance.11>
	lea    0x393c0(%rip),%rcx        # 59a4e <val_dc_chrominance.12>
	mov    %r14,%rdi
	callq  20510 <add_huff_table>
	lea    0x8(%r13),%rsi
	mov    %r14,%rdi
	lea    0x39469(%rip),%rdx        # 59b0d <bits_ac_chrominance.15>
	lea    0x39473(%rip),%rcx        # 59b1e <val_ac_chrominance.16>
	callq  20510 <add_huff_table>
	mov    -0x18(%rbp),%r15
	mov    -0x10(%rbp),%r14
	mov    -0x8(%rbp),%r13
	leaveq 
	retq   
	xchg   %ax,%ax

00206c0 <start_pass_huff_decoder>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %r12,-0x10(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %r15,-0x28(%rbp)
	mov    %rbx,-0x8(%rbp)
	mov    0x250(%rdi),%r12
	mov    $0x1,%esi
	xor    %r14d,%r14d
	movslq 0x20c(%rdi),%rax
	test   %eax,%eax
	jne    20720 <start_pass_huff_decoder+0x60>
	movslq 0x210(%rdi),%rax
	cmp    $0x3f,%eax
	jne    20720 <start_pass_huff_decoder+0x60>
	movslq 0x214(%rdi),%rax
	test   %eax,%eax
	jne    20720 <start_pass_huff_decoder+0x60>
	movslq 0x218(%rdi),%rax
	test   %eax,%eax
	jne    20720 <start_pass_huff_decoder+0x60>
	mov    %rdi,%rbx
	mov    %r14,%r13
	jmp    20790 <start_pass_huff_decoder+0xd0>
	mov    (%rdi),%rax
	movl   $0x7a,0x28(%rax)
	mov    (%rdi),%rax
	mov    0x8(%rax),%rax
	mov    %rsi,%r13
	mov    $0xffffffffffffffff,%rsi
	mov    %rdi,%rbx
	callq  *%rax
	mov    %r13,%rsi
	mov    %r14,%r13
	jmp    20790 <start_pass_huff_decoder+0xd0>
	movslq %r13d,%r15
	mov    0x1b8(%rbx,%r15,8),%rax
	movslq 0x14(%rax),%rdx
	lea    0x40(%r12,%rdx,8),%rcx
	movslq 0x18(%rax),%r14
	mov    %rbx,%rdi
	callq  44c0 <jpeg_make_d_derived_tbl@plt>
	mov    %r14,%rdx
	lea    0x60(%r12,%rdx,8),%rcx
	mov    %rbx,%rdi
	xor    %r14d,%r14d
	mov    %r14,%rsi
	callq  44c0 <jpeg_make_d_derived_tbl@plt>
	movl   $0x0,0x28(%r12,%r15,4)
	add    $0x1,%r13d
	mov    $0x1,%esi
	movslq 0x1b0(%rbx),%rax
	cmp    %r13d,%eax
	jg     20748 <start_pass_huff_decoder+0x88>
	mov    %r14,%rax
	jmp    207af <start_pass_huff_decoder+0xef>
	mov    %rsi,%rcx
	mov    %ecx,0x148(%r12,%rdi,4)
	add    $0x1,%eax
	movslq 0x1e0(%rbx),%rcx
	cmp    %eax,%ecx
	jg     207f6 <start_pass_huff_decoder+0x136>
	movl   $0x0,0x20(%r12)
	movq   $0x0,0x18(%r12)
	movl   $0x0,0x10(%r12)
	mov    0x170(%rbx),%eax
	mov    %eax,0x38(%r12)
	mov    -0x8(%rbp),%rbx
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	leaveq 
	retq   
	movslq %eax,%rdi
	movslq 0x1e4(%rbx,%rdi,4),%rcx
	mov    0x1b8(%rbx,%rcx,8),%rdx
	movslq 0x14(%rdx),%rcx
	mov    0x40(%r12,%rcx,8),%rcx
	mov    %rcx,0x80(%r12,%rdi,8)
	movslq 0x18(%rdx),%rcx
	mov    0x60(%r12,%rcx,8),%rcx
	mov    %rcx,0xd0(%r12,%rdi,8)
	movslq 0x30(%rdx),%rcx
	test   %ecx,%ecx
	jne    20850 <start_pass_huff_decoder+0x190>
	movl   $0x0,0x148(%r12,%rdi,4)
	movl   $0x0,0x120(%r12,%rdi,4)
	jmpq   207ac <start_pass_huff_decoder+0xec>
	movl   $0x1,0x120(%r12,%rdi,4)
	movslq 0x24(%rdx),%rcx
	cmp    $0x1,%ecx
	jg     207a1 <start_pass_huff_decoder+0xe1>
	mov    %r14,%rcx
	jmpq   207a4 <start_pass_huff_decoder+0xe4>
	data16 nopw %cs:0x0(%rax,%rax,1)
	nopl   0x0(%rax)

0020880 <process_restart>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    0x250(%rdi),%rdx
	mov    %rdx,-0x10(%rbp)
	movslq 0x20(%rdx),%rcx
	mov    %rcx,%rax
	sar    $0x2,%eax
	shr    $0x1d,%eax
	add    %ecx,%eax
	sar    $0x3,%eax
	mov    0x248(%rdi),%rcx
	add    0x24(%rcx),%eax
	mov    %eax,0x24(%rcx)
	movl   $0x0,0x20(%rdx)
	mov    0x248(%rdi),%rax
	mov    0x10(%rax),%rax
	callq  *%rax
	test   %eax,%eax
	jne    208d2 <process_restart+0x52>
	xor    %eax,%eax
	leaveq 
	retq   
	xor    %eax,%eax
	mov    -0x10(%rbp),%rdx
	mov    -0x8(%rbp),%rsi
	jmp    208ec <process_restart+0x6c>
	movslq %eax,%rcx
	movl   $0x0,0x28(%rdx,%rcx,4)
	add    $0x1,%eax
	movslq 0x1b0(%rsi),%rcx
	cmp    %eax,%ecx
	jg     208de <process_restart+0x5e>
	mov    0x170(%rsi),%eax
	mov    %eax,0x38(%rdx)
	mov    $0x1,%eax
	movslq 0x21c(%rsi),%rcx
	test   %ecx,%ecx
	je     20912 <process_restart+0x92>
	leaveq 
	retq   
	movl   $0x0,0x10(%rdx)
	leaveq 
	retq   
	nopl   0x0(%rax,%rax,1)

0020920 <decode_mcu_slow>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0xa0,%rsp
	mov    %r15,-0x28(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %rsi,-0x60(%rbp)
	mov    %rbx,-0x8(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    %rdi,-0x48(%rbp)
	mov    0x250(%rdi),%rax
	mov    %rax,-0x50(%rbp)
	mov    %rdi,-0x78(%rbp)
	mov    0x28(%rdi),%rcx
	mov    (%rcx),%rcx
	mov    %rcx,-0x98(%rbp)
	mov    0x28(%rdi),%rcx
	mov    0x8(%rcx),%rcx
	mov    %rcx,-0x90(%rbp)
	mov    0x18(%rax),%r8
	movslq 0x20(%rax),%rdx
	mov    0x28(%rax),%rcx
	mov    %rcx,-0x70(%rbp)
	mov    0x30(%rax),%rcx
	mov    %rcx,-0x68(%rbp)
	mov    0x4d646(%rip),%r9        # 6dfd8 <jpeg_natural_order@@LIBJPEG_6.2+0x129f4>
	mov    %r9,-0x40(%rbp)
	mov    %rsi,%rcx
	mov    %r8,%rsi
	lea    -0x98(%rbp),%rbx
	xor    %r14d,%r14d
	mov    $0x1,%r13d
	mov    %r14,%r8
	jmp    209ef <decode_mcu_slow+0xcf>
	cmp    %r8d,%edx
	jl     20a49 <decode_mcu_slow+0x129>
	sub    %r8d,%edx
	sar    $0x4,%eax
	add    %r15d,%eax
	lea    0x1(%rax),%r15d
	mov    $0x1,%r13d
	cmp    $0x3f,%r15d
	jle    20a77 <decode_mcu_slow+0x157>
	mov    -0x40(%rbp),%r9
	mov    -0x58(%rbp),%rax
	lea    0x1(%rax),%r8d
	mov    -0x50(%rbp),%rax
	mov    -0x48(%rbp),%rdi
	mov    -0x60(%rbp),%rcx
	cmp    0x1e0(%rdi),%r8d
	jl     20aa8 <decode_mcu_slow+0x188>
	mov    -0x98(%rbp),%rbx
	mov    0x28(%rdi),%rcx
	mov    %rbx,(%rcx)
	mov    -0x90(%rbp),%rbx
	mov    0x28(%rdi),%rcx
	mov    %rbx,0x8(%rcx)
	mov    %rsi,0x18(%rax)
	mov    %edx,0x20(%rax)
	mov    -0x70(%rbp),%rcx
	mov    %rcx,0x28(%rax)
	mov    -0x68(%rbp),%rcx
	mov    %rcx,0x30(%rax)
	mov    %r13,%rax
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	mov    -0x20(%rbp),%r14
	mov    -0x28(%rbp),%r15
	leaveq 
	retq   
	mov    %r8,%r13
	mov    %rax,%r14
	mov    %rbx,%rdi
	mov    %r13,%rcx
	callq  4410 <jpeg_fill_bit_buffer@plt>
	test   %eax,%eax
	je     20abc <decode_mcu_slow+0x19c>
	mov    %r14,%rax
	mov    %r13,%r8
	mov    -0x88(%rbp),%rsi
	movslq -0x80(%rbp),%rdx
	xor    %r14d,%r14d
	jmpq   209ba <decode_mcu_slow+0x9a>
	cmp    $0x7,%edx
	jle    20ad4 <decode_mcu_slow+0x1b4>
	lea    0x38(%rdx),%ecx
	mov    %rsi,%rax
	shr    %cl,%rax
	movzbl %al,%eax
	movslq %eax,%rax
	movslq 0x128(%r12,%rax,4),%rax
	mov    %rax,%r8
	sar    $0x8,%r8d
	cmp    $0x8,%r8d
	jg     20afa <decode_mcu_slow+0x1da>
	sub    %r8d,%edx
	movzbl %al,%eax
	jmp    20b18 <decode_mcu_slow+0x1f8>
	test   %rcx,%rcx
	movslq %r8d,%r10
	jne    20b3f <decode_mcu_slow+0x21f>
	mov    %r14,%r15
	jmpq   20b43 <decode_mcu_slow+0x223>
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	xor    %eax,%eax
	mov    -0x20(%rbp),%r14
	mov    -0x28(%rbp),%r15
	leaveq 
	retq   
	mov    %rbx,%rdi
	mov    %r14,%rcx
	callq  4410 <jpeg_fill_bit_buffer@plt>
	test   %eax,%eax
	je     20b94 <decode_mcu_slow+0x274>
	mov    -0x88(%rbp),%rsi
	movslq -0x80(%rbp),%rdx
	cmp    $0x7,%edx
	jg     20a7c <decode_mcu_slow+0x15c>
	mov    %r13,%r8
	mov    %rbx,%rdi
	mov    %r12,%rcx
	callq  41c0 <jpeg_huff_decode@plt>
	test   %eax,%eax
	js     20bad <decode_mcu_slow+0x28d>
	mov    -0x88(%rbp),%rsi
	movslq -0x80(%rbp),%rdx
	mov    %rax,%r8
	and    $0xf,%r8d
	test   %r8d,%r8d
	jg     209b1 <decode_mcu_slow+0x91>
	and    $0xfffffff0,%eax
	cmp    $0xf0,%eax
	jne    20bc6 <decode_mcu_slow+0x2a6>
	lea    0xf(%r15),%eax
	jmpq   209c3 <decode_mcu_slow+0xa3>
	mov    (%rcx,%r10,8),%r15
	mov    0x80(%rax,%r10,8),%r11
	mov    %r8,-0x58(%rbp)
	mov    0xd0(%rax,%r10,8),%r12
	mov    %r12,-0x30(%rbp)
	cmp    $0x7,%edx
	jle    20bcf <decode_mcu_slow+0x2af>
	lea    0x38(%rdx),%ecx
	mov    %rsi,%r8
	shr    %cl,%r8
	movzbl %r8b,%ecx
	movslq %ecx,%rcx
	movslq 0x128(%r11,%rcx,4),%rcx
	mov    %rcx,%r8
	sar    $0x8,%r8d
	cmp    $0x8,%r8d
	jg     20c1f <decode_mcu_slow+0x2ff>
	sub    %r8d,%edx
	movzbl %cl,%ecx
	jmpq   20c69 <decode_mcu_slow+0x349>
	mov    %r14,%rax
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	mov    -0x20(%rbp),%r14
	mov    -0x28(%rbp),%r15
	leaveq 
	retq   
	mov    %r14,%rax
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	mov    -0x20(%rbp),%r14
	mov    -0x28(%rbp),%r15
	leaveq 
	retq   
	mov    -0x40(%rbp),%r9
	jmpq   209db <decode_mcu_slow+0xbb>
	mov    %r14,%rcx
	mov    %rdi,%r14
	mov    %rbx,%rdi
	mov    %rax,%rbx
	mov    %r10,%r12
	mov    %r11,%r13
	callq  4410 <jpeg_fill_bit_buffer@plt>
	test   %eax,%eax
	je     20c9d <decode_mcu_slow+0x37d>
	mov    -0x88(%rbp),%rsi
	movslq -0x80(%rbp),%rdx
	cmp    $0x7,%edx
	jg     20cb5 <decode_mcu_slow+0x395>
	mov    %rbx,%rax
	mov    %r14,%rdi
	mov    %r12,%r10
	mov    %r13,%r11
	lea    -0x98(%rbp),%rbx
	mov    $0x1,%r8d
	mov    -0x30(%rbp),%r12
	mov    %r11,%rcx
	mov    %r10,%r13
	mov    %rax,%r14
	mov    %rbx,%r11
	mov    %rdi,%rbx
	mov    %r11,%rdi
	callq  41c0 <jpeg_huff_decode@plt>
	test   %eax,%eax
	js     20cde <decode_mcu_slow+0x3be>
	mov    %rax,%rcx
	mov    %r14,%rax
	mov    %rbx,%rdi
	mov    %r13,%r10
	mov    -0x88(%rbp),%rsi
	movslq -0x80(%rbp),%rdx
	mov    -0x40(%rbp),%r9
	xor    %r14d,%r14d
	lea    -0x98(%rbp),%rbx
	mov    $0x1,%r13d
	test   %ecx,%ecx
	jne    20cf6 <decode_mcu_slow+0x3d6>
	mov    %r14,%rcx
	movslq 0x120(%rax,%r10,4),%r8
	test   %r8d,%r8d
	jne    20d93 <decode_mcu_slow+0x473>
	movslq 0x148(%rax,%r10,4),%rax
	test   %eax,%eax
	jne    20db5 <decode_mcu_slow+0x495>
	mov    %r13,%r15
	jmpq   209cd <decode_mcu_slow+0xad>
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	xor    %eax,%eax
	mov    -0x20(%rbp),%r14
	mov    -0x28(%rbp),%r15
	leaveq 
	retq   
	mov    %rbx,%rax
	mov    %r14,%rdi
	mov    %r12,%r10
	mov    %r13,%r11
	mov    -0x40(%rbp),%r9
	xor    %r14d,%r14d
	lea    -0x98(%rbp),%rbx
	mov    $0x1,%r13d
	mov    -0x30(%rbp),%r12
	jmpq   20b60 <decode_mcu_slow+0x240>
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	xor    %eax,%eax
	mov    -0x20(%rbp),%r14
	mov    -0x28(%rbp),%r15
	leaveq 
	retq   
	cmp    %edx,%ecx
	jle    20d41 <decode_mcu_slow+0x421>
	mov    %rdi,%r12
	mov    %rbx,%rdi
	mov    %r10,%r13
	mov    %rax,%r14
	mov    %rcx,%rbx
	callq  4410 <jpeg_fill_bit_buffer@plt>
	test   %eax,%eax
	je     20dc7 <decode_mcu_slow+0x4a7>
	mov    %r14,%rax
	mov    %rbx,%rcx
	mov    %r12,%rdi
	mov    %r13,%r10
	mov    -0x88(%rbp),%rsi
	movslq -0x80(%rbp),%rdx
	xor    %r14d,%r14d
	lea    -0x98(%rbp),%rbx
	mov    $0x1,%r13d
	mov    -0x30(%rbp),%r12
	mov    %r13,%r8
	shl    %cl,%r8d
	add    $0xffffffff,%r8d
	sub    %ecx,%edx
	mov    %rcx,%r9
	mov    %rdx,%rcx
	mov    %rsi,%r11
	shr    %cl,%r11
	mov    %rcx,%rdx
	and    %r11d,%r8d
	lea    0x1f(%r9),%ecx
	mov    %r13,%r11
	shl    %cl,%r11d
	neg    %r11d
	add    %r8d,%r11d
	sar    $0x1f,%r11d
	mov    %r9,%rcx
	mov    $0xffffffffffffffff,%r9
	shl    %cl,%r9d
	lea    0x1(%r9),%ecx
	and    %r11d,%ecx
	add    %r8d,%ecx
	mov    -0x40(%rbp),%r9
	jmpq   20c74 <decode_mcu_slow+0x354>
	movslq 0x1e4(%rdi,%r10,4),%rdi
	add    -0x70(%rbp,%rdi,4),%ecx
	mov    %ecx,-0x70(%rbp,%rdi,4)
	test   %r15,%r15
	je     20c85 <decode_mcu_slow+0x365>
	mov    %cx,(%r15)
	jmpq   20c85 <decode_mcu_slow+0x365>
	test   %r15,%r15
	je     20ddf <decode_mcu_slow+0x4bf>
	mov    $0xffffffff,%edi
	mov    %r13,%rax
	jmpq   20e8b <decode_mcu_slow+0x56b>
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	xor    %eax,%eax
	mov    -0x20(%rbp),%r14
	mov    -0x28(%rbp),%r15
	leaveq 
	retq   
	mov    %r13,%r15
	jmpq   209cd <decode_mcu_slow+0xad>
	cmp    %edx,%ecx
	jle    20e2e <decode_mcu_slow+0x50e>
	mov    %rbx,%rdi
	mov    %r9,%r12
	mov    %rax,%r13
	mov    %rcx,%rbx
	callq  4410 <jpeg_fill_bit_buffer@plt>
	test   %eax,%eax
	je     20ecb <decode_mcu_slow+0x5ab>
	mov    %r13,%rax
	mov    %rbx,%rcx
	mov    %r12,%r9
	mov    -0x88(%rbp),%rsi
	movslq -0x80(%rbp),%rdx
	lea    -0x98(%rbp),%rbx
	mov    $0x1,%r13d
	mov    -0x30(%rbp),%r12
	mov    $0xffffffff,%edi
	mov    %r13,%r8
	shl    %cl,%r8d
	add    $0xffffffff,%r8d
	sub    %ecx,%edx
	mov    %rcx,%r11
	mov    %rdx,%rcx
	mov    %rsi,%r10
	shr    %cl,%r10
	mov    %rcx,%rdx
	and    %r10d,%r8d
	lea    0x1f(%r11),%ecx
	mov    %r13,%r10
	shl    %cl,%r10d
	neg    %r10d
	add    %r8d,%r10d
	sar    $0x1f,%r10d
	mov    %r11,%rcx
	mov    %rdi,%r11
	shl    %cl,%r11d
	lea    0x1(%r11),%ecx
	and    %ecx,%r10d
	add    %r10d,%r8d
	sar    $0x4,%eax
	add    %r14d,%eax
	movslq %eax,%rcx
	movslq (%r9,%rcx,4),%rcx
	mov    %r8w,(%r15,%rcx,2)
	add    $0x1,%eax
	xor    %r14d,%r14d
	cmp    $0x3f,%eax
	jg     209db <decode_mcu_slow+0xbb>
	cmp    $0x7,%edx
	jle    20ee3 <decode_mcu_slow+0x5c3>
	mov    %rax,%r14
	lea    0x38(%rdx),%ecx
	mov    %rsi,%rax
	shr    %cl,%rax
	movzbl %al,%eax
	movslq %eax,%rax
	movslq 0x128(%r12,%rax,4),%rax
	mov    %rax,%r8
	sar    $0x8,%r8d
	cmp    $0x8,%r8d
	jg     20f1e <decode_mcu_slow+0x5fe>
	sub    %r8d,%edx
	movzbl %al,%eax
	jmpq   20f61 <decode_mcu_slow+0x641>
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	xor    %eax,%eax
	mov    -0x20(%rbp),%r14
	mov    -0x28(%rbp),%r15
	leaveq 
	retq   
	mov    %rbx,%rdi
	mov    %r15,-0x38(%rbp)
	mov    %r14,%rcx
	mov    %rax,%r14
	mov    %r9,%r15
	callq  4410 <jpeg_fill_bit_buffer@plt>
	test   %eax,%eax
	je     20f82 <decode_mcu_slow+0x662>
	mov    -0x88(%rbp),%rsi
	movslq -0x80(%rbp),%rdx
	cmp    $0x7,%edx
	jg     20f9a <decode_mcu_slow+0x67a>
	mov    %r13,%r8
	mov    %r15,%r9
	mov    -0x38(%rbp),%r15
	mov    %r9,%r13
	mov    %rbx,%rdi
	mov    %r12,%rcx
	callq  41c0 <jpeg_huff_decode@plt>
	test   %eax,%eax
	jns    20f48 <decode_mcu_slow+0x628>
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	xor    %eax,%eax
	mov    -0x20(%rbp),%r14
	mov    -0x28(%rbp),%r15
	leaveq 
	retq   
	mov    %r13,%r9
	mov    -0x88(%rbp),%rsi
	movslq -0x80(%rbp),%rdx
	mov    $0x1,%r13d
	mov    $0xffffffff,%edi
	mov    %rax,%rcx
	and    $0xf,%ecx
	test   %ecx,%ecx
	jg     20de7 <decode_mcu_slow+0x4c7>
	and    $0xfffffff0,%eax
	cmp    $0xf0,%eax
	jne    20fab <decode_mcu_slow+0x68b>
	lea    0xf(%r14),%eax
	jmpq   20e85 <decode_mcu_slow+0x565>
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	xor    %eax,%eax
	mov    -0x20(%rbp),%r14
	mov    -0x28(%rbp),%r15
	leaveq 
	retq   
	mov    %r15,%r9
	mov    -0x38(%rbp),%r15
	mov    $0xffffffff,%edi
	jmpq   20e9c <decode_mcu_slow+0x57c>
	xor    %r14d,%r14d
	jmpq   209db <decode_mcu_slow+0xbb>
	data16 nopw %cs:0x0(%rax,%rax,1)
	xchg   %ax,%ax

0020fc0 <decode_mcu_fast>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x80,%rsp
	mov    %r15,-0x38(%rbp)
	mov    %r14,-0x30(%rbp)
	mov    %rsi,-0x58(%rbp)
	mov    %rbx,-0x18(%rbp)
	mov    %r12,-0x20(%rbp)
	mov    %r13,-0x28(%rbp)
	mov    0x28(%rdi),%rcx
	mov    0x8(%rcx),%rax
	mov    %rax,-0x8(%rbp)
	mov    (%rcx),%rbx
	mov    %rbx,-0x10(%rbp)
	mov    0x250(%rdi),%r8
	mov    %r8,-0x60(%rbp)
	mov    0x18(%r8),%rdx
	movslq 0x20(%r8),%rcx
	mov    0x28(%r8),%rax
	mov    %rax,-0x80(%rbp)
	mov    0x30(%r8),%rax
	mov    %rax,-0x78(%rbp)
	mov    0x4cfb8(%rip),%r10        # 6dfd8 <jpeg_natural_order@@LIBJPEG_6.2+0x129f4>
	mov    %r10,-0x40(%rbp)
	xor    %r13d,%r13d
	mov    $0x1,%eax
	mov    %r13,%r9
	jmpq   21155 <decode_mcu_fast+0x195>
	cmp    $0x10,%ecx
	jg     2112e <decode_mcu_fast+0x16e>
	lea    0x1(%rbx),%r12
	movzbl (%r12),%r13d
	movzbl (%rbx),%r15d
	shl    $0x8,%rdx
	add    %r15,%rdx
	cmp    $0xff,%r15b
	jne    21064 <decode_mcu_fast+0xa4>
	test   %r13b,%r13b
	jne    211bf <decode_mcu_fast+0x1ff>
	lea    0x2(%rbx),%r12
	lea    0x1(%r12),%r13
	movzbl 0x0(%r13),%r15d
	movzbl (%r12),%ebx
	shl    $0x8,%rdx
	add    %rbx,%rdx
	cmp    $0xff,%bl
	jne    2108d <decode_mcu_fast+0xcd>
	test   %r15b,%r15b
	jne    211d5 <decode_mcu_fast+0x215>
	lea    0x2(%r12),%r13
	lea    0x1(%r13),%rbx
	movzbl (%rbx),%r15d
	movzbl 0x0(%r13),%r12d
	shl    $0x8,%rdx
	add    %r12,%rdx
	cmp    $0xff,%r12b
	jne    210b4 <decode_mcu_fast+0xf4>
	test   %r15b,%r15b
	jne    211eb <decode_mcu_fast+0x22b>
	lea    0x2(%r13),%rbx
	lea    0x1(%rbx),%r13
	movzbl 0x0(%r13),%r15d
	movzbl (%rbx),%r12d
	shl    $0x8,%rdx
	add    %r12,%rdx
	cmp    $0xff,%r12b
	jne    210db <decode_mcu_fast+0x11b>
	test   %r15b,%r15b
	jne    21201 <decode_mcu_fast+0x241>
	lea    0x2(%rbx),%r13
	lea    0x1(%r13),%r12
	movzbl (%r12),%r15d
	movzbl 0x0(%r13),%ebx
	shl    $0x8,%rdx
	add    %rbx,%rdx
	cmp    $0xff,%bl
	jne    21102 <decode_mcu_fast+0x142>
	test   %r15b,%r15b
	jne    21217 <decode_mcu_fast+0x257>
	lea    0x2(%r13),%r12
	lea    0x1(%r12),%rbx
	movzbl (%rbx),%r15d
	movzbl (%r12),%r13d
	shl    $0x8,%rdx
	add    %r13,%rdx
	add    $0x30,%ecx
	cmp    $0xff,%r13b
	jne    2112e <decode_mcu_fast+0x16e>
	test   %r15b,%r15b
	jne    2122d <decode_mcu_fast+0x26d>
	lea    0x2(%r12),%rbx
	sub    %r14d,%ecx
	shr    $0x4,%r11d
	add    %r11d,%r10d
	add    $0x1,%r10d
	cmp    $0x3f,%r10d
	jle    21243 <decode_mcu_fast+0x283>
	mov    -0x40(%rbp),%r10
	add    $0x1,%r9d
	xor    %r13d,%r13d
	mov    -0x58(%rbp),%rsi
	movslq 0x1e0(%rdi),%r11
	cmp    %r9d,%r11d
	jg     2139b <decode_mcu_fast+0x3db>
	movslq 0x21c(%rdi),%rsi
	test   %esi,%esi
	jne    213af <decode_mcu_fast+0x3ef>
	mov    0x28(%rdi),%rsi
	mov    %rbx,(%rsi)
	mov    -0x10(%rbp),%rsi
	sub    %rsi,%rbx
	mov    -0x8(%rbp),%rsi
	sub    %rbx,%rsi
	mov    0x28(%rdi),%rdi
	mov    %rsi,0x8(%rdi)
	mov    %rdx,0x18(%r8)
	mov    %ecx,0x20(%r8)
	mov    -0x80(%rbp),%rcx
	mov    %rcx,0x28(%r8)
	mov    -0x78(%rbp),%rcx
	mov    %rcx,0x30(%r8)
	mov    -0x28(%rbp),%r13
	mov    -0x20(%rbp),%r12
	mov    -0x18(%rbp),%rbx
	mov    -0x30(%rbp),%r14
	mov    -0x38(%rbp),%r15
	leaveq 
	retq   
	and    $0xffffffffffffff00,%rdx
	mov    %r13d,0x21c(%rdi)
	mov    %rbx,%r12
	jmpq   21064 <decode_mcu_fast+0xa4>
	and    $0xffffffffffffff00,%rdx
	mov    %r15d,0x21c(%rdi)
	mov    %r12,%r13
	jmpq   2108d <decode_mcu_fast+0xcd>
	and    $0xffffffffffffff00,%rdx
	mov    %r15d,0x21c(%rdi)
	mov    %r13,%rbx
	jmpq   210b4 <decode_mcu_fast+0xf4>
	and    $0xffffffffffffff00,%rdx
	mov    %r15d,0x21c(%rdi)
	mov    %rbx,%r13
	jmpq   210db <decode_mcu_fast+0x11b>
	and    $0xffffffffffffff00,%rdx
	mov    %r15d,0x21c(%rdi)
	mov    %r13,%r12
	jmpq   21102 <decode_mcu_fast+0x142>
	and    $0xffffffffffffff00,%rdx
	mov    %r15d,0x21c(%rdi)
	mov    %r12,%rbx
	jmpq   2112e <decode_mcu_fast+0x16e>
	cmp    $0x10,%ecx
	jg     21339 <decode_mcu_fast+0x379>
	lea    0x1(%rbx),%r11
	movzbl (%r11),%r13d
	movzbl (%rbx),%r12d
	shl    $0x8,%rdx
	add    %r12,%rdx
	cmp    $0xff,%r12b
	jne    21272 <decode_mcu_fast+0x2b2>
	test   %r13b,%r13b
	jne    213d2 <decode_mcu_fast+0x412>
	lea    0x2(%rbx),%r11
	lea    0x1(%r11),%r12
	movzbl (%r12),%r13d
	movzbl (%r11),%ebx
	shl    $0x8,%rdx
	add    %rbx,%rdx
	cmp    $0xff,%bl
	jne    21298 <decode_mcu_fast+0x2d8>
	test   %r13b,%r13b
	jne    213e8 <decode_mcu_fast+0x428>
	lea    0x2(%r11),%r12
	lea    0x1(%r12),%rbx
	movzbl (%rbx),%r13d
	movzbl (%r12),%r11d
	shl    $0x8,%rdx
	add    %r11,%rdx
	cmp    $0xff,%r11b
	jne    212c1 <decode_mcu_fast+0x301>
	test   %r13b,%r13b
	jne    213fe <decode_mcu_fast+0x43e>
	lea    0x2(%r12),%rbx
	lea    0x1(%rbx),%r11
	movzbl (%r11),%r13d
	movzbl (%rbx),%r12d
	shl    $0x8,%rdx
	add    %r12,%rdx
	cmp    $0xff,%r12b
	jne    212e7 <decode_mcu_fast+0x327>
	test   %r13b,%r13b
	jne    21414 <decode_mcu_fast+0x454>
	lea    0x2(%rbx),%r11
	lea    0x1(%r11),%r12
	movzbl (%r12),%r13d
	movzbl (%r11),%ebx
	shl    $0x8,%rdx
	add    %rbx,%rdx
	cmp    $0xff,%bl
	jne    2130d <decode_mcu_fast+0x34d>
	test   %r13b,%r13b
	jne    2142a <decode_mcu_fast+0x46a>
	lea    0x2(%r11),%r12
	lea    0x1(%r12),%rbx
	movzbl (%rbx),%r13d
	movzbl (%r12),%r11d
	shl    $0x8,%rdx
	add    %r11,%rdx
	add    $0x30,%ecx
	cmp    $0xff,%r11b
	jne    21339 <decode_mcu_fast+0x379>
	test   %r13b,%r13b
	jne    21440 <decode_mcu_fast+0x480>
	lea    0x2(%r12),%rbx
	mov    %rcx,%r12
	lea    0x38(%r12),%ecx
	mov    %rdx,%r11
	shr    %cl,%r11
	movzbl %r11b,%ecx
	movslq %ecx,%rcx
	movslq 0x128(%rsi,%rcx,4),%r13
	mov    %r13,%r11
	sar    $0x8,%r11d
	mov    %r12,%rcx
	sub    %r11d,%ecx
	cmp    $0x8,%r11d
	jg     21456 <decode_mcu_fast+0x496>
	movzbl %r13b,%r11d
	mov    %r11,%r14
	and    $0xf,%r14d
	test   %r14d,%r14d
	jg     21034 <decode_mcu_fast+0x74>
	and    $0xfffffff0,%r11d
	cmp    $0xe0,%r11d
	jle    2147a <decode_mcu_fast+0x4ba>
	add    $0xf,%r10d
	jmpq   21138 <decode_mcu_fast+0x178>
	test   %rsi,%rsi
	movslq %r9d,%r12
	jne    21483 <decode_mcu_fast+0x4c3>
	mov    %r13,%r11
	jmpq   21487 <decode_mcu_fast+0x4c7>
	movl   $0x0,0x21c(%rdi)
	mov    %r13,%rax
	mov    -0x28(%rbp),%r13
	mov    -0x20(%rbp),%r12
	mov    -0x18(%rbp),%rbx
	mov    -0x30(%rbp),%r14
	mov    -0x38(%rbp),%r15
	leaveq 
	retq   
	and    $0xffffffffffffff00,%rdx
	mov    %r13d,0x21c(%rdi)
	mov    %rbx,%r11
	jmpq   21272 <decode_mcu_fast+0x2b2>
	and    $0xffffffffffffff00,%rdx
	mov    %r13d,0x21c(%rdi)
	mov    %r11,%r12
	jmpq   21298 <decode_mcu_fast+0x2d8>
	and    $0xffffffffffffff00,%rdx
	mov    %r13d,0x21c(%rdi)
	mov    %r12,%rbx
	jmpq   212c1 <decode_mcu_fast+0x301>
	and    $0xffffffffffffff00,%rdx
	mov    %r13d,0x21c(%rdi)
	mov    %rbx,%r11
	jmpq   212e7 <decode_mcu_fast+0x327>
	and    $0xffffffffffffff00,%rdx
	mov    %r13d,0x21c(%rdi)
	mov    %r11,%r12
	jmpq   2130d <decode_mcu_fast+0x34d>
	and    $0xffffffffffffff00,%rdx
	mov    %r13d,0x21c(%rdi)
	mov    %r12,%rbx
	jmpq   21339 <decode_mcu_fast+0x379>
	mov    %rdx,%r12
	shr    %cl,%r12
	mov    %rcx,%r13
	mov    %r11,%rcx
	mov    %rax,%r14
	shl    %cl,%r14d
	mov    %rcx,%r11
	lea    -0x1(%r14),%ecx
	and    %ecx,%r12d
	mov    %r13,%rcx
	jmpq   21763 <decode_mcu_fast+0x7a3>
	mov    -0x40(%rbp),%r10
	jmpq   2114a <decode_mcu_fast+0x18a>
	mov    (%rsi,%r12,8),%r11
	mov    0xd0(%r8,%r12,8),%rsi
	mov    %r9,-0x70(%rbp)
	mov    0x80(%r8,%r12,8),%r15
	cmp    $0x10,%ecx
	jg     21584 <decode_mcu_fast+0x5c4>
	lea    0x1(%rbx),%r9
	movzbl (%r9),%r10d
	movzbl (%rbx),%r14d
	shl    $0x8,%rdx
	add    %r14,%rdx
	cmp    $0xff,%r14b
	jne    214ca <decode_mcu_fast+0x50a>
	test   %r10b,%r10b
	jne    21790 <decode_mcu_fast+0x7d0>
	lea    0x2(%rbx),%r9
	lea    0x1(%r9),%r10
	movzbl (%r10),%ebx
	movzbl (%r9),%r14d
	shl    $0x8,%rdx
	add    %r14,%rdx
	cmp    $0xff,%r14b
	jne    214ef <decode_mcu_fast+0x52f>
	test   %bl,%bl
	jne    217a6 <decode_mcu_fast+0x7e6>
	lea    0x2(%r9),%r10
	lea    0x1(%r10),%rbx
	movzbl (%rbx),%r9d
	movzbl (%r10),%r14d
	shl    $0x8,%rdx
	add    %r14,%rdx
	cmp    $0xff,%r14b
	jne    21515 <decode_mcu_fast+0x555>
	test   %r9b,%r9b
	jne    217bb <decode_mcu_fast+0x7fb>
	lea    0x2(%r10),%rbx
	lea    0x1(%rbx),%r9
	movzbl (%r9),%r10d
	movzbl (%rbx),%r14d
	shl    $0x8,%rdx
	add    %r14,%rdx
	cmp    $0xff,%r14b
	jne    2153b <decode_mcu_fast+0x57b>
	test   %r10b,%r10b
	jne    217d1 <decode_mcu_fast+0x811>
	lea    0x2(%rbx),%r9
	lea    0x1(%r9),%r14
	movzbl (%r14),%ebx
	movzbl (%r9),%r10d
	shl    $0x8,%rdx
	add    %r10,%rdx
	cmp    $0xff,%r10b
	jne    21560 <decode_mcu_fast+0x5a0>
	test   %bl,%bl
	jne    217e7 <decode_mcu_fast+0x827>
	lea    0x2(%r9),%r14
	lea    0x1(%r14),%rbx
	movzbl (%rbx),%r9d
	movzbl (%r14),%r10d
	shl    $0x8,%rdx
	add    %r10,%rdx
	add    $0x30,%ecx
	cmp    $0xff,%r10b
	je     217fc <decode_mcu_fast+0x83c>
	mov    -0x40(%rbp),%r10
	mov    %rcx,%r14
	lea    0x38(%r14),%ecx
	mov    %rdx,%r9
	shr    %cl,%r9
	movzbl %r9b,%ecx
	movslq %ecx,%rcx
	movslq 0x128(%r15,%rcx,4),%rcx
	mov    %rcx,%r9
	sar    $0x8,%r9d
	sub    %r9d,%r14d
	cmp    $0x8,%r9d
	jg     21812 <decode_mcu_fast+0x852>
	movzbl %cl,%r15d
	mov    %r14,%rcx
	mov    -0x70(%rbp),%r9
	test   %r15d,%r15d
	jle    2170c <decode_mcu_fast+0x74c>
	cmp    $0x10,%ecx
	jg     216b8 <decode_mcu_fast+0x6f8>
	lea    0x1(%rbx),%r9
	movzbl (%r9),%r14d
	movzbl (%rbx),%r13d
	shl    $0x8,%rdx
	add    %r13,%rdx
	cmp    $0xff,%r13b
	jne    215f7 <decode_mcu_fast+0x637>
	test   %r14b,%r14b
	jne    21849 <decode_mcu_fast+0x889>
	lea    0x2(%rbx),%r9
	lea    0x1(%r9),%rbx
	movzbl (%rbx),%r14d
	movzbl (%r9),%r13d
	shl    $0x8,%rdx
	add    %r13,%rdx
	cmp    $0xff,%r13b
	jne    2161d <decode_mcu_fast+0x65d>
	test   %r14b,%r14b
	jne    2185f <decode_mcu_fast+0x89f>
	lea    0x2(%r9),%rbx
	lea    0x1(%rbx),%r9
	movzbl (%r9),%r14d
	movzbl (%rbx),%r13d
	shl    $0x8,%rdx
	add    %r13,%rdx
	cmp    $0xff,%r13b
	jne    21643 <decode_mcu_fast+0x683>
	test   %r14b,%r14b
	jne    21875 <decode_mcu_fast+0x8b5>
	lea    0x2(%rbx),%r9
	lea    0x1(%r9),%rbx
	movzbl (%rbx),%r14d
	movzbl (%r9),%r13d
	shl    $0x8,%rdx
	add    %r13,%rdx
	cmp    $0xff,%r13b
	jne    21669 <decode_mcu_fast+0x6a9>
	test   %r14b,%r14b
	jne    2188b <decode_mcu_fast+0x8cb>
	lea    0x2(%r9),%rbx
	lea    0x1(%rbx),%r9
	movzbl (%r9),%r14d
	movzbl (%rbx),%r13d
	shl    $0x8,%rdx
	add    %r13,%rdx
	cmp    $0xff,%r13b
	jne    2168f <decode_mcu_fast+0x6cf>
	test   %r14b,%r14b
	jne    218a1 <decode_mcu_fast+0x8e1>
	lea    0x2(%rbx),%r9
	lea    0x1(%r9),%rbx
	movzbl (%rbx),%r14d
	movzbl (%r9),%r13d
	shl    $0x8,%rdx
	add    %r13,%rdx
	add    $0x30,%ecx
	cmp    $0xff,%r13b
	jne    216b8 <decode_mcu_fast+0x6f8>
	test   %r14b,%r14b
	jne    218b7 <decode_mcu_fast+0x8f7>
	lea    0x2(%r9),%rbx
	sub    %r15d,%ecx
	mov    %rdx,%r14
	shr    %cl,%r14
	mov    %r15,%r9
	mov    %rcx,%r15
	mov    %r9,%rcx
	mov    %rax,%r13
	shl    %cl,%r13d
	mov    %rcx,%r9
	add    $0xffffffff,%r13d
	and    %r14d,%r13d
	lea    0x1f(%r9),%ecx
	mov    %rax,%r14
	shl    %cl,%r14d
	neg    %r14d
	add    %r13d,%r14d
	sar    $0x1f,%r14d
	mov    %r9,%rcx
	mov    $0xffffffffffffffff,%r9
	shl    %cl,%r9d
	lea    0x1(%r9),%ecx
	and    %r14d,%ecx
	add    %ecx,%r13d
	mov    %r15,%rcx
	mov    -0x70(%rbp),%r9
	movslq 0x120(%r8,%r12,4),%r14
	test   %r14d,%r14d
	je     21734 <decode_mcu_fast+0x774>
	movslq 0x1e4(%rdi,%r12,4),%r14
	add    -0x80(%rbp,%r14,4),%r13d
	mov    %r13d,-0x80(%rbp,%r14,4)
	test   %r11,%r11
	je     21734 <decode_mcu_fast+0x774>
	mov    %r13w,(%r11)
	movslq 0x148(%r8,%r12,4),%r12
	test   %r12d,%r12d
	jne    218cd <decode_mcu_fast+0x90d>
	mov    %rax,%r10
	jmpq   2113c <decode_mcu_fast+0x17c>
	add    $0x1,%r11d
	add    $0xffffffff,%ecx
	mov    %rdx,%r13
	shr    %cl,%r13
	and    $0x1,%r13d
	lea    0x0(%r13,%r12,2),%r12d
	movslq %r11d,%r13
	movslq %r12d,%r14
	cmp    (%rsi,%r13,8),%r14
	jg     2174d <decode_mcu_fast+0x78d>
	add    0x90(%rsi,%r13,8),%r12d
	movzbl %r12b,%r11d
	movslq %r11d,%r11
	mov    0x120(%rsi),%r12
	movzbl 0x11(%r12,%r11,1),%r11d
	jmpq   21371 <decode_mcu_fast+0x3b1>
	and    $0xffffffffffffff00,%rdx
	mov    %r10d,0x21c(%rdi)
	mov    %rbx,%r9
	jmpq   214ca <decode_mcu_fast+0x50a>
	and    $0xffffffffffffff00,%rdx
	mov    %ebx,0x21c(%rdi)
	mov    %r9,%r10
	jmpq   214ef <decode_mcu_fast+0x52f>
	and    $0xffffffffffffff00,%rdx
	mov    %r9d,0x21c(%rdi)
	mov    %r10,%rbx
	jmpq   21515 <decode_mcu_fast+0x555>
	and    $0xffffffffffffff00,%rdx
	mov    %r10d,0x21c(%rdi)
	mov    %rbx,%r9
	jmpq   2153b <decode_mcu_fast+0x57b>
	and    $0xffffffffffffff00,%rdx
	mov    %ebx,0x21c(%rdi)
	mov    %r9,%r14
	jmpq   21560 <decode_mcu_fast+0x5a0>
	test   %r9b,%r9b
	jne    218e0 <decode_mcu_fast+0x920>
	lea    0x2(%r14),%rbx
	mov    -0x40(%rbp),%r10
	jmpq   21584 <decode_mcu_fast+0x5c4>
	mov    %r14,%rcx
	mov    %rdx,%r10
	shr    %cl,%r10
	mov    %rcx,%r14
	mov    %r9,%rcx
	mov    %rax,%r9
	shl    %cl,%r9d
	add    $0xffffffff,%r9d
	and    %r9d,%r10d
	mov    %rbx,-0x68(%rbp)
	mov    %r11,-0x50(%rbp)
	mov    %rsi,-0x48(%rbp)
	mov    %rcx,%rsi
	mov    %r14,%rcx
	mov    -0x70(%rbp),%r9
	jmpq   2190d <decode_mcu_fast+0x94d>
	and    $0xffffffffffffff00,%rdx
	mov    %r14d,0x21c(%rdi)
	mov    %rbx,%r9
	jmpq   215f7 <decode_mcu_fast+0x637>
	and    $0xffffffffffffff00,%rdx
	mov    %r14d,0x21c(%rdi)
	mov    %r9,%rbx
	jmpq   2161d <decode_mcu_fast+0x65d>
	and    $0xffffffffffffff00,%rdx
	mov    %r14d,0x21c(%rdi)
	mov    %rbx,%r9
	jmpq   21643 <decode_mcu_fast+0x683>
	and    $0xffffffffffffff00,%rdx
	mov    %r14d,0x21c(%rdi)
	mov    %r9,%rbx
	jmpq   21669 <decode_mcu_fast+0x6a9>
	and    $0xffffffffffffff00,%rdx
	mov    %r14d,0x21c(%rdi)
	mov    %rbx,%r9
	jmpq   2168f <decode_mcu_fast+0x6cf>
	and    $0xffffffffffffff00,%rdx
	mov    %r14d,0x21c(%rdi)
	mov    %r9,%rbx
	jmpq   216b8 <decode_mcu_fast+0x6f8>
	test   %r11,%r11
	je     2194d <decode_mcu_fast+0x98d>
	mov    $0xffffffff,%r8d
	mov    %rax,%r13
	jmpq   21a9f <decode_mcu_fast+0xadf>
	and    $0xffffffffffffff00,%rdx
	mov    %r9d,0x21c(%rdi)
	mov    %r14,%rbx
	mov    -0x40(%rbp),%r10
	jmpq   21584 <decode_mcu_fast+0x5c4>
	add    $0x1,%esi
	add    $0xffffffff,%ecx
	mov    %rdx,%rbx
	shr    %cl,%rbx
	and    $0x1,%ebx
	lea    (%rbx,%r10,2),%r10d
	movslq %esi,%rbx
	mov    (%r15,%rbx,8),%r11
	movslq %r10d,%r14
	cmp    %r14,%r11
	jl     218fa <decode_mcu_fast+0x93a>
	add    0x90(%r15,%rbx,8),%r10d
	movzbl %r10b,%esi
	movslq %esi,%rsi
	mov    0x120(%r15),%rbx
	movzbl 0x11(%rbx,%rsi,1),%r15d
	mov    -0x48(%rbp),%rsi
	mov    -0x50(%rbp),%r11
	mov    -0x68(%rbp),%rbx
	mov    -0x40(%rbp),%r10
	jmpq   215bf <decode_mcu_fast+0x5ff>
	mov    %rax,%r10
	jmpq   2113c <decode_mcu_fast+0x17c>
	cmp    $0x10,%ecx
	jg     21a40 <decode_mcu_fast+0xa80>
	lea    0x1(%rbx),%r8
	movzbl (%r8),%r15d
	movzbl (%rbx),%r14d
	shl    $0x8,%rdx
	add    %r14,%rdx
	cmp    $0xff,%r14b
	jne    21984 <decode_mcu_fast+0x9c4>
	test   %r15b,%r15b
	jne    21ab6 <decode_mcu_fast+0xaf6>
	lea    0x2(%rbx),%r8
	lea    0x1(%r8),%r14
	movzbl (%r14),%ebx
	movzbl (%r8),%r15d
	shl    $0x8,%rdx
	add    %r15,%rdx
	cmp    $0xff,%r15b
	jne    219a9 <decode_mcu_fast+0x9e9>
	test   %bl,%bl
	jne    21acc <decode_mcu_fast+0xb0c>
	lea    0x2(%r8),%r14
	lea    0x1(%r14),%rbx
	movzbl (%rbx),%r15d
	movzbl (%r14),%r8d
	shl    $0x8,%rdx
	add    %r8,%rdx
	cmp    $0xff,%r8b
	jne    219cf <decode_mcu_fast+0xa0f>
	test   %r15b,%r15b
	jne    21ae1 <decode_mcu_fast+0xb21>
	lea    0x2(%r14),%rbx
	lea    0x1(%rbx),%r8
	movzbl (%r8),%r14d
	movzbl (%rbx),%r15d
	shl    $0x8,%rdx
	add    %r15,%rdx
	cmp    $0xff,%r15b
	jne    219f5 <decode_mcu_fast+0xa35>
	test   %r14b,%r14b
	jne    21af7 <decode_mcu_fast+0xb37>
	lea    0x2(%rbx),%r8
	lea    0x1(%r8),%r14
	movzbl (%r14),%ebx
	movzbl (%r8),%r15d
	shl    $0x8,%rdx
	add    %r15,%rdx
	cmp    $0xff,%r15b
	jne    21a1a <decode_mcu_fast+0xa5a>
	test   %bl,%bl
	jne    21b0d <decode_mcu_fast+0xb4d>
	lea    0x2(%r8),%r14
	lea    0x1(%r14),%rbx
	movzbl (%rbx),%r8d
	movzbl (%r14),%r15d
	shl    $0x8,%rdx
	add    %r15,%rdx
	add    $0x30,%ecx
	cmp    $0xff,%r15b
	je     21b22 <decode_mcu_fast+0xb62>
	mov    $0xffffffff,%r8d
	sub    %r12d,%ecx
	mov    %rdx,%r14
	shr    %cl,%r14
	mov    %rcx,%r15
	mov    %r12,%rcx
	mov    %rax,%r12
	shl    %cl,%r12d
	add    $0xffffffff,%r12d
	and    %r14d,%r12d
	mov    %rcx,%r14
	lea    0x1f(%r14),%ecx
	shl    %cl,%eax
	neg    %eax
	add    %r12d,%eax
	sar    $0x1f,%eax
	mov    %r14,%rcx
	mov    %r8,%r14
	shl    %cl,%r14d
	lea    0x1(%r14),%ecx
	and    %ecx,%eax
	add    %eax,%r12d
	shr    $0x4,%r9d
	lea    (%r9,%r13,1),%eax
	movslq %eax,%rcx
	movslq (%r10,%rcx,4),%rcx
	mov    %r12w,(%r11,%rcx,2)
	mov    %r15,%rcx
	lea    0x1(%rax),%r13d
	mov    $0x1,%eax
	cmp    $0x3f,%r13d
	jle    21b3a <decode_mcu_fast+0xb7a>
	mov    -0x60(%rbp),%r8
	mov    -0x70(%rbp),%r9
	jmpq   2114a <decode_mcu_fast+0x18a>
	and    $0xffffffffffffff00,%rdx
	mov    %r15d,0x21c(%rdi)
	mov    %rbx,%r8
	jmpq   21984 <decode_mcu_fast+0x9c4>
	and    $0xffffffffffffff00,%rdx
	mov    %ebx,0x21c(%rdi)
	mov    %r8,%r14
	jmpq   219a9 <decode_mcu_fast+0x9e9>
	and    $0xffffffffffffff00,%rdx
	mov    %r15d,0x21c(%rdi)
	mov    %r14,%rbx
	jmpq   219cf <decode_mcu_fast+0xa0f>
	and    $0xffffffffffffff00,%rdx
	mov    %r14d,0x21c(%rdi)
	mov    %rbx,%r8
	jmpq   219f5 <decode_mcu_fast+0xa35>
	and    $0xffffffffffffff00,%rdx
	mov    %ebx,0x21c(%rdi)
	mov    %r8,%r14
	jmpq   21a1a <decode_mcu_fast+0xa5a>
	test   %r8b,%r8b
	jne    21c8b <decode_mcu_fast+0xccb>
	lea    0x2(%r14),%rbx
	mov    $0xffffffff,%r8d
	jmpq   21a40 <decode_mcu_fast+0xa80>
	cmp    $0x10,%ecx
	jg     21c2a <decode_mcu_fast+0xc6a>
	lea    0x1(%rbx),%r9
	movzbl (%r9),%r14d
	movzbl (%rbx),%r12d
	shl    $0x8,%rdx
	add    %r12,%rdx
	cmp    $0xff,%r12b
	jne    21b69 <decode_mcu_fast+0xba9>
	test   %r14b,%r14b
	jne    21ca7 <decode_mcu_fast+0xce7>
	lea    0x2(%rbx),%r9
	lea    0x1(%r9),%rbx
	movzbl (%rbx),%r14d
	movzbl (%r9),%r12d
	shl    $0x8,%rdx
	add    %r12,%rdx
	cmp    $0xff,%r12b
	jne    21b8f <decode_mcu_fast+0xbcf>
	test   %r14b,%r14b
	jne    21cbd <decode_mcu_fast+0xcfd>
	lea    0x2(%r9),%rbx
	lea    0x1(%rbx),%r9
	movzbl (%r9),%r14d
	movzbl (%rbx),%r12d
	shl    $0x8,%rdx
	add    %r12,%rdx
	cmp    $0xff,%r12b
	jne    21bb5 <decode_mcu_fast+0xbf5>
	test   %r14b,%r14b
	jne    21cd3 <decode_mcu_fast+0xd13>
	lea    0x2(%rbx),%r9
	lea    0x1(%r9),%rbx
	movzbl (%rbx),%r14d
	movzbl (%r9),%r12d
	shl    $0x8,%rdx
	add    %r12,%rdx
	cmp    $0xff,%r12b
	jne    21bdb <decode_mcu_fast+0xc1b>
	test   %r14b,%r14b
	jne    21ce9 <decode_mcu_fast+0xd29>
	lea    0x2(%r9),%rbx
	lea    0x1(%rbx),%r9
	movzbl (%r9),%r14d
	movzbl (%rbx),%r12d
	shl    $0x8,%rdx
	add    %r12,%rdx
	cmp    $0xff,%r12b
	jne    21c01 <decode_mcu_fast+0xc41>
	test   %r14b,%r14b
	jne    21cff <decode_mcu_fast+0xd3f>
	lea    0x2(%rbx),%r9
	lea    0x1(%r9),%rbx
	movzbl (%rbx),%r14d
	movzbl (%r9),%r12d
	shl    $0x8,%rdx
	add    %r12,%rdx
	add    $0x30,%ecx
	cmp    $0xff,%r12b
	jne    21c2a <decode_mcu_fast+0xc6a>
	test   %r14b,%r14b
	jne    21d15 <decode_mcu_fast+0xd55>
	lea    0x2(%r9),%rbx
	mov    %rcx,%r14
	lea    0x38(%r14),%ecx
	mov    %rdx,%r9
	shr    %cl,%r9
	movzbl %r9b,%ecx
	movslq %ecx,%rcx
	movslq 0x128(%rsi,%rcx,4),%r12
	mov    %r12,%r9
	sar    $0x8,%r9d
	mov    %r14,%rcx
	sub    %r9d,%ecx
	cmp    $0x8,%r9d
	jg     21d2b <decode_mcu_fast+0xd6b>
	movzbl %r12b,%r9d
	mov    %r9,%r12
	and    $0xf,%r12d
	test   %r12d,%r12d
	jg     21955 <decode_mcu_fast+0x995>
	and    $0xfffffff0,%r9d
	cmp    $0xe0,%r9d
	jle    21d54 <decode_mcu_fast+0xd94>
	lea    0xf(%r13),%eax
	jmpq   21a96 <decode_mcu_fast+0xad6>
	and    $0xffffffffffffff00,%rdx
	mov    %r8d,0x21c(%rdi)
	mov    %r14,%rbx
	mov    $0xffffffff,%r8d
	jmpq   21a40 <decode_mcu_fast+0xa80>
	and    $0xffffffffffffff00,%rdx
	mov    %r14d,0x21c(%rdi)
	mov    %rbx,%r9
	jmpq   21b69 <decode_mcu_fast+0xba9>
	and    $0xffffffffffffff00,%rdx
	mov    %r14d,0x21c(%rdi)
	mov    %r9,%rbx
	jmpq   21b8f <decode_mcu_fast+0xbcf>
	and    $0xffffffffffffff00,%rdx
	mov    %r14d,0x21c(%rdi)
	mov    %rbx,%r9
	jmpq   21bb5 <decode_mcu_fast+0xbf5>
	and    $0xffffffffffffff00,%rdx
	mov    %r14d,0x21c(%rdi)
	mov    %r9,%rbx
	jmpq   21bdb <decode_mcu_fast+0xc1b>
	and    $0xffffffffffffff00,%rdx
	mov    %r14d,0x21c(%rdi)
	mov    %rbx,%r9
	jmpq   21c01 <decode_mcu_fast+0xc41>
	and    $0xffffffffffffff00,%rdx
	mov    %r14d,0x21c(%rdi)
	mov    %r9,%rbx
	jmpq   21c2a <decode_mcu_fast+0xc6a>
	mov    %rdx,%r12
	shr    %cl,%r12
	mov    %rcx,%r15
	mov    %r9,%rcx
	mov    %rax,%r14
	shl    %cl,%r14d
	mov    %rcx,%r9
	lea    -0x1(%r14),%ecx
	and    %ecx,%r12d
	mov    %rbx,-0x50(%rbp)
	mov    %r13,-0x68(%rbp)
	mov    %r15,%rcx
	jmp    21d75 <decode_mcu_fast+0xdb5>
	mov    -0x60(%rbp),%r8
	mov    -0x70(%rbp),%r9
	jmpq   2114a <decode_mcu_fast+0x18a>
	add    $0x1,%r9d
	add    $0xffffffff,%ecx
	mov    %rdx,%rbx
	shr    %cl,%rbx
	and    $0x1,%ebx
	lea    (%rbx,%r12,2),%r12d
	movslq %r9d,%r14
	mov    (%rsi,%r14,8),%r13
	movslq %r12d,%rbx
	cmp    %rbx,%r13
	jl     21d61 <decode_mcu_fast+0xda1>
	add    0x90(%rsi,%r14,8),%r12d
	movzbl %r12b,%ebx
	movslq %ebx,%rbx
	mov    0x120(%rsi),%r9
	movzbl 0x11(%r9,%rbx,1),%r9d
	mov    -0x68(%rbp),%r13
	mov    -0x50(%rbp),%rbx
	jmpq   21c61 <decode_mcu_fast+0xca1>
	nopl   (%rax)

0021db0 <decode_mcu>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    0x250(%rdi),%rcx
	xor    %edx,%edx
	mov    $0x1,%eax
	mov    0x170(%rdi),%r8d
	test   %r8d,%r8d
	jne    21e01 <decode_mcu+0x51>
	mov    %rax,%r9
	mov    0x28(%rdi),%r8
	mov    0x8(%r8),%r10
	movslq 0x1e0(%rdi),%r8
	shl    $0x9,%r8
	cmp    %r8,%r10
	jae    21e0f <decode_mcu+0x5f>
	movslq 0x10(%rcx),%r8
	test   %r8d,%r8d
	je     21e20 <decode_mcu+0x70>
	mov    0x38(%rcx),%edx
	add    $0xffffffff,%edx
	mov    %edx,0x38(%rcx)
	leaveq 
	retq   
	mov    0x38(%rcx),%r8d
	test   %r8d,%r8d
	je     21e40 <decode_mcu+0x90>
	mov    %rdx,%r9
	jmp    21dd5 <decode_mcu+0x25>
	movslq 0x21c(%rdi),%r8
	test   %r8d,%r8d
	jne    21ded <decode_mcu+0x3d>
	mov    %r9,%rdx
	jmp    21ded <decode_mcu+0x3d>
	test   %edx,%edx
	jg     21e76 <decode_mcu+0xc6>
	mov    %rcx,-0x18(%rbp)
	callq  20920 <decode_mcu_slow>
	test   %eax,%eax
	je     21eb9 <decode_mcu+0x109>
	mov    $0x1,%eax
	mov    -0x18(%rbp),%rcx
	jmp    21df6 <decode_mcu+0x46>
	mov    %rdi,%rax
	mov    %rdi,-0x18(%rbp)
	mov    %rcx,-0x10(%rbp)
	mov    %rsi,-0x8(%rbp)
	mov    %rax,%rdi
	callq  20880 <process_restart>
	test   %eax,%eax
	je     21ebd <decode_mcu+0x10d>
	mov    $0x1,%eax
	xor    %edx,%edx
	mov    -0x8(%rbp),%rsi
	mov    -0x10(%rbp),%rcx
	mov    -0x18(%rbp),%rdi
	mov    %rdx,%r9
	jmpq   21dd5 <decode_mcu+0x25>
	mov    %rdi,%rax
	mov    %rsi,%rdx
	mov    %r13,-0x8(%rbp)
	mov    %r14,-0x10(%rbp)
	mov    %r15,-0x18(%rbp)
	mov    %rcx,%r13
	mov    %rdi,%r14
	mov    %rax,%rdi
	mov    %rsi,%r15
	mov    %rdx,%rsi
	callq  20fc0 <decode_mcu_fast>
	test   %eax,%eax
	je     21ec1 <decode_mcu+0x111>
	mov    %r13,%rcx
	mov    -0x18(%rbp),%r15
	mov    -0x10(%rbp),%r14
	mov    -0x8(%rbp),%r13
	mov    $0x1,%eax
	jmpq   21df6 <decode_mcu+0x46>
	xor    %eax,%eax
	leaveq 
	retq   
	xor    %eax,%eax
	leaveq 
	retq   
	mov    %r13,%rcx
	mov    %r15,%rsi
	mov    %r14,%rdi
	mov    -0x18(%rbp),%r15
	mov    -0x10(%rbp),%r14
	mov    -0x8(%rbp),%r13
	jmpq   21e24 <decode_mcu+0x74>
	nopl   0x0(%rax,%rax,1)

0021ee0 <jinit_input_controller>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %r15,-0x8(%rbp)
	mov    0x8(%rdi),%rax
	mov    (%rax),%rax
	xor    %esi,%esi
	mov    $0x30,%edx
	mov    %rdi,%r15
	callq  *%rax
	mov    %rax,0x240(%r15)
	lea    0x43(%rip),%rcx        # 21f50 <consume_markers>
	mov    %rcx,(%rax)
	lea    0x769(%rip),%rcx        # 22680 <reset_input_controller>
	mov    %rcx,0x8(%rax)
	lea    0x6de(%rip),%rcx        # 22600 <start_input_pass>
	mov    %rcx,0x10(%rax)
	lea    0x733(%rip),%rcx        # 22660 <finish_input_pass>
	mov    %rcx,0x18(%rax)
	movl   $0x0,0x20(%rax)
	movl   $0x0,0x24(%rax)
	movl   $0x1,0x28(%rax)
	mov    -0x8(%rbp),%r15
	leaveq 
	retq   
	nopl   0x0(%rax)

0021f50 <consume_markers>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    $0x2,%eax
	mov    0x240(%rdi),%rdx
	movslq 0x24(%rdx),%rcx
	test   %ecx,%ecx
	je     21f6e <consume_markers+0x1e>
	leaveq 
	retq   
	mov    0x248(%rdi),%rax
	mov    0x8(%rax),%rax
	mov    %rdi,%rcx
	mov    %r15,-0x10(%rbp)
	mov    %rdi,-0x8(%rbp)
	mov    %rcx,%rdi
	mov    %rdx,%r15
	callq  *%rax
	cmp    $0x1,%eax
	je     21f9c <consume_markers+0x4c>
	cmp    $0x2,%eax
	je     21fb7 <consume_markers+0x67>
	mov    -0x10(%rbp),%r15
	leaveq 
	retq   
	mov    $0x1,%eax
	movslq 0x28(%r15),%rcx
	test   %ecx,%ecx
	jne    21fe5 <consume_markers+0x95>
	movslq 0x20(%r15),%rcx
	test   %ecx,%ecx
	je     22001 <consume_markers+0xb1>
	mov    -0x8(%rbp),%rdi
	jmp    22022 <consume_markers+0xd2>
	movl   $0x1,0x24(%r15)
	movslq 0x28(%r15),%rax
	test   %eax,%eax
	jne    22033 <consume_markers+0xe3>
	mov    -0x8(%rbp),%rcx
	movslq 0xac(%rcx),%rax
	cmp    0xb4(%rcx),%eax
	jl     22051 <consume_markers+0x101>
	mov    $0x2,%eax
	mov    -0x10(%rbp),%r15
	leaveq 
	retq   
	mov    -0x8(%rbp),%rdi
	callq  22080 <initial_setup>
	movl   $0x0,0x28(%r15)
	mov    $0x1,%eax
	mov    -0x10(%rbp),%r15
	leaveq 
	retq   
	mov    -0x8(%rbp),%r15
	mov    (%r15),%rax
	movl   $0x23,0x28(%rax)
	mov    (%r15),%rax
	mov    (%rax),%rax
	mov    %r15,%rdi
	callq  *%rax
	mov    %r15,%rdi
	mov    $0x1,%eax
	mov    %rax,%r15
	callq  22600 <start_input_pass>
	mov    %r15,%rax
	mov    -0x10(%rbp),%r15
	leaveq 
	retq   
	mov    -0x8(%rbp),%rdi
	mov    0x248(%rdi),%rax
	movslq 0x1c(%rax),%rax
	test   %eax,%eax
	jne    22062 <consume_markers+0x112>
	mov    $0x2,%eax
	mov    -0x10(%rbp),%r15
	leaveq 
	retq   
	mov    %eax,0xb4(%rcx)
	mov    $0x2,%eax
	mov    -0x10(%rbp),%r15
	leaveq 
	retq   
	mov    (%rdi),%rax
	movl   $0x3b,0x28(%rax)
	mov    (%rdi),%rax
	mov    (%rax),%rax
	callq  *%rax
	mov    $0x2,%eax
	mov    -0x10(%rbp),%r15
	leaveq 
	retq   
	nop

0022080 <initial_setup>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %r15,-0x18(%rbp)
	mov    %r13,-0x8(%rbp)
	mov    %r14,-0x10(%rbp)
	mov    0x34(%rdi),%eax
	cmp    $0xffdc,%eax
	ja     220ad <initial_setup+0x2d>
	mov    0x30(%rdi),%eax
	cmp    $0xffdc,%eax
	ja     220ad <initial_setup+0x2d>
	mov    %rdi,%r13
	jmp    220cc <initial_setup+0x4c>
	mov    (%rdi),%rax
	movl   $0x29,0x28(%rax)
	mov    (%rdi),%rax
	movl   $0xffdc,0x2c(%rax)
	mov    (%rdi),%rax
	mov    (%rax),%rax
	mov    %rdi,%r13
	callq  *%rax
	movslq 0x128(%r13),%rax
	cmp    $0x8,%eax
	je     220fd <initial_setup+0x7d>
	mov    0x0(%r13),%rax
	movl   $0xf,0x28(%rax)
	movslq 0x128(%r13),%rcx
	mov    0x0(%r13),%rax
	mov    %ecx,0x2c(%rax)
	mov    0x0(%r13),%rax
	mov    (%rax),%rax
	mov    %r13,%rdi
	callq  *%rax
	movslq 0x38(%r13),%rax
	cmp    $0xa,%eax
	jle    22133 <initial_setup+0xb3>
	mov    0x0(%r13),%rax
	movl   $0x1a,0x28(%rax)
	movslq 0x38(%r13),%rcx
	mov    0x0(%r13),%rax
	mov    %ecx,0x2c(%rax)
	mov    0x0(%r13),%rax
	movl   $0xa,0x30(%rax)
	mov    0x0(%r13),%rax
	mov    (%rax),%rax
	mov    %r13,%rdi
	callq  *%rax
	mov    0x130(%r13),%r15
	movl   $0x1,0x198(%r13)
	movl   $0x1,0x19c(%r13)
	xor    %r14d,%r14d
	jmp    221c0 <initial_setup+0x140>
	movslq 0x8(%r15),%rax
	test   %eax,%eax
	jle    2216f <initial_setup+0xef>
	cmp    $0x4,%eax
	jg     2216f <initial_setup+0xef>
	movslq 0xc(%r15),%rax
	test   %eax,%eax
	jle    2216f <initial_setup+0xef>
	cmp    $0x4,%eax
	jle    22186 <initial_setup+0x106>
	mov    0x0(%r13),%rax
	movl   $0x12,0x28(%rax)
	mov    0x0(%r13),%rax
	mov    (%rax),%rax
	mov    %r13,%rdi
	callq  *%rax
	movslq 0x198(%r13),%rcx
	movslq 0x8(%r15),%rax
	cmp    %ecx,%eax
	jge    22198 <initial_setup+0x118>
	mov    %rcx,%rax
	mov    %eax,0x198(%r13)
	movslq 0x19c(%r13),%rcx
	movslq 0xc(%r15),%rax
	cmp    %ecx,%eax
	jge    221b1 <initial_setup+0x131>
	mov    %rcx,%rax
	mov    %eax,0x19c(%r13)
	add    $0x60,%r15
	add    $0x1,%r14d
	movslq 0x38(%r13),%rax
	cmp    %r14d,%eax
	jg     22155 <initial_setup+0xd5>
	mov    0x130(%r13),%r15
	movl   $0x8,0x1a0(%r13)
	xor    %r14d,%r14d
	jmpq   222a3 <initial_setup+0x223>
	movl   $0x8,0x24(%r15)
	movslq 0x8(%r15),%rdi
	mov    0x30(%r13),%eax
	imul   %rax,%rdi
	movslq 0x198(%r13),%rax
	shl    $0x3,%eax
	movslq %eax,%rsi
	callq  4150 <jdiv_round_up@plt>
	mov    %eax,0x1c(%r15)
	movslq 0xc(%r15),%rdi
	mov    0x34(%r13),%eax
	imul   %rax,%rdi
	movslq 0x19c(%r13),%rax
	shl    $0x3,%eax
	movslq %eax,%rsi
	callq  4150 <jdiv_round_up@plt>
	mov    %eax,0x20(%r15)
	mov    0x220(%r13),%rax
	movslq %r14d,%rdx
	movl   $0x0,0x1c(%rax,%rdx,4)
	mov    0x1c(%r15),%eax
	add    $0xffffffff,%eax
	mov    0x220(%r13),%rcx
	mov    %eax,0x44(%rcx,%rdx,4)
	movslq 0x8(%r15),%rdi
	mov    0x30(%r13),%eax
	imul   %rax,%rdi
	movslq 0x198(%r13),%rsi
	callq  4150 <jdiv_round_up@plt>
	mov    %eax,0x28(%r15)
	movslq 0xc(%r15),%rdi
	mov    0x34(%r13),%eax
	imul   %rax,%rdi
	movslq 0x19c(%r13),%rsi
	callq  4150 <jdiv_round_up@plt>
	mov    %eax,0x2c(%r15)
	movl   $0x1,0x30(%r15)
	movq   $0x0,0x50(%r15)
	add    $0x1,%r14d
	add    $0x60,%r15
	movslq 0x38(%r13),%rax
	cmp    %r14d,%eax
	jg     221e3 <initial_setup+0x163>
	mov    0x34(%r13),%edi
	movslq 0x19c(%r13),%rax
	shl    $0x3,%eax
	movslq %eax,%rsi
	callq  4150 <jdiv_round_up@plt>
	mov    %eax,0x1a4(%r13)
	movslq 0x38(%r13),%rax
	cmp    0x1b0(%r13),%eax
	jg     22301 <initial_setup+0x281>
	movslq 0x138(%r13),%rax
	test   %eax,%eax
	jne    22301 <initial_setup+0x281>
	mov    0x240(%r13),%rax
	movl   $0x0,0x20(%rax)
	mov    -0x10(%rbp),%r14
	mov    -0x8(%rbp),%r13
	mov    -0x18(%rbp),%r15
	leaveq 
	retq   
	mov    0x240(%r13),%rax
	movl   $0x1,0x20(%rax)
	mov    -0x10(%rbp),%r14
	mov    -0x8(%rbp),%r13
	mov    -0x18(%rbp),%r15
	leaveq 
	retq   
	nopl   (%rax)

0022320 <per_scan_setup>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	movslq 0x1b0(%rdi),%rax
	cmp    $0x1,%eax
	je     2234b <per_scan_setup+0x2b>
	test   %eax,%eax
	jle    223b2 <per_scan_setup+0x92>
	cmp    $0x4,%eax
	jg     223b2 <per_scan_setup+0x92>
	mov    %r15,%rcx
	mov    %r14,%r15
	mov    %rdi,%r14
	jmpq   223ef <per_scan_setup+0xcf>
	mov    0x1b8(%rdi),%rcx
	mov    0x1c(%rcx),%eax
	mov    %eax,0x1d8(%rdi)
	mov    0x20(%rcx),%eax
	mov    %eax,0x1dc(%rdi)
	movl   $0x1,0x34(%rcx)
	movl   $0x1,0x38(%rcx)
	movl   $0x1,0x3c(%rcx)
	movslq 0x24(%rcx),%rax
	mov    %eax,0x40(%rcx)
	movl   $0x1,0x44(%rcx)
	mov    0x20(%rcx),%eax
	mov    0xc(%rcx),%esi
	xor    %edx,%edx
	div    %esi
	test   %edx,%edx
	jne    22399 <per_scan_setup+0x79>
	movslq 0xc(%rcx),%rdx
	mov    %edx,0x48(%rcx)
	movl   $0x1,0x1e0(%rdi)
	movl   $0x0,0x1e4(%rdi)
	leaveq 
	retq   
	mov    (%rdi),%rax
	movl   $0x1a,0x28(%rax)
	movslq 0x1b0(%rdi),%rcx
	mov    (%rdi),%rax
	mov    %ecx,0x2c(%rax)
	mov    (%rdi),%rax
	movl   $0x4,0x30(%rax)
	mov    (%rdi),%rax
	mov    (%rax),%rax
	mov    %rdi,%rcx
	mov    %r15,-0x18(%rbp)
	mov    %r14,%r15
	mov    %rdi,%r14
	mov    %rcx,%rdi
	callq  *%rax
	mov    -0x18(%rbp),%rcx
	mov    0x30(%r14),%edi
	movslq 0x198(%r14),%rax
	shl    $0x3,%eax
	movslq %eax,%rsi
	mov    %rcx,-0x18(%rbp)
	callq  4150 <jdiv_round_up@plt>
	mov    %eax,0x1d8(%r14)
	mov    0x34(%r14),%edi
	movslq 0x19c(%r14),%rax
	shl    $0x3,%eax
	movslq %eax,%rsi
	callq  4150 <jdiv_round_up@plt>
	mov    %eax,0x1dc(%r14)
	movl   $0x0,0x1e0(%r14)
	xor    %eax,%eax
	mov    %r13,-0x8(%rbp)
	mov    %r15,-0x10(%rbp)
	mov    %rax,%r15
	jmp    2246d <per_scan_setup+0x14d>
	movslq 0x1e0(%r14),%rcx
	lea    0x1(%rcx),%eax
	mov    %eax,0x1e0(%r14)
	mov    %r15d,0x1e4(%r14,%rcx,4)
	add    $0xffffffff,%r13d
	test   %r13d,%r13d
	jg     22447 <per_scan_setup+0x127>
	add    $0x1,%r15d
	movslq 0x1b0(%r14),%rax
	cmp    %r15d,%eax
	jg     22487 <per_scan_setup+0x167>
	mov    -0x10(%rbp),%r14
	mov    -0x8(%rbp),%r13
	mov    -0x18(%rbp),%r15
	leaveq 
	retq   
	movslq %r15d,%rax
	mov    0x1b8(%r14,%rax,8),%rcx
	movslq 0x8(%rcx),%rsi
	mov    %esi,0x34(%rcx)
	movslq 0xc(%rcx),%rax
	mov    %eax,0x38(%rcx)
	imul   %esi,%eax
	mov    %eax,0x3c(%rcx)
	mov    %rsi,%rax
	imul   0x24(%rcx),%eax
	mov    %eax,0x40(%rcx)
	mov    0x1c(%rcx),%eax
	xor    %edx,%edx
	div    %esi
	test   %edx,%edx
	jne    224bf <per_scan_setup+0x19f>
	movslq 0x34(%rcx),%rdx
	mov    %edx,0x44(%rcx)
	mov    0x20(%rcx),%eax
	mov    0x38(%rcx),%esi
	xor    %edx,%edx
	div    %esi
	test   %edx,%edx
	jne    224d4 <per_scan_setup+0x1b4>
	movslq 0x38(%rcx),%rdx
	mov    %edx,0x48(%rcx)
	movslq 0x3c(%rcx),%r13
	mov    %r13,%rax
	add    0x1e0(%r14),%eax
	cmp    $0xa,%eax
	jle    22464 <per_scan_setup+0x144>
	mov    (%r14),%rax
	movl   $0xd,0x28(%rax)
	mov    (%r14),%rax
	mov    (%rax),%rax
	mov    %r14,%rdi
	callq  *%rax
	jmpq   22464 <per_scan_setup+0x144>
	nopl   0x0(%rax,%rax,1)

0022510 <latch_quant_tables>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %rbx,-0x8(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %r15,-0x28(%rbp)
	mov    %rdi,%r13
	mov    $0x1,%r12d
	mov    $0x84,%r14d
	xor    %ebx,%ebx
	jmpq   225d2 <latch_quant_tables+0xc2>
	movslq %ebx,%rax
	mov    0x1b8(%r13,%rax,8),%r15
	mov    0x50(%r15),%rax
	test   %rax,%rax
	jne    225cf <latch_quant_tables+0xbf>
	movslq 0x10(%r15),%rax
	test   %eax,%eax
	js     22570 <latch_quant_tables+0x60>
	cmp    $0x3,%eax
	jg     22570 <latch_quant_tables+0x60>
	mov    0xc8(%r13,%rax,8),%rcx
	test   %rcx,%rcx
	jne    2259a <latch_quant_tables+0x8a>
	mov    0x0(%r13),%rcx
	movl   $0x34,0x28(%rcx)
	mov    0x0(%r13),%rcx
	mov    %eax,0x2c(%rcx)
	mov    0x0(%r13),%rcx
	mov    (%rcx),%rcx
	mov    %rax,%r14
	mov    %r13,%rdi
	callq  *%rcx
	mov    %r14,%rax
	mov    $0x84,%r14d
	mov    0x8(%r13),%rcx
	mov    (%rcx),%rcx
	mov    %r12,%rsi
	mov    %rax,%r12
	mov    %r13,%rdi
	mov    %r14,%rdx
	callq  *%rcx
	mov    0xc8(%r13,%r12,8),%rsi
	mov    %rax,%r12
	mov    %r12,%rdi
	mov    %r14,%rdx
	callq  42c0 <memcpy@plt>
	mov    %r12,0x50(%r15)
	mov    $0x1,%r12d
	add    $0x1,%ebx
	movslq 0x1b0(%r13),%rax
	cmp    %ebx,%eax
	jg     22542 <latch_quant_tables+0x32>
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	leaveq 
	retq   
	nopw   0x0(%rax,%rax,1)

0022600 <start_input_pass>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %r15,-0x8(%rbp)
	mov    %rdi,%r15
	callq  22320 <per_scan_setup>
	mov    %r15,%rdi
	callq  22510 <latch_quant_tables>
	mov    0x250(%r15),%rax
	mov    (%rax),%rax
	mov    %r15,%rdi
	callq  *%rax
	mov    0x230(%r15),%rax
	mov    (%rax),%rax
	mov    %r15,%rdi
	callq  *%rax
	mov    0x230(%r15),%rax
	mov    0x8(%rax),%rcx
	mov    0x240(%r15),%rax
	mov    %rcx,(%rax)
	mov    -0x8(%rbp),%r15
	leaveq 
	retq   
	data16 nopw %cs:0x0(%rax,%rax,1)

0022660 <finish_input_pass>:
	push   %rbp
	mov    %rsp,%rbp
	lea    -0x71b(%rip),%rax        # 21f50 <consume_markers>
	mov    0x240(%rdi),%rcx
	mov    %rax,(%rcx)
	leaveq 
	retq   
	nopw   0x0(%rax,%rax,1)

0022680 <reset_input_controller>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %r15,-0x8(%rbp)
	lea    -0x743(%rip),%rcx        # 21f50 <consume_markers>
	mov    0x240(%rdi),%rax
	mov    %rcx,(%rax)
	movl   $0x0,0x20(%rax)
	movl   $0x0,0x24(%rax)
	movl   $0x1,0x28(%rax)
	mov    (%rdi),%rax
	mov    0x20(%rax),%rax
	mov    %rdi,%r15
	callq  *%rax
	mov    0x248(%r15),%rax
	mov    (%rax),%rax
	mov    %r15,%rdi
	callq  *%rax
	movq   $0x0,0xc0(%r15)
	mov    -0x8(%rbp),%r15
	leaveq 
	retq   
	xchg   %ax,%ax

00226e0 <jinit_d_main_controller>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %r13,-0x18(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %r15,-0x28(%rbp)
	mov    %rbx,-0x8(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    $0x1,%r13d
	mov    0x8(%rdi),%rax
	mov    (%rax),%rax
	mov    %rsi,%r12
	mov    $0x88,%edx
	mov    %rdi,%rbx
	mov    %r13,%rsi
	callq  *%rax
	mov    %rax,0x228(%rbx)
	lea    0x8a9(%rip),%rcx        # 22fd0 <start_pass_main>
	mov    %rcx,(%rax)
	test   %r12d,%r12d
	jne    22737 <jinit_d_main_controller+0x57>
	mov    %r13,%rsi
	mov    %rax,%r12
	jmp    22752 <jinit_d_main_controller+0x72>
	mov    (%rbx),%rcx
	movl   $0x4,0x28(%rcx)
	mov    (%rbx),%rcx
	mov    (%rcx),%rcx
	mov    %rax,%r12
	mov    %rbx,%rdi
	callq  *%rcx
	mov    %r13,%rsi
	mov    0x260(%rbx),%rax
	movslq 0x10(%rax),%rax
	test   %eax,%eax
	jne    2276a <jinit_d_main_controller+0x8a>
	movslq 0x1a0(%rbx),%r13
	jmp    227aa <jinit_d_main_controller+0xca>
	movslq 0x1a0(%rbx),%rax
	cmp    $0x1,%eax
	jg     22791 <jinit_d_main_controller+0xb1>
	mov    (%rbx),%rax
	movl   $0x2f,0x28(%rax)
	mov    (%rbx),%rax
	mov    (%rax),%rax
	mov    %rsi,%r13
	mov    %rbx,%rdi
	callq  *%rax
	mov    %r13,%rsi
	mov    %rsi,%r14
	mov    %rbx,%rdi
	callq  22cc0 <alloc_funny_pointers>
	movslq 0x1a0(%rbx),%r13
	add    $0x2,%r13d
	mov    %r14,%rsi
	mov    0x130(%rbx),%r15
	xor    %r14d,%r14d
	jmp    227fa <jinit_d_main_controller+0x11a>
	movslq 0x24(%r15),%rax
	imul   0xc(%r15),%eax
	cltd   
	movslq 0x1a0(%rbx),%rcx
	idiv   %ecx
	mov    %r13,%rcx
	imul   %eax,%ecx
	mov    0x24(%r15),%edx
	imul   0x1c(%r15),%edx
	mov    0x8(%rbx),%rax
	mov    0x10(%rax),%rax
	mov    %rbx,%rdi
	callq  *%rax
	movslq %r14d,%rcx
	mov    %rax,0x10(%r12,%rcx,8)
	add    $0x1,%r14d
	add    $0x60,%r15
	mov    $0x1,%esi
	movslq 0x38(%rbx),%rax
	cmp    %r14d,%eax
	jg     227b6 <jinit_d_main_controller+0xd6>
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	leaveq 
	retq   
	nopl   0x0(%rax)

0022820 <set_wraparound_pointers>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %rbx,-0x8(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %r15,-0x28(%rbp)
	mov    0x228(%rdi),%rsi
	mov    0x130(%rdi),%r8
	movslq 0x1a0(%rdi),%rax
	lea    0x1(%rax),%r9d
	lea    0x2(%rax),%ebx
	mov    %rbx,-0x30(%rbp)
	xor    %ecx,%ecx
	mov    %rcx,%r10
	jmp    228b5 <set_wraparound_pointers+0x95>
	lea    (%rcx,%r15,1),%edx
	movslq %edx,%r14
	mov    0x0(%r13,%r14,8),%rbx
	mov    %rcx,%rdx
	sub    %eax,%edx
	movslq %edx,%rdx
	mov    %rbx,0x0(%r13,%rdx,8)
	mov    (%r11,%r14,8),%rbx
	mov    %rbx,(%r11,%rdx,8)
	movslq %ecx,%r14
	mov    0x0(%r13,%r14,8),%rdx
	lea    (%rcx,%r12,1),%ebx
	movslq %ebx,%rbx
	mov    %rdx,0x0(%r13,%rbx,8)
	mov    (%r11,%r14,8),%rdx
	mov    %rdx,(%r11,%rbx,8)
	add    $0x1,%ecx
	cmp    %eax,%ecx
	jl     22863 <set_wraparound_pointers+0x43>
	add    $0x1,%r10d
	add    $0x60,%r8
	xor    %ecx,%ecx
	mov    -0x30(%rbp),%rbx
	movslq 0x38(%rdi),%rax
	cmp    %r10d,%eax
	jg     228d4 <set_wraparound_pointers+0xb4>
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	leaveq 
	retq   
	movslq %r10d,%r11
	movslq 0x24(%r8),%rax
	imul   0xc(%r8),%eax
	cltd   
	movslq 0x1a0(%rdi),%r12
	mov    0x68(%rsi),%r13
	mov    0x0(%r13,%r11,8),%r13
	mov    0x70(%rsi),%r14
	mov    (%r14,%r11,8),%r11
	idiv   %r12d
	mov    %rax,%r15
	imul   %r9d,%r15d
	mov    %rax,%r12
	imul   %ebx,%r12d
	jmp    228a3 <set_wraparound_pointers+0x83>
	nopl   0x0(%rax)

0022910 <process_data_simple_main>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %r15,-0x8(%rbp)
	mov    0x228(%rdi),%r15
	movslq 0x60(%r15),%rax
	test   %eax,%eax
	je     22971 <process_data_simple_main+0x61>
	mov    %rsi,%r8
	mov    %rdx,%r9
	mov    0x238(%rdi),%rax
	mov    0x8(%rax),%rax
	lea    0x10(%r15),%rsi
	lea    0x64(%r15),%rdx
	mov    %rdx,-0x20(%rbp)
	mov    0x1a0(%rdi),%r10d
	mov    %ecx,(%rsp)
	mov    %r10,%rcx
	mov    %r14,-0x28(%rbp)
	mov    %r10,%r14
	callq  *%rax
	mov    0x64(%r15),%eax
	cmp    %r14d,%eax
	jae    229a5 <process_data_simple_main+0x95>
	mov    -0x28(%rbp),%r14
	mov    -0x8(%rbp),%r15
	leaveq 
	retq   
	mov    0x230(%rdi),%rax
	mov    0x18(%rax),%rax
	lea    0x10(%r15),%r8
	mov    %rdi,%r9
	mov    %rdi,-0x28(%rbp)
	mov    %rcx,-0x20(%rbp)
	mov    %rsi,-0x10(%rbp)
	mov    %rdx,-0x18(%rbp)
	mov    %r8,%rsi
	mov    %r9,%rdi
	callq  *%rax
	test   %eax,%eax
	jne    229c1 <process_data_simple_main+0xb1>
	mov    -0x8(%rbp),%r15
	leaveq 
	retq   
	movl   $0x0,0x60(%r15)
	mov    -0x20(%rbp),%rax
	movl   $0x0,(%rax)
	mov    -0x28(%rbp),%r14
	mov    -0x8(%rbp),%r15
	leaveq 
	retq   
	movl   $0x1,0x60(%r15)
	mov    -0x18(%rbp),%r9
	mov    -0x10(%rbp),%r8
	mov    -0x20(%rbp),%rcx
	mov    -0x28(%rbp),%rdi
	jmpq   22931 <process_data_simple_main+0x21>
	xchg   %ax,%ax

00229e0 <process_data_context_main>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x50,%rsp
	mov    %r15,-0x48(%rbp)
	mov    0x228(%rdi),%r9
	movslq 0x60(%r9),%rax
	test   %eax,%eax
	je     22a29 <process_data_context_main+0x49>
	mov    %r15,%rax
	mov    %r14,%r15
	mov    %r9,%r14
	movslq 0x7c(%r14),%r8
	test   %r8d,%r8d
	jle    22a6f <process_data_context_main+0x8f>
	cmp    $0x1,%r8d
	je     22b12 <process_data_context_main+0x132>
	cmp    $0x2,%r8d
	je     22b79 <process_data_context_main+0x199>
	mov    %r15,%r14
	mov    %rax,%r15
	leaveq 
	retq   
	movslq 0x78(%r9),%rax
	mov    0x68(%r9,%rax,8),%r10
	mov    0x230(%rdi),%rax
	mov    0x18(%rax),%rax
	mov    %rdi,%r8
	mov    %rdi,-0x40(%rbp)
	mov    %rcx,-0x38(%rbp)
	mov    %rsi,-0x28(%rbp)
	mov    %rdx,-0x30(%rbp)
	mov    %r10,%rsi
	mov    %r8,%rdi
	mov    %r14,%r15
	mov    %r9,%r14
	callq  *%rax
	test   %eax,%eax
	jne    22be3 <process_data_context_main+0x203>
	mov    %r15,%r14
	mov    -0x48(%rbp),%r15
	leaveq 
	retq   
	test   %r8d,%r8d
	je     22aa0 <process_data_context_main+0xc0>
	mov    %r15,%r14
	mov    %rax,%r15
	leaveq 
	retq   
	movl   $0x0,0x7c(%r14)
	mov    -0x40(%rbp),%rdx
	mov    -0x38(%rbp),%rcx
	cmp    (%rdx),%ecx
	jbe    22c15 <process_data_context_main+0x235>
	mov    -0x20(%rbp),%r15
	mov    -0x28(%rbp),%rsi
	mov    -0x30(%rbp),%rdi
	movl   $0x0,0x64(%r14)
	mov    0x1a0(%rdi),%eax
	add    $0xffffffff,%eax
	mov    %eax,0x80(%r14)
	mov    0x1a4(%rdi),%eax
	cmp    0x84(%r14),%eax
	jne    22b0a <process_data_context_main+0x12a>
	mov    %rdi,%rax
	mov    %r15,-0x20(%rbp)
	mov    %rbx,-0x8(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    %rcx,%rbx
	mov    %rdi,%r12
	mov    %rax,%rdi
	mov    %rdx,%r13
	mov    %rsi,%r15
	callq  22f00 <set_bottom_pointers>
	mov    %rbx,%rcx
	mov    %r13,%rdx
	mov    %r15,%rsi
	mov    %r12,%rdi
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	mov    -0x20(%rbp),%r15
	movl   $0x1,0x7c(%r14)
	movslq 0x78(%r14),%rax
	mov    0x68(%r14,%rax,8),%r8
	mov    0x238(%rdi),%rax
	mov    0x8(%rax),%rax
	lea    0x64(%r14),%r10
	mov    0x80(%r14),%r9d
	mov    %ecx,(%rsp)
	mov    %rdi,%r11
	mov    %rdi,-0x8(%rbp)
	mov    %r10,%rcx
	mov    %r15,-0x18(%rbp)
	mov    %r11,%rdi
	mov    %r10,%r15
	mov    %r9,%r11
	mov    %rdx,%r9
	mov    %rcx,%rdx
	mov    %r11,%rcx
	mov    %r8,%r11
	mov    %rsi,%r8
	mov    %r11,%rsi
	callq  *%rax
	mov    0x80(%r14),%eax
	cmp    (%r15),%eax
	jbe    22c1f <process_data_context_main+0x23f>
	mov    -0x18(%rbp),%r14
	mov    -0x48(%rbp),%r15
	leaveq 
	retq   
	movslq 0x78(%r14),%rax
	mov    0x68(%r14,%rax,8),%r8
	mov    0x238(%rdi),%rax
	mov    0x8(%rax),%rax
	lea    0x64(%r14),%r9
	mov    0x80(%r14),%r10d
	mov    %ecx,(%rsp)
	mov    %rdi,-0x30(%rbp)
	mov    %rcx,-0x38(%rbp)
	mov    %r9,%rcx
	mov    %rsi,-0x28(%rbp)
	mov    %rdx,-0x40(%rbp)
	mov    %r15,-0x20(%rbp)
	mov    %r9,%r15
	mov    %rdx,%r9
	mov    %rcx,%rdx
	mov    %r10,%rcx
	mov    %r8,%r10
	mov    %rsi,%r8
	mov    %r10,%rsi
	callq  *%rax
	mov    0x80(%r14),%eax
	cmp    (%r15),%eax
	jbe    22a7c <process_data_context_main+0x9c>
	mov    -0x20(%rbp),%r14
	mov    -0x48(%rbp),%r15
	leaveq 
	retq   
	movl   $0x1,0x60(%r14)
	mov    0x84(%r14),%eax
	add    $0x1,%eax
	mov    %eax,0x84(%r14)
	mov    -0x30(%rbp),%rdx
	mov    -0x28(%rbp),%rsi
	mov    -0x38(%rbp),%rcx
	mov    -0x40(%rbp),%rdi
	mov    -0x48(%rbp),%rax
	jmpq   22a04 <process_data_context_main+0x24>
	mov    -0x20(%rbp),%r14
	mov    -0x48(%rbp),%r15
	leaveq 
	retq   
	mov    0x84(%r14),%eax
	cmp    $0x1,%eax
	je     22c31 <process_data_context_main+0x251>
	mov    -0x8(%rbp),%rax
	jmp    22c4b <process_data_context_main+0x26b>
	mov    -0x8(%rbp),%rax
	mov    %rax,%rdi
	mov    %r13,-0x10(%rbp)
	mov    %rax,%r13
	callq  22820 <set_wraparound_pointers>
	mov    %r13,%rax
	mov    -0x10(%rbp),%r13
	movslq 0x78(%r14),%rcx
	xor    $0x1,%ecx
	mov    %ecx,0x78(%r14)
	movl   $0x0,0x60(%r14)
	mov    0x1a0(%rax),%ecx
	add    $0x1,%ecx
	mov    %ecx,(%r15)
	mov    0x1a0(%rax),%eax
	add    $0x2,%eax
	mov    %eax,0x80(%r14)
	movl   $0x2,0x7c(%r14)
	mov    -0x18(%rbp),%r14
	mov    -0x48(%rbp),%r15
	leaveq 
	retq   
	nopl   0x0(%rax)

0022c90 <process_data_crank_post>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    0x238(%rdi),%rax
	mov    0x8(%rax),%rax
	mov    %ecx,(%rsp)
	mov    %rsi,%r8
	mov    %rdx,%r9
	xor    %esi,%esi
	mov    %rsi,%rdx
	mov    %rsi,%rcx
	callq  *%rax
	leaveq 
	retq   
	nopl   0x0(%rax,%rax,1)

0022cc0 <alloc_funny_pointers>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x40,%rsp
	mov    %r12,-0x10(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %r15,-0x28(%rbp)
	mov    %rdi,-0x38(%rbp)
	mov    %rbx,-0x8(%rbp)
	mov    0x8(%rdi),%rax
	mov    (%rax),%rax
	mov    $0x1,%r14d
	movslq 0x38(%rdi),%rcx
	add    %ecx,%ecx
	movslq %ecx,%rdx
	shl    $0x3,%rdx
	mov    0x228(%rdi),%r12
	movslq 0x1a0(%rdi),%rbx
	mov    %rdi,%r15
	mov    %r14,%rsi
	callq  *%rax
	mov    %rax,0x68(%r12)
	movslq 0x38(%r15),%rcx
	lea    (%rax,%rcx,8),%rax
	mov    %rax,0x70(%r12)
	mov    0x130(%r15),%rax
	add    $0x4,%ebx
	mov    %rbx,-0x30(%rbp)
	mov    %r14,%rsi
	mov    %rax,%r14
	mov    %r15,%rdi
	xor    %r13d,%r13d
	jmp    22da2 <alloc_funny_pointers+0xe2>
	movslq 0x24(%r14),%rax
	imul   0xc(%r14),%eax
	cltd   
	movslq 0x1a0(%rdi),%rcx
	idiv   %ecx
	imul   %eax,%ebx
	lea    (%rbx,%rbx,1),%ecx
	movslq %ecx,%rdx
	shl    $0x3,%rdx
	mov    0x8(%rdi),%rcx
	mov    (%rcx),%rcx
	mov    %rax,%r15
	callq  *%rcx
	movslq %r15d,%rcx
	lea    (%rax,%rcx,8),%rdx
	mov    0x68(%r12),%rax
	movslq %r13d,%rcx
	mov    %rdx,(%rax,%rcx,8)
	movslq %ebx,%rax
	lea    (%rdx,%rax,8),%rdx
	mov    0x70(%r12),%rax
	mov    %rdx,(%rax,%rcx,8)
	add    $0x1,%r13d
	add    $0x60,%r14
	mov    $0x1,%esi
	mov    -0x30(%rbp),%rbx
	mov    -0x38(%rbp),%rdi
	movslq 0x38(%rdi),%rax
	cmp    %r13d,%eax
	jg     22d3e <alloc_funny_pointers+0x7e>
	mov    -0x8(%rbp),%rbx
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	leaveq 
	retq   
	data16 nopw %cs:0x0(%rax,%rax,1)
	nopl   0x0(%rax)

0022dd0 <make_funny_pointers>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x50,%rsp
	mov    %rbx,-0x8(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %r15,-0x28(%rbp)
	mov    0x228(%rdi),%r9
	mov    0x130(%rdi),%r10
	movslq 0x1a0(%rdi),%rsi
	mov    %rsi,-0x48(%rbp)
	lea    -0x2(%rsi),%ebx
	mov    %rbx,-0x40(%rbp)
	xor    %ecx,%ecx
	lea    0x2(%rsi),%r8d
	mov    %r8,-0x38(%rbp)
	mov    %rcx,%r11
	jmp    22e47 <make_funny_pointers+0x77>
	mov    %rax,%rcx
	sub    %edx,%ecx
	movslq %ecx,%rcx
	mov    (%r15),%rsi
	mov    %rsi,(%r15,%rcx,8)
	add    $0x1,%eax
	cmp    %edx,%eax
	jl     22e1b <make_funny_pointers+0x4b>
	add    $0x1,%r11d
	add    $0x60,%r10
	mov    -0x48(%rbp),%rsi
	mov    -0x40(%rbp),%rbx
	xor    %ecx,%ecx
	mov    -0x38(%rbp),%r8
	movslq 0x38(%rdi),%rax
	cmp    %r11d,%eax
	jg     22e66 <make_funny_pointers+0x96>
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	leaveq 
	retq   
	movslq %r11d,%r12
	movslq 0x24(%r10),%rax
	imul   0xc(%r10),%eax
	cltd   
	movslq 0x1a0(%rdi),%r13
	mov    0x68(%r9),%r14
	mov    (%r14,%r12,8),%r15
	mov    0x70(%r9),%r14
	mov    (%r14,%r12,8),%r14
	mov    0x10(%r9,%r12,8),%r12
	idiv   %r13d
	mov    %rax,-0x30(%rbp)
	mov    %rax,%rdx
	imul   %r8d,%edx
	jmp    22eb1 <make_funny_pointers+0xe1>
	movslq %ecx,%r13
	mov    (%r12,%r13,8),%r8
	mov    %r8,(%r14,%r13,8)
	mov    %r8,(%r15,%r13,8)
	add    $0x1,%ecx
	cmp    %ecx,%edx
	jg     22e9f <make_funny_pointers+0xcf>
	mov    %rax,%r13
	imul   %ebx,%r13d
	imul   %eax,%esi
	lea    (%rax,%rax,1),%ecx
	xor    %eax,%eax
	jmp    22ee6 <make_funny_pointers+0x116>
	lea    (%rax,%r13,1),%edx
	movslq %edx,%rbx
	lea    (%rax,%rsi,1),%edx
	movslq %edx,%r8
	mov    (%r12,%r8,8),%rdx
	mov    %rdx,(%r14,%rbx,8)
	mov    (%r12,%rbx,8),%rdx
	mov    %rdx,(%r14,%r8,8)
	add    $0x1,%eax
	cmp    %ecx,%eax
	jl     22ec6 <make_funny_pointers+0xf6>
	mov    -0x30(%rbp),%rdx
	xor    %eax,%eax
	jmpq   22e2d <make_funny_pointers+0x5d>
	data16 nopw %cs:0x0(%rax,%rax,1)

0022f00 <set_bottom_pointers>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %r13,-0x8(%rbp)
	mov    %r14,-0x10(%rbp)
	mov    %r15,-0x18(%rbp)
	mov    0x228(%rdi),%rsi
	mov    0x130(%rdi),%r8
	xor    %ecx,%ecx
	mov    %rcx,%r9
	jmp    22f48 <set_bottom_pointers+0x48>
	mov    (%r14,%rdx,8),%r13
	lea    (%r10,%rax,1),%r11d
	movslq %r11d,%r11
	mov    %r13,(%r14,%r11,8)
	add    $0x1,%eax
	cmp    %r15d,%eax
	jl     22f29 <set_bottom_pointers+0x29>
	add    $0x1,%r9d
	add    $0x60,%r8
	movslq 0x38(%rdi),%rax
	cmp    %r9d,%eax
	jg     22f5f <set_bottom_pointers+0x5f>
	mov    -0x18(%rbp),%r15
	mov    -0x10(%rbp),%r14
	mov    -0x8(%rbp),%r13
	leaveq 
	retq   
	movslq 0x1a0(%rdi),%r13
	movslq 0x24(%r8),%r11
	imul   0xc(%r8),%r11d
	mov    0x2c(%r8),%eax
	xor    %edx,%edx
	div    %r11d
	test   %edx,%edx
	je     22f81 <set_bottom_pointers+0x81>
	mov    %rdx,%r10
	jmp    22f84 <set_bottom_pointers+0x84>
	mov    %r11,%r10
	mov    %r11,%rax
	cltd   
	idiv   %r13d
	lea    -0x1(%r10),%r11d
	test   %r9d,%r9d
	je     22f99 <set_bottom_pointers+0x99>
	mov    %rax,%r13
	jmp    22faf <set_bottom_pointers+0xaf>
	mov    %rax,%r13
	mov    %r11,%rax
	cltd   
	mov    %rax,%r11
	idiv   %r13d
	add    $0x1,%eax
	mov    %eax,0x80(%rsi)
	movslq 0x78(%rsi),%rax
	mov    0x68(%rsi,%rax,8),%rdx
	movslq %r9d,%rax
	mov    (%rdx,%rax,8),%r14
	movslq %r11d,%rdx
	lea    0x0(%r13,%r13,1),%r15d
	mov    %rcx,%rax
	jmpq   22f3b <set_bottom_pointers+0x3b>
	nop

0022fd0 <start_pass_main>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    0x228(%rdi),%rax
	test   %esi,%esi
	je     22ffc <start_pass_main+0x2c>
	cmp    $0x2,%esi
	je     23018 <start_pass_main+0x48>
	mov    (%rdi),%rax
	movl   $0x4,0x28(%rax)
	mov    (%rdi),%rax
	mov    (%rax),%rax
	callq  *%rax
	leaveq 
	retq   
	mov    0x260(%rdi),%rcx
	movslq 0x10(%rcx),%rcx
	test   %ecx,%ecx
	jne    23025 <start_pass_main+0x55>
	lea    -0x702(%rip),%rcx        # 22910 <process_data_simple_main>
	mov    %rcx,0x8(%rax)
	jmp    2305b <start_pass_main+0x8b>
	lea    -0x38f(%rip),%rcx        # 22c90 <process_data_crank_post>
	mov    %rcx,0x8(%rax)
	leaveq 
	retq   
	lea    -0x64c(%rip),%rcx        # 229e0 <process_data_context_main>
	mov    %rcx,0x8(%rax)
	mov    %r15,-0x8(%rbp)
	mov    %rax,%r15
	callq  22dd0 <make_funny_pointers>
	mov    %r15,%rax
	movl   $0x0,0x78(%rax)
	movl   $0x0,0x7c(%rax)
	movl   $0x0,0x84(%rax)
	mov    -0x8(%rbp),%r15
	movl   $0x0,0x60(%rax)
	movl   $0x0,0x64(%rax)
	leaveq 
	retq   
	nopl   0x0(%rax,%rax,1)

0023070 <jpeg_save_markers>:
	push   %rbp
	mov    %rsp,%rbp
	mov    0x248(%rdi),%r8
	mov    0x8(%rdi),%rax
	mov    0x60(%rax),%rax
	add    $0xffffffffffffffe0,%rax
	mov    %edx,%ecx
	cmp    %rax,%rcx
	jle    23091 <jpeg_save_markers+0x21>
	mov    %rax,%rdx
	test   %edx,%edx
	jne    230d0 <jpeg_save_markers+0x60>
	lea    0x20f4(%rip),%rax        # 25190 <get_interesting_appn>
	xor    %edx,%edx
	cmp    $0xe0,%esi
	jne    230f3 <jpeg_save_markers+0x83>
	cmp    $0xfe,%esi
	je     23104 <jpeg_save_markers+0x94>
	cmp    $0xdf,%esi
	jg     23111 <jpeg_save_markers+0xa1>
	mov    (%rdi),%rax
	movl   $0x44,0x28(%rax)
	mov    (%rdi),%rax
	mov    %esi,0x2c(%rax)
	mov    (%rdi),%rax
	mov    (%rax),%rax
	callq  *%rax
	leaveq 
	retq   
	lea    0x2339(%rip),%rax        # 25410 <save_marker>
	cmp    $0xe0,%esi
	je     23131 <jpeg_save_markers+0xc1>
	cmp    $0xee,%esi
	jne    230a6 <jpeg_save_markers+0x36>
	cmp    $0xb,%edx
	ja     230a6 <jpeg_save_markers+0x36>
	mov    $0xc,%edx
	jmp    230a6 <jpeg_save_markers+0x36>
	cmp    $0xee,%esi
	je     230a6 <jpeg_save_markers+0x36>
	lea    0x273e(%rip),%rax        # 25840 <skip_variable>
	jmp    230a6 <jpeg_save_markers+0x36>
	mov    %rax,0x28(%r8)
	mov    %edx,0xb0(%r8)
	leaveq 
	retq   
	cmp    $0xef,%esi
	jg     230b6 <jpeg_save_markers+0x46>
	lea    -0xe0(%rsi),%ecx
	movslq %ecx,%rcx
	mov    %rax,0x30(%r8,%rcx,8)
	mov    %edx,0xb4(%r8,%rcx,4)
	leaveq 
	retq   
	cmp    $0xd,%edx
	ja     230df <jpeg_save_markers+0x6f>
	mov    $0xe,%edx
	jmpq   230a6 <jpeg_save_markers+0x36>

0023140 <jpeg_set_marker_processor>:
	push   %rbp
	mov    %rsp,%rbp
	mov    0x248(%rdi),%rcx
	cmp    $0xfe,%esi
	je     23175 <jpeg_set_marker_processor+0x35>
	cmp    $0xdf,%esi
	jg     2317b <jpeg_set_marker_processor+0x3b>
	mov    (%rdi),%rax
	movl   $0x44,0x28(%rax)
	mov    (%rdi),%rax
	mov    %esi,0x2c(%rax)
	mov    (%rdi),%rax
	mov    (%rax),%rax
	callq  *%rax
	leaveq 
	retq   
	mov    %rdx,0x28(%rcx)
	leaveq 
	retq   
	cmp    $0xef,%esi
	jg     2315b <jpeg_set_marker_processor+0x1b>
	lea    -0xe0(%rsi),%eax
	movslq %eax,%rax
	mov    %rdx,0x30(%rcx,%rax,8)
	leaveq 
	retq   
	data16 nopw %cs:0x0(%rax,%rax,1)
	xchg   %ax,%ax

00231a0 <jpeg_resync_to_restart>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x40,%rsp
	mov    %r13,-0x18(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %r15,-0x28(%rbp)
	mov    %rbx,-0x8(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    (%rdi),%rax
	movslq 0x21c(%rdi),%r15
	movl   $0x79,0x28(%rax)
	mov    (%rdi),%rax
	mov    %r15d,0x2c(%rax)
	mov    (%rdi),%rax
	mov    %esi,0x30(%rax)
	mov    (%rdi),%rax
	mov    0x8(%rax),%rax
	mov    %rsi,%r14
	mov    $0xffffffffffffffff,%rsi
	mov    %rdi,%r12
	callq  *%rax
	mov    $0x4,%esi
	mov    $0x1,%eax
	mov    $0x2,%ebx
	mov    $0x3,%ecx
	lea    0x1(%r14),%edx
	and    $0x7,%edx
	lea    0xd0(%rdx),%r13d
	lea    0x2(%r14),%edx
	and    $0x7,%edx
	lea    0xd0(%rdx),%r8d
	lea    -0x1(%r14),%edx
	and    $0x7,%edx
	lea    0xd0(%rdx),%edi
	mov    %rdi,-0x38(%rbp)
	lea    -0x2(%r14),%edx
	and    $0x7,%edx
	add    $0xd0,%edx
	mov    %rdx,-0x30(%rbp)
	mov    %r8,%r14
	jmp    23263 <jpeg_resync_to_restart+0xc3>
	mov    $0x1,%eax
	mov    $0x4,%esi
	mov    $0x3,%ecx
	mov    $0x2,%ebx
	mov    -0x30(%rbp),%rdx
	mov    -0x38(%rbp),%rdi
	cmp    $0xbf,%r15d
	jg     232c4 <jpeg_resync_to_restart+0x124>
	mov    (%r12),%rax
	movl   $0x61,0x28(%rax)
	mov    (%r12),%rax
	mov    %r15d,0x2c(%rax)
	mov    (%r12),%rax
	mov    %ebx,0x30(%rax)
	mov    (%r12),%rax
	mov    0x8(%rax),%rax
	mov    %r12,%rdi
	callq  *%rax
	cmp    $0x1,%ebx
	jle    232d6 <jpeg_resync_to_restart+0x136>
	cmp    $0x2,%ebx
	je     23306 <jpeg_resync_to_restart+0x166>
	cmp    $0x3,%ebx
	je     2333b <jpeg_resync_to_restart+0x19b>
	mov    $0x1,%eax
	mov    $0x4,%esi
	mov    $0x3,%ecx
	mov    $0x2,%ebx
	mov    -0x30(%rbp),%rdx
	mov    -0x38(%rbp),%rdi
	jmp    23263 <jpeg_resync_to_restart+0xc3>
	cmp    $0xcf,%r15d
	jg     23356 <jpeg_resync_to_restart+0x1b6>
	mov    %rcx,%rbx
	jmp    2326c <jpeg_resync_to_restart+0xcc>
	cmp    $0x1,%ebx
	jne    23247 <jpeg_resync_to_restart+0xa7>
	movl   $0x0,0x21c(%r12)
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	mov    $0x1,%eax
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	leaveq 
	retq   
	mov    %r12,%rdi
	callq  25970 <next_marker>
	test   %eax,%eax
	je     23367 <jpeg_resync_to_restart+0x1c7>
	movslq 0x21c(%r12),%r15
	mov    $0x1,%eax
	mov    $0x4,%esi
	mov    $0x3,%ecx
	mov    $0x2,%ebx
	mov    -0x30(%rbp),%rdx
	mov    -0x38(%rbp),%rdi
	jmpq   23263 <jpeg_resync_to_restart+0xc3>
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	mov    $0x1,%eax
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	leaveq 
	retq   
	cmp    $0xd7,%r15d
	jle    2337f <jpeg_resync_to_restart+0x1df>
	mov    %rcx,%rbx
	jmpq   2326c <jpeg_resync_to_restart+0xcc>
	xor    %eax,%eax
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	leaveq 
	retq   
	cmp    %r13d,%r15d
	jne    2338c <jpeg_resync_to_restart+0x1ec>
	mov    %rcx,%rbx
	jmpq   2326c <jpeg_resync_to_restart+0xcc>
	cmp    %r14d,%r15d
	jne    23399 <jpeg_resync_to_restart+0x1f9>
	mov    %rcx,%rbx
	jmpq   2326c <jpeg_resync_to_restart+0xcc>
	cmp    %edi,%r15d
	je     2326c <jpeg_resync_to_restart+0xcc>
	cmp    %edx,%r15d
	je     2326c <jpeg_resync_to_restart+0xcc>
	mov    %rax,%rbx
	jmpq   2326c <jpeg_resync_to_restart+0xcc>
	data16 nopw %cs:0x0(%rax,%rax,1)
	xchg   %ax,%ax

00233c0 <jinit_marker_reader>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %r14,-0x8(%rbp)
	mov    %r15,-0x10(%rbp)
	mov    0x8(%rdi),%rax
	mov    (%rax),%rax
	xor    %r14d,%r14d
	mov    $0x108,%edx
	mov    %rdi,%r15
	mov    %r14,%rsi
	callq  *%rax
	mov    %rax,0x248(%r15)
	lea    0x2cab(%rip),%rcx        # 260a0 <reset_marker_reader>
	mov    %rcx,(%rax)
	lea    0x2871(%rip),%rcx        # 25c70 <read_markers>
	mov    %rcx,0x8(%rax)
	lea    0x2bb6(%rip),%rcx        # 25fc0 <read_restart_marker>
	mov    %rcx,0x10(%rax)
	lea    0x242b(%rip),%rdx        # 25840 <skip_variable>
	mov    %rdx,0x28(%rax)
	movl   $0x0,0xb0(%rax)
	jmp    2343c <jinit_marker_reader+0x7c>
	movslq %r14d,%rcx
	mov    %rdx,0x30(%rax,%rcx,8)
	movl   $0x0,0xb4(%rax,%rcx,4)
	add    $0x1,%r14d
	cmp    $0xf,%r14d
	jle    23425 <jinit_marker_reader+0x65>
	lea    0x1d47(%rip),%rcx        # 25190 <get_interesting_appn>
	mov    %rcx,0x30(%rax)
	mov    %rcx,0xa0(%rax)
	mov    %r15,%rdi
	callq  260a0 <reset_marker_reader>
	mov    -0x10(%rbp),%r15
	mov    -0x8(%rbp),%r14
	leaveq 
	retq   
	nopw   %cs:0x0(%rax,%rax,1)

0023470 <get_soi>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %r15,-0x10(%rbp)
	mov    %r14,-0x8(%rbp)
	mov    (%rdi),%rax
	movl   $0x66,0x28(%rax)
	mov    $0x1,%esi
	mov    (%rdi),%rax
	mov    0x8(%rax),%rax
	mov    %rdi,%r15
	callq  *%rax
	xor    %r14d,%r14d
	mov    0x248(%r15),%rax
	movslq 0x18(%rax),%rax
	test   %eax,%eax
	je     234e6 <get_soi+0x76>
	mov    (%r15),%rax
	movl   $0x3d,0x28(%rax)
	mov    (%r15),%rax
	mov    (%rax),%rax
	mov    %r15,%rdi
	callq  *%rax
	jmp    234e6 <get_soi+0x76>
	movslq %r14d,%rax
	movb   $0x0,0x140(%r15,%rax,1)
	movb   $0x1,0x150(%r15,%rax,1)
	movb   $0x5,0x160(%r15,%rax,1)
	add    $0x1,%r14d
	cmp    $0xf,%r14d
	jle    234c4 <get_soi+0x54>
	movl   $0x0,0x170(%r15)
	movl   $0x0,0x3c(%r15)
	movl   $0x0,0x188(%r15)
	movl   $0x0,0x174(%r15)
	movb   $0x1,0x178(%r15)
	movb   $0x1,0x179(%r15)
	movb   $0x0,0x17a(%r15)
	movw   $0x1,0x17c(%r15)
	movw   $0x1,0x17e(%r15)
	movl   $0x0,0x180(%r15)
	movb   $0x0,0x184(%r15)
	mov    0x248(%r15),%rax
	movl   $0x1,0x18(%rax)
	mov    -0x8(%rbp),%r14
	mov    $0x1,%eax
	mov    -0x10(%rbp),%r15
	leaveq 
	retq   
	data16 nopw %cs:0x0(%rax,%rax,1)
	nopl   0x0(%rax)

0023580 <get_sof>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %r15,-0x18(%rbp)
	mov    %rdi,-0x30(%rbp)
	mov    0x28(%rdi),%r15
	mov    (%r15),%rcx
	mov    0x8(%r15),%r8
	mov    %esi,0x138(%rdi)
	mov    %edx,0x13c(%rdi)
	test   %r8,%r8
	je     23773 <get_sof+0x1f3>
	movzbl (%rcx),%eax
	mov    %rax,-0x28(%rbp)
	lea    -0x1(%r8),%rsi
	test   %rsi,%rsi
	je     23787 <get_sof+0x207>
	lea    0x1(%rcx),%rdx
	movzbl (%rdx),%ecx
	mov    %rcx,-0x20(%rbp)
	add    $0xffffffffffffffff,%rsi
	test   %rsi,%rsi
	je     2379b <get_sof+0x21b>
	add    $0x1,%rdx
	movzbl (%rdx),%r8d
	mov    %r8d,0x128(%rdi)
	lea    -0x1(%rsi),%r8
	test   %r8,%r8
	je     237af <get_sof+0x22f>
	lea    0x1(%rdx),%rsi
	movzbl (%rsi),%edx
	shl    $0x8,%edx
	mov    %edx,0x34(%rdi)
	add    $0xffffffffffffffff,%r8
	test   %r8,%r8
	je     237c3 <get_sof+0x243>
	add    $0x1,%rsi
	movzbl (%rsi),%edx
	add    0x34(%rdi),%edx
	mov    %edx,0x34(%rdi)
	add    $0xffffffffffffffff,%r8
	test   %r8,%r8
	je     237d7 <get_sof+0x257>
	add    $0x1,%rsi
	movzbl (%rsi),%edx
	shl    $0x8,%edx
	mov    %edx,0x30(%rdi)
	add    $0xffffffffffffffff,%r8
	test   %r8,%r8
	je     237eb <get_sof+0x26b>
	add    $0x1,%rsi
	movzbl (%rsi),%edx
	add    0x30(%rdi),%edx
	mov    %edx,0x30(%rdi)
	add    $0xffffffffffffffff,%r8
	test   %r8,%r8
	je     237ff <get_sof+0x27f>
	lea    0x1(%rsi),%r9
	movzbl (%r9),%edx
	mov    %edx,0x38(%rdi)
	movslq 0x21c(%rdi),%rdx
	mov    (%rdi),%rsi
	mov    %edx,0x2c(%rsi)
	movslq 0x30(%rdi),%rdx
	mov    %edx,0x30(%rsi)
	movslq 0x34(%rdi),%rdx
	mov    %edx,0x34(%rsi)
	movslq 0x38(%rdi),%rdx
	mov    %edx,0x38(%rsi)
	mov    (%rdi),%rdx
	movl   $0x64,0x28(%rdx)
	mov    $0x1,%esi
	mov    (%rdi),%rdx
	mov    0x8(%rdx),%rdx
	mov    %rdi,%r10
	mov    %r14,-0x28(%rbp)
	mov    %r15,-0x30(%rbp)
	mov    %rbx,-0x8(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    %r13,-0x20(%rbp)
	mov    %rax,%rbx
	mov    %rdi,%r12
	mov    %r10,%rdi
	mov    %r8,%r13
	mov    %rcx,%r14
	mov    %r9,%r15
	callq  *%rdx
	mov    0x248(%r12),%rax
	movslq 0x1c(%rax),%rax
	test   %eax,%eax
	je     236f5 <get_sof+0x175>
	mov    (%r12),%rax
	movl   $0x3a,0x28(%rax)
	mov    (%r12),%rax
	mov    (%rax),%rax
	mov    %r12,%rdi
	callq  *%rax
	mov    0x34(%r12),%eax
	test   %eax,%eax
	je     23710 <get_sof+0x190>
	mov    0x30(%r12),%eax
	test   %eax,%eax
	je     23710 <get_sof+0x190>
	movslq 0x38(%r12),%rax
	test   %eax,%eax
	jg     23727 <get_sof+0x1a7>
	mov    (%r12),%rax
	movl   $0x20,0x28(%rax)
	mov    (%r12),%rax
	mov    (%rax),%rax
	mov    %r12,%rdi
	callq  *%rax
	shl    $0x8,%ebx
	mov    %ebx,%eax
	lea    -0x8(%r14,%rax,1),%rax
	movslq 0x38(%r12),%rcx
	lea    (%rcx,%rcx,2),%ecx
	movslq %ecx,%rcx
	cmp    %rax,%rcx
	je     23758 <get_sof+0x1d8>
	mov    (%r12),%rax
	movl   $0xb,0x28(%rax)
	mov    (%r12),%rax
	mov    (%rax),%rax
	mov    %r12,%rdi
	callq  *%rax
	mov    0x130(%r12),%rax
	test   %rax,%rax
	je     23813 <get_sof+0x293>
	mov    $0x1,%ebx
	jmpq   2383d <get_sof+0x2bd>
	callq  *0x18(%r15)
	test   %eax,%eax
	jne    23859 <get_sof+0x2d9>
	xor    %eax,%eax
	mov    -0x18(%rbp),%r15
	leaveq 
	retq   
	callq  *0x18(%r15)
	test   %eax,%eax
	jne    23869 <get_sof+0x2e9>
	xor    %eax,%eax
	mov    -0x18(%rbp),%r15
	leaveq 
	retq   
	callq  *0x18(%r15)
	test   %eax,%eax
	jne    2387d <get_sof+0x2fd>
	xor    %eax,%eax
	mov    -0x18(%rbp),%r15
	leaveq 
	retq   
	callq  *0x18(%r15)
	test   %eax,%eax
	jne    23895 <get_sof+0x315>
	xor    %eax,%eax
	mov    -0x18(%rbp),%r15
	leaveq 
	retq   
	callq  *0x18(%r15)
	test   %eax,%eax
	jne    238ad <get_sof+0x32d>
	xor    %eax,%eax
	mov    -0x18(%rbp),%r15
	leaveq 
	retq   
	callq  *0x18(%r15)
	test   %eax,%eax
	jne    238c5 <get_sof+0x345>
	xor    %eax,%eax
	mov    -0x18(%rbp),%r15
	leaveq 
	retq   
	callq  *0x18(%r15)
	test   %eax,%eax
	jne    238dd <get_sof+0x35d>
	xor    %eax,%eax
	mov    -0x18(%rbp),%r15
	leaveq 
	retq   
	callq  *0x18(%r15)
	test   %eax,%eax
	jne    238f5 <get_sof+0x375>
	xor    %eax,%eax
	mov    -0x18(%rbp),%r15
	leaveq 
	retq   
	mov    0x8(%r12),%rax
	mov    (%rax),%rax
	movslq 0x38(%r12),%rcx
	lea    (%rcx,%rcx,2),%rdx
	shl    $0x5,%rdx
	mov    %r12,%rdi
	mov    $0x1,%ebx
	mov    %rbx,%rsi
	callq  *%rax
	mov    %rax,0x130(%r12)
	mov    0x130(%r12),%r14
	lea    0x1(%r15),%rcx
	lea    -0x1(%r13),%rax
	mov    -0x30(%rbp),%r15
	xor    %r13d,%r13d
	jmpq   239b6 <get_sof+0x436>
	mov    (%r15),%rcx
	mov    0x8(%r15),%r8
	mov    -0x30(%rbp),%rdi
	jmpq   235b0 <get_sof+0x30>
	mov    (%r15),%rdx
	mov    0x8(%r15),%rsi
	mov    -0x28(%rbp),%rax
	mov    -0x30(%rbp),%rdi
	jmpq   235c8 <get_sof+0x48>
	mov    (%r15),%rdx
	mov    0x8(%r15),%rsi
	mov    -0x20(%rbp),%rcx
	mov    -0x28(%rbp),%rax
	mov    -0x30(%rbp),%rdi
	jmpq   235e0 <get_sof+0x60>
	mov    (%r15),%rsi
	mov    0x8(%r15),%r8
	mov    -0x20(%rbp),%rcx
	mov    -0x28(%rbp),%rax
	mov    -0x30(%rbp),%rdi
	jmpq   235fc <get_sof+0x7c>
	mov    (%r15),%rsi
	mov    0x8(%r15),%r8
	mov    -0x20(%rbp),%rcx
	mov    -0x28(%rbp),%rax
	mov    -0x30(%rbp),%rdi
	jmpq   23616 <get_sof+0x96>
	mov    (%r15),%rsi
	mov    0x8(%r15),%r8
	mov    -0x20(%rbp),%rcx
	mov    -0x28(%rbp),%rax
	mov    -0x30(%rbp),%rdi
	jmpq   23630 <get_sof+0xb0>
	mov    (%r15),%rsi
	mov    0x8(%r15),%r8
	mov    -0x20(%rbp),%rcx
	mov    -0x28(%rbp),%rax
	mov    -0x30(%rbp),%rdi
	jmpq   2364a <get_sof+0xca>
	mov    (%r15),%r9
	mov    0x8(%r15),%r8
	mov    -0x20(%rbp),%rcx
	mov    -0x28(%rbp),%rax
	mov    -0x30(%rbp),%rdi
	jmpq   23664 <get_sof+0xe4>
	mov    %r13d,0x4(%r14)
	test   %rax,%rax
	je     239f0 <get_sof+0x470>
	movzbl (%rcx),%edx
	mov    %edx,(%r14)
	lea    -0x1(%rax),%rdx
	test   %rdx,%rdx
	je     23a07 <get_sof+0x487>
	add    $0x1,%rcx
	movzbl (%rcx),%eax
	mov    %rax,%rsi
	shr    $0x4,%esi
	mov    %esi,0x8(%r14)
	and    $0xf,%eax
	mov    %eax,0xc(%r14)
	add    $0xffffffffffffffff,%rdx
	test   %rdx,%rdx
	je     23a1e <get_sof+0x49e>
	lea    0x1(%rcx),%rax
	mov    %rdx,%r15
	movzbl (%rax),%ecx
	mov    %ecx,0x10(%r14)
	movslq (%r14),%rcx
	mov    (%r12),%rdx
	mov    %ecx,0x2c(%rdx)
	movslq 0x8(%r14),%rcx
	mov    %ecx,0x30(%rdx)
	movslq 0xc(%r14),%rcx
	mov    %ecx,0x34(%rdx)
	movslq 0x10(%r14),%rcx
	mov    %ecx,0x38(%rdx)
	mov    (%r12),%rcx
	movl   $0x65,0x28(%rcx)
	mov    (%r12),%rcx
	mov    0x8(%rcx),%rcx
	mov    %rbx,%rsi
	mov    %rax,%rbx
	mov    %r12,%rdi
	callq  *%rcx
	add    $0x1,%r13d
	add    $0x60,%r14
	lea    0x1(%rbx),%rcx
	lea    -0x1(%r15),%rax
	mov    $0x1,%ebx
	mov    -0x30(%rbp),%r15
	cmp    0x38(%r12),%r13d
	jl     2390d <get_sof+0x38d>
	mov    0x248(%r12),%rdx
	movl   $0x1,0x1c(%rdx)
	mov    %rcx,(%r15)
	mov    %rax,0x8(%r15)
	mov    %rbx,%rax
	mov    -0x20(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	mov    -0x28(%rbp),%r14
	mov    -0x18(%rbp),%r15
	leaveq 
	retq   
	mov    %r12,%rdi
	callq  *0x18(%r15)
	test   %eax,%eax
	je     23a35 <get_sof+0x4b5>
	mov    (%r15),%rcx
	mov    0x8(%r15),%rax
	jmpq   2391a <get_sof+0x39a>
	mov    %r12,%rdi
	callq  *0x18(%r15)
	test   %eax,%eax
	je     23a4d <get_sof+0x4cd>
	mov    (%r15),%rcx
	mov    0x8(%r15),%rdx
	jmpq   23931 <get_sof+0x3b1>
	mov    %r12,%rdi
	callq  *0x18(%r15)
	test   %eax,%eax
	je     23a65 <get_sof+0x4e5>
	mov    (%r15),%rax
	mov    0x8(%r15),%r15
	jmpq   23959 <get_sof+0x3d9>
	mov    -0x20(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	mov    -0x28(%rbp),%r14
	xor    %eax,%eax
	mov    -0x18(%rbp),%r15
	leaveq 
	retq   
	mov    -0x20(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	mov    -0x28(%rbp),%r14
	xor    %eax,%eax
	mov    -0x18(%rbp),%r15
	leaveq 
	retq   
	mov    -0x20(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	mov    -0x28(%rbp),%r14
	xor    %eax,%eax
	mov    -0x18(%rbp),%r15
	leaveq 
	retq   
	nopl   (%rax)

0023a80 <get_sos>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x50,%rsp
	mov    %r15,-0x28(%rbp)
	mov    %rdi,-0x50(%rbp)
	mov    0x28(%rdi),%rax
	mov    0x8(%rax),%rdx
	mov    (%rax),%rsi
	mov    0x248(%rdi),%rcx
	movslq 0x1c(%rcx),%rcx
	test   %ecx,%ecx
	je     23ab8 <get_sos+0x38>
	mov    %r13,%rcx
	mov    %r12,%r13
	mov    %rbx,%r12
	mov    %rdi,%rbx
	jmp    23b00 <get_sos+0x80>
	mov    (%rdi),%rcx
	movl   $0x3e,0x28(%rcx)
	mov    (%rdi),%rcx
	mov    (%rcx),%rcx
	mov    %rdi,%r8
	mov    %r12,-0x10(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %rbx,%r12
	mov    %rdi,%rbx
	mov    %r8,%rdi
	mov    %rax,%r13
	mov    %rsi,%r14
	mov    %rdx,%r15
	callq  *%rcx
	mov    %r13,%rax
	mov    %r15,%rdx
	mov    %r14,%rsi
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%rcx
	mov    -0x10(%rbp),%r13
	xor    %r15d,%r15d
	test   %rdx,%rdx
	je     23bd5 <get_sos+0x155>
	movzbl (%rsi),%r8d
	lea    -0x1(%rdx),%rdi
	test   %rdi,%rdi
	je     23bfe <get_sos+0x17e>
	add    $0x1,%rsi
	movzbl (%rsi),%edx
	add    $0xffffffffffffffff,%rdi
	test   %rdi,%rdi
	je     23c2b <get_sos+0x1ab>
	add    $0x1,%rsi
	mov    %rdi,-0x30(%rbp)
	mov    %rsi,-0x38(%rbp)
	mov    (%rbx),%rdi
	movzbl (%rsi),%r10d
	mov    %r10,-0x50(%rbp)
	movl   $0x67,0x28(%rdi)
	mov    (%rbx),%rsi
	mov    %r10d,0x2c(%rsi)
	mov    $0x1,%esi
	mov    (%rbx),%rdi
	mov    0x8(%rdi),%r9
	mov    %r14,-0x20(%rbp)
	mov    %rbx,%rdi
	mov    %r13,-0x10(%rbp)
	mov    %rcx,-0x18(%rbp)
	mov    %rax,-0x40(%rbp)
	mov    %r12,-0x8(%rbp)
	mov    %r8,%r12
	mov    %rdx,%r13
	mov    %r10,%r14
	callq  *%r9
	shl    $0x8,%r12d
	mov    %r12d,%eax
	lea    0x0(%r13,%rax,1),%rcx
	lea    0x6(%r14,%r14,1),%eax
	movslq %eax,%rax
	cmp    %rcx,%rax
	jne    23ba9 <get_sos+0x129>
	test   %r14b,%r14b
	je     23ba9 <get_sos+0x129>
	cmp    $0x4,%r14b
	jbe    23bbe <get_sos+0x13e>
	mov    (%rbx),%rax
	movl   $0xb,0x28(%rax)
	mov    (%rbx),%rax
	mov    (%rax),%rax
	mov    %rbx,%rdi
	callq  *%rax
	mov    %r14d,0x1b0(%rbx)
	mov    -0x38(%rbp),%rsi
	mov    -0x30(%rbp),%rdx
	mov    %r15,%rax
	jmpq   23c6a <get_sos+0x1ea>
	mov    %rbx,%rdi
	mov    %rcx,%rbx
	mov    %rax,%r15
	callq  *0x18(%r15)
	test   %eax,%eax
	jne    23c83 <get_sos+0x203>
	mov    %r12,%rcx
	mov    %r13,%r12
	mov    %rbx,%r13
	mov    %rcx,%rbx
	xor    %eax,%eax
	mov    -0x28(%rbp),%r15
	leaveq 
	retq   
	mov    %r8,-0x48(%rbp)
	mov    %rbx,%rdi
	mov    %rcx,%rbx
	mov    %rax,%r15
	callq  *0x18(%r15)
	test   %eax,%eax
	jne    23c9c <get_sos+0x21c>
	mov    %r12,%rcx
	mov    %r13,%r12
	mov    %rbx,%r13
	mov    %rcx,%rbx
	xor    %eax,%eax
	mov    -0x28(%rbp),%r15
	leaveq 
	retq   
	mov    %r8,-0x48(%rbp)
	mov    %rdx,-0x40(%rbp)
	mov    %rbx,%rdi
	mov    %rcx,%rbx
	mov    %rax,%r15
	callq  *0x18(%r15)
	test   %eax,%eax
	jne    23cb9 <get_sos+0x239>
	mov    %r12,%rcx
	mov    %r13,%r12
	mov    %rbx,%r13
	mov    %rcx,%rbx
	xor    %eax,%eax
	mov    -0x28(%rbp),%r15
	leaveq 
	retq   
	movslq %eax,%rcx
	movq   $0x0,0x1b8(%rbx,%rcx,8)
	add    $0x1,%eax
	cmp    $0x3,%eax
	jle    23c58 <get_sos+0x1d8>
	lea    -0x1(%rdx),%rax
	lea    0x1(%rsi),%rcx
	mov    -0x40(%rbp),%r12
	mov    %r15,%r13
	jmpq   23d2e <get_sos+0x2ae>
	mov    %r15,%rax
	mov    %rbx,%rcx
	mov    (%rax),%rsi
	mov    0x8(%rax),%rdx
	xor    %r15d,%r15d
	mov    -0x50(%rbp),%rbx
	jmpq   23b0c <get_sos+0x8c>
	mov    %r15,%rax
	mov    %rbx,%rcx
	mov    (%rax),%rsi
	mov    0x8(%rax),%rdi
	mov    -0x48(%rbp),%r8
	xor    %r15d,%r15d
	mov    -0x50(%rbp),%rbx
	jmpq   23b21 <get_sos+0xa1>
	mov    %r15,%rax
	mov    %rbx,%rcx
	mov    (%rax),%rsi
	mov    0x8(%rax),%rdi
	mov    -0x40(%rbp),%rdx
	mov    -0x48(%rbp),%r8
	xor    %r15d,%r15d
	mov    -0x50(%rbp),%rbx
	jmpq   23b35 <get_sos+0xb5>
	movslq %r15d,%rax
	mov    0x1b8(%rbx,%rax,8),%rax
	cmp    %r12,%rax
	jne    23d06 <get_sos+0x286>
	mov    (%rbx),%rax
	movl   $0x5,0x28(%rax)
	mov    (%rbx),%rax
	mov    %r14d,0x2c(%rax)
	mov    (%rbx),%rax
	mov    (%rax),%rax
	mov    %rbx,%rdi
	callq  *%rax
	add    $0x1,%r15d
	cmp    %r13d,%r15d
	jl     23cda <get_sos+0x25a>
	mov    -0x30(%rbp),%rax
	add    $0xffffffffffffffff,%rax
	mov    -0x38(%rbp),%rcx
	add    $0x1,%rcx
	add    $0x1,%r13d
	mov    -0x50(%rbp),%r14
	mov    -0x40(%rbp),%r12
	xor    %r15d,%r15d
	cmp    %r14d,%r13d
	jl     23d5d <get_sos+0x2dd>
	test   %rax,%rax
	jne    23db3 <get_sos+0x333>
	mov    %rbx,%rdi
	callq  *0x18(%r12)
	test   %eax,%eax
	jne    23daa <get_sos+0x32a>
	mov    %r15,%rax
	mov    -0x8(%rbp),%rbx
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	leaveq 
	retq   
	test   %rax,%rax
	jne    23d7b <get_sos+0x2fb>
	mov    %rbx,%rdi
	callq  *0x18(%r12)
	test   %eax,%eax
	je     23e95 <get_sos+0x415>
	mov    (%r12),%rcx
	mov    0x8(%r12),%rax
	movzbl (%rcx),%r14d
	add    $0xffffffffffffffff,%rax
	test   %rax,%rax
	je     23eae <get_sos+0x42e>
	add    $0x1,%rcx
	mov    %rax,-0x30(%rbp)
	mov    %rcx,-0x38(%rbp)
	movzbl (%rcx),%ecx
	mov    0x130(%rbx),%r12
	mov    %r15,%rax
	jmpq   23eee <get_sos+0x46e>
	mov    (%r12),%rcx
	mov    0x8(%r12),%rax
	movzbl (%rcx),%edx
	mov    %edx,0x20c(%rbx)
	lea    -0x1(%rax),%rdx
	test   %rdx,%rdx
	je     23f6d <get_sos+0x4ed>
	lea    0x1(%rcx),%rax
	movzbl (%rax),%ecx
	mov    %ecx,0x210(%rbx)
	lea    -0x1(%rdx),%rcx
	test   %rcx,%rcx
	je     23f92 <get_sos+0x512>
	lea    0x1(%rax),%r14
	mov    %rcx,%r15
	movzbl (%r14),%eax
	mov    %rax,%rcx
	shr    $0x4,%ecx
	mov    %ecx,0x214(%rbx)
	and    $0xf,%eax
	mov    %eax,0x218(%rbx)
	movslq 0x20c(%rbx),%rax
	mov    (%rbx),%rcx
	mov    %eax,0x2c(%rcx)
	movslq 0x210(%rbx),%rax
	mov    %eax,0x30(%rcx)
	movslq 0x214(%rbx),%rax
	mov    %eax,0x34(%rcx)
	movslq 0x218(%rbx),%rax
	mov    %eax,0x38(%rcx)
	mov    (%rbx),%rax
	movl   $0x69,0x28(%rax)
	mov    (%rbx),%rax
	mov    0x8(%rax),%rax
	mov    %rbx,%rdi
	mov    $0x1,%r13d
	mov    %r13,%rsi
	callq  *%rax
	mov    0x248(%rbx),%rax
	movl   $0x0,0x20(%rax)
	movslq 0xac(%rbx),%rax
	add    $0x1,%eax
	mov    %eax,0xac(%rbx)
	lea    0x1(%r14),%rax
	mov    %rax,(%r12)
	lea    -0x1(%r15),%rax
	mov    %rax,0x8(%r12)
	mov    %r13,%rax
	mov    -0x8(%rbp),%rbx
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	leaveq 
	retq   
	mov    %r15,%rax
	mov    -0x8(%rbp),%rbx
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	leaveq 
	retq   
	mov    %rbx,%rdi
	callq  *0x18(%r12)
	test   %eax,%eax
	je     23fb7 <get_sos+0x537>
	mov    (%r12),%rcx
	mov    0x8(%r12),%rax
	jmpq   23d90 <get_sos+0x310>
	cmp    $0x3,%eax
	jg     23ef3 <get_sos+0x473>
	cmp    (%r12),%r14d
	jne    23ee7 <get_sos+0x467>
	movslq %eax,%rdx
	mov    0x1b8(%rbx,%rdx,8),%rdx
	test   %rdx,%rdx
	je     23f18 <get_sos+0x498>
	add    $0x60,%r12
	add    $0x1,%eax
	cmp    0x38(%rbx),%eax
	jl     23ecc <get_sos+0x44c>
	mov    (%rbx),%rax
	movl   $0x5,0x28(%rax)
	mov    (%rbx),%rax
	mov    %r14d,0x2c(%rax)
	mov    (%rbx),%rax
	mov    (%rax),%rax
	mov    %rcx,%r15
	mov    %rbx,%rdi
	callq  *%rax
	mov    %r15,%rcx
	xor    %r15d,%r15d
	movslq %r13d,%rax
	mov    %r12,0x1b8(%rbx,%rax,8)
	mov    %rcx,%rax
	shr    $0x4,%eax
	mov    %eax,0x14(%r12)
	and    $0xf,%ecx
	mov    %ecx,0x18(%r12)
	mov    (%rbx),%rcx
	mov    %r14d,0x2c(%rcx)
	movslq 0x14(%r12),%rax
	mov    %eax,0x30(%rcx)
	movslq 0x18(%r12),%rax
	mov    %eax,0x34(%rcx)
	mov    (%rbx),%rax
	movl   $0x68,0x28(%rax)
	mov    (%rbx),%rax
	mov    0x8(%rax),%rax
	mov    %rbx,%rdi
	mov    $0x1,%esi
	callq  *%rax
	jmpq   23d0a <get_sos+0x28a>
	mov    %rbx,%rdi
	callq  *0x18(%r12)
	test   %eax,%eax
	jne    23fd0 <get_sos+0x550>
	mov    %r15,%rax
	mov    -0x8(%rbp),%rbx
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	leaveq 
	retq   
	mov    %rbx,%rdi
	callq  *0x18(%r12)
	test   %eax,%eax
	jne    23fde <get_sos+0x55e>
	mov    %r15,%rax
	mov    -0x8(%rbp),%rbx
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	leaveq 
	retq   
	mov    %r15,%rax
	mov    -0x8(%rbp),%rbx
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	leaveq 
	retq   
	mov    (%r12),%rax
	mov    0x8(%r12),%rdx
	jmpq   23dcd <get_sos+0x34d>
	mov    (%r12),%r14
	mov    0x8(%r12),%r15
	jmpq   23dea <get_sos+0x36a>
	nopl   0x0(%rax)

0023ff0 <get_dac>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x40,%rsp
	mov    %r15,-0x20(%rbp)
	mov    0x28(%rdi),%rdx
	mov    %rdx,-0x30(%rbp)
	mov    (%rdx),%rcx
	mov    0x8(%rdx),%rax
	test   %rax,%rax
	je     24065 <get_dac+0x75>
	mov    %r13,%r15
	mov    %rbx,%r13
	mov    %rdi,%rbx
	mov    %r14,%rdi
	mov    %rdx,%r14
	mov    %rdi,%rdx
	movzbl (%rcx),%esi
	add    $0xffffffffffffffff,%rax
	test   %rax,%rax
	je     24098 <get_dac+0xa8>
	lea    0x1(%rcx),%rdi
	mov    %r15,%r8
	mov    %r12,%r9
	mov    $0x1,%r12d
	lea    0x1(%rdi),%rcx
	add    $0xffffffffffffffff,%rax
	movzbl (%rdi),%edi
	shl    $0x8,%esi
	mov    %esi,%esi
	lea    -0x2(%rdi,%rsi,1),%r15
	mov    %r13,-0x8(%rbp)
	mov    %r9,-0x10(%rbp)
	mov    %r8,-0x18(%rbp)
	mov    %rdx,-0x28(%rbp)
	jmp    240e0 <get_dac+0xf0>
	mov    %rdi,%rax
	mov    %rdi,-0x38(%rbp)
	mov    %rax,%rdi
	mov    %r13,%r15
	mov    %rbx,%r13
	mov    %r14,%rbx
	mov    %rdx,%r14
	callq  *0x18(%r14)
	test   %eax,%eax
	jne    2412b <get_dac+0x13b>
	mov    %rbx,%r14
	mov    %r13,%rbx
	mov    %r15,%r13
	xor    %eax,%eax
	mov    -0x20(%rbp),%r15
	leaveq 
	retq   
	mov    %rbx,%rdi
	mov    %rbx,-0x28(%rbp)
	mov    %rsi,-0x38(%rbp)
	mov    %rdx,%rbx
	callq  *0x18(%r14)
	test   %eax,%eax
	jne    2413e <get_dac+0x14e>
	mov    %rbx,%r14
	mov    %r13,%rbx
	mov    %r15,%r13
	xor    %eax,%eax
	mov    -0x20(%rbp),%r15
	leaveq 
	retq   
	lea    -0x10(%r13),%edx
	movslq %edx,%rdx
	mov    -0x38(%rbp),%rsi
	mov    %sil,0x160(%rbx,%rdx,1)
	mov    $0x1,%r12d
	mov    -0x30(%rbp),%r14
	test   %r15,%r15
	jg     2415b <get_dac+0x16b>
	test   %r15,%r15
	jns    2410b <get_dac+0x11b>
	mov    (%rbx),%rdx
	movl   $0xb,0x28(%rdx)
	mov    (%rbx),%rdx
	mov    (%rdx),%rdx
	mov    %rbx,%rdi
	mov    %rax,%rbx
	mov    %rcx,%r13
	callq  *%rdx
	mov    %rbx,%rax
	mov    %r13,%rcx
	mov    %rcx,(%r14)
	mov    %rax,0x8(%r14)
	mov    %r12,%rax
	mov    -0x28(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	mov    -0x20(%rbp),%r15
	leaveq 
	retq   
	mov    (%r14),%rcx
	mov    0x8(%r14),%rax
	mov    %rbx,%rdx
	mov    -0x38(%rbp),%rbx
	jmpq   24022 <get_dac+0x32>
	mov    (%r14),%rdi
	mov    0x8(%r14),%rax
	mov    %rbx,%rdx
	mov    %r15,%r8
	mov    %r12,%r9
	mov    -0x38(%rbp),%rsi
	mov    -0x28(%rbp),%rbx
	jmpq   24038 <get_dac+0x48>
	test   %rax,%rax
	je     24218 <get_dac+0x228>
	movzbl (%rcx),%r13d
	lea    -0x1(%rax),%rdx
	test   %rdx,%rdx
	je     2422f <get_dac+0x23f>
	lea    0x1(%rcx),%r14
	mov    (%rbx),%rax
	movzbl (%r14),%ecx
	mov    %rcx,-0x38(%rbp)
	movl   $0x4f,0x28(%rax)
	mov    (%rbx),%rax
	mov    %r13d,0x2c(%rax)
	mov    (%rbx),%rax
	mov    %ecx,0x30(%rax)
	mov    (%rbx),%rax
	mov    0x8(%rax),%rax
	mov    %r12,%rsi
	mov    %rdx,%r12
	mov    %rbx,%rdi
	callq  *%rax
	cmp    $0x1f,%r13b
	jbe    241cc <get_dac+0x1dc>
	mov    (%rbx),%rax
	movl   $0x1c,0x28(%rax)
	mov    (%rbx),%rax
	mov    %r13d,0x2c(%rax)
	mov    (%rbx),%rax
	mov    (%rax),%rax
	mov    %rbx,%rdi
	callq  *%rax
	lea    0x1(%r14),%rcx
	lea    -0x1(%r12),%rax
	add    $0xfffffffffffffffe,%r15
	cmp    $0xf,%r13b
	ja     240c3 <get_dac+0xd3>
	mov    -0x38(%rbp),%rdi
	mov    %rdi,%rsi
	and    $0xf,%sil
	mov    %sil,0x140(%r13,%rbx,1)
	mov    %rdi,%rdx
	shr    $0x4,%edx
	mov    %dl,0x150(%rbx,%r13,1)
	cmp    %sil,%dl
	jb     24249 <get_dac+0x259>
	mov    $0x1,%r12d
	mov    -0x30(%rbp),%r14
	jmpq   240e0 <get_dac+0xf0>
	mov    %rbx,%rdi
	callq  *0x18(%r14)
	test   %eax,%eax
	je     2427f <get_dac+0x28f>
	mov    (%r14),%rcx
	mov    0x8(%r14),%rax
	jmpq   24164 <get_dac+0x174>
	mov    %rbx,%rdi
	callq  *0x18(%r14)
	test   %eax,%eax
	je     24297 <get_dac+0x2a7>
	mov    (%r14),%rax
	mov    0x8(%r14),%rdx
	mov    %rax,%r14
	jmpq   24179 <get_dac+0x189>
	mov    (%rbx),%rdx
	movl   $0x1d,0x28(%rdx)
	mov    (%rbx),%rdx
	mov    %edi,0x2c(%rdx)
	mov    (%rbx),%rdx
	mov    (%rdx),%rdx
	mov    %rax,%r13
	mov    %rcx,%r14
	mov    %rbx,%rdi
	callq  *%rdx
	mov    %r13,%rax
	mov    %r14,%rcx
	mov    $0x1,%r12d
	mov    -0x30(%rbp),%r14
	jmpq   240e0 <get_dac+0xf0>
	mov    -0x28(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	xor    %eax,%eax
	mov    -0x20(%rbp),%r15
	leaveq 
	retq   
	mov    -0x28(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	xor    %eax,%eax
	mov    -0x20(%rbp),%r15
	leaveq 
	retq   
	nop

00242b0 <get_dht>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x160,%rsp
	mov    %r15,-0x28(%rbp)
	mov    0x28(%rdi),%r15
	mov    %r15,-0x40(%rbp)
	mov    (%r15),%rsi
	xor    %eax,%eax
	mov    0x8(%r15),%r8
	test   %r8,%r8
	je     24327 <get_dht+0x77>
	mov    %r14,%rcx
	mov    %rax,%r14
	mov    %rbx,%rdx
	mov    %rdi,%rbx
	movzbl (%rsi),%eax
	lea    -0x1(%r8),%rdi
	test   %rdi,%rdi
	je     24345 <get_dht+0x95>
	lea    0x1(%rsi),%r8
	mov    %r13,%r9
	mov    %r12,%r10
	mov    $0x1,%esi
	lea    0x1(%r8),%r13
	lea    -0x1(%rdi),%r12
	movzbl (%r8),%edi
	shl    $0x8,%eax
	mov    %eax,%eax
	lea    -0x2(%rdi,%rax,1),%rax
	mov    %rdx,-0x8(%rbp)
	mov    %r10,-0x10(%rbp)
	mov    %r9,-0x18(%rbp)
	mov    %rcx,-0x20(%rbp)
	jmpq   243f0 <get_dht+0x140>
	mov    %rdi,%rax
	mov    %rdi,-0x48(%rbp)
	mov    %rax,%rdi
	callq  *0x18(%r15)
	test   %eax,%eax
	jne    2443a <get_dht+0x18a>
	xor    %eax,%eax
	mov    -0x28(%rbp),%r15
	leaveq 
	retq   
	mov    %rbx,%rdi
	mov    %rbx,-0x48(%rbp)
	mov    %rax,-0x30(%rbp)
	mov    %rdx,%rbx
	mov    %rcx,%r14
	callq  *0x18(%r15)
	test   %eax,%eax
	jne    24453 <get_dht+0x1a3>
	xor    %eax,%eax
	mov    -0x28(%rbp),%r15
	leaveq 
	retq   
	add    $0xfffffff0,%r15d
	test   %r15d,%r15d
	jns    24476 <get_dht+0x1c6>
	mov    (%rbx),%rax
	movl   $0x1e,0x28(%rax)
	mov    (%rbx),%rax
	mov    %r15d,0x2c(%rax)
	mov    (%rbx),%rax
	mov    (%rax),%rax
	mov    %rbx,%rdi
	callq  *%rax
	movslq %r15d,%rax
	lea    0x108(%rbx,%rax,8),%r15
	mov    (%r15),%rax
	test   %rax,%rax
	jne    243b1 <get_dht+0x101>
	mov    %rbx,%rdi
	callq  44a0 <jpeg_alloc_huff_table@plt>
	mov    %rax,(%r15)
	mov    (%r15),%rdi
	lea    -0x159(%rbp),%rsi
	mov    $0x11,%edx
	callq  42c0 <memcpy@plt>
	mov    (%r15),%rdi
	add    $0x11,%rdi
	lea    -0x148(%rbp),%rsi
	mov    $0x100,%edx
	callq  42c0 <memcpy@plt>
	mov    -0x38(%rbp),%rax
	sub    %r14,%rax
	mov    -0x40(%rbp),%r15
	mov    $0x1,%esi
	xor    %r14d,%r14d
	cmp    $0x10,%rax
	jg     24485 <get_dht+0x1d5>
	test   %rax,%rax
	je     2441a <get_dht+0x16a>
	mov    (%rbx),%rax
	movl   $0xb,0x28(%rax)
	mov    (%rbx),%rax
	mov    (%rax),%rax
	mov    %rbx,%rdi
	mov    %rsi,%rbx
	callq  *%rax
	mov    %rbx,%rsi
	mov    %r13,(%r15)
	mov    %r12,0x8(%r15)
	mov    %rsi,%rax
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	mov    -0x28(%rbp),%r15
	leaveq 
	retq   
	mov    (%r15),%rsi
	mov    0x8(%r15),%r8
	mov    %r14,%rcx
	mov    %rbx,%rdx
	xor    %r14d,%r14d
	mov    -0x48(%rbp),%rbx
	jmpq   242e1 <get_dht+0x31>
	mov    (%r15),%r8
	mov    0x8(%r15),%rdi
	mov    %r14,%rcx
	mov    %rbx,%rdx
	mov    %r13,%r9
	mov    %r12,%r10
	mov    -0x30(%rbp),%rax
	xor    %r14d,%r14d
	mov    -0x48(%rbp),%rbx
	jmpq   242f7 <get_dht+0x47>
	cmp    $0x3,%r15d
	jg     24377 <get_dht+0xc7>
	jmpq   24393 <get_dht+0xe3>
	test   %r12,%r12
	jne    244ae <get_dht+0x1fe>
	mov    %rax,%r12
	mov    %rsi,%r13
	mov    %rbx,%rdi
	callq  *0x18(%r15)
	test   %eax,%eax
	je     244f0 <get_dht+0x240>
	mov    (%r15),%rax
	mov    0x8(%r15),%rcx
	mov    %r13,%rsi
	mov    %rax,%r13
	mov    %r12,%rax
	mov    %rcx,%r12
	mov    (%rbx),%rcx
	movzbl 0x0(%r13),%edx
	mov    %rdx,-0x30(%rbp)
	movl   $0x50,0x28(%rcx)
	mov    (%rbx),%rcx
	mov    %edx,0x2c(%rcx)
	mov    (%rbx),%rcx
	mov    0x8(%rcx),%rcx
	mov    %rbx,%rdi
	mov    %rax,-0x38(%rbp)
	callq  *%rcx
	movb   $0x0,-0x159(%rbp)
	add    $0xffffffffffffffff,%r12
	add    $0x1,%r13
	mov    $0x1,%ecx
	mov    %r14,%rax
	jmp    24530 <get_dht+0x280>
	mov    %r14,%rax
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	mov    -0x28(%rbp),%r15
	leaveq 
	retq   
	test   %r12,%r12
	je     24636 <get_dht+0x386>
	movzbl 0x0(%r13),%esi
	movslq %ecx,%rdx
	mov    %sil,-0x159(%rbp,%rdx,1)
	add    $0xffffffffffffffff,%r12
	add    $0x1,%ecx
	add    %esi,%r14d
	add    $0x1,%r13
	cmp    $0x10,%ecx
	jle    24509 <get_dht+0x259>
	movzbl -0x158(%rbp),%eax
	mov    (%rbx),%rcx
	mov    %eax,0x2c(%rcx)
	movzbl -0x157(%rbp),%eax
	mov    %eax,0x30(%rcx)
	movzbl -0x156(%rbp),%eax
	mov    %eax,0x34(%rcx)
	movzbl -0x155(%rbp),%eax
	mov    %eax,0x38(%rcx)
	movzbl -0x154(%rbp),%eax
	mov    %eax,0x3c(%rcx)
	movzbl -0x153(%rbp),%eax
	mov    %eax,0x40(%rcx)
	movzbl -0x152(%rbp),%eax
	mov    %eax,0x44(%rcx)
	movzbl -0x151(%rbp),%eax
	mov    %eax,0x48(%rcx)
	mov    (%rbx),%rax
	movl   $0x56,0x28(%rax)
	mov    (%rbx),%rax
	mov    0x8(%rax),%rax
	mov    %rbx,%rdi
	mov    $0x2,%esi
	callq  *%rax
	movzbl -0x150(%rbp),%eax
	mov    (%rbx),%rcx
	mov    %eax,0x2c(%rcx)
	movzbl -0x14f(%rbp),%eax
	mov    %eax,0x30(%rcx)
	movzbl -0x14e(%rbp),%eax
	mov    %eax,0x34(%rcx)
	movzbl -0x14d(%rbp),%eax
	mov    %eax,0x38(%rcx)
	movzbl -0x14c(%rbp),%eax
	mov    %eax,0x3c(%rcx)
	movzbl -0x14b(%rbp),%eax
	mov    %eax,0x40(%rcx)
	movzbl -0x14a(%rbp),%eax
	mov    %eax,0x44(%rcx)
	movzbl -0x149(%rbp),%eax
	mov    %eax,0x48(%rcx)
	mov    (%rbx),%rax
	movl   $0x56,0x28(%rax)
	mov    (%rbx),%rax
	mov    0x8(%rax),%rax
	mov    %rbx,%rdi
	mov    $0x2,%esi
	callq  *%rax
	movslq %r14d,%rcx
	mov    %rcx,-0x48(%rbp)
	mov    -0x38(%rbp),%rax
	add    $0xffffffffffffffef,%rax
	mov    %rax,-0x38(%rbp)
	cmp    $0x100,%r14d
	jg     24666 <get_dht+0x3b6>
	cmp    %rcx,%rax
	jl     24666 <get_dht+0x3b6>
	xor    %eax,%eax
	jmp    246a2 <get_dht+0x3f2>
	mov    %rax,%r12
	mov    %rcx,%r13
	mov    %rbx,%rdi
	callq  *0x18(%r15)
	test   %eax,%eax
	je     24706 <get_dht+0x456>
	mov    (%r15),%rax
	mov    0x8(%r15),%rcx
	mov    %r12,%rdx
	mov    %rcx,%r12
	mov    %r13,%rcx
	mov    %rax,%r13
	mov    %rdx,%rax
	jmpq   24512 <get_dht+0x262>
	mov    (%rbx),%rax
	movl   $0x8,0x28(%rax)
	mov    (%rbx),%rax
	mov    (%rax),%rax
	mov    %rbx,%rdi
	callq  *%rax
	xor    %eax,%eax
	jmp    246a2 <get_dht+0x3f2>
	test   %r12,%r12
	je     2471f <get_dht+0x46f>
	movzbl 0x0(%r13),%edx
	movslq %eax,%rcx
	mov    %dl,-0x148(%rbp,%rcx,1)
	add    $0xffffffffffffffff,%r12
	add    $0x1,%eax
	add    $0x1,%r13
	cmp    %r14d,%eax
	jl     2467f <get_dht+0x3cf>
	mov    $0x100,%eax
	sub    %r14d,%eax
	movslq %eax,%rdx
	mov    -0x48(%rbp),%r14
	lea    -0x148(%rbp,%r14,1),%rdi
	xor    %esi,%esi
	callq  41e0 <memset@plt>
	mov    -0x30(%rbp),%r15
	mov    %r15,%rax
	and    $0x10,%eax
	test   %eax,%eax
	jg     2436a <get_dht+0xba>
	cmp    $0x3,%r15b
	jbe    246f9 <get_dht+0x449>
	mov    (%rbx),%rax
	movl   $0x1e,0x28(%rax)
	mov    (%rbx),%rax
	mov    %r15d,0x2c(%rax)
	mov    (%rbx),%rax
	mov    (%rax),%rax
	mov    %rbx,%rdi
	callq  *%rax
	lea    0xe8(%rbx,%r15,8),%r15
	jmpq   2439e <get_dht+0xee>
	mov    %r12,%rax
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	mov    -0x28(%rbp),%r15
	leaveq 
	retq   
	mov    %rax,%r13
	mov    %rbx,%rdi
	callq  *0x18(%r15)
	test   %eax,%eax
	je     24742 <get_dht+0x492>
	mov    (%r15),%rax
	mov    0x8(%r15),%r12
	mov    %r13,%rcx
	mov    %rax,%r13
	mov    %rcx,%rax
	jmpq   24688 <get_dht+0x3d8>
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	xor    %eax,%eax
	mov    -0x28(%rbp),%r15
	leaveq 
	retq   
	nopw   0x0(%rax,%rax,1)

0024760 <get_dqt>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x60,%rsp
	mov    %r15,-0x28(%rbp)
	mov    %rdi,-0x58(%rbp)
	mov    0x28(%rdi),%r15
	mov    %r15,-0x38(%rbp)
	mov    (%r15),%rcx
	xor    %eax,%eax
	mov    0x8(%r15),%r8
	test   %r8,%r8
	je     247e0 <get_dqt+0x80>
	mov    %r14,%rdx
	mov    %r12,%r14
	mov    %rdi,%r12
	mov    %r13,%rsi
	mov    %rax,%r13
	movzbl (%rcx),%eax
	lea    -0x1(%r8),%rdi
	test   %rdi,%rdi
	je     24806 <get_dqt+0xa6>
	lea    0x1(%rcx),%r9
	mov    %rbx,%r10
	mov    0x49829(%rip),%rcx        # 6dfd8 <jpeg_natural_order@@LIBJPEG_6.2+0x129f4>
	mov    %rcx,-0x30(%rbp)
	mov    $0x1,%ebx
	lea    0x1(%r9),%r8
	lea    -0x1(%rdi),%rcx
	movzbl (%r9),%edi
	shl    $0x8,%eax
	mov    %eax,%eax
	lea    -0x2(%rdi,%rax,1),%rax
	mov    %r10,-0x8(%rbp)
	mov    %r14,-0x10(%rbp)
	mov    %rsi,-0x18(%rbp)
	mov    %rdx,-0x20(%rbp)
	jmp    24842 <get_dqt+0xe2>
	mov    %r14,%rax
	mov    %r12,%r14
	mov    %rax,%r12
	callq  *0x18(%r15)
	test   %eax,%eax
	jne    24897 <get_dqt+0x137>
	mov    %r14,%rcx
	mov    %r12,%r14
	mov    %rcx,%r12
	xor    %eax,%eax
	mov    -0x28(%rbp),%r15
	leaveq 
	retq   
	mov    %rax,-0x60(%rbp)
	mov    %r12,%rdi
	mov    %rdx,%r12
	mov    %rsi,%r13
	callq  *0x18(%r15)
	test   %eax,%eax
	jne    248b0 <get_dqt+0x150>
	mov    %r14,%rcx
	mov    %r12,%r14
	mov    %rcx,%r12
	xor    %eax,%eax
	mov    -0x28(%rbp),%r15
	leaveq 
	retq   
	mov    -0x60(%rbp),%rax
	add    $0xffffffffffffff7f,%rax
	mov    $0x1,%ebx
	xor    %r13d,%r13d
	mov    %rax,-0x60(%rbp)
	test   %rax,%rax
	jg     248d0 <get_dqt+0x170>
	test   %rax,%rax
	jns    24877 <get_dqt+0x117>
	mov    (%r12),%rax
	movl   $0xb,0x28(%rax)
	mov    (%r12),%rax
	mov    (%rax),%rax
	mov    %r12,%rdi
	mov    %rcx,%r12
	mov    %r8,%r13
	callq  *%rax
	mov    %r12,%rcx
	mov    %r13,%r8
	mov    %r8,(%r15)
	mov    %rcx,0x8(%r15)
	mov    %rbx,%rax
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	mov    -0x28(%rbp),%r15
	leaveq 
	retq   
	mov    (%r15),%rcx
	mov    0x8(%r15),%r8
	mov    %r12,%rdx
	mov    %r13,%rsi
	xor    %r13d,%r13d
	mov    -0x58(%rbp),%r12
	jmpq   24795 <get_dqt+0x35>
	mov    (%r15),%r9
	mov    0x8(%r15),%rdi
	mov    %r12,%rdx
	mov    %r13,%rsi
	mov    %rbx,%r10
	mov    -0x60(%rbp),%rax
	xor    %r13d,%r13d
	mov    -0x58(%rbp),%r12
	jmpq   247a8 <get_dqt+0x48>
	test   %rcx,%rcx
	je     24983 <get_dqt+0x223>
	mov    (%r12),%rax
	movzbl (%r8),%r13d
	movl   $0x51,0x28(%rax)
	mov    %r13,%rdx
	and    $0xf,%edx
	mov    (%r12),%rax
	mov    %edx,0x2c(%rax)
	mov    %r13,%rsi
	shr    $0x4,%esi
	mov    (%r12),%rax
	mov    %esi,0x30(%rax)
	mov    (%r12),%rax
	mov    0x8(%rax),%rax
	mov    %rbx,%rsi
	mov    %rdx,%rbx
	mov    %rcx,%r14
	mov    %r8,%r15
	mov    %r12,%rdi
	callq  *%rax
	cmp    $0x3,%ebx
	jle    2493e <get_dqt+0x1de>
	mov    (%r12),%rax
	movl   $0x1f,0x28(%rax)
	mov    (%r12),%rax
	mov    %ebx,0x2c(%rax)
	mov    (%r12),%rax
	mov    (%rax),%rax
	mov    %r12,%rdi
	callq  *%rax
	movslq %ebx,%rbx
	mov    0xc8(%r12,%rbx,8),%rax
	test   %rax,%rax
	jne    2495e <get_dqt+0x1fe>
	mov    %r12,%rdi
	callq  4270 <jpeg_alloc_quant_table@plt>
	mov    %rax,0xc8(%r12,%rbx,8)
	mov    0xc8(%r12,%rbx,8),%rbx
	and    $0xfffffff0,%r13d
	mov    %r13,-0x40(%rbp)
	lea    -0x1(%r14),%rcx
	lea    0x1(%r15),%r8
	mov    -0x30(%rbp),%rax
	mov    -0x38(%rbp),%r15
	xor    %r14d,%r14d
	jmp    249e7 <get_dqt+0x287>
	mov    %r12,%rdi
	callq  *0x18(%r15)
	test   %eax,%eax
	je     24a14 <get_dqt+0x2b4>
	mov    (%r15),%r8
	mov    0x8(%r15),%rcx
	jmpq   248d9 <get_dqt+0x179>
	test   %r13d,%r13d
	jg     24a2d <get_dqt+0x2cd>
	test   %rcx,%rcx
	jne    249c8 <get_dqt+0x268>
	mov    %r12,%rdi
	mov    %rax,%r12
	callq  *0x18(%r15)
	test   %eax,%eax
	je     24a7c <get_dqt+0x31c>
	mov    (%r15),%r8
	mov    0x8(%r15),%rcx
	mov    %r12,%rax
	movzbl (%r8),%edx
	add    $0xffffffffffffffff,%rcx
	add    $0x1,%r8
	movslq %r14d,%rsi
	movslq (%rax,%rsi,4),%rsi
	mov    %dx,(%rbx,%rsi,2)
	add    $0x1,%r14d
	mov    -0x58(%rbp),%r12
	cmp    $0x3f,%r14d
	jle    2499e <get_dqt+0x23e>
	mov    (%r12),%rax
	movslq 0x7c(%rax),%rax
	cmp    $0x1,%eax
	jle    24b39 <get_dqt+0x3d9>
	mov    %rcx,-0x50(%rbp)
	mov    %r8,-0x48(%rbp)
	mov    $0x2,%r13d
	xor    %r14d,%r14d
	jmpq   24b23 <get_dqt+0x3c3>
	mov    %r13,%rax
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	mov    -0x28(%rbp),%r15
	leaveq 
	retq   
	test   %rcx,%rcx
	jne    24a52 <get_dqt+0x2f2>
	mov    %rax,%r13
	mov    %r12,%rdi
	callq  *0x18(%r15)
	test   %eax,%eax
	je     24b57 <get_dqt+0x3f7>
	mov    (%r15),%r8
	mov    0x8(%r15),%rcx
	mov    %r13,%rax
	mov    -0x40(%rbp),%r13
	movzbl (%r8),%edx
	add    $0xffffffffffffffff,%rcx
	test   %rcx,%rcx
	je     24b6f <get_dqt+0x40f>
	lea    0x1(%r8),%rsi
	movzbl (%rsi),%edi
	shl    $0x8,%edx
	add    %edi,%edx
	add    $0xffffffffffffffff,%rcx
	lea    0x1(%rsi),%r8
	jmpq   249d4 <get_dqt+0x274>
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	xor    %eax,%eax
	mov    -0x28(%rbp),%r15
	leaveq 
	retq   
	movslq %r14d,%rax
	movzwl (%rbx,%rax,2),%eax
	mov    (%r12),%rcx
	mov    %eax,0x2c(%rcx)
	lea    0x1(%r14),%eax
	movslq %eax,%rax
	movzwl (%rbx,%rax,2),%eax
	mov    %eax,0x30(%rcx)
	lea    0x2(%r14),%eax
	movslq %eax,%rax
	movzwl (%rbx,%rax,2),%eax
	mov    %eax,0x34(%rcx)
	lea    0x3(%r14),%eax
	movslq %eax,%rax
	movzwl (%rbx,%rax,2),%eax
	mov    %eax,0x38(%rcx)
	lea    0x4(%r14),%eax
	movslq %eax,%rax
	movzwl (%rbx,%rax,2),%eax
	mov    %eax,0x3c(%rcx)
	lea    0x5(%r14),%eax
	movslq %eax,%rax
	movzwl (%rbx,%rax,2),%eax
	mov    %eax,0x40(%rcx)
	lea    0x6(%r14),%eax
	movslq %eax,%rax
	movzwl (%rbx,%rax,2),%eax
	mov    %eax,0x44(%rcx)
	lea    0x7(%r14),%eax
	movslq %eax,%rax
	movzwl (%rbx,%rax,2),%eax
	mov    %eax,0x48(%rcx)
	mov    (%r12),%rax
	movl   $0x5d,0x28(%rax)
	mov    (%r12),%rax
	mov    0x8(%rax),%rax
	mov    %r12,%rdi
	mov    %r13,%rsi
	callq  *%rax
	add    $0x8,%r14d
	cmp    $0x38,%r14d
	jle    24a94 <get_dqt+0x334>
	mov    -0x48(%rbp),%r8
	mov    -0x50(%rbp),%rcx
	mov    -0x40(%rbp),%r13
	test   %r13d,%r13d
	jg     24830 <get_dqt+0xd0>
	mov    -0x60(%rbp),%rax
	add    $0xffffffffffffffbf,%rax
	mov    $0x1,%ebx
	xor    %r13d,%r13d
	jmpq   24842 <get_dqt+0xe2>
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	xor    %eax,%eax
	mov    -0x28(%rbp),%r15
	leaveq 
	retq   
	mov    %r12,%rdi
	mov    %rdx,%r12
	mov    %rax,%r13
	callq  *0x18(%r15)
	test   %eax,%eax
	je     24b96 <get_dqt+0x436>
	mov    (%r15),%rsi
	mov    0x8(%r15),%rcx
	mov    %r13,%rax
	mov    %r12,%rdx
	mov    -0x40(%rbp),%r13
	jmpq   24a67 <get_dqt+0x307>
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	xor    %eax,%eax
	mov    -0x28(%rbp),%r15
	leaveq 
	retq   
	xchg   %ax,%ax

0024bb0 <get_dri>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %r15,-0x20(%rbp)
	mov    %rdi,-0x30(%rbp)
	mov    0x28(%rdi),%r15
	mov    (%r15),%rcx
	mov    0x8(%r15),%rax
	test   %rax,%rax
	je     24cde <get_dri+0x12e>
	movzbl (%rcx),%edx
	add    $0xffffffffffffffff,%rax
	test   %rax,%rax
	je     24cee <get_dri+0x13e>
	add    $0x1,%rcx
	movzbl (%rcx),%esi
	shl    $0x8,%edx
	mov    %edx,%edx
	add    %rsi,%rdx
	cmp    $0x4,%rdx
	je     24c3b <get_dri+0x8b>
	mov    (%rdi),%rdx
	movl   $0xb,0x28(%rdx)
	mov    (%rdi),%rdx
	mov    (%rdx),%rdx
	mov    %rdi,%rsi
	mov    %r12,-0x10(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    %r14,-0x28(%rbp)
	mov    %rax,%r12
	mov    %rcx,%r13
	mov    %rdi,%r14
	mov    %rsi,%rdi
	callq  *%rdx
	mov    %r12,%rax
	mov    %r13,%rcx
	mov    %r14,%rdi
	mov    -0x28(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	lea    -0x1(%rax),%rdx
	test   %rdx,%rdx
	je     24d02 <get_dri+0x152>
	add    $0x1,%rcx
	movzbl (%rcx),%eax
	add    $0xffffffffffffffff,%rdx
	test   %rdx,%rdx
	je     24d12 <get_dri+0x162>
	add    $0x1,%rcx
	mov    (%rdi),%rsi
	movzbl (%rcx),%r8d
	movl   $0x52,0x28(%rsi)
	shl    $0x8,%eax
	lea    (%r8,%rax,1),%r9d
	mov    (%rdi),%rax
	mov    %r9d,0x2c(%rax)
	mov    (%rdi),%rax
	mov    0x8(%rax),%rax
	mov    $0x1,%esi
	mov    %rdi,%r8
	mov    %r12,-0x10(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    %r14,-0x30(%rbp)
	mov    %rbx,-0x8(%rbp)
	mov    %r9,%rbx
	mov    %rdi,%r12
	mov    %r8,%rdi
	mov    %rdx,%r13
	mov    %rcx,%r14
	callq  *%rax
	mov    %ebx,0x170(%r12)
	lea    0x1(%r14),%rax
	mov    %rax,(%r15)
	lea    -0x1(%r13),%rax
	mov    %rax,0x8(%r15)
	mov    $0x1,%eax
	mov    -0x8(%rbp),%rbx
	mov    -0x30(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x20(%rbp),%r15
	leaveq 
	retq   
	callq  *0x18(%r15)
	test   %eax,%eax
	jne    24d26 <get_dri+0x176>
	xor    %eax,%eax
	mov    -0x20(%rbp),%r15
	leaveq 
	retq   
	mov    %rdx,-0x28(%rbp)
	callq  *0x18(%r15)
	test   %eax,%eax
	jne    24d36 <get_dri+0x186>
	xor    %eax,%eax
	mov    -0x20(%rbp),%r15
	leaveq 
	retq   
	callq  *0x18(%r15)
	test   %eax,%eax
	jne    24d4a <get_dri+0x19a>
	xor    %eax,%eax
	mov    -0x20(%rbp),%r15
	leaveq 
	retq   
	mov    %rax,-0x8(%rbp)
	callq  *0x18(%r15)
	test   %eax,%eax
	jne    24d5a <get_dri+0x1aa>
	xor    %eax,%eax
	mov    -0x20(%rbp),%r15
	leaveq 
	retq   
	mov    (%r15),%rcx
	mov    0x8(%r15),%rax
	mov    -0x30(%rbp),%rdi
	jmpq   24bd4 <get_dri+0x24>
	mov    (%r15),%rcx
	mov    0x8(%r15),%rax
	mov    -0x28(%rbp),%rdx
	mov    -0x30(%rbp),%rdi
	jmpq   24be8 <get_dri+0x38>
	mov    (%r15),%rcx
	mov    0x8(%r15),%rdx
	mov    -0x30(%rbp),%rdi
	jmpq   24c4c <get_dri+0x9c>
	mov    (%r15),%rcx
	mov    0x8(%r15),%rdx
	mov    -0x8(%rbp),%rax
	mov    -0x30(%rbp),%rdi
	jmpq   24c60 <get_dri+0xb0>
	xchg   %ax,%ax

0024d70 <examine_app0>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %edx,%eax
	add    %rcx,%rax
	mov    $0x1,%r8d
	cmp    $0xd,%edx
	ja     24daf <examine_app0+0x3f>
	cmp    $0x5,%edx
	ja     24e45 <examine_app0+0xd5>
	mov    (%rdi),%rcx
	movl   $0x4d,0x28(%rcx)
	mov    (%rdi),%rcx
	mov    %eax,0x2c(%rcx)
	mov    (%rdi),%rax
	mov    0x8(%rax),%rax
	mov    %r8,%rsi
	callq  *%rax
	leaveq 
	retq   
	movzbl (%rsi),%ecx
	cmp    $0x4a,%cl
	jne    24d88 <examine_app0+0x18>
	movzbl 0x1(%rsi),%ecx
	cmp    $0x46,%cl
	jne    24d88 <examine_app0+0x18>
	movzbl 0x2(%rsi),%ecx
	cmp    $0x49,%cl
	jne    24d88 <examine_app0+0x18>
	movzbl 0x3(%rsi),%ecx
	cmp    $0x46,%cl
	jne    24d88 <examine_app0+0x18>
	movzbl 0x4(%rsi),%ecx
	test   %cl,%cl
	jne    24d88 <examine_app0+0x18>
	movl   $0x1,0x174(%rdi)
	movzbl 0x5(%rsi),%edx
	mov    %dl,0x178(%rdi)
	movzbl 0x6(%rsi),%ecx
	mov    %cl,0x179(%rdi)
	movzbl 0x7(%rsi),%ecx
	mov    %cl,0x17a(%rdi)
	movzbl 0x9(%rsi),%r9d
	movzbl 0x8(%rsi),%ecx
	shl    $0x8,%ecx
	add    %r9d,%ecx
	mov    %cx,0x17c(%rdi)
	movzbl 0xb(%rsi),%r9d
	movzbl 0xa(%rsi),%ecx
	shl    $0x8,%ecx
	add    %r9d,%ecx
	mov    %cx,0x17e(%rdi)
	cmp    $0x1,%dl
	jne    24ec1 <examine_app0+0x151>
	mov    %r8,%rcx
	mov    %rsi,%r8
	mov    %rcx,%rsi
	jmpq   24f2d <examine_app0+0x1bd>
	movzbl (%rsi),%ecx
	cmp    $0x4a,%cl
	jne    24d91 <examine_app0+0x21>
	movzbl 0x1(%rsi),%ecx
	cmp    $0x46,%cl
	jne    24d91 <examine_app0+0x21>
	movzbl 0x2(%rsi),%ecx
	cmp    $0x58,%cl
	jne    24d91 <examine_app0+0x21>
	movzbl 0x3(%rsi),%ecx
	cmp    $0x58,%cl
	jne    24d91 <examine_app0+0x21>
	movzbl 0x4(%rsi),%ecx
	test   %cl,%cl
	jne    24d91 <examine_app0+0x21>
	movzbl 0x5(%rsi),%ecx
	cmp    $0x10,%cl
	jbe    24ffa <examine_app0+0x28a>
	cmp    $0x11,%cl
	je     25027 <examine_app0+0x2b7>
	cmp    $0x13,%cl
	jne    24fff <examine_app0+0x28f>
	mov    (%rdi),%rcx
	movl   $0x6e,0x28(%rcx)
	mov    (%rdi),%rcx
	mov    %eax,0x2c(%rcx)
	mov    (%rdi),%rax
	mov    0x8(%rax),%rax
	mov    %r8,%rsi
	callq  *%rax
	leaveq 
	retq   
	mov    (%rdi),%rcx
	movl   $0x77,0x28(%rcx)
	movzbl 0x178(%rdi),%ecx
	mov    (%rdi),%rdx
	mov    %ecx,0x2c(%rdx)
	movzbl 0x179(%rdi),%edx
	mov    (%rdi),%rcx
	mov    %edx,0x30(%rcx)
	mov    (%rdi),%rcx
	mov    0x8(%rcx),%rcx
	mov    $0xffffffffffffffff,%r8
	mov    %rdi,%rdx
	mov    %r13,-0x8(%rbp)
	mov    %r14,-0x10(%rbp)
	mov    %r15,-0x18(%rbp)
	mov    %rsi,%r13
	mov    %r8,%rsi
	mov    %rax,%r14
	mov    %rdi,%r15
	mov    %rdx,%rdi
	callq  *%rcx
	mov    %r14,%rax
	mov    %r15,%rdi
	mov    %r13,%r8
	mov    $0x1,%esi
	mov    -0x18(%rbp),%r15
	mov    -0x10(%rbp),%r14
	mov    -0x8(%rbp),%r13
	movzbl 0x178(%rdi),%ecx
	mov    (%rdi),%rdx
	mov    %ecx,0x2c(%rdx)
	movzbl 0x179(%rdi),%ecx
	mov    %ecx,0x30(%rdx)
	movzwl 0x17c(%rdi),%ecx
	mov    %ecx,0x34(%rdx)
	movzwl 0x17e(%rdi),%ecx
	mov    %ecx,0x38(%rdx)
	movzbl 0x17a(%rdi),%ecx
	mov    %ecx,0x3c(%rdx)
	mov    (%rdi),%rcx
	movl   $0x57,0x28(%rcx)
	mov    (%rdi),%rcx
	mov    0x8(%rcx),%rcx
	mov    %rdi,%rdx
	mov    %r13,-0x8(%rbp)
	mov    %r14,-0x10(%rbp)
	mov    %r15,-0x18(%rbp)
	mov    %r8,%r13
	mov    %rax,%r14
	mov    %rdi,%r15
	mov    %rdx,%rdi
	callq  *%rcx
	movzbl 0xd(%r13),%eax
	movzbl 0xc(%r13),%ecx
	or     %cl,%al
	test   %al,%al
	je     24fd1 <examine_app0+0x261>
	mov    (%r15),%rax
	movl   $0x5a,0x28(%rax)
	movzbl 0xc(%r13),%ecx
	mov    (%r15),%rax
	mov    %ecx,0x2c(%rax)
	movzbl 0xd(%r13),%ecx
	mov    (%r15),%rax
	mov    %ecx,0x30(%rax)
	mov    (%r15),%rax
	mov    0x8(%rax),%rax
	mov    %r15,%rdi
	mov    $0x1,%esi
	callq  *%rax
	movzbl 0xd(%r13),%eax
	movzbl 0xc(%r13),%ecx
	imul   %rcx,%rax
	lea    (%rax,%rax,2),%rax
	lea    -0xe(%r14),%rcx
	cmp    %rax,%rcx
	jne    25045 <examine_app0+0x2d5>
	mov    -0x18(%rbp),%r15
	mov    -0x10(%rbp),%r14
	mov    -0x8(%rbp),%r13
	leaveq 
	retq   
	cmp    $0x10,%cl
	je     25074 <examine_app0+0x304>
	mov    (%rdi),%rcx
	movl   $0x59,0x28(%rcx)
	movzbl 0x5(%rsi),%edx
	mov    (%rdi),%rcx
	mov    %edx,0x2c(%rcx)
	mov    (%rdi),%rcx
	mov    %eax,0x30(%rcx)
	mov    (%rdi),%rax
	mov    0x8(%rax),%rax
	mov    %r8,%rsi
	callq  *%rax
	leaveq 
	retq   
	mov    (%rdi),%rcx
	movl   $0x6d,0x28(%rcx)
	mov    (%rdi),%rcx
	mov    %eax,0x2c(%rcx)
	mov    (%rdi),%rax
	mov    0x8(%rax),%rax
	mov    %r8,%rsi
	callq  *%rax
	leaveq 
	retq   
	mov    (%r15),%rax
	movl   $0x58,0x28(%rax)
	mov    (%r15),%rax
	mov    %ecx,0x2c(%rax)
	mov    (%r15),%rax
	mov    0x8(%rax),%rax
	mov    %r15,%rdi
	mov    $0x1,%esi
	callq  *%rax
	mov    -0x18(%rbp),%r15
	mov    -0x10(%rbp),%r14
	mov    -0x8(%rbp),%r13
	leaveq 
	retq   
	mov    (%rdi),%rcx
	movl   $0x6c,0x28(%rcx)
	mov    (%rdi),%rcx
	mov    %eax,0x2c(%rcx)
	mov    (%rdi),%rax
	mov    0x8(%rax),%rax
	mov    %r8,%rsi
	callq  *%rax
	leaveq 
	retq   
	data16 nopw %cs:0x0(%rax,%rax,1)
	nopl   (%rax)

00250a0 <examine_app14>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    $0x1,%r10d
	cmp    $0xb,%edx
	ja     250d3 <examine_app14+0x33>
	mov    (%rdi),%rax
	movl   $0x4e,0x28(%rax)
	add    %edx,%ecx
	mov    (%rdi),%rax
	mov    %ecx,0x2c(%rax)
	mov    (%rdi),%rax
	mov    0x8(%rax),%rax
	mov    %r10,%rsi
	callq  *%rax
	leaveq 
	retq   
	movzbl (%rsi),%eax
	cmp    $0x41,%al
	jne    250b3 <examine_app14+0x13>
	movzbl 0x1(%rsi),%eax
	cmp    $0x64,%al
	jne    250b3 <examine_app14+0x13>
	movzbl 0x2(%rsi),%eax
	cmp    $0x6f,%al
	jne    250b3 <examine_app14+0x13>
	movzbl 0x3(%rsi),%eax
	cmp    $0x62,%al
	jne    250b3 <examine_app14+0x13>
	movzbl 0x4(%rsi),%eax
	cmp    $0x65,%al
	jne    250b3 <examine_app14+0x13>
	movzbl 0x6(%rsi),%ecx
	movzbl 0x5(%rsi),%eax
	shl    $0x8,%eax
	lea    (%rcx,%rax,1),%r9d
	mov    (%rdi),%r8
	movzbl 0x8(%rsi),%ecx
	movzbl 0x7(%rsi),%eax
	shl    $0x8,%eax
	lea    (%rcx,%rax,1),%edx
	movzbl 0xa(%rsi),%ecx
	movzbl 0x9(%rsi),%eax
	shl    $0x8,%eax
	add    %ecx,%eax
	movzbl 0xb(%rsi),%ecx
	mov    %r9d,0x2c(%r8)
	mov    %edx,0x30(%r8)
	mov    %eax,0x34(%r8)
	mov    %ecx,0x38(%r8)
	mov    (%rdi),%rax
	movl   $0x4c,0x28(%rax)
	mov    (%rdi),%rax
	mov    0x8(%rax),%rax
	mov    %rdi,%rdx
	mov    %r14,-0x8(%rbp)
	mov    %r15,-0x10(%rbp)
	mov    %r10,%rsi
	mov    %rcx,%r14
	mov    %rdi,%r15
	mov    %rdx,%rdi
	callq  *%rax
	movl   $0x1,0x180(%r15)
	mov    %r14b,0x184(%r15)
	mov    -0x10(%rbp),%r15
	mov    -0x8(%rbp),%r14
	leaveq 
	retq   
	data16 nopw %cs:0x0(%rax,%rax,1)
	nopl   0x0(%rax)

0025190 <get_interesting_appn>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x40,%rsp
	mov    %r15,-0x20(%rbp)
	mov    0x28(%rdi),%r15
	mov    (%r15),%rax
	xor    %ecx,%ecx
	mov    0x8(%r15),%r8
	test   %r8,%r8
	je     25210 <get_interesting_appn+0x80>
	mov    %rbx,%rsi
	mov    %rdi,%rbx
	mov    %r14,%rdi
	mov    %r12,%r14
	mov    %rcx,%r12
	mov    %rdi,%rcx
	movzbl (%rax),%edx
	add    $0xffffffffffffffff,%r8
	test   %r8,%r8
	je     25240 <get_interesting_appn+0xb0>
	lea    0x1(%rax),%rdi
	mov    %r13,%r9
	lea    0x1(%rdi),%rax
	add    $0xffffffffffffffff,%r8
	movzbl (%rdi),%edi
	shl    $0x8,%edx
	mov    %edx,%edx
	lea    -0x2(%rdi,%rdx,1),%r13
	mov    %r13,-0x30(%rbp)
	cmp    $0xd,%r13
	jle    2526e <get_interesting_appn+0xde>
	mov    $0xe,%r13d
	mov    %rsi,-0x8(%rbp)
	mov    %r14,-0x10(%rbp)
	mov    %r9,-0x18(%rbp)
	mov    %rcx,-0x28(%rbp)
	mov    %r12,%r14
	jmpq   252ae <get_interesting_appn+0x11e>
	mov    %rdi,%rax
	mov    %rdi,-0x30(%rbp)
	mov    %rax,%rdi
	mov    %r14,%rax
	mov    %r12,%r14
	mov    %rax,%r12
	callq  *0x18(%r15)
	test   %eax,%eax
	jne    2530a <get_interesting_appn+0x17a>
	mov    %r14,%rcx
	mov    %r12,%r14
	mov    %rcx,%r12
	xor    %eax,%eax
	mov    -0x20(%rbp),%r15
	leaveq 
	retq   
	mov    %rbx,%rdi
	mov    %rbx,-0x28(%rbp)
	mov    %rdx,-0x30(%rbp)
	mov    %rsi,%rbx
	mov    %rcx,%r12
	callq  *0x18(%r15)
	test   %eax,%eax
	jne    25323 <get_interesting_appn+0x193>
	mov    %r14,%rcx
	mov    %r12,%r14
	mov    %rcx,%r12
	xor    %eax,%eax
	mov    -0x20(%rbp),%r15
	leaveq 
	retq   
	test   %r13,%r13
	jg     25343 <get_interesting_appn+0x1b3>
	mov    %rsi,-0x8(%rbp)
	mov    %r14,-0x10(%rbp)
	mov    %r9,-0x18(%rbp)
	mov    %rcx,-0x28(%rbp)
	mov    %r12,%r13
	mov    %r13,%r14
	jmp    252ae <get_interesting_appn+0x11e>
	test   %r8,%r8
	je     2535b <get_interesting_appn+0x1cb>
	movzbl (%rax),%edx
	mov    %r14d,%ecx
	mov    %dl,-0x3e(%rbp,%rcx,1)
	add    $0x1,%rax
	add    $0xffffffffffffffff,%r8
	add    $0x1,%r14d
	cmp    %r13d,%r14d
	jb     2528f <get_interesting_appn+0xff>
	mov    %r13d,%ecx
	mov    -0x30(%rbp),%r12
	sub    %rcx,%r12
	lea    -0x3e(%rbp),%rsi
	movslq 0x21c(%rbx),%rcx
	cmp    $0xe0,%ecx
	je     25372 <get_interesting_appn+0x1e2>
	cmp    $0xee,%ecx
	je     253ad <get_interesting_appn+0x21d>
	mov    (%rbx),%rcx
	movl   $0x44,0x28(%rcx)
	movslq 0x21c(%rbx),%rdx
	mov    (%rbx),%rcx
	mov    %edx,0x2c(%rcx)
	mov    (%rbx),%rcx
	mov    (%rcx),%rcx
	mov    %r8,%r13
	mov    %rax,%r14
	mov    %rbx,%rdi
	callq  *%rcx
	jmp    25386 <get_interesting_appn+0x1f6>
	mov    (%r15),%rax
	mov    0x8(%r15),%r8
	mov    %r12,%rcx
	mov    %rbx,%rsi
	xor    %r12d,%r12d
	mov    -0x30(%rbp),%rbx
	jmpq   251c0 <get_interesting_appn+0x30>
	mov    (%r15),%rdi
	mov    0x8(%r15),%r8
	mov    %r12,%rcx
	mov    %rbx,%rsi
	mov    %r13,%r9
	mov    -0x30(%rbp),%rdx
	xor    %r12d,%r12d
	mov    -0x28(%rbp),%rbx
	jmpq   251d3 <get_interesting_appn+0x43>
	mov    %rsi,-0x8(%rbp)
	mov    %r14,-0x10(%rbp)
	mov    %r9,-0x18(%rbp)
	mov    %rcx,-0x28(%rbp)
	mov    %r12,%r14
	jmpq   252ae <get_interesting_appn+0x11e>
	mov    %rbx,%rdi
	callq  *0x18(%r15)
	test   %eax,%eax
	je     253c3 <get_interesting_appn+0x233>
	mov    (%r15),%rax
	mov    0x8(%r15),%r8
	jmpq   25298 <get_interesting_appn+0x108>
	mov    %r13,%rdx
	mov    %r8,%r13
	mov    %rax,%r14
	mov    %rbx,%rdi
	mov    %r12,%rcx
	callq  24d70 <examine_app0>
	mov    %r14,(%r15)
	mov    %r13,0x8(%r15)
	mov    $0x1,%eax
	test   %r12,%r12
	jg     253dc <get_interesting_appn+0x24c>
	mov    -0x28(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	mov    -0x20(%rbp),%r15
	leaveq 
	retq   
	mov    %r13,%rdx
	mov    %r8,%r13
	mov    %rax,%r14
	mov    %rbx,%rdi
	mov    %r12,%rcx
	callq  250a0 <examine_app14>
	jmp    25386 <get_interesting_appn+0x1f6>
	mov    %r12,%rax
	mov    -0x28(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	mov    -0x20(%rbp),%r15
	leaveq 
	retq   
	mov    0x28(%rbx),%rcx
	mov    0x20(%rcx),%rcx
	mov    %r12,%rsi
	mov    %rbx,%rdi
	mov    %rax,%r15
	callq  *%rcx
	mov    %r15,%rax
	mov    -0x28(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	mov    -0x20(%rbp),%r15
	leaveq 
	retq   
	nopl   0x0(%rax,%rax,1)

0025410 <save_marker>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x60,%rsp
	mov    %r15,-0x28(%rbp)
	mov    %rdi,-0x58(%rbp)
	mov    0x28(%rdi),%r10
	mov    (%r10),%rax
	mov    0x8(%r10),%r8
	xor    %r15d,%r15d
	mov    %r15,-0x40(%rbp)
	mov    $0x1,%esi
	mov    0x248(%rdi),%r9
	mov    0xf8(%r9),%rcx
	mov    %rcx,-0x38(%rbp)
	test   %rcx,%rcx
	je     25480 <save_marker+0x70>
	mov    0x10(%rcx),%edx
	mov    0x100(%r9),%esi
	mov    %rsi,%r15
	add    0x18(%rcx),%r15
	mov    %r14,-0x20(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    %rbx,-0x8(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    %rsi,%rbx
	mov    %r10,%r12
	mov    %r9,%r13
	mov    %rdx,%r14
	jmpq   25520 <save_marker+0x110>
	test   %r8,%r8
	je     2553f <save_marker+0x12f>
	mov    %r14,%rcx
	mov    %rbx,%r14
	mov    %r13,%rbx
	mov    %r9,%r13
	mov    %r12,%r9
	mov    %r10,%r12
	movzbl (%rax),%edx
	add    $0xffffffffffffffff,%r8
	test   %r8,%r8
	je     25579 <save_marker+0x169>
	lea    0x1(%rax),%r10
	mov    %r14,%r11
	lea    0x1(%r10),%rax
	add    $0xffffffffffffffff,%r8
	movzbl (%r10),%r10d
	shl    $0x8,%edx
	mov    %edx,%edx
	lea    -0x2(%r10,%rdx,1),%r10
	mov    %r10,-0x30(%rbp)
	test   %r10,%r10
	jns    255ab <save_marker+0x19b>
	mov    %rcx,-0x20(%rbp)
	mov    %rbx,-0x18(%rbp)
	mov    %r11,-0x8(%rbp)
	mov    %r9,-0x10(%rbp)
	mov    %r15,%rbx
	mov    %rbx,%r14
	pushq  -0x30(%rbp)
	pushq  -0x40(%rbp)
	popq   -0x38(%rbp)
	popq   -0x40(%rbp)
	jmp    25520 <save_marker+0x110>
	test   %r8,%r8
	je     255d4 <save_marker+0x1c4>
	movzbl (%rax),%ecx
	mov    %cl,(%r15)
	add    $0x1,%ebx
	add    $0x1,%rax
	add    $0xffffffffffffffff,%r8
	add    $0x1,%r15
	cmp    %r14d,%ebx
	jb     254f9 <save_marker+0xe9>
	mov    -0x58(%rbp),%rdi
	cmp    %r14d,%ebx
	jb     255e0 <save_marker+0x1d0>
	mov    -0x38(%rbp),%rsi
	test   %rsi,%rsi
	jne    25614 <save_marker+0x204>
	mov    -0x40(%rbp),%rbx
	jmpq   25643 <save_marker+0x233>
	mov    %r9,-0x50(%rbp)
	mov    %r12,%r15
	mov    %r10,%r12
	mov    %r13,%r10
	mov    %r14,%r13
	mov    %rbx,%r14
	mov    %r10,%rbx
	callq  *0x18(%r12)
	test   %eax,%eax
	jne    256aa <save_marker+0x29a>
	mov    %r15,%r12
	mov    %r14,%r15
	mov    %r13,%r14
	mov    %rbx,%r13
	mov    %r15,%rbx
	xor    %eax,%eax
	mov    -0x28(%rbp),%r15
	leaveq 
	retq   
	mov    %r13,-0x48(%rbp)
	mov    %rdx,-0x50(%rbp)
	mov    %rcx,%r13
	mov    %r9,%r15
	callq  *0x18(%r12)
	test   %eax,%eax
	jne    256ce <save_marker+0x2be>
	mov    %r15,%r12
	mov    %r14,%r15
	mov    %r13,%r14
	mov    %rbx,%r13
	mov    %r15,%rbx
	xor    %eax,%eax
	mov    -0x28(%rbp),%r15
	leaveq 
	retq   
	movslq 0x21c(%rdi),%rdx
	cmp    $0xfe,%edx
	je     256f9 <save_marker+0x2e9>
	add    $0xffffff20,%edx
	movslq %edx,%rdx
	mov    0xb4(%r13,%rdx,4),%r14d
	jmpq   25700 <save_marker+0x2f0>
	xor    %r8d,%r8d
	mov    -0x58(%rbp),%rdi
	jmpq   25520 <save_marker+0x110>
	mov    %rax,(%r12)
	mov    %r8,0x8(%r12)
	mov    %ebx,0x100(%r13)
	test   %r8,%r8
	jne    25517 <save_marker+0x107>
	callq  *0x18(%r12)
	test   %eax,%eax
	je     25795 <save_marker+0x385>
	mov    (%r12),%rax
	mov    0x8(%r12),%r8
	jmpq   25517 <save_marker+0x107>
	mov    0x190(%rdi),%rcx
	test   %rcx,%rcx
	jne    2562c <save_marker+0x21c>
	mov    %rsi,0x190(%rdi)
	jmp    25637 <save_marker+0x227>
	mov    %rdx,%rcx
	mov    (%rcx),%rdx
	test   %rdx,%rdx
	jne    25629 <save_marker+0x219>
	mov    %rsi,(%rcx)
	mov    0x18(%rsi),%r15
	mov    0xc(%rsi),%ecx
	sub    %r14d,%ecx
	mov    %ecx,%ebx
	movq   $0x0,0xf8(%r13)
	movslq 0x21c(%rdi),%rcx
	cmp    $0xe0,%ecx
	je     257ad <save_marker+0x39d>
	cmp    $0xee,%ecx
	je     257ed <save_marker+0x3dd>
	mov    (%rdi),%rcx
	movl   $0x5b,0x28(%rcx)
	movslq 0x21c(%rdi),%rdx
	mov    (%rdi),%rcx
	mov    %edx,0x2c(%rcx)
	lea    (%rbx,%r14,1),%edx
	mov    (%rdi),%rcx
	mov    %edx,0x30(%rcx)
	mov    (%rdi),%rcx
	mov    0x8(%rcx),%rcx
	mov    %rax,%r14
	mov    %r8,%r15
	mov    %rdi,%r13
	mov    $0x1,%esi
	callq  *%rcx
	jmpq   257c4 <save_marker+0x3b4>
	mov    (%r12),%rax
	mov    0x8(%r12),%r8
	mov    %r13,%rcx
	mov    %r15,%r9
	xor    %r15d,%r15d
	mov    -0x50(%rbp),%r13
	mov    -0x58(%rbp),%rdi
	mov    $0x1,%esi
	jmpq   2549b <save_marker+0x8b>
	mov    (%r12),%r10
	mov    0x8(%r12),%r8
	mov    %r13,%rcx
	mov    %r15,%r9
	mov    %r14,%r11
	mov    -0x50(%rbp),%rdx
	xor    %r15d,%r15d
	mov    -0x48(%rbp),%r13
	mov    -0x58(%rbp),%rdi
	mov    $0x1,%esi
	jmpq   254b2 <save_marker+0xa2>
	mov    0xb0(%r13),%r14d
	cmp    %r10d,%r14d
	jbe    25708 <save_marker+0x2f8>
	mov    %r10,%r14
	mov    0x8(%rdi),%rdx
	mov    0x8(%rdx),%r15
	mov    %rcx,-0x20(%rbp)
	mov    %r14d,%ecx
	lea    0x20(%rcx),%rdx
	mov    %rbx,-0x18(%rbp)
	mov    %rdi,%rcx
	mov    %r8,-0x48(%rbp)
	mov    %r12,-0x40(%rbp)
	mov    %r11,-0x8(%rbp)
	mov    %r9,-0x10(%rbp)
	mov    %rdi,%rbx
	mov    %rcx,%rdi
	mov    %rax,%r12
	mov    %r15,%rax
	mov    %r10,%r15
	callq  *%rax
	mov    %rax,-0x38(%rbp)
	movq   $0x0,(%rax)
	movzbl 0x21c(%rbx),%ecx
	mov    %cl,0x8(%rax)
	mov    %r15d,0xc(%rax)
	mov    %r14d,0x10(%rax)
	lea    0x20(%rax),%r15
	mov    %r15,0x18(%rax)
	mov    %rax,0xf8(%r13)
	movl   $0x0,0x100(%r13)
	mov    %r12,%rax
	mov    %rbx,%rdi
	mov    -0x40(%rbp),%r12
	mov    -0x48(%rbp),%r8
	xor    %ebx,%ebx
	pushq  -0x30(%rbp)
	popq   -0x40(%rbp)
	jmpq   25520 <save_marker+0x110>
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	mov    -0x18(%rbp),%r13
	mov    -0x20(%rbp),%r14
	xor    %eax,%eax
	mov    -0x28(%rbp),%r15
	leaveq 
	retq   
	mov    %r14,%rdx
	mov    %rax,%r14
	mov    %r15,%rsi
	mov    %r8,%r15
	mov    %rdi,%r13
	mov    %rbx,%rcx
	callq  24d70 <examine_app0>
	mov    %r14,(%r12)
	mov    %r15,0x8(%r12)
	test   %rbx,%rbx
	jg     25806 <save_marker+0x3f6>
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	mov    -0x18(%rbp),%r13
	mov    -0x20(%rbp),%r14
	mov    -0x28(%rbp),%r15
	mov    $0x1,%eax
	leaveq 
	retq   
	mov    %r14,%rdx
	mov    %rax,%r14
	mov    %r15,%rsi
	mov    %r8,%r15
	mov    %rdi,%r13
	mov    %rbx,%rcx
	callq  250a0 <examine_app14>
	jmp    257c4 <save_marker+0x3b4>
	mov    0x28(%r13),%rax
	mov    0x20(%rax),%rax
	mov    %rbx,%rsi
	mov    %r13,%rdi
	callq  *%rax
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	mov    -0x18(%rbp),%r13
	mov    -0x20(%rbp),%r14
	mov    -0x28(%rbp),%r15
	mov    $0x1,%eax
	leaveq 
	retq   
	data16 nopw %cs:0x0(%rax,%rax,1)
	nopl   0x0(%rax)

0025840 <skip_variable>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %r15,-0x18(%rbp)
	mov    %rdi,-0x28(%rbp)
	mov    0x28(%rdi),%r15
	mov    (%r15),%rcx
	mov    0x8(%r15),%rdx
	test   %rdx,%rdx
	je     258f3 <skip_variable+0xb3>
	movzbl (%rcx),%eax
	add    $0xffffffffffffffff,%rdx
	test   %rdx,%rdx
	je     25903 <skip_variable+0xc3>
	add    $0x1,%rcx
	mov    (%rdi),%rsi
	movzbl (%rcx),%r9d
	movl   $0x5b,0x28(%rsi)
	movslq 0x21c(%rdi),%r8
	mov    (%rdi),%rsi
	mov    %r8d,0x2c(%rsi)
	shl    $0x8,%eax
	mov    %eax,%eax
	lea    -0x2(%r9,%rax,1),%r8
	mov    (%rdi),%rax
	mov    %r8d,0x30(%rax)
	mov    (%rdi),%rax
	mov    0x8(%rax),%rax
	mov    $0x1,%esi
	mov    %r12,-0x8(%rbp)
	mov    %r13,-0x10(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %r8,%r12
	mov    %rcx,%r13
	mov    %rdx,%r14
	callq  *%rax
	lea    0x1(%r13),%rax
	mov    %rax,(%r15)
	lea    -0x1(%r14),%rax
	mov    %rax,0x8(%r15)
	test   %r12,%r12
	jg     25917 <skip_variable+0xd7>
	mov    $0x1,%eax
	mov    -0x20(%rbp),%r14
	mov    -0x10(%rbp),%r13
	mov    -0x8(%rbp),%r12
	mov    -0x18(%rbp),%r15
	leaveq 
	retq   
	callq  *0x18(%r15)
	test   %eax,%eax
	jne    2593f <skip_variable+0xff>
	xor    %eax,%eax
	mov    -0x18(%rbp),%r15
	leaveq 
	retq   
	mov    %rax,-0x20(%rbp)
	callq  *0x18(%r15)
	test   %eax,%eax
	jne    2594f <skip_variable+0x10f>
	xor    %eax,%eax
	mov    -0x18(%rbp),%r15
	leaveq 
	retq   
	mov    -0x28(%rbp),%rdi
	mov    0x28(%rdi),%rax
	mov    0x20(%rax),%rax
	mov    %r12,%rsi
	callq  *%rax
	mov    $0x1,%eax
	mov    -0x20(%rbp),%r14
	mov    -0x10(%rbp),%r13
	mov    -0x8(%rbp),%r12
	mov    -0x18(%rbp),%r15
	leaveq 
	retq   
	mov    (%r15),%rcx
	mov    0x8(%r15),%rdx
	mov    -0x28(%rbp),%rdi
	jmpq   25864 <skip_variable+0x24>
	mov    (%r15),%rcx
	mov    0x8(%r15),%rdx
	mov    -0x20(%rbp),%rax
	mov    -0x28(%rbp),%rdi
	jmpq   25878 <skip_variable+0x38>
	data16 nopw %cs:0x0(%rax,%rax,1)
	xchg   %ax,%ax

0025970 <next_marker>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %r13,-0x18(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %r15,-0x28(%rbp)
	mov    0x28(%rdi),%r15
	mov    (%r15),%rcx
	mov    0x8(%r15),%rax
	mov    %rdi,%r14
	xor    %r13d,%r13d
	jmp    259cd <next_marker+0x5d>
	test   %rax,%rax
	je     259df <next_marker+0x6f>
	mov    %rcx,%rdx
	lea    0x1(%rdx),%rcx
	add    $0xffffffffffffffff,%rax
	movzbl (%rdx),%r8d
	cmp    $0xff,%r8b
	je     25997 <next_marker+0x27>
	test   %r8b,%r8b
	jne    259f3 <next_marker+0x83>
	mov    0x248(%r14),%rsi
	mov    0x24(%rsi),%edx
	add    $0x2,%edx
	mov    %edx,0x24(%rsi)
	mov    %rcx,(%r15)
	mov    %rax,0x8(%r15)
	test   %rax,%rax
	je     25a09 <next_marker+0x99>
	movzbl (%rcx),%edx
	add    $0x1,%rcx
	add    $0xffffffffffffffff,%rax
	jmp    25a4c <next_marker+0xdc>
	mov    %r14,%rdi
	callq  *0x18(%r15)
	test   %eax,%eax
	je     25a59 <next_marker+0xe9>
	mov    (%r15),%rdx
	mov    0x8(%r15),%rax
	jmp    2599f <next_marker+0x2f>
	mov    0x248(%r14),%rdx
	mov    0x24(%rdx),%edx
	test   %edx,%edx
	jne    25a6a <next_marker+0xfa>
	mov    %r8,%r13
	jmpq   25acc <next_marker+0x15c>
	mov    %r14,%rdi
	callq  *0x18(%r15)
	test   %eax,%eax
	je     25aed <next_marker+0x17d>
	mov    (%r15),%rcx
	mov    0x8(%r15),%rax
	jmp    259d2 <next_marker+0x62>
	mov    0x248(%r14),%rsi
	mov    0x24(%rsi),%edx
	add    $0x1,%edx
	mov    %edx,0x24(%rsi)
	mov    %rcx,(%r15)
	mov    %rax,0x8(%r15)
	test   %rax,%rax
	je     25afe <next_marker+0x18e>
	movzbl (%rcx),%edx
	add    $0x1,%rcx
	add    $0xffffffffffffffff,%rax
	cmp    $0xfe,%edx
	jle    25a21 <next_marker+0xb1>
	jmpq   25997 <next_marker+0x27>
	mov    %r13,%rax
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	leaveq 
	retq   
	mov    (%r14),%rdx
	movl   $0x74,0x28(%rdx)
	mov    0x248(%r14),%rdx
	movslq 0x24(%rdx),%rsi
	mov    (%r14),%rdx
	mov    %esi,0x2c(%rdx)
	mov    (%r14),%rdx
	mov    %r8d,0x30(%rdx)
	mov    (%r14),%rdx
	mov    0x8(%rdx),%rdx
	mov    $0xffffffffffffffff,%rsi
	mov    %r14,%rdi
	mov    %rbx,-0x8(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    %rax,%rbx
	mov    %rcx,%r12
	mov    %r8,%r13
	callq  *%rdx
	mov    0x248(%r14),%rax
	movl   $0x0,0x24(%rax)
	mov    %rbx,%rax
	mov    %r12,%rcx
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	mov    %r13d,0x21c(%r14)
	mov    %rcx,(%r15)
	mov    %rax,0x8(%r15)
	mov    $0x1,%eax
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	leaveq 
	retq   
	mov    %r13,%rax
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	leaveq 
	retq   
	mov    %r14,%rdi
	callq  *0x18(%r15)
	test   %eax,%eax
	jne    25b1a <next_marker+0x1aa>
	mov    %r13,%rax
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	leaveq 
	retq   
	mov    (%r15),%rcx
	mov    0x8(%r15),%rax
	jmpq   25a41 <next_marker+0xd1>
	nopw   %cs:0x0(%rax,%rax,1)

0025b30 <first_marker>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %r15,-0x20(%rbp)
	mov    0x28(%rdi),%rcx
	mov    (%rcx),%rdx
	mov    0x8(%rcx),%rax
	test   %rax,%rax
	je     25bfd <first_marker+0xcd>
	mov    %r15,%rsi
	mov    %rcx,%r15
	mov    %rsi,%rcx
	movzbl (%rdx),%r8d
	add    $0xffffffffffffffff,%rax
	test   %rax,%rax
	je     25c1a <first_marker+0xea>
	add    $0x1,%rdx
	movzbl (%rdx),%esi
	cmp    $0xfe,%r8b
	jbe    25b7d <first_marker+0x4d>
	cmp    $0xd8,%sil
	je     25bde <first_marker+0xae>
	mov    (%rdi),%rcx
	movl   $0x35,0x28(%rcx)
	mov    (%rdi),%rcx
	mov    %r8d,0x2c(%rcx)
	mov    (%rdi),%rcx
	mov    %esi,0x30(%rcx)
	mov    (%rdi),%rcx
	mov    (%rcx),%rcx
	mov    %rdi,%r8
	mov    %rbx,-0x8(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    %r14,-0x28(%rbp)
	mov    %rdi,%rbx
	mov    %r8,%rdi
	mov    %rax,%r12
	mov    %rdx,%r13
	mov    %rsi,%r14
	callq  *%rcx
	mov    %r12,%rax
	mov    %r13,%rdx
	mov    %r14,%rsi
	mov    %rbx,%rdi
	mov    -0x28(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	mov    -0x20(%rbp),%rcx
	mov    %esi,0x21c(%rdi)
	add    $0x1,%rdx
	mov    %rdx,(%r15)
	add    $0xffffffffffffffff,%rax
	mov    %rax,0x8(%r15)
	mov    %rcx,%r15
	mov    $0x1,%eax
	leaveq 
	retq   
	mov    %rdi,%rax
	mov    %rdi,-0x28(%rbp)
	mov    %rax,%rdi
	mov    %rcx,%r15
	callq  *0x18(%r15)
	test   %eax,%eax
	jne    25c38 <first_marker+0x108>
	xor    %eax,%eax
	mov    -0x20(%rbp),%r15
	leaveq 
	retq   
	mov    %rdi,%rax
	mov    %rdi,-0x18(%rbp)
	mov    %r8,-0x28(%rbp)
	mov    %rax,%rdi
	callq  *0x18(%r15)
	test   %eax,%eax
	jne    25c4c <first_marker+0x11c>
	xor    %eax,%eax
	mov    -0x20(%rbp),%r15
	leaveq 
	retq   
	mov    (%r15),%rdx
	mov    0x8(%r15),%rax
	mov    -0x28(%rbp),%rdi
	mov    -0x20(%rbp),%rcx
	jmpq   25b59 <first_marker+0x29>
	mov    (%r15),%rdx
	mov    0x8(%r15),%rax
	mov    -0x28(%rbp),%r8
	mov    -0x18(%rbp),%rdi
	mov    -0x20(%rbp),%rcx
	jmpq   25b6e <first_marker+0x3e>
	data16 nopw %cs:0x0(%rax,%rax,1)
	nop

0025c70 <read_markers>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %r13,-0x8(%rbp)
	mov    %r14,-0x10(%rbp)
	mov    %r15,-0x18(%rbp)
	mov    %rdi,%r15
	xor    %r13d,%r13d
	mov    $0x1,%r14d
	jmp    25cbf <read_markers+0x4f>
	mov    (%r15),%rax
	movl   $0x44,0x28(%rax)
	movslq 0x21c(%r15),%rcx
	mov    (%r15),%rax
	mov    %ecx,0x2c(%rax)
	mov    (%r15),%rax
	mov    (%rax),%rax
	mov    %r15,%rdi
	callq  *%rax
	movl   $0x0,0x21c(%r15)
	movslq 0x21c(%r15),%rax
	test   %eax,%eax
	jne    25d02 <read_markers+0x92>
	mov    0x248(%r15),%rax
	movslq 0x18(%rax),%rax
	test   %eax,%eax
	jne    25cf6 <read_markers+0x86>
	mov    %r15,%rdi
	callq  25b30 <first_marker>
	test   %eax,%eax
	jne    25d02 <read_markers+0x92>
	mov    %r13,%rax
	mov    -0x18(%rbp),%r15
	mov    -0x10(%rbp),%r14
	mov    -0x8(%rbp),%r13
	leaveq 
	retq   
	mov    %r15,%rdi
	callq  25970 <next_marker>
	test   %eax,%eax
	je     25d5e <read_markers+0xee>
	movslq 0x21c(%r15),%rdx
	lea    -0x1(%rdx),%eax
	cmp    $0xfd,%eax
	ja     25c92 <read_markers+0x22>
	lea    0x33ea2(%rip),%rcx        # 59bc0 <val_ac_chrominance.16+0xa2>
	movslq (%rcx,%rax,4),%rax
	add    %rcx,%rax
	jmpq   *%rax
	mov    (%r15),%rax
	movl   $0x55,0x28(%rax)
	mov    (%r15),%rax
	mov    0x8(%rax),%rax
	mov    %r14,%rsi
	mov    %r15,%rdi
	callq  *%rax
	movl   $0x0,0x21c(%r15)
	mov    $0x2,%eax
	mov    -0x18(%rbp),%r15
	mov    -0x10(%rbp),%r14
	mov    -0x8(%rbp),%r13
	leaveq 
	retq   
	mov    %r13,%rax
	mov    -0x18(%rbp),%r15
	mov    -0x10(%rbp),%r14
	mov    -0x8(%rbp),%r13
	leaveq 
	retq   
	mov    %r15,%rdi
	callq  23a80 <get_sos>
	test   %eax,%eax
	jne    25fa0 <read_markers+0x330>
	mov    %r13,%rax
	mov    -0x18(%rbp),%r15
	mov    -0x10(%rbp),%r14
	mov    -0x8(%rbp),%r13
	leaveq 
	retq   
	mov    %r15,%rdi
	callq  25840 <skip_variable>
	test   %eax,%eax
	jne    25cb4 <read_markers+0x44>
	mov    %r13,%rax
	mov    -0x18(%rbp),%r15
	mov    -0x10(%rbp),%r14
	mov    -0x8(%rbp),%r13
	leaveq 
	retq   
	mov    %r15,%rdi
	callq  23470 <get_soi>
	test   %eax,%eax
	jne    25cb4 <read_markers+0x44>
	mov    %r13,%rax
	mov    -0x18(%rbp),%r15
	mov    -0x10(%rbp),%r14
	mov    -0x8(%rbp),%r13
	leaveq 
	retq   
	mov    %r13,%rdx
	mov    %r15,%rdi
	mov    %r13,%rsi
	callq  23580 <get_sof>
	test   %eax,%eax
	jne    25cb4 <read_markers+0x44>
	mov    %r13,%rax
	mov    -0x18(%rbp),%r15
	mov    -0x10(%rbp),%r14
	mov    -0x8(%rbp),%r13
	leaveq 
	retq   
	mov    %r15,%rdi
	mov    %r14,%rsi
	mov    %r13,%rdx
	callq  23580 <get_sof>
	test   %eax,%eax
	jne    25cb4 <read_markers+0x44>
	mov    %r13,%rax
	mov    -0x18(%rbp),%r15
	mov    -0x10(%rbp),%r14
	mov    -0x8(%rbp),%r13
	leaveq 
	retq   
	mov    %r15,%rdi
	mov    %r13,%rsi
	mov    %r14,%rdx
	callq  23580 <get_sof>
	test   %eax,%eax
	jne    25cb4 <read_markers+0x44>
	mov    %r13,%rax
	mov    -0x18(%rbp),%r15
	mov    -0x10(%rbp),%r14
	mov    -0x8(%rbp),%r13
	leaveq 
	retq   
	mov    %r14,%rdx
	mov    %r15,%rdi
	mov    %r14,%rsi
	callq  23580 <get_sof>
	test   %eax,%eax
	jne    25cb4 <read_markers+0x44>
	mov    %r13,%rax
	mov    -0x18(%rbp),%r15
	mov    -0x10(%rbp),%r14
	mov    -0x8(%rbp),%r13
	leaveq 
	retq   
	mov    (%r15),%rax
	movl   $0x3c,0x28(%rax)
	movslq 0x21c(%r15),%rcx
	mov    (%r15),%rax
	mov    %ecx,0x2c(%rax)
	mov    (%r15),%rax
	mov    (%rax),%rax
	mov    %r15,%rdi
	callq  *%rax
	jmpq   25cb4 <read_markers+0x44>
	mov    %r15,%rdi
	callq  23ff0 <get_dac>
	test   %eax,%eax
	jne    25cb4 <read_markers+0x44>
	mov    %r13,%rax
	mov    -0x18(%rbp),%r15
	mov    -0x10(%rbp),%r14
	mov    -0x8(%rbp),%r13
	leaveq 
	retq   
	mov    %r15,%rdi
	callq  242b0 <get_dht>
	test   %eax,%eax
	jne    25cb4 <read_markers+0x44>
	mov    %r13,%rax
	mov    -0x18(%rbp),%r15
	mov    -0x10(%rbp),%r14
	mov    -0x8(%rbp),%r13
	leaveq 
	retq   
	mov    %r15,%rdi
	callq  24760 <get_dqt>
	test   %eax,%eax
	jne    25cb4 <read_markers+0x44>
	mov    %r13,%rax
	mov    -0x18(%rbp),%r15
	mov    -0x10(%rbp),%r14
	mov    -0x8(%rbp),%r13
	leaveq 
	retq   
	mov    %r15,%rdi
	callq  24bb0 <get_dri>
	test   %eax,%eax
	jne    25cb4 <read_markers+0x44>
	mov    %r13,%rax
	mov    -0x18(%rbp),%r15
	mov    -0x10(%rbp),%r14
	mov    -0x8(%rbp),%r13
	leaveq 
	retq   
	mov    0x248(%r15),%rcx
	lea    -0xe0(%rdx),%eax
	movslq %eax,%rax
	mov    0x30(%rcx,%rax,8),%rax
	mov    %r15,%rdi
	callq  *%rax
	test   %eax,%eax
	jne    25cb4 <read_markers+0x44>
	mov    %r13,%rax
	mov    -0x18(%rbp),%r15
	mov    -0x10(%rbp),%r14
	mov    -0x8(%rbp),%r13
	leaveq 
	retq   
	mov    0x248(%r15),%rax
	mov    0x28(%rax),%rax
	mov    %r15,%rdi
	callq  *%rax
	test   %eax,%eax
	jne    25cb4 <read_markers+0x44>
	mov    %r13,%rax
	mov    -0x18(%rbp),%r15
	mov    -0x10(%rbp),%r14
	mov    -0x8(%rbp),%r13
	leaveq 
	retq   
	mov    (%r15),%rax
	movl   $0x5c,0x28(%rax)
	movslq 0x21c(%r15),%rcx
	mov    (%r15),%rax
	mov    %ecx,0x2c(%rax)
	mov    (%r15),%rax
	mov    0x8(%rax),%rax
	mov    %r15,%rdi
	mov    %r14,%rsi
	callq  *%rax
	jmpq   25cb4 <read_markers+0x44>
	movl   $0x0,0x21c(%r15)
	mov    %r14,%rax
	mov    -0x18(%rbp),%r15
	mov    -0x10(%rbp),%r14
	mov    -0x8(%rbp),%r13
	leaveq 
	retq   
	nopl   0x0(%rax)

0025fc0 <read_restart_marker>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	movslq 0x21c(%rdi),%rax
	test   %eax,%eax
	je     2600e <read_restart_marker+0x4e>
	mov    0x248(%rdi),%rax
	movslq 0x20(%rax),%rsi
	lea    0xd0(%rsi),%eax
	cmp    0x21c(%rdi),%eax
	je     26027 <read_restart_marker+0x67>
	mov    0x28(%rdi),%rax
	mov    0x28(%rax),%rax
	mov    %rdi,%rcx
	mov    %rdi,-0x8(%rbp)
	mov    %rcx,%rdi
	callq  *%rax
	test   %eax,%eax
	je     26089 <read_restart_marker+0xc9>
	mov    -0x8(%rbp),%rax
	jmp    2606e <read_restart_marker+0xae>
	mov    %rdi,%rax
	mov    %rdi,-0x8(%rbp)
	mov    %rax,%rdi
	callq  25970 <next_marker>
	test   %eax,%eax
	je     2608d <read_restart_marker+0xcd>
	mov    -0x8(%rbp),%rdi
	jmp    25fd3 <read_restart_marker+0x13>
	mov    (%rdi),%rax
	movl   $0x62,0x28(%rax)
	mov    0x248(%rdi),%rax
	movslq 0x20(%rax),%rcx
	mov    (%rdi),%rax
	mov    %ecx,0x2c(%rax)
	mov    (%rdi),%rax
	mov    0x8(%rax),%rax
	mov    $0x3,%esi
	mov    %rdi,%rcx
	mov    %r15,-0x8(%rbp)
	mov    %rdi,%r15
	mov    %rcx,%rdi
	callq  *%rax
	mov    %r15,%rax
	movl   $0x0,0x21c(%rax)
	mov    -0x8(%rbp),%r15
	mov    0x248(%rax),%rcx
	movslq 0x20(%rcx),%rax
	add    $0x1,%eax
	and    $0x7,%eax
	mov    %eax,0x20(%rcx)
	mov    $0x1,%eax
	leaveq 
	retq   
	xor    %eax,%eax
	leaveq 
	retq   
	xor    %eax,%eax
	leaveq 
	retq   
	data16 nopw %cs:0x0(%rax,%rax,1)
	nopl   0x0(%rax)

00260a0 <reset_marker_reader>:
	push   %rbp
	mov    %rsp,%rbp
	movq   $0x0,0x130(%rdi)
	movl   $0x0,0xac(%rdi)
	movl   $0x0,0x21c(%rdi)
	mov    0x248(%rdi),%rax
	movl   $0x0,0x18(%rax)
	movl   $0x0,0x1c(%rax)
	movl   $0x0,0x24(%rax)
	movq   $0x0,0xf8(%rax)
	leaveq 
	retq   
	nopl   0x0(%rax)

00260f0 <jpeg_new_colormap>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    0x220(%rdi),%rax
	movslq 0x24(%rdi),%rcx
	cmp    $0xcf,%ecx
	je     26149 <jpeg_new_colormap+0x59>
	mov    (%rdi),%rcx
	movl   $0x14,0x28(%rcx)
	movslq 0x24(%rdi),%rdx
	mov    (%rdi),%rcx
	mov    %edx,0x2c(%rcx)
	mov    (%rdi),%rcx
	mov    (%rcx),%rcx
	mov    %rdi,%rdx
	mov    %r14,-0x8(%rbp)
	mov    %r15,-0x10(%rbp)
	mov    %rdi,%r14
	mov    %rdx,%rdi
	mov    %rax,%r15
	callq  *%rcx
	mov    %r15,%rax
	mov    %r14,%rdi
	mov    -0x10(%rbp),%r15
	mov    -0x8(%rbp),%r14
	movslq 0x6c(%rdi),%rcx
	test   %ecx,%ecx
	jne    26165 <jpeg_new_colormap+0x75>
	mov    (%rdi),%rax
	movl   $0x2e,0x28(%rax)
	mov    (%rdi),%rax
	mov    (%rax),%rax
	callq  *%rax
	leaveq 
	retq   
	movslq 0x80(%rdi),%rcx
	test   %ecx,%ecx
	je     26151 <jpeg_new_colormap+0x61>
	mov    0xa0(%rdi),%rcx
	test   %rcx,%rcx
	je     26151 <jpeg_new_colormap+0x61>
	mov    0x80(%rax),%rcx
	mov    %rcx,0x270(%rdi)
	mov    %r15,-0x10(%rbp)
	mov    %rax,%r15
	callq  *0x18(%rcx)
	movl   $0x0,0x10(%r15)
	mov    -0x10(%rbp),%r15
	leaveq 
	retq   
	data16 nopw %cs:0x0(%rax,%rax,1)
	nopl   (%rax)

00261b0 <jpeg_calc_output_dimensions>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %r15,-0x18(%rbp)
	movslq 0x24(%rdi),%rax
	cmp    $0xca,%eax
	jne    261d2 <jpeg_calc_output_dimensions+0x22>
	mov    %r14,%r15
	mov    %r13,%r14
	mov    %rdi,%r13
	jmp    261f7 <jpeg_calc_output_dimensions+0x47>
	mov    (%rdi),%rax
	movl   $0x14,0x28(%rax)
	movslq 0x24(%rdi),%rcx
	mov    (%rdi),%rax
	mov    %ecx,0x2c(%rax)
	mov    (%rdi),%rax
	mov    (%rax),%rax
	mov    %r14,%r15
	mov    %r13,%r14
	mov    %rdi,%r13
	callq  *%rax
	mov    %r13,%rdi
	callq  26590 <jpeg_core_output_dimensions>
	mov    0x130(%r13),%rsi
	mov    %r15,%rcx
	xor    %r15d,%r15d
	mov    %r15,%rdi
	jmp    2621c <jpeg_calc_output_dimensions+0x6c>
	mov    %r8d,0x24(%rsi)
	add    $0x60,%rsi
	add    $0x1,%edi
	movslq 0x38(%r13),%rax
	cmp    %edi,%eax
	jg     26238 <jpeg_calc_output_dimensions+0x88>
	mov    0x130(%r13),%rax
	mov    %r14,-0x8(%rbp)
	mov    %rcx,-0x10(%rbp)
	mov    %rax,%r14
	jmp    262a0 <jpeg_calc_output_dimensions+0xf0>
	movslq 0x1a0(%r13),%r8
	jmpq   26321 <jpeg_calc_output_dimensions+0x171>
	movslq 0x24(%r14),%rax
	imul   0x8(%r14),%eax
	movslq %eax,%rdi
	mov    0x30(%r13),%eax
	imul   %rax,%rdi
	movslq 0x198(%r13),%rax
	shl    $0x3,%eax
	movslq %eax,%rsi
	callq  4150 <jdiv_round_up@plt>
	mov    %eax,0x28(%r14)
	movslq 0x24(%r14),%rax
	imul   0xc(%r14),%eax
	movslq %eax,%rdi
	mov    0x34(%r13),%eax
	imul   %rax,%rdi
	movslq 0x19c(%r13),%rax
	shl    $0x3,%eax
	movslq %eax,%rsi
	callq  4150 <jdiv_round_up@plt>
	mov    %eax,0x2c(%r14)
	add    $0x60,%r14
	add    $0x1,%r15d
	movslq 0x38(%r13),%rdx
	cmp    %r15d,%edx
	jg     26244 <jpeg_calc_output_dimensions+0x94>
	mov    0x40(%r13),%esi
	lea    -0x1(%rsi),%eax
	cmp    $0xf,%eax
	ja     2632c <jpeg_calc_output_dimensions+0x17c>
	lea    0x33cfc(%rip),%rcx        # 59fb8 <val_ac_chrominance.16+0x49a>
	movslq (%rcx,%rax,4),%rax
	add    %rcx,%rax
	jmpq   *%rax
	movl   $0x4,0x90(%r13)
	jmp    26333 <jpeg_calc_output_dimensions+0x183>
	movslq 0x1a0(%r13),%rax
	imul   0x198(%r13),%eax
	mov    %r8,%rdx
	imul   0x8(%rsi),%edx
	lea    (%rdx,%rdx,1),%r9d
	cltd   
	idiv   %r9d
	test   %edx,%edx
	jne    26211 <jpeg_calc_output_dimensions+0x61>
	movslq 0x1a0(%r13),%rax
	imul   0x19c(%r13),%eax
	mov    %r8,%rdx
	imul   0xc(%rsi),%edx
	lea    (%rdx,%rdx,1),%r9d
	cltd   
	idiv   %r9d
	test   %edx,%edx
	jne    26211 <jpeg_calc_output_dimensions+0x61>
	add    %r8d,%r8d
	cmp    $0x7,%r8d
	jle    262d2 <jpeg_calc_output_dimensions+0x122>
	jmpq   26211 <jpeg_calc_output_dimensions+0x61>
	mov    %edx,0x90(%r13)
	movslq 0x6c(%r13),%rax
	test   %eax,%eax
	je     2639a <jpeg_calc_output_dimensions+0x1ea>
	mov    $0x1,%eax
	mov    %eax,0x94(%r13)
	mov    %r13,%rdi
	callq  26400 <use_merged_upsample>
	test   %eax,%eax
	jne    263a3 <jpeg_calc_output_dimensions+0x1f3>
	movl   $0x1,0x98(%r13)
	mov    -0x10(%rbp),%r14
	mov    -0x8(%rbp),%r13
	mov    -0x18(%rbp),%r15
	leaveq 
	retq   
	movl   $0x1,0x90(%r13)
	jmp    26333 <jpeg_calc_output_dimensions+0x183>
	lea    0x33c78(%rip),%rax        # 59ff8 <rgb_pixelsize>
	movslq (%rax,%rsi,4),%rax
	mov    %eax,0x90(%r13)
	jmp    26333 <jpeg_calc_output_dimensions+0x183>
	movl   $0x3,0x90(%r13)
	jmp    26333 <jpeg_calc_output_dimensions+0x183>
	movslq 0x90(%r13),%rax
	jmp    26340 <jpeg_calc_output_dimensions+0x190>
	movslq 0x19c(%r13),%rax
	mov    %eax,0x98(%r13)
	mov    -0x10(%rbp),%r14
	mov    -0x8(%rbp),%r13
	mov    -0x18(%rbp),%r15
	leaveq 
	retq   
	nop

00263c0 <jinit_master_decompress>:
	push   %rbp
	mov    %rsp,%rbp
	lea    0xb25(%rip),%rax        # 26ef0 <prepare_for_output_pass>
	mov    0x220(%rdi),%rcx
	mov    %rax,(%rcx)
	lea    0xd34(%rip),%rax        # 27110 <finish_output_pass>
	mov    %rax,0x8(%rcx)
	movl   $0x0,0x10(%rcx)
	movl   $0x0,0x6c(%rcx)
	callq  26b90 <master_selection>
	leaveq 
	retq   
	data16 nopw %cs:0x0(%rax,%rax,1)

0026400 <use_merged_upsample>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	xor    %eax,%eax
	movslq 0x64(%rdi),%rcx
	test   %ecx,%ecx
	je     26414 <use_merged_upsample+0x14>
	leaveq 
	retq   
	movslq 0x188(%rdi),%rcx
	test   %ecx,%ecx
	je     26421 <use_merged_upsample+0x21>
	leaveq 
	retq   
	mov    0x3c(%rdi),%ecx
	cmp    $0x3,%ecx
	je     2642b <use_merged_upsample+0x2b>
	leaveq 
	retq   
	movslq 0x38(%rdi),%rcx
	cmp    $0x3,%ecx
	je     26436 <use_merged_upsample+0x36>
	leaveq 
	retq   
	mov    0x40(%rdi),%ecx
	cmp    $0x2,%ecx
	jne    2645d <use_merged_upsample+0x5d>
	cmp    $0x10,%ecx
	je     26496 <use_merged_upsample+0x96>
	mov    0x40(%rdi),%ecx
	cmp    $0x10,%ecx
	jne    264a4 <use_merged_upsample+0xa4>
	mov    0x130(%rdi),%rdx
	movslq 0x8(%rdx),%rcx
	cmp    $0x2,%ecx
	je     264b9 <use_merged_upsample+0xb9>
	leaveq 
	retq   
	cmp    $0x10,%ecx
	je     2643e <use_merged_upsample+0x3e>
	cmp    $0x6,%ecx
	je     2643e <use_merged_upsample+0x3e>
	cmp    $0x7,%ecx
	je     2643e <use_merged_upsample+0x3e>
	cmp    $0x8,%ecx
	je     2643e <use_merged_upsample+0x3e>
	cmp    $0x9,%ecx
	je     2643e <use_merged_upsample+0x3e>
	cmp    $0xa,%ecx
	je     2643e <use_merged_upsample+0x3e>
	cmp    $0xb,%ecx
	je     2643e <use_merged_upsample+0x3e>
	cmp    $0xc,%ecx
	je     2643e <use_merged_upsample+0x3e>
	cmp    $0xd,%ecx
	je     2643e <use_merged_upsample+0x3e>
	cmp    $0xe,%ecx
	je     2643e <use_merged_upsample+0x3e>
	cmp    $0xf,%ecx
	je     2643e <use_merged_upsample+0x3e>
	leaveq 
	retq   
	movslq 0x90(%rdi),%rcx
	cmp    $0x3,%ecx
	je     26443 <use_merged_upsample+0x43>
	leaveq 
	retq   
	lea    0x33b4d(%rip),%rdx        # 59ff8 <rgb_pixelsize>
	movslq (%rdx,%rcx,4),%rcx
	cmp    0x90(%rdi),%ecx
	je     2644b <use_merged_upsample+0x4b>
	leaveq 
	retq   
	movslq 0x68(%rdx),%rcx
	cmp    $0x1,%ecx
	je     264c4 <use_merged_upsample+0xc4>
	leaveq 
	retq   
	movslq 0xc8(%rdx),%rcx
	cmp    $0x1,%ecx
	je     264d2 <use_merged_upsample+0xd2>
	leaveq 
	retq   
	movslq 0xc(%rdx),%rcx
	cmp    $0x2,%ecx
	jle    264dd <use_merged_upsample+0xdd>
	leaveq 
	retq   
	movslq 0x6c(%rdx),%rcx
	cmp    $0x1,%ecx
	je     264e8 <use_merged_upsample+0xe8>
	leaveq 
	retq   
	movslq 0xcc(%rdx),%rcx
	cmp    $0x1,%ecx
	je     264f6 <use_merged_upsample+0xf6>
	leaveq 
	retq   
	movslq 0x1a0(%rdi),%rcx
	cmp    0x24(%rdx),%ecx
	je     26504 <use_merged_upsample+0x104>
	leaveq 
	retq   
	cmp    0x84(%rdx),%ecx
	je     2650e <use_merged_upsample+0x10e>
	leaveq 
	retq   
	cmp    0xe4(%rdx),%ecx
	je     26518 <use_merged_upsample+0x118>
	leaveq 
	retq   
	mov    %rdi,-0x8(%rbp)
	callq  3d9e0 <jsimd_can_h2v2_merged_upsample>
	test   %eax,%eax
	je     2652c <use_merged_upsample+0x12c>
	mov    $0x1,%eax
	leaveq 
	retq   
	callq  3da20 <jsimd_can_h2v1_merged_upsample>
	test   %eax,%eax
	je     2653c <use_merged_upsample+0x13c>
	mov    $0x1,%eax
	leaveq 
	retq   
	callq  3d5f0 <jsimd_can_ycc_rgb>
	test   %eax,%eax
	jne    2654c <use_merged_upsample+0x14c>
	mov    $0x1,%eax
	leaveq 
	retq   
	mov    -0x8(%rbp),%rcx
	mov    0x3c(%rcx),%eax
	cmp    $0x3,%eax
	je     2655f <use_merged_upsample+0x15f>
	mov    $0x1,%eax
	leaveq 
	retq   
	mov    0x40(%rcx),%eax
	cmp    $0x2,%eax
	jne    2656b <use_merged_upsample+0x16b>
	xor    %eax,%eax
	leaveq 
	retq   
	cmp    $0x5,%eax
	ja     26577 <use_merged_upsample+0x177>
	mov    $0x1,%eax
	leaveq 
	retq   
	cmp    $0xf,%eax
	ja     26580 <use_merged_upsample+0x180>
	xor    %eax,%eax
	leaveq 
	retq   
	mov    $0x1,%eax
	leaveq 
	retq   
	nopw   0x0(%rax,%rax,1)

0026590 <jpeg_core_output_dimensions>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %r14,-0x8(%rbp)
	mov    %r15,-0x10(%rbp)
	mov    $0x8,%r15d
	mov    0x48(%rdi),%r9d
	mov    0x44(%rdi),%eax
	shl    $0x3,%eax
	cmp    %eax,%r9d
	jae    2669f <jpeg_core_output_dimensions+0x10f>
	lea    (%r9,%r9,1),%r8d
	cmp    %r8d,%eax
	jbe    266e7 <jpeg_core_output_dimensions+0x157>
	lea    (%r9,%r8,1),%ecx
	cmp    %ecx,%eax
	jbe    26721 <jpeg_core_output_dimensions+0x191>
	mov    %r9,%rdx
	shl    $0x2,%edx
	cmp    %edx,%eax
	jbe    2675f <jpeg_core_output_dimensions+0x1cf>
	lea    (%r9,%rdx,1),%esi
	cmp    %esi,%eax
	jbe    2679d <jpeg_core_output_dimensions+0x20d>
	lea    (%rcx,%rcx,1),%edx
	cmp    %edx,%eax
	jbe    267db <jpeg_core_output_dimensions+0x24b>
	add    %r9d,%edx
	cmp    %edx,%eax
	jbe    26820 <jpeg_core_output_dimensions+0x290>
	mov    %r9,%rdx
	shl    $0x3,%edx
	cmp    %edx,%eax
	jbe    26866 <jpeg_core_output_dimensions+0x2d6>
	add    %r9d,%edx
	cmp    %edx,%eax
	jbe    2689e <jpeg_core_output_dimensions+0x30e>
	lea    (%rsi,%rsi,1),%edx
	cmp    %edx,%eax
	jbe    268dc <jpeg_core_output_dimensions+0x34c>
	add    %r9d,%edx
	cmp    %edx,%eax
	jbe    26921 <jpeg_core_output_dimensions+0x391>
	shl    $0x2,%ecx
	cmp    %ecx,%eax
	jbe    26967 <jpeg_core_output_dimensions+0x3d7>
	lea    (%r9,%rcx,1),%edx
	cmp    %edx,%eax
	jbe    269ad <jpeg_core_output_dimensions+0x41d>
	add    %r8d,%ecx
	cmp    %ecx,%eax
	jbe    269f3 <jpeg_core_output_dimensions+0x463>
	mov    %r9,%rcx
	shl    $0x4,%ecx
	sub    %r9d,%ecx
	cmp    %ecx,%eax
	jbe    26a41 <jpeg_core_output_dimensions+0x4b1>
	mov    0x30(%rdi),%eax
	shl    $0x4,%rax
	mov    %rdi,%r14
	mov    %rax,%rdi
	mov    %r15,%rsi
	callq  4150 <jdiv_round_up@plt>
	mov    %eax,0x88(%r14)
	mov    0x34(%r14),%edi
	shl    $0x4,%rdi
	mov    %r15,%rsi
	callq  4150 <jdiv_round_up@plt>
	mov    %eax,0x8c(%r14)
	mov    $0x10,%r15d
	jmp    266ce <jpeg_core_output_dimensions+0x13e>
	mov    %rdi,%r14
	mov    0x30(%r14),%edi
	mov    %r15,%rsi
	callq  4150 <jdiv_round_up@plt>
	mov    %eax,0x88(%r14)
	mov    %r15,%rsi
	mov    0x34(%r14),%edi
	callq  4150 <jdiv_round_up@plt>
	mov    %eax,0x8c(%r14)
	mov    $0x1,%r15d
	mov    %r15d,0x1a0(%r14)
	mov    0x130(%r14),%rax
	add    $0x24,%rax
	xor    %ecx,%ecx
	jmpq   26aa4 <jpeg_core_output_dimensions+0x514>
	mov    0x30(%rdi),%eax
	add    %rax,%rax
	mov    %rdi,%r14
	mov    %rax,%rdi
	mov    %r15,%rsi
	callq  4150 <jdiv_round_up@plt>
	mov    %eax,0x88(%r14)
	mov    0x34(%r14),%eax
	lea    (%rax,%rax,1),%rdi
	mov    %r15,%rsi
	callq  4150 <jdiv_round_up@plt>
	mov    %eax,0x8c(%r14)
	mov    $0x2,%r15d
	jmp    266ce <jpeg_core_output_dimensions+0x13e>
	mov    0x30(%rdi),%eax
	lea    (%rax,%rax,2),%rax
	mov    %rdi,%r14
	mov    %rax,%rdi
	mov    %r15,%rsi
	callq  4150 <jdiv_round_up@plt>
	mov    %eax,0x88(%r14)
	mov    0x34(%r14),%eax
	lea    (%rax,%rax,2),%rdi
	mov    %r15,%rsi
	callq  4150 <jdiv_round_up@plt>
	mov    %eax,0x8c(%r14)
	mov    $0x3,%r15d
	jmpq   266ce <jpeg_core_output_dimensions+0x13e>
	mov    0x30(%rdi),%eax
	shl    $0x2,%rax
	mov    %rdi,%r14
	mov    %rax,%rdi
	mov    %r15,%rsi
	callq  4150 <jdiv_round_up@plt>
	mov    %eax,0x88(%r14)
	mov    0x34(%r14),%edi
	shl    $0x2,%rdi
	mov    %r15,%rsi
	callq  4150 <jdiv_round_up@plt>
	mov    %eax,0x8c(%r14)
	mov    $0x4,%r15d
	jmpq   266ce <jpeg_core_output_dimensions+0x13e>
	mov    0x30(%rdi),%eax
	lea    (%rax,%rax,4),%rax
	mov    %rdi,%r14
	mov    %rax,%rdi
	mov    %r15,%rsi
	callq  4150 <jdiv_round_up@plt>
	mov    %eax,0x88(%r14)
	mov    0x34(%r14),%eax
	lea    (%rax,%rax,4),%rdi
	mov    %r15,%rsi
	callq  4150 <jdiv_round_up@plt>
	mov    %eax,0x8c(%r14)
	mov    $0x5,%r15d
	jmpq   266ce <jpeg_core_output_dimensions+0x13e>
	mov    0x30(%rdi),%eax
	lea    (%rax,%rax,2),%rax
	add    %rax,%rax
	mov    %rdi,%r14
	mov    %rax,%rdi
	mov    %r15,%rsi
	callq  4150 <jdiv_round_up@plt>
	mov    %eax,0x88(%r14)
	mov    0x34(%r14),%eax
	lea    (%rax,%rax,2),%rax
	lea    (%rax,%rax,1),%rdi
	mov    %r15,%rsi
	callq  4150 <jdiv_round_up@plt>
	mov    %eax,0x8c(%r14)
	mov    $0x6,%r15d
	jmpq   266ce <jpeg_core_output_dimensions+0x13e>
	mov    0x30(%rdi),%ecx
	lea    (%rcx,%rcx,2),%rax
	lea    (%rcx,%rax,2),%rax
	mov    %rdi,%r14
	mov    %rax,%rdi
	mov    %r15,%rsi
	callq  4150 <jdiv_round_up@plt>
	mov    %eax,0x88(%r14)
	mov    0x34(%r14),%ecx
	lea    (%rcx,%rcx,2),%rax
	lea    (%rcx,%rax,2),%rdi
	mov    %r15,%rsi
	callq  4150 <jdiv_round_up@plt>
	mov    %eax,0x8c(%r14)
	mov    $0x7,%r15d
	jmpq   266ce <jpeg_core_output_dimensions+0x13e>
	mov    0x30(%rdi),%eax
	shl    $0x3,%rax
	mov    %rdi,%r14
	mov    %rax,%rdi
	mov    %r15,%rsi
	callq  4150 <jdiv_round_up@plt>
	mov    %eax,0x88(%r14)
	mov    0x34(%r14),%edi
	shl    $0x3,%rdi
	mov    %r15,%rsi
	callq  4150 <jdiv_round_up@plt>
	mov    %eax,0x8c(%r14)
	jmpq   266ce <jpeg_core_output_dimensions+0x13e>
	mov    0x30(%rdi),%eax
	lea    (%rax,%rax,8),%rax
	mov    %rdi,%r14
	mov    %rax,%rdi
	mov    %r15,%rsi
	callq  4150 <jdiv_round_up@plt>
	mov    %eax,0x88(%r14)
	mov    0x34(%r14),%eax
	lea    (%rax,%rax,8),%rdi
	mov    %r15,%rsi
	callq  4150 <jdiv_round_up@plt>
	mov    %eax,0x8c(%r14)
	mov    $0x9,%r15d
	jmpq   266ce <jpeg_core_output_dimensions+0x13e>
	mov    0x30(%rdi),%eax
	lea    (%rax,%rax,4),%rax
	add    %rax,%rax
	mov    %rdi,%r14
	mov    %rax,%rdi
	mov    %r15,%rsi
	callq  4150 <jdiv_round_up@plt>
	mov    %eax,0x88(%r14)
	mov    0x34(%r14),%eax
	lea    (%rax,%rax,4),%rax
	lea    (%rax,%rax,1),%rdi
	mov    %r15,%rsi
	callq  4150 <jdiv_round_up@plt>
	mov    %eax,0x8c(%r14)
	mov    $0xa,%r15d
	jmpq   266ce <jpeg_core_output_dimensions+0x13e>
	mov    0x30(%rdi),%ecx
	lea    (%rcx,%rcx,4),%rax
	lea    (%rcx,%rax,2),%rax
	mov    %rdi,%r14
	mov    %rax,%rdi
	mov    %r15,%rsi
	callq  4150 <jdiv_round_up@plt>
	mov    %eax,0x88(%r14)
	mov    0x34(%r14),%ecx
	lea    (%rcx,%rcx,4),%rax
	lea    (%rcx,%rax,2),%rdi
	mov    %r15,%rsi
	callq  4150 <jdiv_round_up@plt>
	mov    %eax,0x8c(%r14)
	mov    $0xb,%r15d
	jmpq   266ce <jpeg_core_output_dimensions+0x13e>
	mov    0x30(%rdi),%eax
	lea    (%rax,%rax,2),%rax
	shl    $0x2,%rax
	mov    %rdi,%r14
	mov    %rax,%rdi
	mov    %r15,%rsi
	callq  4150 <jdiv_round_up@plt>
	mov    %eax,0x88(%r14)
	mov    0x34(%r14),%eax
	lea    (%rax,%rax,2),%rdi
	shl    $0x2,%rdi
	mov    %r15,%rsi
	callq  4150 <jdiv_round_up@plt>
	mov    %eax,0x8c(%r14)
	mov    $0xc,%r15d
	jmpq   266ce <jpeg_core_output_dimensions+0x13e>
	mov    0x30(%rdi),%ecx
	lea    (%rcx,%rcx,2),%rax
	lea    (%rcx,%rax,4),%rax
	mov    %rdi,%r14
	mov    %rax,%rdi
	mov    %r15,%rsi
	callq  4150 <jdiv_round_up@plt>
	mov    %eax,0x88(%r14)
	mov    0x34(%r14),%ecx
	lea    (%rcx,%rcx,2),%rax
	lea    (%rcx,%rax,4),%rdi
	mov    %r15,%rsi
	callq  4150 <jdiv_round_up@plt>
	mov    %eax,0x8c(%r14)
	mov    $0xd,%r15d
	jmpq   266ce <jpeg_core_output_dimensions+0x13e>
	mov    0x30(%rdi),%ecx
	lea    (%rcx,%rcx,2),%rax
	shl    $0x2,%rax
	lea    (%rax,%rcx,2),%rax
	mov    %rdi,%r14
	mov    %rax,%rdi
	mov    %r15,%rsi
	callq  4150 <jdiv_round_up@plt>
	mov    %eax,0x88(%r14)
	mov    0x34(%r14),%ecx
	lea    (%rcx,%rcx,2),%rax
	shl    $0x2,%rax
	lea    (%rax,%rcx,2),%rdi
	mov    %r15,%rsi
	callq  4150 <jdiv_round_up@plt>
	mov    %eax,0x8c(%r14)
	mov    $0xe,%r15d
	jmpq   266ce <jpeg_core_output_dimensions+0x13e>
	mov    0x30(%rdi),%ecx
	mov    %rcx,%rax
	shl    $0x4,%rax
	sub    %rcx,%rax
	mov    %rdi,%r14
	mov    %rax,%rdi
	mov    %r15,%rsi
	callq  4150 <jdiv_round_up@plt>
	mov    %eax,0x88(%r14)
	mov    0x34(%r14),%eax
	mov    %rax,%rdi
	shl    $0x4,%rdi
	sub    %rax,%rdi
	mov    %r15,%rsi
	callq  4150 <jdiv_round_up@plt>
	mov    %eax,0x8c(%r14)
	mov    $0xf,%r15d
	jmpq   266ce <jpeg_core_output_dimensions+0x13e>
	movslq 0x1a0(%r14),%rdx
	mov    %edx,(%rax)
	movslq 0x1a0(%r14),%rdx
	mov    %edx,(%rax)
	add    $0x1,%ecx
	add    $0x60,%rax
	movslq 0x38(%r14),%rdx
	cmp    %ecx,%edx
	jg     26a8b <jpeg_core_output_dimensions+0x4fb>
	mov    -0x10(%rbp),%r15
	mov    -0x8(%rbp),%r14
	leaveq 
	retq   
	nopw   %cs:0x0(%rax,%rax,1)

0026ac0 <prepare_range_limit_table>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %r15,-0x20(%rbp)
	mov    %r12,-0x8(%rbp)
	mov    %r13,-0x10(%rbp)
	mov    %r14,-0x18(%rbp)
	mov    0x8(%rdi),%rax
	mov    (%rax),%rax
	mov    $0x1,%esi
	mov    $0x580,%edx
	mov    %rdi,%r12
	callq  *%rax
	mov    %rax,%r15
	lea    0x100(%r15),%r13
	mov    %r13,0x1a8(%r12)
	xor    %r14d,%r14d
	mov    $0x100,%edx
	mov    %r15,%rdi
	mov    %r14,%rsi
	callq  41e0 <memset@plt>
	mov    %r14,%rcx
	jmp    26b23 <prepare_range_limit_table+0x63>
	movslq %ecx,%rax
	mov    %cl,0x0(%r13,%rax,1)
	add    $0x1,%ecx
	cmp    $0xff,%ecx
	jle    26b18 <prepare_range_limit_table+0x58>
	mov    $0x80,%r13d
	mov    %r13,%rcx
	jmp    26b45 <prepare_range_limit_table+0x85>
	movslq %ecx,%rax
	movb   $0xff,0x180(%r15,%rax,1)
	add    $0x1,%ecx
	cmp    $0x1ff,%ecx
	jle    26b36 <prepare_range_limit_table+0x76>
	mov    %r14,%rsi
	lea    0x380(%r15),%rdi
	mov    $0x180,%edx
	callq  41e0 <memset@plt>
	lea    0x500(%r15),%rdi
	mov    0x1a8(%r12),%rsi
	mov    %r13,%rdx
	callq  42c0 <memcpy@plt>
	mov    -0x18(%rbp),%r14
	mov    -0x10(%rbp),%r13
	mov    -0x8(%rbp),%r12
	mov    -0x20(%rbp),%r15
	leaveq 
	retq   
	nopw   0x0(%rax,%rax,1)

0026b90 <master_selection>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %r14,-0x10(%rbp)
	mov    %r15,-0x18(%rbp)
	mov    0x220(%rdi),%r15
	mov    %r15,-0x8(%rbp)
	mov    %rdi,%r14
	callq  42d0 <jpeg_calc_output_dimensions@plt>
	mov    %r14,%rdi
	callq  26ac0 <prepare_range_limit_table>
	movslq 0x90(%r14),%rax
	mov    0x88(%r14),%ecx
	imul   %rcx,%rax
	mov    %eax,%ecx
	cmp    %rax,%rcx
	je     26be9 <master_selection+0x59>
	mov    (%r14),%rax
	movl   $0x46,0x28(%rax)
	mov    (%r14),%rax
	mov    (%rax),%rax
	mov    %r14,%rdi
	callq  *%rax
	movl   $0x0,0x70(%r15)
	mov    %r14,%rdi
	callq  26400 <use_merged_upsample>
	mov    %eax,0x74(%r15)
	movq   $0x0,0x78(%r15)
	movq   $0x0,0x80(%r15)
	movslq 0x6c(%r14),%rax
	test   %eax,%eax
	jne    26c64 <master_selection+0xd4>
	movl   $0x0,0x7c(%r14)
	movl   $0x0,0x80(%r14)
	movl   $0x0,0x84(%r14)
	movslq 0x6c(%r14),%rax
	test   %eax,%eax
	jne    26c6e <master_selection+0xde>
	movslq 0x5c(%r14),%rax
	test   %eax,%eax
	jne    26cd4 <master_selection+0x144>
	movslq 0x74(%r15),%rax
	test   %eax,%eax
	jne    26cbd <master_selection+0x12d>
	mov    %r14,%rdi
	callq  4360 <jinit_color_deconverter@plt>
	mov    %r14,%rdi
	callq  43e0 <jinit_upsampler@plt>
	jmp    26cc5 <master_selection+0x135>
	movslq 0x58(%r14),%rax
	test   %eax,%eax
	jne    26c36 <master_selection+0xa6>
	jmp    26c18 <master_selection+0x88>
	movslq 0x5c(%r14),%rax
	test   %eax,%eax
	je     26c8b <master_selection+0xfb>
	mov    (%r14),%rax
	movl   $0x2f,0x28(%rax)
	mov    (%r14),%rax
	mov    (%rax),%rax
	mov    %r14,%rdi
	callq  *%rax
	movslq 0x90(%r14),%rax
	cmp    $0x3,%eax
	jne    26d07 <master_selection+0x177>
	mov    0xa0(%r14),%rax
	test   %rax,%rax
	jne    26d80 <master_selection+0x1f0>
	movslq 0x74(%r14),%rax
	test   %eax,%eax
	jne    26d8d <master_selection+0x1fd>
	movl   $0x1,0x7c(%r14)
	jmp    26d30 <master_selection+0x1a0>
	mov    %r14,%rdi
	callq  4290 <jinit_merged_upsampler@plt>
	movslq 0x84(%r14),%rsi
	mov    %r14,%rdi
	callq  4220 <jinit_d_post_controller@plt>
	mov    %r14,%rdi
	callq  4300 <jinit_inverse_dct@plt>
	movslq 0x13c(%r14),%rax
	test   %eax,%eax
	jne    26d9a <master_selection+0x20a>
	movslq 0x138(%r14),%rax
	test   %eax,%eax
	jne    26e26 <master_selection+0x296>
	mov    %r14,%rdi
	callq  40b0 <jinit_huff_decoder@plt>
	jmpq   26da2 <master_selection+0x212>
	movl   $0x1,0x7c(%r14)
	movl   $0x0,0x80(%r14)
	movl   $0x0,0x84(%r14)
	movq   $0x0,0xa0(%r14)
	movslq 0x7c(%r14),%rax
	test   %eax,%eax
	je     26d4b <master_selection+0x1bb>
	mov    %r14,%rdi
	callq  4230 <jinit_1pass_quantizer@plt>
	mov    0x270(%r14),%rax
	mov    %rax,0x78(%r15)
	movslq 0x84(%r14),%rax
	test   %eax,%eax
	jne    26d65 <master_selection+0x1d5>
	movslq 0x80(%r14),%rax
	test   %eax,%eax
	je     26c3e <master_selection+0xae>
	mov    %r14,%rdi
	callq  4100 <jinit_2pass_quantizer@plt>
	mov    0x270(%r14),%rax
	mov    %rax,0x80(%r15)
	jmpq   26c3e <master_selection+0xae>
	movl   $0x1,0x80(%r14)
	jmp    26d30 <master_selection+0x1a0>
	movl   $0x1,0x84(%r14)
	jmp    26d30 <master_selection+0x1a0>
	mov    %r14,%rdi
	callq  4090 <jinit_arith_decoder@plt>
	xor    %r15d,%r15d
	mov    $0x1,%esi
	mov    0x240(%r14),%rax
	movslq 0x20(%rax),%rax
	test   %eax,%eax
	je     26e33 <master_selection+0x2a3>
	mov    %r14,%rdi
	callq  4050 <jinit_d_coef_controller@plt>
	movslq 0x5c(%r14),%rax
	test   %eax,%eax
	jne    26dd4 <master_selection+0x244>
	mov    %r15,%rsi
	mov    %r14,%rdi
	callq  4250 <jinit_d_main_controller@plt>
	mov    0x8(%r14),%rax
	mov    0x30(%rax),%rax
	mov    %r14,%rdi
	callq  *%rax
	mov    0x240(%r14),%rax
	mov    0x10(%rax),%rax
	mov    %r14,%rdi
	callq  *%rax
	mov    0x220(%r14),%rax
	movl   $0x0,0x14(%rax)
	mov    0x1d8(%r14),%eax
	add    $0xffffffff,%eax
	mov    0x220(%r14),%rcx
	mov    %eax,0x18(%rcx)
	mov    0x10(%r14),%rax
	test   %rax,%rax
	jne    26e47 <master_selection+0x2b7>
	mov    -0x18(%rbp),%r15
	mov    -0x10(%rbp),%r14
	leaveq 
	retq   
	mov    %r14,%rdi
	callq  41d0 <jinit_phuff_decoder@plt>
	jmpq   26da2 <master_selection+0x212>
	movslq 0x58(%r14),%rax
	test   %eax,%eax
	jne    26db9 <master_selection+0x229>
	mov    %r15,%rsi
	jmpq   26db9 <master_selection+0x229>
	movslq 0x58(%r14),%rax
	test   %eax,%eax
	je     26e59 <master_selection+0x2c9>
	mov    -0x18(%rbp),%r15
	mov    -0x10(%rbp),%r14
	leaveq 
	retq   
	mov    0x240(%r14),%rax
	movslq 0x20(%rax),%rax
	test   %eax,%eax
	jne    26e72 <master_selection+0x2e2>
	mov    -0x18(%rbp),%r15
	mov    -0x10(%rbp),%r14
	leaveq 
	retq   
	movslq 0x138(%r14),%rax
	test   %eax,%eax
	jne    26e83 <master_selection+0x2f3>
	movslq 0x38(%r14),%rax
	jmp    26e8b <master_selection+0x2fb>
	movslq 0x38(%r14),%rax
	lea    0x2(%rax,%rax,2),%eax
	mov    0x10(%r14),%rcx
	movq   $0x0,0x8(%rcx)
	movslq %eax,%rax
	mov    0x1a4(%r14),%ecx
	imul   %rcx,%rax
	mov    0x10(%r14),%rcx
	mov    %rax,0x10(%rcx)
	mov    0x10(%r14),%rax
	movl   $0x0,0x18(%rax)
	mov    0x10(%r14),%rcx
	movslq 0x84(%r14),%rax
	test   %eax,%eax
	jne    26ece <master_selection+0x33e>
	mov    $0x2,%eax
	jmp    26ed3 <master_selection+0x343>
	mov    $0x3,%eax
	mov    %eax,0x1c(%rcx)
	mov    -0x8(%rbp),%rcx
	movslq 0x70(%rcx),%rax
	add    $0x1,%eax
	mov    %eax,0x70(%rcx)
	mov    -0x18(%rbp),%r15
	mov    -0x10(%rbp),%r14
	leaveq 
	retq   
	xchg   %ax,%ax

0026ef0 <prepare_for_output_pass>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %r14,-0x8(%rbp)
	mov    %r15,-0x10(%rbp)
	xor    %esi,%esi
	mov    0x220(%rdi),%r15
	movslq 0x10(%r15),%rax
	test   %eax,%eax
	jne    26fa6 <prepare_for_output_pass+0xb6>
	movslq 0x6c(%rdi),%rax
	test   %eax,%eax
	jne    26ff8 <prepare_for_output_pass+0x108>
	mov    %rdi,%r14
	mov    0x258(%r14),%rax
	mov    (%rax),%rax
	mov    %r14,%rdi
	callq  *%rax
	mov    0x230(%r14),%rax
	mov    0x10(%rax),%rax
	mov    %r14,%rdi
	callq  *%rax
	movslq 0x5c(%r14),%rax
	test   %eax,%eax
	jne    26fe5 <prepare_for_output_pass+0xf5>
	movslq 0x74(%r15),%rax
	test   %eax,%eax
	jne    26f66 <prepare_for_output_pass+0x76>
	mov    0x268(%r14),%rax
	mov    (%rax),%rax
	mov    %r14,%rdi
	callq  *%rax
	mov    0x260(%r14),%rax
	mov    (%rax),%rax
	mov    %r14,%rdi
	callq  *%rax
	movslq 0x6c(%r14),%rax
	test   %eax,%eax
	je     26f90 <prepare_for_output_pass+0xa0>
	mov    0x270(%r14),%rax
	mov    (%rax),%rax
	movslq 0x10(%r15),%rsi
	mov    %r14,%rdi
	callq  *%rax
	mov    0x238(%r14),%rax
	mov    (%rax),%rax
	movslq 0x10(%r15),%rcx
	test   %ecx,%ecx
	jne    2700c <prepare_for_output_pass+0x11c>
	xor    %esi,%esi
	jmp    27011 <prepare_for_output_pass+0x121>
	movl   $0x0,0x10(%r15)
	mov    0x270(%rdi),%rax
	mov    (%rax),%rax
	mov    %rdi,%r14
	callq  *%rax
	mov    0x238(%r14),%rax
	mov    (%rax),%rax
	mov    %r14,%rdi
	mov    $0x2,%esi
	callq  *%rax
	mov    0x228(%r14),%rax
	mov    (%rax),%rax
	mov    %r14,%rdi
	mov    $0x2,%esi
	callq  *%rax
	mov    0x10(%r14),%rax
	test   %rax,%rax
	jne    27029 <prepare_for_output_pass+0x139>
	mov    -0x10(%rbp),%r15
	mov    -0x8(%rbp),%r14
	leaveq 
	retq   
	mov    0xa0(%rdi),%rax
	test   %rax,%rax
	je     2704a <prepare_for_output_pass+0x15a>
	mov    %rdi,%r14
	jmpq   26f24 <prepare_for_output_pass+0x34>
	mov    $0x3,%esi
	mov    %r14,%rdi
	callq  *%rax
	mov    0x228(%r14),%rax
	mov    (%rax),%rax
	mov    %r14,%rdi
	xor    %esi,%esi
	callq  *%rax
	jmp    26fe5 <prepare_for_output_pass+0xf5>
	movslq 0x70(%r15),%rcx
	mov    %ecx,0x18(%rax)
	movslq 0x70(%r15),%rsi
	mov    0x10(%r14),%rdx
	mov    $0x1,%ecx
	movslq 0x10(%r15),%rax
	test   %eax,%eax
	jne    27074 <prepare_for_output_pass+0x184>
	mov    %rcx,%rax
	jmp    27079 <prepare_for_output_pass+0x189>
	movslq 0x74(%rdi),%rax
	test   %eax,%eax
	jne    27090 <prepare_for_output_pass+0x1a0>
	movslq 0x7c(%rdi),%rax
	test   %eax,%eax
	jne    270b9 <prepare_for_output_pass+0x1c9>
	mov    (%rdi),%rax
	movl   $0x2e,0x28(%rax)
	mov    (%rdi),%rax
	mov    (%rax),%rax
	mov    %rdi,%r14
	callq  *%rax
	jmpq   26f24 <prepare_for_output_pass+0x34>
	mov    $0x2,%eax
	add    %esi,%eax
	mov    %eax,0x1c(%rdx)
	movslq 0x58(%r14),%rax
	test   %eax,%eax
	jne    270cc <prepare_for_output_pass+0x1dc>
	mov    -0x10(%rbp),%r15
	mov    -0x8(%rbp),%r14
	leaveq 
	retq   
	movslq 0x84(%rdi),%rax
	test   %eax,%eax
	je     27052 <prepare_for_output_pass+0x162>
	mov    0x80(%r15),%rax
	mov    %rax,0x270(%rdi)
	movl   $0x1,0x10(%r15)
	mov    %rdi,%r14
	jmpq   26f24 <prepare_for_output_pass+0x34>
	mov    0x78(%r15),%rax
	mov    %rax,0x270(%rdi)
	mov    %rdi,%r14
	jmpq   26f24 <prepare_for_output_pass+0x34>
	mov    0x240(%r14),%rax
	movslq 0x24(%rax),%rax
	test   %eax,%eax
	je     270e5 <prepare_for_output_pass+0x1f5>
	mov    -0x10(%rbp),%r15
	mov    -0x8(%rbp),%r14
	leaveq 
	retq   
	movslq 0x84(%r14),%rax
	test   %eax,%eax
	je     270f5 <prepare_for_output_pass+0x205>
	mov    $0x2,%ecx
	mov    0x10(%r14),%rax
	add    0x1c(%rax),%ecx
	mov    %ecx,0x1c(%rax)
	mov    -0x10(%rbp),%r15
	mov    -0x8(%rbp),%r14
	leaveq 
	retq   
	nopl   0x0(%rax)

0027110 <finish_output_pass>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    0x220(%rdi),%rax
	movslq 0x6c(%rdi),%rcx
	test   %ecx,%ecx
	je     27142 <finish_output_pass+0x32>
	mov    0x270(%rdi),%rcx
	mov    0x10(%rcx),%rcx
	mov    %r15,-0x8(%rbp)
	mov    %rax,%r15
	callq  *%rcx
	mov    %r15,%rax
	mov    -0x8(%rbp),%r15
	movslq 0x70(%rax),%rcx
	add    $0x1,%ecx
	mov    %ecx,0x70(%rax)
	leaveq 
	retq   
	xchg   %ax,%ax

0027150 <jinit_merged_upsampler>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %r15,-0x10(%rbp)
	mov    %r14,-0x8(%rbp)
	mov    0x8(%rdi),%rax
	mov    (%rax),%rax
	mov    $0x1,%esi
	mov    $0x58,%edx
	mov    %rdi,%r14
	callq  *%rax
	mov    %rax,0x260(%r14)
	lea    0x1ebc(%rip),%rcx        # 29040 <start_pass_merged_upsample>
	mov    %rcx,(%rax)
	movl   $0x0,0x10(%rax)
	mov    0x90(%r14),%ecx
	imul   0x88(%r14),%ecx
	mov    %ecx,0x4c(%rax)
	movslq 0x19c(%r14),%rcx
	cmp    $0x2,%ecx
	je     271d0 <jinit_merged_upsampler+0x80>
	lea    0x1fdd(%rip),%rcx        # 29190 <merged_1v_upsample>
	mov    %rcx,0x8(%rax)
	mov    %rax,%r15
	callq  3da20 <jsimd_can_h2v1_merged_upsample>
	test   %eax,%eax
	jne    271f4 <jinit_merged_upsampler+0xa4>
	lea    0x2016(%rip),%rax        # 291e0 <h2v1_merged_upsample>
	mov    %rax,0x18(%r15)
	jmp    271ff <jinit_merged_upsampler+0xaf>
	lea    0x1e89(%rip),%rcx        # 29060 <merged_2v_upsample>
	mov    %rcx,0x8(%rax)
	mov    %rax,%r15
	callq  3d9e0 <jsimd_can_h2v2_merged_upsample>
	test   %eax,%eax
	jne    27212 <jinit_merged_upsampler+0xc2>
	lea    0x2042(%rip),%rax        # 29230 <h2v2_merged_upsample>
	mov    %rax,0x18(%r15)
	jmp    2721d <jinit_merged_upsampler+0xcd>
	lea    0x168d5(%rip),%rax        # 3dad0 <jsimd_h2v1_merged_upsample>
	mov    %rax,0x18(%r15)
	mov    0x40(%r14),%eax
	cmp    $0x10,%eax
	je     27252 <jinit_merged_upsampler+0x102>
	movq   $0x0,0x40(%r15)
	jmp    27240 <jinit_merged_upsampler+0xf0>
	lea    0x16847(%rip),%rax        # 3da60 <jsimd_h2v2_merged_upsample>
	mov    %rax,0x18(%r15)
	mov    0x40(%r14),%eax
	cmp    $0x10,%eax
	je     27267 <jinit_merged_upsampler+0x117>
	mov    0x8(%r14),%rax
	mov    0x8(%rax),%rax
	mov    0x4c(%r15),%edx
	mov    %r14,%rdi
	mov    $0x1,%esi
	callq  *%rax
	mov    %rax,0x40(%r15)
	mov    %r14,%rdi
	callq  28f20 <build_ycc_rgb_table>
	mov    -0x8(%rbp),%r14
	mov    -0x10(%rbp),%r15
	leaveq 
	retq   
	mov    0x70(%r14),%eax
	test   %eax,%eax
	jne    2727c <jinit_merged_upsampler+0x12c>
	lea    0x380f(%rip),%rax        # 2aa70 <h2v1_merged_upsample_565>
	mov    %rax,0x18(%r15)
	jmp    27208 <jinit_merged_upsampler+0xb8>
	mov    0x70(%r14),%eax
	test   %eax,%eax
	jne    2728c <jinit_merged_upsampler+0x13c>
	lea    0x38fa(%rip),%rax        # 2ab70 <h2v2_merged_upsample_565>
	mov    %rax,0x18(%r15)
	jmp    27226 <jinit_merged_upsampler+0xd6>
	lea    0x386d(%rip),%rax        # 2aaf0 <h2v1_merged_upsample_565D>
	mov    %rax,0x18(%r15)
	jmpq   27208 <jinit_merged_upsampler+0xb8>
	lea    0x395d(%rip),%rax        # 2abf0 <h2v2_merged_upsample_565D>
	mov    %rax,0x18(%r15)
	jmp    27226 <jinit_merged_upsampler+0xd6>
	nopl   0x0(%rax)

00272a0 <h2v1_merged_upsample_internal>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x40,%rsp
	mov    %r15,-0x28(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %rdi,-0x30(%rbp)
	mov    %rbx,-0x8(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    0x1a8(%rdi),%r13
	mov    0x260(%rdi),%rbx
	mov    0x28(%rbx),%r12
	mov    0x30(%rbx),%rax
	mov    %rax,-0x40(%rbp)
	mov    0x38(%rbx),%r8
	mov    %r8,-0x38(%rbp)
	mov    0x20(%rbx),%r11
	mov    (%rsi),%rbx
	mov    %edx,%r9d
	mov    (%rbx,%r9,8),%rdx
	mov    0x8(%rsi),%rbx
	mov    (%rbx,%r9,8),%rbx
	mov    0x10(%rsi),%rsi
	mov    (%rsi,%r9,8),%r9
	mov    (%rcx),%rsi
	mov    0x88(%rdi),%ecx
	shr    %ecx
	jmpq   273ae <h2v1_merged_upsample_internal+0x10e>
	movzbl (%r9),%r10d
	movslq (%r11,%r10,4),%r15
	movzbl (%rdx),%edi
	lea    (%rdi,%r15,1),%r14d
	movslq %r14d,%r14
	movzbl 0x0(%r13,%r14,1),%r14d
	mov    (%rax,%r10,8),%rax
	movzbl (%rbx),%r10d
	add    (%r8,%r10,8),%rax
	sar    $0x10,%rax
	lea    (%rdi,%rax,1),%r8d
	movslq %r8d,%r8
	movslq (%r12,%r10,4),%r10
	mov    %r14b,(%rsi)
	movzbl 0x0(%r13,%r8,1),%r8d
	mov    %r8b,0x1(%rsi)
	add    %r10d,%edi
	movslq %edi,%rdi
	movzbl (%rdi,%r13,1),%edi
	mov    %dil,0x2(%rsi)
	movzbl 0x1(%rdx),%r8d
	lea    (%r8,%r15,1),%edi
	movslq %edi,%rdi
	movzbl 0x0(%r13,%rdi,1),%edi
	mov    %dil,0x3(%rsi)
	add    %r8d,%eax
	movslq %eax,%rax
	movzbl 0x0(%r13,%rax,1),%eax
	mov    %al,0x4(%rsi)
	lea    (%r8,%r10,1),%eax
	movslq %eax,%rax
	movzbl (%rax,%r13,1),%eax
	mov    %al,0x5(%rsi)
	add    $0x2,%rdx
	add    $0x1,%rbx
	add    $0x1,%r9
	add    $0x6,%rsi
	add    $0xffffffff,%ecx
	mov    -0x38(%rbp),%r8
	mov    -0x40(%rbp),%rax
	test   %ecx,%ecx
	jne    27310 <h2v1_merged_upsample_internal+0x70>
	mov    -0x30(%rbp),%rcx
	mov    0x88(%rcx),%ecx
	and    $0x1,%ecx
	test   %ecx,%ecx
	jne    273dd <h2v1_merged_upsample_internal+0x13d>
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	mov    -0x20(%rbp),%r14
	mov    -0x28(%rbp),%r15
	leaveq 
	retq   
	movzbl (%rdx),%ecx
	movzbl (%r9),%edi
	mov    %rcx,%rdx
	add    (%r11,%rdi,4),%edx
	movslq %edx,%rdx
	movzbl 0x0(%r13,%rdx,1),%edx
	mov    (%rax,%rdi,8),%rax
	movzbl (%rbx),%edi
	add    (%r8,%rdi,8),%rax
	sar    $0x10,%rax
	add    %ecx,%eax
	movslq %eax,%rax
	add    (%r12,%rdi,4),%ecx
	mov    %dl,(%rsi)
	movzbl 0x0(%r13,%rax,1),%eax
	mov    %al,0x1(%rsi)
	movslq %ecx,%rax
	movzbl 0x0(%r13,%rax,1),%eax
	mov    %al,0x2(%rsi)
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	mov    -0x20(%rbp),%r14
	mov    -0x28(%rbp),%r15
	leaveq 
	retq   
	nopl   0x0(%rax)

0027440 <h2v2_merged_upsample_internal>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x50,%rsp
	mov    %r15,-0x28(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    %rdi,-0x30(%rbp)
	mov    %rbx,-0x8(%rbp)
	mov    0x1a8(%rdi),%r15
	mov    0x260(%rdi),%rbx
	mov    0x28(%rbx),%r14
	mov    0x30(%rbx),%rax
	mov    %rax,-0x40(%rbp)
	mov    0x38(%rbx),%r9
	mov    %r9,-0x38(%rbp)
	mov    0x20(%rbx),%r10
	mov    %r10,-0x48(%rbp)
	mov    (%rsi),%r11
	lea    (%rdx,%rdx,1),%r8d
	lea    0x1(%r8),%ebx
	mov    %ebx,%ebx
	mov    (%r11,%rbx,8),%rbx
	mov    %r8d,%r8d
	mov    (%r11,%r8,8),%r8
	mov    0x8(%rsi),%r11
	mov    %edx,%r12d
	mov    (%r11,%r12,8),%r11
	mov    0x10(%rsi),%rdx
	mov    (%rdx,%r12,8),%r12
	mov    (%rcx),%rdx
	mov    0x8(%rcx),%rsi
	mov    0x88(%rdi),%ecx
	shr    %ecx
	jmpq   275d3 <h2v2_merged_upsample_internal+0x193>
	movzbl (%r12),%r13d
	movslq (%r10,%r13,4),%r10
	movzbl (%r8),%edi
	mov    %rcx,-0x50(%rbp)
	lea    (%rdi,%r10,1),%ecx
	movslq %ecx,%rcx
	movzbl (%r15,%rcx,1),%ecx
	mov    (%rax,%r13,8),%rax
	movzbl (%r11),%r13d
	add    (%r9,%r13,8),%rax
	sar    $0x10,%rax
	lea    (%rdi,%rax,1),%r9d
	movslq %r9d,%r9
	movslq (%r14,%r13,4),%r13
	mov    %cl,(%rdx)
	movzbl (%r15,%r9,1),%ecx
	mov    %cl,0x1(%rdx)
	lea    (%rdi,%r13,1),%ecx
	movslq %ecx,%rcx
	movzbl (%rcx,%r15,1),%ecx
	mov    %cl,0x2(%rdx)
	movzbl 0x1(%r8),%edi
	lea    (%rdi,%r10,1),%ecx
	movslq %ecx,%rcx
	movzbl (%r15,%rcx,1),%ecx
	mov    %cl,0x3(%rdx)
	lea    (%rdi,%rax,1),%ecx
	movslq %ecx,%rcx
	movzbl (%r15,%rcx,1),%ecx
	mov    %cl,0x4(%rdx)
	lea    (%rdi,%r13,1),%ecx
	movslq %ecx,%rcx
	movzbl (%rcx,%r15,1),%ecx
	mov    %cl,0x5(%rdx)
	movzbl (%rbx),%edi
	lea    (%rdi,%r10,1),%ecx
	movslq %ecx,%rcx
	movzbl (%r15,%rcx,1),%ecx
	mov    %cl,(%rsi)
	lea    (%rdi,%rax,1),%ecx
	movslq %ecx,%rcx
	movzbl (%r15,%rcx,1),%ecx
	mov    %cl,0x1(%rsi)
	lea    (%rdi,%r13,1),%ecx
	movslq %ecx,%rcx
	movzbl (%rcx,%r15,1),%ecx
	mov    %cl,0x2(%rsi)
	movzbl 0x1(%rbx),%edi
	lea    (%rdi,%r10,1),%ecx
	movslq %ecx,%rcx
	movzbl (%r15,%rcx,1),%ecx
	mov    %cl,0x3(%rsi)
	add    %edi,%eax
	movslq %eax,%rax
	movzbl (%r15,%rax,1),%eax
	mov    %al,0x4(%rsi)
	lea    (%rdi,%r13,1),%eax
	movslq %eax,%rax
	movzbl (%rax,%r15,1),%eax
	mov    %al,0x5(%rsi)
	add    $0x2,%rbx
	add    $0x2,%r8
	add    $0x1,%r11
	add    $0x1,%r12
	add    $0x6,%rdx
	add    $0x6,%rsi
	mov    -0x50(%rbp),%rax
	lea    -0x1(%rax),%ecx
	mov    -0x38(%rbp),%r9
	mov    -0x40(%rbp),%rax
	mov    -0x48(%rbp),%r10
	test   %ecx,%ecx
	jne    274c9 <h2v2_merged_upsample_internal+0x89>
	mov    -0x30(%rbp),%rcx
	mov    0x88(%rcx),%ecx
	and    $0x1,%ecx
	test   %ecx,%ecx
	jne    27602 <h2v2_merged_upsample_internal+0x1c2>
	mov    -0x8(%rbp),%rbx
	mov    -0x10(%rbp),%r12
	mov    -0x18(%rbp),%r13
	mov    -0x20(%rbp),%r14
	mov    -0x28(%rbp),%r15
	leaveq 
	retq   
	movzbl (%r12),%r12d
	movslq (%r10,%r12,4),%rdi
	movzbl (%r8),%r13d
	lea    0x0(%r13,%rdi,1),%ecx
	movslq %ecx,%rcx
	movzbl (%r15,%rcx,1),%ecx
	mov    (%rax,%r12,8),%rax
	movzbl (%r11),%r10d
	add    (%r9,%r10,8),%rax
	sar    $0x10,%rax
	lea    0x0(%r13,%rax,1),%r8d
	movslq %r8d,%r8
	movslq (%r14,%r10,4),%r9
	mov    %cl,(%rdx)
	movzbl (%r15,%r8,1),%ecx
	mov    %cl,0x1(%rdx)
	lea    0x0(%r13,%r9,1),%ecx
	movslq %ecx,%rcx
	movzbl (%r15,%rcx,1),%ecx
	mov    %cl,0x2(%rdx)
	movzbl (%rbx),%edx
	lea    (%rdx,%rdi,1),%ecx
	movslq %ecx,%rcx
	movzbl (%r15,%rcx,1),%ecx
	mov    %cl,(%rsi)
	add    %edx,%eax
	movslq %eax,%rax
	movzbl (%r15,%rax,1),%eax
	mov    %al,0x1(%rsi)
	lea    (%rdx,%r9,1),%eax
	movslq %eax,%rax
	movzbl (%r15,%rax,1),%eax
	mov    %al,0x2(%rsi)
	mov    -0x8(%rbp),%rbx
	mov    -0x10(%rbp),%r12
	mov    -0x18(%rbp),%r13
	mov    -0x20(%rbp),%r14
	mov    -0x28(%rbp),%r15
	leaveq 
	retq   
	data16 nopw %cs:0x0(%rax,%rax,1)
	nop

00276a0 <extrgb_h2v1_merged_upsample_internal>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x40,%rsp
	mov    %r15,-0x28(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %rdi,-0x30(%rbp)
	mov    %rbx,-0x8(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    0x1a8(%rdi),%r13
	mov    0x260(%rdi),%rbx
	mov    0x28(%rbx),%r12
	mov    0x30(%rbx),%rax
	mov    %rax,-0x40(%rbp)
	mov    0x38(%rbx),%r9
	mov    %r9,-0x38(%rbp)
	mov    0x20(%rbx),%r11
	mov    (%rsi),%rbx
	mov    %edx,%r10d
	mov    (%rbx,%r10,8),%rbx
	mov    0x8(%rsi),%rdx
	mov    (%rdx,%r10,8),%r8
	mov    0x10(%rsi),%rdx
	mov    (%rdx,%r10,8),%rsi
	mov    (%rcx),%rdx
	mov    0x88(%rdi),%ecx
	shr    %ecx
	jmpq   277ae <extrgb_h2v1_merged_upsample_internal+0x10e>
	movzbl (%rsi),%r10d
	movslq (%r11,%r10,4),%r15
	movzbl (%rbx),%edi
	lea    (%rdi,%r15,1),%r14d
	movslq %r14d,%r14
	movzbl 0x0(%r13,%r14,1),%r14d
	mov    (%rax,%r10,8),%rax
	movzbl (%r8),%r10d
	add    (%r9,%r10,8),%rax
	sar    $0x10,%rax
	lea    (%rdi,%rax,1),%r9d
	movslq %r9d,%r9
	movslq (%r12,%r10,4),%r10
	mov    %r14b,(%rdx)
	movzbl 0x0(%r13,%r9,1),%r9d
	mov    %r9b,0x1(%rdx)
	add    %r10d,%edi
	movslq %edi,%rdi
	movzbl (%rdi,%r13,1),%edi
	mov    %dil,0x2(%rdx)
	movzbl 0x1(%rbx),%r9d
	lea    (%r9,%r15,1),%edi
	movslq %edi,%rdi
	movzbl 0x0(%r13,%rdi,1),%edi
	mov    %dil,0x3(%rdx)
	add    %r9d,%eax
	movslq %eax,%rax
	movzbl 0x0(%r13,%rax,1),%eax
	mov    %al,0x4(%rdx)
	lea    (%r9,%r10,1),%eax
	movslq %eax,%rax
	movzbl (%rax,%r13,1),%eax
	mov    %al,0x5(%rdx)
	add    $0x2,%rbx
	add    $0x1,%r8
	add    $0x1,%rsi
	add    $0x6,%rdx
	add    $0xffffffff,%ecx
	mov    -0x38(%rbp),%r9
	mov    -0x40(%rbp),%rax
	test   %ecx,%ecx
	jne    27710 <extrgb_h2v1_merged_upsample_internal+0x70>
	mov    -0x30(%rbp),%rcx
	mov    0x88(%rcx),%ecx
	and    $0x1,%ecx
	test   %ecx,%ecx
	jne    277dd <extrgb_h2v1_merged_upsample_internal+0x13d>
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	mov    -0x20(%rbp),%r14
	mov    -0x28(%rbp),%r15
	leaveq 
	retq   
	movzbl (%rbx),%ecx
	movzbl (%rsi),%edi
	mov    %rcx,%rsi
	add    (%r11,%rdi,4),%esi
	movslq %esi,%rsi
	movzbl 0x0(%r13,%rsi,1),%esi
	mov    (%rax,%rdi,8),%rax
	movzbl (%r8),%edi
	add    (%r9,%rdi,8),%rax
	sar    $0x10,%rax
	add    %ecx,%eax
	movslq %eax,%rax
	add    (%r12,%rdi,4),%ecx
	mov    %sil,(%rdx)
	movzbl 0x0(%r13,%rax,1),%eax
	mov    %al,0x1(%rdx)
	movslq %ecx,%rax
	movzbl 0x0(%r13,%rax,1),%eax
	mov    %al,0x2(%rdx)
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	mov    -0x20(%rbp),%r14
	mov    -0x28(%rbp),%r15
	leaveq 
	retq   
	nopw   0x0(%rax,%rax,1)

0027840 <extrgb_h2v2_merged_upsample_internal>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x50,%rsp
	mov    %r15,-0x28(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    %rdi,-0x30(%rbp)
	mov    %rbx,-0x8(%rbp)
	mov    0x1a8(%rdi),%r15
	mov    0x260(%rdi),%rbx
	mov    0x28(%rbx),%r14
	mov    0x30(%rbx),%rax
	mov    %rax,-0x40(%rbp)
	mov    0x38(%rbx),%r9
	mov    %r9,-0x38(%rbp)
	mov    0x20(%rbx),%r10
	mov    %r10,-0x48(%rbp)
	mov    (%rsi),%r11
	lea    (%rdx,%rdx,1),%r8d
	lea    0x1(%r8),%ebx
	mov    %ebx,%ebx
	mov    (%r11,%rbx,8),%rbx
	mov    %r8d,%r8d
	mov    (%r11,%r8,8),%r8
	mov    0x8(%rsi),%r11
	mov    %edx,%r12d
	mov    (%r11,%r12,8),%r11
	mov    0x10(%rsi),%rdx
	mov    (%rdx,%r12,8),%r12
	mov    (%rcx),%rdx
	mov    0x8(%rcx),%rsi
	mov    0x88(%rdi),%ecx
	shr    %ecx
	jmpq   279d3 <extrgb_h2v2_merged_upsample_internal+0x193>
	movzbl (%r12),%r13d
	movslq (%r10,%r13,4),%r10
	movzbl (%r8),%edi
	mov    %rcx,-0x50(%rbp)
	lea    (%rdi,%r10,1),%ecx
	movslq %ecx,%rcx
	movzbl (%r15,%rcx,1),%ecx
	mov    (%rax,%r13,8),%rax
	movzbl (%r11),%r13d
	add    (%r9,%r13,8),%rax
	sar    $0x10,%rax
	lea    (%rdi,%rax,1),%r9d
	movslq %r9d,%r9
	movslq (%r14,%r13,4),%r13
	mov    %cl,(%rdx)
	movzbl (%r15,%r9,1),%ecx
	mov    %cl,0x1(%rdx)
	lea    (%rdi,%r13,1),%ecx
	movslq %ecx,%rcx
	movzbl (%rcx,%r15,1),%ecx
	mov    %cl,0x2(%rdx)
	movzbl 0x1(%r8),%edi
	lea    (%rdi,%r10,1),%ecx
	movslq %ecx,%rcx
	movzbl (%r15,%rcx,1),%ecx
	mov    %cl,0x3(%rdx)
	lea    (%rdi,%rax,1),%ecx
	movslq %ecx,%rcx
	movzbl (%r15,%rcx,1),%ecx
	mov    %cl,0x4(%rdx)
	lea    (%rdi,%r13,1),%ecx
	movslq %ecx,%rcx
	movzbl (%rcx,%r15,1),%ecx
	mov    %cl,0x5(%rdx)
	movzbl (%rbx),%edi
	lea    (%rdi,%r10,1),%ecx
	movslq %ecx,%rcx
	movzbl (%r15,%rcx,1),%ecx
	mov    %cl,(%rsi)
	lea    (%rdi,%rax,1),%ecx
	movslq %ecx,%rcx
	movzbl (%r15,%rcx,1),%ecx
	mov    %cl,0x1(%rsi)
	lea    (%rdi,%r13,1),%ecx
	movslq %ecx,%rcx
	movzbl (%rcx,%r15,1),%ecx
	mov    %cl,0x2(%rsi)
	movzbl 0x1(%rbx),%edi
	lea    (%rdi,%r10,1),%ecx
	movslq %ecx,%rcx
	movzbl (%r15,%rcx,1),%ecx
	mov    %cl,0x3(%rsi)
	add    %edi,%eax
	movslq %eax,%rax
	movzbl (%r15,%rax,1),%eax
	mov    %al,0x4(%rsi)
	lea    (%rdi,%r13,1),%eax
	movslq %eax,%rax
	movzbl (%rax,%r15,1),%eax
	mov    %al,0x5(%rsi)
	add    $0x2,%rbx
	add    $0x2,%r8
	add    $0x1,%r11
	add    $0x1,%r12
	add    $0x6,%rdx
	add    $0x6,%rsi
	mov    -0x50(%rbp),%rax
	lea    -0x1(%rax),%ecx
	mov    -0x38(%rbp),%r9
	mov    -0x40(%rbp),%rax
	mov    -0x48(%rbp),%r10
	test   %ecx,%ecx
	jne    278c9 <extrgb_h2v2_merged_upsample_internal+0x89>
	mov    -0x30(%rbp),%rcx
	mov    0x88(%rcx),%ecx
	and    $0x1,%ecx
	test   %ecx,%ecx
	jne    27a02 <extrgb_h2v2_merged_upsample_internal+0x1c2>
	mov    -0x8(%rbp),%rbx
	mov    -0x10(%rbp),%r12
	mov    -0x18(%rbp),%r13
	mov    -0x20(%rbp),%r14
	mov    -0x28(%rbp),%r15
	leaveq 
	retq   
	movzbl (%r12),%r12d
	movslq (%r10,%r12,4),%rdi
	movzbl (%r8),%r13d
	lea    0x0(%r13,%rdi,1),%ecx
	movslq %ecx,%rcx
	movzbl (%r15,%rcx,1),%ecx
	mov    (%rax,%r12,8),%rax
	movzbl (%r11),%r10d
	add    (%r9,%r10,8),%rax
	sar    $0x10,%rax
	lea    0x0(%r13,%rax,1),%r8d
	movslq %r8d,%r8
	movslq (%r14,%r10,4),%r9
	mov    %cl,(%rdx)
	movzbl (%r15,%r8,1),%ecx
	mov    %cl,0x1(%rdx)
	lea    0x0(%r13,%r9,1),%ecx
	movslq %ecx,%rcx
	movzbl (%r15,%rcx,1),%ecx
	mov    %cl,0x2(%rdx)
	movzbl (%rbx),%edx
	lea    (%rdx,%rdi,1),%ecx
	movslq %ecx,%rcx
	movzbl (%r15,%rcx,1),%ecx
	mov    %cl,(%rsi)
	add    %edx,%eax
	movslq %eax,%rax
	movzbl (%r15,%rax,1),%eax
	mov    %al,0x1(%rsi)
	lea    (%rdx,%r9,1),%eax
	movslq %eax,%rax
	movzbl (%r15,%rax,1),%eax
	mov    %al,0x2(%rsi)
	mov    -0x8(%rbp),%rbx
	mov    -0x10(%rbp),%r12
	mov    -0x18(%rbp),%r13
	mov    -0x20(%rbp),%r14
	mov    -0x28(%rbp),%r15
	leaveq 
	retq   
	data16 nopw %cs:0x0(%rax,%rax,1)
	nop

0027aa0 <extrgbx_h2v1_merged_upsample_internal>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x40,%rsp
	mov    %r15,-0x28(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %rdi,-0x30(%rbp)
	mov    %rbx,-0x8(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    0x1a8(%rdi),%r13
	mov    0x260(%rdi),%rbx
	mov    0x28(%rbx),%r12
	mov    0x30(%rbx),%rax
	mov    %rax,-0x40(%rbp)
	mov    0x38(%rbx),%r8
	mov    %r8,-0x38(%rbp)
	mov    0x20(%rbx),%r11
	mov    (%rsi),%rbx
	mov    %edx,%r9d
	mov    (%rbx,%r9,8),%rdx
	mov    0x8(%rsi),%rbx
	mov    (%rbx,%r9,8),%rbx
	mov    0x10(%rsi),%rsi
	mov    (%rsi,%r9,8),%r9
	mov    (%rcx),%rsi
	mov    0x88(%rdi),%ecx
	shr    %ecx
	jmpq   27bb6 <extrgbx_h2v1_merged_upsample_internal+0x116>
	movzbl (%r9),%r10d
	movslq (%r11,%r10,4),%r15
	movzbl (%rdx),%edi
	lea    (%rdi,%r15,1),%r14d
	movslq %r14d,%r14
	movzbl 0x0(%r13,%r14,1),%r14d
	mov    (%rax,%r10,8),%rax
	movzbl (%rbx),%r10d
	add    (%r8,%r10,8),%rax
	sar    $0x10,%rax
	lea    (%rdi,%rax,1),%r8d
	movslq %r8d,%r8
	movslq (%r12,%r10,4),%r10
	mov    %r14b,(%rsi)
	movzbl 0x0(%r13,%r8,1),%r8d
	mov    %r8b,0x1(%rsi)
	add    %r10d,%edi
	movslq %edi,%rdi
	movzbl (%rdi,%r13,1),%edi
	mov    %dil,0x2(%rsi)
	movb   $0xff,0x3(%rsi)
	movzbl 0x1(%rdx),%r8d
	lea    (%r8,%r15,1),%edi
	movslq %edi,%rdi
	movzbl 0x0(%r13,%rdi,1),%edi
	mov    %dil,0x4(%rsi)
	add    %r8d,%eax
	movslq %eax,%rax
	movzbl 0x0(%r13,%rax,1),%eax
	mov    %al,0x5(%rsi)
	lea    (%r8,%r10,1),%eax
	movslq %eax,%rax
	movzbl (%rax,%r13,1),%eax
	mov    %al,0x6(%rsi)
	movb   $0xff,0x7(%rsi)
	add    $0x2,%rdx
	add    $0x1,%rbx
	add    $0x1,%r9
	add    $0x8,%rsi
	add    $0xffffffff,%ecx
	mov    -0x38(%rbp),%r8
	mov    -0x40(%rbp),%rax
	test   %ecx,%ecx
	jne    27b10 <extrgbx_h2v1_merged_upsample_internal+0x70>
	mov    -0x30(%rbp),%rcx
	mov    0x88(%rcx),%ecx
	and    $0x1,%ecx
	test   %ecx,%ecx
	jne    27be5 <extrgbx_h2v1_merged_upsample_internal+0x145>
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	mov    -0x20(%rbp),%r14
	mov    -0x28(%rbp),%r15
	leaveq 
	retq   
	movzbl (%rdx),%ecx
	movzbl (%r9),%edi
	mov    %rcx,%rdx
	add    (%r11,%rdi,4),%edx
	movslq %edx,%rdx
	movzbl 0x0(%r13,%rdx,1),%edx
	mov    (%rax,%rdi,8),%rax
	movzbl (%rbx),%edi
	add    (%r8,%rdi,8),%rax
	sar    $0x10,%rax
	add    %ecx,%eax
	movslq %eax,%rax
	add    (%r12,%rdi,4),%ecx
	mov    %dl,(%rsi)
	movzbl 0x0(%r13,%rax,1),%eax
	mov    %al,0x1(%rsi)
	movslq %ecx,%rax
	movzbl 0x0(%r13,%rax,1),%eax
	mov    %al,0x2(%rsi)
	movb   $0xff,0x3(%rsi)
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	mov    -0x20(%rbp),%r14
	mov    -0x28(%rbp),%r15
	leaveq 
	retq   
	data16 nopw %cs:0x0(%rax,%rax,1)

0027c50 <extrgbx_h2v2_merged_upsample_internal>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x50,%rsp
	mov    %r15,-0x28(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    %rdi,-0x30(%rbp)
	mov    %rbx,-0x8(%rbp)
	mov    0x1a8(%rdi),%r15
	mov    0x260(%rdi),%rbx
	mov    0x28(%rbx),%r14
	mov    0x30(%rbx),%rax
	mov    %rax,-0x40(%rbp)
	mov    0x38(%rbx),%r9
	mov    %r9,-0x38(%rbp)
	mov    0x20(%rbx),%r10
	mov    %r10,-0x48(%rbp)
	mov    (%rsi),%r11
	lea    (%rdx,%rdx,1),%r8d
	lea    0x1(%r8),%ebx
	mov    %ebx,%ebx
	mov    (%r11,%rbx,8),%rbx
	mov    %r8d,%r8d
	mov    (%r11,%r8,8),%r8
	mov    0x8(%rsi),%r11
	mov    %edx,%r12d
	mov    (%r11,%r12,8),%r11
	mov    0x10(%rsi),%rdx
	mov    (%rdx,%r12,8),%r12
	mov    (%rcx),%rdx
	mov    0x8(%rcx),%rsi
	mov    0x88(%rdi),%ecx
	shr    %ecx
	jmpq   27df3 <extrgbx_h2v2_merged_upsample_internal+0x1a3>
	movzbl (%r12),%r13d
	movslq (%r10,%r13,4),%r10
	movzbl (%r8),%edi
	mov    %rcx,-0x50(%rbp)
	lea    (%rdi,%r10,1),%ecx
	movslq %ecx,%rcx
	movzbl (%r15,%rcx,1),%ecx
	mov    (%rax,%r13,8),%rax
	movzbl (%r11),%r13d
	add    (%r9,%r13,8),%rax
	sar    $0x10,%rax
	lea    (%rdi,%rax,1),%r9d
	movslq %r9d,%r9
	movslq (%r14,%r13,4),%r13
	mov    %cl,(%rdx)
	movzbl (%r15,%r9,1),%ecx
	mov    %cl,0x1(%rdx)
	lea    (%rdi,%r13,1),%ecx
	movslq %ecx,%rcx
	movzbl (%rcx,%r15,1),%ecx
	mov    %cl,0x2(%rdx)
	movb   $0xff,0x3(%rdx)
	movzbl 0x1(%r8),%edi
	lea    (%rdi,%r10,1),%ecx
	movslq %ecx,%rcx
	movzbl (%r15,%rcx,1),%ecx
	mov    %cl,0x4(%rdx)
	lea    (%rdi,%rax,1),%ecx
	movslq %ecx,%rcx
	movzbl (%r15,%rcx,1),%ecx
	mov    %cl,0x5(%rdx)
	lea    (%rdi,%r13,1),%ecx
	movslq %ecx,%rcx
	movzbl (%rcx,%r15,1),%ecx
	mov    %cl,0x6(%rdx)
	movb   $0xff,0x7(%rdx)
	movzbl (%rbx),%edi
	lea    (%rdi,%r10,1),%ecx
	movslq %ecx,%rcx
	movzbl (%r15,%rcx,1),%ecx
	mov    %cl,(%rsi)
	lea    (%rdi,%rax,1),%ecx
	movslq %ecx,%rcx
	movzbl (%r15,%rcx,1),%ecx
	mov    %cl,0x1(%rsi)
	lea    (%rdi,%r13,1),%ecx
	movslq %ecx,%rcx
	movzbl (%rcx,%r15,1),%ecx
	mov    %cl,0x2(%rsi)
	movb   $0xff,0x3(%rsi)
	movzbl 0x1(%rbx),%edi
	lea    (%rdi,%r10,1),%ecx
	movslq %ecx,%rcx
	movzbl (%r15,%rcx,1),%ecx
	mov    %cl,0x4(%rsi)
	add    %edi,%eax
	movslq %eax,%rax
	movzbl (%r15,%rax,1),%eax
	mov    %al,0x5(%rsi)
	lea    (%rdi,%r13,1),%eax
	movslq %eax,%rax
	movzbl (%rax,%r15,1),%eax
	mov    %al,0x6(%rsi)
	movb   $0xff,0x7(%rsi)
	add    $0x2,%rbx
	add    $0x2,%r8
	add    $0x1,%r11
	add    $0x1,%r12
	add    $0x8,%rdx
	add    $0x8,%rsi
	mov    -0x50(%rbp),%rax
	lea    -0x1(%rax),%ecx
	mov    -0x38(%rbp),%r9
	mov    -0x40(%rbp),%rax
	mov    -0x48(%rbp),%r10
	test   %ecx,%ecx
	jne    27cd9 <extrgbx_h2v2_merged_upsample_internal+0x89>
	mov    -0x30(%rbp),%rcx
	mov    0x88(%rcx),%ecx
	and    $0x1,%ecx
	test   %ecx,%ecx
	jne    27e22 <extrgbx_h2v2_merged_upsample_internal+0x1d2>
	mov    -0x8(%rbp),%rbx
	mov    -0x10(%rbp),%r12
	mov    -0x18(%rbp),%r13
	mov    -0x20(%rbp),%r14
	mov    -0x28(%rbp),%r15
	leaveq 
	retq   
	movzbl (%r12),%r12d
	movslq (%r10,%r12,4),%rdi
	movzbl (%r8),%r13d
	lea    0x0(%r13,%rdi,1),%ecx
	movslq %ecx,%rcx
	movzbl (%r15,%rcx,1),%ecx
	mov    (%rax,%r12,8),%rax
	movzbl (%r11),%r10d
	add    (%r9,%r10,8),%rax
	sar    $0x10,%rax
	lea    0x0(%r13,%rax,1),%r8d
	movslq %r8d,%r8
	movslq (%r14,%r10,4),%r9
	mov    %cl,(%rdx)
	movzbl (%r15,%r8,1),%ecx
	mov    %cl,0x1(%rdx)
	lea    0x0(%r13,%r9,1),%ecx
	movslq %ecx,%rcx
	movzbl (%r15,%rcx,1),%ecx
	mov    %cl,0x2(%rdx)
	movb   $0xff,0x3(%rdx)
	movzbl (%rbx),%edx
	lea    (%rdx,%rdi,1),%ecx
	movslq %ecx,%rcx
	movzbl (%r15,%rcx,1),%ecx
	mov    %cl,(%rsi)
	add    %edx,%eax
	movslq %eax,%rax
	movzbl (%r15,%rax,1),%eax
	mov    %al,0x1(%rsi)
	lea    (%rdx,%r9,1),%eax
	movslq %eax,%rax
	movzbl (%r15,%rax,1),%eax
	mov    %al,0x2(%rsi)
	movb   $0xff,0x3(%rsi)
	mov    -0x8(%rbp),%rbx
	mov    -0x10(%rbp),%r12
	mov    -0x18(%rbp),%r13
	mov    -0x20(%rbp),%r14
	mov    -0x28(%rbp),%r15
	leaveq 
	retq   
	nopl   0x0(%rax)

0027ec0 <extbgr_h2v1_merged_upsample_internal>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x40,%rsp
	mov    %r15,-0x28(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %rdi,-0x30(%rbp)
	mov    %rbx,-0x8(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    0x1a8(%rdi),%r13
	mov    0x260(%rdi),%rbx
	mov    0x28(%rbx),%r12
	mov    0x30(%rbx),%rax
	mov    %rax,-0x40(%rbp)
	mov    0x38(%rbx),%r8
	mov    %r8,-0x38(%rbp)
	mov    0x20(%rbx),%r11
	mov    (%rsi),%rbx
	mov    %edx,%r9d
	mov    (%rbx,%r9,8),%rdx
	mov    0x8(%rsi),%rbx
	mov    (%rbx,%r9,8),%rbx
	mov    0x10(%rsi),%rsi
	mov    (%rsi,%r9,8),%r9
	mov    (%rcx),%rsi
	mov    0x88(%rdi),%ecx
	shr    %ecx
	jmpq   27fce <extbgr_h2v1_merged_upsample_internal+0x10e>
	movzbl (%r9),%r10d
	movslq (%r11,%r10,4),%r15
	movzbl (%rdx),%edi
	lea    (%rdi,%r15,1),%r14d
	movslq %r14d,%r14
	movzbl 0x0(%r13,%r14,1),%r14d
	mov    (%rax,%r10,8),%rax
	movzbl (%rbx),%r10d
	add    (%r8,%r10,8),%rax
	sar    $0x10,%rax
	lea    (%rdi,%rax,1),%r8d
	movslq %r8d,%r8
	movslq (%r12,%r10,4),%r10
	mov    %r14b,0x2(%rsi)
	movzbl 0x0(%r13,%r8,1),%r8d
	mov    %r8b,0x1(%rsi)
	add    %r10d,%edi
	movslq %edi,%rdi
	movzbl (%rdi,%r13,1),%edi
	mov    %dil,(%rsi)
	movzbl 0x1(%rdx),%r8d
	lea    (%r8,%r15,1),%edi
	movslq %edi,%rdi
	movzbl 0x0(%r13,%rdi,1),%edi
	mov    %dil,0x5(%rsi)
	add    %r8d,%eax
	movslq %eax,%rax
	movzbl 0x0(%r13,%rax,1),%eax
	mov    %al,0x4(%rsi)
	lea    (%r8,%r10,1),%eax
	movslq %eax,%rax
	movzbl (%rax,%r13,1),%eax
	mov    %al,0x3(%rsi)
	add    $0x2,%rdx
	add    $0x1,%rbx
	add    $0x1,%r9
	add    $0x6,%rsi
	add    $0xffffffff,%ecx
	mov    -0x38(%rbp),%r8
	mov    -0x40(%rbp),%rax
	test   %ecx,%ecx
	jne    27f30 <extbgr_h2v1_merged_upsample_internal+0x70>
	mov    -0x30(%rbp),%rcx
	mov    0x88(%rcx),%ecx
	and    $0x1,%ecx
	test   %ecx,%ecx
	jne    27ffd <extbgr_h2v1_merged_upsample_internal+0x13d>
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	mov    -0x20(%rbp),%r14
	mov    -0x28(%rbp),%r15
	leaveq 
	retq   
	movzbl (%rdx),%ecx
	movzbl (%r9),%edi
	mov    %rcx,%rdx
	add    (%r11,%rdi,4),%edx
	movslq %edx,%rdx
	movzbl 0x0(%r13,%rdx,1),%edx
	mov    (%rax,%rdi,8),%rax
	movzbl (%rbx),%edi
	add    (%r8,%rdi,8),%rax
	sar    $0x10,%rax
	add    %ecx,%eax
	movslq %eax,%rax
	add    (%r12,%rdi,4),%ecx
	mov    %dl,0x2(%rsi)
	movzbl 0x0(%r13,%rax,1),%eax
	mov    %al,0x1(%rsi)
	movslq %ecx,%rax
	movzbl 0x0(%r13,%rax,1),%eax
	mov    %al,(%rsi)
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	mov    -0x20(%rbp),%r14
	mov    -0x28(%rbp),%r15
	leaveq 
	retq   
	nopl   0x0(%rax)

0028060 <extbgr_h2v2_merged_upsample_internal>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x50,%rsp
	mov    %r15,-0x28(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    %rdi,-0x30(%rbp)
	mov    %rbx,-0x8(%rbp)
	mov    0x1a8(%rdi),%r15
	mov    0x260(%rdi),%rbx
	mov    0x28(%rbx),%r14
	mov    0x30(%rbx),%rax
	mov    %rax,-0x40(%rbp)
	mov    0x38(%rbx),%r9
	mov    %r9,-0x38(%rbp)
	mov    0x20(%rbx),%r10
	mov    %r10,-0x48(%rbp)
	mov    (%rsi),%r11
	lea    (%rdx,%rdx,1),%r8d
	lea    0x1(%r8),%ebx
	mov    %ebx,%ebx
	mov    (%r11,%rbx,8),%rbx
	mov    %r8d,%r8d
	mov    (%r11,%r8,8),%r8
	mov    0x8(%rsi),%r11
	mov    %edx,%r12d
	mov    (%r11,%r12,8),%r11
	mov    0x10(%rsi),%rdx
	mov    (%rdx,%r12,8),%r12
	mov    (%rcx),%rdx
	mov    0x8(%rcx),%rsi
	mov    0x88(%rdi),%ecx
	shr    %ecx
	jmpq   281f3 <extbgr_h2v2_merged_upsample_internal+0x193>
	movzbl (%r12),%r13d
	movslq (%r10,%r13,4),%r10
	movzbl (%r8),%edi
	mov    %rcx,-0x50(%rbp)
	lea    (%rdi,%r10,1),%ecx
	movslq %ecx,%rcx
	movzbl (%r15,%rcx,1),%ecx
	mov    (%rax,%r13,8),%rax
	movzbl (%r11),%r13d
	add    (%r9,%r13,8),%rax
	sar    $0x10,%rax
	lea    (%rdi,%rax,1),%r9d
	movslq %r9d,%r9
	movslq (%r14,%r13,4),%r13
	mov    %cl,0x2(%rdx)
	movzbl (%r15,%r9,1),%ecx
	mov    %cl,0x1(%rdx)
	lea    (%rdi,%r13,1),%ecx
	movslq %ecx,%rcx
	movzbl (%rcx,%r15,1),%ecx
	mov    %cl,(%rdx)
	movzbl 0x1(%r8),%edi
	lea    (%rdi,%r10,1),%ecx
	movslq %ecx,%rcx
	movzbl (%r15,%rcx,1),%ecx
	mov    %cl,0x5(%rdx)
	lea    (%rdi,%rax,1),%ecx
	movslq %ecx,%rcx
	movzbl (%r15,%rcx,1),%ecx
	mov    %cl,0x4(%rdx)
	lea    (%rdi,%r13,1),%ecx
	movslq %ecx,%rcx
	movzbl (%rcx,%r15,1),%ecx
	mov    %cl,0x3(%rdx)
	movzbl (%rbx),%edi
	lea    (%rdi,%r10,1),%ecx
	movslq %ecx,%rcx
	movzbl (%r15,%rcx,1),%ecx
	mov    %cl,0x2(%rsi)
	lea    (%rdi,%rax,1),%ecx
	movslq %ecx,%rcx
	movzbl (%r15,%rcx,1),%ecx
	mov    %cl,0x1(%rsi)
	lea    (%rdi,%r13,1),%ecx
	movslq %ecx,%rcx
	movzbl (%rcx,%r15,1),%ecx
	mov    %cl,(%rsi)
	movzbl 0x1(%rbx),%edi
	lea    (%rdi,%r10,1),%ecx
	movslq %ecx,%rcx
	movzbl (%r15,%rcx,1),%ecx
	mov    %cl,0x5(%rsi)
	add    %edi,%eax
	movslq %eax,%rax
	movzbl (%r15,%rax,1),%eax
	mov    %al,0x4(%rsi)
	lea    (%rdi,%r13,1),%eax
	movslq %eax,%rax
	movzbl (%rax,%r15,1),%eax
	mov    %al,0x3(%rsi)
	add    $0x2,%rbx
	add    $0x2,%r8
	add    $0x1,%r11
	add    $0x1,%r12
	add    $0x6,%rdx
	add    $0x6,%rsi
	mov    -0x50(%rbp),%rax
	lea    -0x1(%rax),%ecx
	mov    -0x38(%rbp),%r9
	mov    -0x40(%rbp),%rax
	mov    -0x48(%rbp),%r10
	test   %ecx,%ecx
	jne    280e9 <extbgr_h2v2_merged_upsample_internal+0x89>
	mov    -0x30(%rbp),%rcx
	mov    0x88(%rcx),%ecx
	and    $0x1,%ecx
	test   %ecx,%ecx
	jne    28222 <extbgr_h2v2_merged_upsample_internal+0x1c2>
	mov    -0x8(%rbp),%rbx
	mov    -0x10(%rbp),%r12
	mov    -0x18(%rbp),%r13
	mov    -0x20(%rbp),%r14
	mov    -0x28(%rbp),%r15
	leaveq 
	retq   
	movzbl (%r12),%r12d
	movslq (%r10,%r12,4),%rdi
	movzbl (%r8),%r13d
	lea    0x0(%r13,%rdi,1),%ecx
	movslq %ecx,%rcx
	movzbl (%r15,%rcx,1),%ecx
	mov    (%rax,%r12,8),%rax
	movzbl (%r11),%r10d
	add    (%r9,%r10,8),%rax
	sar    $0x10,%rax
	lea    0x0(%r13,%rax,1),%r8d
	movslq %r8d,%r8
	movslq (%r14,%r10,4),%r9
	mov    %cl,0x2(%rdx)
	movzbl (%r15,%r8,1),%ecx
	mov    %cl,0x1(%rdx)
	lea    0x0(%r13,%r9,1),%ecx
	movslq %ecx,%rcx
	movzbl (%r15,%rcx,1),%ecx
	mov    %cl,(%rdx)
	movzbl (%rbx),%edx
	lea    (%rdx,%rdi,1),%ecx
	movslq %ecx,%rcx
	movzbl (%r15,%rcx,1),%ecx
	mov    %cl,0x2(%rsi)
	add    %edx,%eax
	movslq %eax,%rax
	movzbl (%r15,%rax,1),%eax
	mov    %al,0x1(%rsi)
	lea    (%rdx,%r9,1),%eax
	movslq %eax,%rax
	movzbl (%r15,%rax,1),%eax
	mov    %al,(%rsi)
	mov    -0x8(%rbp),%rbx
	mov    -0x10(%rbp),%r12
	mov    -0x18(%rbp),%r13
	mov    -0x20(%rbp),%r14
	mov    -0x28(%rbp),%r15
	leaveq 
	retq   
	data16 nopw %cs:0x0(%rax,%rax,1)
	nop

00282c0 <extbgrx_h2v1_merged_upsample_internal>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x40,%rsp
	mov    %r15,-0x28(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %rdi,-0x30(%rbp)
	mov    %rbx,-0x8(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    0x1a8(%rdi),%r13
	mov    0x260(%rdi),%rbx
	mov    0x28(%rbx),%r12
	mov    0x30(%rbx),%rax
	mov    %rax,-0x40(%rbp)
	mov    0x38(%rbx),%r8
	mov    %r8,-0x38(%rbp)
	mov    0x20(%rbx),%r11
	mov    (%rsi),%rbx
	mov    %edx,%r9d
	mov    (%rbx,%r9,8),%rdx
	mov    0x8(%rsi),%rbx
	mov    (%rbx,%r9,8),%rbx
	mov    0x10(%rsi),%rsi
	mov    (%rsi,%r9,8),%r9
	mov    (%rcx),%rsi
	mov    0x88(%rdi),%ecx
	shr    %ecx
	jmpq   283d6 <extbgrx_h2v1_merged_upsample_internal+0x116>
	movzbl (%r9),%r10d
	movslq (%r11,%r10,4),%r15
	movzbl (%rdx),%edi
	lea    (%rdi,%r15,1),%r14d
	movslq %r14d,%r14
	movzbl 0x0(%r13,%r14,1),%r14d
	mov    (%rax,%r10,8),%rax
	movzbl (%rbx),%r10d
	add    (%r8,%r10,8),%rax
	sar    $0x10,%rax
	lea    (%rdi,%rax,1),%r8d
	movslq %r8d,%r8
	movslq (%r12,%r10,4),%r10
	mov    %r14b,0x2(%rsi)
	movzbl 0x0(%r13,%r8,1),%r8d
	mov    %r8b,0x1(%rsi)
	add    %r10d,%edi
	movslq %edi,%rdi
	movzbl (%rdi,%r13,1),%edi
	mov    %dil,(%rsi)
	movb   $0xff,0x3(%rsi)
	movzbl 0x1(%rdx),%r8d
	lea    (%r8,%r15,1),%edi
	movslq %edi,%rdi
	movzbl 0x0(%r13,%rdi,1),%edi
	mov    %dil,0x6(%rsi)
	add    %r8d,%eax
	movslq %eax,%rax
	movzbl 0x0(%r13,%rax,1),%eax
	mov    %al,0x5(%rsi)
	lea    (%r8,%r10,1),%eax
	movslq %eax,%rax
	movzbl (%rax,%r13,1),%eax
	mov    %al,0x4(%rsi)
	movb   $0xff,0x7(%rsi)
	add    $0x2,%rdx
	add    $0x1,%rbx
	add    $0x1,%r9
	add    $0x8,%rsi
	add    $0xffffffff,%ecx
	mov    -0x38(%rbp),%r8
	mov    -0x40(%rbp),%rax
	test   %ecx,%ecx
	jne    28330 <extbgrx_h2v1_merged_upsample_internal+0x70>
	mov    -0x30(%rbp),%rcx
	mov    0x88(%rcx),%ecx
	and    $0x1,%ecx
	test   %ecx,%ecx
	jne    28405 <extbgrx_h2v1_merged_upsample_internal+0x145>
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	mov    -0x20(%rbp),%r14
	mov    -0x28(%rbp),%r15
	leaveq 
	retq   
	movzbl (%rdx),%ecx
	movzbl (%r9),%edi
	mov    %rcx,%rdx
	add    (%r11,%rdi,4),%edx
	movslq %edx,%rdx
	movzbl 0x0(%r13,%rdx,1),%edx
	mov    (%rax,%rdi,8),%rax
	movzbl (%rbx),%edi
	add    (%r8,%rdi,8),%rax
	sar    $0x10,%rax
	add    %ecx,%eax
	movslq %eax,%rax
	add    (%r12,%rdi,4),%ecx
	mov    %dl,0x2(%rsi)
	movzbl 0x0(%r13,%rax,1),%eax
	mov    %al,0x1(%rsi)
	movslq %ecx,%rax
	movzbl 0x0(%r13,%rax,1),%eax
	mov    %al,(%rsi)
	movb   $0xff,0x3(%rsi)
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	mov    -0x20(%rbp),%r14
	mov    -0x28(%rbp),%r15
	leaveq 
	retq   
	data16 nopw %cs:0x0(%rax,%rax,1)

0028470 <extbgrx_h2v2_merged_upsample_internal>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x50,%rsp
	mov    %r15,-0x28(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    %rdi,-0x30(%rbp)
	mov    %rbx,-0x8(%rbp)
	mov    0x1a8(%rdi),%r15
	mov    0x260(%rdi),%rbx
	mov    0x28(%rbx),%r14
	mov    0x30(%rbx),%rax
	mov    %rax,-0x40(%rbp)
	mov    0x38(%rbx),%r9
	mov    %r9,-0x38(%rbp)
	mov    0x20(%rbx),%r10
	mov    %r10,-0x48(%rbp)
	mov    (%rsi),%r11
	lea    (%rdx,%rdx,1),%r8d
	lea    0x1(%r8),%ebx
	mov    %ebx,%ebx
	mov    (%r11,%rbx,8),%rbx
	mov    %r8d,%r8d
	mov    (%r11,%r8,8),%r8
	mov    0x8(%rsi),%r11
	mov    %edx,%r12d
	mov    (%r11,%r12,8),%r11
	mov    0x10(%rsi),%rdx
	mov    (%rdx,%r12,8),%r12
	mov    (%rcx),%rdx
	mov    0x8(%rcx),%rsi
	mov    0x88(%rdi),%ecx
	shr    %ecx
	jmpq   28613 <extbgrx_h2v2_merged_upsample_internal+0x1a3>
	movzbl (%r12),%r13d
	movslq (%r10,%r13,4),%r10
	movzbl (%r8),%edi
	mov    %rcx,-0x50(%rbp)
	lea    (%rdi,%r10,1),%ecx
	movslq %ecx,%rcx
	movzbl (%r15,%rcx,1),%ecx
	mov    (%rax,%r13,8),%rax
	movzbl (%r11),%r13d
	add    (%r9,%r13,8),%rax
	sar    $0x10,%rax
	lea    (%rdi,%rax,1),%r9d
	movslq %r9d,%r9
	movslq (%r14,%r13,4),%r13
	mov    %cl,0x2(%rdx)
	movzbl (%r15,%r9,1),%ecx
	mov    %cl,0x1(%rdx)
	lea    (%rdi,%r13,1),%ecx
	movslq %ecx,%rcx
	movzbl (%rcx,%r15,1),%ecx
	mov    %cl,(%rdx)
	movb   $0xff,0x3(%rdx)
	movzbl 0x1(%r8),%edi
	lea    (%rdi,%r10,1),%ecx
	movslq %ecx,%rcx
	movzbl (%r15,%rcx,1),%ecx
	mov    %cl,0x6(%rdx)
	lea    (%rdi,%rax,1),%ecx
	movslq %ecx,%rcx
	movzbl (%r15,%rcx,1),%ecx
	mov    %cl,0x5(%rdx)
	lea    (%rdi,%r13,1),%ecx
	movslq %ecx,%rcx
	movzbl (%rcx,%r15,1),%ecx
	mov    %cl,0x4(%rdx)
	movb   $0xff,0x7(%rdx)
	movzbl (%rbx),%edi
	lea    (%rdi,%r10,1),%ecx
	movslq %ecx,%rcx
	movzbl (%r15,%rcx,1),%ecx
	mov    %cl,0x2(%rsi)
	lea    (%rdi,%rax,1),%ecx
	movslq %ecx,%rcx
	movzbl (%r15,%rcx,1),%ecx
	mov    %cl,0x1(%rsi)
	lea    (%rdi,%r13,1),%ecx
	movslq %ecx,%rcx
	movzbl (%rcx,%r15,1),%ecx
	mov    %cl,(%rsi)
	movb   $0xff,0x3(%rsi)
	movzbl 0x1(%rbx),%edi
	lea    (%rdi,%r10,1),%ecx
	movslq %ecx,%rcx
	movzbl (%r15,%rcx,1),%ecx
	mov    %cl,0x6(%rsi)
	add    %edi,%eax
	movslq %eax,%rax
	movzbl (%r15,%rax,1),%eax
	mov    %al,0x5(%rsi)
	lea    (%rdi,%r13,1),%eax
	movslq %eax,%rax
	movzbl (%rax,%r15,1),%eax
	mov    %al,0x4(%rsi)
	movb   $0xff,0x7(%rsi)
	add    $0x2,%rbx
	add    $0x2,%r8
	add    $0x1,%r11
	add    $0x1,%r12
	add    $0x8,%rdx
	add    $0x8,%rsi
	mov    -0x50(%rbp),%rax
	lea    -0x1(%rax),%ecx
	mov    -0x38(%rbp),%r9
	mov    -0x40(%rbp),%rax
	mov    -0x48(%rbp),%r10
	test   %ecx,%ecx
	jne    284f9 <extbgrx_h2v2_merged_upsample_internal+0x89>
	mov    -0x30(%rbp),%rcx
	mov    0x88(%rcx),%ecx
	and    $0x1,%ecx
	test   %ecx,%ecx
	jne    28642 <extbgrx_h2v2_merged_upsample_internal+0x1d2>
	mov    -0x8(%rbp),%rbx
	mov    -0x10(%rbp),%r12
	mov    -0x18(%rbp),%r13
	mov    -0x20(%rbp),%r14
	mov    -0x28(%rbp),%r15
	leaveq 
	retq   
	movzbl (%r12),%r12d
	movslq (%r10,%r12,4),%rdi
	movzbl (%r8),%r13d
	lea    0x0(%r13,%rdi,1),%ecx
	movslq %ecx,%rcx
	movzbl (%r15,%rcx,1),%ecx
	mov    (%rax,%r12,8),%rax
	movzbl (%r11),%r10d
	add    (%r9,%r10,8),%rax
	sar    $0x10,%rax
	lea    0x0(%r13,%rax,1),%r8d
	movslq %r8d,%r8
	movslq (%r14,%r10,4),%r9
	mov    %cl,0x2(%rdx)
	movzbl (%r15,%r8,1),%ecx
	mov    %cl,0x1(%rdx)
	lea    0x0(%r13,%r9,1),%ecx
	movslq %ecx,%rcx
	movzbl (%r15,%rcx,1),%ecx
	mov    %cl,(%rdx)
	movb   $0xff,0x3(%rdx)
	movzbl (%rbx),%edx
	lea    (%rdx,%rdi,1),%ecx
	movslq %ecx,%rcx
	movzbl (%r15,%rcx,1),%ecx
	mov    %cl,0x2(%rsi)
	add    %edx,%eax
	movslq %eax,%rax
	movzbl (%r15,%rax,1),%eax
	mov    %al,0x1(%rsi)
	lea    (%rdx,%r9,1),%eax
	movslq %eax,%rax
	movzbl (%r15,%rax,1),%eax
	mov    %al,(%rsi)
	movb   $0xff,0x3(%rsi)
	mov    -0x8(%rbp),%rbx
	mov    -0x10(%rbp),%r12
	mov    -0x18(%rbp),%r13
	mov    -0x20(%rbp),%r14
	mov    -0x28(%rbp),%r15
	leaveq 
	retq   
	nopl   0x0(%rax)

00286e0 <extxbgr_h2v1_merged_upsample_internal>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x40,%rsp
	mov    %r15,-0x28(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %rdi,-0x30(%rbp)
	mov    %rbx,-0x8(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    0x1a8(%rdi),%r13
	mov    0x260(%rdi),%rbx
	mov    0x28(%rbx),%r12
	mov    0x30(%rbx),%rax
	mov    %rax,-0x40(%rbp)
	mov    0x38(%rbx),%r8
	mov    %r8,-0x38(%rbp)
	mov    0x20(%rbx),%r11
	mov    (%rsi),%rbx
	mov    %edx,%r9d
	mov    (%rbx,%r9,8),%rdx
	mov    0x8(%rsi),%rbx
	mov    (%rbx,%r9,8),%rbx
	mov    0x10(%rsi),%rsi
	mov    (%rsi,%r9,8),%r9
	mov    (%rcx),%rsi
	mov    0x88(%rdi),%ecx
	shr    %ecx
	jmpq   287f6 <extxbgr_h2v1_merged_upsample_internal+0x116>
	movzbl (%r9),%r10d
	movslq (%r11,%r10,4),%r15
	movzbl (%rdx),%edi
	lea    (%rdi,%r15,1),%r14d
	movslq %r14d,%r14
	movzbl 0x0(%r13,%r14,1),%r14d
	mov    (%rax,%r10,8),%rax
	movzbl (%rbx),%r10d
	add    (%r8,%r10,8),%rax
	sar    $0x10,%rax
	lea    (%rdi,%rax,1),%r8d
	movslq %r8d,%r8
	movslq (%r12,%r10,4),%r10
	mov    %r14b,0x3(%rsi)
	movzbl 0x0(%r13,%r8,1),%r8d
	mov    %r8b,0x2(%rsi)
	add    %r10d,%edi
	movslq %edi,%rdi
	movzbl (%rdi,%r13,1),%edi
	mov    %dil,0x1(%rsi)
	movb   $0xff,(%rsi)
	movzbl 0x1(%rdx),%r8d
	lea    (%r8,%r15,1),%edi
	movslq %edi,%rdi
	movzbl 0x0(%r13,%rdi,1),%edi
	mov    %dil,0x7(%rsi)
	add    %r8d,%eax
	movslq %eax,%rax
	movzbl 0x0(%r13,%rax,1),%eax
	mov    %al,0x6(%rsi)
	lea    (%r8,%r10,1),%eax
	movslq %eax,%rax
	movzbl (%rax,%r13,1),%eax
	mov    %al,0x5(%rsi)
	movb   $0xff,0x4(%rsi)
	add    $0x2,%rdx
	add    $0x1,%rbx
	add    $0x1,%r9
	add    $0x8,%rsi
	add    $0xffffffff,%ecx
	mov    -0x38(%rbp),%r8
	mov    -0x40(%rbp),%rax
	test   %ecx,%ecx
	jne    28750 <extxbgr_h2v1_merged_upsample_internal+0x70>
	mov    -0x30(%rbp),%rcx
	mov    0x88(%rcx),%ecx
	and    $0x1,%ecx
	test   %ecx,%ecx
	jne    28825 <extxbgr_h2v1_merged_upsample_internal+0x145>
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	mov    -0x20(%rbp),%r14
	mov    -0x28(%rbp),%r15
	leaveq 
	retq   
	movzbl (%rdx),%ecx
	movzbl (%r9),%edi
	mov    %rcx,%rdx
	add    (%r11,%rdi,4),%edx
	movslq %edx,%rdx
	movzbl 0x0(%r13,%rdx,1),%edx
	mov    (%rax,%rdi,8),%rax
	movzbl (%rbx),%edi
	add    (%r8,%rdi,8),%rax
	sar    $0x10,%rax
	add    %ecx,%eax
	movslq %eax,%rax
	add    (%r12,%rdi,4),%ecx
	mov    %dl,0x3(%rsi)
	movzbl 0x0(%r13,%rax,1),%eax
	mov    %al,0x2(%rsi)
	movslq %ecx,%rax
	movzbl 0x0(%r13,%rax,1),%eax
	mov    %al,0x1(%rsi)
	movb   $0xff,(%rsi)
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	mov    -0x20(%rbp),%r14
	mov    -0x28(%rbp),%r15
	leaveq 
	retq   
	data16 nopw %cs:0x0(%rax,%rax,1)

0028890 <extxbgr_h2v2_merged_upsample_internal>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x50,%rsp
	mov    %r15,-0x28(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    %rdi,-0x30(%rbp)
	mov    %rbx,-0x8(%rbp)
	mov    0x1a8(%rdi),%r15
	mov    0x260(%rdi),%rbx
	mov    0x28(%rbx),%r14
	mov    0x30(%rbx),%rax
	mov    %rax,-0x40(%rbp)
	mov    0x38(%rbx),%r9
	mov    %r9,-0x38(%rbp)
	mov    0x20(%rbx),%r10
	mov    %r10,-0x48(%rbp)
	mov    (%rsi),%r11
	lea    (%rdx,%rdx,1),%r8d
	lea    0x1(%r8),%ebx
	mov    %ebx,%ebx
	mov    (%r11,%rbx,8),%rbx
	mov    %r8d,%r8d
	mov    (%r11,%r8,8),%r8
	mov    0x8(%rsi),%r11
	mov    %edx,%r12d
	mov    (%r11,%r12,8),%r11
	mov    0x10(%rsi),%rdx
	mov    (%rdx,%r12,8),%r12
	mov    (%rcx),%rdx
	mov    0x8(%rcx),%rsi
	mov    0x88(%rdi),%ecx
	shr    %ecx
	jmpq   28a33 <extxbgr_h2v2_merged_upsample_internal+0x1a3>
	movzbl (%r12),%r13d
	movslq (%r10,%r13,4),%r10
	movzbl (%r8),%edi
	mov    %rcx,-0x50(%rbp)
	lea    (%rdi,%r10,1),%ecx
	movslq %ecx,%rcx
	movzbl (%r15,%rcx,1),%ecx
	mov    (%rax,%r13,8),%rax
	movzbl (%r11),%r13d
	add    (%r9,%r13,8),%rax
	sar    $0x10,%rax
	lea    (%rdi,%rax,1),%r9d
	movslq %r9d,%r9
	movslq (%r14,%r13,4),%r13
	mov    %cl,0x3(%rdx)
	movzbl (%r15,%r9,1),%ecx
	mov    %cl,0x2(%rdx)
	lea    (%rdi,%r13,1),%ecx
	movslq %ecx,%rcx
	movzbl (%rcx,%r15,1),%ecx
	mov    %cl,0x1(%rdx)
	movb   $0xff,(%rdx)
	movzbl 0x1(%r8),%edi
	lea    (%rdi,%r10,1),%ecx
	movslq %ecx,%rcx
	movzbl (%r15,%rcx,1),%ecx
	mov    %cl,0x7(%rdx)
	lea    (%rdi,%rax,1),%ecx
	movslq %ecx,%rcx
	movzbl (%r15,%rcx,1),%ecx
	mov    %cl,0x6(%rdx)
	lea    (%rdi,%r13,1),%ecx
	movslq %ecx,%rcx
	movzbl (%rcx,%r15,1),%ecx
	mov    %cl,0x5(%rdx)
	movb   $0xff,0x4(%rdx)
	movzbl (%rbx),%edi
	lea    (%rdi,%r10,1),%ecx
	movslq %ecx,%rcx
	movzbl (%r15,%rcx,1),%ecx
	mov    %cl,0x3(%rsi)
	lea    (%rdi,%rax,1),%ecx
	movslq %ecx,%rcx
	movzbl (%r15,%rcx,1),%ecx
	mov    %cl,0x2(%rsi)
	lea    (%rdi,%r13,1),%ecx
	movslq %ecx,%rcx
	movzbl (%rcx,%r15,1),%ecx
	mov    %cl,0x1(%rsi)
	movb   $0xff,(%rsi)
	movzbl 0x1(%rbx),%edi
	lea    (%rdi,%r10,1),%ecx
	movslq %ecx,%rcx
	movzbl (%r15,%rcx,1),%ecx
	mov    %cl,0x7(%rsi)
	add    %edi,%eax
	movslq %eax,%rax
	movzbl (%r15,%rax,1),%eax
	mov    %al,0x6(%rsi)
	lea    (%rdi,%r13,1),%eax
	movslq %eax,%rax
	movzbl (%rax,%r15,1),%eax
	mov    %al,0x5(%rsi)
	movb   $0xff,0x4(%rsi)
	add    $0x2,%rbx
	add    $0x2,%r8
	add    $0x1,%r11
	add    $0x1,%r12
	add    $0x8,%rdx
	add    $0x8,%rsi
	mov    -0x50(%rbp),%rax
	lea    -0x1(%rax),%ecx
	mov    -0x38(%rbp),%r9
	mov    -0x40(%rbp),%rax
	mov    -0x48(%rbp),%r10
	test   %ecx,%ecx
	jne    28919 <extxbgr_h2v2_merged_upsample_internal+0x89>
	mov    -0x30(%rbp),%rcx
	mov    0x88(%rcx),%ecx
	and    $0x1,%ecx
	test   %ecx,%ecx
	jne    28a62 <extxbgr_h2v2_merged_upsample_internal+0x1d2>
	mov    -0x8(%rbp),%rbx
	mov    -0x10(%rbp),%r12
	mov    -0x18(%rbp),%r13
	mov    -0x20(%rbp),%r14
	mov    -0x28(%rbp),%r15
	leaveq 
	retq   
	movzbl (%r12),%r12d
	movslq (%r10,%r12,4),%rdi
	movzbl (%r8),%r13d
	lea    0x0(%r13,%rdi,1),%ecx
	movslq %ecx,%rcx
	movzbl (%r15,%rcx,1),%ecx
	mov    (%rax,%r12,8),%rax
	movzbl (%r11),%r10d
	add    (%r9,%r10,8),%rax
	sar    $0x10,%rax
	lea    0x0(%r13,%rax,1),%r8d
	movslq %r8d,%r8
	movslq (%r14,%r10,4),%r9
	mov    %cl,0x3(%rdx)
	movzbl (%r15,%r8,1),%ecx
	mov    %cl,0x2(%rdx)
	lea    0x0(%r13,%r9,1),%ecx
	movslq %ecx,%rcx
	movzbl (%r15,%rcx,1),%ecx
	mov    %cl,0x1(%rdx)
	movb   $0xff,(%rdx)
	movzbl (%rbx),%edx
	lea    (%rdx,%rdi,1),%ecx
	movslq %ecx,%rcx
	movzbl (%r15,%rcx,1),%ecx
	mov    %cl,0x3(%rsi)
	add    %edx,%eax
	movslq %eax,%rax
	movzbl (%r15,%rax,1),%eax
	mov    %al,0x2(%rsi)
	lea    (%rdx,%r9,1),%eax
	movslq %eax,%rax
	movzbl (%r15,%rax,1),%eax
	mov    %al,0x1(%rsi)
	movb   $0xff,(%rsi)
	mov    -0x8(%rbp),%rbx
	mov    -0x10(%rbp),%r12
	mov    -0x18(%rbp),%r13
	mov    -0x20(%rbp),%r14
	mov    -0x28(%rbp),%r15
	leaveq 
	retq   
	nopl   0x0(%rax)

0028b00 <extxrgb_h2v1_merged_upsample_internal>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x40,%rsp
	mov    %r15,-0x28(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %rdi,-0x30(%rbp)
	mov    %rbx,-0x8(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    0x1a8(%rdi),%r13
	mov    0x260(%rdi),%rbx
	mov    0x28(%rbx),%r12
	mov    0x30(%rbx),%rax
	mov    %rax,-0x40(%rbp)
	mov    0x38(%rbx),%r8
	mov    %r8,-0x38(%rbp)
	mov    0x20(%rbx),%r11
	mov    (%rsi),%rbx
	mov    %edx,%r9d
	mov    (%rbx,%r9,8),%rdx
	mov    0x8(%rsi),%rbx
	mov    (%rbx,%r9,8),%rbx
	mov    0x10(%rsi),%rsi
	mov    (%rsi,%r9,8),%r9
	mov    (%rcx),%rsi
	mov    0x88(%rdi),%ecx
	shr    %ecx
	jmpq   28c16 <extxrgb_h2v1_merged_upsample_internal+0x116>
	movzbl (%r9),%r10d
	movslq (%r11,%r10,4),%r15
	movzbl (%rdx),%edi
	lea    (%rdi,%r15,1),%r14d
	movslq %r14d,%r14
	movzbl 0x0(%r13,%r14,1),%r14d
	mov    (%rax,%r10,8),%rax
	movzbl (%rbx),%r10d
	add    (%r8,%r10,8),%rax
	sar    $0x10,%rax
	lea    (%rdi,%rax,1),%r8d
	movslq %r8d,%r8
	movslq (%r12,%r10,4),%r10
	mov    %r14b,0x1(%rsi)
	movzbl 0x0(%r13,%r8,1),%r8d
	mov    %r8b,0x2(%rsi)
	add    %r10d,%edi
	movslq %edi,%rdi
	movzbl (%rdi,%r13,1),%edi
	mov    %dil,0x3(%rsi)
	movb   $0xff,(%rsi)
	movzbl 0x1(%rdx),%r8d
	lea    (%r8,%r15,1),%edi
	movslq %edi,%rdi
	movzbl 0x0(%r13,%rdi,1),%edi
	mov    %dil,0x5(%rsi)
	add    %r8d,%eax
	movslq %eax,%rax
	movzbl 0x0(%r13,%rax,1),%eax
	mov    %al,0x6(%rsi)
	lea    (%r8,%r10,1),%eax
	movslq %eax,%rax
	movzbl (%rax,%r13,1),%eax
	mov    %al,0x7(%rsi)
	movb   $0xff,0x4(%rsi)
	add    $0x2,%rdx
	add    $0x1,%rbx
	add    $0x1,%r9
	add    $0x8,%rsi
	add    $0xffffffff,%ecx
	mov    -0x38(%rbp),%r8
	mov    -0x40(%rbp),%rax
	test   %ecx,%ecx
	jne    28b70 <extxrgb_h2v1_merged_upsample_internal+0x70>
	mov    -0x30(%rbp),%rcx
	mov    0x88(%rcx),%ecx
	and    $0x1,%ecx
	test   %ecx,%ecx
	jne    28c45 <extxrgb_h2v1_merged_upsample_internal+0x145>
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	mov    -0x20(%rbp),%r14
	mov    -0x28(%rbp),%r15
	leaveq 
	retq   
	movzbl (%rdx),%ecx
	movzbl (%r9),%edi
	mov    %rcx,%rdx
	add    (%r11,%rdi,4),%edx
	movslq %edx,%rdx
	movzbl 0x0(%r13,%rdx,1),%edx
	mov    (%rax,%rdi,8),%rax
	movzbl (%rbx),%edi
	add    (%r8,%rdi,8),%rax
	sar    $0x10,%rax
	add    %ecx,%eax
	movslq %eax,%rax
	add    (%r12,%rdi,4),%ecx
	mov    %dl,0x1(%rsi)
	movzbl 0x0(%r13,%rax,1),%eax
	mov    %al,0x2(%rsi)
	movslq %ecx,%rax
	movzbl 0x0(%r13,%rax,1),%eax
	mov    %al,0x3(%rsi)
	movb   $0xff,(%rsi)
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	mov    -0x20(%rbp),%r14
	mov    -0x28(%rbp),%r15
	leaveq 
	retq   
	data16 nopw %cs:0x0(%rax,%rax,1)

0028cb0 <extxrgb_h2v2_merged_upsample_internal>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x50,%rsp
	mov    %r15,-0x28(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    %rdi,-0x30(%rbp)
	mov    %rbx,-0x8(%rbp)
	mov    0x1a8(%rdi),%r15
	mov    0x260(%rdi),%rbx
	mov    0x28(%rbx),%r14
	mov    0x30(%rbx),%rax
	mov    %rax,-0x40(%rbp)
	mov    0x38(%rbx),%r9
	mov    %r9,-0x38(%rbp)
	mov    0x20(%rbx),%r10
	mov    %r10,-0x48(%rbp)
	mov    (%rsi),%r11
	lea    (%rdx,%rdx,1),%r8d
	lea    0x1(%r8),%ebx
	mov    %ebx,%ebx
	mov    (%r11,%rbx,8),%rbx
	mov    %r8d,%r8d
	mov    (%r11,%r8,8),%r8
	mov    0x8(%rsi),%r11
	mov    %edx,%r12d
	mov    (%r11,%r12,8),%r11
	mov    0x10(%rsi),%rdx
	mov    (%rdx,%r12,8),%r12
	mov    (%rcx),%rdx
	mov    0x8(%rcx),%rsi
	mov    0x88(%rdi),%ecx
	shr    %ecx
	jmpq   28e53 <extxrgb_h2v2_merged_upsample_internal+0x1a3>
	movzbl (%r12),%r13d
	movslq (%r10,%r13,4),%r10
	movzbl (%r8),%edi
	mov    %rcx,-0x50(%rbp)
	lea    (%rdi,%r10,1),%ecx
	movslq %ecx,%rcx
	movzbl (%r15,%rcx,1),%ecx
	mov    (%rax,%r13,8),%rax
	movzbl (%r11),%r13d
	add    (%r9,%r13,8),%rax
	sar    $0x10,%rax
	lea    (%rdi,%rax,1),%r9d
	movslq %r9d,%r9
	movslq (%r14,%r13,4),%r13
	mov    %cl,0x1(%rdx)
	movzbl (%r15,%r9,1),%ecx
	mov    %cl,0x2(%rdx)
	lea    (%rdi,%r13,1),%ecx
	movslq %ecx,%rcx
	movzbl (%rcx,%r15,1),%ecx
	mov    %cl,0x3(%rdx)
	movb   $0xff,(%rdx)
	movzbl 0x1(%r8),%edi
	lea    (%rdi,%r10,1),%ecx
	movslq %ecx,%rcx
	movzbl (%r15,%rcx,1),%ecx
	mov    %cl,0x5(%rdx)
	lea    (%rdi,%rax,1),%ecx
	movslq %ecx,%rcx
	movzbl (%r15,%rcx,1),%ecx
	mov    %cl,0x6(%rdx)
	lea    (%rdi,%r13,1),%ecx
	movslq %ecx,%rcx
	movzbl (%rcx,%r15,1),%ecx
	mov    %cl,0x7(%rdx)
	movb   $0xff,0x4(%rdx)
	movzbl (%rbx),%edi
	lea    (%rdi,%r10,1),%ecx
	movslq %ecx,%rcx
	movzbl (%r15,%rcx,1),%ecx
	mov    %cl,0x1(%rsi)
	lea    (%rdi,%rax,1),%ecx
	movslq %ecx,%rcx
	movzbl (%r15,%rcx,1),%ecx
	mov    %cl,0x2(%rsi)
	lea    (%rdi,%r13,1),%ecx
	movslq %ecx,%rcx
	movzbl (%rcx,%r15,1),%ecx
	mov    %cl,0x3(%rsi)
	movb   $0xff,(%rsi)
	movzbl 0x1(%rbx),%edi
	lea    (%rdi,%r10,1),%ecx
	movslq %ecx,%rcx
	movzbl (%r15,%rcx,1),%ecx
	mov    %cl,0x5(%rsi)
	add    %edi,%eax
	movslq %eax,%rax
	movzbl (%r15,%rax,1),%eax
	mov    %al,0x6(%rsi)
	lea    (%rdi,%r13,1),%eax
	movslq %eax,%rax
	movzbl (%rax,%r15,1),%eax
	mov    %al,0x7(%rsi)
	movb   $0xff,0x4(%rsi)
	add    $0x2,%rbx
	add    $0x2,%r8
	add    $0x1,%r11
	add    $0x1,%r12
	add    $0x8,%rdx
	add    $0x8,%rsi
	mov    -0x50(%rbp),%rax
	lea    -0x1(%rax),%ecx
	mov    -0x38(%rbp),%r9
	mov    -0x40(%rbp),%rax
	mov    -0x48(%rbp),%r10
	test   %ecx,%ecx
	jne    28d39 <extxrgb_h2v2_merged_upsample_internal+0x89>
	mov    -0x30(%rbp),%rcx
	mov    0x88(%rcx),%ecx
	and    $0x1,%ecx
	test   %ecx,%ecx
	jne    28e82 <extxrgb_h2v2_merged_upsample_internal+0x1d2>
	mov    -0x8(%rbp),%rbx
	mov    -0x10(%rbp),%r12
	mov    -0x18(%rbp),%r13
	mov    -0x20(%rbp),%r14
	mov    -0x28(%rbp),%r15
	leaveq 
	retq   
	movzbl (%r12),%r12d
	movslq (%r10,%r12,4),%rdi
	movzbl (%r8),%r13d
	lea    0x0(%r13,%rdi,1),%ecx
	movslq %ecx,%rcx
	movzbl (%r15,%rcx,1),%ecx
	mov    (%rax,%r12,8),%rax
	movzbl (%r11),%r10d
	add    (%r9,%r10,8),%rax
	sar    $0x10,%rax
	lea    0x0(%r13,%rax,1),%r8d
	movslq %r8d,%r8
	movslq (%r14,%r10,4),%r9
	mov    %cl,0x1(%rdx)
	movzbl (%r15,%r8,1),%ecx
	mov    %cl,0x2(%rdx)
	lea    0x0(%r13,%r9,1),%ecx
	movslq %ecx,%rcx
	movzbl (%r15,%rcx,1),%ecx
	mov    %cl,0x3(%rdx)
	movb   $0xff,(%rdx)
	movzbl (%rbx),%edx
	lea    (%rdx,%rdi,1),%ecx
	movslq %ecx,%rcx
	movzbl (%r15,%rcx,1),%ecx
	mov    %cl,0x1(%rsi)
	add    %edx,%eax
	movslq %eax,%rax
	movzbl (%r15,%rax,1),%eax
	mov    %al,0x2(%rsi)
	lea    (%rdx,%r9,1),%eax
	movslq %eax,%rax
	movzbl (%r15,%rax,1),%eax
	mov    %al,0x3(%rsi)
	movb   $0xff,(%rsi)
	mov    -0x8(%rbp),%rbx
	mov    -0x10(%rbp),%r12
	mov    -0x18(%rbp),%r13
	mov    -0x20(%rbp),%r14
	mov    -0x28(%rbp),%r15
	leaveq 
	retq   
	nopl   0x0(%rax)

0028f20 <build_ycc_rgb_table>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %r12,-0x8(%rbp)
	mov    %r13,-0x10(%rbp)
	mov    %r14,-0x18(%rbp)
	mov    %r15,-0x20(%rbp)
	mov    0x8(%rdi),%rax
	mov    (%rax),%rax
	mov    $0x1,%r13d
	mov    $0x400,%r15d
	mov    0x260(%rdi),%r14
	mov    %rdi,%r12
	mov    %r13,%rsi
	mov    %r15,%rdx
	callq  *%rax
	mov    %rax,0x20(%r14)
	mov    0x8(%r12),%rax
	mov    (%rax),%rax
	mov    %r15,%rdx
	mov    %r12,%rdi
	mov    %r13,%rsi
	callq  *%rax
	mov    %rax,0x28(%r14)
	mov    0x8(%r12),%rax
	mov    (%rax),%rax
	mov    $0x800,%r15d
	mov    %r12,%rdi
	mov    %r13,%rsi
	mov    %r15,%rdx
	callq  *%rax
	mov    %rax,0x30(%r14)
	mov    0x8(%r12),%rax
	mov    (%rax),%rax
	mov    %r15,%rdx
	mov    %r13,%rsi
	mov    %r12,%rdi
	callq  *%rax
	mov    %rax,0x38(%r14)
	xor    %eax,%eax
	mov    $0xffffffffffffff80,%rcx
	jmp    29024 <build_ycc_rgb_table+0x104>
	mov    %rcx,%rdx
	imul   $0x166e9,%rdx,%rdx
	add    $0x8000,%rdx
	sar    $0x10,%rdx
	mov    0x20(%r14),%rsi
	movslq %eax,%rdi
	mov    %edx,(%rsi,%rdi,4)
	mov    %rcx,%rdx
	imul   $0x1c5a2,%rdx,%rdx
	add    $0x8000,%rdx
	sar    $0x10,%rdx
	mov    0x28(%r14),%rsi
	mov    %edx,(%rsi,%rdi,4)
	mov    %rcx,%rsi
	imul   $0xffffffffffff492e,%rsi,%rsi
	mov    0x30(%r14),%rdx
	mov    %rsi,(%rdx,%rdi,8)
	mov    %rcx,%rdx
	imul   $0xffffffffffffa7e6,%rdx,%rdx
	lea    0x8000(%rdx),%rsi
	mov    0x38(%r14),%rdx
	mov    %rsi,(%rdx,%rdi,8)
	add    $0x1,%eax
	add    $0x1,%rcx
	cmp    $0xff,%eax
	jle    28fb7 <build_ycc_rgb_table+0x97>
	mov    -0x20(%rbp),%r15
	mov    -0x18(%rbp),%r14
	mov    -0x10(%rbp),%r13
	mov    -0x8(%rbp),%r12
	leaveq 
	retq   
	nopl   (%rax)

0029040 <start_pass_merged_upsample>:
	push   %rbp
	mov    %rsp,%rbp
	mov    0x260(%rdi),%rax
	movl   $0x0,0x48(%rax)
	mov    0x8c(%rdi),%ecx
	mov    %ecx,0x50(%rax)
	leaveq 
	retq   
	nopl   (%rax)

0029060 <merged_2v_upsample>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %r13,-0x10(%rbp)
	mov    %r14,-0x18(%rbp)
	mov    %r15,-0x20(%rbp)
	mov    0x260(%rdi),%r15
	movslq 0x48(%r15),%rax
	test   %eax,%eax
	jne    290ca <merged_2v_upsample+0x6a>
	mov    0x50(%r15),%r13d
	cmp    $0x1,%r13d
	jbe    29093 <merged_2v_upsample+0x33>
	mov    $0x2,%r13d
	mov    (%r9),%ecx
	mov    0x10(%rbp),%eax
	sub    %ecx,%eax
	cmp    %eax,%r13d
	jbe    290a3 <merged_2v_upsample+0x43>
	mov    %rax,%r13
	mov    (%r8,%rcx,8),%rax
	mov    %rax,-0x30(%rbp)
	cmp    $0x1,%r13d
	ja     2913e <merged_2v_upsample+0xde>
	mov    0x40(%r15),%rax
	mov    %rax,-0x28(%rbp)
	movl   $0x1,0x48(%r15)
	jmpq   2914e <merged_2v_upsample+0xee>
	mov    0x4c(%r15),%eax
	mov    0x40(%rdi),%ecx
	cmp    $0x10,%ecx
	jne    290de <merged_2v_upsample+0x7e>
	mov    0x88(%rdi),%eax
	add    %eax,%eax
	mov    (%r9),%ecx
	lea    (%r8,%rcx,8),%r10
	mov    %r9,%r13
	mov    %rax,%r9
	mov    %rdx,%r14
	mov    %r10,%rdx
	mov    $0x1,%r8d
	lea    0x40(%r15),%rdi
	xor    %esi,%esi
	mov    %rsi,%rcx
	callq  43f0 <jcopy_sample_rows@plt>
	movl   $0x0,0x48(%r15)
	mov    %r13,%rcx
	mov    $0x1,%r13d
	mov    %r13,%rax
	add    (%rcx),%eax
	mov    %eax,(%rcx)
	mov    0x50(%r15),%eax
	sub    %r13d,%eax
	mov    %eax,0x50(%r15)
	movslq 0x48(%r15),%rax
	test   %eax,%eax
	je     29171 <merged_2v_upsample+0x111>
	mov    -0x20(%rbp),%r15
	mov    -0x18(%rbp),%r14
	mov    -0x10(%rbp),%r13
	leaveq 
	retq   
	mov    (%r9),%eax
	add    $0x1,%eax
	mov    %eax,%eax
	mov    (%r8,%rax,8),%rax
	mov    %rax,-0x28(%rbp)
	mov    0x18(%r15),%rax
	mov    (%rdx),%r8d
	lea    -0x30(%rbp),%rcx
	mov    %r12,-0x8(%rbp)
	mov    %r9,%r12
	mov    %rdx,%r14
	mov    %r8,%rdx
	callq  *%rax
	mov    %r12,%rcx
	mov    -0x8(%rbp),%r12
	jmp    29116 <merged_2v_upsample+0xb6>
	mov    (%r14),%eax
	add    $0x1,%eax
	mov    %eax,(%r14)
	mov    -0x20(%rbp),%r15
	mov    -0x18(%rbp),%r14
	mov    -0x10(%rbp),%r13
	leaveq 
	retq   
	nopl   0x0(%rax,%rax,1)

0029190 <merged_1v_upsample>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %r14,-0x8(%rbp)
	mov    %r15,-0x10(%rbp)
	mov    (%r9),%eax
	lea    (%r8,%rax,8),%rcx
	mov    0x260(%rdi),%rax
	mov    0x18(%rax),%rax
	mov    %r9,%r14
	mov    %rdx,%r15
	mov    (%r15),%edx
	callq  *%rax
	mov    (%r14),%eax
	add    $0x1,%eax
	mov    %eax,(%r14)
	mov    (%r15),%eax
	add    $0x1,%eax
	mov    %eax,(%r15)
	mov    -0x10(%rbp),%r15
	mov    -0x8(%rbp),%r14
	leaveq 
	retq   
	nopl   0x0(%rax)

00291e0 <h2v1_merged_upsample>:
	push   %rbp
	mov    %rsp,%rbp
	mov    0x40(%rdi),%eax
	add    $0xfffffffa,%eax
	cmp    $0x9,%eax
	ja     29206 <h2v1_merged_upsample+0x26>
	lea    0x30e4a(%rip),%r8        # 5a040 <rgb_pixelsize+0x48>
	movslq (%r8,%rax,4),%rax
	add    %r8,%rax
	jmpq   *%rax
	callq  28b00 <extxrgb_h2v1_merged_upsample_internal>
	leaveq 
	retq   
	callq  272a0 <h2v1_merged_upsample_internal>
	leaveq 
	retq   
	callq  276a0 <extrgb_h2v1_merged_upsample_internal>
	leaveq 
	retq   
	callq  27aa0 <extrgbx_h2v1_merged_upsample_internal>
	leaveq 
	retq   
	callq  27ec0 <extbgr_h2v1_merged_upsample_internal>
	leaveq 
	retq   
	callq  282c0 <extbgrx_h2v1_merged_upsample_internal>
	leaveq 
	retq   
	callq  286e0 <extxbgr_h2v1_merged_upsample_internal>
	leaveq 
	retq   

0029230 <h2v2_merged_upsample>:
	push   %rbp
	mov    %rsp,%rbp
	mov    0x40(%rdi),%eax
	add    $0xfffffffa,%eax
	cmp    $0x9,%eax
	ja     29256 <h2v2_merged_upsample+0x26>
	lea    0x30e22(%rip),%r8        # 5a068 <rgb_pixelsize+0x70>
	movslq (%r8,%rax,4),%rax
	add    %r8,%rax
	jmpq   *%rax
	callq  28cb0 <extxrgb_h2v2_merged_upsample_internal>
	leaveq 
	retq   
	callq  27440 <h2v2_merged_upsample_internal>
	leaveq 
	retq   
	callq  27840 <extrgb_h2v2_merged_upsample_internal>
	leaveq 
	retq   
	callq  27c50 <extrgbx_h2v2_merged_upsample_internal>
	leaveq 
	retq   
	callq  28060 <extbgr_h2v2_merged_upsample_internal>
	leaveq 
	retq   
	callq  28470 <extbgrx_h2v2_merged_upsample_internal>
	leaveq 
	retq   
	callq  28890 <extxbgr_h2v2_merged_upsample_internal>
	leaveq 
	retq   

0029280 <h2v1_merged_upsample_565_le>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x40,%rsp
	mov    %r15,-0x28(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %rdi,-0x30(%rbp)
	mov    %rbx,-0x8(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    0x1a8(%rdi),%r13
	mov    0x260(%rdi),%rbx
	mov    0x20(%rbx),%rax
	mov    %rax,-0x38(%rbp)
	mov    0x30(%rbx),%r12
	mov    0x38(%rbx),%r10
	mov    %r10,-0x40(%rbp)
	mov    0x28(%rbx),%r11
	mov    (%rsi),%rbx
	mov    %edx,%edx
	mov    (%rbx,%rdx,8),%rbx
	mov    0x8(%rsi),%r8
	mov    (%r8,%rdx,8),%r8
	mov    0x10(%rsi),%rsi
	mov    (%rsi,%rdx,8),%r9
	mov    (%rcx),%rsi
	mov    0x88(%rdi),%edx
	shr    %edx
	jmpq   293bb <h2v1_merged_upsample_565_le+0x13b>
	movzbl (%r9),%r15d
	mov    (%r12,%r15,8),%rcx
	movzbl (%r8),%r14d
	add    (%r10,%r14,8),%rcx
	sar    $0x10,%rcx
	movzbl (%rbx),%r10d
	lea    (%r10,%rcx,1),%edi
	movslq %edi,%rdi
	movzbl (%rdi,%r13,1),%edi
	and    $0xfc,%edi
	movslq (%rax,%r15,4),%r15
	lea    (%r10,%r15,1),%eax
	movslq %eax,%rax
	movzbl 0x0(%r13,%rax,1),%eax
	and    $0xf8,%eax
	shl    $0x8,%eax
	lea    (%rax,%rdi,8),%edi
	movslq (%r11,%r14,4),%r14
	lea    (%r10,%r14,1),%eax
	movslq %eax,%rax
	movzbl 0x0(%r13,%rax,1),%eax
	shr    $0x3,%eax
	lea    (%rdi,%rax,1),%r10d
	movzbl 0x1(%rbx),%edi
	lea    (%rcx,%rdi,1),%eax
	movslq %eax,%rax
	movzbl 0x0(%r13,%rax,1),%ecx
	and    $0xfc,%ecx
	lea    (%r15,%rdi,1),%eax
	movslq %eax,%rax
	movzbl 0x0(%r13,%rax,1),%eax
	and    $0xf8,%eax
	shl    $0x8,%eax
	lea    (%rax,%rcx,8),%ecx
	lea    (%r14,%rdi,1),%eax
	movslq %eax,%rax
	movzbl 0x0(%r13,%rax,1),%eax
	shr    $0x3,%eax
	add    %ecx,%eax
	shl    $0x10,%eax
	add    %r10d,%eax
	mov    %ax,(%rsi)
	mov    %eax,%eax
	shr    $0x10,%rax
	mov    %ax,0x2(%rsi)
	add    $0x2,%rbx
	add    $0x1,%r9
	add    $0x1,%r8
	add    $0x4,%rsi
	add    $0xffffffff,%edx
	mov    -0x38(%rbp),%rax
	mov    -0x40(%rbp),%r10
	test   %edx,%edx
	jne    292ef <h2v1_merged_upsample_565_le+0x6f>
	mov    -0x30(%rbp),%rcx
	mov    0x88(%rcx),%ecx
	and    $0x1,%ecx
	test   %ecx,%ecx
	jne    293ea <h2v1_merged_upsample_565_le+0x16a>
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	mov    -0x20(%rbp),%r14
	mov    -0x28(%rbp),%r15
	leaveq 
	retq   
	movzbl (%rbx),%edx
	movzbl (%r9),%ecx
	mov    (%rax,%rcx,4),%eax
	add    %edx,%eax
	movslq %eax,%rax
	movzbl 0x0(%r13,%rax,1),%eax
	and    $0xf8,%ax
	shl    $0x8,%eax
	mov    (%r12,%rcx,8),%rcx
	movzbl (%r8),%edi
	add    (%r10,%rdi,8),%rcx
	sar    $0x10,%rcx
	add    %edx,%ecx
	movslq %ecx,%rcx
	movzbl 0x0(%r13,%rcx,1),%ecx
	and    $0xfc,%cx
	lea    (%rax,%rcx,8),%ecx
	add    (%r11,%rdi,4),%edx
	movslq %edx,%rax
	movzbl 0x0(%r13,%rax,1),%eax
	shr    $0x3,%eax
	add    %ecx,%eax
	mov    %ax,(%rsi)
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	mov    -0x20(%rbp),%r14
	mov    -0x28(%rbp),%r15
	leaveq 
	retq   
	data16 nopw %cs:0x0(%rax,%rax,1)
	nop

0029460 <h2v1_merged_upsample_565D_le>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x60,%rsp
	mov    %r15,-0x28(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    %rdi,-0x30(%rbp)
	mov    %rbx,-0x8(%rbp)
	mov    0x1a8(%rdi),%r14
	mov    0x260(%rdi),%rax
	mov    0x20(%rax),%r9
	mov    %r9,-0x38(%rbp)
	mov    0x30(%rax),%rbx
	mov    %rbx,-0x40(%rbp)
	mov    0x38(%rax),%r8
	mov    %r8,-0x50(%rbp)
	mov    0x28(%rax),%r13
	lea    0x30bdf(%rip),%r10        # 5a090 <dither_matrix>
	mov    0xa8(%rdi),%eax
	and    $0x3,%eax
	mov    %eax,%eax
	mov    (%r10,%rax,8),%rax
	mov    (%rsi),%r10
	mov    %edx,%edx
	mov    (%r10,%rdx,8),%r12
	mov    0x8(%rsi),%r10
	mov    (%r10,%rdx,8),%r10
	mov    0x10(%rsi),%rsi
	mov    (%rsi,%rdx,8),%rdx
	mov    (%rcx),%r11
	mov    0x88(%rdi),%esi
	shr    %esi
	jmpq   2961b <h2v1_merged_upsample_565D_le+0x1bb>
	movzbl %al,%edi
	lea    (%r14,%rdi,1),%rcx
	movzbl (%rdx),%r15d
	movslq (%r9,%r15,4),%r9
	mov    %rsi,-0x58(%rbp)
	movzbl (%r12),%esi
	mov    %rdx,-0x48(%rbp)
	lea    (%rsi,%r9,1),%edx
	movslq %edx,%rdx
	movzbl (%rcx,%rdx,1),%ecx
	and    $0xf8,%ecx
	shl    $0x8,%ecx
	mov    (%rbx,%r15,8),%rdx
	movzbl (%r10),%r15d
	add    (%r8,%r15,8),%rdx
	sar    $0x10,%rdx
	lea    (%rsi,%rdx,1),%ebx
	movslq %ebx,%r8
	mov    %rax,%rbx
	and    $0xfe,%rbx
	shr    %rbx
	add    %r14,%rbx
	movzbl (%rbx,%r8,1),%ebx
	and    $0xfc,%ebx
	lea    (%rcx,%rbx,8),%r8d
	movslq 0x0(%r13,%r15,4),%rbx
	lea    (%rsi,%rbx,1),%ecx
	movslq %ecx,%rcx
	add    %r14,%rcx
	movzbl (%rcx,%rdi,1),%ecx
	shr    $0x3,%ecx
	lea    (%r8,%rcx,1),%r15d
	mov    $0xffffff00,%ecx
	and    %rcx,%rax
	shr    $0x8,%rax
	shl    $0x18,%rdi
	lea    (%rdi,%rax,1),%rsi
	movzbl %sil,%edi
	lea    (%r14,%rdi,1),%rcx
	movzbl 0x1(%r12),%r8d
	lea    (%r9,%r8,1),%eax
	movslq %eax,%rax
	movzbl (%rcx,%rax,1),%eax
	and    $0xf8,%eax
	shl    $0x8,%eax
	lea    (%rdx,%r8,1),%ecx
	movslq %ecx,%rdx
	mov    %rsi,%rcx
	and    $0xfe,%rcx
	shr    %rcx
	add    %r14,%rcx
	movzbl (%rcx,%rdx,1),%ecx
	and    $0xfc,%ecx
	lea    (%rax,%rcx,8),%ecx
	lea    (%rbx,%r8,1),%eax
	movslq %eax,%rax
	add    %r14,%rax
	movzbl (%rax,%rdi,1),%eax
	shr    $0x3,%eax
	add    %ecx,%eax
	shl    $0x10,%eax
	add    %r15d,%eax
	mov    %ax,(%r11)
	mov    %eax,%eax
	shr    $0x10,%rax
	mov    %ax,0x2(%r11)
	shr    $0x8,%rsi
	shl    $0x18,%rdi
	lea    (%rsi,%rdi,1),%rax
	add    $0x2,%r12
	mov    -0x48(%rbp),%rcx
	lea    0x1(%rcx),%rdx
	add    $0x1,%r10
	add    $0x4,%r11
	mov    -0x58(%rbp),%rcx
	lea    -0x1(%rcx),%esi
	mov    -0x40(%rbp),%rbx
	mov    -0x50(%rbp),%r8
	mov    -0x38(%rbp),%r9
	test   %esi,%esi
	jne    294e9 <h2v1_merged_upsample_565D_le+0x89>
	mov    -0x30(%rbp),%rcx
	mov    0x88(%rcx),%ecx
	and    $0x1,%ecx
	test   %ecx,%ecx
	jne    2964a <h2v1_merged_upsample_565D_le+0x1ea>
	mov    -0x8(%rbp),%rbx
	mov    -0x10(%rbp),%r12
	mov    -0x18(%rbp),%r13
	mov    -0x20(%rbp),%r14
	mov    -0x28(%rbp),%r15
	leaveq 
	retq   
	movzbl (%r12),%esi
	movzbl (%rdx),%edx
	mov    %rsi,%rcx
	add    (%r9,%rdx,4),%ecx
	movslq %ecx,%rcx
	movzbl %al,%r9d
	add    %r9,%rcx
	movzbl (%r14,%rcx,1),%ecx
	and    $0xf8,%cx
	shl    $0x8,%ecx
	mov    (%rbx,%rdx,8),%rdx
	movzbl (%r10),%edi
	add    (%r8,%rdi,8),%rdx
	sar    $0x10,%rdx
	add    %esi,%edx
	movslq %edx,%rdx
	and    $0xfe,%rax
	shr    %rax
	add    %rdx,%rax
	movzbl (%r14,%rax,1),%eax
	and    $0xfc,%ax
	lea    (%rcx,%rax,8),%ecx
	add    0x0(%r13,%rdi,4),%esi
	movslq %esi,%rax
	add    %r9,%rax
	movzbl (%r14,%rax,1),%eax
	shr    $0x3,%eax
	add    %ecx,%eax
	mov    %ax,(%r11)
	mov    -0x8(%rbp),%rbx
	mov    -0x10(%rbp),%r12
	mov    -0x18(%rbp),%r13
	mov    -0x20(%rbp),%r14
	mov    -0x28(%rbp),%r15
	leaveq 
	retq   
	nopl   0x0(%rax)

00296d0 <h2v2_merged_upsample_565_le>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x60,%rsp
	mov    %r15,-0x28(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    %rdi,-0x30(%rbp)
	mov    %rbx,-0x8(%rbp)
	mov    0x1a8(%rdi),%r15
	mov    0x260(%rdi),%rbx
	mov    0x20(%rbx),%rax
	mov    %rax,-0x38(%rbp)
	mov    0x30(%rbx),%r12
	mov    %r12,-0x40(%rbp)
	mov    0x38(%rbx),%r11
	mov    %r11,-0x48(%rbp)
	mov    0x28(%rbx),%r8
	mov    %r8,-0x50(%rbp)
	mov    (%rsi),%r10
	lea    (%rdx,%rdx,1),%r9d
	lea    0x1(%r9),%ebx
	mov    %ebx,%ebx
	mov    (%r10,%rbx,8),%r13
	mov    %r9d,%ebx
	mov    (%r10,%rbx,8),%r14
	mov    0x8(%rsi),%rbx
	mov    %edx,%r9d
	mov    (%rbx,%r9,8),%rbx
	mov    0x10(%rsi),%rdx
	mov    (%rdx,%r9,8),%rsi
	mov    (%rcx),%r9
	mov    0x8(%rcx),%r10
	mov    0x88(%rdi),%edx
	shr    %edx
	jmpq   298d2 <h2v2_merged_upsample_565_le+0x202>
	movzbl (%rsi),%edi
	mov    (%r12,%rdi,8),%rcx
	movzbl (%rbx),%r12d
	add    (%r11,%r12,8),%rcx
	sar    $0x10,%rcx
	movzbl (%r14),%r11d
	mov    %rdx,-0x58(%rbp)
	lea    (%r11,%rcx,1),%edx
	movslq %edx,%rdx
	movzbl (%rdx,%r15,1),%edx
	and    $0xfc,%edx
	movslq (%rax,%rdi,4),%rdi
	lea    (%r11,%rdi,1),%eax
	movslq %eax,%rax
	movzbl (%r15,%rax,1),%eax
	and    $0xf8,%eax
	shl    $0x8,%eax
	lea    (%rax,%rdx,8),%edx
	movslq (%r8,%r12,4),%r12
	lea    (%r11,%r12,1),%eax
	movslq %eax,%rax
	movzbl (%r15,%rax,1),%eax
	shr    $0x3,%eax
	lea    (%rdx,%rax,1),%r11d
	movzbl 0x1(%r14),%r8d
	lea    (%rcx,%r8,1),%eax
	movslq %eax,%rax
	movzbl (%r15,%rax,1),%edx
	and    $0xfc,%edx
	lea    (%rdi,%r8,1),%eax
	movslq %eax,%rax
	movzbl (%r15,%rax,1),%eax
	and    $0xf8,%eax
	shl    $0x8,%eax
	lea    (%rax,%rdx,8),%edx
	lea    (%r12,%r8,1),%eax
	movslq %eax,%rax
	movzbl (%r15,%rax,1),%eax
	shr    $0x3,%eax
	add    %edx,%eax
	shl    $0x10,%eax
	add    %r11d,%eax
	mov    %ax,(%r9)
	mov    %eax,%eax
	shr    $0x10,%rax
	mov    %ax,0x2(%r9)
	movzbl 0x0(%r13),%r8d
	lea    (%r8,%rcx,1),%eax
	movslq %eax,%rax
	movzbl (%rax,%r15,1),%edx
	and    $0xfc,%edx
	lea    (%r8,%rdi,1),%eax
	movslq %eax,%rax
	movzbl (%r15,%rax,1),%eax
	and    $0xf8,%eax
	shl    $0x8,%eax
	lea    (%rax,%rdx,8),%edx
	lea    (%r8,%r12,1),%eax
	movslq %eax,%rax
	movzbl (%r15,%rax,1),%eax
	shr    $0x3,%eax
	lea    (%rdx,%rax,1),%r8d
	movzbl 0x1(%r13),%edx
	lea    (%rcx,%rdx,1),%eax
	movslq %eax,%rax
	movzbl (%r15,%rax,1),%ecx
	and    $0xfc,%ecx
	lea    (%rdi,%rdx,1),%eax
	movslq %eax,%rax
	movzbl (%r15,%rax,1),%eax
	and    $0xf8,%eax
	shl    $0x8,%eax
	lea    (%rax,%rcx,8),%ecx
	lea    (%r12,%rdx,1),%eax
	movslq %eax,%rax
	movzbl (%r15,%rax,1),%eax
	shr    $0x3,%eax
	add    %ecx,%eax
	shl    $0x10,%eax
	add    %r8d,%eax
	mov    %ax,(%r10)
	mov    %eax,%eax
	shr    $0x10,%rax
	mov    %ax,0x2(%r10)
	add    $0x2,%r13
	add    $0x2,%r14
	add    $0x1,%rsi
	add    $0x1,%rbx
	add    $0x4,%r9
	add    $0x4,%r10
	mov    -0x58(%rbp),%rax
	lea    -0x1(%rax),%edx
	mov    -0x50(%rbp),%r8
	mov    -0x38(%rbp),%rax
	mov    -0x48(%rbp),%r11
	mov    -0x40(%rbp),%r12
	test   %edx,%edx
	jne    2975d <h2v2_merged_upsample_565_le+0x8d>
	mov    -0x30(%rbp),%rcx
	mov    0x88(%rcx),%ecx
	and    $0x1,%ecx
	test   %ecx,%ecx
	jne    29901 <h2v2_merged_upsample_565_le+0x231>
	mov    -0x8(%rbp),%rbx
	mov    -0x10(%rbp),%r12
	mov    -0x18(%rbp),%r13
	mov    -0x20(%rbp),%r14
	mov    -0x28(%rbp),%r15
	leaveq 
	retq   
	movzbl (%rsi),%edi
	mov    (%r12,%rdi,8),%rcx
	movzbl (%rbx),%esi
	add    (%r11,%rsi,8),%rcx
	sar    $0x10,%rcx
	movzbl (%r14),%ebx
	lea    (%rbx,%rcx,1),%edx
	movslq %edx,%rdx
	movzbl (%r15,%rdx,1),%edx
	and    $0xfc,%dx
	movslq (%rax,%rdi,4),%rdi
	lea    (%rbx,%rdi,1),%eax
	movslq %eax,%rax
	movzbl (%r15,%rax,1),%eax
	and    $0xf8,%ax
	shl    $0x8,%eax
	lea    (%rax,%rdx,8),%edx
	movslq (%r8,%rsi,4),%rsi
	lea    (%rbx,%rsi,1),%eax
	movslq %eax,%rax
	movzbl (%r15,%rax,1),%eax
	shr    $0x3,%eax
	add    %edx,%eax
	mov    %ax,(%r9)
	movzbl 0x0(%r13),%edx
	lea    (%rdx,%rcx,1),%eax
	movslq %eax,%rax
	movzbl (%r15,%rax,1),%ecx
	and    $0xfc,%cx
	lea    (%rdx,%rdi,1),%eax
	movslq %eax,%rax
	movzbl (%r15,%rax,1),%eax
	and    $0xf8,%ax
	shl    $0x8,%eax
	lea    (%rax,%rcx,8),%ecx
	lea    (%rdx,%rsi,1),%eax
	movslq %eax,%rax
	movzbl (%r15,%rax,1),%eax
	shr    $0x3,%eax
	add    %ecx,%eax
	mov    %ax,(%r10)
	mov    -0x8(%rbp),%rbx
	mov    -0x10(%rbp),%r12
	mov    -0x18(%rbp),%r13
	mov    -0x20(%rbp),%r14
	mov    -0x28(%rbp),%r15
	leaveq 
	retq   
	nopl   0x0(%rax)

00299b0 <h2v2_merged_upsample_565D_le>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x80,%rsp
	mov    %r15,-0x28(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    %rbx,-0x8(%rbp)
	mov    %rdi,-0x30(%rbp)
	mov    0x1a8(%rdi),%r15
	mov    0x260(%rdi),%rax
	mov    0x20(%rax),%r13
	mov    %r13,-0x50(%rbp)
	mov    0x30(%rax),%r12
	mov    %r12,-0x58(%rbp)
	mov    0x38(%rax),%r9
	mov    %r9,-0x68(%rbp)
	mov    0x28(%rax),%rax
	mov    %rax,-0x70(%rbp)
	lea    0x30688(%rip),%r8        # 5a090 <dither_matrix>
	mov    0xa8(%rdi),%ebx
	lea    0x1(%rbx),%eax
	and    $0x3,%eax
	mov    %eax,%eax
	mov    (%r8,%rax,8),%rax
	mov    (%rsi),%r11
	lea    (%rdx,%rdx,1),%r10d
	lea    0x1(%r10),%r8d
	mov    %r8d,%r8d
	mov    (%r11,%r8,8),%r8
	and    $0x3,%ebx
	mov    %ebx,%ebx
	lea    0x30658(%rip),%r14        # 5a090 <dither_matrix>
	mov    (%r14,%rbx,8),%rbx
	mov    %r10d,%r10d
	mov    (%r11,%r10,8),%r10
	mov    0x8(%rsi),%r11
	mov    %edx,%r14d
	mov    (%r11,%r14,8),%r11
	mov    0x10(%rsi),%rdx
	mov    (%rdx,%r14,8),%rdx
	mov    (%rcx),%rsi
	mov    0x8(%rcx),%rcx
	mov    %rcx,-0x38(%rbp)
	mov    0x88(%rdi),%ecx
	shr    %ecx
	mov    -0x70(%rbp),%rdi
	jmpq   29cbf <h2v2_merged_upsample_565D_le+0x30f>
	mov    %rcx,-0x80(%rbp)
	movzbl %bl,%r14d
	lea    (%r15,%r14,1),%rcx
	mov    %rdx,-0x60(%rbp)
	movzbl (%rdx),%edx
	movslq 0x0(%r13,%rdx,4),%r13
	mov    %r8,-0x40(%rbp)
	movzbl (%r10),%r8d
	mov    %rsi,-0x48(%rbp)
	lea    (%r8,%r13,1),%esi
	movslq %esi,%rsi
	movzbl (%rcx,%rsi,1),%ecx
	and    $0xf8,%ecx
	shl    $0x8,%ecx
	mov    (%r12,%rdx,8),%rdx
	movzbl (%r11),%r12d
	add    (%r9,%r12,8),%rdx
	sar    $0x10,%rdx
	lea    (%r8,%rdx,1),%esi
	movslq %esi,%r9
	mov    %rbx,%rsi
	and    $0xfe,%rsi
	shr    %rsi
	add    %r15,%rsi
	movzbl (%rsi,%r9,1),%esi
	and    $0xfc,%esi
	lea    (%rcx,%rsi,8),%esi
	movslq (%rdi,%r12,4),%r12
	lea    (%r8,%r12,1),%ecx
	movslq %ecx,%rcx
	add    %r15,%rcx
	movzbl (%rcx,%r14,1),%ecx
	shr    $0x3,%ecx
	lea    (%rsi,%rcx,1),%edi
	movzbl %al,%r8d
	lea    (%r15,%r8,1),%rsi
	movzbl 0x1(%r10),%r9d
	lea    0x0(%r13,%r9,1),%ecx
	movslq %ecx,%rcx
	movzbl (%rsi,%rcx,1),%ecx
	and    $0xf8,%ecx
	shl    $0x8,%ecx
	lea    (%rdx,%r9,1),%esi
	movslq %esi,%rsi
	mov    %r11,-0x78(%rbp)
	mov    %rax,%r11
	and    $0xfe,%r11
	shr    %r11
	add    %r15,%r11
	movzbl (%r11,%rsi,1),%esi
	and    $0xfc,%esi
	lea    (%rcx,%rsi,8),%esi
	lea    (%r12,%r9,1),%ecx
	movslq %ecx,%rcx
	add    %r15,%rcx
	movzbl (%rcx,%r8,1),%ecx
	shr    $0x3,%ecx
	add    %esi,%ecx
	shl    $0x10,%ecx
	add    %edi,%ecx
	mov    -0x48(%rbp),%rsi
	mov    %cx,(%rsi)
	mov    %ecx,%ecx
	shr    $0x10,%rcx
	mov    %cx,0x2(%rsi)
	mov    $0xffffff00,%ecx
	and    %rcx,%rbx
	shr    $0x8,%rbx
	shl    $0x18,%r14
	lea    (%r14,%rbx,1),%rsi
	movzbl %sil,%edi
	lea    (%r15,%rdi,1),%rcx
	mov    -0x40(%rbp),%r9
	movzbl (%r9),%r11d
	lea    (%r11,%r13,1),%ebx
	movslq %ebx,%rbx
	movzbl (%rcx,%rbx,1),%ecx
	and    $0xf8,%ecx
	shl    $0x8,%ecx
	lea    (%r11,%rdx,1),%ebx
	movslq %ebx,%r14
	mov    %rsi,%rbx
	and    $0xfe,%rbx
	shr    %rbx
	add    %r15,%rbx
	movzbl (%rbx,%r14,1),%ebx
	and    $0xfc,%ebx
	lea    (%rcx,%rbx,8),%ebx
	lea    (%r11,%r12,1),%ecx
	movslq %ecx,%rcx
	add    %r15,%rcx
	movzbl (%rcx,%rdi,1),%ecx
	shr    $0x3,%ecx
	lea    (%rbx,%rcx,1),%r11d
	mov    $0xffffff00,%ecx
	and    %rcx,%rax
	shr    $0x8,%rax
	shl    $0x18,%r8
	lea    (%r8,%rax,1),%rbx
	movzbl %bl,%r8d
	lea    (%r15,%r8,1),%rcx
	movzbl 0x1(%r9),%r14d
	lea    0x0(%r13,%r14,1),%eax
	movslq %eax,%rax
	movzbl (%rcx,%rax,1),%eax
	and    $0xf8,%eax
	shl    $0x8,%eax
	lea    (%rdx,%r14,1),%ecx
	movslq %ecx,%rdx
	mov    %rbx,%rcx
	and    $0xfe,%rcx
	shr    %rcx
	add    %r15,%rcx
	movzbl (%rcx,%rdx,1),%ecx
	and    $0xfc,%ecx
	lea    (%rax,%rcx,8),%ecx
	lea    (%r12,%r14,1),%eax
	movslq %eax,%rax
	add    %r15,%rax
	movzbl (%rax,%r8,1),%eax
	shr    $0x3,%eax
	add    %ecx,%eax
	shl    $0x10,%eax
	add    %r11d,%eax
	mov    -0x38(%rbp),%r12
	mov    %ax,(%r12)
	mov    %eax,%eax
	shr    $0x10,%rax
	mov    %ax,0x2(%r12)
	shr    $0x8,%rbx
	shl    $0x18,%r8
	lea    (%rbx,%r8,1),%rax
	lea    0x2(%r9),%r8
	shr    $0x8,%rsi
	shl    $0x18,%rdi
	lea    (%rsi,%rdi,1),%rbx
	add    $0x2,%r10
	mov    -0x60(%rbp),%rcx
	lea    0x1(%rcx),%rdx
	mov    -0x78(%rbp),%rcx
	lea    0x1(%rcx),%r11
	mov    -0x48(%rbp),%rcx
	lea    0x4(%rcx),%rsi
	lea    0x4(%r12),%rcx
	mov    %rcx,-0x38(%rbp)
	mov    -0x80(%rbp),%rcx
	add    $0xffffffff,%ecx
	mov    -0x58(%rbp),%r12
	mov    -0x68(%rbp),%r9
	mov    -0x50(%rbp),%r13
	mov    -0x70(%rbp),%rdi
	test   %ecx,%ecx
	jne    29a72 <h2v2_merged_upsample_565D_le+0xc2>
	mov    -0x30(%rbp),%rcx
	mov    0x88(%rcx),%ecx
	and    $0x1,%ecx
	test   %ecx,%ecx
	jne    29cee <h2v2_merged_upsample_565D_le+0x33e>
	mov    -0x8(%rbp),%rbx
	mov    -0x10(%rbp),%r12
	mov    -0x18(%rbp),%r13
	mov    -0x20(%rbp),%r14
	mov    -0x28(%rbp),%r15
	leaveq 
	retq   
	movzbl (%rdx),%r14d
	mov    (%r12,%r14,8),%rdx
	movzbl (%r11),%r11d
	add    (%r9,%r11,8),%rdx
	sar    $0x10,%rdx
	movzbl (%r10),%r12d
	lea    (%r12,%rdx,1),%ecx
	movslq %ecx,%r9
	mov    %rbx,%rcx
	and    $0xfe,%rcx
	shr    %rcx
	add    %r9,%rcx
	movzbl (%r15,%rcx,1),%r9d
	and    $0xfc,%r9w
	movslq 0x0(%r13,%r14,4),%r10
	lea    (%r12,%r10,1),%ecx
	movslq %ecx,%rcx
	movzbl %bl,%r13d
	add    %r13,%rcx
	movzbl (%r15,%rcx,1),%ecx
	and    $0xf8,%cx
	shl    $0x8,%ecx
	lea    (%rcx,%r9,8),%ebx
	movslq (%rdi,%r11,4),%rdi
	lea    (%r12,%rdi,1),%ecx
	movslq %ecx,%rcx
	add    %r13,%rcx
	movzbl (%r15,%rcx,1),%ecx
	shr    $0x3,%ecx
	add    %ebx,%ecx
	mov    %cx,(%rsi)
	movzbl (%r8),%esi
	lea    (%rsi,%rdx,1),%ecx
	movslq %ecx,%rdx
	mov    %rax,%rcx
	and    $0xfe,%rcx
	shr    %rcx
	add    %rdx,%rcx
	movzbl (%r15,%rcx,1),%ecx
	and    $0xfc,%cx
	lea    (%rsi,%r10,1),%edx
	movslq %edx,%rdx
	movzbl %al,%ebx
	lea    (%rbx,%rdx,1),%rax
	movzbl (%r15,%rax,1),%eax
	and    $0xf8,%ax
	shl    $0x8,%eax
	lea    (%rax,%rcx,8),%ecx
	lea    (%rsi,%rdi,1),%eax
	movslq %eax,%rax
	add    %rbx,%rax
	movzbl (%r15,%rax,1),%eax
	shr    $0x3,%eax
	add    %ecx,%eax
	mov    -0x38(%rbp),%rcx
	mov    %ax,(%rcx)
	mov    -0x8(%rbp),%rbx
	mov    -0x10(%rbp),%r12
	mov    -0x18(%rbp),%r13
	mov    -0x20(%rbp),%r14
	mov    -0x28(%rbp),%r15
	leaveq 
	retq   
	nopl   0x0(%rax,%rax,1)

0029de0 <h2v1_merged_upsample_565_be>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x50,%rsp
	mov    %r15,-0x28(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %rdi,-0x30(%rbp)
	mov    %rbx,-0x8(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    0x1a8(%rdi),%r13
	mov    0x260(%rdi),%r8
	mov    0x30(%r8),%rax
	mov    %rax,-0x40(%rbp)
	mov    0x38(%r8),%rbx
	mov    %rbx,-0x48(%rbp)
	mov    0x20(%r8),%r11
	mov    %r11,-0x38(%rbp)
	mov    0x28(%r8),%r12
	mov    (%rsi),%r8
	mov    %edx,%r10d
	mov    (%r8,%r10,8),%r8
	mov    0x8(%rsi),%rdx
	mov    (%rdx,%r10,8),%r9
	mov    0x10(%rsi),%rdx
	mov    (%rdx,%r10,8),%r10
	mov    (%rcx),%rsi
	mov    0x88(%rdi),%edx
	shr    %edx
	jmpq   29f3b <h2v1_merged_upsample_565_be+0x15b>
	movzbl (%r10),%edi
	mov    (%rax,%rdi,8),%rax
	movzbl (%r9),%r14d
	add    (%rbx,%r14,8),%rax
	sar    $0x10,%rax
	movzbl 0x1(%r8),%ebx
	lea    (%rbx,%rax,1),%ecx
	movslq %ecx,%rcx
	movzbl (%rcx,%r13,1),%ecx
	mov    %rcx,%r15
	shr    $0x5,%r15d
	movslq (%r11,%rdi,4),%r11
	lea    (%rbx,%r11,1),%edi
	movslq %edi,%rdi
	movzbl 0x0(%r13,%rdi,1),%edi
	and    $0xf8,%edi
	add    %r15d,%edi
	and    $0x1c,%ecx
	shl    $0xb,%ecx
	add    %ecx,%edi
	movslq (%r12,%r14,4),%r15
	lea    (%rbx,%r15,1),%ecx
	movslq %ecx,%rcx
	movzbl 0x0(%r13,%rcx,1),%ecx
	and    $0xf8,%ecx
	shl    $0x5,%ecx
	add    %edi,%ecx
	mov    %ecx,%edi
	movzbl (%r8),%r14d
	add    %r14d,%eax
	movslq %eax,%rax
	movzbl 0x0(%r13,%rax,1),%eax
	mov    %rax,%rbx
	shr    $0x5,%ebx
	lea    (%r14,%r11,1),%ecx
	movslq %ecx,%rcx
	movzbl 0x0(%r13,%rcx,1),%ecx
	and    $0xf8,%ecx
	add    %ebx,%ecx
	and    $0x1c,%eax
	shl    $0xb,%eax
	add    %eax,%ecx
	lea    (%r14,%r15,1),%eax
	movslq %eax,%rax
	movzbl (%rax,%r13,1),%eax
	and    $0xf8,%eax
	shl    $0x5,%eax
	add    %ecx,%eax
	mov    %eax,%eax
	shl    $0x10,%rax
	add    %rdi,%rax
	mov    %ax,0x2(%rsi)
	shr    $0x10,%rax
	mov    %ax,(%rsi)
	add    $0x2,%r8
	add    $0x1,%r10
	add    $0x1,%r9
	add    $0x4,%rsi
	add    $0xffffffff,%edx
	mov    -0x38(%rbp),%r11
	mov    -0x40(%rbp),%rax
	mov    -0x48(%rbp),%rbx
	test   %edx,%edx
	jne    29e54 <h2v1_merged_upsample_565_be+0x74>
	mov    -0x30(%rbp),%rcx
	mov    0x88(%rcx),%ecx
	and    $0x1,%ecx
	test   %ecx,%ecx
	jne    29f6a <h2v1_merged_upsample_565_be+0x18a>
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	mov    -0x20(%rbp),%r14
	mov    -0x28(%rbp),%r15
	leaveq 
	retq   
	movzbl (%r10),%ecx
	mov    (%rax,%rcx,8),%rax
	movzbl (%r9),%r9d
	add    (%rbx,%r9,8),%rax
	sar    $0x10,%rax
	movzbl (%r8),%edx
	add    %edx,%eax
	movslq %eax,%rax
	movzbl 0x0(%r13,%rax,1),%eax
	mov    %rax,%rdi
	shr    $0x5,%edi
	mov    (%r11,%rcx,4),%ecx
	add    %edx,%ecx
	movslq %ecx,%rcx
	movzbl 0x0(%r13,%rcx,1),%ecx
	and    $0xf8,%ecx
	add    %edi,%ecx
	and    $0x1c,%eax
	shl    $0xb,%eax
	add    %eax,%ecx
	add    (%r12,%r9,4),%edx
	movslq %edx,%rax
	movzbl 0x0(%r13,%rax,1),%eax
	and    $0xf8,%ax
	shl    $0x5,%eax
	add    %ecx,%eax
	mov    %ax,(%rsi)
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	mov    -0x20(%rbp),%r14
	mov    -0x28(%rbp),%r15
	leaveq 
	retq   
	data16 nopw %cs:0x0(%rax,%rax,1)
	nopl   0x0(%rax)

0029ff0 <h2v1_merged_upsample_565D_be>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x70,%rsp
	mov    %r15,-0x28(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    %rdi,-0x30(%rbp)
	mov    %rbx,-0x8(%rbp)
	mov    0x1a8(%rdi),%r15
	mov    0x260(%rdi),%rax
	mov    0x30(%rax),%r13
	mov    %r13,-0x48(%rbp)
	mov    0x38(%rax),%r12
	mov    %r12,-0x58(%rbp)
	mov    0x20(%rax),%r8
	mov    %r8,-0x40(%rbp)
	mov    0x28(%rax),%r14
	mov    (%rsi),%rax
	mov    %edx,%r9d
	mov    (%rax,%r9,8),%rbx
	lea    0x30045(%rip),%rdx        # 5a090 <dither_matrix>
	mov    0xa8(%rdi),%eax
	and    $0x3,%eax
	mov    %eax,%eax
	mov    (%rdx,%rax,8),%rax
	mov    0x8(%rsi),%rdx
	mov    (%rdx,%r9,8),%r10
	mov    0x10(%rsi),%rdx
	mov    (%rdx,%r9,8),%r9
	mov    (%rcx),%r11
	mov    0x88(%rdi),%edx
	shr    %edx
	mov    $0xffffff00,%esi
	jmpq   2a1dd <h2v1_merged_upsample_565D_be+0x1ed>
	movzbl (%r9),%edi
	mov    0x0(%r13,%rdi,8),%rcx
	movzbl (%r10),%r13d
	add    (%r12,%r13,8),%rcx
	sar    $0x10,%rcx
	movzbl 0x1(%rbx),%r12d
	mov    %rdx,-0x70(%rbp)
	lea    (%r12,%rcx,1),%edx
	movslq %edx,%rdx
	and    %rax,%rsi
	shr    $0x8,%rsi
	mov    %r10,-0x60(%rbp)
	movzbl %al,%r10d
	mov    %r9,-0x50(%rbp)
	mov    %r10,%r9
	shl    $0x18,%r9
	add    %r9,%rsi
	mov    %rsi,-0x68(%rbp)
	mov    %rsi,%r9
	and    $0xfe,%r9
	shr    %r9
	add    %r15,%r9
	movzbl (%r9,%rdx,1),%edx
	mov    %rdx,%r9
	shr    $0x5,%r9d
	movzbl %sil,%esi
	mov    %r11,-0x38(%rbp)
	lea    (%r15,%rsi,1),%r11
	movslq (%r8,%rdi,4),%r8
	lea    (%r12,%r8,1),%edi
	movslq %edi,%rdi
	movzbl (%r11,%rdi,1),%edi
	and    $0xf8,%edi
	add    %r9d,%edi
	and    $0x1c,%edx
	shl    $0xb,%edx
	add    %edx,%edi
	movslq (%r14,%r13,4),%r13
	lea    (%r12,%r13,1),%edx
	movslq %edx,%rdx
	add    %r15,%rdx
	movzbl (%rdx,%rsi,1),%edx
	and    $0xf8,%edx
	shl    $0x5,%edx
	add    %edi,%edx
	mov    %edx,%r9d
	movzbl (%rbx),%r11d
	add    %r11d,%ecx
	movslq %ecx,%rcx
	and    $0xfe,%rax
	shr    %rax
	add    %r15,%rax
	movzbl (%rax,%rcx,1),%eax
	mov    %rax,%rdi
	shr    $0x5,%edi
	lea    (%r15,%r10,1),%rcx
	lea    (%r11,%r8,1),%edx
	movslq %edx,%rdx
	movzbl (%rcx,%rdx,1),%ecx
	and    $0xf8,%ecx
	add    %edi,%ecx
	and    $0x1c,%eax
	shl    $0xb,%eax
	add    %eax,%ecx
	lea    (%r11,%r13,1),%eax
	movslq %eax,%rax
	add    %r15,%rax
	movzbl (%rax,%r10,1),%eax
	and    $0xf8,%eax
	shl    $0x5,%eax
	add    %ecx,%eax
	mov    %eax,%eax
	shl    $0x10,%rax
	add    %r9,%rax
	mov    -0x38(%rbp),%rcx
	mov    %ax,0x2(%rcx)
	shr    $0x10,%rax
	mov    %ax,(%rcx)
	add    $0x2,%rbx
	mov    -0x50(%rbp),%rax
	lea    0x1(%rax),%r9
	mov    -0x60(%rbp),%rax
	lea    0x1(%rax),%r10
	mov    -0x68(%rbp),%rax
	shr    $0x8,%rax
	shl    $0x18,%rsi
	add    %rsi,%rax
	lea    0x4(%rcx),%r11
	mov    -0x70(%rbp),%rcx
	lea    -0x1(%rcx),%edx
	mov    -0x40(%rbp),%r8
	mov    $0xffffff00,%esi
	mov    -0x58(%rbp),%r12
	mov    -0x48(%rbp),%r13
	test   %edx,%edx
	jne    2a07f <h2v1_merged_upsample_565D_be+0x8f>
	mov    -0x30(%rbp),%rcx
	mov    0x88(%rcx),%ecx
	and    $0x1,%ecx
	test   %ecx,%ecx
	jne    2a20c <h2v1_merged_upsample_565D_be+0x21c>
	mov    -0x8(%rbp),%rbx
	mov    -0x10(%rbp),%r12
	mov    -0x18(%rbp),%r13
	mov    -0x20(%rbp),%r14
	mov    -0x28(%rbp),%r15
	leaveq 
	retq   
	movzbl (%r9),%edi
	mov    0x0(%r13,%rdi,8),%rcx
	movzbl (%r10),%r9d
	add    (%r12,%r9,8),%rcx
	sar    $0x10,%rcx
	movzbl (%rbx),%edx
	add    %edx,%ecx
	movslq %ecx,%rsi
	mov    %rax,%rcx
	and    $0xfe,%rcx
	shr    %rcx
	add    %rsi,%rcx
	movzbl (%r15,%rcx,1),%ecx
	mov    %rcx,%rbx
	shr    $0x5,%ebx
	mov    %rdx,%rsi
	add    (%r8,%rdi,4),%esi
	movslq %esi,%rsi
	movzbl %al,%edi
	lea    (%rdi,%rsi,1),%rax
	movzbl (%r15,%rax,1),%eax
	and    $0xf8,%eax
	add    %ebx,%eax
	and    $0x1c,%ecx
	shl    $0xb,%ecx
	add    %eax,%ecx
	add    (%r14,%r9,4),%edx
	movslq %edx,%rax
	add    %rdi,%rax
	movzbl (%r15,%rax,1),%eax
	and    $0xf8,%ax
	shl    $0x5,%eax
	add    %ecx,%eax
	mov    %ax,(%r11)
	mov    -0x8(%rbp),%rbx
	mov    -0x10(%rbp),%r12
	mov    -0x18(%rbp),%r13
	mov    -0x20(%rbp),%r14
	mov    -0x28(%rbp),%r15
	leaveq 
	retq   
	nopl   0x0(%rax,%rax,1)

002a2a0 <h2v2_merged_upsample_565_be>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x60,%rsp
	mov    %r15,-0x28(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    %rdi,-0x30(%rbp)
	mov    %rbx,-0x8(%rbp)
	mov    0x1a8(%rdi),%r15
	mov    0x260(%rdi),%rbx
	mov    0x30(%rbx),%rax
	mov    %rax,-0x40(%rbp)
	mov    0x38(%rbx),%r10
	mov    %r10,-0x48(%rbp)
	mov    0x20(%rbx),%r9
	mov    %r9,-0x38(%rbp)
	mov    0x28(%rbx),%r8
	mov    %r8,-0x50(%rbp)
	mov    (%rsi),%r13
	lea    (%rdx,%rdx,1),%r11d
	lea    0x1(%r11),%ebx
	mov    %ebx,%ebx
	mov    0x0(%r13,%rbx,8),%r12
	mov    %r11d,%ebx
	mov    0x0(%r13,%rbx,8),%r13
	mov    0x8(%rsi),%rbx
	mov    %edx,%r11d
	mov    (%rbx,%r11,8),%rbx
	mov    0x10(%rsi),%rdx
	mov    (%rdx,%r11,8),%rdx
	mov    (%rcx),%rsi
	mov    0x8(%rcx),%r11
	mov    0x88(%rdi),%ecx
	shr    %ecx
	jmpq   2a4dd <h2v2_merged_upsample_565_be+0x23d>
	movzbl (%rdx),%edi
	mov    (%rax,%rdi,8),%rax
	movzbl (%rbx),%r14d
	add    (%r10,%r14,8),%rax
	sar    $0x10,%rax
	movzbl 0x1(%r13),%r10d
	mov    %rcx,-0x60(%rbp)
	lea    (%r10,%rax,1),%ecx
	movslq %ecx,%rcx
	movzbl (%rcx,%r15,1),%ecx
	mov    %rbx,-0x58(%rbp)
	mov    %rcx,%rbx
	shr    $0x5,%ebx
	movslq (%r9,%rdi,4),%r9
	lea    (%r10,%r9,1),%edi
	movslq %edi,%rdi
	movzbl (%r15,%rdi,1),%edi
	and    $0xf8,%edi
	add    %ebx,%edi
	and    $0x1c,%ecx
	shl    $0xb,%ecx
	add    %ecx,%edi
	movslq (%r8,%r14,4),%r14
	lea    (%r10,%r14,1),%ecx
	movslq %ecx,%rcx
	movzbl (%r15,%rcx,1),%ecx
	and    $0xf8,%ecx
	shl    $0x5,%ecx
	add    %edi,%ecx
	mov    %ecx,%r10d
	movzbl 0x0(%r13),%ebx
	lea    (%rbx,%rax,1),%ecx
	movslq %ecx,%rcx
	movzbl (%r15,%rcx,1),%ecx
	mov    %rcx,%r8
	shr    $0x5,%r8d
	lea    (%rbx,%r9,1),%edi
	movslq %edi,%rdi
	movzbl (%r15,%rdi,1),%edi
	and    $0xf8,%edi
	add    %r8d,%edi
	and    $0x1c,%ecx
	shl    $0xb,%ecx
	add    %ecx,%edi
	lea    (%rbx,%r14,1),%ecx
	movslq %ecx,%rcx
	movzbl (%rcx,%r15,1),%ecx
	and    $0xf8,%ecx
	shl    $0x5,%ecx
	add    %edi,%ecx
	mov    %ecx,%ecx
	shl    $0x10,%rcx
	add    %r10,%rcx
	mov    %cx,0x2(%rsi)
	shr    $0x10,%rcx
	mov    %cx,(%rsi)
	movzbl 0x1(%r12),%ebx
	lea    (%rbx,%rax,1),%ecx
	movslq %ecx,%rcx
	movzbl (%rcx,%r15,1),%ecx
	mov    %rcx,%r8
	shr    $0x5,%r8d
	lea    (%rbx,%r9,1),%edi
	movslq %edi,%rdi
	movzbl (%r15,%rdi,1),%edi
	and    $0xf8,%edi
	add    %r8d,%edi
	and    $0x1c,%ecx
	shl    $0xb,%ecx
	add    %ecx,%edi
	lea    (%rbx,%r14,1),%ecx
	movslq %ecx,%rcx
	movzbl (%r15,%rcx,1),%ecx
	and    $0xf8,%ecx
	shl    $0x5,%ecx
	add    %edi,%ecx
	mov    %ecx,%ebx
	movzbl (%r12),%r8d
	add    %r8d,%eax
	movslq %eax,%rax
	movzbl (%r15,%rax,1),%eax
	mov    %rax,%rdi
	shr    $0x5,%edi
	lea    (%r8,%r9,1),%ecx
	movslq %ecx,%rcx
	movzbl (%r15,%rcx,1),%ecx
	and    $0xf8,%ecx
	add    %edi,%ecx
	and    $0x1c,%eax
	shl    $0xb,%eax
	add    %eax,%ecx
	lea    (%r8,%r14,1),%eax
	movslq %eax,%rax
	movzbl (%rax,%r15,1),%eax
	and    $0xf8,%eax
	shl    $0x5,%eax
	add    %ecx,%eax
	mov    %eax,%eax
	shl    $0x10,%rax
	add    %rbx,%rax
	mov    %ax,0x2(%r11)
	shr    $0x10,%rax
	mov    %ax,(%r11)
	add    $0x2,%r12
	add    $0x2,%r13
	add    $0x1,%rdx
	mov    -0x58(%rbp),%rax
	lea    0x1(%rax),%rbx
	add    $0x4,%rsi
	add    $0x4,%r11
	mov    -0x60(%rbp),%rax
	lea    -0x1(%rax),%ecx
	mov    -0x50(%rbp),%r8
	mov    -0x38(%rbp),%r9
	mov    -0x48(%rbp),%r10
	mov    -0x40(%rbp),%rax
	test   %ecx,%ecx
	jne    2a32f <h2v2_merged_upsample_565_be+0x8f>
	mov    -0x30(%rbp),%rcx
	mov    0x88(%rcx),%ecx
	and    $0x1,%ecx
	test   %ecx,%ecx
	jne    2a50c <h2v2_merged_upsample_565_be+0x26c>
	mov    -0x8(%rbp),%rbx
	mov    -0x10(%rbp),%r12
	mov    -0x18(%rbp),%r13
	mov    -0x20(%rbp),%r14
	mov    -0x28(%rbp),%r15
	leaveq 
	retq   
	movzbl (%rdx),%edx
	mov    (%rax,%rdx,8),%rcx
	movzbl (%rbx),%r14d
	add    (%r10,%r14,8),%rcx
	sar    $0x10,%rcx
	movzbl 0x0(%r13),%r10d
	lea    (%r10,%rcx,1),%eax
	movslq %eax,%rax
	movzbl (%r15,%rax,1),%eax
	mov    %rax,%rdi
	shr    $0x5,%edi
	movslq (%r9,%rdx,4),%rbx
	lea    (%r10,%rbx,1),%edx
	movslq %edx,%rdx
	movzbl (%r15,%rdx,1),%edx
	and    $0xf8,%edx
	add    %edi,%edx
	and    $0x1c,%eax
	shl    $0xb,%eax
	add    %eax,%edx
	movslq (%r8,%r14,4),%rdi
	lea    (%r10,%rdi,1),%eax
	movslq %eax,%rax
	movzbl (%r15,%rax,1),%eax
	and    $0xf8,%ax
	shl    $0x5,%eax
	add    %edx,%eax
	mov    %ax,(%rsi)
	movzbl (%r12),%esi
	lea    (%rsi,%rcx,1),%eax
	movslq %eax,%rax
	movzbl (%r15,%rax,1),%eax
	mov    %rax,%rdx
	shr    $0x5,%edx
	lea    (%rsi,%rbx,1),%ecx
	movslq %ecx,%rcx
	movzbl (%r15,%rcx,1),%ecx
	and    $0xf8,%ecx
	add    %edx,%ecx
	and    $0x1c,%eax
	shl    $0xb,%eax
	add    %eax,%ecx
	lea    (%rsi,%rdi,1),%eax
	movslq %eax,%rax
	movzbl (%r15,%rax,1),%eax
	and    $0xf8,%ax
	shl    $0x5,%eax
	add    %ecx,%eax
	mov    %ax,(%r11)
	mov    -0x8(%rbp),%rbx
	mov    -0x10(%rbp),%r12
	mov    -0x18(%rbp),%r13
	mov    -0x20(%rbp),%r14
	mov    -0x28(%rbp),%r15
	leaveq 
	retq   
	data16 nopw %cs:0x0(%rax,%rax,1)
	nopl   0x0(%rax)

002a5e0 <h2v2_merged_upsample_565D_be>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x90,%rsp
	mov    %r15,-0x28(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    %rbx,-0x8(%rbp)
	mov    %rdi,-0x30(%rbp)
	mov    0x1a8(%rdi),%r15
	mov    0x260(%rdi),%rax
	mov    0x30(%rax),%r14
	mov    %r14,-0x50(%rbp)
	mov    0x38(%rax),%r12
	mov    %r12,-0x60(%rbp)
	mov    0x20(%rax),%r11
	mov    %r11,-0x48(%rbp)
	mov    0x28(%rax),%rax
	mov    %rax,-0x70(%rbp)
	mov    (%rsi),%r8
	lea    (%rdx,%rdx,1),%ebx
	lea    0x1(%rbx),%eax
	mov    %eax,%eax
	mov    (%r8,%rax,8),%r9
	mov    %ebx,%eax
	mov    (%r8,%rax,8),%r13
	lea    0x2fa43(%rip),%r8        # 5a090 <dither_matrix>
	mov    0xa8(%rdi),%ebx
	mov    %rbx,%rax
	and    $0x3,%eax
	mov    %eax,%eax
	mov    (%r8,%rax,8),%rax
	add    $0x1,%ebx
	and    $0x3,%ebx
	mov    %ebx,%ebx
	mov    (%r8,%rbx,8),%r10
	mov    0x8(%rsi),%r8
	mov    %edx,%ebx
	mov    (%r8,%rbx,8),%r8
	mov    0x10(%rsi),%rdx
	mov    (%rdx,%rbx,8),%rbx
	mov    (%rcx),%rsi
	mov    0x8(%rcx),%rcx
	mov    %rcx,-0x38(%rbp)
	mov    0x88(%rdi),%ecx
	shr    %ecx
	mov    %r14,%rdx
	mov    -0x70(%rbp),%rdi
	jmpq   2a92a <h2v2_merged_upsample_565D_be+0x34a>
	mov    %rcx,-0x88(%rbp)
	movzbl (%rbx),%r14d
	mov    (%rdx,%r14,8),%rdx
	mov    %r8,-0x78(%rbp)
	movzbl (%r8),%r8d
	add    (%r12,%r8,8),%rdx
	sar    $0x10,%rdx
	movzbl 0x1(%r13),%r12d
	mov    %rbx,-0x58(%rbp)
	lea    (%r12,%rdx,1),%ecx
	movslq %ecx,%rbx
	mov    %r10,%rcx
	and    $0xfe,%rcx
	shr    %rcx
	add    %r15,%rcx
	movzbl (%rcx,%rbx,1),%ecx
	mov    %rcx,%rbx
	shr    $0x5,%ebx
	mov    %r10,-0x80(%rbp)
	movzbl %r10b,%r10d
	mov    %r9,-0x40(%rbp)
	lea    (%r15,%r10,1),%r9
	movslq (%r11,%r14,4),%r14
	lea    (%r12,%r14,1),%r11d
	movslq %r11d,%r11
	movzbl (%r9,%r11,1),%r9d
	and    $0xf8,%r9d
	add    %r9d,%ebx
	and    $0x1c,%ecx
	shl    $0xb,%ecx
	add    %ecx,%ebx
	movslq (%rdi,%r8,4),%r8
	lea    (%r12,%r8,1),%ecx
	movslq %ecx,%rcx
	add    %r15,%rcx
	movzbl (%rcx,%r10,1),%ecx
	and    $0xf8,%ecx
	shl    $0x5,%ecx
	add    %ebx,%ecx
	mov    %ecx,%r9d
	movzbl 0x0(%r13),%r11d
	lea    (%r11,%rdx,1),%ecx
	movslq %ecx,%rdi
	mov    %rax,%rcx
	and    $0xfe,%rcx
	shr    %rcx
	add    %r15,%rcx
	movzbl (%rcx,%rdi,1),%ecx
	mov    %rcx,%r12
	shr    $0x5,%r12d
	movzbl %al,%edi
	lea    (%r15,%rdi,1),%rbx
	mov    %r13,-0x68(%rbp)
	lea    (%r11,%r14,1),%r13d
	movslq %r13d,%r13
	movzbl (%rbx,%r13,1),%ebx
	and    $0xf8,%ebx
	add    %r12d,%ebx
	and    $0x1c,%ecx
	shl    $0xb,%ecx
	add    %ecx,%ebx
	lea    (%r11,%r8,1),%ecx
	movslq %ecx,%rcx
	add    %r15,%rcx
	movzbl (%rcx,%rdi,1),%ecx
	and    $0xf8,%ecx
	shl    $0x5,%ecx
	add    %ebx,%ecx
	mov    %ecx,%ecx
	shl    $0x10,%rcx
	add    %r9,%rcx
	mov    %cx,0x2(%rsi)
	shr    $0x10,%rcx
	mov    %cx,(%rsi)
	mov    -0x40(%rbp),%r9
	movzbl 0x1(%r9),%r13d
	lea    0x0(%r13,%rdx,1),%ecx
	movslq %ecx,%r11
	mov    -0x80(%rbp),%rcx
	mov    $0xffffff00,%ebx
	and    %rbx,%rcx
	shr    $0x8,%rcx
	shl    $0x18,%r10
	lea    (%r10,%rcx,1),%rbx
	mov    %rbx,-0x80(%rbp)
	mov    %rbx,%rcx
	and    $0xfe,%rcx
	shr    %rcx
	add    %r15,%rcx
	movzbl (%rcx,%r11,1),%ecx
	mov    %rcx,%r12
	shr    $0x5,%r12d
	movzbl %bl,%r10d
	lea    (%r15,%r10,1),%r11
	lea    0x0(%r13,%r14,1),%ebx
	movslq %ebx,%rbx
	movzbl (%r11,%rbx,1),%ebx
	and    $0xf8,%ebx
	add    %r12d,%ebx
	and    $0x1c,%ecx
	shl    $0xb,%ecx
	add    %ecx,%ebx
	lea    0x0(%r13,%r8,1),%ecx
	movslq %ecx,%rcx
	add    %r15,%rcx
	movzbl (%rcx,%r10,1),%ecx
	and    $0xf8,%ecx
	shl    $0x5,%ecx
	add    %ebx,%ecx
	mov    %ecx,%r11d
	movzbl (%r9),%ebx
	lea    (%rbx,%rdx,1),%ecx
	movslq %ecx,%rdx
	mov    $0xffffff00,%ecx
	and    %rcx,%rax
	shr    $0x8,%rax
	shl    $0x18,%rdi
	lea    (%rdi,%rax,1),%rcx
	mov    %rcx,%rax
	and    $0xfe,%rax
	shr    %rax
	add    %r15,%rax
	movzbl (%rax,%rdx,1),%eax
	mov    %rax,%r13
	shr    $0x5,%r13d
	movzbl %cl,%edx
	lea    (%r15,%rdx,1),%r12
	lea    (%rbx,%r14,1),%edi
	movslq %edi,%rdi
	movzbl (%r12,%rdi,1),%edi
	and    $0xf8,%edi
	add    %r13d,%edi
	and    $0x1c,%eax
	shl    $0xb,%eax
	add    %eax,%edi
	lea    (%rbx,%r8,1),%eax
	movslq %eax,%rax
	add    %r15,%rax
	movzbl (%rax,%rdx,1),%eax
	and    $0xf8,%eax
	shl    $0x5,%eax
	add    %edi,%eax
	mov    %eax,%eax
	shl    $0x10,%rax
	add    %r11,%rax
	mov    -0x38(%rbp),%rdi
	mov    %ax,0x2(%rdi)
	shr    $0x10,%rax
	mov    %ax,(%rdi)
	add    $0x2,%r9
	mov    -0x68(%rbp),%rax
	lea    0x2(%rax),%r13
	mov    -0x58(%rbp),%rax
	lea    0x1(%rax),%rbx
	mov    -0x78(%rbp),%rax
	lea    0x1(%rax),%r8
	shr    $0x8,%rcx
	shl    $0x18,%rdx
	lea    (%rcx,%rdx,1),%rax
	add    $0x4,%rsi
	mov    -0x80(%rbp),%rcx
	shr    $0x8,%rcx
	shl    $0x18,%r10
	add    %rcx,%r10
	lea    0x4(%rdi),%rcx
	mov    %rcx,-0x38(%rbp)
	mov    -0x88(%rbp),%rcx
	add    $0xffffffff,%ecx
	mov    -0x48(%rbp),%r11
	mov    -0x60(%rbp),%r12
	mov    -0x50(%rbp),%rdx
	mov    -0x70(%rbp),%rdi
	test   %ecx,%ecx
	jne    2a69c <h2v2_merged_upsample_565D_be+0xbc>
	mov    -0x30(%rbp),%rcx
	mov    0x88(%rcx),%ecx
	and    $0x1,%ecx
	test   %ecx,%ecx
	jne    2a959 <h2v2_merged_upsample_565D_be+0x379>
	mov    -0x8(%rbp),%rbx
	mov    -0x10(%rbp),%r12
	mov    -0x18(%rbp),%r13
	mov    -0x20(%rbp),%r14
	mov    -0x28(%rbp),%r15
	leaveq 
	retq   
	movzbl (%rbx),%ebx
	mov    (%rdx,%rbx,8),%rcx
	movzbl (%r8),%r14d
	add    (%r12,%r14,8),%rcx
	sar    $0x10,%rcx
	movzbl 0x0(%r13),%r13d
	lea    0x0(%r13,%rcx,1),%edx
	movslq %edx,%r8
	mov    %rax,%rdx
	and    $0xfe,%rdx
	shr    %rdx
	add    %r8,%rdx
	movzbl (%r15,%rdx,1),%edx
	mov    %rdx,%r12
	shr    $0x5,%r12d
	movslq (%r11,%rbx,4),%r8
	lea    0x0(%r13,%r8,1),%ebx
	movslq %ebx,%rbx
	movzbl %al,%r11d
	lea    (%r11,%rbx,1),%rax
	movzbl (%r15,%rax,1),%eax
	and    $0xf8,%eax
	add    %r12d,%eax
	and    $0x1c,%edx
	shl    $0xb,%edx
	add    %eax,%edx
	movslq (%rdi,%r14,4),%rbx
	lea    0x0(%r13,%rbx,1),%eax
	movslq %eax,%rax
	add    %r11,%rax
	movzbl (%r15,%rax,1),%eax
	and    $0xf8,%ax
	shl    $0x5,%eax
	add    %edx,%eax
	mov    %ax,(%rsi)
	movzbl (%r9),%edi
	lea    (%rdi,%rcx,1),%eax
	movslq %eax,%rcx
	mov    %r10,%rax
	and    $0xfe,%rax
	shr    %rax
	add    %rcx,%rax
	movzbl (%r15,%rax,1),%eax
	mov    %rax,%rsi
	shr    $0x5,%esi
	lea    (%rdi,%r8,1),%ecx
	movslq %ecx,%rcx
	movzbl %r10b,%edx
	add    %rdx,%rcx
	movzbl (%r15,%rcx,1),%ecx
	and    $0xf8,%ecx
	add    %esi,%ecx
	and    $0x1c,%eax
	shl    $0xb,%eax
	add    %eax,%ecx
	lea    (%rdi,%rbx,1),%eax
	movslq %eax,%rax
	add    %rdx,%rax
	movzbl (%r15,%rax,1),%eax
	and    $0xf8,%ax
	shl    $0x5,%eax
	add    %ecx,%eax
	mov    -0x38(%rbp),%rcx
	mov    %ax,(%rcx)
	mov    -0x8(%rbp),%rbx
	mov    -0x10(%rbp),%r12
	mov    -0x18(%rbp),%r13
	mov    -0x20(%rbp),%r14
	mov    -0x28(%rbp),%r15
	leaveq 
	retq   
	nopl   0x0(%rax)

002aa60 <is_big_endian>:
	push   %rbp
	mov    %rsp,%rbp
	xor    %eax,%eax
	leaveq 
	retq   
	nopl   0x0(%rax,%rax,1)

002aa70 <h2v1_merged_upsample_565>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %r12,-0x8(%rbp)
	mov    %r13,-0x10(%rbp)
	mov    %r14,-0x18(%rbp)
	mov    %r15,-0x20(%rbp)
	mov    %rsi,%r12
	mov    %rcx,%r13
	mov    %rdx,%r14
	mov    %rdi,%r15
	callq  2aa60 <is_big_endian>
	test   %eax,%eax
	jne    2aac0 <h2v1_merged_upsample_565+0x50>
	mov    %r13,%rcx
	mov    %r14,%rdx
	mov    %r12,%rsi
	mov    %r15,%rdi
	callq  29280 <h2v1_merged_upsample_565_le>
	mov    -0x20(%rbp),%r15
	mov    -0x18(%rbp),%r14
	mov    -0x10(%rbp),%r13
	mov    -0x8(%rbp),%r12
	leaveq 
	retq   
	mov    %r13,%rcx
	mov    %r14,%rdx
	mov    %r12,%rsi
	mov    %r15,%rdi
	callq  29de0 <h2v1_merged_upsample_565_be>
	mov    -0x20(%rbp),%r15
	mov    -0x18(%rbp),%r14
	mov    -0x10(%rbp),%r13
	mov    -0x8(%rbp),%r12
	leaveq 
	retq   
	data16 nopw %cs:0x0(%rax,%rax,1)
	xchg   %ax,%ax

002aaf0 <h2v1_merged_upsample_565D>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %r12,-0x8(%rbp)
	mov    %r13,-0x10(%rbp)
	mov    %r14,-0x18(%rbp)
	mov    %r15,-0x20(%rbp)
	mov    %rsi,%r12
	mov    %rdx,%r13
	mov    %rdi,%r14
	mov    %rcx,%r15
	callq  2aa60 <is_big_endian>
	test   %eax,%eax
	jne    2ab40 <h2v1_merged_upsample_565D+0x50>
	mov    %r15,%rcx
	mov    %r13,%rdx
	mov    %r12,%rsi
	mov    %r14,%rdi
	callq  29460 <h2v1_merged_upsample_565D_le>
	mov    -0x20(%rbp),%r15
	mov    -0x18(%rbp),%r14
	mov    -0x10(%rbp),%r13
	mov    -0x8(%rbp),%r12
	leaveq 
	retq   
	mov    %r15,%rcx
	mov    %r13,%rdx
	mov    %r12,%rsi
	mov    %r14,%rdi
	callq  29ff0 <h2v1_merged_upsample_565D_be>
	mov    -0x20(%rbp),%r15
	mov    -0x18(%rbp),%r14
	mov    -0x10(%rbp),%r13
	mov    -0x8(%rbp),%r12
	leaveq 
	retq   
	data16 nopw %cs:0x0(%rax,%rax,1)
	xchg   %ax,%ax

002ab70 <h2v2_merged_upsample_565>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %r12,-0x8(%rbp)
	mov    %r13,-0x10(%rbp)
	mov    %r14,-0x18(%rbp)
	mov    %r15,-0x20(%rbp)
	mov    %rsi,%r12
	mov    %rcx,%r13
	mov    %rdx,%r14
	mov    %rdi,%r15
	callq  2aa60 <is_big_endian>
	test   %eax,%eax
	jne    2abc0 <h2v2_merged_upsample_565+0x50>
	mov    %r13,%rcx
	mov    %r14,%rdx
	mov    %r12,%rsi
	mov    %r15,%rdi
	callq  296d0 <h2v2_merged_upsample_565_le>
	mov    -0x20(%rbp),%r15
	mov    -0x18(%rbp),%r14
	mov    -0x10(%rbp),%r13
	mov    -0x8(%rbp),%r12
	leaveq 
	retq   
	mov    %r13,%rcx
	mov    %r14,%rdx
	mov    %r12,%rsi
	mov    %r15,%rdi
	callq  2a2a0 <h2v2_merged_upsample_565_be>
	mov    -0x20(%rbp),%r15
	mov    -0x18(%rbp),%r14
	mov    -0x10(%rbp),%r13
	mov    -0x8(%rbp),%r12
	leaveq 
	retq   
	data16 nopw %cs:0x0(%rax,%rax,1)
	xchg   %ax,%ax

002abf0 <h2v2_merged_upsample_565D>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %r12,-0x8(%rbp)
	mov    %r13,-0x10(%rbp)
	mov    %r14,-0x18(%rbp)
	mov    %r15,-0x20(%rbp)
	mov    %rsi,%r12
	mov    %rdx,%r13
	mov    %rdi,%r14
	mov    %rcx,%r15
	callq  2aa60 <is_big_endian>
	test   %eax,%eax
	jne    2ac40 <h2v2_merged_upsample_565D+0x50>
	mov    %r15,%rcx
	mov    %r13,%rdx
	mov    %r12,%rsi
	mov    %r14,%rdi
	callq  299b0 <h2v2_merged_upsample_565D_le>
	mov    -0x20(%rbp),%r15
	mov    -0x18(%rbp),%r14
	mov    -0x10(%rbp),%r13
	mov    -0x8(%rbp),%r12
	leaveq 
	retq   
	mov    %r15,%rcx
	mov    %r13,%rdx
	mov    %r12,%rsi
	mov    %r14,%rdi
	callq  2a5e0 <h2v2_merged_upsample_565D_be>
	mov    -0x20(%rbp),%r15
	mov    -0x18(%rbp),%r14
	mov    -0x10(%rbp),%r13
	mov    -0x8(%rbp),%r12
	leaveq 
	retq   
	nopw   %cs:0x0(%rax,%rax,1)
	nopl   (%rax)

002ac70 <jinit_phuff_decoder>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %r14,-0x8(%rbp)
	mov    %r15,-0x10(%rbp)
	mov    $0x1,%r14d
	mov    0x8(%rdi),%rax
	mov    (%rax),%rax
	mov    $0x68,%edx
	mov    %rdi,%r15
	mov    %r14,%rsi
	callq  *%rax
	mov    %rax,0x250(%r15)
	lea    0x1058(%rip),%rcx        # 2bd00 <start_pass_phuff_decoder>
	mov    %rcx,(%rax)
	xor    %esi,%esi
	mov    %rsi,%rcx
	jmp    2acc1 <jinit_phuff_decoder+0x51>
	movslq %ecx,%rdx
	movq   $0x0,0x40(%rax,%rdx,8)
	add    $0x1,%ecx
	cmp    $0x3,%ecx
	jle    2acb2 <jinit_phuff_decoder+0x42>
	mov    0x8(%r15),%rax
	mov    (%rax),%rax
	movslq 0x38(%r15),%rcx
	shl    $0x6,%ecx
	movslq %ecx,%rdx
	shl    $0x2,%rdx
	mov    %r14,%rcx
	mov    %rsi,%r14
	mov    %rcx,%rsi
	mov    %r15,%rdi
	callq  *%rax
	mov    %rax,0xc0(%r15)
	mov    %r14,%rdx
	jmp    2ad0a <jinit_phuff_decoder+0x9a>
	movl   $0xffffffff,(%rax)
	add    $0x4,%rax
	add    $0x1,%ecx
	cmp    $0x3f,%ecx
	jle    2acf5 <jinit_phuff_decoder+0x85>
	add    $0x1,%edx
	movslq 0x38(%r15),%rcx
	cmp    %edx,%ecx
	jg     2ad1c <jinit_phuff_decoder+0xac>
	mov    -0x10(%rbp),%r15
	mov    -0x8(%rbp),%r14
	leaveq 
	retq   
	mov    %r14,%rcx
	jmp    2ad02 <jinit_phuff_decoder+0x92>
	data16 nopw %cs:0x0(%rax,%rax,1)
	nopl   0x0(%rax)

002ad30 <decode_mcu_DC_first>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x80,%rsp
	mov    %rdi,-0x38(%rbp)
	mov    %rsi,-0x30(%rbp)
	mov    0x250(%rdi),%r9
	mov    %r9,-0x40(%rbp)
	mov    0x218(%rdi),%ecx
	xor    %r11d,%r11d
	mov    0x170(%rdi),%eax
	test   %eax,%eax
	jne    2ad90 <decode_mcu_DC_first+0x60>
	mov    %rbx,%r8
	mov    %rcx,%rbx
	mov    %r12,%rcx
	mov    %rdi,%r12
	mov    %rsi,%r10
	mov    $0x1,%eax
	movslq 0x10(%r9),%rdx
	test   %edx,%edx
	je     2ada9 <decode_mcu_DC_first+0x79>
	mov    %r8,%rbx
	mov    %rcx,%r12
	mov    0x3c(%r9),%ecx
	add    $0xffffffff,%ecx
	mov    %ecx,0x3c(%r9)
	leaveq 
	retq   
	mov    0x3c(%r9),%eax
	test   %eax,%eax
	je     2ae05 <decode_mcu_DC_first+0xd5>
	mov    %rbx,%r8
	mov    %rcx,%rbx
	mov    %r12,%rcx
	mov    %rdi,%r12
	mov    %rsi,%r10
	jmp    2ad70 <decode_mcu_DC_first+0x40>
	mov    %r12,-0x60(%rbp)
	mov    0x28(%r12),%rdx
	mov    (%rdx),%rdx
	mov    %rdx,-0x80(%rbp)
	mov    0x28(%r12),%rdx
	mov    0x8(%rdx),%rdx
	mov    %rdx,-0x78(%rbp)
	mov    0x18(%r9),%rsi
	movslq 0x20(%r9),%rdx
	mov    0x28(%r9),%rdi
	mov    %rdi,-0x54(%rbp)
	mov    0x30(%r9),%rdi
	mov    %rdi,-0x4c(%rbp)
	mov    0x38(%r9),%edi
	mov    %edi,-0x44(%rbp)
	lea    -0x80(%rbp),%rdi
	mov    %r15,-0x28(%rbp)
	mov    %r8,-0x8(%rbp)
	mov    %rcx,-0x10(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %r11,%r13
	jmpq   2aeea <decode_mcu_DC_first+0x1ba>
	mov    %rcx,-0x28(%rbp)
	callq  2c060 <process_restart>
	test   %eax,%eax
	je     2af49 <decode_mcu_DC_first+0x219>
	mov    %r12,%rcx
	mov    %rbx,%r8
	xor    %r11d,%r11d
	mov    -0x30(%rbp),%r10
	mov    -0x28(%rbp),%rbx
	mov    -0x38(%rbp),%r12
	mov    -0x40(%rbp),%r9
	jmpq   2ad70 <decode_mcu_DC_first+0x40>
	movslq %r13d,%rax
	mov    (%r10,%rax,8),%r14
	movslq 0x1e4(%r12,%rax,4),%r15
	mov    0x1b8(%r12,%r15,8),%rax
	movslq 0x14(%rax),%rax
	mov    0x40(%r9,%rax,8),%rax
	cmp    $0x7,%edx
	jg     2af63 <decode_mcu_DC_first+0x233>
	mov    %r11,%rcx
	mov    %rax,%r12
	callq  4410 <jpeg_fill_bit_buffer@plt>
	test   %eax,%eax
	je     2af97 <decode_mcu_DC_first+0x267>
	mov    -0x70(%rbp),%rsi
	movslq -0x68(%rbp),%rdx
	cmp    $0x7,%edx
	jg     2af4d <decode_mcu_DC_first+0x21d>
	mov    %r12,%rax
	lea    -0x80(%rbp),%rdi
	mov    $0x1,%r8d
	mov    -0x38(%rbp),%r12
	mov    %rax,%rcx
	callq  41c0 <jpeg_huff_decode@plt>
	test   %eax,%eax
	js     2afaf <decode_mcu_DC_first+0x27f>
	mov    %rax,%rcx
	mov    -0x70(%rbp),%rsi
	movslq -0x68(%rbp),%rdx
	lea    -0x80(%rbp),%rdi
	xor    %r11d,%r11d
	mov    -0x30(%rbp),%r10
	mov    -0x40(%rbp),%r9
	test   %ecx,%ecx
	jne    2afc7 <decode_mcu_DC_first+0x297>
	mov    %r11,%rax
	add    -0x50(%rbp,%r15,4),%eax
	mov    %eax,-0x50(%rbp,%r15,4)
	movslq %eax,%rax
	mov    %rbx,%rcx
	shl    %cl,%rax
	mov    %rcx,%rbx
	mov    %ax,(%r14)
	add    $0x1,%r13d
	mov    $0x1,%eax
	cmp    0x1e0(%r12),%r13d
	jl     2ae34 <decode_mcu_DC_first+0x104>
	mov    -0x80(%rbp),%rdi
	mov    0x28(%r12),%rcx
	mov    %rdi,(%rcx)
	mov    -0x78(%rbp),%rdi
	mov    0x28(%r12),%rcx
	mov    %rdi,0x8(%rcx)
	mov    %rsi,0x18(%r9)
	mov    %edx,0x20(%r9)
	mov    -0x54(%rbp),%rcx
	mov    %rcx,0x28(%r9)
	mov    -0x4c(%rbp),%rcx
	mov    %rcx,0x30(%r9)
	mov    -0x44(%rbp),%ecx
	mov    %ecx,0x38(%r9)
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	mov    -0x28(%rbp),%r15
	jmpq   2ad83 <decode_mcu_DC_first+0x53>
	xor    %eax,%eax
	leaveq 
	retq   
	mov    %r12,%rax
	lea    -0x80(%rbp),%rdi
	xor    %r11d,%r11d
	mov    -0x30(%rbp),%r10
	mov    -0x38(%rbp),%r12
	mov    -0x40(%rbp),%r9
	lea    0x38(%rdx),%ecx
	mov    %rsi,%r8
	shr    %cl,%r8
	movzbl %r8b,%ecx
	movslq %ecx,%rcx
	movslq 0x128(%rax,%rcx,4),%rcx
	mov    %rcx,%r8
	sar    $0x8,%r8d
	cmp    $0x8,%r8d
	jg     2ae92 <decode_mcu_DC_first+0x162>
	sub    %r8d,%edx
	movzbl %cl,%ecx
	jmpq   2aebc <decode_mcu_DC_first+0x18c>
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	mov    -0x28(%rbp),%r15
	xor    %eax,%eax
	leaveq 
	retq   
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	mov    -0x28(%rbp),%r15
	xor    %eax,%eax
	leaveq 
	retq   
	cmp    %ecx,%edx
	jge    2aff2 <decode_mcu_DC_first+0x2c2>
	mov    %rcx,%r12
	callq  4410 <jpeg_fill_bit_buffer@plt>
	test   %eax,%eax
	je     2b027 <decode_mcu_DC_first+0x2f7>
	mov    %r12,%rcx
	mov    -0x70(%rbp),%rsi
	movslq -0x68(%rbp),%rdx
	lea    -0x80(%rbp),%rdi
	mov    -0x30(%rbp),%r10
	mov    -0x38(%rbp),%r12
	mov    -0x40(%rbp),%r9
	mov    $0x1,%r8d
	mov    %r8,%rax
	shl    %cl,%eax
	add    $0xffffffff,%eax
	sub    %ecx,%edx
	mov    %rcx,%r11
	mov    %rdx,%rcx
	mov    %rsi,%rdx
	shr    %cl,%rdx
	and    %edx,%eax
	mov    %rcx,%rdx
	lea    0x1f(%r11),%ecx
	shl    %cl,%r8d
	cmp    %r8d,%eax
	jl     2b03f <decode_mcu_DC_first+0x30f>
	xor    %r11d,%r11d
	jmpq   2aec7 <decode_mcu_DC_first+0x197>
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	mov    -0x28(%rbp),%r15
	xor    %eax,%eax
	leaveq 
	retq   
	mov    %r11,%rcx
	mov    $0xffffffffffffffff,%r8
	shl    %cl,%r8d
	lea    0x1(%rax,%r8,1),%eax
	xor    %r11d,%r11d
	jmpq   2aec7 <decode_mcu_DC_first+0x197>
	nopl   0x0(%rax)

002b060 <decode_mcu_AC_first>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x80,%rsp
	mov    0x250(%rdi),%r8
	movslq 0x210(%rdi),%rdx
	mov    0x218(%rdi),%r9d
	xor    %ecx,%ecx
	mov    0x170(%rdi),%eax
	test   %eax,%eax
	jne    2b0cd <decode_mcu_AC_first+0x6d>
	mov    %rsi,%r10
	mov    %rdi,%r11
	mov    %r12,%rdi
	mov    %rdx,%r12
	mov    %r15,%rdx
	mov    %r14,%r15
	mov    %r9,%rsi
	mov    %rbx,%r9
	mov    %rsi,%rbx
	mov    $0x1,%eax
	movslq 0x10(%r8),%rsi
	test   %esi,%esi
	je     2b0f6 <decode_mcu_AC_first+0x96>
	mov    %r9,%rbx
	mov    %rdi,%r12
	mov    0x3c(%r8),%ecx
	add    $0xffffffff,%ecx
	mov    %ecx,0x3c(%r8)
	mov    %r15,%r14
	mov    %rdx,%r15
	leaveq 
	retq   
	mov    0x3c(%r8),%eax
	test   %eax,%eax
	je     2b16a <decode_mcu_AC_first+0x10a>
	mov    %rsi,%r10
	mov    %rdi,%r11
	mov    %r12,%rdi
	mov    %rdx,%r12
	mov    %r15,%rdx
	mov    %r14,%r15
	mov    %r9,%rsi
	mov    %rbx,%r9
	mov    %rsi,%rbx
	jmp    2b0a7 <decode_mcu_AC_first+0x47>
	mov    0x28(%r8),%esi
	test   %esi,%esi
	jne    2b1be <decode_mcu_AC_first+0x15e>
	mov    %r11,-0x58(%rbp)
	mov    0x28(%r11),%rsi
	mov    (%rsi),%rsi
	mov    %rsi,-0x78(%rbp)
	mov    0x28(%r11),%rsi
	mov    0x8(%rsi),%rsi
	mov    %rsi,-0x70(%rbp)
	mov    0x60(%r8),%r14
	mov    0x18(%r8),%rsi
	mov    %rdx,-0x38(%rbp)
	movslq 0x20(%r8),%rdx
	mov    (%r10),%r10
	mov    %r15,-0x30(%rbp)
	mov    %r10,-0x50(%rbp)
	movslq 0x20c(%r11),%r15
	mov    %r13,-0x28(%rbp)
	mov    0x42e8e(%rip),%r13        # 6dfd8 <jpeg_natural_order@@LIBJPEG_6.2+0x129f4>
	mov    %rdi,-0x20(%rbp)
	lea    -0x78(%rbp),%rdi
	mov    %r9,-0x18(%rbp)
	mov    $0xffffffffffffffff,%r9
	mov    %r8,-0x8(%rbp)
	mov    %r11,-0x10(%rbp)
	jmpq   2b278 <decode_mcu_AC_first+0x218>
	mov    %rdi,%rax
	mov    %r8,-0x50(%rbp)
	mov    %rdi,-0x48(%rbp)
	mov    %rsi,-0x40(%rbp)
	mov    %r9,-0x38(%rbp)
	mov    %rdx,-0x30(%rbp)
	mov    %rax,%rdi
	mov    %r15,%rax
	mov    %r14,%r15
	mov    %rax,%r14
	callq  2c060 <process_restart>
	test   %eax,%eax
	je     2b2db <decode_mcu_AC_first+0x27b>
	mov    %r14,%rdx
	mov    %r12,%rdi
	mov    %rbx,%r9
	xor    %ecx,%ecx
	mov    -0x30(%rbp),%r12
	mov    -0x38(%rbp),%rbx
	mov    -0x40(%rbp),%r10
	mov    -0x48(%rbp),%r11
	mov    -0x50(%rbp),%r8
	jmpq   2b0a7 <decode_mcu_AC_first+0x47>
	lea    -0x1(%rsi),%ecx
	mov    %r9,%rbx
	mov    %rdi,%r12
	mov    %ecx,0x28(%r8)
	jmpq   2b0ba <decode_mcu_AC_first+0x5a>
	cmp    %ecx,%edx
	jge    2b21b <decode_mcu_AC_first+0x1bb>
	mov    %rcx,%rax
	mov    %r12,-0x40(%rbp)
	mov    %r14,-0x48(%rbp)
	mov    %r8,%r12
	mov    %rcx,%r14
	mov    %rax,%rcx
	callq  4410 <jpeg_fill_bit_buffer@plt>
	test   %eax,%eax
	je     2b2e8 <decode_mcu_AC_first+0x288>
	mov    %r14,%rcx
	mov    %r12,%r8
	mov    -0x68(%rbp),%rsi
	movslq -0x60(%rbp),%rdx
	mov    -0x48(%rbp),%r14
	mov    $0xffffffffffffffff,%r9
	mov    -0x50(%rbp),%r10
	mov    $0x1,%eax
	mov    -0x40(%rbp),%r12
	mov    %rax,%rdi
	shl    %cl,%edi
	add    $0xffffffff,%edi
	sub    %ecx,%edx
	mov    %rcx,%r11
	mov    %rdx,%rcx
	mov    %rsi,%rdx
	shr    %cl,%rdx
	and    %edx,%edi
	mov    %rcx,%rdx
	lea    0x1f(%r11),%ecx
	shl    %cl,%eax
	cmp    %edi,%eax
	jle    2b24c <decode_mcu_AC_first+0x1ec>
	mov    %r11,%rcx
	mov    %r9,%rax
	shl    %cl,%eax
	lea    0x1(%rdi,%rax,1),%edi
	movslq %edi,%rax
	mov    %rbx,%rcx
	shl    %cl,%rax
	mov    %rcx,%rbx
	lea    (%r8,%r15,1),%ecx
	movslq %ecx,%rdi
	movslq 0x0(%r13,%rdi,4),%rdi
	mov    %ax,(%r10,%rdi,2)
	lea    -0x78(%rbp),%rdi
	mov    $0x1,%eax
	lea    0x1(%rcx),%r15d
	xor    %ecx,%ecx
	cmp    %r12d,%r15d
	jg     2b314 <decode_mcu_AC_first+0x2b4>
	cmp    $0x7,%edx
	jle    2b354 <decode_mcu_AC_first+0x2f4>
	lea    0x38(%rdx),%ecx
	mov    %rsi,%r8
	shr    %cl,%r8
	movzbl %r8b,%ecx
	movslq %ecx,%rcx
	movslq 0x128(%r14,%rcx,4),%rcx
	mov    %rcx,%r8
	sar    $0x8,%r8d
	cmp    $0x8,%r8d
	jle    2b381 <decode_mcu_AC_first+0x321>
	mov    %r14,%rcx
	callq  41c0 <jpeg_huff_decode@plt>
	test   %eax,%eax
	jns    2b38a <decode_mcu_AC_first+0x32a>
	mov    -0x18(%rbp),%rbx
	mov    -0x20(%rbp),%r12
	mov    -0x28(%rbp),%r13
	mov    -0x30(%rbp),%r14
	mov    -0x38(%rbp),%r15
	xor    %eax,%eax
	leaveq 
	retq   
	mov    %r15,%rcx
	mov    %r14,%r15
	mov    %rcx,%r14
	xor    %eax,%eax
	leaveq 
	retq   
	mov    -0x18(%rbp),%rbx
	mov    -0x20(%rbp),%r12
	mov    -0x28(%rbp),%r13
	mov    -0x30(%rbp),%r14
	mov    -0x38(%rbp),%r15
	xor    %eax,%eax
	leaveq 
	retq   
	mov    %r8,%rcx
	mov    %rax,%rbx
	shl    %cl,%ebx
	test   %r11d,%r11d
	jne    2b3d8 <decode_mcu_AC_first+0x378>
	lea    -0x1(%rbx),%ecx
	mov    -0x78(%rbp),%rbx
	mov    -0x10(%rbp),%r8
	mov    0x28(%r8),%rdi
	mov    %rbx,(%rdi)
	mov    -0x70(%rbp),%rbx
	mov    0x28(%r8),%rdi
	mov    %rbx,0x8(%rdi)
	mov    -0x8(%rbp),%r8
	mov    %rsi,0x18(%r8)
	mov    %edx,0x20(%r8)
	mov    -0x18(%rbp),%rbx
	mov    -0x20(%rbp),%r12
	mov    -0x28(%rbp),%r13
	mov    -0x30(%rbp),%r15
	mov    -0x38(%rbp),%rdx
	jmpq   2b1c7 <decode_mcu_AC_first+0x167>
	callq  4410 <jpeg_fill_bit_buffer@plt>
	test   %eax,%eax
	je     2b3f6 <decode_mcu_AC_first+0x396>
	mov    -0x68(%rbp),%rsi
	movslq -0x60(%rbp),%rdx
	cmp    $0x7,%edx
	jg     2b40e <decode_mcu_AC_first+0x3ae>
	lea    -0x78(%rbp),%rdi
	mov    $0x1,%r8d
	jmpq   2b2b3 <decode_mcu_AC_first+0x253>
	sub    %r8d,%edx
	movzbl %cl,%r11d
	jmp    2b3a9 <decode_mcu_AC_first+0x349>
	mov    %rax,%r11
	mov    -0x68(%rbp),%rsi
	movslq -0x60(%rbp),%rdx
	mov    $0xffffffffffffffff,%r9
	lea    -0x78(%rbp),%rdi
	mov    -0x50(%rbp),%r10
	mov    $0x1,%eax
	mov    %r11,%r8
	sar    $0x4,%r8d
	mov    %r11,%rcx
	and    $0xf,%ecx
	test   %ecx,%ecx
	jg     2b1d0 <decode_mcu_AC_first+0x170>
	and    $0xfffffff0,%r11d
	cmp    $0xf0,%r11d
	jne    2b300 <decode_mcu_AC_first+0x2a0>
	lea    0xf(%r15),%ecx
	jmpq   2b272 <decode_mcu_AC_first+0x212>
	cmp    %ecx,%edx
	jl     2b427 <decode_mcu_AC_first+0x3c7>
	sub    %ecx,%edx
	mov    %rdx,%rcx
	mov    %rsi,%rdi
	shr    %cl,%rdi
	mov    %rcx,%rdx
	lea    -0x1(%rbx),%ecx
	and    %edi,%ecx
	add    %ecx,%ebx
	jmpq   2b311 <decode_mcu_AC_first+0x2b1>
	mov    -0x18(%rbp),%rbx
	mov    -0x20(%rbp),%r12
	mov    -0x28(%rbp),%r13
	mov    -0x30(%rbp),%r14
	mov    -0x38(%rbp),%r15
	xor    %eax,%eax
	leaveq 
	retq   
	mov    $0xffffffffffffffff,%r9
	lea    -0x78(%rbp),%rdi
	mov    -0x50(%rbp),%r10
	mov    $0x1,%eax
	jmpq   2b28a <decode_mcu_AC_first+0x22a>
	mov    %rax,%r12
	mov    %rcx,%r13
	callq  4410 <jpeg_fill_bit_buffer@plt>
	test   %eax,%eax
	jne    2b44e <decode_mcu_AC_first+0x3ee>
	mov    -0x18(%rbp),%rbx
	mov    -0x20(%rbp),%r12
	mov    -0x28(%rbp),%r13
	mov    -0x30(%rbp),%r14
	mov    -0x38(%rbp),%r15
	xor    %eax,%eax
	leaveq 
	retq   
	mov    %r12,%rax
	mov    %r13,%rcx
	mov    -0x68(%rbp),%rsi
	movslq -0x60(%rbp),%rdx
	jmpq   2b3dc <decode_mcu_AC_first+0x37c>
	data16 nopw %cs:0x0(%rax,%rax,1)
	nopl   0x0(%rax)

002b470 <decode_mcu_DC_refine>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x60,%rsp
	mov    0x250(%rdi),%rax
	mov    %rax,-0x20(%rbp)
	mov    0x218(%rdi),%ecx
	xor    %r8d,%r8d
	mov    0x170(%rdi),%edx
	test   %edx,%edx
	jne    2b4f9 <decode_mcu_DC_refine+0x89>
	mov    %r14,%rdx
	mov    %rbx,%r9
	mov    %r8,%rbx
	mov    %r15,%r8
	mov    %r13,%r15
	mov    %rdi,%r13
	mov    %r12,%r10
	mov    %rsi,%r12
	mov    %r13,-0x38(%rbp)
	mov    0x28(%r13),%rsi
	mov    (%rsi),%rsi
	mov    %rsi,-0x58(%rbp)
	mov    0x28(%r13),%rsi
	mov    0x8(%rsi),%rsi
	mov    %rsi,-0x50(%rbp)
	mov    0x18(%rax),%rsi
	movslq 0x20(%rax),%r11
	mov    $0x1,%eax
	mov    %rax,%r14
	shl    %cl,%r14d
	lea    -0x58(%rbp),%rdi
	mov    %r9,-0x8(%rbp)
	mov    %r10,-0x10(%rbp)
	mov    %r15,-0x18(%rbp)
	mov    %rdx,-0x28(%rbp)
	mov    %r8,-0x30(%rbp)
	mov    %r11,%rcx
	jmp    2b54c <decode_mcu_DC_refine+0xdc>
	mov    0x3c(%rax),%edx
	test   %edx,%edx
	je     2b596 <decode_mcu_DC_refine+0x126>
	mov    %r14,%rdx
	mov    %rbx,%r9
	mov    %r8,%rbx
	mov    %r15,%r8
	mov    %r13,%r15
	mov    %rdi,%r13
	mov    %r12,%r10
	mov    %rsi,%r12
	jmp    2b4ae <decode_mcu_DC_refine+0x3e>
	movslq %ebx,%rdx
	mov    (%r12,%rdx,8),%r15
	test   %ecx,%ecx
	jle    2b5dd <decode_mcu_DC_refine+0x16d>
	add    $0xffffffff,%ecx
	mov    %rsi,%rdx
	shr    %cl,%rdx
	and    $0x1,%edx
	test   %edx,%edx
	jle    2b549 <decode_mcu_DC_refine+0xd9>
	movswq (%r15),%rdx
	or     %r14w,%dx
	mov    %dx,(%r15)
	add    $0x1,%ebx
	cmp    0x1e0(%r13),%ebx
	jl     2b51e <decode_mcu_DC_refine+0xae>
	mov    -0x58(%rbp),%rdi
	mov    0x28(%r13),%rdx
	mov    %rdi,(%rdx)
	mov    -0x50(%rbp),%rdi
	mov    0x28(%r13),%rdx
	mov    %rdi,0x8(%rdx)
	mov    -0x20(%rbp),%rdx
	mov    %rsi,0x18(%rdx)
	mov    %ecx,0x20(%rdx)
	mov    0x3c(%rdx),%ecx
	add    $0xffffffff,%ecx
	mov    %ecx,0x3c(%rdx)
	mov    -0x30(%rbp),%r15
	mov    -0x28(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	leaveq 
	retq   
	mov    %rdi,%rax
	mov    %rdi,-0x28(%rbp)
	mov    %rcx,-0x18(%rbp)
	mov    %rsi,-0x30(%rbp)
	mov    %rax,%rdi
	mov    %r15,%rax
	mov    %r13,%r15
	mov    %rax,%r13
	callq  2c060 <process_restart>
	test   %eax,%eax
	je     2b602 <decode_mcu_DC_refine+0x192>
	mov    %r14,%rdx
	mov    %r13,%r8
	mov    %rbx,%r9
	mov    %r12,%r10
	xor    %ebx,%ebx
	mov    -0x30(%rbp),%r12
	mov    -0x18(%rbp),%rcx
	mov    -0x20(%rbp),%rax
	mov    -0x28(%rbp),%r13
	jmpq   2b4ae <decode_mcu_DC_refine+0x3e>
	mov    %rcx,%rdx
	mov    %rax,%rcx
	callq  4410 <jpeg_fill_bit_buffer@plt>
	test   %eax,%eax
	je     2b60f <decode_mcu_DC_refine+0x19f>
	mov    -0x48(%rbp),%rsi
	movslq -0x40(%rbp),%rcx
	mov    $0x1,%eax
	lea    -0x58(%rbp),%rdi
	jmpq   2b52d <decode_mcu_DC_refine+0xbd>
	mov    %r15,%rcx
	mov    %r13,%r15
	mov    %rcx,%r13
	xor    %eax,%eax
	leaveq 
	retq   
	mov    -0x30(%rbp),%r15
	mov    -0x28(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	xor    %eax,%eax
	leaveq 
	retq   
	nopw   0x0(%rax,%rax,1)

002b630 <decode_mcu_AC_refine>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x1b0,%rsp
	mov    %rdi,-0x78(%rbp)
	mov    0x250(%rdi),%rdx
	movslq 0x210(%rdi),%r9
	mov    %r9,-0x70(%rbp)
	mov    0x218(%rdi),%ecx
	xor    %eax,%eax
	mov    %rax,-0x40(%rbp)
	mov    0x170(%rdi),%eax
	test   %eax,%eax
	jne    2b69a <decode_mcu_AC_refine+0x6a>
	mov    %r12,%r8
	mov    %r14,%r10
	mov    %rdi,%r14
	mov    %r13,%rdi
	mov    %rbx,%r13
	mov    $0x1,%eax
	movslq 0x10(%rdx),%rbx
	test   %ebx,%ebx
	je     2b6b6 <decode_mcu_AC_refine+0x86>
	mov    %r10,%r14
	mov    0x3c(%rdx),%ecx
	add    $0xffffffff,%ecx
	mov    %ecx,0x3c(%rdx)
	mov    %r13,%rbx
	mov    %rdi,%r13
	mov    %r8,%r12
	leaveq 
	retq   
	mov    0x3c(%rdx),%eax
	test   %eax,%eax
	je     2b78d <decode_mcu_AC_refine+0x15d>
	mov    %r12,%r8
	mov    %r14,%r10
	mov    %rdi,%r14
	mov    %r13,%rdi
	mov    %rbx,%r13
	jmp    2b676 <decode_mcu_AC_refine+0x46>
	mov    %r14,-0x188(%rbp)
	mov    0x28(%r14),%rax
	mov    (%rax),%rax
	mov    %rax,-0x1a8(%rbp)
	mov    0x28(%r14),%rax
	mov    0x8(%rax),%rax
	mov    %rax,-0x1a0(%rbp)
	mov    0x60(%rdx),%r11
	mov    %r11,-0x38(%rbp)
	mov    (%rsi),%r12
	mov    0x18(%rdx),%rsi
	movslq 0x20(%rdx),%rax
	movslq 0x20c(%r14),%rbx
	mov    %r15,-0x30(%rbp)
	mov    0x428d9(%rip),%r15        # 6dfd8 <jpeg_natural_order@@LIBJPEG_6.2+0x129f4>
	mov    %r15,-0x60(%rbp)
	mov    %r10,-0x28(%rbp)
	mov    $0x1,%r10d
	shl    %cl,%r10d
	mov    %r10,-0x80(%rbp)
	xchg   %rax,%rdx
	mov    $0xffffffffffffffff,%r10
	shl    %cl,%r10d
	mov    %r10,-0x50(%rbp)
	mov    0x28(%rax),%ecx
	test   %ecx,%ecx
	je     2b7cd <decode_mcu_AC_refine+0x19d>
	mov    %rdi,-0x20(%rbp)
	mov    %rcx,%r10
	mov    %rdx,%rcx
	mov    %rax,%rdx
	lea    -0x1a8(%rbp),%rdi
	mov    $0x1,%eax
	xor    %r11d,%r11d
	test   %r10d,%r10d
	jne    2b7f8 <decode_mcu_AC_refine+0x1c8>
	mov    -0x1a8(%rbp),%rbx
	mov    0x28(%r14),%rdi
	mov    %rbx,(%rdi)
	mov    -0x1a0(%rbp),%rbx
	mov    0x28(%r14),%rdi
	mov    %rbx,0x8(%rdi)
	mov    %rsi,0x18(%rdx)
	mov    %ecx,0x20(%rdx)
	mov    %r11d,0x28(%rdx)
	mov    -0x20(%rbp),%rdi
	mov    -0x28(%rbp),%r14
	mov    -0x30(%rbp),%r15
	jmpq   2b686 <decode_mcu_AC_refine+0x56>
	mov    %rdx,-0x80(%rbp)
	mov    %rsi,-0x60(%rbp)
	mov    %rcx,-0x68(%rbp)
	mov    %r13,%rax
	mov    %rbx,%r13
	mov    %rax,%rbx
	callq  2c060 <process_restart>
	test   %eax,%eax
	je     2b815 <decode_mcu_AC_refine+0x1e5>
	mov    %rbx,%rdi
	mov    %r12,%r8
	mov    %r14,%r10
	mov    -0x70(%rbp),%r9
	mov    -0x68(%rbp),%rcx
	mov    -0x60(%rbp),%rsi
	mov    -0x78(%rbp),%r14
	mov    -0x80(%rbp),%rdx
	jmpq   2b676 <decode_mcu_AC_refine+0x46>
	mov    %rax,-0x8(%rbp)
	mov    %r13,-0x10(%rbp)
	mov    %r8,-0x18(%rbp)
	mov    %rdi,-0x20(%rbp)
	mov    %rdx,%rcx
	mov    %r11,%r8
	lea    -0x1a8(%rbp),%rdi
	mov    -0x80(%rbp),%r13
	mov    $0x1,%eax
	xor    %r11d,%r11d
	jmp    2b853 <decode_mcu_AC_refine+0x223>
	mov    %rdx,-0x70(%rbp)
	mov    %r13,-0x10(%rbp)
	mov    %r8,-0x18(%rbp)
	mov    %r10,-0x48(%rbp)
	mov    -0x50(%rbp),%rdx
	mov    -0x80(%rbp),%r13
	jmpq   2b982 <decode_mcu_AC_refine+0x352>
	mov    %r13,%rcx
	mov    %rbx,%r13
	mov    %rcx,%rbx
	xor    %eax,%eax
	leaveq 
	retq   
	movslq %ebx,%rdx
	movslq (%r15,%rdx,4),%r8
	mov    %r11w,(%r12,%r8,2)
	mov    -0x40(%rbp),%r11
	movslq %r11d,%rdx
	mov    %r8d,-0x180(%rbp,%rdx,4)
	lea    0x1(%r11),%edx
	mov    %rdx,-0x40(%rbp)
	add    $0x1,%ebx
	mov    -0x38(%rbp),%r8
	xor    %r11d,%r11d
	mov    -0x78(%rbp),%r14
	cmp    %r9d,%ebx
	jg     2b9a8 <decode_mcu_AC_refine+0x378>
	cmp    $0x7,%ecx
	jle    2b9bc <decode_mcu_AC_refine+0x38c>
	mov    %rcx,%rdx
	lea    0x38(%rdx),%ecx
	mov    %rsi,%rax
	shr    %cl,%rax
	movzbl %al,%eax
	movslq %eax,%rax
	movslq 0x128(%r8,%rax,4),%rax
	mov    %rax,%rcx
	sar    $0x8,%ecx
	cmp    $0x8,%ecx
	jle    2ba01 <decode_mcu_AC_refine+0x3d1>
	mov    %rcx,%rax
	mov    %rdx,%rcx
	mov    %rcx,%rdx
	mov    %r8,%rcx
	mov    %rax,%r8
	callq  41c0 <jpeg_huff_decode@plt>
	test   %eax,%eax
	js     2ba10 <decode_mcu_AC_refine+0x3e0>
	mov    %r14,%r8
	mov    -0x198(%rbp),%rsi
	movslq -0x190(%rbp),%rcx
	mov    -0x50(%rbp),%r10
	lea    -0x1a8(%rbp),%rdi
	xor    %r11d,%r11d
	mov    -0x70(%rbp),%r9
	mov    %rax,%r14
	sar    $0x4,%r14d
	mov    %rax,%rdx
	and    $0xf,%edx
	test   %edx,%edx
	jg     2ba19 <decode_mcu_AC_refine+0x3e9>
	and    $0xfffffff0,%eax
	cmp    $0xf0,%eax
	jne    2ba95 <decode_mcu_AC_refine+0x465>
	mov    $0x1,%eax
	jmpq   2bae1 <decode_mcu_AC_refine+0x4b1>
	movslq %ebx,%r8
	movslq (%r15,%r8,4),%r14
	movswq (%r12,%r14,2),%r8
	test   %r8w,%r8w
	je     2b97f <decode_mcu_AC_refine+0x34f>
	test   %ecx,%ecx
	jg     2b94b <decode_mcu_AC_refine+0x31b>
	mov    %rcx,%rdx
	mov    %rax,%rcx
	mov    %r9,%r15
	callq  4410 <jpeg_fill_bit_buffer@plt>
	test   %eax,%eax
	je     2bb24 <decode_mcu_AC_refine+0x4f4>
	mov    %r15,%r9
	mov    -0x198(%rbp),%rsi
	movslq -0x190(%rbp),%rcx
	mov    -0x60(%rbp),%r15
	mov    -0x50(%rbp),%rdx
	lea    -0x1a8(%rbp),%rdi
	mov    $0x1,%eax
	add    $0xffffffff,%ecx
	mov    %rsi,%r8
	shr    %cl,%r8
	and    $0x1,%r8d
	test   %r8d,%r8d
	jle    2b97f <decode_mcu_AC_refine+0x34f>
	movswq (%r12,%r14,2),%r8
	mov    %r13,%r10
	and    %r8d,%r10d
	test   %r10d,%r10d
	jne    2b97f <decode_mcu_AC_refine+0x34f>
	test   %r8w,%r8w
	jns    2bb2a <decode_mcu_AC_refine+0x4fa>
	add    %edx,%r8d
	mov    %r8w,(%r12,%r14,2)
	add    $0x1,%ebx
	cmp    %ebx,%r9d
	jge    2b8fa <decode_mcu_AC_refine+0x2ca>
	mov    -0x48(%rbp),%rdx
	lea    -0x1(%rdx),%r11d
	mov    -0x18(%rbp),%r8
	mov    -0x10(%rbp),%r13
	mov    -0x78(%rbp),%r14
	mov    -0x70(%rbp),%rdx
	jmpq   2b754 <decode_mcu_AC_refine+0x124>
	mov    -0x18(%rbp),%r8
	mov    -0x10(%rbp),%r13
	mov    -0x8(%rbp),%rdx
	mov    %r11,%r10
	jmpq   2b74b <decode_mcu_AC_refine+0x11b>
	mov    %rcx,%rdx
	mov    %r11,%rcx
	mov    %r8,%r13
	callq  4410 <jpeg_fill_bit_buffer@plt>
	test   %eax,%eax
	je     2bb37 <decode_mcu_AC_refine+0x507>
	mov    -0x198(%rbp),%rsi
	movslq -0x190(%rbp),%rcx
	cmp    $0x7,%ecx
	jg     2bb3d <decode_mcu_AC_refine+0x50d>
	mov    %r13,%r8
	lea    -0x1a8(%rbp),%rdi
	mov    -0x80(%rbp),%r13
	mov    $0x1,%eax
	jmpq   2b894 <decode_mcu_AC_refine+0x264>
	neg    %ecx
	add    %edx,%ecx
	movzbl %al,%eax
	mov    %r14,%r8
	jmpq   2b8cd <decode_mcu_AC_refine+0x29d>
	mov    -0x40(%rbp),%rax
	jmpq   2bb70 <decode_mcu_AC_refine+0x540>
	cmp    $0x1,%edx
	je     2ba6f <decode_mcu_AC_refine+0x43f>
	mov    (%r8),%rax
	movl   $0x76,0x28(%rax)
	mov    (%r8),%rax
	mov    0x8(%rax),%rdx
	mov    %r8,%rdi
	mov    $0xffffffffffffffff,%rax
	mov    %rbx,-0x68(%rbp)
	mov    %r12,-0x58(%rbp)
	mov    %rcx,%rbx
	mov    %rsi,%r12
	mov    %rax,%rsi
	mov    %r10,%r15
	callq  *%rdx
	mov    %rbx,%rcx
	mov    %r12,%rsi
	mov    %r15,%r10
	mov    -0x58(%rbp),%r12
	mov    -0x60(%rbp),%r15
	mov    -0x68(%rbp),%rbx
	lea    -0x1a8(%rbp),%rdi
	mov    -0x70(%rbp),%r9
	test   %ecx,%ecx
	jle    2bb8c <decode_mcu_AC_refine+0x55c>
	add    $0xffffffff,%ecx
	mov    %rsi,%rax
	shr    %cl,%rax
	and    $0x1,%eax
	test   %eax,%eax
	jg     2bbd0 <decode_mcu_AC_refine+0x5a0>
	mov    $0x1,%eax
	mov    %r10,%r11
	jmp    2bae1 <decode_mcu_AC_refine+0x4b1>
	mov    %rcx,%rdx
	mov    %r14,%rcx
	mov    %r8,%r14
	mov    $0x1,%r10d
	shl    %cl,%r10d
	test   %eax,%eax
	jne    2bbdd <decode_mcu_AC_refine+0x5ad>
	mov    %rdx,%rcx
	mov    -0x18(%rbp),%r8
	mov    -0x10(%rbp),%r13
	mov    $0x1,%eax
	mov    -0x8(%rbp),%rdx
	jmpq   2b74b <decode_mcu_AC_refine+0x11b>
	add    $0xffffffff,%r14d
	test   %r14d,%r14d
	js     2bc13 <decode_mcu_AC_refine+0x5e3>
	add    $0x1,%ebx
	cmp    %r9d,%ebx
	jg     2bc13 <decode_mcu_AC_refine+0x5e3>
	movslq %ebx,%rdx
	movslq (%r15,%rdx,4),%r8
	movswq (%r12,%r8,2),%rdx
	test   %dx,%dx
	je     2bac8 <decode_mcu_AC_refine+0x498>
	test   %ecx,%ecx
	jle    2bc25 <decode_mcu_AC_refine+0x5f5>
	add    $0xffffffff,%ecx
	mov    %rsi,%rdx
	shr    %cl,%rdx
	and    $0x1,%edx
	test   %edx,%edx
	jle    2bad5 <decode_mcu_AC_refine+0x4a5>
	movswq (%r12,%r8,2),%rax
	mov    %rax,%rdx
	and    %r13d,%edx
	test   %edx,%edx
	je     2bc44 <decode_mcu_AC_refine+0x614>
	mov    $0x1,%eax
	jmp    2bad5 <decode_mcu_AC_refine+0x4a5>
	mov    -0x40(%rbp),%rax
	jmp    2bb70 <decode_mcu_AC_refine+0x540>
	add    %r13d,%r8d
	mov    %r8w,(%r12,%r14,2)
	jmpq   2b97f <decode_mcu_AC_refine+0x34f>
	mov    -0x40(%rbp),%rax
	jmp    2bb70 <decode_mcu_AC_refine+0x540>
	mov    %r13,%r8
	mov    -0x50(%rbp),%r10
	lea    -0x1a8(%rbp),%rdi
	mov    -0x80(%rbp),%r13
	xor    %r11d,%r11d
	mov    -0x70(%rbp),%r9
	jmpq   2b865 <decode_mcu_AC_refine+0x235>
	add    $0xffffffff,%eax
	movslq %eax,%rcx
	movslq -0x180(%rbp,%rcx,4),%rcx
	movw   $0x0,(%r12,%rcx,2)
	test   %eax,%eax
	jg     2bb5b <decode_mcu_AC_refine+0x52b>
	mov    -0x20(%rbp),%r13
	mov    -0x18(%rbp),%r12
	mov    -0x10(%rbp),%rbx
	mov    -0x28(%rbp),%r14
	mov    -0x30(%rbp),%r15
	xor    %eax,%eax
	leaveq 
	retq   
	mov    $0x1,%eax
	mov    %r12,-0x58(%rbp)
	mov    %rcx,%rdx
	mov    %rax,%rcx
	mov    %r10,%r12
	callq  4410 <jpeg_fill_bit_buffer@plt>
	test   %eax,%eax
	je     2bc5b <decode_mcu_AC_refine+0x62b>
	mov    %r12,%r10
	mov    -0x198(%rbp),%rsi
	movslq -0x190(%rbp),%rcx
	mov    -0x58(%rbp),%r12
	lea    -0x1a8(%rbp),%rdi
	mov    -0x70(%rbp),%r9
	jmpq   2ba77 <decode_mcu_AC_refine+0x447>
	mov    $0x1,%eax
	mov    %r13,%r11
	jmpq   2bae1 <decode_mcu_AC_refine+0x4b1>
	cmp    %ecx,%edx
	jl     2bc68 <decode_mcu_AC_refine+0x638>
	mov    %rcx,%r13
	mov    %rdx,%rcx
	sub    %r13d,%ecx
	mov    %rsi,%rdx
	shr    %cl,%rdx
	lea    -0x1(%r10),%eax
	and    %edx,%eax
	add    %eax,%r10d
	mov    -0x18(%rbp),%r8
	mov    -0x10(%rbp),%r13
	mov    $0x1,%eax
	mov    -0x8(%rbp),%rdx
	jmpq   2b74b <decode_mcu_AC_refine+0x11b>
	test   %r11d,%r11d
	jne    2b822 <decode_mcu_AC_refine+0x1f2>
	mov    -0x40(%rbp),%rdx
	jmpq   2b841 <decode_mcu_AC_refine+0x211>
	mov    %r11,-0x48(%rbp)
	mov    %rcx,%rdx
	mov    %rax,%rcx
	mov    %r8,%r15
	callq  4410 <jpeg_fill_bit_buffer@plt>
	test   %eax,%eax
	jne    2bc83 <decode_mcu_AC_refine+0x653>
	mov    -0x40(%rbp),%rax
	jmpq   2bb70 <decode_mcu_AC_refine+0x540>
	test   %ax,%ax
	jns    2bcb5 <decode_mcu_AC_refine+0x685>
	add    %r10d,%eax
	mov    %ax,(%r12,%r8,2)
	mov    $0x1,%eax
	jmpq   2bad5 <decode_mcu_AC_refine+0x4a5>
	mov    -0x58(%rbp),%r12
	mov    -0x40(%rbp),%rax
	jmpq   2bb70 <decode_mcu_AC_refine+0x540>
	mov    %r9,%r14
	mov    %r10,%r15
	mov    %rcx,%r13
	callq  4410 <jpeg_fill_bit_buffer@plt>
	test   %eax,%eax
	jne    2bcc7 <decode_mcu_AC_refine+0x697>
	mov    -0x40(%rbp),%rax
	jmpq   2bb70 <decode_mcu_AC_refine+0x540>
	mov    %r15,%r8
	mov    -0x198(%rbp),%rsi
	movslq -0x190(%rbp),%rcx
	mov    -0x48(%rbp),%r11
	mov    -0x60(%rbp),%r15
	mov    -0x50(%rbp),%r10
	lea    -0x1a8(%rbp),%rdi
	mov    $0x1,%eax
	mov    -0x70(%rbp),%r9
	jmpq   2bafa <decode_mcu_AC_refine+0x4ca>
	add    %r13d,%eax
	mov    %ax,(%r12,%r8,2)
	mov    $0x1,%eax
	jmpq   2bad5 <decode_mcu_AC_refine+0x4a5>
	mov    %r14,%r9
	mov    %r15,%r10
	mov    -0x198(%rbp),%rsi
	movslq -0x190(%rbp),%rcx
	mov    -0x60(%rbp),%r15
	lea    -0x1a8(%rbp),%rdi
	xor    %r11d,%r11d
	mov    -0x78(%rbp),%r14
	jmpq   2bbeb <decode_mcu_AC_refine+0x5bb>
	data16 nopw %cs:0x0(%rax,%rax,1)
	nopl   (%rax)

002bd00 <start_pass_phuff_decoder>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x40,%rsp
	mov    %rbx,-0x8(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %r15,-0x28(%rbp)
	mov    0x250(%rdi),%rax
	mov    %rax,-0x30(%rbp)
	mov    $0x1,%esi
	xor    %eax,%eax
	movslq 0x20c(%rdi),%rdx
	test   %edx,%edx
	je     2bd3e <start_pass_phuff_decoder+0x3e>
	mov    %rax,%r14
	jmp    2bd41 <start_pass_phuff_decoder+0x41>
	mov    %rsi,%r14
	mov    %r14,-0x38(%rbp)
	test   %r14d,%r14d
	jg     2bd69 <start_pass_phuff_decoder+0x69>
	movslq 0x210(%rdi),%rcx
	cmp    %ecx,%edx
	jle    2bd79 <start_pass_phuff_decoder+0x79>
	mov    %rsi,%rcx
	movslq 0x1b0(%rdi),%rdx
	cmp    $0x1,%edx
	je     2bd86 <start_pass_phuff_decoder+0x86>
	mov    %rsi,%rcx
	jmp    2bd86 <start_pass_phuff_decoder+0x86>
	movslq 0x210(%rdi),%rcx
	test   %ecx,%ecx
	jne    2bd83 <start_pass_phuff_decoder+0x83>
	mov    %rax,%rcx
	jmp    2bd86 <start_pass_phuff_decoder+0x86>
	cmp    $0x3f,%ecx
	jg     2bdb6 <start_pass_phuff_decoder+0xb6>
	mov    %rax,%rcx
	jmp    2bd58 <start_pass_phuff_decoder+0x58>
	mov    %rsi,%rcx
	movslq 0x214(%rdi),%rdx
	test   %edx,%edx
	jne    2bdbb <start_pass_phuff_decoder+0xbb>
	movslq 0x218(%rdi),%rdx
	cmp    $0xd,%edx
	jle    2bda0 <start_pass_phuff_decoder+0xa0>
	mov    %rsi,%rcx
	mov    $0xffffffffffffffff,%rsi
	test   %ecx,%ecx
	jg     2bdcb <start_pass_phuff_decoder+0xcb>
	mov    %rdi,%rbx
	mov    %rax,%rcx
	jmpq   2be91 <start_pass_phuff_decoder+0x191>
	mov    %rsi,%rcx
	jmp    2bd58 <start_pass_phuff_decoder+0x58>
	add    $0xffffffff,%edx
	cmp    0x218(%rdi),%edx
	je     2bd91 <start_pass_phuff_decoder+0x91>
	mov    %rsi,%rcx
	jmp    2bd91 <start_pass_phuff_decoder+0x91>
	mov    (%rdi),%rcx
	movl   $0x10,0x28(%rcx)
	movslq 0x20c(%rdi),%rdx
	mov    (%rdi),%rcx
	mov    %edx,0x2c(%rcx)
	movslq 0x210(%rdi),%rdx
	mov    (%rdi),%rcx
	mov    %edx,0x30(%rcx)
	movslq 0x214(%rdi),%rdx
	mov    (%rdi),%rcx
	mov    %edx,0x34(%rcx)
	movslq 0x218(%rdi),%rdx
	mov    (%rdi),%rcx
	mov    %edx,0x38(%rcx)
	mov    (%rdi),%rcx
	mov    (%rcx),%rcx
	mov    %rsi,%r12
	mov    %rax,%r13
	mov    %rdi,%rbx
	callq  *%rcx
	mov    %r13,%rcx
	mov    %r12,%rsi
	mov    %rcx,%rax
	jmp    2be91 <start_pass_phuff_decoder+0x191>
	movslq %r14d,%r15
	movslq (%r12,%r15,4),%rcx
	test   %ecx,%ecx
	jns    2be33 <start_pass_phuff_decoder+0x133>
	mov    %rax,%rcx
	movslq 0x214(%rbx),%rdx
	cmp    %ecx,%edx
	je     2be6b <start_pass_phuff_decoder+0x16b>
	mov    (%rbx),%rax
	movl   $0x73,0x28(%rax)
	mov    (%rbx),%rax
	mov    %r13d,0x2c(%rax)
	mov    (%rbx),%rax
	mov    %r14d,0x30(%rax)
	mov    (%rbx),%rax
	mov    0x8(%rax),%rax
	mov    %rbx,%rdi
	callq  *%rax
	mov    $0xffffffffffffffff,%rsi
	xor    %eax,%eax
	movslq 0x218(%rbx),%rcx
	mov    %ecx,(%r12,%r15,4)
	add    $0x1,%r14d
	movslq 0x210(%rbx),%rcx
	cmp    %r14d,%ecx
	jge    2be25 <start_pass_phuff_decoder+0x125>
	mov    -0x40(%rbp),%rcx
	add    $0x1,%ecx
	mov    -0x38(%rbp),%r14
	mov    %rcx,-0x40(%rbp)
	movslq 0x1b0(%rbx),%rdx
	cmp    %ecx,%edx
	jg     2bed5 <start_pass_phuff_decoder+0x1d5>
	movslq 0x214(%rbx),%rcx
	test   %ecx,%ecx
	je     2bf3e <start_pass_phuff_decoder+0x23e>
	test   %r14d,%r14d
	jg     2bf61 <start_pass_phuff_decoder+0x261>
	lea    -0x88f(%rip),%rcx        # 2b630 <decode_mcu_AC_refine>
	mov    -0x30(%rbp),%r12
	mov    %rcx,0x8(%r12)
	mov    $0x1,%esi
	mov    %rax,%r13
	jmpq   2bfc8 <start_pass_phuff_decoder+0x2c8>
	movslq %ecx,%rcx
	mov    0x1b8(%rbx,%rcx,8),%rcx
	movslq 0x4(%rcx),%r13
	mov    %r13,%r12
	shl    $0x8,%r12
	add    0xc0(%rbx),%r12
	test   %r14d,%r14d
	jg     2bf32 <start_pass_phuff_decoder+0x232>
	movslq (%r12),%rcx
	test   %ecx,%ecx
	jns    2bf32 <start_pass_phuff_decoder+0x232>
	mov    (%rbx),%rcx
	movl   $0x73,0x28(%rcx)
	mov    (%rbx),%rcx
	mov    %r13d,0x2c(%rcx)
	mov    (%rbx),%rcx
	movl   $0x0,0x30(%rcx)
	mov    (%rbx),%rcx
	mov    0x8(%rcx),%rcx
	mov    %rax,%r15
	mov    %rbx,%rdi
	mov    %rsi,%r14
	callq  *%rcx
	mov    %r15,%rax
	mov    %r14,%rsi
	movslq 0x20c(%rbx),%r14
	jmpq   2be7a <start_pass_phuff_decoder+0x17a>
	test   %r14d,%r14d
	jg     2c019 <start_pass_phuff_decoder+0x319>
	lea    -0xeee(%rip),%rcx        # 2b060 <decode_mcu_AC_first>
	mov    -0x30(%rbp),%r12
	mov    %rcx,0x8(%r12)
	mov    $0x1,%esi
	mov    %rax,%r13
	jmp    2bfc8 <start_pass_phuff_decoder+0x2c8>
	lea    -0xaf8(%rip),%rcx        # 2b470 <decode_mcu_DC_refine>
	mov    -0x30(%rbp),%r12
	mov    %rcx,0x8(%r12)
	mov    $0x1,%esi
	mov    %rax,%r13
	jmp    2bfc8 <start_pass_phuff_decoder+0x2c8>
	test   %r14d,%r14d
	movslq %r13d,%r15
	mov    0x1b8(%rbx,%r15,8),%rdx
	jg     2c033 <start_pass_phuff_decoder+0x333>
	movslq 0x18(%rdx),%r14
	mov    %rax,%rsi
	lea    0x40(%r12,%r14,8),%rcx
	mov    %rbx,%rdi
	mov    %r14,%rdx
	callq  44c0 <jpeg_make_d_derived_tbl@plt>
	mov    0x40(%r12,%r14,8),%rax
	mov    %rax,0x60(%r12)
	xor    %eax,%eax
	mov    -0x38(%rbp),%r14
	mov    $0x1,%esi
	movl   $0x0,0x2c(%r12,%r15,4)
	add    $0x1,%r13d
	movslq 0x1b0(%rbx),%rcx
	cmp    %r13d,%ecx
	jg     2bf7b <start_pass_phuff_decoder+0x27b>
	movl   $0x0,0x20(%r12)
	movq   $0x0,0x18(%r12)
	movl   $0x0,0x10(%r12)
	movl   $0x0,0x28(%r12)
	mov    0x170(%rbx),%eax
	mov    %eax,0x3c(%r12)
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	leaveq 
	retq   
	lea    -0x12f0(%rip),%rcx        # 2ad30 <decode_mcu_DC_first>
	mov    -0x30(%rbp),%r12
	mov    %rcx,0x8(%r12)
	mov    $0x1,%esi
	mov    %rax,%r13
	jmp    2bfc8 <start_pass_phuff_decoder+0x2c8>
	movslq 0x214(%rbx),%rcx
	test   %ecx,%ecx
	jne    2bfbb <start_pass_phuff_decoder+0x2bb>
	movslq 0x14(%rdx),%rdx
	lea    0x40(%r12,%rdx,8),%rcx
	mov    %rbx,%rdi
	callq  44c0 <jpeg_make_d_derived_tbl@plt>
	xor    %eax,%eax
	mov    $0x1,%esi
	jmpq   2bfbb <start_pass_phuff_decoder+0x2bb>
	nop

002c060 <process_restart>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %rdi,-0x8(%rbp)
	mov    0x250(%rdi),%rdx
	mov    %rdx,-0x10(%rbp)
	movslq 0x20(%rdx),%rcx
	mov    %rcx,%rax
	sar    $0x2,%eax
	shr    $0x1d,%eax
	add    %ecx,%eax
	sar    $0x3,%eax
	mov    0x248(%rdi),%rcx
	add    0x24(%rcx),%eax
	mov    %eax,0x24(%rcx)
	movl   $0x0,0x20(%rdx)
	mov    0x248(%rdi),%rax
	mov    0x10(%rax),%rax
	callq  *%rax
	test   %eax,%eax
	jne    2c0b2 <process_restart+0x52>
	xor    %eax,%eax
	leaveq 
	retq   
	xor    %eax,%eax
	mov    -0x10(%rbp),%rdx
	mov    -0x8(%rbp),%rsi
	jmp    2c0cc <process_restart+0x6c>
	movslq %eax,%rcx
	movl   $0x0,0x2c(%rdx,%rcx,4)
	add    $0x1,%eax
	movslq 0x1b0(%rsi),%rcx
	cmp    %eax,%ecx
	jg     2c0be <process_restart+0x5e>
	movl   $0x0,0x28(%rdx)
	mov    0x170(%rsi),%eax
	mov    %eax,0x3c(%rdx)
	mov    $0x1,%eax
	movslq 0x21c(%rsi),%rcx
	test   %ecx,%ecx
	je     2c0f9 <process_restart+0x99>
	leaveq 
	retq   
	movl   $0x0,0x10(%rdx)
	leaveq 
	retq   
	nopw   %cs:0x0(%rax,%rax,1)
	nopl   0x0(%rax)

002c110 <jinit_d_post_controller>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %r15,-0x20(%rbp)
	mov    %rsi,-0x18(%rbp)
	mov    0x8(%rdi),%rax
	mov    (%rax),%rax
	mov    $0x1,%esi
	mov    $0x30,%edx
	mov    %rdi,%r15
	callq  *%rax
	mov    %rax,0x238(%r15)
	lea    0x38c(%rip),%rcx        # 2c4d0 <start_pass_dpost>
	mov    %rcx,(%rax)
	movq   $0x0,0x10(%rax)
	movq   $0x0,0x18(%rax)
	movslq 0x6c(%r15),%rcx
	test   %ecx,%ecx
	jne    2c165 <jinit_d_post_controller+0x55>
	mov    -0x20(%rbp),%r15
	leaveq 
	retq   
	mov    0x19c(%r15),%esi
	mov    %esi,0x20(%rax)
	mov    -0x18(%rbp),%rcx
	test   %ecx,%ecx
	jne    2c1a9 <jinit_d_post_controller+0x99>
	mov    0x90(%r15),%edx
	imul   0x88(%r15),%edx
	mov    0x8(%r15),%rcx
	mov    0x10(%rcx),%r8
	mov    %rsi,%rcx
	mov    %r15,%rdi
	mov    %rax,%r15
	mov    $0x1,%esi
	callq  *%r8
	mov    %rax,0x18(%r15)
	mov    -0x20(%rbp),%r15
	leaveq 
	retq   
	mov    0x8c(%r15),%edi
	mov    0x90(%r15),%ecx
	imul   0x88(%r15),%ecx
	mov    0x8(%r15),%rdx
	mov    0x20(%rdx),%rdx
	mov    %r12,-0x8(%rbp)
	mov    %r13,-0x10(%rbp)
	mov    %r14,-0x18(%rbp)
	mov    %rax,%r12
	mov    %rdx,%r13
	mov    %rcx,%r14
	callq  42b0 <jround_up@plt>
	mov    %r14,%rcx
	mov    %r15,%rdi
	mov    %rax,%r8
	xor    %edx,%edx
	mov    0x20(%r12),%r9d
	mov    $0x1,%esi
	callq  *%r13
	mov    %rax,0x10(%r12)
	mov    -0x18(%rbp),%r14
	mov    -0x10(%rbp),%r13
	mov    -0x8(%rbp),%r12
	mov    -0x20(%rbp),%r15
	leaveq 
	retq   

002c210 <post_process_1pass>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %r15,-0x20(%rbp)
	mov    %r14,-0x18(%rbp)
	mov    %r12,-0x8(%rbp)
	mov    %r13,-0x10(%rbp)
	mov    0x10(%rbp),%eax
	mov    (%r9),%r10d
	sub    %r10d,%eax
	mov    0x238(%rdi),%r13
	mov    0x20(%r13),%r10d
	cmp    %eax,%r10d
	jae    2c244 <post_process_1pass+0x34>
	mov    %r10,%rax
	movl   $0x0,-0x24(%rbp)
	mov    0x260(%rdi),%r10
	mov    0x8(%r10),%r10
	mov    0x18(%r13),%r11
	mov    %eax,(%rsp)
	mov    %r9,%r12
	mov    %r8,%r14
	mov    %r11,%r8
	mov    %rdi,%r15
	lea    -0x24(%rbp),%r9
	callq  *%r10
	mov    (%r12),%eax
	lea    (%r14,%rax,8),%rdx
	mov    0x270(%r15),%rax
	mov    0x8(%rax),%rax
	mov    0x18(%r13),%rsi
	mov    %r15,%rdi
	movslq -0x24(%rbp),%rcx
	callq  *%rax
	mov    (%r12),%eax
	add    -0x24(%rbp),%eax
	mov    %eax,(%r12)
	mov    -0x10(%rbp),%r13
	mov    -0x8(%rbp),%r12
	mov    -0x18(%rbp),%r14
	mov    -0x20(%rbp),%r15
	leaveq 
	retq   
	nopl   (%rax)

002c2b0 <post_process_prepass>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x40,%rsp
	mov    %r9,-0x30(%rbp)
	mov    %r15,-0x28(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    0x238(%rdi),%r13
	lea    0x28(%r13),%r9
	mov    (%r9),%eax
	test   %eax,%eax
	je     2c2df <post_process_prepass+0x2f>
	mov    %rdi,%r14
	jmp    2c33b <post_process_prepass+0x8b>
	mov    0x8(%rdi),%rax
	mov    0x38(%rax),%rax
	mov    0x10(%r13),%r10
	mov    0x24(%r13),%r14d
	mov    0x20(%r13),%r15d
	mov    %rdi,%r11
	mov    %r9,-0x38(%rbp)
	mov    %rbx,-0x8(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    %rdx,%rbx
	mov    %r14,%rdx
	mov    %rdi,%r14
	mov    %r11,%rdi
	mov    %rcx,%r12
	mov    %r15,%rcx
	mov    %rsi,%r15
	mov    %r10,%rsi
	mov    $0x1,%r8d
	callq  *%rax
	mov    %rax,0x18(%r13)
	mov    %r12,%rcx
	mov    %rbx,%rdx
	mov    %r15,%rsi
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	mov    -0x38(%rbp),%r9
	mov    0x20(%r13),%edi
	mov    0x260(%r14),%rax
	mov    0x8(%rax),%rax
	mov    0x18(%r13),%r8
	mov    0x28(%r13),%r15d
	mov    %edi,(%rsp)
	mov    %r14,%rdi
	callq  *%rax
	mov    0x28(%r13),%eax
	cmp    %r15d,%eax
	jbe    2c394 <post_process_prepass+0xe4>
	sub    %r15d,%eax
	shl    $0x3,%r15
	add    0x18(%r13),%r15
	mov    0x270(%r14),%rcx
	mov    0x8(%rcx),%r8
	mov    %r15,%rsi
	mov    %r14,%rdi
	mov    %rax,%r14
	xor    %edx,%edx
	mov    %r14,%rcx
	callq  *%r8
	mov    -0x30(%rbp),%rax
	add    (%rax),%r14d
	mov    %r14d,(%rax)
	mov    0x20(%r13),%eax
	cmp    0x28(%r13),%eax
	jbe    2c3ac <post_process_prepass+0xfc>
	mov    -0x18(%rbp),%r13
	mov    -0x20(%rbp),%r14
	mov    -0x28(%rbp),%r15
	leaveq 
	retq   
	add    0x24(%r13),%eax
	mov    %eax,0x24(%r13)
	movl   $0x0,0x28(%r13)
	mov    -0x18(%rbp),%r13
	mov    -0x20(%rbp),%r14
	mov    -0x28(%rbp),%r15
	leaveq 
	retq   
	nopw   0x0(%rax,%rax,1)

002c3d0 <post_process_2pass>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %r15,-0x20(%rbp)
	mov    %r13,-0x10(%rbp)
	mov    %r14,-0x18(%rbp)
	mov    0x238(%rdi),%r14
	mov    0x28(%r14),%eax
	test   %eax,%eax
	je     2c3f8 <post_process_2pass+0x28>
	mov    %r9,%r15
	jmp    2c432 <post_process_2pass+0x62>
	mov    0x8(%rdi),%rax
	mov    0x38(%rax),%rax
	mov    0x10(%r14),%rsi
	mov    0x24(%r14),%edx
	mov    0x20(%r14),%ecx
	mov    %rdi,%r11
	mov    %r12,-0x8(%rbp)
	mov    %r8,%r12
	mov    %rdi,%r13
	mov    %r11,%rdi
	mov    %r9,%r15
	xor    %r8d,%r8d
	callq  *%rax
	mov    %rax,0x18(%r14)
	mov    %r13,%rdi
	mov    %r12,%r8
	mov    -0x8(%rbp),%r12
	mov    (%r15),%edx
	mov    0x10(%rbp),%eax
	sub    %edx,%eax
	mov    0x28(%r14),%esi
	mov    0x20(%r14),%r13d
	sub    %esi,%r13d
	cmp    %r13d,%eax
	jae    2c44d <post_process_2pass+0x7d>
	mov    %rax,%r13
	mov    0x8c(%rdi),%eax
	mov    0x24(%r14),%ecx
	sub    %ecx,%eax
	cmp    %eax,%r13d
	jbe    2c461 <post_process_2pass+0x91>
	mov    %rax,%r13
	shl    $0x3,%rsi
	add    0x18(%r14),%rsi
	lea    (%r8,%rdx,8),%rdx
	mov    0x270(%rdi),%rax
	mov    0x8(%rax),%rax
	mov    %r13,%rcx
	callq  *%rax
	mov    %r13,%rax
	add    (%r15),%eax
	mov    %eax,(%r15)
	add    0x28(%r14),%r13d
	mov    %r13d,0x28(%r14)
	mov    0x20(%r14),%eax
	cmp    %r13d,%eax
	jbe    2c4a5 <post_process_2pass+0xd5>
	mov    -0x18(%rbp),%r14
	mov    -0x10(%rbp),%r13
	mov    -0x20(%rbp),%r15
	leaveq 
	retq   
	add    0x24(%r14),%eax
	mov    %eax,0x24(%r14)
	movl   $0x0,0x28(%r14)
	mov    -0x18(%rbp),%r14
	mov    -0x10(%rbp),%r13
	mov    -0x20(%rbp),%r15
	leaveq 
	retq   
	data16 nopw %cs:0x0(%rax,%rax,1)
	xchg   %ax,%ax

002c4d0 <start_pass_dpost>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    0x238(%rdi),%rax
	cmp    $0x1,%esi
	jbe    2c524 <start_pass_dpost+0x54>
	cmp    $0x2,%esi
	je     2c558 <start_pass_dpost+0x88>
	cmp    $0x3,%esi
	jne    2c528 <start_pass_dpost+0x58>
	mov    0x10(%rax),%rcx
	test   %rcx,%rcx
	jne    2c517 <start_pass_dpost+0x47>
	mov    (%rdi),%rcx
	movl   $0x4,0x28(%rcx)
	mov    (%rdi),%rcx
	mov    (%rcx),%rcx
	mov    %r15,-0x8(%rbp)
	mov    %rax,%r15
	callq  *%rcx
	mov    %r15,%rax
	mov    -0x8(%rbp),%r15
	lea    -0x26e(%rip),%rcx        # 2c2b0 <post_process_prepass>
	mov    %rcx,0x8(%rax)
	jmp    2c548 <start_pass_dpost+0x78>
	test   %esi,%esi
	je     2c58e <start_pass_dpost+0xbe>
	mov    (%rdi),%rcx
	movl   $0x4,0x28(%rcx)
	mov    (%rdi),%rcx
	mov    (%rcx),%rcx
	mov    %r15,-0x8(%rbp)
	mov    %rax,%r15
	callq  *%rcx
	mov    %r15,%rax
	mov    -0x8(%rbp),%r15
	movl   $0x0,0x28(%rax)
	movl   $0x0,0x24(%rax)
	leaveq 
	retq   
	mov    0x10(%rax),%rcx
	test   %rcx,%rcx
	jne    2c581 <start_pass_dpost+0xb1>
	mov    (%rdi),%rcx
	movl   $0x4,0x28(%rcx)
	mov    (%rdi),%rcx
	mov    (%rcx),%rcx
	mov    %r15,-0x8(%rbp)
	mov    %rax,%r15
	callq  *%rcx
	mov    %r15,%rax
	mov    -0x8(%rbp),%r15
	lea    -0x1b8(%rip),%rcx        # 2c3d0 <post_process_2pass>
	mov    %rcx,0x8(%rax)
	jmp    2c548 <start_pass_dpost+0x78>
	movslq 0x6c(%rdi),%rcx
	test   %ecx,%ecx
	jne    2c5a7 <start_pass_dpost+0xd7>
	mov    0x260(%rdi),%rcx
	mov    0x8(%rcx),%rcx
	mov    %rcx,0x8(%rax)
	jmp    2c548 <start_pass_dpost+0x78>
	lea    -0x39e(%rip),%rcx        # 2c210 <post_process_1pass>
	mov    %rcx,0x8(%rax)
	mov    0x18(%rax),%rcx
	test   %rcx,%rcx
	jne    2c548 <start_pass_dpost+0x78>
	mov    0x8(%rdi),%rcx
	mov    0x38(%rcx),%r9
	mov    0x10(%rax),%rsi
	xor    %edx,%edx
	mov    0x20(%rax),%ecx
	mov    $0x1,%r8d
	mov    %r15,-0x8(%rbp)
	mov    %rax,%r15
	callq  *%r9
	mov    %rax,0x18(%r15)
	mov    %r15,%rax
	mov    -0x8(%rbp),%r15
	jmpq   2c548 <start_pass_dpost+0x78>
	nopl   0x0(%rax)

002c5f0 <jinit_upsampler>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x70,%rsp
	mov    %r14,-0x20(%rbp)
	mov    %r15,-0x28(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    %rbx,-0x8(%rbp)
	mov    $0x1,%ecx
	mov    %rcx,-0x30(%rbp)
	mov    0x220(%rdi),%rax
	movslq 0x6c(%rax),%rax
	test   %eax,%eax
	jne    2c6de <jinit_upsampler+0xee>
	mov    0x8(%rdi),%rax
	mov    (%rax),%rax
	mov    %rcx,%r12
	mov    $0x100,%edx
	mov    %rdi,%rbx
	mov    %r12,%rsi
	callq  *%rax
	mov    %rax,0x260(%rbx)
	lea    0x403(%rip),%rcx        # 2ca50 <start_pass_upsample>
	mov    %rcx,(%rax)
	lea    0x429(%rip),%rcx        # 2ca80 <sep_upsample>
	mov    %rcx,0x8(%rax)
	mov    %r12,%rcx
	mov    %rax,%r12
	movl   $0x0,0x10(%r12)
	movslq 0x188(%rbx),%rax
	test   %eax,%eax
	je     2c690 <jinit_upsampler+0xa0>
	mov    (%rbx),%rax
	movl   $0x19,0x28(%rax)
	mov    (%rbx),%rax
	mov    (%rax),%rax
	mov    %rcx,%r13
	mov    %rbx,%rdi
	callq  *%rax
	mov    %r13,%rcx
	xor    %r13d,%r13d
	mov    %r13,-0x38(%rbp)
	movslq 0x64(%rbx),%rax
	test   %eax,%eax
	jne    2c6ea <jinit_upsampler+0xfa>
	mov    %r13,%rcx
	mov    %rcx,-0x70(%rbp)
	mov    0x130(%rbx),%r14
	lea    0x112ec(%rip),%rax        # 3d9a0 <jsimd_h2v2_fancy_upsample>
	mov    %rax,-0x58(%rbp)
	lea    0x11301(%rip),%rax        # 3d9c0 <jsimd_h2v1_fancy_upsample>
	mov    %rax,-0x48(%rbp)
	lea    0x11236(%rip),%rsi        # 3d900 <jsimd_h2v1_upsample>
	mov    %rsi,-0x50(%rbp)
	lea    0x1120b(%rip),%rax        # 3d8e0 <jsimd_h2v2_upsample>
	mov    %rax,-0x60(%rbp)
	jmpq   2c765 <jinit_upsampler+0x175>
	mov    %rdi,%rbx
	mov    0x260(%rbx),%r12
	jmp    2c66a <jinit_upsampler+0x7a>
	movslq 0x1a0(%rbx),%rax
	cmp    $0x1,%eax
	jg     2c6a2 <jinit_upsampler+0xb2>
	mov    %r13,%rcx
	jmp    2c6a2 <jinit_upsampler+0xb2>
	movslq 0x8(%r14),%r11
	movslq 0x24(%r14),%rdi
	movslq 0x1a0(%rbx),%r8
	movslq 0x24(%r14),%rax
	imul   0xc(%r14),%eax
	cltd   
	movslq 0x1a0(%rbx),%r15
	movslq 0x198(%rbx),%r10
	movslq 0x19c(%rbx),%r9
	idiv   %r15d
	movslq %r13d,%r15
	mov    %eax,0xc0(%r12,%r15,4)
	movslq 0x30(%r14),%rdx
	test   %edx,%edx
	jne    2c784 <jinit_upsampler+0x194>
	lea    0x4ba(%rip),%rax        # 2cc00 <noop_upsample>
	mov    %rax,0x68(%r12,%r15,8)
	pushq  -0x38(%rbp)
	popq   -0x40(%rbp)
	mov    -0x40(%rbp),%rax
	test   %eax,%eax
	jg     2c7f9 <jinit_upsampler+0x209>
	add    $0x1,%r13d
	add    $0x60,%r14
	movslq 0x38(%rbx),%rax
	cmp    %r13d,%eax
	jg     2c6fb <jinit_upsampler+0x10b>
	mov    -0x8(%rbp),%rbx
	mov    -0x10(%rbp),%r12
	mov    -0x18(%rbp),%r13
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	leaveq 
	retq   
	imul   %r11d,%edi
	mov    %rdi,%rdx
	mov    %rax,%rdi
	mov    %rdx,%rax
	cltd   
	idiv   %r8d
	cmp    %r10d,%eax
	je     2c857 <jinit_upsampler+0x267>
	lea    (%rax,%rax,1),%edx
	cmp    %edx,%r10d
	je     2c877 <jinit_upsampler+0x287>
	cmp    %r10d,%eax
	je     2c8be <jinit_upsampler+0x2ce>
	cmp    %edx,%r10d
	je     2c8f3 <jinit_upsampler+0x303>
	mov    %rax,%r8
	mov    %r10,%rax
	cltd   
	mov    %rax,%r10
	idiv   %r8d
	test   %edx,%edx
	je     2c933 <jinit_upsampler+0x343>
	mov    (%rbx),%rax
	movl   $0x26,0x28(%rax)
	mov    (%rbx),%rax
	mov    (%rax),%rax
	mov    %rbx,%rdi
	callq  *%rax
	mov    -0x50(%rbp),%rsi
	mov    -0x70(%rbp),%rcx
	pushq  -0x30(%rbp)
	popq   -0x40(%rbp)
	jmpq   2c751 <jinit_upsampler+0x161>
	mov    0x220(%rbx),%rax
	movslq 0x6c(%rax),%rax
	test   %eax,%eax
	jne    2c75d <jinit_upsampler+0x16d>
	mov    0x88(%rbx),%edi
	movslq 0x198(%rbx),%rsi
	mov    0x8(%rbx),%rax
	mov    0x10(%rax),%rax
	mov    %r14,-0x68(%rbp)
	mov    %rax,%r14
	callq  42b0 <jround_up@plt>
	mov    %rax,%rdx
	mov    0x19c(%rbx),%ecx
	mov    %rbx,%rdi
	mov    $0x1,%esi
	callq  *%r14
	mov    %rax,0x18(%r12,%r15,8)
	mov    -0x68(%rbp),%r14
	mov    -0x50(%rbp),%rsi
	mov    -0x70(%rbp),%rcx
	jmpq   2c75d <jinit_upsampler+0x16d>
	cmp    %r9d,%edi
	jne    2c79e <jinit_upsampler+0x1ae>
	lea    0x389(%rip),%rax        # 2cbf0 <fullsize_upsample>
	mov    %rax,0x68(%r12,%r15,8)
	pushq  -0x38(%rbp)
	popq   -0x40(%rbp)
	jmpq   2c751 <jinit_upsampler+0x161>
	cmp    %r9d,%edi
	jne    2c7aa <jinit_upsampler+0x1ba>
	test   %ecx,%ecx
	jg     2c978 <jinit_upsampler+0x388>
	mov    %r14,-0x68(%rbp)
	mov    %rsi,%r14
	callq  3d8b0 <jsimd_can_h2v1_upsample>
	test   %eax,%eax
	jne    2c9ad <jinit_upsampler+0x3bd>
	lea    0x45d(%rip),%rax        # 2cd00 <h2v1_upsample>
	mov    %rax,0x68(%r12,%r15,8)
	mov    %r14,%rsi
	mov    -0x68(%rbp),%r14
	mov    -0x70(%rbp),%rcx
	pushq  -0x30(%rbp)
	popq   -0x40(%rbp)
	jmpq   2c751 <jinit_upsampler+0x161>
	lea    (%rdi,%rdi,1),%r8d
	cmp    %r8d,%r9d
	jne    2c7b3 <jinit_upsampler+0x1c3>
	test   %ecx,%ecx
	jle    2c7b3 <jinit_upsampler+0x1c3>
	lea    0x5e6(%rip),%rax        # 2cec0 <h1v2_fancy_upsample>
	mov    %rax,0x68(%r12,%r15,8)
	movl   $0x1,0x10(%r12)
	pushq  -0x30(%rbp)
	popq   -0x40(%rbp)
	jmpq   2c751 <jinit_upsampler+0x161>
	lea    (%rdi,%rdi,1),%edx
	cmp    %edx,%r9d
	jne    2c7bc <jinit_upsampler+0x1cc>
	test   %ecx,%ecx
	jg     2c9c8 <jinit_upsampler+0x3d8>
	callq  3d880 <jsimd_can_h2v2_upsample>
	test   %eax,%eax
	jne    2c9ec <jinit_upsampler+0x3fc>
	lea    0x435(%rip),%rax        # 2cd50 <h2v2_upsample>
	mov    %rax,0x68(%r12,%r15,8)
	mov    -0x50(%rbp),%rsi
	mov    -0x70(%rbp),%rcx
	pushq  -0x30(%rbp)
	popq   -0x40(%rbp)
	jmpq   2c751 <jinit_upsampler+0x161>
	mov    %r9,%rax
	cltd   
	mov    %rax,%r9
	idiv   %edi
	test   %edx,%edx
	jne    2c7d1 <jinit_upsampler+0x1e1>
	lea    0x2c5(%rip),%rax        # 2cc10 <int_upsample>
	mov    %rax,0x68(%r12,%r15,8)
	mov    %r10,%rax
	cltd   
	idiv   %r8d
	mov    %al,0xe8(%r12,%r15,1)
	mov    %r9,%rax
	cltd   
	idiv   %edi
	mov    %al,0xf2(%r12,%r15,1)
	pushq  -0x30(%rbp)
	popq   -0x40(%rbp)
	jmpq   2c751 <jinit_upsampler+0x161>
	mov    0x28(%r14),%eax
	cmp    $0x2,%eax
	jbe    2c888 <jinit_upsampler+0x298>
	callq  3d960 <jsimd_can_h2v1_fancy_upsample>
	test   %eax,%eax
	jne    2ca08 <jinit_upsampler+0x418>
	lea    0x46b(%rip),%rax        # 2ce00 <h2v1_fancy_upsample>
	mov    %rax,0x68(%r12,%r15,8)
	mov    -0x50(%rbp),%rsi
	mov    -0x70(%rbp),%rcx
	pushq  -0x30(%rbp)
	popq   -0x40(%rbp)
	jmpq   2c751 <jinit_upsampler+0x161>
	mov    %r14,0x68(%r12,%r15,8)
	mov    %r14,%rsi
	mov    -0x68(%rbp),%r14
	mov    -0x70(%rbp),%rcx
	pushq  -0x30(%rbp)
	popq   -0x40(%rbp)
	jmpq   2c751 <jinit_upsampler+0x161>
	mov    0x28(%r14),%eax
	cmp    $0x2,%eax
	jbe    2c907 <jinit_upsampler+0x317>
	callq  3d920 <jsimd_can_h2v2_fancy_upsample>
	test   %eax,%eax
	jne    2ca24 <jinit_upsampler+0x434>
	lea    0x5ab(%rip),%rax        # 2cf90 <h2v2_fancy_upsample>
	mov    %rax,0x68(%r12,%r15,8)
	jmp    2ca2d <jinit_upsampler+0x43d>
	mov    -0x60(%rbp),%rax
	mov    %rax,0x68(%r12,%r15,8)
	mov    -0x50(%rbp),%rsi
	mov    -0x70(%rbp),%rcx
	pushq  -0x30(%rbp)
	popq   -0x40(%rbp)
	jmpq   2c751 <jinit_upsampler+0x161>
	mov    -0x48(%rbp),%rax
	mov    %rax,0x68(%r12,%r15,8)
	mov    -0x50(%rbp),%rsi
	mov    -0x70(%rbp),%rcx
	pushq  -0x30(%rbp)
	popq   -0x40(%rbp)
	jmpq   2c751 <jinit_upsampler+0x161>
	mov    -0x58(%rbp),%rax
	mov    %rax,0x68(%r12,%r15,8)
	movl   $0x1,0x10(%r12)
	mov    -0x50(%rbp),%rsi
	mov    -0x70(%rbp),%rcx
	pushq  -0x30(%rbp)
	popq   -0x40(%rbp)
	jmpq   2c751 <jinit_upsampler+0x161>
	nopl   0x0(%rax)

002ca50 <start_pass_upsample>:
	push   %rbp
	mov    %rsp,%rbp
	movslq 0x19c(%rdi),%rax
	mov    0x260(%rdi),%rcx
	mov    %eax,0xb8(%rcx)
	mov    0x8c(%rdi),%eax
	mov    %eax,0xbc(%rcx)
	leaveq 
	retq   
	nopw   %cs:0x0(%rax,%rax,1)

002ca80 <sep_upsample>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x40,%rsp
	mov    %rsi,-0x40(%rbp)
	mov    %r15,-0x28(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %rbx,-0x8(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    0x260(%rdi),%r13
	movslq 0x19c(%rdi),%rax
	cmp    0xb8(%r13),%eax
	jle    2cb5c <sep_upsample+0xdc>
	mov    %rdx,%rbx
	mov    %rdi,%r12
	mov    %r9,%r15
	movslq 0xb8(%r13),%rdx
	movslq 0x19c(%r12),%r14
	sub    %edx,%r14d
	mov    0xbc(%r13),%eax
	cmp    %r14d,%eax
	jae    2cae5 <sep_upsample+0x65>
	mov    %rax,%r14
	mov    (%r15),%ecx
	mov    0x10(%rbp),%eax
	sub    %ecx,%eax
	cmp    %eax,%r14d
	jbe    2caf5 <sep_upsample+0x75>
	mov    %rax,%r14
	lea    (%r8,%rcx,8),%rcx
	mov    0x268(%r12),%rax
	mov    0x8(%rax),%rax
	lea    0x18(%r13),%rsi
	mov    %r12,%rdi
	mov    %r14,%r8
	callq  *%rax
	mov    %r14,%rax
	add    (%r15),%eax
	mov    %eax,(%r15)
	mov    0xbc(%r13),%eax
	sub    %r14d,%eax
	mov    %eax,0xbc(%r13)
	add    0xb8(%r13),%r14d
	mov    %r14d,0xb8(%r13)
	movslq 0x19c(%r12),%rax
	cmp    %r14d,%eax
	jle    2cb76 <sep_upsample+0xf6>
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	mov    -0x20(%rbp),%r14
	mov    -0x28(%rbp),%r15
	leaveq 
	retq   
	mov    0x130(%rdi),%r15
	xor    %r14d,%r14d
	mov    %r9,-0x38(%rbp)
	mov    %r8,-0x30(%rbp)
	mov    %rdx,%rbx
	mov    %rdi,%r12
	jmp    2cbc9 <sep_upsample+0x149>
	mov    (%rbx),%eax
	add    $0x1,%eax
	mov    %eax,(%rbx)
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	mov    -0x20(%rbp),%r14
	mov    -0x28(%rbp),%r15
	leaveq 
	retq   
	movslq %r14d,%rcx
	mov    0xc0(%r13,%rcx,4),%eax
	imul   (%rbx),%eax
	mov    %eax,%edx
	shl    $0x3,%rdx
	add    (%rsi,%rcx,8),%rdx
	mov    0x68(%r13,%rcx,8),%rax
	lea    0x18(%r13,%rcx,8),%rcx
	mov    %r12,%rdi
	mov    %r15,%rsi
	callq  *%rax
	add    $0x1,%r14d
	add    $0x60,%r15
	mov    -0x40(%rbp),%rsi
	movslq 0x38(%r12),%rax
	cmp    %r14d,%eax
	jg     2cb93 <sep_upsample+0x113>
	movl   $0x0,0xb8(%r13)
	mov    -0x30(%rbp),%r8
	mov    -0x38(%rbp),%r15
	jmpq   2cac4 <sep_upsample+0x44>
	nopl   0x0(%rax,%rax,1)

002cbf0 <fullsize_upsample>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rdx,(%rcx)
	leaveq 
	retq   
	nopl   0x0(%rax)

002cc00 <noop_upsample>:
	push   %rbp
	mov    %rsp,%rbp
	movq   $0x0,(%rcx)
	leaveq 
	retq   
	nopl   (%rax)

002cc10 <int_upsample>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x40,%rsp
	mov    %rbx,-0x8(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %r15,-0x28(%rbp)
	mov    (%rcx),%rcx
	mov    %rcx,-0x40(%rbp)
	movslq 0x4(%rsi),%rax
	add    0x260(%rdi),%rax
	movzbl 0xe8(%rax),%r9d
	mov    %r9,-0x30(%rbp)
	movzbl 0xf2(%rax),%r12d
	lea    -0x1(%r12),%r8d
	mov    %r8,-0x38(%rbp)
	mov    %rdx,%rbx
	mov    %rdi,%r14
	mov    %rcx,%rdi
	xor    %r13d,%r13d
	mov    %r13,%r15
	jmp    2ccb2 <int_upsample+0xa2>
	mov    %r10b,(%rax)
	add    $0x1,%rax
	add    $0xffffffff,%ecx
	test   %ecx,%ecx
	jg     2cc6c <int_upsample+0x5c>
	add    $0x1,%rsi
	cmp    %rdx,%rax
	jb     2ccd4 <int_upsample+0xc4>
	cmp    $0x1,%r12b
	jbe    2ccab <int_upsample+0x9b>
	lea    0x1(%r15),%ecx
	mov    0x88(%r14),%r9d
	mov    %rdi,%rdx
	mov    %r15,%rsi
	callq  43f0 <jcopy_sample_rows@plt>
	mov    -0x38(%rbp),%r8
	mov    -0x30(%rbp),%r9
	mov    -0x40(%rbp),%rdi
	add    %r12d,%r15d
	add    $0x1,%r13d
	movslq 0x19c(%r14),%rax
	cmp    %r15d,%eax
	jg     2ccdd <int_upsample+0xcd>
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	leaveq 
	retq   
	movzbl (%rsi),%r10d
	mov    %r9,%rcx
	jmp    2cc76 <int_upsample+0x66>
	movslq %r13d,%rax
	mov    (%rbx,%rax,8),%rsi
	movslq %r15d,%rax
	mov    (%rdi,%rax,8),%rax
	mov    0x88(%r14),%ecx
	lea    (%rax,%rcx,1),%rdx
	jmp    2cc7e <int_upsample+0x6e>
	nopl   0x0(%rax,%rax,1)

002cd00 <h2v1_upsample>:
	push   %rbp
	mov    %rsp,%rbp
	mov    (%rcx),%r8
	xor    %esi,%esi
	jmp    2cd26 <h2v1_upsample+0x26>
	movzbl (%rax),%r10d
	mov    %r10b,(%rcx)
	mov    %r10b,0x1(%rcx)
	add    $0x1,%rax
	add    $0x2,%rcx
	cmp    %r9,%rcx
	jb     2cd0b <h2v1_upsample+0xb>
	add    $0x1,%esi
	movslq 0x19c(%rdi),%rax
	cmp    %esi,%eax
	jg     2cd33 <h2v1_upsample+0x33>
	leaveq 
	retq   
	movslq %esi,%rcx
	mov    (%rdx,%rcx,8),%rax
	mov    (%r8,%rcx,8),%rcx
	mov    0x88(%rdi),%r9d
	add    %rcx,%r9
	jmp    2cd1e <h2v1_upsample+0x1e>
	nopw   0x0(%rax,%rax,1)

002cd50 <h2v2_upsample>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %rbx,-0x8(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %r15,-0x28(%rbp)
	mov    (%rcx),%r13
	mov    %rdi,%r12
	mov    %rdx,%r14
	mov    $0x1,%r8d
	xor    %ebx,%ebx
	mov    %rbx,%r15
	jmp    2cdbe <h2v2_upsample+0x6e>
	movzbl (%rax),%edx
	mov    %dl,(%rcx)
	mov    %dl,0x1(%rcx)
	add    $0x1,%rax
	add    $0x2,%rcx
	cmp    %rsi,%rcx
	jb     2cd82 <h2v2_upsample+0x32>
	lea    0x1(%r15),%ecx
	mov    0x88(%r12),%r9d
	mov    %r13,%rdx
	mov    %r13,%rdi
	mov    %r15,%rsi
	callq  43f0 <jcopy_sample_rows@plt>
	add    $0x2,%r15d
	add    $0x1,%ebx
	mov    $0x1,%r8d
	movslq 0x19c(%r12),%rax
	cmp    %r15d,%eax
	jg     2cde1 <h2v2_upsample+0x91>
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	leaveq 
	retq   
	movslq %ebx,%rax
	mov    (%r14,%rax,8),%rax
	movslq %r15d,%rcx
	mov    0x0(%r13,%rcx,8),%rcx
	mov    0x88(%r12),%edx
	lea    (%rcx,%rdx,1),%rsi
	jmp    2cd92 <h2v2_upsample+0x42>
	xchg   %ax,%ax

002ce00 <h2v1_fancy_upsample>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %r15,-0x8(%rbp)
	mov    (%rcx),%r15
	xor    %r10d,%r10d
	jmp    2ce6b <h2v1_fancy_upsample+0x6b>
	movzbl -0x1(%rcx),%r9d
	movzbl (%rcx),%r11d
	lea    (%r11,%r11,2),%r11d
	lea    0x1(%r9,%r11,1),%r9d
	shr    $0x2,%r9d
	mov    %r9b,(%r8)
	add    $0x1,%rcx
	movzbl (%rcx),%r9d
	lea    0x2(%r9,%r11,1),%r9d
	shr    $0x2,%r9d
	mov    %r9b,0x1(%r8)
	add    $0x2,%r8
	add    $0xffffffff,%eax
	test   %eax,%eax
	jne    2ce14 <h2v1_fancy_upsample+0x14>
	movzbl -0x1(%rcx),%r9d
	movzbl (%rcx),%ecx
	lea    (%rcx,%rcx,2),%eax
	lea    0x1(%r9,%rax,1),%eax
	shr    $0x2,%eax
	mov    %al,(%r8)
	mov    %cl,0x1(%r8)
	add    $0x1,%r10d
	movslq 0x19c(%rdi),%rax
	cmp    %r10d,%eax
	jg     2ce7d <h2v1_fancy_upsample+0x7d>
	mov    -0x8(%rbp),%r15
	leaveq 
	retq   
	movslq %r10d,%rcx
	mov    (%rdx,%rcx,8),%rax
	movzbl (%rax),%r11d
	mov    (%r15,%rcx,8),%r9
	mov    %r11b,(%r9)
	lea    0x1(%rax),%rcx
	movzbl (%rcx),%r8d
	lea    (%r11,%r11,2),%eax
	lea    0x2(%r8,%rax,1),%eax
	shr    $0x2,%eax
	mov    %al,0x1(%r9)
	mov    0x28(%rsi),%eax
	add    $0xfffffffe,%eax
	lea    0x2(%r9),%r8
	jmp    2ce49 <h2v1_fancy_upsample+0x49>
	data16 nopw %cs:0x0(%rax,%rax,1)
	xchg   %ax,%ax

002cec0 <h1v2_fancy_upsample>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x40,%rsp
	mov    %rbx,-0x8(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %r15,-0x28(%rbp)
	mov    %rdi,-0x30(%rbp)
	mov    (%rcx),%r12
	xor    %r10d,%r10d
	mov    %r10,%rax
	mov    %rax,%r9
	jmp    2cf32 <h1v2_fancy_upsample+0x72>
	movzbl (%rax),%r11d
	movzbl (%rcx),%ebx
	lea    (%rbx,%rbx,2),%ebx
	lea    0x1(%r11,%rbx,1),%ebx
	shr    $0x2,%ebx
	mov    %bl,(%rdi)
	add    $0x1,%rax
	add    $0x1,%rcx
	add    $0x1,%rdi
	add    $0x1,%r8d
	mov    0x28(%rsi),%ebx
	cmp    %r8d,%ebx
	ja     2ceee <h1v2_fancy_upsample+0x2e>
	add    $0x1,%r9d
	mov    -0x40(%rbp),%rax
	lea    0x1(%rax),%ebx
	cmp    $0x1,%ebx
	jle    2cf54 <h1v2_fancy_upsample+0x94>
	mov    -0x38(%rbp),%rax
	mov    -0x30(%rbp),%rdi
	movslq 0x19c(%rdi),%rcx
	cmp    %r9d,%ecx
	jg     2cf62 <h1v2_fancy_upsample+0xa2>
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	leaveq 
	retq   
	mov    (%rdx,%r13,8),%rcx
	test   %ebx,%ebx
	je     2cf7a <h1v2_fancy_upsample+0xba>
	mov    (%rdx,%r14,8),%rax
	jmp    2cf7e <h1v2_fancy_upsample+0xbe>
	lea    -0x1(%rax),%ecx
	movslq %ecx,%r15
	movslq %eax,%r13
	add    $0x1,%eax
	mov    %rax,-0x38(%rbp)
	movslq %eax,%r14
	mov    %r10,%rbx
	jmp    2cf25 <h1v2_fancy_upsample+0x65>
	mov    (%rdx,%r15,8),%rax
	movslq %r9d,%rdi
	mov    (%r12,%rdi,8),%rdi
	mov    %rbx,-0x40(%rbp)
	mov    %r10,%r8
	jmp    2cf12 <h1v2_fancy_upsample+0x52>
	xchg   %ax,%ax

002cf90 <h2v2_fancy_upsample>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x50,%rsp
	mov    %rbx,-0x8(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %r15,-0x28(%rbp)
	mov    %rdi,-0x40(%rbp)
	mov    (%rcx),%rax
	mov    %rax,-0x30(%rbp)
	xor    %r8d,%r8d
	mov    %r8,%rcx
	mov    %rcx,%r9
	jmp    2d03e <h2v2_fancy_upsample+0xae>
	movzbl (%rbx),%r10d
	movzbl (%rdi),%r9d
	mov    %r8b,(%rcx)
	lea    (%r9,%r9,2),%r8d
	lea    (%r10,%r8,1),%r9d
	lea    0x7(%r9,%r13,1),%r8d
	shr    $0x4,%r8d
	mov    %r8b,0x1(%rcx)
	add    $0x2,%rcx
	add    $0x1,%rdi
	add    $0x1,%rbx
	add    $0xffffffff,%eax
	mov    %r11,%r10
	mov    %r9,%r11
	lea    (%r11,%r11,2),%r13d
	lea    0x8(%r10,%r13,1),%r8d
	shr    $0x4,%r8d
	test   %eax,%eax
	jne    2cfc2 <h2v2_fancy_upsample+0x32>
	mov    %r8b,(%rcx)
	lea    0x7(,%r11,4),%eax
	shr    $0x4,%eax
	mov    %al,0x1(%rcx)
	mov    -0x48(%rbp),%rax
	lea    0x1(%rax),%r9d
	mov    -0x50(%rbp),%rax
	lea    0x1(%rax),%r8d
	mov    -0x30(%rbp),%rax
	cmp    $0x1,%r8d
	jle    2d060 <h2v2_fancy_upsample+0xd0>
	xor    %r8d,%r8d
	mov    -0x38(%rbp),%rcx
	mov    -0x40(%rbp),%rdi
	movslq 0x19c(%rdi),%rdi
	cmp    %r9d,%edi
	jg     2d06f <h2v2_fancy_upsample+0xdf>
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	leaveq 
	retq   
	mov    (%rdx,%r15,8),%r13
	test   %r8d,%r8d
	je     2d084 <h2v2_fancy_upsample+0xf4>
	mov    (%rdx,%r14,8),%rbx
	jmp    2d088 <h2v2_fancy_upsample+0xf8>
	lea    -0x1(%rcx),%edi
	movslq %edi,%r12
	movslq %ecx,%r15
	add    $0x1,%ecx
	mov    %rcx,-0x38(%rbp)
	movslq %ecx,%r14
	jmp    2d02d <h2v2_fancy_upsample+0x9d>
	mov    (%rdx,%r12,8),%rbx
	movzbl (%rbx),%edi
	movzbl 0x0(%r13),%ecx
	lea    (%rcx,%rcx,2),%ecx
	lea    (%rdi,%rcx,1),%r10d
	lea    0x8(,%r10,4),%ecx
	shr    $0x4,%ecx
	movslq %r9d,%rdi
	mov    (%rax,%rdi,8),%rdi
	movzbl 0x1(%rbx),%eax
	movzbl 0x1(%r13),%r11d
	mov    %cl,(%rdi)
	lea    (%r11,%r11,2),%ecx
	lea    (%rax,%rcx,1),%r11d
	lea    (%r10,%r10,2),%eax
	lea    0x7(%r11,%rax,1),%eax
	shr    $0x4,%eax
	mov    %al,0x1(%rdi)
	mov    0x28(%rsi),%eax
	add    $0xfffffffe,%eax
	lea    0x2(%rdi),%rcx
	lea    0x2(%r13),%rdi
	add    $0x2,%rbx
	mov    %r9,-0x48(%rbp)
	mov    %r8,-0x50(%rbp)
	jmpq   2cff7 <h2v2_fancy_upsample+0x67>
	nopw   0x0(%rax,%rax,1)

002d0f0 <jpeg_read_coefficients>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %r15,-0x10(%rbp)
	movslq 0x24(%rdi),%rax
	cmp    $0xca,%eax
	je     2d112 <jpeg_read_coefficients+0x22>
	mov    %r15,%rax
	mov    %r14,%rcx
	mov    %rdi,%r14
	jmp    2d12c <jpeg_read_coefficients+0x3c>
	mov    %r14,%r15
	mov    %rdi,%r14
	callq  2d220 <transdecode_master_selection>
	movl   $0xd1,0x24(%r14)
	mov    %r15,%rcx
	mov    -0x10(%rbp),%rax
	xor    %r15d,%r15d
	movslq 0x24(%r14),%rdx
	cmp    $0xd1,%edx
	je     2d177 <jpeg_read_coefficients+0x87>
	mov    %rax,%r15
	movslq 0x24(%r14),%rax
	cmp    $0xd2,%eax
	jne    2d17d <jpeg_read_coefficients+0x8d>
	movslq 0x58(%r14),%rax
	test   %eax,%eax
	jne    2d186 <jpeg_read_coefficients+0x96>
	mov    (%r14),%rax
	movl   $0x14,0x28(%rax)
	movslq 0x24(%r14),%rdx
	mov    (%r14),%rax
	mov    %edx,0x2c(%rax)
	mov    (%r14),%rax
	mov    (%rax),%rax
	mov    %r14,%rdi
	mov    %rcx,%r14
	callq  *%rax
	xor    %eax,%eax
	leaveq 
	retq   
	mov    %rcx,-0x8(%rbp)
	jmp    2d1a4 <jpeg_read_coefficients+0xb4>
	cmp    $0xcf,%eax
	je     2d149 <jpeg_read_coefficients+0x59>
	jmp    2d151 <jpeg_read_coefficients+0x61>
	mov    0x230(%r14),%rax
	mov    0x20(%rax),%rax
	mov    %rcx,%r14
	leaveq 
	retq   
	cmp    $0x2,%eax
	je     2d1d2 <jpeg_read_coefficients+0xe2>
	mov    0x10(%r14),%rcx
	test   %rcx,%rcx
	jne    2d1e7 <jpeg_read_coefficients+0xf7>
	mov    0x10(%r14),%rax
	test   %rax,%rax
	je     2d1b2 <jpeg_read_coefficients+0xc2>
	mov    %r14,%rdi
	callq  *(%rax)
	mov    0x240(%r14),%rax
	mov    (%rax),%rax
	mov    %r14,%rdi
	callq  *%rax
	test   %eax,%eax
	jne    2d196 <jpeg_read_coefficients+0xa6>
	mov    %r15,%rax
	mov    -0x8(%rbp),%r14
	mov    -0x10(%rbp),%r15
	leaveq 
	retq   
	movl   $0xd2,0x24(%r14)
	mov    -0x8(%rbp),%rcx
	mov    -0x10(%rbp),%r15
	jmpq   2d13e <jpeg_read_coefficients+0x4e>
	cmp    $0x3,%eax
	jne    2d215 <jpeg_read_coefficients+0x125>
	mov    0x8(%rcx),%rax
	add    $0x1,%rax
	mov    %rax,0x8(%rcx)
	mov    0x10(%r14),%rdx
	mov    0x10(%rdx),%rcx
	cmp    %rcx,%rax
	jl     2d1a4 <jpeg_read_coefficients+0xb4>
	mov    0x1a4(%r14),%eax
	add    %rcx,%rax
	mov    %rax,0x10(%rdx)
	jmp    2d1a4 <jpeg_read_coefficients+0xb4>
	cmp    $0x1,%eax
	je     2d1ec <jpeg_read_coefficients+0xfc>
	jmp    2d1a4 <jpeg_read_coefficients+0xb4>
	nopl   0x0(%rax)

002d220 <transdecode_master_selection>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %r15,-0x8(%rbp)
	movl   $0x1,0x58(%rdi)
	movslq 0x13c(%rdi),%rax
	test   %eax,%eax
	jne    2d253 <transdecode_master_selection+0x33>
	movslq 0x138(%rdi),%rax
	test   %eax,%eax
	jne    2d294 <transdecode_master_selection+0x74>
	mov    %rdi,%r15
	callq  40b0 <jinit_huff_decoder@plt>
	jmp    2d25b <transdecode_master_selection+0x3b>
	mov    %rdi,%r15
	callq  4090 <jinit_arith_decoder@plt>
	mov    $0x1,%esi
	mov    %r15,%rdi
	callq  4050 <jinit_d_coef_controller@plt>
	mov    0x8(%r15),%rax
	mov    0x30(%rax),%rax
	mov    %r15,%rdi
	callq  *%rax
	mov    0x240(%r15),%rax
	mov    0x10(%rax),%rax
	mov    %r15,%rdi
	callq  *%rax
	mov    0x10(%r15),%rax
	test   %rax,%rax
	jne    2d29e <transdecode_master_selection+0x7e>
	mov    -0x8(%rbp),%r15
	leaveq 
	retq   
	mov    %rdi,%r15
	callq  41d0 <jinit_phuff_decoder@plt>
	jmp    2d25b <transdecode_master_selection+0x3b>
	movslq 0x138(%r15),%rax
	test   %eax,%eax
	jne    2d2bf <transdecode_master_selection+0x9f>
	mov    0x240(%r15),%rax
	movslq 0x20(%rax),%rax
	test   %eax,%eax
	jne    2d305 <transdecode_master_selection+0xe5>
	mov    $0x1,%eax
	jmp    2d2c7 <transdecode_master_selection+0xa7>
	movslq 0x38(%r15),%rax
	lea    0x2(%rax,%rax,2),%eax
	mov    0x10(%r15),%rcx
	movq   $0x0,0x8(%rcx)
	movslq %eax,%rax
	mov    0x1a4(%r15),%ecx
	imul   %rcx,%rax
	mov    0x10(%r15),%rcx
	mov    %rax,0x10(%rcx)
	mov    0x10(%r15),%rax
	movl   $0x0,0x18(%rax)
	mov    0x10(%r15),%rax
	movl   $0x1,0x1c(%rax)
	mov    -0x8(%rbp),%r15
	leaveq 
	retq   
	movslq 0x38(%r15),%rax
	jmp    2d2c7 <transdecode_master_selection+0xa7>
	nopl   0x0(%rax,%rax,1)

002d310 <jpeg_std_error>:
	push   %rbp
	mov    %rsp,%rbp
	lea    0x85(%rip),%rax        # 2d3a0 <error_exit>
	mov    %rax,(%rdi)
	lea    0xeb(%rip),%rax        # 2d410 <emit_message>
	mov    %rax,0x8(%rdi)
	lea    0xa0(%rip),%rax        # 2d3d0 <output_message>
	mov    %rax,0x10(%rdi)
	lea    0x135(%rip),%rax        # 2d470 <format_message>
	mov    %rax,0x18(%rdi)
	lea    0x24a(%rip),%rax        # 2d590 <reset_error_mgr>
	mov    %rax,0x20(%rdi)
	movl   $0x0,0x7c(%rdi)
	movq   $0x0,0x80(%rdi)
	movl   $0x0,0x28(%rdi)
	mov    0x40bde(%rip),%rax        # 6df48 <jpeg_std_message_table@@LIBJPEG_6.2+0x628>
	mov    %rax,0x88(%rdi)
	mov    %rdi,%rax
	movl   $0x7e,0x90(%rax)
	movq   $0x0,0x98(%rax)
	movl   $0x0,0xa0(%rax)
	movl   $0x0,0xa4(%rax)
	leaveq 
	retq   
	nop

002d3a0 <error_exit>:
	push   %rbp
	mov    %rsp,%rbp
	mov    (%rdi),%rax
	mov    0x10(%rax),%rax
	mov    %rdi,%rbx
	callq  *%rax
	mov    %rbx,%rdi
	callq  4030 <jpeg_destroy@plt>
	mov    $0x1,%edi
	callq  4440 <exit@plt>
	data16 nopw %cs:0x0(%rax,%rax,1)
	nopl   (%rax)

002d3d0 <output_message>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0xd0,%rsp
	mov    (%rdi),%rax
	mov    0x18(%rax),%rax
	lea    -0xc8(%rbp),%rsi
	callq  *%rax
	xor    %eax,%eax
	mov    0x40c04(%rip),%rcx        # 6dff8 <stderr@GLIBC_2.2.5>
	mov    (%rcx),%rdi
	lea    0x2defe(%rip),%rsi        # 5b2fc <dither_matrix+0x126c>
	lea    -0xc8(%rbp),%rdx
	callq  42a0 <fprintf@plt>
	leaveq 
	retq   
	nopl   0x0(%rax)

002d410 <emit_message>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    (%rdi),%rax
	test   %esi,%esi
	js     2d426 <emit_message+0x16>
	cmp    0x7c(%rax),%esi
	jle    2d461 <emit_message+0x51>
	leaveq 
	retq   
	mov    0x80(%rax),%rcx
	test   %rcx,%rcx
	je     2d43b <emit_message+0x2b>
	movslq 0x7c(%rax),%rcx
	cmp    $0x2,%ecx
	jle    2d44d <emit_message+0x3d>
	mov    %r15,-0x8(%rbp)
	mov    %rax,%r15
	callq  *0x10(%r15)
	mov    %r15,%rax
	mov    -0x8(%rbp),%r15
	mov    0x80(%rax),%rcx
	add    $0x1,%rcx
	mov    %rcx,0x80(%rax)
	leaveq 
	retq   
	callq  *0x10(%rax)
	leaveq 
	retq   
	nopw   %cs:0x0(%rax,%rax,1)

002d470 <format_message>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	xor    %ecx,%ecx
	mov    (%rdi),%r9
	movslq 0x28(%r9),%rdi
	test   %edi,%edi
	jle    2d49b <format_message+0x2b>
	cmp    0x90(%r9),%edi
	jg     2d49b <format_message+0x2b>
	mov    0x88(%r9),%rax
	mov    (%rax,%rdi,8),%rax
	jmp    2d4ae <format_message+0x3e>
	mov    0x98(%r9),%rdx
	test   %rdx,%rdx
	jne    2d52b <format_message+0xbb>
	mov    %rcx,%rax
	test   %rax,%rax
	je     2d53e <format_message+0xce>
	mov    %rax,%r11
	movsbq (%rax),%rdx
	test   %dl,%dl
	je     2d4d8 <format_message+0x68>
	add    $0x1,%rax
	cmp    $0x25,%dl
	jne    2d4ba <format_message+0x4a>
	movsbq (%rax),%rax
	cmp    $0x73,%al
	jne    2d4d8 <format_message+0x68>
	mov    $0x1,%ecx
	test   %ecx,%ecx
	jg     2d554 <format_message+0xe4>
	sub    $0x20,%rsp
	movslq 0x3c(%r9),%rdi
	movslq 0x40(%r9),%rax
	movslq 0x44(%r9),%r10
	movslq 0x48(%r9),%r8
	movslq 0x2c(%r9),%rdx
	movslq 0x30(%r9),%rcx
	mov    %r15,-0x8(%rbp)
	movslq 0x34(%r9),%r15
	movslq 0x38(%r9),%r9
	mov    %edi,(%rsp)
	mov    %eax,0x8(%rsp)
	mov    %r10d,0x10(%rsp)
	mov    %r8d,0x18(%rsp)
	mov    %rsi,%rdi
	mov    %r11,%rsi
	mov    %r15,%r8
	xor    %eax,%eax
	callq  4430 <sprintf@plt>
	mov    -0x8(%rbp),%r15
	leaveq 
	retq   
	movslq 0xa0(%r9),%rax
	cmp    %eax,%edi
	jge    2d567 <format_message+0xf7>
	mov    %rcx,%rax
	jmpq   2d4ae <format_message+0x3e>
	mov    %edi,0x2c(%r9)
	mov    0x88(%r9),%rax
	mov    (%rax),%rax
	mov    %rax,%r11
	jmpq   2d4ba <format_message+0x4a>
	xor    %eax,%eax
	lea    0x2c(%r9),%rdx
	mov    %rsi,%rdi
	mov    %r11,%rsi
	callq  4430 <sprintf@plt>
	leaveq 
	retq   
	cmp    0xa4(%r9),%edi
	jle    2d578 <format_message+0x108>
	mov    %rcx,%rax
	jmpq   2d4ae <format_message+0x3e>
	neg    %eax
	add    %edi,%eax
	movslq %eax,%rax
	mov    (%rdx,%rax,8),%rax
	jmpq   2d4ae <format_message+0x3e>
	nopl   0x0(%rax,%rax,1)

002d590 <reset_error_mgr>:
	push   %rbp
	mov    %rsp,%rbp
	mov    (%rdi),%rax
	movq   $0x0,0x80(%rax)
	mov    (%rdi),%rax
	movl   $0x0,0x28(%rax)
	leaveq 
	retq   
	xchg   %ax,%ax

002d5b0 <jpeg_fdct_float>:
	push   %rbp
	mov    %rsp,%rbp
	movss  0x2dd43(%rip),%xmm8        # 5b300 <dither_matrix+0x1270>
	mov    $0x7,%eax
	mov    %rax,%rcx
	mov    %rdi,%rdx
	jmpq   2d710 <jpeg_fdct_float+0x160>
	movss  0x14(%rdx),%xmm14
	movss  0x8(%rdx),%xmm5
	movapd %xmm14,%xmm11
	addss  %xmm5,%xmm11
	movss  0x18(%rdx),%xmm7
	movss  0x4(%rdx),%xmm0
	movapd %xmm7,%xmm2
	addss  %xmm0,%xmm2
	movapd %xmm11,%xmm15
	addss  %xmm2,%xmm15
	movss  0x10(%rdx),%xmm12
	movss  0xc(%rdx),%xmm3
	movapd %xmm12,%xmm9
	addss  %xmm3,%xmm9
	movss  0x1c(%rdx),%xmm10
	movss  (%rdx),%xmm1
	movapd %xmm10,%xmm4
	addss  %xmm1,%xmm4
	movapd %xmm9,%xmm6
	addss  %xmm4,%xmm6
	movapd %xmm15,%xmm13
	addss  %xmm6,%xmm13
	movss  %xmm13,(%rdx)
	subss  %xmm15,%xmm6
	movss  %xmm6,0x10(%rdx)
	subss  %xmm11,%xmm2
	subss  %xmm9,%xmm4
	addss  %xmm4,%xmm2
	mulss  %xmm8,%xmm2
	movapd %xmm2,%xmm6
	addss  %xmm4,%xmm6
	movss  %xmm6,0x8(%rdx)
	subss  %xmm2,%xmm4
	movss  %xmm4,0x18(%rdx)
	subss  %xmm12,%xmm3
	subss  %xmm14,%xmm5
	addss  %xmm5,%xmm3
	subss  %xmm7,%xmm0
	subss  %xmm10,%xmm1
	movapd %xmm0,%xmm2
	addss  %xmm1,%xmm2
	movapd %xmm3,%xmm4
	subss  %xmm2,%xmm4
	movss  0x2dc64(%rip),%xmm6        # 5b304 <dither_matrix+0x1274>
	mulss  %xmm6,%xmm4
	movss  0x2dc5c(%rip),%xmm6        # 5b308 <dither_matrix+0x1278>
	mulss  %xmm6,%xmm3
	movapd %xmm4,%xmm6
	addss  %xmm3,%xmm6
	addss  %xmm5,%xmm0
	mulss  %xmm8,%xmm0
	movapd %xmm1,%xmm3
	subss  %xmm0,%xmm3
	movapd %xmm6,%xmm5
	addss  %xmm3,%xmm5
	movss  %xmm5,0x14(%rdx)
	subss  %xmm6,%xmm3
	movss  %xmm3,0xc(%rdx)
	movss  0x2dc25(%rip),%xmm3        # 5b30c <dither_matrix+0x127c>
	mulss  %xmm3,%xmm2
	addss  %xmm4,%xmm2
	addss  %xmm0,%xmm1
	movapd %xmm2,%xmm0
	addss  %xmm1,%xmm0
	movss  %xmm0,0x4(%rdx)
	subss  %xmm2,%xmm1
	movss  %xmm1,0x1c(%rdx)
	add    $0x20,%rdx
	add    $0xffffffff,%ecx
	test   %ecx,%ecx
	jns    2d5cd <jpeg_fdct_float+0x1d>
	jmpq   2d879 <jpeg_fdct_float+0x2c9>
	movss  0xa0(%rdi),%xmm15
	movss  0x40(%rdi),%xmm6
	movapd %xmm15,%xmm14
	addss  %xmm6,%xmm14
	movss  0xc0(%rdi),%xmm13
	movss  0x20(%rdi),%xmm3
	movapd %xmm13,%xmm0
	addss  %xmm3,%xmm0
	movapd %xmm14,%xmm12
	addss  %xmm0,%xmm12
	movss  0x80(%rdi),%xmm11
	movss  0x60(%rdi),%xmm1
	movapd %xmm11,%xmm10
	addss  %xmm1,%xmm10
	movss  0xe0(%rdi),%xmm9
	movss  (%rdi),%xmm2
	movapd %xmm9,%xmm4
	addss  %xmm2,%xmm4
	movapd %xmm10,%xmm5
	addss  %xmm4,%xmm5
	movapd %xmm12,%xmm7
	addss  %xmm5,%xmm7
	movss  %xmm7,(%rdi)
	subss  %xmm12,%xmm5
	movss  %xmm5,0x80(%rdi)
	subss  %xmm14,%xmm0
	subss  %xmm10,%xmm4
	addss  %xmm4,%xmm0
	mulss  %xmm8,%xmm0
	movapd %xmm0,%xmm5
	addss  %xmm4,%xmm5
	movss  %xmm5,0x40(%rdi)
	subss  %xmm0,%xmm4
	movss  %xmm4,0xc0(%rdi)
	subss  %xmm11,%xmm1
	subss  %xmm15,%xmm6
	addss  %xmm6,%xmm1
	subss  %xmm13,%xmm3
	subss  %xmm9,%xmm2
	movapd %xmm3,%xmm0
	addss  %xmm2,%xmm0
	movapd %xmm1,%xmm4
	subss  %xmm0,%xmm4
	movss  0x2db01(%rip),%xmm5        # 5b304 <dither_matrix+0x1274>
	mulss  %xmm5,%xmm4
	movss  0x2daf9(%rip),%xmm5        # 5b308 <dither_matrix+0x1278>
	mulss  %xmm5,%xmm1
	movapd %xmm4,%xmm7
	addss  %xmm1,%xmm7
	addss  %xmm6,%xmm3
	mulss  %xmm8,%xmm3
	movapd %xmm2,%xmm1
	subss  %xmm3,%xmm1
	movapd %xmm7,%xmm5
	addss  %xmm1,%xmm5
	movss  %xmm5,0xa0(%rdi)
	subss  %xmm7,%xmm1
	movss  %xmm1,0x60(%rdi)
	movss  0x2dabf(%rip),%xmm1        # 5b30c <dither_matrix+0x127c>
	mulss  %xmm1,%xmm0
	addss  %xmm4,%xmm0
	addss  %xmm3,%xmm2
	movapd %xmm0,%xmm1
	addss  %xmm2,%xmm1
	movss  %xmm1,0x20(%rdi)
	subss  %xmm0,%xmm2
	movss  %xmm2,0xe0(%rdi)
	add    $0xffffffff,%eax
	add    $0x4,%rdi
	test   %eax,%eax
	jns    2d71d <jpeg_fdct_float+0x16d>
	leaveq 
	retq   
	nopw   %cs:0x0(%rax,%rax,1)
	nopl   (%rax)

002d890 <jpeg_fdct_ifast>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x50,%rsp
	mov    %rbx,-0x20(%rbp)
	mov    %r12,-0x28(%rbp)
	mov    %r13,-0x30(%rbp)
	mov    %r14,-0x38(%rbp)
	mov    %r15,-0x40(%rbp)
	mov    %rdi,-0x18(%rbp)
	mov    $0x7,%eax
	jmpq   2da27 <jpeg_fdct_ifast+0x197>
	movswq 0xa(%rdi),%r11
	movswq 0x4(%rdi),%rsi
	lea    (%r11,%rsi,1),%r10d
	movswq 0xc(%rdi),%r9
	movswq 0x2(%rdi),%rbx
	lea    (%r9,%rbx,1),%ecx
	lea    (%r10,%rcx,1),%r14d
	movswq 0x8(%rdi),%r15
	movswq 0x6(%rdi),%rdx
	lea    (%r15,%rdx,1),%r13d
	movswq 0xe(%rdi),%r12
	mov    %r12,-0x10(%rbp)
	movswq (%rdi),%r8
	mov    %rax,-0x48(%rbp)
	mov    %r8,-0x8(%rbp)
	add    %r12d,%r8d
	lea    0x0(%r13,%r8,1),%eax
	lea    (%r14,%rax,1),%r12d
	mov    %r12w,(%rdi)
	sub    %r14w,%ax
	mov    %ax,0x8(%rdi)
	mov    %r8,%r14
	sub    %r13w,%r14w
	movswq %r14w,%r12
	sub    %r10w,%cx
	movswq %cx,%rax
	add    %r12d,%eax
	movslq %eax,%rcx
	lea    (%rcx,%rcx,4),%rax
	lea    (%rcx,%rax,2),%rax
	shl    $0x4,%rax
	lea    (%rax,%rcx,4),%rax
	add    %rcx,%rax
	sar    $0x8,%rax
	lea    (%rax,%r14,1),%ecx
	mov    %cx,0x4(%rdi)
	add    %r13d,%eax
	sub    %ax,%r8w
	mov    %r8w,0xc(%rdi)
	sub    %r15w,%dx
	sub    %r11w,%si
	lea    (%rdx,%rsi,1),%eax
	movswq %ax,%rcx
	sub    %r9w,%bx
	mov    -0x10(%rbp),%r9
	mov    -0x8(%rbp),%rdx
	mov    %rdx,%r10
	sub    %r9w,%r10w
	lea    (%rbx,%r10,1),%eax
	movswq %ax,%r11
	mov    %rcx,%rax
	sub    %r11d,%eax
	movslq %eax,%r8
	lea    (%r8,%r8,2),%rax
	shl    $0x5,%rax
	lea    (%rax,%r8,2),%rax
	sar    $0x8,%rax
	mov    %rcx,%r8
	shl    $0x7,%r8
	lea    (%r8,%rcx,8),%r8
	lea    (%r8,%rcx,2),%r8
	add    %r8,%rcx
	sar    $0x8,%rcx
	lea    (%rax,%rcx,1),%r8d
	lea    (%rbx,%rsi,1),%ecx
	movswq %cx,%rsi
	lea    (%rsi,%rsi,4),%rcx
	lea    (%rsi,%rcx,2),%rcx
	shl    $0x4,%rcx
	lea    (%rcx,%rsi,4),%rcx
	add    %rsi,%rcx
	sar    $0x8,%rcx
	lea    (%r9,%rcx,1),%ebx
	mov    %rdx,%rsi
	sub    %bx,%si
	add    %r8d,%esi
	mov    %si,0xa(%rdi)
	lea    (%rbx,%r8,1),%esi
	sub    %si,%dx
	mov    %dx,0x6(%rdi)
	lea    (%r11,%r11,4),%rdx
	shl    $0x6,%rdx
	lea    (%rdx,%r11,8),%rdx
	lea    (%rdx,%r11,4),%rdx
	lea    (%rdx,%r11,2),%rdx
	sar    $0x8,%rdx
	add    %eax,%edx
	lea    (%r10,%rcx,1),%eax
	lea    (%rdx,%rax,1),%ecx
	mov    %cx,0x2(%rdi)
	sub    %dx,%ax
	mov    %ax,0xe(%rdi)
	add    $0x10,%rdi
	mov    -0x48(%rbp),%rax
	add    $0xffffffff,%eax
	test   %eax,%eax
	jns    2d8ba <jpeg_fdct_ifast+0x2a>
	mov    -0x18(%rbp),%rcx
	mov    $0x7,%eax
	jmpq   2dbab <jpeg_fdct_ifast+0x31b>
	movswq 0x50(%rcx),%r15
	movswq 0x20(%rcx),%rbx
	lea    (%r15,%rbx,1),%r14d
	movswq 0x60(%rcx),%r13
	movswq 0x10(%rcx),%rsi
	lea    0x0(%r13,%rsi,1),%edx
	lea    (%r14,%rdx,1),%r12d
	movswq 0x40(%rcx),%r11
	movswq 0x30(%rcx),%rdi
	lea    (%r11,%rdi,1),%r10d
	movswq 0x70(%rcx),%r9
	mov    %r9,-0x18(%rbp)
	movswq (%rcx),%r8
	mov    %rax,-0x48(%rbp)
	mov    %r8,-0x10(%rbp)
	lea    (%r9,%r8,1),%eax
	lea    (%r10,%rax,1),%r8d
	lea    (%r12,%r8,1),%r9d
	mov    %r9w,(%rcx)
	sub    %r12w,%r8w
	mov    %r8w,0x40(%rcx)
	mov    %rax,%r9
	sub    %r10w,%r9w
	movswq %r9w,%r8
	sub    %r14w,%dx
	movswq %dx,%rdx
	add    %r8d,%edx
	movslq %edx,%r8
	lea    (%r8,%r8,4),%rdx
	lea    (%r8,%rdx,2),%rdx
	shl    $0x4,%rdx
	lea    (%rdx,%r8,4),%rdx
	add    %r8,%rdx
	sar    $0x8,%rdx
	lea    (%rdx,%r9,1),%r8d
	mov    %r8w,0x20(%rcx)
	add    %r10d,%edx
	sub    %dx,%ax
	mov    %ax,0x60(%rcx)
	sub    %r11w,%di
	sub    %r15w,%bx
	lea    (%rdi,%rbx,1),%eax
	movswq %ax,%r8
	sub    %r13w,%si
	mov    -0x18(%rbp),%r11
	mov    -0x10(%rbp),%rdi
	mov    %rdi,%r10
	sub    %r11w,%r10w
	lea    (%rsi,%r10,1),%eax
	movswq %ax,%r9
	mov    %r8,%rax
	sub    %r9d,%eax
	movslq %eax,%rdx
	lea    (%rdx,%rdx,2),%rax
	shl    $0x5,%rax
	lea    (%rax,%rdx,2),%rax
	sar    $0x8,%rax
	mov    %r8,%rdx
	shl    $0x7,%rdx
	lea    (%rdx,%r8,8),%rdx
	lea    (%rdx,%r8,2),%rdx
	add    %r8,%rdx
	sar    $0x8,%rdx
	lea    (%rax,%rdx,1),%r8d
	lea    (%rsi,%rbx,1),%edx
	movswq %dx,%rsi
	lea    (%rsi,%rsi,4),%rdx
	lea    (%rsi,%rdx,2),%rdx
	shl    $0x4,%rdx
	lea    (%rdx,%rsi,4),%rdx
	add    %rsi,%rdx
	sar    $0x8,%rdx
	lea    (%r11,%rdx,1),%ebx
	mov    %rdi,%rsi
	sub    %bx,%si
	add    %r8d,%esi
	mov    %si,0x50(%rcx)
	lea    (%rbx,%r8,1),%esi
	sub    %si,%di
	mov    %di,0x30(%rcx)
	lea    (%r9,%r9,4),%rsi
	shl    $0x6,%rsi
	lea    (%rsi,%r9,8),%rsi
	lea    (%rsi,%r9,4),%rsi
	lea    (%rsi,%r9,2),%rsi
	sar    $0x8,%rsi
	add    %eax,%esi
	lea    (%r10,%rdx,1),%eax
	lea    (%rsi,%rax,1),%edx
	mov    %dx,0x10(%rcx)
	sub    %si,%ax
	mov    %ax,0x70(%rcx)
	mov    -0x48(%rbp),%rax
	add    $0xffffffff,%eax
	add    $0x2,%rcx
	test   %eax,%eax
	jns    2da3d <jpeg_fdct_ifast+0x1ad>
	mov    -0x40(%rbp),%r15
	mov    -0x38(%rbp),%r14
	mov    -0x30(%rbp),%r13
	mov    -0x28(%rbp),%r12
	mov    -0x20(%rbp),%rbx
	leaveq 
	retq   
	nopl   0x0(%rax)

002dbd0 <jpeg_fdct_islow>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x50,%rsp
	mov    %rbx,-0x20(%rbp)
	mov    %r12,-0x28(%rbp)
	mov    %r13,-0x30(%rbp)
	mov    %r14,-0x38(%rbp)
	mov    %r15,-0x40(%rbp)
	mov    %rdi,-0x18(%rbp)
	mov    $0x7,%eax
	jmpq   2de31 <jpeg_fdct_islow+0x261>
	movswq 0xa(%rdi),%r10
	movswq 0x4(%rdi),%rdx
	lea    (%r10,%rdx,1),%ecx
	movslq %ecx,%r11
	movswq 0xc(%rdi),%rsi
	mov    %rsi,-0x10(%rbp)
	movswq 0x2(%rdi),%rcx
	mov    %rcx,-0x8(%rbp)
	add    %esi,%ecx
	movslq %ecx,%rcx
	lea    (%r11,%rcx,1),%r12
	movswq 0x8(%rdi),%r13
	movswq 0x6(%rdi),%rsi
	lea    0x0(%r13,%rsi,1),%ebx
	movslq %ebx,%r14
	movswq 0xe(%rdi),%r15
	movswq (%rdi),%rbx
	mov    %rax,-0x48(%rbp)
	lea    (%r15,%rbx,1),%eax
	movslq %eax,%r8
	lea    (%r14,%r8,1),%rax
	lea    (%r12,%rax,1),%r9
	shl    $0x2,%r9d
	mov    %r9w,(%rdi)
	sub    %r12,%rax
	shl    $0x2,%eax
	mov    %ax,0x8(%rdi)
	sub    %r11,%rcx
	sub    %r14,%r8
	lea    (%rcx,%r8,1),%r9
	mov    %r9,%rax
	shl    $0x4,%rax
	mov    %r9,%r11
	shl    $0x8,%r11
	add    %r11,%rax
	lea    (%rax,%r9,4),%rax
	add    %r9,%rax
	shl    $0x4,%rax
	add    %rax,%r9
	lea    (%r8,%r8,2),%rax
	shl    $0x4,%rax
	add    %r8,%rax
	shl    $0x7,%rax
	add    %r8,%r8
	sub    %r8,%rax
	lea    0x400(%r9,%rax,1),%rax
	sar    $0xb,%rax
	mov    %ax,0x4(%rdi)
	imul   $0xffffffffffffc4df,%rcx,%rcx
	lea    0x400(%rcx,%r9,1),%rax
	sar    $0xb,%rax
	mov    %ax,0xc(%rdi)
	sub    %r15d,%ebx
	movslq %ebx,%r11
	sub    %r10d,%edx
	movslq %edx,%rdx
	lea    (%r11,%rdx,1),%r8
	sub    %r13d,%esi
	movslq %esi,%rsi
	mov    -0x10(%rbp),%rcx
	mov    -0x8(%rbp),%rax
	sub    %ecx,%eax
	movslq %eax,%r10
	lea    (%rsi,%r10,1),%rax
	lea    (%r8,%rax,1),%rbx
	lea    (%rbx,%rbx,8),%rcx
	shl    $0x5,%rcx
	lea    (%rcx,%rbx,8),%rcx
	lea    (%rcx,%rbx,4),%rcx
	add    %rbx,%rcx
	shl    $0x5,%rcx
	lea    (%rbx,%rcx,1),%r9
	lea    (%rax,%rax,4),%rcx
	mov    %rcx,%rbx
	shl    $0x6,%rbx
	sub    %rbx,%rcx
	shl    $0xe,%rax
	add    %rcx,%rax
	mov    %r9,%rbx
	sub    %rax,%rbx
	lea    (%rsi,%r11,1),%rcx
	imul   $0xffffffffffffe333,%rcx,%rcx
	lea    (%rsi,%rsi,8),%rax
	lea    (%rsi,%rax,2),%rax
	shl    $0x7,%rax
	lea    (%rax,%rsi,8),%rax
	lea    (%rax,%rsi,4),%rax
	lea    (%rax,%rsi,2),%rax
	add    %rcx,%rax
	lea    0x400(%rax,%rbx,1),%rax
	sar    $0xb,%rax
	mov    %ax,0xe(%rdi)
	mov    %r8,%rsi
	shl    $0x2,%rsi
	lea    (%r8,%rsi,1),%rax
	mov    %rax,%r8
	shl    $0x7,%r8
	shl    $0x9,%rax
	add    %r8,%rax
	sub    %rax,%rsi
	add    %r9,%rsi
	lea    (%rdx,%r10,1),%r8
	lea    (%r8,%r8,4),%rax
	lea    (%r8,%rax,8),%rax
	shl    $0x9,%rax
	lea    (%rax,%r8,2),%rax
	add    %rax,%r8
	mov    %rdx,%r9
	shl    $0x2,%r9
	lea    (%rdx,%rdx,8),%rax
	lea    (%r9,%rax,8),%rax
	add    %rdx,%rax
	lea    (%r8,%rax,1),%r9
	mov    %rdx,%rax
	shl    $0x9,%rax
	shl    $0xe,%rdx
	add    %rdx,%rax
	sub    %r9,%rax
	lea    0x400(%rsi,%rax,1),%rax
	sar    $0xb,%rax
	mov    %ax,0xa(%rdi)
	lea    (%r10,%r10,2),%rax
	shl    $0x4,%rax
	add    %r10,%rax
	shl    $0x5,%rax
	lea    (%rax,%r10,4),%rax
	add    %r10,%rax
	shl    $0x4,%rax
	lea    (%rax,%r10,4),%rax
	sub    %r8,%rax
	lea    0x400(%rbx,%rax,1),%rax
	sar    $0xb,%rax
	mov    %ax,0x6(%rdi)
	lea    (%r11,%r11,2),%rax
	shl    $0xc,%rax
	lea    (%rax,%r11,8),%rax
	lea    (%rax,%r11,2),%rax
	add    %r11,%rax
	add    %rcx,%rax
	lea    0x400(%rax,%rsi,1),%rax
	sar    $0xb,%rax
	mov    %ax,0x2(%rdi)
	add    $0x10,%rdi
	mov    -0x48(%rbp),%rax
	add    $0xffffffff,%eax
	test   %eax,%eax
	jns    2dbfa <jpeg_fdct_islow+0x2a>
	mov    -0x18(%rbp),%rdx
	mov    $0x7,%ecx
	jmpq   2e086 <jpeg_fdct_islow+0x4b6>
	movswq 0x50(%rdx),%r15
	movswq 0x20(%rdx),%r9
	lea    (%r15,%r9,1),%eax
	movslq %eax,%r14
	movswq 0x60(%rdx),%rsi
	mov    %rsi,-0x18(%rbp)
	movswq 0x10(%rdx),%rax
	mov    %rax,-0x10(%rbp)
	add    %esi,%eax
	movslq %eax,%rax
	lea    (%r14,%rax,1),%r13
	movswq 0x40(%rdx),%r12
	movswq 0x30(%rdx),%rdi
	lea    (%r12,%rdi,1),%esi
	movslq %esi,%r10
	movswq 0x70(%rdx),%r11
	movswq (%rdx),%rsi
	mov    %rcx,-0x48(%rbp)
	lea    (%r11,%rsi,1),%ecx
	movslq %ecx,%rbx
	lea    (%r10,%rbx,1),%rcx
	lea    0x2(%r13,%rcx,1),%r8
	sar    $0x2,%r8
	mov    %r8w,(%rdx)
	sub    %r13,%rcx
	add    $0x2,%rcx
	sar    $0x2,%rcx
	mov    %cx,0x40(%rdx)
	sub    %r14,%rax
	sub    %r10,%rbx
	lea    (%rax,%rbx,1),%r10
	mov    %r10,%r8
	shl    $0x4,%r8
	mov    %r10,%rcx
	shl    $0x8,%rcx
	add    %r8,%rcx
	lea    (%rcx,%r10,4),%rcx
	add    %r10,%rcx
	shl    $0x4,%rcx
	lea    (%r10,%rcx,1),%r8
	lea    (%rbx,%rbx,2),%rcx
	shl    $0x4,%rcx
	add    %rbx,%rcx
	shl    $0x7,%rcx
	add    %rbx,%rbx
	sub    %rbx,%rcx
	lea    0x4000(%r8,%rcx,1),%rcx
	sar    $0xf,%rcx
	mov    %cx,0x20(%rdx)
	imul   $0xffffffffffffc4df,%rax,%rax
	lea    0x4000(%rax,%r8,1),%rax
	sar    $0xf,%rax
	mov    %ax,0x60(%rdx)
	sub    %r11d,%esi
	movslq %esi,%r11
	sub    %r15d,%r9d
	movslq %r9d,%rsi
	lea    (%r11,%rsi,1),%r10
	sub    %r12d,%edi
	movslq %edi,%r12
	mov    -0x18(%rbp),%rcx
	mov    -0x10(%rbp),%rax
	sub    %ecx,%eax
	movslq %eax,%r9
	lea    (%r12,%r9,1),%rax
	lea    (%r10,%rax,1),%rdi
	lea    (%rdi,%rdi,8),%rcx
	shl    $0x5,%rcx
	lea    (%rcx,%rdi,8),%rcx
	lea    (%rcx,%rdi,4),%rcx
	add    %rdi,%rcx
	shl    $0x5,%rcx
	lea    (%rdi,%rcx,1),%r8
	lea    (%rax,%rax,4),%rcx
	mov    %rcx,%rdi
	shl    $0x6,%rdi
	sub    %rdi,%rcx
	shl    $0xe,%rax
	add    %rcx,%rax
	mov    %r8,%rbx
	sub    %rax,%rbx
	lea    (%r12,%r11,1),%rcx
	imul   $0xffffffffffffe333,%rcx,%rcx
	lea    (%r12,%r12,8),%rax
	lea    (%r12,%rax,2),%rax
	shl    $0x7,%rax
	lea    (%rax,%r12,8),%rax
	lea    (%rax,%r12,4),%rax
	lea    (%rax,%r12,2),%rax
	add    %rcx,%rax
	lea    0x4000(%rax,%rbx,1),%rax
	sar    $0xf,%rax
	mov    %ax,0x70(%rdx)
	mov    %r10,%rax
	shl    $0x2,%rax
	lea    (%r10,%rax,1),%rdi
	mov    %rdi,%r10
	shl    $0x7,%r10
	shl    $0x9,%rdi
	add    %r10,%rdi
	sub    %rdi,%rax
	lea    (%r8,%rax,1),%r10
	lea    (%rsi,%r9,1),%rdi
	lea    (%rdi,%rdi,4),%rax
	lea    (%rdi,%rax,8),%rax
	shl    $0x9,%rax
	lea    (%rax,%rdi,2),%rax
	lea    (%rdi,%rax,1),%r8
	mov    %rsi,%rdi
	shl    $0x2,%rdi
	lea    (%rsi,%rsi,8),%rax
	lea    (%rdi,%rax,8),%rax
	add    %rsi,%rax
	lea    (%r8,%rax,1),%rdi
	mov    %rsi,%rax
	shl    $0x9,%rax
	shl    $0xe,%rsi
	add    %rsi,%rax
	sub    %rdi,%rax
	lea    0x4000(%r10,%rax,1),%rax
	sar    $0xf,%rax
	mov    %ax,0x50(%rdx)
	lea    (%r9,%r9,2),%rax
	shl    $0x4,%rax
	add    %r9,%rax
	shl    $0x5,%rax
	lea    (%rax,%r9,4),%rax
	add    %r9,%rax
	shl    $0x4,%rax
	lea    (%rax,%r9,4),%rax
	sub    %r8,%rax
	lea    0x4000(%rbx,%rax,1),%rax
	sar    $0xf,%rax
	mov    %ax,0x30(%rdx)
	lea    (%r11,%r11,2),%rax
	shl    $0xc,%rax
	lea    (%rax,%r11,8),%rax
	lea    (%rax,%r11,2),%rax
	add    %r11,%rax
	add    %rcx,%rax
	lea    0x4000(%rax,%r10,1),%rax
	sar    $0xf,%rax
	mov    %ax,0x10(%rdx)
	mov    -0x48(%rbp),%rax
	lea    -0x1(%rax),%ecx
	add    $0x2,%rdx
	test   %ecx,%ecx
	jns    2de47 <jpeg_fdct_islow+0x277>
	mov    -0x40(%rbp),%r15
	mov    -0x38(%rbp),%r14
	mov    -0x30(%rbp),%r13
	mov    -0x28(%rbp),%r12
	mov    -0x20(%rbp),%rbx
	leaveq 
	retq   
	nopw   %cs:0x0(%rax,%rax,1)
	xchg   %ax,%ax

002e0b0 <jpeg_idct_float>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x100,%rsp
	mov    0x1a8(%rdi),%r10
	mov    0x58(%rsi),%rax
	movss  0x2d245(%rip),%xmm11        # 5b314 <dither_matrix+0x1284>
	movss  0x2d24d(%rip),%xmm0        # 5b324 <dither_matrix+0x1294>
	lea    -0x100(%rbp),%r9
	mov    $0x8,%edi
	mov    %r9,%rsi
	jmpq   2e2f0 <jpeg_idct_float+0x240>
	movapd %xmm0,%xmm9
	mulss  0xe0(%rax),%xmm9
	movswq 0x70(%rdx),%r11
	cvtsi2ss %r11d,%xmm1
	mulss  %xmm1,%xmm9
	movapd %xmm0,%xmm3
	mulss  0x20(%rax),%xmm3
	movswq 0x10(%rdx),%r11
	cvtsi2ss %r11d,%xmm1
	mulss  %xmm1,%xmm3
	movapd %xmm9,%xmm4
	addss  %xmm3,%xmm4
	movapd %xmm0,%xmm2
	mulss  0xa0(%rax),%xmm2
	movswq 0x50(%rdx),%r11
	cvtsi2ss %r11d,%xmm1
	mulss  %xmm1,%xmm2
	movapd %xmm0,%xmm10
	mulss  0x60(%rax),%xmm10
	movswq 0x30(%rdx),%r11
	cvtsi2ss %r11d,%xmm1
	mulss  %xmm1,%xmm10
	movapd %xmm2,%xmm14
	addss  %xmm10,%xmm14
	movapd %xmm4,%xmm15
	addss  %xmm14,%xmm15
	movapd %xmm0,%xmm8
	mulss  0xc0(%rax),%xmm8
	movswq 0x60(%rdx),%r11
	cvtsi2ss %r11d,%xmm1
	mulss  %xmm1,%xmm8
	movapd %xmm0,%xmm1
	mulss  0x40(%rax),%xmm1
	movswq 0x20(%rdx),%r11
	cvtsi2ss %r11d,%xmm5
	mulss  %xmm5,%xmm1
	movapd %xmm8,%xmm12
	addss  %xmm1,%xmm12
	movapd %xmm0,%xmm7
	mulss  0x80(%rax),%xmm7
	movswq 0x40(%rdx),%r11
	cvtsi2ss %r11d,%xmm5
	mulss  %xmm5,%xmm7
	mulss  (%rax),%xmm0
	movswq (%rdx),%r11
	cvtsi2ss %r11d,%xmm5
	mulss  %xmm5,%xmm0
	movapd %xmm7,%xmm6
	addss  %xmm0,%xmm6
	movapd %xmm12,%xmm5
	addss  %xmm6,%xmm5
	movapd %xmm15,%xmm13
	addss  %xmm5,%xmm13
	movss  %xmm13,(%rsi)
	subss  %xmm15,%xmm5
	movss  %xmm5,0xe0(%rsi)
	subss  %xmm10,%xmm2
	subss  %xmm9,%xmm3
	movapd %xmm2,%xmm5
	addss  %xmm3,%xmm5
	mulss  %xmm11,%xmm5
	movss  0x2d0fa(%rip),%xmm9        # 5b320 <dither_matrix+0x1290>
	mulss  %xmm9,%xmm2
	xorpd  0x2d0fd(%rip),%xmm2        # 5b330 <dither_matrix+0x12a0>
	addss  %xmm5,%xmm2
	subss  %xmm15,%xmm2
	subss  %xmm8,%xmm1
	movss  0x2d0d2(%rip),%xmm8        # 5b31c <dither_matrix+0x128c>
	mulss  %xmm8,%xmm1
	subss  %xmm12,%xmm1
	subss  %xmm7,%xmm0
	movapd %xmm1,%xmm7
	addss  %xmm0,%xmm7
	movapd %xmm2,%xmm9
	addss  %xmm7,%xmm9
	movss  %xmm9,0x20(%rsi)
	subss  %xmm2,%xmm7
	movss  %xmm7,0xc0(%rsi)
	subss  %xmm14,%xmm4
	mulss  %xmm8,%xmm4
	subss  %xmm2,%xmm4
	subss  %xmm1,%xmm0
	movapd %xmm4,%xmm1
	addss  %xmm0,%xmm1
	movss  %xmm1,0x40(%rsi)
	subss  %xmm4,%xmm0
	movss  %xmm0,0xa0(%rsi)
	movss  0x2d069(%rip),%xmm0        # 5b318 <dither_matrix+0x1288>
	mulss  %xmm0,%xmm3
	subss  %xmm3,%xmm5
	subss  %xmm4,%xmm5
	subss  %xmm12,%xmm6
	movapd %xmm5,%xmm0
	addss  %xmm6,%xmm0
	movss  %xmm0,0x60(%rsi)
	subss  %xmm5,%xmm6
	movss  %xmm6,0x80(%rsi)
	add    $0x2,%rdx
	add    $0x4,%rax
	add    $0x4,%rsi
	movss  0x2d037(%rip),%xmm0        # 5b324 <dither_matrix+0x1294>
	add    $0xffffffff,%edi
	test   %edi,%edi
	jg     2e306 <jpeg_idct_float+0x256>
	movss  0x2d014(%rip),%xmm0        # 5b310 <dither_matrix+0x1280>
	mov    %r8d,%edi
	xor    %eax,%eax
	jmpq   2e5b0 <jpeg_idct_float+0x500>
	movswq 0x10(%rdx),%r11
	test   %r11w,%r11w
	jne    2e0eb <jpeg_idct_float+0x3b>
	movswq 0x20(%rdx),%r11
	test   %r11w,%r11w
	jne    2e0eb <jpeg_idct_float+0x3b>
	movswq 0x30(%rdx),%r11
	test   %r11w,%r11w
	jne    2e0eb <jpeg_idct_float+0x3b>
	movswq 0x40(%rdx),%r11
	test   %r11w,%r11w
	jne    2e0eb <jpeg_idct_float+0x3b>
	movswq 0x50(%rdx),%r11
	test   %r11w,%r11w
	jne    2e0eb <jpeg_idct_float+0x3b>
	movswq 0x60(%rdx),%r11
	test   %r11w,%r11w
	jne    2e0eb <jpeg_idct_float+0x3b>
	movswq 0x70(%rdx),%r11
	test   %r11w,%r11w
	jne    2e0eb <jpeg_idct_float+0x3b>
	movapd %xmm0,%xmm1
	mulss  (%rax),%xmm1
	movswq (%rdx),%r11
	cvtsi2ss %r11d,%xmm2
	mulss  %xmm2,%xmm1
	movss  %xmm1,(%rsi)
	movss  %xmm1,0x20(%rsi)
	movss  %xmm1,0x40(%rsi)
	movss  %xmm1,0x60(%rsi)
	movss  %xmm1,0x80(%rsi)
	movss  %xmm1,0xa0(%rsi)
	movss  %xmm1,0xc0(%rsi)
	movss  %xmm1,0xe0(%rsi)
	add    $0x2,%rdx
	add    $0x4,%rax
	add    $0x4,%rsi
	jmpq   2e2ed <jpeg_idct_float+0x23d>
	movss  0x4(%r9),%xmm4
	movss  0x1c(%r9),%xmm9
	movapd %xmm9,%xmm2
	addss  %xmm4,%xmm2
	movss  0x14(%r9),%xmm6
	movss  0xc(%r9),%xmm10
	movapd %xmm10,%xmm8
	addss  %xmm6,%xmm8
	movapd %xmm2,%xmm7
	addss  %xmm8,%xmm7
	addss  (%r9),%xmm0
	movss  0x10(%r9),%xmm14
	movapd %xmm14,%xmm5
	addss  %xmm0,%xmm5
	movss  0x18(%r9),%xmm13
	movss  0x8(%r9),%xmm3
	movapd %xmm13,%xmm12
	addss  %xmm3,%xmm12
	movapd %xmm12,%xmm1
	addss  %xmm5,%xmm1
	movapd %xmm7,%xmm15
	addss  %xmm1,%xmm15
	cvttss2si %xmm15,%edx
	and    $0x3ff,%edx
	movslq %edx,%rdx
	movzbl (%r10,%rdx,1),%r8d
	movslq %eax,%rdx
	mov    (%rcx,%rdx,8),%rsi
	mov    %r8b,(%rdi,%rsi,1)
	subss  %xmm7,%xmm1
	cvttss2si %xmm1,%edx
	and    $0x3ff,%edx
	movslq %edx,%rdx
	movzbl (%r10,%rdx,1),%edx
	mov    %dl,0x7(%rdi,%rsi,1)
	subss  %xmm10,%xmm6
	subss  %xmm9,%xmm4
	movapd %xmm6,%xmm1
	addss  %xmm4,%xmm1
	mulss  %xmm11,%xmm1
	movss  0x2ce8f(%rip),%xmm9        # 5b320 <dither_matrix+0x1290>
	mulss  %xmm9,%xmm6
	xorpd  0x2ce92(%rip),%xmm6        # 5b330 <dither_matrix+0x12a0>
	addss  %xmm1,%xmm6
	subss  %xmm7,%xmm6
	subss  %xmm13,%xmm3
	movss  0x2ce68(%rip),%xmm9        # 5b31c <dither_matrix+0x128c>
	mulss  %xmm9,%xmm3
	subss  %xmm12,%xmm3
	subss  %xmm14,%xmm0
	movapd %xmm3,%xmm7
	addss  %xmm0,%xmm7
	movapd %xmm6,%xmm10
	addss  %xmm7,%xmm10
	cvttss2si %xmm10,%edx
	and    $0x3ff,%edx
	movslq %edx,%rdx
	movzbl (%r10,%rdx,1),%edx
	mov    %dl,0x1(%rdi,%rsi,1)
	subss  %xmm6,%xmm7
	cvttss2si %xmm7,%edx
	and    $0x3ff,%edx
	movslq %edx,%rdx
	movzbl (%r10,%rdx,1),%edx
	mov    %dl,0x6(%rdi,%rsi,1)
	subss  %xmm8,%xmm2
	mulss  %xmm9,%xmm2
	subss  %xmm6,%xmm2
	subss  %xmm3,%xmm0
	movapd %xmm2,%xmm3
	addss  %xmm0,%xmm3
	cvttss2si %xmm3,%edx
	and    $0x3ff,%edx
	movslq %edx,%rdx
	movzbl (%r10,%rdx,1),%edx
	mov    %dl,0x2(%rdi,%rsi,1)
	subss  %xmm2,%xmm0
	cvttss2si %xmm0,%edx
	and    $0x3ff,%edx
	movslq %edx,%rdx
	movzbl (%r10,%rdx,1),%edx
	mov    %dl,0x5(%rdi,%rsi,1)
	movss  0x2cdc0(%rip),%xmm0        # 5b318 <dither_matrix+0x1288>
	mulss  %xmm0,%xmm4
	subss  %xmm4,%xmm1
	subss  %xmm2,%xmm1
	subss  %xmm12,%xmm5
	movapd %xmm1,%xmm0
	addss  %xmm5,%xmm0
	cvttss2si %xmm0,%edx
	and    $0x3ff,%edx
	movslq %edx,%rdx
	movzbl (%r10,%rdx,1),%edx
	mov    %dl,0x3(%rdi,%rsi,1)
	subss  %xmm1,%xmm5
	cvttss2si %xmm5,%edx
	and    $0x3ff,%edx
	movslq %edx,%rdx
	movzbl (%rdx,%r10,1),%edx
	mov    %dl,0x4(%rdi,%rsi,1)
	add    $0x1,%eax
	add    $0x20,%r9
	movss  0x2cd60(%rip),%xmm0        # 5b310 <dither_matrix+0x1280>
	cmp    $0x7,%eax
	jle    2e3c8 <jpeg_idct_float+0x318>
	leaveq 
	retq   
	nopl   0x0(%rax,%rax,1)

002e5c0 <jpeg_idct_ifast>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x170,%rsp
	mov    %r8,-0x30(%rbp)
	mov    %rcx,-0x40(%rbp)
	mov    %rbx,-0x8(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %r15,-0x28(%rbp)
	mov    0x1a8(%rdi),%rax
	mov    %rax,-0x38(%rbp)
	mov    0x58(%rsi),%rax
	lea    -0x170(%rbp),%rcx
	mov    $0x8,%esi
	jmpq   2e814 <jpeg_idct_ifast+0x254>
	movswq 0x70(%rax),%r8
	movswq 0x70(%rdx),%rdi
	imul   %di,%r8w
	movswq 0x10(%rax),%rbx
	movswq 0x10(%rdx),%rdi
	imul   %di,%bx
	lea    (%r8,%rbx,1),%r11d
	mov    %r11,-0x50(%rbp)
	movswq 0x30(%rax),%r9
	movswq 0x30(%rdx),%rdi
	imul   %di,%r9w
	movswq 0x50(%rax),%rdi
	movswq 0x50(%rdx),%r10
	imul   %r10w,%di
	lea    (%r9,%rdi,1),%r10d
	mov    %r10,-0x58(%rbp)
	add    %r11d,%r10d
	movswq %r10w,%r14
	movswq 0x20(%rax),%r12
	movswq 0x20(%rdx),%r11
	imul   %r11w,%r12w
	movswq 0x60(%rax),%r11
	mov    %rsi,-0x70(%rbp)
	movswq 0x60(%rdx),%rsi
	imul   %si,%r11w
	lea    (%r12,%r11,1),%r15d
	movswq (%rax),%rsi
	movswq (%rdx),%r13
	imul   %r13w,%si
	movswq 0x40(%rax),%r13
	mov    %rax,-0x60(%rbp)
	movswq 0x40(%rdx),%rax
	imul   %ax,%r13w
	lea    (%rsi,%r13,1),%eax
	mov    %rdx,-0x68(%rbp)
	mov    %rax,-0x48(%rbp)
	add    %r15d,%eax
	movswq %ax,%rax
	lea    (%r14,%rax,1),%edx
	mov    %edx,(%rcx)
	sub    %r14d,%eax
	mov    %eax,0xe0(%rcx)
	sub    %r9w,%di
	movswq %di,%r9
	sub    %r8w,%bx
	movswq %bx,%r14
	lea    (%r14,%r9,1),%eax
	movslq %eax,%rdi
	mov    %rdi,%rdx
	shl    $0x2,%rdx
	lea    (%rdi,%rdi,2),%rax
	lea    (%rdx,%rax,8),%rax
	add    %rdi,%rax
	shl    $0x4,%rax
	lea    (%rax,%rdi,8),%rax
	add    %rax,%rdi
	sar    $0x8,%rdi
	lea    (%r9,%r9,4),%rax
	lea    (%r9,%rax,4),%rdx
	shl    $0x5,%rdx
	lea    (%r9,%r9,2),%rax
	sub    %rdx,%rax
	sar    $0x8,%rax
	lea    (%rax,%rdi,1),%r9d
	mov    %r9,%rax
	sub    %r10w,%ax
	movswq %ax,%r8
	movswq %r12w,%rax
	movswq %r11w,%rdx
	sub    %edx,%eax
	movslq %eax,%rdx
	lea    (%rdx,%rdx,4),%rax
	lea    (%rdx,%rax,2),%rax
	shl    $0x5,%rax
	lea    (%rax,%rdx,8),%rax
	lea    (%rax,%rdx,2),%rax
	sar    $0x8,%rax
	mov    %rax,%rdx
	sub    %r15w,%dx
	sub    %r13w,%si
	add    %esi,%edx
	movswq %dx,%rdx
	lea    (%r8,%rdx,1),%ebx
	mov    %ebx,0x20(%rcx)
	sub    %r8d,%edx
	mov    %edx,0xc0(%rcx)
	sub    %r9w,%r10w
	mov    -0x50(%rbp),%rdx
	movswq %dx,%rdx
	mov    -0x58(%rbp),%rbx
	movswq %bx,%rbx
	sub    %ebx,%edx
	movslq %edx,%rbx
	lea    (%rbx,%rbx,4),%rdx
	lea    (%rbx,%rdx,2),%rdx
	shl    $0x5,%rdx
	lea    (%rdx,%rbx,8),%rdx
	lea    (%rdx,%rbx,2),%rdx
	sar    $0x8,%rdx
	lea    (%r10,%rdx,1),%r8d
	movswq %r8w,%rbx
	neg    %ax
	add    %r15w,%ax
	add    %esi,%eax
	movswq %ax,%rax
	lea    (%rbx,%rax,1),%edx
	mov    %edx,0x40(%rcx)
	sub    %ebx,%eax
	mov    %eax,0xa0(%rcx)
	mov    %r14,%rdx
	shl    $0x4,%rdx
	mov    %r14,%rax
	shl    $0x8,%rax
	add    %rdx,%rax
	lea    (%rax,%r14,4),%rax
	add    %r14,%rax
	sar    $0x8,%rax
	sub    %di,%ax
	add    %r8d,%eax
	movswq %ax,%rsi
	mov    -0x48(%rbp),%rax
	sub    %r15w,%ax
	movswq %ax,%rax
	lea    (%rsi,%rax,1),%edx
	mov    %edx,0x80(%rcx)
	sub    %esi,%eax
	mov    %eax,0x60(%rcx)
	mov    -0x68(%rbp),%rax
	lea    0x2(%rax),%rdx
	mov    -0x60(%rbp),%rax
	add    $0x2,%rax
	add    $0x4,%rcx
	mov    -0x70(%rbp),%rsi
	add    $0xffffffff,%esi
	test   %esi,%esi
	jg     2e835 <jpeg_idct_ifast+0x275>
	mov    -0x30(%rbp),%rax
	mov    %eax,%r13d
	xor    %ecx,%ecx
	mov    -0x38(%rbp),%r14
	lea    -0x170(%rbp),%rdx
	mov    -0x40(%rbp),%rax
	jmpq   2eb36 <jpeg_idct_ifast+0x576>
	movswq 0x10(%rdx),%rdi
	test   %di,%di
	jne    2e607 <jpeg_idct_ifast+0x47>
	movswq 0x20(%rdx),%rdi
	test   %di,%di
	jne    2e607 <jpeg_idct_ifast+0x47>
	movswq 0x30(%rdx),%rdi
	test   %di,%di
	jne    2e607 <jpeg_idct_ifast+0x47>
	movswq 0x40(%rdx),%rdi
	test   %di,%di
	jne    2e607 <jpeg_idct_ifast+0x47>
	movswq 0x50(%rdx),%rdi
	test   %di,%di
	jne    2e607 <jpeg_idct_ifast+0x47>
	movswq 0x60(%rdx),%rdi
	test   %di,%di
	jne    2e607 <jpeg_idct_ifast+0x47>
	movswq 0x70(%rdx),%rdi
	test   %di,%di
	jne    2e607 <jpeg_idct_ifast+0x47>
	movswq (%rax),%rdi
	movswq (%rdx),%rbx
	imul   %ebx,%edi
	mov    %edi,(%rcx)
	mov    %edi,0x20(%rcx)
	mov    %edi,0x40(%rcx)
	mov    %edi,0x60(%rcx)
	mov    %edi,0x80(%rcx)
	mov    %edi,0xa0(%rcx)
	mov    %edi,0xc0(%rcx)
	mov    %edi,0xe0(%rcx)
	add    $0x2,%rdx
	add    $0x2,%rax
	add    $0x4,%rcx
	jmpq   2e811 <jpeg_idct_ifast+0x251>
	movswq 0x10(%rdx),%rsi
	mov    %rsi,-0x60(%rbp)
	movswq (%rdx),%rax
	mov    %rax,-0x58(%rbp)
	add    %esi,%eax
	mov    %rax,-0x38(%rbp)
	movswq 0x18(%rdx),%r11
	movswq 0x8(%rdx),%rsi
	lea    (%r11,%rsi,1),%r10d
	add    %r10d,%eax
	movswq %ax,%rax
	movswq 0x1c(%rdx),%r9
	movswq 0x4(%rdx),%rdi
	mov    %rcx,-0x70(%rbp)
	lea    (%r9,%rdi,1),%ebx
	mov    %rbx,-0x48(%rbp)
	movswq 0xc(%rdx),%r8
	mov    %rdx,-0x68(%rbp)
	movswq 0x14(%rdx),%rdx
	lea    (%r8,%rdx,1),%ecx
	mov    %rcx,-0x50(%rbp)
	add    %ecx,%ebx
	movswq %bx,%r15
	lea    (%r15,%rax,1),%ecx
	and    $0x7fe0,%ecx
	shr    $0x5,%ecx
	movslq %ecx,%rcx
	movzbl 0x80(%r14,%rcx,1),%ecx
	mov    %cl,0x0(%r13,%r12,1)
	sub    %r15d,%eax
	and    $0x7fe0,%eax
	shr    $0x5,%eax
	movslq %eax,%rax
	movzbl 0x80(%r14,%rax,1),%eax
	mov    %al,0x7(%r13,%r12,1)
	sub    %r8w,%dx
	movswq %dx,%r8
	sub    %r9w,%di
	movswq %di,%r9
	lea    (%r9,%r8,1),%eax
	movslq %eax,%rdx
	mov    %rdx,%rcx
	shl    $0x2,%rcx
	lea    (%rdx,%rdx,2),%rax
	lea    (%rcx,%rax,8),%rax
	add    %rdx,%rax
	shl    $0x4,%rax
	lea    (%rax,%rdx,8),%rax
	add    %rax,%rdx
	sar    $0x8,%rdx
	lea    (%r8,%r8,4),%rax
	lea    (%r8,%rax,4),%rcx
	shl    $0x5,%rcx
	lea    (%r8,%r8,2),%rax
	sub    %rcx,%rax
	sar    $0x8,%rax
	lea    (%rax,%rdx,1),%r8d
	mov    %r8,%rax
	sub    %bx,%ax
	movswq %ax,%r15
	sub    %r11d,%esi
	movslq %esi,%rcx
	lea    (%rcx,%rcx,4),%rax
	lea    (%rcx,%rax,2),%rax
	shl    $0x5,%rax
	lea    (%rax,%rcx,8),%rax
	lea    (%rax,%rcx,2),%rsi
	sar    $0x8,%rsi
	mov    %rsi,%rcx
	sub    %r10w,%cx
	mov    -0x60(%rbp),%rax
	mov    -0x58(%rbp),%rdi
	sub    %ax,%di
	lea    (%rdi,%rcx,1),%eax
	movswq %ax,%rax
	lea    (%r15,%rax,1),%ecx
	and    $0x7fe0,%ecx
	shr    $0x5,%ecx
	movslq %ecx,%rcx
	movzbl 0x80(%r14,%rcx,1),%ecx
	mov    %cl,0x1(%r13,%r12,1)
	sub    %r15d,%eax
	and    $0x7fe0,%eax
	shr    $0x5,%eax
	movslq %eax,%rax
	movzbl 0x80(%r14,%rax,1),%eax
	mov    %al,0x6(%r13,%r12,1)
	sub    %r8w,%bx
	mov    -0x48(%rbp),%rax
	movswq %ax,%rax
	mov    -0x50(%rbp),%rcx
	movswq %cx,%rcx
	sub    %ecx,%eax
	movslq %eax,%rcx
	lea    (%rcx,%rcx,4),%rax
	lea    (%rcx,%rax,2),%rax
	shl    $0x5,%rax
	lea    (%rax,%rcx,8),%rax
	lea    (%rax,%rcx,2),%rax
	sar    $0x8,%rax
	lea    (%rbx,%rax,1),%r8d
	movswq %r8w,%rbx
	mov    %r10,%rax
	sub    %si,%ax
	add    %edi,%eax
	movswq %ax,%rax
	lea    (%rbx,%rax,1),%ecx
	and    $0x7fe0,%ecx
	shr    $0x5,%ecx
	movslq %ecx,%rcx
	movzbl 0x80(%r14,%rcx,1),%ecx
	mov    %cl,0x2(%r13,%r12,1)
	sub    %ebx,%eax
	and    $0x7fe0,%eax
	shr    $0x5,%eax
	movslq %eax,%rax
	movzbl 0x80(%r14,%rax,1),%eax
	mov    %al,0x5(%r13,%r12,1)
	mov    %r9,%rax
	shl    $0x4,%rax
	mov    %r9,%rcx
	shl    $0x8,%rcx
	add    %rcx,%rax
	lea    (%rax,%r9,4),%rax
	add    %r9,%rax
	sar    $0x8,%rax
	sub    %dx,%ax
	add    %r8d,%eax
	movswq %ax,%rdx
	mov    -0x38(%rbp),%rax
	sub    %r10w,%ax
	movswq %ax,%rax
	lea    (%rdx,%rax,1),%ecx
	and    $0x7fe0,%ecx
	shr    $0x5,%ecx
	movslq %ecx,%rcx
	movzbl 0x80(%r14,%rcx,1),%ecx
	mov    %cl,0x4(%r13,%r12,1)
	sub    %edx,%eax
	and    $0x7fe0,%eax
	shr    $0x5,%eax
	movslq %eax,%rax
	movzbl 0x80(%rax,%r14,1),%eax
	mov    %al,0x3(%r13,%r12,1)
	mov    -0x68(%rbp),%rax
	lea    0x20(%rax),%rdx
	mov    -0x70(%rbp),%rcx
	mov    -0x40(%rbp),%rax
	add    $0x1,%ecx
	cmp    $0x7,%ecx
	jle    2eb51 <jpeg_idct_ifast+0x591>
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	leaveq 
	retq   
	movslq %ecx,%rsi
	mov    (%rax,%rsi,8),%r12
	movslq 0x4(%rdx),%rsi
	test   %esi,%esi
	jne    2e8d6 <jpeg_idct_ifast+0x316>
	movslq 0x8(%rdx),%rsi
	test   %esi,%esi
	jne    2e8d6 <jpeg_idct_ifast+0x316>
	movslq 0xc(%rdx),%rsi
	test   %esi,%esi
	jne    2e8d6 <jpeg_idct_ifast+0x316>
	movslq 0x10(%rdx),%rsi
	test   %esi,%esi
	jne    2e8d6 <jpeg_idct_ifast+0x316>
	movslq 0x14(%rdx),%rsi
	test   %esi,%esi
	jne    2e8d6 <jpeg_idct_ifast+0x316>
	movslq 0x18(%rdx),%rsi
	test   %esi,%esi
	jne    2e8d6 <jpeg_idct_ifast+0x316>
	movslq 0x1c(%rdx),%rsi
	test   %esi,%esi
	jne    2e8d6 <jpeg_idct_ifast+0x316>
	movslq (%rdx),%rsi
	and    $0x7fe0,%esi
	shr    $0x5,%esi
	movslq %esi,%rsi
	movzbl 0x80(%r14,%rsi,1),%esi
	mov    %sil,0x0(%r13,%r12,1)
	mov    %sil,0x1(%r13,%r12,1)
	mov    %sil,0x2(%r13,%r12,1)
	mov    %sil,0x3(%r13,%r12,1)
	mov    %sil,0x4(%r13,%r12,1)
	mov    %sil,0x5(%r13,%r12,1)
	mov    %sil,0x6(%r13,%r12,1)
	mov    %sil,0x7(%r13,%r12,1)
	add    $0x20,%rdx
	jmpq   2eb33 <jpeg_idct_ifast+0x573>
	nopw   %cs:0x0(%rax,%rax,1)
	nop

002ec00 <jpeg_idct_islow>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x170,%rsp
	mov    %r8,-0x30(%rbp)
	mov    %rcx,-0x40(%rbp)
	mov    %rbx,-0x8(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %r15,-0x28(%rbp)
	mov    0x1a8(%rdi),%rax
	mov    %rax,-0x38(%rbp)
	mov    0x58(%rsi),%rax
	lea    -0x170(%rbp),%rcx
	mov    $0x8,%esi
	jmpq   2ef1c <jpeg_idct_islow+0x31c>
	movswq 0x70(%rax),%rdi
	movswq 0x70(%rdx),%rbx
	imul   %ebx,%edi
	movslq %edi,%r13
	mov    %r13,-0x58(%rbp)
	movswq 0x30(%rax),%rdi
	movswq 0x30(%rdx),%rbx
	imul   %ebx,%edi
	movslq %edi,%r11
	lea    (%r11,%r13,1),%r8
	movswq 0x10(%rax),%rdi
	movswq 0x10(%rdx),%rbx
	imul   %ebx,%edi
	movslq %edi,%r12
	movswq 0x50(%rax),%rdi
	movswq 0x50(%rdx),%rbx
	imul   %ebx,%edi
	movslq %edi,%r15
	lea    (%r12,%r15,1),%r10
	lea    (%r8,%r10,1),%rbx
	lea    (%rbx,%rbx,8),%rdi
	shl    $0x5,%rdi
	lea    (%rdi,%rbx,8),%rdi
	lea    (%rdi,%rbx,4),%rdi
	add    %rbx,%rdi
	shl    $0x5,%rdi
	lea    (%rbx,%rdi,1),%r9
	mov    %r10,%rbx
	shl    $0x2,%rbx
	lea    (%r10,%rbx,1),%rdi
	mov    %rdi,%r10
	shl    $0x7,%r10
	shl    $0x9,%rdi
	add    %r10,%rdi
	sub    %rdi,%rbx
	add    %r9,%rbx
	lea    0x0(%r13,%r12,1),%rdi
	imul   $0xffffffffffffe333,%rdi,%rdi
	mov    %rdi,-0x50(%rbp)
	lea    (%rdi,%rbx,1),%r10
	lea    (%r12,%r12,2),%rdi
	shl    $0xc,%rdi
	lea    (%rdi,%r12,8),%rdi
	lea    (%rdi,%r12,2),%rdi
	add    %r12,%rdi
	lea    (%r10,%rdi,1),%r12
	movswq 0x20(%rax),%rdi
	movswq 0x20(%rdx),%r10
	imul   %r10d,%edi
	movslq %edi,%r14
	movswq 0x60(%rax),%rdi
	mov    %rsi,-0x70(%rbp)
	movswq 0x60(%rdx),%rsi
	imul   %esi,%edi
	movslq %edi,%rdi
	lea    (%r14,%rdi,1),%r13
	mov    %r13,%r10
	shl    $0x4,%r10
	mov    %r13,%rsi
	shl    $0x8,%rsi
	add    %r10,%rsi
	lea    (%rsi,%r13,4),%rsi
	add    %r13,%rsi
	shl    $0x4,%rsi
	lea    0x0(%r13,%rsi,1),%r10
	lea    (%r14,%r14,2),%rsi
	shl    $0x4,%rsi
	add    %r14,%rsi
	shl    $0x7,%rsi
	lea    (%r14,%r14,1),%r13
	sub    %r13,%rsi
	lea    (%r10,%rsi,1),%r14
	movswq 0x40(%rax),%rsi
	movswq 0x40(%rdx),%r13
	imul   %r13d,%esi
	movslq %esi,%r13
	movswq (%rax),%rsi
	mov    %rax,-0x60(%rbp)
	movswq (%rdx),%rax
	imul   %eax,%esi
	movslq %esi,%rax
	lea    0x0(%r13,%rax,1),%rsi
	shl    $0xd,%rsi
	mov    %rdx,-0x68(%rbp)
	mov    %rsi,-0x48(%rbp)
	lea    (%r14,%rsi,1),%rdx
	lea    0x400(%r12,%rdx,1),%rsi
	sar    $0xb,%rsi
	mov    %esi,(%rcx)
	sub    %r12,%rdx
	add    $0x400,%rdx
	sar    $0xb,%rdx
	mov    %edx,0xe0(%rcx)
	lea    (%r8,%r8,4),%rdx
	mov    %rdx,%rsi
	shl    $0x6,%rsi
	sub    %rsi,%rdx
	shl    $0xe,%r8
	lea    (%r8,%rdx,1),%r12
	lea    (%r11,%r15,1),%rsi
	lea    (%rsi,%rsi,4),%rdx
	lea    (%rsi,%rdx,8),%rdx
	shl    $0x9,%rdx
	lea    (%rdx,%rsi,2),%rdx
	lea    (%rsi,%rdx,1),%r8
	lea    (%r12,%r8,1),%rdx
	mov    %r9,%rsi
	sub    %rdx,%rsi
	lea    (%r11,%r11,2),%rdx
	shl    $0x4,%rdx
	add    %r11,%rdx
	shl    $0x5,%rdx
	lea    (%rdx,%r11,4),%rdx
	add    %r11,%rdx
	shl    $0x4,%rdx
	lea    (%rdx,%r11,4),%rdx
	lea    (%rdx,%rsi,1),%r11
	imul   $0xffffffffffffc4df,%rdi,%rdi
	add    %rdi,%r10
	sub    %r13,%rax
	shl    $0xd,%rax
	lea    (%r10,%rax,1),%rdx
	lea    0x400(%r11,%rdx,1),%rsi
	sar    $0xb,%rsi
	mov    %esi,0x20(%rcx)
	sub    %r11,%rdx
	add    $0x400,%rdx
	sar    $0xb,%rdx
	mov    %edx,0xc0(%rcx)
	sub    %r8,%rbx
	mov    %r15,%rsi
	shl    $0x9,%rsi
	mov    %r15,%rdx
	shl    $0xe,%rdx
	add    %rsi,%rdx
	mov    %r15,%rdi
	shl    $0x2,%rdi
	lea    (%r15,%r15,8),%rsi
	lea    (%rdi,%rsi,8),%rsi
	add    %r15,%rsi
	sub    %rsi,%rdx
	lea    (%rdx,%rbx,1),%rsi
	mov    %rax,%rdx
	sub    %r10,%rdx
	lea    0x400(%rsi,%rdx,1),%rdx
	sar    $0xb,%rdx
	mov    %edx,0x40(%rcx)
	lea    (%rsi,%r10,1),%rdx
	sub    %rdx,%rax
	add    $0x400,%rax
	sar    $0xb,%rax
	mov    %eax,0xa0(%rcx)
	sub    %r12,%r9
	mov    -0x50(%rbp),%rax
	lea    (%rax,%r9,1),%rdx
	mov    -0x58(%rbp),%rsi
	lea    (%rsi,%rsi,8),%rax
	lea    (%rsi,%rax,2),%rax
	shl    $0x7,%rax
	lea    (%rax,%rsi,8),%rax
	lea    (%rax,%rsi,4),%rax
	lea    (%rax,%rsi,2),%rax
	lea    (%rdx,%rax,1),%rsi
	mov    -0x48(%rbp),%rdx
	mov    %rdx,%rax
	sub    %r14,%rax
	lea    0x400(%rsi,%rax,1),%rax
	sar    $0xb,%rax
	mov    %eax,0x60(%rcx)
	lea    (%rsi,%r14,1),%rax
	sub    %rax,%rdx
	lea    0x400(%rdx),%rax
	sar    $0xb,%rax
	mov    %eax,0x80(%rcx)
	mov    -0x68(%rbp),%rax
	lea    0x2(%rax),%rdx
	mov    -0x60(%rbp),%rax
	add    $0x2,%rax
	add    $0x4,%rcx
	mov    -0x70(%rbp),%rsi
	add    $0xffffffff,%esi
	test   %esi,%esi
	jg     2ef3d <jpeg_idct_islow+0x33d>
	mov    -0x30(%rbp),%rax
	mov    %eax,%r14d
	xor    %eax,%eax
	mov    -0x38(%rbp),%r15
	lea    -0x170(%rbp),%rcx
	mov    -0x40(%rbp),%rdx
	jmpq   2f2e4 <jpeg_idct_islow+0x6e4>
	movswq 0x10(%rdx),%rdi
	test   %di,%di
	jne    2ec47 <jpeg_idct_islow+0x47>
	movswq 0x20(%rdx),%rdi
	test   %di,%di
	jne    2ec47 <jpeg_idct_islow+0x47>
	movswq 0x30(%rdx),%rdi
	test   %di,%di
	jne    2ec47 <jpeg_idct_islow+0x47>
	movswq 0x40(%rdx),%rdi
	test   %di,%di
	jne    2ec47 <jpeg_idct_islow+0x47>
	movswq 0x50(%rdx),%rdi
	test   %di,%di
	jne    2ec47 <jpeg_idct_islow+0x47>
	movswq 0x60(%rdx),%rdi
	test   %di,%di
	jne    2ec47 <jpeg_idct_islow+0x47>
	movswq 0x70(%rdx),%rdi
	test   %di,%di
	jne    2ec47 <jpeg_idct_islow+0x47>
	movswq (%rax),%rdi
	movswq (%rdx),%rbx
	imul   %ebx,%edi
	shl    $0x2,%edi
	mov    %edi,(%rcx)
	mov    %edi,0x20(%rcx)
	mov    %edi,0x40(%rcx)
	mov    %edi,0x60(%rcx)
	mov    %edi,0x80(%rcx)
	mov    %edi,0xa0(%rcx)
	mov    %edi,0xc0(%rcx)
	mov    %edi,0xe0(%rcx)
	add    $0x2,%rdx
	add    $0x2,%rax
	add    $0x4,%rcx
	jmpq   2ef19 <jpeg_idct_islow+0x319>
	movslq 0x1c(%rcx),%r12
	mov    %r12,-0x48(%rbp)
	movslq 0xc(%rcx),%r10
	lea    (%r10,%r12,1),%rdi
	movslq 0x4(%rcx),%r11
	movslq 0x14(%rcx),%r9
	lea    (%r11,%r9,1),%r8
	lea    (%rdi,%r8,1),%rsi
	lea    (%rsi,%rsi,8),%rdx
	shl    $0x5,%rdx
	lea    (%rdx,%rsi,8),%rdx
	lea    (%rdx,%rsi,4),%rdx
	add    %rsi,%rdx
	shl    $0x5,%rdx
	lea    (%rsi,%rdx,1),%rbx
	mov    %r8,%rdx
	shl    $0x2,%rdx
	lea    (%r8,%rdx,1),%rsi
	mov    %rsi,%r8
	shl    $0x7,%r8
	shl    $0x9,%rsi
	add    %r8,%rsi
	sub    %rsi,%rdx
	lea    (%rbx,%rdx,1),%rsi
	mov    %rsi,-0x60(%rbp)
	lea    (%r12,%r11,1),%rdx
	imul   $0xffffffffffffe333,%rdx,%rdx
	mov    %rdx,-0x38(%rbp)
	add    %rsi,%rdx
	mov    %rax,-0x70(%rbp)
	lea    (%r11,%r11,2),%rax
	shl    $0xc,%rax
	lea    (%rax,%r11,8),%rax
	lea    (%rax,%r11,2),%rax
	add    %r11,%rax
	lea    (%rdx,%rax,1),%r11
	movslq 0x8(%rcx),%r8
	movslq 0x18(%rcx),%rsi
	lea    (%r8,%rsi,1),%r12
	mov    %r12,%rdx
	shl    $0x4,%rdx
	mov    %r12,%rax
	shl    $0x8,%rax
	add    %rdx,%rax
	lea    (%rax,%r12,4),%rax
	add    %r12,%rax
	shl    $0x4,%rax
	add    %rax,%r12
	lea    (%r8,%r8,2),%rax
	shl    $0x4,%rax
	add    %r8,%rax
	shl    $0x7,%rax
	lea    (%r8,%r8,1),%rdx
	sub    %rdx,%rax
	lea    (%r12,%rax,1),%rdx
	mov    %rdx,-0x58(%rbp)
	movslq 0x10(%rcx),%r8
	movslq (%rcx),%rax
	mov    %rcx,-0x68(%rbp)
	lea    (%r8,%rax,1),%rcx
	shl    $0xd,%rcx
	mov    %rcx,-0x50(%rbp)
	add    %rcx,%rdx
	lea    0x20000(%r11,%rdx,1),%rcx
	sar    $0x12,%rcx
	and    $0x3ff,%ecx
	movslq %ecx,%rcx
	movzbl 0x80(%r15,%rcx,1),%ecx
	mov    %cl,(%r14,%r13,1)
	sub    %r11,%rdx
	lea    0x20000(%rdx),%rcx
	sar    $0x12,%rcx
	and    $0x3ff,%ecx
	movslq %ecx,%rcx
	movzbl 0x80(%r15,%rcx,1),%ecx
	mov    %cl,0x7(%r14,%r13,1)
	lea    (%rdi,%rdi,4),%rcx
	mov    %rcx,%rdx
	shl    $0x6,%rdx
	sub    %rdx,%rcx
	shl    $0xe,%rdi
	lea    (%rdi,%rcx,1),%r11
	lea    (%r10,%r9,1),%rdx
	lea    (%rdx,%rdx,4),%rcx
	lea    (%rdx,%rcx,8),%rcx
	shl    $0x9,%rcx
	lea    (%rcx,%rdx,2),%rcx
	lea    (%rdx,%rcx,1),%rdi
	lea    (%r11,%rdi,1),%rcx
	mov    %rbx,%rdx
	sub    %rcx,%rdx
	lea    (%r10,%r10,2),%rcx
	shl    $0x4,%rcx
	add    %r10,%rcx
	shl    $0x5,%rcx
	lea    (%rcx,%r10,4),%rcx
	add    %r10,%rcx
	shl    $0x4,%rcx
	lea    (%rcx,%r10,4),%rcx
	lea    (%rcx,%rdx,1),%r10
	imul   $0xffffffffffffc4df,%rsi,%rsi
	add    %rsi,%r12
	sub    %r8,%rax
	shl    $0xd,%rax
	lea    (%r12,%rax,1),%rdx
	lea    0x20000(%r10,%rdx,1),%rcx
	sar    $0x12,%rcx
	and    $0x3ff,%ecx
	movslq %ecx,%rcx
	movzbl 0x80(%r15,%rcx,1),%ecx
	mov    %cl,0x1(%r14,%r13,1)
	sub    %r10,%rdx
	lea    0x20000(%rdx),%rcx
	sar    $0x12,%rcx
	and    $0x3ff,%ecx
	movslq %ecx,%rcx
	movzbl 0x80(%r15,%rcx,1),%ecx
	mov    %cl,0x6(%r14,%r13,1)
	mov    -0x60(%rbp),%rdx
	sub    %rdi,%rdx
	mov    %r9,%rsi
	shl    $0x9,%rsi
	mov    %r9,%rcx
	shl    $0xe,%rcx
	add    %rsi,%rcx
	mov    %r9,%rsi
	shl    $0x2,%rsi
	lea    (%r9,%r9,8),%rdi
	lea    (%rsi,%rdi,8),%rsi
	add    %r9,%rsi
	sub    %rsi,%rcx
	add    %rcx,%rdx
	mov    %rax,%rcx
	sub    %r12,%rcx
	lea    0x20000(%rdx,%rcx,1),%rcx
	sar    $0x12,%rcx
	and    $0x3ff,%ecx
	movslq %ecx,%rcx
	movzbl 0x80(%r15,%rcx,1),%ecx
	mov    %cl,0x2(%r14,%r13,1)
	lea    (%rdx,%r12,1),%rcx
	sub    %rcx,%rax
	add    $0x20000,%rax
	sar    $0x12,%rax
	and    $0x3ff,%eax
	movslq %eax,%rax
	movzbl 0x80(%r15,%rax,1),%eax
	mov    %al,0x5(%r14,%r13,1)
	sub    %r11,%rbx
	mov    -0x38(%rbp),%rax
	lea    (%rax,%rbx,1),%rdx
	mov    -0x48(%rbp),%rcx
	lea    (%rcx,%rcx,8),%rax
	lea    (%rcx,%rax,2),%rax
	shl    $0x7,%rax
	lea    (%rax,%rcx,8),%rax
	lea    (%rax,%rcx,4),%rax
	lea    (%rax,%rcx,2),%rax
	lea    (%rdx,%rax,1),%rsi
	mov    -0x50(%rbp),%rcx
	mov    -0x58(%rbp),%rdx
	mov    %rcx,%rax
	sub    %rdx,%rax
	lea    0x20000(%rsi,%rax,1),%rax
	sar    $0x12,%rax
	and    $0x3ff,%eax
	movslq %eax,%rax
	movzbl 0x80(%r15,%rax,1),%eax
	mov    %al,0x3(%r14,%r13,1)
	lea    (%rsi,%rdx,1),%rax
	sub    %rax,%rcx
	lea    0x20000(%rcx),%rax
	sar    $0x12,%rax
	and    $0x3ff,%eax
	movslq %eax,%rax
	movzbl 0x80(%rax,%r15,1),%eax
	mov    %al,0x4(%r14,%r13,1)
	mov    -0x68(%rbp),%rax
	lea    0x20(%rax),%rcx
	mov    -0x70(%rbp),%rax
	mov    -0x40(%rbp),%rdx
	add    $0x1,%eax
	cmp    $0x7,%eax
	jle    2f2ff <jpeg_idct_islow+0x6ff>
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	leaveq 
	retq   
	movslq %eax,%rsi
	mov    (%rdx,%rsi,8),%r13
	movslq 0x4(%rcx),%rsi
	test   %esi,%esi
	jne    2efe1 <jpeg_idct_islow+0x3e1>
	movslq 0x8(%rcx),%rsi
	test   %esi,%esi
	jne    2efe1 <jpeg_idct_islow+0x3e1>
	movslq 0xc(%rcx),%rsi
	test   %esi,%esi
	jne    2efe1 <jpeg_idct_islow+0x3e1>
	movslq 0x10(%rcx),%rsi
	test   %esi,%esi
	jne    2efe1 <jpeg_idct_islow+0x3e1>
	movslq 0x14(%rcx),%rsi
	test   %esi,%esi
	jne    2efe1 <jpeg_idct_islow+0x3e1>
	movslq 0x18(%rcx),%rsi
	test   %esi,%esi
	jne    2efe1 <jpeg_idct_islow+0x3e1>
	movslq 0x1c(%rcx),%rsi
	test   %esi,%esi
	jne    2efe1 <jpeg_idct_islow+0x3e1>
	movslq (%rcx),%rsi
	add    $0x10,%rsi
	sar    $0x5,%rsi
	and    $0x3ff,%esi
	movslq %esi,%rsi
	movzbl 0x80(%r15,%rsi,1),%esi
	mov    %sil,(%r14,%r13,1)
	mov    %sil,0x1(%r14,%r13,1)
	mov    %sil,0x2(%r14,%r13,1)
	mov    %sil,0x3(%r14,%r13,1)
	mov    %sil,0x4(%r14,%r13,1)
	mov    %sil,0x5(%r14,%r13,1)
	mov    %sil,0x6(%r14,%r13,1)
	mov    %sil,0x7(%r14,%r13,1)
	add    $0x20,%rcx
	jmpq   2f2e1 <jpeg_idct_islow+0x6e1>
	nopw   0x0(%rax,%rax,1)

002f3b0 <jpeg_idct_7x7>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x140,%rsp
	mov    %r8,-0x30(%rbp)
	mov    %rcx,-0x38(%rbp)
	mov    %rbx,-0x48(%rbp)
	mov    %r12,-0x50(%rbp)
	mov    %r13,-0x58(%rbp)
	mov    %r14,-0x60(%rbp)
	mov    %r15,-0x68(%rbp)
	mov    0x1a8(%rdi),%rax
	mov    %rax,-0x40(%rbp)
	mov    0x58(%rsi),%rbx
	xor    %r8d,%r8d
	lea    -0x134(%rbp),%r9
	jmpq   2f67f <jpeg_idct_7x7+0x2cf>
	movswq 0x10(%rbx),%rax
	movswq 0x10(%rdx),%rcx
	imul   %ecx,%eax
	movslq %eax,%r11
	movswq 0x30(%rbx),%rax
	movswq 0x30(%rdx),%rcx
	imul   %ecx,%eax
	movslq %eax,%r14
	mov    %r11,%rcx
	sub    %r14,%rcx
	lea    (%rcx,%rcx,2),%rax
	lea    (%rcx,%rax,4),%r15
	lea    (%rcx,%rcx,4),%rax
	lea    (%rcx,%rax,2),%rdi
	shl    $0x7,%rdi
	mov    %r15,%r10
	sub    %rdi,%r10
	lea    (%r11,%r14,1),%rsi
	mov    %rsi,%rcx
	shl    $0x4,%rcx
	mov    %rsi,%rax
	shl    $0x9,%rax
	add    %rcx,%rax
	add    %rsi,%rax
	shl    $0xd,%rsi
	sub    %rax,%rsi
	lea    (%rsi,%r10,1),%r12
	movswq 0x50(%rbx),%rax
	movswq 0x50(%rdx),%rcx
	imul   %ecx,%eax
	movslq %eax,%rcx
	add    %rcx,%r11
	lea    (%r11,%r11,4),%rax
	shl    $0x5,%rax
	lea    (%r11,%r11,2),%r10
	sub    %r10,%rax
	shl    $0x5,%rax
	lea    (%rax,%r11,2),%rax
	add    %r11,%rax
	mov    %rax,-0x18(%rbp)
	add    %rax,%r12
	movswq 0x40(%rbx),%rax
	movswq 0x40(%rdx),%r10
	imul   %r10d,%eax
	movslq %eax,%r10
	movswq 0x60(%rbx),%rax
	movswq 0x60(%rdx),%r11
	imul   %r11d,%eax
	movslq %eax,%r11
	mov    %r10,%r13
	sub    %r11,%r13
	mov    %r8,-0x70(%rbp)
	lea    0x0(%r13,%r13,2),%rax
	lea    0x0(%r13,%rax,2),%rax
	shl    $0x4,%rax
	add    %r13,%rax
	shl    $0x6,%rax
	lea    0x0(%r13,%r13,8),%r8
	sub    %r8,%rax
	movswq 0x20(%rbx),%r8
	movswq 0x20(%rdx),%r13
	imul   %r13d,%r8d
	movslq %r8d,%r8
	mov    %r8,-0x10(%rbp)
	lea    (%r11,%r8,1),%r13
	lea    0x0(%r13,%r13,4),%r8
	shl    $0x5,%r8
	lea    (%r8,%r13,2),%r8
	add    %r13,%r8
	shl    $0x6,%r8
	lea    (%r8,%r13,4),%r8
	lea    (%r8,%r13,2),%r8
	mov    %rbx,-0x28(%rbp)
	movswq (%rbx),%rbx
	mov    %rdx,-0x20(%rbp)
	movswq (%rdx),%rdx
	imul   %edx,%ebx
	movslq %ebx,%rbx
	shl    $0xd,%rbx
	add    %rbx,%r8
	lea    (%r11,%r11,2),%rdx
	lea    (%r11,%r11,4),%r11
	shl    $0x7,%r11
	sub    %r11,%rdx
	lea    0x400(%r8,%rdx,1),%rdx
	add    %rax,%rdx
	lea    (%r12,%rdx,1),%r11
	sar    $0xb,%r11
	mov    %r11d,(%r9)
	sub    %r12,%rdx
	sar    $0xb,%rdx
	mov    %edx,0xa8(%r9)
	sub    %r15,%rdi
	lea    (%rsi,%rdi,1),%rdx
	lea    (%rcx,%r14,1),%rdi
	imul   $0xffffffffffffd3e1,%rdi,%rdi
	lea    (%rdi,%rdx,1),%r15
	mov    -0x10(%rbp),%rsi
	mov    %rsi,%r11
	sub    %r10,%r11
	lea    (%r11,%r11,4),%rdx
	shl    $0x5,%rdx
	add    %r11,%rdx
	shl    $0x4,%rdx
	lea    (%rdx,%r11,2),%r11
	add    %r11,%rax
	lea    (%rax,%rbx,1),%r12
	lea    (%r10,%r10,4),%rax
	shl    $0x4,%rax
	add    %r10,%rax
	shl    $0x4,%rax
	lea    (%rax,%r10,4),%rax
	lea    (%r10,%rax,1),%r14
	mov    %r10,%rdx
	shl    $0xe,%rdx
	mov    %r14,%rax
	sub    %rdx,%rax
	lea    0x400(%r12,%rax,1),%rax
	add    %r15,%rax
	sar    $0xb,%rax
	mov    %eax,0x1c(%r9)
	lea    0x400(%r12),%rax
	sub    %r14,%rdx
	add    %r15,%rdx
	sub    %rdx,%rax
	sar    $0xb,%rax
	mov    %eax,0x8c(%r9)
	lea    0x400(%r8),%rax
	imul   $0x4f0f,%rsi,%rsi
	sub    %rsi,%rax
	add    %r11,%rax
	mov    %rcx,%rdx
	shl    $0x5,%rdx
	mov    %rcx,%rsi
	shl    $0xa,%rsi
	add    %rsi,%rdx
	lea    (%rdx,%rcx,2),%rdx
	shl    $0xe,%rcx
	sub    %rdx,%rcx
	mov    -0x18(%rbp),%rdx
	add    %rdx,%rcx
	lea    (%rcx,%rdi,1),%rdx
	lea    (%rdx,%rax,1),%rcx
	sar    $0xb,%rcx
	mov    %ecx,0x38(%r9)
	sub    %rdx,%rax
	sar    $0xb,%rax
	mov    %eax,0x70(%r9)
	sub    %r13,%r10
	lea    (%r10,%r10,8),%rax
	shl    $0x8,%rax
	lea    (%rax,%r10,8),%rax
	lea    (%rax,%r10,4),%rax
	add    %r10,%rax
	lea    (%rax,%rax,4),%rax
	lea    0x400(%rax,%rbx,1),%rax
	sar    $0xb,%rax
	mov    %eax,0x54(%r9)
	mov    -0x28(%rbp),%rax
	lea    0x2(%rax),%rbx
	mov    -0x20(%rbp),%rax
	lea    0x2(%rax),%rdx
	add    $0x4,%r9
	mov    -0x70(%rbp),%rax
	lea    0x1(%rax),%r8d
	cmp    $0x6,%r8d
	jle    2f3f5 <jpeg_idct_7x7+0x45>
	mov    -0x30(%rbp),%rax
	mov    %eax,%r10d
	mov    -0x40(%rbp),%r15
	lea    -0x134(%rbp),%r8
	xor    %ebx,%ebx
	mov    -0x38(%rbp),%r9
	jmpq   2f973 <jpeg_idct_7x7+0x5c3>
	movslq 0x10(%r8),%rcx
	mov    %rcx,-0x30(%rbp)
	movslq 0x18(%r8),%rdi
	sub    %rdi,%rcx
	lea    (%rcx,%rcx,2),%rax
	lea    (%rcx,%rax,2),%rax
	shl    $0x4,%rax
	add    %rcx,%rax
	shl    $0x6,%rax
	lea    (%rcx,%rcx,8),%rcx
	sub    %rcx,%rax
	mov    %rax,-0x28(%rbp)
	movslq 0x8(%r8),%rcx
	mov    %rcx,-0x20(%rbp)
	lea    (%rdi,%rcx,1),%rdx
	mov    %rdx,-0x8(%rbp)
	lea    (%rdx,%rdx,4),%rcx
	shl    $0x5,%rcx
	lea    (%rcx,%rdx,2),%rcx
	add    %rdx,%rcx
	shl    $0x6,%rcx
	lea    (%rcx,%rdx,4),%rcx
	lea    (%rcx,%rdx,2),%rdx
	mov    %rdx,-0x18(%rbp)
	movslq (%r8),%rcx
	shl    $0xd,%rcx
	mov    %rcx,-0x70(%rbp)
	lea    (%rcx,%rdx,1),%rsi
	lea    (%rdi,%rdi,2),%rdx
	lea    (%rdi,%rdi,4),%rcx
	shl    $0x7,%rcx
	sub    %rcx,%rdx
	lea    0x20000(%rsi,%rdx,1),%rcx
	add    %rax,%rcx
	movslq 0x4(%r8),%r14
	movslq 0xc(%r8),%r13
	mov    %r14,%rdx
	sub    %r13,%rdx
	lea    (%rdx,%rdx,4),%rax
	lea    (%rdx,%rax,2),%rdi
	shl    $0x7,%rdi
	lea    (%rdx,%rdx,2),%rax
	lea    (%rdx,%rax,4),%r12
	mov    %r12,%rax
	sub    %rdi,%rax
	lea    (%r14,%r13,1),%rsi
	mov    %rsi,%r11
	shl    $0x4,%r11
	mov    %rsi,%rdx
	shl    $0x9,%rdx
	add    %r11,%rdx
	add    %rsi,%rdx
	shl    $0xd,%rsi
	sub    %rdx,%rsi
	lea    (%rsi,%rax,1),%r11
	movslq 0x14(%r8),%rdx
	add    %rdx,%r14
	lea    (%r14,%r14,4),%rax
	shl    $0x5,%rax
	mov    %r8,-0x40(%rbp)
	lea    (%r14,%r14,2),%r8
	sub    %r8,%rax
	shl    $0x5,%rax
	lea    (%rax,%r14,2),%rax
	add    %rax,%r14
	add    %r14,%r11
	lea    (%r11,%rcx,1),%rax
	sar    $0x12,%rax
	and    $0x3ff,%eax
	movslq %eax,%rax
	movzbl 0x80(%r15,%rax,1),%eax
	movslq %ebx,%r8
	mov    (%r9,%r8,8),%r8
	mov    %al,(%r10,%r8,1)
	sub    %r11,%rcx
	sar    $0x12,%rcx
	and    $0x3ff,%ecx
	movslq %ecx,%rax
	movzbl 0x80(%r15,%rax,1),%eax
	mov    %al,0x6(%r10,%r8,1)
	sub    %r12,%rdi
	lea    (%rsi,%rdi,1),%rcx
	lea    (%rdx,%r13,1),%rax
	imul   $0xffffffffffffd3e1,%rax,%rax
	mov    %rax,-0x10(%rbp)
	lea    (%rax,%rcx,1),%r9
	mov    -0x30(%rbp),%rcx
	mov    -0x20(%rbp),%rsi
	mov    %rsi,%rdi
	sub    %rcx,%rdi
	lea    (%rdi,%rdi,4),%rax
	shl    $0x5,%rax
	add    %rdi,%rax
	shl    $0x4,%rax
	lea    (%rax,%rdi,2),%r12
	mov    -0x28(%rbp),%rax
	lea    (%r12,%rax,1),%r11
	mov    -0x70(%rbp),%r13
	lea    (%r11,%r13,1),%rdi
	mov    %rbx,-0x70(%rbp)
	lea    (%rcx,%rcx,4),%rax
	shl    $0x4,%rax
	add    %rcx,%rax
	shl    $0x4,%rax
	lea    (%rax,%rcx,4),%rax
	lea    (%rcx,%rax,1),%rbx
	shl    $0xe,%rcx
	mov    %rbx,%rax
	sub    %rcx,%rax
	lea    0x20000(%rdi,%rax,1),%rax
	add    %r9,%rax
	sar    $0x12,%rax
	and    $0x3ff,%eax
	movslq %eax,%rax
	movzbl 0x80(%r15,%rax,1),%eax
	mov    %al,0x1(%r10,%r8,1)
	lea    0x20000(%r11,%r13,1),%rax
	sub    %rbx,%rcx
	add    %r9,%rcx
	sub    %rcx,%rax
	sar    $0x12,%rax
	and    $0x3ff,%eax
	movslq %eax,%rax
	movzbl 0x80(%r15,%rax,1),%eax
	mov    %al,0x5(%r10,%r8,1)
	mov    -0x18(%rbp),%rax
	lea    0x20000(%r13,%rax,1),%rax
	imul   $0x4f0f,%rsi,%rsi
	sub    %rsi,%rax
	add    %r12,%rax
	mov    %rdx,%rsi
	shl    $0x5,%rsi
	mov    %rdx,%rcx
	shl    $0xa,%rcx
	add    %rsi,%rcx
	lea    (%rcx,%rdx,2),%rcx
	shl    $0xe,%rdx
	sub    %rcx,%rdx
	lea    (%r14,%rdx,1),%rcx
	mov    -0x10(%rbp),%rdx
	add    %rcx,%rdx
	lea    (%rdx,%rax,1),%rcx
	sar    $0x12,%rcx
	and    $0x3ff,%ecx
	movslq %ecx,%rcx
	movzbl 0x80(%r15,%rcx,1),%ecx
	mov    %cl,0x2(%r10,%r8,1)
	sub    %rdx,%rax
	sar    $0x12,%rax
	and    $0x3ff,%eax
	movslq %eax,%rax
	movzbl 0x80(%r15,%rax,1),%eax
	mov    %al,0x4(%r10,%r8,1)
	mov    -0x30(%rbp),%rcx
	mov    -0x8(%rbp),%rax
	sub    %rax,%rcx
	lea    (%rcx,%rcx,8),%rax
	shl    $0x8,%rax
	lea    (%rax,%rcx,8),%rax
	lea    (%rax,%rcx,4),%rax
	add    %rcx,%rax
	lea    (%rax,%rax,4),%rax
	lea    0x20000(%rax,%r13,1),%rax
	sar    $0x12,%rax
	and    $0x3ff,%eax
	movslq %eax,%rax
	movzbl 0x80(%rax,%r15,1),%eax
	mov    %al,0x3(%r10,%r8,1)
	mov    -0x70(%rbp),%rax
	lea    0x1(%rax),%ebx
	mov    -0x40(%rbp),%rax
	lea    0x1c(%rax),%r8
	mov    -0x38(%rbp),%r9
	cmp    $0x6,%ebx
	jle    2f6a6 <jpeg_idct_7x7+0x2f6>
	mov    -0x68(%rbp),%r15
	mov    -0x60(%rbp),%r14
	mov    -0x58(%rbp),%r13
	mov    -0x50(%rbp),%r12
	mov    -0x48(%rbp),%rbx
	leaveq 
	retq   
	data16 nopw %cs:0x0(%rax,%rax,1)
	nopl   (%rax)

002f9a0 <jpeg_idct_6x6>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0xe0,%rsp
	mov    %r8,-0x10(%rbp)
	mov    %rbx,-0x28(%rbp)
	mov    %r12,-0x30(%rbp)
	mov    %r13,-0x38(%rbp)
	mov    %r14,-0x40(%rbp)
	mov    %r15,-0x48(%rbp)
	mov    %rcx,-0x18(%rbp)
	mov    0x1a8(%rdi),%rax
	mov    %rax,-0x20(%rbp)
	mov    0x58(%rsi),%r8
	mov    %rdx,%rax
	xor    %r9d,%r9d
	lea    -0xe0(%rbp),%rbx
	jmpq   2fb56 <jpeg_idct_6x6+0x1b6>
	movswq 0x50(%r8),%rcx
	movswq 0x50(%rax),%rdx
	imul   %edx,%ecx
	movslq %ecx,%rsi
	movswq 0x10(%r8),%rcx
	movswq 0x10(%rax),%rdx
	imul   %edx,%ecx
	movslq %ecx,%rcx
	lea    (%rsi,%rcx,1),%rdi
	lea    (%rdi,%rdi,8),%rdx
	shl    $0x3,%rdx
	lea    (%rdx,%rdi,2),%rdx
	lea    (%rdi,%rdi,2),%rdi
	shl    $0xa,%rdi
	sub    %rdx,%rdi
	movswq 0x30(%r8),%rdx
	movswq 0x30(%rax),%r10
	imul   %r10d,%edx
	movslq %edx,%r15
	lea    (%r15,%rcx,1),%rdx
	shl    $0xd,%rdx
	lea    (%rdi,%rdx,1),%r14
	movswq 0x40(%r8),%rdx
	movswq 0x40(%rax),%r10
	imul   %r10d,%edx
	movslq %edx,%r13
	lea    0x0(%r13,%r13,4),%rdx
	lea    0x0(%r13,%rdx,2),%rdx
	shl    $0x4,%rdx
	lea    (%rdx,%r13,4),%rdx
	add    %r13,%rdx
	mov    %rdx,%r10
	shl    $0x5,%r10
	lea    0x0(%r13,%r10,1),%r11
	movswq (%r8),%r10
	movswq (%rax),%r12
	imul   %r12d,%r10d
	movslq %r10d,%r10
	shl    $0xd,%r10
	lea    (%r11,%r10,1),%r12
	movswq 0x20(%r8),%r11
	mov    %r9,-0x50(%rbp)
	movswq 0x20(%rax),%r9
	imul   %r9d,%r11d
	movslq %r11d,%r11
	lea    (%r11,%r11,2),%r9
	lea    (%r11,%r9,4),%r9
	mov    %rax,-0x8(%rbp)
	lea    (%r11,%r11,4),%rax
	shl    $0x7,%rax
	sub    %r9,%rax
	shl    $0x4,%rax
	add    %rax,%r11
	lea    (%r12,%r11,1),%r9
	lea    0x400(%r14,%r9,1),%rax
	sar    $0xb,%rax
	mov    %eax,(%rbx)
	lea    0x400(%r9),%rax
	sub    %r14,%rax
	sar    $0xb,%rax
	mov    %eax,0x78(%rbx)
	shl    $0x6,%rdx
	lea    (%rdx,%r13,2),%rdx
	lea    0x400(%r10),%rax
	sub    %rdx,%rax
	sar    $0xb,%rax
	lea    (%r15,%rsi,1),%rdx
	sub    %rdx,%rcx
	shl    $0x2,%rcx
	lea    (%rax,%rcx,1),%rdx
	mov    %edx,0x18(%rbx)
	sub    %rcx,%rax
	mov    %eax,0x60(%rbx)
	sub    %r15,%rsi
	shl    $0xd,%rsi
	lea    (%rdi,%rsi,1),%rdx
	lea    0x400(%r12),%rax
	mov    %rax,%rcx
	sub    %r11,%rcx
	add    %rdx,%rcx
	sar    $0xb,%rcx
	mov    %ecx,0x30(%rbx)
	lea    (%rdx,%r11,1),%rcx
	sub    %rcx,%rax
	sar    $0xb,%rax
	mov    %eax,0x48(%rbx)
	add    $0x2,%r8
	mov    -0x8(%rbp),%rax
	add    $0x2,%rax
	add    $0x4,%rbx
	mov    -0x50(%rbp),%rcx
	lea    0x1(%rcx),%r9d
	cmp    $0x5,%r9d
	jle    2f9e8 <jpeg_idct_6x6+0x48>
	mov    -0x10(%rbp),%rax
	mov    %eax,%r9d
	mov    -0x18(%rbp),%r14
	mov    -0x20(%rbp),%r15
	lea    -0xe0(%rbp),%rdx
	xor    %edi,%edi
	jmpq   2fd2d <jpeg_idct_6x6+0x38d>
	movslq 0x14(%rdx),%rsi
	movslq 0x4(%rdx),%rcx
	lea    (%rsi,%rcx,1),%r8
	lea    (%r8,%r8,8),%rax
	shl    $0x3,%rax
	lea    (%rax,%r8,2),%rbx
	lea    (%r8,%r8,2),%rax
	shl    $0xa,%rax
	sub    %rbx,%rax
	mov    %rax,-0x10(%rbp)
	movslq 0xc(%rdx),%r12
	lea    (%r12,%rcx,1),%rbx
	shl    $0xd,%rbx
	lea    (%rax,%rbx,1),%r10
	movslq 0x8(%rdx),%r8
	lea    (%r8,%r8,2),%rax
	lea    (%r8,%rax,4),%rbx
	lea    (%r8,%r8,4),%rax
	shl    $0x7,%rax
	sub    %rbx,%rax
	shl    $0x4,%rax
	lea    (%r8,%rax,1),%r11
	movslq 0x10(%rdx),%r13
	lea    0x0(%r13,%r13,4),%rax
	lea    0x0(%r13,%rax,2),%rax
	shl    $0x4,%rax
	lea    (%rax,%r13,4),%rax
	lea    0x0(%r13,%rax,1),%r8
	mov    %r8,%rax
	shl    $0x5,%rax
	add    %r13,%rax
	mov    %rdx,-0x20(%rbp)
	mov    %rax,-0x18(%rbp)
	movslq (%rdx),%rbx
	shl    $0xd,%rbx
	lea    (%rax,%rbx,1),%rdx
	lea    (%rdx,%r11,1),%rax
	lea    0x20000(%r10,%rax,1),%rax
	sar    $0x12,%rax
	and    $0x3ff,%eax
	movslq %eax,%rax
	movzbl 0x80(%r15,%rax,1),%eax
	mov    %rdi,-0x50(%rbp)
	movslq %edi,%rdi
	mov    (%r14,%rdi,8),%rdi
	mov    %al,(%r9,%rdi,1)
	lea    0x20000(%rdx,%r11,1),%rax
	sub    %r10,%rax
	sar    $0x12,%rax
	and    $0x3ff,%eax
	movslq %eax,%rax
	movzbl 0x80(%r15,%rax,1),%eax
	mov    %al,0x5(%r9,%rdi,1)
	lea    (%r12,%rsi,1),%rax
	sub    %rax,%rcx
	shl    $0xd,%rcx
	shl    $0x6,%r8
	lea    (%r8,%r13,2),%r8
	lea    0x20000(%rbx),%rax
	mov    %rax,%rdx
	sub    %r8,%rdx
	add    %rcx,%rdx
	sar    $0x12,%rdx
	and    $0x3ff,%edx
	movslq %edx,%rdx
	movzbl 0x80(%r15,%rdx,1),%edx
	mov    %dl,0x1(%r9,%rdi,1)
	add    %r8,%rcx
	sub    %rcx,%rax
	sar    $0x12,%rax
	and    $0x3ff,%eax
	movslq %eax,%rax
	movzbl 0x80(%r15,%rax,1),%eax
	mov    %al,0x4(%r9,%rdi,1)
	sub    %r12,%rsi
	shl    $0xd,%rsi
	mov    -0x10(%rbp),%rax
	lea    (%rax,%rsi,1),%rdx
	mov    -0x18(%rbp),%rax
	lea    0x20000(%rax,%rbx,1),%rax
	mov    %rax,%rcx
	sub    %r11,%rcx
	add    %rdx,%rcx
	sar    $0x12,%rcx
	and    $0x3ff,%ecx
	movslq %ecx,%rcx
	movzbl 0x80(%r15,%rcx,1),%ecx
	mov    %cl,0x2(%r9,%rdi,1)
	lea    (%rdx,%r11,1),%rcx
	sub    %rcx,%rax
	sar    $0x12,%rax
	and    $0x3ff,%eax
	movslq %eax,%rax
	movzbl 0x80(%rax,%r15,1),%eax
	mov    %al,0x3(%r9,%rdi,1)
	mov    -0x50(%rbp),%rax
	lea    0x1(%rax),%edi
	mov    -0x20(%rbp),%rax
	lea    0x18(%rax),%rdx
	cmp    $0x5,%edi
	jle    2fb7d <jpeg_idct_6x6+0x1dd>
	mov    -0x48(%rbp),%r15
	mov    -0x40(%rbp),%r14
	mov    -0x38(%rbp),%r13
	mov    -0x30(%rbp),%r12
	mov    -0x28(%rbp),%rbx
	leaveq 
	retq   
	nopl   0x0(%rax)

002fd50 <jpeg_idct_5x5>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0xa0,%rsp
	mov    %r8,-0x18(%rbp)
	mov    %r12,-0x20(%rbp)
	mov    %r13,-0x28(%rbp)
	mov    %r14,-0x30(%rbp)
	mov    %r15,-0x38(%rbp)
	mov    %rcx,-0x8(%rbp)
	mov    0x1a8(%rdi),%rax
	mov    %rax,-0x10(%rbp)
	mov    0x58(%rsi),%rdi
	xor    %esi,%esi
	lea    -0x9c(%rbp),%rcx
	jmpq   2fef8 <jpeg_idct_5x5+0x1a8>
	movswq 0x20(%rdi),%rax
	movswq 0x20(%rdx),%r8
	imul   %r8d,%eax
	movslq %eax,%r11
	movswq 0x40(%rdi),%rax
	movswq 0x40(%rdx),%r8
	imul   %r8d,%eax
	movslq %eax,%r10
	mov    %r11,%r8
	sub    %r10,%r8
	lea    (%r8,%r8,4),%rax
	lea    (%r8,%rax,2),%rax
	shl    $0x4,%rax
	lea    (%rax,%r8,4),%rax
	lea    (%r8,%rax,1),%r9
	mov    %r9,%r12
	shl    $0x4,%r12
	movswq (%rdi),%rax
	movswq (%rdx),%r8
	imul   %r8d,%eax
	movslq %eax,%r8
	shl    $0xd,%r8
	lea    (%r8,%r12,1),%r14
	add    %r11,%r10
	lea    (%r10,%r10,2),%rax
	shl    $0x5,%rax
	lea    (%rax,%r10,4),%rax
	add    %r10,%rax
	shl    $0x6,%rax
	lea    (%rax,%r10,8),%rax
	lea    (%rax,%r10,4),%r10
	lea    (%r14,%r10,1),%r12
	movswq 0x30(%rdi),%rax
	movswq 0x30(%rdx),%r11
	imul   %r11d,%eax
	movslq %eax,%r15
	movswq 0x10(%rdi),%rax
	movswq 0x10(%rdx),%r11
	imul   %r11d,%eax
	movslq %eax,%r11
	lea    (%r15,%r11,1),%r13
	lea    0x0(%r13,%r13,4),%rax
	shl    $0x4,%rax
	lea    (%rax,%r13,4),%rax
	add    %r13,%rax
	shl    $0x4,%rax
	lea    (%rax,%r13,2),%rax
	lea    (%rax,%rax,4),%r13
	mov    %r11,%rax
	shl    $0x8,%rax
	lea    (%rax,%r11,8),%rax
	sub    %r11,%rax
	shl    $0x4,%rax
	add    %r11,%rax
	lea    0x0(%r13,%rax,1),%r11
	lea    0x400(%r11,%r12,1),%rax
	sar    $0xb,%rax
	mov    %eax,(%rcx)
	lea    0x400(%r12),%rax
	sub    %r11,%rax
	sar    $0xb,%rax
	mov    %eax,0x50(%rcx)
	lea    0x400(%r14),%rax
	sub    %r10,%rax
	mov    %r15,%r11
	shl    $0x5,%r11
	mov    %r15,%r10
	shl    $0x9,%r10
	add    %r11,%r10
	lea    (%r10,%r15,8),%r10
	lea    (%r10,%r15,4),%r10
	add    %r15,%r10
	shl    $0x5,%r10
	lea    (%r10,%r15,4),%r10
	mov    %r13,%r11
	sub    %r10,%r11
	add    %rax,%r11
	sar    $0xb,%r11
	mov    %r11d,0x14(%rcx)
	sub    %r13,%r10
	add    %r10,%rax
	sar    $0xb,%rax
	mov    %eax,0x3c(%rcx)
	shl    $0x6,%r9
	lea    0x400(%r8),%rax
	sub    %r9,%rax
	sar    $0xb,%rax
	mov    %eax,0x28(%rcx)
	add    $0x2,%rdi
	add    $0x2,%rdx
	add    $0x4,%rcx
	add    $0x1,%esi
	cmp    $0x4,%esi
	jle    2fd90 <jpeg_idct_5x5+0x40>
	mov    -0x18(%rbp),%rax
	mov    %eax,%r15d
	mov    %rbx,-0x18(%rbp)
	mov    -0x8(%rbp),%r14
	mov    -0x10(%rbp),%r13
	lea    -0x9c(%rbp),%rax
	xor    %ecx,%ecx
	jmpq   300ac <jpeg_idct_5x5+0x35c>
	movslq 0x8(%rax),%rsi
	movslq 0x10(%rax),%rbx
	lea    (%rbx,%rsi,1),%rdi
	lea    (%rdi,%rdi,2),%rdx
	shl    $0x5,%rdx
	lea    (%rdx,%rdi,4),%rdx
	add    %rdi,%rdx
	shl    $0x6,%rdx
	lea    (%rdx,%rdi,8),%rdx
	lea    (%rdx,%rdi,4),%r9
	sub    %rbx,%rsi
	lea    (%rsi,%rsi,4),%rdx
	lea    (%rsi,%rdx,2),%rdx
	shl    $0x4,%rdx
	lea    (%rdx,%rsi,4),%rdx
	add    %rdx,%rsi
	mov    %rsi,%r10
	shl    $0x4,%r10
	movslq (%rax),%rdi
	shl    $0xd,%rdi
	lea    (%rdi,%r10,1),%rbx
	lea    (%rbx,%r9,1),%r8
	movslq 0xc(%rax),%r12
	movslq 0x4(%rax),%rdx
	lea    (%r12,%rdx,1),%r11
	mov    %rax,-0x10(%rbp)
	lea    (%r11,%r11,4),%rax
	shl    $0x4,%rax
	lea    (%rax,%r11,4),%rax
	add    %r11,%rax
	shl    $0x4,%rax
	lea    (%rax,%r11,2),%rax
	lea    (%rax,%rax,4),%r11
	mov    %rdx,%rax
	shl    $0x8,%rax
	lea    (%rax,%rdx,8),%rax
	sub    %rdx,%rax
	shl    $0x4,%rax
	add    %rdx,%rax
	lea    (%r11,%rax,1),%rdx
	lea    0x20000(%rdx,%r8,1),%rax
	sar    $0x12,%rax
	and    $0x3ff,%eax
	movslq %eax,%rax
	movzbl 0x80(%r13,%rax,1),%eax
	movslq %ecx,%r8
	mov    (%r14,%r8,8),%r8
	mov    %al,(%r15,%r8,1)
	lea    0x20000(%rbx,%r9,1),%rax
	sub    %rdx,%rax
	sar    $0x12,%rax
	and    $0x3ff,%eax
	movslq %eax,%rax
	movzbl 0x80(%r13,%rax,1),%eax
	mov    %al,0x4(%r15,%r8,1)
	lea    0x20000(%rdi,%r10,1),%rdx
	sub    %r9,%rdx
	mov    %r12,%rbx
	shl    $0x5,%rbx
	mov    %r12,%rax
	shl    $0x9,%rax
	add    %rbx,%rax
	lea    (%rax,%r12,8),%rax
	lea    (%rax,%r12,4),%rax
	add    %r12,%rax
	shl    $0x5,%rax
	lea    (%rax,%r12,4),%rbx
	mov    %r11,%rax
	sub    %rbx,%rax
	add    %rdx,%rax
	sar    $0x12,%rax
	and    $0x3ff,%eax
	movslq %eax,%rax
	movzbl 0x80(%r13,%rax,1),%eax
	mov    %al,0x1(%r15,%r8,1)
	sub    %r11,%rbx
	lea    (%rbx,%rdx,1),%rax
	sar    $0x12,%rax
	and    $0x3ff,%eax
	movslq %eax,%rax
	movzbl 0x80(%r13,%rax,1),%eax
	mov    %al,0x3(%r15,%r8,1)
	shl    $0x6,%rsi
	lea    0x20000(%rdi),%rax
	sub    %rsi,%rax
	sar    $0x12,%rax
	and    $0x3ff,%eax
	movslq %eax,%rax
	movzbl 0x80(%rax,%r13,1),%eax
	mov    %al,0x2(%r15,%r8,1)
	add    $0x1,%ecx
	mov    -0x10(%rbp),%rax
	add    $0x14,%rax
	cmp    $0x4,%ecx
	jle    2ff22 <jpeg_idct_5x5+0x1d2>
	mov    -0x38(%rbp),%r15
	mov    -0x30(%rbp),%r14
	mov    -0x28(%rbp),%r13
	mov    -0x20(%rbp),%r12
	mov    -0x18(%rbp),%rbx
	leaveq 
	retq   
	nopl   0x0(%rax,%rax,1)

00300d0 <jpeg_idct_3x3>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x50,%rsp
	mov    %r8,-0x18(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %r15,-0x28(%rbp)
	mov    %rcx,-0x8(%rbp)
	mov    0x1a8(%rdi),%rax
	mov    %rax,-0x10(%rbp)
	mov    0x58(%rsi),%rdi
	xor    %esi,%esi
	lea    -0x4c(%rbp),%rcx
	jmpq   301bc <jpeg_idct_3x3+0xec>
	movswq 0x20(%rdi),%rax
	movswq 0x20(%rdx),%r8
	imul   %r8d,%eax
	movslq %eax,%r11
	lea    (%r11,%r11,4),%rax
	lea    (%r11,%rax,2),%rax
	shl    $0x4,%rax
	lea    (%rax,%r11,4),%rax
	lea    (%r11,%rax,1),%r9
	mov    %r9,%rax
	shl    $0x5,%rax
	lea    (%r11,%rax,1),%r10
	movswq (%rdi),%rax
	movswq (%rdx),%r8
	imul   %r8d,%eax
	movslq %eax,%r8
	shl    $0xd,%r8
	lea    (%r8,%r10,1),%r15
	movswq 0x10(%rdi),%rax
	movswq 0x10(%rdx),%r10
	imul   %r10d,%eax
	movslq %eax,%r14
	lea    (%r14,%r14,2),%rax
	lea    (%r14,%rax,4),%r10
	lea    (%r14,%r14,4),%rax
	shl    $0x7,%rax
	sub    %r10,%rax
	shl    $0x4,%rax
	lea    (%r14,%rax,1),%r10
	lea    0x400(%r15,%r10,1),%rax
	sar    $0xb,%rax
	mov    %eax,(%rcx)
	lea    0x400(%r15),%rax
	sub    %r10,%rax
	sar    $0xb,%rax
	mov    %eax,0x18(%rcx)
	shl    $0x6,%r9
	lea    (%r9,%r11,2),%r9
	lea    0x400(%r8),%rax
	sub    %r9,%rax
	sar    $0xb,%rax
	mov    %eax,0xc(%rcx)
	add    $0x2,%rdi
	add    $0x2,%rdx
	add    $0x4,%rcx
	add    $0x1,%esi
	cmp    $0x2,%esi
	jle    30102 <jpeg_idct_3x3+0x32>
	mov    -0x18(%rbp),%rax
	mov    %eax,%r15d
	mov    %r13,-0x18(%rbp)
	mov    -0x8(%rbp),%r11
	mov    -0x10(%rbp),%r13
	lea    -0x4c(%rbp),%rdx
	xor    %ecx,%ecx
	jmpq   302b0 <jpeg_idct_3x3+0x1e0>
	movslq 0x4(%rdx),%rdi
	lea    (%rdi,%rdi,2),%rax
	lea    (%rdi,%rax,4),%rsi
	lea    (%rdi,%rdi,4),%rax
	shl    $0x7,%rax
	sub    %rsi,%rax
	shl    $0x4,%rax
	lea    (%rdi,%rax,1),%r8
	movslq 0x8(%rdx),%r10
	lea    (%r10,%r10,4),%rax
	lea    (%r10,%rax,2),%rax
	shl    $0x4,%rax
	lea    (%rax,%r10,4),%rax
	lea    (%r10,%rax,1),%rsi
	mov    %rsi,%rax
	shl    $0x5,%rax
	lea    (%r10,%rax,1),%r9
	movslq (%rdx),%rdi
	shl    $0xd,%rdi
	lea    (%rdi,%r9,1),%rax
	lea    0x20000(%rax,%r8,1),%rax
	sar    $0x12,%rax
	and    $0x3ff,%eax
	movslq %eax,%rax
	movzbl 0x80(%r13,%rax,1),%eax
	movslq %ecx,%r14
	mov    (%r11,%r14,8),%r14
	mov    %al,(%r15,%r14,1)
	lea    0x20000(%rdi,%r9,1),%rax
	sub    %r8,%rax
	sar    $0x12,%rax
	and    $0x3ff,%eax
	movslq %eax,%rax
	movzbl 0x80(%r13,%rax,1),%eax
	mov    %al,0x2(%r15,%r14,1)
	shl    $0x6,%rsi
	lea    (%rsi,%r10,2),%rsi
	lea    0x20000(%rdi),%rax
	sub    %rsi,%rax
	sar    $0x12,%rax
	and    $0x3ff,%eax
	movslq %eax,%rax
	movzbl 0x80(%rax,%r13,1),%eax
	mov    %al,0x1(%r15,%r14,1)
	add    $0x1,%ecx
	add    $0xc,%rdx
	cmp    $0x2,%ecx
	jle    301e3 <jpeg_idct_3x3+0x113>
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	leaveq 
	retq   
	nopw   0x0(%rax,%rax,1)

00302d0 <jpeg_idct_9x9>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x1c0,%rsp
	mov    %r8,-0x58(%rbp)
	mov    %rcx,-0x60(%rbp)
	mov    %rbx,-0x70(%rbp)
	mov    %r12,-0x78(%rbp)
	mov    %r13,-0x80(%rbp)
	mov    %r14,-0x88(%rbp)
	mov    %r15,-0x90(%rbp)
	mov    0x1a8(%rdi),%rax
	mov    %rax,-0x68(%rbp)
	mov    0x58(%rsi),%rcx
	xor    %esi,%esi
	lea    -0x1b8(%rbp),%rdi
	jmpq   305fd <jpeg_idct_9x9+0x32d>
	movswq 0x10(%rcx),%rax
	movswq 0x10(%rdx),%rbx
	imul   %ebx,%eax
	movslq %eax,%r8
	mov    %r8,-0x10(%rbp)
	movswq 0x70(%rcx),%rax
	movswq 0x70(%rdx),%rbx
	imul   %ebx,%eax
	movslq %eax,%r13
	lea    0x0(%r13,%r8,1),%rax
	mov    %rax,%rbx
	shl    $0x7,%rbx
	lea    (%rbx,%rax,4),%rbx
	lea    (%rbx,%rax,2),%rbx
	shl    $0xc,%rax
	sub    %rbx,%rax
	mov    %rax,-0x40(%rbp)
	movswq 0x50(%rcx),%rbx
	movswq 0x50(%rdx),%r9
	imul   %r9d,%ebx
	movslq %ebx,%rbx
	add    %rbx,%r8
	imul   $0x1d17,%r8,%r8
	mov    %r8,-0x28(%rbp)
	lea    (%r8,%rax,1),%r10
	movswq 0x30(%rcx),%rax
	movswq 0x30(%rdx),%r8
	imul   %r8d,%eax
	movslq %eax,%r8
	imul   $0xffffffffffffd8cf,%r8,%r8
	mov    %r10,%r11
	sub    %r8,%r11
	movswq 0x40(%rcx),%rax
	movswq 0x40(%rdx),%r9
	imul   %r9d,%eax
	movslq %eax,%r15
	movswq 0x20(%rcx),%rax
	mov    %rsi,-0x98(%rbp)
	movswq 0x20(%rdx),%rsi
	imul   %esi,%eax
	movslq %eax,%r12
	lea    (%r15,%r12,1),%rsi
	mov    %rsi,-0x18(%rbp)
	lea    (%rsi,%rsi,4),%rax
	shl    $0x4,%rax
	lea    (%rax,%rsi,4),%rax
	add    %rsi,%rax
	shl    $0x7,%rax
	lea    (%rax,%rsi,8),%r9
	mov    %r9,-0x20(%rbp)
	sub    %rsi,%r9
	movswq 0x60(%rcx),%rax
	movswq 0x60(%rdx),%rsi
	imul   %esi,%eax
	movslq %eax,%r14
	lea    (%r14,%r14,4),%rax
	lea    (%r14,%rax,2),%rax
	shl    $0x4,%rax
	lea    (%rax,%r14,4),%rax
	lea    (%r14,%rax,1),%rsi
	mov    %rsi,%rax
	shl    $0x5,%rax
	add    %r14,%rax
	mov    %rcx,-0x50(%rbp)
	movswq (%rcx),%rcx
	mov    %rdx,-0x48(%rbp)
	movswq (%rdx),%rdx
	imul   %edx,%ecx
	movslq %ecx,%rcx
	shl    $0xd,%rcx
	add    %rcx,%rax
	mov    %rax,-0x30(%rbp)
	add    %r9,%rax
	lea    (%r15,%r15,8),%r9
	shl    $0x2,%r9
	mov    %r15,%rdx
	shl    $0xb,%rdx
	mov    %rdx,-0x38(%rbp)
	neg    %rdx
	add    %r9,%rdx
	lea    0x400(%rax,%rdx,1),%rdx
	lea    (%r11,%rdx,1),%rax
	sar    $0xb,%rax
	mov    %eax,(%rdi)
	mov    %r8,%rax
	sub    %r10,%rax
	add    %rdx,%rax
	sar    $0xb,%rax
	mov    %eax,0x100(%rdi)
	neg    %r15
	add    %r12,%r15
	lea    (%r15,%r15,4),%rax
	lea    (%r15,%rax,2),%rax
	shl    $0x4,%rax
	lea    (%rax,%r15,4),%rax
	add    %r15,%rax
	shl    $0x5,%rax
	lea    (%r15,%rax,1),%r10
	shl    $0x6,%rsi
	lea    (%rsi,%r14,2),%rax
	lea    0x400(%rcx),%rdx
	neg    %rax
	add    %rdx,%rax
	lea    (%rax,%r10,1),%rcx
	lea    0x0(%r13,%rbx,1),%rax
	mov    -0x10(%rbp),%rsi
	sub    %rax,%rsi
	lea    (%rsi,%rsi,2),%rax
	lea    (%rsi,%rax,4),%r10
	lea    (%rsi,%rsi,4),%rax
	shl    $0x7,%rax
	sub    %r10,%rax
	shl    $0x4,%rax
	add    %rax,%rsi
	lea    (%rcx,%rsi,1),%rax
	sar    $0xb,%rax
	mov    %eax,0x20(%rdi)
	sub    %rsi,%rcx
	sar    $0xb,%rcx
	mov    %ecx,0xe0(%rdi)
	sub    %r13,%rbx
	lea    (%rbx,%rbx,4),%rax
	lea    (%rbx,%rax,2),%rax
	shl    $0x6,%rax
	lea    (%rax,%rbx,8),%rax
	add    %rbx,%rax
	shl    $0x4,%rax
	lea    (%rbx,%rax,1),%r11
	mov    %r8,%rcx
	sub    %r11,%rcx
	mov    -0x28(%rbp),%rax
	lea    (%rcx,%rax,1),%rbx
	mov    -0x18(%rbp),%rax
	mov    -0x20(%rbp),%rcx
	sub    %rcx,%rax
	mov    -0x30(%rbp),%rsi
	lea    0x400(%rsi,%rax,1),%rcx
	mov    %r12,%r10
	shl    $0x4,%r10
	mov    %r12,%rax
	shl    $0x8,%rax
	add    %r10,%rax
	lea    (%rax,%r12,4),%rax
	add    %r12,%rax
	shl    $0x5,%rax
	lea    (%rax,%r12,8),%rax
	lea    (%rax,%r12,2),%rax
	lea    (%r12,%rax,1),%r10
	lea    (%r10,%rcx,1),%rax
	lea    (%rbx,%rax,1),%rcx
	sar    $0xb,%rcx
	mov    %ecx,0x40(%rdi)
	sub    %rbx,%rax
	sar    $0xb,%rax
	mov    %eax,0xc0(%rdi)
	lea    (%r8,%r11,1),%rcx
	mov    -0x40(%rbp),%rax
	lea    (%rcx,%rax,1),%rbx
	lea    0x400(%rsi),%rax
	sub    %r10,%rax
	mov    -0x38(%rbp),%rcx
	sub    %r9,%rcx
	add    %rcx,%rax
	lea    (%rbx,%rax,1),%rcx
	sar    $0xb,%rcx
	mov    %ecx,0x60(%rdi)
	sub    %rbx,%rax
	sar    $0xb,%rax
	mov    %eax,0xa0(%rdi)
	lea    (%r15,%r14,1),%rcx
	lea    (%rcx,%rcx,4),%rax
	lea    (%rcx,%rax,2),%rax
	shl    $0x4,%rax
	lea    (%rax,%rcx,4),%rax
	add    %rcx,%rax
	shl    $0x6,%rax
	lea    (%rax,%rcx,2),%rax
	sub    %rax,%rdx
	sar    $0xb,%rdx
	mov    %edx,0x80(%rdi)
	mov    -0x50(%rbp),%rax
	lea    0x2(%rax),%rcx
	mov    -0x48(%rbp),%rax
	lea    0x2(%rax),%rdx
	add    $0x4,%rdi
	mov    -0x98(%rbp),%rax
	lea    0x1(%rax),%esi
	cmp    $0x7,%esi
	jle    3031a <jpeg_idct_9x9+0x4a>
	mov    -0x58(%rbp),%rax
	mov    %eax,%r10d
	mov    -0x68(%rbp),%r15
	lea    -0x1b8(%rbp),%rsi
	xor    %edx,%edx
	mov    -0x60(%rbp),%rcx
	jmpq   30954 <jpeg_idct_9x9+0x684>
	movslq 0x8(%rsi),%r14
	movslq 0x10(%rsi),%r13
	lea    0x0(%r13,%r14,1),%rdi
	mov    %rdi,-0x40(%rbp)
	lea    (%rdi,%rdi,4),%rax
	shl    $0x4,%rax
	lea    (%rax,%rdi,4),%rax
	add    %rdi,%rax
	shl    $0x7,%rax
	lea    (%rax,%rdi,8),%rbx
	mov    %rbx,-0x48(%rbp)
	sub    %rdi,%rbx
	movslq 0x18(%rsi),%r12
	lea    (%r12,%r12,4),%rax
	lea    (%r12,%rax,2),%rax
	shl    $0x4,%rax
	lea    (%rax,%r12,4),%rax
	lea    (%r12,%rax,1),%rdi
	mov    %rdi,%rax
	shl    $0x5,%rax
	add    %r12,%rax
	mov    %rax,-0x18(%rbp)
	movslq (%rsi),%r8
	shl    $0xd,%r8
	add    %r8,%rax
	mov    %rax,-0x38(%rbp)
	add    %rax,%rbx
	mov    %r13,%r9
	shl    $0xb,%r9
	mov    %r9,-0x20(%rbp)
	lea    0x0(%r13,%r13,8),%rax
	shl    $0x2,%rax
	mov    %rax,-0x28(%rbp)
	sub    %r9,%rax
	lea    0x20000(%rbx,%rax,1),%r11
	movslq 0x1c(%rsi),%rax
	mov    %rax,-0x58(%rbp)
	movslq 0x4(%rsi),%r9
	mov    %r9,-0x50(%rbp)
	add    %r9,%rax
	mov    %rax,%rbx
	shl    $0x7,%rbx
	lea    (%rbx,%rax,4),%rbx
	lea    (%rbx,%rax,2),%rbx
	shl    $0xc,%rax
	sub    %rbx,%rax
	mov    %rax,-0x10(%rbp)
	movslq 0x14(%rsi),%rbx
	add    %rbx,%r9
	imul   $0x1d17,%r9,%r9
	mov    %r9,-0x30(%rbp)
	add    %rax,%r9
	mov    %rsi,-0x68(%rbp)
	movslq 0xc(%rsi),%rsi
	imul   $0xffffffffffffd8cf,%rsi,%rsi
	mov    %r9,%rax
	sub    %rsi,%rax
	add    %r11,%rax
	sar    $0x12,%rax
	and    $0x3ff,%eax
	movslq %eax,%rax
	movzbl 0x80(%r15,%rax,1),%eax
	mov    %rdx,-0x98(%rbp)
	movslq %edx,%rdx
	mov    (%rcx,%rdx,8),%rdx
	mov    %al,(%r10,%rdx,1)
	mov    %rsi,%rax
	sub    %r9,%rax
	add    %r11,%rax
	sar    $0x12,%rax
	and    $0x3ff,%eax
	movslq %eax,%rax
	movzbl 0x80(%r15,%rax,1),%eax
	mov    %al,0x8(%r10,%rdx,1)
	mov    %r14,%r11
	sub    %r13,%r11
	lea    (%r11,%r11,4),%rax
	lea    (%r11,%rax,2),%rax
	shl    $0x4,%rax
	lea    (%rax,%r11,4),%rax
	add    %r11,%rax
	shl    $0x5,%rax
	lea    (%r11,%rax,1),%rcx
	shl    $0x6,%rdi
	lea    (%rdi,%r12,2),%rdi
	lea    0x20000(%r8),%rax
	mov    %rax,-0x8(%rbp)
	sub    %rdi,%rax
	add    %rax,%rcx
	mov    -0x58(%rbp),%r13
	lea    0x0(%r13,%rbx,1),%rax
	mov    -0x50(%rbp),%rdi
	sub    %rax,%rdi
	lea    (%rdi,%rdi,2),%rax
	lea    (%rdi,%rax,4),%r9
	lea    (%rdi,%rdi,4),%rax
	shl    $0x7,%rax
	sub    %r9,%rax
	shl    $0x4,%rax
	add    %rax,%rdi
	lea    (%rcx,%rdi,1),%rax
	sar    $0x12,%rax
	and    $0x3ff,%eax
	movslq %eax,%rax
	movzbl 0x80(%r15,%rax,1),%eax
	mov    %al,0x1(%r10,%rdx,1)
	sub    %rdi,%rcx
	sar    $0x12,%rcx
	and    $0x3ff,%ecx
	movslq %ecx,%rax
	movzbl 0x80(%r15,%rax,1),%eax
	mov    %al,0x7(%r10,%rdx,1)
	mov    -0x40(%rbp),%rax
	mov    -0x48(%rbp),%rcx
	sub    %rcx,%rax
	mov    -0x38(%rbp),%rcx
	lea    0x20000(%rcx,%rax,1),%rcx
	mov    %r14,%rdi
	shl    $0x4,%rdi
	mov    %r14,%rax
	shl    $0x8,%rax
	add    %rdi,%rax
	lea    (%rax,%r14,4),%rax
	add    %r14,%rax
	shl    $0x5,%rax
	lea    (%rax,%r14,8),%rax
	lea    (%rax,%r14,2),%rax
	lea    (%r14,%rax,1),%r9
	lea    (%r9,%rcx,1),%rax
	sub    %r13,%rbx
	lea    (%rbx,%rbx,4),%rcx
	lea    (%rbx,%rcx,2),%rcx
	shl    $0x6,%rcx
	lea    (%rcx,%rbx,8),%rcx
	add    %rbx,%rcx
	shl    $0x4,%rcx
	add    %rcx,%rbx
	mov    %rsi,%rcx
	sub    %rbx,%rcx
	mov    -0x30(%rbp),%rdi
	add    %rcx,%rdi
	lea    (%rdi,%rax,1),%rcx
	sar    $0x12,%rcx
	and    $0x3ff,%ecx
	movslq %ecx,%rcx
	movzbl 0x80(%r15,%rcx,1),%ecx
	mov    %cl,0x2(%r10,%rdx,1)
	sub    %rdi,%rax
	sar    $0x12,%rax
	and    $0x3ff,%eax
	movslq %eax,%rax
	movzbl 0x80(%r15,%rax,1),%eax
	mov    %al,0x6(%r10,%rdx,1)
	lea    (%rsi,%rbx,1),%rax
	mov    -0x10(%rbp),%rcx
	lea    (%rax,%rcx,1),%rsi
	mov    -0x18(%rbp),%rax
	lea    0x20000(%r8,%rax,1),%rcx
	sub    %r9,%rcx
	mov    -0x20(%rbp),%rax
	mov    -0x28(%rbp),%rdi
	sub    %rdi,%rax
	add    %rcx,%rax
	lea    (%rsi,%rax,1),%rcx
	sar    $0x12,%rcx
	and    $0x3ff,%ecx
	movslq %ecx,%rcx
	movzbl 0x80(%r15,%rcx,1),%ecx
	mov    %cl,0x3(%r10,%rdx,1)
	sub    %rsi,%rax
	sar    $0x12,%rax
	and    $0x3ff,%eax
	movslq %eax,%rax
	movzbl 0x80(%r15,%rax,1),%eax
	mov    %al,0x5(%r10,%rdx,1)
	lea    (%r11,%r12,1),%rcx
	lea    (%rcx,%rcx,4),%rax
	lea    (%rcx,%rax,2),%rax
	shl    $0x4,%rax
	lea    (%rax,%rcx,4),%rax
	add    %rcx,%rax
	shl    $0x6,%rax
	lea    (%rax,%rcx,2),%rcx
	mov    -0x8(%rbp),%rax
	sub    %rcx,%rax
	sar    $0x12,%rax
	and    $0x3ff,%eax
	movslq %eax,%rax
	movzbl 0x80(%rax,%r15,1),%eax
	mov    %al,0x4(%r10,%rdx,1)
	mov    -0x98(%rbp),%rax
	lea    0x1(%rax),%edx
	mov    -0x68(%rbp),%rax
	lea    0x20(%rax),%rsi
	mov    -0x60(%rbp),%rcx
	cmp    $0x8,%edx
	jle    30623 <jpeg_idct_9x9+0x353>
	mov    -0x90(%rbp),%r15
	mov    -0x88(%rbp),%r14
	mov    -0x80(%rbp),%r13
	mov    -0x78(%rbp),%r12
	mov    -0x70(%rbp),%rbx
	leaveq 
	retq   
	nopl   0x0(%rax)

0030980 <jpeg_idct_10x10>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x210,%rsp
	mov    %r8,-0x88(%rbp)
	mov    %rcx,-0x90(%rbp)
	mov    %rbx,-0xa0(%rbp)
	mov    %r12,-0xa8(%rbp)
	mov    %r13,-0xb0(%rbp)
	mov    %r14,-0xb8(%rbp)
	mov    %r15,-0xc0(%rbp)
	mov    0x1a8(%rdi),%rax
	mov    %rax,-0x98(%rbp)
	mov    0x58(%rsi),%rdi
	mov    %rdx,%r9
	xor    %ecx,%ecx
	lea    -0x208(%rbp),%rsi
	jmpq   30d50 <jpeg_idct_10x10+0x3d0>
	movswq 0x30(%rdi),%rax
	movswq 0x30(%r9),%rdx
	imul   %edx,%eax
	movslq %eax,%r12
	mov    %r12,-0x10(%rbp)
	movswq 0x70(%rdi),%rax
	movswq 0x70(%r9),%rdx
	imul   %edx,%eax
	movslq %eax,%r8
	mov    %r8,-0x8(%rbp)
	mov    %r12,%rbx
	sub    %r8,%rbx
	lea    (%rbx,%rbx,2),%r14
	mov    %r14,%rax
	shl    $0x3,%rax
	lea    (%rax,%rbx,4),%rax
	lea    (%rbx,%rax,1),%r10
	lea    (%rbx,%rbx,4),%rax
	shl    $0x9,%rax
	sub    %r10,%rax
	movswq 0x50(%rdi),%rdx
	movswq 0x50(%r9),%r11
	imul   %r11d,%edx
	movslq %edx,%r11
	mov    %r11,-0x18(%rbp)
	shl    $0xd,%r11
	lea    (%rax,%r11,1),%rdx
	mov    %rdx,-0x48(%rbp)
	add    %r8,%r12
	lea    (%r12,%r12,2),%rax
	lea    (%r12,%rax,8),%rax
	shl    $0x4,%rax
	add    %r12,%rax
	mov    %rcx,-0xc8(%rbp)
	mov    %rax,-0x50(%rbp)
	mov    %r12,%rcx
	shl    $0xd,%rcx
	mov    %rcx,-0x58(%rbp)
	sub    %rax,%rcx
	movswq 0x10(%rdi),%rax
	movswq 0x10(%r9),%r8
	imul   %r8d,%eax
	movslq %eax,%r15
	mov    %r15,%rax
	imul   $0x2cb3,%rax,%rax
	add    %rcx,%rax
	add    %rax,%rdx
	movswq 0x20(%rdi),%rax
	movswq 0x20(%r9),%rcx
	imul   %ecx,%eax
	movslq %eax,%rcx
	movswq 0x60(%rdi),%rax
	movswq 0x60(%r9),%r8
	imul   %r8d,%eax
	movslq %eax,%rax
	mov    %rax,-0x20(%rbp)
	lea    (%rcx,%rax,1),%r8
	lea    (%r8,%r8,4),%rax
	shl    $0x4,%rax
	lea    (%rax,%r8,4),%rax
	add    %r8,%rax
	shl    $0x4,%rax
	lea    (%rax,%r8,2),%rax
	lea    (%rax,%rax,4),%r8
	mov    %r8,-0x28(%rbp)
	mov    %rcx,%rax
	shl    $0x8,%rax
	lea    (%rax,%rcx,8),%rax
	sub    %rcx,%rax
	shl    $0x4,%rax
	add    %rcx,%rax
	add    %rax,%r8
	mov    %r8,-0x60(%rbp)
	movswq 0x40(%rdi),%rax
	movswq 0x40(%r9),%rcx
	imul   %ecx,%eax
	movslq %eax,%r13
	lea    0x0(%r13,%r13,8),%rax
	shl    $0x5,%rax
	mov    %r13,%rcx
	shl    $0x2,%rcx
	mov    %rcx,-0x38(%rbp)
	add    %rcx,%rax
	add    %r13,%rax
	shl    $0x5,%rax
	lea    0x0(%r13,%r13,2),%rcx
	sub    %rcx,%rax
	mov    %rdi,-0x70(%rbp)
	movswq (%rdi),%rdi
	mov    %r9,-0x68(%rbp)
	movswq (%r9),%r9
	imul   %r9d,%edi
	movslq %edi,%rdi
	shl    $0xd,%rdi
	add    %rdi,%rax
	mov    %rax,-0x40(%rbp)
	add    %rax,%r8
	lea    0x400(%rdx,%r8,1),%rax
	sar    $0xb,%rax
	mov    %eax,(%rsi)
	lea    0x400(%r8),%rax
	sub    %rdx,%rax
	sar    $0xb,%rax
	mov    %eax,0x120(%rsi)
	lea    (%rbx,%r14,4),%rdx
	shl    $0x9,%rdx
	lea    (%r10,%r11,1),%rax
	mov    %rdx,%rbx
	sub    %rax,%rbx
	lea    (%r12,%r12,8),%rax
	shl    $0x5,%rax
	lea    (%rax,%r12,8),%rax
	lea    (%rax,%r12,4),%rax
	add    %r12,%rax
	shl    $0x4,%rax
	sub    %rax,%r12
	lea    (%r15,%r15,4),%rax
	shl    $0x7,%rax
	lea    (%rax,%r15,4),%rax
	add    %r15,%rax
	shl    $0x4,%rax
	lea    (%rax,%r15,2),%rax
	add    %r15,%rax
	add    %r12,%rax
	lea    (%rax,%rbx,1),%r14
	mov    -0x20(%rbp),%rbx
	mov    %rbx,%r8
	shl    $0x5,%r8
	mov    %rbx,%rax
	shl    $0x9,%rax
	add    %r8,%rax
	lea    (%rax,%rbx,8),%rax
	lea    (%rax,%rbx,4),%rax
	add    %rbx,%rax
	shl    $0x5,%rax
	lea    (%rax,%rbx,4),%rbx
	mov    -0x28(%rbp),%r9
	mov    %r9,%r8
	sub    %rbx,%r8
	lea    0x0(%r13,%rcx,2),%rax
	shl    $0x9,%rax
	mov    -0x38(%rbp),%rcx
	neg    %rax
	add    %rcx,%rax
	lea    0x400(%rdi,%rax,1),%rax
	mov    %rax,-0x30(%rbp)
	add    %r8,%rax
	lea    (%r14,%rax,1),%r8
	sar    $0xb,%r8
	mov    %r8d,0x20(%rsi)
	sub    %r14,%rax
	sar    $0xb,%rax
	mov    %eax,0x100(%rsi)
	lea    0x0(%r13,%rcx,1),%rax
	lea    0x0(%r13,%rax,2),%rax
	shl    $0x4,%rax
	add    %rcx,%rax
	add    %r13,%rax
	shl    $0x6,%rax
	lea    (%rax,%r13,2),%rcx
	lea    0x400(%rdi),%rax
	sub    %rcx,%rax
	sar    $0xb,%rax
	mov    -0x10(%rbp),%rdi
	mov    -0x8(%rbp),%rcx
	sub    %rdi,%rcx
	add    %r15,%rcx
	mov    -0x18(%rbp),%rdi
	sub    %rdi,%rcx
	shl    $0x2,%rcx
	lea    (%rax,%rcx,1),%rdi
	mov    %edi,0x40(%rsi)
	sub    %rcx,%rax
	mov    %eax,0xe0(%rsi)
	sub    %rdx,%r10
	lea    (%r11,%r10,1),%rax
	mov    %r15,%rdx
	shl    $0x4,%rdx
	mov    %r15,%rcx
	shl    $0xa,%rcx
	add    %rdx,%rcx
	lea    (%rcx,%r15,8),%rcx
	lea    (%rcx,%r15,4),%rcx
	lea    (%rcx,%rcx,4),%rcx
	add    %r12,%rcx
	lea    (%rax,%rcx,1),%rdx
	sub    %r9,%rbx
	mov    -0x30(%rbp),%rax
	add    %rbx,%rax
	lea    (%rdx,%rax,1),%rcx
	sar    $0xb,%rcx
	mov    %ecx,0x60(%rsi)
	sub    %rdx,%rax
	sar    $0xb,%rax
	mov    %eax,0xc0(%rsi)
	mov    -0x58(%rbp),%rax
	mov    -0x50(%rbp),%rcx
	sub    %rax,%rcx
	lea    (%r15,%r15,2),%rax
	lea    (%r15,%rax,2),%rax
	shl    $0x4,%rax
	add    %r15,%rax
	shl    $0x4,%rax
	lea    (%rax,%r15,4),%rax
	add    %rcx,%rax
	mov    -0x48(%rbp),%rcx
	lea    (%rcx,%rax,1),%rdi
	mov    -0x40(%rbp),%rax
	add    $0x400,%rax
	mov    -0x60(%rbp),%rdx
	mov    %rax,%rcx
	sub    %rdx,%rcx
	add    %rdi,%rcx
	sar    $0xb,%rcx
	mov    %ecx,0x80(%rsi)
	lea    (%rdi,%rdx,1),%rcx
	sub    %rcx,%rax
	sar    $0xb,%rax
	mov    %eax,0xa0(%rsi)
	mov    -0x70(%rbp),%rax
	lea    0x2(%rax),%rdi
	mov    -0x68(%rbp),%rax
	lea    0x2(%rax),%r9
	add    $0x4,%rsi
	mov    -0xc8(%rbp),%rax
	lea    0x1(%rax),%ecx
	cmp    $0x7,%ecx
	jle    309df <jpeg_idct_10x10+0x5f>
	mov    -0x88(%rbp),%rax
	mov    %eax,%r10d
	mov    -0x98(%rbp),%r15
	lea    -0x208(%rbp),%rdx
	xor    %ecx,%ecx
	mov    -0x90(%rbp),%rsi
	jmpq   31178 <jpeg_idct_10x10+0x7f8>
	movslq 0xc(%rdx),%r11
	mov    %r11,-0x50(%rbp)
	movslq 0x1c(%rdx),%rdi
	mov    %rdi,-0x48(%rbp)
	mov    %r11,%r13
	sub    %rdi,%r13
	lea    0x0(%r13,%r13,2),%r12
	mov    %r12,%rax
	shl    $0x3,%rax
	lea    (%rax,%r13,4),%rax
	lea    0x0(%r13,%rax,1),%rbx
	lea    0x0(%r13,%r13,4),%rax
	shl    $0x9,%rax
	sub    %rbx,%rax
	movslq 0x14(%rdx),%r8
	mov    %r8,-0x58(%rbp)
	shl    $0xd,%r8
	lea    (%rax,%r8,1),%r9
	mov    %r9,-0x20(%rbp)
	lea    (%rdi,%r11,1),%rax
	mov    %rax,-0x60(%rbp)
	lea    (%rax,%rax,2),%rdi
	lea    (%rax,%rdi,8),%rdi
	shl    $0x4,%rdi
	add    %rax,%rdi
	mov    %rdi,-0x28(%rbp)
	shl    $0xd,%rax
	mov    %rax,-0x30(%rbp)
	sub    %rdi,%rax
	movslq 0x4(%rdx),%rdi
	mov    %rdi,-0x68(%rbp)
	imul   $0x2cb3,%rdi,%rdi
	add    %rdi,%rax
	lea    (%r9,%rax,1),%rdi
	movslq 0x8(%rdx),%r11
	movslq 0x18(%rdx),%rax
	mov    %rax,-0x78(%rbp)
	lea    (%r11,%rax,1),%r9
	lea    (%r9,%r9,4),%rax
	shl    $0x4,%rax
	lea    (%rax,%r9,4),%rax
	add    %r9,%rax
	shl    $0x4,%rax
	lea    (%rax,%r9,2),%rax
	lea    (%rax,%rax,4),%r9
	mov    %r9,-0x70(%rbp)
	mov    %r11,%rax
	shl    $0x8,%rax
	lea    (%rax,%r11,8),%rax
	sub    %r11,%rax
	shl    $0x4,%rax
	add    %r11,%rax
	add    %rax,%r9
	mov    %r9,-0x40(%rbp)
	movslq 0x10(%rdx),%r14
	lea    (%r14,%r14,8),%rax
	shl    $0x5,%rax
	mov    %r14,%r11
	shl    $0x2,%r11
	mov    %r11,-0x88(%rbp)
	add    %r11,%rax
	add    %r14,%rax
	shl    $0x5,%rax
	lea    (%r14,%r14,2),%r11
	sub    %r11,%rax
	mov    %rdx,-0x98(%rbp)
	mov    %rax,-0x38(%rbp)
	movslq (%rdx),%rdx
	shl    $0xd,%rdx
	mov    %rdx,-0x80(%rbp)
	add    %rax,%rdx
	lea    (%r9,%rdx,1),%rax
	lea    0x20000(%rdi,%rax,1),%rax
	sar    $0x12,%rax
	and    $0x3ff,%eax
	movslq %eax,%rax
	movzbl 0x80(%r15,%rax,1),%eax
	mov    %rcx,-0xc8(%rbp)
	movslq %ecx,%rcx
	mov    (%rsi,%rcx,8),%rsi
	mov    %al,(%r10,%rsi,1)
	lea    0x20000(%r9,%rdx,1),%rax
	sub    %rdi,%rax
	sar    $0x12,%rax
	and    $0x3ff,%eax
	movslq %eax,%rax
	movzbl 0x80(%r15,%rax,1),%eax
	mov    %al,0x9(%r10,%rsi,1)
	lea    0x0(%r13,%r12,4),%rdi
	shl    $0x9,%rdi
	lea    (%rbx,%r8,1),%rax
	mov    %rdi,%rcx
	sub    %rax,%rcx
	mov    -0x60(%rbp),%r9
	lea    (%r9,%r9,8),%rax
	shl    $0x5,%rax
	lea    (%rax,%r9,8),%rax
	lea    (%rax,%r9,4),%rax
	add    %r9,%rax
	shl    $0x4,%rax
	sub    %rax,%r9
	mov    -0x68(%rbp),%r13
	lea    0x0(%r13,%r13,4),%rax
	shl    $0x7,%rax
	lea    (%rax,%r13,4),%rax
	add    %r13,%rax
	shl    $0x4,%rax
	lea    (%rax,%r13,2),%rax
	add    %r13,%rax
	add    %r9,%rax
	lea    (%rax,%rcx,1),%rdx
	mov    -0x78(%rbp),%r12
	mov    %r12,%rcx
	shl    $0x5,%rcx
	mov    %r12,%rax
	shl    $0x9,%rax
	add    %rcx,%rax
	lea    (%rax,%r12,8),%rax
	lea    (%rax,%r12,4),%rax
	add    %r12,%rax
	shl    $0x5,%rax
	lea    (%rax,%r12,4),%rcx
	mov    %rcx,-0x78(%rbp)
	mov    -0x70(%rbp),%rax
	sub    %rcx,%rax
	lea    (%r14,%r11,2),%rcx
	shl    $0x9,%rcx
	mov    -0x88(%rbp),%r11
	neg    %rcx
	add    %r11,%rcx
	mov    -0x80(%rbp),%r12
	lea    0x20000(%r12,%rcx,1),%rcx
	mov    %rcx,-0x80(%rbp)
	add    %rcx,%rax
	lea    (%rdx,%rax,1),%rcx
	sar    $0x12,%rcx
	and    $0x3ff,%ecx
	movslq %ecx,%rcx
	movzbl 0x80(%r15,%rcx,1),%ecx
	mov    %cl,0x1(%r10,%rsi,1)
	sub    %rdx,%rax
	sar    $0x12,%rax
	and    $0x3ff,%eax
	movslq %eax,%rax
	movzbl 0x80(%r15,%rax,1),%eax
	mov    %al,0x8(%r10,%rsi,1)
	lea    (%r14,%r11,1),%rax
	lea    (%r14,%rax,2),%rax
	shl    $0x4,%rax
	add    %r11,%rax
	add    %r14,%rax
	shl    $0x6,%rax
	lea    (%rax,%r14,2),%rax
	lea    0x20000(%r12),%rdx
	sub    %rax,%rdx
	mov    -0x50(%rbp),%rcx
	mov    -0x48(%rbp),%rax
	sub    %rcx,%rax
	lea    0x0(%r13,%rax,1),%r11
	mov    -0x58(%rbp),%rax
	mov    %r11,%rcx
	sub    %rax,%rcx
	shl    $0xd,%rcx
	add    %rdx,%rcx
	sar    $0x12,%rcx
	and    $0x3ff,%ecx
	movslq %ecx,%rcx
	movzbl 0x80(%r15,%rcx,1),%ecx
	mov    %cl,0x2(%r10,%rsi,1)
	sub    %r11,%rax
	shl    $0xd,%rax
	add    %rdx,%rax
	sar    $0x12,%rax
	and    $0x3ff,%eax
	movslq %eax,%rax
	movzbl 0x80(%r15,%rax,1),%eax
	mov    %al,0x7(%r10,%rsi,1)
	sub    %rdi,%rbx
	lea    (%r8,%rbx,1),%rdx
	mov    %r13,%rcx
	shl    $0x4,%rcx
	mov    %r13,%rax
	shl    $0xa,%rax
	add    %rcx,%rax
	lea    (%rax,%r13,8),%rax
	lea    (%rax,%r13,4),%rax
	lea    (%rax,%rax,4),%rax
	add    %r9,%rax
	add    %rax,%rdx
	mov    -0x78(%rbp),%rax
	mov    -0x70(%rbp),%rcx
	sub    %rcx,%rax
	mov    -0x80(%rbp),%rcx
	add    %rcx,%rax
	lea    (%rdx,%rax,1),%rcx
	sar    $0x12,%rcx
	and    $0x3ff,%ecx
	movslq %ecx,%rcx
	movzbl 0x80(%r15,%rcx,1),%ecx
	mov    %cl,0x3(%r10,%rsi,1)
	sub    %rdx,%rax
	sar    $0x12,%rax
	and    $0x3ff,%eax
	movslq %eax,%rax
	movzbl 0x80(%r15,%rax,1),%eax
	mov    %al,0x6(%r10,%rsi,1)
	mov    -0x28(%rbp),%rax
	mov    -0x30(%rbp),%rcx
	sub    %rcx,%rax
	lea    0x0(%r13,%r13,2),%rcx
	lea    0x0(%r13,%rcx,2),%rcx
	shl    $0x4,%rcx
	add    %r13,%rcx
	shl    $0x4,%rcx
	lea    (%rcx,%r13,4),%rcx
	add    %rcx,%rax
	mov    -0x20(%rbp),%rcx
	lea    (%rcx,%rax,1),%rdx
	mov    -0x38(%rbp),%rax
	lea    0x20000(%rax,%r12,1),%rax
	mov    -0x40(%rbp),%rdi
	mov    %rax,%rcx
	sub    %rdi,%rcx
	add    %rdx,%rcx
	sar    $0x12,%rcx
	and    $0x3ff,%ecx
	movslq %ecx,%rcx
	movzbl 0x80(%r15,%rcx,1),%ecx
	mov    %cl,0x4(%r10,%rsi,1)
	lea    (%rdx,%rdi,1),%rcx
	sub    %rcx,%rax
	sar    $0x12,%rax
	and    $0x3ff,%eax
	movslq %eax,%rax
	movzbl 0x80(%rax,%r15,1),%eax
	mov    %al,0x5(%r10,%rsi,1)
	mov    -0xc8(%rbp),%rax
	lea    0x1(%rax),%ecx
	mov    -0x98(%rbp),%rax
	lea    0x20(%rax),%rdx
	mov    -0x90(%rbp),%rsi
	cmp    $0x9,%ecx
	jle    30d7f <jpeg_idct_10x10+0x3ff>
	mov    -0xc0(%rbp),%r15
	mov    -0xb8(%rbp),%r14
	mov    -0xb0(%rbp),%r13
	mov    -0xa8(%rbp),%r12
	mov    -0xa0(%rbp),%rbx
	leaveq 
	retq   
	nopw   %cs:0x0(%rax,%rax,1)

00311b0 <jpeg_idct_11x11>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x210,%rsp
	mov    %r8,-0x68(%rbp)
	mov    %rcx,-0x70(%rbp)
	mov    %rbx,-0x80(%rbp)
	mov    %r12,-0x88(%rbp)
	mov    %r13,-0x90(%rbp)
	mov    %r14,-0x98(%rbp)
	mov    %r15,-0xa0(%rbp)
	mov    0x1a8(%rdi),%rax
	mov    %rax,-0x78(%rbp)
	mov    0x58(%rsi),%rcx
	xor    %edi,%edi
	lea    -0x208(%rbp),%rsi
	jmpq   316bf <jpeg_idct_11x11+0x50f>
	movswq 0x30(%rcx),%rax
	movswq 0x30(%rdx),%rbx
	imul   %ebx,%eax
	movslq %eax,%r14
	mov    %r14,-0x30(%rbp)
	movswq 0x10(%rcx),%rax
	movswq 0x10(%rdx),%rbx
	imul   %ebx,%eax
	movslq %eax,%r11
	lea    (%r14,%r11,1),%r10
	movswq 0x50(%rcx),%rax
	movswq 0x50(%rdx),%rbx
	imul   %ebx,%eax
	movslq %eax,%r9
	lea    (%r9,%r10,1),%r8
	movswq 0x70(%rcx),%rax
	movswq 0x70(%rdx),%rbx
	imul   %ebx,%eax
	movslq %eax,%rbx
	mov    %rbx,-0x38(%rbp)
	lea    (%rbx,%r8,1),%rax
	mov    %rax,%r8
	shl    $0x6,%r8
	shl    $0xa,%rax
	add    %r8,%rax
	lea    (%rax,%rax,2),%r15
	lea    (%rbx,%r11,1),%rax
	lea    (%rax,%rax,4),%rax
	mov    %rax,%rbx
	shl    $0x5,%rbx
	lea    (%rbx,%rax,8),%rax
	lea    (%rax,%rax,2),%rax
	lea    (%rax,%rax,4),%rax
	lea    (%r15,%rax,1),%r8
	mov    %r8,-0x18(%rbp)
	lea    (%r9,%r11,1),%rbx
	lea    (%rbx,%rbx,4),%rax
	lea    (%rbx,%rax,4),%rax
	shl    $0x4,%rax
	lea    (%rax,%rbx,8),%rax
	sub    %rbx,%rax
	shl    $0x4,%rax
	lea    (%rax,%rbx,4),%rbx
	mov    %rbx,-0x8(%rbp)
	lea    (%r10,%r10,2),%rax
	lea    (%r10,%rax,2),%rax
	shl    $0x5,%rax
	lea    (%rax,%r10,2),%rax
	add    %r10,%rax
	shl    $0x5,%rax
	lea    (%rax,%r10,8),%rax
	lea    (%rax,%r10,2),%rax
	mov    %rax,-0x10(%rbp)
	add    %rbx,%rax
	lea    (%r8,%rax,1),%r12
	mov    %r11,%rax
	shl    $0x6,%rax
	mov    %rdi,-0xa8(%rbp)
	lea    (%r11,%r11,4),%rdi
	sub    %rdi,%rax
	shl    $0x7,%rax
	lea    (%rax,%r11,8),%rax
	lea    (%rax,%r11,2),%r8
	mov    %r12,%r13
	sub    %r8,%r13
	movswq 0x60(%rcx),%rax
	movswq 0x60(%rdx),%rdi
	imul   %edi,%eax
	movslq %eax,%r11
	movswq 0x20(%rcx),%rax
	movswq 0x20(%rdx),%rdi
	imul   %edi,%eax
	movslq %eax,%rax
	mov    %rax,-0x28(%rbp)
	lea    (%r11,%rax,1),%rdi
	mov    %rdi,-0x20(%rbp)
	movswq 0x40(%rcx),%rax
	movswq 0x40(%rdx),%rbx
	imul   %ebx,%eax
	movslq %eax,%rbx
	sub    %rbx,%rdi
	mov    %rdi,-0x48(%rbp)
	lea    (%rdi,%rdi,4),%r10
	lea    (%rdi,%r10,2),%rax
	shl    $0x5,%rax
	sub    %r10,%rax
	shl    $0x5,%rax
	lea    (%rax,%rdi,8),%rax
	lea    (%rax,%rdi,4),%rdi
	movswq (%rcx),%rax
	mov    %rdx,-0x50(%rbp)
	movswq (%rdx),%rdx
	imul   %edx,%eax
	movslq %eax,%rax
	shl    $0xd,%rax
	mov    %rax,-0x40(%rbp)
	lea    (%rax,%rdi,1),%r10
	mov    %r11,%rdx
	shl    $0xa,%rdx
	mov    %rcx,-0x60(%rbp)
	mov    %r11,%rax
	shl    $0xe,%rax
	add    %rdx,%rax
	lea    (%r11,%r11,4),%rcx
	lea    (%rcx,%rcx,4),%rcx
	lea    (%rcx,%rcx,2),%rcx
	sub    %rcx,%rax
	lea    (%r10,%rax,1),%rdx
	mov    %rbx,%rcx
	sub    %r11,%rcx
	lea    (%rcx,%rcx,4),%rax
	shl    $0x5,%rax
	lea    (%rax,%rcx,2),%rax
	add    %rcx,%rax
	shl    $0x7,%rax
	add    %rcx,%rcx
	sub    %rcx,%rax
	add    %rax,%rdx
	lea    0x400(%rdx,%r13,1),%rcx
	sar    $0xb,%rcx
	mov    %ecx,(%rsi)
	sub    %r12,%r8
	lea    0x400(%rdx,%r8,1),%rcx
	sar    $0xb,%rcx
	mov    %ecx,0x140(%rsi)
	lea    (%r9,%r14,1),%rdx
	lea    (%rdx,%rdx,8),%r8
	mov    %r8,%rcx
	shl    $0x4,%rcx
	lea    (%rcx,%rdx,4),%rcx
	add    %rdx,%rcx
	shl    $0x6,%rcx
	mov    %r8,%rdx
	sub    %rcx,%rdx
	lea    (%r15,%rdx,1),%r12
	mov    %r14,%rdx
	shl    $0x5,%rdx
	mov    %r14,%rdi
	shl    $0xa,%rdi
	add    %rdi,%rdx
	lea    (%rdx,%r14,4),%rdx
	add    %r14,%rdx
	shl    $0x4,%rdx
	lea    (%rdx,%r14,8),%rdx
	lea    (%r12,%rdx,1),%rdi
	mov    -0x10(%rbp),%rdx
	add    %rdx,%rdi
	mov    -0x38(%rbp),%r13
	lea    0x0(%r13,%r14,1),%rdx
	imul   $0xffffffffffffc675,%rdx,%rdx
	mov    %rdx,-0x10(%rbp)
	lea    (%rdx,%rdi,1),%r12
	mov    -0x28(%rbp),%rdi
	mov    %rbx,%r14
	sub    %rdi,%r14
	lea    (%r14,%r14,2),%rdx
	shl    $0x4,%rdx
	lea    (%rdx,%r14,8),%rdx
	sub    %rbx,%rdi
	add    %rdi,%rdx
	shl    $0x6,%rdx
	lea    (%rdx,%r14,8),%rdx
	add    %rdx,%r14
	add    %r14,%rax
	lea    0x400(%r10,%rax,1),%rax
	lea    (%rbx,%rbx,2),%rdx
	lea    (%rbx,%rdx,2),%rdx
	shl    $0x5,%rdx
	lea    (%rdx,%rbx,8),%rdx
	add    %rbx,%rdx
	shl    $0x6,%rdx
	lea    (%rdx,%rbx,8),%rdx
	lea    (%rdx,%rbx,4),%rdi
	mov    %rax,%rdx
	sub    %rdi,%rdx
	add    %r12,%rdx
	sar    $0xb,%rdx
	mov    %edx,0x20(%rsi)
	lea    (%r12,%rdi,1),%rdx
	sub    %rdx,%rax
	sar    $0xb,%rax
	mov    %eax,0x120(%rsi)
	sub    %r8,%rcx
	lea    (%r9,%r9,8),%rax
	lea    (%r9,%rax,2),%rax
	shl    $0x4,%rax
	add    %r9,%rax
	shl    $0x5,%rax
	lea    (%rax,%r9,4),%rax
	lea    (%rax,%r9,2),%rax
	add    %rcx,%rax
	neg    %rax
	add    %r15,%rax
	mov    -0x8(%rbp),%rcx
	lea    (%rax,%rcx,1),%rdx
	mov    -0x20(%rbp),%rax
	lea    (%rax,%rax,8),%rcx
	lea    (%rax,%rcx,4),%rcx
	shl    $0x8,%rcx
	lea    (%rax,%rax,4),%rax
	sub    %rcx,%rax
	lea    (%r10,%rax,1),%rdi
	lea    (%r11,%r11,2),%r8
	mov    %r8,%rax
	shl    $0x5,%rax
	lea    (%rax,%r11,4),%rax
	add    %r11,%rax
	shl    $0x6,%rax
	mov    %r8,%rcx
	sub    %rax,%rcx
	lea    0x400(%rdi,%rcx,1),%rcx
	add    %rdx,%rcx
	sar    $0xb,%rcx
	mov    %ecx,0x40(%rsi)
	lea    0x400(%rdi),%rcx
	sub    %r8,%rax
	add    %rdx,%rax
	sub    %rax,%rcx
	sar    $0xb,%rcx
	mov    %ecx,0x100(%rsi)
	mov    %r13,%rax
	shl    $0x8,%rax
	lea    (%rax,%r13,8),%rax
	lea    (%rax,%r13,4),%rax
	add    %r13,%rax
	shl    $0x6,%rax
	lea    (%rax,%r13,8),%rax
	sub    %r13,%rax
	mov    -0x10(%rbp),%rcx
	add    %rax,%rcx
	mov    -0x18(%rbp),%rax
	lea    (%rcx,%rax,1),%r8
	mov    -0x28(%rbp),%rdx
	mov    %rdx,%rax
	shl    $0x4,%rax
	add    %rdx,%rax
	lea    (%rdx,%rdx,2),%rcx
	shl    $0x5,%rcx
	add    %rdx,%rcx
	shl    $0x7,%rcx
	sub    %rcx,%rax
	lea    0x400(%r10,%rax,1),%rax
	add    %r14,%rax
	lea    (%r8,%rax,1),%rcx
	sar    $0xb,%rcx
	mov    %ecx,0x60(%rsi)
	sub    %r8,%rax
	sar    $0xb,%rax
	mov    %eax,0xe0(%rsi)
	lea    0x0(%r13,%r13,4),%rax
	shl    $0x2,%rax
	lea    (%rax,%r13,2),%rcx
	lea    0x0(%r13,%r13,2),%rax
	mov    %rax,%r8
	shl    $0x9,%r8
	shl    $0xc,%rax
	add    %r8,%rax
	sub    %rax,%rcx
	mov    %r9,%rax
	shl    $0xd,%rax
	lea    (%rax,%r9,8),%rax
	lea    (%rax,%r9,2),%rax
	lea    (%r9,%rax,1),%r8
	mov    -0x30(%rbp),%rax
	imul   $0xffffffffffffd10d,%rax,%rax
	add    %r8,%rax
	add    %rcx,%rax
	lea    (%r15,%rax,1),%r8
	lea    (%rbx,%rbx,8),%rax
	shl    $0x4,%rax
	lea    (%rax,%rbx,8),%rax
	lea    (%rax,%rax,2),%rax
	neg    %rax
	add    %rbx,%rax
	shl    $0xe,%rbx
	add    %rbx,%rax
	lea    (%rdx,%rdx,4),%rcx
	shl    $0x4,%rcx
	lea    (%rcx,%rdx,8),%rcx
	add    %rdx,%rcx
	shl    $0x7,%rcx
	lea    (%rcx,%rdx,2),%rcx
	add    %rdx,%rcx
	sub    %rcx,%rax
	lea    (%rdi,%rax,1),%rcx
	lea    0x400(%r8,%rcx,1),%rax
	sar    $0xb,%rax
	mov    %eax,0x80(%rsi)
	lea    0x400(%rcx),%rax
	sub    %r8,%rax
	sar    $0xb,%rax
	mov    %eax,0xc0(%rsi)
	mov    -0x48(%rbp),%rcx
	lea    (%rcx,%rcx,8),%rax
	shl    $0x8,%rax
	lea    (%rax,%rcx,8),%rax
	lea    (%rax,%rcx,4),%rax
	add    %rcx,%rax
	lea    (%rax,%rax,4),%rcx
	mov    -0x40(%rbp),%rax
	add    $0x400,%rax
	sub    %rcx,%rax
	sar    $0xb,%rax
	mov    %eax,0xa0(%rsi)
	mov    -0x60(%rbp),%rax
	lea    0x2(%rax),%rcx
	mov    -0x50(%rbp),%rax
	lea    0x2(%rax),%rdx
	add    $0x4,%rsi
	mov    -0xa8(%rbp),%rax
	lea    0x1(%rax),%edi
	cmp    $0x7,%edi
	jle    31200 <jpeg_idct_11x11+0x50>
	mov    -0x68(%rbp),%rax
	mov    %eax,%r9d
	mov    -0x78(%rbp),%r15
	lea    -0x208(%rbp),%rcx
	xor    %esi,%esi
	mov    -0x70(%rbp),%rdi
	jmpq   31c27 <jpeg_idct_11x11+0xa77>
	movslq 0xc(%rcx),%rax
	mov    %rax,-0x50(%rbp)
	movslq 0x4(%rcx),%r10
	lea    (%rax,%r10,1),%r8
	movslq 0x14(%rcx),%r13
	lea    0x0(%r13,%r8,1),%rax
	movslq 0x1c(%rcx),%r11
	mov    %r11,-0x48(%rbp)
	add    %r11,%rax
	mov    %rax,%rdx
	shl    $0x6,%rdx
	shl    $0xa,%rax
	add    %rdx,%rax
	lea    (%rax,%rax,2),%rbx
	mov    %rbx,-0xa8(%rbp)
	lea    (%r11,%r10,1),%rax
	lea    (%rax,%rax,4),%rdx
	mov    %rdx,%rax
	shl    $0x5,%rax
	lea    (%rax,%rdx,8),%rax
	lea    (%rax,%rax,2),%rax
	lea    (%rax,%rax,4),%rax
	add    %rax,%rbx
	mov    %rbx,-0x28(%rbp)
	lea    0x0(%r13,%r10,1),%rdx
	lea    (%rdx,%rdx,4),%rax
	lea    (%rdx,%rax,4),%rax
	shl    $0x4,%rax
	lea    (%rax,%rdx,8),%rax
	sub    %rdx,%rax
	shl    $0x4,%rax
	lea    (%rax,%rdx,4),%rdx
	mov    %rdx,-0x30(%rbp)
	lea    (%r8,%r8,2),%rax
	lea    (%r8,%rax,2),%rax
	shl    $0x5,%rax
	lea    (%rax,%r8,2),%rax
	add    %r8,%rax
	shl    $0x5,%rax
	lea    (%rax,%r8,8),%rax
	lea    (%rax,%r8,2),%rax
	mov    %rax,-0x58(%rbp)
	add    %rdx,%rax
	lea    (%rbx,%rax,1),%r12
	mov    %r10,%rax
	shl    $0x6,%rax
	lea    (%r10,%r10,4),%rdx
	sub    %rdx,%rax
	shl    $0x7,%rax
	lea    (%rax,%r10,8),%rax
	lea    (%rax,%r10,2),%r8
	mov    %r12,%r10
	sub    %r8,%r10
	movslq 0x18(%rcx),%r11
	mov    %r11,-0x40(%rbp)
	movslq 0x10(%rcx),%r14
	mov    %r14,-0x68(%rbp)
	mov    %r14,%rbx
	sub    %r11,%rbx
	lea    (%rbx,%rbx,4),%rax
	shl    $0x5,%rax
	lea    (%rax,%rbx,2),%rax
	lea    (%rbx,%rax,1),%rdx
	shl    $0x7,%rdx
	lea    (%rbx,%rbx,1),%rax
	sub    %rax,%rdx
	movslq 0x8(%rcx),%rax
	mov    %rax,-0x60(%rbp)
	lea    (%r11,%rax,1),%rbx
	mov    %rbx,-0x38(%rbp)
	sub    %r14,%rbx
	mov    %rbx,-0x20(%rbp)
	lea    (%rbx,%rbx,4),%r14
	lea    (%rbx,%r14,2),%rax
	shl    $0x5,%rax
	sub    %r14,%rax
	shl    $0x5,%rax
	lea    (%rax,%rbx,8),%rax
	lea    (%rax,%rbx,4),%rbx
	movslq (%rcx),%rax
	shl    $0xd,%rax
	mov    %rax,-0x18(%rbp)
	lea    (%rax,%rbx,1),%r14
	mov    %rcx,-0x78(%rbp)
	mov    %r11,%rcx
	shl    $0xa,%rcx
	mov    %r11,%rax
	shl    $0xe,%rax
	add    %rcx,%rax
	lea    (%r11,%r11,4),%rcx
	lea    (%rcx,%rcx,4),%rcx
	lea    (%rcx,%rcx,2),%rcx
	sub    %rcx,%rax
	add    %r14,%rax
	lea    (%rax,%rdx,1),%r11
	lea    0x20000(%r10,%r11,1),%rax
	sar    $0x12,%rax
	and    $0x3ff,%eax
	movslq %eax,%rax
	movzbl 0x80(%r15,%rax,1),%ecx
	movslq %esi,%rax
	mov    (%rdi,%rax,8),%rbx
	mov    %cl,(%r9,%rbx,1)
	sub    %r12,%r8
	lea    0x20000(%r8,%r11,1),%rax
	sar    $0x12,%rax
	and    $0x3ff,%eax
	movslq %eax,%rax
	movzbl 0x80(%r15,%rax,1),%eax
	mov    %al,0xa(%r9,%rbx,1)
	mov    -0x50(%rbp),%r8
	lea    0x0(%r13,%r8,1),%rcx
	lea    (%rcx,%rcx,8),%r10
	mov    %r10,%rax
	shl    $0x4,%rax
	lea    (%rax,%rcx,4),%rax
	add    %rax,%rcx
	shl    $0x6,%rcx
	mov    %r10,%rax
	sub    %rcx,%rax
	mov    -0xa8(%rbp),%r12
	lea    (%r12,%rax,1),%rdi
	mov    %rsi,-0xa8(%rbp)
	mov    %r8,%rsi
	shl    $0x5,%rsi
	mov    %r8,%rax
	shl    $0xa,%rax
	add    %rsi,%rax
	lea    (%rax,%r8,4),%rax
	add    %r8,%rax
	shl    $0x4,%rax
	lea    (%rax,%r8,8),%rax
	add    %rdi,%rax
	mov    -0x58(%rbp),%rsi
	add    %rax,%rsi
	mov    -0x48(%rbp),%rax
	add    %r8,%rax
	imul   $0xffffffffffffc675,%rax,%rax
	mov    %rax,-0x58(%rbp)
	lea    (%rax,%rsi,1),%r8
	mov    -0x68(%rbp),%rsi
	mov    -0x60(%rbp),%rdi
	mov    %rsi,%r11
	sub    %rdi,%r11
	lea    (%r11,%r11,2),%rax
	shl    $0x4,%rax
	lea    (%rax,%r11,8),%rax
	sub    %rsi,%rdi
	add    %rdi,%rax
	shl    $0x6,%rax
	lea    (%rax,%r11,8),%rax
	add    %rax,%r11
	lea    (%r11,%rdx,1),%rax
	lea    0x20000(%rax,%r14,1),%rax
	lea    (%rsi,%rsi,2),%rdx
	lea    (%rsi,%rdx,2),%rdx
	shl    $0x5,%rdx
	lea    (%rdx,%rsi,8),%rdx
	add    %rsi,%rdx
	shl    $0x6,%rdx
	lea    (%rdx,%rsi,8),%rdx
	lea    (%rdx,%rsi,4),%rdi
	mov    %rax,%rdx
	sub    %rdi,%rdx
	add    %r8,%rdx
	sar    $0x12,%rdx
	and    $0x3ff,%edx
	movslq %edx,%rdx
	movzbl 0x80(%r15,%rdx,1),%edx
	mov    %dl,0x1(%r9,%rbx,1)
	lea    (%r8,%rdi,1),%rdx
	sub    %rdx,%rax
	sar    $0x12,%rax
	and    $0x3ff,%eax
	movslq %eax,%rax
	movzbl 0x80(%r15,%rax,1),%eax
	mov    %al,0x9(%r9,%rbx,1)
	sub    %r10,%rcx
	lea    0x0(%r13,%r13,8),%rax
	lea    0x0(%r13,%rax,2),%rax
	shl    $0x4,%rax
	add    %r13,%rax
	shl    $0x5,%rax
	lea    (%rax,%r13,4),%rax
	lea    (%rax,%r13,2),%rax
	add    %rcx,%rax
	neg    %rax
	add    %r12,%rax
	mov    -0x30(%rbp),%rcx
	lea    (%rax,%rcx,1),%rdi
	mov    -0x38(%rbp),%rdx
	lea    (%rdx,%rdx,8),%rax
	lea    (%rdx,%rax,4),%rcx
	shl    $0x8,%rcx
	lea    (%rdx,%rdx,4),%rax
	sub    %rcx,%rax
	lea    (%r14,%rax,1),%r8
	mov    -0x40(%rbp),%rcx
	lea    (%rcx,%rcx,2),%rdx
	mov    %rdx,%rax
	shl    $0x5,%rax
	lea    (%rax,%rcx,4),%rax
	add    %rax,%rcx
	shl    $0x6,%rcx
	mov    %rdx,%rax
	sub    %rcx,%rax
	lea    0x20000(%r8,%rax,1),%rax
	add    %rdi,%rax
	sar    $0x12,%rax
	and    $0x3ff,%eax
	movslq %eax,%rax
	movzbl 0x80(%r15,%rax,1),%eax
	mov    %al,0x2(%r9,%rbx,1)
	lea    0x20000(%r8),%rax
	sub    %rdx,%rcx
	add    %rdi,%rcx
	sub    %rcx,%rax
	sar    $0x12,%rax
	and    $0x3ff,%eax
	movslq %eax,%rax
	movzbl 0x80(%r15,%rax,1),%eax
	mov    %al,0x8(%r9,%rbx,1)
	mov    -0x60(%rbp),%rdi
	mov    %rdi,%rax
	shl    $0x4,%rax
	add    %rdi,%rax
	lea    (%rdi,%rdi,2),%rcx
	shl    $0x5,%rcx
	add    %rdi,%rcx
	shl    $0x7,%rcx
	sub    %rcx,%rax
	lea    0x20000(%r14,%rax,1),%rax
	add    %r11,%rax
	mov    -0x48(%rbp),%r10
	mov    %r10,%rcx
	shl    $0x8,%rcx
	lea    (%rcx,%r10,8),%rcx
	lea    (%rcx,%r10,4),%rcx
	add    %r10,%rcx
	shl    $0x6,%rcx
	lea    (%rcx,%r10,8),%rcx
	sub    %r10,%rcx
	mov    -0x58(%rbp),%rdx
	add    %rdx,%rcx
	mov    -0x28(%rbp),%rdx
	add    %rcx,%rdx
	lea    (%rdx,%rax,1),%rcx
	sar    $0x12,%rcx
	and    $0x3ff,%ecx
	movslq %ecx,%rcx
	movzbl 0x80(%r15,%rcx,1),%ecx
	mov    %cl,0x3(%r9,%rbx,1)
	sub    %rdx,%rax
	sar    $0x12,%rax
	and    $0x3ff,%eax
	movslq %eax,%rax
	movzbl 0x80(%r15,%rax,1),%eax
	mov    %al,0x7(%r9,%rbx,1)
	lea    (%r10,%r10,4),%rax
	shl    $0x2,%rax
	lea    (%rax,%r10,2),%rcx
	lea    (%r10,%r10,2),%rax
	mov    %rax,%rdx
	shl    $0x9,%rdx
	shl    $0xc,%rax
	add    %rdx,%rax
	sub    %rax,%rcx
	mov    %r13,%rax
	shl    $0xd,%rax
	lea    (%rax,%r13,8),%rax
	lea    (%rax,%r13,2),%rax
	lea    0x0(%r13,%rax,1),%rdx
	mov    -0x50(%rbp),%rax
	imul   $0xffffffffffffd10d,%rax,%rax
	add    %rdx,%rax
	add    %rcx,%rax
	lea    (%r12,%rax,1),%rdx
	lea    (%rsi,%rsi,8),%rax
	shl    $0x4,%rax
	lea    (%rax,%rsi,8),%rax
	lea    (%rax,%rax,2),%rax
	neg    %rax
	add    %rsi,%rax
	shl    $0xe,%rsi
	lea    (%rsi,%rax,1),%rcx
	lea    (%rdi,%rdi,4),%rax
	shl    $0x4,%rax
	lea    (%rax,%rdi,8),%rax
	add    %rdi,%rax
	shl    $0x7,%rax
	lea    (%rax,%rdi,2),%rax
	add    %rdi,%rax
	sub    %rax,%rcx
	lea    (%rcx,%r8,1),%rax
	lea    0x20000(%rdx,%rax,1),%rax
	sar    $0x12,%rax
	and    $0x3ff,%eax
	movslq %eax,%rax
	movzbl 0x80(%r15,%rax,1),%eax
	mov    %al,0x4(%r9,%rbx,1)
	lea    0x20000(%rcx,%r8,1),%rax
	sub    %rdx,%rax
	sar    $0x12,%rax
	and    $0x3ff,%eax
	movslq %eax,%rax
	movzbl 0x80(%r15,%rax,1),%eax
	mov    %al,0x6(%r9,%rbx,1)
	mov    -0x20(%rbp),%rcx
	lea    (%rcx,%rcx,8),%rax
	shl    $0x8,%rax
	lea    (%rax,%rcx,8),%rax
	lea    (%rax,%rcx,4),%rax
	add    %rcx,%rax
	lea    (%rax,%rax,4),%rcx
	mov    -0x18(%rbp),%rax
	add    $0x20000,%rax
	sub    %rcx,%rax
	sar    $0x12,%rax
	and    $0x3ff,%eax
	movslq %eax,%rax
	movzbl 0x80(%rax,%r15,1),%eax
	mov    %al,0x5(%r9,%rbx,1)
	mov    -0xa8(%rbp),%rax
	lea    0x1(%rax),%esi
	mov    -0x78(%rbp),%rax
	lea    0x20(%rax),%rcx
	mov    -0x70(%rbp),%rdi
	cmp    $0xa,%esi
	jle    316e5 <jpeg_idct_11x11+0x535>
	mov    -0xa0(%rbp),%r15
	mov    -0x98(%rbp),%r14
	mov    -0x90(%rbp),%r13
	mov    -0x88(%rbp),%r12
	mov    -0x80(%rbp),%rbx
	leaveq 
	retq   
	data16 nopw %cs:0x0(%rax,%rax,1)
	nopl   (%rax)

0031c60 <jpeg_idct_12x12>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x230,%rsp
	mov    %r8,-0x70(%rbp)
	mov    %rcx,-0x78(%rbp)
	mov    %rbx,-0x88(%rbp)
	mov    %r12,-0x90(%rbp)
	mov    %r13,-0x98(%rbp)
	mov    %r14,-0xa0(%rbp)
	mov    %r15,-0xa8(%rbp)
	mov    0x1a8(%rdi),%rax
	mov    %rax,-0x80(%rbp)
	mov    0x58(%rsi),%rcx
	xor    %ebx,%ebx
	lea    -0x230(%rbp),%rdi
	jmpq   320a9 <jpeg_idct_12x12+0x449>
	movswq 0x10(%rcx),%rax
	movswq 0x10(%rdx),%rsi
	imul   %esi,%eax
	movslq %eax,%r8
	mov    %r8,-0x50(%rbp)
	movswq 0x50(%rcx),%rax
	movswq 0x50(%rdx),%rsi
	imul   %esi,%eax
	movslq %eax,%r12
	lea    (%r8,%r12,1),%r10
	movswq 0x70(%rcx),%rax
	movswq 0x70(%rdx),%rsi
	imul   %esi,%eax
	movslq %eax,%rsi
	lea    (%rsi,%r10,1),%r9
	lea    (%r9,%r9,2),%rax
	shl    $0x4,%rax
	add    %r9,%rax
	mov    %rax,%r11
	shl    $0x4,%r11
	shl    $0x5,%rax
	add    %r11,%rax
	sub    %r9,%rax
	lea    (%rax,%rax,2),%r11
	mov    %r11,-0x48(%rbp)
	mov    %r10,%rax
	shl    $0x6,%rax
	lea    (%rax,%r10,2),%rax
	add    %r10,%rax
	shl    $0x5,%rax
	lea    (%r10,%r10,4),%r9
	sub    %r9,%rax
	add    %rax,%r11
	mov    %r11,-0x8(%rbp)
	movswq 0x30(%rcx),%rax
	movswq 0x30(%rdx),%r9
	imul   %r9d,%eax
	movslq %eax,%r9
	lea    (%r9,%r9,4),%rax
	lea    (%r9,%rax,4),%rax
	shl    $0x9,%rax
	mov    %rax,-0x28(%rbp)
	lea    (%r9,%r9,2),%r10
	shl    $0x4,%r10
	add    %r9,%r10
	mov    %r10,-0x20(%rbp)
	sub    %r10,%rax
	lea    (%r11,%rax,1),%r10
	lea    (%r8,%r8,8),%r11
	mov    %rbx,-0xb0(%rbp)
	mov    %r11,%rax
	shl    $0x8,%rax
	sub    %r11,%rax
	add    %rax,%r10
	movswq 0x20(%rcx),%rax
	movswq 0x20(%rdx),%rbx
	imul   %ebx,%eax
	movslq %eax,%r15
	lea    (%r15,%r15,4),%rax
	lea    (%r15,%rax,2),%rax
	shl    $0xa,%rax
	mov    %rax,-0x18(%rbp)
	lea    (%r15,%r15,1),%rbx
	lea    (%r15,%r15,8),%r11
	lea    (%rbx,%r11,8),%rbx
	mov    %rbx,-0x10(%rbp)
	sub    %rbx,%rax
	movswq 0x60(%rcx),%rbx
	movswq 0x60(%rdx),%r11
	imul   %r11d,%ebx
	movslq %ebx,%rbx
	mov    %rbx,%r11
	shl    $0xd,%r11
	lea    (%rax,%r11,1),%r14
	mov    %r14,-0x40(%rbp)
	movswq 0x40(%rcx),%rax
	movswq 0x40(%rdx),%r11
	imul   %r11d,%eax
	movslq %eax,%r11
	lea    (%r11,%r11,2),%rax
	lea    (%r11,%rax,4),%r13
	lea    (%r11,%r11,4),%rax
	shl    $0x7,%rax
	sub    %r13,%rax
	shl    $0x4,%rax
	lea    (%r11,%rax,1),%r13
	movswq (%rcx),%rax
	movswq (%rdx),%r11
	imul   %r11d,%eax
	movslq %eax,%rax
	mov    %rax,-0x30(%rbp)
	mov    %rax,%r11
	shl    $0xd,%r11
	mov    %rdx,-0x60(%rbp)
	lea    0x0(%r13,%r11,1),%rdx
	mov    %rcx,-0x68(%rbp)
	mov    %rdx,-0x38(%rbp)
	add    %r14,%rdx
	lea    0x400(%r10,%rdx,1),%rcx
	sar    $0xb,%rcx
	mov    %ecx,(%rdi)
	lea    0x400(%rdx),%rcx
	sub    %r10,%rcx
	sar    $0xb,%rcx
	mov    %ecx,0x160(%rdi)
	mov    %r9,%r14
	sub    %r12,%r14
	sub    %rsi,%r8
	lea    (%r14,%r8,1),%r10
	mov    %r10,%rdx
	shl    $0x4,%rdx
	mov    %r10,%rcx
	shl    $0x8,%rcx
	add    %rdx,%rcx
	lea    (%rcx,%r10,4),%rcx
	add    %r10,%rcx
	shl    $0x4,%rcx
	add    %rcx,%r10
	lea    (%r8,%r8,2),%rcx
	shl    $0x4,%rcx
	add    %r8,%rcx
	shl    $0x7,%rcx
	lea    (%r8,%r8,1),%rdx
	sub    %rdx,%rcx
	lea    (%r10,%rcx,1),%rdx
	mov    %r15,%rcx
	sub    %rbx,%rcx
	add    %rcx,%rax
	shl    $0xd,%rax
	lea    0x400(%rdx,%rax,1),%rcx
	sar    $0xb,%rcx
	mov    %ecx,0x20(%rdi)
	add    $0x400,%rax
	sub    %rdx,%rax
	sar    $0xb,%rax
	mov    %eax,0x140(%rdi)
	mov    %r9,%rax
	shl    $0x4,%rax
	mov    %r9,%rcx
	shl    $0x8,%rcx
	add    %rcx,%rax
	lea    (%rax,%r9,4),%rax
	add    %r9,%rax
	shl    $0x4,%rax
	lea    (%r9,%rax,1),%rdx
	mov    %rdx,-0x58(%rbp)
	lea    (%r12,%r12,4),%rax
	lea    (%r12,%rax,2),%rcx
	lea    (%r12,%r12,2),%rax
	shl    $0x8,%rax
	sub    %rcx,%rax
	shl    $0x4,%rax
	add    %rdx,%rax
	lea    (%rsi,%r12,1),%rcx
	imul   $0xffffffffffffde8b,%rcx,%rcx
	mov    %rcx,%rdx
	sub    %rax,%rdx
	mov    -0x8(%rbp),%rax
	lea    (%rax,%rdx,1),%r9
	lea    (%rbx,%r15,1),%rdx
	shl    $0xd,%rdx
	mov    -0x10(%rbp),%r8
	lea    (%r8,%rdx,1),%rax
	mov    -0x18(%rbp),%r12
	neg    %rax
	add    %r12,%rax
	add    $0x400,%r11
	sub    %r13,%r11
	add    %r11,%rax
	lea    (%r9,%rax,1),%r13
	sar    $0xb,%r13
	mov    %r13d,0x40(%rdi)
	sub    %r9,%rax
	sar    $0xb,%rax
	mov    %eax,0x120(%rdi)
	mov    -0x28(%rbp),%r9
	mov    -0x20(%rbp),%rax
	sub    %r9,%rax
	mov    -0x48(%rbp),%r9
	lea    (%r9,%rax,1),%r13
	lea    (%rsi,%rsi,2),%rax
	shl    $0x6,%rax
	lea    (%rax,%rsi,8),%rax
	lea    (%rax,%rsi,2),%rax
	add    %rsi,%rax
	shl    $0x6,%rax
	lea    (%rax,%rsi,4),%rax
	lea    (%rax,%rsi,2),%rax
	add    %r13,%rax
	lea    (%rax,%rcx,1),%r13
	sub    %r12,%r8
	lea    (%rdx,%r8,1),%rax
	add    %r11,%rax
	lea    0x0(%r13,%rax,1),%rcx
	sar    $0xb,%rcx
	mov    %ecx,0x60(%rdi)
	sub    %r13,%rax
	sar    $0xb,%rax
	mov    %eax,0x100(%rdi)
	mov    %r14,%rcx
	shl    $0x2,%rcx
	lea    (%r14,%r14,2),%rax
	lea    (%rcx,%rax,8),%rax
	add    %r14,%rax
	shl    $0x4,%rax
	lea    (%rax,%r14,8),%rax
	add    %r14,%rax
	shl    $0x5,%rax
	add    %r14,%rax
	mov    %r10,%rdx
	sub    %rax,%rdx
	sub    %r15,%rbx
	mov    -0x30(%rbp),%rcx
	add    %rbx,%rcx
	shl    $0xd,%rcx
	lea    0x400(%rdx,%rcx,1),%rdx
	sar    $0xb,%rdx
	mov    %edx,0x80(%rdi)
	sub    %r10,%rax
	lea    0x400(%rax,%rcx,1),%rax
	sar    $0xb,%rax
	mov    %eax,0xe0(%rdi)
	mov    -0x50(%rbp),%rcx
	mov    %rcx,%rax
	shl    $0x6,%rax
	lea    (%rax,%rcx,4),%rax
	add    %rcx,%rax
	shl    $0x4,%rax
	lea    (%rax,%rcx,4),%rax
	lea    (%rax,%rax,4),%rcx
	mov    %rsi,%rax
	shl    $0x7,%rax
	lea    (%rax,%rsi,8),%rax
	lea    (%rax,%rsi,4),%rax
	shl    $0xe,%rsi
	sub    %rax,%rsi
	add    %rsi,%rcx
	mov    -0x58(%rbp),%rax
	add    %rcx,%rax
	sub    %rax,%r9
	mov    -0x38(%rbp),%rax
	add    $0x400,%rax
	mov    -0x40(%rbp),%rdx
	mov    %rax,%rcx
	sub    %rdx,%rcx
	add    %r9,%rcx
	sar    $0xb,%rcx
	mov    %ecx,0xa0(%rdi)
	lea    (%rdx,%r9,1),%rcx
	sub    %rcx,%rax
	sar    $0xb,%rax
	mov    %eax,0xc0(%rdi)
	mov    -0x68(%rbp),%rax
	lea    0x2(%rax),%rcx
	mov    -0x60(%rbp),%rax
	lea    0x2(%rax),%rdx
	add    $0x4,%rdi
	mov    -0xb0(%rbp),%rax
	lea    0x1(%rax),%ebx
	cmp    $0x7,%ebx
	jle    31cb3 <jpeg_idct_12x12+0x53>
	mov    -0x70(%rbp),%rax
	mov    %eax,%r10d
	mov    -0x80(%rbp),%r15
	lea    -0x230(%rbp),%rdx
	xor    %ecx,%ecx
	mov    -0x78(%rbp),%rdi
	jmpq   32558 <jpeg_idct_12x12+0x8f8>
	movslq 0x4(%rdx),%r8
	mov    %r8,-0x18(%rbp)
	movslq 0x14(%rdx),%r14
	lea    (%r8,%r14,1),%r11
	movslq 0x1c(%rdx),%rsi
	lea    (%rsi,%r11,1),%r9
	lea    (%r9,%r9,2),%rax
	shl    $0x4,%rax
	add    %r9,%rax
	mov    %rax,%rbx
	shl    $0x4,%rbx
	shl    $0x5,%rax
	add    %rbx,%rax
	sub    %r9,%rax
	lea    (%rax,%rax,2),%r9
	mov    %r9,-0x30(%rbp)
	mov    %r11,%rax
	shl    $0x6,%rax
	lea    (%rax,%r11,2),%rax
	add    %r11,%rax
	shl    $0x5,%rax
	lea    (%r11,%r11,4),%rbx
	sub    %rbx,%rax
	lea    (%r9,%rax,1),%rbx
	mov    %rbx,-0x48(%rbp)
	movslq 0xc(%rdx),%r12
	lea    (%r12,%r12,2),%rax
	shl    $0x4,%rax
	lea    (%r12,%rax,1),%r9
	mov    %r9,-0x38(%rbp)
	lea    (%r12,%r12,4),%rax
	lea    (%r12,%rax,4),%rax
	shl    $0x9,%rax
	mov    %rax,-0x40(%rbp)
	sub    %r9,%rax
	lea    (%rbx,%rax,1),%r9
	lea    (%r8,%r8,8),%rbx
	mov    %rbx,%rax
	shl    $0x8,%rax
	sub    %rbx,%rax
	lea    (%r9,%rax,1),%r11
	movslq 0x8(%rdx),%rbx
	mov    %rbx,-0x68(%rbp)
	lea    (%rbx,%rbx,4),%rax
	lea    (%rbx,%rax,2),%rax
	shl    $0xa,%rax
	mov    %rax,-0x58(%rbp)
	lea    (%rbx,%rbx,1),%r9
	lea    (%rbx,%rbx,8),%rbx
	lea    (%r9,%rbx,8),%rbx
	mov    %rbx,-0x60(%rbp)
	sub    %rbx,%rax
	movslq 0x18(%rdx),%rbx
	mov    %rbx,-0x70(%rbp)
	shl    $0xd,%rbx
	lea    (%rax,%rbx,1),%r13
	mov    %r13,-0x10(%rbp)
	movslq 0x10(%rdx),%r9
	lea    (%r9,%r9,2),%rax
	lea    (%r9,%rax,4),%rbx
	lea    (%r9,%r9,4),%rax
	shl    $0x7,%rax
	sub    %rbx,%rax
	shl    $0x4,%rax
	add    %r9,%rax
	mov    %rax,-0x50(%rbp)
	movslq (%rdx),%rbx
	mov    %rbx,-0x28(%rbp)
	mov    %rbx,%r9
	shl    $0xd,%r9
	mov    %rdx,-0x80(%rbp)
	mov    %r9,-0x8(%rbp)
	lea    (%rax,%r9,1),%rdx
	lea    0x0(%r13,%rdx,1),%rax
	lea    0x20000(%r11,%rax,1),%rax
	sar    $0x12,%rax
	and    $0x3ff,%eax
	movslq %eax,%rax
	movzbl 0x80(%r15,%rax,1),%eax
	mov    %rcx,-0xb0(%rbp)
	movslq %ecx,%rcx
	mov    (%rdi,%rcx,8),%rdi
	mov    %al,(%r10,%rdi,1)
	lea    0x20000(%r13,%rdx,1),%rax
	sub    %r11,%rax
	sar    $0x12,%rax
	and    $0x3ff,%eax
	movslq %eax,%rax
	movzbl 0x80(%r15,%rax,1),%eax
	mov    %al,0xb(%r10,%rdi,1)
	mov    %r12,%r13
	sub    %r14,%r13
	sub    %rsi,%r8
	lea    0x0(%r13,%r8,1),%rdx
	mov    %rdx,%rcx
	shl    $0x4,%rcx
	mov    %rdx,%rax
	shl    $0x8,%rax
	add    %rcx,%rax
	lea    (%rax,%rdx,4),%rax
	add    %rdx,%rax
	shl    $0x4,%rax
	lea    (%rdx,%rax,1),%r11
	lea    (%r8,%r8,2),%rax
	shl    $0x4,%rax
	add    %r8,%rax
	shl    $0x7,%rax
	lea    (%r8,%r8,1),%rcx
	sub    %rcx,%rax
	lea    (%r11,%rax,1),%rcx
	mov    -0x68(%rbp),%rdx
	mov    -0x70(%rbp),%r8
	mov    %rdx,%rax
	sub    %r8,%rax
	add    %rax,%rbx
	shl    $0xd,%rbx
	lea    0x20000(%rcx,%rbx,1),%rax
	sar    $0x12,%rax
	and    $0x3ff,%eax
	movslq %eax,%rax
	movzbl 0x80(%r15,%rax,1),%eax
	mov    %al,0x1(%r10,%rdi,1)
	lea    0x20000(%rbx),%rax
	sub    %rcx,%rax
	sar    $0x12,%rax
	and    $0x3ff,%eax
	movslq %eax,%rax
	movzbl 0x80(%r15,%rax,1),%eax
	mov    %al,0xa(%r10,%rdi,1)
	mov    %r12,%rcx
	shl    $0x4,%rcx
	mov    %r12,%rax
	shl    $0x8,%rax
	add    %rcx,%rax
	lea    (%rax,%r12,4),%rax
	add    %r12,%rax
	shl    $0x4,%rax
	lea    (%r12,%rax,1),%rbx
	mov    %rbx,-0x20(%rbp)
	lea    (%r14,%r14,4),%rax
	lea    (%r14,%rax,2),%rcx
	lea    (%r14,%r14,2),%rax
	shl    $0x8,%rax
	sub    %rcx,%rax
	shl    $0x4,%rax
	add    %rbx,%rax
	lea    (%rsi,%r14,1),%rcx
	imul   $0xffffffffffffde8b,%rcx,%rcx
	neg    %rax
	add    %rcx,%rax
	mov    -0x48(%rbp),%rbx
	lea    (%rbx,%rax,1),%r12
	lea    (%r8,%rdx,1),%rbx
	shl    $0xd,%rbx
	mov    -0x60(%rbp),%r8
	lea    (%r8,%rbx,1),%rax
	mov    -0x58(%rbp),%r14
	neg    %rax
	add    %r14,%rax
	add    $0x20000,%r9
	mov    -0x50(%rbp),%rdx
	sub    %rdx,%r9
	add    %r9,%rax
	lea    (%r12,%rax,1),%rdx
	sar    $0x12,%rdx
	and    $0x3ff,%edx
	movslq %edx,%rdx
	movzbl 0x80(%r15,%rdx,1),%edx
	mov    %dl,0x2(%r10,%rdi,1)
	sub    %r12,%rax
	sar    $0x12,%rax
	and    $0x3ff,%eax
	movslq %eax,%rax
	movzbl 0x80(%r15,%rax,1),%eax
	mov    %al,0x9(%r10,%rdi,1)
	mov    -0x38(%rbp),%rax
	mov    -0x40(%rbp),%rdx
	sub    %rdx,%rax
	mov    -0x30(%rbp),%rdx
	lea    (%rdx,%rax,1),%r12
	lea    (%rsi,%rsi,2),%rax
	shl    $0x6,%rax
	lea    (%rax,%rsi,8),%rax
	lea    (%rax,%rsi,2),%rax
	add    %rsi,%rax
	shl    $0x6,%rax
	lea    (%rax,%rsi,4),%rax
	lea    (%rax,%rsi,2),%rax
	add    %r12,%rax
	lea    (%rax,%rcx,1),%r12
	sub    %r14,%r8
	lea    (%rbx,%r8,1),%rax
	add    %r9,%rax
	lea    (%r12,%rax,1),%rcx
	sar    $0x12,%rcx
	and    $0x3ff,%ecx
	movslq %ecx,%rcx
	movzbl 0x80(%r15,%rcx,1),%ecx
	mov    %cl,0x3(%r10,%rdi,1)
	sub    %r12,%rax
	sar    $0x12,%rax
	and    $0x3ff,%eax
	movslq %eax,%rax
	movzbl 0x80(%r15,%rax,1),%eax
	mov    %al,0x8(%r10,%rdi,1)
	mov    %r13,%rcx
	shl    $0x2,%rcx
	lea    0x0(%r13,%r13,2),%rax
	lea    (%rcx,%rax,8),%rax
	add    %r13,%rax
	shl    $0x4,%rax
	lea    (%rax,%r13,8),%rax
	add    %r13,%rax
	shl    $0x5,%rax
	lea    0x0(%r13,%rax,1),%rcx
	mov    %r11,%r8
	sub    %rcx,%r8
	mov    -0x68(%rbp),%rbx
	mov    -0x70(%rbp),%rax
	sub    %rbx,%rax
	mov    -0x28(%rbp),%rbx
	add    %rax,%rbx
	shl    $0xd,%rbx
	lea    0x20000(%r8,%rbx,1),%rax
	sar    $0x12,%rax
	and    $0x3ff,%eax
	movslq %eax,%rax
	movzbl 0x80(%r15,%rax,1),%eax
	mov    %al,0x4(%r10,%rdi,1)
	sub    %r11,%rcx
	lea    0x20000(%rcx,%rbx,1),%rax
	sar    $0x12,%rax
	and    $0x3ff,%eax
	movslq %eax,%rax
	movzbl 0x80(%r15,%rax,1),%eax
	mov    %al,0x7(%r10,%rdi,1)
	mov    -0x18(%rbp),%rcx
	mov    %rcx,%rax
	shl    $0x6,%rax
	lea    (%rax,%rcx,4),%rax
	add    %rcx,%rax
	shl    $0x4,%rax
	lea    (%rax,%rcx,4),%rax
	lea    (%rax,%rax,4),%rcx
	mov    %rsi,%rax
	shl    $0x7,%rax
	lea    (%rax,%rsi,8),%rax
	lea    (%rax,%rsi,4),%rax
	shl    $0xe,%rsi
	sub    %rax,%rsi
	lea    (%rcx,%rsi,1),%rax
	mov    -0x20(%rbp),%rcx
	add    %rcx,%rax
	sub    %rax,%rdx
	mov    -0x8(%rbp),%rcx
	mov    -0x50(%rbp),%rax
	lea    0x20000(%rax,%rcx,1),%rax
	mov    -0x10(%rbp),%rsi
	mov    %rax,%rcx
	sub    %rsi,%rcx
	add    %rdx,%rcx
	sar    $0x12,%rcx
	and    $0x3ff,%ecx
	movslq %ecx,%rcx
	movzbl 0x80(%r15,%rcx,1),%ecx
	mov    %cl,0x5(%r10,%rdi,1)
	lea    (%rsi,%rdx,1),%rcx
	sub    %rcx,%rax
	sar    $0x12,%rax
	and    $0x3ff,%eax
	movslq %eax,%rax
	movzbl 0x80(%rax,%r15,1),%eax
	mov    %al,0x6(%r10,%rdi,1)
	mov    -0xb0(%rbp),%rax
	lea    0x1(%rax),%ecx
	mov    -0x80(%rbp),%rax
	lea    0x20(%rax),%rdx
	mov    -0x78(%rbp),%rdi
	cmp    $0xb,%ecx
	jle    320cf <jpeg_idct_12x12+0x46f>
	mov    -0xa8(%rbp),%r15
	mov    -0xa0(%rbp),%r14
	mov    -0x98(%rbp),%r13
	mov    -0x90(%rbp),%r12
	mov    -0x88(%rbp),%rbx
	leaveq 
	retq   
	nopw   %cs:0x0(%rax,%rax,1)

0032590 <jpeg_idct_13x13>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x290,%rsp
	mov    %r8,-0xa8(%rbp)
	mov    %rcx,-0xb0(%rbp)
	mov    %rbx,-0xc0(%rbp)
	mov    %r12,-0xc8(%rbp)
	mov    %r13,-0xd0(%rbp)
	mov    %r14,-0xd8(%rbp)
	mov    %r15,-0xe0(%rbp)
	mov    0x1a8(%rdi),%rax
	mov    %rax,-0xb8(%rbp)
	mov    0x58(%rsi),%rsi
	mov    %rdx,%r9
	xor    %edi,%edi
	lea    -0x288(%rbp),%rbx
	jmpq   32b5c <jpeg_idct_13x13+0x5cc>
	movswq 0x40(%rsi),%rax
	movswq 0x40(%r9),%rcx
	imul   %ecx,%eax
	movslq %eax,%rcx
	mov    %rcx,-0x70(%rbp)
	movswq 0x60(%rsi),%rax
	movswq 0x60(%r9),%rdx
	imul   %edx,%eax
	movslq %eax,%r11
	mov    %r11,-0x78(%rbp)
	lea    (%r11,%rcx,1),%r10
	mov    %r10,-0x38(%rbp)
	lea    (%r10,%r10,8),%r8
	lea    (%r10,%r8,4),%rax
	shl    $0x8,%rax
	mov    %rax,-0x18(%rbp)
	lea    (%r10,%r10,2),%rdx
	mov    %rdx,-0x30(%rbp)
	lea    (%r10,%rdx,2),%rdx
	mov    %rdx,-0x28(%rbp)
	sub    %rdx,%rax
	movswq 0x20(%rsi),%rdx
	movswq 0x20(%r9),%r10
	imul   %r10d,%edx
	movslq %edx,%rdx
	mov    %rdx,-0x80(%rbp)
	lea    (%rdx,%rdx,4),%r10
	mov    %rdi,-0xe8(%rbp)
	mov    %r10,-0x58(%rbp)
	lea    (%rdx,%r10,2),%rdi
	shl    $0xa,%rdi
	mov    %rdx,%r10
	shl    $0x4,%r10
	mov    %r10,-0x8(%rbp)
	sub    %r10,%rdx
	add    %rdi,%rdx
	lea    (%rax,%rdx,1),%rdi
	sub    %r11,%rcx
	lea    (%rcx,%rcx,2),%rdx
	mov    %rdx,%rax
	shl    $0x4,%rax
	add    %rcx,%rax
	shl    $0x4,%rax
	lea    (%rax,%rcx,8),%rax
	lea    (%rcx,%rax,1),%r10
	movswq (%rsi),%rax
	movswq (%r9),%r11
	imul   %r11d,%eax
	movslq %eax,%r11
	shl    $0xd,%r11
	mov    %r11,-0x88(%rbp)
	lea    (%r11,%r10,1),%rax
	mov    %rax,-0x10(%rbp)
	lea    (%rax,%rdi,1),%r13
	movswq 0x50(%rsi),%rax
	movswq 0x50(%r9),%rdi
	imul   %edi,%eax
	movslq %eax,%r15
	movswq 0x10(%rsi),%rax
	movswq 0x10(%r9),%rdi
	imul   %edi,%eax
	movslq %eax,%r10
	mov    %r10,-0x40(%rbp)
	lea    (%r15,%r10,1),%rdi
	lea    (%rdi,%rdi,8),%rax
	shl    $0x4,%rax
	lea    (%rax,%rdi,4),%rax
	add    %rdi,%rax
	shl    $0x6,%rax
	add    %rdi,%rdi
	sub    %rdi,%rax
	mov    %rax,-0x20(%rbp)
	movswq 0x30(%rsi),%rdi
	movswq 0x30(%r9),%r12
	imul   %r12d,%edi
	movslq %edi,%r14
	mov    %r14,-0x60(%rbp)
	lea    (%r14,%r10,1),%r12
	lea    (%r12,%r12,4),%rdi
	lea    (%r12,%rdi,4),%rdi
	shl    $0x5,%rdi
	lea    (%rdi,%r12,4),%rdi
	add    %r12,%rdi
	shl    $0x4,%rdi
	lea    (%rax,%rdi,1),%r12
	mov    %rsi,-0xa0(%rbp)
	movswq 0x70(%rsi),%rax
	mov    %r9,-0x90(%rbp)
	movswq 0x70(%r9),%rsi
	imul   %esi,%eax
	movslq %eax,%r9
	lea    (%r9,%r10,1),%rsi
	mov    %rsi,-0x68(%rbp)
	mov    %rsi,%rax
	shl    $0x4,%rax
	sub    %rsi,%rax
	shl    $0x9,%rax
	lea    (%rax,%rsi,2),%rsi
	add    %rsi,%r12
	mov    %r10,%rax
	shl    $0x9,%rax
	lea    (%rax,%r10,4),%rax
	add    %r10,%rax
	shl    $0x5,%rax
	lea    (%rax,%r10,4),%rax
	add    %r10,%rax
	mov    %r12,%r10
	sub    %rax,%r10
	lea    0x400(%r13,%r10,1),%r10
	sar    $0xb,%r10
	mov    %r10d,(%rbx)
	sub    %r12,%rax
	lea    0x400(%r13,%rax,1),%rax
	sar    $0xb,%rax
	mov    %eax,0x180(%rbx)
	lea    (%r15,%r14,1),%r10
	imul   $0xfffffffffffff52b,%r10,%r10
	lea    (%r14,%r14,2),%rax
	shl    $0x5,%rax
	lea    (%rax,%r14,8),%rax
	lea    (%rax,%r14,2),%rax
	add    %r14,%rax
	shl    $0x6,%rax
	lea    (%rax,%r14,8),%rax
	lea    (%rax,%r14,2),%rax
	add    %r14,%rax
	add    %r10,%rax
	lea    (%rax,%rdi,1),%r13
	lea    (%r9,%r14,1),%rdi
	lea    (%rdi,%rdi,8),%rax
	shl    $0x4,%rax
	lea    (%rax,%rdi,4),%rax
	add    %rdi,%rax
	shl    $0x6,%rax
	lea    (%rdi,%rdi,1),%r12
	sub    %rax,%r12
	lea    0x0(%r13,%r12,1),%r14
	shl    $0x5,%rdx
	lea    (%rdx,%rcx,8),%rax
	lea    (%rax,%rcx,2),%rax
	lea    (%rcx,%rax,1),%rdx
	mov    %rcx,%rax
	shl    $0xc,%rax
	sub    %rdx,%rax
	lea    (%r11,%rax,1),%rdx
	mov    %rdx,-0x48(%rbp)
	mov    %r8,%rax
	shl    $0x5,%rax
	shl    $0x8,%r8
	add    %rax,%r8
	mov    %r8,-0x50(%rbp)
	mov    -0x80(%rbp),%r13
	mov    %r13,%rdi
	shl    $0x8,%rdi
	mov    -0x8(%rbp),%rax
	add    %rdi,%rax
	sub    %r13,%rax
	shl    $0x5,%rax
	sub    %r8,%rax
	add    %rax,%rdx
	lea    0x400(%r14,%rdx,1),%rax
	sar    $0xb,%rax
	mov    %eax,0x20(%rbx)
	lea    0x400(%rdx),%rax
	sub    %r14,%rax
	sar    $0xb,%rax
	mov    %eax,0x160(%rbx)
	mov    -0x18(%rbp),%rdx
	mov    -0x28(%rbp),%rax
	mov    %rax,%rdi
	sub    %rdx,%rdi
	mov    %r13,%rdx
	shl    $0xc,%rdx
	lea    (%rdx,%r13,8),%rdx
	lea    (%rdx,%r13,4),%rdx
	add    %rdx,%rdi
	mov    -0x10(%rbp),%rdx
	lea    (%rdx,%rdi,1),%r14
	lea    (%r15,%r15,4),%rdx
	shl    $0x5,%rdx
	add    %r15,%rdx
	mov    %rdx,%rdi
	shl    $0x4,%rdi
	shl    $0x6,%rdx
	add    %rdi,%rdx
	neg    %rdx
	add    %r15,%rdx
	lea    (%r10,%rdx,1),%rdi
	mov    -0x20(%rbp),%rdx
	add    %rdx,%rdi
	lea    (%r9,%r15,1),%r8
	lea    (%r8,%r8,4),%rdx
	lea    (%r8,%rdx,4),%rdx
	shl    $0x8,%rdx
	lea    (%rdx,%r8,8),%r8
	mov    %rdi,%rdx
	sub    %r8,%rdx
	lea    0x400(%r14,%rdx,1),%rdx
	sar    $0xb,%rdx
	mov    %edx,0x40(%rbx)
	mov    %r8,%rdx
	sub    %rdi,%rdx
	lea    0x400(%r14,%rdx,1),%rdx
	sar    $0xb,%rdx
	mov    %edx,0x140(%rbx)
	mov    -0x30(%rbp),%rdx
	shl    $0x2,%rdx
	mov    -0x38(%rbp),%rdi
	lea    (%rdx,%rdi,2),%r14
	shl    $0x9,%rax
	mov    -0x58(%rbp),%rdi
	mov    %rdi,%rdx
	shl    $0x4,%rdx
	lea    (%rdx,%r13,8),%rdx
	sub    %r13,%rdx
	shl    $0x4,%rdx
	lea    (%rdx,%r13,4),%rdx
	add    %rax,%rdx
	mov    %r14,%r10
	sub    %rdx,%r10
	mov    %rcx,%rdx
	shl    $0x9,%rdx
	lea    (%rdx,%rcx,2),%rdx
	shl    $0xd,%rcx
	sub    %rcx,%rdx
	lea    0x400(%r11,%rdx,1),%r11
	lea    (%r11,%r10,1),%rdx
	mov    %r9,%rcx
	shl    $0x5,%rcx
	lea    (%rcx,%r9,2),%rcx
	add    %r9,%rcx
	shl    $0x5,%rcx
	lea    (%rcx,%r9,8),%rcx
	add    %r9,%rcx
	shl    $0x4,%rcx
	lea    (%rcx,%r9,4),%rcx
	add    %r12,%rcx
	add    %rcx,%rsi
	mov    %rsi,%rcx
	sub    %r8,%rcx
	add    %rdx,%rcx
	sar    $0xb,%rcx
	mov    %ecx,0x60(%rbx)
	sub    %rsi,%r8
	lea    (%rdx,%r8,1),%rcx
	sar    $0xb,%rcx
	mov    %ecx,0x120(%rbx)
	mov    -0x60(%rbp),%rdx
	mov    %r15,%rsi
	sub    %rdx,%rsi
	mov    %rsi,%rcx
	shl    $0x4,%rcx
	mov    %rdx,%r8
	sub    %r15,%r8
	add    %r8,%rcx
	shl    $0x9,%rcx
	lea    (%rcx,%rsi,2),%r8
	mov    -0x68(%rbp),%rsi
	lea    (%rsi,%rsi,4),%rcx
	shl    $0x5,%rcx
	lea    (%rcx,%rsi,8),%rcx
	lea    (%rcx,%rsi,4),%rcx
	add    %rsi,%rcx
	shl    $0x4,%rcx
	lea    (%rcx,%rsi,4),%rcx
	lea    (%rsi,%rcx,1),%r12
	mov    -0x40(%rbp),%rsi
	lea    (%rsi,%rsi,4),%rcx
	shl    $0x5,%rcx
	lea    (%rcx,%rsi,2),%rcx
	add    %rsi,%rcx
	shl    $0x4,%rcx
	lea    (%rcx,%rsi,2),%rcx
	add    %rsi,%rcx
	lea    (%r12,%rcx,1),%rsi
	mov    %rdx,%r10
	shl    $0x4,%r10
	mov    %rdx,%rcx
	shl    $0x8,%rcx
	add    %r10,%rcx
	lea    (%rcx,%rdx,4),%rcx
	lea    (%rcx,%rdx,2),%rcx
	shl    $0xc,%rdx
	sub    %rdx,%rcx
	add    %rsi,%rcx
	lea    (%r8,%rcx,1),%rdx
	sub    %r14,%rax
	mov    %r13,%rcx
	imul   $0xffffffffffffe64b,%rcx,%rcx
	add    %rcx,%rax
	add    %r11,%rax
	lea    (%rdx,%rax,1),%rcx
	sar    $0xb,%rcx
	mov    %ecx,0x80(%rbx)
	sub    %rdx,%rax
	sar    $0xb,%rax
	mov    %eax,0x100(%rbx)
	mov    %r15,%rcx
	shl    $0x4,%rcx
	mov    %r15,%rax
	shl    $0xa,%rax
	add    %rcx,%rax
	lea    (%rax,%r15,8),%rax
	lea    (%rax,%r15,2),%rax
	lea    (%rax,%rax,2),%rax
	lea    (%r8,%rax,1),%rcx
	lea    (%r9,%r9,2),%rax
	lea    (%r9,%rax,2),%rax
	shl    $0x5,%rax
	sub    %r9,%rax
	shl    $0x6,%rax
	add    %r9,%rax
	sub    %rax,%rcx
	lea    (%rcx,%r12,1),%rdx
	shl    $0x7,%rdi
	lea    0x0(%r13,%rdi,1),%rax
	shl    $0x4,%rax
	lea    (%rax,%r13,2),%rcx
	mov    -0x50(%rbp),%rax
	sub    %rcx,%rax
	mov    -0x48(%rbp),%rcx
	add    %rax,%rcx
	lea    0x400(%rdx,%rcx,1),%rax
	sar    $0xb,%rax
	mov    %eax,0xa0(%rbx)
	lea    0x400(%rcx),%rax
	sub    %rdx,%rax
	sar    $0xb,%rax
	mov    %eax,0xe0(%rbx)
	mov    -0x78(%rbp),%rax
	lea    (%rax,%r13,1),%rcx
	mov    -0x70(%rbp),%rax
	sub    %rcx,%rax
	lea    (%rax,%rax,8),%rcx
	shl    $0x8,%rcx
	lea    (%rcx,%rax,8),%rcx
	lea    (%rcx,%rax,4),%rcx
	add    %rcx,%rax
	lea    (%rax,%rax,4),%rcx
	mov    -0x88(%rbp),%rax
	lea    0x400(%rcx,%rax,1),%rax
	sar    $0xb,%rax
	mov    %eax,0xc0(%rbx)
	mov    -0xa0(%rbp),%rax
	lea    0x2(%rax),%rsi
	mov    -0x90(%rbp),%rax
	lea    0x2(%rax),%r9
	add    $0x4,%rbx
	mov    -0xe8(%rbp),%rax
	lea    0x1(%rax),%edi
	cmp    $0x7,%edi
	jle    325ef <jpeg_idct_13x13+0x5f>
	mov    -0xa8(%rbp),%rax
	mov    %eax,%r9d
	mov    -0xb8(%rbp),%r15
	lea    -0x288(%rbp),%rsi
	xor    %ecx,%ecx
	mov    -0xb0(%rbp),%rdx
	jmpq   331b5 <jpeg_idct_13x13+0xc25>
	movslq 0x10(%rsi),%r8
	mov    %r8,-0x10(%rbp)
	movslq 0x18(%rsi),%r11
	mov    %r11,-0x18(%rbp)
	lea    (%r11,%r8,1),%rbx
	mov    %rbx,-0x48(%rbp)
	lea    (%rbx,%rbx,2),%rax
	mov    %rax,-0x40(%rbp)
	lea    (%rbx,%rax,2),%rdi
	mov    %rdi,-0x70(%rbp)
	lea    (%rbx,%rbx,8),%rax
	mov    %rax,-0x98(%rbp)
	lea    (%rbx,%rax,4),%rax
	shl    $0x8,%rax
	mov    %rax,-0x78(%rbp)
	sub    %rdi,%rax
	movslq 0x8(%rsi),%rbx
	mov    %rbx,-0x90(%rbp)
	lea    (%rbx,%rbx,4),%rdi
	mov    %rdi,-0x50(%rbp)
	lea    (%rbx,%rdi,2),%rdi
	shl    $0xa,%rdi
	mov    %rbx,%r10
	shl    $0x4,%r10
	mov    %r10,-0x88(%rbp)
	sub    %r10,%rbx
	add    %rbx,%rdi
	lea    (%rax,%rdi,1),%rbx
	sub    %r11,%r8
	mov    %r8,-0xa8(%rbp)
	lea    (%r8,%r8,2),%rdi
	mov    %rdi,%rax
	shl    $0x4,%rax
	add    %r8,%rax
	shl    $0x4,%rax
	lea    (%rax,%r8,8),%rax
	add    %rax,%r8
	movslq (%rsi),%rax
	shl    $0xd,%rax
	mov    %rax,-0xa0(%rbp)
	add    %r8,%rax
	mov    %rax,-0x68(%rbp)
	lea    (%rbx,%rax,1),%r10
	movslq 0x14(%rsi),%r14
	movslq 0x4(%rsi),%r8
	mov    %r8,-0x30(%rbp)
	lea    (%r14,%r8,1),%rbx
	lea    (%rbx,%rbx,8),%rax
	shl    $0x4,%rax
	lea    (%rax,%rbx,4),%rax
	add    %rbx,%rax
	shl    $0x6,%rax
	add    %rbx,%rbx
	sub    %rbx,%rax
	mov    %rax,-0x80(%rbp)
	movslq 0xc(%rsi),%r13
	mov    %r13,-0x38(%rbp)
	lea    0x0(%r13,%r8,1),%r11
	lea    (%r11,%r11,4),%rbx
	lea    (%r11,%rbx,4),%rbx
	shl    $0x5,%rbx
	lea    (%rbx,%r11,4),%rbx
	add    %r11,%rbx
	shl    $0x4,%rbx
	lea    (%rax,%rbx,1),%r11
	mov    %rsi,-0xb8(%rbp)
	movslq 0x1c(%rsi),%r12
	lea    (%r12,%r8,1),%rsi
	mov    %rsi,-0x28(%rbp)
	mov    %rsi,%rax
	shl    $0x4,%rax
	sub    %rsi,%rax
	shl    $0x9,%rax
	lea    (%rax,%rsi,2),%rax
	mov    %rax,-0x60(%rbp)
	add    %rax,%r11
	mov    %r8,%rax
	shl    $0x9,%rax
	lea    (%rax,%r8,4),%rax
	add    %r8,%rax
	shl    $0x5,%rax
	lea    (%rax,%r8,4),%rax
	lea    (%r8,%rax,1),%rsi
	mov    %r11,%rax
	sub    %rsi,%rax
	lea    0x20000(%rax,%r10,1),%rax
	sar    $0x12,%rax
	and    $0x3ff,%eax
	movslq %eax,%rax
	movzbl 0x80(%r15,%rax,1),%eax
	mov    %rcx,-0xe8(%rbp)
	movslq %ecx,%rcx
	mov    (%rdx,%rcx,8),%r8
	mov    %al,(%r9,%r8,1)
	sub    %r11,%rsi
	lea    0x20000(%rsi,%r10,1),%rax
	sar    $0x12,%rax
	and    $0x3ff,%eax
	movslq %eax,%rax
	movzbl 0x80(%r15,%rax,1),%eax
	mov    %al,0xc(%r9,%r8,1)
	lea    (%r14,%r13,1),%rdx
	imul   $0xfffffffffffff52b,%rdx,%rdx
	lea    0x0(%r13,%r13,2),%rax
	shl    $0x5,%rax
	lea    (%rax,%r13,8),%rax
	lea    (%rax,%r13,2),%rax
	add    %r13,%rax
	shl    $0x6,%rax
	lea    (%rax,%r13,8),%rax
	lea    (%rax,%r13,2),%rax
	add    %r13,%rax
	add    %rdx,%rax
	lea    (%rax,%rbx,1),%rsi
	lea    (%r12,%r13,1),%rbx
	lea    (%rbx,%rbx,8),%rax
	shl    $0x4,%rax
	lea    (%rax,%rbx,4),%rax
	lea    (%rbx,%rax,1),%rcx
	shl    $0x6,%rcx
	lea    (%rbx,%rbx,1),%rax
	sub    %rcx,%rax
	mov    %rax,-0x58(%rbp)
	add    %rax,%rsi
	shl    $0x5,%rdi
	mov    -0xa8(%rbp),%rbx
	lea    (%rdi,%rbx,8),%rax
	lea    (%rax,%rbx,2),%rax
	lea    (%rbx,%rax,1),%rcx
	mov    %rbx,%rax
	shl    $0xc,%rax
	sub    %rcx,%rax
	mov    -0xa0(%rbp),%r10
	lea    (%r10,%rax,1),%rdi
	mov    %rdi,-0x20(%rbp)
	mov    -0x98(%rbp),%rax
	mov    %rax,%rcx
	shl    $0x5,%rcx
	shl    $0x8,%rax
	add    %rax,%rcx
	mov    %rcx,-0x98(%rbp)
	mov    -0x90(%rbp),%r13
	mov    %r13,%rax
	shl    $0x8,%rax
	mov    -0x88(%rbp),%r11
	add    %r11,%rax
	sub    %r13,%rax
	shl    $0x5,%rax
	sub    %rcx,%rax
	lea    (%rax,%rdi,1),%rcx
	lea    0x20000(%rsi,%rcx,1),%rcx
	sar    $0x12,%rcx
	and    $0x3ff,%ecx
	movslq %ecx,%rcx
	movzbl 0x80(%r15,%rcx,1),%ecx
	mov    %cl,0x1(%r9,%r8,1)
	lea    0x20000(%rax,%rdi,1),%rax
	sub    %rsi,%rax
	sar    $0x12,%rax
	and    $0x3ff,%eax
	movslq %eax,%rax
	movzbl 0x80(%r15,%rax,1),%eax
	mov    %al,0xb(%r9,%r8,1)
	mov    -0x70(%rbp),%rcx
	mov    -0x78(%rbp),%rax
	neg    %rax
	add    %rcx,%rax
	mov    %r13,%rsi
	shl    $0xc,%rsi
	lea    (%rsi,%r13,8),%rsi
	lea    (%rsi,%r13,4),%rsi
	add    %rsi,%rax
	mov    -0x68(%rbp),%rsi
	lea    (%rsi,%rax,1),%rdi
	lea    (%r14,%r14,4),%rax
	shl    $0x5,%rax
	add    %r14,%rax
	mov    %rax,%rsi
	shl    $0x4,%rsi
	shl    $0x6,%rax
	add    %rsi,%rax
	neg    %rax
	add    %r14,%rax
	add    %rdx,%rax
	mov    -0x80(%rbp),%rdx
	lea    (%rdx,%rax,1),%rsi
	lea    (%r12,%r14,1),%rdx
	lea    (%rdx,%rdx,4),%rax
	lea    (%rdx,%rax,4),%rax
	shl    $0x8,%rax
	lea    (%rax,%rdx,8),%rdx
	mov    %rsi,%rax
	sub    %rdx,%rax
	lea    0x20000(%rdi,%rax,1),%rax
	sar    $0x12,%rax
	and    $0x3ff,%eax
	movslq %eax,%rax
	movzbl 0x80(%r15,%rax,1),%eax
	mov    %al,0x2(%r9,%r8,1)
	mov    %rdx,%rax
	sub    %rsi,%rax
	lea    0x20000(%rdi,%rax,1),%rax
	sar    $0x12,%rax
	and    $0x3ff,%eax
	movslq %eax,%rax
	movzbl 0x80(%r15,%rax,1),%eax
	mov    %al,0xa(%r9,%r8,1)
	mov    -0x40(%rbp),%rax
	shl    $0x2,%rax
	mov    -0x48(%rbp),%rsi
	lea    (%rax,%rsi,2),%r11
	shl    $0x9,%rcx
	mov    -0x50(%rbp),%rsi
	mov    %rsi,%rax
	shl    $0x4,%rax
	lea    (%rax,%r13,8),%rax
	sub    %r13,%rax
	shl    $0x4,%rax
	lea    (%rax,%r13,4),%rax
	add    %rcx,%rax
	mov    %r11,%rdi
	sub    %rax,%rdi
	mov    %rbx,%rax
	shl    $0x9,%rax
	lea    (%rax,%rbx,2),%rax
	shl    $0xd,%rbx
	sub    %rbx,%rax
	lea    0x20000(%r10,%rax,1),%r10
	lea    (%r10,%rdi,1),%rbx
	mov    %r12,%rax
	shl    $0x5,%rax
	lea    (%rax,%r12,2),%rax
	add    %r12,%rax
	shl    $0x5,%rax
	lea    (%rax,%r12,8),%rax
	add    %r12,%rax
	shl    $0x4,%rax
	lea    (%rax,%r12,4),%rax
	mov    -0x58(%rbp),%rdi
	add    %rdi,%rax
	mov    -0x60(%rbp),%rdi
	add    %rax,%rdi
	mov    %rdi,%rax
	sub    %rdx,%rax
	add    %rbx,%rax
	sar    $0x12,%rax
	and    $0x3ff,%eax
	movslq %eax,%rax
	movzbl 0x80(%r15,%rax,1),%eax
	mov    %al,0x3(%r9,%r8,1)
	sub    %rdi,%rdx
	lea    (%rbx,%rdx,1),%rax
	sar    $0x12,%rax
	and    $0x3ff,%eax
	movslq %eax,%rax
	movzbl 0x80(%r15,%rax,1),%eax
	mov    %al,0x9(%r9,%r8,1)
	sub    %r11,%rcx
	mov    %r13,%rax
	imul   $0xffffffffffffe64b,%rax,%rax
	add    %rcx,%rax
	add    %r10,%rax
	mov    -0x38(%rbp),%rcx
	mov    %r14,%rbx
	sub    %rcx,%rbx
	mov    %rbx,%rdi
	shl    $0x4,%rdi
	mov    %rcx,%rdx
	sub    %r14,%rdx
	add    %rdi,%rdx
	shl    $0x9,%rdx
	lea    (%rdx,%rbx,2),%r11
	mov    -0x28(%rbp),%rdi
	lea    (%rdi,%rdi,4),%rdx
	shl    $0x5,%rdx
	lea    (%rdx,%rdi,8),%rdx
	lea    (%rdx,%rdi,4),%rdx
	add    %rdi,%rdx
	shl    $0x4,%rdx
	lea    (%rdx,%rdi,4),%rdx
	lea    (%rdi,%rdx,1),%r10
	mov    -0x30(%rbp),%rdi
	lea    (%rdi,%rdi,4),%rdx
	shl    $0x5,%rdx
	lea    (%rdx,%rdi,2),%rdx
	add    %rdi,%rdx
	shl    $0x4,%rdx
	lea    (%rdx,%rdi,2),%rdx
	add    %rdi,%rdx
	lea    (%r10,%rdx,1),%rbx
	mov    %rcx,%rdi
	shl    $0x4,%rdi
	mov    %rcx,%rdx
	shl    $0x8,%rdx
	add    %rdi,%rdx
	lea    (%rdx,%rcx,4),%rdx
	lea    (%rdx,%rcx,2),%rdx
	shl    $0xc,%rcx
	sub    %rcx,%rdx
	lea    (%rbx,%rdx,1),%rcx
	lea    (%r11,%rcx,1),%rdx
	lea    (%rdx,%rax,1),%rcx
	sar    $0x12,%rcx
	and    $0x3ff,%ecx
	movslq %ecx,%rcx
	movzbl 0x80(%r15,%rcx,1),%ecx
	mov    %cl,0x4(%r9,%r8,1)
	sub    %rdx,%rax
	sar    $0x12,%rax
	and    $0x3ff,%eax
	movslq %eax,%rax
	movzbl 0x80(%r15,%rax,1),%eax
	mov    %al,0x8(%r9,%r8,1)
	mov    %r14,%rcx
	shl    $0x4,%rcx
	mov    %r14,%rax
	shl    $0xa,%rax
	add    %rcx,%rax
	lea    (%rax,%r14,8),%rax
	lea    (%rax,%r14,2),%rax
	lea    (%rax,%rax,2),%rax
	lea    (%r11,%rax,1),%rcx
	lea    (%r12,%r12,2),%rax
	lea    (%r12,%rax,2),%rax
	shl    $0x5,%rax
	sub    %r12,%rax
	shl    $0x6,%rax
	add    %r12,%rax
	sub    %rax,%rcx
	lea    (%rcx,%r10,1),%rdx
	shl    $0x7,%rsi
	lea    0x0(%r13,%rsi,1),%rax
	shl    $0x4,%rax
	lea    (%rax,%r13,2),%rax
	mov    -0x98(%rbp),%rcx
	sub    %rax,%rcx
	mov    -0x20(%rbp),%rsi
	lea    (%rsi,%rcx,1),%rax
	lea    0x20000(%rdx,%rax,1),%rax
	sar    $0x12,%rax
	and    $0x3ff,%eax
	movslq %eax,%rax
	movzbl 0x80(%r15,%rax,1),%eax
	mov    %al,0x5(%r9,%r8,1)
	lea    0x20000(%rsi,%rcx,1),%rax
	sub    %rdx,%rax
	sar    $0x12,%rax
	and    $0x3ff,%eax
	movslq %eax,%rax
	movzbl 0x80(%r15,%rax,1),%eax
	mov    %al,0x7(%r9,%r8,1)
	mov    -0x18(%rbp),%rax
	lea    (%rax,%r13,1),%rcx
	mov    -0x10(%rbp),%rax
	sub    %rcx,%rax
	lea    (%rax,%rax,8),%rcx
	shl    $0x8,%rcx
	lea    (%rcx,%rax,8),%rcx
	lea    (%rcx,%rax,4),%rcx
	add    %rcx,%rax
	lea    (%rax,%rax,4),%rax
	mov    -0xa0(%rbp),%rcx
	lea    0x20000(%rax,%rcx,1),%rax
	sar    $0x12,%rax
	and    $0x3ff,%eax
	movslq %eax,%rax
	movzbl 0x80(%rax,%r15,1),%eax
	mov    %al,0x6(%r9,%r8,1)
	mov    -0xe8(%rbp),%rax
	lea    0x1(%rax),%ecx
	mov    -0xb8(%rbp),%rax
	lea    0x20(%rax),%rsi
	mov    -0xb0(%rbp),%rdx
	cmp    $0xc,%ecx
	jle    32b8b <jpeg_idct_13x13+0x5fb>
	mov    -0xe0(%rbp),%r15
	mov    -0xd8(%rbp),%r14
	mov    -0xd0(%rbp),%r13
	mov    -0xc8(%rbp),%r12
	mov    -0xc0(%rbp),%rbx
	leaveq 
	retq   
	data16 nopw %cs:0x0(%rax,%rax,1)
	xchg   %ax,%ax

00331f0 <jpeg_idct_14x14>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x2a0,%rsp
	mov    %r8,-0xa0(%rbp)
	mov    %rcx,-0xa8(%rbp)
	mov    %rbx,-0xb8(%rbp)
	mov    %r12,-0xc0(%rbp)
	mov    %r13,-0xc8(%rbp)
	mov    %r14,-0xd0(%rbp)
	mov    %r15,-0xd8(%rbp)
	mov    0x1a8(%rdi),%rax
	mov    %rax,-0xb0(%rbp)
	mov    0x58(%rsi),%rsi
	xor    %eax,%eax
	lea    -0x2a0(%rbp),%rdi
	jmpq   336e3 <jpeg_idct_14x14+0x4f3>
	movswq 0x10(%rsi),%rcx
	movswq 0x10(%rdx),%rbx
	imul   %ebx,%ecx
	movslq %ecx,%r10
	mov    %r10,-0x60(%rbp)
	movswq 0x30(%rsi),%rcx
	movswq 0x30(%rdx),%rbx
	imul   %ebx,%ecx
	movslq %ecx,%r15
	lea    (%r15,%r10,1),%rcx
	lea    (%rcx,%rcx,8),%r8
	lea    (%rcx,%r8,2),%rcx
	mov    %rcx,%rbx
	shl    $0x6,%rbx
	shl    $0x9,%rcx
	add    %rcx,%rbx
	sub    %r8,%rbx
	movswq 0x50(%rsi),%rcx
	movswq 0x50(%rdx),%r8
	imul   %r8d,%ecx
	movslq %ecx,%r13
	lea    (%r10,%r13,1),%r8
	mov    %r8,-0x58(%rbp)
	mov    %r8,%rcx
	shl    $0x6,%rcx
	mov    %r8,%r9
	shl    $0xa,%r9
	add    %r9,%rcx
	lea    (%rcx,%r8,2),%rcx
	lea    (%rcx,%rcx,8),%rcx
	mov    %rcx,-0x8(%rbp)
	lea    (%rcx,%rbx,1),%r9
	movswq 0x70(%rsi),%rcx
	movswq 0x70(%rdx),%r8
	imul   %r8d,%ecx
	movslq %ecx,%r8
	mov    %r8,-0x18(%rbp)
	shl    $0xd,%r8
	lea    (%r9,%r8,1),%r12
	lea    (%r10,%r10,8),%rcx
	shl    $0x6,%rcx
	add    %r10,%rcx
	shl    $0x4,%rcx
	mov    %rax,-0xe0(%rbp)
	mov    %r12,%r14
	sub    %rcx,%r14
	movswq 0x20(%rsi),%rax
	movswq 0x20(%rdx),%r9
	imul   %r9d,%eax
	movslq %eax,%r11
	mov    %r11,-0x28(%rbp)
	movswq 0x60(%rsi),%rax
	movswq 0x60(%rdx),%r9
	imul   %r9d,%eax
	movslq %eax,%rax
	mov    %rax,-0x48(%rbp)
	lea    (%r11,%rax,1),%r10
	lea    (%r10,%r10,8),%rax
	shl    $0x5,%rax
	lea    (%r10,%r10,4),%r9
	sub    %r9,%rax
	shl    $0x5,%rax
	lea    (%rax,%r10,2),%r9
	mov    %r11,%rax
	shl    $0x5,%rax
	lea    (%rax,%r11,2),%rax
	add    %r11,%rax
	shl    $0x6,%rax
	lea    (%r11,%r11,2),%r10
	mov    %r10,-0x20(%rbp)
	sub    %r10,%rax
	lea    (%r9,%rax,1),%r10
	mov    %r10,-0x68(%rbp)
	movswq 0x40(%rsi),%rax
	movswq 0x40(%rdx),%r11
	imul   %r11d,%eax
	movslq %eax,%r11
	lea    (%r11,%r11,4),%rax
	mov    %rax,-0x10(%rbp)
	shl    $0x5,%rax
	mov    %rax,-0x38(%rbp)
	lea    (%rax,%r11,2),%rax
	add    %r11,%rax
	shl    $0x6,%rax
	lea    (%rax,%r11,4),%rax
	lea    (%rax,%r11,2),%rax
	mov    %rsi,-0x78(%rbp)
	movswq (%rsi),%rsi
	mov    %rdx,-0x70(%rbp)
	movswq (%rdx),%rdx
	imul   %edx,%esi
	movslq %esi,%rsi
	shl    $0xd,%rsi
	add    %rsi,%rax
	mov    %rax,-0x50(%rbp)
	lea    (%r10,%rax,1),%rdx
	lea    0x400(%rdx,%r14,1),%rax
	sar    $0xb,%rax
	mov    %eax,(%rdi)
	sub    %r12,%rcx
	lea    0x400(%rdx,%rcx,1),%rax
	sar    $0xb,%rax
	mov    %eax,0x1a0(%rdi)
	lea    (%r15,%r13,1),%rcx
	lea    (%rcx,%rcx,4),%rax
	shl    $0x4,%rax
	add    %rcx,%rax
	shl    $0x4,%rax
	add    %rcx,%rax
	neg    %rax
	lea    (%r15,%r15,2),%rcx
	shl    $0x7,%rcx
	lea    (%rcx,%r15,2),%rcx
	lea    (%rcx,%rcx,8),%rcx
	add    %r8,%rcx
	neg    %rcx
	add    %rax,%rcx
	lea    (%rcx,%rbx,1),%rdx
	mov    -0x48(%rbp),%r10
	lea    (%r10,%r10,2),%rcx
	shl    $0x4,%rcx
	lea    (%rcx,%r10,8),%rcx
	sub    %r10,%rcx
	shl    $0x8,%rcx
	lea    (%rcx,%r10,4),%rcx
	mov    %rcx,-0x40(%rbp)
	mov    %r9,%rbx
	sub    %rcx,%rbx
	mov    -0x38(%rbp),%rcx
	add    %r11,%rcx
	shl    $0x4,%rcx
	lea    (%rcx,%r11,2),%rcx
	add    %rsi,%rcx
	mov    %rcx,-0x30(%rbp)
	add    %rcx,%rbx
	lea    0x400(%rdx,%rbx,1),%rcx
	sar    $0xb,%rcx
	mov    %ecx,0x20(%rdi)
	lea    0x400(%rbx),%rcx
	sub    %rdx,%rcx
	sar    $0xb,%rcx
	mov    %ecx,0x180(%rdi)
	lea    0x0(%r13,%r13,8),%rdx
	lea    0x0(%r13,%rdx,2),%rcx
	shl    $0xa,%rcx
	sub    %rdx,%rcx
	add    %r8,%rcx
	sub    %rcx,%rax
	mov    -0x8(%rbp),%rcx
	lea    (%rax,%rcx,1),%r12
	mov    -0x28(%rbp),%rcx
	lea    (%rcx,%rcx,4),%rax
	shl    $0x5,%rax
	mov    -0x20(%rbp),%rdx
	sub    %rdx,%rax
	shl    $0x5,%rax
	lea    (%rax,%rcx,2),%rax
	lea    (%rcx,%rax,1),%r14
	lea    (%r10,%r10,4),%rax
	lea    (%r10,%rax,2),%rax
	shl    $0x5,%rax
	lea    (%r10,%rax,1),%rdx
	shl    $0x5,%rdx
	mov    %r10,%rax
	sub    %rdx,%rax
	lea    (%r14,%rax,1),%rcx
	lea    (%r11,%r11,2),%rax
	lea    (%r11,%rax,2),%rax
	shl    $0x4,%rax
	lea    (%r11,%rax,1),%rbx
	shl    $0x6,%rbx
	lea    (%r11,%r11,8),%rax
	sub    %rbx,%rax
	lea    0x400(%rsi,%rax,1),%rbx
	lea    (%rbx,%rcx,1),%rax
	lea    (%r12,%rax,1),%rcx
	sar    $0xb,%rcx
	mov    %ecx,0x40(%rdi)
	sub    %r12,%rax
	sar    $0xb,%rax
	mov    %eax,0x160(%rdi)
	mov    -0x10(%rbp),%rax
	lea    (%r11,%rax,2),%rax
	shl    $0x4,%rax
	lea    (%rax,%r11,4),%rax
	add    %r11,%rax
	shl    $0x6,%rax
	lea    (%rax,%r11,2),%rcx
	lea    0x400(%rsi),%rax
	sub    %rcx,%rax
	sar    $0xb,%rax
	mov    -0x60(%rbp),%rcx
	sub    %r15,%rcx
	mov    -0x18(%rbp),%rsi
	add    %rcx,%rsi
	sub    %r13,%rsi
	shl    $0x2,%rsi
	lea    (%rax,%rsi,1),%r11
	mov    %r11d,0x60(%rdi)
	sub    %rsi,%rax
	mov    %eax,0x140(%rdi)
	mov    %r13,%r11
	sub    %r15,%r11
	lea    (%r11,%r11,4),%rax
	mov    %rax,%rsi
	shl    $0x4,%rsi
	shl    $0x7,%rax
	add    %rax,%rsi
	mov    %r15,%rax
	sub    %r13,%rax
	add    %rsi,%rax
	shl    $0x4,%rax
	lea    (%rax,%r11,8),%r12
	lea    (%r8,%r12,1),%rax
	mov    %r13,%r11
	shl    $0x5,%r11
	mov    %r13,%rsi
	shl    $0x9,%rsi
	add    %r11,%rsi
	lea    (%rsi,%r13,8),%rsi
	lea    (%rsi,%r13,2),%rsi
	lea    (%rsi,%rsi,4),%rsi
	lea    (%rsi,%rsi,4),%rsi
	sub    %rsi,%rax
	mov    -0x58(%rbp),%r11
	lea    (%r11,%r11,2),%rsi
	shl    $0x7,%rsi
	add    %r11,%rsi
	shl    $0x4,%rsi
	lea    (%rsi,%r11,4),%r11
	lea    (%rax,%r11,1),%rsi
	lea    (%r10,%r14,1),%rax
	sub    %rax,%rdx
	lea    (%rbx,%rdx,1),%rax
	lea    (%rsi,%rax,1),%rdx
	sar    $0xb,%rdx
	mov    %edx,0x80(%rdi)
	sub    %rsi,%rax
	sar    $0xb,%rax
	mov    %eax,0x120(%rdi)
	lea    (%r15,%r15,4),%rax
	lea    (%r15,%rax,4),%rax
	shl    $0x4,%rax
	lea    (%rax,%r15,8),%rax
	add    %r15,%rax
	shl    $0x4,%rax
	lea    (%rax,%r15,8),%rax
	add    %r15,%rax
	add    %r12,%rax
	mov    %rcx,%rdx
	shl    $0x8,%rdx
	lea    (%rdx,%rcx,8),%rdx
	lea    (%rdx,%rcx,4),%rdx
	lea    (%rdx,%rcx,2),%rdx
	add    %r8,%rdx
	shl    $0xc,%rcx
	sub    %rdx,%rcx
	lea    (%rax,%rcx,1),%rsi
	mov    -0x40(%rbp),%rax
	sub    %r9,%rax
	mov    -0x30(%rbp),%rdx
	add    %rax,%rdx
	lea    0x400(%rsi,%rdx,1),%rax
	sar    $0xb,%rax
	mov    %eax,0xa0(%rdi)
	lea    0x400(%rdx),%rax
	sub    %rsi,%rax
	sar    $0xb,%rax
	mov    %eax,0x100(%rdi)
	mov    -0x60(%rbp),%rdx
	lea    (%rdx,%rdx,4),%rax
	lea    (%rdx,%rax,2),%rax
	mov    %rdx,%rsi
	shl    $0x9,%rsi
	shl    $0xd,%rdx
	add    %rsi,%rdx
	sub    %rdx,%rax
	add    %r11,%rax
	lea    (%rax,%rcx,1),%rsi
	mov    -0x50(%rbp),%rax
	add    $0x400,%rax
	mov    -0x68(%rbp),%rdx
	mov    %rax,%rcx
	sub    %rdx,%rcx
	add    %rsi,%rcx
	sar    $0xb,%rcx
	mov    %ecx,0xc0(%rdi)
	lea    (%rsi,%rdx,1),%rcx
	sub    %rcx,%rax
	sar    $0xb,%rax
	mov    %eax,0xe0(%rdi)
	mov    -0x78(%rbp),%rax
	lea    0x2(%rax),%rsi
	mov    -0x70(%rbp),%rax
	lea    0x2(%rax),%rdx
	add    $0x4,%rdi
	mov    -0xe0(%rbp),%rax
	add    $0x1,%eax
	cmp    $0x7,%eax
	jle    3324c <jpeg_idct_14x14+0x5c>
	mov    -0xa0(%rbp),%rax
	mov    %eax,%r9d
	mov    -0xb0(%rbp),%r15
	lea    -0x2a0(%rbp),%rsi
	xor    %edx,%edx
	mov    -0xa8(%rbp),%rdi
	jmpq   33ca7 <jpeg_idct_14x14+0xab7>
	movslq 0x4(%rsi),%r10
	mov    %r10,-0x68(%rbp)
	movslq 0xc(%rsi),%r13
	mov    %r13,-0x48(%rbp)
	lea    0x0(%r13,%r10,1),%rax
	lea    (%rax,%rax,8),%rbx
	lea    (%rax,%rbx,2),%rax
	mov    %rax,%rcx
	shl    $0x6,%rcx
	shl    $0x9,%rax
	add    %rcx,%rax
	sub    %rbx,%rax
	mov    %rax,-0x90(%rbp)
	movslq 0x14(%rsi),%r14
	lea    (%r10,%r14,1),%r8
	mov    %r8,-0x50(%rbp)
	mov    %r8,%rbx
	shl    $0x6,%rbx
	mov    %r8,%rcx
	shl    $0xa,%rcx
	add    %rbx,%rcx
	lea    (%rcx,%r8,2),%rcx
	lea    (%rcx,%rcx,8),%rcx
	mov    %rcx,-0x70(%rbp)
	add    %rax,%rcx
	movslq 0x1c(%rsi),%rax
	mov    %rax,-0x60(%rbp)
	shl    $0xd,%rax
	mov    %rax,-0x88(%rbp)
	lea    (%rcx,%rax,1),%r11
	lea    (%r10,%r10,8),%rax
	shl    $0x6,%rax
	lea    (%r10,%rax,1),%rcx
	shl    $0x4,%rcx
	mov    %r11,%r8
	sub    %rcx,%r8
	movslq 0x8(%rsi),%r12
	mov    %r12,-0x80(%rbp)
	movslq 0x18(%rsi),%rax
	mov    %rax,-0x98(%rbp)
	lea    (%r12,%rax,1),%r10
	lea    (%r10,%r10,8),%rax
	shl    $0x5,%rax
	lea    (%r10,%r10,4),%rbx
	sub    %rbx,%rax
	shl    $0x5,%rax
	lea    (%rax,%r10,2),%rbx
	mov    %rbx,-0x40(%rbp)
	mov    %r12,%rax
	shl    $0x5,%rax
	lea    (%rax,%r12,2),%rax
	add    %r12,%rax
	shl    $0x6,%rax
	lea    (%r12,%r12,2),%r10
	mov    %r10,-0x78(%rbp)
	sub    %r10,%rax
	lea    (%rbx,%rax,1),%r10
	mov    %r10,-0x38(%rbp)
	movslq 0x10(%rsi),%r12
	lea    (%r12,%r12,4),%rax
	mov    %rax,-0x58(%rbp)
	shl    $0x5,%rax
	mov    %rax,-0xa0(%rbp)
	lea    (%rax,%r12,2),%rax
	add    %r12,%rax
	shl    $0x6,%rax
	lea    (%rax,%r12,4),%rax
	lea    (%rax,%r12,2),%rax
	mov    %rsi,-0xb0(%rbp)
	mov    %rax,-0x28(%rbp)
	movslq (%rsi),%rsi
	shl    $0xd,%rsi
	mov    %rsi,-0x30(%rbp)
	add    %rsi,%rax
	add    %rax,%r10
	lea    0x20000(%r8,%r10,1),%rax
	sar    $0x12,%rax
	and    $0x3ff,%eax
	movslq %eax,%rax
	movzbl 0x80(%r15,%rax,1),%eax
	mov    %rdx,-0xe0(%rbp)
	movslq %edx,%rdx
	mov    (%rdi,%rdx,8),%r8
	mov    %al,(%r9,%r8,1)
	sub    %r11,%rcx
	lea    0x20000(%rcx,%r10,1),%rax
	sar    $0x12,%rax
	and    $0x3ff,%eax
	movslq %eax,%rax
	movzbl 0x80(%r15,%rax,1),%eax
	mov    %al,0xd(%r9,%r8,1)
	lea    0x0(%r13,%r14,1),%rdx
	lea    (%rdx,%rdx,4),%rax
	shl    $0x4,%rax
	add    %rdx,%rax
	shl    $0x4,%rax
	lea    (%rdx,%rax,1),%rcx
	neg    %rcx
	lea    0x0(%r13,%r13,2),%rax
	shl    $0x7,%rax
	lea    (%rax,%r13,2),%rax
	lea    (%rax,%rax,8),%rax
	mov    -0x88(%rbp),%r13
	add    %r13,%rax
	neg    %rax
	add    %rcx,%rax
	mov    -0x90(%rbp),%rdi
	add    %rax,%rdi
	mov    -0x98(%rbp),%r11
	lea    (%r11,%r11,2),%rax
	shl    $0x4,%rax
	lea    (%rax,%r11,8),%rax
	sub    %r11,%rax
	shl    $0x8,%rax
	lea    (%rax,%r11,4),%rax
	mov    %rax,-0x88(%rbp)
	sub    %rax,%rbx
	mov    -0xa0(%rbp),%rax
	add    %r12,%rax
	shl    $0x4,%rax
	lea    (%rax,%r12,2),%rax
	lea    (%rsi,%rax,1),%r10
	mov    %r10,-0x90(%rbp)
	lea    (%rbx,%r10,1),%rax
	lea    0x20000(%rdi,%rax,1),%rax
	sar    $0x12,%rax
	and    $0x3ff,%eax
	movslq %eax,%rax
	movzbl 0x80(%r15,%rax,1),%eax
	mov    %al,0x1(%r9,%r8,1)
	lea    0x20000(%rbx,%r10,1),%rax
	sub    %rdi,%rax
	sar    $0x12,%rax
	and    $0x3ff,%eax
	movslq %eax,%rax
	movzbl 0x80(%r15,%rax,1),%eax
	mov    %al,0xc(%r9,%r8,1)
	lea    (%r14,%r14,8),%rdi
	lea    (%r14,%rdi,2),%rax
	shl    $0xa,%rax
	sub    %rdi,%rax
	add    %r13,%rax
	sub    %rax,%rcx
	mov    -0x70(%rbp),%rax
	lea    (%rcx,%rax,1),%rdi
	mov    -0x80(%rbp),%rcx
	lea    (%rcx,%rcx,4),%rax
	shl    $0x5,%rax
	mov    -0x78(%rbp),%rbx
	sub    %rbx,%rax
	shl    $0x5,%rax
	lea    (%rax,%rcx,2),%rax
	lea    (%rcx,%rax,1),%r10
	lea    (%r11,%r11,4),%rax
	lea    (%r11,%rax,2),%rax
	shl    $0x5,%rax
	add    %r11,%rax
	shl    $0x5,%rax
	mov    %rax,-0x98(%rbp)
	neg    %rax
	add    %r11,%rax
	lea    (%r10,%rax,1),%rcx
	lea    (%r12,%r12,2),%rax
	lea    (%r12,%rax,2),%rax
	shl    $0x4,%rax
	add    %r12,%rax
	shl    $0x6,%rax
	lea    (%r12,%r12,8),%rbx
	sub    %rax,%rbx
	lea    0x20000(%rsi,%rbx,1),%rbx
	lea    (%rbx,%rcx,1),%rax
	lea    (%rdi,%rax,1),%rcx
	sar    $0x12,%rcx
	and    $0x3ff,%ecx
	movslq %ecx,%rcx
	movzbl 0x80(%r15,%rcx,1),%ecx
	mov    %cl,0x2(%r9,%r8,1)
	sub    %rdi,%rax
	sar    $0x12,%rax
	and    $0x3ff,%eax
	movslq %eax,%rax
	movzbl 0x80(%r15,%rax,1),%eax
	mov    %al,0xb(%r9,%r8,1)
	mov    -0x68(%rbp),%rdi
	mov    %rdi,%rax
	sub    %rdx,%rax
	mov    -0x60(%rbp),%rcx
	lea    (%rcx,%rax,1),%rdx
	shl    $0xd,%rdx
	mov    -0x58(%rbp),%rax
	lea    (%r12,%rax,2),%rax
	shl    $0x4,%rax
	lea    (%rax,%r12,4),%rax
	add    %r12,%rax
	shl    $0x6,%rax
	lea    (%rax,%r12,2),%r12
	lea    0x20000(%rsi),%rax
	mov    %rax,%rcx
	sub    %r12,%rcx
	add    %rdx,%rcx
	sar    $0x12,%rcx
	and    $0x3ff,%ecx
	movslq %ecx,%rcx
	movzbl 0x80(%r15,%rcx,1),%ecx
	mov    %cl,0x3(%r9,%r8,1)
	lea    (%rdx,%r12,1),%rcx
	sub    %rcx,%rax
	sar    $0x12,%rax
	and    $0x3ff,%eax
	movslq %eax,%rax
	movzbl 0x80(%r15,%rax,1),%eax
	mov    %al,0xa(%r9,%r8,1)
	mov    -0x50(%rbp),%rcx
	lea    (%rcx,%rcx,2),%rax
	shl    $0x7,%rax
	add    %rcx,%rax
	shl    $0x4,%rax
	lea    (%rax,%rcx,4),%r12
	mov    -0x48(%rbp),%rsi
	mov    %r14,%rdx
	sub    %rsi,%rdx
	lea    (%rdx,%rdx,4),%rax
	mov    %rax,%rcx
	shl    $0x4,%rcx
	shl    $0x7,%rax
	add    %rax,%rcx
	mov    %rsi,%rax
	sub    %r14,%rax
	add    %rcx,%rax
	shl    $0x4,%rax
	lea    (%rax,%rdx,8),%rax
	mov    %rax,-0x80(%rbp)
	add    %r13,%rax
	mov    %r14,%rdx
	shl    $0x5,%rdx
	mov    %r14,%rcx
	shl    $0x9,%rcx
	add    %rdx,%rcx
	lea    (%rcx,%r14,8),%rcx
	lea    (%rcx,%r14,2),%rcx
	lea    (%rcx,%rcx,4),%rcx
	lea    (%rcx,%rcx,4),%rcx
	sub    %rcx,%rax
	lea    (%rax,%r12,1),%rdx
	lea    (%r11,%r10,1),%rcx
	mov    -0x98(%rbp),%rax
	sub    %rcx,%rax
	add    %rbx,%rax
	lea    (%rdx,%rax,1),%rcx
	sar    $0x12,%rcx
	and    $0x3ff,%ecx
	movslq %ecx,%rcx
	movzbl 0x80(%r15,%rcx,1),%ecx
	mov    %cl,0x4(%r9,%r8,1)
	sub    %rdx,%rax
	sar    $0x12,%rax
	and    $0x3ff,%eax
	movslq %eax,%rax
	movzbl 0x80(%r15,%rax,1),%eax
	mov    %al,0x9(%r9,%r8,1)
	mov    %rdi,%rcx
	sub    %rsi,%rcx
	mov    %rcx,%rax
	shl    $0x8,%rax
	lea    (%rax,%rcx,8),%rax
	lea    (%rax,%rcx,4),%rax
	lea    (%rax,%rcx,2),%rax
	add    %r13,%rax
	shl    $0xc,%rcx
	sub    %rax,%rcx
	lea    (%rsi,%rsi,4),%rax
	lea    (%rsi,%rax,4),%rax
	shl    $0x4,%rax
	lea    (%rax,%rsi,8),%rax
	add    %rsi,%rax
	shl    $0x4,%rax
	lea    (%rax,%rsi,8),%rax
	add    %rsi,%rax
	mov    -0x80(%rbp),%rdx
	add    %rdx,%rax
	lea    (%rax,%rcx,1),%rsi
	mov    -0x40(%rbp),%rax
	mov    -0x88(%rbp),%rdx
	sub    %rax,%rdx
	mov    -0x90(%rbp),%rbx
	lea    (%rdx,%rbx,1),%rax
	lea    0x20000(%rsi,%rax,1),%rax
	sar    $0x12,%rax
	and    $0x3ff,%eax
	movslq %eax,%rax
	movzbl 0x80(%r15,%rax,1),%eax
	mov    %al,0x5(%r9,%r8,1)
	lea    0x20000(%rdx,%rbx,1),%rax
	sub    %rsi,%rax
	sar    $0x12,%rax
	and    $0x3ff,%eax
	movslq %eax,%rax
	movzbl 0x80(%r15,%rax,1),%eax
	mov    %al,0x8(%r9,%r8,1)
	lea    (%rdi,%rdi,4),%rax
	lea    (%rdi,%rax,2),%rax
	mov    %rdi,%rdx
	shl    $0x9,%rdx
	shl    $0xd,%rdi
	add    %rdi,%rdx
	sub    %rdx,%rax
	add    %r12,%rax
	lea    (%rax,%rcx,1),%rdx
	mov    -0x30(%rbp),%rax
	mov    -0x28(%rbp),%rcx
	lea    0x20000(%rcx,%rax,1),%rax
	mov    -0x38(%rbp),%rsi
	mov    %rax,%rcx
	sub    %rsi,%rcx
	add    %rdx,%rcx
	sar    $0x12,%rcx
	and    $0x3ff,%ecx
	movslq %ecx,%rcx
	movzbl 0x80(%r15,%rcx,1),%ecx
	mov    %cl,0x6(%r9,%r8,1)
	lea    (%rdx,%rsi,1),%rcx
	sub    %rcx,%rax
	sar    $0x12,%rax
	and    $0x3ff,%eax
	movslq %eax,%rax
	movzbl 0x80(%rax,%r15,1),%eax
	mov    %al,0x7(%r9,%r8,1)
	mov    -0xe0(%rbp),%rax
	lea    0x1(%rax),%edx
	mov    -0xb0(%rbp),%rax
	lea    0x20(%rax),%rsi
	mov    -0xa8(%rbp),%rdi
	cmp    $0xd,%edx
	jle    33712 <jpeg_idct_14x14+0x522>
	mov    -0xd8(%rbp),%r15
	mov    -0xd0(%rbp),%r14
	mov    -0xc8(%rbp),%r13
	mov    -0xc0(%rbp),%r12
	mov    -0xb8(%rbp),%rbx
	leaveq 
	retq   
	data16 nopw %cs:0x0(%rax,%rax,1)

0033ce0 <jpeg_idct_15x15>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x300,%rsp
	mov    %r8,-0xd8(%rbp)
	mov    %rcx,-0xe0(%rbp)
	mov    %rbx,-0xf0(%rbp)
	mov    %r12,-0xf8(%rbp)
	mov    %r13,-0x100(%rbp)
	mov    %r14,-0x108(%rbp)
	mov    %r15,-0x110(%rbp)
	mov    0x1a8(%rdi),%rax
	mov    %rax,-0xe8(%rbp)
	mov    0x58(%rsi),%rcx
	xor    %esi,%esi
	lea    -0x2f8(%rbp),%rdi
	jmpq   342c3 <jpeg_idct_15x15+0x5e3>
	movswq 0x40(%rcx),%rax
	movswq 0x40(%rdx),%rbx
	imul   %ebx,%eax
	movslq %eax,%r10
	mov    %r10,-0x68(%rbp)
	movswq 0x20(%rcx),%rax
	movswq 0x20(%rdx),%rbx
	imul   %ebx,%eax
	movslq %eax,%r8
	mov    %r8,-0x70(%rbp)
	lea    (%r10,%r8,1),%r9
	mov    %r9,-0x58(%rbp)
	lea    (%r9,%r9,4),%rax
	shl    $0x5,%rax
	lea    (%rax,%r9,8),%rax
	lea    (%rax,%r9,2),%rax
	add    %r9,%rax
	shl    $0x6,%rax
	lea    (%rax,%r9,8),%rax
	lea    (%rax,%r9,4),%rax
	lea    (%rax,%r9,2),%r15
	mov    %r15,-0x8(%rbp)
	movswq 0x60(%rcx),%rax
	movswq 0x60(%rdx),%rbx
	imul   %ebx,%eax
	movslq %eax,%r13
	mov    %r13,%r12
	shl    $0x2,%r12
	lea    0x0(%r13,%r13,8),%rax
	shl    $0x5,%rax
	add    %r12,%rax
	add    %r13,%rax
	shl    $0x5,%rax
	lea    0x0(%r13,%r13,2),%r11
	sub    %r11,%rax
	movswq (%rcx),%rbx
	movswq (%rdx),%r14
	imul   %r14d,%ebx
	movslq %ebx,%rbx
	shl    $0xd,%rbx
	add    %rbx,%rax
	mov    %rax,-0x38(%rbp)
	lea    (%rax,%r15,1),%r14
	mov    %rsi,-0x118(%rbp)
	sub    %r10,%r8
	mov    %r8,-0xa0(%rbp)
	lea    (%r8,%r8,2),%rax
	mov    %rax,-0x60(%rbp)
	shl    $0x7,%rax
	lea    (%r8,%r8,4),%rsi
	add    %rsi,%rsi
	mov    %rsi,-0x98(%rbp)
	sub    %rsi,%rax
	mov    %rax,-0x10(%rbp)
	lea    (%r14,%rax,1),%rsi
	movswq 0x10(%rcx),%rax
	movswq 0x10(%rdx),%r8
	imul   %r8d,%eax
	movslq %eax,%rax
	mov    %rax,-0x80(%rbp)
	movswq 0x70(%rcx),%r8
	movswq 0x70(%rdx),%r10
	imul   %r10d,%r8d
	movslq %r8d,%r14
	sub    %r14,%rax
	lea    (%rax,%rax,4),%r8
	shl    $0x3,%r8
	lea    (%r8,%rax,4),%r8
	add    %rax,%r8
	shl    $0x8,%r8
	lea    (%r8,%rax,2),%r8
	movswq 0x50(%rcx),%rax
	movswq 0x50(%rdx),%r10
	imul   %r10d,%eax
	movslq %eax,%r15
	lea    (%r15,%r15,2),%rax
	lea    (%r15,%rax,4),%r10
	lea    (%r15,%r15,4),%rax
	shl    $0x7,%rax
	sub    %r10,%rax
	shl    $0x4,%rax
	add    %r15,%rax
	mov    %rax,-0x40(%rbp)
	lea    (%rax,%r8,1),%r10
	mov    %r10,-0x78(%rbp)
	lea    (%r14,%r14,4),%rax
	lea    (%r14,%rax,2),%r8
	shl    $0x7,%rax
	sub    %r8,%rax
	shl    $0x5,%rax
	lea    (%rax,%r14,2),%rax
	add    %r14,%rax
	add    %r10,%rax
	movswq 0x30(%rcx),%r8
	mov    %rdx,-0xb0(%rbp)
	movswq 0x30(%rdx),%rdx
	imul   %edx,%r8d
	movslq %r8d,%r10
	lea    (%r10,%r10,4),%r8
	mov    %rcx,-0xb8(%rbp)
	mov    %r8,%rcx
	shl    $0x3,%rcx
	lea    (%rcx,%r10,2),%rcx
	add    %r10,%rcx
	shl    $0x8,%rcx
	lea    (%rcx,%r10,8),%rcx
	lea    (%rcx,%r10,2),%rcx
	mov    %rcx,-0x48(%rbp)
	add    %rax,%rcx
	lea    0x400(%rsi,%rcx,1),%rax
	sar    $0xb,%rax
	mov    %eax,(%rdi)
	sub    %rcx,%rsi
	lea    0x400(%rsi),%rax
	sar    $0xb,%rax
	mov    %eax,0x1c0(%rdi)
	lea    (%r9,%r9,2),%rax
	shl    $0x5,%rax
	lea    (%rax,%r9,4),%rax
	add    %r9,%rax
	shl    $0x6,%rax
	lea    (%rax,%r9,8),%rax
	lea    (%rax,%r9,4),%rdx
	mov    %rdx,-0x28(%rbp)
	lea    0x0(%r13,%r11,2),%rcx
	shl    $0x9,%rcx
	mov    %r12,%rax
	sub    %rcx,%rax
	lea    0x400(%rbx,%rax,1),%rax
	mov    %rax,-0x50(%rbp)
	lea    (%rax,%rdx,1),%rsi
	mov    -0xa0(%rbp),%rdx
	mov    -0x98(%rbp),%rax
	add    %rdx,%rax
	shl    $0x4,%rax
	lea    (%rax,%rdx,4),%rax
	lea    (%rdx,%rax,1),%r9
	mov    %r9,-0x90(%rbp)
	mov    %r9,%rax
	shl    $0x4,%rax
	mov    %rax,-0x30(%rbp)
	lea    (%rsi,%rax,1),%rdx
	mov    %r10,%rax
	sub    %r14,%rax
	mov    %rax,-0x18(%rbp)
	mov    -0x80(%rbp),%rsi
	lea    (%rsi,%rax,1),%r11
	lea    (%r11,%r11,4),%rax
	shl    $0x4,%rax
	lea    (%rax,%r11,4),%rax
	add    %r11,%rax
	shl    $0x4,%rax
	lea    (%rax,%r11,2),%rax
	lea    (%rax,%rax,4),%r11
	mov    %r11,-0x20(%rbp)
	mov    %rsi,%rax
	shl    $0x8,%rax
	lea    (%rax,%rsi,8),%rax
	sub    %rsi,%rax
	shl    $0x4,%rax
	add    %rsi,%rax
	add    %rax,%r11
	lea    (%r11,%rdx,1),%rax
	sar    $0xb,%rax
	mov    %eax,0x20(%rdi)
	sub    %r11,%rdx
	sar    $0xb,%rdx
	mov    %edx,0x1a0(%rdi)
	shl    $0x5,%r9
	lea    0x0(%r13,%r12,1),%rax
	lea    0x0(%r13,%rax,2),%rax
	shl    $0x4,%rax
	add    %r12,%rax
	add    %r13,%rax
	shl    $0x6,%rax
	lea    (%rax,%r13,2),%rax
	mov    %rax,-0xa8(%rbp)
	lea    0x400(%rbx),%rdx
	mov    %rdx,-0x88(%rbp)
	neg    %rax
	add    %rdx,%rax
	lea    (%rax,%r9,1),%r11
	lea    (%r14,%r15,1),%rax
	mov    %rsi,%r9
	sub    %rax,%r9
	lea    (%r9,%r9,2),%rax
	lea    (%r9,%rax,4),%rbx
	lea    (%r9,%r9,4),%rax
	shl    $0x7,%rax
	sub    %rbx,%rax
	shl    $0x4,%rax
	add    %r9,%rax
	add    %r11,%rax
	sar    $0xb,%rax
	mov    %eax,0x40(%rdi)
	mov    %r14,%rax
	sub    %rsi,%rax
	lea    (%r15,%rax,1),%rbx
	lea    (%rbx,%rbx,2),%rax
	lea    (%rbx,%rax,4),%r9
	lea    (%rbx,%rbx,4),%rax
	shl    $0x7,%rax
	sub    %r9,%rax
	shl    $0x4,%rax
	add    %rbx,%rax
	add    %r11,%rax
	sar    $0xb,%rax
	mov    %eax,0x180(%rdi)
	sub    %r12,%rcx
	mov    -0x8(%rbp),%rax
	add    %rcx,%rax
	sub    %rax,%rdx
	mov    -0x10(%rbp),%rax
	lea    (%rdx,%rax,1),%rcx
	mov    -0x70(%rbp),%r9
	lea    (%r9,%r9,2),%rax
	shl    $0x3,%rax
	sub    %r9,%rax
	shl    $0x5,%rax
	add    %r9,%rax
	shl    $0x4,%rax
	lea    (%rax,%r9,2),%rax
	lea    (%r9,%rax,1),%r11
	lea    (%rcx,%r11,1),%rbx
	lea    (%rsi,%r14,1),%rcx
	lea    (%rcx,%rcx,8),%rax
	shl    $0x4,%rax
	lea    (%rax,%rcx,2),%rax
	add    %rcx,%rax
	shl    $0x5,%rax
	lea    (%rax,%rcx,8),%rdx
	lea    (%rsi,%rsi,4),%rcx
	mov    %rcx,%rax
	shl    $0x5,%rax
	lea    (%rax,%rcx,8),%rax
	neg    %rax
	add    %rsi,%rax
	mov    %rsi,%rcx
	shl    $0xc,%rcx
	add    %rcx,%rax
	lea    (%rdx,%rax,1),%r12
	shl    $0x4,%r8
	lea    (%r8,%r10,4),%rax
	add    %r10,%rax
	shl    $0x4,%rax
	lea    (%rax,%r10,2),%rax
	lea    (%rax,%rax,4),%r13
	mov    -0x40(%rbp),%r10
	lea    0x0(%r13,%r10,1),%rax
	mov    %r12,%rcx
	sub    %rax,%rcx
	add    %rbx,%rcx
	sar    $0xb,%rcx
	mov    %ecx,0x60(%rdi)
	sub    %r12,%rax
	add    %rbx,%rax
	sar    $0xb,%rax
	mov    %eax,0x160(%rdi)
	mov    -0x38(%rbp),%rax
	lea    0x400(%rax),%rcx
	mov    -0x28(%rbp),%rax
	mov    %rcx,%rbx
	sub    %rax,%rbx
	mov    -0x30(%rbp),%rax
	lea    (%rbx,%rax,1),%r12
	mov    -0x18(%rbp),%rbx
	mov    %rbx,%rax
	shl    $0x5,%rax
	mov    %rbx,%r8
	shl    $0x9,%r8
	add    %r8,%rax
	lea    (%rax,%rbx,8),%rax
	lea    (%rax,%rbx,4),%rax
	add    %rbx,%rax
	shl    $0x5,%rax
	lea    (%rax,%rbx,4),%rax
	mov    -0x20(%rbp),%r8
	mov    %r8,%rbx
	sub    %rax,%rbx
	add    %r12,%rbx
	sar    $0xb,%rbx
	mov    %ebx,0x80(%rdi)
	sub    %r8,%rax
	add    %r12,%rax
	sar    $0xb,%rax
	mov    %eax,0x140(%rdi)
	mov    -0x60(%rbp),%rax
	shl    $0x4,%rax
	mov    -0xa0(%rbp),%rbx
	lea    (%rax,%rbx,2),%rax
	add    %rbx,%rax
	shl    $0x6,%rax
	lea    (%rax,%rbx,8),%rbx
	mov    -0x68(%rbp),%rax
	sub    %r9,%rax
	lea    (%rbx,%rax,1),%r15
	mov    -0x58(%rbp),%rbx
	mov    %rbx,%rax
	shl    $0x5,%rax
	lea    (%rax,%rbx,2),%rax
	add    %rbx,%rax
	shl    $0x7,%rax
	lea    (%rax,%rbx,2),%rbx
	lea    (%r15,%rbx,1),%r12
	mov    %rcx,%r8
	sub    %r12,%r8
	lea    (%r14,%r14,2),%r9
	lea    (%r14,%r9,2),%rax
	shl    $0x6,%rax
	sub    %r9,%rax
	shl    $0x4,%rax
	add    %r14,%rax
	sub    %rax,%rdx
	lea    (%rdx,%r10,1),%rax
	mov    -0x48(%rbp),%rdx
	sub    %rdx,%rax
	lea    (%r8,%rax,1),%rdx
	sar    $0xb,%rdx
	mov    %edx,0xa0(%rdi)
	add    %r12,%rax
	sub    %rax,%rcx
	sar    $0xb,%rcx
	mov    %ecx,0x120(%rdi)
	mov    -0x50(%rbp),%rax
	add    %rbx,%rax
	lea    (%r11,%r15,1),%rbx
	mov    %rax,%rdx
	sub    %rbx,%rdx
	imul   $0x2399,%rsi,%rsi
	add    %r13,%rsi
	mov    -0x78(%rbp),%rcx
	sub    %rsi,%rcx
	add    %rcx,%rdx
	sar    $0xb,%rdx
	mov    %edx,0xc0(%rdi)
	add    %rbx,%rcx
	sub    %rcx,%rax
	sar    $0xb,%rax
	mov    %eax,0x100(%rdi)
	mov    -0x90(%rbp),%rax
	shl    $0x6,%rax
	mov    -0xa8(%rbp),%rcx
	add    %rax,%rcx
	mov    -0x88(%rbp),%rax
	sub    %rcx,%rax
	sar    $0xb,%rax
	mov    %eax,0xe0(%rdi)
	mov    -0xb8(%rbp),%rax
	lea    0x2(%rax),%rcx
	mov    -0xb0(%rbp),%rax
	lea    0x2(%rax),%rdx
	add    $0x4,%rdi
	mov    -0x118(%rbp),%rax
	lea    0x1(%rax),%esi
	cmp    $0x7,%esi
	jle    33d3c <jpeg_idct_15x15+0x5c>
	mov    -0xd8(%rbp),%rax
	mov    %eax,%r9d
	mov    -0xe8(%rbp),%r15
	lea    -0x2f8(%rbp),%rdi
	xor    %esi,%esi
	mov    -0xe0(%rbp),%rdx
	jmpq   34968 <jpeg_idct_15x15+0xc88>
	movslq 0x8(%rdi),%r8
	mov    %r8,-0x98(%rbp)
	movslq 0x10(%rdi),%rbx
	mov    %rbx,-0x58(%rbp)
	mov    %r8,%r14
	sub    %rbx,%r14
	mov    %r14,-0x50(%rbp)
	lea    (%r14,%r14,4),%rax
	lea    (%rax,%rax,1),%r13
	lea    (%r14,%r14,2),%rcx
	mov    %rcx,-0x48(%rbp)
	shl    $0x7,%rcx
	sub    %r13,%rcx
	mov    %rcx,-0x90(%rbp)
	lea    (%rbx,%r8,1),%r10
	mov    %r10,-0x60(%rbp)
	lea    (%r10,%r10,4),%rax
	shl    $0x5,%rax
	lea    (%rax,%r10,8),%rax
	lea    (%rax,%r10,2),%rax
	add    %r10,%rax
	shl    $0x6,%rax
	lea    (%rax,%r10,8),%rax
	lea    (%rax,%r10,4),%rax
	lea    (%rax,%r10,2),%r8
	mov    %r8,-0x88(%rbp)
	movslq 0x18(%rdi),%r11
	mov    %r11,-0xd0(%rbp)
	mov    %r11,%rbx
	shl    $0x2,%rbx
	mov    %rbx,-0xc8(%rbp)
	lea    (%r11,%r11,8),%rax
	shl    $0x5,%rax
	add    %rbx,%rax
	add    %r11,%rax
	shl    $0x5,%rax
	lea    (%r11,%r11,2),%rbx
	mov    %rbx,-0xd8(%rbp)
	sub    %rbx,%rax
	mov    %rax,-0x70(%rbp)
	movslq (%rdi),%rbx
	shl    $0xd,%rbx
	mov    %rbx,-0xc0(%rbp)
	add    %rbx,%rax
	add    %r8,%rax
	add    %rax,%rcx
	movslq 0x4(%rdi),%rax
	mov    %rax,-0xb8(%rbp)
	movslq 0x1c(%rdi),%r11
	sub    %r11,%rax
	lea    (%rax,%rax,4),%rbx
	shl    $0x3,%rbx
	lea    (%rbx,%rax,4),%rbx
	add    %rax,%rbx
	shl    $0x8,%rbx
	lea    (%rbx,%rax,2),%rbx
	movslq 0x14(%rdi),%r12
	lea    (%r12,%r12,2),%rax
	lea    (%r12,%rax,4),%r8
	lea    (%r12,%r12,4),%rax
	shl    $0x7,%rax
	sub    %r8,%rax
	shl    $0x4,%rax
	add    %r12,%rax
	mov    %rax,-0xb0(%rbp)
	lea    (%rax,%rbx,1),%r8
	mov    %r8,-0x40(%rbp)
	lea    (%r11,%r11,4),%rax
	lea    (%r11,%rax,2),%rbx
	shl    $0x7,%rax
	sub    %rbx,%rax
	shl    $0x5,%rax
	lea    (%rax,%r11,2),%rax
	add    %r11,%rax
	add    %rax,%r8
	movslq 0xc(%rdi),%rbx
	mov    %rdi,-0xe8(%rbp)
	mov    %rbx,-0xa8(%rbp)
	lea    (%rbx,%rbx,4),%rax
	mov    %rax,-0xa0(%rbp)
	shl    $0x3,%rax
	lea    (%rax,%rbx,2),%rax
	add    %rbx,%rax
	shl    $0x8,%rax
	lea    (%rax,%rbx,8),%rax
	lea    (%rax,%rbx,2),%rax
	mov    %rax,-0x68(%rbp)
	lea    (%r8,%rax,1),%rdi
	lea    0x20000(%rcx,%rdi,1),%rax
	sar    $0x12,%rax
	and    $0x3ff,%eax
	movslq %eax,%rax
	movzbl 0x80(%r15,%rax,1),%eax
	mov    %rsi,-0x118(%rbp)
	movslq %esi,%rsi
	mov    (%rdx,%rsi,8),%r8
	mov    %al,(%r9,%r8,1)
	sub    %rdi,%rcx
	lea    0x20000(%rcx),%rax
	sar    $0x12,%rax
	and    $0x3ff,%eax
	movslq %eax,%rax
	movzbl 0x80(%r15,%rax,1),%eax
	mov    %al,0xe(%r9,%r8,1)
	lea    (%r14,%r13,1),%rax
	shl    $0x4,%rax
	lea    (%rax,%r14,4),%rax
	lea    (%r14,%rax,1),%rsi
	mov    %rsi,-0x28(%rbp)
	mov    %rsi,%rcx
	shl    $0x4,%rcx
	mov    %rcx,-0x80(%rbp)
	lea    (%r10,%r10,2),%rax
	shl    $0x5,%rax
	lea    (%rax,%r10,4),%rax
	add    %r10,%rax
	shl    $0x6,%rax
	lea    (%rax,%r10,8),%rax
	lea    (%rax,%r10,4),%rax
	mov    %rax,-0x78(%rbp)
	mov    -0xd0(%rbp),%r10
	mov    -0xd8(%rbp),%rdx
	lea    (%r10,%rdx,2),%rdx
	shl    $0x9,%rdx
	mov    -0xc8(%rbp),%r14
	mov    %r14,%rdi
	sub    %rdx,%rdi
	mov    -0xc0(%rbp),%r13
	lea    0x20000(%r13,%rdi,1),%rdi
	mov    %rdi,-0x38(%rbp)
	add    %rdi,%rax
	add    %rcx,%rax
	sub    %r11,%rbx
	mov    %rbx,-0xd0(%rbp)
	mov    -0xb8(%rbp),%rdi
	add    %rdi,%rbx
	lea    (%rbx,%rbx,4),%rcx
	shl    $0x4,%rcx
	lea    (%rcx,%rbx,4),%rcx
	add    %rbx,%rcx
	shl    $0x4,%rcx
	lea    (%rcx,%rbx,2),%rcx
	lea    (%rcx,%rcx,4),%rbx
	mov    %rbx,-0xc8(%rbp)
	mov    %rdi,%rcx
	shl    $0x8,%rcx
	lea    (%rcx,%rdi,8),%rcx
	sub    %rdi,%rcx
	shl    $0x4,%rcx
	add    %rdi,%rcx
	add    %rcx,%rbx
	lea    (%rbx,%rax,1),%rcx
	sar    $0x12,%rcx
	and    $0x3ff,%ecx
	movslq %ecx,%rcx
	movzbl 0x80(%r15,%rcx,1),%ecx
	mov    %cl,0x1(%r9,%r8,1)
	sub    %rbx,%rax
	sar    $0x12,%rax
	and    $0x3ff,%eax
	movslq %eax,%rax
	movzbl 0x80(%r15,%rax,1),%eax
	mov    %al,0xd(%r9,%r8,1)
	shl    $0x5,%rsi
	lea    (%r10,%r14,1),%rax
	lea    (%r10,%rax,2),%rax
	shl    $0x4,%rax
	add    %r14,%rax
	add    %r10,%rax
	shl    $0x6,%rax
	lea    (%rax,%r10,2),%rax
	mov    %rax,-0x30(%rbp)
	lea    0x20000(%r13),%rcx
	mov    %rcx,-0x20(%rbp)
	neg    %rax
	add    %rcx,%rax
	lea    (%rax,%rsi,1),%r10
	lea    (%r11,%r12,1),%rax
	mov    %rdi,%rbx
	sub    %rax,%rbx
	lea    (%rbx,%rbx,2),%rax
	lea    (%rbx,%rax,4),%rsi
	lea    (%rbx,%rbx,4),%rax
	shl    $0x7,%rax
	sub    %rsi,%rax
	shl    $0x4,%rax
	add    %rbx,%rax
	add    %r10,%rax
	sar    $0x12,%rax
	and    $0x3ff,%eax
	movslq %eax,%rax
	movzbl 0x80(%r15,%rax,1),%eax
	mov    %al,0x2(%r9,%r8,1)
	mov    %r11,%rax
	sub    %rdi,%rax
	lea    (%r12,%rax,1),%rbx
	lea    (%rbx,%rbx,2),%rax
	lea    (%rbx,%rax,4),%rsi
	lea    (%rbx,%rbx,4),%rax
	shl    $0x7,%rax
	sub    %rsi,%rax
	shl    $0x4,%rax
	add    %rbx,%rax
	add    %r10,%rax
	sar    $0x12,%rax
	and    $0x3ff,%eax
	movslq %eax,%rax
	movzbl 0x80(%r15,%rax,1),%eax
	mov    %al,0xc(%r9,%r8,1)
	sub    %r14,%rdx
	mov    -0x88(%rbp),%rax
	add    %rdx,%rax
	sub    %rax,%rcx
	mov    -0x90(%rbp),%rax
	add    %rax,%rcx
	mov    -0x98(%rbp),%r10
	lea    (%r10,%r10,2),%rax
	shl    $0x3,%rax
	sub    %r10,%rax
	shl    $0x5,%rax
	add    %r10,%rax
	shl    $0x4,%rax
	lea    (%rax,%r10,2),%rax
	lea    (%r10,%rax,1),%r12
	lea    (%rcx,%r12,1),%rbx
	mov    -0xa0(%rbp),%rax
	shl    $0x4,%rax
	mov    -0xa8(%rbp),%rcx
	lea    (%rax,%rcx,4),%rax
	add    %rcx,%rax
	shl    $0x4,%rax
	lea    (%rax,%rcx,2),%rax
	lea    (%rax,%rax,4),%rax
	mov    %rax,-0xc0(%rbp)
	mov    -0xb0(%rbp),%r14
	lea    (%rax,%r14,1),%rcx
	lea    (%rdi,%r11,1),%rdx
	lea    (%rdx,%rdx,8),%rax
	shl    $0x4,%rax
	lea    (%rax,%rdx,2),%rax
	add    %rdx,%rax
	shl    $0x5,%rax
	lea    (%rax,%rdx,8),%rdx
	lea    (%rdi,%rdi,4),%rsi
	mov    %rsi,%rax
	shl    $0x5,%rax
	lea    (%rax,%rsi,8),%rax
	neg    %rax
	add    %rdi,%rax
	shl    $0xc,%rdi
	add    %rdi,%rax
	lea    (%rdx,%rax,1),%rsi
	mov    %rsi,%rax
	sub    %rcx,%rax
	add    %rbx,%rax
	sar    $0x12,%rax
	and    $0x3ff,%eax
	movslq %eax,%rax
	movzbl 0x80(%r15,%rax,1),%eax
	mov    %al,0x3(%r9,%r8,1)
	sub    %rsi,%rcx
	lea    (%rbx,%rcx,1),%rax
	sar    $0x12,%rax
	and    $0x3ff,%eax
	movslq %eax,%rax
	movzbl 0x80(%r15,%rax,1),%eax
	mov    %al,0xb(%r9,%r8,1)
	mov    -0x70(%rbp),%rax
	lea    0x20000(%r13,%rax,1),%rcx
	mov    -0x78(%rbp),%rax
	neg    %rax
	add    %rcx,%rax
	mov    -0x80(%rbp),%rsi
	lea    (%rax,%rsi,1),%rdi
	mov    -0xd0(%rbp),%rbx
	mov    %rbx,%rsi
	shl    $0x5,%rsi
	mov    %rbx,%rax
	shl    $0x9,%rax
	add    %rsi,%rax
	lea    (%rax,%rbx,8),%rax
	lea    (%rax,%rbx,4),%rax
	add    %rbx,%rax
	shl    $0x5,%rax
	lea    (%rax,%rbx,4),%rsi
	mov    -0xc8(%rbp),%rbx
	mov    %rbx,%rax
	sub    %rsi,%rax
	add    %rdi,%rax
	sar    $0x12,%rax
	and    $0x3ff,%eax
	movslq %eax,%rax
	movzbl 0x80(%r15,%rax,1),%eax
	mov    %al,0x4(%r9,%r8,1)
	sub    %rbx,%rsi
	lea    (%rsi,%rdi,1),%rax
	sar    $0x12,%rax
	and    $0x3ff,%eax
	movslq %eax,%rax
	movzbl 0x80(%r15,%rax,1),%eax
	mov    %al,0xa(%r9,%r8,1)
	mov    -0x60(%rbp),%rsi
	mov    %rsi,%rax
	shl    $0x5,%rax
	lea    (%rax,%rsi,2),%rax
	add    %rsi,%rax
	shl    $0x7,%rax
	lea    (%rax,%rsi,2),%r13
	mov    -0x48(%rbp),%rax
	shl    $0x4,%rax
	mov    -0x50(%rbp),%rsi
	lea    (%rax,%rsi,2),%rax
	add    %rsi,%rax
	shl    $0x6,%rax
	lea    (%rax,%rsi,8),%rsi
	mov    -0x58(%rbp),%rax
	sub    %r10,%rax
	lea    (%rsi,%rax,1),%r10
	lea    (%r10,%r13,1),%rbx
	mov    %rcx,%rsi
	sub    %rbx,%rsi
	lea    (%r11,%r11,2),%rdi
	lea    (%r11,%rdi,2),%rax
	shl    $0x6,%rax
	sub    %rdi,%rax
	shl    $0x4,%rax
	add    %r11,%rax
	sub    %rax,%rdx
	add    %r14,%rdx
	mov    -0x68(%rbp),%rax
	sub    %rax,%rdx
	lea    (%rsi,%rdx,1),%rax
	sar    $0x12,%rax
	and    $0x3ff,%eax
	movslq %eax,%rax
	movzbl 0x80(%r15,%rax,1),%eax
	mov    %al,0x5(%r9,%r8,1)
	lea    (%rbx,%rdx,1),%rax
	sub    %rax,%rcx
	sar    $0x12,%rcx
	and    $0x3ff,%ecx
	movslq %ecx,%rax
	movzbl 0x80(%r15,%rax,1),%eax
	mov    %al,0x9(%r9,%r8,1)
	mov    -0x38(%rbp),%rax
	add    %r13,%rax
	lea    (%r12,%r10,1),%rdi
	mov    %rax,%rsi
	sub    %rdi,%rsi
	mov    -0xb8(%rbp),%rcx
	imul   $0x2399,%rcx,%rcx
	mov    -0xc0(%rbp),%rdx
	add    %rdx,%rcx
	mov    -0x40(%rbp),%rdx
	sub    %rcx,%rdx
	lea    (%rsi,%rdx,1),%rcx
	sar    $0x12,%rcx
	and    $0x3ff,%ecx
	movslq %ecx,%rcx
	movzbl 0x80(%r15,%rcx,1),%ecx
	mov    %cl,0x6(%r9,%r8,1)
	lea    (%rdi,%rdx,1),%rcx
	sub    %rcx,%rax
	sar    $0x12,%rax
	and    $0x3ff,%eax
	movslq %eax,%rax
	movzbl 0x80(%r15,%rax,1),%eax
	mov    %al,0x8(%r9,%r8,1)
	mov    -0x28(%rbp),%rax
	shl    $0x6,%rax
	mov    -0x30(%rbp),%rcx
	add    %rax,%rcx
	mov    -0x20(%rbp),%rax
	sub    %rcx,%rax
	sar    $0x12,%rax
	and    $0x3ff,%eax
	movslq %eax,%rax
	movzbl 0x80(%rax,%r15,1),%eax
	mov    %al,0x7(%r9,%r8,1)
	mov    -0x118(%rbp),%rax
	lea    0x1(%rax),%esi
	mov    -0xe8(%rbp),%rax
	lea    0x20(%rax),%rdi
	mov    -0xe0(%rbp),%rdx
	cmp    $0xe,%esi
	jle    342f2 <jpeg_idct_15x15+0x612>
	mov    -0x110(%rbp),%r15
	mov    -0x108(%rbp),%r14
	mov    -0x100(%rbp),%r13
	mov    -0xf8(%rbp),%r12
	mov    -0xf0(%rbp),%rbx
	leaveq 
	retq   
	nopw   %cs:0x0(%rax,%rax,1)

00349a0 <jpeg_idct_16x16>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x2f0,%rsp
	mov    %r8,-0xb0(%rbp)
	mov    %rcx,-0xb8(%rbp)
	mov    %rbx,-0xc8(%rbp)
	mov    %r12,-0xd0(%rbp)
	mov    %r13,-0xd8(%rbp)
	mov    %r14,-0xe0(%rbp)
	mov    %r15,-0xe8(%rbp)
	mov    0x1a8(%rdi),%rax
	mov    %rax,-0xc0(%rbp)
	mov    0x58(%rsi),%rcx
	xor    %esi,%esi
	lea    -0x2f0(%rbp),%rdi
	jmpq   34f91 <jpeg_idct_16x16+0x5f1>
	movswq 0x20(%rcx),%rax
	movswq 0x20(%rdx),%rbx
	imul   %ebx,%eax
	movslq %eax,%r12
	movswq 0x60(%rcx),%rax
	movswq 0x60(%rdx),%rbx
	imul   %ebx,%eax
	movslq %eax,%r8
	mov    %r8,-0x10(%rbp)
	mov    %r12,%r10
	sub    %r8,%r10
	lea    (%r10,%r10,4),%rax
	lea    (%r10,%rax,2),%rax
	shl    $0x5,%rax
	lea    (%rax,%r10,2),%rax
	add    %r10,%rax
	shl    $0x5,%rax
	lea    (%rax,%r10,2),%rax
	lea    (%r10,%rax,1),%rbx
	mov    %rbx,-0x30(%rbp)
	lea    (%r8,%r8,4),%rax
	lea    (%r8,%rax,8),%rax
	shl    $0x9,%rax
	lea    (%rax,%r8,2),%rax
	add    %r8,%rax
	lea    (%rbx,%rax,1),%r8
	mov    %r8,-0x60(%rbp)
	movswq 0x40(%rcx),%rax
	movswq 0x40(%rdx),%rbx
	imul   %ebx,%eax
	movslq %eax,%r9
	lea    (%r9,%r9,4),%rax
	lea    (%r9,%rax,4),%rax
	shl    $0x9,%rax
	mov    %rax,-0x20(%rbp)
	lea    (%r9,%r9,2),%rbx
	shl    $0x4,%rbx
	add    %r9,%rbx
	mov    %rbx,-0x18(%rbp)
	sub    %rbx,%rax
	movswq (%rcx),%rbx
	mov    %rsi,-0xf0(%rbp)
	movswq (%rdx),%rsi
	imul   %esi,%ebx
	movslq %ebx,%rsi
	shl    $0xd,%rsi
	add    %rsi,%rax
	mov    %rax,-0x58(%rbp)
	lea    (%r8,%rax,1),%r14
	movswq 0x50(%rcx),%rax
	movswq 0x50(%rdx),%rbx
	imul   %ebx,%eax
	movslq %eax,%r15
	movswq 0x10(%rcx),%rax
	movswq 0x10(%rdx),%rbx
	imul   %ebx,%eax
	movslq %eax,%r8
	mov    %r8,-0x80(%rbp)
	lea    (%r15,%r8,1),%r11
	mov    %r11,-0x70(%rbp)
	lea    (%r11,%r11,2),%rax
	shl    $0x3,%rax
	mov    %r11,%rbx
	sub    %rax,%rbx
	lea    (%r11,%r11,4),%rax
	mov    %rax,-0x68(%rbp)
	shl    $0xb,%rax
	add    %rax,%rbx
	mov    %rbx,-0x8(%rbp)
	movswq 0x30(%rcx),%rax
	movswq 0x30(%rdx),%r11
	imul   %r11d,%eax
	movslq %eax,%r13
	mov    %r13,-0x78(%rbp)
	lea    (%r8,%r13,1),%r11
	lea    (%r11,%r11,4),%rax
	shl    $0x5,%rax
	lea    (%rax,%r11,8),%rax
	lea    (%rax,%r11,4),%rax
	add    %r11,%rax
	shl    $0x6,%rax
	lea    (%rax,%r11,8),%rax
	lea    (%rax,%r11,4),%rax
	lea    (%rax,%r11,2),%r11
	lea    (%rbx,%r11,1),%rax
	mov    %rcx,-0xa8(%rbp)
	movswq 0x70(%rcx),%rcx
	mov    %rdx,-0x88(%rbp)
	movswq 0x70(%rdx),%rdx
	imul   %edx,%ecx
	movslq %ecx,%rbx
	lea    (%r8,%rbx,1),%rdx
	mov    %rdx,%rcx
	shl    $0x5,%rcx
	lea    (%rcx,%rdx,2),%rcx
	add    %rdx,%rcx
	shl    $0x8,%rcx
	shl    $0x2,%rdx
	sub    %rdx,%rcx
	lea    (%rax,%rcx,1),%rdx
	lea    (%r8,%r8,8),%rax
	shl    $0x6,%rax
	lea    (%rax,%r8,8),%rax
	add    %r8,%rax
	shl    $0x5,%rax
	lea    (%rax,%r8,8),%rax
	lea    (%rax,%r8,2),%rax
	mov    %rdx,%r8
	sub    %rax,%r8
	lea    0x400(%r14,%r8,1),%r8
	sar    $0xb,%r8
	mov    %r8d,(%rdi)
	sub    %rdx,%rax
	lea    0x400(%r14,%rax,1),%rax
	sar    $0xb,%rax
	mov    %eax,0x1e0(%rdi)
	lea    (%r15,%r13,1),%rdx
	lea    (%rdx,%rdx,8),%rax
	shl    $0x3,%rax
	sub    %rdx,%rax
	shl    $0x4,%rax
	lea    0x0(%r13,%r13,8),%rdx
	shl    $0x6,%rdx
	lea    (%rdx,%r13,8),%rdx
	lea    (%rdx,%r13,4),%rdx
	add    %r13,%rdx
	add    %rax,%rdx
	add    %r11,%rdx
	lea    (%rbx,%r13,1),%r8
	mov    %r8,-0x50(%rbp)
	imul   $0xffffffffffffeaab,%r8,%r8
	lea    (%r8,%rdx,1),%r14
	lea    (%r10,%r10,2),%rdx
	lea    (%r10,%rdx,2),%rdx
	shl    $0x6,%rdx
	lea    (%rdx,%r10,4),%rdx
	lea    (%rdx,%rdx,4),%r13
	mov    %r12,%rdx
	imul   $0x1ccd,%rdx,%rdx
	lea    (%rdx,%r13,1),%r10
	mov    %r10,-0x48(%rbp)
	mov    %r9,%r11
	shl    $0x4,%r11
	mov    %r9,%rdx
	shl    $0x8,%rdx
	add    %r11,%rdx
	lea    (%rdx,%r9,4),%rdx
	add    %r9,%rdx
	shl    $0x4,%rdx
	lea    (%r9,%rdx,1),%r11
	lea    (%rsi,%r11,1),%rdx
	mov    %rdx,-0x40(%rbp)
	lea    (%r10,%rdx,1),%r9
	lea    0x400(%r14,%r9,1),%rdx
	sar    $0xb,%rdx
	mov    %edx,0x20(%rdi)
	lea    0x400(%r9),%rdx
	sub    %r14,%rdx
	sar    $0xb,%rdx
	mov    %edx,0x1c0(%rdi)
	lea    (%r15,%r15,2),%r9
	mov    %r9,%rdx
	shl    $0xa,%rdx
	lea    (%rdx,%r15,2),%rdx
	lea    (%rdx,%rdx,2),%rdx
	sub    %rdx,%rax
	mov    -0x8(%rbp),%rdx
	add    %rdx,%rax
	lea    (%r15,%rbx,1),%rdx
	imul   $0xffffffffffffd4b2,%rdx,%rdx
	lea    (%rdx,%rax,1),%r14
	mov    %r12,%r10
	shl    $0x2,%r10
	lea    (%r12,%r12,8),%rax
	lea    (%r10,%rax,8),%rax
	lea    (%r12,%rax,1),%r10
	shl    $0x6,%r10
	mov    %r10,-0x28(%rbp)
	lea    (%r12,%r12,1),%rax
	mov    %rax,-0x38(%rbp)
	sub    %r10,%rax
	mov    -0x30(%rbp),%r12
	add    %r12,%rax
	lea    0x400(%rsi),%r10
	sub    %r11,%r10
	add    %r10,%rax
	lea    (%r14,%rax,1),%r11
	sar    $0xb,%r11
	mov    %r11d,0x40(%rdi)
	sub    %r14,%rax
	sar    $0xb,%rax
	mov    %eax,0x1a0(%rdi)
	mov    %rbx,%r11
	shl    $0x5,%r11
	mov    %rbx,%rax
	shl    $0x9,%rax
	add    %r11,%rax
	add    %rbx,%rax
	shl    $0x4,%rax
	lea    (%rax,%rbx,8),%rax
	add    %r8,%rax
	add    %rcx,%rax
	lea    (%rdx,%rax,1),%r14
	mov    -0x10(%rbp),%rax
	mov    %rax,%rcx
	shl    $0x8,%rcx
	lea    (%rcx,%rax,4),%rcx
	add    %rcx,%rax
	shl    $0x4,%rax
	mov    %r13,%r11
	sub    %rax,%r11
	mov    -0x20(%rbp),%rdx
	mov    -0x18(%rbp),%rcx
	sub    %rdx,%rcx
	lea    0x400(%rsi,%rcx,1),%r8
	lea    (%r11,%r8,1),%rcx
	lea    (%r14,%rcx,1),%rdx
	sar    $0xb,%rdx
	mov    %edx,0x60(%rdi)
	sub    %r14,%rcx
	sar    $0xb,%rcx
	mov    %ecx,0x180(%rdi)
	mov    -0x80(%rbp),%rcx
	mov    %rcx,%rsi
	sub    %rbx,%rsi
	lea    (%rsi,%rsi,8),%rdx
	shl    $0x4,%rdx
	lea    (%rdx,%rsi,8),%rdx
	add    %rsi,%rdx
	shl    $0x4,%rdx
	lea    (%rdx,%rsi,2),%rdx
	lea    (%rdx,%rdx,2),%r14
	mov    -0x50(%rbp),%rsi
	lea    (%rsi,%rsi,2),%rdx
	shl    $0x3,%rdx
	mov    %rsi,%r11
	sub    %rdx,%r11
	lea    (%rsi,%rsi,4),%rdx
	shl    $0xb,%rdx
	add    %rdx,%r11
	lea    (%rbx,%rbx,2),%rdx
	shl    $0x6,%rdx
	lea    (%rdx,%rbx,8),%rdx
	add    %rbx,%rdx
	shl    $0x7,%rdx
	lea    (%rdx,%rbx,4),%rdx
	add    %rbx,%rdx
	sub    %r11,%rdx
	lea    (%r14,%rdx,1),%rsi
	sub    %r15,%rbx
	mov    %rbx,%rdx
	shl    $0x5,%rdx
	lea    (%rdx,%rbx,2),%rdx
	add    %rbx,%rdx
	shl    $0x5,%rdx
	add    %rbx,%rdx
	lea    (%rdx,%rdx,2),%rbx
	add    %rbx,%rsi
	sub    %r13,%rax
	add    %r8,%rax
	lea    (%rsi,%rax,1),%rdx
	sar    $0xb,%rdx
	mov    %edx,0x80(%rdi)
	sub    %rsi,%rax
	sar    $0xb,%rax
	mov    %eax,0x160(%rdi)
	mov    -0x78(%rbp),%rsi
	mov    %r15,%rdx
	sub    %rsi,%rdx
	lea    (%rdx,%rdx,4),%rax
	shl    $0x8,%rax
	add    %rdx,%rax
	lea    (%rax,%rax,8),%r13
	shl    $0x4,%r9
	lea    (%r15,%r9,1),%rax
	shl    $0x7,%rax
	lea    (%rax,%r15,4),%rax
	lea    (%rax,%r15,2),%rax
	mov    %r13,%r9
	sub    %rax,%r9
	mov    -0x68(%rbp),%rax
	mov    -0x70(%rbp),%rdx
	lea    (%rdx,%rax,4),%rax
	shl    $0x4,%rax
	lea    (%rax,%rdx,4),%rax
	add    %rdx,%rax
	shl    $0x4,%rax
	lea    (%rax,%rdx,4),%rax
	lea    (%rdx,%rax,1),%r8
	lea    (%r9,%r8,1),%rax
	add    %rax,%rbx
	mov    -0x38(%rbp),%rax
	lea    (%r12,%rax,1),%rdx
	mov    -0x28(%rbp),%rax
	sub    %rdx,%rax
	add    %r10,%rax
	lea    (%rbx,%rax,1),%rdx
	sar    $0xb,%rdx
	mov    %edx,0xa0(%rdi)
	sub    %rbx,%rax
	sar    $0xb,%rax
	mov    %eax,0x140(%rdi)
	lea    (%rsi,%rsi,4),%rax
	shl    $0x3,%rax
	lea    (%rax,%rsi,4),%rax
	lea    (%rax,%rsi,2),%rax
	lea    (%rax,%rax,4),%rdx
	mov    %rsi,%rax
	shl    $0xe,%rax
	sub    %rdx,%rax
	lea    0x0(%r13,%rax,1),%rdx
	neg    %rsi
	add    %rcx,%rsi
	mov    %rsi,%rax
	shl    $0x5,%rax
	lea    (%rax,%rsi,2),%rax
	add    %rsi,%rax
	shl    $0x5,%rax
	add    %rsi,%rax
	lea    (%rax,%rax,2),%r9
	add    %r9,%rdx
	sub    %r11,%rdx
	mov    -0x40(%rbp),%rax
	add    $0x400,%rax
	mov    -0x48(%rbp),%rbx
	mov    %rax,%rsi
	sub    %rbx,%rsi
	add    %rdx,%rsi
	sar    $0xb,%rsi
	mov    %esi,0xc0(%rdi)
	add    %rbx,%rdx
	sub    %rdx,%rax
	sar    $0xb,%rax
	mov    %eax,0x120(%rdi)
	mov    -0x58(%rbp),%rax
	add    $0x400,%rax
	mov    -0x60(%rbp),%rdx
	sub    %rdx,%rax
	lea    (%r14,%r8,1),%rdx
	lea    (%rdx,%r9,1),%rbx
	lea    (%rcx,%rcx,4),%rdx
	lea    (%rcx,%rdx,4),%rdx
	shl    $0x6,%rdx
	lea    (%rdx,%rcx,2),%rsi
	shl    $0xe,%rcx
	mov    %rsi,%rdx
	sub    %rcx,%rdx
	add    %rbx,%rdx
	add    %rax,%rdx
	sar    $0xb,%rdx
	mov    %edx,0xe0(%rdi)
	lea    (%rbx,%rsi,1),%rdx
	sub    %rdx,%rcx
	add    %rcx,%rax
	sar    $0xb,%rax
	mov    %eax,0x100(%rdi)
	mov    -0xa8(%rbp),%rax
	lea    0x2(%rax),%rcx
	mov    -0x88(%rbp),%rax
	lea    0x2(%rax),%rdx
	add    $0x4,%rdi
	mov    -0xf0(%rbp),%rax
	lea    0x1(%rax),%esi
	cmp    $0x7,%esi
	jle    349fc <jpeg_idct_16x16+0x5c>
	mov    -0xb0(%rbp),%rax
	mov    %eax,%r10d
	mov    -0xc0(%rbp),%r15
	lea    -0x2f0(%rbp),%rsi
	xor    %edx,%edx
	mov    -0xb8(%rbp),%rcx
	jmpq   3566c <jpeg_idct_16x16+0xccc>
	movslq 0x8(%rsi),%rbx
	mov    %rbx,-0xa0(%rbp)
	movslq 0x18(%rsi),%r8
	mov    %r8,-0x78(%rbp)
	sub    %r8,%rbx
	lea    (%rbx,%rbx,4),%rax
	lea    (%rbx,%rax,2),%rax
	shl    $0x5,%rax
	lea    (%rax,%rbx,2),%rax
	add    %rbx,%rax
	shl    $0x5,%rax
	lea    (%rax,%rbx,2),%rax
	lea    (%rbx,%rax,1),%rdi
	mov    %rdi,-0x98(%rbp)
	lea    (%r8,%r8,4),%rax
	lea    (%r8,%rax,8),%rax
	shl    $0x9,%rax
	lea    (%rax,%r8,2),%rax
	add    %r8,%rax
	lea    (%rdi,%rax,1),%r8
	mov    %r8,-0x28(%rbp)
	movslq 0x10(%rsi),%r9
	mov    %r9,-0xb0(%rbp)
	lea    (%r9,%r9,4),%rax
	lea    (%r9,%rax,4),%rax
	shl    $0x9,%rax
	mov    %rax,-0x88(%rbp)
	lea    (%r9,%r9,2),%rdi
	shl    $0x4,%rdi
	add    %r9,%rdi
	mov    %rdi,-0x80(%rbp)
	sub    %rdi,%rax
	mov    %rax,-0x20(%rbp)
	movslq (%rsi),%rdi
	shl    $0xd,%rdi
	mov    %rdi,-0xa8(%rbp)
	add    %rdi,%rax
	add    %rax,%r8
	movslq 0x4(%rsi),%r9
	mov    %r9,-0x58(%rbp)
	movslq 0x14(%rsi),%r14
	lea    (%r14,%r9,1),%r11
	mov    %r11,-0x50(%rbp)
	lea    (%r11,%r11,2),%rax
	shl    $0x3,%rax
	mov    %r11,%rdi
	sub    %rax,%rdi
	lea    (%r11,%r11,4),%rax
	mov    %rax,-0x48(%rbp)
	shl    $0xb,%rax
	lea    (%rax,%rdi,1),%r11
	mov    %r11,-0x90(%rbp)
	movslq 0xc(%rsi),%r13
	mov    %r13,-0x40(%rbp)
	lea    (%r9,%r13,1),%rdi
	lea    (%rdi,%rdi,4),%rax
	shl    $0x5,%rax
	lea    (%rax,%rdi,8),%rax
	lea    (%rax,%rdi,4),%rax
	add    %rdi,%rax
	shl    $0x6,%rax
	lea    (%rax,%rdi,8),%rax
	lea    (%rax,%rdi,4),%rax
	lea    (%rax,%rdi,2),%r12
	add    %r12,%r11
	mov    %rsi,-0xc0(%rbp)
	movslq 0x1c(%rsi),%rdi
	lea    (%r9,%rdi,1),%rsi
	mov    %rsi,%rax
	shl    $0x5,%rax
	lea    (%rax,%rsi,2),%rax
	add    %rsi,%rax
	shl    $0x8,%rax
	shl    $0x2,%rsi
	sub    %rsi,%rax
	mov    %rax,-0x70(%rbp)
	add    %rax,%r11
	lea    (%r9,%r9,8),%rax
	shl    $0x6,%rax
	lea    (%rax,%r9,8),%rax
	add    %r9,%rax
	shl    $0x5,%rax
	lea    (%rax,%r9,8),%rax
	lea    (%rax,%r9,2),%rsi
	mov    %r11,%rax
	sub    %rsi,%rax
	lea    0x20000(%rax,%r8,1),%rax
	sar    $0x12,%rax
	and    $0x3ff,%eax
	movslq %eax,%rax
	movzbl 0x80(%r15,%rax,1),%eax
	mov    %rdx,-0xf0(%rbp)
	movslq %edx,%rdx
	mov    (%rcx,%rdx,8),%r9
	mov    %al,(%r10,%r9,1)
	sub    %r11,%rsi
	lea    0x20000(%rsi,%r8,1),%rax
	sar    $0x12,%rax
	and    $0x3ff,%eax
	movslq %eax,%rax
	movzbl 0x80(%r15,%rax,1),%eax
	mov    %al,0xf(%r10,%r9,1)
	lea    (%r14,%r13,1),%rcx
	lea    (%rcx,%rcx,8),%rax
	shl    $0x3,%rax
	sub    %rcx,%rax
	shl    $0x4,%rax
	lea    0x0(%r13,%r13,8),%rcx
	shl    $0x6,%rcx
	lea    (%rcx,%r13,8),%rcx
	lea    (%rcx,%r13,4),%rcx
	add    %r13,%rcx
	add    %rax,%rcx
	lea    (%rcx,%r12,1),%rdx
	lea    (%rdi,%r13,1),%rcx
	mov    %rcx,-0x60(%rbp)
	imul   $0xffffffffffffeaab,%rcx,%rcx
	mov    %rcx,-0x68(%rbp)
	add    %rcx,%rdx
	lea    (%rbx,%rbx,2),%rcx
	lea    (%rbx,%rcx,2),%rcx
	shl    $0x6,%rcx
	lea    (%rcx,%rbx,4),%rcx
	lea    (%rcx,%rcx,4),%r12
	mov    -0xa0(%rbp),%r13
	mov    %r13,%rcx
	imul   $0x1ccd,%rcx,%rcx
	lea    (%rcx,%r12,1),%r8
	mov    %r8,-0x38(%rbp)
	mov    -0xb0(%rbp),%rbx
	mov    %rbx,%rsi
	shl    $0x4,%rsi
	mov    %rbx,%rcx
	shl    $0x8,%rcx
	add    %rsi,%rcx
	lea    (%rcx,%rbx,4),%rcx
	add    %rbx,%rcx
	shl    $0x4,%rcx
	add    %rcx,%rbx
	mov    %rbx,-0x30(%rbp)
	mov    -0xa8(%rbp),%r11
	lea    (%r11,%rbx,1),%rsi
	lea    (%r8,%rsi,1),%rcx
	lea    0x20000(%rdx,%rcx,1),%rcx
	sar    $0x12,%rcx
	and    $0x3ff,%ecx
	movslq %ecx,%rcx
	movzbl 0x80(%r15,%rcx,1),%ecx
	mov    %cl,0x1(%r10,%r9,1)
	lea    0x20000(%r8,%rsi,1),%rcx
	sub    %rdx,%rcx
	sar    $0x12,%rcx
	and    $0x3ff,%ecx
	movslq %ecx,%rcx
	movzbl 0x80(%r15,%rcx,1),%ecx
	mov    %cl,0xe(%r10,%r9,1)
	lea    (%r14,%r14,2),%rcx
	mov    %rcx,%rdx
	shl    $0xa,%rdx
	lea    (%rdx,%r14,2),%rdx
	lea    (%rdx,%rdx,2),%rdx
	sub    %rdx,%rax
	mov    -0x90(%rbp),%rdx
	add    %rdx,%rax
	lea    (%r14,%rdi,1),%rsi
	imul   $0xffffffffffffd4b2,%rsi,%rsi
	lea    (%rsi,%rax,1),%r8
	mov    %r13,%rdx
	shl    $0x2,%rdx
	lea    0x0(%r13,%r13,8),%rax
	lea    (%rdx,%rax,8),%rax
	add    %r13,%rax
	shl    $0x6,%rax
	mov    %rax,-0x90(%rbp)
	lea    0x0(%r13,%r13,1),%rdx
	mov    %rdx,-0xa0(%rbp)
	sub    %rax,%rdx
	mov    -0x98(%rbp),%r13
	add    %r13,%rdx
	lea    0x20000(%r11),%rax
	sub    %rbx,%rax
	mov    %rax,-0x98(%rbp)
	add    %rdx,%rax
	lea    (%r8,%rax,1),%rdx
	sar    $0x12,%rdx
	and    $0x3ff,%edx
	movslq %edx,%rdx
	movzbl 0x80(%r15,%rdx,1),%edx
	mov    %dl,0x2(%r10,%r9,1)
	sub    %r8,%rax
	sar    $0x12,%rax
	and    $0x3ff,%eax
	movslq %eax,%rax
	movzbl 0x80(%r15,%rax,1),%eax
	mov    %al,0xd(%r10,%r9,1)
	mov    -0x88(%rbp),%rdx
	mov    -0x80(%rbp),%rax
	sub    %rdx,%rax
	lea    0x20000(%r11,%rax,1),%r11
	mov    -0x78(%rbp),%rdx
	mov    %rdx,%rax
	shl    $0x8,%rax
	lea    (%rax,%rdx,4),%rax
	add    %rax,%rdx
	shl    $0x4,%rdx
	mov    %r12,%rax
	sub    %rdx,%rax
	add    %r11,%rax
	mov    %rdi,%r8
	shl    $0x5,%r8
	mov    %rdi,%rbx
	shl    $0x9,%rbx
	add    %r8,%rbx
	lea    (%rdi,%rbx,1),%r8
	shl    $0x4,%r8
	lea    (%r8,%rdi,8),%rbx
	mov    -0x68(%rbp),%r8
	add    %r8,%rbx
	mov    -0x70(%rbp),%r8
	add    %r8,%rbx
	add    %rsi,%rbx
	lea    (%rbx,%rax,1),%rsi
	sar    $0x12,%rsi
	and    $0x3ff,%esi
	movslq %esi,%rsi
	movzbl 0x80(%r15,%rsi,1),%esi
	mov    %sil,0x3(%r10,%r9,1)
	sub    %rbx,%rax
	sar    $0x12,%rax
	and    $0x3ff,%eax
	movslq %eax,%rax
	movzbl 0x80(%r15,%rax,1),%eax
	mov    %al,0xc(%r10,%r9,1)
	sub    %r12,%rdx
	lea    (%rdx,%r11,1),%rax
	mov    -0x58(%rbp),%rdx
	mov    %rdx,%rbx
	sub    %rdi,%rbx
	lea    (%rbx,%rbx,8),%rsi
	shl    $0x4,%rsi
	lea    (%rsi,%rbx,8),%rsi
	add    %rbx,%rsi
	shl    $0x4,%rsi
	lea    (%rsi,%rbx,2),%rsi
	lea    (%rsi,%rsi,2),%r12
	mov    -0x60(%rbp),%r8
	lea    (%r8,%r8,2),%rsi
	shl    $0x3,%rsi
	mov    %r8,%rbx
	sub    %rsi,%rbx
	lea    (%r8,%r8,4),%rsi
	shl    $0xb,%rsi
	lea    (%rsi,%rbx,1),%r11
	lea    (%rdi,%rdi,2),%rsi
	shl    $0x6,%rsi
	lea    (%rsi,%rdi,8),%rsi
	add    %rdi,%rsi
	shl    $0x7,%rsi
	lea    (%rsi,%rdi,4),%rsi
	add    %rdi,%rsi
	sub    %r11,%rsi
	lea    (%r12,%rsi,1),%rbx
	sub    %r14,%rdi
	mov    %rdi,%rsi
	shl    $0x5,%rsi
	lea    (%rsi,%rdi,2),%rsi
	add    %rdi,%rsi
	shl    $0x5,%rsi
	add    %rdi,%rsi
	lea    (%rsi,%rsi,2),%r8
	lea    (%rbx,%r8,1),%rdi
	lea    (%rdi,%rax,1),%rsi
	sar    $0x12,%rsi
	and    $0x3ff,%esi
	movslq %esi,%rsi
	movzbl 0x80(%r15,%rsi,1),%esi
	mov    %sil,0x4(%r10,%r9,1)
	sub    %rdi,%rax
	sar    $0x12,%rax
	and    $0x3ff,%eax
	movslq %eax,%rax
	movzbl 0x80(%r15,%rax,1),%eax
	mov    %al,0xb(%r10,%r9,1)
	mov    -0x48(%rbp),%rax
	mov    -0x50(%rbp),%rsi
	lea    (%rsi,%rax,4),%rax
	shl    $0x4,%rax
	lea    (%rax,%rsi,4),%rax
	add    %rsi,%rax
	shl    $0x4,%rax
	lea    (%rax,%rsi,4),%rax
	lea    (%rsi,%rax,1),%rbx
	mov    -0x40(%rbp),%rsi
	mov    %r14,%rdi
	sub    %rsi,%rdi
	lea    (%rdi,%rdi,4),%rax
	shl    $0x8,%rax
	add    %rdi,%rax
	lea    (%rax,%rax,8),%rdi
	shl    $0x4,%rcx
	lea    (%r14,%rcx,1),%rax
	shl    $0x7,%rax
	lea    (%rax,%r14,4),%rax
	lea    (%rax,%r14,2),%rax
	neg    %rax
	add    %rdi,%rax
	add    %rbx,%rax
	add    %rax,%r8
	mov    -0xa0(%rbp),%rax
	lea    0x0(%r13,%rax,1),%rcx
	mov    -0x90(%rbp),%rax
	sub    %rcx,%rax
	mov    -0x98(%rbp),%rcx
	add    %rcx,%rax
	lea    (%r8,%rax,1),%rcx
	sar    $0x12,%rcx
	and    $0x3ff,%ecx
	movslq %ecx,%rcx
	movzbl 0x80(%r15,%rcx,1),%ecx
	mov    %cl,0x5(%r10,%r9,1)
	sub    %r8,%rax
	sar    $0x12,%rax
	and    $0x3ff,%eax
	movslq %eax,%rax
	movzbl 0x80(%r15,%rax,1),%eax
	mov    %al,0xa(%r10,%r9,1)
	mov    %rdx,%rcx
	sub    %rsi,%rcx
	mov    %rcx,%rax
	shl    $0x5,%rax
	lea    (%rax,%rcx,2),%rax
	add    %rcx,%rax
	shl    $0x5,%rax
	add    %rcx,%rax
	lea    (%rax,%rax,2),%r8
	lea    (%rsi,%rsi,4),%rax
	shl    $0x3,%rax
	lea    (%rax,%rsi,4),%rax
	lea    (%rax,%rsi,2),%rax
	lea    (%rax,%rax,4),%rax
	shl    $0xe,%rsi
	sub    %rax,%rsi
	lea    (%rdi,%rsi,1),%rax
	lea    (%rax,%r8,1),%rsi
	sub    %r11,%rsi
	mov    -0x30(%rbp),%rax
	mov    -0xa8(%rbp),%rdi
	lea    0x20000(%rdi,%rax,1),%rax
	mov    -0x38(%rbp),%r11
	mov    %rax,%rcx
	sub    %r11,%rcx
	add    %rsi,%rcx
	sar    $0x12,%rcx
	and    $0x3ff,%ecx
	movslq %ecx,%rcx
	movzbl 0x80(%r15,%rcx,1),%ecx
	mov    %cl,0x6(%r10,%r9,1)
	lea    (%r11,%rsi,1),%rcx
	sub    %rcx,%rax
	sar    $0x12,%rax
	and    $0x3ff,%eax
	movslq %eax,%rax
	movzbl 0x80(%r15,%rax,1),%eax
	mov    %al,0x9(%r10,%r9,1)
	mov    -0x20(%rbp),%rax
	lea    0x20000(%rax,%rdi,1),%rcx
	mov    -0x28(%rbp),%rax
	sub    %rax,%rcx
	lea    (%r12,%rbx,1),%rax
	lea    (%rax,%r8,1),%rdi
	lea    (%rdx,%rdx,4),%rax
	lea    (%rdx,%rax,4),%rax
	shl    $0x6,%rax
	lea    (%rax,%rdx,2),%rsi
	shl    $0xe,%rdx
	mov    %rsi,%rax
	sub    %rdx,%rax
	add    %rdi,%rax
	add    %rcx,%rax
	sar    $0x12,%rax
	and    $0x3ff,%eax
	movslq %eax,%rax
	movzbl 0x80(%r15,%rax,1),%eax
	mov    %al,0x7(%r10,%r9,1)
	lea    (%rdi,%rsi,1),%rax
	sub    %rax,%rdx
	lea    (%rcx,%rdx,1),%rax
	sar    $0x12,%rax
	and    $0x3ff,%eax
	movslq %eax,%rax
	movzbl 0x80(%rax,%r15,1),%eax
	mov    %al,0x8(%r10,%r9,1)
	mov    -0xf0(%rbp),%rax
	lea    0x1(%rax),%edx
	mov    -0xc0(%rbp),%rax
	lea    0x20(%rax),%rsi
	mov    -0xb8(%rbp),%rcx
	cmp    $0xf,%edx
	jle    34fc0 <jpeg_idct_16x16+0x620>
	mov    -0xe8(%rbp),%r15
	mov    -0xe0(%rbp),%r14
	mov    -0xd8(%rbp),%r13
	mov    -0xd0(%rbp),%r12
	mov    -0xc8(%rbp),%rbx
	leaveq 
	retq   
	nopw   0x0(%rax,%rax,1)

00356a0 <jpeg_idct_4x4>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0xc0,%rsp
	mov    %r8,-0x28(%rbp)
	mov    %rcx,-0x38(%rbp)
	mov    %r12,-0x8(%rbp)
	mov    %r13,-0x10(%rbp)
	mov    %r14,-0x18(%rbp)
	mov    %r15,-0x20(%rbp)
	mov    0x1a8(%rdi),%rax
	mov    %rax,-0x30(%rbp)
	mov    0x58(%rsi),%rax
	lea    -0xb8(%rbp),%rcx
	mov    $0x8,%esi
	jmpq   358b5 <jpeg_idct_4x4+0x215>
	movswq 0x70(%rax),%rdi
	movswq 0x70(%rdx),%r8
	imul   %r8d,%edi
	movslq %edi,%r14
	mov    %r14,%rdi
	shl    $0x8,%rdi
	lea    (%rdi,%r14,4),%rdi
	lea    (%r14,%rdi,1),%r8
	shl    $0x4,%r8
	movswq 0x50(%rax),%rdi
	movswq 0x50(%rdx),%r9
	imul   %r9d,%edi
	movslq %edi,%r15
	mov    %r15,%r9
	shl    $0x2,%r9
	lea    (%r15,%r15,8),%rdi
	lea    (%r9,%rdi,8),%rdi
	add    %r15,%rdi
	shl    $0x6,%rdi
	add    %rdi,%r8
	lea    (%r15,%r15,1),%rdi
	sub    %r8,%rdi
	movswq 0x30(%rax),%r8
	movswq 0x30(%rdx),%r9
	imul   %r9d,%r8d
	movslq %r8d,%r10
	mov    %r10,%r8
	imul   $0x1ccd,%r8,%r8
	lea    (%r8,%rdi,1),%r9
	movswq 0x10(%rax),%rdi
	movswq 0x10(%rdx),%r8
	imul   %r8d,%edi
	movslq %edi,%r13
	lea    0x0(%r13,%r13,4),%rdi
	lea    0x0(%r13,%rdi,8),%rdi
	shl    $0x9,%rdi
	lea    (%rdi,%r13,2),%rdi
	add    %r13,%rdi
	lea    (%r9,%rdi,1),%r11
	movswq 0x20(%rax),%rdi
	movswq 0x20(%rdx),%r8
	imul   %r8d,%edi
	movslq %edi,%r9
	mov    %r9,%r8
	shl    $0x2,%r8
	lea    (%r9,%r9,2),%rdi
	lea    (%r8,%rdi,8),%rdi
	add    %r9,%rdi
	shl    $0x4,%rdi
	lea    (%rdi,%r9,8),%rdi
	add    %r9,%rdi
	shl    $0x5,%rdi
	lea    (%r9,%rdi,1),%r12
	movswq 0x60(%rax),%rdi
	movswq 0x60(%rdx),%r8
	imul   %r8d,%edi
	movslq %edi,%r9
	lea    (%r9,%r9,2),%rdi
	shl    $0x4,%rdi
	lea    (%r9,%rdi,1),%r8
	shl    $0x7,%r8
	lea    (%r9,%r9,1),%rdi
	sub    %r8,%rdi
	add    %rdi,%r12
	movswq (%rax),%rdi
	movswq (%rdx),%r8
	imul   %r8d,%edi
	movslq %edi,%r8
	shl    $0xe,%r8
	lea    (%r12,%r8,1),%rdi
	lea    0x800(%r11,%rdi,1),%r9
	sar    $0xc,%r9
	mov    %r9d,(%rcx)
	sub    %r11,%rdi
	add    $0x800,%rdi
	sar    $0xc,%rdi
	mov    %edi,0x60(%rcx)
	lea    (%r14,%r14,2),%rdi
	shl    $0x3,%rdi
	lea    (%rdi,%r14,2),%rdi
	add    %r14,%rdi
	shl    $0x6,%rdi
	lea    (%rdi,%r14,2),%r11
	lea    (%r15,%r15,2),%rdi
	mov    %rdi,%r9
	shl    $0x7,%r9
	lea    (%r9,%r15,8),%r9
	lea    (%r9,%r15,2),%r9
	add    %r15,%r9
	add    %r11,%r9
	shl    $0xc,%rdi
	sub    %r9,%rdi
	imul   $0xffffffffffffba79,%r10,%r10
	add    %rdi,%r10
	mov    %r13,%r9
	shl    $0x9,%r9
	mov    %r13,%rdi
	shl    $0xd,%rdi
	add    %r9,%rdi
	lea    0x0(%r13,%r13,2),%r9
	lea    0x0(%r13,%r9,2),%r9
	sub    %r9,%rdi
	lea    (%r10,%rdi,1),%r9
	mov    %r8,%rdi
	sub    %r12,%rdi
	lea    0x800(%r9,%rdi,1),%rdi
	sar    $0xc,%rdi
	mov    %edi,0x20(%rcx)
	lea    (%r9,%r12,1),%rdi
	sub    %rdi,%r8
	lea    0x800(%r8),%rdi
	sar    $0xc,%rdi
	mov    %edi,0x40(%rcx)
	add    $0x2,%rdx
	add    $0x2,%rax
	add    $0x4,%rcx
	add    $0xffffffff,%esi
	test   %esi,%esi
	jg     358da <jpeg_idct_4x4+0x23a>
	mov    -0x28(%rbp),%rax
	mov    %eax,%r9d
	xor    %esi,%esi
	mov    %rbx,-0x28(%rbp)
	mov    -0x30(%rbp),%r11
	lea    -0xb8(%rbp),%rax
	mov    -0x38(%rbp),%rcx
	jmpq   35b15 <jpeg_idct_4x4+0x475>
	cmp    $0x4,%esi
	je     358a6 <jpeg_idct_4x4+0x206>
	movswq 0x10(%rdx),%rdi
	test   %di,%di
	jne    356e3 <jpeg_idct_4x4+0x43>
	movswq 0x20(%rdx),%rdi
	test   %di,%di
	jne    356e3 <jpeg_idct_4x4+0x43>
	movswq 0x30(%rdx),%rdi
	test   %di,%di
	jne    356e3 <jpeg_idct_4x4+0x43>
	movswq 0x50(%rdx),%rdi
	test   %di,%di
	jne    356e3 <jpeg_idct_4x4+0x43>
	movswq 0x60(%rdx),%rdi
	test   %di,%di
	jne    356e3 <jpeg_idct_4x4+0x43>
	movswq 0x70(%rdx),%rdi
	test   %di,%di
	jne    356e3 <jpeg_idct_4x4+0x43>
	movswq (%rax),%rdi
	movswq (%rdx),%r8
	imul   %r8d,%edi
	shl    $0x2,%edi
	mov    %edi,(%rcx)
	mov    %edi,0x20(%rcx)
	mov    %edi,0x40(%rcx)
	mov    %edi,0x60(%rcx)
	jmpq   358a6 <jpeg_idct_4x4+0x206>
	movslq 0x8(%rax),%rdx
	mov    %rdx,%rcx
	shl    $0x2,%rcx
	lea    (%rdx,%rdx,2),%rdi
	lea    (%rcx,%rdi,8),%rcx
	add    %rdx,%rcx
	shl    $0x4,%rcx
	lea    (%rcx,%rdx,8),%rcx
	add    %rdx,%rcx
	shl    $0x5,%rcx
	lea    (%rdx,%rcx,1),%rbx
	movslq 0x18(%rax),%rdi
	lea    (%rdi,%rdi,2),%rcx
	shl    $0x4,%rcx
	lea    (%rdi,%rcx,1),%rdx
	shl    $0x7,%rdx
	lea    (%rdi,%rdi,1),%rcx
	sub    %rdx,%rcx
	lea    (%rbx,%rcx,1),%r12
	movslq (%rax),%rdx
	shl    $0xe,%rdx
	lea    (%r12,%rdx,1),%rbx
	movslq 0x1c(%rax),%r14
	mov    %r14,%rcx
	shl    $0x8,%rcx
	lea    (%rcx,%r14,4),%rcx
	lea    (%r14,%rcx,1),%rdi
	shl    $0x4,%rdi
	movslq 0x14(%rax),%r15
	mov    %r15,%r10
	shl    $0x2,%r10
	lea    (%r15,%r15,8),%rcx
	lea    (%r10,%rcx,8),%rcx
	add    %r15,%rcx
	shl    $0x6,%rcx
	add    %rcx,%rdi
	lea    (%r15,%r15,1),%rcx
	sub    %rdi,%rcx
	movslq 0xc(%rax),%rdi
	mov    %rdi,%r10
	imul   $0x1ccd,%r10,%r10
	add    %rcx,%r10
	movslq 0x4(%rax),%r13
	lea    0x0(%r13,%r13,4),%rcx
	lea    0x0(%r13,%rcx,8),%rcx
	shl    $0x9,%rcx
	lea    (%rcx,%r13,2),%rcx
	add    %r13,%rcx
	add    %rcx,%r10
	lea    0x40000(%r10,%rbx,1),%rcx
	sar    $0x13,%rcx
	and    $0x3ff,%ecx
	movslq %ecx,%rcx
	movzbl 0x80(%r11,%rcx,1),%ecx
	mov    %cl,(%r9,%r8,1)
	sub    %r10,%rbx
	lea    0x40000(%rbx),%rcx
	sar    $0x13,%rcx
	and    $0x3ff,%ecx
	movslq %ecx,%rcx
	movzbl 0x80(%r11,%rcx,1),%ecx
	mov    %cl,0x3(%r9,%r8,1)
	lea    (%r14,%r14,2),%rcx
	shl    $0x3,%rcx
	lea    (%rcx,%r14,2),%rcx
	add    %r14,%rcx
	shl    $0x6,%rcx
	lea    (%rcx,%r14,2),%r10
	lea    (%r15,%r15,2),%rcx
	mov    %rcx,%rbx
	shl    $0x7,%rbx
	lea    (%rbx,%r15,8),%rbx
	lea    (%rbx,%r15,2),%rbx
	add    %r15,%rbx
	add    %r10,%rbx
	shl    $0xc,%rcx
	sub    %rbx,%rcx
	imul   $0xffffffffffffba79,%rdi,%rdi
	lea    (%rdi,%rcx,1),%rbx
	mov    %r13,%rcx
	shl    $0x9,%rcx
	mov    %r13,%rdi
	shl    $0xd,%rdi
	add    %rdi,%rcx
	lea    0x0(%r13,%r13,2),%rdi
	lea    0x0(%r13,%rdi,2),%rdi
	sub    %rdi,%rcx
	lea    (%rbx,%rcx,1),%rdi
	mov    %rdx,%rcx
	sub    %r12,%rcx
	lea    0x40000(%rdi,%rcx,1),%rcx
	sar    $0x13,%rcx
	and    $0x3ff,%ecx
	movslq %ecx,%rcx
	movzbl 0x80(%r11,%rcx,1),%ecx
	mov    %cl,0x1(%r9,%r8,1)
	lea    (%rdi,%r12,1),%rcx
	sub    %rcx,%rdx
	lea    0x40000(%rdx),%rcx
	sar    $0x13,%rcx
	and    $0x3ff,%ecx
	movslq %ecx,%rcx
	movzbl 0x80(%rcx,%r11,1),%ecx
	mov    %cl,0x2(%r9,%r8,1)
	add    $0x20,%rax
	mov    -0x38(%rbp),%rcx
	add    $0x1,%esi
	cmp    $0x3,%esi
	jle    35b30 <jpeg_idct_4x4+0x490>
	mov    -0x20(%rbp),%r15
	mov    -0x18(%rbp),%r14
	mov    -0x10(%rbp),%r13
	mov    -0x8(%rbp),%r12
	mov    -0x28(%rbp),%rbx
	leaveq 
	retq   
	movslq %esi,%rdx
	mov    (%rcx,%rdx,8),%r8
	movslq 0x4(%rax),%rdx
	test   %edx,%edx
	jne    35952 <jpeg_idct_4x4+0x2b2>
	movslq 0x8(%rax),%rdx
	test   %edx,%edx
	jne    35952 <jpeg_idct_4x4+0x2b2>
	movslq 0xc(%rax),%rdx
	test   %edx,%edx
	jne    35952 <jpeg_idct_4x4+0x2b2>
	movslq 0x14(%rax),%rdx
	test   %edx,%edx
	jne    35952 <jpeg_idct_4x4+0x2b2>
	movslq 0x18(%rax),%rdx
	test   %edx,%edx
	jne    35952 <jpeg_idct_4x4+0x2b2>
	movslq 0x1c(%rax),%rdx
	test   %edx,%edx
	jne    35952 <jpeg_idct_4x4+0x2b2>
	movslq (%rax),%rdx
	add    $0x10,%rdx
	sar    $0x5,%rdx
	and    $0x3ff,%edx
	movslq %edx,%rdx
	movzbl 0x80(%r11,%rdx,1),%edx
	mov    %dl,(%r9,%r8,1)
	mov    %dl,0x1(%r9,%r8,1)
	mov    %dl,0x2(%r9,%r8,1)
	mov    %dl,0x3(%r9,%r8,1)
	add    $0x20,%rax
	jmpq   35b12 <jpeg_idct_4x4+0x472>
	nopl   0x0(%rax,%rax,1)

0035bc0 <jpeg_idct_2x2>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x50,%rsp
	mov    %r8,-0x8(%rbp)
	mov    0x1a8(%rdi),%rax
	mov    %rax,-0x10(%rbp)
	mov    0x58(%rsi),%rsi
	lea    -0x50(%rbp),%rdi
	mov    $0x8,%eax
	jmpq   35cc0 <jpeg_idct_2x2+0x100>
	movswq 0x50(%rsi),%r8
	movswq 0x50(%rdx),%r9
	imul   %r9d,%r8d
	movslq %r8d,%r9
	lea    (%r9,%r9,2),%r8
	shl    $0x5,%r8
	lea    (%r8,%r9,8),%r8
	lea    (%r8,%r9,4),%r8
	add    %r9,%r8
	shl    $0x6,%r8
	lea    (%r9,%r9,8),%r9
	sub    %r9,%r8
	movswq 0x70(%rsi),%r9
	movswq 0x70(%rdx),%r10
	imul   %r10d,%r9d
	movslq %r9d,%r9
	imul   $0xffffffffffffe8ee,%r9,%r9
	add    %r8,%r9
	movswq 0x30(%rsi),%r8
	movswq 0x30(%rdx),%r10
	imul   %r10d,%r8d
	movslq %r8d,%r8
	imul   $0xffffffffffffd746,%r8,%r8
	lea    (%r8,%r9,1),%r11
	movswq 0x10(%rsi),%r8
	movswq 0x10(%rdx),%r9
	imul   %r9d,%r8d
	movslq %r8d,%r10
	mov    %r10,%r9
	shl    $0x2,%r9
	lea    (%r10,%r10,2),%r8
	lea    (%r9,%r8,8),%r8
	add    %r10,%r8
	shl    $0xa,%r8
	sub    %r9,%r8
	lea    (%r11,%r8,1),%r10
	movswq (%rsi),%r8
	movswq (%rdx),%r9
	imul   %r9d,%r8d
	movslq %r8d,%r8
	shl    $0xf,%r8
	lea    0x1000(%r10,%r8,1),%r9
	sar    $0xd,%r9
	mov    %r9d,(%rdi)
	sub    %r10,%r8
	add    $0x1000,%r8
	sar    $0xd,%r8
	mov    %r8d,0x20(%rdi)
	add    $0x2,%rdx
	add    $0x2,%rsi
	add    $0x4,%rdi
	add    $0xffffffff,%eax
	test   %eax,%eax
	jg     35cde <jpeg_idct_2x2+0x11e>
	mov    -0x8(%rbp),%rax
	mov    %eax,%r11d
	xor    %edi,%edi
	mov    %r15,-0x8(%rbp)
	mov    -0x10(%rbp),%r8
	lea    -0x50(%rbp),%rax
	jmpq   35dfa <jpeg_idct_2x2+0x23a>
	cmp    $0x6,%eax
	je     35cb1 <jpeg_idct_2x2+0xf1>
	cmp    $0x4,%eax
	je     35cb1 <jpeg_idct_2x2+0xf1>
	cmp    $0x2,%eax
	je     35cb1 <jpeg_idct_2x2+0xf1>
	movswq 0x10(%rdx),%r8
	test   %r8w,%r8w
	jne    35be9 <jpeg_idct_2x2+0x29>
	movswq 0x30(%rdx),%r8
	test   %r8w,%r8w
	jne    35be9 <jpeg_idct_2x2+0x29>
	movswq 0x50(%rdx),%r8
	test   %r8w,%r8w
	jne    35be9 <jpeg_idct_2x2+0x29>
	movswq 0x70(%rdx),%r8
	test   %r8w,%r8w
	jne    35be9 <jpeg_idct_2x2+0x29>
	movswq (%rsi),%r8
	movswq (%rdx),%r9
	imul   %r9d,%r8d
	shl    $0x2,%r8d
	mov    %r8d,(%rdi)
	mov    %r8d,0x20(%rdi)
	jmpq   35cb1 <jpeg_idct_2x2+0xf1>
	movslq 0x14(%rax),%rsi
	lea    (%rsi,%rsi,2),%rdx
	shl    $0x5,%rdx
	lea    (%rdx,%rsi,8),%rdx
	lea    (%rdx,%rsi,4),%rdx
	add    %rsi,%rdx
	shl    $0x6,%rdx
	lea    (%rsi,%rsi,8),%rsi
	sub    %rsi,%rdx
	movslq 0x1c(%rax),%rsi
	imul   $0xffffffffffffe8ee,%rsi,%rsi
	add    %rdx,%rsi
	movslq 0xc(%rax),%rdx
	imul   $0xffffffffffffd746,%rdx,%rdx
	lea    (%rdx,%rsi,1),%r15
	movslq 0x4(%rax),%rdx
	mov    %rdx,%rsi
	shl    $0x2,%rsi
	lea    (%rdx,%rdx,2),%r9
	lea    (%rsi,%r9,8),%r9
	add    %r9,%rdx
	shl    $0xa,%rdx
	sub    %rsi,%rdx
	lea    (%r15,%rdx,1),%r9
	movslq (%rax),%rdx
	shl    $0xf,%rdx
	lea    0x80000(%r9,%rdx,1),%rsi
	sar    $0x14,%rsi
	and    $0x3ff,%esi
	movslq %esi,%rsi
	movzbl 0x80(%r8,%rsi,1),%esi
	mov    %sil,(%r11,%r10,1)
	sub    %r9,%rdx
	add    $0x80000,%rdx
	sar    $0x14,%rdx
	and    $0x3ff,%edx
	movslq %edx,%rdx
	movzbl 0x80(%rdx,%r8,1),%edx
	mov    %dl,0x1(%r11,%r10,1)
	add    $0x20,%rax
	add    $0x1,%edi
	cmp    $0x1,%edi
	jle    35e05 <jpeg_idct_2x2+0x245>
	mov    -0x8(%rbp),%r15
	leaveq 
	retq   
	movslq %edi,%rdx
	mov    (%rcx,%rdx,8),%r10
	movslq 0x4(%rax),%rdx
	test   %edx,%edx
	jne    35d45 <jpeg_idct_2x2+0x185>
	movslq 0xc(%rax),%rdx
	test   %edx,%edx
	jne    35d45 <jpeg_idct_2x2+0x185>
	movslq 0x14(%rax),%rdx
	test   %edx,%edx
	jne    35d45 <jpeg_idct_2x2+0x185>
	movslq 0x1c(%rax),%rdx
	test   %edx,%edx
	jne    35d45 <jpeg_idct_2x2+0x185>
	movslq (%rax),%rdx
	add    $0x10,%rdx
	sar    $0x5,%rdx
	and    $0x3ff,%edx
	movslq %edx,%rdx
	movzbl 0x80(%r8,%rdx,1),%edx
	mov    %dl,(%r11,%r10,1)
	mov    %dl,0x1(%r11,%r10,1)
	add    $0x20,%rax
	jmp    35df7 <jpeg_idct_2x2+0x237>
	nopl   0x0(%rax,%rax,1)

0035e70 <jpeg_idct_1x1>:
	push   %rbp
	mov    %rsp,%rbp
	mov    0x58(%rsi),%rax
	movswq (%rax),%rax
	movswq (%rdx),%rdx
	imul   %edx,%eax
	movslq %eax,%rax
	add    $0x4,%rax
	sar    $0x3,%rax
	and    $0x3ff,%eax
	movslq %eax,%rax
	mov    0x1a8(%rdi),%rdx
	movzbl 0x80(%rax,%rdx,1),%edx
	mov    %r8d,%esi
	mov    (%rcx),%rax
	mov    %dl,(%rsi,%rax,1)
	leaveq 
	retq   

0035eb0 <jinit_1pass_quantizer>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %r15,-0x8(%rbp)
	mov    0x8(%rdi),%rax
	mov    (%rax),%rax
	mov    $0x1,%esi
	mov    $0x98,%edx
	mov    %rdi,%r15
	callq  *%rax
	mov    %rax,0x270(%r15)
	lea    0xdb0(%rip),%rcx        # 36c90 <start_pass_1_quant>
	mov    %rcx,(%rax)
	lea    0xf46(%rip),%rcx        # 36e30 <finish_pass_1_quant>
	mov    %rcx,0x10(%rax)
	lea    0xf4b(%rip),%rcx        # 36e40 <new_color_map_1_quant>
	mov    %rcx,0x18(%rax)
	movq   $0x0,0x70(%rax)
	movq   $0x0,0x50(%rax)
	movslq 0x90(%r15),%rax
	cmp    $0x4,%eax
	jle    35f34 <jinit_1pass_quantizer+0x84>
	mov    (%r15),%rax
	movl   $0x37,0x28(%rax)
	mov    (%r15),%rax
	movl   $0x4,0x2c(%rax)
	mov    (%r15),%rax
	mov    (%rax),%rax
	mov    %r15,%rdi
	callq  *%rax
	movslq 0x78(%r15),%rax
	cmp    $0x100,%eax
	jle    35f5e <jinit_1pass_quantizer+0xae>
	mov    (%r15),%rax
	movl   $0x39,0x28(%rax)
	mov    (%r15),%rax
	movl   $0x100,0x2c(%rax)
	mov    (%r15),%rax
	mov    (%rax),%rax
	mov    %r15,%rdi
	callq  *%rax
	mov    %r15,%rdi
	callq  36180 <create_colormap>
	mov    %r15,%rdi
	callq  36310 <create_colorindex>
	mov    0x70(%r15),%eax
	cmp    $0x2,%eax
	je     35f7d <jinit_1pass_quantizer+0xcd>
	mov    -0x8(%rbp),%r15
	leaveq 
	retq   
	mov    %r15,%rdi
	callq  36c10 <alloc_fs_workspace>
	mov    -0x8(%rbp),%r15
	leaveq 
	retq   
	nopl   0x0(%rax,%rax,1)

0035f90 <select_ncolors>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x50,%rsp
	mov    %rdi,-0x38(%rbp)
	movq   $0x1,-0x44(%rbp)
	movslq 0x90(%rdi),%r8
	movslq 0x78(%rdi),%r11
	lea    0x253ce(%rip),%rax        # 5b384 <rgb_green>
	mov    0x40(%rdi),%ecx
	movslq (%rax,%rcx,4),%rax
	mov    %eax,-0x44(%rbp)
	lea    0x25379(%rip),%rax        # 5b340 <rgb_red>
	movslq (%rax,%rcx,4),%rax
	mov    %eax,-0x40(%rbp)
	lea    0x253f3(%rip),%rax        # 5b3c8 <rgb_blue>
	movslq (%rax,%rcx,4),%rax
	mov    %eax,-0x3c(%rbp)
	mov    $0x1,%edx
	mov    %rdx,%r9
	jmp    35fe9 <select_ncolors+0x59>
	mov    %rdi,%r9
	lea    0x1(%r9),%edi
	movslq %edi,%r10
	mov    %rdx,%rcx
	mov    %r10,%rax
	jmp    35fff <select_ncolors+0x6f>
	imul   %r10,%rax
	add    $0x1,%ecx
	cmp    %ecx,%r8d
	jg     35ff8 <select_ncolors+0x68>
	cmp    %rax,%r11
	jge    35fe6 <select_ncolors+0x56>
	xor    %ecx,%ecx
	cmp    $0x1,%r9d
	jle    36034 <select_ncolors+0xa4>
	mov    %r11,-0x30(%rbp)
	mov    %rbx,-0x8(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %r15,-0x28(%rbp)
	mov    %rdx,%rbx
	mov    %rcx,%rdx
	mov    %rbx,%rax
	jmp    3609b <select_ncolors+0x10b>
	mov    -0x38(%rbp),%rdi
	mov    (%rdi),%r10
	movl   $0x38,0x28(%r10)
	mov    (%rdi),%r10
	mov    %eax,0x2c(%r10)
	mov    (%rdi),%rax
	mov    (%rax),%rax
	mov    %r11,-0x30(%rbp)
	mov    %rbx,-0x8(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %r15,-0x28(%rbp)
	mov    %rdx,%rbx
	mov    %r8,%r12
	mov    %rsi,%r13
	mov    %rcx,%r14
	mov    %r9,%r15
	callq  *%rax
	mov    %r14,%rdx
	mov    %r13,%rsi
	mov    %r12,%r8
	mov    %r15,%r9
	mov    %rdx,%rcx
	mov    %rbx,%rax
	jmp    3609b <select_ncolors+0x10b>
	imul   %r9d,%eax
	movslq %edx,%rdi
	mov    %r9d,(%rsi,%rdi,4)
	add    $0x1,%edx
	cmp    %r8d,%edx
	jl     3608d <select_ncolors+0xfd>
	mov    -0x30(%rbp),%r9
	mov    -0x38(%rbp),%rdi
	mov    %rcx,%r10
	mov    %r10,%r11
	jmp    360b6 <select_ncolors+0x126>
	mov    %rcx,%r10
	mov    %r10,%r11
	cmp    %r8d,%r11d
	jge    360f7 <select_ncolors+0x167>
	mov    0x40(%rdi),%edx
	cmp    $0x2,%edx
	je     360c8 <select_ncolors+0x138>
	mov    %r11,%rdx
	jmp    360d0 <select_ncolors+0x140>
	movslq %r11d,%rdx
	movslq -0x44(%rbp,%rdx,4),%rdx
	movslq %edx,%r12
	movslq (%rsi,%r12,4),%r13
	cltd   
	mov    %rax,%r14
	idiv   %r13d
	movslq %eax,%r13
	movslq (%rsi,%r12,4),%rdx
	add    $0x1,%edx
	movslq %edx,%rax
	imul   %r13,%rax
	cmp    %rax,%r9
	jge    36112 <select_ncolors+0x182>
	mov    %r14,%rax
	test   %r10d,%r10d
	jg     360b0 <select_ncolors+0x120>
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	leaveq 
	retq   
	mov    %edx,(%rsi,%r12,4)
	add    $0x1,%r11d
	mov    %rbx,%r10
	jmp    360b6 <select_ncolors+0x126>
	nop

0036120 <output_value>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rcx,%rax
	shr    $0x1f,%eax
	add    %ecx,%eax
	sar    %eax
	movslq %eax,%rsi
	movslq %edx,%rdx
	mov    %rdx,%rax
	shl    $0x8,%rax
	sub    %rdx,%rax
	add    %rsi,%rax
	cqto   
	movslq %ecx,%rcx
	idiv   %rcx
	leaveq 
	retq   
	nopl   0x0(%rax,%rax,1)

0036150 <largest_input_value>:
	push   %rbp
	mov    %rsp,%rbp
	lea    0x1(%rdx,%rdx,1),%eax
	movslq %eax,%rdx
	mov    %rdx,%rax
	shl    $0x8,%rax
	sub    %rdx,%rax
	movslq %ecx,%rdx
	add    %rdx,%rax
	cqto   
	add    %ecx,%ecx
	movslq %ecx,%rcx
	idiv   %rcx
	leaveq 
	retq   
	nopw   0x0(%rax,%rax,1)

0036180 <create_colormap>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x60,%rsp
	mov    %r13,-0x20(%rbp)
	mov    %r14,-0x28(%rbp)
	mov    %r15,-0x30(%rbp)
	mov    %rbx,-0x10(%rbp)
	mov    %r12,-0x18(%rbp)
	mov    %rdi,-0x50(%rbp)
	mov    0x270(%rdi),%r12
	mov    %r12,-0x8(%rbp)
	lea    0x3c(%r12),%r15
	mov    %r15,-0x48(%rbp)
	mov    %rdi,%rbx
	mov    %r15,%rsi
	callq  35f90 <select_ncolors>
	mov    $0x1,%r13d
	movslq 0x90(%rbx),%rcx
	cmp    $0x3,%ecx
	je     361f5 <create_colormap+0x75>
	mov    (%rbx),%rcx
	movl   $0x5f,0x28(%rcx)
	mov    (%rbx),%rcx
	mov    %eax,0x2c(%rcx)
	mov    (%rbx),%rcx
	mov    0x8(%rcx),%rcx
	mov    %rax,%r12
	mov    %rbx,%rdi
	mov    %r13,%rsi
	callq  *%rcx
	jmp    3622d <create_colormap+0xad>
	mov    (%rbx),%rdx
	mov    %eax,0x2c(%rdx)
	movslq (%r15),%rcx
	mov    %ecx,0x30(%rdx)
	movslq 0x40(%r12),%rcx
	mov    %ecx,0x34(%rdx)
	movslq 0x44(%r12),%rcx
	mov    %ecx,0x38(%rdx)
	mov    (%rbx),%rcx
	movl   $0x5e,0x28(%rcx)
	mov    (%rbx),%rcx
	mov    0x8(%rcx),%rcx
	mov    %rax,%r12
	mov    %rbx,%rdi
	mov    %r13,%rsi
	callq  *%rcx
	mov    0x8(%rbx),%rax
	mov    0x10(%rax),%rax
	mov    %r13,%rsi
	mov    0x90(%rbx),%ecx
	mov    %rbx,%rdi
	mov    %r12,%rdx
	callq  *%rax
	mov    %rbx,%rdi
	mov    %rax,%r13
	xor    %r8d,%r8d
	mov    %r8,%rsi
	mov    %r12,%rbx
	jmp    36291 <create_colormap+0x111>
	mov    0x0(%r13,%r14,8),%r10
	movslq %ecx,%r9
	mov    %al,(%r10,%r9,1)
	add    $0x1,%ecx
	add    $0x1,%edx
	cmp    %ebx,%edx
	jl     36257 <create_colormap+0xd7>
	add    %r11d,%edi
	cmp    %r12d,%edi
	jl     362c6 <create_colormap+0x146>
	add    $0x1,%r15d
	mov    -0x50(%rbp),%rdi
	mov    -0x40(%rbp),%r9
	mov    -0x58(%rbp),%rcx
	cmp    %r9d,%r15d
	jl     362ce <create_colormap+0x14e>
	add    $0x1,%esi
	mov    -0x48(%rbp),%r15
	mov    %rbx,-0x60(%rbp)
	mov    %rsi,-0x38(%rbp)
	movslq 0x90(%rdi),%rax
	cmp    %esi,%eax
	jg     362ea <create_colormap+0x16a>
	mov    -0x8(%rbp),%rax
	mov    %r13,0x20(%rax)
	mov    %r12d,0x28(%rax)
	mov    -0x18(%rbp),%r12
	mov    -0x10(%rbp),%rbx
	mov    -0x30(%rbp),%r15
	mov    -0x28(%rbp),%r14
	mov    -0x20(%rbp),%r13
	leaveq 
	retq   
	mov    %rdi,%rcx
	mov    %r8,%rdx
	jmp    36269 <create_colormap+0xe9>
	mov    %r15,%rdx
	callq  36120 <output_value>
	mov    %rbx,%rdi
	imul   %r15d,%edi
	mov    -0x38(%rbp),%rsi
	mov    -0x60(%rbp),%r11
	xor    %r8d,%r8d
	jmp    36270 <create_colormap+0xf0>
	movslq %esi,%r14
	movslq (%r15,%r14,4),%r9
	mov    %rbx,%rax
	mov    %r9,-0x40(%rbp)
	cltd   
	idiv   %r9d
	lea    -0x1(%r9),%ecx
	mov    %rcx,-0x58(%rbp)
	mov    %rax,%rbx
	mov    %r8,%r15
	jmpq   36285 <create_colormap+0x105>
	nop

0036310 <create_colorindex>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x50,%rsp
	mov    %r12,-0x10(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %r15,-0x28(%rbp)
	mov    %rbx,-0x8(%rbp)
	mov    0x270(%rdi),%r15
	mov    %r15,-0x48(%rbp)
	xor    %r12d,%r12d
	mov    0x70(%rdi),%eax
	cmp    $0x1,%eax
	je     36354 <create_colorindex+0x44>
	movl   $0x0,0x38(%r15)
	mov    $0x100,%edx
	mov    %r12,%r13
	jmp    36367 <create_colorindex+0x57>
	movl   $0x1,0x38(%r15)
	mov    $0x2fe,%edx
	mov    $0x1fe,%r13d
	mov    %r13,-0x40(%rbp)
	mov    0x8(%rdi),%rax
	mov    0x10(%rax),%rax
	mov    $0x1,%esi
	mov    0x90(%rdi),%ecx
	mov    %rdi,%rbx
	callq  *%rax
	movslq 0x28(%r15),%r8
	mov    %rax,0x30(%r15)
	mov    %r12,%rdx
	jmp    363df <create_colorindex+0xcf>
	add    $0x1,%r14d
	mov    %rbx,%rdi
	mov    %r12,%rsi
	mov    %r14,%rdx
	mov    %r13,%rcx
	callq  36150 <largest_input_value>
	cmp    %r15d,%eax
	jl     36390 <create_colorindex+0x80>
	mov    -0x30(%rbp),%r8
	mov    %r14,%rdx
	imul   %r8d,%edx
	movslq %r15d,%rcx
	mov    -0x38(%rbp),%rsi
	mov    %dl,(%rsi,%rcx,1)
	add    $0x1,%r15d
	cmp    $0xff,%r15d
	jle    363a5 <create_colorindex+0x95>
	mov    -0x40(%rbp),%r13
	test   %r13d,%r13d
	jg     36401 <create_colorindex+0xf1>
	add    $0x1,%r12d
	mov    -0x48(%rbp),%r15
	xor    %edx,%edx
	movslq 0x90(%rbx),%rax
	cmp    %r12d,%eax
	jg     3640f <create_colorindex+0xff>
	mov    -0x8(%rbp),%rbx
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	leaveq 
	retq   
	mov    -0x38(%rbp),%rsi
	mov    $0x1,%eax
	jmpq   36495 <create_colorindex+0x185>
	test   %r13d,%r13d
	movslq %r12d,%rsi
	movslq 0x3c(%r15,%rsi,4),%r14
	jle    3642e <create_colorindex+0x11e>
	mov    0x30(%r15),%rcx
	mov    (%rcx,%rsi,8),%rax
	add    $0xff,%rax
	mov    %rax,(%rcx,%rsi,8)
	mov    0x30(%r15),%rax
	mov    (%rax,%rsi,8),%rax
	mov    %rax,-0x38(%rbp)
	mov    %r8,%r15
	lea    -0x1(%r14),%r13d
	mov    %rbx,%rdi
	mov    %r12,%rsi
	mov    %r13,%rcx
	callq  36150 <largest_input_value>
	mov    %r15,%rcx
	mov    %rax,%r15
	mov    %rcx,%rax
	cltd   
	idiv   %r14d
	mov    %rax,%r8
	mov    %r15,%rax
	mov    %r8,-0x30(%rbp)
	xor    %r14d,%r14d
	mov    %r14,%r15
	jmpq   363c3 <create_colorindex+0xb3>
	movzbl (%rsi),%edx
	mov    %rax,%rcx
	neg    %ecx
	movslq %ecx,%rcx
	mov    %dl,(%rsi,%rcx,1)
	movzbl 0xff(%rsi),%edx
	lea    0xff(%rax),%ecx
	movslq %ecx,%rcx
	mov    %dl,(%rsi,%rcx,1)
	add    $0x1,%eax
	cmp    $0xff,%eax
	jle    36471 <create_colorindex+0x161>
	jmpq   363d5 <create_colorindex+0xc5>
	data16 nopw %cs:0x0(%rax,%rax,1)
	nopl   0x0(%rax)

00364b0 <make_odither_array>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %r15,-0x20(%rbp)
	mov    %r12,-0x8(%rbp)
	mov    %r13,-0x10(%rbp)
	mov    %r14,-0x18(%rbp)
	mov    0x8(%rdi),%rax
	mov    (%rax),%rax
	mov    %rsi,%r12
	mov    $0x1,%esi
	mov    $0x400,%edx
	callq  *%rax
	lea    -0x1(%r12),%ecx
	movslq %ecx,%rcx
	shl    $0x9,%rcx
	mov    %rax,%r12
	lea    0x24f18(%rip),%r8        # 5b40c <base_dither_matrix>
	xor    %esi,%esi
	mov    $0xff,%edi
	mov    %rsi,%r9
	jmp    3651d <make_odither_array+0x6d>
	sub    %rdx,%rax
	cqto   
	idiv   %rcx
	neg    %rax
	mov    %eax,(%r10,%r14,4)
	add    $0x1,%r13d
	cmp    $0xf,%r13d
	jle    36538 <make_odither_array+0x88>
	add    $0x1,%r9d
	cmp    $0xf,%r9d
	jle    36569 <make_odither_array+0xb9>
	mov    %r12,%rax
	mov    -0x18(%rbp),%r14
	mov    -0x10(%rbp),%r13
	mov    -0x8(%rbp),%r12
	mov    -0x20(%rbp),%r15
	leaveq 
	retq   
	movslq %r13d,%r14
	lea    (%r11,%r14,1),%rax
	movzbl (%rax,%r8,1),%eax
	add    %eax,%eax
	neg    %eax
	add    %edi,%eax
	movslq %eax,%rax
	mov    %rax,%rdx
	shl    $0x8,%rdx
	mov    %rdx,%r15
	sub    %rax,%r15
	test   %r15,%r15
	js     36500 <make_odither_array+0x50>
	mov    %r15,%rax
	cqto   
	idiv   %rcx
	jmp    3650b <make_odither_array+0x5b>
	movslq %r9d,%rax
	mov    %rax,%r11
	shl    $0x4,%r11
	shl    $0x6,%rax
	lea    (%r12,%rax,1),%r10
	mov    %rsi,%r13
	jmp    36513 <make_odither_array+0x63>

0036580 <create_odither_tables>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %rbx,-0x8(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %r15,-0x28(%rbp)
	mov    %rdi,%rbx
	mov    0x270(%rbx),%r12
	xor    %r13d,%r13d
	mov    %r13,%r14
	jmp    365db <create_odither_tables+0x5b>
	movslq %eax,%rcx
	movslq 0x3c(%r12,%rcx,4),%rdx
	cmp    %esi,%edx
	je     365fd <create_odither_tables+0x7d>
	add    $0x1,%eax
	cmp    %r14d,%eax
	jl     365ae <create_odither_tables+0x2e>
	mov    %r13,%rax
	test   %rax,%rax
	jne    365d2 <create_odither_tables+0x52>
	mov    %rbx,%rdi
	callq  364b0 <make_odither_array>
	mov    %rax,0x50(%r12,%r15,8)
	add    $0x1,%r14d
	movslq 0x90(%rbx),%rax
	cmp    %r14d,%eax
	jg     36604 <create_odither_tables+0x84>
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	leaveq 
	retq   
	mov    0x50(%r12,%rcx,8),%rax
	jmp    365c5 <create_odither_tables+0x45>
	movslq %r14d,%r15
	movslq 0x3c(%r12,%r15,4),%rsi
	mov    %r13,%rax
	jmp    365bd <create_odither_tables+0x3d>
	data16 nopw %cs:0x0(%rax,%rax,1)
	nopl   0x0(%rax)

0036620 <color_quantize>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %rbx,-0x8(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %r15,-0x28(%rbp)
	mov    0x270(%rdi),%rax
	mov    0x30(%rax),%r11
	mov    0x88(%rdi),%ebx
	mov    %rbx,-0x30(%rbp)
	movslq 0x90(%rdi),%r15
	xor    %r14d,%r14d
	mov    %r14,%r9
	jmp    3669a <color_quantize+0x7a>
	lea    0x1(%r10),%r13d
	lea    0x1(%rdi),%r12
	movslq %r10d,%r10
	mov    (%r11,%r10,8),%r10
	movzbl (%rdi),%edi
	movzbl (%rdi,%r10,1),%edi
	add    %edi,%eax
	mov    %r12,%rdi
	mov    %r13,%r10
	cmp    %r15d,%r10d
	jl     36660 <color_quantize+0x40>
	mov    %al,(%r8)
	add    $0x1,%r8
	add    $0xffffffff,%ebx
	test   %ebx,%ebx
	jne    366b5 <color_quantize+0x95>
	add    $0x1,%r9d
	mov    -0x30(%rbp),%rbx
	cmp    %ecx,%r9d
	jl     366bd <color_quantize+0x9d>
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	leaveq 
	retq   
	mov    %r14,%rax
	mov    %rax,%r10
	jmp    3667f <color_quantize+0x5f>
	movslq %r9d,%rax
	mov    (%rsi,%rax,8),%rdi
	mov    (%rdx,%rax,8),%r8
	jmp    3668e <color_quantize+0x6e>
	nopw   0x0(%rax,%rax,1)

00366d0 <color_quantize3>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %r12,-0x8(%rbp)
	mov    %r13,-0x10(%rbp)
	mov    %r14,-0x18(%rbp)
	mov    %r15,-0x20(%rbp)
	mov    0x270(%rdi),%rax
	mov    0x30(%rax),%rax
	mov    (%rax),%r15
	mov    0x8(%rax),%r12
	mov    0x10(%rax),%r14
	mov    0x88(%rdi),%r13d
	xor    %r9d,%r9d
	jmp    36745 <color_quantize3+0x75>
	movzbl 0x1(%rax),%r10d
	movzbl (%r10,%r12,1),%r11d
	movzbl (%rax),%r10d
	movzbl (%r10,%r15,1),%r10d
	add    %r11d,%r10d
	movzbl 0x2(%rax),%r11d
	movzbl (%r11,%r14,1),%r11d
	add    %r11d,%r10d
	mov    %r10b,(%rdi)
	add    $0x3,%rax
	add    $0x1,%rdi
	add    $0xffffffff,%r8d
	test   %r8d,%r8d
	jne    3670a <color_quantize3+0x3a>
	add    $0x1,%r9d
	cmp    %ecx,%r9d
	jl     3675c <color_quantize3+0x8c>
	mov    -0x20(%rbp),%r15
	mov    -0x18(%rbp),%r14
	mov    -0x10(%rbp),%r13
	mov    -0x8(%rbp),%r12
	leaveq 
	retq   
	movslq %r9d,%rdi
	mov    (%rsi,%rdi,8),%rax
	mov    (%rdx,%rdi,8),%rdi
	mov    %r13,%r8
	jmp    3673c <color_quantize3+0x6c>
	nopl   0x0(%rax)

0036770 <quantize_ord_dither>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x60,%rsp
	mov    %rcx,-0x58(%rbp)
	mov    %rbx,-0x20(%rbp)
	mov    %r12,-0x28(%rbp)
	mov    %r13,-0x30(%rbp)
	mov    %r14,-0x38(%rbp)
	mov    %r15,-0x40(%rbp)
	mov    %rsi,-0x10(%rbp)
	mov    0x270(%rdi),%r13
	movslq 0x90(%rdi),%r12
	mov    0x88(%rdi),%edi
	mov    %rsi,%rbx
	mov    %rdi,%rsi
	mov    %rdx,%r14
	mov    %rsi,-0x48(%rbp)
	xor    %eax,%eax
	jmp    3681b <quantize_ord_dither+0xab>
	lea    0x1(%r10),%r8d
	and    $0xf,%r8d
	movzbl (%rax),%edi
	movslq %r10d,%rdx
	add    (%r9,%rdx,4),%edi
	movslq %edi,%rdx
	movzbl (%rdx,%r11,1),%edx
	movzbl (%rcx),%edi
	add    %edi,%edx
	mov    %dl,(%rcx)
	add    $0x1,%rcx
	add    %r12,%rax
	add    $0xffffffff,%ebx
	mov    %r8,%r10
	test   %ebx,%ebx
	jne    367b9 <quantize_ord_dither+0x49>
	mov    -0x60(%rbp),%rax
	lea    0x1(%rax),%edi
	mov    -0x10(%rbp),%rbx
	mov    -0x18(%rbp),%r9
	xor    %r10d,%r10d
	cmp    %r12d,%edi
	jl     36835 <quantize_ord_dither+0xc5>
	mov    -0x8(%rbp),%rax
	add    $0x1,%eax
	and    $0xf,%eax
	mov    %eax,0x4c(%r13)
	mov    -0x50(%rbp),%rax
	add    $0x1,%eax
	mov    -0x58(%rbp),%rcx
	cmp    %ecx,%eax
	jl     36856 <quantize_ord_dither+0xe6>
	mov    -0x40(%rbp),%r15
	mov    -0x38(%rbp),%r14
	mov    -0x30(%rbp),%r13
	mov    -0x28(%rbp),%r12
	mov    -0x20(%rbp),%rbx
	leaveq 
	retq   
	mov    (%r14,%r15,8),%rcx
	mov    0x30(%r13),%rdx
	movslq %edi,%rax
	mov    (%rdx,%rax,8),%r11
	add    0x50(%r13,%rax,8),%r9
	add    (%rbx,%r15,8),%rax
	mov    %rdi,-0x60(%rbp)
	mov    %rsi,%rbx
	jmp    367e7 <quantize_ord_dither+0x77>
	movslq %eax,%r15
	mov    (%r14,%r15,8),%rdi
	mov    %rax,-0x50(%rbp)
	callq  44d0 <jzero_far@plt>
	movslq 0x4c(%r13),%r9
	mov    %r9,-0x8(%rbp)
	shl    $0x6,%r9
	mov    %r9,-0x18(%rbp)
	xor    %r10d,%r10d
	mov    -0x48(%rbp),%rsi
	mov    %r10,%rdi
	jmpq   367fd <quantize_ord_dither+0x8d>
	data16 nopw %cs:0x0(%rax,%rax,1)

0036890 <quantize3_ord_dither>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x60,%rsp
	mov    %rdx,-0x10(%rbp)
	mov    %rsi,-0x18(%rbp)
	mov    %rbx,-0x28(%rbp)
	mov    %r12,-0x30(%rbp)
	mov    %r13,-0x38(%rbp)
	mov    %r14,-0x40(%rbp)
	mov    %r15,-0x48(%rbp)
	mov    %rcx,-0x50(%rbp)
	mov    0x270(%rdi),%r9
	mov    %r9,-0x20(%rbp)
	mov    0x30(%r9),%rax
	mov    (%rax),%r12
	mov    0x8(%rax),%r13
	mov    0x10(%rax),%r11
	mov    0x88(%rdi),%eax
	mov    %rax,-0x58(%rbp)
	xor    %ebx,%ebx
	mov    %rbx,%r10
	jmp    3695c <quantize3_ord_dither+0xcc>
	lea    0x1(%rbx),%edi
	and    $0xf,%edi
	movzbl 0x1(%rcx),%esi
	movslq %ebx,%r9
	add    (%r15,%r9,4),%esi
	movslq %esi,%rsi
	movzbl (%rsi,%r13,1),%ebx
	movzbl (%rcx),%esi
	add    (%r14,%r9,4),%esi
	movslq %esi,%rsi
	movzbl (%rsi,%r12,1),%esi
	add    %esi,%ebx
	movzbl 0x2(%rcx),%esi
	add    (%r8,%r9,4),%esi
	movslq %esi,%rsi
	movzbl (%rsi,%r11,1),%esi
	add    %ebx,%esi
	mov    %sil,(%rdx)
	add    $0x3,%rcx
	add    $0x1,%rdx
	add    $0xffffffff,%eax
	mov    %rdi,%rbx
	test   %eax,%eax
	jne    368e3 <quantize3_ord_dither+0x53>
	mov    -0x8(%rbp),%rax
	add    $0x1,%eax
	and    $0xf,%eax
	mov    -0x20(%rbp),%r9
	mov    %eax,0x4c(%r9)
	add    $0x1,%r10d
	mov    -0x58(%rbp),%rax
	xor    %ebx,%ebx
	mov    -0x50(%rbp),%rcx
	mov    -0x18(%rbp),%rsi
	mov    -0x10(%rbp),%rdx
	cmp    %ecx,%r10d
	jl     36977 <quantize3_ord_dither+0xe7>
	mov    -0x48(%rbp),%r15
	mov    -0x40(%rbp),%r14
	mov    -0x38(%rbp),%r13
	mov    -0x30(%rbp),%r12
	mov    -0x28(%rbp),%rbx
	leaveq 
	retq   
	movslq %r10d,%rdi
	mov    (%rsi,%rdi,8),%rcx
	mov    (%rdx,%rdi,8),%rdx
	movslq 0x4c(%r9),%r8
	mov    %r8,-0x8(%rbp)
	shl    $0x6,%r8
	mov    %r8,%r15
	add    0x58(%r9),%r15
	mov    %r8,%r14
	add    0x50(%r9),%r14
	add    0x60(%r9),%r8
	jmp    36930 <quantize3_ord_dither+0xa0>
	data16 nopw %cs:0x0(%rax,%rax,1)
	nopl   (%rax)

00369b0 <quantize_fs_dither>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0xb0,%rsp
	mov    %r15,-0x28(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    %rbx,-0x8(%rbp)
	mov    %rcx,-0x98(%rbp)
	mov    %rsi,-0x70(%rbp)
	mov    %rdx,-0x80(%rbp)
	mov    0x270(%rdi),%r13
	mov    %r13,-0x68(%rbp)
	mov    0x1a8(%rdi),%rax
	mov    %rax,-0x50(%rbp)
	movslq 0x90(%rdi),%r14
	mov    %r14,-0xa8(%rbp)
	mov    0x88(%rdi),%ebx
	mov    %rbx,-0x30(%rbp)
	lea    -0x1(%rbx),%edi
	mov    %r14,%rax
	imul   %edi,%eax
	mov    %eax,%eax
	mov    %rax,-0x38(%rbp)
	mov    %r14,%rax
	neg    %eax
	mov    %rax,-0x40(%rbp)
	mov    %edi,%eax
	mov    %rax,-0x78(%rbp)
	xor    %eax,%eax
	lea    0x1(%rbx),%edi
	mov    %edi,%edi
	add    %rdi,%rdi
	mov    %rdi,-0x60(%rbp)
	mov    %rsi,%r12
	mov    %rbx,%rsi
	mov    %rdx,%rbx
	jmpq   36b2a <quantize_fs_dither+0x17a>
	lea    (%rax,%r9,1),%r13
	movswq 0x0(%r13),%rax
	lea    0x8(%rax,%rbx,1),%eax
	sar    $0x4,%eax
	movzbl (%rcx),%ebx
	add    %ebx,%eax
	movslq %eax,%rax
	movzbl (%rax,%r14,1),%ebx
	movzbl (%rbx,%rdi,1),%edi
	movzbl (%rdx),%eax
	add    %edi,%eax
	mov    %al,(%rdx)
	movzbl (%rdi,%r12,1),%eax
	sub    %eax,%ebx
	lea    (%rbx,%rbx,2),%edi
	lea    (%r8,%rdi,1),%eax
	mov    %ax,(%r9)
	lea    (%rbx,%rbx,4),%eax
	lea    (%r11,%rax,1),%r8d
	add    %r15,%rcx
	lea    (%rbx,%rdi,2),%r9d
	add    %r10,%rdx
	add    $0xffffffff,%esi
	mov    %rbx,%r11
	mov    %r9,%rbx
	mov    %r13,%r9
	mov    -0x58(%rbp),%rdi
	mov    -0x48(%rbp),%rax
	test   %esi,%esi
	jne    36a46 <quantize_fs_dither+0x96>
	mov    %r8w,(%r9)
	mov    -0xa0(%rbp),%rax
	lea    0x1(%rax),%ecx
	mov    -0x68(%rbp),%r13
	mov    -0xa8(%rbp),%r14
	mov    $0xffffffffffffffff,%r15
	mov    -0x40(%rbp),%r8
	mov    -0x88(%rbp),%rdx
	mov    -0x80(%rbp),%rbx
	mov    -0x70(%rbp),%r12
	mov    $0x1,%r10d
	mov    -0x78(%rbp),%rdi
	mov    -0x38(%rbp),%rsi
	mov    -0x60(%rbp),%r9
	mov    $0x2,%r11d
	mov    $0xfffffffffffffffe,%rax
	cmp    %r14d,%ecx
	jl     36b44 <quantize_fs_dither+0x194>
	movslq 0x90(%r13),%rax
	test   %eax,%eax
	je     36b0e <quantize_fs_dither+0x15e>
	xor    %r10d,%r10d
	mov    %r10d,0x90(%r13)
	mov    -0x90(%rbp),%rax
	add    $0x1,%eax
	mov    -0x30(%rbp),%rsi
	mov    -0x98(%rbp),%rcx
	cmp    %ecx,%eax
	jl     36b72 <quantize_fs_dither+0x1c2>
	mov    -0x8(%rbp),%rbx
	mov    -0x10(%rbp),%r12
	mov    -0x18(%rbp),%r13
	mov    -0x20(%rbp),%r14
	mov    -0x28(%rbp),%r15
	leaveq 
	retq   
	mov    (%r12,%rdx,8),%r12
	mov    (%rbx,%rdx,8),%rdx
	movslq %ecx,%rbx
	mov    %rcx,-0xa0(%rbp)
	movslq 0x90(%r13),%rcx
	test   %ecx,%ecx
	jne    36bc0 <quantize_fs_dither+0x210>
	mov    0x70(%r13,%rbx,8),%r9
	lea    (%r12,%rbx,1),%rcx
	mov    %r11,%rax
	mov    %r14,%r8
	jmp    36bd2 <quantize_fs_dither+0x222>
	movslq %eax,%r15
	mov    %rax,-0x90(%rbp)
	mov    %r15,-0x88(%rbp)
	mov    (%rbx,%r15,8),%rdi
	callq  44d0 <jzero_far@plt>
	mov    %r15,%rdx
	mov    $0xffffffffffffffff,%r15
	mov    -0x40(%rbp),%r8
	mov    $0x1,%r10d
	xor    %ecx,%ecx
	mov    -0x78(%rbp),%rdi
	mov    -0x38(%rbp),%rsi
	mov    -0x60(%rbp),%r9
	mov    $0x2,%r11d
	mov    $0xfffffffffffffffe,%rax
	jmpq   36afb <quantize_fs_dither+0x14b>
	add    0x70(%r13,%rbx,8),%r9
	lea    (%r12,%rsi,1),%rcx
	add    %rbx,%rcx
	add    %rdi,%rdx
	mov    %r15,%r10
	mov    %rax,-0x48(%rbp)
	mov    0x30(%r13),%rsi
	mov    (%rsi,%rbx,8),%rdi
	mov    %rdi,-0x58(%rbp)
	mov    0x20(%r13),%rsi
	mov    (%rsi,%rbx,8),%r12
	movslq %r8d,%r15
	mov    -0x50(%rbp),%r14
	xor    %r11d,%r11d
	mov    -0x30(%rbp),%rsi
	mov    %r11,%rbx
	mov    %rbx,%r8
	jmpq   36aa5 <quantize_fs_dither+0xf5>
	data16 nopw %cs:0x0(%rax,%rax,1)
	xchg   %ax,%ax

0036c10 <alloc_fs_workspace>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %rbx,-0x8(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %r15,-0x28(%rbp)
	mov    0x270(%rdi),%r15
	mov    $0x1,%r13d
	mov    0x88(%rdi),%eax
	add    $0x2,%eax
	mov    %eax,%eax
	lea    (%rax,%rax,1),%r14
	mov    %rdi,%r12
	xor    %ebx,%ebx
	jmp    36c6e <alloc_fs_workspace+0x5e>
	mov    0x8(%r12),%rax
	mov    0x8(%rax),%rax
	mov    %r12,%rdi
	mov    %r13,%rsi
	mov    %r14,%rdx
	callq  *%rax
	movslq %ebx,%rcx
	mov    %rax,0x70(%r15,%rcx,8)
	add    $0x1,%ebx
	movslq 0x90(%r12),%rax
	cmp    %ebx,%eax
	jg     36c4f <alloc_fs_workspace+0x3f>
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	leaveq 
	retq   

0036c90 <start_pass_1_quant>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    0x270(%rdi),%rax
	mov    0x20(%rax),%rcx
	mov    %rcx,0xa0(%rdi)
	movslq 0x28(%rax),%rcx
	mov    %ecx,0x9c(%rdi)
	mov    0x70(%rdi),%ecx
	test   %ecx,%ecx
	je     36cf7 <start_pass_1_quant+0x67>
	cmp    $0x1,%ecx
	je     36d13 <start_pass_1_quant+0x83>
	cmp    $0x2,%ecx
	jne    36cff <start_pass_1_quant+0x6f>
	lea    -0x31c(%rip),%rcx        # 369b0 <quantize_fs_dither>
	mov    %rcx,0x8(%rax)
	movl   $0x0,0x90(%rax)
	mov    0x70(%rax),%rcx
	test   %rcx,%rcx
	je     36d2c <start_pass_1_quant+0x9c>
	mov    %r15,%rcx
	mov    %r14,%rdx
	mov    %r12,%rsi
	mov    %rdi,%r12
	mov    %r13,%rdi
	mov    %rax,%r13
	jmp    36d59 <start_pass_1_quant+0xc9>
	test   %ecx,%ecx
	je     36d7f <start_pass_1_quant+0xef>
	mov    (%rdi),%rax
	movl   $0x30,0x28(%rax)
	mov    (%rdi),%rax
	mov    (%rax),%rax
	callq  *%rax
	leaveq 
	retq   
	movslq 0x90(%rdi),%rcx
	cmp    $0x3,%ecx
	je     36d9c <start_pass_1_quant+0x10c>
	lea    -0x5b6(%rip),%rcx        # 36770 <quantize_ord_dither>
	mov    %rcx,0x8(%rax)
	jmp    36da7 <start_pass_1_quant+0x117>
	mov    %rdi,%rcx
	mov    %r14,-0x18(%rbp)
	mov    %r15,-0x20(%rbp)
	mov    %r12,%r14
	mov    %rdi,%r12
	mov    %rcx,%rdi
	mov    %r13,%r15
	mov    %rax,%r13
	callq  36c10 <alloc_fs_workspace>
	mov    %r14,%rsi
	mov    %r15,%rdi
	mov    -0x20(%rbp),%rcx
	mov    -0x18(%rbp),%rdx
	mov    0x88(%r12),%eax
	add    $0x2,%eax
	mov    %eax,%eax
	lea    (%rax,%rax,1),%r14
	xor    %r15d,%r15d
	mov    %rdx,-0x18(%rbp)
	mov    %rcx,-0x20(%rbp)
	mov    %rsi,-0x8(%rbp)
	mov    %rdi,-0x10(%rbp)
	jmp    36df6 <start_pass_1_quant+0x166>
	movslq 0x90(%rdi),%rcx
	cmp    $0x3,%ecx
	je     36e15 <start_pass_1_quant+0x185>
	lea    -0x776(%rip),%rcx        # 36620 <color_quantize>
	mov    %rcx,0x8(%rax)
	leaveq 
	retq   
	lea    -0x513(%rip),%rcx        # 36890 <quantize3_ord_dither>
	mov    %rcx,0x8(%rax)
	movl   $0x0,0x4c(%rax)
	movslq 0x38(%rax),%rcx
	test   %ecx,%ecx
	jne    36dd7 <start_pass_1_quant+0x147>
	mov    %rdi,%rcx
	mov    %r15,-0x20(%rbp)
	mov    %rdi,-0x10(%rbp)
	mov    %rcx,%rdi
	mov    %rax,%r15
	callq  36310 <create_colorindex>
	mov    %r15,%rax
	mov    -0x10(%rbp),%rdi
	mov    -0x20(%rbp),%r15
	mov    0x50(%rax),%rax
	test   %rax,%rax
	je     36e22 <start_pass_1_quant+0x192>
	leaveq 
	retq   
	movslq %r15d,%rax
	mov    0x70(%r13,%rax,8),%rdi
	mov    %r14,%rsi
	callq  44d0 <jzero_far@plt>
	add    $0x1,%r15d
	movslq 0x90(%r12),%rax
	cmp    %r15d,%eax
	jg     36de2 <start_pass_1_quant+0x152>
	mov    -0x10(%rbp),%r13
	mov    -0x8(%rbp),%r12
	mov    -0x20(%rbp),%r15
	mov    -0x18(%rbp),%r14
	leaveq 
	retq   
	lea    -0x74c(%rip),%rcx        # 366d0 <color_quantize3>
	mov    %rcx,0x8(%rax)
	leaveq 
	retq   
	callq  36580 <create_odither_tables>
	leaveq 
	retq   
	nopl   0x0(%rax)

0036e30 <finish_pass_1_quant>:
	push   %rbp
	mov    %rsp,%rbp
	leaveq 
	retq   
	nopw   %cs:0x0(%rax,%rax,1)

0036e40 <new_color_map_1_quant>:
	push   %rbp
	mov    %rsp,%rbp
	mov    (%rdi),%rax
	movl   $0x2e,0x28(%rax)
	mov    (%rdi),%rax
	mov    (%rax),%rax
	callq  *%rax
	leaveq 
	retq   
	nopl   0x0(%rax,%rax,1)

0036e60 <jinit_2pass_quantizer>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %r14,-0x20(%rbp)
	mov    %r15,-0x28(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    %rbx,-0x8(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    $0x1,%r12d
	mov    0x8(%rdi),%rax
	mov    (%rax),%rax
	mov    $0x58,%edx
	mov    %rdi,%rbx
	mov    %r12,%rsi
	callq  *%rax
	mov    %rax,0x270(%rbx)
	lea    0x1abc(%rip),%rcx        # 38960 <start_pass_2_quant>
	mov    %rcx,(%rax)
	lea    0x1d02(%rip),%rcx        # 38bb0 <new_color_map_2_quant>
	mov    %rcx,0x18(%rax)
	movq   $0x0,0x40(%rax)
	movq   $0x0,0x50(%rax)
	movslq 0x90(%rbx),%rcx
	cmp    $0x3,%ecx
	jne    36ed3 <jinit_2pass_quantizer+0x73>
	mov    %rax,%r13
	jmp    36eeb <jinit_2pass_quantizer+0x8b>
	mov    (%rbx),%rcx
	movl   $0x2f,0x28(%rcx)
	mov    (%rbx),%rcx
	mov    (%rcx),%rcx
	mov    %rax,%r13
	mov    %rbx,%rdi
	callq  *%rcx
	mov    0x8(%rbx),%rax
	mov    (%rax),%rax
	mov    $0x100,%edx
	mov    %rbx,%rdi
	mov    %r12,%rsi
	callq  *%rax
	mov    %rax,0x30(%r13)
	mov    $0x1000,%edx
	xor    %r14d,%r14d
	jmp    36f31 <jinit_2pass_quantizer+0xd1>
	mov    0x8(%rbx),%rax
	mov    0x8(%rax),%rax
	mov    0x30(%r13),%r15
	mov    %rbx,%rdi
	mov    %r12,%rsi
	callq  *%rax
	movslq %r14d,%rcx
	mov    %rax,(%r15,%rcx,8)
	add    $0x1,%r14d
	mov    $0x1000,%edx
	cmp    $0x1f,%r14d
	jle    36f0d <jinit_2pass_quantizer+0xad>
	movl   $0x1,0x38(%r13)
	movslq 0x84(%rbx),%rax
	test   %eax,%eax
	jne    36f54 <jinit_2pass_quantizer+0xf4>
	movq   $0x0,0x20(%r13)
	jmp    36fc5 <jinit_2pass_quantizer+0x165>
	movslq 0x78(%rbx),%r14
	cmp    $0x7,%r14d
	jg     36f7d <jinit_2pass_quantizer+0x11d>
	mov    (%rbx),%rax
	movl   $0x38,0x28(%rax)
	mov    (%rbx),%rax
	movl   $0x8,0x2c(%rax)
	mov    (%rbx),%rax
	mov    (%rax),%rax
	mov    %rbx,%rdi
	callq  *%rax
	cmp    $0x100,%r14d
	jle    36fa5 <jinit_2pass_quantizer+0x145>
	mov    (%rbx),%rax
	movl   $0x39,0x28(%rax)
	mov    (%rbx),%rax
	movl   $0x100,0x2c(%rax)
	mov    (%rbx),%rax
	mov    (%rax),%rax
	mov    %rbx,%rdi
	callq  *%rax
	mov    0x8(%rbx),%rax
	mov    0x10(%rax),%rax
	mov    $0x3,%ecx
	mov    %rbx,%rdi
	mov    %r12,%rsi
	mov    %r14,%rdx
	callq  *%rax
	mov    %rax,0x20(%r13)
	mov    %r14d,0x28(%r13)
	mov    0x70(%rbx),%eax
	test   %eax,%eax
	je     36fd3 <jinit_2pass_quantizer+0x173>
	movl   $0x2,0x70(%rbx)
	mov    0x70(%rbx),%eax
	cmp    $0x2,%eax
	je     36ff1 <jinit_2pass_quantizer+0x191>
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	mov    -0x18(%rbp),%r13
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	leaveq 
	retq   
	mov    0x8(%rbx),%rax
	mov    0x8(%rax),%rax
	mov    0x88(%rbx),%ecx
	add    $0x2,%ecx
	mov    %ecx,%ecx
	lea    (%rcx,%rcx,2),%rcx
	lea    (%rcx,%rcx,1),%rdx
	mov    %r12,%rsi
	mov    %rbx,%rdi
	callq  *%rax
	mov    %rax,0x40(%r13)
	mov    %rbx,%rdi
	callq  38850 <init_error_limit>
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	mov    -0x18(%rbp),%r13
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	leaveq 
	retq   
	nopw   %cs:0x0(%rax,%rax,1)

0037040 <prescan_quantize>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %r15,-0x8(%rbp)
	mov    0x270(%rdi),%rax
	mov    0x30(%rax),%r15
	mov    0x88(%rdi),%r10d
	xor    %r9d,%r9d
	jmp    370b1 <prescan_quantize+0x71>
	movzbl 0x1(%rdx),%eax
	shr    $0x2,%eax
	movslq %eax,%rax
	shl    $0x6,%rax
	movzbl (%rdx),%edi
	shr    $0x3,%edi
	movslq %edi,%rdi
	add    (%r15,%rdi,8),%rax
	movzbl 0x2(%rdx),%edi
	shr    $0x3,%edi
	movslq %edi,%rdi
	lea    (%rax,%rdi,2),%rdi
	movzwl (%rdi),%r11d
	lea    0x1(%r11),%eax
	mov    %ax,(%rdi)
	test   %ax,%ax
	jne    370a0 <prescan_quantize+0x60>
	mov    %r11w,(%rdi)
	add    $0x3,%rdx
	add    $0xffffffff,%r8d
	test   %r8d,%r8d
	jne    37063 <prescan_quantize+0x23>
	add    $0x1,%r9d
	cmp    %ecx,%r9d
	jl     370bc <prescan_quantize+0x7c>
	mov    -0x8(%rbp),%r15
	leaveq 
	retq   
	movslq %r9d,%rax
	mov    (%rsi,%rax,8),%rdx
	mov    %r10,%r8
	jmp    370a8 <prescan_quantize+0x68>
	nopl   0x0(%rax,%rax,1)

00370d0 <find_biggest_color_pop>:
	push   %rbp
	mov    %rsp,%rbp
	xor    %ecx,%ecx
	mov    %rcx,%rax
	mov    %rax,%rdx
	jmp    370fd <find_biggest_color_pop+0x2d>
	mov    0x20(%rdi),%r8
	cmp    %r8,%rcx
	jge    370f6 <find_biggest_color_pop+0x26>
	mov    0x18(%rdi),%r9
	test   %r9,%r9
	jle    370f6 <find_biggest_color_pop+0x26>
	mov    %r8,%rcx
	mov    %rdi,%rax
	add    $0x1,%edx
	add    $0x28,%rdi
	cmp    %esi,%edx
	jl     370de <find_biggest_color_pop+0xe>
	leaveq 
	retq   
	data16 nopw %cs:0x0(%rax,%rax,1)
	xchg   %ax,%ax

0037110 <find_biggest_volume>:
	push   %rbp
	mov    %rsp,%rbp
	xor    %ecx,%ecx
	mov    %rcx,%rax
	mov    %rax,%rdx
	jmp    37134 <find_biggest_volume+0x24>
	mov    0x18(%rdi),%r8
	cmp    %rcx,%r8
	jle    3712d <find_biggest_volume+0x1d>
	mov    %r8,%rcx
	mov    %rdi,%rax
	add    $0x1,%edx
	add    $0x28,%rdi
	cmp    %esi,%edx
	jl     3711e <find_biggest_volume+0xe>
	leaveq 
	retq   
	nopw   0x0(%rax,%rax,1)

0037140 <update_box>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x50,%rsp
	mov    %r15,-0x30(%rbp)
	mov    %r14,-0x28(%rbp)
	mov    %r13,-0x20(%rbp)
	mov    %r12,-0x18(%rbp)
	mov    %rsi,-0x8(%rbp)
	mov    %rbx,-0x10(%rbp)
	mov    %rdi,-0x38(%rbp)
	mov    0x270(%rdi),%rax
	mov    0x30(%rax),%r15
	movslq 0x8(%rsi),%r11
	movslq 0xc(%rsi),%r12
	movslq 0x10(%rsi),%r9
	movslq 0x14(%rsi),%r8
	movslq 0x4(%rsi),%r10
	movslq (%rsi),%rbx
	cmp    %ebx,%r10d
	jle    371cf <update_box+0x8f>
	lea    (%r9,%r9,1),%rdi
	mov    %rbx,-0x48(%rbp)
	jmp    371be <update_box+0x7e>
	movzwl (%rax),%r13d
	test   %r13w,%r13w
	jne    37283 <update_box+0x143>
	add    $0x2,%rax
	add    $0x1,%ecx
	cmp    %r8d,%ecx
	jle    37195 <update_box+0x55>
	add    $0x1,%edx
	cmp    %r12d,%edx
	jle    3728e <update_box+0x14e>
	add    $0x1,%ebx
	cmp    %ebx,%r10d
	jge    372a7 <update_box+0x167>
	mov    -0x48(%rbp),%rbx
	mov    -0x38(%rbp),%rdi
	cmp    %ebx,%r10d
	jg     372b2 <update_box+0x172>
	cmp    %r12d,%r11d
	jl     372bf <update_box+0x17f>
	cmp    %r11d,%r12d
	jg     372c8 <update_box+0x188>
	movslq %r11d,%r13
	cmp    %r8d,%r9d
	jl     372d1 <update_box+0x191>
	cmp    %r8d,%r9d
	jl     372e5 <update_box+0x1a5>
	mov    0x40(%rdi),%edx
	lea    0x24347(%rip),%rax        # 5b550 <rgb_green>
	movslq (%rax,%rdx,4),%rcx
	mov    %r12,%rax
	sub    %r11d,%eax
	lea    0x243be(%rip),%r13        # 5b5d8 <c_scales>
	imul   0x0(%r13,%rcx,4),%eax
	shl    $0x2,%eax
	movslq %eax,%rcx
	imul   %rcx,%rcx
	lea    0x242db(%rip),%rax        # 5b50c <rgb_red>
	movslq (%rax,%rdx,4),%rdi
	mov    %r10,%rax
	sub    %ebx,%eax
	imul   0x0(%r13,%rdi,4),%eax
	shl    $0x3,%eax
	movslq %eax,%rax
	imul   %rax,%rax
	add    %rax,%rcx
	lea    0x24340(%rip),%rax        # 5b594 <rgb_blue>
	movslq (%rax,%rdx,4),%rdx
	mov    %r8,%rax
	sub    %r9d,%eax
	imul   0x0(%r13,%rdx,4),%eax
	shl    $0x3,%eax
	movslq %eax,%rax
	imul   %rax,%rax
	add    %rcx,%rax
	mov    %rax,0x18(%rsi)
	xor    %eax,%eax
	movslq %r9d,%rcx
	lea    (%rcx,%rcx,1),%r13
	jmpq   37319 <update_box+0x1d9>
	mov    %ebx,(%rsi)
	mov    -0x38(%rbp),%rdi
	jmpq   371cf <update_box+0x8f>
	mov    %rdi,%rcx
	add    (%r15,%r14,8),%rcx
	movslq %edx,%rax
	shl    $0x6,%rax
	add    %rcx,%rax
	mov    %r9,%rcx
	jmpq   371aa <update_box+0x6a>
	movslq %ebx,%r14
	mov    %r11,%rdx
	jmpq   371b2 <update_box+0x72>
	lea    (%r9,%r9,1),%rdi
	mov    %r10,-0x48(%rbp)
	jmpq   3736a <update_box+0x22a>
	mov    %r11,-0x48(%rbp)
	jmpq   373aa <update_box+0x26a>
	mov    %r12,-0x48(%rbp)
	jmpq   373ea <update_box+0x2aa>
	mov    %r13,%r14
	shl    $0x6,%r14
	mov    %r13,-0x40(%rbp)
	mov    %r9,-0x48(%rbp)
	jmpq   3742a <update_box+0x2ea>
	shl    $0x6,%r13
	mov    %r8,-0x48(%rbp)
	jmpq   3746e <update_box+0x32e>
	movzwl (%rcx),%edi
	test   %di,%di
	je     372fe <update_box+0x1be>
	add    $0x1,%rax
	add    $0x2,%rcx
	add    $0x1,%edx
	cmp    %r8d,%edx
	jle    372f2 <update_box+0x1b2>
	add    $0x1,%esi
	cmp    %esi,%r12d
	jge    37484 <update_box+0x344>
	add    $0x1,%ebx
	cmp    %ebx,%r10d
	jge    3749d <update_box+0x35d>
	mov    -0x8(%rbp),%rcx
	mov    %rax,0x20(%rcx)
	mov    -0x10(%rbp),%rbx
	mov    -0x18(%rbp),%r12
	mov    -0x20(%rbp),%r13
	mov    -0x28(%rbp),%r14
	mov    -0x30(%rbp),%r15
	leaveq 
	retq   
	movzwl (%rax),%r13d
	test   %r13w,%r13w
	jne    374a8 <update_box+0x368>
	add    $0x2,%rax
	add    $0x1,%ecx
	cmp    %ecx,%r8d
	jge    37340 <update_box+0x200>
	add    $0x1,%edx
	cmp    %edx,%r12d
	jge    374b5 <update_box+0x375>
	add    $0xffffffff,%r10d
	cmp    %r10d,%ebx
	jle    374ce <update_box+0x38e>
	mov    -0x48(%rbp),%r10
	mov    -0x38(%rbp),%rdi
	jmpq   371d8 <update_box+0x98>
	movzwl (%rax),%r13d
	test   %r13w,%r13w
	jne    374d9 <update_box+0x399>
	add    $0x2,%rax
	add    $0x1,%ecx
	cmp    %ecx,%r8d
	jge    37380 <update_box+0x240>
	add    $0x1,%edx
	cmp    %edx,%r10d
	jge    374e6 <update_box+0x3a6>
	add    $0x1,%r11d
	cmp    %r11d,%r12d
	jge    374fc <update_box+0x3bc>
	mov    -0x48(%rbp),%r11
	mov    -0x38(%rbp),%rdi
	jmpq   371e1 <update_box+0xa1>
	movzwl (%rax),%r13d
	test   %r13w,%r13w
	jne    3750b <update_box+0x3cb>
	add    $0x2,%rax
	add    $0x1,%ecx
	cmp    %ecx,%r8d
	jge    373c0 <update_box+0x280>
	add    $0x1,%edx
	cmp    %edx,%r10d
	jge    37518 <update_box+0x3d8>
	add    $0xffffffff,%r12d
	cmp    %r12d,%r11d
	jle    3752e <update_box+0x3ee>
	mov    -0x48(%rbp),%r12
	mov    -0x38(%rbp),%rdi
	jmpq   371ea <update_box+0xaa>
	movzwl (%rax),%r13d
	test   %r13w,%r13w
	jne    3753d <update_box+0x3fd>
	add    $0x40,%rax
	add    $0x1,%ecx
	cmp    %ecx,%r12d
	jge    37400 <update_box+0x2c0>
	add    $0x1,%edx
	cmp    %edx,%r10d
	jge    3754e <update_box+0x40e>
	add    $0x1,%r9d
	cmp    %r9d,%r8d
	jge    37564 <update_box+0x424>
	mov    -0x48(%rbp),%r9
	mov    -0x40(%rbp),%r13
	mov    -0x38(%rbp),%rdi
	jmpq   371f6 <update_box+0xb6>
	movzwl (%rax),%r14d
	test   %r14w,%r14w
	jne    3756f <update_box+0x42f>
	add    $0x40,%rax
	add    $0x1,%ecx
	cmp    %ecx,%r12d
	jge    37444 <update_box+0x304>
	add    $0x1,%edx
	cmp    %edx,%r10d
	jge    3757c <update_box+0x43c>
	add    $0xffffffff,%r8d
	cmp    %r8d,%r9d
	jle    37591 <update_box+0x451>
	mov    -0x48(%rbp),%r8
	mov    -0x38(%rbp),%rdi
	jmpq   371ff <update_box+0xbf>
	mov    %r13,%rdx
	add    (%r15,%r14,8),%rdx
	movslq %esi,%rcx
	shl    $0x6,%rcx
	add    %rdx,%rcx
	mov    %r9,%rdx
	jmpq   37305 <update_box+0x1c5>
	movslq %ebx,%r14
	mov    %r11,%rsi
	jmpq   3730d <update_box+0x1cd>
	mov    %r10d,0x4(%rsi)
	mov    -0x38(%rbp),%rdi
	jmpq   371d8 <update_box+0x98>
	mov    %rdi,%rcx
	add    (%r15,%r14,8),%rcx
	movslq %edx,%rax
	shl    $0x6,%rax
	add    %rcx,%rax
	mov    %r9,%rcx
	jmpq   37355 <update_box+0x215>
	movslq %r10d,%r14
	mov    %r11,%rdx
	jmpq   3735d <update_box+0x21d>
	mov    %r11d,0x8(%rsi)
	mov    -0x38(%rbp),%rdi
	jmpq   371e1 <update_box+0xa1>
	movslq %edx,%rax
	mov    (%r15,%rax,8),%rax
	add    %rdi,%rax
	lea    (%rax,%r9,2),%rax
	mov    %r9,%rcx
	jmpq   37395 <update_box+0x255>
	movslq %r11d,%rdi
	shl    $0x6,%rdi
	mov    %rbx,%rdx
	jmpq   3739d <update_box+0x25d>
	mov    %r12d,0xc(%rsi)
	mov    -0x38(%rbp),%rdi
	jmpq   371ea <update_box+0xaa>
	movslq %edx,%rax
	mov    (%r15,%rax,8),%rax
	add    %rdi,%rax
	lea    (%rax,%r9,2),%rax
	mov    %r9,%rcx
	jmpq   373d5 <update_box+0x295>
	movslq %r12d,%rdi
	shl    $0x6,%rdi
	mov    %rbx,%rdx
	jmpq   373dd <update_box+0x29d>
	mov    %r9d,0x10(%rsi)
	mov    -0x40(%rbp),%r13
	mov    -0x38(%rbp),%rdi
	jmpq   371f6 <update_box+0xb6>
	movslq %edx,%rax
	mov    (%r15,%rax,8),%rax
	add    %r14,%rax
	lea    (%rax,%rdi,2),%rax
	mov    %r11,%rcx
	jmpq   37415 <update_box+0x2d5>
	movslq %r9d,%rdi
	mov    %rbx,%rdx
	jmpq   3741d <update_box+0x2dd>
	mov    %r8d,0x14(%rsi)
	mov    -0x38(%rbp),%rdi
	jmpq   371ff <update_box+0xbf>
	movslq %edx,%rax
	mov    (%r15,%rax,8),%rax
	add    %rdi,%rax
	add    %r13,%rax
	mov    %r11,%rcx
	jmpq   37459 <update_box+0x319>
	movslq %r8d,%rax
	lea    (%rax,%rax,1),%rdi
	mov    %rbx,%rdx
	jmpq   37461 <update_box+0x321>

00375a0 <median_cut>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x70,%rsp
	mov    %r15,-0x28(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %rsi,-0x58(%rbp)
	mov    %rcx,-0x60(%rbp)
	mov    %rbx,-0x8(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    %r13,-0x18(%rbp)
	lea    0x23fc9(%rip),%r14        # 5b594 <rgb_blue>
	mov    $0x2,%eax
	mov    %rax,-0x48(%rbp)
	xor    %eax,%eax
	mov    %rax,-0x40(%rbp)
	mov    $0x1,%eax
	mov    %rax,-0x38(%rbp)
	mov    %rdi,%rbx
	mov    %rdx,%r12
	mov    %rsi,%r13
	jmp    37637 <median_cut+0x97>
	lea    (%r15,%r14,1),%edx
	mov    %rdx,%rcx
	shr    $0x1f,%ecx
	add    %edx,%ecx
	sar    %ecx
	mov    %ecx,0x4(%rax)
	add    $0x1,%ecx
	mov    -0x30(%rbp),%r12
	mov    %ecx,(%r12)
	mov    %rax,%rsi
	mov    %rbx,%rdi
	callq  37140 <update_box>
	mov    %r12,%rsi
	mov    %rbx,%rdi
	callq  37140 <update_box>
	mov    -0x68(%rbp),%rax
	lea    0x1(%rax),%r12d
	mov    -0x60(%rbp),%rcx
	mov    -0x58(%rbp),%r13
	lea    0x23f5d(%rip),%r14        # 5b594 <rgb_blue>
	cmp    %ecx,%r12d
	jl     37655 <median_cut+0xb5>
	mov    %r12,%rax
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	mov    -0x20(%rbp),%r14
	mov    -0x28(%rbp),%r15
	leaveq 
	retq   
	lea    (%r12,%r12,1),%eax
	cmp    %eax,%ecx
	jge    3766a <median_cut+0xca>
	mov    %r13,%rdi
	mov    %r12,%rsi
	callq  37110 <find_biggest_volume>
	jmp    37675 <median_cut+0xd5>
	mov    %r13,%rdi
	mov    %r12,%rsi
	callq  370d0 <find_biggest_color_pop>
	test   %rax,%rax
	je     3773e <median_cut+0x19e>
	movslq %r12d,%rcx
	lea    (%rcx,%rcx,4),%rcx
	lea    0x0(%r13,%rcx,8),%rdx
	mov    %rdx,-0x30(%rbp)
	movslq 0x4(%rax),%rcx
	mov    %ecx,0x4(%rdx)
	movslq 0xc(%rax),%rcx
	mov    %ecx,0xc(%rdx)
	movslq 0x14(%rax),%rcx
	mov    %ecx,0x14(%rdx)
	movslq (%rax),%rcx
	mov    %ecx,(%rdx)
	movslq 0x8(%rax),%rcx
	mov    %ecx,0x8(%rdx)
	movslq 0x10(%rax),%rcx
	mov    %ecx,0x10(%rdx)
	mov    0x40(%rbx),%r9d
	movslq (%r14,%r9,4),%rcx
	movslq 0x10(%rax),%r8
	movslq 0x14(%rax),%rdi
	mov    %rdi,%rdx
	sub    %r8d,%edx
	lea    0x23f05(%rip),%rsi        # 5b5d8 <c_scales>
	imul   (%rsi,%rcx,4),%edx
	shl    $0x3,%edx
	lea    0x23e2b(%rip),%rcx        # 5b50c <rgb_red>
	movslq (%rcx,%r9,4),%r13
	movslq (%rax),%r15
	movslq 0x4(%rax),%r14
	mov    %r14,%rsi
	sub    %r15d,%esi
	lea    0x23edf(%rip),%rcx        # 5b5d8 <c_scales>
	imul   (%rcx,%r13,4),%esi
	shl    $0x3,%esi
	lea    0x23e48(%rip),%rcx        # 5b550 <rgb_green>
	movslq (%rcx,%r9,4),%r11
	movslq 0x8(%rax),%r10
	movslq 0xc(%rax),%r9
	mov    %r12,-0x68(%rbp)
	mov    %r9,%rcx
	sub    %r10d,%ecx
	lea    0x23eb3(%rip),%r12        # 5b5d8 <c_scales>
	imul   (%r12,%r11,4),%ecx
	shl    $0x2,%ecx
	test   %r13d,%r13d
	je     37757 <median_cut+0x1b7>
	cmp    %edx,%ecx
	jl     37763 <median_cut+0x1c3>
	pushq  -0x38(%rbp)
	popq   -0x50(%rbp)
	jmp    3776c <median_cut+0x1cc>
	mov    %r12,%rax
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	mov    -0x20(%rbp),%r14
	mov    -0x28(%rbp),%r15
	leaveq 
	retq   
	cmp    %esi,%ecx
	jl     37778 <median_cut+0x1d8>
	pushq  -0x38(%rbp)
	popq   -0x50(%rbp)
	jmp    37781 <median_cut+0x1e1>
	mov    %rdx,%rcx
	pushq  -0x48(%rbp)
	popq   -0x50(%rbp)
	cmp    %esi,%ecx
	jge    3778b <median_cut+0x1eb>
	pushq  -0x40(%rbp)
	popq   -0x50(%rbp)
	jmp    3778b <median_cut+0x1eb>
	mov    %rsi,%rcx
	pushq  -0x40(%rbp)
	popq   -0x50(%rbp)
	cmp    %edx,%ecx
	jge    3778b <median_cut+0x1eb>
	pushq  -0x48(%rbp)
	popq   -0x50(%rbp)
	mov    -0x50(%rbp),%rcx
	test   %ecx,%ecx
	je     377a6 <median_cut+0x206>
	cmp    $0x1,%ecx
	je     377b7 <median_cut+0x217>
	cmp    $0x2,%ecx
	je     377d9 <median_cut+0x239>
	mov    -0x30(%rbp),%r12
	jmpq   3760a <median_cut+0x6a>
	test   %ecx,%ecx
	je     375ee <median_cut+0x4e>
	mov    -0x30(%rbp),%r12
	jmpq   3760a <median_cut+0x6a>
	lea    (%r10,%r9,1),%edx
	mov    %rdx,%rcx
	shr    $0x1f,%ecx
	add    %edx,%ecx
	sar    %ecx
	mov    %ecx,0xc(%rax)
	add    $0x1,%ecx
	mov    -0x30(%rbp),%r12
	mov    %ecx,0x8(%r12)
	jmpq   3760a <median_cut+0x6a>
	lea    (%r8,%rdi,1),%edx
	mov    %rdx,%rcx
	shr    $0x1f,%ecx
	add    %edx,%ecx
	sar    %ecx
	mov    %ecx,0x14(%rax)
	add    $0x1,%ecx
	mov    -0x30(%rbp),%r12
	mov    %ecx,0x10(%r12)
	jmpq   3760a <median_cut+0x6a>
	nopl   0x0(%rax,%rax,1)

0037800 <compute_color>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x70,%rsp
	mov    %r15,-0x38(%rbp)
	mov    %r14,-0x30(%rbp)
	mov    %rdx,-0x8(%rbp)
	mov    %rdi,-0x10(%rbp)
	mov    %rbx,-0x18(%rbp)
	mov    %r12,-0x20(%rbp)
	mov    %r13,-0x28(%rbp)
	movslq 0x4(%rsi),%r10
	mov    %r10,-0x50(%rbp)
	mov    0x270(%rdi),%rax
	mov    0x30(%rax),%r14
	movslq (%rsi),%r11
	movslq 0x8(%rsi),%r8
	mov    %r8,-0x58(%rbp)
	movslq 0xc(%rsi),%r9
	mov    %r9,-0x68(%rbp)
	movslq 0x14(%rsi),%r12
	xor    %eax,%eax
	movslq 0x10(%rsi),%rdx
	mov    %rdx,-0x70(%rbp)
	lea    (%rdx,%rdx,1),%rbx
	mov    %rbx,-0x40(%rbp)
	mov    %rax,%rcx
	mov    %rcx,%rsi
	mov    %rsi,%rdi
	jmp    378d4 <compute_color+0xd4>
	movzwl (%rbx),%r8d
	test   %r8w,%r8w
	je     3789b <compute_color+0x9b>
	add    %r8,%rcx
	lea    0x4(,%rdx,8),%r9d
	movslq %r9d,%r9
	imul   %r8,%r9
	add    %r9,%rsi
	mov    %r8,%r9
	imul   %r11,%r9
	add    %r9,%rdi
	imul   %r10,%r8
	add    %r8,%rax
	add    $0x2,%rbx
	add    $0x1,%edx
	cmp    %r12d,%edx
	jle    3786b <compute_color+0x6b>
	mov    -0x60(%rbp),%rdx
	lea    0x1(%rdx),%r8d
	mov    -0x70(%rbp),%rdx
	mov    -0x68(%rbp),%r9
	mov    -0x40(%rbp),%rbx
	cmp    %r9d,%r8d
	jle    37948 <compute_color+0x148>
	mov    -0x48(%rbp),%r8
	lea    0x1(%r8),%r11d
	mov    -0x58(%rbp),%r8
	mov    -0x50(%rbp),%r10
	cmp    %r10d,%r11d
	jle    3796a <compute_color+0x16a>
	mov    %rcx,%r8
	sar    %r8
	add    %r8,%rax
	cqto   
	mov    -0x8(%rbp),%rbx
	movslq %ebx,%rbx
	mov    -0x10(%rbp),%r9
	mov    0xa0(%r9),%r10
	mov    (%r10),%r10
	idiv   %rcx
	mov    %al,(%rbx,%r10,1)
	lea    (%r8,%rdi,1),%rax
	cqto   
	mov    0xa0(%r9),%rdi
	mov    0x8(%rdi),%rdi
	idiv   %rcx
	mov    %al,(%rbx,%rdi,1)
	lea    (%r8,%rsi,1),%rax
	cqto   
	mov    0xa0(%r9),%rsi
	mov    0x10(%rsi),%rsi
	idiv   %rcx
	mov    %al,(%rbx,%rsi,1)
	mov    -0x28(%rbp),%r13
	mov    -0x20(%rbp),%r12
	mov    -0x18(%rbp),%rbx
	mov    -0x30(%rbp),%r14
	mov    -0x38(%rbp),%r15
	leaveq 
	retq   
	lea    0x2(,%r8,4),%r9d
	movslq %r9d,%r11
	add    (%r14,%r13,8),%rbx
	movslq %r8d,%r9
	shl    $0x6,%r9
	add    %r9,%rbx
	mov    %r8,-0x60(%rbp)
	jmpq   378a2 <compute_color+0xa2>
	movslq %r11d,%r13
	lea    0x4(,%r11,8),%r10d
	movslq %r10d,%r10
	mov    %r11,-0x48(%rbp)
	jmpq   378bb <compute_color+0xbb>
	data16 nopw %cs:0x0(%rax,%rax,1)
	nopl   0x0(%rax)

0037990 <select_colors>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %r13,-0x18(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %r15,-0x28(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    %rbx,-0x8(%rbp)
	mov    0x8(%rdi),%rax
	mov    (%rax),%rax
	mov    $0x1,%r12d
	movslq %esi,%rcx
	lea    (%rcx,%rcx,4),%rdx
	shl    $0x3,%rdx
	mov    %rsi,%r14
	mov    %rdi,%rbx
	mov    %r12,%rsi
	callq  *%rax
	mov    %rax,%r13
	movl   $0x0,0x0(%r13)
	movl   $0x1f,0x4(%r13)
	movl   $0x0,0x8(%r13)
	movl   $0x3f,0xc(%r13)
	movl   $0x0,0x10(%r13)
	movl   $0x1f,0x14(%r13)
	mov    %rbx,%rdi
	mov    %r13,%rsi
	callq  37140 <update_box>
	mov    %r14,%rcx
	mov    %rbx,%rdi
	mov    %r13,%rsi
	mov    %r12,%rdx
	callq  375a0 <median_cut>
	mov    %rax,%r15
	xor    %r14d,%r14d
	jmp    37a41 <select_colors+0xb1>
	movslq %r14d,%rax
	lea    (%rax,%rax,4),%rax
	lea    0x0(%r13,%rax,8),%rsi
	mov    %rbx,%rdi
	mov    %r14,%rdx
	callq  37800 <compute_color>
	add    $0x1,%r14d
	cmp    %r15d,%r14d
	jl     37a26 <select_colors+0x96>
	mov    %r15d,0x9c(%rbx)
	mov    (%rbx),%rax
	movl   $0x60,0x28(%rax)
	mov    (%rbx),%rax
	mov    %r15d,0x2c(%rax)
	mov    (%rbx),%rax
	mov    0x8(%rax),%rax
	mov    %r12,%rsi
	mov    %rbx,%rdi
	callq  *%rax
	mov    -0x8(%rbp),%rbx
	mov    -0x10(%rbp),%r12
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	leaveq 
	retq   
	data16 nopw %cs:0x0(%rax,%rax,1)
	xchg   %ax,%ax

0037a90 <find_nearby_colors>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x880,%rsp
	mov    %r15,-0x28(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    %rbx,-0x8(%rbp)
	mov    %r8,-0x30(%rbp)
	mov    %rdx,-0x40(%rbp)
	mov    %rcx,-0x58(%rbp)
	movslq 0x9c(%rdi),%r15
	lea    0x18(%rcx,%rcx,1),%eax
	sar    %eax
	mov    %rax,-0x78(%rbp)
	lea    0x18(%rsi,%rsi,1),%eax
	sar    %eax
	mov    %rax,-0x70(%rbp)
	lea    0x1c(%rdx,%rdx,1),%r12d
	sar    %r12d
	mov    %r12,-0x48(%rbp)
	xor    %r8d,%r8d
	lea    0x23a20(%rip),%r11        # 5b50c <rgb_red>
	lea    0x18(%rcx),%ebx
	mov    %rbx,-0x60(%rbp)
	lea    0x18(%rsi),%r9d
	mov    %r9,-0x50(%rbp)
	lea    0x1c(%rdx),%ebx
	mov    %rbx,-0x68(%rbp)
	mov    $0x7fffffff,%r10d
	mov    %r10,-0x38(%rbp)
	lea    0x23ac5(%rip),%r10        # 5b5d8 <c_scales>
	mov    %r8,%r13
	jmp    37b85 <find_nearby_colors+0xf5>
	mov    0x40(%rdi),%ebx
	lea    0x23a72(%rip),%r12        # 5b594 <rgb_blue>
	movslq (%r12,%rbx,4),%rbx
	movslq (%r10,%rbx,4),%r12
	mov    %r8,%rbx
	sub    %ecx,%ebx
	imul   %r12d,%ebx
	movslq %ebx,%rbx
	imul   %rbx,%rbx
	add    %rbx,%rax
	mov    -0x60(%rbp),%rbx
	sub    %ebx,%r8d
	imul   %r12d,%r8d
	movslq %r8d,%rbx
	imul   %rbx,%rbx
	lea    (%r11,%rbx,1),%r8
	mov    -0x68(%rbp),%rbx
	mov    %rax,-0x878(%rbp,%r14,8)
	mov    -0x38(%rbp),%rax
	cmp    %r8,%rax
	jle    37b6b <find_nearby_colors+0xdb>
	mov    %r8,%rax
	mov    %rax,-0x38(%rbp)
	add    $0x1,%r13d
	mov    -0x48(%rbp),%r12
	lea    0x2398e(%rip),%r11        # 5b50c <rgb_red>
	mov    -0x70(%rbp),%rax
	xor    %r8d,%r8d
	cmp    %r13d,%r15d
	jg     37b97 <find_nearby_colors+0x107>
	mov    -0x38(%rbp),%rdx
	mov    -0x30(%rbp),%rsi
	mov    %r8,%rax
	jmp    37bf8 <find_nearby_colors+0x168>
	movslq %r13d,%r14
	mov    0xa0(%rdi),%r8
	mov    (%r8),%r8
	movzbl (%r8,%r14,1),%r8d
	cmp    %esi,%r8d
	jl     37c13 <find_nearby_colors+0x183>
	cmp    %r9d,%r8d
	jg     37c90 <find_nearby_colors+0x200>
	cmp    %eax,%r8d
	jle    37cbc <find_nearby_colors+0x22c>
	mov    0x40(%rdi),%eax
	movslq (%r11,%rax,4),%rax
	sub    %esi,%r8d
	imul   (%r10,%rax,4),%r8d
	movslq %r8d,%r11
	imul   %r11,%r11
	xor    %eax,%eax
	jmp    37c3c <find_nearby_colors+0x1ac>
	movslq %r8d,%rcx
	mov    -0x878(%rbp,%rcx,8),%rcx
	cmp    %rdx,%rcx
	jg     37bf4 <find_nearby_colors+0x164>
	movslq %eax,%rcx
	mov    %r8b,(%rsi,%rcx,1)
	add    $0x1,%eax
	add    $0x1,%r8d
	cmp    %r15d,%r8d
	jl     37bda <find_nearby_colors+0x14a>
	mov    -0x8(%rbp),%rbx
	mov    -0x10(%rbp),%r12
	mov    -0x18(%rbp),%r13
	mov    -0x20(%rbp),%r14
	mov    -0x28(%rbp),%r15
	leaveq 
	retq   
	mov    0x40(%rdi),%eax
	movslq (%r11,%rax,4),%rax
	movslq (%r10,%rax,4),%r11
	mov    %r8,%rax
	sub    %esi,%eax
	imul   %r11d,%eax
	movslq %eax,%rax
	imul   %rax,%rax
	sub    %r9d,%r8d
	imul   %r11d,%r8d
	movslq %r8d,%r11
	imul   %r11,%r11
	mov    0xa0(%rdi),%r8
	mov    0x8(%r8),%r8
	movzbl (%r8,%r14,1),%r8d
	cmp    %edx,%r8d
	jl     37cd9 <find_nearby_colors+0x249>
	cmp    %ebx,%r8d
	jg     37d75 <find_nearby_colors+0x2e5>
	cmp    %r12d,%r8d
	jle    37db6 <find_nearby_colors+0x326>
	mov    0x40(%rdi),%ebx
	lea    0x238df(%rip),%r12        # 5b550 <rgb_green>
	movslq (%r12,%rbx,4),%rbx
	sub    %edx,%r8d
	imul   (%r10,%rbx,4),%r8d
	movslq %r8d,%rbx
	imul   %rbx,%rbx
	add    %rbx,%r11
	mov    -0x68(%rbp),%rbx
	jmpq   37d15 <find_nearby_colors+0x285>
	mov    0x40(%rdi),%eax
	movslq (%r11,%rax,4),%rax
	movslq (%r10,%rax,4),%r11
	mov    %r8,%rax
	sub    %r9d,%eax
	imul   %r11d,%eax
	movslq %eax,%rax
	imul   %rax,%rax
	sub    %esi,%r8d
	imul   %r11d,%r8d
	movslq %r8d,%r11
	imul   %r11,%r11
	jmp    37c3c <find_nearby_colors+0x1ac>
	mov    0x40(%rdi),%eax
	movslq (%r11,%rax,4),%rax
	sub    %r9d,%r8d
	imul   (%r10,%rax,4),%r8d
	movslq %r8d,%r11
	imul   %r11,%r11
	xor    %eax,%eax
	jmpq   37c3c <find_nearby_colors+0x1ac>
	mov    0x40(%rdi),%r9d
	lea    0x2386c(%rip),%r12        # 5b550 <rgb_green>
	movslq (%r12,%r9,4),%r9
	movslq (%r10,%r9,4),%r12
	mov    %r8,%r9
	sub    %edx,%r9d
	imul   %r12d,%r9d
	movslq %r9d,%r9
	imul   %r9,%r9
	add    %r9,%rax
	sub    %ebx,%r8d
	imul   %r12d,%r8d
	movslq %r8d,%r8
	imul   %r8,%r8
	add    %r8,%r11
	mov    -0x50(%rbp),%r9
	mov    0xa0(%rdi),%r8
	mov    0x10(%r8),%r8
	movzbl (%r8,%r14,1),%r8d
	cmp    %ecx,%r8d
	jl     37b18 <find_nearby_colors+0x88>
	mov    -0x60(%rbp),%r12
	cmp    %r12d,%r8d
	jg     37ddf <find_nearby_colors+0x34f>
	mov    -0x78(%rbp),%r10
	cmp    %r10d,%r8d
	jle    37e23 <find_nearby_colors+0x393>
	mov    0x40(%rdi),%r10d
	lea    0x23841(%rip),%r12        # 5b594 <rgb_blue>
	movslq (%r12,%r10,4),%r12
	sub    %ecx,%r8d
	lea    0x23877(%rip),%r10        # 5b5d8 <c_scales>
	imul   (%r10,%r12,4),%r8d
	movslq %r8d,%r8
	imul   %r8,%r8
	add    %r11,%r8
	jmpq   37b57 <find_nearby_colors+0xc7>
	mov    0x40(%rdi),%r9d
	lea    0x237d0(%rip),%r12        # 5b550 <rgb_green>
	movslq (%r12,%r9,4),%r9
	movslq (%r10,%r9,4),%r12
	mov    %r8,%r9
	sub    %ebx,%r9d
	imul   %r12d,%r9d
	movslq %r9d,%r9
	imul   %r9,%r9
	add    %r9,%rax
	sub    %edx,%r8d
	imul   %r12d,%r8d
	movslq %r8d,%r8
	imul   %r8,%r8
	add    %r8,%r11
	mov    -0x50(%rbp),%r9
	jmpq   37d15 <find_nearby_colors+0x285>
	mov    0x40(%rdi),%edx
	lea    0x23790(%rip),%r12        # 5b550 <rgb_green>
	movslq (%r12,%rdx,4),%rdx
	sub    %ebx,%r8d
	imul   (%r10,%rdx,4),%r8d
	movslq %r8d,%rdx
	imul   %rdx,%rdx
	add    %rdx,%r11
	mov    -0x40(%rbp),%rdx
	jmpq   37d15 <find_nearby_colors+0x285>
	mov    0x40(%rdi),%edx
	lea    0x237ab(%rip),%rbx        # 5b594 <rgb_blue>
	movslq (%rbx,%rdx,4),%rdx
	movslq (%r10,%rdx,4),%rbx
	mov    %r8,%rdx
	sub    %r12d,%edx
	imul   %ebx,%edx
	movslq %edx,%rdx
	imul   %rdx,%rdx
	add    %rdx,%rax
	sub    %ecx,%r8d
	imul   %ebx,%r8d
	movslq %r8d,%rdx
	imul   %rdx,%rdx
	lea    (%r11,%rdx,1),%r8
	mov    -0x40(%rbp),%rdx
	mov    -0x68(%rbp),%rbx
	jmpq   37b57 <find_nearby_colors+0xc7>
	mov    0x40(%rdi),%ecx
	lea    0x23767(%rip),%r10        # 5b594 <rgb_blue>
	movslq (%r10,%rcx,4),%rcx
	sub    %r12d,%r8d
	lea    0x2379d(%rip),%r10        # 5b5d8 <c_scales>
	imul   (%r10,%rcx,4),%r8d
	movslq %r8d,%rcx
	imul   %rcx,%rcx
	lea    (%r11,%rcx,1),%r8
	mov    -0x58(%rbp),%rcx
	jmpq   37b57 <find_nearby_colors+0xc7>
	data16 nopw %cs:0x0(%rax,%rax,1)
	nop

0037e60 <find_best_colors>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x4a0,%rsp
	mov    %r8,-0x98(%rbp)
	mov    %r9,-0x80(%rbp)
	mov    %rcx,-0x70(%rbp)
	mov    %rdx,-0x60(%rbp)
	mov    %rsi,-0x40(%rbp)
	lea    -0x498(%rbp),%r11
	mov    $0x7f,%eax
	mov    %r11,%r10
	jmp    37ea1 <find_best_colors+0x41>
	movq   $0x7fffffff,(%r10)
	add    $0x8,%r10
	add    $0xffffffff,%eax
	test   %eax,%eax
	jns    37e93 <find_best_colors+0x33>
	mov    0x10(%rbp),%r10
	mov    %r10,-0x78(%rbp)
	lea    0x236e0(%rip),%rax        # 5b594 <rgb_blue>
	mov    %r15,-0x28(%rbp)
	lea    0x23719(%rip),%r15        # 5b5d8 <c_scales>
	mov    %r14,-0x20(%rbp)
	lea    0x23686(%rip),%r14        # 5b550 <rgb_green>
	mov    %r13,-0x18(%rbp)
	lea    0x23637(%rip),%r13        # 5b50c <rgb_red>
	mov    %r12,-0x10(%rbp)
	xor    %r12d,%r12d
	mov    %rbx,-0x8(%rbp)
	mov    %r8,%rbx
	mov    %r14,%r8
	mov    %r12,%r14
	jmpq   37fd8 <find_best_colors+0x178>
	mov    (%r11),%rax
	cmp    %rdx,%rax
	jle    37efc <find_best_colors+0x9c>
	mov    %rdx,(%r11)
	mov    %r14b,(%r10)
	add    $0x1,%r10
	add    %rbx,%rdx
	add    $0x8,%r11
	add    $0xffffffff,%ecx
	mov    0x40(%rdi),%eax
	movslq (%r12,%rax,4),%rax
	movslq (%r15,%rax,4),%rax
	imul   %eax,%eax
	shl    $0x7,%eax
	movslq %eax,%rax
	add    %rax,%rbx
	test   %ecx,%ecx
	jns    37eee <find_best_colors+0x8e>
	add    $0xffffffff,%esi
	mov    -0x50(%rbp),%rcx
	mov    -0x48(%rbp),%rax
	lea    (%rax,%rcx,1),%rdx
	mov    0x40(%rdi),%eax
	movslq (%r8,%rax,4),%rax
	movslq (%r15,%rax,4),%rax
	imul   %eax,%eax
	shl    $0x5,%eax
	movslq %eax,%rax
	add    %rcx,%rax
	mov    -0x68(%rbp),%rbx
	mov    $0x3,%ecx
	test   %esi,%esi
	jns    37ff3 <find_best_colors+0x193>
	mov    -0x88(%rbp),%rax
	lea    -0x1(%rax),%r9d
	mov    -0x38(%rbp),%rsi
	mov    -0x30(%rbp),%rax
	lea    (%rax,%rsi,1),%rdx
	mov    0x40(%rdi),%eax
	lea    0x2358f(%rip),%r13        # 5b50c <rgb_red>
	movslq 0x0(%r13,%rax,4),%rax
	movslq (%r15,%rax,4),%rax
	imul   %eax,%eax
	shl    $0x7,%eax
	movslq %eax,%rax
	lea    (%rsi,%rax,1),%r8
	mov    -0x58(%rbp),%rax
	mov    $0x7,%esi
	test   %r9d,%r9d
	jns    38000 <find_best_colors+0x1a0>
	mov    -0x90(%rbp),%rax
	lea    0x1(%rax),%r14d
	mov    %r12,%rax
	mov    -0x78(%rbp),%r10
	lea    -0x498(%rbp),%r11
	mov    -0x40(%rbp),%rsi
	mov    -0x60(%rbp),%rdx
	lea    0x23587(%rip),%r8        # 5b550 <rgb_green>
	mov    -0x70(%rbp),%rcx
	mov    -0x80(%rbp),%r9
	mov    -0x98(%rbp),%rbx
	cmp    %ebx,%r14d
	jl     3801b <find_best_colors+0x1bb>
	mov    -0x8(%rbp),%rbx
	mov    -0x10(%rbp),%r12
	mov    -0x18(%rbp),%r13
	mov    -0x20(%rbp),%r14
	mov    -0x28(%rbp),%r15
	leaveq 
	retq   
	mov    %rdx,-0x48(%rbp)
	mov    %rax,-0x50(%rbp)
	jmpq   37f21 <find_best_colors+0xc1>
	mov    %r9,-0x88(%rbp)
	mov    %rdx,-0x30(%rbp)
	mov    %r8,-0x38(%rbp)
	lea    0x2353a(%rip),%r8        # 5b550 <rgb_green>
	jmpq   37f54 <find_best_colors+0xf4>
	mov    0x40(%rdi),%r12d
	movslq (%rax,%r12,4),%rax
	movslq (%r15,%rax,4),%rax
	mov    %r14,-0x90(%rbp)
	movslq %r14d,%rbx
	movzbl (%r9,%rbx,1),%r14d
	mov    0xa0(%rdi),%r9
	mov    0x10(%r9),%rbx
	movzbl (%r14,%rbx,1),%ebx
	sub    %ebx,%ecx
	imul   %eax,%ecx
	movslq %ecx,%rcx
	mov    %rax,%rbx
	shl    $0x4,%ebx
	movslq %ebx,%rbx
	imul   %rcx,%rbx
	imul   %eax,%eax
	shl    $0x6,%eax
	movslq %eax,%rax
	add    %rax,%rbx
	mov    %rbx,-0x68(%rbp)
	movslq (%r8,%r12,4),%rax
	movslq (%r15,%rax,4),%rax
	mov    0x8(%r9),%r8
	movzbl (%r14,%r8,1),%r8d
	sub    %r8d,%edx
	imul   %eax,%edx
	movslq %edx,%r8
	mov    %r8,%rdx
	imul   %r8,%rdx
	movslq 0x0(%r13,%r12,4),%r12
	movslq (%r15,%r12,4),%r12
	mov    (%r9),%r9
	movzbl (%r14,%r9,1),%r9d
	sub    %r9d,%esi
	imul   %r12d,%esi
	movslq %esi,%r9
	mov    %r9,%rsi
	imul   %r9,%rsi
	add    %rsi,%rdx
	imul   %rcx,%rcx
	add    %rcx,%rdx
	mov    %rax,%rcx
	shl    $0x3,%ecx
	movslq %ecx,%rcx
	imul   %r8,%rcx
	imul   %eax,%eax
	shl    $0x4,%eax
	movslq %eax,%rax
	add    %rcx,%rax
	mov    %rax,-0x58(%rbp)
	mov    %r12,%rcx
	shl    $0x4,%ecx
	movslq %ecx,%rcx
	imul   %r9,%rcx
	imul   %r12d,%r12d
	shl    $0x6,%r12d
	movslq %r12d,%rsi
	lea    (%rsi,%rcx,1),%r8
	mov    $0x7,%esi
	lea    0x2340f(%rip),%r13        # 5b50c <rgb_red>
	lea    0x23490(%rip),%r12        # 5b594 <rgb_blue>
	mov    $0x3,%ecx
	mov    %rcx,%r9
	jmpq   37f9c <find_best_colors+0x13c>
	data16 nopw %cs:0x0(%rax,%rax,1)
	nopl   0x0(%rax)

0038120 <fill_inverse_cmap>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x1c0,%rsp
	mov    %r15,-0x40(%rbp)
	mov    %r14,-0x38(%rbp)
	mov    %r13,-0x30(%rbp)
	mov    %r12,-0x28(%rbp)
	mov    %rbx,-0x20(%rbp)
	mov    %rdx,-0x18(%rbp)
	mov    %rcx,-0x8(%rbp)
	mov    0x270(%rdi),%rax
	mov    0x30(%rax),%rax
	mov    %rax,-0x10(%rbp)
	mov    %rsi,%rax
	and    $0x1ffffffc,%eax
	lea    0x4(,%rax,8),%r14d
	and    $0x3ffffff8,%edx
	lea    0x2(,%rdx,4),%ebx
	and    $0x1ffffffc,%ecx
	lea    0x4(,%rcx,8),%r13d
	mov    %rsi,%r12
	lea    -0x1c0(%rbp),%r8
	mov    %rdi,%r15
	mov    %r14,%rsi
	mov    %rbx,%rdx
	mov    %r13,%rcx
	callq  37a90 <find_nearby_colors>
	mov    %r13,%rcx
	mov    %rbx,%rdx
	mov    %r14,%rsi
	mov    %r15,%rdi
	mov    %rax,%r8
	sub    $0x10,%rsp
	lea    -0xc0(%rbp),%rbx
	mov    %rbx,(%rsp)
	lea    -0x1c0(%rbp),%r9
	callq  37e60 <find_best_colors>
	and    $0xfffffffc,%r12d
	mov    -0x18(%rbp),%r8
	and    $0xfffffff8,%r8d
	add    $0x10,%rsp
	xor    %r10d,%r10d
	mov    -0x8(%rbp),%rax
	and    $0xfffffffc,%eax
	movslq %eax,%rax
	lea    (%rax,%rax,1),%r9
	mov    -0x10(%rbp),%r14
	mov    %r10,%rsi
	jmp    3821e <fill_inverse_cmap+0xfe>
	movzbl (%rbx),%r11d
	add    $0x1,%r11d
	mov    %r11w,(%rax)
	add    $0x1,%rbx
	add    $0x2,%rax
	add    $0x1,%ecx
	cmp    $0x3,%ecx
	jle    381f0 <fill_inverse_cmap+0xd0>
	add    $0x1,%edx
	add    $0x1,%edi
	cmp    $0x7,%edx
	jle    38239 <fill_inverse_cmap+0x119>
	add    $0x1,%esi
	add    $0x1,%r12d
	cmp    $0x3,%esi
	jle    3824f <fill_inverse_cmap+0x12f>
	mov    -0x20(%rbp),%rbx
	mov    -0x28(%rbp),%r12
	mov    -0x30(%rbp),%r13
	mov    -0x38(%rbp),%r14
	mov    -0x40(%rbp),%r15
	leaveq 
	retq   
	mov    %r9,%rcx
	add    (%r14,%r13,8),%rcx
	movslq %edi,%rax
	shl    $0x6,%rax
	add    %rcx,%rax
	mov    %r10,%rcx
	jmp    38207 <fill_inverse_cmap+0xe7>
	movslq %r12d,%r13
	mov    %r8,%rdi
	mov    %r10,%rdx
	jmp    38212 <fill_inverse_cmap+0xf2>
	nopw   0x0(%rax,%rax,1)

0038260 <pass2_no_dither>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x60,%rsp
	mov    %rdi,-0x38(%rbp)
	mov    %rbx,-0x8(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %r15,-0x28(%rbp)
	mov    %rcx,-0x50(%rbp)
	mov    %rsi,-0x40(%rbp)
	mov    %rdx,-0x30(%rbp)
	mov    0x270(%rdi),%rax
	mov    0x30(%rax),%r12
	mov    0x88(%rdi),%ebx
	mov    %rbx,-0x58(%rbp)
	xor    %eax,%eax
	jmp    38316 <pass2_no_dither+0xb6>
	movzbl 0x0(%r13),%esi
	shr    $0x3,%esi
	movslq %esi,%rcx
	movzbl 0x1(%r13),%edx
	shr    $0x2,%edx
	movslq %edx,%rax
	shl    $0x6,%rax
	add    (%r12,%rcx,8),%rax
	movzbl 0x2(%r13),%ecx
	shr    $0x3,%ecx
	movslq %ecx,%r8
	lea    (%rax,%r8,2),%r15
	movzwl (%r15),%eax
	test   %ax,%ax
	jne    382e4 <pass2_no_dither+0x84>
	callq  38120 <fill_inverse_cmap>
	mov    -0x38(%rbp),%rdi
	movzbl (%r15),%eax
	add    $0xff,%eax
	mov    %al,(%r14)
	add    $0x3,%r13
	add    $0x1,%r14
	add    $0xffffffff,%ebx
	test   %ebx,%ebx
	jne    382a5 <pass2_no_dither+0x45>
	mov    -0x48(%rbp),%rax
	add    $0x1,%eax
	mov    -0x58(%rbp),%rbx
	mov    -0x30(%rbp),%rdx
	mov    -0x40(%rbp),%rsi
	mov    -0x50(%rbp),%rcx
	cmp    %ecx,%eax
	jl     38330 <pass2_no_dither+0xd0>
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	leaveq 
	retq   
	movslq %eax,%rcx
	mov    (%rsi,%rcx,8),%r13
	mov    (%rdx,%rcx,8),%r14
	mov    %rax,-0x48(%rbp)
	jmp    382fb <pass2_no_dither+0x9b>
	data16 nopw %cs:0x0(%rax,%rax,1)
	nopl   0x0(%rax)

0038350 <pass2_fs_dither>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x150,%rsp
	mov    %r15,-0x28(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    %rbx,-0x8(%rbp)
	mov    %rdi,-0x58(%rbp)
	mov    %rcx,-0x138(%rbp)
	mov    %rsi,-0x118(%rbp)
	mov    %rdx,-0x120(%rbp)
	mov    0x270(%rdi),%r13
	mov    %r13,-0x110(%rbp)
	mov    0x30(%r13),%rax
	mov    %rax,-0x60(%rbp)
	mov    0x1a8(%rdi),%rax
	mov    %rax,-0x140(%rbp)
	mov    0x50(%r13),%rax
	mov    %rax,-0xf8(%rbp)
	mov    0xa0(%rdi),%rbx
	mov    (%rbx),%rax
	mov    %rax,-0x88(%rbp)
	mov    0x8(%rbx),%rax
	mov    %rax,-0xa8(%rbp)
	mov    0x10(%rbx),%rax
	mov    %rax,-0x30(%rbp)
	mov    0x88(%rdi),%r11d
	mov    %r11,-0x148(%rbp)
	lea    -0x1(%r11),%eax
	lea    -0x1(%r11,%rax,2),%edi
	mov    %edi,%edi
	mov    %rdi,-0xd0(%rbp)
	mov    %eax,%r14d
	mov    %r14,-0x38(%rbp)
	xor    %r8d,%r8d
	mov    %r8,-0xb8(%rbp)
	lea    0x3(%r11,%r11,2),%eax
	mov    %eax,%eax
	lea    (%rax,%rax,1),%rbx
	mov    %rbx,-0x108(%rbp)
	mov    $0x6,%r9d
	mov    $0xfffffffffffffffd,%rax
	mov    %rax,-0xe8(%rbp)
	mov    $0x3,%eax
	mov    %rax,-0xe0(%rbp)
	mov    $0xffffffffffffffff,%rax
	mov    %rax,-0x48(%rbp)
	mov    $0x1,%eax
	mov    %rax,-0x40(%rbp)
	mov    %r8,%r15
	mov    %rcx,%r8
	mov    $0xa,%r10d
	mov    $0x8,%eax
	mov    %r15,%rcx
	jmpq   386f5 <pass2_fs_dither+0x3a5>
	mov    %r9,-0x130(%rbp)
	add    %rbx,%r9
	mov    %r9,-0x128(%rbp)
	movswq (%r9),%r9
	lea    0x8(%r9,%r13,1),%r9d
	sar    $0x4,%r9d
	movslq %r9d,%r13
	movzbl (%r8),%r9d
	add    (%r14,%r13,4),%r9d
	movslq %r9d,%r9
	movzbl (%r9,%rdx,1),%r13d
	mov    %r13,%r9
	shr    $0x3,%r9d
	mov    %r11,-0x150(%rbp)
	movslq %r9d,%r11
	mov    %r10,-0x100(%rbp)
	movswq (%r10,%rbx,1),%r10
	lea    0x8(%r10,%rcx,1),%ecx
	sar    $0x4,%ecx
	movslq %ecx,%r10
	movzbl 0x2(%r8),%ecx
	add    (%r14,%r10,4),%ecx
	movslq %ecx,%rcx
	movzbl (%rcx,%rdx,1),%ecx
	mov    %rcx,-0xc8(%rbp)
	shr    $0x3,%ecx
	movslq %ecx,%r10
	add    %r10,%r10
	mov    (%r15,%r11,8),%r11
	add    %r10,%r11
	movswq (%rbx,%rax,1),%r10
	lea    0x8(%r10,%rsi,1),%r10d
	sar    $0x4,%r10d
	movslq %r10d,%rsi
	movzbl 0x1(%r8),%r10d
	add    (%r14,%rsi,4),%r10d
	movslq %r10d,%rsi
	movzbl (%rsi,%rdx,1),%r14d
	mov    %r14,%rdx
	shr    $0x2,%edx
	movslq %edx,%r10
	shl    $0x6,%r10
	lea    (%r11,%r10,1),%r15
	movzwl (%r15),%esi
	test   %si,%si
	jne    3854b <pass2_fs_dither+0x1fb>
	mov    %r8,-0xd8(%rbp)
	mov    %rax,-0xa0(%rbp)
	mov    %r9,%rsi
	callq  38120 <fill_inverse_cmap>
	mov    -0xa0(%rbp),%rax
	mov    -0xd8(%rbp),%r8
	movzwl (%r15),%ecx
	add    $0xffffffff,%ecx
	mov    %cl,(%r12)
	movslq %ecx,%rdx
	mov    -0x88(%rbp),%rcx
	movzbl (%rdx,%rcx,1),%ecx
	sub    %ecx,%r13d
	mov    %r13,-0x78(%rbp)
	lea    0x0(%r13,%r13,2),%r9d
	mov    -0x70(%rbp),%rcx
	lea    (%rcx,%r9,1),%edi
	mov    -0xa8(%rbp),%rcx
	movzbl (%rdx,%rcx,1),%ecx
	sub    %ecx,%r14d
	mov    %r14,-0xa0(%rbp)
	lea    (%r14,%r14,2),%esi
	mov    -0x90(%rbp),%rcx
	add    %esi,%ecx
	mov    -0x30(%rbp),%r10
	movzbl (%rdx,%r10,1),%edx
	mov    %di,(%rbx)
	mov    %cx,0x2(%rbx)
	mov    -0xc8(%rbp),%rcx
	sub    %edx,%ecx
	mov    %rcx,-0xd8(%rbp)
	lea    (%rcx,%rcx,2),%edi
	mov    -0xb0(%rbp),%rdx
	add    %edi,%edx
	mov    %dx,0x4(%rbx)
	lea    0x0(%r13,%r13,4),%edx
	mov    -0x80(%rbp),%rbx
	add    %ebx,%edx
	mov    %rdx,-0x70(%rbp)
	lea    (%r14,%r14,4),%edx
	mov    -0x98(%rbp),%rbx
	add    %ebx,%edx
	mov    %rdx,-0x90(%rbp)
	lea    (%rcx,%rcx,4),%ebx
	mov    -0xc0(%rbp),%rdx
	add    %ebx,%edx
	mov    %rdx,-0xb0(%rbp)
	lea    0x0(%r13,%r9,2),%r13d
	lea    (%r14,%rsi,2),%esi
	lea    (%rcx,%rdi,2),%ecx
	mov    -0xf0(%rbp),%rdx
	add    %rdx,%r8
	mov    -0x50(%rbp),%rdx
	add    %r12,%rdx
	mov    %rdx,-0xc8(%rbp)
	mov    -0x150(%rbp),%rdx
	lea    -0x1(%rdx),%r11d
	mov    -0xc8(%rbp),%r12
	mov    -0x140(%rbp),%rdx
	mov    -0xf8(%rbp),%r14
	mov    -0x60(%rbp),%r15
	mov    -0x100(%rbp),%r10
	mov    -0x128(%rbp),%rbx
	mov    -0x130(%rbp),%r9
	mov    -0x58(%rbp),%rdi
	pushq  -0x78(%rbp)
	pushq  -0xa0(%rbp)
	pushq  -0xd8(%rbp)
	popq   -0xc0(%rbp)
	popq   -0x98(%rbp)
	popq   -0x80(%rbp)
	test   %r11d,%r11d
	jne    3846b <pass2_fs_dither+0x11b>
	mov    -0x70(%rbp),%rax
	mov    %ax,(%rbx)
	mov    -0x90(%rbp),%rax
	mov    %ax,0x2(%rbx)
	mov    -0xb0(%rbp),%rax
	mov    %ax,0x4(%rbx)
	mov    -0x68(%rbp),%rax
	lea    0x1(%rax),%r15d
	mov    -0x38(%rbp),%r14
	mov    $0x6,%r9d
	mov    -0x148(%rbp),%r11
	mov    -0xd0(%rbp),%rdi
	mov    -0x108(%rbp),%rbx
	mov    -0x110(%rbp),%r13
	xor    %ecx,%ecx
	mov    -0x120(%rbp),%rdx
	mov    -0x118(%rbp),%rsi
	mov    -0x138(%rbp),%r8
	mov    $0xa,%r10d
	mov    $0x8,%eax
	cmp    %r8d,%r15d
	jl     38710 <pass2_fs_dither+0x3c0>
	mov    -0x8(%rbp),%rbx
	mov    -0x10(%rbp),%r12
	mov    -0x18(%rbp),%r13
	mov    -0x20(%rbp),%r14
	mov    -0x28(%rbp),%r15
	leaveq 
	retq   
	movslq %r15d,%r12
	mov    (%rsi,%r12,8),%r8
	mov    (%rdx,%r12,8),%r12
	movslq 0x48(%r13),%rdx
	test   %edx,%edx
	jne    387ac <pass2_fs_dither+0x45c>
	mov    0x40(%r13),%rbx
	movl   $0x1,0x48(%r13)
	mov    %r15,-0x68(%rbp)
	mov    -0x140(%rbp),%rdx
	mov    -0xf8(%rbp),%r14
	mov    -0x60(%rbp),%r15
	mov    -0x58(%rbp),%rdi
	mov    %rcx,%rsi
	mov    %rsi,%r13
	pushq  -0x40(%rbp)
	pushq  -0xb8(%rbp)
	pushq  -0xb8(%rbp)
	pushq  -0xb8(%rbp)
	pushq  -0xb8(%rbp)
	pushq  -0xb8(%rbp)
	pushq  -0xb8(%rbp)
	pushq  -0xe0(%rbp)
	popq   -0xf0(%rbp)
	popq   -0xc0(%rbp)
	popq   -0xb0(%rbp)
	popq   -0x98(%rbp)
	popq   -0x90(%rbp)
	popq   -0x80(%rbp)
	popq   -0x70(%rbp)
	popq   -0x50(%rbp)
	jmpq   3867f <pass2_fs_dither+0x32f>
	add    0x40(%r13),%rbx
	movl   $0x0,0x48(%r13)
	add    %rdi,%r8
	add    %r14,%r12
	mov    %r15,-0x68(%rbp)
	mov    -0x140(%rbp),%rdx
	mov    -0xf8(%rbp),%r14
	mov    -0x60(%rbp),%r15
	mov    $0xfffffffffffffffe,%r10
	mov    $0xfffffffffffffffc,%rax
	mov    -0x58(%rbp),%rdi
	mov    $0xfffffffffffffffa,%r9
	mov    %rcx,%rsi
	mov    %rsi,%r13
	pushq  -0x48(%rbp)
	pushq  -0xb8(%rbp)
	pushq  -0xb8(%rbp)
	pushq  -0xb8(%rbp)
	pushq  -0xb8(%rbp)
	pushq  -0xb8(%rbp)
	pushq  -0xb8(%rbp)
	pushq  -0xe8(%rbp)
	popq   -0xf0(%rbp)
	popq   -0xc0(%rbp)
	popq   -0xb0(%rbp)
	popq   -0x98(%rbp)
	popq   -0x90(%rbp)
	popq   -0x80(%rbp)
	popq   -0x70(%rbp)
	popq   -0x50(%rbp)
	jmpq   3867f <pass2_fs_dither+0x32f>
	nopl   0x0(%rax)

0038850 <init_error_limit>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %r14,-0x8(%rbp)
	mov    %r15,-0x10(%rbp)
	mov    0x8(%rdi),%rax
	mov    (%rax),%rax
	mov    $0x1,%r15d
	mov    $0x7fc,%edx
	mov    0x270(%rdi),%r14
	mov    %r15,%rsi
	callq  *%rax
	lea    0x3fc(%rax),%rsi
	mov    %rsi,0x50(%r14)
	xor    %r8d,%r8d
	mov    %r8,%rax
	jmp    388a5 <init_error_limit+0x55>
	movslq %eax,%rcx
	mov    %eax,(%rsi,%rcx,4)
	mov    %rax,%rdx
	neg    %edx
	movslq %edx,%rcx
	mov    %edx,(%rsi,%rcx,4)
	add    $0x1,%eax
	cmp    $0xf,%eax
	jle    38891 <init_error_limit+0x41>
	mov    %rax,%rcx
	jmp    388b4 <init_error_limit+0x64>
	mov    %r8,%rdx
	add    %edx,%ecx
	mov    %rcx,%rdi
	neg    %edi
	cmp    $0x2f,%eax
	jg     388f5 <init_error_limit+0xa5>
	movslq %eax,%rdx
	mov    %ecx,(%rsi,%rdx,4)
	mov    %rax,%rdx
	neg    %edx
	movslq %edx,%rdx
	mov    %edi,(%rsi,%rdx,4)
	add    $0x1,%eax
	mov    %rax,%rdx
	and    $0x1,%edx
	test   %edx,%edx
	jg     388af <init_error_limit+0x5f>
	mov    %r15,%rdx
	jmp    388b2 <init_error_limit+0x62>
	movslq %eax,%rdx
	mov    %ecx,(%rsi,%rdx,4)
	mov    %rax,%rdx
	neg    %edx
	movslq %edx,%rdx
	mov    %edi,(%rsi,%rdx,4)
	add    $0x1,%eax
	cmp    $0xff,%eax
	jle    388e1 <init_error_limit+0x91>
	mov    -0x10(%rbp),%r15
	mov    -0x8(%rbp),%r14
	leaveq 
	retq   
	nopw   %cs:0x0(%rax,%rax,1)

0038910 <finish_pass1>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %r15,-0x8(%rbp)
	mov    0x270(%rdi),%r15
	mov    0x20(%r15),%rax
	mov    %rax,0xa0(%rdi)
	movslq 0x28(%r15),%rsi
	callq  37990 <select_colors>
	movl   $0x1,0x38(%r15)
	mov    -0x8(%rbp),%r15
	leaveq 
	retq   
	data16 nopw %cs:0x0(%rax,%rax,1)

0038950 <finish_pass2>:
	push   %rbp
	mov    %rsp,%rbp
	leaveq 
	retq   
	nopw   %cs:0x0(%rax,%rax,1)

0038960 <start_pass_2_quant>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %r14,-0x28(%rbp)
	mov    %r15,-0x30(%rbp)
	mov    0x270(%rdi),%rcx
	mov    0x30(%rcx),%r8
	mov    0x70(%rdi),%eax
	test   %eax,%eax
	je     38989 <start_pass_2_quant+0x29>
	movl   $0x2,0x70(%rdi)
	test   %esi,%esi
	jne    389a2 <start_pass_2_quant+0x42>
	mov    0x70(%rdi),%eax
	cmp    $0x2,%eax
	je     389ef <start_pass_2_quant+0x8f>
	lea    -0x73c(%rip),%rax        # 38260 <pass2_no_dither>
	mov    %rax,0x8(%rcx)
	jmp    389fa <start_pass_2_quant+0x9a>
	lea    -0x1969(%rip),%rax        # 37040 <prescan_quantize>
	mov    %rax,0x8(%rcx)
	lea    -0xa4(%rip),%rax        # 38910 <finish_pass1>
	mov    %rax,0x10(%rcx)
	mov    %r15,%rax
	mov    %r13,%rsi
	mov    %r8,%r13
	mov    %r12,%rdi
	mov    %rcx,%r12
	mov    %r14,%rcx
	movl   $0x1,0x38(%r12)
	movslq 0x38(%r12),%rdx
	test   %edx,%edx
	je     38a2a <start_pass_2_quant+0xca>
	mov    $0x1000,%r15d
	xor    %r14d,%r14d
	mov    %rsi,-0x18(%rbp)
	mov    %rdi,-0x10(%rbp)
	jmp    38a4c <start_pass_2_quant+0xec>
	lea    -0x6a6(%rip),%rax        # 38350 <pass2_fs_dither>
	mov    %rax,0x8(%rcx)
	lea    -0xb1(%rip),%rax        # 38950 <finish_pass2>
	mov    %rax,0x10(%rcx)
	movslq 0x9c(%rdi),%rdx
	test   %edx,%edx
	jle    38a6d <start_pass_2_quant+0x10d>
	mov    %r15,%rax
	mov    %r13,%r15
	mov    %r8,%r13
	mov    %r14,%r8
	mov    %r12,%r14
	mov    %rcx,%r12
	mov    %r8,%rcx
	jmpq   38ab9 <start_pass_2_quant+0x159>
	mov    %rdi,%r12
	mov    %rsi,%r13
	mov    %rcx,%r14
	mov    %rax,%r15
	leaveq 
	retq   
	movslq %r14d,%rax
	mov    0x0(%r13,%rax,8),%rdi
	mov    %r15,%rsi
	callq  44d0 <jzero_far@plt>
	add    $0x1,%r14d
	cmp    $0x1f,%r14d
	jle    38a38 <start_pass_2_quant+0xd8>
	movl   $0x0,0x38(%r12)
	mov    -0x10(%rbp),%r12
	mov    -0x30(%rbp),%r15
	mov    -0x28(%rbp),%r14
	mov    -0x18(%rbp),%r13
	leaveq 
	retq   
	mov    (%rdi),%rax
	movl   $0x38,0x28(%rax)
	mov    (%rdi),%rax
	movl   $0x1,0x2c(%rax)
	mov    (%rdi),%rax
	mov    (%rax),%rax
	mov    %rdi,%rsi
	mov    %r13,-0x20(%rbp)
	mov    %r8,-0x18(%rbp)
	mov    %rdx,%r13
	mov    %r12,%r14
	mov    %rcx,%r12
	mov    %rdi,%r15
	mov    %rsi,%rdi
	callq  *%rax
	mov    %r13,%rdx
	mov    %r15,%rdi
	mov    -0x18(%rbp),%r13
	mov    -0x30(%rbp),%rax
	mov    -0x28(%rbp),%rcx
	mov    -0x20(%rbp),%r15
	cmp    $0x100,%edx
	jle    38af9 <start_pass_2_quant+0x199>
	mov    (%rdi),%rax
	movl   $0x39,0x28(%rax)
	mov    (%rdi),%rax
	movl   $0x100,0x2c(%rax)
	mov    (%rdi),%rax
	mov    (%rax),%rax
	mov    %rdi,%rcx
	mov    %r13,-0x10(%rbp)
	mov    %rdi,%r13
	mov    %rcx,%rdi
	callq  *%rax
	mov    %r13,%rdi
	mov    -0x10(%rbp),%r13
	mov    -0x30(%rbp),%rax
	mov    -0x28(%rbp),%rcx
	mov    0x70(%rdi),%edx
	cmp    $0x2,%edx
	je     38b0c <start_pass_2_quant+0x1ac>
	mov    %r15,%rsi
	mov    %r14,%rdi
	jmpq   389d3 <start_pass_2_quant+0x73>
	mov    0x88(%rdi),%eax
	add    $0x2,%eax
	mov    %eax,%eax
	lea    (%rax,%rax,2),%rax
	lea    (%rax,%rax,1),%rsi
	mov    0x40(%r12),%rax
	test   %rax,%rax
	jne    38b66 <start_pass_2_quant+0x206>
	mov    0x8(%rdi),%rax
	mov    0x8(%rax),%rax
	mov    $0x1,%r8d
	mov    %rdi,%rcx
	mov    %rsi,%rdx
	mov    %r15,-0x20(%rbp)
	mov    %r13,-0x8(%rbp)
	mov    %rdi,%r13
	mov    %rcx,%rdi
	mov    %rsi,%r15
	mov    %r8,%rsi
	callq  *%rax
	mov    %rax,0x40(%r12)
	mov    %r15,%rsi
	mov    %r13,%rdi
	mov    -0x8(%rbp),%r13
	mov    -0x20(%rbp),%r15
	mov    0x40(%r12),%rax
	mov    %r13,-0x8(%rbp)
	mov    %rdi,%r13
	mov    %rax,%rdi
	callq  44d0 <jzero_far@plt>
	mov    0x50(%r12),%rax
	test   %rax,%rax
	jne    38b8c <start_pass_2_quant+0x22c>
	mov    %r13,%rdi
	callq  38850 <init_error_limit>
	movl   $0x0,0x48(%r12)
	mov    %r15,%rsi
	mov    %r14,%rdi
	mov    -0x8(%rbp),%r13
	mov    -0x30(%rbp),%rax
	mov    -0x28(%rbp),%rcx
	jmpq   389d3 <start_pass_2_quant+0x73>
	nopl   0x0(%rax)

0038bb0 <new_color_map_2_quant>:
	push   %rbp
	mov    %rsp,%rbp
	mov    0x270(%rdi),%rax
	movl   $0x1,0x38(%rax)
	leaveq 
	retq   
	nopw   %cs:0x0(%rax,%rax,1)
	xchg   %ax,%ax

0038bd0 <jdiv_round_up>:
	push   %rbp
	mov    %rsp,%rbp
	lea    -0x1(%rsi,%rdi,1),%rax
	cqto   
	idiv   %rsi
	leaveq 
	retq   

0038be0 <jround_up>:
	push   %rbp
	mov    %rsp,%rbp
	lea    -0x1(%rsi,%rdi,1),%rax
	cqto   
	mov    %rax,%rcx
	idiv   %rsi
	mov    %rcx,%rax
	sub    %rdx,%rax
	leaveq 
	retq   
	nopl   0x0(%rax)

0038c00 <jcopy_sample_rows>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %r12,-0x8(%rbp)
	mov    %r13,-0x10(%rbp)
	mov    %r14,-0x18(%rbp)
	mov    %r15,-0x20(%rbp)
	mov    %r9d,%r14d
	movslq %esi,%rax
	lea    (%rdi,%rax,8),%r13
	movslq %ecx,%rax
	lea    (%rdx,%rax,8),%r15
	mov    %r8,%r12
	jmp    38c49 <jcopy_sample_rows+0x49>
	mov    (%r15),%rdi
	mov    0x0(%r13),%rsi
	mov    %r14,%rdx
	callq  42c0 <memcpy@plt>
	add    $0xffffffff,%r12d
	add    $0x8,%r13
	add    $0x8,%r15
	test   %r12d,%r12d
	jg     38c2e <jcopy_sample_rows+0x2e>
	mov    -0x20(%rbp),%r15
	mov    -0x18(%rbp),%r14
	mov    -0x10(%rbp),%r13
	mov    -0x8(%rbp),%r12
	leaveq 
	retq   

0038c60 <jcopy_block_row>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %edx,%edx
	shl    $0x7,%rdx
	mov    %rdi,%rax
	mov    %rsi,%rdi
	mov    %rax,%rsi
	callq  42c0 <memcpy@plt>
	leaveq 
	retq   
	nopw   0x0(%rax,%rax,1)

0038c80 <jzero_far>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rsi,%rdx
	xor    %esi,%esi
	callq  41e0 <memset@plt>
	leaveq 
	retq   

0038c90 <jinit_memory_mgr>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %r15,-0x10(%rbp)
	movq   $0x0,0x8(%rdi)
	mov    %rdi,%r15
	callq  4490 <jpeg_mem_init@plt>
	mov    %rax,-0x20(%rbp)
	mov    $0xa8,%esi
	mov    %r15,%rdi
	callq  4210 <jpeg_get_small@plt>
	test   %rax,%rax
	jne    38cf7 <jinit_memory_mgr+0x67>
	mov    %r15,%rdi
	mov    %r14,-0x8(%rbp)
	mov    %rax,%r14
	callq  4350 <jpeg_mem_term@plt>
	mov    (%r15),%rax
	movl   $0x36,0x28(%rax)
	mov    (%r15),%rax
	movl   $0x0,0x2c(%rax)
	mov    (%r15),%rax
	mov    (%rax),%rax
	mov    %r15,%rdi
	callq  *%rax
	mov    %r14,%rax
	mov    -0x8(%rbp),%r14
	lea    0x1a2(%rip),%rcx        # 38ea0 <alloc_small>
	mov    %rcx,(%rax)
	lea    0x3b8(%rip),%rcx        # 390c0 <alloc_large>
	mov    %rcx,0x8(%rax)
	lea    0x50d(%rip),%rcx        # 39220 <alloc_sarray>
	mov    %rcx,0x10(%rax)
	lea    0x642(%rip),%rcx        # 39360 <alloc_barray>
	mov    %rcx,0x18(%rax)
	lea    0x757(%rip),%rcx        # 39480 <request_virt_sarray>
	mov    %rcx,0x20(%rax)
	lea    0x81c(%rip),%rcx        # 39550 <request_virt_barray>
	mov    %rcx,0x28(%rax)
	lea    0x8e1(%rip),%rcx        # 39620 <realize_virt_arrays>
	mov    %rcx,0x30(%rax)
	lea    0xdc6(%rip),%rcx        # 39b10 <access_virt_sarray>
	mov    %rcx,0x38(%rax)
	lea    0xffb(%rip),%rcx        # 39d50 <access_virt_barray>
	mov    %rcx,0x40(%rax)
	lea    0x1240(%rip),%rcx        # 39fa0 <free_pool>
	mov    %rcx,0x48(%rax)
	lea    0x13c5(%rip),%rcx        # 3a130 <self_destruct>
	mov    %rcx,0x50(%rax)
	movq   $0x3b9aca00,0x60(%rax)
	mov    -0x20(%rbp),%rcx
	mov    %rcx,0x58(%rax)
	mov    $0x1,%ecx
	jmp    38d9e <jinit_memory_mgr+0x10e>
	movslq %ecx,%rdx
	movq   $0x0,0x68(%rax,%rdx,8)
	movq   $0x0,0x78(%rax,%rdx,8)
	add    $0xffffffff,%ecx
	test   %ecx,%ecx
	jns    38d86 <jinit_memory_mgr+0xf6>
	movq   $0x0,0x88(%rax)
	movq   $0x0,0x90(%rax)
	movq   $0xa8,0x98(%rax)
	mov    %rax,0x8(%r15)
	mov    %rax,%r15
	lea    0x22977(%rip),%rdi        # 5b748 <extra_pool_slop+0x10>
	callq  4040 <getenv@plt>
	test   %rax,%rax
	jne    38de1 <jinit_memory_mgr+0x151>
	mov    -0x10(%rbp),%r15
	leaveq 
	retq   
	mov    %rax,%rdi
	movb   $0x78,-0x11(%rbp)
	xor    %eax,%eax
	lea    0x2295f(%rip),%rsi        # 5b750 <extra_pool_slop+0x18>
	lea    -0x20(%rbp),%rdx
	lea    -0x11(%rbp),%rcx
	callq  4370 <sscanf@plt>
	test   %eax,%eax
	jg     38e08 <jinit_memory_mgr+0x178>
	mov    -0x10(%rbp),%r15
	leaveq 
	retq   
	movsbq -0x11(%rbp),%rax
	cmp    $0x6d,%al
	je     38e15 <jinit_memory_mgr+0x185>
	cmp    $0x4d,%al
	jne    38e30 <jinit_memory_mgr+0x1a0>
	mov    -0x20(%rbp),%rax
	lea    (%rax,%rax,4),%rcx
	mov    %rcx,%rax
	shl    $0x5,%rax
	lea    (%rax,%rcx,8),%rax
	lea    (%rax,%rax,4),%rax
	mov    %rax,-0x20(%rbp)
	mov    -0x20(%rbp),%rax
	lea    (%rax,%rax,4),%rcx
	mov    %rcx,%rax
	shl    $0x5,%rax
	lea    (%rax,%rcx,8),%rax
	lea    (%rax,%rax,4),%rax
	mov    %rax,0x58(%r15)
	mov    -0x10(%rbp),%r15
	leaveq 
	retq   
	data16 nopw %cs:0x0(%rax,%rax,1)
	nopl   0x0(%rax)

0038e60 <round_up_pow2>:
	push   %rbp
	mov    %rsp,%rbp
	lea    -0x1(%rsi,%rdi,1),%rcx
	mov    %rsi,%rax
	neg    %rax
	and    %rcx,%rax
	leaveq 
	retq   
	data16 nopw %cs:0x0(%rax,%rax,1)
	nop

0038e80 <out_of_memory>:
	push   %rbp
	mov    %rsp,%rbp
	mov    (%rdi),%rax
	movl   $0x36,0x28(%rax)
	mov    (%rdi),%rax
	mov    %esi,0x2c(%rax)
	mov    (%rdi),%rax
	mov    (%rax),%rax
	callq  *%rax
	leaveq 
	retq   
	xchg   %ax,%ax

0038ea0 <alloc_small>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x40,%rsp
	mov    %r12,-0x20(%rbp)
	mov    %r13,-0x28(%rbp)
	mov    %r14,-0x30(%rbp)
	mov    %r15,-0x38(%rbp)
	mov    0x8(%rdi),%r13
	cmp    $0x3b9aca00,%rdx
	ja     38ed3 <alloc_small+0x33>
	mov    %rsi,%r14
	mov    %rbx,%r15
	mov    %rdi,%rbx
	mov    %rdx,%rdi
	jmp    38ef0 <alloc_small+0x50>
	mov    %rdx,%r12
	mov    %rsi,%r14
	mov    %rbx,%r15
	mov    $0x7,%esi
	mov    %rdi,%rbx
	callq  38e80 <out_of_memory>
	mov    %r12,%rdi
	mov    -0x20(%rbp),%r12
	mov    $0x10,%esi
	callq  38e60 <round_up_pow2>
	lea    0x27(%rax),%rcx
	cmp    $0x3b9aca00,%rcx
	ja     38f0f <alloc_small+0x6f>
	mov    %r13,%rcx
	mov    %rax,%r13
	jmp    38f29 <alloc_small+0x89>
	mov    %r13,%r12
	mov    %rax,%r13
	mov    $0x1,%esi
	mov    %rbx,%rdi
	callq  38e80 <out_of_memory>
	mov    %r12,%rcx
	mov    -0x20(%rbp),%r12
	test   %r14d,%r14d
	js     38f34 <alloc_small+0x94>
	cmp    $0x1,%r14d
	jle    38f5e <alloc_small+0xbe>
	mov    (%rbx),%rax
	movl   $0xe,0x28(%rax)
	mov    (%rbx),%rax
	mov    %r14d,0x2c(%rax)
	mov    (%rbx),%rax
	mov    (%rax),%rax
	mov    %rbx,%rdi
	mov    %rbx,-0x40(%rbp)
	mov    %rcx,%rbx
	callq  *%rax
	mov    %rbx,%rcx
	mov    -0x40(%rbp),%rbx
	movslq %r14d,%rdi
	mov    0x68(%rcx,%rdi,8),%rax
	xor    %edx,%edx
	jmp    38f79 <alloc_small+0xd9>
	mov    0x10(%rax),%rsi
	cmp    %r13,%rsi
	jae    38f7e <alloc_small+0xde>
	mov    %rax,%rdx
	mov    (%rdx),%rax
	test   %rax,%rax
	jne    38f6a <alloc_small+0xca>
	test   %rax,%rax
	jne    3900b <alloc_small+0x16b>
	test   %rdx,%rdx
	je     39059 <alloc_small+0x1b9>
	lea    0x227a1(%rip),%rax        # 5b738 <extra_pool_slop>
	mov    (%rax,%rdi,8),%r12
	jmpq   39064 <alloc_small+0x1c4>
	shr    %r12
	cmp    $0x31,%r12
	ja     38fb4 <alloc_small+0x114>
	mov    %rbx,%rdi
	mov    %r14,%rsi
	callq  38e80 <out_of_memory>
	lea    0x27(%r13,%r12,1),%r15
	mov    %rbx,%rdi
	mov    %r15,%rsi
	callq  4210 <jpeg_get_small@plt>
	test   %rax,%rax
	je     38fa0 <alloc_small+0x100>
	mov    -0x10(%rbp),%rdx
	add    0x98(%rdx),%r15
	mov    -0x40(%rbp),%rsi
	test   %rsi,%rsi
	mov    %r15,0x98(%rdx)
	movq   $0x0,(%rax)
	movq   $0x0,0x8(%rax)
	lea    0x0(%r13,%r12,1),%rcx
	mov    %rcx,0x10(%rax)
	je     3908c <alloc_small+0x1ec>
	mov    %rax,(%rsi)
	mov    -0x18(%rbp),%r15
	mov    -0x20(%rbp),%r12
	lea    0x18(%rax),%rcx
	mov    %rcx,%rdx
	and    $0xf,%rdx
	test   %rdx,%rdx
	je     3902c <alloc_small+0x18c>
	and    $0xf,%rcx
	mov    $0x10,%edx
	sub    %rcx,%rdx
	lea    0x18(%rax,%rdx,1),%rcx
	mov    0x8(%rax),%rsi
	lea    0x0(%r13,%rsi,1),%rdx
	mov    %rdx,0x8(%rax)
	mov    0x10(%rax),%rdx
	sub    %r13,%rdx
	mov    %rdx,0x10(%rax)
	lea    (%rsi,%rcx,1),%rax
	mov    %r15,%rbx
	mov    -0x38(%rbp),%r15
	mov    -0x30(%rbp),%r14
	mov    -0x28(%rbp),%r13
	leaveq 
	retq   
	lea    0x226c8(%rip),%rax        # 5b728 <first_pool_slop>
	mov    (%rax,%rdi,8),%r12
	mov    $0x2,%r14d
	mov    $0x3b9ac9d9,%eax
	sub    %r13,%rax
	cmp    %rax,%r12
	ja     390a2 <alloc_small+0x202>
	mov    %rcx,-0x10(%rbp)
	mov    %rdx,-0x40(%rbp)
	mov    %rdi,-0x8(%rbp)
	mov    %r15,-0x18(%rbp)
	jmpq   38fb4 <alloc_small+0x114>
	mov    -0x8(%rbp),%rcx
	mov    %rax,0x68(%rdx,%rcx,8)
	mov    -0x18(%rbp),%r15
	mov    -0x20(%rbp),%r12
	jmpq   3900b <alloc_small+0x16b>
	mov    %rcx,-0x10(%rbp)
	mov    %rdx,-0x40(%rbp)
	mov    %rdi,-0x8(%rbp)
	mov    %r15,-0x18(%rbp)
	mov    %rax,%r12
	jmpq   38fb4 <alloc_small+0x114>
	nopw   0x0(%rax,%rax,1)

00390c0 <alloc_large>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %r12,-0x10(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %r15,-0x28(%rbp)
	mov    %rbx,-0x8(%rbp)
	mov    0x8(%rdi),%r12
	cmp    $0x3b9aca00,%rdx
	ja     390f7 <alloc_large+0x37>
	mov    %rbx,%r13
	mov    %rsi,%rbx
	mov    %rdi,%r14
	mov    %rdx,%rdi
	jmp    39110 <alloc_large+0x50>
	mov    %rbx,%r13
	mov    %rsi,%rbx
	mov    %rdx,%r15
	mov    $0x8,%esi
	mov    %rdi,%r14
	callq  38e80 <out_of_memory>
	mov    %r15,%rdi
	mov    $0x10,%esi
	callq  38e60 <round_up_pow2>
	lea    0x27(%rax),%rsi
	cmp    $0x3b9aca00,%rsi
	ja     3912c <alloc_large+0x6c>
	mov    %rax,%r15
	jmp    39146 <alloc_large+0x86>
	mov    %rsi,%r13
	mov    %rax,%r15
	mov    $0x3,%esi
	mov    %r14,%rdi
	callq  38e80 <out_of_memory>
	mov    %r13,%rsi
	mov    -0x8(%rbp),%r13
	test   %ebx,%ebx
	js     3914f <alloc_large+0x8f>
	cmp    $0x1,%ebx
	jle    39174 <alloc_large+0xb4>
	mov    (%r14),%rax
	movl   $0xe,0x28(%rax)
	mov    (%r14),%rax
	mov    %ebx,0x2c(%rax)
	mov    (%r14),%rax
	mov    (%rax),%rax
	mov    %rsi,%r13
	mov    %r14,%rdi
	callq  *%rax
	mov    %r13,%rsi
	mov    -0x8(%rbp),%r13
	mov    %r14,%rdi
	callq  40a0 <jpeg_get_large@plt>
	test   %rax,%rax
	jne    39194 <alloc_large+0xd4>
	mov    %r14,%rdi
	mov    %rax,%r14
	mov    $0x4,%esi
	callq  38e80 <out_of_memory>
	mov    %r14,%rax
	mov    0x98(%r12),%rcx
	lea    0x27(%r15,%rcx,1),%rcx
	mov    %rcx,0x98(%r12)
	movslq %ebx,%rdx
	mov    0x78(%r12,%rdx,8),%rcx
	mov    %rcx,(%rax)
	mov    %r15,0x8(%rax)
	movq   $0x0,0x10(%rax)
	mov    %rax,0x78(%r12,%rdx,8)
	lea    0x18(%rax),%rcx
	mov    %rcx,%rdx
	and    $0xf,%rdx
	test   %rdx,%rdx
	jne    391ed <alloc_large+0x12d>
	mov    %rcx,%rax
	mov    %r13,%rbx
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	leaveq 
	retq   
	and    $0xf,%rcx
	mov    $0x10,%edx
	sub    %rcx,%rdx
	lea    0x18(%rax,%rdx,1),%rax
	mov    %r13,%rbx
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	leaveq 
	retq   
	data16 nopw %cs:0x0(%rax,%rax,1)
	xchg   %ax,%ax

0039220 <alloc_sarray>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x50,%rsp
	mov    %rbx,-0x28(%rbp)
	mov    %r12,-0x30(%rbp)
	mov    %r13,-0x38(%rbp)
	mov    %r14,-0x40(%rbp)
	mov    %r15,-0x48(%rbp)
	mov    %rsi,-0x10(%rbp)
	mov    %rdi,-0x8(%rbp)
	mov    0x8(%rdi),%r15
	cmp    $0x3b9aca00,%edx
	ja     3925b <alloc_sarray+0x3b>
	mov    %rsi,%rbx
	mov    %rcx,%r13
	mov    %rdi,%r14
	jmp    39274 <alloc_sarray+0x54>
	mov    %rsi,%rbx
	mov    %rdx,%r12
	mov    %rcx,%r13
	mov    $0x9,%esi
	mov    %rdi,%r14
	callq  38e80 <out_of_memory>
	mov    %r12,%rdx
	mov    %edx,%edi
	mov    $0x20,%esi
	callq  38e60 <round_up_pow2>
	mov    %rax,%rcx
	mov    %ecx,%r8d
	mov    %r8,-0x18(%rbp)
	mov    $0x3b9ac9e8,%eax
	xor    %edx,%edx
	div    %r8
	test   %rax,%rax
	jle    3929e <alloc_sarray+0x7e>
	mov    %rax,%r12
	jmp    392c2 <alloc_sarray+0xa2>
	mov    (%r14),%rdx
	movl   $0x46,0x28(%rdx)
	mov    (%r14),%rdx
	mov    (%rdx),%rdx
	mov    %r14,%rdi
	mov    %rcx,-0x20(%rbp)
	mov    %rax,%r12
	callq  *%rdx
	mov    -0x18(%rbp),%r8
	mov    -0x20(%rbp),%rcx
	mov    %r13d,%eax
	cmp    %rax,%r12
	jl     392cd <alloc_sarray+0xad>
	mov    %r13,%r12
	mov    %r12d,0xa0(%r15)
	mov    %r13d,%edx
	shl    $0x3,%rdx
	mov    %rbx,%rsi
	mov    %rcx,%rbx
	mov    %r8,%r15
	mov    %r14,%rdi
	callq  38ea0 <alloc_small>
	mov    %ebx,%ecx
	mov    %r15,%rdx
	mov    %rcx,%r15
	mov    %r14,%rdi
	mov    %rax,%r14
	xor    %ebx,%ebx
	mov    -0x10(%rbp),%rsi
	jmp    39321 <alloc_sarray+0x101>
	mov    %ebx,%ecx
	mov    %rax,(%r14,%rcx,8)
	add    %r15,%rax
	add    $0x1,%ebx
	add    $0xffffffff,%edx
	test   %edx,%edx
	jne    39302 <alloc_sarray+0xe2>
	mov    -0x8(%rbp),%rdi
	mov    -0x10(%rbp),%rsi
	mov    -0x18(%rbp),%rdx
	cmp    %r13d,%ebx
	jb     3933f <alloc_sarray+0x11f>
	mov    %r14,%rax
	mov    -0x48(%rbp),%r15
	mov    -0x40(%rbp),%r14
	mov    -0x38(%rbp),%r13
	mov    -0x30(%rbp),%r12
	mov    -0x28(%rbp),%rbx
	leaveq 
	retq   
	mov    %r13,%rax
	sub    %ebx,%eax
	cmp    %r12d,%eax
	ja     3934c <alloc_sarray+0x12c>
	mov    %rax,%r12
	mov    %r12d,%eax
	imul   %rax,%rdx
	callq  390c0 <alloc_large>
	mov    %r12,%rdx
	jmp    39311 <alloc_sarray+0xf1>
	nopl   (%rax)

0039360 <alloc_barray>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x50,%rsp
	mov    %r15,-0x48(%rbp)
	mov    %rbx,-0x28(%rbp)
	mov    %r12,-0x30(%rbp)
	mov    %r13,-0x38(%rbp)
	mov    %r14,-0x40(%rbp)
	mov    %rdx,%rbx
	mov    %rcx,%r13
	mov    %rdi,%r14
	mov    %rsi,-0x10(%rbp)
	mov    %r14,-0x8(%rbp)
	mov    0x8(%r14),%r8
	mov    $0x3b9ac9e8,%eax
	mov    %ebx,%r15d
	mov    %r15,-0x18(%rbp)
	mov    %r15,%r9
	shl    $0x7,%r9
	xor    %edx,%edx
	div    %r9
	test   %rax,%rax
	jle    393b3 <alloc_barray+0x53>
	mov    %rax,%r12
	jmp    393e3 <alloc_barray+0x83>
	mov    (%r14),%rcx
	movl   $0x46,0x28(%rcx)
	mov    (%r14),%rcx
	mov    (%rcx),%rcx
	mov    %r14,%rdi
	mov    %rbx,-0x20(%rbp)
	mov    %rsi,%rbx
	mov    %rax,%r12
	mov    %r8,%r15
	callq  *%rcx
	mov    %rbx,%rsi
	mov    %r15,%r8
	mov    -0x18(%rbp),%r15
	mov    -0x20(%rbp),%rbx
	mov    %r13d,%eax
	cmp    %rax,%r12
	jl     393ee <alloc_barray+0x8e>
	mov    %r13,%r12
	mov    %r12d,0xa0(%r8)
	mov    %r13d,%edx
	shl    $0x3,%rdx
	mov    %r14,%rdi
	callq  38ea0 <alloc_small>
	mov    %ebx,%ecx
	shl    $0x7,%rcx
	mov    %r15,%rdx
	mov    %rax,%r15
	mov    %r14,%rdi
	mov    %rcx,%r14
	mov    -0x10(%rbp),%rsi
	xor    %ebx,%ebx
	jmp    3943d <alloc_barray+0xdd>
	mov    %ebx,%ecx
	mov    %rax,(%r15,%rcx,8)
	add    %r14,%rax
	add    $0x1,%ebx
	add    $0xffffffff,%edx
	test   %edx,%edx
	jne    3941e <alloc_barray+0xbe>
	mov    -0x8(%rbp),%rdi
	mov    -0x10(%rbp),%rsi
	mov    -0x18(%rbp),%rdx
	cmp    %r13d,%ebx
	jb     3945b <alloc_barray+0xfb>
	mov    %r15,%rax
	mov    -0x40(%rbp),%r14
	mov    -0x38(%rbp),%r13
	mov    -0x30(%rbp),%r12
	mov    -0x28(%rbp),%rbx
	mov    -0x48(%rbp),%r15
	leaveq 
	retq   
	mov    %r13,%rax
	sub    %ebx,%eax
	cmp    %r12d,%eax
	ja     39468 <alloc_barray+0x108>
	mov    %rax,%r12
	mov    %r12d,%eax
	imul   %rax,%rdx
	shl    $0x7,%rdx
	callq  390c0 <alloc_large>
	mov    %r12,%rdx
	jmp    3942d <alloc_barray+0xcd>
	nopl   (%rax)

0039480 <request_virt_sarray>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x40,%rsp
	mov    %rbx,-0x18(%rbp)
	mov    %r12,-0x20(%rbp)
	mov    %r13,-0x28(%rbp)
	mov    %r14,-0x30(%rbp)
	mov    %r15,-0x38(%rbp)
	mov    0x8(%rdi),%r14
	cmp    $0x1,%esi
	jne    394b0 <request_virt_sarray+0x30>
	mov    %r8,%rbx
	mov    %rcx,%r12
	mov    %r9,%r13
	jmp    394f3 <request_virt_sarray+0x73>
	mov    (%rdi),%rax
	movl   $0xe,0x28(%rax)
	mov    (%rdi),%rax
	mov    %esi,0x2c(%rax)
	mov    (%rdi),%rax
	mov    (%rax),%rax
	mov    %rdi,%rbx
	mov    %rdx,-0x10(%rbp)
	mov    %r14,-0x8(%rbp)
	mov    %rcx,%r12
	mov    %r9,%r13
	mov    %rdi,%r14
	mov    %rbx,%rdi
	mov    %r8,%rbx
	mov    %rsi,%r15
	callq  *%rax
	mov    %r15,%rsi
	mov    %r14,%rdi
	mov    -0x8(%rbp),%r14
	mov    -0x10(%rbp),%rdx
	mov    %rdx,%r15
	mov    $0x98,%edx
	callq  38ea0 <alloc_small>
	movq   $0x0,(%rax)
	mov    %ebx,0x8(%rax)
	mov    %r12d,0xc(%rax)
	mov    %r13d,0x10(%rax)
	mov    %r15d,0x24(%rax)
	movl   $0x0,0x2c(%rax)
	mov    0x88(%r14),%rcx
	mov    %rcx,0x30(%rax)
	mov    %rax,0x88(%r14)
	mov    -0x38(%rbp),%r15
	mov    -0x30(%rbp),%r14
	mov    -0x28(%rbp),%r13
	mov    -0x20(%rbp),%r12
	mov    -0x18(%rbp),%rbx
	leaveq 
	retq   
	data16 nopw %cs:0x0(%rax,%rax,1)

0039550 <request_virt_barray>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x40,%rsp
	mov    %rbx,-0x18(%rbp)
	mov    %r12,-0x20(%rbp)
	mov    %r13,-0x28(%rbp)
	mov    %r14,-0x30(%rbp)
	mov    %r15,-0x38(%rbp)
	mov    0x8(%rdi),%r14
	cmp    $0x1,%esi
	jne    39580 <request_virt_barray+0x30>
	mov    %r8,%rbx
	mov    %rcx,%r12
	mov    %r9,%r13
	jmp    395c3 <request_virt_barray+0x73>
	mov    (%rdi),%rax
	movl   $0xe,0x28(%rax)
	mov    (%rdi),%rax
	mov    %esi,0x2c(%rax)
	mov    (%rdi),%rax
	mov    (%rax),%rax
	mov    %rdi,%rbx
	mov    %rdx,-0x10(%rbp)
	mov    %r14,-0x8(%rbp)
	mov    %rcx,%r12
	mov    %r9,%r13
	mov    %rdi,%r14
	mov    %rbx,%rdi
	mov    %r8,%rbx
	mov    %rsi,%r15
	callq  *%rax
	mov    %r15,%rsi
	mov    %r14,%rdi
	mov    -0x8(%rbp),%r14
	mov    -0x10(%rbp),%rdx
	mov    %rdx,%r15
	mov    $0x98,%edx
	callq  38ea0 <alloc_small>
	movq   $0x0,(%rax)
	mov    %ebx,0x8(%rax)
	mov    %r12d,0xc(%rax)
	mov    %r13d,0x10(%rax)
	mov    %r15d,0x24(%rax)
	movl   $0x0,0x2c(%rax)
	mov    0x90(%r14),%rcx
	mov    %rcx,0x30(%rax)
	mov    %rax,0x90(%r14)
	mov    -0x38(%rbp),%r15
	mov    -0x30(%rbp),%r14
	mov    -0x28(%rbp),%r13
	mov    -0x20(%rbp),%r12
	mov    -0x18(%rbp),%rbx
	leaveq 
	retq   
	data16 nopw %cs:0x0(%rax,%rax,1)

0039620 <realize_virt_arrays>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x40,%rsp
	mov    %rdi,-0x40(%rbp)
	mov    %rbx,-0x8(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %r15,-0x28(%rbp)
	mov    0x8(%rdi),%rax
	mov    %rax,-0x30(%rbp)
	mov    0x88(%rax),%rax
	mov    %rdi,%rbx
	mov    $0xa,%esi
	xor    %r12d,%r12d
	mov    %r12,%r13
	jmp    39689 <realize_virt_arrays+0x69>
	mov    %rax,-0x38(%rbp)
	mov    %rbx,%rdi
	mov    %rdx,%rbx
	callq  38e80 <out_of_memory>
	mov    $0xa,%esi
	mov    -0x38(%rbp),%rax
	imul   %rbx,%r14
	add    %r14,%r13
	add    %r15,%r12
	mov    0x30(%rax),%rax
	mov    -0x40(%rbp),%rbx
	test   %rax,%rax
	jne    396a3 <realize_virt_arrays+0x83>
	mov    -0x30(%rbp),%rax
	mov    0x90(%rax),%rax
	mov    $0xb,%esi
	jmpq   39725 <realize_virt_arrays+0x105>
	mov    (%rax),%rcx
	test   %rcx,%rcx
	jne    39681 <realize_virt_arrays+0x61>
	mov    0x10(%rax),%edx
	mov    0xc(%rax),%r14d
	mov    0x8(%rax),%ecx
	mov    %r14,%r15
	imul   %rcx,%r15
	mov    %r12,%rcx
	not    %rcx
	cmp    %rcx,%r15
	ja     3965f <realize_virt_arrays+0x3f>
	mov    %rdx,%rbx
	jmp    39677 <realize_virt_arrays+0x57>
	mov    (%rax),%rcx
	test   %rcx,%rcx
	jne    39721 <realize_virt_arrays+0x101>
	mov    0x10(%rax),%ecx
	mov    0xc(%rax),%r14d
	mov    0x8(%rax),%edx
	mov    %r14,%r15
	imul   %rdx,%r15
	shl    $0x7,%r15
	mov    %r12,%rdx
	not    %rdx
	cmp    %r15,%rdx
	jae    39713 <realize_virt_arrays+0xf3>
	mov    %rax,-0x38(%rbp)
	mov    %rbx,%rdi
	mov    %rcx,%rbx
	callq  38e80 <out_of_memory>
	mov    %rbx,%rcx
	mov    $0xb,%esi
	mov    -0x38(%rbp),%rax
	mov    -0x40(%rbp),%rbx
	imul   %rcx,%r14
	shl    $0x7,%r14
	add    %r14,%r13
	add    %r15,%r12
	mov    0x30(%rax),%rax
	test   %rax,%rax
	jne    396cc <realize_virt_arrays+0xac>
	test   %r13,%r13
	jne    39745 <realize_virt_arrays+0x125>
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	leaveq 
	retq   
	mov    $0x1,%r15d
	mov    -0x30(%rbp),%r14
	mov    0x98(%r14),%rcx
	mov    %rbx,%rdi
	mov    %r13,%rsi
	mov    %r12,%rdx
	callq  4280 <jpeg_mem_available@plt>
	cmp    %rax,%r12
	ja     39778 <realize_virt_arrays+0x158>
	mov    $0x3b9aca00,%r12d
	mov    0x88(%r14),%r13
	jmp    397cd <realize_virt_arrays+0x1ad>
	xor    %edx,%edx
	div    %r13
	test   %rax,%rax
	je     397de <realize_virt_arrays+0x1be>
	mov    %rax,%r12
	jmp    3976f <realize_virt_arrays+0x14f>
	mov    0x8(%r13),%eax
	mov    %eax,0x14(%r13)
	mov    0xc(%r13),%edx
	mov    0x14(%r13),%ecx
	mov    %rbx,%rdi
	mov    %r15,%rsi
	callq  39220 <alloc_sarray>
	mov    %rax,0x0(%r13)
	mov    0xa0(%r14),%eax
	mov    %eax,0x18(%r13)
	movl   $0x0,0x1c(%r13)
	movl   $0x0,0x20(%r13)
	movl   $0x0,0x28(%r13)
	mov    0x30(%r13),%r13
	test   %r13,%r13
	jne    397e3 <realize_virt_arrays+0x1c3>
	mov    0x90(%r14),%r13
	jmpq   3987d <realize_virt_arrays+0x25d>
	mov    %r15,%r12
	jmp    3976f <realize_virt_arrays+0x14f>
	mov    0x0(%r13),%rax
	test   %rax,%rax
	jne    397c9 <realize_virt_arrays+0x1a9>
	mov    0x8(%r13),%eax
	add    $0xffffffffffffffff,%rax
	mov    0x10(%r13),%ecx
	cqto   
	idiv   %rcx
	add    $0x1,%rax
	cmp    %r12,%rax
	jbe    39787 <realize_virt_arrays+0x167>
	mov    %r12,%rax
	imul   0x10(%r13),%eax
	mov    %eax,0x14(%r13)
	mov    0xc(%r13),%edx
	mov    0x8(%r13),%eax
	imul   %rax,%rdx
	lea    0x38(%r13),%rsi
	mov    %rbx,%rdi
	callq  43a0 <jpeg_open_backing_store@plt>
	movl   $0x1,0x2c(%r13)
	jmpq   3978f <realize_virt_arrays+0x16f>
	mov    0x8(%r13),%eax
	mov    %eax,0x14(%r13)
	mov    0xc(%r13),%edx
	mov    0x14(%r13),%ecx
	mov    %rbx,%rdi
	mov    %r15,%rsi
	callq  39360 <alloc_barray>
	mov    %rax,0x0(%r13)
	mov    0xa0(%r14),%eax
	mov    %eax,0x18(%r13)
	movl   $0x0,0x1c(%r13)
	movl   $0x0,0x20(%r13)
	movl   $0x0,0x28(%r13)
	mov    0x30(%r13),%r13
	test   %r13,%r13
	jne    39898 <realize_virt_arrays+0x278>
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	leaveq 
	retq   
	mov    0x0(%r13),%rax
	test   %rax,%rax
	jne    39879 <realize_virt_arrays+0x259>
	mov    0x8(%r13),%eax
	add    $0xffffffffffffffff,%rax
	mov    0x10(%r13),%ecx
	cqto   
	idiv   %rcx
	add    $0x1,%rax
	cmp    %rax,%r12
	jae    39837 <realize_virt_arrays+0x217>
	mov    %r12,%rax
	imul   0x10(%r13),%eax
	mov    %eax,0x14(%r13)
	mov    0xc(%r13),%edx
	mov    0x8(%r13),%eax
	imul   %rax,%rdx
	shl    $0x7,%rdx
	lea    0x38(%r13),%rsi
	mov    %rbx,%rdi
	callq  43a0 <jpeg_open_backing_store@plt>
	movl   $0x1,0x2c(%r13)
	jmpq   3983f <realize_virt_arrays+0x21f>
	data16 nopw %cs:0x0(%rax,%rax,1)
	nop

0039900 <do_sarray_io>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x40,%rsp
	mov    %rdx,-0x30(%rbp)
	mov    %rdi,-0x38(%rbp)
	mov    %rbx,-0x8(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %r15,-0x28(%rbp)
	mov    0xc(%rsi),%r15d
	mov    0x1c(%rsi),%eax
	mov    %r15,%r13
	imul   %rax,%r13
	mov    %rsi,%r14
	lea    0x38(%r14),%rsi
	mov    %rsi,-0x40(%rbp)
	xor    %r12d,%r12d
	jmp    3996b <do_sarray_io+0x6b>
	mov    (%r14),%rax
	mov    (%rax,%r12,8),%rdx
	mov    0x40(%r14),%rax
	mov    %r13,%rcx
	mov    %rbx,%r8
	callq  *%rax
	mov    0x18(%r14),%eax
	add    %rax,%r12
	add    %rbx,%r13
	mov    -0x38(%rbp),%rdi
	mov    -0x40(%rbp),%rsi
	mov    -0x30(%rbp),%rdx
	mov    0x14(%r14),%eax
	cmp    %r12,%rax
	jg     3998a <do_sarray_io+0x8a>
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	leaveq 
	retq   
	sub    %r12,%rax
	mov    0x18(%r14),%ecx
	cmp    %rcx,%rax
	jg     39999 <do_sarray_io+0x99>
	mov    %rax,%rcx
	mov    0x1c(%r14),%eax
	lea    (%rax,%r12,1),%r8
	mov    0x20(%r14),%eax
	sub    %r8,%rax
	cmp    %rcx,%rax
	jg     399b0 <do_sarray_io+0xb0>
	mov    %rax,%rcx
	mov    0x8(%r14),%ebx
	sub    %r8,%rbx
	cmp    %rcx,%rbx
	jle    399bf <do_sarray_io+0xbf>
	mov    %rcx,%rbx
	test   %rbx,%rbx
	jle    399e7 <do_sarray_io+0xe7>
	imul   %r15,%rbx
	test   %edx,%edx
	jne    39942 <do_sarray_io+0x42>
	mov    (%r14),%rax
	mov    (%rax,%r12,8),%rdx
	mov    (%rsi),%rax
	mov    %r13,%rcx
	mov    %rbx,%r8
	callq  *%rax
	jmpq   39955 <do_sarray_io+0x55>
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	leaveq 
	retq   
	nopl   (%rax)

0039a00 <do_barray_io>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x40,%rsp
	mov    %rdx,-0x30(%rbp)
	mov    %rdi,-0x38(%rbp)
	mov    %rbx,-0x8(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %r15,-0x28(%rbp)
	mov    0xc(%rsi),%r12d
	mov    %r12,%r15
	shl    $0x7,%r15
	mov    0x1c(%rsi),%eax
	imul   %rax,%r12
	shl    $0x7,%r12
	mov    %rsi,%r14
	lea    0x38(%r14),%rsi
	mov    %rsi,-0x40(%rbp)
	xor    %r13d,%r13d
	jmp    39a73 <do_barray_io+0x73>
	mov    (%r14),%rax
	mov    (%rax,%r13,8),%rdx
	mov    0x40(%r14),%rax
	mov    %r12,%rcx
	mov    %rbx,%r8
	callq  *%rax
	mov    0x18(%r14),%eax
	add    %rax,%r13
	add    %rbx,%r12
	mov    -0x38(%rbp),%rdi
	mov    -0x40(%rbp),%rsi
	mov    -0x30(%rbp),%rdx
	mov    0x14(%r14),%eax
	cmp    %r13,%rax
	jg     39a92 <do_barray_io+0x92>
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	leaveq 
	retq   
	sub    %r13,%rax
	mov    0x18(%r14),%ecx
	cmp    %rcx,%rax
	jg     39aa1 <do_barray_io+0xa1>
	mov    %rax,%rcx
	mov    0x1c(%r14),%eax
	lea    (%rax,%r13,1),%r8
	mov    0x20(%r14),%eax
	sub    %r8,%rax
	cmp    %rcx,%rax
	jg     39ab8 <do_barray_io+0xb8>
	mov    %rax,%rcx
	mov    0x8(%r14),%ebx
	sub    %r8,%rbx
	cmp    %rcx,%rbx
	jle    39ac7 <do_barray_io+0xc7>
	mov    %rcx,%rbx
	test   %rbx,%rbx
	jle    39aef <do_barray_io+0xef>
	imul   %r15,%rbx
	test   %edx,%edx
	jne    39a4a <do_barray_io+0x4a>
	mov    (%r14),%rax
	mov    (%rax,%r13,8),%rdx
	mov    (%rsi),%rax
	mov    %r12,%rcx
	mov    %rbx,%r8
	callq  *%rax
	jmpq   39a5d <do_barray_io+0x5d>
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	leaveq 
	retq   
	data16 nopw %cs:0x0(%rax,%rax,1)

0039b10 <access_virt_sarray>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %rbx,-0x8(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %r15,-0x28(%rbp)
	lea    (%rcx,%rdx,1),%r9d
	mov    0x8(%rsi),%eax
	cmp    %r9d,%eax
	jb     39b65 <access_virt_sarray+0x55>
	cmp    0x10(%rsi),%ecx
	ja     39b65 <access_virt_sarray+0x55>
	mov    (%rsi),%rax
	test   %rax,%rax
	je     39b65 <access_virt_sarray+0x55>
	mov    %r15,%rax
	mov    %rdi,%r15
	mov    %r13,%rcx
	mov    %r9,%r13
	mov    %r12,%r9
	mov    %rsi,%r12
	mov    %rbx,%r10
	mov    %rdx,%rbx
	mov    %r14,%r11
	mov    %r8,%r14
	jmp    39b9a <access_virt_sarray+0x8a>
	mov    (%rdi),%rax
	movl   $0x16,0x28(%rax)
	mov    (%rdi),%rax
	mov    (%rax),%rax
	mov    %rdx,%rbx
	mov    %rsi,%r12
	mov    %r9,%r13
	mov    %r8,%r14
	mov    %rdi,%r15
	callq  *%rax
	mov    -0x28(%rbp),%rax
	mov    -0x20(%rbp),%r11
	mov    -0x18(%rbp),%rcx
	mov    -0x10(%rbp),%r9
	mov    -0x8(%rbp),%r10
	mov    0x1c(%r12),%edx
	cmp    %edx,%ebx
	jb     39bad <access_virt_sarray+0x9d>
	add    0x14(%r12),%edx
	cmp    %edx,%r13d
	jbe    39c1d <access_virt_sarray+0x10d>
	movslq 0x2c(%r12),%rax
	test   %eax,%eax
	jne    39bcb <access_virt_sarray+0xbb>
	mov    (%r15),%rax
	movl   $0x45,0x28(%rax)
	mov    (%r15),%rax
	mov    (%rax),%rax
	mov    %r15,%rdi
	callq  *%rax
	movslq 0x28(%r12),%rax
	test   %eax,%eax
	je     39bed <access_virt_sarray+0xdd>
	mov    $0x1,%edx
	mov    %r15,%rdi
	mov    %r12,%rsi
	callq  39900 <do_sarray_io>
	movl   $0x0,0x28(%r12)
	xor    %edx,%edx
	cmp    0x1c(%r12),%ebx
	jbe    39c5a <access_virt_sarray+0x14a>
	mov    %rbx,%rax
	mov    %eax,0x1c(%r12)
	mov    %r15,%rdi
	mov    %r12,%rsi
	callq  39900 <do_sarray_io>
	mov    -0x28(%rbp),%rax
	mov    -0x20(%rbp),%r11
	mov    -0x18(%rbp),%rcx
	mov    -0x10(%rbp),%r9
	mov    -0x8(%rbp),%r10
	mov    0x20(%r12),%edx
	cmp    %edx,%r13d
	ja     39c6f <access_virt_sarray+0x15f>
	test   %r14d,%r14d
	je     39c35 <access_virt_sarray+0x125>
	movl   $0x1,0x28(%r12)
	mov    0x1c(%r12),%edx
	sub    %edx,%ebx
	mov    %ebx,%edx
	shl    $0x3,%rdx
	add    (%r12),%rdx
	mov    %r10,%rbx
	mov    %r9,%r12
	mov    %rcx,%r13
	mov    %r11,%r14
	mov    %rax,%r15
	mov    %rdx,%rax
	leaveq 
	retq   
	mov    %r13d,%eax
	mov    0x14(%r12),%ecx
	sub    %rcx,%rax
	test   %rax,%rax
	jns    39bf9 <access_virt_sarray+0xe9>
	mov    %rdx,%rax
	jmp    39bf9 <access_virt_sarray+0xe9>
	cmp    %edx,%ebx
	ja     39cbd <access_virt_sarray+0x1ad>
	test   %r14d,%r14d
	je     39c7d <access_virt_sarray+0x16d>
	mov    %r13d,0x20(%r12)
	movslq 0x24(%r12),%rsi
	test   %esi,%esi
	jne    39cc7 <access_virt_sarray+0x1b7>
	test   %r14d,%r14d
	jne    39c27 <access_virt_sarray+0x117>
	mov    (%r15),%rax
	movl   $0x16,0x28(%rax)
	mov    (%r15),%rax
	mov    (%rax),%rax
	mov    %r15,%rdi
	mov    %r10,%r15
	mov    %r9,%r13
	callq  *%rax
	mov    %r13,%r9
	mov    %r15,%r10
	mov    -0x28(%rbp),%rax
	mov    -0x20(%rbp),%r11
	mov    -0x18(%rbp),%rcx
	jmpq   39c27 <access_virt_sarray+0x117>
	test   %r14d,%r14d
	jne    39ce3 <access_virt_sarray+0x1d3>
	mov    %rbx,%rdx
	jmp    39c73 <access_virt_sarray+0x163>
	mov    0xc(%r12),%ecx
	mov    0x1c(%r12),%eax
	sub    %eax,%r13d
	mov    %rdx,%r15
	sub    %eax,%r15d
	mov    %r14,-0x30(%rbp)
	mov    %rcx,%r14
	jmp    39d2b <access_virt_sarray+0x21b>
	mov    (%r15),%rax
	movl   $0x16,0x28(%rax)
	mov    (%r15),%rax
	mov    (%rax),%rax
	mov    %r15,%rdi
	callq  *%rax
	mov    -0x28(%rbp),%rax
	mov    -0x20(%rbp),%r11
	mov    -0x18(%rbp),%rcx
	mov    -0x10(%rbp),%r9
	mov    -0x8(%rbp),%r10
	mov    %rbx,%rdx
	jmpq   39c73 <access_virt_sarray+0x163>
	mov    (%r12),%rcx
	mov    %r15d,%eax
	mov    (%rcx,%rax,8),%rdi
	mov    %r14,%rsi
	callq  44d0 <jzero_far@plt>
	add    $0x1,%r15d
	cmp    %r13d,%r15d
	jb     39d14 <access_virt_sarray+0x204>
	mov    -0x30(%rbp),%r14
	mov    -0x28(%rbp),%rax
	mov    -0x20(%rbp),%r11
	mov    -0x18(%rbp),%rcx
	mov    -0x10(%rbp),%r9
	mov    -0x8(%rbp),%r10
	jmpq   39c27 <access_virt_sarray+0x117>
	nopl   (%rax)

0039d50 <access_virt_barray>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %rbx,-0x8(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %r15,-0x28(%rbp)
	lea    (%rcx,%rdx,1),%r9d
	mov    0x8(%rsi),%eax
	cmp    %r9d,%eax
	jb     39da5 <access_virt_barray+0x55>
	cmp    0x10(%rsi),%ecx
	ja     39da5 <access_virt_barray+0x55>
	mov    (%rsi),%rax
	test   %rax,%rax
	je     39da5 <access_virt_barray+0x55>
	mov    %r15,%rax
	mov    %rdi,%r15
	mov    %r13,%rcx
	mov    %r9,%r13
	mov    %r12,%r9
	mov    %rsi,%r12
	mov    %rbx,%r10
	mov    %rdx,%rbx
	mov    %r14,%r11
	mov    %r8,%r14
	jmp    39dda <access_virt_barray+0x8a>
	mov    (%rdi),%rax
	movl   $0x16,0x28(%rax)
	mov    (%rdi),%rax
	mov    (%rax),%rax
	mov    %rdx,%rbx
	mov    %rsi,%r12
	mov    %r9,%r13
	mov    %r8,%r14
	mov    %rdi,%r15
	callq  *%rax
	mov    -0x28(%rbp),%rax
	mov    -0x20(%rbp),%r11
	mov    -0x18(%rbp),%rcx
	mov    -0x10(%rbp),%r9
	mov    -0x8(%rbp),%r10
	mov    0x1c(%r12),%edx
	cmp    %edx,%ebx
	jb     39ded <access_virt_barray+0x9d>
	add    0x14(%r12),%edx
	cmp    %edx,%r13d
	jbe    39e5d <access_virt_barray+0x10d>
	movslq 0x2c(%r12),%rax
	test   %eax,%eax
	jne    39e0b <access_virt_barray+0xbb>
	mov    (%r15),%rax
	movl   $0x45,0x28(%rax)
	mov    (%r15),%rax
	mov    (%rax),%rax
	mov    %r15,%rdi
	callq  *%rax
	movslq 0x28(%r12),%rax
	test   %eax,%eax
	je     39e2d <access_virt_barray+0xdd>
	mov    $0x1,%edx
	mov    %r15,%rdi
	mov    %r12,%rsi
	callq  39a00 <do_barray_io>
	movl   $0x0,0x28(%r12)
	xor    %edx,%edx
	cmp    0x1c(%r12),%ebx
	jbe    39e9a <access_virt_barray+0x14a>
	mov    %rbx,%rax
	mov    %eax,0x1c(%r12)
	mov    %r15,%rdi
	mov    %r12,%rsi
	callq  39a00 <do_barray_io>
	mov    -0x28(%rbp),%rax
	mov    -0x20(%rbp),%r11
	mov    -0x18(%rbp),%rcx
	mov    -0x10(%rbp),%r9
	mov    -0x8(%rbp),%r10
	mov    0x20(%r12),%edx
	cmp    %edx,%r13d
	ja     39eaf <access_virt_barray+0x15f>
	test   %r14d,%r14d
	je     39e75 <access_virt_barray+0x125>
	movl   $0x1,0x28(%r12)
	mov    0x1c(%r12),%edx
	sub    %edx,%ebx
	mov    %ebx,%edx
	shl    $0x3,%rdx
	add    (%r12),%rdx
	mov    %r10,%rbx
	mov    %r9,%r12
	mov    %rcx,%r13
	mov    %r11,%r14
	mov    %rax,%r15
	mov    %rdx,%rax
	leaveq 
	retq   
	mov    %r13d,%eax
	mov    0x14(%r12),%ecx
	sub    %rcx,%rax
	test   %rax,%rax
	jns    39e39 <access_virt_barray+0xe9>
	mov    %rdx,%rax
	jmp    39e39 <access_virt_barray+0xe9>
	cmp    %edx,%ebx
	ja     39efd <access_virt_barray+0x1ad>
	test   %r14d,%r14d
	je     39ebd <access_virt_barray+0x16d>
	mov    %r13d,0x20(%r12)
	movslq 0x24(%r12),%rsi
	test   %esi,%esi
	jne    39f07 <access_virt_barray+0x1b7>
	test   %r14d,%r14d
	jne    39e67 <access_virt_barray+0x117>
	mov    (%r15),%rax
	movl   $0x16,0x28(%rax)
	mov    (%r15),%rax
	mov    (%rax),%rax
	mov    %r15,%rdi
	mov    %r9,%r15
	mov    %r10,%r13
	callq  *%rax
	mov    %r15,%r9
	mov    %r13,%r10
	mov    -0x28(%rbp),%rax
	mov    -0x20(%rbp),%r11
	mov    -0x18(%rbp),%rcx
	jmpq   39e67 <access_virt_barray+0x117>
	test   %r14d,%r14d
	jne    39f27 <access_virt_barray+0x1d7>
	mov    %rbx,%rdx
	jmp    39eb3 <access_virt_barray+0x163>
	mov    0xc(%r12),%eax
	shl    $0x7,%rax
	mov    0x1c(%r12),%ecx
	sub    %ecx,%r13d
	mov    %rdx,%r15
	sub    %ecx,%r15d
	mov    %r14,-0x30(%rbp)
	mov    %rax,%r14
	jmp    39f6f <access_virt_barray+0x21f>
	mov    (%r15),%rax
	movl   $0x16,0x28(%rax)
	mov    (%r15),%rax
	mov    (%rax),%rax
	mov    %r15,%rdi
	callq  *%rax
	mov    -0x28(%rbp),%rax
	mov    -0x20(%rbp),%r11
	mov    -0x18(%rbp),%rcx
	mov    -0x10(%rbp),%r9
	mov    -0x8(%rbp),%r10
	mov    %rbx,%rdx
	jmpq   39eb3 <access_virt_barray+0x163>
	mov    (%r12),%rcx
	mov    %r15d,%eax
	mov    (%rcx,%rax,8),%rdi
	mov    %r14,%rsi
	callq  44d0 <jzero_far@plt>
	add    $0x1,%r15d
	cmp    %r13d,%r15d
	jb     39f58 <access_virt_barray+0x208>
	mov    -0x30(%rbp),%r14
	mov    -0x28(%rbp),%rax
	mov    -0x20(%rbp),%r11
	mov    -0x18(%rbp),%rcx
	mov    -0x10(%rbp),%r9
	mov    -0x8(%rbp),%r10
	jmpq   39e67 <access_virt_barray+0x117>
	data16 nopw %cs:0x0(%rax,%rax,1)
	nopl   0x0(%rax)

0039fa0 <free_pool>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %r13,-0x8(%rbp)
	mov    %r14,-0x10(%rbp)
	mov    %r15,-0x18(%rbp)
	mov    0x8(%rdi),%r13
	mov    %r13,-0x28(%rbp)
	test   %esi,%esi
	js     39fd0 <free_pool+0x30>
	cmp    $0x1,%esi
	jg     39fd0 <free_pool+0x30>
	mov    %r12,%r14
	mov    %rdi,%r12
	mov    %rsi,%r15
	jmp    39ff1 <free_pool+0x51>
	mov    (%rdi),%rax
	movl   $0xe,0x28(%rax)
	mov    (%rdi),%rax
	mov    %esi,0x2c(%rax)
	mov    (%rdi),%rax
	mov    (%rax),%rax
	mov    %r12,%r14
	mov    %rsi,%r15
	mov    %rdi,%r12
	callq  *%rax
	cmp    $0x1,%r15d
	je     3a012 <free_pool+0x72>
	movslq %r15d,%rax
	mov    %rax,-0x28(%rbp)
	mov    0x78(%r13,%rax,8),%rsi
	movq   $0x0,0x78(%r13,%rax,8)
	mov    %r14,-0x20(%rbp)
	jmp    3a04e <free_pool+0xae>
	mov    0x88(%r13),%r13
	mov    %r15,-0x20(%rbp)
	jmp    3a088 <free_pool+0xe8>
	mov    (%rsi),%r15
	mov    0x10(%rsi),%rcx
	mov    0x8(%rsi),%rax
	lea    0x18(%rcx,%rax,1),%r14
	mov    %r12,%rdi
	mov    %r14,%rdx
	callq  4180 <jpeg_free_large@plt>
	mov    0x98(%r13),%rax
	sub    %r14,%rax
	mov    %rax,0x98(%r13)
	mov    %r15,%rsi
	test   %rsi,%rsi
	jne    3a01f <free_pool+0x7f>
	mov    -0x28(%rbp),%rax
	mov    0x68(%r13,%rax,8),%rsi
	movq   $0x0,0x68(%r13,%rax,8)
	jmp    3a0d4 <free_pool+0x134>
	movslq 0x2c(%r13),%rax
	test   %eax,%eax
	je     3a084 <free_pool+0xe4>
	movl   $0x0,0x2c(%r13)
	mov    0x48(%r13),%rax
	lea    0x38(%r13),%rsi
	mov    %r12,%rdi
	callq  *%rax
	mov    0x30(%r13),%r13
	test   %r13,%r13
	jne    3a067 <free_pool+0xc7>
	mov    -0x28(%rbp),%rax
	mov    0x90(%rax),%r13
	movq   $0x0,0x88(%rax)
	jmp    3a10c <free_pool+0x16c>
	mov    (%rsi),%r15
	mov    0x10(%rsi),%rcx
	mov    0x8(%rsi),%rax
	lea    0x18(%rcx,%rax,1),%r14
	mov    %r12,%rdi
	mov    %r14,%rdx
	callq  4340 <jpeg_free_small@plt>
	mov    0x98(%r13),%rax
	sub    %r14,%rax
	mov    %rax,0x98(%r13)
	mov    %r15,%rsi
	test   %rsi,%rsi
	jne    3a0a5 <free_pool+0x105>
	mov    -0x20(%rbp),%r12
	mov    -0x18(%rbp),%r15
	mov    -0x10(%rbp),%r14
	mov    -0x8(%rbp),%r13
	leaveq 
	retq   
	movslq 0x2c(%r13),%rax
	test   %eax,%eax
	je     3a108 <free_pool+0x168>
	movl   $0x0,0x2c(%r13)
	mov    0x48(%r13),%rax
	lea    0x38(%r13),%rsi
	mov    %r12,%rdi
	callq  *%rax
	mov    0x30(%r13),%r13
	test   %r13,%r13
	jne    3a0eb <free_pool+0x14b>
	mov    -0x28(%rbp),%r13
	movq   $0x0,0x90(%r13)
	mov    -0x20(%rbp),%r15
	jmpq   39ff7 <free_pool+0x57>
	nopl   0x0(%rax)

003a130 <self_destruct>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %r14,-0x8(%rbp)
	mov    %r15,-0x10(%rbp)
	mov    %rdi,%r14
	mov    $0x1,%r15d
	jmp    3a15a <self_destruct+0x2a>
	mov    %r14,%rdi
	mov    %r15,%rsi
	callq  39fa0 <free_pool>
	add    $0xffffffff,%r15d
	test   %r15d,%r15d
	jns    3a14b <self_destruct+0x1b>
	mov    0x8(%r14),%rsi
	mov    $0xa8,%edx
	mov    %r14,%rdi
	callq  4340 <jpeg_free_small@plt>
	mov    %r14,%rdi
	movq   $0x0,0x8(%rdi)
	callq  4350 <jpeg_mem_term@plt>
	mov    -0x10(%rbp),%r15
	mov    -0x8(%rbp),%r14
	leaveq 
	retq   
	nopw   0x0(%rax,%rax,1)

003a190 <jpeg_get_small>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rsi,%rdi
	callq  4320 <malloc@plt>
	leaveq 
	retq   
	xchg   %ax,%ax

003a1a0 <jpeg_free_small>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rsi,%rdi
	callq  4060 <free@plt>
	leaveq 
	retq   
	xchg   %ax,%ax

003a1b0 <jpeg_get_large>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rsi,%rdi
	callq  4320 <malloc@plt>
	leaveq 
	retq   
	xchg   %ax,%ax

003a1c0 <jpeg_free_large>:
	push   %rbp
	mov    %rsp,%rbp
	mov    %rsi,%rdi
	callq  4060 <free@plt>
	leaveq 
	retq   
	xchg   %ax,%ax

003a1d0 <jpeg_mem_available>:
	push   %rbp
	mov    %rsp,%rbp
	mov    0x8(%rdi),%rax
	mov    0x58(%rax),%rax
	test   %rax,%rax
	jne    3a1e6 <jpeg_mem_available+0x16>
	mov    %rdx,%rax
	leaveq 
	retq   
	cmp    %rax,%rcx
	jb     3a1ef <jpeg_mem_available+0x1f>
	xor    %eax,%eax
	leaveq 
	retq   
	sub    %rcx,%rax
	leaveq 
	retq   
	data16 nopw %cs:0x0(%rax,%rax,1)
	nop

003a200 <jpeg_open_backing_store>:
	push   %rbp
	mov    %rsp,%rbp
	mov    (%rdi),%rax
	movl   $0x31,0x28(%rax)
	mov    (%rdi),%rax
	mov    (%rax),%rax
	callq  *%rax
	leaveq 
	retq   
	nopl   0x0(%rax,%rax,1)

003a220 <jpeg_mem_init>:
	push   %rbp
	mov    %rsp,%rbp
	xor    %eax,%eax
	leaveq 
	retq   
	nopl   0x0(%rax,%rax,1)

003a230 <jpeg_mem_term>:
	push   %rbp
	mov    %rsp,%rbp
	leaveq 
	retq   
	nopw   %cs:0x0(%rax,%rax,1)

003a240 <jinit_arith_encoder>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %r15,-0x8(%rbp)
	mov    0x8(%rdi),%rax
	mov    (%rax),%rax
	mov    $0x1,%esi
	mov    $0x170,%edx
	mov    %rdi,%r15
	callq  *%rax
	mov    %rax,0x1f0(%r15)
	lea    0x17b0(%rip),%rcx        # 3ba20 <start_pass>
	mov    %rcx,(%rax)
	lea    0x96(%rip),%rcx        # 3a310 <finish_pass>
	mov    %rcx,0x10(%rax)
	xor    %ecx,%ecx
	jmp    3a29d <jinit_arith_encoder+0x5d>
	movslq %ecx,%rdx
	movq   $0x0,0x68(%rax,%rdx,8)
	movq   $0x0,0xe8(%rax,%rdx,8)
	add    $0x1,%ecx
	cmp    $0xf,%ecx
	jle    3a282 <jinit_arith_encoder+0x42>
	movb   $0x71,0x168(%rax)
	mov    -0x8(%rbp),%r15
	leaveq 
	retq   
	nop

003a2b0 <emit_byte>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    0x28(%rsi),%rcx
	mov    (%rcx),%rax
	lea    0x1(%rax),%rdx
	mov    %rdx,(%rcx)
	mov    %dil,(%rax)
	mov    0x8(%rcx),%rax
	add    $0xffffffffffffffff,%rax
	mov    %rax,0x8(%rcx)
	test   %rax,%rax
	je     3a2dc <emit_byte+0x2c>
	leaveq 
	retq   
	mov    %rsi,%rdi
	mov    %r15,-0x8(%rbp)
	mov    %rsi,%r15
	callq  *0x18(%rcx)
	test   %eax,%eax
	je     3a2f3 <emit_byte+0x43>
	mov    -0x8(%rbp),%r15
	leaveq 
	retq   
	mov    (%r15),%rax
	movl   $0x18,0x28(%rax)
	mov    (%r15),%rax
	mov    (%rax),%rax
	mov    %r15,%rdi
	callq  *%rax
	mov    -0x8(%rbp),%r15
	leaveq 
	retq   
	xchg   %ax,%ax

003a310 <finish_pass>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x20,%rsp
	mov    %r15,-0x18(%rbp)
	mov    %r14,-0x10(%rbp)
	mov    0x1f0(%rdi),%rsi
	mov    0x18(%rsi),%rcx
	mov    0x20(%rsi),%rax
	lea    -0x1(%rcx,%rax,1),%rdx
	mov    $0xffff0000,%eax
	and    %rax,%rdx
	cmp    %rcx,%rdx
	jge    3a348 <finish_pass+0x38>
	add    $0x8000,%rdx
	mov    %r13,%rax
	mov    %r12,%r13
	mov    %rdi,%r12
	mov    %r14,%r8
	mov    %rsi,%r14
	mov    %r15,%rsi
	mov    0x38(%r14),%ecx
	shl    %cl,%rdx
	mov    %rdx,0x18(%r14)
	xor    %r15d,%r15d
	mov    $0xf8000000,%ecx
	and    %rcx,%rdx
	test   %rdx,%rdx
	jg     3a3e6 <finish_pass+0xd6>
	movslq 0x3c(%r14),%rcx
	test   %ecx,%ecx
	je     3a480 <finish_pass+0x170>
	test   %ecx,%ecx
	jle    3a48c <finish_pass+0x17c>
	mov    0x30(%r14),%rcx
	test   %rcx,%rcx
	je     3a3ba <finish_pass+0xaa>
	mov    %rax,-0x20(%rbp)
	mov    %r15,%rdi
	mov    %r12,%rsi
	callq  3a2b0 <emit_byte>
	mov    0x30(%r14),%rax
	add    $0xffffffffffffffff,%rax
	mov    %rax,0x30(%r14)
	test   %rax,%rax
	jne    3a396 <finish_pass+0x86>
	mov    -0x20(%rbp),%rax
	mov    -0x10(%rbp),%r8
	movslq 0x3c(%r14),%rdi
	mov    %r12,%rsi
	mov    %r12,-0x20(%rbp)
	mov    %rax,%r12
	mov    %r8,%r15
	callq  3a2b0 <emit_byte>
	mov    %r12,%rax
	mov    %r15,%r8
	xor    %r15d,%r15d
	mov    -0x20(%rbp),%r12
	mov    -0x18(%rbp),%rsi
	jmpq   3a48c <finish_pass+0x17c>
	movslq 0x3c(%r14),%rcx
	test   %ecx,%ecx
	js     3a44a <finish_pass+0x13a>
	mov    0x30(%r14),%rcx
	test   %rcx,%rcx
	je     3a41b <finish_pass+0x10b>
	mov    %rax,-0x20(%rbp)
	mov    %r15,%rdi
	mov    %r12,%rsi
	callq  3a2b0 <emit_byte>
	mov    0x30(%r14),%rax
	add    $0xffffffffffffffff,%rax
	mov    %rax,0x30(%r14)
	test   %rax,%rax
	jne    3a3fb <finish_pass+0xeb>
	mov    -0x20(%rbp),%rax
	movslq 0x3c(%r14),%rdi
	add    $0x1,%edi
	mov    %rax,%r15
	mov    %r12,%rsi
	callq  3a2b0 <emit_byte>
	movslq 0x3c(%r14),%rax
	cmp    $0xfe,%eax
	je     3a4ee <finish_pass+0x1de>
	mov    %r15,%rax
	mov    -0x10(%rbp),%r8
	xor    %r15d,%r15d
	mov    -0x18(%rbp),%rsi
	mov    0x30(%r14),%rcx
	add    0x28(%r14),%rcx
	mov    %rcx,0x30(%r14)
	movq   $0x0,0x28(%r14)
	mov    0x18(%r14),%rcx
	and    $0x7fff800,%rcx
	test   %rcx,%rcx
	jg     3a50b <finish_pass+0x1fb>
	mov    %r13,%r12
	mov    %rax,%r13
	mov    %r8,%r14
	mov    %rsi,%r15
	leaveq 
	retq   
	mov    0x30(%r14),%rcx
	add    $0x1,%rcx
	mov    %rcx,0x30(%r14)
	mov    0x28(%r14),%rcx
	test   %rcx,%rcx
	je     3a45e <finish_pass+0x14e>
	mov    $0xff,%edx
	mov    0x30(%r14),%rcx
	test   %rcx,%rcx
	jne    3a58d <finish_pass+0x27d>
	mov    %r13,-0x8(%rbp)
	mov    %rax,-0x20(%rbp)
	mov    %rdx,%r13
	mov    %r13,%rdi
	mov    %r12,%rsi
	callq  3a2b0 <emit_byte>
	mov    %r15,%rdi
	mov    %r12,%rsi
	callq  3a2b0 <emit_byte>
	mov    0x28(%r14),%rax
	add    $0xffffffffffffffff,%rax
	mov    %rax,0x28(%r14)
	test   %rax,%rax
	jne    3a4b2 <finish_pass+0x1a2>
	mov    -0x20(%rbp),%rax
	mov    -0x8(%rbp),%r13
	mov    -0x10(%rbp),%r8
	mov    -0x18(%rbp),%rsi
	jmpq   3a45e <finish_pass+0x14e>
	xor    %edi,%edi
	mov    %r12,%rsi
	callq  3a2b0 <emit_byte>
	mov    %r15,%rax
	mov    -0x10(%rbp),%r8
	xor    %r15d,%r15d
	mov    -0x18(%rbp),%rsi
	jmpq   3a44a <finish_pass+0x13a>
	mov    0x30(%r14),%rcx
	test   %rcx,%rcx
	je     3a538 <finish_pass+0x228>
	mov    %rax,-0x8(%rbp)
	mov    %r15,%rdi
	mov    %r12,%rsi
	callq  3a2b0 <emit_byte>
	mov    0x30(%r14),%rax
	add    $0xffffffffffffffff,%rax
	mov    %rax,0x30(%r14)
	test   %rax,%rax
	jne    3a518 <finish_pass+0x208>
	mov    -0x8(%rbp),%rax
	mov    0x18(%r14),%rcx
	shr    $0x13,%rcx
	movzbl %cl,%edi
	mov    %rax,%r15
	mov    %r12,%rsi
	callq  3a2b0 <emit_byte>
	mov    0x18(%r14),%rax
	and    $0x7f80000,%rax
	cmp    $0x7f80000,%rax
	jne    3a56a <finish_pass+0x25a>
	xor    %edi,%edi
	mov    %r12,%rsi
	callq  3a2b0 <emit_byte>
	mov    0x18(%r14),%rax
	mov    %rax,%rcx
	and    $0x7f800,%rcx
	test   %rcx,%rcx
	jg     3a5bc <finish_pass+0x2ac>
	mov    %r13,%r12
	mov    %r15,%r13
	mov    -0x10(%rbp),%r14
	mov    -0x18(%rbp),%r15
	leaveq 
	retq   
	mov    %rax,-0x20(%rbp)
	mov    %r15,%rdi
	mov    %r12,%rsi
	callq  3a2b0 <emit_byte>
	mov    0x30(%r14),%rax
	add    $0xffffffffffffffff,%rax
	mov    %rax,0x30(%r14)
	test   %rax,%rax
	jne    3a591 <finish_pass+0x281>
	mov    %r13,-0x8(%rbp)
	mov    $0xff,%r13d
	jmpq   3a4b2 <finish_pass+0x1a2>
	shr    $0xb,%rax
	movzbl %al,%edi
	mov    %r12,%rsi
	callq  3a2b0 <emit_byte>
	mov    0x18(%r14),%rax
	and    $0x7f800,%rax
	cmp    $0x7f800,%rax
	je     3a5ed <finish_pass+0x2dd>
	mov    %r13,%r12
	mov    %r15,%r13
	mov    -0x10(%rbp),%r14
	mov    -0x18(%rbp),%r15
	leaveq 
	retq   
	mov    %r12,%rsi
	xor    %edi,%edi
	callq  3a2b0 <emit_byte>
	mov    %r13,%r12
	mov    %r15,%r13
	mov    -0x10(%rbp),%r14
	mov    -0x18(%rbp),%r15
	leaveq 
	retq   
	nopw   0x0(%rax,%rax,1)

003a610 <arith_encode>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    0x339a9(%rip),%r8        # 6dfc8 <jpeg_aritab@@LIBJPEG_6.2+0x12870>
	movzbl (%rsi),%ecx
	mov    %rcx,%rax
	and    $0x7f,%eax
	movslq %eax,%rax
	mov    (%r8,%rax,8),%r8
	mov    %r8,%r10
	sar    $0x10,%r10
	mov    0x1f0(%rdi),%r11
	mov    0x20(%r11),%rax
	sub    %r10,%rax
	mov    %rax,0x20(%r11)
	mov    %rcx,%r9
	shr    $0x7,%r9d
	cmp    %edx,%r9d
	jne    3a662 <arith_encode+0x52>
	cmp    $0x7fff,%rax
	jle    3a72f <arith_encode+0x11f>
	leaveq 
	retq   
	cmp    %r10,%rax
	jl     3a673 <arith_encode+0x63>
	add    0x18(%r11),%rax
	mov    %rax,0x18(%r11)
	mov    %r10,0x20(%r11)
	and    $0x80,%cl
	lea    (%rcx,%r8,1),%eax
	mov    %al,(%rsi)
	mov    %rbx,-0x8(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %r15,-0x28(%rbp)
	mov    %rdi,%r12
	mov    %r11,%r13
	movabs $0x7ffffffffffc0000,%rax
	mov    $0xff,%r14d
	xor    %ebx,%ebx
	mov    0x20(%r13),%rcx
	add    %rcx,%rcx
	mov    %rcx,0x20(%r13)
	mov    0x18(%r13),%rdx
	lea    (%rdx,%rdx,1),%r15
	mov    %r15,0x18(%r13)
	movslq 0x38(%r13),%rcx
	add    $0xffffffff,%ecx
	mov    %ecx,0x38(%r13)
	test   %ecx,%ecx
	jne    3a815 <arith_encode+0x205>
	sar    $0x13,%r15
	cmp    $0xff,%r15
	jg     3a77e <arith_encode+0x16e>
	and    %rax,%rdx
	cmp    $0x3fc0000,%rdx
	je     3a83c <arith_encode+0x22c>
	movslq 0x3c(%r13),%rcx
	test   %ecx,%ecx
	je     3a84a <arith_encode+0x23a>
	test   %ecx,%ecx
	jle    3a856 <arith_encode+0x246>
	mov    0x30(%r13),%rax
	test   %rax,%rax
	jne    3a8a6 <arith_encode+0x296>
	movslq 0x3c(%r13),%rdi
	mov    %r12,%rsi
	callq  3a2b0 <emit_byte>
	movabs $0x7ffffffffffc0000,%rax
	jmpq   3a856 <arith_encode+0x246>
	cmp    %r10,%rax
	jge    3a740 <arith_encode+0x130>
	add    0x18(%r11),%rax
	mov    %rax,0x18(%r11)
	mov    %r10,0x20(%r11)
	and    $0x80,%cl
	shr    $0x8,%r8
	lea    (%rcx,%r8,1),%eax
	mov    %al,(%rsi)
	mov    %rbx,-0x8(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %r15,-0x28(%rbp)
	mov    %rdi,%r12
	mov    %r11,%r13
	movabs $0x7ffffffffffc0000,%rax
	mov    $0xff,%r14d
	xor    %ebx,%ebx
	jmpq   3a6a8 <arith_encode+0x98>
	movslq 0x3c(%r13),%rcx
	test   %ecx,%ecx
	js     3a7df <arith_encode+0x1cf>
	mov    0x30(%r13),%rcx
	test   %rcx,%rcx
	je     3a7b5 <arith_encode+0x1a5>
	mov    %rbx,%rdi
	mov    %r12,%rsi
	callq  3a2b0 <emit_byte>
	mov    0x30(%r13),%rax
	add    $0xffffffffffffffff,%rax
	mov    %rax,0x30(%r13)
	test   %rax,%rax
	jne    3a78f <arith_encode+0x17f>
	movabs $0x7ffffffffffc0000,%rax
	movslq 0x3c(%r13),%rdi
	add    $0x1,%edi
	mov    %rax,%r14
	mov    %r12,%rsi
	callq  3a2b0 <emit_byte>
	movslq 0x3c(%r13),%rax
	cmp    $0xfe,%eax
	je     3a8c7 <arith_encode+0x2b7>
	mov    %r14,%rax
	mov    $0xff,%r14d
	mov    0x30(%r13),%rcx
	add    0x28(%r13),%rcx
	mov    %rcx,0x30(%r13)
	movq   $0x0,0x28(%r13)
	movzbl %r15b,%ecx
	mov    %ecx,0x3c(%r13)
	mov    0x18(%r13),%rcx
	and    $0x7ffff,%rcx
	mov    %rcx,0x18(%r13)
	movslq 0x38(%r13),%rcx
	add    $0x8,%ecx
	mov    %ecx,0x38(%r13)
	mov    0x20(%r13),%rcx
	cmp    $0x7fff,%rcx
	jle    3a6a8 <arith_encode+0x98>
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	leaveq 
	retq   
	mov    0x28(%r13),%rcx
	add    $0x1,%rcx
	mov    %rcx,0x28(%r13)
	jmp    3a7fb <arith_encode+0x1eb>
	mov    0x30(%r13),%rcx
	add    $0x1,%rcx
	mov    %rcx,0x30(%r13)
	mov    0x28(%r13),%rcx
	test   %rcx,%rcx
	je     3a899 <arith_encode+0x289>
	mov    0x30(%r13),%rax
	test   %rax,%rax
	jne    3a8e0 <arith_encode+0x2d0>
	mov    %r14,%rdi
	mov    %r12,%rsi
	callq  3a2b0 <emit_byte>
	mov    %rbx,%rdi
	mov    %r12,%rsi
	callq  3a2b0 <emit_byte>
	mov    0x28(%r13),%rax
	add    $0xffffffffffffffff,%rax
	mov    %rax,0x28(%r13)
	test   %rax,%rax
	jne    3a868 <arith_encode+0x258>
	movabs $0x7ffffffffffc0000,%rax
	movzbl %r15b,%ecx
	mov    %ecx,0x3c(%r13)
	jmpq   3a7fb <arith_encode+0x1eb>
	mov    %rbx,%rdi
	mov    %r12,%rsi
	callq  3a2b0 <emit_byte>
	mov    0x30(%r13),%rax
	add    $0xffffffffffffffff,%rax
	mov    %rax,0x30(%r13)
	test   %rax,%rax
	jne    3a8a6 <arith_encode+0x296>
	jmpq   3a714 <arith_encode+0x104>
	mov    %rbx,%rdi
	mov    %r12,%rsi
	callq  3a2b0 <emit_byte>
	mov    %r14,%rax
	mov    $0xff,%r14d
	jmpq   3a7df <arith_encode+0x1cf>
	mov    %rbx,%rdi
	mov    %r12,%rsi
	callq  3a2b0 <emit_byte>
	mov    0x30(%r13),%rax
	add    $0xffffffffffffffff,%rax
	mov    %rax,0x30(%r13)
	test   %rax,%rax
	jne    3a8e0 <arith_encode+0x2d0>
	jmpq   3a868 <arith_encode+0x258>
	data16 nopw %cs:0x0(%rax,%rax,1)
	nopl   0x0(%rax)

003a910 <emit_restart>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %r13,-0x18(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %r15,-0x28(%rbp)
	mov    %rbx,-0x8(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    %rsi,%rbx
	mov    0x1f0(%rdi),%r14
	mov    %rdi,%r13
	callq  3a310 <finish_pass>
	mov    $0xff,%edi
	mov    %r13,%rsi
	callq  3a2b0 <emit_byte>
	lea    0xd0(%rbx),%edi
	mov    %r13,%rsi
	callq  3a2b0 <emit_byte>
	xor    %ebx,%ebx
	mov    $0x40,%r12d
	mov    $0x100,%edx
	mov    %rbx,%r15
	jmpq   3aa0c <emit_restart+0xfc>
	movslq %r15d,%rsi
	mov    0x148(%r13,%rsi,8),%rax
	movslq 0x134(%r13),%rcx
	test   %ecx,%ecx
	je     3a99a <emit_restart+0x8a>
	movslq 0x19c(%r13),%rcx
	test   %ecx,%ecx
	jne    3a9d9 <emit_restart+0xc9>
	movslq 0x1a4(%r13),%rcx
	test   %ecx,%ecx
	jne    3a9d9 <emit_restart+0xc9>
	movslq 0x14(%rax),%rcx
	mov    0x68(%r14,%rcx,8),%rdi
	mov    %r12,%rdx
	mov    %rax,%r12
	mov    %rbx,%rax
	mov    %rsi,%rbx
	mov    %rax,%rsi
	callq  41e0 <memset@plt>
	movl   $0x0,0x40(%r14,%rbx,4)
	movl   $0x0,0x50(%r14,%rbx,4)
	mov    %r12,%rax
	mov    $0x40,%r12d
	mov    $0x100,%edx
	xor    %ebx,%ebx
	movslq 0x134(%r13),%rcx
	test   %ecx,%ecx
	je     3a9ef <emit_restart+0xdf>
	movslq 0x1a0(%r13),%rcx
	test   %ecx,%ecx
	je     3aa08 <emit_restart+0xf8>
	movslq 0x18(%rax),%rax
	mov    0xe8(%r14,%rax,8),%rdi
	mov    %rbx,%rsi
	callq  41e0 <memset@plt>
	mov    $0x100,%edx
	add    $0x1,%r15d
	movslq 0x144(%r13),%rax
	cmp    %r15d,%eax
	jg     3a96e <emit_restart+0x5e>
	movq   $0x0,0x18(%r14)
	movq   $0x10000,0x20(%r14)
	movq   $0x0,0x28(%r14)
	movq   $0x0,0x30(%r14)
	movl   $0xb,0x38(%r14)
	movl   $0xffffffff,0x3c(%r14)
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	leaveq 
	retq   
	data16 nopw %cs:0x0(%rax,%rax,1)
	nopl   (%rax)

003aa70 <encode_mcu_DC_first>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x70,%rsp
	mov    %rbx,-0x8(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %r15,-0x28(%rbp)
	mov    %rsi,-0x60(%rbp)
	mov    0x1f0(%rdi),%r15
	mov    %r15,-0x58(%rbp)
	mov    $0x1,%r13d
	xor    %edx,%edx
	mov    $0x4,%eax
	mov    %rax,-0x40(%rbp)
	mov    $0x8,%eax
	mov    %rax,-0x38(%rbp)
	mov    0x118(%rdi),%eax
	test   %eax,%eax
	jne    3aaca <encode_mcu_DC_first+0x5a>
	mov    %rdi,%rbx
	mov    %rsi,%r12
	mov    %rdx,%r14
	jmp    3ab14 <encode_mcu_DC_first+0xa4>
	mov    0x60(%r15),%eax
	test   %eax,%eax
	je     3ab39 <encode_mcu_DC_first+0xc9>
	mov    %rdi,%rbx
	mov    %rsi,%r12
	jmpq   3ab66 <encode_mcu_DC_first+0xf6>
	sar    %r12d
	mov    %r12,%rax
	and    %r15d,%eax
	test   %eax,%eax
	je     3aaed <encode_mcu_DC_first+0x7d>
	mov    %r13,%rdx
	mov    %rbx,%rdi
	mov    %r14,%rsi
	callq  3a610 <arith_encode>
	xor    %edx,%edx
	mov    %r12,%rax
	and    $0xfffffffe,%eax
	test   %eax,%eax
	jne    3aadd <encode_mcu_DC_first+0x6d>
	mov    -0x58(%rbp),%r15
	mov    -0x68(%rbp),%r14
	mov    -0x60(%rbp),%r12
	add    $0x1,%r14d
	movslq 0x170(%rbx),%rax
	cmp    %r14d,%eax
	jg     3ab76 <encode_mcu_DC_first+0x106>
	mov    %r13,%rax
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	leaveq 
	retq   
	mov    %rsi,%r12
	mov    %rdx,%r14
	movslq 0x64(%r15),%rsi
	mov    %rdi,%rbx
	callq  3a910 <emit_restart>
	mov    0x118(%rbx),%eax
	mov    %eax,0x60(%r15)
	movslq 0x64(%r15),%rax
	add    $0x1,%eax
	and    $0x7,%eax
	mov    %eax,0x64(%r15)
	mov    %r14,%rdx
	mov    0x60(%r15),%eax
	add    $0xffffffff,%eax
	mov    %eax,0x60(%r15)
	mov    %rdx,%r14
	jmp    3ab14 <encode_mcu_DC_first+0xa4>
	movslq %r14d,%rcx
	movslq 0x174(%rbx,%rcx,4),%r8
	mov    0x148(%rbx,%r8,8),%rax
	movslq 0x14(%rax),%r9
	movslq 0x50(%r15,%r8,4),%rsi
	add    0x68(%r15,%r9,8),%rsi
	mov    (%r12,%rcx,8),%rax
	movswq (%rax),%rax
	mov    0x1a8(%rbx),%ecx
	sar    %cl,%eax
	movslq 0x40(%r15,%r8,4),%r10
	cmp    %eax,%r10d
	je     3ac08 <encode_mcu_DC_first+0x198>
	mov    %eax,0x40(%r15,%r8,4)
	mov    %rbx,%rdi
	mov    %rsi,%rcx
	mov    %r14,-0x68(%rbp)
	mov    %r8,-0x48(%rbp)
	mov    %r9,-0x30(%rbp)
	mov    %r13,%rdx
	mov    %rax,%r13
	mov    %r10,%r12
	mov    %rsi,%r14
	mov    %rcx,%rsi
	callq  3a610 <arith_encode>
	mov    %r13,%rax
	sub    %r12d,%eax
	test   %eax,%eax
	jg     3ac29 <encode_mcu_DC_first+0x1b9>
	lea    0x1(%r14),%rsi
	mov    %rbx,%rdi
	mov    $0x1,%edx
	callq  3a610 <arith_encode>
	sub    %r13d,%r12d
	add    $0x3,%r14
	xor    %edx,%edx
	pushq  -0x38(%rbp)
	popq   -0x50(%rbp)
	jmp    3ac4b <encode_mcu_DC_first+0x1db>
	mov    %r8,%r13
	mov    %rbx,%rdi
	callq  3a610 <arith_encode>
	movl   $0x0,0x50(%r15,%r13,4)
	xor    %edx,%edx
	mov    $0x1,%r13d
	jmpq   3ab10 <encode_mcu_DC_first+0xa0>
	mov    %rax,%r12
	lea    0x1(%r14),%rsi
	mov    %rbx,%rdi
	xor    %r13d,%r13d
	mov    %r13,%rdx
	callq  3a610 <arith_encode>
	add    $0x2,%r14
	mov    %r13,%rdx
	pushq  -0x40(%rbp)
	popq   -0x50(%rbp)
	mov    -0x50(%rbp),%rcx
	mov    -0x48(%rbp),%rax
	mov    %ecx,0x50(%r15,%rax,4)
	lea    -0x1(%r12),%r13d
	mov    %r13,-0x50(%rbp)
	test   %r13d,%r13d
	jne    3ac6e <encode_mcu_DC_first+0x1fe>
	mov    %rax,%r13
	mov    %rdx,%r12
	jmp    3acc0 <encode_mcu_DC_first+0x250>
	mov    %r14,%rsi
	mov    %rbx,%rdi
	mov    $0x1,%r12d
	mov    %r12,%rdx
	callq  3a610 <arith_encode>
	mov    -0x30(%rbp),%rax
	mov    0x68(%r15,%rax,8),%r14
	add    $0x14,%r14
	mov    %r12,%r15
	jmp    3acac <encode_mcu_DC_first+0x23c>
	mov    %rbx,%rdi
	mov    %r14,%rsi
	mov    %r15,%rdx
	callq  3a610 <arith_encode>
	sar    %r13d
	add    $0x1,%r14
	add    %r12d,%r12d
	mov    %r13,%rax
	and    $0xfffffffe,%eax
	test   %eax,%eax
	jne    3ac94 <encode_mcu_DC_first+0x224>
	mov    -0x58(%rbp),%r15
	xor    %edx,%edx
	mov    -0x48(%rbp),%r13
	mov    %rbx,%rdi
	mov    %r14,%rsi
	callq  3a610 <arith_encode>
	mov    %r13,%rsi
	mov    -0x30(%rbp),%rax
	movzbl 0xc0(%rbx,%rax,1),%ecx
	mov    $0x1,%r13d
	mov    %r13,%rdx
	shl    %cl,%rdx
	sar    %rdx
	cmp    %edx,%r12d
	jl     3ad13 <encode_mcu_DC_first+0x2a3>
	movzbl 0xd0(%rax,%rbx,1),%ecx
	mov    %r13,%rax
	shl    %cl,%rax
	sar    %rax
	cmp    %eax,%r12d
	jle    3ad1c <encode_mcu_DC_first+0x2ac>
	movslq 0x50(%r15,%rsi,4),%rax
	add    $0x8,%eax
	mov    %eax,0x50(%r15,%rsi,4)
	jmp    3ad1c <encode_mcu_DC_first+0x2ac>
	movl   $0x0,0x50(%r15,%rsi,4)
	add    $0xe,%r14
	mov    -0x50(%rbp),%r15
	xor    %edx,%edx
	jmpq   3aafa <encode_mcu_DC_first+0x8a>
	nopl   0x0(%rax,%rax,1)

003ad30 <encode_mcu_AC_first>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x80,%rsp
	mov    %r13,-0x18(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %r15,-0x28(%rbp)
	mov    0x1f0(%rdi),%rax
	mov    %rax,-0x58(%rbp)
	mov    0x118(%rdi),%ecx
	test   %ecx,%ecx
	jne    3ad67 <encode_mcu_AC_first+0x37>
	mov    %r12,%r8
	mov    %rbx,%r12
	mov    %rdi,%rbx
	jmp    3adbb <encode_mcu_AC_first+0x8b>
	mov    0x60(%rax),%ecx
	test   %ecx,%ecx
	je     3ad79 <encode_mcu_AC_first+0x49>
	mov    %r12,%r8
	mov    %rbx,%r12
	mov    %rdi,%rbx
	jmp    3adb2 <encode_mcu_AC_first+0x82>
	mov    %r12,%r13
	mov    %rbx,%r12
	mov    %rax,%r14
	mov    %rsi,%r15
	movslq 0x64(%r14),%rsi
	mov    %rdi,%rbx
	callq  3a910 <emit_restart>
	mov    0x118(%rbx),%eax
	mov    %eax,0x60(%r14)
	movslq 0x64(%r14),%rax
	add    $0x1,%eax
	and    $0x7,%eax
	mov    %eax,0x64(%r14)
	mov    %r14,%rax
	mov    %r15,%rsi
	mov    %r13,%r8
	mov    0x60(%rax),%ecx
	add    $0xffffffff,%ecx
	mov    %ecx,0x60(%rax)
	mov    0x148(%rbx),%rcx
	movslq 0x18(%rcx),%rdi
	mov    %rdi,-0x60(%rbp)
	mov    (%rsi),%r14
	mov    %r14,-0x30(%rbp)
	movslq 0x1a0(%rbx),%rsi
	mov    0x331f9(%rip),%r13        # 6dfd8 <jpeg_natural_order@@LIBJPEG_6.2+0x129f4>
	mov    %r13,-0x38(%rbp)
	jmp    3ae08 <encode_mcu_AC_first+0xd8>
	movslq %esi,%rcx
	movslq 0x0(%r13,%rcx,4),%rcx
	movswq (%r14,%rcx,2),%rdx
	test   %dx,%dx
	jns    3ae12 <encode_mcu_AC_first+0xe2>
	neg    %edx
	mov    0x1a8(%rbx),%ecx
	sar    %cl,%edx
	test   %edx,%edx
	jne    3ae1e <encode_mcu_AC_first+0xee>
	add    $0xffffffff,%esi
	mov    %rsi,-0x78(%rbp)
	test   %esi,%esi
	jg     3ade5 <encode_mcu_AC_first+0xb5>
	jmp    3ae1e <encode_mcu_AC_first+0xee>
	mov    0x1a8(%rbx),%ecx
	sar    %cl,%edx
	test   %edx,%edx
	je     3ae05 <encode_mcu_AC_first+0xd5>
	movslq 0x19c(%rbx),%r15
	xor    %edx,%edx
	lea    0x168(%rax),%rcx
	mov    %rcx,-0x40(%rbp)
	mov    $0xbd,%ecx
	mov    %rcx,-0x50(%rbp)
	mov    $0xd9,%ecx
	mov    %rcx,-0x48(%rbp)
	mov    %r12,-0x8(%rbp)
	mov    %r8,-0x10(%rbp)
	jmp    3ae8d <encode_mcu_AC_first+0x15d>
	sar    %r12d
	mov    %r12,%rax
	and    %r14d,%eax
	test   %eax,%eax
	je     3ae5e <encode_mcu_AC_first+0x12e>
	mov    %r13,%rdx
	mov    %rbx,%rdi
	mov    %r15,%rsi
	callq  3a610 <arith_encode>
	xor    %edx,%edx
	mov    %r12,%rax
	and    $0xfffffffe,%eax
	test   %eax,%eax
	jne    3ae4e <encode_mcu_AC_first+0x11e>
	mov    -0x30(%rbp),%r14
	mov    -0x38(%rbp),%r13
	mov    -0x70(%rbp),%r15
	mov    -0x60(%rbp),%rdi
	mov    -0x58(%rbp),%rax
	mov    -0x78(%rbp),%rsi
	cmp    %esi,%r15d
	jle    3aeb6 <encode_mcu_AC_first+0x186>
	cmp    0x1a0(%rbx),%r15d
	jle    3aed5 <encode_mcu_AC_first+0x1a5>
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	mov    $0x1,%eax
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	leaveq 
	retq   
	lea    -0x3(%r15,%r15,2),%ecx
	movslq %ecx,%r12
	add    0xe8(%rax,%rdi,8),%r12
	mov    %rbx,%rdi
	mov    %r12,%rsi
	callq  3a610 <arith_encode>
	xor    %edx,%edx
	jmp    3af31 <encode_mcu_AC_first+0x201>
	lea    -0x3(%r15,%r15,2),%ecx
	movslq %ecx,%rsi
	add    0xe8(%rax,%rdi,8),%rsi
	mov    %rbx,%rdi
	mov    $0x1,%r12d
	mov    %r12,%rdx
	callq  3a610 <arith_encode>
	mov    %r12,%rax
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	leaveq 
	retq   
	mov    0x1a8(%rbx),%ecx
	sar    %cl,%eax
	test   %eax,%eax
	jne    3af89 <encode_mcu_AC_first+0x259>
	mov    %r8,%r15
	lea    0x1(%r12),%rsi
	mov    %rbx,%rdi
	callq  3a610 <arith_encode>
	add    $0x3,%r12
	xor    %edx,%edx
	lea    0x1(%r15),%r8d
	movslq %r15d,%rax
	movslq 0x0(%r13,%rax,4),%rax
	movswq (%r14,%rax,2),%rax
	test   %ax,%ax
	jns    3af0f <encode_mcu_AC_first+0x1df>
	neg    %eax
	mov    0x1a8(%rbx),%ecx
	sar    %cl,%eax
	test   %eax,%eax
	je     3afe9 <encode_mcu_AC_first+0x2b9>
	lea    0x1(%r12),%rsi
	mov    %rbx,%rdi
	mov    $0x1,%r13d
	mov    %r13,%rdx
	mov    %r8,-0x70(%rbp)
	mov    %rax,%r14
	callq  3a610 <arith_encode>
	mov    %rbx,%rdi
	mov    -0x40(%rbp),%rsi
	mov    %r13,%rdx
	callq  3a610 <arith_encode>
	xor    %edx,%edx
	jmp    3afc0 <encode_mcu_AC_first+0x290>
	lea    0x1(%r12),%rsi
	mov    %rbx,%rdi
	mov    $0x1,%ecx
	mov    %r8,-0x70(%rbp)
	mov    %rdx,%r13
	mov    %rcx,%rdx
	mov    %rax,%r14
	callq  3a610 <arith_encode>
	mov    %rbx,%rdi
	mov    -0x40(%rbp),%rsi
	mov    %r13,%rdx
	callq  3a610 <arith_encode>
	mov    %r13,%rdx
	mov    $0x1,%r13d
	add    $0x2,%r12
	add    $0xffffffff,%r14d
	test   %r14d,%r14d
	jne    3aff1 <encode_mcu_AC_first+0x2c1>
	mov    %r12,%r15
	mov    %rdx,%r12
	mov    %rbx,%rdi
	mov    %r15,%rsi
	callq  3a610 <arith_encode>
	add    $0xe,%r15
	xor    %edx,%edx
	jmpq   3ae6b <encode_mcu_AC_first+0x13b>
	mov    %r8,%r15
	jmpq   3af1e <encode_mcu_AC_first+0x1ee>
	mov    %rbx,%rdi
	mov    %r12,%rsi
	mov    %r13,%rdx
	callq  3a610 <arith_encode>
	mov    %r14,%rax
	and    $0xfffffffe,%eax
	test   %eax,%eax
	jne    3b013 <encode_mcu_AC_first+0x2e3>
	mov    %r12,%r15
	xor    %edx,%edx
	mov    %r13,%r12
	jmp    3afd3 <encode_mcu_AC_first+0x2a3>
	mov    %r12,%rsi
	mov    %rbx,%rdi
	mov    %r13,%rdx
	callq  3a610 <arith_encode>
	mov    -0x60(%rbp),%rdx
	mov    -0x58(%rbp),%rax
	mov    0xe8(%rax,%rdx,8),%rcx
	movzbl 0xe0(%rbx,%rdx,1),%eax
	cmp    %eax,%r15d
	jle    3b046 <encode_mcu_AC_first+0x316>
	pushq  -0x48(%rbp)
	popq   -0x68(%rbp)
	jmp    3b04c <encode_mcu_AC_first+0x31c>
	pushq  -0x50(%rbp)
	popq   -0x68(%rbp)
	mov    %r14,%rdx
	sar    %edx
	mov    -0x68(%rbp),%rax
	lea    (%rax,%rcx,1),%r15
	mov    %r14,-0x68(%rbp)
	mov    %rdx,%r14
	mov    $0x2,%r12d
	jmp    3b080 <encode_mcu_AC_first+0x350>
	mov    %rbx,%rdi
	mov    %r15,%rsi
	mov    %r13,%rdx
	callq  3a610 <arith_encode>
	sar    %r14d
	add    $0x1,%r15
	add    %r12d,%r12d
	mov    %r14,%rax
	and    $0xfffffffe,%eax
	test   %eax,%eax
	jne    3b068 <encode_mcu_AC_first+0x338>
	mov    -0x68(%rbp),%r14
	xor    %edx,%edx
	jmpq   3afd3 <encode_mcu_AC_first+0x2a3>
	data16 nopw %cs:0x0(%rax,%rax,1)

003b0a0 <encode_mcu_DC_refine>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %r13,-0x18(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %r15,-0x28(%rbp)
	mov    %rbx,-0x8(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    0x1f0(%rdi),%r13
	mov    0x118(%rdi),%eax
	test   %eax,%eax
	jne    3b0d5 <encode_mcu_DC_refine+0x35>
	mov    %rdi,%rbx
	mov    %rsi,%r12
	jmp    3b117 <encode_mcu_DC_refine+0x77>
	mov    0x60(%r13),%eax
	test   %eax,%eax
	je     3b0e5 <encode_mcu_DC_refine+0x45>
	mov    %rdi,%rbx
	mov    %rsi,%r12
	jmp    3b10c <encode_mcu_DC_refine+0x6c>
	mov    %rsi,%r12
	movslq 0x64(%r13),%rsi
	mov    %rdi,%rbx
	callq  3a910 <emit_restart>
	mov    0x118(%rbx),%eax
	mov    %eax,0x60(%r13)
	movslq 0x64(%r13),%rax
	add    $0x1,%eax
	and    $0x7,%eax
	mov    %eax,0x64(%r13)
	mov    0x60(%r13),%eax
	add    $0xffffffff,%eax
	mov    %eax,0x60(%r13)
	mov    0x1a8(%rbx),%ecx
	add    $0x168,%r13
	xor    %r14d,%r14d
	jmp    3b14e <encode_mcu_DC_refine+0xae>
	movslq %r14d,%rax
	mov    (%r12,%rax,8),%rax
	movswq (%rax),%rdx
	sar    %cl,%edx
	and    $0x1,%edx
	mov    %rcx,%r15
	mov    %rbx,%rdi
	mov    %r13,%rsi
	callq  3a610 <arith_encode>
	add    $0x1,%r14d
	mov    %r15,%rcx
	movslq 0x170(%rbx),%rax
	cmp    %r14d,%eax
	jg     3b129 <encode_mcu_DC_refine+0x89>
	mov    $0x1,%eax
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	leaveq 
	retq   
	data16 nopw %cs:0x0(%rax,%rax,1)

003b180 <encode_mcu_AC_refine>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x50,%rsp
	mov    %r13,-0x18(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %r15,-0x28(%rbp)
	mov    0x1f0(%rdi),%rax
	mov    %rax,-0x30(%rbp)
	mov    0x118(%rdi),%ecx
	test   %ecx,%ecx
	jne    3b1b1 <encode_mcu_AC_refine+0x31>
	mov    %rbx,%r8
	mov    %rdi,%rbx
	jmp    3b1ff <encode_mcu_AC_refine+0x7f>
	mov    0x60(%rax),%ecx
	test   %ecx,%ecx
	je     3b1c0 <encode_mcu_AC_refine+0x40>
	mov    %rbx,%r8
	mov    %rdi,%rbx
	jmp    3b1f6 <encode_mcu_AC_refine+0x76>
	mov    %rbx,%r13
	mov    %rax,%r14
	mov    %rsi,%r15
	movslq 0x64(%r14),%rsi
	mov    %rdi,%rbx
	callq  3a910 <emit_restart>
	mov    0x118(%rbx),%eax
	mov    %eax,0x60(%r14)
	movslq 0x64(%r14),%rax
	add    $0x1,%eax
	and    $0x7,%eax
	mov    %eax,0x64(%r14)
	mov    %r14,%rax
	mov    %r15,%rsi
	mov    %r13,%r8
	mov    0x60(%rax),%ecx
	add    $0xffffffff,%ecx
	mov    %ecx,0x60(%rax)
	mov    0x148(%rbx),%rcx
	movslq 0x18(%rcx),%rdi
	mov    %rdi,-0x38(%rbp)
	mov    (%rsi),%r13
	movslq 0x1a0(%rbx),%rsi
	mov    0x32db9(%rip),%r14        # 6dfd8 <jpeg_natural_order@@LIBJPEG_6.2+0x129f4>
	jmp    3b244 <encode_mcu_AC_refine+0xc4>
	movslq %esi,%rcx
	movslq (%r14,%rcx,4),%rcx
	movswq 0x0(%r13,%rcx,2),%rdx
	test   %dx,%dx
	jns    3b251 <encode_mcu_AC_refine+0xd1>
	neg    %edx
	mov    0x1a8(%rbx),%ecx
	sar    %cl,%edx
	test   %edx,%edx
	jne    3b262 <encode_mcu_AC_refine+0xe2>
	add    $0xffffffff,%esi
	mov    %rsi,-0x50(%rbp)
	test   %esi,%esi
	jg     3b221 <encode_mcu_AC_refine+0xa1>
	mov    %rsi,%r9
	jmp    3b28b <encode_mcu_AC_refine+0x10b>
	mov    0x1a8(%rbx),%ecx
	sar    %cl,%edx
	test   %edx,%edx
	je     3b241 <encode_mcu_AC_refine+0xc1>
	mov    %rsi,%r9
	jmp    3b28b <encode_mcu_AC_refine+0x10b>
	mov    %rsi,%r9
	jmp    3b28b <encode_mcu_AC_refine+0x10b>
	movslq %r9d,%rcx
	movslq (%r14,%rcx,4),%rcx
	movswq 0x0(%r13,%rcx,2),%rdx
	test   %dx,%dx
	jns    3b296 <encode_mcu_AC_refine+0x116>
	neg    %edx
	mov    0x1a4(%rbx),%ecx
	sar    %cl,%edx
	test   %edx,%edx
	jne    3b2a2 <encode_mcu_AC_refine+0x122>
	add    $0xffffffff,%r9d
	mov    %r9,-0x48(%rbp)
	test   %r9d,%r9d
	jg     3b267 <encode_mcu_AC_refine+0xe7>
	jmp    3b2a2 <encode_mcu_AC_refine+0x122>
	mov    0x1a4(%rbx),%ecx
	sar    %cl,%edx
	test   %edx,%edx
	je     3b287 <encode_mcu_AC_refine+0x107>
	movslq 0x19c(%rbx),%r15
	lea    0x168(%rax),%rcx
	mov    %rcx,-0x40(%rbp)
	xor    %edx,%edx
	mov    %r8,-0x8(%rbp)
	mov    %r12,-0x10(%rbp)
	jmp    3b2ec <encode_mcu_AC_refine+0x16c>
	lea    0x2(%r12),%rsi
	and    $0x1,%eax
	mov    %rdx,%r12
	mov    %rax,%rdx
	mov    %r8,%r15
	mov    %rbx,%rdi
	callq  3a610 <arith_encode>
	mov    %r12,%rdx
	mov    -0x48(%rbp),%r9
	mov    -0x38(%rbp),%rdi
	mov    -0x30(%rbp),%rax
	mov    -0x50(%rbp),%rsi
	cmp    %esi,%r15d
	jle    3b315 <encode_mcu_AC_refine+0x195>
	cmp    0x1a0(%rbx),%r15d
	jle    3b339 <encode_mcu_AC_refine+0x1b9>
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	mov    $0x1,%eax
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	leaveq 
	retq   
	lea    -0x3(%r15,%r15,2),%ecx
	movslq %ecx,%r12
	add    0xe8(%rax,%rdi,8),%r12
	cmp    %r9d,%r15d
	jle    3b399 <encode_mcu_AC_refine+0x219>
	mov    %rbx,%rdi
	mov    %r12,%rsi
	callq  3a610 <arith_encode>
	xor    %edx,%edx
	jmp    3b399 <encode_mcu_AC_refine+0x219>
	lea    -0x3(%r15,%r15,2),%ecx
	movslq %ecx,%rsi
	add    0xe8(%rax,%rdi,8),%rsi
	mov    %rbx,%rdi
	mov    $0x1,%r12d
	mov    %r12,%rdx
	callq  3a610 <arith_encode>
	mov    %r12,%rax
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	leaveq 
	retq   
	mov    0x1a8(%rbx),%ecx
	sar    %cl,%eax
	test   %eax,%eax
	jne    3b40e <encode_mcu_AC_refine+0x28e>
	mov    %r8,%r15
	lea    0x1(%r12),%rsi
	mov    %rbx,%rdi
	callq  3a610 <arith_encode>
	add    $0x3,%r12
	xor    %edx,%edx
	lea    0x1(%r15),%r8d
	movslq %r15d,%rax
	movslq (%r14,%rax,4),%rax
	movswq 0x0(%r13,%rax,2),%rax
	test   %ax,%ax
	jns    3b373 <encode_mcu_AC_refine+0x1f3>
	neg    %eax
	mov    0x1a8(%rbx),%ecx
	sar    %cl,%eax
	test   %eax,%eax
	je     3b45b <encode_mcu_AC_refine+0x2db>
	mov    %rax,%rcx
	and    $0xfffffffe,%ecx
	test   %ecx,%ecx
	jne    3b463 <encode_mcu_AC_refine+0x2e3>
	lea    0x1(%r12),%rsi
	mov    %r8,%r15
	mov    %rbx,%rdi
	mov    $0x1,%r12d
	mov    %r12,%rdx
	callq  3a610 <arith_encode>
	mov    %r12,%rdx
	mov    %rbx,%rdi
	mov    -0x40(%rbp),%rsi
	callq  3a610 <arith_encode>
	mov    -0x48(%rbp),%r9
	mov    -0x38(%rbp),%rdi
	mov    -0x30(%rbp),%rax
	mov    -0x50(%rbp),%rsi
	xor    %edx,%edx
	jmpq   3b2ec <encode_mcu_AC_refine+0x16c>
	mov    %rax,%rcx
	and    $0xfffffffe,%ecx
	test   %ecx,%ecx
	jne    3b2c0 <encode_mcu_AC_refine+0x140>
	lea    0x1(%r12),%rsi
	mov    %rdx,%r12
	mov    %r8,%r15
	mov    %rbx,%rdi
	mov    $0x1,%edx
	callq  3a610 <arith_encode>
	mov    %rbx,%rdi
	mov    -0x40(%rbp),%rsi
	mov    %r12,%rdx
	callq  3a610 <arith_encode>
	mov    %r12,%rdx
	mov    -0x48(%rbp),%r9
	mov    -0x38(%rbp),%rdi
	mov    -0x30(%rbp),%rax
	mov    -0x50(%rbp),%rsi
	jmpq   3b2ec <encode_mcu_AC_refine+0x16c>
	mov    %r8,%r15
	jmpq   3b386 <encode_mcu_AC_refine+0x206>
	lea    0x2(%r12),%rsi
	and    $0x1,%eax
	mov    %rdx,%r12
	mov    %rax,%rdx
	mov    %r8,%r15
	mov    %rbx,%rdi
	callq  3a610 <arith_encode>
	mov    %r12,%rdx
	mov    -0x48(%rbp),%r9
	mov    -0x38(%rbp),%rdi
	mov    -0x30(%rbp),%rax
	mov    -0x50(%rbp),%rsi
	jmpq   3b2ec <encode_mcu_AC_refine+0x16c>
	data16 nopw %cs:0x0(%rax,%rax,1)
	nop

003b4a0 <encode_mcu>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0xb0,%rsp
	mov    %r15,-0x28(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %rbx,-0x8(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    %rsi,-0xa0(%rbp)
	mov    %rdi,-0x98(%rbp)
	mov    0x32b04(%rip),%r13        # 6dfd8 <jpeg_natural_order@@LIBJPEG_6.2+0x129f4>
	mov    %r13,-0x38(%rbp)
	mov    $0x1,%r12d
	xor    %edx,%edx
	mov    0x1f0(%rdi),%r8
	mov    %r8,-0x90(%rbp)
	lea    0x168(%r8),%rax
	mov    %rax,-0x50(%rbp)
	mov    $0x4,%eax
	mov    %rax,-0x70(%rbp)
	mov    $0x8,%eax
	mov    %rax,-0x68(%rbp)
	mov    $0xbd,%eax
	mov    %rax,-0x48(%rbp)
	mov    $0xd9,%eax
	mov    %rax,-0x40(%rbp)
	mov    0x118(%rdi),%eax
	test   %eax,%eax
	jne    3b52f <encode_mcu+0x8f>
	mov    %rdi,%rbx
	mov    %rdx,%rax
	jmp    3b57d <encode_mcu+0xdd>
	mov    0x60(%r8),%eax
	test   %eax,%eax
	je     3b5a1 <encode_mcu+0x101>
	mov    %rdi,%rbx
	jmpq   3b5dd <encode_mcu+0x13d>
	lea    -0x3(%r15,%r15,2),%eax
	movslq %eax,%rsi
	add    0xe8(%r8,%rcx,8),%rsi
	mov    %rdx,%r14
	mov    %r8,%r15
	mov    %rbx,%rdi
	mov    $0x1,%r12d
	mov    %r12,%rdx
	callq  3a610 <arith_encode>
	mov    %r14,%rdx
	mov    %r15,%r8
	mov    -0xa8(%rbp),%rax
	add    $0x1,%eax
	mov    -0xa0(%rbp),%rsi
	movslq 0x170(%rbx),%rcx
	cmp    %eax,%ecx
	jg     3b5ed <encode_mcu+0x14d>
	mov    %r12,%rax
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	mov    -0x20(%rbp),%r14
	mov    -0x28(%rbp),%r15
	leaveq 
	retq   
	mov    %rdx,%r12
	mov    %r8,%r14
	mov    %rsi,%r15
	movslq 0x64(%r14),%rsi
	mov    %rdi,%rbx
	callq  3a910 <emit_restart>
	mov    0x118(%rbx),%eax
	mov    %eax,0x60(%r14)
	movslq 0x64(%r14),%rax
	add    $0x1,%eax
	and    $0x7,%eax
	mov    %eax,0x64(%r14)
	mov    %r12,%rdx
	mov    %r15,%rsi
	mov    %r14,%r8
	mov    $0x1,%r12d
	mov    0x60(%r8),%eax
	add    $0xffffffff,%eax
	mov    %eax,0x60(%r8)
	mov    %rdx,%rax
	jmp    3b57d <encode_mcu+0xdd>
	movslq %eax,%rdi
	movslq 0x174(%rbx,%rdi,4),%r10
	mov    0x148(%rbx,%r10,8),%rcx
	movslq 0x14(%rcx),%r9
	mov    %rax,-0xa8(%rbp)
	movslq 0x50(%r8,%r10,4),%r15
	add    0x68(%r8,%r9,8),%r15
	mov    (%rsi,%rdi,8),%r14
	mov    %r14,-0x30(%rbp)
	movswq (%r14),%r11
	movslq 0x40(%r8,%r10,4),%rax
	cmp    %r11d,%eax
	je     3b67f <encode_mcu+0x1df>
	mov    %r11d,0x40(%r8,%r10,4)
	mov    %rbx,%rdi
	mov    %r15,%rsi
	mov    %r10,-0x80(%rbp)
	mov    %r9,-0x60(%rbp)
	mov    %rcx,-0x58(%rbp)
	mov    %r12,%rdx
	mov    %r8,%r12
	mov    %r11,%r13
	mov    %rax,%r14
	callq  3a610 <arith_encode>
	mov    %r13,%rax
	sub    %r14d,%eax
	test   %eax,%eax
	jg     3b6c1 <encode_mcu+0x221>
	lea    0x1(%r15),%rsi
	mov    %rbx,%rdi
	mov    $0x1,%edx
	callq  3a610 <arith_encode>
	sub    %r13d,%r14d
	lea    0x3(%r15),%r13
	xor    %edx,%edx
	pushq  -0x68(%rbp)
	popq   -0x78(%rbp)
	jmp    3b6e6 <encode_mcu+0x246>
	mov    %r15,%rsi
	mov    %r8,%r15
	mov    %rbx,%rdi
	mov    %r10,%rbx
	mov    %rcx,%r12
	callq  3a610 <arith_encode>
	movl   $0x0,0x50(%r15,%rbx,4)
	mov    %r15,%r8
	mov    -0x98(%rbp),%rbx
	xor    %edx,%edx
	mov    $0x1,%r15d
	movslq 0x18(%r12),%rcx
	mov    %rcx,-0x80(%rbp)
	mov    $0x3f,%eax
	jmpq   3b775 <encode_mcu+0x2d5>
	mov    %r15,%r13
	mov    %rax,%r14
	lea    0x1(%r13),%rsi
	mov    %rbx,%rdi
	xor    %r15d,%r15d
	mov    %r15,%rdx
	callq  3a610 <arith_encode>
	add    $0x2,%r13
	mov    %r15,%rdx
	pushq  -0x70(%rbp)
	popq   -0x78(%rbp)
	mov    -0x78(%rbp),%rax
	mov    -0x80(%rbp),%r15
	mov    %eax,0x50(%r12,%r15,4)
	add    $0xffffffff,%r14d
	mov    %r14,-0x88(%rbp)
	test   %r14d,%r14d
	jne    3b782 <encode_mcu+0x2e2>
	mov    %r12,%r14
	mov    %rdx,%r12
	mov    %rbx,%rdi
	mov    %r13,%rsi
	callq  3a610 <arith_encode>
	mov    %r15,%rsi
	mov    -0x60(%rbp),%rax
	movzbl 0xc0(%rbx,%rax,1),%ecx
	mov    $0x1,%r15d
	mov    %r15,%rdx
	shl    %cl,%rdx
	sar    %rdx
	cmp    %edx,%r12d
	jl     3b7ab <encode_mcu+0x30b>
	movzbl 0xd0(%rax,%rbx,1),%ecx
	mov    %r15,%rax
	shl    %cl,%rax
	sar    %rax
	cmp    %eax,%r12d
	jle    3b7b4 <encode_mcu+0x314>
	movslq 0x50(%r14,%rsi,4),%rax
	add    $0x8,%eax
	mov    %eax,0x50(%r14,%rsi,4)
	jmp    3b7b4 <encode_mcu+0x314>
	movslq %eax,%rsi
	movslq 0x0(%r13,%rsi,4),%rsi
	movswq (%r14,%rsi,2),%rsi
	test   %si,%si
	jne    3b80b <encode_mcu+0x36b>
	add    $0xffffffff,%eax
	mov    %rax,-0x58(%rbp)
	test   %eax,%eax
	jg     3b75c <encode_mcu+0x2bc>
	jmpq   3b80b <encode_mcu+0x36b>
	mov    %r13,%rsi
	mov    %rbx,%rdi
	mov    $0x1,%r15d
	mov    %r15,%rdx
	callq  3a610 <arith_encode>
	mov    -0x60(%rbp),%rax
	mov    0x68(%r12,%rax,8),%r13
	add    $0x14,%r13
	mov    %r15,%r12
	jmpq   3b841 <encode_mcu+0x3a1>
	movl   $0x0,0x50(%r14,%rsi,4)
	add    $0xe,%r13
	mov    -0x88(%rbp),%r14
	xor    %edx,%edx
	jmpq   3b87a <encode_mcu+0x3da>
	sar    %r12d
	mov    %r12,%rax
	and    %r14d,%eax
	test   %eax,%eax
	je     3b7d6 <encode_mcu+0x336>
	mov    %r13,%rdx
	mov    %rbx,%rdi
	mov    %r15,%rsi
	callq  3a610 <arith_encode>
	xor    %edx,%edx
	mov    %r12,%rax
	and    $0xfffffffe,%eax
	test   %eax,%eax
	jne    3b7c6 <encode_mcu+0x326>
	mov    -0x88(%rbp),%r15
	mov    -0x80(%rbp),%rcx
	mov    -0x90(%rbp),%r8
	mov    -0x58(%rbp),%rax
	mov    -0x38(%rbp),%r13
	mov    -0x30(%rbp),%r14
	cmp    %eax,%r15d
	jle    3b89c <encode_mcu+0x3fc>
	cmp    $0x3f,%r15d
	jle    3b53f <encode_mcu+0x9f>
	mov    $0x1,%r12d
	jmpq   3b56c <encode_mcu+0xcc>
	mov    %rbx,%rdi
	mov    %r13,%rsi
	mov    %r15,%rdx
	callq  3a610 <arith_encode>
	sar    %r14d
	add    $0x1,%r13
	add    %r12d,%r12d
	mov    %r14,%rax
	and    $0xfffffffe,%eax
	test   %eax,%eax
	jne    3b829 <encode_mcu+0x389>
	mov    -0x90(%rbp),%r14
	xor    %edx,%edx
	mov    -0x80(%rbp),%r15
	jmpq   3b709 <encode_mcu+0x269>
	sar    %r12d
	mov    %r12,%rax
	and    %r14d,%eax
	test   %eax,%eax
	je     3b86d <encode_mcu+0x3cd>
	mov    %r15,%rdx
	mov    %rbx,%rdi
	mov    %r13,%rsi
	callq  3a610 <arith_encode>
	xor    %edx,%edx
	mov    %r12,%rax
	and    $0xfffffffe,%eax
	test   %eax,%eax
	jne    3b85d <encode_mcu+0x3bd>
	mov    -0x90(%rbp),%r8
	mov    -0x58(%rbp),%r12
	mov    -0x38(%rbp),%r13
	mov    -0x30(%rbp),%r14
	jmpq   3b6ae <encode_mcu+0x20e>
	lea    -0x3(%r15,%r15,2),%eax
	movslq %eax,%r12
	add    0xe8(%r8,%rcx,8),%r12
	mov    %rbx,%rdi
	mov    %r12,%rsi
	callq  3a610 <arith_encode>
	mov    %r15,%rcx
	xor    %edx,%edx
	jmp    3b8cf <encode_mcu+0x42f>
	mov    %rbx,%rdi
	callq  3a610 <arith_encode>
	add    $0x3,%r12
	mov    %r15,%rcx
	xor    %edx,%edx
	lea    0x1(%r12),%rsi
	lea    0x1(%rcx),%r15d
	movslq %ecx,%rax
	movslq 0x0(%r13,%rax,4),%rax
	movswq (%r14,%rax,2),%rax
	test   %ax,%ax
	je     3b8be <encode_mcu+0x41e>
	mov    %rbx,%rdi
	mov    $0x1,%r13d
	mov    %r13,%rdx
	mov    %r15,-0x88(%rbp)
	mov    %rcx,%r14
	mov    %rax,%r15
	callq  3a610 <arith_encode>
	test   %r15w,%r15w
	jg     3b92a <encode_mcu+0x48a>
	mov    %rbx,%rdi
	mov    -0x50(%rbp),%rsi
	mov    %r13,%rdx
	callq  3a610 <arith_encode>
	neg    %r15d
	mov    %r14,%rax
	mov    %r15,%rcx
	xor    %edx,%edx
	jmp    3b94b <encode_mcu+0x4ab>
	mov    %rbx,%rdi
	mov    -0x50(%rbp),%rsi
	xor    %r13d,%r13d
	mov    %r13,%rdx
	callq  3a610 <arith_encode>
	mov    %r14,%rax
	mov    %r15,%rcx
	mov    %r13,%rdx
	mov    $0x1,%r13d
	lea    0x2(%r12),%r15
	lea    -0x1(%rcx),%r14d
	test   %r14d,%r14d
	jne    3b972 <encode_mcu+0x4d2>
	mov    %rdx,%r12
	mov    %rbx,%rdi
	mov    %r15,%rsi
	callq  3a610 <arith_encode>
	add    $0xe,%r15
	xor    %edx,%edx
	jmpq   3b7e3 <encode_mcu+0x343>
	mov    %rax,%r12
	mov    %rbx,%rdi
	mov    %r15,%rsi
	mov    %r13,%rdx
	callq  3a610 <arith_encode>
	mov    %r14,%rax
	and    $0xfffffffe,%eax
	test   %eax,%eax
	jne    3b994 <encode_mcu+0x4f4>
	xor    %edx,%edx
	mov    %r13,%r12
	jmp    3b95c <encode_mcu+0x4bc>
	mov    %r15,%rsi
	mov    %rbx,%rdi
	mov    %r13,%rdx
	callq  3a610 <arith_encode>
	mov    -0x80(%rbp),%rdx
	mov    -0x90(%rbp),%rax
	mov    0xe8(%rax,%rdx,8),%rcx
	movzbl 0xe0(%rbx,%rdx,1),%eax
	cmp    %eax,%r12d
	jle    3b9ca <encode_mcu+0x52a>
	pushq  -0x40(%rbp)
	popq   -0x60(%rbp)
	jmp    3b9d0 <encode_mcu+0x530>
	pushq  -0x48(%rbp)
	popq   -0x60(%rbp)
	mov    %r14,%rdx
	sar    %edx
	mov    -0x60(%rbp),%rax
	lea    (%rax,%rcx,1),%r15
	mov    %r14,-0x78(%rbp)
	mov    %rdx,%r14
	mov    $0x2,%r12d
	jmp    3ba04 <encode_mcu+0x564>
	mov    %rbx,%rdi
	mov    %r15,%rsi
	mov    %r13,%rdx
	callq  3a610 <arith_encode>
	sar    %r14d
	add    $0x1,%r15
	add    %r12d,%r12d
	mov    %r14,%rax
	and    $0xfffffffe,%eax
	test   %eax,%eax
	jne    3b9ec <encode_mcu+0x54c>
	mov    -0x78(%rbp),%r14
	xor    %edx,%edx
	jmpq   3b95c <encode_mcu+0x4bc>
	nopl   0x0(%rax)

003ba20 <start_pass>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x40,%rsp
	mov    %r14,-0x20(%rbp)
	mov    %r15,-0x28(%rbp)
	mov    %rbx,-0x8(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    0x1f0(%rdi),%r14
	mov    %r14,-0x38(%rbp)
	test   %esi,%esi
	jne    3ba50 <start_pass+0x30>
	mov    %rdi,%rbx
	jmp    3ba65 <start_pass+0x45>
	mov    (%rdi),%rax
	movl   $0x30,0x28(%rax)
	mov    (%rdi),%rax
	mov    (%rax),%rax
	mov    %rdi,%rbx
	callq  *%rax
	mov    $0x1,%esi
	mov    $0x40,%edx
	xor    %r12d,%r12d
	mov    $0x100,%eax
	movslq 0x134(%rbx),%rcx
	test   %ecx,%ecx
	jne    3ba95 <start_pass+0x75>
	lea    -0x5e9(%rip),%rcx        # 3b4a0 <encode_mcu>
	mov    %rcx,0x8(%r14)
	mov    %r12,%r13
	jmpq   3bc62 <start_pass+0x242>
	movslq 0x1a4(%rbx),%rcx
	test   %ecx,%ecx
	je     3bcca <start_pass+0x2aa>
	movslq 0x19c(%rbx),%rcx
	test   %ecx,%ecx
	je     3bce8 <start_pass+0x2c8>
	lea    -0x93a(%rip),%rcx        # 3b180 <encode_mcu_AC_refine>
	mov    %rcx,0x8(%r14)
	mov    %r12,%r13
	jmpq   3bc62 <start_pass+0x242>
	movslq %r13d,%rcx
	mov    0x148(%rbx,%rcx,8),%r15
	movslq 0x134(%rbx),%rdi
	test   %edi,%edi
	je     3bafa <start_pass+0xda>
	movslq 0x19c(%rbx),%rdi
	test   %edi,%edi
	jne    3bbaf <start_pass+0x18f>
	movslq 0x1a4(%rbx),%rdi
	test   %edi,%edi
	jne    3bbaf <start_pass+0x18f>
	movslq 0x14(%r15),%rax
	test   %eax,%eax
	js     3bb07 <start_pass+0xe7>
	cmp    $0xf,%eax
	jle    3bb43 <start_pass+0x123>
	mov    (%rbx),%rdx
	movl   $0x7d,0x28(%rdx)
	mov    (%rbx),%rdx
	mov    %eax,0x2c(%rdx)
	mov    (%rbx),%rdx
	mov    (%rdx),%rdx
	mov    %rbx,%rdi
	mov    %r13,-0x30(%rbp)
	mov    %rax,%r12
	mov    %rcx,%r13
	callq  *%rdx
	mov    %r12,%rax
	mov    %r13,%rcx
	mov    $0x40,%edx
	mov    $0x1,%esi
	xor    %r12d,%r12d
	mov    -0x30(%rbp),%r13
	mov    0x68(%r14,%rax,8),%rdi
	test   %rdi,%rdi
	jne    3bb7b <start_pass+0x15b>
	mov    0x8(%rbx),%rdi
	mov    (%rdi),%r8
	mov    %rbx,%rdi
	mov    %r13,-0x30(%rbp)
	mov    %rax,%r12
	mov    %rcx,%r13
	callq  *%r8
	mov    %rax,0x68(%r14,%r12,8)
	mov    %r12,%rax
	mov    %r13,%rcx
	mov    $0x40,%edx
	xor    %r12d,%r12d
	mov    -0x30(%rbp),%r13
	mov    0x68(%r14,%rax,8),%rdi
	mov    %r12,%rsi
	mov    %rcx,%r12
	callq  41e0 <memset@plt>
	movl   $0x0,0x40(%r14,%r12,4)
	movl   $0x0,0x50(%r14,%r12,4)
	mov    $0x100,%eax
	mov    $0x40,%edx
	mov    $0x1,%esi
	xor    %r12d,%r12d
	movslq 0x134(%rbx),%rcx
	test   %ecx,%ecx
	je     3bbc9 <start_pass+0x1a9>
	movslq 0x1a0(%rbx),%rcx
	test   %ecx,%ecx
	je     3bc5a <start_pass+0x23a>
	movslq 0x18(%r15),%r15
	test   %r15d,%r15d
	js     3bbd8 <start_pass+0x1b8>
	cmp    $0xf,%r15d
	jle    3bc03 <start_pass+0x1e3>
	mov    (%rbx),%rax
	movl   $0x7d,0x28(%rax)
	mov    (%rbx),%rax
	mov    %r15d,0x2c(%rax)
	mov    (%rbx),%rax
	mov    (%rax),%rax
	mov    %rbx,%rdi
	callq  *%rax
	mov    $0x100,%eax
	mov    $0x40,%edx
	mov    $0x1,%esi
	mov    0xe8(%r14,%r15,8),%rcx
	test   %rcx,%rcx
	jne    3bc36 <start_pass+0x216>
	mov    0x8(%rbx),%rcx
	mov    (%rcx),%rcx
	mov    %rax,%rdx
	mov    %rbx,%rdi
	callq  *%rcx
	mov    %rax,0xe8(%r14,%r15,8)
	mov    $0x100,%eax
	mov    $0x40,%edx
	mov    $0x1,%esi
	mov    0xe8(%r14,%r15,8),%rdi
	mov    %rdx,%r14
	mov    %rax,%rdx
	mov    %rsi,%r15
	mov    %r12,%rsi
	callq  41e0 <memset@plt>
	mov    %r14,%rdx
	mov    %r15,%rsi
	mov    $0x100,%eax
	add    $0x1,%r13d
	mov    -0x38(%rbp),%r14
	movslq 0x144(%rbx),%rcx
	cmp    %r13d,%ecx
	jg     3bac6 <start_pass+0xa6>
	movq   $0x0,0x18(%r14)
	movq   $0x10000,0x20(%r14)
	movq   $0x0,0x28(%r14)
	movq   $0x0,0x30(%r14)
	movl   $0xb,0x38(%r14)
	movl   $0xffffffff,0x3c(%r14)
	mov    0x118(%rbx),%eax
	mov    %eax,0x60(%r14)
	movl   $0x0,0x64(%r14)
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	leaveq 
	retq   
	movslq 0x19c(%rbx),%rcx
	test   %ecx,%ecx
	je     3bcfb <start_pass+0x2db>
	lea    -0xfac(%rip),%rcx        # 3ad30 <encode_mcu_AC_first>
	mov    %rcx,0x8(%r14)
	mov    %r12,%r13
	jmpq   3bc62 <start_pass+0x242>
	lea    -0xc4f(%rip),%rcx        # 3b0a0 <encode_mcu_DC_refine>
	mov    %rcx,0x8(%r14)
	mov    %r12,%r13
	jmpq   3bc62 <start_pass+0x242>
	lea    -0x1292(%rip),%rcx        # 3aa70 <encode_mcu_DC_first>
	mov    %rcx,0x8(%r14)
	mov    %r12,%r13
	jmpq   3bc62 <start_pass+0x242>
	xchg   %ax,%ax

003bd10 <jinit_arith_decoder>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    %r15,-0x10(%rbp)
	mov    0x8(%rdi),%rax
	mov    (%rax),%rax
	mov    %r14,%r15
	mov    $0x1,%esi
	mov    $0x158,%edx
	mov    %rdi,%r14
	callq  *%rax
	mov    %rax,0x250(%r14)
	lea    0x12bd(%rip),%rcx        # 3d000 <start_pass>
	mov    %rcx,(%rax)
	xor    %r8d,%r8d
	mov    %r8,%rcx
	jmp    3bd69 <jinit_arith_decoder+0x59>
	movslq %ecx,%rdx
	movq   $0x0,0x50(%rax,%rdx,8)
	movq   $0x0,0xd0(%rax,%rdx,8)
	add    $0x1,%ecx
	cmp    $0xf,%ecx
	jle    3bd4e <jinit_arith_decoder+0x3e>
	movb   $0x71,0x150(%rax)
	movslq 0x138(%r14),%rax
	test   %eax,%eax
	jne    3bd89 <jinit_arith_decoder+0x79>
	mov    %r15,%r14
	mov    -0x10(%rbp),%r15
	leaveq 
	retq   
	mov    0x8(%r14),%rax
	mov    (%rax),%rcx
	movslq 0x38(%r14),%rax
	shl    $0x6,%eax
	movslq %eax,%rdx
	shl    $0x2,%rdx
	mov    %r14,%rdi
	mov    %r15,-0x8(%rbp)
	mov    %r8,%r15
	mov    $0x1,%esi
	callq  *%rcx
	mov    %rax,0xc0(%r14)
	mov    %r15,%rdx
	jmp    3bdd0 <jinit_arith_decoder+0xc0>
	movl   $0xffffffff,(%rax)
	add    $0x4,%rax
	add    $0x1,%ecx
	cmp    $0x3f,%ecx
	jle    3bdbb <jinit_arith_decoder+0xab>
	add    $0x1,%edx
	movslq 0x38(%r14),%rcx
	cmp    %edx,%ecx
	jg     3bde2 <jinit_arith_decoder+0xd2>
	mov    -0x8(%rbp),%r14
	mov    -0x10(%rbp),%r15
	leaveq 
	retq   
	mov    %r15,%rcx
	jmp    3bdc8 <jinit_arith_decoder+0xb8>
	nopw   0x0(%rax,%rax,1)

003bdf0 <get_byte>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x10,%rsp
	mov    0x28(%rdi),%rax
	mov    0x8(%rax),%rcx
	test   %rcx,%rcx
	je     3be20 <get_byte+0x30>
	mov    0x8(%rax),%rcx
	add    $0xffffffffffffffff,%rcx
	mov    %rcx,0x8(%rax)
	mov    (%rax),%rdx
	lea    0x1(%rdx),%rcx
	mov    %rcx,(%rax)
	movzbl (%rdx),%eax
	leaveq 
	retq   
	mov    %rdi,%rcx
	mov    %r14,-0x8(%rbp)
	mov    %r15,-0x10(%rbp)
	mov    %rdi,%r14
	mov    %rcx,%rdi
	mov    %rax,%r15
	callq  *0x18(%r15)
	test   %eax,%eax
	je     3be49 <get_byte+0x59>
	mov    %r15,%rax
	mov    -0x10(%rbp),%r15
	mov    -0x8(%rbp),%r14
	jmp    3be05 <get_byte+0x15>
	mov    (%r14),%rax
	movl   $0x18,0x28(%rax)
	mov    (%r14),%rax
	mov    (%rax),%rax
	mov    %r14,%rdi
	callq  *%rax
	mov    %r15,%rax
	mov    -0x10(%rbp),%r15
	mov    -0x8(%rbp),%r14
	jmp    3be05 <get_byte+0x15>
	nopl   0x0(%rax,%rax,1)

003be70 <arith_decode>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %rsi,-0x28(%rbp)
	mov    %r12,-0x8(%rbp)
	mov    %r13,-0x10(%rbp)
	mov    %r14,-0x18(%rbp)
	mov    %r15,-0x20(%rbp)
	mov    %rdi,%r13
	mov    0x250(%r13),%r12
	xor    %r14d,%r14d
	mov    $0xff,%r15d
	jmp    3bf0b <arith_decode+0x9b>
	movslq 0x28(%r12),%rax
	add    $0xffffffff,%eax
	mov    %eax,0x28(%r12)
	test   %eax,%eax
	jns    3befe <arith_decode+0x8e>
	movslq 0x21c(%r13),%rax
	test   %eax,%eax
	je     3bf80 <arith_decode+0x110>
	mov    %r14,%rax
	movslq %eax,%rax
	mov    0x18(%r12),%rcx
	shl    $0x8,%rcx
	or     %rcx,%rax
	mov    %rax,0x18(%r12)
	movslq 0x28(%r12),%rax
	lea    0x8(%rax),%ecx
	mov    %ecx,0x28(%r12)
	test   %ecx,%ecx
	jns    3befe <arith_decode+0x8e>
	add    $0x9,%eax
	mov    %eax,0x28(%r12)
	test   %eax,%eax
	jne    3befe <arith_decode+0x8e>
	movq   $0x8000,0x20(%r12)
	mov    0x20(%r12),%rax
	add    %rax,%rax
	mov    %rax,0x20(%r12)
	mov    0x20(%r12),%rdx
	cmp    $0x7fff,%rdx
	jle    3bea1 <arith_decode+0x31>
	mov    0x320a8(%rip),%rsi        # 6dfc8 <jpeg_aritab@@LIBJPEG_6.2+0x12870>
	mov    -0x28(%rbp),%r8
	movzbl (%r8),%eax
	mov    %rax,%rcx
	and    $0x7f,%ecx
	movslq %ecx,%rcx
	mov    (%rsi,%rcx,8),%rsi
	mov    %rsi,%rdi
	sar    $0x10,%rdi
	sub    %rdi,%rdx
	mov    %rdx,0x20(%r12)
	mov    %rsi,%r9
	shr    $0x8,%r9
	mov    0x28(%r12),%ecx
	mov    %rdx,%r10
	shl    %cl,%r10
	mov    0x18(%r12),%rcx
	cmp    %r10,%rcx
	jge    3bfae <arith_decode+0x13e>
	cmp    $0x7fff,%rdx
	jg     3bfe6 <arith_decode+0x176>
	cmp    %rdi,%rdx
	jl     3bffb <arith_decode+0x18b>
	mov    %rax,%rcx
	and    $0x80,%cl
	add    %r9d,%ecx
	mov    %cl,(%r8)
	jmp    3bfe6 <arith_decode+0x176>
	mov    %r13,%rdi
	callq  3bdf0 <get_byte>
	cmp    $0xff,%eax
	jne    3bec4 <arith_decode+0x54>
	mov    %r13,%rdi
	callq  3bdf0 <get_byte>
	cmp    $0xff,%eax
	je     3bf93 <arith_decode+0x123>
	test   %eax,%eax
	jne    3c010 <arith_decode+0x1a0>
	mov    %r15,%rax
	jmpq   3bec4 <arith_decode+0x54>
	sub    %r10,%rcx
	mov    %rcx,0x18(%r12)
	cmp    %rdi,%rdx
	jl     3bfd5 <arith_decode+0x165>
	mov    %rdi,0x20(%r12)
	mov    %rax,%rcx
	xor    $0x80,%ecx
	and    $0x80,%al
	add    %esi,%eax
	mov    %al,(%r8)
	mov    %rcx,%rax
	jmp    3bfe6 <arith_decode+0x176>
	mov    %rdi,0x20(%r12)
	mov    %rax,%rcx
	and    $0x80,%cl
	add    %r9d,%ecx
	mov    %cl,(%r8)
	shr    $0x7,%eax
	mov    -0x20(%rbp),%r15
	mov    -0x18(%rbp),%r14
	mov    -0x10(%rbp),%r13
	mov    -0x8(%rbp),%r12
	leaveq 
	retq   
	mov    %rax,%rcx
	xor    $0x80,%ecx
	and    $0x80,%al
	add    %esi,%eax
	mov    %al,(%r8)
	mov    %rcx,%rax
	jmp    3bfe6 <arith_decode+0x176>
	mov    %eax,0x21c(%r13)
	mov    %r14,%rax
	jmpq   3bec4 <arith_decode+0x54>
	nop

003c020 <process_restart>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %rbx,-0x8(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %r15,-0x28(%rbp)
	mov    0x250(%rdi),%r14
	xor    %ebx,%ebx
	mov    $0x100,%r15d
	mov    $0x40,%r12d
	mov    0x248(%rdi),%rax
	mov    0x10(%rax),%rax
	mov    %rdi,%r13
	callq  *%rax
	test   %eax,%eax
	je     3c070 <process_restart+0x50>
	mov    %r15,%rdx
	mov    %rbx,%r15
	jmpq   3c130 <process_restart+0x110>
	mov    0x0(%r13),%rax
	movl   $0x18,0x28(%rax)
	mov    0x0(%r13),%rax
	mov    (%rax),%rax
	mov    %r13,%rdi
	callq  *%rax
	mov    %r15,%rdx
	mov    %rbx,%r15
	jmpq   3c130 <process_restart+0x110>
	movslq %r15d,%rsi
	mov    0x1b8(%r13,%rsi,8),%rax
	movslq 0x138(%r13),%rcx
	test   %ecx,%ecx
	je     3c0be <process_restart+0x9e>
	movslq 0x20c(%r13),%rcx
	test   %ecx,%ecx
	jne    3c0fd <process_restart+0xdd>
	movslq 0x214(%r13),%rcx
	test   %ecx,%ecx
	jne    3c0fd <process_restart+0xdd>
	movslq 0x14(%rax),%rcx
	mov    0x50(%r14,%rcx,8),%rdi
	mov    %r12,%rdx
	mov    %rax,%r12
	mov    %rbx,%rax
	mov    %rsi,%rbx
	mov    %rax,%rsi
	callq  41e0 <memset@plt>
	movl   $0x0,0x2c(%r14,%rbx,4)
	movl   $0x0,0x3c(%r14,%rbx,4)
	mov    %r12,%rax
	mov    $0x40,%r12d
	mov    $0x100,%edx
	xor    %ebx,%ebx
	movslq 0x138(%r13),%rcx
	test   %ecx,%ecx
	je     3c113 <process_restart+0xf3>
	movslq 0x20c(%r13),%rcx
	test   %ecx,%ecx
	je     3c12c <process_restart+0x10c>
	movslq 0x18(%rax),%rax
	mov    0xd0(%r14,%rax,8),%rdi
	mov    %rbx,%rsi
	callq  41e0 <memset@plt>
	mov    $0x100,%edx
	add    $0x1,%r15d
	movslq 0x1b0(%r13),%rax
	cmp    %r15d,%eax
	jg     3c092 <process_restart+0x72>
	movq   $0x0,0x18(%r14)
	movq   $0x0,0x20(%r14)
	movl   $0xfffffff0,0x28(%r14)
	mov    0x170(%r13),%eax
	mov    %eax,0x4c(%r14)
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	leaveq 
	retq   
	nopl   0x0(%rax)

003c180 <decode_mcu_DC_first>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x60,%rsp
	mov    %rsi,-0x50(%rbp)
	mov    0x250(%rdi),%rcx
	mov    0x170(%rdi),%eax
	test   %eax,%eax
	jne    3c1ae <decode_mcu_DC_first+0x2e>
	mov    %r12,%rdx
	mov    %rdi,%r12
	mov    %r15,%r8
	mov    %rbx,%r15
	mov    %rcx,%rbx
	jmp    3c1f7 <decode_mcu_DC_first+0x77>
	mov    0x4c(%rcx),%eax
	test   %eax,%eax
	je     3c1c6 <decode_mcu_DC_first+0x46>
	mov    %r12,%rdx
	mov    %rdi,%r12
	mov    %r15,%r8
	mov    %rbx,%r15
	mov    %rcx,%rbx
	jmp    3c1ee <decode_mcu_DC_first+0x6e>
	mov    %rdi,%rax
	mov    %r15,-0x40(%rbp)
	mov    %rdi,-0x58(%rbp)
	mov    %rax,%rdi
	mov    %rbx,%r15
	mov    %rcx,%rbx
	callq  3c020 <process_restart>
	mov    %r12,%rdx
	mov    -0x50(%rbp),%rsi
	mov    -0x58(%rbp),%r12
	mov    -0x40(%rbp),%r8
	mov    0x4c(%rbx),%eax
	add    $0xffffffff,%eax
	mov    %eax,0x4c(%rbx)
	mov    $0x1,%eax
	movslq 0x28(%rbx),%rcx
	cmp    $0xffffffff,%ecx
	jne    3c210 <decode_mcu_DC_first+0x90>
	mov    %r15,%rbx
	mov    %r8,%r15
	mov    %rdx,%r12
	leaveq 
	retq   
	xor    %ecx,%ecx
	mov    %r8,-0x28(%rbp)
	mov    %r15,-0x8(%rbp)
	mov    %rdx,-0x10(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    %r14,-0x20(%rbp)
	jmp    3c256 <decode_mcu_DC_first+0xd6>
	movl   $0x0,0x3c(%rbx,%r15,4)
	movslq 0x2c(%rbx,%r15,4),%rax
	mov    0x218(%r12),%ecx
	shl    %cl,%rax
	mov    %ax,0x0(%r13)
	mov    -0x58(%rbp),%rax
	lea    0x1(%rax),%ecx
	mov    $0x1,%eax
	mov    -0x50(%rbp),%rsi
	cmp    0x1e0(%r12),%ecx
	jl     3c276 <decode_mcu_DC_first+0xf6>
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	mov    -0x28(%rbp),%r15
	leaveq 
	retq   
	movslq %ecx,%rax
	mov    (%rsi,%rax,8),%r13
	movslq 0x1e4(%r12,%rax,4),%r15
	mov    0x1b8(%r12,%r15,8),%rax
	movslq 0x14(%rax),%rax
	mov    %rax,-0x48(%rbp)
	movslq 0x3c(%rbx,%r15,4),%r14
	add    0x50(%rbx,%rax,8),%r14
	mov    %r12,%rdi
	mov    %r14,%rsi
	mov    %rcx,-0x58(%rbp)
	callq  3be70 <arith_decode>
	test   %eax,%eax
	je     3c228 <decode_mcu_DC_first+0xa8>
	lea    0x1(%r14),%rsi
	mov    %r12,%rdi
	callq  3be70 <arith_decode>
	mov    %rax,-0x38(%rbp)
	movslq %eax,%rcx
	lea    0x2(%rcx,%r14,1),%r14
	mov    %r12,%rdi
	mov    %r14,%rsi
	mov    %r13,-0x30(%rbp)
	mov    %rax,%r13
	callq  3be70 <arith_decode>
	test   %eax,%eax
	jne    3c32f <decode_mcu_DC_first+0x1af>
	mov    %r13,%rax
	xor    %r13d,%r13d
	mov    -0x48(%rbp),%rdi
	movzbl 0x140(%rdi,%r12,1),%ecx
	mov    $0x1,%edx
	mov    %rdx,%rsi
	shl    %cl,%rsi
	sar    %rsi
	cmp    %esi,%r13d
	jl     3c345 <decode_mcu_DC_first+0x1c5>
	movzbl 0x150(%rdi,%r12,1),%ecx
	shl    %cl,%rdx
	sar    %rdx
	cmp    %edx,%r13d
	jg     3c35e <decode_mcu_DC_first+0x1de>
	lea    0x4(,%rax,4),%eax
	mov    %eax,0x3c(%rbx,%r15,4)
	mov    %r15,%rax
	jmp    3c351 <decode_mcu_DC_first+0x1d1>
	mov    -0x48(%rbp),%rcx
	mov    0x50(%rbx,%rcx,8),%r14
	add    $0x14,%r14
	mov    %r15,-0x40(%rbp)
	mov    %rax,%r13
	jmp    3c385 <decode_mcu_DC_first+0x205>
	movl   $0x0,0x3c(%rbx,%r15,4)
	mov    %r15,%rax
	lea    0xe(%r14),%r15
	mov    %rax,-0x48(%rbp)
	mov    %r13,%r14
	jmp    3c3b6 <decode_mcu_DC_first+0x236>
	lea    0xc(,%rax,4),%eax
	mov    %eax,0x3c(%rbx,%r15,4)
	mov    %r15,%rax
	jmp    3c351 <decode_mcu_DC_first+0x1d1>
	mov    %r13,%rax
	and    $0x7fffffff,%eax
	cmp    $0x4000,%eax
	je     3c3ce <decode_mcu_DC_first+0x24e>
	add    $0x1,%r14
	add    %r13d,%r13d
	mov    %r12,%rdi
	mov    %r14,%rsi
	callq  3be70 <arith_decode>
	test   %eax,%eax
	jne    3c36f <decode_mcu_DC_first+0x1ef>
	mov    -0x40(%rbp),%r15
	mov    -0x38(%rbp),%rax
	jmpq   3c2ea <decode_mcu_DC_first+0x16a>
	sar    %r14d
	mov    %r12,%rdi
	mov    %r15,%rsi
	callq  3be70 <arith_decode>
	test   %eax,%eax
	je     3c3b6 <decode_mcu_DC_first+0x236>
	or     %r14d,%r13d
	mov    %r14,%rax
	and    $0xfffffffe,%eax
	test   %eax,%eax
	jne    3c3a1 <decode_mcu_DC_first+0x221>
	mov    -0x38(%rbp),%rax
	test   %eax,%eax
	jne    3c40f <decode_mcu_DC_first+0x28f>
	add    $0x1,%r13d
	jmp    3c412 <decode_mcu_DC_first+0x292>
	mov    (%r12),%rax
	movl   $0x7e,0x28(%rax)
	mov    (%r12),%rax
	mov    0x8(%rax),%rax
	mov    %r12,%rdi
	mov    $0xffffffffffffffff,%rsi
	callq  *%rax
	movl   $0xffffffff,0x28(%rbx)
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	mov    $0x1,%eax
	mov    -0x28(%rbp),%r15
	leaveq 
	retq   
	not    %r13d
	mov    -0x48(%rbp),%r15
	add    0x2c(%rbx,%r15,4),%r13d
	mov    %r13d,0x2c(%rbx,%r15,4)
	mov    -0x30(%rbp),%r13
	jmpq   3c231 <decode_mcu_DC_first+0xb1>
	nopl   0x0(%rax)

003c430 <decode_mcu_AC_first>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x70,%rsp
	mov    0x250(%rdi),%rcx
	mov    0x170(%rdi),%eax
	test   %eax,%eax
	jne    3c463 <decode_mcu_AC_first+0x33>
	mov    %rbx,%rdx
	mov    %rdi,%rbx
	mov    %r15,%r8
	mov    %r13,%r15
	mov    %r14,%r9
	mov    %r12,%rdi
	mov    %rcx,%r12
	mov    %rdi,%rcx
	jmp    3c4c9 <decode_mcu_AC_first+0x99>
	mov    0x4c(%rcx),%eax
	test   %eax,%eax
	je     3c484 <decode_mcu_AC_first+0x54>
	mov    %rbx,%rdx
	mov    %rdi,%rbx
	mov    %r15,%r8
	mov    %r13,%r15
	mov    %r14,%r9
	mov    %r12,%rdi
	mov    %rcx,%r12
	mov    %rdi,%rcx
	jmp    3c4bc <decode_mcu_AC_first+0x8c>
	mov    %rdi,%rax
	mov    %r14,-0x58(%rbp)
	mov    %r15,-0x68(%rbp)
	mov    %rsi,-0x70(%rbp)
	mov    %rbx,%r14
	mov    %rdi,%rbx
	mov    %rax,%rdi
	mov    %r13,%r15
	mov    %r12,%r13
	mov    %rcx,%r12
	callq  3c020 <process_restart>
	mov    %r13,%rcx
	mov    %r14,%rdx
	mov    -0x70(%rbp),%rsi
	mov    -0x68(%rbp),%r8
	mov    -0x58(%rbp),%r9
	mov    0x4c(%r12),%eax
	add    $0xffffffff,%eax
	mov    %eax,0x4c(%r12)
	mov    $0x1,%eax
	movslq 0x28(%r12),%rdi
	cmp    $0xffffffff,%edi
	jne    3c4e9 <decode_mcu_AC_first+0xb9>
	mov    %rdx,%rbx
	mov    %rcx,%r12
	mov    %r15,%r13
	mov    %r8,%r15
	mov    %r9,%r14
	leaveq 
	retq   
	mov    0x1b8(%rbx),%rax
	movslq 0x18(%rax),%rax
	mov    %rax,-0x68(%rbp)
	mov    (%rsi),%rsi
	mov    %rsi,-0x38(%rbp)
	movslq 0x20c(%rbx),%r14
	mov    0x31acb(%rip),%rsi        # 6dfd8 <jpeg_natural_order@@LIBJPEG_6.2+0x129f4>
	mov    %rsi,-0x40(%rbp)
	lea    0x150(%r12),%r13
	mov    %r13,-0x70(%rbp)
	mov    $0xbd,%esi
	mov    %rsi,-0x58(%rbp)
	mov    $0xd9,%esi
	mov    %rsi,-0x50(%rbp)
	mov    %r9,-0x20(%rbp)
	mov    %r8,-0x28(%rbp)
	mov    %rdx,-0x8(%rbp)
	mov    %rcx,-0x10(%rbp)
	mov    %r15,-0x18(%rbp)
	jmp    3c575 <decode_mcu_AC_first+0x145>
	not    %r14d
	mov    0x218(%rbx),%ecx
	shl    %cl,%r14d
	mov    -0x48(%rbp),%rdx
	movslq %edx,%rax
	mov    -0x40(%rbp),%rcx
	movslq (%rcx,%rax,4),%rax
	mov    -0x38(%rbp),%rcx
	mov    %r14w,(%rcx,%rax,2)
	lea    0x1(%rdx),%r14d
	mov    -0x70(%rbp),%r13
	mov    -0x68(%rbp),%rax
	cmp    0x210(%rbx),%r14d
	jle    3c599 <decode_mcu_AC_first+0x169>
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	mov    $0x1,%eax
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	leaveq 
	retq   
	lea    -0x3(%r14,%r14,2),%ecx
	movslq %ecx,%r15
	add    0xd0(%r12,%rax,8),%r15
	mov    %rbx,%rdi
	mov    %r15,%rsi
	callq  3be70 <arith_decode>
	test   %eax,%eax
	je     3c5e7 <decode_mcu_AC_first+0x1b7>
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	mov    $0x1,%eax
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	leaveq 
	retq   
	movslq 0x210(%rbx),%rax
	add    $0x1,%r14d
	cmp    %r14d,%eax
	jl     3c62c <decode_mcu_AC_first+0x1fc>
	add    $0x3,%r15
	lea    0x1(%r15),%rsi
	mov    %rbx,%rdi
	callq  3be70 <arith_decode>
	test   %eax,%eax
	je     3c5d3 <decode_mcu_AC_first+0x1a3>
	mov    %r13,%rsi
	mov    %rbx,%rdi
	callq  3be70 <arith_decode>
	mov    %rax,-0x30(%rbp)
	add    $0x2,%r15
	mov    %rbx,%rdi
	mov    %r15,%rsi
	callq  3be70 <arith_decode>
	test   %eax,%eax
	jne    3c66d <decode_mcu_AC_first+0x23d>
	xor    %r13d,%r13d
	add    $0xe,%r15
	mov    %r14,-0x48(%rbp)
	mov    %r13,%r14
	jmpq   3c6b5 <decode_mcu_AC_first+0x285>
	mov    (%rbx),%rax
	movl   $0x7e,0x28(%rax)
	mov    (%rbx),%rax
	mov    0x8(%rax),%rax
	mov    %rbx,%rdi
	mov    $0xffffffffffffffff,%rsi
	callq  *%rax
	movl   $0xffffffff,0x28(%r12)
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	mov    $0x1,%eax
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	leaveq 
	retq   
	mov    %rax,%r13
	mov    %rbx,%rdi
	mov    %r15,%rsi
	callq  3be70 <arith_decode>
	test   %eax,%eax
	je     3c61c <decode_mcu_AC_first+0x1ec>
	mov    -0x68(%rbp),%rax
	mov    0xd0(%r12,%rax,8),%rcx
	movzbl 0x160(%rbx,%rax,1),%eax
	cmp    %r14d,%eax
	jge    3c6d4 <decode_mcu_AC_first+0x2a4>
	pushq  -0x50(%rbp)
	popq   -0x60(%rbp)
	jmp    3c6da <decode_mcu_AC_first+0x2aa>
	sar    %r13d
	mov    %rbx,%rdi
	mov    %r15,%rsi
	callq  3be70 <arith_decode>
	test   %eax,%eax
	je     3c6b5 <decode_mcu_AC_first+0x285>
	or     %r13d,%r14d
	mov    %r13,%rax
	and    $0xfffffffe,%eax
	test   %eax,%eax
	jne    3c6a0 <decode_mcu_AC_first+0x270>
	mov    -0x30(%rbp),%rax
	test   %eax,%eax
	jne    3c545 <decode_mcu_AC_first+0x115>
	add    $0x1,%r14d
	jmpq   3c548 <decode_mcu_AC_first+0x118>
	pushq  -0x58(%rbp)
	popq   -0x60(%rbp)
	mov    -0x60(%rbp),%rax
	lea    (%rax,%rcx,1),%r15
	add    %r13d,%r13d
	mov    %r14,-0x60(%rbp)
	jmp    3c701 <decode_mcu_AC_first+0x2d1>
	mov    %r13,%rax
	and    $0x7fffffff,%eax
	cmp    $0x4000,%eax
	je     3c719 <decode_mcu_AC_first+0x2e9>
	add    $0x1,%r15
	add    %r13d,%r13d
	mov    %rbx,%rdi
	mov    %r15,%rsi
	callq  3be70 <arith_decode>
	test   %eax,%eax
	jne    3c6eb <decode_mcu_AC_first+0x2bb>
	mov    -0x60(%rbp),%r14
	jmpq   3c61c <decode_mcu_AC_first+0x1ec>
	mov    (%rbx),%rax
	movl   $0x7e,0x28(%rax)
	mov    (%rbx),%rax
	mov    0x8(%rax),%rax
	mov    %rbx,%rdi
	mov    $0xffffffffffffffff,%rsi
	callq  *%rax
	movl   $0xffffffff,0x28(%r12)
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	mov    $0x1,%eax
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	leaveq 
	retq   
	nopw   0x0(%rax,%rax,1)

003c760 <decode_mcu_DC_refine>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x30,%rsp
	mov    %r13,-0x18(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %r15,-0x28(%rbp)
	mov    %rbx,-0x8(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    0x250(%rdi),%r14
	mov    0x170(%rdi),%eax
	test   %eax,%eax
	jne    3c795 <decode_mcu_DC_refine+0x35>
	mov    %rdi,%rbx
	mov    %rsi,%r12
	jmp    3c7bb <decode_mcu_DC_refine+0x5b>
	mov    0x4c(%r14),%eax
	test   %eax,%eax
	je     3c7a5 <decode_mcu_DC_refine+0x45>
	mov    %rdi,%rbx
	mov    %rsi,%r12
	jmp    3c7b0 <decode_mcu_DC_refine+0x50>
	mov    %rsi,%r12
	mov    %rdi,%rbx
	callq  3c020 <process_restart>
	mov    0x4c(%r14),%eax
	add    $0xffffffff,%eax
	mov    %eax,0x4c(%r14)
	mov    $0x1,%r13d
	mov    0x218(%rbx),%ecx
	shl    %cl,%r13d
	lea    0x150(%r14),%r15
	xor    %r14d,%r14d
	jmp    3c7fb <decode_mcu_DC_refine+0x9b>
	mov    %rbx,%rdi
	mov    %r15,%rsi
	callq  3be70 <arith_decode>
	test   %eax,%eax
	je     3c7f7 <decode_mcu_DC_refine+0x97>
	movslq %r14d,%rax
	mov    (%r12,%rax,8),%rcx
	movswq (%rcx),%rax
	or     %r13w,%ax
	mov    %ax,(%rcx)
	add    $0x1,%r14d
	movslq 0x1e0(%rbx),%rax
	cmp    %r14d,%eax
	jg     3c7d6 <decode_mcu_DC_refine+0x76>
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	mov    $0x1,%eax
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	leaveq 
	retq   
	data16 nopw %cs:0x0(%rax,%rax,1)
	nopl   (%rax)

003c830 <decode_mcu_AC_refine>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x60,%rsp
	mov    0x250(%rdi),%r8
	mov    %r8,-0x38(%rbp)
	mov    0x170(%rdi),%eax
	test   %eax,%eax
	jne    3c861 <decode_mcu_AC_refine+0x31>
	mov    %rbx,%r9
	mov    %rdi,%rbx
	mov    %r15,%rdi
	mov    %r12,%r15
	mov    %r13,%r10
	mov    %r14,%r11
	jmp    3c8bd <decode_mcu_AC_refine+0x8d>
	mov    0x4c(%r8),%eax
	test   %eax,%eax
	je     3c87d <decode_mcu_AC_refine+0x4d>
	mov    %rbx,%r9
	mov    %rdi,%rbx
	mov    %r15,%rdi
	mov    %r12,%r15
	mov    %r13,%r10
	mov    %r14,%r11
	jmp    3c8b2 <decode_mcu_AC_refine+0x82>
	mov    %rdi,%rax
	mov    %r15,-0x50(%rbp)
	mov    %rsi,-0x58(%rbp)
	mov    %rdi,-0x60(%rbp)
	mov    %rax,%rdi
	mov    %r12,%r15
	mov    %r8,%r12
	callq  3c020 <process_restart>
	mov    %r12,%r8
	mov    %rbx,%r9
	mov    %r13,%r10
	mov    %r14,%r11
	mov    -0x60(%rbp),%rbx
	mov    -0x58(%rbp),%rsi
	mov    -0x50(%rbp),%rdi
	mov    0x4c(%r8),%eax
	add    $0xffffffff,%eax
	mov    %eax,0x4c(%r8)
	mov    $0x1,%eax
	movslq 0x28(%r8),%rcx
	cmp    $0xffffffff,%ecx
	jne    3c8dc <decode_mcu_AC_refine+0xac>
	mov    %r9,%rbx
	mov    %r15,%r12
	mov    %rdi,%r15
	mov    %r10,%r13
	mov    %r11,%r14
	leaveq 
	retq   
	mov    (%rsi),%r13
	mov    0x1b8(%rbx),%rcx
	movslq 0x18(%rcx),%rsi
	mov    %rsi,-0x40(%rbp)
	mov    0x218(%rbx),%ecx
	movslq 0x210(%rbx),%rdx
	mov    0x316d6(%rip),%r12        # 6dfd8 <jpeg_natural_order@@LIBJPEG_6.2+0x129f4>
	jmp    3c91a <decode_mcu_AC_refine+0xea>
	movslq %edx,%r14
	movslq (%r12,%r14,4),%r14
	movswq 0x0(%r13,%r14,2),%r14
	test   %r14w,%r14w
	jne    3c91e <decode_mcu_AC_refine+0xee>
	add    $0xffffffff,%edx
	test   %edx,%edx
	jg     3c904 <decode_mcu_AC_refine+0xd4>
	movslq 0x20c(%rbx),%r14
	mov    %rdi,-0x28(%rbp)
	mov    $0xffffffffffffffff,%rdi
	shl    %cl,%edi
	mov    %rdi,-0x48(%rbp)
	shl    %cl,%eax
	mov    %rax,-0x50(%rbp)
	lea    0x150(%r8),%rax
	mov    %rax,-0x60(%rbp)
	mov    %r9,-0x8(%rbp)
	mov    %r15,-0x10(%rbp)
	mov    %r10,-0x18(%rbp)
	mov    %r11,-0x20(%rbp)
	jmp    3c987 <decode_mcu_AC_refine+0x157>
	mov    %rbx,%rdi
	mov    -0x60(%rbp),%rsi
	callq  3be70 <arith_decode>
	test   %eax,%eax
	jne    3c9ab <decode_mcu_AC_refine+0x17b>
	mov    -0x58(%rbp),%rcx
	mov    -0x50(%rbp),%rax
	mov    %ax,0x0(%r13,%rcx,2)
	add    $0x1,%r14d
	mov    -0x30(%rbp),%rdx
	mov    -0x40(%rbp),%rsi
	mov    -0x38(%rbp),%r8
	cmp    0x210(%rbx),%r14d
	jle    3c9bb <decode_mcu_AC_refine+0x18b>
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	mov    $0x1,%eax
	mov    -0x28(%rbp),%r15
	leaveq 
	retq   
	mov    -0x58(%rbp),%rcx
	mov    -0x48(%rbp),%rax
	mov    %ax,0x0(%r13,%rcx,2)
	jmp    3c977 <decode_mcu_AC_refine+0x147>
	lea    -0x3(%r14,%r14,2),%eax
	movslq %eax,%r15
	add    0xd0(%r8,%rsi,8),%r15
	cmp    %r14d,%edx
	jl     3c9d6 <decode_mcu_AC_refine+0x1a6>
	mov    %rdx,-0x30(%rbp)
	jmp    3ca30 <decode_mcu_AC_refine+0x200>
	mov    %rbx,%rdi
	mov    %r15,%rsi
	mov    %rdx,-0x30(%rbp)
	callq  3be70 <arith_decode>
	test   %eax,%eax
	je     3ca30 <decode_mcu_AC_refine+0x200>
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	mov    $0x1,%eax
	mov    -0x28(%rbp),%r15
	leaveq 
	retq   
	lea    0x1(%r15),%rsi
	mov    %rbx,%rdi
	mov    %rax,-0x58(%rbp)
	callq  3be70 <arith_decode>
	test   %eax,%eax
	jne    3c959 <decode_mcu_AC_refine+0x129>
	movslq 0x210(%rbx),%rax
	add    $0x1,%r14d
	cmp    %r14d,%eax
	jl     3ca75 <decode_mcu_AC_refine+0x245>
	add    $0x3,%r15
	movslq %r14d,%rax
	movslq (%r12,%rax,4),%rax
	movswq 0x0(%r13,%rax,2),%rcx
	test   %cx,%cx
	je     3ca04 <decode_mcu_AC_refine+0x1d4>
	lea    0x2(%r15),%rsi
	mov    %rax,%r15
	mov    %rbx,%rdi
	callq  3be70 <arith_decode>
	test   %eax,%eax
	je     3c977 <decode_mcu_AC_refine+0x147>
	movswq 0x0(%r13,%r15,2),%rcx
	test   %cx,%cx
	js     3cab8 <decode_mcu_AC_refine+0x288>
	mov    -0x50(%rbp),%rax
	add    %ecx,%eax
	mov    %ax,0x0(%r13,%r15,2)
	jmpq   3c977 <decode_mcu_AC_refine+0x147>
	mov    (%rbx),%rax
	movl   $0x7e,0x28(%rax)
	mov    (%rbx),%rax
	mov    0x8(%rax),%rax
	mov    %rbx,%rdi
	mov    $0xffffffffffffffff,%rsi
	callq  *%rax
	mov    -0x38(%rbp),%rax
	movl   $0xffffffff,0x28(%rax)
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	mov    $0x1,%eax
	mov    -0x28(%rbp),%r15
	leaveq 
	retq   
	mov    -0x48(%rbp),%rax
	add    %ecx,%eax
	mov    %ax,0x0(%r13,%r15,2)
	jmpq   3c977 <decode_mcu_AC_refine+0x147>
	nopl   0x0(%rax)

003cad0 <decode_mcu>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x90,%rsp
	mov    %rsi,-0x80(%rbp)
	mov    0x250(%rdi),%rax
	mov    0x170(%rdi),%ecx
	test   %ecx,%ecx
	jne    3cb07 <decode_mcu+0x37>
	mov    %r14,%rcx
	mov    %rbx,%r14
	mov    %rax,%rbx
	mov    %r15,%rdx
	mov    %r12,%r15
	mov    %rdi,%r12
	mov    %r13,%r8
	jmp    3cb68 <decode_mcu+0x98>
	mov    0x4c(%rax),%ecx
	test   %ecx,%ecx
	je     3cb22 <decode_mcu+0x52>
	mov    %r14,%rcx
	mov    %rbx,%r14
	mov    %rax,%rbx
	mov    %r15,%rdx
	mov    %r12,%r15
	mov    %rdi,%r12
	jmp    3cb5c <decode_mcu+0x8c>
	mov    %rdi,%rcx
	mov    %r15,-0x88(%rbp)
	mov    %rdi,-0x90(%rbp)
	mov    %rcx,%rdi
	mov    %r12,%r15
	mov    %r14,%r12
	mov    %rbx,%r14
	mov    %rax,%rbx
	callq  3c020 <process_restart>
	mov    %r12,%rcx
	mov    -0x80(%rbp),%rsi
	mov    -0x90(%rbp),%r12
	mov    -0x88(%rbp),%rdx
	mov    0x4c(%rbx),%eax
	add    $0xffffffff,%eax
	mov    %eax,0x4c(%rbx)
	mov    %r13,%r8
	mov    $0x1,%eax
	movslq 0x28(%rbx),%rdi
	cmp    $0xffffffff,%edi
	jne    3cb87 <decode_mcu+0xb7>
	mov    %r14,%rbx
	mov    %rcx,%r14
	mov    %r15,%r12
	mov    %rdx,%r15
	mov    %r8,%r13
	leaveq 
	retq   
	mov    0x3144a(%rip),%rdi        # 6dfd8 <jpeg_natural_order@@LIBJPEG_6.2+0x129f4>
	mov    %rdi,-0x38(%rbp)
	lea    0x150(%rbx),%rdi
	mov    %rdi,-0x90(%rbp)
	xor    %r13d,%r13d
	mov    $0xbd,%edi
	mov    %rdi,-0x48(%rbp)
	mov    $0xd9,%edi
	mov    %rdx,-0x28(%rbp)
	mov    %r14,-0x8(%rbp)
	mov    %r15,-0x10(%rbp)
	mov    %r8,-0x18(%rbp)
	mov    %rcx,-0x20(%rbp)
	mov    %rdi,-0x40(%rbp)
	mov    %r13,%rcx
	jmp    3cc25 <decode_mcu+0x155>
	mov    -0x58(%rbp),%rax
	movslq %eax,%rcx
	mov    -0x38(%rbp),%rdx
	movslq (%rdx,%rcx,4),%rcx
	mov    %r14w,(%rsi,%rcx,2)
	lea    0x1(%rax),%r13d
	mov    -0x70(%rbp),%rax
	cmp    $0x3f,%r13d
	jg     3cc0f <decode_mcu+0x13f>
	lea    -0x3(%r13,%r13,2),%ecx
	movslq %ecx,%r14
	add    0xd0(%rbx,%rax,8),%r14
	mov    %r12,%rdi
	mov    %r14,%rsi
	callq  3be70 <arith_decode>
	test   %eax,%eax
	je     3cc57 <decode_mcu+0x187>
	mov    -0x88(%rbp),%rax
	lea    0x1(%rax),%ecx
	xor    %r13d,%r13d
	mov    $0x1,%eax
	mov    -0x80(%rbp),%rsi
	cmp    0x1e0(%r12),%ecx
	jl     3cca4 <decode_mcu+0x1d4>
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	mov    -0x28(%rbp),%r15
	leaveq 
	retq   
	add    $0x1,%r13d
	cmp    $0x3f,%r13d
	jg     3cd78 <decode_mcu+0x2a8>
	add    $0x3,%r14
	lea    0x1(%r14),%rsi
	mov    %r12,%rdi
	callq  3be70 <arith_decode>
	test   %eax,%eax
	je     3cc45 <decode_mcu+0x175>
	mov    %r12,%rdi
	mov    -0x90(%rbp),%rsi
	callq  3be70 <arith_decode>
	mov    %rax,-0x30(%rbp)
	lea    0x2(%r14),%r15
	mov    %r12,%rdi
	mov    %r15,%rsi
	callq  3be70 <arith_decode>
	test   %eax,%eax
	jne    3cdb9 <decode_mcu+0x2e9>
	xor    %r14d,%r14d
	add    $0xe,%r15
	mov    %r13,-0x58(%rbp)
	mov    %r14,%r13
	jmpq   3ce0d <decode_mcu+0x33d>
	test   %rsi,%rsi
	movslq %ecx,%rax
	je     3ccb0 <decode_mcu+0x1e0>
	mov    (%rsi,%rax,8),%r13
	mov    %r13,-0x60(%rbp)
	movslq 0x1e4(%r12,%rax,4),%r15
	mov    0x1b8(%r12,%r15,8),%rax
	mov    %rax,-0x58(%rbp)
	movslq 0x14(%rax),%rax
	mov    %rax,-0x78(%rbp)
	movslq 0x3c(%rbx,%r15,4),%r14
	add    0x50(%rbx,%rax,8),%r14
	mov    %r12,%rdi
	mov    %r14,%rsi
	mov    %rcx,-0x88(%rbp)
	callq  3be70 <arith_decode>
	test   %eax,%eax
	je     3ce2c <decode_mcu+0x35c>
	lea    0x1(%r14),%rsi
	mov    %r12,%rdi
	callq  3be70 <arith_decode>
	mov    %rax,-0x68(%rbp)
	movslq %eax,%rcx
	lea    0x2(%rcx,%r14,1),%r14
	mov    %rax,%r13
	mov    %r12,%rdi
	mov    %r14,%rsi
	callq  3be70 <arith_decode>
	test   %eax,%eax
	jne    3ce5c <decode_mcu+0x38c>
	mov    %r13,%rax
	xor    %r13d,%r13d
	mov    -0x78(%rbp),%rdi
	movzbl 0x140(%rdi,%r12,1),%ecx
	mov    $0x1,%edx
	mov    %rdx,%rsi
	shl    %cl,%rsi
	sar    %rsi
	cmp    %esi,%r13d
	jl     3ce72 <decode_mcu+0x3a2>
	movzbl 0x150(%rdi,%r12,1),%ecx
	shl    %cl,%rdx
	sar    %rdx
	cmp    %edx,%r13d
	jg     3ce8e <decode_mcu+0x3be>
	lea    0x4(,%rax,4),%eax
	mov    %eax,0x3c(%rbx,%r15,4)
	mov    %r15,%rax
	jmpq   3ce7e <decode_mcu+0x3ae>
	mov    (%r12),%rax
	movl   $0x7e,0x28(%rax)
	mov    (%r12),%rax
	mov    0x8(%rax),%rax
	mov    %r12,%rdi
	mov    $0xffffffffffffffff,%rsi
	callq  *%rax
	movl   $0xffffffff,0x28(%rbx)
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	mov    $0x1,%eax
	mov    -0x28(%rbp),%r15
	leaveq 
	retq   
	mov    %rax,%r14
	mov    %r12,%rdi
	mov    %r15,%rsi
	callq  3be70 <arith_decode>
	test   %eax,%eax
	je     3cc94 <decode_mcu+0x1c4>
	mov    -0x70(%rbp),%rax
	mov    0xd0(%rbx,%rax,8),%rcx
	movzbl 0x160(%r12,%rax,1),%eax
	cmp    %eax,%r13d
	jle    3ce9f <decode_mcu+0x3cf>
	pushq  -0x40(%rbp)
	popq   -0x50(%rbp)
	jmpq   3cea5 <decode_mcu+0x3d5>
	sar    %r13d
	mov    %r12,%rdi
	mov    %r15,%rsi
	callq  3be70 <arith_decode>
	test   %eax,%eax
	je     3ce0d <decode_mcu+0x33d>
	or     %r13d,%r14d
	mov    %r13,%rax
	and    $0xfffffffe,%eax
	test   %eax,%eax
	jne    3cdf8 <decode_mcu+0x328>
	mov    -0x30(%rbp),%rax
	test   %eax,%eax
	jne    3ceb9 <decode_mcu+0x3e9>
	add    $0x1,%r14d
	jmpq   3cebc <decode_mcu+0x3ec>
	movl   $0x0,0x3c(%rbx,%r15,4)
	test   %r13,%r13
	je     3ce45 <decode_mcu+0x375>
	movswq 0x2c(%rbx,%r15,4),%rax
	mov    %ax,0x0(%r13)
	mov    -0x58(%rbp),%rax
	movslq 0x18(%rax),%rax
	mov    %rax,-0x70(%rbp)
	mov    $0x1,%r13d
	jmpq   3cbea <decode_mcu+0x11a>
	mov    -0x78(%rbp),%rcx
	mov    0x50(%rbx,%rcx,8),%r14
	add    $0x14,%r14
	mov    %r15,-0x70(%rbp)
	mov    %rax,%r13
	jmp    3cee8 <decode_mcu+0x418>
	movl   $0x0,0x3c(%rbx,%r15,4)
	mov    %r15,%rax
	lea    0xe(%r14),%r15
	mov    %rax,-0x78(%rbp)
	mov    %r13,%r14
	jmpq   3cf19 <decode_mcu+0x449>
	lea    0xc(,%rax,4),%eax
	mov    %eax,0x3c(%rbx,%r15,4)
	mov    %r15,%rax
	jmp    3ce7e <decode_mcu+0x3ae>
	pushq  -0x48(%rbp)
	popq   -0x50(%rbp)
	mov    -0x50(%rbp),%rax
	lea    (%rax,%rcx,1),%r15
	add    %r14d,%r14d
	mov    %r13,-0x68(%rbp)
	jmpq   3cf47 <decode_mcu+0x477>
	not    %r14d
	mov    -0x60(%rbp),%rsi
	test   %rsi,%rsi
	jne    3cbce <decode_mcu+0xfe>
	mov    -0x58(%rbp),%rax
	jmpq   3cbe2 <decode_mcu+0x112>
	mov    %r13,%rax
	and    $0x7fffffff,%eax
	cmp    $0x4000,%eax
	je     3cf5f <decode_mcu+0x48f>
	add    $0x1,%r14
	add    %r13d,%r13d
	mov    %r12,%rdi
	mov    %r14,%rsi
	callq  3be70 <arith_decode>
	test   %eax,%eax
	jne    3ced2 <decode_mcu+0x402>
	mov    -0x70(%rbp),%r15
	mov    -0x68(%rbp),%rax
	jmpq   3cd28 <decode_mcu+0x258>
	sar    %r14d
	mov    %r12,%rdi
	mov    %r15,%rsi
	callq  3be70 <arith_decode>
	test   %eax,%eax
	je     3cf19 <decode_mcu+0x449>
	or     %r14d,%r13d
	mov    %r14,%rax
	and    $0xfffffffe,%eax
	test   %eax,%eax
	jne    3cf04 <decode_mcu+0x434>
	mov    -0x68(%rbp),%rax
	test   %eax,%eax
	jne    3cfa0 <decode_mcu+0x4d0>
	add    $0x1,%r13d
	jmp    3cfa3 <decode_mcu+0x4d3>
	mov    %r14,%rax
	and    $0x7fffffff,%eax
	cmp    $0x4000,%eax
	je     3cfba <decode_mcu+0x4ea>
	add    $0x1,%r15
	add    %r14d,%r14d
	mov    %r12,%rdi
	mov    %r15,%rsi
	callq  3be70 <arith_decode>
	test   %eax,%eax
	jne    3cf31 <decode_mcu+0x461>
	mov    -0x68(%rbp),%r13
	jmpq   3cc94 <decode_mcu+0x1c4>
	mov    (%r12),%rax
	movl   $0x7e,0x28(%rax)
	mov    (%r12),%rax
	mov    0x8(%rax),%rax
	mov    %r12,%rdi
	mov    $0xffffffffffffffff,%rsi
	callq  *%rax
	movl   $0xffffffff,0x28(%rbx)
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	mov    $0x1,%eax
	mov    -0x28(%rbp),%r15
	leaveq 
	retq   
	not    %r13d
	mov    -0x78(%rbp),%r15
	add    0x2c(%rbx,%r15,4),%r13d
	mov    %r13d,0x2c(%rbx,%r15,4)
	mov    -0x60(%rbp),%r13
	jmpq   3ce35 <decode_mcu+0x365>
	mov    (%r12),%rax
	movl   $0x7e,0x28(%rax)
	mov    (%r12),%rax
	mov    0x8(%rax),%rax
	mov    %r12,%rdi
	mov    $0xffffffffffffffff,%rsi
	callq  *%rax
	movl   $0xffffffff,0x28(%rbx)
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	mov    $0x1,%eax
	mov    -0x28(%rbp),%r15
	leaveq 
	retq   
	nopl   0x0(%rax,%rax,1)

003d000 <start_pass>:
	push   %rbp
	mov    %rsp,%rbp
	sub    $0x40,%rsp
	mov    %rbx,-0x8(%rbp)
	mov    %r12,-0x10(%rbp)
	mov    %r13,-0x18(%rbp)
	mov    %r14,-0x20(%rbp)
	mov    %r15,-0x28(%rbp)
	mov    0x250(%rdi),%r14
	mov    %r14,-0x40(%rbp)
	mov    $0xffffffffffffffff,%rax
	mov    $0x1,%r13d
	mov    $0x100,%ecx
	xor    %esi,%esi
	mov    $0x40,%edx
	movslq 0x138(%rdi),%rbx
	test   %ebx,%ebx
	jne    3d090 <start_pass+0x90>
	movslq 0x20c(%rdi),%rbx
	test   %ebx,%ebx
	jne    3d10b <start_pass+0x10b>
	movslq 0x214(%rdi),%rbx
	test   %ebx,%ebx
	jne    3d10b <start_pass+0x10b>
	movslq 0x218(%rdi),%rbx
	test   %ebx,%ebx
	jne    3d10b <start_pass+0x10b>
	movslq 0x210(%rdi),%rbx
	cmp    $0x3f,%ebx
	jle    3d148 <start_pass+0x148>
	mov    %rdi,%rbx
	jmpq   3d135 <start_pass+0x135>
	movslq 0x20c(%rdi),%rdx
	test   %edx,%edx
	je     3d152 <start_pass+0x152>
	movslq 0x210(%rdi),%rcx
	cmp    %ecx,%edx
	jle    3d18b <start_pass+0x18b>
	mov    (%rdi),%rcx
	movl   $0x10,0x28(%rcx)
	movslq 0x20c(%rdi),%rdx
	mov    (%rdi),%rcx
	mov    %edx,0x2c(%rcx)
	movslq 0x210(%rdi),%rdx
	mov    (%rdi),%rcx
	mov    %edx,0x30(%rcx)
	movslq 0x214(%rdi),%rdx
	mov    (%rdi),%rcx
	mov    %edx,0x34(%rcx)
	movslq 0x218(%rdi),%rdx
	mov    (%rdi),%rcx
	mov    %edx,0x38(%rcx)
	mov    (%rdi),%rcx
	mov    (%rcx),%rcx
	mov    %rax,%r12
	mov    %rsi,%r13
	mov    %rdi,%rbx
	callq  *%rcx
	mov    %r12,%rax
	mov    %r13,%rsi
	mov    %rsi,%rcx
	jmpq   3d211 <start_pass+0x211>
	mov    (%rdi),%rcx
	movl   $0x7a,0x28(%rcx)
	mov    (%rdi),%rcx
	mov    0x8(%rcx),%rcx
	mov    %rdx,%r12
	mov    %rsi,%r15
	mov    %rax,%rsi
	mov    %rdi,%rbx
	callq  *%rcx
	mov    %r12,%rdx
	mov    %r15,%rsi
	mov    $0x100,%ecx
	lea    -0x66c(%rip),%rax        # 3cad0 <decode_mcu>
	mov    %rax,0x8(%r14)
	mov    %rsi,%r12
	jmpq   3d387 <start_pass+0x387>
	cmp    $0x3e,%ebx
	jle    3d10b <start_pass+0x10b>
	mov    %rdi,%rbx
	jmp    3d135 <start_pass+0x135>
	movslq 0x210(%rdi),%rcx
	test   %ecx,%ecx
	jne    3d0ae <start_pass+0xae>
	movslq 0x214(%rdi),%rcx
	test   %ecx,%ecx
	jne    3d3cf <start_pass+0x3cf>
	movslq 0x218(%rdi),%rcx
	cmp    $0xd,%ecx
	jg     3d0ae <start_pass+0xae>
	mov    %rdi,%rbx
	mov    %rsi,%rcx
	jmpq   3d211 <start_pass+0x211>
	cmp    $0x3f,%ecx
	jg     3d0ae <start_pass+0xae>
	movslq 0x1b0(%rdi),%rcx
	cmp    $0x1,%ecx
	jne    3d0ae <start_pass+0xae>
	jmp    3d161 <start_pass+0x161>
	movslq %r14d,%r15
	movslq (%r12,%r15,4),%rcx
	test   %ecx,%ecx
	jns    3d1b4 <start_pass+0x1b4>
	mov    %rsi,%rcx
	movslq 0x214(%rbx),%rdx
	cmp    %ecx,%edx
	je     3d1ef <start_pass+0x1ef>
	mov    (%rbx),%rcx
	movl   $0x73,0x28(%rcx)
	mov    (%rbx),%rcx
	mov    %r13d,0x2c(%rcx)
	mov    (%rbx),%rcx
	mov    %r14d,0x30(%rcx)
	mov    (%rbx),%rcx
	mov    0x8(%rcx),%rcx
	mov    %rax,%rsi
	mov    %rbx,%rdi
	callq  *%rcx
	mov    $0xffffffffffffffff,%rax
	xor    %esi,%esi
	movslq 0x218(%rbx),%rcx
	mov    %ecx,(%r12,%r15,4)
	add    $0x1,%r14d
	movslq 0x210(%rbx),%rcx
	cmp    %r14d,%ecx
	jge    3d1a6 <start_pass+0x1a6>
	mov    -0x38(%rbp),%rcx
	add    $0x1,%ecx
	mov    %rcx,-0x38(%rbp)
	movslq 0x1b0(%rbx),%rdx
	cmp    %ecx,%edx
	jg     3d3e6 <start_pass+0x3e6>
	movslq 0x214(%rbx),%rax
	test   %eax,%eax
	je     3d458 <start_pass+0x458>
	movslq 0x20c(%rbx),%rax
	test   %eax,%eax
	je     3d48e <start_pass+0x48e>
	lea    -0xa19(%rip),%rax        # 3c830 <decode_mcu_AC_refine>
	mov    -0x40(%rbp),%r14
	mov    %rax,0x8(%r14)
	mov    $0x1,%r13d
	mov    $0x40,%edx
	mov    $0x100,%ecx
	mov    %rsi,%r12
	jmpq   3d387 <start_pass+0x387>
	mov    0x8(%rbx),%rcx
	mov    (%rcx),%rcx
	mov    %rbx,%rdi
	mov    %r12,-0x30(%rbp)
	mov    %r13,%rsi
	mov    %r8,%r13
	mov    %rax,%r12
	callq  *%rcx
	mov    %rax,0x50(%r14,%r12,8)
	mov    %r12,%rax
	mov    -0x30(%rbp),%r12
	xor    %esi,%esi
	mov    $0x40,%edx
	mov    0x50(%r14,%rax,8),%rdi
	callq  41e0 <memset@plt>
	movl   $0x0,0x2c(%r14,%r13,4)
	movl   $0x0,0x3c(%r14,%r13,4)
	mov    $0x1,%r13d
	xor    %esi,%esi
	mov    $0x40,%edx
	mov    $0x100,%ecx
	movslq 0x138(%rbx),%rax
	test   %eax,%eax
	je     3d2dd <start_pass+0x2dd>
	movslq 0x20c(%rbx),%rax
	test   %eax,%eax
	je     3d37f <start_pass+0x37f>
	movslq 0x18(%r15),%r15
	test   %r15d,%r15d
	js     3d2ec <start_pass+0x2ec>
	cmp    $0xf,%r15d
	jle    3d31e <start_pass+0x31e>
	mov    (%rbx),%rax
	movl   $0x7d,0x28(%rax)
	mov    (%rbx),%rax
	mov    %r15d,0x2c(%rax)
	mov    (%rbx),%rax
	mov    (%rax),%rax
	mov    %rsi,%r13
	mov    %rbx,%rdi
	callq  *%rax
	mov    %r13,%rsi
	mov    $0x1,%r13d
	mov    $0x40,%edx
	mov    $0x100,%ecx
	mov    0xd0(%r14,%r15,8),%rax
	test   %rax,%rax
	jne    3d35e <start_pass+0x35e>
	mov    0x8(%rbx),%rax
	mov    (%rax),%rax
	mov    %rcx,%rdx
	mov    %r13,%rcx
	mov    %rsi,%r13
	mov    %rcx,%rsi
	mov    %rbx,%rdi
	callq  *%rax
	mov    %rax,0xd0(%r14,%r15,8)
	mov    %r13,%rsi
	mov    $0x1,%r13d
	mov    $0x40,%edx
	mov    $0x100,%ecx
	mov    0xd0(%r14,%r15,8),%rdi
	mov    %rdx,%r14
	mov    %rcx,%rdx
	mov    %rsi,%r15
	callq  41e0 <memset@plt>
	mov    %r14,%rdx
	mov    %r15,%rsi
	mov    $0x100,%ecx
	add    $0x1,%r12d
	mov    -0x40(%rbp),%r14
	movslq 0x1b0(%rbx),%rax
	cmp    %r12d,%eax
	jg     3d4b5 <start_pass+0x4b5>
	movq   $0x0,0x18(%r14)
	movq   $0x0,0x20(%r14)
	movl   $0xfffffff0,0x28(%r14)
	mov    0x170(%rbx),%eax
	mov    %eax,0x4c(%r14)
	mov    -0x28(%rbp),%r15
	mov    -0x20(%rbp),%r14
	mov    -0x18(%rbp),%r13
	mov    -0x10(%rbp),%r12
	mov    -0x8(%rbp),%rbx
	leaveq 
	retq   
	movslq 0x218(%rdi),%rdx
	add    $0xffffffff,%ecx
	cmp    %ecx,%edx
	jne    3d0ae <start_pass+0xae>
	jmpq   3d170 <start_pass+0x170>
	movslq %ecx,%rcx
	mov    0x1b8(%rbx,%rcx,8),%rcx
	movslq 0x4(%rcx),%r13
	mov    %r13,%r12
	shl    $0x8,%r12
	add    0xc0(%rbx),%r12
	movslq 0x20c(%rbx),%rcx
	test   %ecx,%ecx
	je     3d44c <start_pass+0x44c>
	movslq (%r12),%rcx
	test   %ecx,%ecx
	jns    3d44c <start_pass+0x44c>
	mov    (%rbx),%rcx
	movl   $0x73,0x28(%rcx)
	mov    (%rbx),%rcx
	mov    %r13d,0x2c(%rcx)
	mov    (%rbx),%rcx
	movl   $0x0,0x30(%rcx)
	mov    (%rbx),%rcx
	mov    0x8(%rcx),%rcx
	mov    %rsi,%r14
	mov    %rax,%r15
	mov    %rbx,%rdi
	mov    %r15,%rsi
	callq  *%rcx
	mov    %r15,%rax
	mov    %r14,%rsi
	movslq 0x20c(%rbx),%r14
	jmpq   3d1fe <start_pass+0x1fe>
	movslq 0x20c(%rbx),%rax
	test   %eax,%eax
	je     3d548 <start_pass+0x548>
	lea    -0x103e(%rip),%rax        # 3c430 <decode_mcu_AC_first>
	mov    -0x40(%rbp),%r14
	mov    %rax,0x8(%r14)
	mov    $0x1,%r13d
	mov    $0x40,%edx
	mov    $0x100,%ecx
	mov    %rsi,%r12
	jmpq   3d387 <start_pass+0x387>
	lea    -0xd35(%rip),%rax        # 3c760 <decode_mcu_DC_refine>
	mov    -0x40(%rbp),%r14
	mov    %rax,0x8(%r14)
	mov    $0x1,%r13d
	mov    $0x40,%edx
	mov    $0x100,%ecx
	mov    %rsi,%r12
	jmpq   3d387 <start_pass+0x387>
	movslq %r12d,%r8
	mov    0x1b8(%rbx,%r8,8),%r15
	movslq 0x138(%rbx),%rax
	test   %eax,%eax
	je     3d4e9 <start_pass+0x4e9>
	movslq 0x20c(%rbx),%rax
	test   %eax,%eax
	jne    3d2c3 <start_pass+0x2c3>
	movslq 0x214(%rbx),%rax
	test   %eax,%eax
	jne    3d2c3 <start_pass+0x2c3>
	movslq 0x14(%r15),%rax
	test   %eax,%eax
	js     3d4f6 <start_pass+0x4f6>
	cmp    $0xf,%eax
	jle    3d532 <start_pass+0x532>
	mov    (%rbx),%rcx
	movl   $0x7d,0x28(%rcx)
	mov    (%rbx),%rcx
	mov    %eax,0x2c(%rcx)
	mov    (%rbx),%rcx
	mov    (%rcx),%rcx
	mov    %rbx,%rdi
	mov    %r12,-0x38(%rbp)
	mov    %r8,%r12
	mov    %rax,%r13
	callq  *%rcx
	mov    %r13,%rax
	mov    %r12,%r8
	mov    $0x1,%r13d
	mov    -0x38(%rbp),%r12
	xor    %esi,%esi
	mov    $0x40,%edx
	mov    0x50(%r14,%rax,8),%rcx
	test   %rcx,%rcx
	je     3d269 <start_pass+0x269>
	mov    %r8,%r13
	jmpq   3d295 <start_pass+0x295>
	lea    -0x13cf(%rip),%rax        # 3c180 <decode_mcu_DC_first>
	mov    -0x40(%rbp),%r14
	mov    %rax,0x8(%r14)
	mov    $0x1,%r13d
	mov    $0x40,%edx
	mov    $0x100,%ecx
	mov    %rsi,%r12
	jmpq   3d387 <start_pass+0x387>
	nop

003d570 <jsimd_can_rgb_ycc>:
	push   %rbp
	mov    %rsp,%rbp
	callq  3df60 <init_simd>
	xor    %eax,%eax
	mov    0x30cf7(%rip),%ecx        # 6e278 <simd_support>
	and    $0x8,%ecx
	test   %ecx,%ecx
	jne    3d58a <jsimd_can_rgb_ycc+0x1a>
	leaveq 
	retq   
	lea    0x1e68f(%rip),%rcx        # 5bc20 <PW_F0299_F0337>
	and    $0xf,%rcx
	test   %rcx,%rcx
	jne    3d5a1 <jsimd_can_rgb_ycc+0x31>
	mov    $0x1,%eax
	leaveq 
	retq   
	leaveq 
	retq   
	data16 nopw %cs:0x0(%rax,%rax,1)
	xchg   %ax,%ax

003d5b0 <jsimd_can_rgb_gray>:
	push   %rbp
	mov    %rsp,%rbp
	callq  3df60 <init_simd>
	xor    %eax,%eax
	mov    0x30cb7(%rip),%ecx        # 6e278 <simd_support>
	and    $0x8,%ecx
	test   %ecx,%ecx
	jne    3d5ca <jsimd_can_rgb_gray+0x1a>
	leaveq 
	retq   
	lea    0x1e6af(%rip),%rcx        # 5bc80 <PW_F0299_F0337>
	and    $0xf,%rcx
	test   %rcx,%rcx
	jne    3d5e1 <jsimd_can_rgb_gray+0x31>
	mov    $0x1,%eax
	leaveq 
	retq   
	leaveq 
	retq   
	data16 nopw %cs:0x0(%rax,%rax,1)
	xchg   %ax,%ax

003d5f0 <jsimd_can_ycc_rgb>:
	push   %rbp
	mov    %rsp,%rbp
	callq  3df60 <init_simd>
	xor    %eax,%eax
	mov    0x30c77(%rip),%ecx        # 6e278 <simd_support>
	and    $0x8,%ecx
	test   %ecx,%ecx
	jne    3d60a <jsimd_can_ycc_rgb+0x1a>
	leaveq 
	retq   
	lea    0x2e69f(%rip),%rcx        # 6bcb0 <PW_F0402>
	and    $0xf,%rcx
	test   %rcx,%rcx
	jne    3d621 <jsimd_can_ycc_rgb+0x31>
	mov    $0x1,%eax
	leaveq 
	retq   
	leaveq 
	retq   
	data16 nopw %cs:0x0(%rax,%rax,1)
	xchg   %ax,%ax

003d630 <jsimd_can_ycc_rgb565>:
	push   %rbp
	mov    %rsp,%rbp
	xor    %eax,%eax
	leaveq 
	retq   
	nopl   0x0(%rax,%rax,1)

003d640 <jsimd_rgb_ycc_convert>:
	push   %rbp
	mov    %rsp,%rbp
	lea    0xcc5(%rip),%rax        # 3e310 <jsimd_rgb_ycc_convert_sse2>
	mov    0x3c(%rdi),%r9d
	add    $0xfffffffa,%r9d
	cmp    $0x9,%r9d
	ja     3d671 <jsimd_rgb_ycc_convert+0x31>
	lea    0x1e488(%rip),%r10        # 5bae8 <jpeg_aritab+0x390>
	movslq (%r10,%r9,4),%r9
	add    %r10,%r9
	jmpq   *%r9
	lea    0x276f(%rip),%rax        # 3fde0 <jsimd_extxrgb_ycc_convert_sse2>
	mov    0x30(%rdi),%edi
	callq  *%rax
	leaveq 
	retq   
	lea    0x1121(%rip),%rax        # 3e7a0 <jsimd_extrgb_ycc_convert_sse2>
	jmp    3d671 <jsimd_rgb_ycc_convert+0x31>
	lea    0x15a8(%rip),%rax        # 3ec30 <jsimd_extrgbx_ycc_convert_sse2>
	jmp    3d671 <jsimd_rgb_ycc_convert+0x31>
	lea    0x19ff(%rip),%rax        # 3f090 <jsimd_extbgr_ycc_convert_sse2>
	jmp    3d671 <jsimd_rgb_ycc_convert+0x31>
	lea    0x1e86(%rip),%rax        # 3f520 <jsimd_extbgrx_ycc_convert_sse2>
	jmp    3d671 <jsimd_rgb_ycc_convert+0x31>
	lea    0x22dd(%rip),%rax        # 3f980 <jsimd_extxbgr_ycc_convert_sse2>
	jmp    3d671 <jsimd_rgb_ycc_convert+0x31>
	data16 nopw %cs:0x0(%rax,%rax,1)

003d6b0 <jsimd_rgb_gray_convert>:
	push   %rbp
	mov    %rsp,%rbp
	lea    0x2b85(%rip),%rax        # 40240 <jsimd_rgb_gray_convert_sse2>
	mov    0x3c(%rdi),%r9d
	add    $0xfffffffa,%r9d
	cmp    $0x9,%r9d
	ja     3d6e1 <jsimd_rgb_gray_convert+0x31>
	lea    0x1e440(%rip),%r10        # 5bb10 <jpeg_aritab+0x3b8>
	movslq (%r10,%r9,4),%r9
	add    %r10,%r9
	jmpq   *%r9
	lea    0x3b4f(%rip),%rax        # 41230 <jsimd_extxrgb_gray_convert_sse2>
	mov    0x30(%rdi),%edi
	callq  *%rax
	leaveq 
	retq   
	lea    0x2e11(%rip),%rax        # 40500 <jsimd_extrgb_gray_convert_sse2>
	jmp    3d6e1 <jsimd_rgb_gray_convert+0x31>
	lea    0x30c8(%rip),%rax        # 407c0 <jsimd_extrgbx_gray_convert_sse2>
	jmp    3d6e1 <jsimd_rgb_gray_convert+0x31>
	lea    0x334f(%rip),%rax        # 40a50 <jsimd_extbgr_gray_convert_sse2>
	jmp    3d6e1 <jsimd_rgb_gray_convert+0x31>
	lea    0x3606(%rip),%rax        # 40d10 <jsimd_extbgrx_gray_convert_sse2>
	jmp    3d6e1 <jsimd_rgb_gray_convert+0x31>
	lea    0x388d(%rip),%rax        # 40fa0 <jsimd_extxbgr_gray_convert_sse2>
	jmp    3d6e1 <jsimd_rgb_gray_convert+0x31>
	data16 nopw %cs:0x0(%rax,%rax,1)

003d720 <jsimd_ycc_rgb_convert>:
	push   %rbp
	mov    %rsp,%rbp
	lea    0x48f5(%rip),%rax        # 42020 <jsimd_ycc_rgb_convert_sse2>
	mov    0x40(%rdi),%r9d
	add    $0xfffffffa,%r9d
	cmp    $0x9,%r9d
	ja     3d751 <jsimd_ycc_rgb_convert+0x31>
	lea    0x1e3f8(%rip),%r10        # 5bb38 <jpeg_aritab+0x3e0>
	movslq (%r10,%r9,4),%r9
	add    %r10,%r9
	jmpq   *%r9
	lea    0x5d9f(%rip),%rax        # 434f0 <jsimd_ycc_extxrgb_convert_sse2>
	mov    0x88(%rdi),%edi
	callq  *%rax
	leaveq 
	retq   
	lea    0x4c5e(%rip),%rax        # 423c0 <jsimd_ycc_extrgb_convert_sse2>
	jmp    3d751 <jsimd_ycc_rgb_convert+0x31>
	lea    0x4ff5(%rip),%rax        # 42760 <jsimd_ycc_extrgbx_convert_sse2>
	jmp    3d751 <jsimd_ycc_rgb_convert+0x31>
	lea    0x533c(%rip),%rax        # 42ab0 <jsimd_ycc_extbgr_convert_sse2>
	jmp    3d751 <jsimd_ycc_rgb_convert+0x31>
	lea    0x56d3(%rip),%rax        # 42e50 <jsimd_ycc_extbgrx_convert_sse2>
	jmp    3d751 <jsimd_ycc_rgb_convert+0x31>
	lea    0x5a1a(%rip),%rax        # 431a0 <jsimd_ycc_extxbgr_convert_sse2>
	jmp    3d751 <jsimd_ycc_rgb_convert+0x31>
	nopl   0x0(%rax,%rax,1)

003d790 <jsimd_ycc_rgb565_convert>:
	push   %rbp
	mov    %rsp,%rbp
	leaveq 
	retq   
	nopw   %cs:0x0(%rax,%rax,1)

003d7a0 <jsimd_can_h2v2_downsample>:
	push   %rbp
	mov    %rsp,%rbp
	callq  3df60 <init_simd>
	mov    0x30ac9(%rip),%eax        # 6e278 <simd_support>
	and    $0x8,%eax
	test   %eax,%eax
	je     3d7bd <jsimd_can_h2v2_downsample+0x1d>
	mov    $0x1,%eax
	leaveq 
	retq   
	xor    %eax,%eax
	leaveq 
	retq   
	data16 nopw %cs:0x0(%rax,%rax,1)
	nopl   0x0(%rax)

003d7d0 <jsimd_can_h2v1_downsample>:
	push   %rbp
	mov    %rsp,%rbp
	callq  3df60 <init_simd>
	mov    0x30a99(%rip),%eax        # 6e278 <simd_support>
	and    $0x8,%eax
	test   %eax,%eax
	je     3d7ed <jsimd_can_h2v1_downsample+0x1d>
	mov    $0x1,%eax
	leaveq 
	retq   
	xor    %eax,%eax
	leaveq 
	retq   
	data16 nopw %cs:0x0(%rax,%rax,1)
	nopl   0x0(%rax)

003d800 <jsimd_h2v2_downsample>:
	push   %rbp
	mov    %rsp,%rbp
	mov    0x30(%rdi),%r9d
	movslq 0x13c(%rdi),%rdi
	mov    0xc(%rsi),%r8d
	mov    0x1c(%rsi),%eax
	mov    %rdi,%rsi
	mov    %r9,%rdi
	mov    %rcx,%r9
	mov    %rax,%rcx
	mov    %r8,%rax
	mov    %rdx,%r8
	mov    %rax,%rdx
	callq  41ea0 <jsimd_h2v2_downsample_sse2>
	leaveq 
	retq   
	data16 nopw %cs:0x0(%rax,%rax,1)
	nopl   (%rax)

003d840 <jsimd_h2v1_downsample>:
	push   %rbp
	mov    %rsp,%rbp
	mov    0x30(%rdi),%r9d
	movslq 0x13c(%rdi),%rdi
	mov    0xc(%rsi),%r8d
	mov    0x1c(%rsi),%eax
	mov    %rdi,%rsi
	mov    %r9,%rdi
	mov    %rcx,%r9
	mov    %rax,%rcx
	mov    %r8,%rax
	mov    %rdx,%r8
	mov    %rax,%rdx
	callq  41d70 <jsimd_h2v1_downsample_sse2>
	leaveq 
	retq   
	data16 nopw %cs:0x0(%rax,%rax,1)
	nopl   (%rax)

003d880 <jsimd_can_h2v2_upsample>:
	push   %rbp
	mov    %rsp,%rbp
	callq  3df60 <init_simd>
	mov    0x309e9(%rip),%eax        # 6e278 <simd_support>
	and    $0x8,%eax
	test   %eax,%eax
	je     3d89d <jsimd_can_h2v2_upsample+0x1d>
	mov    $0x1,%eax
	leaveq 
	retq   
	xor    %eax,%eax
	leaveq 
	retq   
	data16 nopw %cs:0x0(%rax,%rax,1)
	nopl   0x0(%rax)

003d8b0 <jsimd_can_h2v1_upsample>:
	push   %rbp
	mov    %rsp,%rbp
	callq  3df60 <init_simd>
	mov    0x309b9(%rip),%eax        # 6e278 <simd_support>
	and    $0x8,%eax
	test   %eax,%eax
	je     3d8cd <jsimd_can_h2v1_upsample+0x1d>
	mov    $0x1,%eax
	leaveq 
	retq   
	xor    %eax,%eax
	leaveq 
	retq   
	data16 nopw %cs:0x0(%rax,%rax,1)
	nopl   0x0(%rax)

003d8e0 <jsimd_h2v2_upsample>:
	push   %rbp
	mov    %rsp,%rbp
	movslq 0x19c(%rdi),%rax
	mov    0x88(%rdi),%esi
	mov    %rax,%rdi
	callq  45a50 <jsimd_h2v2_upsample_sse2>
	leaveq 
	retq   
	nopl   0x0(%rax,%rax,1)

003d900 <jsimd_h2v1_upsample>:
	push   %rbp
	mov    %rsp,%rbp
	movslq 0x19c(%rdi),%rax
	mov    0x88(%rdi),%esi
	mov    %rax,%rdi
	callq  45990 <jsimd_h2v1_upsample_sse2>
	leaveq 
	retq   
	nopl   0x0(%rax,%rax,1)

003d920 <jsimd_can_h2v2_fancy_upsample>:
	push   %rbp
	mov    %rsp,%rbp
	callq  3df60 <init_simd>
	xor    %eax,%eax
	mov    0x30947(%rip),%ecx        # 6e278 <simd_support>
	and    $0x8,%ecx
	test   %ecx,%ecx
	jne    3d93a <jsimd_can_h2v2_fancy_upsample+0x1a>
	leaveq 
	retq   
	lea    0x2e40f(%rip),%rcx        # 6bd50 <PW_ONE>
	and    $0xf,%rcx
	test   %rcx,%rcx
	jne    3d951 <jsimd_can_h2v2_fancy_upsample+0x31>
	mov    $0x1,%eax
	leaveq 
	retq   
	leaveq 
	retq   
	data16 nopw %cs:0x0(%rax,%rax,1)
	xchg   %ax,%ax

003d960 <jsimd_can_h2v1_fancy_upsample>:
	push   %rbp
	mov    %rsp,%rbp
	callq  3df60 <init_simd>
	xor    %eax,%eax
	mov    0x30907(%rip),%ecx        # 6e278 <simd_support>
	and    $0x8,%ecx
	test   %ecx,%ecx
	jne    3d97a <jsimd_can_h2v1_fancy_upsample+0x1a>
	leaveq 
	retq   
	lea    0x2e3cf(%rip),%rcx        # 6bd50 <PW_ONE>
	and    $0xf,%rcx
	test   %rcx,%rcx
	jne    3d991 <jsimd_can_h2v1_fancy_upsample+0x31>
	mov    $0x1,%eax
	leaveq 
	retq   
	leaveq 
	retq   
	data16 nopw %cs:0x0(%rax,%rax,1)
	xchg   %ax,%ax

003d9a0 <jsimd_h2v2_fancy_upsample>:
	push   %rbp
	mov    %rsp,%rbp
	movslq 0x19c(%rdi),%rdi
	mov    0x28(%rsi),%esi
	callq  455e0 <jsimd_h2v2_fancy_upsample_sse2>
	leaveq 
	retq   
	data16 nopw %cs:0x0(%rax,%rax,1)

003d9c0 <jsimd_h2v1_fancy_upsample>:
	push   %rbp
	mov    %rsp,%rbp
	movslq 0x19c(%rdi),%rdi
	mov    0x28(%rsi),%esi
	callq  45450 <jsimd_h2v1_fancy_upsample_sse2>
	leaveq 
	retq   
	data16 nopw %cs:0x0(%rax,%rax,1)

003d9e0 <jsimd_can_h2v2_merged_upsample>:
	push   %rbp
	mov    %rsp,%rbp
	callq  3df60 <init_simd>
	xor    %eax,%eax
	mov    0x30887(%rip),%ecx        # 6e278 <simd_support>
	and    $0x8,%ecx
	test   %ecx,%ecx
	jne    3d9fa <jsimd_can_h2v2_merged_upsample+0x1a>
	leaveq 
	retq   
	lea    0x2e2ff(%rip),%rcx        # 6bd00 <PW_F0402>
	and    $0xf,%rcx
	test   %rcx,%rcx
	jne    3da11 <jsimd_can_h2v2_merged_upsample+0x31>
	mov    $0x1,%eax
	leaveq 
	retq   
	leaveq 
	retq   
	data16 nopw %cs:0x0(%rax,%rax,1)
	xchg   %ax,%ax

003da20 <jsimd_can_h2v1_merged_upsample>:
	push   %rbp
	mov    %rsp,%rbp
	callq  3df60 <init_simd>
	xor    %eax,%eax
	mov    0x30847(%rip),%ecx        # 6e278 <simd_support>
	and    $0x8,%ecx
	test   %ecx,%ecx
	jne    3da3a <jsimd_can_h2v1_merged_upsample+0x1a>
	leaveq 
	retq   
	lea    0x2e2bf(%rip),%rcx        # 6bd00 <PW_F0402>
	and    $0xf,%rcx
	test   %rcx,%rcx
	jne    3da51 <jsimd_can_h2v1_merged_upsample+0x31>
	mov    $0x1,%eax
	leaveq 
	retq   
	leaveq 
	retq   
	data16 nopw %cs:0x0(%rax,%rax,1)
	xchg   %ax,%ax

003da60 <jsimd_h2v2_merged_upsample>:
	push   %rbp
	mov    %rsp,%rbp
	lea    0x6165(%rip),%rax        # 43bd0 <jsimd_h2v2_merged_upsample_sse2>
	mov    0x40(%rdi),%r8d
	add    $0xfffffffa,%r8d
	cmp    $0x9,%r8d
	ja     3da91 <jsimd_h2v2_merged_upsample+0x31>
	lea    0x1e0e0(%rip),%r9        # 5bb60 <jpeg_aritab+0x408>
	movslq (%r9,%r8,4),%r8
	add    %r9,%r8
	jmpq   *%r8
	lea    0x791f(%rip),%rax        # 453b0 <jsimd_h2v2_extxrgb_merged_upsample_sse2>
	mov    0x88(%rdi),%edi
	callq  *%rax
	leaveq 
	retq   
	lea    0x655e(%rip),%rax        # 44000 <jsimd_h2v2_extrgb_merged_upsample_sse2>
	jmp    3da91 <jsimd_h2v2_merged_upsample+0x31>
	lea    0x6935(%rip),%rax        # 443e0 <jsimd_h2v2_extrgbx_merged_upsample_sse2>
	jmp    3da91 <jsimd_h2v2_merged_upsample+0x31>
	lea    0x6d5c(%rip),%rax        # 44810 <jsimd_h2v2_extbgr_merged_upsample_sse2>
	jmp    3da91 <jsimd_h2v2_merged_upsample+0x31>
	lea    0x7133(%rip),%rax        # 44bf0 <jsimd_h2v2_extbgrx_merged_upsample_sse2>
	jmp    3da91 <jsimd_h2v2_merged_upsample+0x31>
	lea    0x750a(%rip),%rax        # 44fd0 <jsimd_h2v2_extxbgr_merged_upsample_sse2>
	jmp    3da91 <jsimd_h2v2_merged_upsample+0x31>
	nopl   0x0(%rax,%rax,1)

003dad0 <jsimd_h2v1_merged_upsample>:
	push   %rbp
	mov    %rsp,%rbp
	lea    0x5d65(%rip),%rax        # 43840 <jsimd_h2v1_merged_upsample_sse2>
	mov    0x40(%rdi),%r8d
	add    $0xfffffffa,%r8d
	cmp    $0x9,%r8d
	ja     3db01 <jsimd_h2v1_merged_upsample+0x31>
	lea    0x1e098(%rip),%r9        # 5bb88 <jpeg_aritab+0x430>
	movslq (%r9,%r8,4),%r8
	add    %r9,%r8
	jmpq   *%r8
	lea    0x756f(%rip),%rax        # 45070 <jsimd_h2v1_extxrgb_merged_upsample_sse2>
	mov    0x88(%rdi),%edi
	callq  *%rax
	leaveq 
	retq   
	lea    0x615e(%rip),%rax        # 43c70 <jsimd_h2v1_extrgb_merged_upsample_sse2>
	jmp    3db01 <jsimd_h2v1_merged_upsample+0x31>
	lea    0x6585(%rip),%rax        # 440a0 <jsimd_h2v1_extrgbx_merged_upsample_sse2>
	jmp    3db01 <jsimd_h2v1_merged_upsample+0x31>
	lea    0x695c(%rip),%rax        # 44480 <jsimd_h2v1_extbgr_merged_upsample_sse2>
	jmp    3db01 <jsimd_h2v1_merged_upsample+0x31>
	lea    0x6d83(%rip),%rax        # 448b0 <jsimd_h2v1_extbgrx_merged_upsample_sse2>
	jmp    3db01 <jsimd_h2v1_merged_upsample+0x31>
	lea    0x715a(%rip),%rax        # 44c90 <jsimd_h2v1_extxbgr_merged_upsample_sse2>
	jmp    3db01 <jsimd_h2v1_merged_upsample+0x31>
	nopl   0x0(%rax,%rax,1)

003db40 <jsimd_can_huff_encode_one_block>:
	push   %rbp
	mov    %rsp,%rbp
	callq  3df60 <init_simd>
	xor    %eax,%eax
	mov    0x30727(%rip),%ecx        # 6e278 <simd_support>
	and    $0x8,%ecx
	test   %ecx,%ecx
	jne    3db5a <jsimd_can_huff_encode_one_block+0x1a>
	leaveq 
	retq   
	mov    0x3071c(%rip),%ecx        # 6e27c <simd_huffman>
	test   %ecx,%ecx
	jne    3db66 <jsimd_can_huff_encode_one_block+0x26>
	leaveq 
	retq   
	lea    0x1e143(%rip),%rcx        # 5bcb0 <jconst_huff_encode_one_block>
	and    $0xf,%rcx
	test   %rcx,%rcx
	jne    3db7d <jsimd_can_huff_encode_one_block+0x3d>
	mov    $0x1,%eax
	leaveq 
	retq   
	leaveq 
	retq   
	nop

003db80 <jsimd_huff_encode_one_block>:
	push   %rbp
	mov    %rsp,%rbp
	callq  414c0 <jsimd_huff_encode_one_block_sse2>
	leaveq 
	retq   
	nopl   0x0(%rax,%rax,1)

003db90 <jsimd_can_convsamp>:
	push   %rbp
	mov    %rsp,%rbp
	callq  3df60 <init_simd>
	mov    0x306d9(%rip),%eax        # 6e278 <simd_support>
	and    $0x8,%eax
	test   %eax,%eax
	je     3dbad <jsimd_can_convsamp+0x1d>
	mov    $0x1,%eax
	leaveq 
	retq   
	xor    %eax,%eax
	leaveq 
	retq   
	data16 nopw %cs:0x0(%rax,%rax,1)
	nopl   0x0(%rax)

003dbc0 <jsimd_can_convsamp_float>:
	push   %rbp
	mov    %rsp,%rbp
	callq  3df60 <init_simd>
	mov    0x306a9(%rip),%eax        # 6e278 <simd_support>
	and    $0x8,%eax
	test   %eax,%eax
	je     3dbdd <jsimd_can_convsamp_float+0x1d>
	mov    $0x1,%eax
	leaveq 
	retq   
	xor    %eax,%eax
	leaveq 
	retq   
	data16 nopw %cs:0x0(%rax,%rax,1)
	nopl   0x0(%rax)

003dbf0 <jsimd_convsamp>:
	push   %rbp
	mov    %rsp,%rbp
	callq  480e0 <jsimd_convsamp_sse2>
	leaveq 
	retq   
	nopl   0x0(%rax,%rax,1)

003dc00 <jsimd_convsamp_float>:
	push   %rbp
	mov    %rsp,%rbp
	callq  47f80 <jsimd_convsamp_float_sse2>
	leaveq 
	retq   
	nopl   0x0(%rax,%rax,1)

003dc10 <jsimd_can_fdct_islow>:
	push   %rbp
	mov    %rsp,%rbp
	callq  3df60 <init_simd>
	xor    %eax,%eax
	mov    0x30657(%rip),%ecx        # 6e278 <simd_support>
	and    $0x8,%ecx
	test   %ecx,%ecx
	jne    3dc2a <jsimd_can_fdct_islow+0x1a>
	leaveq 
	retq   
	lea    0x2e1af(%rip),%rcx        # 6bde0 <PW_F130_F054>
	and    $0xf,%rcx
	test   %rcx,%rcx
	jne    3dc41 <jsimd_can_fdct_islow+0x31>
	mov    $0x1,%eax
	leaveq 
	retq   
	leaveq 
	retq   
	data16 nopw %cs:0x0(%rax,%rax,1)
	xchg   %ax,%ax

003dc50 <jsimd_can_fdct_ifast>:
	push   %rbp
	mov    %rsp,%rbp
	callq  3df60 <init_simd>
	xor    %eax,%eax
	mov    0x30617(%rip),%ecx        # 6e278 <simd_support>
	and    $0x8,%ecx
	test   %ecx,%ecx
	jne    3dc6a <jsimd_can_fdct_ifast+0x1a>
	leaveq 
	retq   
	lea    0x2e12f(%rip),%rcx        # 6bda0 <PW_F0707>
	and    $0xf,%rcx
	test   %rcx,%rcx
	jne    3dc81 <jsimd_can_fdct_ifast+0x31>
	mov    $0x1,%eax
	leaveq 
	retq   
	leaveq 
	retq   
	data16 nopw %cs:0x0(%rax,%rax,1)
	xchg   %ax,%ax

003dc90 <jsimd_can_fdct_float>:
	push   %rbp
	mov    %rsp,%rbp
	callq  3df60 <init_simd>
	xor    %eax,%eax
	mov    0x305d7(%rip),%ecx        # 6e278 <simd_support>
	and    $0x4,%ecx
	test   %ecx,%ecx
	jne    3dcaa <jsimd_can_fdct_float+0x1a>
	leaveq 
	retq   
	lea    0x1df2f(%rip),%rcx        # 5bbe0 <PD_0_382>
	and    $0xf,%rcx
	test   %rcx,%rcx
	jne    3dcc1 <jsimd_can_fdct_float+0x31>
	mov    $0x1,%eax
	leaveq 
	retq   
	leaveq 
	retq   
	data16 nopw %cs:0x0(%rax,%rax,1)
	xchg   %ax,%ax

003dcd0 <jsimd_fdct_islow>:
	push   %rbp
	mov    %rsp,%rbp
	callq  45f40 <jsimd_fdct_islow_sse2>
	leaveq 
	retq   
	nopl   0x0(%rax,%rax,1)

003dce0 <jsimd_fdct_ifast>:
	push   %rbp
	mov    %rsp,%rbp
	callq  45b30 <jsimd_fdct_ifast_sse2>
	leaveq 
	retq   
	nopl   0x0(%rax,%rax,1)

003dcf0 <jsimd_fdct_float>:
	push   %rbp
	mov    %rsp,%rbp
	callq  3dfe0 <jsimd_fdct_float_sse>
	leaveq 
	retq   
	nopl   0x0(%rax,%rax,1)

003dd00 <jsimd_can_quantize>:
	push   %rbp
	mov    %rsp,%rbp
	callq  3df60 <init_simd>
	mov    0x30569(%rip),%eax        # 6e278 <simd_support>
	and    $0x8,%eax
	test   %eax,%eax
	je     3dd1d <jsimd_can_quantize+0x1d>
	mov    $0x1,%eax
	leaveq 
	retq   
	xor    %eax,%eax
	leaveq 
	retq   
	data16 nopw %cs:0x0(%rax,%rax,1)
	nopl   0x0(%rax)

003dd30 <jsimd_can_quantize_float>:
	push   %rbp
	mov    %rsp,%rbp
	callq  3df60 <init_simd>
	mov    0x30539(%rip),%eax        # 6e278 <simd_support>
	and    $0x8,%eax
	test   %eax,%eax
	je     3dd4d <jsimd_can_quantize_float+0x1d>
	mov    $0x1,%eax
	leaveq 
	retq   
	xor    %eax,%eax
	leaveq 
	retq   
	data16 nopw %cs:0x0(%rax,%rax,1)
	nopl   0x0(%rax)

003dd60 <jsimd_quantize>:
	push   %rbp
	mov    %rsp,%rbp
	callq  481a0 <jsimd_quantize_sse2>
	leaveq 
	retq   
	nopl   0x0(%rax,%rax,1)

003dd70 <jsimd_quantize_float>:
	push   %rbp
	mov    %rsp,%rbp
	callq  48040 <jsimd_quantize_float_sse2>
	leaveq 
	retq   
	nopl   0x0(%rax,%rax,1)

003dd80 <jsimd_can_idct_2x2>:
	push   %rbp
	mov    %rsp,%rbp
	callq  3df60 <init_simd>
	xor    %eax,%eax
	mov    0x304e7(%rip),%ecx        # 6e278 <simd_support>
	and    $0x8,%ecx
	test   %ecx,%ecx
	jne    3dd9a <jsimd_can_idct_2x2+0x1a>
	leaveq 
	retq   
	lea    0x2e24f(%rip),%rcx        # 6bff0 <PW_F184_MF076>
	and    $0xf,%rcx
	test   %rcx,%rcx
	jne    3ddb1 <jsimd_can_idct_2x2+0x31>
	mov    $0x1,%eax
	leaveq 
	retq   
	leaveq 
	retq   
	data16 nopw %cs:0x0(%rax,%rax,1)
	xchg   %ax,%ax

003ddc0 <jsimd_can_idct_4x4>:
	push   %rbp
	mov    %rsp,%rbp
	callq  3df60 <init_simd>
	xor    %eax,%eax
	mov    0x304a7(%rip),%ecx        # 6e278 <simd_support>
	and    $0x8,%ecx
	test   %ecx,%ecx
	jne    3ddda <jsimd_can_idct_4x4+0x1a>
	leaveq 
	retq   
	lea    0x2e20f(%rip),%rcx        # 6bff0 <PW_F184_MF076>
	and    $0xf,%rcx
	test   %rcx,%rcx
	jne    3ddf1 <jsimd_can_idct_4x4+0x31>
	mov    $0x1,%eax
	leaveq 
	retq   
	leaveq 
	retq   
	data16 nopw %cs:0x0(%rax,%rax,1)
	xchg   %ax,%ax

003de00 <jsimd_idct_2x2>:
	push   %rbp
	mov    %rsp,%rbp
	mov    0x58(%rsi),%rdi
	mov    %rdx,%rsi
	mov    %rcx,%rdx
	mov    %r8,%rcx
	callq  47dc0 <jsimd_idct_2x2_sse2>
	leaveq 
	retq   
	nopl   0x0(%rax,%rax,1)

003de20 <jsimd_idct_4x4>:
	push   %rbp
	mov    %rsp,%rbp
	mov    0x58(%rsi),%rdi
	mov    %rdx,%rsi
	mov    %rcx,%rdx
	mov    %r8,%rcx
	callq  479f0 <jsimd_idct_4x4_sse2>
	leaveq 
	retq   
	nopl   0x0(%rax,%rax,1)

003de40 <jsimd_can_idct_islow>:
	push   %rbp
	mov    %rsp,%rbp
	callq  3df60 <init_simd>
	xor    %eax,%eax
	mov    0x30427(%rip),%ecx        # 6e278 <simd_support>
	and    $0x8,%ecx
	test   %ecx,%ecx
	jne    3de5a <jsimd_can_idct_islow+0x1a>
	leaveq 
	retq   
	lea    0x2e0df(%rip),%rcx        # 6bf40 <PW_F130_F054>
	and    $0xf,%rcx
	test   %rcx,%rcx
	jne    3de71 <jsimd_can_idct_islow+0x31>
	mov    $0x1,%eax
	leaveq 
	retq   
	leaveq 
	retq   
	data16 nopw %cs:0x0(%rax,%rax,1)
	xchg   %ax,%ax

003de80 <jsimd_can_idct_ifast>:
	push   %rbp
	mov    %rsp,%rbp
	callq  3df60 <init_simd>
	xor    %eax,%eax
	mov    0x303e7(%rip),%ecx        # 6e278 <simd_support>
	and    $0x8,%ecx
	test   %ecx,%ecx
	jne    3de9a <jsimd_can_idct_ifast+0x1a>
	leaveq 
	retq   
	lea    0x2e04f(%rip),%rcx        # 6bef0 <PW_F1414>
	and    $0xf,%rcx
	test   %rcx,%rcx
	jne    3deb1 <jsimd_can_idct_ifast+0x31>
	mov    $0x1,%eax
	leaveq 
	retq   
	leaveq 
	retq   
	data16 nopw %cs:0x0(%rax,%rax,1)
	xchg   %ax,%ax

003dec0 <jsimd_can_idct_float>:
	push   %rbp
	mov    %rsp,%rbp
	callq  3df60 <init_simd>
	xor    %eax,%eax
	mov    0x303a7(%rip),%ecx        # 6e278 <simd_support>
	and    $0x8,%ecx
	test   %ecx,%ecx
	jne    3deda <jsimd_can_idct_float+0x1a>
	leaveq 
	retq   
	lea    0x2dfaf(%rip),%rcx        # 6be90 <PD_1_414>
	and    $0xf,%rcx
	test   %rcx,%rcx
	jne    3def1 <jsimd_can_idct_float+0x31>
	mov    $0x1,%eax
	leaveq 
	retq   
	leaveq 
	retq   
	data16 nopw %cs:0x0(%rax,%rax,1)
	xchg   %ax,%ax

003df00 <jsimd_idct_islow>:
	push   %rbp
	mov    %rsp,%rbp
	mov    0x58(%rsi),%rdi
	mov    %rdx,%rsi
	mov    %rcx,%rdx
	mov    %r8,%rcx
	callq  47000 <jsimd_idct_islow_sse2>
	leaveq 
	retq   
	nopl   0x0(%rax,%rax,1)

003df20 <jsimd_idct_ifast>:
	push   %rbp
	mov    %rsp,%rbp
	mov    0x58(%rsi),%rdi
	mov    %rdx,%rsi
	mov    %rcx,%rdx
	mov    %r8,%rcx
	callq  46af0 <jsimd_idct_ifast_sse2>
	leaveq 
	retq   
	nopl   0x0(%rax,%rax,1)

003df40 <jsimd_idct_float>:
	push   %rbp
	mov    %rsp,%rbp
	mov    0x58(%rsi),%rdi
	mov    %rdx,%rsi
	mov    %rcx,%rdx
	mov    %r8,%rcx
	callq  46610 <jsimd_idct_float_sse2>
	leaveq 
	retq   
	nopl   0x0(%rax,%rax,1)

003df60 <init_simd>:
	push   %rbp
	mov    %rsp,%rbp
	mov    0x3030e(%rip),%eax        # 6e278 <simd_support>
	cmp    $0xfffffffe,%eax
	ja     3df71 <init_simd+0x11>
	leaveq 
	retq   
	movl   $0xc,0x302fd(%rip)        # 6e278 <simd_support>
	lea    0x1dc2e(%rip),%rdi        # 5bbb0 <jpeg_aritab+0x458>
	callq  4040 <getenv@plt>
	test   %rax,%rax
	jne    3df9f <init_simd+0x3f>
	lea    0x1dc2f(%rip),%rdi        # 5bbc2 <jpeg_aritab+0x46a>
	callq  4040 <getenv@plt>
	test   %rax,%rax
	jne    3dfbe <init_simd+0x5e>
	leaveq 
	retq   
	mov    %rax,%rdi
	lea    0x1dc17(%rip),%rsi        # 5bbc0 <jpeg_aritab+0x468>
	callq  4260 <strcmp@plt>
	test   %eax,%eax
	jne    3df8c <init_simd+0x2c>
	movl   $0x0,0x302bc(%rip)        # 6e278 <simd_support>
	jmp    3df8c <init_simd+0x2c>
	mov    %rax,%rdi
	lea    0x1dbf8(%rip),%rsi        # 5bbc0 <jpeg_aritab+0x468>
	callq  4260 <strcmp@plt>
	test   %eax,%eax
	je     3dfd3 <init_simd+0x73>
	leaveq 
	retq   
	movl   $0x0,0x3029f(%rip)        # 6e27c <simd_huffman>
	leaveq 
	retq   
	nop

003dfe0 <jsimd_fdct_float_sse>:
	push   %rbp
	mov    %rsp,%rax
	sub    $0x4,%rsp
	and    $0xfffffffffffffff0,%rsp
	mov    %rax,(%rsp)
	mov    %rsp,%rbp
	lea    -0x20(%rbp),%rsp
	push   %r10
	push   %r11
	push   %r12
	push   %r13
	push   %r14
	push   %r15
	mov    %rdi,%r10
	mov    %rsi,%r11
	mov    %rdx,%r12
	mov    %rcx,%r13
	mov    %r8,%r14
	mov    %r9,%r15
	mov    %r10,%rdx
	mov    $0x2,%ecx

003e01d <jsimd_fdct_float_sse.rowloop>:
	movaps 0x40(%rdx),%xmm0
	movaps 0x60(%rdx),%xmm1
	movaps 0x50(%rdx),%xmm2
	movaps 0x70(%rdx),%xmm3
	movaps %xmm0,%xmm4
	unpcklps %xmm1,%xmm0
	unpckhps %xmm1,%xmm4
	movaps %xmm2,%xmm5
	unpcklps %xmm3,%xmm2
	unpckhps %xmm3,%xmm5
	movaps (%rdx),%xmm6
	movaps 0x20(%rdx),%xmm7
	movaps 0x10(%rdx),%xmm1
	movaps 0x30(%rdx),%xmm3
	movaps %xmm4,-0x20(%rbp)
	movaps %xmm2,-0x10(%rbp)
	movaps %xmm6,%xmm4
	unpcklps %xmm7,%xmm6
	unpckhps %xmm7,%xmm4
	movaps %xmm1,%xmm2
	unpcklps %xmm3,%xmm1
	unpckhps %xmm3,%xmm2
	movaps %xmm6,%xmm7
	shufps $0x44,%xmm0,%xmm6
	shufps $0xee,%xmm0,%xmm7
	movaps %xmm2,%xmm3
	shufps $0x44,%xmm5,%xmm2
	shufps $0xee,%xmm5,%xmm3
	movaps %xmm7,%xmm0
	movaps %xmm6,%xmm5
	subps  %xmm2,%xmm7
	subps  %xmm3,%xmm6
	addps  %xmm2,%xmm0
	addps  %xmm3,%xmm5
	movaps -0x20(%rbp),%xmm2
	movaps -0x10(%rbp),%xmm3
	movaps %xmm7,-0x20(%rbp)
	movaps %xmm6,-0x10(%rbp)
	movaps %xmm4,%xmm7
	shufps $0x44,%xmm2,%xmm4
	shufps $0xee,%xmm2,%xmm7
	movaps %xmm1,%xmm6
	shufps $0x44,%xmm3,%xmm1
	shufps $0xee,%xmm3,%xmm6
	movaps %xmm7,%xmm2
	movaps %xmm4,%xmm3
	addps  %xmm1,%xmm7
	addps  %xmm6,%xmm4
	subps  %xmm1,%xmm2
	subps  %xmm6,%xmm3
	movaps %xmm5,%xmm1
	movaps %xmm0,%xmm6
	subps  %xmm7,%xmm5
	subps  %xmm4,%xmm0
	addps  %xmm7,%xmm1
	addps  %xmm4,%xmm6
	addps  %xmm5,%xmm0
	mulps  0x1db0c(%rip),%xmm0        # 5bbf0 <PD_0_707>
	movaps %xmm1,%xmm7
	movaps %xmm5,%xmm4
	subps  %xmm6,%xmm1
	subps  %xmm0,%xmm5
	addps  %xmm6,%xmm7
	addps  %xmm0,%xmm4
	movaps %xmm1,0x10(%rdx)
	movaps %xmm5,0x50(%rdx)
	movaps %xmm7,(%rdx)
	movaps %xmm4,0x40(%rdx)
	movaps -0x20(%rbp),%xmm6
	movaps -0x10(%rbp),%xmm0
	addps  %xmm3,%xmm2
	addps  %xmm6,%xmm3
	addps  %xmm0,%xmm6
	mulps  0x1dad3(%rip),%xmm3        # 5bbf0 <PD_0_707>
	movaps %xmm2,%xmm1
	subps  %xmm6,%xmm2
	mulps  0x1dab6(%rip),%xmm2        # 5bbe0 <PD_0_382>
	mulps  0x1dacf(%rip),%xmm1        # 5bc00 <PD_0_541>
	mulps  0x1dad8(%rip),%xmm6        # 5bc10 <PD_1_306>
	addps  %xmm2,%xmm1
	addps  %xmm2,%xmm6
	movaps %xmm0,%xmm5
	subps  %xmm3,%xmm0
	addps  %xmm3,%xmm5
	movaps %xmm0,%xmm7
	movaps %xmm5,%xmm4
	subps  %xmm1,%xmm0
	subps  %xmm6,%xmm5
	addps  %xmm1,%xmm7
	addps  %xmm6,%xmm4
	movaps %xmm0,0x60(%rdx)
	movaps %xmm5,0x70(%rdx)
	movaps %xmm7,0x30(%rdx)
	movaps %xmm4,0x20(%rdx)
	add    $0x80,%rdx
	dec    %rcx
	jne    3e01d <jsimd_fdct_float_sse.rowloop>
	mov    %r10,%rdx
	mov    $0x2,%ecx

003e181 <jsimd_fdct_float_sse.columnloop>:
	movaps 0x40(%rdx),%xmm0
	movaps 0x60(%rdx),%xmm1
	movaps 0xc0(%rdx),%xmm2
	movaps 0xe0(%rdx),%xmm3
	movaps %xmm0,%xmm4
	unpcklps %xmm1,%xmm0
	unpckhps %xmm1,%xmm4
	movaps %xmm2,%xmm5
	unpcklps %xmm3,%xmm2
	unpckhps %xmm3,%xmm5
	movaps (%rdx),%xmm6
	movaps 0x20(%rdx),%xmm7
	movaps 0x80(%rdx),%xmm1
	movaps 0xa0(%rdx),%xmm3
	movaps %xmm4,-0x20(%rbp)
	movaps %xmm2,-0x10(%rbp)
	movaps %xmm6,%xmm4
	unpcklps %xmm7,%xmm6
	unpckhps %xmm7,%xmm4
	movaps %xmm1,%xmm2
	unpcklps %xmm3,%xmm1
	unpckhps %xmm3,%xmm2
	movaps %xmm6,%xmm7
	shufps $0x44,%xmm0,%xmm6
	shufps $0xee,%xmm0,%xmm7
	movaps %xmm2,%xmm3
	shufps $0x44,%xmm5,%xmm2
	shufps $0xee,%xmm5,%xmm3
	movaps %xmm7,%xmm0
	movaps %xmm6,%xmm5
	subps  %xmm2,%xmm7
	subps  %xmm3,%xmm6
	addps  %xmm2,%xmm0
	addps  %xmm3,%xmm5
	movaps -0x20(%rbp),%xmm2
	movaps -0x10(%rbp),%xmm3
	movaps %xmm7,-0x20(%rbp)
	movaps %xmm6,-0x10(%rbp)
	movaps %xmm4,%xmm7
	shufps $0x44,%xmm2,%xmm4
	shufps $0xee,%xmm2,%xmm7
	movaps %xmm1,%xmm6
	shufps $0x44,%xmm3,%xmm1
	shufps $0xee,%xmm3,%xmm6
	movaps %xmm7,%xmm2
	movaps %xmm4,%xmm3
	addps  %xmm1,%xmm7
	addps  %xmm6,%xmm4
	subps  %xmm1,%xmm2
	subps  %xmm6,%xmm3
	movaps %xmm5,%xmm1
	movaps %xmm0,%xmm6
	subps  %xmm7,%xmm5
	subps  %xmm4,%xmm0
	addps  %xmm7,%xmm1
	addps  %xmm4,%xmm6
	addps  %xmm5,%xmm0
	mulps  0x1d99c(%rip),%xmm0        # 5bbf0 <PD_0_707>
	movaps %xmm1,%xmm7
	movaps %xmm5,%xmm4
	subps  %xmm6,%xmm1
	subps  %xmm0,%xmm5
	addps  %xmm6,%xmm7
	addps  %xmm0,%xmm4
	movaps %xmm1,0x80(%rdx)
	movaps %xmm5,0xc0(%rdx)
	movaps %xmm7,(%rdx)
	movaps %xmm4,0x40(%rdx)
	movaps -0x20(%rbp),%xmm6
	movaps -0x10(%rbp),%xmm0
	addps  %xmm3,%xmm2
	addps  %xmm6,%xmm3
	addps  %xmm0,%xmm6
	mulps  0x1d95d(%rip),%xmm3        # 5bbf0 <PD_0_707>
	movaps %xmm2,%xmm1
	subps  %xmm6,%xmm2
	mulps  0x1d940(%rip),%xmm2        # 5bbe0 <PD_0_382>
	mulps  0x1d959(%rip),%xmm1        # 5bc00 <PD_0_541>
	mulps  0x1d962(%rip),%xmm6        # 5bc10 <PD_1_306>
	addps  %xmm2,%xmm1
	addps  %xmm2,%xmm6
	movaps %xmm0,%xmm5
	subps  %xmm3,%xmm0
	addps  %xmm3,%xmm5
	movaps %xmm0,%xmm7
	movaps %xmm5,%xmm4
	subps  %xmm1,%xmm0
	subps  %xmm6,%xmm5
	addps  %xmm1,%xmm7
	addps  %xmm6,%xmm4
	movaps %xmm0,0x60(%rdx)
	movaps %xmm5,0xe0(%rdx)
	movaps %xmm7,0xa0(%rdx)
	movaps %xmm4,0x20(%rdx)
	add    $0x10,%rdx
	dec    %rcx
	jne    3e181 <jsimd_fdct_float_sse.columnloop>
	pop    %r15
	pop    %r14
	pop    %r13
	pop    %r12
	pop    %r11
	pop    %r10
	mov    %rbp,%rsp
	pop    %rsp
	pop    %rbp
	retq   
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop

003e310 <jsimd_rgb_ycc_convert_sse2>:
	push   %rbp
	mov    %rsp,%rax
	sub    $0x4,%rsp
	and    $0xfffffffffffffff0,%rsp
	mov    %rax,(%rsp)
	mov    %rsp,%rbp
	lea    -0x80(%rbp),%rsp
	push   %r10
	push   %r11
	push   %r12
	push   %r13
	push   %r14
	push   %r15
	mov    %rdi,%r10
	mov    %rsi,%r11
	mov    %rdx,%r12
	mov    %rcx,%r13
	mov    %r8,%r14
	mov    %r9,%r15
	push   %rbx
	mov    %r10d,%ecx
	test   %rcx,%rcx
	je     3e785 <jsimd_rgb_ycc_convert_sse2.return>
	push   %rcx
	mov    %r12,%rsi
	mov    %r13d,%ecx
	mov    (%rsi),%rdi
	mov    0x8(%rsi),%rbx
	mov    0x10(%rsi),%rdx
	lea    (%rdi,%rcx,8),%rdi
	lea    (%rbx,%rcx,8),%rbx
	lea    (%rdx,%rcx,8),%rdx
	pop    %rcx
	mov    %r11,%rsi
	mov    %r14d,%eax
	test   %rax,%rax
	jle    3e785 <jsimd_rgb_ycc_convert_sse2.return>

003e380 <jsimd_rgb_ycc_convert_sse2.rowloop>:
	push   %rdx
	push   %rbx
	push   %rdi
	push   %rsi
	push   %rcx
	mov    (%rsi),%rsi
	mov    (%rdi),%rdi
	mov    (%rbx),%rbx
	mov    (%rdx),%rdx
	cmp    $0x10,%rcx
	jae    3e425 <jsimd_rgb_ycc_convert_sse2.columnloop>

003e39b <jsimd_rgb_ycc_convert_sse2.column_ld1>:
	push   %rax
	push   %rdx
	lea    (%rcx,%rcx,2),%rcx
	test   $0x1,%cl
	je     3e3af <jsimd_rgb_ycc_convert_sse2.column_ld2>
	sub    $0x1,%rcx
	movzbq (%rsi,%rcx,1),%rax

003e3af <jsimd_rgb_ycc_convert_sse2.column_ld2>:
	test   $0x2,%cl
	je     3e3c4 <jsimd_rgb_ycc_convert_sse2.column_ld4>
	sub    $0x2,%rcx
	movzwq (%rsi,%rcx,1),%rdx
	shl    $0x10,%rax
	or     %rdx,%rax

003e3c4 <jsimd_rgb_ycc_convert_sse2.column_ld4>:
	movd   %eax,%xmm0
	pop    %rdx
	pop    %rax
	test   $0x4,%cl
	je     3e3e1 <jsimd_rgb_ycc_convert_sse2.column_ld8>
	sub    $0x4,%rcx
	movd   (%rsi,%rcx,1),%xmm5
	pslldq $0x4,%xmm0
	por    %xmm5,%xmm0

003e3e1 <jsimd_rgb_ycc_convert_sse2.column_ld8>:
	test   $0x8,%cl
	je     3e3f8 <jsimd_rgb_ycc_convert_sse2.column_ld16>
	sub    $0x8,%rcx
	movq   (%rsi,%rcx,1),%xmm1
	pslldq $0x8,%xmm0
	por    %xmm1,%xmm0

003e3f8 <jsimd_rgb_ycc_convert_sse2.column_ld16>:
	test   $0x10,%cl
	je     3e40c <jsimd_rgb_ycc_convert_sse2.column_ld32>
	movdqa %xmm0,%xmm5
	movdqu (%rsi),%xmm0
	mov    $0x10,%ecx
	jmp    3e433 <jsimd_rgb_ycc_convert_sse2.rgb_ycc_cnv>

003e40c <jsimd_rgb_ycc_convert_sse2.column_ld32>:
	test   $0x20,%cl
	mov    $0x10,%ecx
	je     3e433 <jsimd_rgb_ycc_convert_sse2.rgb_ycc_cnv>
	movdqa %xmm0,%xmm1
	movdqu (%rsi),%xmm0
	movdqu 0x10(%rsi),%xmm5
	jmp    3e433 <jsimd_rgb_ycc_convert_sse2.rgb_ycc_cnv>

003e425 <jsimd_rgb_ycc_convert_sse2.columnloop>:
	movdqu (%rsi),%xmm0
	movdqu 0x10(%rsi),%xmm5
	movdqu 0x20(%rsi),%xmm1

003e433 <jsimd_rgb_ycc_convert_sse2.rgb_ycc_cnv>:
	movdqa %xmm0,%xmm6
	pslldq $0x8,%xmm0
	psrldq $0x8,%xmm6
	punpckhbw %xmm5,%xmm0
	pslldq $0x8,%xmm5
	punpcklbw %xmm1,%xmm6
	punpckhbw %xmm1,%xmm5
	movdqa %xmm0,%xmm3
	pslldq $0x8,%xmm0
	psrldq $0x8,%xmm3
	punpckhbw %xmm6,%xmm0
	pslldq $0x8,%xmm6
	punpcklbw %xmm5,%xmm3
	punpckhbw %xmm5,%xmm6
	movdqa %xmm0,%xmm4
	pslldq $0x8,%xmm0
	psrldq $0x8,%xmm4
	punpckhbw %xmm3,%xmm0
	pslldq $0x8,%xmm3
	punpcklbw %xmm6,%xmm4
	punpckhbw %xmm6,%xmm3
	pxor   %xmm7,%xmm7
	movdqa %xmm0,%xmm2
	punpcklbw %xmm7,%xmm0
	punpckhbw %xmm7,%xmm2
	movdqa %xmm4,%xmm1
	punpcklbw %xmm7,%xmm4
	punpckhbw %xmm7,%xmm1
	movdqa %xmm3,%xmm5
	punpcklbw %xmm7,%xmm3
	punpckhbw %xmm7,%xmm5
	movdqa %xmm0,-0x80(%rbp)
	movdqa %xmm1,-0x70(%rbp)
	movdqa %xmm4,-0x60(%rbp)
	movdqa %xmm5,-0x50(%rbp)
	movdqa %xmm1,%xmm6
	punpcklwd %xmm3,%xmm1
	punpckhwd %xmm3,%xmm6
	movdqa %xmm1,%xmm7
	movdqa %xmm6,%xmm4
	pmaddwd 0x1d738(%rip),%xmm1        # 5bc20 <PW_F0299_F0337>
	pmaddwd 0x1d730(%rip),%xmm6        # 5bc20 <PW_F0299_F0337>
	pmaddwd 0x1d748(%rip),%xmm7        # 5bc40 <PW_MF016_MF033>
	pmaddwd 0x1d740(%rip),%xmm4        # 5bc40 <PW_MF016_MF033>
	movdqa %xmm1,-0x40(%rbp)
	movdqa %xmm6,-0x30(%rbp)
	pxor   %xmm1,%xmm1
	pxor   %xmm6,%xmm6
	punpcklwd %xmm5,%xmm1
	punpckhwd %xmm5,%xmm6
	psrld  $0x1,%xmm1
	psrld  $0x1,%xmm6
	movdqa 0x1d734(%rip),%xmm5        # 5bc60 <PD_ONEHALFM1_CJ>
	paddd  %xmm1,%xmm7
	paddd  %xmm6,%xmm4
	paddd  %xmm5,%xmm7
	paddd  %xmm5,%xmm4
	psrld  $0x10,%xmm7
	psrld  $0x10,%xmm4
	packssdw %xmm4,%xmm7
	movdqa -0x60(%rbp),%xmm1
	movdqa %xmm0,%xmm6
	punpcklwd %xmm2,%xmm0
	punpckhwd %xmm2,%xmm6
	movdqa %xmm0,%xmm5
	movdqa %xmm6,%xmm4
	pmaddwd 0x1d6b5(%rip),%xmm0        # 5bc20 <PW_F0299_F0337>
	pmaddwd 0x1d6ad(%rip),%xmm6        # 5bc20 <PW_F0299_F0337>
	pmaddwd 0x1d6c5(%rip),%xmm5        # 5bc40 <PW_MF016_MF033>
	pmaddwd 0x1d6bd(%rip),%xmm4        # 5bc40 <PW_MF016_MF033>
	movdqa %xmm0,-0x20(%rbp)
	movdqa %xmm6,-0x10(%rbp)
	pxor   %xmm0,%xmm0
	pxor   %xmm6,%xmm6
	punpcklwd %xmm1,%xmm0
	punpckhwd %xmm1,%xmm6
	psrld  $0x1,%xmm0
	psrld  $0x1,%xmm6
	movdqa 0x1d6b1(%rip),%xmm1        # 5bc60 <PD_ONEHALFM1_CJ>
	paddd  %xmm0,%xmm5
	paddd  %xmm6,%xmm4
	paddd  %xmm1,%xmm5
	paddd  %xmm1,%xmm4
	psrld  $0x10,%xmm5
	psrld  $0x10,%xmm4
	packssdw %xmm4,%xmm5
	psllw  $0x8,%xmm7
	por    %xmm7,%xmm5
	movdqa %xmm5,(%rbx)
	movdqa -0x50(%rbp),%xmm0
	movdqa -0x60(%rbp),%xmm6
	movdqa -0x70(%rbp),%xmm1
	movdqa %xmm0,%xmm4
	punpcklwd %xmm3,%xmm0
	punpckhwd %xmm3,%xmm4
	movdqa %xmm0,%xmm7
	movdqa %xmm4,%xmm5
	pmaddwd 0x1d62b(%rip),%xmm0        # 5bc30 <PW_F0114_F0250>
	pmaddwd 0x1d623(%rip),%xmm4        # 5bc30 <PW_F0114_F0250>
	pmaddwd 0x1d63b(%rip),%xmm7        # 5bc50 <PW_MF008_MF041>
	pmaddwd 0x1d633(%rip),%xmm5        # 5bc50 <PW_MF008_MF041>
	movdqa 0x1d64b(%rip),%xmm3        # 5bc70 <PD_ONEHALF>
	paddd  -0x40(%rbp),%xmm0
	paddd  -0x30(%rbp),%xmm4
	paddd  %xmm3,%xmm0
	paddd  %xmm3,%xmm4
	psrld  $0x10,%xmm0
	psrld  $0x10,%xmm4
	packssdw %xmm4,%xmm0
	pxor   %xmm3,%xmm3
	pxor   %xmm4,%xmm4
	punpcklwd %xmm1,%xmm3
	punpckhwd %xmm1,%xmm4
	psrld  $0x1,%xmm3
	psrld  $0x1,%xmm4
	movdqa 0x1d5f9(%rip),%xmm1        # 5bc60 <PD_ONEHALFM1_CJ>
	paddd  %xmm3,%xmm7
	paddd  %xmm4,%xmm5
	paddd  %xmm1,%xmm7
	paddd  %xmm1,%xmm5
	psrld  $0x10,%xmm7
	psrld  $0x10,%xmm5
	packssdw %xmm5,%xmm7
	movdqa -0x80(%rbp),%xmm3
	movdqa %xmm6,%xmm4
	punpcklwd %xmm2,%xmm6
	punpckhwd %xmm2,%xmm4
	movdqa %xmm6,%xmm1
	movdqa %xmm4,%xmm5
	pmaddwd 0x1d58a(%rip),%xmm6        # 5bc30 <PW_F0114_F0250>
	pmaddwd 0x1d582(%rip),%xmm4        # 5bc30 <PW_F0114_F0250>
	pmaddwd 0x1d59a(%rip),%xmm1        # 5bc50 <PW_MF008_MF041>
	pmaddwd 0x1d592(%rip),%xmm5        # 5bc50 <PW_MF008_MF041>
	movdqa 0x1d5aa(%rip),%xmm2        # 5bc70 <PD_ONEHALF>
	paddd  -0x20(%rbp),%xmm6
	paddd  -0x10(%rbp),%xmm4
	paddd  %xmm2,%xmm6
	paddd  %xmm2,%xmm4
	psrld  $0x10,%xmm6
	psrld  $0x10,%xmm4
	packssdw %xmm4,%xmm6
	psllw  $0x8,%xmm0
	por    %xmm0,%xmm6
	movdqa %xmm6,(%rdi)
	pxor   %xmm2,%xmm2
	pxor   %xmm4,%xmm4
	punpcklwd %xmm3,%xmm2
	punpckhwd %xmm3,%xmm4
	psrld  $0x1,%xmm2
	psrld  $0x1,%xmm4
	movdqa 0x1d54b(%rip),%xmm0        # 5bc60 <PD_ONEHALFM1_CJ>
	paddd  %xmm2,%xmm1
	paddd  %xmm4,%xmm5
	paddd  %xmm0,%xmm1
	paddd  %xmm0,%xmm5
	psrld  $0x10,%xmm1
	psrld  $0x10,%xmm5
	packssdw %xmm5,%xmm1
	psllw  $0x8,%xmm7
	por    %xmm7,%xmm1
	movdqa %xmm1,(%rdx)
	sub    $0x10,%rcx
	add    $0x30,%rsi
	add    $0x10,%rdi
	add    $0x10,%rbx
	add    $0x10,%rdx
	cmp    $0x10,%rcx
	jae    3e425 <jsimd_rgb_ycc_convert_sse2.columnloop>
	test   %rcx,%rcx
	jne    3e39b <jsimd_rgb_ycc_convert_sse2.column_ld1>
	pop    %rcx
	pop    %rsi
	pop    %rdi
	pop    %rbx
	pop    %rdx
	add    $0x8,%rsi
	add    $0x8,%rdi
	add    $0x8,%rbx
	add    $0x8,%rdx
	dec    %rax
	jg     3e380 <jsimd_rgb_ycc_convert_sse2.rowloop>

003e785 <jsimd_rgb_ycc_convert_sse2.return>:
	pop    %rbx
	pop    %r15
	pop    %r14
	pop    %r13
	pop    %r12
	pop    %r11
	pop    %r10
	mov    %rbp,%rsp
	pop    %rsp
	pop    %rbp
	retq   
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop

003e7a0 <jsimd_extrgb_ycc_convert_sse2>:
	push   %rbp
	mov    %rsp,%rax
	sub    $0x4,%rsp
	and    $0xfffffffffffffff0,%rsp
	mov    %rax,(%rsp)
	mov    %rsp,%rbp
	lea    -0x80(%rbp),%rsp
	push   %r10
	push   %r11
	push   %r12
	push   %r13
	push   %r14
	push   %r15
	mov    %rdi,%r10
	mov    %rsi,%r11
	mov    %rdx,%r12
	mov    %rcx,%r13
	mov    %r8,%r14
	mov    %r9,%r15
	push   %rbx
	mov    %r10d,%ecx
	test   %rcx,%rcx
	je     3ec15 <jsimd_extrgb_ycc_convert_sse2.return>
	push   %rcx
	mov    %r12,%rsi
	mov    %r13d,%ecx
	mov    (%rsi),%rdi
	mov    0x8(%rsi),%rbx
	mov    0x10(%rsi),%rdx
	lea    (%rdi,%rcx,8),%rdi
	lea    (%rbx,%rcx,8),%rbx
	lea    (%rdx,%rcx,8),%rdx
	pop    %rcx
	mov    %r11,%rsi
	mov    %r14d,%eax
	test   %rax,%rax
	jle    3ec15 <jsimd_extrgb_ycc_convert_sse2.return>

003e810 <jsimd_extrgb_ycc_convert_sse2.rowloop>:
	push   %rdx
	push   %rbx
	push   %rdi
	push   %rsi
	push   %rcx
	mov    (%rsi),%rsi
	mov    (%rdi),%rdi
	mov    (%rbx),%rbx
	mov    (%rdx),%rdx
	cmp    $0x10,%rcx
	jae    3e8b5 <jsimd_extrgb_ycc_convert_sse2.columnloop>

003e82b <jsimd_extrgb_ycc_convert_sse2.column_ld1>:
	push   %rax
	push   %rdx
	lea    (%rcx,%rcx,2),%rcx
	test   $0x1,%cl
	je     3e83f <jsimd_extrgb_ycc_convert_sse2.column_ld2>
	sub    $0x1,%rcx
	movzbq (%rsi,%rcx,1),%rax

003e83f <jsimd_extrgb_ycc_convert_sse2.column_ld2>:
	test   $0x2,%cl
	je     3e854 <jsimd_extrgb_ycc_convert_sse2.column_ld4>
	sub    $0x2,%rcx
	movzwq (%rsi,%rcx,1),%rdx
	shl    $0x10,%rax
	or     %rdx,%rax

003e854 <jsimd_extrgb_ycc_convert_sse2.column_ld4>:
	movd   %eax,%xmm0
	pop    %rdx
	pop    %rax
	test   $0x4,%cl
	je     3e871 <jsimd_extrgb_ycc_convert_sse2.column_ld8>
	sub    $0x4,%rcx
	movd   (%rsi,%rcx,1),%xmm5
	pslldq $0x4,%xmm0
	por    %xmm5,%xmm0

003e871 <jsimd_extrgb_ycc_convert_sse2.column_ld8>:
	test   $0x8,%cl
	je     3e888 <jsimd_extrgb_ycc_convert_sse2.column_ld16>
	sub    $0x8,%rcx
	movq   (%rsi,%rcx,1),%xmm1
	pslldq $0x8,%xmm0
	por    %xmm1,%xmm0

003e888 <jsimd_extrgb_ycc_convert_sse2.column_ld16>:
	test   $0x10,%cl
	je     3e89c <jsimd_extrgb_ycc_convert_sse2.column_ld32>
	movdqa %xmm0,%xmm5
	movdqu (%rsi),%xmm0
	mov    $0x10,%ecx
	jmp    3e8c3 <jsimd_extrgb_ycc_convert_sse2.rgb_ycc_cnv>

003e89c <jsimd_extrgb_ycc_convert_sse2.column_ld32>:
	test   $0x20,%cl
	mov    $0x10,%ecx
	je     3e8c3 <jsimd_extrgb_ycc_convert_sse2.rgb_ycc_cnv>
	movdqa %xmm0,%xmm1
	movdqu (%rsi),%xmm0
	movdqu 0x10(%rsi),%xmm5
	jmp    3e8c3 <jsimd_extrgb_ycc_convert_sse2.rgb_ycc_cnv>

003e8b5 <jsimd_extrgb_ycc_convert_sse2.columnloop>:
	movdqu (%rsi),%xmm0
	movdqu 0x10(%rsi),%xmm5
	movdqu 0x20(%rsi),%xmm1

003e8c3 <jsimd_extrgb_ycc_convert_sse2.rgb_ycc_cnv>:
	movdqa %xmm0,%xmm6
	pslldq $0x8,%xmm0
	psrldq $0x8,%xmm6
	punpckhbw %xmm5,%xmm0
	pslldq $0x8,%xmm5
	punpcklbw %xmm1,%xmm6
	punpckhbw %xmm1,%xmm5
	movdqa %xmm0,%xmm3
	pslldq $0x8,%xmm0
	psrldq $0x8,%xmm3
	punpckhbw %xmm6,%xmm0
	pslldq $0x8,%xmm6
	punpcklbw %xmm5,%xmm3
	punpckhbw %xmm5,%xmm6
	movdqa %xmm0,%xmm4
	pslldq $0x8,%xmm0
	psrldq $0x8,%xmm4
	punpckhbw %xmm3,%xmm0
	pslldq $0x8,%xmm3
	punpcklbw %xmm6,%xmm4
	punpckhbw %xmm6,%xmm3
	pxor   %xmm7,%xmm7
	movdqa %xmm0,%xmm2
	punpcklbw %xmm7,%xmm0
	punpckhbw %xmm7,%xmm2
	movdqa %xmm4,%xmm1
	punpcklbw %xmm7,%xmm4
	punpckhbw %xmm7,%xmm1
	movdqa %xmm3,%xmm5
	punpcklbw %xmm7,%xmm3
	punpckhbw %xmm7,%xmm5
	movdqa %xmm0,-0x80(%rbp)
	movdqa %xmm1,-0x70(%rbp)
	movdqa %xmm4,-0x60(%rbp)
	movdqa %xmm5,-0x50(%rbp)
	movdqa %xmm1,%xmm6
	punpcklwd %xmm3,%xmm1
	punpckhwd %xmm3,%xmm6
	movdqa %xmm1,%xmm7
	movdqa %xmm6,%xmm4
	pmaddwd 0x1d2a8(%rip),%xmm1        # 5bc20 <PW_F0299_F0337>
	pmaddwd 0x1d2a0(%rip),%xmm6        # 5bc20 <PW_F0299_F0337>
	pmaddwd 0x1d2b8(%rip),%xmm7        # 5bc40 <PW_MF016_MF033>
	pmaddwd 0x1d2b0(%rip),%xmm4        # 5bc40 <PW_MF016_MF033>
	movdqa %xmm1,-0x40(%rbp)
	movdqa %xmm6,-0x30(%rbp)
	pxor   %xmm1,%xmm1
	pxor   %xmm6,%xmm6
	punpcklwd %xmm5,%xmm1
	punpckhwd %xmm5,%xmm6
	psrld  $0x1,%xmm1
	psrld  $0x1,%xmm6
	movdqa 0x1d2a4(%rip),%xmm5        # 5bc60 <PD_ONEHALFM1_CJ>
	paddd  %xmm1,%xmm7
	paddd  %xmm6,%xmm4
	paddd  %xmm5,%xmm7
	paddd  %xmm5,%xmm4
	psrld  $0x10,%xmm7
	psrld  $0x10,%xmm4
	packssdw %xmm4,%xmm7
	movdqa -0x60(%rbp),%xmm1
	movdqa %xmm0,%xmm6
	punpcklwd %xmm2,%xmm0
	punpckhwd %xmm2,%xmm6
	movdqa %xmm0,%xmm5
	movdqa %xmm6,%xmm4
	pmaddwd 0x1d225(%rip),%xmm0        # 5bc20 <PW_F0299_F0337>
	pmaddwd 0x1d21d(%rip),%xmm6        # 5bc20 <PW_F0299_F0337>
	pmaddwd 0x1d235(%rip),%xmm5        # 5bc40 <PW_MF016_MF033>
	pmaddwd 0x1d22d(%rip),%xmm4        # 5bc40 <PW_MF016_MF033>
	movdqa %xmm0,-0x20(%rbp)
	movdqa %xmm6,-0x10(%rbp)
	pxor   %xmm0,%xmm0
	pxor   %xmm6,%xmm6
	punpcklwd %xmm1,%xmm0
	punpckhwd %xmm1,%xmm6
	psrld  $0x1,%xmm0
	psrld  $0x1,%xmm6
	movdqa 0x1d221(%rip),%xmm1        # 5bc60 <PD_ONEHALFM1_CJ>
	paddd  %xmm0,%xmm5
	paddd  %xmm6,%xmm4
	paddd  %xmm1,%xmm5
	paddd  %xmm1,%xmm4
	psrld  $0x10,%xmm5
	psrld  $0x10,%xmm4
	packssdw %xmm4,%xmm5
	psllw  $0x8,%xmm7
	por    %xmm7,%xmm5
	movdqa %xmm5,(%rbx)
	movdqa -0x50(%rbp),%xmm0
	movdqa -0x60(%rbp),%xmm6
	movdqa -0x70(%rbp),%xmm1
	movdqa %xmm0,%xmm4
	punpcklwd %xmm3,%xmm0
	punpckhwd %xmm3,%xmm4
	movdqa %xmm0,%xmm7
	movdqa %xmm4,%xmm5
	pmaddwd 0x1d19b(%rip),%xmm0        # 5bc30 <PW_F0114_F0250>
	pmaddwd 0x1d193(%rip),%xmm4        # 5bc30 <PW_F0114_F0250>
	pmaddwd 0x1d1ab(%rip),%xmm7        # 5bc50 <PW_MF008_MF041>
	pmaddwd 0x1d1a3(%rip),%xmm5        # 5bc50 <PW_MF008_MF041>
	movdqa 0x1d1bb(%rip),%xmm3        # 5bc70 <PD_ONEHALF>
	paddd  -0x40(%rbp),%xmm0
	paddd  -0x30(%rbp),%xmm4
	paddd  %xmm3,%xmm0
	paddd  %xmm3,%xmm4
	psrld  $0x10,%xmm0
	psrld  $0x10,%xmm4
	packssdw %xmm4,%xmm0
	pxor   %xmm3,%xmm3
	pxor   %xmm4,%xmm4
	punpcklwd %xmm1,%xmm3
	punpckhwd %xmm1,%xmm4
	psrld  $0x1,%xmm3
	psrld  $0x1,%xmm4
	movdqa 0x1d169(%rip),%xmm1        # 5bc60 <PD_ONEHALFM1_CJ>
	paddd  %xmm3,%xmm7
	paddd  %xmm4,%xmm5
	paddd  %xmm1,%xmm7
	paddd  %xmm1,%xmm5
	psrld  $0x10,%xmm7
	psrld  $0x10,%xmm5
	packssdw %xmm5,%xmm7
	movdqa -0x80(%rbp),%xmm3
	movdqa %xmm6,%xmm4
	punpcklwd %xmm2,%xmm6
	punpckhwd %xmm2,%xmm4
	movdqa %xmm6,%xmm1
	movdqa %xmm4,%xmm5
	pmaddwd 0x1d0fa(%rip),%xmm6        # 5bc30 <PW_F0114_F0250>
	pmaddwd 0x1d0f2(%rip),%xmm4        # 5bc30 <PW_F0114_F0250>
	pmaddwd 0x1d10a(%rip),%xmm1        # 5bc50 <PW_MF008_MF041>
	pmaddwd 0x1d102(%rip),%xmm5        # 5bc50 <PW_MF008_MF041>
	movdqa 0x1d11a(%rip),%xmm2        # 5bc70 <PD_ONEHALF>
	paddd  -0x20(%rbp),%xmm6
	paddd  -0x10(%rbp),%xmm4
	paddd  %xmm2,%xmm6
	paddd  %xmm2,%xmm4
	psrld  $0x10,%xmm6
	psrld  $0x10,%xmm4
	packssdw %xmm4,%xmm6
	psllw  $0x8,%xmm0
	por    %xmm0,%xmm6
	movdqa %xmm6,(%rdi)
	pxor   %xmm2,%xmm2
	pxor   %xmm4,%xmm4
	punpcklwd %xmm3,%xmm2
	punpckhwd %xmm3,%xmm4
	psrld  $0x1,%xmm2
	psrld  $0x1,%xmm4
	movdqa 0x1d0bb(%rip),%xmm0        # 5bc60 <PD_ONEHALFM1_CJ>
	paddd  %xmm2,%xmm1
	paddd  %xmm4,%xmm5
	paddd  %xmm0,%xmm1
	paddd  %xmm0,%xmm5
	psrld  $0x10,%xmm1
	psrld  $0x10,%xmm5
	packssdw %xmm5,%xmm1
	psllw  $0x8,%xmm7
	por    %xmm7,%xmm1
	movdqa %xmm1,(%rdx)
	sub    $0x10,%rcx
	add    $0x30,%rsi
	add    $0x10,%rdi
	add    $0x10,%rbx
	add    $0x10,%rdx
	cmp    $0x10,%rcx
	jae    3e8b5 <jsimd_extrgb_ycc_convert_sse2.columnloop>
	test   %rcx,%rcx
	jne    3e82b <jsimd_extrgb_ycc_convert_sse2.column_ld1>
	pop    %rcx
	pop    %rsi
	pop    %rdi
	pop    %rbx
	pop    %rdx
	add    $0x8,%rsi
	add    $0x8,%rdi
	add    $0x8,%rbx
	add    $0x8,%rdx
	dec    %rax
	jg     3e810 <jsimd_extrgb_ycc_convert_sse2.rowloop>

003ec15 <jsimd_extrgb_ycc_convert_sse2.return>:
	pop    %rbx
	pop    %r15
	pop    %r14
	pop    %r13
	pop    %r12
	pop    %r11
	pop    %r10
	mov    %rbp,%rsp
	pop    %rsp
	pop    %rbp
	retq   
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop

003ec30 <jsimd_extrgbx_ycc_convert_sse2>:
	push   %rbp
	mov    %rsp,%rax
	sub    $0x4,%rsp
	and    $0xfffffffffffffff0,%rsp
	mov    %rax,(%rsp)
	mov    %rsp,%rbp
	lea    -0x80(%rbp),%rsp
	push   %r10
	push   %r11
	push   %r12
	push   %r13
	push   %r14
	push   %r15
	mov    %rdi,%r10
	mov    %rsi,%r11
	mov    %rdx,%r12
	mov    %rcx,%r13
	mov    %r8,%r14
	mov    %r9,%r15
	push   %rbx
	mov    %r10d,%ecx
	test   %rcx,%rcx
	je     3f071 <jsimd_extrgbx_ycc_convert_sse2.return>
	push   %rcx
	mov    %r12,%rsi
	mov    %r13d,%ecx
	mov    (%rsi),%rdi
	mov    0x8(%rsi),%rbx
	mov    0x10(%rsi),%rdx
	lea    (%rdi,%rcx,8),%rdi
	lea    (%rbx,%rcx,8),%rbx
	lea    (%rdx,%rcx,8),%rdx
	pop    %rcx
	mov    %r11,%rsi
	mov    %r14d,%eax
	test   %rax,%rax
	jle    3f071 <jsimd_extrgbx_ycc_convert_sse2.return>

003eca0 <jsimd_extrgbx_ycc_convert_sse2.rowloop>:
	push   %rdx
	push   %rbx
	push   %rdi
	push   %rsi
	push   %rcx
	mov    (%rsi),%rsi
	mov    (%rdi),%rdi
	mov    (%rbx),%rbx
	mov    (%rdx),%rdx
	cmp    $0x10,%rcx
	jae    3ed0f <jsimd_extrgbx_ycc_convert_sse2.columnloop>

003ecbb <jsimd_extrgbx_ycc_convert_sse2.column_ld1>:
	test   $0x1,%cl
	je     3ecc9 <jsimd_extrgbx_ycc_convert_sse2.column_ld2>
	sub    $0x1,%rcx
	movd   (%rsi,%rcx,4),%xmm0

003ecc9 <jsimd_extrgbx_ycc_convert_sse2.column_ld2>:
	test   $0x2,%cl
	je     3ece0 <jsimd_extrgbx_ycc_convert_sse2.column_ld4>
	sub    $0x2,%rcx
	movq   (%rsi,%rcx,4),%xmm4
	pslldq $0x8,%xmm0
	por    %xmm4,%xmm0

003ece0 <jsimd_extrgbx_ycc_convert_sse2.column_ld4>:
	test   $0x4,%cl
	je     3ecf2 <jsimd_extrgbx_ycc_convert_sse2.column_ld8>
	sub    $0x4,%rcx
	movdqa %xmm0,%xmm4
	movdqu (%rsi,%rcx,4),%xmm0

003ecf2 <jsimd_extrgbx_ycc_convert_sse2.column_ld8>:
	test   $0x8,%cl
	mov    $0x10,%ecx
	je     3ed22 <jsimd_extrgbx_ycc_convert_sse2.rgb_ycc_cnv>
	movdqa %xmm0,%xmm5
	movdqa %xmm4,%xmm7
	movdqu (%rsi),%xmm0
	movdqu 0x10(%rsi),%xmm4
	jmp    3ed22 <jsimd_extrgbx_ycc_convert_sse2.rgb_ycc_cnv>

003ed0f <jsimd_extrgbx_ycc_convert_sse2.columnloop>:
	movdqu (%rsi),%xmm0
	movdqu 0x10(%rsi),%xmm4
	movdqu 0x20(%rsi),%xmm5
	movdqu 0x30(%rsi),%xmm7

003ed22 <jsimd_extrgbx_ycc_convert_sse2.rgb_ycc_cnv>:
	movdqa %xmm0,%xmm3
	punpcklbw %xmm4,%xmm0
	punpckhbw %xmm4,%xmm3
	movdqa %xmm5,%xmm2
	punpcklbw %xmm7,%xmm5
	punpckhbw %xmm7,%xmm2
	movdqa %xmm0,%xmm1
	punpcklwd %xmm5,%xmm0
	punpckhwd %xmm5,%xmm1
	movdqa %xmm3,%xmm6
	punpcklwd %xmm2,%xmm3
	punpckhwd %xmm2,%xmm6
	movdqa %xmm0,%xmm4
	punpcklbw %xmm3,%xmm0
	punpckhbw %xmm3,%xmm4
	movdqa %xmm1,%xmm7
	punpcklbw %xmm6,%xmm1
	punpckhbw %xmm6,%xmm7
	pxor   %xmm5,%xmm5
	movdqa %xmm0,%xmm2
	punpcklbw %xmm5,%xmm0
	punpckhbw %xmm5,%xmm2
	movdqa %xmm1,%xmm3
	punpcklbw %xmm5,%xmm1
	punpckhbw %xmm5,%xmm3
	movdqa %xmm4,%xmm6
	punpcklbw %xmm5,%xmm4
	punpckhbw %xmm5,%xmm6
	punpcklbw %xmm7,%xmm5
	punpckhbw %xmm7,%xmm7
	psrlw  $0x8,%xmm5
	psrlw  $0x8,%xmm7
	movdqa %xmm0,-0x80(%rbp)
	movdqa %xmm1,-0x70(%rbp)
	movdqa %xmm4,-0x60(%rbp)
	movdqa %xmm5,-0x50(%rbp)
	movdqa %xmm1,%xmm6
	punpcklwd %xmm3,%xmm1
	punpckhwd %xmm3,%xmm6
	movdqa %xmm1,%xmm7
	movdqa %xmm6,%xmm4
	pmaddwd 0x1ce4c(%rip),%xmm1        # 5bc20 <PW_F0299_F0337>
	pmaddwd 0x1ce44(%rip),%xmm6        # 5bc20 <PW_F0299_F0337>
	pmaddwd 0x1ce5c(%rip),%xmm7        # 5bc40 <PW_MF016_MF033>
	pmaddwd 0x1ce54(%rip),%xmm4        # 5bc40 <PW_MF016_MF033>
	movdqa %xmm1,-0x40(%rbp)
	movdqa %xmm6,-0x30(%rbp)
	pxor   %xmm1,%xmm1
	pxor   %xmm6,%xmm6
	punpcklwd %xmm5,%xmm1
	punpckhwd %xmm5,%xmm6
	psrld  $0x1,%xmm1
	psrld  $0x1,%xmm6
	movdqa 0x1ce48(%rip),%xmm5        # 5bc60 <PD_ONEHALFM1_CJ>
	paddd  %xmm1,%xmm7
	paddd  %xmm6,%xmm4
	paddd  %xmm5,%xmm7
	paddd  %xmm5,%xmm4
	psrld  $0x10,%xmm7
	psrld  $0x10,%xmm4
	packssdw %xmm4,%xmm7
	movdqa -0x60(%rbp),%xmm1
	movdqa %xmm0,%xmm6
	punpcklwd %xmm2,%xmm0
	punpckhwd %xmm2,%xmm6
	movdqa %xmm0,%xmm5
	movdqa %xmm6,%xmm4
	pmaddwd 0x1cdc9(%rip),%xmm0        # 5bc20 <PW_F0299_F0337>
	pmaddwd 0x1cdc1(%rip),%xmm6        # 5bc20 <PW_F0299_F0337>
	pmaddwd 0x1cdd9(%rip),%xmm5        # 5bc40 <PW_MF016_MF033>
	pmaddwd 0x1cdd1(%rip),%xmm4        # 5bc40 <PW_MF016_MF033>
	movdqa %xmm0,-0x20(%rbp)
	movdqa %xmm6,-0x10(%rbp)
	pxor   %xmm0,%xmm0
	pxor   %xmm6,%xmm6
	punpcklwd %xmm1,%xmm0
	punpckhwd %xmm1,%xmm6
	psrld  $0x1,%xmm0
	psrld  $0x1,%xmm6
	movdqa 0x1cdc5(%rip),%xmm1        # 5bc60 <PD_ONEHALFM1_CJ>
	paddd  %xmm0,%xmm5
	paddd  %xmm6,%xmm4
	paddd  %xmm1,%xmm5
	paddd  %xmm1,%xmm4
	psrld  $0x10,%xmm5
	psrld  $0x10,%xmm4
	packssdw %xmm4,%xmm5
	psllw  $0x8,%xmm7
	por    %xmm7,%xmm5
	movdqa %xmm5,(%rbx)
	movdqa -0x50(%rbp),%xmm0
	movdqa -0x60(%rbp),%xmm6
	movdqa -0x70(%rbp),%xmm1
	movdqa %xmm0,%xmm4
	punpcklwd %xmm3,%xmm0
	punpckhwd %xmm3,%xmm4
	movdqa %xmm0,%xmm7
	movdqa %xmm4,%xmm5
	pmaddwd 0x1cd3f(%rip),%xmm0        # 5bc30 <PW_F0114_F0250>
	pmaddwd 0x1cd37(%rip),%xmm4        # 5bc30 <PW_F0114_F0250>
	pmaddwd 0x1cd4f(%rip),%xmm7        # 5bc50 <PW_MF008_MF041>
	pmaddwd 0x1cd47(%rip),%xmm5        # 5bc50 <PW_MF008_MF041>
	movdqa 0x1cd5f(%rip),%xmm3        # 5bc70 <PD_ONEHALF>
	paddd  -0x40(%rbp),%xmm0
	paddd  -0x30(%rbp),%xmm4
	paddd  %xmm3,%xmm0
	paddd  %xmm3,%xmm4
	psrld  $0x10,%xmm0
	psrld  $0x10,%xmm4
	packssdw %xmm4,%xmm0
	pxor   %xmm3,%xmm3
	pxor   %xmm4,%xmm4
	punpcklwd %xmm1,%xmm3
	punpckhwd %xmm1,%xmm4
	psrld  $0x1,%xmm3
	psrld  $0x1,%xmm4
	movdqa 0x1cd0d(%rip),%xmm1        # 5bc60 <PD_ONEHALFM1_CJ>
	paddd  %xmm3,%xmm7
	paddd  %xmm4,%xmm5
	paddd  %xmm1,%xmm7
	paddd  %xmm1,%xmm5
	psrld  $0x10,%xmm7
	psrld  $0x10,%xmm5
	packssdw %xmm5,%xmm7
	movdqa -0x80(%rbp),%xmm3
	movdqa %xmm6,%xmm4
	punpcklwd %xmm2,%xmm6
	punpckhwd %xmm2,%xmm4
	movdqa %xmm6,%xmm1
	movdqa %xmm4,%xmm5
	pmaddwd 0x1cc9e(%rip),%xmm6        # 5bc30 <PW_F0114_F0250>
	pmaddwd 0x1cc96(%rip),%xmm4        # 5bc30 <PW_F0114_F0250>
	pmaddwd 0x1ccae(%rip),%xmm1        # 5bc50 <PW_MF008_MF041>
	pmaddwd 0x1cca6(%rip),%xmm5        # 5bc50 <PW_MF008_MF041>
	movdqa 0x1ccbe(%rip),%xmm2        # 5bc70 <PD_ONEHALF>
	paddd  -0x20(%rbp),%xmm6
	paddd  -0x10(%rbp),%xmm4
	paddd  %xmm2,%xmm6
	paddd  %xmm2,%xmm4
	psrld  $0x10,%xmm6
	psrld  $0x10,%xmm4
	packssdw %xmm4,%xmm6
	psllw  $0x8,%xmm0
	por    %xmm0,%xmm6
	movdqa %xmm6,(%rdi)
	pxor   %xmm2,%xmm2
	pxor   %xmm4,%xmm4
	punpcklwd %xmm3,%xmm2
	punpckhwd %xmm3,%xmm4
	psrld  $0x1,%xmm2
	psrld  $0x1,%xmm4
	movdqa 0x1cc5f(%rip),%xmm0        # 5bc60 <PD_ONEHALFM1_CJ>
	paddd  %xmm2,%xmm1
	paddd  %xmm4,%xmm5
	paddd  %xmm0,%xmm1
	paddd  %xmm0,%xmm5
	psrld  $0x10,%xmm1
	psrld  $0x10,%xmm5
	packssdw %xmm5,%xmm1
	psllw  $0x8,%xmm7
	por    %xmm7,%xmm1
	movdqa %xmm1,(%rdx)
	sub    $0x10,%rcx
	add    $0x40,%rsi
	add    $0x10,%rdi
	add    $0x10,%rbx
	add    $0x10,%rdx
	cmp    $0x10,%rcx
	jae    3ed0f <jsimd_extrgbx_ycc_convert_sse2.columnloop>
	test   %rcx,%rcx
	jne    3ecbb <jsimd_extrgbx_ycc_convert_sse2.column_ld1>
	pop    %rcx
	pop    %rsi
	pop    %rdi
	pop    %rbx
	pop    %rdx
	add    $0x8,%rsi
	add    $0x8,%rdi
	add    $0x8,%rbx
	add    $0x8,%rdx
	dec    %rax
	jg     3eca0 <jsimd_extrgbx_ycc_convert_sse2.rowloop>

003f071 <jsimd_extrgbx_ycc_convert_sse2.return>:
	pop    %rbx
	pop    %r15
	pop    %r14
	pop    %r13
	pop    %r12
	pop    %r11
	pop    %r10
	mov    %rbp,%rsp
	pop    %rsp
	pop    %rbp
	retq   
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop

003f090 <jsimd_extbgr_ycc_convert_sse2>:
	push   %rbp
	mov    %rsp,%rax
	sub    $0x4,%rsp
	and    $0xfffffffffffffff0,%rsp
	mov    %rax,(%rsp)
	mov    %rsp,%rbp
	lea    -0x80(%rbp),%rsp
	push   %r10
	push   %r11
	push   %r12
	push   %r13
	push   %r14
	push   %r15
	mov    %rdi,%r10
	mov    %rsi,%r11
	mov    %rdx,%r12
	mov    %rcx,%r13
	mov    %r8,%r14
	mov    %r9,%r15
	push   %rbx
	mov    %r10d,%ecx
	test   %rcx,%rcx
	je     3f505 <jsimd_extbgr_ycc_convert_sse2.return>
	push   %rcx
	mov    %r12,%rsi
	mov    %r13d,%ecx
	mov    (%rsi),%rdi
	mov    0x8(%rsi),%rbx
	mov    0x10(%rsi),%rdx
	lea    (%rdi,%rcx,8),%rdi
	lea    (%rbx,%rcx,8),%rbx
	lea    (%rdx,%rcx,8),%rdx
	pop    %rcx
	mov    %r11,%rsi
	mov    %r14d,%eax
	test   %rax,%rax
	jle    3f505 <jsimd_extbgr_ycc_convert_sse2.return>

003f100 <jsimd_extbgr_ycc_convert_sse2.rowloop>:
	push   %rdx
	push   %rbx
	push   %rdi
	push   %rsi
	push   %rcx
	mov    (%rsi),%rsi
	mov    (%rdi),%rdi
	mov    (%rbx),%rbx
	mov    (%rdx),%rdx
	cmp    $0x10,%rcx
	jae    3f1a5 <jsimd_extbgr_ycc_convert_sse2.columnloop>

003f11b <jsimd_extbgr_ycc_convert_sse2.column_ld1>:
	push   %rax
	push   %rdx
	lea    (%rcx,%rcx,2),%rcx
	test   $0x1,%cl
	je     3f12f <jsimd_extbgr_ycc_convert_sse2.column_ld2>
	sub    $0x1,%rcx
	movzbq (%rsi,%rcx,1),%rax

003f12f <jsimd_extbgr_ycc_convert_sse2.column_ld2>:
	test   $0x2,%cl
	je     3f144 <jsimd_extbgr_ycc_convert_sse2.column_ld4>
	sub    $0x2,%rcx
	movzwq (%rsi,%rcx,1),%rdx
	shl    $0x10,%rax
	or     %rdx,%rax

003f144 <jsimd_extbgr_ycc_convert_sse2.column_ld4>:
	movd   %eax,%xmm4
	pop    %rdx
	pop    %rax
	test   $0x4,%cl
	je     3f161 <jsimd_extbgr_ycc_convert_sse2.column_ld8>
	sub    $0x4,%rcx
	movd   (%rsi,%rcx,1),%xmm1
	pslldq $0x4,%xmm4
	por    %xmm1,%xmm4

003f161 <jsimd_extbgr_ycc_convert_sse2.column_ld8>:
	test   $0x8,%cl
	je     3f178 <jsimd_extbgr_ycc_convert_sse2.column_ld16>
	sub    $0x8,%rcx
	movq   (%rsi,%rcx,1),%xmm5
	pslldq $0x8,%xmm4
	por    %xmm5,%xmm4

003f178 <jsimd_extbgr_ycc_convert_sse2.column_ld16>:
	test   $0x10,%cl
	je     3f18c <jsimd_extbgr_ycc_convert_sse2.column_ld32>
	movdqa %xmm4,%xmm1
	movdqu (%rsi),%xmm4
	mov    $0x10,%ecx
	jmp    3f1b3 <jsimd_extbgr_ycc_convert_sse2.rgb_ycc_cnv>

003f18c <jsimd_extbgr_ycc_convert_sse2.column_ld32>:
	test   $0x20,%cl
	mov    $0x10,%ecx
	je     3f1b3 <jsimd_extbgr_ycc_convert_sse2.rgb_ycc_cnv>
	movdqa %xmm4,%xmm5
	movdqu (%rsi),%xmm4
	movdqu 0x10(%rsi),%xmm1
	jmp    3f1b3 <jsimd_extbgr_ycc_convert_sse2.rgb_ycc_cnv>

003f1a5 <jsimd_extbgr_ycc_convert_sse2.columnloop>:
	movdqu (%rsi),%xmm4
	movdqu 0x10(%rsi),%xmm1
	movdqu 0x20(%rsi),%xmm5

003f1b3 <jsimd_extbgr_ycc_convert_sse2.rgb_ycc_cnv>:
	movdqa %xmm4,%xmm6
	pslldq $0x8,%xmm4
	psrldq $0x8,%xmm6
	punpckhbw %xmm1,%xmm4
	pslldq $0x8,%xmm1
	punpcklbw %xmm5,%xmm6
	punpckhbw %xmm5,%xmm1
	movdqa %xmm4,%xmm3
	pslldq $0x8,%xmm4
	psrldq $0x8,%xmm3
	punpckhbw %xmm6,%xmm4
	pslldq $0x8,%xmm6
	punpcklbw %xmm1,%xmm3
	punpckhbw %xmm1,%xmm6
	movdqa %xmm4,%xmm0
	pslldq $0x8,%xmm4
	psrldq $0x8,%xmm0
	punpckhbw %xmm3,%xmm4
	pslldq $0x8,%xmm3
	punpcklbw %xmm6,%xmm0
	punpckhbw %xmm6,%xmm3
	pxor   %xmm7,%xmm7
	movdqa %xmm4,%xmm2
	punpcklbw %xmm7,%xmm4
	punpckhbw %xmm7,%xmm2
	movdqa %xmm0,%xmm5
	punpcklbw %xmm7,%xmm0
	punpckhbw %xmm7,%xmm5
	movdqa %xmm3,%xmm1
	punpcklbw %xmm7,%xmm3
	punpckhbw %xmm7,%xmm1
	movdqa %xmm0,-0x80(%rbp)
	movdqa %xmm1,-0x70(%rbp)
	movdqa %xmm4,-0x60(%rbp)
	movdqa %xmm5,-0x50(%rbp)
	movdqa %xmm1,%xmm6
	punpcklwd %xmm3,%xmm1
	punpckhwd %xmm3,%xmm6
	movdqa %xmm1,%xmm7
	movdqa %xmm6,%xmm4
	pmaddwd 0x1c9b8(%rip),%xmm1        # 5bc20 <PW_F0299_F0337>
	pmaddwd 0x1c9b0(%rip),%xmm6        # 5bc20 <PW_F0299_F0337>
	pmaddwd 0x1c9c8(%rip),%xmm7        # 5bc40 <PW_MF016_MF033>
	pmaddwd 0x1c9c0(%rip),%xmm4        # 5bc40 <PW_MF016_MF033>
	movdqa %xmm1,-0x40(%rbp)
	movdqa %xmm6,-0x30(%rbp)
	pxor   %xmm1,%xmm1
	pxor   %xmm6,%xmm6
	punpcklwd %xmm5,%xmm1
	punpckhwd %xmm5,%xmm6
	psrld  $0x1,%xmm1
	psrld  $0x1,%xmm6
	movdqa 0x1c9b4(%rip),%xmm5        # 5bc60 <PD_ONEHALFM1_CJ>
	paddd  %xmm1,%xmm7
	paddd  %xmm6,%xmm4
	paddd  %xmm5,%xmm7
	paddd  %xmm5,%xmm4
	psrld  $0x10,%xmm7
	psrld  $0x10,%xmm4
	packssdw %xmm4,%xmm7
	movdqa -0x60(%rbp),%xmm1
	movdqa %xmm0,%xmm6
	punpcklwd %xmm2,%xmm0
	punpckhwd %xmm2,%xmm6
	movdqa %xmm0,%xmm5
	movdqa %xmm6,%xmm4
	pmaddwd 0x1c935(%rip),%xmm0        # 5bc20 <PW_F0299_F0337>
	pmaddwd 0x1c92d(%rip),%xmm6        # 5bc20 <PW_F0299_F0337>
	pmaddwd 0x1c945(%rip),%xmm5        # 5bc40 <PW_MF016_MF033>
	pmaddwd 0x1c93d(%rip),%xmm4        # 5bc40 <PW_MF016_MF033>
	movdqa %xmm0,-0x20(%rbp)
	movdqa %xmm6,-0x10(%rbp)
	pxor   %xmm0,%xmm0
	pxor   %xmm6,%xmm6
	punpcklwd %xmm1,%xmm0
	punpckhwd %xmm1,%xmm6
	psrld  $0x1,%xmm0
	psrld  $0x1,%xmm6
	movdqa 0x1c931(%rip),%xmm1        # 5bc60 <PD_ONEHALFM1_CJ>
	paddd  %xmm0,%xmm5
	paddd  %xmm6,%xmm4
	paddd  %xmm1,%xmm5
	paddd  %xmm1,%xmm4
	psrld  $0x10,%xmm5
	psrld  $0x10,%xmm4
	packssdw %xmm4,%xmm5
	psllw  $0x8,%xmm7
	por    %xmm7,%xmm5
	movdqa %xmm5,(%rbx)
	movdqa -0x50(%rbp),%xmm0
	movdqa -0x60(%rbp),%xmm6
	movdqa -0x70(%rbp),%xmm1
	movdqa %xmm0,%xmm4
	punpcklwd %xmm3,%xmm0
	punpckhwd %xmm3,%xmm4
	movdqa %xmm0,%xmm7
	movdqa %xmm4,%xmm5
	pmaddwd 0x1c8ab(%rip),%xmm0        # 5bc30 <PW_F0114_F0250>
	pmaddwd 0x1c8a3(%rip),%xmm4        # 5bc30 <PW_F0114_F0250>
	pmaddwd 0x1c8bb(%rip),%xmm7        # 5bc50 <PW_MF008_MF041>
	pmaddwd 0x1c8b3(%rip),%xmm5        # 5bc50 <PW_MF008_MF041>
	movdqa 0x1c8cb(%rip),%xmm3        # 5bc70 <PD_ONEHALF>
	paddd  -0x40(%rbp),%xmm0
	paddd  -0x30(%rbp),%xmm4
	paddd  %xmm3,%xmm0
	paddd  %xmm3,%xmm4
	psrld  $0x10,%xmm0
	psrld  $0x10,%xmm4
	packssdw %xmm4,%xmm0
	pxor   %xmm3,%xmm3
	pxor   %xmm4,%xmm4
	punpcklwd %xmm1,%xmm3
	punpckhwd %xmm1,%xmm4
	psrld  $0x1,%xmm3
	psrld  $0x1,%xmm4
	movdqa 0x1c879(%rip),%xmm1        # 5bc60 <PD_ONEHALFM1_CJ>
	paddd  %xmm3,%xmm7
	paddd  %xmm4,%xmm5
	paddd  %xmm1,%xmm7
	paddd  %xmm1,%xmm5
	psrld  $0x10,%xmm7
	psrld  $0x10,%xmm5
	packssdw %xmm5,%xmm7
	movdqa -0x80(%rbp),%xmm3
	movdqa %xmm6,%xmm4
	punpcklwd %xmm2,%xmm6
	punpckhwd %xmm2,%xmm4
	movdqa %xmm6,%xmm1
	movdqa %xmm4,%xmm5
	pmaddwd 0x1c80a(%rip),%xmm6        # 5bc30 <PW_F0114_F0250>
	pmaddwd 0x1c802(%rip),%xmm4        # 5bc30 <PW_F0114_F0250>
	pmaddwd 0x1c81a(%rip),%xmm1        # 5bc50 <PW_MF008_MF041>
	pmaddwd 0x1c812(%rip),%xmm5        # 5bc50 <PW_MF008_MF041>
	movdqa 0x1c82a(%rip),%xmm2        # 5bc70 <PD_ONEHALF>
	paddd  -0x20(%rbp),%xmm6
	paddd  -0x10(%rbp),%xmm4
	paddd  %xmm2,%xmm6
	paddd  %xmm2,%xmm4
	psrld  $0x10,%xmm6
	psrld  $0x10,%xmm4
	packssdw %xmm4,%xmm6
	psllw  $0x8,%xmm0
	por    %xmm0,%xmm6
	movdqa %xmm6,(%rdi)
	pxor   %xmm2,%xmm2
	pxor   %xmm4,%xmm4
	punpcklwd %xmm3,%xmm2
	punpckhwd %xmm3,%xmm4
	psrld  $0x1,%xmm2
	psrld  $0x1,%xmm4
	movdqa 0x1c7cb(%rip),%xmm0        # 5bc60 <PD_ONEHALFM1_CJ>
	paddd  %xmm2,%xmm1
	paddd  %xmm4,%xmm5
	paddd  %xmm0,%xmm1
	paddd  %xmm0,%xmm5
	psrld  $0x10,%xmm1
	psrld  $0x10,%xmm5
	packssdw %xmm5,%xmm1
	psllw  $0x8,%xmm7
	por    %xmm7,%xmm1
	movdqa %xmm1,(%rdx)
	sub    $0x10,%rcx
	add    $0x30,%rsi
	add    $0x10,%rdi
	add    $0x10,%rbx
	add    $0x10,%rdx
	cmp    $0x10,%rcx
	jae    3f1a5 <jsimd_extbgr_ycc_convert_sse2.columnloop>
	test   %rcx,%rcx
	jne    3f11b <jsimd_extbgr_ycc_convert_sse2.column_ld1>
	pop    %rcx
	pop    %rsi
	pop    %rdi
	pop    %rbx
	pop    %rdx
	add    $0x8,%rsi
	add    $0x8,%rdi
	add    $0x8,%rbx
	add    $0x8,%rdx
	dec    %rax
	jg     3f100 <jsimd_extbgr_ycc_convert_sse2.rowloop>

003f505 <jsimd_extbgr_ycc_convert_sse2.return>:
	pop    %rbx
	pop    %r15
	pop    %r14
	pop    %r13
	pop    %r12
	pop    %r11
	pop    %r10
	mov    %rbp,%rsp
	pop    %rsp
	pop    %rbp
	retq   
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop

003f520 <jsimd_extbgrx_ycc_convert_sse2>:
	push   %rbp
	mov    %rsp,%rax
	sub    $0x4,%rsp
	and    $0xfffffffffffffff0,%rsp
	mov    %rax,(%rsp)
	mov    %rsp,%rbp
	lea    -0x80(%rbp),%rsp
	push   %r10
	push   %r11
	push   %r12
	push   %r13
	push   %r14
	push   %r15
	mov    %rdi,%r10
	mov    %rsi,%r11
	mov    %rdx,%r12
	mov    %rcx,%r13
	mov    %r8,%r14
	mov    %r9,%r15
	push   %rbx
	mov    %r10d,%ecx
	test   %rcx,%rcx
	je     3f961 <jsimd_extbgrx_ycc_convert_sse2.return>
	push   %rcx
	mov    %r12,%rsi
	mov    %r13d,%ecx
	mov    (%rsi),%rdi
	mov    0x8(%rsi),%rbx
	mov    0x10(%rsi),%rdx
	lea    (%rdi,%rcx,8),%rdi
	lea    (%rbx,%rcx,8),%rbx
	lea    (%rdx,%rcx,8),%rdx
	pop    %rcx
	mov    %r11,%rsi
	mov    %r14d,%eax
	test   %rax,%rax
	jle    3f961 <jsimd_extbgrx_ycc_convert_sse2.return>

003f590 <jsimd_extbgrx_ycc_convert_sse2.rowloop>:
	push   %rdx
	push   %rbx
	push   %rdi
	push   %rsi
	push   %rcx
	mov    (%rsi),%rsi
	mov    (%rdi),%rdi
	mov    (%rbx),%rbx
	mov    (%rdx),%rdx
	cmp    $0x10,%rcx
	jae    3f5ff <jsimd_extbgrx_ycc_convert_sse2.columnloop>

003f5ab <jsimd_extbgrx_ycc_convert_sse2.column_ld1>:
	test   $0x1,%cl
	je     3f5b9 <jsimd_extbgrx_ycc_convert_sse2.column_ld2>
	sub    $0x1,%rcx
	movd   (%rsi,%rcx,4),%xmm4

003f5b9 <jsimd_extbgrx_ycc_convert_sse2.column_ld2>:
	test   $0x2,%cl
	je     3f5d0 <jsimd_extbgrx_ycc_convert_sse2.column_ld4>
	sub    $0x2,%rcx
	movq   (%rsi,%rcx,4),%xmm0
	pslldq $0x8,%xmm4
	por    %xmm0,%xmm4

003f5d0 <jsimd_extbgrx_ycc_convert_sse2.column_ld4>:
	test   $0x4,%cl
	je     3f5e2 <jsimd_extbgrx_ycc_convert_sse2.column_ld8>
	sub    $0x4,%rcx
	movdqa %xmm4,%xmm0
	movdqu (%rsi,%rcx,4),%xmm4

003f5e2 <jsimd_extbgrx_ycc_convert_sse2.column_ld8>:
	test   $0x8,%cl
	mov    $0x10,%ecx
	je     3f612 <jsimd_extbgrx_ycc_convert_sse2.rgb_ycc_cnv>
	movdqa %xmm4,%xmm1
	movdqa %xmm0,%xmm7
	movdqu (%rsi),%xmm4
	movdqu 0x10(%rsi),%xmm0
	jmp    3f612 <jsimd_extbgrx_ycc_convert_sse2.rgb_ycc_cnv>

003f5ff <jsimd_extbgrx_ycc_convert_sse2.columnloop>:
	movdqu (%rsi),%xmm4
	movdqu 0x10(%rsi),%xmm0
	movdqu 0x20(%rsi),%xmm1
	movdqu 0x30(%rsi),%xmm7

003f612 <jsimd_extbgrx_ycc_convert_sse2.rgb_ycc_cnv>:
	movdqa %xmm4,%xmm3
	punpcklbw %xmm0,%xmm4
	punpckhbw %xmm0,%xmm3
	movdqa %xmm1,%xmm2
	punpcklbw %xmm7,%xmm1
	punpckhbw %xmm7,%xmm2
	movdqa %xmm4,%xmm5
	punpcklwd %xmm1,%xmm4
	punpckhwd %xmm1,%xmm5
	movdqa %xmm3,%xmm6
	punpcklwd %xmm2,%xmm3
	punpckhwd %xmm2,%xmm6
	movdqa %xmm4,%xmm0
	punpcklbw %xmm3,%xmm4
	punpckhbw %xmm3,%xmm0
	movdqa %xmm5,%xmm7
	punpcklbw %xmm6,%xmm5
	punpckhbw %xmm6,%xmm7
	pxor   %xmm1,%xmm1
	movdqa %xmm4,%xmm2
	punpcklbw %xmm1,%xmm4
	punpckhbw %xmm1,%xmm2
	movdqa %xmm5,%xmm3
	punpcklbw %xmm1,%xmm5
	punpckhbw %xmm1,%xmm3
	movdqa %xmm0,%xmm6
	punpcklbw %xmm1,%xmm0
	punpckhbw %xmm1,%xmm6
	punpcklbw %xmm7,%xmm1
	punpckhbw %xmm7,%xmm7
	psrlw  $0x8,%xmm1
	psrlw  $0x8,%xmm7
	movdqa %xmm0,-0x80(%rbp)
	movdqa %xmm1,-0x70(%rbp)
	movdqa %xmm4,-0x60(%rbp)
	movdqa %xmm5,-0x50(%rbp)
	movdqa %xmm1,%xmm6
	punpcklwd %xmm3,%xmm1
	punpckhwd %xmm3,%xmm6
	movdqa %xmm1,%xmm7
	movdqa %xmm6,%xmm4
	pmaddwd 0x1c55c(%rip),%xmm1        # 5bc20 <PW_F0299_F0337>
	pmaddwd 0x1c554(%rip),%xmm6        # 5bc20 <PW_F0299_F0337>
	pmaddwd 0x1c56c(%rip),%xmm7        # 5bc40 <PW_MF016_MF033>
	pmaddwd 0x1c564(%rip),%xmm4        # 5bc40 <PW_MF016_MF033>
	movdqa %xmm1,-0x40(%rbp)
	movdqa %xmm6,-0x30(%rbp)
	pxor   %xmm1,%xmm1
	pxor   %xmm6,%xmm6
	punpcklwd %xmm5,%xmm1
	punpckhwd %xmm5,%xmm6
	psrld  $0x1,%xmm1
	psrld  $0x1,%xmm6
	movdqa 0x1c558(%rip),%xmm5        # 5bc60 <PD_ONEHALFM1_CJ>
	paddd  %xmm1,%xmm7
	paddd  %xmm6,%xmm4
	paddd  %xmm5,%xmm7
	paddd  %xmm5,%xmm4
	psrld  $0x10,%xmm7
	psrld  $0x10,%xmm4
	packssdw %xmm4,%xmm7
	movdqa -0x60(%rbp),%xmm1
	movdqa %xmm0,%xmm6
	punpcklwd %xmm2,%xmm0
	punpckhwd %xmm2,%xmm6
	movdqa %xmm0,%xmm5
	movdqa %xmm6,%xmm4
	pmaddwd 0x1c4d9(%rip),%xmm0        # 5bc20 <PW_F0299_F0337>
	pmaddwd 0x1c4d1(%rip),%xmm6        # 5bc20 <PW_F0299_F0337>
	pmaddwd 0x1c4e9(%rip),%xmm5        # 5bc40 <PW_MF016_MF033>
	pmaddwd 0x1c4e1(%rip),%xmm4        # 5bc40 <PW_MF016_MF033>
	movdqa %xmm0,-0x20(%rbp)
	movdqa %xmm6,-0x10(%rbp)
	pxor   %xmm0,%xmm0
	pxor   %xmm6,%xmm6
	punpcklwd %xmm1,%xmm0
	punpckhwd %xmm1,%xmm6
	psrld  $0x1,%xmm0
	psrld  $0x1,%xmm6
	movdqa 0x1c4d5(%rip),%xmm1        # 5bc60 <PD_ONEHALFM1_CJ>
	paddd  %xmm0,%xmm5
	paddd  %xmm6,%xmm4
	paddd  %xmm1,%xmm5
	paddd  %xmm1,%xmm4
	psrld  $0x10,%xmm5
	psrld  $0x10,%xmm4
	packssdw %xmm4,%xmm5
	psllw  $0x8,%xmm7
	por    %xmm7,%xmm5
	movdqa %xmm5,(%rbx)
	movdqa -0x50(%rbp),%xmm0
	movdqa -0x60(%rbp),%xmm6
	movdqa -0x70(%rbp),%xmm1
	movdqa %xmm0,%xmm4
	punpcklwd %xmm3,%xmm0
	punpckhwd %xmm3,%xmm4
	movdqa %xmm0,%xmm7
	movdqa %xmm4,%xmm5
	pmaddwd 0x1c44f(%rip),%xmm0        # 5bc30 <PW_F0114_F0250>
	pmaddwd 0x1c447(%rip),%xmm4        # 5bc30 <PW_F0114_F0250>
	pmaddwd 0x1c45f(%rip),%xmm7        # 5bc50 <PW_MF008_MF041>
	pmaddwd 0x1c457(%rip),%xmm5        # 5bc50 <PW_MF008_MF041>
	movdqa 0x1c46f(%rip),%xmm3        # 5bc70 <PD_ONEHALF>
	paddd  -0x40(%rbp),%xmm0
	paddd  -0x30(%rbp),%xmm4
	paddd  %xmm3,%xmm0
	paddd  %xmm3,%xmm4
	psrld  $0x10,%xmm0
	psrld  $0x10,%xmm4
	packssdw %xmm4,%xmm0
	pxor   %xmm3,%xmm3
	pxor   %xmm4,%xmm4
	punpcklwd %xmm1,%xmm3
	punpckhwd %xmm1,%xmm4
	psrld  $0x1,%xmm3
	psrld  $0x1,%xmm4
	movdqa 0x1c41d(%rip),%xmm1        # 5bc60 <PD_ONEHALFM1_CJ>
	paddd  %xmm3,%xmm7
	paddd  %xmm4,%xmm5
	paddd  %xmm1,%xmm7
	paddd  %xmm1,%xmm5
	psrld  $0x10,%xmm7
	psrld  $0x10,%xmm5
	packssdw %xmm5,%xmm7
	movdqa -0x80(%rbp),%xmm3
	movdqa %xmm6,%xmm4
	punpcklwd %xmm2,%xmm6
	punpckhwd %xmm2,%xmm4
	movdqa %xmm6,%xmm1
	movdqa %xmm4,%xmm5
	pmaddwd 0x1c3ae(%rip),%xmm6        # 5bc30 <PW_F0114_F0250>
	pmaddwd 0x1c3a6(%rip),%xmm4        # 5bc30 <PW_F0114_F0250>
	pmaddwd 0x1c3be(%rip),%xmm1        # 5bc50 <PW_MF008_MF041>
	pmaddwd 0x1c3b6(%rip),%xmm5        # 5bc50 <PW_MF008_MF041>
	movdqa 0x1c3ce(%rip),%xmm2        # 5bc70 <PD_ONEHALF>
	paddd  -0x20(%rbp),%xmm6
	paddd  -0x10(%rbp),%xmm4
	paddd  %xmm2,%xmm6
	paddd  %xmm2,%xmm4
	psrld  $0x10,%xmm6
	psrld  $0x10,%xmm4
	packssdw %xmm4,%xmm6
	psllw  $0x8,%xmm0
	por    %xmm0,%xmm6
	movdqa %xmm6,(%rdi)
	pxor   %xmm2,%xmm2
	pxor   %xmm4,%xmm4
	punpcklwd %xmm3,%xmm2
	punpckhwd %xmm3,%xmm4
	psrld  $0x1,%xmm2
	psrld  $0x1,%xmm4
	movdqa 0x1c36f(%rip),%xmm0        # 5bc60 <PD_ONEHALFM1_CJ>
	paddd  %xmm2,%xmm1
	paddd  %xmm4,%xmm5
	paddd  %xmm0,%xmm1
	paddd  %xmm0,%xmm5
	psrld  $0x10,%xmm1
	psrld  $0x10,%xmm5
	packssdw %xmm5,%xmm1
	psllw  $0x8,%xmm7
	por    %xmm7,%xmm1
	movdqa %xmm1,(%rdx)
	sub    $0x10,%rcx
	add    $0x40,%rsi
	add    $0x10,%rdi
	add    $0x10,%rbx
	add    $0x10,%rdx
	cmp    $0x10,%rcx
	jae    3f5ff <jsimd_extbgrx_ycc_convert_sse2.columnloop>
	test   %rcx,%rcx
	jne    3f5ab <jsimd_extbgrx_ycc_convert_sse2.column_ld1>
	pop    %rcx
	pop    %rsi
	pop    %rdi
	pop    %rbx
	pop    %rdx
	add    $0x8,%rsi
	add    $0x8,%rdi
	add    $0x8,%rbx
	add    $0x8,%rdx
	dec    %rax
	jg     3f590 <jsimd_extbgrx_ycc_convert_sse2.rowloop>

003f961 <jsimd_extbgrx_ycc_convert_sse2.return>:
	pop    %rbx
	pop    %r15
	pop    %r14
	pop    %r13
	pop    %r12
	pop    %r11
	pop    %r10
	mov    %rbp,%rsp
	pop    %rsp
	pop    %rbp
	retq   
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop

003f980 <jsimd_extxbgr_ycc_convert_sse2>:
	push   %rbp
	mov    %rsp,%rax
	sub    $0x4,%rsp
	and    $0xfffffffffffffff0,%rsp
	mov    %rax,(%rsp)
	mov    %rsp,%rbp
	lea    -0x80(%rbp),%rsp
	push   %r10
	push   %r11
	push   %r12
	push   %r13
	push   %r14
	push   %r15
	mov    %rdi,%r10
	mov    %rsi,%r11
	mov    %rdx,%r12
	mov    %rcx,%r13
	mov    %r8,%r14
	mov    %r9,%r15
	push   %rbx
	mov    %r10d,%ecx
	test   %rcx,%rcx
	je     3fdc1 <jsimd_extxbgr_ycc_convert_sse2.return>
	push   %rcx
	mov    %r12,%rsi
	mov    %r13d,%ecx
	mov    (%rsi),%rdi
	mov    0x8(%rsi),%rbx
	mov    0x10(%rsi),%rdx
	lea    (%rdi,%rcx,8),%rdi
	lea    (%rbx,%rcx,8),%rbx
	lea    (%rdx,%rcx,8),%rdx
	pop    %rcx
	mov    %r11,%rsi
	mov    %r14d,%eax
	test   %rax,%rax
	jle    3fdc1 <jsimd_extxbgr_ycc_convert_sse2.return>

003f9f0 <jsimd_extxbgr_ycc_convert_sse2.rowloop>:
	push   %rdx
	push   %rbx
	push   %rdi
	push   %rsi
	push   %rcx
	mov    (%rsi),%rsi
	mov    (%rdi),%rdi
	mov    (%rbx),%rbx
	mov    (%rdx),%rdx
	cmp    $0x10,%rcx
	jae    3fa5f <jsimd_extxbgr_ycc_convert_sse2.columnloop>

003fa0b <jsimd_extxbgr_ycc_convert_sse2.column_ld1>:
	test   $0x1,%cl
	je     3fa19 <jsimd_extxbgr_ycc_convert_sse2.column_ld2>
	sub    $0x1,%rcx
	movd   (%rsi,%rcx,4),%xmm6

003fa19 <jsimd_extxbgr_ycc_convert_sse2.column_ld2>:
	test   $0x2,%cl
	je     3fa30 <jsimd_extxbgr_ycc_convert_sse2.column_ld4>
	sub    $0x2,%rcx
	movq   (%rsi,%rcx,4),%xmm2
	pslldq $0x8,%xmm6
	por    %xmm2,%xmm6

003fa30 <jsimd_extxbgr_ycc_convert_sse2.column_ld4>:
	test   $0x4,%cl
	je     3fa42 <jsimd_extxbgr_ycc_convert_sse2.column_ld8>
	sub    $0x4,%rcx
	movdqa %xmm6,%xmm2
	movdqu (%rsi,%rcx,4),%xmm6

003fa42 <jsimd_extxbgr_ycc_convert_sse2.column_ld8>:
	test   $0x8,%cl
	mov    $0x10,%ecx
	je     3fa72 <jsimd_extxbgr_ycc_convert_sse2.rgb_ycc_cnv>
	movdqa %xmm6,%xmm3
	movdqa %xmm2,%xmm1
	movdqu (%rsi),%xmm6
	movdqu 0x10(%rsi),%xmm2
	jmp    3fa72 <jsimd_extxbgr_ycc_convert_sse2.rgb_ycc_cnv>

003fa5f <jsimd_extxbgr_ycc_convert_sse2.columnloop>:
	movdqu (%rsi),%xmm6
	movdqu 0x10(%rsi),%xmm2
	movdqu 0x20(%rsi),%xmm3
	movdqu 0x30(%rsi),%xmm1

003fa72 <jsimd_extxbgr_ycc_convert_sse2.rgb_ycc_cnv>:
	movdqa %xmm6,%xmm5
	punpcklbw %xmm2,%xmm6
	punpckhbw %xmm2,%xmm5
	movdqa %xmm3,%xmm4
	punpcklbw %xmm1,%xmm3
	punpckhbw %xmm1,%xmm4
	movdqa %xmm6,%xmm7
	punpcklwd %xmm3,%xmm6
	punpckhwd %xmm3,%xmm7
	movdqa %xmm5,%xmm0
	punpcklwd %xmm4,%xmm5
	punpckhwd %xmm4,%xmm0
	movdqa %xmm6,%xmm2
	punpcklbw %xmm5,%xmm6
	punpckhbw %xmm5,%xmm2
	movdqa %xmm7,%xmm1
	punpcklbw %xmm0,%xmm7
	punpckhbw %xmm0,%xmm1
	pxor   %xmm3,%xmm3
	movdqa %xmm6,%xmm4
	punpcklbw %xmm3,%xmm6
	punpckhbw %xmm3,%xmm4
	movdqa %xmm7,%xmm5
	punpcklbw %xmm3,%xmm7
	punpckhbw %xmm3,%xmm5
	movdqa %xmm2,%xmm0
	punpcklbw %xmm3,%xmm2
	punpckhbw %xmm3,%xmm0
	punpcklbw %xmm1,%xmm3
	punpckhbw %xmm1,%xmm1
	psrlw  $0x8,%xmm3
	psrlw  $0x8,%xmm1
	movdqa %xmm0,-0x80(%rbp)
	movdqa %xmm1,-0x70(%rbp)
	movdqa %xmm4,-0x60(%rbp)
	movdqa %xmm5,-0x50(%rbp)
	movdqa %xmm1,%xmm6
	punpcklwd %xmm3,%xmm1
	punpckhwd %xmm3,%xmm6
	movdqa %xmm1,%xmm7
	movdqa %xmm6,%xmm4
	pmaddwd 0x1c0fc(%rip),%xmm1        # 5bc20 <PW_F0299_F0337>
	pmaddwd 0x1c0f4(%rip),%xmm6        # 5bc20 <PW_F0299_F0337>
	pmaddwd 0x1c10c(%rip),%xmm7        # 5bc40 <PW_MF016_MF033>
	pmaddwd 0x1c104(%rip),%xmm4        # 5bc40 <PW_MF016_MF033>
	movdqa %xmm1,-0x40(%rbp)
	movdqa %xmm6,-0x30(%rbp)
	pxor   %xmm1,%xmm1
	pxor   %xmm6,%xmm6
	punpcklwd %xmm5,%xmm1
	punpckhwd %xmm5,%xmm6
	psrld  $0x1,%xmm1
	psrld  $0x1,%xmm6
	movdqa 0x1c0f8(%rip),%xmm5        # 5bc60 <PD_ONEHALFM1_CJ>
	paddd  %xmm1,%xmm7
	paddd  %xmm6,%xmm4
	paddd  %xmm5,%xmm7
	paddd  %xmm5,%xmm4
	psrld  $0x10,%xmm7
	psrld  $0x10,%xmm4
	packssdw %xmm4,%xmm7
	movdqa -0x60(%rbp),%xmm1
	movdqa %xmm0,%xmm6
	punpcklwd %xmm2,%xmm0
	punpckhwd %xmm2,%xmm6
	movdqa %xmm0,%xmm5
	movdqa %xmm6,%xmm4
	pmaddwd 0x1c079(%rip),%xmm0        # 5bc20 <PW_F0299_F0337>
	pmaddwd 0x1c071(%rip),%xmm6        # 5bc20 <PW_F0299_F0337>
	pmaddwd 0x1c089(%rip),%xmm5        # 5bc40 <PW_MF016_MF033>
	pmaddwd 0x1c081(%rip),%xmm4        # 5bc40 <PW_MF016_MF033>
	movdqa %xmm0,-0x20(%rbp)
	movdqa %xmm6,-0x10(%rbp)
	pxor   %xmm0,%xmm0
	pxor   %xmm6,%xmm6
	punpcklwd %xmm1,%xmm0
	punpckhwd %xmm1,%xmm6
	psrld  $0x1,%xmm0
	psrld  $0x1,%xmm6
	movdqa 0x1c075(%rip),%xmm1        # 5bc60 <PD_ONEHALFM1_CJ>
	paddd  %xmm0,%xmm5
	paddd  %xmm6,%xmm4
	paddd  %xmm1,%xmm5
	paddd  %xmm1,%xmm4
	psrld  $0x10,%xmm5
	psrld  $0x10,%xmm4
	packssdw %xmm4,%xmm5
	psllw  $0x8,%xmm7
	por    %xmm7,%xmm5
	movdqa %xmm5,(%rbx)
	movdqa -0x50(%rbp),%xmm0
	movdqa -0x60(%rbp),%xmm6
	movdqa -0x70(%rbp),%xmm1
	movdqa %xmm0,%xmm4
	punpcklwd %xmm3,%xmm0
	punpckhwd %xmm3,%xmm4
	movdqa %xmm0,%xmm7
	movdqa %xmm4,%xmm5
	pmaddwd 0x1bfef(%rip),%xmm0        # 5bc30 <PW_F0114_F0250>
	pmaddwd 0x1bfe7(%rip),%xmm4        # 5bc30 <PW_F0114_F0250>
	pmaddwd 0x1bfff(%rip),%xmm7        # 5bc50 <PW_MF008_MF041>
	pmaddwd 0x1bff7(%rip),%xmm5        # 5bc50 <PW_MF008_MF041>
	movdqa 0x1c00f(%rip),%xmm3        # 5bc70 <PD_ONEHALF>
	paddd  -0x40(%rbp),%xmm0
	paddd  -0x30(%rbp),%xmm4
	paddd  %xmm3,%xmm0
	paddd  %xmm3,%xmm4
	psrld  $0x10,%xmm0
	psrld  $0x10,%xmm4
	packssdw %xmm4,%xmm0
	pxor   %xmm3,%xmm3
	pxor   %xmm4,%xmm4
	punpcklwd %xmm1,%xmm3
	punpckhwd %xmm1,%xmm4
	psrld  $0x1,%xmm3
	psrld  $0x1,%xmm4
	movdqa 0x1bfbd(%rip),%xmm1        # 5bc60 <PD_ONEHALFM1_CJ>
	paddd  %xmm3,%xmm7
	paddd  %xmm4,%xmm5
	paddd  %xmm1,%xmm7
	paddd  %xmm1,%xmm5
	psrld  $0x10,%xmm7
	psrld  $0x10,%xmm5
	packssdw %xmm5,%xmm7
	movdqa -0x80(%rbp),%xmm3
	movdqa %xmm6,%xmm4
	punpcklwd %xmm2,%xmm6
	punpckhwd %xmm2,%xmm4
	movdqa %xmm6,%xmm1
	movdqa %xmm4,%xmm5
	pmaddwd 0x1bf4e(%rip),%xmm6        # 5bc30 <PW_F0114_F0250>
	pmaddwd 0x1bf46(%rip),%xmm4        # 5bc30 <PW_F0114_F0250>
	pmaddwd 0x1bf5e(%rip),%xmm1        # 5bc50 <PW_MF008_MF041>
	pmaddwd 0x1bf56(%rip),%xmm5        # 5bc50 <PW_MF008_MF041>
	movdqa 0x1bf6e(%rip),%xmm2        # 5bc70 <PD_ONEHALF>
	paddd  -0x20(%rbp),%xmm6
	paddd  -0x10(%rbp),%xmm4
	paddd  %xmm2,%xmm6
	paddd  %xmm2,%xmm4
	psrld  $0x10,%xmm6
	psrld  $0x10,%xmm4
	packssdw %xmm4,%xmm6
	psllw  $0x8,%xmm0
	por    %xmm0,%xmm6
	movdqa %xmm6,(%rdi)
	pxor   %xmm2,%xmm2
	pxor   %xmm4,%xmm4
	punpcklwd %xmm3,%xmm2
	punpckhwd %xmm3,%xmm4
	psrld  $0x1,%xmm2
	psrld  $0x1,%xmm4
	movdqa 0x1bf0f(%rip),%xmm0        # 5bc60 <PD_ONEHALFM1_CJ>
	paddd  %xmm2,%xmm1
	paddd  %xmm4,%xmm5
	paddd  %xmm0,%xmm1
	paddd  %xmm0,%xmm5
	psrld  $0x10,%xmm1
	psrld  $0x10,%xmm5
	packssdw %xmm5,%xmm1
	psllw  $0x8,%xmm7
	por    %xmm7,%xmm1
	movdqa %xmm1,(%rdx)
	sub    $0x10,%rcx
	add    $0x40,%rsi
	add    $0x10,%rdi
	add    $0x10,%rbx
	add    $0x10,%rdx
	cmp    $0x10,%rcx
	jae    3fa5f <jsimd_extxbgr_ycc_convert_sse2.columnloop>
	test   %rcx,%rcx
	jne    3fa0b <jsimd_extxbgr_ycc_convert_sse2.column_ld1>
	pop    %rcx
	pop    %rsi
	pop    %rdi
	pop    %rbx
	pop    %rdx
	add    $0x8,%rsi
	add    $0x8,%rdi
	add    $0x8,%rbx
	add    $0x8,%rdx
	dec    %rax
	jg     3f9f0 <jsimd_extxbgr_ycc_convert_sse2.rowloop>

003fdc1 <jsimd_extxbgr_ycc_convert_sse2.return>:
	pop    %rbx
	pop    %r15
	pop    %r14
	pop    %r13
	pop    %r12
	pop    %r11
	pop    %r10
	mov    %rbp,%rsp
	pop    %rsp
	pop    %rbp
	retq   
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop

003fde0 <jsimd_extxrgb_ycc_convert_sse2>:
	push   %rbp
	mov    %rsp,%rax
	sub    $0x4,%rsp
	and    $0xfffffffffffffff0,%rsp
	mov    %rax,(%rsp)
	mov    %rsp,%rbp
	lea    -0x80(%rbp),%rsp
	push   %r10
	push   %r11
	push   %r12
	push   %r13
	push   %r14
	push   %r15
	mov    %rdi,%r10
	mov    %rsi,%r11
	mov    %rdx,%r12
	mov    %rcx,%r13
	mov    %r8,%r14
	mov    %r9,%r15
	push   %rbx
	mov    %r10d,%ecx
	test   %rcx,%rcx
	je     40221 <jsimd_extxrgb_ycc_convert_sse2.return>
	push   %rcx
	mov    %r12,%rsi
	mov    %r13d,%ecx
	mov    (%rsi),%rdi
	mov    0x8(%rsi),%rbx
	mov    0x10(%rsi),%rdx
	lea    (%rdi,%rcx,8),%rdi
	lea    (%rbx,%rcx,8),%rbx
	lea    (%rdx,%rcx,8),%rdx
	pop    %rcx
	mov    %r11,%rsi
	mov    %r14d,%eax
	test   %rax,%rax
	jle    40221 <jsimd_extxrgb_ycc_convert_sse2.return>

003fe50 <jsimd_extxrgb_ycc_convert_sse2.rowloop>:
	push   %rdx
	push   %rbx
	push   %rdi
	push   %rsi
	push   %rcx
	mov    (%rsi),%rsi
	mov    (%rdi),%rdi
	mov    (%rbx),%rbx
	mov    (%rdx),%rdx
	cmp    $0x10,%rcx
	jae    3febf <jsimd_extxrgb_ycc_convert_sse2.columnloop>

003fe6b <jsimd_extxrgb_ycc_convert_sse2.column_ld1>:
	test   $0x1,%cl
	je     3fe79 <jsimd_extxrgb_ycc_convert_sse2.column_ld2>
	sub    $0x1,%rcx
	movd   (%rsi,%rcx,4),%xmm6

003fe79 <jsimd_extxrgb_ycc_convert_sse2.column_ld2>:
	test   $0x2,%cl
	je     3fe90 <jsimd_extxrgb_ycc_convert_sse2.column_ld4>
	sub    $0x2,%rcx
	movq   (%rsi,%rcx,4),%xmm2
	pslldq $0x8,%xmm6
	por    %xmm2,%xmm6

003fe90 <jsimd_extxrgb_ycc_convert_sse2.column_ld4>:
	test   $0x4,%cl
	je     3fea2 <jsimd_extxrgb_ycc_convert_sse2.column_ld8>
	sub    $0x4,%rcx
	movdqa %xmm6,%xmm2
	movdqu (%rsi,%rcx,4),%xmm6

003fea2 <jsimd_extxrgb_ycc_convert_sse2.column_ld8>:
	test   $0x8,%cl
	mov    $0x10,%ecx
	je     3fed2 <jsimd_extxrgb_ycc_convert_sse2.rgb_ycc_cnv>
	movdqa %xmm6,%xmm3
	movdqa %xmm2,%xmm5
	movdqu (%rsi),%xmm6
	movdqu 0x10(%rsi),%xmm2
	jmp    3fed2 <jsimd_extxrgb_ycc_convert_sse2.rgb_ycc_cnv>

003febf <jsimd_extxrgb_ycc_convert_sse2.columnloop>:
	movdqu (%rsi),%xmm6
	movdqu 0x10(%rsi),%xmm2
	movdqu 0x20(%rsi),%xmm3
	movdqu 0x30(%rsi),%xmm5

003fed2 <jsimd_extxrgb_ycc_convert_sse2.rgb_ycc_cnv>:
	movdqa %xmm6,%xmm1
	punpcklbw %xmm2,%xmm6
	punpckhbw %xmm2,%xmm1
	movdqa %xmm3,%xmm0
	punpcklbw %xmm5,%xmm3
	punpckhbw %xmm5,%xmm0
	movdqa %xmm6,%xmm7
	punpcklwd %xmm3,%xmm6
	punpckhwd %xmm3,%xmm7
	movdqa %xmm1,%xmm4
	punpcklwd %xmm0,%xmm1
	punpckhwd %xmm0,%xmm4
	movdqa %xmm6,%xmm2
	punpcklbw %xmm1,%xmm6
	punpckhbw %xmm1,%xmm2
	movdqa %xmm7,%xmm5
	punpcklbw %xmm4,%xmm7
	punpckhbw %xmm4,%xmm5
	pxor   %xmm3,%xmm3
	movdqa %xmm6,%xmm0
	punpcklbw %xmm3,%xmm6
	punpckhbw %xmm3,%xmm0
	movdqa %xmm7,%xmm1
	punpcklbw %xmm3,%xmm7
	punpckhbw %xmm3,%xmm1
	movdqa %xmm2,%xmm4
	punpcklbw %xmm3,%xmm2
	punpckhbw %xmm3,%xmm4
	punpcklbw %xmm5,%xmm3
	punpckhbw %xmm5,%xmm5
	psrlw  $0x8,%xmm3
	psrlw  $0x8,%xmm5
	movdqa %xmm0,-0x80(%rbp)
	movdqa %xmm1,-0x70(%rbp)
	movdqa %xmm4,-0x60(%rbp)
	movdqa %xmm5,-0x50(%rbp)
	movdqa %xmm1,%xmm6
	punpcklwd %xmm3,%xmm1
	punpckhwd %xmm3,%xmm6
	movdqa %xmm1,%xmm7
	movdqa %xmm6,%xmm4
	pmaddwd 0x1bc9c(%rip),%xmm1        # 5bc20 <PW_F0299_F0337>
	pmaddwd 0x1bc94(%rip),%xmm6        # 5bc20 <PW_F0299_F0337>
	pmaddwd 0x1bcac(%rip),%xmm7        # 5bc40 <PW_MF016_MF033>
	pmaddwd 0x1bca4(%rip),%xmm4        # 5bc40 <PW_MF016_MF033>
	movdqa %xmm1,-0x40(%rbp)
	movdqa %xmm6,-0x30(%rbp)
	pxor   %xmm1,%xmm1
	pxor   %xmm6,%xmm6
	punpcklwd %xmm5,%xmm1
	punpckhwd %xmm5,%xmm6
	psrld  $0x1,%xmm1
	psrld  $0x1,%xmm6
	movdqa 0x1bc98(%rip),%xmm5        # 5bc60 <PD_ONEHALFM1_CJ>
	paddd  %xmm1,%xmm7
	paddd  %xmm6,%xmm4
	paddd  %xmm5,%xmm7
	paddd  %xmm5,%xmm4
	psrld  $0x10,%xmm7
	psrld  $0x10,%xmm4
	packssdw %xmm4,%xmm7
	movdqa -0x60(%rbp),%xmm1
	movdqa %xmm0,%xmm6
	punpcklwd %xmm2,%xmm0
	punpckhwd %xmm2,%xmm6
	movdqa %xmm0,%xmm5
	movdqa %xmm6,%xmm4
	pmaddwd 0x1bc19(%rip),%xmm0        # 5bc20 <PW_F0299_F0337>
	pmaddwd 0x1bc11(%rip),%xmm6        # 5bc20 <PW_F0299_F0337>
	pmaddwd 0x1bc29(%rip),%xmm5        # 5bc40 <PW_MF016_MF033>
	pmaddwd 0x1bc21(%rip),%xmm4        # 5bc40 <PW_MF016_MF033>
	movdqa %xmm0,-0x20(%rbp)
	movdqa %xmm6,-0x10(%rbp)
	pxor   %xmm0,%xmm0
	pxor   %xmm6,%xmm6
	punpcklwd %xmm1,%xmm0
	punpckhwd %xmm1,%xmm6
	psrld  $0x1,%xmm0
	psrld  $0x1,%xmm6
	movdqa 0x1bc15(%rip),%xmm1        # 5bc60 <PD_ONEHALFM1_CJ>
	paddd  %xmm0,%xmm5
	paddd  %xmm6,%xmm4
	paddd  %xmm1,%xmm5
	paddd  %xmm1,%xmm4
	psrld  $0x10,%xmm5
	psrld  $0x10,%xmm4
	packssdw %xmm4,%xmm5
	psllw  $0x8,%xmm7
	por    %xmm7,%xmm5
	movdqa %xmm5,(%rbx)
	movdqa -0x50(%rbp),%xmm0
	movdqa -0x60(%rbp),%xmm6
	movdqa -0x70(%rbp),%xmm1
	movdqa %xmm0,%xmm4
	punpcklwd %xmm3,%xmm0
	punpckhwd %xmm3,%xmm4
	movdqa %xmm0,%xmm7
	movdqa %xmm4,%xmm5
	pmaddwd 0x1bb8f(%rip),%xmm0        # 5bc30 <PW_F0114_F0250>
	pmaddwd 0x1bb87(%rip),%xmm4        # 5bc30 <PW_F0114_F0250>
	pmaddwd 0x1bb9f(%rip),%xmm7        # 5bc50 <PW_MF008_MF041>
	pmaddwd 0x1bb97(%rip),%xmm5        # 5bc50 <PW_MF008_MF041>
	movdqa 0x1bbaf(%rip),%xmm3        # 5bc70 <PD_ONEHALF>
	paddd  -0x40(%rbp),%xmm0
	paddd  -0x30(%rbp),%xmm4
	paddd  %xmm3,%xmm0
	paddd  %xmm3,%xmm4
	psrld  $0x10,%xmm0
	psrld  $0x10,%xmm4
	packssdw %xmm4,%xmm0
	pxor   %xmm3,%xmm3
	pxor   %xmm4,%xmm4
	punpcklwd %xmm1,%xmm3
	punpckhwd %xmm1,%xmm4
	psrld  $0x1,%xmm3
	psrld  $0x1,%xmm4
	movdqa 0x1bb5d(%rip),%xmm1        # 5bc60 <PD_ONEHALFM1_CJ>
	paddd  %xmm3,%xmm7
	paddd  %xmm4,%xmm5
	paddd  %xmm1,%xmm7
	paddd  %xmm1,%xmm5
	psrld  $0x10,%xmm7
	psrld  $0x10,%xmm5
	packssdw %xmm5,%xmm7
	movdqa -0x80(%rbp),%xmm3
	movdqa %xmm6,%xmm4
	punpcklwd %xmm2,%xmm6
	punpckhwd %xmm2,%xmm4
	movdqa %xmm6,%xmm1
	movdqa %xmm4,%xmm5
	pmaddwd 0x1baee(%rip),%xmm6        # 5bc30 <PW_F0114_F0250>
	pmaddwd 0x1bae6(%rip),%xmm4        # 5bc30 <PW_F0114_F0250>
	pmaddwd 0x1bafe(%rip),%xmm1        # 5bc50 <PW_MF008_MF041>
	pmaddwd 0x1baf6(%rip),%xmm5        # 5bc50 <PW_MF008_MF041>
	movdqa 0x1bb0e(%rip),%xmm2        # 5bc70 <PD_ONEHALF>
	paddd  -0x20(%rbp),%xmm6
	paddd  -0x10(%rbp),%xmm4
	paddd  %xmm2,%xmm6
	paddd  %xmm2,%xmm4
	psrld  $0x10,%xmm6
	psrld  $0x10,%xmm4
	packssdw %xmm4,%xmm6
	psllw  $0x8,%xmm0
	por    %xmm0,%xmm6
	movdqa %xmm6,(%rdi)
	pxor   %xmm2,%xmm2
	pxor   %xmm4,%xmm4
	punpcklwd %xmm3,%xmm2
	punpckhwd %xmm3,%xmm4
	psrld  $0x1,%xmm2
	psrld  $0x1,%xmm4
	movdqa 0x1baaf(%rip),%xmm0        # 5bc60 <PD_ONEHALFM1_CJ>
	paddd  %xmm2,%xmm1
	paddd  %xmm4,%xmm5
	paddd  %xmm0,%xmm1
	paddd  %xmm0,%xmm5
	psrld  $0x10,%xmm1
	psrld  $0x10,%xmm5
	packssdw %xmm5,%xmm1
	psllw  $0x8,%xmm7
	por    %xmm7,%xmm1
	movdqa %xmm1,(%rdx)
	sub    $0x10,%rcx
	add    $0x40,%rsi
	add    $0x10,%rdi
	add    $0x10,%rbx
	add    $0x10,%rdx
	cmp    $0x10,%rcx
	jae    3febf <jsimd_extxrgb_ycc_convert_sse2.columnloop>
	test   %rcx,%rcx
	jne    3fe6b <jsimd_extxrgb_ycc_convert_sse2.column_ld1>
	pop    %rcx
	pop    %rsi
	pop    %rdi
	pop    %rbx
	pop    %rdx
	add    $0x8,%rsi
	add    $0x8,%rdi
	add    $0x8,%rbx
	add    $0x8,%rdx
	dec    %rax
	jg     3fe50 <jsimd_extxrgb_ycc_convert_sse2.rowloop>

0040221 <jsimd_extxrgb_ycc_convert_sse2.return>:
	pop    %rbx
	pop    %r15
	pop    %r14
	pop    %r13
	pop    %r12
	pop    %r11
	pop    %r10
	mov    %rbp,%rsp
	pop    %rsp
	pop    %rbp
	retq   
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop

0040240 <jsimd_rgb_gray_convert_sse2>:
	push   %rbp
	mov    %rsp,%rax
	sub    $0x4,%rsp
	and    $0xfffffffffffffff0,%rsp
	mov    %rax,(%rsp)
	mov    %rsp,%rbp
	lea    -0x20(%rbp),%rsp
	push   %r10
	push   %r11
	push   %r12
	push   %r13
	push   %r14
	push   %r15
	mov    %rdi,%r10
	mov    %rsi,%r11
	mov    %rdx,%r12
	mov    %rcx,%r13
	mov    %r8,%r14
	mov    %r9,%r15
	push   %rbx
	mov    %r10d,%ecx
	test   %rcx,%rcx
	je     404e4 <jsimd_rgb_gray_convert_sse2.return>
	push   %rcx
	mov    %r12,%rsi
	mov    %r13d,%ecx
	mov    (%rsi),%rdi
	lea    (%rdi,%rcx,8),%rdi
	pop    %rcx
	mov    %r11,%rsi
	mov    %r14d,%eax
	test   %rax,%rax
	jle    404e4 <jsimd_rgb_gray_convert_sse2.return>

00402a0 <jsimd_rgb_gray_convert_sse2.rowloop>:
	push   %rdi
	push   %rsi
	push   %rcx
	mov    (%rsi),%rsi
	mov    (%rdi),%rdi
	cmp    $0x10,%rcx
	jae    4033d <jsimd_rgb_gray_convert_sse2.columnloop>

00402b3 <jsimd_rgb_gray_convert_sse2.column_ld1>:
	push   %rax
	push   %rdx
	lea    (%rcx,%rcx,2),%rcx
	test   $0x1,%cl
	je     402c7 <jsimd_rgb_gray_convert_sse2.column_ld2>
	sub    $0x1,%rcx
	movzbq (%rsi,%rcx,1),%rax

00402c7 <jsimd_rgb_gray_convert_sse2.column_ld2>:
	test   $0x2,%cl
	je     402dc <jsimd_rgb_gray_convert_sse2.column_ld4>
	sub    $0x2,%rcx
	movzwq (%rsi,%rcx,1),%rdx
	shl    $0x10,%rax
	or     %rdx,%rax

00402dc <jsimd_rgb_gray_convert_sse2.column_ld4>:
	movd   %eax,%xmm0
	pop    %rdx
	pop    %rax
	test   $0x4,%cl
	je     402f9 <jsimd_rgb_gray_convert_sse2.column_ld8>
	sub    $0x4,%rcx
	movd   (%rsi,%rcx,1),%xmm5
	pslldq $0x4,%xmm0
	por    %xmm5,%xmm0

00402f9 <jsimd_rgb_gray_convert_sse2.column_ld8>:
	test   $0x8,%cl
	je     40310 <jsimd_rgb_gray_convert_sse2.column_ld16>
	sub    $0x8,%rcx
	movq   (%rsi,%rcx,1),%xmm1
	pslldq $0x8,%xmm0
	por    %xmm1,%xmm0

0040310 <jsimd_rgb_gray_convert_sse2.column_ld16>:
	test   $0x10,%cl
	je     40324 <jsimd_rgb_gray_convert_sse2.column_ld32>
	movdqa %xmm0,%xmm5
	movdqu (%rsi),%xmm0
	mov    $0x10,%ecx
	jmp    4034b <jsimd_rgb_gray_convert_sse2.rgb_gray_cnv>

0040324 <jsimd_rgb_gray_convert_sse2.column_ld32>:
	test   $0x20,%cl
	mov    $0x10,%ecx
	je     4034b <jsimd_rgb_gray_convert_sse2.rgb_gray_cnv>
	movdqa %xmm0,%xmm1
	movdqu (%rsi),%xmm0
	movdqu 0x10(%rsi),%xmm5
	jmp    4034b <jsimd_rgb_gray_convert_sse2.rgb_gray_cnv>

004033d <jsimd_rgb_gray_convert_sse2.columnloop>:
	movdqu (%rsi),%xmm0
	movdqu 0x10(%rsi),%xmm5
	movdqu 0x20(%rsi),%xmm1

004034b <jsimd_rgb_gray_convert_sse2.rgb_gray_cnv>:
	movdqa %xmm0,%xmm6
	pslldq $0x8,%xmm0
	psrldq $0x8,%xmm6
	punpckhbw %xmm5,%xmm0
	pslldq $0x8,%xmm5
	punpcklbw %xmm1,%xmm6
	punpckhbw %xmm1,%xmm5
	movdqa %xmm0,%xmm3
	pslldq $0x8,%xmm0
	psrldq $0x8,%xmm3
	punpckhbw %xmm6,%xmm0
	pslldq $0x8,%xmm6
	punpcklbw %xmm5,%xmm3
	punpckhbw %xmm5,%xmm6
	movdqa %xmm0,%xmm4
	pslldq $0x8,%xmm0
	psrldq $0x8,%xmm4
	punpckhbw %xmm3,%xmm0
	pslldq $0x8,%xmm3
	punpcklbw %xmm6,%xmm4
	punpckhbw %xmm6,%xmm3
	pxor   %xmm7,%xmm7
	movdqa %xmm0,%xmm2
	punpcklbw %xmm7,%xmm0
	punpckhbw %xmm7,%xmm2
	movdqa %xmm4,%xmm1
	punpcklbw %xmm7,%xmm4
	punpckhbw %xmm7,%xmm1
	movdqa %xmm3,%xmm5
	punpcklbw %xmm7,%xmm3
	punpckhbw %xmm7,%xmm5
	movdqa %xmm1,%xmm6
	punpcklwd %xmm3,%xmm1
	punpckhwd %xmm3,%xmm6
	pmaddwd 0x1b89c(%rip),%xmm1        # 5bc80 <PW_F0299_F0337>
	pmaddwd 0x1b894(%rip),%xmm6        # 5bc80 <PW_F0299_F0337>
	movdqa %xmm6,%xmm7
	movdqa %xmm0,%xmm6
	punpcklwd %xmm2,%xmm0
	punpckhwd %xmm2,%xmm6
	pmaddwd 0x1b87c(%rip),%xmm0        # 5bc80 <PW_F0299_F0337>
	pmaddwd 0x1b874(%rip),%xmm6        # 5bc80 <PW_F0299_F0337>
	movdqa %xmm0,-0x20(%rbp)
	movdqa %xmm6,-0x10(%rbp)
	movdqa %xmm5,%xmm0
	movdqa %xmm4,%xmm6
	movdqa %xmm0,%xmm4
	punpcklwd %xmm3,%xmm0
	punpckhwd %xmm3,%xmm4
	pmaddwd 0x1b85e(%rip),%xmm0        # 5bc90 <PW_F0114_F0250>
	pmaddwd 0x1b856(%rip),%xmm4        # 5bc90 <PW_F0114_F0250>
	movdqa 0x1b85e(%rip),%xmm3        # 5bca0 <PD_ONEHALF>
	paddd  %xmm1,%xmm0
	paddd  %xmm7,%xmm4
	paddd  %xmm3,%xmm0
	paddd  %xmm3,%xmm4
	psrld  $0x10,%xmm0
	psrld  $0x10,%xmm4
	packssdw %xmm4,%xmm0
	movdqa %xmm6,%xmm4
	punpcklwd %xmm2,%xmm6
	punpckhwd %xmm2,%xmm4
	pmaddwd 0x1b81c(%rip),%xmm6        # 5bc90 <PW_F0114_F0250>
	pmaddwd 0x1b814(%rip),%xmm4        # 5bc90 <PW_F0114_F0250>
	movdqa 0x1b81c(%rip),%xmm2        # 5bca0 <PD_ONEHALF>
	paddd  -0x20(%rbp),%xmm6
	paddd  -0x10(%rbp),%xmm4
	paddd  %xmm2,%xmm6
	paddd  %xmm2,%xmm4
	psrld  $0x10,%xmm6
	psrld  $0x10,%xmm4
	packssdw %xmm4,%xmm6
	psllw  $0x8,%xmm0
	por    %xmm0,%xmm6
	movdqa %xmm6,(%rdi)
	sub    $0x10,%rcx
	add    $0x30,%rsi
	add    $0x10,%rdi
	cmp    $0x10,%rcx
	jae    4033d <jsimd_rgb_gray_convert_sse2.columnloop>
	test   %rcx,%rcx
	jne    402b3 <jsimd_rgb_gray_convert_sse2.column_ld1>
	pop    %rcx
	pop    %rsi
	pop    %rdi
	add    $0x8,%rsi
	add    $0x8,%rdi
	dec    %rax
	jg     402a0 <jsimd_rgb_gray_convert_sse2.rowloop>

00404e4 <jsimd_rgb_gray_convert_sse2.return>:
	pop    %rbx
	pop    %r15
	pop    %r14
	pop    %r13
	pop    %r12
	pop    %r11
	pop    %r10
	mov    %rbp,%rsp
	pop    %rsp
	pop    %rbp
	retq   
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop

0040500 <jsimd_extrgb_gray_convert_sse2>:
	push   %rbp
	mov    %rsp,%rax
	sub    $0x4,%rsp
	and    $0xfffffffffffffff0,%rsp
	mov    %rax,(%rsp)
	mov    %rsp,%rbp
	lea    -0x20(%rbp),%rsp
	push   %r10
	push   %r11
	push   %r12
	push   %r13
	push   %r14
	push   %r15
	mov    %rdi,%r10
	mov    %rsi,%r11
	mov    %rdx,%r12
	mov    %rcx,%r13
	mov    %r8,%r14
	mov    %r9,%r15
	push   %rbx
	mov    %r10d,%ecx
	test   %rcx,%rcx
	je     407a4 <jsimd_extrgb_gray_convert_sse2.return>
	push   %rcx
	mov    %r12,%rsi
	mov    %r13d,%ecx
	mov    (%rsi),%rdi
	lea    (%rdi,%rcx,8),%rdi
	pop    %rcx
	mov    %r11,%rsi
	mov    %r14d,%eax
	test   %rax,%rax
	jle    407a4 <jsimd_extrgb_gray_convert_sse2.return>

0040560 <jsimd_extrgb_gray_convert_sse2.rowloop>:
	push   %rdi
	push   %rsi
	push   %rcx
	mov    (%rsi),%rsi
	mov    (%rdi),%rdi
	cmp    $0x10,%rcx
	jae    405fd <jsimd_extrgb_gray_convert_sse2.columnloop>

0040573 <jsimd_extrgb_gray_convert_sse2.column_ld1>:
	push   %rax
	push   %rdx
	lea    (%rcx,%rcx,2),%rcx
	test   $0x1,%cl
	je     40587 <jsimd_extrgb_gray_convert_sse2.column_ld2>
	sub    $0x1,%rcx
	movzbq (%rsi,%rcx,1),%rax

0040587 <jsimd_extrgb_gray_convert_sse2.column_ld2>:
	test   $0x2,%cl
	je     4059c <jsimd_extrgb_gray_convert_sse2.column_ld4>
	sub    $0x2,%rcx
	movzwq (%rsi,%rcx,1),%rdx
	shl    $0x10,%rax
	or     %rdx,%rax

004059c <jsimd_extrgb_gray_convert_sse2.column_ld4>:
	movd   %eax,%xmm0
	pop    %rdx
	pop    %rax
	test   $0x4,%cl
	je     405b9 <jsimd_extrgb_gray_convert_sse2.column_ld8>
	sub    $0x4,%rcx
	movd   (%rsi,%rcx,1),%xmm5
	pslldq $0x4,%xmm0
	por    %xmm5,%xmm0

00405b9 <jsimd_extrgb_gray_convert_sse2.column_ld8>:
	test   $0x8,%cl
	je     405d0 <jsimd_extrgb_gray_convert_sse2.column_ld16>
	sub    $0x8,%rcx
	movq   (%rsi,%rcx,1),%xmm1
	pslldq $0x8,%xmm0
	por    %xmm1,%xmm0

00405d0 <jsimd_extrgb_gray_convert_sse2.column_ld16>:
	test   $0x10,%cl
	je     405e4 <jsimd_extrgb_gray_convert_sse2.column_ld32>
	movdqa %xmm0,%xmm5
	movdqu (%rsi),%xmm0
	mov    $0x10,%ecx
	jmp    4060b <jsimd_extrgb_gray_convert_sse2.rgb_gray_cnv>

00405e4 <jsimd_extrgb_gray_convert_sse2.column_ld32>:
	test   $0x20,%cl
	mov    $0x10,%ecx
	je     4060b <jsimd_extrgb_gray_convert_sse2.rgb_gray_cnv>
	movdqa %xmm0,%xmm1
	movdqu (%rsi),%xmm0
	movdqu 0x10(%rsi),%xmm5
	jmp    4060b <jsimd_extrgb_gray_convert_sse2.rgb_gray_cnv>

00405fd <jsimd_extrgb_gray_convert_sse2.columnloop>:
	movdqu (%rsi),%xmm0
	movdqu 0x10(%rsi),%xmm5
	movdqu 0x20(%rsi),%xmm1

004060b <jsimd_extrgb_gray_convert_sse2.rgb_gray_cnv>:
	movdqa %xmm0,%xmm6
	pslldq $0x8,%xmm0
	psrldq $0x8,%xmm6
	punpckhbw %xmm5,%xmm0
	pslldq $0x8,%xmm5
	punpcklbw %xmm1,%xmm6
	punpckhbw %xmm1,%xmm5
	movdqa %xmm0,%xmm3
	pslldq $0x8,%xmm0
	psrldq $0x8,%xmm3
	punpckhbw %xmm6,%xmm0
	pslldq $0x8,%xmm6
	punpcklbw %xmm5,%xmm3
	punpckhbw %xmm5,%xmm6
	movdqa %xmm0,%xmm4
	pslldq $0x8,%xmm0
	psrldq $0x8,%xmm4
	punpckhbw %xmm3,%xmm0
	pslldq $0x8,%xmm3
	punpcklbw %xmm6,%xmm4
	punpckhbw %xmm6,%xmm3
	pxor   %xmm7,%xmm7
	movdqa %xmm0,%xmm2
	punpcklbw %xmm7,%xmm0
	punpckhbw %xmm7,%xmm2
	movdqa %xmm4,%xmm1
	punpcklbw %xmm7,%xmm4
	punpckhbw %xmm7,%xmm1
	movdqa %xmm3,%xmm5
	punpcklbw %xmm7,%xmm3
	punpckhbw %xmm7,%xmm5
	movdqa %xmm1,%xmm6
	punpcklwd %xmm3,%xmm1
	punpckhwd %xmm3,%xmm6
	pmaddwd 0x1b5dc(%rip),%xmm1        # 5bc80 <PW_F0299_F0337>
	pmaddwd 0x1b5d4(%rip),%xmm6        # 5bc80 <PW_F0299_F0337>
	movdqa %xmm6,%xmm7
	movdqa %xmm0,%xmm6
	punpcklwd %xmm2,%xmm0
	punpckhwd %xmm2,%xmm6
	pmaddwd 0x1b5bc(%rip),%xmm0        # 5bc80 <PW_F0299_F0337>
	pmaddwd 0x1b5b4(%rip),%xmm6        # 5bc80 <PW_F0299_F0337>
	movdqa %xmm0,-0x20(%rbp)
	movdqa %xmm6,-0x10(%rbp)
	movdqa %xmm5,%xmm0
	movdqa %xmm4,%xmm6
	movdqa %xmm0,%xmm4
	punpcklwd %xmm3,%xmm0
	punpckhwd %xmm3,%xmm4
	pmaddwd 0x1b59e(%rip),%xmm0        # 5bc90 <PW_F0114_F0250>
	pmaddwd 0x1b596(%rip),%xmm4        # 5bc90 <PW_F0114_F0250>
	movdqa 0x1b59e(%rip),%xmm3        # 5bca0 <PD_ONEHALF>
	paddd  %xmm1,%xmm0
	paddd  %xmm7,%xmm4
	paddd  %xmm3,%xmm0
	paddd  %xmm3,%xmm4
	psrld  $0x10,%xmm0
	psrld  $0x10,%xmm4
	packssdw %xmm4,%xmm0
	movdqa %xmm6,%xmm4
	punpcklwd %xmm2,%xmm6
	punpckhwd %xmm2,%xmm4
	pmaddwd 0x1b55c(%rip),%xmm6        # 5bc90 <PW_F0114_F0250>
	pmaddwd 0x1b554(%rip),%xmm4        # 5bc90 <PW_F0114_F0250>
	movdqa 0x1b55c(%rip),%xmm2        # 5bca0 <PD_ONEHALF>
	paddd  -0x20(%rbp),%xmm6
	paddd  -0x10(%rbp),%xmm4
	paddd  %xmm2,%xmm6
	paddd  %xmm2,%xmm4
	psrld  $0x10,%xmm6
	psrld  $0x10,%xmm4
	packssdw %xmm4,%xmm6
	psllw  $0x8,%xmm0
	por    %xmm0,%xmm6
	movdqa %xmm6,(%rdi)
	sub    $0x10,%rcx
	add    $0x30,%rsi
	add    $0x10,%rdi
	cmp    $0x10,%rcx
	jae    405fd <jsimd_extrgb_gray_convert_sse2.columnloop>
	test   %rcx,%rcx
	jne    40573 <jsimd_extrgb_gray_convert_sse2.column_ld1>
	pop    %rcx
	pop    %rsi
	pop    %rdi
	add    $0x8,%rsi
	add    $0x8,%rdi
	dec    %rax
	jg     40560 <jsimd_extrgb_gray_convert_sse2.rowloop>

00407a4 <jsimd_extrgb_gray_convert_sse2.return>:
	pop    %rbx
	pop    %r15
	pop    %r14
	pop    %r13
	pop    %r12
	pop    %r11
	pop    %r10
	mov    %rbp,%rsp
	pop    %rsp
	pop    %rbp
	retq   
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop

00407c0 <jsimd_extrgbx_gray_convert_sse2>:
	push   %rbp
	mov    %rsp,%rax
	sub    $0x4,%rsp
	and    $0xfffffffffffffff0,%rsp
	mov    %rax,(%rsp)
	mov    %rsp,%rbp
	lea    -0x20(%rbp),%rsp
	push   %r10
	push   %r11
	push   %r12
	push   %r13
	push   %r14
	push   %r15
	mov    %rdi,%r10
	mov    %rsi,%r11
	mov    %rdx,%r12
	mov    %rcx,%r13
	mov    %r8,%r14
	mov    %r9,%r15
	push   %rbx
	mov    %r10d,%ecx
	test   %rcx,%rcx
	je     40a30 <jsimd_extrgbx_gray_convert_sse2.return>
	push   %rcx
	mov    %r12,%rsi
	mov    %r13d,%ecx
	mov    (%rsi),%rdi
	lea    (%rdi,%rcx,8),%rdi
	pop    %rcx
	mov    %r11,%rsi
	mov    %r14d,%eax
	test   %rax,%rax
	jle    40a30 <jsimd_extrgbx_gray_convert_sse2.return>

0040820 <jsimd_extrgbx_gray_convert_sse2.rowloop>:
	push   %rdi
	push   %rsi
	push   %rcx
	mov    (%rsi),%rsi
	mov    (%rdi),%rdi
	cmp    $0x10,%rcx
	jae    40887 <jsimd_extrgbx_gray_convert_sse2.columnloop>

0040833 <jsimd_extrgbx_gray_convert_sse2.column_ld1>:
	test   $0x1,%cl
	je     40841 <jsimd_extrgbx_gray_convert_sse2.column_ld2>
	sub    $0x1,%rcx
	movd   (%rsi,%rcx,4),%xmm0

0040841 <jsimd_extrgbx_gray_convert_sse2.column_ld2>:
	test   $0x2,%cl
	je     40858 <jsimd_extrgbx_gray_convert_sse2.column_ld4>
	sub    $0x2,%rcx
	movq   (%rsi,%rcx,4),%xmm4
	pslldq $0x8,%xmm0
	por    %xmm4,%xmm0

0040858 <jsimd_extrgbx_gray_convert_sse2.column_ld4>:
	test   $0x4,%cl
	je     4086a <jsimd_extrgbx_gray_convert_sse2.column_ld8>
	sub    $0x4,%rcx
	movdqa %xmm0,%xmm4
	movdqu (%rsi,%rcx,4),%xmm0

004086a <jsimd_extrgbx_gray_convert_sse2.column_ld8>:
	test   $0x8,%cl
	mov    $0x10,%ecx
	je     4089a <jsimd_extrgbx_gray_convert_sse2.rgb_gray_cnv>
	movdqa %xmm0,%xmm5
	movdqa %xmm4,%xmm7
	movdqu (%rsi),%xmm0
	movdqu 0x10(%rsi),%xmm4
	jmp    4089a <jsimd_extrgbx_gray_convert_sse2.rgb_gray_cnv>

0040887 <jsimd_extrgbx_gray_convert_sse2.columnloop>:
	movdqu (%rsi),%xmm0
	movdqu 0x10(%rsi),%xmm4
	movdqu 0x20(%rsi),%xmm5
	movdqu 0x30(%rsi),%xmm7

004089a <jsimd_extrgbx_gray_convert_sse2.rgb_gray_cnv>:
	movdqa %xmm0,%xmm3
	punpcklbw %xmm4,%xmm0
	punpckhbw %xmm4,%xmm3
	movdqa %xmm5,%xmm2
	punpcklbw %xmm7,%xmm5
	punpckhbw %xmm7,%xmm2
	movdqa %xmm0,%xmm1
	punpcklwd %xmm5,%xmm0
	punpckhwd %xmm5,%xmm1
	movdqa %xmm3,%xmm6
	punpcklwd %xmm2,%xmm3
	punpckhwd %xmm2,%xmm6
	movdqa %xmm0,%xmm4
	punpcklbw %xmm3,%xmm0
	punpckhbw %xmm3,%xmm4
	movdqa %xmm1,%xmm7
	punpcklbw %xmm6,%xmm1
	punpckhbw %xmm6,%xmm7
	pxor   %xmm5,%xmm5
	movdqa %xmm0,%xmm2
	punpcklbw %xmm5,%xmm0
	punpckhbw %xmm5,%xmm2
	movdqa %xmm1,%xmm3
	punpcklbw %xmm5,%xmm1
	punpckhbw %xmm5,%xmm3
	movdqa %xmm4,%xmm6
	punpcklbw %xmm5,%xmm4
	punpckhbw %xmm5,%xmm6
	punpcklbw %xmm7,%xmm5
	punpckhbw %xmm7,%xmm7
	psrlw  $0x8,%xmm5
	psrlw  $0x8,%xmm7
	movdqa %xmm1,%xmm6
	punpcklwd %xmm3,%xmm1
	punpckhwd %xmm3,%xmm6
	pmaddwd 0x1b350(%rip),%xmm1        # 5bc80 <PW_F0299_F0337>
	pmaddwd 0x1b348(%rip),%xmm6        # 5bc80 <PW_F0299_F0337>
	movdqa %xmm6,%xmm7
	movdqa %xmm0,%xmm6
	punpcklwd %xmm2,%xmm0
	punpckhwd %xmm2,%xmm6
	pmaddwd 0x1b330(%rip),%xmm0        # 5bc80 <PW_F0299_F0337>
	pmaddwd 0x1b328(%rip),%xmm6        # 5bc80 <PW_F0299_F0337>
	movdqa %xmm0,-0x20(%rbp)
	movdqa %xmm6,-0x10(%rbp)
	movdqa %xmm5,%xmm0
	movdqa %xmm4,%xmm6
	movdqa %xmm0,%xmm4
	punpcklwd %xmm3,%xmm0
	punpckhwd %xmm3,%xmm4
	pmaddwd 0x1b312(%rip),%xmm0        # 5bc90 <PW_F0114_F0250>
	pmaddwd 0x1b30a(%rip),%xmm4        # 5bc90 <PW_F0114_F0250>
	movdqa 0x1b312(%rip),%xmm3        # 5bca0 <PD_ONEHALF>
	paddd  %xmm1,%xmm0
	paddd  %xmm7,%xmm4
	paddd  %xmm3,%xmm0
	paddd  %xmm3,%xmm4
	psrld  $0x10,%xmm0
	psrld  $0x10,%xmm4
	packssdw %xmm4,%xmm0
	movdqa %xmm6,%xmm4
	punpcklwd %xmm2,%xmm6
	punpckhwd %xmm2,%xmm4
	pmaddwd 0x1b2d0(%rip),%xmm6        # 5bc90 <PW_F0114_F0250>
	pmaddwd 0x1b2c8(%rip),%xmm4        # 5bc90 <PW_F0114_F0250>
	movdqa 0x1b2d0(%rip),%xmm2        # 5bca0 <PD_ONEHALF>
	paddd  -0x20(%rbp),%xmm6
	paddd  -0x10(%rbp),%xmm4
	paddd  %xmm2,%xmm6
	paddd  %xmm2,%xmm4
	psrld  $0x10,%xmm6
	psrld  $0x10,%xmm4
	packssdw %xmm4,%xmm6
	psllw  $0x8,%xmm0
	por    %xmm0,%xmm6
	movdqa %xmm6,(%rdi)
	sub    $0x10,%rcx
	add    $0x40,%rsi
	add    $0x10,%rdi
	cmp    $0x10,%rcx
	jae    40887 <jsimd_extrgbx_gray_convert_sse2.columnloop>
	test   %rcx,%rcx
	jne    40833 <jsimd_extrgbx_gray_convert_sse2.column_ld1>
	pop    %rcx
	pop    %rsi
	pop    %rdi
	add    $0x8,%rsi
	add    $0x8,%rdi
	dec    %rax
	jg     40820 <jsimd_extrgbx_gray_convert_sse2.rowloop>

0040a30 <jsimd_extrgbx_gray_convert_sse2.return>:
	pop    %rbx
	pop    %r15
	pop    %r14
	pop    %r13
	pop    %r12
	pop    %r11
	pop    %r10
	mov    %rbp,%rsp
	pop    %rsp
	pop    %rbp
	retq   
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop

0040a50 <jsimd_extbgr_gray_convert_sse2>:
	push   %rbp
	mov    %rsp,%rax
	sub    $0x4,%rsp
	and    $0xfffffffffffffff0,%rsp
	mov    %rax,(%rsp)
	mov    %rsp,%rbp
	lea    -0x20(%rbp),%rsp
	push   %r10
	push   %r11
	push   %r12
	push   %r13
	push   %r14
	push   %r15
	mov    %rdi,%r10
	mov    %rsi,%r11
	mov    %rdx,%r12
	mov    %rcx,%r13
	mov    %r8,%r14
	mov    %r9,%r15
	push   %rbx
	mov    %r10d,%ecx
	test   %rcx,%rcx
	je     40cf4 <jsimd_extbgr_gray_convert_sse2.return>
	push   %rcx
	mov    %r12,%rsi
	mov    %r13d,%ecx
	mov    (%rsi),%rdi
	lea    (%rdi,%rcx,8),%rdi
	pop    %rcx
	mov    %r11,%rsi
	mov    %r14d,%eax
	test   %rax,%rax
	jle    40cf4 <jsimd_extbgr_gray_convert_sse2.return>

0040ab0 <jsimd_extbgr_gray_convert_sse2.rowloop>:
	push   %rdi
	push   %rsi
	push   %rcx
	mov    (%rsi),%rsi
	mov    (%rdi),%rdi
	cmp    $0x10,%rcx
	jae    40b4d <jsimd_extbgr_gray_convert_sse2.columnloop>

0040ac3 <jsimd_extbgr_gray_convert_sse2.column_ld1>:
	push   %rax
	push   %rdx
	lea    (%rcx,%rcx,2),%rcx
	test   $0x1,%cl
	je     40ad7 <jsimd_extbgr_gray_convert_sse2.column_ld2>
	sub    $0x1,%rcx
	movzbq (%rsi,%rcx,1),%rax

0040ad7 <jsimd_extbgr_gray_convert_sse2.column_ld2>:
	test   $0x2,%cl
	je     40aec <jsimd_extbgr_gray_convert_sse2.column_ld4>
	sub    $0x2,%rcx
	movzwq (%rsi,%rcx,1),%rdx
	shl    $0x10,%rax
	or     %rdx,%rax

0040aec <jsimd_extbgr_gray_convert_sse2.column_ld4>:
	movd   %eax,%xmm4
	pop    %rdx
	pop    %rax
	test   $0x4,%cl
	je     40b09 <jsimd_extbgr_gray_convert_sse2.column_ld8>
	sub    $0x4,%rcx
	movd   (%rsi,%rcx,1),%xmm1
	pslldq $0x4,%xmm4
	por    %xmm1,%xmm4

0040b09 <jsimd_extbgr_gray_convert_sse2.column_ld8>:
	test   $0x8,%cl
	je     40b20 <jsimd_extbgr_gray_convert_sse2.column_ld16>
	sub    $0x8,%rcx
	movq   (%rsi,%rcx,1),%xmm5
	pslldq $0x8,%xmm4
	por    %xmm5,%xmm4

0040b20 <jsimd_extbgr_gray_convert_sse2.column_ld16>:
	test   $0x10,%cl
	je     40b34 <jsimd_extbgr_gray_convert_sse2.column_ld32>
	movdqa %xmm4,%xmm1
	movdqu (%rsi),%xmm4
	mov    $0x10,%ecx
	jmp    40b5b <jsimd_extbgr_gray_convert_sse2.rgb_gray_cnv>

0040b34 <jsimd_extbgr_gray_convert_sse2.column_ld32>:
	test   $0x20,%cl
	mov    $0x10,%ecx
	je     40b5b <jsimd_extbgr_gray_convert_sse2.rgb_gray_cnv>
	movdqa %xmm4,%xmm5
	movdqu (%rsi),%xmm4
	movdqu 0x10(%rsi),%xmm1
	jmp    40b5b <jsimd_extbgr_gray_convert_sse2.rgb_gray_cnv>

0040b4d <jsimd_extbgr_gray_convert_sse2.columnloop>:
	movdqu (%rsi),%xmm4
	movdqu 0x10(%rsi),%xmm1
	movdqu 0x20(%rsi),%xmm5

0040b5b <jsimd_extbgr_gray_convert_sse2.rgb_gray_cnv>:
	movdqa %xmm4,%xmm6
	pslldq $0x8,%xmm4
	psrldq $0x8,%xmm6
	punpckhbw %xmm1,%xmm4
	pslldq $0x8,%xmm1
	punpcklbw %xmm5,%xmm6
	punpckhbw %xmm5,%xmm1
	movdqa %xmm4,%xmm3
	pslldq $0x8,%xmm4
	psrldq $0x8,%xmm3
	punpckhbw %xmm6,%xmm4
	pslldq $0x8,%xmm6
	punpcklbw %xmm1,%xmm3
	punpckhbw %xmm1,%xmm6
	movdqa %xmm4,%xmm0
	pslldq $0x8,%xmm4
	psrldq $0x8,%xmm0
	punpckhbw %xmm3,%xmm4
	pslldq $0x8,%xmm3
	punpcklbw %xmm6,%xmm0
	punpckhbw %xmm6,%xmm3
	pxor   %xmm7,%xmm7
	movdqa %xmm4,%xmm2
	punpcklbw %xmm7,%xmm4
	punpckhbw %xmm7,%xmm2
	movdqa %xmm0,%xmm5
	punpcklbw %xmm7,%xmm0
	punpckhbw %xmm7,%xmm5
	movdqa %xmm3,%xmm1
	punpcklbw %xmm7,%xmm3
	punpckhbw %xmm7,%xmm1
	movdqa %xmm1,%xmm6
	punpcklwd %xmm3,%xmm1
	punpckhwd %xmm3,%xmm6
	pmaddwd 0x1b08c(%rip),%xmm1        # 5bc80 <PW_F0299_F0337>
	pmaddwd 0x1b084(%rip),%xmm6        # 5bc80 <PW_F0299_F0337>
	movdqa %xmm6,%xmm7
	movdqa %xmm0,%xmm6
	punpcklwd %xmm2,%xmm0
	punpckhwd %xmm2,%xmm6
	pmaddwd 0x1b06c(%rip),%xmm0        # 5bc80 <PW_F0299_F0337>
	pmaddwd 0x1b064(%rip),%xmm6        # 5bc80 <PW_F0299_F0337>
	movdqa %xmm0,-0x20(%rbp)
	movdqa %xmm6,-0x10(%rbp)
	movdqa %xmm5,%xmm0
	movdqa %xmm4,%xmm6
	movdqa %xmm0,%xmm4
	punpcklwd %xmm3,%xmm0
	punpckhwd %xmm3,%xmm4
	pmaddwd 0x1b04e(%rip),%xmm0        # 5bc90 <PW_F0114_F0250>
	pmaddwd 0x1b046(%rip),%xmm4        # 5bc90 <PW_F0114_F0250>
	movdqa 0x1b04e(%rip),%xmm3        # 5bca0 <PD_ONEHALF>
	paddd  %xmm1,%xmm0
	paddd  %xmm7,%xmm4
	paddd  %xmm3,%xmm0
	paddd  %xmm3,%xmm4
	psrld  $0x10,%xmm0
	psrld  $0x10,%xmm4
	packssdw %xmm4,%xmm0
	movdqa %xmm6,%xmm4
	punpcklwd %xmm2,%xmm6
	punpckhwd %xmm2,%xmm4
	pmaddwd 0x1b00c(%rip),%xmm6        # 5bc90 <PW_F0114_F0250>
	pmaddwd 0x1b004(%rip),%xmm4        # 5bc90 <PW_F0114_F0250>
	movdqa 0x1b00c(%rip),%xmm2        # 5bca0 <PD_ONEHALF>
	paddd  -0x20(%rbp),%xmm6
	paddd  -0x10(%rbp),%xmm4
	paddd  %xmm2,%xmm6
	paddd  %xmm2,%xmm4
	psrld  $0x10,%xmm6
	psrld  $0x10,%xmm4
	packssdw %xmm4,%xmm6
	psllw  $0x8,%xmm0
	por    %xmm0,%xmm6
	movdqa %xmm6,(%rdi)
	sub    $0x10,%rcx
	add    $0x30,%rsi
	add    $0x10,%rdi
	cmp    $0x10,%rcx
	jae    40b4d <jsimd_extbgr_gray_convert_sse2.columnloop>
	test   %rcx,%rcx
	jne    40ac3 <jsimd_extbgr_gray_convert_sse2.column_ld1>
	pop    %rcx
	pop    %rsi
	pop    %rdi
	add    $0x8,%rsi
	add    $0x8,%rdi
	dec    %rax
	jg     40ab0 <jsimd_extbgr_gray_convert_sse2.rowloop>

0040cf4 <jsimd_extbgr_gray_convert_sse2.return>:
	pop    %rbx
	pop    %r15
	pop    %r14
	pop    %r13
	pop    %r12
	pop    %r11
	pop    %r10
	mov    %rbp,%rsp
	pop    %rsp
	pop    %rbp
	retq   
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop

0040d10 <jsimd_extbgrx_gray_convert_sse2>:
	push   %rbp
	mov    %rsp,%rax
	sub    $0x4,%rsp
	and    $0xfffffffffffffff0,%rsp
	mov    %rax,(%rsp)
	mov    %rsp,%rbp
	lea    -0x20(%rbp),%rsp
	push   %r10
	push   %r11
	push   %r12
	push   %r13
	push   %r14
	push   %r15
	mov    %rdi,%r10
	mov    %rsi,%r11
	mov    %rdx,%r12
	mov    %rcx,%r13
	mov    %r8,%r14
	mov    %r9,%r15
	push   %rbx
	mov    %r10d,%ecx
	test   %rcx,%rcx
	je     40f80 <jsimd_extbgrx_gray_convert_sse2.return>
	push   %rcx
	mov    %r12,%rsi
	mov    %r13d,%ecx
	mov    (%rsi),%rdi
	lea    (%rdi,%rcx,8),%rdi
	pop    %rcx
	mov    %r11,%rsi
	mov    %r14d,%eax
	test   %rax,%rax
	jle    40f80 <jsimd_extbgrx_gray_convert_sse2.return>

0040d70 <jsimd_extbgrx_gray_convert_sse2.rowloop>:
	push   %rdi
	push   %rsi
	push   %rcx
	mov    (%rsi),%rsi
	mov    (%rdi),%rdi
	cmp    $0x10,%rcx
	jae    40dd7 <jsimd_extbgrx_gray_convert_sse2.columnloop>

0040d83 <jsimd_extbgrx_gray_convert_sse2.column_ld1>:
	test   $0x1,%cl
	je     40d91 <jsimd_extbgrx_gray_convert_sse2.column_ld2>
	sub    $0x1,%rcx
	movd   (%rsi,%rcx,4),%xmm4

0040d91 <jsimd_extbgrx_gray_convert_sse2.column_ld2>:
	test   $0x2,%cl
	je     40da8 <jsimd_extbgrx_gray_convert_sse2.column_ld4>
	sub    $0x2,%rcx
	movq   (%rsi,%rcx,4),%xmm0
	pslldq $0x8,%xmm4
	por    %xmm0,%xmm4

0040da8 <jsimd_extbgrx_gray_convert_sse2.column_ld4>:
	test   $0x4,%cl
	je     40dba <jsimd_extbgrx_gray_convert_sse2.column_ld8>
	sub    $0x4,%rcx
	movdqa %xmm4,%xmm0
	movdqu (%rsi,%rcx,4),%xmm4

0040dba <jsimd_extbgrx_gray_convert_sse2.column_ld8>:
	test   $0x8,%cl
	mov    $0x10,%ecx
	je     40dea <jsimd_extbgrx_gray_convert_sse2.rgb_gray_cnv>
	movdqa %xmm4,%xmm1
	movdqa %xmm0,%xmm7
	movdqu (%rsi),%xmm4
	movdqu 0x10(%rsi),%xmm0
	jmp    40dea <jsimd_extbgrx_gray_convert_sse2.rgb_gray_cnv>

0040dd7 <jsimd_extbgrx_gray_convert_sse2.columnloop>:
	movdqu (%rsi),%xmm4
	movdqu 0x10(%rsi),%xmm0
	movdqu 0x20(%rsi),%xmm1
	movdqu 0x30(%rsi),%xmm7

0040dea <jsimd_extbgrx_gray_convert_sse2.rgb_gray_cnv>:
	movdqa %xmm4,%xmm3
	punpcklbw %xmm0,%xmm4
	punpckhbw %xmm0,%xmm3
	movdqa %xmm1,%xmm2
	punpcklbw %xmm7,%xmm1
	punpckhbw %xmm7,%xmm2
	movdqa %xmm4,%xmm5
	punpcklwd %xmm1,%xmm4
	punpckhwd %xmm1,%xmm5
	movdqa %xmm3,%xmm6
	punpcklwd %xmm2,%xmm3
	punpckhwd %xmm2,%xmm6
	movdqa %xmm4,%xmm0
	punpcklbw %xmm3,%xmm4
	punpckhbw %xmm3,%xmm0
	movdqa %xmm5,%xmm7
	punpcklbw %xmm6,%xmm5
	punpckhbw %xmm6,%xmm7
	pxor   %xmm1,%xmm1
	movdqa %xmm4,%xmm2
	punpcklbw %xmm1,%xmm4
	punpckhbw %xmm1,%xmm2
	movdqa %xmm5,%xmm3
	punpcklbw %xmm1,%xmm5
	punpckhbw %xmm1,%xmm3
	movdqa %xmm0,%xmm6
	punpcklbw %xmm1,%xmm0
	punpckhbw %xmm1,%xmm6
	punpcklbw %xmm7,%xmm1
	punpckhbw %xmm7,%xmm7
	psrlw  $0x8,%xmm1
	psrlw  $0x8,%xmm7
	movdqa %xmm1,%xmm6
	punpcklwd %xmm3,%xmm1
	punpckhwd %xmm3,%xmm6
	pmaddwd 0x1ae00(%rip),%xmm1        # 5bc80 <PW_F0299_F0337>
	pmaddwd 0x1adf8(%rip),%xmm6        # 5bc80 <PW_F0299_F0337>
	movdqa %xmm6,%xmm7
	movdqa %xmm0,%xmm6
	punpcklwd %xmm2,%xmm0
	punpckhwd %xmm2,%xmm6
	pmaddwd 0x1ade0(%rip),%xmm0        # 5bc80 <PW_F0299_F0337>
	pmaddwd 0x1add8(%rip),%xmm6        # 5bc80 <PW_F0299_F0337>
	movdqa %xmm0,-0x20(%rbp)
	movdqa %xmm6,-0x10(%rbp)
	movdqa %xmm5,%xmm0
	movdqa %xmm4,%xmm6
	movdqa %xmm0,%xmm4
	punpcklwd %xmm3,%xmm0
	punpckhwd %xmm3,%xmm4
	pmaddwd 0x1adc2(%rip),%xmm0        # 5bc90 <PW_F0114_F0250>
	pmaddwd 0x1adba(%rip),%xmm4        # 5bc90 <PW_F0114_F0250>
	movdqa 0x1adc2(%rip),%xmm3        # 5bca0 <PD_ONEHALF>
	paddd  %xmm1,%xmm0
	paddd  %xmm7,%xmm4
	paddd  %xmm3,%xmm0
	paddd  %xmm3,%xmm4
	psrld  $0x10,%xmm0
	psrld  $0x10,%xmm4
	packssdw %xmm4,%xmm0
	movdqa %xmm6,%xmm4
	punpcklwd %xmm2,%xmm6
	punpckhwd %xmm2,%xmm4
	pmaddwd 0x1ad80(%rip),%xmm6        # 5bc90 <PW_F0114_F0250>
	pmaddwd 0x1ad78(%rip),%xmm4        # 5bc90 <PW_F0114_F0250>
	movdqa 0x1ad80(%rip),%xmm2        # 5bca0 <PD_ONEHALF>
	paddd  -0x20(%rbp),%xmm6
	paddd  -0x10(%rbp),%xmm4
	paddd  %xmm2,%xmm6
	paddd  %xmm2,%xmm4
	psrld  $0x10,%xmm6
	psrld  $0x10,%xmm4
	packssdw %xmm4,%xmm6
	psllw  $0x8,%xmm0
	por    %xmm0,%xmm6
	movdqa %xmm6,(%rdi)
	sub    $0x10,%rcx
	add    $0x40,%rsi
	add    $0x10,%rdi
	cmp    $0x10,%rcx
	jae    40dd7 <jsimd_extbgrx_gray_convert_sse2.columnloop>
	test   %rcx,%rcx
	jne    40d83 <jsimd_extbgrx_gray_convert_sse2.column_ld1>
	pop    %rcx
	pop    %rsi
	pop    %rdi
	add    $0x8,%rsi
	add    $0x8,%rdi
	dec    %rax
	jg     40d70 <jsimd_extbgrx_gray_convert_sse2.rowloop>

0040f80 <jsimd_extbgrx_gray_convert_sse2.return>:
	pop    %rbx
	pop    %r15
	pop    %r14
	pop    %r13
	pop    %r12
	pop    %r11
	pop    %r10
	mov    %rbp,%rsp
	pop    %rsp
	pop    %rbp
	retq   
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop

0040fa0 <jsimd_extxbgr_gray_convert_sse2>:
	push   %rbp
	mov    %rsp,%rax
	sub    $0x4,%rsp
	and    $0xfffffffffffffff0,%rsp
	mov    %rax,(%rsp)
	mov    %rsp,%rbp
	lea    -0x20(%rbp),%rsp
	push   %r10
	push   %r11
	push   %r12
	push   %r13
	push   %r14
	push   %r15
	mov    %rdi,%r10
	mov    %rsi,%r11
	mov    %rdx,%r12
	mov    %rcx,%r13
	mov    %r8,%r14
	mov    %r9,%r15
	push   %rbx
	mov    %r10d,%ecx
	test   %rcx,%rcx
	je     41210 <jsimd_extxbgr_gray_convert_sse2.return>
	push   %rcx
	mov    %r12,%rsi
	mov    %r13d,%ecx
	mov    (%rsi),%rdi
	lea    (%rdi,%rcx,8),%rdi
	pop    %rcx
	mov    %r11,%rsi
	mov    %r14d,%eax
	test   %rax,%rax
	jle    41210 <jsimd_extxbgr_gray_convert_sse2.return>

0041000 <jsimd_extxbgr_gray_convert_sse2.rowloop>:
	push   %rdi
	push   %rsi
	push   %rcx
	mov    (%rsi),%rsi
	mov    (%rdi),%rdi
	cmp    $0x10,%rcx
	jae    41067 <jsimd_extxbgr_gray_convert_sse2.columnloop>

0041013 <jsimd_extxbgr_gray_convert_sse2.column_ld1>:
	test   $0x1,%cl
	je     41021 <jsimd_extxbgr_gray_convert_sse2.column_ld2>
	sub    $0x1,%rcx
	movd   (%rsi,%rcx,4),%xmm6

0041021 <jsimd_extxbgr_gray_convert_sse2.column_ld2>:
	test   $0x2,%cl
	je     41038 <jsimd_extxbgr_gray_convert_sse2.column_ld4>
	sub    $0x2,%rcx
	movq   (%rsi,%rcx,4),%xmm2
	pslldq $0x8,%xmm6
	por    %xmm2,%xmm6

0041038 <jsimd_extxbgr_gray_convert_sse2.column_ld4>:
	test   $0x4,%cl
	je     4104a <jsimd_extxbgr_gray_convert_sse2.column_ld8>
	sub    $0x4,%rcx
	movdqa %xmm6,%xmm2
	movdqu (%rsi,%rcx,4),%xmm6

004104a <jsimd_extxbgr_gray_convert_sse2.column_ld8>:
	test   $0x8,%cl
	mov    $0x10,%ecx
	je     4107a <jsimd_extxbgr_gray_convert_sse2.rgb_gray_cnv>
	movdqa %xmm6,%xmm3
	movdqa %xmm2,%xmm1
	movdqu (%rsi),%xmm6
	movdqu 0x10(%rsi),%xmm2
	jmp    4107a <jsimd_extxbgr_gray_convert_sse2.rgb_gray_cnv>

0041067 <jsimd_extxbgr_gray_convert_sse2.columnloop>:
	movdqu (%rsi),%xmm6
	movdqu 0x10(%rsi),%xmm2
	movdqu 0x20(%rsi),%xmm3
	movdqu 0x30(%rsi),%xmm1

004107a <jsimd_extxbgr_gray_convert_sse2.rgb_gray_cnv>:
	movdqa %xmm6,%xmm5
	punpcklbw %xmm2,%xmm6
	punpckhbw %xmm2,%xmm5
	movdqa %xmm3,%xmm4
	punpcklbw %xmm1,%xmm3
	punpckhbw %xmm1,%xmm4
	movdqa %xmm6,%xmm7
	punpcklwd %xmm3,%xmm6
	punpckhwd %xmm3,%xmm7
	movdqa %xmm5,%xmm0
	punpcklwd %xmm4,%xmm5
	punpckhwd %xmm4,%xmm0
	movdqa %xmm6,%xmm2
	punpcklbw %xmm5,%xmm6
	punpckhbw %xmm5,%xmm2
	movdqa %xmm7,%xmm1
	punpcklbw %xmm0,%xmm7
	punpckhbw %xmm0,%xmm1
	pxor   %xmm3,%xmm3
	movdqa %xmm6,%xmm4
	punpcklbw %xmm3,%xmm6
	punpckhbw %xmm3,%xmm4
	movdqa %xmm7,%xmm5
	punpcklbw %xmm3,%xmm7
	punpckhbw %xmm3,%xmm5
	movdqa %xmm2,%xmm0
	punpcklbw %xmm3,%xmm2
	punpckhbw %xmm3,%xmm0
	punpcklbw %xmm1,%xmm3
	punpckhbw %xmm1,%xmm1
	psrlw  $0x8,%xmm3
	psrlw  $0x8,%xmm1
	movdqa %xmm1,%xmm6
	punpcklwd %xmm3,%xmm1
	punpckhwd %xmm3,%xmm6
	pmaddwd 0x1ab70(%rip),%xmm1        # 5bc80 <PW_F0299_F0337>
	pmaddwd 0x1ab68(%rip),%xmm6        # 5bc80 <PW_F0299_F0337>
	movdqa %xmm6,%xmm7
	movdqa %xmm0,%xmm6
	punpcklwd %xmm2,%xmm0
	punpckhwd %xmm2,%xmm6
	pmaddwd 0x1ab50(%rip),%xmm0        # 5bc80 <PW_F0299_F0337>
	pmaddwd 0x1ab48(%rip),%xmm6        # 5bc80 <PW_F0299_F0337>
	movdqa %xmm0,-0x20(%rbp)
	movdqa %xmm6,-0x10(%rbp)
	movdqa %xmm5,%xmm0
	movdqa %xmm4,%xmm6
	movdqa %xmm0,%xmm4
	punpcklwd %xmm3,%xmm0
	punpckhwd %xmm3,%xmm4
	pmaddwd 0x1ab32(%rip),%xmm0        # 5bc90 <PW_F0114_F0250>
	pmaddwd 0x1ab2a(%rip),%xmm4        # 5bc90 <PW_F0114_F0250>
	movdqa 0x1ab32(%rip),%xmm3        # 5bca0 <PD_ONEHALF>
	paddd  %xmm1,%xmm0
	paddd  %xmm7,%xmm4
	paddd  %xmm3,%xmm0
	paddd  %xmm3,%xmm4
	psrld  $0x10,%xmm0
	psrld  $0x10,%xmm4
	packssdw %xmm4,%xmm0
	movdqa %xmm6,%xmm4
	punpcklwd %xmm2,%xmm6
	punpckhwd %xmm2,%xmm4
	pmaddwd 0x1aaf0(%rip),%xmm6        # 5bc90 <PW_F0114_F0250>
	pmaddwd 0x1aae8(%rip),%xmm4        # 5bc90 <PW_F0114_F0250>
	movdqa 0x1aaf0(%rip),%xmm2        # 5bca0 <PD_ONEHALF>
	paddd  -0x20(%rbp),%xmm6
	paddd  -0x10(%rbp),%xmm4
	paddd  %xmm2,%xmm6
	paddd  %xmm2,%xmm4
	psrld  $0x10,%xmm6
	psrld  $0x10,%xmm4
	packssdw %xmm4,%xmm6
	psllw  $0x8,%xmm0
	por    %xmm0,%xmm6
	movdqa %xmm6,(%rdi)
	sub    $0x10,%rcx
	add    $0x40,%rsi
	add    $0x10,%rdi
	cmp    $0x10,%rcx
	jae    41067 <jsimd_extxbgr_gray_convert_sse2.columnloop>
	test   %rcx,%rcx
	jne    41013 <jsimd_extxbgr_gray_convert_sse2.column_ld1>
	pop    %rcx
	pop    %rsi
	pop    %rdi
	add    $0x8,%rsi
	add    $0x8,%rdi
	dec    %rax
	jg     41000 <jsimd_extxbgr_gray_convert_sse2.rowloop>

0041210 <jsimd_extxbgr_gray_convert_sse2.return>:
	pop    %rbx
	pop    %r15
	pop    %r14
	pop    %r13
	pop    %r12
	pop    %r11
	pop    %r10
	mov    %rbp,%rsp
	pop    %rsp
	pop    %rbp
	retq   
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop

0041230 <jsimd_extxrgb_gray_convert_sse2>:
	push   %rbp
	mov    %rsp,%rax
	sub    $0x4,%rsp
	and    $0xfffffffffffffff0,%rsp
	mov    %rax,(%rsp)
	mov    %rsp,%rbp
	lea    -0x20(%rbp),%rsp
	push   %r10
	push   %r11
	push   %r12
	push   %r13
	push   %r14
	push   %r15
	mov    %rdi,%r10
	mov    %rsi,%r11
	mov    %rdx,%r12
	mov    %rcx,%r13
	mov    %r8,%r14
	mov    %r9,%r15
	push   %rbx
	mov    %r10d,%ecx
	test   %rcx,%rcx
	je     414a0 <jsimd_extxrgb_gray_convert_sse2.return>
	push   %rcx
	mov    %r12,%rsi
	mov    %r13d,%ecx
	mov    (%rsi),%rdi
	lea    (%rdi,%rcx,8),%rdi
	pop    %rcx
	mov    %r11,%rsi
	mov    %r14d,%eax
	test   %rax,%rax
	jle    414a0 <jsimd_extxrgb_gray_convert_sse2.return>

0041290 <jsimd_extxrgb_gray_convert_sse2.rowloop>:
	push   %rdi
	push   %rsi
	push   %rcx
	mov    (%rsi),%rsi
	mov    (%rdi),%rdi
	cmp    $0x10,%rcx
	jae    412f7 <jsimd_extxrgb_gray_convert_sse2.columnloop>

00412a3 <jsimd_extxrgb_gray_convert_sse2.column_ld1>:
	test   $0x1,%cl
	je     412b1 <jsimd_extxrgb_gray_convert_sse2.column_ld2>
	sub    $0x1,%rcx
	movd   (%rsi,%rcx,4),%xmm6

00412b1 <jsimd_extxrgb_gray_convert_sse2.column_ld2>:
	test   $0x2,%cl
	je     412c8 <jsimd_extxrgb_gray_convert_sse2.column_ld4>
	sub    $0x2,%rcx
	movq   (%rsi,%rcx,4),%xmm2
	pslldq $0x8,%xmm6
	por    %xmm2,%xmm6

00412c8 <jsimd_extxrgb_gray_convert_sse2.column_ld4>:
	test   $0x4,%cl
	je     412da <jsimd_extxrgb_gray_convert_sse2.column_ld8>
	sub    $0x4,%rcx
	movdqa %xmm6,%xmm2
	movdqu (%rsi,%rcx,4),%xmm6

00412da <jsimd_extxrgb_gray_convert_sse2.column_ld8>:
	test   $0x8,%cl
	mov    $0x10,%ecx
	je     4130a <jsimd_extxrgb_gray_convert_sse2.rgb_gray_cnv>
	movdqa %xmm6,%xmm3
	movdqa %xmm2,%xmm5
	movdqu (%rsi),%xmm6
	movdqu 0x10(%rsi),%xmm2
	jmp    4130a <jsimd_extxrgb_gray_convert_sse2.rgb_gray_cnv>

00412f7 <jsimd_extxrgb_gray_convert_sse2.columnloop>:
	movdqu (%rsi),%xmm6
	movdqu 0x10(%rsi),%xmm2
	movdqu 0x20(%rsi),%xmm3
	movdqu 0x30(%rsi),%xmm5

004130a <jsimd_extxrgb_gray_convert_sse2.rgb_gray_cnv>:
	movdqa %xmm6,%xmm1
	punpcklbw %xmm2,%xmm6
	punpckhbw %xmm2,%xmm1
	movdqa %xmm3,%xmm0
	punpcklbw %xmm5,%xmm3
	punpckhbw %xmm5,%xmm0
	movdqa %xmm6,%xmm7
	punpcklwd %xmm3,%xmm6
	punpckhwd %xmm3,%xmm7
	movdqa %xmm1,%xmm4
	punpcklwd %xmm0,%xmm1
	punpckhwd %xmm0,%xmm4
	movdqa %xmm6,%xmm2
	punpcklbw %xmm1,%xmm6
	punpckhbw %xmm1,%xmm2
	movdqa %xmm7,%xmm5
	punpcklbw %xmm4,%xmm7
	punpckhbw %xmm4,%xmm5
	pxor   %xmm3,%xmm3
	movdqa %xmm6,%xmm0
	punpcklbw %xmm3,%xmm6
	punpckhbw %xmm3,%xmm0
	movdqa %xmm7,%xmm1
	punpcklbw %xmm3,%xmm7
	punpckhbw %xmm3,%xmm1
	movdqa %xmm2,%xmm4
	punpcklbw %xmm3,%xmm2
	punpckhbw %xmm3,%xmm4
	punpcklbw %xmm5,%xmm3
	punpckhbw %xmm5,%xmm5
	psrlw  $0x8,%xmm3
	psrlw  $0x8,%xmm5
	movdqa %xmm1,%xmm6
	punpcklwd %xmm3,%xmm1
	punpckhwd %xmm3,%xmm6
	pmaddwd 0x1a8e0(%rip),%xmm1        # 5bc80 <PW_F0299_F0337>
	pmaddwd 0x1a8d8(%rip),%xmm6        # 5bc80 <PW_F0299_F0337>
	movdqa %xmm6,%xmm7
	movdqa %xmm0,%xmm6
	punpcklwd %xmm2,%xmm0
	punpckhwd %xmm2,%xmm6
	pmaddwd 0x1a8c0(%rip),%xmm0        # 5bc80 <PW_F0299_F0337>
	pmaddwd 0x1a8b8(%rip),%xmm6        # 5bc80 <PW_F0299_F0337>
	movdqa %xmm0,-0x20(%rbp)
	movdqa %xmm6,-0x10(%rbp)
	movdqa %xmm5,%xmm0
	movdqa %xmm4,%xmm6
	movdqa %xmm0,%xmm4
	punpcklwd %xmm3,%xmm0
	punpckhwd %xmm3,%xmm4
	pmaddwd 0x1a8a2(%rip),%xmm0        # 5bc90 <PW_F0114_F0250>
	pmaddwd 0x1a89a(%rip),%xmm4        # 5bc90 <PW_F0114_F0250>
	movdqa 0x1a8a2(%rip),%xmm3        # 5bca0 <PD_ONEHALF>
	paddd  %xmm1,%xmm0
	paddd  %xmm7,%xmm4
	paddd  %xmm3,%xmm0
	paddd  %xmm3,%xmm4
	psrld  $0x10,%xmm0
	psrld  $0x10,%xmm4
	packssdw %xmm4,%xmm0
	movdqa %xmm6,%xmm4
	punpcklwd %xmm2,%xmm6
	punpckhwd %xmm2,%xmm4
	pmaddwd 0x1a860(%rip),%xmm6        # 5bc90 <PW_F0114_F0250>
	pmaddwd 0x1a858(%rip),%xmm4        # 5bc90 <PW_F0114_F0250>
	movdqa 0x1a860(%rip),%xmm2        # 5bca0 <PD_ONEHALF>
	paddd  -0x20(%rbp),%xmm6
	paddd  -0x10(%rbp),%xmm4
	paddd  %xmm2,%xmm6
	paddd  %xmm2,%xmm4
	psrld  $0x10,%xmm6
	psrld  $0x10,%xmm4
	packssdw %xmm4,%xmm6
	psllw  $0x8,%xmm0
	por    %xmm0,%xmm6
	movdqa %xmm6,(%rdi)
	sub    $0x10,%rcx
	add    $0x40,%rsi
	add    $0x10,%rdi
	cmp    $0x10,%rcx
	jae    412f7 <jsimd_extxrgb_gray_convert_sse2.columnloop>
	test   %rcx,%rcx
	jne    412a3 <jsimd_extxrgb_gray_convert_sse2.column_ld1>
	pop    %rcx
	pop    %rsi
	pop    %rdi
	add    $0x8,%rsi
	add    $0x8,%rdi
	dec    %rax
	jg     41290 <jsimd_extxrgb_gray_convert_sse2.rowloop>

00414a0 <jsimd_extxrgb_gray_convert_sse2.return>:
	pop    %rbx
	pop    %r15
	pop    %r14
	pop    %r13
	pop    %r12
	pop    %r11
	pop    %r10
	mov    %rbp,%rsp
	pop    %rsp
	pop    %rbp
	retq   
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop

00414c0 <jsimd_huff_encode_one_block_sse2>:
	push   %rbp
	mov    %rsp,%rax
	sub    $0x4,%rsp
	and    $0xfffffffffffffff0,%rsp
	mov    %rax,(%rsp)
	mov    %rsp,%rbp
	lea    -0x100(%rbp),%rsp
	push   %r10
	push   %r11
	push   %r12
	push   %r13
	push   %r14
	push   %r15
	mov    %rdi,%r10
	mov    %rsi,%r11
	mov    %rdx,%r12
	mov    %rcx,%r13
	mov    %r8,%r14
	mov    %r9,%r15
	push   %rbx
	mov    %r11,%rax
	mov    0x10(%r10),%r8
	mov    0x18(%r10),%r9d
	push   %r10
	movswl (%r12),%edi
	sub    %r13d,%edi
	mov    %edi,%ebx
	mov    %edi,%esi
	sar    $0x1f,%esi
	xor    %esi,%edi
	sub    %esi,%edi
	add    %esi,%ebx
	lea    0x1a78e(%rip),%r11        # 5bcb0 <jconst_huff_encode_one_block>
	movzbq (%r11,%rdi,1),%rdi
	mov    (%r14,%rdi,4),%r11d
	movzbl 0x400(%r14,%rdi,1),%esi
	cmp    $0x30,%r9d
	jl     415f8 <..@16..CHECKBUF47_END>
	sub    $0x8,%r9d
	mov    %r8,%rdx
	mov    %r9d,%ecx
	shr    %cl,%rdx
	mov    %dl,(%rax)
	add    $0x1,%rax
	cmp    $0xff,%dl
	jne    4155d <..@17..EMIT_BYTE_END>
	movb   $0x0,(%rax)
	add    $0x1,%rax

004155d <..@17..EMIT_BYTE_END>:
	sub    $0x8,%r9d
	mov    %r8,%rdx
	mov    %r9d,%ecx
	shr    %cl,%rdx
	mov    %dl,(%rax)
	add    $0x1,%rax
	cmp    $0xff,%dl
	jne    4157c <..@18..EMIT_BYTE_END>
	movb   $0x0,(%rax)
	add    $0x1,%rax

004157c <..@18..EMIT_BYTE_END>:
	sub    $0x8,%r9d
	mov    %r8,%rdx
	mov    %r9d,%ecx
	shr    %cl,%rdx
	mov    %dl,(%rax)
	add    $0x1,%rax
	cmp    $0xff,%dl
	jne    4159b <..@19..EMIT_BYTE_END>
	movb   $0x0,(%rax)
	add    $0x1,%rax

004159b <..@19..EMIT_BYTE_END>:
	sub    $0x8,%r9d
	mov    %r8,%rdx
	mov    %r9d,%ecx
	shr    %cl,%rdx
	mov    %dl,(%rax)
	add    $0x1,%rax
	cmp    $0xff,%dl
	jne    415ba <..@20..EMIT_BYTE_END>
	movb   $0x0,(%rax)
	add    $0x1,%rax

00415ba <..@20..EMIT_BYTE_END>:
	sub    $0x8,%r9d
	mov    %r8,%rdx
	mov    %r9d,%ecx
	shr    %cl,%rdx
	mov    %dl,(%rax)
	add    $0x1,%rax
	cmp    $0xff,%dl
	jne    415d9 <..@21..EMIT_BYTE_END>
	movb   $0x0,(%rax)
	add    $0x1,%rax

00415d9 <..@21..EMIT_BYTE_END>:
	sub    $0x8,%r9d
	mov    %r8,%rdx
	mov    %r9d,%ecx
	shr    %cl,%rdx
	mov    %dl,(%rax)
	add    $0x1,%rax
	cmp    $0xff,%dl
	jne    415f8 <..@16..CHECKBUF47_END>
	movb   $0x0,(%rax)
	add    $0x1,%rax

00415f8 <..@16..CHECKBUF47_END>:
	mov    %esi,%ecx
	add    %ecx,%r9d
	shl    %cl,%r8
	or     %r11,%r8
	mov    $0x1,%esi
	mov    %edi,%ecx
	shl    %cl,%esi
	dec    %esi
	and    %esi,%ebx
	cmp    $0x30,%r9d
	jl     416d4 <..@25..CHECKBUF47_END>
	sub    $0x8,%r9d
	mov    %r8,%rdx
	mov    %r9d,%ecx
	shr    %cl,%rdx
	mov    %dl,(%rax)
	add    $0x1,%rax
	cmp    $0xff,%dl
	jne    41639 <..@26..EMIT_BYTE_END>
	movb   $0x0,(%rax)
	add    $0x1,%rax

0041639 <..@26..EMIT_BYTE_END>:
	sub    $0x8,%r9d
	mov    %r8,%rdx
	mov    %r9d,%ecx
	shr    %cl,%rdx
	mov    %dl,(%rax)
	add    $0x1,%rax
	cmp    $0xff,%dl
	jne    41658 <..@27..EMIT_BYTE_END>
	movb   $0x0,(%rax)
	add    $0x1,%rax

0041658 <..@27..EMIT_BYTE_END>:
	sub    $0x8,%r9d
	mov    %r8,%rdx
	mov    %r9d,%ecx
	shr    %cl,%rdx
	mov    %dl,(%rax)
	add    $0x1,%rax
	cmp    $0xff,%dl
	jne    41677 <..@28..EMIT_BYTE_END>
	movb   $0x0,(%rax)
	add    $0x1,%rax

0041677 <..@28..EMIT_BYTE_END>:
	sub    $0x8,%r9d
	mov    %r8,%rdx
	mov    %r9d,%ecx
	shr    %cl,%rdx
	mov    %dl,(%rax)
	add    $0x1,%rax
	cmp    $0xff,%dl
	jne    41696 <..@29..EMIT_BYTE_END>
	movb   $0x0,(%rax)
	add    $0x1,%rax

0041696 <..@29..EMIT_BYTE_END>:
	sub    $0x8,%r9d
	mov    %r8,%rdx
	mov    %r9d,%ecx
	shr    %cl,%rdx
	mov    %dl,(%rax)
	add    $0x1,%rax
	cmp    $0xff,%dl
	jne    416b5 <..@30..EMIT_BYTE_END>
	movb   $0x0,(%rax)
	add    $0x1,%rax

00416b5 <..@30..EMIT_BYTE_END>:
	sub    $0x8,%r9d
	mov    %r8,%rdx
	mov    %r9d,%ecx
	shr    %cl,%rdx
	mov    %dl,(%rax)
	add    $0x1,%rax
	cmp    $0xff,%dl
	jne    416d4 <..@25..CHECKBUF47_END>
	movb   $0x0,(%rax)
	add    $0x1,%rax

00416d4 <..@25..CHECKBUF47_END>:
	mov    %edi,%ecx
	add    %ecx,%r9d
	shl    %cl,%r8
	or     %rbx,%r8
	xor    %ebx,%ebx
	pxor   %xmm8,%xmm8
	pxor   %xmm9,%xmm9
	pxor   %xmm10,%xmm10
	pxor   %xmm11,%xmm11
	pinsrw $0x0,0x2(%r12),%xmm0
	pinsrw $0x0,0x30(%r12),%xmm1
	pinsrw $0x0,0x26(%r12),%xmm2
	pinsrw $0x0,0x28(%r12),%xmm3
	pinsrw $0x1,0x10(%r12),%xmm0
	pinsrw $0x1,0x40(%r12),%xmm1
	pinsrw $0x1,0x34(%r12),%xmm2
	pinsrw $0x1,0x1a(%r12),%xmm3
	pinsrw $0x2,0x20(%r12),%xmm0
	pinsrw $0x2,0x32(%r12),%xmm1
	pinsrw $0x2,0x42(%r12),%xmm2
	pinsrw $0x2,0xc(%r12),%xmm3
	pinsrw $0x3,0x12(%r12),%xmm0
	pinsrw $0x3,0x24(%r12),%xmm1
	pinsrw $0x3,0x50(%r12),%xmm2
	pinsrw $0x3,0xe(%r12),%xmm3
	pinsrw $0x4,0x4(%r12),%xmm0
	pinsrw $0x4,0x16(%r12),%xmm1
	pinsrw $0x4,0x60(%r12),%xmm2
	pinsrw $0x4,0x1c(%r12),%xmm3
	pinsrw $0x5,0x6(%r12),%xmm0
	pinsrw $0x5,0x8(%r12),%xmm1
	pinsrw $0x5,0x52(%r12),%xmm2
	pinsrw $0x5,0x2a(%r12),%xmm3
	pinsrw $0x6,0x14(%r12),%xmm0
	pinsrw $0x6,0xa(%r12),%xmm1
	pinsrw $0x6,0x44(%r12),%xmm2
	pinsrw $0x6,0x38(%r12),%xmm3
	pinsrw $0x7,0x22(%r12),%xmm0
	pinsrw $0x7,0x18(%r12),%xmm1
	pinsrw $0x7,0x36(%r12),%xmm2
	pinsrw $0x7,0x46(%r12),%xmm3
	pcmpgtw %xmm0,%xmm8
	pcmpgtw %xmm1,%xmm9
	pcmpgtw %xmm2,%xmm10
	pcmpgtw %xmm3,%xmm11
	paddw  %xmm8,%xmm0
	paddw  %xmm9,%xmm1
	paddw  %xmm10,%xmm2
	paddw  %xmm11,%xmm3
	pxor   %xmm8,%xmm0
	pxor   %xmm9,%xmm1
	pxor   %xmm10,%xmm2
	pxor   %xmm11,%xmm3
	pxor   %xmm0,%xmm8
	pxor   %xmm1,%xmm9
	pxor   %xmm2,%xmm10
	pxor   %xmm3,%xmm11
	movdqa %xmm0,-0x80(%rbp)
	movdqa %xmm1,-0x70(%rbp)
	movdqa %xmm2,-0x60(%rbp)
	movdqa %xmm3,-0x50(%rbp)
	movdqa %xmm8,-0x100(%rbp)
	movdqa %xmm9,-0xf0(%rbp)
	movdqa %xmm10,-0xe0(%rbp)
	movdqa %xmm11,-0xd0(%rbp)
	pxor   %xmm8,%xmm8
	pxor   %xmm9,%xmm9
	pxor   %xmm10,%xmm10
	pxor   %xmm11,%xmm11
	pinsrw $0x0,0x54(%r12),%xmm4
	pinsrw $0x0,0x2c(%r12),%xmm5
	pinsrw $0x0,0x76(%r12),%xmm6
	pinsrw $0x0,0x78(%r12),%xmm7
	pinsrw $0x1,0x62(%r12),%xmm4
	pinsrw $0x1,0x1e(%r12),%xmm5
	pinsrw $0x1,0x68(%r12),%xmm6
	pinsrw $0x1,0x7a(%r12),%xmm7
	pinsrw $0x2,0x70(%r12),%xmm4
	pinsrw $0x2,0x2e(%r12),%xmm5
	pinsrw $0x2,0x5a(%r12),%xmm6
	pinsrw $0x2,0x6c(%r12),%xmm7
	pinsrw $0x3,0x72(%r12),%xmm4
	pinsrw $0x3,0x3c(%r12),%xmm5
	pinsrw $0x3,0x4c(%r12),%xmm6
	pinsrw $0x3,0x5e(%r12),%xmm7
	pinsrw $0x4,0x64(%r12),%xmm4
	pinsrw $0x4,0x4a(%r12),%xmm5
	pinsrw $0x4,0x3e(%r12),%xmm6
	pinsrw $0x4,0x6e(%r12),%xmm7
	pinsrw $0x5,0x56(%r12),%xmm4
	pinsrw $0x5,0x58(%r12),%xmm5
	pinsrw $0x5,0x4e(%r12),%xmm6
	pinsrw $0x5,0x7c(%r12),%xmm7
	pinsrw $0x6,0x48(%r12),%xmm4
	pinsrw $0x6,0x66(%r12),%xmm5
	pinsrw $0x6,0x5c(%r12),%xmm6
	pinsrw $0x6,0x7e(%r12),%xmm7
	pinsrw $0x7,0x3a(%r12),%xmm4
	pinsrw $0x7,0x74(%r12),%xmm5
	pinsrw $0x7,0x6a(%r12),%xmm6
	pinsrw $0x7,%ebx,%xmm7
	pcmpgtw %xmm4,%xmm8
	pcmpgtw %xmm5,%xmm9
	pcmpgtw %xmm6,%xmm10
	pcmpgtw %xmm7,%xmm11
	paddw  %xmm8,%xmm4
	paddw  %xmm9,%xmm5
	paddw  %xmm10,%xmm6
	paddw  %xmm11,%xmm7
	pxor   %xmm8,%xmm4
	pxor   %xmm9,%xmm5
	pxor   %xmm10,%xmm6
	pxor   %xmm11,%xmm7
	pxor   %xmm4,%xmm8
	pxor   %xmm5,%xmm9
	pxor   %xmm6,%xmm10
	pxor   %xmm7,%xmm11
	movdqa %xmm4,-0x40(%rbp)
	movdqa %xmm5,-0x30(%rbp)
	movdqa %xmm6,-0x20(%rbp)
	movdqa %xmm7,-0x10(%rbp)
	movdqa %xmm8,-0xc0(%rbp)
	movdqa %xmm9,-0xb0(%rbp)
	movdqa %xmm10,-0xa0(%rbp)
	movdqa %xmm11,-0x90(%rbp)
	pxor   %xmm8,%xmm8
	pcmpeqw %xmm8,%xmm0
	pcmpeqw %xmm8,%xmm1
	pcmpeqw %xmm8,%xmm2
	pcmpeqw %xmm8,%xmm3
	pcmpeqw %xmm8,%xmm4
	pcmpeqw %xmm8,%xmm5
	pcmpeqw %xmm8,%xmm6
	pcmpeqw %xmm8,%xmm7
	packsswb %xmm1,%xmm0
	packsswb %xmm3,%xmm2
	packsswb %xmm5,%xmm4
	packsswb %xmm7,%xmm6
	pmovmskb %xmm0,%r11d
	pmovmskb %xmm2,%r12d
	pmovmskb %xmm4,%r13d
	pmovmskb %xmm6,%r14d
	shl    $0x10,%r12
	shl    $0x10,%r14
	or     %r12,%r11
	or     %r14,%r13
	shl    $0x20,%r13
	or     %r13,%r11
	not    %r11
	mov    0x3c0(%r15),%r13d
	movzbl 0x4f0(%r15),%r14d
	lea    -0x80(%rbp),%rsi

0041a92 <jsimd_huff_encode_one_block_sse2.BLOOP>:
	bsf    %r11,%r12
	je     41c62 <jsimd_huff_encode_one_block_sse2.ELOOP>
	mov    %r12,%rcx
	lea    (%rsi,%r12,2),%rsi
	shr    %cl,%r11
	movzwq (%rsi),%rdi
	lea    0x1a1ff(%rip),%rbx        # 5bcb0 <jconst_huff_encode_one_block>
	movzbq (%rbx,%rdi,1),%rdi

0041ab6 <jsimd_huff_encode_one_block_sse2.BRLOOP>:
	cmp    $0x10,%r12
	jl     41b99 <jsimd_huff_encode_one_block_sse2.ERLOOP>
	cmp    $0x30,%r9d
	jl     41b84 <..@36..CHECKBUF47_END>
	sub    $0x8,%r9d
	mov    %r8,%rdx
	mov    %r9d,%ecx
	shr    %cl,%rdx
	mov    %dl,(%rax)
	add    $0x1,%rax
	cmp    $0xff,%dl
	jne    41ae9 <..@37..EMIT_BYTE_END>
	movb   $0x0,(%rax)
	add    $0x1,%rax

0041ae9 <..@37..EMIT_BYTE_END>:
	sub    $0x8,%r9d
	mov    %r8,%rdx
	mov    %r9d,%ecx
	shr    %cl,%rdx
	mov    %dl,(%rax)
	add    $0x1,%rax
	cmp    $0xff,%dl
	jne    41b08 <..@38..EMIT_BYTE_END>
	movb   $0x0,(%rax)
	add    $0x1,%rax

0041b08 <..@38..EMIT_BYTE_END>:
	sub    $0x8,%r9d
	mov    %r8,%rdx
	mov    %r9d,%ecx
	shr    %cl,%rdx
	mov    %dl,(%rax)
	add    $0x1,%rax
	cmp    $0xff,%dl
	jne    41b27 <..@39..EMIT_BYTE_END>
	movb   $0x0,(%rax)
	add    $0x1,%rax

0041b27 <..@39..EMIT_BYTE_END>:
	sub    $0x8,%r9d
	mov    %r8,%rdx
	mov    %r9d,%ecx
	shr    %cl,%rdx
	mov    %dl,(%rax)
	add    $0x1,%rax
	cmp    $0xff,%dl
	jne    41b46 <..@40..EMIT_BYTE_END>
	movb   $0x0,(%rax)
	add    $0x1,%rax

0041b46 <..@40..EMIT_BYTE_END>:
	sub    $0x8,%r9d
	mov    %r8,%rdx
	mov    %r9d,%ecx
	shr    %cl,%rdx
	mov    %dl,(%rax)
	add    $0x1,%rax
	cmp    $0xff,%dl
	jne    41b65 <..@41..EMIT_BYTE_END>
	movb   $0x0,(%rax)
	add    $0x1,%rax

0041b65 <..@41..EMIT_BYTE_END>:
	sub    $0x8,%r9d
	mov    %r8,%rdx
	mov    %r9d,%ecx
	shr    %cl,%rdx
	mov    %dl,(%rax)
	add    $0x1,%rax
	cmp    $0xff,%dl
	jne    41b84 <..@36..CHECKBUF47_END>
	movb   $0x0,(%rax)
	add    $0x1,%rax

0041b84 <..@36..CHECKBUF47_END>:
	mov    %r14d,%ecx
	add    %ecx,%r9d
	shl    %cl,%r8
	or     %r13,%r8
	sub    $0x10,%r12
	jmpq   41ab6 <jsimd_huff_encode_one_block_sse2.BRLOOP>

0041b99 <jsimd_huff_encode_one_block_sse2.ERLOOP>:
	cmp    $0x20,%r9d
	jl     41c1b <..@44..CHECKBUF31_END>
	sub    $0x8,%r9d
	mov    %r8,%rdx
	mov    %r9d,%ecx
	shr    %cl,%rdx
	mov    %dl,(%rax)
	add    $0x1,%rax
	cmp    $0xff,%dl
	jne    41bbe <..@45..EMIT_BYTE_END>
	movb   $0x0,(%rax)
	add    $0x1,%rax

0041bbe <..@45..EMIT_BYTE_END>:
	sub    $0x8,%r9d
	mov    %r8,%rdx
	mov    %r9d,%ecx
	shr    %cl,%rdx
	mov    %dl,(%rax)
	add    $0x1,%rax
	cmp    $0xff,%dl
	jne    41bdd <..@46..EMIT_BYTE_END>
	movb   $0x0,(%rax)
	add    $0x1,%rax

0041bdd <..@46..EMIT_BYTE_END>:
	sub    $0x8,%r9d
	mov    %r8,%rdx
	mov    %r9d,%ecx
	shr    %cl,%rdx
	mov    %dl,(%rax)
	add    $0x1,%rax
	cmp    $0xff,%dl
	jne    41bfc <..@47..EMIT_BYTE_END>
	movb   $0x0,(%rax)
	add    $0x1,%rax

0041bfc <..@47..EMIT_BYTE_END>:
	sub    $0x8,%r9d
	mov    %r8,%rdx
	mov    %r9d,%ecx
	shr    %cl,%rdx
	mov    %dl,(%rax)
	add    $0x1,%rax
	cmp    $0xff,%dl
	jne    41c1b <..@44..CHECKBUF31_END>
	movb   $0x0,(%rax)
	add    $0x1,%rax

0041c1b <..@44..CHECKBUF31_END>:
	shl    $0x4,%r12
	add    %rdi,%r12
	mov    (%r15,%r12,4),%ebx
	movzbl 0x400(%r15,%r12,1),%ecx
	add    %ecx,%r9d
	shl    %cl,%r8
	or     %rbx,%r8
	movswl -0x80(%rsi),%ebx
	mov    %rdi,%rcx
	mov    $0x1,%edx
	shl    %cl,%rdx
	dec    %rdx
	and    %rdx,%rbx
	add    %ecx,%r9d
	shl    %cl,%r8
	or     %rbx,%r8
	shr    %r11
	add    $0x2,%rsi
	jmpq   41a92 <jsimd_huff_encode_one_block_sse2.BLOOP>

0041c62 <jsimd_huff_encode_one_block_sse2.ELOOP>:
	lea    -0x2(%rbp),%rdi
	cmp    %rsi,%rdi
	je     41d4a <jsimd_huff_encode_one_block_sse2.EFN>
	mov    (%r15),%ebx
	movzbl 0x400(%r15),%r12d
	cmp    $0x30,%r9d
	jl     41d3e <..@52..CHECKBUF47_END>
	sub    $0x8,%r9d
	mov    %r8,%rdx
	mov    %r9d,%ecx
	shr    %cl,%rdx
	mov    %dl,(%rax)
	add    $0x1,%rax
	cmp    $0xff,%dl
	jne    41ca3 <..@53..EMIT_BYTE_END>
	movb   $0x0,(%rax)
	add    $0x1,%rax

0041ca3 <..@53..EMIT_BYTE_END>:
	sub    $0x8,%r9d
	mov    %r8,%rdx
	mov    %r9d,%ecx
	shr    %cl,%rdx
	mov    %dl,(%rax)
	add    $0x1,%rax
	cmp    $0xff,%dl
	jne    41cc2 <..@54..EMIT_BYTE_END>
	movb   $0x0,(%rax)
	add    $0x1,%rax

0041cc2 <..@54..EMIT_BYTE_END>:
	sub    $0x8,%r9d
	mov    %r8,%rdx
	mov    %r9d,%ecx
	shr    %cl,%rdx
	mov    %dl,(%rax)
	add    $0x1,%rax
	cmp    $0xff,%dl
	jne    41ce1 <..@55..EMIT_BYTE_END>
	movb   $0x0,(%rax)
	add    $0x1,%rax

0041ce1 <..@55..EMIT_BYTE_END>:
	sub    $0x8,%r9d
	mov    %r8,%rdx
	mov    %r9d,%ecx
	shr    %cl,%rdx
	mov    %dl,(%rax)
	add    $0x1,%rax
	cmp    $0xff,%dl
	jne    41d00 <..@56..EMIT_BYTE_END>
	movb   $0x0,(%rax)
	add    $0x1,%rax

0041d00 <..@56..EMIT_BYTE_END>:
	sub    $0x8,%r9d
	mov    %r8,%rdx
	mov    %r9d,%ecx
	shr    %cl,%rdx
	mov    %dl,(%rax)
	add    $0x1,%rax
	cmp    $0xff,%dl
	jne    41d1f <..@57..EMIT_BYTE_END>
	movb   $0x0,(%rax)
	add    $0x1,%rax

0041d1f <..@57..EMIT_BYTE_END>:
	sub    $0x8,%r9d
	mov    %r8,%rdx
	mov    %r9d,%ecx
	shr    %cl,%rdx
	mov    %dl,(%rax)
	add    $0x1,%rax
	cmp    $0xff,%dl
	jne    41d3e <..@52..CHECKBUF47_END>
	movb   $0x0,(%rax)
	add    $0x1,%rax

0041d3e <..@52..CHECKBUF47_END>:
	mov    %r12d,%ecx
	add    %ecx,%r9d
	shl    %cl,%r8
	or     %rbx,%r8

0041d4a <jsimd_huff_encode_one_block_sse2.EFN>:
	pop    %r10
	mov    %r8,0x10(%r10)
	mov    %r9d,0x18(%r10)
	pop    %rbx
	pop    %r15
	pop    %r14
	pop    %r13
	pop    %r12
	pop    %r11
	pop    %r10
	mov    %rbp,%rsp
	pop    %rsp
	pop    %rbp
	retq   
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop

0041d70 <jsimd_h2v1_downsample_sse2>:
	push   %rbp
	mov    %rsp,%rax
	mov    %rsp,%rbp
	push   %r10
	push   %r11
	push   %r12
	push   %r13
	push   %r14
	push   %r15
	mov    %rdi,%r10
	mov    %rsi,%r11
	mov    %rdx,%r12
	mov    %rcx,%r13
	mov    %r8,%r14
	mov    %r9,%r15
	mov    %r13d,%ecx
	shl    $0x3,%rcx
	je     41e89 <jsimd_h2v1_downsample_sse2.return>
	mov    %r10d,%edx
	push   %rcx
	shl    %rcx
	sub    %rdx,%rcx
	jle    41dd2 <jsimd_h2v1_downsample_sse2.expand_end>
	mov    %r11,%rax
	test   %rax,%rax
	jle    41dd2 <jsimd_h2v1_downsample_sse2.expand_end>
	cld    
	mov    %r14,%rsi

0041dba <jsimd_h2v1_downsample_sse2.expandloop>:
	push   %rax
	push   %rcx
	mov    (%rsi),%rdi
	add    %rdx,%rdi
	mov    -0x1(%rdi),%al
	rep stos %al,%es:(%rdi)
	pop    %rcx
	pop    %rax
	add    $0x8,%rsi
	dec    %rax
	jg     41dba <jsimd_h2v1_downsample_sse2.expandloop>

0041dd2 <jsimd_h2v1_downsample_sse2.expand_end>:
	pop    %rcx
	mov    %r12d,%eax
	test   %eax,%eax
	jle    41e89 <jsimd_h2v1_downsample_sse2.return>
	mov    $0x10000,%edx
	movd   %edx,%xmm7
	pcmpeqw %xmm6,%xmm6
	pshufd $0x0,%xmm7,%xmm7
	psrlw  $0x8,%xmm6
	mov    %r14,%rsi
	mov    %r15,%rdi

0041dfb <jsimd_h2v1_downsample_sse2.rowloop>:
	push   %rcx
	push   %rdi
	push   %rsi
	mov    (%rsi),%rsi
	mov    (%rdi),%rdi
	cmp    $0x10,%rcx
	jae    41e19 <jsimd_h2v1_downsample_sse2.columnloop>

0041e0a <jsimd_h2v1_downsample_sse2.columnloop_r8>:
	movdqa (%rsi),%xmm0
	pxor   %xmm1,%xmm1
	mov    $0x10,%ecx
	jmp    41e22 <jsimd_h2v1_downsample_sse2.downsample>

0041e19 <jsimd_h2v1_downsample_sse2.columnloop>:
	movdqa (%rsi),%xmm0
	movdqa 0x10(%rsi),%xmm1

0041e22 <jsimd_h2v1_downsample_sse2.downsample>:
	movdqa %xmm0,%xmm2
	movdqa %xmm1,%xmm3
	pand   %xmm6,%xmm0
	psrlw  $0x8,%xmm2
	pand   %xmm6,%xmm1
	psrlw  $0x8,%xmm3
	paddw  %xmm2,%xmm0
	paddw  %xmm3,%xmm1
	paddw  %xmm7,%xmm0
	paddw  %xmm7,%xmm1
	psrlw  $0x1,%xmm0
	psrlw  $0x1,%xmm1
	packuswb %xmm1,%xmm0
	movdqa %xmm0,(%rdi)
	sub    $0x10,%rcx
	add    $0x20,%rsi
	add    $0x10,%rdi
	cmp    $0x10,%rcx
	jae    41e19 <jsimd_h2v1_downsample_sse2.columnloop>
	test   %rcx,%rcx
	jne    41e0a <jsimd_h2v1_downsample_sse2.columnloop_r8>
	pop    %rsi
	pop    %rdi
	pop    %rcx
	add    $0x8,%rsi
	add    $0x8,%rdi
	dec    %rax
	jg     41dfb <jsimd_h2v1_downsample_sse2.rowloop>

0041e89 <jsimd_h2v1_downsample_sse2.return>:
	pop    %r15
	pop    %r14
	pop    %r13
	pop    %r12
	pop    %r11
	pop    %r10
	pop    %rbp
	retq   
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop

0041ea0 <jsimd_h2v2_downsample_sse2>:
	push   %rbp
	mov    %rsp,%rax
	mov    %rsp,%rbp
	push   %r10
	push   %r11
	push   %r12
	push   %r13
	push   %r14
	push   %r15
	mov    %rdi,%r10
	mov    %rsi,%r11
	mov    %rdx,%r12
	mov    %rcx,%r13
	mov    %r8,%r14
	mov    %r9,%r15
	mov    %r13d,%ecx
	shl    $0x3,%rcx
	je     42005 <jsimd_h2v2_downsample_sse2.return>
	mov    %r10d,%edx
	push   %rcx
	shl    %rcx
	sub    %rdx,%rcx
	jle    41f02 <jsimd_h2v2_downsample_sse2.expand_end>
	mov    %r11,%rax
	test   %rax,%rax
	jle    41f02 <jsimd_h2v2_downsample_sse2.expand_end>
	cld    
	mov    %r14,%rsi

0041eea <jsimd_h2v2_downsample_sse2.expandloop>:
	push   %rax
	push   %rcx
	mov    (%rsi),%rdi
	add    %rdx,%rdi
	mov    -0x1(%rdi),%al
	rep stos %al,%es:(%rdi)
	pop    %rcx
	pop    %rax
	add    $0x8,%rsi
	dec    %rax
	jg     41eea <jsimd_h2v2_downsample_sse2.expandloop>

0041f02 <jsimd_h2v2_downsample_sse2.expand_end>:
	pop    %rcx
	mov    %r12d,%eax
	test   %rax,%rax
	jle    42005 <jsimd_h2v2_downsample_sse2.return>
	mov    $0x20001,%edx
	movd   %edx,%xmm7
	pcmpeqw %xmm6,%xmm6
	pshufd $0x0,%xmm7,%xmm7
	psrlw  $0x8,%xmm6
	mov    %r14,%rsi
	mov    %r15,%rdi

0041f2c <jsimd_h2v2_downsample_sse2.rowloop>:
	push   %rcx
	push   %rdi
	push   %rsi
	mov    (%rsi),%rdx
	mov    0x8(%rsi),%rsi
	mov    (%rdi),%rdi
	cmp    $0x10,%rcx
	jae    41f56 <jsimd_h2v2_downsample_sse2.columnloop>

0041f3f <jsimd_h2v2_downsample_sse2.columnloop_r8>:
	movdqa (%rdx),%xmm0
	movdqa (%rsi),%xmm1
	pxor   %xmm2,%xmm2
	pxor   %xmm3,%xmm3
	mov    $0x10,%ecx
	jmp    41f68 <jsimd_h2v2_downsample_sse2.downsample>

0041f56 <jsimd_h2v2_downsample_sse2.columnloop>:
	movdqa (%rdx),%xmm0
	movdqa (%rsi),%xmm1
	movdqa 0x10(%rdx),%xmm2
	movdqa 0x10(%rsi),%xmm3

0041f68 <jsimd_h2v2_downsample_sse2.downsample>:
	movdqa %xmm0,%xmm4
	movdqa %xmm1,%xmm5
	pand   %xmm6,%xmm0
	psrlw  $0x8,%xmm4
	pand   %xmm6,%xmm1
	psrlw  $0x8,%xmm5
	paddw  %xmm4,%xmm0
	paddw  %xmm5,%xmm1
	movdqa %xmm2,%xmm4
	movdqa %xmm3,%xmm5
	pand   %xmm6,%xmm2
	psrlw  $0x8,%xmm4
	pand   %xmm6,%xmm3
	psrlw  $0x8,%xmm5
	paddw  %xmm4,%xmm2
	paddw  %xmm5,%xmm3
	paddw  %xmm1,%xmm0
	paddw  %xmm3,%xmm2
	paddw  %xmm7,%xmm0
	paddw  %xmm7,%xmm2
	psrlw  $0x2,%xmm0
	psrlw  $0x2,%xmm2
	packuswb %xmm2,%xmm0
	movdqa %xmm0,(%rdi)
	sub    $0x10,%rcx
	add    $0x20,%rdx
	add    $0x20,%rsi
	add    $0x10,%rdi
	cmp    $0x10,%rcx
	jae    41f56 <jsimd_h2v2_downsample_sse2.columnloop>
	test   %rcx,%rcx
	jne    41f3f <jsimd_h2v2_downsample_sse2.columnloop_r8>
	pop    %rsi
	pop    %rdi
	pop    %rcx
	add    $0x10,%rsi
	add    $0x8,%rdi
	dec    %rax
	jg     41f2c <jsimd_h2v2_downsample_sse2.rowloop>

0042005 <jsimd_h2v2_downsample_sse2.return>:
	pop    %r15
	pop    %r14
	pop    %r13
	pop    %r12
	pop    %r11
	pop    %r10
	pop    %rbp
	retq   
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop

0042020 <jsimd_ycc_rgb_convert_sse2>:
	push   %rbp
	mov    %rsp,%rax
	sub    $0x4,%rsp
	and    $0xfffffffffffffff0,%rsp
	mov    %rax,(%rsp)
	mov    %rsp,%rbp
	lea    -0x20(%rbp),%rsp
	push   %r10
	push   %r11
	push   %r12
	push   %r13
	push   %r14
	push   %r15
	mov    %rdi,%r10
	mov    %rsi,%r11
	mov    %rdx,%r12
	mov    %rcx,%r13
	mov    %r8,%r14
	mov    %r9,%r15
	push   %rbx
	mov    %r10d,%ecx
	test   %rcx,%rcx
	je     423ac <jsimd_ycc_rgb_convert_sse2.return>
	push   %rcx
	mov    %r11,%rdi
	mov    %r12d,%ecx
	mov    (%rdi),%rsi
	mov    0x8(%rdi),%rbx
	mov    0x10(%rdi),%rdx
	lea    (%rsi,%rcx,8),%rsi
	lea    (%rbx,%rcx,8),%rbx
	lea    (%rdx,%rcx,8),%rdx
	pop    %rcx
	mov    %r13,%rdi
	mov    %r14d,%eax
	test   %rax,%rax
	jle    423ac <jsimd_ycc_rgb_convert_sse2.return>

0042090 <jsimd_ycc_rgb_convert_sse2.rowloop>:
	push   %rax
	push   %rdi
	push   %rdx
	push   %rbx
	push   %rsi
	push   %rcx
	mov    (%rsi),%rsi
	mov    (%rbx),%rbx
	mov    (%rdx),%rdx
	mov    (%rdi),%rdi

00420a2 <jsimd_ycc_rgb_convert_sse2.columnloop>:
	movdqa (%rbx),%xmm5
	movdqa (%rdx),%xmm1
	pcmpeqw %xmm4,%xmm4
	pcmpeqw %xmm7,%xmm7
	psrlw  $0x8,%xmm4
	psllw  $0x7,%xmm7
	movdqa %xmm4,%xmm0
	pand   %xmm5,%xmm4
	psrlw  $0x8,%xmm5
	pand   %xmm1,%xmm0
	psrlw  $0x8,%xmm1
	paddw  %xmm7,%xmm4
	paddw  %xmm7,%xmm5
	paddw  %xmm7,%xmm0
	paddw  %xmm7,%xmm1
	movdqa %xmm4,%xmm2
	movdqa %xmm5,%xmm3
	paddw  %xmm4,%xmm4
	paddw  %xmm5,%xmm5
	movdqa %xmm0,%xmm6
	movdqa %xmm1,%xmm7
	paddw  %xmm0,%xmm0
	paddw  %xmm1,%xmm1
	pmulhw 0x29bb6(%rip),%xmm4        # 6bcc0 <PW_MF0228>
	pmulhw 0x29bae(%rip),%xmm5        # 6bcc0 <PW_MF0228>
	pmulhw 0x29b96(%rip),%xmm0        # 6bcb0 <PW_F0402>
	pmulhw 0x29b8e(%rip),%xmm1        # 6bcb0 <PW_F0402>
	paddw  0x29bb6(%rip),%xmm4        # 6bce0 <PW_ONE>
	paddw  0x29bae(%rip),%xmm5        # 6bce0 <PW_ONE>
	psraw  $0x1,%xmm4
	psraw  $0x1,%xmm5
	paddw  0x29b9c(%rip),%xmm0        # 6bce0 <PW_ONE>
	paddw  0x29b94(%rip),%xmm1        # 6bce0 <PW_ONE>
	psraw  $0x1,%xmm0
	psraw  $0x1,%xmm1
	paddw  %xmm2,%xmm4
	paddw  %xmm3,%xmm5
	paddw  %xmm2,%xmm4
	paddw  %xmm3,%xmm5
	paddw  %xmm6,%xmm0
	paddw  %xmm7,%xmm1
	movdqa %xmm4,-0x20(%rbp)
	movdqa %xmm5,-0x10(%rbp)
	movdqa %xmm2,%xmm4
	movdqa %xmm3,%xmm5
	punpcklwd %xmm6,%xmm2
	punpckhwd %xmm6,%xmm4
	pmaddwd 0x29b40(%rip),%xmm2        # 6bcd0 <PW_MF0344_F0285>
	pmaddwd 0x29b38(%rip),%xmm4        # 6bcd0 <PW_MF0344_F0285>
	punpcklwd %xmm7,%xmm3
	punpckhwd %xmm7,%xmm5
	pmaddwd 0x29b28(%rip),%xmm3        # 6bcd0 <PW_MF0344_F0285>
	pmaddwd 0x29b20(%rip),%xmm5        # 6bcd0 <PW_MF0344_F0285>
	paddd  0x29b38(%rip),%xmm2        # 6bcf0 <PD_ONEHALF>
	paddd  0x29b30(%rip),%xmm4        # 6bcf0 <PD_ONEHALF>
	psrad  $0x10,%xmm2
	psrad  $0x10,%xmm4
	paddd  0x29b1e(%rip),%xmm3        # 6bcf0 <PD_ONEHALF>
	paddd  0x29b16(%rip),%xmm5        # 6bcf0 <PD_ONEHALF>
	psrad  $0x10,%xmm3
	psrad  $0x10,%xmm5
	packssdw %xmm4,%xmm2
	packssdw %xmm5,%xmm3
	psubw  %xmm6,%xmm2
	psubw  %xmm7,%xmm3
	movdqa (%rsi),%xmm5
	pcmpeqw %xmm4,%xmm4
	psrlw  $0x8,%xmm4
	pand   %xmm5,%xmm4
	psrlw  $0x8,%xmm5
	paddw  %xmm4,%xmm0
	paddw  %xmm5,%xmm1
	packuswb %xmm0,%xmm0
	packuswb %xmm1,%xmm1
	paddw  %xmm4,%xmm2
	paddw  %xmm5,%xmm3
	packuswb %xmm2,%xmm2
	packuswb %xmm3,%xmm3
	paddw  -0x20(%rbp),%xmm4
	paddw  -0x10(%rbp),%xmm5
	packuswb %xmm4,%xmm4
	packuswb %xmm5,%xmm5
	punpcklbw %xmm2,%xmm0
	punpcklbw %xmm1,%xmm4
	punpcklbw %xmm5,%xmm3
	movdqa %xmm0,%xmm6
	movdqa %xmm0,%xmm7
	punpcklwd %xmm4,%xmm0
	punpckhwd %xmm4,%xmm6
	psrldq $0x2,%xmm7
	psrldq $0x2,%xmm4
	movdqa %xmm3,%xmm2
	movdqa %xmm3,%xmm1
	punpcklwd %xmm7,%xmm3
	punpckhwd %xmm7,%xmm2
	psrldq $0x2,%xmm1
	movdqa %xmm4,%xmm5
	punpcklwd %xmm1,%xmm4
	punpckhwd %xmm1,%xmm5
	pshufd $0x4e,%xmm0,%xmm7
	movdqa %xmm4,%xmm1
	punpckldq %xmm3,%xmm0
	punpckldq %xmm7,%xmm4
	punpckhdq %xmm1,%xmm3
	pshufd $0x4e,%xmm6,%xmm7
	movdqa %xmm5,%xmm1
	punpckldq %xmm2,%xmm6
	punpckldq %xmm7,%xmm5
	punpckhdq %xmm1,%xmm2
	punpcklqdq %xmm4,%xmm0
	punpcklqdq %xmm6,%xmm3
	punpcklqdq %xmm2,%xmm5
	cmp    $0x10,%rcx
	jb     42305 <jsimd_ycc_rgb_convert_sse2.column_st32>
	test   $0xf,%rdi
	jne    422d8 <jsimd_ycc_rgb_convert_sse2.out1>
	movntdq %xmm0,(%rdi)
	movntdq %xmm3,0x10(%rdi)
	movntdq %xmm5,0x20(%rdi)
	jmp    422e6 <jsimd_ycc_rgb_convert_sse2.out0>

00422d8 <jsimd_ycc_rgb_convert_sse2.out1>:
	movdqu %xmm0,(%rdi)
	movdqu %xmm3,0x10(%rdi)
	movdqu %xmm5,0x20(%rdi)

00422e6 <jsimd_ycc_rgb_convert_sse2.out0>:
	add    $0x30,%rdi
	sub    $0x10,%rcx
	je     4238a <jsimd_ycc_rgb_convert_sse2.nextrow>
	add    $0x10,%rsi
	add    $0x10,%rbx
	add    $0x10,%rdx
	jmpq   420a2 <jsimd_ycc_rgb_convert_sse2.columnloop>

0042305 <jsimd_ycc_rgb_convert_sse2.column_st32>:
	lea    (%rcx,%rcx,2),%rcx
	cmp    $0x20,%rcx
	jb     42326 <jsimd_ycc_rgb_convert_sse2.column_st16>
	movdqu %xmm0,(%rdi)
	movdqu %xmm3,0x10(%rdi)
	add    $0x20,%rdi
	movdqa %xmm5,%xmm0
	sub    $0x20,%rcx
	jmp    4233c <jsimd_ycc_rgb_convert_sse2.column_st15>

0042326 <jsimd_ycc_rgb_convert_sse2.column_st16>:
	cmp    $0x10,%rcx
	jb     4233c <jsimd_ycc_rgb_convert_sse2.column_st15>
	movdqu %xmm0,(%rdi)
	add    $0x10,%rdi
	movdqa %xmm3,%xmm0
	sub    $0x10,%rcx

004233c <jsimd_ycc_rgb_convert_sse2.column_st15>:
	cmp    $0x8,%rcx
	jb     42353 <jsimd_ycc_rgb_convert_sse2.column_st7>
	movq   %xmm0,(%rdi)
	add    $0x8,%rdi
	sub    $0x8,%rcx
	psrldq $0x8,%xmm0

0042353 <jsimd_ycc_rgb_convert_sse2.column_st7>:
	cmp    $0x4,%rcx
	jb     4236a <jsimd_ycc_rgb_convert_sse2.column_st3>
	movd   %xmm0,(%rdi)
	add    $0x4,%rdi
	sub    $0x4,%rcx
	psrldq $0x4,%xmm0

004236a <jsimd_ycc_rgb_convert_sse2.column_st3>:
	movd   %xmm0,%eax
	cmp    $0x2,%rcx
	jb     42383 <jsimd_ycc_rgb_convert_sse2.column_st1>
	mov    %ax,(%rdi)
	add    $0x2,%rdi
	sub    $0x2,%rcx
	shr    $0x10,%rax

0042383 <jsimd_ycc_rgb_convert_sse2.column_st1>:
	test   %rcx,%rcx
	je     4238a <jsimd_ycc_rgb_convert_sse2.nextrow>
	mov    %al,(%rdi)

004238a <jsimd_ycc_rgb_convert_sse2.nextrow>:
	pop    %rcx
	pop    %rsi
	pop    %rbx
	pop    %rdx
	pop    %rdi
	pop    %rax
	add    $0x8,%rsi
	add    $0x8,%rbx
	add    $0x8,%rdx
	add    $0x8,%rdi
	dec    %rax
	jg     42090 <jsimd_ycc_rgb_convert_sse2.rowloop>
	sfence 

00423ac <jsimd_ycc_rgb_convert_sse2.return>:
	pop    %rbx
	pop    %r15
	pop    %r14
	pop    %r13
	pop    %r12
	pop    %r11
	pop    %r10
	mov    %rbp,%rsp
	pop    %rsp
	pop    %rbp
	retq   
	nop

00423c0 <jsimd_ycc_extrgb_convert_sse2>:
	push   %rbp
	mov    %rsp,%rax
	sub    $0x4,%rsp
	and    $0xfffffffffffffff0,%rsp
	mov    %rax,(%rsp)
	mov    %rsp,%rbp
	lea    -0x20(%rbp),%rsp
	push   %r10
	push   %r11
	push   %r12
	push   %r13
	push   %r14
	push   %r15
	mov    %rdi,%r10
	mov    %rsi,%r11
	mov    %rdx,%r12
	mov    %rcx,%r13
	mov    %r8,%r14
	mov    %r9,%r15
	push   %rbx
	mov    %r10d,%ecx
	test   %rcx,%rcx
	je     4274c <jsimd_ycc_extrgb_convert_sse2.return>
	push   %rcx
	mov    %r11,%rdi
	mov    %r12d,%ecx
	mov    (%rdi),%rsi
	mov    0x8(%rdi),%rbx
	mov    0x10(%rdi),%rdx
	lea    (%rsi,%rcx,8),%rsi
	lea    (%rbx,%rcx,8),%rbx
	lea    (%rdx,%rcx,8),%rdx
	pop    %rcx
	mov    %r13,%rdi
	mov    %r14d,%eax
	test   %rax,%rax
	jle    4274c <jsimd_ycc_extrgb_convert_sse2.return>

0042430 <jsimd_ycc_extrgb_convert_sse2.rowloop>:
	push   %rax
	push   %rdi
	push   %rdx
	push   %rbx
	push   %rsi
	push   %rcx
	mov    (%rsi),%rsi
	mov    (%rbx),%rbx
	mov    (%rdx),%rdx
	mov    (%rdi),%rdi

0042442 <jsimd_ycc_extrgb_convert_sse2.columnloop>:
	movdqa (%rbx),%xmm5
	movdqa (%rdx),%xmm1
	pcmpeqw %xmm4,%xmm4
	pcmpeqw %xmm7,%xmm7
	psrlw  $0x8,%xmm4
	psllw  $0x7,%xmm7
	movdqa %xmm4,%xmm0
	pand   %xmm5,%xmm4
	psrlw  $0x8,%xmm5
	pand   %xmm1,%xmm0
	psrlw  $0x8,%xmm1
	paddw  %xmm7,%xmm4
	paddw  %xmm7,%xmm5
	paddw  %xmm7,%xmm0
	paddw  %xmm7,%xmm1
	movdqa %xmm4,%xmm2
	movdqa %xmm5,%xmm3
	paddw  %xmm4,%xmm4
	paddw  %xmm5,%xmm5
	movdqa %xmm0,%xmm6
	movdqa %xmm1,%xmm7
	paddw  %xmm0,%xmm0
	paddw  %xmm1,%xmm1
	pmulhw 0x29816(%rip),%xmm4        # 6bcc0 <PW_MF0228>
	pmulhw 0x2980e(%rip),%xmm5        # 6bcc0 <PW_MF0228>
	pmulhw 0x297f6(%rip),%xmm0        # 6bcb0 <PW_F0402>
	pmulhw 0x297ee(%rip),%xmm1        # 6bcb0 <PW_F0402>
	paddw  0x29816(%rip),%xmm4        # 6bce0 <PW_ONE>
	paddw  0x2980e(%rip),%xmm5        # 6bce0 <PW_ONE>
	psraw  $0x1,%xmm4
	psraw  $0x1,%xmm5
	paddw  0x297fc(%rip),%xmm0        # 6bce0 <PW_ONE>
	paddw  0x297f4(%rip),%xmm1        # 6bce0 <PW_ONE>
	psraw  $0x1,%xmm0
	psraw  $0x1,%xmm1
	paddw  %xmm2,%xmm4
	paddw  %xmm3,%xmm5
	paddw  %xmm2,%xmm4
	paddw  %xmm3,%xmm5
	paddw  %xmm6,%xmm0
	paddw  %xmm7,%xmm1
	movdqa %xmm4,-0x20(%rbp)
	movdqa %xmm5,-0x10(%rbp)
	movdqa %xmm2,%xmm4
	movdqa %xmm3,%xmm5
	punpcklwd %xmm6,%xmm2
	punpckhwd %xmm6,%xmm4
	pmaddwd 0x297a0(%rip),%xmm2        # 6bcd0 <PW_MF0344_F0285>
	pmaddwd 0x29798(%rip),%xmm4        # 6bcd0 <PW_MF0344_F0285>
	punpcklwd %xmm7,%xmm3
	punpckhwd %xmm7,%xmm5
	pmaddwd 0x29788(%rip),%xmm3        # 6bcd0 <PW_MF0344_F0285>
	pmaddwd 0x29780(%rip),%xmm5        # 6bcd0 <PW_MF0344_F0285>
	paddd  0x29798(%rip),%xmm2        # 6bcf0 <PD_ONEHALF>
	paddd  0x29790(%rip),%xmm4        # 6bcf0 <PD_ONEHALF>
	psrad  $0x10,%xmm2
	psrad  $0x10,%xmm4
	paddd  0x2977e(%rip),%xmm3        # 6bcf0 <PD_ONEHALF>
	paddd  0x29776(%rip),%xmm5        # 6bcf0 <PD_ONEHALF>
	psrad  $0x10,%xmm3
	psrad  $0x10,%xmm5
	packssdw %xmm4,%xmm2
	packssdw %xmm5,%xmm3
	psubw  %xmm6,%xmm2
	psubw  %xmm7,%xmm3
	movdqa (%rsi),%xmm5
	pcmpeqw %xmm4,%xmm4
	psrlw  $0x8,%xmm4
	pand   %xmm5,%xmm4
	psrlw  $0x8,%xmm5
	paddw  %xmm4,%xmm0
	paddw  %xmm5,%xmm1
	packuswb %xmm0,%xmm0
	packuswb %xmm1,%xmm1
	paddw  %xmm4,%xmm2
	paddw  %xmm5,%xmm3
	packuswb %xmm2,%xmm2
	packuswb %xmm3,%xmm3
	paddw  -0x20(%rbp),%xmm4
	paddw  -0x10(%rbp),%xmm5
	packuswb %xmm4,%xmm4
	packuswb %xmm5,%xmm5
	punpcklbw %xmm2,%xmm0
	punpcklbw %xmm1,%xmm4
	punpcklbw %xmm5,%xmm3
	movdqa %xmm0,%xmm6
	movdqa %xmm0,%xmm7
	punpcklwd %xmm4,%xmm0
	punpckhwd %xmm4,%xmm6
	psrldq $0x2,%xmm7
	psrldq $0x2,%xmm4
	movdqa %xmm3,%xmm2
	movdqa %xmm3,%xmm1
	punpcklwd %xmm7,%xmm3
	punpckhwd %xmm7,%xmm2
	psrldq $0x2,%xmm1
	movdqa %xmm4,%xmm5
	punpcklwd %xmm1,%xmm4
	punpckhwd %xmm1,%xmm5
	pshufd $0x4e,%xmm0,%xmm7
	movdqa %xmm4,%xmm1
	punpckldq %xmm3,%xmm0
	punpckldq %xmm7,%xmm4
	punpckhdq %xmm1,%xmm3
	pshufd $0x4e,%xmm6,%xmm7
	movdqa %xmm5,%xmm1
	punpckldq %xmm2,%xmm6
	punpckldq %xmm7,%xmm5
	punpckhdq %xmm1,%xmm2
	punpcklqdq %xmm4,%xmm0
	punpcklqdq %xmm6,%xmm3
	punpcklqdq %xmm2,%xmm5
	cmp    $0x10,%rcx
	jb     426a5 <jsimd_ycc_extrgb_convert_sse2.column_st32>
	test   $0xf,%rdi
	jne    42678 <jsimd_ycc_extrgb_convert_sse2.out1>
	movntdq %xmm0,(%rdi)
	movntdq %xmm3,0x10(%rdi)
	movntdq %xmm5,0x20(%rdi)
	jmp    42686 <jsimd_ycc_extrgb_convert_sse2.out0>

0042678 <jsimd_ycc_extrgb_convert_sse2.out1>:
	movdqu %xmm0,(%rdi)
	movdqu %xmm3,0x10(%rdi)
	movdqu %xmm5,0x20(%rdi)

0042686 <jsimd_ycc_extrgb_convert_sse2.out0>:
	add    $0x30,%rdi
	sub    $0x10,%rcx
	je     4272a <jsimd_ycc_extrgb_convert_sse2.nextrow>
	add    $0x10,%rsi
	add    $0x10,%rbx
	add    $0x10,%rdx
	jmpq   42442 <jsimd_ycc_extrgb_convert_sse2.columnloop>

00426a5 <jsimd_ycc_extrgb_convert_sse2.column_st32>:
	lea    (%rcx,%rcx,2),%rcx
	cmp    $0x20,%rcx
	jb     426c6 <jsimd_ycc_extrgb_convert_sse2.column_st16>
	movdqu %xmm0,(%rdi)
	movdqu %xmm3,0x10(%rdi)
	add    $0x20,%rdi
	movdqa %xmm5,%xmm0
	sub    $0x20,%rcx
	jmp    426dc <jsimd_ycc_extrgb_convert_sse2.column_st15>

00426c6 <jsimd_ycc_extrgb_convert_sse2.column_st16>:
	cmp    $0x10,%rcx
	jb     426dc <jsimd_ycc_extrgb_convert_sse2.column_st15>
	movdqu %xmm0,(%rdi)
	add    $0x10,%rdi
	movdqa %xmm3,%xmm0
	sub    $0x10,%rcx

00426dc <jsimd_ycc_extrgb_convert_sse2.column_st15>:
	cmp    $0x8,%rcx
	jb     426f3 <jsimd_ycc_extrgb_convert_sse2.column_st7>
	movq   %xmm0,(%rdi)
	add    $0x8,%rdi
	sub    $0x8,%rcx
	psrldq $0x8,%xmm0

00426f3 <jsimd_ycc_extrgb_convert_sse2.column_st7>:
	cmp    $0x4,%rcx
	jb     4270a <jsimd_ycc_extrgb_convert_sse2.column_st3>
	movd   %xmm0,(%rdi)
	add    $0x4,%rdi
	sub    $0x4,%rcx
	psrldq $0x4,%xmm0

004270a <jsimd_ycc_extrgb_convert_sse2.column_st3>:
	movd   %xmm0,%eax
	cmp    $0x2,%rcx
	jb     42723 <jsimd_ycc_extrgb_convert_sse2.column_st1>
	mov    %ax,(%rdi)
	add    $0x2,%rdi
	sub    $0x2,%rcx
	shr    $0x10,%rax

0042723 <jsimd_ycc_extrgb_convert_sse2.column_st1>:
	test   %rcx,%rcx
	je     4272a <jsimd_ycc_extrgb_convert_sse2.nextrow>
	mov    %al,(%rdi)

004272a <jsimd_ycc_extrgb_convert_sse2.nextrow>:
	pop    %rcx
	pop    %rsi
	pop    %rbx
	pop    %rdx
	pop    %rdi
	pop    %rax
	add    $0x8,%rsi
	add    $0x8,%rbx
	add    $0x8,%rdx
	add    $0x8,%rdi
	dec    %rax
	jg     42430 <jsimd_ycc_extrgb_convert_sse2.rowloop>
	sfence 

004274c <jsimd_ycc_extrgb_convert_sse2.return>:
	pop    %rbx
	pop    %r15
	pop    %r14
	pop    %r13
	pop    %r12
	pop    %r11
	pop    %r10
	mov    %rbp,%rsp
	pop    %rsp
	pop    %rbp
	retq   
	nop

0042760 <jsimd_ycc_extrgbx_convert_sse2>:
	push   %rbp
	mov    %rsp,%rax
	sub    $0x4,%rsp
	and    $0xfffffffffffffff0,%rsp
	mov    %rax,(%rsp)
	mov    %rsp,%rbp
	lea    -0x20(%rbp),%rsp
	push   %r10
	push   %r11
	push   %r12
	push   %r13
	push   %r14
	push   %r15
	mov    %rdi,%r10
	mov    %rsi,%r11
	mov    %rdx,%r12
	mov    %rcx,%r13
	mov    %r8,%r14
	mov    %r9,%r15
	push   %rbx
	mov    %r10d,%ecx
	test   %rcx,%rcx
	je     42a91 <jsimd_ycc_extrgbx_convert_sse2.return>
	push   %rcx
	mov    %r11,%rdi
	mov    %r12d,%ecx
	mov    (%rdi),%rsi
	mov    0x8(%rdi),%rbx
	mov    0x10(%rdi),%rdx
	lea    (%rsi,%rcx,8),%rsi
	lea    (%rbx,%rcx,8),%rbx
	lea    (%rdx,%rcx,8),%rdx
	pop    %rcx
	mov    %r13,%rdi
	mov    %r14d,%eax
	test   %rax,%rax
	jle    42a91 <jsimd_ycc_extrgbx_convert_sse2.return>

00427d0 <jsimd_ycc_extrgbx_convert_sse2.rowloop>:
	push   %rax
	push   %rdi
	push   %rdx
	push   %rbx
	push   %rsi
	push   %rcx
	mov    (%rsi),%rsi
	mov    (%rbx),%rbx
	mov    (%rdx),%rdx
	mov    (%rdi),%rdi

00427e2 <jsimd_ycc_extrgbx_convert_sse2.columnloop>:
	movdqa (%rbx),%xmm5
	movdqa (%rdx),%xmm1
	pcmpeqw %xmm4,%xmm4
	pcmpeqw %xmm7,%xmm7
	psrlw  $0x8,%xmm4
	psllw  $0x7,%xmm7
	movdqa %xmm4,%xmm0
	pand   %xmm5,%xmm4
	psrlw  $0x8,%xmm5
	pand   %xmm1,%xmm0
	psrlw  $0x8,%xmm1
	paddw  %xmm7,%xmm4
	paddw  %xmm7,%xmm5
	paddw  %xmm7,%xmm0
	paddw  %xmm7,%xmm1
	movdqa %xmm4,%xmm2
	movdqa %xmm5,%xmm3
	paddw  %xmm4,%xmm4
	paddw  %xmm5,%xmm5
	movdqa %xmm0,%xmm6
	movdqa %xmm1,%xmm7
	paddw  %xmm0,%xmm0
	paddw  %xmm1,%xmm1
	pmulhw 0x29476(%rip),%xmm4        # 6bcc0 <PW_MF0228>
	pmulhw 0x2946e(%rip),%xmm5        # 6bcc0 <PW_MF0228>
	pmulhw 0x29456(%rip),%xmm0        # 6bcb0 <PW_F0402>
	pmulhw 0x2944e(%rip),%xmm1        # 6bcb0 <PW_F0402>
	paddw  0x29476(%rip),%xmm4        # 6bce0 <PW_ONE>
	paddw  0x2946e(%rip),%xmm5        # 6bce0 <PW_ONE>
	psraw  $0x1,%xmm4
	psraw  $0x1,%xmm5
	paddw  0x2945c(%rip),%xmm0        # 6bce0 <PW_ONE>
	paddw  0x29454(%rip),%xmm1        # 6bce0 <PW_ONE>
	psraw  $0x1,%xmm0
	psraw  $0x1,%xmm1
	paddw  %xmm2,%xmm4
	paddw  %xmm3,%xmm5
	paddw  %xmm2,%xmm4
	paddw  %xmm3,%xmm5
	paddw  %xmm6,%xmm0
	paddw  %xmm7,%xmm1
	movdqa %xmm4,-0x20(%rbp)
	movdqa %xmm5,-0x10(%rbp)
	movdqa %xmm2,%xmm4
	movdqa %xmm3,%xmm5
	punpcklwd %xmm6,%xmm2
	punpckhwd %xmm6,%xmm4
	pmaddwd 0x29400(%rip),%xmm2        # 6bcd0 <PW_MF0344_F0285>
	pmaddwd 0x293f8(%rip),%xmm4        # 6bcd0 <PW_MF0344_F0285>
	punpcklwd %xmm7,%xmm3
	punpckhwd %xmm7,%xmm5
	pmaddwd 0x293e8(%rip),%xmm3        # 6bcd0 <PW_MF0344_F0285>
	pmaddwd 0x293e0(%rip),%xmm5        # 6bcd0 <PW_MF0344_F0285>
	paddd  0x293f8(%rip),%xmm2        # 6bcf0 <PD_ONEHALF>
	paddd  0x293f0(%rip),%xmm4        # 6bcf0 <PD_ONEHALF>
	psrad  $0x10,%xmm2
	psrad  $0x10,%xmm4
	paddd  0x293de(%rip),%xmm3        # 6bcf0 <PD_ONEHALF>
	paddd  0x293d6(%rip),%xmm5        # 6bcf0 <PD_ONEHALF>
	psrad  $0x10,%xmm3
	psrad  $0x10,%xmm5
	packssdw %xmm4,%xmm2
	packssdw %xmm5,%xmm3
	psubw  %xmm6,%xmm2
	psubw  %xmm7,%xmm3
	movdqa (%rsi),%xmm5
	pcmpeqw %xmm4,%xmm4
	psrlw  $0x8,%xmm4
	pand   %xmm5,%xmm4
	psrlw  $0x8,%xmm5
	paddw  %xmm4,%xmm0
	paddw  %xmm5,%xmm1
	packuswb %xmm0,%xmm0
	packuswb %xmm1,%xmm1
	paddw  %xmm4,%xmm2
	paddw  %xmm5,%xmm3
	packuswb %xmm2,%xmm2
	packuswb %xmm3,%xmm3
	paddw  -0x20(%rbp),%xmm4
	paddw  -0x10(%rbp),%xmm5
	packuswb %xmm4,%xmm4
	packuswb %xmm5,%xmm5
	pcmpeqb %xmm6,%xmm6
	pcmpeqb %xmm7,%xmm7
	punpcklbw %xmm2,%xmm0
	punpcklbw %xmm6,%xmm4
	punpcklbw %xmm3,%xmm1
	punpcklbw %xmm7,%xmm5
	movdqa %xmm0,%xmm2
	punpcklwd %xmm4,%xmm0
	punpckhwd %xmm4,%xmm2
	movdqa %xmm1,%xmm6
	punpcklwd %xmm5,%xmm1
	punpckhwd %xmm5,%xmm6
	movdqa %xmm0,%xmm3
	punpckldq %xmm1,%xmm0
	punpckhdq %xmm1,%xmm3
	movdqa %xmm2,%xmm7
	punpckldq %xmm6,%xmm2
	punpckhdq %xmm6,%xmm7
	cmp    $0x10,%rcx
	jb     42a1a <jsimd_ycc_extrgbx_convert_sse2.column_st32>
	test   $0xf,%rdi
	jne    429e8 <jsimd_ycc_extrgbx_convert_sse2.out1>
	movntdq %xmm0,(%rdi)
	movntdq %xmm3,0x10(%rdi)
	movntdq %xmm2,0x20(%rdi)
	movntdq %xmm7,0x30(%rdi)
	jmp    429fb <jsimd_ycc_extrgbx_convert_sse2.out0>

00429e8 <jsimd_ycc_extrgbx_convert_sse2.out1>:
	movdqu %xmm0,(%rdi)
	movdqu %xmm3,0x10(%rdi)
	movdqu %xmm2,0x20(%rdi)
	movdqu %xmm7,0x30(%rdi)

00429fb <jsimd_ycc_extrgbx_convert_sse2.out0>:
	add    $0x40,%rdi
	sub    $0x10,%rcx
	je     42a6f <jsimd_ycc_extrgbx_convert_sse2.nextrow>
	add    $0x10,%rsi
	add    $0x10,%rbx
	add    $0x10,%rdx
	jmpq   427e2 <jsimd_ycc_extrgbx_convert_sse2.columnloop>

0042a1a <jsimd_ycc_extrgbx_convert_sse2.column_st32>:
	cmp    $0x8,%rcx
	jb     42a39 <jsimd_ycc_extrgbx_convert_sse2.column_st16>
	movdqu %xmm0,(%rdi)
	movdqu %xmm3,0x10(%rdi)
	add    $0x20,%rdi
	movdqa %xmm2,%xmm0
	movdqa %xmm7,%xmm3
	sub    $0x8,%rcx

0042a39 <jsimd_ycc_extrgbx_convert_sse2.column_st16>:
	cmp    $0x4,%rcx
	jb     42a4f <jsimd_ycc_extrgbx_convert_sse2.column_st15>
	movdqu %xmm0,(%rdi)
	add    $0x10,%rdi
	movdqa %xmm3,%xmm0
	sub    $0x4,%rcx

0042a4f <jsimd_ycc_extrgbx_convert_sse2.column_st15>:
	cmp    $0x2,%rcx
	jb     42a66 <jsimd_ycc_extrgbx_convert_sse2.column_st7>
	movq   %xmm0,(%rdi)
	add    $0x8,%rdi
	sub    $0x2,%rcx
	psrldq $0x8,%xmm0

0042a66 <jsimd_ycc_extrgbx_convert_sse2.column_st7>:
	test   %rcx,%rcx
	je     42a6f <jsimd_ycc_extrgbx_convert_sse2.nextrow>
	movd   %xmm0,(%rdi)

0042a6f <jsimd_ycc_extrgbx_convert_sse2.nextrow>:
	pop    %rcx
	pop    %rsi
	pop    %rbx
	pop    %rdx
	pop    %rdi
	pop    %rax
	add    $0x8,%rsi
	add    $0x8,%rbx
	add    $0x8,%rdx
	add    $0x8,%rdi
	dec    %rax
	jg     427d0 <jsimd_ycc_extrgbx_convert_sse2.rowloop>
	sfence 

0042a91 <jsimd_ycc_extrgbx_convert_sse2.return>:
	pop    %rbx
	pop    %r15
	pop    %r14
	pop    %r13
	pop    %r12
	pop    %r11
	pop    %r10
	mov    %rbp,%rsp
	pop    %rsp
	pop    %rbp
	retq   
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop

0042ab0 <jsimd_ycc_extbgr_convert_sse2>:
	push   %rbp
	mov    %rsp,%rax
	sub    $0x4,%rsp
	and    $0xfffffffffffffff0,%rsp
	mov    %rax,(%rsp)
	mov    %rsp,%rbp
	lea    -0x20(%rbp),%rsp
	push   %r10
	push   %r11
	push   %r12
	push   %r13
	push   %r14
	push   %r15
	mov    %rdi,%r10
	mov    %rsi,%r11
	mov    %rdx,%r12
	mov    %rcx,%r13
	mov    %r8,%r14
	mov    %r9,%r15
	push   %rbx
	mov    %r10d,%ecx
	test   %rcx,%rcx
	je     42e3c <jsimd_ycc_extbgr_convert_sse2.return>
	push   %rcx
	mov    %r11,%rdi
	mov    %r12d,%ecx
	mov    (%rdi),%rsi
	mov    0x8(%rdi),%rbx
	mov    0x10(%rdi),%rdx
	lea    (%rsi,%rcx,8),%rsi
	lea    (%rbx,%rcx,8),%rbx
	lea    (%rdx,%rcx,8),%rdx
	pop    %rcx
	mov    %r13,%rdi
	mov    %r14d,%eax
	test   %rax,%rax
	jle    42e3c <jsimd_ycc_extbgr_convert_sse2.return>

0042b20 <jsimd_ycc_extbgr_convert_sse2.rowloop>:
	push   %rax
	push   %rdi
	push   %rdx
	push   %rbx
	push   %rsi
	push   %rcx
	mov    (%rsi),%rsi
	mov    (%rbx),%rbx
	mov    (%rdx),%rdx
	mov    (%rdi),%rdi

0042b32 <jsimd_ycc_extbgr_convert_sse2.columnloop>:
	movdqa (%rbx),%xmm5
	movdqa (%rdx),%xmm1
	pcmpeqw %xmm4,%xmm4
	pcmpeqw %xmm7,%xmm7
	psrlw  $0x8,%xmm4
	psllw  $0x7,%xmm7
	movdqa %xmm4,%xmm0
	pand   %xmm5,%xmm4
	psrlw  $0x8,%xmm5
	pand   %xmm1,%xmm0
	psrlw  $0x8,%xmm1
	paddw  %xmm7,%xmm4
	paddw  %xmm7,%xmm5
	paddw  %xmm7,%xmm0
	paddw  %xmm7,%xmm1
	movdqa %xmm4,%xmm2
	movdqa %xmm5,%xmm3
	paddw  %xmm4,%xmm4
	paddw  %xmm5,%xmm5
	movdqa %xmm0,%xmm6
	movdqa %xmm1,%xmm7
	paddw  %xmm0,%xmm0
	paddw  %xmm1,%xmm1
	pmulhw 0x29126(%rip),%xmm4        # 6bcc0 <PW_MF0228>
	pmulhw 0x2911e(%rip),%xmm5        # 6bcc0 <PW_MF0228>
	pmulhw 0x29106(%rip),%xmm0        # 6bcb0 <PW_F0402>
	pmulhw 0x290fe(%rip),%xmm1        # 6bcb0 <PW_F0402>
	paddw  0x29126(%rip),%xmm4        # 6bce0 <PW_ONE>
	paddw  0x2911e(%rip),%xmm5        # 6bce0 <PW_ONE>
	psraw  $0x1,%xmm4
	psraw  $0x1,%xmm5
	paddw  0x2910c(%rip),%xmm0        # 6bce0 <PW_ONE>
	paddw  0x29104(%rip),%xmm1        # 6bce0 <PW_ONE>
	psraw  $0x1,%xmm0
	psraw  $0x1,%xmm1
	paddw  %xmm2,%xmm4
	paddw  %xmm3,%xmm5
	paddw  %xmm2,%xmm4
	paddw  %xmm3,%xmm5
	paddw  %xmm6,%xmm0
	paddw  %xmm7,%xmm1
	movdqa %xmm4,-0x20(%rbp)
	movdqa %xmm5,-0x10(%rbp)
	movdqa %xmm2,%xmm4
	movdqa %xmm3,%xmm5
	punpcklwd %xmm6,%xmm2
	punpckhwd %xmm6,%xmm4
	pmaddwd 0x290b0(%rip),%xmm2        # 6bcd0 <PW_MF0344_F0285>
	pmaddwd 0x290a8(%rip),%xmm4        # 6bcd0 <PW_MF0344_F0285>
	punpcklwd %xmm7,%xmm3
	punpckhwd %xmm7,%xmm5
	pmaddwd 0x29098(%rip),%xmm3        # 6bcd0 <PW_MF0344_F0285>
	pmaddwd 0x29090(%rip),%xmm5        # 6bcd0 <PW_MF0344_F0285>
	paddd  0x290a8(%rip),%xmm2        # 6bcf0 <PD_ONEHALF>
	paddd  0x290a0(%rip),%xmm4        # 6bcf0 <PD_ONEHALF>
	psrad  $0x10,%xmm2
	psrad  $0x10,%xmm4
	paddd  0x2908e(%rip),%xmm3        # 6bcf0 <PD_ONEHALF>
	paddd  0x29086(%rip),%xmm5        # 6bcf0 <PD_ONEHALF>
	psrad  $0x10,%xmm3
	psrad  $0x10,%xmm5
	packssdw %xmm4,%xmm2
	packssdw %xmm5,%xmm3
	psubw  %xmm6,%xmm2
	psubw  %xmm7,%xmm3
	movdqa (%rsi),%xmm5
	pcmpeqw %xmm4,%xmm4
	psrlw  $0x8,%xmm4
	pand   %xmm5,%xmm4
	psrlw  $0x8,%xmm5
	paddw  %xmm4,%xmm0
	paddw  %xmm5,%xmm1
	packuswb %xmm0,%xmm0
	packuswb %xmm1,%xmm1
	paddw  %xmm4,%xmm2
	paddw  %xmm5,%xmm3
	packuswb %xmm2,%xmm2
	packuswb %xmm3,%xmm3
	paddw  -0x20(%rbp),%xmm4
	paddw  -0x10(%rbp),%xmm5
	packuswb %xmm4,%xmm4
	packuswb %xmm5,%xmm5
	punpcklbw %xmm2,%xmm4
	punpcklbw %xmm5,%xmm0
	punpcklbw %xmm1,%xmm3
	movdqa %xmm4,%xmm6
	movdqa %xmm4,%xmm7
	punpcklwd %xmm0,%xmm4
	punpckhwd %xmm0,%xmm6
	psrldq $0x2,%xmm7
	psrldq $0x2,%xmm0
	movdqa %xmm3,%xmm2
	movdqa %xmm3,%xmm5
	punpcklwd %xmm7,%xmm3
	punpckhwd %xmm7,%xmm2
	psrldq $0x2,%xmm5
	movdqa %xmm0,%xmm1
	punpcklwd %xmm5,%xmm0
	punpckhwd %xmm5,%xmm1
	pshufd $0x4e,%xmm4,%xmm7
	movdqa %xmm0,%xmm5
	punpckldq %xmm3,%xmm4
	punpckldq %xmm7,%xmm0
	punpckhdq %xmm5,%xmm3
	pshufd $0x4e,%xmm6,%xmm7
	movdqa %xmm1,%xmm5
	punpckldq %xmm2,%xmm6
	punpckldq %xmm7,%xmm1
	punpckhdq %xmm5,%xmm2
	punpcklqdq %xmm0,%xmm4
	punpcklqdq %xmm6,%xmm3
	punpcklqdq %xmm2,%xmm1
	cmp    $0x10,%rcx
	jb     42d95 <jsimd_ycc_extbgr_convert_sse2.column_st32>
	test   $0xf,%rdi
	jne    42d68 <jsimd_ycc_extbgr_convert_sse2.out1>
	movntdq %xmm4,(%rdi)
	movntdq %xmm3,0x10(%rdi)
	movntdq %xmm1,0x20(%rdi)
	jmp    42d76 <jsimd_ycc_extbgr_convert_sse2.out0>

0042d68 <jsimd_ycc_extbgr_convert_sse2.out1>:
	movdqu %xmm4,(%rdi)
	movdqu %xmm3,0x10(%rdi)
	movdqu %xmm1,0x20(%rdi)

0042d76 <jsimd_ycc_extbgr_convert_sse2.out0>:
	add    $0x30,%rdi
	sub    $0x10,%rcx
	je     42e1a <jsimd_ycc_extbgr_convert_sse2.nextrow>
	add    $0x10,%rsi
	add    $0x10,%rbx
	add    $0x10,%rdx
	jmpq   42b32 <jsimd_ycc_extbgr_convert_sse2.columnloop>

0042d95 <jsimd_ycc_extbgr_convert_sse2.column_st32>:
	lea    (%rcx,%rcx,2),%rcx
	cmp    $0x20,%rcx
	jb     42db6 <jsimd_ycc_extbgr_convert_sse2.column_st16>
	movdqu %xmm4,(%rdi)
	movdqu %xmm3,0x10(%rdi)
	add    $0x20,%rdi
	movdqa %xmm1,%xmm4
	sub    $0x20,%rcx
	jmp    42dcc <jsimd_ycc_extbgr_convert_sse2.column_st15>

0042db6 <jsimd_ycc_extbgr_convert_sse2.column_st16>:
	cmp    $0x10,%rcx
	jb     42dcc <jsimd_ycc_extbgr_convert_sse2.column_st15>
	movdqu %xmm4,(%rdi)
	add    $0x10,%rdi
	movdqa %xmm3,%xmm4
	sub    $0x10,%rcx

0042dcc <jsimd_ycc_extbgr_convert_sse2.column_st15>:
	cmp    $0x8,%rcx
	jb     42de3 <jsimd_ycc_extbgr_convert_sse2.column_st7>
	movq   %xmm4,(%rdi)
	add    $0x8,%rdi
	sub    $0x8,%rcx
	psrldq $0x8,%xmm4

0042de3 <jsimd_ycc_extbgr_convert_sse2.column_st7>:
	cmp    $0x4,%rcx
	jb     42dfa <jsimd_ycc_extbgr_convert_sse2.column_st3>
	movd   %xmm4,(%rdi)
	add    $0x4,%rdi
	sub    $0x4,%rcx
	psrldq $0x4,%xmm4

0042dfa <jsimd_ycc_extbgr_convert_sse2.column_st3>:
	movd   %xmm4,%eax
	cmp    $0x2,%rcx
	jb     42e13 <jsimd_ycc_extbgr_convert_sse2.column_st1>
	mov    %ax,(%rdi)
	add    $0x2,%rdi
	sub    $0x2,%rcx
	shr    $0x10,%rax

0042e13 <jsimd_ycc_extbgr_convert_sse2.column_st1>:
	test   %rcx,%rcx
	je     42e1a <jsimd_ycc_extbgr_convert_sse2.nextrow>
	mov    %al,(%rdi)

0042e1a <jsimd_ycc_extbgr_convert_sse2.nextrow>:
	pop    %rcx
	pop    %rsi
	pop    %rbx
	pop    %rdx
	pop    %rdi
	pop    %rax
	add    $0x8,%rsi
	add    $0x8,%rbx
	add    $0x8,%rdx
	add    $0x8,%rdi
	dec    %rax
	jg     42b20 <jsimd_ycc_extbgr_convert_sse2.rowloop>
	sfence 

0042e3c <jsimd_ycc_extbgr_convert_sse2.return>:
	pop    %rbx
	pop    %r15
	pop    %r14
	pop    %r13
	pop    %r12
	pop    %r11
	pop    %r10
	mov    %rbp,%rsp
	pop    %rsp
	pop    %rbp
	retq   
	nop

0042e50 <jsimd_ycc_extbgrx_convert_sse2>:
	push   %rbp
	mov    %rsp,%rax
	sub    $0x4,%rsp
	and    $0xfffffffffffffff0,%rsp
	mov    %rax,(%rsp)
	mov    %rsp,%rbp
	lea    -0x20(%rbp),%rsp
	push   %r10
	push   %r11
	push   %r12
	push   %r13
	push   %r14
	push   %r15
	mov    %rdi,%r10
	mov    %rsi,%r11
	mov    %rdx,%r12
	mov    %rcx,%r13
	mov    %r8,%r14
	mov    %r9,%r15
	push   %rbx
	mov    %r10d,%ecx
	test   %rcx,%rcx
	je     43181 <jsimd_ycc_extbgrx_convert_sse2.return>
	push   %rcx
	mov    %r11,%rdi
	mov    %r12d,%ecx
	mov    (%rdi),%rsi
	mov    0x8(%rdi),%rbx
	mov    0x10(%rdi),%rdx
	lea    (%rsi,%rcx,8),%rsi
	lea    (%rbx,%rcx,8),%rbx
	lea    (%rdx,%rcx,8),%rdx
	pop    %rcx
	mov    %r13,%rdi
	mov    %r14d,%eax
	test   %rax,%rax
	jle    43181 <jsimd_ycc_extbgrx_convert_sse2.return>

0042ec0 <jsimd_ycc_extbgrx_convert_sse2.rowloop>:
	push   %rax
	push   %rdi
	push   %rdx
	push   %rbx
	push   %rsi
	push   %rcx
	mov    (%rsi),%rsi
	mov    (%rbx),%rbx
	mov    (%rdx),%rdx
	mov    (%rdi),%rdi

0042ed2 <jsimd_ycc_extbgrx_convert_sse2.columnloop>:
	movdqa (%rbx),%xmm5
	movdqa (%rdx),%xmm1
	pcmpeqw %xmm4,%xmm4
	pcmpeqw %xmm7,%xmm7
	psrlw  $0x8,%xmm4
	psllw  $0x7,%xmm7
	movdqa %xmm4,%xmm0
	pand   %xmm5,%xmm4
	psrlw  $0x8,%xmm5
	pand   %xmm1,%xmm0
	psrlw  $0x8,%xmm1
	paddw  %xmm7,%xmm4
	paddw  %xmm7,%xmm5
	paddw  %xmm7,%xmm0
	paddw  %xmm7,%xmm1
	movdqa %xmm4,%xmm2
	movdqa %xmm5,%xmm3
	paddw  %xmm4,%xmm4
	paddw  %xmm5,%xmm5
	movdqa %xmm0,%xmm6
	movdqa %xmm1,%xmm7
	paddw  %xmm0,%xmm0
	paddw  %xmm1,%xmm1
	pmulhw 0x28d86(%rip),%xmm4        # 6bcc0 <PW_MF0228>
	pmulhw 0x28d7e(%rip),%xmm5        # 6bcc0 <PW_MF0228>
	pmulhw 0x28d66(%rip),%xmm0        # 6bcb0 <PW_F0402>
	pmulhw 0x28d5e(%rip),%xmm1        # 6bcb0 <PW_F0402>
	paddw  0x28d86(%rip),%xmm4        # 6bce0 <PW_ONE>
	paddw  0x28d7e(%rip),%xmm5        # 6bce0 <PW_ONE>
	psraw  $0x1,%xmm4
	psraw  $0x1,%xmm5
	paddw  0x28d6c(%rip),%xmm0        # 6bce0 <PW_ONE>
	paddw  0x28d64(%rip),%xmm1        # 6bce0 <PW_ONE>
	psraw  $0x1,%xmm0
	psraw  $0x1,%xmm1
	paddw  %xmm2,%xmm4
	paddw  %xmm3,%xmm5
	paddw  %xmm2,%xmm4
	paddw  %xmm3,%xmm5
	paddw  %xmm6,%xmm0
	paddw  %xmm7,%xmm1
	movdqa %xmm4,-0x20(%rbp)
	movdqa %xmm5,-0x10(%rbp)
	movdqa %xmm2,%xmm4
	movdqa %xmm3,%xmm5
	punpcklwd %xmm6,%xmm2
	punpckhwd %xmm6,%xmm4
	pmaddwd 0x28d10(%rip),%xmm2        # 6bcd0 <PW_MF0344_F0285>
	pmaddwd 0x28d08(%rip),%xmm4        # 6bcd0 <PW_MF0344_F0285>
	punpcklwd %xmm7,%xmm3
	punpckhwd %xmm7,%xmm5
	pmaddwd 0x28cf8(%rip),%xmm3        # 6bcd0 <PW_MF0344_F0285>
	pmaddwd 0x28cf0(%rip),%xmm5        # 6bcd0 <PW_MF0344_F0285>
	paddd  0x28d08(%rip),%xmm2        # 6bcf0 <PD_ONEHALF>
	paddd  0x28d00(%rip),%xmm4        # 6bcf0 <PD_ONEHALF>
	psrad  $0x10,%xmm2
	psrad  $0x10,%xmm4
	paddd  0x28cee(%rip),%xmm3        # 6bcf0 <PD_ONEHALF>
	paddd  0x28ce6(%rip),%xmm5        # 6bcf0 <PD_ONEHALF>
	psrad  $0x10,%xmm3
	psrad  $0x10,%xmm5
	packssdw %xmm4,%xmm2
	packssdw %xmm5,%xmm3
	psubw  %xmm6,%xmm2
	psubw  %xmm7,%xmm3
	movdqa (%rsi),%xmm5
	pcmpeqw %xmm4,%xmm4
	psrlw  $0x8,%xmm4
	pand   %xmm5,%xmm4
	psrlw  $0x8,%xmm5
	paddw  %xmm4,%xmm0
	paddw  %xmm5,%xmm1
	packuswb %xmm0,%xmm0
	packuswb %xmm1,%xmm1
	paddw  %xmm4,%xmm2
	paddw  %xmm5,%xmm3
	packuswb %xmm2,%xmm2
	packuswb %xmm3,%xmm3
	paddw  -0x20(%rbp),%xmm4
	paddw  -0x10(%rbp),%xmm5
	packuswb %xmm4,%xmm4
	packuswb %xmm5,%xmm5
	pcmpeqb %xmm6,%xmm6
	pcmpeqb %xmm7,%xmm7
	punpcklbw %xmm2,%xmm4
	punpcklbw %xmm6,%xmm0
	punpcklbw %xmm3,%xmm5
	punpcklbw %xmm7,%xmm1
	movdqa %xmm4,%xmm2
	punpcklwd %xmm0,%xmm4
	punpckhwd %xmm0,%xmm2
	movdqa %xmm5,%xmm6
	punpcklwd %xmm1,%xmm5
	punpckhwd %xmm1,%xmm6
	movdqa %xmm4,%xmm3
	punpckldq %xmm5,%xmm4
	punpckhdq %xmm5,%xmm3
	movdqa %xmm2,%xmm7
	punpckldq %xmm6,%xmm2
	punpckhdq %xmm6,%xmm7
	cmp    $0x10,%rcx
	jb     4310a <jsimd_ycc_extbgrx_convert_sse2.column_st32>
	test   $0xf,%rdi
	jne    430d8 <jsimd_ycc_extbgrx_convert_sse2.out1>
	movntdq %xmm4,(%rdi)
	movntdq %xmm3,0x10(%rdi)
	movntdq %xmm2,0x20(%rdi)
	movntdq %xmm7,0x30(%rdi)
	jmp    430eb <jsimd_ycc_extbgrx_convert_sse2.out0>

00430d8 <jsimd_ycc_extbgrx_convert_sse2.out1>:
	movdqu %xmm4,(%rdi)
	movdqu %xmm3,0x10(%rdi)
	movdqu %xmm2,0x20(%rdi)
	movdqu %xmm7,0x30(%rdi)

00430eb <jsimd_ycc_extbgrx_convert_sse2.out0>:
	add    $0x40,%rdi
	sub    $0x10,%rcx
	je     4315f <jsimd_ycc_extbgrx_convert_sse2.nextrow>
	add    $0x10,%rsi
	add    $0x10,%rbx
	add    $0x10,%rdx
	jmpq   42ed2 <jsimd_ycc_extbgrx_convert_sse2.columnloop>

004310a <jsimd_ycc_extbgrx_convert_sse2.column_st32>:
	cmp    $0x8,%rcx
	jb     43129 <jsimd_ycc_extbgrx_convert_sse2.column_st16>
	movdqu %xmm4,(%rdi)
	movdqu %xmm3,0x10(%rdi)
	add    $0x20,%rdi
	movdqa %xmm2,%xmm4
	movdqa %xmm7,%xmm3
	sub    $0x8,%rcx

0043129 <jsimd_ycc_extbgrx_convert_sse2.column_st16>:
	cmp    $0x4,%rcx
	jb     4313f <jsimd_ycc_extbgrx_convert_sse2.column_st15>
	movdqu %xmm4,(%rdi)
	add    $0x10,%rdi
	movdqa %xmm3,%xmm4
	sub    $0x4,%rcx

004313f <jsimd_ycc_extbgrx_convert_sse2.column_st15>:
	cmp    $0x2,%rcx
	jb     43156 <jsimd_ycc_extbgrx_convert_sse2.column_st7>
	movq   %xmm4,(%rdi)
	add    $0x8,%rdi
	sub    $0x2,%rcx
	psrldq $0x8,%xmm4

0043156 <jsimd_ycc_extbgrx_convert_sse2.column_st7>:
	test   %rcx,%rcx
	je     4315f <jsimd_ycc_extbgrx_convert_sse2.nextrow>
	movd   %xmm4,(%rdi)

004315f <jsimd_ycc_extbgrx_convert_sse2.nextrow>:
	pop    %rcx
	pop    %rsi
	pop    %rbx
	pop    %rdx
	pop    %rdi
	pop    %rax
	add    $0x8,%rsi
	add    $0x8,%rbx
	add    $0x8,%rdx
	add    $0x8,%rdi
	dec    %rax
	jg     42ec0 <jsimd_ycc_extbgrx_convert_sse2.rowloop>
	sfence 

0043181 <jsimd_ycc_extbgrx_convert_sse2.return>:
	pop    %rbx
	pop    %r15
	pop    %r14
	pop    %r13
	pop    %r12
	pop    %r11
	pop    %r10
	mov    %rbp,%rsp
	pop    %rsp
	pop    %rbp
	retq   
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop

00431a0 <jsimd_ycc_extxbgr_convert_sse2>:
	push   %rbp
	mov    %rsp,%rax
	sub    $0x4,%rsp
	and    $0xfffffffffffffff0,%rsp
	mov    %rax,(%rsp)
	mov    %rsp,%rbp
	lea    -0x20(%rbp),%rsp
	push   %r10
	push   %r11
	push   %r12
	push   %r13
	push   %r14
	push   %r15
	mov    %rdi,%r10
	mov    %rsi,%r11
	mov    %rdx,%r12
	mov    %rcx,%r13
	mov    %r8,%r14
	mov    %r9,%r15
	push   %rbx
	mov    %r10d,%ecx
	test   %rcx,%rcx
	je     434d1 <jsimd_ycc_extxbgr_convert_sse2.return>
	push   %rcx
	mov    %r11,%rdi
	mov    %r12d,%ecx
	mov    (%rdi),%rsi
	mov    0x8(%rdi),%rbx
	mov    0x10(%rdi),%rdx
	lea    (%rsi,%rcx,8),%rsi
	lea    (%rbx,%rcx,8),%rbx
	lea    (%rdx,%rcx,8),%rdx
	pop    %rcx
	mov    %r13,%rdi
	mov    %r14d,%eax
	test   %rax,%rax
	jle    434d1 <jsimd_ycc_extxbgr_convert_sse2.return>

0043210 <jsimd_ycc_extxbgr_convert_sse2.rowloop>:
	push   %rax
	push   %rdi
	push   %rdx
	push   %rbx
	push   %rsi
	push   %rcx
	mov    (%rsi),%rsi
	mov    (%rbx),%rbx
	mov    (%rdx),%rdx
	mov    (%rdi),%rdi

0043222 <jsimd_ycc_extxbgr_convert_sse2.columnloop>:
	movdqa (%rbx),%xmm5
	movdqa (%rdx),%xmm1
	pcmpeqw %xmm4,%xmm4
	pcmpeqw %xmm7,%xmm7
	psrlw  $0x8,%xmm4
	psllw  $0x7,%xmm7
	movdqa %xmm4,%xmm0
	pand   %xmm5,%xmm4
	psrlw  $0x8,%xmm5
	pand   %xmm1,%xmm0
	psrlw  $0x8,%xmm1
	paddw  %xmm7,%xmm4
	paddw  %xmm7,%xmm5
	paddw  %xmm7,%xmm0
	paddw  %xmm7,%xmm1
	movdqa %xmm4,%xmm2
	movdqa %xmm5,%xmm3
	paddw  %xmm4,%xmm4
	paddw  %xmm5,%xmm5
	movdqa %xmm0,%xmm6
	movdqa %xmm1,%xmm7
	paddw  %xmm0,%xmm0
	paddw  %xmm1,%xmm1
	pmulhw 0x28a36(%rip),%xmm4        # 6bcc0 <PW_MF0228>
	pmulhw 0x28a2e(%rip),%xmm5        # 6bcc0 <PW_MF0228>
	pmulhw 0x28a16(%rip),%xmm0        # 6bcb0 <PW_F0402>
	pmulhw 0x28a0e(%rip),%xmm1        # 6bcb0 <PW_F0402>
	paddw  0x28a36(%rip),%xmm4        # 6bce0 <PW_ONE>
	paddw  0x28a2e(%rip),%xmm5        # 6bce0 <PW_ONE>
	psraw  $0x1,%xmm4
	psraw  $0x1,%xmm5
	paddw  0x28a1c(%rip),%xmm0        # 6bce0 <PW_ONE>
	paddw  0x28a14(%rip),%xmm1        # 6bce0 <PW_ONE>
	psraw  $0x1,%xmm0
	psraw  $0x1,%xmm1
	paddw  %xmm2,%xmm4
	paddw  %xmm3,%xmm5
	paddw  %xmm2,%xmm4
	paddw  %xmm3,%xmm5
	paddw  %xmm6,%xmm0
	paddw  %xmm7,%xmm1
	movdqa %xmm4,-0x20(%rbp)
	movdqa %xmm5,-0x10(%rbp)
	movdqa %xmm2,%xmm4
	movdqa %xmm3,%xmm5
	punpcklwd %xmm6,%xmm2
	punpckhwd %xmm6,%xmm4
	pmaddwd 0x289c0(%rip),%xmm2        # 6bcd0 <PW_MF0344_F0285>
	pmaddwd 0x289b8(%rip),%xmm4        # 6bcd0 <PW_MF0344_F0285>
	punpcklwd %xmm7,%xmm3
	punpckhwd %xmm7,%xmm5
	pmaddwd 0x289a8(%rip),%xmm3        # 6bcd0 <PW_MF0344_F0285>
	pmaddwd 0x289a0(%rip),%xmm5        # 6bcd0 <PW_MF0344_F0285>
	paddd  0x289b8(%rip),%xmm2        # 6bcf0 <PD_ONEHALF>
	paddd  0x289b0(%rip),%xmm4        # 6bcf0 <PD_ONEHALF>
	psrad  $0x10,%xmm2
	psrad  $0x10,%xmm4
	paddd  0x2899e(%rip),%xmm3        # 6bcf0 <PD_ONEHALF>
	paddd  0x28996(%rip),%xmm5        # 6bcf0 <PD_ONEHALF>
	psrad  $0x10,%xmm3
	psrad  $0x10,%xmm5
	packssdw %xmm4,%xmm2
	packssdw %xmm5,%xmm3
	psubw  %xmm6,%xmm2
	psubw  %xmm7,%xmm3
	movdqa (%rsi),%xmm5
	pcmpeqw %xmm4,%xmm4
	psrlw  $0x8,%xmm4
	pand   %xmm5,%xmm4
	psrlw  $0x8,%xmm5
	paddw  %xmm4,%xmm0
	paddw  %xmm5,%xmm1
	packuswb %xmm0,%xmm0
	packuswb %xmm1,%xmm1
	paddw  %xmm4,%xmm2
	paddw  %xmm5,%xmm3
	packuswb %xmm2,%xmm2
	packuswb %xmm3,%xmm3
	paddw  -0x20(%rbp),%xmm4
	paddw  -0x10(%rbp),%xmm5
	packuswb %xmm4,%xmm4
	packuswb %xmm5,%xmm5
	pcmpeqb %xmm6,%xmm6
	pcmpeqb %xmm7,%xmm7
	punpcklbw %xmm4,%xmm6
	punpcklbw %xmm0,%xmm2
	punpcklbw %xmm5,%xmm7
	punpcklbw %xmm1,%xmm3
	movdqa %xmm6,%xmm4
	punpcklwd %xmm2,%xmm6
	punpckhwd %xmm2,%xmm4
	movdqa %xmm7,%xmm0
	punpcklwd %xmm3,%xmm7
	punpckhwd %xmm3,%xmm0
	movdqa %xmm6,%xmm5
	punpckldq %xmm7,%xmm6
	punpckhdq %xmm7,%xmm5
	movdqa %xmm4,%xmm1
	punpckldq %xmm0,%xmm4
	punpckhdq %xmm0,%xmm1
	cmp    $0x10,%rcx
	jb     4345a <jsimd_ycc_extxbgr_convert_sse2.column_st32>
	test   $0xf,%rdi
	jne    43428 <jsimd_ycc_extxbgr_convert_sse2.out1>
	movntdq %xmm6,(%rdi)
	movntdq %xmm5,0x10(%rdi)
	movntdq %xmm4,0x20(%rdi)
	movntdq %xmm1,0x30(%rdi)
	jmp    4343b <jsimd_ycc_extxbgr_convert_sse2.out0>

0043428 <jsimd_ycc_extxbgr_convert_sse2.out1>:
	movdqu %xmm6,(%rdi)
	movdqu %xmm5,0x10(%rdi)
	movdqu %xmm4,0x20(%rdi)
	movdqu %xmm1,0x30(%rdi)

004343b <jsimd_ycc_extxbgr_convert_sse2.out0>:
	add    $0x40,%rdi
	sub    $0x10,%rcx
	je     434af <jsimd_ycc_extxbgr_convert_sse2.nextrow>
	add    $0x10,%rsi
	add    $0x10,%rbx
	add    $0x10,%rdx
	jmpq   43222 <jsimd_ycc_extxbgr_convert_sse2.columnloop>

004345a <jsimd_ycc_extxbgr_convert_sse2.column_st32>:
	cmp    $0x8,%rcx
	jb     43479 <jsimd_ycc_extxbgr_convert_sse2.column_st16>
	movdqu %xmm6,(%rdi)
	movdqu %xmm5,0x10(%rdi)
	add    $0x20,%rdi
	movdqa %xmm4,%xmm6
	movdqa %xmm1,%xmm5
	sub    $0x8,%rcx

0043479 <jsimd_ycc_extxbgr_convert_sse2.column_st16>:
	cmp    $0x4,%rcx
	jb     4348f <jsimd_ycc_extxbgr_convert_sse2.column_st15>
	movdqu %xmm6,(%rdi)
	add    $0x10,%rdi
	movdqa %xmm5,%xmm6
	sub    $0x4,%rcx

004348f <jsimd_ycc_extxbgr_convert_sse2.column_st15>:
	cmp    $0x2,%rcx
	jb     434a6 <jsimd_ycc_extxbgr_convert_sse2.column_st7>
	movq   %xmm6,(%rdi)
	add    $0x8,%rdi
	sub    $0x2,%rcx
	psrldq $0x8,%xmm6

00434a6 <jsimd_ycc_extxbgr_convert_sse2.column_st7>:
	test   %rcx,%rcx
	je     434af <jsimd_ycc_extxbgr_convert_sse2.nextrow>
	movd   %xmm6,(%rdi)

00434af <jsimd_ycc_extxbgr_convert_sse2.nextrow>:
	pop    %rcx
	pop    %rsi
	pop    %rbx
	pop    %rdx
	pop    %rdi
	pop    %rax
	add    $0x8,%rsi
	add    $0x8,%rbx
	add    $0x8,%rdx
	add    $0x8,%rdi
	dec    %rax
	jg     43210 <jsimd_ycc_extxbgr_convert_sse2.rowloop>
	sfence 

00434d1 <jsimd_ycc_extxbgr_convert_sse2.return>:
	pop    %rbx
	pop    %r15
	pop    %r14
	pop    %r13
	pop    %r12
	pop    %r11
	pop    %r10
	mov    %rbp,%rsp
	pop    %rsp
	pop    %rbp
	retq   
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop

00434f0 <jsimd_ycc_extxrgb_convert_sse2>:
	push   %rbp
	mov    %rsp,%rax
	sub    $0x4,%rsp
	and    $0xfffffffffffffff0,%rsp
	mov    %rax,(%rsp)
	mov    %rsp,%rbp
	lea    -0x20(%rbp),%rsp
	push   %r10
	push   %r11
	push   %r12
	push   %r13
	push   %r14
	push   %r15
	mov    %rdi,%r10
	mov    %rsi,%r11
	mov    %rdx,%r12
	mov    %rcx,%r13
	mov    %r8,%r14
	mov    %r9,%r15
	push   %rbx
	mov    %r10d,%ecx
	test   %rcx,%rcx
	je     43821 <jsimd_ycc_extxrgb_convert_sse2.return>
	push   %rcx
	mov    %r11,%rdi
	mov    %r12d,%ecx
	mov    (%rdi),%rsi
	mov    0x8(%rdi),%rbx
	mov    0x10(%rdi),%rdx
	lea    (%rsi,%rcx,8),%rsi
	lea    (%rbx,%rcx,8),%rbx
	lea    (%rdx,%rcx,8),%rdx
	pop    %rcx
	mov    %r13,%rdi
	mov    %r14d,%eax
	test   %rax,%rax
	jle    43821 <jsimd_ycc_extxrgb_convert_sse2.return>

0043560 <jsimd_ycc_extxrgb_convert_sse2.rowloop>:
	push   %rax
	push   %rdi
	push   %rdx
	push   %rbx
	push   %rsi
	push   %rcx
	mov    (%rsi),%rsi
	mov    (%rbx),%rbx
	mov    (%rdx),%rdx
	mov    (%rdi),%rdi

0043572 <jsimd_ycc_extxrgb_convert_sse2.columnloop>:
	movdqa (%rbx),%xmm5
	movdqa (%rdx),%xmm1
	pcmpeqw %xmm4,%xmm4
	pcmpeqw %xmm7,%xmm7
	psrlw  $0x8,%xmm4
	psllw  $0x7,%xmm7
	movdqa %xmm4,%xmm0
	pand   %xmm5,%xmm4
	psrlw  $0x8,%xmm5
	pand   %xmm1,%xmm0
	psrlw  $0x8,%xmm1
	paddw  %xmm7,%xmm4
	paddw  %xmm7,%xmm5
	paddw  %xmm7,%xmm0
	paddw  %xmm7,%xmm1
	movdqa %xmm4,%xmm2
	movdqa %xmm5,%xmm3
	paddw  %xmm4,%xmm4
	paddw  %xmm5,%xmm5
	movdqa %xmm0,%xmm6
	movdqa %xmm1,%xmm7
	paddw  %xmm0,%xmm0
	paddw  %xmm1,%xmm1
	pmulhw 0x286e6(%rip),%xmm4        # 6bcc0 <PW_MF0228>
	pmulhw 0x286de(%rip),%xmm5        # 6bcc0 <PW_MF0228>
	pmulhw 0x286c6(%rip),%xmm0        # 6bcb0 <PW_F0402>
	pmulhw 0x286be(%rip),%xmm1        # 6bcb0 <PW_F0402>
	paddw  0x286e6(%rip),%xmm4        # 6bce0 <PW_ONE>
	paddw  0x286de(%rip),%xmm5        # 6bce0 <PW_ONE>
	psraw  $0x1,%xmm4
	psraw  $0x1,%xmm5
	paddw  0x286cc(%rip),%xmm0        # 6bce0 <PW_ONE>
	paddw  0x286c4(%rip),%xmm1        # 6bce0 <PW_ONE>
	psraw  $0x1,%xmm0
	psraw  $0x1,%xmm1
	paddw  %xmm2,%xmm4
	paddw  %xmm3,%xmm5
	paddw  %xmm2,%xmm4
	paddw  %xmm3,%xmm5
	paddw  %xmm6,%xmm0
	paddw  %xmm7,%xmm1
	movdqa %xmm4,-0x20(%rbp)
	movdqa %xmm5,-0x10(%rbp)
	movdqa %xmm2,%xmm4
	movdqa %xmm3,%xmm5
	punpcklwd %xmm6,%xmm2
	punpckhwd %xmm6,%xmm4
	pmaddwd 0x28670(%rip),%xmm2        # 6bcd0 <PW_MF0344_F0285>
	pmaddwd 0x28668(%rip),%xmm4        # 6bcd0 <PW_MF0344_F0285>
	punpcklwd %xmm7,%xmm3
	punpckhwd %xmm7,%xmm5
	pmaddwd 0x28658(%rip),%xmm3        # 6bcd0 <PW_MF0344_F0285>
	pmaddwd 0x28650(%rip),%xmm5        # 6bcd0 <PW_MF0344_F0285>
	paddd  0x28668(%rip),%xmm2        # 6bcf0 <PD_ONEHALF>
	paddd  0x28660(%rip),%xmm4        # 6bcf0 <PD_ONEHALF>
	psrad  $0x10,%xmm2
	psrad  $0x10,%xmm4
	paddd  0x2864e(%rip),%xmm3        # 6bcf0 <PD_ONEHALF>
	paddd  0x28646(%rip),%xmm5        # 6bcf0 <PD_ONEHALF>
	psrad  $0x10,%xmm3
	psrad  $0x10,%xmm5
	packssdw %xmm4,%xmm2
	packssdw %xmm5,%xmm3
	psubw  %xmm6,%xmm2
	psubw  %xmm7,%xmm3
	movdqa (%rsi),%xmm5
	pcmpeqw %xmm4,%xmm4
	psrlw  $0x8,%xmm4
	pand   %xmm5,%xmm4
	psrlw  $0x8,%xmm5
	paddw  %xmm4,%xmm0
	paddw  %xmm5,%xmm1
	packuswb %xmm0,%xmm0
	packuswb %xmm1,%xmm1
	paddw  %xmm4,%xmm2
	paddw  %xmm5,%xmm3
	packuswb %xmm2,%xmm2
	packuswb %xmm3,%xmm3
	paddw  -0x20(%rbp),%xmm4
	paddw  -0x10(%rbp),%xmm5
	packuswb %xmm4,%xmm4
	packuswb %xmm5,%xmm5
	pcmpeqb %xmm6,%xmm6
	pcmpeqb %xmm7,%xmm7
	punpcklbw %xmm0,%xmm6
	punpcklbw %xmm4,%xmm2
	punpcklbw %xmm1,%xmm7
	punpcklbw %xmm5,%xmm3
	movdqa %xmm6,%xmm0
	punpcklwd %xmm2,%xmm6
	punpckhwd %xmm2,%xmm0
	movdqa %xmm7,%xmm4
	punpcklwd %xmm3,%xmm7
	punpckhwd %xmm3,%xmm4
	movdqa %xmm6,%xmm1
	punpckldq %xmm7,%xmm6
	punpckhdq %xmm7,%xmm1
	movdqa %xmm0,%xmm5
	punpckldq %xmm4,%xmm0
	punpckhdq %xmm4,%xmm5
	cmp    $0x10,%rcx
	jb     437aa <jsimd_ycc_extxrgb_convert_sse2.column_st32>
	test   $0xf,%rdi
	jne    43778 <jsimd_ycc_extxrgb_convert_sse2.out1>
	movntdq %xmm6,(%rdi)
	movntdq %xmm1,0x10(%rdi)
	movntdq %xmm0,0x20(%rdi)
	movntdq %xmm5,0x30(%rdi)
	jmp    4378b <jsimd_ycc_extxrgb_convert_sse2.out0>

0043778 <jsimd_ycc_extxrgb_convert_sse2.out1>:
	movdqu %xmm6,(%rdi)
	movdqu %xmm1,0x10(%rdi)
	movdqu %xmm0,0x20(%rdi)
	movdqu %xmm5,0x30(%rdi)

004378b <jsimd_ycc_extxrgb_convert_sse2.out0>:
	add    $0x40,%rdi
	sub    $0x10,%rcx
	je     437ff <jsimd_ycc_extxrgb_convert_sse2.nextrow>
	add    $0x10,%rsi
	add    $0x10,%rbx
	add    $0x10,%rdx
	jmpq   43572 <jsimd_ycc_extxrgb_convert_sse2.columnloop>

00437aa <jsimd_ycc_extxrgb_convert_sse2.column_st32>:
	cmp    $0x8,%rcx
	jb     437c9 <jsimd_ycc_extxrgb_convert_sse2.column_st16>
	movdqu %xmm6,(%rdi)
	movdqu %xmm1,0x10(%rdi)
	add    $0x20,%rdi
	movdqa %xmm0,%xmm6
	movdqa %xmm5,%xmm1
	sub    $0x8,%rcx

00437c9 <jsimd_ycc_extxrgb_convert_sse2.column_st16>:
	cmp    $0x4,%rcx
	jb     437df <jsimd_ycc_extxrgb_convert_sse2.column_st15>
	movdqu %xmm6,(%rdi)
	add    $0x10,%rdi
	movdqa %xmm1,%xmm6
	sub    $0x4,%rcx

00437df <jsimd_ycc_extxrgb_convert_sse2.column_st15>:
	cmp    $0x2,%rcx
	jb     437f6 <jsimd_ycc_extxrgb_convert_sse2.column_st7>
	movq   %xmm6,(%rdi)
	add    $0x8,%rdi
	sub    $0x2,%rcx
	psrldq $0x8,%xmm6

00437f6 <jsimd_ycc_extxrgb_convert_sse2.column_st7>:
	test   %rcx,%rcx
	je     437ff <jsimd_ycc_extxrgb_convert_sse2.nextrow>
	movd   %xmm6,(%rdi)

00437ff <jsimd_ycc_extxrgb_convert_sse2.nextrow>:
	pop    %rcx
	pop    %rsi
	pop    %rbx
	pop    %rdx
	pop    %rdi
	pop    %rax
	add    $0x8,%rsi
	add    $0x8,%rbx
	add    $0x8,%rdx
	add    $0x8,%rdi
	dec    %rax
	jg     43560 <jsimd_ycc_extxrgb_convert_sse2.rowloop>
	sfence 

0043821 <jsimd_ycc_extxrgb_convert_sse2.return>:
	pop    %rbx
	pop    %r15
	pop    %r14
	pop    %r13
	pop    %r12
	pop    %r11
	pop    %r10
	mov    %rbp,%rsp
	pop    %rsp
	pop    %rbp
	retq   
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop

0043840 <jsimd_h2v1_merged_upsample_sse2>:
	push   %rbp
	mov    %rsp,%rax
	sub    $0x4,%rsp
	and    $0xfffffffffffffff0,%rsp
	mov    %rax,(%rsp)
	mov    %rsp,%rbp
	lea    -0x30(%rbp),%rsp
	push   %r10
	push   %r11
	push   %r12
	push   %r13
	push   %r14
	push   %r15
	mov    %rdi,%r10
	mov    %rsi,%r11
	mov    %rdx,%r12
	mov    %rcx,%r13
	mov    %r8,%r14
	mov    %r9,%r15
	push   %rbx
	mov    %r10d,%ecx
	test   %rcx,%rcx
	je     43bb9 <jsimd_h2v1_merged_upsample_sse2.return>
	push   %rcx
	mov    %r11,%rdi
	mov    %r12d,%ecx
	mov    (%rdi),%rsi
	mov    0x8(%rdi),%rbx
	mov    0x10(%rdi),%rdx
	mov    %r13,%rdi
	mov    (%rsi,%rcx,8),%rsi
	mov    (%rbx,%rcx,8),%rbx
	mov    (%rdx,%rcx,8),%rdx
	mov    (%rdi),%rdi
	pop    %rcx

00438a7 <jsimd_h2v1_merged_upsample_sse2.columnloop>:
	movdqa (%rbx),%xmm6
	movdqa (%rdx),%xmm7
	pxor   %xmm1,%xmm1
	pcmpeqw %xmm3,%xmm3
	psllw  $0x7,%xmm3
	movdqa %xmm6,%xmm4
	punpckhbw %xmm1,%xmm6
	punpcklbw %xmm1,%xmm4
	movdqa %xmm7,%xmm0
	punpckhbw %xmm1,%xmm7
	punpcklbw %xmm1,%xmm0
	paddw  %xmm3,%xmm6
	paddw  %xmm3,%xmm4
	paddw  %xmm3,%xmm7
	paddw  %xmm3,%xmm0
	movdqa %xmm6,%xmm5
	movdqa %xmm4,%xmm2
	paddw  %xmm6,%xmm6
	paddw  %xmm4,%xmm4
	movdqa %xmm7,%xmm1
	movdqa %xmm0,%xmm3
	paddw  %xmm7,%xmm7
	paddw  %xmm0,%xmm0
	pmulhw 0x28404(%rip),%xmm6        # 6bd10 <PW_MF0228>
	pmulhw 0x283fc(%rip),%xmm4        # 6bd10 <PW_MF0228>
	pmulhw 0x283e4(%rip),%xmm7        # 6bd00 <PW_F0402>
	pmulhw 0x283dc(%rip),%xmm0        # 6bd00 <PW_F0402>
	paddw  0x28404(%rip),%xmm6        # 6bd30 <PW_ONE>
	paddw  0x283fc(%rip),%xmm4        # 6bd30 <PW_ONE>
	psraw  $0x1,%xmm6
	psraw  $0x1,%xmm4
	paddw  0x283ea(%rip),%xmm7        # 6bd30 <PW_ONE>
	paddw  0x283e2(%rip),%xmm0        # 6bd30 <PW_ONE>
	psraw  $0x1,%xmm7
	psraw  $0x1,%xmm0
	paddw  %xmm5,%xmm6
	paddw  %xmm2,%xmm4
	paddw  %xmm5,%xmm6
	paddw  %xmm2,%xmm4
	paddw  %xmm1,%xmm7
	paddw  %xmm3,%xmm0
	movdqa %xmm6,-0x30(%rbp)
	movdqa %xmm7,-0x20(%rbp)
	movdqa %xmm5,%xmm6
	movdqa %xmm2,%xmm7
	punpcklwd %xmm1,%xmm5
	punpckhwd %xmm1,%xmm6
	pmaddwd 0x2838e(%rip),%xmm5        # 6bd20 <PW_MF0344_F0285>
	pmaddwd 0x28386(%rip),%xmm6        # 6bd20 <PW_MF0344_F0285>
	punpcklwd %xmm3,%xmm2
	punpckhwd %xmm3,%xmm7
	pmaddwd 0x28376(%rip),%xmm2        # 6bd20 <PW_MF0344_F0285>
	pmaddwd 0x2836e(%rip),%xmm7        # 6bd20 <PW_MF0344_F0285>
	paddd  0x28386(%rip),%xmm5        # 6bd40 <PD_ONEHALF>
	paddd  0x2837e(%rip),%xmm6        # 6bd40 <PD_ONEHALF>
	psrad  $0x10,%xmm5
	psrad  $0x10,%xmm6
	paddd  0x2836c(%rip),%xmm2        # 6bd40 <PD_ONEHALF>
	paddd  0x28364(%rip),%xmm7        # 6bd40 <PD_ONEHALF>
	psrad  $0x10,%xmm2
	psrad  $0x10,%xmm7
	packssdw %xmm6,%xmm5
	packssdw %xmm7,%xmm2
	psubw  %xmm1,%xmm5
	psubw  %xmm3,%xmm2
	movdqa %xmm5,-0x10(%rbp)
	mov    $0x2,%al
	jmp    43a0e <jsimd_h2v1_merged_upsample_sse2.Yloop_1st>

00439ff <jsimd_h2v1_merged_upsample_sse2.Yloop_2nd>:
	movdqa -0x20(%rbp),%xmm0
	movdqa -0x10(%rbp),%xmm2
	movdqa -0x30(%rbp),%xmm4

0043a0e <jsimd_h2v1_merged_upsample_sse2.Yloop_1st>:
	movdqa (%rsi),%xmm7
	pcmpeqw %xmm6,%xmm6
	psrlw  $0x8,%xmm6
	pand   %xmm7,%xmm6
	psrlw  $0x8,%xmm7
	movdqa %xmm0,%xmm1
	movdqa %xmm2,%xmm3
	movdqa %xmm4,%xmm5
	paddw  %xmm6,%xmm0
	paddw  %xmm7,%xmm1
	packuswb %xmm0,%xmm0
	packuswb %xmm1,%xmm1
	paddw  %xmm6,%xmm2
	paddw  %xmm7,%xmm3
	packuswb %xmm2,%xmm2
	packuswb %xmm3,%xmm3
	paddw  %xmm6,%xmm4
	paddw  %xmm7,%xmm5
	packuswb %xmm4,%xmm4
	packuswb %xmm5,%xmm5
	punpcklbw %xmm2,%xmm0
	punpcklbw %xmm1,%xmm4
	punpcklbw %xmm5,%xmm3
	movdqa %xmm0,%xmm6
	movdqa %xmm0,%xmm7
	punpcklwd %xmm4,%xmm0
	punpckhwd %xmm4,%xmm6
	psrldq $0x2,%xmm7
	psrldq $0x2,%xmm4
	movdqa %xmm3,%xmm2
	movdqa %xmm3,%xmm1
	punpcklwd %xmm7,%xmm3
	punpckhwd %xmm7,%xmm2
	psrldq $0x2,%xmm1
	movdqa %xmm4,%xmm5
	punpcklwd %xmm1,%xmm4
	punpckhwd %xmm1,%xmm5
	pshufd $0x4e,%xmm0,%xmm7
	movdqa %xmm4,%xmm1
	punpckldq %xmm3,%xmm0
	punpckldq %xmm7,%xmm4
	punpckhdq %xmm1,%xmm3
	pshufd $0x4e,%xmm6,%xmm7
	movdqa %xmm5,%xmm1
	punpckldq %xmm2,%xmm6
	punpckldq %xmm7,%xmm5
	punpckhdq %xmm1,%xmm2
	punpcklqdq %xmm4,%xmm0
	punpcklqdq %xmm6,%xmm3
	punpcklqdq %xmm2,%xmm5
	cmp    $0x10,%rcx
	jb     43b31 <jsimd_h2v1_merged_upsample_sse2.column_st32>
	test   $0xf,%rdi
	jne    43afc <jsimd_h2v1_merged_upsample_sse2.out1>
	movntdq %xmm0,(%rdi)
	movntdq %xmm3,0x10(%rdi)
	movntdq %xmm5,0x20(%rdi)
	jmp    43b0a <jsimd_h2v1_merged_upsample_sse2.out0>

0043afc <jsimd_h2v1_merged_upsample_sse2.out1>:
	movdqu %xmm0,(%rdi)
	movdqu %xmm3,0x10(%rdi)
	movdqu %xmm5,0x20(%rdi)

0043b0a <jsimd_h2v1_merged_upsample_sse2.out0>:
	add    $0x30,%rdi
	sub    $0x10,%rcx
	je     43bb6 <jsimd_h2v1_merged_upsample_sse2.endcolumn>
	add    $0x10,%rsi
	dec    %al
	jne    439ff <jsimd_h2v1_merged_upsample_sse2.Yloop_2nd>
	add    $0x10,%rbx
	add    $0x10,%rdx
	jmpq   438a7 <jsimd_h2v1_merged_upsample_sse2.columnloop>

0043b31 <jsimd_h2v1_merged_upsample_sse2.column_st32>:
	lea    (%rcx,%rcx,2),%rcx
	cmp    $0x20,%rcx
	jb     43b52 <jsimd_h2v1_merged_upsample_sse2.column_st16>
	movdqu %xmm0,(%rdi)
	movdqu %xmm3,0x10(%rdi)
	add    $0x20,%rdi
	movdqa %xmm5,%xmm0
	sub    $0x20,%rcx
	jmp    43b68 <jsimd_h2v1_merged_upsample_sse2.column_st15>

0043b52 <jsimd_h2v1_merged_upsample_sse2.column_st16>:
	cmp    $0x10,%rcx
	jb     43b68 <jsimd_h2v1_merged_upsample_sse2.column_st15>
	movdqu %xmm0,(%rdi)
	add    $0x10,%rdi
	movdqa %xmm3,%xmm0
	sub    $0x10,%rcx

0043b68 <jsimd_h2v1_merged_upsample_sse2.column_st15>:
	cmp    $0x8,%rcx
	jb     43b7f <jsimd_h2v1_merged_upsample_sse2.column_st7>
	movq   %xmm0,(%rdi)
	add    $0x8,%rdi
	sub    $0x8,%rcx
	psrldq $0x8,%xmm0

0043b7f <jsimd_h2v1_merged_upsample_sse2.column_st7>:
	cmp    $0x4,%rcx
	jb     43b96 <jsimd_h2v1_merged_upsample_sse2.column_st3>
	movd   %xmm0,(%rdi)
	add    $0x4,%rdi
	sub    $0x4,%rcx
	psrldq $0x4,%xmm0

0043b96 <jsimd_h2v1_merged_upsample_sse2.column_st3>:
	movd   %xmm0,%eax
	cmp    $0x2,%rcx
	jb     43baf <jsimd_h2v1_merged_upsample_sse2.column_st1>
	mov    %ax,(%rdi)
	add    $0x2,%rdi
	sub    $0x2,%rcx
	shr    $0x10,%rax

0043baf <jsimd_h2v1_merged_upsample_sse2.column_st1>:
	test   %rcx,%rcx
	je     43bb6 <jsimd_h2v1_merged_upsample_sse2.endcolumn>
	mov    %al,(%rdi)

0043bb6 <jsimd_h2v1_merged_upsample_sse2.endcolumn>:
	sfence 

0043bb9 <jsimd_h2v1_merged_upsample_sse2.return>:
	pop    %rbx
	pop    %r15
	pop    %r14
	pop    %r13
	pop    %r12
	pop    %r11
	pop    %r10
	mov    %rbp,%rsp
	pop    %rsp
	pop    %rbp
	retq   
	nop
	nop
	nop
	nop

0043bd0 <jsimd_h2v2_merged_upsample_sse2>:
	push   %rbp
	mov    %rsp,%rax
	mov    %rsp,%rbp
	push   %r10
	push   %r11
	push   %r12
	push   %r13
	push   %r14
	push   %r15
	mov    %rdi,%r10
	mov    %rsi,%r11
	mov    %rdx,%r12
	mov    %rcx,%r13
	mov    %r8,%r14
	mov    %r9,%r15
	push   %rbx
	mov    %r10d,%eax
	mov    %r11,%rdi
	mov    %r12d,%ecx
	mov    (%rdi),%rsi
	mov    0x8(%rdi),%rbx
	mov    0x10(%rdi),%rdx
	mov    %r13,%rdi
	lea    (%rsi,%rcx,8),%rsi
	push   %rdx
	push   %rbx
	push   %rsi
	mov    %rsp,%rbx
	push   %rdi
	push   %rcx
	push   %rax
	mov    %rcx,%rdx
	mov    %rdi,%rcx
	mov    %rax,%rdi
	mov    %rbx,%rsi
	callq  43840 <jsimd_h2v1_merged_upsample_sse2>
	pop    %rax
	pop    %rcx
	pop    %rdi
	pop    %rsi
	pop    %rbx
	pop    %rdx
	add    $0x8,%rdi
	add    $0x8,%rsi
	push   %rdx
	push   %rbx
	push   %rsi
	mov    %rsp,%rbx
	push   %rdi
	push   %rcx
	push   %rax
	mov    %rcx,%rdx
	mov    %rdi,%rcx
	mov    %rax,%rdi
	mov    %rbx,%rsi
	callq  43840 <jsimd_h2v1_merged_upsample_sse2>
	pop    %rax
	pop    %rcx
	pop    %rdi
	pop    %rsi
	pop    %rbx
	pop    %rdx
	pop    %rbx
	pop    %r15
	pop    %r14
	pop    %r13
	pop    %r12
	pop    %r11
	pop    %r10
	pop    %rbp
	retq   
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop

0043c70 <jsimd_h2v1_extrgb_merged_upsample_sse2>:
	push   %rbp
	mov    %rsp,%rax
	sub    $0x4,%rsp
	and    $0xfffffffffffffff0,%rsp
	mov    %rax,(%rsp)
	mov    %rsp,%rbp
	lea    -0x30(%rbp),%rsp
	push   %r10
	push   %r11
	push   %r12
	push   %r13
	push   %r14
	push   %r15
	mov    %rdi,%r10
	mov    %rsi,%r11
	mov    %rdx,%r12
	mov    %rcx,%r13
	mov    %r8,%r14
	mov    %r9,%r15
	push   %rbx
	mov    %r10d,%ecx
	test   %rcx,%rcx
	je     43fe9 <jsimd_h2v1_extrgb_merged_upsample_sse2.return>
	push   %rcx
	mov    %r11,%rdi
	mov    %r12d,%ecx
	mov    (%rdi),%rsi
	mov    0x8(%rdi),%rbx
	mov    0x10(%rdi),%rdx
	mov    %r13,%rdi
	mov    (%rsi,%rcx,8),%rsi
	mov    (%rbx,%rcx,8),%rbx
	mov    (%rdx,%rcx,8),%rdx
	mov    (%rdi),%rdi
	pop    %rcx

0043cd7 <jsimd_h2v1_extrgb_merged_upsample_sse2.columnloop>:
	movdqa (%rbx),%xmm6
	movdqa (%rdx),%xmm7
	pxor   %xmm1,%xmm1
	pcmpeqw %xmm3,%xmm3
	psllw  $0x7,%xmm3
	movdqa %xmm6,%xmm4
	punpckhbw %xmm1,%xmm6
	punpcklbw %xmm1,%xmm4
	movdqa %xmm7,%xmm0
	punpckhbw %xmm1,%xmm7
	punpcklbw %xmm1,%xmm0
	paddw  %xmm3,%xmm6
	paddw  %xmm3,%xmm4
	paddw  %xmm3,%xmm7
	paddw  %xmm3,%xmm0
	movdqa %xmm6,%xmm5
	movdqa %xmm4,%xmm2
	paddw  %xmm6,%xmm6
	paddw  %xmm4,%xmm4
	movdqa %xmm7,%xmm1
	movdqa %xmm0,%xmm3
	paddw  %xmm7,%xmm7
	paddw  %xmm0,%xmm0
	pmulhw 0x27fd4(%rip),%xmm6        # 6bd10 <PW_MF0228>
	pmulhw 0x27fcc(%rip),%xmm4        # 6bd10 <PW_MF0228>
	pmulhw 0x27fb4(%rip),%xmm7        # 6bd00 <PW_F0402>
	pmulhw 0x27fac(%rip),%xmm0        # 6bd00 <PW_F0402>
	paddw  0x27fd4(%rip),%xmm6        # 6bd30 <PW_ONE>
	paddw  0x27fcc(%rip),%xmm4        # 6bd30 <PW_ONE>
	psraw  $0x1,%xmm6
	psraw  $0x1,%xmm4
	paddw  0x27fba(%rip),%xmm7        # 6bd30 <PW_ONE>
	paddw  0x27fb2(%rip),%xmm0        # 6bd30 <PW_ONE>
	psraw  $0x1,%xmm7
	psraw  $0x1,%xmm0
	paddw  %xmm5,%xmm6
	paddw  %xmm2,%xmm4
	paddw  %xmm5,%xmm6
	paddw  %xmm2,%xmm4
	paddw  %xmm1,%xmm7
	paddw  %xmm3,%xmm0
	movdqa %xmm6,-0x30(%rbp)
	movdqa %xmm7,-0x20(%rbp)
	movdqa %xmm5,%xmm6
	movdqa %xmm2,%xmm7
	punpcklwd %xmm1,%xmm5
	punpckhwd %xmm1,%xmm6
	pmaddwd 0x27f5e(%rip),%xmm5        # 6bd20 <PW_MF0344_F0285>
	pmaddwd 0x27f56(%rip),%xmm6        # 6bd20 <PW_MF0344_F0285>
	punpcklwd %xmm3,%xmm2
	punpckhwd %xmm3,%xmm7
	pmaddwd 0x27f46(%rip),%xmm2        # 6bd20 <PW_MF0344_F0285>
	pmaddwd 0x27f3e(%rip),%xmm7        # 6bd20 <PW_MF0344_F0285>
	paddd  0x27f56(%rip),%xmm5        # 6bd40 <PD_ONEHALF>
	paddd  0x27f4e(%rip),%xmm6        # 6bd40 <PD_ONEHALF>
	psrad  $0x10,%xmm5
	psrad  $0x10,%xmm6
	paddd  0x27f3c(%rip),%xmm2        # 6bd40 <PD_ONEHALF>
	paddd  0x27f34(%rip),%xmm7        # 6bd40 <PD_ONEHALF>
	psrad  $0x10,%xmm2
	psrad  $0x10,%xmm7
	packssdw %xmm6,%xmm5
	packssdw %xmm7,%xmm2
	psubw  %xmm1,%xmm5
	psubw  %xmm3,%xmm2
	movdqa %xmm5,-0x10(%rbp)
	mov    $0x2,%al
	jmp    43e3e <jsimd_h2v1_extrgb_merged_upsample_sse2.Yloop_1st>

0043e2f <jsimd_h2v1_extrgb_merged_upsample_sse2.Yloop_2nd>:
	movdqa -0x20(%rbp),%xmm0
	movdqa -0x10(%rbp),%xmm2
	movdqa -0x30(%rbp),%xmm4

0043e3e <jsimd_h2v1_extrgb_merged_upsample_sse2.Yloop_1st>:
	movdqa (%rsi),%xmm7
	pcmpeqw %xmm6,%xmm6
	psrlw  $0x8,%xmm6
	pand   %xmm7,%xmm6
	psrlw  $0x8,%xmm7
	movdqa %xmm0,%xmm1
	movdqa %xmm2,%xmm3
	movdqa %xmm4,%xmm5
	paddw  %xmm6,%xmm0
	paddw  %xmm7,%xmm1
	packuswb %xmm0,%xmm0
	packuswb %xmm1,%xmm1
	paddw  %xmm6,%xmm2
	paddw  %xmm7,%xmm3
	packuswb %xmm2,%xmm2
	packuswb %xmm3,%xmm3
	paddw  %xmm6,%xmm4
	paddw  %xmm7,%xmm5
	packuswb %xmm4,%xmm4
	packuswb %xmm5,%xmm5
	punpcklbw %xmm2,%xmm0
	punpcklbw %xmm1,%xmm4
	punpcklbw %xmm5,%xmm3
	movdqa %xmm0,%xmm6
	movdqa %xmm0,%xmm7
	punpcklwd %xmm4,%xmm0
	punpckhwd %xmm4,%xmm6
	psrldq $0x2,%xmm7
	psrldq $0x2,%xmm4
	movdqa %xmm3,%xmm2
	movdqa %xmm3,%xmm1
	punpcklwd %xmm7,%xmm3
	punpckhwd %xmm7,%xmm2
	psrldq $0x2,%xmm1
	movdqa %xmm4,%xmm5
	punpcklwd %xmm1,%xmm4
	punpckhwd %xmm1,%xmm5
	pshufd $0x4e,%xmm0,%xmm7
	movdqa %xmm4,%xmm1
	punpckldq %xmm3,%xmm0
	punpckldq %xmm7,%xmm4
	punpckhdq %xmm1,%xmm3
	pshufd $0x4e,%xmm6,%xmm7
	movdqa %xmm5,%xmm1
	punpckldq %xmm2,%xmm6
	punpckldq %xmm7,%xmm5
	punpckhdq %xmm1,%xmm2
	punpcklqdq %xmm4,%xmm0
	punpcklqdq %xmm6,%xmm3
	punpcklqdq %xmm2,%xmm5
	cmp    $0x10,%rcx
	jb     43f61 <jsimd_h2v1_extrgb_merged_upsample_sse2.column_st32>
	test   $0xf,%rdi
	jne    43f2c <jsimd_h2v1_extrgb_merged_upsample_sse2.out1>
	movntdq %xmm0,(%rdi)
	movntdq %xmm3,0x10(%rdi)
	movntdq %xmm5,0x20(%rdi)
	jmp    43f3a <jsimd_h2v1_extrgb_merged_upsample_sse2.out0>

0043f2c <jsimd_h2v1_extrgb_merged_upsample_sse2.out1>:
	movdqu %xmm0,(%rdi)
	movdqu %xmm3,0x10(%rdi)
	movdqu %xmm5,0x20(%rdi)

0043f3a <jsimd_h2v1_extrgb_merged_upsample_sse2.out0>:
	add    $0x30,%rdi
	sub    $0x10,%rcx
	je     43fe6 <jsimd_h2v1_extrgb_merged_upsample_sse2.endcolumn>
	add    $0x10,%rsi
	dec    %al
	jne    43e2f <jsimd_h2v1_extrgb_merged_upsample_sse2.Yloop_2nd>
	add    $0x10,%rbx
	add    $0x10,%rdx
	jmpq   43cd7 <jsimd_h2v1_extrgb_merged_upsample_sse2.columnloop>

0043f61 <jsimd_h2v1_extrgb_merged_upsample_sse2.column_st32>:
	lea    (%rcx,%rcx,2),%rcx
	cmp    $0x20,%rcx
	jb     43f82 <jsimd_h2v1_extrgb_merged_upsample_sse2.column_st16>
	movdqu %xmm0,(%rdi)
	movdqu %xmm3,0x10(%rdi)
	add    $0x20,%rdi
	movdqa %xmm5,%xmm0
	sub    $0x20,%rcx
	jmp    43f98 <jsimd_h2v1_extrgb_merged_upsample_sse2.column_st15>

0043f82 <jsimd_h2v1_extrgb_merged_upsample_sse2.column_st16>:
	cmp    $0x10,%rcx
	jb     43f98 <jsimd_h2v1_extrgb_merged_upsample_sse2.column_st15>
	movdqu %xmm0,(%rdi)
	add    $0x10,%rdi
	movdqa %xmm3,%xmm0
	sub    $0x10,%rcx

0043f98 <jsimd_h2v1_extrgb_merged_upsample_sse2.column_st15>:
	cmp    $0x8,%rcx
	jb     43faf <jsimd_h2v1_extrgb_merged_upsample_sse2.column_st7>
	movq   %xmm0,(%rdi)
	add    $0x8,%rdi
	sub    $0x8,%rcx
	psrldq $0x8,%xmm0

0043faf <jsimd_h2v1_extrgb_merged_upsample_sse2.column_st7>:
	cmp    $0x4,%rcx
	jb     43fc6 <jsimd_h2v1_extrgb_merged_upsample_sse2.column_st3>
	movd   %xmm0,(%rdi)
	add    $0x4,%rdi
	sub    $0x4,%rcx
	psrldq $0x4,%xmm0

0043fc6 <jsimd_h2v1_extrgb_merged_upsample_sse2.column_st3>:
	movd   %xmm0,%eax
	cmp    $0x2,%rcx
	jb     43fdf <jsimd_h2v1_extrgb_merged_upsample_sse2.column_st1>
	mov    %ax,(%rdi)
	add    $0x2,%rdi
	sub    $0x2,%rcx
	shr    $0x10,%rax

0043fdf <jsimd_h2v1_extrgb_merged_upsample_sse2.column_st1>:
	test   %rcx,%rcx
	je     43fe6 <jsimd_h2v1_extrgb_merged_upsample_sse2.endcolumn>
	mov    %al,(%rdi)

0043fe6 <jsimd_h2v1_extrgb_merged_upsample_sse2.endcolumn>:
	sfence 

0043fe9 <jsimd_h2v1_extrgb_merged_upsample_sse2.return>:
	pop    %rbx
	pop    %r15
	pop    %r14
	pop    %r13
	pop    %r12
	pop    %r11
	pop    %r10
	mov    %rbp,%rsp
	pop    %rsp
	pop    %rbp
	retq   
	nop
	nop
	nop
	nop

0044000 <jsimd_h2v2_extrgb_merged_upsample_sse2>:
	push   %rbp
	mov    %rsp,%rax
	mov    %rsp,%rbp
	push   %r10
	push   %r11
	push   %r12
	push   %r13
	push   %r14
	push   %r15
	mov    %rdi,%r10
	mov    %rsi,%r11
	mov    %rdx,%r12
	mov    %rcx,%r13
	mov    %r8,%r14
	mov    %r9,%r15
	push   %rbx
	mov    %r10d,%eax
	mov    %r11,%rdi
	mov    %r12d,%ecx
	mov    (%rdi),%rsi
	mov    0x8(%rdi),%rbx
	mov    0x10(%rdi),%rdx
	mov    %r13,%rdi
	lea    (%rsi,%rcx,8),%rsi
	push   %rdx
	push   %rbx
	push   %rsi
	mov    %rsp,%rbx
	push   %rdi
	push   %rcx
	push   %rax
	mov    %rcx,%rdx
	mov    %rdi,%rcx
	mov    %rax,%rdi
	mov    %rbx,%rsi
	callq  43c70 <jsimd_h2v1_extrgb_merged_upsample_sse2>
	pop    %rax
	pop    %rcx
	pop    %rdi
	pop    %rsi
	pop    %rbx
	pop    %rdx
	add    $0x8,%rdi
	add    $0x8,%rsi
	push   %rdx
	push   %rbx
	push   %rsi
	mov    %rsp,%rbx
	push   %rdi
	push   %rcx
	push   %rax
	mov    %rcx,%rdx
	mov    %rdi,%rcx
	mov    %rax,%rdi
	mov    %rbx,%rsi
	callq  43c70 <jsimd_h2v1_extrgb_merged_upsample_sse2>
	pop    %rax
	pop    %rcx
	pop    %rdi
	pop    %rsi
	pop    %rbx
	pop    %rdx
	pop    %rbx
	pop    %r15
	pop    %r14
	pop    %r13
	pop    %r12
	pop    %r11
	pop    %r10
	pop    %rbp
	retq   
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop

00440a0 <jsimd_h2v1_extrgbx_merged_upsample_sse2>:
	push   %rbp
	mov    %rsp,%rax
	sub    $0x4,%rsp
	and    $0xfffffffffffffff0,%rsp
	mov    %rax,(%rsp)
	mov    %rsp,%rbp
	lea    -0x30(%rbp),%rsp
	push   %r10
	push   %r11
	push   %r12
	push   %r13
	push   %r14
	push   %r15
	mov    %rdi,%r10
	mov    %rsi,%r11
	mov    %rdx,%r12
	mov    %rcx,%r13
	mov    %r8,%r14
	mov    %r9,%r15
	push   %rbx
	mov    %r10d,%ecx
	test   %rcx,%rcx
	je     443be <jsimd_h2v1_extrgbx_merged_upsample_sse2.return>
	push   %rcx
	mov    %r11,%rdi
	mov    %r12d,%ecx
	mov    (%rdi),%rsi
	mov    0x8(%rdi),%rbx
	mov    0x10(%rdi),%rdx
	mov    %r13,%rdi
	mov    (%rsi,%rcx,8),%rsi
	mov    (%rbx,%rcx,8),%rbx
	mov    (%rdx,%rcx,8),%rdx
	mov    (%rdi),%rdi
	pop    %rcx

0044107 <jsimd_h2v1_extrgbx_merged_upsample_sse2.columnloop>:
	movdqa (%rbx),%xmm6
	movdqa (%rdx),%xmm7
	pxor   %xmm1,%xmm1
	pcmpeqw %xmm3,%xmm3
	psllw  $0x7,%xmm3
	movdqa %xmm6,%xmm4
	punpckhbw %xmm1,%xmm6
	punpcklbw %xmm1,%xmm4
	movdqa %xmm7,%xmm0
	punpckhbw %xmm1,%xmm7
	punpcklbw %xmm1,%xmm0
	paddw  %xmm3,%xmm6
	paddw  %xmm3,%xmm4
	paddw  %xmm3,%xmm7
	paddw  %xmm3,%xmm0
	movdqa %xmm6,%xmm5
	movdqa %xmm4,%xmm2
	paddw  %xmm6,%xmm6
	paddw  %xmm4,%xmm4
	movdqa %xmm7,%xmm1
	movdqa %xmm0,%xmm3
	paddw  %xmm7,%xmm7
	paddw  %xmm0,%xmm0
	pmulhw 0x27ba4(%rip),%xmm6        # 6bd10 <PW_MF0228>
	pmulhw 0x27b9c(%rip),%xmm4        # 6bd10 <PW_MF0228>
	pmulhw 0x27b84(%rip),%xmm7        # 6bd00 <PW_F0402>
	pmulhw 0x27b7c(%rip),%xmm0        # 6bd00 <PW_F0402>
	paddw  0x27ba4(%rip),%xmm6        # 6bd30 <PW_ONE>
	paddw  0x27b9c(%rip),%xmm4        # 6bd30 <PW_ONE>
	psraw  $0x1,%xmm6
	psraw  $0x1,%xmm4
	paddw  0x27b8a(%rip),%xmm7        # 6bd30 <PW_ONE>
	paddw  0x27b82(%rip),%xmm0        # 6bd30 <PW_ONE>
	psraw  $0x1,%xmm7
	psraw  $0x1,%xmm0
	paddw  %xmm5,%xmm6
	paddw  %xmm2,%xmm4
	paddw  %xmm5,%xmm6
	paddw  %xmm2,%xmm4
	paddw  %xmm1,%xmm7
	paddw  %xmm3,%xmm0
	movdqa %xmm6,-0x30(%rbp)
	movdqa %xmm7,-0x20(%rbp)
	movdqa %xmm5,%xmm6
	movdqa %xmm2,%xmm7
	punpcklwd %xmm1,%xmm5
	punpckhwd %xmm1,%xmm6
	pmaddwd 0x27b2e(%rip),%xmm5        # 6bd20 <PW_MF0344_F0285>
	pmaddwd 0x27b26(%rip),%xmm6        # 6bd20 <PW_MF0344_F0285>
	punpcklwd %xmm3,%xmm2
	punpckhwd %xmm3,%xmm7
	pmaddwd 0x27b16(%rip),%xmm2        # 6bd20 <PW_MF0344_F0285>
	pmaddwd 0x27b0e(%rip),%xmm7        # 6bd20 <PW_MF0344_F0285>
	paddd  0x27b26(%rip),%xmm5        # 6bd40 <PD_ONEHALF>
	paddd  0x27b1e(%rip),%xmm6        # 6bd40 <PD_ONEHALF>
	psrad  $0x10,%xmm5
	psrad  $0x10,%xmm6
	paddd  0x27b0c(%rip),%xmm2        # 6bd40 <PD_ONEHALF>
	paddd  0x27b04(%rip),%xmm7        # 6bd40 <PD_ONEHALF>
	psrad  $0x10,%xmm2
	psrad  $0x10,%xmm7
	packssdw %xmm6,%xmm5
	packssdw %xmm7,%xmm2
	psubw  %xmm1,%xmm5
	psubw  %xmm3,%xmm2
	movdqa %xmm5,-0x10(%rbp)
	mov    $0x2,%al
	jmp    4426e <jsimd_h2v1_extrgbx_merged_upsample_sse2.Yloop_1st>

004425f <jsimd_h2v1_extrgbx_merged_upsample_sse2.Yloop_2nd>:
	movdqa -0x20(%rbp),%xmm0
	movdqa -0x10(%rbp),%xmm2
	movdqa -0x30(%rbp),%xmm4

004426e <jsimd_h2v1_extrgbx_merged_upsample_sse2.Yloop_1st>:
	movdqa (%rsi),%xmm7
	pcmpeqw %xmm6,%xmm6
	psrlw  $0x8,%xmm6
	pand   %xmm7,%xmm6
	psrlw  $0x8,%xmm7
	movdqa %xmm0,%xmm1
	movdqa %xmm2,%xmm3
	movdqa %xmm4,%xmm5
	paddw  %xmm6,%xmm0
	paddw  %xmm7,%xmm1
	packuswb %xmm0,%xmm0
	packuswb %xmm1,%xmm1
	paddw  %xmm6,%xmm2
	paddw  %xmm7,%xmm3
	packuswb %xmm2,%xmm2
	packuswb %xmm3,%xmm3
	paddw  %xmm6,%xmm4
	paddw  %xmm7,%xmm5
	packuswb %xmm4,%xmm4
	packuswb %xmm5,%xmm5
	pcmpeqb %xmm6,%xmm6
	pcmpeqb %xmm7,%xmm7
	punpcklbw %xmm2,%xmm0
	punpcklbw %xmm6,%xmm4
	punpcklbw %xmm3,%xmm1
	punpcklbw %xmm7,%xmm5
	movdqa %xmm0,%xmm2
	punpcklwd %xmm4,%xmm0
	punpckhwd %xmm4,%xmm2
	movdqa %xmm1,%xmm6
	punpcklwd %xmm5,%xmm1
	punpckhwd %xmm5,%xmm6
	movdqa %xmm0,%xmm3
	punpckldq %xmm1,%xmm0
	punpckhdq %xmm1,%xmm3
	movdqa %xmm2,%xmm7
	punpckldq %xmm6,%xmm2
	punpckhdq %xmm6,%xmm7
	cmp    $0x10,%rcx
	jb     44366 <jsimd_h2v1_extrgbx_merged_upsample_sse2.column_st32>
	test   $0xf,%rdi
	jne    4432c <jsimd_h2v1_extrgbx_merged_upsample_sse2.out1>
	movntdq %xmm0,(%rdi)
	movntdq %xmm3,0x10(%rdi)
	movntdq %xmm2,0x20(%rdi)
	movntdq %xmm7,0x30(%rdi)
	jmp    4433f <jsimd_h2v1_extrgbx_merged_upsample_sse2.out0>

004432c <jsimd_h2v1_extrgbx_merged_upsample_sse2.out1>:
	movdqu %xmm0,(%rdi)
	movdqu %xmm3,0x10(%rdi)
	movdqu %xmm2,0x20(%rdi)
	movdqu %xmm7,0x30(%rdi)

004433f <jsimd_h2v1_extrgbx_merged_upsample_sse2.out0>:
	add    $0x40,%rdi
	sub    $0x10,%rcx
	je     443bb <jsimd_h2v1_extrgbx_merged_upsample_sse2.endcolumn>
	add    $0x10,%rsi
	dec    %al
	jne    4425f <jsimd_h2v1_extrgbx_merged_upsample_sse2.Yloop_2nd>
	add    $0x10,%rbx
	add    $0x10,%rdx
	jmpq   44107 <jsimd_h2v1_extrgbx_merged_upsample_sse2.columnloop>

0044366 <jsimd_h2v1_extrgbx_merged_upsample_sse2.column_st32>:
	cmp    $0x8,%rcx
	jb     44385 <jsimd_h2v1_extrgbx_merged_upsample_sse2.column_st16>
	movdqu %xmm0,(%rdi)
	movdqu %xmm3,0x10(%rdi)
	add    $0x20,%rdi
	movdqa %xmm2,%xmm0
	movdqa %xmm7,%xmm3
	sub    $0x8,%rcx

0044385 <jsimd_h2v1_extrgbx_merged_upsample_sse2.column_st16>:
	cmp    $0x4,%rcx
	jb     4439b <jsimd_h2v1_extrgbx_merged_upsample_sse2.column_st15>
	movdqu %xmm0,(%rdi)
	add    $0x10,%rdi
	movdqa %xmm3,%xmm0
	sub    $0x4,%rcx

004439b <jsimd_h2v1_extrgbx_merged_upsample_sse2.column_st15>:
	cmp    $0x2,%rcx
	jb     443b2 <jsimd_h2v1_extrgbx_merged_upsample_sse2.column_st7>
	movq   %xmm0,(%rdi)
	add    $0x8,%rdi
	sub    $0x2,%rcx
	psrldq $0x8,%xmm0

00443b2 <jsimd_h2v1_extrgbx_merged_upsample_sse2.column_st7>:
	test   %rcx,%rcx
	je     443bb <jsimd_h2v1_extrgbx_merged_upsample_sse2.endcolumn>
	movd   %xmm0,(%rdi)

00443bb <jsimd_h2v1_extrgbx_merged_upsample_sse2.endcolumn>:
	sfence 

00443be <jsimd_h2v1_extrgbx_merged_upsample_sse2.return>:
	pop    %rbx
	pop    %r15
	pop    %r14
	pop    %r13
	pop    %r12
	pop    %r11
	pop    %r10
	mov    %rbp,%rsp
	pop    %rsp
	pop    %rbp
	retq   
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop

00443e0 <jsimd_h2v2_extrgbx_merged_upsample_sse2>:
	push   %rbp
	mov    %rsp,%rax
	mov    %rsp,%rbp
	push   %r10
	push   %r11
	push   %r12
	push   %r13
	push   %r14
	push   %r15
	mov    %rdi,%r10
	mov    %rsi,%r11
	mov    %rdx,%r12
	mov    %rcx,%r13
	mov    %r8,%r14
	mov    %r9,%r15
	push   %rbx
	mov    %r10d,%eax
	mov    %r11,%rdi
	mov    %r12d,%ecx
	mov    (%rdi),%rsi
	mov    0x8(%rdi),%rbx
	mov    0x10(%rdi),%rdx
	mov    %r13,%rdi
	lea    (%rsi,%rcx,8),%rsi
	push   %rdx
	push   %rbx
	push   %rsi
	mov    %rsp,%rbx
	push   %rdi
	push   %rcx
	push   %rax
	mov    %rcx,%rdx
	mov    %rdi,%rcx
	mov    %rax,%rdi
	mov    %rbx,%rsi
	callq  440a0 <jsimd_h2v1_extrgbx_merged_upsample_sse2>
	pop    %rax
	pop    %rcx
	pop    %rdi
	pop    %rsi
	pop    %rbx
	pop    %rdx
	add    $0x8,%rdi
	add    $0x8,%rsi
	push   %rdx
	push   %rbx
	push   %rsi
	mov    %rsp,%rbx
	push   %rdi
	push   %rcx
	push   %rax
	mov    %rcx,%rdx
	mov    %rdi,%rcx
	mov    %rax,%rdi
	mov    %rbx,%rsi
	callq  440a0 <jsimd_h2v1_extrgbx_merged_upsample_sse2>
	pop    %rax
	pop    %rcx
	pop    %rdi
	pop    %rsi
	pop    %rbx
	pop    %rdx
	pop    %rbx
	pop    %r15
	pop    %r14
	pop    %r13
	pop    %r12
	pop    %r11
	pop    %r10
	pop    %rbp
	retq   
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop

0044480 <jsimd_h2v1_extbgr_merged_upsample_sse2>:
	push   %rbp
	mov    %rsp,%rax
	sub    $0x4,%rsp
	and    $0xfffffffffffffff0,%rsp
	mov    %rax,(%rsp)
	mov    %rsp,%rbp
	lea    -0x30(%rbp),%rsp
	push   %r10
	push   %r11
	push   %r12
	push   %r13
	push   %r14
	push   %r15
	mov    %rdi,%r10
	mov    %rsi,%r11
	mov    %rdx,%r12
	mov    %rcx,%r13
	mov    %r8,%r14
	mov    %r9,%r15
	push   %rbx
	mov    %r10d,%ecx
	test   %rcx,%rcx
	je     447f9 <jsimd_h2v1_extbgr_merged_upsample_sse2.return>
	push   %rcx
	mov    %r11,%rdi
	mov    %r12d,%ecx
	mov    (%rdi),%rsi
	mov    0x8(%rdi),%rbx
	mov    0x10(%rdi),%rdx
	mov    %r13,%rdi
	mov    (%rsi,%rcx,8),%rsi
	mov    (%rbx,%rcx,8),%rbx
	mov    (%rdx,%rcx,8),%rdx
	mov    (%rdi),%rdi
	pop    %rcx

00444e7 <jsimd_h2v1_extbgr_merged_upsample_sse2.columnloop>:
	movdqa (%rbx),%xmm6
	movdqa (%rdx),%xmm7
	pxor   %xmm1,%xmm1
	pcmpeqw %xmm3,%xmm3
	psllw  $0x7,%xmm3
	movdqa %xmm6,%xmm4
	punpckhbw %xmm1,%xmm6
	punpcklbw %xmm1,%xmm4
	movdqa %xmm7,%xmm0
	punpckhbw %xmm1,%xmm7
	punpcklbw %xmm1,%xmm0
	paddw  %xmm3,%xmm6
	paddw  %xmm3,%xmm4
	paddw  %xmm3,%xmm7
	paddw  %xmm3,%xmm0
	movdqa %xmm6,%xmm5
	movdqa %xmm4,%xmm2
	paddw  %xmm6,%xmm6
	paddw  %xmm4,%xmm4
	movdqa %xmm7,%xmm1
	movdqa %xmm0,%xmm3
	paddw  %xmm7,%xmm7
	paddw  %xmm0,%xmm0
	pmulhw 0x277c4(%rip),%xmm6        # 6bd10 <PW_MF0228>
	pmulhw 0x277bc(%rip),%xmm4        # 6bd10 <PW_MF0228>
	pmulhw 0x277a4(%rip),%xmm7        # 6bd00 <PW_F0402>
	pmulhw 0x2779c(%rip),%xmm0        # 6bd00 <PW_F0402>
	paddw  0x277c4(%rip),%xmm6        # 6bd30 <PW_ONE>
	paddw  0x277bc(%rip),%xmm4        # 6bd30 <PW_ONE>
	psraw  $0x1,%xmm6
	psraw  $0x1,%xmm4
	paddw  0x277aa(%rip),%xmm7        # 6bd30 <PW_ONE>
	paddw  0x277a2(%rip),%xmm0        # 6bd30 <PW_ONE>
	psraw  $0x1,%xmm7
	psraw  $0x1,%xmm0
	paddw  %xmm5,%xmm6
	paddw  %xmm2,%xmm4
	paddw  %xmm5,%xmm6
	paddw  %xmm2,%xmm4
	paddw  %xmm1,%xmm7
	paddw  %xmm3,%xmm0
	movdqa %xmm6,-0x30(%rbp)
	movdqa %xmm7,-0x20(%rbp)
	movdqa %xmm5,%xmm6
	movdqa %xmm2,%xmm7
	punpcklwd %xmm1,%xmm5
	punpckhwd %xmm1,%xmm6
	pmaddwd 0x2774e(%rip),%xmm5        # 6bd20 <PW_MF0344_F0285>
	pmaddwd 0x27746(%rip),%xmm6        # 6bd20 <PW_MF0344_F0285>
	punpcklwd %xmm3,%xmm2
	punpckhwd %xmm3,%xmm7
	pmaddwd 0x27736(%rip),%xmm2        # 6bd20 <PW_MF0344_F0285>
	pmaddwd 0x2772e(%rip),%xmm7        # 6bd20 <PW_MF0344_F0285>
	paddd  0x27746(%rip),%xmm5        # 6bd40 <PD_ONEHALF>
	paddd  0x2773e(%rip),%xmm6        # 6bd40 <PD_ONEHALF>
	psrad  $0x10,%xmm5
	psrad  $0x10,%xmm6
	paddd  0x2772c(%rip),%xmm2        # 6bd40 <PD_ONEHALF>
	paddd  0x27724(%rip),%xmm7        # 6bd40 <PD_ONEHALF>
	psrad  $0x10,%xmm2
	psrad  $0x10,%xmm7
	packssdw %xmm6,%xmm5
	packssdw %xmm7,%xmm2
	psubw  %xmm1,%xmm5
	psubw  %xmm3,%xmm2
	movdqa %xmm5,-0x10(%rbp)
	mov    $0x2,%al
	jmp    4464e <jsimd_h2v1_extbgr_merged_upsample_sse2.Yloop_1st>

004463f <jsimd_h2v1_extbgr_merged_upsample_sse2.Yloop_2nd>:
	movdqa -0x20(%rbp),%xmm0
	movdqa -0x10(%rbp),%xmm2
	movdqa -0x30(%rbp),%xmm4

004464e <jsimd_h2v1_extbgr_merged_upsample_sse2.Yloop_1st>:
	movdqa (%rsi),%xmm7
	pcmpeqw %xmm6,%xmm6
	psrlw  $0x8,%xmm6
	pand   %xmm7,%xmm6
	psrlw  $0x8,%xmm7
	movdqa %xmm0,%xmm1
	movdqa %xmm2,%xmm3
	movdqa %xmm4,%xmm5
	paddw  %xmm6,%xmm0
	paddw  %xmm7,%xmm1
	packuswb %xmm0,%xmm0
	packuswb %xmm1,%xmm1
	paddw  %xmm6,%xmm2
	paddw  %xmm7,%xmm3
	packuswb %xmm2,%xmm2
	packuswb %xmm3,%xmm3
	paddw  %xmm6,%xmm4
	paddw  %xmm7,%xmm5
	packuswb %xmm4,%xmm4
	packuswb %xmm5,%xmm5
	punpcklbw %xmm2,%xmm4
	punpcklbw %xmm5,%xmm0
	punpcklbw %xmm1,%xmm3
	movdqa %xmm4,%xmm6
	movdqa %xmm4,%xmm7
	punpcklwd %xmm0,%xmm4
	punpckhwd %xmm0,%xmm6
	psrldq $0x2,%xmm7
	psrldq $0x2,%xmm0
	movdqa %xmm3,%xmm2
	movdqa %xmm3,%xmm5
	punpcklwd %xmm7,%xmm3
	punpckhwd %xmm7,%xmm2
	psrldq $0x2,%xmm5
	movdqa %xmm0,%xmm1
	punpcklwd %xmm5,%xmm0
	punpckhwd %xmm5,%xmm1
	pshufd $0x4e,%xmm4,%xmm7
	movdqa %xmm0,%xmm5
	punpckldq %xmm3,%xmm4
	punpckldq %xmm7,%xmm0
	punpckhdq %xmm5,%xmm3
	pshufd $0x4e,%xmm6,%xmm7
	movdqa %xmm1,%xmm5
	punpckldq %xmm2,%xmm6
	punpckldq %xmm7,%xmm1
	punpckhdq %xmm5,%xmm2
	punpcklqdq %xmm0,%xmm4
	punpcklqdq %xmm6,%xmm3
	punpcklqdq %xmm2,%xmm1
	cmp    $0x10,%rcx
	jb     44771 <jsimd_h2v1_extbgr_merged_upsample_sse2.column_st32>
	test   $0xf,%rdi
	jne    4473c <jsimd_h2v1_extbgr_merged_upsample_sse2.out1>
	movntdq %xmm4,(%rdi)
	movntdq %xmm3,0x10(%rdi)
	movntdq %xmm1,0x20(%rdi)
	jmp    4474a <jsimd_h2v1_extbgr_merged_upsample_sse2.out0>

004473c <jsimd_h2v1_extbgr_merged_upsample_sse2.out1>:
	movdqu %xmm4,(%rdi)
	movdqu %xmm3,0x10(%rdi)
	movdqu %xmm1,0x20(%rdi)

004474a <jsimd_h2v1_extbgr_merged_upsample_sse2.out0>:
	add    $0x30,%rdi
	sub    $0x10,%rcx
	je     447f6 <jsimd_h2v1_extbgr_merged_upsample_sse2.endcolumn>
	add    $0x10,%rsi
	dec    %al
	jne    4463f <jsimd_h2v1_extbgr_merged_upsample_sse2.Yloop_2nd>
	add    $0x10,%rbx
	add    $0x10,%rdx
	jmpq   444e7 <jsimd_h2v1_extbgr_merged_upsample_sse2.columnloop>

0044771 <jsimd_h2v1_extbgr_merged_upsample_sse2.column_st32>:
	lea    (%rcx,%rcx,2),%rcx
	cmp    $0x20,%rcx
	jb     44792 <jsimd_h2v1_extbgr_merged_upsample_sse2.column_st16>
	movdqu %xmm4,(%rdi)
	movdqu %xmm3,0x10(%rdi)
	add    $0x20,%rdi
	movdqa %xmm1,%xmm4
	sub    $0x20,%rcx
	jmp    447a8 <jsimd_h2v1_extbgr_merged_upsample_sse2.column_st15>

0044792 <jsimd_h2v1_extbgr_merged_upsample_sse2.column_st16>:
	cmp    $0x10,%rcx
	jb     447a8 <jsimd_h2v1_extbgr_merged_upsample_sse2.column_st15>
	movdqu %xmm4,(%rdi)
	add    $0x10,%rdi
	movdqa %xmm3,%xmm4
	sub    $0x10,%rcx

00447a8 <jsimd_h2v1_extbgr_merged_upsample_sse2.column_st15>:
	cmp    $0x8,%rcx
	jb     447bf <jsimd_h2v1_extbgr_merged_upsample_sse2.column_st7>
	movq   %xmm4,(%rdi)
	add    $0x8,%rdi
	sub    $0x8,%rcx
	psrldq $0x8,%xmm4

00447bf <jsimd_h2v1_extbgr_merged_upsample_sse2.column_st7>:
	cmp    $0x4,%rcx
	jb     447d6 <jsimd_h2v1_extbgr_merged_upsample_sse2.column_st3>
	movd   %xmm4,(%rdi)
	add    $0x4,%rdi
	sub    $0x4,%rcx
	psrldq $0x4,%xmm4

00447d6 <jsimd_h2v1_extbgr_merged_upsample_sse2.column_st3>:
	movd   %xmm4,%eax
	cmp    $0x2,%rcx
	jb     447ef <jsimd_h2v1_extbgr_merged_upsample_sse2.column_st1>
	mov    %ax,(%rdi)
	add    $0x2,%rdi
	sub    $0x2,%rcx
	shr    $0x10,%rax

00447ef <jsimd_h2v1_extbgr_merged_upsample_sse2.column_st1>:
	test   %rcx,%rcx
	je     447f6 <jsimd_h2v1_extbgr_merged_upsample_sse2.endcolumn>
	mov    %al,(%rdi)

00447f6 <jsimd_h2v1_extbgr_merged_upsample_sse2.endcolumn>:
	sfence 

00447f9 <jsimd_h2v1_extbgr_merged_upsample_sse2.return>:
	pop    %rbx
	pop    %r15
	pop    %r14
	pop    %r13
	pop    %r12
	pop    %r11
	pop    %r10
	mov    %rbp,%rsp
	pop    %rsp
	pop    %rbp
	retq   
	nop
	nop
	nop
	nop

0044810 <jsimd_h2v2_extbgr_merged_upsample_sse2>:
	push   %rbp
	mov    %rsp,%rax
	mov    %rsp,%rbp
	push   %r10
	push   %r11
	push   %r12
	push   %r13
	push   %r14
	push   %r15
	mov    %rdi,%r10
	mov    %rsi,%r11
	mov    %rdx,%r12
	mov    %rcx,%r13
	mov    %r8,%r14
	mov    %r9,%r15
	push   %rbx
	mov    %r10d,%eax
	mov    %r11,%rdi
	mov    %r12d,%ecx
	mov    (%rdi),%rsi
	mov    0x8(%rdi),%rbx
	mov    0x10(%rdi),%rdx
	mov    %r13,%rdi
	lea    (%rsi,%rcx,8),%rsi
	push   %rdx
	push   %rbx
	push   %rsi
	mov    %rsp,%rbx
	push   %rdi
	push   %rcx
	push   %rax
	mov    %rcx,%rdx
	mov    %rdi,%rcx
	mov    %rax,%rdi
	mov    %rbx,%rsi
	callq  44480 <jsimd_h2v1_extbgr_merged_upsample_sse2>
	pop    %rax
	pop    %rcx
	pop    %rdi
	pop    %rsi
	pop    %rbx
	pop    %rdx
	add    $0x8,%rdi
	add    $0x8,%rsi
	push   %rdx
	push   %rbx
	push   %rsi
	mov    %rsp,%rbx
	push   %rdi
	push   %rcx
	push   %rax
	mov    %rcx,%rdx
	mov    %rdi,%rcx
	mov    %rax,%rdi
	mov    %rbx,%rsi
	callq  44480 <jsimd_h2v1_extbgr_merged_upsample_sse2>
	pop    %rax
	pop    %rcx
	pop    %rdi
	pop    %rsi
	pop    %rbx
	pop    %rdx
	pop    %rbx
	pop    %r15
	pop    %r14
	pop    %r13
	pop    %r12
	pop    %r11
	pop    %r10
	pop    %rbp
	retq   
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop

00448b0 <jsimd_h2v1_extbgrx_merged_upsample_sse2>:
	push   %rbp
	mov    %rsp,%rax
	sub    $0x4,%rsp
	and    $0xfffffffffffffff0,%rsp
	mov    %rax,(%rsp)
	mov    %rsp,%rbp
	lea    -0x30(%rbp),%rsp
	push   %r10
	push   %r11
	push   %r12
	push   %r13
	push   %r14
	push   %r15
	mov    %rdi,%r10
	mov    %rsi,%r11
	mov    %rdx,%r12
	mov    %rcx,%r13
	mov    %r8,%r14
	mov    %r9,%r15
	push   %rbx
	mov    %r10d,%ecx
	test   %rcx,%rcx
	je     44bce <jsimd_h2v1_extbgrx_merged_upsample_sse2.return>
	push   %rcx
	mov    %r11,%rdi
	mov    %r12d,%ecx
	mov    (%rdi),%rsi
	mov    0x8(%rdi),%rbx
	mov    0x10(%rdi),%rdx
	mov    %r13,%rdi
	mov    (%rsi,%rcx,8),%rsi
	mov    (%rbx,%rcx,8),%rbx
	mov    (%rdx,%rcx,8),%rdx
	mov    (%rdi),%rdi
	pop    %rcx

0044917 <jsimd_h2v1_extbgrx_merged_upsample_sse2.columnloop>:
	movdqa (%rbx),%xmm6
	movdqa (%rdx),%xmm7
	pxor   %xmm1,%xmm1
	pcmpeqw %xmm3,%xmm3
	psllw  $0x7,%xmm3
	movdqa %xmm6,%xmm4
	punpckhbw %xmm1,%xmm6
	punpcklbw %xmm1,%xmm4
	movdqa %xmm7,%xmm0
	punpckhbw %xmm1,%xmm7
	punpcklbw %xmm1,%xmm0
	paddw  %xmm3,%xmm6
	paddw  %xmm3,%xmm4
	paddw  %xmm3,%xmm7
	paddw  %xmm3,%xmm0
	movdqa %xmm6,%xmm5
	movdqa %xmm4,%xmm2
	paddw  %xmm6,%xmm6
	paddw  %xmm4,%xmm4
	movdqa %xmm7,%xmm1
	movdqa %xmm0,%xmm3
	paddw  %xmm7,%xmm7
	paddw  %xmm0,%xmm0
	pmulhw 0x27394(%rip),%xmm6        # 6bd10 <PW_MF0228>
	pmulhw 0x2738c(%rip),%xmm4        # 6bd10 <PW_MF0228>
	pmulhw 0x27374(%rip),%xmm7        # 6bd00 <PW_F0402>
	pmulhw 0x2736c(%rip),%xmm0        # 6bd00 <PW_F0402>
	paddw  0x27394(%rip),%xmm6        # 6bd30 <PW_ONE>
	paddw  0x2738c(%rip),%xmm4        # 6bd30 <PW_ONE>
	psraw  $0x1,%xmm6
	psraw  $0x1,%xmm4
	paddw  0x2737a(%rip),%xmm7        # 6bd30 <PW_ONE>
	paddw  0x27372(%rip),%xmm0        # 6bd30 <PW_ONE>
	psraw  $0x1,%xmm7
	psraw  $0x1,%xmm0
	paddw  %xmm5,%xmm6
	paddw  %xmm2,%xmm4
	paddw  %xmm5,%xmm6
	paddw  %xmm2,%xmm4
	paddw  %xmm1,%xmm7
	paddw  %xmm3,%xmm0
	movdqa %xmm6,-0x30(%rbp)
	movdqa %xmm7,-0x20(%rbp)
	movdqa %xmm5,%xmm6
	movdqa %xmm2,%xmm7
	punpcklwd %xmm1,%xmm5
	punpckhwd %xmm1,%xmm6
	pmaddwd 0x2731e(%rip),%xmm5        # 6bd20 <PW_MF0344_F0285>
	pmaddwd 0x27316(%rip),%xmm6        # 6bd20 <PW_MF0344_F0285>
	punpcklwd %xmm3,%xmm2
	punpckhwd %xmm3,%xmm7
	pmaddwd 0x27306(%rip),%xmm2        # 6bd20 <PW_MF0344_F0285>
	pmaddwd 0x272fe(%rip),%xmm7        # 6bd20 <PW_MF0344_F0285>
	paddd  0x27316(%rip),%xmm5        # 6bd40 <PD_ONEHALF>
	paddd  0x2730e(%rip),%xmm6        # 6bd40 <PD_ONEHALF>
	psrad  $0x10,%xmm5
	psrad  $0x10,%xmm6
	paddd  0x272fc(%rip),%xmm2        # 6bd40 <PD_ONEHALF>
	paddd  0x272f4(%rip),%xmm7        # 6bd40 <PD_ONEHALF>
	psrad  $0x10,%xmm2
	psrad  $0x10,%xmm7
	packssdw %xmm6,%xmm5
	packssdw %xmm7,%xmm2
	psubw  %xmm1,%xmm5
	psubw  %xmm3,%xmm2
	movdqa %xmm5,-0x10(%rbp)
	mov    $0x2,%al
	jmp    44a7e <jsimd_h2v1_extbgrx_merged_upsample_sse2.Yloop_1st>

0044a6f <jsimd_h2v1_extbgrx_merged_upsample_sse2.Yloop_2nd>:
	movdqa -0x20(%rbp),%xmm0
	movdqa -0x10(%rbp),%xmm2
	movdqa -0x30(%rbp),%xmm4

0044a7e <jsimd_h2v1_extbgrx_merged_upsample_sse2.Yloop_1st>:
	movdqa (%rsi),%xmm7
	pcmpeqw %xmm6,%xmm6
	psrlw  $0x8,%xmm6
	pand   %xmm7,%xmm6
	psrlw  $0x8,%xmm7
	movdqa %xmm0,%xmm1
	movdqa %xmm2,%xmm3
	movdqa %xmm4,%xmm5
	paddw  %xmm6,%xmm0
	paddw  %xmm7,%xmm1
	packuswb %xmm0,%xmm0
	packuswb %xmm1,%xmm1
	paddw  %xmm6,%xmm2
	paddw  %xmm7,%xmm3
	packuswb %xmm2,%xmm2
	packuswb %xmm3,%xmm3
	paddw  %xmm6,%xmm4
	paddw  %xmm7,%xmm5
	packuswb %xmm4,%xmm4
	packuswb %xmm5,%xmm5
	pcmpeqb %xmm6,%xmm6
	pcmpeqb %xmm7,%xmm7
	punpcklbw %xmm2,%xmm4
	punpcklbw %xmm6,%xmm0
	punpcklbw %xmm3,%xmm5
	punpcklbw %xmm7,%xmm1
	movdqa %xmm4,%xmm2
	punpcklwd %xmm0,%xmm4
	punpckhwd %xmm0,%xmm2
	movdqa %xmm5,%xmm6
	punpcklwd %xmm1,%xmm5
	punpckhwd %xmm1,%xmm6
	movdqa %xmm4,%xmm3
	punpckldq %xmm5,%xmm4
	punpckhdq %xmm5,%xmm3
	movdqa %xmm2,%xmm7
	punpckldq %xmm6,%xmm2
	punpckhdq %xmm6,%xmm7
	cmp    $0x10,%rcx
	jb     44b76 <jsimd_h2v1_extbgrx_merged_upsample_sse2.column_st32>
	test   $0xf,%rdi
	jne    44b3c <jsimd_h2v1_extbgrx_merged_upsample_sse2.out1>
	movntdq %xmm4,(%rdi)
	movntdq %xmm3,0x10(%rdi)
	movntdq %xmm2,0x20(%rdi)
	movntdq %xmm7,0x30(%rdi)
	jmp    44b4f <jsimd_h2v1_extbgrx_merged_upsample_sse2.out0>

0044b3c <jsimd_h2v1_extbgrx_merged_upsample_sse2.out1>:
	movdqu %xmm4,(%rdi)
	movdqu %xmm3,0x10(%rdi)
	movdqu %xmm2,0x20(%rdi)
	movdqu %xmm7,0x30(%rdi)

0044b4f <jsimd_h2v1_extbgrx_merged_upsample_sse2.out0>:
	add    $0x40,%rdi
	sub    $0x10,%rcx
	je     44bcb <jsimd_h2v1_extbgrx_merged_upsample_sse2.endcolumn>
	add    $0x10,%rsi
	dec    %al
	jne    44a6f <jsimd_h2v1_extbgrx_merged_upsample_sse2.Yloop_2nd>
	add    $0x10,%rbx
	add    $0x10,%rdx
	jmpq   44917 <jsimd_h2v1_extbgrx_merged_upsample_sse2.columnloop>

0044b76 <jsimd_h2v1_extbgrx_merged_upsample_sse2.column_st32>:
	cmp    $0x8,%rcx
	jb     44b95 <jsimd_h2v1_extbgrx_merged_upsample_sse2.column_st16>
	movdqu %xmm4,(%rdi)
	movdqu %xmm3,0x10(%rdi)
	add    $0x20,%rdi
	movdqa %xmm2,%xmm4
	movdqa %xmm7,%xmm3
	sub    $0x8,%rcx

0044b95 <jsimd_h2v1_extbgrx_merged_upsample_sse2.column_st16>:
	cmp    $0x4,%rcx
	jb     44bab <jsimd_h2v1_extbgrx_merged_upsample_sse2.column_st15>
	movdqu %xmm4,(%rdi)
	add    $0x10,%rdi
	movdqa %xmm3,%xmm4
	sub    $0x4,%rcx

0044bab <jsimd_h2v1_extbgrx_merged_upsample_sse2.column_st15>:
	cmp    $0x2,%rcx
	jb     44bc2 <jsimd_h2v1_extbgrx_merged_upsample_sse2.column_st7>
	movq   %xmm4,(%rdi)
	add    $0x8,%rdi
	sub    $0x2,%rcx
	psrldq $0x8,%xmm4

0044bc2 <jsimd_h2v1_extbgrx_merged_upsample_sse2.column_st7>:
	test   %rcx,%rcx
	je     44bcb <jsimd_h2v1_extbgrx_merged_upsample_sse2.endcolumn>
	movd   %xmm4,(%rdi)

0044bcb <jsimd_h2v1_extbgrx_merged_upsample_sse2.endcolumn>:
	sfence 

0044bce <jsimd_h2v1_extbgrx_merged_upsample_sse2.return>:
	pop    %rbx
	pop    %r15
	pop    %r14
	pop    %r13
	pop    %r12
	pop    %r11
	pop    %r10
	mov    %rbp,%rsp
	pop    %rsp
	pop    %rbp
	retq   
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop

0044bf0 <jsimd_h2v2_extbgrx_merged_upsample_sse2>:
	push   %rbp
	mov    %rsp,%rax
	mov    %rsp,%rbp
	push   %r10
	push   %r11
	push   %r12
	push   %r13
	push   %r14
	push   %r15
	mov    %rdi,%r10
	mov    %rsi,%r11
	mov    %rdx,%r12
	mov    %rcx,%r13
	mov    %r8,%r14
	mov    %r9,%r15
	push   %rbx
	mov    %r10d,%eax
	mov    %r11,%rdi
	mov    %r12d,%ecx
	mov    (%rdi),%rsi
	mov    0x8(%rdi),%rbx
	mov    0x10(%rdi),%rdx
	mov    %r13,%rdi
	lea    (%rsi,%rcx,8),%rsi
	push   %rdx
	push   %rbx
	push   %rsi
	mov    %rsp,%rbx
	push   %rdi
	push   %rcx
	push   %rax
	mov    %rcx,%rdx
	mov    %rdi,%rcx
	mov    %rax,%rdi
	mov    %rbx,%rsi
	callq  448b0 <jsimd_h2v1_extbgrx_merged_upsample_sse2>
	pop    %rax
	pop    %rcx
	pop    %rdi
	pop    %rsi
	pop    %rbx
	pop    %rdx
	add    $0x8,%rdi
	add    $0x8,%rsi
	push   %rdx
	push   %rbx
	push   %rsi
	mov    %rsp,%rbx
	push   %rdi
	push   %rcx
	push   %rax
	mov    %rcx,%rdx
	mov    %rdi,%rcx
	mov    %rax,%rdi
	mov    %rbx,%rsi
	callq  448b0 <jsimd_h2v1_extbgrx_merged_upsample_sse2>
	pop    %rax
	pop    %rcx
	pop    %rdi
	pop    %rsi
	pop    %rbx
	pop    %rdx
	pop    %rbx
	pop    %r15
	pop    %r14
	pop    %r13
	pop    %r12
	pop    %r11
	pop    %r10
	pop    %rbp
	retq   
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop

0044c90 <jsimd_h2v1_extxbgr_merged_upsample_sse2>:
	push   %rbp
	mov    %rsp,%rax
	sub    $0x4,%rsp
	and    $0xfffffffffffffff0,%rsp
	mov    %rax,(%rsp)
	mov    %rsp,%rbp
	lea    -0x30(%rbp),%rsp
	push   %r10
	push   %r11
	push   %r12
	push   %r13
	push   %r14
	push   %r15
	mov    %rdi,%r10
	mov    %rsi,%r11
	mov    %rdx,%r12
	mov    %rcx,%r13
	mov    %r8,%r14
	mov    %r9,%r15
	push   %rbx
	mov    %r10d,%ecx
	test   %rcx,%rcx
	je     44fae <jsimd_h2v1_extxbgr_merged_upsample_sse2.return>
	push   %rcx
	mov    %r11,%rdi
	mov    %r12d,%ecx
	mov    (%rdi),%rsi
	mov    0x8(%rdi),%rbx
	mov    0x10(%rdi),%rdx
	mov    %r13,%rdi
	mov    (%rsi,%rcx,8),%rsi
	mov    (%rbx,%rcx,8),%rbx
	mov    (%rdx,%rcx,8),%rdx
	mov    (%rdi),%rdi
	pop    %rcx

0044cf7 <jsimd_h2v1_extxbgr_merged_upsample_sse2.columnloop>:
	movdqa (%rbx),%xmm6
	movdqa (%rdx),%xmm7
	pxor   %xmm1,%xmm1
	pcmpeqw %xmm3,%xmm3
	psllw  $0x7,%xmm3
	movdqa %xmm6,%xmm4
	punpckhbw %xmm1,%xmm6
	punpcklbw %xmm1,%xmm4
	movdqa %xmm7,%xmm0
	punpckhbw %xmm1,%xmm7
	punpcklbw %xmm1,%xmm0
	paddw  %xmm3,%xmm6
	paddw  %xmm3,%xmm4
	paddw  %xmm3,%xmm7
	paddw  %xmm3,%xmm0
	movdqa %xmm6,%xmm5
	movdqa %xmm4,%xmm2
	paddw  %xmm6,%xmm6
	paddw  %xmm4,%xmm4
	movdqa %xmm7,%xmm1
	movdqa %xmm0,%xmm3
	paddw  %xmm7,%xmm7
	paddw  %xmm0,%xmm0
	pmulhw 0x26fb4(%rip),%xmm6        # 6bd10 <PW_MF0228>
	pmulhw 0x26fac(%rip),%xmm4        # 6bd10 <PW_MF0228>
	pmulhw 0x26f94(%rip),%xmm7        # 6bd00 <PW_F0402>
	pmulhw 0x26f8c(%rip),%xmm0        # 6bd00 <PW_F0402>
	paddw  0x26fb4(%rip),%xmm6        # 6bd30 <PW_ONE>
	paddw  0x26fac(%rip),%xmm4        # 6bd30 <PW_ONE>
	psraw  $0x1,%xmm6
	psraw  $0x1,%xmm4
	paddw  0x26f9a(%rip),%xmm7        # 6bd30 <PW_ONE>
	paddw  0x26f92(%rip),%xmm0        # 6bd30 <PW_ONE>
	psraw  $0x1,%xmm7
	psraw  $0x1,%xmm0
	paddw  %xmm5,%xmm6
	paddw  %xmm2,%xmm4
	paddw  %xmm5,%xmm6
	paddw  %xmm2,%xmm4
	paddw  %xmm1,%xmm7
	paddw  %xmm3,%xmm0
	movdqa %xmm6,-0x30(%rbp)
	movdqa %xmm7,-0x20(%rbp)
	movdqa %xmm5,%xmm6
	movdqa %xmm2,%xmm7
	punpcklwd %xmm1,%xmm5
	punpckhwd %xmm1,%xmm6
	pmaddwd 0x26f3e(%rip),%xmm5        # 6bd20 <PW_MF0344_F0285>
	pmaddwd 0x26f36(%rip),%xmm6        # 6bd20 <PW_MF0344_F0285>
	punpcklwd %xmm3,%xmm2
	punpckhwd %xmm3,%xmm7
	pmaddwd 0x26f26(%rip),%xmm2        # 6bd20 <PW_MF0344_F0285>
	pmaddwd 0x26f1e(%rip),%xmm7        # 6bd20 <PW_MF0344_F0285>
	paddd  0x26f36(%rip),%xmm5        # 6bd40 <PD_ONEHALF>
	paddd  0x26f2e(%rip),%xmm6        # 6bd40 <PD_ONEHALF>
	psrad  $0x10,%xmm5
	psrad  $0x10,%xmm6
	paddd  0x26f1c(%rip),%xmm2        # 6bd40 <PD_ONEHALF>
	paddd  0x26f14(%rip),%xmm7        # 6bd40 <PD_ONEHALF>
	psrad  $0x10,%xmm2
	psrad  $0x10,%xmm7
	packssdw %xmm6,%xmm5
	packssdw %xmm7,%xmm2
	psubw  %xmm1,%xmm5
	psubw  %xmm3,%xmm2
	movdqa %xmm5,-0x10(%rbp)
	mov    $0x2,%al
	jmp    44e5e <jsimd_h2v1_extxbgr_merged_upsample_sse2.Yloop_1st>

0044e4f <jsimd_h2v1_extxbgr_merged_upsample_sse2.Yloop_2nd>:
	movdqa -0x20(%rbp),%xmm0
	movdqa -0x10(%rbp),%xmm2
	movdqa -0x30(%rbp),%xmm4

0044e5e <jsimd_h2v1_extxbgr_merged_upsample_sse2.Yloop_1st>:
	movdqa (%rsi),%xmm7
	pcmpeqw %xmm6,%xmm6
	psrlw  $0x8,%xmm6
	pand   %xmm7,%xmm6
	psrlw  $0x8,%xmm7
	movdqa %xmm0,%xmm1
	movdqa %xmm2,%xmm3
	movdqa %xmm4,%xmm5
	paddw  %xmm6,%xmm0
	paddw  %xmm7,%xmm1
	packuswb %xmm0,%xmm0
	packuswb %xmm1,%xmm1
	paddw  %xmm6,%xmm2
	paddw  %xmm7,%xmm3
	packuswb %xmm2,%xmm2
	packuswb %xmm3,%xmm3
	paddw  %xmm6,%xmm4
	paddw  %xmm7,%xmm5
	packuswb %xmm4,%xmm4
	packuswb %xmm5,%xmm5
	pcmpeqb %xmm6,%xmm6
	pcmpeqb %xmm7,%xmm7
	punpcklbw %xmm4,%xmm6
	punpcklbw %xmm0,%xmm2
	punpcklbw %xmm5,%xmm7
	punpcklbw %xmm1,%xmm3
	movdqa %xmm6,%xmm4
	punpcklwd %xmm2,%xmm6
	punpckhwd %xmm2,%xmm4
	movdqa %xmm7,%xmm0
	punpcklwd %xmm3,%xmm7
	punpckhwd %xmm3,%xmm0
	movdqa %xmm6,%xmm5
	punpckldq %xmm7,%xmm6
	punpckhdq %xmm7,%xmm5
	movdqa %xmm4,%xmm1
	punpckldq %xmm0,%xmm4
	punpckhdq %xmm0,%xmm1
	cmp    $0x10,%rcx
	jb     44f56 <jsimd_h2v1_extxbgr_merged_upsample_sse2.column_st32>
	test   $0xf,%rdi
	jne    44f1c <jsimd_h2v1_extxbgr_merged_upsample_sse2.out1>
	movntdq %xmm6,(%rdi)
	movntdq %xmm5,0x10(%rdi)
	movntdq %xmm4,0x20(%rdi)
	movntdq %xmm1,0x30(%rdi)
	jmp    44f2f <jsimd_h2v1_extxbgr_merged_upsample_sse2.out0>

0044f1c <jsimd_h2v1_extxbgr_merged_upsample_sse2.out1>:
	movdqu %xmm6,(%rdi)
	movdqu %xmm5,0x10(%rdi)
	movdqu %xmm4,0x20(%rdi)
	movdqu %xmm1,0x30(%rdi)

0044f2f <jsimd_h2v1_extxbgr_merged_upsample_sse2.out0>:
	add    $0x40,%rdi
	sub    $0x10,%rcx
	je     44fab <jsimd_h2v1_extxbgr_merged_upsample_sse2.endcolumn>
	add    $0x10,%rsi
	dec    %al
	jne    44e4f <jsimd_h2v1_extxbgr_merged_upsample_sse2.Yloop_2nd>
	add    $0x10,%rbx
	add    $0x10,%rdx
	jmpq   44cf7 <jsimd_h2v1_extxbgr_merged_upsample_sse2.columnloop>

0044f56 <jsimd_h2v1_extxbgr_merged_upsample_sse2.column_st32>:
	cmp    $0x8,%rcx
	jb     44f75 <jsimd_h2v1_extxbgr_merged_upsample_sse2.column_st16>
	movdqu %xmm6,(%rdi)
	movdqu %xmm5,0x10(%rdi)
	add    $0x20,%rdi
	movdqa %xmm4,%xmm6
	movdqa %xmm1,%xmm5
	sub    $0x8,%rcx

0044f75 <jsimd_h2v1_extxbgr_merged_upsample_sse2.column_st16>:
	cmp    $0x4,%rcx
	jb     44f8b <jsimd_h2v1_extxbgr_merged_upsample_sse2.column_st15>
	movdqu %xmm6,(%rdi)
	add    $0x10,%rdi
	movdqa %xmm5,%xmm6
	sub    $0x4,%rcx

0044f8b <jsimd_h2v1_extxbgr_merged_upsample_sse2.column_st15>:
	cmp    $0x2,%rcx
	jb     44fa2 <jsimd_h2v1_extxbgr_merged_upsample_sse2.column_st7>
	movq   %xmm6,(%rdi)
	add    $0x8,%rdi
	sub    $0x2,%rcx
	psrldq $0x8,%xmm6

0044fa2 <jsimd_h2v1_extxbgr_merged_upsample_sse2.column_st7>:
	test   %rcx,%rcx
	je     44fab <jsimd_h2v1_extxbgr_merged_upsample_sse2.endcolumn>
	movd   %xmm6,(%rdi)

0044fab <jsimd_h2v1_extxbgr_merged_upsample_sse2.endcolumn>:
	sfence 

0044fae <jsimd_h2v1_extxbgr_merged_upsample_sse2.return>:
	pop    %rbx
	pop    %r15
	pop    %r14
	pop    %r13
	pop    %r12
	pop    %r11
	pop    %r10
	mov    %rbp,%rsp
	pop    %rsp
	pop    %rbp
	retq   
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop

0044fd0 <jsimd_h2v2_extxbgr_merged_upsample_sse2>:
	push   %rbp
	mov    %rsp,%rax
	mov    %rsp,%rbp
	push   %r10
	push   %r11
	push   %r12
	push   %r13
	push   %r14
	push   %r15
	mov    %rdi,%r10
	mov    %rsi,%r11
	mov    %rdx,%r12
	mov    %rcx,%r13
	mov    %r8,%r14
	mov    %r9,%r15
	push   %rbx
	mov    %r10d,%eax
	mov    %r11,%rdi
	mov    %r12d,%ecx
	mov    (%rdi),%rsi
	mov    0x8(%rdi),%rbx
	mov    0x10(%rdi),%rdx
	mov    %r13,%rdi
	lea    (%rsi,%rcx,8),%rsi
	push   %rdx
	push   %rbx
	push   %rsi
	mov    %rsp,%rbx
	push   %rdi
	push   %rcx
	push   %rax
	mov    %rcx,%rdx
	mov    %rdi,%rcx
	mov    %rax,%rdi
	mov    %rbx,%rsi
	callq  44c90 <jsimd_h2v1_extxbgr_merged_upsample_sse2>
	pop    %rax
	pop    %rcx
	pop    %rdi
	pop    %rsi
	pop    %rbx
	pop    %rdx
	add    $0x8,%rdi
	add    $0x8,%rsi
	push   %rdx
	push   %rbx
	push   %rsi
	mov    %rsp,%rbx
	push   %rdi
	push   %rcx
	push   %rax
	mov    %rcx,%rdx
	mov    %rdi,%rcx
	mov    %rax,%rdi
	mov    %rbx,%rsi
	callq  44c90 <jsimd_h2v1_extxbgr_merged_upsample_sse2>
	pop    %rax
	pop    %rcx
	pop    %rdi
	pop    %rsi
	pop    %rbx
	pop    %rdx
	pop    %rbx
	pop    %r15
	pop    %r14
	pop    %r13
	pop    %r12
	pop    %r11
	pop    %r10
	pop    %rbp
	retq   
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop

0045070 <jsimd_h2v1_extxrgb_merged_upsample_sse2>:
	push   %rbp
	mov    %rsp,%rax
	sub    $0x4,%rsp
	and    $0xfffffffffffffff0,%rsp
	mov    %rax,(%rsp)
	mov    %rsp,%rbp
	lea    -0x30(%rbp),%rsp
	push   %r10
	push   %r11
	push   %r12
	push   %r13
	push   %r14
	push   %r15
	mov    %rdi,%r10
	mov    %rsi,%r11
	mov    %rdx,%r12
	mov    %rcx,%r13
	mov    %r8,%r14
	mov    %r9,%r15
	push   %rbx
	mov    %r10d,%ecx
	test   %rcx,%rcx
	je     4538e <jsimd_h2v1_extxrgb_merged_upsample_sse2.return>
	push   %rcx
	mov    %r11,%rdi
	mov    %r12d,%ecx
	mov    (%rdi),%rsi
	mov    0x8(%rdi),%rbx
	mov    0x10(%rdi),%rdx
	mov    %r13,%rdi
	mov    (%rsi,%rcx,8),%rsi
	mov    (%rbx,%rcx,8),%rbx
	mov    (%rdx,%rcx,8),%rdx
	mov    (%rdi),%rdi
	pop    %rcx

00450d7 <jsimd_h2v1_extxrgb_merged_upsample_sse2.columnloop>:
	movdqa (%rbx),%xmm6
	movdqa (%rdx),%xmm7
	pxor   %xmm1,%xmm1
	pcmpeqw %xmm3,%xmm3
	psllw  $0x7,%xmm3
	movdqa %xmm6,%xmm4
	punpckhbw %xmm1,%xmm6
	punpcklbw %xmm1,%xmm4
	movdqa %xmm7,%xmm0
	punpckhbw %xmm1,%xmm7
	punpcklbw %xmm1,%xmm0
	paddw  %xmm3,%xmm6
	paddw  %xmm3,%xmm4
	paddw  %xmm3,%xmm7
	paddw  %xmm3,%xmm0
	movdqa %xmm6,%xmm5
	movdqa %xmm4,%xmm2
	paddw  %xmm6,%xmm6
	paddw  %xmm4,%xmm4
	movdqa %xmm7,%xmm1
	movdqa %xmm0,%xmm3
	paddw  %xmm7,%xmm7
	paddw  %xmm0,%xmm0
	pmulhw 0x26bd4(%rip),%xmm6        # 6bd10 <PW_MF0228>
	pmulhw 0x26bcc(%rip),%xmm4        # 6bd10 <PW_MF0228>
	pmulhw 0x26bb4(%rip),%xmm7        # 6bd00 <PW_F0402>
	pmulhw 0x26bac(%rip),%xmm0        # 6bd00 <PW_F0402>
	paddw  0x26bd4(%rip),%xmm6        # 6bd30 <PW_ONE>
	paddw  0x26bcc(%rip),%xmm4        # 6bd30 <PW_ONE>
	psraw  $0x1,%xmm6
	psraw  $0x1,%xmm4
	paddw  0x26bba(%rip),%xmm7        # 6bd30 <PW_ONE>
	paddw  0x26bb2(%rip),%xmm0        # 6bd30 <PW_ONE>
	psraw  $0x1,%xmm7
	psraw  $0x1,%xmm0
	paddw  %xmm5,%xmm6
	paddw  %xmm2,%xmm4
	paddw  %xmm5,%xmm6
	paddw  %xmm2,%xmm4
	paddw  %xmm1,%xmm7
	paddw  %xmm3,%xmm0
	movdqa %xmm6,-0x30(%rbp)
	movdqa %xmm7,-0x20(%rbp)
	movdqa %xmm5,%xmm6
	movdqa %xmm2,%xmm7
	punpcklwd %xmm1,%xmm5
	punpckhwd %xmm1,%xmm6
	pmaddwd 0x26b5e(%rip),%xmm5        # 6bd20 <PW_MF0344_F0285>
	pmaddwd 0x26b56(%rip),%xmm6        # 6bd20 <PW_MF0344_F0285>
	punpcklwd %xmm3,%xmm2
	punpckhwd %xmm3,%xmm7
	pmaddwd 0x26b46(%rip),%xmm2        # 6bd20 <PW_MF0344_F0285>
	pmaddwd 0x26b3e(%rip),%xmm7        # 6bd20 <PW_MF0344_F0285>
	paddd  0x26b56(%rip),%xmm5        # 6bd40 <PD_ONEHALF>
	paddd  0x26b4e(%rip),%xmm6        # 6bd40 <PD_ONEHALF>
	psrad  $0x10,%xmm5
	psrad  $0x10,%xmm6
	paddd  0x26b3c(%rip),%xmm2        # 6bd40 <PD_ONEHALF>
	paddd  0x26b34(%rip),%xmm7        # 6bd40 <PD_ONEHALF>
	psrad  $0x10,%xmm2
	psrad  $0x10,%xmm7
	packssdw %xmm6,%xmm5
	packssdw %xmm7,%xmm2
	psubw  %xmm1,%xmm5
	psubw  %xmm3,%xmm2
	movdqa %xmm5,-0x10(%rbp)
	mov    $0x2,%al
	jmp    4523e <jsimd_h2v1_extxrgb_merged_upsample_sse2.Yloop_1st>

004522f <jsimd_h2v1_extxrgb_merged_upsample_sse2.Yloop_2nd>:
	movdqa -0x20(%rbp),%xmm0
	movdqa -0x10(%rbp),%xmm2
	movdqa -0x30(%rbp),%xmm4

004523e <jsimd_h2v1_extxrgb_merged_upsample_sse2.Yloop_1st>:
	movdqa (%rsi),%xmm7
	pcmpeqw %xmm6,%xmm6
	psrlw  $0x8,%xmm6
	pand   %xmm7,%xmm6
	psrlw  $0x8,%xmm7
	movdqa %xmm0,%xmm1
	movdqa %xmm2,%xmm3
	movdqa %xmm4,%xmm5
	paddw  %xmm6,%xmm0
	paddw  %xmm7,%xmm1
	packuswb %xmm0,%xmm0
	packuswb %xmm1,%xmm1
	paddw  %xmm6,%xmm2
	paddw  %xmm7,%xmm3
	packuswb %xmm2,%xmm2
	packuswb %xmm3,%xmm3
	paddw  %xmm6,%xmm4
	paddw  %xmm7,%xmm5
	packuswb %xmm4,%xmm4
	packuswb %xmm5,%xmm5
	pcmpeqb %xmm6,%xmm6
	pcmpeqb %xmm7,%xmm7
	punpcklbw %xmm0,%xmm6
	punpcklbw %xmm4,%xmm2
	punpcklbw %xmm1,%xmm7
	punpcklbw %xmm5,%xmm3
	movdqa %xmm6,%xmm0
	punpcklwd %xmm2,%xmm6
	punpckhwd %xmm2,%xmm0
	movdqa %xmm7,%xmm4
	punpcklwd %xmm3,%xmm7
	punpckhwd %xmm3,%xmm4
	movdqa %xmm6,%xmm1
	punpckldq %xmm7,%xmm6
	punpckhdq %xmm7,%xmm1
	movdqa %xmm0,%xmm5
	punpckldq %xmm4,%xmm0
	punpckhdq %xmm4,%xmm5
	cmp    $0x10,%rcx
	jb     45336 <jsimd_h2v1_extxrgb_merged_upsample_sse2.column_st32>
	test   $0xf,%rdi
	jne    452fc <jsimd_h2v1_extxrgb_merged_upsample_sse2.out1>
	movntdq %xmm6,(%rdi)
	movntdq %xmm1,0x10(%rdi)
	movntdq %xmm0,0x20(%rdi)
	movntdq %xmm5,0x30(%rdi)
	jmp    4530f <jsimd_h2v1_extxrgb_merged_upsample_sse2.out0>

00452fc <jsimd_h2v1_extxrgb_merged_upsample_sse2.out1>:
	movdqu %xmm6,(%rdi)
	movdqu %xmm1,0x10(%rdi)
	movdqu %xmm0,0x20(%rdi)
	movdqu %xmm5,0x30(%rdi)

004530f <jsimd_h2v1_extxrgb_merged_upsample_sse2.out0>:
	add    $0x40,%rdi
	sub    $0x10,%rcx
	je     4538b <jsimd_h2v1_extxrgb_merged_upsample_sse2.endcolumn>
	add    $0x10,%rsi
	dec    %al
	jne    4522f <jsimd_h2v1_extxrgb_merged_upsample_sse2.Yloop_2nd>
	add    $0x10,%rbx
	add    $0x10,%rdx
	jmpq   450d7 <jsimd_h2v1_extxrgb_merged_upsample_sse2.columnloop>

0045336 <jsimd_h2v1_extxrgb_merged_upsample_sse2.column_st32>:
	cmp    $0x8,%rcx
	jb     45355 <jsimd_h2v1_extxrgb_merged_upsample_sse2.column_st16>
	movdqu %xmm6,(%rdi)
	movdqu %xmm1,0x10(%rdi)
	add    $0x20,%rdi
	movdqa %xmm0,%xmm6
	movdqa %xmm5,%xmm1
	sub    $0x8,%rcx

0045355 <jsimd_h2v1_extxrgb_merged_upsample_sse2.column_st16>:
	cmp    $0x4,%rcx
	jb     4536b <jsimd_h2v1_extxrgb_merged_upsample_sse2.column_st15>
	movdqu %xmm6,(%rdi)
	add    $0x10,%rdi
	movdqa %xmm1,%xmm6
	sub    $0x4,%rcx

004536b <jsimd_h2v1_extxrgb_merged_upsample_sse2.column_st15>:
	cmp    $0x2,%rcx
	jb     45382 <jsimd_h2v1_extxrgb_merged_upsample_sse2.column_st7>
	movq   %xmm6,(%rdi)
	add    $0x8,%rdi
	sub    $0x2,%rcx
	psrldq $0x8,%xmm6

0045382 <jsimd_h2v1_extxrgb_merged_upsample_sse2.column_st7>:
	test   %rcx,%rcx
	je     4538b <jsimd_h2v1_extxrgb_merged_upsample_sse2.endcolumn>
	movd   %xmm6,(%rdi)

004538b <jsimd_h2v1_extxrgb_merged_upsample_sse2.endcolumn>:
	sfence 

004538e <jsimd_h2v1_extxrgb_merged_upsample_sse2.return>:
	pop    %rbx
	pop    %r15
	pop    %r14
	pop    %r13
	pop    %r12
	pop    %r11
	pop    %r10
	mov    %rbp,%rsp
	pop    %rsp
	pop    %rbp
	retq   
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop

00453b0 <jsimd_h2v2_extxrgb_merged_upsample_sse2>:
	push   %rbp
	mov    %rsp,%rax
	mov    %rsp,%rbp
	push   %r10
	push   %r11
	push   %r12
	push   %r13
	push   %r14
	push   %r15
	mov    %rdi,%r10
	mov    %rsi,%r11
	mov    %rdx,%r12
	mov    %rcx,%r13
	mov    %r8,%r14
	mov    %r9,%r15
	push   %rbx
	mov    %r10d,%eax
	mov    %r11,%rdi
	mov    %r12d,%ecx
	mov    (%rdi),%rsi
	mov    0x8(%rdi),%rbx
	mov    0x10(%rdi),%rdx
	mov    %r13,%rdi
	lea    (%rsi,%rcx,8),%rsi
	push   %rdx
	push   %rbx
	push   %rsi
	mov    %rsp,%rbx
	push   %rdi
	push   %rcx
	push   %rax
	mov    %rcx,%rdx
	mov    %rdi,%rcx
	mov    %rax,%rdi
	mov    %rbx,%rsi
	callq  45070 <jsimd_h2v1_extxrgb_merged_upsample_sse2>
	pop    %rax
	pop    %rcx
	pop    %rdi
	pop    %rsi
	pop    %rbx
	pop    %rdx
	add    $0x8,%rdi
	add    $0x8,%rsi
	push   %rdx
	push   %rbx
	push   %rsi
	mov    %rsp,%rbx
	push   %rdi
	push   %rcx
	push   %rax
	mov    %rcx,%rdx
	mov    %rdi,%rcx
	mov    %rax,%rdi
	mov    %rbx,%rsi
	callq  45070 <jsimd_h2v1_extxrgb_merged_upsample_sse2>
	pop    %rax
	pop    %rcx
	pop    %rdi
	pop    %rsi
	pop    %rbx
	pop    %rdx
	pop    %rbx
	pop    %r15
	pop    %r14
	pop    %r13
	pop    %r12
	pop    %r11
	pop    %r10
	pop    %rbp
	retq   
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop

0045450 <jsimd_h2v1_fancy_upsample_sse2>:
	push   %rbp
	mov    %rsp,%rax
	mov    %rsp,%rbp
	push   %r10
	push   %r11
	push   %r12
	push   %r13
	push   %r14
	push   %r15
	mov    %rdi,%r10
	mov    %rsi,%r11
	mov    %rdx,%r12
	mov    %rcx,%r13
	mov    %r8,%r14
	mov    %r9,%r15
	mov    %r11d,%eax
	test   %rax,%rax
	je     455d2 <jsimd_h2v1_fancy_upsample_sse2.return>
	mov    %r10,%rcx
	test   %rcx,%rcx
	je     455d2 <jsimd_h2v1_fancy_upsample_sse2.return>
	mov    %r12,%rsi
	mov    %r13,%rdi
	mov    (%rdi),%rdi

0045496 <jsimd_h2v1_fancy_upsample_sse2.rowloop>:
	push   %rax
	push   %rdi
	push   %rsi
	mov    (%rsi),%rsi
	mov    (%rdi),%rdi
	test   $0xf,%rax
	je     454ae <jsimd_h2v1_fancy_upsample_sse2.skip>
	mov    -0x1(%rsi,%rax,1),%dl
	mov    %dl,(%rsi,%rax,1)

00454ae <jsimd_h2v1_fancy_upsample_sse2.skip>:
	pxor   %xmm0,%xmm0
	pcmpeqb %xmm7,%xmm7
	psrldq $0xf,%xmm7
	pand   (%rsi),%xmm7
	add    $0xf,%rax
	and    $0xfffffffffffffff0,%rax
	cmp    $0x10,%rax
	ja     454dc <jsimd_h2v1_fancy_upsample_sse2.columnloop>

00454cd <jsimd_h2v1_fancy_upsample_sse2.columnloop_last>:
	pcmpeqb %xmm6,%xmm6
	pslldq $0xf,%xmm6
	pand   (%rsi),%xmm6
	jmp    454e6 <jsimd_h2v1_fancy_upsample_sse2.upsample>

00454dc <jsimd_h2v1_fancy_upsample_sse2.columnloop>:
	movdqa 0x10(%rsi),%xmm6
	pslldq $0xf,%xmm6

00454e6 <jsimd_h2v1_fancy_upsample_sse2.upsample>:
	movdqa (%rsi),%xmm1
	movdqa %xmm1,%xmm2
	movdqa %xmm1,%xmm3
	pslldq $0x1,%xmm2
	psrldq $0x1,%xmm3
	por    %xmm7,%xmm2
	por    %xmm6,%xmm3
	movdqa %xmm1,%xmm7
	psrldq $0xf,%xmm7
	movdqa %xmm1,%xmm4
	punpcklbw %xmm0,%xmm1
	punpckhbw %xmm0,%xmm4
	movdqa %xmm2,%xmm5
	punpcklbw %xmm0,%xmm2
	punpckhbw %xmm0,%xmm5
	movdqa %xmm3,%xmm6
	punpcklbw %xmm0,%xmm3
	punpckhbw %xmm0,%xmm6
	pmullw 0x26837(%rip),%xmm1        # 6bd70 <PW_THREE>
	pmullw 0x2682f(%rip),%xmm4        # 6bd70 <PW_THREE>
	paddw  0x26807(%rip),%xmm2        # 6bd50 <PW_ONE>
	paddw  0x267ff(%rip),%xmm5        # 6bd50 <PW_ONE>
	paddw  0x26807(%rip),%xmm3        # 6bd60 <PW_TWO>
	paddw  0x267ff(%rip),%xmm6        # 6bd60 <PW_TWO>
	paddw  %xmm1,%xmm2
	paddw  %xmm4,%xmm5
	psrlw  $0x2,%xmm2
	psrlw  $0x2,%xmm5
	paddw  %xmm1,%xmm3
	paddw  %xmm4,%xmm6
	psrlw  $0x2,%xmm3
	psrlw  $0x2,%xmm6
	psllw  $0x8,%xmm3
	psllw  $0x8,%xmm6
	por    %xmm3,%xmm2
	por    %xmm6,%xmm5
	movdqa %xmm2,(%rdi)
	movdqa %xmm5,0x10(%rdi)
	sub    $0x10,%rax
	add    $0x10,%rsi
	add    $0x20,%rdi
	cmp    $0x10,%rax
	ja     454dc <jsimd_h2v1_fancy_upsample_sse2.columnloop>
	test   %eax,%eax
	jne    454cd <jsimd_h2v1_fancy_upsample_sse2.columnloop_last>
	pop    %rsi
	pop    %rdi
	pop    %rax
	add    $0x8,%rsi
	add    $0x8,%rdi
	dec    %rcx
	jg     45496 <jsimd_h2v1_fancy_upsample_sse2.rowloop>

00455d2 <jsimd_h2v1_fancy_upsample_sse2.return>:
	pop    %r15
	pop    %r14
	pop    %r13
	pop    %r12
	pop    %r11
	pop    %r10
	pop    %rbp
	retq   

00455e0 <jsimd_h2v2_fancy_upsample_sse2>:
	push   %rbp
	mov    %rsp,%rax
	sub    $0x4,%rsp
	and    $0xfffffffffffffff0,%rsp
	mov    %rax,(%rsp)
	mov    %rsp,%rbp
	lea    -0x40(%rbp),%rsp
	push   %r10
	push   %r11
	push   %r12
	push   %r13
	push   %r14
	push   %r15
	mov    %rdi,%r10
	mov    %rsi,%r11
	mov    %rdx,%r12
	mov    %rcx,%r13
	mov    %r8,%r14
	mov    %r9,%r15
	push   %rbx
	mov    %r11d,%eax
	test   %rax,%rax
	je     4597d <jsimd_h2v2_fancy_upsample_sse2.return>
	mov    %r10,%rcx
	test   %rcx,%rcx
	je     4597d <jsimd_h2v2_fancy_upsample_sse2.return>
	mov    %r12,%rsi
	mov    %r13,%rdi
	mov    (%rdi),%rdi

0045637 <jsimd_h2v2_fancy_upsample_sse2.rowloop>:
	push   %rax
	push   %rcx
	push   %rdi
	push   %rsi
	mov    -0x8(%rsi),%rcx
	mov    (%rsi),%rbx
	mov    0x8(%rsi),%rsi
	mov    (%rdi),%rdx
	mov    0x8(%rdi),%rdi
	test   $0xf,%rax
	je     4566c <jsimd_h2v2_fancy_upsample_sse2.skip>
	push   %rdx
	mov    -0x1(%rcx,%rax,1),%dl
	mov    %dl,(%rcx,%rax,1)
	mov    -0x1(%rbx,%rax,1),%dl
	mov    %dl,(%rbx,%rax,1)
	mov    -0x1(%rsi,%rax,1),%dl
	mov    %dl,(%rsi,%rax,1)
	pop    %rdx

004566c <jsimd_h2v2_fancy_upsample_sse2.skip>:
	movdqa (%rbx),%xmm0
	movdqa (%rcx),%xmm1
	movdqa (%rsi),%xmm2
	pxor   %xmm3,%xmm3
	movdqa %xmm0,%xmm4
	punpcklbw %xmm3,%xmm0
	punpckhbw %xmm3,%xmm4
	movdqa %xmm1,%xmm5
	punpcklbw %xmm3,%xmm1
	punpckhbw %xmm3,%xmm5
	movdqa %xmm2,%xmm6
	punpcklbw %xmm3,%xmm2
	punpckhbw %xmm3,%xmm6
	pmullw 0x266c8(%rip),%xmm0        # 6bd70 <PW_THREE>
	pmullw 0x266c0(%rip),%xmm4        # 6bd70 <PW_THREE>
	pcmpeqb %xmm7,%xmm7
	psrldq $0xe,%xmm7
	paddw  %xmm0,%xmm1
	paddw  %xmm4,%xmm5
	paddw  %xmm0,%xmm2
	paddw  %xmm4,%xmm6
	movdqa %xmm1,(%rdx)
	movdqa %xmm5,0x10(%rdx)
	movdqa %xmm2,(%rdi)
	movdqa %xmm6,0x10(%rdi)
	pand   %xmm7,%xmm1
	pand   %xmm7,%xmm2
	movdqa %xmm1,-0x40(%rbp)
	movdqa %xmm2,-0x30(%rbp)
	add    $0xf,%rax
	and    $0xfffffffffffffff0,%rax
	cmp    $0x10,%rax
	ja     45721 <jsimd_h2v2_fancy_upsample_sse2.columnloop>

00456fb <jsimd_h2v2_fancy_upsample_sse2.columnloop_last>:
	pcmpeqb %xmm1,%xmm1
	pslldq $0xe,%xmm1
	movdqa %xmm1,%xmm2
	pand   0x10(%rdx),%xmm1
	pand   0x10(%rdi),%xmm2
	movdqa %xmm1,-0x20(%rbp)
	movdqa %xmm2,-0x10(%rbp)
	jmpq   457a0 <jsimd_h2v2_fancy_upsample_sse2.upsample>

0045721 <jsimd_h2v2_fancy_upsample_sse2.columnloop>:
	movdqa 0x10(%rbx),%xmm0
	movdqa 0x10(%rcx),%xmm1
	movdqa 0x10(%rsi),%xmm2
	pxor   %xmm3,%xmm3
	movdqa %xmm0,%xmm4
	punpcklbw %xmm3,%xmm0
	punpckhbw %xmm3,%xmm4
	movdqa %xmm1,%xmm5
	punpcklbw %xmm3,%xmm1
	punpckhbw %xmm3,%xmm5
	movdqa %xmm2,%xmm6
	punpcklbw %xmm3,%xmm2
	punpckhbw %xmm3,%xmm6
	pmullw 0x26610(%rip),%xmm0        # 6bd70 <PW_THREE>
	pmullw 0x26608(%rip),%xmm4        # 6bd70 <PW_THREE>
	paddw  %xmm0,%xmm1
	paddw  %xmm4,%xmm5
	paddw  %xmm0,%xmm2
	paddw  %xmm4,%xmm6
	movdqa %xmm1,0x20(%rdx)
	movdqa %xmm5,0x30(%rdx)
	movdqa %xmm2,0x20(%rdi)
	movdqa %xmm6,0x30(%rdi)
	pslldq $0xe,%xmm1
	pslldq $0xe,%xmm2
	movdqa %xmm1,-0x20(%rbp)
	movdqa %xmm2,-0x10(%rbp)

00457a0 <jsimd_h2v2_fancy_upsample_sse2.upsample>:
	movdqa (%rdx),%xmm7
	movdqa 0x10(%rdx),%xmm3
	movdqa %xmm7,%xmm0
	movdqa %xmm3,%xmm4
	psrldq $0x2,%xmm0
	pslldq $0xe,%xmm4
	movdqa %xmm7,%xmm5
	movdqa %xmm3,%xmm6
	psrldq $0xe,%xmm5
	pslldq $0x2,%xmm6
	por    %xmm4,%xmm0
	por    %xmm6,%xmm5
	movdqa %xmm7,%xmm1
	movdqa %xmm3,%xmm2
	pslldq $0x2,%xmm1
	psrldq $0x2,%xmm2
	movdqa %xmm3,%xmm4
	psrldq $0xe,%xmm4
	por    -0x40(%rbp),%xmm1
	por    -0x20(%rbp),%xmm2
	movdqa %xmm4,-0x40(%rbp)
	pmullw 0x26569(%rip),%xmm7        # 6bd70 <PW_THREE>
	pmullw 0x26561(%rip),%xmm3        # 6bd70 <PW_THREE>
	paddw  0x26579(%rip),%xmm1        # 6bd90 <PW_EIGHT>
	paddw  0x26571(%rip),%xmm5        # 6bd90 <PW_EIGHT>
	paddw  0x26559(%rip),%xmm0        # 6bd80 <PW_SEVEN>
	paddw  0x26551(%rip),%xmm2        # 6bd80 <PW_SEVEN>
	paddw  %xmm7,%xmm1
	paddw  %xmm3,%xmm5
	psrlw  $0x4,%xmm1
	psrlw  $0x4,%xmm5
	paddw  %xmm7,%xmm0
	paddw  %xmm3,%xmm2
	psrlw  $0x4,%xmm0
	psrlw  $0x4,%xmm2
	psllw  $0x8,%xmm0
	psllw  $0x8,%xmm2
	por    %xmm0,%xmm1
	por    %xmm2,%xmm5
	movdqa %xmm1,(%rdx)
	movdqa %xmm5,0x10(%rdx)
	movdqa (%rdi),%xmm6
	movdqa 0x10(%rdi),%xmm4
	movdqa %xmm6,%xmm7
	movdqa %xmm4,%xmm3
	psrldq $0x2,%xmm7
	pslldq $0xe,%xmm3
	movdqa %xmm6,%xmm0
	movdqa %xmm4,%xmm2
	psrldq $0xe,%xmm0
	pslldq $0x2,%xmm2
	por    %xmm3,%xmm7
	por    %xmm2,%xmm0
	movdqa %xmm6,%xmm1
	movdqa %xmm4,%xmm5
	pslldq $0x2,%xmm1
	psrldq $0x2,%xmm5
	movdqa %xmm4,%xmm3
	psrldq $0xe,%xmm3
	por    -0x30(%rbp),%xmm1
	por    -0x10(%rbp),%xmm5
	movdqa %xmm3,-0x30(%rbp)
	pmullw 0x2649b(%rip),%xmm6        # 6bd70 <PW_THREE>
	pmullw 0x26493(%rip),%xmm4        # 6bd70 <PW_THREE>
	paddw  0x264ab(%rip),%xmm1        # 6bd90 <PW_EIGHT>
	paddw  0x264a3(%rip),%xmm0        # 6bd90 <PW_EIGHT>
	paddw  0x2648b(%rip),%xmm7        # 6bd80 <PW_SEVEN>
	paddw  0x26483(%rip),%xmm5        # 6bd80 <PW_SEVEN>
	paddw  %xmm6,%xmm1
	paddw  %xmm4,%xmm0
	psrlw  $0x4,%xmm1
	psrlw  $0x4,%xmm0
	paddw  %xmm6,%xmm7
	paddw  %xmm4,%xmm5
	psrlw  $0x4,%xmm7
	psrlw  $0x4,%xmm5
	psllw  $0x8,%xmm7
	psllw  $0x8,%xmm5
	por    %xmm7,%xmm1
	por    %xmm5,%xmm0
	movdqa %xmm1,(%rdi)
	movdqa %xmm0,0x10(%rdi)
	sub    $0x10,%rax
	add    $0x10,%rcx
	add    $0x10,%rbx
	add    $0x10,%rsi
	add    $0x20,%rdx
	add    $0x20,%rdi
	cmp    $0x10,%rax
	ja     45721 <jsimd_h2v2_fancy_upsample_sse2.columnloop>
	test   %rax,%rax
	jne    456fb <jsimd_h2v2_fancy_upsample_sse2.columnloop_last>
	pop    %rsi
	pop    %rdi
	pop    %rcx
	pop    %rax
	add    $0x8,%rsi
	add    $0x10,%rdi
	sub    $0x2,%rcx
	jg     45637 <jsimd_h2v2_fancy_upsample_sse2.rowloop>

004597d <jsimd_h2v2_fancy_upsample_sse2.return>:
	pop    %rbx
	pop    %r15
	pop    %r14
	pop    %r13
	pop    %r12
	pop    %r11
	pop    %r10
	mov    %rbp,%rsp
	pop    %rsp
	pop    %rbp
	retq   

0045990 <jsimd_h2v1_upsample_sse2>:
	push   %rbp
	mov    %rsp,%rax
	mov    %rsp,%rbp
	push   %r10
	push   %r11
	push   %r12
	push   %r13
	push   %r14
	push   %r15
	mov    %rdi,%r10
	mov    %rsi,%r11
	mov    %rdx,%r12
	mov    %rcx,%r13
	mov    %r8,%r14
	mov    %r9,%r15
	mov    %r11d,%edx
	add    $0x1f,%rdx
	and    $0xffffffffffffffe0,%rdx
	je     45a3b <jsimd_h2v1_upsample_sse2.return>
	mov    %r10,%rcx
	test   %rcx,%rcx
	je     45a3b <jsimd_h2v1_upsample_sse2.return>
	mov    %r12,%rsi
	mov    %r13,%rdi
	mov    (%rdi),%rdi

00459d7 <jsimd_h2v1_upsample_sse2.rowloop>:
	push   %rdi
	push   %rsi
	mov    (%rsi),%rsi
	mov    (%rdi),%rdi
	mov    %rdx,%rax

00459e2 <jsimd_h2v1_upsample_sse2.columnloop>:
	movdqa (%rsi),%xmm0
	movdqa %xmm0,%xmm1
	punpcklbw %xmm0,%xmm0
	punpckhbw %xmm1,%xmm1
	movdqa %xmm0,(%rdi)
	movdqa %xmm1,0x10(%rdi)
	sub    $0x20,%rax
	je     45a2c <jsimd_h2v1_upsample_sse2.nextrow>
	movdqa 0x10(%rsi),%xmm2
	movdqa %xmm2,%xmm3
	punpcklbw %xmm2,%xmm2
	punpckhbw %xmm3,%xmm3
	movdqa %xmm2,0x20(%rdi)
	movdqa %xmm3,0x30(%rdi)
	sub    $0x20,%rax
	je     45a2c <jsimd_h2v1_upsample_sse2.nextrow>
	add    $0x20,%rsi
	add    $0x40,%rdi
	jmp    459e2 <jsimd_h2v1_upsample_sse2.columnloop>

0045a2c <jsimd_h2v1_upsample_sse2.nextrow>:
	pop    %rsi
	pop    %rdi
	add    $0x8,%rsi
	add    $0x8,%rdi
	dec    %rcx
	jg     459d7 <jsimd_h2v1_upsample_sse2.rowloop>

0045a3b <jsimd_h2v1_upsample_sse2.return>:
	pop    %r15
	pop    %r14
	pop    %r13
	pop    %r12
	pop    %r11
	pop    %r10
	pop    %rbp
	retq   
	nop
	nop
	nop
	nop
	nop
	nop
	nop

0045a50 <jsimd_h2v2_upsample_sse2>:
	push   %rbp
	mov    %rsp,%rax
	mov    %rsp,%rbp
	push   %r10
	push   %r11
	push   %r12
	push   %r13
	push   %r14
	push   %r15
	mov    %rdi,%r10
	mov    %rsi,%r11
	mov    %rdx,%r12
	mov    %rcx,%r13
	mov    %r8,%r14
	mov    %r9,%r15
	push   %rbx
	mov    %r11d,%edx
	add    $0x1f,%rdx
	and    $0xffffffffffffffe0,%rdx
	je     45b20 <jsimd_h2v2_upsample_sse2.return>
	mov    %r10,%rcx
	test   %rcx,%rcx
	je     45b20 <jsimd_h2v2_upsample_sse2.return>
	mov    %r12,%rsi
	mov    %r13,%rdi
	mov    (%rdi),%rdi

0045a9c <jsimd_h2v2_upsample_sse2.rowloop>:
	push   %rdi
	push   %rsi
	mov    (%rsi),%rsi
	mov    (%rdi),%rbx
	mov    0x8(%rdi),%rdi
	mov    %rdx,%rax

0045aab <jsimd_h2v2_upsample_sse2.columnloop>:
	movdqa (%rsi),%xmm0
	movdqa %xmm0,%xmm1
	punpcklbw %xmm0,%xmm0
	punpckhbw %xmm1,%xmm1
	movdqa %xmm0,(%rbx)
	movdqa %xmm1,0x10(%rbx)
	movdqa %xmm0,(%rdi)
	movdqa %xmm1,0x10(%rdi)
	sub    $0x20,%rax
	je     45b0c <jsimd_h2v2_upsample_sse2.nextrow>
	movdqa 0x10(%rsi),%xmm2
	movdqa %xmm2,%xmm3
	punpcklbw %xmm2,%xmm2
	punpckhbw %xmm3,%xmm3
	movdqa %xmm2,0x20(%rbx)
	movdqa %xmm3,0x30(%rbx)
	movdqa %xmm2,0x20(%rdi)
	movdqa %xmm3,0x30(%rdi)
	sub    $0x20,%rax
	je     45b0c <jsimd_h2v2_upsample_sse2.nextrow>
	add    $0x20,%rsi
	add    $0x40,%rbx
	add    $0x40,%rdi
	jmp    45aab <jsimd_h2v2_upsample_sse2.columnloop>

0045b0c <jsimd_h2v2_upsample_sse2.nextrow>:
	pop    %rsi
	pop    %rdi
	add    $0x8,%rsi
	add    $0x10,%rdi
	sub    $0x2,%rcx
	jg     45a9c <jsimd_h2v2_upsample_sse2.rowloop>

0045b20 <jsimd_h2v2_upsample_sse2.return>:
	pop    %rbx
	pop    %r15
	pop    %r14
	pop    %r13
	pop    %r12
	pop    %r11
	pop    %r10
	pop    %rbp
	retq   
	nop

0045b30 <jsimd_fdct_ifast_sse2>:
	push   %rbp
	mov    %rsp,%rax
	sub    $0x4,%rsp
	and    $0xfffffffffffffff0,%rsp
	mov    %rax,(%rsp)
	mov    %rsp,%rbp
	lea    -0x20(%rbp),%rsp
	push   %r10
	push   %r11
	push   %r12
	push   %r13
	push   %r14
	push   %r15
	mov    %rdi,%r10
	mov    %rsi,%r11
	mov    %rdx,%r12
	mov    %rcx,%r13
	mov    %r8,%r14
	mov    %r9,%r15
	mov    %r10,%rdx
	movdqa (%rdx),%xmm0
	movdqa 0x10(%rdx),%xmm1
	movdqa 0x20(%rdx),%xmm2
	movdqa 0x30(%rdx),%xmm3
	movdqa %xmm0,%xmm4
	punpcklwd %xmm1,%xmm0
	punpckhwd %xmm1,%xmm4
	movdqa %xmm2,%xmm5
	punpcklwd %xmm3,%xmm2
	punpckhwd %xmm3,%xmm5
	movdqa 0x40(%rdx),%xmm6
	movdqa 0x50(%rdx),%xmm7
	movdqa 0x60(%rdx),%xmm1
	movdqa 0x70(%rdx),%xmm3
	movdqa %xmm2,-0x20(%rbp)
	movdqa %xmm5,-0x10(%rbp)
	movdqa %xmm6,%xmm2
	punpcklwd %xmm7,%xmm6
	punpckhwd %xmm7,%xmm2
	movdqa %xmm1,%xmm5
	punpcklwd %xmm3,%xmm1
	punpckhwd %xmm3,%xmm5
	movdqa %xmm6,%xmm7
	punpckldq %xmm1,%xmm6
	punpckhdq %xmm1,%xmm7
	movdqa %xmm2,%xmm3
	punpckldq %xmm5,%xmm2
	punpckhdq %xmm5,%xmm3
	movdqa -0x20(%rbp),%xmm1
	movdqa -0x10(%rbp),%xmm5
	movdqa %xmm7,-0x20(%rbp)
	movdqa %xmm2,-0x10(%rbp)
	movdqa %xmm0,%xmm7
	punpckldq %xmm1,%xmm0
	punpckhdq %xmm1,%xmm7
	movdqa %xmm4,%xmm2
	punpckldq %xmm5,%xmm4
	punpckhdq %xmm5,%xmm2
	movdqa %xmm0,%xmm1
	punpcklqdq %xmm6,%xmm0
	punpckhqdq %xmm6,%xmm1
	movdqa %xmm2,%xmm5
	punpcklqdq %xmm3,%xmm2
	punpckhqdq %xmm3,%xmm5
	movdqa %xmm1,%xmm6
	movdqa %xmm0,%xmm3
	psubw  %xmm2,%xmm1
	psubw  %xmm5,%xmm0
	paddw  %xmm2,%xmm6
	paddw  %xmm5,%xmm3
	movdqa -0x20(%rbp),%xmm2
	movdqa -0x10(%rbp),%xmm5
	movdqa %xmm1,-0x20(%rbp)
	movdqa %xmm0,-0x10(%rbp)
	movdqa %xmm7,%xmm1
	punpcklqdq %xmm2,%xmm7
	punpckhqdq %xmm2,%xmm1
	movdqa %xmm4,%xmm0
	punpcklqdq %xmm5,%xmm4
	punpckhqdq %xmm5,%xmm0
	movdqa %xmm1,%xmm2
	movdqa %xmm7,%xmm5
	paddw  %xmm4,%xmm1
	paddw  %xmm0,%xmm7
	psubw  %xmm4,%xmm2
	psubw  %xmm0,%xmm5
	movdqa %xmm3,%xmm4
	movdqa %xmm6,%xmm0
	psubw  %xmm1,%xmm3
	psubw  %xmm7,%xmm6
	paddw  %xmm1,%xmm4
	paddw  %xmm7,%xmm0
	paddw  %xmm3,%xmm6
	psllw  $0x2,%xmm6
	pmulhw 0x260f6(%rip),%xmm6        # 6bda0 <PW_F0707>
	movdqa %xmm4,%xmm1
	movdqa %xmm3,%xmm7
	psubw  %xmm0,%xmm4
	psubw  %xmm6,%xmm3
	paddw  %xmm0,%xmm1
	paddw  %xmm6,%xmm7
	movdqa -0x20(%rbp),%xmm0
	movdqa -0x10(%rbp),%xmm6
	movdqa %xmm4,-0x20(%rbp)
	movdqa %xmm3,-0x10(%rbp)
	paddw  %xmm5,%xmm2
	paddw  %xmm0,%xmm5
	paddw  %xmm6,%xmm0
	psllw  $0x2,%xmm2
	psllw  $0x2,%xmm0
	psllw  $0x2,%xmm5
	pmulhw 0x260a7(%rip),%xmm5        # 6bda0 <PW_F0707>
	movdqa %xmm2,%xmm4
	psubw  %xmm0,%xmm2
	pmulhw 0x260a7(%rip),%xmm2        # 6bdb0 <PW_F0382>
	pmulhw 0x260af(%rip),%xmm4        # 6bdc0 <PW_F0541>
	pmulhw 0x260b7(%rip),%xmm0        # 6bdd0 <PW_F1306>
	paddw  %xmm2,%xmm4
	paddw  %xmm2,%xmm0
	movdqa %xmm6,%xmm3
	psubw  %xmm5,%xmm6
	paddw  %xmm5,%xmm3
	movdqa %xmm6,%xmm2
	movdqa %xmm3,%xmm5
	psubw  %xmm4,%xmm6
	psubw  %xmm0,%xmm3
	paddw  %xmm4,%xmm2
	paddw  %xmm0,%xmm5
	movdqa %xmm1,%xmm4
	punpcklwd %xmm5,%xmm1
	punpckhwd %xmm5,%xmm4
	movdqa %xmm7,%xmm0
	punpcklwd %xmm6,%xmm7
	punpckhwd %xmm6,%xmm0
	movdqa -0x20(%rbp),%xmm5
	movdqa -0x10(%rbp),%xmm6
	movdqa %xmm7,-0x20(%rbp)
	movdqa %xmm0,-0x10(%rbp)
	movdqa %xmm5,%xmm7
	punpcklwd %xmm2,%xmm5
	punpckhwd %xmm2,%xmm7
	movdqa %xmm6,%xmm0
	punpcklwd %xmm3,%xmm6
	punpckhwd %xmm3,%xmm0
	movdqa %xmm5,%xmm2
	punpckldq %xmm6,%xmm5
	punpckhdq %xmm6,%xmm2
	movdqa %xmm7,%xmm3
	punpckldq %xmm0,%xmm7
	punpckhdq %xmm0,%xmm3
	movdqa -0x20(%rbp),%xmm6
	movdqa -0x10(%rbp),%xmm0
	movdqa %xmm2,-0x20(%rbp)
	movdqa %xmm7,-0x10(%rbp)
	movdqa %xmm1,%xmm2
	punpckldq %xmm6,%xmm1
	punpckhdq %xmm6,%xmm2
	movdqa %xmm4,%xmm7
	punpckldq %xmm0,%xmm4
	punpckhdq %xmm0,%xmm7
	movdqa %xmm1,%xmm6
	punpcklqdq %xmm5,%xmm1
	punpckhqdq %xmm5,%xmm6
	movdqa %xmm7,%xmm0
	punpcklqdq %xmm3,%xmm7
	punpckhqdq %xmm3,%xmm0
	movdqa %xmm6,%xmm5
	movdqa %xmm1,%xmm3
	psubw  %xmm7,%xmm6
	psubw  %xmm0,%xmm1
	paddw  %xmm7,%xmm5
	paddw  %xmm0,%xmm3
	movdqa -0x20(%rbp),%xmm7
	movdqa -0x10(%rbp),%xmm0
	movdqa %xmm6,-0x20(%rbp)
	movdqa %xmm1,-0x10(%rbp)
	movdqa %xmm2,%xmm6
	punpcklqdq %xmm7,%xmm2
	punpckhqdq %xmm7,%xmm6
	movdqa %xmm4,%xmm1
	punpcklqdq %xmm0,%xmm4
	punpckhqdq %xmm0,%xmm1
	movdqa %xmm6,%xmm7
	movdqa %xmm2,%xmm0
	paddw  %xmm4,%xmm6
	paddw  %xmm1,%xmm2
	psubw  %xmm4,%xmm7
	psubw  %xmm1,%xmm0
	movdqa %xmm3,%xmm4
	movdqa %xmm5,%xmm1
	psubw  %xmm6,%xmm3
	psubw  %xmm2,%xmm5
	paddw  %xmm6,%xmm4
	paddw  %xmm2,%xmm1
	paddw  %xmm3,%xmm5
	psllw  $0x2,%xmm5
	pmulhw 0x25f36(%rip),%xmm5        # 6bda0 <PW_F0707>
	movdqa %xmm4,%xmm6
	movdqa %xmm3,%xmm2
	psubw  %xmm1,%xmm4
	psubw  %xmm5,%xmm3
	paddw  %xmm1,%xmm6
	paddw  %xmm5,%xmm2
	movdqa %xmm4,0x40(%rdx)
	movdqa %xmm3,0x60(%rdx)
	movdqa %xmm6,(%rdx)
	movdqa %xmm2,0x20(%rdx)
	movdqa -0x20(%rbp),%xmm1
	movdqa -0x10(%rbp),%xmm5
	paddw  %xmm0,%xmm7
	paddw  %xmm1,%xmm0
	paddw  %xmm5,%xmm1
	psllw  $0x2,%xmm7
	psllw  $0x2,%xmm1
	psllw  $0x2,%xmm0
	pmulhw 0x25ede(%rip),%xmm0        # 6bda0 <PW_F0707>
	movdqa %xmm7,%xmm4
	psubw  %xmm1,%xmm7
	pmulhw 0x25ede(%rip),%xmm7        # 6bdb0 <PW_F0382>
	pmulhw 0x25ee6(%rip),%xmm4        # 6bdc0 <PW_F0541>
	pmulhw 0x25eee(%rip),%xmm1        # 6bdd0 <PW_F1306>
	paddw  %xmm7,%xmm4
	paddw  %xmm7,%xmm1
	movdqa %xmm5,%xmm3
	psubw  %xmm0,%xmm5
	paddw  %xmm0,%xmm3
	movdqa %xmm5,%xmm6
	movdqa %xmm3,%xmm2
	psubw  %xmm4,%xmm5
	psubw  %xmm1,%xmm3
	paddw  %xmm4,%xmm6
	paddw  %xmm1,%xmm2
	movdqa %xmm5,0x30(%rdx)
	movdqa %xmm3,0x70(%rdx)
	movdqa %xmm6,0x50(%rdx)
	movdqa %xmm2,0x10(%rdx)
	pop    %r15
	pop    %r14
	pop    %r13
	pop    %r12
	pop    %r11
	pop    %r10
	mov    %rbp,%rsp
	pop    %rsp
	pop    %rbp
	retq   
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop

0045f40 <jsimd_fdct_islow_sse2>:
	push   %rbp
	mov    %rsp,%rax
	sub    $0x4,%rsp
	and    $0xfffffffffffffff0,%rsp
	mov    %rax,(%rsp)
	mov    %rsp,%rbp
	lea    -0x60(%rbp),%rsp
	push   %r10
	push   %r11
	push   %r12
	push   %r13
	push   %r14
	push   %r15
	mov    %rdi,%r10
	mov    %rsi,%r11
	mov    %rdx,%r12
	mov    %rcx,%r13
	mov    %r8,%r14
	mov    %r9,%r15
	mov    %r10,%rdx
	movdqa (%rdx),%xmm0
	movdqa 0x10(%rdx),%xmm1
	movdqa 0x20(%rdx),%xmm2
	movdqa 0x30(%rdx),%xmm3
	movdqa %xmm0,%xmm4
	punpcklwd %xmm1,%xmm0
	punpckhwd %xmm1,%xmm4
	movdqa %xmm2,%xmm5
	punpcklwd %xmm3,%xmm2
	punpckhwd %xmm3,%xmm5
	movdqa 0x40(%rdx),%xmm6
	movdqa 0x50(%rdx),%xmm7
	movdqa 0x60(%rdx),%xmm1
	movdqa 0x70(%rdx),%xmm3
	movdqa %xmm2,-0x60(%rbp)
	movdqa %xmm5,-0x50(%rbp)
	movdqa %xmm6,%xmm2
	punpcklwd %xmm7,%xmm6
	punpckhwd %xmm7,%xmm2
	movdqa %xmm1,%xmm5
	punpcklwd %xmm3,%xmm1
	punpckhwd %xmm3,%xmm5
	movdqa %xmm6,%xmm7
	punpckldq %xmm1,%xmm6
	punpckhdq %xmm1,%xmm7
	movdqa %xmm2,%xmm3
	punpckldq %xmm5,%xmm2
	punpckhdq %xmm5,%xmm3
	movdqa -0x60(%rbp),%xmm1
	movdqa -0x50(%rbp),%xmm5
	movdqa %xmm7,-0x40(%rbp)
	movdqa %xmm2,-0x30(%rbp)
	movdqa %xmm0,%xmm7
	punpckldq %xmm1,%xmm0
	punpckhdq %xmm1,%xmm7
	movdqa %xmm4,%xmm2
	punpckldq %xmm5,%xmm4
	punpckhdq %xmm5,%xmm2
	movdqa %xmm0,%xmm1
	punpcklqdq %xmm6,%xmm0
	punpckhqdq %xmm6,%xmm1
	movdqa %xmm2,%xmm5
	punpcklqdq %xmm3,%xmm2
	punpckhqdq %xmm3,%xmm5
	movdqa %xmm1,%xmm6
	movdqa %xmm0,%xmm3
	psubw  %xmm2,%xmm1
	psubw  %xmm5,%xmm0
	paddw  %xmm2,%xmm6
	paddw  %xmm5,%xmm3
	movdqa -0x40(%rbp),%xmm2
	movdqa -0x30(%rbp),%xmm5
	movdqa %xmm1,-0x60(%rbp)
	movdqa %xmm0,-0x50(%rbp)
	movdqa %xmm7,%xmm1
	punpcklqdq %xmm2,%xmm7
	punpckhqdq %xmm2,%xmm1
	movdqa %xmm4,%xmm0
	punpcklqdq %xmm5,%xmm4
	punpckhqdq %xmm5,%xmm0
	movdqa %xmm1,%xmm2
	movdqa %xmm7,%xmm5
	paddw  %xmm4,%xmm1
	paddw  %xmm0,%xmm7
	psubw  %xmm4,%xmm2
	psubw  %xmm0,%xmm5
	movdqa %xmm3,%xmm4
	movdqa %xmm6,%xmm0
	paddw  %xmm1,%xmm3
	paddw  %xmm7,%xmm6
	psubw  %xmm1,%xmm4
	psubw  %xmm7,%xmm0
	movdqa %xmm3,%xmm1
	paddw  %xmm6,%xmm3
	psubw  %xmm6,%xmm1
	psllw  $0x2,%xmm3
	psllw  $0x2,%xmm1
	movdqa %xmm3,-0x40(%rbp)
	movdqa %xmm1,-0x30(%rbp)
	movdqa %xmm4,%xmm7
	movdqa %xmm4,%xmm6
	punpcklwd %xmm0,%xmm7
	punpckhwd %xmm0,%xmm6
	movdqa %xmm7,%xmm4
	movdqa %xmm6,%xmm0
	pmaddwd 0x25cf7(%rip),%xmm7        # 6bde0 <PW_F130_F054>
	pmaddwd 0x25cef(%rip),%xmm6        # 6bde0 <PW_F130_F054>
	pmaddwd 0x25cf7(%rip),%xmm4        # 6bdf0 <PW_F054_MF130>
	pmaddwd 0x25cef(%rip),%xmm0        # 6bdf0 <PW_F054_MF130>
	paddd  0x25d57(%rip),%xmm7        # 6be60 <PD_DESCALE_P1>
	paddd  0x25d4f(%rip),%xmm6        # 6be60 <PD_DESCALE_P1>
	psrad  $0xb,%xmm7
	psrad  $0xb,%xmm6
	paddd  0x25d3d(%rip),%xmm4        # 6be60 <PD_DESCALE_P1>
	paddd  0x25d35(%rip),%xmm0        # 6be60 <PD_DESCALE_P1>
	psrad  $0xb,%xmm4
	psrad  $0xb,%xmm0
	packssdw %xmm6,%xmm7
	packssdw %xmm0,%xmm4
	movdqa %xmm7,-0x20(%rbp)
	movdqa %xmm4,-0x10(%rbp)
	movdqa -0x60(%rbp),%xmm3
	movdqa -0x50(%rbp),%xmm1
	movdqa %xmm2,%xmm6
	movdqa %xmm5,%xmm0
	paddw  %xmm3,%xmm6
	paddw  %xmm1,%xmm0
	movdqa %xmm6,%xmm7
	movdqa %xmm6,%xmm4
	punpcklwd %xmm0,%xmm7
	punpckhwd %xmm0,%xmm4
	movdqa %xmm7,%xmm6
	movdqa %xmm4,%xmm0
	pmaddwd 0x25c7f(%rip),%xmm7        # 6be00 <PW_MF078_F117>
	pmaddwd 0x25c77(%rip),%xmm4        # 6be00 <PW_MF078_F117>
	pmaddwd 0x25c7f(%rip),%xmm6        # 6be10 <PW_F117_F078>
	pmaddwd 0x25c77(%rip),%xmm0        # 6be10 <PW_F117_F078>
	movdqa %xmm7,-0x60(%rbp)
	movdqa %xmm4,-0x50(%rbp)
	movdqa %xmm2,%xmm7
	movdqa %xmm2,%xmm4
	punpcklwd %xmm1,%xmm7
	punpckhwd %xmm1,%xmm4
	movdqa %xmm7,%xmm2
	movdqa %xmm4,%xmm1
	pmaddwd 0x25c5d(%rip),%xmm7        # 6be20 <PW_MF060_MF089>
	pmaddwd 0x25c55(%rip),%xmm4        # 6be20 <PW_MF060_MF089>
	pmaddwd 0x25c5d(%rip),%xmm2        # 6be30 <PW_MF089_F060>
	pmaddwd 0x25c55(%rip),%xmm1        # 6be30 <PW_MF089_F060>
	paddd  -0x60(%rbp),%xmm7
	paddd  -0x50(%rbp),%xmm4
	paddd  %xmm6,%xmm2
	paddd  %xmm0,%xmm1
	paddd  0x25c6b(%rip),%xmm7        # 6be60 <PD_DESCALE_P1>
	paddd  0x25c63(%rip),%xmm4        # 6be60 <PD_DESCALE_P1>
	psrad  $0xb,%xmm7
	psrad  $0xb,%xmm4
	paddd  0x25c51(%rip),%xmm2        # 6be60 <PD_DESCALE_P1>
	paddd  0x25c49(%rip),%xmm1        # 6be60 <PD_DESCALE_P1>
	psrad  $0xb,%xmm2
	psrad  $0xb,%xmm1
	packssdw %xmm4,%xmm7
	packssdw %xmm1,%xmm2
	movdqa %xmm5,%xmm4
	movdqa %xmm5,%xmm1
	punpcklwd %xmm3,%xmm4
	punpckhwd %xmm3,%xmm1
	movdqa %xmm4,%xmm5
	movdqa %xmm1,%xmm3
	pmaddwd 0x25bf7(%rip),%xmm4        # 6be40 <PW_MF050_MF256>
	pmaddwd 0x25bef(%rip),%xmm1        # 6be40 <PW_MF050_MF256>
	pmaddwd 0x25bf7(%rip),%xmm5        # 6be50 <PW_MF256_F050>
	pmaddwd 0x25bef(%rip),%xmm3        # 6be50 <PW_MF256_F050>
	paddd  %xmm6,%xmm4
	paddd  %xmm0,%xmm1
	paddd  -0x60(%rbp),%xmm5
	paddd  -0x50(%rbp),%xmm3
	paddd  0x25be5(%rip),%xmm4        # 6be60 <PD_DESCALE_P1>
	paddd  0x25bdd(%rip),%xmm1        # 6be60 <PD_DESCALE_P1>
	psrad  $0xb,%xmm4
	psrad  $0xb,%xmm1
	paddd  0x25bcb(%rip),%xmm5        # 6be60 <PD_DESCALE_P1>
	paddd  0x25bc3(%rip),%xmm3        # 6be60 <PD_DESCALE_P1>
	psrad  $0xb,%xmm5
	psrad  $0xb,%xmm3
	packssdw %xmm1,%xmm4
	packssdw %xmm3,%xmm5
	movdqa -0x40(%rbp),%xmm6
	movdqa -0x20(%rbp),%xmm0
	movdqa %xmm6,%xmm1
	punpcklwd %xmm2,%xmm6
	punpckhwd %xmm2,%xmm1
	movdqa %xmm0,%xmm3
	punpcklwd %xmm5,%xmm0
	punpckhwd %xmm5,%xmm3
	movdqa -0x30(%rbp),%xmm2
	movdqa -0x10(%rbp),%xmm5
	movdqa %xmm0,-0x60(%rbp)
	movdqa %xmm3,-0x50(%rbp)
	movdqa %xmm2,%xmm0
	punpcklwd %xmm4,%xmm2
	punpckhwd %xmm4,%xmm0
	movdqa %xmm5,%xmm3
	punpcklwd %xmm7,%xmm5
	punpckhwd %xmm7,%xmm3
	movdqa %xmm2,%xmm4
	punpckldq %xmm5,%xmm2
	punpckhdq %xmm5,%xmm4
	movdqa %xmm0,%xmm7
	punpckldq %xmm3,%xmm0
	punpckhdq %xmm3,%xmm7
	movdqa -0x60(%rbp),%xmm5
	movdqa -0x50(%rbp),%xmm3
	movdqa %xmm4,-0x40(%rbp)
	movdqa %xmm0,-0x30(%rbp)
	movdqa %xmm6,%xmm4
	punpckldq %xmm5,%xmm6
	punpckhdq %xmm5,%xmm4
	movdqa %xmm1,%xmm0
	punpckldq %xmm3,%xmm1
	punpckhdq %xmm3,%xmm0
	movdqa %xmm6,%xmm5
	punpcklqdq %xmm2,%xmm6
	punpckhqdq %xmm2,%xmm5
	movdqa %xmm0,%xmm3
	punpcklqdq %xmm7,%xmm0
	punpckhqdq %xmm7,%xmm3
	movdqa %xmm5,%xmm2
	movdqa %xmm6,%xmm7
	psubw  %xmm0,%xmm5
	psubw  %xmm3,%xmm6
	paddw  %xmm0,%xmm2
	paddw  %xmm3,%xmm7
	movdqa -0x40(%rbp),%xmm0
	movdqa -0x30(%rbp),%xmm3
	movdqa %xmm5,-0x60(%rbp)
	movdqa %xmm6,-0x50(%rbp)
	movdqa %xmm4,%xmm5
	punpcklqdq %xmm0,%xmm4
	punpckhqdq %xmm0,%xmm5
	movdqa %xmm1,%xmm6
	punpcklqdq %xmm3,%xmm1
	punpckhqdq %xmm3,%xmm6
	movdqa %xmm5,%xmm0
	movdqa %xmm4,%xmm3
	paddw  %xmm1,%xmm5
	paddw  %xmm6,%xmm4
	psubw  %xmm1,%xmm0
	psubw  %xmm6,%xmm3
	movdqa %xmm7,%xmm1
	movdqa %xmm2,%xmm6
	paddw  %xmm5,%xmm7
	paddw  %xmm4,%xmm2
	psubw  %xmm5,%xmm1
	psubw  %xmm4,%xmm6
	movdqa %xmm7,%xmm5
	paddw  %xmm2,%xmm7
	psubw  %xmm2,%xmm5
	paddw  0x25a9f(%rip),%xmm7        # 6be80 <PW_DESCALE_P2X>
	paddw  0x25a97(%rip),%xmm5        # 6be80 <PW_DESCALE_P2X>
	psraw  $0x2,%xmm7
	psraw  $0x2,%xmm5
	movdqa %xmm7,(%rdx)
	movdqa %xmm5,0x40(%rdx)
	movdqa %xmm1,%xmm4
	movdqa %xmm1,%xmm2
	punpcklwd %xmm6,%xmm4
	punpckhwd %xmm6,%xmm2
	movdqa %xmm4,%xmm1
	movdqa %xmm2,%xmm6
	pmaddwd 0x259c4(%rip),%xmm4        # 6bde0 <PW_F130_F054>
	pmaddwd 0x259bc(%rip),%xmm2        # 6bde0 <PW_F130_F054>
	pmaddwd 0x259c4(%rip),%xmm1        # 6bdf0 <PW_F054_MF130>
	pmaddwd 0x259bc(%rip),%xmm6        # 6bdf0 <PW_F054_MF130>
	paddd  0x25a34(%rip),%xmm4        # 6be70 <PD_DESCALE_P2>
	paddd  0x25a2c(%rip),%xmm2        # 6be70 <PD_DESCALE_P2>
	psrad  $0xf,%xmm4
	psrad  $0xf,%xmm2
	paddd  0x25a1a(%rip),%xmm1        # 6be70 <PD_DESCALE_P2>
	paddd  0x25a12(%rip),%xmm6        # 6be70 <PD_DESCALE_P2>
	psrad  $0xf,%xmm1
	psrad  $0xf,%xmm6
	packssdw %xmm2,%xmm4
	packssdw %xmm6,%xmm1
	movdqa %xmm4,0x20(%rdx)
	movdqa %xmm1,0x60(%rdx)
	movdqa -0x60(%rbp),%xmm7
	movdqa -0x50(%rbp),%xmm5
	movdqa %xmm0,%xmm2
	movdqa %xmm3,%xmm6
	paddw  %xmm7,%xmm2
	paddw  %xmm5,%xmm6
	movdqa %xmm2,%xmm4
	movdqa %xmm2,%xmm1
	punpcklwd %xmm6,%xmm4
	punpckhwd %xmm6,%xmm1
	movdqa %xmm4,%xmm2
	movdqa %xmm1,%xmm6
	pmaddwd 0x2594c(%rip),%xmm4        # 6be00 <PW_MF078_F117>
	pmaddwd 0x25944(%rip),%xmm1        # 6be00 <PW_MF078_F117>
	pmaddwd 0x2594c(%rip),%xmm2        # 6be10 <PW_F117_F078>
	pmaddwd 0x25944(%rip),%xmm6        # 6be10 <PW_F117_F078>
	movdqa %xmm4,-0x60(%rbp)
	movdqa %xmm1,-0x50(%rbp)
	movdqa %xmm0,%xmm4
	movdqa %xmm0,%xmm1
	punpcklwd %xmm5,%xmm4
	punpckhwd %xmm5,%xmm1
	movdqa %xmm4,%xmm0
	movdqa %xmm1,%xmm5
	pmaddwd 0x2592a(%rip),%xmm4        # 6be20 <PW_MF060_MF089>
	pmaddwd 0x25922(%rip),%xmm1        # 6be20 <PW_MF060_MF089>
	pmaddwd 0x2592a(%rip),%xmm0        # 6be30 <PW_MF089_F060>
	pmaddwd 0x25922(%rip),%xmm5        # 6be30 <PW_MF089_F060>
	paddd  -0x60(%rbp),%xmm4
	paddd  -0x50(%rbp),%xmm1
	paddd  %xmm2,%xmm0
	paddd  %xmm6,%xmm5
	paddd  0x25948(%rip),%xmm4        # 6be70 <PD_DESCALE_P2>
	paddd  0x25940(%rip),%xmm1        # 6be70 <PD_DESCALE_P2>
	psrad  $0xf,%xmm4
	psrad  $0xf,%xmm1
	paddd  0x2592e(%rip),%xmm0        # 6be70 <PD_DESCALE_P2>
	paddd  0x25926(%rip),%xmm5        # 6be70 <PD_DESCALE_P2>
	psrad  $0xf,%xmm0
	psrad  $0xf,%xmm5
	packssdw %xmm1,%xmm4
	packssdw %xmm5,%xmm0
	movdqa %xmm4,0x70(%rdx)
	movdqa %xmm0,0x10(%rdx)
	movdqa %xmm3,%xmm1
	movdqa %xmm3,%xmm5
	punpcklwd %xmm7,%xmm1
	punpckhwd %xmm7,%xmm5
	movdqa %xmm1,%xmm3
	movdqa %xmm5,%xmm7
	pmaddwd 0x258ba(%rip),%xmm1        # 6be40 <PW_MF050_MF256>
	pmaddwd 0x258b2(%rip),%xmm5        # 6be40 <PW_MF050_MF256>
	pmaddwd 0x258ba(%rip),%xmm3        # 6be50 <PW_MF256_F050>
	pmaddwd 0x258b2(%rip),%xmm7        # 6be50 <PW_MF256_F050>
	paddd  %xmm2,%xmm1
	paddd  %xmm6,%xmm5
	paddd  -0x60(%rbp),%xmm3
	paddd  -0x50(%rbp),%xmm7
	paddd  0x258b8(%rip),%xmm1        # 6be70 <PD_DESCALE_P2>
	paddd  0x258b0(%rip),%xmm5        # 6be70 <PD_DESCALE_P2>
	psrad  $0xf,%xmm1
	psrad  $0xf,%xmm5
	paddd  0x2589e(%rip),%xmm3        # 6be70 <PD_DESCALE_P2>
	paddd  0x25896(%rip),%xmm7        # 6be70 <PD_DESCALE_P2>
	psrad  $0xf,%xmm3
	psrad  $0xf,%xmm7
	packssdw %xmm5,%xmm1
	packssdw %xmm7,%xmm3
	movdqa %xmm1,0x50(%rdx)
	movdqa %xmm3,0x30(%rdx)
	pop    %r15
	pop    %r14
	pop    %r13
	pop    %r12
	pop    %r11
	pop    %r10
	mov    %rbp,%rsp
	pop    %rsp
	pop    %rbp
	retq   
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop

0046610 <jsimd_idct_float_sse2>:
	push   %rbp
	mov    %rsp,%rax
	sub    $0x4,%rsp
	and    $0xfffffffffffffff0,%rsp
	mov    %rax,(%rsp)
	mov    %rsp,%rbp
	lea    -0x120(%rbp),%rsp
	push   %r10
	push   %r11
	push   %r12
	push   %r13
	push   %r14
	push   %r15
	mov    %rdi,%r10
	mov    %rsi,%r11
	mov    %rdx,%r12
	mov    %rcx,%r13
	mov    %r8,%r14
	mov    %r9,%r15
	push   %rbx
	mov    %r10,%rdx
	mov    %r11,%rsi
	lea    -0x120(%rbp),%rdi
	mov    $0x2,%ecx

004665b <jsimd_idct_float_sse2.columnloop>:
	mov    0x10(%rsi),%eax
	or     0x20(%rsi),%eax
	jne    466ff <jsimd_idct_float_sse2.columnDCT>
	movq   0x10(%rsi),%xmm1
	movq   0x20(%rsi),%xmm2
	movq   0x30(%rsi),%xmm3
	movq   0x40(%rsi),%xmm4
	movq   0x50(%rsi),%xmm5
	movq   0x60(%rsi),%xmm6
	movq   0x70(%rsi),%xmm7
	por    %xmm2,%xmm1
	por    %xmm4,%xmm3
	por    %xmm6,%xmm5
	por    %xmm3,%xmm1
	por    %xmm7,%xmm5
	por    %xmm5,%xmm1
	packsswb %xmm1,%xmm1
	movd   %xmm1,%eax
	test   %rax,%rax
	jne    466ff <jsimd_idct_float_sse2.columnDCT>
	movq   (%rsi),%xmm0
	punpcklwd %xmm0,%xmm0
	psrad  $0x10,%xmm0
	cvtdq2ps %xmm0,%xmm0
	mulps  (%rdx),%xmm0
	movaps %xmm0,%xmm1
	movaps %xmm0,%xmm2
	movaps %xmm0,%xmm3
	shufps $0x0,%xmm0,%xmm0
	shufps $0x55,%xmm1,%xmm1
	shufps $0xaa,%xmm2,%xmm2
	shufps $0xff,%xmm3,%xmm3
	movaps %xmm0,(%rdi)
	movaps %xmm0,0x10(%rdi)
	movaps %xmm1,0x20(%rdi)
	movaps %xmm1,0x30(%rdi)
	movaps %xmm2,0x40(%rdi)
	movaps %xmm2,0x50(%rdi)
	movaps %xmm3,0x60(%rdi)
	movaps %xmm3,0x70(%rdi)
	jmpq   468de <jsimd_idct_float_sse2.nextcolumn>

00466ff <jsimd_idct_float_sse2.columnDCT>:
	movq   (%rsi),%xmm0
	movq   0x20(%rsi),%xmm1
	movq   0x40(%rsi),%xmm2
	movq   0x60(%rsi),%xmm3
	punpcklwd %xmm0,%xmm0
	punpcklwd %xmm1,%xmm1
	psrad  $0x10,%xmm0
	psrad  $0x10,%xmm1
	cvtdq2ps %xmm0,%xmm0
	cvtdq2ps %xmm1,%xmm1
	punpcklwd %xmm2,%xmm2
	punpcklwd %xmm3,%xmm3
	psrad  $0x10,%xmm2
	psrad  $0x10,%xmm3
	cvtdq2ps %xmm2,%xmm2
	cvtdq2ps %xmm3,%xmm3
	mulps  (%rdx),%xmm0
	mulps  0x40(%rdx),%xmm1
	mulps  0x80(%rdx),%xmm2
	mulps  0xc0(%rdx),%xmm3
	movaps %xmm0,%xmm4
	movaps %xmm1,%xmm5
	subps  %xmm2,%xmm0
	subps  %xmm3,%xmm1
	addps  %xmm2,%xmm4
	addps  %xmm3,%xmm5
	mulps  0x25720(%rip),%xmm1        # 6be90 <PD_1_414>
	subps  %xmm5,%xmm1
	movaps %xmm4,%xmm6
	movaps %xmm0,%xmm7
	subps  %xmm5,%xmm4
	subps  %xmm1,%xmm0
	addps  %xmm5,%xmm6
	addps  %xmm1,%xmm7
	movaps %xmm4,-0x10(%rbp)
	movaps %xmm0,-0x20(%rbp)
	movq   0x10(%rsi),%xmm2
	movq   0x30(%rsi),%xmm3
	movq   0x50(%rsi),%xmm5
	movq   0x70(%rsi),%xmm1
	punpcklwd %xmm2,%xmm2
	punpcklwd %xmm3,%xmm3
	psrad  $0x10,%xmm2
	psrad  $0x10,%xmm3
	cvtdq2ps %xmm2,%xmm2
	cvtdq2ps %xmm3,%xmm3
	punpcklwd %xmm5,%xmm5
	punpcklwd %xmm1,%xmm1
	psrad  $0x10,%xmm5
	psrad  $0x10,%xmm1
	cvtdq2ps %xmm5,%xmm5
	cvtdq2ps %xmm1,%xmm1
	mulps  0x20(%rdx),%xmm2
	mulps  0x60(%rdx),%xmm3
	mulps  0xa0(%rdx),%xmm5
	mulps  0xe0(%rdx),%xmm1
	movaps %xmm2,%xmm4
	movaps %xmm5,%xmm0
	addps  %xmm1,%xmm2
	addps  %xmm3,%xmm5
	subps  %xmm1,%xmm4
	subps  %xmm3,%xmm0
	movaps %xmm2,%xmm1
	subps  %xmm5,%xmm2
	addps  %xmm5,%xmm1
	mulps  0x25687(%rip),%xmm2        # 6be90 <PD_1_414>
	movaps %xmm0,%xmm3
	addps  %xmm4,%xmm0
	mulps  0x2568a(%rip),%xmm0        # 6bea0 <PD_1_847>
	mulps  0x256a3(%rip),%xmm3        # 6bec0 <PD_M2_613>
	mulps  0x2568c(%rip),%xmm4        # 6beb0 <PD_1_082>
	addps  %xmm0,%xmm3
	subps  %xmm0,%xmm4
	subps  %xmm1,%xmm3
	movaps %xmm6,%xmm5
	movaps %xmm7,%xmm0
	addps  %xmm1,%xmm6
	addps  %xmm3,%xmm7
	subps  %xmm1,%xmm5
	subps  %xmm3,%xmm0
	subps  %xmm3,%xmm2
	movaps %xmm6,%xmm1
	unpcklps %xmm7,%xmm6
	unpckhps %xmm7,%xmm1
	movaps %xmm0,%xmm3
	unpcklps %xmm5,%xmm0
	unpckhps %xmm5,%xmm3
	movaps -0x20(%rbp),%xmm7
	movaps -0x10(%rbp),%xmm5
	movaps %xmm0,-0x20(%rbp)
	movaps %xmm3,-0x10(%rbp)
	addps  %xmm2,%xmm4
	movaps %xmm7,%xmm0
	movaps %xmm5,%xmm3
	addps  %xmm2,%xmm7
	addps  %xmm4,%xmm5
	subps  %xmm2,%xmm0
	subps  %xmm4,%xmm3
	movaps %xmm7,%xmm2
	unpcklps %xmm3,%xmm7
	unpckhps %xmm3,%xmm2
	movaps %xmm5,%xmm4
	unpcklps %xmm0,%xmm5
	unpckhps %xmm0,%xmm4
	movaps %xmm6,%xmm3
	shufps $0x44,%xmm7,%xmm6
	shufps $0xee,%xmm7,%xmm3
	movaps %xmm1,%xmm0
	shufps $0x44,%xmm2,%xmm1
	shufps $0xee,%xmm2,%xmm0
	movaps -0x20(%rbp),%xmm7
	movaps -0x10(%rbp),%xmm2
	movaps %xmm6,(%rdi)
	movaps %xmm3,0x20(%rdi)
	movaps %xmm1,0x40(%rdi)
	movaps %xmm0,0x60(%rdi)
	movaps %xmm5,%xmm6
	shufps $0x44,%xmm7,%xmm5
	shufps $0xee,%xmm7,%xmm6
	movaps %xmm4,%xmm3
	shufps $0x44,%xmm2,%xmm4
	shufps $0xee,%xmm2,%xmm3
	movaps %xmm5,0x10(%rdi)
	movaps %xmm6,0x30(%rdi)
	movaps %xmm4,0x50(%rdi)
	movaps %xmm3,0x70(%rdi)

00468de <jsimd_idct_float_sse2.nextcolumn>:
	add    $0x8,%rsi
	add    $0x10,%rdx
	add    $0x80,%rdi
	dec    %rcx
	jne    4665b <jsimd_idct_float_sse2.columnloop>
	prefetchnta 0x70(%rsi)
	prefetchnta 0x90(%rsi)
	prefetchnta 0xb0(%rsi)
	prefetchnta 0xd0(%rsi)
	mov    0x0(%rbp),%rax
	lea    -0x120(%rbp),%rsi
	mov    %r12,%rdi
	mov    %r13d,%eax
	mov    $0x2,%ecx

0046925 <jsimd_idct_float_sse2.rowloop>:
	movaps (%rsi),%xmm0
	movaps 0x40(%rsi),%xmm1
	movaps 0x80(%rsi),%xmm2
	movaps 0xc0(%rsi),%xmm3
	movaps %xmm0,%xmm4
	movaps %xmm1,%xmm5
	subps  %xmm2,%xmm0
	subps  %xmm3,%xmm1
	addps  %xmm2,%xmm4
	addps  %xmm3,%xmm5
	mulps  0x2553d(%rip),%xmm1        # 6be90 <PD_1_414>
	subps  %xmm5,%xmm1
	movaps %xmm4,%xmm6
	movaps %xmm0,%xmm7
	subps  %xmm5,%xmm4
	subps  %xmm1,%xmm0
	addps  %xmm5,%xmm6
	addps  %xmm1,%xmm7
	movaps %xmm4,-0x10(%rbp)
	movaps %xmm0,-0x20(%rbp)
	movaps 0x20(%rsi),%xmm2
	movaps 0x60(%rsi),%xmm3
	movaps 0xa0(%rsi),%xmm5
	movaps 0xe0(%rsi),%xmm1
	movaps %xmm2,%xmm4
	movaps %xmm5,%xmm0
	addps  %xmm1,%xmm2
	addps  %xmm3,%xmm5
	subps  %xmm1,%xmm4
	subps  %xmm3,%xmm0
	movaps %xmm2,%xmm1
	subps  %xmm5,%xmm2
	addps  %xmm5,%xmm1
	mulps  0x254e8(%rip),%xmm2        # 6be90 <PD_1_414>
	movaps %xmm0,%xmm3
	addps  %xmm4,%xmm0
	mulps  0x254eb(%rip),%xmm0        # 6bea0 <PD_1_847>
	mulps  0x25504(%rip),%xmm3        # 6bec0 <PD_M2_613>
	mulps  0x254ed(%rip),%xmm4        # 6beb0 <PD_1_082>
	addps  %xmm0,%xmm3
	subps  %xmm0,%xmm4
	subps  %xmm1,%xmm3
	movaps %xmm6,%xmm5
	movaps %xmm7,%xmm0
	addps  %xmm1,%xmm6
	addps  %xmm3,%xmm7
	subps  %xmm1,%xmm5
	subps  %xmm3,%xmm0
	subps  %xmm3,%xmm2
	movaps 0x254e8(%rip),%xmm1        # 6bed0 <PD_RNDINT_MAGIC>
	pcmpeqd %xmm3,%xmm3
	psrld  $0x10,%xmm3
	addps  %xmm1,%xmm6
	addps  %xmm1,%xmm7
	addps  %xmm1,%xmm0
	addps  %xmm1,%xmm5
	pand   %xmm3,%xmm6
	pslld  $0x10,%xmm7
	pand   %xmm3,%xmm0
	pslld  $0x10,%xmm5
	por    %xmm7,%xmm6
	por    %xmm5,%xmm0
	movaps -0x20(%rbp),%xmm1
	movaps -0x10(%rbp),%xmm3
	addps  %xmm2,%xmm4
	movaps %xmm1,%xmm7
	movaps %xmm3,%xmm5
	addps  %xmm2,%xmm1
	addps  %xmm4,%xmm3
	subps  %xmm2,%xmm7
	subps  %xmm4,%xmm5
	movaps 0x25495(%rip),%xmm2        # 6bed0 <PD_RNDINT_MAGIC>
	pcmpeqd %xmm4,%xmm4
	psrld  $0x10,%xmm4
	addps  %xmm2,%xmm3
	addps  %xmm2,%xmm7
	addps  %xmm2,%xmm1
	addps  %xmm2,%xmm5
	pand   %xmm4,%xmm3
	pslld  $0x10,%xmm7
	pand   %xmm4,%xmm1
	pslld  $0x10,%xmm5
	por    %xmm7,%xmm3
	por    %xmm5,%xmm1
	movdqa 0x2546e(%rip),%xmm2        # 6bee0 <PB_CENTERJSAMP>
	packsswb %xmm3,%xmm6
	packsswb %xmm0,%xmm1
	paddb  %xmm2,%xmm6
	paddb  %xmm2,%xmm1
	movdqa %xmm6,%xmm4
	punpcklwd %xmm1,%xmm6
	punpckhwd %xmm1,%xmm4
	movdqa %xmm6,%xmm7
	punpckldq %xmm4,%xmm6
	punpckhdq %xmm4,%xmm7
	pshufd $0x4e,%xmm6,%xmm5
	pshufd $0x4e,%xmm7,%xmm3
	mov    (%rdi),%rdx
	mov    0x10(%rdi),%rbx
	movq   %xmm6,(%rdx,%rax,1)
	movq   %xmm7,(%rbx,%rax,1)
	mov    0x8(%rdi),%rdx
	mov    0x18(%rdi),%rbx
	movq   %xmm5,(%rdx,%rax,1)
	movq   %xmm3,(%rbx,%rax,1)
	add    $0x10,%rsi
	add    $0x20,%rdi
	dec    %rcx
	jne    46925 <jsimd_idct_float_sse2.rowloop>
	pop    %rbx
	pop    %r15
	pop    %r14
	pop    %r13
	pop    %r12
	pop    %r11
	pop    %r10
	mov    %rbp,%rsp
	pop    %rsp
	pop    %rbp
	retq   
	nop
	nop
	nop
	nop
	nop

0046af0 <jsimd_idct_ifast_sse2>:
	push   %rbp
	mov    %rsp,%rax
	sub    $0x4,%rsp
	and    $0xfffffffffffffff0,%rsp
	mov    %rax,(%rsp)
	mov    %rsp,%rbp
	lea    -0x20(%rbp),%rsp
	push   %r10
	push   %r11
	push   %r12
	push   %r13
	push   %r14
	push   %r15
	mov    %rdi,%r10
	mov    %rsi,%r11
	mov    %rdx,%r12
	mov    %rcx,%r13
	mov    %r8,%r14
	mov    %r9,%r15
	mov    %r10,%rdx
	mov    %r11,%rsi
	mov    0x10(%rsi),%eax
	or     0x20(%rsi),%eax
	jne    46bba <jsimd_idct_ifast_sse2.columnDCT>
	movdqa 0x10(%rsi),%xmm0
	movdqa 0x20(%rsi),%xmm1
	por    0x30(%rsi),%xmm0
	por    0x40(%rsi),%xmm1
	por    0x50(%rsi),%xmm0
	por    0x60(%rsi),%xmm1
	por    0x70(%rsi),%xmm0
	por    %xmm0,%xmm1
	packsswb %xmm1,%xmm1
	packsswb %xmm1,%xmm1
	movd   %xmm1,%eax
	test   %rax,%rax
	jne    46bba <jsimd_idct_ifast_sse2.columnDCT>
	movdqa (%rsi),%xmm0
	pmullw (%rdx),%xmm0
	movdqa %xmm0,%xmm7
	punpcklwd %xmm0,%xmm0
	punpckhwd %xmm7,%xmm7
	pshufd $0x0,%xmm0,%xmm6
	pshufd $0x55,%xmm0,%xmm2
	pshufd $0xaa,%xmm0,%xmm5
	pshufd $0xff,%xmm0,%xmm0
	pshufd $0x0,%xmm7,%xmm1
	pshufd $0x55,%xmm7,%xmm4
	pshufd $0xaa,%xmm7,%xmm3
	pshufd $0xff,%xmm7,%xmm7
	movdqa %xmm2,-0x20(%rbp)
	movdqa %xmm0,-0x10(%rbp)
	jmpq   46dc6 <jsimd_idct_ifast_sse2.column_end>

0046bba <jsimd_idct_ifast_sse2.columnDCT>:
	movdqa (%rsi),%xmm0
	movdqa 0x20(%rsi),%xmm1
	pmullw (%rdx),%xmm0
	pmullw 0x20(%rdx),%xmm1
	movdqa 0x40(%rsi),%xmm2
	movdqa 0x60(%rsi),%xmm3
	pmullw 0x40(%rdx),%xmm2
	pmullw 0x60(%rdx),%xmm3
	movdqa %xmm0,%xmm4
	movdqa %xmm1,%xmm5
	psubw  %xmm2,%xmm0
	psubw  %xmm3,%xmm1
	paddw  %xmm2,%xmm4
	paddw  %xmm3,%xmm5
	psllw  $0x2,%xmm1
	pmulhw 0x252eb(%rip),%xmm1        # 6bef0 <PW_F1414>
	psubw  %xmm5,%xmm1
	movdqa %xmm4,%xmm6
	movdqa %xmm0,%xmm7
	psubw  %xmm5,%xmm4
	psubw  %xmm1,%xmm0
	paddw  %xmm5,%xmm6
	paddw  %xmm1,%xmm7
	movdqa %xmm4,-0x10(%rbp)
	movdqa %xmm0,-0x20(%rbp)
	movdqa 0x10(%rsi),%xmm2
	movdqa 0x30(%rsi),%xmm3
	pmullw 0x10(%rdx),%xmm2
	pmullw 0x30(%rdx),%xmm3
	movdqa 0x50(%rsi),%xmm5
	movdqa 0x70(%rsi),%xmm1
	pmullw 0x50(%rdx),%xmm5
	pmullw 0x70(%rdx),%xmm1
	movdqa %xmm2,%xmm4
	movdqa %xmm5,%xmm0
	psubw  %xmm1,%xmm2
	psubw  %xmm3,%xmm5
	paddw  %xmm1,%xmm4
	paddw  %xmm3,%xmm0
	movdqa %xmm5,%xmm1
	psllw  $0x2,%xmm2
	psllw  $0x2,%xmm5
	movdqa %xmm4,%xmm3
	psubw  %xmm0,%xmm4
	paddw  %xmm0,%xmm3
	psllw  $0x2,%xmm4
	pmulhw 0x2525e(%rip),%xmm4        # 6bef0 <PW_F1414>
	movdqa %xmm5,%xmm0
	paddw  %xmm2,%xmm5
	pmulhw 0x2525e(%rip),%xmm5        # 6bf00 <PW_F1847>
	pmulhw 0x25266(%rip),%xmm0        # 6bf10 <PW_MF1613>
	pmulhw 0x2526e(%rip),%xmm2        # 6bf20 <PW_F1082>
	psubw  %xmm1,%xmm0
	psubw  %xmm5,%xmm2
	paddw  %xmm5,%xmm0
	psubw  %xmm3,%xmm0
	movdqa %xmm6,%xmm1
	movdqa %xmm7,%xmm5
	paddw  %xmm3,%xmm6
	paddw  %xmm0,%xmm7
	psubw  %xmm3,%xmm1
	psubw  %xmm0,%xmm5
	psubw  %xmm0,%xmm4
	movdqa %xmm6,%xmm3
	punpcklwd %xmm7,%xmm6
	punpckhwd %xmm7,%xmm3
	movdqa %xmm5,%xmm0
	punpcklwd %xmm1,%xmm5
	punpckhwd %xmm1,%xmm0
	movdqa -0x20(%rbp),%xmm7
	movdqa -0x10(%rbp),%xmm1
	movdqa %xmm5,-0x20(%rbp)
	movdqa %xmm0,-0x10(%rbp)
	paddw  %xmm4,%xmm2
	movdqa %xmm7,%xmm5
	movdqa %xmm1,%xmm0
	paddw  %xmm4,%xmm7
	paddw  %xmm2,%xmm1
	psubw  %xmm4,%xmm5
	psubw  %xmm2,%xmm0
	movdqa %xmm7,%xmm4
	punpcklwd %xmm0,%xmm7
	punpckhwd %xmm0,%xmm4
	movdqa %xmm1,%xmm2
	punpcklwd %xmm5,%xmm1
	punpckhwd %xmm5,%xmm2
	movdqa %xmm3,%xmm0
	punpckldq %xmm4,%xmm3
	punpckhdq %xmm4,%xmm0
	movdqa %xmm6,%xmm5
	punpckldq %xmm7,%xmm6
	punpckhdq %xmm7,%xmm5
	movdqa -0x20(%rbp),%xmm4
	movdqa -0x10(%rbp),%xmm7
	movdqa %xmm3,-0x20(%rbp)
	movdqa %xmm0,-0x10(%rbp)
	movdqa %xmm1,%xmm3
	punpckldq %xmm4,%xmm1
	punpckhdq %xmm4,%xmm3
	movdqa %xmm2,%xmm0
	punpckldq %xmm7,%xmm2
	punpckhdq %xmm7,%xmm0
	movdqa %xmm6,%xmm4
	punpcklqdq %xmm1,%xmm6
	punpckhqdq %xmm1,%xmm4
	movdqa %xmm5,%xmm7
	punpcklqdq %xmm3,%xmm5
	punpckhqdq %xmm3,%xmm7
	movdqa -0x20(%rbp),%xmm1
	movdqa -0x10(%rbp),%xmm3
	movdqa %xmm4,-0x20(%rbp)
	movdqa %xmm7,-0x10(%rbp)
	movdqa %xmm1,%xmm4
	punpcklqdq %xmm2,%xmm1
	punpckhqdq %xmm2,%xmm4
	movdqa %xmm3,%xmm7
	punpcklqdq %xmm0,%xmm3
	punpckhqdq %xmm0,%xmm7

0046dc6 <jsimd_idct_ifast_sse2.column_end>:
	prefetchnta 0x80(%rsi)
	prefetchnta 0xa0(%rsi)
	prefetchnta 0xc0(%rsi)
	prefetchnta 0xe0(%rsi)
	mov    0x0(%rbp),%rax
	mov    %r12,%rdi
	mov    %r13d,%eax
	movdqa %xmm6,%xmm2
	movdqa %xmm5,%xmm0
	psubw  %xmm1,%xmm6
	psubw  %xmm3,%xmm5
	paddw  %xmm1,%xmm2
	paddw  %xmm3,%xmm0
	psllw  $0x2,%xmm5
	pmulhw 0x250df(%rip),%xmm5        # 6bef0 <PW_F1414>
	psubw  %xmm0,%xmm5
	movdqa %xmm2,%xmm1
	movdqa %xmm6,%xmm3
	psubw  %xmm0,%xmm2
	psubw  %xmm5,%xmm6
	paddw  %xmm0,%xmm1
	paddw  %xmm5,%xmm3
	movdqa -0x20(%rbp),%xmm0
	movdqa -0x10(%rbp),%xmm5
	movdqa %xmm2,-0x20(%rbp)
	movdqa %xmm6,-0x10(%rbp)
	movdqa %xmm0,%xmm2
	movdqa %xmm4,%xmm6
	psubw  %xmm7,%xmm0
	psubw  %xmm5,%xmm4
	paddw  %xmm7,%xmm2
	paddw  %xmm5,%xmm6
	movdqa %xmm4,%xmm7
	psllw  $0x2,%xmm0
	psllw  $0x2,%xmm4
	movdqa %xmm2,%xmm5
	psubw  %xmm6,%xmm2
	paddw  %xmm6,%xmm5
	psllw  $0x2,%xmm2
	pmulhw 0x25070(%rip),%xmm2        # 6bef0 <PW_F1414>
	movdqa %xmm4,%xmm6
	paddw  %xmm0,%xmm4
	pmulhw 0x25070(%rip),%xmm4        # 6bf00 <PW_F1847>
	pmulhw 0x25078(%rip),%xmm6        # 6bf10 <PW_MF1613>
	pmulhw 0x25080(%rip),%xmm0        # 6bf20 <PW_F1082>
	psubw  %xmm7,%xmm6
	psubw  %xmm4,%xmm0
	paddw  %xmm4,%xmm6
	psubw  %xmm5,%xmm6
	movdqa %xmm1,%xmm7
	movdqa %xmm3,%xmm4
	paddw  %xmm5,%xmm1
	paddw  %xmm6,%xmm3
	psraw  $0x5,%xmm1
	psraw  $0x5,%xmm3
	psubw  %xmm5,%xmm7
	psubw  %xmm6,%xmm4
	psraw  $0x5,%xmm7
	psraw  $0x5,%xmm4
	psubw  %xmm6,%xmm2
	packsswb %xmm4,%xmm1
	packsswb %xmm7,%xmm3
	movdqa -0x10(%rbp),%xmm5
	movdqa -0x20(%rbp),%xmm6
	paddw  %xmm2,%xmm0
	movdqa %xmm5,%xmm4
	movdqa %xmm6,%xmm7
	paddw  %xmm2,%xmm5
	paddw  %xmm0,%xmm6
	psraw  $0x5,%xmm5
	psraw  $0x5,%xmm6
	psubw  %xmm2,%xmm4
	psubw  %xmm0,%xmm7
	psraw  $0x5,%xmm4
	psraw  $0x5,%xmm7
	movdqa 0x25006(%rip),%xmm2        # 6bf30 <PB_CENTERJSAMP>
	packsswb %xmm6,%xmm5
	packsswb %xmm4,%xmm7
	paddb  %xmm2,%xmm1
	paddb  %xmm2,%xmm3
	paddb  %xmm2,%xmm5
	paddb  %xmm2,%xmm7
	movdqa %xmm1,%xmm0
	punpcklbw %xmm3,%xmm1
	punpckhbw %xmm3,%xmm0
	movdqa %xmm5,%xmm6
	punpcklbw %xmm7,%xmm5
	punpckhbw %xmm7,%xmm6
	movdqa %xmm1,%xmm4
	punpcklwd %xmm5,%xmm1
	punpckhwd %xmm5,%xmm4
	movdqa %xmm6,%xmm2
	punpcklwd %xmm0,%xmm6
	punpckhwd %xmm0,%xmm2
	movdqa %xmm1,%xmm3
	punpckldq %xmm6,%xmm1
	punpckhdq %xmm6,%xmm3
	movdqa %xmm4,%xmm7
	punpckldq %xmm2,%xmm4
	punpckhdq %xmm2,%xmm7
	pshufd $0x4e,%xmm1,%xmm5
	pshufd $0x4e,%xmm3,%xmm0
	pshufd $0x4e,%xmm4,%xmm6
	pshufd $0x4e,%xmm7,%xmm2
	mov    (%rdi),%rdx
	mov    0x10(%rdi),%rsi
	movq   %xmm1,(%rdx,%rax,1)
	movq   %xmm3,(%rsi,%rax,1)
	mov    0x20(%rdi),%rdx
	mov    0x30(%rdi),%rsi
	movq   %xmm4,(%rdx,%rax,1)
	movq   %xmm7,(%rsi,%rax,1)
	mov    0x8(%rdi),%rdx
	mov    0x18(%rdi),%rsi
	movq   %xmm5,(%rdx,%rax,1)
	movq   %xmm0,(%rsi,%rax,1)
	mov    0x28(%rdi),%rdx
	mov    0x38(%rdi),%rsi
	movq   %xmm6,(%rdx,%rax,1)
	movq   %xmm2,(%rsi,%rax,1)
	pop    %r15
	pop    %r14
	pop    %r13
	pop    %r12
	pop    %r11
	pop    %r10
	mov    %rbp,%rsp
	pop    %rsp
	pop    %rbp
	retq   
	retq   
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop

0047000 <jsimd_idct_islow_sse2>:
	push   %rbp
	mov    %rsp,%rax
	sub    $0x4,%rsp
	and    $0xfffffffffffffff0,%rsp
	mov    %rax,(%rsp)
	mov    %rsp,%rbp
	lea    -0xc0(%rbp),%rsp
	push   %r10
	push   %r11
	push   %r12
	push   %r13
	push   %r14
	push   %r15
	mov    %rdi,%r10
	mov    %rsi,%r11
	mov    %rdx,%r12
	mov    %rcx,%r13
	mov    %r8,%r14
	mov    %r9,%r15
	mov    %r10,%rdx
	mov    %r11,%rsi
	mov    0x10(%rsi),%eax
	or     0x20(%rsi),%eax
	jne    470dc <jsimd_idct_islow_sse2.columnDCT>
	movdqa 0x10(%rsi),%xmm0
	movdqa 0x20(%rsi),%xmm1
	por    0x30(%rsi),%xmm0
	por    0x40(%rsi),%xmm1
	por    0x50(%rsi),%xmm0
	por    0x60(%rsi),%xmm1
	por    0x70(%rsi),%xmm0
	por    %xmm0,%xmm1
	packsswb %xmm1,%xmm1
	packsswb %xmm1,%xmm1
	movd   %xmm1,%eax
	test   %rax,%rax
	jne    470dc <jsimd_idct_islow_sse2.columnDCT>
	movdqa (%rsi),%xmm5
	pmullw (%rdx),%xmm5
	psllw  $0x2,%xmm5
	movdqa %xmm5,%xmm4
	punpcklwd %xmm5,%xmm5
	punpckhwd %xmm4,%xmm4
	pshufd $0x0,%xmm5,%xmm7
	pshufd $0x55,%xmm5,%xmm6
	pshufd $0xaa,%xmm5,%xmm1
	pshufd $0xff,%xmm5,%xmm5
	pshufd $0x0,%xmm4,%xmm0
	pshufd $0x55,%xmm4,%xmm3
	pshufd $0xaa,%xmm4,%xmm2
	pshufd $0xff,%xmm4,%xmm4
	movdqa %xmm6,-0x40(%rbp)
	movdqa %xmm5,-0x30(%rbp)
	movdqa %xmm3,-0x20(%rbp)
	movdqa %xmm4,-0x10(%rbp)
	jmpq   47564 <jsimd_idct_islow_sse2.column_end>

00470dc <jsimd_idct_islow_sse2.columnDCT>:
	movdqa (%rsi),%xmm0
	movdqa 0x20(%rsi),%xmm1
	pmullw (%rdx),%xmm0
	pmullw 0x20(%rdx),%xmm1
	movdqa 0x40(%rsi),%xmm2
	movdqa 0x60(%rsi),%xmm3
	pmullw 0x40(%rdx),%xmm2
	pmullw 0x60(%rdx),%xmm3
	movdqa %xmm1,%xmm4
	movdqa %xmm1,%xmm5
	punpcklwd %xmm3,%xmm4
	punpckhwd %xmm3,%xmm5
	movdqa %xmm4,%xmm1
	movdqa %xmm5,%xmm3
	pmaddwd 0x24e1e(%rip),%xmm4        # 6bf40 <PW_F130_F054>
	pmaddwd 0x24e16(%rip),%xmm5        # 6bf40 <PW_F130_F054>
	pmaddwd 0x24e1e(%rip),%xmm1        # 6bf50 <PW_F054_MF130>
	pmaddwd 0x24e16(%rip),%xmm3        # 6bf50 <PW_F054_MF130>
	movdqa %xmm0,%xmm6
	paddw  %xmm2,%xmm0
	psubw  %xmm2,%xmm6
	pxor   %xmm7,%xmm7
	pxor   %xmm2,%xmm2
	punpcklwd %xmm0,%xmm7
	punpckhwd %xmm0,%xmm2
	psrad  $0x3,%xmm7
	psrad  $0x3,%xmm2
	movdqa %xmm7,%xmm0
	paddd  %xmm4,%xmm7
	psubd  %xmm4,%xmm0
	movdqa %xmm2,%xmm4
	paddd  %xmm5,%xmm2
	psubd  %xmm5,%xmm4
	movdqa %xmm7,-0xc0(%rbp)
	movdqa %xmm2,-0xb0(%rbp)
	movdqa %xmm0,-0xa0(%rbp)
	movdqa %xmm4,-0x90(%rbp)
	pxor   %xmm5,%xmm5
	pxor   %xmm7,%xmm7
	punpcklwd %xmm6,%xmm5
	punpckhwd %xmm6,%xmm7
	psrad  $0x3,%xmm5
	psrad  $0x3,%xmm7
	movdqa %xmm5,%xmm2
	paddd  %xmm1,%xmm5
	psubd  %xmm1,%xmm2
	movdqa %xmm7,%xmm0
	paddd  %xmm3,%xmm7
	psubd  %xmm3,%xmm0
	movdqa %xmm5,-0x80(%rbp)
	movdqa %xmm7,-0x70(%rbp)
	movdqa %xmm2,-0x60(%rbp)
	movdqa %xmm0,-0x50(%rbp)
	movdqa 0x10(%rsi),%xmm4
	movdqa 0x30(%rsi),%xmm6
	pmullw 0x10(%rdx),%xmm4
	pmullw 0x30(%rdx),%xmm6
	movdqa 0x50(%rsi),%xmm1
	movdqa 0x70(%rsi),%xmm3
	pmullw 0x50(%rdx),%xmm1
	pmullw 0x70(%rdx),%xmm3
	movdqa %xmm6,%xmm5
	movdqa %xmm4,%xmm7
	paddw  %xmm3,%xmm5
	paddw  %xmm1,%xmm7
	movdqa %xmm5,%xmm2
	movdqa %xmm5,%xmm0
	punpcklwd %xmm7,%xmm2
	punpckhwd %xmm7,%xmm0
	movdqa %xmm2,%xmm5
	movdqa %xmm0,%xmm7
	pmaddwd 0x24d2a(%rip),%xmm2        # 6bf60 <PW_MF078_F117>
	pmaddwd 0x24d22(%rip),%xmm0        # 6bf60 <PW_MF078_F117>
	pmaddwd 0x24d2a(%rip),%xmm5        # 6bf70 <PW_F117_F078>
	pmaddwd 0x24d22(%rip),%xmm7        # 6bf70 <PW_F117_F078>
	movdqa %xmm2,-0x20(%rbp)
	movdqa %xmm0,-0x10(%rbp)
	movdqa %xmm3,%xmm2
	movdqa %xmm3,%xmm0
	punpcklwd %xmm4,%xmm2
	punpckhwd %xmm4,%xmm0
	movdqa %xmm2,%xmm3
	movdqa %xmm0,%xmm4
	pmaddwd 0x24d08(%rip),%xmm2        # 6bf80 <PW_MF060_MF089>
	pmaddwd 0x24d00(%rip),%xmm0        # 6bf80 <PW_MF060_MF089>
	pmaddwd 0x24d08(%rip),%xmm3        # 6bf90 <PW_MF089_F060>
	pmaddwd 0x24d00(%rip),%xmm4        # 6bf90 <PW_MF089_F060>
	paddd  -0x20(%rbp),%xmm2
	paddd  -0x10(%rbp),%xmm0
	paddd  %xmm5,%xmm3
	paddd  %xmm7,%xmm4
	movdqa %xmm2,-0x40(%rbp)
	movdqa %xmm0,-0x30(%rbp)
	movdqa %xmm1,%xmm2
	movdqa %xmm1,%xmm0
	punpcklwd %xmm6,%xmm2
	punpckhwd %xmm6,%xmm0
	movdqa %xmm2,%xmm1
	movdqa %xmm0,%xmm6
	pmaddwd 0x24cd4(%rip),%xmm2        # 6bfa0 <PW_MF050_MF256>
	pmaddwd 0x24ccc(%rip),%xmm0        # 6bfa0 <PW_MF050_MF256>
	pmaddwd 0x24cd4(%rip),%xmm1        # 6bfb0 <PW_MF256_F050>
	pmaddwd 0x24ccc(%rip),%xmm6        # 6bfb0 <PW_MF256_F050>
	paddd  %xmm5,%xmm2
	paddd  %xmm7,%xmm0
	paddd  -0x20(%rbp),%xmm1
	paddd  -0x10(%rbp),%xmm6
	movdqa %xmm2,-0x20(%rbp)
	movdqa %xmm0,-0x10(%rbp)
	movdqa -0xc0(%rbp),%xmm5
	movdqa -0xb0(%rbp),%xmm7
	movdqa %xmm5,%xmm2
	movdqa %xmm7,%xmm0
	paddd  %xmm3,%xmm5
	paddd  %xmm4,%xmm7
	psubd  %xmm3,%xmm2
	psubd  %xmm4,%xmm0
	movdqa 0x24c90(%rip),%xmm3        # 6bfc0 <PD_DESCALE_P1>
	paddd  %xmm3,%xmm5
	paddd  %xmm3,%xmm7
	psrad  $0xb,%xmm5
	psrad  $0xb,%xmm7
	paddd  %xmm3,%xmm2
	paddd  %xmm3,%xmm0
	psrad  $0xb,%xmm2
	psrad  $0xb,%xmm0
	packssdw %xmm7,%xmm5
	packssdw %xmm0,%xmm2
	movdqa -0x80(%rbp),%xmm4
	movdqa -0x70(%rbp),%xmm3
	movdqa %xmm4,%xmm7
	movdqa %xmm3,%xmm0
	paddd  %xmm1,%xmm4
	paddd  %xmm6,%xmm3
	psubd  %xmm1,%xmm7
	psubd  %xmm6,%xmm0
	movdqa 0x24c3a(%rip),%xmm1        # 6bfc0 <PD_DESCALE_P1>
	paddd  %xmm1,%xmm4
	paddd  %xmm1,%xmm3
	psrad  $0xb,%xmm4
	psrad  $0xb,%xmm3
	paddd  %xmm1,%xmm7
	paddd  %xmm1,%xmm0
	psrad  $0xb,%xmm7
	psrad  $0xb,%xmm0
	packssdw %xmm3,%xmm4
	packssdw %xmm0,%xmm7
	movdqa %xmm5,%xmm6
	punpcklwd %xmm4,%xmm5
	punpckhwd %xmm4,%xmm6
	movdqa %xmm7,%xmm1
	punpcklwd %xmm2,%xmm7
	punpckhwd %xmm2,%xmm1
	movdqa -0x60(%rbp),%xmm3
	movdqa -0x50(%rbp),%xmm0
	movdqa -0x20(%rbp),%xmm4
	movdqa -0x10(%rbp),%xmm2
	movdqa %xmm5,-0xc0(%rbp)
	movdqa %xmm6,-0xb0(%rbp)
	movdqa %xmm7,-0x80(%rbp)
	movdqa %xmm1,-0x70(%rbp)
	movdqa %xmm3,%xmm5
	movdqa %xmm0,%xmm6
	paddd  %xmm4,%xmm3
	paddd  %xmm2,%xmm0
	psubd  %xmm4,%xmm5
	psubd  %xmm2,%xmm6
	movdqa 0x24ba8(%rip),%xmm7        # 6bfc0 <PD_DESCALE_P1>
	paddd  %xmm7,%xmm3
	paddd  %xmm7,%xmm0
	psrad  $0xb,%xmm3
	psrad  $0xb,%xmm0
	paddd  %xmm7,%xmm5
	paddd  %xmm7,%xmm6
	psrad  $0xb,%xmm5
	psrad  $0xb,%xmm6
	packssdw %xmm0,%xmm3
	packssdw %xmm6,%xmm5
	movdqa -0xa0(%rbp),%xmm1
	movdqa -0x90(%rbp),%xmm4
	movdqa -0x40(%rbp),%xmm2
	movdqa -0x30(%rbp),%xmm7
	movdqa %xmm1,%xmm0
	movdqa %xmm4,%xmm6
	paddd  %xmm2,%xmm1
	paddd  %xmm7,%xmm4
	psubd  %xmm2,%xmm0
	psubd  %xmm7,%xmm6
	movdqa 0x24b42(%rip),%xmm2        # 6bfc0 <PD_DESCALE_P1>
	paddd  %xmm2,%xmm1
	paddd  %xmm2,%xmm4
	psrad  $0xb,%xmm1
	psrad  $0xb,%xmm4
	paddd  %xmm2,%xmm0
	paddd  %xmm2,%xmm6
	psrad  $0xb,%xmm0
	psrad  $0xb,%xmm6
	packssdw %xmm4,%xmm1
	packssdw %xmm6,%xmm0
	movdqa -0xc0(%rbp),%xmm7
	movdqa -0xb0(%rbp),%xmm2
	movdqa %xmm3,%xmm4
	punpcklwd %xmm1,%xmm3
	punpckhwd %xmm1,%xmm4
	movdqa %xmm0,%xmm6
	punpcklwd %xmm5,%xmm0
	punpckhwd %xmm5,%xmm6
	movdqa %xmm7,%xmm1
	punpckldq %xmm3,%xmm7
	punpckhdq %xmm3,%xmm1
	movdqa %xmm2,%xmm5
	punpckldq %xmm4,%xmm2
	punpckhdq %xmm4,%xmm5
	movdqa -0x80(%rbp),%xmm3
	movdqa -0x70(%rbp),%xmm4
	movdqa %xmm2,-0x60(%rbp)
	movdqa %xmm5,-0x50(%rbp)
	movdqa %xmm0,%xmm2
	punpckldq %xmm3,%xmm0
	punpckhdq %xmm3,%xmm2
	movdqa %xmm6,%xmm5
	punpckldq %xmm4,%xmm6
	punpckhdq %xmm4,%xmm5
	movdqa %xmm7,%xmm3
	punpcklqdq %xmm0,%xmm7
	punpckhqdq %xmm0,%xmm3
	movdqa %xmm1,%xmm4
	punpcklqdq %xmm2,%xmm1
	punpckhqdq %xmm2,%xmm4
	movdqa -0x60(%rbp),%xmm0
	movdqa -0x50(%rbp),%xmm2
	movdqa %xmm3,-0x40(%rbp)
	movdqa %xmm4,-0x30(%rbp)
	movdqa %xmm0,%xmm3
	punpcklqdq %xmm6,%xmm0
	punpckhqdq %xmm6,%xmm3
	movdqa %xmm2,%xmm4
	punpcklqdq %xmm5,%xmm2
	punpckhqdq %xmm5,%xmm4
	movdqa %xmm3,-0x20(%rbp)
	movdqa %xmm4,-0x10(%rbp)

0047564 <jsimd_idct_islow_sse2.column_end>:
	prefetchnta 0x80(%rsi)
	prefetchnta 0xa0(%rsi)
	prefetchnta 0xc0(%rsi)
	prefetchnta 0xe0(%rsi)
	mov    0x0(%rbp),%rax
	mov    %r12,%rdi
	mov    %r13d,%eax
	movdqa %xmm1,%xmm6
	movdqa %xmm1,%xmm5
	punpcklwd %xmm2,%xmm6
	punpckhwd %xmm2,%xmm5
	movdqa %xmm6,%xmm1
	movdqa %xmm5,%xmm2
	pmaddwd 0x24996(%rip),%xmm6        # 6bf40 <PW_F130_F054>
	pmaddwd 0x2498e(%rip),%xmm5        # 6bf40 <PW_F130_F054>
	pmaddwd 0x24996(%rip),%xmm1        # 6bf50 <PW_F054_MF130>
	pmaddwd 0x2498e(%rip),%xmm2        # 6bf50 <PW_F054_MF130>
	movdqa %xmm7,%xmm3
	paddw  %xmm0,%xmm7
	psubw  %xmm0,%xmm3
	pxor   %xmm4,%xmm4
	pxor   %xmm0,%xmm0
	punpcklwd %xmm7,%xmm4
	punpckhwd %xmm7,%xmm0
	psrad  $0x3,%xmm4
	psrad  $0x3,%xmm0
	movdqa %xmm4,%xmm7
	paddd  %xmm6,%xmm4
	psubd  %xmm6,%xmm7
	movdqa %xmm0,%xmm6
	paddd  %xmm5,%xmm0
	psubd  %xmm5,%xmm6
	movdqa %xmm4,-0xc0(%rbp)
	movdqa %xmm0,-0xb0(%rbp)
	movdqa %xmm7,-0xa0(%rbp)
	movdqa %xmm6,-0x90(%rbp)
	pxor   %xmm5,%xmm5
	pxor   %xmm4,%xmm4
	punpcklwd %xmm3,%xmm5
	punpckhwd %xmm3,%xmm4
	psrad  $0x3,%xmm5
	psrad  $0x3,%xmm4
	movdqa %xmm5,%xmm0
	paddd  %xmm1,%xmm5
	psubd  %xmm1,%xmm0
	movdqa %xmm4,%xmm7
	paddd  %xmm2,%xmm4
	psubd  %xmm2,%xmm7
	movdqa %xmm5,-0x80(%rbp)
	movdqa %xmm4,-0x70(%rbp)
	movdqa %xmm0,-0x60(%rbp)
	movdqa %xmm7,-0x50(%rbp)
	movdqa -0x30(%rbp),%xmm6
	movdqa -0x40(%rbp),%xmm3
	movdqa -0x10(%rbp),%xmm1
	movdqa -0x20(%rbp),%xmm2
	movdqa %xmm6,%xmm5
	movdqa %xmm3,%xmm4
	paddw  %xmm1,%xmm5
	paddw  %xmm2,%xmm4
	movdqa %xmm5,%xmm0
	movdqa %xmm5,%xmm7
	punpcklwd %xmm4,%xmm0
	punpckhwd %xmm4,%xmm7
	movdqa %xmm0,%xmm5
	movdqa %xmm7,%xmm4
	pmaddwd 0x248b6(%rip),%xmm0        # 6bf60 <PW_MF078_F117>
	pmaddwd 0x248ae(%rip),%xmm7        # 6bf60 <PW_MF078_F117>
	pmaddwd 0x248b6(%rip),%xmm5        # 6bf70 <PW_F117_F078>
	pmaddwd 0x248ae(%rip),%xmm4        # 6bf70 <PW_F117_F078>
	movdqa %xmm0,-0x20(%rbp)
	movdqa %xmm7,-0x10(%rbp)
	movdqa %xmm1,%xmm0
	movdqa %xmm1,%xmm7
	punpcklwd %xmm3,%xmm0
	punpckhwd %xmm3,%xmm7
	movdqa %xmm0,%xmm1
	movdqa %xmm7,%xmm3
	pmaddwd 0x24894(%rip),%xmm0        # 6bf80 <PW_MF060_MF089>
	pmaddwd 0x2488c(%rip),%xmm7        # 6bf80 <PW_MF060_MF089>
	pmaddwd 0x24894(%rip),%xmm1        # 6bf90 <PW_MF089_F060>
	pmaddwd 0x2488c(%rip),%xmm3        # 6bf90 <PW_MF089_F060>
	paddd  -0x20(%rbp),%xmm0
	paddd  -0x10(%rbp),%xmm7
	paddd  %xmm5,%xmm1
	paddd  %xmm4,%xmm3
	movdqa %xmm0,-0x40(%rbp)
	movdqa %xmm7,-0x30(%rbp)
	movdqa %xmm2,%xmm0
	movdqa %xmm2,%xmm7
	punpcklwd %xmm6,%xmm0
	punpckhwd %xmm6,%xmm7
	movdqa %xmm0,%xmm2
	movdqa %xmm7,%xmm6
	pmaddwd 0x24860(%rip),%xmm0        # 6bfa0 <PW_MF050_MF256>
	pmaddwd 0x24858(%rip),%xmm7        # 6bfa0 <PW_MF050_MF256>
	pmaddwd 0x24860(%rip),%xmm2        # 6bfb0 <PW_MF256_F050>
	pmaddwd 0x24858(%rip),%xmm6        # 6bfb0 <PW_MF256_F050>
	paddd  %xmm5,%xmm0
	paddd  %xmm4,%xmm7
	paddd  -0x20(%rbp),%xmm2
	paddd  -0x10(%rbp),%xmm6
	movdqa %xmm0,-0x20(%rbp)
	movdqa %xmm7,-0x10(%rbp)
	movdqa -0xc0(%rbp),%xmm5
	movdqa -0xb0(%rbp),%xmm4
	movdqa %xmm5,%xmm0
	movdqa %xmm4,%xmm7
	paddd  %xmm1,%xmm5
	paddd  %xmm3,%xmm4
	psubd  %xmm1,%xmm0
	psubd  %xmm3,%xmm7
	movdqa 0x2482c(%rip),%xmm1        # 6bfd0 <PD_DESCALE_P2>
	paddd  %xmm1,%xmm5
	paddd  %xmm1,%xmm4
	psrad  $0x12,%xmm5
	psrad  $0x12,%xmm4
	paddd  %xmm1,%xmm0
	paddd  %xmm1,%xmm7
	psrad  $0x12,%xmm0
	psrad  $0x12,%xmm7
	packssdw %xmm4,%xmm5
	packssdw %xmm7,%xmm0
	movdqa -0x80(%rbp),%xmm3
	movdqa -0x70(%rbp),%xmm1
	movdqa %xmm3,%xmm4
	movdqa %xmm1,%xmm7
	paddd  %xmm2,%xmm3
	paddd  %xmm6,%xmm1
	psubd  %xmm2,%xmm4
	psubd  %xmm6,%xmm7
	movdqa 0x247d6(%rip),%xmm2        # 6bfd0 <PD_DESCALE_P2>
	paddd  %xmm2,%xmm3
	paddd  %xmm2,%xmm1
	psrad  $0x12,%xmm3
	psrad  $0x12,%xmm1
	paddd  %xmm2,%xmm4
	paddd  %xmm2,%xmm7
	psrad  $0x12,%xmm4
	psrad  $0x12,%xmm7
	packssdw %xmm1,%xmm3
	packssdw %xmm7,%xmm4
	packsswb %xmm4,%xmm5
	packsswb %xmm0,%xmm3
	movdqa -0x60(%rbp),%xmm6
	movdqa -0x50(%rbp),%xmm2
	movdqa -0x20(%rbp),%xmm1
	movdqa -0x10(%rbp),%xmm7
	movdqa %xmm5,-0xc0(%rbp)
	movdqa %xmm3,-0xb0(%rbp)
	movdqa %xmm6,%xmm4
	movdqa %xmm2,%xmm0
	paddd  %xmm1,%xmm6
	paddd  %xmm7,%xmm2
	psubd  %xmm1,%xmm4
	psubd  %xmm7,%xmm0
	movdqa 0x2475e(%rip),%xmm5        # 6bfd0 <PD_DESCALE_P2>
	paddd  %xmm5,%xmm6
	paddd  %xmm5,%xmm2
	psrad  $0x12,%xmm6
	psrad  $0x12,%xmm2
	paddd  %xmm5,%xmm4
	paddd  %xmm5,%xmm0
	psrad  $0x12,%xmm4
	psrad  $0x12,%xmm0
	packssdw %xmm2,%xmm6
	packssdw %xmm0,%xmm4
	movdqa -0xa0(%rbp),%xmm3
	movdqa -0x90(%rbp),%xmm1
	movdqa -0x40(%rbp),%xmm7
	movdqa -0x30(%rbp),%xmm5
	movdqa %xmm3,%xmm2
	movdqa %xmm1,%xmm0
	paddd  %xmm7,%xmm3
	paddd  %xmm5,%xmm1
	psubd  %xmm7,%xmm2
	psubd  %xmm5,%xmm0
	movdqa 0x246f8(%rip),%xmm7        # 6bfd0 <PD_DESCALE_P2>
	paddd  %xmm7,%xmm3
	paddd  %xmm7,%xmm1
	psrad  $0x12,%xmm3
	psrad  $0x12,%xmm1
	paddd  %xmm7,%xmm2
	paddd  %xmm7,%xmm0
	psrad  $0x12,%xmm2
	psrad  $0x12,%xmm0
	movdqa 0x246dc(%rip),%xmm5        # 6bfe0 <PB_CENTERJSAMP>
	packssdw %xmm1,%xmm3
	packssdw %xmm0,%xmm2
	movdqa -0xc0(%rbp),%xmm7
	movdqa -0xb0(%rbp),%xmm1
	packsswb %xmm2,%xmm6
	packsswb %xmm4,%xmm3
	paddb  %xmm5,%xmm7
	paddb  %xmm5,%xmm1
	paddb  %xmm5,%xmm6
	paddb  %xmm5,%xmm3
	movdqa %xmm7,%xmm0
	punpcklbw %xmm1,%xmm7
	punpckhbw %xmm1,%xmm0
	movdqa %xmm6,%xmm2
	punpcklbw %xmm3,%xmm6
	punpckhbw %xmm3,%xmm2
	movdqa %xmm7,%xmm4
	punpcklwd %xmm6,%xmm7
	punpckhwd %xmm6,%xmm4
	movdqa %xmm2,%xmm5
	punpcklwd %xmm0,%xmm2
	punpckhwd %xmm0,%xmm5
	movdqa %xmm7,%xmm1
	punpckldq %xmm2,%xmm7
	punpckhdq %xmm2,%xmm1
	movdqa %xmm4,%xmm3
	punpckldq %xmm5,%xmm4
	punpckhdq %xmm5,%xmm3
	pshufd $0x4e,%xmm7,%xmm6
	pshufd $0x4e,%xmm1,%xmm0
	pshufd $0x4e,%xmm4,%xmm2
	pshufd $0x4e,%xmm3,%xmm5
	mov    (%rdi),%rdx
	mov    0x10(%rdi),%rsi
	movq   %xmm7,(%rdx,%rax,1)
	movq   %xmm1,(%rsi,%rax,1)
	mov    0x20(%rdi),%rdx
	mov    0x30(%rdi),%rsi
	movq   %xmm4,(%rdx,%rax,1)
	movq   %xmm3,(%rsi,%rax,1)
	mov    0x8(%rdi),%rdx
	mov    0x18(%rdi),%rsi
	movq   %xmm6,(%rdx,%rax,1)
	movq   %xmm0,(%rsi,%rax,1)
	mov    0x28(%rdi),%rdx
	mov    0x38(%rdi),%rsi
	movq   %xmm2,(%rdx,%rax,1)
	movq   %xmm5,(%rsi,%rax,1)
	pop    %r15
	pop    %r14
	pop    %r13
	pop    %r12
	pop    %r11
	pop    %r10
	mov    %rbp,%rsp
	pop    %rsp
	pop    %rbp
	retq   
	nop
	nop
	nop
	nop
	nop
	nop
	nop

00479f0 <jsimd_idct_4x4_sse2>:
	push   %rbp
	mov    %rsp,%rax
	sub    $0x4,%rsp
	and    $0xfffffffffffffff0,%rsp
	mov    %rax,(%rsp)
	mov    %rsp,%rbp
	lea    -0x20(%rbp),%rsp
	push   %r10
	push   %r11
	push   %r12
	push   %r13
	push   %r14
	push   %r15
	mov    %rdi,%r10
	mov    %rsi,%r11
	mov    %rdx,%r12
	mov    %rcx,%r13
	mov    %r8,%r14
	mov    %r9,%r15
	mov    %r10,%rdx
	mov    %r11,%rsi
	mov    0x10(%rsi),%eax
	or     0x20(%rsi),%eax
	jne    47a98 <jsimd_idct_4x4_sse2.columnDCT>
	movdqa 0x10(%rsi),%xmm0
	movdqa 0x20(%rsi),%xmm1
	por    0x30(%rsi),%xmm0
	por    0x50(%rsi),%xmm1
	por    0x60(%rsi),%xmm0
	por    0x70(%rsi),%xmm1
	por    %xmm1,%xmm0
	packsswb %xmm0,%xmm0
	packsswb %xmm0,%xmm0
	movd   %xmm0,%eax
	test   %rax,%rax
	jne    47a98 <jsimd_idct_4x4_sse2.columnDCT>
	movdqa (%rsi),%xmm0
	pmullw (%rdx),%xmm0
	psllw  $0x2,%xmm0
	movdqa %xmm0,%xmm3
	punpcklwd %xmm0,%xmm0
	punpckhwd %xmm3,%xmm3
	pshufd $0x50,%xmm0,%xmm1
	pshufd $0xfa,%xmm0,%xmm0
	pshufd $0x50,%xmm3,%xmm6
	pshufd $0xfa,%xmm3,%xmm3
	jmpq   47c86 <jsimd_idct_4x4_sse2.column_end>

0047a98 <jsimd_idct_4x4_sse2.columnDCT>:
	movdqa 0x10(%rsi),%xmm0
	movdqa 0x30(%rsi),%xmm1
	pmullw 0x10(%rdx),%xmm0
	pmullw 0x30(%rdx),%xmm1
	movdqa 0x50(%rsi),%xmm2
	movdqa 0x70(%rsi),%xmm3
	pmullw 0x50(%rdx),%xmm2
	pmullw 0x70(%rdx),%xmm3
	movdqa %xmm0,%xmm4
	movdqa %xmm0,%xmm5
	punpcklwd %xmm1,%xmm4
	punpckhwd %xmm1,%xmm5
	movdqa %xmm4,%xmm0
	movdqa %xmm5,%xmm1
	pmaddwd 0x24520(%rip),%xmm4        # 6c000 <PW_F256_F089>
	pmaddwd 0x24518(%rip),%xmm5        # 6c000 <PW_F256_F089>
	pmaddwd 0x24520(%rip),%xmm0        # 6c010 <PW_F106_MF217>
	pmaddwd 0x24518(%rip),%xmm1        # 6c010 <PW_F106_MF217>
	movdqa %xmm2,%xmm6
	movdqa %xmm2,%xmm7
	punpcklwd %xmm3,%xmm6
	punpckhwd %xmm3,%xmm7
	movdqa %xmm6,%xmm2
	movdqa %xmm7,%xmm3
	pmaddwd 0x24508(%rip),%xmm6        # 6c020 <PW_MF060_MF050>
	pmaddwd 0x24500(%rip),%xmm7        # 6c020 <PW_MF060_MF050>
	pmaddwd 0x24508(%rip),%xmm2        # 6c030 <PW_F145_MF021>
	pmaddwd 0x24500(%rip),%xmm3        # 6c030 <PW_F145_MF021>
	paddd  %xmm4,%xmm6
	paddd  %xmm5,%xmm7
	paddd  %xmm0,%xmm2
	paddd  %xmm1,%xmm3
	movdqa %xmm2,-0x20(%rbp)
	movdqa %xmm3,-0x10(%rbp)
	movdqa (%rsi),%xmm4
	movdqa 0x20(%rsi),%xmm5
	movdqa 0x60(%rsi),%xmm0
	pmullw (%rdx),%xmm4
	pmullw 0x20(%rdx),%xmm5
	pmullw 0x60(%rdx),%xmm0
	pxor   %xmm1,%xmm1
	pxor   %xmm2,%xmm2
	punpcklwd %xmm4,%xmm1
	punpckhwd %xmm4,%xmm2
	psrad  $0x2,%xmm1
	psrad  $0x2,%xmm2
	movdqa %xmm5,%xmm3
	punpcklwd %xmm0,%xmm5
	punpckhwd %xmm0,%xmm3
	pmaddwd 0x2445c(%rip),%xmm5        # 6bff0 <PW_F184_MF076>
	pmaddwd 0x24454(%rip),%xmm3        # 6bff0 <PW_F184_MF076>
	movdqa %xmm1,%xmm4
	movdqa %xmm2,%xmm0
	paddd  %xmm5,%xmm1
	paddd  %xmm3,%xmm2
	psubd  %xmm5,%xmm4
	psubd  %xmm3,%xmm0
	movdqa %xmm1,%xmm5
	movdqa %xmm2,%xmm3
	paddd  %xmm6,%xmm1
	paddd  %xmm7,%xmm2
	psubd  %xmm6,%xmm5
	psubd  %xmm7,%xmm3
	movdqa 0x2448c(%rip),%xmm6        # 6c060 <PD_DESCALE_P1_4>
	paddd  %xmm6,%xmm1
	paddd  %xmm6,%xmm2
	psrad  $0xc,%xmm1
	psrad  $0xc,%xmm2
	paddd  %xmm6,%xmm5
	paddd  %xmm6,%xmm3
	psrad  $0xc,%xmm5
	psrad  $0xc,%xmm3
	packssdw %xmm2,%xmm1
	packssdw %xmm3,%xmm5
	movdqa -0x20(%rbp),%xmm7
	movdqa -0x10(%rbp),%xmm6
	movdqa %xmm4,%xmm2
	movdqa %xmm0,%xmm3
	paddd  %xmm7,%xmm4
	paddd  %xmm6,%xmm0
	psubd  %xmm7,%xmm2
	psubd  %xmm6,%xmm3
	movdqa 0x24436(%rip),%xmm7        # 6c060 <PD_DESCALE_P1_4>
	paddd  %xmm7,%xmm4
	paddd  %xmm7,%xmm0
	psrad  $0xc,%xmm4
	psrad  $0xc,%xmm0
	paddd  %xmm7,%xmm2
	paddd  %xmm7,%xmm3
	psrad  $0xc,%xmm2
	psrad  $0xc,%xmm3
	packssdw %xmm0,%xmm4
	packssdw %xmm3,%xmm2
	movdqa %xmm1,%xmm6
	punpcklwd %xmm4,%xmm1
	punpckhwd %xmm4,%xmm6
	movdqa %xmm2,%xmm7
	punpcklwd %xmm5,%xmm2
	punpckhwd %xmm5,%xmm7
	movdqa %xmm1,%xmm0
	punpckldq %xmm2,%xmm1
	punpckhdq %xmm2,%xmm0
	movdqa %xmm6,%xmm3
	punpckldq %xmm7,%xmm6
	punpckhdq %xmm7,%xmm3

0047c86 <jsimd_idct_4x4_sse2.column_end>:
	prefetchnta 0x80(%rsi)
	prefetchnta 0xa0(%rsi)
	prefetchnta 0xc0(%rsi)
	prefetchnta 0xe0(%rsi)
	mov    0x0(%rbp),%rax
	mov    %r12,%rdi
	mov    %r13d,%eax
	pxor   %xmm4,%xmm4
	punpcklwd %xmm1,%xmm4
	psrad  $0x2,%xmm4
	punpckhwd %xmm0,%xmm1
	punpckhwd %xmm3,%xmm6
	movdqa %xmm1,%xmm5
	movdqa %xmm6,%xmm2
	pmaddwd 0x2432f(%rip),%xmm1        # 6c000 <PW_F256_F089>
	pmaddwd 0x24347(%rip),%xmm6        # 6c020 <PW_MF060_MF050>
	pmaddwd 0x2432f(%rip),%xmm5        # 6c010 <PW_F106_MF217>
	pmaddwd 0x24347(%rip),%xmm2        # 6c030 <PW_F145_MF021>
	paddd  %xmm1,%xmm6
	paddd  %xmm5,%xmm2
	punpcklwd %xmm3,%xmm0
	pmaddwd 0x242f3(%rip),%xmm0        # 6bff0 <PW_F184_MF076>
	movdqa %xmm4,%xmm7
	paddd  %xmm0,%xmm4
	psubd  %xmm0,%xmm7
	movdqa 0x2435f(%rip),%xmm1        # 6c070 <PD_DESCALE_P2_4>
	movdqa %xmm4,%xmm5
	movdqa %xmm7,%xmm3
	paddd  %xmm6,%xmm4
	paddd  %xmm2,%xmm7
	psubd  %xmm6,%xmm5
	psubd  %xmm2,%xmm3
	paddd  %xmm1,%xmm4
	paddd  %xmm1,%xmm7
	psrad  $0x13,%xmm4
	psrad  $0x13,%xmm7
	paddd  %xmm1,%xmm5
	paddd  %xmm1,%xmm3
	psrad  $0x13,%xmm5
	psrad  $0x13,%xmm3
	packssdw %xmm3,%xmm4
	packssdw %xmm5,%xmm7
	movdqa %xmm4,%xmm0
	punpcklwd %xmm7,%xmm4
	punpckhwd %xmm7,%xmm0
	movdqa %xmm4,%xmm6
	punpckldq %xmm0,%xmm4
	punpckhdq %xmm0,%xmm6
	packsswb %xmm6,%xmm4
	paddb  0x24327(%rip),%xmm4        # 6c0a0 <PB_CENTERJSAMP>
	pshufd $0x39,%xmm4,%xmm2
	pshufd $0x4e,%xmm4,%xmm1
	pshufd $0x93,%xmm4,%xmm3
	mov    (%rdi),%rdx
	mov    0x8(%rdi),%rsi
	movd   %xmm4,(%rdx,%rax,1)
	movd   %xmm2,(%rsi,%rax,1)
	mov    0x10(%rdi),%rdx
	mov    0x18(%rdi),%rsi
	movd   %xmm1,(%rdx,%rax,1)
	movd   %xmm3,(%rsi,%rax,1)
	pop    %r15
	pop    %r14
	pop    %r13
	pop    %r12
	pop    %r11
	pop    %r10
	mov    %rbp,%rsp
	pop    %rsp
	pop    %rbp
	retq   
	nop
	nop
	nop

0047dc0 <jsimd_idct_2x2_sse2>:
	push   %rbp
	mov    %rsp,%rax
	mov    %rsp,%rbp
	push   %r10
	push   %r11
	push   %r12
	push   %r13
	push   %r14
	push   %r15
	mov    %rdi,%r10
	mov    %rsi,%r11
	mov    %rdx,%r12
	mov    %rcx,%r13
	mov    %r8,%r14
	mov    %r9,%r15
	push   %rbx
	mov    %r10,%rdx
	mov    %r11,%rsi
	movdqa 0x10(%rsi),%xmm0
	movdqa 0x30(%rsi),%xmm1
	pmullw 0x10(%rdx),%xmm0
	pmullw 0x30(%rdx),%xmm1
	movdqa 0x50(%rsi),%xmm2
	movdqa 0x70(%rsi),%xmm3
	pmullw 0x50(%rdx),%xmm2
	pmullw 0x70(%rdx),%xmm3
	pcmpeqd %xmm7,%xmm7
	pslld  $0x10,%xmm7
	movdqa %xmm0,%xmm4
	movdqa %xmm2,%xmm5
	punpcklwd %xmm1,%xmm4
	punpcklwd %xmm3,%xmm5
	pmaddwd 0x2420b(%rip),%xmm4        # 6c040 <PW_F362_MF127>
	pmaddwd 0x24213(%rip),%xmm5        # 6c050 <PW_F085_MF072>
	psrld  $0x10,%xmm0
	pand   %xmm7,%xmm1
	psrld  $0x10,%xmm2
	pand   %xmm7,%xmm3
	por    %xmm1,%xmm0
	por    %xmm3,%xmm2
	pmaddwd 0x241e1(%rip),%xmm0        # 6c040 <PW_F362_MF127>
	pmaddwd 0x241e9(%rip),%xmm2        # 6c050 <PW_F085_MF072>
	paddd  %xmm5,%xmm4
	paddd  %xmm2,%xmm0
	movdqa (%rsi),%xmm6
	pmullw (%rdx),%xmm6
	movdqa %xmm6,%xmm1
	pslld  $0x10,%xmm6
	pand   %xmm7,%xmm1
	psrad  $0x1,%xmm6
	psrad  $0x1,%xmm1
	movdqa %xmm6,%xmm3
	movdqa %xmm1,%xmm5
	paddd  %xmm4,%xmm6
	paddd  %xmm0,%xmm1
	psubd  %xmm4,%xmm3
	psubd  %xmm0,%xmm5
	movdqa 0x241d2(%rip),%xmm2        # 6c080 <PD_DESCALE_P1_2>
	punpckldq %xmm3,%xmm6
	movdqa %xmm1,%xmm7
	punpcklqdq %xmm5,%xmm1
	punpckhqdq %xmm5,%xmm7
	paddd  %xmm2,%xmm6
	psrad  $0xd,%xmm6
	paddd  %xmm2,%xmm1
	paddd  %xmm2,%xmm7
	psrad  $0xd,%xmm1
	psrad  $0xd,%xmm7
	prefetchnta 0x80(%rsi)
	prefetchnta 0xa0(%rsi)
	prefetchnta 0xc0(%rsi)
	prefetchnta 0xe0(%rsi)
	mov    %r12,%rdi
	mov    %r13d,%eax
	packssdw %xmm1,%xmm1
	packssdw %xmm7,%xmm7
	pmaddwd 0x24135(%rip),%xmm1        # 6c040 <PW_F362_MF127>
	pmaddwd 0x2413d(%rip),%xmm7        # 6c050 <PW_F085_MF072>
	paddd  %xmm7,%xmm1
	pslld  $0xf,%xmm6
	movdqa %xmm6,%xmm4
	paddd  %xmm1,%xmm6
	psubd  %xmm1,%xmm4
	punpckldq %xmm4,%xmm6
	paddd  0x2415c(%rip),%xmm6        # 6c090 <PD_DESCALE_P2_2>
	psrad  $0x14,%xmm6
	packssdw %xmm6,%xmm6
	packsswb %xmm6,%xmm6
	paddb  0x24157(%rip),%xmm6        # 6c0a0 <PB_CENTERJSAMP>
	pextrw $0x0,%xmm6,%ebx
	pextrw $0x1,%xmm6,%ecx
	mov    (%rdi),%rdx
	mov    0x8(%rdi),%rsi
	mov    %bx,(%rdx,%rax,1)
	mov    %cx,(%rsi,%rax,1)
	pop    %rbx
	pop    %r15
	pop    %r14
	pop    %r13
	pop    %r12
	pop    %r11
	pop    %r10
	pop    %rbp
	retq   
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop

0047f80 <jsimd_convsamp_float_sse2>:
	push   %rbp
	mov    %rsp,%rax
	mov    %rsp,%rbp
	push   %r10
	push   %r11
	push   %r12
	push   %r13
	push   %r14
	push   %r15
	mov    %rdi,%r10
	mov    %rsi,%r11
	mov    %rdx,%r12
	mov    %rcx,%r13
	mov    %r8,%r14
	mov    %r9,%r15
	push   %rbx
	pcmpeqw %xmm7,%xmm7
	psllw  $0x7,%xmm7
	packsswb %xmm7,%xmm7
	mov    %r10,%rsi
	mov    %r11d,%eax
	mov    %r12,%rdi
	mov    $0x4,%ecx

0047fc1 <jsimd_convsamp_float_sse2.convloop>:
	mov    (%rsi),%rbx
	mov    0x8(%rsi),%rdx
	movq   (%rbx,%rax,1),%xmm0
	movq   (%rdx,%rax,1),%xmm1
	psubb  %xmm7,%xmm0
	psubb  %xmm7,%xmm1
	punpcklbw %xmm0,%xmm0
	punpcklbw %xmm1,%xmm1
	punpcklwd %xmm0,%xmm2
	punpckhwd %xmm0,%xmm0
	punpcklwd %xmm1,%xmm3
	punpckhwd %xmm1,%xmm1
	psrad  $0x18,%xmm2
	psrad  $0x18,%xmm0
	cvtdq2ps %xmm2,%xmm2
	cvtdq2ps %xmm0,%xmm0
	psrad  $0x18,%xmm3
	psrad  $0x18,%xmm1
	cvtdq2ps %xmm3,%xmm3
	cvtdq2ps %xmm1,%xmm1
	movaps %xmm2,(%rdi)
	movaps %xmm0,0x10(%rdi)
	movaps %xmm3,0x20(%rdi)
	movaps %xmm1,0x30(%rdi)
	add    $0x10,%rsi
	add    $0x40,%rdi
	dec    %rcx
	jne    47fc1 <jsimd_convsamp_float_sse2.convloop>
	pop    %rbx
	pop    %r15
	pop    %r14
	pop    %r13
	pop    %r12
	pop    %r11
	pop    %r10
	pop    %rbp
	retq   
	nop
	nop
	nop

0048040 <jsimd_quantize_float_sse2>:
	push   %rbp
	mov    %rsp,%rax
	mov    %rsp,%rbp
	push   %r10
	push   %r11
	push   %r12
	push   %r13
	push   %r14
	push   %r15
	mov    %rdi,%r10
	mov    %rsi,%r11
	mov    %rdx,%r12
	mov    %rcx,%r13
	mov    %r8,%r14
	mov    %r9,%r15
	mov    %r12,%rsi
	mov    %r11,%rdx
	mov    %r10,%rdi
	mov    $0x4,%eax

0048073 <jsimd_quantize_float_sse2.quantloop>:
	movaps (%rsi),%xmm0
	movaps 0x10(%rsi),%xmm1
	mulps  (%rdx),%xmm0
	mulps  0x10(%rdx),%xmm1
	movaps 0x20(%rsi),%xmm2
	movaps 0x30(%rsi),%xmm3
	mulps  0x20(%rdx),%xmm2
	mulps  0x30(%rdx),%xmm3
	cvtps2dq %xmm0,%xmm0
	cvtps2dq %xmm1,%xmm1
	cvtps2dq %xmm2,%xmm2
	cvtps2dq %xmm3,%xmm3
	packssdw %xmm1,%xmm0
	packssdw %xmm3,%xmm2
	movdqa %xmm0,(%rdi)
	movdqa %xmm2,0x10(%rdi)
	add    $0x40,%rsi
	add    $0x40,%rdx
	add    $0x20,%rdi
	dec    %rax
	jne    48073 <jsimd_quantize_float_sse2.quantloop>
	pop    %r15
	pop    %r14
	pop    %r13
	pop    %r12
	pop    %r11
	pop    %r10
	pop    %rbp
	retq   
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop

00480e0 <jsimd_convsamp_sse2>:
	push   %rbp
	mov    %rsp,%rax
	mov    %rsp,%rbp
	push   %r10
	push   %r11
	push   %r12
	push   %r13
	push   %r14
	push   %r15
	mov    %rdi,%r10
	mov    %rsi,%r11
	mov    %rdx,%r12
	mov    %rcx,%r13
	mov    %r8,%r14
	mov    %r9,%r15
	push   %rbx
	pxor   %xmm6,%xmm6
	pcmpeqw %xmm7,%xmm7
	psllw  $0x7,%xmm7
	mov    %r10,%rsi
	mov    %r11d,%eax
	mov    %r12,%rdi
	mov    $0x2,%ecx

0048121 <jsimd_convsamp_sse2.convloop>:
	mov    (%rsi),%rbx
	mov    0x8(%rsi),%rdx
	movq   (%rbx,%rax,1),%xmm0
	movq   (%rdx,%rax,1),%xmm1
	mov    0x10(%rsi),%rbx
	mov    0x18(%rsi),%rdx
	movq   (%rbx,%rax,1),%xmm2
	movq   (%rdx,%rax,1),%xmm3
	punpcklbw %xmm6,%xmm0
	punpcklbw %xmm6,%xmm1
	paddw  %xmm7,%xmm0
	paddw  %xmm7,%xmm1
	punpcklbw %xmm6,%xmm2
	punpcklbw %xmm6,%xmm3
	paddw  %xmm7,%xmm2
	paddw  %xmm7,%xmm3
	movdqa %xmm0,(%rdi)
	movdqa %xmm1,0x10(%rdi)
	movdqa %xmm2,0x20(%rdi)
	movdqa %xmm3,0x30(%rdi)
	add    $0x20,%rsi
	add    $0x40,%rdi
	dec    %rcx
	jne    48121 <jsimd_convsamp_sse2.convloop>
	pop    %rbx
	pop    %r15
	pop    %r14
	pop    %r13
	pop    %r12
	pop    %r11
	pop    %r10
	pop    %rbp
	retq   
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop

00481a0 <jsimd_quantize_sse2>:
	push   %rbp
	mov    %rsp,%rax
	mov    %rsp,%rbp
	push   %r10
	push   %r11
	push   %r12
	push   %r13
	push   %r14
	push   %r15
	mov    %rdi,%r10
	mov    %rsi,%r11
	mov    %rdx,%r12
	mov    %rcx,%r13
	mov    %r8,%r14
	mov    %r9,%r15
	mov    %r12,%rsi
	mov    %r11,%rdx
	mov    %r10,%rdi
	mov    $0x2,%eax

00481d3 <jsimd_quantize_sse2.quantloop>:
	movdqa (%rsi),%xmm4
	movdqa 0x10(%rsi),%xmm5
	movdqa 0x20(%rsi),%xmm6
	movdqa 0x30(%rsi),%xmm7
	movdqa %xmm4,%xmm0
	movdqa %xmm5,%xmm1
	movdqa %xmm6,%xmm2
	movdqa %xmm7,%xmm3
	psraw  $0xf,%xmm4
	psraw  $0xf,%xmm5
	psraw  $0xf,%xmm6
	psraw  $0xf,%xmm7
	pxor   %xmm4,%xmm0
	pxor   %xmm5,%xmm1
	pxor   %xmm6,%xmm2
	pxor   %xmm7,%xmm3
	psubw  %xmm4,%xmm0
	psubw  %xmm5,%xmm1
	psubw  %xmm6,%xmm2
	psubw  %xmm7,%xmm3
	paddw  0x80(%rdx),%xmm0
	paddw  0x90(%rdx),%xmm1
	paddw  0xa0(%rdx),%xmm2
	paddw  0xb0(%rdx),%xmm3
	pmulhuw (%rdx),%xmm0
	pmulhuw 0x10(%rdx),%xmm1
	pmulhuw 0x20(%rdx),%xmm2
	pmulhuw 0x30(%rdx),%xmm3
	pmulhuw 0x100(%rdx),%xmm0
	pmulhuw 0x110(%rdx),%xmm1
	pmulhuw 0x120(%rdx),%xmm2
	pmulhuw 0x130(%rdx),%xmm3
	pxor   %xmm4,%xmm0
	pxor   %xmm5,%xmm1
	pxor   %xmm6,%xmm2
	pxor   %xmm7,%xmm3
	psubw  %xmm4,%xmm0
	psubw  %xmm5,%xmm1
	psubw  %xmm6,%xmm2
	psubw  %xmm7,%xmm3
	movdqa %xmm0,(%rdi)
	movdqa %xmm1,0x10(%rdi)
	movdqa %xmm2,0x20(%rdi)
	movdqa %xmm3,0x30(%rdi)
	add    $0x40,%rsi
	add    $0x40,%rdx
	add    $0x40,%rdi
	dec    %rax
	jne    481d3 <jsimd_quantize_sse2.quantloop>
	pop    %r15
	pop    %r14
	pop    %r13
	pop    %r12
	pop    %r11
	pop    %r10
	pop    %rbp
	retq   
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop
	nop

ly of section .fini:

00482e0 <_fini>:
	endbr64 
	sub    $0x8,%rsp
	add    $0x8,%rsp
	retq   
